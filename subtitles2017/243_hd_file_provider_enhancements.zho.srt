1
00:00:07,516 --> 00:00:16,500
[人群声]

2
00:00:23,041 --> 00:00:25,041
[掌声]

3
00:00:25,066 --> 00:00:26,466
&gt;&gt; 早上好 欢迎大家来

4
00:00:27,616 --> 00:00:28,856
我的名字叫 Jean-Gabriel

5
00:00:28,946 --> 00:00:29,846
希望大家这周

6
00:00:29,846 --> 00:00:30,446
过的很愉快

7
00:00:30,726 --> 00:00:31,756
我们在这里要谈一谈

8
00:00:31,756 --> 00:00:33,426
File Provider 一项

9
00:00:33,426 --> 00:00:34,826
新文件 App  背后的

10
00:00:35,676 --> 00:00:35,746
技术

11
00:00:37,116 --> 00:00:38,636
我们将会看到什么是

12
00:00:38,636 --> 00:00:41,046
File Provider 以及 iOS 11 中

13
00:00:41,046 --> 00:00:43,756
有哪些新的 API 可以让你

14
00:00:44,176 --> 00:00:45,986
将文件从云端枚举至

15
00:00:45,986 --> 00:00:48,026
设备上

16
00:00:48,026 --> 00:00:49,496
在设备上修改文件并上传至云端

17
00:00:49,926 --> 00:00:50,986
也可以自定义你的 File Provider

18
00:00:50,986 --> 00:00:52,706
以便展示你的

19
00:00:52,706 --> 00:00:53,866
不突出的特性

20
00:00:56,206 --> 00:00:57,416
File Provider 在 iOS 8 时

21
00:00:57,416 --> 00:00:59,836
就出现了 就其本质而言

22
00:00:59,886 --> 00:01:02,646
它们为各种应用程序

23
00:00:59,886 --> 00:01:02,646
它们为各种应用程序

24
00:01:02,646 --> 00:01:03,296
实体化文件

25
00:01:03,296 --> 00:01:04,306
所以 各应用程序可以

26
00:01:04,306 --> 00:01:06,846
在 File Provider 的帮助下

27
00:01:06,846 --> 00:01:08,256
保持对文件的偏好设定

28
00:01:08,256 --> 00:01:09,646
当它们需要这些文件时 File Provider

29
00:01:09,646 --> 00:01:11,086
就可以提供文件完成这项使命

30
00:01:12,406 --> 00:01:14,286
不过 我们今天要讲的是

31
00:01:14,286 --> 00:01:16,406
新的 API 

32
00:01:16,406 --> 00:01:18,136
用来将文稿从云端枚举至设备

33
00:01:18,136 --> 00:01:18,976
的 API

34
00:01:19,626 --> 00:01:22,556
因此这次演讲的听众应该是

35
00:01:22,556 --> 00:01:24,216
拥有服务器

36
00:01:24,216 --> 00:01:26,486
并且服务器上有用户文稿

37
00:01:26,486 --> 00:01:27,776
并且想要将

38
00:01:27,776 --> 00:01:29,486
这些文稿移送至 iPad 和

39
00:01:29,486 --> 00:01:29,856
iPhone 上的人

40
00:01:32,316 --> 00:01:34,886
我们来看一看文件 App 

41
00:01:35,436 --> 00:01:37,886
文件 App  是

42
00:01:37,886 --> 00:01:40,126
一个对新系统 UI 的瘦包装器

43
00:01:40,126 --> 00:01:41,296
它被称作文稿浏览器

44
00:01:41,296 --> 00:01:42,856
在系统中

45
00:01:42,856 --> 00:01:43,336
被普遍使用

46
00:01:44,266 --> 00:01:45,926
这里是用户查询

47
00:01:45,926 --> 00:01:48,296
组织 分享

48
00:01:48,366 --> 00:01:49,376
打开文稿的地方

49
00:01:52,776 --> 00:01:54,896
File Provider 就位于“位置”

50
00:01:54,896 --> 00:01:55,906
的下方

51
00:01:56,366 --> 00:01:57,746
这里有你的云存储

52
00:01:57,746 --> 00:02:01,126
的入口点 而 iCloud Drive

53
00:01:57,746 --> 00:02:01,126
的入口点 而 iCloud Drive

54
00:02:01,126 --> 00:02:02,436
就是其中之一 

55
00:02:03,716 --> 00:02:04,186
这很棒

56
00:02:04,396 --> 00:02:05,956
这意味着我们今天要涉及的

57
00:02:05,956 --> 00:02:07,446
API 都是

58
00:02:07,916 --> 00:02:09,356
经过 iCloud Drive 执行的

59
00:02:09,425 --> 00:02:10,826
已经通过了测试

60
00:02:10,826 --> 00:02:11,886
你可以从中获得参考

61
00:02:11,886 --> 00:02:13,246
如果你想知道

62
00:02:13,246 --> 00:02:15,846
比如给你的的文件重命名为

63
00:02:15,846 --> 00:02:17,106
相同文件夹下另一文件

64
00:02:17,106 --> 00:02:18,106
的名字时会发生什么

65
00:02:18,106 --> 00:02:19,196
你可以直接

66
00:02:19,196 --> 00:02:20,466
在 iCloud Drive 上试验

67
00:02:20,466 --> 00:02:21,246
看看会出现怎样的情况

68
00:02:22,566 --> 00:02:24,736
这也意味你的文稿

69
00:02:24,736 --> 00:02:26,296
储存在类似 iCloud Drive

70
00:02:26,296 --> 00:02:27,706
的 File Provider 上时

71
00:02:27,706 --> 00:02:29,186
是 OS 上的

72
00:02:29,186 --> 00:02:29,546
“一等公民”

73
00:02:29,896 --> 00:02:31,206
它们随处可得

74
00:02:31,206 --> 00:02:32,686
同 iCloud Drive 文稿一样

75
00:02:32,686 --> 00:02:33,706
突出

76
00:02:34,016 --> 00:02:35,466
实际上 在这张屏幕快照中

77
00:02:35,466 --> 00:02:36,466
iCloud Drive 位于顶端

78
00:02:36,466 --> 00:02:38,056
不过用户可以重新配置

79
00:02:38,056 --> 00:02:39,546
在 File Provider上

80
00:02:39,666 --> 00:02:41,186
只留下他们真正想要的

81
00:02:42,616 --> 00:02:44,356
这就是关于

82
00:02:44,356 --> 00:02:45,856
File Provider 我顺便

83
00:02:46,526 --> 00:02:47,356
想提及的一点

84
00:02:47,616 --> 00:02:49,106
“我的 iPad”是唯一的

85
00:02:49,106 --> 00:02:50,246
提供本地文件的

86
00:02:50,246 --> 00:02:51,436
是唯一

87
00:02:51,436 --> 00:02:52,796
不显示储存在云中的文件

88
00:02:52,796 --> 00:02:54,846
的文件提供器

89
00:02:54,846 --> 00:02:57,316
它让 App 向其他应用程序

90
00:02:57,946 --> 00:02:59,626
显示其文稿

91
00:02:59,626 --> 00:03:01,406
和本地储存的文稿

92
00:02:59,626 --> 00:03:01,406
和本地储存的文稿

93
00:03:04,656 --> 00:03:06,146
让我们看看

94
00:03:06,146 --> 00:03:07,676
在这个平台上文稿浏览器所处的位置

95
00:03:08,556 --> 00:03:09,886
它就位于基于文稿的应用程序

96
00:03:09,886 --> 00:03:11,156
下方

97
00:03:11,526 --> 00:03:12,926
就是我们刚刚看到的那些文件 App 

98
00:03:13,736 --> 00:03:15,276
比如全部的 iWork App

99
00:03:15,276 --> 00:03:17,416
它们也是新的系统 UI 上

100
00:03:17,416 --> 00:03:19,026
的一部分

101
00:03:19,026 --> 00:03:20,786
所有 iOS 11 上的第三方

102
00:03:20,786 --> 00:03:22,156
文件 App 

103
00:03:22,706 --> 00:03:25,196
在文稿浏览器 UI

104
00:03:25,196 --> 00:03:27,016
的另一边就是

105
00:03:27,016 --> 00:03:28,476
File Provider 

106
00:03:28,476 --> 00:03:30,066
File Provider 将给系统 UI 提供文件

107
00:03:30,066 --> 00:03:31,626
而基于文稿的应用程序

108
00:03:31,626 --> 00:03:33,146
则可以挑选

109
00:03:34,186 --> 00:03:35,716
从某个 File Provider 中

110
00:03:35,716 --> 00:03:36,926
打开其中的一个文稿

111
00:03:36,926 --> 00:03:39,506
修改或者创建

112
00:03:40,846 --> 00:03:41,296
新的文稿

113
00:03:41,506 --> 00:03:43,006
之所以

114
00:03:43,006 --> 00:03:44,376
基于文稿的应用程序现在需要

115
00:03:44,586 --> 00:03:46,456
进行适配 就是因为只有

116
00:03:46,696 --> 00:03:49,006
这唯一一个 API 能够访问

117
00:03:49,006 --> 00:03:50,916
所有用户储存其文稿

118
00:03:50,916 --> 00:03:51,586
的地方

119
00:03:52,216 --> 00:03:53,886
替换目前

120
00:03:53,886 --> 00:03:55,136
必须适配多个 SDK

121
00:03:55,136 --> 00:03:55,376
的情况

122
00:03:56,766 --> 00:03:58,326
File Provider 需要适配

123
00:03:58,326 --> 00:03:59,996
是因为它的隐私模式

124
00:03:59,996 --> 00:04:01,246
这个非常棒

125
00:03:59,996 --> 00:04:01,246
这个非常棒

126
00:04:01,246 --> 00:04:03,596
这样基于文稿的应用程序

127
00:04:03,706 --> 00:04:05,246
一次打开的一个文稿

128
00:04:06,486 --> 00:04:08,906
完全是用户配置的访问

129
00:04:09,226 --> 00:04:11,286
系统 UI 是在进程外的

130
00:04:11,586 --> 00:04:12,726
基于文稿的应用程序

131
00:04:12,726 --> 00:04:14,926
无法得知其选定的文件

132
00:04:14,926 --> 00:04:16,046
旁的其它文件是什么

133
00:04:16,046 --> 00:04:18,136
甚至在用户选定文稿前

134
00:04:18,136 --> 00:04:19,875
都不知道

135
00:04:19,875 --> 00:04:21,226
安装了哪些 File Provider

136
00:04:23,596 --> 00:04:25,666
这里有两个关键的 API

137
00:04:26,326 --> 00:04:27,266
UIDocumentBrowser

138
00:04:27,266 --> 00:04:29,626
和 ViewController

139
00:04:29,626 --> 00:04:30,806
二者都是基于文稿应用程序

140
00:04:30,806 --> 00:04:31,526
的 SDK 还有

141
00:04:31,526 --> 00:04:33,156
NSFileProviderExtension

142
00:04:36,116 --> 00:04:37,166
我们今天不讲

143
00:04:37,166 --> 00:04:37,976
UIDocumentBrowser

144
00:04:37,976 --> 00:04:38,666
和 ViewController

145
00:04:38,906 --> 00:04:40,176
这两个在昨天会议中已经讲过了

146
00:04:40,546 --> 00:04:42,416
如果你错过了关于

147
00:04:42,416 --> 00:04:43,966
构建基于文稿应用程序

148
00:04:43,966 --> 00:04:45,466
的讲座的话

149
00:04:45,466 --> 00:04:46,106
我建议你去看看视频

150
00:04:46,106 --> 00:04:47,776
我们今天要讲的是

151
00:04:47,776 --> 00:04:48,486
另一端

152
00:04:48,536 --> 00:04:49,806
也就是 NSFileProviderExtension

153
00:04:52,656 --> 00:04:54,886
我们再看一下

154
00:04:54,886 --> 00:04:55,016
文件 App 

155
00:04:55,716 --> 00:04:57,486
用户访问 

156
00:04:57,486 --> 00:05:00,806
并同文稿进行互动有

157
00:04:57,486 --> 00:05:00,806
并同文稿进行互动有

158
00:05:00,806 --> 00:05:02,486
两个主要的方法 对应着

159
00:05:02,486 --> 00:05:03,686
应用程序上的两个标签

160
00:05:04,036 --> 00:05:05,476
第一个标签是“浏览”标签

161
00:05:06,156 --> 00:05:07,736
在这里 用户

162
00:05:07,736 --> 00:05:11,046
可以在你的云端搜索内容 

163
00:05:11,046 --> 00:05:12,326
并将其下载至设备上

164
00:05:13,076 --> 00:05:14,906
在这个模式下 你的 File Provider 扩展

165
00:05:14,906 --> 00:05:17,136
如同管道一般 

166
00:05:17,136 --> 00:05:18,866
连接着系统 UI 和你的服务器

167
00:05:18,866 --> 00:05:20,236
事实上也不期望它

168
00:05:20,236 --> 00:05:23,186
在离线的环境下工作

169
00:05:23,366 --> 00:05:25,546
一旦用户在“浏览”标签

170
00:05:25,546 --> 00:05:26,946
选择过文稿后 

171
00:05:26,946 --> 00:05:28,096
这些被选择的文稿也就会出现在

172
00:05:28,096 --> 00:05:28,806
“最近”标签中

173
00:05:28,806 --> 00:05:31,416
“最近”标签是另一种

174
00:05:31,416 --> 00:05:33,826
模式 它是一个文稿的扁平列表

175
00:05:33,826 --> 00:05:34,896
列表中的文稿都

176
00:05:34,896 --> 00:05:38,286
同原文稿的来源相同 

177
00:05:38,316 --> 00:05:39,666
和用户极具相关性

178
00:05:39,666 --> 00:05:40,886
这里就是用户

179
00:05:40,886 --> 00:05:42,186
可以查找他想要打开的文件

180
00:05:42,186 --> 00:05:42,496
的地方

181
00:05:42,496 --> 00:05:43,446
当然了 文件一定会

182
00:05:43,446 --> 00:05:43,796
出现在那里

183
00:05:47,816 --> 00:05:50,666
所以 我们提到两个栏标“浏览”和“最近”

184
00:05:50,666 --> 00:05:52,026
所以“浏览”标签是用来

185
00:05:52,026 --> 00:05:53,716
给 File Provider 提供新内容的 

186
00:05:53,896 --> 00:05:55,996
提供至线上文件夹中 

187
00:05:55,996 --> 00:05:57,486
然后选取文稿

188
00:05:57,946 --> 00:06:00,016
而“最近”标签则是用来显示

189
00:05:57,946 --> 00:06:00,016
而“最近”标签则是用来显示

190
00:06:00,016 --> 00:06:01,276
工作集的 

191
00:06:01,276 --> 00:06:02,256
我们现在就来谈谈

192
00:06:02,256 --> 00:06:02,706
工作集

193
00:06:03,416 --> 00:06:05,256
它不是基于文件夹的 

194
00:06:05,256 --> 00:06:07,056
而且横跨多个 File Provider

195
00:06:07,786 --> 00:06:10,066
在一个工作集中 

196
00:06:10,676 --> 00:06:12,416
有这些文稿

197
00:06:12,546 --> 00:06:14,106
最近打开的文稿 

198
00:06:14,106 --> 00:06:16,846
最近使用过的文稿 收藏过的 加过标签的文稿

199
00:06:16,846 --> 00:06:20,326
和文件夹 通过或者由用户

200
00:06:20,326 --> 00:06:22,106
分享过的文稿 

201
00:06:22,386 --> 00:06:23,866
先前下载到设备上 

202
00:06:23,866 --> 00:06:25,206
可以离线获取的

203
00:06:25,206 --> 00:06:26,226
文稿 

204
00:06:26,756 --> 00:06:30,036
以及近期删除的文稿

205
00:06:30,036 --> 00:06:32,326
为了在不同的 File Provider 之间 

206
00:06:32,326 --> 00:06:33,646
确保用户体验能够保持一致 

207
00:06:33,646 --> 00:06:35,686
我们要求你 

208
00:06:35,686 --> 00:06:36,696
把这些文件都放在工作集中

209
00:06:37,156 --> 00:06:38,336
当然 各位对于特定领域

210
00:06:38,336 --> 00:06:38,716
的了解更多

211
00:06:38,716 --> 00:06:39,756
知道哪些是与用户

212
00:06:39,756 --> 00:06:40,026
相关的

213
00:06:40,026 --> 00:06:41,976
如果需要的话 

214
00:06:41,976 --> 00:06:44,216
各位可以选择在工作集中

215
00:06:44,216 --> 00:06:44,526
加入更多

216
00:06:45,016 --> 00:06:48,656
不过 要给大家提个醒：我们其实

217
00:06:48,656 --> 00:06:50,646
会对设备上的工作集

218
00:06:50,646 --> 00:06:51,126
进行 Smart Caching （智能快取）

219
00:06:51,126 --> 00:06:52,296
所以 一旦某些东西加进了

220
00:06:52,296 --> 00:06:53,416
工作集中 你就必须

221
00:06:53,416 --> 00:06:53,916
保证其同步

222
00:06:54,956 --> 00:06:58,016
我之后也会再谈到这点

223
00:06:58,016 --> 00:07:00,106
在“最近”标签的

224
00:06:58,016 --> 00:07:00,106
在“最近”标签的

225
00:07:00,106 --> 00:07:02,446
文稿浏览器中 各位可以找到

226
00:07:02,446 --> 00:07:03,256
工作集

227
00:07:03,346 --> 00:07:04,696
每个 File Provider 都有可能

228
00:07:04,696 --> 00:07:05,976
向工作集中

229
00:07:05,976 --> 00:07:06,896
提供不同的文稿

230
00:07:08,246 --> 00:07:10,916
我们就不在这里

231
00:07:10,916 --> 00:07:11,266
演示了

232
00:07:11,786 --> 00:07:13,296
在我们合并文稿列表时

233
00:07:13,296 --> 00:07:15,826
因为文稿都来自于

234
00:07:15,826 --> 00:07:16,886
不同的 File Provider 扩展

235
00:07:16,886 --> 00:07:18,426
所以当在 UI 上显示的时候 

236
00:07:18,426 --> 00:07:19,326
就会出现奇怪的动画模拟效果 

237
00:07:19,326 --> 00:07:21,246
绘制上的小错误

238
00:07:21,246 --> 00:07:22,426
所以 我们不这么做

239
00:07:22,426 --> 00:07:24,286
我们要做的是

240
00:07:24,286 --> 00:07:26,436
枚举一个工作集的索引

241
00:07:26,436 --> 00:07:28,326
在 UI 出现时 

242
00:07:28,326 --> 00:07:29,266
这一工作集的索引被保存在系统中

243
00:07:29,336 --> 00:07:30,216
而你的

244
00:07:30,216 --> 00:07:32,026
File Provider 扩展

245
00:07:32,376 --> 00:07:32,756
甚至都没有被启用

246
00:07:33,836 --> 00:07:34,846
我们要谈谈 这一索引

247
00:07:34,846 --> 00:07:35,716
是如何构建的

248
00:07:36,976 --> 00:07:39,326
索引是本地的 

249
00:07:39,326 --> 00:07:39,986
位于设备上的

250
00:07:40,156 --> 00:07:42,056
它是由来自不同 File Provider 的

251
00:07:42,056 --> 00:07:43,276
工作集

252
00:07:43,276 --> 00:07:44,186
汇聚而成的

253
00:07:44,556 --> 00:07:45,866
因为索引是本地的 

254
00:07:45,866 --> 00:07:47,116
这就意味着它

255
00:07:47,216 --> 00:07:47,726
支持离线使用

256
00:07:47,726 --> 00:07:49,376
这就意味着 在离线时 

257
00:07:49,376 --> 00:07:50,806
如果我启动 UI 文稿浏览器 

258
00:07:50,806 --> 00:07:52,086
我就能够看到

259
00:07:52,086 --> 00:07:52,556
我的近期文稿

260
00:07:52,906 --> 00:07:53,696
当然 这不是说所有的文稿在所有时间里都

261
00:07:53,696 --> 00:07:54,916
在本地设备上 

262
00:07:54,916 --> 00:07:56,506
能够离线访问

263
00:07:56,876 --> 00:07:57,716
但这意味着构建起的 UI 

264
00:07:57,886 --> 00:08:01,316
的很多文稿已经缓存

265
00:07:57,886 --> 00:08:01,316
的很多文稿已经缓存

266
00:08:01,316 --> 00:08:01,826
到了设备上

267
00:08:02,176 --> 00:08:06,506
因为索引处于本地 

268
00:08:06,506 --> 00:08:09,536
并可以离线访问 

269
00:08:09,536 --> 00:08:10,106
所以它也出现在 Spotlight 中

270
00:08:10,106 --> 00:08:11,866
在系统索引的帮助下 

271
00:08:12,626 --> 00:08:14,296
工作集会出现在 Spotlight 中 

272
00:08:14,356 --> 00:08:16,266
而用户就可以在 Spotlight 中选取

273
00:08:16,266 --> 00:08:18,086
一个文稿 而此时你的

274
00:08:18,086 --> 00:08:19,686
File Provider 扩展

275
00:08:20,266 --> 00:08:22,526
也就会被唤醒

276
00:08:22,736 --> 00:08:25,106
接下来我们看看

277
00:08:25,326 --> 00:08:27,266
如何向工作集索引提供文稿 

278
00:08:27,266 --> 00:08:28,276
这个过程在后台进行 

279
00:08:28,276 --> 00:08:29,696
发生在文稿浏览器

280
00:08:29,696 --> 00:08:30,726
运行之前

281
00:08:32,126 --> 00:08:33,416
你要做的第一件事 

282
00:08:33,486 --> 00:08:35,836
就是必须将你的工作集

283
00:08:35,836 --> 00:08:38,186
从服务器上同步至

284
00:08:38,186 --> 00:08:39,025
设备上

285
00:08:39,346 --> 00:08:40,596
仔细看那些

286
00:08:40,596 --> 00:08:41,626
File Provider 扩展框

287
00:08:42,436 --> 00:08:45,046
我们要求你

288
00:08:45,046 --> 00:08:47,856
为在设备上的工作集中的所有文件

289
00:08:47,856 --> 00:08:49,176
保存一个 

290
00:08:49,176 --> 00:08:49,636
包含元数据的数据库

291
00:08:49,636 --> 00:08:51,276
实际上 两个方向都应该同步 

292
00:08:51,276 --> 00:08:53,026
因为本地

293
00:08:53,136 --> 00:08:54,066
和远程都会有变更出现

294
00:08:54,676 --> 00:08:56,676
第二步 系统将会

295
00:08:56,676 --> 00:08:59,306
从你的 File Provider 中 

296
00:08:59,306 --> 00:09:00,866
对工作集进行枚举 

297
00:08:59,306 --> 00:09:00,866
对工作集进行枚举 

298
00:09:00,866 --> 00:09:02,116
以此

299
00:09:02,116 --> 00:09:04,536
来生成索引

300
00:09:06,006 --> 00:09:07,306
这些都发生在后台

301
00:09:07,306 --> 00:09:09,086
稍后 当 UI 出现时 

302
00:09:09,086 --> 00:09:11,166
系统将会枚举你的

303
00:09:11,166 --> 00:09:12,646
工作集索引 在文稿浏览器中显示“最近”

304
00:09:12,646 --> 00:09:13,816
而不会

305
00:09:13,816 --> 00:09:16,036
唤醒你的

306
00:09:16,036 --> 00:09:17,346
File Provider 扩展

307
00:09:17,346 --> 00:09:20,046
好吧 我们要求

308
00:09:20,046 --> 00:09:20,966
各位做的事情还不少

309
00:09:20,966 --> 00:09:22,446
我们要求大家进行同步 

310
00:09:22,446 --> 00:09:23,906
将部分文稿

311
00:09:23,906 --> 00:09:24,516
进行同步

312
00:09:25,626 --> 00:09:26,886
如果你不进行部分同步的话 

313
00:09:26,986 --> 00:09:28,176
可能就要

314
00:09:29,016 --> 00:09:31,036
将用户的所有文稿

315
00:09:31,036 --> 00:09:32,056
都同步到设备上

316
00:09:32,376 --> 00:09:34,216
你可能就会遇到

317
00:09:34,216 --> 00:09:36,116
规模化问题 

318
00:09:36,696 --> 00:09:37,406
所以一定要考虑清楚再进行操作

319
00:09:39,956 --> 00:09:42,416
目前为止 

320
00:09:42,416 --> 00:09:45,406
我们讲了两种浏览文稿

321
00:09:45,406 --> 00:09:46,366
的方法

322
00:09:46,366 --> 00:09:48,256
“最近”标签可以

323
00:09:48,256 --> 00:09:49,866
显示工作集 

324
00:09:49,866 --> 00:09:50,906
它在后台同步至设备上 

325
00:09:50,906 --> 00:09:53,026
还有“浏览”标签 

326
00:09:53,026 --> 00:09:55,166
它是基于

327
00:09:55,166 --> 00:09:57,156
对文件夹的线上枚举

328
00:09:57,666 --> 00:09:59,206
接下来 我要请 Pierre

329
00:09:59,206 --> 00:10:00,776
来给大家展示

330
00:09:59,206 --> 00:10:00,776
来给大家展示

331
00:10:00,776 --> 00:10:01,886
如何创建一个 File Provider 扩展

332
00:10:02,796 --> 00:10:04,256
谢谢 Pierre

333
00:10:04,256 --> 00:10:05,576
&gt;&gt; 谢谢 Jean-Gabriel

334
00:10:06,386 --> 00:10:09,076
我们来看看如何

335
00:10:09,076 --> 00:10:10,756
创建一个 File Provider 扩展

336
00:10:10,756 --> 00:10:12,966
首先 我们要看看如何

337
00:10:12,966 --> 00:10:14,966
先创建一个项目 然后是如何

338
00:10:14,966 --> 00:10:16,136
提供一个单一条目 如何

339
00:10:16,496 --> 00:10:18,866
枚举一系列的条目 

340
00:10:18,866 --> 00:10:19,876
然后 

341
00:10:19,946 --> 00:10:22,016
我会和大家一起

342
00:10:22,016 --> 00:10:26,006
看看如何修改这些条目

343
00:10:26,006 --> 00:10:28,576
提供自定义操作 

344
00:10:28,576 --> 00:10:29,846
以及一项十分强大的功能 

345
00:10:29,846 --> 00:10:31,906
就是向第三方应用程序

346
00:10:31,906 --> 00:10:33,616
提供服务

347
00:10:33,616 --> 00:10:34,446
这意味着什么呢

348
00:10:34,446 --> 00:10:35,876
这意味着你的 File Provider 扩展

349
00:10:35,876 --> 00:10:37,626
能够提供其自有的 API 

350
00:10:37,626 --> 00:10:39,916
也就是你自己的 API

351
00:10:39,916 --> 00:10:40,706
给其它的第三方 App

352
00:10:41,696 --> 00:10:42,756
这个功能棒极了 

353
00:10:42,756 --> 00:10:44,296
大家现在都该留下听我讲 

354
00:10:44,296 --> 00:10:47,626
或者回去后

355
00:10:48,656 --> 00:10:48,786
在网上看看这个视频

356
00:10:49,896 --> 00:10:50,926
从头创建一个

357
00:10:50,926 --> 00:10:52,186
File Provider 扩展

358
00:10:52,186 --> 00:10:53,256
十分简单

359
00:10:53,256 --> 00:10:55,196
这是一个 Xcode 模板

360
00:10:55,656 --> 00:10:56,946
File Provider Extension

361
00:10:56,946 --> 00:10:57,596
只要点击一下它

362
00:10:57,596 --> 00:10:58,426
一下就完成了

363
00:10:59,046 --> 00:11:00,366
然后我们开始真正的工作

364
00:10:59,046 --> 00:11:00,366
然后我们开始真正的工作

365
00:11:00,496 --> 00:11:01,466
你需要将 NSFileProviderExtension

366
00:11:01,466 --> 00:11:03,016
加入子类别

367
00:11:03,996 --> 00:11:06,146
如果你已经有了一个

368
00:11:06,146 --> 00:11:07,896
File Provider 扩展

369
00:11:07,896 --> 00:11:10,306
在这种情况下 

370
00:11:10,306 --> 00:11:12,746
你应该将支持的枚举 Key

371
00:11:12,746 --> 00:11:13,586
加入到你的 info.plist

372
00:11:13,966 --> 00:11:15,816
这就相当于你告知系统 

373
00:11:15,816 --> 00:11:17,676
你想要用这个文件扩展 

374
00:11:17,676 --> 00:11:19,736
并且使用新的 UI

375
00:11:19,856 --> 00:11:21,976
来打开文稿

376
00:11:23,056 --> 00:11:26,626
这就是你应该

377
00:11:26,626 --> 00:11:28,296
创建的 File Provider 扩展子类别

378
00:11:28,556 --> 00:11:30,326
的主要部分

379
00:11:31,056 --> 00:11:32,586
你的 File Provider 扩展子类别

380
00:11:32,586 --> 00:11:34,196
将会发送

381
00:11:34,196 --> 00:11:35,856
条目元数据

382
00:11:35,856 --> 00:11:37,636
需要你执行

383
00:11:37,636 --> 00:11:39,226
NSFileProvider 协议和

384
00:11:39,226 --> 00:11:42,806
NSFileProviderItem

385
00:11:42,806 --> 00:11:43,296
协议

386
00:11:44,116 --> 00:11:46,656
那些条目将会通过

387
00:11:46,656 --> 00:11:50,056
你提供的字符串被识别 

388
00:11:50,056 --> 00:11:51,726
然后通过文件网址

389
00:11:51,726 --> 00:11:53,306
实体化在磁盘上

390
00:11:54,376 --> 00:11:58,716
你的 File Provider 的

391
00:11:58,756 --> 00:12:01,286
文件夹内容是通过执行

392
00:11:58,756 --> 00:12:01,286
文件夹内容是通过执行

393
00:12:01,286 --> 00:12:02,936
NSFileProviderEnumerator

394
00:12:02,936 --> 00:12:04,556
来显示的

395
00:12:05,006 --> 00:12:07,176
这个听起来很复杂 

396
00:12:07,176 --> 00:12:07,666
其实不然

397
00:12:08,296 --> 00:12:10,936
在我们细致讲解之前 

398
00:12:10,936 --> 00:12:12,116
我们先看一下手头需要完成的

399
00:12:12,176 --> 00:12:14,096
任务的大框架 

400
00:12:14,096 --> 00:12:16,606
在我们创建这些后

401
00:12:16,636 --> 00:12:18,526
看一下

402
00:12:18,526 --> 00:12:20,046
File Provider 扩展的结构

403
00:12:20,246 --> 00:12:21,476
将会是如何的

404
00:12:22,046 --> 00:12:23,346
第一项任务 我们需要为

405
00:12:23,346 --> 00:12:24,726
一个特定的条目标识符 

406
00:12:24,726 --> 00:12:25,666
提供元数据

407
00:12:26,756 --> 00:12:28,966
如果你有数据库的话 

408
00:12:28,966 --> 00:12:30,516
这个操作就很简单

409
00:12:30,516 --> 00:12:32,156
所以 有一个数据库能帮你很多

410
00:12:32,296 --> 00:12:35,926
然后 你需要将网址映射到

411
00:12:35,926 --> 00:12:36,876
条目表标识符

412
00:12:36,876 --> 00:12:39,746
这可能是

413
00:12:39,746 --> 00:12:40,486
你的数据库中的一个分号

414
00:12:40,756 --> 00:12:43,186
最后 你需要负责

415
00:12:43,186 --> 00:12:46,046
管理磁盘储存 

416
00:12:46,156 --> 00:12:48,186
不论文稿对应的数据是

417
00:12:48,186 --> 00:12:50,106
本地的还是线上的

418
00:12:50,836 --> 00:12:52,786
这个是 File Provider 扩展

419
00:12:52,786 --> 00:12:53,816
的第二部分

420
00:12:54,686 --> 00:12:57,076
在磁盘储存中 

421
00:12:57,076 --> 00:12:58,266
当然 文件可能在这里

422
00:12:58,266 --> 00:13:01,396
也可能不在

423
00:12:58,266 --> 00:13:01,396
也可能不在

424
00:13:02,306 --> 00:13:04,186
好的 我们已经看过基本的结构了

425
00:13:04,266 --> 00:13:06,296
接下来看看如何

426
00:13:06,296 --> 00:13:06,786
提供一个条目

427
00:13:06,876 --> 00:13:08,466
提供一个条目

428
00:13:08,466 --> 00:13:08,866
是什么意思呢

429
00:13:09,736 --> 00:13:11,216
首先 你需要提供一个

430
00:13:11,216 --> 00:13:11,516
文件网址

431
00:13:11,866 --> 00:13:15,016
然后为你的条目提供

432
00:13:15,876 --> 00:13:17,306
文件内容 元数据和缩略图

433
00:13:17,766 --> 00:13:19,236
这就是你需要做的

434
00:13:20,016 --> 00:13:22,116
你可能会问 

435
00:13:22,116 --> 00:13:23,396
我该怎么样提供一个文件网址呢

436
00:13:24,486 --> 00:13:26,856
File Provider 可以直接操控

437
00:13:27,116 --> 00:13:29,246
File Provider 条目

438
00:13:29,246 --> 00:13:31,006
和 File Provider 条目标识符

439
00:13:31,006 --> 00:13:32,146
但是不能直接操控文件网址

440
00:13:32,986 --> 00:13:35,986
但是 基于文稿的 App

441
00:13:35,986 --> 00:13:40,386
需要文件网址 所以我们需要

442
00:13:40,386 --> 00:13:43,076
在二者间建立连接 

443
00:13:43,616 --> 00:13:45,856
我们举个例子

444
00:13:45,856 --> 00:13:47,156
当用户在文件 App  中轻按一个文件时 

445
00:13:47,156 --> 00:13:49,336
文件 App  此时

446
00:13:49,566 --> 00:13:50,746
只能访问

447
00:13:50,746 --> 00:13:51,916
你的条目标识符

448
00:13:52,396 --> 00:13:53,416
所以  

449
00:13:53,416 --> 00:13:55,676
在调用基于文稿的 App 前  

450
00:13:55,676 --> 00:13:57,116
首先需要

451
00:13:57,116 --> 00:13:58,216
调用你的

452
00:13:58,216 --> 00:13:59,006
File Provider 扩展分类别

453
00:14:00,196 --> 00:14:02,156
带有标识符的 urlForItem

454
00:14:02,156 --> 00:14:04,336
会被调用 

455
00:14:04,336 --> 00:14:06,016
然后你需要在你的数据库中查找 

456
00:14:06,016 --> 00:14:08,076
找到特定条目标识符

457
00:14:08,076 --> 00:14:09,306
的网址

458
00:14:09,306 --> 00:14:11,146
然后你将会

459
00:14:11,146 --> 00:14:12,736
返回到

460
00:14:12,736 --> 00:14:12,926
基于文稿的 App 中去

461
00:14:13,616 --> 00:14:15,176
我不太确定系统会不会

462
00:14:15,176 --> 00:14:16,316
帮你完成这项操作 

463
00:14:16,316 --> 00:14:18,336
不过你可以告知系统 

464
00:14:18,336 --> 00:14:19,826
基于文稿的 App 需要哪些条目 

465
00:14:19,826 --> 00:14:20,046
然后这一步就完成了

466
00:14:20,936 --> 00:14:22,236
此时 

467
00:14:22,236 --> 00:14:23,606
基于文稿的 App 通过网址

468
00:14:23,606 --> 00:14:24,466
打开一个文件

469
00:14:24,466 --> 00:14:25,856
我之前讲过了

470
00:14:25,856 --> 00:14:27,496
数据库网址和

471
00:14:27,496 --> 00:14:29,936
条目标识符映射

472
00:14:29,936 --> 00:14:30,406
相关的东西

473
00:14:30,406 --> 00:14:31,766
我建议你

474
00:14:32,016 --> 00:14:33,616
在文件网址中

475
00:14:33,616 --> 00:14:35,406
添加条目标识符

476
00:14:36,436 --> 00:14:37,966
这样的话就会提供很多便利 

477
00:14:37,966 --> 00:14:40,636
你可以不用进行数据库查找 

478
00:14:40,636 --> 00:14:44,816
也可以在重命名文件中

479
00:14:44,816 --> 00:14:45,586
跟踪条目

480
00:14:45,586 --> 00:14:47,056
另外 你也最好

481
00:14:47,056 --> 00:14:49,396
在磁盘储存中

482
00:14:49,396 --> 00:14:50,086
保存一个扁平列表

483
00:14:50,246 --> 00:14:51,326
这样你就不需要复制

484
00:14:51,326 --> 00:14:53,146
文件夹的层次结构 

485
00:14:53,146 --> 00:14:54,446
这个还是很复杂的 

486
00:14:54,446 --> 00:14:55,926
所以你最好还是保存一个扁平列表

487
00:14:56,286 --> 00:14:57,686
可能你会问 Pierre

488
00:14:57,686 --> 00:14:59,336
我们现在有了文件网址 

489
00:14:59,336 --> 00:15:00,456
那文件内容怎么办呢

490
00:14:59,336 --> 00:15:00,456
那文件内容怎么办呢

491
00:15:00,456 --> 00:15:02,066
因为我们之前不知道

492
00:15:02,066 --> 00:15:02,956
它们到现在这个阶段还没出现呢

493
00:15:03,656 --> 00:15:05,496
当然 

494
00:15:05,496 --> 00:15:05,976
我们这就来看这一点

495
00:15:05,976 --> 00:15:07,846
当基于文稿的应用程序

496
00:15:07,846 --> 00:15:09,116
打开你的文件时 

497
00:15:09,586 --> 00:15:11,976
它是通过网址

498
00:15:11,976 --> 00:15:13,996
来打开文件的

499
00:15:15,266 --> 00:15:18,386
但是 它不是直接进行的

500
00:15:18,456 --> 00:15:19,416
它会使用

501
00:15:19,486 --> 00:15:23,106
NSFileCoordinator 然后使用文件协调请求

502
00:15:23,106 --> 00:15:24,486
来读取

503
00:15:24,936 --> 00:15:27,086
这是 App 可以免费

504
00:15:27,086 --> 00:15:29,766
使用的 UI 文稿

505
00:15:29,766 --> 00:15:31,336
然后 你的 File Provider 扩展

506
00:15:31,336 --> 00:15:32,406
就会被调用

507
00:15:33,716 --> 00:15:34,756
明确的说 

508
00:15:34,756 --> 00:15:37,396
在你的子类别中

509
00:15:37,396 --> 00:15:39,306
带有 completionHandler 的网址的

510
00:15:39,306 --> 00:15:40,116
startProvidingItem 将会被调用

511
00:15:41,056 --> 00:15:41,736
然后 你查看

512
00:15:41,736 --> 00:15:43,596
你自己的磁盘储存

513
00:15:43,596 --> 00:15:44,946
发现条目

514
00:15:44,946 --> 00:15:45,236
并不在那里

515
00:15:46,116 --> 00:15:48,456
然后你去服务器那里 

516
00:15:48,456 --> 00:15:50,636
最有可能是使用 NSURLSession 

517
00:15:50,636 --> 00:15:51,406
把文件下载下来

518
00:15:52,016 --> 00:15:53,816
下载完成

519
00:15:55,086 --> 00:15:58,546
文件就移动到

520
00:15:58,736 --> 00:15:59,336
你的磁盘储存中了

521
00:16:00,526 --> 00:16:01,606
现在 你可以调用

522
00:16:01,606 --> 00:16:03,876
completionHandler 它帮你

523
00:16:03,876 --> 00:16:05,276
为基于文稿的 App 提供

524
00:16:05,626 --> 00:16:07,016
NSFileCoodination

525
00:16:07,296 --> 00:16:09,256
然后 

526
00:16:09,256 --> 00:16:09,576
就可以打开文件了

527
00:16:10,566 --> 00:16:12,556
如果你下一次又有需要时

528
00:16:12,556 --> 00:16:13,826
会发生什么呢

529
00:16:14,146 --> 00:16:15,726
因为这次的时候 

530
00:16:15,726 --> 00:16:16,136
文件就已经在那里了

531
00:16:17,206 --> 00:16:20,456
不过 还是需要

532
00:16:20,456 --> 00:16:22,586
发送一个

533
00:16:22,886 --> 00:16:23,396
文件协调读取请求

534
00:16:23,736 --> 00:16:25,396
到目前为止 

535
00:16:25,396 --> 00:16:25,956
一切都很顺利

536
00:16:26,286 --> 00:16:27,566
你的

537
00:16:27,566 --> 00:16:28,756
File Provider 扩展子类别

538
00:16:28,756 --> 00:16:29,056
将再次被调用

539
00:16:29,056 --> 00:16:30,716
这个功能很强大 

540
00:16:30,716 --> 00:16:32,966
你就可以跟踪文件的使用

541
00:16:33,706 --> 00:16:35,176
但是这次 文件已经在这里了

542
00:16:35,176 --> 00:16:36,186
你需要怎么做呢

543
00:16:36,256 --> 00:16:36,896
你只要

544
00:16:36,896 --> 00:16:38,286
使用 completionHandler 

545
00:16:38,286 --> 00:16:38,536
就可以了

546
00:16:38,726 --> 00:16:40,896
这个很强大 

547
00:16:40,896 --> 00:16:42,556
不过同时 这意味着你的

548
00:16:42,556 --> 00:16:44,026
File Provider 扩展

549
00:16:44,106 --> 00:16:46,856
有可能减慢文件的加载速度

550
00:16:47,096 --> 00:16:49,606
所以 如果你的文件已经在本地 

551
00:16:50,286 --> 00:16:52,586
你要应用程序 startProvidingItem

552
00:16:52,586 --> 00:16:53,826
你的速度最好够快

553
00:16:53,826 --> 00:16:56,466
接着 NSFileCoordination

554
00:16:56,466 --> 00:16:58,766
被授权 这点你们刚才已经

555
00:16:58,766 --> 00:16:59,176
看过了

556
00:16:59,176 --> 00:17:00,286
现在文件就被打开了

557
00:16:59,176 --> 00:17:00,286
现在文件就被打开了

558
00:17:02,076 --> 00:17:02,816
第二部分

559
00:17:03,126 --> 00:17:06,496
在文件 App 中 文件的元数据

560
00:17:06,496 --> 00:17:07,715
是十分重要的

561
00:17:07,715 --> 00:17:10,526
其运作方法是这样的：

562
00:17:10,526 --> 00:17:12,836
对于文件所展示的每一个条目 

563
00:17:12,836 --> 00:17:14,756
你的 File Provider 都会

564
00:17:14,756 --> 00:17:16,955
被调用

565
00:17:16,955 --> 00:17:18,445
更精确的说 这次要用的方法

566
00:17:18,445 --> 00:17:20,685
叫做 itemIdentifier 

567
00:17:21,215 --> 00:17:22,016
它可以

568
00:17:22,016 --> 00:17:23,165
传回一个 NSFileProviderItem

569
00:17:23,246 --> 00:17:25,415
这个条目 

570
00:17:25,415 --> 00:17:26,455
应该从你的数据库中获取

571
00:17:26,455 --> 00:17:30,116
在数据库中 

572
00:17:31,216 --> 00:17:32,916
你获得 NSFileProviderItem 

573
00:17:33,146 --> 00:17:35,426
然后你将其传回

574
00:17:36,836 --> 00:17:39,706
这个听起来很简单 

575
00:17:39,706 --> 00:17:41,156
不过我还没有讲到细节部分 

576
00:17:41,156 --> 00:17:42,536
到底什么是

577
00:17:42,536 --> 00:17:43,416
NSFileProviderItem 呢

578
00:17:43,416 --> 00:17:45,846
其实就像我刚才说过的 

579
00:17:45,846 --> 00:17:46,666
它就是个协议

580
00:17:46,666 --> 00:17:49,146
像大多数协议一样 

581
00:17:50,066 --> 00:17:52,276
它有必填属性和

582
00:17:52,396 --> 00:17:53,266
可选属性

583
00:17:53,266 --> 00:17:54,706
我们先详细讲一下

584
00:17:54,706 --> 00:17:56,536
必填属性 

585
00:17:56,536 --> 00:17:58,746
这是你的对象适配

586
00:17:58,746 --> 00:18:00,376
NSFileProviderItem

587
00:17:58,746 --> 00:18:00,376
NSFileProviderItem

588
00:18:00,376 --> 00:18:00,756
必须要应用到的

589
00:18:01,266 --> 00:18:03,366
第一个属性一般是

590
00:18:03,366 --> 00:18:04,726
itemIdentifier 

591
00:18:04,806 --> 00:18:05,946
一个简单的字符串

592
00:18:06,726 --> 00:18:07,666
然后是

593
00:18:07,666 --> 00:18:09,476
typeIdentifier 这是一个 UTI

594
00:18:09,476 --> 00:18:11,596
表明文件是

595
00:18:11,596 --> 00:18:15,016
一个 PDF 文件 一个图像或是一个文件夹

596
00:18:15,016 --> 00:18:19,106
最后一项要点

597
00:18:19,106 --> 00:18:20,926
是 Filename 

598
00:18:20,926 --> 00:18:22,256
它在 UI 中很重要

599
00:18:22,256 --> 00:18:27,186
现在我们已经讲完

600
00:18:27,186 --> 00:18:28,586
必要属性

601
00:18:28,586 --> 00:18:30,236
这些都是你需要使用的 

602
00:18:30,236 --> 00:18:31,496
我们可以继续讲可选属性 

603
00:18:31,496 --> 00:18:33,456
我们强烈

604
00:18:33,456 --> 00:18:36,096
建议大家也要应用

605
00:18:36,216 --> 00:18:39,676
比如 

606
00:18:39,676 --> 00:18:43,886
在这张屏幕快照上 

607
00:18:43,886 --> 00:18:46,906
在文件名的下面 

608
00:18:46,906 --> 00:18:48,926
清楚的显示了其分享的状态

609
00:18:49,326 --> 00:18:51,296
如果你设置了 isShared 属性的话 

610
00:18:51,296 --> 00:18:53,056
这一分享状态

611
00:18:53,056 --> 00:18:53,606
就会显示出来

612
00:18:53,956 --> 00:18:56,036
和分享状态一起的 

613
00:18:56,036 --> 00:18:56,916
你也可以使用 ownerNameComponents

614
00:18:56,916 --> 00:18:58,826
来更加

615
00:18:58,826 --> 00:18:59,416
明确地显示

616
00:19:00,076 --> 00:19:01,106
现在 你们就能在我的

617
00:19:01,106 --> 00:19:02,316
幻灯片上看到 

618
00:19:02,316 --> 00:19:05,376
“由 Amaury 分享”,

619
00:19:05,566 --> 00:19:05,633
知道这个信息还是很棒的

620
00:19:05,633 --> 00:19:06,826
此外 你还可以添加其它的状态 

621
00:19:06,826 --> 00:19:08,526
比如 isDownloaded 

622
00:19:08,526 --> 00:19:10,946
这样就会出现一个小的向下的箭头 

623
00:19:11,266 --> 00:19:13,386
还有 isUploading 和 uploadError

624
00:19:13,386 --> 00:19:14,066
uploadError 很有意思 

625
00:19:14,066 --> 00:19:16,106
如果你的用户实际上

626
00:19:16,106 --> 00:19:16,856
无法上传文件 

627
00:19:16,856 --> 00:19:19,086
你可能不会

628
00:19:19,086 --> 00:19:20,496
定位

629
00:19:20,496 --> 00:19:20,686
这个错误

630
00:19:21,196 --> 00:19:22,906
我们已经看到了

631
00:19:22,906 --> 00:19:24,006
很多额外的属性

632
00:19:24,076 --> 00:19:25,346
遗憾的是 

633
00:19:25,396 --> 00:19:27,036
我们没有时间去浏览全部的属性

634
00:19:27,466 --> 00:19:29,316
我们继续讲下去 

635
00:19:29,316 --> 00:19:30,886
不过我建议大家读一下我们的文稿 

636
00:19:30,886 --> 00:19:32,126
里面有关于这个主题

637
00:19:32,126 --> 00:19:34,146
的详尽解释 

638
00:19:34,146 --> 00:19:35,396
以及我们的头文件

639
00:19:35,726 --> 00:19:37,216
我们已经谈过

640
00:19:37,216 --> 00:19:38,776
元数据 

641
00:19:38,776 --> 00:19:40,106
不过其中还有一点是我们没有讲到的 

642
00:19:40,106 --> 00:19:41,246
还是很重要的一点 

643
00:19:41,246 --> 00:19:43,036
它使用的是一个不同的

644
00:19:43,036 --> 00:19:43,536
传输途径

645
00:19:43,816 --> 00:19:44,746
它就是缩略图

646
00:19:45,626 --> 00:19:46,866
当文件 App 显示

647
00:19:46,866 --> 00:19:48,436
你的文件时 尤其是

648
00:19:48,436 --> 00:19:49,796
那些本地文件 在这种情况下 

649
00:19:49,796 --> 00:19:51,026
我们不可能

650
00:19:51,026 --> 00:19:52,906
为文件生成一个缩略图

651
00:19:52,906 --> 00:19:55,126
需要进行的操作就是

652
00:19:55,126 --> 00:19:56,636
让 File Provider 扩展

653
00:19:56,636 --> 00:19:58,156
抓取一系列文件

654
00:19:58,156 --> 00:20:00,076
的缩略图

655
00:19:58,156 --> 00:20:00,076
的缩略图

656
00:20:00,756 --> 00:20:02,846
这样 你就可以去服务器中 

657
00:20:02,846 --> 00:20:04,346
请求下载

658
00:20:04,526 --> 00:20:05,846
和文件相关的

659
00:20:05,846 --> 00:20:06,366
缩略图

660
00:20:07,516 --> 00:20:09,006
当下载完成后 

661
00:20:09,006 --> 00:20:10,476
你就可以传回缩略图数据

662
00:20:10,526 --> 00:20:13,746
这样 

663
00:20:14,026 --> 00:20:17,216
就可以显示缩略图了

664
00:20:18,196 --> 00:20:19,896
接下来 我要详细讲讲

665
00:20:19,896 --> 00:20:21,606
抓取缩略图的原理 

666
00:20:21,606 --> 00:20:22,846
这个功能相对于

667
00:20:22,846 --> 00:20:24,146
其它的功能而言

668
00:20:24,146 --> 00:20:24,486
更复杂一些

669
00:20:25,706 --> 00:20:27,996
首先 屏幕上显示的是

670
00:20:27,996 --> 00:20:29,376
File Provider 扩展

671
00:20:29,376 --> 00:20:29,936
子类别

672
00:20:30,626 --> 00:20:32,986
这个 File Provider 扩展 

673
00:20:32,986 --> 00:20:34,066
子类别叫做

674
00:20:34,066 --> 00:20:35,436
MyFileProviderExtension

675
00:20:35,436 --> 00:20:36,876
然后 如果你要

676
00:20:36,876 --> 00:20:37,986
覆盖 fetchThumbnail 功能 

677
00:20:38,576 --> 00:20:39,896
需要一系列的

678
00:20:39,896 --> 00:20:40,786
条目标识符

679
00:20:40,786 --> 00:20:41,376
为什么是一系列呢

680
00:20:41,506 --> 00:20:42,696
因为出于性能的考虑 

681
00:20:42,696 --> 00:20:45,076
我们想要批量的处理 

682
00:20:45,076 --> 00:20:46,616
这样就不需要为了每个缩略图

683
00:20:46,616 --> 00:20:47,406
去访问服务器了

684
00:20:48,606 --> 00:20:50,326
然后是 requestedSize 

685
00:20:50,616 --> 00:20:52,396
perThumbnailCompletionHandler 

686
00:20:52,396 --> 00:20:53,446
和一个整体的

687
00:20:53,446 --> 00:20:54,376
completionHandler

688
00:20:54,376 --> 00:20:57,056
你要做的第一件事 

689
00:20:57,056 --> 00:20:58,876
其实是要创建一个

690
00:20:58,876 --> 00:20:59,206
Progress 对象

691
00:20:59,426 --> 00:21:01,226
创建这个并不

692
00:20:59,426 --> 00:21:01,226
创建这个并不

693
00:21:01,226 --> 00:21:03,146
完全是出于报告的考虑 

694
00:21:03,146 --> 00:21:05,196
而是在当

695
00:21:05,356 --> 00:21:07,726
缩略图请求被取消时 

696
00:21:07,726 --> 00:21:08,726
比如当用户不再使用文件 App 的时候

697
00:21:08,726 --> 00:21:10,556
你就能够了解到这一情况

698
00:21:10,556 --> 00:21:11,726
然后就可以 

699
00:21:11,726 --> 00:21:12,726
或者说就必须要

700
00:21:12,726 --> 00:21:13,956
取消掉

701
00:21:13,956 --> 00:21:14,836
你的缩略图请求

702
00:21:17,176 --> 00:21:18,426
现在 想象你使用下载任务 

703
00:21:18,426 --> 00:21:20,236
从服务器上

704
00:21:20,596 --> 00:21:22,216
下载了文件

705
00:21:23,196 --> 00:21:24,976
对于每一个缩略图 

706
00:21:24,976 --> 00:21:26,076
你都有已经下载到的文件 UI

707
00:21:26,076 --> 00:21:27,466
然后你对其进行映射操作

708
00:21:27,966 --> 00:21:29,216
在这里一定不要

709
00:21:29,216 --> 00:21:29,956
分配内存

710
00:21:29,956 --> 00:21:31,666
所以 我建议使用

711
00:21:31,666 --> 00:21:32,846
alwaysMapped  选项

712
00:21:33,876 --> 00:21:35,466
最后 你调用

713
00:21:35,466 --> 00:21:36,846
perThumbnailCompletionHandler 

714
00:21:37,376 --> 00:21:39,476
其实这个不是最后一步

715
00:21:39,476 --> 00:21:40,846
真正的最后一步是这个 

716
00:21:41,176 --> 00:21:42,766
你调用整体的

717
00:21:42,766 --> 00:21:43,556
completionHandler

718
00:21:43,556 --> 00:21:46,286
要记住一件事 不论是在

719
00:21:46,286 --> 00:21:48,086
成功 失败 还是取消的情况下

720
00:21:48,086 --> 00:21:50,656
你都需要调用它

721
00:21:51,176 --> 00:21:53,446
现在你就可以回传

722
00:21:53,446 --> 00:21:54,486
progress 对象 然后系统

723
00:21:54,486 --> 00:21:56,366
就能够取消你的

724
00:21:56,366 --> 00:21:57,166
缩略图请求了

725
00:21:58,346 --> 00:21:59,026
干得不错

726
00:21:59,026 --> 00:22:00,456
现在我们已经知道了

727
00:21:59,026 --> 00:22:00,456
现在我们已经知道了

728
00:22:00,456 --> 00:22:00,866
如何提供一个条目

729
00:22:00,866 --> 00:22:02,106
接下来 我们继续讲下一个话题 

730
00:22:02,106 --> 00:22:04,906
就是如何枚举

731
00:22:04,906 --> 00:22:05,236
条目

732
00:22:06,086 --> 00:22:08,476
枚举条目

733
00:22:08,476 --> 00:22:10,396
就是向我屏幕快照上的文件 App 

734
00:22:10,396 --> 00:22:12,676
提供数据

735
00:22:12,676 --> 00:22:14,226
就像我这张屏幕快照上

736
00:22:14,416 --> 00:22:14,826
显示的

737
00:22:14,906 --> 00:22:17,926
接下来我们要看看如何

738
00:22:17,926 --> 00:22:19,856
给条目标页数 同步变更 

739
00:22:20,536 --> 00:22:22,026
进行推送通知 

740
00:22:22,026 --> 00:22:23,116
还有标志变更

741
00:22:24,096 --> 00:22:26,896
枚举条目是

742
00:22:26,896 --> 00:22:27,116
这样进行的

743
00:22:27,646 --> 00:22:29,736
文件 App 启动 

744
00:22:29,736 --> 00:22:31,076
请求一页的条目

745
00:22:32,066 --> 00:22:33,136
你的 File Provider 扩展

746
00:22:33,136 --> 00:22:34,196
传回第一页

747
00:22:36,366 --> 00:22:37,626
然后就结束了

748
00:22:37,626 --> 00:22:38,516
屏幕上还有些空间 

749
00:22:38,516 --> 00:22:39,946
就继续

750
00:22:39,946 --> 00:22:40,876
再请求一页

751
00:22:41,486 --> 00:22:44,186
就这样反复运作 

752
00:22:44,186 --> 00:22:44,866
直到完成所有的

753
00:22:45,896 --> 00:22:47,326
你可能会问 

754
00:22:47,326 --> 00:22:48,576
我们为什么要标页数呢

755
00:22:49,076 --> 00:22:50,676
这些到底是为了干什么呢

756
00:22:51,306 --> 00:22:52,986
你需要了解 

757
00:22:52,986 --> 00:22:54,736
你的扩展只被授予你的应用程序

758
00:22:54,736 --> 00:22:57,126
被授予内存中的

759
00:22:57,316 --> 00:22:57,916
一小部分

760
00:22:58,246 --> 00:23:02,586
如果你的应用程序被授予的内存是这里显示的蓝色部分 

761
00:22:58,246 --> 00:23:02,586
如果你的应用程序被授予的内存是这里显示的蓝色部分 

762
00:23:03,026 --> 00:23:04,176
你的扩展只是这小小的灰色部分

763
00:23:04,656 --> 00:23:06,026
你甚至在屏幕上都看不到它

764
00:23:06,746 --> 00:23:08,966
你需要注意 

765
00:23:08,966 --> 00:23:11,906
在这个限制下 

766
00:23:11,906 --> 00:23:13,226
如果你分配的内存 

767
00:23:13,226 --> 00:23:15,336
超过你拥有的 

768
00:23:15,396 --> 00:23:16,656
你的扩展将会被终止

769
00:23:16,656 --> 00:23:18,156
所以 我们强烈建议你 

770
00:23:18,156 --> 00:23:19,826
这就是为什么要进行标页数

771
00:23:19,826 --> 00:23:22,596
的原因 就是要防止

772
00:23:22,596 --> 00:23:23,816
你的内存分配达到峰值

773
00:23:24,646 --> 00:23:27,196
我接下来想要讲几个

774
00:23:27,196 --> 00:23:29,376
小贴士 我们觉得很有用 

775
00:23:29,376 --> 00:23:30,686
也希望你们

776
00:23:30,686 --> 00:23:31,136
也能从中受益

777
00:23:31,906 --> 00:23:33,976
不要使用 URLSessionDataTask

778
00:23:34,086 --> 00:23:35,746
最好用 URLSessionDownloadTask 和

779
00:23:35,746 --> 00:23:36,756
URLSessionUploadTask

780
00:23:36,756 --> 00:23:38,566
因为它们可以操控文件 

781
00:23:38,566 --> 00:23:40,106
所以它们就不需要内存分配了

782
00:23:41,266 --> 00:23:42,866
使用 DispatchQueue 

783
00:23:42,866 --> 00:23:44,806
autoreleaseFrequency 为 always

784
00:23:44,996 --> 00:23:46,846
不然的话 你的内存将达峰值 

785
00:23:46,846 --> 00:23:49,056
因为有太多的内存分配到了

786
00:23:49,056 --> 00:23:50,036
你的自动释放池中

787
00:23:51,116 --> 00:23:52,876
最后 

788
00:23:52,876 --> 00:23:55,246
如果有循环的话 

789
00:23:55,246 --> 00:23:56,906
记住要使用

790
00:23:57,016 --> 00:23:57,666
« while () @autoreleasepool {} »

791
00:23:59,046 --> 00:24:01,006
我们没有时间

792
00:23:59,046 --> 00:24:01,006
我们没有时间

793
00:24:01,046 --> 00:24:02,586
去讲更多的细节了

794
00:24:03,086 --> 00:24:05,236
所以 大家可以

795
00:24:05,236 --> 00:24:07,686
之后来看看这一部分的内容 

796
00:24:07,686 --> 00:24:08,996
网上也有不少 

797
00:24:08,996 --> 00:24:10,076
大家可以稍后查看

798
00:24:10,716 --> 00:24:12,616
我们返回到枚举条目

799
00:24:12,616 --> 00:24:12,986
这一部分

800
00:24:13,216 --> 00:24:15,106
在你的文件 App 上 

801
00:24:15,106 --> 00:24:15,726
你已经打开了一个文件夹

802
00:24:16,396 --> 00:24:18,606
这将会调用你的

803
00:24:18,606 --> 00:24:20,856
File Provider 扩展子类别

804
00:24:20,856 --> 00:24:22,356
然后要求你为一个特定的条目标识符

805
00:24:22,356 --> 00:24:24,566
提供一个枚举器

806
00:24:25,216 --> 00:24:27,626
然后 

807
00:24:27,626 --> 00:24:28,966
你将定位你的 NSFileProvider 

808
00:24:28,966 --> 00:24:30,876
枚举器 然后传回给我们

809
00:24:31,656 --> 00:24:32,956
文件 App 将会储存这个

810
00:24:32,956 --> 00:24:33,456
枚举器

811
00:24:33,456 --> 00:24:35,176
下一步 就是

812
00:24:35,176 --> 00:24:38,096
要求你提供

813
00:24:38,096 --> 00:24:39,726
条目的 initialPage

814
00:24:43,806 --> 00:24:45,586
这次在你的枚举器上 

815
00:24:45,586 --> 00:24:47,366
你收到一个回调函数

816
00:24:47,366 --> 00:24:48,796
叫做 enumerateItems

817
00:24:48,796 --> 00:24:50,316
(for observer: ,startingAt page:)

818
00:24:51,096 --> 00:24:54,336
你找到

819
00:24:54,336 --> 00:24:56,426
第一页上的条目

820
00:24:56,646 --> 00:24:57,486
你将其传回

821
00:24:58,196 --> 00:24:58,996
然后 枚举的操作

822
00:24:58,996 --> 00:24:59,826
就完成了

823
00:24:59,826 --> 00:25:01,596
这里是我的第二页

824
00:24:59,826 --> 00:25:01,596
这里是我的第二页

825
00:25:03,696 --> 00:25:04,286
不错

826
00:25:04,346 --> 00:25:05,516
我们已经枚举了一页

827
00:25:05,606 --> 00:25:06,946
如果文件有

828
00:25:06,946 --> 00:25:08,086
更多的条目的话 

829
00:25:08,086 --> 00:25:09,866
这样的流程会继续进行 

830
00:25:09,866 --> 00:25:11,716
它会要求你通过同样的机制

831
00:25:11,716 --> 00:25:12,546
提供更多页

832
00:25:13,566 --> 00:25:16,326
我们来回顾一下

833
00:25:16,326 --> 00:25:17,336
刚刚讲过的不同的方法

834
00:25:17,586 --> 00:25:19,736
第一个方法 

835
00:25:19,736 --> 00:25:20,596
在你的 NSFileProviderExtension

836
00:25:20,596 --> 00:25:21,896
的子类别中

837
00:25:21,896 --> 00:25:23,066
叫做

838
00:25:23,066 --> 00:25:24,816
enumerator forContainer itemIdentifier 

839
00:25:24,886 --> 00:25:26,946
然后它返回一个符合

840
00:25:26,946 --> 00:25:28,466
NSFileProviderEnumerator 的对象

841
00:25:28,466 --> 00:25:30,976
itemIdentifier 可以是以下的某一个

842
00:25:31,046 --> 00:25:33,506
工作集 如果是枚举“最近”的话 

843
00:25:33,506 --> 00:25:35,106
刚才 Jean-Gabriel 已经

844
00:25:35,106 --> 00:25:37,026
讲过了

845
00:25:37,026 --> 00:25:37,666
或者是 rootContainer

846
00:25:39,076 --> 00:25:41,566
最后 它也可能是你的文件夹中

847
00:25:41,566 --> 00:25:42,986
任何你之前回传过的

848
00:25:43,096 --> 00:25:45,346
条目标识符

849
00:25:45,346 --> 00:25:46,576
另外一个

850
00:25:46,916 --> 00:25:47,916
功能是在

851
00:25:47,916 --> 00:25:49,546
NSFileProviderEnumerator 上

852
00:25:49,956 --> 00:25:51,776
就是 enumerateItems for

853
00:25:51,776 --> 00:25:53,166
Observer 直接按照 page 枚举

854
00:25:54,336 --> 00:25:57,246
Observer 是一个系统对象 

855
00:25:57,246 --> 00:26:00,386
我们刚刚看到了 

856
00:25:57,246 --> 00:26:00,386
我们刚刚看到了 

857
00:26:00,386 --> 00:26:03,086
是一个显示 接收你的条目和下一页的

858
00:26:03,276 --> 00:26:04,256
系统对象

859
00:26:04,896 --> 00:26:07,456
而 page 是一个简单的 Blob 数据

860
00:26:08,396 --> 00:26:10,286
它有其类型 不过还是

861
00:26:10,286 --> 00:26:13,166
一个简单的 Blob 数据

862
00:26:13,166 --> 00:26:15,406
你可以自由

863
00:26:15,406 --> 00:26:17,156
决定其中所包含的 

864
00:26:17,156 --> 00:26:19,336
只要不超过 500

865
00:26:19,336 --> 00:26:19,696
字节就可以

866
00:26:19,916 --> 00:26:21,496
一般放在里面的

867
00:26:21,496 --> 00:26:23,496
就是页的索引 1 2 3 4 5

868
00:26:23,496 --> 00:26:25,366
或者

869
00:26:25,566 --> 00:26:27,916
是其它类似的

870
00:26:28,936 --> 00:26:30,476
对于第一页来说 

871
00:26:30,476 --> 00:26:32,396
它可以是按照日期或者名字排列

872
00:26:32,396 --> 00:26:33,986
的任何首页 

873
00:26:33,986 --> 00:26:37,006
取决于 UI

874
00:26:38,856 --> 00:26:39,166
的展示

875
00:26:39,166 --> 00:26:40,956
我们返回到

876
00:26:40,956 --> 00:26:43,126
你们刚才看过的这张幻灯片

877
00:26:43,866 --> 00:26:46,116
我们刚刚加的

878
00:26:46,116 --> 00:26:47,266
至关重要的一点

879
00:26:47,266 --> 00:26:49,116
就是枚举文件夹和

880
00:26:49,116 --> 00:26:49,766
工作集

881
00:26:50,566 --> 00:26:51,616
我们有两种

882
00:26:51,616 --> 00:26:54,416
枚举器

883
00:26:54,416 --> 00:26:55,296
正如你在屏幕上看到的

884
00:26:55,756 --> 00:26:58,436
我现在想要退回来讲一下 

885
00:26:58,436 --> 00:26:59,446
其实是要重点说明一下

886
00:26:59,446 --> 00:27:01,676
这两类的区别所在

887
00:26:59,446 --> 00:27:01,676
这两类的区别所在

888
00:27:02,426 --> 00:27:04,296
对于文件夹枚举器

889
00:27:04,296 --> 00:27:06,316
一般都是直接

890
00:27:06,316 --> 00:27:07,626
枚举云端数据

891
00:27:08,146 --> 00:27:09,646
就像这样

892
00:27:09,926 --> 00:27:12,556
如果想要的话 

893
00:27:12,556 --> 00:27:12,896
你可以进行缓存

894
00:27:12,896 --> 00:27:13,596
这个取决于你

895
00:27:13,596 --> 00:27:14,206
你自己决定

896
00:27:14,586 --> 00:27:16,686
但是 工作集枚举器

897
00:27:17,236 --> 00:27:19,666
就很不一样了

898
00:27:20,006 --> 00:27:21,866
你需要枚举

899
00:27:21,866 --> 00:27:24,046
本地工作集的拷贝

900
00:27:24,796 --> 00:27:26,466
而不是云端数据

901
00:27:27,646 --> 00:27:28,606
只是你的工作集

902
00:27:29,806 --> 00:27:31,896
主要原因 是因为

903
00:27:31,896 --> 00:27:33,966
你的工作集必须

904
00:27:33,966 --> 00:27:34,636
能够离线运行

905
00:27:34,636 --> 00:27:36,216
这个条目就是工作集 

906
00:27:36,216 --> 00:27:37,276
而工作集必须能够

907
00:27:37,276 --> 00:27:38,376
离线访问也能够

908
00:27:38,376 --> 00:27:38,766
离线运行

909
00:27:39,036 --> 00:27:42,826
我想要再

910
00:27:42,866 --> 00:27:44,136
重复一下 因为有些点

911
00:27:44,136 --> 00:27:47,366
可能并不是显而易见的

912
00:27:47,936 --> 00:27:50,656
我再重复一下

913
00:27:51,216 --> 00:27:53,716
工作集枚举器 一定不能

914
00:27:53,796 --> 00:27:54,516
读取云数据

915
00:27:54,876 --> 00:27:56,636
而文件夹枚举器是可以的

916
00:27:57,656 --> 00:27:58,786
然后工作集枚举器一定需要

917
00:27:58,826 --> 00:28:00,536
读取数据库 

918
00:27:58,826 --> 00:28:00,536
读取数据库 

919
00:28:00,536 --> 00:28:01,906
对于文件夹枚举器如果你想要

920
00:28:01,906 --> 00:28:02,486
缓存它们的话也可以

921
00:28:02,486 --> 00:28:02,946
就是这样 

922
00:28:03,456 --> 00:28:07,446
我希望大家听明白了

923
00:28:07,446 --> 00:28:08,816
我们接着讲下一个话题 

924
00:28:08,816 --> 00:28:10,386
同步变更

925
00:28:10,516 --> 00:28:12,626
在你的云服务器上 

926
00:28:12,626 --> 00:28:14,086
你估计也需要进行

927
00:28:14,086 --> 00:28:15,536
同步变更 但是你需要

928
00:28:15,536 --> 00:28:16,886
给你的条目

929
00:28:16,886 --> 00:28:17,286
分配版本编号

930
00:28:17,286 --> 00:28:20,086
这些是在我云服务器上的

931
00:28:20,086 --> 00:28:20,926
版本编号

932
00:28:22,256 --> 00:28:24,366
最大的已知版本编号 

933
00:28:24,366 --> 00:28:27,276
我们叫做同步锚

934
00:28:27,276 --> 00:28:30,056
这里最大的是 14

935
00:28:30,186 --> 00:28:32,446
在有变更出现时 

936
00:28:32,446 --> 00:28:33,456
你需要增加版本编号

937
00:28:33,886 --> 00:28:36,106
比如 现在是 15

938
00:28:36,656 --> 00:28:39,726
此时的同步锚

939
00:28:39,726 --> 00:28:41,136
我进行的有些快了 不过也可以

940
00:28:41,576 --> 00:28:44,146
我增加了一个新文件 

941
00:28:44,336 --> 00:28:45,436
其版本编号是

942
00:28:45,436 --> 00:28:46,006
16

943
00:28:46,006 --> 00:28:47,256
这次 我们将

944
00:28:47,256 --> 00:28:48,586
同步锚增加至 16

945
00:28:48,586 --> 00:28:49,906
记住 第一开始 它是 13（口误 应为 14） 

946
00:28:49,906 --> 00:28:51,116
然后我进行了操作 

947
00:28:51,116 --> 00:28:52,766
现在你能看到结果了

948
00:28:53,666 --> 00:28:57,766
现在 如果你

949
00:28:57,766 --> 00:28:58,706
回到在你的 File Provider 扩展 

950
00:28:58,706 --> 00:29:02,116
枚举器的文件 App 中去 

951
00:28:58,706 --> 00:29:02,116
枚举器的文件 App 中去 

952
00:29:02,116 --> 00:29:04,686
会发生什么呢

953
00:29:04,756 --> 00:29:05,656
我之前向你们撒了谎

954
00:29:06,196 --> 00:29:07,686
在枚举之前 

955
00:29:07,686 --> 00:29:09,646
我们需要要求你的

956
00:29:09,646 --> 00:29:11,096
枚举器 提供其当前的

957
00:29:11,096 --> 00:29:11,936
同步锚

958
00:29:11,936 --> 00:29:15,256
这是在枚举

959
00:29:15,256 --> 00:29:15,816
页之前的操作

960
00:29:17,026 --> 00:29:18,606
这样 你先得到

961
00:29:18,726 --> 00:29:19,446
你的同步锚

962
00:29:19,446 --> 00:29:21,836
然后你将其传回到文件 App  

963
00:29:21,836 --> 00:29:23,556
然后文件 App 就会

964
00:29:24,146 --> 00:29:26,176
将其储存

965
00:29:26,176 --> 00:29:28,796
之后 我们就能够像刚才一样

966
00:29:28,796 --> 00:29:31,096
抓取页 

967
00:29:31,096 --> 00:29:31,766
就可以同步了

968
00:29:37,366 --> 00:29:38,616
当一个新文件添加到你的服务器时 

969
00:29:38,616 --> 00:29:42,186
你添加一个新文件 

970
00:29:42,186 --> 00:29:44,806
就是这个绿色的 你增加同步锚

971
00:29:44,806 --> 00:29:49,396
它变成了 14 

972
00:29:49,396 --> 00:29:50,296
然后你发出一个推送

973
00:29:51,056 --> 00:29:54,266
文件 App 收到推送

974
00:29:54,486 --> 00:29:55,876
你的同步锚就被调用起来

975
00:29:56,316 --> 00:29:57,426
添加了这个新功能 

976
00:29:57,806 --> 00:29:58,826
enumerateChanges

977
00:29:58,826 --> 00:30:00,356
所以 之前是 enumerateItem 

978
00:29:58,826 --> 00:30:00,356
所以 之前是 enumerateItem 

979
00:30:00,876 --> 00:30:02,366
现在是 enumerateChanges

980
00:30:02,626 --> 00:30:04,806
然后 它会传递

981
00:30:04,806 --> 00:30:06,726
你之前的同步锚

982
00:30:06,726 --> 00:30:09,026
现在这里是当前的

983
00:30:09,026 --> 00:30:10,816
版本 版本编号 13 

984
00:30:10,816 --> 00:30:11,956
它会传递给你 13

985
00:30:13,126 --> 00:30:14,506
当你的枚举器收到

986
00:30:14,506 --> 00:30:17,916
回调函数后 它会抓取

987
00:30:17,916 --> 00:30:20,916
新条目 就在这 14 

988
00:30:20,916 --> 00:30:22,566
版本编号变更为 14 的条目

989
00:30:23,286 --> 00:30:24,726
然后它将其送回到 observer 

990
00:30:24,726 --> 00:30:25,926
然后它调用

991
00:30:26,106 --> 00:30:28,836
finishEnumerating 到

992
00:30:28,836 --> 00:30:30,016
这里的新版本

993
00:30:30,246 --> 00:30:31,596
这里是 14

994
00:30:32,366 --> 00:30:33,256
没有更多的变更了 

995
00:30:33,256 --> 00:30:34,526
你就可以直接用 

996
00:30:34,526 --> 00:30:38,266
notComing false

997
00:30:38,446 --> 00:30:39,916
我们现在就可以显示

998
00:30:39,916 --> 00:30:40,946
更新了

999
00:30:42,036 --> 00:30:43,266
哦 我们忘了一件事 

1000
00:30:43,266 --> 00:30:47,526
文件 App 将会

1001
00:30:48,536 --> 00:30:50,676
更新为新的同步锚

1002
00:30:50,896 --> 00:30:52,436
我快速讲讲

1003
00:30:52,436 --> 00:30:55,386
推送通知 这个很有趣

1004
00:30:55,386 --> 00:30:57,136
因为这次 

1005
00:30:57,196 --> 00:30:58,446
推送通知

1006
00:30:58,446 --> 00:30:59,826
不会到你的 File Provider 扩展

1007
00:30:59,826 --> 00:31:00,496
那里去

1008
00:30:59,826 --> 00:31:00,496
那里去

1009
00:31:01,456 --> 00:31:04,166
它实际上是去

1010
00:31:04,166 --> 00:31:04,956
File Provider 后台程序

1011
00:31:05,866 --> 00:31:09,316
当收到你的推送时 

1012
00:31:09,316 --> 00:31:10,386
File Provider 后台程序将

1013
00:31:10,386 --> 00:31:11,266
启动

1014
00:31:11,266 --> 00:31:14,286
你的枚举器上的

1015
00:31:14,286 --> 00:31:16,336
enumerateChanges 代码 

1016
00:31:16,336 --> 00:31:18,146
然后你就可以传回条目

1017
00:31:18,146 --> 00:31:18,946
另外有关推送我需要

1018
00:31:18,946 --> 00:31:20,296
讲解的一点就是 

1019
00:31:20,296 --> 00:31:21,746
我会尽量简单点说 

1020
00:31:22,226 --> 00:31:24,526
你的 PKPushType 必须是

1021
00:31:24,526 --> 00:31:25,796
一个 PKPushType 的 File Provider

1022
00:31:25,796 --> 00:31:27,916
分组名必须是你的

1023
00:31:27,916 --> 00:31:31,136
数据包标识符再加上一个后缀 

1024
00:31:31,616 --> 00:31:32,976
pushkit.FileProvider

1025
00:31:33,406 --> 00:31:35,506
你的有效载荷一定要

1026
00:31:35,506 --> 00:31:36,936
包括一个容器标识符

1027
00:31:36,936 --> 00:31:38,576
指向有可能的枚举器

1028
00:31:38,576 --> 00:31:39,056
其中之一

1029
00:31:39,996 --> 00:31:42,256
有关更多推送提醒的问题 

1030
00:31:42,256 --> 00:31:43,736
请查看去年的

1031
00:31:43,736 --> 00:31:45,226
Introduction to Notification

1032
00:31:45,496 --> 00:31:46,266
（推送入门讲座）

1033
00:31:46,726 --> 00:31:48,346
我们已经讲过了推送 

1034
00:31:48,346 --> 00:31:49,946
不过你有可能会问 

1035
00:31:49,946 --> 00:31:51,196
如果我有些想要通知系统的变更 

1036
00:31:51,196 --> 00:31:52,826
但是我没有

1037
00:31:52,826 --> 00:31:53,726
相应的一个推送该怎么办

1038
00:31:54,816 --> 00:31:57,176
在这种情况下 

1039
00:31:57,286 --> 00:31:59,106
你需要编码 File Provider 后台程序 

1040
00:31:59,106 --> 00:31:59,916
说明

1041
00:31:59,916 --> 00:32:00,326
变更的存在

1042
00:31:59,916 --> 00:32:00,326
变更的存在

1043
00:32:00,406 --> 00:32:01,716
我们这里有个函数 

1044
00:32:01,716 --> 00:32:02,746
就是

1045
00:32:03,286 --> 00:32:05,546
NSFileProvider signalChanges

1046
00:32:05,906 --> 00:32:06,456
forContainer

1047
00:32:07,536 --> 00:32:09,336
当接收到代码后 

1048
00:32:09,336 --> 00:32:10,656
File Provider 后台程序就能够

1049
00:32:10,656 --> 00:32:12,416
枚举变更 作用和

1050
00:32:12,456 --> 00:32:13,556
推送相同

1051
00:32:13,876 --> 00:32:15,046
让我讲回到

1052
00:32:15,046 --> 00:32:15,526
这个方法

1053
00:32:16,476 --> 00:32:19,106
sinalchanges 方法 

1054
00:32:19,106 --> 00:32:20,866
你该在什么时候调用呢

1055
00:32:20,976 --> 00:32:22,436
首先 你可以

1056
00:32:22,436 --> 00:32:23,786
为初始的一组文件

1057
00:32:23,786 --> 00:32:24,196
调用它

1058
00:32:24,196 --> 00:32:25,826
想象你刚刚安装了你的

1059
00:32:26,106 --> 00:32:27,476
应用程序 然后在 File Provider 扩展

1060
00:32:27,476 --> 00:32:28,566
里面有一些文件 

1061
00:32:28,566 --> 00:32:30,276
你想要告知系统 

1062
00:32:30,276 --> 00:32:31,326
这些文件的存在

1063
00:32:32,456 --> 00:32:34,156
然后就是帐户变更的情况 

1064
00:32:34,156 --> 00:32:35,066
比如 

1065
00:32:35,066 --> 00:32:36,676
用户登出 然后登入一个

1066
00:32:36,676 --> 00:32:37,936
新的帐户 你就需要

1067
00:32:37,936 --> 00:32:39,176
在帐户变更后

1068
00:32:39,176 --> 00:32:40,636
告知系统重新加载 

1069
00:32:41,116 --> 00:32:42,846
此时一般没有

1070
00:32:42,846 --> 00:32:43,296
推送可用

1071
00:32:43,676 --> 00:32:44,936
更普遍的是 你可以对所有

1072
00:32:44,936 --> 00:32:46,316
没有对应推送的变更使用这个方法 

1073
00:32:46,316 --> 00:32:48,326
包括在本地上

1074
00:32:48,326 --> 00:32:49,146
做出的变更

1075
00:32:49,536 --> 00:32:51,326
我再讲回一点 

1076
00:32:51,326 --> 00:32:53,756
之前我们看到

1077
00:32:54,546 --> 00:32:56,676
你的 File Provider 需要

1078
00:32:56,676 --> 00:32:58,556
应用程序提供

1079
00:32:58,556 --> 00:32:59,406
文件网址

1080
00:32:59,406 --> 00:33:01,606
如果此时 文件不是

1081
00:32:59,406 --> 00:33:01,606
如果此时 文件不是

1082
00:33:01,656 --> 00:33:03,726
在本地的话 你就需要

1083
00:33:03,726 --> 00:33:05,446
告知系统 这个文件

1084
00:33:05,446 --> 00:33:06,306
不是正在下载

1085
00:33:06,876 --> 00:33:11,516
如果文件在本地的话 

1086
00:33:11,516 --> 00:33:13,676
你就应该在工作集中

1087
00:33:13,676 --> 00:33:15,026
进行 signalChanges 如果条目是

1088
00:33:15,026 --> 00:33:16,816
在工作集中的话

1089
00:33:18,206 --> 00:33:19,306
同样的 如果你有一个

1090
00:33:19,306 --> 00:33:20,576
正在为母应用程序运行的枚举器

1091
00:33:20,576 --> 00:33:22,346
你需要在

1092
00:33:22,346 --> 00:33:23,506
parentItemIdentifier 上调用

1093
00:33:23,506 --> 00:33:24,766
signalChanges

1094
00:33:25,286 --> 00:33:27,416
所以 在后台 singalChanges

1095
00:33:27,416 --> 00:33:28,786
可以从你的应用程序或者

1096
00:33:29,086 --> 00:33:30,326
从 File Provider 扩展

1097
00:33:30,326 --> 00:33:31,206
进行调用 

1098
00:33:31,206 --> 00:33:31,696
十分方便

1099
00:33:33,136 --> 00:33:35,536
甚至对于系统引发的变更 

1100
00:33:35,536 --> 00:33:37,216
你也必须要调用 signalChanges

1101
00:33:37,296 --> 00:33:39,036
这就像我

1102
00:33:39,036 --> 00:33:39,756
之前描述的一样

1103
00:33:39,756 --> 00:33:41,216
你可以说系统能够

1104
00:33:41,216 --> 00:33:43,246
推测出文件已经发生变更

1105
00:33:43,246 --> 00:33:44,206
但是不行 我们不能这么做

1106
00:33:44,256 --> 00:33:46,226
我们需要你明白地告诉我们

1107
00:33:46,226 --> 00:33:47,486
你已经知道了这一变更

1108
00:33:48,696 --> 00:33:51,016
但是不用担心 

1109
00:33:51,016 --> 00:33:53,006
signalChanges 是特别

1110
00:33:53,006 --> 00:33:53,236
易得的

1111
00:33:53,936 --> 00:33:55,436
我们已经讲完了

1112
00:33:55,566 --> 00:33:57,456
屏幕上这三个话题

1113
00:33:57,456 --> 00:33:58,786
创建项目 提供一个条目 

1114
00:33:58,786 --> 00:34:00,096
枚举条目

1115
00:33:58,786 --> 00:34:00,096
枚举条目

1116
00:34:00,096 --> 00:34:02,186
接下来 Johannes 会

1117
00:34:02,606 --> 00:34:03,816
上台来给大家

1118
00:34:03,816 --> 00:34:04,686
讲解剩下的话题

1119
00:34:05,516 --> 00:34:11,176
[掌声]

1120
00:34:11,676 --> 00:34:12,226
&gt;&gt; 谢谢你 Pierre

1121
00:34:13,186 --> 00:34:15,976
那么我们已经见到如何将文件

1122
00:34:15,976 --> 00:34:18,826
获取至文件 App  

1123
00:34:18,826 --> 00:34:19,755
或者文件浏览器上

1124
00:34:20,606 --> 00:34:23,005
当然 这只是你们

1125
00:34:23,005 --> 00:34:24,346
所感兴趣的一部分

1126
00:34:24,346 --> 00:34:25,516
或者你们用户感兴趣操作

1127
00:34:25,516 --> 00:34:26,366
的一部分

1128
00:34:26,946 --> 00:34:28,436
另一个同样重要的部分是

1129
00:34:28,806 --> 00:34:30,606
你们的用户可以

1130
00:34:30,606 --> 00:34:31,656
变更文件

1131
00:34:32,426 --> 00:34:35,646
而且要变更文件有很多种办法 

1132
00:34:35,646 --> 00:34:37,396
你既可以在

1133
00:34:37,396 --> 00:34:39,396
文件 App 中实现 

1134
00:34:39,396 --> 00:34:41,226
也可以使用

1135
00:34:41,226 --> 00:34:42,156
其他技术办法

1136
00:34:42,795 --> 00:34:44,626
那么以在文件 App 为例 

1137
00:34:44,626 --> 00:34:46,596
模拟用户

1138
00:34:46,596 --> 00:34:48,536
激活菜单控制栏 

1139
00:34:48,886 --> 00:34:50,366
在菜单控制栏里  

1140
00:34:50,366 --> 00:34:52,466
为用户提供了

1141
00:34:52,466 --> 00:34:54,896
多种变更文件

1142
00:34:54,896 --> 00:34:56,255
的操作动作

1143
00:34:56,476 --> 00:34:57,576
以其中一个动作

1144
00:34:57,576 --> 00:35:00,396
举例来说  

1145
00:34:57,576 --> 00:35:00,396
举例来说  

1146
00:35:00,396 --> 00:35:02,776
是这里的信息条目 

1147
00:35:02,776 --> 00:35:04,216
非常简单地激活了信息面板

1148
00:35:04,616 --> 00:35:05,576
这个信息面板中所显示的

1149
00:35:05,576 --> 00:35:07,686
信息是你已经

1150
00:35:07,686 --> 00:35:08,366
提供过的

1151
00:35:08,736 --> 00:35:11,646
这个条目的操作是

1152
00:35:11,646 --> 00:35:12,766
你已经执行过的

1153
00:35:13,686 --> 00:35:15,646
而其他条目 比如 

1154
00:35:15,646 --> 00:35:18,926
这里的分享动作 是由我们大家都了解的

1155
00:35:18,926 --> 00:35:21,536
老朋友

1156
00:35:21,536 --> 00:35:22,156
UIActivityViewController

1157
00:35:22,156 --> 00:35:23,556
来支持的

1158
00:35:23,556 --> 00:35:25,426
而且 你当然可以

1159
00:35:25,426 --> 00:35:27,636
使用 activity plug-in 进行

1160
00:35:27,996 --> 00:35:30,026
简单地增加其他动作 

1161
00:35:30,026 --> 00:35:31,426
这也是另一种在条目上

1162
00:35:31,426 --> 00:35:32,686
显示动作的方法

1163
00:35:33,356 --> 00:35:35,036
另外 还有一些其他的潜在条目 

1164
00:35:35,506 --> 00:35:37,216
在目前现有的

1165
00:35:37,216 --> 00:35:39,886
UI 系统中

1166
00:35:40,236 --> 00:35:40,786
没有支持

1167
00:35:41,376 --> 00:35:43,276
比如说 重命名条目

1168
00:35:43,816 --> 00:35:45,476
重命名条目在文件 App 中激活了

1169
00:35:45,476 --> 00:35:48,196
一个漂亮的 UI 界面 但是我们

1170
00:35:48,196 --> 00:35:50,826
目前还没有发布

1171
00:35:51,806 --> 00:35:53,026
一个关于重命名的

1172
00:35:53,026 --> 00:35:53,446
完整内容

1173
00:35:53,646 --> 00:35:55,436
这个内容 就是这部分议程中

1174
00:35:55,496 --> 00:35:56,666
将要说明的

1175
00:35:57,016 --> 00:35:59,046
为了支持重命名或其他类似的功能 

1176
00:35:59,046 --> 00:36:01,806
我们发布了多种条目 

1177
00:35:59,046 --> 00:36:01,806
我们发布了多种条目 

1178
00:36:01,806 --> 00:36:03,656
这些条目包括

1179
00:36:03,656 --> 00:36:05,556
移动文件

1180
00:36:06,046 --> 00:36:07,666
创建文件 举个例子 

1181
00:36:07,666 --> 00:36:08,826
比如你 或用户们

1182
00:36:08,826 --> 00:36:10,426
点击文件浏览控制页面上的

1183
00:36:10,426 --> 00:36:11,366
“+”小按钮 

1184
00:36:11,366 --> 00:36:13,636
又比如用户将文件

1185
00:36:13,636 --> 00:36:15,306
拖动至文件 App 

1186
00:36:15,306 --> 00:36:17,426
或者是其他应用程序的

1187
00:36:17,426 --> 00:36:18,546
文件浏览页面

1188
00:36:18,756 --> 00:36:20,026
最后但同样重要的是 变更文件

1189
00:36:20,026 --> 00:36:21,076
的属性

1190
00:36:21,076 --> 00:36:22,396
因此如果用户进行

1191
00:36:22,396 --> 00:36:25,106
标签操作 或者查看了文件

1192
00:36:25,106 --> 00:36:26,936
之后想要变更文件的

1193
00:36:26,936 --> 00:36:28,476
上一次使用日期

1194
00:36:30,006 --> 00:36:32,476
这些

1195
00:36:32,516 --> 00:36:34,916
用户动作

1196
00:36:34,966 --> 00:36:35,916
都是被支持的

1197
00:36:36,966 --> 00:36:38,576
而你的扩展

1198
00:36:38,576 --> 00:36:39,306
就是实现这些功能

1199
00:36:40,346 --> 00:36:41,776
好吧 这些确实

1200
00:36:41,776 --> 00:36:43,166
很抽象 那么我们就看一看

1201
00:36:43,166 --> 00:36:45,816
其中的功能之一 以及你

1202
00:36:45,816 --> 00:36:46,556
如何将其实现

1203
00:36:46,786 --> 00:36:48,606
好的 来看我们举的这个例子 

1204
00:36:48,606 --> 00:36:49,816
我们将要使用

1205
00:36:49,816 --> 00:36:50,596
导入文稿功能

1206
00:36:51,216 --> 00:36:52,926
然而所有的功能

1207
00:36:52,926 --> 00:36:54,816
在实现的时候 所使用的方法

1208
00:36:54,816 --> 00:36:55,626
都是相似的

1209
00:36:55,936 --> 00:36:57,476
标签操作功能很好用 

1210
00:36:57,476 --> 00:36:59,546
因为它是使用在新文件上的 

1211
00:36:59,546 --> 00:37:02,316
但是这些大多数的功能

1212
00:36:59,546 --> 00:37:02,316
但是这些大多数的功能

1213
00:37:02,316 --> 00:37:04,306
都是差不多的

1214
00:37:04,786 --> 00:37:05,746
它们在特性上只有

1215
00:37:05,746 --> 00:37:06,856
很少的不同 并且当然在

1216
00:37:06,856 --> 00:37:08,036
语义上也略有不同 

1217
00:37:08,486 --> 00:37:09,836
但是我在这部分

1218
00:37:09,836 --> 00:37:11,036
要讲的内容 

1219
00:37:11,036 --> 00:37:12,836
是对几乎所有的功能都

1220
00:37:12,836 --> 00:37:13,436
适用的

1221
00:37:14,136 --> 00:37:16,126
导入文稿功能是这样

1222
00:37:17,346 --> 00:37:17,996
工作的

1223
00:37:18,606 --> 00:37:20,076
系统给你一个现有的文件的 URL

1224
00:37:20,076 --> 00:37:22,836
那么这是一个磁盘上的文件 

1225
00:37:22,836 --> 00:37:26,396
系统给你的这个文件

1226
00:37:26,396 --> 00:37:27,806
可以是任何地址的 

1227
00:37:27,806 --> 00:37:29,226
可能是在临时文件夹里 

1228
00:37:29,226 --> 00:37:31,446
或者也有可能是随便一个应用程序里 

1229
00:37:31,826 --> 00:37:34,006
比如说

1230
00:37:34,006 --> 00:37:35,496
执行了一个创建动作 

1231
00:37:35,496 --> 00:37:38,966
保存了模板不管是什么情况 

1232
00:37:38,966 --> 00:37:40,666
这个文件是给你

1233
00:37:40,666 --> 00:37:41,386
使用的

1234
00:37:41,796 --> 00:37:44,046
你可以将这个文件

1235
00:37:44,046 --> 00:37:46,166
移动至你的 File Provider 存储空间里

1236
00:37:46,496 --> 00:37:48,286
那么这个文件就在你的

1237
00:37:48,286 --> 00:37:49,216
控制之内了

1238
00:37:49,216 --> 00:37:50,266
因为它在你的 container 中

1239
00:37:50,816 --> 00:37:53,056
这时 你需要

1240
00:37:53,056 --> 00:37:54,846
安排后台上传 

1241
00:37:54,846 --> 00:37:56,186
这样你的 container 中的文件

1242
00:37:56,186 --> 00:37:58,306
才可以上传到

1243
00:37:58,306 --> 00:37:59,396
你的云端

1244
00:37:59,396 --> 00:38:02,156
最后但同样重要的是 你要调用

1245
00:37:59,396 --> 00:38:02,156
最后但同样重要的是 你要调用

1246
00:38:02,156 --> 00:38:03,016
完成处理器

1247
00:38:03,746 --> 00:38:06,686
这非常重要 

1248
00:38:06,686 --> 00:38:08,806
而且也是这个流程中非常重要的

1249
00:38:08,806 --> 00:38:09,176
部分

1250
00:38:09,736 --> 00:38:11,366
我们刚刚安排了一个

1251
00:38:11,366 --> 00:38:13,666
后台上传业务 但是我们没有等到

1252
00:38:13,666 --> 00:38:14,996
后台上传完成后

1253
00:38:14,996 --> 00:38:16,136
再调用

1254
00:38:16,136 --> 00:38:16,516
完成处理器

1255
00:38:17,446 --> 00:38:18,966
那么文件实际上正在

1256
00:38:18,966 --> 00:38:20,186
后台上传中 

1257
00:38:20,946 --> 00:38:22,406
意味着用户不需要

1258
00:38:22,406 --> 00:38:24,626
一定得等到

1259
00:38:24,626 --> 00:38:27,186
文件真正上传完成后

1260
00:38:27,386 --> 00:38:29,026
再调用系统  

1261
00:38:29,026 --> 00:38:29,376
“嘿我上传完成啦”

1262
00:38:29,446 --> 00:38:30,676
对于用户来讲 我已经把文件

1263
00:38:30,676 --> 00:38:31,096
在我控制之下了

1264
00:38:31,096 --> 00:38:32,116
我已经安排了后台上传了

1265
00:38:32,116 --> 00:38:33,486
这份文件将在某个时间

1266
00:38:33,486 --> 00:38:34,176
上传到云端

1267
00:38:35,096 --> 00:38:36,696
那么用户就不必等着

1268
00:38:36,696 --> 00:38:38,096
文件上传完成 

1269
00:38:38,096 --> 00:38:39,276
有时候文件可能有

1270
00:38:39,276 --> 00:38:39,916
几百兆

1271
00:38:40,266 --> 00:38:42,556
这就是

1272
00:38:42,556 --> 00:38:43,526
一般的流程

1273
00:38:43,526 --> 00:38:44,846
我们来看一看

1274
00:38:44,846 --> 00:38:46,776
这个流程中的数据流

1275
00:38:46,776 --> 00:38:47,016
是怎样的

1276
00:38:47,386 --> 00:38:50,236
就像我说的 这个执行动作的

1277
00:38:50,416 --> 00:38:52,506
发起初始是

1278
00:38:52,536 --> 00:38:54,186
用户创建

1279
00:38:54,186 --> 00:38:55,996
或者粘贴 或者拖动一个文件

1280
00:38:56,476 --> 00:38:58,606
到你的 File Provider 中的

1281
00:38:59,186 --> 00:38:59,956
container

1282
00:39:00,626 --> 00:39:03,026
这时导入文稿针对

1283
00:39:03,026 --> 00:39:05,106
你的 File Provider 的

1284
00:39:05,106 --> 00:39:06,616
扩展子类别被

1285
00:39:06,656 --> 00:39:07,266
调用

1286
00:39:07,266 --> 00:39:09,096
你创建了一个数据库入口

1287
00:39:09,096 --> 00:39:10,136
你确认文件正在被

1288
00:39:10,136 --> 00:39:10,976
上传

1289
00:39:11,916 --> 00:39:13,116
所以你安排了上传动作

1290
00:39:13,446 --> 00:39:14,276
现在 我们完成了 对不对

1291
00:39:14,526 --> 00:39:15,046
我们可以调用

1292
00:39:15,046 --> 00:39:15,806
完成处理器

1293
00:39:15,946 --> 00:39:17,886
但正如皮埃尔提到的 

1294
00:39:17,886 --> 00:39:19,786
系统不会自动

1295
00:39:19,786 --> 00:39:22,136
推断 文件已经被

1296
00:39:22,396 --> 00:39:23,296
变更了

1297
00:39:24,046 --> 00:39:25,876
所以这里重要的一点是

1298
00:39:25,876 --> 00:39:27,896
你在这一步要给我们发出信号

1299
00:39:28,946 --> 00:39:30,686
告诉我们 嘿 这个 container

1300
00:39:30,686 --> 00:39:32,186
发生改变了

1301
00:39:32,586 --> 00:39:33,876
我们需要重新枚举

1302
00:39:33,876 --> 00:39:34,346
这个 container

1303
00:39:35,016 --> 00:39:36,146
这很重要 是为了保证

1304
00:39:36,146 --> 00:39:37,556
用户获得即刻的反馈

1305
00:39:37,996 --> 00:39:39,356
所以下一步就是

1306
00:39:39,356 --> 00:39:40,866
你来告诉我们

1307
00:39:40,866 --> 00:39:41,466
这里发生变化了

1308
00:39:41,466 --> 00:39:43,656
那么在这一步 我们就简单

1309
00:39:43,656 --> 00:39:44,256
做一个记录

1310
00:39:44,306 --> 00:39:46,456
我们记下 OK 这个 container 

1311
00:39:46,456 --> 00:39:48,406
并记在心里 用户有可能

1312
00:39:48,406 --> 00:39:49,366
正在查看这个

1313
00:39:49,366 --> 00:39:50,146
container 对不对

1314
00:39:50,446 --> 00:39:51,516
他们刚刚点击了那里的

1315
00:39:51,516 --> 00:39:52,266
“+”小按钮

1316
00:39:52,926 --> 00:39:54,256
当然了 他们正在查看 container  

1317
00:39:54,256 --> 00:39:55,176
并点击了“+”按钮 

1318
00:39:55,176 --> 00:39:57,666
那么他们想要看

1319
00:39:57,666 --> 00:39:58,326
这些变更

1320
00:39:58,716 --> 00:40:00,516
所以你会告诉系统 

1321
00:39:58,716 --> 00:40:00,516
所以你会告诉系统 

1322
00:40:00,516 --> 00:40:01,156
变更正在执行中

1323
00:40:01,466 --> 00:40:03,826
现在你告诉系统 

1324
00:40:03,826 --> 00:40:04,616
调用完成处理器

1325
00:40:04,776 --> 00:40:06,016
我们已经完成了这个执行动作

1326
00:40:06,866 --> 00:40:07,996
系统已经打开

1327
00:40:08,106 --> 00:40:09,626
这时 系统可以

1328
00:40:09,626 --> 00:40:11,826
启动并调用 回溯

1329
00:40:11,826 --> 00:40:13,056
并枚举所做的变更

1330
00:40:13,406 --> 00:40:15,846
你告诉我们 嘿 我们刚刚

1331
00:40:15,846 --> 00:40:17,636
增加了这个条目 现在有可能

1332
00:40:17,636 --> 00:40:18,576
正在上传

1333
00:40:19,466 --> 00:40:21,696
你将变更过的条目 作为变更集合的一部分 

1334
00:40:21,696 --> 00:40:23,916
回传给我们

1335
00:40:25,046 --> 00:40:27,456
我们就可以升级 UI

1336
00:40:27,456 --> 00:40:29,436
并在条目的角落显示一点点

1337
00:40:29,436 --> 00:40:30,376
上传中发生的错误

1338
00:40:30,826 --> 00:40:32,606
因此用户可以获得即时反馈 

1339
00:40:32,606 --> 00:40:34,246
在你的云端上 他们的信息

1340
00:40:34,246 --> 00:40:37,146
是安全的

1341
00:40:37,286 --> 00:40:38,746
那么让我再重申一下

1342
00:40:38,776 --> 00:40:40,016
执行动作是应

1343
00:40:40,016 --> 00:40:42,276
立刻完成的  

1344
00:40:42,276 --> 00:40:43,986
那么因此你需要延迟需要长期运行的

1345
00:40:44,056 --> 00:40:46,916
任务 比如使用 NSURLSession

1346
00:40:46,916 --> 00:40:48,996
上传到后台

1347
00:40:49,106 --> 00:40:50,306
那么现在 这个条目正在被上传中 

1348
00:40:50,306 --> 00:40:51,756
这很好 

1349
00:40:52,406 --> 00:40:53,416
但是 在一些情况下 

1350
00:40:53,416 --> 00:40:54,646
当上传即将完成的时候

1351
00:40:54,646 --> 00:40:56,006
我们想要告诉用户

1352
00:40:56,006 --> 00:40:57,066
文件的最新

1353
00:40:57,066 --> 00:40:57,456
状态

1354
00:40:57,986 --> 00:40:58,836
让我们进入到这个部分

1355
00:40:59,626 --> 00:41:01,256
这一部分工作的方法是

1356
00:40:59,626 --> 00:41:01,256
这一部分工作的方法是

1357
00:41:01,256 --> 00:41:02,916
NSURLSession 在某种时刻下会注意到 

1358
00:41:02,916 --> 00:41:04,666
嘿 这个上传

1359
00:41:04,666 --> 00:41:05,156
成功了

1360
00:41:05,156 --> 00:41:06,656
很好 这个项目已经在云端了

1361
00:41:06,996 --> 00:41:09,126
而 NSURLSession 

1362
00:41:09,126 --> 00:41:10,456
告诉你这些的方法

1363
00:41:10,496 --> 00:41:11,906
被称为

1364
00:41:12,026 --> 00:41:14,176
回调 在你母应用程序上的

1365
00:41:14,176 --> 00:41:16,156
一个 NSURLSession

1366
00:41:16,156 --> 00:41:17,096
后台回调

1367
00:41:17,676 --> 00:41:19,506
这时 你的母应用程序可以

1368
00:41:19,506 --> 00:41:20,886
去上传

1369
00:41:20,886 --> 00:41:21,786
数据库入口

1370
00:41:21,866 --> 00:41:23,496
它会在你的数据库里

1371
00:41:23,496 --> 00:41:25,156
设置标记 提示这个文件已经

1372
00:41:25,156 --> 00:41:25,606
上传

1373
00:41:25,606 --> 00:41:26,966
它已经不再

1374
00:41:26,966 --> 00:41:27,226
位于磁盘上

1375
00:41:27,226 --> 00:41:29,316
上传已经成功

1376
00:41:29,706 --> 00:41:31,716
我们不必再次执行上传

1377
00:41:31,716 --> 00:41:32,196
动作

1378
00:41:33,016 --> 00:41:34,446
并且我们应该通知用户

1379
00:41:34,446 --> 00:41:35,716
上传已经完成

1380
00:41:36,476 --> 00:41:38,376
正如 Pierre 提到的 

1381
00:41:38,376 --> 00:41:39,756
这个用信号提示变更的方法既可以被

1382
00:41:39,756 --> 00:41:41,226
你的扩展调用 

1383
00:41:41,226 --> 00:41:42,926
也可以被母应用程序调用 并且我们为你

1384
00:41:42,926 --> 00:41:43,606
解释了原因

1385
00:41:44,046 --> 00:41:45,766
这时 你告诉我们 这个 container 里面

1386
00:41:45,766 --> 00:41:47,346
发生了变更

1387
00:41:47,896 --> 00:41:51,466
那么 与先前同样的流程

1388
00:41:51,466 --> 00:41:52,286
开始启动

1389
00:41:52,946 --> 00:41:54,276
系统通知变更正在进行

1390
00:41:54,276 --> 00:41:56,756
并重新枚举你的

1391
00:41:56,856 --> 00:42:01,406
工作集 而且这时

1392
00:41:56,856 --> 00:42:01,406
工作集 而且这时

1393
00:42:01,936 --> 00:42:03,326
你可以从你的 File Provider 扩展

1394
00:42:03,486 --> 00:42:04,566
获取到这个条目已经被完整地上传 

1395
00:42:04,566 --> 00:42:07,156
使用的是

1396
00:42:07,156 --> 00:42:08,866
NSFileProviderItem 协议中的密钥 

1397
00:42:09,076 --> 00:42:11,396
并将这个信息

1398
00:42:11,396 --> 00:42:13,566
回传

1399
00:42:14,456 --> 00:42:17,266
有时候 上传文件会失败

1400
00:42:18,316 --> 00:42:19,666
比如 你的服务器会告诉我们 

1401
00:42:19,756 --> 00:42:22,566
这个用户超出了云端存储

1402
00:42:22,566 --> 00:42:22,956
限额

1403
00:42:24,376 --> 00:42:26,246
这种情况下 基本上与先前同样的

1404
00:42:26,246 --> 00:42:27,706
流程开始启动

1405
00:42:28,066 --> 00:42:30,606
NSURLSession D 要告诉

1406
00:42:30,606 --> 00:42:32,406
你的母应用程序

1407
00:42:32,986 --> 00:42:34,346
嘿 这个上传失败了

1408
00:42:34,586 --> 00:42:35,366
真麻烦

1409
00:42:35,366 --> 00:42:36,556
你总得去解决

1410
00:42:36,556 --> 00:42:37,186
这个问题

1411
00:42:37,776 --> 00:42:39,196
那么又一次 我们打开数据库

1412
00:42:39,196 --> 00:42:39,716
入口

1413
00:42:39,716 --> 00:42:40,926
我们通知系统

1414
00:42:42,106 --> 00:42:43,276
系统标记变更正在

1415
00:42:43,276 --> 00:42:43,956
进行中

1416
00:42:44,526 --> 00:42:45,856
系统重新枚举

1417
00:42:46,296 --> 00:42:48,356
我们可以回传更新的

1418
00:42:48,356 --> 00:42:48,766
条目

1419
00:42:49,386 --> 00:42:50,796
现在 这个更新的条目应该

1420
00:42:50,796 --> 00:42:53,916
反映出目前其正处于

1421
00:42:53,916 --> 00:42:55,696
错误状态的事实 

1422
00:42:55,696 --> 00:42:57,476
所以一个更新的错误 上传了的错误

1423
00:42:57,476 --> 00:42:59,836
会反映出目前真正在发生的

1424
00:42:59,836 --> 00:43:00,716
内容

1425
00:42:59,836 --> 00:43:00,716
内容

1426
00:43:00,716 --> 00:43:02,056
那么 我们来更进一步

1427
00:43:02,056 --> 00:43:02,876
更详细一点

1428
00:43:02,876 --> 00:43:05,966
正如我说的 你通过上传的条目特性

1429
00:43:05,966 --> 00:43:07,796
中的错误特性

1430
00:43:07,796 --> 00:43:10,066
来标记其处于

1431
00:43:10,066 --> 00:43:11,246
错误状态

1432
00:43:12,306 --> 00:43:13,696
你发出重新枚举的信号 

1433
00:43:13,696 --> 00:43:15,176
用户就可以看到

1434
00:43:15,176 --> 00:43:16,406
这个条目处于错误状态

1435
00:43:17,256 --> 00:43:18,786
然后 你如何处理这个

1436
00:43:19,266 --> 00:43:21,286
错误状态

1437
00:43:21,286 --> 00:43:23,116
取决于你正在查看的

1438
00:43:23,186 --> 00:43:24,966
错误类型

1439
00:43:25,456 --> 00:43:27,526
有一些 并不是所有的错误

1440
00:43:27,526 --> 00:43:28,216
都是同一种类型

1441
00:43:29,016 --> 00:43:30,316
有一种可能是

1442
00:43:30,316 --> 00:43:31,076
你遇见了一种

1443
00:43:31,076 --> 00:43:32,016
间歇性的错误

1444
00:43:32,016 --> 00:43:34,276
比如 我也不清楚 用户可能

1445
00:43:34,376 --> 00:43:35,516
在森林里野营了

1446
00:43:35,516 --> 00:43:37,436
两个星期 然后

1447
00:43:37,436 --> 00:43:38,926
NSURLSession D 已经放弃了 

1448
00:43:38,926 --> 00:43:41,576
因为没有 WiFi 

1449
00:43:41,576 --> 00:43:42,846
没有网络链接

1450
00:43:43,286 --> 00:43:44,826
在这种情况下 最简单的

1451
00:43:44,826 --> 00:43:46,146
办法就是告诉用户 

1452
00:43:46,146 --> 00:43:47,976
嘿 你的数据没有上传成功 

1453
00:43:48,076 --> 00:43:49,066
但我们正在处理

1454
00:43:49,136 --> 00:43:51,306
我们重新排列了你的

1455
00:43:51,306 --> 00:43:52,416
NSURLSession 任务

1456
00:43:53,236 --> 00:43:55,026
我们仍然会将这个条目标记为

1457
00:43:55,026 --> 00:43:56,426
错误状态 因为它没有

1458
00:43:56,426 --> 00:43:58,906
上传到云端 但我们仍会

1459
00:43:58,906 --> 00:43:59,766
继续尝试

1460
00:44:00,236 --> 00:44:01,206
用户没有什么必须要做

1461
00:44:01,206 --> 00:44:01,846
的事情

1462
00:44:02,416 --> 00:44:03,486
在错误描述里 你或许可以

1463
00:44:03,486 --> 00:44:04,856
告诉用户 嘿 

1464
00:44:05,356 --> 00:44:07,016
你可以上网或类似的什么事 

1465
00:44:07,016 --> 00:44:09,066
但能做的也就是

1466
00:44:09,066 --> 00:44:10,526
这么多了

1467
00:44:10,736 --> 00:44:12,116
还有一种可能是

1468
00:44:12,636 --> 00:44:13,356
你遇到了持续性的错误 

1469
00:44:13,356 --> 00:44:15,126
而且还是

1470
00:44:15,126 --> 00:44:15,586
不同的

1471
00:44:16,276 --> 00:44:17,786
在持续性错误状态的情况下 

1472
00:44:17,786 --> 00:44:19,016
比如说

1473
00:44:19,016 --> 00:44:20,836
用户的云端存储配额用尽 你需要

1474
00:44:20,836 --> 00:44:23,376
告诉用户 嘿 你的存储配额

1475
00:44:23,466 --> 00:44:24,306
用光了

1476
00:44:24,306 --> 00:44:26,046
你得去买点我们网页上的

1477
00:44:26,046 --> 00:44:27,346
存储空间

1478
00:44:27,636 --> 00:44:29,116
在那种情况下 基本上

1479
00:44:29,116 --> 00:44:30,766
你要给我们的是 一个

1480
00:44:30,766 --> 00:44:32,686
伴随着建议恢复选项的错误提示

1481
00:44:34,036 --> 00:44:35,666
最后但也是重要的一个可能 

1482
00:44:35,666 --> 00:44:36,496
就是遇到坚定错误 

1483
00:44:36,496 --> 00:44:38,146
而且这些

1484
00:44:38,146 --> 00:44:39,026
比较特别

1485
00:44:39,256 --> 00:44:41,576
用户必须要对你的应用程序

1486
00:44:41,816 --> 00:44:43,606
做一些特定的设置

1487
00:44:44,126 --> 00:44:45,476
比如说 重新鉴定

1488
00:44:46,666 --> 00:44:48,576
这或许是

1489
00:44:48,896 --> 00:44:50,226
这种情况下唯一可以进行的

1490
00:44:50,226 --> 00:44:50,616
操作

1491
00:44:51,276 --> 00:44:54,786
对于这种可能的情况 

1492
00:44:54,786 --> 00:44:56,336
系统会调用一个

1493
00:44:56,336 --> 00:44:56,866
顾客操作

1494
00:44:57,586 --> 00:44:58,686
什么是顾客操作

1495
00:44:59,306 --> 00:45:00,696
简单讲 那是我们的

1496
00:44:59,306 --> 00:45:00,696
简单讲 那是我们的

1497
00:45:00,696 --> 00:45:03,116
下一个部分我们来看一看

1498
00:45:03,116 --> 00:45:05,176
回到这个菜单视图

1499
00:45:05,176 --> 00:45:06,746
控制器 这里的这个菜单

1500
00:45:06,746 --> 00:45:06,966
控制器

1501
00:45:07,286 --> 00:45:09,086
我们已经看过了这些系统提供的

1502
00:45:09,086 --> 00:45:11,366
操作 它们只所以能够运行

1503
00:45:11,366 --> 00:45:12,696
就是因为当用户点击它们时 

1504
00:45:12,696 --> 00:45:15,286
就会有一个内部由你的 Provider

1505
00:45:15,286 --> 00:45:17,036
支持的指令

1506
00:45:17,036 --> 00:45:17,986
来支持它们的运行

1507
00:45:18,536 --> 00:45:20,706
不过 我们也给大家提供机会

1508
00:45:20,706 --> 00:45:22,696
来定制它 也就是

1509
00:45:22,696 --> 00:45:25,856
在这种情况下

1510
00:45:25,856 --> 00:45:27,496
引入一个顾客操作

1511
00:45:28,016 --> 00:45:31,806
这就是一个操作 在幻灯片上  

1512
00:45:31,806 --> 00:45:32,976
它的名字就是 Custom 

1513
00:45:32,976 --> 00:45:34,926
不过你可以把它改成任何

1514
00:45:34,926 --> 00:45:36,156
你想要的名字

1515
00:45:36,966 --> 00:45:38,276
它是这样运行的 

1516
00:45:39,226 --> 00:45:41,316
你公开一个操作 一个 UI

1517
00:45:41,316 --> 00:45:43,626
操作 它是适配你的

1518
00:45:43,626 --> 00:45:44,906
File Provider 扩展范围的

1519
00:45:46,806 --> 00:45:48,326
你为这个操作提供一个

1520
00:45:48,666 --> 00:45:51,006
界面 一个由一种新 UI 扩展

1521
00:45:51,006 --> 00:45:53,866
支持的界面

1522
00:45:55,296 --> 00:45:57,886
这是另一个在系统上运行的

1523
00:45:57,886 --> 00:46:00,186
独立的进程 

1524
00:45:57,886 --> 00:46:00,186
独立的进程 

1525
00:46:00,636 --> 00:46:02,796
它是由 FPUIActionExtension 

1526
00:46:02,916 --> 00:46:04,086
ViewController

1527
00:46:04,086 --> 00:46:04,666
支持的

1528
00:46:05,246 --> 00:46:07,206
那么 我们怎么做到这点呢

1529
00:46:07,836 --> 00:46:10,236
首先 我们在我们的扩展中的

1530
00:46:10,236 --> 00:46:12,196
info.plist 上

1531
00:46:12,286 --> 00:46:13,886
列举出操作可能的数量 

1532
00:46:13,886 --> 00:46:15,326
这点是很容易的

1533
00:46:15,596 --> 00:46:17,396
我们有一个操作的名字 

1534
00:46:17,396 --> 00:46:18,856
有一个标识符

1535
00:46:18,856 --> 00:46:19,816
还有一个激活准则

1536
00:46:19,846 --> 00:46:21,996
这个激活准则就是要搞清楚

1537
00:46:21,996 --> 00:46:23,626
哪些操作是适用于

1538
00:46:23,626 --> 00:46:25,316
哪些条目的

1539
00:46:26,256 --> 00:46:27,966
在幻灯片上的这个例子 

1540
00:46:27,966 --> 00:46:29,506
我们只是简单使用了一个真谓词 

1541
00:46:29,506 --> 00:46:30,806
这意味着这个操作 

1542
00:46:30,806 --> 00:46:34,186
你的 Provider 的每一个条目 

1543
00:46:34,186 --> 00:46:35,416
相对于这个特定的操作 

1544
00:46:35,416 --> 00:46:36,326
都是合格的

1545
00:46:36,936 --> 00:46:38,846
但是你可以自由地

1546
00:46:38,846 --> 00:46:39,156
对其改动

1547
00:46:39,156 --> 00:46:42,966
你可以在你的条目上展示

1548
00:46:43,066 --> 00:46:44,826
不同的 Key 然后用其来在

1549
00:46:44,826 --> 00:46:46,006
你的激活准则中

1550
00:46:46,006 --> 00:46:46,306
进行匹配

1551
00:46:46,816 --> 00:46:47,976
这是如何运作的呢

1552
00:46:48,506 --> 00:46:50,636
用户在文件 App 或者

1553
00:46:50,636 --> 00:46:52,976
文稿浏览器中 

1554
00:46:52,976 --> 00:46:53,976
长按一个条目 

1555
00:46:54,556 --> 00:46:56,326
此时 我们去查阅其

1556
00:46:56,326 --> 00:46:58,426
索引 而不是你的扩展

1557
00:46:58,676 --> 00:47:00,356
我们甚至都不会调用它

1558
00:46:58,676 --> 00:47:00,356
我们甚至都不会调用它

1559
00:47:00,356 --> 00:47:02,866
我们去查询你之前

1560
00:47:02,866 --> 00:47:04,226
转回给我们条目的

1561
00:47:04,226 --> 00:47:04,526
索引

1562
00:47:04,526 --> 00:47:09,116
我们查看其属性 

1563
00:47:09,116 --> 00:47:10,566
然后用谓词 

1564
00:47:10,566 --> 00:47:11,246
和属性进行匹配

1565
00:47:11,496 --> 00:47:12,616
此时 我们知道

1566
00:47:12,616 --> 00:47:14,176
这个谓词将返回的是 是 

1567
00:47:14,176 --> 00:47:16,676
或是否 如果返回的是 是 

1568
00:47:16,676 --> 00:47:18,066
我们就可以直接显示操作

1569
00:47:18,916 --> 00:47:21,536
现在 用户看到了这个操作 

1570
00:47:21,536 --> 00:47:23,396
很有可能

1571
00:47:24,146 --> 00:47:24,213
他们会点击它

1572
00:47:24,486 --> 00:47:26,266
用户点击这个操作

1573
00:47:26,266 --> 00:47:27,076
现在发生什么呢

1574
00:47:27,416 --> 00:47:29,286
我们调用你的 UI 扩展

1575
00:47:29,286 --> 00:47:31,476
你的 UI 扩展被

1576
00:47:31,476 --> 00:47:33,036
调用后进行 prepareForaction

1577
00:47:33,036 --> 00:47:34,466
运作

1578
00:47:34,946 --> 00:47:36,546
在这一步 

1579
00:47:36,546 --> 00:47:40,126
我们其实就是提供带有 actionIdentifier 的

1580
00:47:40,456 --> 00:47:41,776
一套条目 它实际是用户选择的 

1581
00:47:41,776 --> 00:47:43,746
然后你就可以

1582
00:47:43,746 --> 00:47:46,056
对这一操作

1583
00:47:46,836 --> 00:47:49,876
显示你现有的 UI

1584
00:47:50,046 --> 00:47:51,176
然后从这个方法返回

1585
00:47:51,176 --> 00:47:52,466
我们给你展示视图控制器

1586
00:47:52,466 --> 00:47:54,746
它很漂亮的在

1587
00:47:54,746 --> 00:47:54,946
文件 App 中向上滑动

1588
00:47:54,946 --> 00:47:56,586
这就行了

1589
00:47:56,586 --> 00:47:58,466
此时 你知道你进行操作

1590
00:47:58,466 --> 00:47:59,626
作用到的条目

1591
00:47:59,626 --> 00:48:00,246
都是哪些

1592
00:47:59,626 --> 00:48:00,246
都是哪些

1593
00:48:00,246 --> 00:48:01,986
比如 你可以

1594
00:48:01,986 --> 00:48:03,826
做一切有必要的行为来

1595
00:48:03,826 --> 00:48:04,376
运行这些操作

1596
00:48:04,376 --> 00:48:05,386
而且 这些操作也是完全定制的 

1597
00:48:05,386 --> 00:48:07,546
当然 具体上

1598
00:48:07,546 --> 00:48:09,036
会发生什么 

1599
00:48:09,036 --> 00:48:09,636
都取决于你的行为

1600
00:48:10,486 --> 00:48:12,046
在这个阶段 用户

1601
00:48:12,046 --> 00:48:12,996
应该已经完成了这个操作

1602
00:48:13,756 --> 00:48:14,896
你可能会执行一个完成

1603
00:48:14,896 --> 00:48:15,236
按钮

1604
00:48:15,236 --> 00:48:16,986
也许就这样 

1605
00:48:16,986 --> 00:48:18,436
这个操作完成后是一个自然的终止

1606
00:48:18,796 --> 00:48:20,586
不过无论如何 你都要在扩展

1607
00:48:20,586 --> 00:48:22,096
的环境中 调用 completeRequest 

1608
00:48:22,096 --> 00:48:24,096
然后系统将

1609
00:48:24,096 --> 00:48:25,856
不再接受你的 UI

1610
00:48:26,036 --> 00:48:27,746
这仅仅是顾客操作

1611
00:48:27,746 --> 00:48:30,026
我之前许诺要讲解的 

1612
00:48:30,026 --> 00:48:31,426
验证操作

1613
00:48:31,426 --> 00:48:32,516
是一个特殊情况 请看这个

1614
00:48:33,376 --> 00:48:34,536
验证操作

1615
00:48:34,536 --> 00:48:36,776
通过顾客 UI 操作一模一样的方法

1616
00:48:36,776 --> 00:48:38,576
被调用

1617
00:48:39,296 --> 00:48:40,256
但是它们是在一个

1618
00:48:40,256 --> 00:48:41,446
特殊情况下被调用的 

1619
00:48:41,446 --> 00:48:42,786
这就是当你返回给我们一个

1620
00:48:42,786 --> 00:48:43,596
验证错误的情况

1621
00:48:44,126 --> 00:48:45,336
如果你转回给我们一个

1622
00:48:45,336 --> 00:48:46,926
验证错误 

1623
00:48:46,926 --> 00:48:48,276
我们将会调用

1624
00:48:48,276 --> 00:48:49,796
prepareForAuthentication 

1625
00:48:50,206 --> 00:48:51,886
就在你的 FPUI 扩展 

1626
00:48:52,296 --> 00:48:53,706
ActionExtensionViewController 上调用

1627
00:48:54,416 --> 00:48:55,656
从这儿开始 

1628
00:48:55,656 --> 00:48:57,186
一切就按照相同的方法运行了

1629
00:48:57,756 --> 00:48:59,176
你可以调用 

1630
00:48:59,176 --> 00:49:00,676
你可以为验证 

1631
00:48:59,176 --> 00:49:00,676
你可以为验证 

1632
00:49:00,676 --> 00:49:01,596
展示任何必需的 UI

1633
00:49:01,826 --> 00:49:03,106
在一些情况下 用户

1634
00:49:03,106 --> 00:49:03,916
已经经过认证了

1635
00:49:03,916 --> 00:49:05,506
你就可以使用取消方法 

1636
00:49:05,626 --> 00:49:07,126
视图控制器就会停止处理 

1637
00:49:07,126 --> 00:49:08,366
你现在就经过认证了 

1638
00:49:08,366 --> 00:49:09,646
然后我们就重新操作即可

1639
00:49:10,536 --> 00:49:11,736
这些操作 

1640
00:49:11,736 --> 00:49:15,916
确实很棒 不过尽管说了

1641
00:49:15,916 --> 00:49:17,686
这么多 它们只出现在

1642
00:49:17,686 --> 00:49:20,756
文稿浏览器的视图控制器

1643
00:49:20,756 --> 00:49:22,016
或者是

1644
00:49:22,016 --> 00:49:22,536
文件 App 里

1645
00:49:22,876 --> 00:49:24,106
这很棒

1646
00:49:24,656 --> 00:49:26,526
这个方法很棒 能够使你

1647
00:49:26,526 --> 00:49:28,036
给你的用户展示一些东西 

1648
00:49:28,716 --> 00:49:30,336
但是有时候 

1649
00:49:30,336 --> 00:49:31,496
你可能有更多需求 对于这点 

1650
00:49:31,496 --> 00:49:32,656
我们就提出了服务这个概念

1651
00:49:33,876 --> 00:49:35,106
什么是服务

1652
00:49:35,586 --> 00:49:37,556
正如我说过的 对于顾客操作

1653
00:49:37,556 --> 00:49:38,576
有很多值得注意的地方

1654
00:49:39,536 --> 00:49:41,716
但是有些时候 

1655
00:49:41,986 --> 00:49:43,996
一些特定的文件

1656
00:49:43,996 --> 00:49:44,466
需要编程访问

1657
00:49:45,016 --> 00:49:45,816
比如说你正在

1658
00:49:45,816 --> 00:49:47,556
发布一个 SDK 

1659
00:49:47,916 --> 00:49:50,586
这就是你能够

1660
00:49:50,586 --> 00:49:52,306
展示你的 SDK 正在展示

1661
00:49:52,306 --> 00:49:53,726
的功能

1662
00:49:53,726 --> 00:49:54,766
的所在

1663
00:49:56,216 --> 00:49:58,596
服务可以帮你直接

1664
00:49:58,596 --> 00:50:00,416
在一个条目上展示功能 

1665
00:49:58,596 --> 00:50:00,416
在一个条目上展示功能 

1666
00:50:00,416 --> 00:50:02,196
我们来看一下

1667
00:50:02,196 --> 00:50:03,776
它是如何运作的

1668
00:50:03,966 --> 00:50:05,136
首先 你需要定义

1669
00:50:05,136 --> 00:50:05,866
你的服务是什么

1670
00:50:06,336 --> 00:50:08,736
从最基本上讲 

1671
00:50:08,736 --> 00:50:11,186
一个服务就是一个名字 

1672
00:50:11,226 --> 00:50:12,516
这个名字是你赋予这个服务的标识符

1673
00:50:12,516 --> 00:50:15,746
再加上一个 Objective-C

1674
00:50:15,746 --> 00:50:16,496
协议

1675
00:50:16,606 --> 00:50:18,276
基本上任何老的

1676
00:50:18,276 --> 00:50:19,346
Objective-C 协议都可以

1677
00:50:19,956 --> 00:50:21,306
我们很快就会

1678
00:50:21,306 --> 00:50:22,786
讲一讲要格外注意的地方

1679
00:50:22,996 --> 00:50:25,546
这个协议必须是

1680
00:50:25,546 --> 00:50:27,576
你和使用它的开发人员

1681
00:50:27,576 --> 00:50:28,056
都知晓的

1682
00:50:28,056 --> 00:50:30,286
所以 你们二者需要决定

1683
00:50:30,286 --> 00:50:31,836
使用哪个协议

1684
00:50:32,376 --> 00:50:33,746
这是因为

1685
00:50:33,746 --> 00:50:35,736
使用它的开发人员将会

1686
00:50:35,736 --> 00:50:37,146
对你展示的对象

1687
00:50:37,146 --> 00:50:38,916
进行有效的

1688
00:50:38,916 --> 00:50:39,596
方法调用

1689
00:50:40,116 --> 00:50:41,236
如果签名不匹配的话 

1690
00:50:41,236 --> 00:50:43,026
就没有办法运行

1691
00:50:43,026 --> 00:50:44,556
结果只会出现

1692
00:50:44,946 --> 00:50:45,036
错误

1693
00:50:45,906 --> 00:50:47,596
当我说它们会进行

1694
00:50:47,596 --> 00:50:49,076
方法调用时 

1695
00:50:49,076 --> 00:50:51,236
我的意思是它们将会通过 NSXPC

1696
00:50:51,236 --> 00:50:52,876
来进行运作 

1697
00:50:52,936 --> 00:50:55,136
这是一项针对进程间通讯

1698
00:50:55,136 --> 00:50:56,306
的伟大技术

1699
00:50:56,856 --> 00:50:59,056
这也就是意味着平常的

1700
00:50:59,056 --> 00:51:00,206
XPC 规则也适用

1701
00:50:59,056 --> 00:51:00,206
XPC 规则也适用

1702
00:51:01,056 --> 00:51:03,316
所以 所有通过

1703
00:51:03,316 --> 00:51:04,446
这个协议的参数都

1704
00:51:04,446 --> 00:51:05,586
必须能够被安全编码

1705
00:51:05,876 --> 00:51:07,236
当然 所有的类别

1706
00:51:07,236 --> 00:51:09,086
也必须能够在你的扩展

1707
00:51:09,086 --> 00:51:11,916
和进行方法调用的 App

1708
00:51:11,946 --> 00:51:12,636
上找的到

1709
00:51:13,226 --> 00:51:14,926
你不能直接从这个协议

1710
00:51:15,216 --> 00:51:17,346
回传任何对象

1711
00:51:17,996 --> 00:51:20,236
如果你不得不回传

1712
00:51:20,306 --> 00:51:21,556
一些东西的话 

1713
00:51:21,556 --> 00:51:22,996
你必须通过 Completion block

1714
00:51:22,996 --> 00:51:23,266
来进行

1715
00:51:23,866 --> 00:51:25,666
关于这个的规则

1716
00:51:25,666 --> 00:51:28,576
是很有趣的 

1717
00:51:28,606 --> 00:51:30,406
在 2012 年有一次讲座

1718
00:51:30,866 --> 00:51:32,206
很细致地进行了讲解

1719
00:51:32,206 --> 00:51:33,906
比我今天在这里 

1720
00:51:33,906 --> 00:51:34,536
能够大家讲的细致的多

1721
00:51:35,786 --> 00:51:37,546
我建议大家

1722
00:51:37,546 --> 00:51:38,306
去看看那一次的讲座

1723
00:51:39,336 --> 00:51:40,576
好的 我们接下来快速看一下

1724
00:51:40,786 --> 00:51:41,996
这里会发生的数据流

1725
00:51:41,996 --> 00:51:44,036
因为这点

1726
00:51:44,176 --> 00:51:45,596
还是值得大家一看的

1727
00:51:46,076 --> 00:51:47,326
你的第三方应用程序

1728
00:51:47,976 --> 00:51:50,226
启动并且

1729
00:51:50,226 --> 00:51:54,416
查询一个网址 有什么服务

1730
00:51:54,846 --> 00:51:56,686
能够显示在这个网址上呢

1731
00:51:56,686 --> 00:51:57,956
此时 你的扩展受到调用

1732
00:51:57,956 --> 00:52:01,566
来进行答复 

1733
00:51:57,956 --> 00:52:01,566
来进行答复 

1734
00:52:01,676 --> 00:52:02,916
嘿 这个条目上有

1735
00:52:02,916 --> 00:52:04,536
哪些支持的服务呢

1736
00:52:05,636 --> 00:52:07,956
它将会回传一批服务的来源 

1737
00:52:07,956 --> 00:52:09,336
一个服务的来源并不是

1738
00:52:09,336 --> 00:52:10,326
服务本身

1739
00:52:10,866 --> 00:52:13,326
它是一个能够有效

1740
00:52:13,326 --> 00:52:14,826
创建服务的对象 

1741
00:52:14,826 --> 00:52:16,586
可以创建一个 XPC 端点侦听器

1742
00:52:17,046 --> 00:52:19,606
我们将这些服务

1743
00:52:19,766 --> 00:52:21,676
回传给应用程序

1744
00:52:22,136 --> 00:52:23,426
所以在服务对象上 

1745
00:52:23,426 --> 00:52:24,826
应用程序可以

1746
00:52:25,136 --> 00:52:26,316
创建一个代理对象

1747
00:52:26,666 --> 00:52:27,916
我们来看一下

1748
00:52:27,916 --> 00:52:28,546
这是怎么样运行的

1749
00:52:29,196 --> 00:52:31,146
第三方应用程序

1750
00:52:31,146 --> 00:52:32,726
在查找完可用的服务

1751
00:52:32,726 --> 00:52:34,216
之后 开始使用

1752
00:52:34,216 --> 00:52:34,706
其中的一个服务

1753
00:52:34,706 --> 00:52:36,046
当然 可能不只是一个服务

1754
00:52:36,046 --> 00:52:37,186
而是任意数量的 对吧

1755
00:52:37,776 --> 00:52:39,156
它先查看一下这些服务

1756
00:52:39,536 --> 00:52:42,076
的标识符决定

1757
00:52:42,076 --> 00:52:43,796
想要使用哪一个 

1758
00:52:43,796 --> 00:52:44,676
然后创建一个 Messenger

1759
00:52:45,536 --> 00:52:47,696
此时 我们让

1760
00:52:47,696 --> 00:52:50,126
你在服务来源上的扩展

1761
00:52:50,126 --> 00:52:51,726
建立一个

1762
00:52:51,726 --> 00:52:52,326
端点侦听器

1763
00:52:53,076 --> 00:52:54,976
然后它回传了这个

1764
00:52:54,976 --> 00:52:56,276
ListenerEndpoint 

1765
00:52:56,656 --> 00:52:58,436
是一个已有的 NSXPC 类别 尽管

1766
00:52:58,436 --> 00:52:59,876
目前它只能在

1767
00:52:59,876 --> 00:53:00,426
macOS 上显示

1768
00:52:59,876 --> 00:53:00,426
macOS 上显示

1769
00:53:00,866 --> 00:53:02,136
我们现在也将其移植到 iOS 上

1770
00:53:02,576 --> 00:53:03,906
此时 第三方应用程序

1771
00:53:03,906 --> 00:53:05,456
能够在 Messenger 上获得

1772
00:53:05,456 --> 00:53:07,186
远程代理 

1773
00:53:07,186 --> 00:53:09,266
然后调用你的侦听器

1774
00:53:09,266 --> 00:53:10,816
委托进行

1775
00:53:10,816 --> 00:53:13,776
shouldAcceptConnection 回调

1776
00:53:14,816 --> 00:53:16,396
此时 你可以调用 

1777
00:53:16,396 --> 00:53:18,306
可以配置这个连接 

1778
00:53:19,246 --> 00:53:21,996
然后将其回传至

1779
00:53:22,276 --> 00:53:22,896
系统

1780
00:53:23,616 --> 00:53:25,236
在这个情况下 

1781
00:53:25,236 --> 00:53:27,626
比如你提供一个代理对象 

1782
00:53:27,626 --> 00:53:28,926
正在被我们的扩展

1783
00:53:28,926 --> 00:53:29,526
导出

1784
00:53:30,006 --> 00:53:33,366
然后从这里开始 

1785
00:53:33,366 --> 00:53:35,386
我们就可以在第三方应用程序的 

1786
00:53:35,736 --> 00:53:37,856
远程代理对象上 

1787
00:53:37,856 --> 00:53:39,206
调用协议中的 

1788
00:53:39,206 --> 00:53:40,206
任何方法

1789
00:53:40,686 --> 00:53:42,156
所有的这些调用都将

1790
00:53:42,156 --> 00:53:45,236
被解读成我们的扩展

1791
00:53:45,236 --> 00:53:45,806
中的调用

1792
00:53:47,216 --> 00:53:49,706
这是一个很强大的机制

1793
00:53:50,896 --> 00:53:53,106
能够帮助你

1794
00:53:54,336 --> 00:53:58,916
在你的扩展上显示

1795
00:53:58,916 --> 00:54:01,366
任何老的 SDK 操作

1796
00:53:58,916 --> 00:54:01,366
任何老的 SDK 操作

1797
00:54:01,886 --> 00:54:04,276
当然了 说句离题的话 

1798
00:54:04,276 --> 00:54:05,486
我们并不期望大家都使用这个 

1799
00:54:05,486 --> 00:54:06,876
如果你的初版没有使用

1800
00:54:06,876 --> 00:54:08,956
这个机制 

1801
00:54:08,956 --> 00:54:09,916
也是完全没有问题的

1802
00:54:10,246 --> 00:54:11,836
这是一个很高阶的话题 

1803
00:54:12,316 --> 00:54:15,636
只要你能够

1804
00:54:15,636 --> 00:54:18,006
使用枚举 

1805
00:54:18,006 --> 00:54:19,786
和平常的 File Provider  操作 

1806
00:54:20,106 --> 00:54:21,876
我们就已经快欣喜若狂了

1807
00:54:22,996 --> 00:54:23,626
好的

1808
00:54:24,076 --> 00:54:25,116
我们来总结一下

1809
00:54:25,116 --> 00:54:25,466
今天讲的内容

1810
00:54:26,336 --> 00:54:27,586
我们知道了什么是一个

1811
00:54:27,586 --> 00:54:28,996
File Provider 

1812
00:54:28,996 --> 00:54:30,926
知道了如何用 File Provider 支持

1813
00:54:31,476 --> 00:54:32,986
文件 App 中的枚举 

1814
00:54:33,036 --> 00:54:36,846
以及如何使用它在

1815
00:54:36,846 --> 00:54:37,986
文稿浏览器中显示文件

1816
00:54:39,206 --> 00:54:40,326
我们讲过了

1817
00:54:40,326 --> 00:54:43,606
如何利用枚举

1818
00:54:43,966 --> 00:54:46,096
来展示这二者 

1819
00:54:46,096 --> 00:54:47,236
如何枚举工作集 

1820
00:54:47,236 --> 00:54:48,196
如何枚举

1821
00:54:48,196 --> 00:54:49,846
工作集发生的变更 

1822
00:54:49,846 --> 00:54:51,046
以及如何将这些变更推送到

1823
00:54:51,046 --> 00:54:51,656
工作集

1824
00:54:52,496 --> 00:54:54,576
最后 我们也谈了

1825
00:54:54,576 --> 00:54:57,436
如何使用操作来

1826
00:54:57,596 --> 00:54:59,896
修改你的结构层次 

1827
00:54:59,896 --> 00:55:01,646
然后更进一步 

1828
00:54:59,896 --> 00:55:01,646
然后更进一步 

1829
00:55:01,646 --> 00:55:03,726
定制这些操作

1830
00:55:03,726 --> 00:55:06,286
甚至使用完全

1831
00:55:06,286 --> 00:55:07,436
根据你的 Provider 定制的

1832
00:55:07,436 --> 00:55:09,416
服务然后将其

1833
00:55:09,416 --> 00:55:10,166
展示给第三方应用程序

1834
00:55:11,056 --> 00:55:13,116
如果各位需要更多的信息 我们在

1835
00:55:13,116 --> 00:55:16,076
developer.apple.com 有讲解 

1836
00:55:17,196 --> 00:55:18,966
我们还有一系列的会议

1837
00:55:18,966 --> 00:55:20,916
比我们能够在今天

1838
00:55:20,916 --> 00:55:22,226
给大家讲的使用

1839
00:55:22,226 --> 00:55:25,006
各种技术的信息

1840
00:55:25,006 --> 00:55:25,356
要细致的多

1841
00:55:26,456 --> 00:55:27,856
好了 我祝愿

1842
00:55:27,856 --> 00:55:29,016
大家与会愉快

1843
00:55:29,246 --> 00:55:29,946
十分感谢大家

1844
00:55:31,016 --> 00:55:33,000
[掌声]
