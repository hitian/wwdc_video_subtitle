1
00:00:27,066 --> 00:00:27,856
&gt;&gt; Good morning, everyone.

2
00:00:28,616 --> 00:00:30,316
My name is Krishna and I'm from

3
00:00:30,316 --> 00:00:31,556
the Core ML Engineering team,

4
00:00:32,026 --> 00:00:33,836
and today we're going to talk

5
00:00:33,836 --> 00:00:36,286
about Core ML in Depth.

6
00:00:37,176 --> 00:00:39,046
This year, we introduced Core

7
00:00:39,096 --> 00:00:39,366
ML.

8
00:00:39,846 --> 00:00:41,776
It's the easiest way for you to

9
00:00:41,776 --> 00:00:42,876
integrate machine learning

10
00:00:42,876 --> 00:00:44,566
models in your applications.

11
00:00:45,566 --> 00:00:49,266
Core ML is available on macOS,

12
00:00:49,266 --> 00:00:51,936
iOS, watchOS, and tvOS.

13
00:00:52,096 --> 00:00:55,786
We had a session on Tuesday that

14
00:00:55,786 --> 00:00:56,616
introduced Core ML.

15
00:00:56,616 --> 00:00:58,346
For those of you that missed

16
00:00:58,346 --> 00:00:59,956
that session, let's just take a

17
00:00:59,956 --> 00:01:01,726
couple moments to recap some of

18
00:00:59,956 --> 00:01:01,726
couple moments to recap some of

19
00:01:01,726 --> 00:01:02,816
the key things we learned in

20
00:01:02,816 --> 00:01:03,346
that session.

21
00:01:04,376 --> 00:01:06,366
Now the first and the most

22
00:01:06,366 --> 00:01:08,926
important thing about Core ML is

23
00:01:08,926 --> 00:01:09,976
that you can think of your

24
00:01:09,976 --> 00:01:11,816
machine learning models just

25
00:01:11,816 --> 00:01:14,076
like code, and you interact with

26
00:01:14,076 --> 00:01:16,466
them just like any other Swift

27
00:01:17,706 --> 00:01:17,876
class.

28
00:01:18,286 --> 00:01:20,076
Your workflow looks a bit like

29
00:01:20,076 --> 00:01:20,296
this.

30
00:01:21,136 --> 00:01:22,056
You start with a machine

31
00:01:22,056 --> 00:01:24,126
learning model, you drag and

32
00:01:24,126 --> 00:01:26,896
drop that model into Xcode,

33
00:01:26,896 --> 00:01:28,086
Xcode will automatically

34
00:01:28,086 --> 00:01:29,996
generate a Swift or an Objective

35
00:01:29,996 --> 00:01:31,956
C interface for you to program

36
00:01:31,956 --> 00:01:32,896
against that model.

37
00:01:33,726 --> 00:01:35,466
You write your application code,

38
00:01:35,466 --> 00:01:36,346
you build it.

39
00:01:37,026 --> 00:01:39,356
Xcode will bundle both the code

40
00:01:39,356 --> 00:01:40,906
as well as the model in your

41
00:01:41,696 --> 00:01:41,766
app.

42
00:01:43,016 --> 00:01:45,036
In that session, we also saw a

43
00:01:45,036 --> 00:01:46,616
little demo of a flower

44
00:01:46,616 --> 00:01:47,036
predictor.

45
00:01:47,826 --> 00:01:49,176
It was an application where

46
00:01:49,176 --> 00:01:51,126
given a picture, let's say this

47
00:01:51,126 --> 00:01:53,286
pink rose, the application is

48
00:01:53,326 --> 00:01:54,586
supposed to tell you what kind

49
00:01:54,586 --> 00:01:55,886
of a flower it was and how

50
00:01:55,886 --> 00:01:56,956
confident it was.

51
00:01:58,526 --> 00:02:00,586
We saw that in order to use that

52
00:01:58,526 --> 00:02:00,586
We saw that in order to use that

53
00:02:00,586 --> 00:02:02,026
or build that application, it

54
00:02:02,026 --> 00:02:03,426
just took a few lines of code.

55
00:02:04,126 --> 00:02:06,156
One line of code to instantiate

56
00:02:06,156 --> 00:02:08,346
the model, and one line of code

57
00:02:08,586 --> 00:02:10,606
to make a prediction from that

58
00:02:11,536 --> 00:02:11,706
model.

59
00:02:11,836 --> 00:02:13,426
So in this session, we're going

60
00:02:13,426 --> 00:02:14,386
to pick up from where we left

61
00:02:14,386 --> 00:02:15,786
off and we're going to talk a

62
00:02:15,786 --> 00:02:16,656
little bit more about the

63
00:02:16,656 --> 00:02:17,996
different kinds of use cases,

64
00:02:17,996 --> 00:02:19,296
all the cool stuff you guys can

65
00:02:19,296 --> 00:02:20,046
do with Core ML.

66
00:02:20,726 --> 00:02:22,986
We're then going to talk about

67
00:02:22,986 --> 00:02:25,086
how Core ML is optimized for the

68
00:02:25,086 --> 00:02:26,736
hardware on which it runs for or

69
00:02:26,736 --> 00:02:28,596
runs on, and what that means for

70
00:02:28,596 --> 00:02:30,336
you as a developer.

71
00:02:30,996 --> 00:02:32,546
Finally, we're going to talk

72
00:02:32,546 --> 00:02:34,106
about how you can obtain Core ML

73
00:02:34,106 --> 00:02:35,456
models for use in all your

74
00:02:35,456 --> 00:02:36,056
applications.

75
00:02:36,256 --> 00:02:38,036
So it's going to be a fun

76
00:02:38,086 --> 00:02:39,386
session with a couple demos,

77
00:02:39,906 --> 00:02:40,676
let's get started.

78
00:02:41,826 --> 00:02:43,556
So you've already seen an

79
00:02:43,556 --> 00:02:45,196
example of an app that used

80
00:02:45,196 --> 00:02:46,656
images, the flower predictor.

81
00:02:47,296 --> 00:02:48,426
But with Core ML you can do a

82
00:02:48,426 --> 00:02:49,836
lot more than just images.

83
00:02:50,636 --> 00:02:52,106
You can work with gestures,

84
00:02:52,456 --> 00:02:53,966
let's say handwriting detection

85
00:02:53,966 --> 00:02:54,586
on the watch.

86
00:02:55,766 --> 00:02:57,176
You can work with video, let's

87
00:02:57,176 --> 00:02:58,186
say you want to do credit card

88
00:02:58,186 --> 00:02:58,606
detection.

89
00:02:59,876 --> 00:03:02,346
You can work with audio, and you

90
00:02:59,876 --> 00:03:02,346
You can work with audio, and you

91
00:03:02,346 --> 00:03:04,016
can even work with text.

92
00:03:05,366 --> 00:03:07,086
Now by taking inputs of all of

93
00:03:07,086 --> 00:03:08,806
these different types, you can

94
00:03:08,806 --> 00:03:10,136
build a large variety of

95
00:03:10,136 --> 00:03:10,876
applications.

96
00:03:12,306 --> 00:03:13,456
Let's say you want to build an

97
00:03:13,456 --> 00:03:14,786
application that as you type

98
00:03:14,786 --> 00:03:16,756
some text it tells you if it's a

99
00:03:16,756 --> 00:03:19,116
happy text or a sad text or a

100
00:03:19,116 --> 00:03:20,426
passive aggressive text or

101
00:03:20,426 --> 00:03:21,106
angry.

102
00:03:22,206 --> 00:03:23,246
You can do that with Sentiment

103
00:03:23,246 --> 00:03:25,186
Analysis, and we'll see a little

104
00:03:25,376 --> 00:03:27,536
demo of that today.

105
00:03:27,706 --> 00:03:29,026
You can -- with Style Transfer

106
00:03:29,026 --> 00:03:30,366
you can even make pictures of

107
00:03:30,366 --> 00:03:31,756
your family look like Vincent

108
00:03:31,756 --> 00:03:32,556
Van Gogh paintings.

109
00:03:34,086 --> 00:03:35,396
And with Gesture Recognition,

110
00:03:35,656 --> 00:03:37,216
you can have a whole new way to

111
00:03:37,216 --> 00:03:38,056
take inputs to your

112
00:03:38,056 --> 00:03:38,746
applications.

113
00:03:39,626 --> 00:03:41,306
Now all of these are amazing

114
00:03:41,306 --> 00:03:43,566
possibilities because with Core

115
00:03:43,566 --> 00:03:45,936
ML you can use a large variety

116
00:03:45,936 --> 00:03:46,556
of models.

117
00:03:47,656 --> 00:03:49,116
You can use Classical Machine

118
00:03:49,116 --> 00:03:50,616
Learning Models like Generalized

119
00:03:50,616 --> 00:03:52,116
Linear Models, Trees, and

120
00:03:52,176 --> 00:03:53,176
Support Vector Machines.

121
00:03:53,896 --> 00:03:55,626
Now these ones are great because

122
00:03:55,686 --> 00:03:57,656
they are small, you can make

123
00:03:57,656 --> 00:03:58,996
fast predictions with them and

124
00:03:58,996 --> 00:03:59,906
they are on any device.

125
00:04:00,936 --> 00:04:03,116
But you can also work with a

126
00:04:03,116 --> 00:04:04,796
large variety of Neural

127
00:04:05,196 --> 00:04:05,576
Networks.

128
00:04:05,576 --> 00:04:07,166
We have support for over 30

129
00:04:07,166 --> 00:04:08,586
different layer types and that's

130
00:04:08,776 --> 00:04:09,186
huge.

131
00:04:09,986 --> 00:04:10,946
You can do things like

132
00:04:10,946 --> 00:04:12,296
Feedforward and Convolution

133
00:04:12,296 --> 00:04:13,516
Linear Networks for all your

134
00:04:13,516 --> 00:04:14,616
image and video-based

135
00:04:14,616 --> 00:04:16,606
applications, and you can also

136
00:04:16,606 --> 00:04:17,916
do things like Recurrent Neural

137
00:04:17,916 --> 00:04:19,606
Networks or LSDMs for all of

138
00:04:19,606 --> 00:04:21,106
your text-based applications.

139
00:04:22,016 --> 00:04:23,526
We'll take a look at Recurrent

140
00:04:23,526 --> 00:04:24,946
Neural Networks in today's

141
00:04:25,666 --> 00:04:25,986
session.

142
00:04:26,636 --> 00:04:29,386
In fact, with Core ML you can

143
00:04:29,386 --> 00:04:31,016
also combine models of various

144
00:04:31,016 --> 00:04:31,696
different types.

145
00:04:31,696 --> 00:04:33,646
So you can take, let's say, a

146
00:04:33,646 --> 00:04:35,056
Neural Network and combine it

147
00:04:35,056 --> 00:04:37,126
with a Tree and then you can get

148
00:04:37,126 --> 00:04:38,276
one big model with that.

149
00:04:38,616 --> 00:04:39,816
So this concept is called a

150
00:04:39,816 --> 00:04:40,366
Pipeline.

151
00:04:40,786 --> 00:04:44,706
But most importantly for you as

152
00:04:44,706 --> 00:04:46,166
a developer, we want you to

153
00:04:46,166 --> 00:04:47,636
focus on the code that you're

154
00:04:47,636 --> 00:04:49,306
writing in your apps and not on

155
00:04:49,306 --> 00:04:50,796
the specific complexities of the

156
00:04:50,796 --> 00:04:51,826
model that's running there.

157
00:04:52,426 --> 00:04:55,996
And we achieve that by giving

158
00:04:55,996 --> 00:04:57,596
you a functional abstraction

159
00:04:57,596 --> 00:04:58,236
viewer models.

160
00:04:58,786 --> 00:05:00,446
So all you need to care is your

161
00:04:58,786 --> 00:05:00,446
So all you need to care is your

162
00:05:00,446 --> 00:05:02,296
models are prediction functions

163
00:05:02,296 --> 00:05:04,326
that take in some inputs and

164
00:05:04,326 --> 00:05:05,286
give out some outputs.

165
00:05:06,186 --> 00:05:08,256
And these inputs and outputs can

166
00:05:08,256 --> 00:05:09,716
be of five different types;

167
00:05:10,406 --> 00:05:13,726
numeric, categorical, images,

168
00:05:14,376 --> 00:05:16,076
arrays, and dictionaries.

169
00:05:17,476 --> 00:05:19,086
Now let's just take a little

170
00:05:19,086 --> 00:05:20,086
look at each of these five

171
00:05:20,136 --> 00:05:21,616
different types.

172
00:05:22,136 --> 00:05:23,986
So numerics and categories are

173
00:05:23,986 --> 00:05:25,956
exposed to you in Swift as

174
00:05:26,056 --> 00:05:28,106
doubles, integers or strings.

175
00:05:28,106 --> 00:05:29,126
So it's very natural.

176
00:05:30,036 --> 00:05:31,896
We have a little example of an

177
00:05:31,896 --> 00:05:33,306
application that uses these two

178
00:05:33,306 --> 00:05:35,026
types on developer.apple.com.

179
00:05:35,556 --> 00:05:37,096
It's an application that does

180
00:05:37,096 --> 00:05:38,086
house price prediction.

181
00:05:38,996 --> 00:05:40,156
So some of the inputs to this

182
00:05:40,156 --> 00:05:41,936
model are numeric, that is

183
00:05:41,936 --> 00:05:43,166
they're continuous so you can go

184
00:05:43,166 --> 00:05:44,706
from zero to infinity.

185
00:05:45,606 --> 00:05:47,686
And some of them are categorical

186
00:05:47,806 --> 00:05:50,196
or discrete, so you go zero, 1,

187
00:05:50,246 --> 00:05:52,936
2, 3, 4.

188
00:05:53,146 --> 00:05:54,566
You've already seen an example

189
00:05:54,566 --> 00:05:55,376
of using images.

190
00:05:55,946 --> 00:05:57,226
Now these images are exposed to

191
00:05:57,226 --> 00:05:58,876
you as CVPixelBuffers.

192
00:05:59,666 --> 00:06:02,786
For the more complex things like

193
00:05:59,666 --> 00:06:02,786
For the more complex things like

194
00:06:02,856 --> 00:06:04,456
gestures, audio and video, we

195
00:06:04,456 --> 00:06:06,286
have a new type called

196
00:06:06,286 --> 00:06:08,926
MLMultiArray to encapsulate a

197
00:06:08,926 --> 00:06:10,126
multidimensional array.

198
00:06:10,666 --> 00:06:13,356
And for a lot of your text-based

199
00:06:13,356 --> 00:06:14,796
applications, you'll be

200
00:06:14,796 --> 00:06:16,136
interacting with dictionaries.

201
00:06:16,866 --> 00:06:17,756
Here are the dictionaries.

202
00:06:17,756 --> 00:06:19,166
The keys are either strings or

203
00:06:19,166 --> 00:06:21,096
integers, and the values are

204
00:06:21,156 --> 00:06:21,486
doubles.

205
00:06:22,746 --> 00:06:24,536
Let's take a little look at

206
00:06:24,536 --> 00:06:26,136
using Text and working with

207
00:06:26,136 --> 00:06:26,646
Dictionaries.

208
00:06:27,326 --> 00:06:30,656
And we're going to do that with

209
00:06:30,656 --> 00:06:32,446
an application of Sentiment

210
00:06:32,446 --> 00:06:32,946
Analysis.

211
00:06:33,886 --> 00:06:35,206
Now I've always wanted this app

212
00:06:35,246 --> 00:06:36,966
where if I type some text I want

213
00:06:36,966 --> 00:06:38,686
the UI to pop and reflect the

214
00:06:38,686 --> 00:06:39,496
mood that I'm in.

215
00:06:40,006 --> 00:06:42,086
So if I say Core ML is awesome!

216
00:06:42,086 --> 00:06:42,926
I love using it!

217
00:06:43,136 --> 00:06:44,286
I want it to go green and I

218
00:06:44,286 --> 00:06:47,226
want, like, a happy face.

219
00:06:47,226 --> 00:06:49,006
And if I talk to you about, say,

220
00:06:49,006 --> 00:06:49,936
how bad the lunch was.

221
00:06:49,936 --> 00:06:50,936
Like, today's lunch was

222
00:06:50,936 --> 00:06:52,036
disappointing and sad.

223
00:06:52,036 --> 00:06:52,776
I want it to go red.

224
00:06:52,776 --> 00:06:55,586
So that's what I want to do.

225
00:06:55,916 --> 00:06:57,916
So what does it take to build an

226
00:06:57,916 --> 00:06:58,896
application like this?

227
00:06:59,466 --> 00:07:00,486
So I'm going to start with an

228
00:06:59,466 --> 00:07:00,486
So I'm going to start with an

229
00:07:00,486 --> 00:07:02,456
app shell where the user can

230
00:07:02,456 --> 00:07:03,226
type in some text.

231
00:07:04,676 --> 00:07:05,986
As soon as the user hits the

232
00:07:05,986 --> 00:07:07,656
space bar, I'm going to take all

233
00:07:07,656 --> 00:07:09,326
of that text, give it to a

234
00:07:09,326 --> 00:07:11,086
machine learning model, and get

235
00:07:11,086 --> 00:07:12,516
back a sentiment prediction.

236
00:07:13,616 --> 00:07:14,776
So the sentiment prediction is

237
00:07:14,776 --> 00:07:16,316
either going to be happy,

238
00:07:16,316 --> 00:07:17,436
neutral or sad.

239
00:07:18,526 --> 00:07:19,726
As soon as I get back this

240
00:07:19,776 --> 00:07:21,136
prediction, I'm going to go back

241
00:07:21,136 --> 00:07:23,506
and quickly update the UI to

242
00:07:23,506 --> 00:07:24,496
reflect the mode I'm in.

243
00:07:25,666 --> 00:07:26,936
The most important thing for you

244
00:07:26,936 --> 00:07:28,426
to note is all of this can

245
00:07:28,426 --> 00:07:30,626
happen real time on the device

246
00:07:30,626 --> 00:07:32,526
as the user is typing, so it

247
00:07:32,526 --> 00:07:34,156
makes for an amazing experience.

248
00:07:34,766 --> 00:07:37,466
So let's see how you can go

249
00:07:37,466 --> 00:07:38,496
ahead and build that app.

250
00:07:39,316 --> 00:07:40,436
Well, the most important thing

251
00:07:40,436 --> 00:07:42,796
here is the model, and for this

252
00:07:42,796 --> 00:07:43,836
we're going to use a Sentiment

253
00:07:43,836 --> 00:07:44,576
Analysis model.

254
00:07:45,276 --> 00:07:46,206
But for this sent Sentiment

255
00:07:46,206 --> 00:07:47,286
Analysis model is going to

256
00:07:47,286 --> 00:07:49,406
operate on word counts not on

257
00:07:49,406 --> 00:07:50,846
the raw text, but on word

258
00:07:50,846 --> 00:07:51,346
counts.

259
00:07:52,066 --> 00:07:53,366
So these word counts will be

260
00:07:53,366 --> 00:07:54,906
represented as dictionaries

261
00:07:55,876 --> 00:07:57,966
where the keys are the words and

262
00:07:57,966 --> 00:07:59,326
the values are the number of

263
00:07:59,326 --> 00:08:00,606
times that word appears in a

264
00:07:59,326 --> 00:08:00,606
times that word appears in a

265
00:08:00,646 --> 00:08:01,006
sentence.

266
00:08:01,796 --> 00:08:03,446
So Core ML is awesome.

267
00:08:03,446 --> 00:08:04,276
I love using it.

268
00:08:04,276 --> 00:08:05,656
Translates to a dictionary that

269
00:08:05,656 --> 00:08:06,466
looks a bit like this.

270
00:08:07,816 --> 00:08:09,376
So once I have my Word Counts I

271
00:08:09,466 --> 00:08:10,856
can pass that to my Sentiment

272
00:08:10,856 --> 00:08:12,796
Analysis model and I can get

273
00:08:12,796 --> 00:08:13,446
back a prediction.

274
00:08:13,976 --> 00:08:16,356
In this case it's "happy".

275
00:08:16,556 --> 00:08:17,756
But you might wonder, okay, how

276
00:08:17,756 --> 00:08:19,346
do I go for my raw text to word

277
00:08:19,346 --> 00:08:19,786
count.

278
00:08:20,486 --> 00:08:21,616
Well, you might have already

279
00:08:21,616 --> 00:08:23,336
seen the session on NLP, but you

280
00:08:23,416 --> 00:08:25,356
can use the already existing

281
00:08:25,356 --> 00:08:27,646
tools in the NSLinguisticTagger

282
00:08:27,776 --> 00:08:29,366
to tokenize and count number of

283
00:08:29,366 --> 00:08:29,696
words.

284
00:08:30,196 --> 00:08:32,856
So I'll use NLP to preprocess my

285
00:08:32,856 --> 00:08:34,265
texts, specifically the

286
00:08:34,265 --> 00:08:36,186
NSLinguisticTagger, and then I'm

287
00:08:36,186 --> 00:08:37,496
going to get my word counts

288
00:08:37,946 --> 00:08:39,326
which I'll then give to a model

289
00:08:39,696 --> 00:08:40,726
and get a prediction out of it.

290
00:08:41,836 --> 00:08:43,306
So with that, you can build an

291
00:08:43,306 --> 00:08:44,236
application like this.

292
00:08:44,766 --> 00:08:46,236
But let's not just talk about

293
00:08:46,236 --> 00:08:47,196
it, let's go ahead and do it.

294
00:08:48,376 --> 00:08:51,986
So I'm going to walk over and

295
00:08:51,986 --> 00:08:56,906
open up Xcode.

296
00:08:57,036 --> 00:08:59,426
So what I have here is Xcode and

297
00:08:59,426 --> 00:09:00,036
a simulator.

298
00:08:59,426 --> 00:09:00,036
a simulator.

299
00:09:00,736 --> 00:09:02,186
The simulator is now running an

300
00:09:02,186 --> 00:09:02,626
app shell.

301
00:09:03,146 --> 00:09:04,106
The app shell doesn't have the

302
00:09:04,106 --> 00:09:05,306
model in there, so if I type

303
00:09:05,306 --> 00:09:07,806
something, let's say, Core ML is

304
00:09:09,036 --> 00:09:11,826
amazing, amazing fun, nothing

305
00:09:11,826 --> 00:09:13,266
really happens to the UI.

306
00:09:13,806 --> 00:09:14,946
So what we're going to do right

307
00:09:14,946 --> 00:09:16,376
now is we're going to go ahead

308
00:09:16,376 --> 00:09:17,416
and incorporate the machine

309
00:09:17,416 --> 00:09:19,216
learning model in here so that

310
00:09:19,216 --> 00:09:20,526
this app is going to become much

311
00:09:20,526 --> 00:09:21,216
more vibrant.

312
00:09:21,216 --> 00:09:24,296
So the first thing I'm going to

313
00:09:24,296 --> 00:09:27,716
do is open up Finder and drag

314
00:09:27,716 --> 00:09:29,286
the Sentiment Analysis model

315
00:09:29,526 --> 00:09:30,246
into Xcode.

316
00:09:30,786 --> 00:09:33,726
Let's go take a look at what

317
00:09:33,726 --> 00:09:34,346
this model is.

318
00:09:35,276 --> 00:09:38,246
So as you can see, this is a

319
00:09:38,246 --> 00:09:39,486
Sentiment Analysis model.

320
00:09:40,206 --> 00:09:41,256
The type of this model is a

321
00:09:41,256 --> 00:09:43,026
Pipeline Classifier, so it does

322
00:09:43,026 --> 00:09:44,206
a couple different things before

323
00:09:44,206 --> 00:09:45,326
it gives the final prediction.

324
00:09:46,686 --> 00:09:49,136
It's only 167 kilobytes, so it's

325
00:09:49,136 --> 00:09:49,876
pretty tiny.

326
00:09:51,256 --> 00:09:53,456
And the inputs to this model are

327
00:09:53,456 --> 00:09:55,356
word counts, and the word counts

328
00:09:55,456 --> 00:09:58,476
are dictionaries where the key

329
00:09:58,476 --> 00:09:59,576
is the word and the value is the

330
00:09:59,576 --> 00:10:00,796
number of time that word

331
00:09:59,576 --> 00:10:00,796
number of time that word

332
00:10:00,796 --> 00:10:01,186
appeared.

333
00:10:01,916 --> 00:10:03,206
And I get two outputs from this

334
00:10:03,206 --> 00:10:05,556
model, a Sentiment Label, that's

335
00:10:05,556 --> 00:10:06,366
one of two things.

336
00:10:06,616 --> 00:10:08,676
It's either good or bad.

337
00:10:08,676 --> 00:10:11,546
And a Sentiment Score, which is

338
00:10:11,546 --> 00:10:13,696
a probability associated with

339
00:10:13,696 --> 00:10:15,326
the good sentiment or the bad

340
00:10:15,326 --> 00:10:15,716
sentiment.

341
00:10:16,756 --> 00:10:17,656
So that's a dictionary.

342
00:10:18,346 --> 00:10:19,646
So what I'm going to use in this

343
00:10:19,646 --> 00:10:20,926
application is I'm going to use

344
00:10:20,926 --> 00:10:23,146
the Sentiment Score to determine

345
00:10:23,416 --> 00:10:25,306
within a range of zero to 1 how

346
00:10:25,306 --> 00:10:26,866
nice this text was, and that's

347
00:10:26,866 --> 00:10:27,936
what I'm going to be using to

348
00:10:27,936 --> 00:10:29,426
update my UI.

349
00:10:30,716 --> 00:10:32,846
So let me go ahead and include

350
00:10:33,196 --> 00:10:34,786
this model in the target of my

351
00:10:34,786 --> 00:10:37,766
application, and then Xcode will

352
00:10:37,766 --> 00:10:39,066
automatically generate a nice

353
00:10:39,066 --> 00:10:39,956
interface for me.

354
00:10:40,616 --> 00:10:41,706
So I can go back to my

355
00:10:41,706 --> 00:10:43,466
ViewController and now I'm going

356
00:10:43,466 --> 00:10:44,536
to implement the logic to

357
00:10:44,896 --> 00:10:45,996
incorporate this Machine

358
00:10:45,996 --> 00:10:46,866
Learning Model in there.

359
00:10:47,566 --> 00:10:48,566
So for that, I'm going to

360
00:10:48,566 --> 00:10:50,236
implement this function, predict

361
00:10:50,236 --> 00:10:51,886
SentimentScoreFromRawText.

362
00:10:52,236 --> 00:10:53,456
So this function is going to

363
00:10:53,456 --> 00:10:54,666
take a sentence which is the

364
00:10:54,666 --> 00:10:55,816
entire string.

365
00:10:56,526 --> 00:10:57,816
It gets called every time the

366
00:10:57,816 --> 00:11:00,006
user types a space, and what it

367
00:10:57,816 --> 00:11:00,006
user types a space, and what it

368
00:11:00,006 --> 00:11:01,446
returns is a double value

369
00:11:01,786 --> 00:11:03,406
between zero and 1, where zero

370
00:11:03,406 --> 00:11:05,216
is really, really sad and 1 is

371
00:11:05,216 --> 00:11:05,986
really, really happy.

372
00:11:07,906 --> 00:11:09,086
So the first thing I want to do

373
00:11:09,086 --> 00:11:10,256
is I'm going to instantiate this

374
00:11:10,256 --> 00:11:11,746
model, and I can simply do that

375
00:11:11,746 --> 00:11:13,236
by saying let model =

376
00:11:13,286 --> 00:11:14,286
SentimentAnalysis.

377
00:11:15,376 --> 00:11:16,956
And then I'm going to predict

378
00:11:16,956 --> 00:11:19,156
use this model to make this

379
00:11:19,186 --> 00:11:19,656
prediction.

380
00:11:19,976 --> 00:11:21,076
But as you can see, the input

381
00:11:21,076 --> 00:11:22,676
here is a sentence but what I

382
00:11:22,676 --> 00:11:24,116
really want is a word count.

383
00:11:24,996 --> 00:11:26,146
So I've already implemented this

384
00:11:26,146 --> 00:11:26,896
function called

385
00:11:26,896 --> 00:11:28,106
tokenizeAndCountWords.

386
00:11:28,546 --> 00:11:29,536
This function uses the

387
00:11:29,536 --> 00:11:31,176
NSLinguisticTagger to tokenize

388
00:11:31,176 --> 00:11:32,256
the sentence and then count the

389
00:11:32,256 --> 00:11:33,876
number of tokens in that

390
00:11:33,876 --> 00:11:34,296
sentence.

391
00:11:34,636 --> 00:11:35,696
So I'm going to skip over that

392
00:11:35,696 --> 00:11:38,546
and I'm just going to call that

393
00:11:38,546 --> 00:11:38,996
function.

394
00:11:38,996 --> 00:11:39,856
So I'm going to say let

395
00:11:39,856 --> 00:11:41,486
WordCounts =

396
00:11:41,776 --> 00:11:43,786
tokenizeAndCountWords sentence.

397
00:11:44,896 --> 00:11:46,036
And then I'm going to use this

398
00:11:46,036 --> 00:11:47,316
word count and provide that to

399
00:11:47,316 --> 00:11:47,776
my model.

400
00:11:47,776 --> 00:11:49,686
So I'm going to say if let

401
00:11:49,686 --> 00:11:52,116
prediction = try

402
00:11:52,116 --> 00:11:54,166
model.prediction(wordCounts),

403
00:11:54,736 --> 00:11:56,246
and simply pass that wordCount

404
00:11:56,246 --> 00:11:56,526
there.

405
00:11:57,456 --> 00:11:59,116
And if this succeeds, I'm going

406
00:11:59,116 --> 00:12:01,456
to use the prediction object to

407
00:11:59,116 --> 00:12:01,456
to use the prediction object to

408
00:12:01,456 --> 00:12:03,186
get out the sentiment score, but

409
00:12:03,186 --> 00:12:04,466
because I want a value between

410
00:12:04,466 --> 00:12:05,646
zero and 1 I'm going to get the

411
00:12:05,646 --> 00:12:06,666
score and not the label.

412
00:12:07,176 --> 00:12:08,406
So I'll take the sentiment score

413
00:12:08,406 --> 00:12:09,726
associated with the sentiment

414
00:12:09,726 --> 00:12:11,286
"good" and I'll return that to

415
00:12:11,286 --> 00:12:11,666
my UI.

416
00:12:11,666 --> 00:12:13,606
And if this fails, by any

417
00:12:13,606 --> 00:12:14,766
chance, I'm going to go down

418
00:12:14,766 --> 00:12:15,446
0.5.

419
00:12:15,636 --> 00:12:16,486
So I have a little error

420
00:12:16,486 --> 00:12:19,636
handling here as well.

421
00:12:19,836 --> 00:12:20,986
So I'm going to go ahead and

422
00:12:20,986 --> 00:12:21,926
build that application.

423
00:12:22,326 --> 00:12:23,846
So during this process, as you

424
00:12:23,846 --> 00:12:25,196
might be aware, the model and

425
00:12:25,196 --> 00:12:26,626
the code are both getting

426
00:12:26,626 --> 00:12:28,536
packaged and getting shipped to

427
00:12:28,536 --> 00:12:29,116
the device.

428
00:12:29,776 --> 00:12:31,516
Another thing to note is that

429
00:12:31,516 --> 00:12:33,236
the compiler, the Core ML

430
00:12:33,236 --> 00:12:35,346
compiler gets shipped as part of

431
00:12:35,346 --> 00:12:36,376
the Xcode pool chain.

432
00:12:36,546 --> 00:12:37,646
So if you want to compile them

433
00:12:37,646 --> 00:12:38,876
all or run the code generator

434
00:12:38,876 --> 00:12:40,306
yourself, you can use the

435
00:12:40,306 --> 00:12:41,046
compiler directly.

436
00:12:42,616 --> 00:12:44,826
So now let's go use this app and

437
00:12:44,826 --> 00:12:45,836
let's type something nice.

438
00:12:46,716 --> 00:12:49,466
Let's type "Core ML is amazing

439
00:12:49,506 --> 00:12:49,706
fun."

440
00:12:49,706 --> 00:12:50,356
That's what I want to write.

441
00:12:51,186 --> 00:12:53,606
"Core ML is amazing fun and I

442
00:12:53,606 --> 00:12:54,546
love using it."

443
00:12:55,546 --> 00:12:56,846
So immediately you saw the UI

444
00:12:56,916 --> 00:12:58,236
popped and I got a little green

445
00:12:58,236 --> 00:12:59,486
and I'm happy and, you know,

446
00:12:59,636 --> 00:13:00,156
this is great.

447
00:12:59,636 --> 00:13:00,156
this is great.

448
00:13:01,516 --> 00:13:03,706
[ Applause ]

449
00:13:04,206 --> 00:13:05,846
But now I want to type something

450
00:13:05,846 --> 00:13:07,356
bad, but I don't really want to

451
00:13:07,356 --> 00:13:08,526
make fun of anything or anyone

452
00:13:08,526 --> 00:13:09,606
so I want to talk about how my

453
00:13:09,606 --> 00:13:11,186
life is terrible without CoreML.

454
00:13:12,516 --> 00:13:15,356
"Life without CoreML is sloppy,

455
00:13:16,516 --> 00:13:19,896
terrible and sad."

456
00:13:20,806 --> 00:13:22,396
So obviously the UI is really

457
00:13:22,476 --> 00:13:23,716
sad because, you know, life

458
00:13:23,716 --> 00:13:25,106
without Core ML is really sad.

459
00:13:26,046 --> 00:13:27,746
So what we really saw was a

460
00:13:27,916 --> 00:13:30,486
seamless integration between NLP

461
00:13:30,486 --> 00:13:32,056
and Core ML, so I built this

462
00:13:32,056 --> 00:13:33,586
Sentiment Analysis Model and I

463
00:13:33,586 --> 00:13:35,256
was able to make my application

464
00:13:35,256 --> 00:13:36,506
a lot more vibrant.

465
00:13:36,626 --> 00:13:38,256
And all of this was happening in

466
00:13:38,256 --> 00:13:39,976
real time on the device as the

467
00:13:39,976 --> 00:13:40,696
user typed it.

468
00:13:42,076 --> 00:13:45,996
So that was pretty cool.

469
00:13:46,196 --> 00:13:48,256
Let's go recap the two main

470
00:13:48,256 --> 00:13:49,296
things that we talked about in

471
00:13:49,296 --> 00:13:49,716
this demo.

472
00:13:50,446 --> 00:13:52,196
So the first thing was that the

473
00:13:52,196 --> 00:13:54,136
preprocess text we use the

474
00:13:54,136 --> 00:13:55,046
NSLinguisticTagger.

475
00:13:55,516 --> 00:13:58,586
The second thing was that once I

476
00:13:58,586 --> 00:14:00,106
got those word counts I could

477
00:13:58,586 --> 00:14:00,106
got those word counts I could

478
00:14:00,106 --> 00:14:01,546
then give it to a model and get

479
00:14:01,546 --> 00:14:03,536
a prediction out of it.

480
00:14:03,846 --> 00:14:05,126
And this is a pattern you're

481
00:14:05,126 --> 00:14:06,886
going to encounter a lot with

482
00:14:06,886 --> 00:14:08,756
text based applications because

483
00:14:08,756 --> 00:14:11,066
most text space applications do

484
00:14:11,066 --> 00:14:13,106
not work directly on raw text.

485
00:14:13,666 --> 00:14:15,836
There's always a little bit of

486
00:14:15,836 --> 00:14:16,946
preprocessing that you have to

487
00:14:16,946 --> 00:14:17,396
do for it.

488
00:14:17,966 --> 00:14:20,616
But that was really a simple

489
00:14:20,616 --> 00:14:21,126
example.

490
00:14:21,126 --> 00:14:22,436
It was an introductory example.

491
00:14:22,966 --> 00:14:24,276
Let's step our game, let's get

492
00:14:24,276 --> 00:14:24,966
to the next level.

493
00:14:25,666 --> 00:14:26,726
Let's talk about something

494
00:14:26,726 --> 00:14:28,296
you've all interacted with on a

495
00:14:28,296 --> 00:14:29,246
daily basis.

496
00:14:29,916 --> 00:14:31,506
This is the Apple keyboard.

497
00:14:32,496 --> 00:14:33,916
Now, when you type words in the

498
00:14:33,916 --> 00:14:35,526
Apple keyboard, as you might all

499
00:14:35,526 --> 00:14:36,866
be aware, you get very

500
00:14:36,866 --> 00:14:38,816
contextual predictions of what's

501
00:14:38,876 --> 00:14:40,336
the next most likely word you're

502
00:14:40,336 --> 00:14:40,726
going to type.

503
00:14:41,416 --> 00:14:43,176
So if I say, "I'm not sure if

504
00:14:43,176 --> 00:14:45,876
Oliver will eat oysters, but he

505
00:14:45,876 --> 00:14:46,526
will."

506
00:14:46,666 --> 00:14:48,216
They keyboard tells you "so",

507
00:14:48,216 --> 00:14:50,066
"totally" and "love" are three

508
00:14:50,066 --> 00:14:52,196
likely words you're going to

509
00:14:52,776 --> 00:14:53,166
type next.

510
00:14:53,166 --> 00:14:54,766
So how do you go about building

511
00:14:54,766 --> 00:14:56,166
something as sophisticated as

512
00:14:56,166 --> 00:14:56,416
this?

513
00:14:57,256 --> 00:14:58,416
So this is a predictive

514
00:14:58,416 --> 00:15:00,356
keyboard, and the machine

515
00:14:58,416 --> 00:15:00,356
keyboard, and the machine

516
00:15:00,356 --> 00:15:02,856
learning task here is to make a

517
00:15:02,856 --> 00:15:05,106
prediction for the next word.

518
00:15:05,816 --> 00:15:07,706
The model that's being used here

519
00:15:07,786 --> 00:15:08,986
or the model that will be used

520
00:15:08,986 --> 00:15:11,046
in an application like this is

521
00:15:11,486 --> 00:15:13,116
usually a model that takes the

522
00:15:13,246 --> 00:15:14,146
sequence of words.

523
00:15:14,386 --> 00:15:16,316
So "I'm not sure Oliver will eat

524
00:15:16,316 --> 00:15:17,536
oysters, but he will."

525
00:15:17,536 --> 00:15:18,746
is a sequence of words.

526
00:15:18,746 --> 00:15:20,586
I give that as input to the

527
00:15:20,586 --> 00:15:22,046
model and I get a prediction.

528
00:15:23,186 --> 00:15:24,616
So you might wonder, okay,

529
00:15:24,616 --> 00:15:26,426
what's the difference between

530
00:15:26,426 --> 00:15:28,046
this model that we just saw and

531
00:15:28,046 --> 00:15:29,136
the Sentiment Analysis one?

532
00:15:29,136 --> 00:15:30,556
They look the same to me.

533
00:15:31,496 --> 00:15:34,266
The key difference is that here

534
00:15:34,336 --> 00:15:35,926
the input is a sequence of

535
00:15:35,926 --> 00:15:36,236
words.

536
00:15:36,866 --> 00:15:38,546
So if you jumble up the words

537
00:15:38,546 --> 00:15:39,946
and give it to the model you're

538
00:15:39,946 --> 00:15:41,066
going to get a completely

539
00:15:41,066 --> 00:15:41,766
different prediction.

540
00:15:43,536 --> 00:15:44,876
And to do something like this,

541
00:15:44,876 --> 00:15:46,246
most machine learning models

542
00:15:46,446 --> 00:15:48,166
will have a notion of state

543
00:15:48,166 --> 00:15:50,086
that's associated with them, and

544
00:15:50,086 --> 00:15:50,996
that's how they get this

545
00:15:50,996 --> 00:15:51,456
behavior.

546
00:15:52,166 --> 00:15:54,186
And the state gets passed along

547
00:15:54,416 --> 00:15:55,766
as every prediction is made.

548
00:15:56,246 --> 00:15:58,136
So it's like a baton in a relay

549
00:15:58,136 --> 00:15:58,406
race.

550
00:15:58,626 --> 00:15:59,246
Every time you make a

551
00:15:59,246 --> 00:16:00,656
prediction, take the state and

552
00:15:59,246 --> 00:16:00,656
prediction, take the state and

553
00:16:00,656 --> 00:16:02,906
pass it along.

554
00:16:03,056 --> 00:16:04,416
We're going to do something like

555
00:16:04,416 --> 00:16:06,616
this using an LSDM, usually.

556
00:16:06,886 --> 00:16:08,546
Specifically, like a [inaudible]

557
00:16:08,546 --> 00:16:09,256
network.

558
00:16:09,696 --> 00:16:11,056
But with Core ML, all of this is

559
00:16:11,056 --> 00:16:12,026
going to be a lot easier.

560
00:16:12,606 --> 00:16:13,766
So, let's take a look at what

561
00:16:13,766 --> 00:16:16,056
you do but we'll do it with a

562
00:16:16,056 --> 00:16:17,356
little more fun application.

563
00:16:17,736 --> 00:16:18,756
We'll do it with a Shakespeare

564
00:16:18,756 --> 00:16:19,136
Keyboard.

565
00:16:19,786 --> 00:16:20,706
So instead of a regular

566
00:16:20,706 --> 00:16:22,376
keyboard, this keyboard is going

567
00:16:22,376 --> 00:16:23,066
to make me sound like

568
00:16:23,066 --> 00:16:23,476
Shakespeare.

569
00:16:24,176 --> 00:16:26,336
So if I say, "Shall I compare?"

570
00:16:26,656 --> 00:16:28,216
It should say "thee", "summers",

571
00:16:28,216 --> 00:16:29,316
"day" are the next three words

572
00:16:29,316 --> 00:16:31,846
I'm likely to type.

573
00:16:32,026 --> 00:16:33,626
So, what's really the difference

574
00:16:33,626 --> 00:16:35,256
between the Shakespeare Keyboard

575
00:16:35,256 --> 00:16:36,466
and the regular keyboard?

576
00:16:36,466 --> 00:16:38,716
It's really the model that's

577
00:16:38,766 --> 00:16:39,976
predicting the next word.

578
00:16:40,506 --> 00:16:42,076
So one of those models is

579
00:16:42,136 --> 00:16:43,636
trained on Shakespeare data and

580
00:16:44,126 --> 00:16:45,936
another one is just trained on

581
00:16:45,936 --> 00:16:47,046
regular English data.

582
00:16:47,956 --> 00:16:49,386
So this concept is the Language

583
00:16:49,386 --> 00:16:49,686
Model.

584
00:16:50,576 --> 00:16:52,316
So I just threw so many new

585
00:16:52,316 --> 00:16:53,536
concepts at you, a Language

586
00:16:53,536 --> 00:16:54,856
Model, Sequences, LSDM, but

587
00:16:54,856 --> 00:16:57,196
don't worry, with Core ML this

588
00:16:57,196 --> 00:16:58,256
should be a lot easier.

589
00:16:58,796 --> 00:16:59,616
Let's see how you would do

590
00:16:59,616 --> 00:17:00,236
something like this.

591
00:16:59,616 --> 00:17:00,236
something like this.

592
00:17:01,406 --> 00:17:04,096
So I start with a model and I'm

593
00:17:04,096 --> 00:17:05,476
going to give it the first word,

594
00:17:05,476 --> 00:17:07,185
let's say in this case, "Shall".

595
00:17:08,266 --> 00:17:09,606
That's the current word.

596
00:17:10,596 --> 00:17:12,236
And what I'll get back from the

597
00:17:12,236 --> 00:17:13,526
model are two things.

598
00:17:14,646 --> 00:17:16,236
A set of choices for the next

599
00:17:16,236 --> 00:17:16,526
word.

600
00:17:16,826 --> 00:17:19,316
So in this case I get basically

601
00:17:19,316 --> 00:17:20,726
a probability associated with

602
00:17:20,726 --> 00:17:23,266
all the set of next words, and

603
00:17:23,776 --> 00:17:25,415
I'm also going to get a state

604
00:17:25,715 --> 00:17:27,256
associated with this prediction.

605
00:17:28,616 --> 00:17:29,986
So I'll take these next word

606
00:17:29,986 --> 00:17:31,596
choices and I'll give them to

607
00:17:31,596 --> 00:17:32,016
the user.

608
00:17:32,016 --> 00:17:34,376
The user will either select one

609
00:17:34,376 --> 00:17:35,816
of those three words or maybe

610
00:17:35,816 --> 00:17:37,176
they'll type their own word.

611
00:17:37,176 --> 00:17:38,916
Either way I get a next word.

612
00:17:40,336 --> 00:17:41,906
I'll use that next word, pass it

613
00:17:41,906 --> 00:17:42,976
back to the model for the next

614
00:17:42,976 --> 00:17:44,786
prediction, and I'm also going

615
00:17:44,786 --> 00:17:46,106
to take the state, pass it back

616
00:17:46,106 --> 00:17:47,016
to the model for the next

617
00:17:47,016 --> 00:17:47,386
prediction.

618
00:17:48,406 --> 00:17:50,226
So in steady state every time

619
00:17:50,226 --> 00:17:51,166
you're going to do two things.

620
00:17:51,646 --> 00:17:52,576
You're going to take the current

621
00:17:52,576 --> 00:17:53,846
word in the state and give it to

622
00:17:53,846 --> 00:17:55,536
the model, and what you'll get

623
00:17:55,536 --> 00:17:57,026
back are the set of choices for

624
00:17:57,026 --> 00:17:58,356
the next word and some state.

625
00:17:59,256 --> 00:18:00,016
And the second thing you're

626
00:17:59,256 --> 00:18:00,016
And the second thing you're

627
00:18:00,016 --> 00:18:00,726
going to do is you're going to

628
00:18:00,726 --> 00:18:02,036
pass that all back to the model

629
00:18:02,036 --> 00:18:02,816
for the next prediction.

630
00:18:03,236 --> 00:18:04,296
So, it's pretty simple.

631
00:18:05,076 --> 00:18:06,066
Let's see what the code would

632
00:18:06,066 --> 00:18:07,946
look like to do something like

633
00:18:08,856 --> 00:18:08,956
that.

634
00:18:09,186 --> 00:18:10,686
So I'm going to start by saying

635
00:18:10,686 --> 00:18:11,536
let output =

636
00:18:11,536 --> 00:18:12,666
model.prediction(input).

637
00:18:12,666 --> 00:18:15,766
I'll take the probabilities

638
00:18:15,766 --> 00:18:17,056
associated with the next word

639
00:18:17,056 --> 00:18:18,686
and I'll give it to a function

640
00:18:18,686 --> 00:18:20,486
say displayTopPredictions which

641
00:18:20,826 --> 00:18:22,286
says selects the top 3 and gives

642
00:18:22,286 --> 00:18:23,696
that to the user.

643
00:18:24,636 --> 00:18:26,196
The user is either going to

644
00:18:26,236 --> 00:18:27,576
select one of those 3 words or

645
00:18:27,576 --> 00:18:29,236
maybe type their own, either way

646
00:18:29,236 --> 00:18:30,696
I'll get that from this function

647
00:18:30,696 --> 00:18:33,006
getWordFromUser and I'll pass

648
00:18:33,006 --> 00:18:34,346
that back to the input as the

649
00:18:34,346 --> 00:18:34,906
current word.

650
00:18:35,396 --> 00:18:36,826
I'll take the state, pass it

651
00:18:36,826 --> 00:18:38,696
along to the model again.

652
00:18:39,246 --> 00:18:41,406
So in just a few lines of code,

653
00:18:41,706 --> 00:18:43,276
you can integrate a more less

654
00:18:43,326 --> 00:18:44,986
complex as an LSDM that involves

655
00:18:44,986 --> 00:18:46,876
state, the language model,

656
00:18:46,876 --> 00:18:48,296
keyboard, all sorts of things in

657
00:18:48,296 --> 00:18:49,296
just a few lines of code.

658
00:18:49,846 --> 00:18:51,036
So that was about the different

659
00:18:51,036 --> 00:18:52,406
sets of use cases and a little

660
00:18:52,406 --> 00:18:53,246
bit about text.

661
00:18:54,416 --> 00:18:55,736
Now let's talk about how Core ML

662
00:18:56,236 --> 00:18:58,006
is optimized for the hardware on

663
00:18:58,006 --> 00:18:59,526
which it runs and most

664
00:18:59,526 --> 00:19:01,106
importantly what that means for

665
00:18:59,526 --> 00:19:01,106
importantly what that means for

666
00:19:01,106 --> 00:19:02,196
all of you when you're building

667
00:19:03,146 --> 00:19:03,276
apps.

668
00:19:04,096 --> 00:19:05,506
So we're going to motivate that

669
00:19:05,506 --> 00:19:07,576
with a little video of real time

670
00:19:07,576 --> 00:19:08,366
object detection.

671
00:19:09,336 --> 00:19:10,926
What's important to note here is

672
00:19:10,926 --> 00:19:13,976
that the camera feed is live

673
00:19:13,976 --> 00:19:15,556
going to a model, and a

674
00:19:15,556 --> 00:19:17,236
relatively powerful model, and

675
00:19:17,236 --> 00:19:18,196
you're getting accurate

676
00:19:18,196 --> 00:19:20,306
predictions as you see, live.

677
00:19:21,196 --> 00:19:22,846
And this is only possible

678
00:19:23,006 --> 00:19:24,366
because Core ML is super

679
00:19:24,366 --> 00:19:25,796
optimized for the hardware on

680
00:19:25,796 --> 00:19:26,416
which it runs.

681
00:19:27,126 --> 00:19:28,586
And in this case, the model runs

682
00:19:28,586 --> 00:19:30,156
in about, say, under 50

683
00:19:30,156 --> 00:19:30,816
milliseconds.

684
00:19:31,486 --> 00:19:34,936
I was hoping nobody laugh

685
00:19:34,936 --> 00:19:36,606
because this joke has been said

686
00:19:36,716 --> 00:19:37,676
7 times already.

687
00:19:38,516 --> 00:19:41,866
[ Laughter and Applause ]

688
00:19:42,366 --> 00:19:44,236
So what really matters for you

689
00:19:44,236 --> 00:19:45,646
is that Core ML is built on top

690
00:19:45,646 --> 00:19:46,926
of the performance primitives,

691
00:19:47,326 --> 00:19:49,096
Accelerate and MPS.

692
00:19:49,626 --> 00:19:50,816
But more importantly, it

693
00:19:50,816 --> 00:19:52,356
completely hides the hardware

694
00:19:52,356 --> 00:19:53,456
from you so you don't have to

695
00:19:53,456 --> 00:19:54,696
worry about whether it's running

696
00:19:54,696 --> 00:19:56,636
on the CPU or the GPU.

697
00:19:57,226 --> 00:19:58,606
So that demo that you saw, you

698
00:19:58,606 --> 00:19:59,926
might ask, okay, how many knobs

699
00:19:59,926 --> 00:20:01,126
did I have to turn to get that

700
00:19:59,926 --> 00:20:01,126
did I have to turn to get that

701
00:20:01,126 --> 00:20:01,526
to work?

702
00:20:01,526 --> 00:20:02,916
Well it's zero.

703
00:20:03,146 --> 00:20:04,076
That's the performance you'll

704
00:20:04,076 --> 00:20:05,136
get out of the box.

705
00:20:06,516 --> 00:20:11,766
[ Applause ]

706
00:20:12,266 --> 00:20:14,406
So specifically that demo that

707
00:20:14,406 --> 00:20:16,356
you saw and flower predictor

708
00:20:16,356 --> 00:20:18,146
that you saw earlier, those two

709
00:20:18,146 --> 00:20:20,696
were compute heavy tasks, and we

710
00:20:20,696 --> 00:20:22,366
knew that so we showed you them

711
00:20:22,366 --> 00:20:23,246
on the GPU.

712
00:20:24,046 --> 00:20:25,526
Whereas some of the text based

713
00:20:25,526 --> 00:20:27,316
demos like Sentiment Analysis

714
00:20:27,316 --> 00:20:29,146
and Next Word Prediction, these

715
00:20:29,146 --> 00:20:30,756
were memory heavy tasks and

716
00:20:30,756 --> 00:20:32,246
that's why we showed you them on

717
00:20:32,246 --> 00:20:32,826
the CPU.

718
00:20:33,906 --> 00:20:35,346
But most importantly, they all

719
00:20:35,396 --> 00:20:36,796
just run on Core ML so you don't

720
00:20:36,796 --> 00:20:38,006
have to worry about where it's

721
00:20:38,006 --> 00:20:38,306
running.

722
00:20:38,486 --> 00:20:39,636
We've got your back.

723
00:20:40,396 --> 00:20:42,296
And this kind of abstraction

724
00:20:42,296 --> 00:20:43,746
lets us do powerful things.

725
00:20:44,376 --> 00:20:46,006
So for the Image Captioning, for

726
00:20:46,006 --> 00:20:47,706
example, where part of that

727
00:20:47,706 --> 00:20:49,596
model is compute heavy and part

728
00:20:49,596 --> 00:20:51,336
of that model is memory heavy,

729
00:20:51,536 --> 00:20:53,096
we automatically contact Switch

730
00:20:53,096 --> 00:20:55,346
from the GPU to the CPU so that

731
00:20:55,346 --> 00:20:56,906
you can get the best of both

732
00:20:57,546 --> 00:20:57,696
worlds.

733
00:20:58,836 --> 00:21:01,136
So this was all about use cases

734
00:20:58,836 --> 00:21:01,136
So this was all about use cases

735
00:21:01,136 --> 00:21:03,656
and performance, but Core ML is

736
00:21:03,656 --> 00:21:04,646
much more than just the

737
00:21:04,646 --> 00:21:05,236
framework.

738
00:21:05,686 --> 00:21:06,896
It's a file format and a

739
00:21:06,956 --> 00:21:08,796
collection of tools to help you

740
00:21:08,796 --> 00:21:10,126
get more and more models that

741
00:21:10,126 --> 00:21:11,186
you can use in your apps.

742
00:21:11,706 --> 00:21:12,936
And to talk about that, I'd like

743
00:21:12,936 --> 00:21:13,866
to invite my friend and

744
00:21:13,866 --> 00:21:14,866
colleague, Zach.

745
00:21:16,516 --> 00:21:22,736
[ Applause ]

746
00:21:23,236 --> 00:21:23,876
&gt;&gt; Thanks, Krishna.

747
00:21:25,036 --> 00:21:27,176
Hi. My name is Zach and I'm an

748
00:21:27,176 --> 00:21:29,506
engineer on the Core ML

749
00:21:29,506 --> 00:21:30,186
Engineering Team.

750
00:21:31,516 --> 00:21:33,996
[ Applause ]

751
00:21:34,496 --> 00:21:35,676
And I'm really excited to talk

752
00:21:35,726 --> 00:21:37,856
to you today about the Core ML

753
00:21:38,006 --> 00:21:39,716
Model Format and where you can

754
00:21:39,716 --> 00:21:41,526
get models in this format for

755
00:21:41,526 --> 00:21:43,356
use in your apps.

756
00:21:44,176 --> 00:21:46,136
So by now, you've seen this

757
00:21:46,136 --> 00:21:48,006
diagram many times and this

758
00:21:48,006 --> 00:21:50,146
shows how easy it is to use a

759
00:21:50,146 --> 00:21:51,206
Machine Learning Model.

760
00:21:51,386 --> 00:21:52,816
Simply drag and drop it into

761
00:21:53,076 --> 00:21:54,106
Xcode and you get a code

762
00:21:54,106 --> 00:21:54,596
interface.

763
00:21:55,326 --> 00:21:56,356
But by now you're probably

764
00:21:56,356 --> 00:21:58,356
wondering where do these models

765
00:21:58,356 --> 00:21:58,856
come from?

766
00:21:59,306 --> 00:22:02,076
Well, there are really two

767
00:21:59,306 --> 00:22:02,076
Well, there are really two

768
00:22:02,076 --> 00:22:04,146
places you can look for Machine

769
00:22:04,146 --> 00:22:05,486
Learning Models in the Core ML

770
00:22:05,486 --> 00:22:06,076
Model Format.

771
00:22:06,926 --> 00:22:09,216
The first is the example models

772
00:22:09,436 --> 00:22:10,966
on developer.apple.com.

773
00:22:11,686 --> 00:22:13,146
These are a variety of

774
00:22:13,206 --> 00:22:15,336
pre-trained models already in

775
00:22:15,476 --> 00:22:17,316
the Core ML Model Format and

776
00:22:17,316 --> 00:22:18,636
this is the easiest way to get

777
00:22:18,636 --> 00:22:20,086
started if you're new to machine

778
00:22:20,086 --> 00:22:20,326
learning.

779
00:22:21,426 --> 00:22:23,456
But we also know there's a whole

780
00:22:23,456 --> 00:22:24,816
wide world of machine learning

781
00:22:24,816 --> 00:22:25,296
out there.

782
00:22:25,996 --> 00:22:27,196
There are a lot of existing

783
00:22:27,256 --> 00:22:29,196
popular training tools and a lot

784
00:22:29,196 --> 00:22:31,006
of existing models out there in

785
00:22:31,006 --> 00:22:32,056
these formats already.

786
00:22:32,626 --> 00:22:33,976
So we want to make it possible

787
00:22:34,186 --> 00:22:35,796
to take machine learning models,

788
00:22:36,086 --> 00:22:37,546
trained using the most popular

789
00:22:37,546 --> 00:22:40,146
tools, and use them in your apps

790
00:22:40,146 --> 00:22:40,486
today.

791
00:22:42,156 --> 00:22:44,276
So to that end, we've created

792
00:22:44,536 --> 00:22:45,546
Core ML Tools.

793
00:22:46,236 --> 00:22:47,946
It's a converter package that

794
00:22:47,946 --> 00:22:49,706
takes models in a variety of

795
00:22:49,746 --> 00:22:51,606
popular formats and converts

796
00:22:51,656 --> 00:22:53,056
them into the Core ML Model

797
00:22:53,056 --> 00:22:56,546
Format and it's open source.

798
00:22:57,516 --> 00:23:02,786
[ Applause ]

799
00:22:57,516 --> 00:23:02,786
[ Applause ]

800
00:23:03,286 --> 00:23:04,566
We've released Core ML Tools

801
00:23:04,566 --> 00:23:06,416
under the permissive BSD license

802
00:23:06,736 --> 00:23:09,416
so that there are no barriers to

803
00:23:12,086 --> 00:23:12,296
adoption.

804
00:23:12,426 --> 00:23:14,846
So to get a model off the

805
00:23:14,846 --> 00:23:16,056
internet somewhere, you're going

806
00:23:16,056 --> 00:23:17,396
to start with a model in a

807
00:23:17,396 --> 00:23:18,116
different format.

808
00:23:18,116 --> 00:23:18,806
Let's say Caffe.

809
00:23:19,926 --> 00:23:21,316
So Caffe is a really popular

810
00:23:21,316 --> 00:23:22,586
deep learning training library.

811
00:23:23,126 --> 00:23:25,076
If you're starting with a model

812
00:23:25,076 --> 00:23:26,946
in, say, Caffe Format, the way

813
00:23:26,946 --> 00:23:28,136
that you get it into Core ML

814
00:23:28,136 --> 00:23:29,476
Model Format and to use it in

815
00:23:29,476 --> 00:23:31,106
your application is to run it

816
00:23:31,196 --> 00:23:32,966
through a converter from Core ML

817
00:23:32,966 --> 00:23:33,336
Tools.

818
00:23:34,206 --> 00:23:36,156
Or if you don't find a model out

819
00:23:36,156 --> 00:23:37,386
there that does what you want,

820
00:23:37,916 --> 00:23:38,996
you can start with your own

821
00:23:38,996 --> 00:23:40,826
training data and use any of a

822
00:23:40,826 --> 00:23:42,416
variety of these popular tools

823
00:23:42,636 --> 00:23:43,946
to train your own model in that

824
00:23:43,946 --> 00:23:44,326
format.

825
00:23:44,826 --> 00:23:46,326
From there, again, you run the

826
00:23:46,326 --> 00:23:48,186
converter to produce a model in

827
00:23:48,186 --> 00:23:49,796
Core ML Model Format and the

828
00:23:49,796 --> 00:23:51,146
rest of the workflow stays

829
00:23:51,146 --> 00:23:51,996
exactly the same.

830
00:23:52,406 --> 00:23:53,686
Simply drag and drop the model

831
00:23:53,686 --> 00:23:55,066
into Xcode and you get a code

832
00:23:55,066 --> 00:23:55,726
interface.

833
00:23:56,516 --> 00:24:01,500
[ Applause ]

834
00:23:56,516 --> 00:24:01,500
[ Applause ]

835
00:24:04,046 --> 00:24:06,296
Using Core ML Tools is as easy

836
00:24:06,296 --> 00:24:08,716
as pip install coremltools which

837
00:24:08,746 --> 00:24:09,726
downloads and installs the

838
00:24:09,726 --> 00:24:10,306
package.

839
00:24:10,886 --> 00:24:12,546
This is a python package with

840
00:24:12,596 --> 00:24:14,296
converters for a variety of

841
00:24:14,356 --> 00:24:16,166
popular training tools, and most

842
00:24:16,166 --> 00:24:17,826
of these tools are already in

843
00:24:17,826 --> 00:24:18,336
python.

844
00:24:18,596 --> 00:24:19,776
So to be part of that machine

845
00:24:19,776 --> 00:24:21,396
learning ecosystem, this is a

846
00:24:21,396 --> 00:24:25,036
python library as well.

847
00:24:25,236 --> 00:24:26,796
Let's look at the breakdown of

848
00:24:26,796 --> 00:24:28,116
what's inside this package.

849
00:24:28,866 --> 00:24:30,486
At the very top are each of the

850
00:24:30,486 --> 00:24:32,466
converters, and this is a set of

851
00:24:32,556 --> 00:24:34,586
converters, one for each popular

852
00:24:34,586 --> 00:24:35,386
training library.

853
00:24:36,616 --> 00:24:38,436
Underneath that, we have Core ML

854
00:24:38,436 --> 00:24:40,076
bindings and a converter

855
00:24:40,076 --> 00:24:41,636
library, and this is what we've

856
00:24:41,636 --> 00:24:43,056
used to build all of the

857
00:24:43,056 --> 00:24:43,646
converters.

858
00:24:43,986 --> 00:24:45,806
So here the Core ML bindings

859
00:24:46,166 --> 00:24:47,956
allow you to call directly into

860
00:24:47,956 --> 00:24:49,746
Core ML from python and get

861
00:24:49,746 --> 00:24:51,216
backup prediction, and that's

862
00:24:51,386 --> 00:24:53,046
really useful to verify that the

863
00:24:53,246 --> 00:24:54,676
prediction you get for a

864
00:24:54,676 --> 00:24:56,156
converted model is exactly the

865
00:24:56,156 --> 00:24:57,596
same as the prediction you would

866
00:24:57,596 --> 00:24:59,146
get with the original training

867
00:24:59,146 --> 00:24:59,646
framework.

868
00:25:00,486 --> 00:25:01,516
We also have a converter

869
00:25:01,516 --> 00:25:03,196
library, which is a high-level

870
00:25:03,196 --> 00:25:05,296
API for building converters, and

871
00:25:05,296 --> 00:25:06,696
its shared code among all of

872
00:25:06,696 --> 00:25:08,016
these converters so that make it

873
00:25:08,016 --> 00:25:09,246
really easy to build new

874
00:25:09,246 --> 00:25:10,736
converters for new formats.

875
00:25:12,196 --> 00:25:13,806
Underneath all of that is the

876
00:25:13,806 --> 00:25:15,136
Core ML Specification.

877
00:25:15,976 --> 00:25:18,146
This is a read and write API to

878
00:25:18,146 --> 00:25:20,426
the Core ML Model Format

879
00:25:20,426 --> 00:25:20,956
directly.

880
00:25:21,466 --> 00:25:23,266
So all of the individual fields

881
00:25:23,416 --> 00:25:26,556
can be accessed here.

882
00:25:27,016 --> 00:25:28,266
We've designed the package this

883
00:25:28,266 --> 00:25:30,836
way so that it's compatible and

884
00:25:30,836 --> 00:25:31,506
extensible.

885
00:25:32,126 --> 00:25:33,906
At the top level, the converters

886
00:25:33,906 --> 00:25:36,756
give Core ML compatibility with

887
00:25:36,756 --> 00:25:38,236
a variety of popular tools.

888
00:25:39,776 --> 00:25:41,546
Underneath that, the Core ML

889
00:25:41,546 --> 00:25:43,556
Bindings, Converter Library, and

890
00:25:43,686 --> 00:25:45,536
the Core ML Specification make

891
00:25:45,536 --> 00:25:47,596
this package extensible so it's

892
00:25:47,596 --> 00:25:49,686
easy to build new converters and

893
00:25:49,716 --> 00:25:51,696
to build converters for a lot of

894
00:25:51,696 --> 00:25:52,896
existing formats that aren't

895
00:25:52,926 --> 00:25:53,266
there yet.

896
00:25:53,916 --> 00:25:55,686
And because this is open source,

897
00:25:56,176 --> 00:25:57,856
it's easy to take this package

898
00:25:58,166 --> 00:25:59,636
and even integrate it into

899
00:25:59,636 --> 00:26:01,476
another open source library and

900
00:25:59,636 --> 00:26:01,476
another open source library and

901
00:26:01,476 --> 00:26:02,736
build new converters on top.

902
00:26:02,736 --> 00:26:03,766
And there are no restrictions

903
00:26:03,766 --> 00:26:04,016
here.

904
00:26:04,126 --> 00:26:06,976
This is BSD licensed.

905
00:26:07,516 --> 00:26:10,500
[ Applause ]

906
00:26:13,226 --> 00:26:15,266
The Core ML Model Format is a

907
00:26:15,266 --> 00:26:17,256
single document format and it

908
00:26:17,256 --> 00:26:19,216
encapsulates both the functional

909
00:26:19,216 --> 00:26:20,736
description of the model in

910
00:26:20,736 --> 00:26:22,536
terms of its inputs and outputs,

911
00:26:22,966 --> 00:26:24,126
as well as the trained

912
00:26:24,156 --> 00:26:25,176
parameters of the model.

913
00:26:25,576 --> 00:26:27,656
So to look at an example, for a

914
00:26:27,656 --> 00:26:29,086
simple model like a Linear

915
00:26:29,086 --> 00:26:30,716
Regression, this would be the

916
00:26:30,716 --> 00:26:32,056
set of weights and offset that

917
00:26:32,056 --> 00:26:33,166
are learned at training time.

918
00:26:33,676 --> 00:26:35,246
And for a more complex model

919
00:26:35,246 --> 00:26:36,676
like a Neural Network, this

920
00:26:36,676 --> 00:26:38,476
actually encapsulates both the

921
00:26:38,476 --> 00:26:40,406
structure of the network as well

922
00:26:40,406 --> 00:26:41,866
as the learned weights at

923
00:26:41,866 --> 00:26:42,416
training time.

924
00:26:43,236 --> 00:26:44,976
And this is a public file format

925
00:26:45,146 --> 00:26:46,596
and it's fully documented on

926
00:26:46,596 --> 00:26:51,186
developer.apple.com.

927
00:26:51,746 --> 00:26:53,016
When you look at a Machine

928
00:26:53,016 --> 00:26:55,266
Learning Model in Xcode, you see

929
00:26:55,266 --> 00:26:56,546
a view something like this.

930
00:26:56,546 --> 00:26:57,776
You get all of the metadata and

931
00:26:57,866 --> 00:26:59,936
the functional interface, and

932
00:27:00,046 --> 00:27:02,116
what we now see is that that's

933
00:27:02,116 --> 00:27:04,086
entirely powered by this Core ML

934
00:27:04,086 --> 00:27:04,706
Model Format.

935
00:27:04,766 --> 00:27:06,126
So the Single Document Format

936
00:27:06,206 --> 00:27:07,526
contains all the information

937
00:27:07,776 --> 00:27:09,506
Xcode needs to give you a UI on

938
00:27:09,686 --> 00:27:11,316
top of this model and to let

939
00:27:11,316 --> 00:27:12,816
your code call it and then to

940
00:27:12,816 --> 00:27:14,846
execute it on device.

941
00:27:16,356 --> 00:27:18,876
The Core ML converters all work

942
00:27:18,876 --> 00:27:19,446
in the same way.

943
00:27:20,096 --> 00:27:21,886
They start by taking a model in

944
00:27:21,886 --> 00:27:23,466
a source format, for instance

945
00:27:23,526 --> 00:27:25,936
Caffe, and converting it into

946
00:27:25,936 --> 00:27:27,066
the Core ML Model Format.

947
00:27:28,246 --> 00:27:30,426
There's a set of unified APIs to

948
00:27:30,426 --> 00:27:31,906
convert these models from a

949
00:27:31,906 --> 00:27:33,656
variety of formats into Core ML

950
00:27:33,656 --> 00:27:34,046
Format.

951
00:27:34,446 --> 00:27:35,506
So if you know how to convert

952
00:27:35,506 --> 00:27:36,956
from one format, you know how to

953
00:27:36,996 --> 00:27:38,366
convert from all formats.

954
00:27:39,026 --> 00:27:43,366
Let's take an example and look

955
00:27:43,366 --> 00:27:44,916
more closely at how we would

956
00:27:44,916 --> 00:27:46,416
convert a Caffe model.

957
00:27:47,466 --> 00:27:48,916
Caffe works a bit like this.

958
00:27:49,146 --> 00:27:50,626
It has several files to

959
00:27:50,626 --> 00:27:51,546
represent the model.

960
00:27:52,236 --> 00:27:54,556
The .caffemodel file represents

961
00:27:54,716 --> 00:27:56,036
the learned weights in that

962
00:27:56,126 --> 00:27:58,846
model which the .prototxt file

963
00:27:59,126 --> 00:28:00,626
represents the structure of the

964
00:27:59,126 --> 00:28:00,626
represents the structure of the

965
00:28:00,626 --> 00:28:01,276
Neural Network.

966
00:28:02,516 --> 00:28:04,166
When Caffe is doing inference,

967
00:28:04,806 --> 00:28:06,126
you would start by taking an

968
00:28:06,126 --> 00:28:07,876
image, say, like a rose like

969
00:28:07,916 --> 00:28:10,156
this, and you'd pass it into

970
00:28:10,156 --> 00:28:11,206
Caffe with these two files.

971
00:28:11,796 --> 00:28:13,346
And Caffe would give back an

972
00:28:13,426 --> 00:28:15,146
index of a class label like,

973
00:28:15,246 --> 00:28:16,236
say, 74.

974
00:28:17,186 --> 00:28:18,696
Then there's a third file, a

975
00:28:18,696 --> 00:28:21,226
labels.txt that maps those

976
00:28:21,226 --> 00:28:23,356
indices to string class labels

977
00:28:23,576 --> 00:28:24,186
like "Rose".

978
00:28:25,066 --> 00:28:26,606
So it's important to note that

979
00:28:26,656 --> 00:28:28,886
those 3 files really encapsulate

980
00:28:28,886 --> 00:28:30,296
together all of the information

981
00:28:30,296 --> 00:28:31,716
in the model, and so that's

982
00:28:31,716 --> 00:28:33,156
what's needed for conversion

983
00:28:33,156 --> 00:28:34,226
into the Core ML Format.

984
00:28:35,896 --> 00:28:38,606
So now, let's look at an example

985
00:28:38,606 --> 00:28:40,396
of converting a Caffe model into

986
00:28:40,396 --> 00:28:42,526
a Core ML Model.

987
00:28:43,516 --> 00:28:46,500
[ Applause ]

988
00:28:51,066 --> 00:28:52,706
I'm going to start by opening an

989
00:28:52,706 --> 00:28:54,226
interactive python prompt here.

990
00:28:54,696 --> 00:28:56,466
So we can type python code and

991
00:28:56,466 --> 00:28:58,716
see the output in the real time.

992
00:28:59,536 --> 00:29:00,846
So I'm going to start by

993
00:28:59,536 --> 00:29:00,846
So I'm going to start by

994
00:29:00,906 --> 00:29:02,646
importing coremltools.

995
00:29:02,646 --> 00:29:03,836
Again, this is the name of that

996
00:29:03,916 --> 00:29:04,786
package in python.

997
00:29:04,786 --> 00:29:09,276
And as soon as that's done, I

998
00:29:09,276 --> 00:29:11,006
can just type coremltools.

999
00:29:11,466 --> 00:29:12,706
And when I'm working with a new

1000
00:29:12,706 --> 00:29:14,506
python package, the first thing

1001
00:29:14,506 --> 00:29:16,436
I like to do is tab complete on

1002
00:29:16,556 --> 00:29:17,736
it and see what's available in

1003
00:29:17,736 --> 00:29:18,136
the API.

1004
00:29:19,446 --> 00:29:21,466
So here on tab complete, we can

1005
00:29:21,526 --> 00:29:23,316
see that coremltools contains

1006
00:29:23,416 --> 00:29:25,026
converters which is each of

1007
00:29:25,026 --> 00:29:26,356
those high-level converters from

1008
00:29:26,356 --> 00:29:27,906
another format into the Core ML

1009
00:29:27,906 --> 00:29:30,646
Format, as well as models,

1010
00:29:30,816 --> 00:29:32,736
specification version and utils

1011
00:29:33,196 --> 00:29:34,506
which are the framework bindings

1012
00:29:34,576 --> 00:29:36,256
and the converter library, and

1013
00:29:36,286 --> 00:29:37,636
together with those you can

1014
00:29:37,636 --> 00:29:38,946
build a new converter and test

1015
00:29:39,196 --> 00:29:40,036
that it gives the same

1016
00:29:40,036 --> 00:29:41,216
predictions as the original

1017
00:29:41,216 --> 00:29:41,986
training framework.

1018
00:29:42,646 --> 00:29:44,956
And the .protonamesbase which

1019
00:29:44,956 --> 00:29:46,686
contains the read and write APIs

1020
00:29:46,896 --> 00:29:48,266
for the Core ML Model Format.

1021
00:29:49,126 --> 00:29:50,156
Today we're going to focus on

1022
00:29:50,156 --> 00:29:50,746
the converters.

1023
00:29:51,546 --> 00:29:53,176
So again, if I do .converters

1024
00:29:53,276 --> 00:29:54,736
and then tab complete once more,

1025
00:29:55,136 --> 00:29:56,566
I can see all of the converters

1026
00:29:56,566 --> 00:29:57,746
that are available in this name

1027
00:29:57,746 --> 00:29:58,546
space right now.

1028
00:29:58,616 --> 00:30:00,846
So there's caffe, keras, libsvn,

1029
00:29:58,616 --> 00:30:00,846
So there's caffe, keras, libsvn,

1030
00:30:01,066 --> 00:30:02,646
scikit-learn, and xgboost.

1031
00:30:03,046 --> 00:30:04,066
And today we're going to focus

1032
00:30:04,066 --> 00:30:04,626
on Caffe.

1033
00:30:05,446 --> 00:30:07,416
So once more I'll do .caffe and

1034
00:30:07,576 --> 00:30:08,606
tab complete and see what's

1035
00:30:08,606 --> 00:30:09,116
available.

1036
00:30:09,116 --> 00:30:10,346
And it just tab completed for

1037
00:30:10,346 --> 00:30:10,546
me.

1038
00:30:10,756 --> 00:30:12,396
Convert. So it's that simple.

1039
00:30:12,396 --> 00:30:13,486
There's just one function in

1040
00:30:13,486 --> 00:30:15,426
here called convert, and let's

1041
00:30:15,426 --> 00:30:17,226
look at how we would use that.

1042
00:30:18,756 --> 00:30:22,596
So first I'm going to start by

1043
00:30:22,676 --> 00:30:23,676
setting up the inputs.

1044
00:30:24,006 --> 00:30:25,766
So I know I have a Caffe model

1045
00:30:26,666 --> 00:30:27,716
defined by two files.

1046
00:30:27,786 --> 00:30:29,516
So I'm going to say caffemodel =

1047
00:30:29,636 --> 00:30:30,786
and I'm going to give a two pole

1048
00:30:31,066 --> 00:30:32,506
of two strings pointing to the

1049
00:30:32,506 --> 00:30:34,196
file names of that Caffe Model,

1050
00:30:34,476 --> 00:30:37,326
which are flowers.caffemodel and

1051
00:30:37,396 --> 00:30:38,876
flowers.prototxt.

1052
00:30:39,046 --> 00:30:40,786
And together those represent the

1053
00:30:40,786 --> 00:30:42,536
learned weights in the network

1054
00:30:42,536 --> 00:30:43,426
as well as the network

1055
00:30:43,426 --> 00:30:43,936
structure.

1056
00:30:44,486 --> 00:30:48,636
Next I'm going to set up a class

1057
00:30:48,686 --> 00:30:49,356
label file.

1058
00:30:49,356 --> 00:30:52,666
So I'm going to say labels = and

1059
00:30:52,666 --> 00:30:54,436
I have labels.txt here.

1060
00:30:55,356 --> 00:30:56,816
And that represents the mapping

1061
00:30:56,906 --> 00:30:58,706
of numeric indices to string

1062
00:30:58,706 --> 00:30:59,446
class labels.

1063
00:31:00,886 --> 00:31:02,216
Now to run the converter.

1064
00:31:02,486 --> 00:31:03,376
It's very simple.

1065
00:31:03,686 --> 00:31:05,126
All I have to do is say

1066
00:31:05,236 --> 00:31:10,286
coremlmodel = coremltools

1067
00:31:10,676 --> 00:31:13,626
.converters.caffe.convert and it

1068
00:31:13,626 --> 00:31:16,496
all tab completes, and I'm just

1069
00:31:16,496 --> 00:31:18,466
going to pass in that caffemodel

1070
00:31:19,066 --> 00:31:21,286
and classlabels = labels.

1071
00:31:21,856 --> 00:31:22,886
So I'm just passing in those

1072
00:31:22,886 --> 00:31:23,596
three files.

1073
00:31:24,376 --> 00:31:27,426
And when the converter finishes,

1074
00:31:27,766 --> 00:31:29,416
what I get back is a Core ML

1075
00:31:29,416 --> 00:31:29,736
Model.

1076
00:31:30,516 --> 00:31:32,116
Right here in python, I can

1077
00:31:32,116 --> 00:31:33,996
print out the model and see the

1078
00:31:33,996 --> 00:31:36,396
interface that I get with that

1079
00:31:36,396 --> 00:31:36,716
model.

1080
00:31:37,286 --> 00:31:38,516
So I can see that it has one

1081
00:31:38,516 --> 00:31:41,156
input named "data" and that

1082
00:31:41,156 --> 00:31:43,236
input is a multi-array which

1083
00:31:43,236 --> 00:31:46,406
shaped 3 by 227 by 227 and typed

1084
00:31:46,486 --> 00:31:46,856
double.

1085
00:31:47,096 --> 00:31:49,166
And we'll get back to that in a

1086
00:31:49,166 --> 00:31:49,436
minute.

1087
00:31:50,176 --> 00:31:51,566
It also has 2 outputs.

1088
00:31:52,126 --> 00:31:54,046
One is named "prob" and it's a

1089
00:31:54,046 --> 00:31:56,096
dictionary with string keys, so

1090
00:31:56,096 --> 00:31:57,176
that's going to represent the

1091
00:31:57,176 --> 00:31:59,276
probabilities for each possible

1092
00:31:59,276 --> 00:31:59,976
class label.

1093
00:32:00,966 --> 00:32:02,386
And another output named

1094
00:32:02,386 --> 00:32:03,906
classLabel as a string, and

1095
00:32:04,006 --> 00:32:05,186
that's simply going to be the

1096
00:32:05,186 --> 00:32:06,346
most likely class label.

1097
00:32:06,536 --> 00:32:07,686
So for convenience, you don't

1098
00:32:07,686 --> 00:32:08,366
have to look at all the

1099
00:32:08,366 --> 00:32:09,746
probabilities to find out which

1100
00:32:09,746 --> 00:32:10,656
one is the most likely.

1101
00:32:13,276 --> 00:32:15,696
But looking at this, I know that

1102
00:32:15,696 --> 00:32:17,706
this input type is not quite the

1103
00:32:17,706 --> 00:32:19,146
interface that I wanted the

1104
00:32:19,146 --> 00:32:21,436
model to have, so I can go back

1105
00:32:21,826 --> 00:32:22,856
and run the converter with

1106
00:32:22,856 --> 00:32:24,726
another parameter to modify the

1107
00:32:24,726 --> 00:32:26,366
input type because instead of a

1108
00:32:26,366 --> 00:32:28,216
multi-array, I would like for

1109
00:32:28,216 --> 00:32:29,976
this model to take an image as

1110
00:32:29,976 --> 00:32:30,246
input.

1111
00:32:31,896 --> 00:32:33,666
So I'm going to go back and add

1112
00:32:34,336 --> 00:32:36,306
image input names = data.

1113
00:32:36,916 --> 00:32:38,246
And again, just looking at the

1114
00:32:38,246 --> 00:32:39,446
output here, you can see that

1115
00:32:39,476 --> 00:32:41,356
the input name is data, so it's

1116
00:32:41,356 --> 00:32:42,786
going to know what to do with

1117
00:32:43,846 --> 00:32:44,936
that input.

1118
00:32:45,156 --> 00:32:46,736
If I run the converter once more

1119
00:32:47,126 --> 00:32:48,156
and then again print out the

1120
00:32:48,156 --> 00:32:50,816
model interface, now I see that

1121
00:32:50,816 --> 00:32:52,666
the input named data is an image

1122
00:32:52,936 --> 00:32:55,486
with width 227, height 227, and

1123
00:32:55,526 --> 00:32:56,636
color space RGB.

1124
00:32:59,516 --> 00:33:03,726
[ Applause ]

1125
00:32:59,516 --> 00:33:03,726
[ Applause ]

1126
00:33:04,226 --> 00:33:05,376
Now that we have a Core ML

1127
00:33:05,376 --> 00:33:07,666
Model, let's check and make sure

1128
00:33:07,666 --> 00:33:09,056
that the conversion succeeded

1129
00:33:09,376 --> 00:33:10,646
and thus we get correct

1130
00:33:10,756 --> 00:33:12,126
predictions with this Core ML

1131
00:33:12,126 --> 00:33:12,466
Model.

1132
00:33:13,826 --> 00:33:15,486
I'm going to start by importing

1133
00:33:15,486 --> 00:33:16,966
the python image library so that

1134
00:33:16,966 --> 00:33:18,696
I can work with images and pass

1135
00:33:18,696 --> 00:33:19,886
an image directly into the

1136
00:33:19,886 --> 00:33:20,226
model.

1137
00:33:20,856 --> 00:33:23,096
So I'm going to say from PIL

1138
00:33:23,546 --> 00:33:28,196
input Image and then Rose =

1139
00:33:28,326 --> 00:33:30,946
Image.open rose.jpg.

1140
00:33:31,736 --> 00:33:34,126
And just to prove to you I've

1141
00:33:34,126 --> 00:33:36,756
got nothing up my sleeve, I'm

1142
00:33:36,756 --> 00:33:39,976
going to call rose.show and show

1143
00:33:39,976 --> 00:33:41,896
you that this is indeed a

1144
00:33:41,896 --> 00:33:43,566
picture of a rose.

1145
00:33:47,036 --> 00:33:49,036
[ Applause ]

1146
00:33:49,056 --> 00:33:49,966
You don't need to clap for that.

1147
00:33:50,516 --> 00:33:52,716
[ Laughter ]

1148
00:33:53,216 --> 00:33:55,446
So now that I've shown that this

1149
00:33:55,446 --> 00:33:56,846
image actually does represent a

1150
00:33:56,846 --> 00:33:58,176
rose, let's see if the model

1151
00:33:58,176 --> 00:33:58,706
agrees.

1152
00:33:59,486 --> 00:34:01,476
So checking the prediction is as

1153
00:33:59,486 --> 00:34:01,476
So checking the prediction is as

1154
00:34:01,476 --> 00:34:02,806
easy as calling

1155
00:34:02,906 --> 00:34:06,466
coremlmodel.predict, and this is

1156
00:34:06,526 --> 00:34:08,596
that Core ML framework binding

1157
00:34:08,696 --> 00:34:09,856
that we talked about earlier.

1158
00:34:10,956 --> 00:34:11,856
And we're going to pass the

1159
00:34:11,856 --> 00:34:14,766
input named data the value rose.

1160
00:34:16,416 --> 00:34:17,585
And immediately we get back a

1161
00:34:17,585 --> 00:34:20,096
prediction of class label rose.

1162
00:34:21,516 --> 00:34:26,196
[ Applause ]

1163
00:34:26,696 --> 00:34:27,726
But let's make sure the model --

1164
00:34:27,726 --> 00:34:29,206
let's make sure it's not a fluke

1165
00:34:29,206 --> 00:34:30,176
and let's make sure the model

1166
00:34:30,176 --> 00:34:31,335
really knows that this is a

1167
00:34:31,335 --> 00:34:31,686
rose.

1168
00:34:32,016 --> 00:34:32,976
So we're going to scroll down

1169
00:34:32,976 --> 00:34:34,396
through the class probabilities

1170
00:34:34,985 --> 00:34:36,376
until we see rose here.

1171
00:34:37,936 --> 00:34:39,136
And we can see that the model is

1172
00:34:39,136 --> 00:34:40,456
actually very confident that

1173
00:34:40,456 --> 00:34:41,096
this is a rose.

1174
00:34:41,096 --> 00:34:44,025
So this is .991 out of 1

1175
00:34:44,456 --> 00:34:45,926
confidence that this is a rose.

1176
00:34:45,985 --> 00:34:47,396
So I'm going to conclude that

1177
00:34:47,446 --> 00:34:49,196
probably this model did convert

1178
00:34:49,196 --> 00:34:49,656
correctly.

1179
00:34:50,426 --> 00:34:51,826
If I was doing this in a real

1180
00:34:51,826 --> 00:34:53,295
application, I would want to

1181
00:34:53,295 --> 00:34:54,466
actually test this a bit more

1182
00:34:54,466 --> 00:34:55,826
rigorously so I would provide

1183
00:34:55,826 --> 00:34:57,396
more than one example and I

1184
00:34:57,426 --> 00:34:59,036
would also want to check that

1185
00:34:59,076 --> 00:35:00,406
the predictions that I get here

1186
00:34:59,076 --> 00:35:00,406
the predictions that I get here

1187
00:35:00,406 --> 00:35:02,016
from Core ML are exactly the

1188
00:35:02,106 --> 00:35:03,696
same as the predictions that

1189
00:35:03,846 --> 00:35:05,176
Caffe would have given me for

1190
00:35:05,176 --> 00:35:06,716
the same input, and that's how

1191
00:35:06,716 --> 00:35:07,816
we know that the conversion has

1192
00:35:07,856 --> 00:35:08,366
succeeded.

1193
00:35:09,176 --> 00:35:10,526
But that will take too long for

1194
00:35:10,526 --> 00:35:12,526
this demo so let's move on.

1195
00:35:13,186 --> 00:35:15,126
What I'm going to do now is save

1196
00:35:15,286 --> 00:35:16,966
the model out and then look at

1197
00:35:16,966 --> 00:35:17,806
it in Xcode.

1198
00:35:18,386 --> 00:35:18,966
So I'm, going to say

1199
00:35:18,966 --> 00:35:21,426
coremlmodel.save, and I'm going

1200
00:35:21,426 --> 00:35:21,816
to call it

1201
00:35:21,896 --> 00:35:23,886
FlowerPredictor.mlmodel.

1202
00:35:24,566 --> 00:35:27,736
And then I'm just going to open

1203
00:35:27,736 --> 00:35:29,076
the current directory and finder

1204
00:35:29,516 --> 00:35:31,186
and double-click that model to

1205
00:35:31,186 --> 00:35:33,646
open it in Xcode.

1206
00:35:33,786 --> 00:35:36,656
And what we can see here is that

1207
00:35:36,656 --> 00:35:37,926
it's a Machine Learning Model

1208
00:35:37,926 --> 00:35:39,326
with name FlowerPredictor.

1209
00:35:39,326 --> 00:35:40,356
Type is Neural Network

1210
00:35:40,356 --> 00:35:43,846
Classifier and its size is 229.1

1211
00:35:43,846 --> 00:35:44,266
megabytes.

1212
00:35:45,346 --> 00:35:46,306
But there's a lot of missing

1213
00:35:46,306 --> 00:35:47,186
information, too.

1214
00:35:47,186 --> 00:35:48,686
It doesn't know the author, the

1215
00:35:48,686 --> 00:35:51,216
license, the description or the

1216
00:35:51,216 --> 00:35:52,616
descriptions for the inputs and

1217
00:35:52,616 --> 00:35:52,936
outputs.

1218
00:35:53,896 --> 00:35:55,346
So while this is a working

1219
00:35:55,346 --> 00:35:57,256
model, it's not necessarily one

1220
00:35:57,256 --> 00:35:58,286
I would want to give to a

1221
00:35:58,286 --> 00:35:59,666
colleague or put on the internet

1222
00:36:00,096 --> 00:36:01,696
because it's not quite as useful

1223
00:36:01,696 --> 00:36:03,066
if it doesn't really declare

1224
00:36:03,066 --> 00:36:04,196
what it's supposed to do and how

1225
00:36:04,196 --> 00:36:04,646
to use it.

1226
00:36:05,336 --> 00:36:06,136
So I'm going to be a good

1227
00:36:06,186 --> 00:36:07,656
citizen and go back and give

1228
00:36:07,656 --> 00:36:08,846
this model some metadata.

1229
00:36:14,066 --> 00:36:15,836
Back in the python prompt, I can

1230
00:36:15,836 --> 00:36:17,436
just mutate the model right here

1231
00:36:17,976 --> 00:36:19,816
by assigning to fields at the

1232
00:36:19,876 --> 00:36:20,396
top level.

1233
00:36:20,396 --> 00:36:24,076
So I can say author = "Zach

1234
00:36:24,976 --> 00:36:25,126
Nation".

1235
00:36:25,896 --> 00:36:29,736
coremlmodel.license = "BSD".

1236
00:36:31,646 --> 00:36:35,916
coremlmodel.shortdescription = a

1237
00:36:36,026 --> 00:36:37,686
flower classifier.

1238
00:36:39,286 --> 00:36:41,396
And let's set the help text for

1239
00:36:41,396 --> 00:36:42,606
those inputs and outputs as

1240
00:36:42,606 --> 00:36:44,376
well, because not only does that

1241
00:36:44,376 --> 00:36:46,536
show up in the Xcode view, but

1242
00:36:46,536 --> 00:36:48,536
when the generated code is there

1243
00:36:48,536 --> 00:36:50,036
and you can call into it that

1244
00:36:50,036 --> 00:36:51,976
actually becomes documentation

1245
00:36:52,066 --> 00:36:53,476
comments in the generated code.

1246
00:36:53,916 --> 00:36:55,306
So when your tab completing an

1247
00:36:55,556 --> 00:36:56,796
Xcode this is what someone

1248
00:36:56,796 --> 00:36:58,166
consuming this mode will see.

1249
00:36:58,826 --> 00:37:00,656
So I'm going to say

1250
00:36:58,826 --> 00:37:00,656
So I'm going to say

1251
00:37:00,906 --> 00:37:03,506
coremlmodel.inputdescription for

1252
00:37:03,506 --> 00:37:07,816
"data" is an image of a flower.

1253
00:37:09,466 --> 00:37:09,836
And

1254
00:37:09,836 --> 00:37:11,996
coremlmodel.outputdescription

1255
00:37:11,996 --> 00:37:16,006
"prob" is the probabilities for

1256
00:37:16,006 --> 00:37:20,516
each flower type, for the given

1257
00:37:20,516 --> 00:37:20,986
input.

1258
00:37:21,656 --> 00:37:21,746
And

1259
00:37:23,276 --> 00:37:26,486
coremlmodel.outputdescription

1260
00:37:26,546 --> 00:37:30,516
"classLabel" is "The most likely

1261
00:37:30,546 --> 00:37:33,126
type of flower, for the given

1262
00:37:33,176 --> 00:37:33,486
input."

1263
00:37:34,066 --> 00:37:37,056
And now we can just save that

1264
00:37:37,056 --> 00:37:39,796
model once again and I'm just

1265
00:37:41,106 --> 00:37:42,516
going to clobber the file that

1266
00:37:42,516 --> 00:37:44,256
was there because now I want the

1267
00:37:44,256 --> 00:37:44,936
one with metadata.

1268
00:37:44,936 --> 00:37:46,936
So I'm going to just save it

1269
00:37:46,936 --> 00:37:47,946
right on top of the file that

1270
00:37:47,946 --> 00:37:49,926
was there before and open that

1271
00:37:49,926 --> 00:37:51,226
directory and finder again.

1272
00:37:52,046 --> 00:37:53,176
And now when I double-click the

1273
00:37:53,176 --> 00:37:55,546
model and open it in Xcode, we

1274
00:37:55,546 --> 00:37:57,176
can see that it contains useful

1275
00:37:57,176 --> 00:37:58,996
metadata describing how the

1276
00:37:58,996 --> 00:38:00,536
model is intended should be used

1277
00:37:58,996 --> 00:38:00,536
model is intended should be used

1278
00:38:00,786 --> 00:38:02,506
and what the inputs and outputs

1279
00:38:02,576 --> 00:38:02,816
do.

1280
00:38:04,516 --> 00:38:09,500
[ Applause ]

1281
00:38:13,076 --> 00:38:16,996
So to recap, what we saw is that

1282
00:38:16,996 --> 00:38:18,706
using Core ML Tools to convert a

1283
00:38:18,706 --> 00:38:21,266
model is as easy as import

1284
00:38:21,266 --> 00:38:23,526
coremltools, setting up the

1285
00:38:23,526 --> 00:38:25,566
inputs, and then calling a

1286
00:38:25,646 --> 00:38:27,186
simple high-level convert

1287
00:38:27,186 --> 00:38:29,316
function to get back a model in

1288
00:38:29,316 --> 00:38:30,356
Core ML Model Format.

1289
00:38:31,096 --> 00:38:32,756
And the best part is, let's say

1290
00:38:32,756 --> 00:38:33,946
you switch training frameworks

1291
00:38:34,226 --> 00:38:36,676
from Caffe to Keras, switching

1292
00:38:36,676 --> 00:38:38,416
converters is as easy as

1293
00:38:38,476 --> 00:38:40,366
updating the name space because

1294
00:38:40,366 --> 00:38:41,646
all of the convert functions

1295
00:38:41,816 --> 00:38:43,826
share the same high-level API

1296
00:38:47,516 --> 00:38:51,796
[ Applause ]

1297
00:38:52,296 --> 00:38:54,926
Core ML Tools supports Caffe and

1298
00:38:54,956 --> 00:38:57,026
Keras models as Neural Networks.

1299
00:38:57,486 --> 00:38:58,966
Scikit-Learn for Pipelines.

1300
00:39:00,146 --> 00:39:02,066
Scikit-Learn and XGBoost for

1301
00:39:02,066 --> 00:39:04,876
Tree Ensembles, and LIBSVM and

1302
00:39:05,066 --> 00:39:06,876
Scikit-Learn for Linear Models

1303
00:39:07,026 --> 00:39:08,366
and Support Vector Machines.

1304
00:39:09,136 --> 00:39:10,346
It's also worth noting that

1305
00:39:10,506 --> 00:39:12,196
Keras is a really powerful

1306
00:39:12,376 --> 00:39:14,216
high-level interface to several

1307
00:39:14,216 --> 00:39:15,506
popular deep learning training

1308
00:39:15,506 --> 00:39:17,056
tools, including TensorFlow.

1309
00:39:17,646 --> 00:39:18,446
So if you're training a

1310
00:39:18,446 --> 00:39:20,406
TensorFlow Model in Keras, you

1311
00:39:20,406 --> 00:39:22,356
can use Core ML Tools to convert

1312
00:39:22,356 --> 00:39:24,606
it into Core ML Model Format.

1313
00:39:26,516 --> 00:39:31,196
[ Applause ]

1314
00:39:31,696 --> 00:39:34,046
Obtaining models, you want to

1315
00:39:34,046 --> 00:39:35,176
look in two places.

1316
00:39:35,816 --> 00:39:37,936
One is the set of example models

1317
00:39:37,936 --> 00:39:39,466
on developer.apple.com.

1318
00:39:39,846 --> 00:39:40,766
And again, these are

1319
00:39:40,896 --> 00:39:42,526
pre-training models already in

1320
00:39:42,526 --> 00:39:44,206
the Core ML Model Format and so

1321
00:39:44,206 --> 00:39:45,466
this is the easiest way to get

1322
00:39:45,466 --> 00:39:46,916
started if you're new to Machine

1323
00:39:46,916 --> 00:39:48,516
Learning or if one of these

1324
00:39:48,516 --> 00:39:50,256
models does the task that you're

1325
00:39:50,256 --> 00:39:51,516
trying to do in your app.

1326
00:39:51,956 --> 00:39:52,946
But because there's a whole

1327
00:39:52,946 --> 00:39:54,066
world of machine learning out

1328
00:39:54,126 --> 00:39:55,836
there and a variety of models in

1329
00:39:55,836 --> 00:39:57,266
use cases in a variety of

1330
00:39:57,266 --> 00:39:59,236
formats, we've created Core ML

1331
00:39:59,236 --> 00:40:01,056
Tools to allow you to convert

1332
00:39:59,236 --> 00:40:01,056
Tools to allow you to convert

1333
00:40:01,246 --> 00:40:02,376
from any of these popular

1334
00:40:02,376 --> 00:40:04,236
formats into the Core ML Model

1335
00:40:05,096 --> 00:40:05,286
Format.

1336
00:40:06,516 --> 00:40:11,306
[ Applause ]

1337
00:40:11,806 --> 00:40:13,526
So, in summary, what we've

1338
00:40:13,526 --> 00:40:15,826
learned today is that Core ML

1339
00:40:15,826 --> 00:40:17,396
makes it really easy to

1340
00:40:17,396 --> 00:40:18,356
integrate Machine Learning

1341
00:40:18,356 --> 00:40:19,486
Models into your app.

1342
00:40:19,886 --> 00:40:22,016
Simply drag and drop into Xcode

1343
00:40:22,016 --> 00:40:23,336
and you get a code interfaced to

1344
00:40:23,336 --> 00:40:23,736
the model.

1345
00:40:25,176 --> 00:40:26,976
Core ML has rich datatype

1346
00:40:27,046 --> 00:40:28,876
support for a variety of use

1347
00:40:28,946 --> 00:40:30,336
cases and it deals with

1348
00:40:30,336 --> 00:40:31,486
datatypes that you're already

1349
00:40:31,486 --> 00:40:33,566
familiar with from your app

1350
00:40:35,316 --> 00:40:35,436
code.

1351
00:40:35,626 --> 00:40:37,226
Core ML is hardware optimized

1352
00:40:37,406 --> 00:40:38,486
and it's built on top of

1353
00:40:38,536 --> 00:40:39,796
performance primitives like

1354
00:40:39,796 --> 00:40:41,296
Metal Performance Shaders and

1355
00:40:41,296 --> 00:40:42,976
Accelerate so that you get the

1356
00:40:42,976 --> 00:40:44,526
best possible performance on

1357
00:40:44,526 --> 00:40:45,066
device.

1358
00:40:45,656 --> 00:40:49,526
And through Core ML Tools, Core

1359
00:40:49,526 --> 00:40:51,116
ML is compatible with the most

1360
00:40:51,156 --> 00:40:53,376
popular Machine Learning Formats

1361
00:40:53,726 --> 00:40:54,896
and more will be added over

1362
00:40:55,746 --> 00:40:55,836
time.

1363
00:40:57,286 --> 00:40:59,106
For more information, please see

1364
00:40:59,106 --> 00:41:00,986
developer.apple.com with our

1365
00:40:59,106 --> 00:41:00,986
developer.apple.com with our

1366
00:41:00,986 --> 00:41:02,556
session number 710.

1367
00:41:03,116 --> 00:41:05,236
We have a couple of related

1368
00:41:05,236 --> 00:41:06,496
sessions coming up you may be

1369
00:41:06,496 --> 00:41:07,336
interested in.

1370
00:41:07,526 --> 00:41:08,516
To look at some low-level

1371
00:41:08,516 --> 00:41:09,896
details about how we get such

1372
00:41:09,896 --> 00:41:11,016
good performance on this

1373
00:41:11,016 --> 00:41:12,266
hardware, check out the

1374
00:41:12,266 --> 00:41:14,026
Accelerate and Metal 2 sessions.

1375
00:41:14,436 --> 00:41:14,796
Thank you.

1376
00:41:15,516 --> 00:41:20,500
[ Applause ]
