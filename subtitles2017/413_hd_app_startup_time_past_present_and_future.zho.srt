1
00:00:16,917 --> 00:00:21,522
<c.magenta>（应用启动时间：</c>

2
00:00:21,588 --> 00:00:22,723
<c.magenta>大家好</c>

3
00:00:26,994 --> 00:00:28,629
<c.magenta>欢迎参加演讲</c>

4
00:00:28,996 --> 00:00:31,598
<c.magenta>我是Louis Gerbarg</c>

5
00:00:31,798 --> 00:00:35,302
<c.magenta>今天我们将会讨论</c>

6
00:00:36,436 --> 00:00:39,239
<c.magenta>今天的内容很多</c>

7
00:00:39,806 --> 00:00:40,974
<c.magenta>我想概要介绍</c>

8
00:00:41,041 --> 00:00:43,110
<c.magenta>今天要讲的内容</c>

9
00:00:43,410 --> 00:00:48,682
<c.magenta>首先我会回顾</c>

10
00:00:49,216 --> 00:00:51,852
<c.magenta>然后讨论我们开发的一些新工具</c>

11
00:00:51,919 --> 00:00:56,156
<c.magenta>这些工具可以更方便地</c>

12
00:00:56,757 --> 00:00:59,593
<c.magenta>然后 我简要介绍</c>

13
00:00:59,660 --> 00:01:01,962
<c.magenta>应用历史</c>

14
00:00:59,660 --> 00:01:01,962
<c.magenta>应用历史</c>

15
00:01:02,529 --> 00:01:06,667
<c.magenta>接下来我想讨论我们将在</c>

16
00:01:06,733 --> 00:01:10,137
<c.magenta>发布的全新dyld</c>

17
00:01:10,671 --> 00:01:14,641
<c.magenta>最后我想讨论</c>

18
00:01:16,109 --> 00:01:20,414
<c.magenta>首先我做一下记录</c>

19
00:01:21,882 --> 00:01:23,917
<c.magenta>我们希望倾听你们的意见</c>

20
00:01:24,218 --> 00:01:28,488
<c.magenta>如果你们遇到什么问题</c>

21
00:01:28,555 --> 00:01:31,992
<c.magenta>请将标题设为“DYLD USAGE”</c>

22
00:01:34,428 --> 00:01:36,363
<c.magenta>现在我想介绍</c>

23
00:01:36,430 --> 00:01:37,598
<c.magenta>使用的一些术语</c>

24
00:01:38,999 --> 00:01:42,769
<c.magenta>首先 启动时间是什么意思？</c>

25
00:01:43,704 --> 00:01:46,874
<c.magenta>在本演讲中</c>

26
00:01:46,940 --> 00:01:49,443
<c.magenta>main函数执行之前所用的时间</c>

27
00:01:49,743 --> 00:01:53,447
<c.magenta>如果你编写一个应用</c>

28
00:01:53,514 --> 00:01:57,017
<c.magenta>完成之后</c>

29
00:01:57,084 --> 00:01:59,419
<c.magenta>需要运行</c>

30
00:02:00,387 --> 00:02:02,656
<c.magenta>UI Application Delegates代码</c>

31
00:02:03,357 --> 00:02:07,194
<c.magenta>这方面的知识有很多</c>

32
00:02:07,494 --> 00:02:10,130
<c.magenta>今天我们讨论main执行之前</c>

33
00:02:10,197 --> 00:02:11,899
<c.magenta>以及你可以如何加速这个过程</c>

34
00:02:12,666 --> 00:02:17,571
<c.magenta>此外 我还想要解释</c>

35
00:02:18,505 --> 00:02:21,975
<c.magenta>启动收尾是指启动你的程序</c>

36
00:02:22,042 --> 00:02:23,343
<c.magenta>所需要的全部信息</c>

37
00:02:23,577 --> 00:02:27,714
<c.magenta>比如使用什么dylib</c>

38
00:02:27,781 --> 00:02:29,550
<c.magenta>代码签名是什么</c>

39
00:02:31,118 --> 00:02:34,721
<c.magenta>让我们进入演讲的主题</c>

40
00:02:35,589 --> 00:02:39,226
<c.magenta>去年我说过</c>

41
00:02:39,293 --> 00:02:42,062
<c.magenta>我们应该减少代码</c>

42
00:02:42,129 --> 00:02:45,532
<c.magenta>因为代码越少 启动就越快</c>

43
00:02:45,799 --> 00:02:49,403
<c.magenta>无论我们如何加速</c>

44
00:02:49,469 --> 00:02:50,737
<c.magenta>启动速度就越快</c>

45
00:02:51,672 --> 00:02:53,874
<c.magenta>这个建议始终适用</c>

46
00:02:54,608 --> 00:02:59,713
<c.magenta>你应该使用更少的dylib</c>

47
00:02:59,780 --> 00:03:02,249
<c.magenta>从时间的角度来看</c>

48
00:02:59,780 --> 00:03:02,249
<c.magenta>从时间的角度来看</c>

49
00:03:02,583 --> 00:03:04,685
<c.magenta>使用系统库效果更好</c>

50
00:03:05,419 --> 00:03:08,388
<c.magenta>应该声明较少的库和方法</c>

51
00:03:08,455 --> 00:03:11,558
<c.magenta>减少初始化函数</c>

52
00:03:13,627 --> 00:03:16,396
<c.magenta>最后我将会介绍一些事半功倍的方法</c>

53
00:03:16,463 --> 00:03:19,533
<c.magenta>你可以使用更多的Swift代码</c>

54
00:03:19,600 --> 00:03:24,204
<c.magenta>因为Swift从设计上</c>

55
00:03:24,271 --> 00:03:27,341
<c.magenta>在使用C、C++ 和</c>

56
00:03:27,407 --> 00:03:29,443
<c.magenta>Swift没有初始化器</c>

57
00:03:29,910 --> 00:03:32,513
<c.magenta>Swift不允许特定类型的</c>

58
00:03:32,579 --> 00:03:34,481
<c.magenta>这样的结构会延长启动时间</c>

59
00:03:34,548 --> 00:03:36,617
<c.magenta>总的来说 转向Swift</c>

60
00:03:36,683 --> 00:03:41,388
<c.magenta>让你更容易获得快速的程序启动</c>

61
00:03:42,523 --> 00:03:45,993
<c.magenta>Swift代码更精简</c>

62
00:03:46,059 --> 00:03:48,762
<c.magenta>因此请转移到</c>

63
00:03:48,829 --> 00:03:51,532
<c.magenta>将会提供更多的好处</c>

64
00:03:51,965 --> 00:03:54,902
<c.magenta>现在我们来看</c>

65
00:03:57,371 --> 00:04:01,175
<c.magenta>iOS 11和</c>

66
00:03:57,371 --> 00:04:01,175
<c.magenta>iOS 11和</c>

67
00:04:01,241 --> 00:04:05,012
<c.magenta>我们在Instruments中</c>

68
00:04:05,078 --> 00:04:06,413
<c.magenta>缩短应用启动时间</c>

69
00:04:06,480 --> 00:04:09,983
<c.magenta>这是非常不错的功能</c>

70
00:04:10,050 --> 00:04:13,453
<c.magenta>它们在main函数之前运行</c>

71
00:04:13,520 --> 00:04:16,557
<c.magenta>你并不能透彻地</c>

72
00:04:17,391 --> 00:04:19,625
<c.magenta>现在Instruments</c>

73
00:04:19,692 --> 00:04:22,596
<c.magenta>提供每个静态初始化器的准确时间</c>

74
00:04:22,663 --> 00:04:25,432
<c.magenta>现在我进行演示</c>

75
00:04:25,732 --> 00:04:31,438
<c.magenta>这里有一个应用</c>

76
00:04:31,505 --> 00:04:34,474
<c.magenta>它也使用一些可爱的动物图片</c>

77
00:04:35,142 --> 00:04:36,410
<c.magenta>让我启动它</c>

78
00:04:37,744 --> 00:04:41,248
<c.magenta>这需要一定时间</c>

79
00:04:42,649 --> 00:04:45,152
<c.magenta>还需要一点时间</c>

80
00:04:45,219 --> 00:04:48,755
<c.magenta>启动后 我们看到几只灰鼠和猫</c>

81
00:04:50,791 --> 00:04:54,962
<c.magenta>让我们来看为什么</c>

82
00:04:55,596 --> 00:04:58,765
<c.magenta>我会在Instruments中</c>

83
00:04:58,832 --> 00:05:04,238
<c.magenta>我停止执行这行代码</c>

84
00:04:58,832 --> 00:05:04,238
<c.magenta>我停止执行这行代码</c>

85
00:05:05,973 --> 00:05:09,710
<c.magenta>现在我启动一个空模板</c>

86
00:05:10,944 --> 00:05:13,480
<c.magenta>添加新静态初始化器工具</c>

87
00:05:15,849 --> 00:05:17,551
<c.magenta>就在这里</c>

88
00:05:17,618 --> 00:05:19,720
<c.magenta>然后我添加一个</c>

89
00:05:19,786 --> 00:05:22,422
<c.magenta>这样就很容易看到运行情况</c>

90
00:05:28,295 --> 00:05:29,129
<c.magenta>开始运行</c>

91
00:05:29,830 --> 00:05:33,433
<c.magenta>设置好这些工具之后</c>

92
00:05:35,235 --> 00:05:37,704
<c.magenta>我们获得跟踪数据</c>

93
00:05:38,906 --> 00:05:41,008
<c.magenta>还没有出现</c>

94
00:05:41,074 --> 00:05:44,378
<c.magenta>现在出现了</c>

95
00:05:45,646 --> 00:05:47,014
<c.magenta>出现显示内容</c>

96
00:05:47,080 --> 00:05:49,683
<c.magenta>我会放大</c>

97
00:05:50,350 --> 00:05:53,453
<c.magenta>这里有一个函数名为</c>

98
00:05:53,520 --> 00:05:54,955
<c.magenta>这是正确的</c>

99
00:05:55,022 --> 00:05:58,125
<c.magenta>加载数据源</c>

100
00:05:58,692 --> 00:06:00,561
<c.magenta>我尝试进行调试</c>

101
00:05:58,692 --> 00:06:00,561
<c.magenta>我尝试进行调试</c>

102
00:06:00,627 --> 00:06:04,898
<c.magenta>让我们来看CPU Usage工具</c>

103
00:06:04,965 --> 00:06:10,771
<c.magenta>可以看到初始化器运行时间</c>

104
00:06:11,271 --> 00:06:14,107
<c.magenta>在这里 可以看到dyld</c>

105
00:06:15,609 --> 00:06:20,614
<c.magenta>如果我这样做</c>

106
00:06:21,148 --> 00:06:24,952
<c.magenta>所用时间为9.5秒</c>

107
00:06:25,018 --> 00:06:29,823
<c.magenta>初始化器占用9.5秒</c>

108
00:06:29,890 --> 00:06:33,160
<c.magenta>通常你不用这样做</c>

109
00:06:34,728 --> 00:06:38,298
<c.magenta>在这里我们可以看到</c>

110
00:06:38,365 --> 00:06:40,000
<c.magenta>我们在初始化器调用中</c>

111
00:06:40,067 --> 00:06:42,336
<c.magenta>现在你很容易找到它</c>

112
00:06:42,703 --> 00:06:48,041
<c.magenta>现在我返回Xcode</c>

113
00:06:48,509 --> 00:06:52,579
<c.magenta>看到了</c>

114
00:06:52,646 --> 00:06:54,648
<c.magenta>我使用C语言实现它</c>

115
00:06:54,715 --> 00:06:56,683
<c.magenta>因为Swift不允许做这样的事情</c>

116
00:06:57,117 --> 00:07:01,088
<c.magenta>我在这里创建构造函数</c>

117
00:06:57,117 --> 00:07:01,088
<c.magenta>我在这里创建构造函数</c>

118
00:07:01,154 --> 00:07:03,190
<c.magenta>如果我返回源代码</c>

119
00:07:05,926 --> 00:07:09,930
<c.magenta>我可以删除这个函数</c>

120
00:07:10,931 --> 00:07:12,866
<c.magenta>因为它仅用于调试目的</c>

121
00:07:13,534 --> 00:07:18,238
<c.magenta>如果运行 程序将会立即启动</c>

122
00:07:18,906 --> 00:07:21,542
<c.magenta>因此我们可以快速地发现</c>

123
00:07:21,608 --> 00:07:24,144
<c.magenta>哪些堆栈初始化器</c>

124
00:07:24,211 --> 00:07:27,047
<c.magenta>这涉及多个dylib</c>

125
00:07:27,114 --> 00:07:29,383
<c.magenta>包括系统dylib</c>

126
00:07:29,449 --> 00:07:32,853
<c.magenta>这是你为它们提供的输入造成的</c>

127
00:07:33,487 --> 00:07:39,760
<c.magenta>这依赖于High Sierra</c>

128
00:07:39,826 --> 00:07:43,597
<c.magenta>和dyld中的新基础结构</c>

129
00:07:43,897 --> 00:07:46,867
<c.magenta>现在可以捕获大多数初始化器</c>

130
00:07:46,934 --> 00:07:50,737
<c.magenta>一些边界例子</c>

131
00:07:50,804 --> 00:07:54,608
<c.magenta>快速地发现</c>

132
00:07:54,675 --> 00:07:57,711
<c.magenta>让你能够解决问题</c>

133
00:07:57,778 --> 00:07:59,279
<c.magenta>提供更好的用户体验</c>

134
00:07:59,580 --> 00:08:00,447
<c.magenta>谢谢</c>

135
00:07:59,580 --> 00:08:00,447
<c.magenta>谢谢</c>

136
00:08:05,552 --> 00:08:09,022
<c.magenta>前面我说过</c>

137
00:08:10,023 --> 00:08:12,526
<c.magenta>跨世纪的动态链接技术</c>

138
00:08:12,893 --> 00:08:15,762
<c.magenta>很早以前我们就已经推出dyld</c>

139
00:08:15,829 --> 00:08:19,199
<c.magenta>它们没有版本号</c>

140
00:08:19,266 --> 00:08:23,770
<c.magenta>这是dyld 1</c>

141
00:08:24,972 --> 00:08:26,640
<c.magenta>可以追溯到1996年</c>

142
00:08:26,707 --> 00:08:31,645
<c.magenta>此前 NeXT使用静态二进制数据</c>

143
00:08:32,513 --> 00:08:38,552
<c.magenta>作用并不是很大 其历史早于</c>

144
00:08:38,619 --> 00:08:40,854
<c.magenta>现在dlopen还存在于</c>

145
00:08:40,921 --> 00:08:44,591
<c.magenta>它们是一些专用扩展</c>

146
00:08:45,092 --> 00:08:48,061
<c.magenta>NeXTStep</c>

147
00:08:48,128 --> 00:08:52,399
<c.magenta>因此开发者在macOS 10</c>

148
00:08:52,466 --> 00:08:54,401
<c.magenta>以支持标准Unix软件</c>

149
00:08:54,768 --> 00:08:58,005
<c.magenta>问题是这些包装器</c>

150
00:08:58,071 --> 00:09:00,607
<c.magenta>因此可能有一些边界例子</c>

151
00:08:58,071 --> 00:09:00,607
<c.magenta>因此可能有一些边界例子</c>

152
00:09:00,674 --> 00:09:02,743
<c.magenta>因此会造成运行缓慢</c>

153
00:09:03,143 --> 00:09:07,848
<c.magenta>它是在大多数使用</c>

154
00:09:07,915 --> 00:09:09,149
<c.magenta>这些知识很重要</c>

155
00:09:09,550 --> 00:09:13,520
<c.magenta>C++ 有许多的特性</c>

156
00:09:13,587 --> 00:09:17,791
<c.magenta>它们在静态环境中工作良好</c>

157
00:09:17,858 --> 00:09:20,027
<c.magenta>但是在动态环境中</c>

158
00:09:20,093 --> 00:09:22,930
<c.magenta>可能会降低性能</c>

159
00:09:23,030 --> 00:09:24,631
<c.magenta>因此大型C++代码库</c>

160
00:09:24,698 --> 00:09:29,636
<c.magenta>导致动态链接器</c>

161
00:09:33,140 --> 00:09:38,579
<c.magenta>在发布macOS 10.0和</c>

162
00:09:38,645 --> 00:09:40,113
<c.magenta>名称为预绑定</c>

163
00:09:40,581 --> 00:09:44,685
<c.magenta>你们一些人知道预绑定技术</c>

164
00:09:46,220 --> 00:09:48,622
<c.magenta>我知道你们会感到困惑</c>

165
00:09:48,689 --> 00:09:52,392
<c.magenta>我们使用预绑定技术</c>

166
00:09:52,459 --> 00:09:56,330
<c.magenta>找到固定地址</c>

167
00:09:56,630 --> 00:09:59,967
<c.magenta>动态加载器将会</c>

168
00:10:00,033 --> 00:10:04,104
<c.magenta>如果成功 将会编辑</c>

169
00:10:04,171 --> 00:10:07,241
<c.magenta>以获得所有预计算地址</c>

170
00:10:07,307 --> 00:10:10,878
<c.magenta>当它将所有数据放入相同地址时</c>

171
00:10:11,144 --> 00:10:13,580
<c.magenta>这会大幅提高速度</c>

172
00:10:14,248 --> 00:10:19,086
<c.magenta>但是这也意味着</c>

173
00:10:19,520 --> 00:10:22,256
<c.magenta>这并不是很好的做法</c>

174
00:10:22,322 --> 00:10:23,991
<c.magenta>至少从安全性来说是如此</c>

175
00:10:25,893 --> 00:10:29,530
<c.magenta>后来我们推出dyld 2</c>

176
00:10:30,264 --> 00:10:34,234
<c.magenta>dyld 2是dyld的</c>

177
00:10:36,069 --> 00:10:38,805
<c.magenta>正确支持C++初始化器语义</c>

178
00:10:38,872 --> 00:10:44,511
<c.magenta>我们扩展mach-o格式</c>

179
00:10:44,578 --> 00:10:47,347
<c.magenta>从而获得高效率的C++库支持</c>

180
00:10:47,848 --> 00:10:51,251
<c.magenta>它具有完整的本机dlopen</c>

181
00:10:51,318 --> 00:10:54,988
<c.magenta>具有正确的语义</c>

182
00:10:55,055 --> 00:10:58,992
<c.magenta>这些旧版API仍然位于macOS中</c>

183
00:11:00,827 --> 00:11:02,996
<c.magenta>dyld的设计目标是提高速度</c>

184
00:11:03,463 --> 00:11:06,934
<c.magenta>因此仅进行有限的健全性检查</c>

185
00:11:07,000 --> 00:11:10,237
<c.magenta>以前 恶意程序并不多</c>

186
00:11:11,271 --> 00:11:15,142
<c.magenta>由于它有一些安全问题</c>

187
00:11:15,209 --> 00:11:20,414
<c.magenta>因此我们对一些功能进行改进</c>

188
00:11:21,215 --> 00:11:25,185
<c.magenta>由于其速度大幅提升</c>

189
00:11:25,252 --> 00:11:30,524
<c.magenta>不同于编辑你的程序数据</c>

190
00:11:30,591 --> 00:11:33,927
<c.magenta>可以仅在软件更新时</c>

191
00:11:33,994 --> 00:11:37,097
<c.magenta>因此在软件安装过程中</c>

192
00:11:37,164 --> 00:11:41,735
<c.magenta>你可能会看到</c>

193
00:11:41,802 --> 00:11:46,473
<c.magenta>这时就是在更新预绑定</c>

194
00:11:46,540 --> 00:11:48,909
<c.magenta>现在dyld用于所有优化</c>

195
00:11:48,976 --> 00:11:50,477
<c.magenta>其用途就是优化</c>

196
00:11:51,745 --> 00:11:54,414
<c.magenta>因此后来我们发布了dyld 2</c>

197
00:11:55,215 --> 00:11:59,386
<c.magenta>在过去几年我们进行大量改进</c>

198
00:11:59,453 --> 00:12:04,258
<c.magenta>首先 我们增加了</c>

199
00:11:59,453 --> 00:12:04,258
<c.magenta>首先 我们增加了</c>

200
00:12:05,158 --> 00:12:07,961
<c.magenta>自从dyld 2</c>

201
00:12:08,028 --> 00:12:13,033
<c.magenta>我们增加了x86、 x86 64 arm</c>

202
00:12:13,667 --> 00:12:16,170
<c.magenta>我们还推出iOS、tvOS</c>

203
00:12:16,236 --> 00:12:18,939
<c.magenta>它们全部都需要新dyld功能</c>

204
00:12:20,040 --> 00:12:23,177
<c.magenta>我们通过多种方式增强安全性</c>

205
00:12:23,710 --> 00:12:26,980
<c.magenta>增加代码签名和ASLR</c>

206
00:12:27,047 --> 00:12:30,384
<c.magenta>也就是地址空间配置随机加载</c>

207
00:12:31,185 --> 00:12:33,253
<c.magenta>这意味着每次你加载库</c>

208
00:12:33,320 --> 00:12:34,788
<c.magenta>它可能位于不同的地址</c>

209
00:12:35,455 --> 00:12:38,759
<c.magenta>如果想要了解更多详细信息</c>

210
00:12:38,825 --> 00:12:43,897
<c.magenta>在此演讲中Nick详细介绍了</c>

211
00:12:43,964 --> 00:12:46,066
<c.magenta>最后 我们增加了</c>

212
00:12:46,133 --> 00:12:48,001
<c.magenta>这是重要的边界检查功能</c>

213
00:12:48,068 --> 00:12:51,772
<c.magenta>从而可以避免恶意二进制数据的加入</c>

214
00:12:52,906 --> 00:12:55,776
<c.magenta>最后 我们增强了性能</c>

215
00:12:55,843 --> 00:12:59,580
<c.magenta>因此我们可以消除预绑定</c>

216
00:12:59,646 --> 00:13:02,616
<c.magenta>转而使用共享代码</c>

217
00:12:59,646 --> 00:13:02,616
<c.magenta>转而使用共享代码</c>

218
00:13:03,150 --> 00:13:05,085
<c.magenta>那么什么是共享代码？</c>

219
00:13:06,286 --> 00:13:10,958
<c.magenta>共享代码最早被引入和iOS 3.1</c>

220
00:13:11,825 --> 00:13:14,161
<c.magenta>并且完全取代预绑定</c>

221
00:13:14,895 --> 00:13:18,565
<c.magenta>它是一个单文件</c>

222
00:13:18,999 --> 00:13:20,734
<c.magenta>由于合并成一个文件</c>

223
00:13:20,801 --> 00:13:22,736
<c.magenta>因此可以进行优化</c>

224
00:13:22,970 --> 00:13:25,272
<c.magenta>我们重新调整所有文本段</c>

225
00:13:25,339 --> 00:13:28,675
<c.magenta>和所有数据段重写整个符号表</c>

226
00:13:28,742 --> 00:13:33,180
<c.magenta>以减小大小</c>

227
00:13:33,247 --> 00:13:34,781
<c.magenta>仅挂载少量的区域</c>

228
00:13:35,315 --> 00:13:38,852
<c.magenta>它允许我们打包二进制数据段</c>

229
00:13:39,720 --> 00:13:42,823
<c.magenta>它实际上是dylib预链接器</c>

230
00:13:43,423 --> 00:13:47,327
<c.magenta>我并不会讨论特定的优化结果</c>

231
00:13:47,728 --> 00:13:50,898
<c.magenta>但是它的RAM节约是显著的</c>

232
00:13:50,964 --> 00:13:55,836
<c.magenta>运行时可以节约500M-1GB内存</c>

233
00:13:57,571 --> 00:14:01,208
<c.magenta>它还预生成数据结构</c>

234
00:13:57,571 --> 00:14:01,208
<c.magenta>它还预生成数据结构</c>

235
00:14:01,275 --> 00:14:03,911
<c.magenta>在运行时使用</c>

236
00:14:03,977 --> 00:14:06,513
<c.magenta>这也会节约更多RAM和时间</c>

237
00:14:07,748 --> 00:14:12,186
<c.magenta>共享代码在macOS上本地生成</c>

238
00:14:12,252 --> 00:14:14,688
<c.magenta>将会大幅优化系统性能</c>

239
00:14:14,755 --> 00:14:16,623
<c.magenta>并且带来其它好处</c>

240
00:14:16,890 --> 00:14:19,860
<c.magenta>在我们的其它平台上</c>

241
00:14:19,927 --> 00:14:21,061
<c.magenta>然后提供给你</c>

242
00:14:22,629 --> 00:14:24,865
<c.magenta>刚才我讨论了共享代码</c>

243
00:14:24,932 --> 00:14:27,768
<c.magenta>接下来我介绍dyld 3</c>

244
00:14:28,735 --> 00:14:33,473
<c.magenta>dyld 3是全新的动态链接器</c>

245
00:14:34,641 --> 00:14:37,411
<c.magenta>它完全改变动态链接概念</c>

246
00:14:38,445 --> 00:14:42,816
<c.magenta>将成为大多数</c>

247
00:14:42,883 --> 00:14:44,484
<c.magenta>macOS系统程序的默认设置</c>

248
00:14:45,719 --> 00:14:48,355
<c.magenta>2017 Apple OS平台上的</c>

249
00:14:48,422 --> 00:14:52,025
<c.magenta>都会默认使用它</c>

250
00:14:53,660 --> 00:14:57,297
<c.magenta>在未来的Apple OS平台</c>

251
00:14:57,364 --> 00:14:59,333
<c.magenta>它将会全面取代dyld2</c>

252
00:15:00,300 --> 00:15:04,271
<c.magenta>那么 我们为什么要再次使用</c>

253
00:15:06,373 --> 00:15:08,675
<c.magenta>首先是为了性能</c>

254
00:15:08,742 --> 00:15:10,511
<c.magenta>性能是一个永恒的主题</c>

255
00:15:10,577 --> 00:15:13,647
<c.magenta>我们想要尽量提高启动速度</c>

256
00:15:14,381 --> 00:15:17,184
<c.magenta>我们认为 它可以帮助</c>

257
00:15:17,251 --> 00:15:19,219
<c.magenta>我们获得最快的</c>

258
00:15:19,286 --> 00:15:22,723
<c.magenta>程序启动和运行速度</c>

259
00:15:23,423 --> 00:15:29,329
<c.magenta>其次是安全性 前面我说过</c>

260
00:15:29,396 --> 00:15:32,366
<c.magenta>但是很难跟随现实情形</c>

261
00:15:32,533 --> 00:15:35,335
<c.magenta>过去几年我们做了很多的工作</c>

262
00:15:35,402 --> 00:15:38,839
<c.magenta>但是难以实现这个目标</c>

263
00:15:39,740 --> 00:15:42,109
<c.magenta>那么我们是否能够</c>

264
00:15:42,176 --> 00:15:44,178
<c.magenta>并且从设计上提高安全性？</c>

265
00:15:45,112 --> 00:15:48,148
<c.magenta>最后是可测试性和可靠性</c>

266
00:15:48,482 --> 00:15:50,317
<c.magenta>我们能否让dyld变得更容易测试？</c>

267
00:15:50,384 --> 00:15:53,921
<c.magenta>为此Apple发布了很多不错的</c>

268
00:15:53,987 --> 00:15:56,690
<c.magenta>我们应该使用它们</c>

269
00:15:56,757 --> 00:15:59,459
<c.magenta>但是它们依赖于</c>

270
00:15:59,526 --> 00:16:03,897
<c.magenta>将它们的库插入进程</c>

271
00:15:59,526 --> 00:16:03,897
<c.magenta>将它们的库插入进程</c>

272
00:16:03,964 --> 00:16:05,933
<c.magenta>测试现有的dyld代码</c>

273
00:16:05,999 --> 00:16:09,703
<c.magenta>这让我们难以测试安全性和性能水平</c>

274
00:16:10,938 --> 00:16:13,440
<c.magenta>我们应该如何做呢？</c>

275
00:16:13,507 --> 00:16:17,177
<c.magenta>我们将大多数dyld移出进程</c>

276
00:16:19,079 --> 00:16:21,882
<c.magenta>现在它只是普通的后台程序</c>

277
00:16:21,949 --> 00:16:25,285
<c.magenta>可以使用标准测试工具进行测试</c>

278
00:16:25,352 --> 00:16:26,186
<c.magenta>这让我们以后</c>

279
00:16:26,253 --> 00:16:28,956
<c.magenta>进一步提高速度和性能</c>

280
00:16:30,157 --> 00:16:35,095
<c.magenta>另外也允许部分dyld</c>

281
00:16:35,162 --> 00:16:40,367
<c.magenta>但是驻留部分尽可小</c>

282
00:16:42,135 --> 00:16:45,772
<c.magenta>由于代码速度提升</c>

283
00:16:45,839 --> 00:16:47,708
<c.magenta>因此会提高启动速度</c>

284
00:16:48,542 --> 00:16:51,545
<c.magenta>代码运行速度是前所未有的</c>

285
00:16:52,379 --> 00:16:53,780
<c.magenta>为了让你知道我们是如何做到的</c>

286
00:16:53,847 --> 00:16:57,985
<c.magenta>我将简要演示</c>

287
00:16:58,051 --> 00:17:01,855
<c.magenta>在去年的“缩短程序启动时间”演讲中</c>

288
00:16:58,051 --> 00:17:01,855
<c.magenta>在去年的“缩短程序启动时间”演讲中</c>

289
00:17:01,922 --> 00:17:04,458
<c.magenta>我们更详细地讨论了这个主题</c>

290
00:17:04,525 --> 00:17:06,593
<c.magenta>你可以观看那个演讲视频</c>

291
00:17:06,660 --> 00:17:08,095
<c.magenta>这是一个不错的主意</c>

292
00:17:08,262 --> 00:17:11,865
<c.magenta>当然你也可以听我的演讲</c>

293
00:17:12,699 --> 00:17:16,637
<c.magenta>我们使用dyld 2</c>

294
00:17:16,703 --> 00:17:19,006
<c.magenta>我们需要分析你的mach-o文件</c>

295
00:17:19,306 --> 00:17:22,276
<c.magenta>弄清楚你需要哪些库</c>

296
00:17:22,776 --> 00:17:27,247
<c.magenta>它们可能需要其它库</c>

297
00:17:27,314 --> 00:17:29,483
<c.magenta>直到获得所有dylib的完整图</c>

298
00:17:29,550 --> 00:17:33,820
<c.magenta>普通iOS程序</c>

299
00:17:33,887 --> 00:17:35,622
<c.magenta>数据庞大 需要进行大量的处理</c>

300
00:17:36,924 --> 00:17:41,328
<c.magenta>然后我们映射到所有mach-o文件</c>

301
00:17:42,462 --> 00:17:45,499
<c.magenta>然后执行符号查找</c>

302
00:17:45,566 --> 00:17:47,167
<c.magenta>若你的程序使用printf函数</c>

303
00:17:47,234 --> 00:17:50,003
<c.magenta>将会查找printf是否在库系统中</c>

304
00:17:50,504 --> 00:17:51,872
<c.magenta>然后我们找到它的地址</c>

305
00:17:51,939 --> 00:17:55,275
<c.magenta>将它复制到你的程序中的函数指针</c>

306
00:17:56,577 --> 00:17:59,112
<c.magenta>我们进行绑定和基址重置</c>

307
00:17:59,179 --> 00:18:03,283
<c.magenta>复制这些指针</c>

308
00:17:59,179 --> 00:18:03,283
<c.magenta>复制这些指针</c>

309
00:18:03,350 --> 00:18:06,486
<c.magenta>所有指针必须使用基址</c>

310
00:18:07,454 --> 00:18:09,489
<c.magenta>最后 我们可以运行</c>

311
00:18:09,556 --> 00:18:11,558
<c.magenta>因此前面我展示这个工具</c>

312
00:18:11,625 --> 00:18:13,827
<c.magenta>这时 我们准备执行main函数</c>

313
00:18:13,894 --> 00:18:15,395
<c.magenta>这里进行了大量的工作</c>

314
00:18:15,929 --> 00:18:19,266
<c.magenta>我们如何加快其速度</c>

315
00:18:19,333 --> 00:18:23,837
<c.magenta>首先我确定安全敏感性组件</c>

316
00:18:24,104 --> 00:18:26,773
<c.magenta>从我们的角度来看</c>

317
00:18:26,840 --> 00:18:29,943
<c.magenta>分析mach-o文件头</c>

318
00:18:30,010 --> 00:18:34,014
<c.magenta>因此人们可以使用</c>

319
00:18:34,081 --> 00:18:39,152
<c.magenta>而且你 的程序可能使用</c>

320
00:18:39,219 --> 00:18:43,190
<c.magenta>通过撰改这些路径</c>

321
00:18:43,257 --> 00:18:45,292
<c.magenta>可以破坏程序</c>

322
00:18:45,459 --> 00:18:49,062
<c.magenta>因此我们在后台程序的进程之外</c>

323
00:18:49,630 --> 00:18:53,734
<c.magenta>然后我们确定大量占用资源的部分</c>

324
00:18:53,800 --> 00:18:56,937
<c.magenta>它们是符号查找</c>

325
00:18:57,004 --> 00:19:00,774
<c.magenta>除非进行软件更新</c>

326
00:18:57,004 --> 00:19:00,774
<c.magenta>除非进行软件更新</c>

327
00:19:00,841 --> 00:19:03,810
<c.magenta>符号将始终位于库中的相同偏移位置</c>

328
00:19:04,311 --> 00:19:08,015
<c.magenta>我们已经确定这些内容</c>

329
00:19:11,552 --> 00:19:15,923
<c.magenta>我们将这些部分移到上层</c>

330
00:19:15,989 --> 00:19:20,861
<c.magenta>前面我说过 启动收尾处理</c>

331
00:19:22,429 --> 00:19:29,303
<c.magenta>稍后可以在进程中使用它</c>

332
00:19:30,170 --> 00:19:33,407
<c.magenta>它是一个进程外</c>

333
00:19:34,141 --> 00:19:37,678
<c.magenta>也是一个进程内引擎</c>

334
00:19:38,779 --> 00:19:41,381
<c.magenta>也是一个启动收尾缓存服务</c>

335
00:19:43,150 --> 00:19:45,786
<c.magenta>大多数程序启动会使用缓存</c>

336
00:19:45,853 --> 00:19:48,555
<c.magenta>但始终不需要调用进程外</c>

337
00:19:50,524 --> 00:19:53,760
<c.magenta>启动收尾比mach-o更简单</c>

338
00:19:54,261 --> 00:19:57,731
<c.magenta>它们是内存映射文件</c>

339
00:19:57,798 --> 00:20:00,801
<c.magenta>我们可以简单地验证它们</c>

340
00:19:57,798 --> 00:20:00,801
<c.magenta>我们可以简单地验证它们</c>

341
00:20:03,470 --> 00:20:06,340
<c.magenta>让我们来详细看每个部分</c>

342
00:20:06,406 --> 00:20:10,077
<c.magenta>因此 dyld 3</c>

343
00:20:10,844 --> 00:20:14,014
<c.magenta>它解析所有搜索路径</c>

344
00:20:14,248 --> 00:20:16,316
<c.magenta>所有rpaths</c>

345
00:20:16,383 --> 00:20:17,851
<c.magenta>它们会影响你的启动</c>

346
00:20:18,352 --> 00:20:20,687
<c.magenta>然后分析mach-o二进制数据</c>

347
00:20:21,188 --> 00:20:23,223
<c.magenta>执行所有符号查找</c>

348
00:20:25,192 --> 00:20:27,561
<c.magenta>利用这些结果创建收尾处理</c>

349
00:20:28,495 --> 00:20:29,796
<c.magenta>它是普通的后台程序</c>

350
00:20:29,863 --> 00:20:32,766
<c.magenta>让我们提高测试基础架构的性能</c>

351
00:20:34,801 --> 00:20:37,671
<c.magenta>dyld也是一个小型进程内引擎</c>

352
00:20:37,738 --> 00:20:40,007
<c.magenta>这部分驻留在进程中</c>

353
00:20:40,073 --> 00:20:41,909
<c.magenta>是你通常会看到的部分</c>

354
00:20:42,442 --> 00:20:46,213
<c.magenta>它所做的事情是</c>

355
00:20:47,114 --> 00:20:50,651
<c.magenta>然后映射到dylib之中</c>

356
00:20:50,717 --> 00:20:52,519
<c.magenta>你可能会注意到</c>

357
00:20:52,953 --> 00:20:56,590
<c.magenta>dyld3不需要分析mach-o</c>

358
00:20:56,657 --> 00:20:59,326
<c.magenta>不需要做这些事情</c>

359
00:20:59,393 --> 00:21:01,895
<c.magenta>由于这些是花费时间的部分</c>

360
00:20:59,393 --> 00:21:01,895
<c.magenta>由于这些是花费时间的部分</c>

361
00:21:02,296 --> 00:21:05,132
<c.magenta>因此可以极大提高程序启动速度</c>

362
00:21:06,600 --> 00:21:11,371
<c.magenta>最后 dyld 3</c>

363
00:21:11,438 --> 00:21:14,241
<c.magenta>这是什么意思呢？</c>

364
00:21:14,308 --> 00:21:18,946
<c.magenta>我们将系统程序收尾</c>

365
00:21:19,012 --> 00:21:22,449
<c.magenta>我们已使用这个工具在系统中</c>

366
00:21:23,083 --> 00:21:26,320
<c.magenta>我们可以直接将它们</c>

367
00:21:26,386 --> 00:21:30,357
<c.magenta>所有dylib都使用它来启动</c>

368
00:21:31,825 --> 00:21:37,397
<c.magenta>对于第三方程序</c>

369
00:21:37,464 --> 00:21:41,668
<c.magenta>生成你的收尾处理</c>

370
00:21:41,768 --> 00:21:47,407
<c.magenta>默认情况下 将在iOS、tvOS</c>

371
00:21:47,474 --> 00:21:48,909
<c.magenta>甚至在程序运行之前</c>

372
00:21:49,843 --> 00:21:54,248
<c.magenta>在macOS上 由于可以</c>

373
00:21:54,314 --> 00:21:59,486
<c.magenta>进程内引擎可以在首次启动时</c>

374
00:22:00,521 --> 00:22:03,991
<c.magenta>在此之后 能够使用缓存的收尾处理</c>

375
00:22:05,459 --> 00:22:09,696
<c.magenta>正如前面我说的那样</c>

376
00:22:10,664 --> 00:22:13,467
<c.magenta>我介绍了今年我们将会用于系统程序的</c>

377
00:22:13,534 --> 00:22:16,303
<c.magenta>这个新动态链接器</c>

378
00:22:16,436 --> 00:22:19,439
<c.magenta>我想谈一谈可能会存在的问题</c>

379
00:22:19,506 --> 00:22:21,975
<c.magenta>让你现在就可以开始更新你的程序</c>

380
00:22:22,709 --> 00:22:23,877
<c.magenta>为DYLD 3而准备</c>

381
00:22:23,944 --> 00:22:27,881
<c.magenta>首先它完全兼容dyld 2.x</c>

382
00:22:27,948 --> 00:22:31,518
<c.magenta>因此一些现有API</c>

383
00:22:31,585 --> 00:22:35,989
<c.magenta>会导致你的程序运行变慢</c>

384
00:22:36,056 --> 00:22:39,226
<c.magenta>我们希望你们避免这个问题</c>

385
00:22:39,293 --> 00:22:41,962
<c.magenta>另外 你所做的一些优化</c>

386
00:22:42,029 --> 00:22:46,099
<c.magenta>现在可能已经不再需要</c>

387
00:22:46,166 --> 00:22:49,403
<c.magenta>因此不需要在这方面</c>

388
00:22:49,603 --> 00:22:50,704
<c.magenta>我想要说的另一件事情是</c>

389
00:22:50,771 --> 00:22:52,940
<c.magenta>我们将会使用更严格的链接语义</c>

390
00:22:53,006 --> 00:22:53,907
<c.magenta>这是什么意思？</c>

391
00:22:53,974 --> 00:22:59,780
<c.magenta>很多的语义现在还无法使用</c>

392
00:22:59,847 --> 00:23:04,518
<c.magenta>现在甚至是错误的</c>

393
00:22:59,847 --> 00:23:04,518
<c.magenta>现在甚至是错误的</c>

394
00:23:04,585 --> 00:23:06,920
<c.magenta>我们发现很多这样的情况</c>

395
00:23:06,987 --> 00:23:09,256
<c.magenta>目的是为了发现所有的边界例子</c>

396
00:23:09,590 --> 00:23:13,427
<c.magenta>我们所做的事情</c>

397
00:23:14,127 --> 00:23:16,363
<c.magenta>但是我们并不想更进一步</c>

398
00:23:16,430 --> 00:23:19,466
<c.magenta>我们将会进行链接或后续检查</c>

399
00:23:19,533 --> 00:23:23,203
<c.magenta>然后我们将禁用新二进制数据的工作区</c>

400
00:23:23,270 --> 00:23:27,341
<c.magenta>让你能够解决这些问题</c>

401
00:23:28,408 --> 00:23:30,611
<c.magenta>新二进制数据将会造成链接器问题</c>

402
00:23:31,945 --> 00:23:36,149
<c.magenta>接下来我想讨论</c>

403
00:23:36,216 --> 00:23:37,384
<c.magenta>我说的是什么意思呢？</c>

404
00:23:37,451 --> 00:23:40,187
<c.magenta>假设你有一个全局性结构</c>

405
00:23:40,254 --> 00:23:43,824
<c.magenta>指向一个函数</c>

406
00:23:43,891 --> 00:23:46,927
<c.magenta>在你的程序启动之前</c>

407
00:23:46,994 --> 00:23:51,899
<c.magenta>在我们的系统上</c>

408
00:23:53,166 --> 00:23:57,337
<c.magenta>修复未对齐指针非常复杂</c>

409
00:23:57,571 --> 00:24:01,041
<c.magenta>它们可能覆盖多个内存页</c>

410
00:23:57,571 --> 00:24:01,041
<c.magenta>它们可能覆盖多个内存页</c>

411
00:24:01,108 --> 00:24:03,744
<c.magenta>和其它问题</c>

412
00:24:04,378 --> 00:24:06,847
<c.magenta>细微问题</c>

413
00:24:07,915 --> 00:24:10,851
<c.magenta>静态链接器已经忽略这个警告</c>

414
00:24:12,252 --> 00:24:14,588
<c.magenta>ld警告 指针地址未对齐</c>

415
00:24:14,655 --> 00:24:17,157
<c.magenta>这是你的数据段所在的位置</c>

416
00:24:18,325 --> 00:24:19,860
<c.magenta>如果你消除所有警告</c>

417
00:24:19,927 --> 00:24:22,596
<c.magenta>那么问题已经得到解决</c>

418
00:24:23,030 --> 00:24:26,266
<c.magenta>本周我们提供的源代码</c>

419
00:24:26,333 --> 00:24:28,669
<c.magenta>但是它们将会被修复</c>

420
00:24:28,735 --> 00:24:31,138
<c.magenta>但是你们可以修复这些问题</c>

421
00:24:31,905 --> 00:24:34,374
<c.magenta>如果你们想知道如何做</c>

422
00:24:34,441 --> 00:24:36,276
<c.magenta>我将会展示给你们看</c>

423
00:24:36,343 --> 00:24:38,812
<c.magenta>这需要大量的工作</c>

424
00:24:38,879 --> 00:24:41,782
<c.magenta>但是你不能在Swift中做这些事情</c>

425
00:24:42,316 --> 00:24:45,519
<c.magenta>请看这里的代码</c>

426
00:24:46,553 --> 00:24:51,058
<c.magenta>这里有一些强制进行对齐的属性</c>

427
00:24:51,124 --> 00:24:54,127
<c.magenta>默认情况下</c>

428
00:24:54,194 --> 00:24:56,263
<c.magenta>但是有些时候</c>

429
00:24:56,330 --> 00:24:57,564
<c.magenta>在本例中</c>

430
00:24:57,631 --> 00:25:00,133
<c.magenta>默认对齐规则要求进行对齐</c>

431
00:24:57,631 --> 00:25:00,133
<c.magenta>默认对齐规则要求进行对齐</c>

432
00:25:00,200 --> 00:25:03,270
<c.magenta>我使用了两种方法</c>

433
00:25:03,337 --> 00:25:04,872
<c.magenta>你必须进行修复</c>

434
00:25:05,772 --> 00:25:09,576
<c.magenta>然后我构建一个全局变量</c>

435
00:25:09,643 --> 00:25:12,246
<c.magenta>这个变量在结构中设置指针</c>

436
00:25:12,312 --> 00:25:13,747
<c.magenta>这将会强制动态链接器</c>

437
00:25:13,814 --> 00:25:16,650
<c.magenta>在程序启动时修复指针</c>

438
00:25:17,217 --> 00:25:21,421
<c.magenta>如果你看到这样的代码</c>

439
00:25:21,788 --> 00:25:24,892
<c.magenta>重新调整结构</c>

440
00:25:24,958 --> 00:25:26,894
<c.magenta>由于这更有利于对齐</c>

441
00:25:27,094 --> 00:25:29,396
<c.magenta>关于C结构对齐</c>

442
00:25:29,463 --> 00:25:31,265
<c.magenta>你可以查看</c>

443
00:25:31,331 --> 00:25:34,368
<c.magenta>但是希望你不必进行这样的处理</c>

444
00:25:34,434 --> 00:25:37,037
<c.magenta>如果你编写Swift代码</c>

445
00:25:38,772 --> 00:25:42,342
<c.magenta>接下来 我们讨论符号解析</c>

446
00:25:42,576 --> 00:25:43,844
<c.magenta>这里的含义是什么？</c>

447
00:25:44,211 --> 00:25:47,481
<c.magenta>dyld 2执行懒符号解析</c>

448
00:25:48,015 --> 00:25:51,218
<c.magenta>dyld必须加载所有符号</c>

449
00:25:51,285 --> 00:25:53,687
<c.magenta>这需要占用大量资源</c>

450
00:25:53,754 --> 00:26:00,294
<c.magenta>直接运行现有程序</c>

451
00:25:53,754 --> 00:26:00,294
<c.magenta>直接运行现有程序</c>

452
00:26:00,360 --> 00:26:01,562
<c.magenta>将会花费很长时间</c>

453
00:26:01,762 --> 00:26:05,866
<c.magenta>为此我们使用一种机制</c>

454
00:26:05,933 --> 00:26:10,671
<c.magenta>默认情况下 库中的函数指针</c>

455
00:26:10,737 --> 00:26:12,105
<c.magenta>并不指向printf</c>

456
00:26:12,439 --> 00:26:17,044
<c.magenta>默认情况下</c>

457
00:26:17,110 --> 00:26:19,580
<c.magenta>此函数返回一个</c>

458
00:26:20,113 --> 00:26:24,651
<c.magenta>因此启动时</c>

459
00:26:24,718 --> 00:26:28,388
<c.magenta>返回printf进行首次调用</c>

460
00:26:28,455 --> 00:26:30,958
<c.magenta>然后第二次</c>

461
00:26:31,925 --> 00:26:35,495
<c.magenta>由于我们已经缓存并且计算所有符号</c>

462
00:26:35,562 --> 00:26:37,264
<c.magenta>因此在程序启动时不会产生额外开销</c>

463
00:26:37,331 --> 00:26:40,901
<c.magenta>来绑定它们 我们将会这样做</c>

464
00:26:42,035 --> 00:26:46,974
<c.magenta>当你这样做时</c>

465
00:26:47,307 --> 00:26:51,078
<c.magenta>在现有懒符号机制中</c>

466
00:26:51,144 --> 00:26:53,380
<c.magenta>首次调用 将会正确启动</c>

467
00:26:53,447 --> 00:26:55,983
<c.magenta>首次调用该符号</c>

468
00:26:56,350 --> 00:26:59,253
<c.magenta>如果使用勤符号 将会立即崩溃</c>

469
00:27:00,053 --> 00:27:00,988
<c.magenta>为此…</c>

470
00:27:03,657 --> 00:27:05,993
<c.magenta>我们提供一个兼容模式</c>

471
00:27:06,059 --> 00:27:07,828
<c.magenta>我们要做的是</c>

472
00:27:08,529 --> 00:27:14,835
<c.magenta>我们将导致自动崩溃的符号</c>

473
00:27:14,902 --> 00:27:17,971
<c.magenta>如果不能找到你的符号</c>

474
00:27:18,038 --> 00:27:19,673
<c.magenta>因此首次调用将会崩溃</c>

475
00:27:20,207 --> 00:27:22,809
<c.magenta>这是现在的SDK的工作模式</c>

476
00:27:22,876 --> 00:27:27,014
<c.magenta>在未来的SDK中 我们将强制</c>

477
00:27:27,080 --> 00:27:29,149
<c.magenta>如果你缺失一个符号</c>

478
00:27:29,216 --> 00:27:32,819
<c.magenta>在开发过程中</c>

479
00:27:32,886 --> 00:27:35,355
<c.magenta>而不是用户在程序运行时发现它们</c>

480
00:27:36,557 --> 00:27:38,325
<c.magenta>现在你可以模拟这些行为</c>

481
00:27:38,392 --> 00:27:43,497
<c.magenta>有一个特殊的链接器标记</c>

482
00:27:43,564 --> 00:27:47,401
<c.magenta>如果你将它添加到你的调试程序</c>

483
00:27:47,467 --> 00:27:49,169
<c.magenta>因此只应该放入调试版本</c>

484
00:27:49,236 --> 00:27:50,337
<c.magenta>但将它添加到调试版本</c>

485
00:27:50,404 --> 00:27:53,373
<c.magenta>你将会获得更可靠的行为</c>

486
00:27:53,440 --> 00:27:56,476
<c.magenta>这让你能够好使用dyld 3</c>

487
00:27:57,845 --> 00:27:59,580
<c.magenta>另外只应该在测试版本中使用</c>

488
00:28:00,647 --> 00:28:03,917
<c.magenta>Dlopen、dlsym</c>

489
00:28:03,984 --> 00:28:07,454
<c.magenta>去年我讲过</c>

490
00:28:07,521 --> 00:28:08,856
<c.magenta>但我们理解你可能要使用它们</c>

491
00:28:08,922 --> 00:28:11,525
<c.magenta>今年我也会讲这个问题</c>

492
00:28:11,892 --> 00:28:13,961
<c.magenta>它们具有一些容易出错的语义</c>

493
00:28:14,728 --> 00:28:16,930
<c.magenta>但是在一些情况下</c>

494
00:28:16,997 --> 00:28:19,867
<c.magenta>特别是使用dlsym找到的符号</c>

495
00:28:19,933 --> 00:28:21,235
<c.magenta>我们不会提前知道这些符号</c>

496
00:28:21,301 --> 00:28:24,171
<c.magenta>不能使用prefetching</c>

497
00:28:24,571 --> 00:28:27,774
<c.magenta>当你使用dlopen或dlsym</c>

498
00:28:27,841 --> 00:28:31,078
<c.magenta>所有符号表页</c>

499
00:28:31,411 --> 00:28:33,380
<c.magenta>这会占用大量资源</c>

500
00:28:33,447 --> 00:28:38,785
<c.magenta>此外 我们可能必须RPC到后台程序</c>

501
00:28:38,852 --> 00:28:41,021
<c.magenta>这取决于其复杂程度</c>

502
00:28:41,088 --> 00:28:43,390
<c.magenta>我们正在开发一些更好的替代方法</c>

503
00:28:43,857 --> 00:28:45,425
<c.magenta>目前还没有完成</c>

504
00:28:45,492 --> 00:28:47,995
<c.magenta>我们还需了解你们的用例</c>

505
00:28:48,061 --> 00:28:50,464
<c.magenta>适合你们的需求</c>

506
00:28:50,531 --> 00:28:53,267
<c.magenta>这些方案即将会发布</c>

507
00:28:53,333 --> 00:28:55,936
<c.magenta>我们希望获得你们的反馈意见</c>

508
00:28:57,571 --> 00:28:59,873
<c.magenta>接下来我想特别谈谈dlclose</c>

509
00:28:59,940 --> 00:29:02,509
<c.magenta>dlclose是一个误用词</c>

510
00:28:59,940 --> 00:29:02,509
<c.magenta>dlclose是一个误用词</c>

511
00:29:02,576 --> 00:29:04,111
<c.magenta>它是一个Unix API</c>

512
00:29:04,178 --> 00:29:05,646
<c.magenta>如果在我们的系统上编写它</c>

513
00:29:05,712 --> 00:29:08,615
<c.magenta>我们会将它命名为dlrelease</c>

514
00:29:08,682 --> 00:29:11,251
<c.magenta>因为它实际上并不关闭dylib</c>

515
00:29:11,318 --> 00:29:14,855
<c.magenta>它减少refcount计数</c>

516
00:29:14,922 --> 00:29:16,123
<c.magenta>将会关闭它</c>

517
00:29:16,190 --> 00:29:17,658
<c.magenta>它的重要性是什么？</c>

518
00:29:18,091 --> 00:29:20,460
<c.magenta>它并不利于资源管理</c>

519
00:29:20,527 --> 00:29:24,398
<c.magenta>如果你有一个库用于特定硬件</c>

520
00:29:24,464 --> 00:29:27,968
<c.magenta>你不应该关闭硬件</c>

521
00:29:28,035 --> 00:29:31,805
<c.magenta>因为程序中的其它代码</c>

522
00:29:31,872 --> 00:29:33,407
<c.magenta>因此你的硬件不会关闭</c>

523
00:29:33,473 --> 00:29:35,943
<c.magenta>应该使用显式资源管理</c>

524
00:29:36,944 --> 00:29:39,213
<c.magenta>我们的平台上还有很多特性</c>

525
00:29:39,279 --> 00:29:41,648
<c.magenta>访止dylib被卸载</c>

526
00:29:41,715 --> 00:29:45,118
<c.magenta>我想介绍几个例子</c>

527
00:29:45,853 --> 00:29:47,754
<c.magenta>你的dylib中可以</c>

528
00:29:47,821 --> 00:29:50,257
<c.magenta>这将导致dylib不可卸载</c>

529
00:29:50,991 --> 00:29:54,228
<c.magenta>你可以具有Swift类</c>

530
00:29:54,828 --> 00:29:58,232
<c.magenta>你可以具有C底层线程</c>

531
00:29:58,298 --> 00:30:00,868
<c.magenta>这些都会导致dylib不可卸载</c>

532
00:29:58,298 --> 00:30:00,868
<c.magenta>这些都会导致dylib不可卸载</c>

533
00:30:01,535 --> 00:30:06,573
<c.magenta>因此在具有一些</c>

534
00:30:06,640 --> 00:30:10,644
<c.magenta>我们会保持这个特性</c>

535
00:30:10,711 --> 00:30:12,946
<c.magenta>几乎每个dylib都会这样做</c>

536
00:30:13,013 --> 00:30:17,084
<c.magenta>因此并不能在这些平台上</c>

537
00:30:17,384 --> 00:30:20,988
<c.magenta>因此我们可以将它视为</c>

538
00:30:21,054 --> 00:30:23,290
<c.magenta>不会在任何平台上进行操作</c>

539
00:30:23,857 --> 00:30:28,695
<c.magenta>如果这会导致问题</c>

540
00:30:30,097 --> 00:30:33,600
<c.magenta>最后我想讨论</c>

541
00:30:34,134 --> 00:30:37,337
<c.magenta>这是进程中的</c>

542
00:30:37,404 --> 00:30:39,306
<c.magenta>它来自于最初的dyld 1</c>

543
00:30:40,641 --> 00:30:45,779
<c.magenta>但是它只是内存中的一个结构</c>

544
00:30:45,846 --> 00:30:48,148
<c.magenta>当我们有5或10个dylib时</c>

545
00:30:48,415 --> 00:30:52,252
<c.magenta>但是如果有300、400</c>

546
00:30:52,319 --> 00:30:54,821
<c.magenta>将导致浪费大量内存</c>

547
00:30:54,922 --> 00:30:57,624
<c.magenta>我们需要高性能</c>

548
00:30:58,192 --> 00:31:00,861
<c.magenta>在未来的版本中</c>

549
00:30:58,192 --> 00:31:00,861
<c.magenta>在未来的版本中</c>

550
00:31:01,161 --> 00:31:04,598
<c.magenta>但 是会提供一个替代性API</c>

551
00:31:04,898 --> 00:31:08,502
<c.magenta>因此 它很少被用到</c>

552
00:31:08,569 --> 00:31:10,370
<c.magenta>我希望你知道为什么要使用它</c>

553
00:31:10,437 --> 00:31:13,941
<c.magenta>如何使用它</c>

554
00:31:14,208 --> 00:31:16,877
<c.magenta>有很多功能已经不再适用</c>

555
00:31:16,944 --> 00:31:20,480
<c.magenta>不符合你的预期</c>

556
00:31:20,547 --> 00:31:23,016
<c.magenta>可以忽略它们</c>

557
00:31:23,550 --> 00:31:25,385
<c.magenta>请让我们知道你将如何使用它</c>

558
00:31:25,853 --> 00:31:28,021
<c.magenta>最后我们讨论最佳实践</c>

559
00:31:28,455 --> 00:31:33,527
<c.magenta>首先应确保将bind at load</c>

560
00:31:33,594 --> 00:31:35,395
<c.magenta>应该仅在调试版本中这样做</c>

561
00:31:36,630 --> 00:31:40,033
<c.magenta>应修复数据段中的</c>

562
00:31:40,100 --> 00:31:42,836
<c.magenta>然后还有这个警告信息</c>

563
00:31:42,903 --> 00:31:45,038
<c.magenta>应该使用新Swift键径功能</c>

564
00:31:45,672 --> 00:31:47,975
<c.magenta>消除所有警告错误</c>

565
00:31:48,041 --> 00:31:50,077
<c.magenta>你也可以忽略</c>

566
00:31:51,311 --> 00:31:54,281
<c.magenta>当你调用dlclose时应该确保</c>

567
00:31:54,882 --> 00:31:56,283
<c.magenta>不依赖于任何正运行的终止函数</c>

568
00:31:58,085 --> 00:32:03,924
<c.magenta>我们想知道你们为何使用dlopen</c>

569
00:31:58,085 --> 00:32:03,924
<c.magenta>我们想知道你们为何使用dlopen</c>

570
00:32:03,991 --> 00:32:07,694
<c.magenta>和all image info结构</c>

571
00:32:07,761 --> 00:32:09,863
<c.magenta>能够满足你们的需求</c>

572
00:32:09,930 --> 00:32:12,499
<c.magenta>如果它们是POSIX的一部分</c>

573
00:32:12,566 --> 00:32:14,768
<c.magenta>这只会造成性能降低</c>

574
00:32:14,835 --> 00:32:17,404
<c.magenta>它将会被取消以节省内存</c>

575
00:32:18,572 --> 00:32:22,409
<c.magenta>请使用DYLD USAGE标题</c>

576
00:32:22,476 --> 00:32:24,444
<c.magenta>让我们能够</c>

577
00:32:24,511 --> 00:32:25,979
<c.magenta>支持你们的所有用例</c>

578
00:32:26,313 --> 00:32:29,283
<c.magenta>更多信息请访问此URL</c>

579
00:32:30,517 --> 00:32:34,488
<c.magenta>去年我们举行了一个相关的演讲</c>

580
00:32:34,555 --> 00:32:38,058
<c.magenta>你可以观看这个演讲</c>

581
00:32:38,125 --> 00:32:40,861
<c.magenta>复习传统动态链接的工作原理</c>

582
00:32:41,228 --> 00:32:43,997
<c.magenta>这个演讲更详细</c>

583
00:32:44,064 --> 00:32:45,999
<c.magenta>因为今天我们讲的都是新内容</c>

584
00:32:46,366 --> 00:32:50,037
<c.magenta>谢谢大家参加本演讲</c>
