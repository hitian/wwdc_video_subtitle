1
00:00:20,416 --> 00:00:20,906
&gt;&gt; 早上好

2
00:00:21,516 --> 00:00:24,636
[掌声]

3
00:00:25,136 --> 00:00:27,036
欢迎来到 tvOS 11 的

4
00:00:27,036 --> 00:00:27,876
焦点交互发布会

5
00:00:28,826 --> 00:00:30,086
我的名字是 Matt  我是负责

6
00:00:30,086 --> 00:00:31,736
UIKit 的软件工程师

7
00:00:31,736 --> 00:00:33,146
今天另一位将要上台讲话的是

8
00:00:33,146 --> 00:00:33,976
我的同事 Jon

9
00:00:33,976 --> 00:00:37,016
我们有很多东西想要讨论  那么

10
00:00:37,236 --> 00:00:37,916
我们赶快开始吧

11
00:00:38,936 --> 00:00:41,126
首先 我们将要向大家示范

12
00:00:41,126 --> 00:00:42,326
我们在 tvOS 11 里

13
00:00:42,326 --> 00:00:44,026
为焦点交互支持

14
00:00:44,026 --> 00:00:45,636
而设计的一些新功能

15
00:00:45,636 --> 00:00:46,386
和各项改进

16
00:00:47,666 --> 00:00:49,056
它们涵盖了过去一年

17
00:00:49,056 --> 00:00:50,156
我们从大家这里收集到的

18
00:00:50,156 --> 00:00:51,066
众多需求信息

19
00:00:52,886 --> 00:00:54,996
第二  焦点交互支持

20
00:00:55,496 --> 00:00:57,616
现在已经纳入 SceneKit

21
00:00:57,616 --> 00:00:58,666
所以我们准备讲一讲

22
00:00:58,666 --> 00:01:00,226
大家在上手前需要了解的

23
00:00:58,666 --> 00:01:00,226
大家在上手前需要了解的

24
00:01:00,226 --> 00:01:00,596
所有信息

25
00:01:02,056 --> 00:01:03,676
最后 我们在 tvOS 11 里开发了一些

26
00:01:03,676 --> 00:01:05,966
很棒的焦点调试新工具

27
00:01:05,966 --> 00:01:07,556
用来帮助大家

28
00:01:07,556 --> 00:01:09,966
在自己的 App 里诊断与焦点相关的

29
00:01:09,966 --> 00:01:10,866
问题

30
00:01:11,316 --> 00:01:12,266
我们认为这些新工具

31
00:01:12,266 --> 00:01:14,686
将会给你们节省大量时间

32
00:01:15,566 --> 00:01:16,976
不过在开始之前

33
00:01:16,976 --> 00:01:18,416
我们有必要回顾一些基础内容

34
00:01:18,416 --> 00:01:19,986
看看 Focus API 是如何

35
00:01:20,096 --> 00:01:21,716
在 tvOS 11 里运作的

36
00:01:22,156 --> 00:01:23,376
这个信息很重要

37
00:01:23,376 --> 00:01:24,786
它将贯穿于今天这个会议的

38
00:01:25,676 --> 00:01:25,906
全程

39
00:01:26,276 --> 00:01:27,356
从聚焦引擎的角度来看

40
00:01:27,356 --> 00:01:28,926
大家的 App 是由

41
00:01:28,926 --> 00:01:31,396
聚焦项和聚焦环境

42
00:01:31,536 --> 00:01:32,256
构成的

43
00:01:33,716 --> 00:01:35,646
聚焦项属于

44
00:01:35,646 --> 00:01:37,006
用户界面元素

45
00:01:37,096 --> 00:01:38,606
它可以形成聚焦

46
00:01:39,386 --> 00:01:41,186
它们遵循的是 UIFocusItem

47
00:01:41,186 --> 00:01:42,036
的项目协议

48
00:01:42,456 --> 00:01:45,496
聚焦项的例子包括

49
00:01:45,496 --> 00:01:48,976
UIKit 里的 UIView  还有 SpriteKit 里的

50
00:01:50,416 --> 00:01:50,856
节点

51
00:01:51,166 --> 00:01:53,106
聚焦环境遵循的是

52
00:01:53,106 --> 00:01:54,976
UIFocusEnvironment 协议

53
00:01:56,206 --> 00:01:57,426
聚焦环境可以用来影响

54
00:01:57,476 --> 00:01:59,196
你应用程序里的聚焦行为

55
00:01:59,196 --> 00:02:00,856
而且它们还会收到关于

56
00:01:59,196 --> 00:02:00,856
而且它们还会收到关于

57
00:02:00,856 --> 00:02:02,096
焦点更新的

58
00:02:02,096 --> 00:02:02,686
通知

59
00:02:03,496 --> 00:02:05,496
所有的聚焦项同时也是聚焦环境

60
00:02:05,496 --> 00:02:07,446
但聚焦环境还包括

61
00:02:07,446 --> 00:02:08,866
其他对象 例如视图

62
00:02:08,866 --> 00:02:09,446
控制器

63
00:02:11,096 --> 00:02:13,536
聚焦项和聚焦环境

64
00:02:13,536 --> 00:02:15,026
都按照等级次序进行

65
00:02:15,026 --> 00:02:15,566
排列

66
00:02:16,196 --> 00:02:17,836
在 UIKit 里面 这个等级次序

67
00:02:17,836 --> 00:02:19,276
只是大致对应视图与

68
00:02:19,276 --> 00:02:20,846
视图控制器的等级

69
00:02:20,846 --> 00:02:22,376
和在 SpriteKit 里面 它对应着节点的

70
00:02:22,376 --> 00:02:22,786
等级次序

71
00:02:23,596 --> 00:02:25,426
这个等级次序在涉及到

72
00:02:25,426 --> 00:02:26,516
接收焦点更新通知时

73
00:02:26,606 --> 00:02:27,656
就显得很重要

74
00:02:28,246 --> 00:02:31,206
焦点更新的形成方式可以是

75
00:02:31,206 --> 00:02:31,736
两种方法里的一种

76
00:02:32,596 --> 00:02:34,896
首先 用户能够以几何模式

77
00:02:34,896 --> 00:02:36,176
移动焦点

78
00:02:36,176 --> 00:02:38,466
例如在 Siri 遥控器

79
00:02:38,466 --> 00:02:39,566
或你的 App 上轻扫一下

80
00:02:39,566 --> 00:02:41,176
就会触发一个程序性焦点更新

81
00:02:41,176 --> 00:02:42,736
就像是调用某些 setNeedsFocusUpdate

82
00:02:42,786 --> 00:02:43,886
这样的 API

83
00:02:44,466 --> 00:02:48,376
焦点更新产生时

84
00:02:48,376 --> 00:02:50,336
我们会通知所有聚焦环境

85
00:02:50,336 --> 00:02:51,976
这些环境既包含

86
00:02:52,016 --> 00:02:54,016
先前的已聚焦项  以及

87
00:02:54,016 --> 00:02:54,936
即将聚焦的项

88
00:02:55,366 --> 00:02:56,816
这同样也包括所有的

89
00:02:56,816 --> 00:02:58,346
共同原始环境

90
00:03:00,856 --> 00:03:02,116
我们用升序方法

91
00:03:02,176 --> 00:03:04,516
来通知环境

92
00:03:04,516 --> 00:03:06,156
从直接参与更新的两个项

93
00:03:06,156 --> 00:03:07,066
开始

94
00:03:08,346 --> 00:03:09,566
通知传送的形式 

95
00:03:09,566 --> 00:03:11,166
是通过调用 didUpdateFocus 功能

96
00:03:11,166 --> 00:03:12,706
这个功能定义是在

97
00:03:12,706 --> 00:03:14,296
UIFocusEnvironment 协议之上的

98
00:03:14,856 --> 00:03:17,266
这就直接引出了

99
00:03:17,266 --> 00:03:19,106
我们今天的第一个话题

100
00:03:19,106 --> 00:03:20,156
就是 在 tvOS 11 里

101
00:03:20,156 --> 00:03:22,456
我们要提供一些很有帮助的新办法

102
00:03:22,456 --> 00:03:23,876
以便更好地接收

103
00:03:23,876 --> 00:03:24,306
焦点更新通知

104
00:03:24,886 --> 00:03:26,046
我们回到刚才的图表

105
00:03:27,066 --> 00:03:28,066
就像我刚才说的  我们

106
00:03:28,066 --> 00:03:29,736
通知你的 App 使用这个

107
00:03:29,736 --> 00:03:31,776
根据 UIFocusEnvironment 定义的

108
00:03:31,776 --> 00:03:32,996
didUpdateFocus 功能

109
00:03:34,386 --> 00:03:35,606
但有时你的 App 里可能会有

110
00:03:35,606 --> 00:03:38,416
另外的对象  它并不是

111
00:03:38,416 --> 00:03:40,016
聚焦环境  而你并不想

112
00:03:40,016 --> 00:03:41,236
让它和你其余的

113
00:03:41,236 --> 00:03:42,456
用户界面代码

114
00:03:42,456 --> 00:03:42,816
结合起来

115
00:03:43,556 --> 00:03:45,226
因此  针对这种情况

116
00:03:45,226 --> 00:03:46,846
我们要介绍一个新的基础

117
00:03:46,846 --> 00:03:48,306
通知类型 

118
00:03:48,306 --> 00:03:50,106
叫做 UIFocusDidUpdate

119
00:03:51,476 --> 00:03:52,646
你从 App 中的任何地方都可以

120
00:03:52,646 --> 00:03:53,886
看到它  每一次

121
00:03:53,886 --> 00:03:55,426
焦点更新都会发送这个

122
00:03:55,426 --> 00:03:55,926
通知

123
00:03:56,686 --> 00:03:58,166
这个通知里面的信息

124
00:03:58,166 --> 00:03:59,426
跟你习惯的通过

125
00:03:59,426 --> 00:04:00,456
常规焦点更新而接收的

126
00:03:59,426 --> 00:04:00,456
常规焦点更新而接收的

127
00:04:00,456 --> 00:04:02,236
信息相同

128
00:04:02,266 --> 00:04:04,036
包括一个更新的情况

129
00:04:04,036 --> 00:04:06,166
还有一个动画协调器

130
00:04:06,166 --> 00:04:07,496
以便用来控制

131
00:04:07,496 --> 00:04:08,266
视觉反馈

132
00:04:09,036 --> 00:04:11,596
这两个对象你都可以访问 

133
00:04:11,596 --> 00:04:13,906
只要你使用我们准备提供的

134
00:04:13,906 --> 00:04:15,076
两款新的用户信息密钥就可以

135
00:04:15,596 --> 00:04:17,526
UIFocusUpdateContext 密钥  还有

136
00:04:17,755 --> 00:04:19,146
UIFocusUpdate

137
00:04:19,146 --> 00:04:21,276
AnimiationCoordinator 密钥

138
00:04:23,156 --> 00:04:25,856
我们还要介绍另一个

139
00:04:25,856 --> 00:04:27,546
有关焦点更新的

140
00:04:27,546 --> 00:04:29,686
密钥通知类型

141
00:04:29,686 --> 00:04:32,686
叫做 UIFocusMovementDidFail

142
00:04:32,686 --> 00:04:34,086
只要用户尝试

143
00:04:34,086 --> 00:04:36,626
但却无法把焦点移到某个方向

144
00:04:36,626 --> 00:04:37,826
通知就会被

145
00:04:37,826 --> 00:04:38,276
发送出去

146
00:04:38,916 --> 00:04:40,676
而这个通知  只有在用户试图移动焦点

147
00:04:40,676 --> 00:04:42,786
而你的 App 却无法执行 

148
00:04:42,786 --> 00:04:44,806
某种程序性的焦点更新时

149
00:04:44,806 --> 00:04:46,036
通知才会被发送

150
00:04:46,036 --> 00:04:46,386
出去

151
00:04:46,886 --> 00:04:48,086
这个确实很有用

152
00:04:48,086 --> 00:04:49,336
当用户试图向某个方向

153
00:04:49,336 --> 00:04:50,706
移动焦距  但又不被允许这样做  

154
00:04:50,706 --> 00:04:53,306
而你想给用户提供某种反馈

155
00:04:53,306 --> 00:04:54,296
这个功能就可以

156
00:04:54,296 --> 00:04:55,076
派上用场

157
00:04:55,546 --> 00:04:57,086
有一个很好的例子

158
00:04:57,086 --> 00:04:59,076
就是在 Apple TV 上  当用户

159
00:04:59,076 --> 00:05:02,136
试图向未获许可的方向

160
00:04:59,076 --> 00:05:02,136
试图向未获许可的方向

161
00:05:02,136 --> 00:05:03,486
移动焦距时 

162
00:05:03,486 --> 00:05:04,176
VoiceOver 将会提供一个

163
00:05:04,176 --> 00:05:04,746
警示声音

164
00:05:04,846 --> 00:05:06,366
这确实是一种有效的方式

165
00:05:06,366 --> 00:05:08,136
它给视力受损的用户

166
00:05:08,136 --> 00:05:09,926
提供了某种额外的听觉反馈

167
00:05:09,926 --> 00:05:11,736
让他们能够知道

168
00:05:11,736 --> 00:05:13,066
自己的操作指令已被明确无误地

169
00:05:13,066 --> 00:05:14,646
接收到  但是却

170
00:05:14,646 --> 00:05:15,266
无法生效

171
00:05:15,886 --> 00:05:18,976
这就是我们关于焦点更新

172
00:05:18,976 --> 00:05:19,756
通知的内容

173
00:05:20,686 --> 00:05:22,826
我们还在

174
00:05:22,826 --> 00:05:24,496
UIFocusEnvironment 和

175
00:05:24,496 --> 00:05:26,086
UIFocusItem 协议基础上

176
00:05:26,086 --> 00:05:28,346
提供了一些有用的协议扩展

177
00:05:28,346 --> 00:05:29,696
是用来帮你编写更加简洁

178
00:05:29,696 --> 00:05:30,286
更安全的代码

179
00:05:32,826 --> 00:05:33,986
首先要介绍的这个

180
00:05:33,986 --> 00:05:35,206
协议扩展很简单

181
00:05:35,256 --> 00:05:37,426
我们把 isFoucused 属性

182
00:05:37,426 --> 00:05:39,376
添加到 UIFocusItem 协议

183
00:05:39,376 --> 00:05:41,226
这是一种很简便的方式 可以查看

184
00:05:41,276 --> 00:05:42,666
当前有没有项目处在聚焦状态

185
00:05:44,506 --> 00:05:45,866
自从 tvOS 9 以来 我们就把

186
00:05:45,866 --> 00:05:48,366
这个属性展示在 UIView 上

187
00:05:48,366 --> 00:05:49,826
现在我们要将它直接展示在

188
00:05:49,826 --> 00:05:51,376
协议 UIFocusItem 项目上

189
00:05:51,376 --> 00:05:53,126
你可以把它和任何类型的

190
00:05:53,126 --> 00:05:54,416
聚焦项在一起使用

191
00:05:54,416 --> 00:05:56,316
包括 SpriteKit 节点

192
00:05:57,316 --> 00:06:00,576
我们还把一种新的 contains 功能添加到了

193
00:05:57,316 --> 00:06:00,576
我们还把一种新的 contains 功能添加到了

194
00:06:00,576 --> 00:06:02,506
UIFocusEnvironment

195
00:06:02,506 --> 00:06:02,946
协议里

196
00:06:03,846 --> 00:06:05,146
你可以使用这个方法

197
00:06:05,146 --> 00:06:07,156
轻松查看有没有哪个聚焦环境里

198
00:06:07,246 --> 00:06:08,516
包含了另一个聚焦环境  

199
00:06:08,516 --> 00:06:10,356
而无需了解那些

200
00:06:10,356 --> 00:06:12,456
在查看过程中涉及的

201
00:06:12,526 --> 00:06:14,896
隐含类型

202
00:06:16,146 --> 00:06:17,026
我们来看看下面这个

203
00:06:17,026 --> 00:06:17,256
例子

204
00:06:18,326 --> 00:06:19,996
假设我们想要查看一下

205
00:06:19,996 --> 00:06:21,326
有没有哪个刚完成的聚焦项

206
00:06:21,326 --> 00:06:22,906
包含在当前的视图

207
00:06:22,906 --> 00:06:23,366
控制器里

208
00:06:24,426 --> 00:06:26,376
要完成这项操作

209
00:06:26,376 --> 00:06:27,776
我们只需要调用视图控制器上的

210
00:06:27,776 --> 00:06:29,556
contains 功能  然后再

211
00:06:29,556 --> 00:06:30,906
直接转入下一个

212
00:06:30,906 --> 00:06:31,376
聚焦项

213
00:06:32,306 --> 00:06:33,836
如果这个项是一个视图

214
00:06:33,836 --> 00:06:34,956
那么这种做法就会奏效  如果是

215
00:06:34,956 --> 00:06:36,206
一个 SpriteKit 节点 也可以

216
00:06:36,206 --> 00:06:37,066
不管涉及到哪些类型  

217
00:06:37,066 --> 00:06:38,656
你只需要

218
00:06:38,656 --> 00:06:40,626
调用 contains  它就能发挥作用

219
00:06:41,496 --> 00:06:42,886
因此 它将有望

220
00:06:42,886 --> 00:06:43,796
降低你需要

221
00:06:43,796 --> 00:06:44,756
在代码里执行的

222
00:06:44,756 --> 00:06:45,726
类型转换量

223
00:06:46,726 --> 00:06:48,986
这就是新协议扩展的

224
00:06:48,986 --> 00:06:49,506
情况

225
00:06:50,956 --> 00:06:51,946
关于其他的性能提升

226
00:06:51,946 --> 00:06:53,286
我要请我的同事 Jon

227
00:06:53,286 --> 00:06:55,146
上台与大家分享一些

228
00:06:55,146 --> 00:06:56,676
聚焦动画的新 API

229
00:06:57,146 --> 00:07:01,086
&gt;&gt; 早上好 去年我们

230
00:06:57,146 --> 00:07:01,086
&gt;&gt; 早上好 去年我们

231
00:07:01,086 --> 00:07:02,886
为大家展示过协调 API

232
00:07:02,886 --> 00:07:04,616
它可以让你的动画

233
00:07:04,616 --> 00:07:06,146
在焦点更新的过程中

234
00:07:06,146 --> 00:07:07,936
与系统动画

235
00:07:07,936 --> 00:07:08,346
保持同步

236
00:07:09,206 --> 00:07:10,576
完成这一点  靠的就是

237
00:07:10,576 --> 00:07:13,126
UIFocusAnimationCoordinator

238
00:07:13,126 --> 00:07:15,146
无论焦点更新在何时发生

239
00:07:15,146 --> 00:07:16,076
它都会立刻启动

240
00:07:17,616 --> 00:07:18,886
今天 我想跟大家聊聊

241
00:07:18,886 --> 00:07:19,766
我们在 tvOS 11 里

242
00:07:19,766 --> 00:07:22,366
为这个 API 做出的一些

243
00:07:22,366 --> 00:07:22,856
改进

244
00:07:23,616 --> 00:07:25,706
但在开始之前

245
00:07:25,706 --> 00:07:27,316
让我们更深入地看一下

246
00:07:27,316 --> 00:07:28,476
今天的动画是怎样运作的

247
00:07:30,216 --> 00:07:32,176
聚焦动画是

248
00:07:32,176 --> 00:07:33,826
tvOS 用户体验中非常重要的

249
00:07:33,886 --> 00:07:34,676
一部分

250
00:07:35,046 --> 00:07:36,536
它们不仅会给你的用户展示

251
00:07:36,536 --> 00:07:38,356
焦点移动的方位

252
00:07:38,356 --> 00:07:39,686
还让用户感到与你的内容

253
00:07:39,686 --> 00:07:40,366
联系得更加密切

254
00:07:40,736 --> 00:07:43,206
跟大多数事情一样  时序把握

255
00:07:43,206 --> 00:07:43,956
是关键

256
00:07:43,956 --> 00:07:46,146
如果动画速度过快

257
00:07:46,536 --> 00:07:47,926
就会给用户带来

258
00:07:47,926 --> 00:07:48,596
不愉快的感觉

259
00:07:48,886 --> 00:07:50,456
但如果动画速度过慢

260
00:07:50,456 --> 00:07:51,246
就会影响使用

261
00:07:52,246 --> 00:07:53,986
所以  UIKit 在这方面花费了很大一番

262
00:07:53,986 --> 00:07:55,326
气力  目的就是要管理这些

263
00:07:55,326 --> 00:07:56,576
动画及其时序

264
00:07:57,116 --> 00:07:59,646
我们进行了大量操控

265
00:07:59,926 --> 00:08:02,516
比如改变时长

266
00:07:59,926 --> 00:08:02,516
比如改变时长

267
00:08:02,516 --> 00:08:03,786
来使动画效果

268
00:08:03,786 --> 00:08:04,216
更流畅

269
00:08:05,126 --> 00:08:06,576
在多个聚焦项之间

270
00:08:06,576 --> 00:08:08,156
加快移动速度  会形成

271
00:08:08,156 --> 00:08:09,386
更为快速的动画效果

272
00:08:09,666 --> 00:08:11,196
当我们从一个项缓慢移动到

273
00:08:11,196 --> 00:08:13,056
下一项时  就会相应地放慢动画

274
00:08:13,056 --> 00:08:14,346
来匹配这个速度

275
00:08:15,356 --> 00:08:16,966
当用户把焦点

276
00:08:16,966 --> 00:08:19,156
移动到画面外时

277
00:08:19,156 --> 00:08:21,356
我们要确保能够增添适度的延迟

278
00:08:21,356 --> 00:08:22,556
直至该项完全可见

279
00:08:22,636 --> 00:08:24,016
然后我们再运行聚焦

280
00:08:24,016 --> 00:08:24,686
动画

281
00:08:28,636 --> 00:08:30,116
大家可能已经注意到了

282
00:08:30,116 --> 00:08:31,636
聚焦动画和

283
00:08:31,636 --> 00:08:33,426
失焦动画各自有一套

284
00:08:33,426 --> 00:08:34,655
不同的时序

285
00:08:36,376 --> 00:08:37,756
这是因为聚焦

286
00:08:37,756 --> 00:08:39,006
动画需要清晰分明

287
00:08:39,006 --> 00:08:40,206
要抓住用户的眼球

288
00:08:40,206 --> 00:08:42,106
而失焦动画

289
00:08:42,106 --> 00:08:43,676
则需要更加隐约一些

290
00:08:43,756 --> 00:08:44,786
更多的是作为背景

291
00:08:45,636 --> 00:08:47,616
所以  大家在这里可以看到

292
00:08:47,616 --> 00:08:49,746
当焦点在这些项目之间移动时

293
00:08:49,746 --> 00:08:52,206
被聚焦的项就会

294
00:08:52,206 --> 00:08:54,006
迅速凸显

295
00:08:54,436 --> 00:08:56,636
而失焦的项就会缓慢地移动到

296
00:08:56,636 --> 00:08:57,276
背景位置

297
00:08:57,276 --> 00:08:58,326
事实上 当焦点从这里

298
00:08:58,326 --> 00:09:00,286
移动到下一项时

299
00:08:58,326 --> 00:09:00,286
移动到下一项时

300
00:09:00,286 --> 00:09:03,106
会在后方留下一道痕迹

301
00:09:03,296 --> 00:09:04,056
于是 当你调用

302
00:09:04,056 --> 00:09:06,506
addCoordinatedAnimations

303
00:09:06,506 --> 00:09:08,706
来同步你的动画时

304
00:09:08,706 --> 00:09:10,716
我们会根据聚焦环境的

305
00:09:10,716 --> 00:09:12,376
等级次序来自动判断

306
00:09:12,376 --> 00:09:14,976
这些是聚焦动画

307
00:09:14,976 --> 00:09:15,936
还是失焦动画

308
00:09:16,216 --> 00:09:17,806
这是 Matt 刚才

309
00:09:17,806 --> 00:09:19,836
展示的同一张图表

310
00:09:19,836 --> 00:09:21,676
是关于 didUpdateFocus 通知的

311
00:09:22,556 --> 00:09:24,006
不论你何时要调用

312
00:09:24,536 --> 00:09:27,236
addCoordinatedAnimations

313
00:09:27,236 --> 00:09:28,616
不论是从先前被聚焦的项

314
00:09:28,616 --> 00:09:30,346
还是从它的任何直系原始项调用

315
00:09:30,346 --> 00:09:32,616
只是不包括

316
00:09:32,616 --> 00:09:33,976
共同的母环境

317
00:09:33,976 --> 00:09:36,086
我们都会认为这些

318
00:09:36,276 --> 00:09:38,016
是失焦动画

319
00:09:38,016 --> 00:09:39,316
并以此对它们进行调节

320
00:09:40,676 --> 00:09:43,226
相反 如果你的动画添加来源

321
00:09:43,226 --> 00:09:45,356
是下一个聚焦项

322
00:09:45,356 --> 00:09:47,256
或者它的任何

323
00:09:47,256 --> 00:09:48,956
直系原始项  那么

324
00:09:48,956 --> 00:09:50,696
我们就认为这些是聚焦动画

325
00:09:50,696 --> 00:09:51,956
然后它们就会被

326
00:09:51,956 --> 00:09:52,376
优先处理

327
00:09:52,906 --> 00:09:55,386
效果真的很好

328
00:09:56,736 --> 00:09:58,536
但是在 tvOS 11里  我们现在

329
00:09:58,536 --> 00:10:00,826
允许大家将具体目标或是设定为

330
00:09:58,536 --> 00:10:00,826
允许大家将具体目标或是设定为

331
00:10:00,826 --> 00:10:03,186
聚焦动画  或是设定为

332
00:10:03,186 --> 00:10:03,976
失焦动画

333
00:10:04,046 --> 00:10:06,756
为了这个目的  我们把两个

334
00:10:06,756 --> 00:10:08,346
新功能添加到了

335
00:10:08,346 --> 00:10:09,356
UIFocusAnimationCoordinator

336
00:10:09,956 --> 00:10:10,826
addCoordinated

337
00:10:10,826 --> 00:10:12,446
FocusingAnimations 

338
00:10:12,446 --> 00:10:13,236
还有 addCoordinated

339
00:10:13,236 --> 00:10:14,526
UnfocusingAnimations

340
00:10:16,716 --> 00:10:18,176
这样一来  addCoordinated

341
00:10:18,176 --> 00:10:19,836
FocusingAnimations 的运作模式

342
00:10:19,836 --> 00:10:21,966
几乎就像是你从

343
00:10:21,966 --> 00:10:23,916
即将聚焦的项内部  

344
00:10:23,916 --> 00:10:25,856
或是从它任何一个直系原始项里

345
00:10:25,856 --> 00:10:27,446
调用 addCoordinatedAnimations 一样

346
00:10:27,886 --> 00:10:28,826
而 addCoordinated

347
00:10:28,826 --> 00:10:30,936
UnfocusingAnimations 的

348
00:10:30,936 --> 00:10:31,796
运作模式跟 addCoordinatedAnimations 从

349
00:10:31,796 --> 00:10:33,516
前一个聚焦项内部

350
00:10:33,516 --> 00:10:35,326
或是它的原始项里

351
00:10:35,326 --> 00:10:36,446
调用一样

352
00:10:36,596 --> 00:10:38,906
那么  给大家展示这个运作方式的

353
00:10:38,906 --> 00:10:40,406
最好办法就是演示一遍

354
00:10:42,616 --> 00:10:43,976
好  我们直接开始吧

355
00:10:50,056 --> 00:10:50,826
好了 我要做一个非常

356
00:10:50,826 --> 00:10:52,416
简单的时间轴应用

357
00:10:52,416 --> 00:10:53,906
它会显示以前 WWDC

358
00:10:53,946 --> 00:10:55,036
的一些事件以及这些事件的

359
00:10:55,036 --> 00:10:55,706
演示文稿

360
00:10:56,506 --> 00:10:58,416
每个条目都由这个

361
00:10:58,416 --> 00:10:59,976
包含数字的单元代表

362
00:10:59,976 --> 00:11:03,126
当我们移动焦点时

363
00:10:59,976 --> 00:11:03,126
当我们移动焦点时

364
00:11:03,126 --> 00:11:05,136
它上方对应的图片会向下移动

365
00:11:05,136 --> 00:11:06,236
这是为了稍微突出

366
00:11:06,236 --> 00:11:06,756
强调一下

367
00:11:07,136 --> 00:11:11,016
当我在这样移动的过程中

368
00:11:11,016 --> 00:11:12,416
你可能会注意到

369
00:11:12,416 --> 00:11:15,146
如果我们加快移动速度  会有些

370
00:11:15,146 --> 00:11:15,606
不太流畅

371
00:11:15,926 --> 00:11:17,726
那我们就跳过这个问题

372
00:11:17,726 --> 00:11:20,506
来看一下代码

373
00:11:20,506 --> 00:11:22,946
大家可以看到

374
00:11:22,946 --> 00:11:24,386
所有操作都已经在

375
00:11:24,386 --> 00:11:26,296
addCoordinatedAnimations 部分中完成

376
00:11:26,646 --> 00:11:29,286
这是我们的新 API 的一个很好的用途

377
00:11:29,286 --> 00:11:33,146
我们在这里展示的是

378
00:11:33,246 --> 00:11:35,326
焦点视图

379
00:11:36,496 --> 00:11:38,026
我已经通过 nextFocusedIndexPath

380
00:11:38,026 --> 00:11:40,336
把它关联起来

381
00:11:40,606 --> 00:11:41,886
这样就可以抓取它

382
00:11:41,886 --> 00:11:43,336
对应的补充视图  我只需要

383
00:11:43,336 --> 00:11:45,266
做出向下 100 点的

384
00:11:45,266 --> 00:11:46,876
坐标转换就可以了

385
00:11:46,956 --> 00:11:48,456
失焦视图的情况

386
00:11:48,456 --> 00:11:50,166
也与此相似  

387
00:11:50,166 --> 00:11:52,246
这个退到后面的图片  我使用

388
00:11:52,246 --> 00:11:53,796
previouslyFocusedIndexPath 来抓取它

389
00:11:54,146 --> 00:11:55,426
然后根据其特征属性

390
00:11:55,426 --> 00:11:55,946
进行转换

391
00:11:57,436 --> 00:12:00,706
因此  我们没有使用单一的

392
00:11:57,436 --> 00:12:00,706
因此  我们没有使用单一的

393
00:12:01,076 --> 00:12:02,676
addCoordinatedAnimations 功能

394
00:12:03,036 --> 00:12:05,546
事实上这就让所有事情都

395
00:12:05,676 --> 00:12:06,676
根据聚焦动画

396
00:12:06,676 --> 00:12:08,466
来进行协调  我们现在可以

397
00:12:08,466 --> 00:12:14,156
把它分为两个显性的调用

398
00:12:14,156 --> 00:12:17,066
一个是为了

399
00:12:17,066 --> 00:12:20,726
获得焦点视图的聚焦动画

400
00:12:21,256 --> 00:12:23,236
另一个是为了获得

401
00:12:23,236 --> 00:12:24,696
失焦视图的失焦

402
00:12:24,696 --> 00:12:24,926
动画

403
00:12:25,286 --> 00:12:27,786
现在我们再运行一次

404
00:12:28,876 --> 00:12:29,776
看看情况怎样

405
00:12:36,096 --> 00:12:37,316
现在我们将焦点从一个项

406
00:12:37,316 --> 00:12:38,106
移动到下一项 这时你就可以发现

407
00:12:38,106 --> 00:12:41,346
与焦点自身在单元里移动时

408
00:12:41,346 --> 00:12:43,936
相同的移动轨迹存在于

409
00:12:43,936 --> 00:12:44,976
图像视图自身  这就

410
00:12:44,976 --> 00:12:46,546
为你应用程序

411
00:12:46,546 --> 00:12:48,476
的用户体验增色不少

412
00:12:48,476 --> 00:12:51,806
好了 现在我们再跳回到

413
00:12:51,806 --> 00:12:53,216
幻灯片

414
00:12:53,496 --> 00:12:54,626
在动画方面

415
00:12:54,626 --> 00:12:55,996
我还有一件事情

416
00:12:55,996 --> 00:12:56,716
跟大家谈谈

417
00:12:57,556 --> 00:12:58,516
除了上述两个新功能以外

418
00:12:58,516 --> 00:13:00,136
我们还提供了一个

419
00:12:58,516 --> 00:13:00,136
我们还提供了一个

420
00:13:00,136 --> 00:13:01,016
关于 UIFocusAnimationContext

421
00:13:01,016 --> 00:13:03,316
例证  这是

422
00:13:03,316 --> 00:13:05,366
tvOS 11 里的一个新对象

423
00:13:05,366 --> 00:13:07,036
它会给你额外提供一些

424
00:13:07,036 --> 00:13:08,626
关于动画发生时序的信息

425
00:13:08,626 --> 00:13:12,086
它应该会让

426
00:13:12,086 --> 00:13:13,696
动画的推进变得更为轻松

427
00:13:14,096 --> 00:13:15,806
比如说 在这个系统聚焦

428
00:13:15,806 --> 00:13:17,216
动画的后半部分  

429
00:13:17,216 --> 00:13:18,956
我们想要运行

430
00:13:18,956 --> 00:13:19,596
动画

431
00:13:20,616 --> 00:13:21,816
这个嘛很容易实现

432
00:13:22,326 --> 00:13:23,406
我们只需要从

433
00:13:23,406 --> 00:13:25,546
动画情景里抓取出时长

434
00:13:25,546 --> 00:13:27,936
把它分为两部分

435
00:13:27,966 --> 00:13:29,726
再把这些数值传送到

436
00:13:29,726 --> 00:13:31,836
普通的 UIView 动画功能中

437
00:13:32,916 --> 00:13:33,716
事情就完成了

438
00:13:34,336 --> 00:13:36,016
我想重点提一下

439
00:13:36,016 --> 00:13:37,896
是你必须打开 overrideInheritedDuration 选项

440
00:13:37,896 --> 00:13:39,126
因为

441
00:13:39,126 --> 00:13:40,876
如果做不到这一点 

442
00:13:40,876 --> 00:13:42,766
基于嵌套视图的动画就会忽略

443
00:13:42,766 --> 00:13:44,286
你给定的时长  

444
00:13:44,286 --> 00:13:45,636
并且转而选用

445
00:13:45,636 --> 00:13:46,476
外部时长

446
00:13:47,526 --> 00:13:49,166
但如果这样做了  就不仅会让你的

447
00:13:49,426 --> 00:13:51,406
UIVIewAnimation 变得更简单

448
00:13:51,406 --> 00:13:53,216
它还提供更好的 non-UIKit

449
00:13:53,216 --> 00:13:53,586
支持

450
00:13:53,926 --> 00:13:55,256
所以  如果你使用充分获得了

451
00:13:55,256 --> 00:13:56,446
聚焦系统支持的 SpriteKit

452
00:13:56,446 --> 00:13:58,366
你就可以为自己的动画

453
00:13:58,366 --> 00:14:00,136
创造更为一致的感觉

454
00:13:58,366 --> 00:14:00,136
创造更为一致的感觉

455
00:14:00,476 --> 00:14:02,166
举例来说  你可以使用

456
00:14:02,166 --> 00:14:03,196
SK 操作

457
00:14:04,486 --> 00:14:07,416
这是一个使用 SK 操作的例证

458
00:14:07,416 --> 00:14:09,236
它把不透明度减弱到 50%

459
00:14:09,236 --> 00:14:11,926
使用的是与系统 UIKit

460
00:14:12,346 --> 00:14:14,396
聚焦动画完全相同

461
00:14:14,396 --> 00:14:15,186
的时序

462
00:14:15,696 --> 00:14:18,826
好了 所以说现在的 API

463
00:14:19,136 --> 00:14:20,096
运行效果确实很好

464
00:14:21,256 --> 00:14:23,926
如果你不需要

465
00:14:23,926 --> 00:14:25,246
明确定位

466
00:14:25,246 --> 00:14:27,186
聚焦或失焦

467
00:14:27,186 --> 00:14:29,016
你可以继续使用现在的 API

468
00:14:29,016 --> 00:14:30,266
因为它正好符合你的需求

469
00:14:31,206 --> 00:14:33,156
不过 如果你需要把你的

470
00:14:33,156 --> 00:14:34,786
动画定位为

471
00:14:34,786 --> 00:14:36,866
聚焦或失焦

472
00:14:36,866 --> 00:14:38,286
而不管它们与

473
00:14:38,286 --> 00:14:40,146
聚焦环境等级的联系

474
00:14:40,146 --> 00:14:41,446
那就使用新的 API

475
00:14:41,446 --> 00:14:42,486
这样你能获得极好的效果

476
00:14:43,096 --> 00:14:45,696
最后 我们还为某种

477
00:14:45,696 --> 00:14:47,176
附加时序信息提供了

478
00:14:47,176 --> 00:14:48,526
聚焦动画情景

479
00:14:48,816 --> 00:14:49,586
这会使得高级动画操作

480
00:14:49,586 --> 00:14:50,736
变得更容易

481
00:14:51,176 --> 00:14:54,006
那么 接下来我想谈谈

482
00:14:54,006 --> 00:14:55,046
聚焦音效

483
00:14:56,086 --> 00:14:57,476
动画是焦点更新的

484
00:14:57,476 --> 00:14:58,806
视觉表现

485
00:14:58,806 --> 00:15:01,016
聚焦音效则为用户

486
00:14:58,806 --> 00:15:01,016
聚焦音效则为用户

487
00:15:01,016 --> 00:15:02,796
提供焦点移动后形成的

488
00:15:02,796 --> 00:15:03,686
听觉队列

489
00:15:04,196 --> 00:15:08,396
和动画的情况一样 

490
00:15:08,396 --> 00:15:10,386
声音回放具有某种微妙特征

491
00:15:10,496 --> 00:15:11,516
可以形成效果最佳的

492
00:15:11,516 --> 00:15:12,606
用户体验

493
00:15:14,056 --> 00:15:15,606
UKit 针对播放的每个音效

494
00:15:15,606 --> 00:15:18,136
会执行好几种

495
00:15:18,136 --> 00:15:19,466
音量和连贯性的修正

496
00:15:20,426 --> 00:15:22,016
焦点移动的速度越快

497
00:15:22,266 --> 00:15:25,936
它造成的音效越安静

498
00:15:25,936 --> 00:15:27,706
焦点移动速度越慢

499
00:15:27,706 --> 00:15:29,956
音效就越大

500
00:15:29,956 --> 00:15:31,256
这就极好地补足了

501
00:15:31,256 --> 00:15:32,436
我们针对动画而做出的

502
00:15:32,436 --> 00:15:33,186
同一时长调整

503
00:15:34,146 --> 00:15:36,876
我们还可以运用屏幕上

504
00:15:36,876 --> 00:15:39,606
聚焦项所处的位置

505
00:15:39,606 --> 00:15:41,176
把声音选定为左声道

506
00:15:41,176 --> 00:15:41,966
或右声道

507
00:15:42,276 --> 00:15:43,826
如果在屏幕上向右轻扫

508
00:15:43,826 --> 00:15:46,036
你会注意到声音开始

509
00:15:46,036 --> 00:15:47,446
转到右声道

510
00:15:47,446 --> 00:15:49,336
如果你反过来向左轻扫  

511
00:15:49,336 --> 00:15:51,036
而焦点位于水平正中央时

512
00:15:51,036 --> 00:15:52,356
声音转向左声道的

513
00:15:52,356 --> 00:15:53,376
提示就会弹出

514
00:15:54,536 --> 00:15:55,996
这再次有助于创建一种

515
00:15:55,996 --> 00:15:57,796
更加浸润式的用户体验

516
00:15:58,306 --> 00:16:03,396
很多用户希望我们能够

517
00:15:58,306 --> 00:16:03,396
很多用户希望我们能够

518
00:16:03,396 --> 00:16:04,816
让大家提供自定义聚焦音效

519
00:16:04,816 --> 00:16:06,286
或者从 UIKit 音效里退出  现在在 tvOS 11 里

520
00:16:06,286 --> 00:16:08,316
我很高兴地宣布

521
00:16:08,316 --> 00:16:10,166
这两件事情

522
00:16:10,166 --> 00:16:11,096
大家现在都可以

523
00:16:11,096 --> 00:16:11,516
去做了

524
00:16:12,566 --> 00:16:14,506
那么  现在如果播放自定义音效

525
00:16:15,076 --> 00:16:16,746
你只需要使用一个标识符

526
00:16:16,746 --> 00:16:18,706
注册你的音效 

527
00:16:19,716 --> 00:16:21,716
然后在焦点更新时

528
00:16:21,716 --> 00:16:23,326
提供这个标识符  这样就可以

529
00:16:23,326 --> 00:16:24,306
播放聚焦音效了

530
00:16:24,566 --> 00:16:26,356
这只是用户启动的一种

531
00:16:26,356 --> 00:16:27,126
焦点移动

532
00:16:27,636 --> 00:16:29,706
我们收到这个标识符以后

533
00:16:29,706 --> 00:16:31,606
就会播放与之关联的

534
00:16:31,606 --> 00:16:33,166
的音效

535
00:16:35,556 --> 00:16:39,126
注册音效需要使用一个类

536
00:16:39,126 --> 00:16:40,606
即 registersoundFileURL

537
00:16:40,606 --> 00:16:42,256
用于音效

538
00:16:42,256 --> 00:16:44,106
标识符 它显现在

539
00:16:44,106 --> 00:16:46,026
新的 UIFocusSystem 上

540
00:16:46,026 --> 00:16:47,466
是 tvOS 11 中的一个新对象

541
00:16:48,016 --> 00:16:52,116
音效注册的操作是全局性的

542
00:16:52,116 --> 00:16:54,016
也就是说 一旦完成注册

543
00:16:54,016 --> 00:16:55,716
你的自定义音效

544
00:16:55,716 --> 00:16:57,056
在整个应用程序里都可以

545
00:16:57,056 --> 00:16:57,676
使用

546
00:16:58,066 --> 00:17:00,926
由于这个原因 一个音效

547
00:16:58,066 --> 00:17:00,926
由于这个原因 一个音效

548
00:17:00,926 --> 00:17:03,806
只应该注册一个

549
00:17:03,806 --> 00:17:04,406
标识符

550
00:17:05,056 --> 00:17:06,536
事实上 使用同一个音效标识符

551
00:17:06,646 --> 00:17:08,086
反复注册是 

552
00:17:08,086 --> 00:17:08,455
错误操作

553
00:17:09,665 --> 00:17:11,026
但是 如果你的 App 里有多个

554
00:17:11,076 --> 00:17:12,695
音效  则是完全合理

555
00:17:12,695 --> 00:17:14,215
可以接受

556
00:17:14,215 --> 00:17:15,685
只需要让每个音效对应某个特别的

557
00:17:15,685 --> 00:17:16,256
标识符就可以

558
00:17:16,675 --> 00:17:20,316
由于这个操作是全局性的

559
00:17:20,316 --> 00:17:21,576
你最好是提前注册

560
00:17:22,616 --> 00:17:24,215
如果要设置并播放你的自定义音效

561
00:17:24,215 --> 00:17:25,616
会产生不小的

562
00:17:25,616 --> 00:17:27,386
性能成本  所以我们想确保 

563
00:17:27,386 --> 00:17:28,326
在注册和用户的焦点移动之间

564
00:17:28,326 --> 00:17:30,216
有充裕的时间

565
00:17:30,216 --> 00:17:31,756
来保证音效

566
00:17:31,756 --> 00:17:33,216
得以无缝播放

567
00:17:34,096 --> 00:17:35,796
这个注册方法支持所有

568
00:17:35,936 --> 00:17:38,146
储存在你本地设备的

569
00:17:38,366 --> 00:17:39,636
标准 iOS 文件

570
00:17:39,636 --> 00:17:40,176
格式

571
00:17:40,726 --> 00:17:43,546
所以 当你真正需要

572
00:17:43,546 --> 00:17:45,816
播放这一音效时

573
00:17:45,816 --> 00:17:47,146
你会使用到 UIFocusEnvironment

574
00:17:47,146 --> 00:17:49,056
一个新的可选功能

575
00:17:49,996 --> 00:17:51,266
因此  我们把这一方法

576
00:17:51,616 --> 00:17:52,376
称为 soundIdentifier

577
00:17:52,376 --> 00:17:53,406
ForFocusUpdate

578
00:17:53,776 --> 00:17:57,126
那么 didUpdateFocus 的通知

579
00:17:57,876 --> 00:17:59,676
也是以同样的升序方式

580
00:17:59,676 --> 00:18:00,166
进行传送

581
00:17:59,676 --> 00:18:00,166
进行传送

582
00:18:01,246 --> 00:18:02,616
我们开始是在下一个聚焦项上

583
00:18:02,616 --> 00:18:04,806
调用这个方法

584
00:18:05,136 --> 00:18:07,856
如果下一个聚焦项给我们

585
00:18:08,016 --> 00:18:09,766
提供了一个失焦音效标识符

586
00:18:10,276 --> 00:18:11,686
我们就用它来给这个焦点更新

587
00:18:11,686 --> 00:18:13,126
控制音效回放

588
00:18:13,126 --> 00:18:13,856
这样就可以了

589
00:18:14,836 --> 00:18:16,366
不过 如果我们从下一个

590
00:18:16,366 --> 00:18:17,696
聚焦项目里没有获得返回的

591
00:18:17,696 --> 00:18:19,626
音效标识符  我们就要查看它的父项

592
00:18:20,456 --> 00:18:21,646
然后再试一次

593
00:18:22,646 --> 00:18:24,046
现在如果这个父项没有返回任何信息

594
00:18:24,046 --> 00:18:25,586
我们就一遍遍地重复这个过程

595
00:18:25,586 --> 00:18:27,076
我们向上查看它的父项

596
00:18:27,076 --> 00:18:28,376
然后多次重复这个过程

597
00:18:28,376 --> 00:18:29,806
直到我们抵达根聚焦环境

598
00:18:29,806 --> 00:18:31,826
如果你所有的聚焦环境

599
00:18:31,826 --> 00:18:33,136
都没有选择提供一个自定义音效

600
00:18:33,176 --> 00:18:34,926
我们就会直接选用

601
00:18:35,966 --> 00:18:37,226
UIKit 自身使用的

602
00:18:37,226 --> 00:18:38,606
默认音效

603
00:18:39,416 --> 00:18:40,116
所以 你从焦点更新时使用的

604
00:18:40,116 --> 00:18:41,546
音效标识符那里

605
00:18:41,546 --> 00:18:42,946
可能获得的返回值

606
00:18:42,946 --> 00:18:44,356
具有多种选择可能性

607
00:18:44,886 --> 00:18:47,246
你当然可以

608
00:18:47,246 --> 00:18:48,476
返回自己先前曾经注册过的

609
00:18:48,476 --> 00:18:50,326
任何音效  这样一来

610
00:18:50,326 --> 00:18:52,996
注册该标识符的音效

611
00:18:52,996 --> 00:18:55,316
就会被播放出来

612
00:18:55,516 --> 00:18:57,096
UIKit 还提供两种音效标识符

613
00:18:57,096 --> 00:18:59,556
默认标识和无标识

614
00:19:00,146 --> 00:19:02,446
通过提供默认音效标识符

615
00:19:02,446 --> 00:19:04,426
UIKit 可以得到明确的信号

616
00:19:04,426 --> 00:19:06,006
也就是说 你想强制

617
00:19:06,006 --> 00:19:07,766
UIKit 自带的默认音效

618
00:19:07,766 --> 00:19:09,246
将会为这一次的焦点更新

619
00:19:09,246 --> 00:19:10,736
而自行播放

620
00:19:10,986 --> 00:19:13,006
现在请记住  如果你所有的

621
00:19:13,006 --> 00:19:14,546
环境都不希望控制这个更新的

622
00:19:14,546 --> 00:19:16,606
音效 

623
00:19:16,606 --> 00:19:18,366
那么  这就是我们要使用的值

624
00:19:18,366 --> 00:19:19,796
你需要使用它的机会可能很少

625
00:19:19,796 --> 00:19:21,216
但我们仍提供这个

626
00:19:21,216 --> 00:19:23,696
以备不时之需

627
00:19:23,866 --> 00:19:25,656
最后 非标识符可以

628
00:19:25,656 --> 00:19:27,376
用来彻底退出播放

629
00:19:27,436 --> 00:19:29,136
此次焦点更新的

630
00:19:29,136 --> 00:19:29,496
聚焦音效

631
00:19:33,256 --> 00:19:34,716
你可以非常轻松地

632
00:19:34,716 --> 00:19:37,096
有条件修改调整

633
00:19:37,096 --> 00:19:38,986
要播放的音效  并且使用

634
00:19:38,986 --> 00:19:40,686
Matt 之前展示过的

635
00:19:40,686 --> 00:19:42,756
同样的 contains 协议扩展

636
00:19:42,756 --> 00:19:46,006
我们能够决定

637
00:19:46,006 --> 00:19:47,396
焦点在某个具体环境里移动的时间

638
00:19:47,396 --> 00:19:49,046
以及它修改调整音效的时间

639
00:19:49,046 --> 00:19:50,836
不然就延迟它的

640
00:19:50,836 --> 00:19:51,116
匹配进度

641
00:19:51,116 --> 00:19:53,906
看  我现在设定了一个

642
00:19:53,906 --> 00:19:54,956
具体的环境  我称它为

643
00:19:54,956 --> 00:19:56,536
音效启动环境

644
00:19:56,536 --> 00:19:57,826
当焦点在这个环境里

645
00:19:57,826 --> 00:19:59,146
移动时  我想播放先前

646
00:19:59,236 --> 00:20:01,466
我用自定义音效标识符注册过的

647
00:19:59,236 --> 00:20:01,466
我用自定义音效标识符注册过的

648
00:20:01,466 --> 00:20:02,616
一个音效

649
00:20:03,626 --> 00:20:04,856
这同样也很简单

650
00:20:04,856 --> 00:20:07,336
选取下一个聚焦项

651
00:20:07,336 --> 00:20:08,596
然后只要再检查一下  

652
00:20:08,596 --> 00:20:09,866
它是否包含在这个

653
00:20:09,866 --> 00:20:10,896
音效启动环境里

654
00:20:11,006 --> 00:20:14,966
那么  关于从聚焦音效里退出的问题

655
00:20:14,966 --> 00:20:16,486
我简单再讲几点

656
00:20:17,756 --> 00:20:19,976
第一 用户期待在焦点移动发生时  

657
00:20:19,976 --> 00:20:21,866
能够出现音效

658
00:20:21,866 --> 00:20:22,306
播放

659
00:20:22,626 --> 00:20:23,836
就像我前面提到的  焦点移动

660
00:20:23,836 --> 00:20:25,136
对于它们来说就是一个

661
00:20:25,136 --> 00:20:26,086
声音队列

662
00:20:26,876 --> 00:20:28,496
所以你应该仅仅在

663
00:20:28,496 --> 00:20:30,666
用户明确表示不要播放音效的时候

664
00:20:30,666 --> 00:20:31,916
退出音效

665
00:20:32,226 --> 00:20:33,646
举一个很好的例子

666
00:20:33,646 --> 00:20:36,086
比如在游戏内菜单中

667
00:20:36,086 --> 00:20:37,816
用户可以关闭

668
00:20:37,816 --> 00:20:39,796
整个 App 里的音效

669
00:20:41,636 --> 00:20:43,486
如果你想要

670
00:20:43,486 --> 00:20:45,196
退出聚焦音效

671
00:20:45,196 --> 00:20:46,156
然后在焦点更新产生后

672
00:20:46,156 --> 00:20:48,276
播放自己的音效

673
00:20:48,276 --> 00:20:49,636
我强烈推荐大家改用我们的 API

674
00:20:49,636 --> 00:20:51,966
因为你不仅仅可以

675
00:20:51,966 --> 00:20:53,956
由此而获得音量和连贯性的各项调整

676
00:20:53,956 --> 00:20:55,836
这些调整是我们为自己的

677
00:20:55,836 --> 00:20:57,736
内部音效而实施的

678
00:20:57,876 --> 00:20:59,606
它可能很难被复制

679
00:21:00,796 --> 00:21:02,206
同时 我们也尊重用户

680
00:21:02,206 --> 00:21:03,796
为了播放这些音效

681
00:21:03,796 --> 00:21:04,416
而对设备进行的设置

682
00:21:04,996 --> 00:21:06,396
因此 Apple TV 的一个设置

683
00:21:06,396 --> 00:21:07,206
就是允许你关闭

684
00:21:07,206 --> 00:21:08,996
整个系统的导航音效

685
00:21:08,996 --> 00:21:11,456
如果用户已经说他们不愿意要这些音效了

686
00:21:11,456 --> 00:21:13,086
你肯定不想让你的 App

687
00:21:13,086 --> 00:21:14,636
成为唯一一个

688
00:21:14,636 --> 00:21:15,916
播放音效的 App

689
00:21:18,436 --> 00:21:20,066
好的 再概括一下

690
00:21:20,386 --> 00:21:24,576
你应该通过良好判断

691
00:21:24,826 --> 00:21:26,536
来决定什么时候 在什么地方

692
00:21:26,536 --> 00:21:28,386
以及为焦点更新播放什么音效

693
00:21:28,386 --> 00:21:30,156
因为你的音效

694
00:21:30,156 --> 00:21:31,246
应该用来改善用户体验

695
00:21:31,246 --> 00:21:32,776
用体验抓住 

696
00:21:32,776 --> 00:21:34,086
他们的注意力而不是分散注意力

697
00:21:34,676 --> 00:21:36,446
这方面有一个很好的例子

698
00:21:36,446 --> 00:21:37,926
应该就是屏幕显示元素的

699
00:21:37,926 --> 00:21:38,516
差异化

700
00:21:38,786 --> 00:21:40,716
我们在 UIKit 上就是根据

701
00:21:40,716 --> 00:21:42,266
具体项的大小而这样做的

702
00:21:42,656 --> 00:21:45,186
因此 超大的聚焦项会产生

703
00:21:45,186 --> 00:21:47,406
更响亮  更低沉的音效

704
00:21:47,406 --> 00:21:49,096
而较小的聚焦项

705
00:21:49,096 --> 00:21:50,126
音效就比较轻 音调更高

706
00:21:51,046 --> 00:21:52,676
同样 这样做都是为了改善

707
00:21:52,676 --> 00:21:53,906
用户体验

708
00:21:54,416 --> 00:21:56,896
好的 说了这么多 现在我要把

709
00:21:56,896 --> 00:21:58,236
讲台交还给 Matt 了

710
00:21:58,756 --> 00:22:00,006
他会谈一谈 SceneKit 支持的

711
00:21:58,756 --> 00:22:00,006
他会谈一谈 SceneKit 支持的

712
00:22:00,006 --> 00:22:00,566
相关事宜

713
00:22:00,566 --> 00:22:00,816
Matt

714
00:22:01,516 --> 00:22:05,606
[掌声]

715
00:22:06,106 --> 00:22:06,406
谢谢 Jon

716
00:22:07,896 --> 00:22:09,446
好的 我很兴奋地

717
00:22:09,446 --> 00:22:11,526
向大家宣布 在 tvOS 11 里

718
00:22:11,526 --> 00:22:12,996
我们要把焦点系统支持

719
00:22:12,996 --> 00:22:14,656
扩展到 SceneKit 的

720
00:22:14,846 --> 00:22:15,306
框架上

721
00:22:16,466 --> 00:22:17,256
那么  它如何工作呢

722
00:22:17,946 --> 00:22:19,606
大家不妨回想一下 tvOS 9

723
00:22:19,606 --> 00:22:21,926
在以前  UIView 是

724
00:22:21,926 --> 00:22:24,476
唯一能够支持聚焦的

725
00:22:24,576 --> 00:22:25,126
类型

726
00:22:27,026 --> 00:22:28,886
而在 tvOS 10 里  我们采用了

727
00:22:28,886 --> 00:22:31,456
这种新的 UI 聚焦项协议

728
00:22:31,456 --> 00:22:33,146
此外  我们把焦点交互支持

729
00:22:33,146 --> 00:22:34,986
扩展到了 SpriteKit

730
00:22:34,986 --> 00:22:36,296
办法是将这个协议同时

731
00:22:36,296 --> 00:22:38,036
纳入 UIView 和 SKNode

732
00:22:39,126 --> 00:22:41,326
那么在现在的 tvOS 11 里 我们要

733
00:22:41,556 --> 00:22:44,336
把 SCNNode 加入 UIFocusItem

734
00:22:44,446 --> 00:22:44,856
族项

735
00:22:45,446 --> 00:22:47,746
那么  这是如何进行的呢？

736
00:22:48,676 --> 00:22:50,266
就像 SpriteKit 一样

737
00:22:50,266 --> 00:22:52,256
你需要先加入  然后在你的

738
00:22:52,256 --> 00:22:53,986
SceneKit App 里获得焦点支持

739
00:22:54,466 --> 00:22:55,906
这就意味着在默认状态下

740
00:22:55,906 --> 00:22:57,306
节点是无法聚焦的

741
00:22:57,776 --> 00:23:00,516
要让这些节点可以聚焦

742
00:22:57,776 --> 00:23:00,516
要让这些节点可以聚焦

743
00:23:00,516 --> 00:23:02,016
办法实在是太简单了

744
00:23:02,016 --> 00:23:03,636
你只需要把新的聚焦行为属性

745
00:23:03,676 --> 00:23:05,696
设置为可聚焦

746
00:23:05,696 --> 00:23:07,616
然后就行了 就这么简单

747
00:23:08,796 --> 00:23:10,186
FocusBehavior 是 SCNNode 上的

748
00:23:10,186 --> 00:23:12,106
一种新属性  我们让 SKNode

749
00:23:12,106 --> 00:23:13,526
也支持这一属性

750
00:23:13,526 --> 00:23:15,206
所以现在就可以更轻松地

751
00:23:15,206 --> 00:23:16,546
让你的 SpriteKit 节点

752
00:23:16,546 --> 00:23:17,566
同样也可聚焦

753
00:23:18,236 --> 00:23:21,056
不过我觉得

754
00:23:21,056 --> 00:23:22,396
不如给大家快速演示一遍

755
00:23:22,396 --> 00:23:22,976
这样会更加有趣

756
00:23:27,066 --> 00:23:27,826
好的 我已经创建了

757
00:23:27,826 --> 00:23:30,746
一个基于 tvOS 的三连棋游戏 App

758
00:23:30,746 --> 00:23:32,576
我很想让我的 App

759
00:23:32,666 --> 00:23:34,956
增加一点弹出的特效

760
00:23:34,956 --> 00:23:36,186
所以我决定用 SceneKit

761
00:23:36,316 --> 00:23:36,776
来执行它

762
00:23:37,316 --> 00:23:38,286
现在你可以看见

763
00:23:38,376 --> 00:23:39,766
全方位视角下的

764
00:23:39,766 --> 00:23:42,356
立体三连棋盘

765
00:23:42,356 --> 00:23:43,616
我已经在我的三连棋游戏里

766
00:23:43,616 --> 00:23:44,726
执行了焦点

767
00:23:44,726 --> 00:23:45,596
交互支持

768
00:23:46,056 --> 00:23:47,766
所以我可以使用任何类型的

769
00:23:47,766 --> 00:23:49,686
输入设备  把焦点移动到

770
00:23:49,866 --> 00:23:50,966
棋盘上面的任意方块

771
00:23:50,966 --> 00:23:51,286
位置

772
00:23:51,896 --> 00:23:54,176
如果我按下 Select

773
00:23:54,176 --> 00:23:56,986
就可以让 X 或 O 在方块里落子

774
00:23:56,986 --> 00:23:59,686
任一个方块都可以

775
00:23:59,906 --> 00:24:00,996
所以说  这样执行起来

776
00:23:59,906 --> 00:24:00,996
所以说  这样执行起来

777
00:24:00,996 --> 00:24:02,166
实在是再简单不过了  

778
00:24:02,166 --> 00:24:03,626
除了要设置我的 SceneKit 场景

779
00:24:03,626 --> 00:24:05,876
我需要做的事情只不过是

780
00:24:06,126 --> 00:24:08,266
使用我先前展示的那一行代码

781
00:24:08,266 --> 00:24:09,696
将每一个代表棋盘方块的

782
00:24:09,696 --> 00:24:11,296
节点标记为可聚焦

783
00:24:11,296 --> 00:24:13,086
这就可以了

784
00:24:14,216 --> 00:24:15,636
接下来  还需要使用

785
00:24:15,636 --> 00:24:17,376
Jon 刚才讲过的那些

786
00:24:17,376 --> 00:24:19,426
相同的动画 API

787
00:24:19,426 --> 00:24:20,536
来提供自定义动画

788
00:24:21,446 --> 00:24:22,716
我们要做的全部事情

789
00:24:22,716 --> 00:24:23,306
其实就这么多

790
00:24:23,586 --> 00:24:25,076
现在我们可以跟我们的 SceneKit

791
00:24:25,076 --> 00:24:26,006
场景进行全面互动

792
00:24:26,586 --> 00:24:27,426
聚焦引擎会

793
00:24:27,426 --> 00:24:29,616
自动为我们处理好

794
00:24:29,616 --> 00:24:30,726
剩下的工作

795
00:24:31,096 --> 00:24:33,276
事实上 我添加了两个 UIKit

796
00:24:33,276 --> 00:24:35,116
按钮  UI 按钮是添加在

797
00:24:35,116 --> 00:24:36,986
我们这个 SceneKit 场景的底部

798
00:24:36,986 --> 00:24:38,616
只要把这些按钮放在

799
00:24:38,616 --> 00:24:40,326
SK 视图的上方  聚焦引擎

800
00:24:40,326 --> 00:24:41,596
就会自动处理我们这些

801
00:24:41,596 --> 00:24:43,656
节点和按钮之间的

802
00:24:43,876 --> 00:24:44,526
移动焦点

803
00:24:45,556 --> 00:24:46,906
它会妥当地进行处理

804
00:24:46,906 --> 00:24:48,136
无论我是在

805
00:24:48,136 --> 00:24:49,836
棋盘的左边或右边

806
00:24:50,096 --> 00:24:51,586
根据几何角度上

807
00:24:51,586 --> 00:24:53,366
离我们节点之间最近距离

808
00:24:54,036 --> 00:24:54,776
点击正确的按钮

809
00:24:55,276 --> 00:24:58,616
以上这些  就是我对

810
00:24:58,616 --> 00:25:02,186
SceneKit 对焦点交互的

811
00:24:58,616 --> 00:25:02,186
SceneKit 对焦点交互的

812
00:25:02,186 --> 00:25:02,626
支持的一个简单演示

813
00:25:05,516 --> 00:25:09,546
[掌声]

814
00:25:10,046 --> 00:25:11,176
当你在自己的 SceneKit 应用

815
00:25:11,176 --> 00:25:11,996
和游戏里面执行

816
00:25:12,106 --> 00:25:13,356
对焦点交互的支持时

817
00:25:13,356 --> 00:25:14,846
还有其他几件事情 

818
00:25:14,846 --> 00:25:15,346
需要注意

819
00:25:16,776 --> 00:25:18,976
首先 SceneKit 显然是

820
00:25:19,036 --> 00:25:20,626
在三维空间里运行

821
00:25:20,626 --> 00:25:23,106
但焦点交互却是

822
00:25:23,106 --> 00:25:24,516
运行在二维空间

823
00:25:24,516 --> 00:25:25,006
里面

824
00:25:25,386 --> 00:25:26,296
这该怎么办呢？

825
00:25:27,216 --> 00:25:28,846
那么  当一个用户试图

826
00:25:28,846 --> 00:25:30,406
往某个方向移动焦点时

827
00:25:30,766 --> 00:25:31,936
我们就要搜寻下一个  基于这一区域的

828
00:25:32,016 --> 00:25:35,016
可聚焦的 SceneKit 节点

829
00:25:35,016 --> 00:25:38,146
就在这个节点被拖入到屏幕

830
00:25:39,216 --> 00:25:39,386
的时候

831
00:25:39,806 --> 00:25:41,826
其次 既然我们

832
00:25:41,826 --> 00:25:43,496
在 SceneKit 里支持焦点交互

833
00:25:43,966 --> 00:25:45,336
这就意味着我们现在

834
00:25:45,336 --> 00:25:46,946
也能够支持嵌入到

835
00:25:46,946 --> 00:25:48,576
SceneKit 场景之内的

836
00:25:48,576 --> 00:25:50,236
可聚焦的 SpriteKit 场景

837
00:25:51,016 --> 00:25:52,196
实际上 我们自动支持

838
00:25:52,196 --> 00:25:53,736
UIKit SpriteKit 和 SceneKit 对象之间

839
00:25:53,736 --> 00:25:56,206
移动焦点

840
00:25:56,206 --> 00:25:58,116
从大家的角度来说 

841
00:25:58,116 --> 00:25:59,206
也并不需要任何额外的操作

842
00:26:00,086 --> 00:26:01,676
所以你可以使用任何工具

843
00:26:01,676 --> 00:26:03,206
来创建自己的用户界面

844
00:26:03,206 --> 00:26:04,276
把 App 里面的不同区域

845
00:26:04,276 --> 00:26:05,116
发挥最大用场 

846
00:26:05,116 --> 00:26:06,486
而焦点交互支持

847
00:26:06,486 --> 00:26:07,666
完全可以

848
00:26:07,666 --> 00:26:08,546
自动运行

849
00:26:08,746 --> 00:26:10,626
最后  我们在 UIKit 里

850
00:26:10,626 --> 00:26:12,346
使用 UIFocusItem 以及

851
00:26:12,346 --> 00:26:14,116
UIFocusEnvironment 协议界定的

852
00:26:14,116 --> 00:26:16,116
所有焦点 API

853
00:26:16,356 --> 00:26:18,376
它们也都支持 SpriteKit

854
00:26:18,446 --> 00:26:18,806
和 SceneKit

855
00:26:19,486 --> 00:26:20,926
所以  像 Jon 先前刚解释的

856
00:26:20,926 --> 00:26:22,396
那些自定义音效

857
00:26:22,396 --> 00:26:24,136
和动画 API  它们同样也

858
00:26:24,136 --> 00:26:26,266
支持 SceneKit  而且确实

859
00:26:26,266 --> 00:26:27,206
有助于创造一种更好的

860
00:26:27,206 --> 00:26:28,416
浸润式用户体验

861
00:26:29,856 --> 00:26:31,256
要想了解更多有关使用

862
00:26:31,256 --> 00:26:32,856
SceneKit 和 SpriteKit 进行工作的情况

863
00:26:32,856 --> 00:26:34,146
希望大家可以查看一下

864
00:26:34,146 --> 00:26:36,226
我们在本周内

865
00:26:36,226 --> 00:26:39,396
将要陆续举办的相关议程  

866
00:26:40,026 --> 00:26:42,126
接下来  是我们今天的压轴戏

867
00:26:42,846 --> 00:26:44,006
我想谈谈某样东西

868
00:26:44,006 --> 00:26:45,386
它绝对会影响到在座的每个人

869
00:26:45,386 --> 00:26:46,356
那就是调试

870
00:26:46,916 --> 00:26:48,706
我很高兴地告诉大家 我们将在

871
00:26:48,706 --> 00:26:50,436
tvOS 11 里采用某种全新的

872
00:26:50,686 --> 00:26:53,116
聚焦调试工具

873
00:26:53,116 --> 00:26:54,336
我们已经把它加入到 UIKit

874
00:26:54,976 --> 00:26:57,936
首先要说的是  焦点实时

875
00:26:57,936 --> 00:26:58,856
更新日志

876
00:27:00,776 --> 00:27:02,186
当你在自己的 Xcode

877
00:27:02,186 --> 00:27:04,926
方案启动参数里加入

878
00:27:04,926 --> 00:27:06,926
UIFocusLoggingEnabled 选项

879
00:27:06,926 --> 00:27:09,286
你就可以开启

880
00:27:09,286 --> 00:27:10,406
焦点实时更新日志

881
00:27:10,406 --> 00:27:12,456
这样做的真正好处

882
00:27:12,456 --> 00:27:13,616
是对于每一个被日志记录的

883
00:27:13,956 --> 00:27:15,556
程序化聚焦更新来说

884
00:27:15,556 --> 00:27:17,236
我们都会加入

885
00:27:17,236 --> 00:27:19,766
关于首选聚焦环境

886
00:27:19,976 --> 00:27:21,186
检索逻辑的

887
00:27:21,186 --> 00:27:23,106
详细步骤记录

888
00:27:23,106 --> 00:27:24,546
聚焦引擎就是使用这个逻辑

889
00:27:24,546 --> 00:27:26,206
来判断下一个聚焦项

890
00:27:26,426 --> 00:27:27,756
因此这样做的话  对于诊断那些

891
00:27:27,756 --> 00:27:29,886
焦点未能以编码形式

892
00:27:30,116 --> 00:27:31,066
更新到我们希望的状态这种情况

893
00:27:31,066 --> 00:27:32,626
也有非常大的

894
00:27:32,626 --> 00:27:34,246
帮助

895
00:27:34,836 --> 00:27:36,306
因为这些都是日志

896
00:27:36,306 --> 00:27:37,556
可以为你诊断一些问题

897
00:27:37,556 --> 00:27:40,336
比如焦点在 App 启动

898
00:27:40,336 --> 00:27:42,596
和切换时未能更新到

899
00:27:42,596 --> 00:27:43,866
正确的项目里

900
00:27:44,876 --> 00:27:45,926
然而 对于这个工具

901
00:27:45,926 --> 00:27:47,996
有一点需要注意  那就是  

902
00:27:48,226 --> 00:27:49,356
请将这一工具仅限于

903
00:27:49,356 --> 00:27:49,936
调试之用途

904
00:27:50,456 --> 00:27:51,996
随着你在自己的 App 里

905
00:27:51,996 --> 00:27:53,306
添加日志  会产生

906
00:27:53,306 --> 00:27:54,196
不小的性能成本

907
00:27:54,196 --> 00:27:55,626
以致于你在推出物流 App 时

908
00:27:55,626 --> 00:27:56,606
根本不想

909
00:27:56,606 --> 00:27:57,276
启用日志

910
00:27:57,926 --> 00:28:01,856
以上就是聚焦更新日志

911
00:27:57,926 --> 00:28:01,856
以上就是聚焦更新日志

912
00:28:03,656 --> 00:28:04,786
我们今天要展示的

913
00:28:04,786 --> 00:28:05,726
下一个工具是

914
00:28:05,726 --> 00:28:08,016
UIFocusDebugger

915
00:28:08,016 --> 00:28:09,686
这是我们基于 tvOS 11 而发布的

916
00:28:09,686 --> 00:28:10,706
一个新的类

917
00:28:12,326 --> 00:28:14,956
UIFocusDebugger 这个工具是用来

918
00:28:14,956 --> 00:28:16,636
在你的 App 运行时

919
00:28:16,706 --> 00:28:19,926
诊断与焦点有关的问题的

920
00:28:19,926 --> 00:28:20,466
非常酷

921
00:28:20,466 --> 00:28:21,896
它的构造就像是一个

922
00:28:21,896 --> 00:28:23,636
迷你的命令行工具

923
00:28:23,636 --> 00:28:25,346
它就嵌入在 UIKit 里

924
00:28:25,346 --> 00:28:26,156
可供你使用

925
00:28:26,616 --> 00:28:28,196
要利用这个工具 你只需要

926
00:28:28,196 --> 00:28:29,776
在 App 暂停运行时

927
00:28:29,776 --> 00:28:32,596
从 LLDB 里调用它的

928
00:28:32,596 --> 00:28:33,186
任何一个功能

929
00:28:34,086 --> 00:28:35,046
我们来看看

930
00:28:35,046 --> 00:28:35,676
它能做些什么

931
00:28:37,696 --> 00:28:39,276
它最简单的一项功能

932
00:28:39,406 --> 00:28:41,196
是你可以调用 status  让它在任何时候

933
00:28:41,196 --> 00:28:42,226
都能快速给出当前的

934
00:28:42,226 --> 00:28:43,026
聚焦项

935
00:28:43,096 --> 00:28:45,636
这通常是在诊断某些与聚焦相关的问题时

936
00:28:45,636 --> 00:28:47,016
要做的第一步

937
00:28:47,016 --> 00:28:48,816
尤其是当你不清楚

938
00:28:48,986 --> 00:28:50,196
当前聚焦项在哪里

939
00:28:50,196 --> 00:28:52,836
的时候

940
00:28:53,196 --> 00:28:54,686
其次 你可以使用

941
00:28:54,686 --> 00:28:56,336
environment 功能里的模拟聚焦

942
00:28:56,336 --> 00:28:58,256
更新请求  并以此来诊断

943
00:28:58,306 --> 00:28:59,676
与你的 App 首选聚焦逻辑

944
00:28:59,816 --> 00:29:00,846
相关的问题

945
00:28:59,816 --> 00:29:00,846
相关的问题

946
00:29:01,716 --> 00:29:04,106
调用这一功能

947
00:29:04,106 --> 00:29:04,996
类似于调用

948
00:29:05,096 --> 00:29:06,916
setNeedsFocusUpdate API

949
00:29:06,916 --> 00:29:08,546
并在你刚刚导入的这个环境里

950
00:29:08,546 --> 00:29:09,966
执行这一项

951
00:29:09,966 --> 00:29:10,636
焦聚更新

952
00:29:10,636 --> 00:29:13,236
而这一功能的好处

953
00:29:13,236 --> 00:29:14,596
在于它会生成同样的

954
00:29:14,596 --> 00:29:16,846
逐级首选聚焦

955
00:29:16,846 --> 00:29:18,386
环境搜索逻辑

956
00:29:18,386 --> 00:29:19,996
我们在聚焦实时更新日志里

957
00:29:19,996 --> 00:29:20,746
也添加了这个逻辑

958
00:29:21,996 --> 00:29:24,096
但是  如果通过这个模拟方法

959
00:29:24,236 --> 00:29:25,816
你就可以在自己的 App 里

960
00:29:25,816 --> 00:29:26,736
模拟任何一条

961
00:29:26,736 --> 00:29:27,886
聚焦更新  而不必

962
00:29:27,886 --> 00:29:29,256
真的要在你的用户界面里

963
00:29:29,256 --> 00:29:31,786
手动触发聚焦更新

964
00:29:31,956 --> 00:29:33,516
这有助于

965
00:29:33,516 --> 00:29:35,246
在 App 的不同位置

966
00:29:35,246 --> 00:29:36,836
快速诊断不同的

967
00:29:36,886 --> 00:29:37,716
首选聚焦环境问题

968
00:29:42,176 --> 00:29:43,806
就我个人而言  我在

969
00:29:43,806 --> 00:29:46,126
UIFocusDebugger 里最喜欢的工具

970
00:29:46,126 --> 00:29:47,626
是下一个功能 也就是检查项目的

971
00:29:47,626 --> 00:29:47,926
聚焦能力

972
00:29:48,606 --> 00:29:50,106
使用这个功能  可以得到一份列表

973
00:29:50,106 --> 00:29:52,246
罗列出可能导致

974
00:29:52,246 --> 00:29:53,996
项目无法聚焦的

975
00:29:53,996 --> 00:29:54,566
潜在问题

976
00:29:56,256 --> 00:29:57,436
我们都碰到过类似问题

977
00:29:57,436 --> 00:29:58,886
屏幕上出现的某个项

978
00:29:58,886 --> 00:30:01,016
我们希望它可以聚焦

979
00:29:58,886 --> 00:30:01,016
我们希望它可以聚焦

980
00:30:01,016 --> 00:30:02,596
但是由于某些原因

981
00:30:02,596 --> 00:30:03,656
我们又无法对它进行聚焦

982
00:30:03,656 --> 00:30:03,976
而且也不知道原因

983
00:30:04,556 --> 00:30:07,076
事实上  有许多

984
00:30:07,076 --> 00:30:08,826
不同的原因都会导致

985
00:30:08,916 --> 00:30:11,126
某一个项目无法聚焦

986
00:30:11,126 --> 00:30:12,616
这些问题可能不仅在于

987
00:30:12,616 --> 00:30:14,226
这个项本身  而是关系到

988
00:30:14,306 --> 00:30:15,676
这个项目的原始项

989
00:30:15,676 --> 00:30:16,556
这个原始项又影响它的子项

990
00:30:17,736 --> 00:30:18,846
那么  这就是这个全新的

991
00:30:18,846 --> 00:30:20,586
项目聚焦性能功能的

992
00:30:20,826 --> 00:30:21,726
真正亮点

993
00:30:22,226 --> 00:30:24,266
它将会自动为你探测

994
00:30:24,266 --> 00:30:25,856
并诊断所有这些潜在的

995
00:30:25,856 --> 00:30:27,656
问题  并且给出一份 

996
00:30:27,656 --> 00:30:29,186
问题列表

997
00:30:29,216 --> 00:30:31,016
这样一来  就可以为你

998
00:30:31,016 --> 00:30:32,086
节省大量时间

999
00:30:32,086 --> 00:30:34,236
显然 仅凭你自己

1000
00:30:34,236 --> 00:30:36,276
来调查所有这些问题

1001
00:30:36,276 --> 00:30:38,586
会带来极大的时间浪费

1002
00:30:38,746 --> 00:30:42,286
最后我要说的是 像其他所有

1003
00:30:42,286 --> 00:30:43,896
出色的命令行工具一样  你随时都能获得

1004
00:30:43,896 --> 00:30:45,406
UIFocusDebugger 的帮助

1005
00:30:45,406 --> 00:30:47,226
这个工具也会给出

1006
00:30:47,226 --> 00:30:48,576
一张详细的指令列表

1007
00:30:48,576 --> 00:30:50,096
从而罗列出

1008
00:30:50,096 --> 00:30:52,086
每个可用命令的说明

1009
00:30:52,086 --> 00:30:53,216
所以不用担心能否

1010
00:30:53,216 --> 00:30:54,546
马上记住所有这些方法

1011
00:30:54,656 --> 00:30:56,206
因为帮助命令会解决

1012
00:30:56,236 --> 00:30:56,556
你的问题

1013
00:30:58,306 --> 00:31:00,536
不过 向你们展示这个新工具的最好方法

1014
00:30:58,306 --> 00:31:00,536
不过 向你们展示这个新工具的最好方法

1015
00:31:00,536 --> 00:31:01,666
就是简单的演示

1016
00:31:01,666 --> 00:31:01,886
一遍

1017
00:31:11,086 --> 00:31:11,756
好的  现在我正在

1018
00:31:11,756 --> 00:31:12,526
创建一个新的 tvOS 应用

1019
00:31:12,526 --> 00:31:14,156
但是我已经

1020
00:31:14,156 --> 00:31:15,636
遇到一些非常严重的

1021
00:31:15,636 --> 00:31:17,056
有关聚焦的问题

1022
00:31:17,056 --> 00:31:18,736
那么 我们来看看自己能否弄明白

1023
00:31:19,426 --> 00:31:20,186
发生了什么

1024
00:31:20,186 --> 00:31:22,686
我正准备创建并运行我们的

1025
00:31:25,186 --> 00:31:25,486
这个 App

1026
00:31:26,056 --> 00:31:26,886
好了  这就是一个

1027
00:31:26,886 --> 00:31:28,436
简单的 App  

1028
00:31:28,436 --> 00:31:30,156
展示了我最喜欢的电影

1029
00:31:30,156 --> 00:31:31,796
你首先会注意到的可能是

1030
00:31:31,986 --> 00:31:33,186
屏幕上所有的内容都没有 

1031
00:31:33,186 --> 00:31:33,766
聚焦

1032
00:31:33,766 --> 00:31:35,236
事实上 如果我是在遥控器屏幕上轻扫

1033
00:31:35,236 --> 00:31:36,826
或者是尝试用方向键

1034
00:31:36,826 --> 00:31:37,776
在屏幕上四处移动焦点

1035
00:31:37,776 --> 00:31:39,366
都不会出现任何

1036
00:31:39,366 --> 00:31:39,806
聚焦行为

1037
00:31:40,486 --> 00:31:42,646
这就让我很不明白了

1038
00:31:42,646 --> 00:31:44,086
不知道问题究竟出在哪里 我们来

1039
00:31:44,086 --> 00:31:45,466
看看 UIFocusDebugger 能否派上用场 

1040
00:31:45,926 --> 00:31:47,346
我们要回到这个 App

1041
00:31:47,346 --> 00:31:51,546
暂停运行

1042
00:31:51,546 --> 00:31:54,956
这会触发 LLDB

1043
00:31:54,956 --> 00:31:56,356
就像我刚才说过的那样

1044
00:31:56,356 --> 00:31:58,546
应该要检查的是

1045
00:31:58,546 --> 00:31:59,466
当前聚焦系统的状态

1046
00:31:59,466 --> 00:32:00,266
所以我现在要

1047
00:31:59,466 --> 00:32:00,266
所以我现在要

1048
00:32:00,266 --> 00:32:04,756
输入 UIFocusDebugger 的状态

1049
00:32:04,756 --> 00:32:06,536
这些调用要和 Objective-C

1050
00:32:06,536 --> 00:32:07,826
和 Swift 同时运行

1051
00:32:07,826 --> 00:32:11,826
我看到的状态是

1052
00:32:11,826 --> 00:32:13,756
当前已经有一个聚焦项

1053
00:32:13,756 --> 00:32:14,896
它是这些海报单元格里的

1054
00:32:14,896 --> 00:32:15,666
一个

1055
00:32:17,066 --> 00:32:18,516
显然 如果我们查看过后

1056
00:32:18,576 --> 00:32:20,356
发现它没有显示聚焦

1057
00:32:20,356 --> 00:32:21,666
这就说明我们这些单元格的

1058
00:32:21,666 --> 00:32:23,226
视觉外观存在着某种

1059
00:32:23,226 --> 00:32:24,356
潜在的问题

1060
00:32:24,826 --> 00:32:26,516
我们到 Storyboard 上再看看

1061
00:32:26,516 --> 00:32:27,736
能否发现问题

1062
00:32:28,246 --> 00:32:30,926
出在哪里

1063
00:32:31,166 --> 00:32:31,706
好 现在进入了

1064
00:32:31,706 --> 00:32:33,456
我的 Storyboard  让我们

1065
00:32:33,456 --> 00:32:36,646
打开集合视图  可以看到

1066
00:32:36,776 --> 00:32:38,096
我们这个单元格是有模板的

1067
00:32:38,096 --> 00:32:40,256
这个单元格包含了一个图像视图

1068
00:32:40,606 --> 00:32:41,766
我们想达到的效果  

1069
00:32:41,766 --> 00:32:43,056
是在这个单元格被聚焦时

1070
00:32:43,056 --> 00:32:44,726
这个图片视图会升浮到

1071
00:32:44,726 --> 00:32:44,906
用户界面上方

1072
00:32:47,026 --> 00:32:47,986
现在我们来看看这个

1073
00:32:47,986 --> 00:32:49,536
我注意到

1074
00:32:49,536 --> 00:32:51,076
我们先前忘记开启这个

1075
00:32:51,076 --> 00:32:53,036
调节原始聚焦选项了

1076
00:32:53,036 --> 00:32:54,156
制造上浮效果的就是它

1077
00:32:54,156 --> 00:32:56,106
所以 这很可能就是

1078
00:32:56,106 --> 00:32:56,586
问题所在

1079
00:32:56,586 --> 00:32:58,466
我们再次运行这个 App

1080
00:32:58,556 --> 00:32:59,656
看看问题是否已经解决

1081
00:33:06,046 --> 00:33:06,716
漂亮 现在我们就可以在这些

1082
00:33:06,716 --> 00:33:08,676
单元格之间移动了  它清楚地

1083
00:33:08,676 --> 00:33:09,846
显示出哪个单元格目前处于

1084
00:33:09,846 --> 00:33:10,786
聚焦状态

1085
00:33:10,846 --> 00:33:12,506
通过这个上浮效果就能看出来  

1086
00:33:12,506 --> 00:33:13,046
所以现在的视觉效果就变好了

1087
00:33:13,896 --> 00:33:15,166
不过还有另外一个问题

1088
00:33:15,166 --> 00:33:16,446
跟这种配置有关  那就是

1089
00:33:16,446 --> 00:33:18,226
我无法聚焦到

1090
00:33:18,226 --> 00:33:20,656
App 底部的这个

1091
00:33:20,656 --> 00:33:23,476
More Info 按钮

1092
00:33:23,476 --> 00:33:24,236
我真不知道问题出在哪里

1093
00:33:24,236 --> 00:33:25,426
我在这里找不到任何

1094
00:33:25,426 --> 00:33:26,126
解决办法

1095
00:33:26,126 --> 00:33:27,106
所以  我们再次回到 App

1096
00:33:27,106 --> 00:33:28,926
看看能不能

1097
00:33:28,926 --> 00:33:29,816
找到问题所在

1098
00:33:30,476 --> 00:33:32,446
我们现在要打开

1099
00:33:32,446 --> 00:33:34,236
mainViewController

1100
00:33:34,236 --> 00:33:37,006
设置断点  然后再触发

1101
00:33:37,006 --> 00:33:37,616
那个断点

1102
00:33:39,096 --> 00:33:40,096
好  现在是个好机会

1103
00:33:40,096 --> 00:33:41,206
我们来试试这个新的

1104
00:33:41,206 --> 00:33:42,676
检查聚焦能力的方法

1105
00:33:43,376 --> 00:33:44,466
我现在要输入

1106
00:33:46,006 --> 00:33:47,066
P-O UIFocusDebugger

1107
00:33:48,446 --> 00:33:49,536
很好  我们可以全面获得

1108
00:33:49,536 --> 00:33:52,716
自动填充支持 

1109
00:33:52,716 --> 00:33:54,446
我们可以调用这个  然后还需要

1110
00:33:54,446 --> 00:33:55,116
一个 Swift 代码

1111
00:33:56,966 --> 00:33:58,236
我们来检查一下

1112
00:33:58,236 --> 00:33:59,436
More Info 按钮的聚焦能力

1113
00:33:59,436 --> 00:34:02,216
这个按钮我已经让它关联了一个输出口

1114
00:33:59,436 --> 00:34:02,216
这个按钮我已经让它关联了一个输出口

1115
00:34:02,996 --> 00:34:04,506
好的 它检测到一个问题

1116
00:34:04,506 --> 00:34:05,826
它现在告诉我们

1117
00:34:05,826 --> 00:34:07,366
这个项的当前状况是

1118
00:34:07,366 --> 00:34:09,206
视觉上被遮挡住了

1119
00:34:09,206 --> 00:34:10,956
也就是说 它被屏幕上的

1120
00:34:10,956 --> 00:34:11,866
另外某个项遮蔽住了

1121
00:34:12,505 --> 00:34:14,755
它甚至还为我们

1122
00:34:14,916 --> 00:34:16,246
找出某个项的引用参考

1123
00:34:16,246 --> 00:34:18,366
它认为这个项是导致问题的

1124
00:34:18,366 --> 00:34:18,755
原因所在

1125
00:34:19,525 --> 00:34:20,846
我们再回到 Storyboard 上

1126
00:34:21,386 --> 00:34:22,585
看看我们能否找到

1127
00:34:22,585 --> 00:34:22,976
问题出在哪里

1128
00:34:30,016 --> 00:34:30,436
好的  我现在准备打开

1129
00:34:30,466 --> 00:34:30,976
mainViewController

1130
00:34:35,196 --> 00:34:36,076
好  我们的 More Info 按钮

1131
00:34:36,076 --> 00:34:36,525
就在这里

1132
00:34:37,416 --> 00:34:41,356
那么  它说我们被

1133
00:34:41,356 --> 00:34:43,466
某个项进行了视觉遮挡

1134
00:34:43,466 --> 00:34:46,196
但是我明显可以看到

1135
00:34:46,196 --> 00:34:47,755
这个 More Info 按钮就在这里

1136
00:34:47,755 --> 00:34:48,356
那么这到底是怎么回事

1137
00:34:49,545 --> 00:34:50,396
我现在看一下 Storyboard

1138
00:34:50,396 --> 00:34:51,775
我注意到我们这个

1139
00:34:51,775 --> 00:34:53,516
More Info 按钮的

1140
00:34:53,516 --> 00:34:54,636
兄弟视图

1141
00:34:54,636 --> 00:34:57,306
这是一个半透明的白色视图

1142
00:34:57,306 --> 00:34:58,886
我们用它来做

1143
00:34:58,886 --> 00:35:00,546
这个 App 底部展架的背景

1144
00:34:58,886 --> 00:35:00,546
这个 App 底部展架的背景

1145
00:35:02,156 --> 00:35:03,586
我注意到这个视图

1146
00:35:03,586 --> 00:35:05,296
被误放在我们这个

1147
00:35:05,296 --> 00:35:06,246
More Info 按钮的上方

1148
00:35:06,246 --> 00:35:07,396
但是这确实很难看出来

1149
00:35:07,396 --> 00:35:08,926
因为它是半透明的

1150
00:35:09,776 --> 00:35:11,296
所以我们试试把这个视图

1151
00:35:11,296 --> 00:35:13,526
拖到 More Info 按钮的下面

1152
00:35:13,526 --> 00:35:15,116
然后重启这个 App

1153
00:35:15,116 --> 00:35:15,976
看看问题有没有解决

1154
00:35:24,436 --> 00:35:25,476
好  我们再试一次

1155
00:35:32,136 --> 00:35:32,846
把它稍微再放大

1156
00:35:32,846 --> 00:35:33,176
一点点

1157
00:35:34,226 --> 00:35:37,136
OK 现在我可以聚焦到

1158
00:35:37,136 --> 00:35:38,426
这个 More Info 按钮上了

1159
00:35:38,806 --> 00:35:40,046
我们这个 App 的图形效果

1160
00:35:40,046 --> 00:35:41,806
变好了  现在我们可以

1161
00:35:41,806 --> 00:35:43,356
转到更重要的

1162
00:35:43,356 --> 00:35:45,166
事情上面  那就是创建我们的

1163
00:35:45,166 --> 00:35:45,676
新功能

1164
00:35:45,966 --> 00:35:47,476
我们现在回到这个

1165
00:35:47,476 --> 00:35:47,976
展示画面

1166
00:35:48,516 --> 00:35:52,666
[掌声]

1167
00:35:53,166 --> 00:35:54,696
刚刚只是简单示范了一下

1168
00:35:54,696 --> 00:35:56,466
UIFocusDebugger 是如何帮助我们

1169
00:35:56,496 --> 00:35:58,256
识别这类简单

1170
00:35:58,256 --> 00:35:59,756
而且可以轻松解决的错误

1171
00:35:59,756 --> 00:36:01,636
但这样多少也会

1172
00:35:59,756 --> 00:36:01,636
但这样多少也会

1173
00:36:02,076 --> 00:36:03,666
在 App 的开发过程中

1174
00:36:03,666 --> 00:36:04,966
浪费我们许多时间

1175
00:36:04,966 --> 00:36:06,016
因为我们要把这些问题追踪到底

1176
00:36:08,126 --> 00:36:09,976
这就是基于 tvOS 11 的

1177
00:36:09,976 --> 00:36:10,846
聚焦调试

1178
00:36:12,526 --> 00:36:13,846
简单概括一下我们今天的会议

1179
00:36:16,326 --> 00:36:17,666
请好好利用这些

1180
00:36:17,666 --> 00:36:19,886
全新的聚焦更新通知和

1181
00:36:19,886 --> 00:36:21,196
协议扩展功能

1182
00:36:21,196 --> 00:36:23,246
我们把它们添加到 tvOS 11  是为了

1183
00:36:23,246 --> 00:36:25,126
用更少的代码去完成

1184
00:36:25,276 --> 00:36:26,006
常规任务

1185
00:36:28,176 --> 00:36:29,556
你可以使用新的动画 API 和

1186
00:36:29,556 --> 00:36:32,116
自定义音效 API

1187
00:36:32,116 --> 00:36:33,656
Jon 刚在本次议程里

1188
00:36:33,656 --> 00:36:35,136
谈到过它们

1189
00:36:35,136 --> 00:36:36,736
它们可以为你的 App 和游戏提供

1190
00:36:36,986 --> 00:36:38,646
更好的浸润式

1191
00:36:38,646 --> 00:36:39,106
体验

1192
00:36:40,796 --> 00:36:41,786
大家一定要试试

1193
00:36:41,786 --> 00:36:43,026
SceneKit 里全新的

1194
00:36:43,116 --> 00:36:43,626
焦点交互支持

1195
00:36:43,816 --> 00:36:45,306
这是一个非常棒的工具

1196
00:36:45,306 --> 00:36:46,956
可以为你的 SceneKit 游戏增加

1197
00:36:46,956 --> 00:36:47,356
交互性

1198
00:36:48,696 --> 00:36:50,576
最后  使用全新的

1199
00:36:50,576 --> 00:36:52,006
聚焦调试工具  可以给自己

1200
00:36:52,006 --> 00:36:53,306
节省大量的时间

1201
00:36:55,586 --> 00:36:56,696
关于今天会议的更多信息

1202
00:36:56,696 --> 00:36:57,526
大家可以登录

1203
00:36:57,526 --> 00:36:58,816
developer.apple.com 查看

1204
00:37:00,246 --> 00:37:01,546
如果你有兴趣

1205
00:37:01,546 --> 00:37:03,046
深入学习 tvOS 开发

1206
00:37:03,046 --> 00:37:04,056
可以查看我们在本周

1207
00:37:04,056 --> 00:37:05,176
将陆续推出的

1208
00:37:05,176 --> 00:37:05,756
相关会议

1209
00:37:06,386 --> 00:37:06,976
非常感谢
