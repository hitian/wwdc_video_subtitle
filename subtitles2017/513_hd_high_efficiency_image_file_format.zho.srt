1
00:00:18,136 --> 00:00:19,666
&gt;&gt; 大家好 欢迎大家

2
00:00:19,666 --> 00:00:20,316
来到 513 号会议

3
00:00:20,916 --> 00:00:22,116
本场会议中 你们将了解到

4
00:00:22,116 --> 00:00:24,176
全新的高效率图像文件格式 即 HEIF

5
00:00:24,176 --> 00:00:25,846
中的一些底层细节

6
00:00:25,846 --> 00:00:28,626
同时还会了解到

7
00:00:28,626 --> 00:00:30,066
这种全新的文件格式

8
00:00:30,066 --> 00:00:31,776
带来的诸多好处

9
00:00:32,606 --> 00:00:34,166
我是 Davide Concion

10
00:00:34,166 --> 00:00:35,416
在 Apple 负责管理

11
00:00:35,416 --> 00:00:37,446
图像压缩团队

12
00:00:38,286 --> 00:00:39,916
本次会议中 我们会简要介绍

13
00:00:39,916 --> 00:00:41,786
目前图像压缩

14
00:00:41,786 --> 00:00:43,386
使用的事实标准

15
00:00:43,866 --> 00:00:45,096
也就是大家所熟知的

16
00:00:45,096 --> 00:00:46,396
JPEG 格式

17
00:00:46,856 --> 00:00:48,356
我们还会介绍

18
00:00:48,356 --> 00:00:49,606
在 Apple 看来 一种新的

19
00:00:49,606 --> 00:00:51,486
图像格式应当满足

20
00:00:51,486 --> 00:00:52,526
哪些需求

21
00:00:53,886 --> 00:00:55,786
还会解释 为什么我们认为

22
00:00:55,786 --> 00:00:57,346
HEIF 满足这些需求

23
00:00:57,346 --> 00:00:59,236
同时还会介绍

24
00:00:59,236 --> 00:01:00,876
HEIF 所采用的

25
00:00:59,236 --> 00:01:00,876
HEIF 所采用的

26
00:01:01,306 --> 00:01:02,346
一些功能灵活的工具

27
00:01:02,716 --> 00:01:05,606
这之后 我们会介绍

28
00:01:05,606 --> 00:01:08,156
为什么 Apple 认为

29
00:01:08,156 --> 00:01:09,926
HEIF 格式应当

30
00:01:09,926 --> 00:01:11,066
采用 HEVC 编解码器

31
00:01:11,996 --> 00:01:13,826
我们先来谈谈 JPEG

32
00:01:15,036 --> 00:01:17,306
JPEG 仍是最流行的

33
00:01:17,306 --> 00:01:18,976
图像压缩技术

34
00:01:18,976 --> 00:01:21,276
可以用于网页上的图片

35
00:01:21,826 --> 00:01:23,206
也可以用于消费级

36
00:01:23,206 --> 00:01:25,416
电子产品 例如数码单反相机

37
00:01:25,416 --> 00:01:27,246
傻瓜相机

38
00:01:27,246 --> 00:01:27,906
和手机

39
00:01:28,706 --> 00:01:30,536
云服务也使用 JPEG

40
00:01:30,536 --> 00:01:31,606
因为它的兼容性

41
00:01:31,606 --> 00:01:32,146
十分强大

42
00:01:33,686 --> 00:01:34,876
但 JPEG 也有很多局限

43
00:01:34,876 --> 00:01:37,556
其中之一就是

44
00:01:37,556 --> 00:01:38,596
压缩效率较低

45
00:01:39,156 --> 00:01:40,346
过去几年 人们开发了

46
00:01:40,346 --> 00:01:42,246
一些新的压缩算法

47
00:01:42,246 --> 00:01:44,266
可以实现比 JPEG

48
00:01:44,266 --> 00:01:45,706
更高的压缩率

49
00:01:45,706 --> 00:01:47,786
同时还能保持

50
00:01:47,786 --> 00:01:49,356
图像的画质和观感

51
00:01:49,356 --> 00:01:49,876
没有大的变化

52
00:01:51,046 --> 00:01:53,376
而辅助图像 例如透明度

53
00:01:53,376 --> 00:01:55,596
和深度则很难得到 JPEG 支持

54
00:01:56,666 --> 00:01:59,406
并且 近年来也开发了

55
00:01:59,406 --> 00:02:01,346
很多呈现和显示

56
00:01:59,406 --> 00:02:01,346
很多呈现和显示

57
00:02:01,346 --> 00:02:02,876
动态图像的方法

58
00:02:03,386 --> 00:02:05,516
Apple 的 Live Photo 便是其中之一

59
00:02:06,106 --> 00:02:07,786
不幸的是 JPEG

60
00:02:07,786 --> 00:02:08,786
并不支持动态图像

61
00:02:09,306 --> 00:02:13,156
我们看一下 JPEG 和 ITU/MPEG

62
00:02:13,156 --> 00:02:14,706
所提出的压缩标准的

63
00:02:14,756 --> 00:02:17,846
历史沿革

64
00:02:19,206 --> 00:02:20,886
JPEG 在当初

65
00:02:20,886 --> 00:02:22,666
确实成果显著

66
00:02:22,666 --> 00:02:24,116
尤其是在压缩效率方面

67
00:02:24,116 --> 00:02:25,636
即便与现在相比

68
00:02:25,636 --> 00:02:26,546
进步也相当显著

69
00:02:27,316 --> 00:02:28,526
如幻灯片所示

70
00:02:29,046 --> 00:02:30,636
JPEG 最终定型

71
00:02:30,636 --> 00:02:33,636
成为标准 是在 1992 年

72
00:02:33,636 --> 00:02:34,376
已经是 25 年前了

73
00:02:36,136 --> 00:02:37,526
自那之后

74
00:02:37,526 --> 00:02:38,886
人们提出了一些

75
00:02:38,886 --> 00:02:39,296
新的压缩标准

76
00:02:40,136 --> 00:02:42,396
最新提出的标准

77
00:02:43,126 --> 00:02:43,256
是 HEVC

78
00:02:43,896 --> 00:02:45,816
作为比较 这是 HEIF

79
00:02:45,816 --> 00:02:47,216
在时间线上的位置

80
00:02:47,216 --> 00:02:51,646
它于 2015 年定型

81
00:02:51,916 --> 00:02:54,256
Apple 花了大量时间

82
00:02:54,256 --> 00:02:56,376
寻找接替 JPEG 的标准

83
00:02:56,376 --> 00:02:57,926
也评估了很多选择

84
00:02:58,446 --> 00:03:00,106
我们的需求十分广泛

85
00:02:58,446 --> 00:03:00,106
我们的需求十分广泛

86
00:03:00,546 --> 00:03:02,486
新的文件格式要能支持

87
00:03:02,486 --> 00:03:03,956
JPEG 现有的所有功能

88
00:03:03,956 --> 00:03:06,176
但与此同时

89
00:03:06,176 --> 00:03:07,546
性能表现要更为出色

90
00:03:08,026 --> 00:03:09,656
不仅要兼容

91
00:03:09,656 --> 00:03:11,406
专业摄影工具

92
00:03:11,406 --> 00:03:13,176
还要兼容网页和云

93
00:03:13,596 --> 00:03:16,196
新格式还要具备

94
00:03:16,196 --> 00:03:18,796
高度灵活性和可扩展性

95
00:03:18,796 --> 00:03:19,796
来适应日新月异的

96
00:03:19,796 --> 00:03:21,136
摄影生态环境

97
00:03:21,136 --> 00:03:24,836
这张表列举了 Apple 认为

98
00:03:24,836 --> 00:03:26,846
是重中之重的一些特性

99
00:03:27,476 --> 00:03:29,866
压缩要达到顶尖水平

100
00:03:29,866 --> 00:03:32,176
无论是有损压缩

101
00:03:32,176 --> 00:03:32,926
还是无损压缩

102
00:03:33,136 --> 00:03:35,816
它既要能应对

103
00:03:35,816 --> 00:03:38,486
图像文件 也要能压缩

104
00:03:38,486 --> 00:03:41,456
文本和图形

105
00:03:42,006 --> 00:03:45,286
这种格式要适用于

106
00:03:45,286 --> 00:03:46,876
现代 CPU GPU 和 ESP

107
00:03:46,876 --> 00:03:49,386
具有的硬件加速

108
00:03:49,476 --> 00:03:51,896
和编解码过程

109
00:03:52,696 --> 00:03:54,356
性能和表现

110
00:03:54,356 --> 00:03:55,356
在我们的要求中

111
00:03:55,426 --> 00:03:56,166
权重是相当大的

112
00:03:56,776 --> 00:04:00,696
它还要支持高深度

113
00:03:56,776 --> 00:04:00,696
它还要支持高深度

114
00:04:01,006 --> 00:04:03,176
和广色域这些

115
00:04:03,176 --> 00:04:05,376
消费级设备拍摄的照片上

116
00:04:05,376 --> 00:04:07,206
最先进的技术

117
00:04:08,466 --> 00:04:09,746
要能够压缩

118
00:04:09,746 --> 00:04:13,266
4:4:4 的色彩采样

119
00:04:13,266 --> 00:04:16,656
也要能描述 HDR 内容

120
00:04:16,656 --> 00:04:19,226
包括 HDR 元数据 传递函数

121
00:04:19,435 --> 00:04:20,976
和色彩空间定义

122
00:04:22,886 --> 00:04:25,186
至于辅助图像

123
00:04:25,186 --> 00:04:28,006
例如透明度和深度

124
00:04:28,066 --> 00:04:30,206
也需要在图像文件中

125
00:04:30,206 --> 00:04:30,756
有通用的定义空间

126
00:04:31,556 --> 00:04:33,436
新的编辑工具才能

127
00:04:33,436 --> 00:04:35,266
应用辅助数据来

128
00:04:35,266 --> 00:04:36,956
提供全新的呈现

129
00:04:36,956 --> 00:04:37,796
和编辑体验

130
00:04:38,396 --> 00:04:41,416
近几年 人们也开发了

131
00:04:41,416 --> 00:04:42,816
新的方式来呈现

132
00:04:42,816 --> 00:04:44,006
和显示动态图像

133
00:04:44,406 --> 00:04:46,046
Apple 推出的 iPhoto 便是其中一例

134
00:04:46,706 --> 00:04:48,556
iPhoto 既能呈现

135
00:04:48,556 --> 00:04:50,426
动态内容 也能呈现

136
00:04:50,426 --> 00:04:50,926
静态图像

137
00:04:52,006 --> 00:04:54,046
新的通用格式要

138
00:04:54,046 --> 00:04:55,416
能够高效存储

139
00:04:55,416 --> 00:04:57,416
动态图像信息 理想状态下

140
00:04:57,416 --> 00:04:58,826
要使用帧间压缩技术

141
00:04:59,216 --> 00:05:01,246
还要能指导播放器

142
00:04:59,216 --> 00:05:01,246
还要能指导播放器

143
00:05:01,246 --> 00:05:02,946
进行呈现

144
00:05:03,136 --> 00:05:05,046
例如 呈现循环的序列

145
00:05:06,116 --> 00:05:08,536
新格式还应该

146
00:05:08,536 --> 00:05:10,126
支持同一文件内

147
00:05:10,126 --> 00:05:10,716
存储多个图像

148
00:05:11,006 --> 00:05:14,046
例如一组多重曝光的图像

149
00:05:14,046 --> 00:05:15,756
或是立体图像

150
00:05:16,556 --> 00:05:18,416
这样便可以

151
00:05:18,416 --> 00:05:19,676
为开发和应用

152
00:05:19,676 --> 00:05:20,926
新的计算摄影算法

153
00:05:20,926 --> 00:05:21,656
提供帮助

154
00:05:23,596 --> 00:05:26,216
以多种方式呈现

155
00:05:26,216 --> 00:05:27,326
同一图像文件的功能

156
00:05:27,326 --> 00:05:29,036
也非常重要

157
00:05:29,676 --> 00:05:31,526
例如 多分辨率呈现

158
00:05:31,526 --> 00:05:32,876
这涉及到不断地

159
00:05:32,876 --> 00:05:35,366
增加细节层次

160
00:05:35,366 --> 00:05:36,526
或是能够呈现

161
00:05:36,526 --> 00:05:37,936
由不同编解码器

162
00:05:37,936 --> 00:05:38,846
编码的同一图像

163
00:05:40,216 --> 00:05:43,006
图块也是新格式

164
00:05:43,006 --> 00:05:44,636
必须采用的一项功能

165
00:05:45,606 --> 00:05:47,596
这样便可以对任意大小的图片

166
00:05:47,596 --> 00:05:49,106
采取可缩放的操作

167
00:05:49,446 --> 00:05:50,916
图块相关的内容

168
00:05:50,916 --> 00:05:52,266
会在稍后提到

169
00:05:53,366 --> 00:05:56,836
新格式还要支持

170
00:05:56,836 --> 00:05:59,206
文件中每个图像

171
00:05:59,206 --> 00:06:00,086
相关的丰富元数据

172
00:05:59,206 --> 00:06:00,086
相关的丰富元数据

173
00:06:00,306 --> 00:06:02,896
同时也要支持时间数据

174
00:06:03,186 --> 00:06:04,836
例如 一组照片序列

175
00:06:04,886 --> 00:06:05,456
包含的时间数据

176
00:06:06,596 --> 00:06:08,726
新格式还需要

177
00:06:08,726 --> 00:06:09,996
能够包含

178
00:06:09,996 --> 00:06:12,026
其他种类的元数据

179
00:06:12,026 --> 00:06:13,646
例如音频或文本

180
00:06:13,916 --> 00:06:17,336
最后一点 新格式

181
00:06:17,336 --> 00:06:19,016
要有灵活性和可扩展性

182
00:06:19,016 --> 00:06:20,876
为未来开发和应用

183
00:06:20,876 --> 00:06:22,686
打下坚实基础

184
00:06:23,276 --> 00:06:28,396
我们相信

185
00:06:28,396 --> 00:06:29,856
HEIF 能够满足

186
00:06:29,856 --> 00:06:30,586
以上所有需求

187
00:06:32,406 --> 00:06:33,076
什么是 HEIF

188
00:06:33,966 --> 00:06:36,176
HEIF 是 高效图像文件

189
00:06:36,176 --> 00:06:37,446
的英文缩写

190
00:06:39,016 --> 00:06:41,176
第一版技术参数

191
00:06:41,176 --> 00:06:44,846
与 2015 年六月成为 ISO 标准

192
00:06:46,426 --> 00:06:48,286
第二版也会

193
00:06:48,286 --> 00:06:49,236
迅速面世

194
00:06:49,826 --> 00:06:53,366
HEIF 的 C 类参考样板

195
00:06:53,366 --> 00:06:55,236
已经公布 可以通过

196
00:06:55,236 --> 00:06:55,556
访问这个链接获得

197
00:06:56,366 --> 00:06:57,696
参考样板可以

198
00:06:57,696 --> 00:06:59,256
指导 HEIF 的应用

199
00:06:59,256 --> 00:07:01,546
也能帮助了解

200
00:06:59,256 --> 00:07:01,546
也能帮助了解

201
00:07:01,546 --> 00:07:02,666
相关技术参数

202
00:07:03,196 --> 00:07:05,976
顺便一提 开源项目

203
00:07:05,976 --> 00:07:10,036
GPAC/MP4Box 已于最近

204
00:07:10,036 --> 00:07:11,586
针对 C 类文件

205
00:07:11,586 --> 00:07:12,676
提供了基本功能

206
00:07:13,256 --> 00:07:17,756
视频行业很久以前

207
00:07:17,756 --> 00:07:19,486
就认识到 容器

208
00:07:19,486 --> 00:07:22,036
和编解码器是不同的实体

209
00:07:22,036 --> 00:07:23,586
将二者分开

210
00:07:23,586 --> 00:07:24,826
有很多好处

211
00:07:25,436 --> 00:07:27,196
但图像行业过去认为

212
00:07:27,196 --> 00:07:29,426
容器和编解码器

213
00:07:29,476 --> 00:07:31,246
应当紧密结合

214
00:07:31,246 --> 00:07:31,776
JPEG 也不例外

215
00:07:32,546 --> 00:07:33,686
图像行业也要做出这样的区分

216
00:07:33,686 --> 00:07:35,686
这合情合理

217
00:07:36,266 --> 00:07:37,996
因为这样才能

218
00:07:37,996 --> 00:07:38,806
最大化灵活性

219
00:07:38,806 --> 00:07:40,996
这正是 HEIF 所做的

220
00:07:40,996 --> 00:07:42,836
它指定了一种结构格式

221
00:07:42,996 --> 00:07:45,546
可以成为单张图像的容器

222
00:07:45,546 --> 00:07:47,316
也能用于图像序列

223
00:07:48,706 --> 00:07:50,596
它的基础是广泛应用的

224
00:07:50,596 --> 00:07:53,996
ISO 基本媒体文件格式

225
00:07:54,396 --> 00:07:55,676
这种格式又基于

226
00:07:55,676 --> 00:07:56,906
Apple 的 QuickTime 技术

227
00:07:58,016 --> 00:07:59,736
它还应用并改进了

228
00:07:59,736 --> 00:08:01,616
在 MP4 的技术参数

229
00:07:59,736 --> 00:08:01,616
在 MP4 的技术参数

230
00:08:01,616 --> 00:08:04,576
和 MPEG-21 的技术参数中

231
00:08:04,576 --> 00:08:05,556
指定的结构

232
00:08:06,316 --> 00:08:08,676
各种序列 例如连拍快照和动画

233
00:08:08,676 --> 00:08:10,996
是以轨道

234
00:08:11,176 --> 00:08:13,646
或基于时间的媒体存储的 类似 MP4 标准

235
00:08:14,616 --> 00:08:17,446
编码图像和衍生图像

236
00:08:17,446 --> 00:08:20,026
则以项目的形式存储 类似 MPEG-21 标准

237
00:08:20,556 --> 00:08:23,826
任何压缩编解码器

238
00:08:23,826 --> 00:08:25,166
都能包含在 HEIF 容器中

239
00:08:25,956 --> 00:08:27,116
HEIF 的技术参数中

240
00:08:27,146 --> 00:08:31,176
直接提及了 HEVC H.264

241
00:08:31,366 --> 00:08:32,686
和 JPEG 的扩展名

242
00:08:32,686 --> 00:08:34,746
主类

243
00:08:35,076 --> 00:08:36,586
以及解码器配置

244
00:08:38,096 --> 00:08:39,746
HEIF 文件的基本构成部分

245
00:08:39,746 --> 00:08:42,126
类似 ISO 基本媒体文件格式

246
00:08:42,126 --> 00:08:43,785
这种数据格式

247
00:08:43,785 --> 00:08:45,166
称为框

248
00:08:45,646 --> 00:08:47,736
框由一个

249
00:08:47,736 --> 00:08:49,586
四个字符的类构成

250
00:08:49,586 --> 00:08:51,316
比如在右边的例子中

251
00:08:51,316 --> 00:08:54,856
有 ftyp 框

252
00:08:54,856 --> 00:08:57,126
元框和 mdat 框

253
00:08:58,216 --> 00:08:59,736
框的大小由

254
00:08:59,736 --> 00:09:01,826
框的字节数和载荷

255
00:08:59,736 --> 00:09:01,826
框的字节数和载荷

256
00:09:01,826 --> 00:09:02,206
所决定

257
00:09:02,786 --> 00:09:06,246
元框完整描述了

258
00:09:06,246 --> 00:09:08,306
这一文件内

259
00:09:08,306 --> 00:09:08,806
包含的全部内容

260
00:09:09,036 --> 00:09:11,446
元框的处理器类型

261
00:09:11,596 --> 00:09:15,036
如果有人熟悉 ISO 基本媒体文件格式的话

262
00:09:15,766 --> 00:09:19,296
应该清楚 元框的处理器类型

263
00:09:19,806 --> 00:09:22,856
是 PICT  读取器便理解为

264
00:09:22,856 --> 00:09:25,126
这个元框处理的是图像

265
00:09:25,736 --> 00:09:29,656
在深入探讨 HEIF 文件

266
00:09:29,686 --> 00:09:32,136
的结构之前 先来谈谈

267
00:09:32,136 --> 00:09:32,826
文件的扩展名

268
00:09:34,156 --> 00:09:36,666
标准明确规定

269
00:09:36,666 --> 00:09:38,376
HEIF 文件的扩展名

270
00:09:38,376 --> 00:09:40,156
依压缩单张图片

271
00:09:40,186 --> 00:09:41,996
或图片序列

272
00:09:42,056 --> 00:09:43,666
的编解码器而定

273
00:09:44,326 --> 00:09:45,766
所有可能的扩展名

274
00:09:45,766 --> 00:09:47,506
都能在这张表中找到

275
00:09:48,126 --> 00:09:51,716
iOS 11 可以拍摄并存储

276
00:09:51,716 --> 00:09:54,136
HEIF 图像 使用的

277
00:09:54,336 --> 00:09:54,746
是 HEVC 编解码器

278
00:09:55,556 --> 00:09:57,346
因此 你们经常遇到的扩展名

279
00:09:57,346 --> 00:09:59,546
会是 .HEIC

280
00:10:00,936 --> 00:10:04,926
在 iOS 11 和 macOS 10.13 中

281
00:10:04,926 --> 00:10:07,296
我们支持全部三种

282
00:10:07,296 --> 00:10:09,596
HEIF 文件的解码

283
00:10:09,596 --> 00:10:10,096
以及显示

284
00:10:11,066 --> 00:10:13,976
请注意 如果 HEIF 文件

285
00:10:13,976 --> 00:10:16,506
包含序列 那么

286
00:10:16,506 --> 00:10:18,496
它的扩展名

287
00:10:18,896 --> 00:10:20,806
会与只包含单张图像

288
00:10:20,806 --> 00:10:21,346
的 HEIF 文件有所不同

289
00:10:21,916 --> 00:10:26,946
我们现在就来详细了解

290
00:10:26,946 --> 00:10:28,556
HEIF 文件及其结构

291
00:10:29,126 --> 00:10:33,266
首先先来谈谈

292
00:10:33,436 --> 00:10:33,866
项这个概念

293
00:10:36,056 --> 00:10:38,446
HEIF 文件中 每一个元素

294
00:10:38,446 --> 00:10:39,006
就是一个项

295
00:10:40,186 --> 00:10:42,616
项包括编码项

296
00:10:42,616 --> 00:10:45,036
如 HEVC 编码的帧

297
00:10:45,036 --> 00:10:45,656
或图块

298
00:10:46,996 --> 00:10:49,286
还有派生项

299
00:10:49,286 --> 00:10:51,206
如图像叠加

300
00:10:51,206 --> 00:10:51,866
或图像栅格

301
00:10:53,426 --> 00:10:55,556
也有元数据项

302
00:10:55,556 --> 00:10:59,016
例如 EXIF XMP 或 MPEG-7

303
00:10:59,016 --> 00:10:59,576
的元数据

304
00:11:00,226 --> 00:11:03,056
每个项也有

305
00:11:03,056 --> 00:11:06,216
与之相关联的

306
00:11:06,766 --> 00:11:06,846
几个属性

307
00:11:07,166 --> 00:11:09,266
由此 一切联系都通过

308
00:11:09,266 --> 00:11:11,806
将项与其他项或属性

309
00:11:11,806 --> 00:11:13,506
相互连接的结构

310
00:11:13,506 --> 00:11:14,176
来实现

311
00:11:16,816 --> 00:11:19,076
图像也是项

312
00:11:19,076 --> 00:11:20,846
又因为多张图片

313
00:11:20,846 --> 00:11:22,896
能存储在一个文件内

314
00:11:22,896 --> 00:11:24,786
HEIF 标准通过

315
00:11:24,786 --> 00:11:26,596
分配不同角色将其区分

316
00:11:26,596 --> 00:11:30,036
HEIF 标准规定了一些角色

317
00:11:30,036 --> 00:11:32,816
这些角色都能在

318
00:11:32,816 --> 00:11:33,186
这张表中找到

319
00:11:33,986 --> 00:11:36,456
主图像 或称封面图像

320
00:11:36,486 --> 00:11:38,216
是一个文件的

321
00:11:38,216 --> 00:11:38,576
代表图像

322
00:11:39,596 --> 00:11:40,986
主图像应当在

323
00:11:40,986 --> 00:11:42,526
播放器无法获取

324
00:11:42,526 --> 00:11:44,466
或解码其他信息

325
00:11:44,466 --> 00:11:45,646
的时候显示

326
00:11:46,456 --> 00:11:48,966
一个 HEIF 文件

327
00:11:48,966 --> 00:11:51,746
只能存在一个主图像

328
00:11:51,956 --> 00:11:53,656
HEIF 文件中

329
00:11:53,656 --> 00:11:55,866
其他的原分辨率图像

330
00:11:56,146 --> 00:11:56,686
称为原图像

331
00:11:57,996 --> 00:11:59,636
文件的缩略图

332
00:11:59,636 --> 00:12:01,166
即是低分辨率的

333
00:11:59,636 --> 00:12:01,166
即是低分辨率的

334
00:12:01,166 --> 00:12:01,856
原图像

335
00:12:02,456 --> 00:12:04,336
一个 HEIF 文件

336
00:12:04,336 --> 00:12:06,296
可以存储多个

337
00:12:06,296 --> 00:12:07,346
不同尺寸的缩略图

338
00:12:08,276 --> 00:12:10,306
这对超高分辨率图像的

339
00:12:10,306 --> 00:12:11,976
渐进解码

340
00:12:11,976 --> 00:12:13,796
以及显示

341
00:12:13,796 --> 00:12:14,296
大有帮助

342
00:12:14,856 --> 00:12:18,106
辅助图像是指

343
00:12:18,106 --> 00:12:20,046
补充原图像的图像

344
00:12:20,576 --> 00:12:22,426
例如透明度层

345
00:12:22,426 --> 00:12:23,046
或深度映射

346
00:12:23,826 --> 00:12:25,906
辅助图像可以在

347
00:12:25,906 --> 00:12:28,086
辅助显示原图像

348
00:12:28,086 --> 00:12:29,886
但一般不显示

349
00:12:30,396 --> 00:12:32,536
隐藏图像是指

350
00:12:32,536 --> 00:12:33,676
永远不应显示的图像

351
00:12:33,866 --> 00:12:36,326
它可以在文件中

352
00:12:36,486 --> 00:12:38,786
以输入图像

353
00:12:38,786 --> 00:12:39,976
或派生图像的形式存在

354
00:12:40,676 --> 00:12:43,506
iOS 11 对 HEIF 的应用中

355
00:12:43,506 --> 00:12:45,386
大量使用了隐藏图像

356
00:12:45,386 --> 00:12:46,336
称为图块

357
00:12:47,056 --> 00:12:49,316
每个图块都用来

358
00:12:49,316 --> 00:12:51,876
显示最终的原图像或成品图像

359
00:12:52,486 --> 00:12:55,746
派生图像

360
00:12:55,746 --> 00:12:58,456
是指对特定输入图像

361
00:12:58,456 --> 00:13:01,016
进行特定操作

362
00:12:58,456 --> 00:13:01,016
进行特定操作

363
00:13:01,016 --> 00:13:02,166
渲染得到的结果

364
00:13:02,416 --> 00:13:04,026
例如 此前提到的

365
00:13:04,026 --> 00:13:06,056
成品图像便是

366
00:13:06,056 --> 00:13:07,476
拼接不同图块后

367
00:13:07,476 --> 00:13:08,436
渲染得到的

368
00:13:09,816 --> 00:13:11,496
等价图像是指

369
00:13:11,646 --> 00:13:13,526
可用于替换的图像

370
00:13:13,526 --> 00:13:15,186
可以用不同的编解码器编码得到

371
00:13:15,896 --> 00:13:17,456
服务器可以将

372
00:13:17,456 --> 00:13:19,416
相同的输入内容

373
00:13:19,416 --> 00:13:20,936
分发给解码能力不同的

374
00:13:20,936 --> 00:13:21,666
播放器

375
00:13:22,156 --> 00:13:26,326
一旦每张图片

376
00:13:26,326 --> 00:13:28,886
都有了对应的角色

377
00:13:28,886 --> 00:13:29,946
便可赋予其相关联的属性

378
00:13:30,956 --> 00:13:32,016
属性可以是描述性的

379
00:13:32,016 --> 00:13:34,016
也可以是编辑性的

380
00:13:34,726 --> 00:13:36,416
可以是必需的

381
00:13:36,416 --> 00:13:37,836
例如编解码器的

382
00:13:37,836 --> 00:13:39,536
初始化信息

383
00:13:39,536 --> 00:13:40,316
也可以是非必需的

384
00:13:40,876 --> 00:13:43,246
这张表列举了了

385
00:13:43,246 --> 00:13:44,386
HEIF 文件中

386
00:13:44,386 --> 00:13:46,456
图像具有的

387
00:13:46,456 --> 00:13:47,946
部分描述性属性

388
00:13:48,786 --> 00:13:50,026
这里可以找到

389
00:13:50,026 --> 00:13:51,276
最常见的一些信息

390
00:13:51,276 --> 00:13:53,366
例如图像尺寸

391
00:13:53,366 --> 00:13:55,636
颜色信息

392
00:13:55,636 --> 00:13:57,636
辅助图像

393
00:13:57,636 --> 00:14:00,046
如透明度和深度 还有

394
00:13:57,636 --> 00:14:00,046
如透明度和深度 还有

395
00:14:00,046 --> 00:14:01,556
编解码器初始化的

396
00:14:01,556 --> 00:14:02,726
一些配置参数

397
00:14:03,296 --> 00:14:05,926
这张表中

398
00:14:05,926 --> 00:14:06,866
则列举了部分

399
00:14:06,866 --> 00:14:08,346
编辑性属性

400
00:14:09,036 --> 00:14:10,546
这些属性

401
00:14:10,816 --> 00:14:11,926
能够告诉 HEIF 分析器

402
00:14:12,176 --> 00:14:15,936
图像需要经过

403
00:14:15,936 --> 00:14:17,836
一些额外修改

404
00:14:17,836 --> 00:14:18,346
才能最终显示

405
00:14:18,956 --> 00:14:20,856
例如 清除光圈

406
00:14:20,856 --> 00:14:23,116
这一属性会告诉 HEIF 读取器

407
00:14:23,596 --> 00:14:26,916
必须先裁剪图像

408
00:14:26,916 --> 00:14:28,936
再对图像进行

409
00:14:28,936 --> 00:14:29,686
最后渲染

410
00:14:30,256 --> 00:14:34,126
每张图像的所有属性

411
00:14:34,126 --> 00:14:36,436
都包括在同一个

412
00:14:36,436 --> 00:14:38,256
名为属性框的项目中

413
00:14:39,366 --> 00:14:41,686
借此 每张图片

414
00:14:41,686 --> 00:14:43,746
都可以通过属性框

415
00:14:43,746 --> 00:14:45,106
来关联属性

416
00:14:45,846 --> 00:14:47,916
我们会用一个例子

417
00:14:47,916 --> 00:14:49,726
来描述关联属性

418
00:14:49,726 --> 00:14:50,096
是如何工作的

419
00:14:51,526 --> 00:14:53,726
左边的 HEIF 容器

420
00:14:53,726 --> 00:14:56,266
表示这个文件

421
00:14:56,326 --> 00:14:58,076
包括一个主图像和一个缩略图

422
00:14:58,826 --> 00:15:00,896
主图像又由

423
00:14:58,826 --> 00:15:00,896
主图像又由

424
00:15:00,896 --> 00:15:01,766
四个图块组成

425
00:15:02,676 --> 00:15:05,796
项属性框 即 ipco 框

426
00:15:05,796 --> 00:15:08,596
包含所有解码器配置

427
00:15:08,596 --> 00:15:10,356
还包含着

428
00:15:10,356 --> 00:15:12,386
主图像 图块

429
00:15:13,506 --> 00:15:15,276
和缩略图的尺寸数据

430
00:15:15,276 --> 00:15:18,246
请注意 这个框中

431
00:15:18,246 --> 00:15:18,896
顺序是有意义的

432
00:15:19,426 --> 00:15:24,166
右边的关联框 即 ipma 框

433
00:15:24,566 --> 00:15:27,286
将所有属性

434
00:15:27,386 --> 00:15:29,656
按照位置

435
00:15:29,846 --> 00:15:31,436
与文件中的项 ID 关联

436
00:15:31,996 --> 00:15:33,936
如前所述 

437
00:15:33,936 --> 00:15:35,846
这个文件中共有六个项

438
00:15:36,026 --> 00:15:38,776
一个图像 四个图块

439
00:15:38,776 --> 00:15:39,216
和一个缩略图

440
00:15:41,386 --> 00:15:43,786
项 1 至 4 是图块

441
00:15:44,256 --> 00:15:46,316
是隐藏图像

442
00:15:46,386 --> 00:15:48,926
属性是位置 1

443
00:15:48,926 --> 00:15:50,536
即解码器配置

444
00:15:50,536 --> 00:15:53,166
和位置 2  即尺寸

445
00:15:53,166 --> 00:15:55,756
为 500 x 500 像素

446
00:15:56,666 --> 00:15:58,436
项 5 为 主图像

447
00:15:59,576 --> 00:16:01,256
只具有尺寸属性

448
00:15:59,576 --> 00:16:01,256
只具有尺寸属性

449
00:16:01,256 --> 00:16:03,656
因为这是一个

450
00:16:03,656 --> 00:16:04,636
派生图像

451
00:16:05,396 --> 00:16:07,656
它的尺寸

452
00:16:07,656 --> 00:16:08,196
为 1000 x 1000 像素

453
00:16:09,746 --> 00:16:11,616
接下来 我们会简要谈一下

454
00:16:11,616 --> 00:16:13,276
HEIF 中的图像序列

455
00:16:13,886 --> 00:16:17,146
嵌入序列的 HEIF 文件

456
00:16:17,146 --> 00:16:20,496
包含 moov 框

457
00:16:20,496 --> 00:16:22,676
和 moov 框的分框

458
00:16:22,676 --> 00:16:23,096
等框体

459
00:16:24,436 --> 00:16:26,366
moov 框的完整定义

460
00:16:26,366 --> 00:16:28,976
包含在 ISO MP4 文件格式

461
00:16:28,976 --> 00:16:30,996
的技术参数中

462
00:16:30,996 --> 00:16:31,566
HEIF 便是由此而来

463
00:16:32,696 --> 00:16:34,436
每个图像或取样的序列

464
00:16:34,436 --> 00:16:37,326
都由 trak 框描述

465
00:16:37,326 --> 00:16:39,856
其中包含了播放轨道

466
00:16:39,856 --> 00:16:41,186
所需要的一切

467
00:16:41,186 --> 00:16:42,536
时间信息

468
00:16:43,836 --> 00:16:45,626
HEIF 规定了一个全新的

469
00:16:45,626 --> 00:16:49,336
处理图像的轨道处理器 称为 pict.

470
00:16:50,276 --> 00:16:51,796
主要区别在于

471
00:16:51,796 --> 00:16:53,366
音频或视频

472
00:16:53,366 --> 00:16:54,976
包含的时间信息

473
00:16:54,976 --> 00:16:56,556
能够用于同步播放进度

474
00:16:57,446 --> 00:16:59,026
图像序列轨道

475
00:16:59,026 --> 00:17:01,116
包含的时间信息则能够代表

476
00:16:59,026 --> 00:17:01,116
包含的时间信息则能够代表

477
00:17:01,116 --> 00:17:02,886
连拍快照的拍摄时间

478
00:17:02,886 --> 00:17:04,786
或是派生幻灯片中

479
00:17:04,786 --> 00:17:06,726
每个单张图像

480
00:17:06,726 --> 00:17:08,665
建议的显示时间

481
00:17:12,316 --> 00:17:14,376
也可以为图像序列

482
00:17:14,376 --> 00:17:15,336
指定角色

483
00:17:15,675 --> 00:17:17,455
例如  HEIF 文件

484
00:17:17,455 --> 00:17:19,715
内嵌缩略图轨道

485
00:17:19,715 --> 00:17:21,215
或辅助图像轨道

486
00:17:21,215 --> 00:17:22,665
并与原图像轨道

487
00:17:23,415 --> 00:17:23,546
相关联

488
00:17:24,935 --> 00:17:26,316
HEIF 最重要的特性之一

489
00:17:26,316 --> 00:17:27,836
就是能在文件中

490
00:17:27,836 --> 00:17:29,696
嵌入创造者的指令

491
00:17:29,696 --> 00:17:31,546
并以此来实现

492
00:17:31,546 --> 00:17:32,286
对播放的控制

493
00:17:32,866 --> 00:17:34,266
例如 编辑列表

494
00:17:34,266 --> 00:17:36,106
能够改变每个采样的

495
00:17:36,106 --> 00:17:39,006
播放顺序和速度

496
00:17:40,076 --> 00:17:42,616
HEIF 还允许

497
00:17:42,616 --> 00:17:44,406
编辑列表的重复

498
00:17:44,406 --> 00:17:46,306
可以实现循环动画等功能

499
00:17:47,346 --> 00:17:49,616
重复的次数

500
00:17:49,616 --> 00:17:51,296
可以为特定值

501
00:17:51,436 --> 00:17:52,496
也可以无限重复

502
00:17:53,016 --> 00:17:56,636
由于 HEIF 中

503
00:17:56,636 --> 00:17:59,216
轨道符合 ISO 标准

504
00:17:59,216 --> 00:18:00,946
便可以实现帧间预测

505
00:17:59,216 --> 00:18:00,946
便可以实现帧间预测

506
00:18:01,276 --> 00:18:03,476
帧间预测是指

507
00:18:03,476 --> 00:18:06,136
移除部分编码信息

508
00:18:06,136 --> 00:18:07,736
而通过此前

509
00:18:07,736 --> 00:18:09,596
或之后的相似帧

510
00:18:09,596 --> 00:18:11,036
来进行预测

511
00:18:11,036 --> 00:18:11,446
并生成当前帧

512
00:18:12,216 --> 00:18:13,616
这一点

513
00:18:13,616 --> 00:18:14,706
对于压缩

514
00:18:14,706 --> 00:18:15,286
意义非凡

515
00:18:16,446 --> 00:18:17,936
帧间预测也能

516
00:18:18,106 --> 00:18:20,616
延缓解码时间

517
00:18:21,146 --> 00:18:22,956
因为必须

518
00:18:22,956 --> 00:18:24,616
先解码前一帧

519
00:18:24,616 --> 00:18:25,616
才能够解码

520
00:18:25,616 --> 00:18:25,876
当前帧

521
00:18:26,996 --> 00:18:28,846
HEIF 允许帧间预测

522
00:18:29,186 --> 00:18:31,586
但也在文件中

523
00:18:31,586 --> 00:18:33,146
限制了帧与帧的

524
00:18:33,146 --> 00:18:34,186
相互依赖

525
00:18:34,706 --> 00:18:36,156
比方说 

526
00:18:36,156 --> 00:18:38,326
每一个预测生成的图像

527
00:18:38,326 --> 00:18:40,206
都只能指向已经预测生成的图像

528
00:18:40,296 --> 00:18:40,896
即内部帧

529
00:18:41,516 --> 00:18:42,946
如此一来 解码序列中

530
00:18:42,946 --> 00:18:44,626
每一帧的时间

531
00:18:44,686 --> 00:18:45,546
就可以预先确定

532
00:18:45,916 --> 00:18:51,116
最后一点  HEIF 图像

533
00:18:51,116 --> 00:18:55,756
可以分割成不同图块

534
00:18:55,936 --> 00:18:57,916
图块是指图像中的

535
00:18:57,916 --> 00:18:58,836
长方形区域

536
00:18:59,176 --> 00:19:00,776
它们在 HEIF 文件中

537
00:18:59,176 --> 00:19:00,776
它们在 HEIF 文件中

538
00:19:00,776 --> 00:19:03,116
是完全独立的项

539
00:19:03,116 --> 00:19:04,986
尺寸可以相同

540
00:19:04,986 --> 00:19:05,436
也可以不同

541
00:19:06,066 --> 00:19:07,916
如果尺寸不同

542
00:19:07,916 --> 00:19:09,496
那么相对位置属性

543
00:19:09,496 --> 00:19:10,936
便可以描述它们

544
00:19:10,936 --> 00:19:11,626
在最终图像中所处的位置

545
00:19:12,276 --> 00:19:14,046
如果尺寸相同

546
00:19:14,046 --> 00:19:14,956
那么最终图像便会以

547
00:19:15,226 --> 00:19:20,546
栅格的形式描述 因为以下几点

548
00:19:20,546 --> 00:19:22,356
图块使得 HEIF 高度灵活

549
00:19:23,216 --> 00:19:25,796
播放器可以充分利用并行处理

550
00:19:25,796 --> 00:19:26,556
缩减解码时间

551
00:19:26,776 --> 00:19:28,466
比方说 每个图块

552
00:19:28,466 --> 00:19:30,136
都可以分别

553
00:19:30,136 --> 00:19:30,646
且单独解码

554
00:19:31,836 --> 00:19:33,476
图块可以降低改变图片尺寸

555
00:19:33,476 --> 00:19:35,586
所需的内存大小

556
00:19:35,586 --> 00:19:37,816
因为无需解码

557
00:19:37,816 --> 00:19:39,226
整张图片之后

558
00:19:39,226 --> 00:19:41,416
再进行操作 每个图块

559
00:19:41,416 --> 00:19:42,886
都能单独解码

560
00:19:42,886 --> 00:19:44,926
并改变大尺寸 再置于

561
00:19:44,926 --> 00:19:46,566
较小的缓存中进行渲染

562
00:19:47,476 --> 00:19:49,196
裁剪图像速度也很快

563
00:19:49,846 --> 00:19:51,096
因为播放器不需要

564
00:19:51,096 --> 00:19:52,256
解码整个图像

565
00:19:52,256 --> 00:19:53,776
再提取特定区域

566
00:19:54,506 --> 00:19:56,046
这一属性

567
00:19:56,046 --> 00:19:57,666
在缩放操作中也格外有用

568
00:19:58,506 --> 00:20:00,746
例如 一张数十亿像素的图像

569
00:19:58,506 --> 00:20:00,746
例如 一张数十亿像素的图像

570
00:20:00,746 --> 00:20:02,776
可以轻而易举地解码 显示

571
00:20:02,966 --> 00:20:05,056
放大 而不需要

572
00:20:05,056 --> 00:20:06,306
解码整张图像

573
00:20:06,306 --> 00:20:08,146
并占用数十亿位的

574
00:20:08,206 --> 00:20:08,636
缓存

575
00:20:08,636 --> 00:20:13,386
同时 图块还可以

576
00:20:13,386 --> 00:20:16,666
用作编码工具

577
00:20:17,126 --> 00:20:18,966
智能编码器

578
00:20:18,966 --> 00:20:20,676
可以根据图块内容的不同

579
00:20:20,676 --> 00:20:24,136
做出不同选择

580
00:20:24,706 --> 00:20:26,616
Apple 在使用 HEIF 的过程中

581
00:20:26,646 --> 00:20:27,836
大量使用了图块

582
00:20:28,466 --> 00:20:30,606
但要注意  HEVC 的技术参数

583
00:20:30,606 --> 00:20:32,476
同样支持

584
00:20:32,666 --> 00:20:34,786
将每帧分成图块

585
00:20:34,786 --> 00:20:36,186
用作并行处理

586
00:20:36,526 --> 00:20:39,376
Apple 对图块的应用

587
00:20:39,376 --> 00:20:41,786
并非按照 HEVC 的规定 而是每个图块

588
00:20:41,786 --> 00:20:44,636
都是一个完整的 HEVC 帧

589
00:20:44,636 --> 00:20:45,926
我们称其为系统图块

590
00:20:48,526 --> 00:20:51,236
接下来 我们谈谈 HEVC

591
00:20:51,296 --> 00:20:53,386
也是 Apple 用来压缩

592
00:20:53,386 --> 00:20:54,756
HEIF 照片的编解码器

593
00:20:55,386 --> 00:20:59,306
选择 HEVC

594
00:20:59,306 --> 00:21:00,196
有两大原因

595
00:20:59,306 --> 00:21:00,196
有两大原因

596
00:21:00,196 --> 00:21:03,546
首先 HEVC

597
00:21:03,546 --> 00:21:05,796
是压缩标准领域

598
00:21:05,796 --> 00:21:06,576
最先进的技术

599
00:21:07,246 --> 00:21:09,526
在画质相同的情况下

600
00:21:09,616 --> 00:21:11,646
HEVC 的压缩率平均

601
00:21:12,166 --> 00:21:13,476
是 JPEG 压缩率

602
00:21:13,476 --> 00:21:13,956
的两倍

603
00:21:14,396 --> 00:21:17,866
第二 HEVC 开始得到

604
00:21:17,866 --> 00:21:19,726
绝大多数 CPU

605
00:21:19,726 --> 00:21:20,386
和 GPU 的硬件支持

606
00:21:20,966 --> 00:21:22,536
例如 Intel 的第六代

607
00:21:22,536 --> 00:21:24,296
Core 处理器就包含

608
00:21:24,296 --> 00:21:26,096
对 HEVC 的

609
00:21:26,096 --> 00:21:26,806
硬件支持

610
00:21:27,176 --> 00:21:29,056
这意味着

611
00:21:29,056 --> 00:21:30,886
表现出众

612
00:21:30,886 --> 00:21:33,126
而不需要牺牲续航时间

613
00:21:35,576 --> 00:21:37,606
一些帧内编码工具

614
00:21:37,606 --> 00:21:39,596
也加入到了标准之中

615
00:21:39,596 --> 00:21:42,276
使得 HEVC 的表现超过了 JPEG

616
00:21:42,276 --> 00:21:44,446
接下来的几张幻灯片

617
00:21:44,446 --> 00:21:45,216
会提到一些

618
00:21:45,736 --> 00:21:47,426
你会注意到

619
00:21:47,546 --> 00:21:49,636
我们总会讲到灵活性

620
00:21:50,116 --> 00:21:53,316
首先是区块尺寸

621
00:21:54,296 --> 00:21:57,276
JPEG 将图像分割成

622
00:21:57,276 --> 00:21:59,816
由 8 x 8 像素的区块构成的栅格

623
00:22:00,246 --> 00:22:02,986
接下来 这些区块被描述

624
00:22:03,406 --> 00:22:05,846
转化和量化

625
00:22:06,416 --> 00:22:09,476
HEVC 的灵活性

626
00:22:09,476 --> 00:22:11,356
使其能将图像

627
00:22:11,356 --> 00:22:14,526
划分为大至 64 x 64 像素

628
00:22:14,986 --> 00:22:16,596
小至 4 x 4 像素的区块

629
00:22:17,296 --> 00:22:19,116
也可以在区块内部

630
00:22:19,116 --> 00:22:20,536
灵活转换尺寸

631
00:22:21,446 --> 00:22:22,996
标准新增了

632
00:22:23,076 --> 00:22:24,616
离散尺寸转换功能

633
00:22:24,616 --> 00:22:26,596
作为可选项

634
00:22:26,596 --> 00:22:28,196
还为编码系数的编组

635
00:22:28,196 --> 00:22:29,706
增加了三种可用的

636
00:22:29,706 --> 00:22:30,406
扫描顺序

637
00:22:30,806 --> 00:22:33,646
接下来是区块预测

638
00:22:34,846 --> 00:22:36,656
JPEG 支持预测 8 x 8 大小区块

639
00:22:36,656 --> 00:22:38,816
左上角的系数

640
00:22:38,816 --> 00:22:40,826
这一系数又称 DC 分量

641
00:22:40,826 --> 00:22:43,266
或恒定分量

642
00:22:43,266 --> 00:22:44,736
依据则是这一区块

643
00:22:44,736 --> 00:22:45,126
左侧的区块

644
00:22:45,996 --> 00:22:48,996
HEVC 又增加了

645
00:22:48,996 --> 00:22:51,216
在区块内部预测每一个像素值

646
00:22:51,216 --> 00:22:51,646
的功能

647
00:22:51,906 --> 00:22:54,556
角度预测范围

648
00:22:54,556 --> 00:22:55,016
最多可达 35 种

649
00:22:55,686 --> 00:22:57,286
还可以运用

650
00:22:57,286 --> 00:22:59,106
相邻区块中

651
00:22:59,106 --> 00:23:01,016
包含的相似信息

652
00:22:59,106 --> 00:23:01,016
包含的相似信息

653
00:23:01,016 --> 00:23:02,486
来消除冗余信息

654
00:23:02,886 --> 00:23:04,146
这也是 HEVC 内置的

655
00:23:04,146 --> 00:23:05,946
高效工具之一

656
00:23:07,506 --> 00:23:08,296
下一项是熵编码

657
00:23:09,416 --> 00:23:11,646
JPEG 使用 Huffman 编码

658
00:23:11,646 --> 00:23:13,456
作为统计编码的引擎

659
00:23:13,516 --> 00:23:15,816
这是为了将

660
00:23:15,816 --> 00:23:17,736
可变长编码

661
00:23:17,736 --> 00:23:18,416
赋值给输入的系数

662
00:23:19,596 --> 00:23:21,256
赋给系数的长编码

663
00:23:21,256 --> 00:23:23,156
长度越短

664
00:23:23,156 --> 00:23:24,016
效率也越高

665
00:23:25,136 --> 00:23:28,006
而 HEVC 则是采用

666
00:23:28,006 --> 00:23:30,266
一种算法编码器 称为 CABAC

667
00:23:30,776 --> 00:23:32,506
是 上下文参考

668
00:23:32,506 --> 00:23:34,226
二进制算术编码

669
00:23:34,296 --> 00:23:34,666
的缩写

670
00:23:34,776 --> 00:23:37,766
CABAC 因

671
00:23:37,766 --> 00:23:39,856
压缩率显著高于

672
00:23:39,856 --> 00:23:41,576
其他大多数熵编码算法

673
00:23:41,576 --> 00:23:42,306
而知名

674
00:23:44,656 --> 00:23:45,656
下一项是量化

675
00:23:46,566 --> 00:23:48,906
量化是一项有损

676
00:23:48,906 --> 00:23:50,836
压缩技术 通过

677
00:23:50,836 --> 00:23:52,656
压缩一个取值范围

678
00:23:53,146 --> 00:23:54,696
为单一量化值而实现

679
00:23:55,586 --> 00:23:57,856
JPEG 对每个

680
00:23:57,856 --> 00:24:00,336
8 x 8 的区块使用全局

681
00:23:57,856 --> 00:24:00,336
8 x 8 的区块使用全局

682
00:24:00,376 --> 00:24:01,236
量化矩阵

683
00:24:02,376 --> 00:24:04,716
HEVC 则在量化矩阵之上

684
00:24:04,716 --> 00:24:07,456
增进了灵活性 添加了

685
00:24:07,456 --> 00:24:08,546
为每个区块

686
00:24:08,546 --> 00:24:10,136
赋不同的量化参数

687
00:24:10,136 --> 00:24:10,446
的功能

688
00:24:11,186 --> 00:24:12,896
这样一来 智能编码算法

689
00:24:12,896 --> 00:24:15,276
就能压缩更多

690
00:24:15,356 --> 00:24:17,176
图像上更多的区域

691
00:24:17,176 --> 00:24:18,816
而人类视觉系统

692
00:24:18,816 --> 00:24:22,056
就更难捕捉到人为差异

693
00:24:22,546 --> 00:24:23,796
例如 频率高的

694
00:24:23,796 --> 00:24:24,376
内容

695
00:24:24,926 --> 00:24:28,276
再接下来是去除区块边界

696
00:24:28,276 --> 00:24:30,256
这项工具仅有 HEVC 支持

697
00:24:31,396 --> 00:24:33,806
人工边界是指

698
00:24:33,806 --> 00:24:35,996
区块边缘可见的

699
00:24:35,996 --> 00:24:36,816
不连续区域

700
00:24:36,816 --> 00:24:39,856
HEVC 包含去区块滤波器

701
00:24:39,856 --> 00:24:42,396
这种滤波器应用于

702
00:24:42,626 --> 00:24:44,446
区块边缘的像素

703
00:24:44,446 --> 00:24:46,296
使过度更平滑

704
00:24:46,296 --> 00:24:49,886
视觉效果也更好

705
00:24:49,886 --> 00:24:51,636
SAO  也就是

706
00:24:51,636 --> 00:24:53,946
取样自适应偏移 是

707
00:24:54,106 --> 00:24:56,956
HEVC 中一道额外的滤波器

708
00:24:57,386 --> 00:24:59,526
应用于去区块滤波器

709
00:24:59,526 --> 00:25:01,776
作用的结果 来进一步

710
00:24:59,526 --> 00:25:01,776
作用的结果 来进一步

711
00:25:01,776 --> 00:25:02,856
改善图像质量

712
00:25:03,456 --> 00:25:05,166
这是一种局部滤波器 能够

713
00:25:05,166 --> 00:25:07,996
减弱边缘振荡效应

714
00:25:08,046 --> 00:25:09,826
在图片的某些区域

715
00:25:09,826 --> 00:25:11,906
改变取样密度

716
00:25:11,906 --> 00:25:13,086
以提升画质

717
00:25:14,376 --> 00:25:17,306
这两项技术都能

718
00:25:17,486 --> 00:25:19,716
使图像更赏心悦目

719
00:25:19,716 --> 00:25:20,836
尤其是压缩率很高

720
00:25:20,836 --> 00:25:21,096
的时候

721
00:25:22,346 --> 00:25:23,586
我们已经讲了很多

722
00:25:23,586 --> 00:25:25,096
HEIF 和 HEVC 的特性

723
00:25:25,096 --> 00:25:27,146
和工具 我想再花一点时间

724
00:25:27,146 --> 00:25:29,076
讲一讲 iOS 11

725
00:25:29,076 --> 00:25:32,436
拍摄的 HEIF 文件

726
00:25:32,436 --> 00:25:32,866
的一些特点

727
00:25:33,846 --> 00:25:36,746
首先  iOS 11 上

728
00:25:36,746 --> 00:25:39,446
拍摄的图像 扩展名

729
00:25:39,446 --> 00:25:42,316
为 .HEIC  因为使用了 HEVC

730
00:25:42,316 --> 00:25:43,196
作编解码器

731
00:25:44,726 --> 00:25:46,936
用于压缩图像的

732
00:25:46,936 --> 00:25:48,766
HEVC 配置文件

733
00:25:48,766 --> 00:25:49,626
是主静止配置

734
00:25:50,396 --> 00:25:53,206
我们还使用 HEVC 的

735
00:25:53,206 --> 00:25:54,906
单色配置文件处理深度数据

736
00:25:57,016 --> 00:25:59,556
图像使用 512 x 512 像素

737
00:25:59,556 --> 00:26:03,686
的区块进行编码

738
00:25:59,556 --> 00:26:03,686
的区块进行编码

739
00:26:03,756 --> 00:26:05,606
区块以栅格的形式

740
00:26:05,606 --> 00:26:07,026
进行定位 覆盖

741
00:26:07,026 --> 00:26:07,416
整个图像

742
00:26:08,356 --> 00:26:11,986
缩略图为 320 x 240 像素

743
00:26:11,986 --> 00:26:14,196
的图像 用 HEVC 编码

744
00:26:15,326 --> 00:26:17,106
是常见 160 x 120 像素大小

745
00:26:17,106 --> 00:26:20,016
JPEG 缩略图的四倍

746
00:26:20,096 --> 00:26:22,116
这有助于在高像素密度

747
00:26:22,116 --> 00:26:24,106
的现代显示屏上

748
00:26:24,106 --> 00:26:26,276
显示图像时 呈现

749
00:26:26,276 --> 00:26:28,306
更高的缩略图画质

750
00:26:29,526 --> 00:26:31,726
EXIF 元数据也包含在

751
00:26:31,726 --> 00:26:34,156
HEIF 文件中 像 JPEG 一样

752
00:26:34,156 --> 00:26:34,896
以确保向后兼容性

753
00:26:36,586 --> 00:26:39,076
深度数据以

754
00:26:39,076 --> 00:26:42,636
辅助图像的形式存储

755
00:26:42,786 --> 00:26:44,676
相关元数据存储在

756
00:26:44,676 --> 00:26:47,686
与深度图像相关联的

757
00:26:47,686 --> 00:26:48,376
XMP 载荷中

758
00:26:48,936 --> 00:26:52,886
最后 讲一下

759
00:26:52,886 --> 00:26:53,516
文件生成

760
00:26:54,586 --> 00:26:56,626
HEIF 标准没有

761
00:26:56,626 --> 00:26:59,166
读取器在文件顶层

762
00:26:59,166 --> 00:27:00,776
读取框体的

763
00:26:59,166 --> 00:27:00,776
读取框体的

764
00:27:00,776 --> 00:27:02,776
顺序 但我们

765
00:27:02,776 --> 00:27:04,496
发现 排列成特定顺序

766
00:27:04,496 --> 00:27:06,556
能够极大帮助

767
00:27:06,556 --> 00:27:08,056
分析器和解码器

768
00:27:08,856 --> 00:27:10,206
比方说

769
00:27:10,206 --> 00:27:11,846
让缩略图排位靠前

770
00:27:11,946 --> 00:27:13,806
可以分析并显示

771
00:27:14,206 --> 00:27:15,876
大量 HEIF 图像

772
00:27:15,906 --> 00:27:17,726
而不需要先分析

773
00:27:17,816 --> 00:27:18,526
整个文件

774
00:27:19,566 --> 00:27:21,286
为实现高速传输

775
00:27:21,286 --> 00:27:23,876
或网页应用 一旦接受到元框

776
00:27:23,876 --> 00:27:26,096
那么就可以获取

777
00:27:26,096 --> 00:27:27,626
文件的全部信息

778
00:27:27,836 --> 00:27:29,556
读取器就可以

779
00:27:29,556 --> 00:27:31,716
配置解码器和

780
00:27:31,716 --> 00:27:34,676
显示过程 而不需要

781
00:27:34,676 --> 00:27:35,976
获取完整的编码数据

782
00:27:42,046 --> 00:27:43,916
让我们来总结一下

783
00:27:44,176 --> 00:27:45,626
今天讲到的内容

784
00:27:45,806 --> 00:27:47,496
摄影界需要一种

785
00:27:47,496 --> 00:27:49,316
更好的图像文件格式

786
00:27:49,316 --> 00:27:51,186
来取代垂垂老矣的 JPEG

787
00:27:51,186 --> 00:27:55,056
我们逐一分析了

788
00:27:55,056 --> 00:27:58,006
Apple 认为

789
00:27:58,006 --> 00:27:59,996
寻找 JPEG 替代品

790
00:27:59,996 --> 00:28:01,126
最为重要的

791
00:27:59,996 --> 00:28:01,126
最为重要的

792
00:28:01,126 --> 00:28:01,856
一些要求

793
00:28:02,456 --> 00:28:06,126
我们相信 HEIF

794
00:28:06,126 --> 00:28:07,506
能够满足全部这些要求

795
00:28:08,136 --> 00:28:10,516
它灵活性极高

796
00:28:10,796 --> 00:28:12,156
能高效 简洁地

797
00:28:12,156 --> 00:28:15,426
运用 iOS 11 技术上的进步

798
00:28:15,876 --> 00:28:17,786
它的可扩展性又能

799
00:28:17,786 --> 00:28:19,086
让 HEIF 为未来开发运用

800
00:28:19,086 --> 00:28:20,426
打下坚实基础

801
00:28:21,036 --> 00:28:23,906
我们后来分析了

802
00:28:23,906 --> 00:28:25,796
HEIF 标准的

803
00:28:25,796 --> 00:28:26,426
一些特性

804
00:28:27,446 --> 00:28:29,256
最后 我们介绍了

805
00:28:29,256 --> 00:28:31,576
让其成为不二之选的

806
00:28:31,576 --> 00:28:33,536
HEVC 工具 既包括

807
00:28:33,536 --> 00:28:35,346
提升压缩效率的 还包括

808
00:28:35,346 --> 00:28:37,206
对硬件架构友好

809
00:28:37,206 --> 00:28:39,506
能够提升表现

810
00:28:39,506 --> 00:28:39,826
和性能的

811
00:28:40,236 --> 00:28:43,816
要了解更多信息

812
00:28:43,816 --> 00:28:46,216
请访问第 513 号会议

813
00:28:46,216 --> 00:28:48,276
“High Efficiency Image File format（高效率图像文件格式）”

814
00:28:48,576 --> 00:28:49,906
的网址

815
00:28:51,326 --> 00:28:52,716
如果你继续参与 WWDC

816
00:28:53,166 --> 00:28:55,216
我们欢迎你参加

817
00:28:55,216 --> 00:28:58,256
与 HEIF 和 HEVC 有关的

818
00:28:58,876 --> 00:28:59,286
两场会议

819
00:28:59,936 --> 00:29:01,736
感谢观看本场会议

820
00:28:59,936 --> 00:29:01,736
感谢观看本场会议

821
00:29:01,736 --> 00:29:04,496
祝你在 WWDC 2017 过得愉快
