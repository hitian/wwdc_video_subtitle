1
00:00:21,156 --> 00:00:21,716
&gt;&gt; 大家好

2
00:00:22,516 --> 00:00:27,646
[掌声]

3
00:00:28,146 --> 00:00:29,176
欢迎大家参加这个主题会议“Core Spotlight 的

4
00:00:29,176 --> 00:00:29,686
新功能”

5
00:00:30,316 --> 00:00:31,846
我是 John Hornkvist

6
00:00:31,846 --> 00:00:33,516
Core Spotlight 的高级经理

7
00:00:33,516 --> 00:00:34,556
今天将与我一同讲解的还有

8
00:00:34,556 --> 00:00:35,526
我的同事 Lyn Fong

9
00:00:36,876 --> 00:00:38,306
今天我们会介绍一些新的 API

10
00:00:38,306 --> 00:00:41,186
macOS 系统中的 Core Spotlight

11
00:00:43,176 --> 00:00:45,936
Drag-and-Drop 拖放功能

12
00:00:45,936 --> 00:00:48,376
还有 Quick Look 预览功能

13
00:00:48,376 --> 00:00:50,586
我们还会介绍一下排名更新

14
00:00:50,586 --> 00:00:51,996
最后还要对索引与搜索功能

15
00:00:51,996 --> 00:00:53,616
做一番回顾

16
00:00:54,976 --> 00:00:56,986
那么  我们首先开始介绍 macOS 的新功能

17
00:00:57,846 --> 00:00:59,946
macOS 中的 Core Spotlight

18
00:00:59,946 --> 00:01:02,606
和 iOS 中的 API 并无不同

19
00:00:59,946 --> 00:01:02,606
和 iOS 中的 API 并无不同

20
00:01:02,606 --> 00:01:04,825
所以 它非常适用于跨平台 App

21
00:01:05,376 --> 00:01:07,086
在此之前  Core Spotlight

22
00:01:07,086 --> 00:01:08,606
已经应用于备忘录和 Safari 

23
00:01:08,606 --> 00:01:10,366
由于它的跨平台特征 

24
00:01:10,486 --> 00:01:11,666
CoreData Spotlight 支持

25
00:01:11,666 --> 00:01:12,736
再次获得运用推广 

26
00:01:12,736 --> 00:01:14,676
目前它已经同时适用于

27
00:01:14,676 --> 00:01:16,556
iOS 和 macOS 系统

28
00:01:17,146 --> 00:01:18,996
Core Spotlight 对数据库和批量扫描

29
00:01:18,996 --> 00:01:21,046
来说非常好用

30
00:01:21,046 --> 00:01:22,546
你的 App 可以借此而实现对内容的

31
00:01:22,546 --> 00:01:23,276
完全控制

32
00:01:24,066 --> 00:01:26,106
它并不运用于

33
00:01:26,106 --> 00:01:28,146
用户在 Finder 中监视的项

34
00:01:28,456 --> 00:01:30,276
因为经典的 Spotlight API 还存在

35
00:01:30,276 --> 00:01:31,776
而且性能极好

36
00:01:33,416 --> 00:01:34,886
最后一点  由于 Core Sporlight API 是

37
00:01:35,006 --> 00:01:36,796
以单独用户为基础 所以用户之间

38
00:01:36,796 --> 00:01:37,216
不可分享

39
00:01:37,686 --> 00:01:39,306
在座各位可能有人

40
00:01:39,306 --> 00:01:41,736
不熟悉 Core Spotlight

41
00:01:41,736 --> 00:01:43,066
稍后我们会把它的基础概念

42
00:01:43,066 --> 00:01:43,476
回顾一下

43
00:01:43,936 --> 00:01:47,766
iOS 11 里一个重要的新功能就是

44
00:01:47,766 --> 00:01:49,606
拖放功能

45
00:01:49,606 --> 00:01:51,216
当然了  它对于 Mac 来说

46
00:01:51,216 --> 00:01:52,596
也非常重要

47
00:01:53,906 --> 00:01:54,636
带有 Core Spotlight 的拖放功能

48
00:01:54,636 --> 00:01:56,626
是建立在承诺的概念

49
00:01:56,626 --> 00:01:58,746
基础之上

50
00:01:58,786 --> 00:02:00,036
如果你建立了标引时间的承诺

51
00:01:58,786 --> 00:02:00,036
如果你建立了标引时间的承诺

52
00:02:00,036 --> 00:02:02,286
等到用户拖放一个 

53
00:02:02,376 --> 00:02:03,906
Core Spotlight 项以后

54
00:02:03,906 --> 00:02:04,826
你就要实现这个承诺

55
00:02:05,326 --> 00:02:07,866
那么 我们来看看实际操作

56
00:02:08,916 --> 00:02:10,286
首先我们在 Spotlight 里开始拖动

57
00:02:10,936 --> 00:02:15,096
之后我们按下 Home 键

58
00:02:15,636 --> 00:02:16,936
回到 SpringBoard

59
00:02:16,936 --> 00:02:20,316
在这里 我们能够进入备忘录

60
00:02:20,316 --> 00:02:20,846
把那张图片拖放下来

61
00:02:21,316 --> 00:02:23,006
这是个炫酷的加速功能

62
00:02:23,126 --> 00:02:24,636
可以让用户非常迅速地

63
00:02:25,116 --> 00:02:26,016
获取内容

64
00:02:26,576 --> 00:02:29,656
现在你也许很好奇

65
00:02:29,656 --> 00:02:30,796
它究竟是如何在后台

66
00:02:30,796 --> 00:02:31,326
运作的

67
00:02:32,386 --> 00:02:34,116
首先 你的 App 对各个项进行索引

68
00:02:34,116 --> 00:02:35,446
每一项都带有一个承诺

69
00:02:35,976 --> 00:02:40,426
你的 App 随即退出  稍过一会儿

70
00:02:40,426 --> 00:02:42,226
用户在 Spotlight 中

71
00:02:42,226 --> 00:02:42,716
运行查询

72
00:02:43,416 --> 00:02:45,116
用户在 Spotlight 中拖动项目

73
00:02:45,116 --> 00:02:46,736
Spotlight 创建一个承诺 

74
00:02:46,736 --> 00:02:48,666
这个承诺会被发送到

75
00:02:48,666 --> 00:02:49,326
接收拖放项的 App

76
00:02:49,376 --> 00:02:52,966
当这个 App 选出它需要的类型后

77
00:02:52,966 --> 00:02:54,056
请求又返回到

78
00:02:54,056 --> 00:02:54,586
Spotlight

79
00:02:56,256 --> 00:02:57,766
Spotlight 随后将根据

80
00:02:57,766 --> 00:02:59,256
类型和项目信息来调用

81
00:02:59,256 --> 00:03:01,966
你的应用或你的

82
00:02:59,256 --> 00:03:01,966
你的应用或你的

83
00:03:01,966 --> 00:03:02,936
App Extension

84
00:03:07,176 --> 00:03:08,806
然后是你提供数据

85
00:03:09,116 --> 00:03:10,556
数据被传递至 Spotlight

86
00:03:11,076 --> 00:03:13,616
当然 接收的 App 是能够

87
00:03:13,616 --> 00:03:15,226
获取内容的

88
00:03:15,346 --> 00:03:17,016
这看起来可能有些复杂

89
00:03:17,016 --> 00:03:18,326
但你真正需要做的

90
00:03:18,456 --> 00:03:20,296
并不是太多

91
00:03:20,816 --> 00:03:22,436
你的第一个任务是决定

92
00:03:22,436 --> 00:03:23,656
支持哪些拖放类型

93
00:03:26,316 --> 00:03:28,226
拖放类型使用统一的

94
00:03:28,226 --> 00:03:30,426
类型标识符或 UTI 类型

95
00:03:30,426 --> 00:03:31,376
这些是系统的[音质不清晰]

96
00:03:32,256 --> 00:03:35,166
它们提供了某种统一的方法

97
00:03:35,166 --> 00:03:36,546
来描述我们制定的层级当中

98
00:03:36,546 --> 00:03:38,376
不同类型

99
00:03:38,376 --> 00:03:39,206
从最特殊到最不特殊的类型

100
00:03:39,806 --> 00:03:42,106
要想获取有关统一类型标识符的信息

101
00:03:42,106 --> 00:03:43,616
请访问以下网址

102
00:03:43,616 --> 00:03:44,966
developer.apple.com

103
00:03:45,496 --> 00:03:48,526
你可以给你的应用程序

104
00:03:48,526 --> 00:03:50,506
定义新类型

105
00:03:50,506 --> 00:03:52,376
但对于拖放功能 我们希望大家还是

106
00:03:52,376 --> 00:03:53,156
公布那些众所周知的类型

107
00:03:53,156 --> 00:03:54,486
这样有利于其他应用程序

108
00:03:54,486 --> 00:03:56,106
对你要提供的数据

109
00:03:56,106 --> 00:03:57,076
进行接收

110
00:03:57,596 --> 00:04:00,576
例如 一个做笔记记录的 App

111
00:03:57,596 --> 00:04:00,576
例如 一个做笔记记录的 App

112
00:04:00,576 --> 00:04:02,406
可能使用自己的 UTI 类型

113
00:04:02,616 --> 00:04:04,736
来作为其内容的一种类型

114
00:04:04,736 --> 00:04:05,796
但它可能会对外宣称

115
00:04:05,796 --> 00:04:08,126
如果某个项目被拖放的时候

116
00:04:08,246 --> 00:04:09,236
自己可以提供 RTF HTML 和纯文本

117
00:04:09,436 --> 00:04:11,736
那么这就是类型

118
00:04:12,286 --> 00:04:13,446
现在来看看 我们怎样让 Spotlight 知道

119
00:04:13,446 --> 00:04:14,926
哪些是可以提供的

120
00:04:15,296 --> 00:04:17,716
关于这一问题

121
00:04:17,716 --> 00:04:18,546
CSSearchableAttributeSet

122
00:04:18,546 --> 00:04:19,946
具有三个新属性

123
00:04:20,296 --> 00:04:22,046
你可以承诺一项数据表示

124
00:04:22,046 --> 00:04:24,276
一个将被复制的

125
00:04:24,276 --> 00:04:25,796
文件表示形式

126
00:04:25,796 --> 00:04:27,776
或者是一个本地文件表示

127
00:04:27,776 --> 00:04:29,856
如果你的数据被保存

128
00:04:29,856 --> 00:04:30,996
并用于复制的话

129
00:04:31,476 --> 00:04:33,896
至于设计的提供者

130
00:04:34,066 --> 00:04:35,316
你首先应该确定它是

131
00:04:35,316 --> 00:04:36,896
精准程度最高的表示

132
00:04:37,776 --> 00:04:38,996
那么应该怎样使用它呢？

133
00:04:40,406 --> 00:04:40,956
你应该像往常一样把

134
00:04:40,956 --> 00:04:42,926
CSSearchableItemAttributeSet

135
00:04:42,926 --> 00:04:43,286
创建出来

136
00:04:43,776 --> 00:04:45,036
在这个实例中 我们已经有一个

137
00:04:45,036 --> 00:04:46,606
图片文件 所以我们将它

138
00:04:46,606 --> 00:04:47,846
交给文件类型标识符处理

139
00:04:48,566 --> 00:04:49,906
我们也能转换图片[音质不清晰]

140
00:04:49,906 --> 00:04:51,756
按照先前的宣称内容  它可以

141
00:04:51,756 --> 00:04:54,266
提供纯文本数据

142
00:04:54,556 --> 00:04:55,486
这就是我们的承诺

143
00:04:55,766 --> 00:04:56,926
接下来我们来看

144
00:04:56,926 --> 00:04:57,616
如何生成它

145
00:04:58,766 --> 00:05:01,206
当用户拖动放置项目时

146
00:04:58,766 --> 00:05:01,206
当用户拖动放置项目时

147
00:05:01,206 --> 00:05:03,056
你的 Extentsion 会被调用

148
00:05:03,056 --> 00:05:04,066
在极少数情况下

149
00:05:04,066 --> 00:05:06,036
你的 App 恰好正在运行

150
00:05:06,036 --> 00:05:07,096
那么这可能会变为你的 App

151
00:05:07,096 --> 00:05:07,456
索引委托

152
00:05:08,476 --> 00:05:09,996
根据接收 App 的请求内容

153
00:05:09,996 --> 00:05:11,996
上述两种方法中的一种

154
00:05:11,996 --> 00:05:12,896
将会被调用

155
00:05:13,216 --> 00:05:15,806
如果它们请求数据或者

156
00:05:15,806 --> 00:05:17,106
某一类型 或是你能够提供数据

157
00:05:17,106 --> 00:05:19,336
数据方法将被调用

158
00:05:19,336 --> 00:05:20,376
并且获取可搜索的索引

159
00:05:20,376 --> 00:05:22,456
项目标识符和

160
00:05:22,456 --> 00:05:23,796
类型标识符  而你则应当返回

161
00:05:23,796 --> 00:05:25,026
数据对象

162
00:05:26,776 --> 00:05:28,676
文件 URL 方法采用

163
00:05:28,676 --> 00:05:30,716
相同的参数 再加上

164
00:05:30,716 --> 00:05:32,416
一些布尔值  从而确定是否

165
00:05:32,416 --> 00:05:33,656
应当提供本地文件

166
00:05:36,036 --> 00:05:37,556
数据方法的执行情况

167
00:05:37,556 --> 00:05:38,876
大体如下所示

168
00:05:38,986 --> 00:05:41,686
我们查看项标识符的

169
00:05:41,686 --> 00:05:43,746
模型对象

170
00:05:43,746 --> 00:05:45,096
还要检查正在请求的类型

171
00:05:45,726 --> 00:00:05,000
然后再生成相应的

172
00:05:47,166 --> 00:05:47,736
数据

173
00:05:48,236 --> 00:05:52,386
文件 URL 方法的

174
00:05:52,386 --> 00:05:53,866
执行过程和它非常类似

175
00:05:54,326 --> 00:05:55,656
我们再次查看

176
00:05:55,656 --> 00:05:57,166
项目标识符的模型对象

177
00:05:57,376 --> 00:05:58,346
检查正在请求的类型

178
00:05:58,346 --> 00:06:01,016
但在这里我们要生成

179
00:05:58,346 --> 00:06:01,016
但在这里我们要生成

180
00:06:01,016 --> 00:06:01,376
一个文件

181
00:06:02,046 --> 00:06:03,656
实际上 这些就是你在 iOS 和 macOS 上

182
00:06:03,656 --> 00:06:05,266
使用拖放功能

183
00:06:05,266 --> 00:06:06,416
需要做的所有操作

184
00:06:06,996 --> 00:06:10,156
那么 我们来总结一下这个新的 API

185
00:06:10,926 --> 00:06:12,206
在标引的时候

186
00:06:12,206 --> 00:06:13,516
你要声明并承诺拖动类型

187
00:06:13,966 --> 00:06:15,346
Core Spotlight Extension

188
00:06:15,346 --> 00:06:16,766
至为关键 它将获得启动

189
00:06:16,766 --> 00:06:17,906
以便完成你的承诺

190
00:06:18,526 --> 00:06:21,156
用户需要尽快生成数据

191
00:06:21,156 --> 00:06:22,736
他将等待

192
00:06:22,736 --> 00:06:24,046
拖曳动作的完成

193
00:06:24,406 --> 00:06:26,856
当然 新的 API 同时适用于

194
00:06:26,856 --> 00:06:28,546
macOS 和 iOS 系统

195
00:06:29,646 --> 00:06:30,996
接下来 Lyn 会

196
00:06:30,996 --> 00:06:32,296
上台为大家介绍

197
00:06:32,296 --> 00:06:33,426
Core Spotlight 的 Quick Look

198
00:06:33,426 --> 00:06:33,876
预览功能

199
00:06:34,516 --> 00:06:40,826
[掌声]

200
00:06:41,326 --> 00:06:43,486
&gt;&gt; 嗨 我是 Lyn 我们来谈谈

201
00:06:43,486 --> 00:06:44,826
可用于 Core Spotlight 项目的

202
00:06:44,826 --> 00:06:46,146
Quick Look预览功能

203
00:06:47,266 --> 00:06:49,386
在 iOS 上 当你通过 3D Touch

204
00:06:49,456 --> 00:06:51,266
触发 Peek and Pop 时

205
00:06:51,266 --> 00:06:52,406
Spotlight 会显示出内容预览

206
00:06:53,816 --> 00:06:55,126
在默认状态下  Spotlight 会根据

207
00:06:55,126 --> 00:06:56,886
你在 Core Spotlight 项目中的文本

208
00:06:56,886 --> 00:06:58,006
显示出只读文本预览

209
00:06:58,006 --> 00:07:00,396
但现在你可以通过

210
00:06:58,006 --> 00:07:00,396
但现在你可以通过

211
00:07:00,396 --> 00:07:02,346
采用 Quick Look 预览 Extension

212
00:07:02,346 --> 00:07:03,566
来自定义你的预览内容

213
00:07:04,146 --> 00:07:06,726
看 这是默认的

214
00:07:06,726 --> 00:07:08,566
Core Spotlight 预览示例

215
00:07:09,106 --> 00:07:10,616
如果你曾经对 iOS 10 中的 Core Spotlight 项目

216
00:07:10,616 --> 00:07:13,026
进行过 Peek and Pop 操作

217
00:07:13,026 --> 00:07:14,466
那么这幅画面看起来就很熟悉了

218
00:07:15,846 --> 00:07:17,606
这是一个示例 它表明

219
00:07:17,606 --> 00:07:19,216
在采用 Quick Look 预览 Extension 后

220
00:07:19,216 --> 00:07:20,416
你的预览内容可能是

221
00:07:20,416 --> 00:07:21,086
这个样子

222
00:07:21,836 --> 00:07:23,686
这个区域是

223
00:07:23,686 --> 00:07:25,656
你的预览内容显示区域

224
00:07:25,656 --> 00:07:27,426
它来自于你的 Extension 中的

225
00:07:27,426 --> 00:07:28,146
一个视图控制器

226
00:07:28,986 --> 00:07:30,866
那么 我们来谈谈

227
00:07:30,866 --> 00:07:32,096
要如何实现这些

228
00:07:32,096 --> 00:07:32,776
Extension 功能

229
00:07:34,346 --> 00:07:35,966
Core Spotlight 预览使用了一种

230
00:07:35,966 --> 00:07:37,476
Quick Look 预览 SDK

231
00:07:37,636 --> 00:07:39,746
它是 iOS 今年新增加的

232
00:07:39,746 --> 00:07:41,376
并带有很炫酷的新型 Xcode

233
00:07:41,376 --> 00:07:41,736
模板

234
00:07:42,716 --> 00:07:44,266
当你从这个模板里创建目标时

235
00:07:44,266 --> 00:07:45,946
你将获得一个

236
00:07:45,946 --> 00:07:48,246
Extension Info.plist

237
00:07:48,246 --> 00:07:50,306
如果我们在 NSExtension 属性下

238
00:07:50,486 --> 00:07:52,666
查看这个 plist

239
00:07:52,666 --> 00:07:54,246
你将看到 QL 对可搜索

240
00:07:54,246 --> 00:07:55,246
项目属性的支持

241
00:07:55,706 --> 00:07:57,906
关于 Core Spotlight 预览

242
00:07:57,906 --> 00:07:58,906
你应设置为 Yes

243
00:07:59,546 --> 00:08:00,806
这会让我们知道你的

244
00:07:59,546 --> 00:08:00,806
这会让我们知道你的

245
00:08:00,806 --> 00:08:02,136
Quick Look 预览 Extension

246
00:08:02,136 --> 00:08:03,696
将支持 Core Spotlight 的项

247
00:08:04,526 --> 00:08:08,896
现在我们来看一下这个

248
00:08:09,056 --> 00:08:09,146
API

249
00:08:09,146 --> 00:08:10,356
当你在创建目标时

250
00:08:10,356 --> 00:08:12,036
将会运用

251
00:08:12,036 --> 00:08:13,886
preparePreviewOfSearchableItem 这个方法

252
00:08:13,886 --> 00:08:14,716
来获取视图控制器

253
00:08:15,226 --> 00:08:16,496
当你需要预览时

254
00:08:16,686 --> 00:08:18,056
就会调用这个方法

255
00:08:18,636 --> 00:08:20,456
通过这个方法 你将获得一个

256
00:08:21,036 --> 00:08:22,856
标识符 对于你的结果来说

257
00:08:22,856 --> 00:08:24,636
这是独一无二的 Core Spotlight

258
00:08:24,636 --> 00:08:25,306
标识符

259
00:08:26,326 --> 00:08:28,036
你将获得一个查询字符串

260
00:08:28,036 --> 00:08:29,706
这是用户已经搜索到的字符串

261
00:08:29,706 --> 00:08:31,266
目的是要获取你的结果

262
00:08:31,736 --> 00:08:32,996
这非常有助于

263
00:08:32,996 --> 00:08:34,566
你在预览中突出显示

264
00:08:34,566 --> 00:08:36,135
与搜索相关的内容

265
00:08:36,706 --> 00:08:38,765
最后 你会得到一个

266
00:08:38,765 --> 00:08:40,236
完成句柄 

267
00:08:40,236 --> 00:08:43,316
一旦完成操作 你必须调用它

268
00:08:43,515 --> 00:08:45,906
因此 调试 Core Spotlight

269
00:08:45,956 --> 00:08:47,476
预览 Extension 有别于典型的

270
00:08:47,476 --> 00:08:48,786
Extension 调试

271
00:08:48,786 --> 00:08:50,266
不过别担心 它还是

272
00:08:50,266 --> 00:08:50,926
很容易的

273
00:08:51,526 --> 00:08:53,116
你不必选择一个 Host App

274
00:08:53,116 --> 00:08:54,066
然后再从这个 App 里

275
00:08:54,066 --> 00:08:55,826
启动你的 Extension

276
00:08:55,826 --> 00:08:57,126
你可以直接从 Spotlight 里

277
00:08:57,126 --> 00:08:58,116
启动 Extention

278
00:08:58,976 --> 00:09:00,966
所以 当 Xcode 需要你启动 App 时

279
00:08:58,976 --> 00:09:00,966
所以 当 Xcode 需要你启动 App 时

280
00:09:00,966 --> 00:09:03,886
你可以启动任何一个

281
00:09:03,886 --> 00:09:05,456
因为你不会使用它

282
00:09:05,456 --> 00:09:07,006
而是会转到 Spotlight

283
00:09:07,006 --> 00:09:08,426
查找你的 Core Spotlight 项

284
00:09:08,426 --> 00:09:09,176
然后进行 Peek and Pop

285
00:09:09,566 --> 00:09:11,406
Xcode 将自动连接到

286
00:09:11,406 --> 00:09:12,856
你的 Extension

287
00:09:13,196 --> 00:09:14,576
那么让我们通过演示来

288
00:09:14,576 --> 00:09:15,586
看看这个工作流程

289
00:09:24,056 --> 00:09:25,236
开始演示之前  我想告诉大家

290
00:09:25,236 --> 00:09:26,356
这次演示要用到的 App

291
00:09:26,356 --> 00:09:28,546
是一个示例代码

292
00:09:28,546 --> 00:09:29,516
大家会后可以

293
00:09:29,516 --> 00:09:29,956
随意观看它

294
00:09:30,416 --> 00:09:32,666
那么 让我们先看看

295
00:09:33,226 --> 00:09:33,926
主应用程序

296
00:09:40,046 --> 00:09:41,256
这里有一个简单的 App

297
00:09:41,256 --> 00:09:42,506
它只是一个图片列表

298
00:09:43,246 --> 00:09:44,116
如果你选中其中一张图片

299
00:09:44,116 --> 00:09:45,696
你将获得更详细的视图

300
00:09:45,696 --> 00:09:48,036
包括标题 评分和

301
00:09:48,036 --> 00:09:48,766
一些描述

302
00:09:49,076 --> 00:09:51,926
那么  我们来看看  如果在 Spotlight 中

303
00:09:51,926 --> 00:09:53,326
找一张照片 并对它进行 Peek and Pop

304
00:09:53,326 --> 00:09:53,896
会是怎样的情况

305
00:09:58,236 --> 00:09:59,436
这里填入项的名称

306
00:10:00,036 --> 00:10:04,416
哎呀 它直接打开了

307
00:10:04,896 --> 00:10:08,236
嗯 这里有一些文字描述

308
00:10:08,236 --> 00:10:08,916
这不算最神奇

309
00:10:09,246 --> 00:10:10,206
我们来看看能不能做的更好

310
00:10:11,646 --> 00:10:14,136
我们回到 Xcode 界面

311
00:10:14,136 --> 00:10:16,736
在这里我将

312
00:10:16,736 --> 00:10:18,326
从 Quick Look 预览 Extension 模板里

313
00:10:18,356 --> 00:10:20,846
添加一个新目标

314
00:10:21,736 --> 00:10:25,226
我们调用 iOS 中的图片预览 Extension

315
00:10:28,326 --> 00:10:29,436
我们要继续操作 

316
00:10:29,436 --> 00:10:29,686
激活它

317
00:10:34,076 --> 00:10:35,596
有一点我想提一下

318
00:10:35,596 --> 00:10:37,126
我们在 App 里

319
00:10:37,126 --> 00:10:39,366
看到的视图控制器

320
00:10:39,366 --> 00:10:40,756
是位于一个框架里的 这样它可以

321
00:10:40,876 --> 00:10:41,806
跨越多个目标实现共享

322
00:10:42,276 --> 00:10:43,976
如果你有代码或资源可以

323
00:10:43,976 --> 00:10:45,556
跨目标共享 我们建议你

324
00:10:45,556 --> 00:10:46,726
使用相同的手段

325
00:10:47,006 --> 00:10:49,006
好 我继续操作

326
00:10:49,006 --> 00:10:50,566
现在引入那个框架

327
00:10:51,226 --> 00:10:53,566
然后我们就能跳到

328
00:10:53,566 --> 00:10:54,416
这个文件的实质内容

329
00:10:55,266 --> 00:10:55,966
PreparePreviewOfSscearchableItem

330
00:10:55,966 --> 00:10:57,316
这是你在

331
00:10:57,316 --> 00:10:58,276
幻灯片中看到的同样

332
00:10:58,276 --> 00:10:58,866
的方法

333
00:10:59,526 --> 00:11:00,986
这里我们有标识符

334
00:10:59,526 --> 00:11:00,986
这里我们有标识符

335
00:11:01,096 --> 00:11:04,376
接下来我们就要

336
00:11:04,376 --> 00:11:06,676
用这个标识符来

337
00:11:06,676 --> 00:11:07,816
找到带有匹配标识符的

338
00:11:07,856 --> 00:11:08,536
图片

339
00:11:09,716 --> 00:11:10,966
一旦我们得到了那张图片

340
00:11:10,966 --> 00:11:12,596
我们就可以用它来

341
00:11:12,596 --> 00:11:13,786
针对这张图片而设置视图

342
00:11:13,786 --> 00:11:14,206
控制器

343
00:11:14,626 --> 00:11:15,586
看 这就是大家在主应用程序里

344
00:11:15,586 --> 00:11:16,756
看到的同一个

345
00:11:17,666 --> 00:11:17,736
视图控件

346
00:11:17,736 --> 00:11:19,236
如果你在主应用程序中

347
00:11:19,236 --> 00:11:21,356
有一个轻量级的视图控制器

348
00:11:21,356 --> 00:11:22,226
你当然也可以使用

349
00:11:22,226 --> 00:11:22,696
同样的方法

350
00:11:23,116 --> 00:11:25,286
如果你的视图控制器

351
00:11:25,286 --> 00:11:26,696
内存更大或速度更快

352
00:11:26,696 --> 00:11:28,566
你可能要考虑

353
00:11:28,566 --> 00:11:30,216
为此制定一个级别稍低的

354
00:11:30,216 --> 00:11:30,856
版本

355
00:11:31,296 --> 00:11:32,746
我们继续操作

356
00:11:32,746 --> 00:11:33,446
把它展示出来

357
00:11:34,356 --> 00:11:35,606
我在这里加了一点 PrintOut 参数 这样 

358
00:11:35,606 --> 00:11:36,786
当 Xcode 连接好以后我就可以看到

359
00:11:36,786 --> 00:11:38,636
最后 我们调用

360
00:11:38,636 --> 00:11:39,666
完成句柄 

361
00:11:40,716 --> 00:11:42,176
那么我们来试一试

362
00:11:42,176 --> 00:11:42,716
看看效果如何

363
00:11:43,326 --> 00:11:45,856
就像我刚才提过的

364
00:11:45,856 --> 00:11:47,086
在这里选什么不重要

365
00:11:47,316 --> 00:11:48,496
因为你不会使用它 我们准备

366
00:11:48,496 --> 00:11:49,666
挑选照片 因为这是我们的

367
00:11:49,666 --> 00:11:49,976
App

368
00:11:58,046 --> 00:11:58,976
这里有些照片

369
00:11:59,046 --> 00:12:00,746
我们将直接返回 Spotlight

370
00:11:59,046 --> 00:12:00,746
我们将直接返回 Spotlight

371
00:12:01,546 --> 00:12:03,136
然后再一次尝试

372
00:12:03,136 --> 00:12:04,216
Peek and Pop 操作

373
00:12:04,816 --> 00:12:08,146
这就是我们的预览

374
00:12:09,516 --> 00:12:14,546
[掌声]

375
00:12:15,046 --> 00:12:15,546
现在你可以通过

376
00:12:15,546 --> 00:12:16,846
Xcode 里的 PrintOut 看到

377
00:12:16,846 --> 00:12:18,456
我们已经连接成功

378
00:12:18,456 --> 00:12:19,476
现在我们可以继续进行调试了

379
00:12:26,166 --> 00:12:28,086
所以  正如大家所看到的

380
00:12:28,086 --> 00:12:29,416
执行 Quick Look 预览 Extension

381
00:12:29,416 --> 00:12:30,946
可以非常简单 特别是当你

382
00:12:30,946 --> 00:12:31,836
已经有一个视图控制器

383
00:12:31,836 --> 00:12:32,896
来显示你的内容

384
00:12:32,896 --> 00:12:33,396
的时候

385
00:12:33,986 --> 00:12:35,216
也许你的主应用程序里的

386
00:12:35,216 --> 00:12:36,396
视图控制器已经是轻量级的了

387
00:12:36,396 --> 00:12:37,656
或许在你的 App 里已经

388
00:12:37,656 --> 00:12:39,706
安装了一个适用于 3D Touch 的

389
00:12:39,706 --> 00:12:40,736
轻量级版本

390
00:12:40,736 --> 00:12:42,006
无论哪种情况 你都可以

391
00:12:42,006 --> 00:12:43,126
重复使用那个视图控制器

392
00:12:43,466 --> 00:12:45,186
最后再为你的 Extension 提供一些

393
00:12:45,186 --> 00:12:45,856
小建议

394
00:12:46,056 --> 00:12:48,256
如果你还没有调用完成句柄

395
00:12:48,256 --> 00:12:49,526
将会出现一个加载转轮

396
00:12:49,526 --> 00:12:51,136
所以你应该调用完成句柄 

397
00:12:51,136 --> 00:12:51,606
越早越好

398
00:12:52,316 --> 00:12:53,446
当 Xcode 首次与你的 Extension

399
00:12:53,446 --> 00:12:55,146
相连接时

400
00:12:55,146 --> 00:12:57,116
你就可以看到那个转轮

401
00:12:57,116 --> 00:12:58,236
就像演示中这样

402
00:12:58,786 --> 00:13:00,406
可是一旦连接成功

403
00:12:58,786 --> 00:13:00,406
可是一旦连接成功

404
00:13:00,736 --> 00:13:01,666
或者你没有

405
00:13:01,666 --> 00:13:02,926
在 Xcode 中运行

406
00:13:02,926 --> 00:13:04,286
你会马上就想看到预览内容

407
00:13:04,606 --> 00:13:06,966
这是一个 Extension

408
00:13:06,966 --> 00:13:08,406
存储空间是有限的 所以要有效率

409
00:13:09,036 --> 00:13:10,566
最后 一旦你调用了那个

410
00:13:10,566 --> 00:13:12,326
完成句柄 

411
00:13:12,326 --> 00:13:13,536
你的工作就结束了

412
00:13:13,536 --> 00:13:15,336
此后就不要再进行任何后台操作了

413
00:13:15,626 --> 00:13:17,906
这就是 iOS 中的

414
00:13:17,906 --> 00:13:19,306
Core Sportlight 预览

415
00:13:19,486 --> 00:13:21,786
Quick Look 预览 SDK

416
00:13:21,786 --> 00:13:23,956
也支持基于文件的预览

417
00:13:23,956 --> 00:13:25,556
相关内容可观看

418
00:13:25,646 --> 00:13:28,106
“让基于文档的 App 在 iOS 11 里打造得更为精彩”

419
00:13:28,366 --> 00:13:28,806
这一会议

420
00:13:29,286 --> 00:13:32,906
正如 John 所说

421
00:13:32,906 --> 00:13:34,556
macOS 平台也迎来了 Core Spotlight

422
00:13:34,556 --> 00:13:37,006
你可以自定义你的预览

423
00:13:37,006 --> 00:13:38,606
就像在 iOS 里一样

424
00:13:39,556 --> 00:13:41,616
在 macOS 上 当你在 Spotlight 窗口中

425
00:13:41,616 --> 00:13:43,076
选择搜索结果时

426
00:13:43,076 --> 00:13:44,066
预览便会显示出来

427
00:13:44,206 --> 00:13:45,646
此时你确实很想给自己的

428
00:13:45,646 --> 00:13:47,226
Core Spotlight 执行一个

429
00:13:47,226 --> 00:13:48,336
Quick Look 预览 Extension

430
00:13:48,336 --> 00:13:50,456
因为 macOS 中的

431
00:13:50,456 --> 00:13:52,956
Spotlight 不具有

432
00:13:52,956 --> 00:13:53,436
默认预览功能

433
00:13:54,026 --> 00:13:55,176
所以 在没有 Quick Look

434
00:13:55,176 --> 00:13:57,146
预览 Extension 的情况下

435
00:13:57,146 --> 00:13:58,056
你看到的情况就是这样

436
00:13:58,866 --> 00:14:00,346
如果有了这个 Extension

437
00:13:58,866 --> 00:14:00,346
如果有了这个 Extension

438
00:14:00,346 --> 00:14:01,196
情况就会是这样子

439
00:14:02,246 --> 00:14:03,866
这个区域就是你的

440
00:14:03,866 --> 00:14:05,956
预览内容的展示区域

441
00:14:05,956 --> 00:14:07,616
和 iOS 里的情况一样

442
00:14:07,616 --> 00:14:08,896
它来自于 Extension 里的

443
00:14:08,896 --> 00:14:09,536
视图控制器

444
00:14:09,536 --> 00:14:10,756
所以 你可以完成常规视图

445
00:14:10,756 --> 00:14:13,286
能做的任何事情

446
00:14:14,186 --> 00:14:16,786
对 macOS 上的一个

447
00:14:16,786 --> 00:14:18,656
Core Spotlight Quick Look

448
00:14:18,656 --> 00:14:19,716
预览 Extension 进行调试  同样有别于

449
00:14:19,716 --> 00:14:21,376
调试典型的 Extension

450
00:14:21,846 --> 00:14:23,206
它和 iOS 里的工作流程

451
00:14:23,376 --> 00:14:23,816
也不相同

452
00:14:24,416 --> 00:14:26,346
因为当另外一个 App 获得聚焦后

453
00:14:26,346 --> 00:14:27,996
Spotlight 窗口就会消失

454
00:14:27,996 --> 00:14:29,876
所以很难在 Xcode 里

455
00:14:29,876 --> 00:14:31,536
使用断点

456
00:14:31,786 --> 00:14:33,336
因此我们转而提供

457
00:14:33,336 --> 00:14:34,826
Quick Look Simulator 以便启动

458
00:14:34,826 --> 00:14:36,326
你的 Extension

459
00:14:36,326 --> 00:14:37,356
它在你调试时并不会消失

460
00:14:38,576 --> 00:14:39,496
那么让我们来看看

461
00:14:39,496 --> 00:14:39,976
它是如何工作的吧

462
00:14:48,046 --> 00:14:49,356
好了 现在我们来看看

463
00:14:49,356 --> 00:14:51,946
这个 App 的 Mac 版本

464
00:14:58,246 --> 00:14:59,836
我们现在看到了和 iOS 版本

465
00:14:59,836 --> 00:15:02,206
一样的 App

466
00:14:59,836 --> 00:15:02,206
一样的 App

467
00:15:02,856 --> 00:15:05,586
这里有一个图片列表

468
00:15:05,586 --> 00:15:07,236
如果你选择其中一张

469
00:15:07,236 --> 00:15:09,066
就能看到更详细的视图

470
00:15:09,066 --> 00:15:10,006
并带有标题和稍大的图片

471
00:15:10,786 --> 00:15:12,476
我们来看一下 如果在 Spotlight 中

472
00:15:12,476 --> 00:15:13,976
搜索它 会发生什么情况

473
00:15:18,046 --> 00:15:18,966
只有一大片空白区域

474
00:15:19,426 --> 00:15:20,706
我们来看看能不能调整好

475
00:15:26,046 --> 00:15:26,816
这次我要用

476
00:15:26,816 --> 00:15:30,726
macOS 的 Quick Look 预览 Extension 模板

477
00:15:31,346 --> 00:15:32,636
创建另一个目标

478
00:15:32,636 --> 00:15:35,676
我们将调用 iOS 的

479
00:15:35,676 --> 00:15:40,166
图片预览 Extension

480
00:15:42,266 --> 00:15:45,866
我们继续操作 激活它

481
00:15:47,876 --> 00:15:49,366
我要再一次

482
00:15:49,366 --> 00:15:49,976
引入这个框架 

483
00:15:56,446 --> 00:15:58,266
就是它  然后跳转到

484
00:15:58,266 --> 00:15:59,956
准备可搜索项目的预览

485
00:15:59,956 --> 00:16:01,366
这与你在 iOS 上看到的方法

486
00:15:59,956 --> 00:16:01,366
这与你在 iOS 上看到的方法

487
00:16:01,366 --> 00:16:01,956
相同

488
00:16:01,956 --> 00:16:03,896
这里我们要进行

489
00:16:03,896 --> 00:16:05,266
同样的操作

490
00:16:05,266 --> 00:16:07,566
使用那个标识符

491
00:16:07,566 --> 00:16:09,806
找到带有匹配标识符的图片

492
00:16:09,806 --> 00:16:11,126
之后继续设置我们的

493
00:16:11,126 --> 00:16:12,036
视图

494
00:16:12,326 --> 00:16:13,366
这与你在 App 里看到的

495
00:16:13,366 --> 00:16:15,256
视图一样 我要把它添加到

496
00:16:15,256 --> 00:16:17,166
我们的视图层级中

497
00:16:17,166 --> 00:16:18,326
设定一个 PrintOut 语句

498
00:16:18,326 --> 00:16:20,346
这样我们就能得知连接成功了

499
00:16:20,346 --> 00:16:21,526
最后 我们要调用完成句柄

500
00:16:22,586 --> 00:16:24,836
那么 让我们开始运行它吧

501
00:16:25,076 --> 00:16:26,156
当你运行 Quick Look 预览

502
00:16:26,156 --> 00:16:27,756
Extension 时 Xcode将会

503
00:16:27,816 --> 00:16:29,226
默认提供 Quick Look

504
00:16:29,226 --> 00:16:29,816
模拟器

505
00:16:30,306 --> 00:16:32,586
好  我们来选中它

506
00:16:40,236 --> 00:16:40,936
这就是 Quick Look

507
00:16:40,936 --> 00:16:41,486
模拟器了

508
00:16:42,376 --> 00:16:44,336
在左侧你将看到你的

509
00:16:44,336 --> 00:16:45,516
Core Spotlight 各项目

510
00:16:46,036 --> 00:16:47,256
如果有很多索引搜索结果

511
00:16:47,256 --> 00:16:48,446
你可以使用上面的

512
00:16:48,446 --> 00:16:49,976
搜索字段来缩小

513
00:16:49,976 --> 00:16:50,376
范围

514
00:16:50,936 --> 00:16:52,736
当你在这些结果里选中

515
00:16:52,736 --> 00:16:54,366
其中一条时  你的预览将会出现

516
00:16:54,366 --> 00:16:56,146
在右侧  这样你就能看到

517
00:16:56,146 --> 00:16:58,106
Xcode 已成功地

518
00:16:58,106 --> 00:16:59,716
实现连接

519
00:16:59,716 --> 00:17:00,666
现在你可以随心所欲地

520
00:16:59,716 --> 00:17:00,666
现在你可以随心所欲地

521
00:17:00,666 --> 00:17:01,046
进行调试了

522
00:17:01,586 --> 00:17:03,816
我们就来看一看它在

523
00:17:03,816 --> 00:17:04,626
Spotlight 中是什么样子

524
00:17:10,056 --> 00:17:11,226
大家可以看到  Spotlight已经成功

525
00:17:11,226 --> 00:17:12,576
使用你的 Extension 填充了

526
00:17:12,576 --> 00:17:14,286
原本的空白区域

527
00:17:15,016 --> 00:17:16,000
[掌声]

528
00:17:22,046 --> 00:17:23,925
大家看到了吧  macOS 中 

529
00:17:23,925 --> 00:17:25,636
Core Spotlight 预览的 API

530
00:17:25,636 --> 00:17:27,326
与 iOS 中的 API 是一样的

531
00:17:28,706 --> 00:17:32,346
最后再提供一些小建议

532
00:17:32,346 --> 00:17:34,486
需要谨记的一点是 大家不应该在

533
00:17:35,136 --> 00:17:36,676
Extension 的第一道响应程序里

534
00:17:36,676 --> 00:17:38,116
查看任何视图

535
00:17:38,486 --> 00:17:39,986
你的预览并不是交互式的

536
00:17:40,116 --> 00:17:41,686
Spotlight 才是这种情况下的

537
00:17:41,686 --> 00:17:43,046
交互元素

538
00:17:44,146 --> 00:17:46,916
最后 macOS 中的

539
00:17:46,916 --> 00:17:49,006
Quick Look 预览 Extension

540
00:17:49,006 --> 00:17:50,806
仅仅支持 Core Spotlight 项

541
00:17:51,056 --> 00:17:53,126
对基于文件的预览来说

542
00:17:53,126 --> 00:17:54,946
经典的 Quick Look 生成器 API

543
00:17:55,206 --> 00:17:56,316
仍是它的解决办法

544
00:17:56,616 --> 00:17:58,806
以上就是有关 Core Spotlight

545
00:17:58,806 --> 00:17:59,316
预览的内容

546
00:17:59,316 --> 00:17:59,936
我们再次有请 John

547
00:18:00,516 --> 00:18:05,500
[掌声]

548
00:18:10,076 --> 00:18:13,086
&gt;&gt; 谢谢 Lyn  非常精彩的讲解

549
00:18:13,416 --> 00:18:15,286
对 Spotlight 而言 排名是非常

550
00:18:15,286 --> 00:18:15,846
重要的

551
00:18:16,696 --> 00:18:19,036
在 iOS 11 和 macOS High Sierra 中

552
00:18:19,376 --> 00:18:20,396
我们为 Core Spotlight 添加了

553
00:18:20,396 --> 00:18:21,536
一种新的基于机器学习的

554
00:18:21,536 --> 00:18:22,046
排名算法

555
00:18:23,396 --> 00:18:24,596
它很有个性  而且适应力

556
00:18:24,596 --> 00:18:26,876
很强  它借助于 Core ML

557
00:18:26,956 --> 00:18:29,166
在设备上运行  我们付出了很大努力

558
00:18:29,166 --> 00:18:31,186
以确保大家私人数据的

559
00:18:31,186 --> 00:18:31,696
安全性

560
00:18:32,816 --> 00:18:34,466
用户所有的个性化设置与

561
00:18:34,466 --> 00:18:35,936
调适都是在设备上

562
00:18:35,936 --> 00:18:36,596
进行的

563
00:18:36,906 --> 00:18:38,276
ML 模型在云端训练

564
00:18:38,276 --> 00:18:40,136
使用的是 从各位的本地设备上

565
00:18:40,136 --> 00:18:41,566
获取的特性

566
00:18:42,036 --> 00:18:44,476
这些特性属于隐私  它们并不

567
00:18:44,476 --> 00:18:46,386
包括实际结果

568
00:18:46,386 --> 00:18:47,696
也不包括实际

569
00:18:47,696 --> 00:18:48,116
查询

570
00:18:48,736 --> 00:18:50,266
用于训练模型的数据

571
00:18:50,266 --> 00:18:52,216
只有当你被选入进行设备分析时

572
00:18:52,216 --> 00:18:53,186
才会被提交

573
00:18:53,826 --> 00:18:55,486
在进行机器学习时

574
00:18:55,486 --> 00:18:56,406
这能很好地保护隐私

575
00:19:02,206 --> 00:19:03,136
我们还添加了一些新的属性

576
00:19:03,136 --> 00:19:05,386
以便让大家帮助我们

577
00:19:05,446 --> 00:19:06,366
为各位的内容进行排名

578
00:19:07,466 --> 00:19:08,916
我们添加了一个 rankingHint

579
00:19:08,916 --> 00:19:10,706
它是在 1 至 100 之间的一个数字

580
00:19:10,706 --> 00:19:11,906
其中 100 代表最好

581
00:19:12,456 --> 00:19:13,966
当排名算法无法区分

582
00:19:13,966 --> 00:19:15,456
两项之间的差别时

583
00:19:15,596 --> 00:19:17,916
它就可以派上用场

584
00:19:17,916 --> 00:19:19,046
把更重要的内容提到前面

585
00:19:19,486 --> 00:19:22,866
我们已经创建了新的布尔属性

586
00:19:24,046 --> 00:19:26,156
这可以让我们知道用户

587
00:19:26,156 --> 00:19:27,536
是否新建了项目

588
00:19:28,906 --> 00:19:30,646
UserOwned 则让我们知道

589
00:19:30,646 --> 00:19:31,806
用户是否购买了这个

590
00:19:31,806 --> 00:19:32,176
项目

591
00:19:32,426 --> 00:19:34,326
UserCurated 能让我们得知

592
00:19:34,326 --> 00:19:35,426
这一项目是否

593
00:19:35,426 --> 00:19:37,126
是用户自选 比如说

594
00:19:37,126 --> 00:19:38,096
一篇加了书签的新闻报道

595
00:19:38,426 --> 00:19:42,986
大家要记住 这只是

596
00:19:42,986 --> 00:19:44,316
对排名算法的信息输入

597
00:19:45,546 --> 00:19:47,576
如果你想和排名系统开个玩笑

598
00:19:47,576 --> 00:19:49,506
并且用 rankingHint 把

599
00:19:49,506 --> 00:19:51,486
每个项目都设置为 100

600
00:19:52,006 --> 00:19:53,306
这样做并不会有什么影响

601
00:19:53,816 --> 00:19:55,716
这只是在你自己的

602
00:19:55,716 --> 00:19:56,586
项目内部的排名

603
00:19:59,456 --> 00:20:01,076
匹配质量和使用信息

604
00:19:59,456 --> 00:20:01,076
匹配质量和使用信息

605
00:20:01,076 --> 00:20:03,576
仍然是影响排名的

606
00:20:03,576 --> 00:20:04,136
关键因素

607
00:20:04,526 --> 00:20:05,956
所以 为了获取最佳排名表现

608
00:20:05,956 --> 00:20:08,146
就使用 NSUserActivity 吧

609
00:20:08,146 --> 00:20:09,236
这样我们可以得知用户

610
00:20:09,236 --> 00:20:11,066
在你的 App 里的交互情况

611
00:20:12,016 --> 00:20:13,686
为排名算法的继续运行而

612
00:20:13,686 --> 00:20:15,456
提供丰富的元数据

613
00:20:15,456 --> 00:20:17,956
例如设置一个好的标题

614
00:20:17,956 --> 00:20:20,096
设定信息内容丰富的描述 明确日期

615
00:20:20,096 --> 00:20:21,956
并合理使用关键词 使

616
00:20:21,956 --> 00:20:24,266
项目更容易查找

617
00:20:24,266 --> 00:20:27,156
但不要误用关键词

618
00:20:27,156 --> 00:20:28,736
因为直白的关键词匹配

619
00:20:28,736 --> 00:20:30,556
意味着你的应用程序的

620
00:20:30,556 --> 00:20:30,856
排名结果将会靠后

621
00:20:30,856 --> 00:20:35,026
现在我们回到基础步骤

622
00:20:35,506 --> 00:20:37,586
你需要将内容添加到索引里

623
00:20:37,586 --> 00:20:39,546
而添加内容的基本方法是

624
00:20:39,546 --> 00:20:41,626
直接通过

625
00:20:41,626 --> 00:20:42,746
CSSearchable 索引 API

626
00:20:44,516 --> 00:20:46,056
其次 你也可以给

627
00:20:46,056 --> 00:20:47,686
NSUserActivity 创建索引

628
00:20:47,686 --> 00:20:48,956
我们建议大家这样做

629
00:20:48,956 --> 00:20:50,236
因为它可以提供非常重要的

630
00:20:50,236 --> 00:20:50,566
排序信号

631
00:20:52,376 --> 00:20:53,946
有时你需要删除那些

632
00:20:53,946 --> 00:20:55,546
对用户操作或外部事件

633
00:20:55,546 --> 00:20:57,236
作出反应的项目

634
00:20:57,236 --> 00:20:59,236
当然 对此我们

635
00:20:59,236 --> 00:21:02,726
也有适用的 API

636
00:20:59,236 --> 00:21:02,726
也有适用的 API

637
00:21:02,816 --> 00:21:04,086
把 CSSearchableItems

638
00:21:04,086 --> 00:21:05,786
添加至索引  是非常简单的事

639
00:21:05,786 --> 00:21:07,426
你可以完全掌控添加的内容

640
00:21:08,606 --> 00:21:10,066
首先你要创建一个

641
00:21:10,066 --> 00:21:11,366
CSSearchable 项目属性集

642
00:21:11,366 --> 00:21:12,836
它将为项目储存元数据

643
00:21:13,096 --> 00:21:14,776
你要将属性集符

644
00:21:15,026 --> 00:21:16,886
通过通用型标识进行初始化

645
00:21:18,756 --> 00:21:20,766
这里我们要使用 kUTTypeImage

646
00:21:20,766 --> 00:21:22,126
它有泛型框架以及丰富的内容

647
00:21:24,316 --> 00:21:25,506
你还要采用一些更具体的方式

648
00:21:25,506 --> 00:21:27,616
这个体系有很多的

649
00:21:27,616 --> 00:21:29,736
内置类型可以

650
00:21:29,736 --> 00:21:30,406
获得延用

651
00:21:31,026 --> 00:21:32,346
使用正确的类型

652
00:21:32,346 --> 00:21:33,966
在 iOS 中很重要  

653
00:21:33,966 --> 00:21:36,336
在 macOS 中很关键

654
00:21:36,336 --> 00:21:37,666
因为这会影响到你的内容

655
00:21:37,666 --> 00:21:38,586
位置以及呈现方式

656
00:21:40,196 --> 00:21:41,786
然后你要设定一些属性和

657
00:21:41,786 --> 00:21:43,556
属性集显示名称

658
00:21:43,556 --> 00:21:44,366
这是最基本的

659
00:21:46,936 --> 00:21:48,316
你创建了一个带有特殊标识符的

660
00:21:48,526 --> 00:21:49,996
可检索项目

661
00:21:49,996 --> 00:21:51,486
一个域标识符和

662
00:21:51,486 --> 00:21:52,056
属性集

663
00:21:52,206 --> 00:21:53,906
记住 当 Spotlight 要

664
00:21:53,906 --> 00:21:55,086
在你的应用里启动时

665
00:21:55,136 --> 00:21:56,646
你将重新获得的东西

666
00:21:56,646 --> 00:21:57,906
就是特殊标识符

667
00:21:58,386 --> 00:22:02,276
你将把它编入索引

668
00:21:58,386 --> 00:22:02,276
你将把它编入索引

669
00:22:02,276 --> 00:22:03,376
完成句柄将会被调用

670
00:22:03,376 --> 00:22:05,226
而数据已经被安全地

671
00:22:05,226 --> 00:22:06,636
存入库中

672
00:22:08,416 --> 00:22:09,736
就像 Spotlight 的情况一样

673
00:22:09,886 --> 00:22:11,436
NSUserActivity 可以

674
00:22:11,436 --> 00:22:12,816
将你 App 里的内容和路径点

675
00:22:12,816 --> 00:22:14,936
编入索引

676
00:22:14,936 --> 00:22:16,686
NSUserActivity 反映出

677
00:22:16,686 --> 00:22:17,456
用户在应用里做过的事

678
00:22:17,456 --> 00:22:19,106
而 CSSearchable

679
00:22:19,106 --> 00:22:22,606
则反映出你的 App 

680
00:22:22,606 --> 00:22:23,406
必须提供的东西

681
00:22:23,976 --> 00:22:28,296
因此  它们的不同之处在于

682
00:22:28,296 --> 00:22:29,686
Core Spotlight API 可以

683
00:22:29,686 --> 00:22:31,736
让你把用户还没有

684
00:22:31,736 --> 00:22:33,176
访问过的条目编入索引

685
00:22:33,176 --> 00:22:34,256
人们普遍都会选用它

686
00:22:34,256 --> 00:22:35,716
因为它可以让你完全掌控

687
00:22:35,716 --> 00:22:36,176
被加入索引的内容

688
00:22:37,106 --> 00:22:38,596
但另一方面

689
00:22:38,636 --> 00:22:40,986
因为 NSUserActivity 只针对用户

690
00:22:40,986 --> 00:22:42,436
已经访问过的项目

691
00:22:42,436 --> 00:22:43,966
它为排序提供

692
00:22:43,966 --> 00:22:44,486
重要信号

693
00:22:45,076 --> 00:22:47,346
如果想要通过 NSUserActivity

694
00:22:47,346 --> 00:22:49,066
了解排序情况

695
00:22:49,066 --> 00:22:50,346
你需要把它们关联到你创建索引的

696
00:22:50,346 --> 00:22:50,906
CSSearchableItems

697
00:22:55,276 --> 00:22:57,656
为了做到这一点  当你在创建

698
00:22:58,076 --> 00:23:00,206
NSUserActivity 时

699
00:22:58,076 --> 00:23:00,206
NSUserActivity 时

700
00:23:00,246 --> 00:23:01,846
也是在创建一个属性集

701
00:23:03,116 --> 00:23:04,496
你需要给属性集添加属性

702
00:23:04,496 --> 00:23:06,256
然后你需要设置

703
00:23:06,256 --> 00:23:08,536
相关的特殊标识符

704
00:23:08,536 --> 00:23:09,896
或者是  如果你不想让

705
00:23:09,896 --> 00:23:12,926
NSUserActivity 的使用寿命

706
00:23:12,926 --> 00:23:15,016
绑定在 Core Spotlight 项目上

707
00:23:15,016 --> 00:23:16,076
那么你就使用与 [音质不清晰]

708
00:23:16,936 --> 00:23:18,176
相关的特殊标识符

709
00:23:19,916 --> 00:23:21,396
然后你再把你的用户活动

710
00:23:21,396 --> 00:23:24,416
标记为可搜索  

711
00:23:24,606 --> 00:23:26,176
再对用户活动的

712
00:23:26,176 --> 00:23:26,766
属性集进行设置

713
00:23:28,186 --> 00:23:32,306
删除项目的理由有很多

714
00:23:32,446 --> 00:23:34,046
从应对用户的行为

715
00:23:34,436 --> 00:23:35,766
到删除过时内容  一应俱全

716
00:23:36,666 --> 00:23:38,036
使用 Core Spotlight API

717
00:23:38,036 --> 00:23:40,586
你就可以通过具体项目的标识符

718
00:23:40,586 --> 00:23:41,536
来删除它们

719
00:23:41,916 --> 00:23:43,816
比如 如果用户删除了一个

720
00:23:43,816 --> 00:23:44,336
文件

721
00:23:44,496 --> 00:23:46,366
你可以利用多组项目的

722
00:23:46,366 --> 00:23:48,056
领域标识符  把它们统统删除

723
00:23:48,056 --> 00:23:49,356
如果用户要退出账号或

724
00:23:49,356 --> 00:23:50,906
停止订阅

725
00:23:50,906 --> 00:23:51,986
而你想要删除所有内容时

726
00:23:51,986 --> 00:23:53,586
这个方法可能会奏效

727
00:23:53,586 --> 00:23:55,216
你也可以用同样的方法

728
00:23:55,216 --> 00:23:56,316
来删除已经编入索引的 NSUserActivities

729
00:23:56,316 --> 00:23:58,096
前提是你在它们上面

730
00:23:58,096 --> 00:24:00,566
设定了领域标识符

731
00:23:58,096 --> 00:24:00,566
设定了领域标识符

732
00:24:00,566 --> 00:24:02,646
最后 你可以删除应用中

733
00:24:02,736 --> 00:24:03,666
所有的可搜索项目

734
00:24:03,666 --> 00:24:05,586
如果你更换了版本并且

735
00:24:05,586 --> 00:24:06,616
需要重新创建索引的话

736
00:24:06,616 --> 00:24:07,856
这样的方法是很有用的

737
00:24:08,116 --> 00:24:09,306
如果用户要删除一个应用

738
00:24:09,306 --> 00:24:11,206
这也是以你的名义

739
00:24:11,206 --> 00:24:11,796
调用的

740
00:24:11,856 --> 00:24:16,006
现在我们来具体说说

741
00:24:16,006 --> 00:24:17,206
为 Core Spotlight 创建索引的事

742
00:24:17,206 --> 00:24:19,326
我们先说说如何注册

743
00:24:19,326 --> 00:24:21,496
索引委托 然后再谈谈如何

744
00:24:21,496 --> 00:24:22,976
建立 Core Spotlight Extension

745
00:24:22,976 --> 00:24:24,536
它可以在你的 App

746
00:24:24,536 --> 00:24:26,866
停止工作时

747
00:24:26,866 --> 00:24:27,626
完成委托

748
00:24:27,626 --> 00:24:29,776
我们将讨论客户状态

749
00:24:29,776 --> 00:24:31,296
怎样运作以及如何通过它

750
00:24:31,296 --> 00:24:32,926
让你的索引功能强大而

751
00:24:32,926 --> 00:24:33,366
有效

752
00:24:34,046 --> 00:24:35,096
我们也会探讨一些

753
00:24:35,096 --> 00:24:36,296
性能注意事项

754
00:24:40,496 --> 00:24:42,206
以索引委托进行注册  可以

755
00:24:42,296 --> 00:24:44,166
在我们需要你有所行动的时候

756
00:24:44,166 --> 00:24:46,226
让 Spotlight 联系到你的 App

757
00:24:47,566 --> 00:24:48,616
这导致我们请求大家

758
00:24:48,616 --> 00:24:50,496
把所有的内容都加入索引

759
00:24:50,496 --> 00:24:51,396
或者把特定项目加入索引 [音源不清楚]

760
00:24:51,746 --> 00:24:55,306
以确保精确和时效

761
00:24:55,536 --> 00:24:56,566
它还负责响应

762
00:24:56,666 --> 00:24:58,096
Index Throttling

763
00:24:58,096 --> 00:24:59,976
并向拖放操作

764
00:25:00,536 --> 00:25:00,656
提供数据

765
00:25:00,696 --> 00:25:01,686
和通常情况一样 设定委托

766
00:25:01,686 --> 00:25:03,196
只需要使用一行代码

767
00:25:03,196 --> 00:25:05,986
但是承担委托

768
00:25:05,986 --> 00:25:06,836
你却需要执行

769
00:25:06,836 --> 00:25:08,116
CSSearchableIndex 委托协议

770
00:25:10,136 --> 00:25:11,796
这是一份完整的协议

771
00:25:12,476 --> 00:25:13,386
前两种方法是必须的

772
00:25:13,386 --> 00:25:15,086
我们稍后再进行

773
00:25:15,086 --> 00:25:16,176
更具体的介绍

774
00:25:16,856 --> 00:25:18,756
接下来的两个方法是备选用的

775
00:25:18,756 --> 00:25:19,816
它们告诉你  创建索引的过程已减慢

776
00:25:19,816 --> 00:25:21,116
以便支持前台活动

777
00:25:21,116 --> 00:25:23,316
从而让你可以选择停止

778
00:25:23,316 --> 00:25:24,586
所有不重要的

779
00:25:24,586 --> 00:25:25,926
索引进程

780
00:25:25,926 --> 00:25:27,646
或者只关注最重要的项目

781
00:25:28,466 --> 00:25:31,486
最后 这是我们先前

782
00:25:31,486 --> 00:25:32,696
说过用于拖放的

783
00:25:32,696 --> 00:25:33,526
两种方法

784
00:25:41,146 --> 00:25:42,226
当全体索引的方法被调用时

785
00:25:42,226 --> 00:25:43,566
你会将一切都加入

786
00:25:43,566 --> 00:25:44,026
这个索引

787
00:25:44,626 --> 00:25:45,826
当你收到最后一个项目的

788
00:25:45,826 --> 00:25:47,126
回调时  你会调用

789
00:25:47,126 --> 00:25:47,886
确认句柄

790
00:25:48,316 --> 00:25:49,426
如果你的 App 退出

791
00:25:49,426 --> 00:25:50,706
然后又在句柄被调用前重新启动

792
00:25:50,706 --> 00:25:52,086
Spotlight 就会以

793
00:25:52,086 --> 00:25:53,386
同样的回调方式

794
00:25:53,386 --> 00:25:53,826
来调用它

795
00:25:54,786 --> 00:25:55,616
当经过重新索引  并带有识别符的

796
00:25:55,616 --> 00:25:57,056
项目被调用时

797
00:25:57,056 --> 00:25:58,296
你要查找下述项目

798
00:25:58,296 --> 00:25:59,986
即 Spotlight 要求以妥当形式重新加入

799
00:25:59,986 --> 00:26:00,746
或删除的那些项目

800
00:25:59,986 --> 00:26:00,746
或删除的那些项目

801
00:26:01,206 --> 00:26:02,086
再次强调 你只有在

802
00:26:02,086 --> 00:26:03,716
收到任务出色完成后

803
00:26:03,716 --> 00:26:04,686
最终返回的回调函数

804
00:26:04,686 --> 00:26:06,006
才能够调用

805
00:26:06,006 --> 00:26:06,336
确认句柄

806
00:26:06,736 --> 00:26:10,606
Core Spotlight Extension

807
00:26:10,686 --> 00:26:12,306
执行 CSSearchableIndex 委托协议

808
00:26:12,306 --> 00:26:14,126
并在你的 App

809
00:26:14,126 --> 00:26:15,356
处于非工作状态时

810
00:26:15,356 --> 00:26:16,126
使用回调函数

811
00:26:17,836 --> 00:26:19,096
这可以在用户从备份中恢复

812
00:26:19,096 --> 00:26:20,816
或者需要数据灾备

813
00:26:20,816 --> 00:26:22,216
的时候

814
00:26:22,216 --> 00:26:24,036
让你的内容尽快返回

815
00:26:24,036 --> 00:26:24,396
Spotlight

816
00:26:25,176 --> 00:26:26,476
Core Spotlight Extension

817
00:26:26,476 --> 00:26:27,836
会在你的项目失效前被调用

818
00:26:27,836 --> 00:26:29,416
以便你对它们进行

819
00:26:29,416 --> 00:26:30,746
必要的更新 即便是用户

820
00:26:30,796 --> 00:26:32,406
恰好没有在使用

821
00:26:32,406 --> 00:26:33,146
你的应用

822
00:26:34,026 --> 00:26:36,396
因为界面扩展与

823
00:26:36,396 --> 00:26:37,376
索引委托是一样的

824
00:26:37,376 --> 00:26:38,956
所以最好对你的代码进行因子排列

825
00:26:38,956 --> 00:26:40,136
这样你就可以

826
00:26:40,136 --> 00:26:40,946
参与执行过程了

827
00:26:41,176 --> 00:26:42,766
理想的情况是

828
00:26:42,766 --> 00:26:44,016
参与的执行过程

829
00:26:44,016 --> 00:26:44,536
存在于框架之内

830
00:26:45,596 --> 00:26:46,616
同时也要记住

831
00:26:46,616 --> 00:26:48,056
Core Spotlight Extension 对于

832
00:26:48,056 --> 00:26:49,186
支持拖放而言非常关键

833
00:26:49,776 --> 00:26:51,066
如果你没有 Extension

834
00:26:51,066 --> 00:26:52,506
当用户向你在另一个 App 的

835
00:26:52,746 --> 00:26:55,386
应用程序里拖放条目时

836
00:26:55,386 --> 00:26:56,676
就没有东西可调用

837
00:26:56,676 --> 00:27:00,916
当然你可以在不使用客户端状态的

838
00:26:56,676 --> 00:27:00,916
当然你可以在不使用客户端状态的

839
00:27:00,916 --> 00:27:02,506
情况下获得创建索引的

840
00:27:02,506 --> 00:27:02,936
权利

841
00:27:03,226 --> 00:27:05,076
我们发现这可以让任务变得

842
00:27:05,106 --> 00:27:05,846
更简单

843
00:27:06,406 --> 00:27:07,896
客户端状态可以让

844
00:27:07,896 --> 00:27:09,326
你的 Spotlight 与你的数据库同步

845
00:27:09,326 --> 00:27:11,826
并且无需繁冗操作

846
00:27:14,816 --> 00:27:16,106
客户端状态是一种

847
00:27:16,106 --> 00:27:16,776
模糊的 Spotlight

848
00:27:17,416 --> 00:27:18,886
它的性质由你来决定

849
00:27:19,616 --> 00:27:21,116
它通常是一个简单的整数

850
00:27:21,346 --> 00:27:24,026
代表一串序列号

851
00:27:24,166 --> 00:27:25,916
这串序列号在数据库日志中

852
00:27:25,916 --> 00:27:27,766
被标记出来

853
00:27:27,766 --> 00:27:29,086
但是我们也见过更复杂的例子

854
00:27:30,306 --> 00:27:31,386
我们来看看它是怎么一回事

855
00:27:33,486 --> 00:27:34,756
你的 App 向 Core Spotlight

856
00:27:34,756 --> 00:27:36,276
发送了批任务

857
00:27:36,306 --> 00:27:37,916
每个批任务都有客户端状态日志

858
00:27:38,796 --> 00:27:39,656
当批任务依照日志而展开进行时

859
00:27:40,146 --> 00:27:41,486
你的回调日志就

860
00:27:41,486 --> 00:27:42,896
被调用了

861
00:27:42,896 --> 00:27:44,026
以便让你知道  批任务已被接收

862
00:27:45,016 --> 00:27:47,316
这里的 App 只是将一个新的

863
00:27:47,316 --> 00:27:50,096
批任务加入索引

864
00:27:50,096 --> 00:27:51,506
但会导致灾难降临 让 App 崩溃

865
00:27:52,826 --> 00:27:53,866
当元数据中发生的情况

866
00:27:53,866 --> 00:27:55,516
是未提交的状态

867
00:27:55,516 --> 00:27:56,236
可以通过索引找到吗

868
00:27:56,746 --> 00:27:59,166
用客户端状态

869
00:28:00,226 --> 00:28:00,306
你就可以找到它

870
00:28:00,576 --> 00:28:01,986
当你的 App 再次启动时

871
00:28:01,986 --> 00:28:03,696
你请求用户端状态

872
00:28:04,186 --> 00:28:05,586
现在你收到了状态二

873
00:28:05,656 --> 00:28:07,386
因为这实际上是日志中的

874
00:28:07,386 --> 00:28:08,466
最后一个状态

875
00:28:08,466 --> 00:28:09,986
你正好可以在正确的节点

876
00:28:09,986 --> 00:28:11,346
重新开始创建

877
00:28:11,346 --> 00:28:11,666
索引

878
00:28:12,306 --> 00:28:15,046
如果 App 出现崩溃时

879
00:28:15,046 --> 00:28:16,306
数据在 Core Spotlight 的程序中

880
00:28:16,306 --> 00:28:17,446
已经实现了这一点

881
00:28:17,446 --> 00:28:18,456
你就可以从状态三继续

882
00:28:18,456 --> 00:28:19,836
这样一来你的工作量

883
00:28:19,836 --> 00:28:20,886
就会很少

884
00:28:21,916 --> 00:28:24,156
要想保存用户端状态

885
00:28:24,156 --> 00:28:25,306
你需要创建一个命名索引

886
00:28:25,786 --> 00:28:27,116
你不能使用这个默认

887
00:28:27,116 --> 00:28:27,636
示例

888
00:28:28,546 --> 00:28:30,196
从命名我们就可以知道

889
00:28:30,196 --> 00:28:31,816
哪个是要提取的

890
00:28:31,816 --> 00:28:33,446
哪个是被请求的 因为

891
00:28:33,446 --> 00:28:34,346
有些 App 需要的代表符号不止一个

892
00:28:34,616 --> 00:28:35,526
比如 因为它们是

893
00:28:35,526 --> 00:28:36,466
复合数据库

894
00:28:37,586 --> 00:28:39,536
所以 在你的代码中

895
00:28:39,536 --> 00:28:40,896
你首先需要创建命名索引实例

896
00:28:41,746 --> 00:28:44,716
你会开始建立索引批任务

897
00:28:44,946 --> 00:28:46,456
像平常一样加入可搜索项目

898
00:28:46,966 --> 00:28:49,106
然后你需要计算

899
00:28:49,106 --> 00:28:50,016
想要存储的状态

900
00:28:51,306 --> 00:28:53,606
最终你用你的模糊状态

901
00:28:53,606 --> 00:28:55,326
结束批任务

902
00:28:55,326 --> 00:28:57,026
注意完成句柄返回的

903
00:28:57,026 --> 00:28:58,036
所有错误

904
00:28:58,526 --> 00:29:01,556
所以  在这后面的一些节点上

905
00:28:58,526 --> 00:29:01,556
所以  在这后面的一些节点上

906
00:29:01,556 --> 00:29:03,016
你的 App 或 Extension 开始

907
00:29:04,066 --> 00:29:05,516
利用客户端状态

908
00:29:05,516 --> 00:29:05,976
继续开始索引

909
00:29:06,486 --> 00:29:09,496
你读取客户端状态

910
00:29:09,496 --> 00:29:10,996
把它和当前状态进行比较

911
00:29:10,996 --> 00:29:12,826
再想尽办法

912
00:29:12,826 --> 00:29:14,096
让它们保持同步

913
00:29:14,486 --> 00:29:18,406
所以 在你的代码里

914
00:29:18,406 --> 00:29:19,536
你为同一名称创建了索引实例

915
00:29:19,536 --> 00:29:22,376
你读取到客户端状态

916
00:29:22,676 --> 00:29:25,126
在处理完所有的错误后

917
00:29:25,756 --> 00:29:26,846
检查状态

918
00:29:27,526 --> 00:29:29,746
然后根据需要

919
00:29:29,746 --> 00:29:31,316
只从原先中断的地方继续

920
00:29:31,556 --> 00:29:34,156
这样你就可以重新进行

921
00:29:34,156 --> 00:29:35,286
必要的操作

922
00:29:35,286 --> 00:29:36,796
从而让你的索引和

923
00:29:36,796 --> 00:29:37,736
Core Spotlight 同步

924
00:29:41,336 --> 00:29:42,556
我们再来说说

925
00:29:42,556 --> 00:29:43,566
索引的性能表现

926
00:29:44,236 --> 00:29:46,036
索引是一个后台任务

927
00:29:46,036 --> 00:29:47,226
你肯定不想让索引工作

928
00:29:47,226 --> 00:29:48,846
拖慢你的 App 或设备

929
00:29:48,846 --> 00:29:49,526
运行速度

930
00:29:50,076 --> 00:29:53,476
所以  系统负担要最小化

931
00:29:53,476 --> 00:29:55,296
要优化对文件系统或数据库的访问

932
00:29:55,296 --> 00:29:58,026
唯有如此

933
00:29:58,026 --> 00:29:58,976
你才能创建各种项目

934
00:29:59,626 --> 00:30:01,536
记住 Core Spotlight 的每次调用

935
00:29:59,626 --> 00:30:01,536
记住 Core Spotlight 的每次调用

936
00:30:01,536 --> 00:30:03,166
都产生系统开销

937
00:30:03,856 --> 00:30:06,306
所以只要有可能  就应当使用

938
00:30:06,306 --> 00:30:08,236
批处理项目 而不是

939
00:30:08,446 --> 00:30:08,846
单个项目

940
00:30:09,476 --> 00:30:11,706
也就是说 鉴于存储空间有限

941
00:30:11,706 --> 00:30:15,326
所以你要将批量控制在

942
00:30:15,326 --> 00:30:16,416
合理的小范围内

943
00:30:16,576 --> 00:30:18,056
即使每一批次只有 10 个项

944
00:30:18,056 --> 00:30:19,676
也会逐级按规模地增加

945
00:30:19,676 --> 00:30:20,426
系统开销

946
00:30:21,126 --> 00:30:23,016
多数情况下 以流水线形式

947
00:30:23,016 --> 00:30:25,286
进行多批次处理

948
00:30:25,286 --> 00:30:27,106
相比使用单个大批量处理

949
00:30:27,316 --> 00:30:30,296
更有效率

950
00:30:30,296 --> 00:30:31,516
这样可以让索引和你的工作

951
00:30:31,516 --> 00:30:33,756
平行开展

952
00:30:34,046 --> 00:30:35,336
因为这样一来

953
00:30:36,016 --> 00:30:38,196
你的 App 在使用过程中

954
00:30:38,196 --> 00:30:38,766
创建索引也不会阻碍主线程

955
00:30:38,866 --> 00:30:40,896
最后 在后台排队进行索引

956
00:30:40,896 --> 00:30:42,356
将有助于提高功效和

957
00:30:42,356 --> 00:30:43,676
反应快捷的程度

958
00:30:44,246 --> 00:30:47,576
要想让 Spotlight 的内容显得美观

959
00:30:47,576 --> 00:30:49,136
你需要建立一个

960
00:30:49,136 --> 00:30:49,596
好的缩略图

961
00:30:51,006 --> 00:30:52,506
在默认状态下  Spotlight 会使用

962
00:30:52,506 --> 00:30:54,066
你的 App 图标

963
00:30:54,106 --> 00:30:55,446
这让人很难一眼就区分出

964
00:30:55,446 --> 00:30:55,946
结果

965
00:30:56,846 --> 00:30:59,116
与缩略图同样重要的是

966
00:30:59,116 --> 00:31:01,306
项目的标题  这个标题

967
00:30:59,116 --> 00:31:01,306
项目的标题  这个标题

968
00:31:01,306 --> 00:31:03,056
不仅是视觉直观意义上的  它也是

969
00:31:03,056 --> 00:31:04,176
用户们最常搜索的

970
00:31:04,176 --> 00:31:04,896
目标

971
00:31:05,366 --> 00:31:07,426
在设置好缩略图和标题后

972
00:31:07,426 --> 00:31:09,056
你需要设置其他

973
00:31:09,056 --> 00:31:10,286
适用于个人联系的

974
00:31:10,286 --> 00:31:11,326
字段

975
00:31:12,636 --> 00:31:14,256
你的描述可以提供更为

976
00:31:14,256 --> 00:31:16,196
丰富的信息

977
00:31:16,196 --> 00:31:17,866
显示内容创建的时间

978
00:31:17,866 --> 00:31:20,376
也很有帮助

979
00:31:20,376 --> 00:31:22,216
只要出现在合适的地方

980
00:31:22,216 --> 00:31:23,776
排名和排名描述

981
00:31:23,776 --> 00:31:24,446
也能发挥重大作用

982
00:31:24,866 --> 00:31:26,616
如果你知道某个应用所在的位置

983
00:31:26,616 --> 00:31:28,036
设定位置名称

984
00:31:28,036 --> 00:31:29,246
算得上是很好的尝试

985
00:31:29,746 --> 00:31:35,426
因此  设置好标题

986
00:31:35,426 --> 00:31:37,386
提供一个好的缩略图

987
00:31:37,416 --> 00:31:39,466
并且给你的内容设置正确的内容类型

988
00:31:40,076 --> 00:31:41,136
然后用补充的元数据

989
00:31:41,136 --> 00:31:42,456
填写用户界面

990
00:31:42,456 --> 00:31:43,746
创造出内容方面的最佳

991
00:31:43,746 --> 00:31:44,326
视觉展示效果

992
00:31:44,896 --> 00:31:46,676
要记住 设置正确的元数据

993
00:31:46,676 --> 00:31:48,076
不仅只是考虑到外观效果

994
00:31:48,076 --> 00:31:50,416
它还会对行为产生影响

995
00:31:50,996 --> 00:31:53,726
我们来看看这个

996
00:31:53,896 --> 00:31:55,236
对于初学者来说

997
00:31:55,236 --> 00:31:56,536
增强快速操作功能 例如指示和调用

998
00:31:56,536 --> 00:31:57,946
可以让用户的界面更丰富

999
00:31:57,946 --> 00:31:59,866
而且能够给用户带来

1000
00:31:59,866 --> 00:32:00,486
更大价值

1001
00:31:59,866 --> 00:32:00,486
更大价值

1002
00:32:01,476 --> 00:32:03,176
为了支持导航功能

1003
00:32:03,216 --> 00:32:04,566
你需要设置

1004
00:32:04,566 --> 00:32:06,226
经纬度属性  并将导航支持

1005
00:32:06,226 --> 00:32:07,906
设置为 True

1006
00:32:08,366 --> 00:32:10,136
同样 为了支持电话功能

1007
00:32:10,136 --> 00:32:11,706
你需要设置电话号码属性

1008
00:32:11,706 --> 00:32:13,516
并将支持导航设置为

1009
00:32:13,516 --> 00:32:14,806
True 抱歉说错了

1010
00:32:15,506 --> 00:32:17,506
应该是将呼叫行为设置为

1011
00:32:17,506 --> 00:32:17,696
True

1012
00:32:18,486 --> 00:32:21,026
设置用户能够理解的属性

1013
00:32:21,026 --> 00:32:22,856
能够使得搜索

1014
00:32:22,856 --> 00:32:23,356
更加方便

1015
00:32:23,866 --> 00:32:24,916
设置与项目本身

1016
00:32:24,916 --> 00:32:26,146
并没有多少自然联系的属性

1017
00:32:26,146 --> 00:32:27,556
会给搜索造成困难

1018
00:32:27,556 --> 00:32:28,646
并导致你的结果在排名表现上

1019
00:32:28,646 --> 00:32:29,336
很糟糕

1020
00:32:29,746 --> 00:32:31,996
通过设置联系人标识符

1021
00:32:32,566 --> 00:32:34,016
你可以集中进行

1022
00:32:34,016 --> 00:32:35,666
联系人的搜索

1023
00:32:35,876 --> 00:32:38,076
这是让用户获取你内容的好办法

1024
00:32:39,376 --> 00:32:40,646
有一些辅助特性 比如

1025
00:32:40,646 --> 00:32:42,756
拖放和快速操作

1026
00:32:43,856 --> 00:32:44,796
它们会为你带来一流的

1027
00:32:44,796 --> 00:32:45,406
体验

1028
00:32:46,636 --> 00:32:48,086
另一种体验  是能够

1029
00:32:48,086 --> 00:32:49,116
让[音质不清晰]

1030
00:32:49,116 --> 00:32:49,676
融入到你自己的应用中

1031
00:32:49,676 --> 00:32:52,286
我们来看看它是什么

1032
00:32:53,096 --> 00:32:53,236
情况

1033
00:32:53,416 --> 00:32:54,396
要确保在 Spotlight 中

1034
00:32:54,396 --> 00:32:55,906
快速完成搜索

1035
00:32:55,906 --> 00:32:57,156
让用户可以直接启动

1036
00:32:57,156 --> 00:32:57,876
找到的项目

1037
00:32:59,206 --> 00:33:00,706
用 NSUserActivity 来储存状态

1038
00:32:59,206 --> 00:33:00,706
用 NSUserActivity 来储存状态

1039
00:33:00,706 --> 00:33:03,016
你的 App 委托

1040
00:33:03,016 --> 00:33:04,296
将是一种持续的作业

1041
00:33:04,296 --> 00:33:06,096
你的[音质不清晰]作业类型以及

1042
00:33:06,096 --> 00:33:08,586
用户信息字典

1043
00:33:08,586 --> 00:33:09,686
则是非常有必要的

1044
00:33:09,946 --> 00:33:10,956
如果因为用户在 Spotlight 中

1045
00:33:10,956 --> 00:33:11,716
选择了一个 CSSearchableItem

1046
00:33:11,716 --> 00:33:13,286
所以你要启动程序

1047
00:33:13,286 --> 00:33:15,296
那么这个作业类型将成为

1048
00:33:15,406 --> 00:33:18,226
CSSearchableItem 操作类型

1049
00:33:18,386 --> 00:33:20,666
使用 CSSearchableItem

1050
00:33:20,666 --> 00:33:21,726
作业标识符

1051
00:33:21,726 --> 00:33:22,696
就可以从用户信息字典里

1052
00:33:22,776 --> 00:33:24,136
获取到独一无二的

1053
00:33:24,136 --> 00:33:24,856
标识符

1054
00:33:26,056 --> 00:33:27,266
启动作业的另一个原因是

1055
00:33:27,266 --> 00:33:29,946
用户想要

1056
00:33:29,946 --> 00:33:31,476
在你的应用里

1057
00:33:31,476 --> 00:33:32,026
继续搜索

1058
00:33:32,596 --> 00:33:33,656
在这种情况下

1059
00:33:33,656 --> 00:33:35,376
你得到的是 CSQueryContinuation

1060
00:33:35,896 --> 00:33:38,266
操作类型  这样就可以利用

1061
00:33:38,266 --> 00:33:39,176
CSSearchQueryString

1062
00:33:39,176 --> 00:33:40,736
从用户信息字典中找到

1063
00:33:40,736 --> 00:33:41,696
搜索查询内容

1064
00:33:42,046 --> 00:33:45,536
当然 如果没有搜索 API

1065
00:33:45,536 --> 00:33:46,786
搜索系统便是

1066
00:33:46,786 --> 00:33:47,316
不完整的

1067
00:33:48,316 --> 00:33:49,636
Core Spotlight 能够

1068
00:33:49,636 --> 00:33:51,036
帮助搜索你已经提供的

1069
00:33:51,036 --> 00:33:51,686
数据

1070
00:33:52,656 --> 00:33:53,856
这是系统里多处使用到的

1071
00:33:53,856 --> 00:33:55,586
同一种搜索

1072
00:33:55,586 --> 00:33:56,076
引擎

1073
00:33:56,856 --> 00:33:58,616
通过使用它  你可以

1074
00:33:58,616 --> 00:33:59,906
持续地使用 Spotlight 和

1075
00:33:59,906 --> 00:34:00,926
系统应用

1076
00:33:59,906 --> 00:34:00,926
系统应用

1077
00:34:01,526 --> 00:34:02,836
这对于你设备中的

1078
00:34:02,836 --> 00:34:04,616
所有内容都非常有益

1079
00:34:04,616 --> 00:34:06,346
当然了 它在 iOS 和 macOS 里均可使用

1080
00:34:06,866 --> 00:34:11,576
你可以查询规格大小相同的项目

1081
00:34:11,576 --> 00:34:12,746
也更以查找更大一些 或稍小一些的项目

1082
00:34:13,786 --> 00:34:15,306
所以  如果你想要查找

1083
00:34:15,306 --> 00:34:16,505
超过一定页数的项目

1084
00:34:16,505 --> 00:34:18,676
查询语句是非常

1085
00:34:18,676 --> 00:34:19,126
简短的

1086
00:34:19,666 --> 00:34:20,966
如果你想找到页数限定

1087
00:34:20,966 --> 00:34:22,045
在一定范围内的所有项目

1088
00:34:22,045 --> 00:34:23,466
你可以使用 InRange 运算符

1089
00:34:23,966 --> 00:34:26,146
你还可以使用

1090
00:34:26,216 --> 00:34:27,456
布尔运算符 比如说 用它来

1091
00:34:27,456 --> 00:34:29,476
筛选符合特定宽度和高度的

1092
00:34:29,476 --> 00:34:29,696
项目

1093
00:34:30,396 --> 00:34:32,396
你可以使用配有旗标的字符串

1094
00:34:32,396 --> 00:34:33,606
来改变 Spotlight 匹配的

1095
00:34:33,606 --> 00:34:35,076
严格程度

1096
00:34:36,016 --> 00:34:37,416
关于采用敏感度较低的

1097
00:34:37,516 --> 00:34:38,136
文字匹配

1098
00:34:38,136 --> 00:34:40,136
[音质不清晰]

1099
00:34:40,136 --> 00:34:42,045
与其他带有旗标的组合形成不敏感的匹配

1100
00:34:42,045 --> 00:34:43,556
或是符合所有字段的严格匹配

1101
00:34:45,315 --> 00:34:46,326
或者说  你可以让自己匹配标准非常宽松

1102
00:34:46,326 --> 00:34:47,866
把每个单词都当成

1103
00:34:47,866 --> 00:34:48,846
一次独立查询

1104
00:34:49,576 --> 00:34:50,926
这就是 Spotlight 的工作机制

1105
00:34:50,926 --> 00:34:52,295
如果你想要前后保持一致

1106
00:34:52,295 --> 00:34:54,246
从这里开始 是一个不错的

1107
00:34:54,246 --> 00:34:54,585
选择

1108
00:34:55,196 --> 00:34:57,346
当然 如果这不适合你的应用程序

1109
00:34:57,346 --> 00:34:59,146
你可以按照自己的意愿

1110
00:34:59,146 --> 00:35:00,636
进行自由组合 或是

1111
00:34:59,146 --> 00:35:00,636
进行自由组合 或是

1112
00:35:00,636 --> 00:35:00,996
混合搭配

1113
00:35:04,496 --> 00:35:06,156
Core Spotlight 支持全系列的

1114
00:35:06,156 --> 00:35:07,716
比较运算符

1115
00:35:07,896 --> 00:35:09,456
和布尔逻辑

1116
00:35:09,456 --> 00:35:10,286
当然 你可以用圆括号

1117
00:35:10,286 --> 00:35:11,666
来嵌入表达内容

1118
00:35:12,066 --> 00:35:13,306
字段通配符将会匹配

1119
00:35:13,306 --> 00:35:15,426
所有默认搜索的元数据

1120
00:35:15,426 --> 00:35:16,806
而双通配符会

1121
00:35:16,806 --> 00:35:18,216
与之匹配  它与文本内容也同样匹配

1122
00:35:18,636 --> 00:35:21,326
对于字符串的匹配

1123
00:35:21,326 --> 00:35:22,056
我们有很多选择

1124
00:35:22,376 --> 00:35:23,886
我们的索引已经很大程度上

1125
00:35:23,886 --> 00:35:25,456
优化了精确搜索和前缀搜索

1126
00:35:25,506 --> 00:35:27,396
如果使用这些方法 你会发现

1127
00:35:27,876 --> 00:35:28,046
它的速度快得惊人

1128
00:35:28,696 --> 00:35:30,376
一般情况下

1129
00:35:30,376 --> 00:35:33,116
前缀越长  查询越快

1130
00:35:34,046 --> 00:35:35,616
部分匹配与前缀匹配

1131
00:35:35,616 --> 00:35:37,416
极为相似  关键是要看

1132
00:35:37,416 --> 00:35:39,396
哪种方法可以更快得到结果

1133
00:35:39,396 --> 00:35:42,296
这取决于字符串

1134
00:35:42,386 --> 00:35:43,896
词组匹配意味着只是

1135
00:35:43,896 --> 00:35:45,196
匹配连续的几个词

1136
00:35:45,196 --> 00:35:46,876
它耗费的资源肯定更高一些

1137
00:35:48,766 --> 00:35:50,146
最后是后缀和内缀匹配

1138
00:35:50,146 --> 00:35:51,536
它们速度会更慢

1139
00:35:51,536 --> 00:35:52,806
这些内容  再加上词组匹配 

1140
00:35:52,806 --> 00:35:55,086
导致所需时间也大大增加

1141
00:35:56,696 --> 00:35:58,446
查询句法也会提供一组旗标

1142
00:35:58,446 --> 00:35:59,856
通过它们

1143
00:36:00,046 --> 00:36:00,886
你可以让匹配规则少一些

1144
00:36:00,886 --> 00:36:01,306
严苛条件

1145
00:36:01,746 --> 00:36:03,696
这个 C 代表不区分大小写

1146
00:36:03,696 --> 00:36:04,976
D 代表不区分变音符号

1147
00:36:05,236 --> 00:36:09,166
这是说像这样的

1148
00:36:09,166 --> 00:36:10,976
字符仍然能够

1149
00:36:10,976 --> 00:36:12,326
与某个旧字符相匹配

1150
00:36:12,426 --> 00:36:14,046
如果用户的本地语言

1151
00:36:14,046 --> 00:36:14,416
是英语的话

1152
00:36:15,776 --> 00:36:17,706
逐字匹配的意思是

1153
00:36:17,706 --> 00:36:19,606
我们将词汇与字段内部

1154
00:36:19,606 --> 00:36:21,246
相匹配

1155
00:36:21,246 --> 00:36:22,166
而不仅是锁定于字段的开端

1156
00:36:22,256 --> 00:36:24,516
T 代表令牌化

1157
00:36:24,516 --> 00:36:25,656
它把查询里的单个单词进行了拆解

1158
00:36:27,496 --> 00:36:28,886
我们来看一个例子

1159
00:36:30,636 --> 00:36:31,786
我们正在执行搜索功能

1160
00:36:31,786 --> 00:36:33,046
我们把用户的查询

1161
00:36:33,046 --> 00:36:33,566
作为输入

1162
00:36:34,786 --> 00:36:36,166
首先 我们要确保取消

1163
00:36:36,166 --> 00:36:37,846
当前所有正在运行的查询

1164
00:36:37,846 --> 00:36:38,736
这样我们就不会有多个

1165
00:36:38,736 --> 00:36:40,066
同时发生的查询

1166
00:36:40,066 --> 00:36:41,066
因为这样会使新的查询速度变慢

1167
00:36:41,606 --> 00:36:42,876
因为它是由用户输入

1168
00:36:42,876 --> 00:36:44,256
我们要确保对查询字符串作出说明

1169
00:36:44,776 --> 00:36:47,736
然后我们用双星句法和

1170
00:36:47,736 --> 00:36:51,496
Cdwmt 运算符

1171
00:36:51,546 --> 00:36:53,056
来开展一次很不严格的查询

1172
00:36:53,516 --> 00:36:57,286
我们创建一个查询对象

1173
00:36:57,856 --> 00:36:59,076
具体就是我们想获取

1174
00:36:59,076 --> 00:36:59,806
显示名称

1175
00:37:00,346 --> 00:37:02,736
我们设置查找项目句柄

1176
00:37:03,246 --> 00:37:05,036
然后设置

1177
00:37:05,036 --> 00:37:05,296
完成句柄

1178
00:37:06,576 --> 00:37:09,966
只有从查询中得不到更多结果时

1179
00:37:09,966 --> 00:37:11,056
完成句柄才会

1180
00:37:11,056 --> 00:37:12,576
被调用

1181
00:37:12,576 --> 00:37:14,516
而查找项目句柄

1182
00:37:14,516 --> 00:37:15,796
可以

1183
00:37:15,796 --> 00:37:17,106
被多批结果调用

1184
00:37:17,786 --> 00:37:19,886
之后他们需要做的就是

1185
00:37:19,886 --> 00:37:21,296
开始查询

1186
00:37:21,296 --> 00:37:22,816
使用 Core Spotlight 搜索 API

1187
00:37:22,816 --> 00:37:23,706
就是这么容易

1188
00:37:29,066 --> 00:37:30,656
总之  现在的 Core Spotlight

1189
00:37:30,656 --> 00:37:31,986
可用于 Mac

1190
00:37:31,986 --> 00:37:34,096
也可用于 iOS

1191
00:37:34,096 --> 00:37:35,166
对于你们管理的所有内容都很有用

1192
00:37:36,096 --> 00:37:37,696
请大家采用新的 API

1193
00:37:37,696 --> 00:37:40,136
或者 iOS 和 macOS 上的拖放

1194
00:37:40,136 --> 00:37:41,406
预览功能

1195
00:37:42,156 --> 00:37:43,556
为搜索 展示和排序

1196
00:37:43,556 --> 00:37:45,466
提供丰富的元数据

1197
00:37:45,846 --> 00:37:48,416
用 NSUserActivity 提供

1198
00:37:48,416 --> 00:37:49,646
使用信息

1199
00:37:50,136 --> 00:37:52,676
始终要注意的是

1200
00:37:52,676 --> 00:37:54,106
索引的准确性

1201
00:37:54,106 --> 00:37:55,806
并通过执行索引 Extension

1202
00:37:56,406 --> 00:37:58,646
和利用客户端状态

1203
00:37:59,236 --> 00:37:59,366
来更新索引

1204
00:38:01,186 --> 00:38:02,796
更多内容请访问

1205
00:38:02,796 --> 00:38:06,876
developer.apple.com

1206
00:38:06,876 --> 00:38:08,236
大家也可以观看本周

1207
00:38:08,236 --> 00:38:09,816
较早的会议

1208
00:38:09,886 --> 00:38:11,496
如果你对拖放感兴趣

1209
00:38:11,566 --> 00:38:13,036
这里面会有具体介绍

1210
00:38:13,086 --> 00:38:14,506
它会推荐一些如何熟练操控

1211
00:38:15,056 --> 00:38:15,796
拖放的内容

1212
00:38:15,936 --> 00:38:17,936
如果你想知道

1213
00:38:17,936 --> 00:38:19,246
CoreData 和 Core Spotlight

1214
00:38:19,246 --> 00:38:21,286
是如何交互的

1215
00:38:21,286 --> 00:38:23,206
“CoreData 有何创新”

1216
00:38:23,206 --> 00:38:23,556
这场会议也非常值得观看
