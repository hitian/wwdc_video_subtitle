1
00:00:17,551 --> 00:00:19,987
<c.magenta>（Cocoa新特性）</c>

2
00:00:24,424 --> 00:00:25,292
<c.magenta>谢谢</c>

3
00:00:26,193 --> 00:00:27,995
<c.magenta>谢谢 早上好 欢迎大家</c>

4
00:00:28,061 --> 00:00:30,631
<c.magenta>我叫阿里·欧泽</c>

5
00:00:30,697 --> 00:00:33,200
<c.magenta>我们将聊聊在这一年中</c>

6
00:00:34,368 --> 00:00:37,804
<c.magenta>我们今天菜单上的开胃菜</c>

7
00:00:38,038 --> 00:00:40,674
<c.magenta>然后是两个主菜</c>

8
00:00:41,542 --> 00:00:42,576
<c.magenta>我们开始吧</c>

9
00:00:43,710 --> 00:00:45,245
<c.magenta>在API改进方面</c>

10
00:00:45,946 --> 00:00:49,049
<c.magenta>在过去几年里 我们已经讲了</c>

11
00:00:49,149 --> 00:00:51,051
<c.magenta>框架的API外接</c>

12
00:00:51,485 --> 00:00:56,156
<c.magenta>属性 为空性 泛型</c>

13
00:00:56,490 --> 00:00:59,326
<c.magenta>最近 又有字符串枚举和嵌套类型</c>

14
00:00:59,760 --> 00:01:02,229
<c.magenta>这次 我将聊一下后两者</c>

15
00:00:59,760 --> 00:01:02,229
<c.magenta>这次 我将聊一下后两者</c>

16
00:01:02,729 --> 00:01:05,566
<c.magenta>我会举一个涉及这两者的例子</c>

17
00:01:06,033 --> 00:01:09,203
<c.magenta>在这个我们关注的场景中</c>

18
00:01:09,269 --> 00:01:12,005
<c.magenta>你会在我们很多的API中看到它</c>

19
00:01:14,007 --> 00:01:18,212
<c.magenta>这是NSSharingService</c>

20
00:01:18,745 --> 00:01:20,247
<c.magenta>我们有很多全局符号</c>

21
00:01:20,314 --> 00:01:22,683
<c.magenta>如你这里所见</c>

22
00:01:22,950 --> 00:01:25,686
<c.magenta>然后我们有方法</c>

23
00:01:26,253 --> 00:01:28,255
<c.magenta>它以一个字符串类型变量</c>

24
00:01:29,089 --> 00:01:32,359
<c.magenta>现在Swift 4中</c>

25
00:01:32,726 --> 00:01:36,029
<c.magenta>这个类型是嵌套</c>

26
00:01:36,663 --> 00:01:38,765
<c.magenta>初始化方法现以</c>

27
00:01:38,832 --> 00:01:40,267
<c.magenta>NSSharingService.Name</c>

28
00:01:40,868 --> 00:01:43,871
<c.magenta>当然 这个值</c>

29
00:01:43,937 --> 00:01:46,340
<c.magenta>现在被用来声明</c>

30
00:01:46,640 --> 00:01:49,910
<c.magenta>它们的名字短了很多</c>

31
00:01:50,310 --> 00:01:52,779
<c.magenta>有了它 代码变简单了很多</c>

32
00:01:53,247 --> 00:01:56,817
<c.magenta>不同于在Swift 3</c>

33
00:01:57,117 --> 00:02:00,287
<c.magenta>当然 当你码代码的时候</c>

34
00:01:57,117 --> 00:02:00,287
<c.magenta>当然 当你码代码的时候</c>

35
00:02:00,821 --> 00:02:04,091
<c.magenta>就是这样 当你输入点号</c>

36
00:02:04,157 --> 00:02:05,859
<c.magenta>对于这个初始化方法是合理的</c>

37
00:02:05,926 --> 00:02:08,362
<c.magenta>而不是在框架中的所有字符串</c>

38
00:02:09,429 --> 00:02:13,033
<c.magenta>对于这个改动导致的源代码兼容性</c>

39
00:02:13,100 --> 00:02:14,434
<c.magenta>（代码兼容性</c>

40
00:02:14,501 --> 00:02:16,270
<c.magenta>在Objective-C中</c>

41
00:02:16,603 --> 00:02:18,939
<c.magenta>这只是Swift的东西</c>

42
00:02:19,106 --> 00:02:22,409
<c.magenta>通过你这里看到的类型定义</c>

43
00:02:22,643 --> 00:02:24,311
<c.magenta>这是完全代码兼容的</c>

44
00:02:24,378 --> 00:02:26,613
<c.magenta>对于Objective-C</c>

45
00:02:27,347 --> 00:02:31,818
<c.magenta>在Swift中</c>

46
00:02:32,119 --> 00:02:33,921
<c.magenta>所以你的代码是兼容的</c>

47
00:02:34,321 --> 00:02:35,956
<c.magenta>Swift 4有一个全新的名字</c>

48
00:02:36,023 --> 00:02:39,293
<c.magenta>老名字不再存在</c>

49
00:02:39,826 --> 00:02:41,695
<c.magenta>但是 我们有一个迁移器</c>

50
00:02:42,796 --> 00:02:45,866
<c.magenta>转移到Swift 4</c>

51
00:02:46,200 --> 00:02:47,668
<c.magenta>转移你的代码</c>

52
00:02:48,836 --> 00:02:49,703
<c.magenta>就是这个</c>

53
00:02:49,803 --> 00:02:51,505
<c.magenta>这就是API改进</c>

54
00:02:51,572 --> 00:02:54,608
<c.magenta>你会看到我们很多API</c>

55
00:02:55,843 --> 00:02:57,978
<c.magenta>接下来</c>

56
00:02:58,078 --> 00:03:01,682
<c.magenta>我会从去年秋季引入的</c>

57
00:02:58,078 --> 00:03:01,682
<c.magenta>我会从去年秋季引入的</c>

58
00:03:01,748 --> 00:03:03,617
<c.magenta>当然 这就是触控条</c>

59
00:03:06,787 --> 00:03:08,188
<c.magenta>触控条…</c>

60
00:03:09,089 --> 00:03:09,923
<c.magenta>所以…</c>

61
00:03:12,259 --> 00:03:13,694
<c.magenta>正如你们中很多人注意到的那样</c>

62
00:03:13,760 --> 00:03:17,865
<c.magenta>触控条是一个输入设备</c>

63
00:03:18,131 --> 00:03:21,668
<c.magenta>它为系统和默认提供了控制</c>

64
00:03:21,735 --> 00:03:23,804
<c.magenta>默认地 活动应用</c>

65
00:03:24,371 --> 00:03:28,275
<c.magenta>作为一个多点触控输入设备</c>

66
00:03:28,542 --> 00:03:32,045
<c.magenta>触控条提供了丰富交互</c>

67
00:03:33,247 --> 00:03:36,483
<c.magenta>这些是作为系统一部分</c>

68
00:03:36,717 --> 00:03:38,585
<c.magenta>以及系统应用一部分的触控条</c>

69
00:03:38,652 --> 00:03:41,255
<c.magenta>如你所见</c>

70
00:03:41,321 --> 00:03:43,657
<c.magenta>和这些控制中的交互模型</c>

71
00:03:43,991 --> 00:03:46,894
<c.magenta>关于触控条</c>

72
00:03:47,427 --> 00:03:50,964
<c.magenta>尽管它是漂亮的显示器</c>

73
00:03:51,031 --> 00:03:52,699
<c.magenta>这是它存在的重要目的</c>

74
00:03:52,766 --> 00:03:54,868
<c.magenta>它不适合用来显示</c>

75
00:03:54,935 --> 00:03:57,538
<c.magenta>比如股票 代码</c>

76
00:03:57,671 --> 00:04:01,375
<c.magenta>所以在你的应用中</c>

77
00:03:57,671 --> 00:04:01,375
<c.magenta>所以在你的应用中</c>

78
00:04:02,109 --> 00:04:04,978
<c.magenta>我将强调一些特性</c>

79
00:04:05,045 --> 00:04:07,781
<c.magenta>成为支持你应用的好功能</c>

80
00:04:09,816 --> 00:04:11,718
<c.magenta>首先 触控条</c>

81
00:04:11,818 --> 00:04:14,788
<c.magenta>意味着它容易适应</c>

82
00:04:15,155 --> 00:04:16,957
<c.magenta>举个简单的例子</c>

83
00:04:17,156 --> 00:04:18,725
<c.magenta>你在TextEdit中打字</c>

84
00:04:19,026 --> 00:04:21,894
<c.magenta>当你打字时</c>

85
00:04:21,995 --> 00:04:24,965
<c.magenta>用户输入任意内容的自动补全</c>

86
00:04:25,299 --> 00:04:28,435
<c.magenta>当你选取了文本</c>

87
00:04:28,502 --> 00:04:30,704
<c.magenta>文字格式控制 如你这里所见</c>

88
00:04:30,771 --> 00:04:32,773
<c.magenta>颜色 加粗 斜体等等</c>

89
00:04:33,607 --> 00:04:37,144
<c.magenta>现在 你在输入邮件消息的收件人</c>

90
00:04:37,578 --> 00:04:39,913
<c.magenta>你可以看到</c>

91
00:04:40,514 --> 00:04:42,216
<c.magenta>给你电子邮箱地址</c>

92
00:04:42,282 --> 00:04:43,951
<c.magenta>事实上 邮件是在用预测</c>

93
00:04:44,384 --> 00:04:47,521
<c.magenta>地址来预测你可能想要输入的地址</c>

94
00:04:48,322 --> 00:04:51,191
<c.magenta>这里 当你输入邮件的主题行时</c>

95
00:04:51,258 --> 00:04:52,492
<c.magenta>你得到快速输入</c>

96
00:04:52,626 --> 00:04:55,729
<c.magenta>但是在触控条的最左边</c>

97
00:04:55,796 --> 00:04:57,064
<c.magenta>因为你在邮件中</c>

98
00:04:57,164 --> 00:05:00,033
<c.magenta>因此触控条的</c>

99
00:04:57,164 --> 00:05:00,033
<c.magenta>因此触控条的</c>

100
00:05:00,100 --> 00:05:01,869
<c.magenta>为此有很多例子</c>

101
00:05:02,736 --> 00:05:05,272
<c.magenta>第二 触控条是可定制的</c>

102
00:05:05,339 --> 00:05:09,109
<c.magenta>这使得用户可以安装</c>

103
00:05:09,176 --> 00:05:11,879
<c.magenta>所以用户可以定制默认的控制条</c>

104
00:05:12,613 --> 00:05:13,547
<c.magenta>比你所见</c>

105
00:05:13,614 --> 00:05:16,116
<c.magenta>他们可以选择使用一个延伸的控制条</c>

106
00:05:16,216 --> 00:05:19,052
<c.magenta>这样他们可以定制各种不同的方式</c>

107
00:05:19,453 --> 00:05:23,457
<c.magenta>他们也可以选择默认功能键</c>

108
00:05:23,991 --> 00:05:25,826
<c.magenta>对于他们选择的特殊应用</c>

109
00:05:26,927 --> 00:05:29,263
<c.magenta>另外 用户可以定制应用程序栏</c>

110
00:05:29,630 --> 00:05:31,431
<c.magenta>对于提供定制的应用</c>

111
00:05:31,698 --> 00:05:33,534
<c.magenta>比如 我们在一个计算器中</c>

112
00:05:33,600 --> 00:05:36,770
<c.magenta>你可以在视图菜单中选择定制工具栏</c>

113
00:05:38,071 --> 00:05:39,840
<c.magenta>会让你进入定制模式</c>

114
00:05:39,907 --> 00:05:42,342
<c.magenta>你可以看到触控条中的条目</c>

115
00:05:42,409 --> 00:05:44,811
<c.magenta>抖动表示待定制</c>

116
00:05:44,878 --> 00:05:46,213
<c.magenta>让我放大一些</c>

117
00:05:46,580 --> 00:05:50,117
<c.magenta>你可以将全部条目拖到触控条</c>

118
00:05:50,184 --> 00:05:52,719
<c.magenta>现在 注意定制化是一个可选的功能</c>

119
00:05:52,786 --> 00:05:54,388
<c.magenta>它就像NSToolbar</c>

120
00:05:56,056 --> 00:05:58,258
<c.magenta>现在用户期待你的应用中有该功能</c>

121
00:05:58,525 --> 00:06:01,695
<c.magenta>所以如果这是合理的话</c>

122
00:05:58,525 --> 00:06:01,695
<c.magenta>所以如果这是合理的话</c>

123
00:06:01,762 --> 00:06:04,798
<c.magenta>比如 如果你在触控条中</c>

124
00:06:04,865 --> 00:06:06,500
<c.magenta>或者你只是想让用户有这个能力</c>

125
00:06:06,567 --> 00:06:08,435
<c.magenta>在触控条中排列默认条目</c>

126
00:06:09,336 --> 00:06:11,872
<c.magenta>我想强调的最后一个触控条功能</c>

127
00:06:12,206 --> 00:06:16,210
<c.magenta>是它能提供内容的无障碍访问</c>

128
00:06:16,643 --> 00:06:20,147
<c.magenta>你可以重复利用触控条的存在</c>

129
00:06:20,214 --> 00:06:22,449
<c.magenta>来隐藏屏幕中的控制</c>

130
00:06:23,617 --> 00:06:25,085
<c.magenta>比如 这是Keynote</c>

131
00:06:25,152 --> 00:06:27,387
<c.magenta>实际上 这是我们用来演讲的应用</c>

132
00:06:27,754 --> 00:06:29,656
<c.magenta>这是在演讲模式中的Keynote</c>

133
00:06:29,790 --> 00:06:31,625
<c.magenta>你可以看到在演讲模式中</c>

134
00:06:31,692 --> 00:06:35,095
<c.magenta>屏幕上是没有控制按钮的</c>

135
00:06:35,162 --> 00:06:37,097
<c.magenta>使得我可以播放这些幻灯片</c>

136
00:06:37,164 --> 00:06:39,132
<c.magenta>到达任意我想要的一张幻灯片</c>

137
00:06:39,399 --> 00:06:41,902
<c.magenta>另一个例子是在全屏模式下的</c>

138
00:06:41,969 --> 00:06:44,838
<c.magenta>多媒体控制按钮从主屏幕中淡出了</c>

139
00:06:44,905 --> 00:06:47,207
<c.magenta>但是你仍然可以在触控条上展示它们</c>

140
00:06:48,976 --> 00:06:51,378
<c.magenta>我们做了一些重要的</c>

141
00:06:51,445 --> 00:06:54,781
<c.magenta>触控条的功能性</c>

142
00:06:55,048 --> 00:06:57,084
<c.magenta>我想强调其中的一部分</c>

143
00:06:57,918 --> 00:06:59,786
<c.magenta>我们从颜色选择器讲起</c>

144
00:06:59,853 --> 00:07:00,921
<c.magenta>（触控条颜色选择器）</c>

145
00:06:59,853 --> 00:07:00,921
<c.magenta>（触控条颜色选择器）</c>

146
00:07:00,988 --> 00:07:05,158
<c.magenta>你可能注意到了macOS Sierra中</c>

147
00:07:05,225 --> 00:07:07,361
<c.magenta>我们有两种颜色选择器模式</c>

148
00:07:07,427 --> 00:07:09,630
<c.magenta>简单模式和HSB模式</c>

149
00:07:10,063 --> 00:07:11,598
<c.magenta>我们现在增加一种模式选择器</c>

150
00:07:13,267 --> 00:07:15,536
<c.magenta>如你所见 有四种新增的模式</c>

151
00:07:15,869 --> 00:07:20,908
<c.magenta>灰度模式 RGB模式</c>

152
00:07:21,341 --> 00:07:24,278
<c.magenta>在Swatch模式中展示的颜色和</c>

153
00:07:24,344 --> 00:07:27,948
<c.magenta>在底部颜色选择器中的颜色是一样的</c>

154
00:07:28,015 --> 00:07:30,918
<c.magenta>它们是用户最喜欢的</c>

155
00:07:30,984 --> 00:07:32,319
<c.magenta>所以颜色在那里</c>

156
00:07:32,686 --> 00:07:33,720
<c.magenta>你也注意到</c>

157
00:07:34,021 --> 00:07:37,391
<c.magenta>我们在颜色选择器右端有个按钮</c>

158
00:07:37,591 --> 00:07:40,127
<c.magenta>能让你增加目前已选的颜色</c>

159
00:07:40,460 --> 00:07:42,930
<c.magenta>直接从触控条作为最爱样本</c>

160
00:07:42,996 --> 00:07:45,465
<c.magenta>有了这些新东西</c>

161
00:07:45,566 --> 00:07:47,234
<c.magenta>就变得相当先进</c>

162
00:07:47,301 --> 00:07:50,838
<c.magenta>在屏幕中的主颜色面板</c>

163
00:07:50,904 --> 00:07:51,939
<c.magenta>对于大多数使用情况</c>

164
00:07:52,005 --> 00:07:54,341
<c.magenta>回到我所说的</c>

165
00:07:54,408 --> 00:07:56,343
<c.magenta>启用内容的通畅访问</c>

166
00:07:56,410 --> 00:07:59,513
<c.magenta>没有开启颜色面板应用</c>

167
00:07:59,580 --> 00:08:00,547
<c.magenta>在大多数情况下</c>

168
00:07:59,580 --> 00:08:00,547
<c.magenta>在大多数情况下</c>

169
00:08:03,116 --> 00:08:06,386
<c.magenta>好的 对于触控条条目的颜色选择器</c>

170
00:08:06,920 --> 00:08:10,123
<c.magenta>这个新方法 这个新特性</c>

171
00:08:10,457 --> 00:08:14,261
<c.magenta>可以选择使用的颜色空间</c>

172
00:08:14,328 --> 00:08:16,763
<c.magenta>比如当前文档的颜色空间</c>

173
00:08:16,830 --> 00:08:19,967
<c.magenta>那么颜色选择器可以展示</c>

174
00:08:20,033 --> 00:08:21,401
<c.magenta>当在文档中使用的时候</c>

175
00:08:21,468 --> 00:08:23,036
<c.magenta>举个例子</c>

176
00:08:23,237 --> 00:08:24,838
<c.magenta>这是简单的颜色选择器</c>

177
00:08:25,839 --> 00:08:28,809
<c.magenta>现在如果你把allowedColorSpaces</c>

178
00:08:28,876 --> 00:08:30,978
<c.magenta>你发现颜色会更暗</c>

179
00:08:31,044 --> 00:08:33,947
<c.magenta>因为这是它们在CMYK文件中</c>

180
00:08:34,014 --> 00:08:35,182
<c.magenta>来个更加极端的例子</c>

181
00:08:35,249 --> 00:08:37,251
<c.magenta>如果你的文档是黑白的</c>

182
00:08:37,317 --> 00:08:38,952
<c.magenta>这是你将会得到的颜色</c>

183
00:08:39,385 --> 00:08:42,756
<c.magenta>我们对于NSGroupTouchBarItem</c>

184
00:08:43,090 --> 00:08:45,559
<c.magenta>首先是警告风格的构建器</c>

185
00:08:46,126 --> 00:08:49,329
<c.magenta>你可能主要到 当AppKit</c>

186
00:08:51,265 --> 00:08:54,968
<c.magenta>按钮会自动出现在触控条 就像这样</c>

187
00:08:55,035 --> 00:08:57,771
<c.magenta>如果你自己用这些按钮</c>

188
00:08:57,838 --> 00:09:00,607
<c.magenta>而且你想要做</c>

189
00:08:57,838 --> 00:09:00,607
<c.magenta>而且你想要做</c>

190
00:09:00,674 --> 00:09:04,511
<c.magenta>对于按钮的位置和大小</c>

191
00:09:05,279 --> 00:09:08,949
<c.magenta>这是初始化 AlertStyleGroupItem</c>

192
00:09:09,016 --> 00:09:10,918
<c.magenta>创建GroupTouchBarItem</c>

193
00:09:10,984 --> 00:09:13,820
<c.magenta>得到一样的大小位置表现</c>

194
00:09:14,821 --> 00:09:17,090
<c.magenta>GroupTouchBarItem</c>

195
00:09:18,859 --> 00:09:21,361
<c.magenta>提供了选择压缩选项的能力</c>

196
00:09:21,929 --> 00:09:26,233
<c.magenta>如果条上的空间比较紧张</c>

197
00:09:26,900 --> 00:09:29,937
<c.magenta>比如 这是条</c>

198
00:09:30,137 --> 00:09:31,672
<c.magenta>所有按钮有图标和标题</c>

199
00:09:32,172 --> 00:09:34,408
<c.magenta>在例如德语中</c>

200
00:09:35,008 --> 00:09:36,944
<c.magenta>默认地 其中一个按钮会丢失</c>

201
00:09:37,010 --> 00:09:40,747
<c.magenta>但是你宁可让这些按钮压缩在一起</c>

202
00:09:40,981 --> 00:09:44,151
<c.magenta>你可能想要在两者之间选择</c>

203
00:09:44,218 --> 00:09:45,352
<c.magenta>要么是标题消失</c>

204
00:09:45,419 --> 00:09:47,654
<c.magenta>就像这样和这样</c>

205
00:09:47,721 --> 00:09:49,857
<c.magenta>同时注意到</c>

206
00:09:49,923 --> 00:09:52,826
<c.magenta>你或许想要它们全部消失</c>

207
00:09:52,893 --> 00:09:54,761
<c.magenta>所以这个新的API能让你实现它</c>

208
00:09:55,295 --> 00:09:58,165
<c.magenta>你选择要使用的压缩选项优先级</c>

209
00:09:58,665 --> 00:10:02,302
<c.magenta>这些包含了隐藏图片</c>

210
00:09:58,665 --> 00:10:02,302
<c.magenta>这些包含了隐藏图片</c>

211
00:10:03,337 --> 00:10:06,773
<c.magenta>最后一个API提供了</c>

212
00:10:06,874 --> 00:10:09,276
<c.magenta>在GroupTouchBarItem类中</c>

213
00:10:10,110 --> 00:10:13,313
<c.magenta>以前的API</c>

214
00:10:13,380 --> 00:10:14,681
<c.magenta>例如分段控制</c>

215
00:10:15,082 --> 00:10:18,552
<c.magenta>现在我们有GroupTouchBarItem API</c>

216
00:10:18,652 --> 00:10:21,121
<c.magenta>这是FaceTime的触控条</c>

217
00:10:22,322 --> 00:10:24,258
<c.magenta>在从右到左语言中</c>

218
00:10:24,324 --> 00:10:27,861
<c.magenta>你想要它是这样显示</c>

219
00:10:27,928 --> 00:10:31,164
<c.magenta>在各自内部 但是整个条</c>

220
00:10:31,231 --> 00:10:36,069
<c.magenta>在条的应用程序部分也没有被反转</c>

221
00:10:36,537 --> 00:10:38,939
<c.magenta>这个新的API让你</c>

222
00:10:40,107 --> 00:10:44,211
<c.magenta>对于每个GroupTouchBarItem</c>

223
00:10:45,379 --> 00:10:49,149
<c.magenta>最后我想强调关于触控条的是</c>

224
00:10:49,783 --> 00:10:52,586
<c.magenta>Playground是非常有趣的</c>

225
00:10:52,653 --> 00:10:54,588
<c.magenta>输入你的触控条代码</c>

226
00:10:54,655 --> 00:10:57,391
<c.magenta>对不起 字体有点小</c>

227
00:10:57,457 --> 00:10:58,292
<c.magenta>不是考试</c>

228
00:10:58,358 --> 00:11:02,663
<c.magenta>当你看到这个</c>

229
00:10:58,358 --> 00:11:02,663
<c.magenta>当你看到这个</c>

230
00:11:02,729 --> 00:11:05,632
<c.magenta>实际上 整个触控条</c>

231
00:11:08,802 --> 00:11:10,838
<c.magenta>而且你可以做一些相当复杂的东西</c>

232
00:11:11,205 --> 00:11:15,075
<c.magenta>检查位置和大小</c>

233
00:11:15,175 --> 00:11:19,112
<c.magenta>这是相当高级的操作</c>

234
00:11:20,681 --> 00:11:23,650
<c.magenta>所以我们有两个关于触控条的演讲</c>

235
00:11:23,750 --> 00:11:26,086
<c.magenta>基本讲述就在本场演讲之后</c>

236
00:11:26,186 --> 00:11:27,688
<c.magenta>会给你一个很好的概述</c>

237
00:11:27,754 --> 00:11:31,124
<c.magenta>关于如何在你的应用中</c>

238
00:11:31,325 --> 00:11:33,460
<c.magenta>和今天下午5:10一个高级别讨论</c>

239
00:11:33,694 --> 00:11:36,997
<c.magenta>它会通过一些强大的真实案例</c>

240
00:11:37,364 --> 00:11:39,399
<c.magenta>这两场演讲都很有娱乐性和教育性</c>

241
00:11:39,466 --> 00:11:41,134
<c.magenta>所以我鼓励你们都去参加</c>

242
00:11:41,201 --> 00:11:44,471
<c.magenta>明早9点到11点</c>

243
00:11:46,740 --> 00:11:49,409
<c.magenta>好了 接下来</c>

244
00:11:49,710 --> 00:11:52,379
<c.magenta>在macOS Sierra中</c>

245
00:11:52,579 --> 00:11:54,448
<c.magenta>云分享</c>

246
00:11:54,715 --> 00:11:59,386
<c.magenta>它实现了永久基于云端的</c>

247
00:11:59,853 --> 00:12:02,856
<c.magenta>在这个发布中 我们启用</c>

248
00:11:59,853 --> 00:12:02,856
<c.magenta>在这个发布中 我们启用</c>

249
00:12:02,956 --> 00:12:04,458
<c.magenta>让我向你们展示这是什么意思</c>

250
00:12:04,925 --> 00:12:06,126
<c.magenta>我们在TextEdit中</c>

251
00:12:06,493 --> 00:12:07,995
<c.magenta>你可以进入分享菜单</c>

252
00:12:08,328 --> 00:12:09,630
<c.magenta>你可以选择添加人</c>

253
00:12:10,063 --> 00:12:11,932
<c.magenta>这会弹出添加人的对话框</c>

254
00:12:11,999 --> 00:12:14,268
<c.magenta>你可以选择你想要的方式</c>

255
00:12:14,334 --> 00:12:15,435
<c.magenta>让我们选择信息</c>

256
00:12:16,003 --> 00:12:17,437
<c.magenta>让我们邀请我们的朋友</c>

257
00:12:18,939 --> 00:12:21,108
<c.magenta>约翰·爱普希德 当然</c>

258
00:12:21,175 --> 00:12:22,009
<c.magenta>然后发出去</c>

259
00:12:22,075 --> 00:12:23,877
<c.magenta>如你所见</c>

260
00:12:23,944 --> 00:12:25,579
<c.magenta>你可以在标题栏中看到</c>

261
00:12:25,646 --> 00:12:26,980
<c.magenta>这表明它是分享的</c>

262
00:12:27,047 --> 00:12:28,682
<c.magenta>约翰·爱普希德可以继续</c>

263
00:12:28,749 --> 00:12:31,385
<c.magenta>对这个文件做出他的有价值的贡献</c>

264
00:12:32,352 --> 00:12:33,520
<c.magenta>或者没有那么有价值</c>

265
00:12:33,754 --> 00:12:37,090
<c.magenta>所以 给你们的问题是</c>

266
00:12:37,424 --> 00:12:40,594
<c.magenta>在TextEdit中</c>

267
00:12:41,261 --> 00:12:45,732
<c.magenta>当然 因为我在问你们</c>

268
00:12:45,799 --> 00:12:48,402
<c.magenta>但是答案可能会让你们惊讶</c>

269
00:12:49,102 --> 00:12:51,839
<c.magenta>TextEdit已经是一个</c>

270
00:12:51,905 --> 00:12:53,473
<c.magenta>已经实现了自动保存</c>

271
00:12:53,540 --> 00:12:57,311
<c.magenta>因此TextEdit完全免费</c>

272
00:12:57,377 --> 00:13:00,180
<c.magenta>对于任何基于NSDocument的应用</c>

273
00:12:57,377 --> 00:13:00,180
<c.magenta>对于任何基于NSDocument的应用</c>

274
00:13:00,914 --> 00:13:01,748
<c.magenta>实际上</c>

275
00:13:02,382 --> 00:13:05,652
<c.magenta>这里的整个分享菜单</c>

276
00:13:05,919 --> 00:13:08,455
<c.magenta>它包括了各种其它经典的…</c>

277
00:13:08,522 --> 00:13:11,158
<c.magenta>我会称它们为经典的 你知道</c>

278
00:13:11,225 --> 00:13:14,294
<c.magenta>分享服务 比如Mail</c>

279
00:13:14,361 --> 00:13:15,629
<c.magenta>这整个菜单都是免费的</c>

280
00:13:15,896 --> 00:13:18,866
<c.magenta>在macOS High Sierra上的</c>

281
00:13:19,499 --> 00:13:22,236
<c.magenta>NSDocument</c>

282
00:13:22,302 --> 00:13:25,172
<c.magenta>表明是否一个文件应该被分享</c>

283
00:13:25,239 --> 00:13:27,107
<c.magenta>所以你可以关闭默认的分享</c>

284
00:13:27,174 --> 00:13:29,476
<c.magenta>这个分享方法 初始化一个分享</c>

285
00:13:29,877 --> 00:13:34,281
<c.magenta>准备方法让你对选择器做任意的改动</c>

286
00:13:34,448 --> 00:13:35,782
<c.magenta>在菜单出现以前</c>

287
00:13:36,283 --> 00:13:38,919
<c.magenta>在NSDocument控制器</c>

288
00:13:38,986 --> 00:13:40,721
<c.magenta>取消这整个分享服务</c>

289
00:13:40,787 --> 00:13:42,823
<c.magenta>如果你想要这么做的话</c>

290
00:13:42,890 --> 00:13:45,726
<c.magenta>然后StandardShare菜单项</c>

291
00:13:46,126 --> 00:13:47,561
<c.magenta>你可以自己放置位置</c>

292
00:13:47,628 --> 00:13:50,163
<c.magenta>而不是让应用放在默认位置</c>

293
00:13:53,200 --> 00:13:54,101
<c.magenta>分页窗口</c>

294
00:13:54,801 --> 00:13:57,204
<c.magenta>在上次发布的macOS Sierra中</c>

295
00:13:57,271 --> 00:13:59,206
<c.magenta>我们添加了分页窗口</c>

296
00:13:59,273 --> 00:14:02,242
<c.magenta>对于所有的应用</c>

297
00:13:59,273 --> 00:14:02,242
<c.magenta>对于所有的应用</c>

298
00:14:02,910 --> 00:14:06,046
<c.magenta>这里你可以看到实际情况</c>

299
00:14:06,346 --> 00:14:09,750
<c.magenta>我可以去窗口菜单</c>

300
00:14:09,816 --> 00:14:13,220
<c.magenta>现在我得到…所有的文件都是选项卡</c>

301
00:14:13,287 --> 00:14:16,056
<c.magenta>这非常棒</c>

302
00:14:16,523 --> 00:14:19,092
<c.magenta>在macOS High Sierra中</c>

303
00:14:19,159 --> 00:14:20,460
<c.magenta>选项卡预览功能</c>

304
00:14:20,527 --> 00:14:21,361
<c.magenta>这是新的</c>

305
00:14:22,496 --> 00:14:25,399
<c.magenta>当你到视图菜单</c>

306
00:14:26,733 --> 00:14:28,702
<c.magenta>然后 现在它向显示其他选项卡</c>

307
00:14:28,869 --> 00:14:30,971
<c.magenta>非常像Safari所做的</c>

308
00:14:31,505 --> 00:14:34,041
<c.magenta>然后你继续选择你想要的选项卡</c>

309
00:14:34,208 --> 00:14:35,042
<c.magenta>所以这全是自动的</c>

310
00:14:35,209 --> 00:14:37,044
<c.magenta>同样 你的应用可以免费获得</c>

311
00:14:37,778 --> 00:14:41,081
<c.magenta>我们也有一些API</c>

312
00:14:41,882 --> 00:14:44,418
<c.magenta>一个是NSWindowTab类</c>

313
00:14:44,818 --> 00:14:48,589
<c.magenta>它代表了一个实例</c>

314
00:14:49,389 --> 00:14:52,426
<c.magenta>以Safari选项卡状态条为例</c>

315
00:14:52,793 --> 00:14:55,095
<c.magenta>title和attributedTitle这两个字段</c>

316
00:14:55,262 --> 00:14:57,998
<c.magenta>让你可以定制</c>

317
00:14:59,333 --> 00:15:02,169
<c.magenta>默认的标题</c>

318
00:14:59,333 --> 00:15:02,169
<c.magenta>默认的标题</c>

319
00:15:02,936 --> 00:15:06,673
<c.magenta>toolTip属性让你能定制</c>

320
00:15:07,207 --> 00:15:10,711
<c.magenta>accessoryView属性让你</c>

321
00:15:10,777 --> 00:15:13,647
<c.magenta>你可以看到 在Safari中</c>

322
00:15:13,714 --> 00:15:16,984
<c.magenta>Safari拿它来表示</c>

323
00:15:17,217 --> 00:15:19,286
<c.magenta>所以现在你也可对自己的选项卡</c>

324
00:15:20,754 --> 00:15:22,289
<c.magenta>NSWindowTabGroup类</c>

325
00:15:22,456 --> 00:15:25,526
<c.magenta>表示那个窗口所有选项卡组的信息</c>

326
00:15:25,592 --> 00:15:28,161
<c.magenta>你可以要求它的属性</c>

327
00:15:28,228 --> 00:15:29,429
<c.magenta>或者预览可见</c>

328
00:15:29,496 --> 00:15:30,864
<c.magenta>你可以整合窗口</c>

329
00:15:30,931 --> 00:15:32,566
<c.magenta>你可以改变哪个窗口在前端</c>

330
00:15:32,633 --> 00:15:35,502
<c.magenta>你也可以从选项卡组</c>

331
00:15:38,438 --> 00:15:42,309
<c.magenta>现在 这个应用中有一个</c>

332
00:15:43,777 --> 00:15:47,247
<c.magenta>你可能注意到了</c>

333
00:15:47,314 --> 00:15:50,450
<c.magenta>多个标注来打开文件</c>

334
00:15:50,517 --> 00:15:53,387
<c.magenta>所以这个打开URL的</c>

335
00:15:53,687 --> 00:15:56,323
<c.magenta>通过URL而非文件或路径</c>

336
00:15:56,657 --> 00:15:57,558
<c.magenta>但是它也会被调用</c>

337
00:15:57,624 --> 00:16:00,961
<c.magenta>对任何你的应用已经注册的</c>

338
00:15:57,624 --> 00:16:00,961
<c.magenta>对任何你的应用已经注册的</c>

339
00:16:01,028 --> 00:16:03,830
<c.magenta>以前这需要你已注册Apple事件</c>

340
00:16:04,097 --> 00:16:05,065
<c.magenta>句柄</c>

341
00:16:05,132 --> 00:16:06,366
<c.magenta>你不需要这么做了</c>

342
00:16:06,433 --> 00:16:07,935
<c.magenta>现在更加简单</c>

343
00:16:08,302 --> 00:16:10,971
<c.magenta>如果实现了</c>

344
00:16:11,038 --> 00:16:13,440
<c.magenta>除了那些被NSDocument自动处理</c>

345
00:16:13,507 --> 00:16:15,008
<c.magenta>会被移出这个列表</c>

346
00:16:15,442 --> 00:16:16,710
<c.magenta>所以相当简单明了</c>

347
00:16:16,977 --> 00:16:17,811
<c.magenta>谢谢</c>

348
00:16:20,280 --> 00:16:22,115
<c.magenta>NSCollectionView将…</c>

349
00:16:22,416 --> 00:16:24,918
<c.magenta>在macOS High Sierra中</c>

350
00:16:25,285 --> 00:16:26,887
<c.magenta>我来展示一下这是什么意思</c>

351
00:16:27,187 --> 00:16:29,690
<c.magenta>这里我们有一个CollectionView</c>

352
00:16:29,756 --> 00:16:32,926
<c.magenta>但是在集合视图的上面或者下面</c>

353
00:16:32,993 --> 00:16:33,827
<c.magenta>可见区域</c>

354
00:16:35,195 --> 00:16:38,465
<c.magenta>CollectionView做预提取</c>

355
00:16:38,532 --> 00:16:40,167
<c.magenta>一些还不可见的条目</c>

356
00:16:40,667 --> 00:16:43,403
<c.magenta>期待用户会在那个区域滚动</c>

357
00:16:43,737 --> 00:16:46,607
<c.magenta>这是10.13版本上的应用自带的</c>

358
00:16:47,074 --> 00:16:48,375
<c.magenta>你不需要做任何事情</c>

359
00:16:49,042 --> 00:16:51,378
<c.magenta>但是 如果你想要</c>

360
00:16:51,445 --> 00:16:54,948
<c.magenta>有一个预提取数据源</c>

361
00:16:55,015 --> 00:17:00,153
<c.magenta>所以 这个prefetchDataSource</c>

362
00:16:55,015 --> 00:17:00,153
<c.magenta>所以 这个prefetchDataSource</c>

363
00:17:00,220 --> 00:17:02,856
<c.magenta>一样的数据源方法</c>

364
00:17:03,156 --> 00:17:04,758
<c.magenta>它的两个方法</c>

365
00:17:04,825 --> 00:17:07,560
<c.magenta>一个让你监听预提取</c>

366
00:17:07,627 --> 00:17:10,696
<c.magenta>另一个让你监听</c>

367
00:17:10,763 --> 00:17:12,633
<c.magenta>比如说用户停止了滚动</c>

368
00:17:12,699 --> 00:17:15,969
<c.magenta>所以 你可以使用这些</c>

369
00:17:16,036 --> 00:17:17,538
<c.magenta>超越</c>

370
00:17:18,137 --> 00:17:20,440
<c.magenta>你已在实现的传统数据源行为</c>

371
00:17:20,507 --> 00:17:21,742
<c.magenta>但是 有一些选项</c>

372
00:17:21,808 --> 00:17:24,678
<c.magenta>你不必实现数据源</c>

373
00:17:25,546 --> 00:17:27,347
<c.magenta>接下来 我们有一些关于颜色的更新</c>

374
00:17:29,783 --> 00:17:33,587
<c.magenta>第一 新的NSColor属性</c>

375
00:17:33,654 --> 00:17:34,588
<c.magenta>这是一些属性</c>

376
00:17:34,655 --> 00:17:37,658
<c.magenta>比如systemBlue</c>

377
00:17:37,724 --> 00:17:38,892
<c.magenta>这里有一个列表</c>

378
00:17:38,959 --> 00:17:42,095
<c.magenta>这是你想用时就会被用到的颜色</c>

379
00:17:42,162 --> 00:17:44,431
<c.magenta>符合系统颜色</c>

380
00:17:44,498 --> 00:17:46,767
<c.magenta>或者系统应用使用的颜色</c>

381
00:17:47,501 --> 00:17:50,204
<c.magenta>所以 在不同的发布中</c>

382
00:17:50,704 --> 00:17:52,506
<c.magenta>这些颜色可能会改变</c>

383
00:17:52,573 --> 00:17:57,144
<c.magenta>比如 同样的颜色</c>

384
00:17:57,211 --> 00:17:59,613
<c.magenta>会与它在窗口中的看上去不一样</c>

385
00:17:59,913 --> 00:18:01,849
<c.magenta>所以这让你的应用保持时髦</c>

386
00:17:59,913 --> 00:18:01,849
<c.magenta>所以这让你的应用保持时髦</c>

387
00:18:01,915 --> 00:18:03,283
<c.magenta>无论何时 无论何地</c>

388
00:18:03,650 --> 00:18:04,685
<c.magenta>当然 这也意味着</c>

389
00:18:04,751 --> 00:18:07,120
<c.magenta>你不应该期望颜色会完全一致</c>

390
00:18:07,187 --> 00:18:09,056
<c.magenta>因为它们可能会改变</c>

391
00:18:09,489 --> 00:18:12,659
<c.magenta>macOS 10.10就已经有了</c>

392
00:18:12,726 --> 00:18:15,462
<c.magenta>在颜色选择器的开发者列表中也有</c>

393
00:18:15,529 --> 00:18:18,098
<c.magenta>所以你可以直接选择它们</c>

394
00:18:18,165 --> 00:18:19,299
<c.magenta>比如在Xcode中</c>

395
00:18:20,400 --> 00:18:21,802
<c.magenta>关于颜色的另外一个更新</c>

396
00:18:22,269 --> 00:18:24,371
<c.magenta>关于旧的标准颜色</c>

397
00:18:25,305 --> 00:18:28,008
<c.magenta>什么是旧的颜色标准？</c>

398
00:18:28,075 --> 00:18:31,078
<c.magenta>是这些家伙 NSColor.red</c>

399
00:18:31,144 --> 00:18:32,913
<c.magenta>等等 这些我们用了很多年</c>

400
00:18:33,213 --> 00:18:36,917
<c.magenta>这些已经被传统地定义为</c>

401
00:18:36,984 --> 00:18:40,287
<c.magenta>比如 红色是100</c>

402
00:18:41,421 --> 00:18:45,092
<c.magenta>过去它们在通用RGB</c>

403
00:18:45,392 --> 00:18:47,261
<c.magenta>现在这些值都保持一致</c>

404
00:18:47,561 --> 00:18:51,298
<c.magenta>但通过将它们强行变成sRGB</c>

405
00:18:51,665 --> 00:18:53,200
<c.magenta>这意味着</c>

406
00:18:53,267 --> 00:18:55,969
<c.magenta>颜色值会多少有些不同</c>

407
00:18:57,137 --> 00:18:58,438
<c.magenta>因为这样</c>

408
00:18:58,505 --> 00:19:02,409
<c.magenta>这个改变只会发生在10.13或</c>

409
00:18:58,505 --> 00:19:02,409
<c.magenta>这个改变只会发生在10.13或</c>

410
00:19:02,709 --> 00:19:05,812
<c.magenta>你可以看到</c>

411
00:19:05,879 --> 00:19:07,915
<c.magenta>这是在sRGB中的方式</c>

412
00:19:07,981 --> 00:19:09,750
<c.magenta>存在一些视觉差别</c>

413
00:19:09,816 --> 00:19:12,519
<c.magenta>在你的应用中引入视觉不一致</c>

414
00:19:14,087 --> 00:19:17,591
<c.magenta>我要提的最后一个颜色功能</c>

415
00:19:18,125 --> 00:19:21,862
<c.magenta>Xcode现在有能力</c>

416
00:19:21,929 --> 00:19:23,497
<c.magenta>举个简单例子</c>

417
00:19:25,065 --> 00:19:25,999
<c.magenta>现在你也可以…</c>

418
00:19:26,200 --> 00:19:29,870
<c.magenta>你不能添加或者提供</c>

419
00:19:30,270 --> 00:19:33,574
<c.magenta>你也可以提供多个颜色</c>

420
00:19:33,941 --> 00:19:36,076
<c.magenta>比如 我们有放射性颜色</c>

421
00:19:36,143 --> 00:19:38,679
<c.magenta>在是sRGB色域中</c>

422
00:19:39,413 --> 00:19:42,683
<c.magenta>这不是你经常要做的事情</c>

423
00:19:42,916 --> 00:19:45,853
<c.magenta>但是如果你有很多P3颜色</c>

424
00:19:46,486 --> 00:19:51,058
<c.magenta>当降低到与sRGB一样</c>

425
00:19:51,258 --> 00:19:52,292
<c.magenta>所以你想要区分它们</c>

426
00:19:52,359 --> 00:19:54,828
<c.magenta>在sRGB 你可能想要</c>

427
00:19:54,895 --> 00:19:57,297
<c.magenta>但是 这应该是相当罕见的需求</c>

428
00:19:57,831 --> 00:20:00,100
<c.magenta>所以 你如何得到这些颜色呢？</c>

429
00:19:57,831 --> 00:20:00,100
<c.magenta>所以 你如何得到这些颜色呢？</c>

430
00:20:00,167 --> 00:20:03,737
<c.magenta>同时在NSColor和UIColor中</c>

431
00:20:04,204 --> 00:20:07,241
<c.magenta>通过提供一个名字</c>

432
00:20:07,641 --> 00:20:09,943
<c.magenta>你也可以提供一个束</c>

433
00:20:10,010 --> 00:20:11,578
<c.magenta>不是你的主束</c>

434
00:20:14,648 --> 00:20:15,616
<c.magenta>对于访问性</c>

435
00:20:15,682 --> 00:20:17,451
<c.magenta>我们做了很多改进</c>

436
00:20:17,518 --> 00:20:20,254
<c.magenta>我会讲一下</c>

437
00:20:20,454 --> 00:20:22,856
<c.magenta>你可能注意到 AccessibilityRotors</c>

438
00:20:22,923 --> 00:20:24,525
<c.magenta>使得内容搜索更简单</c>

439
00:20:24,992 --> 00:20:26,560
<c.magenta>通过辅助技术</c>

440
00:20:27,427 --> 00:20:30,297
<c.magenta>比如 一个配音用户</c>

441
00:20:30,864 --> 00:20:32,633
<c.magenta>这个新的API让你能</c>

442
00:20:32,699 --> 00:20:35,569
<c.magenta>自定义转子 比如页面文件的标题</c>

443
00:20:35,636 --> 00:20:36,937
<c.magenta>这是一个例子</c>

444
00:20:37,571 --> 00:20:38,639
<c.magenta>这个是类似的</c>

445
00:20:39,106 --> 00:20:40,841
<c.magenta>这是个好的API 它类似于</c>

446
00:20:40,908 --> 00:20:42,976
<c.magenta>iOS上面的</c>

447
00:20:43,043 --> 00:20:44,745
<c.magenta>我们在上个发布版本中引入的</c>

448
00:20:45,512 --> 00:20:49,716
<c.magenta>相当直接地 你可以实现</c>

449
00:20:50,284 --> 00:20:52,686
<c.magenta>基于访问性协议</c>

450
00:20:52,753 --> 00:20:55,522
<c.magenta>返回一个数组</c>

451
00:20:56,723 --> 00:20:58,258
<c.magenta>一个小的属性清理便条</c>

452
00:20:59,359 --> 00:21:03,564
<c.magenta>在AppKit中 有很多对象属性</c>

453
00:20:59,359 --> 00:21:03,564
<c.magenta>在AppKit中 有很多对象属性</c>

454
00:21:04,031 --> 00:21:06,366
<c.magenta>现在Swift中就特别不幸</c>

455
00:21:06,667 --> 00:21:10,103
<c.magenta>作为未知的 然后在伤口上撒盐</c>

456
00:21:10,671 --> 00:21:13,006
<c.magenta>所以我们改变了很多</c>

457
00:21:13,407 --> 00:21:16,476
<c.magenta>委托、iB出口</c>

458
00:21:16,543 --> 00:21:19,746
<c.magenta>比如父指针</c>

459
00:21:19,813 --> 00:21:20,981
<c.magenta>这些变弱</c>

460
00:21:21,281 --> 00:21:22,182
<c.magenta>这里的contentView</c>

461
00:21:22,249 --> 00:21:25,752
<c.magenta>在NSBox</c>

462
00:21:25,819 --> 00:21:29,089
<c.magenta>你可以在10.13上</c>

463
00:21:29,690 --> 00:21:31,925
<c.magenta>现在 这些改变大部分兼容</c>

464
00:21:31,992 --> 00:21:33,794
<c.magenta>但是你需要意识到弱属性</c>

465
00:21:33,861 --> 00:21:35,729
<c.magenta>会自动凸显出来</c>

466
00:21:35,796 --> 00:21:37,831
<c.magenta>当被引用的对象消失时</c>

467
00:21:38,031 --> 00:21:41,235
<c.magenta>所以那可能代表一些兼容性问题</c>

468
00:21:41,301 --> 00:21:43,704
<c.magenta>一些行为上的改变</c>

469
00:21:43,770 --> 00:21:45,706
<c.magenta>所以这是要注意的东西</c>

470
00:21:46,473 --> 00:21:48,542
<c.magenta>顺便提一下 还有一件事情</c>

471
00:21:48,976 --> 00:21:51,745
<c.magenta>我们不能展示他的或者她的名字和脸</c>

472
00:21:52,079 --> 00:21:55,516
<c.magenta>但在此过程中 我们满足了</c>

473
00:21:56,216 --> 00:21:59,152
<c.magenta>所以 我不知道你是否在那里</c>

474
00:22:05,125 --> 00:22:06,159
<c.magenta>所以 我们在听</c>

475
00:22:07,594 --> 00:22:09,196
<c.magenta>Text的一些更新</c>

476
00:22:10,430 --> 00:22:14,334
<c.magenta>第一个要讲的是 我们改进了</c>

477
00:22:14,568 --> 00:22:17,037
<c.magenta>意思是我们会减少发生次数</c>

478
00:22:17,104 --> 00:22:19,840
<c.magenta>当你有一个中文或者日语字符出现</c>

479
00:22:19,907 --> 00:22:21,208
<c.magenta>在独自一行</c>

480
00:22:21,275 --> 00:22:22,643
<c.magenta>特别是两行的情况</c>

481
00:22:22,709 --> 00:22:25,546
<c.magenta>这影响到 比如 查询警告等等</c>

482
00:22:26,180 --> 00:22:30,184
<c.magenta>在NSFont和NSBezierPath</c>

483
00:22:30,517 --> 00:22:35,889
<c.magenta>通过低级图形学API</c>

484
00:22:35,956 --> 00:22:37,958
<c.magenta>当然 提供了更好的性能</c>

485
00:22:38,625 --> 00:22:40,694
<c.magenta>我们有一个新的类</c>

486
00:22:41,261 --> 00:22:42,796
<c.magenta>下载系统字体</c>

487
00:22:42,863 --> 00:22:44,965
<c.magenta>这些字体是系统的一部分</c>

488
00:22:45,032 --> 00:22:46,900
<c.magenta>但是没有和系统一起发货</c>

489
00:22:47,267 --> 00:22:49,036
<c.magenta>所以现在有了这个API</c>

490
00:22:49,102 --> 00:22:50,437
<c.magenta>默认的同步UI</c>

491
00:22:50,604 --> 00:22:52,439
<c.magenta>你可以组成异步UI</c>

492
00:22:52,506 --> 00:22:54,174
<c.magenta>直接在你的应用中</c>

493
00:22:54,541 --> 00:22:57,845
<c.magenta>最后对于Text</c>

494
00:22:58,111 --> 00:22:59,546
<c.magenta>纳斯达力格字体是一种书写方式</c>

495
00:22:59,613 --> 00:23:02,216
<c.magenta>在阿拉伯手写体</c>

496
00:22:59,613 --> 00:23:02,216
<c.magenta>在阿拉伯手写体</c>

497
00:23:02,449 --> 00:23:03,617
<c.magenta>这是个引人注目的字体</c>

498
00:23:03,784 --> 00:23:06,753
<c.magenta>为了正确渲染</c>

499
00:23:06,820 --> 00:23:10,791
<c.magenta>在Cocoa Text系统中</c>

500
00:23:11,258 --> 00:23:12,860
<c.magenta>我们可以给你举个例子</c>

501
00:23:13,227 --> 00:23:16,063
<c.magenta>这是Nastaliq单词</c>

502
00:23:16,396 --> 00:23:19,166
<c.magenta>这是同样的单词</c>

503
00:23:19,233 --> 00:23:22,669
<c.magenta>因为流动的对角线性质</c>

504
00:23:24,104 --> 00:23:27,107
<c.magenta>一些光彩的AppKit特性提到了</c>

505
00:23:27,741 --> 00:23:31,078
<c.magenta>NSSegmentedControl</c>

506
00:23:31,144 --> 00:23:33,847
<c.magenta>这给了你更多布局控制</c>

507
00:23:34,181 --> 00:23:36,783
<c.magenta>NSLevelIndicator</c>

508
00:23:36,850 --> 00:23:38,485
<c.magenta>一些API优化也有</c>

509
00:23:39,520 --> 00:23:42,289
<c.magenta>NSMenuItem使你能有</c>

510
00:23:42,356 --> 00:23:45,259
<c.magenta>所以你可以有</c>

511
00:23:45,459 --> 00:23:51,465
<c.magenta>NSTableView能让你使用</c>

512
00:23:53,433 --> 00:23:55,669
<c.magenta>我们有异步</c>

513
00:23:55,736 --> 00:23:59,006
<c.magenta>意味着实现状态保持和恢复的对象</c>

514
00:23:59,072 --> 00:24:02,242
<c.magenta>可以异步进行</c>

515
00:23:59,072 --> 00:24:02,242
<c.magenta>可以异步进行</c>

516
00:24:02,309 --> 00:24:05,412
<c.magenta>在它们运行时 潜在性能会发挥出来</c>

517
00:24:07,047 --> 00:24:09,816
<c.magenta>在拖拽的过程中</c>

518
00:24:10,050 --> 00:24:11,785
<c.magenta>当你在屏幕中拖拽一个大图片时</c>

519
00:24:11,852 --> 00:24:13,387
<c.magenta>现在它会自动地缩小</c>

520
00:24:13,453 --> 00:24:15,756
<c.magenta>这样你就可以看到拖到了哪里</c>

521
00:24:16,223 --> 00:24:18,959
<c.magenta>最后 NSDrawers被舍弃了</c>

522
00:24:19,426 --> 00:24:24,064
<c.magenta>若你想知道何谓NSDrawers</c>

523
00:24:24,131 --> 00:24:26,500
<c.magenta>好吧 不要担心了</c>

524
00:24:28,368 --> 00:24:33,340
<c.magenta>好的 在我把舞台交给达芙妮之前</c>

525
00:24:33,607 --> 00:24:34,608
<c.magenta>首先 容器视图</c>

526
00:24:34,975 --> 00:24:37,077
<c.magenta>在Cocoa中有很多容器视图</c>

527
00:24:37,144 --> 00:24:39,413
<c.magenta>NSBrowser、TableView、OutlineView</c>

528
00:24:39,479 --> 00:24:41,682
<c.magenta>CollectionView</c>

529
00:24:42,049 --> 00:24:44,985
<c.magenta>如果你困惑如何在它们中间选择</c>

530
00:24:45,586 --> 00:24:48,956
<c.magenta>今天下午3:10演讲</c>

531
00:24:49,656 --> 00:24:50,557
<c.magenta>所以大家都要来</c>

532
00:24:50,624 --> 00:24:52,960
<c.magenta>它们中哪个是最好的容器视图呢？</c>

533
00:24:53,460 --> 00:24:55,362
<c.magenta>或者不仅有一个最好的</c>

534
00:24:56,296 --> 00:24:57,798
<c.magenta>接下来 我有一个问题问你们</c>

535
00:24:59,066 --> 00:25:02,202
<c.magenta>当你调试应用时 你尝试过调用打印</c>

536
00:24:59,066 --> 00:25:02,202
<c.magenta>当你调试应用时 你尝试过调用打印</c>

537
00:25:02,669 --> 00:25:04,505
<c.magenta>而不是显示那个对象</c>

538
00:25:04,571 --> 00:25:05,873
<c.magenta>缝补你要打印的对象</c>

539
00:25:05,939 --> 00:25:09,610
<c.magenta>你得到像这样的一个面板？</c>

540
00:25:09,676 --> 00:25:12,212
<c.magenta>所以在NSView的子类中</c>

541
00:25:12,446 --> 00:25:14,815
<c.magenta>它会尝试让你打印你的应用</c>

542
00:25:15,148 --> 00:25:16,617
<c.magenta>花费很多张纸</c>

543
00:25:17,484 --> 00:25:19,186
<c.magenta>我不是说那很糟糕</c>

544
00:25:19,486 --> 00:25:20,521
<c.magenta>离开电脑</c>

545
00:25:20,654 --> 00:25:23,690
<c.magenta>一些纸有时是调试问题最好的方式</c>

546
00:25:23,957 --> 00:25:25,626
<c.magenta>但是通常不是你真正想要的</c>

547
00:25:25,959 --> 00:25:27,427
<c.magenta>所以我们有一个API改变</c>

548
00:25:28,262 --> 00:25:30,864
<c.magenta>NSWindow和NSView和NSWindows</c>

549
00:25:30,931 --> 00:25:33,267
<c.magenta>被重命名为</c>

550
00:25:33,734 --> 00:25:37,905
<c.magenta>现在Swift 4中</c>

551
00:25:38,605 --> 00:25:41,708
<c.magenta>说到小技巧</c>

552
00:25:41,775 --> 00:25:44,645
<c.magenta>周五早上9:00</c>

553
00:25:45,045 --> 00:25:46,547
<c.magenta>那里你可以听到更多的小技巧</c>

554
00:25:47,080 --> 00:25:48,749
<c.magenta>坦白地说 我真的不知道</c>

555
00:25:48,815 --> 00:25:51,018
<c.magenta>有多少 因为我们数不清</c>

556
00:25:51,185 --> 00:25:52,419
<c.magenta>你们可以自己数一数</c>

557
00:25:52,953 --> 00:25:56,356
<c.magenta>我们也想给你这个机会</c>

558
00:25:57,391 --> 00:26:00,060
<c.magenta>所以 如果你知道任何有用的</c>

559
00:25:57,391 --> 00:26:00,060
<c.magenta>所以 如果你知道任何有用的</c>

560
00:26:00,127 --> 00:26:01,495
<c.magenta>要分享给开发者</c>

561
00:26:01,562 --> 00:26:05,365
<c.magenta>请在Twitter上发布</c>

562
00:26:05,699 --> 00:26:09,069
<c.magenta>你的小技巧可能会出现在</c>

563
00:26:09,436 --> 00:26:12,940
<c.magenta>好了 我要邀请我的同事</c>

564
00:26:17,845 --> 00:26:21,381
<c.magenta>大家好 我叫达芙妮·拉罗斯</c>

565
00:26:22,449 --> 00:26:26,720
<c.magenta>我们以Foundation中</c>

566
00:26:26,954 --> 00:26:28,922
<c.magenta>我们对键径有了更好的支持</c>

567
00:26:29,423 --> 00:26:32,326
<c.magenta>我们也支持Swift中编码和解码</c>

568
00:26:32,893 --> 00:26:34,194
<c.magenta>我们从键径开始谈起</c>

569
00:26:34,728 --> 00:26:38,465
<c.magenta>我们现在有一些字面语法</c>

570
00:26:38,899 --> 00:26:42,836
<c.magenta>你们可能已经熟悉</c>

571
00:26:44,204 --> 00:26:46,673
<c.magenta>现在Swift 4中 它变得更加简单</c>

572
00:26:46,840 --> 00:26:50,344
<c.magenta>它有一个反斜杠基础类型点</c>

573
00:26:50,844 --> 00:26:53,213
<c.magenta>它的简单性使得我们提高了</c>

574
00:26:53,280 --> 00:26:56,783
<c.magenta>一些已经存在的API</c>

575
00:26:58,318 --> 00:27:01,321
<c.magenta>所以在这个例子中</c>

576
00:26:58,318 --> 00:27:01,321
<c.magenta>所以在这个例子中</c>

577
00:27:01,455 --> 00:27:04,558
<c.magenta>在DogOwner类中</c>

578
00:27:04,958 --> 00:27:08,061
<c.magenta>所以在很多设置之前</c>

579
00:27:08,128 --> 00:27:12,866
<c.magenta>你需要写很多的代码</c>

580
00:27:13,166 --> 00:27:18,839
<c.magenta>基于闭包观察 它会简洁很多</c>

581
00:27:19,006 --> 00:27:21,575
<c.magenta>简单很多 在这个例子中</c>

582
00:27:21,742 --> 00:27:26,446
<c.magenta>语法的简单性使得键径更加易用</c>

583
00:27:26,647 --> 00:27:30,184
<c.magenta>对于在Swift中的编码和解码</c>

584
00:27:30,250 --> 00:27:32,619
<c.magenta>在你的类型安全Swift</c>

585
00:27:32,886 --> 00:27:35,856
<c.magenta>和失败者格式 比如</c>

586
00:27:36,790 --> 00:27:38,125
<c.magenta>深度定制化</c>

587
00:27:38,192 --> 00:27:41,195
<c.magenta>所以改变定制化结构体</c>

588
00:27:41,795 --> 00:27:43,230
<c.magenta>而且使用也是相当简单</c>

589
00:27:43,597 --> 00:27:46,500
<c.magenta>太简单了 只需要</c>

590
00:27:46,567 --> 00:27:48,836
<c.magenta>声明你的结构体是可编码的</c>

591
00:27:48,902 --> 00:27:51,471
<c.magenta>这样一来</c>

592
00:27:51,538 --> 00:27:55,275
<c.magenta>你不需要做额外任何事情</c>

593
00:27:55,342 --> 00:27:58,478
<c.magenta>编码和解码</c>

594
00:28:00,247 --> 00:28:02,282
<c.magenta>所以你们中可能有人已经注意到了</c>

595
00:28:02,349 --> 00:28:05,452
<c.magenta>大约两小时后 我们将有</c>

596
00:28:05,986 --> 00:28:09,256
<c.magenta>那会对我们很有用</c>

597
00:28:09,323 --> 00:28:12,059
<c.magenta>谈论Foundation中</c>

598
00:28:12,593 --> 00:28:16,096
<c.magenta>所以我会更深入地讲一讲</c>

599
00:28:16,163 --> 00:28:20,501
<c.magenta>在macOS和iOS上</c>

600
00:28:21,001 --> 00:28:25,005
<c.magenta>顺便说一下 我们以iOS上的</c>

601
00:28:25,272 --> 00:28:31,111
<c.magenta>它允许编写者</c>

602
00:28:31,311 --> 00:28:35,516
<c.magenta>我们有一个协议例子</c>

603
00:28:35,949 --> 00:28:37,584
<c.magenta>之前它返回空</c>

604
00:28:37,918 --> 00:28:40,220
<c.magenta>现在它返回NSProgress</c>

605
00:28:40,287 --> 00:28:42,890
<c.magenta>这样的好处是它允许服务器</c>

606
00:28:42,956 --> 00:28:48,362
<c.magenta>返回一个进度给客户端</c>

607
00:28:49,296 --> 00:28:53,767
<c.magenta>当它们发生的时候 客户端实际上</c>

608
00:28:58,238 --> 00:29:03,076
<c.magenta>URLSession现在有一个新的</c>

609
00:28:58,238 --> 00:29:03,076
<c.magenta>URLSession现在有一个新的</c>

610
00:29:03,143 --> 00:29:06,213
<c.magenta>为你监测连接性</c>

611
00:29:06,380 --> 00:29:09,683
<c.magenta>所以它会等待开始你的</c>

612
00:29:10,017 --> 00:29:13,854
<c.magenta>直到连接性达到满意程度</c>

613
00:29:13,921 --> 00:29:17,424
<c.magenta>如果网络条件不好</c>

614
00:29:17,491 --> 00:29:19,326
<c.magenta>设置这个属性为你处理了</c>

615
00:29:19,493 --> 00:29:22,563
<c.magenta>现在 如果你选择不去设置它</c>

616
00:29:22,629 --> 00:29:24,631
<c.magenta>但是它会回到旧行为</c>

617
00:29:25,599 --> 00:29:28,368
<c.magenta>现在iOS上已有多路TCP了</c>

618
00:29:28,902 --> 00:29:33,674
<c.magenta>URLSessionTask 比如NSXPCConnection</c>

619
00:29:35,309 --> 00:29:37,044
<c.magenta>关于这个 我们会在</c>

620
00:29:37,110 --> 00:29:40,747
<c.magenta>今天晚些时候第二部分</c>

621
00:29:40,814 --> 00:29:43,951
<c.magenta>第一部分也会很精彩</c>

622
00:29:45,652 --> 00:29:50,958
<c.magenta>NSFileProviderService</c>

623
00:29:51,058 --> 00:29:53,460
<c.magenta>在应用和文件提供者之间</c>

624
00:29:53,794 --> 00:29:57,030
<c.magenta>对于那些不知道的人</c>

625
00:29:57,164 --> 00:29:58,799
<c.magenta>拥有和管理文档的应用扩展对</c>

626
00:29:59,032 --> 00:30:02,135
<c.magenta>它们也同步那些文档到私有的云服务</c>

627
00:29:59,032 --> 00:30:02,135
<c.magenta>它们也同步那些文档到私有的云服务</c>

628
00:30:02,202 --> 00:30:04,938
<c.magenta>它们可以使其他应用可访问那些文件</c>

629
00:30:06,106 --> 00:30:08,709
<c.magenta>在这个API中 应用可以</c>

630
00:30:08,876 --> 00:30:11,411
<c.magenta>对于任何URL 更加简单地</c>

631
00:30:11,845 --> 00:30:15,382
<c.magenta>而且它们可以使用</c>

632
00:30:15,716 --> 00:30:17,751
<c.magenta>周五会有一个相关演讲</c>

633
00:30:17,818 --> 00:30:19,820
<c.magenta>所以如果你想要更多的信息</c>

634
00:30:21,655 --> 00:30:25,792
<c.magenta>好消息是我们为</c>

635
00:30:25,959 --> 00:30:28,328
<c.magenta>我们为URLSession所做的改变</c>

636
00:30:28,395 --> 00:30:31,698
<c.magenta>都与我们为NSFileProviderService</c>

637
00:30:31,765 --> 00:30:33,300
<c.magenta>所以把它们全部连起来</c>

638
00:30:33,433 --> 00:30:35,869
<c.magenta>我们回到前面提过的协议</c>

639
00:30:36,637 --> 00:30:38,172
<c.magenta>我们有一个应用 我们的客户端</c>

640
00:30:38,238 --> 00:30:40,107
<c.magenta>而且我也有一个文件提供者</c>

641
00:30:40,307 --> 00:30:44,511
<c.magenta>这个应用调用文件提供者</c>

642
00:30:46,713 --> 00:30:50,250
<c.magenta>文件提供者开始下载</c>

643
00:30:50,350 --> 00:30:52,386
<c.magenta>使用URLSession</c>

644
00:30:53,153 --> 00:30:56,156
<c.magenta>然后更新进度</c>

645
00:30:56,323 --> 00:31:00,294
<c.magenta>当更新发生时</c>

646
00:30:56,323 --> 00:31:00,294
<c.magenta>当更新发生时</c>

647
00:31:00,794 --> 00:31:03,864
<c.magenta>下载终于结束了</c>

648
00:31:04,198 --> 00:31:07,534
<c.magenta>现在文件提供者可以</c>

649
00:31:08,635 --> 00:31:10,037
<c.magenta>让我们稍微换一下装备</c>

650
00:31:10,504 --> 00:31:14,775
<c.magenta>我们现在有API</c>

651
00:31:14,975 --> 00:31:17,344
<c.magenta>还有一种专注的感觉</c>

652
00:31:17,544 --> 00:31:23,684
<c.magenta>我们认为它是重要的和机会主义的</c>

653
00:31:23,784 --> 00:31:25,485
<c.magenta>对于那到底是什么意思</c>

654
00:31:25,552 --> 00:31:27,821
<c.magenta>所以我们会更加深入地聊聊</c>

655
00:31:27,988 --> 00:31:32,993
<c.magenta>假设我们有一个空间</c>

656
00:31:34,194 --> 00:31:39,533
<c.magenta>机会主义代表用户并不期望在那里的</c>

657
00:31:39,600 --> 00:31:42,436
<c.magenta>任意文件和免费空间</c>

658
00:31:42,569 --> 00:31:46,440
<c.magenta>例如一首播客的老曲子</c>

659
00:31:46,640 --> 00:31:48,642
<c.magenta>用户已经听过了</c>

660
00:31:50,511 --> 00:31:55,048
<c.magenta>重要代表免费和机会主义以及</c>

661
00:31:55,115 --> 00:31:59,286
<c.magenta>用户确实期望在那里 但是</c>

662
00:31:59,653 --> 00:32:01,655
<c.magenta>音频文件就是一个例子</c>

663
00:31:59,653 --> 00:32:01,655
<c.magenta>音频文件就是一个例子</c>

664
00:32:01,722 --> 00:32:05,058
<c.magenta>用户要求下载的</c>

665
00:32:05,292 --> 00:32:08,328
<c.magenta>然而 如果为了腾出空间而去移除它</c>

666
00:32:08,462 --> 00:32:10,497
<c.magenta>他们也可以要求再次下载</c>

667
00:32:12,599 --> 00:32:15,169
<c.magenta>好消息是作为开发者的你们</c>

668
00:32:15,235 --> 00:32:16,970
<c.magenta>现在可以做预检</c>

669
00:32:17,037 --> 00:32:21,308
<c.magenta>在这个例子中 我们实际上检查</c>

670
00:32:21,475 --> 00:32:25,612
<c.magenta>如果超过了50兆</c>

671
00:32:25,679 --> 00:32:28,715
<c.magenta>这些检查的好处是你可以预先做</c>

672
00:32:28,782 --> 00:32:30,951
<c.magenta>在你真的写入很多数据到磁盘之前</c>

673
00:32:31,351 --> 00:32:34,388
<c.magenta>这里暗指的是检查</c>

674
00:32:34,555 --> 00:32:37,257
<c.magenta>“嘿 我们有足够的空间给</c>

675
00:32:37,391 --> 00:32:39,459
<c.magenta>我们将要下载的文件吗？”</c>

676
00:32:41,762 --> 00:32:45,365
<c.magenta>所以NSLinguisticTagger</c>

677
00:32:45,699 --> 00:32:51,038
<c.magenta>通过单词、句子、段落</c>

678
00:32:52,272 --> 00:32:54,675
<c.magenta>API完全被重做和修改</c>

679
00:32:55,075 --> 00:32:58,879
<c.magenta>现在它有一些简便的方法</c>

680
00:32:58,946 --> 00:33:02,115
<c.magenta>现在你可以检测给定字符串的</c>

681
00:32:58,946 --> 00:33:02,115
<c.magenta>现在你可以检测给定字符串的</c>

682
00:33:02,983 --> 00:33:05,452
<c.magenta>JSONSerialization</c>

683
00:33:05,686 --> 00:33:09,957
<c.magenta>我们可以说我们有一个词典</c>

684
00:33:10,724 --> 00:33:13,493
<c.magenta>当你序列化这个词典 然后打印它</c>

685
00:33:13,694 --> 00:33:15,562
<c.magenta>值以随意的顺序被打印出来</c>

686
00:33:16,163 --> 00:33:19,800
<c.magenta>但你现可以添加这个sortedKeys选项</c>

687
00:33:19,867 --> 00:33:24,238
<c.magenta>一个重要的使用例子是</c>

688
00:33:24,304 --> 00:33:28,475
<c.magenta>它可以提高可读性 也会好很多</c>

689
00:33:28,742 --> 00:33:30,811
<c.magenta>这曾经是一个被强烈要求的功能</c>

690
00:33:30,878 --> 00:33:33,514
<c.magenta>所以我们很高兴将其提供给你们</c>

691
00:33:38,519 --> 00:33:41,722
<c.magenta>NSItemProvider</c>

692
00:33:42,122 --> 00:33:47,127
<c.magenta>它也支持进度报告 比如</c>

693
00:33:47,294 --> 00:33:48,929
<c.magenta>你可能看到了趋势</c>

694
00:33:49,263 --> 00:33:51,698
<c.magenta>它也允许你增强自定义类</c>

695
00:33:51,765 --> 00:33:54,868
<c.magenta>与多个陈述一起 比如数据</c>

696
00:33:55,969 --> 00:33:58,605
<c.magenta>所以我们在这个版本API</c>

697
00:33:58,672 --> 00:34:02,576
<c.magenta>实际上是被我们在iOS上的</c>

698
00:33:58,672 --> 00:34:02,576
<c.magenta>实际上是被我们在iOS上的</c>

699
00:34:02,809 --> 00:34:06,613
<c.magenta>所以若你想知道更多相关内容</c>

700
00:34:08,215 --> 00:34:11,518
<c.magenta>NSUserActivity已经有</c>

701
00:34:11,985 --> 00:34:16,223
<c.magenta>但是现在你可以指定链接</c>

702
00:34:16,290 --> 00:34:17,524
<c.magenta>这是非常方便的</c>

703
00:34:18,926 --> 00:34:22,696
<c.magenta>现在我们为好几个类</c>

704
00:34:22,763 --> 00:34:26,333
<c.magenta>这允许更好的错误处理和方便的方法</c>

705
00:34:26,500 --> 00:34:28,569
<c.magenta>接收URL而不是字符串</c>

706
00:34:28,902 --> 00:34:33,139
<c.magenta>而且举个例子[听不清]</c>

707
00:34:33,340 --> 00:34:35,676
<c.magenta>也返回一个NSError</c>

708
00:34:35,943 --> 00:34:40,848
<c.magenta>所以 处理中 它抛出</c>

709
00:34:44,518 --> 00:34:50,791
<c.magenta>对于NSDictionary和NSArray</c>

710
00:34:50,858 --> 00:34:55,429
<c.magenta>但是现在我们有了更易用的方便方法</c>

711
00:34:55,495 --> 00:34:59,066
<c.magenta>更加简洁 帮助你做正确的事情</c>

712
00:35:01,001 --> 00:35:05,939
<c.magenta>在NSError 我们有一个新键</c>

713
00:35:06,006 --> 00:35:07,741
<c.magenta>以一种与用户更加关联的方式</c>

714
00:35:07,808 --> 00:35:09,977
<c.magenta>所以你可以定制“什么失败了”</c>

715
00:35:10,043 --> 00:35:14,014
<c.magenta>同时仍然保持“为什么它失败了”</c>

716
00:35:14,815 --> 00:35:17,417
<c.magenta>这个错误消息 非常正经的消息</c>

717
00:35:17,518 --> 00:35:20,254
<c.magenta>然而 它有一些信息</c>

718
00:35:20,454 --> 00:35:24,458
<c.magenta>与用户特别相关</c>

719
00:35:25,092 --> 00:35:29,396
<c.magenta>对于它们 可能意味着任何东西</c>

720
00:35:29,530 --> 00:35:33,200
<c.magenta>你可以给它们一个错误</c>

721
00:35:33,267 --> 00:35:36,003
<c.magenta>同样的错误</c>

722
00:35:36,103 --> 00:35:37,838
<c.magenta>对于用户也更加容易理解</c>

723
00:35:39,940 --> 00:35:42,776
<c.magenta>现在我们可以在NSRanges</c>

724
00:35:42,843 --> 00:35:47,748
<c.magenta>和Swift之间更加简单地转换</c>

725
00:35:49,116 --> 00:35:51,985
<c.magenta>在这个例子中 我们使用了</c>

726
00:35:52,152 --> 00:35:55,923
<c.magenta>它只接收了NSRange</c>

727
00:35:55,989 --> 00:35:59,159
<c.magenta>对于NSRange 它接收了</c>

728
00:35:59,693 --> 00:36:01,828
<c.magenta>另一方面</c>

729
00:35:59,693 --> 00:36:01,828
<c.magenta>另一方面</c>

730
00:36:01,895 --> 00:36:04,765
<c.magenta>和接收一个NSRange和</c>

731
00:36:05,032 --> 00:36:07,768
<c.magenta>所以如你所见</c>

732
00:36:07,835 --> 00:36:10,938
<c.magenta>对于那些受苦于写这个代码的人</c>

733
00:36:11,171 --> 00:36:14,107
<c.magenta>我希望这能让你开心</c>

734
00:36:15,108 --> 00:36:18,278
<c.magenta>在这个Foundation的版本中</c>

735
00:36:18,345 --> 00:36:19,479
<c.magenta>这是非常令人兴奋的</c>

736
00:36:19,880 --> 00:36:23,450
<c.magenta>我们现支持了写时拷贝技术</c>

737
00:36:23,617 --> 00:36:26,854
<c.magenta>这意味着复制</c>

738
00:36:26,920 --> 00:36:31,158
<c.magenta>到容器第一次发生了突变</c>

739
00:36:31,525 --> 00:36:34,628
<c.magenta>它为了更快创建</c>

740
00:36:34,862 --> 00:36:37,731
<c.magenta>你可以只创建它们</c>

741
00:36:38,999 --> 00:36:42,035
<c.magenta>数据现在你的应用中 使它更快</c>

742
00:36:42,202 --> 00:36:46,473
<c.magenta>它就更快了</c>

743
00:36:47,875 --> 00:36:52,579
<c.magenta>通过NSCalendar的</c>

744
00:36:52,646 --> 00:36:57,184
<c.magenta>准确很多</c>

745
00:36:58,819 --> 00:37:02,589
<c.magenta>我们也支持更快从/到Swift</c>

746
00:36:58,819 --> 00:37:02,589
<c.magenta>我们也支持更快从/到Swift</c>

747
00:37:03,056 --> 00:37:06,860
<c.magenta>我们在周五1:15有一场演讲</c>

748
00:37:06,927 --> 00:37:08,562
<c.magenta>我强烈推荐你们去参加</c>

749
00:37:10,097 --> 00:37:14,134
<c.magenta>我确定你们中很多人知道了</c>

750
00:37:14,201 --> 00:37:18,105
<c.magenta>在10.4中被替代了</c>

751
00:37:18,405 --> 00:37:20,440
<c.magenta>但是 旧格式还是支持的</c>

752
00:37:20,541 --> 00:37:23,210
<c.magenta>所以你仍然可以</c>

753
00:37:23,510 --> 00:37:26,847
<c.magenta>但是 代表Cocoa框架部门</c>

754
00:37:27,147 --> 00:37:31,718
<c.magenta>我们要求你们从现在开始使用</c>

755
00:37:32,452 --> 00:37:34,855
<c.magenta>Core Data现在有一些</c>

756
00:37:34,922 --> 00:37:37,124
<c.magenta>也支持持续性历史</c>

757
00:37:37,591 --> 00:37:39,693
<c.magenta>现在macOS上也有</c>

758
00:37:39,760 --> 00:37:42,196
<c.magenta>在iOS上有热通知</c>

759
00:37:42,796 --> 00:37:47,467
<c.magenta>所以他们会在演讲中谈到更多细节</c>

760
00:37:47,534 --> 00:37:48,936
<c.magenta>本周将有这些演讲</c>

761
00:37:49,002 --> 00:37:51,605
<c.magenta>事实上 Core Data的演讲</c>

762
00:37:52,005 --> 00:37:53,407
<c.magenta>所以你要使用时间转换器</c>

763
00:37:53,473 --> 00:37:55,976
<c.magenta>这样你就可以</c>

764
00:37:56,877 --> 00:38:02,015
<c.magenta>总结一下</c>

765
00:37:56,877 --> 00:38:02,015
<c.magenta>总结一下</c>

766
00:38:02,115 --> 00:38:03,951
<c.magenta>以及第一道AppKit的主菜</c>

767
00:38:04,151 --> 00:38:06,286
<c.magenta>我端上了第二道主菜Foundation</c>

768
00:38:06,486 --> 00:38:09,122
<c.magenta>作为甜点 我将告诉你们</c>

769
00:38:09,256 --> 00:38:12,693
<c.magenta>建议你们自己去看看</c>

770
00:38:12,759 --> 00:38:16,129
<c.magenta>以及对于大量的改动的详尽解释</c>

771
00:38:16,196 --> 00:38:18,198
<c.magenta>和改进 那些是我们这个版本发布的</c>

772
00:38:18,398 --> 00:38:20,834
<c.magenta>欲知更多信息</c>

773
00:38:21,201 --> 00:38:23,604
<c.magenta>另一个提醒是</c>

774
00:38:23,770 --> 00:38:27,307
<c.magenta>有可能你们的小窍门最终会展示到</c>

775
00:38:27,374 --> 00:38:29,543
<c.magenta>周五的演讲中</c>

776
00:38:30,310 --> 00:38:33,747
<c.magenta>这是一些相关的演讲</c>

777
00:38:34,114 --> 00:38:35,349
<c.magenta>谢谢大家</c>
