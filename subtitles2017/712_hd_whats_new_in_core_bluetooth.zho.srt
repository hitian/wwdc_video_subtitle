1
00:00:23,516 --> 00:00:26,866
[掌声]

2
00:00:27,366 --> 00:00:29,126
&gt;&gt; 谢谢大家 早上好

3
00:00:30,016 --> 00:00:31,776
现在是会议 712

4
00:00:31,776 --> 00:00:32,735
核心蓝牙的新功能介绍

5
00:00:33,326 --> 00:00:34,266
我是 Craig Dooley

6
00:00:34,266 --> 00:00:36,056
我是 Apple 的一名

7
00:00:36,056 --> 00:00:36,356
蓝牙工程师

8
00:00:36,926 --> 00:00:39,416
今天

9
00:00:39,416 --> 00:00:40,286
我有很多非常好的内容

10
00:00:40,286 --> 00:00:42,656
想要与大家分享

11
00:00:42,846 --> 00:00:44,776
我们今天的会议

12
00:00:44,776 --> 00:00:45,726
将会先对核心蓝牙做一些简短的介绍

13
00:00:46,336 --> 00:00:47,306
我还会谈到一些

14
00:00:47,306 --> 00:00:48,906
我们今年所实现的

15
00:00:48,906 --> 00:00:50,066
一些增强的可靠性特性

16
00:00:50,516 --> 00:00:52,146
提到支持的平台

17
00:00:52,146 --> 00:00:53,916
在我们的努力下

18
00:00:53,916 --> 00:00:54,686
wantchOS 已经在今年全面支持了

19
00:00:54,686 --> 00:00:56,446
我们对此感到非常激动

20
00:00:56,446 --> 00:00:57,806
今年还有的一大新特性是

21
00:00:57,806 --> 00:00:58,906
L2CAP 通道

22
00:00:59,226 --> 00:01:00,146
我将首先带领大家回忆一下

23
00:00:59,226 --> 00:01:00,146
我将首先带领大家回忆一下

24
00:01:00,146 --> 00:01:01,336
我们近年来所做的测试工作

25
00:01:01,336 --> 00:01:03,076
然后

26
00:01:03,076 --> 00:01:05,256
我们将做一个

27
00:01:05,256 --> 00:01:06,336
真实世界的例子

28
00:01:06,336 --> 00:01:06,776
来充分展示核心蓝牙

29
00:01:07,256 --> 00:01:09,996
所以

30
00:01:09,996 --> 00:01:11,036
我想以一个简短的介绍来开启我们今天的会议

31
00:01:11,256 --> 00:01:13,746
核心蓝牙

32
00:01:14,106 --> 00:01:15,396
是我们在 2011 年发布的

33
00:01:15,396 --> 00:01:16,676
与低功耗蓝牙外设

34
00:01:16,676 --> 00:01:19,116
和配件

35
00:01:19,116 --> 00:01:20,956
交互的

36
00:01:20,956 --> 00:01:21,796
框架

37
00:01:22,196 --> 00:01:25,226
自从我们发布了这个框架以来

38
00:01:25,226 --> 00:01:27,166
我们看到了

39
00:01:27,166 --> 00:01:28,816
来自配件生产商

40
00:01:28,816 --> 00:01:30,226
和 App 开发人员的

41
00:01:30,226 --> 00:01:30,836
惊人创意

42
00:01:30,836 --> 00:01:32,066
我们很高兴的看到你们的

43
00:01:32,066 --> 00:01:34,836
骄人成果

44
00:01:35,026 --> 00:01:36,276
所以当我们开始这个项目以后

45
00:01:36,276 --> 00:01:37,356
我们就知道健康与健身

46
00:01:37,356 --> 00:01:38,576
将成为着重发展的领域

47
00:01:39,166 --> 00:01:40,256
我们看到了很多创意

48
00:01:40,326 --> 00:01:42,946
如智能体重秤

49
00:01:43,526 --> 00:01:44,806
运动传感器

50
00:01:44,806 --> 00:01:45,456
以及可以全天穿着的健身设备

51
00:01:45,806 --> 00:01:47,976
但是

52
00:01:47,976 --> 00:01:48,666
很多创意光听起来就觉得很棒

53
00:01:48,666 --> 00:01:50,146
就像那种看起来像玩具的产品

54
00:01:50,146 --> 00:01:51,646
或者是为了小朋友们所做的外设

55
00:01:52,016 --> 00:01:53,626
所以

56
00:01:53,626 --> 00:01:54,466
我们非常期待 Swift Playground 今年的

57
00:01:54,466 --> 00:01:56,096
更新

58
00:01:56,296 --> 00:01:57,396
这让小朋友们

59
00:01:57,396 --> 00:01:58,666
或者

60
00:01:58,666 --> 00:02:00,796
刚刚接触编程的人

61
00:01:58,666 --> 00:02:00,796
刚刚接触编程的人

62
00:02:01,376 --> 00:02:01,476
也能更多地参加进来

63
00:02:01,686 --> 00:02:04,456
我们喜欢看到人们

64
00:02:04,456 --> 00:02:06,036
容易地通过 App 来控制传感器

65
00:02:06,036 --> 00:02:07,706
按钮

66
00:02:07,706 --> 00:02:09,726
或者开关

67
00:02:09,726 --> 00:02:11,146
甚至

68
00:02:11,146 --> 00:02:11,976
进行无线控制

69
00:02:12,956 --> 00:02:14,516
之后的事情

70
00:02:14,516 --> 00:02:16,646
甚至向着我们没有想象到的方向

71
00:02:16,646 --> 00:02:17,806
发展了起来

72
00:02:18,806 --> 00:02:21,026
比如

73
00:02:21,026 --> 00:02:22,836
将护目镜

74
00:02:23,026 --> 00:02:24,346
与头戴式显示器相连接

75
00:02:24,346 --> 00:02:25,166
这是一个非常棒的创意

76
00:02:25,556 --> 00:02:26,936
所以我想说一句

77
00:02:26,936 --> 00:02:28,856
谢谢大家

78
00:02:30,516 --> 00:02:32,546
[掌声]

79
00:02:33,046 --> 00:02:34,746
我们很高兴的看到

80
00:02:34,746 --> 00:02:35,706
大家可以通过这一技术

81
00:02:35,706 --> 00:02:36,866
做出这么多的成果

82
00:02:36,866 --> 00:02:39,176
我们更加迫不及待的看到

83
00:02:39,176 --> 00:02:40,736
大家用我之后要谈论到的

84
00:02:40,736 --> 00:02:42,076
升级后的技术

85
00:02:42,076 --> 00:02:45,766
又将做出什么更加好的配件

86
00:02:45,886 --> 00:02:48,036
在我开始讲解之前

87
00:02:48,036 --> 00:02:49,246
我想说一点

88
00:02:49,246 --> 00:02:50,336
就是很多类型的配件

89
00:02:50,336 --> 00:02:51,466
你都是不需要

90
00:02:51,466 --> 00:02:51,766
为它们编写任何软件的

91
00:02:52,226 --> 00:02:53,436
所以

92
00:02:53,436 --> 00:02:54,596
比如你想查看一下

93
00:02:54,596 --> 00:02:56,676
当前在你的设备上

94
00:02:56,676 --> 00:02:57,676
播放的是哪个音乐

95
00:02:57,676 --> 00:02:59,866
你可以使用 Apple Media 服务

96
00:02:59,866 --> 00:03:00,966
然后你的设备就可以帮你做这一切

97
00:02:59,866 --> 00:03:00,966
然后你的设备就可以帮你做这一切

98
00:03:01,376 --> 00:03:03,756
像 iBeacon

99
00:03:03,756 --> 00:03:05,326
或者 HID 这种设备

100
00:03:05,326 --> 00:03:06,486
你不需要为它们编写任何软件

101
00:03:06,486 --> 00:03:07,166
我们也已经看到了

102
00:03:07,166 --> 00:03:07,976
有关它们的很好的使用

103
00:03:10,976 --> 00:03:12,576
但是

104
00:03:12,726 --> 00:03:14,536
今天我们是讲解核心蓝牙

105
00:03:14,536 --> 00:03:15,666
以及你的设备是

106
00:03:15,666 --> 00:03:16,176
如何与配件交互的

107
00:03:16,696 --> 00:03:19,136
所以

108
00:03:19,316 --> 00:03:21,416
让我们退回到第一步

109
00:03:21,416 --> 00:03:21,866
低功耗蓝牙主要有两个功能

110
00:03:22,036 --> 00:03:23,446
首先是

111
00:03:23,446 --> 00:03:25,166
作为一个中心

112
00:03:25,166 --> 00:03:27,396
可以搜寻你周围环境中的设备

113
00:03:27,396 --> 00:03:28,726
再者是作为外设

114
00:03:28,726 --> 00:03:30,236
可以向外部环境表明它们的位置

115
00:03:30,236 --> 00:03:31,946
它们可以发送数据

116
00:03:31,946 --> 00:03:32,926
或者

117
00:03:32,926 --> 00:03:33,286
仅仅是表明它们的存在

118
00:03:34,056 --> 00:03:35,166
所以

119
00:03:35,166 --> 00:03:36,106
如果你想发送一些简单的数据

120
00:03:36,106 --> 00:03:37,616
如当前温度

121
00:03:37,616 --> 00:03:42,286
或者时间

122
00:03:42,286 --> 00:03:43,596
你可以轻易地实现

123
00:03:43,596 --> 00:03:44,406
甚至你也可以将设备与设备相连接

124
00:03:44,916 --> 00:03:46,716
iOS 和 Mac 设备

125
00:03:46,716 --> 00:03:47,936
在连接中

126
00:03:48,046 --> 00:03:48,676
都是既可以作为中心

127
00:03:48,676 --> 00:03:48,976
也可以作为外围

128
00:03:52,306 --> 00:03:53,706
当你查找到

129
00:03:53,706 --> 00:03:54,696
一个你周围的设备之后

130
00:03:54,696 --> 00:03:56,296
你可以

131
00:03:56,296 --> 00:03:57,186
将它连接到你的设备

132
00:03:57,186 --> 00:03:59,156
然后

133
00:03:59,156 --> 00:04:00,236
你可以通过 GATT 协议来进行双向通信

134
00:03:59,156 --> 00:04:00,236
你可以通过 GATT 协议来进行双向通信

135
00:04:00,806 --> 00:04:02,226
GATT 协议

136
00:04:02,226 --> 00:04:04,996
传输所有数据

137
00:04:04,996 --> 00:04:06,556
并将其公开在

138
00:04:06,556 --> 00:04:07,376
称为服务和特征的层次结构中

139
00:04:08,176 --> 00:04:09,376
在核心蓝牙中

140
00:04:09,376 --> 00:04:11,386
我们将这些称为 CB 服务

141
00:04:11,956 --> 00:04:13,956
并且

142
00:04:13,956 --> 00:04:16,495
CB 服务可以有一些内部特征

143
00:04:16,745 --> 00:04:19,055
大多数情况下

144
00:04:19,055 --> 00:04:19,926
你的苹果设备

145
00:04:19,926 --> 00:04:21,236
在一个连接中是作为中心的

146
00:04:21,745 --> 00:04:22,456
然后

147
00:04:22,456 --> 00:04:22,996
你由此连接到外围设备

148
00:04:24,436 --> 00:04:25,836
但是

149
00:04:25,836 --> 00:04:26,206
你也可以将这个情况反过来

150
00:04:26,206 --> 00:04:27,666
所以

151
00:04:27,666 --> 00:04:30,116
让我们举个例子

152
00:04:30,166 --> 00:04:31,426
比如你的手机有自己的 GATT 数据库

153
00:04:31,426 --> 00:04:32,436
并且显示一些诸如时间服务的东西

154
00:04:32,836 --> 00:04:34,536
所以

155
00:04:34,536 --> 00:04:35,816
如果对于你的配件来说

156
00:04:35,816 --> 00:04:38,356
获取当前时间是有用的

157
00:04:38,586 --> 00:04:39,416
它们就可以从你的手机读取当前时间

158
00:04:40,476 --> 00:04:41,556
如果

159
00:04:41,556 --> 00:04:43,186
你想在 CB Central Manager 上

160
00:04:43,186 --> 00:04:47,126
构建这些类型的 iDirectional 通信

161
00:04:47,126 --> 00:04:49,456
你可以通过

162
00:04:49,456 --> 00:04:50,746
调用 retrieveConnectedPeripherals

163
00:04:50,746 --> 00:04:52,336
来看你的设备是否已经被连接

164
00:04:52,336 --> 00:04:53,356
如果

165
00:04:53,356 --> 00:04:55,916
已被连接

166
00:04:55,916 --> 00:04:57,486
你可以回复这些连接的外部设备

167
00:04:57,486 --> 00:04:58,406
或者

168
00:04:58,406 --> 00:04:59,386
如果你的配件有一个独特的标识符

169
00:04:59,386 --> 00:05:01,376
你可以通过调用 retrievePeripherals(withidentifiers)

170
00:04:59,386 --> 00:05:01,376
你可以通过调用 retrievePeripherals(withidentifiers)

171
00:05:01,376 --> 00:05:02,776
来获得对于你配件的控制权

172
00:05:09,246 --> 00:05:10,406
接下来

173
00:05:10,406 --> 00:05:10,956
让我们谈论一些今年的新发展

174
00:05:11,366 --> 00:05:14,066
正如我之前提到的

175
00:05:14,066 --> 00:05:15,416
在核心蓝牙被研发出以后

176
00:05:15,416 --> 00:05:16,996
健康和健身领域的发展

177
00:05:16,996 --> 00:05:17,786
迎来了蓬勃生机

178
00:05:18,246 --> 00:05:19,346
我们发现

179
00:05:19,346 --> 00:05:20,736
整天都有一大堆

180
00:05:20,736 --> 00:05:21,566
想要连接的设备

181
00:05:22,526 --> 00:05:24,556
用户不管在他们穿着这些设备的时候

182
00:05:25,006 --> 00:05:26,276
或者

183
00:05:26,276 --> 00:05:28,336
夜里的任何时候

184
00:05:28,336 --> 00:05:29,496
都希望

185
00:05:29,496 --> 00:05:30,646
可以查看他们的数据

186
00:05:30,646 --> 00:05:31,296
所以你必须保证你配件中的连接是可靠稳定的

187
00:05:33,436 --> 00:05:35,156
所以

188
00:05:35,156 --> 00:05:36,336
在 iOS 上我们允许你做一个后台运行的 App

189
00:05:36,736 --> 00:05:38,086
你可以与你的配件保持连接

190
00:05:38,086 --> 00:05:39,546
或者

191
00:05:39,546 --> 00:05:41,796
你可以通过 Xcode 中的

192
00:05:41,796 --> 00:05:42,736
这两个选项

193
00:05:42,736 --> 00:05:44,716
来继续向外界

194
00:05:44,876 --> 00:05:45,856
发送可用的数据

195
00:05:45,856 --> 00:05:48,076
你可以选择

196
00:05:48,076 --> 00:05:49,856
使用你的蓝牙 LE 配件

197
00:05:49,856 --> 00:05:51,496
或者

198
00:05:51,496 --> 00:05:52,466
直接将自身作为一个蓝牙 LE 配件

199
00:05:52,466 --> 00:05:52,976
如果说你想要实现的是一个外部设备的功能

200
00:05:57,156 --> 00:05:58,346
但是

201
00:05:58,346 --> 00:06:00,616
我们允许你的功能更进一步

202
00:05:58,346 --> 00:06:00,616
我们允许你的功能更进一步

203
00:06:00,616 --> 00:06:02,436
如果你是作为一个中心

204
00:06:02,436 --> 00:06:04,086
你可以通过具体化

205
00:06:04,086 --> 00:06:06,046
一项服务

206
00:06:06,046 --> 00:06:07,096
来完成搜索新设备

207
00:06:07,096 --> 00:06:08,946
你也可以

208
00:06:08,946 --> 00:06:10,596
连接到一个已知设备

209
00:06:10,596 --> 00:06:11,866
即使你的应用是来自存储系统的 Jetson

210
00:06:12,326 --> 00:06:13,706
核心蓝牙也会持续的

211
00:06:13,706 --> 00:06:15,166
帮你搜索这些设备

212
00:06:17,216 --> 00:06:18,866
如果

213
00:06:19,226 --> 00:06:20,796
我们要用代码实现这个功能

214
00:06:20,796 --> 00:06:22,566
在你初始化 CBCentralManager 时

215
00:06:22,566 --> 00:06:23,896
你要传递 RestoreIdentifier

216
00:06:24,286 --> 00:06:25,486
这只是一个

217
00:06:25,486 --> 00:06:26,856
用于标识

218
00:06:26,856 --> 00:06:28,076
你要继续进行的会话的字符串

219
00:06:29,536 --> 00:06:31,896
如果

220
00:06:31,896 --> 00:06:33,366
我们可以代替你

221
00:06:33,366 --> 00:06:34,506
完成这些操作

222
00:06:34,506 --> 00:06:35,636
例如

223
00:06:35,636 --> 00:06:37,516
连接到你的配件

224
00:06:37,516 --> 00:06:38,896
即使这将会在你的 App 启用后再花费一周的时间

225
00:06:38,896 --> 00:06:39,856
我们也将重新启动你的 App 并为你提供此回调

226
00:06:39,856 --> 00:06:41,506
CentralManager

227
00:06:41,506 --> 00:06:41,986
将会恢复状态

228
00:06:42,716 --> 00:06:44,326
与此同时

229
00:06:44,326 --> 00:06:45,586
我们也会告诉你

230
00:06:45,586 --> 00:06:47,056
系统的当前状态

231
00:06:47,056 --> 00:06:48,796
以便你可以把当前状态

232
00:06:48,796 --> 00:06:50,046
跟你的 App 停止的时间两者之间做一个调和

233
00:06:50,586 --> 00:06:52,066
我们将会告诉你

234
00:06:52,066 --> 00:06:53,736
当前所连接的外部设备

235
00:06:53,966 --> 00:06:55,296
我们还会告诉你

236
00:06:55,296 --> 00:06:56,846
在重启你的 App 时

237
00:06:56,846 --> 00:06:58,386
我们在搜寻什么

238
00:06:59,356 --> 00:07:00,456
有些时候

239
00:06:59,356 --> 00:07:00,456
有些时候

240
00:07:00,456 --> 00:07:02,046
这些返回的数据都可能是空

241
00:07:02,376 --> 00:07:03,996
这意味着

242
00:07:03,996 --> 00:07:06,456
你需要灵活处理这些返回的结果

243
00:07:06,456 --> 00:07:08,376
并且你要知道在你的 App 重新启动之后

244
00:07:08,376 --> 00:07:09,106
你是可以重新恢复你的状态的

245
00:07:11,596 --> 00:07:13,356
同样

246
00:07:13,356 --> 00:07:16,236
如果你作为外设

247
00:07:16,236 --> 00:07:17,556
即使你的 App 不再存在

248
00:07:17,556 --> 00:07:18,926
我们也可以代替你继续执行操作

249
00:07:18,926 --> 00:07:21,666
我们还会帮你重启

250
00:07:21,666 --> 00:07:22,606
如果说这种重启对于你的 App 来说

251
00:07:22,606 --> 00:07:23,186
很有趣

252
00:07:23,966 --> 00:07:25,336
因此

253
00:07:25,336 --> 00:07:26,686
如果你在 GATT 数据库中

254
00:07:27,026 --> 00:07:28,676
建立了本地服务

255
00:07:28,676 --> 00:07:30,076
或者你推广一个服务

256
00:07:30,076 --> 00:07:31,136
我们可以保持这些服务的正常运行

257
00:07:31,136 --> 00:07:34,336
当有有趣的事情发生时我们会及时让你知道

258
00:07:34,446 --> 00:07:35,756
首先

259
00:07:35,756 --> 00:07:38,476
你需要从恢复标识符开始

260
00:07:38,476 --> 00:07:39,906
这在一个系统中

261
00:07:40,586 --> 00:07:41,986
是唯一的

262
00:07:41,986 --> 00:07:43,166
并且在你返回时

263
00:07:43,166 --> 00:07:43,536
我们会告诉你当前的系统状态

264
00:07:44,146 --> 00:07:45,886
我们将通过状态恢复服务

265
00:07:45,886 --> 00:07:47,566
来告诉你有什么服务

266
00:07:48,866 --> 00:07:51,166
是继续在你的系统上运行的

267
00:07:51,766 --> 00:07:53,286
我们也会通过状态广告数据

268
00:07:54,106 --> 00:07:56,726
来告知你

269
00:07:56,726 --> 00:07:59,006
当前正在代表你

270
00:07:59,006 --> 00:08:00,406
进行什么广告

271
00:07:59,006 --> 00:08:00,406
进行什么广告

272
00:08:00,406 --> 00:08:00,996
所以

273
00:08:04,006 --> 00:08:05,356
状态保持和状态恢复

274
00:08:05,356 --> 00:08:06,576
已经在一个系统中

275
00:08:06,576 --> 00:08:07,606
存在了很多年了

276
00:08:07,606 --> 00:08:09,796
但是

277
00:08:09,796 --> 00:08:11,456
今年我们将对此进行升级

278
00:08:11,456 --> 00:08:12,726
以使它对于你的 App 来说更加可靠

279
00:08:13,246 --> 00:08:15,506
所以

280
00:08:15,906 --> 00:08:17,156
我们今天很高兴地告诉你

281
00:08:17,156 --> 00:08:19,386
即使曾经

282
00:08:19,386 --> 00:08:20,566
总有一些有关蓝牙系统等级的事宜

283
00:08:20,566 --> 00:08:22,046
代表你来阻止这一切变为现实

284
00:08:22,046 --> 00:08:24,366
但是

285
00:08:24,366 --> 00:08:25,046
我们将致力于为你实现这一切

286
00:08:25,366 --> 00:08:26,796
并且

287
00:08:26,796 --> 00:08:28,576
即使一个用户重启了设备

288
00:08:28,576 --> 00:08:29,256
我们也会保持与你配件的连接

289
00:08:30,516 --> 00:08:33,576
[掌声]

290
00:08:34,076 --> 00:08:36,405
谢谢大家

291
00:08:36,606 --> 00:08:39,196
另外

292
00:08:39,196 --> 00:08:41,746
我想说一点是

293
00:08:41,866 --> 00:08:43,155
为了让这些功能的功耗

294
00:08:43,155 --> 00:08:45,026
保持一个比较低的水平

295
00:08:45,026 --> 00:08:46,096
我们在硬件上

296
00:08:46,096 --> 00:08:46,616
下了很多功夫

297
00:08:47,266 --> 00:08:49,606
所以

298
00:08:49,606 --> 00:08:50,676
我们一次可以查找的东西数量有限

299
00:08:50,676 --> 00:08:52,286
特别是

300
00:08:52,556 --> 00:08:54,006
我们可以查找的服务数量会受到限制

301
00:08:54,476 --> 00:08:55,876
所以

302
00:08:55,876 --> 00:08:57,926
所需要的东西数量越少

303
00:08:58,346 --> 00:08:59,716
我们越可以保证

304
00:08:59,716 --> 00:09:00,436
你的请求不间断运行

305
00:08:59,716 --> 00:09:00,436
你的请求不间断运行

306
00:09:03,866 --> 00:09:05,566
另外一个事情是

307
00:09:05,566 --> 00:09:08,276
没有一个 UI

308
00:09:08,276 --> 00:09:09,686
来控制什么 App

309
00:09:09,686 --> 00:09:11,696
可以在后台做什么事情

310
00:09:11,696 --> 00:09:12,956
这意味着

311
00:09:12,956 --> 00:09:14,666
我们将会在你从任务开关处

312
00:09:14,906 --> 00:09:16,146
退出 App 时

313
00:09:16,146 --> 00:09:18,846
停止工作

314
00:09:18,846 --> 00:09:20,266
或者

315
00:09:20,266 --> 00:09:22,336
当用户从蓝牙设置处

316
00:09:22,336 --> 00:09:23,816
手动关闭蓝牙时

317
00:09:23,816 --> 00:09:27,616
我们将会停止以你的名义进行后台操作

318
00:09:27,616 --> 00:09:28,696
今年我们所改进的

319
00:09:28,696 --> 00:09:29,846
另一个内容是

320
00:09:29,846 --> 00:09:30,406
关于 Write Without Response

321
00:09:31,086 --> 00:09:32,206
就像 Write Without Response 的名字

322
00:09:32,206 --> 00:09:33,976
所暗示的那样

323
00:09:33,976 --> 00:09:36,156
你调用 Write Without Response

324
00:09:36,156 --> 00:09:37,146
但是你却并不会收到回应

325
00:09:37,146 --> 00:09:39,736
而且

326
00:09:39,736 --> 00:09:40,906
如果你向系统中写入了太多的内容

327
00:09:40,906 --> 00:09:42,576
你写入的内容会被舍弃

328
00:09:43,036 --> 00:09:44,226
并且

329
00:09:44,226 --> 00:09:45,356
我们没办法告诉你

330
00:09:45,356 --> 00:09:46,446
有一些数据被丢弃了

331
00:09:46,446 --> 00:09:48,036
所以

332
00:09:48,036 --> 00:09:49,296
如果你试图传输大量的数据

333
00:09:49,296 --> 00:09:50,276
你需要想出一种

334
00:09:50,276 --> 00:09:50,766
保证你的数据可靠的方法

335
00:09:51,266 --> 00:09:53,516
今年

336
00:09:53,516 --> 00:09:55,916
我们通过一个

337
00:09:55,916 --> 00:09:56,186
叫 canSendWriteWithoutResponse 的新特性

338
00:09:56,186 --> 00:09:57,796
来加强了 CB 的外部设备

339
00:09:57,896 --> 00:09:59,666
所以

340
00:09:59,666 --> 00:10:00,926
如果你在写入之前

341
00:09:59,666 --> 00:10:00,926
如果你在写入之前

342
00:10:00,926 --> 00:10:02,776
先调用这个函数

343
00:10:02,776 --> 00:10:04,286
并且

344
00:10:04,286 --> 00:10:05,796
这个函数返回了是这一结果

345
00:10:05,796 --> 00:10:06,826
这意味着你的数据在有机会传输到外部设备之前

346
00:10:06,826 --> 00:10:07,576
将不会在软件中被删除

347
00:10:08,136 --> 00:10:10,906
如果

348
00:10:10,906 --> 00:10:12,026
返回了否这一结果

349
00:10:12,026 --> 00:10:14,126
那么当我们准备就绪时

350
00:10:14,126 --> 00:10:15,156
你还会收到一个委托回调

351
00:10:15,156 --> 00:10:16,466
我们会回调 peripheralIsReady(toSendWritewithoutResponse)

352
00:10:18,516 --> 00:10:23,016
[掌声]

353
00:10:23,516 --> 00:10:25,406
谢谢

354
00:10:25,586 --> 00:10:29,376
好的 

355
00:10:29,376 --> 00:10:32,106
所以当我们在 2011 年第一次推出时

356
00:10:32,106 --> 00:10:33,006
我们支持 macOS 10.7 和 iOS 5

357
00:10:34,076 --> 00:10:35,216
我们一直支持这些

358
00:10:35,216 --> 00:10:38,366
并且在 Apple tvOS 9 上

359
00:10:38,366 --> 00:10:39,586
我们添加了对 tvOS 的支持

360
00:10:39,896 --> 00:10:41,166
这是我们第一次来谈论这件事情

361
00:10:41,166 --> 00:10:42,216
所以

362
00:10:42,216 --> 00:10:45,126
我也想对这件事做一个回顾

363
00:10:45,126 --> 00:10:46,366
在今年

364
00:10:46,776 --> 00:10:47,896
我们也支持了

365
00:10:47,896 --> 00:10:49,106
watchOS

366
00:10:49,426 --> 00:10:50,896
我们认为

367
00:10:50,896 --> 00:10:52,706
这会带来更多的机会

368
00:10:52,706 --> 00:10:53,916
特别是

369
00:10:53,916 --> 00:10:55,476
对于那些

370
00:10:55,476 --> 00:10:56,926
带手机不方便的

371
00:10:56,926 --> 00:10:57,506
健身运动场所

372
00:11:00,516 --> 00:11:02,426
所以 iOS 和 macOS

373
00:11:02,426 --> 00:11:03,576
是我们所支持的第一个平台

374
00:11:04,426 --> 00:11:05,926
他们既支持前台 App

375
00:11:05,926 --> 00:11:07,616
也支持后台 App

376
00:11:07,616 --> 00:11:08,896
既支持中央模式操作

377
00:11:08,896 --> 00:11:09,456
也支持外围模式操作

378
00:11:13,366 --> 00:11:15,736
今年

379
00:11:15,736 --> 00:11:16,866
我们允许你的连接间隔

380
00:11:16,866 --> 00:11:17,606
下降至 15 ms

381
00:11:17,836 --> 00:11:18,686
所以

382
00:11:18,686 --> 00:11:19,716
如果你想你的配件

383
00:11:19,716 --> 00:11:21,316
获得最大的吞吐量

384
00:11:21,316 --> 00:11:23,166
或者获得最低的延迟

385
00:11:23,166 --> 00:11:24,556
那么

386
00:11:24,556 --> 00:11:25,556
这些平台为你提供了最好的机会

387
00:11:26,126 --> 00:11:28,516
就像我之前说的

388
00:11:28,516 --> 00:11:30,236
iOS 系统支持状态保持

389
00:11:30,236 --> 00:11:32,296
和状态恢复

390
00:11:32,616 --> 00:11:33,786
所以

391
00:11:33,786 --> 00:11:35,136
你可以全天候的

392
00:11:35,346 --> 00:11:36,686
保持与配件的连接

393
00:11:36,726 --> 00:11:38,156
甚至在诸如系统重启这种重要的设备事件发生时也是如此

394
00:11:41,636 --> 00:11:44,166
Apple tvOS 9 支持 Apple tvOS

395
00:11:44,166 --> 00:11:46,126
这对于我们来说

396
00:11:46,126 --> 00:11:47,516
非常有趣

397
00:11:47,516 --> 00:11:49,556
因为

398
00:11:49,556 --> 00:11:51,346
这是我们第一次在一个依靠蓝牙

399
00:11:51,346 --> 00:11:52,776
作为主要系统输入的平台上

400
00:11:52,776 --> 00:11:53,466
来尝试支持第三方的配件

401
00:11:53,466 --> 00:11:54,746
所以

402
00:11:54,746 --> 00:11:56,346
我们必须在这两个机会或者说两个活动

403
00:11:56,346 --> 00:11:57,106
之间共存

404
00:11:58,296 --> 00:11:59,856
所以

405
00:12:00,066 --> 00:12:01,826
在这种情况下

406
00:12:01,826 --> 00:12:02,836
我们不得不对系统

407
00:12:02,836 --> 00:12:04,836
进行一些限制

408
00:12:04,836 --> 00:12:05,936
以确保像 Apple Siri Remote 这样的核心操作

409
00:12:05,936 --> 00:12:06,556
不会受到干扰

410
00:12:07,066 --> 00:12:09,926
所以我们决定

411
00:12:09,926 --> 00:12:12,936
对于配件

412
00:12:12,936 --> 00:12:16,106
或者 Apple tvOS

413
00:12:16,106 --> 00:12:18,686
你只能作为中央设备

414
00:12:18,686 --> 00:12:19,226
并且你只能连接到两个同步设备

415
00:12:20,356 --> 00:12:21,266
你可以匹配无限数量的设备

416
00:12:21,266 --> 00:12:22,906
但是

417
00:12:22,906 --> 00:12:24,006
一次你只能使用两个设备

418
00:12:24,556 --> 00:12:28,986
并且我们在 Apple tvOS 上

419
00:12:28,986 --> 00:12:30,646
不允许 15 ms 的连接间隔

420
00:12:30,646 --> 00:12:32,746
我们设定的最小连接间隔是 30 ms

421
00:12:33,256 --> 00:12:34,936
所以

422
00:12:35,266 --> 00:12:37,376
这仍然可以保证你的配件

423
00:12:37,376 --> 00:12:39,286
获得一个比较低的延迟

424
00:12:39,286 --> 00:12:40,696
并且也保证了比较好的用户交互性

425
00:12:40,696 --> 00:12:40,976
但是它同时会留下更多可用的系统资源

426
00:12:44,376 --> 00:12:45,736
当你的 App 被暂停

427
00:12:46,056 --> 00:12:47,676
或者

428
00:12:47,676 --> 00:12:48,956
转到后台运行的时候

429
00:12:48,956 --> 00:12:50,206
我们就会自动

430
00:12:50,206 --> 00:12:50,826
把这些配件断开连接

431
00:12:54,576 --> 00:12:56,756
并且

432
00:12:56,756 --> 00:12:58,586
对于 watchOS 来说

433
00:12:58,586 --> 00:13:00,216
Apple tvOS 是一个

434
00:12:58,586 --> 00:13:00,216
Apple tvOS 是一个

435
00:13:00,216 --> 00:13:00,916
主要依靠蓝牙来实现其核心系统功能的平台

436
00:13:02,436 --> 00:13:03,966
因此

437
00:13:03,966 --> 00:13:06,036
只要系统

438
00:13:06,036 --> 00:13:07,596
允许你的 App 运行

439
00:13:07,596 --> 00:13:08,086
我们就允许访问核心蓝牙

440
00:13:08,556 --> 00:13:09,646
因此

441
00:13:09,646 --> 00:13:11,536
如果一个用户

442
00:13:11,536 --> 00:13:12,966
正在使用你的 App 并直接与其交互

443
00:13:12,966 --> 00:13:13,576
你可以使用核心蓝牙

444
00:13:13,626 --> 00:13:14,286
你可以连接你的配件

445
00:13:14,286 --> 00:13:16,046
你也可以与它们交互

446
00:13:16,046 --> 00:13:17,976
这也意味着

447
00:13:17,976 --> 00:13:18,886
如果你因为其他原因

448
00:13:18,886 --> 00:13:19,956
而被允许运行时

449
00:13:19,956 --> 00:13:21,706
比如复杂更新和试验会话

450
00:13:21,706 --> 00:13:24,076
你可以保持

451
00:13:24,076 --> 00:13:25,166
与你配件的连接

452
00:13:25,166 --> 00:13:26,426
并且持续的获取这些数据

453
00:13:28,666 --> 00:13:31,326
同样

454
00:13:31,326 --> 00:13:32,636
如果你的 Apple tvOS

455
00:13:32,696 --> 00:13:33,906
只能作为中央设备

456
00:13:33,906 --> 00:13:35,986
这意味着

457
00:13:35,986 --> 00:13:38,016
你可以连接线配件

458
00:13:38,016 --> 00:13:38,596
但是你不能作为其他设备的外部设备使用

459
00:13:41,716 --> 00:13:45,076
并且

460
00:13:45,076 --> 00:13:47,246
在 watchOS 与 Apple tvOS 上

461
00:13:47,246 --> 00:13:50,626
也有两个同步连接

462
00:13:50,666 --> 00:13:52,086
和相同的

463
00:13:52,086 --> 00:13:52,736
连接间隔的限制

464
00:13:56,456 --> 00:13:58,376
此外

465
00:13:58,376 --> 00:13:59,656
当系统认为

466
00:13:59,656 --> 00:14:01,196
你的 App 需要被暂停时

467
00:13:59,656 --> 00:14:01,196
你的 App 需要被暂停时

468
00:14:01,196 --> 00:14:02,406
这意味着

469
00:14:02,676 --> 00:14:05,496
核心蓝牙会把所有

470
00:14:05,496 --> 00:14:06,936
因为该 App 所连接的配件

471
00:14:07,996 --> 00:14:08,986
都断开连接

472
00:14:12,596 --> 00:14:13,946
这已经

473
00:14:13,946 --> 00:14:14,886
被 Apple Watch 系列 2 支持

474
00:14:15,986 --> 00:14:18,286
就像我之前说的一样

475
00:14:18,286 --> 00:14:20,386
我们认为

476
00:14:20,386 --> 00:14:21,726
可以让 Apple Watch 连接配件

477
00:14:21,726 --> 00:14:24,096
并且全天候使用这些配件是非常有前景的

478
00:14:24,816 --> 00:14:26,806
你可以去到一些

479
00:14:26,806 --> 00:14:27,996
不方便携带手机的地方

480
00:14:28,246 --> 00:14:31,336
或者是一些

481
00:14:31,336 --> 00:14:32,496
你可以方便地使用 Apple Watch

482
00:14:32,496 --> 00:14:33,526
来获取所需数据的地方

483
00:14:33,526 --> 00:14:34,856
所以

484
00:14:34,856 --> 00:14:35,896
如果你想

485
00:14:35,896 --> 00:14:37,516
全天实时更新你的电池

486
00:14:37,516 --> 00:14:38,976
你可以连接你的配件

487
00:14:38,976 --> 00:14:40,616
来获取快速的数据

488
00:14:40,616 --> 00:14:41,726
并且实时更新在主屏幕上

489
00:14:46,216 --> 00:14:47,466
今年还有的一个创新是

490
00:14:47,466 --> 00:14:48,946
我们允许

491
00:14:49,056 --> 00:14:49,486
访问 L2CAP 信道

492
00:14:51,536 --> 00:14:54,396
因此

493
00:14:54,396 --> 00:14:56,596
最底层的 L2CAP 信道

494
00:14:56,596 --> 00:14:59,466
就是两个设备之间的

495
00:14:59,466 --> 00:15:01,476
数据流

496
00:14:59,466 --> 00:15:01,476
数据流

497
00:15:01,476 --> 00:15:03,266
实际上

498
00:15:03,266 --> 00:15:04,346
这是我们在这些设备之间

499
00:15:04,346 --> 00:15:04,836
进行通信所使用的协议

500
00:15:05,266 --> 00:15:06,706
所以我们在我们的平台上

501
00:15:06,706 --> 00:15:08,106
使用了 L2CAP 信道

502
00:15:08,206 --> 00:15:09,896
这是第一次

503
00:15:09,896 --> 00:15:10,786
我们让你的 App

504
00:15:10,786 --> 00:15:12,696
可以

505
00:15:12,696 --> 00:15:14,016
直接使用

506
00:15:14,016 --> 00:15:14,516
这些信道

507
00:15:17,576 --> 00:15:18,936
它实际上

508
00:15:18,936 --> 00:15:20,386
代表了逻辑链路控制

509
00:15:20,386 --> 00:15:23,856
和适配协议

510
00:15:23,856 --> 00:15:25,226
也代表了

511
00:15:25,226 --> 00:15:26,986
对于动态分配连接的支持

512
00:15:26,986 --> 00:15:28,866
或者进入信道对于

513
00:15:28,866 --> 00:15:30,636
蓝牙核心规范 4.1 来说是全新的

514
00:15:34,426 --> 00:15:35,946
所以

515
00:15:35,946 --> 00:15:36,786
不像你之前

516
00:15:36,786 --> 00:15:37,886
在你配件中使用的交互方式

517
00:15:37,886 --> 00:15:39,546
比如

518
00:15:39,546 --> 00:15:41,746
使用 GATT 数据库

519
00:15:42,526 --> 00:15:43,946
来获取你的数据

520
00:15:43,946 --> 00:15:45,506
现在 L2CAP 信道

521
00:15:45,506 --> 00:15:48,226
允许你开启一个侧面信道

522
00:15:48,586 --> 00:15:50,736
从而不受框架限制

523
00:15:50,736 --> 00:15:51,826
和数据包大小限制的直接读取和写入

524
00:15:52,166 --> 00:15:53,376
这是你的设备

525
00:15:53,376 --> 00:15:55,956
和配件之间的

526
00:15:55,956 --> 00:15:56,546
直接交流方式

527
00:16:00,236 --> 00:16:02,226
所以

528
00:16:02,546 --> 00:16:03,536
我们认为这个 API 使用起来非常简单

529
00:16:04,026 --> 00:16:05,646
如果

530
00:16:05,646 --> 00:16:07,236
你已经连接到一个外部设备

531
00:16:07,236 --> 00:16:08,866
则只需调用

532
00:16:08,866 --> 00:16:11,076
openL2CAPChannel

533
00:16:11,556 --> 00:16:12,836
并指定为 PSM

534
00:16:12,836 --> 00:16:14,666
并且您将获得一个回调数据

535
00:16:14,666 --> 00:16:15,976
openL2CAPChannel 将会返回

536
00:16:15,976 --> 00:16:16,436
表示此信道的对象

537
00:16:19,086 --> 00:16:21,976
所以 PSM 是一个

538
00:16:22,036 --> 00:16:24,946
一个协议服务多路复用器

539
00:16:25,326 --> 00:16:26,636
但你可以把它看作

540
00:16:26,636 --> 00:16:28,506
类似于 TCP 端口的东西

541
00:16:28,886 --> 00:16:30,116
你只需要

542
00:16:30,116 --> 00:16:32,246
给我们一个数字

543
00:16:32,246 --> 00:16:34,096
来表明

544
00:16:34,096 --> 00:16:35,126
你想要在外部设备连接上

545
00:16:35,126 --> 00:16:35,616
使用的服务

546
00:16:37,926 --> 00:16:39,226
有趣的是

547
00:16:39,226 --> 00:16:41,196
一些由蓝牙 SIG

548
00:16:41,196 --> 00:16:43,026
给出的

549
00:16:43,026 --> 00:16:44,686
配置文件

550
00:16:44,686 --> 00:16:45,926
有硬编码的 PSM

551
00:16:46,136 --> 00:16:47,996
所以

552
00:16:47,996 --> 00:16:49,066
如果你想要尝试

553
00:16:49,066 --> 00:16:51,286
Object Transfer Protocol 这种东西

554
00:16:51,286 --> 00:16:52,576
在连接到设备之前

555
00:16:52,576 --> 00:16:53,246
你就会知道 PSM

556
00:16:53,616 --> 00:16:56,676
但是

557
00:16:56,806 --> 00:16:58,156
在别的例子中

558
00:16:58,156 --> 00:16:59,786
PSM 对于一个你要连接的设备来说是独一无二的

559
00:16:59,786 --> 00:17:01,456
所以这意味着 PSM 是本地分配的

560
00:16:59,786 --> 00:17:01,456
所以这意味着 PSM 是本地分配的

561
00:17:01,456 --> 00:17:03,226
并且可以被其他 App 重复使用

562
00:17:04,296 --> 00:17:05,276
所以

563
00:17:05,276 --> 00:17:07,195
在你想要建立连接时

564
00:17:07,415 --> 00:17:09,146
你需要先知道你要连接的 PSM 是什么 这很重要

565
00:17:10,486 --> 00:17:12,126
我们做了一些事情

566
00:17:12,126 --> 00:17:13,935
来让这件事变得容易一些

567
00:17:13,935 --> 00:17:15,465
我们推出了 UUID

568
00:17:15,465 --> 00:17:16,986
你可以使用 UUID

569
00:17:18,036 --> 00:17:20,026
并把它放置到你的服务中

570
00:17:20,026 --> 00:17:23,486
它可以帮助你确定

571
00:17:23,486 --> 00:17:24,356
哪些与你的 CB 服务相关联的 PSM 需要打开

572
00:17:27,736 --> 00:17:29,346
如果

573
00:17:29,346 --> 00:17:30,726
你作为一个外部设备

574
00:17:30,726 --> 00:17:31,246
我们也会打开 L2CAP 信道

575
00:17:31,726 --> 00:17:34,286
所以

576
00:17:34,396 --> 00:17:35,536
如果你想要你的服务

577
00:17:35,536 --> 00:17:37,286
使用 L2CAP 信道

578
00:17:37,286 --> 00:17:39,306
你可以调用 publishL2CAPChannel

579
00:17:39,306 --> 00:17:41,766
然后

580
00:17:41,766 --> 00:17:43,516
我们会在 peripheralManger didPublishL2CAPChannel 的回调中

581
00:17:43,516 --> 00:17:44,466
返回给你

582
00:17:44,466 --> 00:17:46,716
所被系统分配的 PSM

583
00:17:48,456 --> 00:17:50,836
我们允许的

584
00:17:50,836 --> 00:17:52,546
另一件事情是

585
00:17:52,546 --> 00:17:54,516
我们允许你指定

586
00:17:54,516 --> 00:17:56,246
你的 L2CAP 是否要加密

587
00:17:56,386 --> 00:17:58,546
大多数情况下

588
00:17:58,546 --> 00:18:00,036
人们出于对安全的考虑

589
00:17:58,546 --> 00:18:00,036
人们出于对安全的考虑

590
00:18:00,036 --> 00:18:00,546
会选择加密

591
00:18:00,616 --> 00:18:01,766
它可以

592
00:18:01,766 --> 00:18:03,276
保护你

593
00:18:03,276 --> 00:18:04,586
免受中间人攻击

594
00:18:04,586 --> 00:18:05,696
它也可以

595
00:18:05,696 --> 00:18:06,536
保护你在两个设备之间发送数据包时

596
00:18:06,536 --> 00:18:07,646
免受别人的窃听

597
00:18:08,126 --> 00:18:09,996
但是

598
00:18:09,996 --> 00:18:11,676
有些时候你会想建立

599
00:18:11,676 --> 00:18:12,616
更高级别的身份验证

600
00:18:12,616 --> 00:18:14,156
比如

601
00:18:14,426 --> 00:18:16,486
使用公钥加密技术

602
00:18:16,486 --> 00:18:17,866
通过公钥

603
00:18:17,866 --> 00:18:20,706
你可以建立你自己的账户系统

604
00:18:20,706 --> 00:18:21,076
并且可以以此保护你的数据

605
00:18:24,056 --> 00:18:25,426
所以

606
00:18:25,426 --> 00:18:26,486
让我们看一个如何在两设备间

607
00:18:26,676 --> 00:18:27,936
协商一个 L2CAP 信道的

608
00:18:27,936 --> 00:18:29,026
实例

609
00:18:29,866 --> 00:18:31,096
如果

610
00:18:31,096 --> 00:18:34,076
你作为一个外部设备

611
00:18:34,076 --> 00:18:36,786
你可以要求系统

612
00:18:36,876 --> 00:18:37,196
开启一个 L2CAP 通道

613
00:18:38,256 --> 00:18:39,746
并且

614
00:18:39,746 --> 00:18:41,066
你需要指定这个信道

615
00:18:41,066 --> 00:18:41,536
是否需要加密

616
00:18:41,846 --> 00:18:42,836
在这个例子中

617
00:18:42,836 --> 00:18:43,126
我们使用加密

618
00:18:43,516 --> 00:18:44,836
当信道建立成功后，

619
00:18:45,596 --> 00:18:46,386
你会得到一个

620
00:18:46,386 --> 00:18:47,116
peripheralManager didPublishL2CAPChannel

621
00:18:47,116 --> 00:18:48,746
的回调

622
00:18:48,746 --> 00:18:50,676
就像我之前说的一样

623
00:18:50,676 --> 00:18:52,046
我会告诉你

624
00:18:52,046 --> 00:18:53,106
你的服务被本地分配了什么 PSM

625
00:18:54,216 --> 00:18:57,276
所以

626
00:18:57,276 --> 00:18:59,126
这是让连接知道 PSM 的方法

627
00:18:59,126 --> 00:19:01,486
这样一来

628
00:18:59,126 --> 00:19:01,486
这样一来

629
00:19:01,486 --> 00:19:03,956
就可以知道你的服务

630
00:19:03,956 --> 00:19:04,836
需要开启

631
00:19:04,836 --> 00:19:05,346
哪个信道

632
00:19:09,696 --> 00:19:11,516
作为中央设备

633
00:19:11,516 --> 00:19:12,956
你可以读取 PSM

634
00:19:12,956 --> 00:19:14,176
然后

635
00:19:14,176 --> 00:19:14,816
你可以用这个信息来打开通道

636
00:19:14,816 --> 00:19:15,796
所以现在

637
00:19:15,796 --> 00:19:17,866
你可以使用

638
00:19:17,866 --> 00:19:19,136
你从远程设备读取到的 PSM

639
00:19:19,136 --> 00:19:22,916
来调用 openL2CAPChannel

640
00:19:22,916 --> 00:19:25,106
然后你就可以得到 didOpenL2CAPChannel 的回调

641
00:19:28,726 --> 00:19:31,946
所以

642
00:19:31,946 --> 00:19:33,816
CB L2CAP 信道封装了你所需要的所有信息

643
00:19:33,816 --> 00:19:35,786
以便知道你在与谁交流

644
00:19:35,786 --> 00:19:37,286
以及如何与之交流

645
00:19:37,486 --> 00:19:38,466
在这种情况下

646
00:19:38,466 --> 00:19:39,536
对等体既可以是远程连接的中央设备

647
00:19:39,536 --> 00:19:40,786
也可以是

648
00:19:40,786 --> 00:19:41,876
远程连接的外部设备

649
00:19:42,446 --> 00:19:43,836
我们

650
00:19:43,836 --> 00:19:45,066
将会告诉你 PSM 已被和什么连接

651
00:19:45,066 --> 00:19:47,356
以防

652
00:19:47,356 --> 00:19:47,846
你有多个已建立的服务

653
00:19:47,846 --> 00:19:49,876
然后

654
00:19:49,876 --> 00:19:51,156
我们会给你 InputStream 和 OutputStream

655
00:19:52,186 --> 00:19:53,626
我们不想建立我们自己的 API

656
00:19:53,626 --> 00:19:55,456
这样会

657
00:19:55,456 --> 00:19:57,466
让你需要重新学习一个新的读写 API

658
00:19:58,056 --> 00:19:59,476
我们不想让你

659
00:19:59,606 --> 00:20:00,876
因为

660
00:19:59,606 --> 00:20:00,876
因为

661
00:20:00,876 --> 00:20:02,016
蓝牙连接

662
00:20:02,016 --> 00:20:02,626
而改变你的代码

663
00:20:02,956 --> 00:20:04,026
如果

664
00:20:04,026 --> 00:20:05,066
你已经知道如何处理

665
00:20:05,066 --> 00:20:06,236
socket InputStream 和 OutputStream

666
00:20:06,236 --> 00:20:08,276
你就可以

667
00:20:08,356 --> 00:20:08,626
处理好 L2CAP 信道

668
00:20:11,126 --> 00:20:13,066
所以

669
00:20:13,066 --> 00:20:14,126
我们使用一样的流事件

670
00:20:14,126 --> 00:20:16,146
你可以在连接后

671
00:20:16,146 --> 00:20:18,036
摆脱 socket

672
00:20:18,036 --> 00:20:19,066
但是数据还是可以持续被读取

673
00:20:19,366 --> 00:20:20,246
你会得到

674
00:20:20,246 --> 00:20:21,356
hasBytesAvailable 的回调

675
00:20:22,376 --> 00:20:23,976
如果你正在写入数据

676
00:20:23,976 --> 00:20:25,126
并填写所有这些队列

677
00:20:25,126 --> 00:20:26,346
你将会得到与 hasSpaceAvailable 的 socket 一样的

678
00:20:26,346 --> 00:20:28,016
回调

679
00:20:29,236 --> 00:20:30,486
我们认为

680
00:20:30,486 --> 00:20:31,966
这是非常强大的

681
00:20:31,966 --> 00:20:33,156
因为如果你已经有

682
00:20:33,376 --> 00:20:34,916
可以在别的网络接口

683
00:20:34,916 --> 00:20:35,906
如以太网和无线网上运行的程序

684
00:20:36,356 --> 00:20:37,436
则

685
00:20:37,436 --> 00:20:39,046
这个程序可以被直接

686
00:20:39,166 --> 00:20:39,646
应用于 L2CAP 信道中

687
00:20:41,136 --> 00:20:42,376
在信道

688
00:20:42,376 --> 00:20:43,636
关闭以后

689
00:20:43,636 --> 00:20:44,796
你会得到相同的

690
00:20:44,796 --> 00:20:44,976
endEncountered.Event

691
00:20:48,306 --> 00:20:49,296
所以

692
00:20:49,296 --> 00:20:51,376
当你打开你的连接之后

693
00:20:51,376 --> 00:20:52,746
你可以向那个连接读取数据

694
00:20:52,746 --> 00:20:53,146
你也可以向它写入数据

695
00:20:53,346 --> 00:20:55,146
最终

696
00:20:55,146 --> 00:20:57,806
当它关闭时

697
00:20:57,896 --> 00:20:59,036
你可以获取 endEncounterd.Event

698
00:20:59,036 --> 00:20:59,446
并且这种关闭可以由于很多原因

699
00:20:59,586 --> 00:21:01,586
所以

700
00:20:59,586 --> 00:21:01,586
所以

701
00:21:01,586 --> 00:21:04,066
如果蓝牙链接丢失

702
00:21:04,066 --> 00:21:05,426
我们将会告诉你 L2CAP 信道被关闭

703
00:21:06,136 --> 00:21:08,146
作为中央设备

704
00:21:08,146 --> 00:21:09,646
你可以手动操作

705
00:21:09,646 --> 00:21:10,156
关闭连接

706
00:21:11,256 --> 00:21:12,576
作为外部设备

707
00:21:12,576 --> 00:21:13,696
你可以取消发布服务

708
00:21:13,696 --> 00:21:18,126
或者

709
00:21:18,126 --> 00:21:19,506
你可以放弃对象

710
00:21:20,006 --> 00:21:22,356
并允许它被释放

711
00:21:22,356 --> 00:21:23,116
这会通过核心蓝牙

712
00:21:23,116 --> 00:21:24,156
告诉我们

713
00:21:24,156 --> 00:21:24,716
你对此不再感兴趣

714
00:21:24,716 --> 00:21:26,326
这也会

715
00:21:26,326 --> 00:21:26,626
关闭 L2CAP 信道

716
00:21:33,046 --> 00:21:34,366
所以什么时候

717
00:21:34,366 --> 00:21:34,716
你可以用 L2CAP 信道呢

718
00:21:36,336 --> 00:21:38,176
通常来说

719
00:21:38,176 --> 00:21:39,746
如果你已经熟练使用 GATT

720
00:21:39,746 --> 00:21:41,706
并且你的数据模型

721
00:21:41,706 --> 00:21:43,446
与 GATT 数据库可以完美兼容

722
00:21:43,446 --> 00:21:44,016
那么你应该继续这样使用

723
00:21:44,496 --> 00:21:46,046
GATT 使恢复数据

724
00:21:46,046 --> 00:21:47,956
和快速更新

725
00:21:47,956 --> 00:21:48,576
都变得很容易

726
00:21:48,576 --> 00:21:50,976
你不需要

727
00:21:50,976 --> 00:21:51,606
构建你的数据 

728
00:21:52,146 --> 00:21:53,506
所以如果可行 你可以继续保持

729
00:21:53,506 --> 00:21:54,006
原先的使用方法

730
00:21:54,986 --> 00:21:56,656
但是如果之前

731
00:21:56,656 --> 00:21:57,996
让你的数据适应 GATT 数据库时有困难

732
00:21:57,996 --> 00:22:00,526
要么是因为

733
00:21:57,996 --> 00:22:00,526
要么是因为

734
00:22:00,636 --> 00:22:01,976
你的数据太多

735
00:22:01,976 --> 00:22:02,806
或者是因为

736
00:22:02,806 --> 00:22:05,266
GATT 跟这些数据

737
00:22:05,266 --> 00:22:06,396
有些不兼容

738
00:22:06,396 --> 00:22:07,836
这时

739
00:22:07,936 --> 00:22:09,226
L2CAP 信道就是

740
00:22:09,226 --> 00:22:10,906
让你的配件间

741
00:22:10,906 --> 00:22:12,546
交流得更好的

742
00:22:12,546 --> 00:22:13,206
绝佳机会

743
00:22:14,386 --> 00:22:15,546
并且

744
00:22:15,546 --> 00:22:17,326
如果你在做大规模的数据传输

745
00:22:17,326 --> 00:22:19,226
比如说固件更新

746
00:22:19,226 --> 00:22:20,616
L2CAP 通道就是一个让这种数据传输

747
00:22:20,616 --> 00:22:21,366
更加迅速的绝佳机会

748
00:22:22,616 --> 00:22:24,146
如果

749
00:22:24,146 --> 00:22:25,606
你已经在你的两台设备间

750
00:22:25,606 --> 00:22:26,676
定义了一个流媒体协议

751
00:22:26,676 --> 00:22:28,516
那么

752
00:22:28,596 --> 00:22:29,536
L2CAP 会使其

753
00:22:29,536 --> 00:22:29,976
非常合适

754
00:22:33,546 --> 00:22:34,796
我想

755
00:22:34,796 --> 00:22:36,286
向你介绍一些

756
00:22:36,286 --> 00:22:37,386
我们最近几年所得到的经验

757
00:22:37,906 --> 00:22:41,256
第一条就是

758
00:22:41,256 --> 00:22:42,516
请按照

759
00:22:42,516 --> 00:22:43,566
蓝牙配件设计指南操作

760
00:22:44,256 --> 00:22:45,716
我们的指南

761
00:22:46,096 --> 00:22:47,796
有很多的内容

762
00:22:47,796 --> 00:22:50,266
里面有大量的信息

763
00:22:50,266 --> 00:22:51,556
这些都可以帮助你

764
00:22:51,556 --> 00:22:52,176
建立最好的配件

765
00:22:52,566 --> 00:22:55,796
这些指南

766
00:22:55,796 --> 00:22:56,666
并不是强制性的

767
00:22:56,666 --> 00:22:57,796
但是它们

768
00:22:58,076 --> 00:23:00,166
是我们这些年间

769
00:22:58,076 --> 00:23:00,166
是我们这些年间

770
00:23:00,336 --> 00:23:01,946
所学到的经验

771
00:23:01,946 --> 00:23:03,076
它们可以帮助你

772
00:23:03,076 --> 00:23:03,466
在建立配件时少走弯路

773
00:23:06,096 --> 00:23:07,716
如果有条件的话

774
00:23:07,716 --> 00:23:08,836
请使用现成的配置文件和服务

775
00:23:09,516 --> 00:23:11,976
对于

776
00:23:11,976 --> 00:23:13,226
像 Notification Center 

777
00:23:13,226 --> 00:23:15,976
和 Apple Media 这种

778
00:23:15,976 --> 00:23:17,186
我们已经定义了

779
00:23:17,186 --> 00:23:18,466
我们自己的协议

780
00:23:18,466 --> 00:23:20,346
并且蓝牙网站上

781
00:23:20,346 --> 00:23:20,956
有很多像关于电池更新和设备信息的配置文件

782
00:23:21,496 --> 00:23:23,126
所以

783
00:23:23,126 --> 00:23:23,976
如果有一些

784
00:23:24,506 --> 00:23:25,766
现成的配置文件可用

785
00:23:25,766 --> 00:23:27,486
你应该使用它

786
00:23:27,486 --> 00:23:28,346
这将会帮助你更快的获取你所要的数据

787
00:23:31,726 --> 00:23:33,096
我们经常遇到的

788
00:23:33,096 --> 00:23:34,216
一个问题是

789
00:23:34,216 --> 00:23:35,496
“为什么经常需要花费那么久来连接到我的配件”

790
00:23:37,626 --> 00:23:39,446
在你的两个设备

791
00:23:39,446 --> 00:23:41,596
建立连接之前

792
00:23:41,596 --> 00:23:42,606
它们是各自运行在自己的时间线上的

793
00:23:42,856 --> 00:23:43,916
你的外部设备

794
00:23:43,916 --> 00:23:45,336
会像外界传播信息

795
00:23:46,186 --> 00:23:47,296
你的中央设备

796
00:23:47,296 --> 00:23:48,606
会从外界

797
00:23:48,606 --> 00:23:49,106
搜索设备

798
00:23:49,496 --> 00:23:51,596
但是

799
00:23:51,596 --> 00:23:52,886
每个事件都使用小窗口

800
00:23:52,886 --> 00:23:54,486
并且直到这两个事件排好

801
00:23:54,486 --> 00:23:55,546
你才可以查找到你的配件

802
00:23:56,086 --> 00:23:58,546
所以

803
00:23:58,546 --> 00:23:59,586
在你的两个设备间

804
00:23:59,586 --> 00:24:01,396
建立快速连接

805
00:23:59,586 --> 00:24:01,396
建立快速连接

806
00:24:01,396 --> 00:24:03,646
或者在你扫描时

807
00:24:03,646 --> 00:24:04,726
快速发现的最简单方法是

808
00:24:04,726 --> 00:24:05,566
使用最短的广告间隔

809
00:24:06,516 --> 00:24:08,036
这保证了

810
00:24:08,036 --> 00:24:09,546
无论你的中央设备

811
00:24:09,626 --> 00:24:11,376
处于什么状态

812
00:24:11,376 --> 00:24:12,966
屏幕开启屏幕关闭

813
00:24:12,966 --> 00:24:14,736
直接在 App 中还是在后台运行

814
00:24:14,736 --> 00:24:18,646
你都可以使用最短的时间查找

815
00:24:18,646 --> 00:24:19,936
对你的配件

816
00:24:19,936 --> 00:24:22,296
使用较短的广告间隔

817
00:24:22,296 --> 00:24:24,426
会增加额外的电池使用

818
00:24:24,426 --> 00:24:26,556
所以

819
00:24:26,556 --> 00:24:27,936
你不能长时间的做这件事情

820
00:24:27,936 --> 00:24:30,276
但是我们强烈推荐的是

821
00:24:30,276 --> 00:24:32,326
如果你能通过一些必要手段

822
00:24:32,326 --> 00:24:34,026
比如通过用户触摸配件

823
00:24:34,026 --> 00:24:36,106
用户拾起

824
00:24:36,356 --> 00:24:37,586
加速度计

825
00:24:37,586 --> 00:24:38,746
按钮等方式

826
00:24:38,746 --> 00:24:40,356
来作为开始进行活跃广告的暗示

827
00:24:40,356 --> 00:24:41,316
这样

828
00:24:41,316 --> 00:24:43,686
当你试图节省电池使用的时候

829
00:24:43,686 --> 00:24:44,686
你也可以有一个较低的广告间隔

830
00:24:47,536 --> 00:24:48,586
如果

831
00:24:48,586 --> 00:24:49,706
你想要节省电池

832
00:24:49,706 --> 00:24:50,916
你可以查询

833
00:24:50,916 --> 00:24:51,516
蓝牙配件设计指南

834
00:24:51,516 --> 00:24:55,096
我们

835
00:24:55,096 --> 00:24:56,696
有很多电源优化

836
00:24:56,696 --> 00:24:58,016
我们也发现了

837
00:24:58,016 --> 00:24:59,036
可以用于广告间隔的时间优化

838
00:25:06,056 --> 00:25:07,116
我们发现的另一件事情是

839
00:25:07,116 --> 00:25:09,386
如果你之前

840
00:25:09,386 --> 00:25:11,156
使用过一个配件

841
00:25:11,156 --> 00:25:13,146
并且你想再次连接这一配件时

842
00:25:13,146 --> 00:25:14,526
不需要每次都进行扫描

843
00:25:14,876 --> 00:25:16,676
如果

844
00:25:16,676 --> 00:25:18,306
你知道设备正在广告

845
00:25:18,306 --> 00:25:19,586
或者

846
00:25:20,106 --> 00:25:21,036
你只是想尽快连接

847
00:25:21,036 --> 00:25:21,586
直接连上配件

848
00:25:22,956 --> 00:25:24,676
如果

849
00:25:24,676 --> 00:25:26,446
你有标识符

850
00:25:26,446 --> 00:25:28,316
你可以调用

851
00:25:28,316 --> 00:25:30,246
retrievePeripherals(WithIdentifiers)

852
00:25:30,246 --> 00:25:31,966
然后直接获取一个你可以连接的 CBPeripheral 对象

853
00:25:31,966 --> 00:25:33,526
如果

854
00:25:33,526 --> 00:25:35,026
你想要扫描你的配件

855
00:25:35,476 --> 00:25:36,526
然后连接到它

856
00:25:36,526 --> 00:25:38,236
与第一次发现就连接相比 它实际上

857
00:25:38,236 --> 00:25:39,916
会花费我们

858
00:25:39,916 --> 00:25:40,936
两倍的时间

859
00:25:40,936 --> 00:25:41,946
来完成该操作

860
00:25:47,546 --> 00:25:48,796
我们

861
00:25:48,796 --> 00:25:50,386
常常被问到的一个问题是

862
00:25:50,386 --> 00:25:51,846
为什么在我连接到我的配件后

863
00:25:51,846 --> 00:25:53,126
查找 GATT 数据库要花费那么久

864
00:25:54,226 --> 00:25:55,136
有一些方法

865
00:25:55,136 --> 00:25:56,696
可以让你加速

866
00:25:56,696 --> 00:25:58,046
这个进程

867
00:25:58,996 --> 00:26:00,546
我们

868
00:25:58,996 --> 00:26:00,546
我们

869
00:26:00,876 --> 00:26:02,226
首先推荐的方法是

870
00:26:02,226 --> 00:26:03,736
尽可能少的使用服务或特性

871
00:26:04,226 --> 00:26:05,506
每次你向 GATT 数据库

872
00:26:05,506 --> 00:26:07,146
新添加一项服务

873
00:26:07,146 --> 00:26:08,606
都会多花费一些时间

874
00:26:08,606 --> 00:26:10,086
因为我们需要查找这些服务

875
00:26:10,356 --> 00:26:11,206
并请求这些服务

876
00:26:11,506 --> 00:26:13,476
所以

877
00:26:13,476 --> 00:26:15,726
通过舍弃一些

878
00:26:15,726 --> 00:26:16,976
你不需要的服务

879
00:26:16,976 --> 00:26:18,856
或者将几个特性都压缩进一个服务

880
00:26:18,856 --> 00:26:20,126
可以在你的用户连接到你的配件时

881
00:26:20,126 --> 00:26:20,976
大大加快服务查找

882
00:26:20,976 --> 00:26:21,456
所需的时间

883
00:26:25,056 --> 00:26:26,986
另外一个

884
00:26:26,986 --> 00:26:28,336
简单有效的办法是

885
00:26:28,386 --> 00:26:31,046
你可以依据 UUID 的大小

886
00:26:31,046 --> 00:26:32,026
来对你的服务进行分组

887
00:26:33,376 --> 00:26:34,906
所以

888
00:26:34,906 --> 00:26:37,226
如果你有多个 16 位 UUID

889
00:26:37,226 --> 00:26:40,056
有一个 128 位的 UUID 服务

890
00:26:40,056 --> 00:26:42,106
我们可以在一次往返过程中

891
00:26:42,106 --> 00:26:44,836
发现所有的 16 位服务

892
00:26:44,836 --> 00:26:45,906
而不是来来回回地

893
00:26:45,906 --> 00:26:46,366
查找每一个服务

894
00:26:50,316 --> 00:26:51,886
最终

895
00:26:51,886 --> 00:26:54,036
你查找服务的过程

896
00:26:54,036 --> 00:26:55,456
就可以被加速

897
00:26:55,456 --> 00:26:56,356
如果我们可以兑现你的 GATT 数据库

898
00:26:56,356 --> 00:26:57,356
我们一定会这样子做的

899
00:26:57,356 --> 00:26:58,226
这样在重连时我们就不需要再进行查找

900
00:26:59,116 --> 00:27:00,376
如果

901
00:26:59,116 --> 00:27:00,376
如果

902
00:27:00,606 --> 00:27:02,246
你的配件需要配对

903
00:27:02,896 --> 00:27:04,266
或绑定

904
00:27:04,266 --> 00:27:05,086
这意味着

905
00:27:05,086 --> 00:27:06,696
你需要修改 GATT 数据库中

906
00:27:06,696 --> 00:27:07,166
服务的特性

907
00:27:07,926 --> 00:27:08,606
服务更改特性

908
00:27:08,606 --> 00:27:09,556
是蓝牙规范的一部分

909
00:27:09,556 --> 00:27:11,816
这允许你告诉我们

910
00:27:11,816 --> 00:27:15,046
你设备上的服务和特性

911
00:27:15,046 --> 00:27:16,136
是在什么时候被改变的

912
00:27:16,136 --> 00:27:17,546
并且告诉我们

913
00:27:17,796 --> 00:27:19,536
什么时候重新使用

914
00:27:19,536 --> 00:27:20,716
最新版本的 GATT 数据库是安全的

915
00:27:22,176 --> 00:27:23,746
如果

916
00:27:23,746 --> 00:27:25,456
你的配件不允许配对

917
00:27:25,456 --> 00:27:27,716
或者绑定

918
00:27:27,716 --> 00:27:28,706
这意味着

919
00:27:28,706 --> 00:27:30,546
即使你有服务更改特性

920
00:27:30,546 --> 00:27:31,456
我们也无法缓存你的数据库

921
00:27:32,536 --> 00:27:35,166
所以在这些情况下

922
00:27:35,166 --> 00:27:37,046
如果

923
00:27:37,046 --> 00:27:39,446
你没有服务更改特性

924
00:27:39,826 --> 00:27:41,336
我们将会

925
00:27:41,336 --> 00:27:42,076
缓存你的整个服务数据库

926
00:27:42,076 --> 00:27:43,226
这可以让你更快地重连到设备

927
00:27:43,806 --> 00:27:44,996
但是

928
00:27:44,996 --> 00:27:47,006
如果你不支持配对

929
00:27:47,006 --> 00:27:47,796
或者你想要做一些固件更新

930
00:27:47,796 --> 00:27:48,596
你就需要更加注意

931
00:27:48,596 --> 00:27:50,406
即使这是一个很罕见的事

932
00:27:50,976 --> 00:27:52,306
但是

933
00:27:52,306 --> 00:27:54,906
你无法告诉我们

934
00:27:54,906 --> 00:27:55,706
你的外部设备上的服务被更改了

935
00:28:01,246 --> 00:28:02,856
最终

936
00:28:02,856 --> 00:28:05,386
如果你想

937
00:28:05,386 --> 00:28:06,656
建立一个新的配件

938
00:28:06,656 --> 00:28:08,566
你可以经常查看

939
00:28:08,566 --> 00:28:10,236
那些可用的最新的芯片集

940
00:28:10,336 --> 00:28:11,586
因为我们推出了核心蓝牙

941
00:28:11,586 --> 00:28:13,986
蓝牙 4.2 和现在的蓝牙 5.0

942
00:28:13,986 --> 00:28:15,336
都已经发布

943
00:28:15,826 --> 00:28:17,496
这些版本的

944
00:28:17,496 --> 00:28:18,486
所有功能

945
00:28:18,486 --> 00:28:19,056
都是反向兼容的

946
00:28:19,056 --> 00:28:20,306
所以

947
00:28:20,306 --> 00:28:21,926
即使你建立一个蓝牙 5.0 版本的配件

948
00:28:22,126 --> 00:28:23,736
它也可以

949
00:28:23,736 --> 00:28:26,286
跟所有你想要连接的

950
00:28:26,286 --> 00:28:27,956
蓝牙 4.0 版本的设备兼容

951
00:28:28,486 --> 00:28:31,926
之后就像我说的一样

952
00:28:31,926 --> 00:28:33,416
遵从配件设计指南

953
00:28:33,826 --> 00:28:35,106
如果你先阅读这些内容

954
00:28:35,106 --> 00:28:36,926
你可以在之后的项目中

955
00:28:36,926 --> 00:28:38,376
省却很多麻烦

956
00:28:42,676 --> 00:28:44,036
现在我想把舞台

957
00:28:44,036 --> 00:28:45,666
让给 Duy

958
00:28:45,666 --> 00:28:46,756
Duy 将会告诉大家

959
00:28:46,756 --> 00:28:47,166
如何充分使用核心蓝牙

960
00:28:47,466 --> 00:28:48,546
&gt;&gt; 谢谢你 Craig

961
00:28:49,516 --> 00:28:54,666
[掌声]

962
00:28:55,166 --> 00:28:56,066
&gt;&gt; 我是 Duy

963
00:28:56,066 --> 00:28:57,156
今天

964
00:28:57,156 --> 00:28:58,176
我将谈论一下如何充分使用核心蓝牙

965
00:28:59,296 --> 00:29:00,576
让我们

966
00:28:59,296 --> 00:29:00,576
让我们

967
00:29:00,576 --> 00:29:02,106
想象一个场景

968
00:29:02,106 --> 00:29:03,776
我们要从一个更新设备的地方

969
00:29:03,776 --> 00:29:04,336
发送大量数据

970
00:29:04,746 --> 00:29:06,426
如果

971
00:29:06,426 --> 00:29:08,546
我们使用 Write With Response

972
00:29:08,656 --> 00:29:12,706
和所有的默认设置

973
00:29:12,766 --> 00:29:15,286
以 2.5 kbps 的速度 我们需要花费 3000 秒来传输 1 MB 的数据

974
00:29:15,566 --> 00:29:17,506
这非常的慢

975
00:29:17,776 --> 00:29:20,046
那么问题是什么呢

976
00:29:20,046 --> 00:29:21,096
主要有两个问题

977
00:29:21,096 --> 00:29:22,576
第一个问题是

978
00:29:22,576 --> 00:29:23,426
LE 中的所有协议开销

979
00:29:23,996 --> 00:29:25,486
蓝牙规范

980
00:29:25,486 --> 00:29:26,816
将 LE 的最大应用数据链

981
00:29:26,816 --> 00:29:28,786
定义为 27 字节

982
00:29:28,786 --> 00:29:31,346
但是

983
00:29:31,476 --> 00:29:33,326
因为你的数据

984
00:29:33,326 --> 00:29:34,676
需要从 App

985
00:29:34,676 --> 00:29:35,996
到 GATT

986
00:29:35,996 --> 00:29:38,286
到 ATT

987
00:29:38,286 --> 00:29:40,726
再到 L2CAP

988
00:29:40,726 --> 00:29:42,276
这将会丢失 7 字节的数据 所以你丢失了数据包中 25 % 的内容

989
00:29:42,276 --> 00:29:43,116
最终可用数据长度将只有 20 字节

990
00:29:43,766 --> 00:29:46,536
并且

991
00:29:46,536 --> 00:29:48,266
一旦你的数据

992
00:29:48,676 --> 00:29:50,906
通过了控制器

993
00:29:50,906 --> 00:29:53,216
硬件会添加链路层安全

994
00:29:53,216 --> 00:29:55,566
并且 CRC 也会延长传输数据包的时间

995
00:29:56,206 --> 00:29:59,406
所以

996
00:29:59,406 --> 00:30:00,336
为了提高性能

997
00:29:59,406 --> 00:30:00,336
为了提高性能

998
00:30:00,336 --> 00:30:01,506
我们需要同时减小

999
00:30:01,506 --> 00:30:02,786
硬件与软件的开销

1000
00:30:03,556 --> 00:30:05,696
第二个问题是

1001
00:30:05,696 --> 00:30:08,446
以前在 GATT 中

1002
00:30:08,446 --> 00:30:10,006
可靠写入的唯一方法是

1003
00:30:10,006 --> 00:30:11,916
使用 Write With Response

1004
00:30:11,916 --> 00:30:14,106
这要花费两个时间间隔来完成

1005
00:30:14,106 --> 00:30:15,346
一个时间间隔来写入

1006
00:30:15,346 --> 00:30:15,966
另一个时间间隔来回复

1007
00:30:16,316 --> 00:30:17,826
所以

1008
00:30:17,826 --> 00:30:18,386
你的写入是非常稀疏的

1009
00:30:18,386 --> 00:30:19,906
你没有

1010
00:30:19,906 --> 00:30:22,916
充分利用可用的带宽

1011
00:30:22,916 --> 00:30:24,376
因为

1012
00:30:24,376 --> 00:30:26,156
有很多方法可以让每个时间间隔

1013
00:30:26,156 --> 00:30:28,136
都进行传输

1014
00:30:28,136 --> 00:30:30,626
并且我们在所有的连接事件中

1015
00:30:30,626 --> 00:30:31,696
都想打包尽可能多的写入内容

1016
00:30:32,076 --> 00:30:33,126
所以我们要怎么实现这一切呢

1017
00:30:33,706 --> 00:30:36,446
就像 Craig 之前提到的一样

1018
00:30:36,446 --> 00:30:37,956
我们改进了 Write Without Response

1019
00:30:38,286 --> 00:30:39,766
你现在可以写入

1020
00:30:39,766 --> 00:30:41,186
并且

1021
00:30:41,186 --> 00:30:42,486
继续写入

1022
00:30:43,226 --> 00:30:45,846
核心蓝牙 设置可以发送保持写入信号

1023
00:30:45,846 --> 00:30:47,446
而不出现错误响应

1024
00:30:47,446 --> 00:30:48,886
在这种情况下

1025
00:30:48,886 --> 00:30:50,216
你的 App 会等待一个委托信号

1026
00:30:50,216 --> 00:30:50,566
来在安全时恢复写入

1027
00:30:51,076 --> 00:30:52,376
并且当你遵循 API 时

1028
00:30:52,376 --> 00:30:53,646
写入会是可靠的

1029
00:30:54,356 --> 00:30:55,946
并且

1030
00:30:55,946 --> 00:30:57,766
你可以使用 Write Without Response

1031
00:30:57,766 --> 00:30:58,806
来确保核心蓝牙

1032
00:30:58,806 --> 00:31:01,256
是充分缓冲的

1033
00:30:58,806 --> 00:31:01,256
是充分缓冲的

1034
00:31:01,256 --> 00:31:02,296
这样我们就可以使用

1035
00:31:02,296 --> 00:31:03,786
所有可用的连接事件

1036
00:31:03,786 --> 00:31:04,816
来传输你的应用数据

1037
00:31:06,016 --> 00:31:09,796
在 iOS 10 中

1038
00:31:09,796 --> 00:31:11,716
我们也增大了连接事件长度

1039
00:31:11,716 --> 00:31:13,206
这样你就会有更多的空间

1040
00:31:13,206 --> 00:31:14,726
来使用

1041
00:31:14,726 --> 00:31:15,206
Write For That Response 写入

1042
00:31:17,096 --> 00:31:18,626
当你把所有的连接事件

1043
00:31:18,626 --> 00:31:19,786
打包进一个时间间隔后

1044
00:31:19,786 --> 00:31:21,616
你的吞吐量

1045
00:31:21,616 --> 00:31:24,116
将会从 2.5 kbps 提升至 37 kbps

1046
00:31:24,656 --> 00:31:27,406
然后

1047
00:31:27,406 --> 00:31:31,506
我们回到减少软件协议开销的问题

1048
00:31:31,506 --> 00:31:32,716
所有我们的讨论

1049
00:31:32,716 --> 00:31:34,976
都假设一个 23 字节的 ATT MTU

1050
00:31:35,326 --> 00:31:37,276
这也是为什么

1051
00:31:37,276 --> 00:31:38,956
每个观众包都有红色部分的开销

1052
00:31:38,956 --> 00:31:41,926
但是我们可以扩展 MTU

1053
00:31:41,926 --> 00:31:44,146
并扩展写入内容

1054
00:31:44,146 --> 00:31:45,346
以适应 MTU

1055
00:31:45,936 --> 00:31:47,426
这将会提高

1056
00:31:47,426 --> 00:31:49,016
你的吞吐量

1057
00:31:49,016 --> 00:31:50,396
因为 L2CAP 将会把你的数据分块

1058
00:31:50,896 --> 00:31:53,106
你只需要

1059
00:31:53,146 --> 00:31:54,396
在你 MTU 的第一块数据上

1060
00:31:54,426 --> 00:31:54,846
分配花销

1061
00:31:55,266 --> 00:31:58,306
其余的数据块

1062
00:31:58,306 --> 00:32:00,936
可以达到 27 字节

1063
00:31:58,306 --> 00:32:00,936
可以达到 27 字节

1064
00:32:00,936 --> 00:32:02,266
所以当你在做这些的时候

1065
00:32:02,266 --> 00:32:04,316
你的吞吐量会提高至 48 kbps

1066
00:32:05,086 --> 00:32:08,936
然后

1067
00:32:09,736 --> 00:32:12,446
你要怎样在核心蓝牙中配置 MTU 呢

1068
00:32:12,446 --> 00:32:13,836
如果

1069
00:32:13,836 --> 00:32:15,196
你是从核心蓝牙运行到核心蓝牙

1070
00:32:15,196 --> 00:32:16,166
那么你没有什么可以做的

1071
00:32:16,166 --> 00:32:18,566
我们将会

1072
00:32:18,566 --> 00:32:19,886
根据连接事件长度

1073
00:32:19,886 --> 00:32:21,286
和系统配置

1074
00:32:21,286 --> 00:32:23,856
来为你计算 MTU

1075
00:32:23,856 --> 00:32:25,666
但是在这个例子中

1076
00:32:25,666 --> 00:32:26,776
我们正在更新配件

1077
00:32:27,256 --> 00:32:29,996
所以

1078
00:32:29,996 --> 00:32:31,456
如果你回忆一个

1079
00:32:31,456 --> 00:32:32,726
客户端与服务器间的 ATT MTU 交换

1080
00:32:32,726 --> 00:32:35,916
则两个建议值的两个最小值

1081
00:32:35,916 --> 00:32:37,256
就是 ATT MTU

1082
00:32:37,256 --> 00:32:38,666
所以

1083
00:32:38,666 --> 00:32:40,756
你的配件

1084
00:32:40,756 --> 00:32:42,816
应该使用更大的 MTU

1085
00:32:42,816 --> 00:32:44,676
来充分利用这些

1086
00:32:44,676 --> 00:32:47,326
更加优化的特性

1087
00:32:47,556 --> 00:32:49,576
并且

1088
00:32:49,576 --> 00:32:51,506
要使用更大的写属性

1089
00:32:51,506 --> 00:32:53,186
来适应 MTU

1090
00:32:53,186 --> 00:32:55,456
对此

1091
00:32:55,456 --> 00:32:58,746
你可以使用下面的接口

1092
00:32:58,746 --> 00:33:00,896
来找出 MTU 适用的

1093
00:32:58,746 --> 00:33:00,896
来找出 MTU 适用的

1094
00:33:01,046 --> 00:33:01,976
最大写入长度

1095
00:33:05,896 --> 00:33:08,366
到此

1096
00:33:08,366 --> 00:33:11,516
我们探讨了

1097
00:33:11,516 --> 00:33:13,306
如何在一个时间间隔中

1098
00:33:13,306 --> 00:33:16,226
打包尽可能多的写入内容

1099
00:33:16,226 --> 00:33:17,426
并且谈论了如何充分利用可用带宽

1100
00:33:17,716 --> 00:33:20,356
我们讨论了如何减小开销

1101
00:33:20,356 --> 00:33:21,796
软件开销

1102
00:33:22,336 --> 00:33:27,466
但是

1103
00:33:27,536 --> 00:33:29,746
LE 每个数据包 27 字节

1104
00:33:29,746 --> 00:33:30,876
并且

1105
00:33:30,876 --> 00:33:33,216
我们得为每个数据包提供硬件开销

1106
00:33:33,216 --> 00:33:35,306
这大大限制了

1107
00:33:35,306 --> 00:33:37,826
我们仅仅通过软件可以提高的 LE 性能

1108
00:33:39,076 --> 00:33:40,816
所以

1109
00:33:40,816 --> 00:33:41,406
我们添加了扩展数据长度支持

1110
00:33:42,246 --> 00:33:44,336
扩展数据长度

1111
00:33:44,336 --> 00:33:46,106
是 4.2 的一个功能

1112
00:33:46,106 --> 00:33:48,956
它可以把应用数据长度

1113
00:33:48,956 --> 00:33:50,886
从 27 字节提升至 251 字节

1114
00:33:52,496 --> 00:33:55,046
这意味着

1115
00:33:55,046 --> 00:33:56,416
每个数据包中你可以比之前

1116
00:33:56,416 --> 00:33:58,536
多传输十倍的数据

1117
00:33:58,536 --> 00:33:59,596
所以你就可以

1118
00:33:59,596 --> 00:34:02,816
消除所有的硬件开销和软件开销

1119
00:33:59,596 --> 00:34:02,816
消除所有的硬件开销和软件开销

1120
00:34:03,846 --> 00:34:05,546
并且

1121
00:34:05,546 --> 00:34:07,236
我们可以使用更多的可用时间

1122
00:34:07,236 --> 00:34:07,956
来传输你的应用数据

1123
00:34:09,106 --> 00:34:12,696
事实上

1124
00:34:12,696 --> 00:34:16,436
我们可以使用扩展数据长度

1125
00:34:16,436 --> 00:34:18,096
在一个时间间隔里

1126
00:34:18,096 --> 00:34:20,606
发送一个完整的

1127
00:34:20,606 --> 00:34:22,396
512 字节的 GATT 写入

1128
00:34:22,396 --> 00:34:23,876
这是

1129
00:34:23,876 --> 00:34:24,926
正常吞吐量的三倍

1130
00:34:26,516 --> 00:34:32,036
[掌声]

1131
00:34:32,536 --> 00:34:33,985
扩展数据长度

1132
00:34:33,985 --> 00:34:35,446
是蓝牙 4.2 中的新功能

1133
00:34:35,866 --> 00:34:36,996
它将最大应用数据长度

1134
00:34:36,996 --> 00:34:38,766
从 27

1135
00:34:38,766 --> 00:34:40,446
扩展到 251

1136
00:34:40,446 --> 00:34:42,116
这对于你的 App 来说

1137
00:34:42,116 --> 00:34:42,846
是完全透明的

1138
00:34:42,966 --> 00:34:44,396
如果

1139
00:34:44,396 --> 00:34:46,416
你是从核心蓝牙运行到核心蓝牙

1140
00:34:46,416 --> 00:34:47,065
那么我们已经为你做好了一切

1141
00:34:47,065 --> 00:34:48,676
我们会根据你的硬件配置

1142
00:34:48,676 --> 00:34:50,496
协商写入合适的数据长度和 MTU

1143
00:34:50,496 --> 00:34:52,585
但是

1144
00:34:52,585 --> 00:34:54,306
在这个例子中

1145
00:34:54,306 --> 00:34:57,186
我们在更新固件设备

1146
00:34:57,186 --> 00:34:58,646
所以

1147
00:34:58,646 --> 00:35:00,706
你还需要在配件中

1148
00:34:58,646 --> 00:35:00,706
你还需要在配件中

1149
00:35:00,706 --> 00:35:02,056
为扩展数据长度

1150
00:35:02,056 --> 00:35:02,346
添加支持

1151
00:35:03,226 --> 00:35:05,786
并且

1152
00:35:05,786 --> 00:35:07,126
它是非常节能的

1153
00:35:07,126 --> 00:35:08,856
因为在同样的广播时间中

1154
00:35:08,856 --> 00:35:09,626
它有四倍的吞吐量

1155
00:35:09,966 --> 00:35:12,446
它现在

1156
00:35:12,446 --> 00:35:14,266
可以在 iPhone 7 和 Apple Watch Series 2

1157
00:35:14,266 --> 00:35:16,616
以及新推出的 iPad Pro 上使用

1158
00:35:17,006 --> 00:35:19,346
所以

1159
00:35:19,346 --> 00:35:20,826
请尝试着使用一下

1160
00:35:20,826 --> 00:35:22,606
并且把它作为一个

1161
00:35:22,606 --> 00:35:23,276
开发你自己的扩展数据长度配件的参考

1162
00:35:24,516 --> 00:35:29,816
[掌声]

1163
00:35:30,316 --> 00:35:34,016
因为

1164
00:35:34,016 --> 00:35:35,406
我们的例子是基于更新设备

1165
00:35:35,756 --> 00:35:38,246
所以这也是一个

1166
00:35:38,246 --> 00:35:39,626
有关使用

1167
00:35:39,626 --> 00:35:40,456
L2CAP 面向连接信道的例子

1168
00:35:40,986 --> 00:35:42,576
这将会

1169
00:35:42,576 --> 00:35:45,046
消除所有之前 GATT 和 ATT 中的开销

1170
00:35:45,046 --> 00:35:47,036
但是更重要的是

1171
00:35:47,036 --> 00:35:49,496
它消除了 GATT 中的限制

1172
00:35:49,496 --> 00:35:50,736
比如之前的 GATT

1173
00:35:50,736 --> 00:35:53,696
限制最大属性大小为 512

1174
00:35:54,136 --> 00:35:57,106
所以我们现在可以写入更大的值

1175
00:35:57,106 --> 00:35:58,986
也可以使用更大的 MTU

1176
00:35:59,636 --> 00:36:01,146
当我们这样做的时候

1177
00:35:59,636 --> 00:36:01,146
当我们这样做的时候

1178
00:36:01,146 --> 00:36:03,516
吞吐量会增加至

1179
00:36:04,366 --> 00:36:04,826
接近 200 kbps

1180
00:36:05,646 --> 00:36:08,416
这证明了

1181
00:36:08,486 --> 00:36:10,456
如果没有了软件协议的限制

1182
00:36:10,456 --> 00:36:12,056
扩展数据长度

1183
00:36:12,056 --> 00:36:12,536
将会多么强大

1184
00:36:15,616 --> 00:36:17,086
众所周知

1185
00:36:17,086 --> 00:36:19,536
提升性能的另一方法是

1186
00:36:19,536 --> 00:36:20,476
请求一个更快的

1187
00:36:20,476 --> 00:36:21,046
连接间隔

1188
00:36:21,396 --> 00:36:23,936
所有至今为止的讨论

1189
00:36:23,936 --> 00:36:26,626
都假设连接间隔为 30 ms

1190
00:36:26,626 --> 00:36:28,986
但是

1191
00:36:28,986 --> 00:36:30,406
在核心蓝牙中

1192
00:36:30,406 --> 00:36:32,026
我们把 iOS 中的连接间隔

1193
00:36:32,026 --> 00:36:35,626
减小至 15 ms

1194
00:36:35,626 --> 00:36:36,826
所以当你的固件

1195
00:36:36,826 --> 00:36:38,396
在更新你的设备时

1196
00:36:38,676 --> 00:36:40,816
你可以请求一个参数更新

1197
00:36:40,816 --> 00:36:43,536
并将时间间隔的最小值和最大值

1198
00:36:43,846 --> 00:36:44,726
设置为 15 ms

1199
00:36:45,616 --> 00:36:47,046
当你这么做了以后

1200
00:36:47,046 --> 00:36:50,476
你的吞吐量

1201
00:36:50,476 --> 00:36:52,906
可以翻倍至 394 也就是接近 400 kbps

1202
00:36:53,516 --> 00:36:57,736
[掌声]

1203
00:36:58,236 --> 00:37:00,306
接下来是一个关于我们做过的事

1204
00:36:58,236 --> 00:37:00,306
接下来是一个关于我们做过的事

1205
00:37:00,306 --> 00:37:01,746
和我们正要做的事的总结

1206
00:37:02,116 --> 00:37:04,356
我们

1207
00:37:04,356 --> 00:37:06,476
从 2.5 kbps 的 Write With Response 开始

1208
00:37:07,706 --> 00:37:09,676
接着我们做出了 Write Without Response

1209
00:37:09,676 --> 00:37:11,646
但是

1210
00:37:11,686 --> 00:37:14,596
每个时间间隔只能写入一次

1211
00:37:14,596 --> 00:37:15,276
这只是将性能翻倍而已

1212
00:37:16,006 --> 00:37:17,986
但是

1213
00:37:17,986 --> 00:37:19,786
如果你打包所有传输机会

1214
00:37:20,526 --> 00:37:21,756
你的吞吐量

1215
00:37:21,756 --> 00:37:22,996
可以增加至 37 kbps

1216
00:37:22,996 --> 00:37:25,496
并且

1217
00:37:25,496 --> 00:37:28,236
如果你使用更大的 MTU 来减小开销

1218
00:37:28,236 --> 00:37:29,726
你的性能可以提高至 48 kbps

1219
00:37:30,386 --> 00:37:31,986
接着我们在扩展数据长度上

1220
00:37:31,986 --> 00:37:33,336
实现了一个重要的跨越

1221
00:37:33,596 --> 00:37:36,906
我们把它提高至三倍

1222
00:37:36,906 --> 00:37:38,446
这将性能提高至 135 kbps

1223
00:37:39,196 --> 00:37:40,966
如果

1224
00:37:41,016 --> 00:37:43,076
我们用 L2CAP 和扩展数据长度

1225
00:37:43,076 --> 00:37:44,936
来消除软件限制

1226
00:37:44,936 --> 00:37:47,436
性能可以被提升至 200 kbps

1227
00:37:48,716 --> 00:37:51,806
然后

1228
00:37:51,806 --> 00:37:53,766
我们加快连接间隔

1229
00:37:53,766 --> 00:37:55,356
这让你可以更频繁的传输数据

1230
00:37:55,356 --> 00:37:57,816
这样吞吐量

1231
00:37:57,816 --> 00:37:59,586
可以被提升至 400 kbps

1232
00:37:59,956 --> 00:38:02,396
所以

1233
00:37:59,956 --> 00:38:02,396
所以

1234
00:38:02,506 --> 00:38:04,206
我们从最初的

1235
00:38:04,206 --> 00:38:06,576
花费 3000 秒来下载 1 MB 数据

1236
00:38:06,576 --> 00:38:07,666
慢慢提高到了现在的 20 秒下载 1 MB 数据

1237
00:38:08,516 --> 00:38:12,796
[掌声]

1238
00:38:13,296 --> 00:38:14,946
所以 总的来说

1239
00:38:14,946 --> 00:38:16,616
请请求一个更短的连接间隔

1240
00:38:16,886 --> 00:38:20,226
当前 iOS 下的最新最小值

1241
00:38:20,226 --> 00:38:20,756
是 15 MS

1242
00:38:21,346 --> 00:38:23,066
请尽情的使用我们所有的 GATT 的优化

1243
00:38:23,066 --> 00:38:24,686
比如

1244
00:38:24,686 --> 00:38:26,226
Write Without Response

1245
00:38:26,226 --> 00:38:27,706
使用 L2CAP 信道

1246
00:38:27,706 --> 00:38:28,286
来做大规模数据传输

1247
00:38:28,936 --> 00:38:30,826
这些都是免费的 都是软件的形式

1248
00:38:30,826 --> 00:38:33,806
你还需要根据最新的蓝牙规范

1249
00:38:33,806 --> 00:38:34,836
和硬件标准

1250
00:38:34,836 --> 00:38:36,746
更新你的硬件

1251
00:38:36,746 --> 00:38:38,746
以得到

1252
00:38:38,746 --> 00:38:40,206
最好的性能

1253
00:38:40,206 --> 00:38:40,816
和电池寿命

1254
00:38:41,646 --> 00:38:41,976
谢谢大家

1255
00:38:42,516 --> 00:38:49,456
[掌声]

1256
00:38:49,956 --> 00:38:52,936
&gt;&gt; 谢谢你 Duy

1257
00:38:53,066 --> 00:38:54,066
所以

1258
00:38:54,066 --> 00:38:55,116
我们今天谈论了很多很振奋人心的信息

1259
00:38:55,506 --> 00:38:59,006
有很多需要回顾的东西

1260
00:38:59,006 --> 00:39:00,156
但是

1261
00:38:59,006 --> 00:39:00,156
但是

1262
00:39:00,156 --> 00:39:01,216
如果你的 App

1263
00:39:01,216 --> 00:39:02,806
是希望整天都连接的

1264
00:39:02,806 --> 00:39:04,426
你可以查看我们状态恢复中的

1265
00:39:04,426 --> 00:39:05,516
最新优化

1266
00:39:05,616 --> 00:39:07,006
尝试为你的用户

1267
00:39:07,006 --> 00:39:08,466
建立更稳定的服务

1268
00:39:09,386 --> 00:39:11,056
你可以现在

1269
00:39:11,056 --> 00:39:12,586
让你的 App

1270
00:39:12,936 --> 00:39:13,906
也适用于 Apple tvOS

1271
00:39:13,906 --> 00:39:15,736
和 watchOS

1272
00:39:17,166 --> 00:39:19,036
如果你想要尝试流媒体协议

1273
00:39:19,036 --> 00:39:20,636
或者

1274
00:39:20,636 --> 00:39:22,676
传输大规模数据

1275
00:39:22,676 --> 00:39:24,036
L2CAP 是一个很好的选择

1276
00:39:24,036 --> 00:39:25,186
并且

1277
00:39:25,186 --> 00:39:26,386
我们相信这也是一个

1278
00:39:26,386 --> 00:39:27,356
可以帮助你建立更好配件的

1279
00:39:27,356 --> 00:39:28,276
强大功能

1280
00:39:28,776 --> 00:39:30,856
如果

1281
00:39:30,856 --> 00:39:32,856
你想要建立新的配件

1282
00:39:32,856 --> 00:39:34,576
你要经常查看最新的蓝牙规范

1283
00:39:34,576 --> 00:39:36,236
和芯片集

1284
00:39:36,236 --> 00:39:37,386
并且

1285
00:39:37,386 --> 00:39:37,996
谨遵配件设计指南

1286
00:39:40,616 --> 00:39:42,806
这里

1287
00:39:42,806 --> 00:39:43,976
有一个我们的网站

1288
00:39:43,976 --> 00:39:45,106
上面有一些

1289
00:39:45,106 --> 00:39:47,476
关于核心蓝牙开发人员文档示例代码的链接

1290
00:39:47,476 --> 00:39:49,216
也有一些别的资源

1291
00:39:49,216 --> 00:39:50,176
这些可能会对你有一些帮助

1292
00:39:51,916 --> 00:39:53,546
在 WWDC

1293
00:39:53,546 --> 00:39:54,656
也有两个会议

1294
00:39:54,656 --> 00:39:56,406
可以在线观看

1295
00:39:56,406 --> 00:39:57,256
所以你可以回去看这些视频

1296
00:39:57,256 --> 00:39:59,156
然后获得一些

1297
00:39:59,156 --> 00:40:01,456
关于核心蓝牙做中央设备

1298
00:39:59,156 --> 00:40:01,456
关于核心蓝牙做中央设备

1299
00:40:01,496 --> 00:40:02,536
或者外部设备

1300
00:40:02,536 --> 00:40:02,986
的信息

1301
00:40:03,826 --> 00:40:04,346
谢谢大家

1302
00:40:04,656 --> 00:40:06,166
我们迫不及待的看到大家

1303
00:40:06,166 --> 00:40:07,246
使用这些新的技术
