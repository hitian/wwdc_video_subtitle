1
00:00:07,516 --> 00:00:16,500
[欢呼]

2
00:00:22,516 --> 00:00:27,486
[掌声]

3
00:00:27,986 --> 00:00:29,326
&gt;&gt; 欢迎来到

4
00:00:29,326 --> 00:00:30,356
“SiriKit 酷炫体验”发布会

5
00:00:31,456 --> 00:00:33,456
我是 Jose Angel Castillo Sanchez

6
00:00:33,456 --> 00:00:35,336
我将与我的合作者

7
00:00:35,336 --> 00:00:36,126
Rohit [按照发音拼写] 一起

8
00:00:36,126 --> 00:00:37,886
来给大家详细讲解

9
00:00:38,996 --> 00:00:40,936
一年前

10
00:00:40,936 --> 00:00:41,766
我们发布了 SiriKit

11
00:00:42,266 --> 00:00:44,356
从那以后 许多应用都

12
00:00:44,356 --> 00:00:45,166
开始 [音质不清晰]

13
00:00:45,816 --> 00:00:48,556
我们收到了大家的反馈

14
00:00:48,556 --> 00:00:49,536
来自开发者的反馈

15
00:00:50,216 --> 00:00:52,066
根据这些反馈 我们把问题汇总为

16
00:00:52,166 --> 00:00:53,986
四大类别 今天我们就想

17
00:00:53,986 --> 00:00:54,896
逐个重点讲解

18
00:00:56,256 --> 00:00:57,866
首先 我们想谈谈

19
00:00:57,866 --> 00:00:58,816
联系人解析的问题

20
00:00:59,236 --> 00:01:01,396
如果你的应用

21
00:00:59,236 --> 00:01:01,396
如果你的应用

22
00:01:01,396 --> 00:01:03,646
是短信 呼叫或者支付类应用

23
00:01:03,646 --> 00:01:05,416
你可能已经

24
00:01:05,416 --> 00:01:06,546
使用过它了

25
00:01:07,126 --> 00:01:08,946
在这个问题之后 我们想谈谈

26
00:01:08,946 --> 00:01:09,906
安全性问题

27
00:01:11,096 --> 00:01:13,496
如果你的应用要求

28
00:01:13,496 --> 00:01:15,086
授权过后才能完成交易

29
00:01:15,086 --> 00:01:16,926
我们将告诉你

30
00:01:16,926 --> 00:01:18,976
如何通过几个简单步骤来实现它

31
00:01:21,956 --> 00:01:23,506
然后 我们会谈一谈

32
00:01:23,666 --> 00:01:24,756
自定义词汇

33
00:01:25,916 --> 00:01:28,276
Siri 词汇量很大

34
00:01:28,276 --> 00:01:30,146
而且懂多门语言

35
00:01:30,146 --> 00:01:31,516
但你的应用可能会遇到某些特定词汇

36
00:01:31,516 --> 00:01:33,256
你可能想要

37
00:01:33,256 --> 00:01:34,256
让 Siri 了解清楚

38
00:01:34,766 --> 00:01:38,116
最后同样重要的是 我们将

39
00:01:38,116 --> 00:01:39,116
谈到用户界面测试

40
00:01:39,756 --> 00:01:41,286
自去年以来 我们已经

41
00:01:41,286 --> 00:01:42,886
在 Siri 测试自动化方面

42
00:01:42,886 --> 00:01:44,286
取得了很大进步

43
00:01:47,156 --> 00:01:48,816
我们从联系人解析

44
00:01:48,816 --> 00:01:49,446
开始讲起吧

45
00:01:50,416 --> 00:01:52,126
关于这一点 我想

46
00:01:52,126 --> 00:01:53,516
举一个短信发送的例子

47
00:01:53,726 --> 00:01:54,846
有一个短信应用

48
00:01:55,286 --> 00:01:56,366
大家可能都很熟悉

49
00:01:57,566 --> 00:01:58,376
叫 UnicornChat

50
00:01:58,706 --> 00:02:01,556
为此 我们要

51
00:01:58,706 --> 00:02:01,556
为此 我们要

52
00:02:01,556 --> 00:02:02,876
把发送信息的整个过程

53
00:02:02,876 --> 00:02:03,356
都演示一遍

54
00:02:04,316 --> 00:02:05,906
在 UnicornChat 上

55
00:02:05,906 --> 00:02:06,556
给 John 发送“你好”

56
00:02:07,376 --> 00:02:09,645
我们很清楚

57
00:02:09,686 --> 00:02:12,176
John 是我们要发送消息的对象

58
00:02:12,406 --> 00:02:14,926
在这种情况下 我的通讯录里

59
00:02:14,926 --> 00:02:16,476
有好几个 John

60
00:02:16,956 --> 00:02:18,966
有 John Appleseed

61
00:02:18,966 --> 00:02:19,286
还有 John Baily

62
00:02:19,736 --> 00:02:22,646
而仅仅通过用户意图

63
00:02:22,646 --> 00:02:23,946
想给哪个 John 发消息

64
00:02:23,946 --> 00:02:26,926
这一点并不明确

65
00:02:27,176 --> 00:02:30,226
在 iOS 10.3 中 我们曾经在

66
00:02:30,226 --> 00:02:32,976
INPerson 对象中增加过一个新属性

67
00:02:33,596 --> 00:02:34,366
就是 SiriMatches

68
00:02:35,736 --> 00:02:37,336
SiriMatches 是 Siri

69
00:02:37,336 --> 00:02:38,046
所理解的内容

70
00:02:38,276 --> 00:02:39,716
在这个例子中 指的就是这几个

71
00:02:39,716 --> 00:02:40,136
John

72
00:02:40,436 --> 00:02:42,356
也可能是 John 的

73
00:02:42,356 --> 00:02:42,706
同音异形字

74
00:02:43,546 --> 00:02:44,626
你将会得出一系列的

75
00:02:44,736 --> 00:02:46,306
INPerson 对象

76
00:02:46,486 --> 00:02:47,876
它们代表着 Siri 所理解的

77
00:02:47,876 --> 00:02:48,456
所有可能性

78
00:02:48,946 --> 00:02:51,776
我们来演示一遍整个流程

79
00:02:51,896 --> 00:02:53,466
看看怎样在 UnicornChat 上

80
00:02:53,466 --> 00:02:56,096
给 John 短信发送“你好”

81
00:02:56,386 --> 00:02:57,646
看看怎样利用这些

82
00:02:58,376 --> 00:03:00,136
SiriMatches 来解决

83
00:02:58,376 --> 00:03:00,136
SiriMatches 来解决

84
00:03:00,136 --> 00:03:01,306
我们的联系人问题

85
00:03:02,616 --> 00:03:04,746
在 UnicornChat 上给 John 发送“你好”

86
00:03:05,476 --> 00:03:07,886
Siri 显然理解了

87
00:03:07,886 --> 00:03:08,966
你想要给 John 发消息

88
00:03:09,426 --> 00:03:13,266
随后 Siri 将

89
00:03:13,266 --> 00:03:15,786
联系你的 app extension

90
00:03:15,786 --> 00:03:17,336
或是你的 intent 参数

91
00:03:17,336 --> 00:03:18,336
resolveRecipients

92
00:03:19,566 --> 00:03:21,226
在这一步 Siri 会给你

93
00:03:21,226 --> 00:03:23,126
提供一系列 INPerson 对象

94
00:03:23,126 --> 00:03:24,566
在这里 就是

95
00:03:24,566 --> 00:03:25,846
John Appleseed 和 John Baily

96
00:03:26,276 --> 00:03:27,816
我们之前已经看到过

97
00:03:27,816 --> 00:03:29,486
John Appleseed 和 John Baily

98
00:03:29,486 --> 00:03:30,746
出现在我的通讯录里

99
00:03:31,516 --> 00:03:32,796
它们也有可能是

100
00:03:32,796 --> 00:03:34,546
我自定义词汇的一部分

101
00:03:34,546 --> 00:03:36,706
是我这个应用的通讯录属性

102
00:03:36,706 --> 00:03:37,386
内容

103
00:03:38,326 --> 00:03:39,626
在这个时候

104
00:03:39,626 --> 00:03:40,726
resolveRecipients intent 参数

105
00:03:40,726 --> 00:03:41,686
将被调用

106
00:03:41,686 --> 00:03:43,196
然后由 app extension

107
00:03:43,196 --> 00:03:44,486
作出决定

108
00:03:44,966 --> 00:03:47,136
我们是否有足够的信息来

109
00:03:47,136 --> 00:03:48,476
判断我们想要给哪个 John

110
00:03:48,476 --> 00:03:52,206
发送消息 或者说 我们是否需要

111
00:03:52,236 --> 00:03:53,836
用户来帮助我们决定

112
00:03:53,836 --> 00:03:54,686
是哪一个 John

113
00:03:55,706 --> 00:03:57,316
在这种情况下 我们想

114
00:03:57,316 --> 00:03:58,106
消除歧义

115
00:03:58,456 --> 00:04:00,666
我们将

116
00:03:58,456 --> 00:04:00,666
我们将

117
00:04:00,666 --> 00:04:02,346
把这个歧义消除匹配的列表返回给 Siri

118
00:04:03,196 --> 00:04:04,766
列表将包括

119
00:04:04,766 --> 00:04:06,136
John Appleseed 和 John Baily

120
00:04:07,566 --> 00:04:09,086
接下来 Siri 将为我们的用户

121
00:04:09,086 --> 00:04:10,306
带来非凡体验 它会询问

122
00:04:10,306 --> 00:04:11,426
要找哪一个 John

123
00:04:11,896 --> 00:04:13,516
John Baily 还是 John Appleseed

124
00:04:14,036 --> 00:04:15,536
这时 就要由

125
00:04:15,536 --> 00:04:17,546
用户来决定哪一个 John

126
00:04:17,546 --> 00:04:19,805
是他们想要发送消息的对象了

127
00:04:22,296 --> 00:04:23,606
在这个流程展示中

128
00:04:23,606 --> 00:04:25,556
假设 John Baily 是

129
00:04:25,556 --> 00:04:26,446
我们的选择对象

130
00:04:26,916 --> 00:04:29,756
Siri 清楚地理解到

131
00:04:29,756 --> 00:04:31,896
John Baily 是我们想发送消息

132
00:04:31,896 --> 00:04:33,106
想使用的联系人

133
00:04:33,666 --> 00:04:35,636
Siri 会反馈给

134
00:04:35,636 --> 00:04:36,886
你的 resolveRecipients intent

135
00:04:36,886 --> 00:04:38,836
参数 表明 John Baily

136
00:04:38,836 --> 00:04:40,176
是被选中的 INPerson 对象

137
00:04:40,986 --> 00:04:43,076
这时候  情况就很清楚了

138
00:04:43,076 --> 00:04:44,336
我们想发送消息给 John Baily

139
00:04:45,246 --> 00:04:47,146
而你的 intent 接收者

140
00:04:47,546 --> 00:04:48,986
intent 参数也已经准备要

141
00:04:48,986 --> 00:04:50,046
要进入下一阶段了

142
00:04:53,076 --> 00:04:54,636
概述而言 我们演示经历了

143
00:04:54,636 --> 00:04:56,276
这样一番过程  当我们发现有好几个名字是

144
00:04:56,276 --> 00:04:58,086
John 的人存在于通讯录里的过程

145
00:04:58,156 --> 00:04:59,596
以及我们

146
00:04:59,596 --> 00:05:01,836
如何消除歧义的流程

147
00:04:59,596 --> 00:05:01,836
如何消除歧义的流程

148
00:05:02,196 --> 00:05:03,336
我们决定想要

149
00:05:03,336 --> 00:05:04,226
发消息给 John Baily

150
00:05:07,496 --> 00:05:10,986
可是如果如果 John Baily

151
00:05:10,986 --> 00:05:12,936
有多个电话号码或

152
00:05:12,936 --> 00:05:14,856
多个电邮地址 抑或是这两种情况

153
00:05:14,856 --> 00:05:15,276
都存在呢

154
00:05:15,896 --> 00:05:18,366
我们仍然不太明确

155
00:05:18,366 --> 00:05:20,046
究竟想要使用哪种方式

156
00:05:20,086 --> 00:05:21,056
来发送消息

157
00:05:21,806 --> 00:05:23,716
所以 我们往回再看一下

158
00:05:23,716 --> 00:05:24,976
回到用户选择 John Baily 时

159
00:05:25,006 --> 00:05:25,586
的状态

160
00:05:26,746 --> 00:05:28,506
Siri 明白我们想要

161
00:05:28,506 --> 00:05:29,576
发消息给 John Baily

162
00:05:32,116 --> 00:05:33,876
Siri 将转而使用 “John Baily” 

163
00:05:34,056 --> 00:05:35,546
来联系你在

164
00:05:35,546 --> 00:05:36,976
resolveRecipients intent 之下的

165
00:05:36,976 --> 00:05:40,186
extension 参数

166
00:05:40,586 --> 00:05:43,526
这时候 就需要通过你的

167
00:05:43,526 --> 00:05:44,516
resolveRecipients intent

168
00:05:44,516 --> 00:05:47,326
参数执行

169
00:05:47,326 --> 00:05:49,256
来连接你的通讯录

170
00:05:49,256 --> 00:05:50,956
并确保你有足够信息

171
00:05:50,956 --> 00:05:52,576
来确定将要使用

172
00:05:52,576 --> 00:05:53,326
哪种联系方式

173
00:05:54,076 --> 00:05:55,656
正如我们所见 在这种情况下 我们有

174
00:05:55,656 --> 00:05:57,386
多个联系方式 所以需要

175
00:05:57,386 --> 00:05:58,226
用户输入

176
00:05:58,776 --> 00:06:00,616
如果问题集中到电话联系方式上

177
00:05:58,776 --> 00:06:00,616
如果问题集中到电话联系方式上

178
00:06:00,616 --> 00:06:01,386
我们将向 Siri 提供

179
00:06:01,386 --> 00:06:03,786
一个消除歧义列表

180
00:06:03,786 --> 00:06:05,566
就像我们之前处理多个 John 的情况一样

181
00:06:05,836 --> 00:06:07,136
但这次是

182
00:06:07,136 --> 00:06:08,806
多个电话号码联系方式

183
00:06:09,226 --> 00:06:11,446
我们已经看到 这里有住宅电话 手机

184
00:06:11,446 --> 00:06:11,946
还有工作电话

185
00:06:13,716 --> 00:06:17,016
Siri 将向用户发出

186
00:06:17,176 --> 00:06:18,106
一个提示

187
00:06:18,296 --> 00:06:19,586
“您想使用哪个号码”

188
00:06:20,246 --> 00:06:21,316
所以 在这种情况下

189
00:06:21,316 --> 00:06:22,976
用户就很清楚自己需要

190
00:06:22,976 --> 00:06:24,346
选择一个号码来发送

191
00:06:24,346 --> 00:06:24,816
消息

192
00:06:25,836 --> 00:06:27,866
我们假设用户想要

193
00:06:27,866 --> 00:06:32,276
发送消息到这个手机号

194
00:06:32,436 --> 00:06:33,746
用户对 Siri 说“手机”

195
00:06:34,266 --> 00:06:35,566
我们又会经历同样的循环过程

196
00:06:35,726 --> 00:06:37,416
Siri 明白

197
00:06:37,416 --> 00:06:38,926
你想要给 John Baily 的手机

198
00:06:38,926 --> 00:06:40,166
号码发送消息

199
00:06:40,636 --> 00:06:42,286
Siri 会把这个信息

200
00:06:42,286 --> 00:06:43,446
发回给

201
00:06:43,446 --> 00:06:44,956
resolveRecipients intent

202
00:06:44,956 --> 00:06:45,426
参数

203
00:06:45,986 --> 00:06:48,056
这样你将得到

204
00:06:48,056 --> 00:06:48,956
完整的信息

205
00:06:49,106 --> 00:06:50,496
我们想要发消息给 John Baily

206
00:06:50,546 --> 00:06:51,916
而且是想发送给他的

207
00:06:51,916 --> 00:06:52,816
手机号码

208
00:06:53,376 --> 00:06:56,106
在这个时候

209
00:06:56,106 --> 00:06:57,106
resolveRecipients intent

210
00:06:57,106 --> 00:06:58,846
参数返回值为“成功”

211
00:06:58,846 --> 00:07:00,356
于是我们就完成了

212
00:06:58,846 --> 00:07:00,356
于是我们就完成了

213
00:07:00,356 --> 00:07:01,966
选择消息接收者的步骤 可以继续

214
00:07:01,966 --> 00:07:03,866
下一步骤了

215
00:07:04,996 --> 00:07:06,916
我们知道 执行任何一个 SiriKit intent

216
00:07:06,916 --> 00:07:09,486
都有三个步骤：

217
00:07:09,636 --> 00:07:11,346
解析 确认和处理

218
00:07:12,576 --> 00:07:14,776
那么 让我们来看看

219
00:07:14,776 --> 00:07:16,376
resolveRecipients

220
00:07:16,446 --> 00:07:17,906
intent 参数执行时的示例代码

221
00:07:20,836 --> 00:07:23,196
现在我要执行

222
00:07:23,196 --> 00:07:23,836
resolveRecipients

223
00:07:25,226 --> 00:07:26,356
我们要做的第一件事

224
00:07:26,356 --> 00:07:28,556
就是确保

225
00:07:28,556 --> 00:07:29,156
已经有确定的接收者

226
00:07:29,826 --> 00:07:31,046
如果没有提供接收者

227
00:07:31,046 --> 00:07:32,526
我们基本上可以要求 Siri

228
00:07:32,526 --> 00:07:34,246
去向用户询问这个值的内容

229
00:07:34,246 --> 00:07:36,446
我们实现这一点的方法

230
00:07:36,446 --> 00:07:38,536
是返回 needsValue

231
00:07:39,406 --> 00:07:40,736
这样 Siri 就会提示用户

232
00:07:41,166 --> 00:07:42,246
“您想向谁发送

233
00:07:42,246 --> 00:07:42,726
消息”

234
00:07:43,276 --> 00:07:45,606
在我们刚刚演示过的例子里

235
00:07:46,216 --> 00:07:47,616
用户表示他们想要

236
00:07:47,616 --> 00:07:48,256
给 John 发消息

237
00:07:49,286 --> 00:07:51,386
所以 我们得到的回复是 John

238
00:07:51,686 --> 00:07:53,036
我们已经有了 John Appleseed 和

239
00:07:53,036 --> 00:07:53,436
John Baily

240
00:07:53,756 --> 00:07:54,906
从这一步开始 我们要

241
00:07:54,906 --> 00:07:56,096
解析出

242
00:07:56,096 --> 00:07:57,866
我们想使用哪位接收者

243
00:07:57,866 --> 00:07:59,326
或者将消除歧义列表

244
00:07:59,356 --> 00:08:01,286
返回给 Siri 让它来提示

245
00:07:59,356 --> 00:08:01,286
返回给 Siri 让它来提示

246
00:08:01,456 --> 00:08:01,966
用户

247
00:08:03,276 --> 00:08:04,166
在我们需要向 Siri

248
00:08:04,166 --> 00:08:07,026
提供一份列表的情况下

249
00:08:07,026 --> 00:08:08,246
我们基本上是在

250
00:08:08,246 --> 00:08:09,066
结束句柄下予以返回的

251
00:08:11,696 --> 00:08:13,076
我们来演示一下

252
00:08:13,076 --> 00:08:13,466
这个操作过程

253
00:08:17,136 --> 00:08:19,936
现在我在 UnicornChat 

254
00:08:20,236 --> 00:08:21,336
应用上执行

255
00:08:21,336 --> 00:08:22,836
我的 resolveRecipients 

256
00:08:22,836 --> 00:08:23,406
intent 参数

257
00:08:24,496 --> 00:08:26,226
正如我们所看到的 我们需要做的

258
00:08:26,226 --> 00:08:29,556
第一件事 是确认

259
00:08:29,556 --> 00:08:30,826
我们有一位接收者

260
00:08:31,976 --> 00:08:33,306
现在我们来确定

261
00:08:33,306 --> 00:08:34,346
接收者是否已被提供

262
00:08:34,895 --> 00:08:38,296
如果没有提供接收者

263
00:08:38,296 --> 00:08:40,535
我们就要求 Siri

264
00:08:40,535 --> 00:08:44,636
向用户询问我们需要这个值

265
00:08:44,796 --> 00:08:46,506
一旦我们已经获得了接收者

266
00:08:47,206 --> 00:08:49,666
我们就要继续对这些接收者

267
00:08:49,666 --> 00:08:50,506
进行处理

268
00:08:51,066 --> 00:08:53,116
现在 我们要浏览一遍

269
00:08:53,116 --> 00:08:54,566
Siri 提供的所有接收者

270
00:08:54,566 --> 00:08:56,346
这样就可以逐个进行

271
00:08:56,346 --> 00:08:56,746
处理

272
00:08:57,186 --> 00:08:59,406
我要做的第一件事

273
00:08:59,406 --> 00:09:00,896
就是要查看

274
00:08:59,406 --> 00:09:00,896
就是要查看

275
00:09:00,896 --> 00:09:02,916
我的通讯录 以便分析这位

276
00:09:02,916 --> 00:09:03,416
接收者

277
00:09:04,706 --> 00:09:06,276
我的通讯录将承担

278
00:09:06,276 --> 00:09:07,766
最棘手的问题 就是要确保

279
00:09:07,916 --> 00:09:10,236
我们有一个联系人

280
00:09:10,236 --> 00:09:11,036
与那位接收者能对上号

281
00:09:12,626 --> 00:09:14,336
一旦这一步完成 我们就需要

282
00:09:14,336 --> 00:09:15,106
做一个决定

283
00:09:16,306 --> 00:09:18,076
第一种情况是

284
00:09:18,076 --> 00:09:19,776
没有哪位联系人能跟

285
00:09:19,776 --> 00:09:20,266
那位接收者对上号

286
00:09:20,666 --> 00:09:21,796
回到我们刚讲的 John 的例子

287
00:09:21,796 --> 00:09:23,476
如果我的通讯录里

288
00:09:23,476 --> 00:09:25,236
根本就没有 John 我们基本只能

289
00:09:25,236 --> 00:09:26,946
告诉 Siri 通讯录中没有 John

290
00:09:26,946 --> 00:09:28,146
无法支持这个请求

291
00:09:28,696 --> 00:09:30,186
这将导致 Siri 请求用户

292
00:09:30,186 --> 00:09:31,966
提供一个有效的

293
00:09:31,966 --> 00:09:32,546
接收者名称

294
00:09:33,076 --> 00:09:35,706
如果我们在通讯录中找到一个 John

295
00:09:36,216 --> 00:09:37,376
我们需要处理那个

296
00:09:37,996 --> 00:09:38,566
接收者

297
00:09:39,046 --> 00:09:40,806
那么 我来演示一下

298
00:09:40,806 --> 00:09:41,366
这段代码

299
00:09:42,756 --> 00:09:44,566
我们要做的第一件事

300
00:09:44,566 --> 00:09:47,076
是确认

301
00:09:47,076 --> 00:09:48,996
我们找到的那个接收者是否有一个

302
00:09:48,996 --> 00:09:49,936
或多个联系方式

303
00:09:50,356 --> 00:09:51,536
这里 我们将要关注的是

304
00:09:51,536 --> 00:09:52,286
电话号码

305
00:09:52,826 --> 00:09:54,056
如果电话号码

306
00:09:54,056 --> 00:09:55,836
不止一个 而且我们无法

307
00:09:55,836 --> 00:09:57,616
替用户做出决定

308
00:09:57,616 --> 00:09:58,446
那么我们就要返回一个

309
00:09:58,446 --> 00:10:01,316
消除歧义的响应代码

310
00:09:58,446 --> 00:10:01,316
消除歧义的响应代码

311
00:10:01,646 --> 00:10:02,896
同时包括我们想要

312
00:10:02,896 --> 00:10:03,326
展示的联系方式

313
00:10:03,666 --> 00:10:05,206
Siri 将会用它

314
00:10:05,636 --> 00:10:07,676
询问用户

315
00:10:07,676 --> 00:10:08,956
究竟想要使用哪个句柄

316
00:10:12,656 --> 00:10:15,296
如果我们的通讯录里只有一个

317
00:10:15,296 --> 00:10:17,326
接收者 只带有一个联系方式

318
00:10:17,326 --> 00:10:18,966
我们通常都返回

319
00:10:18,966 --> 00:10:19,536
“成功”值

320
00:10:19,656 --> 00:10:20,776
告诉他们说  我们已经找到

321
00:10:20,776 --> 00:10:22,216
接收者 并且已经准备

322
00:10:22,216 --> 00:10:23,466
进入下一个步骤

323
00:10:24,566 --> 00:10:25,706
这里有一种特殊情况

324
00:10:27,476 --> 00:10:31,216
在这种特殊情况下

325
00:10:31,216 --> 00:10:33,766
Siri 会向用户询问

326
00:10:33,766 --> 00:10:35,196
“您确定要

327
00:10:35,196 --> 00:10:35,516
给 John 发送消息吗”

328
00:10:36,236 --> 00:10:38,166
在有些情况下我用到这个办法 比如

329
00:10:38,166 --> 00:10:39,776
当我在进行某种程度的模糊匹配时

330
00:10:39,856 --> 00:10:42,066
这时 Siri 被询问的联系人

331
00:10:42,066 --> 00:10:43,666
跟我通讯录中的

332
00:10:43,666 --> 00:10:44,846
联系人并不完全

333
00:10:44,846 --> 00:10:48,556
匹配

334
00:10:48,776 --> 00:10:50,026
我们或多或少还会错过

335
00:10:50,026 --> 00:10:50,556
要处理的情况

336
00:10:52,316 --> 00:10:53,996
在这个例子里 我们得到的

337
00:10:53,996 --> 00:10:55,036
匹配结果不止一个

338
00:10:56,136 --> 00:10:58,256
正如我们所见 我的通讯录里有

339
00:10:58,256 --> 00:11:00,166
John Baily 和 John Appleseed

340
00:10:58,256 --> 00:11:00,166
John Baily 和 John Appleseed

341
00:11:00,166 --> 00:11:01,746
所以我们需要消除这二者之间

342
00:11:01,746 --> 00:11:02,356
的歧义

343
00:11:02,986 --> 00:11:04,066
在此我们还将使用同样的

344
00:11:04,066 --> 00:11:05,176
技术手段 要使用

345
00:11:05,176 --> 00:11:06,976
消除歧义列表 然后提供

346
00:11:06,976 --> 00:11:12,406
匹配列表

347
00:11:12,526 --> 00:11:13,616
还有一种情况

348
00:11:14,016 --> 00:11:15,336
正如我们在刚才的流程中所看见的

349
00:11:15,336 --> 00:11:17,046
首先我们已经要求给 John 发送消息

350
00:11:17,046 --> 00:11:18,976
然后当用户

351
00:11:18,976 --> 00:11:20,766
选择 John Baily 后 我们又问他要选择哪个

352
00:11:20,766 --> 00:11:21,176
联系方式

353
00:11:22,076 --> 00:11:23,616
我们将重新调用

354
00:11:23,616 --> 00:11:24,696
resolveRecipients intent

355
00:11:24,696 --> 00:11:26,346
参数 我们需要处理

356
00:11:26,346 --> 00:11:26,966
这种情况

357
00:11:27,576 --> 00:11:28,776
在这种情况下 我们需要确认

358
00:11:28,776 --> 00:11:30,656
是否已经提供了联系方式

359
00:11:30,656 --> 00:11:32,016
我们基本上可以

360
00:11:32,016 --> 00:11:33,436
那位接收者

361
00:11:33,436 --> 00:11:33,966
作为返回值

362
00:11:34,486 --> 00:11:36,916
那么 我们来看看它的具体操作

363
00:11:39,696 --> 00:11:41,236
为了做到这一点 我将要

364
00:11:41,236 --> 00:11:44,236
使用编辑方案

365
00:11:44,386 --> 00:11:45,736
所以你可以从一开始就为 Siri 提供

366
00:11:45,736 --> 00:11:48,086
intent 询问 所以

367
00:11:48,086 --> 00:11:49,706
实际上你必须要触发

368
00:11:49,706 --> 00:11:50,806
Siri 并对它讲话

369
00:11:51,096 --> 00:11:52,576
所以 当我演示这个例子时

370
00:11:52,576 --> 00:11:54,056
就是要触发 Siri

371
00:11:54,086 --> 00:11:55,666
就是要对它说

372
00:11:55,666 --> 00:11:56,836
“在 UnicornChat 上给 John 发送‘Hello’”

373
00:12:08,266 --> 00:12:09,986
我们看到了

374
00:12:09,986 --> 00:12:11,766
我的通讯录中有好几个 John

375
00:12:11,766 --> 00:12:12,446
所以我们需要选择其中一位

376
00:12:13,136 --> 00:12:14,096
我们来选一下 John Baily

377
00:12:14,636 --> 00:12:17,066
我们在经历这个流程时

378
00:12:17,066 --> 00:12:18,376
还必须要选择一个联系方式

379
00:12:18,546 --> 00:12:19,786
在这里 我们想选择

380
00:12:19,786 --> 00:12:20,576
手机联系方式

381
00:12:21,956 --> 00:12:23,196
这时 我们已经准备好

382
00:12:23,196 --> 00:12:24,936
发送消息 而且所有的

383
00:12:25,046 --> 00:12:29,000
这位接收者也已经被解析出来了

384
00:12:32,516 --> 00:12:37,326
[掌声]

385
00:12:37,826 --> 00:12:39,326
我们刚刚看到了

386
00:12:39,326 --> 00:12:41,056
在发送消息时

387
00:12:41,056 --> 00:12:42,436
如何确定联系人的

388
00:12:42,436 --> 00:12:42,886
过程

389
00:12:43,436 --> 00:12:45,056
这种技巧也适用于

390
00:12:45,056 --> 00:12:46,536
其他需要对联系人

391
00:12:46,576 --> 00:12:47,416
进行解析的 intent

392
00:12:49,876 --> 00:12:52,416
使用短信 App 来发送消息

393
00:12:52,416 --> 00:12:53,856
感觉很棒 不过用它们

394
00:12:53,856 --> 00:12:55,386
来读取消息

395
00:12:55,386 --> 00:12:55,876
也很棒

396
00:12:56,496 --> 00:12:58,246
举一个很好的例子

397
00:12:58,246 --> 00:12:59,846
那就是用 CarPlay 读取信息

398
00:13:00,746 --> 00:13:02,716
如果你的应用执行了

399
00:13:03,076 --> 00:13:05,116
INSearchForMessagesIntent

400
00:13:05,566 --> 00:13:07,396
你就可以获取

401
00:13:07,396 --> 00:13:09,716
在 iOS 以及 CarPlay 上的

402
00:13:09,716 --> 00:13:09,946
阅读记录

403
00:13:10,446 --> 00:13:14,046
所以 我们在 iOS 11 里引入了

404
00:13:14,046 --> 00:13:16,446
一种新属性 通过它能够

405
00:13:16,446 --> 00:13:18,266
更方便地回复 Siri 刚向我们的用户

406
00:13:18,266 --> 00:13:19,656
读出的信息

407
00:13:21,436 --> 00:13:23,286
这种新属性叫做

408
00:13:23,286 --> 00:13:24,526
conversationIdentifier

409
00:13:25,336 --> 00:13:27,116
它已经被采用于

410
00:13:27,176 --> 00:13:29,906
INMessage 对象 以及

411
00:13:29,906 --> 00:13:31,276
INSendMessageIntent

412
00:13:32,176 --> 00:13:33,966
这个 conversationIdentifier 

413
00:13:33,966 --> 00:13:36,596
将会被用来回复

414
00:13:36,596 --> 00:13:37,056
消息

415
00:13:37,366 --> 00:13:38,626
Siri 将为你读出

416
00:13:38,626 --> 00:13:41,326
来自 UnicornChat 的消息

417
00:13:41,326 --> 00:13:42,806
这一属性的值将

418
00:13:42,846 --> 00:13:44,416
帮助你缩短

419
00:13:44,416 --> 00:13:45,996
联系人解析过程

420
00:13:45,996 --> 00:13:48,426
这个我们刚刚演示过

421
00:13:48,626 --> 00:13:51,486
现在我们来看看这个流程是怎样

422
00:13:51,486 --> 00:13:51,836
完成的

423
00:13:52,346 --> 00:13:55,416
“查看我在 UnicornChat 上的消息”

424
00:13:56,526 --> 00:13:57,896
我们想查看一下我们在

425
00:13:57,896 --> 00:13:59,696
UnicornChat 上收到的消息

426
00:14:00,326 --> 00:14:03,736
Siri 清楚地理解了我们的要求

427
00:14:03,956 --> 00:14:05,496
Siri 将发送一个

428
00:14:05,526 --> 00:14:07,356
INSearchForMessagesIntent

429
00:14:07,356 --> 00:14:08,256
到你的 app extension

430
00:14:09,146 --> 00:14:10,446
你的 app extension 已经

431
00:14:10,446 --> 00:14:11,556
执行了

432
00:14:11,556 --> 00:14:13,106
SearchForMessageIntent 句柄

433
00:14:14,206 --> 00:14:16,206
这个句柄将提供

434
00:14:16,206 --> 00:14:18,006
INMessages 对象列表

435
00:14:18,576 --> 00:14:19,846
Siri 会将这个列表读取给

436
00:14:19,906 --> 00:14:20,456
用户

437
00:14:21,676 --> 00:14:23,936
我们都注意到了 INMessage

438
00:14:23,976 --> 00:14:26,566
对象包含了一个属性 它名为

439
00:14:26,566 --> 00:14:27,756
conversationIdentifier

440
00:14:29,026 --> 00:14:31,686
这个标识符代表着

441
00:14:31,686 --> 00:14:33,486
该会话的独特性

442
00:14:34,626 --> 00:14:36,006
由于这种独特性的存在 如果用户想要

443
00:14:36,006 --> 00:14:37,616
予以回复的话

444
00:14:37,846 --> 00:14:38,976
你就可以

445
00:14:39,806 --> 00:14:39,906
使用那个 conversationIdentifier 了

446
00:14:41,146 --> 00:14:43,326
正如我们所见 Siri 在读完

447
00:14:43,326 --> 00:14:44,596
消息之后 会询问用户

448
00:14:44,596 --> 00:14:45,896
他们是否想要回复此消息

449
00:14:47,516 --> 00:14:49,116
为了继续这个流程 我们不妨

450
00:14:49,116 --> 00:14:51,166
假设用户想要回复说

451
00:14:51,626 --> 00:14:52,376
“你好”

452
00:14:52,896 --> 00:14:56,506
Siri 清楚地理解了

453
00:14:56,506 --> 00:14:58,646
用户只说了“你好” 意思是

454
00:14:58,646 --> 00:14:59,996
我想回复这条消息

455
00:15:00,026 --> 00:15:01,726
并且回复的内容是

456
00:15:01,726 --> 00:15:02,296
“你好”

457
00:15:03,676 --> 00:15:05,146
Siri 将会发送一个

458
00:15:05,146 --> 00:15:07,016
INSendMessageIntent

459
00:15:07,016 --> 00:15:08,326
并附有已输入数据的

460
00:15:08,416 --> 00:15:08,976
conversationIdentifier

461
00:15:09,716 --> 00:15:11,156
这个 conversationIdentifier

462
00:15:11,156 --> 00:15:12,836
的值就是你在 INMessage 对象上

463
00:15:12,836 --> 00:15:14,356
输入的相同值

464
00:15:14,416 --> 00:15:16,306
Siri 正是通过它来

465
00:15:16,306 --> 00:15:17,106
读取消息

466
00:15:18,276 --> 00:15:20,206
关于这个值  现在它

467
00:15:20,206 --> 00:15:20,946
也被提供给

468
00:15:20,946 --> 00:15:22,126
resolveRecipients intent

469
00:15:22,126 --> 00:15:22,576
参数中

470
00:15:23,366 --> 00:15:24,826
我们可以缩短

471
00:15:24,826 --> 00:15:26,236
联系人的解析过程

472
00:15:26,236 --> 00:15:27,776
基本上就是利用这个值

473
00:15:27,776 --> 00:15:29,626
然后直接进入消息会话

474
00:15:29,626 --> 00:15:31,426
抓取这个会话

475
00:15:31,426 --> 00:15:32,746
选择接收者

476
00:15:32,746 --> 00:15:34,996
然后进入下一步

477
00:15:34,996 --> 00:15:36,486
也就是说

478
00:15:36,486 --> 00:15:36,916
回复消息

479
00:15:41,556 --> 00:15:43,146
想进一步了解如何

480
00:15:43,146 --> 00:15:44,506
在 CarPlay 中启用你的 App

481
00:15:44,506 --> 00:15:45,526
我推荐大家去看看

482
00:15:45,526 --> 00:15:47,276
我们今年发布的这个

483
00:15:47,806 --> 00:15:47,896
视频

484
00:15:52,716 --> 00:15:56,036
除了关注联系人解析之外

485
00:15:56,036 --> 00:15:59,016
我们还致力于研究

486
00:15:59,016 --> 00:16:00,116
响应代码

487
00:15:59,016 --> 00:16:00,116
响应代码

488
00:16:01,226 --> 00:16:02,556
去年 当我们推出

489
00:16:02,556 --> 00:16:03,946
SiriKit 时 也推出了一套

490
00:16:03,946 --> 00:16:05,236
响应代码 你们在短信服务领域里

491
00:16:05,236 --> 00:16:06,886
或许已经很熟悉这些

492
00:16:06,886 --> 00:16:07,216
响应代码了

493
00:16:07,606 --> 00:16:09,216
我举个例子 如果服务不可用

494
00:16:09,216 --> 00:16:11,046
你可以返回一条

495
00:16:11,046 --> 00:16:13,116
“故障 服务不可用”

496
00:16:13,116 --> 00:16:14,596
Siri 将很乐意

497
00:16:14,596 --> 00:16:16,436
告知用户是哪里

498
00:16:16,436 --> 00:16:16,676
出了问题

499
00:16:16,926 --> 00:16:19,646
我们关注这一点 而且已经

500
00:16:19,646 --> 00:16:21,646
改进了相关响应代码

501
00:16:22,626 --> 00:16:24,646
即通话意图 短信意图

502
00:16:24,646 --> 00:16:27,306
和支付意图的响应代码

503
00:16:27,986 --> 00:16:30,026
关于这种情况 我再举个例子

504
00:16:30,086 --> 00:16:32,046
如果有一个呼叫意图 在我们引入一个

505
00:16:32,046 --> 00:16:33,486
无效号码的

506
00:16:33,486 --> 00:16:35,336
响应代码后

507
00:16:35,336 --> 00:16:36,706
它会帮助我们更清楚地

508
00:16:36,706 --> 00:16:39,436
告知用户 这个新创建的 

509
00:16:39,436 --> 00:16:40,646
intent 缺少一个有效号码

510
00:16:41,276 --> 00:16:42,646
Siri 将以这种方式而提供一种

511
00:16:42,646 --> 00:16:44,726
很棒的体验 它会

512
00:16:44,816 --> 00:16:46,796
很清楚哪里出了问题

513
00:16:47,536 --> 00:16:49,006
若想了解更多相关信息

514
00:16:49,216 --> 00:16:49,736
大家可以查看一下

515
00:16:49,736 --> 00:16:50,516
这方面的文稿

516
00:16:52,456 --> 00:16:54,546
现在扼要总结一下我们讲解过的内容

517
00:16:54,546 --> 00:16:56,306
我们谈到了

518
00:16:56,306 --> 00:16:58,226
INPerson.SiriMatches 这是

519
00:16:58,226 --> 00:16:59,766
我们引入 iOS 10.3 的新属性

520
00:16:59,876 --> 00:17:02,796
它可以帮助你

521
00:16:59,876 --> 00:17:02,796
它可以帮助你

522
00:17:02,796 --> 00:17:04,016
进行更准确的联系人解析

523
00:17:04,016 --> 00:17:04,396
处理

524
00:17:05,465 --> 00:17:06,945
在这之后 我们演示了

525
00:17:06,945 --> 00:17:08,106
如何解析

526
00:17:08,106 --> 00:17:09,705
多个句柄的过程  也就是

527
00:17:09,806 --> 00:17:11,606
它包含了多个电话号码

528
00:17:11,606 --> 00:17:13,356
或者电邮地址 或两方面都存在这种

529
00:17:13,356 --> 00:17:13,626
情况

530
00:17:16,296 --> 00:17:17,955
我们还介绍了

531
00:17:18,086 --> 00:17:19,576
conversationIdentifier

532
00:17:19,656 --> 00:17:21,506
以及它如何有效帮助用户回复

533
00:17:21,506 --> 00:17:23,665
Siri 读过的短信消息

534
00:17:24,935 --> 00:17:26,866
我们还简要谈到了

535
00:17:26,866 --> 00:17:27,796
响应代码以及

536
00:17:27,796 --> 00:17:29,676
我们已在 iOS 11 里提供的

537
00:17:29,736 --> 00:17:30,386
改进措施

538
00:17:31,646 --> 00:17:32,896
接下来 我要把讲台让给

539
00:17:32,896 --> 00:17:34,636
我的合作者 Rohit 让他

540
00:17:34,636 --> 00:17:35,826
来给你们讲解更多关于

541
00:17:35,826 --> 00:17:36,356
安全性的内容

542
00:17:37,516 --> 00:17:42,366
[掌声]

543
00:17:42,866 --> 00:17:43,526
&gt;&gt; 谢谢 Angel

544
00:17:45,056 --> 00:17:46,096
大家好

545
00:17:46,726 --> 00:17:48,516
我叫 Rohit Dasari

546
00:17:48,586 --> 00:17:49,866
是 SiriKit 团队的一员

547
00:17:50,486 --> 00:17:52,026
现在 我们来谈谈

548
00:17:52,026 --> 00:17:53,316
SiriKit 语境的安全性

549
00:17:53,846 --> 00:17:56,876
我们再回到

550
00:17:56,876 --> 00:17:58,106
先前演示过的 UnicornChat 的

551
00:17:58,106 --> 00:17:58,436
例子

552
00:17:59,486 --> 00:18:00,686
大家看这里 用户可以

553
00:17:59,486 --> 00:18:00,686
大家看这里 用户可以

554
00:18:00,686 --> 00:18:02,366
发送消息 即使

555
00:18:02,366 --> 00:18:03,476
设备处于锁屏状态

556
00:18:04,076 --> 00:18:05,466
现在 Siri 做到了

557
00:18:05,996 --> 00:18:07,656
Siri 做出决定的

558
00:18:07,926 --> 00:18:09,696
基础  是 intent 能否

559
00:18:09,696 --> 00:18:12,456
如何平衡可用性与

560
00:18:12,456 --> 00:18:14,166
有安全保障的便捷性

561
00:18:15,366 --> 00:18:16,946
在这个短信的例子中

562
00:18:16,946 --> 00:18:18,786
Siri 实现了这些请求

563
00:18:18,786 --> 00:18:20,086
尽管设备是处于锁屏状态

564
00:18:20,956 --> 00:18:23,366
你们有些人可能需要

565
00:18:23,436 --> 00:18:24,786
先让用户解锁设备

566
00:18:24,786 --> 00:18:26,566
然后再处理

567
00:18:26,566 --> 00:18:27,236
这一类的意图

568
00:18:28,636 --> 00:18:29,746
这可能是出于某些

569
00:18:29,746 --> 00:18:31,956
安全政策或者某些

570
00:18:31,956 --> 00:18:34,136
公司或法律的要求

571
00:18:34,136 --> 00:18:35,596
你的 App 必须遵循这些要求

572
00:18:37,156 --> 00:18:39,236
运用目前的 SiriKit 机制 

573
00:18:39,496 --> 00:18:42,296
就有办法做到这一点

574
00:18:42,676 --> 00:18:44,056
而不必更改任何代码

575
00:18:44,056 --> 00:18:45,596
这就是零代码变更

576
00:18:47,676 --> 00:18:50,106
你只需要进入

577
00:18:50,106 --> 00:18:52,856
SiriKit intents Extension 里的 

578
00:18:52,856 --> 00:18:56,696
Info.plist 文件 以及你列举的

579
00:18:56,696 --> 00:18:58,406
自己的 Extension 所支持的

580
00:18:58,626 --> 00:19:00,106
各种 intents

581
00:18:58,626 --> 00:19:00,106
各种 intents

582
00:19:01,026 --> 00:19:05,156
你需要为你想要限制的 intents

583
00:19:05,156 --> 00:19:06,086
创建这个条目

584
00:19:07,156 --> 00:19:08,106
字段名为

585
00:19:08,156 --> 00:19:09,816
IntentsRestrictedWhileLocked

586
00:19:09,816 --> 00:19:10,996
这个名称已经说明自身性质了

587
00:19:11,946 --> 00:19:14,866
那么  经过这个改动 现在 Siri

588
00:19:14,866 --> 00:19:18,386
知道了 当用户

589
00:19:18,386 --> 00:19:22,316
想要执行一个

590
00:19:22,316 --> 00:19:25,346
属于该类别的 intent 时

591
00:19:25,346 --> 00:19:27,336
首先要给设备解锁

592
00:19:29,336 --> 00:19:31,026
一行代码都不用更改

593
00:19:34,976 --> 00:19:37,386
但有时这还不够

594
00:19:37,966 --> 00:19:39,036
只是去解锁设备 仍然

595
00:19:39,036 --> 00:19:39,456
不够

596
00:19:40,036 --> 00:19:41,496
让我们以这个 App 为例

597
00:19:41,496 --> 00:19:45,236
用户可以用这个 App

598
00:19:45,236 --> 00:19:46,566
锁定和解锁他们的汽车

599
00:19:47,556 --> 00:19:49,276
对于这样一个 App

600
00:19:49,276 --> 00:19:51,286
要与 SiriKit 集成

601
00:19:51,286 --> 00:19:53,646
就必须处理一个 intent 它名为

602
00:19:54,056 --> 00:19:56,556
setCarLockStatusIntent

603
00:19:57,676 --> 00:19:58,936
这个 intent 我们已添加到了

604
00:19:59,306 --> 00:20:00,616
iOS 10.3

605
00:19:59,306 --> 00:20:00,616
iOS 10.3

606
00:20:01,156 --> 00:20:03,956
让我们快速看一下这个

607
00:20:03,956 --> 00:20:04,426
intent

608
00:20:04,976 --> 00:20:06,066
它相当简单

609
00:20:06,576 --> 00:20:07,846
其中包含两个属性

610
00:20:08,596 --> 00:20:09,856
你想要锁定的

611
00:20:09,856 --> 00:20:13,336
或者是解锁的车名  以及

612
00:20:13,426 --> 00:20:14,646
你想给汽车设定的

613
00:20:14,646 --> 00:20:14,816
状态

614
00:20:17,706 --> 00:20:19,626
只要这个 App 提供了

615
00:20:19,626 --> 00:20:20,806
处理此 intent 的 extension

616
00:20:20,806 --> 00:20:23,166
它就可以处理这样的指令

617
00:20:23,166 --> 00:20:25,046
例如 用户可以说

618
00:20:25,046 --> 00:20:27,616
“给我的车解锁” Siri 就知道

619
00:20:27,616 --> 00:20:29,456
要调用这个 app extension

620
00:20:29,456 --> 00:20:30,936
给它一个 intent 然后让这个

621
00:20:30,936 --> 00:20:32,816
intent 让这个extension

622
00:20:32,816 --> 00:20:33,256
来处理

623
00:20:34,156 --> 00:20:35,336
请注意 我现在不会提到

624
00:20:35,336 --> 00:20:36,076
这个 App 的名字

625
00:20:36,656 --> 00:20:38,096
因为 Siri 很智能  如果设备里

626
00:20:38,096 --> 00:20:39,376
只有一个符合条件的 App

627
00:20:39,376 --> 00:20:41,396
可以处理某个特定的 intent

628
00:20:41,396 --> 00:20:42,776
它都会发现

629
00:20:43,216 --> 00:20:45,536
Siri 不会要求用户

630
00:20:45,636 --> 00:20:47,466
确认这个 App 的名称

631
00:20:47,466 --> 00:20:48,926
或要求客户消除歧义

632
00:20:50,106 --> 00:20:51,606
所以 处理完这个 intent

633
00:20:52,306 --> 00:20:54,886
我的示例 App 就将

634
00:20:54,886 --> 00:20:56,186
车门状态的变化

635
00:20:56,186 --> 00:20:58,476
以图像方式反映了出来

636
00:20:58,476 --> 00:20:59,756
大家在这里

637
00:21:00,406 --> 00:21:00,496
也可以看到

638
00:21:01,396 --> 00:21:03,096
所以这是一个很灵敏的

639
00:21:03,096 --> 00:21:03,586
传输处理

640
00:21:03,586 --> 00:21:04,896
你正在解锁某人

641
00:21:04,896 --> 00:21:05,296
的汽车

642
00:21:06,026 --> 00:21:07,806
那么 对于这种传输处理

643
00:21:07,806 --> 00:21:09,026
即使设备处于锁屏状态

644
00:21:09,026 --> 00:21:10,596
你可能也想

645
00:21:10,596 --> 00:21:12,676
向用户提出另一种

646
00:21:12,676 --> 00:21:13,536
授权请求

647
00:21:14,986 --> 00:21:17,936
我们推荐大家使用

648
00:21:17,936 --> 00:21:19,526
安全授权机制

649
00:21:19,686 --> 00:21:21,986
它已经被加入 iOS  

650
00:21:22,156 --> 00:21:22,636
那就是 Touch ID

651
00:21:23,736 --> 00:21:24,966
利用本机授权验证 API

652
00:21:24,966 --> 00:21:27,736
你甚至可以自定义

653
00:21:27,736 --> 00:21:29,906
与 Touch ID 一同出现的提示

654
00:21:29,906 --> 00:21:32,016
告诉用户

655
00:21:32,016 --> 00:21:33,916
让用户了解一下原因

656
00:21:33,916 --> 00:21:35,396
为什么要求他们

657
00:21:35,396 --> 00:21:37,866
再次授权

658
00:21:37,866 --> 00:21:38,896
尽管设备已经锁定

659
00:21:38,896 --> 00:21:39,326
已经解锁

660
00:21:41,586 --> 00:21:43,036
如果你的设备不支持

661
00:21:43,116 --> 00:21:44,696
如果用户的设备

662
00:21:44,696 --> 00:21:46,466
不支持 Touch ID 或者可能

663
00:21:46,466 --> 00:21:47,666
用户还未

664
00:21:47,666 --> 00:21:50,326
在其设备上配置 Touch ID

665
00:21:50,326 --> 00:21:52,066
本机验证 API 只允许你

666
00:21:52,066 --> 00:21:53,986
通过密码

667
00:21:53,986 --> 00:21:55,326
来解锁设备

668
00:21:57,506 --> 00:21:58,726
大家注意 它的

669
00:21:58,936 --> 00:22:00,356
自定义字符串

670
00:21:58,936 --> 00:22:00,356
自定义字符串

671
00:22:00,626 --> 00:22:02,366
与你的 App 在此提供的内容相同

672
00:22:02,366 --> 00:22:03,896
它可以给用户提供某种语境

673
00:22:04,906 --> 00:22:06,256
这操作起来很简单

674
00:22:06,556 --> 00:22:08,076
我给大家演示一下

675
00:22:08,076 --> 00:22:08,426
如何操作

676
00:22:09,136 --> 00:22:11,076
那么  我在这里显示的

677
00:22:11,076 --> 00:22:12,796
intent 处理程序

678
00:22:12,796 --> 00:22:15,376
用于 setCarLockStatusIntent

679
00:22:15,376 --> 00:22:16,926
它来自我刚给大家看的测试用 App

680
00:22:18,196 --> 00:22:19,596
我们来看看这个 App

681
00:22:19,596 --> 00:22:19,876
是什么样的

682
00:22:22,636 --> 00:22:23,906
我们看到了 这里有一张

683
00:22:23,906 --> 00:22:25,936
代表汽车的图片

684
00:22:25,996 --> 00:22:28,086
是用户汽车的图片 它同时也代表了

685
00:22:28,086 --> 00:22:29,736
汽车的状态

686
00:22:29,736 --> 00:22:30,916
是属于锁定 还是解锁

687
00:22:31,126 --> 00:22:33,606
现在 汽车处于锁定状态

688
00:22:33,606 --> 00:22:34,706
我点击一下就可以将车门打开

689
00:22:35,366 --> 00:22:40,966
现在把它设置为锁定状态 然后我

690
00:22:40,966 --> 00:22:42,876
又想让 Siri

691
00:22:42,876 --> 00:22:44,336
用这个 App 解锁汽车

692
00:22:44,736 --> 00:22:46,826
那么 正如我的同事 Angel 先前展示的那样

693
00:22:46,826 --> 00:22:48,946
我将要使用

694
00:22:48,946 --> 00:22:51,436
方案编辑器来输入

695
00:22:51,436 --> 00:22:53,026
我想要发送给 Siri 的请求

696
00:22:54,386 --> 00:22:56,406
我将发送这个

697
00:22:56,406 --> 00:22:57,006
请求

698
00:23:00,896 --> 00:23:02,576
方案编辑器十分好用

699
00:23:02,576 --> 00:23:04,056
说不准大家还没意识到这一点

700
00:23:05,006 --> 00:23:05,946
有了它 你在测试时不用再

701
00:23:05,946 --> 00:23:06,926
那么费劲地

702
00:23:06,926 --> 00:23:08,466
对着手机讲话

703
00:23:08,466 --> 00:23:10,216
这在共享工作环境中

704
00:23:10,216 --> 00:23:10,726
非常实用

705
00:23:11,996 --> 00:23:15,346
所以 在这种情况下 Siri

706
00:23:15,346 --> 00:23:16,736
处理了该请求  把它

707
00:23:16,736 --> 00:23:18,536
传递给了 App

708
00:23:18,536 --> 00:23:18,986
并且报告成功

709
00:23:19,736 --> 00:23:21,526
我们来确认一下

710
00:23:21,526 --> 00:23:22,356
它确实把汽车给解锁了

711
00:23:23,216 --> 00:23:25,456
现在汽车所处的状态

712
00:23:25,456 --> 00:23:27,436
已经更新 可以看出

713
00:23:27,436 --> 00:23:28,216
它已经解锁

714
00:23:28,796 --> 00:23:30,856
我们再回过头来看

715
00:23:30,896 --> 00:23:31,236
意图句柄

716
00:23:32,796 --> 00:23:36,056
这个意图句柄提取了

717
00:23:36,056 --> 00:23:37,536
我们在 intent 上看到的字段

718
00:23:37,536 --> 00:23:39,186
内容是  我该给汽车上锁

719
00:23:39,186 --> 00:23:41,346
还是解锁汽车

720
00:23:42,596 --> 00:23:44,586
而且 它会寻找

721
00:23:44,586 --> 00:23:46,956
与 intent 上面名称相符的

722
00:23:46,956 --> 00:23:48,076
内部汽车对象

723
00:23:49,676 --> 00:23:52,886
然后 它根据 intent 上的输入

724
00:23:52,886 --> 00:23:55,026
将汽车对象设置为

725
00:23:55,026 --> 00:23:56,446
锁定状态

726
00:23:57,206 --> 00:23:59,026
最后  在更改了

727
00:23:59,026 --> 00:24:01,156
汽车的状态之后

728
00:23:59,026 --> 00:24:01,156
汽车的状态之后

729
00:24:01,156 --> 00:24:03,196
它向 Siri 返回了

730
00:24:03,196 --> 00:24:05,056
成功响应代码

731
00:24:06,286 --> 00:24:08,056
如果操作失败

732
00:24:08,056 --> 00:24:10,406
或者是 intent 上没有

733
00:24:10,406 --> 00:24:11,756
没有足够的信息

734
00:24:11,756 --> 00:24:14,046
它就会返回

735
00:24:14,046 --> 00:24:14,566
失败响应代码

736
00:24:15,876 --> 00:24:18,526
所以 你们都看到了

737
00:24:18,526 --> 00:24:20,226
这个意图句柄是怎样

738
00:24:20,226 --> 00:24:21,636
无条件地处理了

739
00:24:21,636 --> 00:24:23,286
用户给它的请求

740
00:24:24,196 --> 00:24:25,886
我们想在这里添加一个提示

741
00:24:26,006 --> 00:24:27,496
利用本机验证

742
00:24:27,496 --> 00:24:27,756
API

743
00:24:28,836 --> 00:24:31,866
所以 一旦我们确认了

744
00:24:31,866 --> 00:24:33,316
该 intent 具备我们所需的所有参数

745
00:24:33,316 --> 00:24:35,136
我们就可以调用

746
00:24:35,136 --> 00:24:39,976
本机验证 API

747
00:24:40,146 --> 00:24:41,036
为了调用

748
00:24:41,036 --> 00:24:43,896
本机验证 API

749
00:24:45,106 --> 00:24:47,826
首先我要生成一个字符串

750
00:24:47,826 --> 00:24:49,866
它是基于提请实施的锁定状态

751
00:24:51,206 --> 00:24:53,066
也就是说 如果用户

752
00:24:53,066 --> 00:24:54,436
要求我锁定汽车

753
00:24:54,436 --> 00:24:55,716
我就会显示适当的

754
00:24:55,716 --> 00:24:56,056
提示

755
00:24:57,376 --> 00:24:58,766
然后

756
00:24:58,766 --> 00:25:00,806
针对本机验证的语境

757
00:24:58,766 --> 00:25:00,806
针对本机验证的语境

758
00:25:00,806 --> 00:25:03,276
我将会要求它评估

759
00:25:03,276 --> 00:25:04,116
某个特定策略

760
00:25:04,906 --> 00:25:06,576
在这个例子中 我将要求它

761
00:25:06,576 --> 00:25:07,956
评估设备所有人的

762
00:25:07,956 --> 00:25:09,096
授权行为

763
00:25:09,696 --> 00:25:11,496
这个策略  首先是尝试

764
00:25:11,596 --> 00:25:13,086
给出 Touch ID 提示

765
00:25:13,086 --> 00:25:14,436
如果不成功

766
00:25:14,436 --> 00:25:15,766
它会转而要求

767
00:25:15,806 --> 00:25:18,166
设备密码提示

768
00:25:18,296 --> 00:25:19,896
接下来 我要输入提示字符串

769
00:25:19,896 --> 00:25:21,436
这是我刚在前一行生成的提示字符串

770
00:25:21,436 --> 00:25:23,406
最后  我就获得了

771
00:25:23,406 --> 00:25:24,346
回复代码块

772
00:25:24,996 --> 00:25:26,146
那么 我们来填充一下这个

773
00:25:26,146 --> 00:25:26,426
回复代码块

774
00:25:29,476 --> 00:25:31,776
如果用户以 Touch ID 或 

775
00:25:32,266 --> 00:25:33,626
设备密码提示的方式

776
00:25:33,626 --> 00:25:35,526
同意访问  我将继续操作

777
00:25:35,526 --> 00:25:38,416
并更改汽车的状态

778
00:25:38,416 --> 00:25:40,516
就像我先前没有提示的情况下一样

779
00:25:40,516 --> 00:25:41,576
不过这一次

780
00:25:41,576 --> 00:25:42,876
我其实是在等待用户

781
00:25:42,876 --> 00:25:43,786
授权我访问

782
00:25:44,166 --> 00:25:46,876
接着 我将调用

783
00:25:46,876 --> 00:25:49,236
完成代码块  方法是

784
00:25:49,236 --> 00:25:50,956
以成功的响应代码

785
00:25:50,956 --> 00:25:53,166
来告诉 Siri

786
00:25:53,516 --> 00:25:54,086
请求已经成功执行

787
00:25:54,496 --> 00:25:56,906
如果出现了失败 

788
00:25:56,906 --> 00:25:58,696
我也需要告诉 Siri

789
00:25:58,696 --> 00:26:00,706
也就是说  如果授权访问未获通过

790
00:25:58,696 --> 00:26:00,706
也就是说  如果授权访问未获通过

791
00:26:00,706 --> 00:26:02,036
那么我就需要告诉 Siri

792
00:26:02,036 --> 00:26:02,636
请求失败

793
00:26:03,026 --> 00:26:05,256
要完成该操作 我需要使用

794
00:26:05,256 --> 00:26:06,826
相同的完成代码块

795
00:26:06,826 --> 00:26:07,606
来返回一个失败的响应代码

796
00:26:09,116 --> 00:26:11,566
那么 在做出这个变动之后

797
00:26:11,566 --> 00:26:13,596
我们再来看看  解锁汽车的过程中

798
00:26:14,876 --> 00:26:16,406
会不会提示用户

799
00:26:17,956 --> 00:26:18,716
进行验证

800
00:26:19,826 --> 00:26:21,176
所以 我们来把汽车

801
00:26:21,176 --> 00:26:24,806
还原到锁定状态

802
00:26:24,806 --> 00:26:25,146
然后运行这个

803
00:26:26,466 --> 00:26:28,066
我的请求与前面使用的相同

804
00:26:28,066 --> 00:26:29,526
也就是 解锁汽车

805
00:26:44,186 --> 00:26:46,366
你们看 在 Siri 请求的期间

806
00:26:46,366 --> 00:26:48,176
出现了一个提示

807
00:26:48,886 --> 00:26:50,296
如果这个模拟器设置了

808
00:26:50,296 --> 00:26:51,526
Touch ID 它就会

809
00:26:51,526 --> 00:26:52,556
显示一个 Touch ID 提示

810
00:26:53,406 --> 00:26:54,626
在这种情况下 我给它设置了

811
00:26:54,626 --> 00:26:56,756
设备密码提示

812
00:26:56,976 --> 00:27:00,076
现在 我要输入我的超级安全

813
00:26:56,976 --> 00:27:00,076
现在 我要输入我的超级安全

814
00:27:00,076 --> 00:27:00,916
密码

815
00:27:00,916 --> 00:27:01,876
请不要偷看哦

816
00:27:05,696 --> 00:27:07,026
一旦我输入了

817
00:27:07,026 --> 00:27:09,796
密码 这个请求

818
00:27:09,796 --> 00:27:10,076
就通过了

819
00:27:10,756 --> 00:27:12,036
让我们启动 App

820
00:27:12,036 --> 00:27:12,916
来确认一下  这个请求确实

821
00:27:12,916 --> 00:27:12,983
完成了

822
00:27:15,096 --> 00:27:16,676
没错  汽车已经解锁了

823
00:27:17,516 --> 00:27:25,656
[掌声]

824
00:27:26,156 --> 00:27:28,106
所以 运用几行代码

825
00:27:28,106 --> 00:27:29,496
我们就能在 Siri 的请求过程中

826
00:27:29,496 --> 00:27:31,736
添加一个

827
00:27:31,736 --> 00:27:34,416
本地授权提示

828
00:27:34,506 --> 00:27:35,836
利用本机验证 API

829
00:27:35,836 --> 00:27:38,496
可以让你进行

830
00:27:38,496 --> 00:27:39,686
多种形式的验证

831
00:27:40,496 --> 00:27:41,986
比如说 Touch ID 它是否已被支持并且

832
00:27:41,986 --> 00:27:44,316
完成配置  或者  它是否使用

833
00:27:44,796 --> 00:27:45,276
设备密码

834
00:27:46,896 --> 00:27:48,396
大家调用这个

835
00:27:48,396 --> 00:27:50,806
本机验证 API 的位置

836
00:27:50,806 --> 00:27:52,296
是在调用完成代码块之前

837
00:27:52,296 --> 00:27:53,956
意图句柄的

838
00:27:53,956 --> 00:27:54,646
处理方法里面

839
00:27:56,696 --> 00:27:58,136
而且 因为这个

840
00:27:58,136 --> 00:27:59,636
本机验证框架是系统的一部分

841
00:27:59,636 --> 00:28:01,526
所以 Siri 知道

842
00:27:59,636 --> 00:28:01,526
所以 Siri 知道

843
00:28:01,526 --> 00:28:04,436
要与它相协调 因此 

844
00:28:04,436 --> 00:28:07,266
如果用户发出的请求

845
00:28:07,266 --> 00:28:10,536
是通过“Hey Siri”该请求就需要

846
00:28:10,536 --> 00:28:12,456
等待用户对提示

847
00:28:12,456 --> 00:28:16,276
作出回应

848
00:28:16,506 --> 00:28:17,786
若想了解更多

849
00:28:17,786 --> 00:28:19,696
关于本机验证 API 的信息

850
00:28:19,696 --> 00:28:24,516
建议参考 2014 年以来这方面的发言内容

851
00:28:24,636 --> 00:28:26,016
你们当中有些人正在研发的 App 里

852
00:28:26,016 --> 00:28:28,666
可能有一些

853
00:28:28,666 --> 00:28:30,516
在执行 Siri 请求之前

854
00:28:30,516 --> 00:28:31,956
还需要完成一个付款操作

855
00:28:34,996 --> 00:28:37,666
在这个样例里  用户想要

856
00:28:37,666 --> 00:28:39,036
在 UnicornRides 上

857
00:28:39,036 --> 00:28:42,556
预约一辆 RainbowCar

858
00:28:42,556 --> 00:28:44,286
你在接受请求之前

859
00:28:44,376 --> 00:28:45,596
需要让用户完成付款

860
00:28:47,016 --> 00:28:48,856
我们推荐大家使用

861
00:28:48,856 --> 00:28:51,736
安全的 Apple Pay API

862
00:28:51,736 --> 00:28:53,436
以便处理 Siri 请求期间的

863
00:28:53,436 --> 00:28:54,236
付款交易

864
00:28:54,976 --> 00:28:56,696
使用 Apple Pay API

865
00:28:56,696 --> 00:28:58,666
能给你带来各种好处 

866
00:28:58,666 --> 00:28:59,906
就像使用本机验证 API 一样

867
00:29:00,376 --> 00:29:03,216
也就是 你要与 Siri 协调

868
00:29:03,216 --> 00:29:05,576
而且你调用这个 API

869
00:29:05,576 --> 00:29:06,916
的位置  就是你在

870
00:29:06,916 --> 00:29:08,306
调用完成代码块之前

871
00:29:08,306 --> 00:29:09,866
处理方法里的

872
00:29:09,866 --> 00:29:10,626
相同位置

873
00:29:14,596 --> 00:29:16,036
现在 我们来谈谈如何

874
00:29:16,036 --> 00:29:17,366
把新词教给 Siri

875
00:29:21,276 --> 00:29:23,126
我们这次用一个名为

876
00:29:23,256 --> 00:29:25,636
UnicornPay 的 App 为例

877
00:29:25,636 --> 00:29:28,346
该 App 允许用户

878
00:29:28,346 --> 00:29:30,276
查询他们的账户余额

879
00:29:32,456 --> 00:29:34,316
像这样的 App 还可以

880
00:29:34,316 --> 00:29:36,626
允许用户为应用里的

881
00:29:36,676 --> 00:29:38,296
各账户设置名称

882
00:29:38,576 --> 00:29:39,836
现在可以看到 这些名字都是用户配置的

883
00:29:39,836 --> 00:29:42,656
它们不一定是

884
00:29:42,656 --> 00:29:44,016
真正的英语单词

885
00:29:44,566 --> 00:29:46,016
在这个例子里 我们有一个

886
00:29:46,016 --> 00:29:48,446
名为 NestEgg 的账户

887
00:29:48,446 --> 00:29:50,036
这原本是一个单词

888
00:29:50,036 --> 00:29:50,986
只不过中间没有空格

889
00:29:51,426 --> 00:29:53,066
所以 它是由两个英语单词构成

890
00:29:53,066 --> 00:29:55,346
如果没有帮助

891
00:29:55,346 --> 00:29:56,696
Siri 可能无法识别它

892
00:29:58,836 --> 00:30:00,666
去年 我们在介绍 SiriKit 时

893
00:29:58,836 --> 00:30:00,666
去年 我们在介绍 SiriKit 时

894
00:30:00,666 --> 00:30:03,136
谈到了一些机制 

895
00:30:03,136 --> 00:30:05,946
这些机制可以允许你

896
00:30:05,946 --> 00:30:07,926
帮助 Siri 理解

897
00:30:07,926 --> 00:30:08,486
类似于这样的单词

898
00:30:09,186 --> 00:30:11,066
这些单词并不是某个 App 所特有

899
00:30:11,656 --> 00:30:12,576
而是该 App 的某个

900
00:30:12,576 --> 00:30:16,706
特定用户所特有

901
00:30:16,706 --> 00:30:19,076
比如

902
00:30:19,076 --> 00:30:21,196
相簿名称 健身名称

903
00:30:21,196 --> 00:30:21,826
等等

904
00:30:25,656 --> 00:30:27,536
我们推荐一个

905
00:30:27,696 --> 00:30:29,706
用来教会 Siri 这些单词的办法

906
00:30:29,706 --> 00:30:32,896
它是 INVocabulary API

907
00:30:35,796 --> 00:30:39,776
如果想获得更新的

908
00:30:39,776 --> 00:30:42,076
自定义词汇介绍

909
00:30:42,076 --> 00:30:43,186
建议大家关注一下去年

910
00:30:43,186 --> 00:30:44,376
我们介绍 SiriKit 的演讲内容

911
00:30:44,376 --> 00:30:46,826
不过 今天我们还要更加

912
00:30:46,826 --> 00:30:49,046
深入地了解一下 INVocabulary

913
00:30:49,636 --> 00:30:49,736
API

914
00:30:50,476 --> 00:30:51,996
这个 API 相当简单

915
00:30:52,206 --> 00:30:54,496
其中有一个方法

916
00:30:54,606 --> 00:30:57,956
是采用了词汇字符串的有序集合 NSOrderedSet

917
00:30:57,956 --> 00:31:01,266
这个集合适用于

918
00:30:57,956 --> 00:31:01,266
这个集合适用于

919
00:31:01,266 --> 00:31:04,226
某个特定的词汇项目

920
00:31:04,226 --> 00:31:04,476
类型

921
00:31:04,476 --> 00:31:06,296
比如 相簿名称

922
00:31:06,496 --> 00:31:07,286
或健身名称

923
00:31:07,886 --> 00:31:10,376
注意 这是一个有序的集合

924
00:31:10,376 --> 00:31:12,686
这就意味着 Siri 会

925
00:31:12,746 --> 00:31:15,376
优先选择靠近

926
00:31:15,416 --> 00:31:18,186
集合起始点的单词

927
00:31:18,396 --> 00:31:21,076
不过请注意

928
00:31:21,076 --> 00:31:22,206
这些也是你将要教会 Siri 的

929
00:31:22,206 --> 00:31:22,536
字符串

930
00:31:22,636 --> 00:31:24,206
单纯的字符串

931
00:31:24,206 --> 00:31:24,636
没有语境

932
00:31:25,996 --> 00:31:27,466
这也许会有一些

933
00:31:27,466 --> 00:31:28,066
局限性

934
00:31:29,076 --> 00:31:30,806
让我们进一步

935
00:31:30,806 --> 00:31:33,326
深入了解它的实际运作

936
00:31:33,326 --> 00:31:35,066
来看看它有哪些

937
00:31:35,776 --> 00:31:35,866
局限性

938
00:31:37,056 --> 00:31:38,666
我们现在有一个应用

939
00:31:39,056 --> 00:31:41,846
它的私人存储器里

940
00:31:41,976 --> 00:31:44,406
有一些已被用户命名的

941
00:31:44,406 --> 00:31:44,856
账户

942
00:31:45,696 --> 00:31:47,506
为了把这些帐户告诉 Siri

943
00:31:47,506 --> 00:31:49,946
这个 App 将使用

944
00:31:49,946 --> 00:31:53,216
INVocabulary API

945
00:31:53,216 --> 00:31:56,056
并将使用这些字符串的 API 发送出去

946
00:31:56,056 --> 00:31:57,076
这个我们已看到过

947
00:31:57,936 --> 00:31:59,936
有了这方面的知识储备

948
00:31:59,936 --> 00:32:02,246
现在 Siri 就认识这些新词了

949
00:31:59,936 --> 00:32:02,246
现在 Siri 就认识这些新词了

950
00:32:02,246 --> 00:32:03,636
等到下一次用户请求

951
00:32:03,636 --> 00:32:05,686
使用其中某个单词时

952
00:32:05,686 --> 00:32:08,876
Siri 便能

953
00:32:08,876 --> 00:32:10,316
查找该 App 赋予

954
00:32:10,316 --> 00:32:12,386
它的知识内容

955
00:32:13,216 --> 00:32:14,896
并从用户的输入中

956
00:32:14,896 --> 00:32:18,426
确认与类似的自定义单词

957
00:32:18,426 --> 00:32:21,586
相匹配的候选词

958
00:32:21,586 --> 00:32:22,836
并且予以正确识别

959
00:32:22,836 --> 00:32:23,596
从而符合用户的期待

960
00:32:24,526 --> 00:32:25,686
好 一旦识别出这个词

961
00:32:25,686 --> 00:32:28,006
Siri 便可以

962
00:32:28,006 --> 00:32:29,026
把它传递给

963
00:32:29,026 --> 00:32:31,216
应用的 intents extension

964
00:32:31,556 --> 00:32:33,996
并期望它用这个词来

965
00:32:34,276 --> 00:32:35,576
查找存储器中

966
00:32:35,576 --> 00:32:36,576
相应的对象

967
00:32:37,696 --> 00:32:39,216
不过 请注意这只是

968
00:32:39,216 --> 00:32:41,046
一个单纯的字符串

969
00:32:41,046 --> 00:32:41,546
没有相关语境

970
00:32:42,126 --> 00:32:44,156
所以 你的应用也许

971
00:32:44,156 --> 00:32:47,406
并没有足够的信息来

972
00:32:47,406 --> 00:32:48,976
准确查找出这个它词

973
00:32:49,236 --> 00:32:52,296
也许需要

974
00:32:52,296 --> 00:32:55,266
进行模糊匹配

975
00:32:55,266 --> 00:32:58,106
或许这并不是基于

976
00:32:58,106 --> 00:32:59,846
应用存储器里字符串的索引

977
00:33:00,426 --> 00:33:02,126
因此 这不是一种理想的

978
00:33:02,126 --> 00:33:02,776
情况

979
00:33:03,496 --> 00:33:05,766
我们认为在 iOS 11 里

980
00:33:05,766 --> 00:33:08,776
我们会做得更好

981
00:33:08,946 --> 00:33:11,266
我们添加的这个新型 API

982
00:33:11,266 --> 00:33:13,856
它将允许你给 Siri 发送对象

983
00:33:14,236 --> 00:33:17,836
任何对象

984
00:33:17,836 --> 00:33:19,526
只要它们遵循

985
00:33:19,626 --> 00:33:20,876
INSpeakable 协议

986
00:33:22,576 --> 00:33:25,276
再强调一下 这些对象

987
00:33:25,316 --> 00:33:27,056
必须是一个有序集合

988
00:33:27,056 --> 00:33:28,696
与之前 API 里的字符串

989
00:33:28,696 --> 00:33:31,316
遵循相同的原则

990
00:33:31,366 --> 00:33:34,006
并且适用于某种特定的参数类型

991
00:33:34,706 --> 00:33:37,416
现在我们来深入了解一下

992
00:33:37,416 --> 00:33:38,296
这个协议内容

993
00:33:39,896 --> 00:33:42,976
INSpeakable 协议

994
00:33:43,206 --> 00:33:45,296
详细描述了

995
00:33:45,296 --> 00:33:46,636
你将教授 Siri 的

996
00:33:46,636 --> 00:33:47,396
词汇项

997
00:33:49,956 --> 00:33:52,696
该协议的主要部分

998
00:33:52,696 --> 00:33:54,286
它的主要属性就是

999
00:33:54,286 --> 00:33:55,566
你正在教 Siri 的这个实际单词

1000
00:33:56,616 --> 00:33:57,826
在这个例子中 它可以是

1001
00:33:57,826 --> 00:33:59,446
NestEgg 这个中间缺少空格的单词

1002
00:33:59,446 --> 00:34:01,596
或其他编造误拼的

1003
00:33:59,446 --> 00:34:01,596
或其他编造误拼的

1004
00:34:01,596 --> 00:34:04,506
某个健身训练名称

1005
00:34:04,506 --> 00:34:05,956
甚至可以是一个

1006
00:34:05,956 --> 00:34:08,005
混合了数字或特殊字符

1007
00:34:08,005 --> 00:34:08,646
的单词

1008
00:34:09,196 --> 00:34:12,676
你还可以教会 Siri

1009
00:34:13,896 --> 00:34:16,436
还可以给 Siri 一些提示

1010
00:34:16,696 --> 00:34:18,446
告诉它如何识别

1011
00:34:18,446 --> 00:34:19,076
你正在教它的单词

1012
00:34:19,936 --> 00:34:22,346
在这个例子里 它们采用了

1013
00:34:23,056 --> 00:34:24,775
一种发音近似的拼写方式

1014
00:34:24,926 --> 00:34:26,116
你会采用同样的方式

1015
00:34:26,116 --> 00:34:27,755
来配置联系人 App 里

1016
00:34:27,755 --> 00:34:32,306
的语音名称

1017
00:34:32,565 --> 00:34:34,516
对于每个 INSpeakable 对象

1018
00:34:35,116 --> 00:34:36,166
你还可以

1019
00:34:36,166 --> 00:34:38,525
提供一个词汇标识符

1020
00:34:38,525 --> 00:34:40,396
它可以单独识别

1021
00:34:40,396 --> 00:34:41,136
App Store 里的对象

1022
00:34:42,166 --> 00:34:43,755
我们这是一个纯文本的字符串

1023
00:34:43,755 --> 00:34:45,815
因此 我们不会限制

1024
00:34:45,815 --> 00:34:47,926
你赋予该标识符的值

1025
00:34:48,226 --> 00:34:50,956
但是如果使用某个独特的 Grid

1026
00:34:50,956 --> 00:34:52,795
或类似的东西  将有助于你

1027
00:34:53,255 --> 00:34:55,275
在 App 数据存储器中

1028
00:34:55,275 --> 00:34:57,356
准确地匹配该对象

1029
00:34:58,856 --> 00:35:01,446
最后 INSpeakable 协议

1030
00:34:58,856 --> 00:35:01,446
最后 INSpeakable 协议

1031
00:35:01,446 --> 00:35:04,356
还允许 Siri

1032
00:35:05,076 --> 00:35:08,276
提供单词的其他匹配形式

1033
00:35:08,276 --> 00:35:10,486
也就是 Siri 认为

1034
00:35:10,486 --> 00:35:12,166
用户可能想要的匹配

1035
00:35:12,786 --> 00:35:14,606
这相当于

1036
00:35:14,606 --> 00:35:16,836
SiriMatches 的属性

1037
00:35:16,836 --> 00:35:18,556
我的同事 Angel 之前讲解过这个

1038
00:35:18,556 --> 00:35:21,606
如果 INPerson 对象

1039
00:35:21,606 --> 00:35:23,176
确实是要遵循

1040
00:35:23,176 --> 00:35:26,516
INSpeakable 协议

1041
00:35:26,516 --> 00:35:28,636
那么它便会显示出像 SiriMatches 那样的

1042
00:35:28,636 --> 00:35:30,996
候选备用匹配

1043
00:35:32,306 --> 00:35:34,776
有了这个新协议和 API

1044
00:35:34,876 --> 00:35:36,336
现在我们再回到同一个示例

1045
00:35:36,336 --> 00:35:38,416
看看这些变化是

1046
00:35:38,736 --> 00:35:39,376
如何发生的

1047
00:35:40,046 --> 00:35:42,536
那么 现在这个应用想要

1048
00:35:42,536 --> 00:35:44,776
把同样两个具有

1049
00:35:44,776 --> 00:35:45,886
自定义名称的账户对象

1050
00:35:45,886 --> 00:35:46,846
告诉 Siri 

1051
00:35:47,916 --> 00:35:50,086
它将调用 INVocabulary API

1052
00:35:50,206 --> 00:35:51,506
不过 这一次它将把

1053
00:35:51,506 --> 00:35:54,326
对象本身传给 Siri

1054
00:35:54,326 --> 00:35:57,616
然后 Siri 将会使用

1055
00:35:57,616 --> 00:36:00,756
这些对象中的 INSpeakable 部分

1056
00:35:57,616 --> 00:36:00,756
这些对象中的 INSpeakable 部分

1057
00:36:02,576 --> 00:36:06,286
而当用户发出请求时

1058
00:36:06,286 --> 00:36:08,776
它所包含的某个词汇

1059
00:36:08,776 --> 00:36:10,966
与 Siri 学过的新对象相匹配

1060
00:36:10,966 --> 00:36:14,376
Siri 将识别出这个模式

1061
00:36:14,376 --> 00:36:19,036
并将它替换成

1062
00:36:19,036 --> 00:36:22,756
预期的拼写形式

1063
00:36:22,896 --> 00:36:24,616
而且 当 Siri 将信息传回到 App 的

1064
00:36:24,616 --> 00:36:26,556
Intent Extension 时

1065
00:36:26,556 --> 00:36:28,836
Siri 不会提供没有任何语境的

1066
00:36:28,836 --> 00:36:30,926
纯文本字符串  而是会给它

1067
00:36:30,926 --> 00:36:32,836
INSpeakable 对象

1068
00:36:34,456 --> 00:36:36,586
因为这个 INSpeakable 对象

1069
00:36:36,846 --> 00:36:39,326
带有词汇标识符

1070
00:36:39,456 --> 00:36:42,316
如前所述

1071
00:36:42,316 --> 00:36:44,536
它可以是该对象特有的 ID

1072
00:36:45,096 --> 00:36:47,356
从 App 这方面来说 查找此对象

1073
00:36:47,356 --> 00:36:49,106
会变得更容易

1074
00:36:53,036 --> 00:36:54,986
所以 我们希望有了这个新的 

1075
00:36:54,986 --> 00:36:57,736
API 请求之后

1076
00:36:57,736 --> 00:37:02,306
用户能够使用某个自定义词汇

1077
00:36:57,736 --> 00:37:02,306
用户能够使用某个自定义词汇

1078
00:37:02,306 --> 00:37:05,656
向 Siri 发出请求

1079
00:37:05,656 --> 00:37:07,916
那么你的 App 就可以处理这些请求

1080
00:37:07,916 --> 00:37:09,586
而不必担心会出现

1081
00:37:09,586 --> 00:37:11,046
要在你的 App Store 实现

1082
00:37:11,046 --> 00:37:11,366
模糊匹配

1083
00:37:15,286 --> 00:37:18,206
在另一个例证里  你也有可能

1084
00:37:18,206 --> 00:37:19,446
想教 Siri 学些新词

1085
00:37:19,446 --> 00:37:23,196
那就是  当某个词

1086
00:37:23,196 --> 00:37:25,166
在你的 App 里有特殊含义 但是它对

1087
00:37:25,446 --> 00:37:27,376
这个 App 的所有使用者来说都很普通

1088
00:37:27,526 --> 00:37:29,556
这方面的例证  可以是

1089
00:37:29,556 --> 00:37:32,486
某个行程预定 App

1090
00:37:32,836 --> 00:37:35,906
其中涉及到品牌车名  或是自定义的

1091
00:37:35,906 --> 00:37:38,826
交通工具名称  

1092
00:37:38,876 --> 00:37:43,946
抑或是某个非英语体能训练 App

1093
00:37:43,946 --> 00:37:44,186
的名称

1094
00:37:47,336 --> 00:37:48,996
为了把这样的单词教给 Siri

1095
00:37:48,996 --> 00:37:51,186
我们推荐你

1096
00:37:51,186 --> 00:37:52,006
使用

1097
00:37:52,006 --> 00:37:57,866
AppIntentVocabulary.plist

1098
00:37:58,026 --> 00:38:00,036
一旦你向 Siri 提供了一个 plist 文件

1099
00:37:58,026 --> 00:38:00,036
一旦你向 Siri 提供了一个 plist 文件

1100
00:38:00,576 --> 00:38:02,736
比如说 像这样的例子

1101
00:38:02,736 --> 00:38:05,106
行程预定 App

1102
00:38:05,266 --> 00:38:07,486
已经自定义了行程名称

1103
00:38:08,566 --> 00:38:09,826
在这个例子中 它们并不是真正的单词

1104
00:38:09,826 --> 00:38:10,796
大家可以看到

1105
00:38:11,196 --> 00:38:13,016
中间没留空格的 RainbowCar

1106
00:38:13,016 --> 00:38:16,056
并不是真正的单词

1107
00:38:16,256 --> 00:38:19,156
用户现在可以说出这些词

1108
00:38:20,156 --> 00:38:21,886
并期待 Siri 能予以识别

1109
00:38:25,236 --> 00:38:27,336
把这样的词汇

1110
00:38:27,336 --> 00:38:29,426
记载到 Siri 的方法 就是

1111
00:38:29,426 --> 00:38:30,996
使用自定义词汇 plist 文件

1112
00:38:31,626 --> 00:38:33,776
它里面的主要部分是

1113
00:38:33,776 --> 00:38:35,486
intent 参数  是你用来

1114
00:38:35,486 --> 00:38:36,376
提供自定义词汇项的

1115
00:38:36,376 --> 00:38:37,206
Intent 参数

1116
00:38:38,086 --> 00:38:40,406
在这种情况下 这个参数

1117
00:38:40,626 --> 00:38:42,736
本身就可能属于

1118
00:38:42,736 --> 00:38:47,126
INSpeakable 类型

1119
00:38:47,126 --> 00:38:51,466
在参数内部 INSpeakable 对象的

1120
00:38:51,756 --> 00:38:53,626
子字段可以被

1121
00:38:53,626 --> 00:38:54,246
具体指定

1122
00:38:55,336 --> 00:38:56,666
例如 你可以

1123
00:38:56,666 --> 00:38:58,756
指定一个词汇标识符

1124
00:38:58,756 --> 00:38:59,916
用来识别你正在教 Siri

1125
00:38:59,916 --> 00:39:03,216
辨认的 SparkleCar

1126
00:38:59,916 --> 00:39:03,216
辨认的 SparkleCar

1127
00:39:03,446 --> 00:39:04,976
以及你以口语词组形式

1128
00:39:04,976 --> 00:39:08,046
教给 Siri 的实际名称

1129
00:39:08,046 --> 00:39:09,876
或者是发音提示

1130
00:39:10,006 --> 00:39:11,686
类似于我们在前面例子里看到的

1131
00:39:11,686 --> 00:39:13,156
针对用户特定词汇

1132
00:39:13,156 --> 00:39:13,796
的标识符

1133
00:39:15,336 --> 00:39:17,436
完成这些之后 Siri

1134
00:39:17,436 --> 00:39:19,106
将能够理解这类请求

1135
00:39:19,106 --> 00:39:20,746
也就是 当用户

1136
00:39:20,746 --> 00:39:23,136
正在使用自定义词汇

1137
00:39:23,136 --> 00:39:25,576
而它们对于你的 App

1138
00:39:26,426 --> 00:39:26,506
又属于特定词汇的时候

1139
00:39:31,496 --> 00:39:33,516
现在 我们来谈谈

1140
00:39:33,686 --> 00:39:35,296
如何利用 UI 测试

1141
00:39:35,296 --> 00:39:37,676
来检测 SiriKit 的集成质量

1142
00:39:39,696 --> 00:39:41,676
几年前 我们介绍过 UI 测试

1143
00:39:41,676 --> 00:39:43,386
这种机制可以让你

1144
00:39:43,386 --> 00:39:45,006
在 Xcode 项目内部

1145
00:39:45,006 --> 00:39:46,656
编写 UI 测试

1146
00:39:46,656 --> 00:39:48,686
自动化测试

1147
00:39:49,246 --> 00:39:52,166
现在 Siri 在这个模拟器里

1148
00:39:52,166 --> 00:39:54,126
已经获得支持  你可以在任何

1149
00:39:54,126 --> 00:39:55,846
硬件配置中运行这些测试

1150
00:39:55,846 --> 00:39:57,956
而不需要

1151
00:39:57,956 --> 00:39:59,966
真正地携带使用

1152
00:39:59,966 --> 00:40:00,336
这个硬件

1153
00:39:59,966 --> 00:40:00,336
这个硬件

1154
00:40:03,216 --> 00:40:05,196
UI 测试实现了自动化

1155
00:40:05,346 --> 00:40:06,936
因此你可以让它们

1156
00:40:07,196 --> 00:40:09,836
在 CI 管道或自定义集成管道里

1157
00:40:10,216 --> 00:40:11,976
持续自动运行

1158
00:40:12,676 --> 00:40:14,826
从而确保代码变化

1159
00:40:14,826 --> 00:40:16,076
不会破坏现有的

1160
00:40:16,076 --> 00:40:16,766
功能性质

1161
00:40:17,226 --> 00:40:20,946
使用这些 UI 测试还能带给你

1162
00:40:20,946 --> 00:40:22,586
某种程度上的语言独立性

1163
00:40:22,586 --> 00:40:24,796
这样一来 你就能够

1164
00:40:24,796 --> 00:40:26,776
使用自身成长过程中使用的

1165
00:40:26,776 --> 00:40:28,556
初始语言以外的

1166
00:40:28,556 --> 00:40:29,916
另一种语言来测试

1167
00:40:29,916 --> 00:40:30,546
Siri 的集成效果

1168
00:40:30,956 --> 00:40:32,456
我们稍后将会看到这方面的

1169
00:40:32,456 --> 00:40:32,856
例子

1170
00:40:35,376 --> 00:40:37,216
关于 UI 测试的更多信息

1171
00:40:37,216 --> 00:40:38,836
建议大家参阅

1172
00:40:38,836 --> 00:40:40,936
2015 年开始采用 UI 测试时

1173
00:40:40,936 --> 00:40:47,116
的相关文档

1174
00:40:47,116 --> 00:40:49,306
为了对 Siri 进行 UI 测试

1175
00:40:49,566 --> 00:40:51,956
iOS 11 主要新增的一个 API 

1176
00:40:51,956 --> 00:40:55,446
就是在设备上引用

1177
00:40:55,446 --> 00:41:00,546
Siri 服务的一种方式

1178
00:40:55,446 --> 00:41:00,546
Siri 服务的一种方式

1179
00:41:00,686 --> 00:41:02,346
采取这个引用 你可以

1180
00:41:02,346 --> 00:41:05,396
直接使用代码

1181
00:41:05,556 --> 00:41:07,416
把 Siri 请求字符串输入到 

1182
00:41:07,856 --> 00:41:08,416
Siri 服务中

1183
00:41:08,996 --> 00:41:10,226
此外 因为这是用代码完成的

1184
00:41:10,226 --> 00:41:12,636
所以你不必再去

1185
00:41:12,636 --> 00:41:14,556
手动测试你的 Siri

1186
00:41:14,556 --> 00:41:15,166
集成

1187
00:41:15,566 --> 00:41:17,456
我们来演示一下

1188
00:41:22,676 --> 00:41:24,136
我们再回到

1189
00:41:24,136 --> 00:41:25,836
前面见过的那个 App

1190
00:41:26,226 --> 00:41:27,906
当时 我们添加了一个解锁汽车时的

1191
00:41:27,906 --> 00:41:30,116
授权提示

1192
00:41:31,526 --> 00:41:33,916
好 这是同一个 App

1193
00:41:34,106 --> 00:41:36,106
它有一张图像显示

1194
00:41:36,106 --> 00:41:38,616
汽车正处于锁定状态

1195
00:41:40,196 --> 00:41:42,576
利用 Siri 我能够测试出

1196
00:41:42,686 --> 00:41:45,926
自己能否给汽车加锁和

1197
00:41:45,926 --> 00:41:46,546
解锁

1198
00:41:47,016 --> 00:41:48,536
所以 如果我想用这个 App 

1199
00:41:48,536 --> 00:41:50,696
对 Siri 集成进行测试

1200
00:41:50,696 --> 00:41:52,356
我该如何进行手动测试

1201
00:41:52,916 --> 00:41:57,046
首先 我会启动 App

1202
00:41:57,306 --> 00:41:58,756
把它的状态设置为

1203
00:41:58,756 --> 00:41:59,606
我想要的状态

1204
00:42:00,206 --> 00:42:01,596
比如说 我想测试

1205
00:42:01,926 --> 00:42:04,136
我的锁定请求是否有效

1206
00:42:04,136 --> 00:42:05,466
那么我将从它处于

1207
00:42:05,466 --> 00:42:06,496
解锁状态时开始

1208
00:42:08,136 --> 00:42:10,236
然后 我将发出一个

1209
00:42:10,796 --> 00:42:12,686
锁定汽车的请求

1210
00:42:14,496 --> 00:42:16,216
现在 我们来发送该请求

1211
00:42:31,486 --> 00:42:34,816
好了 接着 我需要

1212
00:42:34,816 --> 00:42:36,666
验证这个请求

1213
00:42:36,666 --> 00:42:38,056
是否真的被成功处理

1214
00:42:38,426 --> 00:42:40,116
为此  我需要

1215
00:42:40,116 --> 00:42:42,236
启动这个 App 并且检查

1216
00:42:42,236 --> 00:42:44,276
其状态 观看检查

1217
00:42:44,276 --> 00:42:45,046
这个 App 的状态

1218
00:42:45,746 --> 00:42:47,426
所以 看来当我要求

1219
00:42:47,426 --> 00:42:49,306
Siri 锁上汽车时

1220
00:42:49,306 --> 00:42:50,376
汽车便被锁上 因此

1221
00:42:50,376 --> 00:42:50,866
测试成功

1222
00:42:51,286 --> 00:42:52,536
这就是手动测试

1223
00:42:53,376 --> 00:42:54,786
那我如何完成一次类似的自动化

1224
00:42:54,786 --> 00:42:55,116
测试呢

1225
00:42:55,406 --> 00:42:59,166
利用 UI 自动化 API

1226
00:42:59,166 --> 00:43:01,796
我可以在我的项目里

1227
00:42:59,166 --> 00:43:01,796
我可以在我的项目里

1228
00:43:01,796 --> 00:43:03,936
创建一个 UI 测试分类

1229
00:43:03,976 --> 00:43:06,746
把它添加到我的 UI 测试包

1230
00:43:07,966 --> 00:43:11,166
再创建一个类似的测试

1231
00:43:11,356 --> 00:43:12,736
所以测试基本上就是

1232
00:43:12,736 --> 00:43:15,156
包含这四个步骤的一项功能

1233
00:43:15,616 --> 00:43:17,076
首先 我需要建立测试

1234
00:43:17,076 --> 00:43:19,066
然后我需要调用 Siri

1235
00:43:19,066 --> 00:43:21,056
接着等待 Siri 的响应

1236
00:43:21,056 --> 00:43:23,446
之后确认

1237
00:43:23,446 --> 00:43:25,706
Siri 的请求已经通过

1238
00:43:25,706 --> 00:43:26,866
此外这个 App 确实已经

1239
00:43:26,866 --> 00:43:28,186
处理了该请求

1240
00:43:28,856 --> 00:43:31,216
好的 我们先动手建立一个

1241
00:43:32,416 --> 00:43:32,586
测试

1242
00:43:32,766 --> 00:43:34,526
那么  为了建立一项测试

1243
00:43:34,666 --> 00:43:36,886
我创建了一种辅助方法

1244
00:43:37,086 --> 00:43:38,736
把汽车的上锁状态

1245
00:43:38,736 --> 00:43:41,176
设置为 False 也就是要解锁

1246
00:43:41,176 --> 00:43:41,446
汽车

1247
00:43:41,996 --> 00:43:43,796
所以 在运行上锁测试之前

1248
00:43:43,796 --> 00:43:45,536
我先要解锁汽车

1249
00:43:46,426 --> 00:43:49,456
那么 这个辅助方法就是

1250
00:43:49,456 --> 00:43:51,046
我使用 UI 记录机制

1251
00:43:51,046 --> 00:43:53,386
对它进行配置

1252
00:43:53,386 --> 00:43:54,796
如果你查阅 UI 测试框架的演讲

1253
00:43:54,796 --> 00:43:57,196
你就会明白

1254
00:43:57,196 --> 00:43:58,656
该如何进行 UI 记录

1255
00:43:58,926 --> 00:44:01,906
从而生成类似于这样的

1256
00:43:58,926 --> 00:44:01,906
从而生成类似于这样的

1257
00:44:03,056 --> 00:44:03,246
测试

1258
00:44:03,366 --> 00:44:05,796
接下来 为了调用 Siri

1259
00:44:05,796 --> 00:44:07,576
我要使用先前提到的 API

1260
00:44:07,576 --> 00:44:08,856
那个新的 API

1261
00:44:10,226 --> 00:44:12,926
我现在要输入请求

1262
00:44:13,386 --> 00:44:14,156
给汽车上锁

1263
00:44:14,196 --> 00:44:16,776
最后我准备

1264
00:44:16,776 --> 00:44:18,486
接下来我就要等待

1265
00:44:18,486 --> 00:44:19,726
Siri 的响应

1266
00:44:20,566 --> 00:44:21,786
为了等待 Siri 的响应

1267
00:44:21,786 --> 00:44:23,216
我将使用这个名为

1268
00:44:23,346 --> 00:44:26,796
Wait 的 API 这个 wait 参数

1269
00:44:26,876 --> 00:44:28,306
这个 wait 方法

1270
00:44:28,486 --> 00:44:29,456
使用两个参数

1271
00:44:29,866 --> 00:44:32,166
一个参数是预期

1272
00:44:32,166 --> 00:44:33,096
另一个是超时

1273
00:44:33,806 --> 00:44:35,726
我正在等待完成的预期

1274
00:44:35,726 --> 00:44:38,646
是一个述语式预期

1275
00:44:38,646 --> 00:44:40,926
此外我正在使用的

1276
00:44:40,926 --> 00:44:43,846
这个述语  它的睡眠时间基本上

1277
00:44:43,846 --> 00:44:44,816
为 5 秒

1278
00:44:45,176 --> 00:44:46,086
这不是在幻想

1279
00:44:46,496 --> 00:44:48,076
我觉得对于 Siri 来说

1280
00:44:48,076 --> 00:44:50,286
5 钞钟应该足够对请求作出响应

1281
00:44:52,656 --> 00:44:55,606
所以 它将等待 5 秒

1282
00:44:56,016 --> 00:44:57,646
我将为此而等待 10 分钟不

1283
00:44:57,646 --> 00:44:58,706
10 秒

1284
00:44:59,076 --> 00:45:02,426
这是等待 Siri 响应

1285
00:44:59,076 --> 00:45:02,426
这是等待 Siri 响应

1286
00:45:02,426 --> 00:45:04,026
的部分

1287
00:45:05,496 --> 00:45:07,726
接下来 我需要确认

1288
00:45:07,726 --> 00:45:09,356
这个 App 的状态确实已经

1289
00:45:09,356 --> 00:45:09,916
改变

1290
00:45:13,056 --> 00:45:15,496
为此  我已经

1291
00:45:15,496 --> 00:45:17,756
给 App 里的一个 UI 元素

1292
00:45:17,756 --> 00:45:19,726
添加了可访问标签

1293
00:45:20,316 --> 00:45:22,526
我正在用它提取

1294
00:45:22,526 --> 00:45:25,946
那个视图 然后比较那个视图上的

1295
00:45:25,946 --> 00:45:28,026
可访问标签的值

1296
00:45:28,026 --> 00:45:30,026
看看它是否和我的

1297
00:45:30,026 --> 00:45:34,616
预期相匹配

1298
00:45:34,726 --> 00:45:37,436
由于我们已经编写

1299
00:45:37,496 --> 00:45:38,876
已经把刚才手动完成的测试

1300
00:45:38,876 --> 00:45:41,196
进行自动化 所以我们就来运行

1301
00:45:41,196 --> 00:45:43,276
这个自动化测试 看看它是否

1302
00:45:43,276 --> 00:45:45,766
按照我们的预期运行

1303
00:45:52,336 --> 00:45:53,936
因为这是一个自动化测试

1304
00:45:53,936 --> 00:45:57,086
所以它让我有时间去做

1305
00:45:57,086 --> 00:46:00,716
真正的研发工作 而不用

1306
00:45:57,086 --> 00:46:00,716
真正的研发工作 而不用

1307
00:46:00,716 --> 00:46:02,876
花费时间测试那些

1308
00:46:02,876 --> 00:46:04,786
我已经知道它将会如何运行的

1309
00:46:04,786 --> 00:46:05,166
事项

1310
00:46:08,356 --> 00:46:10,296
因此 你们可以看到这是一个

1311
00:46:10,296 --> 00:46:12,176
需要 Siri 用 5 秒钟响应的等待

1312
00:46:12,176 --> 00:46:14,706
到了最后  它终于

1313
00:46:14,706 --> 00:46:16,676
启动这个 App 并且检查

1314
00:46:16,876 --> 00:46:18,166
当前状态是否与预期

1315
00:46:18,166 --> 00:46:18,876
相一致

1316
00:46:21,516 --> 00:46:27,276
[掌声]

1317
00:46:27,776 --> 00:46:30,006
这些欢乐的指示符

1318
00:46:30,006 --> 00:46:32,886
告诉我这项测试

1319
00:46:32,886 --> 00:46:36,316
已经成功

1320
00:46:37,636 --> 00:46:39,616
目前 Siri 可支持多种语言

1321
00:46:39,616 --> 00:46:41,406
而我用起来最顺手的

1322
00:46:41,406 --> 00:46:43,266
还是英语 但我可能

1323
00:46:43,266 --> 00:46:45,436
也想用汉语普通话来测试 App 的

1324
00:46:45,436 --> 00:46:47,376
Siri 集成

1325
00:46:47,836 --> 00:46:49,596
我不会说汉语普通话

1326
00:46:50,366 --> 00:46:54,686
但我可以在开发者网址上

1327
00:46:57,056 --> 00:47:01,126
查找一些用于编写这个 intent 的

1328
00:46:57,056 --> 00:47:01,126
查找一些用于编写这个 intent 的

1329
00:47:01,126 --> 00:47:01,616
语句表达形式

1330
00:47:01,616 --> 00:47:03,276
好 我要找的 intent 是

1331
00:47:03,276 --> 00:47:07,876
INSetCarLockStatusIntent

1332
00:47:12,046 --> 00:47:13,486
在这个 intent 的文稿纪录里

1333
00:47:13,486 --> 00:47:17,696
我们实际上有各种语言的

1334
00:47:17,696 --> 00:47:21,196
样本语句

1335
00:47:21,266 --> 00:47:22,566
Siri 对这些语言

1336
00:47:22,566 --> 00:47:23,076
全都支持

1337
00:47:24,176 --> 00:47:26,096
所以 我将采用一段

1338
00:47:26,096 --> 00:47:28,636
汉语普通话示例话语

1339
00:47:32,076 --> 00:47:36,746
将它输入到这里

1340
00:47:40,196 --> 00:47:41,646
然后 我将运行这个测试

1341
00:47:42,346 --> 00:47:44,796
测试对象是一台配置为汉语普通话语言环境下

1342
00:47:45,216 --> 00:47:47,036
使用 Siri 的设备

1343
00:47:47,716 --> 00:47:49,276
好 我们首先开启

1344
00:47:49,276 --> 00:47:50,106
这台设备

1345
00:48:01,316 --> 00:48:02,916
看 它启动 App

1346
00:48:02,916 --> 00:48:05,026
设置初始状态 调用 Siri

1347
00:48:05,026 --> 00:48:06,826
向它发出请求 等待它的

1348
00:48:06,826 --> 00:48:07,586
响应

1349
00:48:08,186 --> 00:48:11,136
接着 它再次启动 App

1350
00:48:11,136 --> 00:48:12,736
确认该状态

1351
00:48:12,736 --> 00:48:14,276
与预期相一致

1352
00:48:15,516 --> 00:48:19,666
[掌声]

1353
00:48:20,166 --> 00:48:21,056
又是欢乐的指示符

1354
00:48:21,126 --> 00:48:21,566
耶

1355
00:48:29,266 --> 00:48:30,416
可以看出

1356
00:48:30,416 --> 00:48:32,906
自动化 SiriKit 集成测试

1357
00:48:33,066 --> 00:48:33,456
就是这么简单

1358
00:48:34,196 --> 00:48:35,926
那么 我们来扼要复述一下

1359
00:48:35,926 --> 00:48:36,216
今天的讲解内容

1360
00:48:37,566 --> 00:48:39,756
大家从我的同事 Angel 那里

1361
00:48:39,756 --> 00:48:41,886
学习到了如何处理以下各种情况

1362
00:48:42,326 --> 00:48:44,166
如果出现

1363
00:48:44,586 --> 00:48:46,756
联系人重名  或者是

1364
00:48:47,006 --> 00:48:49,026
特定联系人拥有

1365
00:48:49,026 --> 00:48:50,946
多个联系方式时  需要提醒用户

1366
00:48:50,946 --> 00:48:51,886
消除歧义

1367
00:48:53,246 --> 00:48:55,946
接下来 我们讲解了一些

1368
00:48:56,386 --> 00:48:58,606
使用本机授权 API 来

1369
00:48:58,606 --> 00:49:00,696
重新授权 Siri 请求的方法

1370
00:48:58,606 --> 00:49:00,696
重新授权 Siri 请求的方法

1371
00:49:01,916 --> 00:49:03,436
然后 我们知道了如何把

1372
00:49:03,436 --> 00:49:05,186
一些用户特有  或 App 特有的

1373
00:49:05,186 --> 00:49:08,386
词汇教给 Siri

1374
00:49:08,386 --> 00:49:10,446
最后 我们还演示了

1375
00:49:10,446 --> 00:49:13,046
如何对 SiriKit 集成

1376
00:49:13,216 --> 00:49:16,016
进行 UI 测试

1377
00:49:16,016 --> 00:49:17,576
测试时甚至可以使用我们

1378
00:49:18,156 --> 00:49:20,016
不会说的语言

1379
00:49:20,956 --> 00:49:23,066
如果想要更多地了解

1380
00:49:23,066 --> 00:49:25,296
我们在此次演讲中提到的

1381
00:49:25,296 --> 00:49:26,406
示例代码和 API 信息

1382
00:49:26,406 --> 00:49:28,586
请参考这个 URL

1383
00:49:28,586 --> 00:49:33,056
我们还有其他一些演讲

1384
00:49:34,026 --> 00:49:35,716
它们都与各位的

1385
00:49:35,716 --> 00:49:37,576
SiriKit 集成相关 包括

1386
00:49:37,806 --> 00:49:41,066
Apple Pay 和 CarPlay 的演讲

1387
00:49:41,596 --> 00:49:43,656
以及前几年的演讲

1388
00:49:43,656 --> 00:49:45,026
我们在本次演讲中提到的那些内容

1389
00:49:45,026 --> 00:49:45,906
都已罗列在这个网址

1390
00:49:47,186 --> 00:49:49,776
感谢大家的到来 我们希望

1391
00:49:49,776 --> 00:49:51,086
本次演讲之后

1392
00:49:51,226 --> 00:49:53,416
各位能够凭借充足的信息来

1393
00:49:53,416 --> 00:49:54,066
创造强大的 SiriKit 体验

1394
00:49:54,826 --> 00:49:55,486
谢谢大家

1395
00:49:56,516 --> 00:50:02,010
[掌声]
