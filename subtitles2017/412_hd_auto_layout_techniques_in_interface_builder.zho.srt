1
00:00:06,516 --> 00:00:16,516
[欢呼声]

2
00:00:17,516 --> 00:00:23,166
[掌声]

3
00:00:23,666 --> 00:00:26,806
&gt;&gt; 早上好  欢迎大家来听

4
00:00:26,806 --> 00:00:28,016
界面生成器 (Interface Builder) 中

5
00:00:28,016 --> 00:00:29,066
自动布局 (Auto Layout) 新技术

6
00:00:29,726 --> 00:00:30,826
我是 Jonathon Mah

7
00:00:31,056 --> 00:00:32,516
我是界面生成器小组的

8
00:00:32,516 --> 00:00:34,026
工程师  稍后我的同事

9
00:00:34,026 --> 00:00:36,176
Jason Yao 也会上台与大家

10
00:00:36,176 --> 00:00:36,776
进行分享

11
00:00:37,506 --> 00:00:39,056
在这个演讲中  我们会

12
00:00:39,056 --> 00:00:41,576
从一个半成品的 iOS 应用程序着手

13
00:00:41,576 --> 00:00:43,496
用这个半成品给大家展示

14
00:00:43,836 --> 00:00:45,626
一系列布局和

15
00:00:45,626 --> 00:00:46,596
交互技术

16
00:00:47,166 --> 00:00:51,506
好了  最近似乎每隔几个月

17
00:00:51,506 --> 00:00:53,726
就会冒出一款帮人们寻找

18
00:00:53,826 --> 00:00:57,126
约会对象(红枣)的新应用  现在

19
00:00:57,126 --> 00:00:58,226
正好又赶上这种时候

20
00:00:58,786 --> 00:01:01,546
我手上就有这么一款

21
00:00:58,786 --> 00:01:01,546
我手上就有这么一款

22
00:01:01,546 --> 00:01:01,976
应用

23
00:01:02,516 --> 00:01:04,516
[笑声]

24
00:01:05,516 --> 00:01:08,936
[掌声]

25
00:01:09,436 --> 00:01:12,066
使用自动布局  和使用约会(找红枣)软件

26
00:01:12,066 --> 00:01:14,086
本质上都是要建立关系

27
00:01:16,186 --> 00:01:16,896
视图间的关系

28
00:01:18,136 --> 00:01:20,196
而建立关系  着实需要花一番

29
00:01:20,196 --> 00:01:20,626
功夫

30
00:01:20,626 --> 00:01:24,006
但这种事情  恰恰非常值得

31
00:01:24,006 --> 00:01:26,706
下一番功夫  因为一旦我们用

32
00:01:26,706 --> 00:01:27,786
约束条件设置好界面

33
00:01:27,786 --> 00:01:31,116
我们的应用就能在多种

34
00:01:31,116 --> 00:01:34,086
不同尺寸的屏幕上运行

35
00:01:34,236 --> 00:01:35,796
甚至在未来某种未知尺寸

36
00:01:35,796 --> 00:01:37,056
的屏幕上  都能够完美自适应

37
00:01:39,966 --> 00:01:40,946
如果有人还从没使用过

38
00:01:40,946 --> 00:01:41,886
自动布局  网上有很多

39
00:01:41,886 --> 00:01:44,486
很好的资源  另外  往期的 WWDC

40
00:01:45,096 --> 00:01:46,886
相关演讲  也可以一看

41
00:01:47,576 --> 00:01:48,476
但鉴于今天我们已经

42
00:01:48,476 --> 00:01:49,616
有很多内容要讲  所以那些

43
00:01:49,616 --> 00:01:50,656
基本内容  我就省略不说了

44
00:01:51,856 --> 00:01:54,566
准确地说  今天我们有六项内容

45
00:01:54,596 --> 00:01:55,606
需要给大家一一展示

46
00:01:56,746 --> 00:01:58,886
这些都可以应用到我们的

47
00:01:59,566 --> 00:02:00,826
应用中  可以各自独立使用  或者

48
00:01:59,566 --> 00:02:00,826
应用中  可以各自独立使用  或者

49
00:02:00,826 --> 00:02:02,286
互相结合  做出更复杂的整体

50
00:02:02,286 --> 00:02:02,476
效果

51
00:02:03,196 --> 00:02:04,566
以上是概述  下面我们立马

52
00:02:04,566 --> 00:02:06,196
开始讲表单中的第一项

53
00:02:06,196 --> 00:02:08,856
在运行时改变布局

54
00:02:11,536 --> 00:02:13,826
我刚刚提到的应用  在界面顶端

55
00:02:13,826 --> 00:02:16,736
设置了一个滑动条区域  用户可以

56
00:02:16,736 --> 00:02:18,316
在这里设置距离范围

57
00:02:18,356 --> 00:02:21,086
通常来说  我们的预期是

58
00:02:21,086 --> 00:02:23,426
用户会设置一次  之后的一段时间内

59
00:02:23,426 --> 00:02:24,506
都不会再进行调整

60
00:02:24,506 --> 00:02:27,836
因此我们就希望  稍后这一区域

61
00:02:27,836 --> 00:02:29,416
能够自动收起  这样可以让

62
00:02:29,416 --> 00:02:30,456
界面看起来更清爽

63
00:02:31,086 --> 00:02:35,076
如果我们从设置布局的角度

64
00:02:35,076 --> 00:02:37,196
来考虑这个问题  我们希望

65
00:02:37,196 --> 00:02:39,066
达到的目标是  把这一区域的

66
00:02:39,066 --> 00:02:40,866
高度收起到零

67
00:02:40,866 --> 00:02:42,676
所以我们是不是可以

68
00:02:42,726 --> 00:02:44,756
添加一个高度约束  然后设置

69
00:02:44,756 --> 00:02:46,226
其常量值为零呢

70
00:02:46,226 --> 00:02:47,156
如果我们在界面生成器中

71
00:02:47,156 --> 00:02:49,406
这样做  得到的结果差不多是

72
00:02:50,126 --> 00:02:50,666
这样

73
00:02:51,076 --> 00:02:53,376
就会像这张图上一样  显示出

74
00:02:53,376 --> 00:02:55,256
我们布局的区域  和一堆红线

75
00:02:55,256 --> 00:02:57,486
这意味着我们的布局

76
00:02:57,486 --> 00:02:58,766
无法实现

77
00:02:58,766 --> 00:02:59,576
现在这种状况就叫作

78
00:02:59,576 --> 00:02:59,996
约束冲突 (conflict)

79
00:03:00,786 --> 00:03:02,396
约束冲突  就是说我们

80
00:03:02,396 --> 00:03:04,716
在要求布局引擎执行

81
00:03:05,206 --> 00:03:07,036
多项互相矛盾的事情

82
00:03:07,036 --> 00:03:08,996
在目前这个例子中  矛盾在于

83
00:03:08,996 --> 00:03:10,846
设置区域高度为零

84
00:03:10,846 --> 00:03:12,016
同时要求该区域保持足够高度

85
00:03:12,016 --> 00:03:14,326
以完整容纳区域内部的内容

86
00:03:14,916 --> 00:03:17,226
我们可以用下面这种技巧

87
00:03:17,226 --> 00:03:20,886
来解决这一问题  我们先要把

88
00:03:20,886 --> 00:03:22,156
当前这个包含着控件

89
00:03:22,156 --> 00:03:23,696
滑动条  和文本标签的视图

90
00:03:23,696 --> 00:03:25,576
包裹在另一个视图里

91
00:03:26,516 --> 00:03:27,786
就是图中用橙色标出的区域

92
00:03:29,326 --> 00:03:30,896
现在我们再执行收起

93
00:03:30,896 --> 00:03:32,606
就不是收起包含控件的

94
00:03:32,606 --> 00:03:34,956
内部视图  而是收起整个外围

95
00:03:34,956 --> 00:03:35,536
视图

96
00:03:36,196 --> 00:03:38,506
而内部视图还保持着

97
00:03:38,506 --> 00:03:41,076
原来的高度  并满足所有

98
00:03:41,076 --> 00:03:41,696
约束条件

99
00:03:41,696 --> 00:03:43,446
但外围视图  会对内部视图

100
00:03:43,446 --> 00:03:44,436
进行剪裁  因为 clipsToBounds

101
00:03:44,436 --> 00:03:45,526
属性设置成了是

102
00:03:47,236 --> 00:03:49,466
通过以上设置  就可以达到

103
00:03:49,466 --> 00:03:50,976
隐藏某些界面元素的效果

104
00:03:54,696 --> 00:03:56,556
我们切到 Xcode 看一下具体代码

105
00:03:56,556 --> 00:03:56,996
怎么写

106
00:03:57,406 --> 00:04:00,296
在界面生成器里  我们已经

107
00:03:57,406 --> 00:04:00,296
在界面生成器里  我们已经

108
00:04:00,296 --> 00:04:02,116
在这里设计好了这个滑动条

109
00:04:02,116 --> 00:04:03,086
区域  设计时需要

110
00:04:03,086 --> 00:04:04,526
在"展开"模式下设计  这种

111
00:04:04,526 --> 00:04:06,166
模式下  我们比较好操作

112
00:04:06,586 --> 00:04:07,806
这个区域在界面生成器里

113
00:04:07,806 --> 00:04:09,426
是展开的  所以我们是在

114
00:04:09,906 --> 00:04:13,256
运行时  才执行收起效果

115
00:04:13,256 --> 00:04:14,366
因此我们就需要在运行时创建一个

116
00:04:14,366 --> 00:04:16,486
约束条件  先把外围视图的

117
00:04:16,555 --> 00:04:18,136
高度设置为零

118
00:04:18,745 --> 00:04:21,505
这样在某个时刻  如果用户

119
00:04:21,505 --> 00:04:24,016
触发了约束按钮  作为约束

120
00:04:24,016 --> 00:04:26,506
响应  再去激活执行这项

121
00:04:26,506 --> 00:04:26,976
约束条件

122
00:04:28,096 --> 00:04:29,006
但如果约束条件只有这些

123
00:04:29,006 --> 00:04:30,026
布局还是会出现

124
00:04:30,026 --> 00:04:31,416
之前所见的约束冲突

125
00:04:31,416 --> 00:04:34,256
所以我们还需要再解除

126
00:04:34,256 --> 00:04:35,476
另一个约束才行  这里我们

127
00:04:35,476 --> 00:04:38,126
解除外围视图控件容器的

128
00:04:38,126 --> 00:04:38,926
底端约束

129
00:04:39,526 --> 00:04:41,536
这样我们的外围视图就

130
00:04:41,536 --> 00:04:42,286
可以顺利收起了

131
00:04:42,286 --> 00:04:45,386
我们来看一下完整的代码

132
00:04:47,076 --> 00:04:48,136
这是我们的视图控制器

133
00:04:48,136 --> 00:04:50,796
子类  这里有三个界面控制器

134
00:04:50,796 --> 00:04:51,236
属性

135
00:04:51,236 --> 00:04:52,836
其中两个  是 Outlet 连接属性

136
00:04:52,836 --> 00:04:54,896
分别连接到外围视图  和底端

137
00:04:54,896 --> 00:04:56,146
约束  还有一个属性用来

138
00:04:56,146 --> 00:04:57,816
存储之前设置的  高度归零

139
00:04:58,116 --> 00:04:59,000
的约束

140
00:05:01,966 --> 00:05:04,406
作为触发按钮后的

141
00:05:04,686 --> 00:05:08,026
响应  首先需要确认的是

142
00:05:08,026 --> 00:05:09,096
如果此前还没有创建高度

143
00:05:09,096 --> 00:05:10,176
归零的约束  触发按钮后

144
00:05:10,176 --> 00:05:10,916
先创建这个约束

145
00:05:12,556 --> 00:05:13,606
又因为我们希望运行效果是

146
00:05:13,606 --> 00:05:16,126
在显示和隐藏之间切换

147
00:05:16,126 --> 00:05:17,876
所以还要加一行代码判断

148
00:05:17,876 --> 00:05:19,726
是要隐藏  还是要显示

149
00:05:24,336 --> 00:05:26,596
做完这些后  我们再

150
00:05:26,906 --> 00:05:28,046
按需解除和激活那些

151
00:05:28,046 --> 00:05:29,696
我们需要的约束

152
00:05:30,006 --> 00:05:32,176
那些可以实现最终

153
00:05:32,176 --> 00:05:33,386
隐藏效果的约束

154
00:05:34,896 --> 00:05:38,526
如果大家观察仔细

155
00:05:38,526 --> 00:05:40,156
我们在激活一项

156
00:05:40,156 --> 00:05:41,506
约束条件前  先解除了

157
00:05:41,506 --> 00:05:42,206
另一项约束

158
00:05:43,376 --> 00:05:44,706
而不是简单的二者切换

159
00:05:44,706 --> 00:05:46,386
我们要这样做的原因

160
00:05:46,386 --> 00:05:48,106
是因为自动布局会自动帮助

161
00:05:48,106 --> 00:05:49,896
我们避免约束冲突

162
00:05:50,926 --> 00:05:52,256
如果我们编程时出现了

163
00:05:52,256 --> 00:05:54,176
约束冲突  自动布局就会自动

164
00:05:54,176 --> 00:05:55,786
报告控制中心  说  听着

165
00:05:55,816 --> 00:05:57,846
我发现了以下这些约束条件

166
00:05:57,846 --> 00:05:58,856
相互冲突了

167
00:06:00,176 --> 00:06:01,626
所以举个例子  如果我们在

168
00:06:01,626 --> 00:06:03,216
底端约束未解除的状况下

169
00:06:03,216 --> 00:06:04,266
激活高度归零约束

170
00:06:04,266 --> 00:06:05,076
就会收到约束冲突警报

171
00:06:06,046 --> 00:06:07,486
先解除一个约束  就可以避免

172
00:06:07,486 --> 00:06:07,726
报错

173
00:06:09,166 --> 00:06:11,026
好了  做完这些就可以让我们的

174
00:06:11,026 --> 00:06:11,976
界面达到最终的

175
00:06:11,976 --> 00:06:13,666
隐藏效果  但我们还希望能够

176
00:06:15,076 --> 00:06:16,776
动画显示隐藏过程  这样

177
00:06:16,776 --> 00:06:19,786
用户能看到  界面在展开

178
00:06:19,786 --> 00:06:21,276
和收起之间  能有一个过渡

179
00:06:21,276 --> 00:06:22,336
前后不会显得太突兀

180
00:06:23,256 --> 00:06:24,736
要实现动态转变  我们还要加一个

181
00:06:24,736 --> 00:06:26,546
UIView 动画块  然后再在动画中调用

182
00:06:26,546 --> 00:06:28,196
layoutIfNeeded 立即实现布局

183
00:06:28,196 --> 00:06:29,056
这一步会自动

184
00:06:29,056 --> 00:06:31,966
评估约束条件  获取外框数值  并自动

185
00:06:32,046 --> 00:06:33,106
应用到视图上

186
00:06:33,316 --> 00:06:35,196
然后 UIView 动画会抓取这些

187
00:06:35,196 --> 00:06:36,796
动画参数  为你实现动画效果

188
00:06:41,476 --> 00:06:42,786
前面说了  解除底端

189
00:06:42,786 --> 00:06:43,806
约束  就可以实现

190
00:06:43,856 --> 00:06:45,166
这种动画效果

191
00:06:46,236 --> 00:06:48,476
这和我心中想要的效果还

192
00:06:48,476 --> 00:06:50,146
不太一样  但如果想更改效果

193
00:06:50,146 --> 00:06:51,056
绝大部分的代码我都

194
00:06:51,056 --> 00:06:53,626
不需要改动  只需要调整

195
00:06:53,626 --> 00:06:56,406
边缘约束所关联的约束条件

196
00:06:56,496 --> 00:06:57,916
是关联到容器顶端  还是底端

197
00:06:58,846 --> 00:07:00,456
如果我预先设置为

198
00:06:58,846 --> 00:07:00,456
如果我预先设置为

199
00:07:00,456 --> 00:07:04,676
关联到顶端约束  那么

200
00:07:04,676 --> 00:07:06,486
动画效果就会产生相应改变

201
00:07:06,486 --> 00:07:07,976
变成这样  其实我更喜欢这种效果

202
00:07:11,836 --> 00:07:13,456
我们刚刚看到的例子  演示了

203
00:07:13,456 --> 00:07:14,856
如何通过改变约束

204
00:07:15,246 --> 00:07:17,006
来改变界面的布局

205
00:07:17,266 --> 00:07:20,436
下面我们再看看另一种

206
00:07:20,436 --> 00:07:21,846
改变布局的方法  我们将用这种方法

207
00:07:21,846 --> 00:07:22,916
来跟踪触控点

208
00:07:23,506 --> 00:07:26,326
在我们的应用中  有这样

209
00:07:26,326 --> 00:07:28,106
一个中央卡片区域  我们现在

210
00:07:28,106 --> 00:07:30,316
希望这个卡片区域能够跟随

211
00:07:30,316 --> 00:07:33,326
触控点在屏幕上移动  并在移动

212
00:07:33,326 --> 00:07:35,496
到接近屏幕边缘时  稍作旋转

213
00:07:35,496 --> 00:07:36,676
同时松手后能自动复位

214
00:07:42,116 --> 00:07:44,206
一个视图在屏幕上的位置

215
00:07:44,206 --> 00:07:45,916
一般是由外框 (frame) 属性

216
00:07:45,916 --> 00:07:47,566
来定义的  而当我们

217
00:07:47,566 --> 00:07:49,326
使用约束时  当我们对这个视图

218
00:07:49,326 --> 00:07:50,956
使用约束时  frame 属性具体

219
00:07:51,306 --> 00:07:52,576
的数值在布局引擎里

220
00:07:53,946 --> 00:07:55,706
也就是说  具体数值是引擎

221
00:07:55,766 --> 00:07:56,656
由约束条件计算得出的

222
00:07:57,726 --> 00:07:58,636
但除此之外  还有另一个属性

223
00:07:58,636 --> 00:07:59,866
会影响视图在屏幕上

224
00:07:59,866 --> 00:08:01,466
所处的位置  那就是

225
00:07:59,866 --> 00:08:01,466
所处的位置  那就是

226
00:08:01,466 --> 00:08:03,576
transform  这个属性会对

227
00:08:03,626 --> 00:08:04,786
外框施加形变

228
00:08:04,866 --> 00:08:06,056
我们要说的类型  叫作

229
00:08:06,196 --> 00:08:07,316
仿射变换 (CGAffineTransform)

230
00:08:07,666 --> 00:08:08,876
通过这个属性  我们可以

231
00:08:08,876 --> 00:08:10,886
在引擎通过约束计算完

232
00:08:10,956 --> 00:08:13,646
外框位置和大小后  再对外框

233
00:08:14,076 --> 00:08:15,496
进行平移  旋转  和

234
00:08:15,496 --> 00:08:16,006
缩放

235
00:08:17,556 --> 00:08:18,526
我们按上述所说的方法实施

236
00:08:18,526 --> 00:08:20,596
就可以得到想要的效果

237
00:08:21,336 --> 00:08:22,446
我现在就直接切换到示例

238
00:08:22,446 --> 00:08:22,976
给大家演示一下

239
00:08:29,776 --> 00:08:31,486
好了  这就是我们应用程序的

240
00:08:31,486 --> 00:08:32,086
界面生成器

241
00:08:33,576 --> 00:08:35,166
现在我们想要让

242
00:08:35,285 --> 00:08:36,885
中央卡片区域随着屏幕触控

243
00:08:37,056 --> 00:08:37,846
四处移动

244
00:08:38,996 --> 00:08:40,616
我刚刚已经从对象库里

245
00:08:40,616 --> 00:08:42,775
往这个区域里添加了一个

246
00:08:42,775 --> 00:08:43,916
手势识别器  一个

247
00:08:43,916 --> 00:08:44,936
拖动手势识别器 (pan gesture recognizer)

248
00:08:45,266 --> 00:08:46,536
我添加过手势识别器之后

249
00:08:46,536 --> 00:08:48,056
它就会显示在

250
00:08:48,056 --> 00:08:50,726
场景的顶层  这里我们可以在

251
00:08:51,406 --> 00:08:54,356
场景存放区和提纲视图里看到

252
00:08:54,356 --> 00:08:56,226
我现在打开辅助编辑器

253
00:08:56,226 --> 00:08:57,556
这样我们就可以看到

254
00:08:57,556 --> 00:08:58,976
视图控制器的代码

255
00:09:01,426 --> 00:09:03,096
然后我按住控制键  把拖动手势

256
00:09:03,096 --> 00:09:05,636
识别器拖拽到我们源代码

257
00:09:05,636 --> 00:09:06,646
的这个地方

258
00:09:06,646 --> 00:09:08,726
这样就可以添加一个

259
00:09:08,726 --> 00:09:09,176
outlet 连接

260
00:09:09,356 --> 00:09:10,426
或者像现在这种情况

261
00:09:10,426 --> 00:09:12,496
连接一个动作  我起名叫

262
00:09:12,496 --> 00:09:13,866
panCard (卡片拖动)

263
00:09:15,076 --> 00:09:18,056
然后再把类型  从"任何"

264
00:09:18,056 --> 00:09:19,176
改为拖动手势识别器

265
00:09:19,216 --> 00:09:20,456
这就是这项参数的

266
00:09:20,456 --> 00:09:20,936
类型

267
00:09:21,596 --> 00:09:23,256
指定拖动手势识别器

268
00:09:23,256 --> 00:09:24,776
就让我可以

269
00:09:25,216 --> 00:09:26,226
在动作方法内使用

270
00:09:26,226 --> 00:09:27,776
手势识别器的属性

271
00:09:31,436 --> 00:09:31,956
好了

272
00:09:31,956 --> 00:09:34,066
这里可以看到一个写了半截的方法

273
00:09:34,486 --> 00:09:36,076
这里还有一个 outlet 连接

274
00:09:36,076 --> 00:09:36,936
连接到卡片视图上

275
00:09:36,936 --> 00:09:37,976
我们要移动的就是这个卡片视图

276
00:09:42,426 --> 00:09:45,476
现在  在这个方法里  我首先

277
00:09:47,156 --> 00:09:49,566
要询问发送者  也就是

278
00:09:49,566 --> 00:09:51,126
手势识别器  请求它的

279
00:09:51,126 --> 00:09:52,296
解译结果

280
00:09:53,076 --> 00:09:56,666
也就是用户到底拖动  或者

281
00:09:56,726 --> 00:09:57,746
拖拽了多远

282
00:09:58,376 --> 00:10:00,066
然后我会用这个解译结果

283
00:09:58,376 --> 00:10:00,066
然后我会用这个解译结果

284
00:10:00,066 --> 00:10:02,566
对当前这个卡片视图

285
00:10:02,566 --> 00:10:03,236
施加形变

286
00:10:03,576 --> 00:10:04,796
具体形变是由这里这个

287
00:10:04,796 --> 00:10:06,166
辅助方法计算得出的

288
00:10:07,136 --> 00:10:09,166
这个辅助方法不仅

289
00:10:09,166 --> 00:10:12,036
会生成解译结果  还会

290
00:10:12,036 --> 00:10:13,066
根据卡片所在位置  添加

291
00:10:13,066 --> 00:10:14,376
一定程度的旋转效果

292
00:10:14,376 --> 00:10:17,626
现在我们就按下编译并运行

293
00:10:17,626 --> 00:10:18,756
试试  看运行出来结果如何

294
00:10:28,376 --> 00:10:28,956
好了

295
00:10:28,956 --> 00:10:29,776
这就是应用界面了

296
00:10:29,986 --> 00:10:31,876
现在  如果我按住屏幕移动

297
00:10:31,876 --> 00:10:34,866
可以看到旋转效果  卡片还会

298
00:10:34,936 --> 00:10:35,856
跟随触控点移动

299
00:10:35,856 --> 00:10:38,576
但如果我现在松手  目前

300
00:10:38,576 --> 00:10:39,946
卡片只会停在原地不动

301
00:10:39,946 --> 00:10:41,306
因为我们代码中还没有重置

302
00:10:41,306 --> 00:10:41,876
形变

303
00:10:41,876 --> 00:10:44,286
形变量还停留在最后一次

304
00:10:44,286 --> 00:10:46,166
设置的值上

305
00:10:46,206 --> 00:10:47,606
如果我再触控移动一下

306
00:10:47,606 --> 00:10:49,096
会看到此时卡片才会自动

307
00:10:49,096 --> 00:10:50,776
复位到初始位置

308
00:10:51,386 --> 00:10:52,836
这是因为形变不是随之

309
00:10:52,836 --> 00:10:53,926
偏移的

310
00:10:53,966 --> 00:10:58,726
所以一旦我们再一次提交

311
00:10:58,726 --> 00:11:01,346
新的解译结果  就总会

312
00:10:58,726 --> 00:11:01,346
新的解译结果  就总会

313
00:11:01,616 --> 00:11:03,366
和初始 frame 属性值

314
00:11:03,896 --> 00:11:04,146
相关

315
00:11:05,276 --> 00:11:06,866
我们现在希望卡片能在

316
00:11:06,866 --> 00:11:08,026
拖拽移动过后  自动复位到屏幕

317
00:11:08,026 --> 00:11:08,396
中央

318
00:11:08,556 --> 00:11:11,446
只要松手就自动复位

319
00:11:12,316 --> 00:11:13,696
要实现这一点  我们可以先看一下

320
00:11:13,966 --> 00:11:15,476
手势识别器的状态

321
00:11:15,476 --> 00:11:15,976
属性

322
00:11:19,356 --> 00:11:20,696
这里的代码是一样的

323
00:11:20,896 --> 00:11:22,466
然后等这个形变状态完结后

324
00:11:22,586 --> 00:11:24,376
我们就重置 transform 属性

325
00:11:24,866 --> 00:11:26,486
设置该值为 identity  还原到最初状态

326
00:11:27,836 --> 00:11:28,776
我们再编译并运行一下

327
00:11:34,836 --> 00:11:38,006
现在我们移动后松手  卡片就会

328
00:11:38,176 --> 00:11:40,366
自动复位

329
00:11:40,896 --> 00:11:42,016
当然了  我们还希望

330
00:11:42,016 --> 00:11:43,196
给这个复位过程加一些动画效果

331
00:11:43,256 --> 00:11:43,946
这就加一下

332
00:11:47,196 --> 00:11:49,206
这里的代码还保留着重置到

333
00:11:49,206 --> 00:11:50,286
identity 最初状态

334
00:11:51,126 --> 00:11:53,766
然后我们加一个带 spring (震动)

335
00:11:54,216 --> 00:11:56,806
可选效果的 UIView 动画

336
00:11:56,996 --> 00:11:57,936
加了动画后的效果又不太一样了

337
00:11:58,796 --> 00:11:59,846
再编译并运行一下

338
00:12:05,436 --> 00:12:07,556
现在我再松开卡片

339
00:12:08,436 --> 00:12:10,196
可以看到  卡片会弹回

340
00:12:10,196 --> 00:12:11,246
初始位置  我还挺喜欢

341
00:12:11,246 --> 00:12:11,946
这种活泼的显示效果的

342
00:12:12,516 --> 00:12:16,176
[掌声]

343
00:12:16,676 --> 00:12:18,786
谢谢大家  我觉得会有人

344
00:12:18,786 --> 00:12:19,436
会给朋友们展示这点的

345
00:12:19,656 --> 00:12:22,676
我觉得这样挺好

346
00:12:22,676 --> 00:12:22,916
好了

347
00:12:30,666 --> 00:12:32,916
我们刚刚讲了  视图

348
00:12:32,916 --> 00:12:34,546
在屏幕上的位置和很多项

349
00:12:34,546 --> 00:12:35,736
属性相关

350
00:12:35,736 --> 00:12:37,256
不光取决于由约束计算

351
00:12:37,256 --> 00:12:38,226
得出的外框 (frame)

352
00:12:38,266 --> 00:12:40,286
我们还可以通过使用

353
00:12:40,286 --> 00:12:41,666
变形 (transform) 来控制视图

354
00:12:41,666 --> 00:12:42,636
在屏幕上的位置

355
00:12:42,636 --> 00:12:45,316
要实现这种有趣的效果

356
00:12:45,316 --> 00:12:46,586
我们只需要添加寥寥几行

357
00:12:46,586 --> 00:12:47,266
代码

358
00:12:47,266 --> 00:12:49,706
所以我衷心希望大家能够

359
00:12:49,706 --> 00:12:50,576
在你们的应用里尝试一下

360
00:12:50,576 --> 00:12:52,906
这个功能  因为真的很好玩儿

361
00:12:54,066 --> 00:12:55,206
对于临时的视图改变

362
00:12:55,206 --> 00:12:56,516
形变非常好用  像我们刚看的

363
00:12:56,516 --> 00:12:58,446
比如用来跟踪触控点

364
00:12:58,446 --> 00:13:00,076
或是为界面的两个状态之间添加动画

365
00:12:58,446 --> 00:13:00,076
或是为界面的两个状态之间添加动画

366
00:13:00,076 --> 00:13:00,426
效果

367
00:13:01,326 --> 00:13:02,726
但要记得在形变之后重置

368
00:13:02,726 --> 00:13:04,426
还原到最初的 identity 状态

369
00:13:06,606 --> 00:13:08,406
好了  现在我们的应用界面有了

370
00:13:09,126 --> 00:13:11,296
活泼有趣的效果  我们再来

371
00:13:11,296 --> 00:13:13,036
谈谈怎么让文字显示更加完美

372
00:13:14,116 --> 00:13:15,256
为了做到这点  我们需要支持

373
00:13:15,256 --> 00:13:15,886
动态字体 (Dynamic Type)

374
00:13:18,206 --> 00:13:19,786
动态字体是 iOS 自带的一项技术

375
00:13:19,926 --> 00:13:22,256
这项技术  既给开发者提供了一套

376
00:13:22,896 --> 00:13:23,936
文字样式

377
00:13:23,936 --> 00:13:25,396
比如有标题  正文

378
00:13:25,396 --> 00:13:25,906
和说明

379
00:13:26,586 --> 00:13:28,526
还可以让用户控制这些样式中

380
00:13:28,526 --> 00:13:29,446
的字体大小

381
00:13:29,936 --> 00:13:34,006
这是一些在应用程序中的举例  这些程序中

382
00:13:34,006 --> 00:13:35,666
用的都是默认文字样式的字号

383
00:13:37,046 --> 00:13:38,286
现在  如果用户希望调整到

384
00:13:38,286 --> 00:13:39,836
比方说  更大的显示字号

385
00:13:40,586 --> 00:13:42,296
短信中的文字就会做相应调整

386
00:13:42,296 --> 00:13:43,756
可以看到文字变大了  然后文字

387
00:13:43,756 --> 00:13:45,546
周围的所有图像  比如

388
00:13:45,546 --> 00:13:46,896
包住短信的文字气泡  都会相应

389
00:13:46,896 --> 00:13:47,456
变大

390
00:13:47,536 --> 00:13:49,386
同时  输入框也会相应变大

391
00:13:51,326 --> 00:13:54,186
同样的  在日历应用中的

392
00:13:54,186 --> 00:13:54,606
事件层

393
00:13:55,376 --> 00:13:57,986
我们的 app 看起来是这样的

394
00:13:59,266 --> 00:14:00,016
和短信息中的改变一样

395
00:13:59,266 --> 00:14:00,016
和短信息中的改变一样

396
00:14:00,936 --> 00:14:02,856
或者  根据不同的程序设计

397
00:14:02,856 --> 00:14:04,406
增大字号后  也可能变成

398
00:14:04,406 --> 00:14:04,916
这样

399
00:14:05,166 --> 00:14:07,336
一部分文字的字号变大了

400
00:14:07,336 --> 00:14:09,916
但整体布局不对  导致文字

401
00:14:10,006 --> 00:14:10,486
不可读

402
00:14:13,586 --> 00:14:14,646
好在通过界面生成器

403
00:14:14,646 --> 00:14:16,646
我们可以轻而易举地修复这个问题

404
00:14:17,046 --> 00:14:18,586
我们现在就看一下  如何

405
00:14:18,586 --> 00:14:18,976
进行改进

406
00:14:25,056 --> 00:14:26,316
好了

407
00:14:26,756 --> 00:14:28,706
回到我们的应用程序  我们看一下

408
00:14:28,706 --> 00:14:30,116
怎样修改这两个

409
00:14:30,116 --> 00:14:32,786
文本标签  好让它们能沿用系统字号

410
00:14:33,006 --> 00:14:35,186
现在  我先选中下方的

411
00:14:35,186 --> 00:14:35,966
这个文字标签

412
00:14:37,376 --> 00:14:38,946
然后在审查器中  找到

413
00:14:38,946 --> 00:14:40,756
"自动调整字体"的复选框

414
00:14:40,756 --> 00:14:42,166
并勾选

415
00:14:42,786 --> 00:14:45,626
如果大家观察足够仔细

416
00:14:45,626 --> 00:14:46,666
会发现我一旦勾选这一项

417
00:14:46,666 --> 00:14:48,046
这里就弹出了一个警报

418
00:14:48,046 --> 00:14:48,826
图标

419
00:14:49,166 --> 00:14:50,686
这个警报是为了提醒我们

420
00:14:50,686 --> 00:14:53,056
如果要应用这项属性  我们

421
00:14:53,056 --> 00:14:55,436
首先得为这个文本标签规定好

422
00:14:55,436 --> 00:14:55,816
文字样式

423
00:14:57,876 --> 00:14:59,976
当前这个文本标签的字号

424
00:14:59,976 --> 00:15:02,046
是固定的值  设置在系统12号 (System 12)

425
00:14:59,976 --> 00:15:02,046
是固定的值  设置在系统12号 (System 12)

426
00:15:02,586 --> 00:15:03,896
我现在就把它改成

427
00:15:03,896 --> 00:15:06,536
一种文字样式  只需打开审查器

428
00:15:06,876 --> 00:15:08,336
然后选择一个合适的

429
00:15:08,336 --> 00:15:08,796
样式

430
00:15:08,796 --> 00:15:09,676
在这里  我们选用

431
00:15:09,676 --> 00:15:10,366
说明一 (Caption 1)

432
00:15:10,886 --> 00:15:14,746
这个样式刚好和默认文字样式中

433
00:15:14,746 --> 00:15:16,346
的系统 12 号一模一样

434
00:15:16,346 --> 00:15:17,416
所以目前画布上还没有任何变化

435
00:15:19,496 --> 00:15:22,316
现在我把上方的这个文本标签也

436
00:15:22,316 --> 00:15:22,786
改一下

437
00:15:22,856 --> 00:15:24,116
这个标签已经设好了文本样式

438
00:15:24,996 --> 00:15:27,946
编译并运行一下

439
00:15:36,906 --> 00:15:38,546
好了  现在这个界面显示出来

440
00:15:38,546 --> 00:15:40,746
和之前没什么两样  因为

441
00:15:40,746 --> 00:15:41,736
我们还没有改变字号大小

442
00:15:42,446 --> 00:15:43,736
要改变字号大小

443
00:15:43,966 --> 00:15:46,706
可以通过模拟器里的"系统设置"

444
00:15:46,706 --> 00:15:48,396
应用程序  但那就要在

445
00:15:48,396 --> 00:15:49,416
我们的应用和系统设置应用

446
00:15:49,416 --> 00:15:51,666
两个应用间不断切换  有点麻烦

447
00:15:51,876 --> 00:15:52,916
所以我想给大家演示一下

448
00:15:52,916 --> 00:15:54,626
另一种方法

449
00:15:54,626 --> 00:15:56,276
如果我切换回 Xcode  可以在

450
00:15:56,276 --> 00:15:58,086
应用菜单中打开  开发者工具

451
00:15:58,086 --> 00:16:00,786
然后进入  辅助功能审查器

452
00:15:58,086 --> 00:16:00,786
然后进入  辅助功能审查器

453
00:16:01,366 --> 00:16:04,356
打开这个窗口后  可以把

454
00:16:04,356 --> 00:16:05,926
目标一项设为模拟器

455
00:16:05,926 --> 00:16:09,946
然后点击设置标签页  下方就

456
00:16:09,946 --> 00:16:10,946
会出现一个字号滑动条

457
00:16:11,536 --> 00:16:12,876
现在我调出模拟器

458
00:16:12,876 --> 00:16:14,876
两个窗口左右放在一起  就可以

459
00:16:14,876 --> 00:16:16,356
通过滑动这个字号滑动条  在屏幕上

460
00:16:16,356 --> 00:16:17,706
实时看到字号变化

461
00:16:17,706 --> 00:16:18,876
这样来测试对动态字体

462
00:16:18,876 --> 00:16:20,736
的改变  就简单多了

463
00:16:21,516 --> 00:16:25,796
[掌声]

464
00:16:26,296 --> 00:16:27,516
顺便说一句  如果我同时还

465
00:16:27,586 --> 00:16:29,466
插着 iPhone  或有 iPhone

466
00:16:29,466 --> 00:16:30,546
设置好了开发模式  我也可以把

467
00:16:30,826 --> 00:16:32,166
目标设置为连接上的这些 iPhone

468
00:16:33,086 --> 00:16:36,396
这里我们可以看到  应用在调整

469
00:16:36,586 --> 00:16:38,246
在根据字号变化  实时调整

470
00:16:38,246 --> 00:16:40,546
但当字号过大时

471
00:16:40,546 --> 00:16:42,766
这两个文本标签就会撞到一起

472
00:16:42,766 --> 00:16:43,696
相互重叠

473
00:16:44,436 --> 00:16:45,876
让我们再调整一下这部分

474
00:16:50,296 --> 00:16:51,826
在界面生成器里

475
00:16:52,356 --> 00:16:53,816
糟糕  我先切换回来

476
00:16:54,336 --> 00:16:57,016
把这个窗口挪到一边

477
00:16:57,756 --> 00:16:59,596
下面这里  这个文本区域

478
00:16:59,596 --> 00:17:03,186
定义这个区域的大小的是一个

479
00:16:59,596 --> 00:17:03,186
定义这个区域的大小的是一个

480
00:17:03,236 --> 00:17:04,856
固定数值的高度约束

481
00:17:05,126 --> 00:17:06,156
在这里可以看到  是一个常量值

482
00:17:07,646 --> 00:17:08,756
现在我们希望这一区域的

483
00:17:08,915 --> 00:17:11,036
大小  能根据内部所需要显示的

484
00:17:11,036 --> 00:17:12,646
文本标签大小  自行调整

485
00:17:13,296 --> 00:17:14,215
我们已经把下方的文本标签

486
00:17:14,215 --> 00:17:15,236
通过约束绑定到区域底端

487
00:17:15,236 --> 00:17:16,366
把上方的标签  约束到顶端

488
00:17:16,366 --> 00:17:18,556
现在我们只需要在这两者之间

489
00:17:18,556 --> 00:17:19,746
添加一个垂直约束

490
00:17:20,276 --> 00:17:21,286
这样一来  文本标签的

491
00:17:21,366 --> 00:17:24,116
字号大小和几条相关约束中所

492
00:17:24,116 --> 00:17:26,016
包含的信息  就足够程序自动计算出

493
00:17:26,016 --> 00:17:26,736
这个文本区域该有

494
00:17:26,736 --> 00:17:27,126
多大

495
00:17:29,136 --> 00:17:29,896
让我们实践一下

496
00:17:29,896 --> 00:17:31,296
按住控制键把一个文本标签拖到另一个

497
00:17:31,296 --> 00:17:31,646
上面

498
00:17:32,646 --> 00:17:33,956
这里  我可以选择添加

499
00:17:34,036 --> 00:17:35,456
一个垂直间距约束

500
00:17:35,456 --> 00:17:36,276
这就可以保证两个文本标签的

501
00:17:36,276 --> 00:17:37,946
垂直间距一直维持着

502
00:17:37,946 --> 00:17:38,936
当前二者在画布上的

503
00:17:38,936 --> 00:17:39,116
距离

504
00:17:39,936 --> 00:17:41,316
我也可以选择添加一个

505
00:17:41,316 --> 00:17:43,006
文本基线垂直标准间距

506
00:17:43,806 --> 00:17:45,696
这和垂直间距差不多

507
00:17:45,696 --> 00:17:48,536
唯一不同的地方是  UIKit 会根据

508
00:17:48,536 --> 00:17:50,056
这个约束所涉及的多个文本

509
00:17:50,056 --> 00:17:53,036
标签的具体文字样式和

510
00:17:53,036 --> 00:17:54,386
当前字号自动调整

511
00:17:54,386 --> 00:17:55,286
约束的常量值

512
00:17:56,616 --> 00:17:57,676
我们现在就添加这个约束吧

513
00:17:58,816 --> 00:18:00,886
现在我就可以选中并删除

514
00:17:58,816 --> 00:18:00,886
现在我就可以选中并删除

515
00:18:01,326 --> 00:18:03,106
原先的固定数值的高度约束

516
00:18:04,176 --> 00:18:04,976
再编译并运行

517
00:18:14,216 --> 00:18:15,946
现在这个界面看起来就舒服

518
00:18:15,946 --> 00:18:16,336
多了

519
00:18:16,336 --> 00:18:18,076
下方的内容区域会跟着

520
00:18:18,076 --> 00:18:19,936
文字字号变大自动调大

521
00:18:19,936 --> 00:18:20,856
也可以跟着字号变小而

522
00:18:20,856 --> 00:18:22,596
缩小  喜欢在界面上

523
00:18:22,816 --> 00:18:24,556
看到更浓缩内容的人可以试试

524
00:18:34,046 --> 00:18:37,366
总结一下  通过应用文本标签审查器

525
00:18:37,366 --> 00:18:39,296
里的两项属性  也就是字体属性

526
00:18:39,296 --> 00:18:40,456
和动态字体属性

527
00:18:41,056 --> 00:18:43,426
我们可以让文本标签根据

528
00:18:43,426 --> 00:18:44,926
字号大小改变而进行自动

529
00:18:44,926 --> 00:18:45,436
调整

530
00:18:45,746 --> 00:18:47,286
我们还看了怎样通过辅助功能审查器

531
00:18:47,286 --> 00:18:49,626
来测试不同字号大小的显示效果

532
00:18:51,046 --> 00:18:52,826
稍后  在今日下午

533
00:18:52,826 --> 00:18:54,166
还有一场演讲  叫《Building Apps With

534
00:18:54,166 --> 00:18:55,336
Dynamic Type》  那场演讲

535
00:18:55,336 --> 00:18:58,666
有更多相关信息  今天的

536
00:18:58,666 --> 00:18:59,796
演讲之后  如果你想知道

537
00:18:59,796 --> 00:19:01,616
改变字号大小后  你们的应用

538
00:18:59,796 --> 00:19:01,616
改变字号大小后  你们的应用

539
00:19:01,616 --> 00:19:03,806
看起来是什么样子

540
00:19:03,806 --> 00:19:05,356
也可以直接在手机端的设置里

541
00:19:05,426 --> 00:19:07,126
直接调整

542
00:19:07,366 --> 00:19:08,506
如果大家进入辅助功能设置

543
00:19:08,506 --> 00:19:10,156
可以看到辅助设置里有

544
00:19:10,156 --> 00:19:12,646
大字体选项  为显示字体

545
00:19:12,646 --> 00:19:14,266
提供了很大范围的

546
00:19:14,266 --> 00:19:15,636
可选字号值

547
00:19:15,756 --> 00:19:19,806
大家可以去试试

548
00:19:20,066 --> 00:19:22,266
接下来  我们就该介绍如何

549
00:19:22,266 --> 00:19:25,466
为应用程序添加更多的视图了

550
00:19:25,736 --> 00:19:27,946
下面就有请 Jason 上台

551
00:19:28,016 --> 00:19:30,226
来为大家介绍安全区域 (Safe Area)

552
00:19:30,826 --> 00:19:30,976
掌声欢迎 Jason

553
00:19:31,516 --> 00:19:37,806
[掌声]

554
00:19:38,306 --> 00:19:39,016
&gt;&gt; 大家好

555
00:19:40,296 --> 00:19:41,336
我的名字是 Jason Yao

556
00:19:41,336 --> 00:19:42,226
是一位界面生成器

557
00:19:42,226 --> 00:19:43,526
工程师  很高兴今天

558
00:19:43,526 --> 00:19:44,586
能在此和大家进行分享

559
00:19:45,076 --> 00:19:46,106
我会继续用这个约会(找红枣)应用

560
00:19:46,106 --> 00:19:47,116
作为模版和例子  再给大家

561
00:19:47,116 --> 00:19:48,826
讲解剩下的三项技术

562
00:19:49,896 --> 00:19:51,446
好了  首先的一点

563
00:19:51,446 --> 00:19:52,696
假设我们在一个视图控制器里

564
00:19:52,696 --> 00:19:55,616
上方设置了顶部导航栏

565
00:19:55,616 --> 00:19:56,636
下方设置了底部

566
00:19:56,636 --> 00:19:58,806
标签导航栏  而我们现在想

567
00:19:58,806 --> 00:20:01,586
确保中间的视图内容不要被

568
00:19:58,806 --> 00:20:01,586
确保中间的视图内容不要被

569
00:20:01,586 --> 00:20:02,876
这上下两个导航栏遮挡

570
00:20:02,876 --> 00:20:04,306
这种情况下  该怎样定位中间的视图

571
00:20:05,346 --> 00:20:06,876
可能大家已经听说过了

572
00:20:06,916 --> 00:20:09,166
在 iOS 11 里  新推出了一个布局指南

573
00:20:09,166 --> 00:20:10,376
叫作安全区域 (Safe Area) 布局指南

574
00:20:10,576 --> 00:20:12,756
这是 UIView 的一个新属性

575
00:20:13,316 --> 00:20:16,886
在自动布局里也可以用

576
00:20:16,886 --> 00:20:19,166
实质上  就是一个长方形区域

577
00:20:19,166 --> 00:20:20,956
一个被两个导航栏  和容器边界

578
00:20:20,956 --> 00:20:22,526
框起来的区域  我们可以在此区域内

579
00:20:22,526 --> 00:20:24,006
按需求对视图进行约束

580
00:20:24,476 --> 00:20:27,676
如果以前你就有过这种布局需求

581
00:20:27,676 --> 00:20:30,046
你可能还记得当时需要

582
00:20:30,046 --> 00:20:31,286
通过 UIViewController 里的

583
00:20:31,286 --> 00:20:32,296
顶底端 (Top and Bottom) 布局指南设置

584
00:20:32,666 --> 00:20:34,016
在新版的安全区域设置方法下  这两项

585
00:20:34,016 --> 00:20:35,166
都废止不用了

586
00:20:35,616 --> 00:20:36,706
安全区域布局指南会更加

587
00:20:36,706 --> 00:20:37,696
便捷好使

588
00:20:37,776 --> 00:20:39,646
效果更多样  还可以实现

589
00:20:39,646 --> 00:20:41,516
一些前所未有的新效果  比如

590
00:20:41,516 --> 00:20:43,056
可以在顶底端导航栏的

591
00:20:43,056 --> 00:20:43,786
中间区域进行居中

592
00:20:43,786 --> 00:20:46,256
使用这个效果之后  如果屏幕方向改变

593
00:20:46,256 --> 00:20:48,176
或者  大小或高度改变

594
00:20:48,356 --> 00:20:50,026
比如  如果我们旋转到

595
00:20:50,026 --> 00:20:51,666
横屏  我们的布局也会

596
00:20:51,666 --> 00:20:52,306
自动调整

597
00:20:53,696 --> 00:20:55,306
安全区域布局指南

598
00:20:55,306 --> 00:20:57,736
也可以应用到 tvOS 上

599
00:20:59,226 --> 00:21:00,606
当我们为 tvOS 设计应用程序

600
00:20:59,226 --> 00:21:00,606
当我们为 tvOS 设计应用程序

601
00:21:00,606 --> 00:21:01,396
设计内容的时候  我们会

602
00:21:01,396 --> 00:21:04,136
希望让设计好的内容铺满整个

603
00:21:04,136 --> 00:21:04,786
大屏幕

604
00:21:05,036 --> 00:21:06,136
这时我们需要考虑的一点

605
00:21:06,796 --> 00:21:07,916
就是我们设计的布局  可能会被

606
00:21:07,916 --> 00:21:09,096
显示在很多大小不一的显示屏上

607
00:21:09,096 --> 00:21:11,366
屏幕尺寸可能很小  也可能很大

608
00:21:11,366 --> 00:21:13,246
格式从平板  到投影仪  我们还

609
00:21:13,826 --> 00:21:15,336
需要考虑  用视频术语说的话

610
00:21:15,336 --> 00:21:16,596
一个叫"过扫描区域"的东西

611
00:21:18,276 --> 00:21:20,046
在一些显示屏上  我这里设计的

612
00:21:20,046 --> 00:21:22,086
标题  就可能会因离顶部太近而

613
00:21:22,536 --> 00:21:23,346
被切出屏幕

614
00:21:23,346 --> 00:21:24,366
因此我们就需要适当调整内容布局

615
00:21:24,366 --> 00:21:26,176
让它们都包含在安全区域

616
00:21:26,176 --> 00:21:26,686
内部

617
00:21:26,686 --> 00:21:28,336
然后安全区域布局指南

618
00:21:28,336 --> 00:21:29,406
就会在 iOS 11 中正确地表达

619
00:21:29,406 --> 00:21:33,056
这部分内容  然后在 tvOS 故事板中

620
00:21:33,056 --> 00:21:33,686
正确显示

621
00:21:34,116 --> 00:21:37,556
我们只需把视图约束在

622
00:21:37,556 --> 00:21:39,496
内容范围内  包在安全区域内

623
00:21:39,496 --> 00:21:41,306
然后把剩下的视图用一张

624
00:21:41,306 --> 00:21:42,716
漂亮的背景图片填满

625
00:21:42,716 --> 00:21:44,306
再展示给用户就好了

626
00:21:45,936 --> 00:21:47,806
要在 iOS 11 和界面生成器中

627
00:21:47,806 --> 00:21:50,056
启用安全区域布局指南也

628
00:21:50,056 --> 00:21:50,616
非常简单

629
00:21:51,426 --> 00:21:52,576
我们只需进入故事板

630
00:21:52,576 --> 00:21:55,516
点击文件审查器  找到

631
00:21:55,516 --> 00:21:57,116
使用安全区域布局指南的

632
00:21:57,116 --> 00:21:58,156
复选框  并勾选即可

633
00:21:58,986 --> 00:22:00,636
勾选之后就能看到

634
00:21:58,986 --> 00:22:00,636
勾选之后就能看到

635
00:22:00,636 --> 00:22:01,816
在我们每一个场景的顶层

636
00:22:01,816 --> 00:22:03,316
都会出现一个新生成的

637
00:22:03,316 --> 00:22:04,516
安全区域布局指南  然后

638
00:22:04,636 --> 00:22:06,196
就可以用这个来设置约束条件

639
00:22:06,196 --> 00:22:07,286
和用画布上其他东西设置约束的

640
00:22:07,286 --> 00:22:07,976
方法一样

641
00:22:13,076 --> 00:22:14,626
所以  一  安全区域布局指南是

642
00:22:14,626 --> 00:22:16,266
UIView 的一个新属性

643
00:22:16,266 --> 00:22:18,186
二  它可以帮我们确保内容不受遮挡

644
00:22:18,186 --> 00:22:20,966
而完整显示  三  如果我们

645
00:22:20,966 --> 00:22:24,446
在 iOS 11 故事板中

646
00:22:24,446 --> 00:22:27,126
使用这项属性  只需勾选上

647
00:22:27,126 --> 00:22:28,336
复选框  系统就会自动

648
00:22:28,336 --> 00:22:31,196
帮我们升级所有相关约束条件

649
00:22:31,376 --> 00:22:33,906
谢谢大家  [掌声]  能自动升级

650
00:22:33,936 --> 00:22:35,516
也是因为旧的顶底端布局指南

651
00:22:35,516 --> 00:22:36,986
的几何架构  刚好和

652
00:22:37,426 --> 00:22:40,216
新的安全区域布局指南相

653
00:22:40,216 --> 00:22:40,656
匹配

654
00:22:40,656 --> 00:22:42,376
而最棒的一点是  这也意味着

655
00:22:42,376 --> 00:22:43,316
当我们在 Xcode 9 的 iOS 故事板里

656
00:22:43,316 --> 00:22:46,276
使用安全区域布局指南时

657
00:22:47,026 --> 00:22:47,876
我们也会确保

658
00:22:47,876 --> 00:22:49,116
你的代码在所有旧版 iOS 上也可以运行

659
00:22:49,116 --> 00:22:49,476
iOS

660
00:22:50,516 --> 00:22:53,500
[掌声]

661
00:22:56,346 --> 00:22:57,446
下面我想跟大家讲的

662
00:22:57,446 --> 00:22:58,916
这个布局方法  可以帮助大家

663
00:22:58,916 --> 00:23:00,346
根据父视图来布局我们的

664
00:22:58,916 --> 00:23:00,346
根据父视图来布局我们的

665
00:23:00,346 --> 00:23:00,966
视图

666
00:23:02,386 --> 00:23:03,466
这个方法就叫  按比例

667
00:23:03,466 --> 00:23:03,946
定位

668
00:23:04,266 --> 00:23:05,866
大致意思是  比如我们应用界面上

669
00:23:05,866 --> 00:23:07,476
有这么一张约会对象(红枣)卡片  然后

670
00:23:07,476 --> 00:23:08,906
我现在希望能把这张图片布置在

671
00:23:08,906 --> 00:23:10,316
父视图从上往下大约 70% 的

672
00:23:10,316 --> 00:23:10,826
地方

673
00:23:11,446 --> 00:23:12,196
该怎么实现这个效果

674
00:23:12,766 --> 00:23:13,516
有好几种方法可供我们

675
00:23:13,516 --> 00:23:14,046
选用

676
00:23:14,096 --> 00:23:15,726
但我今天想跟大家演示的

677
00:23:15,726 --> 00:23:17,006
是如何使用占位分隔视图 (Spacer View)

678
00:23:18,316 --> 00:23:20,096
首先拖拽出一个视图

679
00:23:20,096 --> 00:23:21,346
对象库里随便一个普通的 UIView

680
00:23:21,996 --> 00:23:23,276
对这个视图设置约束  但不进行

681
00:23:23,276 --> 00:23:23,966
渲染

682
00:23:24,556 --> 00:23:26,516
就可以用这个占位视图为框架

683
00:23:26,576 --> 00:23:28,326
把你想成比例定位的视图  布置到

684
00:23:28,326 --> 00:23:29,016
正确的位置

685
00:23:29,436 --> 00:23:31,166
这个方法同样可以应用到

686
00:23:32,076 --> 00:23:33,516
其他布局类型中

687
00:23:33,516 --> 00:23:34,406
只要成比布局就行

688
00:23:34,606 --> 00:23:36,096
这里是另一个例子

689
00:23:36,096 --> 00:23:37,186
这是一个横屏的状态

690
00:23:37,186 --> 00:23:39,836
按 1/5  2/5  和 2/5 的比例分割

691
00:23:40,126 --> 00:23:41,466
三个视图按照上述比例  分别

692
00:23:42,076 --> 00:23:42,736
居中显示

693
00:23:43,286 --> 00:23:44,146
我们现在就来看一下

694
00:23:44,146 --> 00:23:45,296
如何在界面生成器里面

695
00:23:45,296 --> 00:23:45,806
实现这些

696
00:23:57,956 --> 00:23:59,816
这里已经有一个

697
00:23:59,816 --> 00:24:00,516
基础布局了

698
00:23:59,816 --> 00:24:00,516
基础布局了

699
00:24:00,516 --> 00:24:01,826
在这个例子里  我想要定位

700
00:24:01,826 --> 00:24:03,406
布置的  是这张约会对象(红枣)卡片

701
00:24:04,166 --> 00:24:06,576
这个视图是由模态视图

702
00:24:06,576 --> 00:24:08,046
里以表单格式推入的

703
00:24:08,516 --> 00:24:09,486
我们现在把这里

704
00:24:09,486 --> 00:24:11,076
放大一点  这里

705
00:24:11,076 --> 00:24:11,966
已经有两个元素

706
00:24:11,966 --> 00:24:12,916
设置好了一些初始

707
00:24:12,916 --> 00:24:13,456
约束

708
00:24:13,456 --> 00:24:15,706
其中有一个文本标签  和一张

709
00:24:15,706 --> 00:24:16,056
图片

710
00:24:16,166 --> 00:24:17,536
我们把两项都选中  然后

711
00:24:17,536 --> 00:24:19,096
如果仔细看

712
00:24:19,386 --> 00:24:20,916
就会发现  两者的左右

713
00:24:20,916 --> 00:24:22,066
边框都是蓝色的  但是

714
00:24:22,066 --> 00:24:23,326
上下边框却是红色的

715
00:24:23,986 --> 00:24:24,826
这就意味着还有一些东西

716
00:24:24,826 --> 00:24:25,436
需要我们进一步调试

717
00:24:26,026 --> 00:24:27,046
在界面生成器的画布上

718
00:24:27,046 --> 00:24:28,296
只要我们看到红色  就有可能

719
00:24:28,296 --> 00:24:29,316
是以下两种问题

720
00:24:29,496 --> 00:24:30,386
要么是我们设置的

721
00:24:30,386 --> 00:24:31,166
约束不够多  造成了

722
00:24:31,166 --> 00:24:32,646
意义含糊  或者也可能是我们设置了

723
00:24:32,646 --> 00:24:33,286
过多的约束  导致了

724
00:24:33,286 --> 00:24:33,746
约束冲突

725
00:24:34,306 --> 00:24:35,706
我刚设置好这个视图  所以

726
00:24:35,706 --> 00:24:36,736
我知道我还没有把这些元素

727
00:24:36,736 --> 00:24:38,196
关联约束到父视图上

728
00:24:39,206 --> 00:24:40,206
我们现在就设置一下

729
00:24:40,206 --> 00:24:41,846
就用占位分隔视图

730
00:24:41,846 --> 00:24:42,366
来设置

731
00:24:42,596 --> 00:24:44,726
现在我在对象库里

732
00:24:44,726 --> 00:24:45,726
打一下 UIView

733
00:24:46,036 --> 00:24:47,976
把视图拖拽到想要布置的位置

734
00:24:51,196 --> 00:24:53,586
我们大致调整一下

735
00:24:53,586 --> 00:24:55,136
调成它在画布上差不多该

736
00:24:55,816 --> 00:24:57,216
显示的样子

737
00:24:57,216 --> 00:24:58,586
接下来  做一些设置工作

738
00:24:59,116 --> 00:25:00,066
首先我要把这个视图标记为隐藏

739
00:24:59,116 --> 00:25:00,066
首先我要把这个视图标记为隐藏

740
00:25:00,326 --> 00:25:01,536
设置后  这个视图会在

741
00:25:01,536 --> 00:25:03,666
运行时参与布局  但我们并不需要

742
00:25:03,666 --> 00:25:04,356
它参与绘制  这样就不用

743
00:25:04,356 --> 00:25:05,356
浪费资源去绘制这个定位用视图

744
00:25:06,366 --> 00:25:07,386
要做的另一件事

745
00:25:07,386 --> 00:25:09,186
就是在对象库里

746
00:25:09,186 --> 00:25:11,106
把它重命名为占位

747
00:25:12,116 --> 00:25:12,796
70%

748
00:25:13,386 --> 00:25:15,866
现在我们需要添加约束

749
00:25:17,106 --> 00:25:18,146
我们点击固定菜单 (Pin Menu)

750
00:25:19,266 --> 00:25:20,396
给它加一个顶端

751
00:25:20,396 --> 00:25:22,646
约束  一个左侧约束

752
00:25:22,646 --> 00:25:25,316
然后也可以再指定一个

753
00:25:25,316 --> 00:25:27,126
宽度吧  这样之后

754
00:25:27,126 --> 00:25:28,906
还可以连接其他约束

755
00:25:29,936 --> 00:25:32,006
添加上去之后  可以看到

756
00:25:32,006 --> 00:25:33,606
这个占位视图横向移动了

757
00:25:33,606 --> 00:25:34,756
但可以看到  视图的

758
00:25:34,756 --> 00:25:36,536
上下边缘线还是红色的

759
00:25:36,536 --> 00:25:37,416
那是因为我们还没有

760
00:25:37,416 --> 00:25:38,426
给它规定高度

761
00:25:38,806 --> 00:25:39,946
我们希望让这个视图的高度

762
00:25:39,946 --> 00:25:40,886
与父视图成比例  那么现在

763
00:25:40,886 --> 00:25:41,576
就去设置一下

764
00:25:41,926 --> 00:25:43,256
我来添加一个等高约束

765
00:25:43,256 --> 00:25:45,216
按住占位分隔视图  向外拖动

766
00:25:45,216 --> 00:25:48,446
拖到父视图上  在弹出框里

767
00:25:48,446 --> 00:25:50,066
选择等高约束

768
00:25:50,776 --> 00:25:53,126
现在占位视图和我的父视图

769
00:25:53,126 --> 00:25:54,966
高度相同了  但我发现

770
00:25:54,966 --> 00:25:56,526
这个界面上方还有一个导航栏

771
00:25:57,136 --> 00:25:59,856
所以其实我想要的是

772
00:25:59,856 --> 00:26:01,646
高度和...其实是要…哦对了

773
00:25:59,856 --> 00:26:01,646
高度和...其实是要…哦对了

774
00:26:01,646 --> 00:26:02,366
我们可以先去设置一下

775
00:26:02,366 --> 00:26:02,946
比例

776
00:26:03,946 --> 00:26:08,126
设好之后  问题是我这个

777
00:26:08,126 --> 00:26:09,176
的比例  还是和父视图相关的

778
00:26:09,176 --> 00:26:10,936
但我其实是希望  和安全区域相关

779
00:26:11,386 --> 00:26:13,576
一般来说  我们要调整这个

780
00:26:13,576 --> 00:26:14,796
还需要重新编写一下约束

781
00:26:15,006 --> 00:26:16,136
但我想给大家看个新方法

782
00:26:16,346 --> 00:26:18,026
如果我们去到属性

783
00:26:18,026 --> 00:26:19,326
审查器  这个审查器

784
00:26:19,326 --> 00:26:21,036
很好使  然后点击

785
00:26:21,036 --> 00:26:22,786
项目 (Item)  这里现在会

786
00:26:22,786 --> 00:26:24,616
给大家列出可以接收关联约束的

787
00:26:24,616 --> 00:26:25,926
相邻项目

788
00:26:26,516 --> 00:26:31,506
[掌声]

789
00:26:32,006 --> 00:26:33,586
所以如果我点击安全区域

790
00:26:33,586 --> 00:26:35,696
视图高度就变成了安全区域高度的70%

791
00:26:36,806 --> 00:26:37,896
好了  现在我们再去对齐一下

792
00:26:37,896 --> 00:26:38,356
内容

793
00:26:38,786 --> 00:26:39,946
我们现在把这个

794
00:26:39,946 --> 00:26:41,746
"约会对象(红枣)"的文本标签  拖拽到

795
00:26:41,746 --> 00:26:43,856
按住控制键拖拽  创建

796
00:26:43,856 --> 00:26:46,896
一个连接  和占位视图的底端

797
00:26:46,896 --> 00:26:47,326
对齐

798
00:26:48,516 --> 00:26:50,096
我还希望文字能整齐地

799
00:26:50,096 --> 00:26:51,916
布局在基线上  所以这里

800
00:26:52,086 --> 00:26:53,746
我们只需再点击一下

801
00:26:53,746 --> 00:26:54,746
刚刚添加的约束

802
00:26:55,066 --> 00:26:56,426
再去属性审查器里

803
00:26:57,226 --> 00:26:59,636
然后直接在这里改一下

804
00:26:59,636 --> 00:27:00,246
属性就可以了

805
00:26:59,636 --> 00:27:00,246
属性就可以了

806
00:27:00,246 --> 00:27:01,456
这也是自动布局特别好用的

807
00:27:01,456 --> 00:27:02,506
地方之一  我们不一定

808
00:27:02,506 --> 00:27:03,416
非要底端与底端对齐

809
00:27:03,606 --> 00:27:04,596
我们还可以底端和顶端

810
00:27:04,596 --> 00:27:05,066
对齐

811
00:27:05,306 --> 00:27:06,566
或者这我们这个例子里

812
00:27:06,566 --> 00:27:07,536
鉴于我只有一行文本标签

813
00:27:07,536 --> 00:27:09,606
就可以设底端与第一基线对齐

814
00:27:09,606 --> 00:27:12,796
这样  就正好布置在父视图70%高度

815
00:27:12,796 --> 00:27:13,796
并以基线对齐

816
00:27:14,126 --> 00:27:15,056
我们在不同配置环境下

817
00:27:15,056 --> 00:27:15,836
测试一下

818
00:27:15,836 --> 00:27:18,596
比如 iPhone 7+ 竖屏

819
00:27:19,696 --> 00:27:21,066
在设备栏可选

820
00:27:21,426 --> 00:27:22,846
再试试横屏

821
00:27:22,846 --> 00:27:25,306
也还是在 70% 的位置

822
00:27:25,306 --> 00:27:25,976
正是我想要的效果

823
00:27:34,816 --> 00:27:35,726
所以如果我们需要

824
00:27:35,726 --> 00:27:38,106
在界面生成器里

825
00:27:38,106 --> 00:27:40,926
实现按比例定位  请用占位

826
00:27:40,926 --> 00:27:43,156
分隔视图  来帮助我们定位

827
00:27:43,776 --> 00:27:46,296
不要忘了把这些占位视图

828
00:27:46,296 --> 00:27:48,156
标记为隐藏  这样它们

829
00:27:48,156 --> 00:27:50,186
才可以不参与渲染

830
00:27:50,186 --> 00:27:53,036
但依然可以在布局时帮助我们

831
00:27:53,036 --> 00:27:53,956
定位其他页面内容

832
00:27:55,346 --> 00:27:56,646
如果有人是用编程方式

833
00:27:56,646 --> 00:27:59,436
设置布局  可以去用一个叫作

834
00:27:59,436 --> 00:28:01,586
UILayoutGuide (UI布局指南)的东西

835
00:27:59,436 --> 00:28:01,586
UILayoutGuide (UI布局指南)的东西

836
00:28:01,586 --> 00:28:03,506
在编程方式里  可以把

837
00:28:03,686 --> 00:28:05,406
这个布局指南当作占位视图

838
00:28:05,406 --> 00:28:06,746
来使用

839
00:28:07,316 --> 00:28:10,196
下一项  我要给大家介绍

840
00:28:10,196 --> 00:28:11,556
另一种我们可能会使用

841
00:28:11,556 --> 00:28:12,106
的布局方法

842
00:28:12,396 --> 00:28:13,386
我们继续以

843
00:28:13,386 --> 00:28:14,926
约会(找红枣)软件为例子

844
00:28:14,926 --> 00:28:16,416
给大家演示一个自适应布局

845
00:28:16,416 --> 00:28:19,106
这里在竖屏状态下是四乘四的

846
00:28:19,106 --> 00:28:20,856
网格  可供用户选择

847
00:28:20,856 --> 00:28:21,766
文本标签设置在上述网格

848
00:28:21,766 --> 00:28:22,056
下方

849
00:28:23,316 --> 00:28:24,816
而当我旋转手机之后

850
00:28:24,816 --> 00:28:26,506
显示界面会变得

851
00:28:26,506 --> 00:28:27,296
不太一样

852
00:28:27,296 --> 00:28:28,026
还是会以四乘四网格显示出

853
00:28:28,026 --> 00:28:30,256
约会对象(红枣)  但在

854
00:28:30,256 --> 00:28:31,516
右侧还会有一个文本视图

855
00:28:31,516 --> 00:28:31,996
区域

856
00:28:32,976 --> 00:28:34,386
好了  现在让我们看一下如何在

857
00:28:34,386 --> 00:28:35,516
界面生成器里  用堆栈视图

858
00:28:35,516 --> 00:28:37,366
实现自适应布局

859
00:28:50,786 --> 00:28:52,446
好了  这就是我的

860
00:28:52,576 --> 00:28:55,176
约会对象(红枣)故事板

861
00:28:55,176 --> 00:28:56,206
这个网格的初始布局已经

862
00:28:56,206 --> 00:28:57,156
差不多设置好了

863
00:28:57,156 --> 00:28:58,286
现在我要做的第一件事

864
00:28:58,286 --> 00:29:00,036
是先展开对象大纲

865
00:28:58,286 --> 00:29:00,036
是先展开对象大纲

866
00:29:00,036 --> 00:29:01,296
按住 Option 就可以

867
00:29:01,296 --> 00:29:02,476
快速展开所有对象

868
00:29:03,146 --> 00:29:04,646
我先给大家简单介绍一下

869
00:29:04,716 --> 00:29:06,636
已经设置好了什么

870
00:29:06,806 --> 00:29:08,436
我们这里是一个垂直堆栈视图

871
00:29:08,656 --> 00:29:10,206
用四条约束

872
00:29:10,206 --> 00:29:11,416
绑定到了父视图上

873
00:29:11,906 --> 00:29:14,596
内容基本上  由三行内容

874
00:29:14,596 --> 00:29:15,086
构成

875
00:29:15,416 --> 00:29:17,226
第一行是一个

876
00:29:17,226 --> 00:29:19,066
两张图片的嵌套水平堆栈

877
00:29:19,066 --> 00:29:19,536
视图

878
00:29:20,356 --> 00:29:21,876
第二行也是一个

879
00:29:21,876 --> 00:29:23,826
两张图片的嵌套堆栈视图

880
00:29:24,136 --> 00:29:25,326
之后的第三行  是一个

881
00:29:25,326 --> 00:29:25,686
文本标签

882
00:29:25,686 --> 00:29:27,146
我们可以看到

883
00:29:27,146 --> 00:29:28,086
所有内容都是

884
00:29:28,086 --> 00:29:29,956
差不多相同大小  那是因为

885
00:29:29,956 --> 00:29:31,576
堆栈视图有一些很棒的属性

886
00:29:31,576 --> 00:29:32,796
比如对齐方式  子视图分布

887
00:29:32,796 --> 00:29:33,466
和子视图间距

888
00:29:33,916 --> 00:29:35,326
还有很多可选项

889
00:29:35,326 --> 00:29:37,056
可以用于在堆栈视图和

890
00:29:37,056 --> 00:29:38,906
嵌套堆栈视图中配置

891
00:29:38,906 --> 00:29:39,736
我们的布局

892
00:29:40,546 --> 00:29:41,786
堆栈视图的优点

893
00:29:41,786 --> 00:29:42,716
在于它可以帮我们

894
00:29:42,716 --> 00:29:44,426
管理我们的约束条件

895
00:29:44,426 --> 00:29:45,446
所以我们需要手动添加的约束

896
00:29:45,446 --> 00:29:45,906
非常少

897
00:29:46,416 --> 00:29:47,246
如果有人想更详细地

898
00:29:47,246 --> 00:29:50,496
了解子视图分布

899
00:29:50,496 --> 00:29:52,066
和对齐方式里的其他可选项

900
00:29:52,066 --> 00:29:53,376
请务必去阅读说明文件

901
00:29:53,756 --> 00:29:54,726
现在我们的子视图间距

902
00:29:54,726 --> 00:29:55,456
设在沿垂直轴线平分

903
00:29:55,456 --> 00:29:56,456
来确保所有内容的尺寸都是合适的

904
00:29:56,456 --> 00:29:57,776
我们现在具体调整一下设置

905
00:29:57,776 --> 00:29:58,666
让布局更接近我想要的效果

906
00:29:59,816 --> 00:30:01,796
首先我们需要调整子视图间距

907
00:29:59,816 --> 00:30:01,796
首先我们需要调整子视图间距

908
00:30:02,146 --> 00:30:05,116
我现在选中全部

909
00:30:05,116 --> 00:30:06,186
按住 cmd 键并选中

910
00:30:06,186 --> 00:30:06,996
全部堆栈视图

911
00:30:07,686 --> 00:30:08,706
然后在属性审查器里

912
00:30:08,706 --> 00:30:10,096
把子视图间距属性的数值

913
00:30:10,096 --> 00:30:11,096
稍微调大一点

914
00:30:11,526 --> 00:30:12,946
设置到 30 看看

915
00:30:13,356 --> 00:30:14,776
有点太大了

916
00:30:14,956 --> 00:30:17,836
在 Xcode 9 和 iOS 11 里有个新功能

917
00:30:17,836 --> 00:30:19,676
新添了一个选项叫

918
00:30:19,676 --> 00:30:21,526
标准间距  可以让系统自动帮你

919
00:30:21,526 --> 00:30:22,106
选择间距

920
00:30:22,106 --> 00:30:24,036
我就用这个了

921
00:30:24,636 --> 00:30:26,256
希望大家还记得刚刚

922
00:30:26,256 --> 00:30:27,686
Jonathon 讲的动态

923
00:30:27,686 --> 00:30:29,436
字体  对于使用了

924
00:30:29,436 --> 00:30:30,726
文字样式的内容  请大家

925
00:30:30,726 --> 00:30:32,856
一定去看一下垂直堆栈视图的

926
00:30:32,856 --> 00:30:34,686
标准间距  然后勾选上

927
00:30:34,686 --> 00:30:35,726
基线相关

928
00:30:35,856 --> 00:30:37,116
那样会得到和动态字体一样的

929
00:30:37,116 --> 00:30:38,466
效果  和之前演示的一样

930
00:30:39,816 --> 00:30:40,966
我们现在既有图片又有

931
00:30:40,966 --> 00:30:41,986
文本标签  所以就留着

932
00:30:41,986 --> 00:30:43,726
不勾选这一项了

933
00:30:43,726 --> 00:30:45,266
下一项我希望要的效果

934
00:30:45,266 --> 00:30:46,766
是把这些图片都

935
00:30:46,976 --> 00:30:48,056
调成正方形

936
00:30:48,856 --> 00:30:49,936
也许大家看起来觉得已经很方了

937
00:30:49,936 --> 00:30:51,166
但其实真的不是  我可以证明给

938
00:30:51,166 --> 00:30:51,666
大家看

939
00:30:51,666 --> 00:30:53,206
我现在按住控制键  拖拽

940
00:30:53,206 --> 00:30:56,286
图片到自身上  然后选择

941
00:30:56,286 --> 00:30:57,446
宽高比约束

942
00:30:57,826 --> 00:30:58,866
等这个窗口弹出来

943
00:30:58,866 --> 00:31:00,406
就能看到  图片

944
00:30:58,866 --> 00:31:00,406
就能看到  图片

945
00:31:00,666 --> 00:31:03,416
其实是 193 乘 226 的

946
00:31:03,766 --> 00:31:04,976
我们现在就把这个比例设成一比一

947
00:31:09,136 --> 00:31:11,516
好了  但似乎画布上什么反应都

948
00:31:11,516 --> 00:31:11,886
没有

949
00:31:11,996 --> 00:31:13,486
画布上什么变化都没有

950
00:31:13,486 --> 00:31:15,726
而且我的宽高比还变红了

951
00:31:15,726 --> 00:31:17,376
更糟糕的是  如果我们看

952
00:31:17,376 --> 00:31:19,126
一下这里  还出现了一个

953
00:31:19,126 --> 00:31:19,756
小红点

954
00:31:19,756 --> 00:31:21,016
我们点击一下这个小红点

955
00:31:21,016 --> 00:31:21,756
可以看到这里有好多

956
00:31:21,756 --> 00:31:22,646
冲突的约束条件

957
00:31:22,916 --> 00:31:23,366
发生了什么

958
00:31:23,936 --> 00:31:25,356
我们一起回溯  排查一下哪里

959
00:31:25,356 --> 00:31:25,876
出错了

960
00:31:25,876 --> 00:31:27,106
我会给  我会向大家

961
00:31:27,106 --> 00:31:28,406
展示一个如何着手解决

962
00:31:28,406 --> 00:31:29,376
画布上这种报错问题的

963
00:31:29,886 --> 00:31:30,616
小技巧

964
00:31:31,066 --> 00:31:33,256
这里我们设置了宽高比

965
00:31:33,256 --> 00:31:34,336
首先我希望

966
00:31:34,336 --> 00:31:35,966
能够确认  到底是不是

967
00:31:35,966 --> 00:31:37,136
宽高比导致了报错

968
00:31:37,926 --> 00:31:39,416
所以我现在就去

969
00:31:39,416 --> 00:31:41,376
约束的属性审查器

970
00:31:41,376 --> 00:31:43,436
找到安装按钮  然后

971
00:31:43,436 --> 00:31:45,256
在打开和关闭两者间切换一下

972
00:31:45,256 --> 00:31:45,876
看看会怎样

973
00:31:46,386 --> 00:31:48,836
好了  我切换到关闭  这些

974
00:31:48,966 --> 00:31:49,836
报错就消失了

975
00:31:49,836 --> 00:31:51,776
切换到打开时  它们

976
00:31:51,776 --> 00:31:52,346
又出现了

977
00:31:52,346 --> 00:31:53,476
但画布上还是没有任何

978
00:31:53,476 --> 00:31:55,056
变化  所以我要

979
00:31:55,056 --> 00:31:56,016
尝试的下一个策略

980
00:31:56,016 --> 00:31:57,326
就是去布局里面找找

981
00:31:57,326 --> 00:31:57,726
问题

982
00:31:57,726 --> 00:32:00,136
我可能需要关心的

983
00:31:57,726 --> 00:32:00,136
我可能需要关心的

984
00:32:00,196 --> 00:32:01,416
问题  是周围这些

985
00:32:01,416 --> 00:32:03,136
其他的被标红的约束

986
00:32:03,136 --> 00:32:04,566
我们先从这一个由堆栈

987
00:32:04,566 --> 00:32:05,776
最外层视图到顶端的

988
00:32:05,776 --> 00:32:07,136
约束着手

989
00:32:07,646 --> 00:32:10,656
如果我们卸载这个约束

990
00:32:10,896 --> 00:32:12,876
报错消失了  但子视图就

991
00:32:12,876 --> 00:32:14,216
无法平分铺满父视图了

992
00:32:14,566 --> 00:32:16,516
不过图片倒是都变成了

993
00:32:16,516 --> 00:32:17,066
正方形

994
00:32:17,616 --> 00:32:18,726
这个效果挺有意思的

995
00:32:19,156 --> 00:32:20,696
我们再去试试其他的

996
00:32:20,956 --> 00:32:22,096
比如我现在卸载一下这个

997
00:32:23,026 --> 00:32:24,576
然后再卸载一下

998
00:32:24,576 --> 00:32:25,836
右侧约束

999
00:32:26,376 --> 00:32:28,556
可以看到  和刚刚一样

1000
00:32:28,556 --> 00:32:29,996
图片变正方形了  但这次

1001
00:32:29,996 --> 00:32:31,066
显示也超出了父视图

1002
00:32:31,916 --> 00:32:33,276
所以这里的问题其实是

1003
00:32:33,276 --> 00:32:35,186
我们无法同时满足

1004
00:32:35,186 --> 00:32:38,516
宽高比约束

1005
00:32:38,516 --> 00:32:40,426
和在堆栈视图上沿垂直线

1006
00:32:40,426 --> 00:32:41,896
平分的约束  然后还要让它们

1007
00:32:41,986 --> 00:32:42,926
能装进父视图里

1008
00:32:43,486 --> 00:32:44,996
但幸运的是  这个例子里

1009
00:32:44,996 --> 00:32:45,726
我不需要铺满整个

1010
00:32:45,726 --> 00:32:46,276
父视图

1011
00:32:46,506 --> 00:32:47,846
我其实只希望图片

1012
00:32:47,846 --> 00:32:49,226
能够置顶显示

1013
00:32:49,226 --> 00:32:50,766
所以我只需卸载这个约束

1014
00:32:50,766 --> 00:32:51,726
这样就差不多了

1015
00:32:52,266 --> 00:32:53,346
但假设我们要旋转屏幕

1016
00:32:53,346 --> 00:32:54,416
横屏显示时  显示高度会

1017
00:32:54,416 --> 00:32:55,826
变小  而如果我还保留

1018
00:32:55,826 --> 00:32:57,556
这个约束  那么还是会超出父视图

1019
00:32:57,856 --> 00:32:58,776
所以我现在要做的就是

1020
00:32:58,776 --> 00:32:59,716
先不卸载这个约束

1021
00:33:00,216 --> 00:33:01,606
而是把它设置成大于或

1022
00:33:01,606 --> 00:33:03,836
等于  这差不多就是

1023
00:33:03,836 --> 00:33:05,296
我想要的竖屏效果了

1024
00:33:06,356 --> 00:33:09,096
我们现在再回到

1025
00:33:09,096 --> 00:33:11,686
对象大纲  现在我们要考虑

1026
00:33:11,686 --> 00:33:12,766
的是横屏显示的布局

1027
00:33:13,876 --> 00:33:15,396
我现在在设备栏里点击一下

1028
00:33:15,396 --> 00:33:18,416
横屏  可以看到我们还有

1029
00:33:18,416 --> 00:33:19,716
一些调整工作需要做

1030
00:33:20,056 --> 00:33:22,436
首先要做的一点

1031
00:33:22,986 --> 00:33:24,536
我们希望能更接近

1032
00:33:24,536 --> 00:33:26,566
我们之前设想的布局

1033
00:33:26,566 --> 00:33:27,936
如果大家还记得  这个

1034
00:33:27,936 --> 00:33:28,706
Top Dates 的文本标签得

1035
00:33:28,706 --> 00:33:29,946
弄没  然后还需要

1036
00:33:29,946 --> 00:33:31,466
在右侧空出一块地方放一个

1037
00:33:31,466 --> 00:33:32,246
文本视图

1038
00:33:32,946 --> 00:33:34,366
我们先来看一下怎么处理

1039
00:33:34,426 --> 00:33:34,926
这个文本标签

1040
00:33:35,426 --> 00:33:38,076
点击一下这个标签

1041
00:33:38,076 --> 00:33:40,046
堆栈视图里  有一个我们

1042
00:33:40,046 --> 00:33:41,056
可以用的属性  隐藏

1043
00:33:41,056 --> 00:33:41,406
属性

1044
00:33:41,556 --> 00:33:43,046
堆栈视图里很适合使用

1045
00:33:43,146 --> 00:33:44,996
隐藏的子视图  因为堆栈视图

1046
00:33:44,996 --> 00:33:46,786
可以在布局时自动收起子视图

1047
00:33:46,786 --> 00:33:47,796
但还会将它们保留在

1048
00:33:47,796 --> 00:33:48,506
子视图组里

1049
00:33:49,936 --> 00:33:51,366
我们找到隐藏属性

1050
00:33:51,366 --> 00:33:53,016
Xcode 9 还提供了一项新功能

1051
00:33:53,016 --> 00:33:55,036
我们还可以根据不同屏幕

1052
00:33:55,036 --> 00:33:56,236
尺寸方向 (Size Class)  选择显示或隐藏

1053
00:33:56,236 --> 00:33:56,946
在这里可以看到

1054
00:33:57,516 --> 00:34:01,406
[掌声]

1055
00:33:57,516 --> 00:34:01,406
[掌声]

1056
00:34:01,906 --> 00:34:02,856
这里有个展开按钮  更方便

1057
00:34:02,856 --> 00:34:03,306
设置

1058
00:34:03,306 --> 00:34:04,566
点击打开这个窗口

1059
00:34:05,136 --> 00:34:07,056
选择任何宽度

1060
00:34:07,596 --> 00:34:09,505
针对我们的情况  因为

1061
00:34:09,505 --> 00:34:11,656
是横屏  选择紧凑型 (Compact)

1062
00:34:11,926 --> 00:34:13,516
也可以通过底部的

1063
00:34:13,516 --> 00:34:14,636
设备栏再次进行确认

1064
00:34:14,686 --> 00:34:16,416
我们现在设置的是横屏的

1065
00:34:16,416 --> 00:34:17,585
iPhone 7+  普通型

1066
00:34:17,585 --> 00:34:18,426
宽度  和紧凑型高度

1067
00:34:18,466 --> 00:34:20,176
现在  选好任何宽度加紧凑型高度

1068
00:34:20,176 --> 00:34:21,406
我来添加一个差异项

1069
00:34:22,096 --> 00:34:23,436
并标记为隐藏  好了

1070
00:34:24,376 --> 00:34:25,545
现在我们再返回

1071
00:34:25,545 --> 00:34:26,936
竖屏  标签又出现了

1072
00:34:28,146 --> 00:34:29,525
回到横屏状态

1073
00:34:29,525 --> 00:34:29,926
又消失了

1074
00:34:30,585 --> 00:34:32,646
好了  现在就剩下添加文本

1075
00:34:32,686 --> 00:34:33,005
视图了

1076
00:34:33,186 --> 00:34:34,045
为了添加这个视图

1077
00:34:34,045 --> 00:34:36,226
我们需要在外面包一个水平视图

1078
00:34:36,275 --> 00:34:38,005
得添加一个水平的

1079
00:34:38,005 --> 00:34:39,516
堆栈视图  才能装载

1080
00:34:39,516 --> 00:34:40,636
一个文本视图

1081
00:34:40,996 --> 00:34:41,976
所以我现在选中

1082
00:34:41,976 --> 00:34:42,556
全部这些

1083
00:34:43,106 --> 00:34:45,226
然后在对象大纲里

1084
00:34:45,226 --> 00:34:46,946
打一下 text view

1085
00:34:47,446 --> 00:34:48,706
好添加到画布上

1086
00:34:49,076 --> 00:34:50,476
我们现在就用插入

1087
00:34:50,476 --> 00:34:53,186
堆栈视图按钮添加一个

1088
00:34:53,186 --> 00:34:54,485
外围视图

1089
00:34:54,886 --> 00:34:56,416
这就新建了一个堆栈视图

1090
00:34:56,666 --> 00:34:58,516
我们还得把这个视图切换到

1091
00:34:58,516 --> 00:34:59,686
这个视图是垂直的

1092
00:34:59,686 --> 00:35:00,636
我们得把它切换成

1093
00:34:59,686 --> 00:35:00,636
我们得把它切换成

1094
00:35:00,636 --> 00:35:01,266
水平的

1095
00:35:02,696 --> 00:35:04,216
所有元素都缩小了

1096
00:35:04,216 --> 00:35:05,606
是因为我把东西都插入到

1097
00:35:05,606 --> 00:35:06,906
新视图中了  所以就取消了

1098
00:35:06,906 --> 00:35:07,886
它们和父视图相关的所有约束

1099
00:35:08,516 --> 00:35:10,426
我们把这个调成

1100
00:35:10,426 --> 00:35:11,236
水平的

1101
00:35:11,506 --> 00:35:13,296
把我们刚刚新建的

1102
00:35:13,296 --> 00:35:14,376
那个外围视图设置

1103
00:35:14,376 --> 00:35:15,676
成标准间距

1104
00:35:16,096 --> 00:35:19,896
然后就可以添加这个新的文本

1105
00:35:19,896 --> 00:35:20,146
视图了

1106
00:35:20,336 --> 00:35:22,466
让我们把这个拖拽进来

1107
00:35:23,796 --> 00:35:24,086
添加

1108
00:35:24,086 --> 00:35:24,656
好了

1109
00:35:25,136 --> 00:35:26,406
然后还需要重新约束一下

1110
00:35:26,406 --> 00:35:27,906
外围这个视图  把它约束到

1111
00:35:27,906 --> 00:35:29,176
父视图上

1112
00:35:29,546 --> 00:35:30,816
我们再回到

1113
00:35:30,816 --> 00:35:35,266
固定菜单  设置  10，10，10，10 

1114
00:35:35,856 --> 00:35:38,496
还有一个最底端的

1115
00:35:38,496 --> 00:35:40,006
约束  如果大家还记得

1116
00:35:40,456 --> 00:35:43,106
我把这里放大一下  设置成

1117
00:35:43,106 --> 00:35:45,706
大于或等于

1118
00:35:45,966 --> 00:35:49,026
好了  这就是我想要的横屏

1119
00:35:49,026 --> 00:35:49,606
效果了

1120
00:35:49,606 --> 00:35:51,386
现在我们切换回竖屏

1121
00:35:52,076 --> 00:35:56,086
再重复一下类似的过程

1122
00:35:56,086 --> 00:35:57,886
让这个文本视图根据屏幕尺寸大小

1123
00:35:57,886 --> 00:35:58,466
隐藏

1124
00:35:58,576 --> 00:36:00,626
点击一下文本视图

1125
00:35:58,576 --> 00:36:00,626
点击一下文本视图

1126
00:36:00,626 --> 00:36:02,326
再找出隐藏菜单

1127
00:36:02,326 --> 00:36:02,976
添加一个差异项

1128
00:36:06,576 --> 00:36:09,556
设置任何宽度  普通型高度

1129
00:36:09,556 --> 00:36:11,736
然后标记为隐藏

1130
00:36:11,736 --> 00:36:14,606
现在就达成了我们最终想要的效果

1131
00:36:15,516 --> 00:36:21,500
[掌声]

1132
00:36:27,006 --> 00:36:28,146
总结一下  对于我们所有的布局

1133
00:36:28,146 --> 00:36:29,956
能用堆栈视图就用

1134
00:36:30,316 --> 00:36:32,066
对齐方式  子视图分布

1135
00:36:32,316 --> 00:36:32,866
子视图间距

1136
00:36:32,866 --> 00:36:33,716
这几项属性非常

1137
00:36:33,716 --> 00:36:34,686
有用  还包括

1138
00:36:34,686 --> 00:36:35,976
嵌套

1139
00:36:38,466 --> 00:36:39,876
只需添加少数几条约束

1140
00:36:39,876 --> 00:36:41,866
唯一需要注意的是  要按比例

1141
00:36:41,866 --> 00:36:42,856
布置  需要添加宽高比

1142
00:36:42,856 --> 00:36:43,466
约束

1143
00:36:43,466 --> 00:36:44,306
所以如果有  比如

1144
00:36:44,306 --> 00:36:46,366
按比例布局的需求  其实只

1145
00:36:46,366 --> 00:36:48,766
需要手动添加很少几个约束

1146
00:36:48,766 --> 00:36:49,576
就可以达到所需的额外

1147
00:36:49,576 --> 00:36:50,126
效果

1148
00:36:50,676 --> 00:36:55,426
Xcode 9 里的隐藏属性可以根据

1149
00:36:55,426 --> 00:36:57,076
屏幕大小尺寸设置开关  非常

1150
00:36:57,076 --> 00:36:57,386
方便

1151
00:36:57,386 --> 00:36:59,826
大家都可以去尝试一下

1152
00:36:59,826 --> 00:37:01,026
尤其和堆栈视图配合使用  效果杰出

1153
00:36:59,826 --> 00:37:01,026
尤其和堆栈视图配合使用  效果杰出

1154
00:37:01,476 --> 00:37:03,006
因为堆栈视图会自动收起

1155
00:37:03,296 --> 00:37:04,116
隐藏的子视图

1156
00:37:04,866 --> 00:37:07,276
而最好的一点是  根据屏幕尺寸大小

1157
00:37:07,336 --> 00:37:09,326
隐藏的属性  可自动应用在

1158
00:37:09,326 --> 00:37:10,376
所有旧版代码上

1159
00:37:11,516 --> 00:37:16,896
[掌声]

1160
00:37:17,396 --> 00:37:21,316
总结一下  我们今天一共展示了

1161
00:37:21,316 --> 00:37:22,776
六项内容  大家学会

1162
00:37:22,776 --> 00:37:24,186
这六项新技术  就可以更好地

1163
00:37:24,186 --> 00:37:25,306
完善各位在开发的应用

1164
00:37:25,306 --> 00:37:25,766
程序

1165
00:37:26,046 --> 00:37:28,036
我们非常期盼着能看到各位的应用成果

1166
00:37:28,836 --> 00:37:30,716
我们今天看到了一些

1167
00:37:30,806 --> 00:37:32,346
技术  可以帮助我们在

1168
00:37:32,346 --> 00:37:33,876
运行时进行动态布局

1169
00:37:34,836 --> 00:37:36,066
比方说  动态字体

1170
00:37:36,296 --> 00:37:37,696
还看到了布局技术

1171
00:37:37,696 --> 00:37:38,986
可以帮助我们调整内容显示

1172
00:37:38,986 --> 00:37:40,826
呈现更棒的显示效果

1173
00:37:41,106 --> 00:37:43,456
让内容不受遮挡  还可以进行自适应

1174
00:37:43,456 --> 00:37:43,756
布局

1175
00:37:44,526 --> 00:37:45,626
更多详细信息  大家可以

1176
00:37:45,626 --> 00:37:46,536
去这个网址查看

1177
00:37:46,596 --> 00:37:48,246
developerapple.com

1178
00:37:49,656 --> 00:37:51,116
如果大家对动态字体感兴趣

1179
00:37:51,116 --> 00:37:52,136
想了解更多相关信息  也可以

1180
00:37:52,136 --> 00:37:54,136
去听一下今天下午的那场演讲

1181
00:37:54,316 --> 00:37:55,426
这里还有一些往期相关演讲的

1182
00:37:55,426 --> 00:37:55,816
链接

1183
00:37:55,816 --> 00:37:57,976
祝大家在 WWDC 过得愉快
