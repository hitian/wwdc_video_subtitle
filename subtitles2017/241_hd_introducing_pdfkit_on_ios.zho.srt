1
00:00:07,516 --> 00:00:18,500
[掌声]

2
00:00:20,276 --> 00:00:20,966
&gt;&gt; 上午好

3
00:00:21,016 --> 00:00:22,226
[掌声]

4
00:00:22,226 --> 00:00:22,826
太棒了

5
00:00:23,126 --> 00:00:24,216
非常感谢

6
00:00:25,256 --> 00:00:27,136
那么  欢迎参加今天的讲坛

7
00:00:27,346 --> 00:00:29,226
对 iOS 版 PDFKit 的介绍

8
00:00:29,886 --> 00:00:31,206
过去这 12 个月里

9
00:00:31,206 --> 00:00:32,566
我们做了许多改动

10
00:00:32,566 --> 00:00:34,126
我们特别激动地想让大家

11
00:00:34,126 --> 00:00:35,186
看到所有的改动

12
00:00:35,186 --> 00:00:35,906
所有的重大改进

13
00:00:36,546 --> 00:00:37,886
但在开始前

14
00:00:37,886 --> 00:00:38,726
先介绍一下自己

15
00:00:38,756 --> 00:00:39,786
我叫 Jeremy Bridon

16
00:00:39,786 --> 00:00:40,926
是 Apple 的软件工程师

17
00:00:40,926 --> 00:00:42,326
负责核心图形的工作

18
00:00:42,366 --> 00:00:42,696
然后

19
00:00:42,926 --> 00:00:44,256
&gt;&gt; 我是 Nicki Brower

20
00:00:44,256 --> 00:00:45,616
也是 Apple 的软件工程师

21
00:00:45,876 --> 00:00:46,276
&gt;&gt; 真棒

22
00:00:47,606 --> 00:00:47,926
好

23
00:00:48,346 --> 00:00:49,456
今天我们有

24
00:00:49,456 --> 00:00:50,566
很多东西想讲

25
00:00:50,566 --> 00:00:51,326
不过首先要讲的

26
00:00:51,326 --> 00:00:52,956
还是 PDF 文件格式

27
00:00:52,956 --> 00:00:53,516
本身

28
00:00:54,006 --> 00:00:55,396
然后我们会

29
00:00:55,396 --> 00:00:56,826
留些时间讨论一下

30
00:00:57,116 --> 00:00:59,216
整个框架  接着

31
00:00:59,216 --> 00:01:00,526
讨论一下文档页面

32
00:00:59,216 --> 00:01:00,526
讨论一下文档页面

33
00:01:00,526 --> 00:01:02,256
和这个框架

34
00:01:02,256 --> 00:01:02,626
用到的 annotation 模型

35
00:01:03,146 --> 00:01:04,556
最后我们会深入地

36
00:01:04,556 --> 00:01:06,016
讲一下 annotation

37
00:01:06,406 --> 00:01:07,666
那么  annotation 是我们

38
00:01:07,666 --> 00:01:09,016
在今年改动最多的一块

39
00:01:09,016 --> 00:01:10,016
听取了像你们一样的

40
00:01:10,016 --> 00:01:10,986
开发者的很多意见

41
00:01:11,256 --> 00:01:12,396
所以在今年

42
00:01:12,396 --> 00:01:13,766
我们想要多花些心思

43
00:01:13,766 --> 00:01:14,386
好好解释一下这部分

44
00:01:15,196 --> 00:01:17,196
最后为了各位开发者们

45
00:01:17,196 --> 00:01:18,326
不论是老手还是新手

46
00:01:18,326 --> 00:01:19,886
我们会讨论一下最佳实践

47
00:01:19,926 --> 00:01:21,276
也就是我们建议大家使用的做法

48
00:01:22,126 --> 00:01:22,496
好

49
00:01:23,526 --> 00:01:24,976
让我们先来聊一下

50
00:01:24,976 --> 00:01:27,896
PDF 文件格式的规范说明

51
00:01:28,136 --> 00:01:30,446
1300 页根本没法

52
00:01:30,446 --> 00:01:32,516
让人看完和弄懂

53
00:01:32,516 --> 00:01:33,786
PDF 文件格式的原理

54
00:01:33,786 --> 00:01:35,436
对吧大家都是应用开发者

55
00:01:35,436 --> 00:01:36,266
我们希望大家不必为

56
00:01:36,346 --> 00:01:37,906
细致入微的规范操心

57
00:01:37,906 --> 00:01:39,486
照样能够开发出

58
00:01:39,566 --> 00:01:40,476
厉害的应用来

59
00:01:41,036 --> 00:01:42,236
于是我们就设计了

60
00:01:42,236 --> 00:01:43,526
一套出色的框架

61
00:01:43,526 --> 00:01:45,606
让大家不用读完那些规范

62
00:01:45,606 --> 00:01:46,686
就能发挥出 PDF 的强大力量

63
00:01:47,136 --> 00:01:48,376
我们全读完了

64
00:01:48,376 --> 00:01:50,026
所以大家就不用读了

65
00:01:50,446 --> 00:01:51,706
那么首先

66
00:01:51,706 --> 00:01:52,096
为什么要用 PDF

67
00:01:52,176 --> 00:01:53,946
这么说好了

68
00:01:53,946 --> 00:01:55,226
PDF 是种通用的商务格式

69
00:01:55,416 --> 00:01:57,106
它的使用很广泛

70
00:01:57,106 --> 00:01:58,666
医疗界  金融界  政府

71
00:01:58,766 --> 00:02:01,086
商务都有应用

72
00:01:58,766 --> 00:02:01,086
商务都有应用

73
00:02:01,086 --> 00:02:02,136
PDF 如此普及是因为

74
00:02:02,136 --> 00:02:04,076
它确实有些很出色的特性

75
00:02:04,076 --> 00:02:05,906
比如可靠的加密功能

76
00:02:06,006 --> 00:02:07,656
还有灵活多变的权限模型

77
00:02:07,956 --> 00:02:09,036
这些确实出色的地方

78
00:02:09,036 --> 00:02:10,205
对各位开发者来说

79
00:02:10,205 --> 00:02:12,076
十分适用  也能满足

80
00:02:12,076 --> 00:02:13,396
商务需要

81
00:02:14,166 --> 00:02:15,626
PDF 还有一个

82
00:02:15,626 --> 00:02:17,176
很厉害的地方

83
00:02:17,176 --> 00:02:17,536
就是它的交互模型

84
00:02:17,616 --> 00:02:19,056
对吧  它不只是一份

85
00:02:19,096 --> 00:02:20,466
静态文档打印出来

86
00:02:20,466 --> 00:02:21,106
就被你忘在一边

87
00:02:21,106 --> 00:02:22,826
它的电子版文档

88
00:02:22,826 --> 00:02:24,606
可以做到全面的交互

89
00:02:24,606 --> 00:02:25,886
所以我要向大家

90
00:02:25,886 --> 00:02:26,906
介绍几款工具让大家

91
00:02:26,906 --> 00:02:28,346
能在我们的平台上

92
00:02:28,346 --> 00:02:29,016
做到与 PDF 文档的交互

93
00:02:29,826 --> 00:02:31,706
当然如果要做

94
00:02:31,706 --> 00:02:32,766
PDF 文档的交互

95
00:02:32,876 --> 00:02:34,326
最棒的效果就是

96
00:02:34,326 --> 00:02:35,506
电子版是什么样

97
00:02:35,506 --> 00:02:37,006
印刷成实体版后

98
00:02:37,006 --> 00:02:37,726
还是什么样

99
00:02:38,186 --> 00:02:39,926
但是当中涉及的规格

100
00:02:39,926 --> 00:02:41,416
实在太复杂还有

101
00:02:41,416 --> 00:02:42,506
很多细节要考虑

102
00:02:42,766 --> 00:02:44,356
如今我们要如何

103
00:02:44,356 --> 00:02:45,056
处理这些问题呢

104
00:02:45,446 --> 00:02:45,776
Nicki

105
00:02:46,566 --> 00:02:48,266
&gt;&gt; 好的

106
00:02:48,516 --> 00:02:49,636
所以我们很看重 PDF

107
00:02:49,636 --> 00:02:51,226
希望能把它

108
00:02:51,226 --> 00:02:51,996
涵盖在我们的应用中

109
00:02:52,336 --> 00:02:52,936
那要怎么做呢

110
00:02:53,596 --> 00:02:54,886
我们已经为大家

111
00:02:54,886 --> 00:02:56,356
做好了一套解决方案

112
00:02:56,356 --> 00:02:57,496
而且是套比较底层的方案

113
00:02:57,496 --> 00:02:58,996
用的是 CoreGraphics PDF 框架

114
00:02:59,586 --> 00:03:00,756
这套框架很了不起

115
00:02:59,586 --> 00:03:00,756
这套框架很了不起

116
00:03:00,756 --> 00:03:02,016
因为它有一套基于 PDF 规格的

117
00:03:02,016 --> 00:03:03,366
一对一绘制模型

118
00:03:03,856 --> 00:03:05,556
能让你读写和

119
00:03:05,556 --> 00:03:07,736
编辑文档它还有

120
00:03:07,736 --> 00:03:09,146
PDF 压制器

121
00:03:09,146 --> 00:03:10,156
PDF 渲染器

122
00:03:10,156 --> 00:03:10,736
不用你自己创建

123
00:03:11,476 --> 00:03:12,486
不过它也有

124
00:03:12,486 --> 00:03:12,716
一些局限

125
00:03:13,186 --> 00:03:14,406
它不含任何

126
00:03:14,406 --> 00:03:15,926
AppKit 基元

127
00:03:15,926 --> 00:03:17,076
这意味着你没法

128
00:03:17,076 --> 00:03:18,176
与文档实时交互

129
00:03:18,676 --> 00:03:20,116
意味着不支持文本选取

130
00:03:20,316 --> 00:03:22,346
不支持搜索结果高亮

131
00:03:22,346 --> 00:03:23,586
不支持 annotation 交互

132
00:03:23,586 --> 00:03:24,886
也不提供任何

133
00:03:24,886 --> 00:03:25,856
可访问性支持

134
00:03:26,216 --> 00:03:27,946
这时候就要靠

135
00:03:27,946 --> 00:03:28,166
PDFKit 了

136
00:03:28,616 --> 00:03:30,516
所以 PDFKit 的构建基于

137
00:03:30,516 --> 00:03:32,006
CoreGraphics 框架

138
00:03:32,006 --> 00:03:33,936
但它同时整合了 AppKit

139
00:03:33,936 --> 00:03:35,106
可以让你与文档

140
00:03:35,106 --> 00:03:35,596
进行实时互动

141
00:03:36,086 --> 00:03:37,926
然后在今年我们在针对

142
00:03:37,926 --> 00:03:40,166
iOS 平台开发不光是 AppKit

143
00:03:40,296 --> 00:03:41,356
也包括 UIKit

144
00:03:41,756 --> 00:03:43,326
所以现在你能更轻松地

145
00:03:43,326 --> 00:03:45,456
打开修改绘制 PDF 文档

146
00:03:45,456 --> 00:03:46,576
而且还能

147
00:03:46,576 --> 00:03:47,226
添加交互

148
00:03:47,226 --> 00:03:48,806
你可以选取文本

149
00:03:48,806 --> 00:03:49,906
可以与 annotation 交互

150
00:03:50,016 --> 00:03:51,776
我还想特别指出

151
00:03:51,776 --> 00:03:53,836
在今年我们下了

152
00:03:53,836 --> 00:03:54,836
很大功夫来改进

153
00:03:54,836 --> 00:03:55,836
可访问性支持

154
00:03:56,426 --> 00:03:58,346
所以只要使用 PDFKit

155
00:03:58,346 --> 00:04:00,516
就能做到文本朗读文本提取

156
00:03:58,346 --> 00:04:00,516
就能做到文本朗读文本提取

157
00:04:00,786 --> 00:04:01,956
能够填写表格

158
00:04:01,956 --> 00:04:03,336
全部是免费功能

159
00:04:04,696 --> 00:04:05,236
好

160
00:04:05,236 --> 00:04:06,016
我们再来看一下

161
00:04:06,016 --> 00:04:06,976
PDFKit 现在的进展

162
00:04:09,876 --> 00:04:11,496
在 Mac 上可以看到

163
00:04:11,496 --> 00:04:13,246
Preview 和 Safari 都有用到它

164
00:04:13,246 --> 00:04:14,846
这也是我们的主要客户

165
00:04:14,846 --> 00:04:16,166
但在各种平台上

166
00:04:16,166 --> 00:04:16,406
都有我们的身影

167
00:04:16,836 --> 00:04:18,946
我刚才就提到了 iOS

168
00:04:18,995 --> 00:04:20,326
大家可以看到 iBooks

169
00:04:20,326 --> 00:04:22,125
Mail 和 QuickLooks 都在用它

170
00:04:22,125 --> 00:04:23,446
希望台下各位开发的应用

171
00:04:23,446 --> 00:04:24,546
也能出现在我们的

172
00:04:24,546 --> 00:04:25,686
客户名单中

173
00:04:26,676 --> 00:04:27,856
我们再来看一下

174
00:04:27,886 --> 00:04:28,836
我们这套框架的概览

175
00:04:29,396 --> 00:04:30,706
PDFKit 里所有的分类

176
00:04:30,706 --> 00:04:32,286
全部可以分为

177
00:04:32,286 --> 00:04:32,856
三个类别

178
00:04:33,256 --> 00:04:34,716
分别是 View  Document

179
00:04:34,716 --> 00:04:36,766
和 Support 

180
00:04:36,766 --> 00:04:38,596
每一种类别都有

181
00:04:38,596 --> 00:04:39,306
自己的一组类

182
00:04:39,446 --> 00:04:41,536
比如说 View

183
00:04:41,536 --> 00:04:43,606
就有 PDFView 和 PDFThumbnailView

184
00:04:43,906 --> 00:04:45,646
鉴于我们支持不同的平台

185
00:04:45,646 --> 00:04:47,446
这意味着在 Mac OS 上

186
00:04:47,446 --> 00:04:48,656
会变成 NSView  在 iOS 上

187
00:04:48,746 --> 00:04:49,276
会变成 UIView

188
00:04:49,756 --> 00:04:51,216
对于 Document 包含的类有

189
00:04:51,216 --> 00:04:52,436
PDFDocument PDFPage

190
00:04:52,436 --> 00:04:54,086
和PDFAnnotation 我们会在

191
00:04:54,086 --> 00:04:54,676
稍后具体讲解

192
00:04:55,476 --> 00:04:56,626
我们还有一组

193
00:04:56,626 --> 00:04:57,116
归在 Support 下的类

194
00:04:57,456 --> 00:04:58,326
其中包括

195
00:04:58,326 --> 00:05:00,646
PDFSelection 用于完成我刚才提到的

196
00:04:58,326 --> 00:05:00,646
PDFSelection 用于完成我刚才提到的

197
00:05:00,646 --> 00:05:02,486
PDF 文本选取 PDFOutline 用于

198
00:05:02,486 --> 00:05:03,706
创建内容的目录

199
00:05:04,166 --> 00:05:06,906
PDFAction 用于URL跳转

200
00:05:06,906 --> 00:05:07,246
还有其他的一些

201
00:05:08,066 --> 00:05:09,706
不过实际应用时

202
00:05:09,706 --> 00:05:10,906
其实只要其中4种

203
00:05:10,906 --> 00:05:12,636
核心类别就能做到

204
00:05:12,866 --> 00:05:13,796
你想要的大部分功能

205
00:05:13,796 --> 00:05:15,326
那就是 PDFView

206
00:05:15,326 --> 00:05:16,486
PDFDocument  PDFPage

207
00:05:16,486 --> 00:05:17,000
还有 PDFAnnotation

208
00:05:18,606 --> 00:05:21,946
不过为了进一步简化

209
00:05:21,946 --> 00:05:23,646
要创建一个基础框架的应用

210
00:05:23,646 --> 00:05:25,426
来显示 PDF 和支持交互

211
00:05:25,426 --> 00:05:26,746
真正需要你熟悉的

212
00:05:26,746 --> 00:05:28,596
只有 PDFView

213
00:05:28,596 --> 00:05:29,326
下面 Jeremy 会为大家

214
00:05:29,326 --> 00:05:29,660
讲解它的用法

215
00:05:32,516 --> 00:05:40,016
[掌声]

216
00:05:40,516 --> 00:05:41,056
&gt;&gt; 讲得很棒

217
00:05:41,486 --> 00:05:42,386
非常感谢 Nicki

218
00:05:42,936 --> 00:05:43,396
好

219
00:05:43,396 --> 00:05:44,826
所以我们想要强调

220
00:05:44,966 --> 00:05:47,226
通过对 PDFKit 的很多

221
00:05:47,226 --> 00:05:48,786
简单运用你能轻而易举地

222
00:05:49,076 --> 00:05:51,166
发挥出 PDF 的强大力量

223
00:05:51,566 --> 00:05:53,176
也就是说

224
00:05:53,176 --> 00:05:53,686
我这里有个演示应用

225
00:05:53,686 --> 00:05:54,916
是一个桌面程序

226
00:05:55,196 --> 00:05:56,296
它的代码十分简单

227
00:05:56,296 --> 00:05:57,626
就是一个 View Controller

228
00:05:57,626 --> 00:05:58,866
和一个 View 就这两个

229
00:05:59,476 --> 00:06:00,506
在 View Controller 的

230
00:05:59,476 --> 00:06:00,506
在 View Controller 的

231
00:06:00,506 --> 00:06:01,606
源码中我们

232
00:06:01,606 --> 00:06:01,896
可以看到

233
00:06:01,896 --> 00:06:03,366
这里只有三段代码

234
00:06:03,366 --> 00:06:03,966
需要我们注意

235
00:06:04,586 --> 00:06:06,126
第一段是用父 bounds 为

236
00:06:06,126 --> 00:06:08,256
PDFView 创建一个实例

237
00:06:08,256 --> 00:06:09,176
我们知道这会填满

238
00:06:09,176 --> 00:06:10,146
Startup 中的相应窗口

239
00:06:10,726 --> 00:06:12,176
然后使用 autoresizingMask

240
00:06:12,176 --> 00:06:13,786
确保显示画面始终会

241
00:06:13,946 --> 00:06:15,566
填满窗口这样在我们

242
00:06:15,566 --> 00:06:16,796
调整窗口大小时显示画面

243
00:06:16,796 --> 00:06:17,326
也会一直跟着变化

244
00:06:17,856 --> 00:06:19,446
最后才是一段真正的

245
00:06:19,446 --> 00:06:21,686
PDFKit 代码

246
00:06:21,686 --> 00:06:22,846
就是 allowDragging  (允许拖动)

247
00:06:23,246 --> 00:06:24,906
也就是说

248
00:06:24,906 --> 00:06:26,786
当我打开这个程序时

249
00:06:26,786 --> 00:06:29,086
我可以拖动放下我的 PDF 文件

250
00:06:29,086 --> 00:06:31,476
比如现在就是在桌面上操作

251
00:06:31,476 --> 00:06:32,896
整个过程完全支持交互

252
00:06:32,896 --> 00:06:35,076
外观感觉性能

253
00:06:35,136 --> 00:06:37,326
都和 Preview Safari 一样

254
00:06:37,326 --> 00:06:38,786
也和其他所有的

255
00:06:38,786 --> 00:06:39,606
第一方应用一样

256
00:06:40,136 --> 00:06:41,356
这里我要说的是

257
00:06:41,466 --> 00:06:42,746
它免费支持文本选取

258
00:06:42,866 --> 00:06:44,166
它有查看器不用多说

259
00:06:44,166 --> 00:06:45,476
如果拉到目录这里

260
00:06:45,476 --> 00:06:46,286
我们可以看到

261
00:06:46,286 --> 00:06:46,776
它全面支持交互

262
00:06:46,916 --> 00:06:47,816
我可以点击一下

263
00:06:47,816 --> 00:06:48,216
就直接跳转

264
00:06:48,536 --> 00:06:49,676
我也可以右击

265
00:06:49,676 --> 00:06:51,556
然后可以改变排列格式

266
00:06:51,556 --> 00:06:52,866
也可以改变许多其他选项

267
00:06:52,866 --> 00:06:54,396
我可以复制文本搜索文本

268
00:06:55,336 --> 00:06:56,636
最厉害的是

269
00:06:56,636 --> 00:06:57,816
所有这些特性

270
00:06:57,816 --> 00:06:59,446
你们这些开发者全都能用

271
00:06:59,596 --> 00:07:00,756
大家可以通过编程

272
00:06:59,596 --> 00:07:00,756
大家可以通过编程

273
00:07:00,756 --> 00:07:01,996
驾驭这些改进

274
00:07:03,286 --> 00:07:05,766
好

275
00:07:06,326 --> 00:07:07,666
我前面对 PDFView 的介绍

276
00:07:07,666 --> 00:07:08,806
比较笼统  现在让我

277
00:07:08,866 --> 00:07:10,166
再多讲些细节

278
00:07:10,566 --> 00:07:12,596
PDFViewer 全面支持自定义

279
00:07:12,596 --> 00:07:14,186
但又简单易用

280
00:07:14,756 --> 00:07:15,546
而且我所说的

281
00:07:15,546 --> 00:07:16,756
全面支持自定义是指

282
00:07:16,756 --> 00:07:17,636
你可以改动页面布局

283
00:07:17,636 --> 00:07:19,636
方向页面内边距

284
00:07:19,916 --> 00:07:21,076
还可以改动很多其他元素

285
00:07:21,076 --> 00:07:22,536
比如缩放选项和

286
00:07:22,536 --> 00:07:23,106
缩放行为

287
00:07:23,666 --> 00:07:25,006
它也很适合进行

288
00:07:25,006 --> 00:07:26,916
视图到内容

289
00:07:26,916 --> 00:07:28,186
和内容到视图的

290
00:07:28,186 --> 00:07:28,696
坐标转换

291
00:07:29,086 --> 00:07:30,606
也就是说当你用手指

292
00:07:30,606 --> 00:07:31,866
操作 iOS  并且轻点了一下

293
00:07:32,006 --> 00:07:33,716
PDFView 时我们其实会

294
00:07:33,716 --> 00:07:35,026
对这下轻点进行转换

295
00:07:35,026 --> 00:07:35,846
找出它在文档中和

296
00:07:35,976 --> 00:07:37,606
在你触击页面中的

297
00:07:37,606 --> 00:07:38,116
精确方位

298
00:07:39,746 --> 00:07:41,496
我前面还提到

299
00:07:41,816 --> 00:07:43,346
它简单易用

300
00:07:43,346 --> 00:07:44,156
那么我给大家

301
00:07:44,156 --> 00:07:45,306
看个简单直观的例子

302
00:07:45,306 --> 00:07:46,606
看要如何将一个文档

303
00:07:46,606 --> 00:07:47,276
在 PDFView 里进行设定

304
00:07:47,596 --> 00:07:49,216
在这里我们用一个 URL

305
00:07:49,216 --> 00:07:51,546
来初始化一个文档

306
00:07:51,546 --> 00:07:52,746
然后将这个文档

307
00:07:52,746 --> 00:07:53,436
赋给 View

308
00:07:53,796 --> 00:07:55,506
其余的工作由我们代劳

309
00:07:55,956 --> 00:07:57,136
无论这个文档的

310
00:07:57,136 --> 00:07:58,486
内容是什么我们都会

311
00:07:58,486 --> 00:07:59,296
用 PDFView 显示出来

312
00:08:00,856 --> 00:08:02,596
前面又讲了

313
00:08:02,596 --> 00:08:03,416
更多的显示设置

314
00:08:03,416 --> 00:08:04,506
我想再给大家

315
00:08:04,506 --> 00:08:05,566
看几个枚举

316
00:08:05,926 --> 00:08:07,856
PDFDisplayMode 特别厉害

317
00:08:07,856 --> 00:08:09,016
你可以改变

318
00:08:09,286 --> 00:08:11,006
文档在你的 PDFView

319
00:08:11,006 --> 00:08:11,756
里面的设置

320
00:08:12,326 --> 00:08:13,636
它的第一个值

321
00:08:13,636 --> 00:08:14,976
是 singlePage 当然就是

322
00:08:14,976 --> 00:08:15,796
一次只能看一个页面

323
00:08:16,206 --> 00:08:17,446
此外还有

324
00:08:17,446 --> 00:08:19,156
singlePageContinuous 意思是

325
00:08:19,156 --> 00:08:20,826
在垂直方向上

326
00:08:20,826 --> 00:08:21,986
连续显示页面

327
00:08:22,556 --> 00:08:24,046
此外还有 twoUp 模式

328
00:08:24,046 --> 00:08:24,946
可以让你做出这种

329
00:08:24,996 --> 00:08:26,706
iBooks 的样式和效果

330
00:08:26,706 --> 00:08:27,936
当然也有

331
00:08:27,936 --> 00:08:29,496
twoUpContinuous

332
00:08:29,496 --> 00:08:29,976
选择很多

333
00:08:30,986 --> 00:08:33,366
接下来我们在 2017 年

334
00:08:33,366 --> 00:08:34,546
新推出了 PDFDisplayDirection

335
00:08:34,546 --> 00:08:35,546
所以大家在考虑

336
00:08:35,546 --> 00:08:36,746
连续显示模式时

337
00:08:36,785 --> 00:08:37,876
不必拘泥于垂直方向

338
00:08:37,876 --> 00:08:39,706
也可以使用水平方向

339
00:08:39,706 --> 00:08:40,876
当然这个特性目前

340
00:08:40,916 --> 00:08:41,765
在两个平台上都有提供

341
00:08:42,706 --> 00:08:44,746
我们今年还专门针对 iOS

342
00:08:44,746 --> 00:08:46,356
推出了 View Pagification

343
00:08:46,696 --> 00:08:47,876
也就是说我们想让大家

344
00:08:47,876 --> 00:08:49,226
在自己的应用中也能呈现

345
00:08:49,226 --> 00:08:50,866
iBooks 的外观和效果

346
00:08:50,866 --> 00:08:52,426
要做到这一点

347
00:08:52,426 --> 00:08:53,086
只要开启这个特性就好

348
00:08:53,596 --> 00:08:54,516
所以你可以将手指

349
00:08:54,516 --> 00:08:55,666
放在设备上左右滑动

350
00:08:55,666 --> 00:08:56,846
它会即时响应

351
00:08:56,846 --> 00:08:58,296
为你切换不同页面

352
00:08:58,736 --> 00:08:59,756
最厉害的地方

353
00:08:59,816 --> 00:09:00,306
在下面的底栏

354
00:08:59,816 --> 00:09:00,306
在下面的底栏

355
00:09:00,526 --> 00:09:01,406
我们拉近看一下

356
00:09:02,206 --> 00:09:04,226
通过 PDFThumbnailView

357
00:09:04,346 --> 00:09:06,036
我们可为文档本身

358
00:09:06,036 --> 00:09:07,036
提供 Rich Scrubber 功能

359
00:09:07,166 --> 00:09:08,596
当你在这条板刷上

360
00:09:08,656 --> 00:09:10,306
移动手指时它会激活

361
00:09:10,306 --> 00:09:11,416
你手指触到的各个页面

362
00:09:11,416 --> 00:09:13,106
然后在 PDFView 中

363
00:09:13,106 --> 00:09:14,726
更新相应的活动页面

364
00:09:14,996 --> 00:09:16,606
当然如果你用 PDFView

365
00:09:16,606 --> 00:09:18,496
处理这项页面变化

366
00:09:18,496 --> 00:09:19,236
它也会予以执行

367
00:09:19,236 --> 00:09:20,046
对 ThumbnailView 进行更新

368
00:09:21,296 --> 00:09:23,316
ThumbnailView 并不

369
00:09:23,316 --> 00:09:24,486
仅限于水平显示

370
00:09:24,696 --> 00:09:26,106
你也可以

371
00:09:26,106 --> 00:09:26,996
将它设置成垂直显示

372
00:09:27,566 --> 00:09:30,416
那么我们说了很多

373
00:09:30,416 --> 00:09:31,646
PDFView 的特性  现在再来

374
00:09:31,646 --> 00:09:32,856
聊一下核心数据结构

375
00:09:32,856 --> 00:09:34,736
文档页面

376
00:09:34,736 --> 00:09:36,026
和注解模型

377
00:09:36,206 --> 00:09:38,996
PDFDocument 其实

378
00:09:38,996 --> 00:09:40,126
就是一个文档没有别的

379
00:09:40,126 --> 00:09:41,766
而文档就是

380
00:09:41,766 --> 00:09:43,916
多个 PDFPage 的组合

381
00:09:43,916 --> 00:09:45,376
PDFPage 非常厉害

382
00:09:45,376 --> 00:09:46,796
就是它保存着

383
00:09:47,096 --> 00:09:47,756
你文件里的所有内容

384
00:09:48,026 --> 00:09:49,506
你在屏幕上看到的

385
00:09:49,536 --> 00:09:50,716
全都保存在 PDFPage 中

386
00:09:51,066 --> 00:09:52,526
PDFPage的功能十分丰富

387
00:09:52,526 --> 00:09:53,846
因为它也保存着

388
00:09:54,016 --> 00:09:55,546
你能在屏幕上看到的

389
00:09:55,546 --> 00:09:56,216
所有注解

390
00:09:57,416 --> 00:09:59,376
所以文档由页面组成

391
00:09:59,376 --> 00:10:01,566
页面包含内容和注解

392
00:09:59,376 --> 00:10:01,566
页面包含内容和注解

393
00:10:01,566 --> 00:10:03,216
而要实际创建一个文档

394
00:10:03,216 --> 00:10:04,326
你可以让它自行初始化

395
00:10:04,326 --> 00:10:05,746
然后你自己从头写起

396
00:10:05,746 --> 00:10:07,386
也可以用一个 URL

397
00:10:07,386 --> 00:10:07,976
对它进行初始化

398
00:10:08,046 --> 00:10:10,086
但在你生成一个文档后

399
00:10:10,086 --> 00:10:11,296
你就可以修改

400
00:10:11,296 --> 00:10:11,766
它所包含的页面

401
00:10:12,056 --> 00:10:13,746
可以追加交换插入

402
00:10:13,746 --> 00:10:14,516
移除页面

403
00:10:15,406 --> 00:10:16,696
PDFDocument 也很强大

404
00:10:16,696 --> 00:10:17,976
因为它能让你

405
00:10:17,976 --> 00:10:19,496
解密文档

406
00:10:19,496 --> 00:10:20,746
还能用加密方式

407
00:10:20,746 --> 00:10:21,356
保存文档

408
00:10:21,606 --> 00:10:22,546
我们为你开放了

409
00:10:22,546 --> 00:10:24,036
打开和保存的

410
00:10:24,036 --> 00:10:25,276
全面加密功能

411
00:10:25,766 --> 00:10:26,966
还能让你查看

412
00:10:26,966 --> 00:10:28,256
自己对文档

413
00:10:28,256 --> 00:10:28,836
都有哪些权限

414
00:10:29,026 --> 00:10:30,166
你在解锁后

415
00:10:30,206 --> 00:10:31,326
一定要注意检查

416
00:10:31,396 --> 00:10:32,686
你都可以对文档

417
00:10:32,686 --> 00:10:33,316
进行哪些操作

418
00:10:34,016 --> 00:10:35,156
你也可以通过它

419
00:10:35,156 --> 00:10:36,366
获取文档的属性

420
00:10:36,366 --> 00:10:37,386
你可以得知

421
00:10:37,386 --> 00:10:38,676
它的创建者是谁

422
00:10:38,676 --> 00:10:39,886
在什么时候创建的

423
00:10:39,886 --> 00:10:40,606
是用什么工具创建的

424
00:10:41,136 --> 00:10:42,666
最后有个很棒的功能

425
00:10:42,666 --> 00:10:43,726
如果你想在任何时候

426
00:10:43,726 --> 00:10:45,086
搜索文档

427
00:10:45,086 --> 00:10:46,466
或者一系列的文档

428
00:10:46,466 --> 00:10:46,696
完全没问题

429
00:10:46,896 --> 00:10:48,656
PDFDocument 包含一系列的 API

430
00:10:48,656 --> 00:10:49,886
专门实现这项功能

431
00:10:50,346 --> 00:10:52,416
我来给大家看个

432
00:10:52,536 --> 00:10:53,896
完整的例子在前面

433
00:10:53,896 --> 00:10:55,306
其实也看到过

434
00:10:55,306 --> 00:10:56,706
就是在一个视图里

435
00:10:56,706 --> 00:10:58,296
设定一个文档但我想让

436
00:10:58,296 --> 00:10:59,626
大家看到清晰的路径

437
00:10:59,626 --> 00:11:00,926
我们要检查你的 Bundle

438
00:10:59,626 --> 00:11:00,926
我们要检查你的 Bundle

439
00:11:01,026 --> 00:11:01,986
从而完成文档的初始化

440
00:11:01,986 --> 00:11:03,296
这里有没有

441
00:11:03,296 --> 00:11:03,666
我们要的 PDF 文件呢

442
00:11:03,666 --> 00:11:05,536
如果有就继续执行

443
00:11:05,536 --> 00:11:06,776
试着将 PDF 文档初始化

444
00:11:06,776 --> 00:11:08,816
初始化成功后

445
00:11:08,816 --> 00:11:09,566
就将它赋给 View

446
00:11:09,796 --> 00:11:11,106
其余的工作

447
00:11:11,146 --> 00:11:11,456
由我们替你搞定

448
00:11:11,776 --> 00:11:13,716
再举几个例子

449
00:11:13,716 --> 00:11:15,186
如果想要保存文件

450
00:11:15,186 --> 00:11:16,076
整段代码也是直截了当

451
00:11:16,076 --> 00:11:17,736
只要记得在调用方法时

452
00:11:17,766 --> 00:11:18,816
使用新的文件路径

453
00:11:19,486 --> 00:11:20,766
比如说你想要使用

454
00:11:20,766 --> 00:11:22,316
加密宽度  保存这段代码

455
00:11:22,316 --> 00:11:23,156
也非常直接

456
00:11:23,276 --> 00:11:25,706
用一个附带选项的 write(to:)

457
00:11:25,706 --> 00:11:26,496
这个选项是个字典

458
00:11:26,496 --> 00:11:28,006
我们会通过它

459
00:11:28,006 --> 00:11:29,346
在头文件里将特设的

460
00:11:29,776 --> 00:11:31,046
枚举变量与你设定的

461
00:11:31,046 --> 00:11:31,266
密码进行匹配

462
00:11:31,666 --> 00:11:32,576
在这里我用完全的

463
00:11:32,576 --> 00:11:33,696
所有者权限保存文档

464
00:11:33,696 --> 00:11:34,916
你只有使用我的密码

465
00:11:34,916 --> 00:11:36,576
“Apple” 才能打开它

466
00:11:36,576 --> 00:11:39,116
再举几个例子

467
00:11:39,116 --> 00:11:40,746
如果你想要检索一个页面

468
00:11:40,746 --> 00:11:43,286
我们用的是一种基数0索引系统

469
00:11:43,536 --> 00:11:44,676
也就是说第一个页面

470
00:11:44,676 --> 00:11:46,346
对应的索引键是0 第二个页面

471
00:11:46,346 --> 00:11:47,646
对应的索引键是1 依此类推

472
00:11:47,826 --> 00:11:49,506
因此要检索第一个页面很简单

473
00:11:49,506 --> 00:11:51,676
只要使用 .page(at:)

474
00:11:51,676 --> 00:11:52,576
并且提供索引键

475
00:11:53,266 --> 00:11:54,516
第二个例子是如果你想

476
00:11:54,516 --> 00:11:55,976
插入一个页面可以用

477
00:11:55,976 --> 00:11:57,556
insert(at:) 加索引来实现

478
00:11:58,276 --> 00:11:59,756
如果你想要交换页面

479
00:11:59,756 --> 00:12:01,096
只要提供两个索引键

480
00:11:59,756 --> 00:12:01,096
只要提供两个索引键

481
00:12:01,876 --> 00:12:03,196
最后如果你想要

482
00:12:03,196 --> 00:12:04,986
移除页面也是同样

483
00:12:04,986 --> 00:12:05,376
告诉我们索引键就好

484
00:12:05,376 --> 00:12:06,896
当你对文档做了改动

485
00:12:06,896 --> 00:12:07,976
并将它保存到外部磁盘

486
00:12:07,976 --> 00:12:09,756
我们也会负责搞定

487
00:12:09,756 --> 00:12:10,000
完整文档的构建

488
00:12:11,866 --> 00:12:13,296
我前面讲到了

489
00:12:13,296 --> 00:12:14,486
加密保存但让我

490
00:12:14,486 --> 00:12:15,886
给大家看个完美的例子

491
00:12:15,886 --> 00:12:16,916
关于打开文件的

492
00:12:17,266 --> 00:12:18,916
这里是我在用给定的 URL

493
00:12:18,946 --> 00:12:20,736
初始化一个 PDF 文档

494
00:12:20,736 --> 00:12:22,096
我要做的第一件事

495
00:12:22,096 --> 00:12:23,976
就是检查文档

496
00:12:23,976 --> 00:12:25,236
是否使用了加密

497
00:12:25,526 --> 00:12:26,916
如果是没关系

498
00:12:26,916 --> 00:12:28,266
我会尝试把它解密

499
00:12:28,266 --> 00:12:29,476
我在使用 unlockwithPassword

500
00:12:29,476 --> 00:12:31,406
这个方法来解密

501
00:12:31,896 --> 00:12:32,906
没有成功

502
00:12:32,906 --> 00:12:33,806
这很好

503
00:12:34,286 --> 00:12:35,196
我还要再做一件事

504
00:12:35,196 --> 00:12:36,016
就是要检查

505
00:12:36,016 --> 00:12:37,746
我的身份

506
00:12:37,746 --> 00:12:38,656
和我的权限

507
00:12:39,586 --> 00:12:41,186
我说的身份是指

508
00:12:41,186 --> 00:12:42,686
PDF 文档这个文件格式

509
00:12:42,726 --> 00:12:44,036
有个很厉害的思路

510
00:12:44,036 --> 00:12:45,006
就是你其实可以用

511
00:12:45,006 --> 00:12:46,486
两个密码来解锁文档

512
00:12:46,696 --> 00:12:48,006
你可以有个所有者密码

513
00:12:48,006 --> 00:12:49,276
对文档拥有

514
00:12:49,276 --> 00:12:49,826
完全的权限

515
00:12:49,826 --> 00:12:51,386
你可以复制粘贴分享

516
00:12:51,616 --> 00:12:53,566
打印出来也可能

517
00:12:53,566 --> 00:12:54,886
你只有有限权限

518
00:12:54,886 --> 00:12:55,626
比如可能是用户身份

519
00:12:55,926 --> 00:12:57,256
这个有限身份

520
00:12:57,256 --> 00:12:58,526
可能会给你不同的权限

521
00:12:58,886 --> 00:13:01,426
也许可以让你复制

522
00:12:58,886 --> 00:13:01,426
也许可以让你复制

523
00:13:01,426 --> 00:13:02,736
也许可以让你打印

524
00:13:02,736 --> 00:13:04,166
具体情况不一定

525
00:13:04,266 --> 00:13:05,736
对于应用开发者来说

526
00:13:05,736 --> 00:13:07,036
在解锁文档时检查权限

527
00:13:07,376 --> 00:13:08,486
是至关重要的一步

528
00:13:08,776 --> 00:13:10,506
因为 PDFKit

529
00:13:10,506 --> 00:13:11,986
会对你强制执行

530
00:13:11,986 --> 00:13:12,176
这些权限

531
00:13:12,586 --> 00:13:13,796
所以如果你打开了一个文档

532
00:13:13,836 --> 00:13:15,236
但是却不能复制

533
00:13:15,236 --> 00:13:16,826
这种用户体验实在很糟

534
00:13:16,826 --> 00:13:18,256
你会十分困惑为什么

535
00:13:18,256 --> 00:13:18,346
你无法复制它

536
00:13:18,676 --> 00:13:19,726
所以你可以先行检查

537
00:13:19,726 --> 00:13:21,026
然后也许通知用户一下

538
00:13:21,026 --> 00:13:22,716
嗨  这个文档已经解锁

539
00:13:22,906 --> 00:13:24,276
但用的是用户密码

540
00:13:24,416 --> 00:13:25,276
所以你没有完全权限

541
00:13:25,276 --> 00:13:26,396
如果你愿意提供

542
00:13:26,396 --> 00:13:27,436
所有者密码

543
00:13:27,726 --> 00:13:28,966
我们可以试着再解锁一次

544
00:13:28,966 --> 00:13:30,216
这样一来

545
00:13:30,216 --> 00:13:30,586
你就能复制它了

546
00:13:32,136 --> 00:13:33,726
当你解锁文档后

547
00:13:33,726 --> 00:13:35,136
系统会返回一个布尔值

548
00:13:35,366 --> 00:13:36,826
但是在文档和其他类

549
00:13:36,826 --> 00:13:38,396
执行上述操作时也有一些

550
00:13:38,396 --> 00:13:40,606
会发出提示然后调用

551
00:13:40,606 --> 00:13:41,596
可选用的授权

552
00:13:42,026 --> 00:13:43,426
还是来举几个例子

553
00:13:43,646 --> 00:13:44,686
当你解锁一个文档时

554
00:13:44,686 --> 00:13:45,846
我们会显示一条

555
00:13:45,846 --> 00:13:47,066
文档已解锁的提示

556
00:13:47,446 --> 00:13:48,446
这个动作可由

557
00:13:48,446 --> 00:13:49,426
用户触发因为我们有

558
00:13:49,426 --> 00:13:51,316
默认密码来解锁视图

559
00:13:51,946 --> 00:13:53,236
但同样在你保存文档时

560
00:13:53,236 --> 00:13:54,426
也许你希望代码中

561
00:13:54,426 --> 00:13:55,536
能有其他监测模块

562
00:13:55,536 --> 00:13:56,546
探知到你的动作

563
00:13:56,816 --> 00:13:58,206
提示就可以帮你

564
00:13:58,206 --> 00:13:59,026
做到这一点

565
00:13:59,126 --> 00:14:00,646
你还可以执行可选的

566
00:13:59,126 --> 00:14:00,646
你还可以执行可选的

567
00:14:00,646 --> 00:14:01,656
任何一种授权  它们通常

568
00:14:01,756 --> 00:14:02,956
都有固定的权限匹配

569
00:14:03,016 --> 00:14:04,376
它们的函数调用

570
00:14:04,376 --> 00:14:04,666
也差不多是一样的

571
00:14:05,816 --> 00:14:06,176
好

572
00:14:07,046 --> 00:14:08,306
那么我们聊了很多页面

573
00:14:08,486 --> 00:14:09,546
哦  抱歉是聊了很多

574
00:14:09,546 --> 00:14:10,836
文档的部分现在我们再来

575
00:14:10,876 --> 00:14:11,406
聊聊页面

576
00:14:12,056 --> 00:14:13,666
页面可从文档中

577
00:14:13,666 --> 00:14:14,796
获取也可初始化为

578
00:14:14,796 --> 00:14:15,986
空白页  也许你

579
00:14:15,986 --> 00:14:17,516
提供的是个新文档

580
00:14:17,516 --> 00:14:18,796
也可能是用一张图像

581
00:14:18,796 --> 00:14:19,536
初始化之后的结果

582
00:14:19,536 --> 00:14:20,746
这是个很有用的功能

583
00:14:20,746 --> 00:14:22,106
如果你想要把一组图像

584
00:14:22,106 --> 00:14:23,806
转换为一个 PDF

585
00:14:23,806 --> 00:14:24,266
文档的话

586
00:14:24,516 --> 00:14:25,826
等下我会给大家看个例子

587
00:14:26,296 --> 00:14:28,076
此外  PDFPage 的

588
00:14:28,076 --> 00:14:29,496
强大之处还在于它也是

589
00:14:29,496 --> 00:14:30,646
Annotations 的容器

590
00:14:30,646 --> 00:14:31,766
当你与 Annotations

591
00:14:31,826 --> 00:14:32,906
交互或者想要

592
00:14:32,906 --> 00:14:35,366
修改 Annotations 时就要在

593
00:14:35,366 --> 00:14:35,986
PDFPage 中执行

594
00:14:36,726 --> 00:14:38,166
最后 PDFPage 还有很多的

595
00:14:38,166 --> 00:14:39,426
自定义图形如果你想要

596
00:14:39,426 --> 00:14:40,466
修改页面的尺寸

597
00:14:40,516 --> 00:14:42,306
方向或者想要

598
00:14:42,306 --> 00:14:43,716
在内容中绘制

599
00:14:43,716 --> 00:14:45,196
自定义图形只要使用

600
00:14:45,196 --> 00:14:46,156
PDFPage 就能实现

601
00:14:46,886 --> 00:14:48,796
它也在 API 中提供非常

602
00:14:48,796 --> 00:14:50,606
强大的文本选取功能

603
00:14:51,186 --> 00:14:52,216
我来给大家看个例子

604
00:14:54,266 --> 00:14:55,746
首先让我们用一张图像

605
00:14:55,746 --> 00:14:57,576
创建一个 PDFPage

606
00:14:57,576 --> 00:14:59,596
我会使用 UIImage 来实现

607
00:14:59,596 --> 00:15:01,116
并且初始化一张图像

608
00:14:59,596 --> 00:15:01,116
并且初始化一张图像

609
00:15:01,156 --> 00:15:02,466
接着我再来

610
00:15:02,466 --> 00:15:03,986
用一张图像生成

611
00:15:03,986 --> 00:15:04,356
一个 PDFPage 实例

612
00:15:04,826 --> 00:15:06,406
这里厉害的地方在于

613
00:15:06,456 --> 00:15:08,056
如果图像含有

614
00:15:08,056 --> 00:15:09,876
特殊内容比如使用了

615
00:15:09,876 --> 00:15:11,436
P3 广色域我们就会

616
00:15:11,516 --> 00:15:13,006
用 P3 色域创建

617
00:15:13,006 --> 00:15:14,746
它的页面以及

618
00:15:14,746 --> 00:15:15,206
整个文档

619
00:15:15,676 --> 00:15:17,376
还有一个独到之处就是

620
00:15:17,376 --> 00:15:19,286
PDFPage 的默认尺寸是 US letter

621
00:15:19,286 --> 00:15:20,266
但你可以随意重设

622
00:15:20,266 --> 00:15:21,876
这个尺寸但在你

623
00:15:21,876 --> 00:15:22,856
用图像来初始化它时

624
00:15:22,856 --> 00:15:24,146
我们会始终尽力

625
00:15:24,146 --> 00:15:25,586
在文档中保留

626
00:15:25,586 --> 00:15:26,966
图像的原始比例

627
00:15:29,186 --> 00:15:30,736
如果你想要从一个 PDFPage 中

628
00:15:30,736 --> 00:15:31,736
提取一个字符串内容

629
00:15:31,736 --> 00:15:33,236
只需要调用 string 方法

630
00:15:33,236 --> 00:15:34,016
就能做到

631
00:15:34,396 --> 00:15:36,036
但如果你想要从文档中

632
00:15:36,106 --> 00:15:37,196
获取大量文本则可以

633
00:15:37,196 --> 00:15:38,826
使用 attributedString

634
00:15:38,826 --> 00:15:40,096
自从我们对可访问性

635
00:15:40,096 --> 00:15:41,356
做了改进后

636
00:15:41,356 --> 00:15:42,826
它现在的功能非常强大

637
00:15:44,256 --> 00:15:45,636
此外我前面也提到过

638
00:15:45,636 --> 00:15:47,216
还有这些非常强大的

639
00:15:47,246 --> 00:15:48,166
文本提取 API

640
00:15:48,226 --> 00:15:49,636
我给大家看两个例子

641
00:15:50,096 --> 00:15:51,406
第一个是假设你想要

642
00:15:51,406 --> 00:15:52,836
选取特定字符

643
00:15:52,836 --> 00:15:54,136
范围内的文本

644
00:15:54,456 --> 00:15:56,316
您可通过 PDFPage 的

645
00:15:56,316 --> 00:15:57,956
一个方法来实现叫做

646
00:15:57,956 --> 00:15:58,366
Selection(for:[range])

647
00:15:58,656 --> 00:16:00,506
在这里我们会选取

648
00:15:58,656 --> 00:16:00,506
在这里我们会选取

649
00:16:00,506 --> 00:16:01,816
第 10 个字符总共

650
00:16:01,876 --> 00:16:02,286
选取 5 个字符

651
00:16:02,616 --> 00:16:03,736
我们会提取出这个字符串

652
00:16:03,736 --> 00:16:04,746
你可以使用 PDFSelection

653
00:16:04,746 --> 00:16:05,936
进行多种几何转换

654
00:16:05,936 --> 00:16:07,036
从而找出它在

655
00:16:07,306 --> 00:16:09,096
页面上的视觉位置

656
00:16:09,716 --> 00:16:11,456
但我们也有办法

657
00:16:11,456 --> 00:16:12,796
基于几何形状

658
00:16:12,796 --> 00:16:13,476
提取文本

659
00:16:13,766 --> 00:16:15,146
因此如果你提供的是

660
00:16:15,146 --> 00:16:16,626
一个长方形而非一段文本

661
00:16:16,906 --> 00:16:18,086
我们也可以提取出

662
00:16:18,086 --> 00:16:19,386
相应的 PDF 选取文本

663
00:16:19,386 --> 00:16:20,316
你可以对它进行多种操作

664
00:16:21,236 --> 00:16:22,356
不过我想再说回

665
00:16:22,406 --> 00:16:23,366
attributedString

666
00:16:24,016 --> 00:16:25,536
我写了一个非常简单的

667
00:16:25,536 --> 00:16:27,326
桌面应用在左侧

668
00:16:27,326 --> 00:16:28,466
就跟前面的演示一样

669
00:16:28,466 --> 00:16:30,046
是支持拖放的 PDFView

670
00:16:30,406 --> 00:16:31,376
在右侧是一个

671
00:16:31,376 --> 00:16:32,226
富文本视图

672
00:16:33,006 --> 00:16:34,166
在这里我要拖动和

673
00:16:34,166 --> 00:16:36,526
放下一小张用户手册

674
00:16:36,526 --> 00:16:37,916
然后在左侧我要

675
00:16:37,916 --> 00:16:39,146
提取和打印出

676
00:16:39,146 --> 00:16:39,856
attributedString

677
00:16:40,496 --> 00:16:41,886
这里的厉害之处在于

678
00:16:41,886 --> 00:16:43,706
我们能尽最大可能

679
00:16:43,706 --> 00:16:45,176
保留完整内容的

680
00:16:45,176 --> 00:16:47,786
文本定位文本顺序字体

681
00:16:47,876 --> 00:16:49,766
颜色粗体或细体以及其他的

682
00:16:49,766 --> 00:16:50,646
属性

683
00:16:51,006 --> 00:16:52,226
这一点格外重要

684
00:16:52,226 --> 00:16:54,026
因为这一切都会

685
00:16:54,026 --> 00:16:55,676
显示给可访问性系统

686
00:16:55,676 --> 00:16:57,406
Mac OS 和 iOS

687
00:16:57,406 --> 00:16:57,626
都支持这套系统

688
00:16:58,066 --> 00:17:00,226
也就是说只要使用

689
00:16:58,066 --> 00:17:00,226
也就是说只要使用

690
00:17:00,226 --> 00:17:01,876
PDFView 你便可免费获得

691
00:17:01,876 --> 00:17:03,526
上述的所有可访问性改进

692
00:17:03,526 --> 00:17:05,036
而且两个平台均可支持

693
00:17:06,796 --> 00:17:07,096
好

694
00:17:07,766 --> 00:17:08,925
那么我们在 2017 年

695
00:17:08,925 --> 00:17:11,406
还新增了一个功能

696
00:17:11,406 --> 00:17:13,626
就是指定显示框尺寸的

697
00:17:13,626 --> 00:17:14,496
PDFPage 方法 Thumbnail(of:[size])

698
00:17:14,935 --> 00:17:15,925
很多时候你可能会发现

699
00:17:15,925 --> 00:17:17,776
你有一个 PDF 文档

700
00:17:17,776 --> 00:17:19,346
而你想做的

701
00:17:19,415 --> 00:17:20,586
并不复杂

702
00:17:20,586 --> 00:17:22,006
你只是想要显示

703
00:17:22,006 --> 00:17:22,856
一个页面预览

704
00:17:23,656 --> 00:17:25,406
凭借这个新方法

705
00:17:25,406 --> 00:17:26,806
我们可以代你搞定这一切

706
00:17:26,806 --> 00:17:28,246
同样我们也支持

707
00:17:28,246 --> 00:17:28,566
P3 色域

708
00:17:28,566 --> 00:17:29,856
因此如果您的文档中

709
00:17:29,856 --> 00:17:31,466
有任何一种复杂元素

710
00:17:31,466 --> 00:17:32,836
采用了广色域

711
00:17:32,836 --> 00:17:34,596
我们会确保 UI 图像或

712
00:17:34,596 --> 00:17:36,066
NS 图像这类元素同样

713
00:17:36,066 --> 00:17:38,116
使用 P3 色域生成

714
00:17:38,596 --> 00:17:39,456
另一个厉害的地方是

715
00:17:39,456 --> 00:17:40,886
它会追踪给定边界内

716
00:17:40,886 --> 00:17:42,006
文档的合适尺寸

717
00:17:42,006 --> 00:17:43,426
同时保留原始比例

718
00:17:44,496 --> 00:17:46,146
不过最后这个参数显示框

719
00:17:46,146 --> 00:17:47,166
是做什么用的呢

720
00:17:47,536 --> 00:17:49,696
要解释清楚这个枚举变量

721
00:17:49,746 --> 00:17:51,016
我就要简单解释一下

722
00:17:51,176 --> 00:17:53,256
PDF 内容为图像时的

723
00:17:53,356 --> 00:17:53,846
工作原理

724
00:17:54,996 --> 00:17:56,576
那么我们先从

725
00:17:56,576 --> 00:17:57,766
笛卡尔坐标空间开始

726
00:17:57,836 --> 00:17:59,486
这是内容的坐标空间

727
00:17:59,486 --> 00:18:01,256
所有的 PDFPage

728
00:17:59,486 --> 00:18:01,256
所有的 PDFPage

729
00:18:01,256 --> 00:18:01,676
都是在这个空间里绘制

730
00:18:01,676 --> 00:18:03,406
所以我们的原点是 00

731
00:18:03,406 --> 00:18:04,956
X 的正半轴向右延伸

732
00:18:05,196 --> 00:18:07,346
Y 的正半轴向上延伸

733
00:18:07,346 --> 00:18:08,346
我现在输入一小段字符串

734
00:18:08,346 --> 00:18:09,646
我会输入

735
00:18:09,646 --> 00:18:10,006
你好圣何塞

736
00:18:10,836 --> 00:18:12,246
我要把这个字符串

737
00:18:12,246 --> 00:18:13,956
放到一个页面上

738
00:18:13,956 --> 00:18:14,606
所以它会有个位置

739
00:18:14,606 --> 00:18:15,426
我要把它放到页面上

740
00:18:15,426 --> 00:18:16,656
而页面本身

741
00:18:16,656 --> 00:18:17,556
当然也有个尺寸

742
00:18:17,816 --> 00:18:18,986
于是我们现在有了

743
00:18:18,986 --> 00:18:20,346
所有的几何特性

744
00:18:21,116 --> 00:18:22,836
但是我遇到了一个问题

745
00:18:22,836 --> 00:18:23,966
问题就是

746
00:18:24,096 --> 00:18:24,476
它没有居中

747
00:18:24,696 --> 00:18:27,356
对吧我们可以重新绘制

748
00:18:27,356 --> 00:18:28,666
整个内容

749
00:18:28,666 --> 00:18:29,876
但这不是好主意

750
00:18:29,876 --> 00:18:30,366
成本也很高

751
00:18:30,366 --> 00:18:32,056
没人想要重新发出和

752
00:18:32,056 --> 00:18:34,236
重新绘制以上所有的

753
00:18:34,236 --> 00:18:35,866
绘制命令来

754
00:18:35,866 --> 00:18:36,346
重新生成一个 PDF 文档

755
00:18:36,876 --> 00:18:37,876
所以我们要利用

756
00:18:37,876 --> 00:18:39,326
PDF 的强大功能

757
00:18:39,326 --> 00:18:40,376
利用我之前提到的

758
00:18:40,376 --> 00:18:41,866
枚举变量

759
00:18:42,396 --> 00:18:43,326
我们还是使用这个 PDFPage

760
00:18:43,326 --> 00:18:45,246
然后为本来的

761
00:18:45,506 --> 00:18:46,926
那个显示框设定框架

762
00:18:46,926 --> 00:18:48,496
让它轻微

763
00:18:48,496 --> 00:18:48,976
偏移

764
00:18:49,276 --> 00:18:50,376
之所以要偏移是因为

765
00:18:50,376 --> 00:18:51,916
我们要让圣何塞居中

766
00:18:52,446 --> 00:18:54,766
我也不太喜欢

767
00:18:54,766 --> 00:18:55,906
横向页面我想把它

768
00:18:55,906 --> 00:18:57,106
转成垂直的同样

769
00:18:57,106 --> 00:18:58,496
我不用重新发出任何

770
00:18:58,496 --> 00:18:59,616
绘制命令就能做到这一点

771
00:18:59,616 --> 00:19:00,906
我只要设定一下框架特性

772
00:18:59,616 --> 00:19:00,906
我只要设定一下框架特性

773
00:19:02,436 --> 00:19:04,656
那么为什么我可以

774
00:19:04,656 --> 00:19:06,666
不改变内容

775
00:19:06,666 --> 00:19:07,856
就变为使用 PDFPage 的

776
00:19:07,856 --> 00:19:08,296
几何特性呢

777
00:19:08,296 --> 00:19:09,426
除了在保存文件时

778
00:19:09,426 --> 00:19:10,676
可以节省些时间外

779
00:19:10,676 --> 00:19:11,716
这么做还有什么好处呢

780
00:19:12,196 --> 00:19:14,236
真正的好处是 PDF

781
00:19:14,236 --> 00:19:15,816
在现实世界里

782
00:19:15,816 --> 00:19:16,106
是需要印刷的

783
00:19:16,456 --> 00:19:17,646
这意味着有时候

784
00:19:17,646 --> 00:19:18,766
你其实想要为

785
00:19:18,806 --> 00:19:20,616
同样的内容生成

786
00:19:20,616 --> 00:19:21,126
多个 PDFPage

787
00:19:21,956 --> 00:19:23,596
至少在涉及这样的

788
00:19:23,596 --> 00:19:25,486
内容时你应该考虑

789
00:19:25,486 --> 00:19:26,126
使用 PDFPage

790
00:19:26,126 --> 00:19:27,036
完成绘制后

791
00:19:27,036 --> 00:19:28,546
你应该将它看成是

792
00:19:28,546 --> 00:19:29,356
内容的视图入口

793
00:19:29,686 --> 00:19:32,186
内容的边框只有一个

794
00:19:32,186 --> 00:19:33,246
但是在内容里

795
00:19:33,246 --> 00:19:34,936
可以有若干个

796
00:19:34,936 --> 00:19:35,406
视图入口或页面

797
00:19:35,766 --> 00:19:37,126
至于我们这么做的原因

798
00:19:37,126 --> 00:19:38,826
大家看一下它的四角

799
00:19:39,526 --> 00:19:39,806
对吧

800
00:19:39,946 --> 00:19:41,396
在纸质印刷环境中

801
00:19:41,466 --> 00:19:42,276
如果你想要用专业的方式

802
00:19:42,276 --> 00:19:43,576
进行印刷通常情况下

803
00:19:43,576 --> 00:19:44,686
都会经过数次印刷

804
00:19:44,846 --> 00:19:46,616
每一次印刷

805
00:19:46,616 --> 00:19:47,576
都会另外叠加

806
00:19:47,616 --> 00:19:48,646
一层油墨

807
00:19:48,646 --> 00:19:50,516
而这个过程要做到完美

808
00:19:50,516 --> 00:19:51,426
就需要某种

809
00:19:51,426 --> 00:19:51,776
校准方法

810
00:19:52,216 --> 00:19:53,316
现在我们利用四角处的

811
00:19:53,316 --> 00:19:54,756
光学校准字符

812
00:19:54,756 --> 00:19:56,426
创建了这个页面

813
00:19:56,526 --> 00:19:57,856
这样在印刷过程中

814
00:19:57,856 --> 00:19:58,886
就可以完美铺墨了

815
00:20:00,226 --> 00:20:01,616
这也是我们会设置

816
00:20:01,616 --> 00:20:01,976
这些枚举值的原因所在

817
00:20:02,616 --> 00:20:03,846
现在我给大家看的

818
00:20:03,846 --> 00:20:05,026
是电子版对应的枚举值是

819
00:20:05,026 --> 00:20:05,616
cropBox

820
00:20:05,686 --> 00:20:07,196
这是 PDFKit 的默认赋值

821
00:20:07,556 --> 00:20:08,626
我们也放出了

822
00:20:08,766 --> 00:20:09,846
纸质版也就是我们

823
00:20:09,846 --> 00:20:11,696
将会做成印刷品的版本

824
00:20:11,696 --> 00:20:12,476
对应的枚举值是 mediaBox

825
00:20:12,826 --> 00:20:14,106
此外还有三个赋值

826
00:20:14,106 --> 00:20:15,676
可供大家运用

827
00:20:15,676 --> 00:20:16,746
也不要忘记这个功能的

828
00:20:16,746 --> 00:20:18,586
真正厉害之处在于

829
00:20:18,586 --> 00:20:19,776
你对一个边框所做的任何修改

830
00:20:19,776 --> 00:20:20,736
由于你实际修改的是内容

831
00:20:20,736 --> 00:20:22,036
都会同时显示在

832
00:20:22,036 --> 00:20:22,866
这两个页面上

833
00:20:23,576 --> 00:20:25,026
好

834
00:20:25,466 --> 00:20:27,416
现在让我们来说一下

835
00:20:27,416 --> 00:20:28,686
自定义 PDFPage 绘制

836
00:20:28,686 --> 00:20:29,556
我们聊了很多如何改变

837
00:20:29,556 --> 00:20:30,606
各种设置的话题  但绘制内容的

838
00:20:30,606 --> 00:20:31,846
实际情况又是怎样的呢

839
00:20:32,616 --> 00:20:33,936
这个过程分为简单的三步

840
00:20:34,236 --> 00:20:35,936
第一步就是  针对

841
00:20:35,936 --> 00:20:37,276
一个 PDF 文档我们要设定一个

842
00:20:37,276 --> 00:20:38,726
PDFDocument 的 delegate (权限)

843
00:20:39,046 --> 00:20:39,856
而这么做的原因

844
00:20:39,856 --> 00:20:42,096
就是第二步

845
00:20:42,096 --> 00:20:43,396
这个 delegate 应该用

846
00:20:43,396 --> 00:20:44,386
classForPage 来实现

847
00:20:44,386 --> 00:20:46,306
我们要返回一个

848
00:20:46,366 --> 00:20:48,016
我们已经实现的子类

849
00:20:48,016 --> 00:20:49,476
用来定义我们想要的

850
00:20:49,476 --> 00:20:50,666
PDFPage 绘制方法

851
00:20:51,166 --> 00:20:52,046
在这个例子中我将说

852
00:20:52,046 --> 00:20:53,956
请使用我的自定义子类

853
00:20:53,956 --> 00:20:55,756
WatermarkPage 来绘制

854
00:20:56,576 --> 00:20:58,516
第三步也是最后一步

855
00:20:58,516 --> 00:20:59,846
我们需要完全重写

856
00:20:59,846 --> 00:21:01,766
PDFPage 子类的

857
00:20:59,846 --> 00:21:01,766
PDFPage 子类的

858
00:21:01,766 --> 00:21:02,136
draw 方法

859
00:21:02,406 --> 00:21:03,426
所以我们要使用的绘制方法

860
00:21:03,466 --> 00:21:05,136
是内容边框

861
00:21:05,496 --> 00:21:07,276
我会在讲座的最后

862
00:21:07,376 --> 00:21:08,330
给大家看一个完整的例子

863
00:21:15,456 --> 00:21:16,000
非常棒

864
00:21:18,796 --> 00:21:18,946
好的

865
00:21:19,126 --> 00:21:21,746
现在我有一个 iOS 模拟器

866
00:21:21,746 --> 00:21:23,076
运行着一个示例应用

867
00:21:23,076 --> 00:21:24,526
是我三个设定的实施体现

868
00:21:25,106 --> 00:21:26,636
在这个应用里我只能

869
00:21:26,636 --> 00:21:27,676
在各个方向上拉动

870
00:21:27,676 --> 00:21:30,236
就跟正常的 PDFView 一样

871
00:21:30,236 --> 00:21:31,076
但是我想用这个应用

872
00:21:31,076 --> 00:21:31,646
做些不一样的事情

873
00:21:31,776 --> 00:21:33,106
我想对它说

874
00:21:33,106 --> 00:21:34,186
我们在处理非常敏感的

875
00:21:34,186 --> 00:21:35,816
文档每当我的某个用户

876
00:21:35,816 --> 00:21:37,506
打开这些文档时

877
00:21:37,926 --> 00:21:38,746
我们必须追踪他们

878
00:21:38,776 --> 00:21:40,926
我们必须知道用户X

879
00:21:40,926 --> 00:21:43,106
看过了这个内容他会不会

880
00:21:43,106 --> 00:21:44,776
泄露出去

881
00:21:44,776 --> 00:21:45,776
我们就会知道是谁泄露的

882
00:21:46,086 --> 00:21:47,596
那我们的目的就是

883
00:21:47,596 --> 00:21:49,426
在每个单页的顶部

884
00:21:49,426 --> 00:21:51,316
绘制某个自定义标识符

885
00:21:51,316 --> 00:21:52,386
就可以通过上面那三个步骤来实现

886
00:21:52,456 --> 00:21:54,406
那么第一步

887
00:21:54,406 --> 00:21:55,806
如果我们打开 ViewController

888
00:21:56,386 --> 00:21:57,266
在前面会需要几行代码

889
00:21:57,266 --> 00:21:58,686
来设置 PDFView

890
00:21:58,806 --> 00:21:59,836
不过核心的一步在这里

891
00:22:00,276 --> 00:22:01,446
我们要把 delegate(权限)

892
00:22:01,446 --> 00:22:02,016
设置给自己

893
00:22:02,016 --> 00:22:03,156
我们要把权限

894
00:22:03,156 --> 00:22:03,946
设置给 ViewController

895
00:22:04,366 --> 00:22:05,736
而这么做的原因

896
00:22:05,736 --> 00:22:07,496
在第二步我们要声明

897
00:22:07,496 --> 00:22:08,776
就像前面在侧栏中看到的

898
00:22:08,776 --> 00:22:09,666
我们要把 watermarkPage

899
00:22:09,666 --> 00:22:11,256
声明为 PDFPage 的子类

900
00:22:11,306 --> 00:22:13,026
而它的返回结果就是

901
00:22:13,026 --> 00:22:14,196
我们想要的自定义绘制器

902
00:22:15,096 --> 00:22:18,006
最后一步也就是第三步

903
00:22:18,006 --> 00:22:20,076
我们这里在重写 draw 函数

904
00:22:20,076 --> 00:22:21,326
用 box to context 来绘制

905
00:22:21,326 --> 00:22:22,836
然后将我们所有的

906
00:22:22,836 --> 00:22:24,166
自定义图形放进去

907
00:22:24,996 --> 00:22:26,496
在今天上台之前

908
00:22:26,496 --> 00:22:27,666
我把这些代码改成了注释

909
00:22:27,666 --> 00:22:28,586
好让大家看到

910
00:22:28,586 --> 00:22:30,456
它原本是什么样子

911
00:22:30,456 --> 00:22:31,636
现在我给大家看一下

912
00:22:31,636 --> 00:22:32,406
改写后的样子

913
00:22:33,196 --> 00:22:34,656
在这段代码里我先是

914
00:22:34,656 --> 00:22:36,506
调用了 super.draw 然后绘制了

915
00:22:36,506 --> 00:22:37,836
我自定义的图形

916
00:22:37,836 --> 00:22:38,626
我这么做当然是有原因的

917
00:22:39,446 --> 00:22:40,736
当我执行这段

918
00:22:40,736 --> 00:22:42,376
修改后的代码时

919
00:22:42,376 --> 00:22:44,136
所有页面都会被添加上

920
00:22:44,136 --> 00:22:44,476
这个图形内容

921
00:22:44,736 --> 00:22:45,836
这里漂亮的地方在于

922
00:22:45,836 --> 00:22:47,386
如果我打算保存文档

923
00:22:47,386 --> 00:22:48,896
或者打印文档我刚才加入的

924
00:22:48,896 --> 00:22:50,156
自定义图形肯定会

925
00:22:50,156 --> 00:22:51,626
出现在文档里

926
00:22:52,386 --> 00:22:53,306
但我想重申一下

927
00:22:53,436 --> 00:22:55,636
这里的顺序非常重要

928
00:22:55,636 --> 00:22:57,136
因为我们尊重绘制器的算法

929
00:22:57,136 --> 00:22:58,836
也就是说无论你先

930
00:22:58,836 --> 00:22:59,906
绘制的是什么  如果你先

931
00:22:59,906 --> 00:23:01,506
绘制原始内容然后绘制

932
00:22:59,906 --> 00:23:01,506
绘制原始内容然后绘制

933
00:23:01,506 --> 00:23:02,836
你的自定义内容

934
00:23:03,096 --> 00:23:04,336
你的自定义内容就会

935
00:23:04,336 --> 00:23:04,696
出现在最上层

936
00:23:05,296 --> 00:23:06,596
如果颠倒顺序先绘制

937
00:23:06,596 --> 00:23:08,116
你的自定义内容然后再

938
00:23:08,116 --> 00:23:09,906
调用 super.draw 就会是

939
00:23:09,906 --> 00:23:11,146
原始内容在最上层

940
00:23:11,606 --> 00:23:12,846
所以在你添加自定义绘制时

941
00:23:12,846 --> 00:23:13,766
一定要记得这一点

942
00:23:13,766 --> 00:23:13,976
好

943
00:23:17,316 --> 00:23:19,596
那么我们已经讲到了 PDFView

944
00:23:19,596 --> 00:23:22,596
PDFDocument PDFPage 的很多内容

945
00:23:22,596 --> 00:23:23,646
现在应该再来讲讲

946
00:23:23,806 --> 00:23:24,486
Annotations 了

947
00:23:24,736 --> 00:23:25,076
Nicki

948
00:23:25,706 --> 00:23:26,500
&gt;&gt; 好的太棒了

949
00:23:27,516 --> 00:23:31,396
[掌声]

950
00:23:31,896 --> 00:23:32,316
&gt;&gt; 好的

951
00:23:32,316 --> 00:23:33,736
我们来讲一下我的最爱

952
00:23:33,776 --> 00:23:35,086
Annotations

953
00:23:35,156 --> 00:23:36,996
首先我们经常提到

954
00:23:36,996 --> 00:23:38,096
Annotations 这个词

955
00:23:38,096 --> 00:23:38,736
什么是 Annotations 呢

956
00:23:39,226 --> 00:23:40,456
Annotations 是一些

957
00:23:40,456 --> 00:23:41,776
可以让我们添加到 PDF 文档中的

958
00:23:41,876 --> 00:23:42,966
交互性图形元素

959
00:23:43,806 --> 00:23:45,216
它可以是线条正方形

960
00:23:45,216 --> 00:23:47,676
这类简单的东西但也有

961
00:23:47,676 --> 00:23:48,906
很多其他形式的注解

962
00:23:48,906 --> 00:23:51,036
比如高亮下划线

963
00:23:51,436 --> 00:23:53,346
圆圈链接甚至是

964
00:23:53,346 --> 00:23:54,656
小程序  都是交互性的

965
00:23:54,656 --> 00:23:55,386
表单元素

966
00:23:56,076 --> 00:23:58,386
我们前面提过

967
00:23:58,386 --> 00:23:59,616
PDFAnnotation 是

968
00:23:59,616 --> 00:24:00,396
PDFPage 的一个子类

969
00:23:59,616 --> 00:24:00,396
PDFPage 的一个子类

970
00:24:00,876 --> 00:24:01,936
所以每当你创建一个

971
00:24:01,936 --> 00:24:03,816
注解时你都是

972
00:24:03,816 --> 00:24:05,146
在对 PDFPage 进行增减

973
00:24:05,456 --> 00:24:06,846
然后如果你的页面

974
00:24:06,846 --> 00:24:08,696
是在 PDFView 里每当你更新

975
00:24:08,696 --> 00:24:10,006
这段注解的属性时

976
00:24:10,236 --> 00:24:11,696
我们也会为你实时

977
00:24:11,696 --> 00:24:12,856
更新在视图里

978
00:24:14,086 --> 00:24:15,726
PDFKit 最新添加的

979
00:24:15,726 --> 00:24:16,986
是对 Annotations 的

980
00:24:16,986 --> 00:24:17,366
全局支持

981
00:24:17,546 --> 00:24:18,616
好吧  这是什么

982
00:24:19,226 --> 00:24:20,446
我前面给大家

983
00:24:20,446 --> 00:24:22,126
看过的所有 Annotations

984
00:24:22,126 --> 00:24:24,256
PDFKit 都可以支持

985
00:24:24,256 --> 00:24:25,486
我这句话的意思是

986
00:24:25,486 --> 00:24:26,946
我们为这些类型的注解

987
00:24:26,946 --> 00:24:27,956
定义了我们的原生渲染方式

988
00:24:28,046 --> 00:24:29,276
但这并不代表

989
00:24:29,276 --> 00:24:31,006
你就只能创建

990
00:24:31,006 --> 00:24:32,006
这些类型的注解

991
00:24:32,536 --> 00:24:33,716
有了我们的全局支持

992
00:24:33,716 --> 00:24:34,926
你可以按你的想法任意创建

993
00:24:35,256 --> 00:24:36,966
因为 PDF 规范

994
00:24:37,466 --> 00:24:39,366
对注解的定义只是

995
00:24:39,366 --> 00:24:40,766
一本键值对应的字典

996
00:24:40,826 --> 00:24:42,256
于是我们就延伸了一下

997
00:24:42,256 --> 00:24:44,006
在 PDFKit 里也加入了同样的东西

998
00:24:44,396 --> 00:24:46,466
比如说 PDF 规范

999
00:24:46,466 --> 00:24:47,746
允许为它添加扩展类

1000
00:24:47,746 --> 00:24:49,336
定义各种各样的新注解

1001
00:24:49,336 --> 00:24:50,196
哪怕是我们没见过的

1002
00:24:50,896 --> 00:24:52,256
比如说 GPSAnnotation

1003
00:24:52,516 --> 00:24:53,766
它可以包含某种

1004
00:24:53,766 --> 00:24:54,936
属性坐标

1005
00:24:54,936 --> 00:24:56,806
维度经度

1006
00:24:56,806 --> 00:24:58,196
有了对它们的全局支持

1007
00:24:58,196 --> 00:24:59,976
我们可以继续将这些值

1008
00:24:59,976 --> 00:25:01,786
设置成我们的字典

1009
00:24:59,976 --> 00:25:01,786
设置成我们的字典

1010
00:25:01,786 --> 00:25:02,656
做到所见即所得

1011
00:25:03,266 --> 00:25:04,546
不管你具体设置的是怎么

1012
00:25:04,546 --> 00:25:05,886
我们都会在你写下后加以执行

1013
00:25:05,886 --> 00:25:06,756
把它编写到文件里

1014
00:25:06,866 --> 00:25:08,906
哪怕 PDFKit 没有

1015
00:25:08,906 --> 00:25:10,436
明确定义你仍可以

1016
00:25:10,436 --> 00:25:11,356
把它保存为

1017
00:25:11,356 --> 00:25:12,106
PDFDocument 的一部分

1018
00:25:12,516 --> 00:25:14,926
我们今年的新改进是

1019
00:25:14,926 --> 00:25:16,426
为这个类添加了扩展

1020
00:25:16,426 --> 00:25:18,206
我们把它叫作

1021
00:25:18,206 --> 00:25:18,766
PDFAnnotationUtilities

1022
00:25:19,346 --> 00:25:20,866
它包含一组

1023
00:25:20,866 --> 00:25:22,176
类别方法能让

1024
00:25:22,176 --> 00:25:24,056
设置和获取

1025
00:25:24,056 --> 00:25:25,856
各类注解的属性

1026
00:25:25,856 --> 00:25:27,496
变得更容易

1027
00:25:27,626 --> 00:25:28,856
无论是我们提供支持的注解

1028
00:25:28,856 --> 00:25:30,086
还是各类注解的通用属性

1029
00:25:30,086 --> 00:25:32,006
比如颜色

1030
00:25:32,006 --> 00:25:32,376
或者边框样式

1031
00:25:32,866 --> 00:25:34,636
我们再来看一下

1032
00:25:34,636 --> 00:25:35,966
我们的注解

1033
00:25:35,966 --> 00:25:37,816
但是把重点放在其中一个上

1034
00:25:37,816 --> 00:25:38,426
一条直线的注解

1035
00:25:39,456 --> 00:25:40,916
我们都知道注解

1036
00:25:40,916 --> 00:25:42,456
就是一堆属性的组合

1037
00:25:42,456 --> 00:25:43,196
每当我更改这些属性

1038
00:25:43,196 --> 00:25:45,136
比如在这里我就是

1039
00:25:45,136 --> 00:25:46,576
更改了直线的两端样式

1040
00:25:46,576 --> 00:25:47,506
和边框样式

1041
00:25:47,806 --> 00:25:48,816
我们可以让简单的

1042
00:25:48,816 --> 00:25:50,086
直线注解呈现出

1043
00:25:50,086 --> 00:25:50,336
6 种不同的样子

1044
00:25:51,326 --> 00:25:52,306
那么我们来看一下

1045
00:25:52,306 --> 00:25:53,456
具体如何设置这些属性

1046
00:25:54,416 --> 00:25:55,686
一条直线要有起点

1047
00:25:55,686 --> 00:25:57,296
还有终点所以我们使用

1048
00:25:57,296 --> 00:25:58,686
setValue 在字典里

1049
00:25:58,686 --> 00:26:00,606
设置这两点用 linePoints

1050
00:25:58,686 --> 00:26:00,606
设置这两点用 linePoints

1051
00:26:00,606 --> 00:26:01,356
来设置 forAnnotationKey

1052
00:26:02,566 --> 00:26:03,826
我们还要设置直线的两端样式

1053
00:26:03,826 --> 00:26:05,306
想让它一端是箭头的尾部

1054
00:26:05,306 --> 00:26:06,316
一端是箭头的头部

1055
00:26:06,316 --> 00:26:08,176
然后我们还要

1056
00:26:08,176 --> 00:26:08,526
更改颜色

1057
00:26:08,886 --> 00:26:09,936
把它变成红色

1058
00:26:10,546 --> 00:26:12,036
但是记得我刚才

1059
00:26:12,036 --> 00:26:13,386
提过的类别方法吗

1060
00:26:13,386 --> 00:26:14,426
让我们直接用它们

1061
00:26:14,426 --> 00:26:15,606
来实现以上的效果

1062
00:26:16,766 --> 00:26:17,116
来

1063
00:26:17,116 --> 00:26:18,416
我们还是要设置

1064
00:26:18,416 --> 00:26:19,486
起终点两端样式

1065
00:26:19,536 --> 00:26:20,466
还有颜色

1066
00:26:20,466 --> 00:26:22,486
我们来对比一下两种方式

1067
00:26:22,806 --> 00:26:24,186
确实类别方法这边

1068
00:26:24,186 --> 00:26:25,416
似乎要多写上几行代码

1069
00:26:25,416 --> 00:26:26,746
但是它非常清晰地

1070
00:26:26,746 --> 00:26:27,246
表达了我们在做的事情

1071
00:26:27,296 --> 00:26:28,836
当我们为字典设值时

1072
00:26:28,836 --> 00:26:30,606
其实是在模仿规范的做法

1073
00:26:30,606 --> 00:26:31,906
而规范有时会

1074
00:26:31,906 --> 00:26:32,746
有点教人费解

1075
00:26:32,746 --> 00:26:34,836
用一个数字数组

1076
00:26:34,836 --> 00:26:36,236
或者一个字符串数组

1077
00:26:36,236 --> 00:26:37,386
定义直线的两端及其样式

1078
00:26:38,286 --> 00:26:39,996
实在感觉很费解

1079
00:26:40,456 --> 00:26:41,606
而使用类别方法

1080
00:26:41,606 --> 00:26:42,806
可以清晰地看到

1081
00:26:42,806 --> 00:26:44,526
你在定义起点终点

1082
00:26:44,526 --> 00:26:45,806
两端和边框样式

1083
00:26:45,806 --> 00:26:46,066
以及颜色

1084
00:26:46,596 --> 00:26:48,606
这多少能让事情

1085
00:26:49,356 --> 00:26:49,506
变得简单点

1086
00:26:49,616 --> 00:26:50,756
好我们来创建

1087
00:26:50,756 --> 00:26:51,386
一个注解

1088
00:26:51,516 --> 00:26:53,156
我们的初始化方法支持

1089
00:26:53,186 --> 00:26:55,086
三个属性边界 (bound) 类型

1090
00:26:55,086 --> 00:26:56,156
还有字典属性

1091
00:26:56,636 --> 00:26:58,256
只需要用到其中的两个

1092
00:26:58,556 --> 00:26:59,746
边界我们需要知道

1093
00:26:59,746 --> 00:27:00,746
它在页面中的具体位置

1094
00:26:59,746 --> 00:27:00,746
它在页面中的具体位置

1095
00:27:01,136 --> 00:27:01,936
然后是类型

1096
00:27:02,276 --> 00:27:03,426
在这里我们要创建

1097
00:27:03,426 --> 00:27:04,306
一个正方形的注解

1098
00:27:05,026 --> 00:27:06,346
这些属性参数我们现在

1099
00:27:06,346 --> 00:27:07,396
先暂时留空

1100
00:27:07,396 --> 00:27:10,176
等下我再来讲

1101
00:27:10,286 --> 00:27:11,886
好我们来设置几个属性

1102
00:27:11,886 --> 00:27:12,906
我们要为它设置个颜色

1103
00:27:12,906 --> 00:27:13,936
我们已经知道该怎么做了

1104
00:27:14,376 --> 00:27:15,476
但是我们也要设置边框

1105
00:27:15,476 --> 00:27:17,016
这里我想

1106
00:27:17,016 --> 00:27:19,356
简单讲一下

1107
00:27:19,486 --> 00:27:19,706
这个 PDFBorder 对象

1108
00:27:19,926 --> 00:27:21,486
注解字典只是

1109
00:27:21,486 --> 00:27:23,316
一个键值对应的字典

1110
00:27:23,316 --> 00:27:24,916
但其中的的一些值

1111
00:27:24,946 --> 00:27:26,696
也可以做成字典

1112
00:27:26,696 --> 00:27:28,036
所以大家不必去翻

1113
00:27:28,036 --> 00:27:29,146
规范查找自己

1114
00:27:29,146 --> 00:27:30,086
应该如何构建

1115
00:27:30,086 --> 00:27:31,446
这个边框字典值

1116
00:27:31,706 --> 00:27:32,866
我们已经为大家

1117
00:27:32,866 --> 00:27:34,036
创建了一个支持类

1118
00:27:34,086 --> 00:27:34,746
就是 PDFBorder

1119
00:27:35,576 --> 00:27:37,556
我们要设置直线宽度

1120
00:27:37,556 --> 00:27:39,056
赋给我们的注解边框属性

1121
00:27:39,146 --> 00:27:40,536
接着将它加入到页面中

1122
00:27:40,536 --> 00:27:41,316
最后写出来

1123
00:27:41,316 --> 00:27:42,006
大概就是这样

1124
00:27:42,346 --> 00:27:43,386
就是一个简单的正方形

1125
00:27:43,736 --> 00:27:45,126
在我们页面的左下角

1126
00:27:45,126 --> 00:27:45,756
并且是红色的

1127
00:27:46,316 --> 00:27:48,806
我们再来看一下

1128
00:27:48,806 --> 00:27:50,266
属性参数

1129
00:27:50,266 --> 00:27:51,466
我们能做的就是

1130
00:27:51,466 --> 00:27:53,156
可以事先为属性

1131
00:27:53,156 --> 00:27:53,706
指定一个字典

1132
00:27:54,216 --> 00:27:55,046
我们再来创建

1133
00:27:55,046 --> 00:27:56,556
一条直线  我们已经

1134
00:27:56,556 --> 00:27:57,856
知道这需要直线的两点

1135
00:27:57,856 --> 00:27:59,626
两端样式颜色

1136
00:27:59,626 --> 00:28:00,036
现在再加上边框

1137
00:27:59,626 --> 00:28:00,036
现在再加上边框

1138
00:28:00,656 --> 00:28:01,546
所以我们在

1139
00:28:01,546 --> 00:28:03,786
进行直线注解时

1140
00:28:03,786 --> 00:28:05,216
不再用 nil 来设置属性

1141
00:28:05,216 --> 00:28:06,406
而是使用我们的

1142
00:28:06,406 --> 00:28:07,316
字典 lineAttributes

1143
00:28:08,036 --> 00:28:09,136
将它加入页面后

1144
00:28:09,136 --> 00:28:09,926
出来的效果大概

1145
00:28:09,926 --> 00:28:10,196
是这样

1146
00:28:10,806 --> 00:28:12,286
这是一条直线始于原点

1147
00:28:12,286 --> 00:28:14,046
向着右上方延伸

1148
00:28:14,046 --> 00:28:15,986
一头带一个箭头

1149
00:28:15,986 --> 00:28:17,296
颜色是红色

1150
00:28:17,426 --> 00:28:21,026
我想简单讲一下

1151
00:28:21,026 --> 00:28:22,276
一个很好用的

1152
00:28:22,276 --> 00:28:23,266
注解属性

1153
00:28:23,516 --> 00:28:24,486
就是 Action 属性

1154
00:28:24,736 --> 00:28:26,496
PDFAction 跟 PDFBorder 一样

1155
00:28:26,496 --> 00:28:28,246
是个字典的包装

1156
00:28:28,246 --> 00:28:30,366
所以你可以实现多种操作

1157
00:28:30,366 --> 00:28:32,416
比如跳转至某个 URL

1158
00:28:32,416 --> 00:28:34,306
这里我们创建了一个 URL

1159
00:28:34,306 --> 00:28:36,026
用它来创建一个 PDFAction URL 对象

1160
00:28:36,146 --> 00:28:37,256
然后将它赋给

1161
00:28:37,256 --> 00:28:37,956
我们的注解

1162
00:28:38,156 --> 00:28:39,196
在这里就是这个

1163
00:28:39,196 --> 00:28:40,036
LinkAnnotation

1164
00:28:40,596 --> 00:28:42,116
不过我们还可以做些别的

1165
00:28:42,116 --> 00:28:43,426
比如跳转至文档中

1166
00:28:43,426 --> 00:28:43,986
某个特定的点

1167
00:28:44,596 --> 00:28:46,116
要做到这点可以使用

1168
00:28:46,116 --> 00:28:47,276
页面和一个给定点创建

1169
00:28:47,276 --> 00:28:49,196
一个 PDFDestination 对象

1170
00:28:49,196 --> 00:28:50,926
再用它来创建我们的 PDFActionGoto 动作

1171
00:28:50,926 --> 00:28:53,076
然后同样是设为

1172
00:28:53,076 --> 00:28:53,746
我们的 Action 属性

1173
00:28:54,456 --> 00:28:57,176
好我们再来讲一下小部件 (widget)

1174
00:28:57,936 --> 00:28:59,206
小部件同样是我们的

1175
00:28:59,206 --> 00:29:00,806
一种交互性表单元素

1176
00:28:59,206 --> 00:29:00,806
一种交互性表单元素

1177
00:29:00,806 --> 00:29:02,006
但是它们的创建方法

1178
00:29:02,006 --> 00:29:03,236
有点令人费解所以我来

1179
00:29:03,236 --> 00:29:03,936
为大家拆分讲解一下

1180
00:29:04,026 --> 00:29:05,886
我们设计了各种各样的

1181
00:29:05,886 --> 00:29:06,346
小部件

1182
00:29:06,426 --> 00:29:08,696
有文本小部件按钮小部件

1183
00:29:08,696 --> 00:29:09,496
还有选项小部件

1184
00:29:09,966 --> 00:29:11,776
好让 PDFKit 知道要将

1185
00:29:11,776 --> 00:29:13,036
什么类型的小部件和交互元素

1186
00:29:13,036 --> 00:29:14,276
添加到你的 PDF 文档中

1187
00:29:14,616 --> 00:29:15,476
你需要让我们知道

1188
00:29:15,846 --> 00:29:17,056
这要通过我们的 widgetFieldType 属性

1189
00:29:17,056 --> 00:29:18,616
来控制是做一个

1190
00:29:18,616 --> 00:29:19,766
文本按钮还是选项

1191
00:29:21,536 --> 00:29:22,626
不仅如此我们有些子类型

1192
00:29:22,626 --> 00:29:24,036
还能提供更多选择

1193
00:29:24,526 --> 00:29:25,816
比如说按钮它可以是

1194
00:29:25,816 --> 00:29:27,616
单选按钮复选框或者

1195
00:29:27,616 --> 00:29:29,116
推送按钮具体靠我们的

1196
00:29:29,116 --> 00:29:30,346
widgetControlType 属性

1197
00:29:30,346 --> 00:29:30,776
来控制

1198
00:29:32,196 --> 00:29:33,666
对于选项小部件

1199
00:29:33,666 --> 00:29:34,066
也是一样

1200
00:29:34,556 --> 00:29:36,176
这里是一个列表框

1201
00:29:36,176 --> 00:29:38,176
视图就像一个表格或者

1202
00:29:38,176 --> 00:29:39,386
类似于下拉菜单的组合框

1203
00:29:39,526 --> 00:29:40,966
这可以通过我们的

1204
00:29:40,966 --> 00:29:42,026
isListChoice 属性来实现

1205
00:29:42,486 --> 00:29:44,036
它的默认类型为

1206
00:29:44,306 --> 00:29:45,886
列表框  但是我想

1207
00:29:45,886 --> 00:29:46,656
让大家知道

1208
00:29:46,656 --> 00:29:47,216
还有另外两种类型

1209
00:29:47,886 --> 00:29:50,176
让我们直接来

1210
00:29:50,176 --> 00:29:50,416
创建一个小部件看看

1211
00:29:50,416 --> 00:29:51,686
我们要创建一个

1212
00:29:51,686 --> 00:29:52,016
文本小部件

1213
00:29:52,686 --> 00:29:54,236
所以我们的子类型

1214
00:29:54,576 --> 00:29:56,326
就是小部件接着在我们

1215
00:29:56,326 --> 00:29:57,366
开始设置属性时  我们知道

1216
00:29:57,366 --> 00:29:58,286
我们得要指定 widgetFieldType

1217
00:29:58,286 --> 00:29:59,156
那我们就将它

1218
00:29:59,156 --> 00:29:59,646
设为 text

1219
00:29:59,746 --> 00:30:00,636
然后我们会设定另外的

1220
00:29:59,746 --> 00:30:00,636
然后我们会设定另外的

1221
00:30:00,636 --> 00:30:00,976
几个属性

1222
00:30:01,376 --> 00:30:03,146
我们设定了背景颜色

1223
00:30:03,376 --> 00:30:05,246
字体字符串值

1224
00:30:05,246 --> 00:30:06,606
然后将它添加至页面

1225
00:30:06,606 --> 00:30:07,736
出来的效果大概

1226
00:30:07,736 --> 00:30:08,026
就是这样

1227
00:30:08,026 --> 00:30:10,076
我们将这个文本小部件

1228
00:30:10,076 --> 00:30:11,366
放在了页面中央处

1229
00:30:11,366 --> 00:30:13,136
蓝色背景显示的字符串为

1230
00:30:13,176 --> 00:30:15,016
WWDC2017

1231
00:30:15,656 --> 00:30:16,746
如果这一切是在视图里

1232
00:30:16,746 --> 00:30:17,796
每当我轻点它

1233
00:30:17,796 --> 00:30:19,056
或者单击它时

1234
00:30:19,056 --> 00:30:19,596
它会全面支持交互

1235
00:30:22,066 --> 00:30:23,836
好我们来看一个

1236
00:30:23,876 --> 00:30:26,016
现实世界中

1237
00:30:26,016 --> 00:30:26,416
使用小部件的例子

1238
00:30:27,226 --> 00:30:28,656
我已经先写了一个

1239
00:30:28,766 --> 00:30:30,966
生成了一个 PDF 内容是

1240
00:30:30,966 --> 00:30:32,266
一份问卷调查并为它

1241
00:30:32,266 --> 00:30:33,626
添加了一些交互表单元素

1242
00:30:34,156 --> 00:30:35,786
我们来看看

1243
00:30:35,786 --> 00:30:36,186
最后的结果是什么样

1244
00:30:36,976 --> 00:30:37,686
就是这个

1245
00:30:37,686 --> 00:30:39,856
有几行文本栏附带

1246
00:30:39,916 --> 00:30:41,876
蓝色背景然后是

1247
00:30:42,106 --> 00:30:43,476
按钮使用我指定的

1248
00:30:43,476 --> 00:30:45,146
灰色背景鉴于我们都是

1249
00:30:45,146 --> 00:30:46,796
小部件魔法师我们都知道

1250
00:30:46,796 --> 00:30:48,346
我们的文本栏应该设为

1251
00:30:48,346 --> 00:30:50,146
widgetFieldType 文本

1252
00:30:50,146 --> 00:30:51,266
按钮也是 widgetFieldType 按钮

1253
00:30:51,526 --> 00:30:53,176
不仅如此我们的

1254
00:30:53,176 --> 00:30:54,416
按钮还会使用适当的

1255
00:30:54,416 --> 00:30:56,826
widgetControlType 集合

1256
00:30:57,376 --> 00:30:58,446
所以我们能看到单选按钮

1257
00:30:58,746 --> 00:31:00,976
复选按钮还有一个推送按钮

1258
00:30:58,746 --> 00:31:00,976
复选按钮还有一个推送按钮

1259
00:31:00,976 --> 00:31:01,896
在下面用来

1260
00:31:01,896 --> 00:31:03,426
重置我的整个

1261
00:31:03,426 --> 00:31:03,726
表单

1262
00:31:04,206 --> 00:31:05,546
不过这个 PDF 上

1263
00:31:05,546 --> 00:31:06,776
有几处地方

1264
00:31:06,876 --> 00:31:07,496
也不太对

1265
00:31:07,646 --> 00:31:09,426
例如当我准备输入

1266
00:31:09,426 --> 00:31:12,686
一个日期 6月9日

1267
00:31:12,686 --> 00:31:13,456
你能看到它并没有

1268
00:31:13,456 --> 00:31:14,726
显示出我想要的间隔样式

1269
00:31:15,186 --> 00:31:16,256
并且我可以输入

1270
00:31:16,256 --> 00:31:18,066
更多的字符比 PDF 告诉我

1271
00:31:18,116 --> 00:31:19,236
应该输入的字符数

1272
00:31:19,236 --> 00:31:19,526
要多很多

1273
00:31:19,906 --> 00:31:20,996
这是不行的

1274
00:31:21,546 --> 00:31:22,596
此外当我选择单选

1275
00:31:22,596 --> 00:31:24,396
按钮时我也可以同时

1276
00:31:24,396 --> 00:31:25,056
把两个都选上

1277
00:31:25,056 --> 00:31:26,126
这并不是单选按钮

1278
00:31:26,126 --> 00:31:27,146
应有的动作

1279
00:31:28,186 --> 00:31:29,546
最后我放在最下方的

1280
00:31:29,546 --> 00:31:31,366
按钮在我单击时

1281
00:31:31,366 --> 00:31:32,436
它一点反应也没有

1282
00:31:32,886 --> 00:31:33,936
那好让我们接着来

1283
00:31:33,936 --> 00:31:35,896
修改所有这些问题

1284
00:31:36,066 --> 00:31:37,466
我们先来看日期栏

1285
00:31:37,506 --> 00:31:38,766
记得出现的问题

1286
00:31:38,766 --> 00:31:39,186
是什么

1287
00:31:39,186 --> 00:31:40,346
问题是间隔样式

1288
00:31:40,346 --> 00:31:41,496
和我们可以输入的

1289
00:31:41,496 --> 00:31:41,786
字符个数

1290
00:31:42,026 --> 00:31:43,276
那么我们先从简单的

1291
00:31:43,276 --> 00:31:44,416
那个开始也就是

1292
00:31:44,416 --> 00:31:44,966
输入字符的个数

1293
00:31:45,586 --> 00:31:47,246
这要通过我们的 maximumLength

1294
00:31:47,246 --> 00:31:47,876
属性来实现

1295
00:31:48,046 --> 00:31:49,936
我们将它设为 5

1296
00:31:49,936 --> 00:31:51,696
月份 2 个字符斜线1个字符

1297
00:31:51,696 --> 00:31:51,976
日子 2 个字符

1298
00:31:51,976 --> 00:31:53,526
接下来是间隔样式

1299
00:31:53,526 --> 00:31:55,116
这个问题看上去有点难

1300
00:31:55,646 --> 00:31:56,916
但实际上凭借 PDFKit

1301
00:31:56,916 --> 00:31:57,516
这一点都不难

1302
00:31:57,886 --> 00:31:58,946
只需要我们设定

1303
00:31:58,946 --> 00:32:00,366
一个属性也就是我们的

1304
00:31:58,946 --> 00:32:00,366
一个属性也就是我们的

1305
00:32:00,366 --> 00:32:01,566
hasComb 属性

1306
00:32:02,436 --> 00:32:04,136
这个属性的用途是

1307
00:32:04,136 --> 00:32:06,096
被设定后会将我们的

1308
00:32:06,096 --> 00:32:07,656
文本小部件切割为

1309
00:32:07,656 --> 00:32:10,076
几个部分或者几处间隔

1310
00:32:10,206 --> 00:32:11,426
数量就等于我们的

1311
00:32:11,426 --> 00:32:12,346
maximumLength 字段的赋值

1312
00:32:12,576 --> 00:32:14,906
这个属性仅可配合

1313
00:32:14,996 --> 00:32:16,676
maximumLength 使用

1314
00:32:17,116 --> 00:32:17,446
好

1315
00:32:17,536 --> 00:32:18,216
一个问题搞定

1316
00:32:18,286 --> 00:32:19,416
接着是单选按钮

1317
00:32:20,746 --> 00:32:22,206
这里的问题是

1318
00:32:22,206 --> 00:32:23,336
它们的动作不像个

1319
00:32:23,336 --> 00:32:23,706
单选按钮

1320
00:32:25,056 --> 00:32:26,806
我们所有的小部件

1321
00:32:26,806 --> 00:32:27,916
都已经有了自己的

1322
00:32:27,916 --> 00:32:29,296
标识符具体是用我们的

1323
00:32:29,296 --> 00:32:30,756
fieldname 属性来控制

1324
00:32:31,246 --> 00:32:32,426
所以如果你想把小部件

1325
00:32:32,426 --> 00:32:33,786
聚合在一起就需要它们

1326
00:32:33,786 --> 00:32:34,596
使用相同的字段名

1327
00:32:35,046 --> 00:32:37,266
我们来试试看

1328
00:32:37,336 --> 00:32:38,636
我们将“是”按钮设为

1329
00:32:38,636 --> 00:32:39,266
问题1

1330
00:32:39,846 --> 00:32:41,616
然后我们的“否”按钮

1331
00:32:41,616 --> 00:32:42,206
也设为问题1

1332
00:32:43,456 --> 00:32:44,296
这里我要说一下

1333
00:32:44,296 --> 00:32:45,206
这里的名称用什么都没关系

1334
00:32:45,206 --> 00:32:46,676
唯一重要的就是

1335
00:32:46,676 --> 00:32:47,596
让两者使用同一个名称

1336
00:32:48,036 --> 00:32:49,506
但当我运行这段代码

1337
00:32:49,506 --> 00:32:50,916
并且选中一个单选按钮后

1338
00:32:50,916 --> 00:32:52,156
结果却是所有选项全部激活

1339
00:32:52,156 --> 00:32:53,486
或者全部关闭

1340
00:32:53,486 --> 00:32:55,116
这是因为我们不知道...

1341
00:32:55,116 --> 00:32:55,676
我们没有一个办法来

1342
00:32:55,676 --> 00:32:57,246
区分“是”按钮

1343
00:32:57,246 --> 00:32:58,016
和“否”按钮

1344
00:32:58,066 --> 00:32:59,856
它们需要各自设定

1345
00:32:59,856 --> 00:33:01,406
只属于自己的

1346
00:32:59,856 --> 00:33:01,406
只属于自己的

1347
00:33:01,406 --> 00:33:02,036
子标识符

1348
00:33:02,646 --> 00:33:04,186
要实现这一点只需要设置一下

1349
00:33:04,186 --> 00:33:05,126
buttonWidgetStateString

1350
00:33:05,126 --> 00:33:05,556
属性

1351
00:33:06,406 --> 00:33:08,186
我们这就来加上去

1352
00:33:08,186 --> 00:33:09,526
将我们的“是”按钮设为“是”

1353
00:33:09,656 --> 00:33:12,046
“否”按钮设为“否”

1354
00:33:12,616 --> 00:33:13,696
同样具体用什么字符串

1355
00:33:13,696 --> 00:33:14,566
都无所谓

1356
00:33:15,006 --> 00:33:17,646
我也可以这个用 “Nicki”

1357
00:33:17,736 --> 00:33:18,616
这个用 “Brower”

1358
00:33:19,676 --> 00:33:20,756
唯一重要的就是

1359
00:33:20,756 --> 00:33:21,106
给他们不同的值

1360
00:33:21,656 --> 00:33:22,916
现在我们已经用 fieldName

1361
00:33:22,916 --> 00:33:24,516
属性将它们聚合在一起

1362
00:33:24,516 --> 00:33:25,906
但我们也用了

1363
00:33:25,906 --> 00:33:27,356
buttonWidgetStateString 属性

1364
00:33:27,356 --> 00:33:28,136
来区分它们

1365
00:33:28,636 --> 00:33:32,146
最后一个问题

1366
00:33:32,146 --> 00:33:32,886
我们的重置按钮

1367
00:33:33,526 --> 00:33:35,636
同样我们希望它能将

1368
00:33:35,636 --> 00:33:37,086
整个表单恢复到

1369
00:33:37,086 --> 00:33:37,426
初始状态

1370
00:33:38,086 --> 00:33:40,016
就像 PDFActionURL

1371
00:33:40,016 --> 00:33:41,866
和 PDFActionGoto 我们也有

1372
00:33:41,866 --> 00:33:43,366
PDFActionResetForm 可以用

1373
00:33:44,016 --> 00:33:45,916
我们现在就来创建它

1374
00:33:47,416 --> 00:33:49,966
这个动作的运行原理是

1375
00:33:49,966 --> 00:33:51,476
获取一个字符串数组

1376
00:33:52,196 --> 00:33:53,396
这些字符串就是字段名

1377
00:33:53,396 --> 00:33:54,896
就像我们为单选按钮

1378
00:33:54,896 --> 00:33:56,856
设置的那些那样

1379
00:33:56,856 --> 00:33:58,046
它的默认行为是

1380
00:33:58,046 --> 00:33:59,376
在执行这个动作后

1381
00:33:59,376 --> 00:34:00,986
它会重置所有与

1382
00:33:59,376 --> 00:34:00,986
它会重置所有与

1383
00:34:00,986 --> 00:34:03,016
我给定的字段名字符串数组

1384
00:34:03,016 --> 00:34:03,886
相关联的小部件

1385
00:34:04,346 --> 00:34:05,486
但是我并不想一个个地

1386
00:34:05,486 --> 00:34:06,586
为我所有的小部件

1387
00:34:06,586 --> 00:34:07,616
指定和区分这些字段名

1388
00:34:07,616 --> 00:34:08,856
这对我来说

1389
00:34:08,856 --> 00:34:09,005
太繁琐了

1390
00:34:09,005 --> 00:34:10,466
所以我要用某种方式

1391
00:34:10,466 --> 00:34:12,326
修改这个动作的行为

1392
00:34:12,326 --> 00:34:13,366
我的做法就是将

1393
00:34:13,366 --> 00:34:14,795
fieldsIncludedAreClear 属性

1394
00:34:14,795 --> 00:34:15,766
设为 false

1395
00:34:16,246 --> 00:34:18,136
就这样只用了一行代码

1396
00:34:18,136 --> 00:34:19,346
我就实现了两个

1397
00:34:19,346 --> 00:34:19,676
不同的目的

1398
00:34:20,426 --> 00:34:21,826
现在我已经将行为

1399
00:34:21,826 --> 00:34:23,196
修改成在我按下...

1400
00:34:23,196 --> 00:34:25,126
在我执行这个动作时

1401
00:34:25,126 --> 00:34:27,036
不在我列表内的小部件

1402
00:34:27,036 --> 00:34:28,266
会被清空

1403
00:34:28,266 --> 00:34:29,966
此外我还没有将任何

1404
00:34:29,966 --> 00:34:30,346
小部件设置到我的列表

1405
00:34:30,906 --> 00:34:31,946
所以现在当我执行这段时

1406
00:34:32,266 --> 00:34:33,576
我文档里的所有小部件

1407
00:34:33,576 --> 00:34:34,716
都会被清空这正是

1408
00:34:34,716 --> 00:34:35,266
我想要的效果

1409
00:34:35,516 --> 00:34:37,366
当然接下来我们就要

1410
00:34:37,366 --> 00:34:38,456
为我们的按钮设置 action 属性

1411
00:34:38,456 --> 00:34:40,255
就这样就只需要

1412
00:34:40,255 --> 00:34:40,985
这三行代码

1413
00:34:41,436 --> 00:34:43,516
现在让我们重新运行

1414
00:34:43,516 --> 00:34:44,706
重新填写一个

1415
00:34:44,706 --> 00:34:45,726
一切功能完备的

1416
00:34:45,726 --> 00:34:46,416
问卷调查

1417
00:34:47,056 --> 00:34:49,326
好了我们来输入姓名

1418
00:34:49,966 --> 00:34:52,505
Nicki Brower 日期

1419
00:34:52,505 --> 00:34:53,926
6 月 9 日

1420
00:34:54,406 --> 00:34:55,606
我们看到了想要的

1421
00:34:55,606 --> 00:34:57,426
间隔样式我不知道大家

1422
00:34:57,426 --> 00:34:58,386
能否听见但我正在按动按钮

1423
00:34:58,386 --> 00:34:59,496
我也无法继续输入

1424
00:34:59,496 --> 00:35:01,496
超过规定数量的字符

1425
00:34:59,496 --> 00:35:01,496
超过规定数量的字符

1426
00:35:01,496 --> 00:35:02,586
就像我们想要的那样

1427
00:35:03,356 --> 00:35:04,096
您以前曾参加过

1428
00:35:04,096 --> 00:35:04,856
音乐节吗

1429
00:35:04,986 --> 00:35:06,516
“否”等等“是”我去过

1430
00:35:07,346 --> 00:35:08,176
您曾参加过以下

1431
00:35:08,176 --> 00:35:09,296
哪个音乐节

1432
00:35:09,436 --> 00:35:10,776
我去过 iFestival

1433
00:35:10,776 --> 00:35:12,946
Swiftopia 但没去过 Applepalooza

1434
00:35:14,016 --> 00:35:15,436
请给出一条针对音乐节的

1435
00:35:15,436 --> 00:35:17,046
改进建议

1436
00:35:17,916 --> 00:35:21,026
所有的音乐节都应该

1437
00:35:21,026 --> 00:35:21,366
能免费参加

1438
00:35:21,366 --> 00:35:23,816
我还想说明一下

1439
00:35:23,816 --> 00:35:25,346
我们的文本小部件默认

1440
00:35:25,346 --> 00:35:26,926
为单行  但如何你想让它

1441
00:35:26,926 --> 00:35:28,116
变成多行并且附带

1442
00:35:28,116 --> 00:35:29,186
自动换行就像我这个这样

1443
00:35:29,186 --> 00:35:30,736
所有这些只需要设置一个

1444
00:35:30,736 --> 00:35:31,906
简单的类别方法

1445
00:35:31,906 --> 00:35:32,216
就能做到

1446
00:35:32,856 --> 00:35:34,436
现在有了这个 PDF

1447
00:35:34,436 --> 00:35:35,696
我可以保存它  它会记下

1448
00:35:35,696 --> 00:35:36,806
我想要的所有数据值

1449
00:35:36,806 --> 00:35:38,176
我可以将它发送给别人

1450
00:35:38,176 --> 00:35:39,186
他们也能看到我的数据值

1451
00:35:39,666 --> 00:35:41,886
或者我想要的话还可以

1452
00:35:41,886 --> 00:35:43,336
接着清空我的整个 PDF

1453
00:35:43,576 --> 00:35:45,326
使用最下方的

1454
00:35:45,326 --> 00:35:45,916
“清除”按钮即可

1455
00:35:46,346 --> 00:35:47,716
所以我按一下它一切就又

1456
00:35:47,716 --> 00:35:48,856
回归到一开始的样子

1457
00:35:49,896 --> 00:35:51,226
这也是我们想要

1458
00:35:51,226 --> 00:35:51,636
看到的行为

1459
00:35:52,346 --> 00:35:53,586
那么我给大家看了 PDFKit

1460
00:35:53,586 --> 00:35:54,996
它的使用方法并不难不管是

1461
00:35:55,036 --> 00:35:57,126
生成简单的 PDF 还是添加小部件

1462
00:35:57,126 --> 00:35:58,276
现在你有了一个完全

1463
00:35:58,276 --> 00:35:59,366
支持交互的 PDF 可以

1464
00:35:59,366 --> 00:36:00,396
随意分享给任何人

1465
00:35:59,366 --> 00:36:00,396
随意分享给任何人

1466
00:36:00,496 --> 00:36:02,126
我不知道大家有什么想法

1467
00:36:02,126 --> 00:36:03,666
我个人是觉得它挺好用的

1468
00:36:03,666 --> 00:36:04,976
那么我们继续下一环节

1469
00:36:05,516 --> 00:36:08,436
[掌声]

1470
00:36:08,936 --> 00:36:09,726
那么接下来交回给

1471
00:36:09,726 --> 00:36:10,686
Jeremy 他会为大家

1472
00:36:10,686 --> 00:36:11,976
介绍几种最佳实践

1473
00:36:16,416 --> 00:36:16,856
&gt;&gt; 真棒

1474
00:36:17,316 --> 00:36:18,476
谢谢你 Nicki

1475
00:36:19,276 --> 00:36:21,116
所以在今年 Annotations 经过了

1476
00:36:21,116 --> 00:36:22,596
大幅改进我们也修正了

1477
00:36:23,006 --> 00:36:24,956
PDFKit 中的许多问题

1478
00:36:24,956 --> 00:36:26,376
还大幅改进了

1479
00:36:26,376 --> 00:36:27,276
其他的功能

1480
00:36:27,696 --> 00:36:29,096
根据我们的经验

1481
00:36:29,096 --> 00:36:30,076
我们很想为大家

1482
00:36:30,076 --> 00:36:30,936
提供几条建议

1483
00:36:30,936 --> 00:36:32,326
供大家借鉴用来优化

1484
00:36:32,326 --> 00:36:33,196
你们的代码

1485
00:36:33,786 --> 00:36:35,346
那么几条建议

1486
00:36:35,346 --> 00:36:35,816
直接入正题

1487
00:36:36,216 --> 00:36:38,076
对于你想在运行时生成的

1488
00:36:38,076 --> 00:36:40,396
任何一种交互元素

1489
00:36:40,396 --> 00:36:41,786
或复杂图形

1490
00:36:41,786 --> 00:36:42,346
全部使用 annotation

1491
00:36:42,686 --> 00:36:44,256
我们投入了很大心力

1492
00:36:44,256 --> 00:36:45,576
来优化这些图形

1493
00:36:45,576 --> 00:36:46,696
所以非常推荐大家

1494
00:36:46,696 --> 00:36:47,276
善加利用

1495
00:36:47,656 --> 00:36:48,746
当然如果你想要

1496
00:36:48,746 --> 00:36:50,516
修改 PDFAnnotation

1497
00:36:50,986 --> 00:36:51,956
不妨善加利用

1498
00:36:51,956 --> 00:36:53,786
PDFAnnotationUtilities 类别的

1499
00:36:53,786 --> 00:36:54,866
类扩展

1500
00:36:55,266 --> 00:36:56,536
其中的原因就如 Nicki 所说

1501
00:36:56,536 --> 00:36:57,736
是因为这些都属于

1502
00:36:57,736 --> 00:36:58,536
静态类型函数

1503
00:36:58,816 --> 00:37:00,046
你不用再担心

1504
00:36:58,816 --> 00:37:00,046
你不用再担心

1505
00:37:00,046 --> 00:37:01,196
一个直线点其实是

1506
00:37:01,236 --> 00:37:01,696
一个由多个点组成的数组

1507
00:37:01,696 --> 00:37:03,046
实际上一个直线点

1508
00:37:03,146 --> 00:37:05,186
就是一个 CG 点一对 CG 点

1509
00:37:05,516 --> 00:37:06,396
这个概念非常清晰

1510
00:37:07,026 --> 00:37:08,546
最后如果你想要完成

1511
00:37:08,546 --> 00:37:10,506
自定义 PDFPage 绘制

1512
00:37:10,506 --> 00:37:12,186
就需要让你的代码

1513
00:37:12,376 --> 00:37:13,246
做到线程安全

1514
00:37:13,566 --> 00:37:14,786
这同样是因为

1515
00:37:14,786 --> 00:37:15,976
我们投入了很多心力

1516
00:37:15,976 --> 00:37:17,576
来优化 PDFKit 让它

1517
00:37:17,576 --> 00:37:19,086
尽可能地快速绘制

1518
00:37:19,086 --> 00:37:20,256
我们希望能够好好利用

1519
00:37:20,256 --> 00:37:21,236
我们的不同平台用到的

1520
00:37:21,236 --> 00:37:21,486
所有核心

1521
00:37:21,926 --> 00:37:23,216
鉴于我们有许多平台

1522
00:37:23,216 --> 00:37:25,146
采用多核设计完全有可能

1523
00:37:25,146 --> 00:37:26,766
出现两个线程同时

1524
00:37:26,766 --> 00:37:28,316
在主视图中绘制 PDFPage

1525
00:37:28,316 --> 00:37:30,396
和在缩略图中绘制 PDFPage

1526
00:37:30,396 --> 00:37:31,766
的情况

1527
00:37:32,186 --> 00:37:33,276
所以一定要确保

1528
00:37:33,276 --> 00:37:33,846
你的代码线程安全

1529
00:37:34,296 --> 00:37:35,636
出于同样原因在你

1530
00:37:35,636 --> 00:37:37,386
执行自定义 PDFPage 绘制时

1531
00:37:37,386 --> 00:37:39,116
确保你在恰当的时点

1532
00:37:39,116 --> 00:37:40,556
调用 super

1533
00:37:40,686 --> 00:37:41,796
如果你想让你的图形

1534
00:37:41,796 --> 00:37:43,236
覆盖在现有内容的上方

1535
00:37:43,536 --> 00:37:44,896
先调用 super 然后再执行

1536
00:37:44,896 --> 00:37:45,896
你的自定义绘制代码

1537
00:37:46,236 --> 00:37:47,216
或者你想把自定义图形

1538
00:37:47,216 --> 00:37:48,396
叠压在内容的下方

1539
00:37:48,426 --> 00:37:50,306
那就先执行你的代码

1540
00:37:50,306 --> 00:37:51,966
最后再来执行

1541
00:37:51,966 --> 00:37:52,456
super

1542
00:37:53,146 --> 00:37:54,706
接着我们建议不要

1543
00:37:54,816 --> 00:37:57,056
在今后应用中做的事

1544
00:37:57,136 --> 00:37:58,976
由于 PDFView 在两个平台上

1545
00:37:58,976 --> 00:38:00,166
分别以 UIView 和 NSView 为基础

1546
00:37:58,976 --> 00:38:00,166
分别以 UIView 和 NSView 为基础

1547
00:38:00,166 --> 00:38:02,426
这些视图类让你

1548
00:38:02,426 --> 00:38:04,166
可以调用一个叫作

1549
00:38:04,166 --> 00:38:06,006
setNeedsDisplay 的方法

1550
00:38:06,006 --> 00:38:07,386
或者它的一些变种

1551
00:38:07,666 --> 00:38:08,536
这个方法的调用成本

1552
00:38:08,536 --> 00:38:10,096
其实非常高  因为这会

1553
00:38:10,096 --> 00:38:11,936
一次性地刷新所有内容

1554
00:38:12,036 --> 00:38:12,576
成本是很高的

1555
00:38:12,926 --> 00:38:13,816
所以尽量别用它

1556
00:38:13,816 --> 00:38:14,876
同样如果你想要

1557
00:38:14,876 --> 00:38:15,956
使用自定义图形不妨

1558
00:38:15,956 --> 00:38:16,576
考虑 annotation

1559
00:38:17,276 --> 00:38:19,266
最后不要同时在

1560
00:38:19,266 --> 00:38:20,866
不同的线程中修改

1561
00:38:20,866 --> 00:38:21,446
PDFPage 的属性

1562
00:38:21,736 --> 00:38:23,806
一个很好的例子就是

1563
00:38:23,806 --> 00:38:25,356
不要在旋转 PDFPage 的同时

1564
00:38:25,356 --> 00:38:26,676
又去绘制缩略图

1565
00:38:27,016 --> 00:38:28,406
在这类情况下

1566
00:38:28,526 --> 00:38:30,406
可能会出现一些

1567
00:38:30,546 --> 00:38:31,446
未定义的视觉效果

1568
00:38:32,116 --> 00:38:33,596
最后专门针对

1569
00:38:33,596 --> 00:38:35,266
Mac OS 平台尽量不要

1570
00:38:35,266 --> 00:38:36,936
使用已弃用的

1571
00:38:36,936 --> 00:38:37,346
绘制方法

1572
00:38:37,786 --> 00:38:39,076
这里的原因可以一直

1573
00:38:39,076 --> 00:38:40,586
追溯到多线程绘制的问题

1574
00:38:40,966 --> 00:38:42,236
总之我们搭建了这些

1575
00:38:42,236 --> 00:38:43,456
非常复杂的上下文

1576
00:38:43,456 --> 00:38:44,286
好让大家可以绘制出

1577
00:38:44,286 --> 00:38:45,916
漂亮的图形我们也希望

1578
00:38:45,916 --> 00:38:46,816
能将这些上下文

1579
00:38:46,896 --> 00:38:47,746
清晰地传达给你们

1580
00:38:47,746 --> 00:38:48,976
这些新命名就是

1581
00:38:48,976 --> 00:38:49,326
出于这样的目的

1582
00:38:49,636 --> 00:38:50,836
以前的命名方式表达的

1583
00:38:50,886 --> 00:38:52,316
上下文很模糊而我们想让

1584
00:38:52,316 --> 00:38:53,366
大家尽量避免

1585
00:38:53,366 --> 00:38:53,806
这种问题

1586
00:38:54,516 --> 00:38:56,096
以上就是我们给大家的

1587
00:38:56,096 --> 00:38:56,836
几条小建议

1588
00:38:57,866 --> 00:38:59,366
但再说回 PDFKit

1589
00:38:59,366 --> 00:39:01,076
我们想要强调

1590
00:38:59,366 --> 00:39:01,076
我们想要强调

1591
00:39:01,226 --> 00:39:02,626
如今应用开发者对于 PDF 处理

1592
00:39:02,626 --> 00:39:04,186
真的非常容易上手

1593
00:39:04,186 --> 00:39:05,956
他们可以只是用 PDFView 

1594
00:39:05,956 --> 00:39:07,226
查看一个文档也可以

1595
00:39:07,226 --> 00:39:08,906
完全创建一个全新的文档

1596
00:39:09,156 --> 00:39:10,216
又或者使用现有的文档

1597
00:39:10,216 --> 00:39:11,266
为它添加一些

1598
00:39:11,266 --> 00:39:12,226
新的内容

1599
00:39:12,866 --> 00:39:15,176
要读取修改保存这些文件

1600
00:39:15,306 --> 00:39:16,886
也十分容易

1601
00:39:16,886 --> 00:39:17,796
你还可以用 PDF 规范

1602
00:39:17,796 --> 00:39:19,596
支持的最新加密方法

1603
00:39:19,596 --> 00:39:20,886
来保存文件

1604
00:39:21,706 --> 00:39:22,966
当然在你使用最新的

1605
00:39:22,966 --> 00:39:24,416
PDF 规范保存这些文件时

1606
00:39:24,416 --> 00:39:26,026
也可以用这些

1607
00:39:26,026 --> 00:39:27,236
非常强大的表单字段小部件

1608
00:39:27,236 --> 00:39:28,746
来创建这些文件

1609
00:39:28,746 --> 00:39:30,046
这意味着将有支持完全交互的

1610
00:39:30,046 --> 00:39:31,266
表单供你填写

1611
00:39:31,266 --> 00:39:32,866
满足你的企业需要

1612
00:39:32,986 --> 00:39:34,406
或者你的任何其他需要

1613
00:39:35,346 --> 00:39:37,106
最后通过使用 PDFView

1614
00:39:37,106 --> 00:39:38,626
别忘了还能让你

1615
00:39:38,686 --> 00:39:40,186
获得具备充分可访问性的改进

1616
00:39:40,186 --> 00:39:41,396
这是我们这一年里

1617
00:39:41,396 --> 00:39:43,136
在两个平台上的努力成果

1618
00:39:43,496 --> 00:39:44,916
如果你的用户有任何

1619
00:39:44,916 --> 00:39:46,646
可访问性方面的需要就可以

1620
00:39:46,646 --> 00:39:48,136
方便地利用这项成果

1621
00:39:48,136 --> 00:39:49,106
你也不用担心

1622
00:39:49,106 --> 00:39:50,226
任何自定义的编写程序

1623
00:39:50,906 --> 00:39:51,906
我和 Nicki 想要

1624
00:39:51,906 --> 00:39:53,216
真心地感谢各位

1625
00:39:53,216 --> 00:39:53,956
参加今天的讲坛

1626
00:39:54,016 --> 00:39:55,166
大家若有任何问题

1627
00:39:55,166 --> 00:39:56,216
[掌声] 谢谢

1628
00:39:56,436 --> 00:39:57,776
请查看我们的网站

1629
00:39:57,776 --> 00:39:58,786
或者直接来讲台这里

1630
00:39:58,786 --> 00:39:59,796
我们很愿意解答

1631
00:39:59,796 --> 00:40:00,306
任何问题

1632
00:39:59,796 --> 00:40:00,306
任何问题

1633
00:40:00,616 --> 00:40:02,336
祝大家在 WWDC 上玩得开心

1634
00:40:02,336 --> 00:40:02,926
再次感谢
