1
00:00:19,636 --> 00:00:20,386
&gt;&gt; 早上好

2
00:00:21,029 --> 00:00:23,029
[掌声]

3
00:00:23,042 --> 00:00:25,042
[掌声]

4
00:00:25,056 --> 00:00:25,386
谢谢

5
00:00:26,066 --> 00:00:27,156
我是 Chris Dreesen

6
00:00:27,396 --> 00:00:28,766
这里是“Touch Bar Fundamentals（Touch Bar 基础）”

7
00:00:29,136 --> 00:00:30,646
如果你还不知道

8
00:00:30,646 --> 00:00:32,235
什么是 Touch Bar  那我真的不确定你为什么

9
00:00:32,235 --> 00:00:33,336
会在这儿出现 但是我对你的到来

10
00:00:33,336 --> 00:00:33,656
感到非常开心

11
00:00:34,286 --> 00:00:36,876
或许我们中的绝大多数人都

12
00:00:36,876 --> 00:00:38,776
对 Touch Bar 有所了解  但是

13
00:00:38,776 --> 00:00:39,596
可能还没有机会去

14
00:00:39,596 --> 00:00:40,296
真正使用它

15
00:00:40,296 --> 00:00:42,426
所以 让我来为大家介绍一下

16
00:00:42,806 --> 00:00:44,346
现在我们这里有一张 MacBook Pro

17
00:00:44,346 --> 00:00:45,856
的图片 在你们熟悉的

18
00:00:45,856 --> 00:00:47,586
功能键的位置 我们有一个

19
00:00:47,586 --> 00:00:48,566
叫做 Touch Bar 的

20
00:00:48,606 --> 00:00:48,846
东西

21
00:00:49,146 --> 00:00:50,816
这是一个交互式输入

22
00:00:50,816 --> 00:00:51,796
和显示的设备

23
00:00:52,226 --> 00:00:53,596
让我带领大家来

24
00:00:53,596 --> 00:00:53,996
熟悉它

25
00:00:53,996 --> 00:00:56,686
在触摸条左边有我们每个人

26
00:00:56,686 --> 00:00:58,216
都非常熟悉的

27
00:00:58,216 --> 00:00:58,896
Escape 键

28
00:00:59,226 --> 00:01:00,026
在右边

29
00:00:59,226 --> 00:01:00,026
在右边

30
00:01:00,026 --> 00:01:01,136
有一个叫做 Control Strip 的东西

31
00:01:01,586 --> 00:01:02,756
如果你愿意

32
00:01:02,756 --> 00:01:04,086
你可以展开

33
00:01:04,086 --> 00:01:04,446
Control Strip

34
00:01:04,796 --> 00:01:05,886
这样 你将会得到和

35
00:01:05,886 --> 00:01:07,406
以前的功能键一样的

36
00:01:07,406 --> 00:01:07,766
功能

37
00:01:08,206 --> 00:01:09,276
然后你可以和原来一样

38
00:01:09,276 --> 00:01:10,566
把它们当成按钮来

39
00:01:11,286 --> 00:01:12,246
使用

40
00:01:12,646 --> 00:01:14,366
不过 你其实不必

41
00:01:14,616 --> 00:01:15,006
展开它

42
00:01:16,006 --> 00:01:18,556
你可以直接

43
00:01:18,556 --> 00:01:20,086
使用它的折叠

44
00:01:20,086 --> 00:01:20,346
形式

45
00:01:20,756 --> 00:01:21,846
当它处于折叠形式的时候

46
00:01:21,846 --> 00:01:22,906
它同样有很多巧妙的功能

47
00:01:23,166 --> 00:01:24,706
我们可以通过直接在

48
00:01:24,706 --> 00:01:26,296
音量键上随意滑动

49
00:01:26,296 --> 00:01:27,376
来调整声音大小

50
00:01:27,796 --> 00:01:28,886
这里有很多

51
00:01:28,886 --> 00:01:30,306
便捷的方式来调整

52
00:01:30,306 --> 00:01:31,346
特定的系统功能

53
00:01:31,866 --> 00:01:33,586
但是 这还不是 Touch Bar 最

54
00:01:33,586 --> 00:01:34,566
有趣的部分

55
00:01:34,566 --> 00:01:35,866
最有趣的部分在

56
00:01:35,866 --> 00:01:37,546
Escape 键和 Control Strip 键

57
00:01:37,546 --> 00:01:38,126
之间

58
00:01:38,426 --> 00:01:38,936
这里是你的

59
00:01:38,936 --> 00:01:40,066
应用程序内容所处的

60
00:01:40,066 --> 00:01:40,266
位置

61
00:01:40,676 --> 00:01:41,446
让我来向你们展示

62
00:01:41,446 --> 00:01:42,636
我们的系统应用

63
00:01:42,636 --> 00:01:43,306
在这里的

64
00:01:44,616 --> 00:01:45,696
这里是“照片”应用

65
00:01:46,316 --> 00:01:47,646
我们正在浏览

66
00:01:47,646 --> 00:01:48,436
照片库

67
00:01:48,636 --> 00:01:50,016
我们可以

68
00:01:50,016 --> 00:01:51,836
在这里滑动浏览

69
00:01:51,836 --> 00:01:52,056
照片库

70
00:01:52,056 --> 00:01:53,306
这就像在 iOS 里可以直接

71
00:01:53,306 --> 00:01:54,586
用我们的手指输入一样

72
00:01:54,586 --> 00:01:56,006
我们将手指放在

73
00:01:56,006 --> 00:01:57,616
Touch Bar 上然后它就会追踪我们的

74
00:01:57,616 --> 00:01:57,766
指尖

75
00:01:57,886 --> 00:01:59,476
如果我们希望能快速地进行浏览

76
00:01:59,476 --> 00:02:01,386
我们可通过快速滑动

77
00:01:59,476 --> 00:02:01,386
我们可通过快速滑动

78
00:02:01,386 --> 00:02:02,056
来实现

79
00:02:02,116 --> 00:02:05,106
如果你想编辑图片 这里

80
00:02:05,216 --> 00:02:07,106
是图片剪裁和旋转

81
00:02:07,106 --> 00:02:07,326
工具

82
00:02:07,596 --> 00:02:08,506
在 Touch Bar 中间有一个

83
00:02:08,506 --> 00:02:09,326
可以直接跟踪

84
00:02:09,326 --> 00:02:10,626
你的手指的旋转控件

85
00:02:10,846 --> 00:02:11,996
它很有趣 因为

86
00:02:11,996 --> 00:02:12,666
这有点像直接在

87
00:02:12,666 --> 00:02:15,596
桌上用手指旋转

88
00:02:15,906 --> 00:02:16,226
图片

89
00:02:16,846 --> 00:02:19,046
最后 图片还可以使用

90
00:02:19,046 --> 00:02:19,506
滤镜

91
00:02:19,606 --> 00:02:21,106
我们可以在滤镜之间

92
00:02:21,106 --> 00:02:21,856
滑动

93
00:02:22,116 --> 00:02:23,196
这是 Touch Bar 的一个有趣的

94
00:02:23,196 --> 00:02:24,736
使用方式 因为通常我们使用

95
00:02:24,736 --> 00:02:25,716
鼠标或者触控板时

96
00:02:25,716 --> 00:02:27,316
我们会

97
00:02:27,316 --> 00:02:29,006
先看照片 然后

98
00:02:29,006 --> 00:02:30,656
看滤镜部分

99
00:02:30,656 --> 00:02:31,876
再用鼠标和触控板

100
00:02:31,876 --> 00:02:32,946
选择下一个滤镜

101
00:02:33,166 --> 00:02:34,036
使用 Touch Bar 我们可以

102
00:02:34,036 --> 00:02:35,406
只将视线放在猫

103
00:02:36,076 --> 00:02:36,186
上

104
00:02:37,376 --> 00:02:38,926
这里是一个 QuickTime 播放器

105
00:02:38,926 --> 00:02:40,546
它在 Touch Bar 上有一个

106
00:02:40,546 --> 00:02:41,666
滑动控制器

107
00:02:41,666 --> 00:02:43,006
使我们能对一部电影快进或快退

108
00:02:43,006 --> 00:02:44,486
简单利落

109
00:02:44,616 --> 00:02:45,526
他们还提供

110
00:02:45,526 --> 00:02:46,776
一个类似的剪辑功能控件

111
00:02:46,776 --> 00:02:48,976
使我们能调整

112
00:02:48,976 --> 00:02:50,396
我们所拍摄的电影的

113
00:02:50,396 --> 00:02:51,156
开头和结尾

114
00:02:51,766 --> 00:02:52,866
关于 QuickTime 播放器

115
00:02:52,906 --> 00:02:54,206
我想指出的是

116
00:02:54,206 --> 00:02:55,176
QuickTime 播放器没有

117
00:02:55,176 --> 00:02:56,756
对此功能编写任何程序 此功能

118
00:02:56,756 --> 00:02:58,306
是包括在 AVKit 和 AVplayer 视图

119
00:02:58,306 --> 00:02:58,896
中

120
00:02:58,896 --> 00:03:00,236
如果你已经在使用

121
00:02:58,896 --> 00:03:00,236
如果你已经在使用

122
00:03:00,236 --> 00:03:01,446
AVKit 那么恭喜你 你可能已经

123
00:03:01,446 --> 00:03:02,426
自动获得了这项

124
00:03:02,706 --> 00:03:03,506
功能

125
00:03:04,496 --> 00:03:06,496
现在让我们来看看文本

126
00:03:06,496 --> 00:03:06,796
编辑

127
00:03:07,226 --> 00:03:08,586
在座各位应该很熟悉

128
00:03:08,586 --> 00:03:09,646
iOS 上的 QuickType 了

129
00:03:09,886 --> 00:03:10,956
我们已经将 QuickType

130
00:03:10,956 --> 00:03:12,636
放置在了 macOS 的 Touch Bar 上

131
00:03:12,636 --> 00:03:14,036
众所周知

132
00:03:14,036 --> 00:03:15,426
QuickType 是一个非常好的短篇小说

133
00:03:15,426 --> 00:03:16,366
写作工具

134
00:03:16,776 --> 00:03:18,176
如果我们在这里写一个小故事

135
00:03:18,176 --> 00:03:20,456
其实这不是

136
00:03:20,456 --> 00:03:21,996
我看过的最好的

137
00:03:21,996 --> 00:03:22,986
短篇小说

138
00:03:23,456 --> 00:03:24,856
但是没关系 因为

139
00:03:24,856 --> 00:03:25,836
Touch Bar 能为我们提供一个让其增色

140
00:03:25,836 --> 00:03:26,096
的方法

141
00:03:26,096 --> 00:03:27,456
我们还有表情符号选择条

142
00:03:28,426 --> 00:03:30,696
我们来让它变得有趣

143
00:03:30,696 --> 00:03:31,026
一点

144
00:03:31,026 --> 00:03:33,056
我们可以在这里浏览表情符号

145
00:03:33,056 --> 00:03:34,306
比如 我笑了 我哭了

146
00:03:34,306 --> 00:03:36,236
我变成了一只青蛙 然后我很开心

147
00:03:36,236 --> 00:03:37,526
因为我不再是一只青蛙了

148
00:03:37,826 --> 00:03:39,126
我为我们的故事加上了一些非常好的人物情感

149
00:03:39,126 --> 00:03:40,826
和喜剧效果

150
00:03:41,136 --> 00:03:42,076
而这都要感谢 Touch Bar

151
00:03:43,286 --> 00:03:45,756
显而易见文本编辑是一款

152
00:03:45,756 --> 00:03:46,806
文本编辑工具

153
00:03:46,806 --> 00:03:48,626
我们可以将 QuickType 的选项折叠起来

154
00:03:48,626 --> 00:03:49,766
然后调出文本

155
00:03:49,766 --> 00:03:50,586
排版控件

156
00:03:50,766 --> 00:03:51,916
可能最有用的事情就是

157
00:03:51,916 --> 00:03:53,116
让它加粗或者变成斜体

158
00:03:53,116 --> 00:03:54,636
或者加上颜色

159
00:03:54,636 --> 00:03:55,856
粉色感觉很适合故事中

160
00:03:55,856 --> 00:03:57,076
我变成了青蛙然后不再是青蛙的

161
00:03:57,076 --> 00:03:57,656
部分

162
00:03:57,996 --> 00:03:58,946
不论如何 让我们别再说起

163
00:03:58,946 --> 00:03:59,516
这个了

164
00:04:00,886 --> 00:04:02,406
关于我给大家展示的

165
00:04:02,406 --> 00:04:03,456
这些例子 我还想指出的是

166
00:04:03,456 --> 00:04:04,656
它们都是

167
00:04:04,656 --> 00:04:05,356
可以自定义的

168
00:04:05,356 --> 00:04:07,056
我们有一个 Touch Bar 的

169
00:04:07,396 --> 00:04:08,696
自定义面板

170
00:04:09,036 --> 00:04:10,286
你可以在这上面重新编排

171
00:04:10,286 --> 00:04:10,406
控件

172
00:04:10,646 --> 00:04:11,876
你可以从屏幕上的自定义面板中

173
00:04:11,876 --> 00:04:12,876
添加控件

174
00:04:12,876 --> 00:04:14,086
也可以将控件从 Touch Bar 中

175
00:04:14,086 --> 00:04:14,576
移除

176
00:04:14,886 --> 00:04:16,326
这很重要

177
00:04:16,326 --> 00:04:17,456
因为每个用户的使用习惯

178
00:04:17,456 --> 00:04:18,286
是不一样的

179
00:04:18,286 --> 00:04:19,245
有些人喜欢用

180
00:04:19,245 --> 00:04:20,375
应用做不同的事

181
00:04:20,375 --> 00:04:21,366
有些人则喜欢用其他方式

182
00:04:21,366 --> 00:04:22,396
使用电脑

183
00:04:22,616 --> 00:04:24,196
通过实现自定义

184
00:04:24,486 --> 00:04:25,766
你可以给用户

185
00:04:25,766 --> 00:04:26,606
他们想要的体验

186
00:04:27,116 --> 00:04:28,086
接下来我将教大家

187
00:04:28,086 --> 00:04:29,126
如何通过编程实现这个

188
00:04:29,126 --> 00:04:29,626
功能

189
00:04:30,376 --> 00:04:31,526
我们先来讲讲

190
00:04:31,526 --> 00:04:33,046
这个功能的技术细节

191
00:04:33,926 --> 00:04:35,026
和这些细节的

192
00:04:35,026 --> 00:04:35,256
含义

193
00:04:35,646 --> 00:04:36,776
Touch Bar 是一个

194
00:04:36,776 --> 00:04:38,406
很绚丽的 P3 Retina 显示器

195
00:04:38,406 --> 00:04:40,456
他有很棒的 P3 色域

196
00:04:40,766 --> 00:04:42,496
迷人的黑色 让显示内容

197
00:04:42,496 --> 00:04:43,076
对比鲜明

198
00:04:43,436 --> 00:04:46,276
这也意味着

199
00:04:46,276 --> 00:04:47,586
我们在应用里包含的的素材

200
00:04:47,586 --> 00:04:49,046
不需要像主屏幕上

201
00:04:49,046 --> 00:04:50,176
那么多

202
00:04:50,866 --> 00:04:52,736
不仅如此 这还是一个多点触控的设备

203
00:04:52,736 --> 00:04:54,476
这意味着我们能跟踪到

204
00:04:54,476 --> 00:04:55,906
多个手指

205
00:04:56,276 --> 00:04:57,836
这也为我们能制作的控件

206
00:04:57,836 --> 00:04:58,726
提供了一些

207
00:04:58,726 --> 00:04:59,536
新的选择

208
00:04:59,696 --> 00:05:01,326
说起 Touch Bar

209
00:04:59,696 --> 00:05:01,326
说起 Touch Bar

210
00:05:01,326 --> 00:05:02,176
你经常听到词的将是

211
00:05:02,176 --> 00:05:02,996
上下文敏感

212
00:05:03,556 --> 00:05:05,626
使用户能在合适的应用中

213
00:05:05,676 --> 00:05:07,336
使用功能的

214
00:05:07,336 --> 00:05:08,536
其实很简单

215
00:05:08,536 --> 00:05:10,606
但是它具有

216
00:05:10,606 --> 00:05:11,916
处理事件的意义

217
00:05:11,916 --> 00:05:13,116
因为我们的用户在使用 Touch Bar 时

218
00:05:13,116 --> 00:05:14,956
应用中的上下文

219
00:05:14,956 --> 00:05:16,286
可能会发生变化

220
00:05:16,396 --> 00:05:17,876
而我们的控件需要对变化

221
00:05:18,716 --> 00:05:19,176
进行应对

222
00:05:19,246 --> 00:05:20,686
最后 我们

223
00:05:20,686 --> 00:05:22,726
需要将 Touch Bar上的

224
00:05:22,726 --> 00:05:24,426
按钮 符号

225
00:05:24,426 --> 00:05:25,946
与物理键盘

226
00:05:25,946 --> 00:05:27,016
进行对应

227
00:05:27,016 --> 00:05:28,136
并且我们通过检测

228
00:05:28,136 --> 00:05:29,446
环境的亮度来判断

229
00:05:29,446 --> 00:05:30,626
键盘的背灯是否应该

230
00:05:30,626 --> 00:05:30,816
亮起

231
00:05:31,126 --> 00:05:32,296
这将影响我们如何

232
00:05:32,296 --> 00:05:33,336
绘制自定义

233
00:05:33,336 --> 00:05:33,876
控件

234
00:05:34,246 --> 00:05:35,116
但是在本次会议里

235
00:05:35,116 --> 00:05:35,996
我们不会讲到

236
00:05:35,996 --> 00:05:37,196
相关内容

237
00:05:37,196 --> 00:05:38,316
在今天下午的会议上

238
00:05:38,316 --> 00:05:39,846
将会讲到所有这些

239
00:05:39,846 --> 00:05:40,616
话题

240
00:05:41,876 --> 00:05:44,856
我想 只要你听到了这里

241
00:05:44,856 --> 00:05:45,676
甚至可能在这之前 你就已经

242
00:05:45,676 --> 00:05:46,516
想要把

243
00:05:46,516 --> 00:05:47,746
Touch Bar 支持加入到

244
00:05:47,746 --> 00:05:49,006
你的应用中去了

245
00:05:49,006 --> 00:05:49,686
如果你还没有的话

246
00:05:49,686 --> 00:05:50,896
不过 当你设计你的 UI 时

247
00:05:50,896 --> 00:05:52,326
有几点是应该

248
00:05:52,326 --> 00:05:53,056
记住的

249
00:05:53,396 --> 00:05:54,506
首先

250
00:05:54,506 --> 00:05:56,146
Touch Bar 的第一指导原则是

251
00:05:56,146 --> 00:05:57,316
它是一个输入

252
00:05:57,316 --> 00:05:57,716
设备

253
00:05:57,716 --> 00:05:58,936
这意味着它应该能

254
00:05:58,936 --> 00:05:59,516
与用户互动

255
00:05:59,766 --> 00:06:00,616
它不应该被当成显示器

256
00:05:59,766 --> 00:06:00,616
它不应该被当成显示器

257
00:06:00,616 --> 00:06:01,416
来使用

258
00:06:01,416 --> 00:06:02,696
所以 不要加入状态指示器

259
00:06:02,696 --> 00:06:03,406
或者股票 K 线图

260
00:06:04,046 --> 00:06:05,656
另外一件需要记住的事是

261
00:06:05,656 --> 00:06:06,706
在制作 Touch Bar UI 时

262
00:06:06,706 --> 00:06:09,046
我们不希望将应用中

263
00:06:09,046 --> 00:06:10,396
别的地方

264
00:06:10,426 --> 00:06:11,886
都没有的功能

265
00:06:11,886 --> 00:06:12,906
加到 Touch Bar 里

266
00:06:13,226 --> 00:06:14,746
Touch Bar UI 可以有趣 可以存在空白

267
00:06:14,746 --> 00:06:16,066
这些都很好

268
00:06:16,066 --> 00:06:17,216
但这不应该成为访问功能

269
00:06:17,216 --> 00:06:17,876
的唯一途径

270
00:06:18,326 --> 00:06:19,736
这是有原因的

271
00:06:19,736 --> 00:06:21,526
因为并非所有

272
00:06:21,526 --> 00:06:23,106
用户都有 Touch Bar

273
00:06:23,106 --> 00:06:24,336
如果你加入了只在

274
00:06:24,336 --> 00:06:25,306
Touch Bar 上可以使用的功能

275
00:06:25,306 --> 00:06:26,546
那么很多用户都会失去使用这个功能

276
00:06:26,546 --> 00:06:27,216
的机会

277
00:06:27,866 --> 00:06:30,476
最后 这几乎可以说是 Touch Bar

278
00:06:30,476 --> 00:06:31,616
作为输入设备的

279
00:06:31,616 --> 00:06:32,476
一个副作用

280
00:06:32,866 --> 00:06:34,206
当我们想要在 Touch Bar 上创造

281
00:06:34,206 --> 00:06:35,386
漂亮的 UI 时

282
00:06:35,386 --> 00:06:36,486
他们不应该喧宾

283
00:06:36,486 --> 00:06:36,966
夺主

284
00:06:37,206 --> 00:06:38,476
用户在主屏幕上的工作内容

285
00:06:38,476 --> 00:06:40,226
应该永远都是

286
00:06:40,226 --> 00:06:41,316
他们的焦点

287
00:06:41,316 --> 00:06:42,256
Touch Bar 不应该使人

288
00:06:42,256 --> 00:06:42,826
分心

289
00:06:43,806 --> 00:06:45,506
说完了这些 我们

290
00:06:45,506 --> 00:06:46,436
将要讲到

291
00:06:46,436 --> 00:06:48,016
能让你在应用中使用

292
00:06:48,016 --> 00:06:48,706
Touch Bar 的核心

293
00:06:48,706 --> 00:06:49,336
类

294
00:06:49,626 --> 00:06:50,666
我们将讲到响应器

295
00:06:50,666 --> 00:06:52,006
将如何变化 以配合发现

296
00:06:52,006 --> 00:06:53,266
应该显示何种

297
00:06:53,266 --> 00:06:54,736
上下文敏感

298
00:06:54,736 --> 00:06:55,336
功能

299
00:06:55,336 --> 00:06:56,666
然后 我们将

300
00:06:56,666 --> 00:06:58,136
深入探讨

301
00:06:58,136 --> 00:06:59,666
其中一门核心类

302
00:06:59,666 --> 00:07:00,756
并向大家展示它能做什么

303
00:06:59,666 --> 00:07:00,756
并向大家展示它能做什么

304
00:07:01,646 --> 00:07:02,356
让我们从类

305
00:07:02,356 --> 00:07:02,816
开始

306
00:07:03,596 --> 00:07:05,436
第一节课当然是关于

307
00:07:05,506 --> 00:07:06,296
NSTouchBarItem 的

308
00:07:06,786 --> 00:07:08,096
与它相配合的还有 NSTouchBar

309
00:07:08,096 --> 00:07:08,886
和 NSResponder

310
00:07:09,206 --> 00:07:10,486
让我们详细了解

311
00:07:10,856 --> 00:07:11,106
一下

312
00:07:11,106 --> 00:07:12,466
这是我做的一个

313
00:07:12,466 --> 00:07:13,306
“邮件”应用 Touch Bar 的实体模型

314
00:07:13,306 --> 00:07:14,546
所有我标记高亮的部分

315
00:07:14,546 --> 00:07:16,486
要么是一个 NSView 要么是

316
00:07:16,486 --> 00:07:17,426
NSControl 要么就是 NSButton

317
00:07:17,426 --> 00:07:18,386
这都是大家很熟悉的

318
00:07:18,386 --> 00:07:19,826
因为 Touch Bar 使用的也是

319
00:07:20,116 --> 00:07:21,646
我们已经在

320
00:07:21,646 --> 00:07:23,216
我们的 Cocoa App 中

321
00:07:23,216 --> 00:07:24,636
用过很久的

322
00:07:25,806 --> 00:07:26,456
视图功能

323
00:07:26,456 --> 00:07:27,556
有一些事是 Touch Bar 能做到

324
00:07:27,556 --> 00:07:28,936
但是视图目前

325
00:07:28,936 --> 00:07:29,776
做不到的

326
00:07:30,036 --> 00:07:31,346
所以我们需要一些解决

327
00:07:31,346 --> 00:07:31,556
方法

328
00:07:31,556 --> 00:07:32,296
这也是这个

329
00:07:32,296 --> 00:07:33,396
NSTouchBarItem 类的目的

330
00:07:33,396 --> 00:07:35,186
它将一个 视图 结合到了

331
00:07:35,226 --> 00:07:35,446
Touch Bar 中

332
00:07:36,186 --> 00:07:37,786
NSTouchBarItem 是一个非常基础的

333
00:07:37,786 --> 00:07:38,596
类

334
00:07:38,656 --> 00:07:40,726
它是一个子类

335
00:07:40,726 --> 00:07:41,956
你们可能也

336
00:07:41,956 --> 00:07:43,036
不会真的用到

337
00:07:43,036 --> 00:07:43,716
它

338
00:07:43,716 --> 00:07:45,286
因为 AppKit 包含了

339
00:07:45,286 --> 00:07:46,896
大约 6 个 Touch Bar 子类

340
00:07:46,896 --> 00:07:48,106
可以满足

341
00:07:48,106 --> 00:07:49,626
你们的很多

342
00:07:49,626 --> 00:07:49,896
需求

343
00:07:50,266 --> 00:07:51,976
最后 NSTouchBarItem 类的

344
00:07:51,976 --> 00:07:52,886
一个最重要的功能是

345
00:07:52,886 --> 00:07:54,866
他有一个能

346
00:07:54,866 --> 00:07:56,566
唯一标识

347
00:07:56,566 --> 00:07:57,776
NSTouchBar 实例里的

348
00:07:57,776 --> 00:07:59,216
项和功能的

349
00:07:59,276 --> 00:08:00,296
标识符

350
00:07:59,276 --> 00:08:00,296
标识符

351
00:08:01,066 --> 00:08:03,016
让我们来说说 NSTouchBar

352
00:08:03,016 --> 00:08:03,686
本身

353
00:08:03,836 --> 00:08:05,446
最重要的是它有

354
00:08:05,446 --> 00:08:06,936
一个用于标识项的

355
00:08:06,936 --> 00:08:08,486
标识符

356
00:08:08,486 --> 00:08:08,876
数组

357
00:08:08,876 --> 00:08:10,286
这对解决哪些功能

358
00:08:10,406 --> 00:08:12,056
要用在 Touch Bar 中

359
00:08:12,056 --> 00:08:13,026
用于显示的视图中

360
00:08:13,026 --> 00:08:14,206
是十分重要的

361
00:08:14,676 --> 00:08:15,736
我们来快速的看一个

362
00:08:15,736 --> 00:08:16,306
代码片段

363
00:08:17,106 --> 00:08:18,556
这里我们将要为

364
00:08:18,556 --> 00:08:19,376
一条鲨鱼和一个海龟

365
00:08:19,376 --> 00:08:21,046
声明一些

366
00:08:21,046 --> 00:08:21,366
标识符

367
00:08:21,876 --> 00:08:23,026
通常我们在为代码

368
00:08:23,026 --> 00:08:24,736
命名标识符时 我们建议使用

369
00:08:24,736 --> 00:08:26,496
反向域名解析 但是

370
00:08:26,496 --> 00:08:27,276
这样会更加

371
00:08:27,276 --> 00:08:27,686
清晰

372
00:08:27,776 --> 00:08:30,306
一旦我们有了这些标识符

373
00:08:30,306 --> 00:08:31,886
我们将

374
00:08:31,886 --> 00:08:33,155
实例化一个新的

375
00:08:33,155 --> 00:08:34,546
NSTouchBar 然后

376
00:08:34,546 --> 00:08:35,856
将项标识符数组设为

377
00:08:35,856 --> 00:08:36,096
默认值

378
00:08:36,506 --> 00:08:38,206
这样可以让 AppKit 知道

379
00:08:38,206 --> 00:08:39,546
我们把什么语义功能

380
00:08:39,546 --> 00:08:40,986
放到了 Touch Bar 里

381
00:08:41,466 --> 00:08:43,015
我们现在要讲的是

382
00:08:43,015 --> 00:08:44,426
AppKit 如何解决这个问题

383
00:08:44,866 --> 00:08:46,096
我们有两个方法能

384
00:08:46,096 --> 00:08:46,386
进行查找

385
00:08:46,386 --> 00:08:47,446
我们有两种方法能够

386
00:08:47,446 --> 00:08:48,696
从项标识符里找出

387
00:08:48,696 --> 00:08:49,346
NSTouchBarItem

388
00:08:49,756 --> 00:08:51,256
第一种是一个叫做 templateItems 的

389
00:08:51,296 --> 00:08:52,356
NSTouchBar

390
00:08:52,356 --> 00:08:52,726
属性

391
00:08:53,086 --> 00:08:54,496
这只是一个项的集合

392
00:08:54,936 --> 00:08:56,176
如果我们回头看看代码片段

393
00:08:56,176 --> 00:08:57,436
这与我们之前编写的代码

394
00:08:57,436 --> 00:08:59,386
完全相同

395
00:08:59,386 --> 00:09:00,096
然后我们做一些添加

396
00:08:59,386 --> 00:09:00,096
然后我们做一些添加

397
00:09:00,516 --> 00:09:02,226
这里我给鲨鱼

398
00:09:02,226 --> 00:09:04,536
和海龟分别用了一个

399
00:09:04,536 --> 00:09:05,346
NSCustomTouchBar

400
00:09:05,346 --> 00:09:05,976
的项类

401
00:09:05,976 --> 00:09:06,986
这是我之前提到的

402
00:09:06,986 --> 00:09:07,996
那些子类的其中一个

403
00:09:08,436 --> 00:09:09,726
现在我们将项的视图

404
00:09:10,016 --> 00:09:12,586
设置为“NSButton”

405
00:09:13,456 --> 00:09:14,516
接下来我们来处理标题

406
00:09:14,516 --> 00:09:15,696
就像鲨鱼或者海龟

407
00:09:15,696 --> 00:09:16,476
表情符号那样

408
00:09:16,856 --> 00:09:18,216
你会注意到我们用到的是

409
00:09:18,246 --> 00:09:19,596
在 macOS10.12 里介绍到的

410
00:09:19,596 --> 00:09:22,116
NSButton 简便构造方法

411
00:09:22,566 --> 00:09:23,866
十分重要 因为

412
00:09:23,866 --> 00:09:24,966
这些简便构造方法

413
00:09:24,966 --> 00:09:26,326
可以使 NSButton 变成外观敏感的

414
00:09:26,326 --> 00:09:27,946
从而能使用

415
00:09:27,946 --> 00:09:29,246
正确的样式和字体

416
00:09:29,616 --> 00:09:30,896
如果我们直接构建 NSButton

417
00:09:30,896 --> 00:09:32,466
我们可能不会得到这个

418
00:09:32,466 --> 00:09:33,036
功能

419
00:09:33,036 --> 00:09:34,166
这可以大大节省时间

420
00:09:34,756 --> 00:09:36,676
最后在项目实例化后

421
00:09:36,676 --> 00:09:37,976
我们要

422
00:09:37,976 --> 00:09:39,116
将它们添加到

423
00:09:39,116 --> 00:09:39,976
templateItems 集合里

424
00:09:40,586 --> 00:09:41,596
如果我们做完了

425
00:09:41,596 --> 00:09:42,416
所有步骤 我们将在

426
00:09:42,416 --> 00:09:43,316
屏幕底部的 Touch Bar 上看到

427
00:09:43,316 --> 00:09:44,766
鲨鱼按钮和

428
00:09:44,766 --> 00:09:45,576
海龟按钮

429
00:09:47,036 --> 00:09:48,186
我想要提到一件事是

430
00:09:48,416 --> 00:09:50,426
如果你将代码拷贝粘贴到

431
00:09:50,426 --> 00:09:52,366
Swift Playground 里 XCode 将

432
00:09:52,366 --> 00:09:54,296
对我们创建的

433
00:09:54,296 --> 00:09:55,976
Touch Bar 项及

434
00:09:56,006 --> 00:09:57,216
Touch bar 本身

435
00:09:57,216 --> 00:09:58,406
进行预览

436
00:09:58,406 --> 00:09:59,756
这是一种能快速

437
00:09:59,756 --> 00:10:01,006
建立你的 Touch Bar UI 原型的

438
00:09:59,756 --> 00:10:01,006
建立你的 Touch Bar UI 原型的

439
00:10:01,006 --> 00:10:01,816
有效方式

440
00:10:03,046 --> 00:10:03,946
好了  templateItems 的内容就这么多

441
00:10:04,386 --> 00:10:06,036
现在我们来看看

442
00:10:06,036 --> 00:10:08,056
我们能用委托干些什么

443
00:10:08,056 --> 00:10:10,066
在 NSTouchBarDelegate 协议里

444
00:10:10,066 --> 00:10:11,476
有一个单独的委托

445
00:10:11,476 --> 00:10:11,986
方法

446
00:10:11,986 --> 00:10:12,776
那就是 Touch Bar 的

447
00:10:12,776 --> 00:10:14,076
makeItemForIdentifier

448
00:10:14,976 --> 00:10:16,426
它非常简单

449
00:10:16,556 --> 00:10:17,566
如果我们看看这里的代码

450
00:10:17,566 --> 00:10:19,076
会发现它和 templateItems

451
00:10:19,076 --> 00:10:20,106
的情况一模一样

452
00:10:20,106 --> 00:10:20,966
不同之处在于我们

453
00:10:20,966 --> 00:10:21,986
将它放在一个 Switch 语句里

454
00:10:21,986 --> 00:10:23,786
当 AppKit 要查找一个

455
00:10:23,786 --> 00:10:25,276
特殊的标识符时

456
00:10:25,276 --> 00:10:27,366
我们能有条件地

457
00:10:27,366 --> 00:10:28,616
创建一个新项

458
00:10:29,596 --> 00:10:31,906
AppKit 会缓存这个方法的

459
00:10:31,906 --> 00:10:32,266
结果

460
00:10:32,556 --> 00:10:33,806
所以 你完全可以将它看作一个

461
00:10:33,806 --> 00:10:35,106
工厂 每次都创建一个

462
00:10:35,106 --> 00:10:35,896
新的实例

463
00:10:35,896 --> 00:10:36,856
除非在其他地方有用

464
00:10:36,856 --> 00:10:38,096
否则你无须自己

465
00:10:38,096 --> 00:10:39,346
保留一个反向指针

466
00:10:40,536 --> 00:10:43,236
我要讲的另一个重点是

467
00:10:43,236 --> 00:10:44,646
我已经提到了一些

468
00:10:44,646 --> 00:10:46,806
关于自定义的内容

469
00:10:47,196 --> 00:10:48,346
现在就让我们来

470
00:10:48,346 --> 00:10:49,146
对我做的 Touch Bar 进行

471
00:10:49,146 --> 00:10:49,816
自定义

472
00:10:50,626 --> 00:10:52,066
这包括增加一些

473
00:10:52,066 --> 00:10:52,376
东西

474
00:10:52,666 --> 00:10:54,226
首先是在第一行的内容

475
00:10:54,226 --> 00:10:55,756
我们在这里要把 NSApp

476
00:10:55,756 --> 00:10:57,156
设置为 isAutomaticCustomize

477
00:10:57,386 --> 00:10:58,766
TouchBarMenuItem

478
00:10:58,766 --> 00:11:00,226
Enabled

479
00:10:58,766 --> 00:11:00,226
Enabled

480
00:11:00,906 --> 00:11:02,606
这很拗口 但是

481
00:11:02,606 --> 00:11:03,636
这是一种非常简单的

482
00:11:03,636 --> 00:11:04,196
处理方法

483
00:11:04,196 --> 00:11:05,506
如果你将它设置为真

484
00:11:05,876 --> 00:11:07,126
NSApp 将为你

485
00:11:07,126 --> 00:11:08,496
自动生成一个目录项

486
00:11:08,496 --> 00:11:10,276
可以用于展示

487
00:11:10,276 --> 00:11:11,306
和隐藏自定义

488
00:11:11,306 --> 00:11:11,626
面板

489
00:11:12,156 --> 00:11:13,306
你不需要用到它

490
00:11:13,346 --> 00:11:14,786
NSApp 有一种

491
00:11:14,786 --> 00:11:16,296
方法能明确的展示和隐藏它

492
00:11:16,296 --> 00:11:17,236
如果你希望多一些控制

493
00:11:17,236 --> 00:11:18,896
你可以将它加入你的

494
00:11:19,746 --> 00:11:20,666
目录项

495
00:11:20,666 --> 00:11:21,546
讲完了这些

496
00:11:21,866 --> 00:11:23,106
我们来看幻灯片

497
00:11:23,106 --> 00:11:24,626
底部的这行代码 我们在这里设置

498
00:11:24,626 --> 00:11:26,026
自定义的标识符

499
00:11:26,456 --> 00:11:27,826
在这种情况下

500
00:11:27,826 --> 00:11:29,246
我来编写一个海洋生物的

501
00:11:29,246 --> 00:11:29,836
标识符

502
00:11:30,486 --> 00:11:32,166
设置它是很重要的

503
00:11:32,166 --> 00:11:33,566
因为这是个令牌

504
00:11:33,606 --> 00:11:35,076
能使 Touch Bar 的配置在

505
00:11:35,076 --> 00:11:36,446
应用程序的开始

506
00:11:36,446 --> 00:11:37,936
或者系统的重启时

507
00:11:37,936 --> 00:11:38,926
得以持续

508
00:11:39,736 --> 00:11:41,246
启用自定义的

509
00:11:41,246 --> 00:11:42,576
另一个重要步骤是

510
00:11:42,576 --> 00:11:43,376
设置 customization

511
00:11:43,376 --> 00:11:44,686
AllowedItemIdentifier

512
00:11:44,686 --> 00:11:45,526
的数组

513
00:11:45,916 --> 00:11:47,076
我们现在重新设置

514
00:11:47,076 --> 00:11:48,076
我们的鲨鱼和

515
00:11:48,076 --> 00:11:48,576
海龟

516
00:11:48,976 --> 00:11:50,306
这个设置能让

517
00:11:50,306 --> 00:11:51,466
自定义面板知道

518
00:11:51,466 --> 00:11:52,686
哪些项可以被添加 哪些要被

519
00:11:52,686 --> 00:11:53,046
移除

520
00:11:53,706 --> 00:11:54,676
如果我们做完了所有这些

521
00:11:54,676 --> 00:11:55,976
我们可以打开自定义面板

522
00:11:55,976 --> 00:11:57,586
我们将看到

523
00:11:57,586 --> 00:11:59,186
defaultItemIdentifiers 数组被

524
00:11:59,186 --> 00:12:00,366
转化成为

525
00:11:59,186 --> 00:12:00,366
转化成为

526
00:12:00,366 --> 00:12:01,326
左边的

527
00:12:01,326 --> 00:12:01,736
一组项

528
00:12:01,776 --> 00:12:03,036
被允许的项标识符

529
00:12:03,036 --> 00:12:04,686
中的个别项

530
00:12:04,686 --> 00:12:05,516
将显示在右边

531
00:12:06,236 --> 00:12:07,176
这是个很乏味的

532
00:12:07,176 --> 00:12:08,336
自定义面板 我们来

533
00:12:08,336 --> 00:12:09,286
使它有变得有趣一些

534
00:12:10,186 --> 00:12:11,926
这里有一整个动物园的

535
00:12:11,926 --> 00:12:12,576
海洋动物

536
00:12:13,326 --> 00:12:15,806
我想说的是

537
00:12:15,806 --> 00:12:16,866
在创建项模板的时候

538
00:12:16,926 --> 00:12:18,406
你需要决定你要

539
00:12:18,406 --> 00:12:19,496
将它设置在 Touch Bar 上

540
00:12:19,496 --> 00:12:20,766
还是使用

541
00:12:20,816 --> 00:12:22,696
默认的委托

542
00:12:22,796 --> 00:12:24,196
只显示鲨鱼和海龟

543
00:12:24,196 --> 00:12:25,126
这时他就会起作用

544
00:12:25,326 --> 00:12:26,026
在很多应用中

545
00:12:26,026 --> 00:12:27,266
你的 Touch Bar 上的

546
00:12:27,266 --> 00:12:28,456
默认功能只是

547
00:12:28,736 --> 00:12:30,416
你在自定义时

548
00:12:30,416 --> 00:12:31,706
可添加的所有功能

549
00:12:31,706 --> 00:12:32,796
中的很小一

550
00:12:32,796 --> 00:12:33,656
部分

551
00:12:34,716 --> 00:12:36,626
通过使用委托

552
00:12:36,626 --> 00:12:37,776
不使用自定义面板的用户

553
00:12:37,776 --> 00:12:38,836
就不会浪费 CPU 时间

554
00:12:38,836 --> 00:12:43,106
创建新项

555
00:12:43,626 --> 00:12:44,946
另一件需要注意的事是

556
00:12:44,946 --> 00:12:46,596
在某些情况下

557
00:12:46,596 --> 00:12:47,426
你可能想要创建

558
00:12:47,426 --> 00:12:48,376
一个 Touch Bar UI

559
00:12:48,376 --> 00:12:49,556
其中的有些功能

560
00:12:49,556 --> 00:12:50,886
你希望它一直存在

561
00:12:50,886 --> 00:12:51,896
不希望用户在自定义区

562
00:12:51,896 --> 00:12:53,646
移除它

563
00:12:53,646 --> 00:12:54,876
如果你遇到这样的问题

564
00:12:54,876 --> 00:12:56,086
你可以设置自定义

565
00:12:56,086 --> 00:12:57,666
所需的项标识符数组

566
00:12:58,216 --> 00:12:59,706
这样的情况下 显然

567
00:12:59,706 --> 00:13:00,936
海龟对我们的应用功能

568
00:12:59,706 --> 00:13:00,936
海龟对我们的应用功能

569
00:13:00,936 --> 00:13:02,006
很关键

570
00:13:02,006 --> 00:13:02,926
所以 我们要避免它

571
00:13:02,926 --> 00:13:03,586
被移除

572
00:13:03,626 --> 00:13:07,196
好了 这基本涵盖了怎样

573
00:13:07,196 --> 00:13:09,156
制作 NSTouchBar 实例

574
00:13:09,156 --> 00:13:11,206
以及怎么通过

575
00:13:11,206 --> 00:13:12,306
模板项和委托方法

576
00:13:12,306 --> 00:13:13,846
使用用项标识符来帮助项目

577
00:13:13,846 --> 00:13:14,266
查找

578
00:13:14,636 --> 00:13:15,826
有一样东西我们漏掉了

579
00:13:15,826 --> 00:13:17,596
那就是 App

580
00:13:17,596 --> 00:13:18,786
如何能够找到 NSTouchBar

581
00:13:18,786 --> 00:13:19,396
的实例

582
00:13:19,396 --> 00:13:21,286
这里很重要的一个部分是

583
00:13:21,286 --> 00:13:22,626
NSTouchBarProvider 协议

584
00:13:23,436 --> 00:13:24,786
这是一个很简单的

585
00:13:24,786 --> 00:13:25,256
协议

586
00:13:25,496 --> 00:13:26,976
它揭示了 Touch Bar 的一个

587
00:13:26,976 --> 00:13:28,886
只读属性

588
00:13:28,886 --> 00:13:30,846
NSResponder 创新性的

589
00:13:30,846 --> 00:13:31,866
执行了这个

590
00:13:31,866 --> 00:13:32,346
协议

591
00:13:32,346 --> 00:13:33,256
这个我们一会儿将会

592
00:13:33,256 --> 00:13:33,636
谈到

593
00:13:34,006 --> 00:13:35,556
有时候将 Touch Bar 加到

594
00:13:35,556 --> 00:13:36,676
你的应用委托

595
00:13:36,676 --> 00:13:38,386
或者窗口委托是

596
00:13:38,386 --> 00:13:38,976
有用的

597
00:13:38,976 --> 00:13:40,156
它们中任何一个都

598
00:13:40,156 --> 00:13:41,656
不是 NSResponder 的子类

599
00:13:41,966 --> 00:13:43,016
让我们来看看

600
00:13:43,016 --> 00:13:44,016
你将如何执行这个

601
00:13:44,016 --> 00:13:44,486
协议

602
00:13:45,436 --> 00:13:47,256
这起来和很多其他的代码一样

603
00:13:47,256 --> 00:13:48,486
但是我们只是用到了 Touch Bar 的属性中

604
00:13:48,486 --> 00:13:50,586
的 Swift 延迟

605
00:13:50,586 --> 00:13:51,396
变量

606
00:13:51,986 --> 00:13:53,216
当 Touch Bar 第一次被访问时

607
00:13:53,216 --> 00:13:54,556
Swift 就会开始

608
00:13:54,556 --> 00:13:55,576
运行代码块

609
00:13:55,576 --> 00:13:56,966
并实例化

610
00:13:56,996 --> 00:13:57,196
Touch Bar

611
00:13:57,416 --> 00:13:58,696
也就是我们在上一张幻灯片里看到的

612
00:13:58,696 --> 00:13:59,886
在 Touch Bar 和别的地方创建项

613
00:13:59,886 --> 00:14:00,786
的那些代码

614
00:13:59,886 --> 00:14:00,786
的那些代码

615
00:14:02,176 --> 00:14:03,936
还需要提及的是

616
00:14:03,936 --> 00:14:05,706
AppKit Key 值可以监测

617
00:14:05,706 --> 00:14:06,296
这个属性

618
00:14:06,296 --> 00:14:07,606
如果你需要

619
00:14:07,756 --> 00:14:08,706
完全移除 Touch Bar

620
00:14:08,706 --> 00:14:09,876
我们将注意到

621
00:14:09,876 --> 00:14:10,526
这个改变

622
00:14:11,706 --> 00:14:13,756
让我们看看 NSResponder

623
00:14:13,756 --> 00:14:14,926
如何执行它

624
00:14:14,926 --> 00:14:16,426
首先 它表明 touchBar 属性

625
00:14:16,426 --> 00:14:17,456
是一个可读写的属性

626
00:14:17,456 --> 00:14:18,906
而不是只读的

627
00:14:19,226 --> 00:14:20,596
它的重要性在于你可以

628
00:14:20,596 --> 00:14:22,076
在你应用的不同部分设置

629
00:14:22,186 --> 00:14:24,286
NSTouchBar

630
00:14:24,286 --> 00:14:24,946
实例

631
00:14:24,946 --> 00:14:26,086
你可以在响应器的窗口

632
00:14:26,086 --> 00:14:26,596
上看到

633
00:14:26,596 --> 00:14:27,856
就像视图 视图控制器

634
00:14:27,856 --> 00:14:28,696
和窗口控制器那样

635
00:14:29,176 --> 00:14:31,086
这非常简单 因为

636
00:14:31,086 --> 00:14:32,076
你不用为每个

637
00:14:32,076 --> 00:14:33,306
控件创建

638
00:14:33,306 --> 00:14:34,056
子类

639
00:14:34,746 --> 00:14:36,636
如果你为控件或

640
00:14:36,636 --> 00:14:37,676
任何 NSResponder 创建了子类

641
00:14:37,766 --> 00:14:39,826
NSResponder 同样会

642
00:14:39,826 --> 00:14:41,136
暴露 makeTouchBar()

643
00:14:41,136 --> 00:14:41,476
方法

644
00:14:42,506 --> 00:14:43,536
所以 makeTouchBar() 是非常

645
00:14:43,536 --> 00:14:43,886
简单的

646
00:14:44,456 --> 00:14:45,956
touchBar 属性第一次

647
00:14:45,956 --> 00:14:47,296
接入 NSResponder 时

648
00:14:47,326 --> 00:14:48,996
它将调用 makeTouchBar() 并 

649
00:14:49,276 --> 00:14:50,976
运行此

650
00:14:50,976 --> 00:14:51,316
代码

651
00:14:51,316 --> 00:14:52,416
这时我们只用返回一个新的

652
00:14:52,416 --> 00:14:53,216
Touch Bar 给它

653
00:14:53,606 --> 00:14:55,286
很多系统控件和

654
00:14:55,286 --> 00:14:56,606
系统框架都使用这种方法

655
00:14:56,606 --> 00:14:58,316
暴露他们的

656
00:14:58,316 --> 00:14:59,976
功能

657
00:15:00,656 --> 00:15:02,436
就像我提到的那样 NSResponder

658
00:15:02,436 --> 00:15:03,586
有一个读写属性

659
00:15:03,586 --> 00:15:04,556
大家可以对它进行

660
00:15:04,556 --> 00:15:05,106
设置

661
00:15:05,106 --> 00:15:06,186
其中一个很重要的

662
00:15:06,186 --> 00:15:07,346
受众就是

663
00:15:07,346 --> 00:15:08,096
Interface Builder

664
00:15:08,906 --> 00:15:10,026
让我来向大家展示如何通过

665
00:15:10,026 --> 00:15:11,196
Interface Builder 创建一个

666
00:15:11,196 --> 00:15:11,496
Touch Bar UI

667
00:15:11,956 --> 00:15:13,646
如果我们从

668
00:15:13,646 --> 00:15:14,616
Story Board 开始

669
00:15:14,616 --> 00:15:16,136
我们可以看到一个窗口控制器

670
00:15:16,136 --> 00:15:17,616
然后我们可以通过过滤对象库

671
00:15:17,996 --> 00:15:19,546
来展示 Touch Bar 控件

672
00:15:20,166 --> 00:15:22,106
所以如果我们检查对象库

673
00:15:22,106 --> 00:15:23,316
这里有一个 NSTouchBar 的实例

674
00:15:23,316 --> 00:15:24,746
我们可以将它拖到

675
00:15:24,746 --> 00:15:25,876
窗口控制器上

676
00:15:26,336 --> 00:15:27,506
现在我们得到了一个空的

677
00:15:27,506 --> 00:15:29,066
Touch Bar

678
00:15:29,066 --> 00:15:31,026
回到对象库

679
00:15:31,026 --> 00:15:32,426
我们可以看到一打打的

680
00:15:32,476 --> 00:15:33,856
预配置的控件

681
00:15:33,856 --> 00:15:35,486
和 Touch Bar 项

682
00:15:35,526 --> 00:15:36,836
我们可以把它拖到

683
00:15:36,836 --> 00:15:37,376
Touch Bar 里

684
00:15:37,626 --> 00:15:40,896
从现在起 我们

685
00:15:40,896 --> 00:15:42,776
就可以用 ID 连接或者捆绑来

686
00:15:42,776 --> 00:15:43,636
写这些项了

687
00:15:43,886 --> 00:15:45,626
其实 不写一行代码

688
00:15:45,626 --> 00:15:47,056
就使 Touch Bar 应用

689
00:15:47,056 --> 00:15:48,336
能进行完美的工作

690
00:15:48,526 --> 00:15:49,646
和使用是非常

691
00:15:49,646 --> 00:15:50,806
可能的

692
00:15:51,556 --> 00:15:53,606
我们讲完了创建

693
00:15:53,606 --> 00:15:54,906
NSTouchBarItem 实例

694
00:15:55,236 --> 00:15:56,506
现在让我们来看 它将如何适应

695
00:15:56,506 --> 00:15:57,886
大的响应器链 以及我们

696
00:15:57,886 --> 00:15:59,506
如何发现所有的 Touch Bar

697
00:15:59,506 --> 00:16:01,826
个体实例

698
00:15:59,506 --> 00:16:01,826
个体实例

699
00:16:01,826 --> 00:16:03,766
一个刷新控件

700
00:16:03,766 --> 00:16:05,266
一个响应器链是由

701
00:16:05,266 --> 00:16:06,516
NSResponder 类的实例组成的

702
00:16:06,836 --> 00:16:08,036
NSResponder 类中最重要

703
00:16:08,036 --> 00:16:09,336
的属性就是它的

704
00:16:09,336 --> 00:16:11,416
下一个响应器的

705
00:16:11,416 --> 00:16:12,776
属性

706
00:16:13,266 --> 00:16:14,546
这指向了另一个

707
00:16:14,546 --> 00:16:15,056
响应器

708
00:16:15,406 --> 00:16:16,396
这意味着给定一个响应器

709
00:16:16,396 --> 00:16:17,956
我们就能链接

710
00:16:17,956 --> 00:16:20,246
整条响应器链并使其能

711
00:16:20,246 --> 00:16:21,936
处理事件

712
00:16:21,936 --> 00:16:23,256
行动和别的东西

713
00:16:23,656 --> 00:16:26,386
AppKit 用很多不同的

714
00:16:26,486 --> 00:16:28,196
响应器作为链条的锚

715
00:16:28,196 --> 00:16:29,276
来处理键盘事件

716
00:16:29,276 --> 00:16:31,256
对行为和点击的测试

717
00:16:31,256 --> 00:16:32,846
以及常规的鼠标事件。

718
00:16:32,846 --> 00:16:34,316
我们来讲讲

719
00:16:34,316 --> 00:16:35,226
键盘事件如何工作

720
00:16:35,226 --> 00:16:36,376
因为 Touch Bar 是键盘的

721
00:16:36,376 --> 00:16:36,786
一部分

722
00:16:37,596 --> 00:16:38,846
系统将交给我们

723
00:16:38,846 --> 00:16:39,886
一个 NSEvent 事件

724
00:16:39,886 --> 00:16:41,296
随后这个事件

725
00:16:41,296 --> 00:16:42,376
将返回 NSApplication

726
00:16:43,006 --> 00:16:44,236
NSApplication 将告知我们

727
00:16:44,236 --> 00:16:45,236
要对键盘事件

728
00:16:45,236 --> 00:16:45,796
做什么

729
00:16:46,446 --> 00:16:48,246
大多数 NSApplication 会问

730
00:16:48,246 --> 00:16:49,346
我是否有主

731
00:16:49,346 --> 00:16:49,756
窗口

732
00:16:49,906 --> 00:16:51,796
好的 这就是一个键盘

733
00:16:51,796 --> 00:16:51,936
事件

734
00:16:52,926 --> 00:16:54,266
同时 主窗口也会有

735
00:16:54,266 --> 00:16:55,256
同样的问题

736
00:16:55,256 --> 00:16:56,426
我要对键盘事件

737
00:16:57,186 --> 00:16:57,506
做什么

738
00:16:57,506 --> 00:16:59,616
每一个 NSWindow 都有

739
00:16:59,616 --> 00:17:01,086
一个叫做第一响应器的属性

740
00:16:59,616 --> 00:17:01,086
一个叫做第一响应器的属性

741
00:17:01,086 --> 00:17:03,186
它能指出键盘事件在

742
00:17:03,186 --> 00:17:04,356
响应器链条的

743
00:17:04,356 --> 00:17:05,616
什么位置开始启动

744
00:17:05,616 --> 00:17:05,925
等等 

745
00:17:06,165 --> 00:17:06,965
所以 主窗口

746
00:17:06,965 --> 00:17:07,996
会说 好的

747
00:17:07,996 --> 00:17:08,915
我们来将它发送到我的第一响应器

748
00:17:08,915 --> 00:17:11,465
就像它在按下和释放键盘

749
00:17:11,465 --> 00:17:12,326
方法里一样

750
00:17:13,236 --> 00:17:14,516
这很有趣

751
00:17:14,516 --> 00:17:16,965
第一响应器是我们锚定响应链

752
00:17:16,965 --> 00:17:17,846
的位置 是我们将要

753
00:17:17,846 --> 00:17:19,096
像响应器方法那样

754
00:17:19,096 --> 00:17:19,906
处理它的地方

755
00:17:19,906 --> 00:17:21,126
而不仅仅是

756
00:17:21,126 --> 00:17:22,106
通用路由事件

757
00:17:22,106 --> 00:17:23,276
它将作出一个决定

758
00:17:23,276 --> 00:17:24,976
我是在按下键盘的时候

759
00:17:24,976 --> 00:17:27,076
处理事件 还是调用父类

760
00:17:27,076 --> 00:17:28,256
然后让它传递给下一个

761
00:17:28,256 --> 00:17:28,756
响应器

762
00:17:29,456 --> 00:17:30,596
我们假设它传递到了

763
00:17:30,596 --> 00:17:31,296
下一个响应器

764
00:17:31,296 --> 00:17:33,196
一般来说 第一个响应是一个视图

765
00:17:33,196 --> 00:17:34,496
第二个响应器

766
00:17:34,496 --> 00:17:35,266
是一个父视图

767
00:17:35,786 --> 00:17:37,206
它会作出同样的选择

768
00:17:37,576 --> 00:17:39,046
目前 视图和

769
00:17:39,046 --> 00:17:40,256
视图控制器一般

770
00:17:40,256 --> 00:17:40,876
是在响应器链

771
00:17:40,876 --> 00:17:41,156
里面的

772
00:17:41,426 --> 00:17:42,976
所以 将它传递给视图控制器

773
00:17:42,976 --> 00:17:44,216
同样会使 Handler

774
00:17:44,216 --> 00:17:45,276
调用父类

775
00:17:45,356 --> 00:17:46,156
它不会处理它

776
00:17:46,426 --> 00:17:48,146
它可能会回到

777
00:17:48,146 --> 00:17:49,016
最初引起

778
00:17:49,016 --> 00:17:50,526
路由事件

779
00:17:50,526 --> 00:17:51,246
的窗口

780
00:17:51,546 --> 00:17:52,336
从而 它作为

781
00:17:52,336 --> 00:17:53,416
响应器链条的一部分

782
00:17:53,416 --> 00:17:54,636
可以决定是处理

783
00:17:54,636 --> 00:17:55,336
还是传递它

784
00:17:55,646 --> 00:17:56,676
这能将它滤回

785
00:17:56,676 --> 00:17:57,936
应用

786
00:17:58,626 --> 00:17:59,436
这就是我们处理键盘

787
00:17:59,436 --> 00:18:00,156
事件的方法

788
00:17:59,436 --> 00:18:00,156
事件的方法

789
00:18:00,536 --> 00:18:01,316
Touch Bar 是键盘的

790
00:18:01,316 --> 00:18:01,716
一部分

791
00:18:01,946 --> 00:18:03,156
这也表明 这些是我们可以

792
00:18:03,156 --> 00:18:04,606
添加

793
00:18:04,606 --> 00:18:05,766
NSTouchBar 实例的位置

794
00:18:06,246 --> 00:18:07,886
我们以

795
00:18:07,886 --> 00:18:08,976
与在响应器链里的路由

796
00:18:08,976 --> 00:18:10,256
键盘事件相同的顺序

797
00:18:10,256 --> 00:18:10,996
来查找它们

798
00:18:11,926 --> 00:18:13,616
所以 你应该问的问题是

799
00:18:13,616 --> 00:18:15,276
嘿 我注意到你有

800
00:18:15,276 --> 00:18:16,836
5 个 NSTouchBar

801
00:18:16,836 --> 00:18:17,076
实例

802
00:18:17,326 --> 00:18:18,966
你要如何将它们

803
00:18:18,966 --> 00:18:20,216
放在设备上的 Touch Bar 上

804
00:18:20,686 --> 00:18:21,926
我马上会讲到这个

805
00:18:21,926 --> 00:18:22,546
问题

806
00:18:22,926 --> 00:18:25,036
但是首先 我想谈谈

807
00:18:25,036 --> 00:18:26,006
视图和视图

808
00:18:26,006 --> 00:18:26,576
控制器

809
00:18:27,386 --> 00:18:28,276
你可能会在某个时候需要

810
00:18:28,276 --> 00:18:29,466
将 Touch Bar 加到视图控制器上

811
00:18:29,466 --> 00:18:31,216
来制作你的

812
00:18:31,436 --> 00:18:32,376
应用程序

813
00:18:32,956 --> 00:18:34,046
你会运行并测试

814
00:18:34,046 --> 00:18:34,786
然后你会发现

815
00:18:34,786 --> 00:18:35,816
Touch Bar 完全没有显示

816
00:18:35,816 --> 00:18:37,016
这时你会想

817
00:18:37,016 --> 00:18:38,206
我猜我的视图控制器不在

818
00:18:38,206 --> 00:18:39,186
响应器链上

819
00:18:39,356 --> 00:18:40,356
你会去查看你的视图控制器

820
00:18:40,356 --> 00:18:41,466
你会发现下一个响应器

821
00:18:41,466 --> 00:18:42,846
确实就是你的

822
00:18:42,846 --> 00:18:43,866
视图控制器

823
00:18:44,376 --> 00:18:45,926
这里发生的事是

824
00:18:46,376 --> 00:18:48,786
当特定的响应器链

825
00:18:48,786 --> 00:18:50,216
被正确的设置，

826
00:18:50,216 --> 00:18:51,226
它不是在窗口的第一响应器

827
00:18:51,226 --> 00:18:52,246
里被锚定

828
00:18:52,806 --> 00:18:54,326
那通常是因为

829
00:18:54,326 --> 00:18:55,506
窗口的第一响应器

830
00:18:55,506 --> 00:18:56,906
必须对 acceptsFirstResponder 方法

831
00:18:56,906 --> 00:18:58,426
返回真

832
00:18:58,876 --> 00:18:59,736
如果你在这种情况下结束

833
00:18:59,736 --> 00:19:00,946
很容易让你的第一响应器

834
00:18:59,736 --> 00:19:00,946
很容易让你的第一响应器

835
00:19:00,946 --> 00:19:02,456
去继承 NSView 或第一响应器

836
00:19:02,456 --> 00:19:03,926
将要接受的内容并

837
00:19:03,926 --> 00:19:06,236
做出一个锚定在

838
00:19:06,236 --> 00:19:07,506
第一响应器里的

839
00:19:07,506 --> 00:19:08,316
有效的响应器链

840
00:19:09,396 --> 00:19:10,956
让我们回到

841
00:19:10,956 --> 00:19:11,736
如何在这里处理多个

842
00:19:11,736 --> 00:19:13,006
NSTouchBar 实例

843
00:19:13,326 --> 00:19:15,296
最简单的是记住

844
00:19:15,296 --> 00:19:17,196
如果一个 NSTouchBar

845
00:19:17,226 --> 00:19:18,856
距离第一响应器

846
00:19:18,856 --> 00:19:20,026
很近 也就是离

847
00:19:20,026 --> 00:19:22,506
键盘输入很近 它的 Touch Bar

848
00:19:22,506 --> 00:19:23,556
将会胜利并

849
00:19:23,556 --> 00:19:24,126
取代其他

850
00:19:24,726 --> 00:19:26,286
回忆一下我之前提到的

851
00:19:26,286 --> 00:19:27,486
AVKit 和其他系统框架

852
00:19:27,486 --> 00:19:28,646
能提供支持

853
00:19:28,646 --> 00:19:29,876
你可能

854
00:19:29,876 --> 00:19:30,886
会认为它们

855
00:19:30,886 --> 00:19:32,096
会为距离第一响应器

856
00:19:32,096 --> 00:19:33,006
更近的 NS View

857
00:19:33,006 --> 00:19:34,576
提供支持

858
00:19:34,946 --> 00:19:36,266
而不是为你的窗口控制器或者

859
00:19:36,266 --> 00:19:37,556
应用程序委托

860
00:19:38,256 --> 00:19:39,996
所以我们需要能

861
00:19:40,276 --> 00:19:41,556
在多个 NSTouchBar 实例中分享

862
00:19:41,556 --> 00:19:43,096
Touch Bar 设备的方法

863
00:19:43,096 --> 00:19:44,266
我们有这样的方法

864
00:19:44,756 --> 00:19:45,856
那就是用

865
00:19:45,856 --> 00:19:47,136
一个叫做 otherItemsProxy 的

866
00:19:47,356 --> 00:19:48,646
特殊的项标识符来完善它

867
00:19:49,426 --> 00:19:50,586
我称它为特殊项

868
00:19:50,586 --> 00:19:52,116
标识符因为

869
00:19:52,116 --> 00:19:53,176
你不用为它创建

870
00:19:53,176 --> 00:19:53,406
任何项

871
00:19:53,406 --> 00:19:54,316
你不用将它放到你的

872
00:19:54,316 --> 00:19:55,786
模板项组里

873
00:19:55,786 --> 00:19:57,596
你不必在委托里

874
00:19:57,746 --> 00:19:58,866
操作标识符 然后为标识符

875
00:19:58,866 --> 00:19:59,936
创建项

876
00:20:01,166 --> 00:20:02,146
但当你将代理服务器

877
00:20:02,146 --> 00:20:03,956
添加到

878
00:20:03,956 --> 00:20:05,196
你的默认项标识符组里

879
00:20:05,246 --> 00:20:07,926
当 AppKit 从响应器链里

880
00:20:08,006 --> 00:20:09,226
收到 NSTouchBar 时

881
00:20:09,226 --> 00:20:10,636
它将用

882
00:20:10,636 --> 00:20:12,566
距离第一响应器

883
00:20:12,566 --> 00:20:14,186
更近的项来代替

884
00:20:14,186 --> 00:20:15,286
otherItemsProxy

885
00:20:16,406 --> 00:20:17,716
我们来用实际操作来了解

886
00:20:17,716 --> 00:20:17,986
一下

887
00:20:17,986 --> 00:20:18,976
这里是一个“邮件”的例子

888
00:20:19,396 --> 00:20:20,556
我的光标

889
00:20:20,556 --> 00:20:21,346
在收件人栏

890
00:20:21,346 --> 00:20:22,796
收件人栏可以

891
00:20:22,796 --> 00:20:24,386
为我要向谁发送邮件

892
00:20:24,386 --> 00:20:25,446
提供建议

893
00:20:25,786 --> 00:20:27,716
我在 Touch Bar

894
00:20:27,716 --> 00:20:29,016
应用部分的左侧

895
00:20:29,016 --> 00:20:29,896
有一个发送按钮

896
00:20:30,766 --> 00:20:32,026
如果我将我的光标

897
00:20:32,026 --> 00:20:34,886
移到窗口中的

898
00:20:34,886 --> 00:20:36,416
组合视图 我将有

899
00:20:36,416 --> 00:20:37,346
很多文本排版控件

900
00:20:37,346 --> 00:20:38,446
和一个表情符号选择器

901
00:20:38,486 --> 00:20:39,576
但是我仍然有那个发送

902
00:20:39,576 --> 00:20:39,856
按钮

903
00:20:40,596 --> 00:20:42,246
这个过程分解开来就是

904
00:20:42,246 --> 00:20:44,726
组织邮件的窗口控制器

905
00:20:44,726 --> 00:20:46,806
有一个带有发送键

906
00:20:46,806 --> 00:20:47,776
和 otherItemsProxy 的

907
00:20:47,776 --> 00:20:48,796
Touch Bar

908
00:20:50,036 --> 00:20:51,566
然后收件人栏

909
00:20:51,626 --> 00:20:52,696
会提供候选人

910
00:20:52,696 --> 00:20:53,936
收件人域和第一响应器

911
00:20:53,936 --> 00:20:54,816
距离很近

912
00:20:54,816 --> 00:20:55,916
所以它会先

913
00:20:55,916 --> 00:20:57,416
执行

914
00:20:57,766 --> 00:20:58,776
但是窗口控制器

915
00:20:58,776 --> 00:21:00,506
包括 otherItemsProxy

916
00:20:58,776 --> 00:21:00,506
包括 otherItemsProxy

917
00:21:00,816 --> 00:21:01,926
意味着我们可以合并这两个

918
00:21:01,926 --> 00:21:03,606
Touch Bar

919
00:21:03,726 --> 00:21:05,146
同样的 对于组合视图

920
00:21:05,146 --> 00:21:06,956
窗口控制器

921
00:21:06,956 --> 00:21:08,446
是完全相同的实例

922
00:21:09,076 --> 00:21:11,276
只不过响应器链锚定在

923
00:21:11,276 --> 00:21:12,436
第一响应器

924
00:21:12,706 --> 00:21:15,026
包括在窗口控制器之前

925
00:21:15,316 --> 00:21:16,386
的组合视图

926
00:21:17,176 --> 00:21:18,556
需要提到的是

927
00:21:18,626 --> 00:21:19,486
这和自定义功能

928
00:21:19,486 --> 00:21:20,936
是完全兼容的

929
00:21:20,986 --> 00:21:22,636
就像你期待的那样

930
00:21:22,756 --> 00:21:24,106
我们用 otherItemsProxy

931
00:21:24,476 --> 00:21:25,346
来创建项目的默认设置

932
00:21:25,676 --> 00:21:26,786
我们从合适的

933
00:21:26,786 --> 00:21:28,066
Touch Bar 里聚合

934
00:21:28,066 --> 00:21:28,646
被允许项

935
00:21:28,946 --> 00:21:30,336
所以我们看到 我们可以

936
00:21:30,336 --> 00:21:31,436
在邮件里自定义发送键

937
00:21:31,436 --> 00:21:32,296
尽管是用

938
00:21:32,296 --> 00:21:34,176
不同的响应器

939
00:21:34,176 --> 00:21:35,096
而不是排版控件

940
00:21:36,966 --> 00:21:39,406
你可能会想 诶

941
00:21:39,406 --> 00:21:40,636
otherItemsProxy 听起来

942
00:21:40,636 --> 00:21:41,926
是个很适合

943
00:21:41,926 --> 00:21:42,926
Touch Bar 的东西

944
00:21:42,926 --> 00:21:44,036
你可能是对的 但是

945
00:21:44,036 --> 00:21:45,216
有些时候 

946
00:21:45,216 --> 00:21:46,146
你应该忽略它

947
00:21:46,526 --> 00:21:48,346
我们回到邮件

948
00:21:48,346 --> 00:21:49,796
关掉所有窗口

949
00:21:49,796 --> 00:21:50,846
我们会看到有

950
00:21:50,846 --> 00:21:52,006
一个新的视图窗口出现在

951
00:21:52,006 --> 00:21:52,476
Touch Bar 里

952
00:21:53,076 --> 00:21:54,336
这是由应用提供的

953
00:21:54,336 --> 00:21:56,006
但它省略了

954
00:21:56,006 --> 00:21:56,896
otherItemsProxy

955
00:21:57,296 --> 00:21:59,216
当我们调出

956
00:21:59,216 --> 00:22:00,526
一个有 Touch Bar 的窗口

957
00:21:59,216 --> 00:22:00,526
一个有 Touch Bar 的窗口

958
00:22:00,526 --> 00:22:02,046
它会距离

959
00:22:02,046 --> 00:22:03,336
第一响应器近

960
00:22:03,336 --> 00:22:05,336
Touch Bar 里没有

961
00:22:05,336 --> 00:22:06,846
otherItemsProxy 意味着

962
00:22:06,846 --> 00:22:07,996
它被完全替代了

963
00:22:09,446 --> 00:22:10,776
另一种我想讲到的

964
00:22:10,776 --> 00:22:11,946
特殊项标识符

965
00:22:11,946 --> 00:22:13,176
则是间距

966
00:22:13,606 --> 00:22:15,236
这里 我们已经制作了

967
00:22:15,236 --> 00:22:16,526
一个仿制的 Touch Bar

968
00:22:16,526 --> 00:22:17,956
我们有一个鲨鱼和

969
00:22:18,456 --> 00:22:20,546
一个天使鱼项

970
00:22:20,546 --> 00:22:21,546
天使鱼可能不想

971
00:22:21,546 --> 00:22:22,456
太靠近鲨鱼

972
00:22:22,456 --> 00:22:24,016
谢天谢地 鲨鱼面朝

973
00:22:24,016 --> 00:22:25,046
错误的方向

974
00:22:25,046 --> 00:22:26,356
所以鱼可能还不在菜单里

975
00:22:26,966 --> 00:22:28,446
但是我们能给

976
00:22:28,446 --> 00:22:29,366
天使鱼一点呼吸空间

977
00:22:29,366 --> 00:22:30,716
我们可以在

978
00:22:30,716 --> 00:22:32,006
鲨鱼和天使鱼之间

979
00:22:32,006 --> 00:22:33,666
的默认项标识符组里

980
00:22:33,666 --> 00:22:35,166
加入一个

981
00:22:35,166 --> 00:22:36,246
固定间距的

982
00:22:36,246 --> 00:22:36,866
小项标识符

983
00:22:37,296 --> 00:22:38,646
我们不一定用小的

984
00:22:38,646 --> 00:22:40,236
我们也可以用大的

985
00:22:40,236 --> 00:22:41,066
来给它更多

986
00:22:41,066 --> 00:22:42,126
间距

987
00:22:42,206 --> 00:22:43,786
这比对你的间距

988
00:22:43,786 --> 00:22:44,996
进行硬编码有用

989
00:22:44,996 --> 00:22:46,206
因为

990
00:22:46,206 --> 00:22:47,626
我们系统定义的值

991
00:22:47,626 --> 00:22:48,506
会随着一次次发布而改变

992
00:22:48,506 --> 00:22:50,506
这会使你的 App 和

993
00:22:50,506 --> 00:22:51,836
系统里别的 App 看起来

994
00:22:51,836 --> 00:22:52,356
非常相似

995
00:22:52,986 --> 00:22:54,406
不过我们不需要用

996
00:22:54,406 --> 00:22:55,356
固定间距来阻止它

997
00:22:55,356 --> 00:22:57,096
我们同样有自动调整间距的标识符

998
00:22:57,246 --> 00:22:58,286
有趣的是 自动调整间距

999
00:22:58,286 --> 00:22:59,256
会将

1000
00:22:59,256 --> 00:23:00,786
邻近的项

1001
00:22:59,256 --> 00:23:00,786
邻近的项

1002
00:23:00,786 --> 00:23:02,326
能推多远就

1003
00:23:02,326 --> 00:23:03,956
推多远

1004
00:23:03,956 --> 00:23:05,676
在这种情况下

1005
00:23:05,676 --> 00:23:06,916
天使鱼可能觉得自动调整

1006
00:23:06,916 --> 00:23:08,016
它和鲨鱼之间的间距更

1007
00:23:08,016 --> 00:23:08,526
舒服一些

1008
00:23:09,246 --> 00:23:11,006
你可能认为你可以

1009
00:23:11,006 --> 00:23:12,656
将自动调整间距放在项的两侧

1010
00:23:12,656 --> 00:23:13,606
使项目居中

1011
00:23:13,906 --> 00:23:15,286
你有充分的理由

1012
00:23:15,286 --> 00:23:15,606
这样想

1013
00:23:16,126 --> 00:23:17,206
如果要这样做

1014
00:23:17,376 --> 00:23:18,446
比如我们这样

1015
00:23:18,446 --> 00:23:19,476
处理一下紫色圆圈

1016
00:23:19,616 --> 00:23:21,496
我们在它的左右两边

1017
00:23:21,496 --> 00:23:22,396
放置可调整的间距

1018
00:23:22,766 --> 00:23:23,886
你可能会使圆圈在

1019
00:23:23,886 --> 00:23:24,986
Touch Bar 应用程序区里居中

1020
00:23:24,986 --> 00:23:26,276
这可能是你

1021
00:23:26,276 --> 00:23:26,966
想做的

1022
00:23:27,286 --> 00:23:28,416
但是你可能同样

1023
00:23:28,416 --> 00:23:29,626
希望使这个项在真正的设备上

1024
00:23:29,626 --> 00:23:31,286
也居中 但并它不在

1025
00:23:31,286 --> 00:23:31,646
那里

1026
00:23:31,646 --> 00:23:34,566
我们稍微有些偏右了

1027
00:23:34,566 --> 00:23:36,136
所以我们可以通过用

1028
00:23:36,136 --> 00:23:37,556
一个叫主要项标识符的

1029
00:23:37,556 --> 00:23:38,726
NSTouchBar 属性来解决它

1030
00:23:39,686 --> 00:23:41,376
我们可以将

1031
00:23:41,376 --> 00:23:41,816
Touch Bar 的

1032
00:23:41,816 --> 00:23:43,116
主要项标识符设置成

1033
00:23:43,116 --> 00:23:44,676
任何可视项的标识符

1034
00:23:45,076 --> 00:23:47,106
它就会将此项

1035
00:23:47,106 --> 00:23:48,656
置于设备

1036
00:23:48,656 --> 00:23:49,656
的中间位置

1037
00:23:50,186 --> 00:23:51,896
当我们看这个例子时

1038
00:23:51,896 --> 00:23:53,456
这里所有的代码都是

1039
00:23:53,456 --> 00:23:54,176
我们在前一张幻灯片里看到过的

1040
00:23:54,176 --> 00:23:55,986
除了我们被设置过的

1041
00:23:55,986 --> 00:23:56,686
主要项标识符的

1042
00:23:56,686 --> 00:23:57,776
最后一行

1043
00:23:58,186 --> 00:23:59,306
通过设置鲨鱼标识符

1044
00:23:59,306 --> 00:24:01,016
我们将鲨鱼放到

1045
00:23:59,306 --> 00:24:01,016
我们将鲨鱼放到

1046
00:24:01,016 --> 00:24:02,296
Touch Bar 的中间

1047
00:24:02,296 --> 00:24:03,966
然后就像我们在别处做的一样

1048
00:24:03,966 --> 00:24:05,256
将项从左到右

1049
00:24:05,256 --> 00:24:05,946
摆放

1050
00:24:06,506 --> 00:24:07,456
如果我们要改用海龟

1051
00:24:07,456 --> 00:24:09,356
鲨鱼像之前一样

1052
00:24:09,356 --> 00:24:10,296
被放在左边

1053
00:24:10,296 --> 00:24:11,376
然后海龟会被

1054
00:24:11,376 --> 00:24:12,266
放在设备的中间

1055
00:24:13,076 --> 00:24:14,356
这在自动设置间距和

1056
00:24:14,356 --> 00:24:16,056
某些其他情况

1057
00:24:16,056 --> 00:24:16,346
表现得很好

1058
00:24:16,346 --> 00:24:17,246
所以你可以用它来制作

1059
00:24:17,246 --> 00:24:17,796
一些小的设备

1060
00:24:17,976 --> 00:24:19,076
还有其他种类的

1061
00:24:19,236 --> 00:24:20,796
能修改主要项标识符

1062
00:24:21,136 --> 00:24:22,656
行为的 NSTouchBar

1063
00:24:22,656 --> 00:24:23,816
子项

1064
00:24:24,156 --> 00:24:25,576
接下来 John 将为大家

1065
00:24:25,896 --> 00:24:27,846
深入地讲解

1066
00:24:27,846 --> 00:24:29,626
NSTouchBar 项

1067
00:24:30,396 --> 00:24:31,336
欢迎 John Tegtmeyer

1068
00:24:32,516 --> 00:24:35,856
[掌声]

1069
00:24:36,356 --> 00:24:38,186
Chris 向我们介绍了

1070
00:24:38,186 --> 00:24:39,866
NSTouchBar API 以及它如何

1071
00:24:39,866 --> 00:24:41,726
通过连接响应器链

1072
00:24:41,726 --> 00:24:43,186
让我们为用户提供

1073
00:24:43,186 --> 00:24:44,806
上下文敏感控件

1074
00:24:45,316 --> 00:24:46,546
他也提到了

1075
00:24:46,586 --> 00:24:48,196
NSTouchBar 项目对象

1076
00:24:48,196 --> 00:24:50,026
是环绕 Touch Bar 里所有

1077
00:24:50,026 --> 00:24:50,626
视图的

1078
00:24:51,346 --> 00:24:52,486
现在 AppKit 

1079
00:24:52,486 --> 00:24:54,096
提供项的许多子项

1080
00:24:54,096 --> 00:24:54,956
他们都能提供一些

1081
00:24:54,956 --> 00:24:56,536
非常特殊的 很酷的功能

1082
00:24:56,796 --> 00:24:57,776
现在我来为大家深入的

1083
00:24:57,776 --> 00:24:58,986
讲解一下这些项

1084
00:24:59,686 --> 00:25:01,996
NSTouchBar 项是我们

1085
00:24:59,686 --> 00:25:01,996
NSTouchBar 项是我们

1086
00:25:01,996 --> 00:25:02,946
今天谈论的所有东西的

1087
00:25:02,946 --> 00:25:03,426
基本项

1088
00:25:03,826 --> 00:25:04,976
这代表它的设置

1089
00:25:04,976 --> 00:25:05,996
会被子项所

1090
00:25:05,996 --> 00:25:06,736
继承

1091
00:25:07,256 --> 00:25:08,266
所有 Touch Bar 项都有的

1092
00:25:08,266 --> 00:25:09,596
东西就是唯一

1093
00:25:09,596 --> 00:25:10,346
标识符

1094
00:25:11,116 --> 00:25:13,806
这就是 NSTouchBar 用来

1095
00:25:13,806 --> 00:25:14,696
通过模板项数组

1096
00:25:14,696 --> 00:25:15,956
或委托来查找项的

1097
00:25:15,956 --> 00:25:17,896
东西

1098
00:25:18,666 --> 00:25:20,216
项也有视图或者视图

1099
00:25:20,216 --> 00:25:20,716
控制器

1100
00:25:20,996 --> 00:25:21,736
这也是实际上会

1101
00:25:21,736 --> 00:25:23,056
展示给用户的东西

1102
00:25:23,316 --> 00:25:24,246
如果你在使用视图

1103
00:25:24,246 --> 00:25:25,236
控制器 这是延迟

1104
00:25:25,236 --> 00:25:27,336
加载视图的

1105
00:25:27,336 --> 00:25:27,836
好机会

1106
00:25:28,736 --> 00:25:30,066
我们同样有自定义

1107
00:25:30,066 --> 00:25:30,436
标签

1108
00:25:30,436 --> 00:25:31,736
这是显示在

1109
00:25:31,736 --> 00:25:33,146
自定义 UI 上的

1110
00:25:33,146 --> 00:25:33,626
字符串

1111
00:25:33,916 --> 00:25:35,156
它定义了你的控件能

1112
00:25:35,156 --> 00:25:35,926
做什么

1113
00:25:36,796 --> 00:25:38,396
我希望你们注意到了

1114
00:25:38,396 --> 00:25:39,466
在这里我们没有的是

1115
00:25:39,466 --> 00:25:41,246
明确的最小或最大的

1116
00:25:41,276 --> 00:25:41,736
属性

1117
00:25:42,276 --> 00:25:43,756
这是因为 不同于

1118
00:25:43,756 --> 00:25:46,016
工具栏项确实具有这些

1119
00:25:46,016 --> 00:25:47,926
明确的属性

1120
00:25:47,926 --> 00:25:49,336
NSTouchBarItem 的度量

1121
00:25:49,336 --> 00:25:50,366
是有限制的

1122
00:25:50,776 --> 00:25:51,956
这意味着 如果你

1123
00:25:51,956 --> 00:25:53,666
使用一个有 intrinsicContentSize 的

1124
00:25:53,666 --> 00:25:54,956
类似 NSButton 的东西

1125
00:25:54,956 --> 00:25:56,526
它将自动调整大小

1126
00:25:56,526 --> 00:25:58,166
以适应标题和

1127
00:25:58,166 --> 00:25:58,626
图像

1128
00:25:59,196 --> 00:26:00,356
你也可以选择使用

1129
00:25:59,196 --> 00:26:00,356
你也可以选择使用

1130
00:26:00,356 --> 00:26:01,796
不等式约束去设置

1131
00:26:01,846 --> 00:26:03,456
最大及最小尺寸

1132
00:26:03,836 --> 00:26:04,996
AppKit 将基于

1133
00:26:04,996 --> 00:26:06,726
应用程序区可用的距离

1134
00:26:06,726 --> 00:26:07,996
来自动调整视图

1135
00:26:07,996 --> 00:26:09,026
大小

1136
00:26:09,286 --> 00:26:10,596
你可以在今天晚些时候的

1137
00:26:10,596 --> 00:26:11,986
“Advanced Touch Bar（Touch Bar 进阶）”演讲上听到

1138
00:26:11,986 --> 00:26:13,636
更多关于项目大小的

1139
00:26:15,256 --> 00:26:15,386
内容

1140
00:26:15,576 --> 00:26:17,496
现在 就像我之前提到的一样

1141
00:26:17,606 --> 00:26:20,156
AppKit 提供了很多的

1142
00:26:20,156 --> 00:26:20,646
项子类

1143
00:26:21,276 --> 00:26:22,296
我们将逐个进行

1144
00:26:22,296 --> 00:26:22,576
讲解

1145
00:26:22,576 --> 00:26:23,486
我们将谈到

1146
00:26:23,486 --> 00:26:25,326
Touch Bar 自定义项 弹窗

1147
00:26:25,326 --> 00:26:27,436
滑动条 组项 以及在最后会提到的

1148
00:26:27,436 --> 00:26:28,736
几个额外的话题

1149
00:26:28,976 --> 00:26:30,306
好的 让我们从 Touch Bar 的

1150
00:26:30,306 --> 00:26:31,306
自定义项开始

1151
00:26:31,886 --> 00:26:34,256
现在自定义项为我们

1152
00:26:34,316 --> 00:26:35,666
刚才提到的所有基类上

1153
00:26:35,666 --> 00:26:36,566
的东西提供了重写

1154
00:26:36,566 --> 00:26:37,236
属性

1155
00:26:37,346 --> 00:26:38,526
这意味着你可以简单地

1156
00:26:38,526 --> 00:26:39,816
对视图控制器的视图进行设置

1157
00:26:39,816 --> 00:26:40,916
而不是子类化你的

1158
00:26:40,916 --> 00:26:41,286
项

1159
00:26:41,886 --> 00:26:43,066
如果你想展示一个按钮

1160
00:26:43,066 --> 00:26:44,196
或者一个分段选择控件

1161
00:26:44,196 --> 00:26:45,356
或者任何你熟悉的

1162
00:26:45,356 --> 00:26:46,376
AppKit 或者

1163
00:26:47,096 --> 00:26:48,426
自定义容器视图

1164
00:26:48,426 --> 00:26:49,876
你都可以使用

1165
00:26:49,876 --> 00:26:50,736
它

1166
00:26:52,296 --> 00:26:53,566
这也是使用 10.12 中

1167
00:26:53,566 --> 00:26:54,716
引入的便利

1168
00:26:54,716 --> 00:26:56,016
构造函数的

1169
00:26:56,016 --> 00:26:57,126
好机会

1170
00:26:57,596 --> 00:26:58,226
让我们来看看

1171
00:26:59,206 --> 00:27:00,556
在这个例子里

1172
00:26:59,206 --> 00:27:00,556
在这个例子里

1173
00:27:00,556 --> 00:27:01,696
我们将为 Touch Bar 创建一个简单的

1174
00:27:01,696 --> 00:27:01,916
按钮

1175
00:27:02,356 --> 00:27:04,376
我们通过创建

1176
00:27:04,376 --> 00:27:05,506
自定义 Touch Bar 项以

1177
00:27:05,506 --> 00:27:07,026
提供唯一标识符来实现

1178
00:27:07,026 --> 00:27:08,486
我们将会用之前看到的

1179
00:27:08,486 --> 00:27:10,166
title: target: action: 格式构造函数

1180
00:27:10,166 --> 00:27:11,636
来将项的视图

1181
00:27:11,636 --> 00:27:13,006
设置为 NSButton

1182
00:27:13,696 --> 00:27:15,156
就像 Chris 提到的

1183
00:27:15,156 --> 00:27:16,616
这将把正确的字体和

1184
00:27:16,616 --> 00:27:17,606
正确的外观赋值给这个

1185
00:27:17,606 --> 00:27:17,886
按钮

1186
00:27:17,886 --> 00:27:18,966
我们用两行简单的代码

1187
00:27:18,966 --> 00:27:20,256
为 Touch Bar 创建了

1188
00:27:20,256 --> 00:27:21,736
一个漂亮的按钮

1189
00:27:22,656 --> 00:27:23,846
这对更加复杂的控件也

1190
00:27:23,846 --> 00:27:24,936
适用

1191
00:27:25,336 --> 00:27:26,826
在这里 这是一个

1192
00:27:26,826 --> 00:27:27,806
分段控制器

1193
00:27:28,096 --> 00:27:29,356
分段控制器同时有一个

1194
00:27:29,356 --> 00:27:30,416
便利构造器

1195
00:27:30,766 --> 00:27:32,306
同样用两行代码

1196
00:27:32,306 --> 00:27:34,376
我为了看起来更清晰所以将它间隔开

1197
00:27:34,376 --> 00:27:35,416
为 Touch Bar 创建了一个

1198
00:27:35,416 --> 00:27:36,776
有正确外观

1199
00:27:36,776 --> 00:27:39,656
和字体的美观

1200
00:27:39,656 --> 00:27:39,916
控件

1201
00:27:40,056 --> 00:27:41,636
下面 我们来谈谈弹出框

1202
00:27:42,386 --> 00:27:43,596
弹出框项很酷

1203
00:27:43,596 --> 00:27:44,756
因为它能在用户要求的时候

1204
00:27:44,806 --> 00:27:46,776
为用户提供

1205
00:27:46,776 --> 00:27:49,166
更多内容

1206
00:27:49,606 --> 00:27:50,916
弹出框分两个部分

1207
00:27:51,496 --> 00:27:52,396
第一部分是折叠形式

1208
00:27:52,396 --> 00:27:53,486
是当弹出框关闭时

1209
00:27:53,486 --> 00:27:55,066
展示给用户的

1210
00:27:55,066 --> 00:27:56,226
视图

1211
00:27:56,806 --> 00:27:57,876
第二部分是

1212
00:27:57,876 --> 00:27:59,266
弹出框的 NSTouchBar

1213
00:27:59,266 --> 00:28:00,166
当弹出框打开的时候

1214
00:27:59,266 --> 00:28:00,166
当弹出框打开的时候

1215
00:28:00,166 --> 00:28:01,316
它会接管

1216
00:28:01,316 --> 00:28:02,276
应用程序区

1217
00:28:02,276 --> 00:28:03,646
这让你能够使用

1218
00:28:03,646 --> 00:28:03,856
principalItemIdentifier

1219
00:28:03,856 --> 00:28:05,916
甚至让你能进行

1220
00:28:05,916 --> 00:28:07,076
自定义

1221
00:28:08,386 --> 00:28:09,576
让我们多谈谈

1222
00:28:09,576 --> 00:28:10,366
折叠形式

1223
00:28:11,826 --> 00:28:13,056
AppKit 将给你提供一个默认值

1224
00:28:13,056 --> 00:28:14,816
你能通过折叠形式的

1225
00:28:14,816 --> 00:28:15,946
图像或者标签

1226
00:28:15,946 --> 00:28:17,826
属性来进行

1227
00:28:17,826 --> 00:28:18,806
自定义

1228
00:28:19,116 --> 00:28:20,176
你可以在弹出框队列

1229
00:28:20,176 --> 00:28:21,596
和排版控件里

1230
00:28:21,596 --> 00:28:22,766
看到这种

1231
00:28:22,766 --> 00:28:23,326
例子

1232
00:28:23,976 --> 00:28:25,686
你也可以选择

1233
00:28:25,686 --> 00:28:26,826
使用更加自定义的东西

1234
00:28:27,206 --> 00:28:28,896
“邮件”选择使用分段

1235
00:28:28,896 --> 00:28:29,406
控制器

1236
00:28:29,406 --> 00:28:30,826
如果你点击这个控件的主要部分

1237
00:28:30,826 --> 00:28:31,656
它马上将

1238
00:28:31,656 --> 00:28:33,516
消息移动到建议的

1239
00:28:33,606 --> 00:28:35,696
邮箱里

1240
00:28:36,446 --> 00:28:37,546
但是如果你点击箭头 它

1241
00:28:37,546 --> 00:28:38,556
将出现一个有

1242
00:28:38,556 --> 00:28:39,716
额外建议的弹出框

1243
00:28:40,336 --> 00:28:41,566
这其实非常容易做到

1244
00:28:41,566 --> 00:28:43,756
你只需要给折叠形式

1245
00:28:43,756 --> 00:28:44,846
提供你的视图

1246
00:28:44,846 --> 00:28:46,536
然后使用显示弹出框

1247
00:28:46,536 --> 00:28:47,746
和隐藏弹出框

1248
00:28:47,746 --> 00:28:48,856
的方法

1249
00:28:50,066 --> 00:28:51,446
弹出框也有两个

1250
00:28:51,446 --> 00:28:52,406
交互模型

1251
00:28:52,746 --> 00:28:53,826
第一个是触摸并显示

1252
00:28:54,636 --> 00:28:55,896
当用户点击折叠形式时

1253
00:28:55,936 --> 00:28:58,176
会用到这个

1254
00:28:58,476 --> 00:29:00,776
弹出框被打开

1255
00:28:58,476 --> 00:29:00,776
弹出框被打开

1256
00:29:00,776 --> 00:29:02,456
它的粘性让你能做出

1257
00:29:02,766 --> 00:29:04,136
多种选择

1258
00:29:04,766 --> 00:29:05,956
它只在用户点击关闭

1259
00:29:05,956 --> 00:29:06,946
按钮的时候才会关闭

1260
00:29:07,776 --> 00:29:08,996
第二个交互模型是

1261
00:29:08,996 --> 00:29:09,706
按住并保持

1262
00:29:10,046 --> 00:29:11,126
它在用户按住并保持

1263
00:29:11,126 --> 00:29:12,356
折叠形式的时候

1264
00:29:12,356 --> 00:29:13,136
会用到

1265
00:29:13,436 --> 00:29:14,826
弹出框可直接通过

1266
00:29:14,826 --> 00:29:16,246
用户的手指打开

1267
00:29:16,536 --> 00:29:17,736
并立即开始追踪

1268
00:29:17,736 --> 00:29:18,286
他们的输入

1269
00:29:18,696 --> 00:29:19,816
当用户做出选择

1270
00:29:19,816 --> 00:29:21,186
并抬起手指时

1271
00:29:21,186 --> 00:29:21,596
它就关闭了

1272
00:29:21,906 --> 00:29:23,646
你可能会注意到

1273
00:29:23,646 --> 00:29:25,226
在这两个例子里

1274
00:29:25,226 --> 00:29:26,006
弹出框其实显示的是

1275
00:29:26,006 --> 00:29:26,476
不同的内容

1276
00:29:27,316 --> 00:29:29,026
触摸并显示展示了多个控件

1277
00:29:29,026 --> 00:29:30,256
而按住并保持

1278
00:29:30,256 --> 00:29:31,656
则展示了单个的分段

1279
00:29:31,656 --> 00:29:32,036
控制器

1280
00:29:32,356 --> 00:29:33,196
这是因为触摸并显示

1281
00:29:33,196 --> 00:29:34,596
从始至终都在追踪

1282
00:29:34,596 --> 00:29:35,776
用户的手指

1283
00:29:36,076 --> 00:29:37,446
所以 我们最好将

1284
00:29:37,446 --> 00:29:39,216
这种交互留给单一的

1285
00:29:39,216 --> 00:29:39,736
控件

1286
00:29:39,916 --> 00:29:40,886
在这里可以是一个分段

1287
00:29:40,886 --> 00:29:42,036
控制器 或者是一个

1288
00:29:42,036 --> 00:29:42,886
滑块

1289
00:29:43,996 --> 00:29:46,286
这很容易实现

1290
00:29:46,516 --> 00:29:47,566
原因是弹出框其实有两个

1291
00:29:47,566 --> 00:29:49,176
不同的 NSTouchBar 属性

1292
00:29:49,456 --> 00:29:50,546
一个是给触摸并显示的弹出框

1293
00:29:50,546 --> 00:29:51,926
另一个是给

1294
00:29:51,926 --> 00:29:52,616
按下并保留的

1295
00:29:53,746 --> 00:29:55,786
如果你不为按下并保留模型

1296
00:29:55,786 --> 00:29:57,176
提供一个 NSTouchBar

1297
00:29:57,176 --> 00:29:58,346
按下并保留模型

1298
00:29:58,346 --> 00:29:58,976
就不会被启用

1299
00:29:59,636 --> 00:30:01,616
这两个属性同时提供

1300
00:29:59,636 --> 00:30:01,616
这两个属性同时提供

1301
00:30:01,616 --> 00:30:03,146
相同的 NSTouchBar

1302
00:30:03,146 --> 00:30:03,986
并且工作的很好

1303
00:30:03,986 --> 00:30:04,886
是有可能的

1304
00:30:05,266 --> 00:30:06,366
但是就像我提到的 按下并保留模型

1305
00:30:06,366 --> 00:30:08,226
最好是留给

1306
00:30:08,456 --> 00:30:10,146
类似分段控制器或者

1307
00:30:10,146 --> 00:30:12,676
滑动模块这样的

1308
00:30:12,676 --> 00:30:12,946
单一项

1309
00:30:14,416 --> 00:30:15,826
我们来说说

1310
00:30:15,826 --> 00:30:16,536
滑动模块

1311
00:30:17,246 --> 00:30:18,106
现在你可能在想

1312
00:30:18,106 --> 00:30:19,046
滑动模块和有 NSSlider 作为

1313
00:30:19,046 --> 00:30:20,416
视图的自定义

1314
00:30:20,466 --> 00:30:21,986
Touch Bar 有什么

1315
00:30:21,986 --> 00:30:22,296
区别

1316
00:30:22,866 --> 00:30:23,936
我来为大家解释

1317
00:30:24,916 --> 00:30:25,946
滑动模块有几个不同的

1318
00:30:25,946 --> 00:30:26,576
地方

1319
00:30:26,676 --> 00:30:27,976
首先 我们有滑块本身

1320
00:30:28,506 --> 00:30:29,646
其次 我们有这些新的值的配件

1321
00:30:29,646 --> 00:30:30,996
它们是一些

1322
00:30:30,996 --> 00:30:32,176
很难处理的图片

1323
00:30:32,176 --> 00:30:34,026
你可以点击它们以

1324
00:30:34,026 --> 00:30:35,256
增加或减少你滑块

1325
00:30:35,256 --> 00:30:35,756
的值

1326
00:30:36,416 --> 00:30:37,386
我们还有个标签

1327
00:30:38,276 --> 00:30:39,556
这能让用户

1328
00:30:39,556 --> 00:30:41,656
更清楚这个滑块

1329
00:30:41,656 --> 00:30:42,526
实际上控制的是什么

1330
00:30:42,726 --> 00:30:43,696
而且如果你的 UI 里有

1331
00:30:43,696 --> 00:30:45,206
多个滑块 这将十分

1332
00:30:45,586 --> 00:30:45,676
有用

1333
00:30:46,196 --> 00:30:47,896
就像我提到的 这为

1334
00:30:47,896 --> 00:30:49,126
按住并保留弹出框提供了

1335
00:30:49,126 --> 00:30:49,696
很好的内容

1336
00:30:49,976 --> 00:30:50,636
这是因为对

1337
00:30:50,636 --> 00:30:51,906
用户手指立即进行处理

1338
00:30:51,906 --> 00:30:53,416
即使触摸

1339
00:30:53,416 --> 00:30:54,846
不发生在滑块的

1340
00:30:54,846 --> 00:30:55,426
旋钮上

1341
00:30:55,906 --> 00:30:56,726
这意味着用户可以

1342
00:30:56,726 --> 00:30:57,906
立刻开始与之交互

1343
00:30:57,906 --> 00:30:59,086
而不用

1344
00:30:59,086 --> 00:31:00,306
四处寻找旋钮来与

1345
00:30:59,086 --> 00:31:00,306
四处寻找旋钮来与

1346
00:31:00,306 --> 00:31:01,346
滑块进行交互

1347
00:31:01,886 --> 00:31:04,026
我们来看看这在

1348
00:31:04,026 --> 00:31:04,986
代码上是什么

1349
00:31:04,986 --> 00:31:05,166
样子的

1350
00:31:05,926 --> 00:31:06,846
首先 我们要创建项

1351
00:31:06,846 --> 00:31:07,616
本身

1352
00:31:07,796 --> 00:31:08,866
我们要提供一个唯一

1353
00:31:08,866 --> 00:31:09,546
标识符

1354
00:31:10,346 --> 00:31:11,366
接下来 我们要为它

1355
00:31:11,366 --> 00:31:13,046
赋最大和最小值的配件

1356
00:31:13,046 --> 00:31:14,056
我们还要用 AppKit

1357
00:31:14,056 --> 00:31:15,756
提供的图片

1358
00:31:16,336 --> 00:31:17,166
最后 我们要

1359
00:31:17,166 --> 00:31:18,476
赋给他一个标签 因为我们可能

1360
00:31:18,476 --> 00:31:19,836
想在 UI 上有多个滑块

1361
00:31:19,836 --> 00:31:21,966
但是你会注意到

1362
00:31:21,966 --> 00:31:23,006
滑块可能会占据

1363
00:31:23,006 --> 00:31:24,516
整个应用区域

1364
00:31:24,516 --> 00:31:25,776
因为滑块没有

1365
00:31:25,776 --> 00:31:27,166
固有内容

1366
00:31:27,166 --> 00:31:27,476
大小

1367
00:31:27,526 --> 00:31:28,446
他们很高兴在应用区域

1368
00:31:28,446 --> 00:31:29,786
里占据任何

1369
00:31:29,786 --> 00:31:30,786
大小

1370
00:31:31,546 --> 00:31:33,416
你可以通过

1371
00:31:33,416 --> 00:31:34,966
对滑块添加一个约束来改变它

1372
00:31:34,966 --> 00:31:36,606
AppKit 将检查并

1373
00:31:36,606 --> 00:31:38,316
自动的重置它的

1374
00:31:38,316 --> 00:31:39,226
大小

1375
00:31:39,586 --> 00:31:40,546
但是要注意 我们是

1376
00:31:40,546 --> 00:31:42,036
在滑块本身上做这些事

1377
00:31:42,036 --> 00:31:43,866
而不是滑块项的视图上

1378
00:31:43,866 --> 00:31:45,086
因为我们在这里有个标签

1379
00:31:45,416 --> 00:31:47,096
如果我们改变位置

1380
00:31:47,226 --> 00:31:48,186
这段字符串的长度会被改变

1381
00:31:48,186 --> 00:31:49,996
我们不想引起

1382
00:31:50,526 --> 00:31:51,676
文本剪切

1383
00:31:52,396 --> 00:31:53,326
下面 我们来谈谈

1384
00:31:53,326 --> 00:31:54,006
NSGroupTouchBarItem

1385
00:31:54,726 --> 00:31:56,086
数据组项很简单

1386
00:31:56,086 --> 00:31:57,286
因为它让你将多个

1387
00:31:57,286 --> 00:31:58,706
Touch Bar 项组合成一个

1388
00:31:58,706 --> 00:32:00,176
单一的 NSTouchBarItem 实例

1389
00:31:58,706 --> 00:32:00,176
单一的 NSTouchBarItem 实例

1390
00:32:00,576 --> 00:32:01,686
这是因为它与弹出框很像

1391
00:32:01,686 --> 00:32:03,216
都能提供它的

1392
00:32:03,346 --> 00:32:04,696
NSTouchBar 属性

1393
00:32:05,426 --> 00:32:06,386
在我上方的排版控件

1394
00:32:06,386 --> 00:32:07,686
就是这样的一个例子

1395
00:32:08,036 --> 00:32:08,966
他们被组合成了一个

1396
00:32:08,966 --> 00:32:10,886
单一的 NSTouchBarItem

1397
00:32:11,426 --> 00:32:12,736
有很多原因可能让你做这件事

1398
00:32:12,736 --> 00:32:13,976
我将对每一个

1399
00:32:13,976 --> 00:32:14,966
进行讲解

1400
00:32:15,766 --> 00:32:17,286
当居中多个项时

1401
00:32:17,586 --> 00:32:18,446
你可以对自定义

1402
00:32:18,446 --> 00:32:19,826
和定位目的使用

1403
00:32:19,826 --> 00:32:21,296
一些技巧

1404
00:32:22,236 --> 00:32:23,266
如果你记得几分钟前

1405
00:32:23,266 --> 00:32:24,176
Chris 讲到的

1406
00:32:24,176 --> 00:32:24,436
principalItemIdentifier

1407
00:32:24,436 --> 00:32:26,236
你会回忆起

1408
00:32:26,236 --> 00:32:27,566
单一的项标识符

1409
00:32:27,566 --> 00:32:28,866
其实是作为主要项

1410
00:32:28,866 --> 00:32:29,576
提供的

1411
00:32:29,576 --> 00:32:32,276
那么如果你想像 FaceTime 一样

1412
00:32:32,276 --> 00:32:34,146
将多个项一起居中

1413
00:32:34,146 --> 00:32:35,336
会发生什么

1414
00:32:36,026 --> 00:32:37,396
你可以将这些项

1415
00:32:37,476 --> 00:32:39,006
组合成单个的 Touch Bar 组合项

1416
00:32:39,006 --> 00:32:40,426
然后将项的标识符

1417
00:32:40,426 --> 00:32:42,126
提供为主要项

1418
00:32:42,126 --> 00:32:42,746
标识符

1419
00:32:43,026 --> 00:32:45,776
你也可以在自定义里

1420
00:32:45,776 --> 00:32:47,266
使用一些技巧

1421
00:32:47,516 --> 00:32:48,886
如果你像我们这里做的一样

1422
00:32:48,886 --> 00:32:50,506
是一个非自定义的组

1423
00:32:50,506 --> 00:32:51,766
你会注意到这些项已经

1424
00:32:51,766 --> 00:32:52,766
被聚合到一起

1425
00:32:53,116 --> 00:32:54,666
这意味着当用户

1426
00:32:54,666 --> 00:32:56,536
将这些按钮

1427
00:32:56,536 --> 00:32:58,156
拖拽到 Touch Bar 里的时候

1428
00:32:58,156 --> 00:32:59,126
这三个将聚合在一起

1429
00:32:59,856 --> 00:33:00,936
这里有一个单个的

1430
00:32:59,856 --> 00:33:00,936
这里有一个单个的

1431
00:33:00,936 --> 00:33:02,516
自定义标签将这些控件

1432
00:33:02,516 --> 00:33:04,046
描述为播放

1433
00:33:04,456 --> 00:33:05,776
控件

1434
00:33:06,986 --> 00:33:08,696
如果你选择将你的组

1435
00:33:08,696 --> 00:33:09,936
进行自定义

1436
00:33:09,936 --> 00:33:11,276
你还将获得一些很酷的

1437
00:33:11,276 --> 00:33:11,726
行为

1438
00:33:12,296 --> 00:33:13,606
在这个例子里 我们有

1439
00:33:13,606 --> 00:33:14,716
两个 Touch Bar 项的组

1440
00:33:15,136 --> 00:33:16,456
他们都可以进行

1441
00:33:16,456 --> 00:33:16,926
自定义

1442
00:33:17,376 --> 00:33:18,906
他们一个包含一组

1443
00:33:18,906 --> 00:33:19,726
海洋动物

1444
00:33:19,726 --> 00:33:21,066
另一组是农场里的动物

1445
00:33:22,096 --> 00:33:23,406
如果我开始自定义

1446
00:33:23,406 --> 00:33:24,706
你会注意到我可以自由的

1447
00:33:24,706 --> 00:33:26,146
重新排序这些项

1448
00:33:26,146 --> 00:33:27,426
无论我在他们的组里怎么选择

1449
00:33:28,656 --> 00:33:30,666
如果我尝试 拿出一个

1450
00:33:30,806 --> 00:33:32,846
海洋动物然后

1451
00:33:32,846 --> 00:33:34,496
将它放到农场动物里

1452
00:33:34,496 --> 00:33:35,716
它将回跳到原来的地方

1453
00:33:35,896 --> 00:33:36,996
因为这是在

1454
00:33:36,996 --> 00:33:38,186
从组里移除项

1455
00:33:38,186 --> 00:33:39,076
这是不被支持的

1456
00:33:41,926 --> 00:33:43,176
GroupTouchBarItem 对本地化

1457
00:33:43,176 --> 00:33:44,256
也有非常酷的

1458
00:33:44,256 --> 00:33:45,096
作用

1459
00:33:45,526 --> 00:33:46,776
现在 我很确定你的应用

1460
00:33:46,776 --> 00:33:47,976
有很多的用户

1461
00:33:47,976 --> 00:33:49,176
有些用户的母语是

1462
00:33:49,176 --> 00:33:51,246
从右往左阅读的

1463
00:33:51,246 --> 00:33:52,866
希伯来语或者阿拉伯语

1464
00:33:53,396 --> 00:33:54,686
我敢肯定你的应用

1465
00:33:54,686 --> 00:33:55,826
已经为这些用户

1466
00:33:55,826 --> 00:33:57,106
准确地调换了书写方向

1467
00:33:57,326 --> 00:33:58,556
我们希望 Touch Bar 也能反映

1468
00:33:58,556 --> 00:33:59,126
出来

1469
00:34:00,116 --> 00:34:01,376
一个很好的例子是

1470
00:34:01,376 --> 00:34:02,206
FaceTime 的 UI

1471
00:34:02,356 --> 00:34:04,236
FaceTime 选择展示全屏

1472
00:34:04,236 --> 00:34:06,466
静音键既在屏幕上

1473
00:34:06,466 --> 00:34:07,436
又在 Touch bar

1474
00:34:07,436 --> 00:34:07,966
上

1475
00:34:08,255 --> 00:34:09,376
你会注意到这些键的

1476
00:34:09,376 --> 00:34:10,326
顺序是对应的

1477
00:34:11,146 --> 00:34:12,335
如果你将语言换成阿拉伯语

1478
00:34:12,335 --> 00:34:14,456
你会发现

1479
00:34:14,456 --> 00:34:15,596
屏幕上的按钮

1480
00:34:15,826 --> 00:34:17,366
键的顺序已经反转

1481
00:34:17,366 --> 00:34:17,815
过来了

1482
00:34:18,106 --> 00:34:19,376
我们对 Touch Bar 也要

1483
00:34:19,376 --> 00:34:21,476
保持同样的对应顺序

1484
00:34:22,536 --> 00:34:23,626
但是需要注意

1485
00:34:23,626 --> 00:34:25,216
不是所有东西都能反转

1486
00:34:25,275 --> 00:34:26,326
退出键和控制条

1487
00:34:26,326 --> 00:34:27,666
要保持不动 无论是从左到右

1488
00:34:27,666 --> 00:34:28,545
还是从右到左

1489
00:34:28,545 --> 00:34:29,085
阅读

1490
00:34:29,565 --> 00:34:30,876
只有特殊的项组

1491
00:34:30,876 --> 00:34:32,795
才有可能反转

1492
00:34:32,916 --> 00:34:34,596
比如中央控制器

1493
00:34:34,596 --> 00:34:35,596
我们可以反转以符合

1494
00:34:35,596 --> 00:34:36,706
屏幕上的 UI

1495
00:34:37,116 --> 00:34:38,396
打进电话的图片

1496
00:34:38,396 --> 00:34:39,456
和标签也是可以

1497
00:34:39,456 --> 00:34:39,846
反转的

1498
00:34:40,306 --> 00:34:41,565
但是项的位置并没有

1499
00:34:41,565 --> 00:34:42,616
移动到 Touch Bar 的

1500
00:34:42,616 --> 00:34:43,396
另外一边

1501
00:34:44,505 --> 00:34:46,275
使用 10.13 里的 GroupTouchBarItem

1502
00:34:46,275 --> 00:34:47,876
的新用户组界面布局方向属性

1503
00:34:47,876 --> 00:34:49,216
可以很轻松的实现

1504
00:34:49,216 --> 00:34:50,536
这一点

1505
00:34:50,976 --> 00:34:51,906
你可以设置它去反映

1506
00:34:51,906 --> 00:34:53,525
NSApp 用户界面

1507
00:34:53,525 --> 00:34:54,246
布局方向

1508
00:34:55,806 --> 00:34:56,676
现在 我相信你们意识到

1509
00:34:56,676 --> 00:34:57,936
语言不只是从左到右或者

1510
00:34:57,936 --> 00:34:58,846
从右到左

1511
00:34:58,846 --> 00:34:59,816
它也有长度有变化的

1512
00:34:59,816 --> 00:35:00,356
字符串

1513
00:34:59,816 --> 00:35:00,356
字符串

1514
00:35:00,356 --> 00:35:01,396
这是你在设计

1515
00:35:01,396 --> 00:35:02,776
你的 UI 时要重点

1516
00:35:02,776 --> 00:35:02,866
记住的

1517
00:35:03,646 --> 00:35:04,786
在这个例子里

1518
00:35:04,786 --> 00:35:05,806
我有一个我最爱的海洋生物

1519
00:35:05,806 --> 00:35:06,256
的清单

1520
00:35:06,626 --> 00:35:08,406
我用英文和德文运行

1521
00:35:08,406 --> 00:35:09,576
同一个 App

1522
00:35:10,186 --> 00:35:11,716
用英文时 我可以匹配

1523
00:35:11,716 --> 00:35:12,246
6 个项

1524
00:35:12,246 --> 00:35:13,756
用德文我只能匹配 5 个

1525
00:35:14,236 --> 00:35:15,366
这是因为鲨鱼项

1526
00:35:15,366 --> 00:35:16,636
没有足够的空间去

1527
00:35:16,636 --> 00:35:17,926
匹配 Touch Bar

1528
00:35:17,926 --> 00:35:18,986
所以它在用户面前是隐藏的

1529
00:35:19,316 --> 00:35:20,486
这对德文用户来说是

1530
00:35:20,486 --> 00:35:21,346
很不幸的

1531
00:35:22,186 --> 00:35:23,946
现在 你可能试图用

1532
00:35:23,946 --> 00:35:25,176
约束来解决这个问题

1533
00:35:25,176 --> 00:35:26,426
将每个键都设置为一样

1534
00:35:26,426 --> 00:35:26,726
宽

1535
00:35:26,726 --> 00:35:28,126
但是这不是一个好的解决办法

1536
00:35:28,126 --> 00:35:29,766
因为在我们变换位置的时候

1537
00:35:29,766 --> 00:35:31,716
我们基本上一定会

1538
00:35:31,716 --> 00:35:32,566
引起它们其中

1539
00:35:32,566 --> 00:35:33,556
一个的反转

1540
00:35:34,516 --> 00:35:35,876
现在 事实上

1541
00:35:35,876 --> 00:35:36,936
从 10.13 开始 GroupTouchBarItem 有一个

1542
00:35:36,936 --> 00:35:38,276
能自动处理这个问题

1543
00:35:38,276 --> 00:35:39,086
的方法

1544
00:35:39,386 --> 00:35:40,456
我鼓励你们去参加

1545
00:35:40,456 --> 00:35:41,546
今天晚些时候召开的叫做

1546
00:35:41,546 --> 00:35:43,116
“Advanced Touch Bar（Touch Bar 进阶）”的演讲

1547
00:35:43,116 --> 00:35:44,446
它将深入探讨到底是怎么做的

1548
00:35:46,126 --> 00:35:48,096
现在 我们有几个额外的话题

1549
00:35:48,096 --> 00:35:49,056
它们将包括在文档中

1550
00:35:49,056 --> 00:35:50,416
但我还是要进行

1551
00:35:50,416 --> 00:35:51,146
简要的介绍

1552
00:35:51,606 --> 00:35:52,716
首先要提到的是

1553
00:35:52,716 --> 00:35:54,006
ColorPickerTouchBarItem

1554
00:35:54,476 --> 00:35:55,896
它让用户可以直接

1555
00:35:55,896 --> 00:35:56,826
在 Touch Bar 上

1556
00:35:56,826 --> 00:35:57,486
选择颜色

1557
00:35:57,916 --> 00:35:59,016
他们可以选择他们

1558
00:35:59,016 --> 00:35:59,636
想要的颜色

1559
00:35:59,996 --> 00:36:00,946
他们甚至可以改变颜色模型

1560
00:35:59,996 --> 00:36:00,946
他们甚至可以改变颜色模型

1561
00:36:00,946 --> 00:36:02,416
并且你的文档可以对

1562
00:36:02,416 --> 00:36:03,756
颜色模型支持的

1563
00:36:03,756 --> 00:36:04,346
加以约束

1564
00:36:04,986 --> 00:36:06,366
用户也可以使用

1565
00:36:06,366 --> 00:36:07,296
他们最爱的色板

1566
00:36:07,296 --> 00:36:07,956
这真的是很好的

1567
00:36:07,956 --> 00:36:08,666
体验

1568
00:36:10,036 --> 00:36:10,816
我们还有分享服务

1569
00:36:10,816 --> 00:36:11,846
拾取器

1570
00:36:12,306 --> 00:36:13,646
这将是你能通过邮件

1571
00:36:13,646 --> 00:36:15,426
信息 AirDrop 甚至是

1572
00:36:15,426 --> 00:36:16,856
第三方保险的服务

1573
00:36:16,856 --> 00:36:17,726
共享文件

1574
00:36:17,726 --> 00:36:18,566
这些都是通过同一个

1575
00:36:18,566 --> 00:36:20,096
分享表完成的

1576
00:36:20,096 --> 00:36:20,676
服务

1577
00:36:22,066 --> 00:36:22,856
最后 我们有一个 NSScrubber

1578
00:36:22,896 --> 00:36:24,066
它其实是一个视图

1579
00:36:24,066 --> 00:36:25,156
而不是一个项

1580
00:36:25,186 --> 00:36:26,146
它可以是 Touch Bar 项的

1581
00:36:26,146 --> 00:36:26,886
视图

1582
00:36:27,536 --> 00:36:28,256
这就和我们刚才说到的

1583
00:36:28,256 --> 00:36:29,746
日历里的时间轴

1584
00:36:30,076 --> 00:36:32,236
Safari 的标签页

1585
00:36:32,236 --> 00:36:33,546
色板里的

1586
00:36:33,546 --> 00:36:34,416
颜色选择器

1587
00:36:34,416 --> 00:36:34,676
一样

1588
00:36:35,506 --> 00:36:36,836
这是一个多功能的

1589
00:36:36,836 --> 00:36:37,746
可变的控件

1590
00:36:37,746 --> 00:36:39,296
它是特别为 Touch Bar

1591
00:36:39,296 --> 00:36:40,086
设计的

1592
00:36:40,426 --> 00:36:41,836
你可以在之前的演讲中

1593
00:36:41,836 --> 00:36:42,926
了解到更多更深的

1594
00:36:42,926 --> 00:36:44,856
关于如何使用这个

1595
00:36:44,856 --> 00:36:45,626
控件的内容

1596
00:36:47,286 --> 00:36:48,616
好了 我们今天已经讲到了

1597
00:36:48,616 --> 00:36:49,436
很多内容

1598
00:36:49,766 --> 00:36:51,106
我们讲了 NSTouchBar API

1599
00:36:51,106 --> 00:36:52,726
它如何连接响应器链

1600
00:36:52,726 --> 00:36:54,486
你如何向用户提供

1601
00:36:54,486 --> 00:36:55,886
上下文敏感

1602
00:36:55,886 --> 00:36:57,136
的控件

1603
00:36:57,376 --> 00:36:58,106
我们讲到 NSTouchBarItem

1604
00:36:58,106 --> 00:36:59,696
和所有 AppKit

1605
00:36:59,696 --> 00:37:01,036
提供的子类以及

1606
00:36:59,696 --> 00:37:01,036
提供的子类以及

1607
00:37:01,036 --> 00:37:02,386
它们独一无二的功能

1608
00:37:02,566 --> 00:37:04,096
所以 今天你知道得足够多了

1609
00:37:04,096 --> 00:37:04,986
已经可以在你的应用程序中

1610
00:37:04,986 --> 00:37:06,096
采用 Touch Bar 技术了

1611
00:37:06,826 --> 00:37:08,036
你在采用的时候

1612
00:37:08,036 --> 00:37:08,976
你绝对应该让你的用户

1613
00:37:08,976 --> 00:37:10,426
能够进行自定义

1614
00:37:10,426 --> 00:37:11,886
使你的用户得到他们

1615
00:37:11,886 --> 00:37:12,646
想要的体验

1616
00:37:12,646 --> 00:37:14,056
一定记得在设计你的 UI 时

1617
00:37:14,056 --> 00:37:15,806
进行本地化 这样

1618
00:37:15,806 --> 00:37:17,646
你的用户才会获得

1619
00:37:17,646 --> 00:37:18,536
好的体验

1620
00:37:19,106 --> 00:37:20,576
要想了解更多信息

1621
00:37:20,576 --> 00:37:21,776
你可以登录我们的开发者网站

1622
00:37:21,776 --> 00:37:24,276
我们有一些你可能会

1623
00:37:24,276 --> 00:37:25,216
感兴趣的相关会议

1624
00:37:25,626 --> 00:37:26,556
“Choosing the Right Cocoa Container View

1625
00:37:26,556 --> 00:37:27,776
（选择正确的 Cocoa 视图容器）”

1626
00:37:28,026 --> 00:37:28,966
可以解决当你想将堆栈视图

1627
00:37:28,966 --> 00:37:30,586
换成网格视图的问题

1628
00:37:30,586 --> 00:37:31,866
这很重要 因为你可以将

1629
00:37:31,866 --> 00:37:32,806
这些视图容器中的一个

1630
00:37:32,806 --> 00:37:34,356
用作 TouchBarItem 的

1631
00:37:34,356 --> 00:37:36,366
内容视图

1632
00:37:37,196 --> 00:37:38,366
还有我们提到过很多次的

1633
00:37:38,366 --> 00:37:39,406
“Avanced Touch Bar（Touch Bar 进阶）”演讲

1634
00:37:39,406 --> 00:37:40,916
这个视频里介绍了

1635
00:37:40,916 --> 00:37:42,396
很多 Touch Bar 的

1636
00:37:42,436 --> 00:37:42,886
额外功能

1637
00:37:43,186 --> 00:37:44,356
感谢大家

1638
00:37:44,356 --> 00:37:45,016
今天的到来

1639
00:37:45,016 --> 00:37:45,846
请享受接下来

1640
00:37:45,846 --> 00:37:46,346
的会议

1641
00:37:47,016 --> 00:37:48,398
[掌声]
