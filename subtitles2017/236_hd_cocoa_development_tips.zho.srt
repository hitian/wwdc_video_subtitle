1
00:00:24,516 --> 00:00:26,556
[掌声]

2
00:00:27,056 --> 00:00:28,896
&gt;&gt; 大家早上好

3
00:00:28,896 --> 00:00:30,686
我是 Cocoa 工程师 Vincent Hittson

4
00:00:30,816 --> 00:00:32,816
这位是 Rachel Goldeen  也是 Cocoa 工程师

5
00:00:32,816 --> 00:00:35,176
欢迎来到 “Cocoa

6
00:00:35,176 --> 00:00:35,966
开发技巧”会场

7
00:00:37,036 --> 00:00:38,636
首先将有请 Rachel 为我们做开场白

8
00:00:39,586 --> 00:00:41,776
&gt;&gt; 早上好 今天上午

9
00:00:41,776 --> 00:00:43,606
我们将向大家广泛地展示

10
00:00:43,606 --> 00:00:45,156
一系列开发技巧

11
00:00:45,156 --> 00:00:45,666
我们会抓紧时间逐一讲解

12
00:00:45,846 --> 00:00:46,966
关于这些议题 如果想要弄清楚

13
00:00:46,966 --> 00:00:48,466
它们的安排顺序

14
00:00:48,466 --> 00:00:50,066
应该使用什么样的顺序或编码系统

15
00:00:50,066 --> 00:00:51,736
可能会有些棘手

16
00:00:51,736 --> 00:00:52,806
但最终我们还是想到了一些

17
00:00:52,806 --> 00:00:52,926
不错的方法

18
00:00:52,926 --> 00:00:54,446
首先 我给大家从

19
00:00:54,446 --> 00:00:56,656
一个快速技巧开始讲起

20
00:00:57,846 --> 00:01:00,466
也就是数字 π 的国际化

21
00:00:57,846 --> 00:01:00,466
也就是数字 π 的国际化

22
00:01:00,566 --> 00:01:03,256
因为我们都对此一窍不通

23
00:01:03,256 --> 00:01:05,176
我们只需观察一下 Xcode 的方案编辑器

24
00:01:05,176 --> 00:01:07,696
在它的运行部分里

25
00:01:07,696 --> 00:01:09,176
你-会发现其中有一个

26
00:01:09,176 --> 00:01:12,926
定位调试部分

27
00:01:13,356 --> 00:01:14,446
你可以勾选

28
00:01:14,446 --> 00:01:16,116
“显示非本地化字符串”的复选框

29
00:01:16,696 --> 00:01:17,826
然后查看你的 App 里

30
00:01:17,826 --> 00:01:19,076
本地化字符串的缺失位置

31
00:01:19,426 --> 00:01:20,436
但我希望你能将注意力

32
00:01:20,436 --> 00:01:21,876
放到这个应用程序的语言

33
00:01:21,876 --> 00:01:22,646
菜单上

34
00:01:23,046 --> 00:01:24,246
在菜单底部

35
00:01:24,246 --> 00:01:25,826
有一个伪语言列表

36
00:01:25,826 --> 00:01:28,076
你可以在翻译完成之前使用它

37
00:01:28,076 --> 00:01:29,456
它将显示你的 App 是否

38
00:01:29,456 --> 00:01:31,096
已经做好了那些

39
00:01:31,326 --> 00:01:32,406
翻译准备

40
00:01:32,886 --> 00:01:34,806
OK 就是这样 现在再请 Vince 来讲解

41
00:01:35,576 --> 00:01:37,856
&gt;&gt; 好的“技巧 0 用户默认设置”

42
00:01:37,856 --> 00:01:39,396
因为零是一个

43
00:01:39,396 --> 00:01:40,656
不错的默认值

44
00:01:41,486 --> 00:01:43,206
你有自己的标准用户默认设置

45
00:01:43,206 --> 00:01:44,816
用于获取和设置

46
00:01:44,816 --> 00:01:46,776
你自己的用户偏好

47
00:01:46,776 --> 00:01:49,086
但它不仅仅是一大堆

48
00:01:49,086 --> 00:01:51,056
偏好设置的汇集

49
00:01:51,056 --> 00:01:52,726
它实际上是一组域

50
00:01:52,726 --> 00:01:54,406
其中每个域都有

51
00:01:54,406 --> 00:01:56,446
自己的单位组

52
00:01:56,446 --> 00:01:56,956
这就是它们的子集

53
00:01:57,666 --> 00:01:58,946
当你要求标准用户默认设置

54
00:01:58,946 --> 00:02:01,096
返回一个值时

55
00:01:58,946 --> 00:02:01,096
返回一个值时

56
00:02:01,096 --> 00:02:03,226
它会按顺序逐个检查这些域

57
00:02:03,226 --> 00:02:05,596
并返回到它发现的

58
00:02:05,596 --> 00:02:06,086
第一个值

59
00:02:07,366 --> 00:02:09,586
你可以用这些域自身的技巧

60
00:02:09,586 --> 00:02:12,256
在它们之中设置值

61
00:02:12,256 --> 00:02:14,076
我们现在要以相反的顺序

62
00:02:14,076 --> 00:02:15,596
来审视它们

63
00:02:16,016 --> 00:02:17,416
所以 从最基础的开始

64
00:02:17,416 --> 00:02:19,416
首先是注册域

65
00:02:19,416 --> 00:02:21,546
它是列表的最后一个

66
00:02:21,546 --> 00:02:23,446
你使用注册方法

67
00:02:23,446 --> 00:02:25,046
传入用户默认设置

68
00:02:25,046 --> 00:02:26,086
键  以及值的字典

69
00:02:26,656 --> 00:02:30,036
而这些只是临时的

70
00:02:30,036 --> 00:02:31,306
所以它只在这个特定过程的

71
00:02:31,306 --> 00:02:32,776
生命周期里可用

72
00:02:33,036 --> 00:02:34,516
等到下次启动 App 时

73
00:02:34,516 --> 00:02:35,696
你必须再次调用

74
00:02:35,696 --> 00:02:36,036
注册

75
00:02:36,366 --> 00:02:38,076
所以 它为你的默认设置

76
00:02:38,076 --> 00:02:39,876
提供初始值

77
00:02:39,876 --> 00:02:40,806
而不是永久值

78
00:02:40,806 --> 00:02:44,476
下面一个是全局域

79
00:02:45,016 --> 00:02:46,076
它由所有的应用程序共享

80
00:02:46,076 --> 00:02:47,606
System framework

81
00:02:47,606 --> 00:02:49,606
通常用它来存储

82
00:02:49,606 --> 00:02:51,186
系统范围内的偏好

83
00:02:51,636 --> 00:02:52,816
你可以使用默认命令行工具

84
00:02:52,816 --> 00:02:55,196
来设置这个域

85
00:02:55,306 --> 00:02:57,076
但这一设置是持久的

86
00:02:57,076 --> 00:02:58,026
所以你做过的任何改动都会保留下来

87
00:02:58,026 --> 00:03:01,266
因此对这一点要有所意识

88
00:02:58,026 --> 00:03:01,266
因此对这一点要有所意识

89
00:03:01,436 --> 00:03:02,936
下一个是应用程序域

90
00:03:02,936 --> 00:03:04,906
当你在标准用户默认设置中

91
00:03:04,906 --> 00:03:06,786
使用 Set 方法来

92
00:03:06,786 --> 00:03:08,396
设定某个值的时候

93
00:03:08,476 --> 00:03:08,806
它就出现在这里

94
00:03:09,356 --> 00:03:12,096
而且这个域也是持久的

95
00:03:12,096 --> 00:03:14,306
下一次当你的用户启动 App 时

96
00:03:14,306 --> 00:03:16,236
你原先设置的值仍将存在

97
00:03:16,236 --> 00:03:17,836
所以当你的用户

98
00:03:17,836 --> 00:03:19,686
在初始值中修改偏好时

99
00:03:19,686 --> 00:03:21,436
你就会想到

100
00:03:21,436 --> 00:03:22,096
要使用它

101
00:03:23,756 --> 00:03:27,166
无论位于首位或末尾  实参域

102
00:03:27,166 --> 00:03:29,606
都同样的重要

103
00:03:29,606 --> 00:03:31,486
这个域真的很酷

104
00:03:31,486 --> 00:03:33,196
你可以把自己的

105
00:03:33,196 --> 00:03:34,966
用户默认键和值

106
00:03:34,966 --> 00:03:36,826
一并作为实际参数传入应用

107
00:03:36,826 --> 00:03:38,706
并使用连字符预先

108
00:03:38,706 --> 00:03:39,856
添加用户默认键

109
00:03:40,466 --> 00:03:42,736
因为它处于列表的第一位

110
00:03:42,736 --> 00:03:44,716
所以它覆盖所有

111
00:03:44,716 --> 00:03:45,676
其他域的值

112
00:03:46,246 --> 00:03:49,206
它也是临时的 所以只有当

113
00:03:49,206 --> 00:03:51,296
你启动 App 以及那些特定实参的时候

114
00:03:51,296 --> 00:03:52,756
才能够对它进行设置

115
00:03:52,756 --> 00:03:53,826
如果你运行 App

116
00:03:53,826 --> 00:03:55,266
但却没有那些实参

117
00:03:55,266 --> 00:03:56,256
那么就不会出现任何值

118
00:03:57,216 --> 00:03:59,046
所以如果你想要

119
00:03:59,046 --> 00:03:59,956
重现与用户偏好有关的问题

120
00:03:59,956 --> 00:04:01,806
这是十分便利的方法

121
00:03:59,956 --> 00:04:01,806
这是十分便利的方法

122
00:04:02,106 --> 00:04:03,216
另外你也并不想真的

123
00:04:03,216 --> 00:04:05,836
在自己的机器上对它们进行设置

124
00:04:05,836 --> 00:04:07,316
或者仅只是为了启用调试旗标而设置

125
00:04:07,816 --> 00:04:10,106
说到调试旗标

126
00:04:10,516 --> 00:04:12,576
AppKit 里就有好几个

127
00:04:13,386 --> 00:04:14,786
以下这些是大家可以使用的

128
00:04:14,786 --> 00:04:16,646
NSiewLayoutFeedbackLoopDebuggingEnabled

129
00:04:18,625 --> 00:04:20,125
如果你的 App 在布局时一直出现卡顿

130
00:04:20,125 --> 00:04:21,706
可以把这个标记

131
00:04:21,706 --> 00:04:22,186
设置为 YES 

132
00:04:22,456 --> 00:04:24,036
FeedbackLoopDebugger 会

133
00:04:24,036 --> 00:04:25,386
帮助你追踪

134
00:04:25,386 --> 00:04:25,786
那个问题

135
00:04:26,566 --> 00:04:28,696
还有一个是

136
00:04:28,696 --> 00:04:31,416
NSApplicationCrashOnExceptions

137
00:04:31,416 --> 00:04:32,996
它在 NSApplication 中使用时 如果它捕获了异常

138
00:04:32,996 --> 00:04:34,416
将会导致你的 App 崩溃

139
00:04:34,726 --> 00:04:36,206
所以 在开发过程中找到这些工具

140
00:04:36,206 --> 00:04:37,946
是件不错的事情  这样你就可以发现

141
00:04:37,946 --> 00:04:38,486
那些问题

142
00:04:38,986 --> 00:04:41,386
当然你也可能想要使用

143
00:04:41,386 --> 00:04:43,586
实参域来设置这些

144
00:04:43,586 --> 00:04:45,286
这样你就不会随之改变

145
00:04:45,526 --> 00:04:46,756
这也是个好办法

146
00:04:47,046 --> 00:04:49,806
关于标准用户默认设置

147
00:04:49,806 --> 00:04:51,456
有一个巧妙之处在于

148
00:04:51,456 --> 00:04:53,536
它支持键值观察

149
00:04:53,676 --> 00:04:54,596
也就是 KVO

150
00:04:55,446 --> 00:04:56,766
你只需添加观测器

151
00:04:56,766 --> 00:04:58,246
将用户默认键

152
00:04:58,246 --> 00:05:01,256
作为你的键路径 并且在

153
00:04:58,246 --> 00:05:01,256
作为你的键路径 并且在

154
00:05:01,256 --> 00:05:02,826
这个值发生每一次改动时

155
00:05:02,826 --> 00:05:04,586
即使发生于其它的进程

156
00:05:04,586 --> 00:05:05,126
你都会收到相应的通知

157
00:05:05,666 --> 00:05:07,456
这里有一个例子可以

158
00:05:07,456 --> 00:05:08,296
说明基本情况

159
00:05:08,816 --> 00:05:10,246
我们添加一个观测器  使用的是

160
00:05:10,246 --> 00:05:12,236
addObserver forKeyPath options context 方法

161
00:05:12,236 --> 00:05:14,466
并用字符串的形式

162
00:05:14,466 --> 00:05:15,986
传入了我们的用户默认键

163
00:05:17,336 --> 00:05:19,296
当然 如果我们对

164
00:05:19,296 --> 00:05:20,966
观察这些变化不再感兴趣

165
00:05:20,966 --> 00:05:22,726
可以将设置的这个观测器

166
00:05:22,726 --> 00:05:23,306
移除

167
00:05:24,636 --> 00:05:27,046
在此期间 每当默认值有所更改

168
00:05:27,046 --> 00:05:29,146
你就会收到一个

169
00:05:29,146 --> 00:05:31,146
通过键路径调出的 

170
00:05:31,146 --> 00:05:31,666
observeValue

171
00:05:32,166 --> 00:05:33,916
以上就是关于键值观察的内容

172
00:05:33,916 --> 00:05:36,396
这个过程就像是图表里展示的

173
00:05:36,396 --> 00:05:36,786
那样

174
00:05:37,366 --> 00:05:39,296
因此  如果你的应用设置了一个

175
00:05:39,296 --> 00:05:40,846
用户默认值  而且你有一个

176
00:05:40,846 --> 00:05:42,516
已注册的观测器 那么

177
00:05:42,516 --> 00:05:44,536
它会收到该改动的通知

178
00:05:45,286 --> 00:05:47,116
与此类似

179
00:05:47,116 --> 00:05:49,246
如果另一个过程也设置了

180
00:05:49,246 --> 00:05:50,386
你正在观测的用户默认值

181
00:05:50,386 --> 00:05:52,476
你也会同样收到

182
00:05:52,476 --> 00:05:53,116
相关通知

183
00:05:53,696 --> 00:05:55,256
所以说  这个操作非常简单直接

184
00:05:56,636 --> 00:05:58,216
另外还有一个简单技巧

185
00:05:59,156 --> 00:06:01,016
如果你想得到你在

186
00:05:59,156 --> 00:06:01,016
如果你想得到你在

187
00:06:01,016 --> 00:06:02,336
“Foundation 的新功能”会议上

188
00:06:02,336 --> 00:06:03,616
听说的新键路径语法和

189
00:06:03,616 --> 00:06:04,446
基于块的观察方法

190
00:06:04,446 --> 00:06:06,606
你可以通过用户默认设置

191
00:06:06,606 --> 00:06:07,376
来实现

192
00:06:07,856 --> 00:06:08,646
只需添加一个 Extention

193
00:06:08,646 --> 00:06:11,656
以及和你的用户默认键

194
00:06:11,656 --> 00:06:14,466
名称相同的 @objc 动态属性

195
00:06:14,466 --> 00:06:16,646
就可以了

196
00:06:16,646 --> 00:06:17,916
这一点十分重要

197
00:06:17,916 --> 00:06:19,126
如果两个名字不匹配

198
00:06:19,126 --> 00:06:19,996
那么这项操作就无法进行

199
00:06:20,386 --> 00:06:22,096
为了方便起见 你可以

200
00:06:22,096 --> 00:06:23,646
执行你的属性 Getter

201
00:06:23,646 --> 00:06:24,916
来返回这个值

202
00:06:25,026 --> 00:06:29,046
然后你可以使用

203
00:06:29,046 --> 00:06:30,986
基于块的观察方法

204
00:06:30,986 --> 00:06:32,566
再加上键路径字面量句法

205
00:06:32,566 --> 00:06:34,956
这新推出的方法

206
00:06:34,956 --> 00:06:35,516
效果如同你期待的那样

207
00:06:36,496 --> 00:06:38,406
以上就是用户默认设置的内容

208
00:06:39,536 --> 00:06:43,566
接下来是“技巧 64 ”

209
00:06:43,566 --> 00:06:44,086
这是什么

210
00:06:45,406 --> 00:06:48,036
噢 Base 64  是的

211
00:06:48,616 --> 00:06:49,816
给不熟悉 Base64 的人解释一下

212
00:06:49,816 --> 00:06:52,096
Base64 是一种编码

213
00:06:52,096 --> 00:06:54,056
可以让你通过使用一组简单的 ASCII

214
00:06:54,366 --> 00:06:56,126
来表示任何数据

215
00:06:56,616 --> 00:06:58,466
所以 如果你想要测试

216
00:06:58,466 --> 00:07:00,596
或者轻松复制粘贴

217
00:06:58,466 --> 00:07:00,596
或者轻松复制粘贴

218
00:07:00,596 --> 00:07:02,526
并分享包含二进制数据的代码片段

219
00:07:02,706 --> 00:07:04,296
Base64 会很有用

220
00:07:04,296 --> 00:07:05,436
你不需要为

221
00:07:05,436 --> 00:07:07,006
数据打包和查看寻找

222
00:07:07,006 --> 00:07:08,186
以及所有的一切

223
00:07:09,366 --> 00:07:09,836
而担心

224
00:07:09,836 --> 00:07:12,796
NSData 支持 Base64

225
00:07:12,796 --> 00:07:15,276
你可以在数据上使用

226
00:07:15,276 --> 00:07:17,636
Base64 编码初始化器

227
00:07:17,636 --> 00:07:20,636
从Base64 字符串中创建一个数据

228
00:07:20,636 --> 00:07:21,616
这样你将恢复你的数据

229
00:07:21,616 --> 00:07:24,086
然后你可以用它来

230
00:07:24,316 --> 00:07:25,296
比如说 播放一个声音

231
00:07:28,256 --> 00:07:32,526
现在 如果你要创建

232
00:07:32,526 --> 00:07:34,656
这些 Base64 字符串

233
00:07:34,656 --> 00:07:36,236
你可以在数据上使用 

234
00:07:36,236 --> 00:07:37,746
Base64 编码字符串方法 以此获取

235
00:07:37,746 --> 00:07:38,216
这些字符串

236
00:07:38,466 --> 00:07:40,066
你还可以在终端使用

237
00:07:40,066 --> 00:07:41,446
Base64 命令行实用程序

238
00:07:41,446 --> 00:07:43,356
以获取你的 Base64 字符串

239
00:07:43,356 --> 00:07:45,456
以上就是 Base64 的内容

240
00:07:45,786 --> 00:07:46,676
现在 我把舞台交给 Rachel

241
00:07:51,106 --> 00:07:52,356
聊一聊资源目录

242
00:07:52,356 --> 00:07:53,586
的话题

243
00:07:53,996 --> 00:07:55,216
你们当中很多人已经在使用

244
00:07:55,216 --> 00:07:56,916
资源目录了  大家都知道

245
00:07:56,916 --> 00:07:58,346
它们能整理你的图片

246
00:07:58,426 --> 00:08:00,196
加快启动时间

247
00:07:58,426 --> 00:08:00,196
加快启动时间

248
00:08:00,196 --> 00:08:00,846
减少存储空间

249
00:08:01,726 --> 00:08:03,046
而我-要讨论的是在去年

250
00:08:03,046 --> 00:08:04,396
macOS Sierra 以及 iOS 10 上

251
00:08:04,396 --> 00:08:06,356
新增加的一些内容

252
00:08:06,356 --> 00:08:07,376
以免没有听过的人

253
00:08:07,376 --> 00:08:07,586
对此毫无了解

254
00:08:08,326 --> 00:08:09,836
首先 这是一个布局方向

255
00:08:10,526 --> 00:08:12,676
这个动作图片是对称的

256
00:08:12,676 --> 00:08:14,446
因此不受影响

257
00:08:14,446 --> 00:08:15,706
它从左到右和从右到左

258
00:08:15,706 --> 00:08:16,936
都是一样的

259
00:08:16,936 --> 00:08:17,476
所以它的方向是固定的

260
00:08:18,236 --> 00:08:20,186
但这里有一个前进图片

261
00:08:20,186 --> 00:08:21,526
在从右到左书写的语言中

262
00:08:21,966 --> 00:08:23,266
前进表示向左

263
00:08:23,586 --> 00:08:24,766
反之 在从左到右书写的语言中

264
00:08:24,766 --> 00:08:25,556
前进表示向右

265
00:08:25,976 --> 00:08:27,376
所以 我们想让这个图片在另一个语言中

266
00:08:27,376 --> 00:08:28,106
实现镜像翻转

267
00:08:28,436 --> 00:08:29,626
然后发现情况有点复杂

268
00:08:29,626 --> 00:08:31,626
当你有一张图片

269
00:08:31,626 --> 00:08:33,226
需要根据布局方向

270
00:08:33,226 --> 00:08:34,236
而做出相应改变

271
00:08:34,236 --> 00:08:35,856
但又不是镜像改变时

272
00:08:35,856 --> 00:08:37,626
例如在这个自动填充图片中

273
00:08:37,626 --> 00:08:39,635
这些点点表示书写内容

274
00:08:39,635 --> 00:08:40,785
它们依照从左到右的顺序

275
00:08:40,785 --> 00:08:42,196
位于铅笔左侧

276
00:08:42,196 --> 00:08:43,645
位于铅笔右边的

277
00:08:43,645 --> 00:08:45,186
则是从右到左的顺序

278
00:08:45,186 --> 00:08:46,636
但铅笔仍向右倾斜

279
00:08:47,076 --> 00:08:48,266
所以 它们并非镜像

280
00:08:48,266 --> 00:08:49,646
设计师认为

281
00:08:49,646 --> 00:08:50,636
有必要再提供

282
00:08:50,636 --> 00:08:52,296
两张不同的图片 但是

283
00:08:52,436 --> 00:08:53,786
资源目录就会替你

284
00:08:53,786 --> 00:08:53,966
处理好这个问题

285
00:08:54,886 --> 00:08:56,216
接下来我们要讨论

286
00:08:56,216 --> 00:08:58,096
显示器色域

287
00:08:58,096 --> 00:08:59,676
它指的是不同显示器上可用的

288
00:08:59,676 --> 00:09:00,736
不同类型的

289
00:08:59,676 --> 00:09:00,736
不同类型的

290
00:09:00,736 --> 00:09:02,556
颜色显示

291
00:09:02,586 --> 00:09:04,576
旧的显示器使用 sRGB

292
00:09:04,916 --> 00:09:06,146
而新显示器的颜色更加明亮 丰富

293
00:09:06,146 --> 00:09:08,336
它们使用的是 Display P3

294
00:09:08,386 --> 00:09:09,656
我放大了这些图片之间

295
00:09:09,656 --> 00:09:11,116
存在的差别

296
00:09:11,486 --> 00:09:13,016
不过这只是为了向大家展示

297
00:09:13,016 --> 00:09:14,836
资源目录可以让你

298
00:09:15,246 --> 00:09:17,106
为这两个不同的显示器色域

299
00:09:17,106 --> 00:09:18,246
判定具体的图片

300
00:09:18,906 --> 00:09:23,336
在 iOS 11 和 macOS Sierra 中

301
00:09:23,336 --> 00:09:25,476
我们给资源目录增加了颜色

302
00:09:25,576 --> 00:09:27,516
所以你可以使用一个有名字的颜色

303
00:09:27,516 --> 00:09:30,036
就像我这个简单的强调色

304
00:09:30,036 --> 00:09:32,346
如果你需要的话 还可以

305
00:09:32,556 --> 00:09:34,856
指定该颜色的 sRGB 和 Display P3

306
00:09:34,856 --> 00:09:36,156
版本

307
00:09:36,786 --> 00:09:39,126
为了在代码里能够使用它

308
00:09:39,126 --> 00:09:39,766
我们要使用这个新的 API

309
00:09:40,656 --> 00:09:42,246
你可以将自己的名字添加到

310
00:09:42,246 --> 00:09:44,716
可扩展的 NSColor.Name 枚举里

311
00:09:44,716 --> 00:09:46,756
然后使用已命名颜色的

312
00:09:47,396 --> 00:09:49,286
初始化器  用自己的名字来

313
00:09:49,286 --> 00:09:50,836
来创建自己的颜色

314
00:09:51,786 --> 00:09:52,546
就是如此简单

315
00:09:52,746 --> 00:09:56,616
接下来是“技巧 1 单元测试”

316
00:09:56,756 --> 00:09:57,556
有时编写单元测试时

317
00:09:57,646 --> 00:09:59,346
会存在一种心理障碍

318
00:09:59,346 --> 00:10:00,666
它看起来似乎很难

319
00:09:59,346 --> 00:10:00,666
它看起来似乎很难

320
00:10:00,666 --> 00:10:02,306
但今天我要向大家展示

321
00:10:02,306 --> 00:10:03,836
它有多么简单

322
00:10:04,336 --> 00:10:07,426
在 Xcode 中新建一个文件

323
00:10:07,426 --> 00:10:10,286
让它成为一个单元测试样本分类

324
00:10:10,286 --> 00:10:11,826
Xcode 会给你一个模板

325
00:10:11,826 --> 00:10:13,196
你可以在里面填充一些

326
00:10:13,196 --> 00:10:14,296
像这样简单的内容

327
00:10:14,366 --> 00:10:16,496
我在这里创建了我的 addCatImage

328
00:10:16,806 --> 00:10:17,896
并且要通过检查来确定

329
00:10:17,896 --> 00:10:18,536
它不是空的

330
00:10:18,736 --> 00:10:20,766
这只是一个完整性检查

331
00:10:20,876 --> 00:10:22,376
检查我的资源目录是否已打开并在运行

332
00:10:22,826 --> 00:10:23,976
一旦你获得了一个编写好的

333
00:10:23,976 --> 00:10:25,996
单元测试  那么编写额外的测试

334
00:10:26,456 --> 00:10:28,146
并且避免自己的用户

335
00:10:28,146 --> 00:10:29,546
碰到错误

336
00:10:29,546 --> 00:10:30,166
就变得更加容易了

337
00:10:31,416 --> 00:10:32,096
好 让 Vince 再来讲讲

338
00:10:32,586 --> 00:10:35,986
&gt;&gt; 好的 “技巧 27 NSBox”

339
00:10:36,696 --> 00:10:38,536
有时候 你想要的只是

340
00:10:38,536 --> 00:10:39,916
一个显示背景颜色的

341
00:10:39,916 --> 00:10:40,806
简单视图

342
00:10:41,786 --> 00:10:43,496
你可能是像这样控制它

343
00:10:43,496 --> 00:10:45,766
这样你就可以执行

344
00:10:45,916 --> 00:10:47,266
甚至可以让它分层

345
00:10:47,266 --> 00:10:50,606
这很好  或者你也可以

346
00:10:50,606 --> 00:10:52,196
让 AppKit 为你代劳

347
00:10:52,576 --> 00:10:54,896
我们拥有 NSBox 以后 你只需要

348
00:10:54,896 --> 00:10:56,696
把框类型设为自定义

349
00:10:56,936 --> 00:10:58,146
然后让它把背景设置为

350
00:10:58,146 --> 00:10:59,026
填充色彩

351
00:10:59,306 --> 00:11:00,666
这比只在一个层面

352
00:10:59,306 --> 00:11:00,666
这比只在一个层面

353
00:11:00,666 --> 00:11:01,966
设置背景颜色

354
00:11:01,966 --> 00:11:04,406
更具动态性  因为如果

355
00:11:04,406 --> 00:11:06,056
该颜色为系统颜色

356
00:11:06,056 --> 00:11:07,496
是基于外观或语境而产生

357
00:11:07,496 --> 00:11:10,076
动态改变的话

358
00:11:10,076 --> 00:11:11,006
NSBox 将会对它进行自动更新

359
00:11:11,926 --> 00:11:13,786
更胜一筹的是 你可以把它

360
00:11:13,786 --> 00:11:15,006
从 Interface Builder 里拖出来

361
00:11:15,006 --> 00:11:15,936
并从那里对它进行设置

362
00:11:16,456 --> 00:11:19,476
你可以用几种属性

363
00:11:19,476 --> 00:11:20,816
来设置某个

364
00:11:20,816 --> 00:11:21,736
自定义框

365
00:11:21,956 --> 00:11:23,076
要有边框宽度 圆角半径

366
00:11:23,076 --> 00:11:24,486
边框颜色 当然

367
00:11:24,486 --> 00:11:26,636
还有颜色填充 像这样来使用

368
00:11:27,036 --> 00:11:28,756
甚至你也可以在框里

369
00:11:28,756 --> 00:11:31,246
设置一个内容视图

370
00:11:31,246 --> 00:11:33,446
来显示框里的另一个视图

371
00:11:33,446 --> 00:11:34,116
所以这真的很简单

372
00:11:34,646 --> 00:11:38,006
当然 还不止这些

373
00:11:38,056 --> 00:11:39,796
有时 你想要的

374
00:11:39,796 --> 00:11:42,556
只是一个简单的分隔符

375
00:11:42,556 --> 00:11:43,996
这一点 NSBox 也能办到

376
00:11:44,346 --> 00:11:45,486
你所要做的  只是

377
00:11:45,486 --> 00:11:47,576
创建一个带有分隔符类型的框

378
00:11:47,576 --> 00:11:48,736
并把它放在你喜欢的位置

379
00:11:49,376 --> 00:11:51,106
当然 它可以从

380
00:11:51,106 --> 00:11:51,946
Interface Builder 那里获得

381
00:11:52,316 --> 00:11:54,316
所以这就是 NSBox

382
00:11:54,316 --> 00:11:56,176
它会让用户界面的创建

383
00:11:56,176 --> 00:11:56,896
更加容易

384
00:11:58,216 --> 00:12:00,296
接下来是“技巧 8 可恢复

385
00:11:58,216 --> 00:12:00,296
接下来是“技巧 8 可恢复

386
00:12:00,616 --> 00:12:01,956
状态”

387
00:12:04,286 --> 00:12:06,766
macOS 有一个功能可以

388
00:12:06,766 --> 00:12:08,166
让你重启机器

389
00:12:08,166 --> 00:12:09,606
让你所有正在运行的应用

390
00:12:09,606 --> 00:12:11,666
都恢复状态

391
00:12:11,666 --> 00:12:13,176
通过使用 NSResponder 上

392
00:12:13,276 --> 00:12:15,156
这个价值极高的三种方法组合

393
00:12:15,156 --> 00:12:16,856
可以让用户回到

394
00:12:16,856 --> 00:12:17,606
离开时的状态

395
00:12:17,866 --> 00:12:19,686
大部分 AppKit 控件

396
00:12:19,686 --> 00:12:21,076
都会替你执行这些方法

397
00:12:21,076 --> 00:12:22,276
但如果你有自己的控件

398
00:12:22,276 --> 00:12:23,966
或是可恢复状态

399
00:12:23,966 --> 00:12:24,806
你就可以自己来执行

400
00:12:24,806 --> 00:12:25,436
这些方法-

401
00:12:25,976 --> 00:12:27,946
事情大概就是

402
00:12:27,946 --> 00:12:28,316
这样

403
00:12:28,906 --> 00:12:30,756
所以 你要拥有自己的属性

404
00:12:30,756 --> 00:12:32,186
这就是你自己的可恢复状态

405
00:12:32,376 --> 00:12:34,226
当它们改变时

406
00:12:34,226 --> 00:12:35,276
你的可恢复状态就失效

407
00:12:35,616 --> 00:12:37,836
然后 在某一时刻

408
00:12:37,836 --> 00:12:39,016
这个系统将会调用

409
00:12:39,016 --> 00:12:40,616
代码可恢复状态 于是

410
00:12:40,616 --> 00:12:42,226
你就可以从你的属性里找到值

411
00:12:42,226 --> 00:12:43,926
并将它们放入编码器中

412
00:12:43,926 --> 00:12:45,026
然后当你的应用重启时

413
00:12:45,026 --> 00:12:46,436
我们会使用编码器

414
00:12:46,436 --> 00:12:48,016
调用可恢复状态

415
00:12:48,016 --> 00:12:49,516
你再将编码器中的值调出

416
00:12:49,516 --> 00:12:50,446
并放到属性里

417
00:12:50,746 --> 00:12:51,996
一目了然

418
00:12:51,996 --> 00:12:54,926
易如反掌 但还有一种

419
00:12:54,926 --> 00:12:55,716
更简单的办法

420
00:12:56,176 --> 00:12:58,016
NSResponder 有这样一个类属性

421
00:12:58,196 --> 00:13:00,446
restorableStateKeyPaths

422
00:12:58,196 --> 00:13:00,446
restorableStateKeyPaths

423
00:13:00,446 --> 00:13:02,606
它可以指向任意一个

424
00:13:02,606 --> 00:13:04,586
NSCoding 符合类型

425
00:13:04,586 --> 00:13:05,886
AppKit 将使用键值观察

426
00:13:05,886 --> 00:13:07,646
来观察这些属性

427
00:13:07,846 --> 00:13:08,796
的改变

428
00:13:09,346 --> 00:13:12,006
这就意味着在恢复状态时

429
00:13:12,166 --> 00:13:13,506
它将自动为你设置各种值

430
00:13:13,506 --> 00:13:15,886
所以真的很简单

431
00:13:16,396 --> 00:13:18,436
要注意 这些属性是被

432
00:13:18,436 --> 00:13:20,256
标记了 @objc 动态

433
00:13:20,336 --> 00:13:21,756
因此  键值观察才可以

434
00:13:21,756 --> 00:13:23,886
实现自动通知

435
00:13:24,506 --> 00:13:26,466
你也可以通过其他的

436
00:13:26,466 --> 00:13:27,696
状态恢复来调出

437
00:13:27,696 --> 00:13:28,406
使用它

438
00:13:28,826 --> 00:13:30,826
你可以为你的简单属性而使用它

439
00:13:30,826 --> 00:13:32,076
再把其它的调出用于

440
00:13:32,076 --> 00:13:33,546
你可能会有的  其它部分的

441
00:13:33,546 --> 00:13:34,916
可恢复状态

442
00:13:34,916 --> 00:13:35,676
它们会一起协作

443
00:13:37,256 --> 00:13:38,816
好 现在有请 Rachel

444
00:13:39,786 --> 00:13:41,196
&gt;&gt; 好的 我将要告诉大家

445
00:13:41,196 --> 00:13:43,006
关于 Core Data 的一系列技巧

446
00:13:43,006 --> 00:13:45,256
这些技巧相互依托建构

447
00:13:45,256 --> 00:13:46,616
而我将从“技巧 13 ”开始

448
00:13:46,616 --> 00:13:47,516
因为可能比较遗憾的是

449
00:13:47,516 --> 00:13:49,076
在去年 Sierra 和 iOS 10

450
00:13:49,076 --> 00:13:50,566
添加 NSPersistentContainer 之前

451
00:13:50,856 --> 00:13:51,996
你可能不得不

452
00:13:52,036 --> 00:13:54,176
自己构建 Core Data Stack

453
00:13:54,176 --> 00:13:56,886
这样一个

454
00:13:57,386 --> 00:13:58,466
数据堆栈

455
00:13:58,466 --> 00:14:00,376
Core Data Stack 包括

456
00:13:58,466 --> 00:14:00,376
Core Data Stack 包括

457
00:14:00,376 --> 00:14:02,676
一个托管对象模型

458
00:14:02,676 --> 00:14:04,186
然后你会有一个

459
00:14:04,186 --> 00:14:05,886
持久化存储协调器来协调

460
00:14:05,886 --> 00:14:08,036
一个或多个持久存储

461
00:14:08,036 --> 00:14:10,016
以及一个托管对象语境

462
00:14:10,556 --> 00:14:12,156
构建一个 Core Data Stack

463
00:14:12,156 --> 00:14:12,966
需要编写大量代码

464
00:14:13,016 --> 00:14:15,186
这是你为了运行它

465
00:14:15,186 --> 00:14:16,606
而编写的缩减版

466
00:14:16,606 --> 00:14:17,116
代码

467
00:14:18,316 --> 00:14:20,906
但是去年在 Core Data 团队的

468
00:14:20,906 --> 00:14:22,496
努力工作下

469
00:14:22,536 --> 00:14:24,126
推出了 NSPersistentContainer 分类设置

470
00:14:24,176 --> 00:14:26,666
它囊括了 Core Data Stack

471
00:14:27,246 --> 00:14:28,106
现在就变得十分简单了

472
00:14:28,446 --> 00:14:29,406
你只要这样操作即可

473
00:14:29,456 --> 00:14:31,386
关键是要使用

474
00:14:31,436 --> 00:14:32,806
你自己的模型名称来

475
00:14:32,806 --> 00:14:33,766
完成持久化容器的初始化

476
00:14:33,876 --> 00:14:38,236
接下来是“技巧 21 数组”

477
00:14:38,896 --> 00:14:41,676
我已经有了一个 Cat Wrangler 应用

478
00:14:41,676 --> 00:14:43,446
它是个猫咪管理的应用

479
00:14:43,446 --> 00:14:45,666
在我的数据模型中

480
00:14:46,226 --> 00:14:48,986
我已经有了一个

481
00:14:48,986 --> 00:14:51,186
有名字和照片属性的

482
00:14:51,186 --> 00:14:51,766
猫的实体账号

483
00:14:52,126 --> 00:14:53,976
但是我发现

484
00:14:53,976 --> 00:14:56,466
猫还有各种行为  比如

485
00:14:56,466 --> 00:14:58,696
攻击空气中的尘粒

486
00:14:58,696 --> 00:15:01,286
盯着墙壁看 玩键盘等等

487
00:14:58,696 --> 00:15:01,286
盯着墙壁看 玩键盘等等

488
00:15:02,196 --> 00:15:03,936
于是我想要加入一个行为数组

489
00:15:03,936 --> 00:15:05,176
因为我认为字符串是一个

490
00:15:05,236 --> 00:15:06,616
用来表示行为动作的好方法

491
00:15:06,616 --> 00:15:07,976
而且我只想要

492
00:15:07,976 --> 00:15:08,816
一个字符串数组

493
00:15:09,436 --> 00:15:11,146
但是这里没有数组类型

494
00:15:12,136 --> 00:15:13,496
好吧 那我选“可变化的”

495
00:15:13,496 --> 00:15:14,686
因为这可以是任何东西

496
00:15:14,686 --> 00:15:17,236
所以我创建了一个数组

497
00:15:17,236 --> 00:15:17,716
但这并不是一个好主意

498
00:15:18,626 --> 00:15:19,906
它出现了性能问题

499
00:15:20,846 --> 00:15:22,546
它会增加序列化和

500
00:15:22,546 --> 00:15:23,826
反序列化数组

501
00:15:23,826 --> 00:15:26,336
以及其相关内容的开销负担

502
00:15:26,336 --> 00:15:27,526
而且如果你以这种方式操作

503
00:15:27,576 --> 00:15:28,596
任何请求都会变得

504
00:15:28,656 --> 00:15:28,866
更加迟缓

505
00:15:29,476 --> 00:15:31,676
所以我们建议

506
00:15:31,676 --> 00:15:34,096
重新建立一个行为实体账号

507
00:15:34,096 --> 00:15:35,606
让它与猫咪的行为建立关联

508
00:15:36,206 --> 00:15:37,226
这样就会有太多关联

509
00:15:37,226 --> 00:15:38,956
因为有太多的行为动作

510
00:15:38,956 --> 00:15:41,426
如果我想查看它们是否

511
00:15:41,426 --> 00:15:43,066
遵循一定顺序

512
00:15:43,066 --> 00:15:44,986
我会勾选“排序”

513
00:15:44,986 --> 00:15:45,286
复选框

514
00:15:46,256 --> 00:15:48,126
而且 这样做有利于

515
00:15:48,126 --> 00:15:49,956
让我为自己的行为而使用

516
00:15:49,956 --> 00:15:52,246
更丰富的数据模型

517
00:15:52,246 --> 00:15:54,256
比如 我可以添加

518
00:15:54,256 --> 00:15:54,926
一个持续时间

519
00:15:55,276 --> 00:15:56,856
因此 你的数据模型

520
00:15:56,856 --> 00:15:58,336
将更能表示

521
00:15:58,336 --> 00:15:59,166
你想实现的效果

522
00:16:00,646 --> 00:16:02,436
“技巧 34 Core Data迁移”

523
00:16:03,656 --> 00:16:04,796
迁移是使用 Coore Data 的

524
00:16:04,796 --> 00:16:06,166
真正优势之一

525
00:16:06,166 --> 00:16:09,676
我使用了 Cat Wrangler 后

526
00:16:09,676 --> 00:16:11,956
我发现猫也吃

527
00:16:12,776 --> 00:16:17,846
草 杯形蛋糕 肉

528
00:16:17,846 --> 00:16:18,956
当然 还有西兰花这一类的东西

529
00:16:20,416 --> 00:16:22,496
所以 我需要一个新的数据模型

530
00:16:22,496 --> 00:16:24,236
我复制了我的 Cat Wrangler 数据模型

531
00:16:24,236 --> 00:16:27,666
创建了 Cat Wrangler 2

532
00:16:27,666 --> 00:16:29,936
这样我就可以把食物实体账号添加进去

533
00:16:30,446 --> 00:16:32,516
我在 Xcode 里简单地把

534
00:16:32,516 --> 00:16:34,006
当前模型版本改成了

535
00:16:34,006 --> 00:16:37,116
Cat Wrangler 2

536
00:16:37,116 --> 00:16:38,076
然后  如果你使用

537
00:16:38,076 --> 00:16:39,476
NSPersistentContainer

538
00:16:39,516 --> 00:16:40,806
你的轻量版迁移就被自动处理了

539
00:16:41,466 --> 00:16:42,876
如果你构建了自己的堆栈

540
00:16:43,016 --> 00:16:44,356
你需要设置几个选项

541
00:16:44,356 --> 00:16:45,996
让迁移能够得以实现

542
00:16:45,996 --> 00:16:47,726
你要做的就只有这些

543
00:16:47,806 --> 00:16:50,126
事情

544
00:16:50,356 --> 00:16:53,026
“技巧 55 错误处理”

545
00:16:53,806 --> 00:16:55,826
在一个完美的世界里

546
00:16:55,826 --> 00:16:57,896
我们可以处理所有的错误

547
00:16:57,896 --> 00:16:59,386
但大家都知道 这个世界并不完美

548
00:16:59,386 --> 00:17:01,076
它本身甚至都不是

549
00:16:59,386 --> 00:17:01,076
它本身甚至都不是

550
00:17:01,076 --> 00:17:01,466
完全圆的

551
00:17:02,936 --> 00:17:04,866
所以 如果你只能处理

552
00:17:04,866 --> 00:17:07,356
Core Data 一个区域内的错误

553
00:17:07,356 --> 00:17:08,896
那么最重要的部分就是

554
00:17:08,896 --> 00:17:10,356
添加持久化储存器的空间

555
00:17:10,955 --> 00:17:12,205
如果它不能成功运行

556
00:17:12,386 --> 00:17:13,566
那么你应用中的所有功能

557
00:17:13,566 --> 00:17:14,396
都无法正常使用

558
00:17:15,786 --> 00:17:17,986
如果你使用持久化容器

559
00:17:18,846 --> 00:17:19,616
你可以看见还有

560
00:17:19,616 --> 00:17:21,826
loadPersistentStores 方法

561
00:17:21,925 --> 00:17:22,846
有些事情可能会发生  那就是

562
00:17:22,906 --> 00:17:24,036
你会用尽存储空间

563
00:17:24,036 --> 00:17:25,236
你会遇到权限问题

564
00:17:25,236 --> 00:17:26,846
或数据保护问题

565
00:17:26,846 --> 00:17:28,866
要不就是无法打开

566
00:17:28,866 --> 00:17:32,116
一个旧文件

567
00:17:32,116 --> 00:17:32,966
你没有一个合适的

568
00:17:32,966 --> 00:17:34,586
迁移策略来应对它

569
00:17:35,286 --> 00:17:36,736
如果你想了解如何

570
00:17:36,816 --> 00:17:38,306
向用户呈现这些错误

571
00:17:39,156 --> 00:17:40,436
Vince 会与你分享一些信息

572
00:17:40,436 --> 00:17:43,046
&gt;&gt;  好的 “技巧404

573
00:17:43,236 --> 00:17:43,856
NSError”

574
00:17:44,686 --> 00:17:46,596
在小概率情况下

575
00:17:46,596 --> 00:17:47,856
你的应用会出现问题

576
00:17:47,856 --> 00:17:49,426
你可能想给用户

577
00:17:49,426 --> 00:17:51,376
发出“严重错误”的信息

578
00:17:51,446 --> 00:17:53,586
而诸如 Core Data 这样的 Cocoa API

579
00:17:54,056 --> 00:17:55,376
也会向你发出“错误”信息

580
00:17:55,376 --> 00:17:56,746
这些信息已经完全定位并

581
00:17:56,746 --> 00:17:58,786
可随时向用户呈现

582
00:17:58,786 --> 00:18:00,066
要做到这一点很容易

583
00:17:58,786 --> 00:18:00,066
要做到这一点很容易

584
00:18:00,176 --> 00:18:02,226
任何响应器都有一个 presentError 方法

585
00:18:02,226 --> 00:18:04,006
你传入你的错误

586
00:18:04,006 --> 00:18:05,406
它将进入响应链

587
00:18:05,406 --> 00:18:07,936
如果有错误  NSApplication

588
00:18:07,936 --> 00:18:08,776
会找到它  并弹出一个

589
00:18:08,776 --> 00:18:09,376
对话框

590
00:18:10,136 --> 00:18:11,376
如果你自己有

591
00:18:11,376 --> 00:18:12,656
适合显示错误的

592
00:18:12,656 --> 00:18:13,736
响应器子类

593
00:18:13,736 --> 00:18:15,866
你可以重写这个方法

594
00:18:15,916 --> 00:18:17,296
然后自己来呈现错误

595
00:18:17,946 --> 00:18:21,356
这是关于上述 Cocoa API 错误的一个技巧

596
00:18:21,356 --> 00:18:24,566
你可能会制造这些错误

597
00:18:24,566 --> 00:18:26,676
这时你只需要

598
00:18:26,676 --> 00:18:30,046
创建一个 NSError

599
00:18:30,046 --> 00:18:32,326
传入 NSCocoaErrorDomain

600
00:18:32,326 --> 00:18:33,976
这个代码可匹配错误

601
00:18:33,976 --> 00:18:36,316
然后是 userInfo

602
00:18:36,316 --> 00:18:37,856
它可能含有一些额外信息

603
00:18:37,856 --> 00:18:40,086
比如你正在使用的

604
00:18:40,086 --> 00:18:41,696
文件 URL

605
00:18:42,136 --> 00:18:43,796
接着 你将获得一个很好的  已经定位

606
00:18:43,796 --> 00:18:45,316
并且可以向用户呈现的错误 就像这样

607
00:18:45,316 --> 00:18:46,546
就像我们返回的

608
00:18:46,546 --> 00:18:46,946
这些错误

609
00:18:47,396 --> 00:18:49,316
我们有很多错误代码

610
00:18:49,316 --> 00:18:52,046
希望大家能从中找到

611
00:18:52,046 --> 00:18:53,356
可与出现问题相匹配的

612
00:18:53,356 --> 00:18:53,796
代码

613
00:18:54,076 --> 00:18:55,876
这是基础片段 errors.h

614
00:18:55,876 --> 00:18:57,416
生成界面

615
00:18:57,416 --> 00:18:59,286
所以大家能够随意地看

616
00:18:59,286 --> 00:19:00,976
我们不会演示

617
00:18:59,286 --> 00:19:00,976
我们不会演示

618
00:19:00,976 --> 00:19:01,606
整个过程

619
00:19:03,136 --> 00:19:05,846
如果错误相近

620
00:19:05,846 --> 00:19:07,386
但还可做到更好 你可以

621
00:19:07,386 --> 00:19:09,176
用 userInfo 来自定义

622
00:19:09,176 --> 00:19:09,606
这些错误

623
00:19:09,606 --> 00:19:11,256
有几个 userInfo 键

624
00:19:11,256 --> 00:19:12,776
可以让你更改

625
00:19:12,776 --> 00:19:13,796
错误信息

626
00:19:14,026 --> 00:19:15,536
我们现在要更改恢复建议

627
00:19:15,536 --> 00:19:17,416
因为我们知道

628
00:19:17,416 --> 00:19:18,266
这个错误出现于

629
00:19:18,266 --> 00:19:19,936
下载环节 我们可以

630
00:19:19,936 --> 00:19:21,946
把这一信息告知用户

631
00:19:21,946 --> 00:19:22,326
帮助他们恢复

632
00:19:22,846 --> 00:19:25,756
顺便说一句

633
00:19:25,756 --> 00:19:27,806
如果你使用的是 Xcode 9

634
00:19:27,806 --> 00:19:29,676
这个新的 Cocoa 错误方法可以

635
00:19:29,676 --> 00:19:31,296
让 Cocoa 域错误的创建

636
00:19:31,396 --> 00:19:32,686
更为便捷

637
00:19:34,056 --> 00:19:36,306
现在 如果你需要一个

638
00:19:36,306 --> 00:19:38,646
Cocoa 并未提供的错误

639
00:19:38,646 --> 00:19:39,636
那么你仍可轻松地自行创建

640
00:19:40,386 --> 00:19:42,266
你要做的就是

641
00:19:42,266 --> 00:19:44,846
定义域  和你的错误代码

642
00:19:45,036 --> 00:19:47,086
然后用那个域  还有其中一个代码

643
00:19:47,086 --> 00:19:49,916
以及带键的 userInfo

644
00:19:49,916 --> 00:19:52,006
来创建一个 NSError

645
00:19:52,006 --> 00:19:53,386
userInfo 所带一这个键 

646
00:19:53,876 --> 00:19:54,866
用于描述错误信息  提供错误信息

647
00:19:55,186 --> 00:19:57,176
此外你不需要在 userInfo 里

648
00:19:57,176 --> 00:19:59,186
预先给出这些键

649
00:19:59,456 --> 00:20:01,116
你可以调用这个 NSErrorClass 方法

650
00:19:59,456 --> 00:20:01,116
你可以调用这个 NSErrorClass 方法

651
00:20:01,116 --> 00:20:02,816
设置 userInfo ValueProvider

652
00:20:02,816 --> 00:20:04,336
然后就获得了

653
00:20:04,336 --> 00:20:04,976
想要的域

654
00:20:05,206 --> 00:20:07,146
然后  当包含这个域的 NSError

655
00:20:07,146 --> 00:20:09,466
查找 userInfo 键却

656
00:20:09,466 --> 00:20:10,976
无法找到时

657
00:20:10,976 --> 00:20:11,656
它就会调用这个代码块

658
00:20:12,116 --> 00:20:13,916
这样 你可以不费力地

659
00:20:13,916 --> 00:20:15,516
返回那些键的值

660
00:20:16,036 --> 00:20:17,736
这就意味着 现在要

661
00:20:17,776 --> 00:20:20,086
创建你的错误已经超级简单

662
00:20:20,206 --> 00:20:21,556
你只需用你的域和代码

663
00:20:21,556 --> 00:20:23,116
创建一个 NSError

664
00:20:23,156 --> 00:20:23,396
就搞定了

665
00:20:26,586 --> 00:20:27,706
现在 在 NSError 上

666
00:20:27,706 --> 00:20:29,756
有很多属性 去看一看

667
00:20:29,756 --> 00:20:30,716
页头  获取更多信息吧

668
00:20:30,716 --> 00:20:33,376
我确实要提一点  这些属性里有许多是

669
00:20:33,376 --> 00:20:35,166
有对应的 userInfo 键

670
00:20:35,166 --> 00:20:37,066
所以你可以在你的

671
00:20:37,066 --> 00:20:38,676
userInfo ValueProvider 里使用它们

672
00:20:38,676 --> 00:20:40,526
然后毫不费力地返回值

673
00:20:40,526 --> 00:20:41,276
所以去看看那些属性吧

674
00:20:42,616 --> 00:20:45,996
接下来要谈的是

675
00:20:46,116 --> 00:20:47,326
“技巧 6 Shared Key Sets”

676
00:20:48,076 --> 00:20:50,256
如果你在用同样的

677
00:20:50,456 --> 00:20:52,136
已知键创建大量字典

678
00:20:52,136 --> 00:20:54,636
那么你可以使用 sharedKeySet

679
00:20:54,686 --> 00:20:56,206
你的字典将变得

680
00:20:56,206 --> 00:20:57,826
更紧凑 性能更好

681
00:20:57,986 --> 00:20:59,276
这得益于散列法的

682
00:20:59,276 --> 00:20:59,786
证明

683
00:21:00,236 --> 00:21:01,896
所以 你用这个 NSDictionary 类函数

684
00:21:01,896 --> 00:21:03,816
创建一个 sharedKeySet

685
00:21:03,966 --> 00:21:06,176
它会生成一个

686
00:21:06,176 --> 00:21:07,916
完美的散列

687
00:21:07,916 --> 00:21:08,696
然后你可以用

688
00:21:08,806 --> 00:21:10,086
你的 sharedKeySet

689
00:21:10,086 --> 00:21:10,876
把你的 NSMutableDictationary 

690
00:21:11,806 --> 00:21:13,186
初始化

691
00:21:13,186 --> 00:21:13,506
可能像这样

692
00:21:14,116 --> 00:21:16,036
你创建你的 sharedKeySet

693
00:21:16,036 --> 00:21:18,266
计算一个 sharedKeySet

694
00:21:18,266 --> 00:21:20,136
不是件简单的事

695
00:21:20,136 --> 00:21:22,456
所以把它存放起来

696
00:21:22,456 --> 00:21:24,026
并且重复使用  这是个好主意

697
00:21:24,026 --> 00:21:25,296
你可以随心所欲地

698
00:21:25,826 --> 00:21:26,316
创建你的可变字典

699
00:21:26,436 --> 00:21:27,436
你创建了可变字典

700
00:21:27,436 --> 00:21:29,606
然后就 可以使用它

701
00:21:29,606 --> 00:21:30,966
就像用其他的可变字典一样

702
00:21:30,966 --> 00:21:33,196
你甚至可以插入

703
00:21:33,196 --> 00:21:34,646
不在你的 sharedKeySet 里的键

704
00:21:34,646 --> 00:21:36,506
它们只是不会具有

705
00:21:36,506 --> 00:21:37,156
同样的高性能而已

706
00:21:37,626 --> 00:21:39,756
所以 这就是 sharedKeySet

707
00:21:40,286 --> 00:21:41,396
我现在把舞台交还 Rachel

708
00:21:42,496 --> 00:21:44,566
&gt;&gt;  我们现在要讲讲十六进制里代表

709
00:21:44,676 --> 00:21:46,836
可访问性的 A   听说过

710
00:21:46,836 --> 00:21:47,966
AX 寄存器吗

711
00:21:48,116 --> 00:21:52,276
Apple 有很多方法

712
00:21:52,276 --> 00:21:53,546
让你的产品可供所有用户

713
00:21:53,546 --> 00:21:54,016
来访问

714
00:21:54,016 --> 00:21:55,186
我只介绍其中的几样

715
00:21:55,186 --> 00:21:55,896
小工具

716
00:21:56,296 --> 00:21:57,826
其实 VoiceOver 并不算小

717
00:21:57,826 --> 00:21:59,046
但我只能简单地谈一下

718
00:21:59,396 --> 00:22:00,846
它内置于所有的 Apple 产品中

719
00:21:59,396 --> 00:22:00,846
它内置于所有的 Apple 产品中

720
00:22:00,846 --> 00:22:03,396
并且可以在界面构建器里

721
00:22:03,396 --> 00:22:04,766
轻松设置

722
00:22:04,906 --> 00:22:07,946
我有一个“添加猫”的按钮

723
00:22:07,946 --> 00:22:09,526
我只要在可访问性描述中

724
00:22:09,526 --> 00:22:11,296
填入“添加猫”   然后 VoiceOver

725
00:22:11,296 --> 00:22:13,446
就知道该说什么了

726
00:22:13,636 --> 00:22:15,556
还有  要记得在低分辨率条件下

727
00:22:15,626 --> 00:22:17,706
测试你的 App

728
00:22:17,706 --> 00:22:19,116
视力差的用户想把

729
00:22:19,116 --> 00:22:19,796
屏幕内容放大显示

730
00:22:20,006 --> 00:22:22,156
例如 这是我的

731
00:22:22,156 --> 00:22:23,786
Cat Wrangler 启动画面

732
00:22:23,786 --> 00:22:24,416
我对它很满意

733
00:22:24,416 --> 00:22:26,456
我用较低的分辨率打开它时

734
00:22:26,456 --> 00:22:28,236
它在屏幕上就模糊不清了

735
00:22:28,236 --> 00:22:29,136
别让这种情况发生在你的身上

736
00:22:29,136 --> 00:22:32,056
最后 我想指出

737
00:22:32,056 --> 00:22:33,636
在 Xcode 菜单中 还可以发现一个

738
00:22:33,636 --> 00:22:35,526
可访问性检测器

739
00:22:35,526 --> 00:22:36,536
的存在

740
00:22:36,966 --> 00:22:38,586
启动它 在你的各个 App 上运行它

741
00:22:38,646 --> 00:22:40,176
看看你的 App 在可访问性方面

742
00:22:40,656 --> 00:22:41,996
还有哪些地方

743
00:22:41,996 --> 00:22:42,596
可以改进

744
00:22:43,506 --> 00:22:44,176
现在把舞台还给 Vince

745
00:22:45,166 --> 00:22:47,646
&gt;&gt; 好的 现在进入

746
00:22:48,116 --> 00:22:48,966
无限性与文件这个话题 

747
00:22:50,366 --> 00:22:52,086
现在的用户非常苛刻

748
00:22:52,086 --> 00:22:54,066
他们对基于文档的 App

749
00:22:54,066 --> 00:22:55,326
有很多期望

750
00:22:55,586 --> 00:22:56,766
他们不想为保存内容

751
00:22:56,766 --> 00:22:57,296
而担心

752
00:22:57,756 --> 00:22:59,656
他们希望能够轻松地

753
00:22:59,656 --> 00:23:01,736
命名并组织自己的文件

754
00:22:59,656 --> 00:23:01,736
命名并组织自己的文件

755
00:23:01,736 --> 00:23:03,536
他们还想要强大的

756
00:23:03,536 --> 00:23:03,946
版本控制

757
00:23:04,516 --> 00:23:06,326
他们甚至想要更多功能

758
00:23:06,326 --> 00:23:07,906
例如 macOS High Sierra 上新增的

759
00:23:07,906 --> 00:23:09,736
iCloud 文档共享

760
00:23:09,736 --> 00:23:10,816
大家可能在本周之前 甚至连听都

761
00:23:10,816 --> 00:23:12,226
没有听说过

762
00:23:12,496 --> 00:23:13,646
开发者要做什么

763
00:23:14,766 --> 00:23:17,796
嗯 你可以使用 NSDocument

764
00:23:17,796 --> 00:23:19,416
它有一个类属性

765
00:23:19,416 --> 00:23:20,606
名为 autosavesInPlace

766
00:23:20,936 --> 00:23:22,626
在默认情况下 它会返回 False 值

767
00:23:22,846 --> 00:23:24,406
但你可以覆写它

768
00:23:24,406 --> 00:23:26,076
让它返回 True 值 

769
00:23:26,076 --> 00:23:28,326
你将免费获得所有这些功能

770
00:23:28,326 --> 00:23:28,986
所以它很棒

771
00:23:29,326 --> 00:23:30,916
如果你有一个基于文件的应用

772
00:23:30,916 --> 00:23:32,066
那就查看一下 NSDocument 吧

773
00:23:32,826 --> 00:23:37,406
接下来是“技巧 42 异常报告的

774
00:23:38,206 --> 00:23:39,626
答复”

775
00:23:40,816 --> 00:23:41,946
在大多数情况下

776
00:23:41,946 --> 00:23:43,386
当 NSApplication 在捕获异常时

777
00:23:43,386 --> 00:23:45,296
只会把异常记入日志

778
00:23:45,296 --> 00:23:46,276
让你的 App 继续

779
00:23:46,276 --> 00:23:47,046
勉强运行

780
00:23:47,456 --> 00:23:48,776
但如果你想要

781
00:23:48,776 --> 00:23:50,416
添加信息或

782
00:23:50,416 --> 00:23:52,066
用特别的方式处理异常情况

783
00:23:52,066 --> 00:23:53,656
你可以覆写这个 NSApplication 方法

784
00:23:53,656 --> 00:23:55,166
从而执行你自己的操作

785
00:23:55,716 --> 00:23:57,516
现在 请 Rachel 回来介绍

786
00:23:58,286 --> 00:24:00,656
好的 人非圣贤  孰能无过

787
00:23:58,286 --> 00:24:00,656
好的 人非圣贤  孰能无过

788
00:24:00,776 --> 00:24:01,816
在计算机操作过程中

789
00:24:01,816 --> 00:24:02,906
在人类已经犯错的时候  尤其如此

790
00:24:02,906 --> 00:24:04,416
所以 我们来简单聊一聊

791
00:24:04,416 --> 00:24:05,456
调试的问题

792
00:24:05,796 --> 00:24:06,896
大家知道   调试工具

793
00:24:06,896 --> 00:24:08,196
有很多很多种

794
00:24:08,196 --> 00:24:09,636
而我只向大家展示一些

795
00:24:09,636 --> 00:24:10,986
多少隐藏在 Xcode 里的调试工具

796
00:24:10,986 --> 00:24:12,626
就在调试控制台的上方

797
00:24:12,886 --> 00:24:14,226
有一排按钮

798
00:24:14,936 --> 00:24:16,626
其中有视图层级调试按钮

799
00:24:16,626 --> 00:24:19,716
内存图调试按钮和

800
00:24:19,716 --> 00:24:20,926
虚拟定位按钮

801
00:24:21,326 --> 00:24:22,246
我准备只展示

802
00:24:22,246 --> 00:24:23,326
一些关于视图调试器

803
00:24:23,326 --> 00:24:23,906
的信息

804
00:24:25,256 --> 00:24:27,096
这是一个简单的

805
00:24:27,096 --> 00:24:28,976
浏览器示例应用程序

806
00:24:28,976 --> 00:24:31,096
我可以展开这些视图

807
00:24:31,096 --> 00:24:32,686
查看究竟发生了什么

808
00:24:32,686 --> 00:24:33,796
有没有视图被别的视图遮挡

809
00:24:33,796 --> 00:24:35,626
哪个视图正在做什么事

810
00:24:35,626 --> 00:24:38,416
我可以看到被裁剪视图

811
00:24:38,416 --> 00:24:39,636
延伸的位置

812
00:24:39,976 --> 00:24:41,146
自动布局还有很多用处

813
00:24:41,146 --> 00:24:42,666
大家可以在

814
00:24:42,666 --> 00:24:44,296
这个视图调试器里使用它

815
00:24:44,296 --> 00:24:46,116
所以大家不妨去看一看

816
00:24:46,116 --> 00:24:47,476
它会让对调试视图问题的能力要求

817
00:24:47,566 --> 00:24:47,996
变得简单

818
00:24:49,176 --> 00:24:51,066
有时候 错误出现在我们的代码里

819
00:24:51,066 --> 00:24:53,006
在这种情况下 我要谈到

820
00:24:53,006 --> 00:24:57,616
“技巧 30512012 编写错误报告”

821
00:24:58,476 --> 00:25:00,146
为了使我们修复错误的工作

822
00:24:58,476 --> 00:25:00,146
为了使我们修复错误的工作

823
00:25:00,146 --> 00:25:02,356
更加容易  需要采取一些

824
00:25:02,356 --> 00:25:03,736
再现错误的步骤  这是最为重要的

825
00:25:03,736 --> 00:25:04,546
一件事

826
00:25:05,716 --> 00:25:07,136
我们非常欢迎大家把示例应用放在

827
00:25:07,136 --> 00:25:08,406
错误报告中

828
00:25:08,786 --> 00:25:10,666
尤其是 当这些错误

829
00:25:10,666 --> 00:25:12,486
在你关心的平台上

830
00:25:12,486 --> 00:25:13,296
形成并显示出

831
00:25:14,286 --> 00:25:15,756
问题的时候

832
00:25:15,756 --> 00:25:16,956
要把再现问题所需的一切资源

833
00:25:16,956 --> 00:25:17,576
都考虑在内

834
00:25:19,026 --> 00:25:20,596
然后是日志

835
00:25:20,646 --> 00:25:21,356
例如 sysdiagnose

836
00:25:21,946 --> 00:25:23,126
在 developer.apple.com 这个网址上

837
00:25:23,276 --> 00:25:25,446
有一个页面  它展示了

838
00:25:25,446 --> 00:25:27,696
如何收集我们所有平台的日志

839
00:25:27,696 --> 00:25:29,566
并通过浏览日志

840
00:25:29,566 --> 00:25:31,236
来看看有什么可能会对

841
00:25:31,236 --> 00:25:32,426
正在查看问题的用户

842
00:25:32,476 --> 00:25:34,156
有所帮助

843
00:25:34,156 --> 00:25:35,606
这将有助于整个进程的加快发展

844
00:25:36,756 --> 00:25:37,626
下面有请 Vince

845
00:25:38,496 --> 00:25:41,756
好的 “技巧 44.1”

846
00:25:41,756 --> 00:25:44,176
有一个非常简单的方法可以

847
00:25:44,176 --> 00:25:45,126
为你的应用添加

848
00:25:45,126 --> 00:25:45,806
一些花哨的效果

849
00:25:46,936 --> 00:25:49,056
NSButton 有一个属性

850
00:25:49,056 --> 00:25:51,016
叫作 sound  它用 NSSound 形式呈现

851
00:25:51,076 --> 00:25:52,756
而且十分容易

852
00:25:52,846 --> 00:25:53,096
设置

853
00:25:53,496 --> 00:25:55,026
如果你设置了音效

854
00:25:55,026 --> 00:25:56,746
那么当用户点击按钮时

855
00:25:56,746 --> 00:25:59,006
它将播放该音效

856
00:25:59,006 --> 00:26:00,266
你甚至可以在界面构建器里设置它

857
00:25:59,006 --> 00:26:00,266
你甚至可以在界面构建器里设置它

858
00:26:00,706 --> 00:26:02,366
所以 通过它来

859
00:26:02,366 --> 00:26:04,046
给你的用户界面设置出特殊的效果吧

860
00:26:04,046 --> 00:26:04,986
你们的用户可是嚷嚷半天了

861
00:26:05,053 --> 00:26:09,786
现在来说“技巧 29”

862
00:26:09,786 --> 00:26:13,276
我将进行一项演示

863
00:26:13,276 --> 00:26:14,646
但演示内容不是按按钮触发 NSSound 来演奏

864
00:26:14,646 --> 00:26:15,676
那样太傻了

865
00:26:15,916 --> 00:26:18,036
我们将展示一个 macOS App

866
00:26:18,506 --> 00:26:19,966
这是一款大胆进军

867
00:26:19,966 --> 00:26:21,486
于过于饱和的猫咪管理应用市场里

868
00:26:21,486 --> 00:26:22,876
参与竞争的应用

869
00:26:22,876 --> 00:26:24,846
它叫 Cat Herder

870
00:26:24,846 --> 00:26:27,036
它和你们之前听到的

871
00:26:27,036 --> 00:26:28,366
Cat Wrangler 应用毫无关联

872
00:26:28,366 --> 00:26:29,646
我们将从头开始

873
00:26:29,646 --> 00:26:32,616
创建这个应用

874
00:26:32,846 --> 00:26:34,486
好 我们已经有了我们的项目

875
00:26:34,956 --> 00:26:38,366
在这里 我们有

876
00:26:38,366 --> 00:26:40,416
针对我们这款 Cat Herder 应用的具体说明

877
00:26:40,416 --> 00:26:43,116
看起来

878
00:26:43,116 --> 00:26:44,916
左侧像是有一个猫列表

879
00:26:44,916 --> 00:26:47,576
以及一些添加和

880
00:26:47,576 --> 00:26:48,606
删除按钮

881
00:26:49,016 --> 00:26:51,366
对于被选中的猫

882
00:26:51,366 --> 00:26:53,136
我们可以编辑它的名字和照片

883
00:26:53,756 --> 00:26:55,156
好的 看起来很简单

884
00:26:55,156 --> 00:26:56,276
一目了然

885
00:26:57,176 --> 00:26:58,896
幸运地是 我们有一个 Designer

886
00:26:58,896 --> 00:27:02,006
它已经为我们创建了一个 NIB 文件

887
00:26:58,896 --> 00:27:02,006
它已经为我们创建了一个 NIB 文件

888
00:27:02,006 --> 00:27:04,716
我们继续 来看一看

889
00:27:04,716 --> 00:27:05,576
它看起来很不错

890
00:27:05,576 --> 00:27:05,976
我们可以运行它

891
00:27:10,046 --> 00:27:11,746
好了 但无法连接

892
00:27:11,746 --> 00:27:13,026
无法运作

893
00:27:13,026 --> 00:27:16,416
什么都做不了

894
00:27:17,096 --> 00:27:18,846
所以 这时候应该写一些代码

895
00:27:19,156 --> 00:27:20,356
把所有这一切整合到

896
00:27:20,356 --> 00:27:20,786
一起来

897
00:27:22,146 --> 00:27:24,356
但如果我告诉你

898
00:27:24,356 --> 00:27:25,806
有一种方法可以

899
00:27:25,806 --> 00:27:27,676
在不需要任何代码的情况下

900
00:27:27,676 --> 00:27:28,926
让这个用户界面运作起来  那会怎样？

901
00:27:29,576 --> 00:27:31,546
macOS 有一项技术叫绑定

902
00:27:31,546 --> 00:27:32,936
它完全能够让我们

903
00:27:32,936 --> 00:27:34,216
做到这一点

904
00:27:35,436 --> 00:27:38,966
所以我们继续

905
00:27:38,966 --> 00:27:42,416
进入 Storyboard

906
00:27:42,416 --> 00:27:45,806
这个是我们的表格视图

907
00:27:45,806 --> 00:27:47,496
它将显示一个猫列表

908
00:27:48,226 --> 00:27:49,276
可能会有一个数组

909
00:27:49,276 --> 00:27:50,236
为其提供支持

910
00:27:50,766 --> 00:27:52,896
事实证明

911
00:27:52,896 --> 00:27:55,746
我们有一个名叫数组控制器的类

912
00:27:55,746 --> 00:27:58,336
位于这边的对象浏览器当中

913
00:27:58,336 --> 00:27:59,816
我们继续 把它拖入

914
00:27:59,896 --> 00:28:00,186
我们的场景

915
00:27:59,896 --> 00:28:00,186
我们的场景

916
00:28:00,826 --> 00:28:03,196
数组控制器可以让你

917
00:28:03,196 --> 00:28:05,846
创建到对象数组的

918
00:28:05,846 --> 00:28:06,566
绑定

919
00:28:07,096 --> 00:28:08,626
所以 我们可以在右上角

920
00:28:08,626 --> 00:28:10,656
查看属性检查器

921
00:28:10,656 --> 00:28:13,796
并选择属性

922
00:28:13,796 --> 00:28:15,146
你可以让你的

923
00:28:15,146 --> 00:28:16,896
数组控制器处理

924
00:28:16,896 --> 00:28:19,846
你想要的任何分类数组

925
00:28:19,846 --> 00:28:20,746
或 Core Data 实体

926
00:28:21,306 --> 00:28:22,606
我们将使用

927
00:28:22,606 --> 00:28:24,426
NSMutableDictionary 作为默认设置

928
00:28:24,556 --> 00:28:25,836
因为这只是让我们

929
00:28:25,836 --> 00:28:26,586
开始运行

930
00:28:26,926 --> 00:28:28,346
我们想让我们的表格视图

931
00:28:28,346 --> 00:28:30,526
显示我们的猫列表

932
00:28:30,526 --> 00:28:33,516
我们可以通过向下展开表格视图

933
00:28:33,576 --> 00:28:35,136
来做到这一点

934
00:28:35,136 --> 00:28:36,166
直到进入表格纵栏

935
00:28:36,816 --> 00:28:38,356
我们可以来这边

936
00:28:38,356 --> 00:28:39,996
找到绑定检查器

937
00:28:39,996 --> 00:28:41,276
它就在右上角

938
00:28:41,276 --> 00:28:44,436
这是一个漩涡纹的盒子式的东西

939
00:28:44,436 --> 00:28:45,386
我们可以点击它

940
00:28:45,496 --> 00:28:49,196
并将表格纵栏的值

941
00:28:49,196 --> 00:28:51,556
绑定到数组控制器的

942
00:28:51,556 --> 00:28:52,756
arrangedObjects 上

943
00:28:53,136 --> 00:28:54,396
而 arrangedObjects 是

944
00:28:54,396 --> 00:28:56,356
数组控制器上的一个属性

945
00:28:56,356 --> 00:28:57,836
那是你的猫数组

946
00:28:57,836 --> 00:28:59,656
也就是视图这方面所代表的

947
00:29:00,206 --> 00:29:01,146
东西

948
00:29:01,326 --> 00:29:03,846
那么现在 我们的表格视图将

949
00:29:03,846 --> 00:29:06,606
为数组中的每只猫创建一个横格

950
00:29:06,606 --> 00:29:09,056
这意味着它将

951
00:29:09,056 --> 00:29:10,756
为数组中的每只猫

952
00:29:10,756 --> 00:29:13,046
创建一个表格的单元格视图

953
00:29:13,046 --> 00:29:14,776
并把该视图单元格的对象值

954
00:29:14,776 --> 00:29:16,476
设置为特定的猫

955
00:29:17,346 --> 00:29:18,666
那么 我们进入表格视图单元格

956
00:29:18,666 --> 00:29:20,926
我们有一个图像视图

957
00:29:20,926 --> 00:29:23,676
一个缩略图和

958
00:29:23,676 --> 00:29:24,286
名字标签

959
00:29:24,976 --> 00:29:26,586
我们可以继续操作

960
00:29:26,586 --> 00:29:28,376
再回到我们的绑定检查器

961
00:29:28,896 --> 00:29:31,196
并选择绑定到

962
00:29:31,196 --> 00:29:33,076
表格视图单元格的对象值

963
00:29:33,076 --> 00:29:34,316
而这个对象值仍将属于

964
00:29:34,316 --> 00:29:35,366
我们这些猫咪中的一员

965
00:29:35,876 --> 00:29:38,466
我们可以写入路径

966
00:29:38,466 --> 00:29:41,516
并指定猫的名字

967
00:29:41,516 --> 00:29:42,656
它将在字典里进行查找

968
00:29:42,656 --> 00:29:44,826
并显示出来

969
00:29:45,016 --> 00:29:48,036
与此类似 我们把猫的照片

970
00:29:48,336 --> 00:29:51,066
绑定到图像视图

971
00:29:51,066 --> 00:29:55,246
就像这样

972
00:29:55,356 --> 00:29:57,406
现在 这是我们的表格视图

973
00:29:57,406 --> 00:29:59,436
就是这样 它现在被绑定并

974
00:29:59,436 --> 00:30:00,386
连接到数组控制器

975
00:29:59,436 --> 00:30:00,386
连接到数组控制器

976
00:30:00,386 --> 00:30:00,976
它将显示它的内容

977
00:30:02,146 --> 00:30:03,646
接下来 在这个角上

978
00:30:03,646 --> 00:30:06,816
有这些按钮

979
00:30:06,816 --> 00:30:08,916
而数组控制器实际上具有

980
00:30:08,916 --> 00:30:11,206
添加和删除对象的

981
00:30:11,346 --> 00:30:12,266
ID 操作

982
00:30:13,426 --> 00:30:15,426
添加的方法会执行

983
00:30:15,426 --> 00:30:16,776
你所期望的操作 它将为

984
00:30:16,776 --> 00:30:18,226
正在处理的对象新建一个实例

985
00:30:18,226 --> 00:30:19,706
在我们这个例子中

986
00:30:19,706 --> 00:30:21,246
这指的是 NSMutableDictionary

987
00:30:21,246 --> 00:30:23,016
这个实例将被添加到数组当中

988
00:30:23,016 --> 00:30:23,436
这样我们可以把它连接起来

989
00:30:23,976 --> 00:30:26,656
当然 还有一个移除动作

990
00:30:26,656 --> 00:30:28,526
它将执行我们期望的操作

991
00:30:28,526 --> 00:30:30,946
它把选中的项目

992
00:30:30,946 --> 00:30:32,386
从数组当中进行

993
00:30:32,386 --> 00:30:32,716
移除

994
00:30:33,966 --> 00:30:35,856
当然 我们需要将

995
00:30:35,856 --> 00:30:37,426
一些花哨的效果添加到

996
00:30:37,426 --> 00:30:39,316
应用上 大家都知道我们在这方面

997
00:30:39,316 --> 00:30:40,026
比较擅长

998
00:30:41,576 --> 00:30:45,736
就像这样

999
00:30:45,736 --> 00:30:46,106
按钮就处理完了

1000
00:30:46,626 --> 00:30:47,846
现在只剩下

1001
00:30:47,846 --> 00:30:49,196
另一边的细节视图了

1002
00:30:50,406 --> 00:30:53,696
所以 我们可以回到我们的文本框

1003
00:30:53,696 --> 00:30:55,166
转到这里的文本框

1004
00:30:55,166 --> 00:30:56,866
这是名字

1005
00:30:56,866 --> 00:30:58,516
我们可以在上面编辑名字

1006
00:30:58,516 --> 00:30:59,686
回到绑定检查器

1007
00:30:59,686 --> 00:31:02,216
我们可以绑定

1008
00:30:59,686 --> 00:31:02,216
我们可以绑定

1009
00:31:02,216 --> 00:31:03,686
数组控制器 Selection

1010
00:31:03,946 --> 00:31:05,316
数组控制器的 Selection

1011
00:31:05,316 --> 00:31:07,106
是一种属性

1012
00:31:07,106 --> 00:31:08,326
是一个代理对象

1013
00:31:08,326 --> 00:31:09,506
它代表当前数组里

1014
00:31:09,506 --> 00:31:11,856
被选定的项目

1015
00:31:12,486 --> 00:31:13,936
所以 我们可以在 Selection 里写入键路径

1016
00:31:13,936 --> 00:31:15,896
以真正实现编辑操作

1017
00:31:15,936 --> 00:31:18,526
并显示猫的名字

1018
00:31:19,746 --> 00:31:21,466
与此类似 我们可以在照片选择上

1019
00:31:21,466 --> 00:31:23,696
采用相同操作

1020
00:31:23,786 --> 00:31:28,616
就是这样

1021
00:31:28,616 --> 00:31:29,636
我们现在是在没有代码的情况下

1022
00:31:29,996 --> 00:31:32,346
连接了应用

1023
00:31:32,876 --> 00:31:33,976
那么我们来运行一下吧

1024
00:31:39,046 --> 00:31:42,166
可以添加我们的猫

1025
00:31:42,166 --> 00:31:46,266
写上名字 附上图片

1026
00:31:47,596 --> 00:31:51,146
添加更多的猫

1027
00:31:51,886 --> 00:31:53,796
这确实是一个令人惊奇的应用

1028
00:31:53,796 --> 00:31:54,136
很便利

1029
00:31:55,366 --> 00:31:58,346
由于我们使用了绑定

1030
00:31:58,346 --> 00:32:00,146
所以你可以对这些进行更新

1031
00:31:58,346 --> 00:32:00,146
所以你可以对这些进行更新

1032
00:32:00,146 --> 00:32:01,446
它们将在表格视图中完成

1033
00:32:01,446 --> 00:32:02,246
即时更新

1034
00:32:02,906 --> 00:32:04,336
就像这样 我们可以

1035
00:32:04,336 --> 00:32:07,666
拖入一张新图片或快速查看

1036
00:32:07,666 --> 00:32:09,326
拖入一张新图片

1037
00:32:09,326 --> 00:32:10,556
它同样也会在表格视图中

1038
00:32:10,556 --> 00:32:10,886
更新

1039
00:32:11,476 --> 00:32:13,126
当然 我们需要确认

1040
00:32:13,126 --> 00:32:14,296
我们这些花哨的效果

1041
00:32:14,786 --> 00:32:16,046
能正常运作 真棒

1042
00:32:17,196 --> 00:32:17,976
这就是绑定

1043
00:32:18,516 --> 00:32:21,766
[掌声]

1044
00:32:22,266 --> 00:32:24,356
你可以使用绑定

1045
00:32:24,356 --> 00:32:25,906
将你的用户界面连接到模型上

1046
00:32:25,906 --> 00:32:27,436
而无需编写

1047
00:32:27,436 --> 00:32:29,486
任何粘合代码

1048
00:32:29,486 --> 00:32:31,686
下一步可能是使用一个

1049
00:32:31,686 --> 00:32:33,096
真正的猫的分类 而不是字典

1050
00:32:33,096 --> 00:32:35,266
甚至不是一个 Core Data 实体

1051
00:32:35,266 --> 00:32:36,856
那样 你将获得持久的东西

1052
00:32:36,996 --> 00:32:39,056
你的猫列表将

1053
00:32:39,056 --> 00:32:39,566
得以保存

1054
00:32:40,036 --> 00:32:43,026
但你永远不需要

1055
00:32:43,026 --> 00:32:44,956
与此而言

1056
00:32:44,956 --> 00:32:46,566
你倒是需要写一些代码

1057
00:32:46,566 --> 00:32:48,136
但你无须为你的用户界面

1058
00:32:48,136 --> 00:32:50,296
写粘合代码

1059
00:32:50,296 --> 00:32:50,636
这就是绑定

1060
00:32:51,206 --> 00:32:51,906
现在请 Rachel 再来讲讲

1061
00:32:52,096 --> 00:32:54,686
&gt;&gt; 好的 “技巧 29” 或许

1062
00:32:54,686 --> 00:32:56,926
看起来像是要接近尾声了

1063
00:32:57,336 --> 00:32:59,446
其实我们还有 N+1 个技巧 

1064
00:32:59,446 --> 00:32:59,896
“添加你自己的技巧”

1065
00:33:00,176 --> 00:33:01,346
一些关于如何获取信息

1066
00:33:01,346 --> 00:33:02,506
并学到更多的想法

1067
00:33:03,056 --> 00:33:04,656
我们今年有了

1068
00:33:04,656 --> 00:33:06,906
新的修订文稿

1069
00:33:06,906 --> 00:33:07,596
主题按任务分组

1070
00:33:08,376 --> 00:33:09,796
有一个层级结构 

1071
00:33:09,796 --> 00:33:11,216
允许你向下展开

1072
00:33:11,566 --> 00:33:13,186
例如在这个例子里

1073
00:33:13,186 --> 00:33:14,846
不断打开下一级 查看 NSView

1074
00:33:15,756 --> 00:33:17,336
三种不同的

1075
00:33:17,336 --> 00:33:18,386
展示风格

1076
00:33:18,386 --> 00:33:20,636
即参考文档

1077
00:33:20,636 --> 00:33:23,396
还有概念文章和

1078
00:33:23,396 --> 00:33:23,716
示例代码

1079
00:33:23,716 --> 00:33:24,806
因此 有不同的方法

1080
00:33:24,806 --> 00:33:25,806
来获取材料

1081
00:33:27,096 --> 00:33:28,626
我们还强烈建议

1082
00:33:28,626 --> 00:33:29,826
大家去查看我们所有平台上的

1083
00:33:29,826 --> 00:33:31,196
版本发布说明

1084
00:33:31,636 --> 00:33:32,966
这是工程师亲自

1085
00:33:32,966 --> 00:33:34,266
提供的信息

1086
00:33:34,266 --> 00:33:35,356
说明了每个版本的

1087
00:33:35,356 --> 00:33:35,916
新功能

1088
00:33:37,216 --> 00:33:38,736
页头文件始终是一个

1089
00:33:38,736 --> 00:33:40,186
很好的信息来源

1090
00:33:40,186 --> 00:33:42,006
它逐行向我们提供了所有 API 的

1091
00:33:42,006 --> 00:33:43,546
注释

1092
00:33:44,356 --> 00:33:46,046
在周三举行的“Cocoa 的新功能”会议中

1093
00:33:46,046 --> 00:33:48,326
我们让人们在 Twitter 上

1094
00:33:48,326 --> 00:33:50,076
发布自己的 Cocoa 开发技巧

1095
00:33:50,836 --> 00:33:52,206
我们从中收集了

1096
00:33:52,206 --> 00:33:53,186
我们最喜欢的一些技巧

1097
00:33:53,296 --> 00:33:54,766
虽然很难做出选择

1098
00:33:54,766 --> 00:33:56,586
但这里我们仍然选择了一些

1099
00:33:56,586 --> 00:33:56,806
喜欢的技巧

1100
00:33:57,176 --> 00:34:00,076
NSHashTable 就像 NSSet

1101
00:33:57,176 --> 00:34:00,076
NSHashTable 就像 NSSet

1102
00:34:00,076 --> 00:34:01,276
但它可以包含任意指针

1103
00:34:01,276 --> 00:34:02,646
如 void star

1104
00:34:03,256 --> 00:34:04,506
还有 你可以不费力地

1105
00:34:04,506 --> 00:34:05,646
从 NSHashTable 中

1106
00:34:05,686 --> 00:34:06,456
引用对象

1107
00:34:09,656 --> 00:34:11,246
有时候 Objective-C 的

1108
00:34:11,246 --> 00:34:12,576
术语有点复杂

1109
00:34:12,576 --> 00:34:14,235
你可以使用 typedef 来

1110
00:34:14,235 --> 00:34:16,286
简化它们并

1111
00:34:16,286 --> 00:34:17,646
清理你的代码

1112
00:34:17,646 --> 00:34:17,976
还有

1113
00:34:19,416 --> 00:34:21,306
在 Swift 里 你可以使用 typealias

1114
00:34:21,306 --> 00:34:22,235
做同样的事

1115
00:34:26,516 --> 00:34:28,266
如果你是从 iOS 进入 Mac 的世界

1116
00:34:28,456 --> 00:34:31,835
你可能会记得

1117
00:34:31,976 --> 00:34:33,856
NSWindowController 是大家

1118
00:34:33,856 --> 00:34:35,065
经常想要用的分类

1119
00:34:35,065 --> 00:34:36,565
而不是 NSViewController

1120
00:34:37,096 --> 00:34:40,286
所以去观察一下 

1121
00:34:41,146 --> 00:34:41,235
思考一下

1122
00:34:41,496 --> 00:34:44,176
我们从 Twitter 选的最后一条技巧是

1123
00:34:44,496 --> 00:34:46,315
在 Xcode 中 你可以使用 Add Expression

1124
00:34:46,496 --> 00:34:48,436
来获得任意地址的

1125
00:34:48,436 --> 00:34:49,596
快速查看预览

1126
00:34:50,826 --> 00:34:53,235
这是一些屏幕截图

1127
00:34:53,235 --> 00:34:54,196
它们展示了如何实现快速查看预览

1128
00:34:54,886 --> 00:34:56,545
我的调试器运行结束了

1129
00:34:56,846 --> 00:34:59,656
我要打印出

1130
00:34:59,796 --> 00:35:01,216
这个添加猫的图片

1131
00:34:59,796 --> 00:35:01,216
这个添加猫的图片

1132
00:35:01,516 --> 00:35:04,476
我在这里抓取指针

1133
00:35:04,476 --> 00:35:06,476
我可以使用 Add Expression 菜单项

1134
00:35:06,476 --> 00:35:09,926
并把我的图像指针

1135
00:35:09,926 --> 00:35:10,336
粘贴上去

1136
00:35:10,836 --> 00:35:15,276
接下来 如果我敲击空格键

1137
00:35:15,276 --> 00:35:17,936
我将获得我的图片的

1138
00:35:17,996 --> 00:35:18,626
快速查找预览

1139
00:35:20,216 --> 00:35:21,926
关于如何让你的分类可以进行快速查找 

1140
00:35:21,926 --> 00:35:23,936
这方面有相关的文稿

1141
00:35:23,936 --> 00:35:25,676
不妨去查看一下

1142
00:35:25,676 --> 00:35:30,036
那么 我们的介绍就到这里

1143
00:35:30,426 --> 00:35:32,286
如果你想了解更多信息

1144
00:35:32,286 --> 00:35:35,086
可以访问这个页面

1145
00:35:35,086 --> 00:35:36,526
我们此前已经召开了几个

1146
00:35:36,526 --> 00:35:36,726
相关会议  都在这里面

1147
00:35:37,236 --> 00:35:39,086
在视频上看一看 你懂的

1148
00:35:39,086 --> 00:35:40,736
猫嘛  我们都想再看到

1149
00:35:40,736 --> 00:35:40,976
它们
