1
00:00:06,516 --> 00:00:16,500
[ 掌声 ]

2
00:00:25,796 --> 00:00:27,616
&gt;&gt; 欢迎大家

3
00:00:27,616 --> 00:00:29,046
感谢你们参加本次会议

4
00:00:29,996 --> 00:00:31,276
我叫 Athar Shah

5
00:00:31,276 --> 00:00:33,016
是 Apple Core Media 软件团队的

6
00:00:33,016 --> 00:00:34,356
一名经理

7
00:00:34,356 --> 00:00:36,336
今天 Apple

8
00:00:36,336 --> 00:00:37,756
很高兴与你们

9
00:00:37,756 --> 00:00:39,456
谈谈两项

10
00:00:39,456 --> 00:00:40,216
全新的媒体技术

11
00:00:41,226 --> 00:00:42,386
具体而言 我们将讨论一个全新的

12
00:00:42,386 --> 00:00:44,816
针对视频和图像压缩的

13
00:00:44,816 --> 00:00:46,266
编解码器 叫做 HEVC

14
00:00:46,826 --> 00:00:50,076
和一个我们即将采用的

15
00:00:50,076 --> 00:00:51,646
图像文件格式

16
00:00:52,186 --> 00:00:52,866
叫做 HEIF

17
00:00:54,206 --> 00:00:55,276
但在我们了解

18
00:00:55,276 --> 00:00:57,566
更多细节之前

19
00:00:57,806 --> 00:00:59,666
如果你已经下载了开发者预览版

20
00:00:59,696 --> 00:01:01,566
的最新构建版本

21
00:00:59,696 --> 00:01:01,566
的最新构建版本

22
00:01:01,606 --> 00:01:03,956
那么在一些特定的 iOS 设备上

23
00:01:03,956 --> 00:01:06,226
你已经获得并使用了

24
00:01:06,226 --> 00:01:08,056
这些新的技术和文件格式

25
00:01:08,836 --> 00:01:10,356
如果你足够细心

26
00:01:10,356 --> 00:01:13,036
你就会发现

27
00:01:13,036 --> 00:01:15,036
这些文件比之前

28
00:01:15,036 --> 00:01:15,916
小了很多

29
00:01:16,026 --> 00:01:17,596
在接下来的介绍中

30
00:01:17,596 --> 00:01:18,886
Gavin 会与你们讨论

31
00:01:18,886 --> 00:01:22,406
我们平台的一些细节

32
00:01:22,406 --> 00:01:23,916
以及我们是如何

33
00:01:23,916 --> 00:01:25,636
在硬件和软件中

34
00:01:25,636 --> 00:01:26,196
支持这些技术的

35
00:01:29,756 --> 00:01:32,106
我们首先会讨论

36
00:01:32,976 --> 00:01:34,516
目前媒体技术的概况

37
00:01:34,576 --> 00:01:36,406
和我们需要改变的原因

38
00:01:36,896 --> 00:01:38,956
然后我们会讨论

39
00:01:38,956 --> 00:01:41,716
HEVC 和 HEIF 分别是什么

40
00:01:41,716 --> 00:01:43,036
以及为什么 Apple 决定采用它们

41
00:01:43,476 --> 00:01:45,676
最后，我们会简单介绍一下

42
00:01:45,676 --> 00:01:48,506
我们是如何在 Apple 生态系统中

43
00:01:48,506 --> 00:01:49,696
应用这些技术的

44
00:01:49,696 --> 00:01:52,216
并且指导你

45
00:01:52,396 --> 00:01:54,006
如何在你的 App 中

46
00:01:54,006 --> 00:01:55,286
针对你的使用情况

47
00:01:55,366 --> 00:01:57,176
充分利用

48
00:01:57,176 --> 00:01:57,556
这些技术

49
00:02:01,236 --> 00:02:03,356
我们首先来谈谈目前媒体的格局

50
00:02:04,046 --> 00:02:06,546
我们的世界正在变得

51
00:02:06,546 --> 00:02:07,396
越来越可视化

52
00:02:07,846 --> 00:02:10,406
顾客和制作商

53
00:02:10,586 --> 00:02:12,836
都在生成越来越多的视频

54
00:02:13,336 --> 00:02:15,116
和多媒体内容

55
00:02:15,996 --> 00:02:17,966
不仅如此 现在的多媒体内容

56
00:02:18,026 --> 00:02:20,176
正在以各种全新的形式呈现

57
00:02:20,176 --> 00:02:23,926
如高分辨率 4K 视频  HDR 视频

58
00:02:24,246 --> 00:02:26,346
或广色域视频

59
00:02:26,346 --> 00:02:26,936
等等

60
00:02:28,336 --> 00:02:29,686
媒体的性质也

61
00:02:29,686 --> 00:02:32,966
正在改变 比如

62
00:02:32,966 --> 00:02:34,096
我们最爱的 Live Photo

63
00:02:34,096 --> 00:02:35,396
还有很多

64
00:02:35,396 --> 00:02:36,806
别的形式如

65
00:02:36,806 --> 00:02:38,436
短视频等等

66
00:02:39,436 --> 00:02:41,156
带宽依旧处于

67
00:02:41,156 --> 00:02:41,786
非常重要的地位

68
00:02:42,046 --> 00:02:43,836
在一些特定的应用程序

69
00:02:43,876 --> 00:02:45,726
和使用情景中

70
00:02:45,726 --> 00:02:48,146
如 OTT 视频交付和无线网络

71
00:02:49,016 --> 00:02:50,556
对带宽的要求

72
00:02:50,556 --> 00:02:51,106
非常高

73
00:02:51,106 --> 00:02:53,016
降低带宽要求

74
00:02:53,016 --> 00:02:54,086
会显著地

75
00:02:54,086 --> 00:02:55,236
改善这些

76
00:02:55,236 --> 00:02:55,726
使用情景

77
00:02:57,166 --> 00:03:00,236
我们已经使用 H.264 和 JPEG 

78
00:02:57,166 --> 00:03:00,236
我们已经使用 H.264 和 JPEG 

79
00:03:00,236 --> 00:03:01,506
有一段时间了

80
00:03:01,916 --> 00:03:03,406
这些编解码器

81
00:03:03,506 --> 00:03:06,246
在迅速演变的格局中

82
00:03:06,246 --> 00:03:07,376
面对着这些新的挑战

83
00:03:07,376 --> 00:03:08,086
能做的事情很有限

84
00:03:08,596 --> 00:03:11,156
这推动了 HEVC 的诞生

85
00:03:12,006 --> 00:03:13,016
我们一直在寻找一个

86
00:03:13,016 --> 00:03:15,146
可以在照片 图像 

87
00:03:15,146 --> 00:03:18,076
和视频中通用的

88
00:03:18,076 --> 00:03:19,396
新一代编解码器

89
00:03:19,966 --> 00:03:20,926
我们也一直在寻找

90
00:03:20,926 --> 00:03:22,056
某种能带来

91
00:03:22,056 --> 00:03:24,476
显著收益的

92
00:03:24,476 --> 00:03:27,826
技术

93
00:03:27,986 --> 00:03:30,896
经过评估后

94
00:03:31,016 --> 00:03:32,986
我们选择了 HEVC

95
00:03:32,986 --> 00:03:36,956
HEVC 是 High Efficiency Video Coding（高效视频编码）

96
00:03:36,956 --> 00:03:37,756
的缩写

97
00:03:38,376 --> 00:03:39,626
这是一种使用最先进技术的

98
00:03:40,326 --> 00:03:41,846
行业标准

99
00:03:41,846 --> 00:03:43,986
在 2013 年被批准和采用

100
00:03:45,056 --> 00:03:48,046
ISO（国际标准化组织）将它批准为 MPEG-H 的第二部分

101
00:03:48,046 --> 00:03:52,556
ITU（国际电信联盟）将它批准为 H.265

102
00:03:53,676 --> 00:03:55,026
我们将会用 HEVC

103
00:03:55,276 --> 00:03:57,266
来称呼和指代它

104
00:03:57,336 --> 00:04:00,296
Apple 将把它作为

105
00:03:57,336 --> 00:04:00,296
Apple 将把它作为

106
00:04:00,296 --> 00:04:02,406
新一代的编解码器

107
00:04:03,736 --> 00:04:05,146
我们接下来将会用几分钟

108
00:04:05,146 --> 00:04:07,496
来谈谈是什么让 HEVC

109
00:04:07,496 --> 00:04:09,356
成为了一个这么棒的编解码器

110
00:04:09,506 --> 00:04:13,376
HEVC 和 H.264 很相似

111
00:04:13,376 --> 00:04:14,886
它们都是

112
00:04:15,116 --> 00:04:18,536
分块处理

113
00:04:18,536 --> 00:04:19,146
视频和帧的

114
00:04:19,976 --> 00:04:22,976
它使用了时间和空间

115
00:04:22,976 --> 00:04:24,826
压缩技术来获得

116
00:04:24,826 --> 00:04:26,006
压缩效益

117
00:04:26,266 --> 00:04:29,596
H.264 的概念是基于宏块的

118
00:04:29,596 --> 00:04:32,696
也就是说在编解码器中

119
00:04:32,696 --> 00:04:34,576
进行处理时

120
00:04:34,576 --> 00:04:36,046
使用了大小为 16 x 16 的块

121
00:04:36,746 --> 00:04:40,396
HEVC 引入了 CTU

122
00:04:40,396 --> 00:04:41,486
也就是编码树单元的概念

123
00:04:41,926 --> 00:04:43,736
这些单元的大小

124
00:04:44,396 --> 00:04:48,116
可以从 4 x 4 

125
00:04:48,116 --> 00:04:48,756
一直到到 64 x 64

126
00:04:49,716 --> 00:04:51,646
当你使用

127
00:04:51,766 --> 00:04:54,996
更大的单元时

128
00:04:55,056 --> 00:04:56,346
你就会获得更好的压缩效益

129
00:04:57,446 --> 00:04:59,936
当你处理

130
00:04:59,936 --> 00:05:00,956
高分辨率视频和图像时

131
00:04:59,936 --> 00:05:00,956
高分辨率视频和图像时

132
00:05:00,956 --> 00:05:03,826
尤其如此

133
00:05:03,826 --> 00:05:05,196
你真的可以

134
00:05:05,846 --> 00:05:05,966
充分利用这个性质

135
00:05:07,116 --> 00:05:10,636
H.264 使用了 4 x 4 和

136
00:05:10,636 --> 00:05:13,736
8 x 8 DCT  也就是离散余弦变换

137
00:05:13,736 --> 00:05:18,476
但 HEVC 不仅使用了

138
00:05:18,476 --> 00:05:19,806
离散余弦变换 

139
00:05:19,806 --> 00:05:21,486
还使用了 DST

140
00:05:21,486 --> 00:05:23,066
也就是离散正弦变换

141
00:05:23,576 --> 00:05:25,076
同样 由于编码块

142
00:05:25,076 --> 00:05:27,276
会针对变换块调整大小

143
00:05:27,276 --> 00:05:30,226
大小也会提高到

144
00:05:30,226 --> 00:05:30,736
32 x 32

145
00:05:32,436 --> 00:05:34,096
为了获得更好的

146
00:05:34,096 --> 00:05:36,696
空间压缩效果  HEVC 引入了

147
00:05:36,696 --> 00:05:38,256
额外的定向模式

148
00:05:38,256 --> 00:05:41,456
H.264 有最多 9 个

149
00:05:41,456 --> 00:05:43,346
相比之下 HEVC 提高到了 35 个

150
00:05:45,456 --> 00:05:48,316
实现高度压缩

151
00:05:48,506 --> 00:05:49,866
的关键在于

152
00:05:49,866 --> 00:05:51,526
运动估计

153
00:05:51,526 --> 00:05:53,126
或运动补偿

154
00:05:53,866 --> 00:05:56,616
这就是你要找的

155
00:05:56,616 --> 00:05:58,756
你想要根据前面的图像

156
00:05:58,756 --> 00:06:01,136
来预测当先的图像

157
00:05:58,756 --> 00:06:01,136
来预测当先的图像

158
00:06:01,136 --> 00:06:02,896
在这之中

159
00:06:02,956 --> 00:06:03,926
有一个块

160
00:06:03,926 --> 00:06:05,086
你知道你能通过它

161
00:06:05,086 --> 00:06:05,426
做些什么吗

162
00:06:05,786 --> 00:06:07,756
这个块与上个图像的块

163
00:06:07,756 --> 00:06:09,376
是一样的 只是移动了

164
00:06:09,376 --> 00:06:10,576
特定数量的像素

165
00:06:11,566 --> 00:06:14,906
有时你并不能

166
00:06:14,906 --> 00:06:15,836
刚好匹配到像素的边界

167
00:06:15,836 --> 00:06:17,046
比如 一些内容

168
00:06:17,046 --> 00:06:18,236
可以移动 5 个像素

169
00:06:18,236 --> 00:06:18,996
但是也可以移动

170
00:06:19,036 --> 00:06:20,436
5.5 个像素或者

171
00:06:20,436 --> 00:06:21,906
5.25 个像素

172
00:06:22,976 --> 00:06:23,986
当你需要在半个像素

173
00:06:23,986 --> 00:06:26,266
或者四分之一个像素的边界

174
00:06:26,266 --> 00:06:28,206
进行运动估计时

175
00:06:28,206 --> 00:06:29,356
你需要能够

176
00:06:29,356 --> 00:06:30,686
精确地生成这些像素

177
00:06:30,686 --> 00:06:32,216
因为它们

178
00:06:32,216 --> 00:06:32,566
不存在

179
00:06:32,566 --> 00:06:33,586
因为只有边界上

180
00:06:33,586 --> 00:06:34,206
才有像素

181
00:06:34,756 --> 00:06:37,616
所以 如你所见  HEVC 拥有

182
00:06:37,616 --> 00:06:40,306
更好的滤波能力

183
00:06:40,306 --> 00:06:42,756
这可以用来

184
00:06:42,756 --> 00:06:44,806
更精确地生成

185
00:06:44,806 --> 00:06:46,226
亚像素和四分之一像素

186
00:06:46,496 --> 00:06:47,646
这带来了更好的

187
00:06:47,646 --> 00:06:49,566
运动估计和运动补偿

188
00:06:49,566 --> 00:06:51,646
从而带来更好的压缩效果

189
00:06:52,806 --> 00:06:54,456
最后 如果你熟悉

190
00:06:54,816 --> 00:06:56,796
基于块的编解码器

191
00:06:56,796 --> 00:06:59,656
我们说过 H.264 使用宏块

192
00:07:00,046 --> 00:07:01,576
有时你确实可以

193
00:07:01,576 --> 00:07:04,486
在编码视频中看到

194
00:07:04,486 --> 00:07:06,646
块边缘的缺陷

195
00:07:06,646 --> 00:07:07,456
我们称之为

196
00:07:07,456 --> 00:07:07,966
块效应

197
00:07:07,966 --> 00:07:12,136
H.264 先前引入了一个环路滤波器

198
00:07:12,576 --> 00:07:14,986
叫做去块滤波器

199
00:07:15,316 --> 00:07:16,666
它可以帮我们大幅减弱

200
00:07:16,666 --> 00:07:17,606
块效应

201
00:07:18,036 --> 00:07:19,676
HEVC 是在这个滤波器的基础上改善的

202
00:07:19,736 --> 00:07:21,916
但它更进一步

203
00:07:21,976 --> 00:07:23,546
引入了一个额外的步骤

204
00:07:23,576 --> 00:07:25,746
在这个步骤中

205
00:07:25,796 --> 00:07:27,636
我们会运行一个样本自适应偏移量滤波器

206
00:07:27,886 --> 00:07:28,866
它会给我们带来

207
00:07:28,866 --> 00:07:29,376
更好的处理结果

208
00:07:29,936 --> 00:07:30,856
现在我们已经说了

209
00:07:30,856 --> 00:07:32,926
一些在 HEVC 中能给我们

210
00:07:32,926 --> 00:07:35,446
带来更好压缩效果的重点技术

211
00:07:35,446 --> 00:07:36,246
其实还有更多

212
00:07:37,056 --> 00:07:38,496
说了这么多

213
00:07:38,496 --> 00:07:39,846
我们究竟能有

214
00:07:39,846 --> 00:07:40,176
多少提升呢

215
00:07:40,446 --> 00:07:42,606
这就是我们

216
00:07:42,606 --> 00:07:44,136
为什么这么兴奋地向你们介绍

217
00:07:44,136 --> 00:07:45,386
这个 Apple 的下一代编解码器的原因

218
00:07:46,186 --> 00:07:47,576
在普遍的视频内容上

219
00:07:47,576 --> 00:07:49,666
我们能看到

220
00:07:49,666 --> 00:07:51,836
相较 H.264 最多 40% 的

221
00:07:51,836 --> 00:07:53,816
压缩效果提升

222
00:07:54,506 --> 00:07:55,966
所以你可以生成

223
00:07:55,966 --> 00:07:57,446
与之前同等质量的视频

224
00:07:57,446 --> 00:07:59,276
但可以减少

225
00:07:59,276 --> 00:08:00,396
40% 的带宽

226
00:07:59,276 --> 00:08:00,396
40% 的带宽

227
00:08:00,876 --> 00:08:01,966
或者你可以保持

228
00:08:01,966 --> 00:08:03,306
相同的带宽

229
00:08:03,306 --> 00:08:05,256
并显著提升视频质量

230
00:08:05,716 --> 00:08:07,056
我们已经进行了很多的

231
00:08:07,056 --> 00:08:08,976
主观性和客观性测试

232
00:08:09,336 --> 00:08:10,646
以微调视频

233
00:08:10,646 --> 00:08:11,796
来实现这些收益

234
00:08:12,906 --> 00:08:14,616
在一些使用情景中

235
00:08:14,616 --> 00:08:15,806
我们甚至看到了更高的收益

236
00:08:16,436 --> 00:08:18,186
我们优化了

237
00:08:18,186 --> 00:08:19,936
端对端流水线

238
00:08:20,066 --> 00:08:20,866
改善了 iOS 的相机捕捉

239
00:08:21,306 --> 00:08:22,886
在这个使用情景中

240
00:08:22,886 --> 00:08:25,276
我们能看到相较 H.264

241
00:08:25,276 --> 00:08:26,736
2 倍的提升

242
00:08:27,496 --> 00:08:28,736
这意味着你现在

243
00:08:28,736 --> 00:08:30,386
能够存储

244
00:08:30,386 --> 00:08:32,926
相较之前 H.264

245
00:08:32,926 --> 00:08:34,135
两倍多的电影

246
00:08:36,676 --> 00:08:38,466
我们现在来谈谈

247
00:08:38,556 --> 00:08:40,336
我们支持的

248
00:08:40,336 --> 00:08:40,916
细节

249
00:08:41,576 --> 00:08:45,556
像 H.264 一样

250
00:08:45,556 --> 00:08:46,666
HEVC 也有 Profile 的概念

251
00:08:47,396 --> 00:08:49,476
在 HEVC 中 我们支持

252
00:08:49,476 --> 00:08:52,336
Main Profile  

253
00:08:52,336 --> 00:08:54,266
Main Still Picture Profile

254
00:08:54,266 --> 00:08:55,636
以及 Main 10 Profile

255
00:08:56,226 --> 00:08:58,566
有了 Main 10 Profile

256
00:08:58,566 --> 00:09:00,716
我们就可以

257
00:08:58,566 --> 00:09:00,716
我们就可以

258
00:09:00,716 --> 00:09:02,976
让视频的编码和解码

259
00:09:03,026 --> 00:09:03,626
达到 10bit 精度

260
00:09:04,246 --> 00:09:05,176
这意味着

261
00:09:05,176 --> 00:09:06,966
你可以在我们

262
00:09:06,966 --> 00:09:08,876
端对端的流水线上

263
00:09:08,876 --> 00:09:10,656
显示更多的

264
00:09:11,026 --> 00:09:12,746
灰度值和颜色

265
00:09:13,216 --> 00:09:18,836
在 HEVC 中 我们要求

266
00:09:18,836 --> 00:09:22,126
使用 hvc1 编解码类型用于播放

267
00:09:23,046 --> 00:09:24,576
这意味着参数集合

268
00:09:24,576 --> 00:09:26,096
需要存储在

269
00:09:26,096 --> 00:09:28,486
解码配置记录中

270
00:09:28,486 --> 00:09:29,956
而不是存储在样本

271
00:09:29,956 --> 00:09:31,516
或是负载本身中

272
00:09:32,046 --> 00:09:33,426
所以请确保

273
00:09:33,426 --> 00:09:35,936
你在创建 HEVC 素材时

274
00:09:35,936 --> 00:09:38,776
使用 hvc1 编解码类型

275
00:09:38,776 --> 00:09:40,426
以使其能够在 Apple 

276
00:09:40,426 --> 00:09:41,056
生态系统中播放

277
00:09:44,796 --> 00:09:47,426
最后 非常幸运

278
00:09:47,426 --> 00:09:48,996
HEVC 本身就适配

279
00:09:48,996 --> 00:09:51,236
现有的文件格式

280
00:09:51,236 --> 00:09:53,266
我们可以充分利用这一点

281
00:09:53,676 --> 00:09:55,206
它能够很好地

282
00:09:55,206 --> 00:09:57,116
适配 QuickTime 电影文件格式

283
00:09:57,116 --> 00:09:59,586
以及 ISO MPEG-4

284
00:09:59,636 --> 00:10:00,066
文件格式

285
00:09:59,636 --> 00:10:00,066
文件格式

286
00:10:02,776 --> 00:10:05,086
所以 我们选择了一个

287
00:10:05,086 --> 00:10:06,536
无论是业界 

288
00:10:06,536 --> 00:10:08,416
还是 Apple 生态系统

289
00:10:08,416 --> 00:10:09,066
都支持的技术

290
00:10:09,966 --> 00:10:10,946
这里说的支持

291
00:10:10,946 --> 00:10:11,826
包含硬件和软件两个方面

292
00:10:12,306 --> 00:10:13,086
在稍后的介绍中

293
00:10:13,086 --> 00:10:14,786
Gavin 会详细讲解

294
00:10:14,786 --> 00:10:18,186
HEVC 在哪些方面

295
00:10:18,186 --> 00:10:18,886
以及通过什么方式受到支持

296
00:10:21,936 --> 00:10:24,096
HEVC 适用于

297
00:10:24,096 --> 00:10:25,616
我们刚刚所说的文件格式

298
00:10:25,616 --> 00:10:27,036
也就是 QuickTime 电影文件格式

299
00:10:27,036 --> 00:10:28,766
以及 ISO MPEG-4

300
00:10:28,766 --> 00:10:30,046
文件格式

301
00:10:30,766 --> 00:10:32,656
总而言之 它是一个

302
00:10:33,086 --> 00:10:35,686
无论对于电影还是静止图像

303
00:10:35,686 --> 00:10:37,926
都很理想的编解码器

304
00:10:37,926 --> 00:10:40,896
可以用来代替 H.264 和 JPEG

305
00:10:41,496 --> 00:10:43,216
我已经提到过

306
00:10:43,216 --> 00:10:45,126
HEVC 可以使用现有的电影

307
00:10:45,126 --> 00:10:45,736
文件格式

308
00:10:46,216 --> 00:10:48,466
但对于照片和图像

309
00:10:48,466 --> 00:10:49,836
我们不能

310
00:10:49,836 --> 00:10:50,376
使用它

311
00:10:50,786 --> 00:10:52,866
所以我们需要寻找

312
00:10:52,896 --> 00:10:54,246
另一个文件格式

313
00:10:54,246 --> 00:10:56,416
来让我们使用 

314
00:10:56,496 --> 00:10:58,746
HEVC 作为编解码器

315
00:10:59,066 --> 00:11:01,276
这时候就需要 HEIF 了

316
00:10:59,066 --> 00:11:01,276
这时候就需要 HEIF 了

317
00:11:02,776 --> 00:11:05,096
在详细了解 HEIF 之前

318
00:11:05,226 --> 00:11:06,496
我们先讨论一下

319
00:11:06,496 --> 00:11:08,466
要采用一个新的

320
00:11:08,576 --> 00:11:11,496
图像文件格式

321
00:11:11,496 --> 00:11:13,406
须满足的要求

322
00:11:14,606 --> 00:11:15,616
我们想要支持

323
00:11:15,616 --> 00:11:17,236
以 HEVC 作为首选项的

324
00:11:17,236 --> 00:11:19,206
最先进的

325
00:11:19,206 --> 00:11:20,576
压缩技术

326
00:11:21,866 --> 00:11:24,086
我们尤其想要支持

327
00:11:24,086 --> 00:11:25,806
Alpha 和景深通道

328
00:11:25,856 --> 00:11:27,396
作为我们的首要素材类型

329
00:11:28,436 --> 00:11:30,756
我们需要支持动态图像

330
00:11:31,136 --> 00:11:33,976
如动态 GIF/JIF

331
00:11:33,976 --> 00:11:34,926
或 Live Photo

332
00:11:35,296 --> 00:11:38,766
除了支持静态图像

333
00:11:38,766 --> 00:11:41,096
我们还想要

334
00:11:41,096 --> 00:11:43,356
对图像序列的支持

335
00:11:43,356 --> 00:11:44,856
来压缩并展现

336
00:11:44,856 --> 00:11:46,886
你在连拍中

337
00:11:47,036 --> 00:11:48,476
所使用的

338
00:11:48,476 --> 00:11:49,986
文件格式

339
00:11:51,286 --> 00:11:52,926
最后 随着

340
00:11:52,926 --> 00:11:55,026
图像的尺寸

341
00:11:55,026 --> 00:11:57,376
越来越大

342
00:11:57,376 --> 00:11:59,106
能够高效地以

343
00:11:59,496 --> 00:12:00,606
低延迟和合理的过程

344
00:11:59,496 --> 00:12:00,606
低延迟和合理的过程

345
00:12:00,606 --> 00:12:02,026
来处理这些图像

346
00:12:02,506 --> 00:12:03,386
是非常重要的

347
00:12:03,616 --> 00:12:04,756
当你在获得一张

348
00:12:04,756 --> 00:12:06,566
巨大的图像时

349
00:12:06,866 --> 00:12:08,986
你想要立即

350
00:12:08,986 --> 00:12:09,966
下载并开始预览

351
00:12:10,306 --> 00:12:11,666
如果你只对一张大型图像中的

352
00:12:11,706 --> 00:12:13,366
某一小块特定的区域感兴趣时

353
00:12:13,366 --> 00:12:15,726
你想要能够

354
00:12:15,726 --> 00:12:18,006
只解码并处理

355
00:12:18,046 --> 00:12:19,676
相关的 Tile

356
00:12:20,196 --> 00:12:21,006
所以我们在寻找

357
00:12:21,006 --> 00:12:22,376
一种能够让我们

358
00:12:22,376 --> 00:12:25,676
利用这种流水线

359
00:12:26,436 --> 00:12:27,296
的技术

360
00:12:27,596 --> 00:12:29,246
为了满足这些要求

361
00:12:29,246 --> 00:12:30,826
我们考虑了几个选项

362
00:12:31,106 --> 00:12:32,346
最终选择了 HEIF

363
00:12:33,456 --> 00:12:35,086
HEIF 是 

364
00:12:35,126 --> 00:12:36,056
High Efficiency Image File Format（高效图像文件格式）的缩写

365
00:12:36,986 --> 00:12:39,906
与 HEVC 类似

366
00:12:39,906 --> 00:12:41,626
它也是一个行业标准

367
00:12:41,626 --> 00:12:44,476
在 2015 年被 ISO 批准

368
00:12:45,056 --> 00:12:48,406
它是基于我们熟悉的

369
00:12:48,406 --> 00:12:49,956
ISO BMFF 的

370
00:12:50,696 --> 00:12:53,716
它的功能非常强大

371
00:12:54,836 --> 00:12:56,786
同时支持单个图像

372
00:12:56,786 --> 00:12:58,286
和图像序列

373
00:12:59,436 --> 00:13:01,446
除此之外还有

374
00:12:59,436 --> 00:13:01,446
除此之外还有

375
00:13:01,446 --> 00:13:02,836
很多这个文件格式

376
00:13:02,836 --> 00:13:04,196
支持的使用情景

377
00:13:04,726 --> 00:13:05,756
允许我们在将来

378
00:13:05,756 --> 00:13:06,656
进行拓展

379
00:13:07,216 --> 00:13:12,316
通常它使用

380
00:13:12,316 --> 00:13:13,106
HEVC 进行压缩

381
00:13:13,156 --> 00:13:14,426
你也可以选择

382
00:13:14,426 --> 00:13:15,746
使用其他的编码器

383
00:13:16,046 --> 00:13:17,606
但在 Apple 

384
00:13:17,606 --> 00:13:20,066
当我们生成 HEIF 素材的时候

385
00:13:20,066 --> 00:13:23,566
仅会使用

386
00:13:24,476 --> 00:13:24,706
HEVC 编码器

387
00:13:24,796 --> 00:13:26,236
我们为什么为图像做这么多呢

388
00:13:27,506 --> 00:13:29,216
我们已经看到了新的文件格式

389
00:13:29,216 --> 00:13:30,076
为电影和视频带来的好处了

390
00:13:30,596 --> 00:13:32,366
对于图像

391
00:13:32,366 --> 00:13:33,746
我们也能看到

392
00:13:33,746 --> 00:13:34,236
相较 JPEG 而言的 巨大好处

393
00:13:34,656 --> 00:13:37,706
使用 HEVC 与 HEIF

394
00:13:38,496 --> 00:13:40,456
你可以拍摄和存储

395
00:13:40,546 --> 00:13:43,456
的图像数量

396
00:13:43,456 --> 00:13:45,496
将是之前使用 JPEG 时的两倍

397
00:13:47,696 --> 00:13:49,296
我们来讨论一下

398
00:13:49,386 --> 00:13:51,986
我们支持的

399
00:13:51,986 --> 00:13:52,896
HEIF 的各种格式

400
00:13:53,486 --> 00:13:56,346
我刚刚提到过

401
00:13:56,346 --> 00:13:58,076
从编码或素材创建的角度来看

402
00:13:58,546 --> 00:14:00,496
我们将会使用

403
00:13:58,546 --> 00:14:00,496
我们将会使用

404
00:14:00,496 --> 00:14:02,706
HEVC 编码器

405
00:14:02,706 --> 00:14:05,346
这意味着我们将会生成

406
00:14:05,346 --> 00:14:06,416
.heic 文件扩展名

407
00:14:06,416 --> 00:14:09,246
这是我们从素材创建的角度来看

408
00:14:09,296 --> 00:14:10,736
正在做的事情

409
00:14:10,736 --> 00:14:12,836
我们将能够

410
00:14:12,836 --> 00:14:13,906
创建和回放这些文件

411
00:14:14,556 --> 00:14:16,586
在回放方面

412
00:14:16,586 --> 00:14:19,816
我们也将会支持解码

413
00:14:19,986 --> 00:14:23,846
H.264 HEIF 图像以及

414
00:14:24,196 --> 00:14:25,356
其他我们系统支持的

415
00:14:25,356 --> 00:14:26,846
编解码器

416
00:14:27,206 --> 00:14:29,106
我们也能够解码

417
00:14:29,106 --> 00:14:31,246
和播放这些 HEIF 文件

418
00:14:35,976 --> 00:14:38,056
我们的同事 Davide

419
00:14:38,136 --> 00:14:38,976
制作了一个很棒的视频

420
00:14:38,976 --> 00:14:41,276
这个视频将会

421
00:14:41,276 --> 00:14:43,896
提供更多关于

422
00:14:43,896 --> 00:14:44,426
HEIF 文件格式的信息

423
00:14:44,426 --> 00:14:45,456
我认为他将会

424
00:14:45,456 --> 00:14:47,366
在今天晚些时候

425
00:14:47,366 --> 00:14:47,886
或者明天发布这个视频

426
00:14:48,266 --> 00:14:49,976
如果你想了解

427
00:14:49,976 --> 00:14:52,026
更多关于 HEIF 文件格式的信息

428
00:14:52,426 --> 00:14:55,526
各种 Atom 类型

429
00:14:55,526 --> 00:14:57,056
以及如何解析并处理文件

430
00:14:57,056 --> 00:14:58,986
请一定要看看这个视频

431
00:15:00,636 --> 00:15:02,026
我们已经讨论了这些新的技术

432
00:15:02,026 --> 00:15:03,496
了解了它们是什么

433
00:15:03,566 --> 00:15:05,776
以及我们为什么决定在 Apple 采用它们

434
00:15:05,776 --> 00:15:08,016
接下来我们会

435
00:15:08,016 --> 00:15:09,936
向你们介绍一下

436
00:15:09,936 --> 00:15:11,546
我们是如何在 

437
00:15:11,546 --> 00:15:13,636
Apple 生态系统中使用它们的

438
00:15:13,686 --> 00:15:15,856
并为你门提供一些指导

439
00:15:15,856 --> 00:15:16,696
让你们了解通过这些优秀的技术

440
00:15:16,696 --> 00:15:18,286
能在 App 中做些什么

441
00:15:18,286 --> 00:15:18,886
并介绍一些使用情景

442
00:15:19,866 --> 00:15:21,426
为了向你们介绍这些内容

443
00:15:21,426 --> 00:15:23,106
我想把时间

444
00:15:23,106 --> 00:15:23,806
交给 Gavin Thomson

445
00:15:24,516 --> 00:15:30,486
[掌声]

446
00:15:30,986 --> 00:15:31,376
&gt;&gt; 谢谢你 Athar

447
00:15:31,866 --> 00:15:33,386
我叫 Gavin Thomson

448
00:15:33,386 --> 00:15:34,676
我是 Apple

449
00:15:34,756 --> 00:15:36,096
相机和照片部门的

450
00:15:36,096 --> 00:15:37,386
一名工程经理

451
00:15:39,656 --> 00:15:46,146
我们刚刚了解了

452
00:15:46,366 --> 00:15:47,726
很多 HEIF 和 HEVC

453
00:15:47,726 --> 00:15:48,956
很棒的优点

454
00:15:48,956 --> 00:15:50,446
但这些在生态系统中

455
00:15:50,446 --> 00:15:51,196
有什么含义呢

456
00:15:51,866 --> 00:15:53,796
在过去的一年里

457
00:15:53,796 --> 00:15:55,836
我们在 Apple 一直

458
00:15:55,836 --> 00:15:57,146
致力于让 HEIF 和 HEVC

459
00:15:57,146 --> 00:15:57,866
适配 Apple 的生态系统

460
00:15:58,256 --> 00:16:01,036
我今天想和大家分享

461
00:15:58,256 --> 00:16:01,036
我今天想和大家分享

462
00:16:01,106 --> 00:16:02,336
和讨论这个适配过程

463
00:16:02,336 --> 00:16:03,536
以及为了帮助这个转变

464
00:16:03,536 --> 00:16:04,966
我们做出的变化

465
00:16:05,996 --> 00:16:07,146
我们的目标是

466
00:16:07,146 --> 00:16:08,396
让这些

467
00:16:08,396 --> 00:16:10,056
新格式的介绍

468
00:16:10,096 --> 00:16:10,516
尽可能简洁明了

469
00:16:11,146 --> 00:16:13,146
我想要讨论

470
00:16:13,146 --> 00:16:14,326
三个主题

471
00:16:15,526 --> 00:16:17,866
首先是创建

472
00:16:17,866 --> 00:16:19,256
我们如何以及在什么情况下

473
00:16:19,256 --> 00:16:20,266
可以创建 HEIF 图像和 HEVC 电影内容

474
00:16:21,696 --> 00:16:24,396
然后是访问

475
00:16:24,396 --> 00:16:26,526
我们如何以及在什么情况下

476
00:16:26,526 --> 00:16:27,036
可以访问 HEIF 图像和 HEVC 电影内容

477
00:16:27,796 --> 00:16:30,406
最后是转移

478
00:16:30,406 --> 00:16:31,386
当你想在拍摄或支持的设备上

479
00:16:31,386 --> 00:16:33,106
移动 HEIF 或 HEVC 内容时

480
00:16:33,106 --> 00:16:34,816
你需要考虑

481
00:16:34,816 --> 00:16:35,976
什么策略

482
00:16:42,046 --> 00:16:43,436
首先我想从

483
00:16:43,436 --> 00:16:44,006
访问开始说起

484
00:16:44,246 --> 00:16:45,956
我们已经讨论了

485
00:16:45,956 --> 00:16:47,576
针对图像的 HEIF 格式的

486
00:16:47,576 --> 00:16:48,206
可拓展性

487
00:16:48,686 --> 00:16:49,176
Apple 生成的

488
00:16:49,176 --> 00:16:50,536
HEIF 图像

489
00:16:50,536 --> 00:16:51,716
有哪些特征呢

490
00:16:53,456 --> 00:16:55,786
我们已经了解这种文件格式是一种

491
00:16:55,786 --> 00:16:57,346
ISO 基础媒体文件格式

492
00:16:58,046 --> 00:16:59,356
你们中如果有曾经

493
00:16:59,356 --> 00:17:01,496
查看过 MP4 或 QuickTime 电影文件内部的人

494
00:16:59,356 --> 00:17:01,496
查看过 MP4 或 QuickTime 电影文件内部的人

495
00:17:01,496 --> 00:17:03,286
将会对 HEIF 的

496
00:17:03,286 --> 00:17:04,195
内部架构非常熟悉

497
00:17:04,195 --> 00:17:05,496
因为它们是基于

498
00:17:05,496 --> 00:17:06,336
同一个标准的

499
00:17:06,906 --> 00:17:08,236
我想在这里重申

500
00:17:08,536 --> 00:17:10,246
HEIF 是一种容器格式

501
00:17:11,036 --> 00:17:12,205
这与 QuickTime 电影文件格式

502
00:17:12,205 --> 00:17:13,425
不是非常相似

503
00:17:14,106 --> 00:17:15,465
它相较于 JPEG 文件格式

504
00:17:15,465 --> 00:17:17,856
也有更多的选择

505
00:17:17,915 --> 00:17:18,646
并具有更高的灵活性

506
00:17:20,816 --> 00:17:23,056
目前 我们的图像负载

507
00:17:23,056 --> 00:17:24,675
是用 HEVC 编码的

508
00:17:25,376 --> 00:17:26,346
我们已经了解

509
00:17:26,346 --> 00:17:27,806
它提供了相较 JPEG

510
00:17:27,806 --> 00:17:29,426
很棒的压缩效果提升

511
00:17:29,426 --> 00:17:29,956
最高可达 2 倍

512
00:17:32,276 --> 00:17:34,446
同时 我们将图像负载

513
00:17:34,446 --> 00:17:37,286
分成 512 x 512 Tile 进行编码

514
00:17:37,286 --> 00:17:38,576
与其他的优势相比

515
00:17:38,576 --> 00:17:40,106
这对于高分辨率内容的

516
00:17:40,226 --> 00:17:41,946
增量加载

517
00:17:41,946 --> 00:17:45,646
将提供很棒的灵活性

518
00:17:46,256 --> 00:17:48,436
我们将使用

519
00:17:48,436 --> 00:17:50,596
320 x 240 大小的嵌入式缩略图

520
00:17:50,666 --> 00:17:52,446
相较我们目前使用的

521
00:17:52,446 --> 00:17:54,436
160 x 120 大小的 JPEG 嵌入式缩略图

522
00:17:54,436 --> 00:17:57,406
分辨率提升至 4 倍

523
00:17:57,406 --> 00:17:57,966
但大小仅为 2 倍

524
00:17:58,446 --> 00:17:59,266
我们是怎么做到的呢

525
00:17:59,266 --> 00:18:00,666
这是由于

526
00:17:59,266 --> 00:18:00,666
这是由于

527
00:18:00,846 --> 00:18:04,066
缩略图也是使用 HEVC 编码的

528
00:18:04,776 --> 00:18:07,356
我们依旧支持 

529
00:18:07,356 --> 00:18:09,766
EXIF 元数据负载

530
00:18:09,826 --> 00:18:10,976
它与我们在 JPEG 格式中

531
00:18:10,976 --> 00:18:11,916
的负载相适配

532
00:18:15,506 --> 00:18:17,996
使用 HEVC 编码的

533
00:18:17,996 --> 00:18:19,336
HEIF 图像将会

534
00:18:19,336 --> 00:18:21,486
在文件系统中

535
00:18:21,816 --> 00:18:24,596
以 .heic 扩展名标识

536
00:18:25,136 --> 00:18:26,636
一些人可能知道

537
00:18:26,636 --> 00:18:29,296
这与 DCF 8.3 文件命名惯例

538
00:18:29,666 --> 00:18:30,766
相违背

539
00:18:31,296 --> 00:18:32,496
如果你在文件名解析器中

540
00:18:32,526 --> 00:18:34,026
有任何的预设值

541
00:18:34,026 --> 00:18:34,926
比如扩展名为 3 个字符

542
00:18:34,926 --> 00:18:36,596
你需要知道现在我们的

543
00:18:36,596 --> 00:18:38,426
默认静态捕获格式

544
00:18:38,426 --> 00:18:39,486
含有 4 个字符

545
00:18:43,676 --> 00:18:44,986
那么我们在哪些地方

546
00:18:44,986 --> 00:18:45,566
支持 HEIF 解码呢

547
00:18:45,896 --> 00:18:48,016
HEIF 在我们

548
00:18:48,016 --> 00:18:50,106
所有支持的平台上可用

549
00:18:50,106 --> 00:18:51,816
如安装了 macOS 10.3 

550
00:18:51,816 --> 00:18:54,656
或 iOS 11 的平台

551
00:18:55,166 --> 00:18:55,946
但其实还有更多的

552
00:18:55,946 --> 00:18:58,676
硬件软件支持

553
00:18:58,756 --> 00:19:01,026
对于 iOS

554
00:18:58,756 --> 00:19:01,026
对于 iOS

555
00:19:01,026 --> 00:19:02,876
我们在 A9 芯片及以上的配置上

556
00:19:02,876 --> 00:19:03,156
提供硬件解码

557
00:19:03,726 --> 00:19:04,836
举个例子 也就是

558
00:19:04,836 --> 00:19:06,876
iPhone 6s 或 iPad Pro

559
00:19:08,116 --> 00:19:09,656
对于 macOS 

560
00:19:09,656 --> 00:19:10,616
我们在第六代 Intel Core

561
00:19:10,616 --> 00:19:12,376
也就是 Skylake 家族

562
00:19:12,376 --> 00:19:13,746
以上的处理器

563
00:19:13,746 --> 00:19:14,456
提供硬件支持

564
00:19:15,186 --> 00:19:17,836
比如含有

565
00:19:17,836 --> 00:19:18,696
Multi-Touch Bar 的新 Macbook Pro

566
00:19:18,696 --> 00:19:21,396
但是我们在

567
00:19:21,396 --> 00:19:22,896
所有支持的 iOS 和 macOS 设备上

568
00:19:22,896 --> 00:19:25,196
都提供软件解码支持

569
00:19:28,236 --> 00:19:30,026
那么我们在哪些地方

570
00:19:30,026 --> 00:19:30,546
支持 HEIF 图像呢

571
00:19:32,136 --> 00:19:34,446
ImageIO 是 Apple 最低等级的

572
00:19:35,036 --> 00:19:35,896
图像框架

573
00:19:36,066 --> 00:19:37,826
它支持 HEIF 作为解码源

574
00:19:37,826 --> 00:19:40,146
增量加载

575
00:19:40,176 --> 00:19:41,726
元数据

576
00:19:41,726 --> 00:19:42,376
和缩略图提取

577
00:19:42,806 --> 00:19:44,156
这与使用其他相同 API 的

578
00:19:44,156 --> 00:19:46,396
受支持的文件格式

579
00:19:46,396 --> 00:19:49,886
是一致的

580
00:19:50,226 --> 00:19:51,926
Core Image 

581
00:19:51,926 --> 00:19:53,256
也支持 HEIF

582
00:19:53,256 --> 00:19:54,006
作为实时图像处理源

583
00:19:56,256 --> 00:19:57,666
允许访问照片库素材

584
00:19:57,666 --> 00:19:59,186
的 PhotoKit API

585
00:19:59,186 --> 00:20:00,576
同样支持

586
00:19:59,186 --> 00:20:00,576
同样支持

587
00:20:00,576 --> 00:20:02,256
直接读取 HEIF

588
00:20:02,256 --> 00:20:03,906
我会在

589
00:20:03,906 --> 00:20:05,006
接下来的幻灯片中

590
00:20:05,006 --> 00:20:05,546
详细讨论这个框架

591
00:20:08,336 --> 00:20:10,206
Apple 的许多

592
00:20:10,206 --> 00:20:11,686
基于媒体的应用程序也会

593
00:20:11,686 --> 00:20:12,506
自然适配 HEIF	

594
00:20:12,626 --> 00:20:14,536
比如照片

595
00:20:14,596 --> 00:20:16,576
预览 快速预览

596
00:20:16,576 --> 00:20:17,436
除此之外还有很多

597
00:20:19,806 --> 00:20:21,246
好的 我们来看看我们的

598
00:20:21,246 --> 00:20:22,496
电影格式并讨论一下

599
00:20:22,496 --> 00:20:24,626
Apple 拍摄的

600
00:20:24,716 --> 00:20:25,346
HEVC 电影

601
00:20:27,796 --> 00:20:28,906
比起我们最新支持的图像格式

602
00:20:28,906 --> 00:20:30,816
电影格式的变化

603
00:20:30,816 --> 00:20:31,536
并没有那么大

604
00:20:32,076 --> 00:20:33,526
目前我们仍在使用

605
00:20:33,526 --> 00:20:36,446
QuickTime 文件格式

606
00:20:36,486 --> 00:20:38,336
但其实视频帧是用 HEVC 编码的

607
00:20:38,826 --> 00:20:40,116
我们已经了解到

608
00:20:40,446 --> 00:20:41,796
Apple 拍摄的视频

609
00:20:41,836 --> 00:20:42,946
将会获得相较 H.264 

610
00:20:42,946 --> 00:20:44,686
2 倍的压缩效果

611
00:20:44,686 --> 00:20:46,346
此外 我想重申

612
00:20:46,346 --> 00:20:48,126
我们的图像和视频格式

613
00:20:48,306 --> 00:20:50,096
都将会使用

614
00:20:50,096 --> 00:20:50,966
HEVC 进行编码

615
00:20:55,996 --> 00:20:58,846
我们也支持

616
00:20:58,846 --> 00:20:59,826
8bit 和 10bit 编码

617
00:21:00,226 --> 00:21:01,626
对于你们之中非常在意

618
00:21:01,626 --> 00:21:03,156
图像质量或者深色技术的人

619
00:21:03,156 --> 00:21:05,376
我们在 macOS 上将会有

620
00:21:05,426 --> 00:21:06,996
非实时的 10bit 软件编码器

621
00:21:06,996 --> 00:21:08,606
以满足你们的需求

622
00:21:11,786 --> 00:21:13,076
你们将会很高兴知道

623
00:21:13,176 --> 00:21:14,166
在这个新的格式中

624
00:21:14,166 --> 00:21:15,776
我们保留了 .mov 

625
00:21:15,776 --> 00:21:17,476
这个 3 字符的扩展名

626
00:21:17,476 --> 00:21:18,576
所以你们不需要为这个媒体格式

627
00:21:18,856 --> 00:21:20,896
更新任何

628
00:21:23,656 --> 00:21:24,056
文件名解析器

629
00:21:24,636 --> 00:21:27,066
好的 那么我们在哪里

630
00:21:27,316 --> 00:21:29,636
为 HEVC 电影提供解码支持呢

631
00:21:29,926 --> 00:21:31,496
我们有 8bit 和 10bit 解码

632
00:21:31,646 --> 00:21:33,606
它们在我们所有支持的平台上可用

633
00:21:33,606 --> 00:21:34,896
如安装了 macOS 10.3 

634
00:21:34,896 --> 00:21:37,286
或 iOS 11 的平台

635
00:21:37,286 --> 00:21:38,996
但其实还有更多的

636
00:21:38,996 --> 00:21:41,366
硬件软件支持

637
00:21:41,366 --> 00:21:43,606
对于 iOS

638
00:21:43,606 --> 00:21:45,086
我们在 A9 芯片及以上的配置上

639
00:21:45,086 --> 00:21:46,546
提供 8bit 和 10bit 硬件解码

640
00:21:47,396 --> 00:21:49,516
这里依然可以用

641
00:21:49,516 --> 00:21:50,326
iPhone 6s 作为例子

642
00:21:51,286 --> 00:21:52,816
对于 macOS 

643
00:21:52,816 --> 00:21:53,936
我们在第六代 Intel Core

644
00:21:53,936 --> 00:21:55,376
也就是 Skylake 家族

645
00:21:55,376 --> 00:21:56,916
以上的处理器上

646
00:21:56,916 --> 00:21:58,066
提供 8bit 硬件解码

647
00:21:58,486 --> 00:22:00,346
我们在第七代 Intel Core

648
00:21:58,486 --> 00:22:00,346
我们在第七代 Intel Core

649
00:22:00,346 --> 00:22:01,696
也就是 Kaby Lake 

650
00:22:01,736 --> 00:22:03,326
家族处理器上

651
00:22:03,326 --> 00:22:05,046
提供 10bit

652
00:22:05,046 --> 00:22:06,276
硬件解码支持

653
00:22:06,966 --> 00:22:09,176
我们在所有

654
00:22:09,176 --> 00:22:10,946
受支持的 macOS 和 iOS 平台上

655
00:22:10,946 --> 00:22:13,756
提供 8bit 和 10bit

656
00:22:13,796 --> 00:22:14,306
软件解码

657
00:22:18,296 --> 00:22:20,236
好的 那我们都在哪里

658
00:22:20,236 --> 00:22:21,076
支持 HEVC 电影呢

659
00:22:24,066 --> 00:22:25,946
AVFoundation 是管理电影的

660
00:22:25,946 --> 00:22:27,666
主要框架

661
00:22:27,886 --> 00:22:29,416
对于 HEVC 内容

662
00:22:29,416 --> 00:22:30,996
它支持播放

663
00:22:30,996 --> 00:22:31,576
创建和编辑工作流

664
00:22:32,086 --> 00:22:35,366
PhotoKit 会提供

665
00:22:35,366 --> 00:22:38,066
原始的 HEVC 电影

666
00:22:38,186 --> 00:22:40,386
WebKit 也可以播放

667
00:22:40,386 --> 00:22:43,976
HEVC 电影 但是只能在

668
00:22:43,976 --> 00:22:45,576
拥有硬件加速的设备上

669
00:22:45,576 --> 00:22:47,746
和所有 macOS 台式电脑上

670
00:22:48,456 --> 00:22:50,426
我们也支持以鼓励

671
00:22:50,546 --> 00:22:52,706
使用 HEVC 

672
00:22:52,706 --> 00:22:53,816
作为 HLS 流媒体

673
00:22:54,766 --> 00:22:55,796
这为提高

674
00:22:55,796 --> 00:22:58,536
网络吞吐量

675
00:22:59,076 --> 00:22:59,696
提供了一个很棒的机会

676
00:23:00,506 --> 00:23:01,706
此外 下一场会议

677
00:23:01,706 --> 00:23:03,026
将会讨论

678
00:23:03,026 --> 00:23:05,046
更多关于此项创新

679
00:23:05,046 --> 00:23:06,026
的细节

680
00:23:08,336 --> 00:23:10,426
我们有很多

681
00:23:10,426 --> 00:23:11,656
Apple 应用程序

682
00:23:11,656 --> 00:23:13,546
自然适配 HEVC 电影

683
00:23:13,546 --> 00:23:14,736
比如 QuickTime 播放器 快速预览

684
00:23:14,736 --> 00:23:17,096
照片以及 FaceTime

685
00:23:17,256 --> 00:23:19,096
这是一个很棒的 

686
00:23:19,156 --> 00:23:21,046
提高网络吞吐量的

687
00:23:21,046 --> 00:23:21,556
HEVC 用例

688
00:23:22,336 --> 00:23:25,646
总而言之  针对 HEVC

689
00:23:25,736 --> 00:23:28,536
我们为我们所有的设备 提供了解码支持

690
00:23:28,996 --> 00:23:30,036
那么播放呢？

691
00:23:30,596 --> 00:23:32,176
可以解码和

692
00:23:32,176 --> 00:23:33,736
可以播放之间有很重要的区别

693
00:23:33,736 --> 00:23:35,446
在 HEVC 中

694
00:23:35,556 --> 00:23:37,486
尤其如此

695
00:23:38,176 --> 00:23:40,306
这是我们中很多人

696
00:23:40,306 --> 00:23:41,016
都不熟悉的一个地方

697
00:23:41,166 --> 00:23:42,456
对于默认的拍摄格式

698
00:23:42,456 --> 00:23:43,996
我们并非在所有

699
00:23:43,996 --> 00:23:46,116
受支持设备上

700
00:23:46,116 --> 00:23:46,856
都有硬件加速

701
00:23:47,646 --> 00:23:48,826
这是一个我们长时间以来

702
00:23:48,826 --> 00:23:50,436
都不需要处理的问题

703
00:23:50,436 --> 00:23:53,736
因为 H.264 硬件解码

704
00:23:53,736 --> 00:23:57,506
在目前非常普遍

705
00:23:57,556 --> 00:23:58,946
我们所有的电影格式

706
00:23:58,946 --> 00:24:01,026
都可以解码

707
00:23:58,946 --> 00:24:01,026
都可以解码

708
00:24:01,026 --> 00:24:02,466
但是在一些软件系统上

709
00:24:02,466 --> 00:24:03,346
会有一些格式的解码

710
00:24:03,346 --> 00:24:04,636
速度远不能达到实时

711
00:24:04,636 --> 00:24:06,106
且仅支持导出

712
00:24:06,106 --> 00:24:07,276
或者转码工作流

713
00:24:07,276 --> 00:24:08,716
那么你如何判断

714
00:24:08,716 --> 00:24:11,176
在一个给定设备上

715
00:24:11,866 --> 00:24:13,396
某个格式

716
00:24:13,396 --> 00:24:13,896
适合播放呢

717
00:24:15,576 --> 00:24:18,026
在 AVFoundation 的 API 中

718
00:24:18,026 --> 00:24:19,646
有一个概念叫做

719
00:24:19,736 --> 00:24:20,466
isPlayable

720
00:24:21,246 --> 00:24:22,346
这指示着

721
00:24:22,346 --> 00:24:24,106
一个设备的视频等级

722
00:24:24,326 --> 00:24:26,136
是否支持播放某个电影

723
00:24:26,946 --> 00:24:28,336
如果它为真

724
00:24:28,336 --> 00:24:29,936
你将会体验到

725
00:24:29,936 --> 00:24:31,426
流畅的视频播放

726
00:24:31,536 --> 00:24:33,146
而不会遇到任何

727
00:24:33,146 --> 00:24:34,466
显著的卡顿

728
00:24:36,856 --> 00:24:39,416
例如 尽管 Apple 拍摄的

729
00:24:39,416 --> 00:24:41,236
4K30 在所有

730
00:24:41,236 --> 00:24:42,296
受支持的系统中

731
00:24:42,296 --> 00:24:44,166
都可以解码

732
00:24:44,166 --> 00:24:45,296
但是在我们的

733
00:24:45,296 --> 00:24:46,746
某些旧设备上却不能播放

734
00:24:46,746 --> 00:24:47,606
比如 iPhone 5s

735
00:24:47,666 --> 00:24:49,226
这就需要我们的

736
00:24:49,226 --> 00:24:49,906
开发人员了

737
00:24:49,906 --> 00:24:51,306
在这个点上

738
00:24:51,306 --> 00:24:52,726
时刻观察这些

739
00:24:53,036 --> 00:24:54,656
可播放状态

740
00:24:55,086 --> 00:24:56,876
来保证最佳的用户体验

741
00:24:56,876 --> 00:24:58,246
十分重要

742
00:25:01,936 --> 00:25:04,276
好的 对于很多开发人员来说

743
00:25:04,276 --> 00:25:05,686
他们与原始 HEIF 

744
00:25:05,686 --> 00:25:07,366
和 HEVC 内容的

745
00:25:07,366 --> 00:25:09,376
第一次互动是通过公开的

746
00:25:10,196 --> 00:25:10,346
照片 API

747
00:25:11,576 --> 00:25:13,466
PhotoKit 是一个在 iOS 上

748
00:25:13,466 --> 00:25:14,956
广泛使用的照片 API

749
00:25:15,666 --> 00:25:16,726
在此次大会上

750
00:25:16,726 --> 00:25:17,756
会宣布一些关于

751
00:25:17,756 --> 00:25:19,896
它在 macOS 上的可用性

752
00:25:19,896 --> 00:25:21,866
请在明天参加

753
00:25:21,866 --> 00:25:22,866
关于照片新特性的会议

754
00:25:22,866 --> 00:25:24,826
以了解更多细节

755
00:25:24,826 --> 00:25:26,796
它会支持原始 HEIF 和 HEVC

756
00:25:27,496 --> 00:25:28,546
电影内容

757
00:25:28,886 --> 00:25:30,226
过时的

758
00:25:30,276 --> 00:25:31,966
AssetLibrary 框架

759
00:25:31,966 --> 00:25:33,836
在开发社区

760
00:25:33,836 --> 00:25:34,226
仍然非常流行

761
00:25:34,226 --> 00:25:36,946
它也会支持 HEIF 和

762
00:25:37,866 --> 00:25:39,536
HEVC 内容

763
00:25:40,116 --> 00:25:41,586
在 macOS 上 

764
00:25:41,586 --> 00:25:42,626
我们还有 Media Library API

765
00:25:43,286 --> 00:25:45,406
对于这个 API

766
00:25:45,406 --> 00:25:46,616
它将只会支持

767
00:25:46,616 --> 00:25:48,556
转码的 HEIF 和 HEVC

768
00:25:48,556 --> 00:25:51,366
因为 JPEG 和 H.264 

769
00:25:51,366 --> 00:25:52,406
有相同的分辨率

770
00:25:55,796 --> 00:25:56,886
由于使用 PhotoKit 在

771
00:25:56,886 --> 00:25:58,386
Apple 平台上

772
00:25:58,386 --> 00:25:59,766
访问媒体十分流行

773
00:25:59,766 --> 00:26:01,116
我想要强调一些类

774
00:25:59,766 --> 00:26:01,116
我想要强调一些类

775
00:26:01,496 --> 00:26:02,606
通过它们你可以

776
00:26:02,606 --> 00:26:04,276
访问 HEIF 和 HEVC 内容

777
00:26:05,916 --> 00:26:07,986
当请求图像时

778
00:26:07,986 --> 00:26:09,066
你可以使用 PHImageManager

779
00:26:09,766 --> 00:26:11,136
通过这个类

780
00:26:11,136 --> 00:26:13,136
你可以请求原始 HEIF 图像

781
00:26:14,056 --> 00:26:15,216
此外 当请求视频

782
00:26:15,216 --> 00:26:17,166
对象的时候

783
00:26:17,166 --> 00:26:19,506
你也可以使用 PHImageManager

784
00:26:19,506 --> 00:26:20,396
来请求原始的 HEVC 电影

785
00:26:22,176 --> 00:26:25,676
对于管理资源

786
00:26:25,676 --> 00:26:28,126
我们有 PHAssetResourceManager

787
00:26:28,126 --> 00:26:29,696
它可以让你管理

788
00:26:29,696 --> 00:26:31,006
照片库中所有

789
00:26:31,006 --> 00:26:31,496
零散的资源

790
00:26:31,776 --> 00:26:33,296
这些资源可以是

791
00:26:33,296 --> 00:26:34,246
HEIF 和 HEVC 内容

792
00:26:37,416 --> 00:26:39,026
对于编辑工作流

793
00:26:39,026 --> 00:26:41,066
我们有 PHContentEditingInput

794
00:26:41,066 --> 00:26:43,226
它会支持 HEIF 图像

795
00:26:43,276 --> 00:26:45,466
或 HEVC 电影作为

796
00:26:45,466 --> 00:26:46,146
编辑阶段的输入

797
00:26:46,726 --> 00:26:50,716
我想要着重强调

798
00:26:50,716 --> 00:26:51,966
如果你已经在

799
00:26:51,966 --> 00:26:53,386
使用 Apple 框架

800
00:26:53,416 --> 00:26:55,326
来管理媒体

801
00:26:55,326 --> 00:26:57,256
那么转变到 HEIF 或 HEVC

802
00:26:57,256 --> 00:26:58,266
将会非常容易

803
00:26:58,656 --> 00:26:59,956
另一个方面 如果你有自己的

804
00:26:59,956 --> 00:27:01,596
图像或视频堆栈

805
00:26:59,956 --> 00:27:01,596
图像或视频堆栈

806
00:27:01,596 --> 00:27:03,686
你可能需要重新访问

807
00:27:03,686 --> 00:27:05,426
那些集成内容并

808
00:27:05,426 --> 00:27:06,626
考虑采用一个合适的

809
00:27:06,626 --> 00:27:08,356
Apple 框架

810
00:27:08,986 --> 00:27:11,466
可选的框架有

811
00:27:11,466 --> 00:27:14,376
针对图像的 ImageIO

812
00:27:15,786 --> 00:27:18,206
针对视频的 AVFoundation

813
00:27:18,366 --> 00:27:19,386
针对视频帧或者

814
00:27:20,396 --> 00:27:22,366
图像处理的 Core Image

815
00:27:24,236 --> 00:27:26,556
针对展示 我们有 UIKit

816
00:27:26,556 --> 00:27:27,746
针对访问

817
00:27:27,746 --> 00:27:28,236
在照片库中的资源 我们有 PhotoKit

818
00:27:29,086 --> 00:27:30,776
通过这些框架

819
00:27:30,776 --> 00:27:32,466
来使用 HEIF 和 HEVC 

820
00:27:32,466 --> 00:27:33,176
将会非常容易

821
00:27:35,546 --> 00:27:36,896
我想向大家推荐

822
00:27:36,896 --> 00:27:38,166
另一个将会在

823
00:27:38,246 --> 00:27:40,236
周五上午 11:00 举行的会议

824
00:27:40,236 --> 00:27:41,116
叫做 使用 HEIF 和 HEVC

825
00:27:41,206 --> 00:27:42,996
届时将会有很多关于

826
00:27:42,996 --> 00:27:45,226
如何在这些框架下使用 HEIF 和 HEVC

827
00:27:45,326 --> 00:27:46,996
的示例代码

828
00:27:47,606 --> 00:27:49,166
我强烈推荐

829
00:27:50,446 --> 00:27:52,546
好的 以上就是关于访问的内容

830
00:27:52,796 --> 00:27:54,256
我们继续来看创建

831
00:27:55,406 --> 00:27:57,646
那么 我们如何创建

832
00:27:57,646 --> 00:27:59,546
HEIF 图像和

833
00:27:59,546 --> 00:28:00,076
HEVC 电影内容呢

834
00:27:59,546 --> 00:28:00,076
HEVC 电影内容呢

835
00:28:01,356 --> 00:28:03,236
如你所见 我们目前

836
00:28:03,236 --> 00:28:05,586
在 iOS 上仅在最低配置为

837
00:28:05,586 --> 00:28:08,096
A10 Fusion 芯片的硬件上

838
00:28:08,096 --> 00:28:09,556
提供 HEIF 编码支持

839
00:28:09,556 --> 00:28:11,316
这样的硬件包括

840
00:28:11,316 --> 00:28:13,026
iPhone 7 和 

841
00:28:13,026 --> 00:28:13,956
iPhone 7 Plus

842
00:28:14,516 --> 00:28:15,816
这里要注意的是

843
00:28:15,816 --> 00:28:17,256
macOS 并不支持

844
00:28:17,256 --> 00:28:21,036
HEIF 编码

845
00:28:21,636 --> 00:28:23,856
我们如何创建 HEIF 图像呢

846
00:28:24,766 --> 00:28:26,726
ImageIO 支持 HEIF

847
00:28:26,726 --> 00:28:27,476
作为输出

848
00:28:28,046 --> 00:28:28,816
你可以考虑

849
00:28:28,816 --> 00:28:31,456
将你的 JPEG 资源

850
00:28:31,456 --> 00:28:33,546
转码为 HEIF 以获得更好的

851
00:28:33,666 --> 00:28:34,726
存储能力或者网络收益

852
00:28:35,206 --> 00:28:38,596
此外 AVFoundation 捕获 API

853
00:28:38,596 --> 00:28:40,616
将会支持直接

854
00:28:40,616 --> 00:28:43,906
从相机拍摄 HEIF

855
00:28:44,846 --> 00:28:47,516
如 Athar 刚刚所说

856
00:28:47,516 --> 00:28:48,786
所有 Apple 相机模式将会默认

857
00:28:48,786 --> 00:28:50,146
生成 HEIF 格式

858
00:28:50,146 --> 00:28:51,026
连拍模式除外

859
00:28:51,346 --> 00:28:52,306
如果你已经

860
00:28:52,366 --> 00:28:53,746
在受支持的硬件上

861
00:28:53,746 --> 00:28:55,136
下载了开发者预览版

862
00:28:55,136 --> 00:28:57,576
那么当你在照相时

863
00:28:57,576 --> 00:28:58,306
将会获取 HEIF 格式的照片

864
00:28:59,746 --> 00:29:01,576
值得再次强调的是

865
00:28:59,746 --> 00:29:01,576
值得再次强调的是

866
00:29:01,776 --> 00:29:03,506
只有 HEIC 这个 HEIF 变体

867
00:29:03,506 --> 00:29:05,126
在 Apple 框架的代码中

868
00:29:05,126 --> 00:29:06,146
受到支持

869
00:29:06,586 --> 00:29:08,116
对于 .hvc 的 HEIF 编码图像

870
00:29:08,206 --> 00:29:09,436
也是如此

871
00:29:09,986 --> 00:29:14,206
我们来看看电影创建

872
00:29:14,486 --> 00:29:16,316
这里是一个展示

873
00:29:16,556 --> 00:29:18,116
我们在哪些地方

874
00:29:18,116 --> 00:29:18,586
支持 HEVC 编码的表格

875
00:29:19,466 --> 00:29:21,276
在 iOS 中 我们在

876
00:29:21,276 --> 00:29:22,876
最低配置为 A10 Fusion 芯片上

877
00:29:22,876 --> 00:29:24,626
提供了 8bit 编码支持

878
00:29:24,626 --> 00:29:26,296
比如 iPhone 7

879
00:29:27,076 --> 00:29:29,316
在 macOS 中 我们在

880
00:29:29,316 --> 00:29:30,816
六代 Intel Core 处理器

881
00:29:30,816 --> 00:29:32,146
或 Skylake 家族处理器上

882
00:29:32,146 --> 00:29:33,786
提供了 8bit 硬件编码

883
00:29:34,706 --> 00:29:36,776
另外 在 macOS 中

884
00:29:36,776 --> 00:29:39,086
我们提供了 10bit 软件编码支持

885
00:29:39,916 --> 00:29:42,226
我们如何创建 HEVC 电影呢

886
00:29:43,756 --> 00:29:45,686
AVFoundation 是一个

887
00:29:45,686 --> 00:29:46,816
电影创建框架

888
00:29:47,286 --> 00:29:49,016
HEVC 电影可以在

889
00:29:49,016 --> 00:29:50,596
AVFoundation 的导出阶段

890
00:29:50,596 --> 00:29:51,036
创建

891
00:29:51,566 --> 00:29:55,536
你可以将 H.264 导出为

892
00:29:55,536 --> 00:29:56,676
HEVC 以获得更好的存储能力

893
00:29:56,676 --> 00:29:57,866
或者网络优化

894
00:29:58,496 --> 00:30:01,666
你也可以直接通过

895
00:29:58,496 --> 00:30:01,666
你也可以直接通过

896
00:30:01,666 --> 00:30:03,056
AVFoundation 的捕获阶段

897
00:30:03,056 --> 00:30:06,776
使用相机来直接拍摄 HEIF 电影

898
00:30:07,066 --> 00:30:08,746
所有当前的

899
00:30:08,746 --> 00:30:10,766
相机录制模式都会默认生成

900
00:30:10,766 --> 00:30:12,456
HEVC 编码的电影

901
00:30:12,456 --> 00:30:13,996
所以 如果你已经

902
00:30:13,996 --> 00:30:15,846
安装了开发者预览版

903
00:30:15,846 --> 00:30:18,456
在你拍摄电影时

904
00:30:18,456 --> 00:30:22,856
它们其实已经是 HEVC 电影了

905
00:30:23,336 --> 00:30:24,246
以上是创建 

906
00:30:24,926 --> 00:30:26,486
接下来我们来讨论一下转移

907
00:30:27,536 --> 00:30:29,256
在我们想要在创建设备

908
00:30:29,256 --> 00:30:30,186
或其他受支持设备上

909
00:30:30,186 --> 00:30:31,846
转移 HEIF 图像

910
00:30:31,846 --> 00:30:35,636
或 HEVC 电影时

911
00:30:35,636 --> 00:30:36,996
我们需要考虑什么问题呢

912
00:30:39,556 --> 00:30:41,366
在受支持设备上

913
00:30:41,366 --> 00:30:43,136
转移 HEIF 或 HEVC 时

914
00:30:43,136 --> 00:30:44,456
你没有与 JPEG 或 H.264 上

915
00:30:44,456 --> 00:30:46,656
相同的生态系统

916
00:30:46,656 --> 00:30:47,196
以提供代码支持

917
00:30:47,806 --> 00:30:48,616
你可能想要

918
00:30:48,616 --> 00:30:49,426
考虑转码

919
00:30:50,776 --> 00:30:52,336
这里是一些你可能

920
00:30:52,336 --> 00:30:53,096
想要考虑的方法

921
00:30:53,626 --> 00:30:55,346
首先也是最简单的方法是

922
00:30:55,346 --> 00:30:56,916
总是转码

923
00:30:58,056 --> 00:30:59,806
另一个选项可以是

924
00:30:59,806 --> 00:31:02,036
支持适用性互验

925
00:30:59,806 --> 00:31:02,036
支持适用性互验

926
00:31:02,566 --> 00:31:05,766
我们首先来看看

927
00:31:05,766 --> 00:31:07,226
转码的

928
00:31:07,226 --> 00:31:08,476
工作流示例

929
00:31:10,816 --> 00:31:12,466
在这个例子中 你有一个自己的

930
00:31:12,466 --> 00:31:13,806
社交网络客户端

931
00:31:13,926 --> 00:31:15,806
允许用户在时间线上

932
00:31:15,806 --> 00:31:17,966
添加 HEIF 或 HEVC 内容

933
00:31:19,336 --> 00:31:21,076
由于这个结构

934
00:31:21,076 --> 00:31:22,266
想要评估所有

935
00:31:22,266 --> 00:31:24,106
接收设备的适用性

936
00:31:24,106 --> 00:31:25,786
是不可能的

937
00:31:25,786 --> 00:31:27,266
而且服务器可能

938
00:31:27,266 --> 00:31:27,716
没有能力进行转码

939
00:31:29,016 --> 00:31:31,306
所以我们只能选择

940
00:31:31,306 --> 00:31:32,016
转码

941
00:31:32,566 --> 00:31:37,326
在这种情况下

942
00:31:37,526 --> 00:31:38,986
受支持和不受支持的设备

943
00:31:38,986 --> 00:31:40,366
都会接收到

944
00:31:40,366 --> 00:31:42,226
转码后的文件

945
00:31:42,226 --> 00:31:47,426
比如 JPEG 或 H.264

946
00:31:47,426 --> 00:31:48,856
另一个我们可能会

947
00:31:48,856 --> 00:31:49,666
考虑的方法是

948
00:31:49,666 --> 00:31:51,106
适用性互验

949
00:31:52,046 --> 00:31:53,496
我们来看看这种

950
00:31:53,546 --> 00:31:54,386
工作流的示例

951
00:31:55,776 --> 00:31:56,866
你可能有一个应用

952
00:31:57,426 --> 00:31:58,696
采用了 Apple 的

953
00:31:58,696 --> 00:32:00,366
多点连接

954
00:31:58,696 --> 00:32:00,366
多点连接

955
00:32:00,366 --> 00:32:00,796
API

956
00:32:01,696 --> 00:32:03,246
如果你正在与一个

957
00:32:03,246 --> 00:32:04,986
受支持设备进行媒体交换

958
00:32:04,986 --> 00:32:06,476
你不希望总是出现由

959
00:32:06,476 --> 00:32:07,966
发送转码后的

960
00:32:07,966 --> 00:32:09,526
JPEG 或 H.264 

961
00:32:09,526 --> 00:32:11,826
导致的转码成本和高网络延迟

962
00:32:12,356 --> 00:32:15,086
你可以在初始的

963
00:32:15,086 --> 00:32:16,496
握手中引入

964
00:32:16,496 --> 00:32:17,436
可用性互验

965
00:32:19,716 --> 00:32:21,736
发送设备将会

966
00:32:21,736 --> 00:32:23,336
评估接收设备

967
00:32:23,336 --> 00:32:24,976
的适用性

968
00:32:24,976 --> 00:32:26,276
并决定是否转码

969
00:32:27,046 --> 00:32:29,196
我们希望 随着时间的推移

970
00:32:29,196 --> 00:32:30,576
支持这些格式的情况越来越多

971
00:32:30,746 --> 00:32:34,776
我们需要转码的次数

972
00:32:34,776 --> 00:32:36,566
越来越少

973
00:32:37,426 --> 00:32:38,916
这个策略对于

974
00:32:38,916 --> 00:32:40,646
P2P 和客户端／服务器结构

975
00:32:40,646 --> 00:32:42,026
都非常适用

976
00:32:44,676 --> 00:32:46,566
那么 Apple 是如何处理

977
00:32:46,566 --> 00:32:47,606
这么多相似的工作流的呢

978
00:32:47,996 --> 00:32:51,616
这里是一些例子

979
00:32:51,876 --> 00:32:53,406
比如邮件

980
00:32:53,486 --> 00:32:54,796
评估所有

981
00:32:54,796 --> 00:32:56,306
接收客户端的适用性

982
00:32:56,306 --> 00:32:57,286
不太现实

983
00:32:57,286 --> 00:32:58,536
我们也并没有支持转码的服务器

984
00:32:58,536 --> 00:33:00,646
所以在把 HEIF 或 HEVC

985
00:32:58,536 --> 00:33:00,646
所以在把 HEIF 或 HEVC

986
00:33:00,646 --> 00:33:03,746
作为邮件附件发送时

987
00:33:03,816 --> 00:33:06,026
我们总是转码

988
00:33:06,576 --> 00:33:08,956
对于那些有

989
00:33:08,956 --> 00:33:11,066
分享扩展的开发人员

990
00:33:11,066 --> 00:33:14,016
我们也将会在发送 HEIF 或 HEVC 之前

991
00:33:14,016 --> 00:33:16,556
进行转码

992
00:33:16,686 --> 00:33:18,646
不管怎样

993
00:33:18,716 --> 00:33:20,576
这简化了当前的集成

994
00:33:22,796 --> 00:33:24,566
我们也针对

995
00:33:24,566 --> 00:33:25,686
一定数量的工作流

996
00:33:25,686 --> 00:33:26,696
采用了适用性互验

997
00:33:26,996 --> 00:33:29,466
比如 P2P

998
00:33:29,466 --> 00:33:29,896
和 AirDrop

999
00:33:30,596 --> 00:33:33,166
有了这些集成

1000
00:33:33,166 --> 00:33:34,996
我们总会评估

1001
00:33:34,996 --> 00:33:37,306
接收端的适用性

1002
00:33:37,406 --> 00:33:39,546
并决定是否转码

1003
00:33:42,976 --> 00:33:44,816
最后

1004
00:33:44,816 --> 00:33:46,736
有一些 HEIF 和

1005
00:33:46,786 --> 00:33:48,136
HEVC 的重点

1006
00:33:48,806 --> 00:33:48,966
我想要强调一下

1007
00:33:50,256 --> 00:33:52,616
HEVC 是 Apple 的

1008
00:33:52,616 --> 00:33:54,306
下一代编解码器

1009
00:33:54,576 --> 00:33:56,776
我们将会在编码

1010
00:33:56,776 --> 00:33:58,506
图像和视频中使用它

1011
00:33:58,506 --> 00:33:59,606
它将会为 Apple 拍摄的内容

1012
00:33:59,606 --> 00:34:00,856
提供多达两倍的

1013
00:33:59,606 --> 00:34:00,856
提供多达两倍的

1014
00:34:00,856 --> 00:34:01,376
压缩效果提升

1015
00:34:01,896 --> 00:34:05,796
我们将会采用 HEIF

1016
00:34:05,796 --> 00:34:06,556
作为我们的图像文件格式

1017
00:34:07,766 --> 00:34:09,295
这个图像容器将会

1018
00:34:09,295 --> 00:34:10,916
为我们提供一个灵活的

1019
00:34:10,916 --> 00:34:14,255
在将来很好使用的格式

1020
00:34:14,826 --> 00:34:16,696
如果你正在 Apple 生态系统中

1021
00:34:16,696 --> 00:34:18,726
使用 Apple 框架

1022
00:34:18,726 --> 00:34:20,966
那么转变到 HEIF 和 HEVC

1023
00:34:20,966 --> 00:34:22,295
将会非常容易

1024
00:34:22,956 --> 00:34:23,856
但如果你需要

1025
00:34:23,856 --> 00:34:25,016
在我们的生态系统外

1026
00:34:25,016 --> 00:34:26,666
移动内容

1027
00:34:27,136 --> 00:34:28,806
你需要考虑转码选项

1028
00:34:28,806 --> 00:34:30,646
来为我们的用户提供

1029
00:34:30,985 --> 00:34:34,976
最佳的向后兼容性

1030
00:34:35,096 --> 00:34:36,886
最后 我们非常希望

1031
00:34:36,886 --> 00:34:39,835
开发人员们可以接纳

1032
00:34:39,835 --> 00:34:42,016
HEIF 和 HEVC 

1033
00:34:42,076 --> 00:34:43,966
作为创建和访问工作流

1034
00:34:43,966 --> 00:34:45,565
因为我们相信

1035
00:34:45,565 --> 00:34:47,275
这将不仅为开发人员 更为我们的顾客

1036
00:34:47,275 --> 00:34:48,106
提供很大的益处

1037
00:34:48,755 --> 00:34:50,656
要想了解更多

1038
00:34:50,656 --> 00:34:51,826
关于这次会议的细节

1039
00:34:51,826 --> 00:34:58,376
你可以访问如下网站

1040
00:34:58,376 --> 00:35:00,756
但我们仍有一系列别的会议

1041
00:34:58,376 --> 00:35:00,756
但我们仍有一系列别的会议

1042
00:35:00,756 --> 00:35:01,166
和研究室

1043
00:35:01,306 --> 00:35:02,856
我们可以了解更多

1044
00:35:02,926 --> 00:35:03,216
关于 HEIF 和 HEVC 的内容

1045
00:35:03,586 --> 00:35:04,576
我想推荐几个会议

1046
00:35:05,396 --> 00:35:06,586
接下来的会议将会

1047
00:35:06,586 --> 00:35:09,006
讨论在 HTTP 在线流媒体播放中的进步

1048
00:35:11,936 --> 00:35:13,826
在周五上午 11:00 

1049
00:35:13,826 --> 00:35:15,206
我们还有

1050
00:35:15,206 --> 00:35:15,746
使用 HEIF 和 HEVC 的会议

1051
00:35:17,326 --> 00:35:19,486
我们有一个很棒的视频

1052
00:35:19,486 --> 00:35:21,206
你可以通过它来了解

1053
00:35:21,646 --> 00:35:22,406
更多关于 HEIF 图像格式的信息

1054
00:35:23,366 --> 00:35:25,476
谢谢你们今天参加会议

1055
00:35:25,476 --> 00:35:26,676
我们希望在这周

1056
00:35:26,676 --> 00:35:28,226
剩下的时间中

1057
00:35:28,226 --> 00:35:29,156
在研究室和会议中

1058
00:35:29,156 --> 00:35:29,476
回答你们的问题

1059
00:35:29,736 --> 00:35:30,076
谢谢大家
