1
00:00:21,016 --> 00:00:22,806
[掌声]

2
00:00:22,806 --> 00:00:23,406
&gt;&gt; 早上好

3
00:00:27,586 --> 00:00:29,776
欢迎来到227会场的主题会议

4
00:00:29,776 --> 00:00:30,926
通过拖放传输数据

5
00:00:31,556 --> 00:00:33,196
我是 Dave Rahardja

6
00:00:33,196 --> 00:00:34,446
今天

7
00:00:34,446 --> 00:00:35,636
我和同事 Tanu 来给大家讲解

8
00:00:35,636 --> 00:00:36,476
她将给大家做演示

9
00:00:40,406 --> 00:00:41,596
如果大家一直在关注

10
00:00:41,596 --> 00:00:43,106
我们的拖放主题会议

11
00:00:43,106 --> 00:00:44,886
那么这张图表

12
00:00:44,886 --> 00:00:46,146
对你来说肯定非常

13
00:00:46,386 --> 00:00:46,656
熟悉

14
00:00:47,476 --> 00:00:48,886
在这次会议中

15
00:00:48,886 --> 00:00:50,636
我们将重点讨论图表上的这一部分

16
00:00:50,636 --> 00:00:53,026
Item Provider

17
00:00:53,706 --> 00:00:55,236
目前 Item Provider

18
00:00:55,236 --> 00:00:57,246
对于使用拖放功能实现

19
00:00:57,246 --> 00:00:58,966
应用之间的数据传输方式来说

20
00:00:58,966 --> 00:00:59,766
是它的关键基础

21
00:01:00,656 --> 00:01:02,346
所以 在这次会议中

22
00:01:02,346 --> 00:01:05,066
我们将覆盖四个有关 Item Provider

23
00:01:05,066 --> 00:01:05,606
的主题

24
00:01:05,916 --> 00:01:07,016
我们要谈的是一些

25
00:01:07,016 --> 00:01:07,746
基础内容

26
00:01:08,456 --> 00:01:09,716
包括统一类型的标识符如何

27
00:01:09,716 --> 00:01:11,996
帮助你的 App

28
00:01:11,996 --> 00:01:13,556
与系统中的

29
00:01:13,556 --> 00:01:16,066
其他 App 更加兼容

30
00:01:16,836 --> 00:01:18,416
我们还会谈到如何

31
00:01:18,416 --> 00:01:20,606
创建模型类  让它们真正能够

32
00:01:20,606 --> 00:01:21,916
与拖放功能进行良好结合

33
00:01:23,266 --> 00:01:24,086
最后 我们将以

34
00:01:24,086 --> 00:01:25,626
一些高端主题作为结束

35
00:01:25,626 --> 00:01:27,656
这些主题可以切实改进

36
00:01:27,656 --> 00:01:29,166
我们行业生态中的

37
00:01:29,166 --> 00:01:29,686
App 状况

38
00:01:30,906 --> 00:01:31,806
现在我们就直奔主题

39
00:01:34,176 --> 00:01:35,206
先聊一聊

40
00:01:35,206 --> 00:01:36,766
NSItemProvider 的基本状况

41
00:01:37,256 --> 00:01:38,696
NSItemProvider 是什么

42
00:01:39,756 --> 00:01:43,406
简单来说 一个 NSItemProvider

43
00:01:43,406 --> 00:01:44,226
就是一个数据承诺

44
00:01:46,056 --> 00:01:47,916
所有数据都是根据需要

45
00:01:47,916 --> 00:01:50,616
通过拖放而完成

46
00:01:50,616 --> 00:01:50,996
异步加载的

47
00:01:52,506 --> 00:01:54,996
NSItemProvider 也可以

48
00:01:54,996 --> 00:01:57,306
为你提供数据传输的

49
00:01:57,306 --> 00:01:58,906
进度和取消操作

50
00:02:00,326 --> 00:02:01,736
它广泛应用于

51
00:02:01,736 --> 00:02:02,196
我们的 API 中

52
00:02:02,196 --> 00:02:04,676
当然 也广泛应用于拖放

53
00:02:04,676 --> 00:02:06,886
和 UIPasteConfiguration 当中

54
00:02:07,536 --> 00:02:08,686
我们已经为 UIPasteboard 

55
00:02:08,735 --> 00:02:10,246
新增了 API  这样你就可以

56
00:02:10,246 --> 00:02:12,126
直接使用 NSItemProvider

57
00:02:15,676 --> 00:02:17,306
那么 提供数据或承诺数据

58
00:02:17,306 --> 00:02:18,516
指的是什么呢

59
00:02:19,796 --> 00:02:21,286
向 NSItemProvider 提供数据

60
00:02:21,286 --> 00:02:23,006
其实十分简单

61
00:02:23,886 --> 00:02:25,356
你所要做的就是

62
00:02:25,356 --> 00:02:27,266
创建一个 NSItemProvider

63
00:02:27,266 --> 00:02:29,136
然后 向它传递一个适用的对象

64
00:02:29,586 --> 00:02:31,126
现在 我们有许多

65
00:02:31,326 --> 00:02:33,036
系统提供的分类   

66
00:02:33,036 --> 00:02:35,656
例如字符串中的 UIImage

67
00:02:35,656 --> 00:02:37,466
在它的属性字符串里

68
00:02:37,466 --> 00:02:37,846
就可以这样使用

69
00:02:38,006 --> 00:02:39,246
我们现在来看几张幻灯片

70
00:02:39,246 --> 00:02:40,156
看看通过哪些步骤

71
00:02:40,156 --> 00:02:41,736
能让你的分类以同样的方式

72
00:02:41,736 --> 00:02:41,896
运行

73
00:02:43,576 --> 00:02:46,356
只要你提供数据  它就可以

74
00:02:46,356 --> 00:02:47,546
被接收的应用程序获取

75
00:02:47,546 --> 00:02:49,296
获取形式同样也很简单

76
00:02:49,296 --> 00:02:51,256
它只需要从中调用

77
00:02:51,256 --> 00:02:52,876
itemProvider 上的

78
00:02:52,876 --> 00:02:56,826
loadObject 方法就可以

79
00:02:57,116 --> 00:02:59,956
记住  这种数据传输

80
00:02:59,956 --> 00:03:01,886
是异步的  此外

81
00:02:59,956 --> 00:03:01,886
是异步的  此外

82
00:03:01,886 --> 00:03:03,456
你的 CompletionHandler

83
00:03:03,456 --> 00:03:05,836
将在一个非主队列被调用

84
00:03:06,196 --> 00:03:07,606
所以 如果你要使用接收的数据

85
00:03:07,756 --> 00:03:10,616
更新用户界面

86
00:03:11,246 --> 00:03:12,986
请确定在调用 UIKit 方法之前

87
00:03:12,986 --> 00:03:15,246
你已经调度回到

88
00:03:15,516 --> 00:03:15,956
主队列

89
00:03:15,956 --> 00:03:16,906
你会看到  这种情况

90
00:03:17,006 --> 00:03:18,526
会出现好几次

91
00:03:19,216 --> 00:03:21,376
那么 为了让大家知道

92
00:03:21,376 --> 00:03:23,126
操作 NSItemProviders 多么容易

93
00:03:23,126 --> 00:03:24,576
我们先来看一个演示

94
00:03:24,676 --> 00:03:24,896
有请 Tanu

95
00:03:26,516 --> 00:03:32,776
[掌声]

96
00:03:33,276 --> 00:03:34,346
&gt;&gt; 大家早上好

97
00:03:35,116 --> 00:03:36,436
你们刚刚已经听说了拖放功能

98
00:03:36,436 --> 00:03:38,186
和 NSItemProvider

99
00:03:38,946 --> 00:03:39,866
现在 你们可能想了解

100
00:03:39,866 --> 00:03:41,486
如何把它们应用到

101
00:03:41,486 --> 00:03:42,016
自己的 App 中

102
00:03:42,946 --> 00:03:44,616
我是 Tanu Singhal

103
00:03:44,616 --> 00:03:46,466
我将为大家做一个简单的演示

104
00:03:46,466 --> 00:03:47,806
它将帮助你们初步了解

105
00:03:48,016 --> 00:03:48,946
NSItemProvider

106
00:04:01,556 --> 00:04:03,766
现在 我们有一个 App

107
00:04:03,766 --> 00:04:05,196
它里面有我们产品

108
00:04:05,246 --> 00:04:05,766
的客户名单

109
00:04:05,766 --> 00:04:08,156
现在 我刚遇到其他一些人

110
00:04:08,156 --> 00:04:09,796
他们也有兴趣试试

111
00:04:09,796 --> 00:04:10,646
这款产品

112
00:04:11,156 --> 00:04:12,716
所以 我把他们的名字

113
00:04:12,716 --> 00:04:13,326
添加到提醒事项中

114
00:04:14,506 --> 00:04:16,546
如果我能把名字直接拖放到

115
00:04:16,546 --> 00:04:19,305
我的 App 里 那就太好了

116
00:04:19,815 --> 00:04:20,836
那我们应该怎么操作呢

117
00:04:22,005 --> 00:04:22,736
我们来看一下

118
00:04:22,736 --> 00:04:24,316
这个联系人 App 使用的

119
00:04:24,316 --> 00:04:25,766
的 TableViewController

120
00:04:26,556 --> 00:04:28,716
在我开始输入之前

121
00:04:28,716 --> 00:04:30,496
我希望你们知道

122
00:04:30,496 --> 00:04:31,846
我们已经把这个示例代码

123
00:04:31,846 --> 00:04:32,766
放在了开发者网站上

124
00:04:33,166 --> 00:04:34,316
所以大家不用担心

125
00:04:34,316 --> 00:04:35,716
不需要现在就把所有代码

126
00:04:35,716 --> 00:04:36,166
都抄下来

127
00:04:36,956 --> 00:04:41,096
在 TableViewController 里 我要

128
00:04:41,246 --> 00:04:42,686
添加一个 TableViewDropDelegate

129
00:04:44,036 --> 00:04:45,616
还要对这个委托进行设置

130
00:04:45,726 --> 00:04:49,516
大家可能已经在此前的

131
00:04:49,516 --> 00:04:51,516
会议里听到过

132
00:04:51,516 --> 00:04:52,356
TableViewDropDelegate了

133
00:04:53,046 --> 00:04:54,956
如果没有听说过的话

134
00:04:54,956 --> 00:04:55,316
也不用担心

135
00:04:55,666 --> 00:04:57,636
因为我们现在只需要

136
00:04:57,636 --> 00:04:59,416
执行一种方法  名叫

137
00:04:59,416 --> 00:05:00,956
TableView performDropWith 

138
00:04:59,416 --> 00:05:00,956
TableView performDropWith 

139
00:05:00,956 --> 00:05:01,636
coordinator

140
00:05:02,196 --> 00:05:05,456
在这个方法里

141
00:05:05,456 --> 00:05:08,206
我会对 ItemProvider

142
00:05:08,206 --> 00:05:09,126
提供的拖动项进行迭代

143
00:05:09,496 --> 00:05:10,726
对不起 应该是协调器提供的

144
00:05:10,726 --> 00:05:11,396
拖动项

145
00:05:11,856 --> 00:05:15,536
现在 每个拖动项都有自己的

146
00:05:15,536 --> 00:05:16,426
itemProvider

147
00:05:16,426 --> 00:05:18,796
我们可以测试一下

148
00:05:18,956 --> 00:05:20,786
itemProvider 是否可以加载

149
00:05:20,786 --> 00:05:21,556
某一具体类型的对象

150
00:05:22,466 --> 00:05:23,646
那么 我就来测试

151
00:05:23,646 --> 00:05:25,576
itemProvider 是否可以加载字符串

152
00:05:26,256 --> 00:05:27,696
这样的话  我将调用

153
00:05:27,696 --> 00:05:29,216
canLoadObject 方法

154
00:05:30,246 --> 00:05:32,836
如果它可以加载 

155
00:05:32,836 --> 00:05:34,506
那我就调用 loadObject 方法

156
00:05:34,636 --> 00:05:36,796
然后 这个 loadObject 方法的

157
00:05:36,796 --> 00:05:39,086
completionHandler 将会

158
00:05:39,086 --> 00:05:40,866
给我一个对象 也就是字符串

159
00:05:40,866 --> 00:05:43,146
这样我就可以用它来更新

160
00:05:43,146 --> 00:05:45,226
我的数据模型以及

161
00:05:45,226 --> 00:05:45,476
我的用户界面

162
00:05:46,416 --> 00:05:50,206
需要注意的是

163
00:05:50,206 --> 00:05:51,836
completionHandler 位于

164
00:05:51,836 --> 00:05:52,756
后台线程上

165
00:05:53,496 --> 00:05:55,026
因此 如果你想在你的用户界面上

166
00:05:55,026 --> 00:05:56,456
进行任何更改

167
00:05:56,456 --> 00:05:57,756
你需要回到主线程上

168
00:05:57,756 --> 00:05:58,986
然后再做这样一些

169
00:05:59,026 --> 00:05:59,516
更改

170
00:06:00,316 --> 00:06:03,886
那么 我先来调度我的

171
00:06:03,886 --> 00:06:04,356
主队列

172
00:06:05,226 --> 00:06:06,606
在主线程中 我将

173
00:06:06,976 --> 00:06:09,226
使用字符串对象

174
00:06:09,226 --> 00:06:10,726
把它插入到 TableView 中

175
00:06:11,936 --> 00:06:13,536
这个代码现在可以运行了

176
00:06:17,656 --> 00:06:19,116
再稍等一下

177
00:06:19,816 --> 00:06:22,646
这一次 我可以把一个人的名字

178
00:06:22,646 --> 00:06:24,746
从提醒事项拖出来放到

179
00:06:24,746 --> 00:06:25,886
我的 App 里了 

180
00:06:31,386 --> 00:06:33,466
canLoadObject 和 LoadObject 方法

181
00:06:33,466 --> 00:06:35,116
同样可以应用于

182
00:06:35,166 --> 00:06:36,976
其他的系统类型 例如

183
00:06:36,976 --> 00:06:38,486
带属性的字符串 URL

184
00:06:38,606 --> 00:06:40,116
图像  甚至是颜色

185
00:06:40,196 --> 00:06:42,126
那么 现在大家已经看到

186
00:06:42,186 --> 00:06:44,256
在 itemProvider 里处理

187
00:06:44,256 --> 00:06:46,566
系统对象是有多么简单直接

188
00:06:46,566 --> 00:06:48,616
我建议各位都去

189
00:06:48,686 --> 00:06:50,806
尝试一下这些

190
00:06:50,806 --> 00:06:51,266
API

191
00:06:51,786 --> 00:06:53,556
接下来 Dave 会讲解

192
00:06:53,556 --> 00:06:54,816
进度与取消

193
00:06:58,516 --> 00:07:01,616
[掌声]

194
00:06:58,516 --> 00:07:01,616
[掌声]

195
00:07:02,116 --> 00:07:02,906
&gt;&gt; 谢谢 Tanu

196
00:07:06,736 --> 00:07:08,636
进度与取消  涉及到关于

197
00:07:08,636 --> 00:07:10,196
如何在应用里使用 NSItemProviders

198
00:07:10,196 --> 00:07:10,966
的基础问题

199
00:07:11,196 --> 00:07:12,116
其实十分简单

200
00:07:12,866 --> 00:07:13,936
那我们就来谈谈进度

201
00:07:13,936 --> 00:07:14,676
以及取消

202
00:07:16,096 --> 00:07:18,056
当你使用 NSItemProviders

203
00:07:18,096 --> 00:07:20,936
检索数据时

204
00:07:20,936 --> 00:07:22,926
我们会向你返回一个进度对象

205
00:07:23,536 --> 00:07:25,346
通过它 你就可以在数据传输时

206
00:07:25,346 --> 00:07:27,056
跟踪传输进度

207
00:07:27,276 --> 00:07:30,436
这个进度对象

208
00:07:30,436 --> 00:07:31,596
包含了两个有趣的属性

209
00:07:31,596 --> 00:07:32,726
你可能想了解一下

210
00:07:33,556 --> 00:07:34,676
第一个属性

211
00:07:34,676 --> 00:07:36,386
是 fractionCompleted 属性

212
00:07:36,696 --> 00:07:38,306
它的值为0到1

213
00:07:38,306 --> 00:07:40,116
它会告诉你目前数据的

214
00:07:40,116 --> 00:07:40,706
传输量已经有多少

215
00:07:41,446 --> 00:07:44,156
第二个是 isFinished 属性

216
00:07:44,156 --> 00:07:46,196
它会告诉你

217
00:07:46,196 --> 00:07:47,156
数据传输已经完成

218
00:07:47,156 --> 00:07:48,686
以及传输结果

219
00:07:48,686 --> 00:07:49,456
是否成功

220
00:07:51,286 --> 00:07:53,126
你可以用键值观察

221
00:07:53,126 --> 00:07:55,936
来查看这两个属性

222
00:07:56,196 --> 00:07:58,986
并相应地更新你的用户界面

223
00:07:59,396 --> 00:08:00,896
例如设置自己的

224
00:07:59,396 --> 00:08:00,896
例如设置自己的

225
00:08:00,936 --> 00:08:02,276
进度指示器和

226
00:08:02,276 --> 00:08:03,966
取消按钮

227
00:08:05,296 --> 00:08:07,476
此外 在进度对象中有一个

228
00:08:07,476 --> 00:08:09,006
取消方法

229
00:08:09,006 --> 00:08:10,286
它可以立即取消

230
00:08:10,286 --> 00:08:11,206
数据传输

231
00:08:11,716 --> 00:08:14,536
当你在返回进度对象上

232
00:08:14,746 --> 00:08:16,206
调用取消方法时

233
00:08:16,816 --> 00:08:18,266
你的接收应用

234
00:08:18,266 --> 00:08:20,306
会在 completionHandler 上

235
00:08:20,306 --> 00:08:22,156
接收到一个有错误的回调函数

236
00:08:22,196 --> 00:08:23,926
而不论

237
00:08:23,926 --> 00:08:24,936
源应用程序是否

238
00:08:24,936 --> 00:08:26,806
已经取消

239
00:08:27,086 --> 00:08:27,696
其数据提供行为

240
00:08:30,766 --> 00:08:32,956
你每一次提出加载请求

241
00:08:32,956 --> 00:08:33,876
都会获得一个进度对象

242
00:08:34,436 --> 00:08:36,056
不过 你也可以从 UIDropSession 

243
00:08:36,056 --> 00:08:37,736
获取一个整体进度对象

244
00:08:37,736 --> 00:08:39,916
以便监控和取消

245
00:08:39,916 --> 00:08:42,285
该进度中

246
00:08:42,285 --> 00:08:44,756
所有剩余的

247
00:08:44,806 --> 00:08:46,126
数据传输任务

248
00:08:46,126 --> 00:08:49,716
好 既然我们已经讲过了

249
00:08:49,716 --> 00:08:51,596
基础知识  那么我们再来谈一谈

250
00:08:51,596 --> 00:08:53,156
兼容性的最大化

251
00:08:53,656 --> 00:08:57,506
大家都希望自己的应用

252
00:08:57,786 --> 00:08:59,486
可以尽可能向系统里的

253
00:08:59,486 --> 00:09:01,276
其他更多的应用程序

254
00:08:59,486 --> 00:09:01,276
其他更多的应用程序

255
00:09:01,276 --> 00:09:01,696
提供数据

256
00:09:02,886 --> 00:09:05,466
同时也从尽可能多的

257
00:09:05,466 --> 00:09:06,836
应用程序里接收到点滴汇集的

258
00:09:06,836 --> 00:09:07,046
数据

259
00:09:07,896 --> 00:09:10,836
理解兼容性的最大化途径

260
00:09:10,836 --> 00:09:13,346
关键在于理解

261
00:09:13,346 --> 00:09:15,136
同一类型的

262
00:09:15,136 --> 00:09:15,826
标识符

263
00:09:16,936 --> 00:09:18,306
那么我扼要重述一下

264
00:09:19,466 --> 00:09:22,466
一个 NSItemProvider 代表

265
00:09:22,466 --> 00:09:24,356
用户在不同类之间

266
00:09:24,356 --> 00:09:25,986
拖动的项目

267
00:09:27,006 --> 00:09:29,186
但是 你可以给

268
00:09:29,186 --> 00:09:30,376
用户拖动的

269
00:09:30,376 --> 00:09:32,106
每一个项目

270
00:09:32,106 --> 00:09:33,446
设置多种表示方法

271
00:09:33,446 --> 00:09:35,596
我给大家举个例子

272
00:09:36,666 --> 00:09:37,816
比如说你准备编写一个

273
00:09:37,816 --> 00:09:39,476
矢量绘图程序

274
00:09:40,106 --> 00:09:41,496
你可以提供本地文件格式

275
00:09:41,496 --> 00:09:43,816
以便让你拖动的项目

276
00:09:43,816 --> 00:09:44,766
保持最佳质量

277
00:09:46,126 --> 00:09:47,546
但事实上 你也可能会

278
00:09:47,546 --> 00:09:51,056
将其转换为 PDF PNG

279
00:09:51,056 --> 00:09:53,176
甚至 JPG 格式  这样你就可以

280
00:09:53,176 --> 00:09:55,036
将这个项目拖到各种

281
00:09:55,036 --> 00:09:55,746
目标应用当中

282
00:09:56,016 --> 00:09:59,386
统一类型标识符可以

283
00:09:59,386 --> 00:10:01,666
让你给这些表示方法

284
00:09:59,386 --> 00:10:01,666
让你给这些表示方法

285
00:10:01,796 --> 00:10:02,786
加上特殊字符串的标记

286
00:10:02,786 --> 00:10:05,456
以便识别出你将要

287
00:10:05,456 --> 00:10:07,976
拖动的数据类型

288
00:10:09,576 --> 00:10:11,046
对于本地文件格式

289
00:10:11,046 --> 00:10:12,256
你可以自定义它的字符串

290
00:10:12,256 --> 00:10:12,766
例如

291
00:10:12,766 --> 00:10:14,536
com.yourcompany.vector-drawing

292
00:10:15,786 --> 00:10:17,986
而对于一些常见类型 

293
00:10:18,016 --> 00:10:21,326
例如 PDF 和 PNG 你可以

294
00:10:21,416 --> 00:10:22,976
使用 MobileCoreServices 里

295
00:10:22,976 --> 00:10:28,206
的定义符号来标记它们

296
00:10:28,416 --> 00:10:30,186
现在看来  真正起作用的是精准顺序

297
00:10:30,896 --> 00:10:32,776
你的各种表示方法

298
00:10:32,876 --> 00:10:35,086
它们的登记顺序

299
00:10:35,156 --> 00:10:36,746
应该和你准备向目标提供的

300
00:10:36,746 --> 00:10:38,986
质量要求顺序

301
00:10:38,986 --> 00:10:40,446
相互一致

302
00:10:41,266 --> 00:10:42,766
通常情况下 最高精准度

303
00:10:42,766 --> 00:10:43,916
可以是你的内部数据

304
00:10:43,916 --> 00:10:44,846
表示类型

305
00:10:45,196 --> 00:10:47,886
紧接着的 是下一个高精准度的

306
00:10:47,886 --> 00:10:49,926
普通类型

307
00:10:49,926 --> 00:10:51,426
以此类推

308
00:10:52,016 --> 00:10:55,176
现在  有一个小提示需要大家记住

309
00:10:55,176 --> 00:10:57,046
当你使用类型标识符

310
00:10:57,046 --> 00:10:59,336
来记录自己的表示方法时

311
00:10:59,856 --> 00:11:03,216
要有各种同类型的标识符

312
00:10:59,856 --> 00:11:03,216
要有各种同类型的标识符

313
00:11:03,216 --> 00:11:04,926
它们应当与各种抽象类型

314
00:11:04,926 --> 00:11:06,356
相匹配

315
00:11:06,536 --> 00:11:09,626
例如数据  纯文本

316
00:11:09,656 --> 00:11:10,096
或者图像

317
00:11:11,516 --> 00:11:12,926
不要使用这些方式

318
00:11:13,786 --> 00:11:16,916
而是要使用具体数据类型

319
00:11:17,406 --> 00:11:18,906
它们能帮助你的数据使用者

320
00:11:18,906 --> 00:11:21,476
解译你将要

321
00:11:21,476 --> 00:11:22,486
发送给他们的

322
00:11:22,486 --> 00:11:22,716
字节

323
00:11:23,736 --> 00:11:25,226
那么 我们举个例子

324
00:11:25,226 --> 00:11:26,926
使用 UTF-8 编码的纯文本

325
00:11:27,156 --> 00:11:28,236
而不是纯文本

326
00:11:28,946 --> 00:11:30,556
或者 也可以用 .png 代替

327
00:11:30,556 --> 00:11:32,516
“图像” 这样接收器就可以

328
00:11:32,516 --> 00:11:33,386
解译你的数据

329
00:11:35,716 --> 00:11:37,436
当然 对于大家个人使用的类型标识符

330
00:11:37,436 --> 00:11:38,616
你也可以自由地

331
00:11:38,616 --> 00:11:40,326
界定数据类型和

332
00:11:40,326 --> 00:11:40,996
字节布局

333
00:11:43,576 --> 00:11:46,596
那么 大家已经看到

334
00:11:46,596 --> 00:11:48,536
这些多重表示方法

335
00:11:48,536 --> 00:11:50,196
如何帮助你实现兼容性的最大化

336
00:11:50,906 --> 00:11:52,396
但是你并没有看见

337
00:11:52,536 --> 00:11:54,416
这些类型标识符里有哪一种被用于

338
00:11:54,416 --> 00:11:56,016
我们起初提供的创建 NSItemProviders 的

339
00:11:56,076 --> 00:11:58,126
示例代码中

340
00:11:58,446 --> 00:11:59,636
那么 这是怎样运行起来的呢

341
00:12:01,376 --> 00:12:04,196
这就是我们要讨论的

342
00:12:04,196 --> 00:12:05,986
创建模型分类

343
00:12:05,986 --> 00:12:07,496
它们利用这两种

344
00:12:07,496 --> 00:12:08,786
多重表示的潜能

345
00:12:08,786 --> 00:12:09,566
来实现兼容

346
00:12:10,416 --> 00:12:12,006
还有  通过使用对象来实现

347
00:12:12,006 --> 00:12:13,516
itemProviders 初始化

348
00:12:13,516 --> 00:12:14,346
的简易性

349
00:12:15,266 --> 00:12:19,366
为了创建可以跟拖放功能

350
00:12:19,366 --> 00:12:21,246
良好结合的模型分类

351
00:12:21,366 --> 00:12:23,676
我们将要谈论两种协议 

352
00:12:24,276 --> 00:12:26,466
它们会帮助你做到

353
00:12:26,466 --> 00:12:26,696
这一点

354
00:12:27,396 --> 00:12:29,556
NSItemProviderReading 和

355
00:12:29,556 --> 00:12:30,806
NSItemProviderWriting

356
00:12:32,036 --> 00:12:32,966
我们先来谈谈

357
00:12:32,966 --> 00:12:33,716
编写协议

358
00:12:34,756 --> 00:12:36,946
NSItemProviderWriting

359
00:12:36,946 --> 00:12:39,546
从你的模型对象中输出数据

360
00:12:40,256 --> 00:12:43,246
而 NSItemProviderReading 则输入数据

361
00:12:43,246 --> 00:12:45,406
并且从一种表示方式中

362
00:12:45,816 --> 00:12:47,226
创建一个模型对象

363
00:12:47,776 --> 00:12:52,336
通过接受这些协议

364
00:12:52,666 --> 00:12:54,716
你可以使用自己的模型对象

365
00:12:54,716 --> 00:12:56,836
而不是UI代码

366
00:12:56,836 --> 00:12:58,446
来保证你的模型对象

367
00:12:58,446 --> 00:13:02,546
与多重表示方法这两者间的

368
00:12:58,446 --> 00:13:02,546
与多重表示方法这两者间的

369
00:13:04,236 --> 00:13:04,706
转换

370
00:13:05,046 --> 00:13:06,216
那么 我们一起看一下

371
00:13:06,216 --> 00:13:07,326
NSItemProviderWriting

372
00:13:07,446 --> 00:13:10,796
这就是它的样子

373
00:13:11,806 --> 00:13:13,476
要想遵循这个协议

374
00:13:13,476 --> 00:13:15,766
你只需运行两个对象

375
00:13:15,766 --> 00:13:16,476
就可以了

376
00:13:17,356 --> 00:13:18,796
第一个就是

377
00:13:18,796 --> 00:13:21,036
writableTypeIdentifiersForItemProvider

378
00:13:21,036 --> 00:13:22,236
属性

379
00:13:23,046 --> 00:13:24,696
这是你可以

380
00:13:24,696 --> 00:13:26,516
按照精准顺序输出的

381
00:13:27,116 --> 00:13:28,046
类型标识符列表

382
00:13:28,466 --> 00:13:29,736
首先是最高精准度

383
00:13:30,276 --> 00:13:33,646
然后 是一种 loadData 方法

384
00:13:34,706 --> 00:13:35,986
它将使用

385
00:13:35,986 --> 00:13:37,056
其他应用已经

386
00:13:37,056 --> 00:13:38,286
请求过的

387
00:13:38,336 --> 00:13:39,186
类型标识符

388
00:13:39,266 --> 00:13:40,506
这将会调用一个

389
00:13:40,756 --> 00:13:43,216
completionHandler 以及

390
00:13:43,216 --> 00:13:44,256
你所提供的数据  这数据要么

391
00:13:44,256 --> 00:13:47,566
可以使用  要么有错误

392
00:13:47,766 --> 00:13:49,266
通过执行这个协议

393
00:13:49,716 --> 00:13:52,746
UI代码可以变成这样

394
00:13:54,296 --> 00:13:56,526
而我们的框架代码

395
00:13:56,526 --> 00:13:58,626
同时也会为你做出类似的事

396
00:13:59,136 --> 00:14:03,606
好了

397
00:13:59,136 --> 00:14:03,606
好了

398
00:14:03,776 --> 00:14:05,236
我们来看一下

399
00:14:05,236 --> 00:14:05,636
读取协议

400
00:14:06,036 --> 00:14:07,476
当然 读取协议

401
00:14:07,476 --> 00:14:08,896
是问题的另一

402
00:14:08,896 --> 00:14:09,126
方面

403
00:14:09,716 --> 00:14:13,906
它也有两样事情  需要你来

404
00:14:13,906 --> 00:14:14,556
执行

405
00:14:15,436 --> 00:14:17,126
第一个是

406
00:14:17,126 --> 00:14:19,756
按照精准度排序的

407
00:14:19,756 --> 00:14:20,866
可读类型标识符的列表

408
00:14:21,256 --> 00:14:23,386
第二个是

409
00:14:23,386 --> 00:14:26,306
初始化程序

410
00:14:26,306 --> 00:14:28,676
它使用一个 NS 数据块  NS 数据对象  

411
00:14:29,336 --> 00:14:31,316
这个对象应是被用来

412
00:14:32,306 --> 00:14:33,586
初始化你的

413
00:14:33,636 --> 00:14:33,976
对象实例

414
00:14:39,046 --> 00:14:40,526
当你执行这项协议时

415
00:14:40,966 --> 00:14:42,736
UI 代码会变成这样

416
00:14:42,876 --> 00:14:43,866
一个 canLoadObject

417
00:14:44,636 --> 00:14:45,736
你可以将它传输到你的

418
00:14:45,736 --> 00:14:46,566
矢量绘图对象上

419
00:14:47,586 --> 00:14:48,936
当你调用 loadObject 时

420
00:14:48,936 --> 00:14:51,406
我们的框架代码

421
00:14:51,406 --> 00:14:53,916
将会匹配来自

422
00:14:53,996 --> 00:14:55,286
提供方和使用方的

423
00:14:55,286 --> 00:14:56,486
两列类型标识符

424
00:14:56,996 --> 00:14:59,306
为了寻找最佳匹配

425
00:14:59,306 --> 00:15:00,886
以期保证能够使用

426
00:14:59,306 --> 00:15:00,886
以期保证能够使用

427
00:15:00,886 --> 00:15:02,116
最高质量的信息 

428
00:15:02,116 --> 00:15:03,046
来创建你的对象实例

429
00:15:04,446 --> 00:15:07,096
简而言之 为了创建

430
00:15:07,096 --> 00:15:08,846
能与拖放功能良好结合的

431
00:15:08,846 --> 00:15:10,926
模型分类  你应该创建

432
00:15:11,106 --> 00:15:13,646
这些分类应该遵循

433
00:15:13,696 --> 00:15:15,886
NSItemProvider 读取和

434
00:15:15,886 --> 00:15:16,846
编写协议

435
00:15:17,816 --> 00:15:18,976
因为这些都是 Objective-C

436
00:15:18,976 --> 00:15:20,916
协议 你的模型分类

437
00:15:20,916 --> 00:15:22,306
应该也是从

438
00:15:22,306 --> 00:15:22,866
NSObject 承继而来

439
00:15:23,286 --> 00:15:25,886
当你这样操作的时候

440
00:15:25,886 --> 00:15:27,486
你可以在任何支持

441
00:15:27,486 --> 00:15:29,556
NSItemProvider 的程序里

442
00:15:29,556 --> 00:15:31,886
使用你的分类和对象

443
00:15:32,006 --> 00:15:34,526
包括拖放  UIPasteConfiguration 以及

444
00:15:34,526 --> 00:15:35,826
新增了API的

445
00:15:36,176 --> 00:15:37,026
UIPasteboardUIPasteboard

446
00:15:38,406 --> 00:15:39,726
因此 为了向大家展示

447
00:15:39,726 --> 00:15:41,496
如何在代码中实现这一点

448
00:15:41,746 --> 00:15:42,556
我将有请 Tanu 再次进行演示

449
00:15:45,516 --> 00:15:48,576
[掌声]

450
00:15:49,076 --> 00:15:49,806
&gt;&gt;  大家好  我又来了

451
00:15:50,776 --> 00:15:52,296
在上一个演示中 我们了解到

452
00:15:52,296 --> 00:15:54,296
如何加载简单的系统对象

453
00:15:54,296 --> 00:15:54,926
比如字符串

454
00:15:55,606 --> 00:15:57,966
现在 我们来看看

455
00:15:57,966 --> 00:15:59,886
怎样把一张复杂的名片

456
00:15:59,886 --> 00:16:02,176
从联系人 App 拖到

457
00:15:59,886 --> 00:16:02,176
从联系人 App 拖到

458
00:16:02,176 --> 00:16:02,916
我们自己的 App 里

459
00:16:07,626 --> 00:16:09,756
为了实现这个操作 我已经创建了一个分类

460
00:16:10,186 --> 00:16:11,376
叫作 ContactCard

461
00:16:12,266 --> 00:16:13,736
它包含联系人的姓名

462
00:16:13,736 --> 00:16:15,436
电话号码以及照片

463
00:16:15,436 --> 00:16:18,486
现在 我将回到

464
00:16:18,486 --> 00:16:20,016
TableViewController

465
00:16:20,296 --> 00:16:22,076
这是我们之前运行的

466
00:16:22,076 --> 00:16:23,586
performDrop方法

467
00:16:24,756 --> 00:16:26,716
我们上次演示的是

468
00:16:26,716 --> 00:16:27,556
加载字符串

469
00:16:28,186 --> 00:16:30,336
而这次 我们想要

470
00:16:30,336 --> 00:16:30,736
加载一张联系人名片

471
00:16:31,686 --> 00:16:33,496
所以 我将用 ContactCard

472
00:16:33,576 --> 00:16:35,806
代替所有 NSString 中的实例

473
00:16:40,196 --> 00:16:41,596
因为我们请求的是

474
00:16:41,596 --> 00:16:43,166
一张联系人名片

475
00:16:43,166 --> 00:16:44,896
所以 completionHandler 将会直接

476
00:16:44,896 --> 00:16:46,706
给我一个联系人名片对象

477
00:16:46,706 --> 00:16:49,286
我就可以把它

478
00:16:49,286 --> 00:16:50,276
插入到我的 TableView 里

479
00:16:50,276 --> 00:16:52,926
那么 这个本来是应该奏效

480
00:16:52,926 --> 00:16:53,256
对不对

481
00:16:53,966 --> 00:16:55,376
但是现在出现了错误

482
00:16:55,466 --> 00:16:57,336
原因在于 

483
00:16:57,336 --> 00:16:59,066
NSItemProvider 没有识别出

484
00:16:59,066 --> 00:17:00,896
我的 ContactCard 分类

485
00:16:59,066 --> 00:17:00,896
我的 ContactCard 分类

486
00:17:01,356 --> 00:17:03,326
所以 我们需要再做

487
00:17:03,326 --> 00:17:04,195
一小点工作来

488
00:17:04,195 --> 00:17:05,386
达到 NSItemProvider 的要求

489
00:17:05,445 --> 00:17:08,596
我们再看看

490
00:17:08,596 --> 00:17:09,126
ContactCard 分类

491
00:17:09,126 --> 00:17:12,086
我在这里将要执行

492
00:17:12,146 --> 00:17:14,016
NSItemProviderReading

493
00:17:14,016 --> 00:17:14,576
协议

494
00:17:15,276 --> 00:17:16,136
这个操作将会告诉

495
00:17:16,136 --> 00:17:18,455
NSItemProvider  我可以

496
00:17:18,455 --> 00:17:19,736
读取它提供的数据

497
00:17:21,215 --> 00:17:24,056
现在 我需要指定我可以

498
00:17:24,215 --> 00:17:26,026
读取的标识符类别

499
00:17:26,506 --> 00:17:29,306
我的 ContactCard 分类

500
00:17:29,306 --> 00:17:31,626
要么可读取 vCard

501
00:17:31,686 --> 00:17:33,056
要么可读取纯文本

502
00:17:33,366 --> 00:17:34,956
但是注意 这些需要

503
00:17:35,026 --> 00:17:37,536
按照精准程度的降序先后

504
00:17:37,576 --> 00:17:38,086
而确定

505
00:17:38,936 --> 00:17:40,576
如果我们把纯文本确定为首选

506
00:17:40,686 --> 00:17:43,006
那我们总是会

507
00:17:43,006 --> 00:17:44,366
回调出纯文本

508
00:17:44,866 --> 00:17:46,796
哪怕有更复杂的vCard类

509
00:17:46,796 --> 00:17:47,546
可用

510
00:17:48,016 --> 00:17:50,656
所以 当我们指定了

511
00:17:50,656 --> 00:17:52,916
我们可读取的类型以后

512
00:17:53,036 --> 00:17:55,616
我们将创建一个初始化器 通过它

513
00:17:55,616 --> 00:17:56,926
我们真正能够从 itemProvider 里

514
00:17:57,036 --> 00:17:58,166
读取数据

515
00:17:58,166 --> 00:18:01,196
类型标识符是

516
00:17:58,166 --> 00:18:01,196
类型标识符是

517
00:18:01,246 --> 00:18:02,226
这个初始化器的

518
00:18:02,266 --> 00:18:03,256
参数之一

519
00:18:04,046 --> 00:18:06,036
我可以通过它来弄清楚

520
00:18:06,386 --> 00:18:08,126
我收到的数据是哪种类型

521
00:18:08,556 --> 00:18:11,156
如果我拿到的是 vCard

522
00:18:11,206 --> 00:18:12,936
我将运用辅助方法来

523
00:18:12,936 --> 00:18:14,246
设置手机号码 照片以及

524
00:18:14,246 --> 00:18:15,516
其他所有我需要的信息

525
00:18:15,516 --> 00:18:17,616
如果我只拿到纯文本

526
00:18:18,076 --> 00:18:19,376
那么我将给联系人卡片

527
00:18:19,376 --> 00:18:20,236
设置姓名

528
00:18:21,586 --> 00:18:24,376
现在 当我们运行它时

529
00:18:24,446 --> 00:18:25,576
这些错误都得到了解决

530
00:18:26,296 --> 00:18:26,926
这是因为

531
00:18:26,926 --> 00:18:29,206
NSItemProvider 现在读懂了

532
00:18:29,206 --> 00:18:29,926
我们的分类

533
00:18:30,506 --> 00:18:33,656
那么这次 我可以从右侧的

534
00:18:33,656 --> 00:18:35,056
通讯录中拖出一个姓名

535
00:18:35,056 --> 00:18:37,196
加以命名  

536
00:18:37,196 --> 00:18:37,306
再放到我的 App 里

537
00:18:38,116 --> 00:18:40,416
大家可以看见 我们载入了

538
00:18:40,416 --> 00:18:41,926
这个联系人的姓名、电话

539
00:18:41,926 --> 00:18:43,406
以及照片

540
00:18:44,026 --> 00:18:47,316
注意 我们仍可以再次

541
00:18:47,316 --> 00:18:50,296
从提醒事项等 App 里

542
00:18:50,356 --> 00:18:51,776
拖出纯文本  像是从备忘录 App 里拖出来一样

543
00:18:52,526 --> 00:18:54,246
这能够管用

544
00:18:54,836 --> 00:18:56,836
是因为我们的 ContactCard 类

545
00:18:56,836 --> 00:18:58,446
不仅可以处理 vCard

546
00:18:58,496 --> 00:18:59,496
还可以处理纯文本

547
00:18:59,706 --> 00:19:01,726
这是我们想要的结果

548
00:18:59,706 --> 00:19:01,726
这是我们想要的结果

549
00:19:02,016 --> 00:19:03,396
而且我们的用户非常喜欢

550
00:19:03,436 --> 00:19:03,846
这一功能

551
00:19:04,566 --> 00:19:06,706
但是现在 我们收到了另一个

552
00:19:06,706 --> 00:19:07,176
功能请求

553
00:19:07,856 --> 00:19:09,786
他们希望能够从我们的 App 中

554
00:19:09,786 --> 00:19:12,276
拖出联系人然后再

555
00:19:12,276 --> 00:19:14,926
放到其他的 App 里

556
00:19:15,476 --> 00:19:16,796
为了实现这一功能

557
00:19:17,636 --> 00:19:20,336
我们必须遵循另一协议

558
00:19:20,336 --> 00:19:21,826
协议名称是

559
00:19:21,826 --> 00:19:23,906
NSItemProviderWriting

560
00:19:24,476 --> 00:19:28,166
作为此协议的一部分

561
00:19:28,166 --> 00:19:31,376
我将明确我可以编写的

562
00:19:31,376 --> 00:19:32,116
标识符类型

563
00:19:33,246 --> 00:19:34,866
我的分类可以再编写

564
00:19:34,866 --> 00:19:38,366
vCard 或纯文本

565
00:19:38,366 --> 00:19:40,756
在这之后 我们需要指定

566
00:19:40,756 --> 00:19:41,796
一个 loadData 方法

567
00:19:41,796 --> 00:19:45,096
在这个方法里 我们将创建出

568
00:19:45,156 --> 00:19:47,506
自己想要提供给 itemProvider

569
00:19:47,506 --> 00:19:48,496
的数据

570
00:19:49,126 --> 00:19:51,466
因此 根据类型标识符

571
00:19:51,466 --> 00:19:52,846
我可以创建出

572
00:19:52,846 --> 00:19:55,326
不同类型的数据 而且

573
00:19:55,326 --> 00:19:56,426
我只需把它传输给

574
00:19:56,426 --> 00:19:57,476
completionHandler

575
00:19:57,996 --> 00:19:59,996
现在 我们已经完成了

576
00:19:59,996 --> 00:20:02,106
NSItemProviderWriting 协议

577
00:19:59,996 --> 00:20:02,106
NSItemProviderWriting 协议

578
00:20:02,106 --> 00:20:03,976
的执行

579
00:20:05,466 --> 00:20:06,876
现在只剩下最后一件事

580
00:20:06,876 --> 00:20:07,126
要做 

581
00:20:07,126 --> 00:20:09,716
我们需要回到

582
00:20:09,716 --> 00:20:12,186
我们的 TableViewController

583
00:20:12,186 --> 00:20:14,316
并告诉 TableView 它可被用来

584
00:20:14,316 --> 00:20:15,546
拖拽出项目

585
00:20:16,526 --> 00:20:19,286
为了实现这一点 我将执行

586
00:20:19,286 --> 00:20:20,606
TableViewDragDelegate

587
00:20:21,256 --> 00:20:23,456
我们还需对这一委托

588
00:20:23,506 --> 00:20:23,986
进行设置

589
00:20:24,536 --> 00:20:27,886
对于这个委托

590
00:20:27,886 --> 00:20:30,186
我们将执行一个名为

591
00:20:30,186 --> 00:20:31,556
itemsForBeginning Session的方法

592
00:20:32,116 --> 00:20:35,676
在该方法中

593
00:20:35,676 --> 00:20:37,096
我将创建一个itemProvider

594
00:20:37,096 --> 00:20:39,586
大家可以看到

595
00:20:39,586 --> 00:20:42,166
我能够把一个 ContactCard 对象

596
00:20:42,236 --> 00:20:44,196
直接传输给 itemProvider 的

597
00:20:44,256 --> 00:20:45,056
初始化器

598
00:20:45,586 --> 00:20:47,646
这之所以可行 仅仅是因为

599
00:20:47,646 --> 00:20:48,666
我们执行了

600
00:20:48,666 --> 00:20:50,356
NSItemProviderWriting 协议

601
00:20:51,686 --> 00:20:53,446
现在 让我们来运行这个代码

602
00:21:02,126 --> 00:21:03,356
我想要在短信里

603
00:21:03,356 --> 00:21:05,186
把一个联系人共享给

604
00:21:05,336 --> 00:21:05,916
我的同事

605
00:21:07,206 --> 00:21:09,606
那么 我就拖出 Dinesh 的

606
00:21:09,606 --> 00:21:11,086
名片并放进去

607
00:21:11,876 --> 00:21:16,456
如你所见 我们可以

608
00:21:16,806 --> 00:21:18,356
发送姓名 电话号码

609
00:21:18,356 --> 00:21:19,316
以及照片

610
00:21:19,676 --> 00:21:20,856
这正是我们想要

611
00:21:20,856 --> 00:21:21,466
实现的效果

612
00:21:21,756 --> 00:21:24,796
现在 我们已经了解到

613
00:21:24,796 --> 00:21:26,326
NSItemProvider 的读取及编写协议

614
00:21:26,326 --> 00:21:30,326
是怎样运用自定义类对象

615
00:21:31,056 --> 00:21:33,556
从而实现数据转移的

616
00:21:35,036 --> 00:21:36,286
这是两个非常强大的协议

617
00:21:36,286 --> 00:21:38,186
我们认为

618
00:21:38,216 --> 00:21:39,806
当你在自己的 App 里

619
00:21:39,806 --> 00:21:41,266
进行拖放时 将会发现

620
00:21:41,266 --> 00:21:41,826
这些协议极其有用

621
00:21:42,416 --> 00:21:44,516
接下来 Dave 将来介绍

622
00:21:44,516 --> 00:21:45,446
一些高阶主题

623
00:21:46,516 --> 00:21:51,956
[掌声]

624
00:21:52,456 --> 00:21:53,176
&gt;&gt; 谢谢 Tanu

625
00:21:54,396 --> 00:21:57,936
太酷了 好

626
00:21:58,066 --> 00:21:59,206
接下来 我们将介绍

627
00:21:59,206 --> 00:22:00,066
一些高阶主题

628
00:21:59,206 --> 00:22:00,066
一些高阶主题

629
00:22:00,426 --> 00:22:01,966
它们只是一些

630
00:22:01,966 --> 00:22:03,586
非常值得了解的信息

631
00:22:03,586 --> 00:22:04,466
如果你想要

632
00:22:04,466 --> 00:22:05,556
改善你的App 以便让它

633
00:22:05,556 --> 00:22:06,946
在拖放环境中显得

634
00:22:06,946 --> 00:22:07,496
出众的话

635
00:22:09,226 --> 00:22:10,056
我们首先要介绍的是

636
00:22:10,056 --> 00:22:11,616
数据编组

637
00:22:12,866 --> 00:22:14,016
当你在 iOS 11 里查看

638
00:22:14,016 --> 00:22:16,706
NSItemProvider API 时

639
00:22:17,266 --> 00:22:18,556
你会发现其中有

640
00:22:18,556 --> 00:22:20,416
三种提供数据的方式

641
00:22:21,546 --> 00:22:23,326
显然 你可以用数据对象的形式

642
00:22:23,326 --> 00:22:24,416
来提供数据

643
00:22:25,406 --> 00:22:27,176
但你也可以采用文件储存里的

644
00:22:27,176 --> 00:22:30,306
文件或文件夹的形式

645
00:22:30,306 --> 00:22:30,776
来提供数据

646
00:22:31,296 --> 00:22:35,126
第三 你可以将数据作为

647
00:22:35,126 --> 00:22:37,296
File Provider 

648
00:22:37,296 --> 00:22:37,796
的引用

649
00:22:38,226 --> 00:22:39,346
我们稍后会进一步

650
00:22:39,346 --> 00:22:39,816
讨论 File Provider

651
00:22:42,316 --> 00:22:45,026
类似地 数据接收器

652
00:22:45,026 --> 00:22:46,756
也有三种不同的

653
00:22:46,756 --> 00:22:47,596
数据检索方式

654
00:22:48,346 --> 00:22:50,526
它们可以将数据复制为

655
00:22:50,526 --> 00:22:51,106
自己的 NSData 对象

656
00:22:52,306 --> 00:22:54,436
可以将文件或文件夹复制到

657
00:22:54,436 --> 00:22:55,326
它们的容器里

658
00:22:55,866 --> 00:22:59,086
还可以尝试在本地

659
00:22:59,086 --> 00:23:00,366
打开相应文件

660
00:22:59,086 --> 00:23:00,366
打开相应文件

661
00:23:02,496 --> 00:23:04,936
所以 有三种方式可以提供数据

662
00:23:04,936 --> 00:23:07,096
也有三种方式去使用数据

663
00:23:07,376 --> 00:23:08,606
你需要做好哪些事情

664
00:23:08,606 --> 00:23:10,286
才能确保数据的流畅传输

665
00:23:10,286 --> 00:23:11,716
并且确保能够

666
00:23:11,716 --> 00:23:12,866
以正确的格式

667
00:23:12,926 --> 00:23:13,266
提供数据

668
00:23:14,716 --> 00:23:15,856
嗯 好消息  你现在

669
00:23:15,856 --> 00:23:16,466
什么也不用做

670
00:23:16,736 --> 00:23:19,296
我们来替你做

671
00:23:19,566 --> 00:23:21,406
数据编组可以确保

672
00:23:21,406 --> 00:23:22,836
数据提供者能够

673
00:23:22,836 --> 00:23:24,196
通过自身感觉

674
00:23:24,196 --> 00:23:26,416
最为便利的方式

675
00:23:26,796 --> 00:23:29,016
来提供和使用信息

676
00:23:29,616 --> 00:23:31,666
如果你提供了一个文件  然后

677
00:23:31,666 --> 00:23:33,536
要把它作为数据来使用

678
00:23:33,536 --> 00:23:34,886
我们就会为你把这份文件

679
00:23:34,886 --> 00:23:35,906
读取为 NSData 对象

680
00:23:36,416 --> 00:23:39,206
如果你提供的是 NSData 并

681
00:23:39,206 --> 00:23:40,656
请求文件副本 我们将把它

682
00:23:40,656 --> 00:23:43,066
写入文件储存并

683
00:23:43,066 --> 00:23:44,226
把你对它的 L 引用发给你

684
00:23:45,156 --> 00:23:47,246
如果你提供的是文件夹

685
00:23:47,246 --> 00:23:49,106
并且请求 NSData 我们将

686
00:23:49,106 --> 00:23:50,276
压缩文件夹内容

687
00:23:50,276 --> 00:23:52,176
然后把压缩文件的

688
00:23:52,206 --> 00:23:52,896
NSData给你

689
00:23:53,426 --> 00:23:56,826
如果你提供

690
00:23:56,826 --> 00:23:59,286
一个 File Provider 的引用

691
00:23:59,286 --> 00:24:02,856
并请求文件副本 我们将

692
00:23:59,286 --> 00:24:02,856
并请求文件副本 我们将

693
00:24:02,856 --> 00:24:03,916
为 File Provider 

694
00:24:03,916 --> 00:24:05,796
调入承诺  并替你

695
00:24:05,796 --> 00:24:05,976
生成副本

696
00:24:10,076 --> 00:24:10,326
好

697
00:24:11,126 --> 00:24:12,906
我们已经了解到

698
00:24:12,906 --> 00:24:14,286
进度和取消是如何

699
00:24:14,286 --> 00:24:14,986
由数据使用者这一方来执行

700
00:24:15,536 --> 00:24:17,036
接下来 我想要简要地谈一下

701
00:24:17,036 --> 00:24:18,026
进度和取消

702
00:24:18,026 --> 00:24:19,926
如何作用于

703
00:24:19,926 --> 00:24:20,616
数据提供者的

704
00:24:21,646 --> 00:24:22,946
现在 我将向你展示

705
00:24:22,946 --> 00:24:23,536
一个代码块

706
00:24:23,846 --> 00:24:25,096
看到这个密集的代码块

707
00:24:25,126 --> 00:24:26,086
别担心

708
00:24:26,086 --> 00:24:27,206
因为我会突出显示

709
00:24:27,206 --> 00:24:28,426
最重要的部分

710
00:24:29,376 --> 00:24:30,966
这是为 NSItemProviderWriting

711
00:24:31,776 --> 00:24:33,426
执行的

712
00:24:33,426 --> 00:24:34,806
loadData

713
00:24:36,156 --> 00:24:38,366
你在这期间将会运用

714
00:24:38,366 --> 00:24:39,466
dataLoader 对象去

715
00:24:39,466 --> 00:24:40,986
递增加载数据

716
00:24:41,486 --> 00:24:44,966
为了提供对进度和

717
00:24:44,966 --> 00:24:47,136
取消功能的支持

718
00:24:47,136 --> 00:24:48,076
你要做的第一件事就是

719
00:24:48,076 --> 00:24:49,256
创建你自己的进度对象

720
00:24:50,296 --> 00:24:51,446
在这个例子中 我们将创建一个

721
00:24:51,446 --> 00:24:53,086
UnitCount 为 100% 的

722
00:24:53,086 --> 00:24:53,606
对象

723
00:24:54,156 --> 00:24:57,046
在这个进度对象上

724
00:24:57,046 --> 00:24:58,686
你可以附加一个 cancellationHandler

725
00:24:58,966 --> 00:25:00,026
当你的数据使用者

726
00:24:58,966 --> 00:25:00,026
当你的数据使用者

727
00:25:00,026 --> 00:25:01,526
要求取消进度对象的实例时

728
00:25:01,646 --> 00:25:03,096
cancellationHandler

729
00:25:03,096 --> 00:25:03,826
将被调用

730
00:25:03,906 --> 00:25:06,656
在这个例子中 我们所做的一切操作

731
00:25:06,656 --> 00:25:08,076
都是在将局部变量

732
00:25:08,076 --> 00:25:10,406
从True设置为 Flase

733
00:25:10,406 --> 00:25:12,596
这会阻止 dataLoader 加载

734
00:25:12,596 --> 00:25:13,226
下一分块

735
00:25:14,166 --> 00:25:17,716
在 dataLoader 进度开展时

736
00:25:17,716 --> 00:25:18,616
你可以在你的进度对象上

737
00:25:18,616 --> 00:25:20,066
更新 completedUnitCount

738
00:25:20,066 --> 00:25:22,186
以便驱动

739
00:25:22,186 --> 00:25:23,216
接收方的

740
00:25:23,216 --> 00:25:23,626
进度指示器

741
00:25:24,666 --> 00:25:25,976
当然 你必须

742
00:25:25,976 --> 00:25:27,376
返回你自己的进度对象

743
00:25:27,946 --> 00:25:30,026
以便我们将其改写到

744
00:25:30,116 --> 00:25:33,416
另一侧

745
00:25:33,626 --> 00:25:33,866
好

746
00:25:33,906 --> 00:25:34,626
现在换个话题

747
00:25:35,066 --> 00:25:36,006
我们另外再谈一些功能

748
00:25:36,006 --> 00:25:40,576
能在你创建成套 App 时

749
00:25:40,576 --> 00:25:43,576
帮你改进数据表示方式

750
00:25:43,576 --> 00:25:45,596
的功能

751
00:25:45,596 --> 00:25:48,046
下面 我们来聊一聊

752
00:25:48,046 --> 00:25:49,576
Per-Representation Visibility

753
00:25:50,076 --> 00:25:51,636
记住 你可以在 

754
00:25:51,636 --> 00:25:53,026
NSItemProvider 里提供

755
00:25:53,026 --> 00:25:54,616
多种数据表示形式

756
00:25:55,726 --> 00:25:57,146
你可以将

757
00:25:57,146 --> 00:25:59,556
每种表示的可见性

758
00:25:59,556 --> 00:26:01,316
限制为仅对你的源应用

759
00:25:59,556 --> 00:26:01,316
限制为仅对你的源应用

760
00:26:01,316 --> 00:26:02,006
可见

761
00:26:02,826 --> 00:26:04,816
它对你组内指定的应用

762
00:26:04,816 --> 00:26:06,966
是可见的

763
00:26:06,966 --> 00:26:08,846
这是在你的应用套件里的情况

764
00:26:08,846 --> 00:26:09,286
或对所有应用都可见

765
00:26:09,816 --> 00:26:12,506
你可以运用这个属性

766
00:26:12,506 --> 00:26:15,986
来隐藏你正在

767
00:26:15,986 --> 00:26:18,116
使用各种版本的应用套件

768
00:26:18,116 --> 00:26:19,406
而迅速累积的

769
00:26:19,406 --> 00:26:19,756
个人类型

770
00:26:20,056 --> 00:26:20,926
因此 你不必担心

771
00:26:20,926 --> 00:26:23,466
第三方会将你的数据

772
00:26:23,466 --> 00:26:24,846
序列化至磁盘上

773
00:26:25,336 --> 00:26:29,586
以此类推 你在

774
00:26:29,756 --> 00:26:30,956
NSItemProvider 上

775
00:26:31,056 --> 00:26:31,836
有一个 teamData 属性

776
00:26:32,656 --> 00:26:35,396
这是一个8千字节的数据块

777
00:26:35,396 --> 00:26:37,176
你可以通过一个

778
00:26:37,176 --> 00:26:38,866
NSItemProvider 将它附加

779
00:26:39,186 --> 00:26:40,896
它们只对你组内

780
00:26:40,896 --> 00:26:42,416
的其他应用可见

781
00:26:43,596 --> 00:26:45,706
你可以运用这一点

782
00:26:45,706 --> 00:26:46,916
用你自己认为合适的方式  在拖动过程中

783
00:26:47,206 --> 00:26:48,226
改良你的 UI

784
00:26:48,316 --> 00:26:50,016
这是元数据

785
00:26:50,016 --> 00:26:51,556
它甚至在用户抬手示意之前

786
00:26:51,556 --> 00:26:52,326
就可以被检索到

787
00:26:56,016 --> 00:26:56,586
好

788
00:26:56,956 --> 00:26:58,286
在 NSItemProvider 上

789
00:26:58,316 --> 00:27:00,246
有一个 suggestedName 属性

790
00:26:58,316 --> 00:27:00,246
有一个 suggestedName 属性

791
00:27:01,426 --> 00:27:02,916
如果你给 suggestedName

792
00:27:02,916 --> 00:27:04,926
提供一个字符串  我们会

793
00:27:04,926 --> 00:27:06,116
在检索器把你的数据

794
00:27:06,116 --> 00:27:08,646
写入磁盘时  把这个字符串用作

795
00:27:08,946 --> 00:27:09,576
文件名

796
00:27:10,596 --> 00:27:11,986
当然  你在提供 NSData 的

797
00:27:11,986 --> 00:27:13,076
时候  这一点也就

798
00:27:13,076 --> 00:27:13,416
格外有用

799
00:27:17,496 --> 00:27:18,836
我想介绍的

800
00:27:18,836 --> 00:27:20,706
最后一个属性

801
00:27:21,006 --> 00:27:22,436
是 preferredPresentationSize

802
00:27:23,186 --> 00:27:26,906
这是一个 CG 规格大小的属性

803
00:27:26,906 --> 00:27:28,646
你可以通过它来

804
00:27:28,916 --> 00:27:31,126
提示接收者

805
00:27:31,126 --> 00:27:32,446
你的表示形式在展开过后

806
00:27:32,446 --> 00:27:34,096
的规格大小

807
00:27:34,736 --> 00:27:36,326
例如 通过邮件 App 对

808
00:27:36,326 --> 00:27:38,946
这一属性的运用

809
00:27:38,946 --> 00:27:40,626
图片可以被拖进邮件撰写表单

810
00:27:40,626 --> 00:27:42,876
拖进目的地布局  这一切甚至在

811
00:27:42,876 --> 00:27:43,616
数据到达前就已发生

812
00:27:47,676 --> 00:27:49,016
最后 我将聊一聊

813
00:27:49,016 --> 00:27:50,546
File Provider

814
00:27:51,076 --> 00:27:52,556
File Provider 本身就是

815
00:27:52,556 --> 00:27:53,626
另一个完整的主题

816
00:27:54,456 --> 00:27:57,046
但我们也可以做出下述的

817
00:27:57,046 --> 00:27:57,746
简要概括

818
00:27:58,246 --> 00:27:59,596
File Provider是一个

819
00:27:59,596 --> 00:28:00,116
应用扩展

820
00:27:59,596 --> 00:28:00,116
应用扩展

821
00:28:00,646 --> 00:28:03,576
举个例子 

822
00:28:03,576 --> 00:28:05,196
这一应用扩展

823
00:28:05,196 --> 00:28:06,906
能够允许数据通过

824
00:28:06,906 --> 00:28:08,486
网络下载而传送

825
00:28:08,486 --> 00:28:10,156
即使你的主应用已被终止

826
00:28:11,416 --> 00:28:14,066
对于操作时间较长的拖拽而言

827
00:28:14,066 --> 00:28:15,126
这一点特别有用

828
00:28:15,236 --> 00:28:17,886
因为当用户在等待下载时

829
00:28:17,886 --> 00:28:19,686
他们可能会

830
00:28:19,686 --> 00:28:21,486
从你的 App 引导到别的地方

831
00:28:21,696 --> 00:28:23,566
而你的 App 可能会被终止

832
00:28:25,336 --> 00:28:28,196
如果你向某个 File Provider 容器里

833
00:28:28,196 --> 00:28:29,356
的某个文件提供

834
00:28:29,356 --> 00:28:31,956
一个 URL

835
00:28:31,956 --> 00:28:33,456
File Provider 扩展将继续执行

836
00:28:33,456 --> 00:28:35,376
数据传送请求

837
00:28:35,376 --> 00:28:36,886
即使你的 UI 引用

838
00:28:36,886 --> 00:28:37,426
已被终止

839
00:28:37,906 --> 00:28:39,226
这增加了

840
00:28:39,226 --> 00:28:40,196
你的数据得以成功

841
00:28:40,196 --> 00:28:41,196
传送的几率

842
00:28:41,746 --> 00:28:45,906
除此之外 如果你

843
00:28:46,226 --> 00:28:47,446
创建的 File Provider

844
00:28:47,446 --> 00:28:49,246
出现在文件的应用里

845
00:28:49,626 --> 00:28:51,366
我们将允许你拖放

846
00:28:51,366 --> 00:28:52,856
可以在本地打开的

847
00:28:52,856 --> 00:28:53,236
URL

848
00:28:53,736 --> 00:28:54,836
这就意味着

849
00:28:54,836 --> 00:28:57,086
多个应用可以访问同一文件  

850
00:28:57,086 --> 00:28:58,896
而不是各自获取

851
00:28:58,896 --> 00:28:59,566
它的副本

852
00:29:01,416 --> 00:29:02,436
接下来的两个议程

853
00:29:02,436 --> 00:29:03,806
将提供一些

854
00:29:03,806 --> 00:29:04,936
非常棒的信息

855
00:29:05,986 --> 00:29:06,966
如果你们对在拖放环境中

856
00:29:06,966 --> 00:29:08,346
提供 File Provider

857
00:29:08,346 --> 00:29:09,486
感兴趣的话

858
00:29:09,486 --> 00:29:11,636
我强烈建议

859
00:29:12,076 --> 00:29:14,566
大家去参加

860
00:29:14,746 --> 00:29:15,046
好

861
00:29:16,596 --> 00:29:17,866
接下来 我们再看一下

862
00:29:17,866 --> 00:29:18,996
在拖放过程中我们可以

863
00:29:18,996 --> 00:29:20,546
对文件进行怎样的操作

864
00:29:20,546 --> 00:29:20,976
Tanu 可以再次演示一下

865
00:29:21,516 --> 00:29:25,996
[掌声]

866
00:29:26,496 --> 00:29:27,246
&gt;&gt; 希望大家已经准备好观看

867
00:29:27,246 --> 00:29:28,006
下一个演示了

868
00:29:28,736 --> 00:29:30,976
在先前的演示中我们看到

869
00:29:30,976 --> 00:29:32,606
如何拖放简单的

870
00:29:32,656 --> 00:29:34,196
系统对象 以及

871
00:29:34,276 --> 00:29:35,526
自定义类对象

872
00:29:36,206 --> 00:29:38,026
现在 让我们来看看应该怎样处理

873
00:29:38,116 --> 00:29:38,566
文件

874
00:29:38,866 --> 00:29:40,856
我们将再一次查看我们

875
00:29:40,856 --> 00:29:41,266
客户的 App

876
00:29:41,266 --> 00:29:43,676
对于有些听众  今天

877
00:29:43,676 --> 00:29:45,796
我们要说说附加数据

878
00:29:46,976 --> 00:29:48,416
例如 Adam 我们知道

879
00:29:48,486 --> 00:29:49,646
他买了哪些产品

880
00:29:49,906 --> 00:29:52,586
现在 我想要把这个文件

881
00:29:52,586 --> 00:29:55,416
拖拽到另一个 App 中

882
00:29:55,416 --> 00:29:56,736
并有可能在那个 App 里编辑这份文件

883
00:29:57,976 --> 00:30:00,666
为了实现这一点 我将

884
00:29:57,976 --> 00:30:00,666
为了实现这一点 我将

885
00:30:00,666 --> 00:30:02,796
在我的客户 App 里

886
00:30:02,796 --> 00:30:03,946
查看 ContactDetailsViewController

887
00:30:04,286 --> 00:30:09,696
在这儿 我们要把一个

888
00:30:09,696 --> 00:30:12,156
拖动交互添加到

889
00:30:12,156 --> 00:30:13,496
我们刚刚看到的附件图片上

890
00:30:15,136 --> 00:30:17,386
我们还要再执行一下这里的

891
00:30:17,386 --> 00:30:18,426
拖动交互委托

892
00:30:18,426 --> 00:30:19,806
因为我们已经将

893
00:30:19,806 --> 00:30:20,836
委托设置为 self

894
00:30:22,136 --> 00:30:23,426
你们可能在之前的会议上

895
00:30:23,426 --> 00:30:24,816
已经听说过

896
00:30:24,846 --> 00:30:25,326
拖动交互委托

897
00:30:26,156 --> 00:30:27,316
如果你有兴趣了解

898
00:30:27,316 --> 00:30:28,756
更多关于这一委托的信息

899
00:30:28,756 --> 00:30:30,596
我建议你去观看

900
00:30:30,596 --> 00:30:32,536
213号会议的视频

901
00:30:32,536 --> 00:30:33,516
它的主题是如何掌握拖放功能

902
00:30:33,586 --> 00:30:35,726
不过在本次演示中

903
00:30:35,726 --> 00:30:37,516
我们只准备介绍一种方法  

904
00:30:37,676 --> 00:30:39,356
它的名称是 itemsForBeginning

905
00:30:39,416 --> 00:30:39,886
session

906
00:30:40,436 --> 00:30:44,066
在这个方法中 我们将创建

907
00:30:44,066 --> 00:30:47,046
一个新的 itemProvider 并且

908
00:30:47,256 --> 00:30:50,316
在这个 itemProvider 上调用

909
00:30:50,476 --> 00:30:50,676
一个名为 registerFileRepresentation

910
00:30:50,676 --> 00:30:52,346
的方法

911
00:30:52,606 --> 00:30:54,766
这个方法包含了四个

912
00:30:54,816 --> 00:30:55,396
参数

913
00:30:56,126 --> 00:30:58,176
第一个是

914
00:30:58,176 --> 00:30:58,796
类型标识符

915
00:30:58,796 --> 00:31:01,136
我们的附件实际上是

916
00:30:58,796 --> 00:31:01,136
我们的附件实际上是

917
00:31:01,136 --> 00:31:01,676
一张图片

918
00:31:01,676 --> 00:31:03,576
所以 我已经将类型标识符设为

919
00:31:03,666 --> 00:31:04,336
JPEG

920
00:31:05,446 --> 00:31:07,176
第二个参数是

921
00:31:07,176 --> 00:31:07,766
文件选项

922
00:31:08,576 --> 00:31:10,786
它可以用于确定

923
00:31:10,786 --> 00:31:12,756
我们是想让其他 App

924
00:31:12,756 --> 00:31:14,956
在本地打开我们的文件 还是

925
00:31:14,956 --> 00:31:15,856
让它们对文件进行复制

926
00:31:15,856 --> 00:31:17,986
我们想让其他 App

927
00:31:17,986 --> 00:31:19,716
在本地打开我们的文件 这样可以看到

928
00:31:19,746 --> 00:31:20,496
它们所做的改动

929
00:31:20,496 --> 00:31:23,206
第三个参数是

930
00:31:23,206 --> 00:31:23,896
可见性

931
00:31:24,606 --> 00:31:26,296
它可以设置为对你自己

932
00:31:26,636 --> 00:31:28,236
你的组  或所有的应用可见

933
00:31:28,376 --> 00:31:29,896
我刚才已经设置成对所有应用可见了

934
00:31:30,786 --> 00:31:32,176
最后一个参数

935
00:31:32,176 --> 00:31:33,196
是 completionHandler

936
00:31:33,196 --> 00:31:35,556
我们将把 URL 文件

937
00:31:35,626 --> 00:31:38,026
传递给这个

938
00:31:39,096 --> 00:31:40,586
completionHandler

939
00:31:40,586 --> 00:31:44,146
那么 我们先获取 URL

940
00:31:44,146 --> 00:31:45,896
在这个地方 我有一个

941
00:31:45,896 --> 00:31:48,466
辅助方法可以从 File Provider

942
00:31:48,626 --> 00:31:50,356
获取我的文件的 URL

943
00:31:50,556 --> 00:31:52,946
只有当我在本地打开文件时

944
00:31:53,086 --> 00:31:54,746
才需要使用

945
00:31:54,806 --> 00:31:55,276
File Provider

946
00:31:56,026 --> 00:31:57,646
如果我想要其他 App

947
00:31:57,706 --> 00:31:59,796
复制文件 那就无需使用

948
00:31:59,796 --> 00:32:00,266
File Provider

949
00:31:59,796 --> 00:32:00,266
File Provider

950
00:32:00,266 --> 00:32:01,596
只要提供一个本地URL

951
00:32:01,596 --> 00:32:02,546
就可以了

952
00:32:03,036 --> 00:32:04,756
我们将把这个 URL 传递给

953
00:32:04,756 --> 00:32:06,106
completionHandler

954
00:32:06,106 --> 00:32:10,026
现在 我们的 itemProvider 已设置好了

955
00:32:10,026 --> 00:32:11,826
可以用它来创建

956
00:32:11,826 --> 00:32:12,766
一个拖动项

957
00:32:13,296 --> 00:32:16,336
有了它 这个代码就可以

958
00:32:16,336 --> 00:32:16,746
运行了

959
00:32:23,656 --> 00:32:26,076
所以 我现在可以拖出这个

960
00:32:26,176 --> 00:32:26,606
文件

961
00:32:27,966 --> 00:32:30,436
让我来打开另一个 App

962
00:32:30,736 --> 00:32:31,566
作为拖放的目的地

963
00:32:38,216 --> 00:32:39,726
那么 我们把数据拖出来

964
00:32:40,226 --> 00:32:42,196
再放入一个文档编辑的

965
00:32:42,196 --> 00:32:42,276
APP里

966
00:32:42,996 --> 00:32:45,356
我现在担心

967
00:32:45,356 --> 00:32:46,736
Adam 正从我们的竞品那里

968
00:32:46,736 --> 00:32:47,696
大量购买产品

969
00:32:48,166 --> 00:32:51,176
所以 我要圈出这一点

970
00:32:51,176 --> 00:32:52,226
并且把改动保存下来

971
00:32:52,826 --> 00:32:54,826
由于我们的文档编辑 App

972
00:32:54,826 --> 00:32:56,146
实际上使用了用户 App

973
00:32:56,146 --> 00:32:57,756
提供的 URL

974
00:32:58,546 --> 00:33:00,846
你将看到我们用户的 App

975
00:32:58,546 --> 00:33:00,846
你将看到我们用户的 App

976
00:33:00,846 --> 00:33:02,436
也有了相同的

977
00:33:02,436 --> 00:33:02,506
改动

978
00:33:03,516 --> 00:33:07,336
[掌声]

979
00:33:07,836 --> 00:33:08,806
很高兴你们能喜欢这个功能

980
00:33:10,216 --> 00:33:12,276
现在 我们已经了解了

981
00:33:12,276 --> 00:33:14,366
如何处理系统对象、自定义类对象

982
00:33:14,366 --> 00:33:16,756
以及各种文件

983
00:33:17,946 --> 00:33:19,466
我们有众多类型的 API

984
00:33:19,466 --> 00:33:21,156
供你使用

985
00:33:21,156 --> 00:33:22,566
我们很期待看到

986
00:33:22,726 --> 00:33:23,666
大家如何使用它们

987
00:33:23,896 --> 00:33:25,586
接下来 有请 Dave 做个总结

988
00:33:27,516 --> 00:33:30,896
[掌声]

989
00:33:31,396 --> 00:33:32,516
&gt;&gt; 谢谢 Tanu

990
00:33:34,076 --> 00:33:35,136
好

991
00:33:35,326 --> 00:33:36,266
我们来概括一下

992
00:33:37,736 --> 00:33:39,286
在本次会议中 我们了解到

993
00:33:39,516 --> 00:33:41,666
NSItemProvider 对于

994
00:33:41,786 --> 00:33:43,586
不同应用之间借助拖放功能

995
00:33:43,586 --> 00:33:45,716
而传输数据的方式

996
00:33:46,096 --> 00:33:46,786
起到了何等重要的作用

997
00:33:48,196 --> 00:33:49,326
我们还了解到

998
00:33:49,326 --> 00:33:50,846
多重表示方法怎样能让

999
00:33:50,846 --> 00:33:52,866
你的应用与其他应用

1000
00:33:52,866 --> 00:33:54,206
实现最大限度的

1001
00:33:54,206 --> 00:33:55,026
兼容性

1002
00:33:56,126 --> 00:33:57,936
我们了解到数据是

1003
00:33:57,936 --> 00:34:00,256
怎样以可取消的方式

1004
00:33:57,936 --> 00:34:00,256
怎样以可取消的方式

1005
00:34:00,326 --> 00:34:02,256
来实现规定进度的

1006
00:34:02,256 --> 00:34:02,936
异步传输

1007
00:34:05,316 --> 00:34:06,246
我们还了解到

1008
00:34:06,246 --> 00:34:07,906
NSItemProvider 读取和编写协议

1009
00:34:07,906 --> 00:34:09,426
是怎样让你

1010
00:34:09,426 --> 00:34:11,976
创建能够和拖放 UI 代码

1011
00:34:11,976 --> 00:34:13,966
完美配合的模型类

1012
00:34:14,485 --> 00:34:18,476
以及可见性和teamData

1013
00:34:18,726 --> 00:34:20,716
还有  如何能让你创建

1014
00:34:20,716 --> 00:34:22,255
在拖放过程中

1015
00:34:22,255 --> 00:34:24,906
格外适用的

1016
00:34:26,335 --> 00:34:26,686
应用套件

1017
00:34:26,686 --> 00:34:28,485
最后 我们了解到

1018
00:34:28,485 --> 00:34:30,766
File Provider 是如何

1019
00:34:30,766 --> 00:34:32,985
让你能够通过拖放功能

1020
00:34:32,985 --> 00:34:36,815
最终在本地打开文件

1021
00:34:36,936 --> 00:34:38,235
想要了解更多信息 请访问

1022
00:34:38,235 --> 00:34:39,576
我们的开发者网站

1023
00:34:39,576 --> 00:34:41,226
227号会议

1024
00:34:41,716 --> 00:34:45,366
我强烈建议大家

1025
00:34:45,366 --> 00:34:47,356
参加有关 File Provider 的会议

1026
00:34:47,356 --> 00:34:50,025
就在今明两天

1027
00:34:50,025 --> 00:34:51,196
去了解更多关于怎样

1028
00:34:51,196 --> 00:34:53,025
为你自己的应用创建

1029
00:34:53,025 --> 00:34:53,636
File Provider 的信息

1030
00:34:53,636 --> 00:34:56,036
如果你没有参加

1031
00:34:56,036 --> 00:34:57,806
关于拖放功能的前三场会议

1032
00:34:57,806 --> 00:34:58,986
我强烈建议大家

1033
00:34:58,986 --> 00:34:59,926
观看视频回放

1034
00:35:00,426 --> 00:35:02,606
感谢关注

1035
00:35:02,606 --> 00:35:03,976
祝你们在 WWDC 有所收获
