1
00:00:21,126 --> 00:00:21,806
&gt;&gt; 大家好

2
00:00:22,516 --> 00:00:26,546
[掌声]

3
00:00:27,046 --> 00:00:28,206
我相信你们在

4
00:00:28,206 --> 00:00:29,006
WWDC 已经度过了一段愉快的时光

5
00:00:29,776 --> 00:00:31,216
请允许我做一下自我介绍

6
00:00:31,906 --> 00:00:33,646
我叫 Brett Keating

7
00:00:33,646 --> 00:00:34,896
我将和我的同事 Frank Doepke 一起

8
00:00:34,896 --> 00:00:36,386
向你们介绍

9
00:00:36,386 --> 00:00:38,256
Apple 的 Vision 框架

10
00:00:38,256 --> 00:00:39,836
让我们开始吧

11
00:00:39,836 --> 00:00:42,506
首先我们将会展示

12
00:00:42,506 --> 00:00:43,716
Vision 可以为你们的 App

13
00:00:43,716 --> 00:00:44,266
做些什么

14
00:00:44,746 --> 00:00:45,686
我们会展示一些

15
00:00:45,686 --> 00:00:47,126
视觉示例

16
00:00:47,126 --> 00:00:48,106
其中用到的算法将会在

17
00:00:48,106 --> 00:00:49,016
今年的 Vision 框架中

18
00:00:49,016 --> 00:00:49,766
提供

19
00:00:50,936 --> 00:00:51,976
接下来会由

20
00:00:51,976 --> 00:00:54,636
Frank 介绍

21
00:00:54,636 --> 00:00:56,116
Vision 框架背后的概念

22
00:00:56,116 --> 00:00:57,566
我们为什么要这样设计

23
00:00:57,566 --> 00:00:58,836
以及我们 API 背后的

24
00:00:58,836 --> 00:01:00,696
思维模型是什么样的

25
00:00:58,836 --> 00:01:00,696
思维模型是什么样的

26
00:01:00,796 --> 00:01:02,516
然后我们会进行深入的探讨

27
00:01:02,516 --> 00:01:04,906
研究一个

28
00:01:04,906 --> 00:01:05,446
代码示例

29
00:01:06,006 --> 00:01:08,796
该代码示例结合了

30
00:01:08,796 --> 00:01:09,716
我们的 SDK 中

31
00:01:09,716 --> 00:01:11,386
很多不同的技术

32
00:01:11,496 --> 00:01:14,566
包括 Core Image 和

33
00:01:14,566 --> 00:01:16,406
全新的 Core ML 框架

34
00:01:16,656 --> 00:01:17,516
我们将在今年提供该框架

35
00:01:18,386 --> 00:01:19,926
你可以在框架中放入你的自定义模型

36
00:01:19,926 --> 00:01:21,226
并使用

37
00:01:21,276 --> 00:01:23,746
我们的硬件

38
00:01:24,896 --> 00:01:26,106
进行加速

39
00:01:26,896 --> 00:01:28,716
现在让我们从你可以使用

40
00:01:28,716 --> 00:01:29,326
Vision 做什么开始谈起

41
00:01:30,596 --> 00:01:32,986
首先是

42
00:01:32,986 --> 00:01:33,466
人脸识别

43
00:01:33,466 --> 00:01:35,676
虽然现在我们的 SDK 中

44
00:01:35,676 --> 00:01:37,136
已经提供人脸识别的功能

45
00:01:37,866 --> 00:01:39,126
但在今年的 Vision 框架中

46
00:01:39,126 --> 00:01:40,536
我们将提供

47
00:01:40,536 --> 00:01:41,646
基于深度学习的

48
00:01:41,646 --> 00:01:42,036
人脸识别

49
00:01:43,246 --> 00:01:44,776
你可能已经知道

50
00:01:44,986 --> 00:01:46,006
深度学习

51
00:01:46,496 --> 00:01:47,786
给 Vision 技术的准确性

52
00:01:47,786 --> 00:01:49,916
带来了突破性的改变

53
00:01:49,986 --> 00:01:51,296
人脸识别技术

54
00:01:51,296 --> 00:01:53,386
也不例外

55
00:01:54,136 --> 00:01:54,886
更高的准确性

56
00:01:54,886 --> 00:01:56,086
意味着更少的误报

57
00:01:56,086 --> 00:01:57,686
同时我们

58
00:01:57,686 --> 00:01:58,906
的重调用也会显著地增加

59
00:01:59,326 --> 00:02:01,806
也就是说

60
00:01:59,326 --> 00:02:01,806
也就是说

61
00:02:01,806 --> 00:02:02,796
识别能力会更强

62
00:02:03,286 --> 00:02:04,156
让我们看一下

63
00:02:04,156 --> 00:02:05,986
一些面部的例子

64
00:02:05,986 --> 00:02:07,446
现在使用 Vision 框架

65
00:02:07,446 --> 00:02:08,106
能够进行识别它们

66
00:02:08,936 --> 00:02:10,515
首先我们能够识别

67
00:02:10,515 --> 00:02:11,756
更小的面部

68
00:02:13,936 --> 00:02:15,536
我们能够更好的识别

69
00:02:15,536 --> 00:02:17,066
明显的侧脸

70
00:02:19,516 --> 00:02:21,386
也能够更好的识别

71
00:02:21,846 --> 00:02:23,036
被局部遮挡的脸

72
00:02:23,036 --> 00:02:25,616
遮挡物包括

73
00:02:25,826 --> 00:02:27,276
帽子和眼镜

74
00:02:27,276 --> 00:02:30,506
关于面部的话题

75
00:02:30,506 --> 00:02:33,496
还有一点要谈

76
00:02:33,496 --> 00:02:34,786
在今年新的 Vision 框架中

77
00:02:34,786 --> 00:02:37,006
我们将提供提供人脸特征点识别

78
00:02:37,656 --> 00:02:38,596
什么是人脸特征点呢

79
00:02:39,496 --> 00:02:41,026
它是一系列

80
00:02:41,026 --> 00:02:42,006
我们在面部检测到的点的集合

81
00:02:42,006 --> 00:02:43,696
其中包括眼角

82
00:02:43,696 --> 00:02:45,036
嘴的外廓

83
00:02:45,036 --> 00:02:47,036
和下颏的轮廓

84
00:02:48,316 --> 00:02:50,876
比如说这样

85
00:02:50,876 --> 00:02:53,766
这样

86
00:02:53,766 --> 00:02:54,266
和这样

87
00:02:55,396 --> 00:02:56,946
我们对此感到非常兴奋

88
00:02:56,946 --> 00:02:57,956
我相信会有很多

89
00:02:57,956 --> 00:02:59,056
使用这项技术的

90
00:02:59,056 --> 00:02:59,596
优秀 App 出现

91
00:03:01,996 --> 00:03:03,696
接下来是今年 Vision Framework 中

92
00:03:03,696 --> 00:03:04,776
的另一项新技术

93
00:03:04,776 --> 00:03:05,426
图像配准

94
00:03:06,026 --> 00:03:07,176
如果你不知道图像配准是什么

95
00:03:07,176 --> 00:03:08,546
简单来说

96
00:03:08,876 --> 00:03:11,126
它会根据两张图像中的特征

97
00:03:11,126 --> 00:03:12,226
对两张图像

98
00:03:12,226 --> 00:03:12,876
进行校准

99
00:03:13,496 --> 00:03:15,826
你可以使用该技术

100
00:03:15,826 --> 00:03:17,166
拼接全景

101
00:03:17,286 --> 00:03:18,686
如该例子所示

102
00:03:18,686 --> 00:03:19,726
或进行图像叠加应用

103
00:03:20,536 --> 00:03:22,406
我们有两种不同的技术

104
00:03:22,406 --> 00:03:24,126
一种是仅进行转换

105
00:03:24,126 --> 00:03:24,756
另一种是为你提供更加精确的

106
00:03:24,756 --> 00:03:27,176
完整单应性矩阵

107
00:03:28,656 --> 00:03:31,136
我们也会提供一些

108
00:03:31,136 --> 00:03:32,276
我们 SDK 中已有的技术

109
00:03:32,276 --> 00:03:33,566
现在它们可以通过 CIDetector 界面

110
00:03:33,566 --> 00:03:34,406
获得

111
00:03:34,796 --> 00:03:35,706
我们也将在

112
00:03:35,706 --> 00:03:36,776
Vision API 中提供它们

113
00:03:36,896 --> 00:03:38,766
这些技术包括矩形检测

114
00:03:38,766 --> 00:03:40,516
正如你所见

115
00:03:40,516 --> 00:03:42,296
我们检测出了图片中的标志

116
00:03:43,816 --> 00:03:45,566
在 Vision API 中还有

117
00:03:45,566 --> 00:03:46,776
条形码的

118
00:03:46,776 --> 00:03:50,726
的检测与识别

119
00:03:52,256 --> 00:03:52,376
和文本检测

120
00:03:53,766 --> 00:03:54,866
另一个新技术

121
00:03:55,116 --> 00:03:55,976
在今年的 Vision 框架中

122
00:03:55,976 --> 00:03:56,986
全新呈现的是

123
00:03:56,986 --> 00:03:57,366
目标追踪

124
00:03:58,186 --> 00:04:00,576
你可以使用该技术追踪面部

125
00:03:58,186 --> 00:04:00,576
你可以使用该技术追踪面部

126
00:04:00,576 --> 00:04:01,726
在检测到面部的情况下

127
00:04:01,726 --> 00:04:03,246
你可以将面部的矩形

128
00:04:03,246 --> 00:04:05,186
作为追踪的初始条件

129
00:04:05,186 --> 00:04:06,436
Vision 框架将

130
00:04:06,436 --> 00:04:07,756
在你影片的

131
00:04:08,196 --> 00:04:09,056
余下部分

132
00:04:09,056 --> 00:04:09,446
追踪该矩形

133
00:04:10,246 --> 00:04:12,486
我们可以追踪矩形

134
00:04:12,486 --> 00:04:14,036
你也可以自己决定

135
00:04:14,036 --> 00:04:15,036
初始条件

136
00:04:15,846 --> 00:04:17,426
这是通用模板的含义

137
00:04:17,426 --> 00:04:19,456
比如说如果你

138
00:04:19,456 --> 00:04:21,305
和我一样

139
00:04:21,305 --> 00:04:24,656
用正方形框出这个冲浪选手

140
00:04:24,656 --> 00:04:27,116
接着播放影片

141
00:04:27,116 --> 00:04:27,376
进行追踪

142
00:04:29,336 --> 00:04:30,556
可以看到

143
00:04:30,556 --> 00:04:32,666
大幅度的缩放

144
00:04:32,756 --> 00:04:34,396
和扭曲变形并没有影响追踪

145
00:04:34,396 --> 00:04:35,746
表明该技术较为稳定

146
00:04:39,096 --> 00:04:40,266
另一项激动人心的

147
00:04:41,296 --> 00:04:42,956
今年 Apple SDK 的新技术

148
00:04:42,956 --> 00:04:45,086
是 Core ML

149
00:04:45,086 --> 00:04:46,126
并且你可以将你的 Core ML 模型

150
00:04:46,126 --> 00:04:47,576
直接集成到 Vision 中

151
00:04:48,236 --> 00:04:50,916
正如我所说

152
00:04:50,916 --> 00:04:52,496
机器学习对

153
00:04:52,496 --> 00:04:55,336
计算机视觉做出了很大的贡献

154
00:04:55,336 --> 00:04:57,066
你可以使用 Core ML

155
00:04:57,066 --> 00:04:58,166
如果你想要创建自己的模型

156
00:04:58,166 --> 00:04:58,716
做出自己的解决方案

157
00:04:59,416 --> 00:05:01,246
比如说你可能想要

158
00:04:59,416 --> 00:05:01,246
比如说你可能想要

159
00:05:01,246 --> 00:05:02,476
创建一个婚礼应用

160
00:05:02,986 --> 00:05:06,316
用于识别婚礼中

161
00:05:06,316 --> 00:05:08,006
何时应该举行婚宴

162
00:05:08,006 --> 00:05:08,956
何时

163
00:05:08,956 --> 00:05:09,816
新娘应该

164
00:05:09,816 --> 00:05:10,686
步入走廊

165
00:05:11,416 --> 00:05:12,456
如果你想要训练

166
00:05:12,456 --> 00:05:14,706
自己的模型

167
00:05:14,706 --> 00:05:17,196
并且你有足够的数据进行训练

168
00:05:17,196 --> 00:05:17,476
那你能够这样做

169
00:05:18,556 --> 00:05:20,766
正如我提到的 Core ML

170
00:05:20,766 --> 00:05:22,116
为自定义模型提供本地加速

171
00:05:22,116 --> 00:05:23,206
使它们能够快速运行

172
00:05:23,206 --> 00:05:25,706
Vision 提供了支持这些模型的

173
00:05:25,706 --> 00:05:26,876
成像流水线

174
00:05:26,876 --> 00:05:28,776
因此你不需要

175
00:05:28,776 --> 00:05:30,276
进行任何的重新调节或类似操作

176
00:05:30,276 --> 00:05:31,156
我们将

177
00:05:31,156 --> 00:05:31,586
负责一切

178
00:05:31,586 --> 00:05:33,106
我们知道你的模型需要什么

179
00:05:33,106 --> 00:05:34,476
我们会提供

180
00:05:34,476 --> 00:05:35,626
正确格式的图像

181
00:05:37,596 --> 00:05:38,826
如果你对 Core ML 感兴趣

182
00:05:38,826 --> 00:05:40,396
你可以参加其他一些的会议

183
00:05:40,396 --> 00:05:42,576
下方列出了

184
00:05:42,576 --> 00:05:43,306
研究室的名称

185
00:05:43,866 --> 00:05:45,346
有一场是在明天早上

186
00:05:45,346 --> 00:05:47,356
另一场是在

187
00:05:47,356 --> 00:05:47,986
周五下午

188
00:05:49,446 --> 00:05:51,386
基本上

189
00:05:51,386 --> 00:05:52,346
这些就是 Vision 框架中的

190
00:05:52,346 --> 00:05:52,796
特点

191
00:05:54,236 --> 00:05:56,526
总的来说 Apple 全新的

192
00:05:56,526 --> 00:05:58,306
Vision 框架为计算机视觉问题

193
00:05:58,766 --> 00:06:00,776
提供了高层的设备内解决方案

194
00:05:58,766 --> 00:06:00,776
提供了高层的设备内解决方案

195
00:06:01,306 --> 00:06:02,586
并且仅靠

196
00:06:02,706 --> 00:06:03,756
一个简单的 API 实现

197
00:06:03,756 --> 00:06:06,576
现在让我们稍微具体一点

198
00:06:06,576 --> 00:06:08,266
分析这段叙述

199
00:06:09,276 --> 00:06:10,586
什么是高层的

200
00:06:10,586 --> 00:06:11,186
解决方案

201
00:06:11,896 --> 00:06:14,336
我们不需要你

202
00:06:14,336 --> 00:06:15,556
是计算机视觉专家

203
00:06:15,556 --> 00:06:16,876
才能在你的应用中使用

204
00:06:16,876 --> 00:06:18,066
计算机视觉的神奇功能

205
00:06:18,656 --> 00:06:20,706
你也不想必须了解

206
00:06:20,706 --> 00:06:22,216
要使用的是哪一个

207
00:06:22,216 --> 00:06:23,636
特征探测器

208
00:06:23,636 --> 00:06:25,086
要与什么分类器

209
00:06:25,086 --> 00:06:26,966
或分类器组结合

210
00:06:26,966 --> 00:06:28,366
我们会为你解决这些问题

211
00:06:28,366 --> 00:06:29,196
说实话

212
00:06:29,196 --> 00:06:30,216
你是否想要使用机器学习

213
00:06:30,976 --> 00:06:31,946
如果你是开发人员

214
00:06:32,326 --> 00:06:33,426
你可能会想

215
00:06:33,426 --> 00:06:34,246
我只想要知道面部的位置

216
00:06:35,626 --> 00:06:36,506
因此我们会为你解决

217
00:06:36,506 --> 00:06:37,666
所有复杂的过程

218
00:06:38,926 --> 00:06:42,166
根据你的使用场景

219
00:06:42,166 --> 00:06:43,896
我们会选择使用传统方案

220
00:06:43,896 --> 00:06:45,206
如果你的应用确实需要如此

221
00:06:45,206 --> 00:06:46,846
比如说一些实时应用

222
00:06:46,846 --> 00:06:49,166
或者使用深度学习算法

223
00:06:49,416 --> 00:06:50,176
以获得更高的精确性

224
00:06:50,846 --> 00:06:54,186
我也说到

225
00:06:54,186 --> 00:06:55,666
所有的算法都会在设备内实现

226
00:06:55,666 --> 00:06:58,116
让我们介绍一下

227
00:06:58,116 --> 00:07:00,436
为什么我们希望

228
00:06:58,116 --> 00:07:00,436
为什么我们希望

229
00:07:00,436 --> 00:07:01,916
在设备内进行处理

230
00:07:01,916 --> 00:07:02,906
而不是提供基于云的解决方案

231
00:07:03,396 --> 00:07:05,766
首先这是隐私问题

232
00:07:06,866 --> 00:07:08,836
你们知道

233
00:07:08,836 --> 00:07:11,006
Apple 非常重视隐私

234
00:07:11,006 --> 00:07:12,476
我在 Apple 工作时也非常重视隐私

235
00:07:12,796 --> 00:07:14,136
有时这会增加

236
00:07:14,136 --> 00:07:16,446
工作难度

237
00:07:17,026 --> 00:07:18,056
但将你所有的数据保存在设备中

238
00:07:18,056 --> 00:07:20,156
是保护你用户

239
00:07:20,156 --> 00:07:21,736
数据隐私的

240
00:07:21,736 --> 00:07:22,176
最好方法

241
00:07:24,456 --> 00:07:26,276
此外

242
00:07:26,276 --> 00:07:28,036
基于云的解决方法

243
00:07:28,036 --> 00:07:29,106
会带来相关成本

244
00:07:29,306 --> 00:07:31,616
如果你是开发人员

245
00:07:31,616 --> 00:07:32,796
你可能要为基于云的解决方案

246
00:07:32,796 --> 00:07:33,976
支付使用费

247
00:07:35,316 --> 00:07:37,146
你的用户则必须

248
00:07:37,146 --> 00:07:38,066
将数据转移到云中

249
00:07:39,516 --> 00:07:41,306
因此会增加

250
00:07:41,306 --> 00:07:42,296
开发人员和用户的

251
00:07:42,296 --> 00:07:42,726
成本

252
00:07:42,956 --> 00:07:44,506
而当所有数据都在设备上时

253
00:07:44,506 --> 00:07:45,586
就是免费的

254
00:07:45,816 --> 00:07:50,566
你可以支持实时

255
00:07:50,566 --> 00:07:51,966
使用场景就像

256
00:07:51,966 --> 00:07:52,756
之前我展示的对象追踪例子一样

257
00:07:53,566 --> 00:07:54,616
想象一下

258
00:07:54,616 --> 00:07:55,536
要在影片中追踪某个对象

259
00:07:55,536 --> 00:07:56,416
需要将每一帧上传到云

260
00:07:56,416 --> 00:07:57,926
我不认为

261
00:07:57,926 --> 00:07:58,556
那是个好办法

262
00:07:59,226 --> 00:08:01,456
所以我们通过 Vision 框架

263
00:07:59,226 --> 00:08:01,456
所以我们通过 Vision 框架

264
00:08:01,926 --> 00:08:02,946
提供的是一个

265
00:08:03,226 --> 00:08:03,896
无延迟快速执行的解决方案

266
00:08:04,786 --> 00:08:07,696
我希望你们喜欢我的介绍

267
00:08:08,076 --> 00:08:09,186
现在我们将要

268
00:08:09,186 --> 00:08:12,226
深入一些

269
00:08:12,226 --> 00:08:13,446
探讨 Vision 的概念

270
00:08:13,446 --> 00:08:13,996
我将把

271
00:08:13,996 --> 00:08:15,356
这一部分的展示

272
00:08:15,356 --> 00:08:15,976
交给 Frank

273
00:08:16,516 --> 00:08:19,566
[掌声]

274
00:08:20,066 --> 00:08:20,556
&gt;&gt; 谢谢你 Brett

275
00:08:22,956 --> 00:08:24,406
大家下午好

276
00:08:24,406 --> 00:08:25,466
我叫 Frank Doepke

277
00:08:25,466 --> 00:08:26,996
我将更多的介绍

278
00:08:26,996 --> 00:08:28,876
技术细节

279
00:08:28,876 --> 00:08:29,496
作为 Vision 框架的一部分

280
00:08:29,796 --> 00:08:33,916
所以我们想做的是

281
00:08:33,916 --> 00:08:35,726
当我们想要分析一个图像时

282
00:08:35,916 --> 00:08:37,836
实际上我们想要完成的

283
00:08:37,836 --> 00:08:39,816
主要任务有三个

284
00:08:40,275 --> 00:08:41,416
第一个是询问

285
00:08:41,416 --> 00:08:42,576
找出图像里有什么

286
00:08:42,576 --> 00:08:43,456
和我需要知道的是什么

287
00:08:44,316 --> 00:08:45,356
第二个是处理设备

288
00:08:46,076 --> 00:08:47,166
即完成工作的设备

289
00:08:47,676 --> 00:08:48,956
第三个是结果

290
00:08:48,956 --> 00:08:50,316
至少这是我们

291
00:08:50,316 --> 00:08:51,206
希望的流程

292
00:08:52,106 --> 00:08:54,036
用 Vision 的术语来说

293
00:08:54,036 --> 00:08:56,046
这里的询问就是

294
00:08:56,046 --> 00:08:56,836
请求

295
00:08:57,476 --> 00:08:59,166
我列出了刚才的例子

296
00:08:59,166 --> 00:09:01,016
像条形码检测

297
00:08:59,166 --> 00:09:01,016
像条形码检测

298
00:09:01,016 --> 00:09:03,936
或面部识别

299
00:09:03,936 --> 00:09:07,016
我们都是将请求输入 Request Handler（请求处理器）

300
00:09:07,926 --> 00:09:08,996
在这个例子中

301
00:09:08,996 --> 00:09:10,106
是图像请求

302
00:09:10,176 --> 00:09:11,136
它将处理图像

303
00:09:11,446 --> 00:09:12,576
并为我们完成

304
00:09:12,576 --> 00:09:13,416
所有的工作

305
00:09:14,066 --> 00:09:16,486
结果是我们获得了

306
00:09:16,526 --> 00:09:18,086
被称为观察结果的信息

307
00:09:18,086 --> 00:09:19,446
指的是在这个图像中我们观察到了什么

308
00:09:20,046 --> 00:09:21,666
观察结果取决于

309
00:09:21,666 --> 00:09:22,726
请求的内容

310
00:09:23,006 --> 00:09:24,516
于是我们有了分类的观察结果

311
00:09:24,516 --> 00:09:26,956
或被检测的对象

312
00:09:27,786 --> 00:09:28,986
现在当你想在

313
00:09:28,986 --> 00:09:30,076
该队列中追踪某个对象

314
00:09:30,076 --> 00:09:32,656
如冲浪选手

315
00:09:32,656 --> 00:09:33,466
基本概念是不变的

316
00:09:33,566 --> 00:09:34,796
我们有了询问

317
00:09:34,796 --> 00:09:36,376
处理设备

318
00:09:36,376 --> 00:09:39,096
最终可以获得结果

319
00:09:39,096 --> 00:09:40,826
重申一次  询问就是请求

320
00:09:41,426 --> 00:09:42,936
因为对每一帧

321
00:09:42,936 --> 00:09:44,686
的请求都在变化

322
00:09:44,686 --> 00:09:45,926
图像实际上在随着请求移动

323
00:09:47,736 --> 00:09:48,936
我们的设备

324
00:09:48,936 --> 00:09:49,826
也就是请求处理器

325
00:09:49,826 --> 00:09:52,506
会通过队列请求处理器处理请求

326
00:09:52,506 --> 00:09:54,046
于是我们获得被称作观察结果的结果

327
00:09:54,046 --> 00:09:55,906
它们符合

328
00:09:55,976 --> 00:09:56,546
我们的请求

329
00:09:58,086 --> 00:10:00,866
让我来进一步介绍

330
00:09:58,086 --> 00:10:00,866
让我来进一步介绍

331
00:10:00,866 --> 00:10:02,066
刚刚提到的

332
00:10:02,066 --> 00:10:02,966
两个

333
00:10:02,966 --> 00:10:03,806
图像请求处理器

334
00:10:04,476 --> 00:10:05,606
我们的图像 Request Handler

335
00:10:05,606 --> 00:10:07,666
可以处理

336
00:10:07,666 --> 00:10:09,026
大部分你想要与图像

337
00:10:09,026 --> 00:10:09,736
交互的请求

338
00:10:10,166 --> 00:10:11,386
你想要在一个图像上

339
00:10:11,386 --> 00:10:13,466
完成多个 Vision 任务

340
00:10:13,466 --> 00:10:15,116
有时其实你只做了一个

341
00:10:15,116 --> 00:10:16,566
然后根据结果开始

342
00:10:16,566 --> 00:10:17,926
下一个任务

343
00:10:17,926 --> 00:10:19,016
这就是你想要使用图像 Request Handler

344
00:10:19,016 --> 00:10:19,486
完成的

345
00:10:19,966 --> 00:10:21,296
它将在整个处理过程中

346
00:10:21,296 --> 00:10:22,446
保留图像

347
00:10:22,446 --> 00:10:25,366
因此我们可以

348
00:10:25,396 --> 00:10:26,856
在其中进行

349
00:10:26,856 --> 00:10:28,856
性能优化

350
00:10:28,856 --> 00:10:30,996
通过保留中间产物

351
00:10:31,146 --> 00:10:32,866
让请求的处理速度

352
00:10:32,866 --> 00:10:33,276
加快

353
00:10:34,016 --> 00:10:36,466
另一方面

354
00:10:36,466 --> 00:10:37,726
如果想要追踪某一对象

355
00:10:37,726 --> 00:10:38,816
我们会使用 Sequence Request Handler（队列请求处理器）

356
00:10:39,276 --> 00:10:40,516
Sequence Request Handler

357
00:10:40,516 --> 00:10:42,086
让我们能够

358
00:10:42,186 --> 00:10:42,996
在处理器中

359
00:10:42,996 --> 00:10:43,666
追踪对象

360
00:10:44,316 --> 00:10:46,136
它不会

361
00:10:46,136 --> 00:10:47,466
在处理过程中

362
00:10:47,466 --> 00:10:48,626
保留所有的图像

363
00:10:48,626 --> 00:10:49,326
因此图像会被提前释放

364
00:10:50,056 --> 00:10:51,536
但另一方面  这也意味着

365
00:10:51,776 --> 00:10:53,486
如果你想在同一个图像上完成

366
00:10:53,486 --> 00:10:54,866
多个请求

367
00:10:54,866 --> 00:10:56,146
你将无法

368
00:10:56,146 --> 00:10:56,486
进行优化

369
00:10:57,716 --> 00:10:59,836
所以该功能的代码实现是怎样的呢

370
00:10:59,836 --> 00:11:01,596
作为开发人员

371
00:10:59,836 --> 00:11:01,596
作为开发人员

372
00:11:01,596 --> 00:11:02,526
这是我们想知道的

373
00:11:04,116 --> 00:11:05,606
首先从空白开始

374
00:11:05,606 --> 00:11:07,316
这是我们乐于见到的

375
00:11:07,316 --> 00:11:08,446
然后创建一个请求

376
00:11:08,886 --> 00:11:10,466
在这里

377
00:11:10,466 --> 00:11:12,746
是一个人脸识别请求

378
00:11:13,346 --> 00:11:14,496
现在我们来创建 Request Handler

379
00:11:14,496 --> 00:11:16,546
现在我选择的是

380
00:11:16,546 --> 00:11:17,816
基于文件的 Request Handler

381
00:11:17,816 --> 00:11:19,216
因为磁盘上

382
00:11:19,216 --> 00:11:22,556
有我想要使用的文件

383
00:11:22,556 --> 00:11:24,026
现在我询问 myRequestHandler 

384
00:11:24,026 --> 00:11:25,646
来完成我的请求

385
00:11:25,646 --> 00:11:27,566
在这里

386
00:11:27,566 --> 00:11:29,716
我的数组中只有一个请求

387
00:11:29,716 --> 00:11:32,746
而实际上可以有很多

388
00:11:32,906 --> 00:11:33,836
我得到了我的观察结果

389
00:11:34,996 --> 00:11:36,606
我可以检测到

390
00:11:36,606 --> 00:11:37,266
很多个面部

391
00:11:37,836 --> 00:11:39,216
在此我要强调的一点是

392
00:11:39,216 --> 00:11:42,746
结果会作为

393
00:11:43,006 --> 00:11:45,036
请求的一部分被返回

394
00:11:45,156 --> 00:11:46,076
该请求就是我们

395
00:11:46,076 --> 00:11:46,526
最初创建的

396
00:11:46,526 --> 00:11:49,916
当我们想追踪某物体时

397
00:11:51,076 --> 00:11:52,506
代码又是什么样的呢

398
00:11:52,616 --> 00:11:53,946
我们创建一个

399
00:11:54,966 --> 00:11:55,776
Sequence Request Handler

400
00:11:55,776 --> 00:11:57,026
当然不设置为图像

401
00:11:57,216 --> 00:11:58,236
因为我们需要处理

402
00:11:58,236 --> 00:11:59,656
队列中的每一帧

403
00:12:01,476 --> 00:12:02,326
因此我可以从

404
00:12:02,326 --> 00:12:03,906
先前检测的

405
00:12:03,906 --> 00:12:05,906
观察结果开始

406
00:12:05,956 --> 00:12:07,596
或者我可以自行设置

407
00:12:07,596 --> 00:12:09,276
创建自己的追踪请求

408
00:12:09,826 --> 00:12:12,026
我只需要运行

409
00:12:12,026 --> 00:12:12,596
这个请求

410
00:12:13,246 --> 00:12:15,036
在这里我输入的是

411
00:12:15,036 --> 00:12:17,026
PixelBuffer

412
00:12:17,026 --> 00:12:17,996
就是正在拖动的帧

413
00:12:19,406 --> 00:12:21,176
然后从处理器中

414
00:12:21,176 --> 00:12:21,616
我得到了结果

415
00:12:22,246 --> 00:12:25,246
我们已经说明了

416
00:12:25,246 --> 00:12:26,816
这个 API 是如何结构化的

417
00:12:26,816 --> 00:12:28,426
我想向你们展示

418
00:12:28,426 --> 00:12:30,066
一些优秀的实践事例

419
00:12:30,066 --> 00:12:31,616
让你们知道 Vision

420
00:12:31,616 --> 00:12:33,006
最佳的体验是怎样的

421
00:12:33,666 --> 00:12:37,456
当我们需要完成

422
00:12:37,456 --> 00:12:38,936
一件计算机视觉任务时

423
00:12:38,936 --> 00:12:39,886
你需要考虑几件事情

424
00:12:41,476 --> 00:12:43,216
第一

425
00:12:43,216 --> 00:12:44,586
我想使用哪种图像类型

426
00:12:45,826 --> 00:12:47,876
第二

427
00:12:47,876 --> 00:12:48,746
我要对图像进行哪些处理

428
00:12:50,396 --> 00:12:52,196
第三

429
00:12:52,226 --> 00:12:53,496
我需要或想要什么性能

430
00:12:53,496 --> 00:12:54,346
当然你会想要

431
00:12:54,346 --> 00:12:55,346
最快的

432
00:12:55,346 --> 00:12:56,356
但你必须在许多因素之间

433
00:12:56,356 --> 00:12:56,636
做出折衷

434
00:12:57,026 --> 00:12:59,136
那么让我们讨论一下

435
00:13:00,526 --> 00:13:00,636
图像类型

436
00:13:00,846 --> 00:13:02,346
Vision 支持很多

437
00:13:02,346 --> 00:13:04,196
图像类型

438
00:13:04,196 --> 00:13:06,836
从 CVPixelBuffer 到 CGIImage

439
00:13:06,836 --> 00:13:09,276
甚至还有之前例子中的

440
00:13:09,276 --> 00:13:11,446
NSData

441
00:13:11,446 --> 00:13:12,606
和 NSURL

442
00:13:13,216 --> 00:13:15,776
在下面的几页中

443
00:13:15,886 --> 00:13:17,076
我们会一一展示这些图像类型

444
00:13:17,076 --> 00:13:18,396
让你知道何时选择何种类型

445
00:13:20,556 --> 00:13:22,756
这很多因素决定的

446
00:13:22,756 --> 00:13:23,916
比如你想要做什么

447
00:13:23,916 --> 00:13:25,836
从相机流

448
00:13:25,836 --> 00:13:27,596
或磁盘文件运行是不一样的

449
00:13:28,346 --> 00:13:29,996
你需要确定这一点

450
00:13:30,096 --> 00:13:31,396
因为它决定了

451
00:13:31,396 --> 00:13:32,856
你想要选择何种图像

452
00:13:33,246 --> 00:13:34,536
要记住重要的两点

453
00:13:34,536 --> 00:13:37,576
我们已经在 Vision 框架中

454
00:13:37,666 --> 00:13:39,206
加入图像流水线

455
00:13:39,206 --> 00:13:41,076
你不需要

456
00:13:41,076 --> 00:13:42,006
对图像进行缩放

457
00:13:42,406 --> 00:13:43,616
因此除非

458
00:13:43,616 --> 00:13:44,926
你已经有绝对要使用的

459
00:13:44,926 --> 00:13:45,806
小图像

460
00:13:45,856 --> 00:13:47,136
请不要预先压缩图像

461
00:13:47,246 --> 00:13:50,476
因为这样的话我们就会重复工作

462
00:13:50,666 --> 00:13:52,356
此外  还要注意图像方向

463
00:13:52,526 --> 00:13:54,086
计算机视觉算法大多数时候

464
00:13:54,086 --> 00:13:57,056
(对方向不敏感)

465
00:13:57,056 --> 00:13:59,226
对不起

466
00:13:59,356 --> 00:14:01,176
它们对方向敏感

467
00:13:59,356 --> 00:14:01,176
它们对方向敏感

468
00:14:01,236 --> 00:14:02,576
所以你需要确认传入的图像

469
00:14:03,166 --> 00:14:04,586
这是非常重要的

470
00:14:04,586 --> 00:14:05,676
因为如果你传入了

471
00:14:05,816 --> 00:14:07,206
横向侧放的

472
00:14:07,206 --> 00:14:08,166
肖像图像

473
00:14:08,166 --> 00:14:09,616
我们将无法找到面部

474
00:14:09,616 --> 00:14:10,996
这也是经常发生的

475
00:14:10,996 --> 00:14:11,386
常见错误

476
00:14:12,906 --> 00:14:14,396
让我们来看看

477
00:14:14,396 --> 00:14:14,846
各种图像类型

478
00:14:15,796 --> 00:14:16,696
当你想要完成与流相关的处理时

479
00:14:16,696 --> 00:14:17,866
可以使用

480
00:14:17,866 --> 00:14:18,746
CVPixelBuffer

481
00:14:19,906 --> 00:14:21,956
当你创建 VideoDataOut 时

482
00:14:21,956 --> 00:14:23,206
你会得到

483
00:14:23,286 --> 00:14:24,776
CMSampleBuffers

484
00:14:24,916 --> 00:14:25,806
我们将从中获得你的 

485
00:14:25,866 --> 00:14:26,686
CVPixelBuffers

486
00:14:27,856 --> 00:14:29,456
这也是一个很好的图像格式

487
00:14:29,456 --> 00:14:30,886
如果你已经

488
00:14:30,886 --> 00:14:32,806
将你的原始图像数据如 LGB Pixel

489
00:14:32,806 --> 00:14:34,376
保存在存储器中

490
00:14:34,376 --> 00:14:35,936
将它们打包成为

491
00:14:35,936 --> 00:14:37,276
CVPixelBuffer

492
00:14:37,276 --> 00:14:38,496
这是传入 Vision 很好的格式

493
00:14:40,666 --> 00:14:41,976
如果你从磁盘上获得文件

494
00:14:42,146 --> 00:14:44,046
请使用 URL

495
00:14:44,046 --> 00:14:44,996
如果它来源于网络

496
00:14:44,996 --> 00:14:46,926
请使用 NSData 路径

497
00:14:47,126 --> 00:14:48,886
最棒的是

498
00:14:48,886 --> 00:14:50,796
它让我们能够减少

499
00:14:50,796 --> 00:14:51,936
为你在应用中打印所分配的

500
00:14:51,936 --> 00:14:52,616
内存

501
00:14:53,086 --> 00:14:54,566
Vision 将只会读取

502
00:14:54,566 --> 00:14:56,236
完成任务需要的数据

503
00:14:57,156 --> 00:14:58,256
如果你想要在

504
00:14:58,256 --> 00:14:59,226
6400 万像素的全景中

505
00:14:59,226 --> 00:15:02,376
做人脸识别

506
00:14:59,226 --> 00:15:02,376
做人脸识别

507
00:15:02,376 --> 00:15:03,526
Vision 会真正降低所需内存

508
00:15:03,526 --> 00:15:04,936
它不会将完整文件

509
00:15:04,936 --> 00:15:06,436
读入内存

510
00:15:06,436 --> 00:15:07,466
这一点

511
00:15:07,466 --> 00:15:08,136
要牢记

512
00:15:10,396 --> 00:15:12,006
这个例子中我们会从文件

513
00:15:12,006 --> 00:15:13,336
读取 EXIF Orientation

514
00:15:13,336 --> 00:15:15,336
你也可以重写

515
00:15:15,336 --> 00:15:17,266
如果图像格式

516
00:15:17,266 --> 00:15:18,706
不支持该操作的话

517
00:15:20,666 --> 00:15:22,126
如果你已经在应用中

518
00:15:22,166 --> 00:15:24,076
使用 Core Image

519
00:15:24,076 --> 00:15:25,286
那当然应该传入 CI image

520
00:15:25,286 --> 00:15:27,366
当你想做一些

521
00:15:27,366 --> 00:15:28,096
预处理时

522
00:15:28,096 --> 00:15:28,806
这也非常重要

523
00:15:28,806 --> 00:15:29,786
如果你有专业知识

524
00:15:29,786 --> 00:15:30,946
知道你想在计算机视觉任务

525
00:15:30,946 --> 00:15:33,286
中做什么

526
00:15:33,286 --> 00:15:34,506
你可以做一些预处理

527
00:15:34,506 --> 00:15:35,766
尝试加强图像

528
00:15:35,806 --> 00:15:37,186
这样可以加强

529
00:15:37,186 --> 00:15:37,716
Vision 的结果

530
00:15:39,346 --> 00:15:40,316
如果你想了解更多关于

531
00:15:40,316 --> 00:15:42,706
Core Image 的信息

532
00:15:42,706 --> 00:15:45,006
周四 1:50 有相关会议

533
00:15:45,396 --> 00:15:46,146
他们将展示 Core Image

534
00:15:46,146 --> 00:15:47,836
与 Vision 框架

535
00:15:47,836 --> 00:15:48,286
的集成

536
00:15:48,756 --> 00:15:52,276
最后但同样重要的是

537
00:15:52,276 --> 00:15:54,246
对于你应用界面中的所有图像

538
00:15:54,426 --> 00:15:56,346
你可以使用 CGimage 

539
00:15:56,716 --> 00:15:59,116
转化 NSimage 或 UIimage

540
00:15:59,226 --> 00:16:01,196
它来自

541
00:15:59,226 --> 00:16:01,196
它来自

542
00:16:01,196 --> 00:16:02,906
UIImagePicker

543
00:16:02,976 --> 00:16:03,686
并将它们传入 Vision

544
00:16:03,806 --> 00:16:07,006
如果我想对图像进行操作

545
00:16:07,096 --> 00:16:08,496
现在就要决定

546
00:16:08,496 --> 00:16:10,236
我是否想与图像进行交互

547
00:16:10,236 --> 00:16:11,346
如果想要与其交互

548
00:16:11,426 --> 00:16:13,206
就要使用

549
00:16:13,206 --> 00:16:14,336
Image Request Handler（图像请求处理器）

550
00:16:14,606 --> 00:16:16,226
它会保留图像

551
00:16:16,226 --> 00:16:17,926
让我可以在图像上

552
00:16:17,926 --> 00:16:19,656
做多种操作

553
00:16:19,656 --> 00:16:20,866
获得最好的结果

554
00:16:22,126 --> 00:16:23,426
现在 CVPixelBuffer

555
00:16:23,426 --> 00:16:24,926
在技术上可以允许你

556
00:16:24,926 --> 00:16:26,826
更改输入图像的像素

557
00:16:27,226 --> 00:16:28,216
但我们将图像视作不可变的

558
00:16:28,216 --> 00:16:29,756
因此不要尝试更改

559
00:16:29,756 --> 00:16:30,776
因为如果那样我们会得到

560
00:16:30,776 --> 00:16:31,246
奇怪的结果

561
00:16:31,546 --> 00:16:35,406
那么如果你想追踪

562
00:16:35,606 --> 00:16:36,816
某个对象

563
00:16:36,816 --> 00:16:38,156
我们会使用 Sequence Request Handler

564
00:16:39,636 --> 00:16:40,506
它让我们始终保持

565
00:16:40,506 --> 00:16:42,946
追踪的状态

566
00:16:42,946 --> 00:16:44,676
并且图像与 Request Handler

567
00:16:44,736 --> 00:16:46,256
不再紧密相关

568
00:16:46,296 --> 00:16:47,576
只保留需要追踪的

569
00:16:47,576 --> 00:16:47,976
时间

570
00:16:52,176 --> 00:16:53,976
性能上

571
00:16:53,976 --> 00:16:55,796
这些 Vision 任务经常需要密集计算

572
00:16:55,796 --> 00:16:57,726
很花时间

573
00:16:57,726 --> 00:16:59,056
因此你需要考虑

574
00:16:59,056 --> 00:17:01,486
事实上不在主队列中

575
00:16:59,056 --> 00:17:01,486
事实上不在主队列中

576
00:17:01,486 --> 00:17:03,376
而是换一个其他队列

577
00:17:03,856 --> 00:17:05,465
运行任务

578
00:17:06,616 --> 00:17:08,296
你还要考虑是否要

579
00:17:08,296 --> 00:17:09,376
在后台完成

580
00:17:09,376 --> 00:17:11,086
这可能会有点慢

581
00:17:11,086 --> 00:17:12,356
若要得到更快的性能

582
00:17:12,356 --> 00:17:13,915
你需要使用

583
00:17:14,366 --> 00:17:15,516
交互质量更高的服务

584
00:17:16,596 --> 00:17:19,276
一个很好的例子是使用

585
00:17:19,276 --> 00:17:22,026
Completion Handler

586
00:17:22,056 --> 00:17:23,606
获得结果

587
00:17:23,606 --> 00:17:24,026
它也是我们 API 的一部分

588
00:17:24,026 --> 00:17:26,165
但要记住

589
00:17:26,215 --> 00:17:27,866
Completion Handler 只会获得

590
00:17:27,915 --> 00:17:29,236
触发它的队列

591
00:17:29,236 --> 00:17:30,686
的结果

592
00:17:30,686 --> 00:17:32,576
因此如果你需要

593
00:17:32,576 --> 00:17:33,936
更新 UI

594
00:17:33,936 --> 00:17:34,746
你需要把它派回主队列中

595
00:17:35,426 --> 00:17:38,796
正如 Brett 已经强调的那样

596
00:17:38,796 --> 00:17:40,036
我们有新的人脸识别技术

597
00:17:40,036 --> 00:17:41,206
你可能会说

598
00:17:41,206 --> 00:17:41,706
天哪又来一个

599
00:17:43,946 --> 00:17:45,156
但我们有充足的理由

600
00:17:45,156 --> 00:17:45,446
这么做

601
00:17:45,706 --> 00:17:47,546
Vision 使用深度学习

602
00:17:47,546 --> 00:17:48,976
这让我们获得了

603
00:17:49,186 --> 00:17:50,516
更高的准确度和更多的重调用

604
00:17:50,926 --> 00:17:52,366
因此会有更好的结果

605
00:17:52,916 --> 00:17:55,826
它的缺点在于

606
00:17:55,826 --> 00:17:56,976
在较旧的硬件上

607
00:17:56,976 --> 00:17:57,356
运行速度较慢

608
00:17:57,436 --> 00:17:58,946
让我们看一下

609
00:17:58,946 --> 00:18:01,006
我们提供的

610
00:17:58,946 --> 00:18:01,006
我们提供的

611
00:18:01,006 --> 00:18:01,926
人脸识别的

612
00:18:01,926 --> 00:18:02,476
整体格局

613
00:18:03,236 --> 00:18:04,876
我们有 Vision

614
00:18:04,876 --> 00:18:06,346
它能给我们最好的结果

615
00:18:06,346 --> 00:18:08,736
运行速度很快

616
00:18:08,736 --> 00:18:09,966
能耗也很优秀

617
00:18:09,966 --> 00:18:10,926
因为它专门对此做了优化

618
00:18:11,246 --> 00:18:12,766
我们在除 watchOS 之外

619
00:18:12,766 --> 00:18:14,376
所有平台上提供它

620
00:18:15,446 --> 00:18:16,886
Core Image 

621
00:18:16,886 --> 00:18:18,566
提供情况也相同

622
00:18:18,566 --> 00:18:19,686
它更快

623
00:18:19,686 --> 00:18:21,106
但结果没有 Vision 那么好

624
00:18:21,736 --> 00:18:24,266
在 AV Capture Session 中

625
00:18:24,266 --> 00:18:25,536
我们只在

626
00:18:25,536 --> 00:18:27,016
捕捉的部分

627
00:18:27,016 --> 00:18:28,436
使用了硬件

628
00:18:28,436 --> 00:18:30,176
所以运行的很快

629
00:18:30,176 --> 00:18:31,666
但结果还是

630
00:18:31,666 --> 00:18:31,976
不如 Vision 的

631
00:18:32,466 --> 00:18:34,006
因此你需要根据

632
00:18:34,006 --> 00:18:35,286
你的应用

633
00:18:35,286 --> 00:18:36,996
以及你想要做什么

634
00:18:36,996 --> 00:18:38,146
为人脸识别选择

635
00:18:38,146 --> 00:18:38,566
合适的技术

636
00:18:40,406 --> 00:18:41,446
我有提到我们的质量

637
00:18:41,446 --> 00:18:43,056
更好

638
00:18:43,056 --> 00:18:44,096
现在让我稍加证明

639
00:18:44,576 --> 00:18:46,796
我这里有一个图像

640
00:18:46,796 --> 00:18:47,896
这是通过 Core Image

641
00:18:47,896 --> 00:18:48,506
运行人脸识别

642
00:18:48,976 --> 00:18:50,956
我们找到了两张脸

643
00:18:50,956 --> 00:18:53,056
模糊的看出了眼睛和嘴巴的

644
00:18:53,656 --> 00:18:55,126
位置

645
00:18:55,396 --> 00:18:56,986
在 Vision 中

646
00:18:56,986 --> 00:18:58,496
我们找到了全部四张脸  包括被遮挡的

647
00:18:58,496 --> 00:18:59,986
通过人脸特征点我们还找到了

648
00:19:00,036 --> 00:19:03,196
更加丰富的细节

649
00:19:04,356 --> 00:19:05,486
说到 Core Image

650
00:19:05,486 --> 00:19:06,426
我想要强调的一点是

651
00:19:06,426 --> 00:19:07,306
CIDetectors

652
00:19:07,386 --> 00:19:08,046
将会怎样

653
00:19:08,076 --> 00:19:11,456
现在已经使用它的人

654
00:19:11,456 --> 00:19:12,536
还可以继续使用

655
00:19:12,536 --> 00:19:15,596
它仍在 Core Image 中

656
00:19:15,596 --> 00:19:17,136
但随着电脑发展

657
00:19:17,136 --> 00:19:18,296
所有算法上

658
00:19:18,296 --> 00:19:20,216
出现的新的部分和改进

659
00:19:20,216 --> 00:19:22,046
都将在 Vision 中体现

660
00:19:22,046 --> 00:19:22,946
Vision 是计算机视觉的新家

661
00:19:23,546 --> 00:19:28,126
好了说了这么久

662
00:19:28,126 --> 00:19:28,656
让我们看一个 Demo

663
00:19:29,606 --> 00:19:30,826
我将向你们展示的

664
00:19:30,826 --> 00:19:33,756
是一个运行着

665
00:19:33,756 --> 00:19:35,726
AV Capture Session 设备上的应用

666
00:19:35,996 --> 00:19:37,256
希望演示顺利

667
00:19:37,896 --> 00:19:39,936
我们将会做非常简单的

668
00:19:39,936 --> 00:19:41,296
矩形检测请求

669
00:19:42,376 --> 00:19:43,916
那么我为什么要设置

670
00:19:43,916 --> 00:19:44,296
这些呢

671
00:19:46,156 --> 00:19:48,386
你们看到的是

672
00:19:48,386 --> 00:19:52,136
我创建了请求

673
00:19:52,136 --> 00:19:54,516
在本例中也就是

674
00:19:55,886 --> 00:19:56,816
简单的矩形检测请求

675
00:19:56,996 --> 00:19:58,376
我开错了窗口

676
00:19:58,376 --> 00:19:59,416
刚刚才有点迷茫

677
00:19:59,416 --> 00:19:59,826
不好意思

678
00:20:00,356 --> 00:20:02,516
好了开始

679
00:20:02,546 --> 00:20:03,826
我们已经有了矩形检测请求

680
00:20:03,826 --> 00:20:05,956
我会设定

681
00:20:05,956 --> 00:20:07,406
一些参数

682
00:20:07,406 --> 00:20:08,856
作为例子

683
00:20:08,856 --> 00:20:10,626
我想要在坐标系中

684
00:20:10,626 --> 00:20:11,946
标准化最小尺寸

685
00:20:11,946 --> 00:20:13,796
我只想要 10%

686
00:20:13,796 --> 00:20:16,666
最小化图片的大小

687
00:20:16,666 --> 00:20:17,206
并且我只想要 20 个矩形

688
00:20:17,436 --> 00:20:19,036
我可以获得更多 但我只要 20

689
00:20:19,036 --> 00:20:20,156
我只是挑了个数字

690
00:20:21,386 --> 00:20:23,086
我设定希望执行

691
00:20:23,116 --> 00:20:25,986
该请求的区域

692
00:20:26,236 --> 00:20:28,506
这里是我们的

693
00:20:28,676 --> 00:20:30,616
Completion Handler

694
00:20:30,616 --> 00:20:32,326
我要做的就是

695
00:20:32,326 --> 00:20:34,406
画出矩形

696
00:20:34,406 --> 00:20:35,816
但你注意到我为了更新 UI

697
00:20:35,816 --> 00:20:37,826
把它移到主队列中

698
00:20:39,176 --> 00:20:40,216
我们的图像来自哪里？

699
00:20:40,216 --> 00:20:41,736
看到这里的

700
00:20:41,736 --> 00:20:45,526
捕获输出

701
00:20:45,666 --> 00:20:47,006
正向我说到的

702
00:20:47,006 --> 00:20:48,566
我们从 CMSampleBuffer 中获得

703
00:20:48,566 --> 00:20:49,606
pixelBuffer

704
00:20:50,376 --> 00:20:54,276
在这里我获得

705
00:20:54,276 --> 00:20:55,166
cameraIntrinsics 数据

706
00:20:55,166 --> 00:20:56,496
这个在一些

707
00:20:56,596 --> 00:20:57,606
计算机视觉的路径中

708
00:20:57,656 --> 00:20:58,816
非常重要

709
00:20:58,816 --> 00:21:00,126
能让我们知道摄像头

710
00:20:58,816 --> 00:21:00,126
能让我们知道摄像头

711
00:21:00,126 --> 00:21:00,866
对着的方向

712
00:21:02,406 --> 00:21:04,206
就像我提到的那样

713
00:21:04,206 --> 00:21:06,446
我们没有忘记 EXIF Orientation

714
00:21:06,446 --> 00:21:07,876
我创建了一个 Image Request Handler

715
00:21:08,026 --> 00:21:09,696
用以完成我们的任务

716
00:21:09,696 --> 00:21:10,636
当我们真正运行的时候

717
00:21:10,636 --> 00:21:11,886
会发生什么？

718
00:21:12,156 --> 00:21:13,006
好的  现在我们

719
00:21:13,006 --> 00:21:14,296
看到的是

720
00:21:14,586 --> 00:21:16,516
我们在追踪这个矩形

721
00:21:16,516 --> 00:21:17,906
这很简单

722
00:21:17,906 --> 00:21:19,386
我们还可以找其他的矩形

723
00:21:20,896 --> 00:21:22,036
如果连接线足够长

724
00:21:22,036 --> 00:21:23,076
我们可以看到

725
00:21:23,076 --> 00:21:24,406
这里是一台电脑

726
00:21:24,406 --> 00:21:24,906
有着许多矩形

727
00:21:25,516 --> 00:21:27,976
我是特意选择黄色标识的

728
00:21:27,976 --> 00:21:29,666
因为它与

729
00:21:29,666 --> 00:21:31,456
你在新投影机

730
00:21:31,726 --> 00:21:33,246
主旨演讲的 Demo

731
00:21:33,246 --> 00:21:34,516
中看到的是同一颜色

732
00:21:34,576 --> 00:21:36,536
我借用了他们的颜色

733
00:21:36,536 --> 00:21:37,706
因为他们借用了我们的代码

734
00:21:37,706 --> 00:21:38,686
来做这些

735
00:21:38,686 --> 00:21:38,976
矩形检测

736
00:21:39,516 --> 00:21:44,636
[掌声]

737
00:21:45,136 --> 00:21:45,876
谢谢

738
00:21:46,016 --> 00:21:48,000
[掌声]

739
00:21:51,046 --> 00:21:52,516
到现在为止很简单

740
00:21:52,516 --> 00:21:52,916
让我们加点难度

741
00:21:56,396 --> 00:21:58,746
把机器学习

742
00:21:58,746 --> 00:22:00,096
加进来怎么样

743
00:21:58,746 --> 00:22:00,096
加进来怎么样

744
00:22:00,096 --> 00:22:01,286
为了更有意思

745
00:22:01,956 --> 00:22:03,776
因此我要做的就是

746
00:22:03,776 --> 00:22:06,136
我把这个小模型

747
00:22:06,196 --> 00:22:07,566
拖进了我的工程文件中

748
00:22:14,156 --> 00:22:16,456
这是一个分类器

749
00:22:16,456 --> 00:22:17,576
可以告诉我们关于图像的

750
00:22:17,576 --> 00:22:18,276
一些信息

751
00:22:19,456 --> 00:22:21,726
在这一部分我们看到

752
00:22:21,726 --> 00:22:25,536
我们需要输入

753
00:22:25,536 --> 00:22:27,116
许多不同尺寸的图像

754
00:22:27,116 --> 00:22:30,556
然后得到

755
00:22:30,556 --> 00:22:31,416
分类

756
00:22:32,496 --> 00:22:33,596
现在你不需要担心尺寸

757
00:22:33,596 --> 00:22:35,886
因为 Vision

758
00:22:35,886 --> 00:22:37,006
会帮你处理

759
00:22:37,006 --> 00:22:43,026
我需要做什么

760
00:22:43,626 --> 00:22:46,076
首先我需要创建一个 Vision 模型

761
00:22:46,076 --> 00:22:48,226
并添加我的请求

762
00:22:48,286 --> 00:22:50,326
也就是这一部分的功能

763
00:22:50,326 --> 00:22:52,736
我简单的加载了

764
00:22:52,736 --> 00:22:56,166
初始模型

765
00:22:56,166 --> 00:22:57,456
并创建了我的分类请求

766
00:22:58,726 --> 00:22:59,476
它提示我

767
00:22:59,476 --> 00:23:00,696
缺少参数

768
00:22:59,476 --> 00:23:00,696
缺少参数

769
00:23:00,696 --> 00:23:01,706
我一会儿会来处理

770
00:23:01,996 --> 00:23:03,256
最后一件我想要

771
00:23:03,256 --> 00:23:05,006
在这里强调的事是

772
00:23:05,366 --> 00:23:06,956
会存在正方形的图像

773
00:23:06,956 --> 00:23:09,446
但我们的摄像头不会分辨正方形

774
00:23:09,446 --> 00:23:10,786
我需要告诉它怎样去处理正方形

775
00:23:10,786 --> 00:23:12,586
你知道的

776
00:23:12,586 --> 00:23:14,136
我要使用什么样的长宽比

777
00:23:14,136 --> 00:23:15,636
因此我需要

778
00:23:15,636 --> 00:23:15,976
进行设置

779
00:23:20,276 --> 00:23:22,636
我的任务

780
00:23:22,636 --> 00:23:26,246
需要一个 Completion Handler

781
00:23:26,246 --> 00:23:28,336
我也提前设置好了

782
00:23:30,496 --> 00:23:31,806
在  Completion Handler 中

783
00:23:31,806 --> 00:23:33,296
我只是看到了观察结果

784
00:23:33,296 --> 00:23:34,656
这个分类器

785
00:23:34,696 --> 00:23:36,216
有许多不同的信息

786
00:23:36,216 --> 00:23:37,876
我不需要全部展示

787
00:23:37,876 --> 00:23:39,206
我只展示

788
00:23:39,376 --> 00:23:40,816
我重视的部分

789
00:23:40,816 --> 00:23:42,576
我在这里做的是

790
00:23:42,576 --> 00:23:43,516
一些简单的筛选

791
00:23:43,516 --> 00:23:46,216
我只看前 4 个

792
00:23:46,216 --> 00:23:47,706
并且准确度

793
00:23:47,706 --> 00:23:49,676
至少达到 30%

794
00:23:49,676 --> 00:23:50,946
这个条件非常适合我的 Demo

795
00:23:50,946 --> 00:23:52,126
你需要找到适合

796
00:23:52,126 --> 00:23:53,356
自己模型

797
00:23:53,356 --> 00:23:53,696
的条件

798
00:23:54,036 --> 00:23:57,286
我下一步要做的是

799
00:23:58,016 --> 00:24:01,136
把我的分类请求添加至

800
00:23:58,016 --> 00:24:01,136
把我的分类请求添加至

801
00:24:01,136 --> 00:24:02,516
我的请求范围中

802
00:24:02,516 --> 00:24:05,346
我实际上运行了两个请求

803
00:24:06,026 --> 00:24:07,416
我已经将它加载到

804
00:24:07,416 --> 00:24:09,886
我的设备上

805
00:24:09,886 --> 00:24:11,196
让我们看看会是什么结果

806
00:24:12,156 --> 00:24:13,526
当然只有我切换到正确的设备

807
00:24:13,526 --> 00:24:14,826
你们才能看到

808
00:24:15,386 --> 00:24:15,686
开始

809
00:24:22,046 --> 00:24:25,056
所以我们看到了一个空的

810
00:24:25,456 --> 00:24:27,016
咖啡杯

811
00:24:27,016 --> 00:24:27,966
最好有人能帮我倒满它

812
00:24:27,966 --> 00:24:33,066
这是一个圆珠笔

813
00:24:33,066 --> 00:24:37,616
这是一个挂锁  看  这是一个 iPod

814
00:24:38,396 --> 00:24:44,076
偷走这些空卡的人

815
00:24:44,076 --> 00:24:45,436
肯定没意识到

816
00:24:45,436 --> 00:24:45,976
它是 iPod

817
00:24:46,516 --> 00:24:49,500
[掌声]

818
00:24:53,056 --> 00:24:54,676
好的  让我们回到幻灯片

819
00:24:54,676 --> 00:24:58,096
之后再进行下一次的

820
00:24:58,096 --> 00:24:59,406
展示说明。

821
00:25:00,456 --> 00:25:01,846
我的下一个 Demo 中

822
00:25:01,846 --> 00:25:02,976
我想要做一些

823
00:25:02,976 --> 00:25:06,516
更复杂的事情

824
00:25:06,516 --> 00:25:07,246
因此我选择了

825
00:25:07,246 --> 00:25:08,006
MNISTVision

826
00:25:09,486 --> 00:25:10,876
机器语言学习社区中的人

827
00:25:10,876 --> 00:25:12,296
对这个

828
00:25:12,296 --> 00:25:13,376
比较熟悉

829
00:25:13,566 --> 00:25:15,766
MNIST 是一个数据集

830
00:25:15,766 --> 00:25:17,076
许多政府雇员和高校学生

831
00:25:17,076 --> 00:25:18,536
在其中写下数据

832
00:25:18,596 --> 00:25:21,086
它们被标记

833
00:25:21,146 --> 00:25:22,106
进行标记的分类器

834
00:25:22,106 --> 00:25:23,166
是人们训练的

835
00:25:23,796 --> 00:25:25,156
请注意这些基本是

836
00:25:25,156 --> 00:25:26,326
白色的数字

837
00:25:26,396 --> 00:25:28,336
写在黑色的背景上

838
00:25:28,336 --> 00:25:30,626
我猜想是用白粉笔

839
00:25:30,666 --> 00:25:31,136
写在旧黑板上的

840
00:25:32,516 --> 00:25:34,346
我要用这段简单的代码

841
00:25:34,346 --> 00:25:35,846
向你们展示

842
00:25:35,846 --> 00:25:37,356
一些概念

843
00:25:37,356 --> 00:25:38,646
它们非常重要

844
00:25:38,646 --> 00:25:40,606
比如如何用 Vision

845
00:25:41,276 --> 00:25:41,456
完成复杂的任务

846
00:25:41,606 --> 00:25:43,646
首先我们

847
00:25:43,646 --> 00:25:45,006
一层一层的叠加请求

848
00:25:45,006 --> 00:25:47,516
这个过程中我们使用 Core Image

849
00:25:47,516 --> 00:25:49,566
进行图像处理

850
00:25:49,566 --> 00:25:51,666
最后也是最重要的是

851
00:25:51,666 --> 00:25:53,246
再次使用 Core ML 

852
00:25:53,246 --> 00:25:53,716
进行机器学习

853
00:25:56,666 --> 00:25:57,686
结果会是怎样的呢？

854
00:25:58,926 --> 00:26:00,596
这里有一张图像

855
00:25:58,926 --> 00:26:00,596
这里有一张图像

856
00:26:00,596 --> 00:26:01,506
上面贴着便利贴

857
00:26:02,106 --> 00:26:04,846
我们可以通过

858
00:26:04,846 --> 00:26:06,796
矩形检测

859
00:26:06,796 --> 00:26:07,326
找到便利贴

860
00:26:07,896 --> 00:26:09,226
现在有一点点不一样

861
00:26:09,226 --> 00:26:10,866
它明显不是

862
00:26:10,926 --> 00:26:12,306
黑底白字

863
00:26:13,456 --> 00:26:14,846
下一步我们使用

864
00:26:14,846 --> 00:26:16,686
Core Image

865
00:26:16,686 --> 00:26:18,046
进行视角调整

866
00:26:18,686 --> 00:26:20,666
并转换颜色

867
00:26:20,666 --> 00:26:22,086
增强对比度

868
00:26:22,086 --> 00:26:23,356
因此我们得到了这张黑白的图像

869
00:26:24,896 --> 00:26:26,076
最后也是最重要的

870
00:26:26,076 --> 00:26:28,826
我需要运行我的 MNIST 分类器

871
00:26:29,016 --> 00:26:30,476
它应该告诉我

872
00:26:30,476 --> 00:26:32,256
这是数字 4 

873
00:26:32,256 --> 00:26:35,096
这是数字 4 的

874
00:26:35,096 --> 00:26:35,636
准确性在 80% 以上

875
00:26:35,636 --> 00:26:38,666
我们再来看看它在

876
00:26:38,666 --> 00:26:39,066
App 中是怎么显示的

877
00:26:41,496 --> 00:26:43,426
我再次打开

878
00:26:43,426 --> 00:26:45,236
矩形检测请求

879
00:26:45,236 --> 00:26:46,316
这是我最喜欢的部分

880
00:26:47,886 --> 00:26:48,946
但我即将在

881
00:26:48,946 --> 00:26:50,246
Completion Handler 中做的

882
00:26:50,246 --> 00:26:51,206
更加有趣

883
00:26:52,426 --> 00:26:53,746
我进行了验证

884
00:26:53,746 --> 00:26:54,876
确保得到的

885
00:26:54,876 --> 00:26:55,746
矩形

886
00:26:55,746 --> 00:26:56,456
是正确的

887
00:26:56,456 --> 00:26:58,656
但这里是

888
00:26:58,736 --> 00:26:58,926
最有趣的部分

889
00:26:59,596 --> 00:27:01,256
我得到了四个顶点的坐标

890
00:26:59,596 --> 00:27:01,256
我得到了四个顶点的坐标

891
00:27:01,256 --> 00:27:04,126
把它们传入 CI

892
00:27:04,126 --> 00:27:05,786
使用 CIPerspectiveCorrection

893
00:27:06,476 --> 00:27:07,636
这使得我能够处理

894
00:27:07,636 --> 00:27:09,226
视角扭曲的图像

895
00:27:09,226 --> 00:27:10,916
将它恢复成

896
00:27:10,916 --> 00:27:11,966
直立拍摄的

897
00:27:11,966 --> 00:27:12,506
图像

898
00:27:14,076 --> 00:27:15,936
我使用 CIColorControls

899
00:27:16,186 --> 00:27:17,456
提高图像的对比度

900
00:27:17,506 --> 00:27:19,066
将它

901
00:27:19,066 --> 00:27:19,546
二进制化

902
00:27:20,896 --> 00:27:22,246
像我说过的

903
00:27:22,246 --> 00:27:23,306
我要改变图像的颜色

904
00:27:24,976 --> 00:27:26,776
现在得到了结果图像

905
00:27:26,776 --> 00:27:28,116
我输入一个新的请求

906
00:27:28,116 --> 00:27:28,936
因为我将在

907
00:27:28,936 --> 00:27:31,146
新的图像上

908
00:27:31,146 --> 00:27:32,086
运行分类

909
00:27:32,296 --> 00:27:34,066
分类看上去

910
00:27:34,066 --> 00:27:34,416
是什么样的

911
00:27:35,906 --> 00:27:37,446
这个分类我已经

912
00:27:37,446 --> 00:27:39,446
用我的大型模型

913
00:27:39,446 --> 00:27:41,776
做好了

914
00:27:41,776 --> 00:27:43,046
这是一个小型模型

915
00:27:43,046 --> 00:27:44,866
我已经在这台笔记本电脑上训练完成了

916
00:27:44,866 --> 00:27:45,996
非常简单

917
00:27:45,996 --> 00:27:47,576
只有几行代码

918
00:27:47,576 --> 00:27:49,386
感谢 Core ML 我可以

919
00:27:49,386 --> 00:27:50,706
把它拖拽进来并轻松地使用

920
00:27:51,106 --> 00:27:52,316
这是我的模型

921
00:27:53,766 --> 00:27:55,046
我再次强调这点

922
00:27:55,046 --> 00:27:57,636
本例中使用的是

923
00:27:57,636 --> 00:27:59,436
是一个非常小的

924
00:27:59,436 --> 00:28:00,166
灰度图像

925
00:27:59,436 --> 00:28:00,166
灰度图像

926
00:28:00,166 --> 00:28:02,636
它应该可以在

927
00:28:02,636 --> 00:28:03,636
28 x 28 像素的图像中

928
00:28:03,636 --> 00:28:03,976
读取那些数字

929
00:28:12,056 --> 00:28:12,526
这就是我的

930
00:28:12,526 --> 00:28:14,716
分类器

931
00:28:15,326 --> 00:28:16,906
现在我需要输入

932
00:28:16,906 --> 00:28:17,216
图像

933
00:28:17,216 --> 00:28:19,056
这段代码

934
00:28:19,056 --> 00:28:20,046
在会话中

935
00:28:20,046 --> 00:28:21,506
可用

936
00:28:21,506 --> 00:28:22,716
这样就能够轻松的运行模拟器

937
00:28:22,716 --> 00:28:24,266
而不需要使用摄像头实时的画面

938
00:28:24,266 --> 00:28:25,196
实际上我要用

939
00:28:25,196 --> 00:28:29,046
UIImagePicker 将它输入到

940
00:28:29,086 --> 00:28:32,306
我的 VMImageRequestHandler 中

941
00:28:32,306 --> 00:28:33,526
让它运行

942
00:28:33,526 --> 00:28:33,986
矩形检测

943
00:28:33,986 --> 00:28:37,136
请注意我把分类的请求

944
00:28:37,136 --> 00:28:38,906
放在了我的

945
00:28:38,906 --> 00:28:40,396
矩形检测

946
00:28:40,396 --> 00:28:42,146
里

947
00:28:42,146 --> 00:28:43,496
这让我们能够

948
00:28:43,496 --> 00:28:44,966
叠加

949
00:28:44,966 --> 00:28:45,146
多个请求

950
00:28:46,096 --> 00:28:47,546
让我们试试这个 Demo

951
00:28:50,896 --> 00:28:55,016
我的 App 在这里

952
00:28:55,196 --> 00:28:56,656
不要被看到了

953
00:28:59,076 --> 00:29:00,696
好的  这里我们看到的

954
00:28:59,076 --> 00:29:00,696
好的  这里我们看到的

955
00:29:00,696 --> 00:29:01,976
是上方的图像

956
00:29:01,976 --> 00:29:03,436
它是我稍早时候

957
00:29:03,436 --> 00:29:04,346
拍摄的照片

958
00:29:04,926 --> 00:29:07,476
我们看到它被正确的分类为

959
00:29:07,476 --> 00:29:10,366
数字 1

960
00:29:10,366 --> 00:29:11,556
这个例子中准确度很高

961
00:29:11,556 --> 00:29:12,646
下方的图片

962
00:29:12,646 --> 00:29:14,816
仅仅是视觉化了

963
00:29:14,816 --> 00:29:16,126
中间图像

964
00:29:16,126 --> 00:29:17,296
它是在

965
00:29:17,296 --> 00:29:19,676
CI 中被创建的

966
00:29:19,676 --> 00:29:19,946
显示的也是同样的数字

967
00:29:19,946 --> 00:29:21,706
让我们选另一个数字

968
00:29:23,066 --> 00:29:24,316
是的这是数字 3

969
00:29:26,466 --> 00:29:27,756
猜这个数字是多少

970
00:29:27,846 --> 00:29:28,826
这是数字 4

971
00:29:29,626 --> 00:29:30,706
运行结果正确

972
00:29:32,576 --> 00:29:33,806
好的谢谢大家

973
00:29:34,516 --> 00:29:37,556
[掌声]

974
00:29:38,056 --> 00:29:39,176
让我们回到幻灯片

975
00:29:41,486 --> 00:29:42,936
这就是我们的 Vision 框架

976
00:29:43,986 --> 00:29:45,316
让我们总结一下

977
00:29:45,316 --> 00:29:46,466
之前看到的内容

978
00:29:47,486 --> 00:29:49,426
Vision 是计算机视觉的

979
00:29:49,426 --> 00:29:50,696
高级框架

980
00:29:50,756 --> 00:29:51,816
它让你在应用中

981
00:29:51,816 --> 00:29:53,756
能够轻松的使用

982
00:29:53,756 --> 00:29:55,356
就算你不是

983
00:29:55,356 --> 00:29:56,576
计算机视觉专家

984
00:29:57,276 --> 00:29:58,756
我们有很多探测器

985
00:29:58,756 --> 00:30:00,166
各种各样

986
00:29:58,756 --> 00:30:00,166
各种各样

987
00:30:00,166 --> 00:30:01,946
他们都运行于

988
00:30:01,946 --> 00:30:03,296
统一的界面上

989
00:30:03,336 --> 00:30:04,896
使得了解这组 API

990
00:30:04,896 --> 00:30:05,446
变得非常容易

991
00:30:06,826 --> 00:30:08,596
最后也是最重要的

992
00:30:08,596 --> 00:30:09,886
是与 Core ML 的集成

993
00:30:10,376 --> 00:30:11,736
通过使用你的自定义模型

994
00:30:11,736 --> 00:30:13,696
你可以在应用中完成很多事情

995
00:30:13,696 --> 00:30:15,586
你可以找到热狗

996
00:30:15,586 --> 00:30:17,426
并且判断

997
00:30:17,426 --> 00:30:18,076
它们是不是真的热狗

998
00:30:19,416 --> 00:30:20,336
开个玩笑

999
00:30:23,576 --> 00:30:24,606
如果你想了解关于本节会议的更多信息

1000
00:30:24,606 --> 00:30:26,816
请前往

1001
00:30:26,816 --> 00:30:28,626
我们的网站

1002
00:30:28,626 --> 00:30:29,746
我一定要强调

1003
00:30:29,796 --> 00:30:31,576
一些相关会议

1004
00:30:31,576 --> 00:30:33,266
你们可能之前

1005
00:30:33,266 --> 00:30:33,706
已经听过

1006
00:30:33,706 --> 00:30:34,786
我列出了关于 Core ML 的

1007
00:30:34,786 --> 00:30:35,876
你也可以在我们的网站上

1008
00:30:35,876 --> 00:30:36,106
找到它

1009
00:30:36,106 --> 00:30:39,616
欢迎参加

1010
00:30:39,616 --> 00:30:42,146
今天 6:30 的聚会

1011
00:30:42,146 --> 00:30:43,416
讨论我们的工作

1012
00:30:43,896 --> 00:30:45,536
关于 Core ML

1013
00:30:45,536 --> 00:30:46,776
更高级的内容

1014
00:30:46,826 --> 00:30:48,886
周四会有一节会议

1015
00:30:48,886 --> 00:30:50,256
我们也会有一节 Core Image 的会议

1016
00:30:50,256 --> 00:30:51,486
他们会在会上

1017
00:30:51,486 --> 00:30:53,556
展示 Core Image 和 Vision

1018
00:30:53,556 --> 00:30:54,246
的神奇功能

1019
00:30:55,826 --> 00:30:57,126
感谢你们今天的到来

1020
00:30:57,126 --> 00:30:58,646
希望你们享受

1021
00:30:58,646 --> 00:30:59,276
接下来 WWDC 的内容

1022
00:30:59,276 --> 00:30:59,456
谢谢大家

1023
00:31:00,516 --> 00:31:06,770
[掌声]
