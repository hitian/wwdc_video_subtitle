1
00:00:26,516 --> 00:00:31,266
[掌声]

2
00:00:31,766 --> 00:00:32,305
&gt;&gt; Jeff Tu: 大家下午好

3
00:00:32,876 --> 00:00:34,116
欢迎你们

4
00:00:34,116 --> 00:00:35,996
进入网络结构进阶的第二个部分

5
00:00:35,996 --> 00:00:37,356
这个部分是对上个

6
00:00:37,356 --> 00:00:38,166
会议的一个延续

7
00:00:38,956 --> 00:00:40,466
我叫 Jeff Tu 接下来我会

8
00:00:40,466 --> 00:00:41,326
向你们介绍

9
00:00:41,326 --> 00:00:41,500
第一个话题

10
00:00:44,516 --> 00:00:45,936
在这个部分中 我们将会讨论

11
00:00:45,936 --> 00:00:47,856
新的 URLSession 开发者 API 和

12
00:00:47,856 --> 00:00:49,736
一些改进 网络架构的最佳实践

13
00:00:49,736 --> 00:00:51,386
以及一些其他的

14
00:00:51,386 --> 00:00:53,000
网络架构中的重要技术

15
00:00:56,066 --> 00:00:57,516
我们的第一个话题是新的

16
00:00:57,516 --> 00:00:58,446
URLSession API

17
00:00:59,386 --> 00:01:02,556
但开始之前 我想先

18
00:00:59,386 --> 00:01:02,556
但开始之前 我想先

19
00:01:02,556 --> 00:01:04,086
回顾一下我们将要讨论的

20
00:01:04,086 --> 00:01:05,396
基本 API

21
00:01:05,396 --> 00:01:06,226
那就是 URLSession

22
00:01:07,106 --> 00:01:09,086
URLSession 是在 iOS 7 和

23
00:01:09,206 --> 00:01:11,176
OS X Mavericks 中提出的一个很好用的

24
00:01:11,176 --> 00:01:12,676
网络设计 API 

25
00:01:13,736 --> 00:01:15,236
URLSession 支持的网络协议

26
00:01:15,266 --> 00:01:18,816
包括 HTTP/2 HTTP/1.1

27
00:01:19,156 --> 00:01:21,646
FTP 和一些自定义流

28
00:01:21,646 --> 00:01:23,756
它的重点在于 URL 加载

29
00:01:24,126 --> 00:01:26,976
如果你给它一个 HTTPS URL

30
00:01:27,276 --> 00:01:29,096
它会自动提供你和网络服务器

31
00:01:29,096 --> 00:01:30,906
之间的数据的

32
00:01:30,906 --> 00:01:32,636
加密和解密

33
00:01:34,286 --> 00:01:35,726
去年我们停用了

34
00:01:35,866 --> 00:01:36,846
NSURLConnection API

35
00:01:36,846 --> 00:01:39,476
所以我们鼓励任何

36
00:01:39,476 --> 00:01:40,596
新的使用 URLSession 的

37
00:01:40,596 --> 00:01:41,416
app 开发

38
00:01:42,136 --> 00:01:43,486
如果想了解关于

39
00:01:43,486 --> 00:01:44,946
URLSession 更多的信息 我建议你

40
00:01:44,946 --> 00:01:47,356
回看过去的 WWDC 会议

41
00:01:47,356 --> 00:01:48,726
和其他网上的资源

42
00:01:51,936 --> 00:01:53,336
回忆一下 你可以创建

43
00:01:53,336 --> 00:01:54,916
几种不同的 URLSession 对象

44
00:01:54,916 --> 00:01:55,576
你可以创建的

45
00:01:56,446 --> 00:01:57,896
最基本的对象

46
00:01:57,966 --> 00:01:59,556
是一个默认配置的

47
00:01:59,676 --> 00:02:01,126
URLSession 对象

48
00:01:59,676 --> 00:02:01,126
URLSession 对象

49
00:02:02,096 --> 00:02:03,786
默认对象的一个行为特点是

50
00:02:03,906 --> 00:02:05,616
它要么立刻可以

51
00:02:05,616 --> 00:02:07,896
获取一个 URL 要么如果设备

52
00:02:07,896 --> 00:02:09,036
不能连接到网络服务器的话

53
00:02:09,106 --> 00:02:10,616
会立刻连接失败

54
00:02:11,646 --> 00:02:13,106
URL 加载可能会失败

55
00:02:13,106 --> 00:02:14,316
因为设备无法连接到网络

56
00:02:14,316 --> 00:02:15,686
或者你正在尝试连接的

57
00:02:15,686 --> 00:02:16,826
服务器恰好

58
00:02:16,826 --> 00:02:17,296
不工作了

59
00:02:18,236 --> 00:02:19,386
这只是其中的

60
00:02:19,386 --> 00:02:19,946
几个例子

61
00:02:21,146 --> 00:02:22,836
另一方面 后台 URLSession 对象

62
00:02:22,836 --> 00:02:24,506
则没有这种

63
00:02:24,506 --> 00:02:25,656
立刻获取或失效的情况

64
00:02:25,656 --> 00:02:27,256
它是根据进程而安排的

65
00:02:27,256 --> 00:02:28,976
并且持续监控

66
00:02:28,976 --> 00:02:30,096
与服务器之间的

67
00:02:30,346 --> 00:02:31,626
网络连接情况

68
00:02:34,436 --> 00:02:36,386
有更多 URLSession 任务

69
00:02:36,386 --> 00:02:37,926
因为网络连接差

70
00:02:37,926 --> 00:02:38,876
而失败的例子

71
00:02:39,816 --> 00:02:40,736
你可能会没有

72
00:02:40,736 --> 00:02:42,556
互联网连接

73
00:02:42,606 --> 00:02:43,666
你可能正在一个剧院里

74
00:02:43,666 --> 00:02:45,056
你的手机开了飞行模式

75
00:02:45,056 --> 00:02:45,626
或者说它应该是飞行模式

76
00:02:46,756 --> 00:02:47,776
可能你的连接对象

77
00:02:47,776 --> 00:02:49,196
不允许使用

78
00:02:49,196 --> 00:02:51,246
数据网络 而用户只可以连接

79
00:02:51,246 --> 00:02:52,036
数据网络

80
00:02:52,986 --> 00:02:54,236
或者服务器

81
00:02:54,236 --> 00:02:55,726
只有在 VPN 的情况下才可以访问

82
00:02:55,726 --> 00:02:57,406
而管理员最近修改了

83
00:02:57,406 --> 00:02:58,000
VPN 权限

84
00:03:01,206 --> 00:03:02,686
你们作为 app 的开发者

85
00:03:02,686 --> 00:03:03,896
将如何应对一个失败的

86
00:03:03,976 --> 00:03:04,476
网络负载呢

87
00:03:05,696 --> 00:03:08,366
过去 我们建议你

88
00:03:08,366 --> 00:03:10,096
使用 SCNetworkReachability

89
00:03:10,096 --> 00:03:11,576
API 来检测你何时

90
00:03:11,576 --> 00:03:13,116
能够再次获得

91
00:03:13,176 --> 00:03:13,566
服务器连接

92
00:03:14,406 --> 00:03:16,006
还有一些其他方法

93
00:03:16,006 --> 00:03:17,856
比如每个特定时段抽样

94
00:03:17,856 --> 00:03:19,636
或者依赖于用户点击或拖动界面

95
00:03:19,636 --> 00:03:21,186
来进行刷新

96
00:03:22,246 --> 00:03:23,786
这些方法的问题在于

97
00:03:23,786 --> 00:03:25,196
它们把你的 app 变的

98
00:03:25,196 --> 00:03:26,646
更复杂 并且不总是

99
00:03:26,646 --> 00:03:27,146
有效的

100
00:03:28,226 --> 00:03:30,256
SCNetworkReachability 只能

101
00:03:30,256 --> 00:03:31,606
告诉你 你可能能

102
00:03:31,606 --> 00:03:32,936
连接到服务器

103
00:03:32,936 --> 00:03:33,276
而不是保证你能连接

104
00:03:34,256 --> 00:03:35,616
你作为开发者一直在

105
00:03:35,616 --> 00:03:37,000
寻找一个更简单的解决方案

106
00:03:39,536 --> 00:03:41,066
如果只需要说

107
00:03:41,066 --> 00:03:42,956
“请在网络可用时

108
00:03:42,956 --> 00:03:44,746
帮我获取这个资源”

109
00:03:44,746 --> 00:03:45,366
不是更简单吗

110
00:03:48,756 --> 00:03:50,016
我们很高兴地告诉你们

111
00:03:50,016 --> 00:03:51,126
我们现在有了一个新功能

112
00:03:51,126 --> 00:03:51,436
允许你这样做

113
00:03:51,886 --> 00:03:53,396
我们称之为 URLSession

114
00:03:53,466 --> 00:03:55,036
Adaptable Connectivity API

115
00:03:56,246 --> 00:03:56,486
这个

116
00:03:57,516 --> 00:04:01,936
[ 掌声 ]

117
00:03:57,516 --> 00:04:01,936
[ 掌声 ]

118
00:04:02,436 --> 00:04:04,706
这个 API 现在所有的平台

119
00:04:04,706 --> 00:04:05,256
都可用

120
00:04:07,476 --> 00:04:09,626
通过启用这个 API

121
00:04:09,626 --> 00:04:11,316
你就可以告诉 URLSession

122
00:04:11,316 --> 00:04:13,156
如果任务由于

123
00:04:13,156 --> 00:04:13,936
无法连接而失败

124
00:04:13,936 --> 00:04:15,746
它应该是等待

125
00:04:15,746 --> 00:04:17,176
与服务器连接

126
00:04:17,176 --> 00:04:18,416
而不是直接失败

127
00:04:21,546 --> 00:04:22,436
那么怎么启用它呢

128
00:04:22,766 --> 00:04:24,286
有一个 boolean 属性

129
00:04:24,286 --> 00:04:26,056
叫做 waitsForConnectivity

130
00:04:26,826 --> 00:04:28,296
把它设成 True

131
00:04:28,296 --> 00:04:29,246
然后你就可以获得这个新特性了

132
00:04:30,226 --> 00:04:31,746
我想重复一下这个

133
00:04:31,746 --> 00:04:32,496
属性的功能

134
00:04:33,056 --> 00:04:34,566
你可以摆脱默认的那种

135
00:04:34,566 --> 00:04:36,466
要么加载要么如果无法连接

136
00:04:36,466 --> 00:04:38,976
就失败的行为模式

137
00:04:39,306 --> 00:04:40,366
变成如果我无法连接

138
00:04:40,366 --> 00:04:42,206
并且因此而失败的情况下

139
00:04:42,206 --> 00:04:44,146
当我有机会连接到服务器时

140
00:04:44,146 --> 00:04:45,426
重新尝试再次加载

141
00:04:46,526 --> 00:04:48,896
如果遭遇了 DNS 故障时

142
00:04:48,896 --> 00:04:50,556
这个 API 也可以等

143
00:04:50,686 --> 00:04:52,426
因为一个网络的 DNS 服务

144
00:04:52,426 --> 00:04:53,986
可能无法解析 但是

145
00:04:53,986 --> 00:04:55,946
另一个网络的可能可以

146
00:04:56,576 --> 00:04:59,046
请注意你不需要

147
00:04:59,046 --> 00:05:00,776
在后台会话中启用这个 API

148
00:04:59,046 --> 00:05:00,776
在后台会话中启用这个 API

149
00:05:00,776 --> 00:05:02,916
因为后台 URLSession 对象会

150
00:05:02,916 --> 00:05:04,366
自动获取这种行为模式

151
00:05:04,986 --> 00:05:05,966
我们会稍后

152
00:05:05,966 --> 00:05:09,000
向你们解释其中的区别

153
00:05:11,016 --> 00:05:12,526
你可能会想

154
00:05:12,646 --> 00:05:14,146
“如果它进入等待状态时

155
00:05:14,146 --> 00:05:15,276
我的代码可以收到通知吗”

156
00:05:15,376 --> 00:05:18,556
当它等待重新连接时

157
00:05:18,556 --> 00:05:19,836
你可能想要你的 app

158
00:05:19,836 --> 00:05:20,686
展现其他功能

159
00:05:20,936 --> 00:05:22,826
比如 做一个

160
00:05:22,826 --> 00:05:24,376
离线浏览模式

161
00:05:24,376 --> 00:05:25,946
或者一个只有在用户使用数据网络时

162
00:05:25,946 --> 00:05:26,660
才用到的模式

163
00:05:29,436 --> 00:05:30,786
如果你想知道

164
00:05:30,786 --> 00:05:32,076
何时你的 app 正处于这样的等待状态

165
00:05:32,076 --> 00:05:33,766
你可以选择

166
00:05:33,766 --> 00:05:35,246
运行 URLSession

167
00:05:35,286 --> 00:05:37,176
taskIsWaitingForConnectivity

168
00:05:37,176 --> 00:05:38,086
委托功能

169
00:05:39,106 --> 00:05:40,446
请注意 这个委托功能

170
00:05:40,446 --> 00:05:42,776
只有在你已经把

171
00:05:42,776 --> 00:05:43,866
waitsForConnectivity

172
00:05:43,866 --> 00:05:45,096
属性设为 True 时才可用

173
00:05:45,806 --> 00:05:47,446
如果你已经这么做了的话

174
00:05:47,446 --> 00:05:48,636
这个委托功能只会

175
00:05:48,636 --> 00:05:50,386
被运行一次

176
00:05:50,386 --> 00:05:52,256
或者如果这个任务根本不需要等的话

177
00:05:53,016 --> 00:05:53,126
它就不需要运行

178
00:05:56,896 --> 00:05:58,566
我们建议你的 app

179
00:05:58,706 --> 00:05:59,726
一直将

180
00:05:59,726 --> 00:06:01,046
waitsForConnectivity 属性设为打开状态

181
00:05:59,726 --> 00:06:01,046
waitsForConnectivity 属性设为打开状态

182
00:06:01,816 --> 00:06:03,306
这是因为即使

183
00:06:03,306 --> 00:06:05,386
你打开了它 每个任务也会试图

184
00:06:05,386 --> 00:06:06,156
立刻运行

185
00:06:06,696 --> 00:06:08,106
任务只有在它

186
00:06:08,106 --> 00:06:09,146
不能连接到服务器时才会等待

187
00:06:09,986 --> 00:06:11,146
不过也有一些

188
00:06:11,146 --> 00:06:12,126
少有的例外

189
00:06:13,126 --> 00:06:14,366
比如 如果你有一个

190
00:06:14,366 --> 00:06:15,796
URLSession 任务 它的目的

191
00:06:15,796 --> 00:06:16,916
是以市场价格购入股票

192
00:06:16,916 --> 00:06:18,516
你可能需要它

193
00:06:18,516 --> 00:06:20,476
要么运行要么失败

194
00:06:20,476 --> 00:06:22,746
而不是等到你再次获得

195
00:06:23,066 --> 00:06:23,576
网络连接

196
00:06:24,556 --> 00:06:26,656
值得一提的是

197
00:06:26,656 --> 00:06:27,376
当你打开

198
00:06:27,376 --> 00:06:29,236
waitsForConnectivity 后

199
00:06:29,236 --> 00:06:30,796
请求超时响应时间的计时器

200
00:06:31,086 --> 00:06:33,186
只会在你

201
00:06:33,226 --> 00:06:34,256
连接到服务器后才会启动

202
00:06:35,066 --> 00:06:36,756
资源的超时响应功能

203
00:06:36,756 --> 00:06:38,456
是被尊重的

204
00:06:39,026 --> 00:06:43,746
我们来总结一下我们可以

205
00:06:43,746 --> 00:06:45,326
怎样使用这个 API 然后就开始

206
00:06:45,326 --> 00:06:45,976
看一些示范代码

207
00:06:47,326 --> 00:06:48,956
主要就是打开

208
00:06:48,956 --> 00:06:49,856
waitsForConnectivity

209
00:06:49,856 --> 00:06:50,336
属性

210
00:06:50,956 --> 00:06:52,286
你可以跟以前一样

211
00:06:52,286 --> 00:06:53,646
创建或者继续使用 URLSessionTask

212
00:06:54,666 --> 00:06:56,216
如果设备无法连接到

213
00:06:56,216 --> 00:06:57,946
服务器 我们就会启用一个

214
00:06:57,946 --> 00:06:59,656
委托回调功能 并且只会

215
00:06:59,796 --> 00:07:00,636
启用一次

216
00:06:59,796 --> 00:07:00,636
启用一次

217
00:07:02,116 --> 00:07:03,756
其他的 URLSession 功能

218
00:07:03,756 --> 00:07:05,436
还是跟之前一样启用

219
00:07:06,496 --> 00:07:08,016
不过要记住

220
00:07:08,016 --> 00:07:09,316
这个 API 只会对

221
00:07:09,316 --> 00:07:10,660
非后台会话的任务起作用

222
00:07:14,636 --> 00:07:15,826
我们一起来看一个示范代码

223
00:07:17,186 --> 00:07:18,846
首先创建一个会话

224
00:07:18,846 --> 00:07:20,756
配置对象 并且

225
00:07:20,756 --> 00:07:24,886
把它设置成默认类型

226
00:07:25,086 --> 00:07:25,756
选择启用

227
00:07:25,756 --> 00:07:27,056
waitsForConnectivity 属性

228
00:07:29,536 --> 00:07:31,286
创建会话对象

229
00:07:31,286 --> 00:07:32,736
并且设置好你想要加载的 URL

230
00:07:33,366 --> 00:07:37,276
用会话对象来创建

231
00:07:37,276 --> 00:07:38,046
一个任务对象

232
00:07:41,976 --> 00:07:43,606
最后重新开始

233
00:07:43,606 --> 00:07:44,000
这个任务

234
00:07:50,156 --> 00:07:51,346
即使有可用的

235
00:07:51,346 --> 00:07:52,936
连接 你的请求也

236
00:07:52,936 --> 00:07:54,396
仍然可能因为其他原因失败

237
00:07:55,126 --> 00:07:56,736
比如 你可能已经

238
00:07:56,736 --> 00:07:58,846
连接到服务器 但是一个新来的

239
00:07:58,846 --> 00:08:00,856
数据中心的工作人员可能拔掉了

240
00:07:58,846 --> 00:08:00,856
数据中心的工作人员可能拔掉了

241
00:08:00,856 --> 00:08:02,016
服务器 导致网络

242
00:08:02,016 --> 00:08:03,086
连接断开

243
00:08:03,086 --> 00:08:03,946
然后你的手机上所有的 app

244
00:08:04,086 --> 00:08:04,660
都会消失

245
00:08:06,666 --> 00:08:08,416
或者你的设备连接到服务器

246
00:08:08,466 --> 00:08:10,826
并且发送了一个 HTTP 请求

247
00:08:10,826 --> 00:08:12,226
但是数据流量太大

248
00:08:12,226 --> 00:08:13,476
导致请求超时

249
00:08:14,926 --> 00:08:16,446
针对这种情况

250
00:08:16,446 --> 00:08:17,536
我们建议你查询

251
00:08:17,536 --> 00:08:19,696
网上资源 它们会提供

252
00:08:19,696 --> 00:08:20,776
更多关于你应该怎么做的细节

253
00:08:22,136 --> 00:08:23,336
不过 在紧密循环中

254
00:08:23,336 --> 00:08:24,786
重试网络加载

255
00:08:24,786 --> 00:08:25,746
往往都不是一个好主意

256
00:08:25,876 --> 00:08:30,876
你希望得到一个更好的

257
00:08:30,876 --> 00:08:32,116
加载网络资源的方法

258
00:08:32,525 --> 00:08:33,846
比等待网络

259
00:08:33,846 --> 00:08:35,556
连接到服务器更好

260
00:08:35,556 --> 00:08:36,775
也比使用一个

261
00:08:36,905 --> 00:08:37,876
不能保证一定能

262
00:08:37,876 --> 00:08:38,905
连接到服务器的 API 更好

263
00:08:40,265 --> 00:08:42,596
让 URLSession

264
00:08:42,596 --> 00:08:42,836
来帮你

265
00:08:43,626 --> 00:08:44,476
启用

266
00:08:44,476 --> 00:08:46,116
waitsForConnectivity 适应性

267
00:08:46,116 --> 00:08:47,056
连接 API

268
00:08:47,686 --> 00:08:49,746
如果你启用了 这个请求

269
00:08:49,746 --> 00:08:51,516
仍然会立刻运行

270
00:08:51,516 --> 00:08:53,786
不会有任何性能损失

271
00:08:53,786 --> 00:08:55,056
并且只有在你无法连接到

272
00:08:55,056 --> 00:08:55,476
服务器的情况下等待

273
00:08:56,366 --> 00:08:57,756
一旦它可用连接

274
00:08:57,756 --> 00:08:59,396
你的 URLSession 任务就会像

275
00:08:59,396 --> 00:09:00,106
之前一样工作

276
00:08:59,396 --> 00:09:00,106
之前一样工作

277
00:09:02,326 --> 00:09:03,566
继续我们关于新进展的主题

278
00:09:03,566 --> 00:09:05,126
我要把麦克风传给

279
00:09:05,126 --> 00:09:06,336
我的同事 Jeff Jenkins

280
00:09:07,516 --> 00:09:13,016
[ 掌声 ]

281
00:09:13,516 --> 00:09:14,166
&gt;&gt; Jeff Jenkins: 谢谢 Jeff

282
00:09:15,586 --> 00:09:16,646
大家下午好

283
00:09:16,686 --> 00:09:17,836
希望你们喜欢这场 WWDC

284
00:09:18,736 --> 00:09:20,556
我很高兴来到这里

285
00:09:20,556 --> 00:09:21,966
很高兴向你们介绍

286
00:09:21,966 --> 00:09:24,296
我们对 URLSessionTask API

287
00:09:24,296 --> 00:09:27,946
所做的一些改进

288
00:09:32,106 --> 00:09:33,606
首先 我想花一点时间

289
00:09:33,606 --> 00:09:34,956
跟你们谈谈

290
00:09:34,956 --> 00:09:37,056
后台 URLSession

291
00:09:37,056 --> 00:09:38,036
我们没有好好介绍过它

292
00:09:38,036 --> 00:09:39,156
所以请让我来告诉你们

293
00:09:39,156 --> 00:09:40,616
关于它的一些

294
00:09:40,616 --> 00:09:40,846
背景知识

295
00:09:41,246 --> 00:09:42,516
后台会话的

296
00:09:42,876 --> 00:09:45,716
URLSession API 允许你的 app

297
00:09:45,716 --> 00:09:47,086
在即使不运行

298
00:09:47,086 --> 00:09:49,266
或你在处理的过程中

299
00:09:49,266 --> 00:09:50,796
也可以进行联网

300
00:09:51,926 --> 00:09:53,696
我们会监控

301
00:09:53,936 --> 00:09:57,286
系统状态 CPU 电池等等

302
00:09:57,286 --> 00:09:59,136
各种事情来帮你找到

303
00:09:59,136 --> 00:10:01,146
完成联网任务的

304
00:09:59,136 --> 00:10:01,146
完成联网任务的

305
00:10:01,146 --> 00:10:02,496
正确时间

306
00:10:03,186 --> 00:10:05,866
现在 当然 如果你

307
00:10:05,866 --> 00:10:07,786
执行一些委托功能

308
00:10:07,786 --> 00:10:09,456
我们可以唤醒你的 app

309
00:10:09,456 --> 00:10:10,946
然后执行委托回调

310
00:10:10,946 --> 00:10:11,976
这样你就可以

311
00:10:11,976 --> 00:10:12,816
处理这些信息

312
00:10:13,286 --> 00:10:14,326
当然 我们会确保

313
00:10:14,326 --> 00:10:15,936
当你的任务完成时

314
00:10:16,376 --> 00:10:17,706
你的 app 仍然在运行

315
00:10:17,706 --> 00:10:19,316
这样你就能够处理那些数据

316
00:10:19,316 --> 00:10:24,546
现在 后台 URLSession 的一个

317
00:10:24,696 --> 00:10:26,556
好用之处就是

318
00:10:26,556 --> 00:10:28,106
利用了系统中的

319
00:10:28,516 --> 00:10:30,186
另一个功能

320
00:10:30,496 --> 00:10:32,376
就是后台 app 刷新

321
00:10:33,176 --> 00:10:34,716
现在 它的做法是

322
00:10:34,716 --> 00:10:36,876
允许你的 app 掌握

323
00:10:36,876 --> 00:10:38,766
最近 最新的数据

324
00:10:38,766 --> 00:10:39,206
对不对

325
00:10:39,546 --> 00:10:41,166
没有什么比

326
00:10:41,576 --> 00:10:42,936
你拿出设备

327
00:10:43,136 --> 00:10:44,456
打开一个app

328
00:10:44,456 --> 00:10:45,426
而你看到的第一个东西

329
00:10:45,426 --> 00:10:47,476
就是一个在转的圈圈更让人心烦了

330
00:10:47,476 --> 00:10:48,326
你在等着

331
00:10:48,326 --> 00:10:50,036
这个 app 启动

332
00:10:50,036 --> 00:10:50,586
获取数据

333
00:10:50,996 --> 00:10:52,416
你希望马上得到那个数据

334
00:10:52,416 --> 00:10:53,456
你希望马上把那个

335
00:10:53,456 --> 00:10:55,116
数据传送给你的用户

336
00:10:55,466 --> 00:10:57,296
这样你的用户就会

337
00:10:57,296 --> 00:10:57,566
很开心地使用你的 app

338
00:10:58,106 --> 00:10:59,486
后台 app 刷新就能让你

339
00:10:59,486 --> 00:10:59,806
做到这样

340
00:10:59,806 --> 00:11:01,316
它可以告诉系统

341
00:10:59,806 --> 00:11:01,316
它可以告诉系统

342
00:11:01,756 --> 00:11:03,286
“嘿 未来我希望

343
00:11:03,286 --> 00:11:04,296
可以被启动

344
00:11:04,296 --> 00:11:05,886
这样我就可以刷新我的数据

345
00:11:05,886 --> 00:11:06,766
让我获取最重要的

346
00:11:06,766 --> 00:11:08,046
信息”可能是

347
00:11:08,046 --> 00:11:09,756
股票信息 或者是

348
00:11:09,836 --> 00:11:11,396
天气预报 或者是

349
00:11:11,396 --> 00:11:12,356
你的 app 提供的其他信息

350
00:11:13,166 --> 00:11:13,996
现在它可以

351
00:11:13,996 --> 00:11:16,566
应用于 app

352
00:11:16,666 --> 00:11:18,096
包括 watchOS 版本

353
00:11:18,426 --> 00:11:19,166
如果你想

354
00:11:19,166 --> 00:11:20,256
更加深入了解

355
00:11:20,256 --> 00:11:22,706
后台 app 刷新 你可以

356
00:11:22,706 --> 00:11:26,256
回顾 2013 年的 WWDC

357
00:11:26,256 --> 00:11:28,996
以及去年的 WWDC 

358
00:11:28,996 --> 00:11:30,136
查看相关会议

359
00:11:31,296 --> 00:11:35,786
那么让我们来看一看

360
00:11:35,786 --> 00:11:37,986
后台 app 刷新的运行 它到底

361
00:11:37,986 --> 00:11:38,766
在做什么

362
00:11:39,496 --> 00:11:41,246
为此 我们可能需要

363
00:11:41,246 --> 00:11:42,896
看一看你的 app 的状态

364
00:11:44,366 --> 00:11:45,876
三种状态

365
00:11:45,876 --> 00:11:47,476
运行状态 暂停状态

366
00:11:47,476 --> 00:11:49,626
或是后台状态

367
00:11:50,666 --> 00:11:52,786
现在 你的 app 正在运行中

368
00:11:52,786 --> 00:11:53,616
你要启用	

369
00:11:53,616 --> 00:11:54,936
后台 app 刷新

370
00:11:54,936 --> 00:11:55,756
你就要告诉系统

371
00:11:55,756 --> 00:11:57,816
“未来 需要运行我的 app

372
00:11:57,816 --> 00:11:58,936
确保它在运行 使我可以

373
00:11:58,936 --> 00:12:00,056
获得最新的信息”

374
00:11:58,936 --> 00:12:00,056
获得最新的信息”

375
00:12:00,556 --> 00:12:02,216
然后你的进程将被暂停

376
00:12:02,846 --> 00:12:04,846
未来你的进程

377
00:12:04,846 --> 00:12:07,036
在运行时 你 app 就可以

378
00:12:07,606 --> 00:12:09,486
要求获取新的数据

379
00:12:09,796 --> 00:12:12,396
跟优秀的开发者一样

380
00:12:12,396 --> 00:12:14,076
这个 app 在使用 URLSession API

381
00:12:14,246 --> 00:12:15,866
事实上 它使用的是一个后台

382
00:12:15,866 --> 00:12:16,596
URLSession

383
00:12:16,596 --> 00:12:19,046
它创建一个 URLSession 任务

384
00:12:19,046 --> 00:12:21,446
让这个任务运行

385
00:12:21,446 --> 00:12:22,456
并且抓取你的 app

386
00:12:22,456 --> 00:12:23,576
所需要的数据

387
00:12:25,396 --> 00:12:28,626
你的进程在这个时候

388
00:12:28,626 --> 00:12:30,226
可能会停止 但是在某个时候

389
00:12:30,226 --> 00:12:32,126
URLSession 会运行你的任务

390
00:12:32,126 --> 00:12:33,216
如果一切顺利的话

391
00:12:33,216 --> 00:12:34,636
你的 app 也就会运行

392
00:12:34,636 --> 00:12:35,566
直到任务完成

393
00:12:36,046 --> 00:12:36,726
这样你就会获得数据了

394
00:12:37,136 --> 00:12:38,556
我们将会在后台

395
00:12:38,556 --> 00:12:40,406
运行你的 app

396
00:12:40,406 --> 00:12:41,696
允许你来处理

397
00:12:41,696 --> 00:12:43,936
那个完成了的任务

398
00:12:43,936 --> 00:12:45,456
以及我们为你抓取的数据

399
00:12:45,826 --> 00:12:48,856
某个时候 用户会

400
00:12:48,856 --> 00:12:49,886
打开你的 app

401
00:12:49,886 --> 00:12:50,826
它就会到前台来

402
00:12:50,826 --> 00:12:51,746
然后他们就会获得

403
00:12:51,746 --> 00:12:53,016
最新的数据

404
00:12:53,436 --> 00:12:54,226
这可棒极了

405
00:12:54,606 --> 00:12:56,756
当我们观察了这个流程

406
00:12:56,756 --> 00:12:57,936
我们说“嗯 也许

407
00:12:57,936 --> 00:13:00,236
我们可以做点什么

408
00:12:57,936 --> 00:13:00,236
我们可以做点什么

409
00:13:00,236 --> 00:13:02,116
帮助我们的开发者来

410
00:13:02,116 --> 00:13:04,386
在我们的平台上改进他们的 app"

411
00:13:05,026 --> 00:13:06,756
我们认为我们可以

412
00:13:06,756 --> 00:13:07,236
为你们做点什么

413
00:13:08,596 --> 00:13:10,746
我们想要解决的第一个问题

414
00:13:10,746 --> 00:13:13,006
就是我们注意到

415
00:13:13,006 --> 00:13:14,836
必须有一个另外的后台运行

416
00:13:14,836 --> 00:13:16,186
你才能创建

417
00:13:16,186 --> 00:13:18,166
这个 URLSession 任务

418
00:13:19,026 --> 00:13:20,466
我们都知道

419
00:13:20,466 --> 00:13:21,666
任何时候你开始这个进程

420
00:13:21,666 --> 00:13:21,976
意味着什么

421
00:13:21,976 --> 00:13:23,696
意味着它会影响电池寿命

422
00:13:24,116 --> 00:13:25,456
对 CPU 造成负担 

423
00:13:25,456 --> 00:13:27,306
我们这些无关紧要的工作

424
00:13:27,306 --> 00:13:28,316
恐怕对设备并不是件好事

425
00:13:28,366 --> 00:13:30,226
而且其实我们真的

426
00:13:30,226 --> 00:13:31,846
不需要这么做

427
00:13:32,936 --> 00:13:34,366
我们想要解决的

428
00:13:34,366 --> 00:13:36,146
另一个问题是陈旧的

429
00:13:36,146 --> 00:13:37,066
网络请求 对吧？

430
00:13:37,066 --> 00:13:38,996
你可以让 URLSession

431
00:13:38,996 --> 00:13:39,446
来帮你解决

432
00:13:39,446 --> 00:13:40,906
但是在未来的某个时刻

433
00:13:41,396 --> 00:13:42,686
这个任务会被完成

434
00:13:43,126 --> 00:13:44,766
那么在你要求任务开始

435
00:13:44,766 --> 00:13:46,036
和任务完成之间

436
00:13:46,036 --> 00:13:47,356
要发生点什么呢？

437
00:13:47,356 --> 00:13:48,796
也许其中情况发生了一些变化

438
00:13:48,796 --> 00:13:50,796
使得最初的

439
00:13:50,796 --> 00:13:52,046
请求没有意义了

440
00:13:53,216 --> 00:13:53,956
所以我们需要给予你们

441
00:13:53,956 --> 00:13:55,976
这样的机会

442
00:13:56,026 --> 00:13:57,436
如果情况发生改变

443
00:13:57,436 --> 00:13:59,426
让我们知道 并且最终

444
00:13:59,426 --> 00:14:01,226
去掉这些陈旧的网络请求

445
00:13:59,426 --> 00:14:01,226
去掉这些陈旧的网络请求

446
00:14:01,226 --> 00:14:02,146
因为没有什么会比

447
00:14:02,146 --> 00:14:03,406
获得数据后发现

448
00:14:03,406 --> 00:14:04,376
“我用它什么也做不了”然后

449
00:14:04,376 --> 00:14:04,936
把它丢掉更糟的了

450
00:14:05,626 --> 00:14:08,356
最后一个我们认为

451
00:14:08,356 --> 00:14:10,886
可以帮到你们的是

452
00:14:10,886 --> 00:14:13,556
让我们知道如何更好的

453
00:14:13,836 --> 00:14:15,596
安排你的 URLSession 任务

454
00:14:16,126 --> 00:14:17,906
什么时候是

455
00:14:17,906 --> 00:14:19,236
在系统中运行

456
00:14:19,236 --> 00:14:20,606
你的任务的最优时间

457
00:14:20,606 --> 00:14:21,686
这样我们就可以

458
00:14:21,686 --> 00:14:23,986
用最有效的方式帮你获得需要展示的数据

459
00:14:23,986 --> 00:14:25,376
让你的用户

460
00:14:25,376 --> 00:14:26,346
对数据感到满意

461
00:14:26,346 --> 00:14:29,036
让我们来看看我们做了什么

462
00:14:30,536 --> 00:14:32,206
我们提出了

463
00:14:32,206 --> 00:14:34,336
URLSessionTask 调度 API

464
00:14:35,406 --> 00:14:37,216
它在我们所有的平台上

465
00:14:37,216 --> 00:14:38,156
都可以使用

466
00:14:38,156 --> 00:14:39,956
它在你们在 WWDC

467
00:14:39,956 --> 00:14:41,296
收到的测试版上

468
00:14:41,296 --> 00:14:41,916
也可以用

469
00:14:41,916 --> 00:14:44,566
我们希望你们可以

470
00:14:44,566 --> 00:14:45,656
深入了解一下

471
00:14:46,516 --> 00:14:49,716
首先我们提供了

472
00:14:49,716 --> 00:14:51,346
一个新的属性

473
00:14:51,556 --> 00:14:52,876
它是

474
00:14:52,876 --> 00:14:54,506
URLSessionTask 对象的属性

475
00:14:55,066 --> 00:14:57,456
叫做 earliestBeginDate

476
00:14:58,366 --> 00:14:59,406
你要做的是

477
00:14:59,406 --> 00:15:01,116
为我们提供一个时间

478
00:14:59,406 --> 00:15:01,116
为我们提供一个时间

479
00:15:01,116 --> 00:15:03,336
你想什么时候

480
00:15:03,406 --> 00:15:05,586
允许你的任务准备好开始运行

481
00:15:05,896 --> 00:15:08,266
我用了“准备好”这个词

482
00:15:08,266 --> 00:15:09,016
因为它很重要

483
00:15:09,016 --> 00:15:10,176
这不是意味着

484
00:15:10,176 --> 00:15:11,576
这是你的任务开始运行

485
00:15:11,686 --> 00:15:13,486
开始联网的时间点

486
00:15:13,856 --> 00:15:15,586
它只是告诉系统

487
00:15:15,586 --> 00:15:16,706
“我希望我的任务

488
00:15:16,766 --> 00:15:18,486
准备好了 以至于它能够运行了”

489
00:15:18,796 --> 00:15:20,646
同时我们还是需要遵守

490
00:15:20,646 --> 00:15:23,046
系统规定 何时

491
00:15:23,046 --> 00:15:25,256
我们可以让这个任务

492
00:15:25,256 --> 00:15:25,816
开始联网

493
00:15:26,896 --> 00:15:28,546
它只可以用于

494
00:15:28,686 --> 00:15:31,326
后台的 URLSession

495
00:15:31,326 --> 00:15:33,166
和建立在后台

496
00:15:33,166 --> 00:15:33,876
URLSession 上的任务

497
00:15:34,406 --> 00:15:37,896
让我们来看看

498
00:15:37,946 --> 00:15:39,626
这个属性和其他的

499
00:15:39,666 --> 00:15:41,586
现有的属性一起是如何

500
00:15:41,586 --> 00:15:43,446
允许你进行一些精细的安排的

501
00:15:44,606 --> 00:15:46,356
你需要创建一个

502
00:15:46,356 --> 00:15:47,776
URLSessionTask 当然 

503
00:15:47,776 --> 00:15:49,336
你需要启用重调

504
00:15:49,336 --> 00:15:50,796
这样我们就知道

505
00:15:50,796 --> 00:15:53,456
我们可以把这个任务放入队列

506
00:15:53,456 --> 00:15:54,566
然后开始工作

507
00:15:55,206 --> 00:15:57,396
在这个时候

508
00:15:57,806 --> 00:16:00,756
这个任务应该处于等待状态

509
00:15:57,806 --> 00:16:00,756
这个任务应该处于等待状态

510
00:16:00,756 --> 00:16:01,486
我们在等着

511
00:16:01,566 --> 00:16:03,526
earliestBeginDate 生效

512
00:16:04,136 --> 00:16:06,506
当到了那个时间点后

513
00:16:06,506 --> 00:16:07,836
这个任务就准备好运行了

514
00:16:09,156 --> 00:16:10,516
你就可以使用现有的

515
00:16:10,706 --> 00:16:13,386
timeoutIntervalForResource

516
00:16:13,386 --> 00:16:15,546
来控制你的 app

517
00:16:15,546 --> 00:16:17,326
要等多久来

518
00:16:17,326 --> 00:16:19,506
加载那个资源 对不对

519
00:16:19,506 --> 00:16:21,596
你可以设置一定的时间

520
00:16:21,596 --> 00:16:23,366
告诉系统说“在这个时间点之后

521
00:16:23,526 --> 00:16:25,466
这个资源对我而言

522
00:16:25,466 --> 00:16:26,706
就没有用了”

523
00:16:27,136 --> 00:16:28,926
这个时间间隔

524
00:16:29,156 --> 00:16:32,426
涵盖了从重调度到

525
00:16:32,426 --> 00:16:34,246
依据你在 timeoutIntervalForResource 中

526
00:16:34,246 --> 00:16:34,856
输入的值而得到的超时时间

527
00:16:34,856 --> 00:16:36,396
之间的间隔

528
00:16:36,716 --> 00:16:41,526
现在 我想要回到

529
00:16:41,526 --> 00:16:43,736
我们之前看到的

530
00:16:43,736 --> 00:16:45,276
后台 app 刷新的

531
00:16:45,276 --> 00:16:45,746
工作流

532
00:16:46,546 --> 00:16:47,316
我们可以看到

533
00:16:47,316 --> 00:16:49,676
其中有一些启动了

534
00:16:49,676 --> 00:16:50,366
后台程序

535
00:16:50,736 --> 00:16:54,066
不过使用这个新的 API 

536
00:16:54,066 --> 00:16:55,426
我们可以剔除掉它们其中的一个

537
00:16:55,426 --> 00:16:56,336
你的 app 工作的方式就变成了

538
00:16:56,336 --> 00:16:58,396
当你的 app 在运行时

539
00:16:58,466 --> 00:16:59,146
你要创建一个

540
00:16:59,146 --> 00:17:01,616
URLSessionTask 你需要

541
00:16:59,146 --> 00:17:01,616
URLSessionTask 你需要

542
00:17:01,906 --> 00:17:03,606
启用我们的新的调度 API 

543
00:17:03,606 --> 00:17:05,376
设置一个 earliestBeginDate

544
00:17:05,935 --> 00:17:07,016
然后你的进程会

545
00:17:07,016 --> 00:17:07,415
进入睡眠

546
00:17:07,715 --> 00:17:08,776
我们会帮你完成

547
00:17:08,776 --> 00:17:09,366
余下的工作

548
00:17:09,955 --> 00:17:11,406
当我们完成这部分工作之后

549
00:17:11,406 --> 00:17:12,726
我们将会在后台

550
00:17:12,726 --> 00:17:14,195
启用你的 app 一次然后

551
00:17:14,195 --> 00:17:16,136
允许你开始处理收到的数据

552
00:17:16,136 --> 00:17:18,486
当你的用户把你的 app

553
00:17:18,486 --> 00:17:19,556
带来前台后

554
00:17:19,556 --> 00:17:21,215
他们会得到

555
00:17:21,415 --> 00:17:22,415
最新的数据

556
00:17:23,096 --> 00:17:24,626
这样我们就可以解决

557
00:17:24,626 --> 00:17:26,106
这个多余的

558
00:17:26,106 --> 00:17:27,796
后台 app 启动问题

559
00:17:28,256 --> 00:17:29,716
让 app 在系统中运行更顺畅

560
00:17:29,716 --> 00:17:30,916
我们认为这是

561
00:17:30,916 --> 00:17:31,346
很好的改进

562
00:17:31,846 --> 00:17:35,016
这就是我们解决的

563
00:17:35,306 --> 00:17:35,766
第一个问题

564
00:17:35,766 --> 00:17:36,736
我们来看一看第二个问题

565
00:17:36,736 --> 00:17:40,660
过时的网络抓取

566
00:17:42,296 --> 00:17:43,296
我们希望给你们

567
00:17:43,296 --> 00:17:45,316
一个更改未来请求的机会

568
00:17:45,936 --> 00:17:47,046
你可能给过我们一个请求了

569
00:17:47,046 --> 00:17:49,316
但是情况可能

570
00:17:49,316 --> 00:17:49,916
发生了变化

571
00:17:50,956 --> 00:17:53,856
我们提出了一个新的

572
00:17:53,856 --> 00:17:55,326
基于

573
00:17:55,326 --> 00:17:57,356
URLSessionTaskDelegate 的委托回调功能叫做

574
00:17:57,796 --> 00:18:00,136
willBeginDelayedRequest.

575
00:17:57,796 --> 00:18:00,136
willBeginDelayedRequest.

576
00:18:01,406 --> 00:18:03,596
使用它 你就可以

577
00:18:03,596 --> 00:18:05,506
在你的任务

578
00:18:05,506 --> 00:18:07,136
要开始联网时

579
00:18:07,136 --> 00:18:07,736
被调用

580
00:18:08,226 --> 00:18:10,416
如果你告诉系统

581
00:18:10,416 --> 00:18:12,346
这个任务准备好了

582
00:18:12,346 --> 00:18:14,066
那么系统就会认为

583
00:18:14,066 --> 00:18:15,026
好的 这就是联网的

584
00:18:15,026 --> 00:18:15,686
最好时机

585
00:18:16,116 --> 00:18:17,096
我们就会启用

586
00:18:17,096 --> 00:18:18,216
这个委托功能

587
00:18:18,216 --> 00:18:20,076
如果你安装了的话

588
00:18:20,076 --> 00:18:22,436
它会允许你对这个任务

589
00:18:22,436 --> 00:18:23,036
作出决定

590
00:18:24,986 --> 00:18:26,256
只有你安装了这个功能

591
00:18:26,256 --> 00:18:27,966
并且

592
00:18:27,966 --> 00:18:29,546
如果你

593
00:18:29,546 --> 00:18:30,736
通过设置一个 earliestBeginDate 来

594
00:18:30,736 --> 00:18:32,046
启用了调度 API 的话它才会启用

595
00:18:32,366 --> 00:18:33,706
并且 这也只对

596
00:18:33,706 --> 00:18:35,116
后台的 URLSessions 可用

597
00:18:36,566 --> 00:18:39,526
并且正如我所提过的那样

598
00:18:39,526 --> 00:18:40,556
它是可选的

599
00:18:40,996 --> 00:18:42,806
我想在这里停一下

600
00:18:42,806 --> 00:18:44,016
希望你们可以认真思考一下

601
00:18:44,046 --> 00:18:45,336
因为这真的很重要

602
00:18:46,036 --> 00:18:47,136
这个委托功能

603
00:18:47,136 --> 00:18:48,656
和其他所有的委托功能

604
00:18:48,656 --> 00:18:49,786
都是你可以选择采用的

605
00:18:50,246 --> 00:18:52,776
但是这一个会导致一些

606
00:18:52,846 --> 00:18:53,926
其他有趣的事情发生

607
00:18:53,926 --> 00:18:54,986
我等一下会向你们展示

608
00:18:55,606 --> 00:18:56,586
你真的需要想一想

609
00:18:56,676 --> 00:18:58,356
“我的 app 能够确定

610
00:18:58,356 --> 00:19:00,456
一个请求在未来的

611
00:18:58,356 --> 00:19:00,456
一个请求在未来的

612
00:19:00,456 --> 00:19:02,396
可行性吗”

613
00:19:02,906 --> 00:19:06,986
现在 一个 Completion Handler

614
00:19:06,986 --> 00:19:08,726
被加入到这个

615
00:19:08,726 --> 00:19:09,546
委托功能

616
00:19:10,256 --> 00:19:10,986
而你则需要

617
00:19:10,986 --> 00:19:12,516
给 URLSession 一个信号

618
00:19:12,516 --> 00:19:14,456
你需要告诉我们

619
00:19:14,456 --> 00:19:16,276
原始的请求是否

620
00:19:16,276 --> 00:19:17,566
还有继续处理

621
00:19:17,826 --> 00:19:18,756
的意义

622
00:19:19,226 --> 00:19:21,336
或者也许情况已经发生改变

623
00:19:21,336 --> 00:19:22,826
你需要做一些调整

624
00:19:22,826 --> 00:19:24,396
也许是一个

625
00:19:24,396 --> 00:19:26,596
不同的 URL 也许一个标题值

626
00:19:26,596 --> 00:19:27,906
不同了 而你想要

627
00:19:27,906 --> 00:19:29,326
在这个时候 在联入网络之前

628
00:19:29,326 --> 00:19:30,736
及时更改

629
00:19:30,736 --> 00:19:31,796
这个请求

630
00:19:32,226 --> 00:19:33,566
或者你会决定

631
00:19:34,086 --> 00:19:35,756
这个请求在此时已经没有用了

632
00:19:35,786 --> 00:19:37,076
取消它

633
00:19:37,396 --> 00:19:42,596
我们不想处理

634
00:19:42,596 --> 00:19:42,836
过时的请求

635
00:19:42,956 --> 00:19:44,736
现在 如果我们回到这个

636
00:19:44,736 --> 00:19:46,926
工作流 回到我之前

637
00:19:46,926 --> 00:19:48,266
所说的认真思考

638
00:19:48,266 --> 00:19:50,026
这个功能

639
00:19:50,026 --> 00:19:51,926
你就会发现我们似乎

640
00:19:51,926 --> 00:19:53,596
回到了那个有

641
00:19:54,046 --> 00:19:55,776
两次后台启动

642
00:19:55,776 --> 00:19:59,396
来满足这个 URL 任务的工作流了

643
00:20:00,856 --> 00:20:02,356
对不对 但是我们需要

644
00:20:02,356 --> 00:20:03,196
停下来思考

645
00:20:03,476 --> 00:20:04,696
哪一种的代价更高

646
00:20:05,056 --> 00:20:07,046
是执行一次过时的网络加载

647
00:20:07,046 --> 00:20:09,756
还是一个 app 的

648
00:20:09,756 --> 00:20:10,186
后台启动

649
00:20:10,606 --> 00:20:12,896
对于系统来说

650
00:20:12,896 --> 00:20:14,516
完成过时加载

651
00:20:14,516 --> 00:20:16,016
获取全部的数据 然后决定

652
00:20:16,016 --> 00:20:17,526
我不需要它然后扔掉它 代价要高多了

653
00:20:18,286 --> 00:20:19,966
OK  所以我们希望你们 

654
00:20:20,016 --> 00:20:21,536
能够认真思考这个

655
00:20:21,536 --> 00:20:22,626
委托功能 以及

656
00:20:22,626 --> 00:20:24,996
你们的 app 是不是有这个能力

657
00:20:24,996 --> 00:20:27,066
真正了解你的请求

658
00:20:27,066 --> 00:20:28,836
在未来的可行性

659
00:20:29,316 --> 00:20:30,436
希望你们明白

660
00:20:31,146 --> 00:20:35,986
现在 我们要解决的

661
00:20:35,986 --> 00:20:38,696
第三个问题是我们如何

662
00:20:39,146 --> 00:20:41,806
在系统中以

663
00:20:41,806 --> 00:20:43,116
最优化 最智能的方式

664
00:20:43,116 --> 00:20:43,616
调度你的请求

665
00:20:43,956 --> 00:20:45,226
在 URLSession 中有一些信息

666
00:20:45,226 --> 00:20:46,426
是我们所不知道的

667
00:20:47,256 --> 00:20:48,496
那么我们对我们的 API

668
00:20:48,496 --> 00:20:50,266
稍稍做了一些改变

669
00:20:50,266 --> 00:20:51,666
可以让你向我们

670
00:20:51,666 --> 00:20:53,676
解释你的请求

671
00:20:54,056 --> 00:20:56,076
和你的回应的信息

672
00:20:56,596 --> 00:20:58,016
我们给出两种属性

673
00:20:58,116 --> 00:20:59,946
第一个是 countOfBytes

674
00:21:00,016 --> 00:21:02,606
ClientExpectsToSend

675
00:21:02,606 --> 00:21:03,846
第二个是 countOfBytes

676
00:21:03,846 --> 00:21:05,496
ClientExpectsToReceive.

677
00:21:06,176 --> 00:21:07,686
我们相信你对你的请求

678
00:21:07,686 --> 00:21:08,556
更了解

679
00:21:08,556 --> 00:21:10,696
也许你想在一个请求上

680
00:21:10,696 --> 00:21:11,696
附加一个主体流

681
00:21:11,696 --> 00:21:12,946
而我们并不知道

682
00:21:13,206 --> 00:21:14,456
而你可能知道

683
00:21:14,456 --> 00:21:14,746
它的大小

684
00:21:15,386 --> 00:21:16,926
我们不了解你的服务器

685
00:21:17,176 --> 00:21:18,456
也不知道你的服务器传送回的

686
00:21:18,456 --> 00:21:19,546
数据的大小

687
00:21:19,926 --> 00:21:21,486
我们相信你对此更了解

688
00:21:21,876 --> 00:21:23,756
而这些会给我们一些提示

689
00:21:23,756 --> 00:21:25,876
告诉我们如何以

690
00:21:25,876 --> 00:21:27,626
最优化和最智能的方式

691
00:21:27,656 --> 00:21:28,346
来调度你的任务

692
00:21:28,826 --> 00:21:30,626
如果你不知道 那么

693
00:21:30,626 --> 00:21:31,746
你可以写

694
00:21:31,746 --> 00:21:34,066
NSURLSessionTransferSizeUnknown

695
00:21:36,286 --> 00:21:37,396
这就解决了第三个问题

696
00:21:37,696 --> 00:21:38,836
我们来看一看

697
00:21:38,836 --> 00:21:40,006
这个新的 API 用代码怎么写

698
00:21:40,006 --> 00:21:41,506
它用起来很简单

699
00:21:42,216 --> 00:21:43,446
我们要做的第一件事情就是

700
00:21:43,446 --> 00:21:46,086
创建一个 URLSession

701
00:21:46,086 --> 00:21:46,936
后台配置

702
00:21:46,936 --> 00:21:48,626
然后我们要创建一个

703
00:21:48,626 --> 00:21:50,366
基于这个配置的会话

704
00:21:52,226 --> 00:21:54,926
一旦我们有了它

705
00:21:54,926 --> 00:21:57,256
我们就可以生成一个 URLRequest,

706
00:21:57,636 --> 00:21:59,496
指定我们想去的 URL 

707
00:21:59,496 --> 00:22:02,296
也可以设置一个标题值

708
00:21:59,496 --> 00:22:02,296
也可以设置一个标题值

709
00:22:02,606 --> 00:22:03,746
设一个对你的任务

710
00:22:03,746 --> 00:22:04,346
有意义的标题

711
00:22:04,346 --> 00:22:05,996
再说一遍 这只是一个例子

712
00:22:07,586 --> 00:22:08,476
现在我们要创建一个

713
00:22:08,476 --> 00:22:09,866
任务 在该会话中

714
00:22:09,866 --> 00:22:11,916
封装那个请求

715
00:22:12,566 --> 00:22:13,986
然后我们要选择采用

716
00:22:13,986 --> 00:22:16,316
这个新的调度 API

717
00:22:16,316 --> 00:22:17,986
通过设置 earliestBeginDate 属性

718
00:22:18,266 --> 00:22:19,116
并给我们一个时间

719
00:22:19,116 --> 00:22:20,976
在这个例子中 我们举个例子

720
00:22:20,976 --> 00:22:22,886
从现在开始两小时后我希望这个任务

721
00:22:22,936 --> 00:22:24,336
已经准备好运行了

722
00:22:25,936 --> 00:22:26,916
我也会给

723
00:22:26,916 --> 00:22:28,286
URLSession 一些暗示 告诉它

724
00:22:28,586 --> 00:22:30,126
“这是一个小请求

725
00:22:30,126 --> 00:22:31,646
没有主体 我只设置了

726
00:22:31,646 --> 00:22:33,896
一个标题 大概 80 个字节

727
00:22:34,216 --> 00:22:36,216
我的服务器大概会

728
00:22:36,216 --> 00:22:38,016
传送 2KB 的数据

729
00:22:38,016 --> 00:22:39,206
作为响应”

730
00:22:40,406 --> 00:22:42,026
对于所有的 URLSession  任务

731
00:22:42,216 --> 00:22:43,376
请确保你可以重调度

732
00:22:43,996 --> 00:22:46,406
那么 新的委托功能

733
00:22:46,406 --> 00:22:46,836
怎么工作的呢

734
00:22:47,146 --> 00:22:50,096
我决定我了解情况

735
00:22:50,186 --> 00:22:51,636
我在未来可以为

736
00:22:51,636 --> 00:22:53,846
我的联网任务作出

737
00:22:53,846 --> 00:22:56,006
充满智慧的决定

738
00:22:56,546 --> 00:22:57,456
所以我使用了

739
00:22:57,456 --> 00:22:58,896
willBeginDelayedRequest

740
00:22:59,046 --> 00:23:01,946
在我们的案例中

741
00:22:59,046 --> 00:23:01,946
在我们的案例中

742
00:23:01,946 --> 00:23:03,916
我决定修改请求

743
00:23:04,506 --> 00:23:05,676
我要删除原始请求

744
00:23:05,676 --> 00:23:06,926
然后创建一个新的

745
00:23:06,926 --> 00:23:08,026
updatedRequest

746
00:23:08,026 --> 00:23:09,526
我将修改标题

747
00:23:09,526 --> 00:23:10,896
中的一个值

748
00:23:10,896 --> 00:23:13,436
让它对任务更有意义

749
00:23:13,436 --> 00:23:14,566
现在这个任务事实上

750
00:23:14,566 --> 00:23:15,266
要开始联入网络了

751
00:23:15,556 --> 00:23:17,506
时间过去了 我有了一些

752
00:23:17,506 --> 00:23:18,206
新的信息

753
00:23:18,526 --> 00:23:20,036
我把这些信息加入到

754
00:23:20,036 --> 00:23:20,426
这个任务里

755
00:23:20,826 --> 00:23:21,956
然后我要启用

756
00:23:21,956 --> 00:23:24,626
completionHandler 并且使用一个

757
00:23:24,626 --> 00:23:26,896
useNewRequest 的配置

758
00:23:26,896 --> 00:23:28,246
把它作为一个新的请求

759
00:23:28,246 --> 00:23:29,076
如果你看一看我们的

760
00:23:29,076 --> 00:23:30,266
标题文件 你会看到

761
00:23:30,266 --> 00:23:33,166
这个 completionHandler 功能中的

762
00:23:33,166 --> 00:23:36,666
其他可用的配置

763
00:23:36,816 --> 00:23:39,136
那么让我来总结一下我们

764
00:23:39,256 --> 00:23:40,756
介绍的这个调度 API 

765
00:23:41,206 --> 00:23:42,696
后台 URLSession 是一个

766
00:23:42,816 --> 00:23:45,146
在网络连接方面的很好用的 API

767
00:23:45,146 --> 00:23:46,276
它允许你的 app

768
00:23:46,276 --> 00:23:47,496
甚至不用运行就可以

769
00:23:47,496 --> 00:23:49,026
获得这个网络连接

770
00:23:50,086 --> 00:23:51,666
我们的新的调度 API 

771
00:23:51,716 --> 00:23:54,156
允许你延迟请求

772
00:23:54,406 --> 00:23:57,226
这样它们就可以

773
00:23:57,226 --> 00:23:59,356
为你的 app 

774
00:23:59,356 --> 00:24:00,786
获取最新的信息

775
00:23:59,356 --> 00:24:00,786
获取最新的信息

776
00:24:02,186 --> 00:24:03,426
我们给你们机会

777
00:24:03,426 --> 00:24:04,766
来依据

778
00:24:04,766 --> 00:24:06,456
实际情况和

779
00:24:06,456 --> 00:24:07,996
网络连接实际发生的时间

780
00:24:07,996 --> 00:24:10,376
进行一些调整

781
00:24:10,376 --> 00:24:11,856
这个 API 的另一部分改进

782
00:24:12,036 --> 00:24:13,616
是允许你来给我们

783
00:24:13,616 --> 00:24:14,916
一些提示 让我们可以

784
00:24:14,916 --> 00:24:16,836
变的更加智能

785
00:24:16,836 --> 00:24:18,446
让这些任务在设备上

786
00:24:18,446 --> 00:24:20,706
在最佳时机运行

787
00:24:21,286 --> 00:24:24,936
现在 我要将时间让给

788
00:24:24,936 --> 00:24:26,556
Stuart Cheshire 

789
00:24:26,556 --> 00:24:28,086
一个苹果的杰出的工程师

790
00:24:28,086 --> 00:24:29,466
谢谢你们的聆听

791
00:24:30,516 --> 00:24:33,826
[ 掌声 ]

792
00:24:34,326 --> 00:24:36,716
&gt;&gt; Stuart Cheshire: 谢谢 Jeff

793
00:24:38,896 --> 00:24:40,636
现在我们要谈一谈

794
00:24:41,066 --> 00:24:43,006
URLSession 中的改进

795
00:24:43,456 --> 00:24:45,156
我们一共要涵盖四件事情

796
00:24:45,466 --> 00:24:46,276
让我们一一来讨论

797
00:24:48,866 --> 00:24:49,876
你们往往想要展示一个

798
00:24:49,876 --> 00:24:51,756
进度条来告诉

799
00:24:51,756 --> 00:24:53,766
你的用户现在的

800
00:24:53,766 --> 00:24:54,026
进度如何

801
00:24:54,676 --> 00:24:56,676
现在这个工作有一点

802
00:24:56,676 --> 00:24:57,456
繁琐

803
00:24:57,936 --> 00:24:59,746
你需要

804
00:24:59,746 --> 00:25:00,996
用 Key-value Observing 检测

805
00:24:59,746 --> 00:25:00,996
用 Key-value Observing 检测

806
00:25:00,996 --> 00:25:02,236
四个变量

807
00:25:02,776 --> 00:25:04,576
并且有时候

808
00:25:04,576 --> 00:25:07,426
countOfBytesExpectedToReceive 或者

809
00:25:07,426 --> 00:25:09,000
Send 不总是可用的

810
00:25:12,266 --> 00:25:15,936
现在一个好消息是在 iOS 11 中

811
00:25:16,196 --> 00:25:18,386
URLSessionTask 已经采用了

812
00:25:18,456 --> 00:25:20,116
ProgressReporting 协议

813
00:25:21,226 --> 00:25:23,466
你可以从

814
00:25:23,896 --> 00:25:28,066
URLSessionTask 获得一个进度对象

815
00:25:28,606 --> 00:25:30,876
它会给你一个变量

816
00:25:30,876 --> 00:25:32,966
叫做 fractionCompleted

817
00:25:32,966 --> 00:25:35,206
其实是一个从零到一之间的数字

818
00:25:35,656 --> 00:25:37,676
你还可以加字符串

819
00:25:37,676 --> 00:25:40,056
以提供关于操作的更多信息

820
00:25:41,396 --> 00:25:42,816
你可以把那个进度对象

821
00:25:42,816 --> 00:25:46,186
添加到 UIProgressView 或者

822
00:25:46,216 --> 00:25:48,536
NSProgressIndicator 以获得

823
00:25:48,536 --> 00:25:49,996
一个自动进度条

824
00:25:50,416 --> 00:25:52,886
你也可以把多个

825
00:25:52,886 --> 00:25:55,016
进度对象结合成一个

826
00:25:55,016 --> 00:25:56,826
母进度对象

827
00:25:56,826 --> 00:25:58,726
当你在进行多任务操作时

828
00:25:58,726 --> 00:26:00,306
比如下载文件

829
00:25:58,726 --> 00:26:00,306
比如下载文件

830
00:26:00,596 --> 00:26:02,536
解压缩文件

831
00:26:02,536 --> 00:26:03,486
然后处理数据

832
00:26:04,556 --> 00:26:07,246
这会让你报告进度

833
00:26:07,246 --> 00:26:09,126
这一过程更简单一些

834
00:26:10,676 --> 00:26:13,166
URLSessionTask 和 

835
00:26:13,166 --> 00:26:15,616
进度对象之间的绑定

836
00:26:15,616 --> 00:26:17,036
是双向的

837
00:26:17,656 --> 00:26:19,866
所以如果你暂停了一个

838
00:26:19,866 --> 00:26:21,666
URLSessionTask 就等于

839
00:26:21,666 --> 00:26:23,936
暂停了进度对象

840
00:26:23,936 --> 00:26:25,096
如果你暂停了进度对象

841
00:26:25,096 --> 00:26:26,616
那也就等于

842
00:26:26,616 --> 00:26:28,726
暂停了 URLSessionTask.

843
00:26:29,336 --> 00:26:34,656
我们现在有针对

844
00:26:34,656 --> 00:26:36,756
Brotli 压缩算法的支持 

845
00:26:37,696 --> 00:26:40,576
在测试中 它比 gzip 的压缩速度

846
00:26:40,576 --> 00:26:42,996
快大约 15% 左右 

847
00:26:42,996 --> 00:26:45,696
这带来了更快的网络访问

848
00:26:48,006 --> 00:26:49,376
和其他新的压缩方案一样

849
00:26:49,376 --> 00:26:51,706
它只在

850
00:26:51,706 --> 00:26:53,616
加密连接中使用

851
00:26:53,616 --> 00:26:55,496
以避免使

852
00:26:55,496 --> 00:26:56,616
可能无法辨别此压缩的

853
00:26:56,616 --> 00:26:57,166
中间框产生混淆

854
00:26:59,896 --> 00:27:03,466
由于 Safari 使用 URLSession

855
00:26:59,896 --> 00:27:03,466
由于 Safari 使用 URLSession

856
00:27:03,466 --> 00:27:05,096
这也意味着 Safari

857
00:27:05,096 --> 00:27:07,026
也可以享受这个新的 Brotli

858
00:27:07,026 --> 00:27:08,106
压缩算法带来的好处

859
00:27:08,526 --> 00:27:10,896
很多主要网站也

860
00:27:10,896 --> 00:27:12,566
已经宣布了在他们的网页服务中

861
00:27:12,566 --> 00:27:14,006
支持 Brotli 算法

862
00:27:14,006 --> 00:27:17,776
我们的下一个话题是 Public

863
00:27:17,776 --> 00:27:18,586
Suffix List

864
00:27:19,216 --> 00:27:20,616
Public Suffix List 有时候

865
00:27:20,616 --> 00:27:22,846
也被称为有效

866
00:27:22,846 --> 00:27:24,076
一级域名列表

867
00:27:24,836 --> 00:27:27,946
这对于确定

868
00:27:27,946 --> 00:27:29,776
互联网命名空间中

869
00:27:29,776 --> 00:27:31,566
管理边界的位置

870
00:27:31,566 --> 00:27:32,756
很重要

871
00:27:34,036 --> 00:27:35,566
我们不允许

872
00:27:36,026 --> 00:27:40,126
一个网站在 .com 域上

873
00:27:40,126 --> 00:27:42,096
设置一个 cookie 然后

874
00:27:42,096 --> 00:27:44,006
任何以 .com 结尾的公司都可以访问它

875
00:27:45,066 --> 00:27:47,916
所以你可能会试图

876
00:27:47,916 --> 00:27:50,486
建立一个规则 要求不能

877
00:27:50,656 --> 00:27:52,576
在一级域名上设置 cookie

878
00:27:52,636 --> 00:27:54,546
只能在第二级或更低级上设置

879
00:27:55,146 --> 00:27:56,926
但是在世界上的不同地方

880
00:27:56,926 --> 00:27:58,416
域名的名字也是不一样的

881
00:28:00,086 --> 00:28:03,276
在美国 Apple.com 和

882
00:28:03,276 --> 00:28:04,886
FileMaker.com 是不同的两个公司

883
00:28:06,136 --> 00:28:08,236
但是在澳大利亚

884
00:28:08,236 --> 00:28:10,526
很多很多公司都用 com.au 

885
00:28:10,746 --> 00:28:11,806
但那并不意味着它们是

886
00:28:11,806 --> 00:28:12,486
同一个公司

887
00:28:12,786 --> 00:28:15,196
所以 Public Suffix List 是一堆

888
00:28:15,196 --> 00:28:17,706
规则和模式

889
00:28:17,706 --> 00:28:20,726
它告知软件如何判断

890
00:28:20,816 --> 00:28:22,396
管理边界的位置

891
00:28:24,076 --> 00:28:28,396
它用于

892
00:28:28,396 --> 00:28:32,876
划分 cookies

893
00:28:32,876 --> 00:28:34,296
URLSession API 也使用它

894
00:28:34,376 --> 00:28:36,046
如果你直接使用

895
00:28:36,046 --> 00:28:37,876
HTTPCookieStorage API

896
00:28:38,036 --> 00:28:39,206
它也同样支持

897
00:28:40,346 --> 00:28:41,506
我们曾经在

898
00:28:41,506 --> 00:28:43,576
软件升级中更新了它

899
00:28:43,616 --> 00:28:46,106
但是现在随着创建

900
00:28:46,106 --> 00:28:47,626
一级域名的进展越来越快

901
00:28:48,066 --> 00:28:49,796
我们已经改为空中更新

902
00:28:50,606 --> 00:28:52,046
如果我们愿意

903
00:28:52,046 --> 00:28:56,476
我们可以每两周推出一个新的列表

904
00:28:57,416 --> 00:29:01,636
如果你只是想要一个字节流

905
00:28:57,416 --> 00:29:01,636
如果你只是想要一个字节流

906
00:29:01,726 --> 00:29:03,506
你可以使用

907
00:29:03,506 --> 00:29:04,146
URLSessionStreamTask API

908
00:29:04,436 --> 00:29:06,896
如果你不想做 HTTP Style

909
00:29:06,896 --> 00:29:08,536
Gets 但是比如说你想写一个 

910
00:29:08,536 --> 00:29:09,196
邮件客户端

911
00:29:09,596 --> 00:29:12,676
URLSessionStreamTask 会给你一个

912
00:29:12,676 --> 00:29:13,626
简单的字节流

913
00:29:14,766 --> 00:29:16,646
它支持使用 STARTTLS 选项

914
00:29:16,646 --> 00:29:18,026
升级到 TLS

915
00:29:18,276 --> 00:29:21,286
如果你现在的代码

916
00:29:21,416 --> 00:29:22,866
是使用之前的

917
00:29:22,866 --> 00:29:25,526
NSInputStream 和 NSOutputStream API 写的

918
00:29:25,526 --> 00:29:27,796
你可以从一个

919
00:29:27,796 --> 00:29:29,156
URLSessionStreamTask 中提取那些对象

920
00:29:29,236 --> 00:29:32,016
以使用你之前的代码

921
00:29:32,886 --> 00:29:34,016
但是对于你所写的

922
00:29:34,016 --> 00:29:36,006
任何新代码 我们都强烈推荐

923
00:29:36,066 --> 00:29:38,246
你使用新的本地

924
00:29:38,526 --> 00:29:40,676
URLSessionStreamTask API

925
00:29:41,486 --> 00:29:42,836
我们在 2015 年的 WWDC

926
00:29:42,836 --> 00:29:46,116
宣布了这件事

927
00:29:46,596 --> 00:29:49,336
现在我们为你们提供的新进展是

928
00:29:49,396 --> 00:29:50,836
身份验证代理的

929
00:29:50,836 --> 00:29:52,446
自动导航

930
00:29:52,666 --> 00:29:53,776
如果这个代理要求

931
00:29:53,776 --> 00:29:56,336
取得帐密 那么我们就会

932
00:29:56,336 --> 00:29:57,886
自动从钥匙串中提取

933
00:29:57,886 --> 00:29:59,106
或者立刻代表你

934
00:29:59,106 --> 00:30:01,326
从用户处获取

935
00:29:59,106 --> 00:30:01,326
从用户处获取

936
00:30:03,136 --> 00:30:05,276
那么我们现在已经

937
00:30:05,276 --> 00:30:07,346
讲完了 URLSession 的一些改进

938
00:30:07,816 --> 00:30:08,496
我们下面继续

939
00:30:09,516 --> 00:30:15,636
[ 掌声 ]

940
00:30:16,136 --> 00:30:16,476
谢谢

941
00:30:18,346 --> 00:30:21,076
下面是我们从数年来

942
00:30:21,076 --> 00:30:23,846
帮助开发者的经验中得到的一些

943
00:30:23,846 --> 00:30:24,476
建议

944
00:30:26,816 --> 00:30:29,116
头号规则：

945
00:30:29,116 --> 00:30:29,726
别用 BSD Sockets

946
00:30:33,246 --> 00:30:34,536
同样的道理

947
00:30:34,536 --> 00:30:36,436
我们建议你不要嵌入

948
00:30:36,746 --> 00:30:39,156
基于 BSD Sockets 的库

949
00:30:41,356 --> 00:30:44,386
因为正如今天你所听到的这样

950
00:30:44,386 --> 00:30:46,116
我们做了很多工作

951
00:30:46,116 --> 00:30:48,286
来为你开发 app

952
00:30:48,286 --> 00:30:49,146
提供方便

953
00:30:49,556 --> 00:30:51,676
我们推出了 Wi-Fi Assist

954
00:30:51,676 --> 00:30:53,246
使你的 app 在 Wi-Fi 网络不好时

955
00:30:53,356 --> 00:30:54,856
仍然可以运行

956
00:30:54,856 --> 00:30:55,596
而不失败

957
00:30:56,146 --> 00:30:58,386
我们提供了可以

958
00:30:58,796 --> 00:31:01,156
最小化 CPU 和电池使用量的

959
00:30:58,796 --> 00:31:01,156
最小化 CPU 和电池使用量的

960
00:31:01,196 --> 00:31:02,946
技术 给用户更长的

961
00:31:02,946 --> 00:31:03,676
电池寿命

962
00:31:04,376 --> 00:31:06,456
我们能在你的 app

963
00:31:06,456 --> 00:31:08,116
不运行的时候

964
00:31:08,116 --> 00:31:09,536
在后台处理任务

965
00:31:09,796 --> 00:31:11,096
而第三方库不在

966
00:31:11,096 --> 00:31:12,196
内存中运行时

967
00:31:12,196 --> 00:31:13,206
它们本质上是什么也做不了的

968
00:31:14,556 --> 00:31:18,116
最后一点建议

969
00:31:18,116 --> 00:31:20,396
始终使用通过名称连接的 API

970
00:31:20,736 --> 00:31:22,746
而不要使用需要

971
00:31:22,746 --> 00:31:24,916
你把名称解析成一个 IP 地址

972
00:31:24,976 --> 00:31:26,256
然后连接到地址的 API

973
00:31:27,036 --> 00:31:28,546
我们之前讨论了

974
00:31:28,546 --> 00:31:30,466
IPv6 支持的要求

975
00:31:30,996 --> 00:31:33,016
并且你们几乎所有的 app 都可以

976
00:31:33,276 --> 00:31:36,366
完美运行的一个原因就是

977
00:31:36,416 --> 00:31:37,826
当你使用

978
00:31:37,826 --> 00:31:40,366
通过名称连接的 API 时

979
00:31:40,366 --> 00:31:41,506
你不需要接触 IP 地址

980
00:31:42,046 --> 00:31:43,136
如果你不需要接触

981
00:31:43,136 --> 00:31:45,496
IP 地址 你就不用去

982
00:31:45,496 --> 00:31:47,726
关心它是 v4 还是 v6

983
00:31:48,196 --> 00:31:50,846
它会自动工作

984
00:31:50,886 --> 00:31:53,366
我们经常收到的一个问题是

985
00:31:53,366 --> 00:31:54,706
关于超时值

986
00:31:55,096 --> 00:31:56,316
所以我要再说一下

987
00:31:57,466 --> 00:31:59,476
timeoutIntervalForResource

988
00:32:00,456 --> 00:32:02,496
表示抓取整个资源的

989
00:32:02,496 --> 00:32:03,566
时间限制

990
00:32:03,646 --> 00:32:06,436
默认的情况下 应该是 7 天

991
00:32:07,346 --> 00:32:08,996
如果在那之前

992
00:32:08,996 --> 00:32:10,206
没有抓取到整个资源的话

993
00:32:10,206 --> 00:32:10,666
任务就会失败

994
00:32:11,716 --> 00:32:14,726
timeoutIntervalForRequest 是一个

995
00:32:14,726 --> 00:32:17,036
计时器 只有在传输开始后

996
00:32:17,036 --> 00:32:18,166
才会开始计时

997
00:32:18,646 --> 00:32:21,386
一旦它开始计时

998
00:32:21,386 --> 00:32:23,796
如果你的传输卡顿或者

999
00:32:23,796 --> 00:32:24,986
在那个超时值时没什么进展

1000
00:32:24,986 --> 00:32:26,806
计时器将被触发

1001
00:32:29,876 --> 00:32:33,356
我们见过一些开发人员

1002
00:32:33,356 --> 00:32:35,766
使用他们旧的

1003
00:32:35,766 --> 00:32:38,716
代码 然后通过

1004
00:32:38,716 --> 00:32:41,066
机械地为他们的旧的

1005
00:32:41,256 --> 00:32:43,946
NSURLConnection 代码

1006
00:32:43,946 --> 00:32:46,186
加一个 URLSession 来把它们

1007
00:32:46,186 --> 00:32:46,406
转化成 URLSession 代码

1008
00:32:47,076 --> 00:32:48,566
这是一种非常没效率和

1009
00:32:48,566 --> 00:32:49,006
浪费的做法

1010
00:32:49,186 --> 00:32:51,486
对于大部分 app 来说

1011
00:32:51,486 --> 00:32:53,436
你们所需要的只是

1012
00:32:53,436 --> 00:32:55,446
一个 URLSession 它可以让你

1013
00:32:55,446 --> 00:32:56,786
完成你想要的任务

1014
00:32:57,696 --> 00:32:59,236
你可能需要多于一个

1015
00:32:59,236 --> 00:33:01,446
URLSession 的唯一情况就是

1016
00:32:59,236 --> 00:33:01,446
URLSession 的唯一情况就是

1017
00:33:01,446 --> 00:33:02,946
你有不同的操作组

1018
00:33:02,946 --> 00:33:04,936
而且它们的要求都

1019
00:33:04,936 --> 00:33:05,926
截然不同

1020
00:33:06,086 --> 00:33:07,786
这种情况下

1021
00:33:07,816 --> 00:33:08,836
你可能需要创建两个不同的

1022
00:33:08,836 --> 00:33:11,066
配置对象 并且

1023
00:33:11,066 --> 00:33:13,436
用这两个配置对象创建

1024
00:33:13,436 --> 00:33:15,096
两个不同的 URLSession

1025
00:33:15,546 --> 00:33:17,666
一个例子是 Safari 中的私密浏览模式

1026
00:33:17,666 --> 00:33:19,686
其中每个私密浏览

1027
00:33:19,686 --> 00:33:21,116
窗口都是

1028
00:33:21,116 --> 00:33:23,316
分别的 URLSession 

1029
00:33:23,316 --> 00:33:24,636
所以它们不会与其它会话分享

1030
00:33:24,636 --> 00:33:25,936
Cookie 或者其它状态

1031
00:33:27,896 --> 00:33:30,496
大多数的 app 都只能有一个

1032
00:33:30,496 --> 00:33:32,326
静态分配的 URLSession

1033
00:33:32,326 --> 00:33:33,016
没关系

1034
00:33:33,376 --> 00:33:34,776
但是 如果你动态的

1035
00:33:34,776 --> 00:33:36,266
分配 URLSession

1036
00:33:36,606 --> 00:33:38,266
就要记得事后清理

1037
00:33:38,696 --> 00:33:40,096
要么完成任务然后

1038
00:33:40,096 --> 00:33:42,526
使它失效 要么就废止

1039
00:33:42,526 --> 00:33:42,936
然后取消它

1040
00:33:43,346 --> 00:33:44,286
但是如果你没有清理

1041
00:33:44,496 --> 00:33:45,296
就会造成内存泄漏

1042
00:33:45,856 --> 00:33:50,956
有些开发者问我们

1043
00:33:51,016 --> 00:33:52,776
关于便捷方法和

1044
00:33:52,776 --> 00:33:53,836
委托回调的问题

1045
00:33:55,336 --> 00:33:57,426
委托回调会给予你

1046
00:33:57,426 --> 00:33:59,376
详细的关于你的任务状态的

1047
00:33:59,376 --> 00:34:01,546
逐步进展信息

1048
00:33:59,376 --> 00:34:01,546
逐步进展信息

1049
00:34:02,506 --> 00:34:04,236
便捷方法 正如

1050
00:34:04,236 --> 00:34:06,516
它的名字那样 是一种

1051
00:34:06,516 --> 00:34:09,246
快速简便的使用 API 的方法

1052
00:34:10,795 --> 00:34:13,106
使用便捷方法的话

1053
00:34:13,106 --> 00:34:14,565
你不会收到任何中间的

1054
00:34:14,565 --> 00:34:16,466
委托回调 你只会得到

1055
00:34:16,466 --> 00:34:18,346
汇报给 completionHandler 的

1056
00:34:18,346 --> 00:34:19,246
最终结果

1057
00:34:21,005 --> 00:34:22,626
不要在同一个 URLSession 上

1058
00:34:22,626 --> 00:34:24,636
混合使用这两种方法

1059
00:34:24,636 --> 00:34:25,456
选择其中一个并且保持一致

1060
00:34:26,536 --> 00:34:27,356
如果你使用

1061
00:34:27,396 --> 00:34:28,985
completionHandler 你不会获得

1062
00:34:28,985 --> 00:34:30,876
委托回调 但是有以下

1063
00:34:30,916 --> 00:34:31,846
两种例外情况

1064
00:34:33,295 --> 00:34:35,706
如果网络现在不可用

1065
00:34:35,706 --> 00:34:37,795
以及任务正在

1066
00:34:37,795 --> 00:34:39,815
等待连接

1067
00:34:39,815 --> 00:34:41,565
你会收到通知

1068
00:34:41,565 --> 00:34:42,936
以便你在你的

1069
00:34:42,976 --> 00:34:44,396
UI 上显示任何提示

1070
00:34:44,396 --> 00:34:45,786
另一个你会收到通知的

1071
00:34:45,786 --> 00:34:47,636
委托功能是

1072
00:34:47,636 --> 00:34:48,376
didReceive

1073
00:34:48,376 --> 00:34:49,565
AuthenticationChallenge

1074
00:34:50,266 --> 00:34:54,656
那么总结一下

1075
00:34:54,706 --> 00:34:58,636
你可以用的几种选项

1076
00:34:58,636 --> 00:35:00,416
我们推荐你

1077
00:34:58,636 --> 00:35:00,416
我们推荐你

1078
00:35:00,416 --> 00:35:03,516
用 waitsForConnectivity 在进程中

1079
00:35:03,516 --> 00:35:05,206
完成 URLSessionTasks

1080
00:35:06,206 --> 00:35:07,486
如果可以的话任务会立刻开始

1081
00:35:07,486 --> 00:35:10,266
但是如果无法立刻开始的话

1082
00:35:10,266 --> 00:35:11,776
它会在能开始的时候马上开始

1083
00:35:13,226 --> 00:35:14,666
你还可以选择

1084
00:35:14,666 --> 00:35:16,176
在后台完成任务

1085
00:35:17,346 --> 00:35:18,516
你可以选择后台的

1086
00:35:18,516 --> 00:35:20,346
自主任务

1087
00:35:20,346 --> 00:35:22,406
它会等到电池电量

1088
00:35:22,406 --> 00:35:25,776
和 Wi-Fi 都最佳的时机开始

1089
00:35:30,356 --> 00:35:31,816
现在我想要谈一谈一些

1090
00:35:31,816 --> 00:35:33,606
正在进行的开发

1091
00:35:35,386 --> 00:35:36,616
我想在座的很多人

1092
00:35:36,616 --> 00:35:38,686
都听说过 TLS 1.3

1093
00:35:39,596 --> 00:35:41,716
TLS 即安全传输层协议

1094
00:35:41,716 --> 00:35:43,566
在网络上加密

1095
00:35:43,566 --> 00:35:45,516
你的数据以防止

1096
00:35:45,516 --> 00:35:47,966
窃听者看到它

1097
00:35:48,276 --> 00:35:50,636
也许同样重要的是

1098
00:35:50,636 --> 00:35:51,816
保证你连到了

1099
00:35:51,886 --> 00:35:53,066
你想要连接的

1100
00:35:53,066 --> 00:35:53,596
那个服务器

1101
00:35:54,506 --> 00:35:57,646
在这个阶段 TLS 1.2

1102
00:35:57,646 --> 00:35:58,116
是很落伍了

1103
00:35:58,116 --> 00:35:59,516
我们发现它有

1104
00:35:59,516 --> 00:36:00,426
一系列的问题

1105
00:35:59,516 --> 00:36:00,426
一系列的问题

1106
00:36:00,996 --> 00:36:04,696
TLS 1.3 已经基本完成了

1107
00:36:05,426 --> 00:36:06,706
标准还没有最终敲定

1108
00:36:07,966 --> 00:36:09,996
目前苹果正在参与

1109
00:36:09,996 --> 00:36:13,686
IETF 工作小组

1110
00:36:13,686 --> 00:36:14,756
我们预计大概今年年底

1111
00:36:14,756 --> 00:36:15,526
会完成

1112
00:36:16,256 --> 00:36:17,456
同时 如果你们现在就想

1113
00:36:17,456 --> 00:36:19,666
实验一下的话 我们有一个

1114
00:36:19,666 --> 00:36:21,136
执行草案

1115
00:36:21,816 --> 00:36:23,726
如果你查看

1116
00:36:23,726 --> 00:36:26,146
本次苹果开发者大会的

1117
00:36:26,146 --> 00:36:27,326
安全部分

1118
00:36:27,326 --> 00:36:29,566
你会了解到如何试用它

1119
00:36:30,446 --> 00:36:32,036
你们可能还听说过

1120
00:36:32,036 --> 00:36:32,736
QUIC

1121
00:36:33,706 --> 00:36:35,786
QUIC 是一个新的传输协议

1122
00:36:36,236 --> 00:36:39,236
为试验那些

1123
00:36:39,236 --> 00:36:41,666
TCP 无法支持的新点子而设计

1124
00:36:42,716 --> 00:36:43,886
QUIC 最初是

1125
00:36:43,886 --> 00:36:45,156
一些谷歌工程师的一个试验

1126
00:36:45,156 --> 00:36:47,546
而这个试验

1127
00:36:47,896 --> 00:36:49,186
非常成功

1128
00:36:49,236 --> 00:36:50,096
他们从中学到了很多

1129
00:36:50,256 --> 00:36:52,056
一些点子很好 同时也发现

1130
00:36:52,056 --> 00:36:53,446
一些点子并不是像

1131
00:36:53,446 --> 00:36:55,116
他们以为的那样

1132
00:36:55,766 --> 00:36:58,346
那些工程师把

1133
00:36:58,346 --> 00:36:59,916
他们从中得到的经验带到了

1134
00:36:59,916 --> 00:37:00,646
IETF

1135
00:36:59,916 --> 00:37:00,646
IETF

1136
00:37:00,646 --> 00:37:02,306
我们已经组成了一个

1137
00:37:02,306 --> 00:37:03,916
新的工作小组来开发 IETF

1138
00:37:03,916 --> 00:37:05,346
标准的 QUIC 协议

1139
00:37:06,316 --> 00:37:07,856
苹果也参与了

1140
00:37:07,856 --> 00:37:08,796
这个工作小组

1141
00:37:08,946 --> 00:37:10,626
它没有像

1142
00:37:10,796 --> 00:37:12,666
TLS 那么成熟 但是它也已经 

1143
00:37:12,666 --> 00:37:13,746
获得了很好的进展

1144
00:37:17,416 --> 00:37:19,516
在结束之前

1145
00:37:19,516 --> 00:37:20,676
我们还要再谈一件事情

1146
00:37:21,496 --> 00:37:22,206
Bonjour

1147
00:37:25,036 --> 00:37:27,866
十五年前 也是在这个

1148
00:37:27,866 --> 00:37:29,946
圣荷西的会议中心

1149
00:37:30,616 --> 00:37:32,506
乔布斯向世界宣布了 Bonjour 

1150
00:37:33,246 --> 00:37:35,326
而我有机会向你们

1151
00:37:35,326 --> 00:37:37,056
介绍它是如何工作的

1152
00:37:37,456 --> 00:37:39,196
那之后发生了很多事情

1153
00:37:40,356 --> 00:37:44,686
自从我们在 2004 年推出了 Bonjour

1154
00:37:44,686 --> 00:37:46,786
我们将它用在了 Windows 上

1155
00:37:46,786 --> 00:37:47,526
用在了 Linux 上

1156
00:37:47,606 --> 00:37:49,046
我们也有了 Java API

1157
00:37:50,356 --> 00:37:52,476
第二年 Mac OS X 10.4

1158
00:37:52,476 --> 00:37:54,306
推出了广域 Bonjour

1159
00:37:54,456 --> 00:37:55,596
来补充在 Mac OS 10.2 中发布的

1160
00:37:55,596 --> 00:37:57,396
本地的基于多路传送的

1161
00:37:57,396 --> 00:37:59,886
Bonjour 

1162
00:38:01,726 --> 00:38:03,526
同一年 Linux 开发者

1163
00:38:03,526 --> 00:38:04,986
做出了一个

1164
00:38:04,986 --> 00:38:06,556
完全独立的

1165
00:38:06,556 --> 00:38:08,456
有 GPL 执照的

1166
00:38:08,456 --> 00:38:09,776
Bonjour 版本 叫做 Avahi

1167
00:38:11,126 --> 00:38:12,566
之后几年

1168
00:38:13,256 --> 00:38:15,226
苹果提出了 Back to My Mac

1169
00:38:15,736 --> 00:38:17,956
它是建立在 10.4 系统中推出的

1170
00:38:17,956 --> 00:38:19,666
广域 Bonjour 功能上的

1171
00:38:21,476 --> 00:38:23,796
2009 年 我们推出了

1172
00:38:23,796 --> 00:38:26,026
Bonjour Sleep Proxy

1173
00:38:26,026 --> 00:38:27,196
允许你在你的主页使用 Back to Your Mac 

1174
00:38:27,196 --> 00:38:28,686
即使它为了节省电量

1175
00:38:28,686 --> 00:38:29,666
而处于休眠状态

1176
00:38:30,306 --> 00:38:33,216
在那之后过了几年

1177
00:38:33,266 --> 00:38:35,566
2012 年安卓利用他们自己的 API

1178
00:38:35,566 --> 00:38:38,386
也采用了 Bonjour

1179
00:38:38,386 --> 00:38:40,556
如果你们中有人关注了的话

1180
00:38:40,556 --> 00:38:41,606
那是在 API 16 级

1181
00:38:42,406 --> 00:38:43,936
几年前

1182
00:38:44,076 --> 00:38:45,626
Windows 10 添加了

1183
00:38:45,706 --> 00:38:47,206
他们自己的 Bonjour 支持

1184
00:38:47,756 --> 00:38:48,936
现在 我知道在座的各位

1185
00:38:48,936 --> 00:38:50,376
已经非常清楚这段历史了

1186
00:38:51,236 --> 00:38:52,846
我们知道采用 Bonjour 的

1187
00:38:52,846 --> 00:38:54,596
主要操作系统供应商

1188
00:38:55,726 --> 00:38:57,116
但是发生了一些其他的事情

1189
00:38:57,116 --> 00:38:59,366
甚至也让我感到惊讶

1190
00:38:59,366 --> 00:39:01,616
Bonjour 开始出现在很多

1191
00:38:59,366 --> 00:39:01,616
Bonjour 开始出现在很多

1192
00:39:01,616 --> 00:39:02,416
其他的地方

1193
00:39:02,666 --> 00:39:04,066
我想用我的一个

1194
00:39:04,326 --> 00:39:05,456
个人经历来说明

1195
00:39:06,066 --> 00:39:07,586
我最近新买了一个房子

1196
00:39:08,316 --> 00:39:09,716
作为买新房的过程的

1197
00:39:09,716 --> 00:39:11,126
一部分 你往往

1198
00:39:11,126 --> 00:39:12,116
最终会买一些别的新东西

1199
00:39:13,136 --> 00:39:14,816
于是我开始往我的新家里

1200
00:39:14,816 --> 00:39:16,706
添新东西 并且开始

1201
00:39:16,706 --> 00:39:17,346
把它们联入网络

1202
00:39:17,966 --> 00:39:19,426
然后我开始发现

1203
00:39:19,426 --> 00:39:20,896
很多东西都采用了 Bonjour

1204
00:39:20,896 --> 00:39:22,246
现在 我买了一个新打印机

1205
00:39:22,246 --> 00:39:23,026
它有 Bonjour

1206
00:39:23,236 --> 00:39:25,266
我买了一些联网的

1207
00:39:25,266 --> 00:39:26,786
安全摄像头 它们也有 Bonjour

1208
00:39:27,316 --> 00:39:28,916
这没有惊吓到我

1209
00:39:28,916 --> 00:39:30,686
因为我们知道打印机和

1210
00:39:30,686 --> 00:39:31,956
联网摄像机是

1211
00:39:31,956 --> 00:39:33,386
最先采用 Bonjour 的设备

1212
00:39:35,056 --> 00:39:37,326
然后我买了一个环绕声音响

1213
00:39:37,326 --> 00:39:41,216
它有 Wi-Fi 功能

1214
00:39:41,216 --> 00:39:43,276
并且它有一个采用 Bonjour 的

1215
00:39:43,546 --> 00:39:44,536
嵌入式网络服务器

1216
00:39:45,066 --> 00:39:46,346
现在你可以使用

1217
00:39:46,346 --> 00:39:47,946
电视和远程控制

1218
00:39:47,946 --> 00:39:50,136
来设置这个音响

1219
00:39:50,136 --> 00:39:51,956
但是输入名字时

1220
00:39:51,956 --> 00:39:53,286
使用远程控制器的上下左右四个键

1221
00:39:53,286 --> 00:39:54,586
一个字母一个字母的输入

1222
00:39:54,586 --> 00:39:55,056
是非常烦的

1223
00:39:55,396 --> 00:39:56,536
能够在我的笔记本电脑

1224
00:39:56,536 --> 00:39:58,966
或者 27 英寸屏幕的 iMac 上

1225
00:39:59,126 --> 00:40:00,956
使用键盘和鼠标

1226
00:39:59,126 --> 00:40:00,956
使用键盘和鼠标

1227
00:40:00,956 --> 00:40:03,206
来设置这个新设备

1228
00:40:03,206 --> 00:40:04,046
是多好的一件事儿

1229
00:40:04,166 --> 00:40:06,216
我从另一个不同的公司

1230
00:40:06,216 --> 00:40:07,536
购买了另一个音响

1231
00:40:07,536 --> 00:40:08,116
它也同样有 Bonjour

1232
00:40:08,826 --> 00:40:10,276
我买了放在屋顶的

1233
00:40:10,276 --> 00:40:11,556
太阳能板来减轻

1234
00:40:11,556 --> 00:40:13,516
电费的压力

1235
00:40:13,836 --> 00:40:16,356
它的变频器有 Wi-Fi 功能

1236
00:40:16,356 --> 00:40:18,696
并有一个打着 Bonjour 广告的嵌入式网络服务器

1237
00:40:19,016 --> 00:40:21,166
现在我只需要点一下鼠标

1238
00:40:21,166 --> 00:40:22,966
就能看到一个

1239
00:40:23,006 --> 00:40:25,056
今天产生了多少电量的图表

1240
00:40:25,056 --> 00:40:27,306
我最近买的一样东西是

1241
00:40:27,306 --> 00:40:29,846
一个用来控制灌溉我的草坪的

1242
00:40:29,846 --> 00:40:30,996
灌溉控制器

1243
00:40:32,256 --> 00:40:34,136
它也有 Wi-Fi 功能并且

1244
00:40:34,136 --> 00:40:35,896
有一个打了 Bounjour 广告的

1245
00:40:35,896 --> 00:40:36,586
嵌入式网络服务器

1246
00:40:37,166 --> 00:40:38,656
比起试图

1247
00:40:38,656 --> 00:40:40,326
用一个两位的 LCD 屏幕

1248
00:40:40,326 --> 00:40:42,196
以及一个加减号的键

1249
00:40:42,246 --> 00:40:44,186
来设置你的喷头

1250
00:40:44,186 --> 00:40:45,916
能够同时在我的

1251
00:40:45,916 --> 00:40:47,576
iMac 的大屏幕上看到这一切

1252
00:40:47,576 --> 00:40:47,976
是多么美好的体验

1253
00:40:48,516 --> 00:40:54,546
[ 掌声 ]

1254
00:40:55,046 --> 00:40:56,626
谢谢你们这些创造者

1255
00:40:56,626 --> 00:40:57,696
创造了这么多

1256
00:40:57,696 --> 00:40:58,576
美好的产品

1257
00:40:58,896 --> 00:41:00,646
对于在座的各位 app 开发者

1258
00:40:58,896 --> 00:41:00,646
对于在座的各位 app 开发者

1259
00:41:00,646 --> 00:41:03,446
这会对你有什么影响呢

1260
00:41:04,046 --> 00:41:05,906
IETF DNS Service Discovery

1261
00:41:05,906 --> 00:41:07,696
工作小组继续取得进展

1262
00:41:09,686 --> 00:41:11,566
我们有了一些新改进

1263
00:41:11,566 --> 00:41:13,466
可以在多路径传送不高效的

1264
00:41:13,466 --> 00:41:15,266
企业网络上

1265
00:41:15,266 --> 00:41:16,926
以及新的网格状

1266
00:41:16,926 --> 00:41:18,166
网络技术 比如

1267
00:41:18,266 --> 00:41:19,686
Thread 这样不支持多路径传送的网络

1268
00:41:19,686 --> 00:41:20,516
服务发现

1269
00:41:21,176 --> 00:41:22,756
对于 app 开发者而言

1270
00:41:22,816 --> 00:41:23,826
好消息是它已经

1271
00:41:23,826 --> 00:41:25,146
对你的 app 完全公开了

1272
00:41:25,146 --> 00:41:26,796
API 没有什么变化

1273
00:41:26,796 --> 00:41:28,716
因为我们甚至在 15 年前

1274
00:41:28,716 --> 00:41:29,666
就预见到了这个问题

1275
00:41:30,276 --> 00:41:32,146
唯一需要记住的是

1276
00:41:32,146 --> 00:41:33,876
当你调用浏览器时

1277
00:41:33,876 --> 00:41:35,286
你会获得一个名称 类型

1278
00:41:35,286 --> 00:41:37,226
和域名 你要注意全部三个

1279
00:41:38,016 --> 00:41:41,256
你可能习惯于看到

1280
00:41:41,256 --> 00:41:43,136
域名总是本地的

1281
00:41:43,136 --> 00:41:44,266
然而现在它可能不是本地的

1282
00:41:44,606 --> 00:41:46,816
所以当你调用结束后

1283
00:41:46,816 --> 00:41:48,476
要记得回传你从

1284
00:41:48,476 --> 00:41:49,616
浏览调用中获得的

1285
00:41:49,616 --> 00:41:49,866
名称 类型和域名

1286
00:41:50,066 --> 00:41:51,796
而对于在座的设备制者来说

1287
00:41:51,796 --> 00:41:54,006
不要忘记支持

1288
00:41:54,176 --> 00:41:55,226
本地链接寻址

1289
00:41:55,326 --> 00:41:56,506
本地链接寻址是

1290
00:41:56,506 --> 00:41:58,156
在本地网络中连接到一个设备的

1291
00:41:58,156 --> 00:41:59,486
最值得信赖的方式

1292
00:42:00,316 --> 00:42:02,186
因为如果你无法配置它

1293
00:42:02,186 --> 00:42:03,726
你也就不会配置错了

1294
00:42:04,516 --> 00:42:07,086
[ 笑声 ]

1295
00:42:07,586 --> 00:42:10,066
好了我们总结一下

1296
00:42:10,096 --> 00:42:12,386
第一部分我们聊到了目前的

1297
00:42:12,486 --> 00:42:12,826
ECN 方面的进展

1298
00:42:13,196 --> 00:42:14,636
现在客户端和

1299
00:42:14,636 --> 00:42:16,386
服务器都支持它 舞台已经搭好

1300
00:42:16,786 --> 00:42:18,636
现在任何 ISP 都可以

1301
00:42:18,636 --> 00:42:20,276
通过在关键的瓶颈链接处

1302
00:42:20,276 --> 00:42:21,996
打开 ECN 让他们的用户立刻感受到

1303
00:42:21,996 --> 00:42:22,896
它的好处

1304
00:42:23,776 --> 00:42:25,196
继续在 NAT64 上

1305
00:42:25,196 --> 00:42:25,626
测试你的 app

1306
00:42:25,676 --> 00:42:29,026
在大部分已知的用户中

1307
00:42:29,026 --> 00:42:30,266
我们很高兴看到一切都顺利进行

1308
00:42:32,766 --> 00:42:34,236
我们在用户空间网络

1309
00:42:34,236 --> 00:42:36,216
方面也做了一些进步

1310
00:42:36,216 --> 00:42:36,976
但是那也没有改变 API

1311
00:42:37,036 --> 00:42:39,126
但是当你在

1312
00:42:39,166 --> 00:42:40,586
调试和查看堆栈跟踪时

1313
00:42:40,586 --> 00:42:42,196
你可能会在堆栈跟踪中

1314
00:42:42,196 --> 00:42:43,366
看到一些你不熟悉的符号

1315
00:42:43,496 --> 00:42:44,886
你可能看到

1316
00:42:44,886 --> 00:42:45,626
在 CPU 用量方面的不同

1317
00:42:45,986 --> 00:42:46,966
我们希望你可以了解这件事

1318
00:42:46,966 --> 00:42:48,246
这样你就不会过于惊讶

1319
00:42:49,196 --> 00:42:51,426
我们在网络扩展框架方面

1320
00:42:51,426 --> 00:42:52,836
也提出了新的功能

1321
00:42:53,436 --> 00:42:55,116
一个重磅消息是

1322
00:42:55,196 --> 00:42:58,346
用在 Siri 上的多路径 TCP

1323
00:42:58,496 --> 00:42:59,836
现在也可以用在

1324
00:42:59,836 --> 00:43:00,736
你们的 app 上面了

1325
00:42:59,836 --> 00:43:00,736
你们的 app 上面了

1326
00:43:01,996 --> 00:43:02,706
谢谢

1327
00:43:03,516 --> 00:43:07,956
[ 掌声 ]

1328
00:43:08,456 --> 00:43:10,526
在第二部分我们谈到了一些

1329
00:43:10,526 --> 00:43:12,076
URLSession 的改进

1330
00:43:12,076 --> 00:43:12,736
尤其是

1331
00:43:12,736 --> 00:43:14,656
waitsForConnectivity

1332
00:43:14,656 --> 00:43:16,706
它是

1333
00:43:16,706 --> 00:43:18,326
真正的网络 API

1334
00:43:18,326 --> 00:43:18,576
应该有的样子

1335
00:43:18,856 --> 00:43:20,736
当你要求我们做什么时

1336
00:43:21,106 --> 00:43:22,476
我们应该马上去做

1337
00:43:22,476 --> 00:43:24,406
而不是用一些现在无法完成的

1338
00:43:24,406 --> 00:43:25,636
出错信息来烦你

1339
00:43:25,776 --> 00:43:27,196
你叫我们做 我们就在能做的时候

1340
00:43:27,196 --> 00:43:27,566
马上完成

1341
00:43:28,506 --> 00:43:29,736
我还给出了一些最佳做法的

1342
00:43:29,786 --> 00:43:33,296
建议和一些正在进行的

1343
00:43:33,296 --> 00:43:33,986
开发的最新消息

1344
00:43:34,826 --> 00:43:35,946
你可以在网上找到

1345
00:43:36,476 --> 00:43:37,706
关于这场会议的更多信息

1346
00:43:39,186 --> 00:43:41,196
我们推荐你们去听

1347
00:43:41,196 --> 00:43:42,586
一些其它的会议

1348
00:43:42,586 --> 00:43:44,216
你或许会觉得它们也很有趣

1349
00:43:44,866 --> 00:43:45,216
谢谢
