1
00:00:21,746 --> 00:00:22,666
&gt;&gt;  大家早上好

2
00:00:23,746 --> 00:00:24,756
抱歉有些技术

3
00:00:24,756 --> 00:00:25,476
故障

4
00:00:25,826 --> 00:00:26,656
但是现在我们准备好了

5
00:00:26,886 --> 00:00:27,716
好的

6
00:00:27,716 --> 00:00:28,826
我是 Sara Radi

7
00:00:28,826 --> 00:00:30,446
欢迎来到“Localizing with Xcode 9

8
00:00:30,446 --> 00:00:31,506
（使用 Xcode 9 进行本地化）”会议

9
00:00:31,506 --> 00:00:32,776
今天  我和我的同事

10
00:00:33,006 --> 00:00:34,236
Aya 和 Chris 想要

11
00:00:34,236 --> 00:00:35,806
跟大家聊聊一些令人兴奋的

12
00:00:36,056 --> 00:00:37,266
针对 Xcode 9 本地化流程所做的

13
00:00:37,266 --> 00:00:39,456
新的改进

14
00:00:39,906 --> 00:00:40,906
让我们开始吧

15
00:00:42,256 --> 00:00:45,786
在世界各地 

16
00:00:45,786 --> 00:00:47,506
有这么多的人在

17
00:00:47,506 --> 00:00:49,126
访问和使用你们开发的

18
00:00:49,126 --> 00:00:49,926
应用程序

19
00:00:50,336 --> 00:00:51,916
但是如果你

20
00:00:51,916 --> 00:00:53,126
不让他们以自己的母语

21
00:00:53,216 --> 00:00:55,046
来使用你的 App 的话 

22
00:00:55,046 --> 00:00:55,486
他们就无法做到这一点

23
00:00:57,286 --> 00:00:59,576
一个新的 App 可以通过

24
00:00:59,576 --> 00:01:01,246
一些简单的步骤和规范操作

25
00:00:59,576 --> 00:01:01,246
一些简单的步骤和规范操作

26
00:01:01,246 --> 00:01:02,756
轻松传达到

27
00:01:02,756 --> 00:01:03,336
全球受众

28
00:01:03,616 --> 00:01:05,355
另外在今天的会议上 我们会

29
00:01:05,355 --> 00:01:07,666
谈一谈 Xcode 如何

30
00:01:07,666 --> 00:01:09,246
使添加新的本地语言变得简单 

31
00:01:09,246 --> 00:01:11,476
这将使你的 App 

32
00:01:11,726 --> 00:01:13,376
有更好的本地化效果 

33
00:01:13,376 --> 00:01:14,236
助你走向全球市场

34
00:01:15,196 --> 00:01:17,146
所以  我们今天主要会谈到

35
00:01:17,146 --> 00:01:18,316
三个话题

36
00:01:18,956 --> 00:01:20,726
首先我们将介绍

37
00:01:20,726 --> 00:01:23,806
如何准备全球化  然后

38
00:01:23,806 --> 00:01:24,726
全面介绍

39
00:01:24,726 --> 00:01:26,396
Xcode 的本地化工作流

40
00:01:26,396 --> 00:01:28,356
以及我们在 Xcode 9

41
00:01:28,356 --> 00:01:29,556
里添加的新的功能

42
00:01:30,956 --> 00:01:32,006
最后  通过

43
00:01:32,006 --> 00:01:33,806
现场演示  我们会谈一谈

44
00:01:33,866 --> 00:01:35,436
测试  并且提供一些

45
00:01:35,436 --> 00:01:37,116
规范步骤来确保

46
00:01:37,116 --> 00:01:39,426
你的 App 在所有

47
00:01:39,426 --> 00:01:40,656
你所支持的语言环境下拥有良好的用户体验

48
00:01:40,926 --> 00:01:43,046
首先我们来谈谈

49
00:01:43,466 --> 00:01:44,646
国际化

50
00:01:47,636 --> 00:01:49,666
国际化是一个

51
00:01:49,736 --> 00:01:51,296
设计软件的过程 

52
00:01:51,296 --> 00:01:53,176
它要求你的软件可以适应

53
00:01:53,306 --> 00:01:54,936
不同的语言和

54
00:01:54,936 --> 00:01:56,856
地区  而不是每次在 App 里面添加

55
00:01:56,856 --> 00:01:58,956
新的语言的时候 

56
00:01:58,956 --> 00:02:00,536
都需要更改

57
00:01:58,956 --> 00:02:00,536
都需要更改

58
00:02:00,816 --> 00:02:00,926
代码

59
00:02:01,676 --> 00:02:02,936
所以  我想要说的是

60
00:02:02,936 --> 00:02:04,836
不管你的 App 

61
00:02:04,936 --> 00:02:06,256
是以哪种语言运行

62
00:02:06,796 --> 00:02:08,295
不管文字是短 

63
00:02:09,166 --> 00:02:12,196
还是长  或者高 

64
00:02:12,196 --> 00:02:14,336
甚至顺序是

65
00:02:14,336 --> 00:02:16,326
从右往左 

66
00:02:16,386 --> 00:02:17,526
它都应该能

67
00:02:17,526 --> 00:02:18,996
根据场景不同而灵活地

68
00:02:18,996 --> 00:02:19,686
适应

69
00:02:20,196 --> 00:02:22,996
全球化的

70
00:02:22,996 --> 00:02:24,746
第一步是

71
00:02:24,876 --> 00:02:26,136
管理你的字符串

72
00:02:26,786 --> 00:02:30,006
你的 App 中的字符串

73
00:02:30,006 --> 00:02:32,036
将由职业翻译人员

74
00:02:32,036 --> 00:02:32,816
翻译成对应的本地语言

75
00:02:33,796 --> 00:02:35,576
NSLocalizedString 就是

76
00:02:35,576 --> 00:02:37,166
为了让你更容易

77
00:02:37,166 --> 00:02:39,506
为你的翻译人员

78
00:02:39,506 --> 00:02:41,186
创建可本地化的内容 

79
00:02:41,226 --> 00:02:42,976
并在运行时显示正确的

80
00:02:43,036 --> 00:02:43,316
文本而存在的

81
00:02:44,116 --> 00:02:45,796
所以  如果你的字符串

82
00:02:45,796 --> 00:02:47,246
来源于 Storyboard 或者压缩 

83
00:02:47,246 --> 00:02:48,986
文档   他们会默认为可被本地化

84
00:02:48,986 --> 00:02:49,976
所以我们也就不用

85
00:02:49,976 --> 00:02:50,766
担心这些

86
00:02:51,226 --> 00:02:52,596
但是有的时候  某些

87
00:02:52,646 --> 00:02:54,426
字符串是在

88
00:02:54,426 --> 00:02:55,856
源代码中定义和生成

89
00:02:55,856 --> 00:02:57,226
并最终呈现给用户  例如

90
00:02:57,226 --> 00:02:59,336
错误消息  通知

91
00:02:59,336 --> 00:03:00,606
如果你想通知

92
00:02:59,336 --> 00:03:00,606
如果你想通知

93
00:03:00,606 --> 00:03:01,656
用户一些事情

94
00:03:02,036 --> 00:03:03,306
并且确保

95
00:03:03,526 --> 00:03:04,496
这些字符串也可以

96
00:03:04,496 --> 00:03:05,146
被本地化

97
00:03:05,716 --> 00:03:07,106
实现这一点  你只需要

98
00:03:07,106 --> 00:03:08,396
把这些字符串

99
00:03:08,606 --> 00:03:09,716
用 NSLocalizedString 包装起来

100
00:03:10,786 --> 00:03:12,826
另外  你可以将

101
00:03:13,006 --> 00:03:14,886
NSLocalizedString 作为

102
00:03:15,046 --> 00:03:16,026
格式化字符串并调用

103
00:03:16,276 --> 00:03:18,256
localizedStringWithFormat 来获得

104
00:03:18,256 --> 00:03:19,656
一条被本地化且格式化了的

105
00:03:19,796 --> 00:03:20,076
字符串

106
00:03:21,146 --> 00:03:22,286
那么  我们来一起看

107
00:03:22,286 --> 00:03:23,276
一个例程

108
00:03:24,276 --> 00:03:26,476
这里我们有一个 Label 控件 

109
00:03:26,546 --> 00:03:28,066
我把它的内容设置为

110
00:03:28,066 --> 00:03:28,806
“Population”

111
00:03:29,196 --> 00:03:30,976
这里我的字符串是硬编码

112
00:03:30,976 --> 00:03:32,436
并且不可本地化

113
00:03:33,126 --> 00:03:34,966
为了实现本地化  你需要

114
00:03:34,966 --> 00:03:36,366
用 NSLocalizedString 

115
00:03:36,366 --> 00:03:37,306
把它包装起来 

116
00:03:37,616 --> 00:03:39,456
如屏幕显示

117
00:03:39,496 --> 00:03:40,896
NSLocalizedString 有两个 

118
00:03:40,966 --> 00:03:43,276
参数  你的字符串和一条

119
00:03:43,276 --> 00:03:43,766
注释 

120
00:03:44,376 --> 00:03:45,976
注释对于翻译们来说

121
00:03:45,976 --> 00:03:47,246
真的非常重要

122
00:03:47,276 --> 00:03:48,456
因为这样他们才能知道

123
00:03:48,556 --> 00:03:50,246
自己翻译的字符串的

124
00:03:50,246 --> 00:03:51,006
上下文是什么

125
00:03:51,746 --> 00:03:54,106
我想说大部分时候

126
00:03:54,106 --> 00:03:55,086
你只需要使用

127
00:03:55,266 --> 00:03:57,666
NSLocalizedString 就够了  但是某些

128
00:03:57,666 --> 00:03:59,086
情况下  当你在构建

129
00:03:59,086 --> 00:04:00,156
框架或者共享

130
00:03:59,086 --> 00:04:00,156
框架或者共享

131
00:04:00,206 --> 00:04:02,326
模块时  你也许需要使用

132
00:04:02,326 --> 00:04:04,156
NSLocalizedString 读取对照表

133
00:04:04,476 --> 00:04:06,146
你只要确认对照表的名称

134
00:04:06,286 --> 00:04:07,406
NSLocalizedString 就会自动生成你想要的

135
00:04:07,406 --> 00:04:07,796
字符串

136
00:04:08,326 --> 00:04:11,526
如我之前提到的 

137
00:04:11,526 --> 00:04:12,806
你也可以结合

138
00:04:12,806 --> 00:04:13,846
NSLocalizedString 以及

139
00:04:13,846 --> 00:04:15,866
localizedStringWithFormat

140
00:04:15,996 --> 00:04:17,946
因为 NSLocalizedString 是

141
00:04:18,055 --> 00:04:18,305
格式字符串

142
00:04:18,456 --> 00:04:19,906
在这个例子里面 

143
00:04:19,906 --> 00:04:21,276
为你的翻译们提供那些评论

144
00:04:21,276 --> 00:04:22,306
真的至关重要 

145
00:04:22,306 --> 00:04:23,806
只有这样他们才知道自己

146
00:04:23,806 --> 00:04:25,316
翻译的字符串的

147
00:04:25,316 --> 00:04:26,066
上下文是什么

148
00:04:26,176 --> 00:04:29,996
等到那时候 

149
00:04:30,196 --> 00:04:32,036
NSLocalizedString 会检测

150
00:04:32,036 --> 00:04:33,656
用户的语言偏好

151
00:04:33,656 --> 00:04:36,596
并且找到对应的

152
00:04:36,596 --> 00:04:38,006
Localizable.strings 文档

153
00:04:38,506 --> 00:04:39,876
如你所见 

154
00:04:39,876 --> 00:04:42,016
这是一个 Localizable.strings 文档的例子 

155
00:04:42,016 --> 00:04:43,796
来自于以法文

156
00:04:43,796 --> 00:04:44,886
进行的本地化工程

157
00:04:45,336 --> 00:04:46,676
它包含你的所有

158
00:04:46,676 --> 00:04:47,626
本地化字符串

159
00:04:47,626 --> 00:04:48,896
比如你用 NSLocalizedString

160
00:04:48,986 --> 00:04:50,686
包装的字符串  以及

161
00:04:50,686 --> 00:04:51,896
你提供的注释

162
00:04:51,896 --> 00:04:53,896
这些信息也会

163
00:04:53,896 --> 00:04:56,316
提供给你的

164
00:04:57,316 --> 00:04:57,616
翻译人员

165
00:04:58,686 --> 00:05:00,486
如果你在 App 里

166
00:04:58,686 --> 00:05:00,486
如果你在 App 里

167
00:05:00,486 --> 00:05:01,936
使用 Objective-C  你可以通过运行

168
00:05:01,936 --> 00:05:03,736
静态分析器查找

169
00:05:03,736 --> 00:05:05,276
代码中的本地化问题 

170
00:05:05,276 --> 00:05:07,796
比如说你忘了

171
00:05:07,796 --> 00:05:09,516
将一条字符串本地化 或者是你忘了

172
00:05:09,516 --> 00:05:10,806
为本地化字符串

173
00:05:10,806 --> 00:05:13,356
添加注释  你可以运行

174
00:05:13,356 --> 00:05:14,776
静态分析器  然后获得

175
00:05:14,776 --> 00:05:16,256
警告  这些警告会提示

176
00:05:16,256 --> 00:05:17,786
你问题是什么  这样你就能

177
00:05:17,786 --> 00:05:19,146
在代码里面直接修改好

178
00:05:19,686 --> 00:05:20,786
如果你想了解更多

179
00:05:20,786 --> 00:05:22,406
静态分析器  请

180
00:05:22,406 --> 00:05:24,946
查看去年的

181
00:05:27,776 --> 00:05:27,896
演讲吧

182
00:05:28,126 --> 00:05:29,506
另外一件

183
00:05:29,506 --> 00:05:30,826
关于 App 在本地化时

184
00:05:30,826 --> 00:05:32,466
需要注意的事情 

185
00:05:32,466 --> 00:05:34,146
是协调不同的

186
00:05:34,146 --> 00:05:36,546
日期  时间  数字等的

187
00:05:36,646 --> 00:05:38,006
可视化表示形式

188
00:05:38,926 --> 00:05:41,596
例如 12 小时制

189
00:05:41,746 --> 00:05:43,506
是美国的标准时制格式 

190
00:05:43,506 --> 00:05:45,296
但是如果你想

191
00:05:45,296 --> 00:05:47,236
确保用户

192
00:05:47,236 --> 00:05:49,026
在法国使用你的 App 而他们

193
00:05:49,026 --> 00:05:51,316
得到的是 24 小时制 

194
00:05:51,316 --> 00:05:52,526
因为法国的默认格式

195
00:05:52,526 --> 00:05:53,916
就是这样的

196
00:05:55,156 --> 00:05:58,036
我们提供了多种

197
00:05:58,086 --> 00:05:59,596
强大的格式处理器

198
00:05:59,596 --> 00:06:01,166
可以让你

199
00:05:59,596 --> 00:06:01,166
可以让你

200
00:06:01,166 --> 00:06:03,566
按照地区处理复杂的数据 

201
00:06:03,566 --> 00:06:04,826
给大家演示一下

202
00:06:04,826 --> 00:06:06,466
格式处理器是如何工作的 

203
00:06:06,466 --> 00:06:07,856
我们来看一个数据格式处理器的

204
00:06:07,976 --> 00:06:08,496
例子

205
00:06:09,106 --> 00:06:13,346
假设你想

206
00:06:13,346 --> 00:06:15,446
在你的 App 中

207
00:06:15,446 --> 00:06:16,426
显示完整的数据格式

208
00:06:17,276 --> 00:06:20,136
不同于设置一条

209
00:06:20,136 --> 00:06:21,776
限定于

210
00:06:21,836 --> 00:06:23,766
某个区域或者有固定显示格式的国家的

211
00:06:23,766 --> 00:06:25,756
日期格式字符串  你可以使用

212
00:06:25,756 --> 00:06:27,986
.dateStyle

213
00:06:29,136 --> 00:06:30,396
这个格式处理器有多种不同的

214
00:06:30,396 --> 00:06:31,956
样式供你挑选

215
00:06:33,236 --> 00:06:34,296
但是既然我们想

216
00:06:34,296 --> 00:06:35,896
显示完整的日期格式 我将

217
00:06:35,956 --> 00:06:37,306
我的日期样式设置为显示全部

218
00:06:37,686 --> 00:06:39,066
这样我们就可以确保

219
00:06:39,066 --> 00:06:40,486
你的日期显示

220
00:06:40,546 --> 00:06:42,686
在世界上所有地区

221
00:06:42,686 --> 00:06:42,986
都是正确的格式

222
00:06:43,496 --> 00:06:45,956
如屏幕所示 

223
00:06:45,956 --> 00:06:47,226
美国和法国的

224
00:06:47,226 --> 00:06:48,806
日期格式

225
00:06:48,806 --> 00:06:49,946
有所不同

226
00:06:50,006 --> 00:06:51,176
比如说法国的日期没有

227
00:06:51,176 --> 00:06:52,036
任何逗号

228
00:06:52,406 --> 00:06:53,256
月份也不是

229
00:06:53,256 --> 00:06:53,986
大写

230
00:06:54,346 --> 00:06:55,426
具体日期显示在

231
00:06:55,426 --> 00:06:56,536
月份之前

232
00:06:56,696 --> 00:06:58,246
但是如果你输入的是

233
00:06:58,426 --> 00:07:00,046
日期格式而不是

234
00:06:58,426 --> 00:07:00,046
日期格式而不是

235
00:07:00,316 --> 00:07:03,266
日期样式

236
00:07:04,796 --> 00:07:05,116
这些是实现不了的

237
00:07:05,116 --> 00:07:06,736
除了日期格式处理器之外 

238
00:07:06,916 --> 00:07:09,006
我们还有一系列 

239
00:07:09,176 --> 00:07:10,976
针对常见数据种类的格式处理器

240
00:07:10,976 --> 00:07:11,776
他们在 Foundation 框架中随时可用

241
00:07:12,026 --> 00:07:13,226
所以  如果你想更多了解有关

242
00:07:13,226 --> 00:07:14,576
格式处理器的内容  请查看

243
00:07:14,576 --> 00:07:16,026
去年的这两个相关

244
00:07:17,006 --> 00:07:19,886
演讲

245
00:07:20,166 --> 00:07:22,236
最后  你想要确保

246
00:07:22,236 --> 00:07:23,656
你的用户界面

247
00:07:23,726 --> 00:07:25,476
灵活多变  并且在你

248
00:07:25,476 --> 00:07:26,986
所有支持的语言环境下都

249
00:07:26,986 --> 00:07:27,516
显示的干净清爽

250
00:07:28,386 --> 00:07:30,666
要实现这个  过程其实

251
00:07:30,666 --> 00:07:31,426
非常简单

252
00:07:32,066 --> 00:07:33,166
我们只需要使用

253
00:07:33,166 --> 00:07:35,176
Base Internationalization 和

254
00:07:35,176 --> 00:07:35,506
Auto Layout 就可以了

255
00:07:36,186 --> 00:07:37,486
那么 我们先来谈一谈 

256
00:07:37,486 --> 00:07:38,656
Base Internationalization

257
00:07:38,656 --> 00:07:39,086
吧

258
00:07:39,766 --> 00:07:42,196
通过启用你的工程中的

259
00:07:42,196 --> 00:07:43,486
Base Internationalization 

260
00:07:43,576 --> 00:07:46,066
Xcode 可以修改你的

261
00:07:46,136 --> 00:07:47,996
工程文件夹结构并且

262
00:07:47,996 --> 00:07:50,286
将你的 UI 从字符串中分离出来

263
00:07:50,286 --> 00:07:53,126
这就意味着任何

264
00:07:53,126 --> 00:07:54,526
与你的用户界面相关的

265
00:07:54,526 --> 00:07:56,816
文档   比如一个 SIM 文档或者一个

266
00:07:56,896 --> 00:07:59,016
Storyboard 文档会被存储在 

267
00:07:59,116 --> 00:08:00,336
Base.Iproj 中

268
00:07:59,116 --> 00:08:00,336
Base.Iproj 中

269
00:08:01,906 --> 00:08:03,376
当你的字符串  不管是

270
00:08:03,376 --> 00:08:04,736
来自 Storyboard 文档 

271
00:08:04,736 --> 00:08:07,486
或者来自你用 NSLocalizedString

272
00:08:07,486 --> 00:08:08,106
编写的代码  

273
00:08:08,166 --> 00:08:09,846
他们会

274
00:08:09,846 --> 00:08:11,746
存储在特定的语言

275
00:08:12,016 --> 00:08:12,446
文件夹里

276
00:08:13,266 --> 00:08:15,316
所以  以这种方式  你只有一组

277
00:08:15,396 --> 00:08:17,216
用户接口  而不是

278
00:08:17,216 --> 00:08:18,806
只要你在 App 里

279
00:08:18,806 --> 00:08:20,386
添加新的语言时

280
00:08:20,386 --> 00:08:22,946
每次都要复制你的 UI

281
00:08:23,176 --> 00:08:25,176
另外 Base Internationalization

282
00:08:25,176 --> 00:08:26,966
从 Xcode 5 开始就默认已经

283
00:08:26,966 --> 00:08:27,666
启用了

284
00:08:27,746 --> 00:08:29,166
所以  如果你想本地化一个

285
00:08:29,166 --> 00:08:30,216
之前的工程

286
00:08:30,546 --> 00:08:31,806
请确保你已经将它

287
00:08:31,806 --> 00:08:32,155
启用了

288
00:08:32,726 --> 00:08:36,956
另外  你也许已经

289
00:08:36,956 --> 00:08:38,866
对 Auto Layout 很熟悉了  或者

290
00:08:38,866 --> 00:08:39,966
你已经在用它支持

291
00:08:39,966 --> 00:08:42,056
App 里不同的

292
00:08:42,056 --> 00:08:43,576
显示功能  或者

293
00:08:43,576 --> 00:08:44,076
不同的屏幕尺寸

294
00:08:44,656 --> 00:08:45,896
但是 Auto Layout

295
00:08:45,896 --> 00:08:48,296
对本地化而言也是一项非常关键的

296
00:08:48,296 --> 00:08:49,076
技术

297
00:08:49,756 --> 00:08:51,216
所以  通过使用 Auto Layout

298
00:08:51,216 --> 00:08:52,806
你可以确保 App 的

299
00:08:52,876 --> 00:08:54,576
灵活性  并且可以适应

300
00:08:54,576 --> 00:08:55,696
不同的字符串长度和

301
00:08:55,696 --> 00:08:57,186
不同的 App

302
00:08:57,736 --> 00:08:57,806
配置

303
00:08:58,856 --> 00:09:00,856
在新的 Xcode 9 里  我们还有一个

304
00:08:58,856 --> 00:09:00,856
在新的 Xcode 9 里  我们还有一个

305
00:09:00,856 --> 00:09:02,626
全新的 Interface

306
00:09:02,626 --> 00:09:04,476
Builder 本地化警告功能

307
00:09:04,476 --> 00:09:06,106
使你的本地化

308
00:09:06,106 --> 00:09:08,296
限制生效  意思是说当你

309
00:09:08,296 --> 00:09:09,966
在 Storyboard 文档

310
00:09:09,966 --> 00:09:11,626
或者压缩文档里配置 UI 时

311
00:09:11,626 --> 00:09:12,816
你设置了这些

312
00:09:12,866 --> 00:09:14,346
限制但是他们并没有

313
00:09:14,346 --> 00:09:16,046
很好的进行本地化  你就会

314
00:09:16,046 --> 00:09:17,576
得到这些警告以及

315
00:09:17,616 --> 00:09:19,336
如何修复他们的建议

316
00:09:20,396 --> 00:09:21,556
新的 Interface Builder

317
00:09:21,556 --> 00:09:23,406
警告功能会在不久的将来

318
00:09:23,406 --> 00:09:24,156
可用

319
00:09:26,676 --> 00:09:28,606
另外在 Xcode 9 里 

320
00:09:28,606 --> 00:09:30,166
本地化选项的使用

321
00:09:30,166 --> 00:09:32,376
可以为你

322
00:09:32,376 --> 00:09:33,576
模拟本地化的

323
00:09:33,576 --> 00:09:34,156
环境

324
00:09:34,606 --> 00:09:36,926
所以不同于使用重复字符串 

325
00:09:36,926 --> 00:09:38,676
或者翻译的字符串去测试

326
00:09:38,676 --> 00:09:40,176
他们在 App 里显示的效果 

327
00:09:40,176 --> 00:09:41,576
你可以直接使用我们提供的

328
00:09:41,576 --> 00:09:43,626
本地化选项功能

329
00:09:43,626 --> 00:09:44,196
之一

330
00:09:44,526 --> 00:09:45,896
所以 在 Xcode 9 里  我们有更多新的

331
00:09:45,896 --> 00:09:47,346
选择  比如针对带重音符的拉丁语

332
00:09:47,416 --> 00:09:49,366
字符串  带词缀的字符串和

333
00:09:49,366 --> 00:09:50,596
顺序是从右往左的

334
00:09:50,596 --> 00:09:51,076
语言

335
00:09:51,126 --> 00:09:53,786
与此同时  我想邀请

336
00:09:53,786 --> 00:09:56,236
Ava 上台给大家演示一下

337
00:09:56,236 --> 00:09:57,776
如何准备你的 

338
00:09:57,856 --> 00:09:58,846
App 本地化

339
00:09:59,116 --> 00:09:59,496
谢谢

340
00:10:00,516 --> 00:10:05,786
[掌声]

341
00:10:06,286 --> 00:10:06,976
&gt;&gt;  谢谢 Sara

342
00:10:13,006 --> 00:10:15,576
嗨 我是 Aya  今天我想给

343
00:10:15,576 --> 00:10:17,136
大家展示一个我制作的

344
00:10:17,136 --> 00:10:18,266
非常酷炫的 App

345
00:10:18,266 --> 00:10:19,446
叫做 International Flags

346
00:10:20,026 --> 00:10:21,596
如屏幕所示  我的 UI

347
00:10:21,596 --> 00:10:23,076
占据了大部分表视图控件 

348
00:10:23,076 --> 00:10:25,526
用户可以从这个清单里

349
00:10:25,526 --> 00:10:27,546
选择国家或地区 

350
00:10:28,146 --> 00:10:29,056
并且他们也能看到一些

351
00:10:29,056 --> 00:10:30,236
相关信息  比如

352
00:10:30,236 --> 00:10:33,056
国旗  人口  甚至是

353
00:10:33,056 --> 00:10:34,116
语言的人口占比

354
00:10:35,566 --> 00:10:36,946
所以  我确保了我的 App

355
00:10:37,046 --> 00:10:38,116
用英语可以显示的很漂亮

356
00:10:38,116 --> 00:10:39,206
并且我对它显示的方式

357
00:10:39,206 --> 00:10:41,536
很满意  但是现在我想

358
00:10:41,536 --> 00:10:43,176
让它国际化  这样才能为我的初次本地化

359
00:10:43,176 --> 00:10:44,966
做好准备

360
00:10:45,676 --> 00:10:46,856
为了实现这一点

361
00:10:46,856 --> 00:10:48,576
我按照刚刚 Sara 在幻灯片里

362
00:10:48,576 --> 00:10:49,906
展示的步骤操作

363
00:10:50,616 --> 00:10:51,936
所以  我要做的第一步是

364
00:10:51,936 --> 00:10:53,306
我的字符串管理

365
00:10:54,096 --> 00:10:56,016
我现在以代码的形式载入 

366
00:10:56,016 --> 00:10:57,866
单元里所有的这些字符串

367
00:10:57,866 --> 00:11:00,276
打开我的 Xcode 

368
00:10:57,866 --> 00:11:00,276
打开我的 Xcode 

369
00:11:00,276 --> 00:11:00,736
工程

370
00:11:06,546 --> 00:11:08,626
在我的表格视图控件中 

371
00:11:08,736 --> 00:11:10,646
在行路径函数单元格中 

372
00:11:10,646 --> 00:11:12,586
我要确定

373
00:11:12,586 --> 00:11:14,366
在我的 UI 里没有载入任何

374
00:11:14,366 --> 00:11:16,406
写死的字符串

375
00:11:16,406 --> 00:11:18,266
相反的  我要调用

376
00:11:18,266 --> 00:11:19,866
NSLocalizedString 来

377
00:11:19,866 --> 00:11:20,866
替换掉他们

378
00:11:21,626 --> 00:11:22,766
现在  我要删除英文字符串

379
00:11:22,766 --> 00:11:24,396
同时  我也会给出一条

380
00:11:24,396 --> 00:11:25,206
有用的注释

381
00:11:25,366 --> 00:11:28,526
所以  标签在选定的区域

382
00:11:28,896 --> 00:11:29,466
之前

383
00:11:29,796 --> 00:11:32,326
另外  我也往下看并

384
00:11:32,326 --> 00:11:33,346
确保我为

385
00:11:33,396 --> 00:11:35,336
所有其他的以代码形式载入的文本

386
00:11:35,336 --> 00:11:36,656
都调用了 NSLocalizedString

387
00:11:37,746 --> 00:11:39,586
那么接下来我想做的是

388
00:11:39,586 --> 00:11:41,536
要确保

389
00:11:41,536 --> 00:11:42,946
现在显示的是

390
00:11:42,946 --> 00:11:44,206
对应语言区的

391
00:11:44,206 --> 00:11:44,646
正确数据

392
00:11:45,476 --> 00:11:48,406
在这个事例中  我的数据  或者说

393
00:11:48,406 --> 00:11:50,086
大部分你看到的

394
00:11:50,086 --> 00:11:51,076
右边的这些数字

395
00:11:51,646 --> 00:11:52,956
在不同国家的

396
00:11:52,956 --> 00:11:53,966
展示的方式

397
00:11:53,966 --> 00:11:54,416
也不尽相同

398
00:11:54,506 --> 00:11:56,936
那么  想要对他们进行正确排版 

399
00:11:57,116 --> 00:11:58,196
我将使用

400
00:11:58,196 --> 00:11:59,086
数字格式处理器

401
00:12:00,526 --> 00:12:02,676
数字格式处理器与之前

402
00:12:03,006 --> 00:12:05,176
Sara 给我们展示的

403
00:12:05,176 --> 00:12:06,986
日期格式处理器类似  当然除了它是

404
00:12:06,986 --> 00:12:08,866
用来做数字排版而不是

405
00:12:08,866 --> 00:12:09,306
日期的

406
00:12:10,296 --> 00:12:12,316
所以  对于人口数量来说  我可以

407
00:12:12,316 --> 00:12:13,976
设置我的数字格式

408
00:12:13,976 --> 00:12:14,566
到小数位

409
00:12:15,106 --> 00:12:16,916
我把 usesGroupingSeparator

410
00:12:16,916 --> 00:12:17,396
设置为真

411
00:12:17,896 --> 00:12:19,426
这样通过千位分隔符

412
00:12:19,426 --> 00:12:20,636
数字会更加易于

413
00:12:20,636 --> 00:12:21,256
阅读

414
00:12:21,346 --> 00:12:23,756
因为人口数量

415
00:12:24,256 --> 00:12:28,566
一般都是一个比较大的数字

416
00:12:28,566 --> 00:12:29,926
针对 GDP  我也可以用

417
00:12:29,926 --> 00:12:31,656
数字格式处理器  只是这次

418
00:12:31,656 --> 00:12:33,086
我会设置数字样式为

419
00:12:33,086 --> 00:12:35,146
货币  货币符号代码为

420
00:12:35,146 --> 00:12:36,586
美元  因为我们的

421
00:12:36,586 --> 00:12:38,286
数据是美元

422
00:12:38,876 --> 00:12:41,936
最后  对于识字率

423
00:12:41,936 --> 00:12:43,666
和语言人口占比

424
00:12:43,666 --> 00:12:45,696
我将数字样式设置

425
00:12:45,696 --> 00:12:46,986
为百分比

426
00:12:47,706 --> 00:12:50,036
然后  我会给它一个最大和

427
00:12:50,036 --> 00:12:51,636
最小的小数位位数以确保

428
00:12:51,636 --> 00:12:52,646
前后一致

429
00:12:54,216 --> 00:12:55,266
所以  现在我的字符串是

430
00:12:55,266 --> 00:12:57,206
可被本地化的  并且

431
00:12:57,206 --> 00:12:58,936
正确地显示出了数字的排版格式 

432
00:12:58,936 --> 00:13:00,726
接下来

433
00:12:58,936 --> 00:13:00,726
接下来

434
00:13:00,726 --> 00:13:02,156
我要做的是  确保

435
00:13:02,156 --> 00:13:03,966
我的用户界面也已准备就绪

436
00:13:04,856 --> 00:13:07,076
为了实现这一点  我需要

437
00:13:07,076 --> 00:13:08,596
打开我的主 Storyboard

438
00:13:09,586 --> 00:13:11,566
另外  我想给大家演示一下

439
00:13:11,976 --> 00:13:13,476
如何在 Interface Builder 预览里使用

440
00:13:13,476 --> 00:13:15,846
伪语言

441
00:13:16,056 --> 00:13:18,396
测试 App 的本地化

442
00:13:19,236 --> 00:13:20,986
首先我点击一下

443
00:13:20,986 --> 00:13:22,766
右上方的

444
00:13:22,766 --> 00:13:23,876
助理编辑图标

445
00:13:24,776 --> 00:13:26,536
然后在下拉菜单里面 

446
00:13:26,536 --> 00:13:28,136
选择“Preview（预览）”

447
00:13:29,076 --> 00:13:30,326
然后它就会显示出我的

448
00:13:30,326 --> 00:13:31,716
Storyboard 预览情况

449
00:13:32,856 --> 00:13:34,336
在右下角 

450
00:13:35,606 --> 00:13:36,946
我会看到一个语言选择选项

451
00:13:37,776 --> 00:13:39,536
如果我的工程里有

452
00:13:39,536 --> 00:13:41,506
任何本地化内容  我就会在这里

453
00:13:41,546 --> 00:13:41,836
看到

454
00:13:42,216 --> 00:13:43,616
但在这个事例当中  它显示的是

455
00:13:43,616 --> 00:13:45,826
所有我可以在预览里

456
00:13:45,826 --> 00:13:46,896
使用的

457
00:13:46,896 --> 00:13:47,346
伪语言选项

458
00:13:48,286 --> 00:13:49,516
在全新的 Xcode 9 里  我们刚刚

459
00:13:49,516 --> 00:13:50,466
介绍了固定的

460
00:13:50,546 --> 00:13:51,816
伪语言  现在我选定它之后

461
00:13:51,816 --> 00:13:53,146
看看它到底能做些什么

462
00:13:54,326 --> 00:13:55,806
如你所见  它在每个字符串

463
00:13:55,806 --> 00:13:57,226
之前和之后

464
00:13:57,226 --> 00:13:58,776
都添加了

465
00:13:58,776 --> 00:13:59,446
方括号和英镑符号

466
00:14:00,606 --> 00:14:02,166
这样就很容易看到

467
00:14:02,166 --> 00:14:03,736
有什么东西在我的 UI

468
00:14:03,736 --> 00:14:05,326
重叠或者不匹配  因为

469
00:14:05,566 --> 00:14:06,706
那些符号会消失

470
00:14:07,446 --> 00:14:08,556
所以  在这个例子里 

471
00:14:08,556 --> 00:14:10,006
下面的按钮好像没有

472
00:14:10,006 --> 00:14:11,036
英镑符号

473
00:14:11,036 --> 00:14:11,906
这是我第一眼就

474
00:14:11,906 --> 00:14:12,226
看到的

475
00:14:12,656 --> 00:14:13,846
但是  如果你进一步查看

476
00:14:13,846 --> 00:14:15,646
甚至“Play”里面的“y”也是重叠的

477
00:14:15,646 --> 00:14:17,436
所以现在我回到

478
00:14:17,436 --> 00:14:19,746
Storyboard 里检查为什么会这样

479
00:14:21,156 --> 00:14:22,606
结果好像是我有一个固定的

480
00:14:22,606 --> 00:14:24,196
宽度限制 

481
00:14:24,196 --> 00:14:25,656
但是在这个例子里面其实完全没有必要 

482
00:14:25,656 --> 00:14:26,916
而且一般来说 

483
00:14:26,916 --> 00:14:29,936
对于文本控制的固定宽度限制

484
00:14:29,936 --> 00:14:31,636
在本地化时并不是一件好事

485
00:14:32,566 --> 00:14:34,546
所以  如果我去掉它 

486
00:14:34,616 --> 00:14:36,176
你会看到我的伪语言

487
00:14:36,246 --> 00:14:37,856
与预期的完全一样 

488
00:14:37,856 --> 00:14:42,436
并且现在我确定不会再有

489
00:14:43,256 --> 00:14:44,246
任何重叠了

490
00:14:44,286 --> 00:14:45,556
这些 Interface Builder

491
00:14:45,556 --> 00:14:47,186
预览会更加有用 

492
00:14:47,186 --> 00:14:48,406
如果你能在 Storyboard 里

493
00:14:48,406 --> 00:14:49,756
定义了更多的 UI 界面

494
00:14:50,466 --> 00:14:52,436
就我而言  我的很多 UI

495
00:14:52,436 --> 00:14:53,616
都是在我的表格视图控件里

496
00:14:53,616 --> 00:14:54,166
载入的

497
00:14:54,776 --> 00:14:56,276
所以  我还想演示一下

498
00:14:56,276 --> 00:14:57,736
如何在运行时下使用伪语言

499
00:14:57,736 --> 00:15:01,156
测试载入情况

500
00:14:57,736 --> 00:15:01,156
测试载入情况

501
00:15:01,386 --> 00:15:03,736
如果我点击我的 Scheme

502
00:15:03,736 --> 00:15:06,166
选择“Edit Scheme（编辑 Scheme）” 请确保

503
00:15:06,166 --> 00:15:07,446
在边栏里有

504
00:15:07,446 --> 00:15:08,056
运行选定的选项 

505
00:15:08,846 --> 00:15:10,396
在应用程序语言选项里 

506
00:15:10,396 --> 00:15:11,686
你看到一列可供选择的

507
00:15:11,686 --> 00:15:12,206
语言清单

508
00:15:12,776 --> 00:15:14,126
但是在最底下显示的是 

509
00:15:14,126 --> 00:15:15,896
你有一系列可用的伪语言

510
00:15:16,016 --> 00:15:17,216
可以在运行时下

511
00:15:17,216 --> 00:15:18,616
使用

512
00:15:19,676 --> 00:15:20,796
另一种我们在 Xcode 9 里

513
00:15:20,796 --> 00:15:22,826
添加的伪语言是

514
00:15:22,826 --> 00:15:23,826
带重音符号的拉丁语伪语言

515
00:15:24,466 --> 00:15:25,886
如果继续点击它 

516
00:15:33,896 --> 00:15:36,926
我的 App 会在

517
00:15:36,926 --> 00:15:38,556
我的每个本地化字符串之上和之下

518
00:15:38,556 --> 00:15:39,646
会带着重音符号启动

519
00:15:40,296 --> 00:15:41,806
这样做的好处是

520
00:15:41,806 --> 00:15:44,426
它可以让我预览

521
00:15:44,426 --> 00:15:45,866
我的 App 会如何处理那些

522
00:15:45,866 --> 00:15:47,276
带有很多重音符号 

523
00:15:47,666 --> 00:15:49,906
变音符号  甚至是那些

524
00:15:49,906 --> 00:15:51,536
本身的字体通常要

525
00:15:51,576 --> 00:15:53,266
比英文更长的语言 

526
00:15:53,376 --> 00:15:54,396
比如泰语

527
00:15:55,096 --> 00:15:56,786
这样我可以迅速浏览全局

528
00:15:56,786 --> 00:15:58,286
并确保所有的都

529
00:15:58,326 --> 00:16:00,056
垂直显示整齐  并且

530
00:15:58,326 --> 00:16:00,056
垂直显示整齐  并且

531
00:16:00,056 --> 00:16:03,366
看不到任何重叠

532
00:16:03,366 --> 00:16:05,316
现在所有显示的都看着不错

533
00:16:05,386 --> 00:16:08,346
最后  还有一种伪语言 

534
00:16:08,456 --> 00:16:10,396
我想在运行状态下演示给大家看 

535
00:16:10,396 --> 00:16:13,286
就是这个新的

536
00:16:13,286 --> 00:16:14,576
从右往左的伪语言配合以

537
00:16:14,576 --> 00:16:15,476
从右往左的字符串

538
00:16:16,876 --> 00:16:18,416
这种伪语言非常有用 

539
00:16:18,416 --> 00:16:19,726
尤其是测试你的 App

540
00:16:19,726 --> 00:16:21,866
是否适用于从右往左的语言

541
00:16:21,866 --> 00:16:23,166
比如阿拉伯语和

542
00:16:23,166 --> 00:16:25,086
希伯来语  他们的文字本身就是

543
00:16:25,086 --> 00:16:26,076
从右往左书写的

544
00:16:26,656 --> 00:16:28,096
如你所见  我的 UI

545
00:16:28,096 --> 00:16:29,866
控件已经调整 

546
00:16:29,866 --> 00:16:32,406
并映射成

547
00:16:32,406 --> 00:16:34,366
在从右往左的本地化中

548
00:16:34,366 --> 00:16:35,326
应该呈现的样子

549
00:16:35,996 --> 00:16:37,606
另外我们还把

550
00:16:37,606 --> 00:16:39,406
本地化字符串从右往左地

551
00:16:39,406 --> 00:16:40,176
显示出来

552
00:16:40,176 --> 00:16:41,946
这样  字母本身就会

553
00:16:41,946 --> 00:16:42,626
倒过来

554
00:16:42,626 --> 00:16:45,596
这种方式能够 

555
00:16:45,596 --> 00:16:46,736
让你

556
00:16:46,736 --> 00:16:48,396
感同身受那些

557
00:16:48,466 --> 00:16:50,526
有从右往左的阅读习惯的人们

558
00:16:51,056 --> 00:16:52,546
这些就是

559
00:16:52,546 --> 00:16:53,996
伪语言部分的内容

560
00:16:54,516 --> 00:16:55,886
强烈建议大家可以都

561
00:16:55,886 --> 00:16:56,336
尝试一下

562
00:16:56,506 --> 00:16:57,946
甚至在你进行本地化之前 

563
00:16:57,946 --> 00:16:59,576
他们就对测试 App

564
00:16:59,776 --> 00:17:00,566
非常有用

565
00:16:59,776 --> 00:17:00,566
非常有用

566
00:17:03,456 --> 00:17:04,445
接着我们来总结一下

567
00:17:04,445 --> 00:17:06,006
国际化流程

568
00:17:06,866 --> 00:17:08,596
首先  确保你在用

569
00:17:08,596 --> 00:17:10,076
标准 API 载入

570
00:17:10,076 --> 00:17:11,915
本地化字符串以及

571
00:17:11,955 --> 00:17:13,726
排版日期和数字等

572
00:17:13,726 --> 00:17:14,185
数据

573
00:17:14,836 --> 00:17:18,435
另外要确保你的 App 使用的是

574
00:17:18,435 --> 00:17:20,106
Base Internationalization

575
00:17:20,106 --> 00:17:21,866
从你的本地化内容中

576
00:17:21,866 --> 00:17:23,126
区分 UI

577
00:17:23,516 --> 00:17:25,136
当然  在 UI 中使用 Auto Layout

578
00:17:25,136 --> 00:17:26,526
来确保

579
00:17:26,526 --> 00:17:28,846
App 本身的灵活性并且

580
00:17:28,876 --> 00:17:31,156
可以适应不同的翻译

581
00:17:32,496 --> 00:17:34,176
最后  我们给大家展示了许多

582
00:17:34,256 --> 00:17:35,706
可以启用国际化的

583
00:17:35,706 --> 00:17:38,016
工具  比如我们刚刚谈到的

584
00:17:38,016 --> 00:17:39,186
全新伪语言

585
00:17:39,186 --> 00:17:41,176
以及未来

586
00:17:41,176 --> 00:17:42,756
马上会推出的

587
00:17:42,756 --> 00:17:43,536
Auto Layout 警告

588
00:17:44,556 --> 00:17:46,746
所以  我的 App 现在是

589
00:17:46,746 --> 00:17:48,386
国际化了的 我已经准备好了开始

590
00:17:48,386 --> 00:17:49,426
我的初次本地化

591
00:17:49,426 --> 00:17:51,286
现在有请 Sara 回到

592
00:17:51,286 --> 00:17:53,036
舞台上  给我们展示如何实现

593
00:17:53,036 --> 00:17:54,286
这一点  毕竟她是这个主题的

594
00:17:54,286 --> 00:17:54,786
专家

595
00:17:55,516 --> 00:18:01,536
[掌声]

596
00:17:55,516 --> 00:18:01,536
[掌声]

597
00:18:02,036 --> 00:18:02,576
&gt;&gt;  谢谢 Aya

598
00:18:03,296 --> 00:18:04,686
那么现在大家听完了

599
00:18:04,686 --> 00:18:05,956
Aya 在她的例子里

600
00:18:05,956 --> 00:18:07,446
演示的步骤  你应该已经

601
00:18:07,446 --> 00:18:08,796
学会添加新的语言

602
00:18:08,826 --> 00:18:09,956
到你的 App 了

603
00:18:09,956 --> 00:18:11,466
你可以直接从 Xcode 

604
00:18:11,526 --> 00:18:13,276
或者从你的工程信息里做到这一点 

605
00:18:13,346 --> 00:18:15,386
并且你有 100 多种语言

606
00:18:15,386 --> 00:18:16,096
可以选择

607
00:18:17,066 --> 00:18:18,306
现在你在 App 里

608
00:18:18,306 --> 00:18:19,616
添加了这些

609
00:18:19,616 --> 00:18:21,376
你想支持的语言  为了帮助

610
00:18:21,376 --> 00:18:23,196
你的翻译人员

611
00:18:23,246 --> 00:18:25,506
生成本地化的内容

612
00:18:25,506 --> 00:18:27,196
Xcode 会发现你的工程里的

613
00:18:27,196 --> 00:18:28,866
所有本地化

614
00:18:28,956 --> 00:18:29,456
资源

615
00:18:29,906 --> 00:18:31,026
然后当你为本地化

616
00:18:31,026 --> 00:18:33,296
导出工程时 Xcode 

617
00:18:33,296 --> 00:18:35,076
会从这些本地化资源当中

618
00:18:35,076 --> 00:18:37,086
抽取字符串并且

619
00:18:37,086 --> 00:18:39,336
为你添加的

620
00:18:39,336 --> 00:18:40,496
每种语言

621
00:18:40,496 --> 00:18:40,886
生成 XLIFF 文档

622
00:18:40,886 --> 00:18:43,176
XLIFF 文档其实是一种

623
00:18:43,176 --> 00:18:45,546
在本地化行业里的  

624
00:18:45,546 --> 00:18:47,126
标准的 XML 本地化文档

625
00:18:47,126 --> 00:18:48,366
格式

626
00:18:48,826 --> 00:18:50,616
所以  如果你发送 XLIFF 文档

627
00:18:50,616 --> 00:18:52,196
给本地化的从业者  他们应该

628
00:18:52,196 --> 00:18:53,516
对这种格式

629
00:18:53,516 --> 00:18:54,956
非常熟悉  并且知道

630
00:18:54,956 --> 00:18:55,116
该如何使用

631
00:18:56,276 --> 00:18:57,586
所以  一旦你的 XLIFF 文档

632
00:18:57,586 --> 00:18:59,546
完成翻译  你可以将他们

633
00:18:59,546 --> 00:19:02,696
导入回去  这样 Xcode 就可以

634
00:18:59,546 --> 00:19:02,696
导入回去  这样 Xcode 就可以

635
00:19:02,696 --> 00:19:04,716
自动把你的本地化文本

636
00:19:04,716 --> 00:19:06,646
整合到工程中

637
00:19:07,046 --> 00:19:08,436
这就是 Xcode 里的

638
00:19:08,436 --> 00:19:10,206
本地化流程  非常

639
00:19:10,276 --> 00:19:11,736
简单明确

640
00:19:13,226 --> 00:19:14,936
在 Xcode 9 里  我们为

641
00:19:14,936 --> 00:19:17,496
导入和导出

642
00:19:17,496 --> 00:19:19,836
STRINGSDICT 文档格式

643
00:19:20,006 --> 00:19:20,506
添加了许多支持

644
00:19:21,516 --> 00:19:23,116
STRINGSDICT 是一种强大的

645
00:19:23,116 --> 00:19:24,796
工具  可以帮你处理

646
00:19:24,986 --> 00:19:26,996
App 内的

647
00:19:26,996 --> 00:19:27,556
双数和自适应字符串

648
00:19:29,116 --> 00:19:31,646
在 Xcode 9 中  你现在可以

649
00:19:31,646 --> 00:19:33,116
从 Xcode 的文档翻译清单里

650
00:19:33,246 --> 00:19:34,836
添加并创建

651
00:19:34,836 --> 00:19:36,846
字符串字典  这样会

652
00:19:36,846 --> 00:19:38,746
生成一个整数  这样

653
00:19:38,746 --> 00:19:40,796
你就可以添加和编辑你的

654
00:19:40,796 --> 00:19:41,966
键和值

655
00:19:42,596 --> 00:19:45,016
现在我们来进一步地

656
00:19:45,016 --> 00:19:46,586
谈一谈你可以用

657
00:19:46,636 --> 00:19:48,006
字符串字典做什么以及

658
00:19:48,006 --> 00:19:48,986
他们为什么有用

659
00:19:49,936 --> 00:19:51,506
第一 字符串字典

660
00:19:51,506 --> 00:19:53,366
可以帮你不在 App 里

661
00:19:53,366 --> 00:19:54,966
编写任何代码的情况下

662
00:19:54,966 --> 00:19:56,936
处理复杂的

663
00:19:57,556 --> 00:19:57,626
双数形式

664
00:19:58,196 --> 00:20:00,236
那么  假设我可以用

665
00:19:58,196 --> 00:20:00,236
那么  假设我可以用

666
00:20:00,236 --> 00:20:02,596
这种代码逻辑处理

667
00:20:02,596 --> 00:20:02,976
真假变量的问题

668
00:20:03,556 --> 00:20:05,806
这是一组数组  如果我的数组

669
00:20:05,806 --> 00:20:08,236
长度为 1  我设置

670
00:20:08,236 --> 00:20:11,196
字符串的内容为“1 popular language”

671
00:20:11,666 --> 00:20:13,426
或者假设我的数组长度

672
00:20:13,426 --> 00:20:15,416
大于 1 我设置字符串 

673
00:20:15,416 --> 00:20:17,006
为  比如说“%d popular languages”

674
00:20:17,006 --> 00:20:19,456
这里“%d”是一个

675
00:20:19,456 --> 00:20:20,806
引用格式化字符串 

676
00:20:20,806 --> 00:20:22,136
将在运行时被我的数组长度

677
00:20:22,176 --> 00:20:23,116
替换掉

678
00:20:23,906 --> 00:20:26,166
这个逻辑也许能行得通 

679
00:20:26,166 --> 00:20:27,916
起码对类似于英语这样的语言

680
00:20:27,916 --> 00:20:29,256
行得通  因为英语只有

681
00:20:29,386 --> 00:20:31,096
两种双数形式 

682
00:20:31,096 --> 00:20:32,296
一个单数  一个双数

683
00:20:33,386 --> 00:20:34,626
但是这对于

684
00:20:34,626 --> 00:20:36,436
类似于俄文这种语言来说完全行不通 

685
00:20:36,626 --> 00:20:38,046
因为它有多种

686
00:20:38,046 --> 00:20:39,126
双数变体

687
00:20:39,546 --> 00:20:41,056
俄文有四种不同的

688
00:20:41,056 --> 00:20:42,616
双数变体  你的

689
00:20:42,756 --> 00:20:44,216
翻译们需要考虑相应的

690
00:20:44,456 --> 00:20:46,036
变通方法  比如说

691
00:20:46,036 --> 00:20:47,536
如何用你所提供的

692
00:20:47,536 --> 00:20:49,506
通用双数翻译所有的变体 

693
00:20:49,746 --> 00:20:50,886
就是你在刚刚英语的那个例子里

694
00:20:50,886 --> 00:20:52,906
使用的  但通常的结果是

695
00:20:53,976 --> 00:20:56,226
你的翻译

696
00:20:56,226 --> 00:20:57,626
会非常机械化而且

697
00:20:57,626 --> 00:20:59,256
对于母语者来说很不自然

698
00:20:59,516 --> 00:21:02,646
这个例子听起来很像是

699
00:20:59,516 --> 00:21:02,646
这个例子听起来很像是

700
00:21:02,716 --> 00:21:05,176
“popular column 1”

701
00:21:05,176 --> 00:21:06,946
“popular languages column 2”

702
00:21:06,946 --> 00:21:09,156
你是不会希望在 App 里出现这些的

703
00:21:09,306 --> 00:21:10,816
为了不用任何代码就

704
00:21:12,246 --> 00:21:13,816
解决这个问题 

705
00:21:13,896 --> 00:21:15,686
你可以直接使用字符串

706
00:21:15,686 --> 00:21:16,306
字典

707
00:21:17,246 --> 00:21:18,786
所以  你须要在 

708
00:21:18,786 --> 00:21:20,926
STRINGSDICT 文档里做的是

709
00:21:20,926 --> 00:21:23,456
添加你的本地化格式 Key

710
00:21:24,296 --> 00:21:25,876
在这个例子当中  我的本地化

711
00:21:25,876 --> 00:21:27,446
格式 Key 是语言

712
00:21:27,986 --> 00:21:30,566
然后  你须要添加

713
00:21:30,566 --> 00:21:32,256
与你的开发语言相关的

714
00:21:32,256 --> 00:21:34,596
双数变体

715
00:21:34,756 --> 00:21:36,176
在这个例子里面  由于我的开发语言是

716
00:21:36,176 --> 00:21:37,936
英语  我只用关心

717
00:21:37,936 --> 00:21:39,726
两种双数变体

718
00:21:39,726 --> 00:21:40,246
非此即彼

719
00:21:40,246 --> 00:21:41,576
其中一种是为单数服务 

720
00:21:41,576 --> 00:21:43,306
另一种是为

721
00:21:43,366 --> 00:21:44,046
双数服务

722
00:21:45,526 --> 00:21:47,596
接着就是用 NSLocalizedString

723
00:21:47,706 --> 00:21:49,436
打包你的双数字符串 

724
00:21:49,826 --> 00:21:51,876
就像你处理其他

725
00:21:52,416 --> 00:21:53,386
代码中的字符串

726
00:21:53,446 --> 00:21:53,766
一样

727
00:21:54,366 --> 00:21:55,846
当你为本地化

728
00:21:55,846 --> 00:21:57,256
导出你的工程时 Xcode 会

729
00:21:57,256 --> 00:21:59,426
自动生成 

730
00:21:59,776 --> 00:22:01,046
你所支持的其他语言的

731
00:21:59,776 --> 00:22:01,046
你所支持的其他语言的

732
00:22:01,046 --> 00:22:02,306
双数 Key

733
00:22:02,816 --> 00:22:05,576
所以  其他语言的变体

734
00:22:05,576 --> 00:22:07,126
会包含在

735
00:22:07,126 --> 00:22:08,826
你导出的文档里 

736
00:22:08,926 --> 00:22:09,866
而你的翻译人员  

737
00:22:10,016 --> 00:22:11,496
在翻译字符串时

738
00:22:11,496 --> 00:22:13,236
就会发现

739
00:22:13,236 --> 00:22:14,536
跟这种语言相关的

740
00:22:14,536 --> 00:22:15,086
双数变体

741
00:22:15,596 --> 00:22:17,066
现在你的翻译结果

742
00:22:17,066 --> 00:22:18,516
才算正确  你的用户们才会有

743
00:22:18,516 --> 00:22:20,296
语法更加精准的

744
00:22:20,296 --> 00:22:21,016
翻译

745
00:22:21,756 --> 00:22:23,436
那么  这些就是 Xcode 9 里面

746
00:22:23,436 --> 00:22:26,426
STRINGDICT 支持双数变体的内容

747
00:22:27,106 --> 00:22:28,776
另外一件你可以在 Xcode 9 里 

748
00:22:28,776 --> 00:22:30,666
用字符串词典做的是 

749
00:22:30,666 --> 00:22:32,536
支持自适应字符串

750
00:22:33,456 --> 00:22:36,256
如果我们看一下早先 Aya 的 App

751
00:22:36,566 --> 00:22:39,316
的那个例子  这里有一个

752
00:22:39,316 --> 00:22:41,166
字符串叫做 

753
00:22:41,236 --> 00:22:42,696
“Gross Domestic Product (in billion)”

754
00:22:42,696 --> 00:22:43,646
略微有点长

755
00:22:43,816 --> 00:22:45,176
但是在 iPad 上显示的没有问题

756
00:22:45,176 --> 00:22:46,476
因为有足够的

757
00:22:46,536 --> 00:22:46,816
空间

758
00:22:47,636 --> 00:22:49,366
如果我们再次运行这个 App 

759
00:22:49,366 --> 00:22:51,116
在一个更小的设备上 比如 iPhone 7

760
00:22:51,166 --> 00:22:53,716
这时字符串就

761
00:22:53,716 --> 00:22:54,206
放不下了

762
00:22:54,306 --> 00:22:55,616
如屏幕所示 

763
00:22:55,616 --> 00:22:56,936
现在右边的数字

764
00:22:56,986 --> 00:22:58,566
缩短了  你只能看到

765
00:22:58,566 --> 00:22:59,606
前三个字符 

766
00:22:59,606 --> 00:23:00,766
这个是不对的  因为

767
00:22:59,606 --> 00:23:00,766
这个是不对的  因为

768
00:23:00,766 --> 00:23:01,486
我们给用户的信息是

769
00:23:01,486 --> 00:23:02,626
有误的

770
00:23:03,706 --> 00:23:05,736
所以  你可以再次利用

771
00:23:06,186 --> 00:23:07,866
字符串字典来

772
00:23:07,866 --> 00:23:09,656
解决这个问题并且

773
00:23:09,686 --> 00:23:10,996
给你的 App 提供不同的

774
00:23:10,996 --> 00:23:12,486
字符串变体

775
00:23:13,166 --> 00:23:14,506
我这里有三个不同的

776
00:23:14,506 --> 00:23:17,536
Key 20 25 和 50

777
00:23:17,536 --> 00:23:18,966
分别对应不同的屏幕

778
00:23:18,966 --> 00:23:19,336
尺寸

779
00:23:19,336 --> 00:23:21,586
然后我想要一些字符串

780
00:23:21,586 --> 00:23:23,246
需要在每一块屏幕上

781
00:23:23,246 --> 00:23:23,606
显示完整

782
00:23:24,346 --> 00:23:25,476
所以  如果你在 STRINGSDICT 文档里的键

783
00:23:25,546 --> 00:23:28,326
调用 NSLocalizedString  

784
00:23:28,326 --> 00:23:30,496
这样

785
00:23:30,496 --> 00:23:31,706
你就可以做到了  因为

786
00:23:31,706 --> 00:23:34,096
我们在运行时下

787
00:23:34,196 --> 00:23:36,266
选择了基于屏幕可用空间的

788
00:23:36,266 --> 00:23:36,826
正确的值

789
00:23:37,856 --> 00:23:39,596
如果你没有使用 UILabel 

790
00:23:39,596 --> 00:23:40,606
而用的是你自己的

791
00:23:40,606 --> 00:23:42,626
自定义控件 也还是可以

792
00:23:42,626 --> 00:23:44,266
通过调用

793
00:23:44,266 --> 00:23:46,096
variantFittingPresentationWidth API

794
00:23:46,236 --> 00:23:48,086
来利用这个功能

795
00:23:48,086 --> 00:23:50,566
这里你删除

796
00:23:50,566 --> 00:23:51,926
在 STRINGSDICT 文档里

797
00:23:51,926 --> 00:23:54,116
确定的一个 Key  接着

798
00:23:54,116 --> 00:23:55,466
它会为你在运行状态下

799
00:23:55,526 --> 00:23:56,856
选择与 Key 对应的

800
00:23:56,856 --> 00:23:57,876
正确的值

801
00:23:58,646 --> 00:24:00,696
并且我们也会提供

802
00:23:58,646 --> 00:24:00,696
并且我们也会提供

803
00:24:00,696 --> 00:24:02,216
这些 Key 以及对应

804
00:24:02,216 --> 00:24:03,266
屏幕的尺寸

805
00:24:03,266 --> 00:24:04,756
的文档以供

806
00:24:04,756 --> 00:24:05,746
你们查询

807
00:24:07,046 --> 00:24:09,156
那么  现在如果我们用 iPad 再次

808
00:24:09,346 --> 00:24:10,786
运行  它还是使用的

809
00:24:10,786 --> 00:24:13,376
全字符串  如果我们在

810
00:24:13,376 --> 00:24:14,826
小一点的设备上运行 

811
00:24:14,996 --> 00:24:17,056
比如 iPhone 7  现在我们选择的是

812
00:24:17,056 --> 00:24:18,546
可以适应屏幕尺寸的

813
00:24:18,716 --> 00:24:20,476
正确变体

814
00:24:20,716 --> 00:24:22,316
而且实现这一点不需要编写

815
00:24:22,396 --> 00:24:23,456
任何代码

816
00:24:23,536 --> 00:24:24,746
你的 App 

817
00:24:24,746 --> 00:24:26,616
在所有不同尺寸的

818
00:24:26,656 --> 00:24:28,186
屏幕和配置上 

819
00:24:28,186 --> 00:24:29,316
都让人赏心悦目

820
00:24:29,316 --> 00:24:30,776
自适应字符串真的

821
00:24:30,776 --> 00:24:32,496
非常有用  如果你可以在 App 里

822
00:24:32,496 --> 00:24:33,726
支持本地化

823
00:24:33,856 --> 00:24:34,896
因为很有可能  你会遇到一些

824
00:24:34,896 --> 00:24:36,466
与常用语言相比  会显示的

825
00:24:36,466 --> 00:24:37,386
更长或者更短的语言

826
00:24:37,606 --> 00:24:38,476
并且你希望

827
00:24:38,476 --> 00:24:40,156
为翻译们提供更多灵活性 

828
00:24:40,476 --> 00:24:42,306
这样才能为语言

829
00:24:42,306 --> 00:24:43,216
提供自适应字符串

830
00:24:44,936 --> 00:24:46,266
现在你已经完成了

831
00:24:46,266 --> 00:24:48,316
支持双数的服务 以及

832
00:24:48,316 --> 00:24:50,156
自适应字符串  你

833
00:24:50,156 --> 00:24:52,556
已经准备好本地化你的 App了

834
00:24:52,556 --> 00:24:53,516
首先  本地化的

835
00:24:53,516 --> 00:24:55,926
第一步是导出你的

836
00:24:55,926 --> 00:24:56,596
工程

837
00:24:57,006 --> 00:24:58,296
当你为本地化

838
00:24:58,296 --> 00:25:00,246
导出工程时 Xcode

839
00:24:58,296 --> 00:25:00,246
导出工程时 Xcode

840
00:25:00,246 --> 00:25:01,726
会问你首先想要本地化

841
00:25:01,966 --> 00:25:02,966
哪种语言

842
00:25:03,006 --> 00:25:04,506
一旦选定你想要本地化的

843
00:25:04,506 --> 00:25:06,386
语言  Xcode 就会生成

844
00:25:06,526 --> 00:25:09,076
XLIFF 文档并发送给

845
00:25:09,186 --> 00:25:09,806
你的翻译人员

846
00:25:10,236 --> 00:25:11,526
等你的 XLIFF 文档翻译

847
00:25:11,636 --> 00:25:14,026
结束  你就可以导入

848
00:25:14,026 --> 00:25:16,196
回你的工程当中  并且 Xcode 

849
00:25:16,196 --> 00:25:17,646
会生成一个清晰的

850
00:25:17,926 --> 00:25:19,796
比较文本  并指出哪些已经被你的翻译们

851
00:25:19,926 --> 00:25:20,616
更改过了

852
00:25:22,176 --> 00:25:24,046
接着 Xcode 会

853
00:25:24,046 --> 00:25:25,416
整合你的本地化文本

854
00:25:25,576 --> 00:25:27,136
到你的工程中  然后你的字符串

855
00:25:27,136 --> 00:25:28,886
就被本地化了

856
00:25:29,436 --> 00:25:31,616
现在你的字符串

857
00:25:31,616 --> 00:25:33,126
已经本地化了  但又该如何处理

858
00:25:33,126 --> 00:25:34,656
其他你也想本地化的

859
00:25:34,656 --> 00:25:37,396
且不以字符串为基础的资源呢

860
00:25:37,396 --> 00:25:39,166
比如图片或者音频

861
00:25:39,166 --> 00:25:39,566
文档

862
00:25:39,656 --> 00:25:41,846
所以  你也许会有下面这种

863
00:25:41,846 --> 00:25:42,306
文档

864
00:25:42,466 --> 00:25:44,476
一个带文本的图片 

865
00:25:44,786 --> 00:25:46,136
并且你想为其他语言

866
00:25:46,136 --> 00:25:47,566
提供一个可替换的

867
00:25:47,566 --> 00:25:48,186
图片

868
00:25:48,616 --> 00:25:50,256
你可以在 Xcode 中轻松本地化其他

869
00:25:50,536 --> 00:25:52,866
资源  通过

870
00:25:52,866 --> 00:25:54,616
点击文档检阅里面的 

871
00:25:54,666 --> 00:25:55,786
本地化按钮

872
00:25:56,336 --> 00:25:58,356
与此同时  Xcode 也会跟您确认

873
00:25:58,356 --> 00:25:59,576
你想把资料本地化成

874
00:25:59,576 --> 00:26:00,426
哪种语言

875
00:25:59,576 --> 00:26:00,426
哪种语言

876
00:26:00,426 --> 00:26:02,066
你可以从语言清单中

877
00:26:02,146 --> 00:26:02,876
挑选

878
00:26:03,446 --> 00:26:05,206
然后 Xcode 会将这个资料

879
00:26:05,456 --> 00:26:07,316
转移到特定的语言文档  

880
00:26:07,796 --> 00:26:09,126
在那里你可以用

881
00:26:09,236 --> 00:26:10,536
图片或者你想要显示的语言的资料

882
00:26:10,536 --> 00:26:12,346
替换掉刚刚的资料

883
00:26:13,166 --> 00:26:14,756
那么  以上这些就是本地化在 Xcode 9 中的

884
00:26:14,756 --> 00:26:16,196
工作流

885
00:26:16,646 --> 00:26:18,476
我们看到了如何支持

886
00:26:18,626 --> 00:26:20,436
双数  还有自适应

887
00:26:20,536 --> 00:26:21,736
字符串以及如何本地化

888
00:26:21,736 --> 00:26:22,586
添加的资源

889
00:26:23,006 --> 00:26:24,286
现在我想邀请

890
00:26:24,326 --> 00:26:26,256
Chris 上台给大家做一个

891
00:26:26,256 --> 00:26:26,666
展示

892
00:26:27,116 --> 00:26:27,476
谢谢

893
00:26:29,246 --> 00:26:29,786
&gt;&gt;  谢谢 Sara

894
00:26:30,508 --> 00:26:32,508
[掌声]

895
00:26:40,896 --> 00:26:44,256
前面我们看到 Aya 确认

896
00:26:44,556 --> 00:26:45,466
她的 App

897
00:26:45,466 --> 00:26:47,206
国际化流程已完成  通过同时使用 

898
00:26:47,206 --> 00:26:49,066
框架和工具功能

899
00:26:49,276 --> 00:26:50,836
那么  让我们开始真正的

900
00:26:50,886 --> 00:26:52,856
本地化吧

901
00:26:52,966 --> 00:26:54,036
首先  我非常

902
00:26:54,036 --> 00:26:55,586
欣赏 Sara 说的

903
00:26:55,726 --> 00:26:56,956
有关双数和自适应宽度字符串的

904
00:26:56,956 --> 00:26:57,476
讨论

905
00:26:58,206 --> 00:26:59,866
所以  我也为我们的工程

906
00:26:59,866 --> 00:27:00,956
添加了一个 STRINGSDICT 文档

907
00:26:59,866 --> 00:27:00,956
添加了一个 STRINGSDICT 文档

908
00:27:13,136 --> 00:27:15,996
我添加了 GDP 的自适应 

909
00:27:16,036 --> 00:27:19,116
宽度字符串配合以

910
00:27:19,116 --> 00:27:20,656
不同尺寸的设备的

911
00:27:20,656 --> 00:27:23,246
所有不同变体 20 25

912
00:27:23,506 --> 00:27:24,126
和 50

913
00:27:25,196 --> 00:27:26,996
同时  就像 Sara 刚刚展示的那样  

914
00:27:26,996 --> 00:27:28,636
我也针对一些常见的语言

915
00:27:29,886 --> 00:27:31,296
创建了一个

916
00:27:31,296 --> 00:27:32,066
双数变体

917
00:27:32,646 --> 00:27:35,836
好的  现在我准备

918
00:27:35,836 --> 00:27:37,786
将我的应用程序本地化成

919
00:27:37,786 --> 00:27:38,196
俄文

920
00:27:39,156 --> 00:27:40,526
我要做的是

921
00:27:40,526 --> 00:27:42,996
进入工程编辑 

922
00:27:42,996 --> 00:27:44,856
在我的本地化菜单下面

923
00:27:44,856 --> 00:27:46,016
显示我的开发语言是英文

924
00:27:46,016 --> 00:27:47,546
我看到

925
00:27:47,546 --> 00:27:48,346
一个加号按钮

926
00:27:48,646 --> 00:27:50,226
我可以选定它  然后

927
00:27:50,226 --> 00:27:51,996
再往下拉到一半  选择

928
00:27:52,036 --> 00:27:52,436
俄文

929
00:27:53,126 --> 00:27:54,986
接着 Xcode 就会提醒我 

930
00:27:54,986 --> 00:27:57,116
我想用俄文占位符

931
00:27:57,116 --> 00:27:58,916
替代哪些资源

932
00:28:00,366 --> 00:28:01,536
因为我想本地化

933
00:28:01,536 --> 00:28:03,066
所有资源  所以

934
00:28:03,066 --> 00:28:04,076
直接命令 Xcode 完成

935
00:28:04,586 --> 00:28:08,546
然后你就会看到除了

936
00:28:08,546 --> 00:28:10,586
我的主要 Storyboard 文档 

937
00:28:10,586 --> 00:28:12,746
现在我还有一个俄文字符串

938
00:28:12,746 --> 00:28:13,786
占位符

939
00:28:15,046 --> 00:28:17,796
它仍在工程编辑器里 

940
00:28:17,796 --> 00:28:19,026
现在我要进入编辑

941
00:28:19,026 --> 00:28:20,676
菜单  然后为本地化导出我的

942
00:28:20,676 --> 00:28:22,086
工程

943
00:28:22,626 --> 00:28:26,856
接着就是保存这个

944
00:28:26,856 --> 00:28:29,376
文档  其实是保存这个文件夹到

945
00:28:29,376 --> 00:28:29,986
桌面

946
00:28:31,206 --> 00:28:32,876
然后 Xcode 会读取

947
00:28:32,876 --> 00:28:34,396
所有的源代码 

948
00:28:34,396 --> 00:28:35,316
所有的资源

949
00:28:35,586 --> 00:28:37,346
然后生成

950
00:28:37,416 --> 00:28:38,266
XLIFF 文档

951
00:28:38,846 --> 00:28:40,166
那么  我们来看看它到底是

952
00:28:40,166 --> 00:28:40,796
什么样的

953
00:28:44,336 --> 00:28:45,906
这里文档显示的

954
00:28:45,906 --> 00:28:49,386
名称是 RU.XLIFF  其中 RU 

955
00:28:49,386 --> 00:28:51,026
是俄文的

956
00:28:51,026 --> 00:28:51,846
国际标准化组织语言代码

957
00:28:52,256 --> 00:28:54,296
如果我双击这个图标 

958
00:28:54,296 --> 00:28:55,286
会看到一个我们编写的

959
00:28:55,286 --> 00:28:57,446
小工具  这样我们可以

960
00:28:57,446 --> 00:28:59,076
以表格形式看到所有的

961
00:28:59,076 --> 00:29:00,456
本地化数据  

962
00:28:59,076 --> 00:29:00,456
本地化数据  

963
00:29:00,456 --> 00:29:01,456
就不用费力地

964
00:29:01,456 --> 00:29:02,626
筛选 XML 小括号

965
00:29:02,626 --> 00:29:04,376
来给你们看了

966
00:29:04,896 --> 00:29:09,696
在最上方  你可以看到

967
00:29:09,696 --> 00:29:11,446
许多字符串从 Storyboard 文档里

968
00:29:11,446 --> 00:29:12,786
直接显示

969
00:29:12,786 --> 00:29:13,156
出来

970
00:29:14,606 --> 00:29:15,876
你看到在

971
00:29:15,876 --> 00:29:17,296
翻译栏里面  所有显示的都是

972
00:29:17,296 --> 00:29:18,326
红色的  这是因为我们还没有

973
00:29:18,326 --> 00:29:20,396
在这个 XLIFF 文档里

974
00:29:20,396 --> 00:29:22,656
放任何翻译

975
00:29:23,906 --> 00:29:25,386
接下来的部分 

976
00:29:25,386 --> 00:29:28,856
我们有一些元素会进入到

977
00:29:28,856 --> 00:29:32,866
localizable.stringsdict 

978
00:29:32,866 --> 00:29:33,236
文档

979
00:29:34,166 --> 00:29:35,626
如你所见 

980
00:29:35,626 --> 00:29:39,006
“%d popular languages”的字符串变量

981
00:29:39,006 --> 00:29:42,286
比我们一开始在

982
00:29:42,286 --> 00:29:43,056
localizable.stringsdict

983
00:29:43,136 --> 00:29:44,596
里的多

984
00:29:44,866 --> 00:29:46,476
这是因为 Xcode 可以识别

985
00:29:46,476 --> 00:29:48,246
我们想要以俄文导出  

986
00:29:48,246 --> 00:29:49,806
并且自动为

987
00:29:49,806 --> 00:29:51,266
所有俄文变体创建了

988
00:29:51,266 --> 00:29:51,996
占位符

989
00:29:53,556 --> 00:29:55,426
自适应宽度字符串变量

990
00:29:55,426 --> 00:29:57,756
也可以适用于

991
00:29:57,756 --> 00:29:58,566
国内生产总值

992
00:29:59,586 --> 00:30:00,636
另外  对于其他事情 

993
00:29:59,586 --> 00:30:00,636
另外  对于其他事情 

994
00:30:00,636 --> 00:30:03,266
例如我们的应用程序

995
00:30:03,266 --> 00:30:04,416
名称和 plist 同样适用

996
00:30:04,966 --> 00:30:07,326
然后我们源代码里的

997
00:30:07,326 --> 00:30:09,496
字符串就会在输入时  

998
00:30:09,496 --> 00:30:11,736
在俄文的本地化字符串文档里

999
00:30:11,906 --> 00:30:12,736
显示出来

1000
00:30:13,636 --> 00:30:14,586
现在  假设我有一个

1001
00:30:14,586 --> 00:30:16,056
效率非常高的

1002
00:30:16,056 --> 00:30:16,786
翻译人员

1003
00:30:17,656 --> 00:30:20,376
并且我有一版

1004
00:30:21,146 --> 00:30:23,006
翻译好了的 XLIFF

1005
00:30:23,916 --> 00:30:25,176
我可以直接进入 Xcode 的工程

1006
00:30:25,176 --> 00:30:27,656
编辑器  选择

1007
00:30:27,876 --> 00:30:31,496
导入本地化  然后选定

1008
00:30:31,496 --> 00:30:32,416
该文档

1009
00:30:33,046 --> 00:30:36,026
接着 Xcode 会读取你的

1010
00:30:36,026 --> 00:30:38,506
工程  并读取那个文档  然后

1011
00:30:38,506 --> 00:30:40,616
显示出那个文档   

1012
00:30:40,616 --> 00:30:41,866
导入的内容和你的工程

1013
00:30:41,866 --> 00:30:42,366
有何不同

1014
00:30:42,696 --> 00:30:43,826
这里  我得到一个警告说 

1015
00:30:43,826 --> 00:30:45,836
我尚未完成用英语本地化

1016
00:30:46,586 --> 00:30:48,636
我的 App 名称 

1017
00:30:48,636 --> 00:30:50,076
但是现在我有一个

1018
00:30:50,076 --> 00:30:51,576
俄文的本地化版本

1019
00:30:52,706 --> 00:30:55,026
并且我可以在文档视图模式里

1020
00:30:55,026 --> 00:30:57,526
看到  这次导入究竟会影响

1021
00:30:57,526 --> 00:30:59,396
什么文档

1022
00:30:59,726 --> 00:31:03,036
这与我希望得到的效果一样

1023
00:30:59,726 --> 00:31:03,036
这与我希望得到的效果一样

1024
00:31:03,436 --> 00:31:04,966
现在  我命令 Xcode 导入这个文档

1025
00:31:04,966 --> 00:31:07,076
它就会为我编写出这些新的

1026
00:31:07,076 --> 00:31:08,336
资源文档

1027
00:31:08,336 --> 00:31:09,626
尽管之前我们

1028
00:31:09,626 --> 00:31:10,396
没有

1029
00:31:10,396 --> 00:31:12,616
本地化字符串文档 

1030
00:31:12,896 --> 00:31:13,866
但现在我们有了

1031
00:31:14,286 --> 00:31:16,256
如果我选定它  我们会得到一个

1032
00:31:16,256 --> 00:31:18,346
俄文文本的

1033
00:31:18,346 --> 00:31:21,336
本地化字符串文档

1034
00:31:22,706 --> 00:31:24,506
现在  如果运行我的应用程序 

1035
00:31:25,446 --> 00:31:26,746
啊  好像出现了一个

1036
00:31:26,746 --> 00:31:27,966
程序错误  但没关系

1037
00:31:32,236 --> 00:31:33,376
我直接退出然后重启

1038
00:31:33,406 --> 00:31:33,796
Xcode

1039
00:31:43,956 --> 00:31:45,506
那么  如果我运行刚刚创建的

1040
00:31:45,806 --> 00:31:47,346
应用程序  Xcode 会

1041
00:31:47,396 --> 00:31:49,176
整合所有

1042
00:31:49,226 --> 00:31:51,056
我们刚刚导入的

1043
00:31:51,056 --> 00:31:51,646
本地化字符串

1044
00:31:54,736 --> 00:31:56,746
不过我刚刚漏掉了

1045
00:31:56,746 --> 00:31:57,886
一步  抱歉

1046
00:31:58,546 --> 00:32:01,256
我想用俄文运行

1047
00:31:58,546 --> 00:32:01,256
我想用俄文运行

1048
00:32:01,256 --> 00:32:02,576
我的应用程序  这样我就能看到

1049
00:32:02,576 --> 00:32:03,346
那些翻译了

1050
00:32:03,346 --> 00:32:05,106
接着我打开

1051
00:32:05,106 --> 00:32:06,726
Scheme 编辑器  然后我将

1052
00:32:06,726 --> 00:32:07,886
刚刚 Aya 使用的

1053
00:32:07,886 --> 00:32:09,026
从右往左的伪语言

1054
00:32:09,026 --> 00:32:12,216
替换成俄文

1055
00:32:12,876 --> 00:32:14,136
现在如果我运行我们的

1056
00:32:14,136 --> 00:32:16,246
应用程序  它会创建

1057
00:32:16,246 --> 00:32:17,916
Storyboard 复制到 Swift 

1058
00:32:17,916 --> 00:32:20,226
基础库里面  然后启动

1059
00:32:21,956 --> 00:32:23,246
这样就能看到我们的应用程序在以俄文

1060
00:32:23,246 --> 00:32:24,286
运行了

1061
00:32:24,666 --> 00:32:26,076
而且不光是所有

1062
00:32:26,076 --> 00:32:27,376
格式处理器  

1063
00:32:27,376 --> 00:32:29,496
日期和

1064
00:32:29,496 --> 00:32:32,926
数字都正确无误  并且还能看到

1065
00:32:32,926 --> 00:32:35,226
我们刚刚导入的

1066
00:32:35,226 --> 00:32:35,976
俄文文本

1067
00:32:48,216 --> 00:32:51,466
总结来说 STRINGSDICT

1068
00:32:51,466 --> 00:32:53,176
真的非常强大  你能

1069
00:32:53,176 --> 00:32:55,366
用它们来处理应用程序里的双数和

1070
00:32:55,426 --> 00:32:57,276
自适应宽度字符串 

1071
00:32:57,276 --> 00:32:59,016
以确保它们不光会

1072
00:32:59,016 --> 00:33:01,326
根据用户的语言 

1073
00:32:59,016 --> 00:33:01,326
根据用户的语言 

1074
00:33:01,326 --> 00:33:03,036
还有设备大小

1075
00:33:03,036 --> 00:33:04,306
来调节

1076
00:33:06,166 --> 00:33:08,216
为了你的本地化流程  

1077
00:33:08,316 --> 00:33:10,456
从你的 Xcode 应用程序中导出和生成

1078
00:33:10,456 --> 00:33:13,176
XLIFF 格式  以及

1079
00:33:13,386 --> 00:33:14,826
将翻译的字符串通过 XLIFF 导入回

1080
00:33:14,826 --> 00:33:17,396
应用程序的 Xcode 工程之中 

1081
00:33:17,396 --> 00:33:19,216
是很容易的

1082
00:33:20,876 --> 00:33:22,586
Sara 也向我们展示了

1083
00:33:22,586 --> 00:33:24,746
如何在 Xcode 里本地化

1084
00:33:24,746 --> 00:33:26,486
非字符串资源

1085
00:33:27,886 --> 00:33:30,716
那么现在 Aya 将为大家展示

1086
00:33:31,026 --> 00:33:32,446
如何测试你的本地化

1087
00:33:32,446 --> 00:33:33,866
效果

1088
00:33:34,516 --> 00:33:41,476
[掌声]

1089
00:33:41,976 --> 00:33:42,576
&gt;&gt; 谢谢 Chris

1090
00:33:42,576 --> 00:33:44,406
我无法相信我的 App

1091
00:33:44,406 --> 00:33:45,966
已经成功本地化成

1092
00:33:45,966 --> 00:33:46,356
俄文了

1093
00:33:46,716 --> 00:33:48,146
而且这些步骤真的非常

1094
00:33:48,146 --> 00:33:48,826
简单

1095
00:33:50,066 --> 00:33:51,556
现在我已经完成了

1096
00:33:51,556 --> 00:33:53,286
本地化  我们来看看

1097
00:33:53,286 --> 00:33:54,846
可以用什么测试一下

1098
00:33:54,846 --> 00:33:54,976
它

1099
00:33:56,436 --> 00:33:58,586
在 Xcode 9 里 我们介绍了

1100
00:33:58,586 --> 00:34:00,356
可以指定运行测试的

1101
00:33:58,586 --> 00:34:00,356
可以指定运行测试的

1102
00:34:00,356 --> 00:34:02,376
应用程序的

1103
00:34:02,526 --> 00:34:03,556
语言和

1104
00:34:03,556 --> 00:34:04,156
地区

1105
00:34:04,706 --> 00:34:06,096
你可以在 Xcode 的测试 Scheme 编辑器里

1106
00:34:06,166 --> 00:34:07,896
实现这一点

1107
00:34:08,356 --> 00:34:11,496
今天  我想谈一谈

1108
00:34:11,496 --> 00:34:13,146
Xcode 里的 UI 测试

1109
00:34:14,085 --> 00:34:16,065
UI 测试是一种很好的方法 

1110
00:34:16,065 --> 00:34:17,496
可以同时确认你的

1111
00:34:17,496 --> 00:34:19,446
应用程序的 UI

1112
00:34:19,446 --> 00:34:20,166
和其功能

1113
00:34:21,335 --> 00:34:23,326
我们来看看屏幕上的

1114
00:34:23,326 --> 00:34:24,315
这条代码

1115
00:34:25,466 --> 00:34:26,666
你要编写的就是  

1116
00:34:26,666 --> 00:34:28,886
类似于敲击

1117
00:34:28,886 --> 00:34:30,496
一个带“Territory”的文本的

1118
00:34:31,235 --> 00:34:31,306
table.cell

1119
00:34:32,166 --> 00:34:33,545
但是这样在本地化里面

1120
00:34:33,545 --> 00:34:35,346
行不通  因为

1121
00:34:35,456 --> 00:34:37,306
那个文本会

1122
00:34:37,306 --> 00:34:38,735
在你运行测试的时候

1123
00:34:38,735 --> 00:34:39,386
被翻译成不同的语言

1124
00:34:40,036 --> 00:34:41,476
另外  如果你决定

1125
00:34:41,476 --> 00:34:42,726
在 App 里  

1126
00:34:42,726 --> 00:34:43,835
甚至是你的开发语言中

1127
00:34:43,835 --> 00:34:44,746
改变这套写法

1128
00:34:45,136 --> 00:34:46,126
比如说我现在想称呼它为

1129
00:34:46,126 --> 00:34:47,356
“Region”而不是“Territory” 

1130
00:34:47,356 --> 00:34:49,275
你不会想

1131
00:34:49,275 --> 00:34:50,926
又返回去并且更新

1132
00:34:50,926 --> 00:34:52,406
每一个你写的测试

1133
00:34:52,525 --> 00:34:53,866
只是为了让它

1134
00:34:53,866 --> 00:34:54,565
重新启动

1135
00:34:57,136 --> 00:34:58,726
使用辅助功能

1136
00:34:58,726 --> 00:34:59,436
标识符

1137
00:35:00,766 --> 00:35:02,376
这些标识符对于你的屏幕的每个元素来说

1138
00:35:02,376 --> 00:35:03,836
都是唯一的

1139
00:35:04,286 --> 00:35:06,446
你可以用标识符符来找到  

1140
00:35:06,446 --> 00:35:07,646
这些元素  并且不用

1141
00:35:07,646 --> 00:35:09,416
具体知道什么字符串载入

1142
00:35:10,086 --> 00:35:13,756
他们

1143
00:35:14,036 --> 00:35:15,526
那么  如何设置辅助功能

1144
00:35:15,526 --> 00:35:17,406
标识符呢  你可以在创建的时候

1145
00:35:17,406 --> 00:35:19,296
就在 UI 控制里设置它的属性 

1146
00:35:19,296 --> 00:35:20,916
或者在 NSControl 里

1147
00:35:20,916 --> 00:35:21,286
设置好

1148
00:35:23,086 --> 00:35:24,726
或者假设当你从 Storyboard 或者压缩文档里

1149
00:35:24,726 --> 00:35:26,486
载入你的 UI 时

1150
00:35:26,606 --> 00:35:28,016
你可以在 Interface Builder 里的

1151
00:35:28,016 --> 00:35:29,306
Identity Inspector

1152
00:35:29,356 --> 00:35:29,626
设置好

1153
00:35:30,226 --> 00:35:33,726
所以  现在你的测试  

1154
00:35:33,726 --> 00:35:35,016
适于本地化

1155
00:35:35,016 --> 00:35:36,566
并且在所有你支持的语言

1156
00:35:36,566 --> 00:35:37,756
达成了满意的效果 

1157
00:35:38,776 --> 00:35:40,176
这里会有更多

1158
00:35:40,176 --> 00:35:42,066
你可以利用的功能

1159
00:35:42,906 --> 00:35:44,616
今年  我们介绍了

1160
00:35:44,616 --> 00:35:47,266
XCTAttachment API 它可以让你

1161
00:35:47,266 --> 00:35:49,366
添加屏幕快照     

1162
00:35:49,366 --> 00:35:50,856
以及其他的你在测试过程中

1163
00:35:50,856 --> 00:35:53,406
搜集的数据  并且最终它

1164
00:35:53,586 --> 00:35:55,136
会将这些数据添加在

1165
00:35:55,136 --> 00:35:55,926
你的测试报告中

1166
00:35:56,766 --> 00:35:58,346
这样你就可以

1167
00:35:58,346 --> 00:36:00,276
获得对于 UI 的全面掌控

1168
00:35:58,346 --> 00:36:00,276
获得对于 UI 的全面掌控

1169
00:36:00,906 --> 00:36:02,886
同样也适用于你的 App 里的所有弹窗  

1170
00:36:02,886 --> 00:36:04,236
所有你支持的

1171
00:36:04,236 --> 00:36:06,726
本地化  还有所有你支持的

1172
00:36:06,726 --> 00:36:07,416
设备

1173
00:36:07,696 --> 00:36:09,116
你只用编写一个测试

1174
00:36:09,116 --> 00:36:10,486
就实现所有这些功能

1175
00:36:11,576 --> 00:36:13,496
其实是每个功能都需要

1176
00:36:13,496 --> 00:36:16,136
测试

1177
00:36:16,136 --> 00:36:17,366
想了解更多 XCTAttachment

1178
00:36:17,366 --> 00:36:19,706
或者  

1179
00:36:19,706 --> 00:36:22,046
想知道关于测试还有什么新鲜事 

1180
00:36:22,626 --> 00:36:24,366
请参加这周的相关

1181
00:36:24,366 --> 00:36:24,596
会议

1182
00:36:26,636 --> 00:36:27,976
现在  我想给大家展示

1183
00:36:27,976 --> 00:36:29,446
一个我为我的国际化事实 App 

1184
00:36:29,446 --> 00:36:30,626
编写的测试

1185
00:36:43,066 --> 00:36:45,456
好的  在我的 Xcode 工程中  我已经

1186
00:36:45,456 --> 00:36:47,266
创建了这个 UI 测试的

1187
00:36:47,426 --> 00:36:47,786
目标

1188
00:36:48,106 --> 00:36:50,006
我的第一个测试叫做

1189
00:36:50,046 --> 00:36:51,206
“Test Some Territories”

1190
00:36:51,866 --> 00:36:57,166
我们来运行一下看看它

1191
00:36:58,916 --> 00:36:59,596
到底能做什么

1192
00:36:59,596 --> 00:37:00,986
现在 Xcode 启动了我的 

1193
00:36:59,596 --> 00:37:00,986
现在 Xcode 启动了我的 

1194
00:37:00,986 --> 00:37:05,926
自动测试过程管理工具  转而启动了

1195
00:37:06,086 --> 00:37:07,466
我的 App

1196
00:37:08,776 --> 00:37:11,196
在这个测试里面  我们

1197
00:37:11,196 --> 00:37:12,736
选定一个不同区域  比如

1198
00:37:12,736 --> 00:37:14,666
比利时  然后

1199
00:37:14,666 --> 00:37:15,356
测试成功

1200
00:37:16,736 --> 00:37:18,726
那么现在我们试着用俄文来

1201
00:37:18,726 --> 00:37:19,576
运行我的测试

1202
00:37:19,786 --> 00:37:21,686
为了实现这一点  我要回到我的

1203
00:37:21,686 --> 00:37:22,116
Scheme 中

1204
00:37:23,146 --> 00:37:24,746
和运行测试不同  这次我们

1205
00:37:24,746 --> 00:37:27,276
选定测试 

1206
00:37:27,276 --> 00:37:28,656
在语言栏下面我选择

1207
00:37:28,656 --> 00:37:30,286
俄文  这样我才能测试

1208
00:37:30,286 --> 00:37:32,676
Chris 添加到我的工程中的

1209
00:37:32,676 --> 00:37:33,166
新的本地化结果

1210
00:37:36,946 --> 00:37:38,296
那么现在  我的自动测试过程管理工具

1211
00:37:38,296 --> 00:37:40,096
启动了  我的 App 也启动了 

1212
00:37:42,396 --> 00:37:43,856
并且这次我的 App 是以俄文

1213
00:37:43,856 --> 00:37:44,436
启动的

1214
00:37:45,226 --> 00:37:49,066
但是  好像我的测试

1215
00:37:49,166 --> 00:37:49,506
失败了

1216
00:37:50,076 --> 00:37:52,086
我们来看看到底是怎么回事

1217
00:37:52,796 --> 00:37:54,616
我的测试好像无法

1218
00:37:54,616 --> 00:37:56,566
找到带有“Territory”的单元格 

1219
00:37:56,566 --> 00:37:57,616
这就是我们刚刚谈到的

1220
00:37:57,616 --> 00:37:58,216
那个问题

1221
00:37:58,696 --> 00:37:58,976
我真是笨

1222
00:38:08,936 --> 00:38:11,276
所以  在我的工程当中  我要

1223
00:38:11,276 --> 00:38:13,066
回到我的主表格视图

1224
00:38:13,066 --> 00:38:14,416
控制器中  确保

1225
00:38:14,416 --> 00:38:15,646
我为 territoryPicker 

1226
00:38:15,646 --> 00:38:17,506
单元格设置了

1227
00:38:18,006 --> 00:38:20,156
辅助功能标识符  这样我才能

1228
00:38:20,156 --> 00:38:21,176
选定它

1229
00:38:21,776 --> 00:38:24,336
所以  当我创建单元格的时候 

1230
00:38:24,336 --> 00:38:25,206
也想给它一个

1231
00:38:25,206 --> 00:38:26,186
标识符

1232
00:38:26,296 --> 00:38:29,296
就是 TerritoryPickerCell

1233
00:38:30,596 --> 00:38:31,956
另外  我想在我的测试中使用

1234
00:38:31,956 --> 00:38:33,466
同样的标识符

1235
00:38:35,636 --> 00:38:37,296
然而  虽然测试失败了  不同于

1236
00:38:37,296 --> 00:38:39,866
使用静态文本  我会

1237
00:38:39,866 --> 00:38:41,276
用刚刚创建的标识符来

1238
00:38:41,276 --> 00:38:42,756
替换它

1239
00:38:47,086 --> 00:38:49,476
现在我试着

1240
00:38:49,476 --> 00:38:51,156
用这些标识符并以俄文来

1241
00:38:51,156 --> 00:38:51,886
运行我的测试

1242
00:38:58,386 --> 00:38:59,706
如你所见  我的 App 再次

1243
00:38:59,706 --> 00:39:01,106
以俄文启动了  但是

1244
00:38:59,706 --> 00:39:01,106
以俄文启动了  但是

1245
00:39:01,106 --> 00:39:02,516
这次它运行的更好

1246
00:39:02,516 --> 00:39:04,696
并选择了比利时

1247
00:39:04,696 --> 00:39:05,736
作为国家  这样测试就

1248
00:39:05,736 --> 00:39:06,236
成功了

1249
00:39:07,406 --> 00:39:08,526
所以  我想给大家展示一下

1250
00:39:08,526 --> 00:39:09,736
我的测试到底能做什么

1251
00:39:10,376 --> 00:39:12,116
首先我要启用一些

1252
00:39:12,116 --> 00:39:12,836
功能

1253
00:39:12,836 --> 00:39:14,856
我用这个 XCTAssertEqual

1254
00:39:14,856 --> 00:39:16,456
来确保我的 App

1255
00:39:16,456 --> 00:39:18,496
初始是在美国 

1256
00:39:18,496 --> 00:39:18,966
启动的

1257
00:39:19,846 --> 00:39:21,466
然后我用

1258
00:39:21,466 --> 00:39:24,856
XCTAttachment API 来搜集

1259
00:39:24,946 --> 00:39:25,536
屏幕快照

1260
00:39:25,686 --> 00:39:27,756
我的第一个屏幕快照是

1261
00:39:27,756 --> 00:39:30,446
美国的页面

1262
00:39:31,316 --> 00:39:32,996
然后我把它添加到我的测试里面

1263
00:39:33,096 --> 00:39:34,536
接着在我打开区域列表的时候  

1264
00:39:34,536 --> 00:39:37,116
我搜集到更多的截图

1265
00:39:37,116 --> 00:39:38,936
再接着

1266
00:39:38,936 --> 00:39:39,896
我选择了比利时

1267
00:39:41,026 --> 00:39:42,406
现在  如果最终我想

1268
00:39:42,546 --> 00:39:44,326
查看这些附件  我可以

1269
00:39:44,326 --> 00:39:46,006
直接进入边栏顶上的

1270
00:39:46,006 --> 00:39:48,016
报告导航

1271
00:39:48,016 --> 00:39:50,486
然后选择最近的运行

1272
00:39:50,486 --> 00:39:51,366
测试

1273
00:39:51,996 --> 00:39:54,936
然后  如果我扩大我的测试

1274
00:39:54,936 --> 00:39:58,606
范围  在测试情况下  你会发现

1275
00:39:58,686 --> 00:39:59,976
某些行列

1276
00:39:59,976 --> 00:40:01,756
会带有

1277
00:39:59,976 --> 00:40:01,756
会带有

1278
00:40:02,306 --> 00:40:02,536
附件图标

1279
00:40:02,536 --> 00:40:03,586
这些就是我刚刚创建的

1280
00:40:03,806 --> 00:40:04,926
附件

1281
00:40:05,186 --> 00:40:07,206
所以  如我前面提到的  他们在这里

1282
00:40:07,206 --> 00:40:08,356
都是屏幕快照

1283
00:40:09,066 --> 00:40:10,856
并且  我可以用这些附件

1284
00:40:10,856 --> 00:40:12,086
做很多事情

1285
00:40:12,536 --> 00:40:14,076
我可以将它们打包然后

1286
00:40:14,076 --> 00:40:16,426
发给某个人以确保

1287
00:40:16,426 --> 00:40:18,016
我的翻译质量 

1288
00:40:18,016 --> 00:40:19,186
某个母语就是我

1289
00:40:19,186 --> 00:40:20,446
本地化语言的人 

1290
00:40:20,916 --> 00:40:22,846
这样才能确保 UI 显示正常 

1291
00:40:22,846 --> 00:40:25,256
并且格式正确

1292
00:40:26,166 --> 00:40:27,746
我甚至还能

1293
00:40:27,746 --> 00:40:29,326
在我的 App store 预览里使用这些屏幕快照 

1294
00:40:29,326 --> 00:40:31,796
当我想在世界各地的

1295
00:40:31,986 --> 00:40:33,056
不同店面里

1296
00:40:33,056 --> 00:40:34,216
启动我的 App 时

1297
00:40:34,656 --> 00:40:36,356
这样用户就可以用他们的语言

1298
00:40:36,356 --> 00:40:37,676
预览你的 App 是什么

1299
00:40:37,676 --> 00:40:38,656
样子的

1300
00:40:43,476 --> 00:40:45,646
所以  刚刚给大家展示了 

1301
00:40:45,646 --> 00:40:48,636
只用一个测试就能

1302
00:40:48,636 --> 00:40:50,186
测试每个添加到你 App 里面的

1303
00:40:50,186 --> 00:40:50,616
本地化

1304
00:40:51,356 --> 00:40:52,526
总结一下今天我们所说的 

1305
00:40:52,526 --> 00:40:54,906
我们主要谈到了

1306
00:40:54,906 --> 00:40:56,886
App 的本地化

1307
00:40:56,886 --> 00:40:57,156
流程

1308
00:40:58,426 --> 00:40:59,976
首先  你需要准备本地化的

1309
00:41:00,016 --> 00:41:01,756
代码  这是国际化的

1310
00:41:01,756 --> 00:41:03,146
其中一步

1311
00:41:03,146 --> 00:41:06,056
接着我们给大家演示了

1312
00:41:06,056 --> 00:41:07,446
如何准备你的 App 的前期

1313
00:41:07,446 --> 00:41:09,806
工作  包括静态

1314
00:41:09,806 --> 00:41:11,666
分析和自动排版

1315
00:41:11,666 --> 00:41:13,556
警告  以及新的

1316
00:41:13,636 --> 00:41:14,346
伪语言

1317
00:41:15,976 --> 00:41:18,176
然后  你可以将所有的

1318
00:41:18,176 --> 00:41:20,456
本地化内容导出成一个单独的

1319
00:41:20,456 --> 00:41:21,386
XLIFF

1320
00:41:21,836 --> 00:41:22,906
这包括

1321
00:41:23,016 --> 00:41:24,286
STRINGSDICT 文档  它可以

1322
00:41:24,286 --> 00:41:25,836
强大的处理双数和

1323
00:41:25,896 --> 00:41:27,616
自适应字符串

1324
00:41:29,036 --> 00:41:30,666
最后  当你的 XLIFF 翻译

1325
00:41:30,726 --> 00:41:32,676
完成后  你可以将它导入

1326
00:41:32,676 --> 00:41:34,326
回你的工程当中  并

1327
00:41:34,326 --> 00:41:36,026
整合所有翻译内容

1328
00:41:36,026 --> 00:41:37,496
到你的 App 中的

1329
00:41:37,496 --> 00:41:37,606
不同地方

1330
00:41:39,326 --> 00:41:40,656
接着你可以利用

1331
00:41:40,656 --> 00:41:42,896
已有的测试

1332
00:41:42,896 --> 00:41:44,776
在所有你支持的本地化中

1333
00:41:44,776 --> 00:41:45,636
运行它们

1334
00:41:45,856 --> 00:41:47,106
然后除了测试你的 App 的

1335
00:41:47,106 --> 00:41:48,896
功能以外 

1336
00:41:48,896 --> 00:41:51,266
你还可以利用新的 XCT 附件做

1337
00:41:51,266 --> 00:41:51,906
更多的事情

1338
00:41:53,606 --> 00:41:54,796
想了解更多信息  我们的

1339
00:41:54,796 --> 00:41:56,556
编号是 401 你可以在

1340
00:41:56,556 --> 00:41:57,306
developer.Apple.com 上

1341
00:41:57,306 --> 00:41:58,716
访问我们的网页

1342
00:41:59,606 --> 00:42:01,106
强烈推荐您的

1343
00:41:59,606 --> 00:42:01,106
强烈推荐您的

1344
00:42:01,106 --> 00:42:02,496
参与  至少可以

1345
00:42:02,496 --> 00:42:03,816
在本周观看

1346
00:42:03,816 --> 00:42:04,146
相关内容

1347
00:42:05,726 --> 00:42:06,556
谢谢  欢迎欣赏更多

1348
00:42:06,556 --> 00:42:06,976
精彩内容

1349
00:42:07,516 --> 00:42:11,500
[掌声]
