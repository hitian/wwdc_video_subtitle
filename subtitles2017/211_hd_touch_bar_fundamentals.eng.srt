1
00:00:19,636 --> 00:00:20,386
&gt;&gt; Good morning

2
00:00:21,029 --> 00:00:23,029
[ Applause ]

3
00:00:23,042 --> 00:00:25,042
.

4
00:00:25,056 --> 00:00:25,386
Thank you.

5
00:00:26,066 --> 00:00:27,156
I'm Chris Dreessen.

6
00:00:27,396 --> 00:00:28,766
This is Touch Bar Fundamentals.

7
00:00:29,136 --> 00:00:30,646
If you have no idea whatsoever

8
00:00:30,646 --> 00:00:32,235
what Touch Bar is, I'm not sure

9
00:00:32,235 --> 00:00:33,336
how you got here, but I'm glad

10
00:00:33,336 --> 00:00:33,656
you're here.

11
00:00:34,286 --> 00:00:36,876
Likely most of us are a bit more

12
00:00:36,876 --> 00:00:38,776
familiar with Touch Bar, but we

13
00:00:38,776 --> 00:00:39,596
may not have had a chance to

14
00:00:39,596 --> 00:00:40,296
actually play with it.

15
00:00:40,296 --> 00:00:42,426
So, let me orient you to it.

16
00:00:42,806 --> 00:00:44,346
So, we have here a picture of a

17
00:00:44,346 --> 00:00:45,856
MacBook Pro and in place of the

18
00:00:45,856 --> 00:00:47,586
F keys you might be used to, we

19
00:00:47,586 --> 00:00:48,566
have this thing we call Touch

20
00:00:48,606 --> 00:00:48,846
Bar.

21
00:00:49,146 --> 00:00:50,816
And this is an interactive input

22
00:00:50,816 --> 00:00:51,796
and display device.

23
00:00:52,226 --> 00:00:53,596
And let me familiarize you with

24
00:00:53,596 --> 00:00:53,996
these parts.

25
00:00:53,996 --> 00:00:56,686
On the left, we have the escape

26
00:00:56,686 --> 00:00:58,216
key, which should be pretty

27
00:00:58,216 --> 00:00:58,896
familiar to everyone.

28
00:00:59,226 --> 00:01:00,026
And on the right, we have this

29
00:00:59,226 --> 00:01:00,026
And on the right, we have this

30
00:01:00,026 --> 00:01:01,136
thing called the control script.

31
00:01:01,586 --> 00:01:02,756
And you can go ahead and

32
00:01:02,756 --> 00:01:04,086
disclose the control strip if

33
00:01:04,086 --> 00:01:04,446
you want.

34
00:01:04,796 --> 00:01:05,886
And you'll have basically the

35
00:01:05,886 --> 00:01:07,406
old media functions the F keys

36
00:01:07,406 --> 00:01:07,766
offer.

37
00:01:08,206 --> 00:01:09,276
And you can use this the same

38
00:01:09,276 --> 00:01:10,566
way you always have, button

39
00:01:11,286 --> 00:01:12,246
presses.

40
00:01:12,646 --> 00:01:14,366
You don't have to disclose it

41
00:01:14,616 --> 00:01:15,006
thought.

42
00:01:16,006 --> 00:01:18,556
You can actually just go ahead

43
00:01:18,556 --> 00:01:20,086
and use it in its collapsed

44
00:01:20,086 --> 00:01:20,346
form.

45
00:01:20,756 --> 00:01:21,846
And when it's its collapsed form

46
00:01:21,846 --> 00:01:22,906
it has some neat functions too.

47
00:01:23,166 --> 00:01:24,706
We can just do like a glancing

48
00:01:24,706 --> 00:01:26,296
swipe over the volume button and

49
00:01:26,296 --> 00:01:27,376
adjust the volume directly.

50
00:01:27,796 --> 00:01:28,886
So, there's a lot of

51
00:01:28,886 --> 00:01:30,306
conveniences here for adjusting

52
00:01:30,306 --> 00:01:31,346
certain system functions.

53
00:01:31,866 --> 00:01:33,586
But, that's not really the most

54
00:01:33,586 --> 00:01:34,566
interesting parts of Touch Bar,

55
00:01:34,566 --> 00:01:35,866
the most interesting parts are

56
00:01:35,866 --> 00:01:37,546
between the escape key and the

57
00:01:37,546 --> 00:01:38,126
control strip.

58
00:01:38,426 --> 00:01:38,936
And that's where your

59
00:01:38,936 --> 00:01:40,066
application content is going to

60
00:01:40,066 --> 00:01:40,266
go.

61
00:01:40,676 --> 00:01:41,446
And so, let me show you what

62
00:01:41,446 --> 00:01:42,636
some of our system applications

63
00:01:42,636 --> 00:01:43,306
have done with this.

64
00:01:44,616 --> 00:01:45,696
So, here we have photos.

65
00:01:46,316 --> 00:01:47,646
And this is just browsing the

66
00:01:47,646 --> 00:01:48,436
photos library.

67
00:01:48,636 --> 00:01:50,016
And we can actually go ahead and

68
00:01:50,016 --> 00:01:51,836
scrub through our photo library

69
00:01:51,836 --> 00:01:52,056
here.

70
00:01:52,056 --> 00:01:53,306
It's just like in iOS with

71
00:01:53,306 --> 00:01:54,586
direct input with our finger, so

72
00:01:54,586 --> 00:01:56,006
we plop our finger down on the

73
00:01:56,006 --> 00:01:57,616
Touch Bar and it's just tracking

74
00:01:57,616 --> 00:01:57,766
it.

75
00:01:57,886 --> 00:01:59,476
We also have momentum swipes

76
00:01:59,476 --> 00:02:01,386
there if we want to browse

77
00:01:59,476 --> 00:02:01,386
there if we want to browse

78
00:02:01,386 --> 00:02:02,056
through it quickly.

79
00:02:02,116 --> 00:02:05,106
If you go to edit a photo, this

80
00:02:05,216 --> 00:02:07,106
is the photos crop and rotate

81
00:02:07,106 --> 00:02:07,326
tool.

82
00:02:07,596 --> 00:02:08,506
And they have this rotation

83
00:02:08,506 --> 00:02:09,326
thing in the middle of the Touch

84
00:02:09,326 --> 00:02:10,626
Bar and it tracks your finger

85
00:02:10,846 --> 00:02:11,996
directly, which is pretty fun,

86
00:02:11,996 --> 00:02:12,666
because it's sort of like

87
00:02:12,666 --> 00:02:15,596
actually rotating a picture on a

88
00:02:15,906 --> 00:02:16,226
table.

89
00:02:16,846 --> 00:02:19,046
Finally, photos also exposes

90
00:02:19,046 --> 00:02:19,506
filters.

91
00:02:19,606 --> 00:02:21,106
So, we can scrub and swipe

92
00:02:21,106 --> 00:02:21,856
through our filters here.

93
00:02:22,116 --> 00:02:23,196
And this is an interesting use

94
00:02:23,196 --> 00:02:24,736
of Touch Bar, because normally

95
00:02:24,736 --> 00:02:25,716
if we were using a mouse or a

96
00:02:25,716 --> 00:02:27,316
track pad, we'd go ahead and

97
00:02:27,316 --> 00:02:29,006
look at our photo and then look

98
00:02:29,006 --> 00:02:30,656
at the filters section and move

99
00:02:30,656 --> 00:02:31,876
the mouse or track pad to that,

100
00:02:31,876 --> 00:02:32,946
select the next filter.

101
00:02:33,166 --> 00:02:34,036
And with Touch Bar we can

102
00:02:34,036 --> 00:02:35,406
actually keep our eyes on the

103
00:02:36,076 --> 00:02:36,186
cat.

104
00:02:37,376 --> 00:02:38,926
Here's QuickTime Player.

105
00:02:38,926 --> 00:02:40,546
QuickTime Player has a scrubber

106
00:02:40,546 --> 00:02:41,666
control directly in the touch

107
00:02:41,666 --> 00:02:43,006
bar, so we can move a movie back

108
00:02:43,006 --> 00:02:44,486
and forth, it's pretty neat.

109
00:02:44,616 --> 00:02:45,526
And they've also gone ahead and

110
00:02:45,526 --> 00:02:46,776
exposed a similar control for

111
00:02:46,776 --> 00:02:48,976
trimming, so we can adjust the

112
00:02:48,976 --> 00:02:50,396
beginning and end of a movie

113
00:02:50,396 --> 00:02:51,156
that we've recorded.

114
00:02:51,766 --> 00:02:52,866
Something I'd like to point out

115
00:02:52,906 --> 00:02:54,206
about QuickTime Player here, is

116
00:02:54,206 --> 00:02:55,176
that QuickTime Player didn't

117
00:02:55,176 --> 00:02:56,756
write any code to do this, this

118
00:02:56,756 --> 00:02:58,306
is all inside of AVKit and

119
00:02:58,306 --> 00:02:58,896
AVPlayer view.

120
00:02:58,896 --> 00:03:00,236
So, if you're already using

121
00:02:58,896 --> 00:03:00,236
So, if you're already using

122
00:03:00,236 --> 00:03:01,446
AVKit, you've probably got this

123
00:03:01,446 --> 00:03:02,426
functionality for free,

124
00:03:02,706 --> 00:03:03,506
congratulations.

125
00:03:04,496 --> 00:03:06,496
Let's look at text edit for a

126
00:03:06,496 --> 00:03:06,796
moment.

127
00:03:07,226 --> 00:03:08,586
So, everyone's familiar with

128
00:03:08,586 --> 00:03:09,646
QuickType on iOS.

129
00:03:09,886 --> 00:03:10,956
And We've gone ahead and brought

130
00:03:10,956 --> 00:03:12,636
QuickType over to Touch Bar on

131
00:03:12,636 --> 00:03:14,036
macOS, and as everyone know

132
00:03:14,036 --> 00:03:15,426
QuickType is a great short

133
00:03:15,426 --> 00:03:16,366
fiction writing tool.

134
00:03:16,776 --> 00:03:18,176
So, if we go ahead and write a

135
00:03:18,176 --> 00:03:20,456
short story here, 'the fact is

136
00:03:20,456 --> 00:03:21,996
he has to;' this is not the best

137
00:03:21,996 --> 00:03:22,986
short fiction I've read.

138
00:03:23,456 --> 00:03:24,856
But that's okay, because Touch

139
00:03:24,856 --> 00:03:25,836
Bar gives us a way of spicing

140
00:03:25,836 --> 00:03:26,096
that up.

141
00:03:26,096 --> 00:03:27,456
We also have the emoji picker.

142
00:03:28,426 --> 00:03:30,696
And, let's go ahead and spice it

143
00:03:30,696 --> 00:03:31,026
up a bit.

144
00:03:31,026 --> 00:03:33,056
We can browse our emoji here and

145
00:03:33,056 --> 00:03:34,306
say I laughed until I cried, I

146
00:03:34,306 --> 00:03:36,236
was turned into a frog, and I'm

147
00:03:36,236 --> 00:03:37,526
happy I'm no longer a frog.

148
00:03:37,826 --> 00:03:39,126
So, we've added some nice human

149
00:03:39,126 --> 00:03:40,826
emotion and drama to our story,

150
00:03:41,136 --> 00:03:42,076
all thanks to Touch Bar.

151
00:03:43,286 --> 00:03:45,756
TextEdit of course, is a text

152
00:03:45,756 --> 00:03:46,806
editing tool also, so we can

153
00:03:46,806 --> 00:03:48,626
collapse the QuickType options

154
00:03:48,626 --> 00:03:49,766
here and bring up text

155
00:03:49,766 --> 00:03:50,586
formatting controls.

156
00:03:50,766 --> 00:03:51,916
And maybe the most useful thing

157
00:03:51,916 --> 00:03:53,116
is to make it bold, or italic,

158
00:03:53,116 --> 00:03:54,636
or add some color to it and pink

159
00:03:54,636 --> 00:03:55,856
feels right for the story where

160
00:03:55,856 --> 00:03:57,076
I'm turned into a frog, and not

161
00:03:57,076 --> 00:03:57,656
a frog again.

162
00:03:57,996 --> 00:03:58,946
Anyway, let's never speak of

163
00:03:58,946 --> 00:03:59,516
that.

164
00:04:00,886 --> 00:04:02,406
Something else I want to point

165
00:04:02,406 --> 00:04:03,456
out about all these examples

166
00:04:03,456 --> 00:04:04,656
I've show you is that they're

167
00:04:04,656 --> 00:04:05,356
customizable.

168
00:04:05,356 --> 00:04:07,056
We have a customization panel

169
00:04:07,396 --> 00:04:08,696
for Touch Bar.

170
00:04:09,036 --> 00:04:10,286
And you can rearrange items in

171
00:04:10,286 --> 00:04:10,406
it.

172
00:04:10,646 --> 00:04:11,876
You can add items from the

173
00:04:11,876 --> 00:04:12,876
customization panel on the

174
00:04:12,876 --> 00:04:14,086
screen or remove them from the

175
00:04:14,086 --> 00:04:14,576
Touch Bar.

176
00:04:14,886 --> 00:04:16,326
And this is important, because

177
00:04:16,326 --> 00:04:17,456
every user's workflow is a

178
00:04:17,456 --> 00:04:18,286
little bit different.

179
00:04:18,286 --> 00:04:19,245
Some are doing different things

180
00:04:19,245 --> 00:04:20,375
with your application, and

181
00:04:20,375 --> 00:04:21,366
others just prefer to use the

182
00:04:21,366 --> 00:04:22,396
computer in a different way.

183
00:04:22,616 --> 00:04:24,196
And by enabling customization,

184
00:04:24,486 --> 00:04:25,766
you can give users the exact

185
00:04:25,766 --> 00:04:26,606
experience they want.

186
00:04:27,116 --> 00:04:28,086
And I'll teach you how to do

187
00:04:28,086 --> 00:04:29,126
that programmatically in just a

188
00:04:29,126 --> 00:04:29,626
little bit.

189
00:04:30,376 --> 00:04:31,526
Let's cover some of the

190
00:04:31,526 --> 00:04:33,046
technical details and some of

191
00:04:33,926 --> 00:04:35,026
the implications that come with

192
00:04:35,026 --> 00:04:35,256
that.

193
00:04:35,646 --> 00:04:36,776
So, the Touch Bar is the

194
00:04:36,776 --> 00:04:38,406
beautiful P3 retina display.

195
00:04:38,406 --> 00:04:40,456
It has a nice P3 color gamut,

196
00:04:40,766 --> 00:04:42,496
great blacks, wonderful

197
00:04:42,496 --> 00:04:43,076
contrast.

198
00:04:43,436 --> 00:04:46,276
And that means that our assets

199
00:04:46,276 --> 00:04:47,586
we include in our applications

200
00:04:47,586 --> 00:04:49,046
don't have to cover as much as

201
00:04:49,046 --> 00:04:50,176
what we do on the main screen.

202
00:04:50,866 --> 00:04:52,736
Additionally, it's a true multi

203
00:04:52,736 --> 00:04:54,476
touch device, which means we can

204
00:04:54,476 --> 00:04:55,906
actually track multiple fingers.

205
00:04:56,276 --> 00:04:57,836
And that affords us some new

206
00:04:57,836 --> 00:04:58,726
options for what sort of

207
00:04:58,726 --> 00:04:59,536
controls we might make.

208
00:04:59,696 --> 00:05:01,326
You're going to hear this a lot

209
00:04:59,696 --> 00:05:01,326
You're going to hear this a lot

210
00:05:01,326 --> 00:05:02,176
about Touch Bar, that it's

211
00:05:02,176 --> 00:05:02,996
context sensitive.

212
00:05:03,556 --> 00:05:05,626
And that's very neat in terms of

213
00:05:05,676 --> 00:05:07,336
enabling the user to work with

214
00:05:07,336 --> 00:05:08,536
functions in the application

215
00:05:08,536 --> 00:05:10,606
that are appropriate, but it has

216
00:05:10,606 --> 00:05:11,916
implications for event handling,

217
00:05:11,916 --> 00:05:13,116
because the context in the

218
00:05:13,116 --> 00:05:14,956
application might change, which

219
00:05:14,956 --> 00:05:16,286
the user is using the Touch Bar,

220
00:05:16,396 --> 00:05:17,876
and our controls need to react

221
00:05:18,716 --> 00:05:19,176
to that.

222
00:05:19,246 --> 00:05:20,686
And finally, we actually go

223
00:05:20,686 --> 00:05:22,726
ahead and take some care to

224
00:05:22,726 --> 00:05:24,426
match the key taps and glyphs on

225
00:05:24,426 --> 00:05:25,946
the Touch Bar to those on the

226
00:05:25,946 --> 00:05:27,016
physical keyboard, and we do

227
00:05:27,016 --> 00:05:28,136
that by watching the ambient

228
00:05:28,136 --> 00:05:29,446
brightness, and knowing whether

229
00:05:29,446 --> 00:05:30,626
or not the keyboard backlight is

230
00:05:30,626 --> 00:05:30,816
on.

231
00:05:31,126 --> 00:05:32,296
But this has implications for

232
00:05:32,296 --> 00:05:33,336
how we might draw custom

233
00:05:33,336 --> 00:05:33,876
controls.

234
00:05:34,246 --> 00:05:35,116
And we're not going to go into

235
00:05:35,116 --> 00:05:35,996
detail on any of those

236
00:05:35,996 --> 00:05:37,196
implications in this session,

237
00:05:37,196 --> 00:05:38,316
but we do have a session later

238
00:05:38,316 --> 00:05:39,846
this afternoon that will cover

239
00:05:39,846 --> 00:05:40,616
all these topics.

240
00:05:41,876 --> 00:05:44,856
So, I'm assuming that once

241
00:05:44,856 --> 00:05:45,676
you're done here, maybe even

242
00:05:45,676 --> 00:05:46,516
before that, you're going to be

243
00:05:46,516 --> 00:05:47,746
really jazzed to add Touch Bar

244
00:05:47,746 --> 00:05:49,006
support to your application if

245
00:05:49,006 --> 00:05:49,686
you haven't already.

246
00:05:49,686 --> 00:05:50,896
But when you're coming up with

247
00:05:50,896 --> 00:05:52,326
your UI's there's a few things

248
00:05:52,326 --> 00:05:53,056
to keep in mind.

249
00:05:53,396 --> 00:05:54,506
And the first of them, the prime

250
00:05:54,506 --> 00:05:56,146
directive of Touch Bar is that

251
00:05:56,146 --> 00:05:57,316
the Touch Bar is an input

252
00:05:57,316 --> 00:05:57,716
device.

253
00:05:57,716 --> 00:05:58,936
It's meant to be interacted with

254
00:05:58,936 --> 00:05:59,516
by the user.

255
00:05:59,766 --> 00:06:00,616
It's not supposed to be

256
00:05:59,766 --> 00:06:00,616
It's not supposed to be

257
00:06:00,616 --> 00:06:01,416
displaying things.

258
00:06:01,416 --> 00:06:02,696
So, no status indicators or

259
00:06:02,696 --> 00:06:03,406
stock tickers.

260
00:06:04,046 --> 00:06:05,656
The next thing we should keep in

261
00:06:05,656 --> 00:06:06,706
mind when making our Touch Bar

262
00:06:06,706 --> 00:06:09,046
UI's is that we don't want to

263
00:06:09,046 --> 00:06:10,396
put functionality in the Touch

264
00:06:10,426 --> 00:06:11,886
Bar that doesn't exist anywhere

265
00:06:11,886 --> 00:06:12,906
else in the application.

266
00:06:13,226 --> 00:06:14,746
It's great to have null and fun

267
00:06:14,746 --> 00:06:16,066
Touch Bar UI's, but it shouldn't

268
00:06:16,066 --> 00:06:17,216
be the only way of accessing

269
00:06:17,216 --> 00:06:17,876
functionality.

270
00:06:18,326 --> 00:06:19,736
And there's a good reason for a

271
00:06:19,736 --> 00:06:21,526
lot of that, and that's that not

272
00:06:21,526 --> 00:06:23,106
every user has a Touch Bar, so

273
00:06:23,106 --> 00:06:24,336
if you only put something in the

274
00:06:24,336 --> 00:06:25,306
Touch Bar, you're going to be

275
00:06:25,306 --> 00:06:26,546
losing out on functionality for

276
00:06:26,546 --> 00:06:27,216
a lot of users.

277
00:06:27,866 --> 00:06:30,476
And finally, this is almost a

278
00:06:30,476 --> 00:06:31,616
side effect of saying the Touch

279
00:06:31,616 --> 00:06:32,476
Bar is an input device.

280
00:06:32,866 --> 00:06:34,206
While we want creative beautiful

281
00:06:34,206 --> 00:06:35,386
UI's in the Touch Bar, they

282
00:06:35,386 --> 00:06:36,486
shouldn't be taking center

283
00:06:36,486 --> 00:06:36,966
stage.

284
00:06:37,206 --> 00:06:38,476
The content the user's working

285
00:06:38,476 --> 00:06:40,226
with on the main screen should

286
00:06:40,226 --> 00:06:41,316
always be their focus.

287
00:06:41,316 --> 00:06:42,256
So, the Touch Bar shouldn't be

288
00:06:42,256 --> 00:06:42,826
distracting.

289
00:06:43,806 --> 00:06:45,506
With that out of the way, we're

290
00:06:45,506 --> 00:06:46,436
going to go ahead and cover the

291
00:06:46,436 --> 00:06:48,016
core classes that let you use

292
00:06:48,016 --> 00:06:48,706
the Touch Bar in your

293
00:06:48,706 --> 00:06:49,336
application.

294
00:06:49,626 --> 00:06:50,666
We're going to cover how the

295
00:06:50,666 --> 00:06:52,006
responder change is integrated

296
00:06:52,006 --> 00:06:53,266
with these for discovering what

297
00:06:53,266 --> 00:06:54,736
context sensitive functionality

298
00:06:54,736 --> 00:06:55,336
to display.

299
00:06:55,336 --> 00:06:56,666
And then, we're going to go

300
00:06:56,666 --> 00:06:58,136
ahead and take a deep dive on

301
00:06:58,136 --> 00:06:59,666
one of those core classes and

302
00:06:59,666 --> 00:07:00,756
show you most of what it can do.

303
00:06:59,666 --> 00:07:00,756
show you most of what it can do.

304
00:07:01,646 --> 00:07:02,356
So, let's start with the

305
00:07:02,356 --> 00:07:02,816
classes.

306
00:07:03,596 --> 00:07:05,436
The first class is of course

307
00:07:05,506 --> 00:07:06,296
NSTouchBarItem.

308
00:07:06,786 --> 00:07:08,096
And that plays with NSTouchBar

309
00:07:08,096 --> 00:07:08,886
and NSResponder.

310
00:07:09,206 --> 00:07:10,486
And let's just take a closer

311
00:07:10,856 --> 00:07:11,106
look.

312
00:07:11,106 --> 00:07:12,466
This is a mockup of the mail

313
00:07:12,466 --> 00:07:13,306
Touch Bar I've made.

314
00:07:13,306 --> 00:07:14,546
And everything I'm highlighting

315
00:07:14,546 --> 00:07:16,486
here, is an NS view, or NS

316
00:07:16,486 --> 00:07:17,426
control, or NS button.

317
00:07:17,426 --> 00:07:18,386
They're all things you're very

318
00:07:18,386 --> 00:07:19,826
familiar with because Touch Bar

319
00:07:20,116 --> 00:07:21,646
is reusing the existing view

320
00:07:21,646 --> 00:07:23,216
functionality we've been using

321
00:07:23,216 --> 00:07:24,636
in our Cocoa apps for very long

322
00:07:25,806 --> 00:07:26,456
time.

323
00:07:26,456 --> 00:07:27,556
There's a few things though that

324
00:07:27,556 --> 00:07:28,936
Touch Bar does, that view isn't

325
00:07:28,936 --> 00:07:29,776
prepared to do.

326
00:07:30,036 --> 00:07:31,346
So, we need some way of adapting

327
00:07:31,346 --> 00:07:31,556
that.

328
00:07:31,556 --> 00:07:32,296
And that's what this

329
00:07:32,296 --> 00:07:33,396
NSTouchBarItem class does.

330
00:07:33,396 --> 00:07:35,186
So, it binds a view to the Touch

331
00:07:35,226 --> 00:07:35,446
Bar.

332
00:07:36,186 --> 00:07:37,786
NSTouchBarItem itself is a very

333
00:07:37,786 --> 00:07:38,596
basic class.

334
00:07:38,656 --> 00:07:40,726
It's intended to be sub classed

335
00:07:40,726 --> 00:07:41,956
and that's probably not

336
00:07:41,956 --> 00:07:43,036
something you're actually going

337
00:07:43,036 --> 00:07:43,716
to have to do.

338
00:07:43,716 --> 00:07:45,286
Because AppKit includes about

339
00:07:45,286 --> 00:07:46,896
half a dozen existing Touch Bar

340
00:07:46,896 --> 00:07:48,106
subclasses that will handle a

341
00:07:48,106 --> 00:07:49,626
lot of the needs you're going to

342
00:07:49,626 --> 00:07:49,896
have.

343
00:07:50,266 --> 00:07:51,976
And finally one of the most

344
00:07:51,976 --> 00:07:52,886
important features of the

345
00:07:52,886 --> 00:07:54,866
NSTouchBarItem class is that it

346
00:07:54,866 --> 00:07:56,566
has an identifier that uniquely

347
00:07:56,566 --> 00:07:57,776
identifies that item and

348
00:07:57,776 --> 00:07:59,216
functionality within its

349
00:07:59,276 --> 00:08:00,296
NSTouchBar instance.

350
00:07:59,276 --> 00:08:00,296
NSTouchBar instance.

351
00:08:01,066 --> 00:08:03,016
So, let's talk about NSTouchBar

352
00:08:03,016 --> 00:08:03,686
itself.

353
00:08:03,836 --> 00:08:05,446
The most important thing is that

354
00:08:05,446 --> 00:08:06,936
it has an array of those item

355
00:08:06,936 --> 00:08:08,486
identifiers that identify the

356
00:08:08,486 --> 00:08:08,876
items.

357
00:08:08,876 --> 00:08:10,286
And this is important for

358
00:08:10,406 --> 00:08:12,056
resolving what functionalities

359
00:08:12,056 --> 00:08:13,026
goes into the Touch Bar to the

360
00:08:13,026 --> 00:08:14,206
views used to display it.

361
00:08:14,676 --> 00:08:15,736
Let's take a quick look at a

362
00:08:15,736 --> 00:08:16,306
code snippet.

363
00:08:17,106 --> 00:08:18,556
So, here we're going to go ahead

364
00:08:18,556 --> 00:08:19,376
and just declare some

365
00:08:19,376 --> 00:08:21,046
identifiers for a shark and sea

366
00:08:21,046 --> 00:08:21,366
turtle.

367
00:08:21,876 --> 00:08:23,026
Usually when you come up with

368
00:08:23,026 --> 00:08:24,736
identifiers for our code, we

369
00:08:24,736 --> 00:08:26,496
recommend using reverse DNS, but

370
00:08:26,496 --> 00:08:27,276
these are a little bit more

371
00:08:27,276 --> 00:08:27,686
legible.

372
00:08:27,776 --> 00:08:30,306
And once we have those

373
00:08:30,306 --> 00:08:31,886
identifiers, we're going to go

374
00:08:31,886 --> 00:08:33,155
ahead and instantiate a new

375
00:08:33,155 --> 00:08:34,546
NSTouchBar and just set the

376
00:08:34,546 --> 00:08:35,856
default the item identifiers

377
00:08:35,856 --> 00:08:36,096
array.

378
00:08:36,506 --> 00:08:38,206
And this let's AppKit know what

379
00:08:38,206 --> 00:08:39,546
sort of semantic functionality

380
00:08:39,546 --> 00:08:40,986
we're putting in the Touch Bar.

381
00:08:41,466 --> 00:08:43,015
What we're going to cover now is

382
00:08:43,015 --> 00:08:44,426
how AppKit resolves that.

383
00:08:44,866 --> 00:08:46,096
And there's two ways we do this

384
00:08:46,096 --> 00:08:46,386
look up.

385
00:08:46,386 --> 00:08:47,446
There's two ways we find

386
00:08:47,446 --> 00:08:48,696
NSTouchBarItem from the item

387
00:08:48,696 --> 00:08:49,346
identifiers.

388
00:08:49,756 --> 00:08:51,256
And the first is a property on

389
00:08:51,296 --> 00:08:52,356
NSTouchBar called template

390
00:08:52,356 --> 00:08:52,726
items.

391
00:08:53,086 --> 00:08:54,496
And this is just a set of items.

392
00:08:54,936 --> 00:08:56,176
So, if we go back to some code

393
00:08:56,176 --> 00:08:57,436
snippets, this is what we had

394
00:08:57,436 --> 00:08:59,386
before, exactly the same, and

395
00:08:59,386 --> 00:09:00,096
we've added some.

396
00:08:59,386 --> 00:09:00,096
we've added some.

397
00:09:00,516 --> 00:09:02,226
So, here I'm using an

398
00:09:02,226 --> 00:09:04,536
NSCustomTouchBar item class for

399
00:09:04,536 --> 00:09:05,346
the shark and turtles

400
00:09:05,346 --> 00:09:05,976
respectively.

401
00:09:05,976 --> 00:09:06,986
And this is one of those

402
00:09:06,986 --> 00:09:07,996
subclasses I mentioned.

403
00:09:08,436 --> 00:09:09,726
And we're just setting the view

404
00:09:10,016 --> 00:09:12,586
of these items to an NS button.

405
00:09:13,456 --> 00:09:14,516
And we go ahead and we make the

406
00:09:14,516 --> 00:09:15,696
title, you know the shark emoji

407
00:09:15,696 --> 00:09:16,476
or the turtle emoji.

408
00:09:16,856 --> 00:09:18,216
You'll notice we're using the NS

409
00:09:18,246 --> 00:09:19,596
button convenience constructor

410
00:09:19,596 --> 00:09:22,116
we introduced in macOS 10.12,

411
00:09:22,566 --> 00:09:23,866
and that's important because

412
00:09:23,866 --> 00:09:24,966
these convenience constructors

413
00:09:24,966 --> 00:09:26,326
will configure the buttons to be

414
00:09:26,326 --> 00:09:27,946
appearance sensitive to use the

415
00:09:27,946 --> 00:09:29,246
right styling and font.

416
00:09:29,616 --> 00:09:30,896
And if we build an NS button

417
00:09:30,896 --> 00:09:32,466
directly, we may not get that

418
00:09:32,466 --> 00:09:33,036
functionality.

419
00:09:33,036 --> 00:09:34,166
So, this is a big time saver.

420
00:09:34,756 --> 00:09:36,676
But, finally after instantiating

421
00:09:36,676 --> 00:09:37,976
these items, we're just going to

422
00:09:37,976 --> 00:09:39,116
go ahead and stuff them in the

423
00:09:39,116 --> 00:09:39,976
template item set.

424
00:09:40,586 --> 00:09:41,596
And if we do all of this, we're

425
00:09:41,596 --> 00:09:42,416
going to wind up with the Touch

426
00:09:42,416 --> 00:09:43,316
Bar we see at the bottom of the

427
00:09:43,316 --> 00:09:44,766
screen, with our shark button

428
00:09:44,766 --> 00:09:45,576
and our turtle button.

429
00:09:47,036 --> 00:09:48,186
Something I'd like to mention,

430
00:09:48,416 --> 00:09:50,426
if you go ahead and copy and

431
00:09:50,426 --> 00:09:52,366
paste the code on the slide into

432
00:09:52,366 --> 00:09:54,296
a Swift playground, XCode will

433
00:09:54,296 --> 00:09:55,976
go ahead and preview the Touch

434
00:09:56,006 --> 00:09:57,216
Bar items we construct and the

435
00:09:57,216 --> 00:09:58,406
Touch Bar itself.

436
00:09:58,406 --> 00:09:59,756
And this is a pretty useful way

437
00:09:59,756 --> 00:10:01,006
of rapidly prototyping your

438
00:09:59,756 --> 00:10:01,006
of rapidly prototyping your

439
00:10:01,006 --> 00:10:01,816
Touch Bar UIs.

440
00:10:03,046 --> 00:10:03,946
So, that's template items.

441
00:10:04,386 --> 00:10:06,036
Let's go ahead and cover what we

442
00:10:06,036 --> 00:10:08,056
can do with the delegate.

443
00:10:08,056 --> 00:10:10,066
So, there's a single delegate

444
00:10:10,066 --> 00:10:11,476
method in the NSTouchBarDelegate

445
00:10:11,476 --> 00:10:11,986
protocol.

446
00:10:11,986 --> 00:10:12,776
And that's Touch Bar,

447
00:10:12,776 --> 00:10:14,076
makeItemForIdentifier.

448
00:10:14,976 --> 00:10:16,426
And it's pretty simple.

449
00:10:16,556 --> 00:10:17,566
If we take a look at this code

450
00:10:17,566 --> 00:10:19,076
here, this is exactly the same

451
00:10:19,076 --> 00:10:20,106
as the template items case.

452
00:10:20,106 --> 00:10:20,966
What's different is we've

453
00:10:20,966 --> 00:10:21,986
structured it in a switch

454
00:10:21,986 --> 00:10:23,786
statement, so we can go ahead

455
00:10:23,786 --> 00:10:25,276
and conditionally create a new

456
00:10:25,276 --> 00:10:27,366
item when AppKit asks for one of

457
00:10:27,366 --> 00:10:28,616
our specific identifiers.

458
00:10:29,596 --> 00:10:31,906
AppKit cahces the result of this

459
00:10:31,906 --> 00:10:32,266
method.

460
00:10:32,556 --> 00:10:33,806
So, you really can just treat

461
00:10:33,806 --> 00:10:35,106
this as a factory and make a new

462
00:10:35,106 --> 00:10:35,896
instance each time.

463
00:10:35,896 --> 00:10:36,856
You don't have to maintain a

464
00:10:36,856 --> 00:10:38,096
back pointer yourself, unless

465
00:10:38,096 --> 00:10:39,346
that's useful for other reasons.

466
00:10:40,536 --> 00:10:43,236
Something else that's important

467
00:10:43,236 --> 00:10:44,646
to mention is, you know I've

468
00:10:44,646 --> 00:10:46,806
covered customizability a little

469
00:10:47,196 --> 00:10:48,346
bit, and let's take that Touch

470
00:10:48,346 --> 00:10:49,146
Bar we've made and make it

471
00:10:49,146 --> 00:10:49,816
customizable.

472
00:10:50,626 --> 00:10:52,066
So, that involves adding a few

473
00:10:52,066 --> 00:10:52,376
things.

474
00:10:52,666 --> 00:10:54,226
The first bit is actually this

475
00:10:54,226 --> 00:10:55,756
top line, where we go ahead and

476
00:10:55,756 --> 00:10:57,156
tell NS application to set

477
00:10:57,386 --> 00:10:58,766
isAutomaticCustomize

478
00:10:58,766 --> 00:11:00,226
TouchBarMenuItemEnabled.

479
00:10:58,766 --> 00:11:00,226
TouchBarMenuItemEnabled.

480
00:11:00,906 --> 00:11:02,606
That's a mouthful, but it's

481
00:11:02,606 --> 00:11:03,636
actually a very simply way of

482
00:11:03,636 --> 00:11:04,196
handling this.

483
00:11:04,196 --> 00:11:05,506
If you set this to true,

484
00:11:05,876 --> 00:11:07,126
NSApplication is going to go

485
00:11:07,126 --> 00:11:08,496
ahead and create a menu item for

486
00:11:08,496 --> 00:11:10,276
you automatically that will show

487
00:11:10,276 --> 00:11:11,306
and hide the customization

488
00:11:11,306 --> 00:11:11,626
panel.

489
00:11:12,156 --> 00:11:13,306
You don't have to use that.

490
00:11:13,346 --> 00:11:14,786
NSApplication has a method to

491
00:11:14,786 --> 00:11:16,296
show and hide it explicitly and

492
00:11:16,296 --> 00:11:17,236
you can wire that up to your

493
00:11:17,236 --> 00:11:18,896
menu item if you want a little

494
00:11:19,746 --> 00:11:20,666
bit more control.

495
00:11:20,666 --> 00:11:21,546
But with that out of the way,

496
00:11:21,866 --> 00:11:23,106
let's look at the bottom of the

497
00:11:23,106 --> 00:11:24,626
code in this slide, where we set

498
00:11:24,626 --> 00:11:26,026
the customization identifier.

499
00:11:26,456 --> 00:11:27,826
And in this case, I'm just

500
00:11:27,826 --> 00:11:29,246
making up an ocean animal

501
00:11:29,246 --> 00:11:29,836
identifier.

502
00:11:30,486 --> 00:11:32,166
But it's important to set this,

503
00:11:32,166 --> 00:11:33,566
because this is the token which

504
00:11:33,606 --> 00:11:35,076
enables persistence of the Touch

505
00:11:35,076 --> 00:11:36,446
Bar configuration across

506
00:11:36,446 --> 00:11:37,936
launches of your application or

507
00:11:37,936 --> 00:11:38,926
reboots of the system.

508
00:11:39,736 --> 00:11:41,246
And there's one other important

509
00:11:41,246 --> 00:11:42,576
step for enabling customization,

510
00:11:42,576 --> 00:11:43,376
and that is to set this

511
00:11:43,376 --> 00:11:44,686
customizationAllowedItem

512
00:11:44,686 --> 00:11:45,526
Identifiers array.

513
00:11:45,916 --> 00:11:47,076
And we're just going ahead and

514
00:11:47,076 --> 00:11:48,076
set it to our shark and sea

515
00:11:48,076 --> 00:11:48,576
turtle again.

516
00:11:48,976 --> 00:11:50,306
But setting this allows the

517
00:11:50,306 --> 00:11:51,466
customization panel to know

518
00:11:51,466 --> 00:11:52,686
which items can be added and

519
00:11:52,686 --> 00:11:53,046
removed.

520
00:11:53,706 --> 00:11:54,676
If we do all of that, we can

521
00:11:54,676 --> 00:11:55,976
bring up the customization panel

522
00:11:55,976 --> 00:11:57,586
and we'll see exactly this, the

523
00:11:57,586 --> 00:11:59,186
defaultItemIdentifiers array is

524
00:11:59,186 --> 00:12:00,366
translated faithfully to the

525
00:11:59,186 --> 00:12:00,366
translated faithfully to the

526
00:12:00,366 --> 00:12:01,326
default set of items on the

527
00:12:01,326 --> 00:12:01,736
left.

528
00:12:01,776 --> 00:12:03,036
And the individual items from

529
00:12:03,036 --> 00:12:04,686
the allowed item identifiers are

530
00:12:04,686 --> 00:12:05,516
shown on the right.

531
00:12:06,236 --> 00:12:07,176
This is kind of a boring

532
00:12:07,176 --> 00:12:08,336
customization panel and we can

533
00:12:08,336 --> 00:12:09,286
spice it up a little.

534
00:12:10,186 --> 00:12:11,926
So, here's a whole menagerie of

535
00:12:11,926 --> 00:12:12,576
ocean animals.

536
00:12:13,326 --> 00:12:15,806
Something I want to mention, and

537
00:12:15,806 --> 00:12:16,866
it will come into play with

538
00:12:16,926 --> 00:12:18,406
deciding whether you're going to

539
00:12:18,406 --> 00:12:19,496
set the template items on a

540
00:12:19,496 --> 00:12:20,766
Touch Bar when you create it, or

541
00:12:20,816 --> 00:12:22,696
whether to use the delegate is

542
00:12:22,796 --> 00:12:24,196
by default we were only showing

543
00:12:24,196 --> 00:12:25,126
the shark and sea turtle.

544
00:12:25,326 --> 00:12:26,026
And there's a lot of

545
00:12:26,026 --> 00:12:27,266
applications where your default

546
00:12:27,266 --> 00:12:28,456
functionality in the Touch Bar

547
00:12:28,736 --> 00:12:30,416
is going to be a very small

548
00:12:30,416 --> 00:12:31,706
subset of the total

549
00:12:31,706 --> 00:12:32,796
functionality you can add

550
00:12:32,796 --> 00:12:33,656
through customization.

551
00:12:34,716 --> 00:12:36,626
By using the delegate, users who

552
00:12:36,626 --> 00:12:37,776
don't bring up the customization

553
00:12:37,776 --> 00:12:38,836
panel aren't going to pay the

554
00:12:38,836 --> 00:12:43,106
CPU time of creating new items.

555
00:12:43,626 --> 00:12:44,946
Something else to mention here

556
00:12:44,946 --> 00:12:46,596
is you may have a situation

557
00:12:46,596 --> 00:12:47,426
where you're building a Touch

558
00:12:47,426 --> 00:12:48,376
Bar UI and there's some

559
00:12:48,376 --> 00:12:49,556
functionality you want to be

560
00:12:49,556 --> 00:12:50,886
there all the time, you don't

561
00:12:50,886 --> 00:12:51,896
want the user to be able to

562
00:12:51,896 --> 00:12:53,646
remove it in customization, and

563
00:12:53,646 --> 00:12:54,876
if you have a case like that you

564
00:12:54,876 --> 00:12:56,086
can set the customization

565
00:12:56,086 --> 00:12:57,666
required item identifiers array.

566
00:12:58,216 --> 00:12:59,706
And in this case, obviously, the

567
00:12:59,706 --> 00:13:00,936
sea turtle is critical for the

568
00:12:59,706 --> 00:13:00,936
sea turtle is critical for the

569
00:13:00,936 --> 00:13:02,006
function of our application.

570
00:13:02,006 --> 00:13:02,926
So, we're going to prevent it

571
00:13:02,926 --> 00:13:03,586
from being removed.

572
00:13:03,626 --> 00:13:07,196
So, that kind of covers how to

573
00:13:07,196 --> 00:13:09,156
make instances of NSTouchBar and

574
00:13:09,156 --> 00:13:11,206
how to facilitate item lookup by

575
00:13:11,206 --> 00:13:12,306
the item identifier, through the

576
00:13:12,306 --> 00:13:13,846
template items and delegate

577
00:13:13,846 --> 00:13:14,266
methods.

578
00:13:14,636 --> 00:13:15,826
But one of the things we're

579
00:13:15,826 --> 00:13:17,596
missing is how the applicant

580
00:13:17,596 --> 00:13:18,786
finds those instances of

581
00:13:18,786 --> 00:13:19,396
NSTouchBar.

582
00:13:19,396 --> 00:13:21,286
And I big part of that is the

583
00:13:21,286 --> 00:13:22,626
NSTouchBarProvider protocol.

584
00:13:23,436 --> 00:13:24,786
And it's a fairly simple

585
00:13:24,786 --> 00:13:25,256
protocol.

586
00:13:25,496 --> 00:13:26,976
It's just exposing a read-only

587
00:13:26,976 --> 00:13:28,886
Touch Bar property.

588
00:13:28,886 --> 00:13:30,846
NSResponder itself implements

589
00:13:30,846 --> 00:13:31,866
this protocol right out of the

590
00:13:31,866 --> 00:13:32,346
box.

591
00:13:32,346 --> 00:13:33,256
And we'll cover that in just a

592
00:13:33,256 --> 00:13:33,636
second.

593
00:13:34,006 --> 00:13:35,556
But sometimes it's useful to

594
00:13:35,556 --> 00:13:36,676
attach a Touch Bar to your

595
00:13:36,676 --> 00:13:38,386
application delegate, or window

596
00:13:38,386 --> 00:13:38,976
delegate.

597
00:13:38,976 --> 00:13:40,156
And neither of those is likely

598
00:13:40,156 --> 00:13:41,656
to be a subclass of NSResponder.

599
00:13:41,966 --> 00:13:43,016
So, let's see how you go ahead

600
00:13:43,016 --> 00:13:44,016
and implement that protocol

601
00:13:44,016 --> 00:13:44,486
yourself.

602
00:13:45,436 --> 00:13:47,256
This looks like a lot of code,

603
00:13:47,256 --> 00:13:48,486
but really we're just using a

604
00:13:48,486 --> 00:13:50,586
Swift lazy variable here for the

605
00:13:50,586 --> 00:13:51,396
Touch Bar property.

606
00:13:51,986 --> 00:13:53,216
And the first time the Touch Bar

607
00:13:53,216 --> 00:13:54,556
property is accessed, Swift is

608
00:13:54,556 --> 00:13:55,576
going to go ahead and run this

609
00:13:55,576 --> 00:13:56,966
block to instantiate our Touch

610
00:13:56,996 --> 00:13:57,196
Bar.

611
00:13:57,416 --> 00:13:58,696
All the code to create the item

612
00:13:58,696 --> 00:13:59,886
in bar and stuff we looked at in

613
00:13:59,886 --> 00:14:00,786
the previous slides.

614
00:13:59,886 --> 00:14:00,786
the previous slides.

615
00:14:02,176 --> 00:14:03,936
Something else to mention is

616
00:14:03,936 --> 00:14:05,706
that AppKit key value observes

617
00:14:05,706 --> 00:14:06,296
this property.

618
00:14:06,296 --> 00:14:07,606
So, if you feel the need to

619
00:14:07,756 --> 00:14:08,706
replace your Touch Bar

620
00:14:08,706 --> 00:14:09,876
wholesale, we'll notice that

621
00:14:09,876 --> 00:14:10,526
sort of change.

622
00:14:11,706 --> 00:14:13,756
Let's look at how NSResponder

623
00:14:13,756 --> 00:14:14,926
implements this.

624
00:14:14,926 --> 00:14:16,426
First, it exposes that Touch Bar

625
00:14:16,426 --> 00:14:17,456
property as a read-write

626
00:14:17,456 --> 00:14:18,906
property instead of read-only.

627
00:14:19,226 --> 00:14:20,596
And the significance of that is

628
00:14:20,596 --> 00:14:22,076
that you can set instances of

629
00:14:22,186 --> 00:14:24,286
NSTouchBar on various pieces of

630
00:14:24,286 --> 00:14:24,946
your application.

631
00:14:24,946 --> 00:14:26,086
On the responders, you have in

632
00:14:26,086 --> 00:14:26,596
your windows.

633
00:14:26,596 --> 00:14:27,856
Like views and view controllers,

634
00:14:27,856 --> 00:14:28,696
and window controllers.

635
00:14:29,176 --> 00:14:31,086
And that's really neat because

636
00:14:31,086 --> 00:14:32,076
you don't necessarily have a

637
00:14:32,076 --> 00:14:33,306
subclass for each and every one

638
00:14:33,306 --> 00:14:34,056
of those controls.

639
00:14:34,746 --> 00:14:36,636
If you are making a subclass of

640
00:14:36,636 --> 00:14:37,676
a control, or really any

641
00:14:37,766 --> 00:14:39,826
NSResponder, NSResponder also

642
00:14:39,826 --> 00:14:41,136
exposes this makeTouchBar

643
00:14:41,136 --> 00:14:41,476
method.

644
00:14:42,506 --> 00:14:43,536
So, makeTouchBar is pretty

645
00:14:43,536 --> 00:14:43,886
simple.

646
00:14:44,456 --> 00:14:45,956
The first time the Touch Bar

647
00:14:45,956 --> 00:14:47,296
property is accessed on an

648
00:14:47,326 --> 00:14:48,996
NSResponder, it's going to call

649
00:14:49,276 --> 00:14:50,976
self makeTouchBar and run this

650
00:14:50,976 --> 00:14:51,316
code.

651
00:14:51,316 --> 00:14:52,416
And we just have to return a new

652
00:14:52,416 --> 00:14:53,216
Touch Bar for it.

653
00:14:53,606 --> 00:14:55,286
A lot of the system controls and

654
00:14:55,286 --> 00:14:56,606
system frameworks, which expose

655
00:14:56,606 --> 00:14:58,316
functionality use this method to

656
00:14:58,316 --> 00:14:59,976
provide it.

657
00:15:00,656 --> 00:15:02,436
So, I mentioned that NSResponder

658
00:15:02,436 --> 00:15:03,586
has a read-write Touch Bar

659
00:15:03,586 --> 00:15:04,556
property and you can set the

660
00:15:04,556 --> 00:15:05,106
touch bar.

661
00:15:05,106 --> 00:15:06,186
And one of the most important

662
00:15:06,186 --> 00:15:07,346
clients of that is actually

663
00:15:07,346 --> 00:15:08,096
Interface Builder.

664
00:15:08,906 --> 00:15:10,026
So, let me show you how to build

665
00:15:10,026 --> 00:15:11,196
a Touch Bar UI from Interface

666
00:15:11,196 --> 00:15:11,496
Builder.

667
00:15:11,956 --> 00:15:13,646
If we go ahead and start with a

668
00:15:13,646 --> 00:15:14,616
new story board, we have a

669
00:15:14,616 --> 00:15:16,136
window controller seen here, and

670
00:15:16,136 --> 00:15:17,616
we can filter the object library

671
00:15:17,996 --> 00:15:19,546
to show us Touch Bar controls.

672
00:15:20,166 --> 00:15:22,106
So, if we just check the object

673
00:15:22,106 --> 00:15:23,316
library, here an instance of NS

674
00:15:23,316 --> 00:15:24,746
Touch Bar and we can drag that

675
00:15:24,746 --> 00:15:25,876
onto our window controller.

676
00:15:26,336 --> 00:15:27,506
And now we have an empty Touch

677
00:15:27,506 --> 00:15:29,066
Bar to play with and going back

678
00:15:29,066 --> 00:15:31,026
to the object library, we can go

679
00:15:31,026 --> 00:15:32,426
ahead and see that there's

680
00:15:32,476 --> 00:15:33,856
dozens and dozens of

681
00:15:33,856 --> 00:15:35,486
preconfigured controls and Touch

682
00:15:35,526 --> 00:15:36,836
Bar items we can just drag into

683
00:15:36,836 --> 00:15:37,376
the Touch Bar.

684
00:15:37,626 --> 00:15:40,896
And from here, we can wire these

685
00:15:40,896 --> 00:15:42,776
items up with ID connections, or

686
00:15:42,776 --> 00:15:43,636
bindings or whatever.

687
00:15:43,886 --> 00:15:45,626
And it's actually very possible

688
00:15:45,626 --> 00:15:47,056
to write Touch Bar apps that are

689
00:15:47,056 --> 00:15:48,336
perfectly functional and useable

690
00:15:48,526 --> 00:15:49,646
without ever writing a line of

691
00:15:49,646 --> 00:15:50,806
code for it.

692
00:15:51,556 --> 00:15:53,606
So, that covers creating

693
00:15:53,606 --> 00:15:54,906
instances of NSTouchBarItem.

694
00:15:55,236 --> 00:15:56,506
Let's see how this fits into the

695
00:15:56,506 --> 00:15:57,886
bigger responder chain and how

696
00:15:57,886 --> 00:15:59,506
we discover all of these

697
00:15:59,506 --> 00:16:01,826
individual Touch Bar instances.

698
00:15:59,506 --> 00:16:01,826
individual Touch Bar instances.

699
00:16:01,826 --> 00:16:03,766
So, a refresher, a responder

700
00:16:03,766 --> 00:16:05,266
chain is made up of instances of

701
00:16:05,266 --> 00:16:06,516
the NSResponder class.

702
00:16:06,836 --> 00:16:08,036
And one of the most important

703
00:16:08,036 --> 00:16:09,336
properties of the NSResponder

704
00:16:09,336 --> 00:16:11,416
class is this next responder

705
00:16:11,416 --> 00:16:12,776
property it has.

706
00:16:13,266 --> 00:16:14,546
And that just points at another

707
00:16:14,546 --> 00:16:15,056
responder.

708
00:16:15,406 --> 00:16:16,396
But it basically means that

709
00:16:16,396 --> 00:16:17,956
given a responder, we've

710
00:16:17,956 --> 00:16:20,246
anchored an entire chain of

711
00:16:20,246 --> 00:16:21,936
responders capable of handling

712
00:16:21,936 --> 00:16:23,256
events and actions and things.

713
00:16:23,656 --> 00:16:26,386
And AppKit uses many different

714
00:16:26,486 --> 00:16:28,196
responders as the anchors for

715
00:16:28,196 --> 00:16:29,276
chains for handling keyboard

716
00:16:29,276 --> 00:16:31,256
events, and actions and kit

717
00:16:31,256 --> 00:16:32,846
testing and routing mouse events

718
00:16:32,846 --> 00:16:34,316
and things, but let's cover how

719
00:16:34,316 --> 00:16:35,226
keyboard event works.

720
00:16:35,226 --> 00:16:36,376
Because Touch Bar is part of the

721
00:16:36,376 --> 00:16:36,786
keyboard.

722
00:16:37,596 --> 00:16:38,846
So, we're going to have an

723
00:16:38,846 --> 00:16:39,886
NSEvent handed to us by the

724
00:16:39,886 --> 00:16:41,296
system, and that's going to go

725
00:16:41,296 --> 00:16:42,376
over the NSApplication.

726
00:16:43,006 --> 00:16:44,236
And NSApplication is going to

727
00:16:44,236 --> 00:16:45,236
say what do I do with this

728
00:16:45,236 --> 00:16:45,796
keyboard event.

729
00:16:46,446 --> 00:16:48,246
And most NSApplications are

730
00:16:48,246 --> 00:16:49,346
going to say do I have a key

731
00:16:49,346 --> 00:16:49,756
window?

732
00:16:49,906 --> 00:16:51,796
Okay, it gets the keyboard event

733
00:16:51,796 --> 00:16:51,936
now.

734
00:16:52,926 --> 00:16:54,266
And the key window meanwhile is

735
00:16:54,266 --> 00:16:55,256
going to have the same question,

736
00:16:55,256 --> 00:16:56,426
what do I do with this keyboard

737
00:16:57,186 --> 00:16:57,506
event.

738
00:16:57,506 --> 00:16:59,616
Every NS Window had a property

739
00:16:59,616 --> 00:17:01,086
called first responder and

740
00:16:59,616 --> 00:17:01,086
called first responder and

741
00:17:01,086 --> 00:17:03,186
that's designating where the

742
00:17:03,186 --> 00:17:04,356
responder chain starts for

743
00:17:04,356 --> 00:17:05,616
keyboard events and actions and

744
00:17:05,616 --> 00:17:05,925
things.

745
00:17:06,165 --> 00:17:06,965
So, the key window is going to

746
00:17:06,965 --> 00:17:07,996
go ahead and say, all right

747
00:17:07,996 --> 00:17:08,915
let's send this event to my

748
00:17:08,915 --> 00:17:11,465
first responder, like in its key

749
00:17:11,465 --> 00:17:12,326
down or key up method.

750
00:17:13,236 --> 00:17:14,516
So, the first responder

751
00:17:14,516 --> 00:17:16,965
meanwhile it's interesting,

752
00:17:16,965 --> 00:17:17,846
because that's where it's

753
00:17:17,846 --> 00:17:19,096
anchoring the responder chain,

754
00:17:19,096 --> 00:17:19,906
where we're going to be handling

755
00:17:19,906 --> 00:17:21,126
this as a responder method, not

756
00:17:21,126 --> 00:17:22,106
just generic event routing.

757
00:17:22,106 --> 00:17:23,276
But it's going to have a

758
00:17:23,276 --> 00:17:24,976
decision, do I handle the event

759
00:17:24,976 --> 00:17:27,076
in key down, or do I call super

760
00:17:27,076 --> 00:17:28,256
and let it pass that to the next

761
00:17:28,256 --> 00:17:28,756
responder.

762
00:17:29,456 --> 00:17:30,596
So, let's say it passes it to

763
00:17:30,596 --> 00:17:31,296
the next responder.

764
00:17:31,296 --> 00:17:33,196
Usually the first responder will

765
00:17:33,196 --> 00:17:34,496
be a view, the second responder

766
00:17:34,496 --> 00:17:35,266
will be a super view.

767
00:17:35,786 --> 00:17:37,206
It will make the same choice.

768
00:17:37,576 --> 00:17:39,046
And these days, use and view

769
00:17:39,046 --> 00:17:40,256
controllers tend to be

770
00:17:40,256 --> 00:17:40,876
[inaudible] in the responder

771
00:17:40,876 --> 00:17:41,156
chain.

772
00:17:41,426 --> 00:17:42,976
So, pass it up to a view

773
00:17:42,976 --> 00:17:44,216
controller, have the same choice

774
00:17:44,216 --> 00:17:45,276
handler call super.

775
00:17:45,356 --> 00:17:46,156
It doesn't handle it.

776
00:17:46,426 --> 00:17:48,146
It might even go and reach all

777
00:17:48,146 --> 00:17:49,016
the way back to the initial

778
00:17:49,016 --> 00:17:50,526
window that routed the event in

779
00:17:50,526 --> 00:17:51,246
the first place.

780
00:17:51,546 --> 00:17:52,336
And that, as part of the

781
00:17:52,336 --> 00:17:53,416
responder chain, can make the

782
00:17:53,416 --> 00:17:54,636
same decisions whether to handle

783
00:17:54,636 --> 00:17:55,336
it or pass it on.

784
00:17:55,646 --> 00:17:56,676
And that can percolate all the

785
00:17:56,676 --> 00:17:57,936
way back up to the application.

786
00:17:58,626 --> 00:17:59,436
So, that's how we handle

787
00:17:59,436 --> 00:18:00,156
keyboard events.

788
00:17:59,436 --> 00:18:00,156
keyboard events.

789
00:18:00,536 --> 00:18:01,316
Touch Bar is part of the

790
00:18:01,316 --> 00:18:01,716
keyboard.

791
00:18:01,946 --> 00:18:03,156
So, it also turns out these are

792
00:18:03,156 --> 00:18:04,606
all the places we can attach

793
00:18:04,606 --> 00:18:05,766
instances of NSTouchBar.

794
00:18:06,246 --> 00:18:07,886
And we search them in exactly

795
00:18:07,886 --> 00:18:08,976
the same order the keyboard

796
00:18:08,976 --> 00:18:10,256
event was routed through the

797
00:18:10,256 --> 00:18:10,996
responder chain.

798
00:18:11,926 --> 00:18:13,616
So, one question you should be

799
00:18:13,616 --> 00:18:15,276
asking is hey, I notice you have

800
00:18:15,276 --> 00:18:16,836
five instances of NSTouchBar

801
00:18:16,836 --> 00:18:17,076
here.

802
00:18:17,326 --> 00:18:18,966
How do you go from that to one

803
00:18:18,966 --> 00:18:20,216
Touch Bar on the device.

804
00:18:20,686 --> 00:18:21,926
And I'm going to cover that in

805
00:18:21,926 --> 00:18:22,546
just a second.

806
00:18:22,926 --> 00:18:25,036
But first I want to make a small

807
00:18:25,036 --> 00:18:26,006
note about views and views

808
00:18:26,006 --> 00:18:26,576
controllers.

809
00:18:27,386 --> 00:18:28,276
You're probably going to be

810
00:18:28,276 --> 00:18:29,466
attaching a Touch Bar to a view

811
00:18:29,466 --> 00:18:31,216
controller at some point, making

812
00:18:31,436 --> 00:18:32,376
your application.

813
00:18:32,956 --> 00:18:34,046
And you'll run and test this.

814
00:18:34,046 --> 00:18:34,786
And you're going to see that

815
00:18:34,786 --> 00:18:35,816
your Touch Bar doesn't show up

816
00:18:35,816 --> 00:18:37,016
at all and you'll think, oh, I

817
00:18:37,016 --> 00:18:38,206
guess my view controller is not

818
00:18:38,206 --> 00:18:39,186
in the responder chain.

819
00:18:39,356 --> 00:18:40,356
And you'll go ahead and look at

820
00:18:40,356 --> 00:18:41,466
your view controllers view and

821
00:18:41,466 --> 00:18:42,846
see that its next responder is

822
00:18:42,846 --> 00:18:43,866
indeed your view controller.

823
00:18:44,376 --> 00:18:45,926
And what's going on here is that

824
00:18:46,376 --> 00:18:48,786
while your particular responder

825
00:18:48,786 --> 00:18:50,216
chain is set up correctly, it's

826
00:18:50,216 --> 00:18:51,226
not anchored in the first

827
00:18:51,226 --> 00:18:52,246
responder of the window.

828
00:18:52,806 --> 00:18:54,326
And that's often because the

829
00:18:54,326 --> 00:18:55,506
first responder of the window

830
00:18:55,506 --> 00:18:56,906
has to return true for the

831
00:18:56,906 --> 00:18:58,426
acceptsFirstResponder method.

832
00:18:58,876 --> 00:18:59,736
So, if you wind up in this

833
00:18:59,736 --> 00:19:00,946
situation, it's really easy to

834
00:18:59,736 --> 00:19:00,946
situation, it's really easy to

835
00:19:00,946 --> 00:19:02,456
subclass NS View or whatever

836
00:19:02,456 --> 00:19:03,926
your first responder is to

837
00:19:03,926 --> 00:19:06,236
accept first responder and make

838
00:19:06,236 --> 00:19:07,506
a valid responder chain anchored

839
00:19:07,506 --> 00:19:08,316
at the first responder.

840
00:19:09,396 --> 00:19:10,956
So, let's get back to how we're

841
00:19:10,956 --> 00:19:11,736
going to handle multiple

842
00:19:11,736 --> 00:19:13,006
NSTouchBar instances on this.

843
00:19:13,326 --> 00:19:15,296
The easiest thing to remember is

844
00:19:15,296 --> 00:19:17,196
that the responder, with an

845
00:19:17,226 --> 00:19:18,856
NSTouchBar closest to that first

846
00:19:18,856 --> 00:19:20,026
responder, so closest to the

847
00:19:20,026 --> 00:19:22,506
keyboard input, its Touch Bar is

848
00:19:22,506 --> 00:19:23,556
going to win and take over the

849
00:19:23,556 --> 00:19:24,126
whole thing.

850
00:19:24,726 --> 00:19:26,286
Calling back to earlier where I

851
00:19:26,286 --> 00:19:27,486
mentioned that AVKit and some

852
00:19:27,486 --> 00:19:28,646
other system frameworks provide

853
00:19:28,646 --> 00:19:29,876
support, you're probably

854
00:19:29,876 --> 00:19:30,886
thinking that they're likely

855
00:19:30,886 --> 00:19:32,096
going to provide support in NS

856
00:19:32,096 --> 00:19:33,006
Views which are going to be

857
00:19:33,006 --> 00:19:34,576
closer to the first responder

858
00:19:34,946 --> 00:19:36,266
than your window controllers or

859
00:19:36,266 --> 00:19:37,556
application delegates might be.

860
00:19:38,256 --> 00:19:39,996
So, we need some way of sharing

861
00:19:40,276 --> 00:19:41,556
the device Touch Bar across

862
00:19:41,556 --> 00:19:43,096
multiple instances of NSTouchBar

863
00:19:43,096 --> 00:19:44,266
and we have a way of doing that.

864
00:19:44,756 --> 00:19:45,856
And that's accomplished with

865
00:19:45,856 --> 00:19:47,136
this special item identifier,

866
00:19:47,356 --> 00:19:48,646
called the otherItemsProxy.

867
00:19:49,426 --> 00:19:50,586
I say it's a special item

868
00:19:50,586 --> 00:19:52,116
identifier because you don't

869
00:19:52,116 --> 00:19:53,176
have to create any item for

870
00:19:53,176 --> 00:19:53,406
this.

871
00:19:53,406 --> 00:19:54,316
You don't have to put it in your

872
00:19:54,316 --> 00:19:55,786
template item set, you don't

873
00:19:55,786 --> 00:19:57,596
have to handle that identifier

874
00:19:57,746 --> 00:19:58,866
in your delegate and make item

875
00:19:58,866 --> 00:19:59,936
for identifier case.

876
00:20:01,166 --> 00:20:02,146
But when you go ahead and

877
00:20:02,146 --> 00:20:03,956
include other items proxy in

878
00:20:03,956 --> 00:20:05,196
your default item identifier

879
00:20:05,246 --> 00:20:07,926
array, when AppKit is harvesting

880
00:20:08,006 --> 00:20:09,226
NSTouchBar from the responder

881
00:20:09,226 --> 00:20:10,636
chain, it will go ahead and

882
00:20:10,636 --> 00:20:12,566
replace the otherItemsProxy with

883
00:20:12,566 --> 00:20:14,186
the items from responders closer

884
00:20:14,186 --> 00:20:15,286
to the first responder.

885
00:20:16,406 --> 00:20:17,716
So, let's look at that in

886
00:20:17,716 --> 00:20:17,986
action.

887
00:20:17,986 --> 00:20:18,976
Here's an example of mail.

888
00:20:19,396 --> 00:20:20,556
My keyboard focus is on the

889
00:20:20,556 --> 00:20:21,346
recipient's field.

890
00:20:21,346 --> 00:20:22,796
And the recipient's field is

891
00:20:22,796 --> 00:20:24,386
providing suggestions for who I

892
00:20:24,386 --> 00:20:25,446
might to send the email to.

893
00:20:25,786 --> 00:20:27,716
I also have this send button on

894
00:20:27,716 --> 00:20:29,016
the left side of the application

895
00:20:29,016 --> 00:20:29,896
section of the Touch Bar.

896
00:20:30,766 --> 00:20:32,026
If I were to change my keyboard

897
00:20:32,026 --> 00:20:34,886
focus instead to the composition

898
00:20:34,886 --> 00:20:36,416
view in the window, I have a

899
00:20:36,416 --> 00:20:37,346
bunch of text formatting

900
00:20:37,346 --> 00:20:38,446
controls and an emoji picker.

901
00:20:38,486 --> 00:20:39,576
But I still have that send

902
00:20:39,576 --> 00:20:39,856
button.

903
00:20:40,596 --> 00:20:42,246
And the way this breaks down is

904
00:20:42,246 --> 00:20:44,726
that mail's composed window

905
00:20:44,726 --> 00:20:46,806
controller has a Touch Bar with

906
00:20:46,806 --> 00:20:47,776
a send button and an

907
00:20:47,776 --> 00:20:48,796
otherItemsProxy.

908
00:20:50,036 --> 00:20:51,566
And the recipient's field is

909
00:20:51,626 --> 00:20:52,696
providing the candidates.

910
00:20:52,696 --> 00:20:53,936
And the recipient's field is

911
00:20:53,936 --> 00:20:54,816
very close to the first

912
00:20:54,816 --> 00:20:55,916
responder, so it's going to get

913
00:20:55,916 --> 00:20:57,416
first shot at that.

914
00:20:57,766 --> 00:20:58,776
But the window controller

915
00:20:58,776 --> 00:21:00,506
including the otherItemsProxy

916
00:20:58,776 --> 00:21:00,506
including the otherItemsProxy

917
00:21:00,816 --> 00:21:01,926
means we can merge those two

918
00:21:01,926 --> 00:21:03,606
Touch Bars.

919
00:21:03,726 --> 00:21:05,146
Likewise, for the composition

920
00:21:05,146 --> 00:21:06,956
view, the window controller is

921
00:21:06,956 --> 00:21:08,446
exactly the same instance, it's

922
00:21:09,076 --> 00:21:11,276
just the responder chain

923
00:21:11,276 --> 00:21:12,436
anchored at the first responder

924
00:21:12,706 --> 00:21:15,026
includes the composition view

925
00:21:15,316 --> 00:21:16,386
before the window controller.

926
00:21:17,176 --> 00:21:18,556
Something else to mention is

927
00:21:18,626 --> 00:21:19,486
that this is completely

928
00:21:19,486 --> 00:21:20,936
compatible with customization.

929
00:21:20,986 --> 00:21:22,636
We use the otherItemsProxy to

930
00:21:22,756 --> 00:21:24,106
build the default set of items,

931
00:21:24,476 --> 00:21:25,346
like you'd expect.

932
00:21:25,676 --> 00:21:26,786
And we go ahead and union the

933
00:21:26,786 --> 00:21:28,066
allowed items from the eligible

934
00:21:28,066 --> 00:21:28,646
touch bars.

935
00:21:28,946 --> 00:21:30,336
So, we can see we can customize

936
00:21:30,336 --> 00:21:31,436
the send button in mail, even

937
00:21:31,436 --> 00:21:32,296
though it's provided by a

938
00:21:32,296 --> 00:21:34,176
different responder than the

939
00:21:34,176 --> 00:21:35,096
formatting controls.

940
00:21:36,966 --> 00:21:39,406
You might think, hey the

941
00:21:39,406 --> 00:21:40,636
otherItemsProxy sounds pretty

942
00:21:40,636 --> 00:21:41,926
great for the reliable

943
00:21:41,926 --> 00:21:42,926
functioning of my Touch Bar

944
00:21:42,926 --> 00:21:44,036
stuff, and you'd be right, but

945
00:21:44,036 --> 00:21:45,216
there's a few cases where you do

946
00:21:45,216 --> 00:21:46,146
want to omit it.

947
00:21:46,526 --> 00:21:48,346
And if we go back to mail, but

948
00:21:48,346 --> 00:21:49,796
close all the windows, we're

949
00:21:49,796 --> 00:21:50,846
going to see that we have a new

950
00:21:50,846 --> 00:21:52,006
viewer window button in the

951
00:21:52,006 --> 00:21:52,476
Touch Bar.

952
00:21:53,076 --> 00:21:54,336
And that's provided by the

953
00:21:54,336 --> 00:21:56,006
application, but it omits the

954
00:21:56,006 --> 00:21:56,896
otherItemsProxy.

955
00:21:57,296 --> 00:21:59,216
When we go ahead and bring a

956
00:21:59,216 --> 00:22:00,526
window up that has Touch Bar

957
00:21:59,216 --> 00:22:00,526
window up that has Touch Bar

958
00:22:00,526 --> 00:22:02,046
content it's going to be closer

959
00:22:02,046 --> 00:22:03,336
to the first responder, and the

960
00:22:03,336 --> 00:22:05,336
lack of the otherItemsProxy in

961
00:22:05,336 --> 00:22:06,846
the farther out Touch Bar means

962
00:22:06,846 --> 00:22:07,996
it gets replaced entirely.

963
00:22:09,446 --> 00:22:10,776
So, there's another sort of

964
00:22:10,776 --> 00:22:11,946
special item identifier I want

965
00:22:11,946 --> 00:22:13,176
to cover and those are spaces.

966
00:22:13,606 --> 00:22:15,236
So, if you see here, we've made

967
00:22:15,236 --> 00:22:16,526
a mockup Touch Bar and we have a

968
00:22:16,526 --> 00:22:17,956
shark item and an angelfish.

969
00:22:18,456 --> 00:22:20,546
And the angel fish probably

970
00:22:20,546 --> 00:22:21,546
isn't that comfortable being so

971
00:22:21,546 --> 00:22:22,456
close to the shark.

972
00:22:22,456 --> 00:22:24,016
Thankfully, the shark is facing

973
00:22:24,016 --> 00:22:25,046
the wrong way so the fish

974
00:22:25,046 --> 00:22:26,356
probably isn't on the menu yet.

975
00:22:26,966 --> 00:22:28,446
But we can go ahead and give the

976
00:22:28,446 --> 00:22:29,366
angelfish some breathing room.

977
00:22:29,366 --> 00:22:30,716
And we can do that by adding a

978
00:22:30,716 --> 00:22:32,006
fixed space small item

979
00:22:32,006 --> 00:22:33,666
identifier in the default item

980
00:22:33,666 --> 00:22:35,166
identifiers array in between the

981
00:22:35,166 --> 00:22:36,246
shark and angelfish item

982
00:22:36,246 --> 00:22:36,866
identifiers.

983
00:22:37,296 --> 00:22:38,646
And we don't have to settle for

984
00:22:38,646 --> 00:22:40,236
small, we can also use a large

985
00:22:40,236 --> 00:22:41,066
one and give it a little bit

986
00:22:41,066 --> 00:22:42,126
more space.

987
00:22:42,206 --> 00:22:43,786
And it's useful to use these

988
00:22:43,786 --> 00:22:44,996
instead of hard coding your own

989
00:22:44,996 --> 00:22:46,206
space, because these are our

990
00:22:46,206 --> 00:22:47,626
system defined values that may

991
00:22:47,626 --> 00:22:48,506
change from release to release,

992
00:22:48,506 --> 00:22:50,506
but they also give your app an

993
00:22:50,506 --> 00:22:51,836
appearance similar to other apps

994
00:22:51,836 --> 00:22:52,356
on the system.

995
00:22:52,986 --> 00:22:54,406
We don't have to stop with fixed

996
00:22:54,406 --> 00:22:55,356
spaces though, we also have a

997
00:22:55,356 --> 00:22:57,096
flexible space identifier.

998
00:22:57,246 --> 00:22:58,286
And the flexible space is

999
00:22:58,286 --> 00:22:59,256
interesting in that it's going

1000
00:22:59,256 --> 00:23:00,786
to push the adjacent items as

1001
00:22:59,256 --> 00:23:00,786
to push the adjacent items as

1002
00:23:00,786 --> 00:23:02,326
far away from each other as they

1003
00:23:02,326 --> 00:23:03,956
can get.

1004
00:23:03,956 --> 00:23:05,676
So, in this case, the angelfish

1005
00:23:05,676 --> 00:23:06,916
probably feels a lot better with

1006
00:23:06,916 --> 00:23:08,016
that flexible space between it

1007
00:23:08,016 --> 00:23:08,526
and the shark.

1008
00:23:09,246 --> 00:23:11,006
You might be thinking you could

1009
00:23:11,006 --> 00:23:12,656
put flexible space on two side

1010
00:23:12,656 --> 00:23:13,606
of an item to center it.

1011
00:23:13,906 --> 00:23:15,286
And that's a very reasonable

1012
00:23:15,286 --> 00:23:15,606
thought.

1013
00:23:16,126 --> 00:23:17,206
If you do that, you're going,

1014
00:23:17,376 --> 00:23:18,446
actually, let's say we do that

1015
00:23:18,446 --> 00:23:19,476
with our purple circle.

1016
00:23:19,616 --> 00:23:21,496
We put flexible space on the

1017
00:23:21,496 --> 00:23:22,396
left and right sides of it.

1018
00:23:22,766 --> 00:23:23,886
The circle is centered within

1019
00:23:23,886 --> 00:23:24,986
the application section of the

1020
00:23:24,986 --> 00:23:26,276
Touch Bar, which might be what

1021
00:23:26,276 --> 00:23:26,966
you're going for.

1022
00:23:27,286 --> 00:23:28,416
But you might also want to be

1023
00:23:28,416 --> 00:23:29,626
centering that item on the

1024
00:23:29,626 --> 00:23:31,286
actual device, and it's not

1025
00:23:31,286 --> 00:23:31,646
there.

1026
00:23:31,646 --> 00:23:34,566
We're a little bit to the left.

1027
00:23:34,566 --> 00:23:36,136
So, we can fix that by using and

1028
00:23:36,136 --> 00:23:37,556
NSTouchBar property called the

1029
00:23:37,556 --> 00:23:38,726
principal item identifier.

1030
00:23:39,686 --> 00:23:41,376
And we can go ahead and set a

1031
00:23:41,376 --> 00:23:41,816
Touch Bar's

1032
00:23:41,816 --> 00:23:43,116
principalItemIdentifier to the

1033
00:23:43,116 --> 00:23:44,676
identifier of any visible item,

1034
00:23:45,076 --> 00:23:47,106
and it's going to go ahead and

1035
00:23:47,106 --> 00:23:48,656
actually place that item in the

1036
00:23:48,656 --> 00:23:49,656
center of the device.

1037
00:23:50,186 --> 00:23:51,896
So, if we go ahead and look at

1038
00:23:51,896 --> 00:23:53,456
this example, all the code in

1039
00:23:53,456 --> 00:23:54,176
here is stuff we see in our

1040
00:23:54,176 --> 00:23:55,986
previous slides except this last

1041
00:23:55,986 --> 00:23:56,686
line where we set the

1042
00:23:56,686 --> 00:23:57,776
principalItemIdentifier.

1043
00:23:58,186 --> 00:23:59,306
And by setting to the shark

1044
00:23:59,306 --> 00:24:01,016
identifier, we go ahead and move

1045
00:23:59,306 --> 00:24:01,016
identifier, we go ahead and move

1046
00:24:01,016 --> 00:24:02,296
and the shark to the middle of

1047
00:24:02,296 --> 00:24:03,966
the Touch Bar and lay out the

1048
00:24:03,966 --> 00:24:05,256
items left to right like we did

1049
00:24:05,256 --> 00:24:05,946
in other cases.

1050
00:24:06,506 --> 00:24:07,456
If we were to use the turtle

1051
00:24:07,456 --> 00:24:09,356
instead, the shark winds up on

1052
00:24:09,356 --> 00:24:10,296
the left side like it would

1053
00:24:10,296 --> 00:24:11,376
normally, and the turtle is

1054
00:24:11,376 --> 00:24:12,266
centered on the device.

1055
00:24:13,076 --> 00:24:14,356
And this plays really well with

1056
00:24:14,356 --> 00:24:16,056
flexible spaces and other

1057
00:24:16,056 --> 00:24:16,346
things.

1058
00:24:16,346 --> 00:24:17,246
Son you can make some nuance

1059
00:24:17,246 --> 00:24:17,796
device with that.

1060
00:24:17,976 --> 00:24:19,076
And there's additionally types

1061
00:24:19,236 --> 00:24:20,796
of NSTouchBar items subclasses

1062
00:24:21,136 --> 00:24:22,656
that modify the behavior of the

1063
00:24:22,656 --> 00:24:23,816
principalItemIdentifier.

1064
00:24:24,156 --> 00:24:25,576
And John is going to go ahead

1065
00:24:25,896 --> 00:24:27,846
and cover those as we take a

1066
00:24:27,846 --> 00:24:29,626
deep dive into NSTouchBar item.

1067
00:24:30,396 --> 00:24:31,336
Welcome John Tegtmeyer.

1068
00:24:32,516 --> 00:24:35,856
[ Applause ]

1069
00:24:36,356 --> 00:24:38,186
So, Chris gave us an overview

1070
00:24:38,186 --> 00:24:39,866
over the NSTouchBar API and how

1071
00:24:39,866 --> 00:24:41,726
it's tied to the responder chain

1072
00:24:41,726 --> 00:24:43,186
allowing us to provide context

1073
00:24:43,186 --> 00:24:44,806
sensitive controls to our users.

1074
00:24:45,316 --> 00:24:46,546
He also eluded to this

1075
00:24:46,586 --> 00:24:48,196
NSTouchBar item object, which is

1076
00:24:48,196 --> 00:24:50,026
the wrap around all the views in

1077
00:24:50,026 --> 00:24:50,626
the Touch Bar.

1078
00:24:51,346 --> 00:24:52,486
Now, AppKit provides a lot of

1079
00:24:52,486 --> 00:24:54,096
subclasses of this item, and

1080
00:24:54,096 --> 00:24:54,956
they all offer some really

1081
00:24:54,956 --> 00:24:56,536
unique, very cool functionality.

1082
00:24:56,796 --> 00:24:57,776
So, I'm here to give us a deep

1083
00:24:57,776 --> 00:24:58,986
dive into those items.

1084
00:24:59,686 --> 00:25:01,996
NSTouchBar item is a base class

1085
00:24:59,686 --> 00:25:01,996
NSTouchBar item is a base class

1086
00:25:01,996 --> 00:25:02,946
of everything that we'll talk

1087
00:25:02,946 --> 00:25:03,426
about today.

1088
00:25:03,826 --> 00:25:04,976
That means the properties on

1089
00:25:04,976 --> 00:25:05,996
this will be inherited by the

1090
00:25:05,996 --> 00:25:06,736
subclass.

1091
00:25:07,256 --> 00:25:08,266
The first thing that all Touch

1092
00:25:08,266 --> 00:25:09,596
Bar items have is a unique

1093
00:25:09,596 --> 00:25:10,346
identifier.

1094
00:25:11,116 --> 00:25:13,806
This is what NSTouchBar will use

1095
00:25:13,806 --> 00:25:14,696
when looking up your item

1096
00:25:14,696 --> 00:25:15,956
through the template items

1097
00:25:15,956 --> 00:25:17,896
array, or through the delegate.

1098
00:25:18,666 --> 00:25:20,216
Items also have a view or a view

1099
00:25:20,216 --> 00:25:20,716
controller.

1100
00:25:20,996 --> 00:25:21,736
This is what's actually

1101
00:25:21,736 --> 00:25:23,056
presented to your users.

1102
00:25:23,316 --> 00:25:24,246
And if you're using the view

1103
00:25:24,246 --> 00:25:25,236
controller, this is a good

1104
00:25:25,236 --> 00:25:27,336
opportunity to lazily load your

1105
00:25:27,336 --> 00:25:27,836
views.

1106
00:25:28,736 --> 00:25:30,066
We also have a customization

1107
00:25:30,066 --> 00:25:30,436
label.

1108
00:25:30,436 --> 00:25:31,736
And this is the string that's

1109
00:25:31,736 --> 00:25:33,146
presented in the customization

1110
00:25:33,146 --> 00:25:33,626
UI.

1111
00:25:33,916 --> 00:25:35,156
And describes what your control

1112
00:25:35,156 --> 00:25:35,926
actually does.

1113
00:25:36,796 --> 00:25:38,396
I hope you notice one thing that

1114
00:25:38,396 --> 00:25:39,466
we don't have here is an

1115
00:25:39,466 --> 00:25:41,246
explicit minimum or maximum size

1116
00:25:41,276 --> 00:25:41,736
property.

1117
00:25:42,276 --> 00:25:43,756
That's because, unlike tool bar

1118
00:25:43,756 --> 00:25:46,016
item, which does have these

1119
00:25:46,016 --> 00:25:47,926
explicit properties Touch Bar

1120
00:25:47,926 --> 00:25:49,336
items are actually measured

1121
00:25:49,336 --> 00:25:50,366
using constraints.

1122
00:25:50,776 --> 00:25:51,956
That means if you're using

1123
00:25:51,956 --> 00:25:53,666
something like an NS button

1124
00:25:53,666 --> 00:25:54,956
which has an intrinsic content

1125
00:25:54,956 --> 00:25:56,526
size, it will automatically be

1126
00:25:56,526 --> 00:25:58,166
sized to fit its title and its

1127
00:25:58,166 --> 00:25:58,626
image.

1128
00:25:59,196 --> 00:26:00,356
You can also choose to use

1129
00:25:59,196 --> 00:26:00,356
You can also choose to use

1130
00:26:00,356 --> 00:26:01,796
inequality constraints to set up

1131
00:26:01,846 --> 00:26:03,456
minimum and maximum sizes.

1132
00:26:03,836 --> 00:26:04,996
And AppKit will automatically

1133
00:26:04,996 --> 00:26:06,726
size you view based on how much

1134
00:26:06,726 --> 00:26:07,996
space is available in the

1135
00:26:07,996 --> 00:26:09,026
application section.

1136
00:26:09,286 --> 00:26:10,596
And you can find out more about

1137
00:26:10,596 --> 00:26:11,986
how items are sized at the

1138
00:26:11,986 --> 00:26:13,636
"Advanced Touch Bar Talk" later

1139
00:26:15,256 --> 00:26:15,386
today.

1140
00:26:15,576 --> 00:26:17,496
Now, as I mentioned, AppKit

1141
00:26:17,606 --> 00:26:20,156
provides lots of subclasses of

1142
00:26:20,156 --> 00:26:20,646
this item.

1143
00:26:21,276 --> 00:26:22,296
And we'll talk about each of

1144
00:26:22,296 --> 00:26:22,576
these.

1145
00:26:22,576 --> 00:26:23,486
We'll talk about the custom

1146
00:26:23,486 --> 00:26:25,326
Touch Bar item, pop overs,

1147
00:26:25,326 --> 00:26:27,436
sliders, group item, as well as

1148
00:26:27,436 --> 00:26:28,736
a few bonus topics at the end.

1149
00:26:28,976 --> 00:26:30,306
So, let's get started with the

1150
00:26:30,306 --> 00:26:31,306
custom Touch Bar item.

1151
00:26:31,886 --> 00:26:34,256
Now, the custom item offers

1152
00:26:34,316 --> 00:26:35,666
rewrite properties on everything

1153
00:26:35,666 --> 00:26:36,566
that we just talked about on the

1154
00:26:36,566 --> 00:26:37,236
base class.

1155
00:26:37,346 --> 00:26:38,526
That means you can simply set

1156
00:26:38,526 --> 00:26:39,816
the view of the view controller

1157
00:26:39,816 --> 00:26:40,916
rather than subclassing your

1158
00:26:40,916 --> 00:26:41,286
item.

1159
00:26:41,886 --> 00:26:43,066
This is likely the item that

1160
00:26:43,066 --> 00:26:44,196
you'll use if you want to show

1161
00:26:44,196 --> 00:26:45,356
something like a button or a

1162
00:26:45,356 --> 00:26:46,376
segmented control.

1163
00:26:47,096 --> 00:26:48,426
Anything that you're familiar

1164
00:26:48,426 --> 00:26:49,876
with through AppKit, or custom

1165
00:26:49,876 --> 00:26:50,736
container views.

1166
00:26:52,296 --> 00:26:53,566
Now, this is also a really great

1167
00:26:53,566 --> 00:26:54,716
opportunity to use some of the

1168
00:26:54,716 --> 00:26:56,016
convenience constructors that we

1169
00:26:56,016 --> 00:26:57,126
introduced in 10.12.

1170
00:26:57,596 --> 00:26:58,226
Let's take a look.

1171
00:26:59,206 --> 00:27:00,556
In this example, we're going to

1172
00:26:59,206 --> 00:27:00,556
In this example, we're going to

1173
00:27:00,556 --> 00:27:01,696
create a simple button for Touch

1174
00:27:01,696 --> 00:27:01,916
Bar.

1175
00:27:02,356 --> 00:27:04,376
We're doing that by creating a

1176
00:27:04,376 --> 00:27:05,506
custom Touch Bar item and

1177
00:27:05,506 --> 00:27:07,026
providing a unique identifier.

1178
00:27:07,026 --> 00:27:08,486
And then we're going to set the

1179
00:27:08,486 --> 00:27:10,166
items view to be an NS button

1180
00:27:10,166 --> 00:27:11,636
using the title target action

1181
00:27:11,636 --> 00:27:13,006
constructor that we saw earlier.

1182
00:27:13,696 --> 00:27:15,156
And as Chris mentioned, this

1183
00:27:15,156 --> 00:27:16,616
will assign the correct font and

1184
00:27:16,616 --> 00:27:17,606
the correct appearance to this

1185
00:27:17,606 --> 00:27:17,886
button.

1186
00:27:17,886 --> 00:27:18,966
So, we have a great looking

1187
00:27:18,966 --> 00:27:20,256
button that's ready for Touch

1188
00:27:20,256 --> 00:27:21,736
Bar in two simple lines of code.

1189
00:27:22,656 --> 00:27:23,846
This is also true for a more

1190
00:27:23,846 --> 00:27:24,936
complicated control.

1191
00:27:25,336 --> 00:27:26,826
In this case, this is a

1192
00:27:26,826 --> 00:27:27,806
segmented control.

1193
00:27:28,096 --> 00:27:29,356
Segmented control also has a

1194
00:27:29,356 --> 00:27:30,416
convenience constructor.

1195
00:27:30,766 --> 00:27:32,306
And so, again with two lines of

1196
00:27:32,306 --> 00:27:34,376
code, my spacing for clarity, we

1197
00:27:34,376 --> 00:27:35,416
have a great looking control

1198
00:27:35,416 --> 00:27:36,776
that's ready for Touch Bar with

1199
00:27:36,776 --> 00:27:39,656
the right appearance and the

1200
00:27:39,656 --> 00:27:39,916
right font.

1201
00:27:40,056 --> 00:27:41,636
Next, let's talk about popovers.

1202
00:27:42,386 --> 00:27:43,596
Popover item is really cool

1203
00:27:43,596 --> 00:27:44,756
because it allows you to provide

1204
00:27:44,806 --> 00:27:46,776
extra content to your user, but

1205
00:27:46,776 --> 00:27:49,166
only when the user requests it.

1206
00:27:49,606 --> 00:27:50,916
Popovers have two parts.

1207
00:27:51,496 --> 00:27:52,396
The first is the class

1208
00:27:52,396 --> 00:27:53,486
representation, which is the

1209
00:27:53,486 --> 00:27:55,066
view presented to your user when

1210
00:27:55,066 --> 00:27:56,226
the popovers close.

1211
00:27:56,806 --> 00:27:57,876
And the second piece is the

1212
00:27:57,876 --> 00:27:59,266
popover's NSTouchBar, which

1213
00:27:59,266 --> 00:28:00,166
actually takes over the

1214
00:27:59,266 --> 00:28:00,166
actually takes over the

1215
00:28:00,166 --> 00:28:01,316
application section when the

1216
00:28:01,316 --> 00:28:02,276
popover is open.

1217
00:28:02,276 --> 00:28:03,646
And this lets you use things

1218
00:28:03,646 --> 00:28:03,856
like the

1219
00:28:03,856 --> 00:28:05,916
principalItemIdentifier, or even

1220
00:28:05,916 --> 00:28:07,076
enabling customization.

1221
00:28:08,386 --> 00:28:09,576
Let's talk more about the class

1222
00:28:09,576 --> 00:28:10,366
representation.

1223
00:28:11,826 --> 00:28:13,056
AppKit will provide a default on

1224
00:28:13,056 --> 00:28:14,816
for you and you can customize

1225
00:28:14,816 --> 00:28:15,946
the way it looks by using the

1226
00:28:15,946 --> 00:28:17,826
class representation image, or

1227
00:28:17,826 --> 00:28:18,806
label properties.

1228
00:28:19,116 --> 00:28:20,176
And you can see an example of

1229
00:28:20,176 --> 00:28:21,596
this in the list in alignment

1230
00:28:21,596 --> 00:28:22,766
popovers and the formatting

1231
00:28:22,766 --> 00:28:23,326
controls.

1232
00:28:23,976 --> 00:28:25,686
You can also choose to use

1233
00:28:25,686 --> 00:28:26,826
something more custom.

1234
00:28:27,206 --> 00:28:28,896
Mail chooses to use a segmented

1235
00:28:28,896 --> 00:28:29,406
control.

1236
00:28:29,406 --> 00:28:30,826
And if you tap the main portion

1237
00:28:30,826 --> 00:28:31,656
of this control, it will

1238
00:28:31,656 --> 00:28:33,516
immediately move a message to

1239
00:28:33,606 --> 00:28:35,696
the suggest mailbox.

1240
00:28:36,446 --> 00:28:37,546
But if you tap the arrow, it

1241
00:28:37,546 --> 00:28:38,556
will show a popover with

1242
00:28:38,556 --> 00:28:39,716
additional suggestions.

1243
00:28:40,336 --> 00:28:41,566
This is actually really easy to

1244
00:28:41,566 --> 00:28:43,756
achieve by providing your own

1245
00:28:43,756 --> 00:28:44,846
view for the class

1246
00:28:44,846 --> 00:28:46,536
representation and then using

1247
00:28:46,536 --> 00:28:47,746
the show popover and dismiss

1248
00:28:47,746 --> 00:28:48,856
popover methods.

1249
00:28:50,066 --> 00:28:51,446
Popovers also have two

1250
00:28:51,446 --> 00:28:52,406
interaction models.

1251
00:28:52,746 --> 00:28:53,826
First is touch and show.

1252
00:28:54,636 --> 00:28:55,896
This happens when the user taps

1253
00:28:55,936 --> 00:28:58,176
the class representation.

1254
00:28:58,476 --> 00:29:00,776
The popover's opened and it's

1255
00:28:58,476 --> 00:29:00,776
The popover's opened and it's

1256
00:29:00,776 --> 00:29:02,456
sticky allowing you to make

1257
00:29:02,766 --> 00:29:04,136
multiple selections.

1258
00:29:04,766 --> 00:29:05,956
It's only closed when the user

1259
00:29:05,956 --> 00:29:06,946
taps the closed button.

1260
00:29:07,776 --> 00:29:08,996
The second interaction model is

1261
00:29:08,996 --> 00:29:09,706
press and hold.

1262
00:29:10,046 --> 00:29:11,126
And this happens when the user

1263
00:29:11,126 --> 00:29:12,356
presses and holds on the class

1264
00:29:12,356 --> 00:29:13,136
representation.

1265
00:29:13,436 --> 00:29:14,826
The popover's open directly by

1266
00:29:14,826 --> 00:29:16,246
the user's finger when possible

1267
00:29:16,536 --> 00:29:17,736
and immediately starts tracking

1268
00:29:17,736 --> 00:29:18,286
their input.

1269
00:29:18,696 --> 00:29:19,816
It's closed when the user lifts

1270
00:29:19,816 --> 00:29:21,186
their finger and a selection is

1271
00:29:21,186 --> 00:29:21,596
made.

1272
00:29:21,906 --> 00:29:23,646
But you'll notice that in these

1273
00:29:23,646 --> 00:29:25,226
two examples, the popovers

1274
00:29:25,226 --> 00:29:26,006
actually showed different

1275
00:29:26,006 --> 00:29:26,476
content.

1276
00:29:27,316 --> 00:29:29,026
Touch and show showed several

1277
00:29:29,026 --> 00:29:30,256
controls whereas press and hold

1278
00:29:30,256 --> 00:29:31,656
only showed a single segmented

1279
00:29:31,656 --> 00:29:32,036
control.

1280
00:29:32,356 --> 00:29:33,196
And that's because press and

1281
00:29:33,196 --> 00:29:34,596
hold is tracking the user's

1282
00:29:34,596 --> 00:29:35,776
finger the entire time.

1283
00:29:36,076 --> 00:29:37,446
And so, it's best to leave that

1284
00:29:37,446 --> 00:29:39,216
kind of interaction to a single

1285
00:29:39,216 --> 00:29:39,736
control.

1286
00:29:39,916 --> 00:29:40,886
In this case a segmented

1287
00:29:40,886 --> 00:29:42,036
control, or even something like

1288
00:29:42,036 --> 00:29:42,886
the slider item.

1289
00:29:43,996 --> 00:29:46,286
This is easy to achieve because

1290
00:29:46,516 --> 00:29:47,566
popovers actually have two

1291
00:29:47,566 --> 00:29:49,176
different NSTouchBar properties.

1292
00:29:49,456 --> 00:29:50,546
One for the touch and hold

1293
00:29:50,546 --> 00:29:51,926
popover and another for the

1294
00:29:51,926 --> 00:29:52,616
press and hold.

1295
00:29:53,746 --> 00:29:55,786
Press and hold, if you do not

1296
00:29:55,786 --> 00:29:57,176
provide an NSTouchBar for press

1297
00:29:57,176 --> 00:29:58,346
and hold, press and hold will

1298
00:29:58,346 --> 00:29:58,976
not be enabled.

1299
00:29:59,636 --> 00:30:01,616
It is possible to provide the

1300
00:29:59,636 --> 00:30:01,616
It is possible to provide the

1301
00:30:01,616 --> 00:30:03,146
same NSTouchBar object for both

1302
00:30:03,146 --> 00:30:03,986
of these properties and that

1303
00:30:03,986 --> 00:30:04,886
will work just fine.

1304
00:30:05,266 --> 00:30:06,366
But as I mentioned press and

1305
00:30:06,366 --> 00:30:08,226
hold is best left reserved for

1306
00:30:08,456 --> 00:30:10,146
single things, single items like

1307
00:30:10,146 --> 00:30:12,676
a segmented control or a slider

1308
00:30:12,676 --> 00:30:12,946
item.

1309
00:30:14,416 --> 00:30:15,826
Speaking of the slider item,

1310
00:30:15,826 --> 00:30:16,536
let's talk about it.

1311
00:30:17,246 --> 00:30:18,106
Now, you might be thinking

1312
00:30:18,106 --> 00:30:19,046
what's the difference between a

1313
00:30:19,046 --> 00:30:20,416
slider item and a custom Touch

1314
00:30:20,466 --> 00:30:21,986
Bar item with an NSSlider as its

1315
00:30:21,986 --> 00:30:22,296
view.

1316
00:30:22,866 --> 00:30:23,936
Well, let me explain.

1317
00:30:24,916 --> 00:30:25,946
Sliders have a few different

1318
00:30:25,946 --> 00:30:26,576
parts.

1319
00:30:26,676 --> 00:30:27,976
First we have the slider itself.

1320
00:30:28,506 --> 00:30:29,646
Then, we have these new value

1321
00:30:29,646 --> 00:30:30,996
accessories, which are images

1322
00:30:30,996 --> 00:30:32,176
and are actually intractable.

1323
00:30:32,176 --> 00:30:34,026
You can tap on them to increment

1324
00:30:34,026 --> 00:30:35,256
or decrement the value of your

1325
00:30:35,256 --> 00:30:35,756
slider.

1326
00:30:36,416 --> 00:30:37,386
We also have a label.

1327
00:30:38,276 --> 00:30:39,556
This can make it extra clear to

1328
00:30:39,556 --> 00:30:41,656
your users what this slider is

1329
00:30:41,656 --> 00:30:42,526
actually controlling.

1330
00:30:42,726 --> 00:30:43,696
And it's really useful if you

1331
00:30:43,696 --> 00:30:45,206
have multiple sliders in your

1332
00:30:45,586 --> 00:30:45,676
UI.

1333
00:30:46,196 --> 00:30:47,896
As I mentioned these make really

1334
00:30:47,896 --> 00:30:49,126
great content for press and hold

1335
00:30:49,126 --> 00:30:49,696
popover.

1336
00:30:49,976 --> 00:30:50,636
And that's because the

1337
00:30:50,636 --> 00:30:51,906
immediately start tracking the

1338
00:30:51,906 --> 00:30:53,416
user's finger, even though the

1339
00:30:53,416 --> 00:30:54,846
touch is offset from the knob of

1340
00:30:54,846 --> 00:30:55,426
the slider.

1341
00:30:55,906 --> 00:30:56,726
That means the user can

1342
00:30:56,726 --> 00:30:57,906
immediately start interacting

1343
00:30:57,906 --> 00:30:59,086
with it and not go searching

1344
00:30:59,086 --> 00:31:00,306
around for the knob for

1345
00:30:59,086 --> 00:31:00,306
around for the knob for

1346
00:31:00,306 --> 00:31:01,346
interacting with the slider.

1347
00:31:01,886 --> 00:31:04,026
Let's take a look at what this

1348
00:31:04,026 --> 00:31:04,986
actually looks like in code,

1349
00:31:04,986 --> 00:31:05,166
though.

1350
00:31:05,926 --> 00:31:06,846
First, we're going to create the

1351
00:31:06,846 --> 00:31:07,616
item itself.

1352
00:31:07,796 --> 00:31:08,866
We're going to provide a unique

1353
00:31:08,866 --> 00:31:09,546
identifier.

1354
00:31:10,346 --> 00:31:11,366
Next, we're going to assign it

1355
00:31:11,366 --> 00:31:13,046
minimum and maximum value

1356
00:31:13,046 --> 00:31:14,056
accessories and we're going to

1357
00:31:14,056 --> 00:31:15,756
use images that AppKit provides.

1358
00:31:16,336 --> 00:31:17,166
And lastly, we're going to

1359
00:31:17,166 --> 00:31:18,476
assign a label, because maybe we

1360
00:31:18,476 --> 00:31:19,836
want multiple sliders in our UI.

1361
00:31:19,836 --> 00:31:21,966
But you'll notice that the

1362
00:31:21,966 --> 00:31:23,006
slider is actually taking up the

1363
00:31:23,006 --> 00:31:24,516
entire application section.

1364
00:31:24,516 --> 00:31:25,776
Well, that's because sliders do

1365
00:31:25,776 --> 00:31:27,166
not have an intrinsic content

1366
00:31:27,166 --> 00:31:27,476
size.

1367
00:31:27,526 --> 00:31:28,446
They're happy to be whatever

1368
00:31:28,446 --> 00:31:29,786
size is available in the

1369
00:31:29,786 --> 00:31:30,786
application section.

1370
00:31:31,546 --> 00:31:33,416
You can change this by adding a

1371
00:31:33,416 --> 00:31:34,966
constraint to the slider and

1372
00:31:34,966 --> 00:31:36,606
AppKit will check that and

1373
00:31:36,606 --> 00:31:38,316
automatically remeasure and

1374
00:31:38,316 --> 00:31:39,226
resize the item.

1375
00:31:39,586 --> 00:31:40,546
But notice that we're doing this

1376
00:31:40,546 --> 00:31:42,036
on the slider itself, and not

1377
00:31:42,036 --> 00:31:43,866
the slider items view and that's

1378
00:31:43,866 --> 00:31:45,086
because we have a label here.

1379
00:31:45,416 --> 00:31:47,096
And if we change localizations

1380
00:31:47,226 --> 00:31:48,186
the length of this string will

1381
00:31:48,186 --> 00:31:49,996
also change and we don't want to

1382
00:31:50,526 --> 00:31:51,676
cause clipping.

1383
00:31:52,396 --> 00:31:53,326
Next, let's talk about group

1384
00:31:53,326 --> 00:31:54,006
Touch Bar item.

1385
00:31:54,726 --> 00:31:56,086
Group item is neat because it

1386
00:31:56,086 --> 00:31:57,286
allows you to group multiple

1387
00:31:57,286 --> 00:31:58,706
Touch Bar items into a single

1388
00:31:58,706 --> 00:32:00,176
NSTouchBarItem instance.

1389
00:31:58,706 --> 00:32:00,176
NSTouchBarItem instance.

1390
00:32:00,576 --> 00:32:01,686
This is because it's similar to

1391
00:32:01,686 --> 00:32:03,216
popovers in that it offers its

1392
00:32:03,346 --> 00:32:04,696
NSTouchBar property.

1393
00:32:05,426 --> 00:32:06,386
An example of this is the

1394
00:32:06,386 --> 00:32:07,686
formatting controls above me.

1395
00:32:08,036 --> 00:32:08,966
These have actually been grouped

1396
00:32:08,966 --> 00:32:10,886
into a single NSTouchBarItem.

1397
00:32:11,426 --> 00:32:12,736
There are several reasons you

1398
00:32:12,736 --> 00:32:13,976
might want to do this, and we'll

1399
00:32:13,976 --> 00:32:14,966
talk about each of these.

1400
00:32:15,766 --> 00:32:17,286
When centering multiple items,

1401
00:32:17,586 --> 00:32:18,446
there's some tricks you can play

1402
00:32:18,446 --> 00:32:19,826
with customization as well as

1403
00:32:19,826 --> 00:32:21,296
localization purposes.

1404
00:32:22,236 --> 00:32:23,266
If you remember a few minutes

1405
00:32:23,266 --> 00:32:24,176
ago, when Chris was talking

1406
00:32:24,176 --> 00:32:24,436
about the

1407
00:32:24,436 --> 00:32:26,236
principalItemIdentifier, you'll

1408
00:32:26,236 --> 00:32:27,566
recall that a single item

1409
00:32:27,566 --> 00:32:28,866
identifier is actually provided

1410
00:32:28,866 --> 00:32:29,576
as principal.

1411
00:32:29,576 --> 00:32:32,276
But what happens if you want to

1412
00:32:32,276 --> 00:32:34,146
center multiple items together

1413
00:32:34,146 --> 00:32:35,336
like FaceTime is doing here.

1414
00:32:36,026 --> 00:32:37,396
Well, you can group these items

1415
00:32:37,476 --> 00:32:39,006
to a single group Touch Bar item

1416
00:32:39,006 --> 00:32:40,426
and then provide that item's

1417
00:32:40,426 --> 00:32:42,126
identifier as the principal item

1418
00:32:42,126 --> 00:32:42,746
identifier.

1419
00:32:43,026 --> 00:32:45,776
You can also play some cool

1420
00:32:45,776 --> 00:32:47,266
tricks with the customization.

1421
00:32:47,516 --> 00:32:48,886
If you have a non-customizable

1422
00:32:48,886 --> 00:32:50,506
group like we do here, you'll

1423
00:32:50,506 --> 00:32:51,766
notice that these items are

1424
00:32:51,766 --> 00:32:52,766
actually grouped together.

1425
00:32:53,116 --> 00:32:54,666
That means when the user drags

1426
00:32:54,666 --> 00:32:56,536
these things into, these buttons

1427
00:32:56,536 --> 00:32:58,156
into the Touch Bar, all three of

1428
00:32:58,156 --> 00:32:59,126
these will come together.

1429
00:32:59,856 --> 00:33:00,936
There's also a single

1430
00:32:59,856 --> 00:33:00,936
There's also a single

1431
00:33:00,936 --> 00:33:02,516
customization label describing

1432
00:33:02,516 --> 00:33:04,046
these controls as the playback

1433
00:33:04,456 --> 00:33:05,776
controls.

1434
00:33:06,986 --> 00:33:08,696
If you do choose to enable

1435
00:33:08,696 --> 00:33:09,936
customization on your groups,

1436
00:33:09,936 --> 00:33:11,276
you get some cool behavior there

1437
00:33:11,276 --> 00:33:11,726
as well.

1438
00:33:12,296 --> 00:33:13,606
In this example, we have two

1439
00:33:13,606 --> 00:33:14,716
group Touch Bar items.

1440
00:33:15,136 --> 00:33:16,456
Both of them have customization

1441
00:33:16,456 --> 00:33:16,926
enabled.

1442
00:33:17,376 --> 00:33:18,906
One contains a group of animals

1443
00:33:18,906 --> 00:33:19,726
that you might find in the

1444
00:33:19,726 --> 00:33:21,066
ocean, and another on a farm.

1445
00:33:22,096 --> 00:33:23,406
If I start customizing this,

1446
00:33:23,406 --> 00:33:24,706
you'll notice that I'm free to

1447
00:33:24,706 --> 00:33:26,146
re-order these items however I

1448
00:33:26,146 --> 00:33:27,426
choose within their groups.

1449
00:33:28,656 --> 00:33:30,666
If I try, however, to grab one

1450
00:33:30,806 --> 00:33:32,846
of the ocean animals and put it

1451
00:33:32,846 --> 00:33:34,496
into the farm animals group, it

1452
00:33:34,496 --> 00:33:35,716
snaps back to where it was.

1453
00:33:35,896 --> 00:33:36,996
Because that would be removing

1454
00:33:36,996 --> 00:33:38,186
the item from its group and

1455
00:33:38,186 --> 00:33:39,076
that's not supported.

1456
00:33:41,926 --> 00:33:43,176
GroupTouchBarItem also has

1457
00:33:43,176 --> 00:33:44,256
really cool purposes for

1458
00:33:44,256 --> 00:33:45,096
localization.

1459
00:33:45,526 --> 00:33:46,776
Now, I'm sure your applications

1460
00:33:46,776 --> 00:33:47,976
reach lots of users.

1461
00:33:47,976 --> 00:33:49,176
Some of those users might be

1462
00:33:49,176 --> 00:33:51,246
native right to left speakers of

1463
00:33:51,246 --> 00:33:52,866
languages like Hebrew or Arabic.

1464
00:33:53,396 --> 00:33:54,686
And I'm sure your applications

1465
00:33:54,686 --> 00:33:55,826
are already flipping were

1466
00:33:55,826 --> 00:33:57,106
appropriate for those users.

1467
00:33:57,326 --> 00:33:58,556
And we want Touch Bar to reflect

1468
00:33:58,556 --> 00:33:59,126
that as well.

1469
00:34:00,116 --> 00:34:01,376
A good example of this is

1470
00:34:01,376 --> 00:34:02,206
FaceTime's UI.

1471
00:34:02,356 --> 00:34:04,236
FaceTime chooses to show a full

1472
00:34:04,236 --> 00:34:06,466
screen and a mute button both on

1473
00:34:06,466 --> 00:34:07,436
the screen as well as within

1474
00:34:07,436 --> 00:34:07,966
Touch Bar.

1475
00:34:08,255 --> 00:34:09,376
And you'll notice that the order

1476
00:34:09,376 --> 00:34:10,326
of these buttons match.

1477
00:34:11,146 --> 00:34:12,335
If I go ahead and change the

1478
00:34:12,335 --> 00:34:14,456
language to Arabic, you'll

1479
00:34:14,456 --> 00:34:15,596
notice that the on-screen

1480
00:34:15,826 --> 00:34:17,366
buttons will actually reverse

1481
00:34:17,366 --> 00:34:17,815
their order.

1482
00:34:18,106 --> 00:34:19,376
And we do the same in Touch Bar

1483
00:34:19,376 --> 00:34:21,476
to maintain that matching order.

1484
00:34:22,536 --> 00:34:23,626
But it's important to note that

1485
00:34:23,626 --> 00:34:25,216
not everything actually flips.

1486
00:34:25,275 --> 00:34:26,326
The escape key and the control

1487
00:34:26,326 --> 00:34:27,666
strip stay where they're at

1488
00:34:27,666 --> 00:34:28,545
whether it's left to right or

1489
00:34:28,545 --> 00:34:29,085
right to left.

1490
00:34:29,565 --> 00:34:30,876
And only specific groups of

1491
00:34:30,876 --> 00:34:32,795
items should possibly flip.

1492
00:34:32,916 --> 00:34:34,596
Such as the center controls

1493
00:34:34,596 --> 00:34:35,596
here, which we're flipping to

1494
00:34:35,596 --> 00:34:36,706
match on-screen UI.

1495
00:34:37,116 --> 00:34:38,396
As well as the image and label

1496
00:34:38,396 --> 00:34:39,456
about the incoming call are

1497
00:34:39,456 --> 00:34:39,846
flipped.

1498
00:34:40,306 --> 00:34:41,565
But the position of that item

1499
00:34:41,565 --> 00:34:42,616
did not move to the opposite

1500
00:34:42,616 --> 00:34:43,396
side of the Touch Bar.

1501
00:34:44,505 --> 00:34:46,275
This is easy to achieve using

1502
00:34:46,275 --> 00:34:47,876
GroupTouchBarItem's new group

1503
00:34:47,876 --> 00:34:49,216
user interface layout direction

1504
00:34:49,216 --> 00:34:50,536
property in 10.13.

1505
00:34:50,976 --> 00:34:51,906
You can simply set this to

1506
00:34:51,906 --> 00:34:53,525
reflect NSAppuserInterface

1507
00:34:53,525 --> 00:34:54,246
LayoutDirection.

1508
00:34:55,806 --> 00:34:56,676
Now, I'm sure you're aware

1509
00:34:56,676 --> 00:34:57,936
languages aren't just left to

1510
00:34:57,936 --> 00:34:58,846
right or right to left, they

1511
00:34:58,846 --> 00:34:59,816
also have variable length

1512
00:34:59,816 --> 00:35:00,356
strings.

1513
00:34:59,816 --> 00:35:00,356
strings.

1514
00:35:00,356 --> 00:35:01,396
And it's important to remember

1515
00:35:01,396 --> 00:35:02,776
that when you're designing your

1516
00:35:02,776 --> 00:35:02,866
UI.

1517
00:35:03,646 --> 00:35:04,786
In this example, I have a list

1518
00:35:04,786 --> 00:35:05,806
of some of my favorite ocean

1519
00:35:05,806 --> 00:35:06,256
animals.

1520
00:35:06,626 --> 00:35:08,406
And I ran this exact same app in

1521
00:35:08,406 --> 00:35:09,576
both English and in German.

1522
00:35:10,186 --> 00:35:11,716
In English I was able to fit 6

1523
00:35:11,716 --> 00:35:12,246
items here.

1524
00:35:12,246 --> 00:35:13,756
But in German I only have 5.

1525
00:35:14,236 --> 00:35:15,366
That's because the shark item

1526
00:35:15,366 --> 00:35:16,636
actually didn't have enough room

1527
00:35:16,636 --> 00:35:17,926
to fit in Touch Bar and so it

1528
00:35:17,926 --> 00:35:18,986
was hidden from the user.

1529
00:35:19,316 --> 00:35:20,486
Which is really unfortunate for

1530
00:35:20,486 --> 00:35:21,346
our German friends.

1531
00:35:22,186 --> 00:35:23,946
Now, you might be tempted to fix

1532
00:35:23,946 --> 00:35:25,176
this using constraints, tying

1533
00:35:25,176 --> 00:35:26,426
each button to be a specific

1534
00:35:26,426 --> 00:35:26,726
width.

1535
00:35:26,726 --> 00:35:28,126
But that's actually not a great

1536
00:35:28,126 --> 00:35:29,766
solution because as we change

1537
00:35:29,766 --> 00:35:31,716
localizations, we're almost

1538
00:35:31,716 --> 00:35:32,566
certainly going to cause

1539
00:35:32,566 --> 00:35:33,556
clipping in one of them.

1540
00:35:34,516 --> 00:35:35,876
Now, GroupTouchBarItem actually

1541
00:35:35,876 --> 00:35:36,936
has a great way of handling this

1542
00:35:36,936 --> 00:35:38,276
for you automatically starting

1543
00:35:38,276 --> 00:35:39,086
in 10.13.

1544
00:35:39,386 --> 00:35:40,456
And I encourage you to check out

1545
00:35:40,456 --> 00:35:41,546
the "Advanced Touch Bar Talk"

1546
00:35:41,546 --> 00:35:43,116
later today which will do a dive

1547
00:35:43,116 --> 00:35:44,446
into exactly what happens.

1548
00:35:46,126 --> 00:35:48,096
Now, we have a few bonus topics.

1549
00:35:48,096 --> 00:35:49,056
These are all covered great in

1550
00:35:49,056 --> 00:35:50,416
documentation, but we'll mention

1551
00:35:50,416 --> 00:35:51,146
them briefly now.

1552
00:35:51,606 --> 00:35:52,716
First is the

1553
00:35:52,716 --> 00:35:54,006
ColorPickerTouchBarItem.

1554
00:35:54,476 --> 00:35:55,896
This allows users to interact

1555
00:35:55,896 --> 00:35:56,826
with the color picker right

1556
00:35:56,826 --> 00:35:57,486
through Touch Bar.

1557
00:35:57,916 --> 00:35:59,016
They can choose the exact color

1558
00:35:59,016 --> 00:35:59,636
that they want.

1559
00:35:59,996 --> 00:36:00,946
They can even change color

1560
00:35:59,996 --> 00:36:00,946
They can even change color

1561
00:36:00,946 --> 00:36:02,416
models and your document can

1562
00:36:02,416 --> 00:36:03,756
restrict which color models are

1563
00:36:03,756 --> 00:36:04,346
supported.

1564
00:36:04,986 --> 00:36:06,366
Users also have access to their

1565
00:36:06,366 --> 00:36:07,296
favorite color swatches.

1566
00:36:07,296 --> 00:36:07,956
So, it's a really great

1567
00:36:07,956 --> 00:36:08,666
experience.

1568
00:36:10,036 --> 00:36:10,816
We also have a

1569
00:36:10,816 --> 00:36:11,846
SharingServicePicker.

1570
00:36:12,306 --> 00:36:13,646
This lets you easily share a

1571
00:36:13,646 --> 00:36:15,426
document through mail, messages,

1572
00:36:15,426 --> 00:36:16,856
air drop, or even third-party

1573
00:36:16,856 --> 00:36:17,726
insurance services.

1574
00:36:17,726 --> 00:36:18,566
And these are all the same

1575
00:36:18,566 --> 00:36:20,096
services available through the

1576
00:36:20,096 --> 00:36:20,676
share sheet.

1577
00:36:22,066 --> 00:36:22,856
And finally, we have an

1578
00:36:22,896 --> 00:36:24,066
NSScrubber, which is actually a

1579
00:36:24,066 --> 00:36:25,156
view, not an item.

1580
00:36:25,186 --> 00:36:26,146
This could be the view of a

1581
00:36:26,146 --> 00:36:26,886
Touch Bar item.

1582
00:36:27,536 --> 00:36:28,256
And you can see in an

1583
00:36:28,256 --> 00:36:29,746
application such as calendar's

1584
00:36:30,076 --> 00:36:32,236
timeline, Safari's tabs or even

1585
00:36:32,236 --> 00:36:33,546
the color swatches of the color

1586
00:36:33,546 --> 00:36:34,416
picker that we just talked

1587
00:36:34,416 --> 00:36:34,676
about.

1588
00:36:35,506 --> 00:36:36,836
It's a very versatile, very

1589
00:36:36,836 --> 00:36:37,746
fluid control.

1590
00:36:37,746 --> 00:36:39,296
And it was designed specifically

1591
00:36:39,296 --> 00:36:40,086
for Touch Bar.

1592
00:36:40,426 --> 00:36:41,836
You can find out more about this

1593
00:36:41,836 --> 00:36:42,926
at the advanced talk, which will

1594
00:36:42,926 --> 00:36:44,856
do a deep dive on exactly how to

1595
00:36:44,856 --> 00:36:45,626
use this control.

1596
00:36:47,286 --> 00:36:48,616
Now, we've covered a ton of

1597
00:36:48,616 --> 00:36:49,436
material today.

1598
00:36:49,766 --> 00:36:51,106
We talked about the NSTouchBar

1599
00:36:51,106 --> 00:36:52,726
API, how it's tied to the

1600
00:36:52,726 --> 00:36:54,486
responder chain, how you can use

1601
00:36:54,486 --> 00:36:55,886
it to provide context-sensitive

1602
00:36:55,886 --> 00:36:57,136
controls for your users.

1603
00:36:57,376 --> 00:36:58,106
We've talked about the

1604
00:36:58,106 --> 00:36:59,696
NSTouchBarItem and all of its

1605
00:36:59,696 --> 00:37:01,036
subclasses that AppKit provides

1606
00:36:59,696 --> 00:37:01,036
subclasses that AppKit provides

1607
00:37:01,036 --> 00:37:02,386
and their unique functionality.

1608
00:37:02,566 --> 00:37:04,096
So, you now know enough to go

1609
00:37:04,096 --> 00:37:04,986
adopt Touch Bar in your

1610
00:37:04,986 --> 00:37:06,096
applications today.

1611
00:37:06,826 --> 00:37:08,036
While you're there, you should

1612
00:37:08,036 --> 00:37:08,976
definitely enable user

1613
00:37:08,976 --> 00:37:10,426
customization so that users can

1614
00:37:10,426 --> 00:37:11,886
get the exact experience that

1615
00:37:11,886 --> 00:37:12,646
they're looking for.

1616
00:37:12,646 --> 00:37:14,056
And definitely remember to

1617
00:37:14,056 --> 00:37:15,806
design you UI with localization

1618
00:37:15,806 --> 00:37:17,646
in mind so that all users have a

1619
00:37:17,646 --> 00:37:18,536
great experience.

1620
00:37:19,106 --> 00:37:20,576
For more information, you can

1621
00:37:20,576 --> 00:37:21,776
check out our developer website.

1622
00:37:21,776 --> 00:37:24,276
We have some related sessions

1623
00:37:24,276 --> 00:37:25,216
you might be interested in.

1624
00:37:25,626 --> 00:37:26,556
"Choosing the Right Cocoa

1625
00:37:26,556 --> 00:37:27,776
Container View" will look at

1626
00:37:28,026 --> 00:37:28,966
when you might want to choose a

1627
00:37:28,966 --> 00:37:30,586
grid view over a stack view.

1628
00:37:30,586 --> 00:37:31,866
And this could be important

1629
00:37:31,866 --> 00:37:32,806
because you could use one of

1630
00:37:32,806 --> 00:37:34,356
these container views as the

1631
00:37:34,356 --> 00:37:36,366
content view of a TouchBarItem.

1632
00:37:37,196 --> 00:37:38,366
We also have the "Advanced Touch

1633
00:37:38,366 --> 00:37:39,406
Bar Talk" which we mentioned

1634
00:37:39,406 --> 00:37:40,916
several times, which will do a

1635
00:37:40,916 --> 00:37:42,396
dive into extra functionality of

1636
00:37:42,436 --> 00:37:42,886
Touch Bar.

1637
00:37:43,186 --> 00:37:44,356
Thank you all so much for

1638
00:37:44,356 --> 00:37:45,016
joining us today.

1639
00:37:45,016 --> 00:37:45,846
Enjoy the rest of your

1640
00:37:45,846 --> 00:37:46,346
conference

1641
00:37:47,016 --> 00:37:48,398
[ Applause ]

1642
00:37:48,398 --> 00:37:49,780
.
