1
00:00:24,046 --> 00:00:24,556
&gt;&gt; 大家早上好

2
00:00:25,516 --> 00:00:29,546
[掌声]

3
00:00:30,046 --> 00:00:30,476
我是 Ross Dexter

4
00:00:30,476 --> 00:00:31,186
我是 Apple 公司游戏技术团队的

5
00:00:31,186 --> 00:00:32,176
一名工程师

6
00:00:32,256 --> 00:00:33,196
欢迎大家来到

7
00:00:33,196 --> 00:00:35,096
借助 SpriteKit 超越 2D 这个会议

8
00:00:37,016 --> 00:00:38,386
那么在我们正式开始前 我想

9
00:00:38,386 --> 00:00:39,596
快速地介绍一下什么是

10
00:00:39,596 --> 00:00:41,056
SpriteKit 以及如何与

11
00:00:41,056 --> 00:00:42,196
Apple 图形渲染相结合

12
00:00:42,766 --> 00:00:44,486
SpriteKit 是 Apple 为游戏设计的

13
00:00:44,486 --> 00:00:45,606
2D 图形框架

14
00:00:45,856 --> 00:00:46,486
其设计的目的就是要实现

15
00:00:46,486 --> 00:00:48,826
使用的灵活 快速与便捷

16
00:00:48,826 --> 00:00:50,456
我们所有的平台都支持

17
00:00:50,456 --> 00:00:51,926
SpriteKit 并且它有一个

18
00:00:51,926 --> 00:00:53,486
Xcode 集成生命编辑器

19
00:00:53,486 --> 00:00:54,896
使得编排和预览你们的

20
00:00:54,896 --> 00:00:56,616
游戏内容既快速又便捷

21
00:00:58,106 --> 00:00:59,876
SpriteKit 与 SceneKit 或

22
00:00:59,876 --> 00:01:01,326
其它以游戏为导向的图形

23
00:00:59,876 --> 00:01:01,326
其它以游戏为导向的图形

24
00:01:01,326 --> 00:01:02,836
框架处在同一层 且两者都在

25
00:01:02,836 --> 00:01:03,136
Metal 的上层 

26
00:01:03,876 --> 00:01:04,796
传统上 它们都是

27
00:01:04,796 --> 00:01:06,156
在不同的情景下单独

28
00:01:06,156 --> 00:01:06,896
使用

29
00:01:07,436 --> 00:01:09,446
SpriteKit 可以快速便捷地使用 2D

30
00:01:09,446 --> 00:01:10,956
SceneKit 已经准备充分可以使用

31
00:01:10,956 --> 00:01:12,756
3D 引擎 而 Metal 让大家可以

32
00:01:12,756 --> 00:01:14,236
直接使用设备的

33
00:01:14,346 --> 00:01:15,116
渲染硬件

34
00:01:15,586 --> 00:01:16,926
与其将它们三个

35
00:01:16,926 --> 00:01:18,766
分开 我们认为现在就是 

36
00:01:18,766 --> 00:01:20,146
让 SpriteKit 打破其 2D 模具的

37
00:01:20,146 --> 00:01:20,476
时候了

38
00:01:21,506 --> 00:01:22,736
SpriteKit 功能十分强大

39
00:01:22,736 --> 00:01:23,776
结合 SceneKit 和

40
00:01:23,776 --> 00:01:24,986
Metal 来使用 SpriteKit 极具

41
00:01:24,986 --> 00:01:25,836
吸引力

42
00:01:26,466 --> 00:01:27,626
由于这两者在底层都使用

43
00:01:27,626 --> 00:01:28,846
Metal 因此在 SceneKit 中

44
00:01:28,846 --> 00:01:30,446
渲染 SpriteKit 的内容

45
00:01:30,446 --> 00:01:32,866
或使用任意方式来把它送回

46
00:01:32,896 --> 00:01:34,396
Metal 是轻而易举的

47
00:01:34,396 --> 00:01:34,806
事情

48
00:01:36,046 --> 00:01:37,116
许多 3D 游戏和 app

49
00:01:37,116 --> 00:01:38,916
都使用 2D 的内容 并且 SpriteKit

50
00:01:38,916 --> 00:01:40,036
提供了绝佳的方法来

51
00:01:40,036 --> 00:01:41,036
创建和渲染那些

52
00:01:41,036 --> 00:01:41,476
内容

53
00:01:42,156 --> 00:01:45,756
除此之外 今年 Apple 

54
00:01:45,756 --> 00:01:47,216
正在推出 ARKit 其将

55
00:01:47,216 --> 00:01:48,136
创造增强现实 app 的

56
00:01:48,136 --> 00:01:49,576
所有难点都解决了

57
00:01:50,186 --> 00:01:51,006
这一新框架的添加

58
00:01:51,006 --> 00:01:52,296
提供了另一个原因来说明

59
00:01:52,296 --> 00:01:53,096
为什么让 SpriteKit 走出

60
00:01:53,096 --> 00:01:55,336
2D 并走进第三维度的

61
00:01:55,336 --> 00:01:56,316
时候已经到来

62
00:01:56,946 --> 00:01:57,696
今天 我们将向大家展示

63
00:01:57,696 --> 00:01:59,386
如何实现这一点以及你们能取得

64
00:02:00,796 --> 00:02:02,916
哪些成就

65
00:02:03,106 --> 00:02:04,526
在这个会议中 我们将

66
00:02:04,526 --> 00:02:05,886
涵盖如何在 ARKit 中渲染

67
00:02:05,886 --> 00:02:07,616
SpriteKit 内容 从而将

68
00:02:07,616 --> 00:02:08,406
SpriteKit 领入增强

69
00:02:08,406 --> 00:02:09,186
现实的世界

70
00:02:10,175 --> 00:02:11,236
接下来 我们会给大家展示如何

71
00:02:11,236 --> 00:02:12,406
将 SpriteKit 场景放进

72
00:02:12,406 --> 00:02:13,946
SceneKit 以及这将如何

73
00:02:13,946 --> 00:02:15,096
改善你们的增强现实

74
00:02:15,096 --> 00:02:15,556
app

75
00:02:16,226 --> 00:02:17,376
最后 我们会向大家介绍

76
00:02:17,376 --> 00:02:18,986
SKRenderer 这能够让大家

77
00:02:18,986 --> 00:02:20,206
更好地操控 SpriteKit

78
00:02:20,206 --> 00:02:21,966
更新和渲染器

79
00:02:22,366 --> 00:02:25,116
好的 那就让我们一起来

80
00:02:25,116 --> 00:02:26,726
看看如何同时使用

81
00:02:26,726 --> 00:02:27,726
SpriteKit 和 ARKit 

82
00:02:29,986 --> 00:02:30,826
但首先 我们应当谈一谈

83
00:02:30,826 --> 00:02:31,976
增强现实究竟是什么

84
00:02:32,146 --> 00:02:36,486
增强现实将现实世界

85
00:02:36,566 --> 00:02:38,046
的视图与计算机渲染

86
00:02:38,046 --> 00:02:38,856
内容相结合

87
00:02:39,556 --> 00:02:40,586
渲染内容与现实世界中的

88
00:02:40,586 --> 00:02:42,326
位置相连接 因此

89
00:02:42,326 --> 00:02:43,836
你们在移动设备的时候

90
00:02:43,836 --> 00:02:45,336
视图会有所变化 但内容

91
00:02:45,336 --> 00:02:46,696
似乎还留在原地

92
00:02:47,446 --> 00:02:49,606
这就使你们可以从不同的

93
00:02:49,606 --> 00:02:51,546
角度来检查内容 就好像这是

94
00:02:51,546 --> 00:02:52,796
你们的设备面前的一个

95
00:02:52,796 --> 00:02:53,976
实质性物体

96
00:02:54,606 --> 00:02:55,816
这需要进行许多

97
00:02:55,816 --> 00:02:57,226
复杂的追踪并且实施起来

98
00:02:57,226 --> 00:02:58,866
是一个真正的挑战

99
00:03:01,076 --> 00:03:03,316
多亏了 ARKit 所有艰巨的

100
00:03:03,316 --> 00:03:04,136
工作都替你们完成了

101
00:03:04,866 --> 00:03:06,426
当你们使用 ARKit 时它会利用

102
00:03:06,426 --> 00:03:07,276
设备的照相机

103
00:03:07,276 --> 00:03:09,446
加速度传感器以及其它硬件设备

104
00:03:09,636 --> 00:03:11,326
来追踪它在现实世界

105
00:03:11,816 --> 00:03:13,186
中的位置和方向

106
00:03:13,586 --> 00:03:14,826
你们只需要给它提供

107
00:03:14,826 --> 00:03:15,896
你们希望在 AR 中出现的

108
00:03:15,896 --> 00:03:17,906
内容 ARKit 就会随着

109
00:03:17,906 --> 00:03:19,316
设备的移动自动

110
00:03:19,426 --> 00:03:20,646
更新内容的相应

111
00:03:20,646 --> 00:03:21,066
定位

112
00:03:21,956 --> 00:03:23,076
如果你们想更深入地了解

113
00:03:23,076 --> 00:03:24,386
这一切究竟是怎么操作的 我

114
00:03:24,386 --> 00:03:25,356
强烈推荐大家去看看

115
00:03:25,606 --> 00:03:26,856
本周初举办的介绍 ARKit

116
00:03:26,856 --> 00:03:27,886
的专题会议

117
00:03:28,526 --> 00:03:31,796
ARKit 可以追踪并

118
00:03:31,796 --> 00:03:32,686
更新内容的位置

119
00:03:32,686 --> 00:03:33,916
通过使用锚点来

120
00:03:33,916 --> 00:03:34,556
实现

121
00:03:34,736 --> 00:03:35,906
正是锚点使得 AR 得以运作

122
00:03:37,596 --> 00:03:39,306
锚点是对现实世界的特征

123
00:03:39,306 --> 00:03:40,596
做出回应的 3D 点

124
00:03:40,596 --> 00:03:42,076
这些特征由 ARKit 通过

125
00:03:42,356 --> 00:03:43,426
观测和理解来检测出的

126
00:03:43,776 --> 00:03:45,356
也就是使用你们的设备照相机

127
00:03:45,356 --> 00:03:47,456
来感知和处理

128
00:03:47,456 --> 00:03:48,526
你们周围的世界

129
00:03:49,456 --> 00:03:50,616
创建锚点十分容易

130
00:03:51,036 --> 00:03:52,606
你们可以通过 API 请求

131
00:03:52,606 --> 00:03:54,036
ARKit 在任意时间检测一个锚点

132
00:03:54,406 --> 00:03:55,696
或者你们可以利用设备的

133
00:03:55,696 --> 00:03:57,176
位置和方位手动创建

134
00:03:57,176 --> 00:03:57,756
一个锚点

135
00:03:58,086 --> 00:04:01,646
那么我们如何让 ARKit 来处理

136
00:03:58,086 --> 00:04:01,646
那么我们如何让 ARKit 来处理

137
00:04:01,646 --> 00:04:02,506
SpriteKit 的内容呢

138
00:04:03,796 --> 00:04:05,586
设计 ARKit 是为了让它直接

139
00:04:05,586 --> 00:04:06,576
与 SpriteKit 交互

140
00:04:07,286 --> 00:04:08,476
ARKit 会要求你们的

141
00:04:08,546 --> 00:04:09,896
SpriteKit 节点

142
00:04:09,896 --> 00:04:11,336
附在锚点上 然后

143
00:04:11,336 --> 00:04:12,526
就会随着设备的移动

144
00:04:12,836 --> 00:04:14,736
自动定位 旋转并缩放

145
00:04:14,736 --> 00:04:15,556
这些节点

146
00:04:16,426 --> 00:04:17,946
这样就使得 SpriteKit

147
00:04:17,946 --> 00:04:19,536
内容始终与锚点

148
00:04:19,536 --> 00:04:20,805
相一致 看起来

149
00:04:20,836 --> 00:04:22,236
就好像这些内容

150
00:04:22,236 --> 00:04:23,346
扎根在现实世界

151
00:04:24,666 --> 00:04:25,596
精灵是渲染出的 因此它们

152
00:04:25,596 --> 00:04:26,806
始终面朝照相机

153
00:04:26,906 --> 00:04:28,016
这样无论你们从哪个角度来

154
00:04:28,016 --> 00:04:30,246
浏览它们 它们都总是面朝着

155
00:04:30,296 --> 00:04:30,656
照相机

156
00:04:31,436 --> 00:04:32,556
这个技术叫做

157
00:04:32,556 --> 00:04:33,576
公告牌技术 通常在

158
00:04:33,576 --> 00:04:34,766
早期的 3D 游戏中使用

159
00:04:36,466 --> 00:04:37,526
大家可能对公告牌技术的

160
00:04:37,526 --> 00:04:38,726
运作并不熟悉 那么就让我们

161
00:04:38,726 --> 00:04:40,356
来快速看几个例子 看看可以

162
00:04:40,356 --> 00:04:41,676
如何使用这项技术 它能让你们

163
00:04:41,676 --> 00:04:43,166
在 3D 空间使用 2D 内容

164
00:04:44,046 --> 00:04:45,746
那么假设 我们在 3D 空间中有

165
00:04:45,746 --> 00:04:47,186
精灵位置还有一个观察

166
00:04:47,186 --> 00:04:47,686
它的照相机

167
00:04:48,806 --> 00:04:50,316
随着照相机离这个精灵

168
00:04:50,316 --> 00:04:51,446
越来越近 这个精灵就变得

169
00:04:51,446 --> 00:04:53,006
更大 你们在视图中可以看到

170
00:04:53,006 --> 00:04:53,536
精灵占据了更大的空间

171
00:04:54,296 --> 00:04:56,516
随着照相机越离越远

172
00:04:56,516 --> 00:04:57,856
这个精灵就缩小了

173
00:04:58,876 --> 00:04:59,906
下面我将旋转这个照相机

174
00:05:00,576 --> 00:05:03,286
尽管照相机变换了

175
00:05:03,286 --> 00:05:04,596
视角 但这个精灵在任何时候都

176
00:05:04,596 --> 00:05:05,986
始终朝向照相机

177
00:05:06,666 --> 00:05:07,616
无论我们从哪个角度去看

178
00:05:07,616 --> 00:05:08,576
这一点都是一样的

179
00:05:09,546 --> 00:05:10,896
这里 让我们在 3D 场景中

180
00:05:10,896 --> 00:05:11,956
增加另一个精灵来看看

181
00:05:11,956 --> 00:05:13,686
这将如何与多个 2D 物体一起运作

182
00:05:14,186 --> 00:05:17,136
离照相机更远的精灵

183
00:05:17,366 --> 00:05:18,706
被渲染在离照相机更近的

184
00:05:18,706 --> 00:05:19,516
精灵之后

185
00:05:20,236 --> 00:05:22,616
随着照相机的移动 离得

186
00:05:22,616 --> 00:05:24,616
更远的精灵进入了视线之中

187
00:05:26,156 --> 00:05:27,586
两个精灵都总是朝向

188
00:05:27,586 --> 00:05:31,446
照相机 这个简单的技术

189
00:05:31,446 --> 00:05:33,166
使得你们的 2D 精灵内容可以

190
00:05:33,166 --> 00:05:34,466
在 3D 空间运作

191
00:05:35,106 --> 00:05:38,566
既然我们已经向大家展示了

192
00:05:38,696 --> 00:05:39,956
ARKit 和 SpriteKit 如何

193
00:05:39,956 --> 00:05:41,916
在概念层面共同协作

194
00:05:41,956 --> 00:05:43,176
下面让我们来谈谈

195
00:05:43,176 --> 00:05:44,226
你们需要在 app 上执行的

196
00:05:44,506 --> 00:05:45,186
实际对象

197
00:05:45,526 --> 00:05:47,286
要同时使用 Arkit 和 SpriteKit

198
00:05:47,286 --> 00:05:48,566
你们需要了解四个

199
00:05:48,566 --> 00:05:49,246
重要的对象 即

200
00:05:50,116 --> 00:05:51,956
ARSession  ARAnchor  ARSKView

201
00:05:51,956 --> 00:05:54,146
以及 ARSKViewDelegate

202
00:05:54,146 --> 00:05:59,096
ARSession 是 ARKit 的核心

203
00:05:59,096 --> 00:06:00,636
它负责处理所有的设备

204
00:05:59,096 --> 00:06:00,636
它负责处理所有的设备

205
00:06:00,636 --> 00:06:02,426
追踪并合理安排

206
00:06:02,426 --> 00:06:03,856
ARKit 与 SpriteKit 之间的

207
00:06:03,856 --> 00:06:04,336
交互

208
00:06:05,286 --> 00:06:06,696
它有方法可以添加并

209
00:06:06,696 --> 00:06:08,446
清除你们在 app 中

210
00:06:08,446 --> 00:06:08,866
所创建的锚点

211
00:06:09,346 --> 00:06:10,846
要开始这个过程 你们只需调用

212
00:06:10,846 --> 00:06:12,086
Run方法 然后 ARSession

213
00:06:12,086 --> 00:06:13,496
便会开始追踪你们的设备

214
00:06:14,066 --> 00:06:16,376
你们只需要向它提供

215
00:06:16,376 --> 00:06:17,966
ARSession 配置 这可以

216
00:06:17,966 --> 00:06:19,186
告诉 ARKit 应该使用

217
00:06:19,186 --> 00:06:20,586
哪种增强现实技术

218
00:06:21,056 --> 00:06:22,136
因此 用 SpriteKit 来操作时

219
00:06:22,136 --> 00:06:23,396
你们只需要使用 AR 世界

220
00:06:23,396 --> 00:06:24,836
追踪配置

221
00:06:24,836 --> 00:06:25,626
这一配置提供了你们需要

222
00:06:25,626 --> 00:06:27,076
ARKit 提供的所有

223
00:06:27,116 --> 00:06:27,576
功能

224
00:06:27,986 --> 00:06:31,546
ARKit 通过 ARAnchor 来定义

225
00:06:31,546 --> 00:06:33,026
现实世界的特征

226
00:06:33,486 --> 00:06:34,626
它代表了现实世界的

227
00:06:34,626 --> 00:06:35,716
一个位置并且包含了

228
00:06:35,716 --> 00:06:36,786
transform 数据以及一个

229
00:06:36,786 --> 00:06:37,626
唯一的标识符

230
00:06:38,746 --> 00:06:40,596
ARKit 将 ARAnchors 映射为

231
00:06:40,596 --> 00:06:42,186
SKNodes 这是我们提供用于

232
00:06:42,186 --> 00:06:45,586
渲染内容的

233
00:06:45,846 --> 00:06:47,136
ARKit 通过 ARSKView 与 SpriteKit

234
00:06:47,136 --> 00:06:48,926
进行交互 ARSKView 

235
00:06:48,926 --> 00:06:50,126
来源于 SKView

236
00:06:51,096 --> 00:06:52,026
它创建并包含了

237
00:06:52,026 --> 00:06:53,346
ARSession 这样你们就不需要

238
00:06:53,346 --> 00:06:54,206
手动去进行创建

239
00:06:54,206 --> 00:06:55,386
并且它有方法可以获得

240
00:06:55,386 --> 00:06:56,656
相关的锚点和节点

241
00:06:56,856 --> 00:06:58,066
因此 你们需要手动去追踪

242
00:06:58,436 --> 00:06:59,706
哪个节点对应的是哪个

243
00:06:59,706 --> 00:07:00,996
锚点 反过来也是一样

244
00:06:59,706 --> 00:07:00,996
锚点 反过来也是一样

245
00:07:01,576 --> 00:07:03,086
它同时还有 hitTest 方法

246
00:07:03,446 --> 00:07:04,936
这是你们创建锚点的

247
00:07:04,936 --> 00:07:05,866
主要方式

248
00:07:06,206 --> 00:07:07,246
它需要你们设备屏幕上的

249
00:07:07,246 --> 00:07:08,736
一个点并通过这个点射出

250
00:07:08,736 --> 00:07:08,916
一条线

251
00:07:09,216 --> 00:07:10,366
所以去找找现实世界中离你

252
00:07:10,366 --> 00:07:12,686
最近的那个点 把

253
00:07:12,686 --> 00:07:15,096
物体附在上面

254
00:07:15,546 --> 00:07:16,286
最后 来看看

255
00:07:16,386 --> 00:07:17,686
ARSKViewDelegate

256
00:07:17,876 --> 00:07:18,966
这是来源于 SKViewDelegate

257
00:07:18,966 --> 00:07:20,916
的一个协议 能够帮助你们

258
00:07:20,916 --> 00:07:22,126
对会话控制中添加 更新

259
00:07:22,466 --> 00:07:23,766
以及清除的锚点做出

260
00:07:23,766 --> 00:07:24,196
反应

261
00:07:25,366 --> 00:07:26,566
所有这些方法都是非强制性的

262
00:07:26,676 --> 00:07:27,596
它们是同时使用 SpriteKit

263
00:07:27,596 --> 00:07:29,156
和 ARKit 的关键

264
00:07:29,156 --> 00:07:32,166
但我们一会儿再回到这个

265
00:07:32,836 --> 00:07:32,936
点来

266
00:07:33,146 --> 00:07:34,256
让我们先来用 SpriteKit

267
00:07:34,256 --> 00:07:36,016
创建我们第一个 ARKit

268
00:07:36,016 --> 00:07:36,476
app

269
00:07:37,496 --> 00:07:39,066
首先 我们要在 Xcode 里创建

270
00:07:39,066 --> 00:07:40,576
一个新的 iOS 项目

271
00:07:41,276 --> 00:07:42,416
你们将看到在 Xcode 9 里

272
00:07:42,496 --> 00:07:43,716
有一个新的增强现实 app

273
00:07:43,716 --> 00:07:47,366
模板供你们选择

274
00:07:47,556 --> 00:07:49,026
你们选择了 app 模板之后

275
00:07:49,336 --> 00:07:50,616
要开始使用 SpriteKit

276
00:07:50,706 --> 00:07:51,676
就要选择它作为你们的

277
00:07:51,676 --> 00:07:52,256
内容技术

278
00:07:52,836 --> 00:07:56,146
那么现在全部就已经完成了

279
00:07:56,186 --> 00:07:57,496
现在你们可以准备进入

280
00:07:57,496 --> 00:07:58,306
增强现实世界了

281
00:07:59,326 --> 00:08:00,586
对于 iOS app 来说

282
00:07:59,326 --> 00:08:00,586
对于 iOS app 来说

283
00:08:00,586 --> 00:08:02,056
最后的项目看上去非常标准化

284
00:08:02,056 --> 00:08:03,316
但让我们来看看对于

285
00:08:03,316 --> 00:08:04,006
同时使用 SpriteKit 和 ARKit

286
00:08:04,006 --> 00:08:05,356
十分重要的一些文档

287
00:08:07,426 --> 00:08:09,016
首先是 Scene.sks

288
00:08:09,056 --> 00:08:11,036
这是一个标准化的 SpriteKit

289
00:08:11,036 --> 00:08:12,276
场景 你们在这里创建

290
00:08:12,276 --> 00:08:13,736
和布置你们希望出现在

291
00:08:13,736 --> 00:08:14,596
app 上的所有非 AR

292
00:08:14,596 --> 00:08:14,826
内容

293
00:08:15,536 --> 00:08:17,106
它看上去好像是对 AR

294
00:08:17,106 --> 00:08:17,976
内容的叠加

295
00:08:17,976 --> 00:08:18,846
因此 对于像 HUD 元素

296
00:08:18,846 --> 00:08:20,346
帮助文本以及其它类似的内容

297
00:08:20,526 --> 00:08:21,086
来说是有用的

298
00:08:22,396 --> 00:08:23,466
拥有 Z-position 属性并且等于

299
00:08:23,466 --> 00:08:24,836
或大于 0 的节点将

300
00:08:24,836 --> 00:08:26,766
覆盖在 ARKit 添加到场景中的

301
00:08:26,766 --> 00:08:28,226
所有 AR 内容上面

302
00:08:29,096 --> 00:08:30,666
所有的节点都是由

303
00:08:30,666 --> 00:08:31,996
拥有 Z-position 属性且

304
00:08:31,996 --> 00:08:33,606
小于 0 的 ARKit 管理

305
00:08:35,356 --> 00:08:37,706
接下来 看看 Scene.swift

306
00:08:38,436 --> 00:08:39,686
这是 SpriteKit 场景的一个

307
00:08:39,726 --> 00:08:40,905
相对应的源文件

308
00:08:41,666 --> 00:08:42,686
就像在普通的 SpriteKit app 中那样

309
00:08:42,686 --> 00:08:44,386
你们在这里加入代码来

310
00:08:44,416 --> 00:08:46,236
管理你们的场景 Gameplay

311
00:08:46,236 --> 00:08:47,386
和逻辑 并且这是一个利用

312
00:08:47,386 --> 00:08:48,876
游戏开发工具多种特征的

313
00:08:48,876 --> 00:08:49,306
好地方

314
00:08:49,986 --> 00:08:53,006
最后 让我们来看看

315
00:08:53,006 --> 00:08:54,306
ViewController.swift

316
00:08:54,806 --> 00:08:56,206
视图控制器遵守

317
00:08:56,206 --> 00:08:58,096
ARSKViewDelegate 并且它的

318
00:08:58,096 --> 00:08:59,206
sceneView 属性是

319
00:08:59,236 --> 00:09:00,906
ARSKView 的一个实例 其中

320
00:08:59,236 --> 00:09:00,906
ARSKView 的一个实例 其中

321
00:09:00,906 --> 00:09:02,206
包含 ARSession

322
00:09:03,226 --> 00:09:04,586
视图控制器类是

323
00:09:04,586 --> 00:09:05,456
你们与 ARKit 交互的

324
00:09:05,456 --> 00:09:06,686
主要方式

325
00:09:07,396 --> 00:09:08,436
在模板中 控制器被

326
00:09:08,436 --> 00:09:10,256
自动设置以通过 AR 世界

327
00:09:10,256 --> 00:09:11,996
追踪配置在 ARSession 上

328
00:09:11,996 --> 00:09:13,366
调用 run

329
00:09:13,716 --> 00:09:14,496
这样你们就不需要自行

330
00:09:14,496 --> 00:09:15,006
添加了

331
00:09:15,776 --> 00:09:16,926
这也是你们执行

332
00:09:16,926 --> 00:09:18,216
与你们相关的 ARSKView

333
00:09:18,316 --> 00:09:19,366
代理方法的地方

334
00:09:19,366 --> 00:09:23,406
下面让我们来谈谈

335
00:09:23,406 --> 00:09:24,996
视图控制需要做出

336
00:09:24,996 --> 00:09:25,876
反应的 ARKit 事件

337
00:09:26,946 --> 00:09:28,546
第一个事件就是当新的

338
00:09:28,546 --> 00:09:30,516
锚点被添加到 SKSession 时

339
00:09:32,006 --> 00:09:33,516
出现这种情况时 ARKit 会请求

340
00:09:33,516 --> 00:09:34,516
视图控制器提供你们

341
00:09:34,516 --> 00:09:35,586
希望与锚点相关联的

342
00:09:35,586 --> 00:09:37,096
SpriteKit 节点

343
00:09:37,636 --> 00:09:39,436
那么这时我们就需要创建

344
00:09:39,436 --> 00:09:39,856
AR 内容

345
00:09:41,766 --> 00:09:42,906
第二个事件是

346
00:09:42,906 --> 00:09:44,876
会话控制更新了已有的锚点

347
00:09:44,876 --> 00:09:45,396
之时

348
00:09:46,516 --> 00:09:47,836
当发生这一情况时 ARKit 会通知

349
00:09:47,836 --> 00:09:49,796
视图控制器 那么你们就可以对

350
00:09:49,796 --> 00:09:50,336
更新做出反应

351
00:09:51,736 --> 00:09:52,926
第三个也就是最后一个事件是

352
00:09:52,926 --> 00:09:54,416
当锚点从会话控制中被

353
00:09:54,416 --> 00:09:54,886
移除之时

354
00:09:56,126 --> 00:09:57,336
ARKit 会告知视图控制器

355
00:09:57,336 --> 00:09:58,526
你们就可以对 app 进行

356
00:09:58,526 --> 00:09:59,696
任何必要的清理了

357
00:10:04,046 --> 00:10:04,896
ARSKViewDelegate 提供了

358
00:10:04,896 --> 00:10:06,016
与每一个事件相关联的

359
00:10:06,016 --> 00:10:06,476
方法

360
00:10:07,226 --> 00:10:08,596
我们之前提到过 这些方法中的

361
00:10:08,596 --> 00:10:10,676
每一个都是非强制性的 因此你们

362
00:10:10,676 --> 00:10:11,786
只需执行对你们有用的

363
00:10:11,786 --> 00:10:12,366
那些方法

364
00:10:12,876 --> 00:10:14,076
让我们再回顾一下

365
00:10:14,776 --> 00:10:18,746
首先是锚节点

366
00:10:18,746 --> 00:10:19,136
方法

367
00:10:20,006 --> 00:10:21,126
当新的锚点被添加进控制会话时

368
00:10:21,126 --> 00:10:22,426
就会调用这个方法

369
00:10:22,426 --> 00:10:24,636
ARKit 将这个方法

370
00:10:24,636 --> 00:10:26,656
返回的节点映射为

371
00:10:26,656 --> 00:10:27,396
输入的锚点

372
00:10:28,326 --> 00:10:29,286
如果你们想要为锚点创建

373
00:10:29,286 --> 00:10:30,946
一个自定义节点 那么就应该执行

374
00:10:30,946 --> 00:10:31,386
这个方法 

375
00:10:31,506 --> 00:10:33,266
如果不执行这个

376
00:10:33,266 --> 00:10:35,446
方法 那么一个默认的空 SKNode 就会

377
00:10:35,446 --> 00:10:36,706
自动为你们创建

378
00:10:37,246 --> 00:10:39,196
这个方法返回的

379
00:10:39,196 --> 00:10:40,226
节点将被 ARKit 移动

380
00:10:40,506 --> 00:10:42,576
旋转和缩放从而

381
00:10:42,576 --> 00:10:43,756
与锚点相匹配

382
00:10:44,116 --> 00:10:45,116
所以如果你们尝试对 transform

383
00:10:45,116 --> 00:10:46,676
进行任何变动 

384
00:10:46,676 --> 00:10:48,016
当设备移动时 这些变动可能

385
00:10:48,016 --> 00:10:49,166
会被 ARKit 复写

386
00:10:50,116 --> 00:10:50,946
分配给这个节点的

387
00:10:50,976 --> 00:10:51,976
任何子节点的 transform 都不会

388
00:10:51,976 --> 00:10:53,006
被修改 知道这一点是

389
00:10:53,006 --> 00:10:53,946
很有用的

390
00:10:53,996 --> 00:10:55,486
我们将在下一个方法中

391
00:10:55,586 --> 00:10:56,286
更多地谈论这点

392
00:10:57,986 --> 00:10:59,036
同时要知道 ARKit

393
00:10:59,036 --> 00:11:00,336
会自动在场景图中

394
00:10:59,036 --> 00:11:00,336
会自动在场景图中

395
00:11:00,336 --> 00:11:02,046
添加节点 这样你们就不需要

396
00:11:02,666 --> 00:11:04,336
自行添加了

397
00:11:04,576 --> 00:11:06,376
接下来 我们介绍 didAdd

398
00:11:06,376 --> 00:11:06,686
锚节点

399
00:11:06,776 --> 00:11:09,076
在 SKNode 映射到锚点之后

400
00:11:09,076 --> 00:11:10,436
可调用这一方法 因此是在

401
00:11:10,436 --> 00:11:11,916
执行了之前的锚节点

402
00:11:11,916 --> 00:11:13,336
方法之后

403
00:11:14,746 --> 00:11:15,896
如果你们执行了锚节点

404
00:11:15,896 --> 00:11:17,256
方法 那么这儿输入的

405
00:11:17,256 --> 00:11:18,616
节点将会是从那儿

406
00:11:18,616 --> 00:11:20,126
返回的那个节点

407
00:11:20,126 --> 00:11:22,026
如果你们没执行这个方法 那么

408
00:11:22,026 --> 00:11:23,286
就会有一个默认的空节点

409
00:11:23,286 --> 00:11:25,656
正如我们在上一张幻灯片

410
00:11:25,656 --> 00:11:27,176
所说的那样 映射到锚点的那个

411
00:11:27,176 --> 00:11:28,166
节点会让变形的 修改后的

412
00:11:28,166 --> 00:11:30,086
ARKit 随着设备的移动

413
00:11:30,086 --> 00:11:31,396
紧跟着那个锚点

414
00:11:32,336 --> 00:11:33,686
这样的话 如果你们想要修改

415
00:11:33,686 --> 00:11:34,986
内容的 transform

416
00:11:34,986 --> 00:11:36,326
你们就应该在此处将它们作为子节点

417
00:11:36,326 --> 00:11:39,116
添加 因为 ARKit 不会对它们

418
00:11:41,496 --> 00:11:41,716
进行修改

419
00:11:42,076 --> 00:11:43,446
接下来 看看 willUpdate

420
00:11:43,446 --> 00:11:44,866
锚节点以及 didUpdtae 锚

421
00:11:44,866 --> 00:11:45,166
节点

422
00:11:46,116 --> 00:11:47,366
这两个方法是在节点更新了

423
00:11:47,366 --> 00:11:48,846
给定的锚点数据之前

424
00:11:48,906 --> 00:11:49,946
以及之后来调用

425
00:11:51,056 --> 00:11:52,316
正如它们的名字所显示的那样

426
00:11:52,316 --> 00:11:53,426
willUpdate 锚节点在更新

427
00:11:53,426 --> 00:11:55,016
之前调用 而 didUpdate 锚

428
00:11:55,066 --> 00:11:56,116
节点则是在更新之后 

429
00:11:56,116 --> 00:11:56,486
调用

430
00:11:57,396 --> 00:11:58,246
当设备移动以及视图变化时

431
00:11:58,246 --> 00:11:59,736
会发生这一情况

432
00:12:00,816 --> 00:12:01,996
这些节点的位置 旋转以及

433
00:12:01,996 --> 00:12:03,046
或者缩放取决于

434
00:12:03,046 --> 00:12:04,556
调用这些方法之间存在的

435
00:12:04,556 --> 00:12:04,916
变化

436
00:12:06,156 --> 00:12:09,986
最后 来看看 didRemove 锚

437
00:12:09,986 --> 00:12:10,326
节点

438
00:12:11,196 --> 00:12:12,316
调用这个锚节点是在节点

439
00:12:12,316 --> 00:12:13,496
从场景图中清除时

440
00:12:13,976 --> 00:12:15,496
当锚点的轨迹从 ARSession

441
00:12:15,496 --> 00:12:16,796
被清除时会发生这一

442
00:12:16,796 --> 00:12:17,336
情况

443
00:12:18,756 --> 00:12:19,826
好了 以上便是

444
00:12:19,826 --> 00:12:21,336
关于 API 的重要内容

445
00:12:21,336 --> 00:12:23,766
下面让我们来看看代码吧

446
00:12:23,996 --> 00:12:24,826
让我们来谈一谈创建

447
00:12:24,826 --> 00:12:25,186
锚点

448
00:12:25,556 --> 00:12:27,206
这里 我们来看看 touchesBegan

449
00:12:27,206 --> 00:12:28,286
事件的处理器

450
00:12:28,956 --> 00:12:33,216
当设备报告了一个 touch

451
00:12:33,216 --> 00:12:34,516
我们在 ARSKView 中就能获得

452
00:12:34,586 --> 00:12:35,936
touch 的位置

453
00:12:36,626 --> 00:12:39,946
然后我们把 touch 的位置

454
00:12:39,946 --> 00:12:42,556
提供给 ARSKView 的 hitTest

455
00:12:42,556 --> 00:12:44,376
方法 这个方法会向现实世界

456
00:12:44,376 --> 00:12:45,896
射出一道光线来寻找

457
00:12:45,896 --> 00:12:47,126
我们可以将之变为锚点的

458
00:12:47,126 --> 00:12:48,346
特征点

459
00:12:49,366 --> 00:12:50,626
它会按从近到远的顺序

460
00:12:50,626 --> 00:12:52,316
返回一道由所有的 hits

461
00:12:52,316 --> 00:12:53,686
组成的光线

462
00:12:53,686 --> 00:12:58,626
我们看到最近的这个 hit 然后

463
00:12:58,626 --> 00:13:00,006
使用这个 worldTransform

464
00:12:58,626 --> 00:13:00,006
使用这个 worldTransform

465
00:13:00,006 --> 00:13:02,056
来创建一个 ARAnchor 然后我们

466
00:13:02,056 --> 00:13:02,896
再添加到会话控制中

467
00:13:02,896 --> 00:13:05,606
这就是全部内容了

468
00:13:05,606 --> 00:13:06,786
创建锚点简直简单到

469
00:13:06,786 --> 00:13:07,186
不行

470
00:13:07,316 --> 00:13:12,246
那么既然我们已经在会话控制中

471
00:13:12,246 --> 00:13:13,506
添加了新的锚点 会话

472
00:13:13,506 --> 00:13:14,436
控制将请求视图

473
00:13:14,436 --> 00:13:15,606
控制器提供给我们

474
00:13:15,606 --> 00:13:16,616
想要附在上面的 SpriteKit

475
00:13:16,616 --> 00:13:17,726
内容

476
00:13:19,116 --> 00:13:21,386
要做到这一点 我们要执行

477
00:13:21,386 --> 00:13:22,996
ARSKView 代理 didAdd

478
00:13:22,996 --> 00:13:23,766
锚节点方法

479
00:13:24,646 --> 00:13:26,066
我们还没有执行锚

480
00:13:26,066 --> 00:13:27,556
节点 因此就为我们创建了一个

481
00:13:27,556 --> 00:13:28,746
默认的空节点

482
00:13:28,986 --> 00:13:29,686
这就是传递到

483
00:13:29,926 --> 00:13:30,606
这一方法的内容

484
00:13:33,406 --> 00:13:34,476
那么现在我们只需要

485
00:13:34,476 --> 00:13:35,426
创建我们想要附在锚点

486
00:13:35,426 --> 00:13:37,756
上面的内容 然后再

487
00:13:38,816 --> 00:13:40,546
把它作为输入这个方法的节点的

488
00:13:40,546 --> 00:13:41,586
子节点添加进去

489
00:13:42,586 --> 00:13:43,846
ARKit 会自动更新

490
00:13:43,846 --> 00:13:45,236
这一节点使之在设备

491
00:13:45,236 --> 00:13:46,586
移动时跟随着这个锚点

492
00:13:46,876 --> 00:13:47,816
这样你们就不需要再做任何

493
00:13:47,816 --> 00:13:48,186
别的事了

494
00:13:48,186 --> 00:13:52,146
那么既然我们已经向大家展示了

495
00:13:52,146 --> 00:13:53,816
如何通过 SpriteKit 来使用

496
00:13:53,816 --> 00:13:55,196
ARKit API 就让我们进入

497
00:13:55,196 --> 00:13:57,266
增强现实的内容

498
00:13:58,516 --> 00:14:07,546
[掌声]

499
00:13:58,516 --> 00:14:07,546
[掌声]

500
00:14:08,046 --> 00:14:10,936
我们先来打开这里的 app

501
00:14:11,126 --> 00:14:12,446
我们可以看到我们现在正在

502
00:14:12,446 --> 00:14:13,266
进行视频透传

503
00:14:13,266 --> 00:14:15,196
我们可以在屏幕上看到我们

504
00:14:15,196 --> 00:14:15,656
可爱的观众

505
00:14:15,986 --> 00:14:17,046
你们现在可都是名人啦

506
00:14:18,046 --> 00:14:19,456
下面让我们在增强现实中

507
00:14:19,456 --> 00:14:20,956
放入一些内容

508
00:14:21,546 --> 00:14:23,786
我在点击屏幕的同时

509
00:14:24,596 --> 00:14:28,276
我把内容放在了离我也就半米远

510
00:14:28,276 --> 00:14:29,196
的面前

511
00:14:29,716 --> 00:14:30,636
在这里 我刚用表情符号

512
00:14:30,826 --> 00:14:32,856
添加了 SKLabelNode

513
00:14:33,006 --> 00:14:34,896
有趣的是 你们可以仅通过使用

514
00:14:34,896 --> 00:14:35,786
标签来使用 SpriteKit app

515
00:14:35,786 --> 00:14:36,446
里的表情符号

516
00:14:36,556 --> 00:14:37,416
只需把它们粘贴到这里

517
00:14:37,416 --> 00:14:39,446
你们可以看到它们现在都

518
00:14:39,576 --> 00:14:40,886
悬浮在 3D 空间中

519
00:14:40,886 --> 00:14:43,786
当我四处移动照相机的时候

520
00:14:45,536 --> 00:14:46,796
它们也移动 但相对位置

521
00:14:46,796 --> 00:14:47,136
不变

522
00:14:47,716 --> 00:14:50,196
只是把它们放在空间里

523
00:14:50,196 --> 00:14:50,936
没什么意思

524
00:14:50,936 --> 00:14:52,926
我也可以把它们放在

525
00:14:52,926 --> 00:14:53,506
平面上

526
00:14:54,746 --> 00:14:57,426
它会检测与平面

527
00:14:57,426 --> 00:14:59,756
的交集 通过使用我们

528
00:14:59,756 --> 00:15:00,656
刚刚谈到的 HitTest

529
00:14:59,756 --> 00:15:00,656
刚刚谈到的 HitTest

530
00:15:00,656 --> 00:15:01,566
方法来检测

531
00:15:01,566 --> 00:15:06,276
然后它会在检测到的

532
00:15:06,276 --> 00:15:07,526
桌子平面上放入

533
00:15:07,526 --> 00:15:08,026
表情符号

534
00:15:08,666 --> 00:15:10,636
但放置表情符号也

535
00:15:10,636 --> 00:15:11,786
没什么意思

536
00:15:12,086 --> 00:15:13,296
因此现在我们要转换成

537
00:15:13,296 --> 00:15:16,676
爆炸模式 然后我们就

538
00:15:16,676 --> 00:15:18,636
可以让我们的表情符号爆炸 这样

539
00:15:19,166 --> 00:15:20,296
才稍微有点意思

540
00:15:21,486 --> 00:15:23,546
同时 我们要注意我们

541
00:15:23,546 --> 00:15:25,216
此处左下角的文本

542
00:15:25,216 --> 00:15:27,786
以及我们在摧毁表情符号时

543
00:15:27,786 --> 00:15:31,146
这些表情翻转的

544
00:15:31,146 --> 00:15:32,646
方式 因为这一点

545
00:15:32,726 --> 00:15:33,816
过一会儿会变得

546
00:15:33,816 --> 00:15:34,166
有意义

547
00:15:34,926 --> 00:15:37,256
所以你们可以看到要快速创建

548
00:15:37,256 --> 00:15:41,156
一个 app 并使用 SpriteKit

549
00:15:41,156 --> 00:15:43,346
内容来进入增强现实

550
00:15:43,346 --> 00:15:44,056
是多么容易

551
00:15:44,266 --> 00:15:45,386
这只是大家现在可以使用

552
00:15:45,386 --> 00:15:47,736
Xcode 9 创建的 app

553
00:15:47,736 --> 00:15:49,416
模板稍微调整后的一个

554
00:15:49,416 --> 00:15:50,066
版本

555
00:15:51,236 --> 00:15:53,526
这就是拥有 ARKit 的 SpriteKit

556
00:15:54,516 --> 00:15:58,696
[掌声]

557
00:15:59,196 --> 00:16:00,316
那么大家可以看到当把

558
00:15:59,196 --> 00:16:00,316
那么大家可以看到当把

559
00:16:00,316 --> 00:16:01,316
ARKit 和 SpriteKit 结合起来使用

560
00:16:01,316 --> 00:16:02,546
的时候 进入增强现实是

561
00:16:02,546 --> 00:16:02,936
多么容易

562
00:16:03,746 --> 00:16:04,816
我之前提到过 我们还有

563
00:16:04,816 --> 00:16:06,016
一些其它的 SpriteKit

564
00:16:06,016 --> 00:16:06,946
功能 其中一些在我刚刚

565
00:16:06,946 --> 00:16:07,926
进行的快速演示中

566
00:16:07,926 --> 00:16:08,716
出现过了

567
00:16:10,056 --> 00:16:11,996
所以希望大家有注意到

568
00:16:11,996 --> 00:16:13,156
在演示 app 动画里

569
00:16:13,156 --> 00:16:14,316
屏幕下方的文本

570
00:16:14,756 --> 00:16:15,936
这是通过一个单一的

571
00:16:15,986 --> 00:16:17,306
SKLabelNode 实现的 这是

572
00:16:17,306 --> 00:16:18,586
因为它们现在支持属性

573
00:16:18,586 --> 00:16:19,026
字串符

574
00:16:20,146 --> 00:16:21,096
属性字串符使大家可以

575
00:16:21,096 --> 00:16:23,376
指定字符串中每一个字符

576
00:16:23,376 --> 00:16:25,026
的属性 这样大家就可以

577
00:16:25,026 --> 00:16:26,206
把不同的颜色和字体

578
00:16:26,206 --> 00:16:27,946
混合在同一个

579
00:16:27,946 --> 00:16:28,326
标签中

580
00:16:28,326 --> 00:16:30,856
它使用了 NSAttributedString

581
00:16:30,856 --> 00:16:31,976
你们唯一需要做的就是

582
00:16:31,976 --> 00:16:34,226
设置 SKLabelNodes 新的 attributedText

583
00:16:34,226 --> 00:16:34,666
属性

584
00:16:36,996 --> 00:16:38,816
在我们的增强现实

585
00:16:38,816 --> 00:16:40,026
app 里的表情符号直到现在

586
00:16:40,026 --> 00:16:41,276
才可以以不可思议的方式旋转

587
00:16:41,276 --> 00:16:42,316
这都要归功于新的

588
00:16:42,316 --> 00:16:43,096
SKTransformNode

589
00:16:44,556 --> 00:16:46,886
SKNode 已经具备了 Z 旋转的能力

590
00:16:47,746 --> 00:16:49,176
但是 SKTransformNode 为大家

591
00:16:49,176 --> 00:16:50,436
新增了围绕 X 轴和 Y 轴

592
00:16:50,436 --> 00:16:52,326
旋转的能力

593
00:16:53,096 --> 00:16:54,646
使得 SpriteKit 内容可以进行

594
00:16:54,646 --> 00:16:55,706
全 3D 旋转

595
00:16:56,526 --> 00:16:58,116
这些旋转也同样适用于

596
00:16:58,116 --> 00:16:59,006
所有的子节点

597
00:17:00,006 --> 00:17:01,736
SKTransformNode 使用了

598
00:17:01,736 --> 00:17:02,956
正交投影

599
00:17:03,256 --> 00:17:04,205
因此没有对你们的

600
00:17:04,266 --> 00:17:05,316
节点进行任何透视

601
00:17:05,316 --> 00:17:05,846
倾斜

602
00:17:06,736 --> 00:17:08,156
你们可以通过 X Y 以及 Z

603
00:17:08,156 --> 00:17:10,106
旋转属性来指定你们的

604
00:17:10,106 --> 00:17:11,705
旋转 或者你们可以使用

605
00:17:11,705 --> 00:17:12,866
专门的 getter 和 setter 函数来

606
00:17:12,866 --> 00:17:14,606
获得欧拉角 旋转矩阵

607
00:17:14,806 --> 00:17:18,185
和四元数

608
00:17:18,616 --> 00:17:19,636
最后 在终端的部分

609
00:17:19,675 --> 00:17:20,856
SpriteKit 与 Xcode 的

610
00:17:20,856 --> 00:17:22,766
视图调试器完全

611
00:17:22,766 --> 00:17:23,205
兼容

612
00:17:24,175 --> 00:17:25,415
它显示了整个场景

613
00:17:25,415 --> 00:17:26,796
图并给大家提供了整洁的

614
00:17:26,796 --> 00:17:28,476
场景 3D 爆炸视图

615
00:17:28,806 --> 00:17:29,926
这能够提供极大的帮助 当

616
00:17:29,926 --> 00:17:31,676
你们想要去调试排版

617
00:17:31,676 --> 00:17:33,176
内容排版的问题时

618
00:17:33,416 --> 00:17:34,726
这同时也让大家可以检查

619
00:17:34,726 --> 00:17:35,946
所有的节点属性 这样

620
00:17:36,286 --> 00:17:37,096
在 app 暂停的那一个瞬间

621
00:17:37,096 --> 00:17:38,026
你们就可以看到场景中的

622
00:17:38,026 --> 00:17:39,216
所有事物的状态

623
00:17:39,556 --> 00:17:40,836
这真的是一个非常棒的

624
00:17:40,836 --> 00:17:41,816
新功能 所有请大家去看看

625
00:17:41,816 --> 00:17:43,136
Xcode 9 会议关于调试的内容

626
00:17:43,136 --> 00:17:44,726
以了解更多信息

627
00:17:46,356 --> 00:17:48,116
我们已经给大家展示了使用

628
00:17:48,116 --> 00:17:49,976
ARKit 以及 SpriteKit 来

629
00:17:49,976 --> 00:17:51,736
创建增强现实的 app

630
00:17:51,736 --> 00:17:53,256
是多么快速和便捷

631
00:17:54,206 --> 00:17:55,586
ARKit 为大家处理了

632
00:17:55,586 --> 00:17:56,916
增强现实中所有困难的

633
00:17:56,916 --> 00:17:58,636
部分 而 SpriteKit 则让

634
00:17:58,636 --> 00:17:59,916
渲染内容变成小菜一碟

635
00:18:01,606 --> 00:18:02,396
我们还介绍了

636
00:18:02,396 --> 00:18:03,566
SpriteKit 的新功能 为大家

637
00:18:03,566 --> 00:18:04,716
提供了更大的灵活性来

638
00:18:04,716 --> 00:18:05,906
开发 app 并给大家

639
00:18:05,906 --> 00:18:07,206
提供调试 SpriteKit 内容的

640
00:18:07,206 --> 00:18:08,036
新选项

641
00:18:08,726 --> 00:18:12,116
但可能大家还有一些遗留的

642
00:18:12,116 --> 00:18:12,786
问题

643
00:18:13,196 --> 00:18:14,036
如果我们并不想要

644
00:18:14,036 --> 00:18:15,066
公告牌精灵呢

645
00:18:15,636 --> 00:18:16,736
如果我们希望通过透视

646
00:18:16,736 --> 00:18:17,636
来使我们的 SpriteKit 内容

647
00:18:17,636 --> 00:18:18,156
生效呢

648
00:18:18,156 --> 00:18:21,886
如果我们想在增强现实中把

649
00:18:22,126 --> 00:18:23,596
2D 和 3D 的内容混在一起呢

650
00:18:24,286 --> 00:18:26,236
如果我们想把 SpriteKit 带入

651
00:18:26,236 --> 00:18:27,216
3D 世界呢

652
00:18:29,056 --> 00:18:31,186
答案就是要把

653
00:18:31,186 --> 00:18:33,236
SceneKit  SpriteKit 以及 ARKit 这三者

654
00:18:33,536 --> 00:18:36,206
全部结合起来

655
00:18:36,736 --> 00:18:38,286
SceneKit 是 SpriteKit 的 3D

656
00:18:38,286 --> 00:18:40,046
版本 这是已经可以使用的

657
00:18:40,076 --> 00:18:41,626
带有自己的 Xcode 集成现场

658
00:18:41,626 --> 00:18:42,866
编辑器的 3D引擎

659
00:18:43,866 --> 00:18:44,956
大家可能还有所不知的是

660
00:18:44,956 --> 00:18:47,576
你们可以使用 SpriteKit 场景

661
00:18:47,576 --> 00:18:49,296
作为 SceneKit 中几何图形的

662
00:18:49,296 --> 00:18:49,876
材料

663
00:18:50,796 --> 00:18:51,556
这使得你们可以用复杂的

664
00:18:51,556 --> 00:18:53,326
3D 变换和透视效果

665
00:18:53,326 --> 00:18:54,936
来渲染 SpriteKit

666
00:18:54,936 --> 00:18:55,276
内容

667
00:18:56,306 --> 00:18:57,726
此外 你们可以轻松地将

668
00:18:57,726 --> 00:18:59,506
2D 的 SpriteKit 内容与 3D 的

669
00:18:59,936 --> 00:19:04,176
ScenenKit 内容混合在同样的

670
00:18:59,936 --> 00:19:04,176
ScenenKit 内容混合在同样的

671
00:19:04,256 --> 00:19:04,506
背景中 

672
00:19:04,936 --> 00:19:06,326
就像 SpriteKit 那样 SceneKit

673
00:19:06,326 --> 00:19:08,476
也同样与 ARKit 相结合在

674
00:19:08,476 --> 00:19:10,456
增强现实 app 中

675
00:19:10,456 --> 00:19:12,286
使用 SceneKit 创建一个项目 这跟

676
00:19:12,286 --> 00:19:13,346
SpriteKit 是一样的

677
00:19:14,296 --> 00:19:15,376
只是把内容技术

678
00:19:15,376 --> 00:19:16,696
改成 SceneKit 就可以了

679
00:19:17,146 --> 00:19:21,386
这个 API 的设计与大家在

680
00:19:21,386 --> 00:19:22,436
SpriteKit 中所使用的 API

681
00:19:22,436 --> 00:19:22,906
非常类似

682
00:19:23,196 --> 00:19:24,836
仅有少数几个对象的名称

683
00:19:25,456 --> 00:19:27,496
有所不同

684
00:19:27,496 --> 00:19:30,226
ARSKView 变成了 ARSCNView 而

685
00:19:30,226 --> 00:19:31,726
ARSKViewDelegate 变成了

686
00:19:31,786 --> 00:19:32,936
ARSCNViewDelegate

687
00:19:33,856 --> 00:19:34,866
在 SpriteKit 中 模板会为

688
00:19:34,896 --> 00:19:37,026
大家创建 ARSCNView 同时

689
00:19:37,026 --> 00:19:38,606
视图控制器遵守

690
00:19:38,606 --> 00:19:39,636
ARSCNViewDelegate

691
00:19:40,376 --> 00:19:41,596
现在 为了节约时间

692
00:19:41,596 --> 00:19:42,456
也因为 API 非常类似

693
00:19:42,456 --> 00:19:43,416
所以在这里我们就不再

694
00:19:43,416 --> 00:19:44,186
介绍剩余的内容了

695
00:19:44,886 --> 00:19:48,356
那么下面 我们想在 SceneKit

696
00:19:48,356 --> 00:19:49,596
的场景中渲染

697
00:19:49,596 --> 00:19:50,656
SpriteKit 的内容

698
00:19:51,596 --> 00:19:53,226
通常 在 SpriteKit 中 你们有

699
00:19:53,226 --> 00:19:54,816
场景并且你们把它设置在

700
00:19:54,816 --> 00:19:55,296
SKView 上

701
00:19:56,256 --> 00:19:58,406
然后 SKView 与 UIKit 或

702
00:19:58,406 --> 00:20:00,386
Mac OS 的 AppKit 共同把你们的

703
00:19:58,406 --> 00:20:00,386
Mac OS 的 AppKit 共同把你们的

704
00:20:00,386 --> 00:20:03,236
内容放到屏幕上

705
00:20:04,046 --> 00:20:04,886
为了使你们的内容在 SceneKit

706
00:20:05,036 --> 00:20:06,336
里渲染 处理的方式

707
00:20:06,336 --> 00:20:07,076
略有不同

708
00:20:07,726 --> 00:20:08,856
现在不用将场景设置在

709
00:20:08,856 --> 00:20:10,406
视图上 而是设置在

710
00:20:10,406 --> 00:20:11,986
你们希望出现 SpriteKit

711
00:20:11,986 --> 00:20:13,056
内容的几何图形的

712
00:20:13,056 --> 00:20:14,906
材料属性上

713
00:20:14,906 --> 00:20:17,336
然后这个材料与 SceneKit

714
00:20:17,336 --> 00:20:18,786
一起来渲染

715
00:20:18,786 --> 00:20:20,346
SpriteKit 的内容 然后

716
00:20:20,346 --> 00:20:22,026
纹理将之映射在

717
00:20:22,116 --> 00:20:23,276
与材料相关联的几何图形中

718
00:20:23,456 --> 00:20:27,566
下面 让我们来看几个

719
00:20:27,566 --> 00:20:29,086
在 SceneKit 几何图形中渲染

720
00:20:29,206 --> 00:20:30,426
SpriteKit 内容的例子

721
00:20:31,306 --> 00:20:32,856
这里 我们有一个基本的 SpriteKit

722
00:20:32,856 --> 00:20:33,226
场景

723
00:20:33,826 --> 00:20:35,866
那么这个就是当我们在 SceneKit

724
00:20:35,866 --> 00:20:37,426
的平面渲染这个场景

725
00:20:37,426 --> 00:20:39,226
时会看到的

726
00:20:40,996 --> 00:20:42,606
我们还可以把 SpriteKit 的

727
00:20:42,606 --> 00:20:45,366
场景应用到立方体甚至是

728
00:20:45,366 --> 00:20:45,766
球体中

729
00:20:45,856 --> 00:20:47,286
你们可以把它当成

730
00:20:47,286 --> 00:20:48,756
普通纹理那样来使用

731
00:20:48,756 --> 00:20:49,906
而 SpriteKit 随着 SpriteKit

732
00:20:49,906 --> 00:20:51,416
场景的更新 你们的纹理会

733
00:20:51,416 --> 00:20:52,906
随之一同更新

734
00:20:54,536 --> 00:20:56,226
那么现在 我想快速地向大家

735
00:20:56,226 --> 00:20:57,476
展示用 SceneKit 来使用

736
00:20:57,476 --> 00:20:58,856
SpriteKit 是多么容易

737
00:21:00,986 --> 00:21:03,056
首先 在 SceneKit 中获取

738
00:21:03,056 --> 00:21:04,316
一个你们想要使用的

739
00:21:04,316 --> 00:21:04,766
SpriteKit 场景 

740
00:21:05,366 --> 00:21:08,766
接下来 创建你们想要

741
00:21:08,766 --> 00:21:09,856
用来渲染 SpriteKit 场景的

742
00:21:09,856 --> 00:21:10,356
几何图形

743
00:21:11,086 --> 00:21:12,246
这里我们创建了一个简单的

744
00:21:12,246 --> 00:21:12,686
平面

745
00:21:14,416 --> 00:21:16,466
然后你们只需要把 SpriteKit

746
00:21:16,466 --> 00:21:17,996
场景设置为平面

747
00:21:17,996 --> 00:21:19,556
材料中漫反射属性的

748
00:21:19,556 --> 00:21:20,386
内容

749
00:21:21,356 --> 00:21:22,726
这会导致 SceneKit 将

750
00:21:22,726 --> 00:21:23,766
SpriteKit 的场景渲染成一个

751
00:21:23,766 --> 00:21:25,496
纹理然后再把它应用到

752
00:21:25,496 --> 00:21:25,996
几何图形上

753
00:21:25,996 --> 00:21:30,686
在这儿我们把材料

754
00:21:30,686 --> 00:21:31,796
设置成双面的

755
00:21:32,286 --> 00:21:33,416
这就使得 SpriteKit 的场景

756
00:21:33,416 --> 00:21:34,756
在平面的两侧

757
00:21:34,756 --> 00:21:35,156
同时出现

758
00:21:35,786 --> 00:21:38,826
接下来我们就只需为这个平面

759
00:21:38,866 --> 00:21:40,196
创建一个 SceneKit 节点 然后

760
00:21:40,196 --> 00:21:44,146
把它添加到 SceneKit 场景中

761
00:21:44,696 --> 00:21:45,606
现在这个平面将出现在

762
00:21:45,606 --> 00:21:46,716
这个场景中并带有你们

763
00:21:46,716 --> 00:21:48,156
在上面映射的 SpriteKit 场景

764
00:21:48,156 --> 00:21:49,746
纹理的内容

765
00:21:51,236 --> 00:21:53,176
那么下面我想给大家做一个演示

766
00:21:53,176 --> 00:21:54,226
看看你们在使用 SpriteKit 和 

767
00:21:54,226 --> 00:21:55,256
SceneKit 时结合 ARKit

768
00:21:55,256 --> 00:21:56,746
可以做些什么

769
00:21:58,516 --> 00:22:08,036
[掌声]

770
00:21:58,516 --> 00:22:08,036
[掌声]

771
00:22:08,536 --> 00:22:08,926
好的

772
00:22:11,216 --> 00:22:13,476
在这里我有一个在 ARKit

773
00:22:13,476 --> 00:22:16,546
发布的样本代码基础上

774
00:22:16,546 --> 00:22:18,036
建立的演示

775
00:22:18,036 --> 00:22:19,286
你们可以在关于这一内容的

776
00:22:19,286 --> 00:22:19,766
网站上找到

777
00:22:19,766 --> 00:22:23,006
那么现在我在检测

778
00:22:23,006 --> 00:22:23,896
一个平面

779
00:22:24,406 --> 00:22:27,116
如果我点击屏幕

780
00:22:27,116 --> 00:22:29,696
那么它就会在这里的世界

781
00:22:29,696 --> 00:22:30,416
为我们创建一个 SpriteKit 场景

782
00:22:30,576 --> 00:22:32,666
你们可以看到这是一个全

783
00:22:32,666 --> 00:22:34,166
动态的 SpriteKit 场景

784
00:22:34,166 --> 00:22:35,926
你们可以看到这些树在活动

785
00:22:36,346 --> 00:22:38,936
事实上 我可以直接

786
00:22:38,936 --> 00:22:40,286
跟它进行交互

787
00:22:40,326 --> 00:22:41,796
让我们真正地来

788
00:22:41,796 --> 00:22:44,346
让我们稍微放大一点

789
00:22:44,346 --> 00:22:45,756
由于我们处在 3D 空间中 我们可以

790
00:22:45,756 --> 00:22:46,536
做所有酷炫的事情

791
00:22:46,536 --> 00:22:48,316
我们可以把它移来移去 我们

792
00:22:48,696 --> 00:22:51,286
可以旋转 我们还可以缩放

793
00:22:51,286 --> 00:22:53,216
把它稍微变大点

794
00:22:54,056 --> 00:22:55,786
所以现在我可以直接同

795
00:22:55,786 --> 00:22:56,726
这个场景交互了

796
00:22:56,726 --> 00:22:58,686
我可以控制这儿的

797
00:22:58,686 --> 00:23:00,986
设备 我可以移动我的

798
00:22:58,686 --> 00:23:00,986
设备 我可以移动我的

799
00:23:00,986 --> 00:23:03,166
这个小人 让它四处跳动

800
00:23:04,476 --> 00:23:06,336
跳过它还有点难呢

801
00:23:06,696 --> 00:23:07,816
好了 我们可以四处跳动

802
00:23:07,816 --> 00:23:09,576
与它进行实时的交互

803
00:23:09,576 --> 00:23:10,716
就跟普通的在 3D 中渲染的

804
00:23:10,716 --> 00:23:12,996
SpriteKi 场景一样

805
00:23:13,856 --> 00:23:15,236
但只是让它呆在

806
00:23:15,236 --> 00:23:16,886
平面上没什么意思

807
00:23:17,086 --> 00:23:17,986
我们应该做些稍微更

808
00:23:17,986 --> 00:23:19,076
有趣的事情 让它更

809
00:23:19,076 --> 00:23:19,936
3D 一点

810
00:23:20,336 --> 00:23:21,466
所以如果我点击这里的

811
00:23:21,466 --> 00:23:24,046
按钮 这个场景就会向上

812
00:23:24,046 --> 00:23:26,396
弹起

813
00:23:27,516 --> 00:23:30,576
[掌声]

814
00:23:31,076 --> 00:23:32,946
如果我再点击一下 它就会

815
00:23:32,946 --> 00:23:34,146
在这里分出不同的

816
00:23:34,146 --> 00:23:34,436
几层

817
00:23:34,436 --> 00:23:35,566
因此我们实际上不止有

818
00:23:35,606 --> 00:23:36,706
一个 SpriteKit 场景

819
00:23:37,516 --> 00:23:40,546
[掌声]

820
00:23:41,046 --> 00:23:41,706
在这里我们实际上有三个

821
00:23:41,706 --> 00:23:42,706
SpriteKit 场景 这里的每一层

822
00:23:42,706 --> 00:23:43,276
都有一个

823
00:23:43,276 --> 00:23:44,866
前面有一个

824
00:23:44,866 --> 00:23:46,136
中间和后面各有一个

825
00:23:47,616 --> 00:23:49,436
这就给大家展示了

826
00:23:49,436 --> 00:23:50,546
你们在使用 SpriteKit

827
00:23:50,546 --> 00:23:51,756
和 SceneKit 时结合 ARKit

828
00:23:51,756 --> 00:23:54,346
可以做些什么 但可能

829
00:23:54,346 --> 00:23:55,366
你们开始觉得有点

830
00:23:55,366 --> 00:23:58,336
受到级别的限制了

831
00:23:59,146 --> 00:24:00,356
或许我们想要自己的这个

832
00:23:59,146 --> 00:24:00,356
或许我们想要自己的这个

833
00:24:00,356 --> 00:24:02,176
小人走出来去自己

834
00:24:02,176 --> 00:24:02,946
开启一场探险

835
00:24:03,116 --> 00:24:03,906
它可以进入真实的

836
00:24:03,906 --> 00:24:04,386
世界

837
00:24:04,656 --> 00:24:06,576
这个按钮看着让人相当

838
00:24:06,576 --> 00:24:07,056
想按下去

839
00:24:09,446 --> 00:24:11,216
太棒啦

840
00:24:12,516 --> 00:24:18,556
[掌声]

841
00:24:19,056 --> 00:24:19,826
那么这就让大家明白了

842
00:24:19,826 --> 00:24:20,736
在 3D 背景里同时使用

843
00:24:20,736 --> 00:24:22,606
SpriteKit  SceneKit  ARKit

844
00:24:22,606 --> 00:24:24,586
可以做些什么了

845
00:24:27,306 --> 00:24:28,946
大家可以看到 结合 SceneKit

846
00:24:28,946 --> 00:24:30,156
使用 SpriteKit 可以实现

847
00:24:30,156 --> 00:24:31,456
全 3D 变换和透视

848
00:24:31,756 --> 00:24:32,436
这又让大家可以做些

849
00:24:32,436 --> 00:24:33,216
很酷的事情

850
00:24:33,836 --> 00:24:35,376
它让大家可以把 2D 和 3D 的

851
00:24:35,376 --> 00:24:36,926
内容混合在同一个背景中

852
00:24:37,516 --> 00:24:38,926
并且与 ARKit 完全

853
00:24:38,926 --> 00:24:41,116
兼容 同时它在普通的 3D 

854
00:24:41,116 --> 00:24:42,286
app 中也可以很好地操作

855
00:24:42,286 --> 00:24:46,556
刚才我们已经谈到了如何

856
00:24:46,556 --> 00:24:48,176
使用 ARKit 和 SceneKit 下面

857
00:24:48,176 --> 00:24:49,106
我们向大家介绍 SpriteKit

858
00:24:49,106 --> 00:24:50,646
的另一个新功能

859
00:24:51,086 --> 00:24:51,976
SKRenderer

860
00:24:53,136 --> 00:24:56,056
让我们来稍微看看

861
00:24:56,056 --> 00:24:57,496
SpriteKit 在底层是怎么运行的

862
00:24:58,376 --> 00:24:59,006
我们在上一个板块中

863
00:24:59,006 --> 00:25:00,796
已经提到了 使用普通的

864
00:24:59,006 --> 00:25:00,796
已经提到了 使用普通的

865
00:25:00,796 --> 00:25:02,046
SpriteKit 渲染 你们有

866
00:25:02,046 --> 00:25:03,616
自己的场景并把它设置在

867
00:25:03,616 --> 00:25:05,566
SKView 上 然后再同

868
00:25:05,566 --> 00:25:07,736
UIKit 和 AppKit 一起来把你们的

869
00:25:07,736 --> 00:25:09,046
内容放在屏幕上 

870
00:25:10,296 --> 00:25:11,346
SKView 会为你们处理

871
00:25:11,346 --> 00:25:12,826
所有的更新和渲染

872
00:25:13,926 --> 00:25:14,796
这一点的好处是它使得

873
00:25:14,796 --> 00:25:15,906
用 SpriteKit 来起步

874
00:25:15,906 --> 00:25:16,826
非常容易

875
00:25:17,736 --> 00:25:18,666
但如果你们想要在一个

876
00:25:18,666 --> 00:25:20,256
3D 背景里渲染 SpriteKit

877
00:25:20,256 --> 00:25:20,776
内容呢

878
00:25:21,516 --> 00:25:24,276
解决方法就像我给大家展示的那样

879
00:25:24,546 --> 00:25:26,306
结合 SceneKit 来使用 SpriteKit

880
00:25:26,806 --> 00:25:28,356
不用把场景设置在

881
00:25:28,356 --> 00:25:29,586
视图上 你们可以把它用作

882
00:25:29,586 --> 00:25:31,056
SceneKit 的材料

883
00:25:31,936 --> 00:25:33,006
并且这能让大家做一切

884
00:25:33,006 --> 00:25:33,616
酷炫的事情

885
00:25:33,616 --> 00:25:35,976
但当 SpriteKit 的更新和

886
00:25:35,976 --> 00:25:37,226
渲染仍不受你们操控

887
00:25:37,226 --> 00:25:37,796
时

888
00:25:38,796 --> 00:25:40,896
如果你们想要更多的控制呢

889
00:25:41,436 --> 00:25:42,416
或许你们想要按照具体的固定的

890
00:25:42,416 --> 00:25:45,396
时间步骤来更新或是不加

891
00:25:45,396 --> 00:25:46,756
渲染地更新或是不加

892
00:25:46,756 --> 00:25:48,866
更新的渲染又或是更新一次

893
00:25:48,866 --> 00:25:50,346
渲染两次 每次都从不同的

894
00:25:50,346 --> 00:25:51,076
视角进行

895
00:25:52,286 --> 00:25:53,596
如果我们想要直接和 Metal

896
00:25:53,596 --> 00:25:56,186
一起使用呢

897
00:25:56,306 --> 00:25:57,676
那就进入 SKRenderer

898
00:26:00,026 --> 00:26:02,026
你们可以使用 SKRenderer 而不是

899
00:26:02,026 --> 00:26:03,196
SKView 来更多地操控

900
00:26:03,196 --> 00:26:03,866
SpriteKit

901
00:26:04,686 --> 00:26:07,986
就像 SKView 要使用 SKRenderer

902
00:26:07,986 --> 00:26:09,926
你们只需要把你们的

903
00:26:09,926 --> 00:26:10,876
场景设置在

904
00:26:10,876 --> 00:26:11,236
渲染器上

905
00:26:11,886 --> 00:26:13,196
但与 SKView 不同的是

906
00:26:13,526 --> 00:26:15,026
SKRenderer 让你们来决定

907
00:26:15,026 --> 00:26:16,586
SpriteKit 什么时候进行更新

908
00:26:16,586 --> 00:26:17,176
和渲染 

909
00:26:18,136 --> 00:26:19,326
它让大家可以直接通过

910
00:26:19,326 --> 00:26:20,956
Metal 运作 然后你们就可以

911
00:26:20,956 --> 00:26:22,326
把 SpriteKit 渲染成

912
00:26:22,326 --> 00:26:23,436
一个纹理然后

913
00:26:23,656 --> 00:26:24,526
随心所欲地使用了

914
00:26:25,466 --> 00:26:26,956
这正是 SceneKit

915
00:26:26,956 --> 00:26:28,596
能够在 3D 背景中有效

916
00:26:28,596 --> 00:26:30,356
渲染 SpriteKit 内容的方式

917
00:26:30,386 --> 00:26:32,396
它在底层使用了

918
00:26:32,966 --> 00:26:33,086
SKRenderer

919
00:26:34,716 --> 00:26:36,486
使用 SKRenderer 一共有

920
00:26:36,556 --> 00:26:38,666
四个步骤 初始化

921
00:26:39,136 --> 00:26:41,756
设置场景 更新以及

922
00:26:41,756 --> 00:26:42,116
渲染

923
00:26:43,296 --> 00:26:44,616
初始化只出现一次

924
00:26:45,256 --> 00:26:46,406
在一开始就要进行场景设置

925
00:26:46,406 --> 00:26:47,516
如果要转换新的场景则要

926
00:26:47,516 --> 00:26:49,666
再次设置 而更新和

927
00:26:49,666 --> 00:26:51,386
渲染在 app 的每一帧都要

928
00:26:51,386 --> 00:26:51,626
重复进行

929
00:26:51,626 --> 00:26:54,846
让我们来看看每一个步骤

930
00:26:55,706 --> 00:26:57,416
的代码

931
00:26:57,506 --> 00:26:59,206
第一步 初始化

932
00:26:59,756 --> 00:27:01,796
要将 SKRenderer 初始化

933
00:26:59,756 --> 00:27:01,796
要将 SKRenderer 初始化

934
00:27:01,796 --> 00:27:02,716
你们只需要向它提供

935
00:27:02,836 --> 00:27:05,906
一个 Metal 设备

936
00:27:06,656 --> 00:27:08,656
第二步 设置场景

937
00:27:09,346 --> 00:27:10,556
这与 SKView 的做法是

938
00:27:10,556 --> 00:27:12,076
完全相同的 只需要

939
00:27:12,076 --> 00:27:13,726
把场景设置在 SKRenderer 的场景

940
00:27:13,726 --> 00:27:14,116
属性上

941
00:27:17,376 --> 00:27:18,866
第三步 更新

942
00:27:19,596 --> 00:27:21,096
这同样非常简单 你们

943
00:27:21,096 --> 00:27:23,386
只需要输入

944
00:27:25,176 --> 00:27:25,286
currentTime

945
00:27:25,806 --> 00:27:27,166
第四步 渲染

946
00:27:27,776 --> 00:27:28,676
这可以通过调用渲染

947
00:27:28,676 --> 00:27:29,786
方法来完成 具体方式

948
00:27:29,786 --> 00:27:30,516
有两种

949
00:27:31,266 --> 00:27:32,286
你们想采用哪种方式

950
00:27:32,326 --> 00:27:33,446
取决于你们想

951
00:27:33,446 --> 00:27:34,776
怎样结合 Metal 来使用你们的

952
00:27:34,776 --> 00:27:35,816
SpriteKit 内容

953
00:27:36,506 --> 00:27:39,346
两个方法都要求大家指定

954
00:27:39,376 --> 00:27:40,466
你们想要渲染的

955
00:27:40,466 --> 00:27:42,106
视口 也就是 CGrect

956
00:27:42,146 --> 00:27:43,076
定义了在渲染目标里

957
00:27:43,076 --> 00:27:45,026
SpriteKit 将要绘制的

958
00:27:45,026 --> 00:27:48,456
区域

959
00:27:49,296 --> 00:27:50,886
两种方法都有 Metal

960
00:27:50,886 --> 00:27:51,986
渲染通过描述符 这

961
00:27:51,986 --> 00:27:53,266
描述了你们希望 SpriteKit

962
00:27:53,266 --> 00:27:54,476
内容绘制的

963
00:27:54,476 --> 00:27:58,616
渲染目标

964
00:27:59,076 --> 00:28:00,246
第一个方法让你们可以

965
00:27:59,076 --> 00:28:00,246
第一个方法让你们可以

966
00:28:00,246 --> 00:28:01,986
指定 SpriteKit 来创建

967
00:28:01,986 --> 00:28:03,346
渲染命令的

968
00:28:03,576 --> 00:28:04,376
命令缓冲区

969
00:28:05,396 --> 00:28:06,436
调用这一方法的一个

970
00:28:06,436 --> 00:28:07,366
很好的案例是如果你们没有

971
00:28:07,446 --> 00:28:08,956
直接把 SpriteKit 内容与

972
00:28:08,956 --> 00:28:10,726
其它的 Metal 内容混合在

973
00:28:10,846 --> 00:28:11,966
同一个渲染目标里

974
00:28:12,576 --> 00:28:13,646
如果你们想把一个

975
00:28:13,646 --> 00:28:15,086
SpriteKit 场景渲染成纹理

976
00:28:15,086 --> 00:28:16,176
然后再通过一些 3D 几何图形

977
00:28:16,176 --> 00:28:17,846
进行应用 就像我们给大家

978
00:28:17,846 --> 00:28:19,196
做的第二个演示那样 那么

979
00:28:19,406 --> 00:28:20,326
你们可能会想要调用这个

980
00:28:20,326 --> 00:28:20,556
方法

981
00:28:23,196 --> 00:28:25,276
第二个方法给了大家更多的

982
00:28:25,276 --> 00:28:26,656
粒度 让大家可以

983
00:28:26,656 --> 00:28:28,956
决定 SpriteKit 的渲染命令

984
00:28:28,956 --> 00:28:30,516
将在哪个渲染命令编码器

985
00:28:30,566 --> 00:28:31,356
上进行编码

986
00:28:31,886 --> 00:28:33,136
如果你们想直接

987
00:28:33,136 --> 00:28:34,486
把 SpriteKit 和 Metal 的内容混在

988
00:28:34,486 --> 00:28:35,966
相同的渲染目标中 那么这种方式

989
00:28:35,966 --> 00:28:36,376
是适用的

990
00:28:36,936 --> 00:28:38,326
所以你们想要和 SpriteKit

991
00:28:38,326 --> 00:28:39,636
内容一道渲染一些 2D 的

992
00:28:39,636 --> 00:28:41,266
Metal 内容 或许你们想要

993
00:28:41,266 --> 00:28:43,036
在 Metal 场景上叠加

994
00:28:43,036 --> 00:28:44,456
SpriteKit 来显示 HUD

995
00:28:44,456 --> 00:28:44,966
元素

996
00:28:45,706 --> 00:28:47,116
通过使用相同的渲染命令

997
00:28:47,116 --> 00:28:48,436
及编码器 你们可以大大地提高

998
00:28:48,436 --> 00:28:49,366
效率 超过你们使用

999
00:28:49,366 --> 00:28:50,376
第一个方法的效率

1000
00:28:50,376 --> 00:28:54,356
好了 这就是 API

1001
00:28:54,356 --> 00:28:55,076
的内容了

1002
00:28:55,346 --> 00:28:56,286
让我们来快速做一个演示

1003
00:28:56,286 --> 00:28:57,366
看看如何在 3D 中用 Metal 进行

1004
00:28:57,366 --> 00:28:59,986
SpriteKit 渲染

1005
00:29:01,516 --> 00:29:08,836
[掌声]

1006
00:29:09,336 --> 00:29:11,986
在这里，我们有一个 Metal 的

1007
00:29:11,986 --> 00:29:12,416
3D 场景

1008
00:29:13,136 --> 00:29:14,446
你们看 在这儿我们有明亮

1009
00:29:14,446 --> 00:29:16,626
的光线还有一些阴影

1010
00:29:16,936 --> 00:29:18,246
我们还有这台非常吸引人的

1011
00:29:18,246 --> 00:29:20,566
街机 上面还带有

1012
00:29:20,866 --> 00:29:22,176
漂亮的 SpriteKit 框架

1013
00:29:22,176 --> 00:29:22,766
标识

1014
00:29:23,896 --> 00:29:26,996
让我们朝着它走过去“插入游戏币”

1015
00:29:27,296 --> 00:29:28,296
听上去也相当吸引人

1016
00:29:28,296 --> 00:29:29,076
我有个硬币

1017
00:29:29,076 --> 00:29:30,126
让我们把它插进去

1018
00:29:30,126 --> 00:29:34,206
你们看 我们就得到了一个

1019
00:29:34,206 --> 00:29:36,416
在这个 3D Metal 场景上渲染的

1020
00:29:36,846 --> 00:29:38,786
SpriteKit 场景

1021
00:29:39,376 --> 00:29:41,296
看 我们在使用 SKRenderer

1022
00:29:41,666 --> 00:29:43,466
将 SpriteKit 渲染成一个

1023
00:29:43,466 --> 00:29:44,936
纹理 然后我们

1024
00:29:44,936 --> 00:29:46,746
再把它映射到这里的

1025
00:29:46,746 --> 00:29:47,836
街机前

1026
00:29:47,906 --> 00:29:49,956
接下来我们只需要把一个

1027
00:29:49,956 --> 00:29:53,116
CRT 着色器应用到 Metal 中

1028
00:29:53,426 --> 00:29:55,316
以获得这种复古学院派的外观

1029
00:29:55,376 --> 00:29:57,166
实际上 我可以随心所欲地从

1030
00:29:57,166 --> 00:29:58,516
任意角度移动 我还可以

1031
00:29:58,516 --> 00:30:00,926
像这样跟它交互

1032
00:29:58,516 --> 00:30:00,926
像这样跟它交互

1033
00:30:01,046 --> 00:30:01,806
这稍微有点歪

1034
00:30:01,806 --> 00:30:02,766
但或许这让大家

1035
00:30:02,766 --> 00:30:04,206
回想起了曾经跟朋友

1036
00:30:04,206 --> 00:30:05,116
一起玩街机的时候

1037
00:30:05,116 --> 00:30:06,016
你们都互相挤在一起

1038
00:30:06,016 --> 00:30:06,436
来玩游戏

1039
00:30:06,436 --> 00:30:08,716
你们可以从任意角度来

1040
00:30:08,716 --> 00:30:10,246
视图 你们可以从远处

1041
00:30:10,246 --> 00:30:14,346
来视图 它会向你们显示出

1042
00:30:14,346 --> 00:30:15,836
一些你们结合 Metal

1043
00:30:15,896 --> 00:30:17,556
使用 SpriteKid 能做的

1044
00:30:17,556 --> 00:30:18,386
一些东西

1045
00:30:18,656 --> 00:30:20,516
它让你们可以在 3D 中使用

1046
00:30:20,516 --> 00:30:21,676
然后你们可以随意处理

1047
00:30:21,676 --> 00:30:22,396
这个纹理

1048
00:30:29,046 --> 00:30:29,766
以上就是 SpriteKit 和 Metal

1049
00:30:29,856 --> 00:30:30,456
一起操作的内容

1050
00:30:31,516 --> 00:30:35,776
[掌声]

1051
00:30:36,276 --> 00:30:37,446
SKRenderer 让大家能够对

1052
00:30:37,446 --> 00:30:38,936
SpriteKit 进行前所未有的

1053
00:30:38,936 --> 00:30:39,366
操控

1054
00:30:39,816 --> 00:30:40,716
它让你们可以决定

1055
00:30:40,716 --> 00:30:41,956
具体什么时候更新和

1056
00:30:41,956 --> 00:30:43,386
渲染 并且通过直接

1057
00:30:43,386 --> 00:30:44,936
与 Metal 交互 你们可以把

1058
00:30:44,936 --> 00:30:46,116
渲染的 SpriteKit 内容用在任何

1059
00:30:46,566 --> 00:30:47,496
你们觉得合适的地方

1060
00:30:50,846 --> 00:30:52,066
今天大家已经看到了 SpriteKit

1061
00:30:52,066 --> 00:30:54,086
对 2D 和 3D 都适用

1062
00:30:54,896 --> 00:30:55,976
它也能够同诸如 SceneKit

1063
00:30:55,976 --> 00:30:57,216
和 Metal 这样的其它图形框架

1064
00:30:57,216 --> 00:30:58,436
一起使用

1065
00:30:58,436 --> 00:31:00,086
并且 SpriteKit 与 ARKit 紧密

1066
00:30:58,436 --> 00:31:00,086
并且 SpriteKit 与 ARKit 紧密

1067
00:31:00,086 --> 00:31:01,266
结合 因此创建

1068
00:31:01,266 --> 00:31:02,956
增强现实 app

1069
00:31:03,056 --> 00:31:04,226
变得极其简单

1070
00:31:04,726 --> 00:31:06,306
我们介绍了新的特征

1071
00:31:06,306 --> 00:31:07,586
给大家提供了前所未有的操控性

1072
00:31:07,586 --> 00:31:08,826
让大家可以在视图调试器

1073
00:31:08,826 --> 00:31:09,916
中来浏览 SpriteKit 内容

1074
00:31:09,916 --> 00:31:11,706
还让你们可以

1075
00:31:11,706 --> 00:31:13,386
直接控制何时及

1076
00:31:13,386 --> 00:31:14,646
以何种方式来结合新的

1077
00:31:14,646 --> 00:31:15,876
SKRenderer 进行 SpriteKit 的更新

1078
00:31:15,986 --> 00:31:16,656
和渲染

1079
00:31:17,206 --> 00:31:19,006
今天 我们展示了 SpriteKit

1080
00:31:19,006 --> 00:31:20,156
的全新面貌 我们

1081
00:31:20,156 --> 00:31:21,226
希望这能给大家带来一些

1082
00:31:21,426 --> 00:31:23,036
启发 去思索如何以

1083
00:31:23,036 --> 00:31:24,166
你们意想不到的方式

1084
00:31:24,166 --> 00:31:25,136
来进行使用

1085
00:31:26,776 --> 00:31:28,756
关于这场会议的更多信息及

1086
00:31:28,756 --> 00:31:29,916
视频 请访问

1087
00:31:30,006 --> 00:31:34,246
developer.apple.com/wwdc17/609 这个网站

1088
00:31:34,246 --> 00:31:36,886
也请关注其它相关的

1089
00:31:36,886 --> 00:31:37,736
会议

1090
00:31:38,106 --> 00:31:39,236
在今天的发布会上 我们仅

1091
00:31:39,236 --> 00:31:40,206
涉及到了 Metal 的小部分内容

1092
00:31:40,406 --> 00:31:41,866
如果你们想要了解更多

1093
00:31:41,866 --> 00:31:42,996
请关注 Metal 2 介绍这一

1094
00:31:42,996 --> 00:31:43,566
会议

1095
00:31:43,636 --> 00:31:45,586
我强烈建议大家观看

1096
00:31:45,656 --> 00:31:46,796
“ARKit 介绍”来了解

1097
00:31:46,796 --> 00:31:48,336
关于操作的详细

1098
00:31:48,336 --> 00:31:48,886
信息

1099
00:31:48,976 --> 00:31:50,776
如果我们对 SceneKit 的

1100
00:31:50,776 --> 00:31:52,346
快速讲解引起了大家的兴趣

1101
00:31:52,346 --> 00:31:53,136
你们可以看看今年的

1102
00:31:53,136 --> 00:31:53,816
主要会议

1103
00:31:54,906 --> 00:31:56,296
“用 Xcode 9 调试”这个专会议

1104
00:31:56,296 --> 00:31:57,986
上也有很多精彩的内容

1105
00:31:57,986 --> 00:32:00,266
比如在 SpriteKit 上用新的视图

1106
00:31:57,986 --> 00:32:00,266
比如在 SpriteKit 上用新的视图

1107
00:32:00,266 --> 00:32:01,346
调试器进行调试

1108
00:32:01,806 --> 00:32:03,076
比如非常强大的

1109
00:32:03,076 --> 00:32:04,386
无线调试 所以我建议大家

1110
00:32:04,386 --> 00:32:05,176
也去看看这场

1111
00:32:06,586 --> 00:32:07,756
感谢大家 希望大家愉快地度过

1112
00:32:07,756 --> 00:32:08,716
接下来的会议
