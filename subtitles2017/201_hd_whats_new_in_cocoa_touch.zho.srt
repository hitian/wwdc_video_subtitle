1
00:00:29,056 --> 00:00:30,276
&gt;&gt; 早上好 欢迎了解

2
00:00:30,276 --> 00:00:31,546
Cocoa Touch 新功能介绍

3
00:00:31,936 --> 00:00:33,476
我是 Eliza 

4
00:00:33,476 --> 00:00:34,826
等一下 Josh Shaffer 也会上台

5
00:00:35,136 --> 00:00:35,376
一起为大家讲解

6
00:00:35,806 --> 00:00:38,046
今天 我们准备

7
00:00:38,046 --> 00:00:39,446
给大家介绍一大批

8
00:00:39,446 --> 00:00:39,996
新的 API

9
00:00:41,046 --> 00:00:42,346
首先 我们想为大家介绍一些

10
00:00:42,346 --> 00:00:44,456
在 iPad 和 iPhone 上使用的

11
00:00:44,456 --> 00:00:46,306
全新的生产力 API

12
00:00:48,096 --> 00:00:50,726
然后 我们会向大家展示

13
00:00:50,726 --> 00:00:52,346
在这些设备上的用户界面上

14
00:00:52,346 --> 00:00:53,646
所做的改良

15
00:00:53,646 --> 00:00:55,066
我们还会讲解要如何

16
00:00:55,066 --> 00:00:56,156
把这些效果应用到

17
00:00:56,156 --> 00:00:56,786
你们的 App 上面

18
00:00:57,776 --> 00:00:59,156
最后 我们还要介绍

19
00:00:59,156 --> 00:01:00,986
针对 Cocoa Touch 上

20
00:00:59,156 --> 00:01:00,986
针对 Cocoa Touch 上

21
00:01:00,986 --> 00:01:03,176
已有的 API 的一系列

22
00:01:03,306 --> 00:01:04,646
新增与升级

23
00:01:05,325 --> 00:01:09,306
iOS 中最重要的

24
00:01:09,366 --> 00:01:12,976
生产力 API

25
00:01:12,976 --> 00:01:14,466
大家在主旨演讲中已经听过了

26
00:01:14,466 --> 00:01:15,176
那就是拖拽与放置

27
00:01:15,766 --> 00:01:17,506
这是一个非常强大的

28
00:01:17,506 --> 00:01:17,736
API

29
00:01:17,736 --> 00:01:19,746
下面这个视频

30
00:01:19,746 --> 00:01:24,566
就展示了它的一些功能

31
00:01:24,836 --> 00:01:26,756
我可以选择一个东西

32
00:01:26,756 --> 00:01:27,286
把它拖来拖去

33
00:01:27,286 --> 00:01:28,756
我可以通过轻轻点击来

34
00:01:28,756 --> 00:01:29,706
为拖拽添加目标

35
00:01:30,056 --> 00:01:31,466
在我进行拖拽动作的同时

36
00:01:31,466 --> 00:01:32,986
系统仍然保持互动

37
00:01:32,986 --> 00:01:34,826
我甚至可以

38
00:01:34,826 --> 00:01:35,986
在不同应用之间

39
00:01:35,986 --> 00:01:36,626
拖拽数据

40
00:01:37,216 --> 00:01:39,076
我们很期待大家

41
00:01:39,076 --> 00:01:41,256
能够在你们的 App 中

42
00:01:41,256 --> 00:01:41,976
使用这项功能

43
00:01:42,236 --> 00:01:44,546
本周还有至少

44
00:01:44,656 --> 00:01:46,536
4 次演讲

45
00:01:46,836 --> 00:01:48,126
为大家详细介绍这一功能

46
00:01:48,966 --> 00:01:50,226
现在 我要为大家

47
00:01:50,226 --> 00:01:51,946
做一个非常简短的介绍

48
00:01:51,946 --> 00:01:54,136
介绍这个 API 的一些

49
00:01:54,136 --> 00:01:56,196
关键功能

50
00:01:56,196 --> 00:01:57,676
首先 是在 App 中启用

51
00:01:57,676 --> 00:01:58,176
拖拽功能

52
00:01:58,726 --> 00:02:00,396
假如你有一个定制的 view

53
00:01:58,726 --> 00:02:00,396
假如你有一个定制的 view

54
00:02:00,396 --> 00:02:03,356
下面又有很多 sub-view

55
00:02:03,356 --> 00:02:04,926
比如像小图标一样的 view

56
00:02:04,926 --> 00:02:06,706
你想让它们变得可拖拽

57
00:02:07,766 --> 00:02:09,976
那么你就要建立一个

58
00:02:09,976 --> 00:02:11,696
UIDragInteraction

59
00:02:11,746 --> 00:02:13,386
这是 UI 交互下面的一个子类

60
00:02:13,776 --> 00:02:16,076
然后再把它附加到

61
00:02:16,076 --> 00:02:17,596
你希望能允许用户拖拽的

62
00:02:17,596 --> 00:02:18,036
View 上面

63
00:02:19,606 --> 00:02:22,456
现在 一个 UI 交互

64
00:02:22,456 --> 00:02:23,906
就像一个动作识别器

65
00:02:24,596 --> 00:02:26,326
建立一个 UI 交互 为它设定一个委托

66
00:02:26,326 --> 00:02:28,156
把它附加到一个 view 上

67
00:02:28,156 --> 00:02:29,736
剩下的事情就可以交给系统

68
00:02:29,736 --> 00:02:30,156
去完成了

69
00:02:30,726 --> 00:02:31,936
你的委托会被

70
00:02:32,156 --> 00:02:33,566
唤起以提供信息

71
00:02:34,616 --> 00:02:36,836
使用起来真的很简单

72
00:02:37,076 --> 00:02:40,596
我们可以生成一个

73
00:02:40,596 --> 00:02:43,056
拖拽交互目标

74
00:02:43,056 --> 00:02:44,696
让自己成为委托

75
00:02:44,696 --> 00:02:45,196
把它附加到这个 view 上

76
00:02:45,196 --> 00:02:46,596
我们还可以

77
00:02:46,886 --> 00:02:48,106
在其他可拖拽的 view 上

78
00:02:48,106 --> 00:02:48,796
重复同样的事

79
00:02:49,906 --> 00:02:50,806
现在

80
00:02:50,806 --> 00:02:52,886
UIDragInteractionDelegate

81
00:02:53,056 --> 00:02:55,216
协议给了你无数的

82
00:02:55,216 --> 00:02:57,196
机会去利用拖拽

83
00:02:57,236 --> 00:02:58,306
定制功能

84
00:02:58,716 --> 00:03:00,146
你一定不要忘了

85
00:02:58,716 --> 00:03:00,146
你一定不要忘了

86
00:03:00,236 --> 00:03:02,256
最重要的事

87
00:03:02,716 --> 00:03:03,776
要给被拖拽的目标

88
00:03:03,776 --> 00:03:04,156
提供数据

89
00:03:04,536 --> 00:03:05,386
除了这件事

90
00:03:05,386 --> 00:03:06,316
其他的全取决于你

91
00:03:06,316 --> 00:03:08,016
你可以直接使用系统默认设置

92
00:03:08,016 --> 00:03:09,966
或者你可以定制

93
00:03:09,966 --> 00:03:11,296
关于拖拽的一切

94
00:03:11,296 --> 00:03:11,586
方面

95
00:03:11,586 --> 00:03:13,066
比如抬升的动画

96
00:03:13,066 --> 00:03:16,036
比如预览 你还可以随着触控光标在

97
00:03:16,036 --> 00:03:17,806
屏幕上移动的时候得到回调

98
00:03:17,806 --> 00:03:19,586
并对其进行

99
00:03:19,586 --> 00:03:20,056
回应

100
00:03:20,586 --> 00:03:23,096
根据你的应用需求

101
00:03:23,096 --> 00:03:24,066
可以灵活调整

102
00:03:25,476 --> 00:03:27,036
显然 拖拽放置的

103
00:03:27,036 --> 00:03:28,586
另一个重要部分

104
00:03:28,586 --> 00:03:29,386
就是放置

105
00:03:29,776 --> 00:03:32,016
启动这个功能 你需要

106
00:03:32,016 --> 00:03:33,786
一个新型的 UI 交互

107
00:03:33,786 --> 00:03:35,666
也就是 UIDropInteraction

108
00:03:36,206 --> 00:03:39,346
你不要把这个交互附加到

109
00:03:39,346 --> 00:03:40,716
各个可拖拽的 view 上 而是要

110
00:03:40,716 --> 00:03:42,246
附加到 super view 上 也就是

111
00:03:42,486 --> 00:03:43,986
准备接受放置的

112
00:03:43,986 --> 00:03:44,466
容器上

113
00:03:46,936 --> 00:03:48,586
你需要再次设置一个委托

114
00:03:48,586 --> 00:03:50,626
同样地 这个委托

115
00:03:50,666 --> 00:03:53,516
也可以进行各种各样的

116
00:03:53,516 --> 00:03:54,896
定制

117
00:03:55,976 --> 00:03:57,596
你可以更新 UI

118
00:03:57,596 --> 00:03:58,886
在拖拽中  清理一些其他

119
00:03:58,886 --> 00:04:00,636
碍事的项目

120
00:03:58,886 --> 00:04:00,636
碍事的项目

121
00:04:00,946 --> 00:04:02,226
或者用视觉化方式显示

122
00:04:02,226 --> 00:04:03,966
放置的目的地

123
00:04:03,966 --> 00:04:05,246
或者显示 如果用户放置了

124
00:04:05,246 --> 00:04:06,276
会发生什么

125
00:04:06,506 --> 00:04:08,056
进行放置时

126
00:04:08,056 --> 00:04:10,006
你会收到数据

127
00:04:10,006 --> 00:04:11,436
然后作为回应 你可以

128
00:04:11,436 --> 00:04:11,936
更新你的模型

129
00:04:12,746 --> 00:04:13,956
然后 你可以定制

130
00:04:13,956 --> 00:04:15,046
这个动画的

131
00:04:15,046 --> 00:04:15,536
方方面面

132
00:04:15,536 --> 00:04:16,826
你可以定制预览

133
00:04:16,826 --> 00:04:18,315
放置过程中

134
00:04:18,315 --> 00:04:19,685
和放置动画本身

135
00:04:19,685 --> 00:04:20,516
真的很好用

136
00:04:21,786 --> 00:04:23,446
我们十分期待看到

137
00:04:23,446 --> 00:04:25,406
你们利用这个功能

138
00:04:25,406 --> 00:04:26,456
大显身手

139
00:04:26,656 --> 00:04:27,716
为了让启动过程

140
00:04:27,716 --> 00:04:29,376
更加简单 系统还为

141
00:04:29,376 --> 00:04:32,416
很多现有的类

142
00:04:32,416 --> 00:04:33,766
提供内置支持

143
00:04:33,766 --> 00:04:34,996
也许就有你正在用的

144
00:04:35,336 --> 00:04:36,556
因此 要把这个功能用在

145
00:04:36,586 --> 00:04:38,186
TableView CollectionView

146
00:04:38,186 --> 00:04:39,666
和各种 Text 和 Web view 上面

147
00:04:40,166 --> 00:04:41,606
其实需要你额外再去做的事

148
00:04:41,796 --> 00:04:42,736
就很少了

149
00:04:44,176 --> 00:04:45,486
这个系统上另一项

150
00:04:45,486 --> 00:04:46,736
实用的整合

151
00:04:46,736 --> 00:04:48,156
就是使用 UIPasteConfiguration.

152
00:04:48,736 --> 00:04:50,986
如果你的应用

153
00:04:51,266 --> 00:04:52,946
已经具有复制粘贴操作中的

154
00:04:52,946 --> 00:04:54,266
粘贴功能

155
00:04:54,546 --> 00:04:56,346
那么你就不需要

156
00:04:56,756 --> 00:04:58,506
再做额外工作

157
00:04:58,506 --> 00:05:00,526
去让同一个 view 变成

158
00:04:58,506 --> 00:05:00,526
去让同一个 view 变成

159
00:05:00,526 --> 00:05:00,786
放置的目标了

160
00:05:01,706 --> 00:05:05,456
这些就是关于拖拽放置

161
00:05:05,456 --> 00:05:06,016
的四场演讲

162
00:05:06,236 --> 00:05:07,276
第一场是

163
00:05:07,276 --> 00:05:08,286
介绍拖拽与放置

164
00:05:08,476 --> 00:05:09,776
就在这里 这场演讲完

165
00:05:09,816 --> 00:05:10,136
就开始

166
00:05:10,136 --> 00:05:11,256
因此 我们十分希望你们能留下

167
00:05:11,256 --> 00:05:11,786
看这场演讲

168
00:05:12,986 --> 00:05:14,486
明天的演讲是 熟练操作

169
00:05:14,486 --> 00:05:14,876
拖拽与放置

170
00:05:15,206 --> 00:05:16,256
然后 有一整场演讲

171
00:05:16,306 --> 00:05:18,096
用来介绍如何

172
00:05:18,096 --> 00:05:19,216
把拖拽放置应用到

173
00:05:19,216 --> 00:05:20,156
表格和集合 view 上

174
00:05:20,386 --> 00:05:22,076
还有一场重要演讲

175
00:05:22,146 --> 00:05:24,756
介绍用拖拽和放置

176
00:05:24,756 --> 00:05:26,846
操作数据的

177
00:05:26,846 --> 00:05:27,336
各种方式

178
00:05:27,576 --> 00:05:28,806
大家可以做的事情

179
00:05:28,806 --> 00:05:29,706
真的非常多

180
00:05:29,706 --> 00:05:30,196
非常好用

181
00:05:30,196 --> 00:05:31,026
我们希望你们也能去听听

182
00:05:31,066 --> 00:05:31,646
那些讲座

183
00:05:31,646 --> 00:05:33,386
好的

184
00:05:33,546 --> 00:05:35,306
我们对于 iPad 和 iPhone

185
00:05:35,346 --> 00:05:36,986
生产力的提高

186
00:05:36,986 --> 00:05:38,876
做的另一项工作

187
00:05:38,876 --> 00:05:39,366
就是文件管理

188
00:05:40,566 --> 00:05:42,096
下面我们就介绍这个很棒的

189
00:05:42,096 --> 00:05:44,086
View 控制功能 能够让

190
00:05:44,086 --> 00:05:46,006
用户在你们的 App 中

191
00:05:46,356 --> 00:05:47,726
浏览文件

192
00:05:47,726 --> 00:05:49,196
这不但能让他们

193
00:05:49,196 --> 00:05:51,206
浏览 App 文件夹里的

194
00:05:51,206 --> 00:05:52,786
本地文件

195
00:05:52,786 --> 00:05:54,346
还能够浏览存储在

196
00:05:54,346 --> 00:05:56,736
iCloud Drive 上的云文件

197
00:05:56,736 --> 00:05:58,256
还能够参与到第三方的

198
00:05:58,256 --> 00:05:59,446
云存储服务

199
00:06:00,156 --> 00:06:03,926
要做到这一点

200
00:06:03,926 --> 00:06:06,136
这个类叫做

201
00:06:06,136 --> 00:06:08,196
UIDocumentBrowserViewController

202
00:06:08,826 --> 00:06:11,206
你需要把它传入

203
00:06:11,206 --> 00:06:13,226
你的 App 能够处理的

204
00:06:13,226 --> 00:06:14,556
文件类型的数组中

205
00:06:14,916 --> 00:06:16,246
这样一来 用户就不能

206
00:06:16,246 --> 00:06:18,236
用这个 API 打开

207
00:06:18,396 --> 00:06:19,186
你的 App 所无法处理的

208
00:06:19,186 --> 00:06:19,366
文件了

209
00:06:20,006 --> 00:06:22,776
实际上 这个类也是

210
00:06:22,776 --> 00:06:23,506
可定制的

211
00:06:24,266 --> 00:06:25,696
其外表可以变化成

212
00:06:25,696 --> 00:06:26,566
不同形式

213
00:06:26,756 --> 00:06:27,936
你也可以设置

214
00:06:27,936 --> 00:06:30,076
让用户在浏览文件并选择时

215
00:06:30,076 --> 00:06:31,276
出现不同的

216
00:06:31,276 --> 00:06:31,896
呈现效果

217
00:06:32,436 --> 00:06:35,546
我刚刚说过 这个功能

218
00:06:35,546 --> 00:06:37,296
能让你浏览本地文件

219
00:06:37,426 --> 00:06:38,776
也可以浏览云存储中的

220
00:06:38,776 --> 00:06:38,926
文件

221
00:06:38,986 --> 00:06:40,756
这就带来了一个

222
00:06:40,806 --> 00:06:42,526
重要的警告

223
00:06:42,526 --> 00:06:43,686
需要牢记

224
00:06:43,996 --> 00:06:45,696
也就是你不再能够

225
00:06:45,836 --> 00:06:48,736
指望你的 App

226
00:06:48,736 --> 00:06:50,166
是在某个时间访问某个特定文件的

227
00:06:50,166 --> 00:06:51,866
唯一的 App 了

228
00:06:52,256 --> 00:06:53,766
因此 要协调文件入口

229
00:06:53,766 --> 00:06:55,686
和你正在使用这个类访问的

230
00:06:55,686 --> 00:06:57,066
文件 这就非常重要了

231
00:06:58,106 --> 00:07:00,146
要做到这一点

232
00:06:58,106 --> 00:07:00,146
要做到这一点

233
00:07:00,146 --> 00:07:02,716
你可以直接使用 NSFileCoordinator

234
00:07:02,916 --> 00:07:04,526
或者把 UI 文件向下分类

235
00:07:05,316 --> 00:07:06,586
这可以为你提供很多

236
00:07:06,586 --> 00:07:07,876
协调手段

237
00:07:09,246 --> 00:07:11,236
想了解关于这个类

238
00:07:11,406 --> 00:07:13,136
以及其他文件相关主题的更多信息

239
00:07:13,476 --> 00:07:15,576
请在周四参与这个

240
00:07:15,846 --> 00:07:16,286
讲座

241
00:07:17,186 --> 00:07:18,946
下面我想请

242
00:07:18,946 --> 00:07:21,156
Josh 上台 为我们讲讲

243
00:07:21,156 --> 00:07:22,536
iOS 11 中的一些 UI 的

244
00:07:22,836 --> 00:07:23,976
改良

245
00:07:24,516 --> 00:07:29,086
［掌声］

246
00:07:29,586 --> 00:07:29,936
&gt;&gt;好的

247
00:07:29,936 --> 00:07:30,576
谢谢 Eliza

248
00:07:31,266 --> 00:07:33,016
在 iOS 11 中

249
00:07:33,016 --> 00:07:34,016
对于生产力 API 的增强

250
00:07:34,016 --> 00:07:35,766
真的很了不起

251
00:07:35,846 --> 00:07:37,376
但我们也有很多对于

252
00:07:37,376 --> 00:07:39,056
UI 的增强

253
00:07:39,056 --> 00:07:40,246
我想在此介绍一部分

254
00:07:40,246 --> 00:07:41,806
首先就是最引人注目的

255
00:07:41,806 --> 00:07:43,076
也就是在导航栏的顶部

256
00:07:43,076 --> 00:07:45,166
那个新的巨大的

257
00:07:45,166 --> 00:07:46,116
标题

258
00:07:46,986 --> 00:07:48,146
这是最引人注目的变化

259
00:07:48,146 --> 00:07:49,256
你可能在开始使用 iOS 11 时

260
00:07:49,256 --> 00:07:50,446
立即就会注意到

261
00:07:50,446 --> 00:07:51,866
这一点

262
00:07:52,816 --> 00:07:53,886
包括这个新的巨大的

263
00:07:53,886 --> 00:07:55,176
显示在顶部的

264
00:07:55,176 --> 00:07:55,756
标题

265
00:07:55,916 --> 00:07:57,696
还有新的 集成的

266
00:07:57,696 --> 00:07:59,356
整合在搜索栏中的

267
00:07:59,356 --> 00:08:00,026
搜索功能

268
00:07:59,356 --> 00:08:00,026
搜索功能

269
00:08:00,946 --> 00:08:02,056
这样一来 你的内容在

270
00:08:02,056 --> 00:08:03,506
滚动到顶部时 

271
00:08:03,506 --> 00:08:04,576
你就能轻而一举地

272
00:08:04,576 --> 00:08:05,946
看到大标题

273
00:08:05,946 --> 00:08:07,216
知道自己在哪里

274
00:08:07,216 --> 00:08:08,926
也很容易进入

275
00:08:08,926 --> 00:08:09,206
搜索栏

276
00:08:09,206 --> 00:08:10,376
因为这个部分

277
00:08:10,376 --> 00:08:11,726
被拉低了一些

278
00:08:11,726 --> 00:08:13,956
以前它的位置

279
00:08:14,696 --> 00:08:14,836
要更高

280
00:08:15,006 --> 00:08:16,736
但是 为了留出足够空间

281
00:08:16,736 --> 00:08:18,016
显示你的实际内容

282
00:08:18,016 --> 00:08:20,006
当你开始向下滚动

283
00:08:20,046 --> 00:08:21,666
搜索栏和标题

284
00:08:21,666 --> 00:08:23,626
都会消失 下面的空间

285
00:08:23,666 --> 00:08:25,276
就会变大

286
00:08:25,276 --> 00:08:26,536
这样一来你就能看到

287
00:08:26,536 --> 00:08:27,046
尽可能多的内容

288
00:08:27,736 --> 00:08:29,206
首先

289
00:08:29,206 --> 00:08:30,186
搜索栏会消失

290
00:08:30,186 --> 00:08:31,826
然后大标题

291
00:08:31,866 --> 00:08:33,326
也会滚到上面去

292
00:08:33,326 --> 00:08:34,416
这时你所看到的

293
00:08:34,416 --> 00:08:35,416
就会和你在 iOS 11 之前的见到的

294
00:08:35,416 --> 00:08:37,216
非常相似

295
00:08:38,376 --> 00:08:40,285
现在 UINavigationController 可以

296
00:08:40,285 --> 00:08:42,176
在你当下的视图控制中

297
00:08:42,176 --> 00:08:43,736
自动找到

298
00:08:44,006 --> 00:08:45,336
滚动视图中

299
00:08:45,336 --> 00:08:46,046
最主要的内容

300
00:08:46,396 --> 00:08:48,146
并跟踪它偏移量

301
00:08:48,146 --> 00:08:49,236
确保它可以按你的意思

302
00:08:49,236 --> 00:08:49,506
来做这件事

303
00:08:50,316 --> 00:08:51,316
因此 在大多数情况下

304
00:08:51,316 --> 00:08:52,676
你需要为了实现这个功能

305
00:08:52,676 --> 00:08:53,946
而去做的事情

306
00:08:54,976 --> 00:08:56,786
其实并不多

307
00:08:56,996 --> 00:08:58,366
实现上述所有功能

308
00:08:58,366 --> 00:08:59,666
其实很简单

309
00:09:00,126 --> 00:09:01,396
在 UINavigationBar 中

310
00:09:01,396 --> 00:09:02,956
有一个新属性

311
00:09:02,956 --> 00:09:04,026
叫做 prefersLargeTitle

312
00:09:04,026 --> 00:09:05,556
如果在这项中选择 yes

313
00:09:06,186 --> 00:09:07,016
就会有大号

314
00:09:07,016 --> 00:09:08,246
标题的显示

315
00:09:08,246 --> 00:09:09,466
NavigationController

316
00:09:09,466 --> 00:09:10,786
就会自动展开追踪

317
00:09:10,786 --> 00:09:11,666
就像我们刚才说过的那样

318
00:09:11,666 --> 00:09:13,116
找到你的滚动视图

319
00:09:13,326 --> 00:09:14,616
追踪偏移量

320
00:09:14,616 --> 00:09:15,426
控制缩放

321
00:09:16,036 --> 00:09:18,606
接下来 第二件事就是

322
00:09:18,606 --> 00:09:20,256
UINavigationItem 中的新属性

323
00:09:20,776 --> 00:09:22,016
这会让你在导航层级的

324
00:09:22,016 --> 00:09:23,256
每一个层级中

325
00:09:23,256 --> 00:09:24,516
能够控制

326
00:09:24,516 --> 00:09:25,636
大标题的外观

327
00:09:26,216 --> 00:09:27,736
在你把视图控制器放在 Navstack 上时

328
00:09:27,786 --> 00:09:28,976
并不是每一个层级

329
00:09:28,976 --> 00:09:30,396
都需要显示

330
00:09:30,396 --> 00:09:31,106
大标题

331
00:09:31,536 --> 00:09:32,966
实际上 很多都不需要

332
00:09:32,966 --> 00:09:34,526
因此你可以使用这个导航属性

333
00:09:34,526 --> 00:09:36,176
控制每一个层级

334
00:09:36,176 --> 00:09:37,726
是否需要大标题

335
00:09:37,776 --> 00:09:39,796
还是需要以前那种

336
00:09:39,986 --> 00:09:41,246
传统的更小的标题

337
00:09:41,306 --> 00:09:43,526
在什么时候出现哪一种

338
00:09:43,716 --> 00:09:44,956
使用 searchController

339
00:09:44,956 --> 00:09:46,316
外观也非常非常容易

340
00:09:46,646 --> 00:09:47,556
你可以使用这个新的

341
00:09:47,556 --> 00:09:49,056
searchController 属性

342
00:09:49,326 --> 00:09:51,166
来获得新的外观

343
00:09:51,166 --> 00:09:52,326
以及所有新的行为

344
00:09:52,736 --> 00:09:53,976
在过去

345
00:09:53,976 --> 00:09:54,786
你可能需要把导航栏

346
00:09:54,786 --> 00:09:56,716
作为内容的一部分

347
00:09:56,716 --> 00:09:57,796
也许你需要

348
00:09:57,796 --> 00:09:59,496
把它做成你的

349
00:09:59,496 --> 00:10:00,236
UITableView 的

350
00:09:59,496 --> 00:10:00,236
UITableView 的

351
00:10:00,236 --> 00:10:00,976
顶部视图

352
00:10:01,576 --> 00:10:02,596
现在不需要了

353
00:10:02,736 --> 00:10:03,786
因为新的外观看起来

354
00:10:03,786 --> 00:10:05,476
就好像是导航栏的一部分

355
00:10:05,476 --> 00:10:06,616
你可以使用这个属性

356
00:10:06,756 --> 00:10:07,426
就能够获得所有的

357
00:10:07,426 --> 00:10:08,056
行为了

358
00:10:09,376 --> 00:10:12,356
一般来说

359
00:10:12,356 --> 00:10:13,856
只有在导航层级的

360
00:10:13,856 --> 00:10:15,136
第一层才会用到

361
00:10:15,136 --> 00:10:16,196
大标题

362
00:10:16,646 --> 00:10:18,156
在设计 App 指南中

363
00:10:18,156 --> 00:10:20,386
一般都会这样讲

364
00:10:20,426 --> 00:10:21,426
这样使用大标题

365
00:10:22,196 --> 00:10:23,866
然后 推向第二层视图

366
00:10:23,866 --> 00:10:25,806
并继续向下导航

367
00:10:25,806 --> 00:10:27,546
你往往会使用

368
00:10:27,546 --> 00:10:28,826
更小的字体

369
00:10:29,636 --> 00:10:30,736
这是设计的良好开端

370
00:10:30,736 --> 00:10:32,216
但正如我们之前提到的

371
00:10:32,216 --> 00:10:33,726
一切全凭你通过 API 控制

372
00:10:33,726 --> 00:10:35,626
因此你可以

373
00:10:35,626 --> 00:10:36,756
为你的 App 选择你认为合适的

374
00:10:36,886 --> 00:10:36,966
显示方式

375
00:10:36,966 --> 00:10:38,396
实际上 如果你看一看

376
00:10:38,396 --> 00:10:39,596
我们的设计 你会发现

377
00:10:39,596 --> 00:10:41,006
比如电子邮件

378
00:10:41,006 --> 00:10:42,366
就在前两个层级

379
00:10:42,366 --> 00:10:42,746
使用了大标题

380
00:10:43,306 --> 00:10:45,896
你可能还注意到了

381
00:10:45,896 --> 00:10:47,086
刷新控制现在

382
00:10:47,116 --> 00:10:48,896
也整合到了这个新的 单一的

383
00:10:48,896 --> 00:10:49,566
大标题下面

384
00:10:50,166 --> 00:10:51,546
如果你在 App 中使用

385
00:10:51,546 --> 00:10:52,996
UI 刷新控制

386
00:10:52,996 --> 00:10:54,506
以达到下拉刷新效果

387
00:10:54,506 --> 00:10:55,226
这一点现在就会

388
00:10:55,226 --> 00:10:55,946
自动进行了

389
00:10:56,016 --> 00:10:57,066
因此你也就不需要

390
00:10:57,066 --> 00:10:58,226
付出额外劳动

391
00:10:58,286 --> 00:11:02,066
去做导航栏的视觉整合工作了

392
00:10:58,286 --> 00:11:02,066
去做导航栏的视觉整合工作了

393
00:11:02,686 --> 00:11:03,816
关于这些大标题

394
00:11:03,816 --> 00:11:05,246
和搜索栏 重要的一点是

395
00:11:05,246 --> 00:11:06,766
他们实际上是

396
00:11:06,846 --> 00:11:08,526
导航栏的一部分

397
00:11:08,526 --> 00:11:09,766
而不是内容视图的一部分

398
00:11:11,056 --> 00:11:12,536
这样一来 导航栏本身

399
00:11:12,536 --> 00:11:13,886
就会比之前

400
00:11:13,946 --> 00:11:15,126
你所习惯的

401
00:11:15,126 --> 00:11:16,586
iOS 版本

402
00:11:16,586 --> 00:11:17,536
要高一些

403
00:11:18,006 --> 00:11:19,276
实际上 现在它的高度在

404
00:11:19,356 --> 00:11:20,926
内容滚动时会变化

405
00:11:22,666 --> 00:11:23,906
如你所见

406
00:11:23,906 --> 00:11:24,646
大标题出现的时候

407
00:11:24,646 --> 00:11:25,046
它就大一点

408
00:11:25,136 --> 00:11:27,406
而当用户向上滚动

409
00:11:27,576 --> 00:11:28,756
大标题消失后

410
00:11:28,786 --> 00:11:30,036
导航栏的高度就会变得

411
00:11:30,036 --> 00:11:32,126
更像以前

412
00:11:32,126 --> 00:11:33,096
大家所习惯的那样

413
00:11:33,986 --> 00:11:34,866
你可能会觉得

414
00:11:34,866 --> 00:11:35,916
担心这一功能

415
00:11:35,916 --> 00:11:36,926
会很复杂

416
00:11:37,426 --> 00:11:38,486
但我们的团队

417
00:11:38,486 --> 00:11:39,726
十分努力地工作

418
00:11:39,726 --> 00:11:41,356
确保这一点尽可能地简单

419
00:11:41,356 --> 00:11:42,376
在你的 App 中得以实现

420
00:11:42,536 --> 00:11:43,616
在大多数情况下

421
00:11:43,656 --> 00:11:44,406
这一点实际上是

422
00:11:44,406 --> 00:11:45,826
自动替你完成的

423
00:11:45,956 --> 00:11:46,866
无需付出更多工作

424
00:11:47,346 --> 00:11:48,716
UINavigationController

425
00:11:48,716 --> 00:11:49,586
已经替你完成了

426
00:11:50,496 --> 00:11:51,896
不过 为了让这一切更简单

427
00:11:51,896 --> 00:11:54,786
为了把握导航栏高度的变化

428
00:11:54,896 --> 00:11:56,556
在 UIView 中还有一个新的属性

429
00:11:56,596 --> 00:11:58,166
这个新属性也非常好用

430
00:11:58,166 --> 00:11:59,736
并且可以应用在

431
00:11:59,736 --> 00:12:00,976
你的 App 中的

432
00:11:59,736 --> 00:12:00,976
你的 App 中的

433
00:12:00,976 --> 00:12:01,496
各个地方

434
00:12:01,496 --> 00:12:03,566
它就是全新的 safeAreaInset

435
00:12:03,606 --> 00:12:03,986
属性

436
00:12:05,256 --> 00:12:07,236
safeAreaInset 能够让你知道

437
00:12:07,236 --> 00:12:09,176
内容的区域是否

438
00:12:09,256 --> 00:12:10,506
会被导航栏

439
00:12:10,506 --> 00:12:11,776
遮挡

440
00:12:11,866 --> 00:12:14,286
这样一来 你就可以放心地

441
00:12:14,326 --> 00:12:15,766
把内容放在

442
00:12:15,766 --> 00:12:17,246
能够显示出来

443
00:12:17,246 --> 00:12:19,216
而且不会被其他的系统 UI

444
00:12:19,216 --> 00:12:21,146
比如在顶部和底部的导航栏

445
00:12:21,146 --> 00:12:21,986
所阻挡了

446
00:12:22,816 --> 00:12:23,746
知道了这一点

447
00:12:23,746 --> 00:12:25,016
你就能够轻松完成布局了

448
00:12:25,316 --> 00:12:26,766
用户上下滚动时

449
00:12:26,766 --> 00:12:28,236
导航栏高度会变化

450
00:12:28,236 --> 00:12:30,136
safeAreaInset 也会相应变化

451
00:12:30,136 --> 00:12:31,586
你就能轻松避开

452
00:12:31,586 --> 00:12:31,876
导航栏了

453
00:12:34,456 --> 00:12:35,996
而如果你的视图与

454
00:12:35,996 --> 00:12:37,566
底部的工具栏

455
00:12:37,606 --> 00:12:38,986
或是点击栏发生重合

456
00:12:38,986 --> 00:12:40,206
safeAreaInset 就会在底部

457
00:12:40,206 --> 00:12:41,666
派上用场了

458
00:12:41,856 --> 00:12:42,946
你也就能确认

459
00:12:42,946 --> 00:12:44,496
所有的区域

460
00:12:44,496 --> 00:12:45,516
无论顶部还是底部

461
00:12:45,516 --> 00:12:47,046
然后放心地放置内容了

462
00:12:48,696 --> 00:12:50,206
safeAreaInsets 的使用

463
00:12:50,206 --> 00:12:51,276
也十分容易

464
00:12:51,656 --> 00:12:53,116
在 UIView 中

465
00:12:53,116 --> 00:12:54,506
有三个新属性

466
00:12:54,506 --> 00:12:54,946
让使用它更容易

467
00:12:55,496 --> 00:12:56,026
第一个是

468
00:12:56,026 --> 00:12:57,096
safeAreaLayoutGuide

469
00:12:57,476 --> 00:12:58,826
有了 safeAreaLayoutGuide,

470
00:12:58,826 --> 00:13:00,136
你就可以轻易把安全区域

471
00:12:58,826 --> 00:13:00,136
你就可以轻易把安全区域

472
00:13:00,136 --> 00:13:01,356
与你的自动分层代码

473
00:13:01,356 --> 00:13:01,966
整合起来

474
00:13:01,966 --> 00:13:03,366
你可以对这个 layout guide

475
00:13:03,416 --> 00:13:04,826
进行限制

476
00:13:04,866 --> 00:13:06,216
以便把你的内容

477
00:13:06,216 --> 00:13:07,176
放进安全区

478
00:13:08,646 --> 00:13:09,606
如果你选择手动调整布局

479
00:13:09,646 --> 00:13:11,066
那么你需要读取

480
00:13:11,066 --> 00:13:12,136
某个时间点的

481
00:13:12,136 --> 00:13:13,386
当下的安全区的数值

482
00:13:14,546 --> 00:13:15,386
你可以使用

483
00:13:15,386 --> 00:13:16,676
safeAreaInsets 属性来完成这一点

484
00:13:17,266 --> 00:13:18,156
这是和你的视图的空间

485
00:13:18,156 --> 00:13:19,666
相协调的 因此

486
00:13:19,666 --> 00:13:21,006
很容易就能把内容

487
00:13:21,006 --> 00:13:22,146
精确地放置在你想要的

488
00:13:22,146 --> 00:13:22,346
地方

489
00:13:22,346 --> 00:13:23,796
当然 如果你在用手动方式

490
00:13:23,796 --> 00:13:25,216
调整布局 那么你还需要知道

491
00:13:25,216 --> 00:13:26,306
什么时候会产生变化

492
00:13:26,306 --> 00:13:27,586
因此 你可以覆盖

493
00:13:27,586 --> 00:13:29,596
safeAreaInsetsDidChange 属性

494
00:13:29,876 --> 00:13:31,266
发现什么时候发生了变化

495
00:13:31,266 --> 00:13:32,686
并调整布局

496
00:13:33,976 --> 00:13:35,836
现在很多事情

497
00:13:35,836 --> 00:13:36,966
因为整合到了

498
00:13:36,966 --> 00:13:38,266
UIKit 里面

499
00:13:38,266 --> 00:13:39,496
可以自动为你实现

500
00:13:39,496 --> 00:13:40,396
之前实现起来会

501
00:13:40,396 --> 00:13:40,966
更困难的事

502
00:13:41,616 --> 00:13:43,206
举例来说 UIScrollView

503
00:13:43,206 --> 00:13:44,386
可以自动涵盖

504
00:13:44,386 --> 00:13:46,196
safeAreaInsets 让它成为在

505
00:13:46,196 --> 00:13:47,916
视图顶部和底部

506
00:13:47,916 --> 00:13:48,866
可滚动的填充

507
00:13:49,266 --> 00:13:50,236
就算他们与导航栏发生负重叠

508
00:13:50,236 --> 00:13:51,886
你也可以确信

509
00:13:51,886 --> 00:13:53,086
你的内容总是会

510
00:13:53,086 --> 00:13:54,356
被滚动到视图里面

511
00:13:55,096 --> 00:13:56,336
在之前的版本中

512
00:13:56,336 --> 00:13:57,856
UINavigationController 曾经试图

513
00:13:57,856 --> 00:13:58,716
代替开发者

514
00:13:58,716 --> 00:14:00,126
以计算导航栏重叠的方式

515
00:13:58,716 --> 00:14:00,126
以计算导航栏重叠的方式

516
00:14:00,126 --> 00:14:01,106
完成这些任务 

517
00:14:01,106 --> 00:14:02,666
然后 

518
00:14:02,786 --> 00:14:04,266
为 UIScrollView 中的

519
00:14:04,266 --> 00:14:05,026
contentInset 属性设定数值

520
00:14:05,686 --> 00:14:07,146
你也许注意到了

521
00:14:07,146 --> 00:14:08,116
如果你想要为

522
00:14:08,116 --> 00:14:09,336
UIScrollView

523
00:14:09,336 --> 00:14:10,846
设定你自己的 contentInset 数值

524
00:14:10,846 --> 00:14:11,446
结果却与 NavigationController

525
00:14:11,446 --> 00:14:12,906
发生了矛盾

526
00:14:12,906 --> 00:14:14,206
因为不能决定在某一既定时间

527
00:14:14,206 --> 00:14:14,786
谁拥有当前的数值

528
00:14:15,616 --> 00:14:17,236
在 iOS 11 中

529
00:14:17,236 --> 00:14:18,436
这个矛盾消失了 

530
00:14:18,436 --> 00:14:19,976
因为 UINavigationController

531
00:14:20,076 --> 00:14:21,286
不再必须设定 contentInset

532
00:14:21,286 --> 00:14:21,686
属性了

533
00:14:22,306 --> 00:14:23,716
ScrollView 可以自己设定了

534
00:14:23,716 --> 00:14:24,706
只需看一下

535
00:14:24,706 --> 00:14:26,396
safeAreaInsets

536
00:14:26,396 --> 00:14:28,226
把 contentInset 的真正数值

537
00:14:28,226 --> 00:14:29,516
为你所有 

538
00:14:29,516 --> 00:14:30,346
取决于你的 App 的需要

539
00:14:31,516 --> 00:14:37,836
[掌声]

540
00:14:38,336 --> 00:14:40,006
UIScrollView 会尽力去

541
00:14:40,006 --> 00:14:41,426
自动完成正确的操作

542
00:14:41,426 --> 00:14:42,626
尽可能地去完成

543
00:14:43,026 --> 00:14:44,456
但当然 这并不总是可能的

544
00:14:44,456 --> 00:14:46,016
不总是能百分之百地

545
00:14:46,016 --> 00:14:46,476
完成任务

546
00:14:46,476 --> 00:14:47,616
我们知道 有一些 App

547
00:14:47,616 --> 00:14:48,366
有不同的需求

548
00:14:49,096 --> 00:14:50,306
因此 为了保证

549
00:14:50,306 --> 00:14:51,316
你总能获得正确的

550
00:14:51,316 --> 00:14:52,976
行为 我们设计了一个

551
00:14:52,976 --> 00:14:54,066
UIScrollView 上的新属性

552
00:14:54,126 --> 00:14:56,316
让你能完全掌控 ScrollView

553
00:14:56,316 --> 00:14:57,856
对 safeAreaInsets 的解读

554
00:14:59,426 --> 00:15:00,446
有了这个 你就能决定

555
00:14:59,426 --> 00:15:00,446
有了这个 你就能决定

556
00:15:00,446 --> 00:15:01,606
它是否应该自动应用插入

557
00:15:01,606 --> 00:15:03,536
或者完全地把它们

558
00:15:03,536 --> 00:15:04,206
忽视掉

559
00:15:04,496 --> 00:15:05,296
这样一来 你就可以

560
00:15:05,296 --> 00:15:06,326
随心所欲地处理你的 App

561
00:15:06,326 --> 00:15:07,426
即便在自动行为

562
00:15:07,426 --> 00:15:08,986
不是你想要的情况下

563
00:15:08,986 --> 00:15:09,496
也可以这样了

564
00:15:10,276 --> 00:15:11,296
如果你想知道

565
00:15:11,296 --> 00:15:13,316
有关 ScrollView 的

566
00:15:13,316 --> 00:15:14,096
具体情况

567
00:15:14,096 --> 00:15:16,656
你可以利用一个

568
00:15:16,656 --> 00:15:18,156
新的属性 它能够

569
00:15:18,156 --> 00:15:20,086
根据 safeAreaInsets

570
00:15:20,086 --> 00:15:21,686
计算出的数值

571
00:15:22,006 --> 00:15:23,726
还有你自己使用

572
00:15:23,726 --> 00:15:25,976
AdjustedContentInset 属性设置的

573
00:15:25,976 --> 00:15:27,046
contentInset 的数量

574
00:15:27,476 --> 00:15:29,146
你可以看到

575
00:15:29,146 --> 00:15:30,446
ScrollView 认为自己需要

576
00:15:30,446 --> 00:15:32,066
多少空间

577
00:15:34,676 --> 00:15:34,846
来进行可滚动的填充

578
00:15:35,006 --> 00:15:36,136
目前为止 我们一直在讲

579
00:15:36,136 --> 00:15:36,666
导航栏

580
00:15:36,666 --> 00:15:37,886
但对于 UI 其他部分

581
00:15:37,886 --> 00:15:39,036
也有一些改良

582
00:15:41,186 --> 00:15:42,396
你会发现 系统各处的

583
00:15:42,396 --> 00:15:43,976
UITalbeView 现在都有了一个

584
00:15:43,976 --> 00:15:45,676
新的 统一的轻扫删除

585
00:15:45,676 --> 00:15:47,566
操作 这和你习惯的

586
00:15:47,566 --> 00:15:48,476
Mail App 中的操作

587
00:15:48,476 --> 00:15:49,416
是一模一样的

588
00:15:50,666 --> 00:15:53,086
包括支持多重动作

589
00:15:53,166 --> 00:15:55,236
向左和向右轻扫

590
00:15:55,236 --> 00:15:57,366
也包括默认的

591
00:15:57,366 --> 00:15:58,796
单一动作

592
00:15:58,796 --> 00:16:00,486
与整个 TableView

593
00:15:58,796 --> 00:16:00,486
与整个 TableView

594
00:16:00,486 --> 00:16:01,676
中的全指令

595
00:16:02,386 --> 00:16:03,896
要把它应用在你的 App 中

596
00:16:03,896 --> 00:16:04,606
也很简单

597
00:16:05,356 --> 00:16:06,406
利用新的

598
00:16:06,406 --> 00:16:08,616
UIContextualAction 类

599
00:16:08,616 --> 00:16:09,856
你可以指定出

600
00:16:09,856 --> 00:16:11,786
你想要在 TableView 中

601
00:16:11,826 --> 00:16:13,126
展示的动作

602
00:16:13,806 --> 00:16:14,946
只需要提供你想要它们

603
00:16:14,946 --> 00:16:15,896
出现的姿态

604
00:16:16,266 --> 00:16:17,636
和动作的名称

605
00:16:17,636 --> 00:16:19,176
以及适时激活它们的

606
00:16:19,176 --> 00:16:19,686
block 就可以了

607
00:16:19,686 --> 00:16:21,436
然后 利用新的

608
00:16:21,436 --> 00:16:22,936
UISwipeActionConfiguration

609
00:16:22,936 --> 00:16:24,406
类你可以把这些动作

610
00:16:24,696 --> 00:16:26,086
集合起来

611
00:16:26,086 --> 00:16:28,466
在每一行的左侧

612
00:16:28,466 --> 00:16:29,826
或者右侧显示出来

613
00:16:30,516 --> 00:16:31,766
你还可以指定

614
00:16:31,766 --> 00:16:32,646
是否要在整行中

615
00:16:32,646 --> 00:16:34,016
出现全指令时

616
00:16:34,016 --> 00:16:35,726
激活第一个

617
00:16:35,726 --> 00:16:36,316
动作

618
00:16:36,876 --> 00:16:38,786
是的 这很酷

619
00:16:39,116 --> 00:16:41,116
[掌声]

620
00:16:41,216 --> 00:16:42,496
现在 我们可以在整个系统中

621
00:16:42,496 --> 00:16:43,146
用上这些

622
00:16:43,146 --> 00:16:44,506
你会在更多的地方

623
00:16:44,506 --> 00:16:45,496
发现更多的动作指令了

624
00:16:45,866 --> 00:16:47,006
不过不要忘了

625
00:16:47,006 --> 00:16:48,296
使用它的时候

626
00:16:48,386 --> 00:16:49,926
你放在轻扫手势后面的

627
00:16:49,926 --> 00:16:51,526
动作会比较

628
00:16:51,526 --> 00:16:52,906
难以发现

629
00:16:52,906 --> 00:16:53,776
这是相对于那些在你的 App 中

630
00:16:53,826 --> 00:16:55,406
视觉效果突出的动作来说的

631
00:16:55,796 --> 00:16:56,836
所以 你当然可以使用这个功能

632
00:16:56,836 --> 00:16:58,506
锦上添花 但不要把它

633
00:16:58,506 --> 00:17:00,066
当作行使某个动作的

634
00:16:58,506 --> 00:17:00,066
当作行使某个动作的

635
00:17:00,066 --> 00:17:00,906
唯一的方式

636
00:17:02,156 --> 00:17:03,686
在那之外 我们还

637
00:17:03,686 --> 00:17:05,006
给予你在 UITableView 里

638
00:17:05,076 --> 00:17:06,846
放置分割线

639
00:17:06,846 --> 00:17:07,516
的更多控制权

640
00:17:07,996 --> 00:17:09,665
UITalbeView 中

641
00:17:09,665 --> 00:17:10,606
有一个新属性 让你能够

642
00:17:10,606 --> 00:17:12,316
掌控你在 TableView 中

643
00:17:12,316 --> 00:17:13,596
设置的 separatorInsets

644
00:17:13,596 --> 00:17:14,106
如何被解读

645
00:17:14,546 --> 00:17:15,646
你可以把它们

646
00:17:15,806 --> 00:17:17,576
定义成绝对值

647
00:17:17,576 --> 00:17:18,906
这样一来 它们就与单元格边缘

648
00:17:18,906 --> 00:17:19,326
相对

649
00:17:19,705 --> 00:17:21,016
你也可以把它们

650
00:17:21,016 --> 00:17:22,965
定义成差值

651
00:17:22,965 --> 00:17:24,046
它们就会分支出来

652
00:17:24,046 --> 00:17:24,986
如果你没有明确指定

653
00:17:24,986 --> 00:17:26,316
TableView 就会把 separatorInsets

654
00:17:26,316 --> 00:17:27,226
放置在那些地方 

655
00:17:27,726 --> 00:17:29,026
这会让你很容易地

656
00:17:29,026 --> 00:17:30,186
就能确定 分割线

657
00:17:30,186 --> 00:17:31,486
就在你希望的位置

658
00:17:31,486 --> 00:17:31,746
终止

659
00:17:31,746 --> 00:17:32,946
无论你使用什么样的设备

660
00:17:32,946 --> 00:17:34,916
或者你正在运行的

661
00:17:34,916 --> 00:17:35,686
类的大小

662
00:17:35,686 --> 00:17:35,976
都无所谓

663
00:17:36,516 --> 00:17:41,136
[掌声]

664
00:17:41,636 --> 00:17:43,276
有很多的新的

665
00:17:43,276 --> 00:17:44,046
UI 的改良

666
00:17:44,416 --> 00:17:45,756
之后会有一整场演讲

667
00:17:45,756 --> 00:17:47,096
详细阐述这些

668
00:17:47,096 --> 00:17:47,396
以及更多

669
00:17:48,786 --> 00:17:50,266
那就是为 iOS 11

670
00:17:50,396 --> 00:17:51,416
升级你的 App

671
00:17:51,606 --> 00:17:52,386
因此 大家一定要

672
00:17:52,386 --> 00:17:52,726
去听那场演讲

673
00:17:52,726 --> 00:17:54,696
此外 为了给大家讲解

674
00:17:54,696 --> 00:17:56,096
一部分升级

675
00:17:56,096 --> 00:17:57,716
背后的想法

676
00:17:57,716 --> 00:17:58,906
以及建议大家如何把它们

677
00:17:58,906 --> 00:18:00,766
整合到你们的 App 中

678
00:17:58,906 --> 00:18:00,766
整合到你们的 App 中

679
00:18:00,806 --> 00:18:02,116
请一定去听设计演讲

680
00:18:02,406 --> 00:18:04,906
Design Studio Shorts 2

681
00:18:04,906 --> 00:18:05,666
就在本周晚些时候进行

682
00:18:06,776 --> 00:18:08,186
现在 我要把舞台

683
00:18:08,186 --> 00:18:09,336
交还给 Eliza 请她告诉大家

684
00:18:09,336 --> 00:18:10,646
更多的 Cocoa Touch

685
00:18:10,646 --> 00:18:11,556
API 增强方面的信息

686
00:18:11,786 --> 00:18:11,976
谢谢

687
00:18:12,516 --> 00:18:16,646
[掌声]

688
00:18:17,146 --> 00:18:17,516
好的

689
00:18:17,516 --> 00:18:18,856
我想先讲一下

690
00:18:18,856 --> 00:18:21,216
Swift 4 和 Foundation 中的

691
00:18:21,216 --> 00:18:21,776
新 API

692
00:18:22,466 --> 00:18:23,696
有很多很多

693
00:18:23,696 --> 00:18:25,316
非常令人振奋的东西被添加到

694
00:18:25,316 --> 00:18:25,846
Swift 4 上

695
00:18:26,146 --> 00:18:27,336
我在此只能

696
00:18:27,336 --> 00:18:28,046
讲两个

697
00:18:28,456 --> 00:18:32,416
首先是把 Swift

698
00:18:32,416 --> 00:18:32,926
的原生类型归档

699
00:18:33,456 --> 00:18:35,626
如果你打算使用

700
00:18:35,766 --> 00:18:36,926
Swift 4 的原生类型

701
00:18:36,926 --> 00:18:38,886
比如列举和结构

702
00:18:38,886 --> 00:18:40,736
使用需要参与的代码

703
00:18:40,736 --> 00:18:42,336
比如 NSCoding 

704
00:18:42,656 --> 00:18:43,506
你会发现

705
00:18:43,506 --> 00:18:44,556
以前这是比较

706
00:18:44,556 --> 00:18:47,186
难以实现的

707
00:18:47,526 --> 00:18:50,396
Swift 4 用一项新的

708
00:18:50,396 --> 00:18:51,586
可编码的协议

709
00:18:51,646 --> 00:18:53,056
解决了这个问题

710
00:18:53,956 --> 00:18:56,176
只要你的列举中的

711
00:18:56,176 --> 00:18:57,646
下层类型具有结构

712
00:18:57,646 --> 00:18:59,276
而且是可编码的

713
00:18:59,736 --> 00:19:01,286
那么你只需

714
00:18:59,736 --> 00:19:01,286
那么你只需

715
00:19:01,286 --> 00:19:02,896
对协议声明一致

716
00:19:02,896 --> 00:19:03,396
就可以了

717
00:19:03,686 --> 00:19:05,066
其余的交给 Swift

718
00:19:05,066 --> 00:19:05,236
就行了

719
00:19:05,476 --> 00:19:07,746
这就让这些原生

720
00:19:07,746 --> 00:19:09,866
类型可以很容易地加入

721
00:19:10,166 --> 00:19:10,636
NSCoding

722
00:19:10,966 --> 00:19:12,376
Foundation 同样也添加了

723
00:19:12,436 --> 00:19:14,636
对于 JSON 归档和

724
00:19:14,706 --> 00:19:16,506
属性列表的支持

725
00:19:18,756 --> 00:19:20,586
对于 Swift 4 的另一项

726
00:19:20,636 --> 00:19:23,686
令人欣喜的改版是新的 KeyPath 类型

727
00:19:23,826 --> 00:19:25,426
和一个新的 literal syntax

728
00:19:25,426 --> 00:19:26,536
以及能够对其做出反应的

729
00:19:26,536 --> 00:19:27,266
getter 和 setter

730
00:19:27,936 --> 00:19:29,696
在过去 你只能在代码中

731
00:19:29,786 --> 00:19:31,966
硬编码一个 String

732
00:19:32,036 --> 00:19:33,876
来指出 KeyPaths

733
00:19:33,876 --> 00:19:35,596
这样做的结果就是

734
00:19:35,596 --> 00:19:36,646
如果你打错了一个字母 在编译中

735
00:19:36,646 --> 00:19:37,476
就找不到它了

736
00:19:38,516 --> 00:19:39,776
现在 有了新的

737
00:19:39,776 --> 00:19:42,516
literal syntax 这个

738
00:19:42,516 --> 00:19:44,146
能够让你建立一个 KeyPath

739
00:19:44,146 --> 00:19:45,286
这是一个强类型对象

740
00:19:45,716 --> 00:19:47,436
那么 假设我有一个 presenter 对象

741
00:19:47,436 --> 00:19:49,636
这个对象有一些属性

742
00:19:49,636 --> 00:19:50,746
一个 copresenter

743
00:19:50,746 --> 00:19:51,966
也就是另一个 presenter

744
00:19:51,966 --> 00:19:53,506
和一个名字

745
00:19:53,586 --> 00:19:56,166
我可以建立一个 KeyPath 对象

746
00:19:56,586 --> 00:19:58,186
来代表我的 presenter 的

747
00:19:58,186 --> 00:19:58,626
名字

748
00:19:59,246 --> 00:20:00,806
然后 我可以用这个新的 

749
00:19:59,246 --> 00:20:00,806
然后 我可以用这个新的 

750
00:20:00,806 --> 00:20:02,486
方括号 getter 记号

751
00:20:02,786 --> 00:20:04,356
进入我的一个 presenter

752
00:20:04,356 --> 00:20:04,976
对象的属性

753
00:20:05,046 --> 00:20:07,306
在这个例子中

754
00:20:07,306 --> 00:20:09,066
进入一个代表我的对象

755
00:20:09,236 --> 00:20:10,886
会返回 Josh 这个 String

756
00:20:12,156 --> 00:20:14,326
你还可以放弃

757
00:20:14,326 --> 00:20:15,536
制作 KeyPath 对象

758
00:20:15,666 --> 00:20:17,206
作为独立的步骤

759
00:20:17,206 --> 00:20:18,266
而只在 getter 中使用 literal syntax

760
00:20:18,266 --> 00:20:20,456
并利用 Swift 的

761
00:20:20,456 --> 00:20:22,346
类型推断 放弃类型

762
00:20:22,346 --> 00:20:23,636
如果你那样做的话

763
00:20:25,196 --> 00:20:26,166
这是非常酷的

764
00:20:26,566 --> 00:20:28,796
至于 Foundation 则更进了一步

765
00:20:28,796 --> 00:20:32,086
把通过这些 KeyPath

766
00:20:32,156 --> 00:20:35,166
使用 KVO 的方式

767
00:20:35,216 --> 00:20:37,066
做了一个更新

768
00:20:37,106 --> 00:20:38,226
这张图展示的是

769
00:20:38,226 --> 00:20:39,736
在此之前你为了

770
00:20:39,736 --> 00:20:41,606
观察你的对象的一个属性的改变

771
00:20:41,606 --> 00:20:42,386
要做的事

772
00:20:42,676 --> 00:20:43,796
这有点麻烦

773
00:20:44,156 --> 00:20:45,606
你必须要覆盖一个 method

774
00:20:45,756 --> 00:20:47,476
因为你的 Superclass

775
00:20:47,476 --> 00:20:48,866
可能也要覆盖这个 method

776
00:20:48,866 --> 00:20:50,706
你必须得用 context pointer

777
00:20:50,706 --> 00:20:52,406
来指明到底是谁

778
00:20:52,406 --> 00:20:53,556
在某个时间占据主导

779
00:20:53,746 --> 00:20:54,836
要把它弄对

780
00:20:54,836 --> 00:20:55,246
并不容易

781
00:20:55,986 --> 00:20:58,896
而现在 在新的 iOS 11 里

782
00:20:58,896 --> 00:20:59,996
我们有了基于 block 的 KVO

783
00:21:00,226 --> 00:21:01,196
我们觉得这很棒

784
00:21:02,516 --> 00:21:07,216
[掌声]

785
00:21:07,716 --> 00:21:09,576
如果我想要查看我的

786
00:21:09,576 --> 00:21:11,286
copresenter 的改动

787
00:21:11,286 --> 00:21:12,226
虽然它似乎从未改动过

788
00:21:12,226 --> 00:21:14,436
我只需要

789
00:21:14,436 --> 00:21:15,756
设置一个 block

790
00:21:15,756 --> 00:21:17,156
然后用一个 literal syntax

791
00:21:17,396 --> 00:21:18,306
查看其中一个 KeyPath 就可以了

792
00:21:18,706 --> 00:21:19,386
这是非常酷的

793
00:21:20,236 --> 00:21:21,746
在 Foundation 中有很多新的

794
00:21:21,746 --> 00:21:22,286
主题

795
00:21:22,286 --> 00:21:23,646
欢迎去看相关的演讲

796
00:21:23,646 --> 00:21:25,676
星期三开始

797
00:21:27,126 --> 00:21:28,946
好 下面是延迟系统手势

798
00:21:28,946 --> 00:21:29,946
这是个很有趣的例子

799
00:21:30,536 --> 00:21:33,696
如果你有一个 App

800
00:21:33,696 --> 00:21:36,876
它显示了一些内容

801
00:21:36,876 --> 00:21:38,776
显示了状态栏

802
00:21:38,776 --> 00:21:41,246
用户可以从顶部向下轻扫

803
00:21:41,246 --> 00:21:42,456
调出通知中心

804
00:21:44,066 --> 00:21:45,756
但是如果你把状态栏隐藏起来

805
00:21:45,756 --> 00:21:47,146
用户再从顶部向下轻扫

806
00:21:47,146 --> 00:21:48,596
他们就会看到

807
00:21:48,596 --> 00:21:49,836
这个点击 UI

808
00:21:51,416 --> 00:21:53,486
这样一来 你的 App 就会

809
00:21:53,536 --> 00:21:54,876
自动接收

810
00:21:54,876 --> 00:21:55,976
屏幕顶部附近

811
00:21:55,976 --> 00:21:56,746
生成的点击

812
00:21:57,116 --> 00:21:59,616
我们在 iOS 5 中这样做过

813
00:21:59,616 --> 00:22:00,846
当时我们给大家带来了

814
00:21:59,616 --> 00:22:00,846
当时我们给大家带来了

815
00:22:00,846 --> 00:22:01,056
通知中心

816
00:22:01,056 --> 00:22:02,326
因为我们希望确定

817
00:22:02,626 --> 00:22:04,846
App 能够保证

818
00:22:04,846 --> 00:22:06,306
屏幕边缘附近的点击

819
00:22:06,346 --> 00:22:07,706
是有效的

820
00:22:08,066 --> 00:22:09,296
我们还用状态栏

821
00:22:09,406 --> 00:22:10,906
是否显示

822
00:22:10,906 --> 00:22:13,176
来辨别你的 App

823
00:22:13,176 --> 00:22:14,066
是否属于这一类型

824
00:22:14,996 --> 00:22:18,356
然后在 iOS 7 里

825
00:22:19,036 --> 00:22:21,286
我们又推出了底部向上轻扫

826
00:22:21,286 --> 00:22:21,926
呼出控制中心

827
00:22:21,926 --> 00:22:25,746
如果你的 App 隐藏了状态栏

828
00:22:26,096 --> 00:22:27,846
我们会应用同样的法则

829
00:22:27,846 --> 00:22:29,266
显示出点击 UI

830
00:22:29,266 --> 00:22:29,886
而不是控制中心

831
00:22:29,886 --> 00:22:32,336
现在 这样做的目的

832
00:22:32,336 --> 00:22:33,576
其实不是很有意义

833
00:22:33,576 --> 00:22:34,686
因为状态栏是在屏幕顶部

834
00:22:34,686 --> 00:22:35,166
不是底部

835
00:22:35,216 --> 00:22:36,676
那么状态栏

836
00:22:36,676 --> 00:22:37,546
显示与否就不应该

837
00:22:37,546 --> 00:22:38,956
意味着你的 App

838
00:22:38,956 --> 00:22:41,226
在屏幕底部

839
00:22:41,226 --> 00:22:42,066
是否需要确保

840
00:22:42,066 --> 00:22:42,496
点击有效

841
00:22:43,206 --> 00:22:46,026
现在这种情况

842
00:22:46,286 --> 00:22:49,036
还有一个问题

843
00:22:49,036 --> 00:22:50,976
那就是用户在

844
00:22:50,976 --> 00:22:52,056
屏幕边缘轻扫时

845
00:22:52,056 --> 00:22:54,476
他们很想看到系统 UI

846
00:22:54,996 --> 00:22:55,886
组件的出现

847
00:22:56,416 --> 00:22:57,626
他们希望能实现

848
00:22:57,626 --> 00:22:58,056
这一点

849
00:22:58,056 --> 00:22:59,236
因此除非你的 App

850
00:22:59,236 --> 00:23:01,396
需要利用到边缘

851
00:22:59,236 --> 00:23:01,396
需要利用到边缘

852
00:23:01,396 --> 00:23:02,706
附近的触碰

853
00:23:02,706 --> 00:23:05,026
否则对于用户体验更好的

854
00:23:05,026 --> 00:23:06,896
方式是让控制中心的

855
00:23:06,896 --> 00:23:08,156
通知就这样

856
00:23:08,156 --> 00:23:08,576
直接出现

857
00:23:09,376 --> 00:23:11,186
因此 在 iOS 11 里

858
00:23:11,186 --> 00:23:12,906
我们会允许你实现这一点

859
00:23:13,136 --> 00:23:13,816
通过添加这个新的

860
00:23:13,816 --> 00:23:16,396
preferredScreenEdgesForDeferring

861
00:23:16,396 --> 00:23:17,656
系统手势 method

862
00:23:17,776 --> 00:23:19,086
如果你在

863
00:23:19,086 --> 00:23:20,806
viewControllers 中覆盖它

864
00:23:20,936 --> 00:23:22,396
你可以返回一个 UIRectEdge

865
00:23:22,396 --> 00:23:23,886
这是不同边缘的集合

866
00:23:23,886 --> 00:23:25,476
我们极力推荐你

867
00:23:25,476 --> 00:23:27,336
仅仅退回那些

868
00:23:27,336 --> 00:23:29,566
你希望不让系统手势干扰的边缘

869
00:23:29,566 --> 00:23:30,896
如果你真的需要确保

870
00:23:30,896 --> 00:23:32,786
在边缘位置的

871
00:23:32,786 --> 00:23:33,256
点击生效的话

872
00:23:33,256 --> 00:23:34,126
因为用户体验更好的方式

873
00:23:34,126 --> 00:23:36,566
就是让系统手势

874
00:23:36,566 --> 00:23:38,586
以最简单的方式

875
00:23:38,626 --> 00:23:39,946
直接出现

876
00:23:40,056 --> 00:23:41,376
好了

877
00:23:42,106 --> 00:23:43,816
另外一个我们

878
00:23:43,816 --> 00:23:45,116
加以改进的主题

879
00:23:45,116 --> 00:23:45,416
是 Auto Layout

880
00:23:45,416 --> 00:23:46,656
特别是 Auto Layout

881
00:23:46,876 --> 00:23:49,066
和 Scroll View

882
00:23:49,396 --> 00:23:51,956
之间的交互

883
00:23:52,066 --> 00:23:58,016
因为 Scroll Views 对

884
00:23:58,016 --> 00:23:59,176
Auto Layout 其实是一种挑战

885
00:23:59,176 --> 00:24:01,676
因为他们代表了两种

886
00:23:59,176 --> 00:24:01,676
因为他们代表了两种

887
00:24:01,676 --> 00:24:03,086
不同的坐标系

888
00:24:03,086 --> 00:24:04,006
揉到一起

889
00:24:04,306 --> 00:24:05,546
你有 Scroll View 的框架

890
00:24:05,546 --> 00:24:06,946
然后 你又有了

891
00:24:06,946 --> 00:24:07,826
其内容的坐标系

892
00:24:08,666 --> 00:24:10,076
后者又时常比

893
00:24:10,076 --> 00:24:11,506
Scroll View 要大 而且几乎总是

894
00:24:11,506 --> 00:24:12,956
与 Scroll View 的源

895
00:24:12,956 --> 00:24:13,856
产生偏移量

896
00:24:15,336 --> 00:24:16,566
因此在你为 Scroll View

897
00:24:16,566 --> 00:24:18,196
施加约束的时候

898
00:24:18,816 --> 00:24:21,116
Scroll View 总有很多

899
00:24:21,116 --> 00:24:22,456
内置的技巧

900
00:24:22,456 --> 00:24:23,626
它会猜测你想要

901
00:24:23,626 --> 00:24:23,986
做什么

902
00:24:23,986 --> 00:24:24,976
它会根据你所

903
00:24:25,146 --> 00:24:26,706
设置的约束来尽力

904
00:24:26,706 --> 00:24:27,456
去做正确的事

905
00:24:27,936 --> 00:24:30,076
但在 iOS 11 中 我们会允许

906
00:24:30,076 --> 00:24:31,576
你把自己的意思表达地

907
00:24:31,576 --> 00:24:33,286
非常清楚

908
00:24:33,286 --> 00:24:34,646
完全明确

909
00:24:34,646 --> 00:24:36,016
因为我们在 Scroll View 上

910
00:24:36,046 --> 00:24:37,156
推出了两个新的 Layout guide

911
00:24:37,416 --> 00:24:38,836
一个是 contentLayoutGuide

912
00:24:38,916 --> 00:24:39,636
另一个是 frameLayoutGuide

913
00:24:39,636 --> 00:24:40,616
现在你可以设置

914
00:24:40,616 --> 00:24:42,546
明确代表一个坐标系

915
00:24:42,546 --> 00:24:43,616
或者另一个坐标系

916
00:24:43,616 --> 00:24:44,836
的约束了

917
00:24:45,516 --> 00:24:47,536
[掌声]

918
00:24:48,036 --> 00:24:48,956
这会让你能够

919
00:24:48,956 --> 00:24:51,176
省很多力气

920
00:24:51,176 --> 00:24:51,946
而过去这很麻烦

921
00:24:52,366 --> 00:24:54,356
有时你有一个

922
00:24:54,356 --> 00:24:55,606
Scroll View 然后你有

923
00:24:55,606 --> 00:24:56,556
可以大小缩放的内容

924
00:24:56,906 --> 00:24:58,426
你希望能够在缩放时

925
00:24:58,426 --> 00:25:00,476
让内容在

926
00:24:58,426 --> 00:25:00,476
让内容在

927
00:25:00,476 --> 00:25:02,136
Scroll View 中心位置

928
00:25:02,536 --> 00:25:02,736
停止

929
00:25:02,736 --> 00:25:03,686
Josh 与我在几年前

930
00:25:03,686 --> 00:25:05,516
在一场 WWDC 讲座上用了

931
00:25:05,516 --> 00:25:07,556
三分之一的时间来解释

932
00:25:07,556 --> 00:25:08,776
你要如何在 Scroll View 中

933
00:25:08,776 --> 00:25:09,496
实现这个效果

934
00:25:09,856 --> 00:25:11,646
直到最近

935
00:25:11,646 --> 00:25:13,056
使用 Auto Layout 都很难

936
00:25:13,056 --> 00:25:13,726
做到这一点

937
00:25:14,416 --> 00:25:16,136
但现在 你只需两行代码

938
00:25:16,136 --> 00:25:16,816
就能实现了

939
00:25:17,246 --> 00:25:18,606
你只需要在 imageView 中

940
00:25:18,696 --> 00:25:21,046
设置 centerXAnchor

941
00:25:21,046 --> 00:25:22,496
或者你的 Scroll View 的

942
00:25:22,496 --> 00:25:24,586
任何内容和

943
00:25:24,586 --> 00:25:26,116
contentLayoutGuide 的

944
00:25:26,466 --> 00:25:27,276
centerXAnchor 对等就行

945
00:25:27,276 --> 00:25:28,396
然后你需要在

946
00:25:28,396 --> 00:25:29,936
Y 轴上做同样的事

947
00:25:30,566 --> 00:25:33,616
然后就大功告成

948
00:25:34,508 --> 00:25:36,508
[掌声]

949
00:25:39,316 --> 00:25:39,916
好了

950
00:25:40,176 --> 00:25:41,456
下面是 Dynamic Type

951
00:25:41,796 --> 00:25:44,246
dynamic type 是 iOS 上一个

952
00:25:44,246 --> 00:25:46,646
很重要的特性

953
00:25:46,866 --> 00:25:48,056
这幅图显示的是

954
00:25:48,056 --> 00:25:49,276
大量不同的 dynamic type 尺寸

955
00:25:49,276 --> 00:25:50,916
用户可以设置它们

956
00:25:50,916 --> 00:25:52,226
我们可以在自己的

957
00:25:52,226 --> 00:25:53,836
Calendar App 里

958
00:25:53,836 --> 00:25:53,906
控制它

959
00:25:54,166 --> 00:25:55,576
这是一个小的

960
00:25:55,576 --> 00:25:56,276
dynamic type

961
00:25:56,936 --> 00:25:58,786
变大 变大 

962
00:25:58,786 --> 00:25:59,416
变得很大

963
00:25:59,416 --> 00:26:01,056
更大的 dynamic type 尺寸

964
00:25:59,416 --> 00:26:01,056
更大的 dynamic type 尺寸

965
00:26:01,056 --> 00:26:02,706
都可以通过选择

966
00:26:02,706 --> 00:26:04,476
来实现

967
00:26:04,886 --> 00:26:07,206
这就以多种形式

968
00:26:07,206 --> 00:26:08,916
对你的 App 的支持

969
00:26:08,916 --> 00:26:09,656
形成了挑战

970
00:26:09,866 --> 00:26:11,486
但对于那些选择了非标准

971
00:26:11,486 --> 00:26:13,036
dynamic type 尺寸的用户来说

972
00:26:13,286 --> 00:26:14,596
如果你的 App 不支持

973
00:26:14,596 --> 00:26:16,056
他们的选择

974
00:26:16,056 --> 00:26:17,476
那么这用户体验

975
00:26:17,536 --> 00:26:17,916
就很差了

976
00:26:18,476 --> 00:26:20,756
我们做了一些改进 

977
00:26:20,756 --> 00:26:22,366
让你在你的 App 里

978
00:26:22,916 --> 00:26:24,106
做对这件事变得

979
00:26:24,106 --> 00:26:24,706
更容易

980
00:26:25,016 --> 00:26:26,696
第一件事就是控制

981
00:26:26,816 --> 00:26:27,446
文本的尺寸

982
00:26:28,396 --> 00:26:31,956
假如你把 16 号字

983
00:26:32,146 --> 00:26:33,516
作为标准字体的尺寸

984
00:26:34,686 --> 00:26:36,986
那么你该如何决定

985
00:26:36,986 --> 00:26:38,016
用户选择非标准 dynamic type 的时候

986
00:26:38,016 --> 00:26:39,166
该用到哪一种

987
00:26:39,586 --> 00:26:40,086
字号呢

988
00:26:41,086 --> 00:26:42,806
要做到这一点 以前的办法

989
00:26:42,876 --> 00:26:44,286
是让 UIFont 对某种文本格式

990
00:26:44,336 --> 00:26:46,446
给出偏好的字号

991
00:26:47,036 --> 00:26:48,046
有很多文本格式

992
00:26:48,046 --> 00:26:50,226
字体 标题

993
00:26:50,226 --> 00:26:51,056
有很多供你查看

994
00:26:51,056 --> 00:26:52,266
这很好

995
00:26:52,746 --> 00:26:53,746
因为它可以为你

996
00:26:53,746 --> 00:26:56,186
在 App 里的适当位置

997
00:26:56,186 --> 00:26:56,936
提供合适的字体

998
00:26:57,186 --> 00:26:58,546
但这有点不自由

999
00:26:58,746 --> 00:26:59,806
因为你无法得到一个

1000
00:26:59,806 --> 00:27:00,426
定制的字体

1001
00:26:59,806 --> 00:27:00,426
定制的字体

1002
00:27:00,646 --> 00:27:01,426
它每次只能给你

1003
00:27:01,426 --> 00:27:03,286
系统字体

1004
00:27:03,286 --> 00:27:04,086
如果你想在特定情况下

1005
00:27:04,086 --> 00:27:06,006
使用 Monospace Number 字体

1006
00:27:06,006 --> 00:27:06,706
又该怎么办呢

1007
00:27:06,986 --> 00:27:09,026
或者是那些

1008
00:27:09,026 --> 00:27:10,616
更搭配你品牌的

1009
00:27:10,616 --> 00:27:11,176
那些字体

1010
00:27:11,706 --> 00:27:13,776
在 iOS 11 里 我们推出了

1011
00:27:13,946 --> 00:27:15,126
一个新的类解决了这个问题

1012
00:27:15,126 --> 00:27:16,716
那就是 UIFontMetrics.

1013
00:27:17,216 --> 00:27:18,796
使用它的方法

1014
00:27:18,796 --> 00:27:21,096
就是对于你感兴趣的文本格式

1015
00:27:21,096 --> 00:27:23,066
建立一个 FontMetrics

1016
00:27:23,066 --> 00:27:23,776
对象

1017
00:27:24,936 --> 00:27:26,476
然后 选择任何你想要的字体

1018
00:27:26,476 --> 00:27:28,506
尺寸就是标准的

1019
00:27:28,506 --> 00:27:29,436
dynamic type 尺寸

1020
00:27:29,516 --> 00:27:31,816
然后 你可以让

1021
00:27:31,886 --> 00:27:33,556
FontMetrics 对象

1022
00:27:33,776 --> 00:27:35,426
在用户当前设定的基础上 测量那个

1023
00:27:35,426 --> 00:27:35,686
字体

1024
00:27:35,686 --> 00:27:37,316
这让你得到一个字体

1025
00:27:37,686 --> 00:27:39,046
任何你所需要的字体

1026
00:27:39,046 --> 00:27:40,406
大小正合适

1027
00:27:41,366 --> 00:27:42,166
是的 这非常酷

1028
00:27:42,166 --> 00:27:47,236
但只有这一点

1029
00:27:47,236 --> 00:27:48,606
还不足以完全解决问题

1030
00:27:48,606 --> 00:27:50,426
假设你需要一个

1031
00:27:50,546 --> 00:27:52,176
定制的按键 或者一个定制的

1032
00:27:52,176 --> 00:27:52,636
栏

1033
00:27:52,756 --> 00:27:53,956
然后要往里面放一些

1034
00:27:53,956 --> 00:27:54,486
文本

1035
00:27:54,806 --> 00:27:56,106
你打算把那个按键的高度设定成

1036
00:27:56,106 --> 00:27:56,646
多少呢

1037
00:27:57,446 --> 00:27:58,746
如果用户使用了非标准的

1038
00:27:58,746 --> 00:28:00,656
dynamic type 设置 它就可能

1039
00:27:58,746 --> 00:28:00,656
dynamic type 设置 它就可能

1040
00:28:00,656 --> 00:28:02,106
覆盖掉你所设置的

1041
00:28:02,106 --> 00:28:02,696
那个高度

1042
00:28:03,026 --> 00:28:05,016
UIFontMetrics 解决了

1043
00:28:05,016 --> 00:28:06,006
这个问题 办法就是

1044
00:28:06,006 --> 00:28:07,406
允许你测量任意的

1045
00:28:07,406 --> 00:28:08,056
Layout 值

1046
00:28:08,096 --> 00:28:10,456
你要再次建立一个

1047
00:28:10,936 --> 00:28:11,926
FontMetrics 对象

1048
00:28:12,306 --> 00:28:13,356
选择一个适合

1049
00:28:13,356 --> 00:28:14,356
标准 dynamic type 尺寸的

1050
00:28:14,356 --> 00:28:15,836
高度 然后你可以

1051
00:28:15,836 --> 00:28:17,346
根据用户的当前设定

1052
00:28:17,346 --> 00:28:17,936
测量它

1053
00:28:17,936 --> 00:28:20,136
这对于你的字体尺寸和 layout 来说

1054
00:28:20,136 --> 00:28:21,726
是非常好用的

1055
00:28:22,556 --> 00:28:26,886
我们还为 Auto Layout

1056
00:28:26,886 --> 00:28:28,446
添加了特性 让它支持

1057
00:28:28,486 --> 00:28:29,946
dynamic type 我们对此也很兴奋

1058
00:28:31,496 --> 00:28:34,296
假如我有两个商标

1059
00:28:34,436 --> 00:28:36,016
字体不同 也许

1060
00:28:36,276 --> 00:28:37,256
垂直分布

1061
00:28:37,496 --> 00:28:39,756
我选择了一个基线

1062
00:28:39,756 --> 00:28:41,776
到基线的间隔 在这个字体大小下面

1063
00:28:42,216 --> 00:28:43,836
看起来很合适

1064
00:28:44,316 --> 00:28:48,146
我的用户可能选择了

1065
00:28:48,146 --> 00:28:50,546
更大或更小的 dynamic type

1066
00:28:50,606 --> 00:28:50,956
尺寸

1067
00:28:51,266 --> 00:28:53,586
结果就让间隔

1068
00:28:53,586 --> 00:28:56,146
变得太近

1069
00:28:56,146 --> 00:28:58,516
或者太远了

1070
00:28:58,516 --> 00:29:00,226
现在 用 Auto Layout

1071
00:28:58,516 --> 00:29:00,226
现在 用 Auto Layout

1072
00:29:00,226 --> 00:29:01,826
可以解决这个问题

1073
00:29:02,106 --> 00:29:03,356
那就是我们为获取

1074
00:29:03,356 --> 00:29:04,956
系统推荐的间隔

1075
00:29:04,956 --> 00:29:05,896
提供了办法

1076
00:29:06,806 --> 00:29:08,736
要做到这一点 首先

1077
00:29:08,736 --> 00:29:09,806
有两个要素

1078
00:29:09,806 --> 00:29:11,036
你需要做基线到基线间隔

1079
00:29:11,036 --> 00:29:12,296
用这种方式来

1080
00:29:12,296 --> 00:29:13,476
告诉 Auto Layout

1081
00:29:13,476 --> 00:29:14,746
它应该考虑字体的大小

1082
00:29:15,566 --> 00:29:18,286
我可能会用 topLabel 里的 topAnchor

1083
00:29:18,286 --> 00:29:19,726
lastBaselineAnchor 制作一个

1084
00:29:19,726 --> 00:29:21,446
topAnchor 再用 bottomLabel 里的

1085
00:29:21,446 --> 00:29:22,796
firstBaselineAnchor 制作一个

1086
00:29:22,796 --> 00:29:23,686
bottomAnchor

1087
00:29:24,226 --> 00:29:25,716
然后我会用新的

1088
00:29:25,716 --> 00:29:27,556
constraintEqualToSystemSpacing

1089
00:29:27,556 --> 00:29:30,326
below method 来让 Auto Layout

1090
00:29:30,386 --> 00:29:32,156
选择一个看上去合适的值

1091
00:29:32,156 --> 00:29:33,456
前提是知道被显示的

1092
00:29:33,456 --> 00:29:34,116
字体的大小

1093
00:29:34,116 --> 00:29:35,596
那会让文本去适应

1094
00:29:35,596 --> 00:29:37,146
这会让所有不同的

1095
00:29:37,256 --> 00:29:38,476
dynamic type 的尺寸

1096
00:29:38,476 --> 00:29:39,356
看上去都很舒服

1097
00:29:39,536 --> 00:29:41,886
这同样适用于

1098
00:29:41,936 --> 00:29:42,896
Visual Format Language

1099
00:29:43,136 --> 00:29:44,076
我们有同样的两种

1100
00:29:44,076 --> 00:29:44,676
要素

1101
00:29:44,676 --> 00:29:46,276
第一个是系统间隔

1102
00:29:46,276 --> 00:29:47,506
这是由

1103
00:29:47,506 --> 00:29:49,706
我的 Visual Format String 的 dash 提供的

1104
00:29:49,706 --> 00:29:51,146
其次是一个新的基线到基线的

1105
00:29:51,216 --> 00:29:52,326
选项

1106
00:29:52,526 --> 00:29:54,816
这样一来 Auto Layout 系统

1107
00:29:54,816 --> 00:29:56,406
就会明白 替你完成这些工作了

1108
00:29:56,836 --> 00:29:57,936
这对 UIStackView 也一样

1109
00:29:57,936 --> 00:29:59,306
只要提供同样的

1110
00:29:59,336 --> 00:29:59,976
两个选项就行

1111
00:30:00,066 --> 00:30:03,316
要了解更多的使用 dynamic type

1112
00:30:03,316 --> 00:30:05,486
构建 App 的方法

1113
00:30:05,756 --> 00:30:07,366
欢迎去参加

1114
00:30:07,366 --> 00:30:08,696
在周五举行的相关演讲

1115
00:30:09,206 --> 00:30:11,126
有很多精彩内容

1116
00:30:12,896 --> 00:30:13,456
好了

1117
00:30:14,006 --> 00:30:14,916
下面是 Password Autofill

1118
00:30:14,916 --> 00:30:16,696
这是在今年推出的新 API 里面

1119
00:30:16,696 --> 00:30:17,966
我最喜欢的一个

1120
00:30:18,346 --> 00:30:19,606
我真的觉得它很棒

1121
00:30:20,446 --> 00:30:21,706
你们中有些人也许经历过

1122
00:30:21,706 --> 00:30:23,016
类似的 workflow

1123
00:30:23,156 --> 00:30:24,466
这是我在登录 web service 的时候

1124
00:30:24,466 --> 00:30:25,446
所采用的标准 workflow

1125
00:30:25,716 --> 00:30:27,626
比如我登录了某种

1126
00:30:27,876 --> 00:30:28,446
web service

1127
00:30:29,966 --> 00:30:32,706
我允许 Safari 建议

1128
00:30:32,706 --> 00:30:34,006
密码 然后我接受了它

1129
00:30:34,376 --> 00:30:35,646
这是一个很棒的强密码

1130
00:30:35,646 --> 00:30:36,726
我永远也不想输入一遍

1131
00:30:38,146 --> 00:30:40,706
然后这个 service 会说

1132
00:30:40,706 --> 00:30:42,146
来吧 下载我们的 App 吧

1133
00:30:42,146 --> 00:30:42,716
我照做了

1134
00:30:43,026 --> 00:30:44,716
我打开这个 App

1135
00:30:44,716 --> 00:30:46,836
立即就看到了这个

1136
00:30:47,046 --> 00:30:48,896
密码输入界面

1137
00:30:49,246 --> 00:30:50,556
当然我在 iCloud 钥匙串上

1138
00:30:50,556 --> 00:30:52,276
保存了刚才那个强密码

1139
00:30:53,256 --> 00:30:54,046
但我不知道那个密码是什么

1140
00:30:54,656 --> 00:30:55,566
我卡在了这里

1141
00:30:55,966 --> 00:30:57,216
于是我回到网络交互界面

1142
00:30:57,666 --> 00:30:59,036
说我忘记了

1143
00:30:59,036 --> 00:30:59,536
密码

1144
00:30:59,536 --> 00:31:00,556
然后重设密码

1145
00:30:59,536 --> 00:31:00,556
然后重设密码

1146
00:31:00,556 --> 00:31:01,566
设一个非常简单的 比如

1147
00:31:01,696 --> 00:31:02,236
Password

1148
00:31:02,556 --> 00:31:04,756
现在我再去登录

1149
00:31:04,756 --> 00:31:06,226
完全没有安全可言

1150
00:31:06,226 --> 00:31:07,296
很可能就被黑了

1151
00:31:07,296 --> 00:31:08,826
会是一个灾难

1152
00:31:08,826 --> 00:31:10,316
从 iOS 11 开始

1153
00:31:10,316 --> 00:31:11,836
这场噩梦要终结了

1154
00:31:12,506 --> 00:31:14,176
我们推出了一项

1155
00:31:14,176 --> 00:31:15,526
非常棒的新特性

1156
00:31:15,526 --> 00:31:16,696
当我们探测到你进入了一个

1157
00:31:16,696 --> 00:31:18,256
用户名和密码的输入界面

1158
00:31:18,756 --> 00:31:20,956
这个 key UI 就会

1159
00:31:20,956 --> 00:31:21,606
在候选栏中出现

1160
00:31:22,526 --> 00:31:26,306
点击一下 你就会得到

1161
00:31:26,306 --> 00:31:28,086
所有你保存在 iCloud 钥匙串上的

1162
00:31:28,086 --> 00:31:29,806
密码的列表

1163
00:31:30,846 --> 00:31:31,946
你就可以在列表中

1164
00:31:31,946 --> 00:31:32,746
找到正确的那个了

1165
00:31:33,006 --> 00:31:35,646
这相比起刚才

1166
00:31:35,646 --> 00:31:36,976
你卡住的场景来说

1167
00:31:36,976 --> 00:31:37,896
已经是更好的用户体验

1168
00:31:38,176 --> 00:31:39,376
但还不够理想

1169
00:31:39,376 --> 00:31:40,456
对于很多用户来说

1170
00:31:40,456 --> 00:31:41,506
他们并不知道到底该如何使用

1171
00:31:41,506 --> 00:31:41,926
这个列表

1172
00:31:41,926 --> 00:31:42,806
如果你像我一样

1173
00:31:42,806 --> 00:31:44,246
那么你的列表就会有好多密码

1174
00:31:44,246 --> 00:31:45,386
滚动列表并找到

1175
00:31:45,386 --> 00:31:46,306
正确的密码 可能会

1176
00:31:46,306 --> 00:31:47,076
有点困难

1177
00:31:48,216 --> 00:31:50,906
现在有一种方式

1178
00:31:51,176 --> 00:31:52,596
你可以为用户提供

1179
00:31:52,596 --> 00:31:53,446
更好的体验

1180
00:31:53,806 --> 00:31:55,456
只需要几步就可以

1181
00:31:55,936 --> 00:31:58,596
我们需要的是

1182
00:31:58,596 --> 00:32:01,076
在候选栏中默认出现

1183
00:31:58,596 --> 00:32:01,076
在候选栏中默认出现

1184
00:32:01,076 --> 00:32:02,206
正确的建议

1185
00:32:02,386 --> 00:32:03,456
这样一来 你甚至不需要

1186
00:32:03,456 --> 00:32:04,886
在一串列表中

1187
00:32:04,886 --> 00:32:06,536
找到正确的那个了

1188
00:32:06,536 --> 00:32:08,176
要做到这一点 只需要两步

1189
00:32:09,116 --> 00:32:10,986
首先为你的 App 添加一个授权

1190
00:32:10,986 --> 00:32:11,866
然后为你的 web service

1191
00:32:11,996 --> 00:32:14,076
添加几行 JSON

1192
00:32:14,546 --> 00:32:15,896
你为了支持通用链接

1193
00:32:15,896 --> 00:32:17,376
可能已经这样做过了

1194
00:32:18,316 --> 00:32:19,916
如果你完成了这件事

1195
00:32:19,916 --> 00:32:21,456
这个很棒的 UI 就会出现

1196
00:32:21,456 --> 00:32:23,806
我点击一下

1197
00:32:23,806 --> 00:32:25,666
密码就自动填好了

1198
00:32:25,926 --> 00:32:27,856
所以请看在我的面上

1199
00:32:27,856 --> 00:32:28,586
在你们的 App 中使用这个 API 吧

1200
00:32:28,586 --> 00:32:29,656
我们觉得它很棒

1201
00:32:29,866 --> 00:32:31,356
明天也请去参加

1202
00:32:31,356 --> 00:32:32,086
相关讲座

1203
00:32:33,516 --> 00:32:38,500
[掌声]

1204
00:32:41,046 --> 00:32:41,346
好的

1205
00:32:41,346 --> 00:32:42,676
接下来我想告诉大家

1206
00:32:42,676 --> 00:32:44,446
对于 Asset Catalogs

1207
00:32:44,446 --> 00:32:45,476
的一些改进

1208
00:32:46,726 --> 00:32:48,266
现在可以为 Asset Catalog

1209
00:32:48,446 --> 00:32:50,596
添加色彩和图标了

1210
00:32:50,866 --> 00:32:52,146
你可以制作带名称的

1211
00:32:52,306 --> 00:32:52,676
色彩了

1212
00:32:53,516 --> 00:32:56,966
[掌声]

1213
00:32:57,466 --> 00:32:59,776
这可以让你在适合的设备上

1214
00:32:59,776 --> 00:33:02,056
轻松支持全范围

1215
00:32:59,776 --> 00:33:02,056
轻松支持全范围

1216
00:33:02,056 --> 00:33:03,306
色彩

1217
00:33:03,716 --> 00:33:06,006
你可以建立一个范围很宽的

1218
00:33:06,086 --> 00:33:07,336
色域 然后把它添加到

1219
00:33:07,336 --> 00:33:07,726
Asset Catalog 上

1220
00:33:07,726 --> 00:33:08,806
你可以通过名称获取它

1221
00:33:08,806 --> 00:33:09,646
你也可以在

1222
00:33:09,646 --> 00:33:12,086
不支持宽色域的设备上	

1223
00:33:12,086 --> 00:33:13,546
在 sRGB Color Space 里面使用

1224
00:33:13,546 --> 00:33:14,696
fallback 色彩

1225
00:33:14,696 --> 00:33:15,926
你还可以对 App 图标

1226
00:33:15,926 --> 00:33:16,986
做同样的事

1227
00:33:17,326 --> 00:33:18,936
现在 App 图标可以使用

1228
00:33:18,936 --> 00:33:20,396
广色域色彩

1229
00:33:20,396 --> 00:33:21,806
可以被显示在支持

1230
00:33:21,806 --> 00:33:24,606
P3 Color Space 的设备上

1231
00:33:24,816 --> 00:33:27,166
此外 你可能还发现了

1232
00:33:27,596 --> 00:33:28,516
至少对某些 App 来说

1233
00:33:28,516 --> 00:33:30,586
它们的图标就是

1234
00:33:30,586 --> 00:33:32,396
占据这个 App 的容量的

1235
00:33:32,396 --> 00:33:33,286
最大的一个因素了

1236
00:33:33,726 --> 00:33:35,696
现在 把它们包含在

1237
00:33:35,876 --> 00:33:37,406
Asset Catalogs 里面 我们就能

1238
00:33:37,406 --> 00:33:40,156
让它们参与进

1239
00:33:40,326 --> 00:33:42,016
App 瘦身的进程

1240
00:33:42,096 --> 00:33:43,846
这会显著降低你的 App 的

1241
00:33:43,846 --> 00:33:44,186
占用空间

1242
00:33:44,346 --> 00:33:45,686
这是一个非常棒的改进

1243
00:33:45,686 --> 00:33:46,506
在以后它会被

1244
00:33:46,506 --> 00:33:47,746
以默认的形式加入

1245
00:33:47,746 --> 00:33:49,066
iOS 11 的新 project 里面

1246
00:33:49,066 --> 00:33:52,006
你也可以在现有的 project 里面

1247
00:33:52,006 --> 00:33:53,486
这样做 方法就是在 Info.plist 里

1248
00:33:53,486 --> 00:33:54,026
添加一个 key

1249
00:33:54,686 --> 00:33:58,406
接下来是支持 PDF 的图像

1250
00:33:58,486 --> 00:33:59,356
这个功能其实已经

1251
00:33:59,356 --> 00:34:00,846
实现了一段时间了

1252
00:33:59,356 --> 00:34:00,846
实现了一段时间了

1253
00:34:01,466 --> 00:34:02,746
但现在你在 Asset Catalog 中

1254
00:34:02,746 --> 00:34:04,236
添加图像时有了一个新选择

1255
00:34:04,236 --> 00:34:05,726
就是支持 PDF 的图像

1256
00:34:06,306 --> 00:34:07,906
你现在可以选择

1257
00:34:07,906 --> 00:34:08,946
保存矢量数据了

1258
00:34:09,196 --> 00:34:10,985
这是 iOS 11 的新特性

1259
00:34:10,985 --> 00:34:12,016
这个特性真的

1260
00:34:12,016 --> 00:34:12,386
很厉害

1261
00:34:12,866 --> 00:34:14,686
你点击一下那个框

1262
00:34:14,686 --> 00:34:16,826
矢量数据就成为你的 App

1263
00:34:16,826 --> 00:34:17,556
的一部分了

1264
00:34:17,946 --> 00:34:19,735
这样一来 可能

1265
00:34:19,815 --> 00:34:20,656
会让你的 App 变得更大一点

1266
00:34:20,656 --> 00:34:22,226
因为矢量数据要

1267
00:34:22,266 --> 00:34:23,326
占用一些空间

1268
00:34:23,846 --> 00:34:25,275
但另一方面

1269
00:34:25,275 --> 00:34:26,956
这让你能够测量

1270
00:34:26,956 --> 00:34:27,956
这些图像 这会在

1271
00:34:27,956 --> 00:34:29,315
很多场景下

1272
00:34:29,315 --> 00:34:29,866
派上用场

1273
00:34:29,866 --> 00:34:31,376
比如 假设你知道

1274
00:34:31,376 --> 00:34:32,616
这个特定图像

1275
00:34:32,616 --> 00:34:34,146
会以不同尺寸被调用

1276
00:34:34,146 --> 00:34:37,496
但那不太明显

1277
00:34:37,636 --> 00:34:39,886
比如一个符号

1278
00:34:39,926 --> 00:34:41,446
要随着 dynamic type 变动大小

1279
00:34:41,946 --> 00:34:42,826
既然我们想到了

1280
00:34:42,826 --> 00:34:44,295
dynamic type 那你也就应该

1281
00:34:44,295 --> 00:34:45,666
想到要让和字体一起出现的

1282
00:34:45,706 --> 00:34:47,906
符号的大小也能

1283
00:34:48,216 --> 00:34:49,235
有合适的变动

1284
00:34:49,235 --> 00:34:52,996
另一个十分不明显的例子

1285
00:34:52,996 --> 00:34:54,596
就是 tap bar 图像

1286
00:34:54,786 --> 00:34:56,386
你也许已经习惯了

1287
00:34:56,386 --> 00:34:58,476
tab bar 图像的尺寸

1288
00:34:58,476 --> 00:34:59,256
是单一不变的

1289
00:34:59,746 --> 00:35:01,476
但我们强烈建议	

1290
00:34:59,746 --> 00:35:01,476
但我们强烈建议	

1291
00:35:01,476 --> 00:35:03,986
你们的 App 去支持的

1292
00:35:03,986 --> 00:35:05,936
一个新特性

1293
00:35:06,446 --> 00:35:08,716
就是要考虑到

1294
00:35:08,716 --> 00:35:11,626
那些把 dynamic type 尺寸调大的

1295
00:35:12,446 --> 00:35:12,526
用户们

1296
00:35:12,786 --> 00:35:14,706
当他们点击并按住

1297
00:35:14,706 --> 00:35:17,006
一个 tap bar 图像的时候

1298
00:35:17,006 --> 00:35:18,166
在屏幕中央的 Hud 里

1299
00:35:18,216 --> 00:35:19,056
一个大图就会出现

1300
00:35:19,806 --> 00:35:21,236
当你轻扫手指

1301
00:35:21,236 --> 00:35:22,556
就会看到不同的图像

1302
00:35:23,006 --> 00:35:24,696
你可以通过返回一个不同的图像

1303
00:35:25,036 --> 00:35:26,916
来自你的 App 里

1304
00:35:26,916 --> 00:35:28,296
实现这个功能

1305
00:35:28,606 --> 00:35:31,226
但如果你使用了支持 PDF 的图像

1306
00:35:31,226 --> 00:35:33,236
并保存了 tap bar 图像的矢量数据

1307
00:35:33,236 --> 00:35:34,376
那么它就会

1308
00:35:34,376 --> 00:35:35,586
以默认形式出现了

1309
00:35:35,856 --> 00:35:37,116
所以我们强烈推荐采用它

1310
00:35:37,346 --> 00:35:38,936
增强你的 App 的易用性

1311
00:35:38,936 --> 00:35:40,356
让所有用户受益

1312
00:35:40,396 --> 00:35:40,546
好了

1313
00:35:40,996 --> 00:35:45,076
我想说的最后一个主题

1314
00:35:45,076 --> 00:35:46,496
就是 ProMotion

1315
00:35:46,996 --> 00:35:49,456
你们已经知道 在一些型号的

1316
00:35:49,686 --> 00:35:51,306
IPad 上面 我们增加了

1317
00:35:51,306 --> 00:35:52,536
屏幕的刷新率

1318
00:35:52,866 --> 00:35:55,356
你可以在通过在 UIScreen 上

1319
00:35:55,356 --> 00:35:56,586
查询这一特性来

1320
00:35:56,586 --> 00:35:58,176
搞清楚某个设备的

1321
00:35:58,376 --> 00:35:59,796
屏幕刷新率

1322
00:36:03,456 --> 00:36:05,806
那么 你查询之后

1323
00:36:05,806 --> 00:36:06,496
又该怎么利用这个

1324
00:36:06,496 --> 00:36:07,126
信息呢

1325
00:36:08,106 --> 00:36:09,736
这取决于你在创造

1326
00:36:09,736 --> 00:36:10,306
哪一种 App

1327
00:36:10,676 --> 00:36:11,846
如果是一个 UIKit App

1328
00:36:11,846 --> 00:36:13,246
那么实际上你

1329
00:36:13,246 --> 00:36:14,526
不该用这个特性

1330
00:36:14,526 --> 00:36:15,746
做什么事

1331
00:36:15,796 --> 00:36:17,146
对于 UIKit App 来说

1332
00:36:17,146 --> 00:36:18,566
最重要的事就是你只想

1333
00:36:18,716 --> 00:36:20,276
优化你的绘图代码

1334
00:36:20,526 --> 00:36:21,756
你只需要保证

1335
00:36:21,756 --> 00:36:23,246
你的帧率

1336
00:36:23,246 --> 00:36:24,706
在所有设备上

1337
00:36:24,706 --> 00:36:25,176
越高越好

1338
00:36:25,176 --> 00:36:26,516
要做到这一点 我们强烈建议

1339
00:36:26,516 --> 00:36:27,746
使用 Instruments

1340
00:36:28,016 --> 00:36:29,226
你可以查看

1341
00:36:29,226 --> 00:36:30,436
在滚动和动画时

1342
00:36:30,436 --> 00:36:31,646
所达到的帧率

1343
00:36:31,646 --> 00:36:32,766
然后找到

1344
00:36:32,766 --> 00:36:33,536
拖慢你的因素

1345
00:36:33,786 --> 00:36:35,006
如果你这样做了

1346
00:36:35,006 --> 00:36:36,486
就会加强你的 App

1347
00:36:36,486 --> 00:36:37,776
在所有设备上的

1348
00:36:37,776 --> 00:36:39,806
用户体验 包括那些

1349
00:36:39,806 --> 00:36:41,946
高屏幕刷新率的设备

1350
00:36:42,516 --> 00:36:44,136
这个情况对于

1351
00:36:44,136 --> 00:36:46,996
Metal App 来说更复杂

1352
00:36:46,996 --> 00:36:50,316
对于那些使用 Metal 的 App 来说

1353
00:36:50,316 --> 00:36:52,036
你就要更多地考虑

1354
00:36:52,086 --> 00:36:54,116
在不同场景下

1355
00:36:54,116 --> 00:36:55,506
使用什么样的帧率

1356
00:36:56,646 --> 00:36:59,596
你的目标就是保证

1357
00:36:59,596 --> 00:37:00,666
流畅的播放

1358
00:36:59,596 --> 00:37:00,666
流畅的播放

1359
00:37:00,666 --> 00:37:02,306
在过去 你可能会

1360
00:37:02,306 --> 00:37:04,706
悲观地

1361
00:37:04,706 --> 00:37:06,486
把刷新率调低到

1362
00:37:06,486 --> 00:37:07,976
每秒 30 帧 以保证

1363
00:37:07,976 --> 00:37:09,156
帧率的顺畅

1364
00:37:09,386 --> 00:37:10,926
但现在 在支持

1365
00:37:10,926 --> 00:37:12,296
高刷新率的设备上

1366
00:37:12,296 --> 00:37:13,886
你可以把刷新率

1367
00:37:13,886 --> 00:37:14,846
上调到每秒 40 帧

1368
00:37:14,846 --> 00:37:16,146
获得更加顺畅的体验

1369
00:37:16,146 --> 00:37:17,786
因为 40 可以被

1370
00:37:17,786 --> 00:37:19,696
每秒 120 帧的帧率

1371
00:37:20,136 --> 00:37:20,416
整除

1372
00:37:20,416 --> 00:37:21,506
如果你要展示电影视频内容

1373
00:37:21,626 --> 00:37:23,686
你就可以选择

1374
00:37:23,686 --> 00:37:25,206
每秒 24 帧的刷新率

1375
00:37:25,206 --> 00:37:26,346
现在这个刷新率

1376
00:37:26,346 --> 00:37:28,846
在这些设备上也会显得

1377
00:37:28,846 --> 00:37:29,436
非常顺畅了

1378
00:37:29,806 --> 00:37:31,176
所以选择是很多的

1379
00:37:31,406 --> 00:37:33,636
你要根据你所展示的

1380
00:37:33,636 --> 00:37:34,516
内容来考虑

1381
00:37:34,516 --> 00:37:36,146
节能的问题

1382
00:37:36,146 --> 00:37:37,526
你不会想要一直保持

1383
00:37:37,526 --> 00:37:40,456
120 帧的高帧率的

1384
00:37:40,566 --> 00:37:42,366
最后 你还可以用 XCode 的

1385
00:37:42,366 --> 00:37:44,696
GPU Report 特性来查看

1386
00:37:44,776 --> 00:37:46,056
你的 Metal App 的

1387
00:37:46,056 --> 00:37:47,076
性能特点

1388
00:37:47,136 --> 00:37:50,286
接下来会有一场

1389
00:37:50,496 --> 00:37:53,556
介绍 Metal 2 的讲座

1390
00:37:53,556 --> 00:37:54,706
我们强烈建议大家去

1391
00:37:55,136 --> 00:37:57,776
这就是全部内容了

1392
00:37:57,776 --> 00:37:59,376
现在我要把舞台

1393
00:37:59,376 --> 00:37:59,896
交给 Josh 了

1394
00:38:00,086 --> 00:38:00,756
谢谢大家

1395
00:38:01,516 --> 00:38:06,386
[掌声]

1396
00:38:06,886 --> 00:38:08,146
&gt;&gt; 多谢 Eliza

1397
00:38:08,216 --> 00:38:09,226
今天早晨我们开始的

1398
00:38:09,226 --> 00:38:09,576
有点晚

1399
00:38:09,576 --> 00:38:10,396
所以现在我们的结束语

1400
00:38:10,396 --> 00:38:11,376
就得抓紧了

1401
00:38:11,736 --> 00:38:13,446
我要很快再介绍

1402
00:38:13,446 --> 00:38:14,436
最后一个主题

1403
00:38:14,726 --> 00:38:15,786
我保证会非常快

1404
00:38:16,166 --> 00:38:18,546
本地化对于

1405
00:38:18,546 --> 00:38:20,126
扩大你的 App 的应用范围来说无疑非常关键

1406
00:38:21,196 --> 00:38:21,906
对很多人来说

1407
00:38:21,906 --> 00:38:23,976
本地化和翻译是

1408
00:38:23,976 --> 00:38:26,046
同义词

1409
00:38:26,166 --> 00:38:27,146
但实际并非如此

1410
00:38:27,736 --> 00:38:29,496
所以我想提一句

1411
00:38:29,496 --> 00:38:32,186
要考虑本地化 App 的

1412
00:38:32,186 --> 00:38:33,396
layout

1413
00:38:33,396 --> 00:38:34,916
这很重要

1414
00:38:35,366 --> 00:38:36,336
让我们抓紧时间看一下这个

1415
00:38:37,756 --> 00:38:38,896
对很多人来说

1416
00:38:38,896 --> 00:38:40,056
这也许看上去很舒服

1417
00:38:40,516 --> 00:38:42,816
但如果继续看下去

1418
00:38:42,816 --> 00:38:43,816
我要做一些改变

1419
00:38:43,976 --> 00:38:45,116
可能就会让你们

1420
00:38:45,116 --> 00:38:45,716
不舒服了

1421
00:38:46,366 --> 00:38:48,716
这个看上去是不是真的

1422
00:38:48,716 --> 00:38:49,126
很差劲

1423
00:38:49,836 --> 00:38:51,506
标志怪怪的

1424
00:38:51,506 --> 00:38:52,476
箭头指错了方向

1425
00:38:52,716 --> 00:38:54,326
动画也出错了

1426
00:38:54,976 --> 00:38:56,436
但信不信由你

1427
00:38:56,436 --> 00:38:57,596
这是一个真正的 layout

1428
00:38:57,976 --> 00:38:58,906
我们只是不太会在英语 App 中

1429
00:38:58,906 --> 00:38:59,626
看到它

1430
00:38:59,886 --> 00:39:01,106
一般是会在从右向左的

1431
00:38:59,886 --> 00:39:01,106
一般是会在从右向左的

1432
00:39:01,106 --> 00:39:02,016
语言中见到这种情况

1433
00:39:02,016 --> 00:39:03,536
比如阿拉伯语或希伯来语

1434
00:39:04,216 --> 00:39:05,526
对于希望看到这些的用户来说

1435
00:39:05,526 --> 00:39:07,266
这才是自然的

1436
00:39:08,266 --> 00:39:09,396
如果你看到这个感觉舒服

1437
00:39:09,396 --> 00:39:11,286
看到这个感觉不舒服

1438
00:39:12,096 --> 00:39:13,266
那你就知道那些

1439
00:39:13,266 --> 00:39:14,676
母语是从右向左的人们

1440
00:39:14,676 --> 00:39:16,426
如果他们看到这些的

1441
00:39:16,426 --> 00:39:17,486
感受是什么样了

1442
00:39:18,266 --> 00:39:19,206
现在你要保证

1443
00:39:19,206 --> 00:39:21,046
在本地化的同时

1444
00:39:21,156 --> 00:39:23,576
在 layoutI 里也要支持从右向左

1445
00:39:23,576 --> 00:39:24,406
要支持从右向左的

1446
00:39:24,406 --> 00:39:25,016
语言

1447
00:39:25,186 --> 00:39:26,416
因为系统各处

1448
00:39:26,466 --> 00:39:27,206
都是支持的

1449
00:39:27,406 --> 00:39:28,746
很多团队都花了大把时间

1450
00:39:28,746 --> 00:39:30,106
来保证这项特性

1451
00:39:30,136 --> 00:39:30,646
运行正常

1452
00:39:30,646 --> 00:39:32,416
实际上 UIKit 已经为你

1453
00:39:32,416 --> 00:39:32,906
做了很多

1454
00:39:33,236 --> 00:39:34,526
导航控制和开关

1455
00:39:34,526 --> 00:39:35,566
都能自动开关

1456
00:39:36,616 --> 00:39:37,646
但如果你要设计

1457
00:39:37,646 --> 00:39:39,676
定制的 view 

1458
00:39:39,676 --> 00:39:41,506
那你一定要考虑到

1459
00:39:41,606 --> 00:39:43,166
从右向左语言的 layouts

1460
00:39:43,166 --> 00:39:44,516
如果你要在使用这些语言的地方本地化

1461
00:39:44,516 --> 00:39:44,996
你的 App

1462
00:39:44,996 --> 00:39:47,486
这就是我对于这件事的

1463
00:39:47,486 --> 00:39:48,416
快速总结

1464
00:39:48,416 --> 00:39:49,356
关于本地化

1465
00:39:49,356 --> 00:39:50,916
在 developer.apple.com 的本地化指南上

1466
00:39:50,916 --> 00:39:52,466
还有很多信息

1467
00:39:53,096 --> 00:39:54,496
当然关于本场演讲

1468
00:39:54,496 --> 00:39:57,306
还有持续整周的

1469
00:39:57,306 --> 00:39:59,286
大量演讲的信息

1470
00:39:59,286 --> 00:39:59,976
在网站上都会有

1471
00:40:00,326 --> 00:40:01,496
关于拖拽与放置的四场演讲

1472
00:40:01,496 --> 00:40:02,136
会非常精彩

1473
00:40:02,176 --> 00:40:03,086
大家一定不要错过

1474
00:40:04,126 --> 00:40:05,776
为 iOS 11 升级你的 App

1475
00:40:05,776 --> 00:40:06,736
这场演讲也会

1476
00:40:06,736 --> 00:40:07,446
非常精彩

1477
00:40:07,836 --> 00:40:09,226
为了让 Eliza 高兴

1478
00:40:09,226 --> 00:40:10,356
大家也请去参加

1479
00:40:10,356 --> 00:40:12,026
介绍 Password Autofill 的演讲

1480
00:40:12,026 --> 00:40:12,856
并加以应用

1481
00:40:13,156 --> 00:40:13,876
非常感谢大家

1482
00:40:13,876 --> 00:40:14,526
祝大家本周开心度过  收获良多

1483
00:40:15,516 --> 00:40:21,500
[掌声]
