1
00:00:18,218 --> 00:00:19,753
<c.magenta>（使用HEIF和HEVC）</c>

2
00:00:20,087 --> 00:00:23,257
<c.magenta>大家早上好</c>

3
00:00:24,057 --> 00:00:24,925
<c.magenta>谢谢大家</c>

4
00:00:26,360 --> 00:00:27,594
<c.magenta>我是Erik Turnquist</c>

5
00:00:27,761 --> 00:00:31,231
<c.magenta>今天我和Brad将跟大家</c>

6
00:00:32,533 --> 00:00:34,601
<c.magenta>首先 什么是HEVC？</c>

7
00:00:35,102 --> 00:00:37,838
<c.magenta>HEVC的全称是高效率视频编码</c>

8
00:00:38,138 --> 00:00:42,109
<c.magenta>它是符合行业标准的</c>

9
00:00:42,476 --> 00:00:44,611
<c.magenta>它是H.264的继任者</c>

10
00:00:46,213 --> 00:00:49,249
<c.magenta>现在还有一个更重要的问题</c>

11
00:00:49,316 --> 00:00:52,286
<c.magenta>Apple为什么如此努力地</c>

12
00:00:52,619 --> 00:00:55,589
<c.magenta>在过去的十几年中H.264非常棒</c>

13
00:00:56,456 --> 00:00:59,459
<c.magenta>现在我们反复思考这个问题</c>

14
00:00:59,526 --> 00:01:02,829
<c.magenta>很遗憾H.264已达到其功能的上限</c>

15
00:00:59,526 --> 00:01:02,829
<c.magenta>很遗憾H.264已达到其功能的上限</c>

16
00:01:03,664 --> 00:01:06,900
<c.magenta>我们想启用新功能</c>

17
00:01:07,234 --> 00:01:11,104
<c.magenta>高位深如10-位元</c>

18
00:01:11,672 --> 00:01:15,275
<c.magenta>现在我们想全部实现 但要降低位速率</c>

19
00:01:15,542 --> 00:01:16,643
<c.magenta>那么如何实现呢？</c>

20
00:01:17,611 --> 00:01:19,112
<c.magenta>嗯 我们用HEVC实现</c>

21
00:01:19,680 --> 00:01:22,683
<c.magenta>那么现在 比我们现在实际</c>

22
00:01:23,350 --> 00:01:24,818
<c.magenta>嗯 对于一般性编码内容</c>

23
00:01:24,885 --> 00:01:28,088
<c.magenta>我们看到比H.264的位速率</c>

24
00:01:28,255 --> 00:01:29,790
<c.magenta>那么这非常了不起</c>

25
00:01:30,224 --> 00:01:31,358
<c.magenta>对于摄像头捕捉</c>

26
00:01:31,425 --> 00:01:36,730
<c.magenta>我们看到的压缩</c>

27
00:01:37,397 --> 00:01:38,999
<c.magenta>那么这是另一件很了不起的事</c>

28
00:01:39,766 --> 00:01:42,069
<c.magenta>而且我们今天实现了全部这些变更</c>

29
00:01:42,603 --> 00:01:45,072
<c.magenta>如果你已经安装了iOS</c>

30
00:01:45,138 --> 00:01:49,176
<c.magenta>我们已默认启动了HEVC电影</c>

31
00:01:49,243 --> 00:01:50,711
<c.magenta>那意味着你们中的许多人已捕捉到了</c>

32
00:01:50,777 --> 00:01:53,714
<c.magenta>HEIF图片或HEVC电影</c>

33
00:01:54,047 --> 00:01:55,782
<c.magenta>在我们平台上就这么管用了</c>

34
00:01:56,884 --> 00:01:58,752
<c.magenta>让我们来看看我们今天要讲的内容</c>

35
00:01:58,819 --> 00:02:00,921
<c.magenta>我要讲HEVC电影相关的内容</c>

36
00:01:58,819 --> 00:02:00,921
<c.magenta>我要讲HEVC电影相关的内容</c>

37
00:02:00,988 --> 00:02:03,423
<c.magenta>而Brad将谈谈HEIF图片相关内容</c>

38
00:02:03,490 --> 00:02:05,559
<c.magenta>我们要讲获取这些内容</c>

39
00:02:06,026 --> 00:02:08,362
<c.magenta>播放并显示它 捕捉它</c>

40
00:02:08,695 --> 00:02:12,299
<c.magenta>并创建HEIF和HEVC电影</c>

41
00:02:13,267 --> 00:02:14,801
<c.magenta>首先 让我们先讲讲权限</c>

42
00:02:16,470 --> 00:02:18,338
<c.magenta>你们中有那么多人使用PhotoKit</c>

43
00:02:18,505 --> 00:02:20,941
<c.magenta>PhotoKit将给播放提交HEVC资产</c>

44
00:02:21,642 --> 00:02:23,710
<c.magenta>所以如果你使用</c>

45
00:02:23,777 --> 00:02:24,978
<c.magenta>或requestLivePhoto</c>

46
00:02:25,345 --> 00:02:27,581
<c.magenta>它们将提交或它们将为你提供自动播放</c>

47
00:02:27,648 --> 00:02:31,185
<c.magenta>而无需采用新的…</c>

48
00:02:34,121 --> 00:02:36,723
<c.magenta>PhotoKit还可以给你提交HEVC资产</c>

49
00:02:36,790 --> 00:02:38,825
<c.magenta>所以如果你称它为</c>

50
00:02:38,892 --> 00:02:42,162
<c.magenta>它将转码到你当前正在使用的预设</c>

51
00:02:42,696 --> 00:02:44,298
<c.magenta>所以如果你使用其中一个尺寸预设</c>

52
00:02:44,364 --> 00:02:47,534
<c.magenta>是过去经常给你提供H.264的</c>

53
00:02:47,601 --> 00:02:50,070
<c.magenta>但我会讲一下</c>

54
00:02:50,604 --> 00:02:53,040
<c.magenta>如果你调用requestAVAsset</c>

55
00:02:53,106 --> 00:02:56,844
<c.magenta>HEVC媒体文件的权限</c>

56
00:02:58,979 --> 00:03:02,216
<c.magenta>现在如果你要备份应用</c>

57
00:02:58,979 --> 00:03:02,216
<c.magenta>现在如果你要备份应用</c>

58
00:03:02,282 --> 00:03:04,318
<c.magenta>那么你很可能给它命名为requestData</c>

59
00:03:04,384 --> 00:03:07,821
<c.magenta>那么我想提醒大家注意的是</c>

60
00:03:07,888 --> 00:03:11,358
<c.magenta>在你接收的电影文件内</c>

61
00:03:12,492 --> 00:03:15,863
<c.magenta>现在你有了这个内容</c>

62
00:03:17,464 --> 00:03:20,467
<c.magenta>我们的现代化媒体框架支持HEVC播放</c>

63
00:03:20,534 --> 00:03:23,537
<c.magenta>比如AVKit、AVFoundation</c>

64
00:03:23,937 --> 00:03:25,873
<c.magenta>我们支持HTTP实时流媒体</c>

65
00:03:26,240 --> 00:03:29,776
<c.magenta>边下边播以及本地文件播放</c>

66
00:03:30,511 --> 00:03:33,747
<c.magenta>并且我们支持MPEG-4</c>

67
00:03:33,814 --> 00:03:36,917
<c.magenta>并且在这里不需要选择加入任何API</c>

68
00:03:38,652 --> 00:03:40,954
<c.magenta>我们支持在macOS和iOS上的解码</c>

69
00:03:41,421 --> 00:03:44,291
<c.magenta>现在让我们看看哪里支持硬件解码</c>

70
00:03:44,658 --> 00:03:47,060
<c.magenta>那么我们在A9芯片上</c>

71
00:03:47,294 --> 00:03:48,795
<c.magenta>这是iPhone 6s</c>

72
00:03:49,229 --> 00:03:52,633
<c.magenta>并且我们在第6代因特尔内核上</c>

73
00:03:52,699 --> 00:03:55,569
<c.magenta>这是Skylake</c>

74
00:03:55,636 --> 00:03:56,970
<c.magenta>我们还有10位元解码</c>

75
00:03:57,037 --> 00:03:59,373
<c.magenta>在第7代因特尔内核处理器上</c>

76
00:03:59,640 --> 00:04:02,843
<c.magenta>这是Kaby Lake</c>

77
00:03:59,640 --> 00:04:02,843
<c.magenta>这是Kaby Lake</c>

78
00:04:02,910 --> 00:04:07,414
<c.magenta>我们在macOS和iOS上还有</c>

79
00:04:08,448 --> 00:04:09,950
<c.magenta>所以现在让我们来看一些代码</c>

80
00:04:10,017 --> 00:04:11,919
<c.magenta>让我们将其转换到HEVC播放</c>

81
00:04:12,386 --> 00:04:14,354
<c.magenta>在此我们正播放“我的了不起的电影”</c>

82
00:04:14,421 --> 00:04:16,990
<c.magenta>做一个URL 然后一个播放器</c>

83
00:04:17,423 --> 00:04:21,428
<c.magenta>那么这就是H.264版本</c>

84
00:04:22,229 --> 00:04:25,299
<c.magenta>没有任何改变</c>

85
00:04:25,499 --> 00:04:27,201
<c.magenta>你不需要修改任何代码</c>

86
00:04:27,267 --> 00:04:29,536
<c.magenta>我们想让你考虑一些东西</c>

87
00:04:30,671 --> 00:04:32,739
<c.magenta>那么第一是关于解码功能</c>

88
00:04:33,006 --> 00:04:34,208
<c.magenta>如果你提出这个问题</c>

89
00:04:34,274 --> 00:04:37,377
<c.magenta>系统上有解码器能处理这个内容吗</c>

90
00:04:37,444 --> 00:04:38,579
<c.magenta>你可以用这个API</c>

91
00:04:39,112 --> 00:04:42,950
<c.magenta>这个可用于非即时操作</c>

92
00:04:43,016 --> 00:04:45,185
<c.magenta>并且它受硬件支持的限制</c>

93
00:04:45,252 --> 00:04:48,322
<c.magenta>所以并不是全部硬件解码器</c>

94
00:04:49,656 --> 00:04:52,860
<c.magenta>现在还有一个更重要的问题</c>

95
00:04:53,093 --> 00:04:56,430
<c.magenta>如果你询问如何为客户</c>

96
00:04:56,496 --> 00:04:57,764
<c.magenta>你可以使用这个API</c>

97
00:04:57,831 --> 00:05:00,367
<c.magenta>且你们中很多人</c>

98
00:04:57,831 --> 00:05:00,367
<c.magenta>且你们中很多人</c>

99
00:05:01,001 --> 00:05:03,437
<c.magenta>并不是所有内容都能实时播放</c>

100
00:05:03,737 --> 00:05:06,373
<c.magenta>并且针对不同的设备有不同的功能</c>

101
00:05:06,440 --> 00:05:10,177
<c.magenta>所以如果你想为用户</c>

102
00:05:10,244 --> 00:05:14,181
<c.magenta>无论是1x或2x播放</c>

103
00:05:14,481 --> 00:05:15,749
<c.magenta>你可以使用这个API</c>

104
00:05:17,818 --> 00:05:20,320
<c.magenta>现在让我们接着讲硬件解码功能</c>

105
00:05:20,387 --> 00:05:23,190
<c.magenta>如果你想在播放过程中省电</c>

106
00:05:23,257 --> 00:05:26,426
<c.magenta>你想在支持硬件解码的系统上播放</c>

107
00:05:26,960 --> 00:05:29,530
<c.magenta>这也会给你最好的解码性能</c>

108
00:05:29,863 --> 00:05:32,399
<c.magenta>所以我们有一个新的VideoToolbox API</c>

109
00:05:32,799 --> 00:05:35,435
<c.magenta>这个编解码器是否支持硬件解码？</c>

110
00:05:35,502 --> 00:05:36,803
<c.magenta>在这里我要展示的是HEVC</c>

111
00:05:36,870 --> 00:05:39,006
<c.magenta>但你仍然可以</c>

112
00:05:40,741 --> 00:05:44,511
<c.magenta>现在对于播放有最后一个问题</c>

113
00:05:45,112 --> 00:05:48,849
<c.magenta>我要选择H.264或HEVC？</c>

114
00:05:49,550 --> 00:05:52,953
<c.magenta>嗯 如果你担心提交最兼容的内容</c>

115
00:05:53,020 --> 00:05:55,789
<c.magenta>或想提交一个能在各处适用的资产</c>

116
00:05:56,623 --> 00:05:58,125
<c.magenta>请选择H.264</c>

117
00:05:58,559 --> 00:06:01,161
<c.magenta>我们的平台已经</c>

118
00:05:58,559 --> 00:06:01,161
<c.magenta>我们的平台已经</c>

119
00:06:01,228 --> 00:06:04,965
<c.magenta>在第三方生态系统中被广泛采用</c>

120
00:06:05,666 --> 00:06:08,135
<c.magenta>然而如果你想获得最小的文件尺寸</c>

121
00:06:08,202 --> 00:06:10,938
<c.magenta>和最新、最强的编码技术</c>

122
00:06:11,004 --> 00:06:12,172
<c.magenta>请选择HEVC</c>

123
00:06:12,472 --> 00:06:15,008
<c.magenta>你需要决定哪个适用于你的应用</c>

124
00:06:16,543 --> 00:06:18,512
<c.magenta>接着让我们来看捕捉</c>

125
00:06:19,813 --> 00:06:24,484
<c.magenta>那么捕捉HEVC支持AVFoundation</c>

126
00:06:24,551 --> 00:06:26,820
<c.magenta>以及QuickTime文件格式作为目的文件</c>

127
00:06:28,655 --> 00:06:33,527
<c.magenta>我们在A10芯片上支持HEVC捕捉</c>

128
00:06:33,961 --> 00:06:35,696
<c.magenta>现在让我们来看一下…</c>

129
00:06:35,896 --> 00:06:38,832
<c.magenta>你们中许多人都已经很熟悉的捕捉图表</c>

130
00:06:39,566 --> 00:06:41,502
<c.magenta>（捕捉HEVC电影）</c>

131
00:06:41,568 --> 00:06:45,272
<c.magenta>一开始是一个AVCaptureSession</c>

132
00:06:47,975 --> 00:06:50,644
<c.magenta>你创建一个AVCaptureDevice</c>

133
00:06:51,778 --> 00:06:53,146
<c.magenta>然后数据需要进入某处</c>

134
00:06:53,213 --> 00:06:56,116
<c.magenta>在本例中 你使用电影文件</c>

135
00:06:57,518 --> 00:07:00,020
<c.magenta>这些都与AVCaptureConnection相关联</c>

136
00:06:57,518 --> 00:07:00,020
<c.magenta>这些都与AVCaptureConnection相关联</c>

137
00:07:00,687 --> 00:07:04,024
<c.magenta>并且这将创建你的电影文件</c>

138
00:07:04,925 --> 00:07:06,894
<c.magenta>你们中的许多人很可能</c>

139
00:07:06,960 --> 00:07:09,830
<c.magenta>首先创建一个AVCaptureConnect</c>

140
00:07:10,130 --> 00:07:12,399
<c.magenta>在这里我们做了一个4k捕捉会话</c>

141
00:07:13,901 --> 00:07:16,570
<c.magenta>然后你创建AVCaptureDevice</c>

142
00:07:18,739 --> 00:07:20,073
<c.magenta>创建你的MovieFileOutput</c>

143
00:07:20,140 --> 00:07:23,210
<c.magenta>并且这会实现写压缩文件</c>

144
00:07:24,211 --> 00:07:27,414
<c.magenta>然后startRunning和startRecording</c>

145
00:07:27,481 --> 00:07:28,949
<c.magenta>那么我们要如何选择使用HEVC呢？</c>

146
00:07:30,817 --> 00:07:32,586
<c.magenta>嗯 在iOS 10中 我们添加了API</c>

147
00:07:32,786 --> 00:07:35,422
<c.magenta>在捕捉过程中检测可用视频编解码器</c>

148
00:07:35,689 --> 00:07:38,926
<c.magenta>在iOS 11中有一个新功能</c>

149
00:07:39,593 --> 00:07:42,162
<c.magenta>在所支持的设备上 它将返回真</c>

150
00:07:42,229 --> 00:07:46,333
<c.magenta>并且你可以继续并在输出设置中使用</c>

151
00:07:47,534 --> 00:07:49,469
<c.magenta>且如果设备部支持它</c>

152
00:07:49,536 --> 00:07:51,205
<c.magenta>其它编解码器 如H.264</c>

153
00:07:51,872 --> 00:07:53,740
<c.magenta>现在我想在这里提示一个重点</c>

154
00:07:53,807 --> 00:07:56,109
<c.magenta>那个顺序是否</c>

155
00:07:56,176 --> 00:07:58,478
<c.magenta>并且为此我们将HEVC</c>

156
00:07:58,912 --> 00:08:02,783
<c.magenta>那么意思是如果你什么也不做</c>

157
00:07:58,912 --> 00:08:02,783
<c.magenta>那么意思是如果你什么也不做</c>

158
00:08:03,183 --> 00:08:05,786
<c.magenta>我们真的希望能让你熟悉</c>

159
00:08:06,753 --> 00:08:08,422
<c.magenta>现在让我们来看Live Photos</c>

160
00:08:09,656 --> 00:08:13,594
<c.magenta>那么我们在这里有同样的捕捉图表</c>

161
00:08:13,827 --> 00:08:16,230
<c.magenta>那会拍出</c>

162
00:08:16,563 --> 00:08:19,333
<c.magenta>那么首先让我们</c>

163
00:08:19,399 --> 00:08:20,667
<c.magenta>我们去年完成的</c>

164
00:08:21,702 --> 00:08:23,403
<c.magenta>我们现在支持视频稳定性</c>

165
00:08:23,470 --> 00:08:25,639
<c.magenta>所以在Live Photo播放过程中</c>

166
00:08:26,006 --> 00:08:29,243
<c.magenta>在捕捉Live Photo的过程中</c>

167
00:08:29,543 --> 00:08:33,046
<c.magenta>并且我们支持更流畅的Live Photo</c>

168
00:08:34,248 --> 00:08:37,017
<c.magenta>那么让我们通过Live Photo</c>

169
00:08:38,217 --> 00:08:40,087
<c.magenta>那么在iOS 11中有新API</c>

170
00:08:40,153 --> 00:08:42,823
<c.magenta>你可以创建</c>

171
00:08:43,890 --> 00:08:48,228
<c.magenta>看它是否包含HEVC</c>

172
00:08:49,730 --> 00:08:51,064
<c.magenta>然后如果它支持 继续并使用它</c>

173
00:08:51,131 --> 00:08:54,168
<c.magenta>如果不支持 你可以退回到另一个</c>

174
00:08:54,935 --> 00:08:58,038
<c.magenta>我还想提示一点 这里有同样的顾虑</c>

175
00:08:58,105 --> 00:09:00,374
<c.magenta>即那个顺序</c>

176
00:08:58,105 --> 00:09:00,374
<c.magenta>即那个顺序</c>

177
00:09:00,440 --> 00:09:02,910
<c.magenta>为此我们将HEVC作为第一选项</c>

178
00:09:03,677 --> 00:09:07,481
<c.magenta>如果你什么也不做</c>

179
00:09:08,315 --> 00:09:09,783
<c.magenta>你可能在这里感知到了一种模式</c>

180
00:09:09,850 --> 00:09:12,653
<c.magenta>我们真的很想</c>

181
00:09:14,855 --> 00:09:17,491
<c.magenta>现在让我们来看定制性最强的捕捉图表</c>

182
00:09:17,891 --> 00:09:21,428
<c.magenta>有AVCaptureVideoDataOutput</c>

183
00:09:21,995 --> 00:09:24,932
<c.magenta>如果你想在某种程度上</c>

184
00:09:24,998 --> 00:09:27,634
<c.magenta>也许你可能会实施</c>

185
00:09:29,169 --> 00:09:32,406
<c.magenta>通过为HEVC配置AssetWriter</c>

186
00:09:32,940 --> 00:09:35,375
<c.magenta>那么你可以配置自定义输出设置</c>

187
00:09:35,442 --> 00:09:37,344
<c.magenta>明确指定HEVC</c>

188
00:09:37,678 --> 00:09:40,380
<c.magenta>或视频数据输出会给你推荐那些设置</c>

189
00:09:40,447 --> 00:09:42,082
<c.magenta>我们推荐这个API</c>

190
00:09:42,749 --> 00:09:43,984
<c.magenta>iOS 7添加了</c>

191
00:09:44,051 --> 00:09:46,153
<c.magenta>recommendedVideoSettings</c>

192
00:09:46,220 --> 00:09:48,121
<c.magenta>现在这个总是推荐H.264</c>

193
00:09:48,322 --> 00:09:50,657
<c.magenta>所以如果你要坚持使用H.264</c>

194
00:09:50,858 --> 00:09:53,994
<c.magenta>然而在iOS 11中</c>

195
00:09:54,061 --> 00:09:55,462
<c.magenta>传入编解码器类型</c>

196
00:09:55,529 --> 00:09:59,266
<c.magenta>我们将在所支持的设备上针对</c>

197
00:10:00,200 --> 00:10:03,270
<c.magenta>接着让我们来看导出和转码相关的内容</c>

198
00:10:07,274 --> 00:10:11,345
<c.magenta>那么你可以通过AVFoundation</c>

199
00:10:11,712 --> 00:10:15,315
<c.magenta>并且我们支持MPEG-4和QuickTime</c>

200
00:10:15,716 --> 00:10:17,618
<c.magenta>在这里需要选择加入API</c>

201
00:10:20,320 --> 00:10:22,422
<c.magenta>在macOS和iOS上我们支持HEVC编码</c>

202
00:10:22,489 --> 00:10:25,759
<c.magenta>现在让我们来看一下</c>

203
00:10:27,327 --> 00:10:30,264
<c.magenta>那么我们在A10融合芯片中</c>

204
00:10:30,330 --> 00:10:31,565
<c.magenta>这是iPhone 7</c>

205
00:10:32,032 --> 00:10:34,168
<c.magenta>我们在macOS上</c>

206
00:10:34,234 --> 00:10:36,537
<c.magenta>在第6代因特尔处理器上</c>

207
00:10:36,837 --> 00:10:40,174
<c.magenta>这是Skylake系列</c>

208
00:10:40,541 --> 00:10:44,178
<c.magenta>在macOS上 我们有一个特别的</c>

209
00:10:44,244 --> 00:10:46,346
<c.magenta>高质量软件编码器 你可以使用</c>

210
00:10:46,413 --> 00:10:48,115
<c.magenta>我们稍后再讲一下这个</c>

211
00:10:49,082 --> 00:10:51,985
<c.magenta>现在让我们先看最高层级的导出API</c>

212
00:10:52,786 --> 00:10:55,255
<c.magenta>即通过AVAssetExportSession转码</c>

213
00:10:56,323 --> 00:10:57,991
<c.magenta>那么通过这个 你可以提供一个资产</c>

214
00:10:58,058 --> 00:11:00,360
<c.magenta>然后你选择一个预设</c>

215
00:10:58,058 --> 00:11:00,360
<c.magenta>然后你选择一个预设</c>

216
00:11:00,427 --> 00:11:03,497
<c.magenta>包括压缩并且生产一个输出电影</c>

217
00:11:05,499 --> 00:11:08,068
<c.magenta>那么对于现有预设来说</c>

218
00:11:08,135 --> 00:11:10,604
<c.magenta>如果你正在使用</c>

219
00:11:10,671 --> 00:11:14,041
<c.magenta>它通常是提供H.264的</c>

220
00:11:14,474 --> 00:11:16,009
<c.magenta>我们已经在这里添加了新预设</c>

221
00:11:16,510 --> 00:11:20,714
<c.magenta>那些将会从H.264</c>

222
00:11:21,148 --> 00:11:23,116
<c.magenta>并且这些将生成更小尺寸的AVAssets</c>

223
00:11:23,350 --> 00:11:26,286
<c.magenta>有时候最高可达40% 质量不变</c>

224
00:11:27,788 --> 00:11:31,592
<c.magenta>现在让我们把级别降低一级</c>

225
00:11:33,827 --> 00:11:37,264
<c.magenta>那么AVAssetWriter</c>

226
00:11:37,331 --> 00:11:39,533
<c.magenta>要么从另一个API中得到样本缓冲</c>

227
00:11:39,600 --> 00:11:41,668
<c.magenta>比如VideoDataOutput</c>

228
00:11:41,869 --> 00:11:44,972
<c.magenta>并且AVAssetWriter用于压缩和写文件</c>

229
00:11:46,039 --> 00:11:49,510
<c.magenta>正如我之前所说过的</c>

230
00:11:49,576 --> 00:11:52,179
<c.magenta>你可以明确设置自定义输出设置</c>

231
00:11:52,246 --> 00:11:55,315
<c.magenta>在本例中我们明确使用HEVC</c>

232
00:11:55,382 --> 00:11:57,818
<c.magenta>你还可以指定你的位速率和尺寸</c>

233
00:11:57,885 --> 00:12:00,921
<c.magenta>或你可以使用我们的便利设置</c>

234
00:11:57,885 --> 00:12:00,921
<c.magenta>或你可以使用我们的便利设置</c>

235
00:12:00,988 --> 00:12:02,189
<c.magenta>你可以使用VideoDataOutput</c>

236
00:12:02,256 --> 00:12:05,058
<c.magenta>对于一般性编码 你可以使用</c>

237
00:12:05,125 --> 00:12:06,727
<c.magenta>我们在这里添加了两个新预设</c>

238
00:12:06,793 --> 00:12:09,930
<c.magenta>在所支持的设备上</c>

239
00:12:11,064 --> 00:12:14,401
<c.magenta>现在如果你正在创建</c>

240
00:12:14,468 --> 00:12:15,802
<c.magenta>可能会很棘手</c>

241
00:12:15,869 --> 00:12:18,272
<c.magenta>那么并不是所有的编码器</c>

242
00:12:19,006 --> 00:12:21,742
<c.magenta>我们在iOS 11和macOS High Sierra中</c>

243
00:12:21,808 --> 00:12:23,610
<c.magenta>所以现在你可以向编码器</c>

244
00:12:23,677 --> 00:12:25,312
<c.magenta>用于输出设置</c>

245
00:12:26,079 --> 00:12:28,148
<c.magenta>为此你要在这里传入HEVC</c>

246
00:12:28,215 --> 00:12:31,618
<c.magenta>它将返回编码器ID</c>

247
00:12:32,152 --> 00:12:35,656
<c.magenta>编码器ID是那个编码器的唯一标识符</c>

248
00:12:36,356 --> 00:12:39,660
<c.magenta>然后就能在输出设置中</c>

249
00:12:39,726 --> 00:12:42,896
<c.magenta>你就可以确保它可以用于压缩</c>

250
00:12:43,397 --> 00:12:46,066
<c.magenta>现在让我们来看最低层级的压缩界面</c>

251
00:12:46,466 --> 00:12:49,203
<c.magenta>这是通过</c>

252
00:12:49,670 --> 00:12:50,871
<c.magenta>正如AssetWriter一样</c>

253
00:12:50,938 --> 00:12:52,573
<c.magenta>你可能会自己生成样本</c>

254
00:12:52,639 --> 00:12:55,175
<c.magenta>或从另一个API中获取</c>

255
00:12:55,242 --> 00:12:59,580
<c.magenta>VTCompressionsSession压缩它们</c>

256
00:13:01,682 --> 00:13:05,786
<c.magenta>那么要通过HEVC编码器</c>

257
00:13:05,853 --> 00:13:09,456
<c.magenta>在本例中 我们创建了一个</c>

258
00:13:09,723 --> 00:13:11,758
<c.magenta>让我们把它转为HEVC</c>

259
00:13:12,659 --> 00:13:14,761
<c.magenta>好了 现在我们正在用HEVC压缩</c>

260
00:13:14,828 --> 00:13:16,930
<c.magenta>通过VideoToolbox 所以这非常简单</c>

261
00:13:17,664 --> 00:13:20,334
<c.magenta>现在让我们看一些</c>

262
00:13:21,668 --> 00:13:23,737
<c.magenta>对于macOS上的最佳编码性能</c>

263
00:13:23,804 --> 00:13:25,439
<c.magenta>你想选择加入到硬件中的</c>

264
00:13:25,506 --> 00:13:29,343
<c.magenta>这将使用硬件 当可用时</c>

265
00:13:29,776 --> 00:13:30,878
<c.magenta>要实现这个目的</c>

266
00:13:31,845 --> 00:13:35,048
<c.magenta>设置EnableHardwareAccelerated</c>

267
00:13:35,115 --> 00:13:37,551
<c.magenta>在encoderSpecification中属性设为真</c>

268
00:13:38,819 --> 00:13:41,154
<c.magenta>然后将其传入</c>

269
00:13:43,790 --> 00:13:47,361
<c.magenta>现在如果你正在做即时编码</c>

270
00:13:47,427 --> 00:13:49,196
<c.magenta>并且永远不会退回去使用软件</c>

271
00:13:49,530 --> 00:13:52,199
<c.magenta>为此你要把encoderSpecification</c>

272
00:13:52,266 --> 00:13:54,801
<c.magenta>RequireHardwareAccelarated</c>

273
00:13:56,303 --> 00:13:58,305
<c.magenta>然后把它传入encoderSpecification中</c>

274
00:13:58,372 --> 00:14:01,375
<c.magenta>在支持硬件的系统上</c>

275
00:13:58,372 --> 00:14:01,375
<c.magenta>在支持硬件的系统上</c>

276
00:14:01,441 --> 00:14:04,845
<c.magenta>但系统上的硬件如果只支持软件编码</c>

277
00:14:05,913 --> 00:14:09,049
<c.magenta>好了 现在让我们继续看一些</c>

278
00:14:09,116 --> 00:14:10,450
<c.magenta>第一个是位深</c>

279
00:14:11,185 --> 00:14:13,854
<c.magenta>那么如果你从曾在用户界面中</c>

280
00:14:13,921 --> 00:14:17,357
<c.magenta>或者漂亮的日出或日落</c>

281
00:14:17,558 --> 00:14:20,661
<c.magenta>与电影中并不是完全一样的</c>

282
00:14:21,261 --> 00:14:23,130
<c.magenta>所以你可能会看到这些色彩限制效果</c>

283
00:14:23,197 --> 00:14:25,966
<c.magenta>在你电影的视频版中</c>

284
00:14:26,533 --> 00:14:28,769
<c.magenta>这是因为通过8-位元</c>

285
00:14:28,836 --> 00:14:31,471
<c.magenta>来呈现色彩之间微妙的不同点</c>

286
00:14:31,538 --> 00:14:33,774
<c.magenta>现在好消息是10-位元可以实现了</c>

287
00:14:33,841 --> 00:14:36,076
<c.magenta>所以你会获得这些非常漂亮的渐变</c>

288
00:14:36,777 --> 00:14:40,180
<c.magenta>现在通过我们的macOS软件编码器</c>

289
00:14:40,914 --> 00:14:43,183
<c.magenta>那么首先查看是否支持该属性</c>

290
00:14:43,250 --> 00:14:47,521
<c.magenta>如果支持 继续并使用我们的</c>

291
00:14:48,488 --> 00:14:50,791
<c.magenta>并且我们想确保你的整个管道</c>

292
00:14:50,858 --> 00:14:54,228
<c.magenta>我们不想让你从8-位元变为10-位元</c>

293
00:14:54,294 --> 00:14:55,596
<c.magenta>因为那会降低精确度</c>

294
00:14:55,662 --> 00:14:57,764
<c.magenta>所以我们添加了</c>

295
00:14:57,831 --> 00:14:59,700
<c.magenta>以确保你可以保持在10-位元中</c>

296
00:14:59,867 --> 00:15:00,834
<c.magenta>这里列出了一个</c>

297
00:14:59,867 --> 00:15:00,834
<c.magenta>这里列出了一个</c>

298
00:15:01,268 --> 00:15:03,504
<c.magenta>那么现在 你第一次可以</c>

299
00:15:03,570 --> 00:15:05,839
<c.magenta>以10-位元进行编码</c>

300
00:15:06,006 --> 00:15:07,941
<c.magenta>而且在iOS和macOS上有史以来首次</c>

301
00:15:08,008 --> 00:15:11,378
<c.magenta>我们的显示屏管道也支持10-位元</c>

302
00:15:15,916 --> 00:15:17,584
<c.magenta>现在让我们看看第二个高级话题</c>

303
00:15:17,651 --> 00:15:19,286
<c.magenta>即阶梯式编码</c>

304
00:15:19,987 --> 00:15:21,588
<c.magenta>要了解这个信息</c>

305
00:15:21,655 --> 00:15:24,291
<c.magenta>我们需要稍微看一下视频编码101</c>

306
00:15:25,125 --> 00:15:27,327
<c.magenta>视频压缩有三个主要的帧类型</c>

307
00:15:27,394 --> 00:15:28,795
<c.magenta>第一个是I Frame</c>

308
00:15:29,229 --> 00:15:30,864
<c.magenta>你可以把I Frame看做是一个图片文件</c>

309
00:15:30,931 --> 00:15:32,966
<c.magenta>可以被独立解码</c>

310
00:15:34,001 --> 00:15:35,469
<c.magenta>然后有P Frame</c>

311
00:15:35,536 --> 00:15:37,604
<c.magenta>P Frame指的是之前的帧</c>

312
00:15:37,771 --> 00:15:39,273
<c.magenta>所以可把它们看作是一个单差</c>

313
00:15:39,339 --> 00:15:41,942
<c.magenta>并且它们只包含</c>

314
00:15:42,442 --> 00:15:44,278
<c.magenta>现在还有它们的堂弟B Frame</c>

315
00:15:44,745 --> 00:15:46,980
<c.magenta>B Frame指的是之前和将来的帧</c>

316
00:15:47,047 --> 00:15:49,383
<c.magenta>它们就像一个奇特的多方向差</c>

317
00:15:49,449 --> 00:15:51,685
<c.magenta>所以它们只包含不存在于</c>

318
00:15:51,752 --> 00:15:53,353
<c.magenta>引用它们的帧中的信息</c>

319
00:15:53,520 --> 00:15:57,257
<c.magenta>现在假装我们有一个解码器</c>

320
00:15:57,324 --> 00:16:00,060
<c.magenta>假如我们有一个每秒240帧的内容</c>

321
00:15:57,324 --> 00:16:00,060
<c.magenta>假如我们有一个每秒240帧的内容</c>

322
00:16:00,561 --> 00:16:02,296
<c.magenta>嗯 那意味着我们需要失掉一些帧</c>

323
00:16:02,362 --> 00:16:04,698
<c.magenta>在我们解码之前 因为它跟不上</c>

324
00:16:04,765 --> 00:16:06,066
<c.magenta>我们何时可以掉帧呢？</c>

325
00:16:07,000 --> 00:16:09,870
<c.magenta>我们可以当另一帧</c>

326
00:16:10,137 --> 00:16:12,105
<c.magenta>那么在本例中</c>

327
00:16:12,172 --> 00:16:15,475
<c.magenta>因为它指的是另一帧</c>

328
00:16:15,876 --> 00:16:17,511
<c.magenta>那么让我们继续并失掉它</c>

329
00:16:17,578 --> 00:16:18,946
<c.magenta>我们也可以失掉B Frame</c>

330
00:16:19,012 --> 00:16:22,049
<c.magenta>因为它指的是其它帧</c>

331
00:16:22,583 --> 00:16:24,084
<c.magenta>那么让我们继续并失掉它</c>

332
00:16:24,451 --> 00:16:28,522
<c.magenta>现在让我们看一个实际的例子</c>

333
00:16:29,823 --> 00:16:31,358
<c.magenta>那么这是一个典型的编码机制</c>

334
00:16:31,425 --> 00:16:34,394
<c.magenta>用于当通过低端设备创建可兼容内容时</c>

335
00:16:35,262 --> 00:16:37,931
<c.magenta>那么比如说</c>

336
00:16:37,998 --> 00:16:41,068
<c.magenta>每八帧就可以失掉七帧 留下一帧</c>

337
00:16:41,401 --> 00:16:43,971
<c.magenta>这就在播放时</c>

338
00:16:44,037 --> 00:16:47,875
<c.magenta>在支持每秒120帧解码的设备上</c>

339
00:16:47,941 --> 00:16:50,811
<c.magenta>在只支持每秒30帧的设备上</c>

340
00:16:51,678 --> 00:16:53,680
<c.magenta>现在让我们添加我们的帧引用</c>

341
00:16:53,747 --> 00:16:56,083
<c.magenta>因为这些帧是可失掉的</c>

342
00:16:56,149 --> 00:16:58,452
<c.magenta>并且它们全部指向不可失掉的帧</c>

343
00:16:58,752 --> 00:17:00,387
<c.magenta>现在你们中有压缩经验的人</c>

344
00:16:58,752 --> 00:17:00,387
<c.magenta>现在你们中有压缩经验的人</c>

345
00:17:00,454 --> 00:17:02,256
<c.magenta>应该已经发现了一个问题</c>

346
00:17:02,689 --> 00:17:06,292
<c.magenta>那个压缩很别扭是否</c>

347
00:17:06,359 --> 00:17:08,228
<c.magenta>那么它们全部指向不可失掉的帧</c>

348
00:17:08,295 --> 00:17:09,262
<c.magenta>可能发生了很多变更</c>

349
00:17:09,329 --> 00:17:11,832
<c.magenta>在不可失掉的帧和可失掉的帧之间</c>

350
00:17:12,465 --> 00:17:14,568
<c.magenta>好了 那么这是我们</c>

351
00:17:14,635 --> 00:17:17,671
<c.magenta>现在让我们逐步来看</c>

352
00:17:18,005 --> 00:17:20,941
<c.magenta>那么首先</c>

353
00:17:21,608 --> 00:17:23,143
<c.magenta>让我们继续并失掉一些帧</c>

354
00:17:23,210 --> 00:17:25,512
<c.magenta>那么在这里 我们要降到每秒240帧</c>

355
00:17:25,579 --> 00:17:29,550
<c.magenta>假如我们仍然跟不上</c>

356
00:17:29,616 --> 00:17:31,985
<c.magenta>假如我们的解码器</c>

357
00:17:32,052 --> 00:17:34,288
<c.magenta>我们甚至每秒都不能处理60帧</c>

358
00:17:34,621 --> 00:17:36,657
<c.magenta>那么我们继续并失掉这个最后的帧</c>

359
00:17:37,424 --> 00:17:40,194
<c.magenta>现在 我真的要猜猜要失掉哪些帧</c>

360
00:17:40,260 --> 00:17:43,564
<c.magenta>那么完全没有任何指示</c>

361
00:17:43,630 --> 00:17:45,966
<c.magenta>要么是前一帧 要么是后一帧</c>

362
00:17:46,366 --> 00:17:47,801
<c.magenta>所以让我们也来修复一下这个问题</c>

363
00:17:49,169 --> 00:17:52,005
<c.magenta>我们可以通过一个叫作</c>

364
00:17:52,072 --> 00:17:55,843
<c.magenta>这允许我们管理帧</c>

365
00:17:56,210 --> 00:17:58,445
<c.magenta>让我们继续并重新编码我们的内容</c>

366
00:18:00,848 --> 00:18:03,450
<c.magenta>你已经看到了 这种方式更有条理</c>

367
00:18:03,517 --> 00:18:05,686
<c.magenta>首先 我们把临时等级降到三</c>

368
00:18:05,752 --> 00:18:08,222
<c.magenta>然后二 然后一 其中不需要任何猜测</c>

369
00:18:08,288 --> 00:18:09,389
<c.magenta>所以这个很有帮助</c>

370
00:18:09,656 --> 00:18:11,658
<c.magenta>现在让我们进行帧引用</c>

371
00:18:12,593 --> 00:18:14,661
<c.magenta>你已经可以看到</c>

372
00:18:14,728 --> 00:18:16,997
<c.magenta>引用帧是否更紧密了</c>

373
00:18:17,064 --> 00:18:20,634
<c.magenta>它们经常指向它们的上一帧或下一帧</c>

374
00:18:20,701 --> 00:18:22,269
<c.magenta>所以这真的改善了压缩</c>

375
00:18:22,936 --> 00:18:25,305
<c.magenta>现在让我们逐步看一下</c>

376
00:18:25,372 --> 00:18:28,809
<c.magenta>每秒只能处理30帧</c>

377
00:18:29,076 --> 00:18:32,379
<c.magenta>嗯 其中不需要任何猜测</c>

378
00:18:33,213 --> 00:18:34,982
<c.magenta>现在我们降到了每秒120帧</c>

379
00:18:35,582 --> 00:18:39,086
<c.magenta>让我们降到等级一</c>

380
00:18:40,087 --> 00:18:43,323
<c.magenta>现在等级是我们的解码器</c>

381
00:18:43,390 --> 00:18:46,260
<c.magenta>所以这就不需要猜到底要失掉哪些帧</c>

382
00:18:47,594 --> 00:18:48,996
<c.magenta>让我们回顾所学到的内容</c>

383
00:18:49,062 --> 00:18:52,966
<c.magenta>那么通过HEVC阶梯式编码</c>

384
00:18:53,333 --> 00:18:55,769
<c.magenta>有更明显的掉帧模式</c>

385
00:18:55,836 --> 00:18:58,272
<c.magenta>并且它移除了需要失掉哪些帧的猜测</c>

386
00:18:58,772 --> 00:19:01,074
<c.magenta>我们还改进了动作补偿</c>

387
00:18:58,772 --> 00:19:01,074
<c.magenta>我们还改进了动作补偿</c>

388
00:19:01,408 --> 00:19:03,544
<c.magenta>引用帧之间的距离更近了</c>

389
00:19:03,610 --> 00:19:07,281
<c.magenta>所以我们可以更多地使用</c>

390
00:19:07,347 --> 00:19:09,082
<c.magenta>我们还使用了文件注释</c>

391
00:19:09,149 --> 00:19:11,118
<c.magenta>如果你们喜欢读说明书</c>

392
00:19:11,185 --> 00:19:14,154
<c.magenta>请参看MPEG-4 第15部分的8.4章节</c>

393
00:19:14,621 --> 00:19:18,659
<c.magenta>基本上 我们使用的是样本群</c>

394
00:19:18,725 --> 00:19:21,728
<c.magenta>我们用的是样本群</c>

395
00:19:21,795 --> 00:19:24,231
<c.magenta>来获取这个信息 所以这真的很有帮助</c>

396
00:19:24,798 --> 00:19:26,633
<c.magenta>好的 我们要如何选择加入这个？</c>

397
00:19:27,267 --> 00:19:28,368
<c.magenta>你想选择加入这个</c>

398
00:19:28,435 --> 00:19:30,838
<c.magenta>如果你想创建兼容的高帧率内容</c>

399
00:19:30,904 --> 00:19:33,073
<c.magenta>你应该设置两个属性</c>

400
00:19:33,140 --> 00:19:35,642
<c.magenta>你要设置基础层和拍摄帧率</c>

401
00:19:36,143 --> 00:19:38,846
<c.magenta>首先查看你所使用的编码器是否支持</c>

402
00:19:38,912 --> 00:19:42,749
<c.magenta>然后设置BaseLayerFrameRate</c>

403
00:19:42,983 --> 00:19:45,485
<c.magenta>在我们之前的例子中</c>

404
00:19:45,552 --> 00:19:47,221
<c.magenta>然后设置ExpectedFrameRate</c>

405
00:19:47,287 --> 00:19:50,290
<c.magenta>在我们之前的例子中</c>

406
00:19:50,858 --> 00:19:54,261
<c.magenta>必须解码基础层</c>

407
00:19:54,928 --> 00:19:57,564
<c.magenta>那么现在</c>

408
00:19:57,798 --> 00:20:00,367
<c.magenta>让我们把舞台交给Brad</c>

409
00:19:57,798 --> 00:20:00,367
<c.magenta>让我们把舞台交给Brad</c>

410
00:20:00,767 --> 00:20:01,635
<c.magenta>谢谢大家</c>

411
00:20:07,207 --> 00:20:08,041
<c.magenta>谢谢Erik</c>

412
00:20:08,108 --> 00:20:10,277
<c.magenta>我是Brad Ford</c>

413
00:20:10,644 --> 00:20:14,982
<c.magenta>我要跟大家谈谈以HE开始的另一个</c>

414
00:20:17,050 --> 00:20:19,386
<c.magenta>这是接下来的演讲的大纲</c>

415
00:20:19,720 --> 00:20:21,989
<c.magenta>首先我们要看高等级的HEIF</c>

416
00:20:22,856 --> 00:20:24,825
<c.magenta>我们会从最低的等级开始</c>

417
00:20:24,892 --> 00:20:27,928
<c.magenta>我们会讲到用HEIF读写文件</c>

418
00:20:28,462 --> 00:20:30,197
<c.magenta>然后我们向上进入堆栈的顶层</c>

419
00:20:30,264 --> 00:20:34,134
<c.magenta>谈谈如何使用一般性用例</c>

420
00:20:34,701 --> 00:20:37,371
<c.magenta>最后我们要谈一个</c>

421
00:20:37,437 --> 00:20:38,539
<c.magenta>就是捕捉HEIF</c>

422
00:20:39,540 --> 00:20:41,041
<c.magenta>首先 什么是HEIF？</c>

423
00:20:42,709 --> 00:20:46,580
<c.magenta>HEIF是高频率图档格式</c>

424
00:20:46,947 --> 00:20:49,216
<c.magenta>第二个F被隐藏起来了</c>

425
00:20:49,449 --> 00:20:50,784
<c.magenta>你不用叫它HEIF…</c>

426
00:20:50,984 --> 00:20:51,818
<c.magenta>…F</c>

427
00:20:52,052 --> 00:20:53,253
<c.magenta>如果你这样做的话</c>

428
00:20:53,320 --> 00:20:55,122
<c.magenta>你只会在你最亲密的朋友们面前丢脸</c>

429
00:20:55,722 --> 00:20:59,560
<c.magenta>它是一种静止图像</c>

430
00:21:00,127 --> 00:21:03,063
<c.magenta>它是MPEG-H Part 12规格中的一种</c>

431
00:21:03,130 --> 00:21:06,867
<c.magenta>为了满足你们的好奇心</c>

432
00:21:07,201 --> 00:21:11,538
<c.magenta>然后在2015年夏季获得批准</c>

433
00:21:12,339 --> 00:21:14,975
<c.magenta>如果你们中有人了解标准机构</c>

434
00:21:15,209 --> 00:21:18,178
<c.magenta>他们的一年半就跟我们</c>

435
00:21:18,245 --> 00:21:19,947
<c.magenta>所以你知道</c>

436
00:21:21,315 --> 00:21:23,584
<c.magenta>我相信你们一定对技术细节最感兴趣</c>

437
00:21:23,650 --> 00:21:26,687
<c.magenta>这也是你们今天来这里的原因</c>

438
00:21:27,721 --> 00:21:28,555
<c.magenta>那么…</c>

439
00:21:32,593 --> 00:21:36,296
<c.magenta>我用了科学方法</c>

440
00:21:36,630 --> 00:21:39,099
<c.magenta>各派系之间的投票差别很大</c>

441
00:21:39,499 --> 00:21:45,772
<c.magenta>德国人读“hife” 法国人读“eff”</c>

442
00:21:45,839 --> 00:21:48,408
<c.magenta>而“heef”成为了最终的获胜者</c>

443
00:21:48,842 --> 00:21:53,080
<c.magenta>这个“heef”</c>

444
00:21:53,981 --> 00:21:56,683
<c.magenta>现在我的芬兰同事迅速指出</c>

445
00:21:56,750 --> 00:21:59,720
<c.magenta>诺基亚研究人员</c>

446
00:21:59,786 --> 00:22:04,591
<c.magenta>所以芬兰读音应该获胜</c>

447
00:21:59,786 --> 00:22:04,591
<c.magenta>所以芬兰读音应该获胜</c>

448
00:22:07,494 --> 00:22:09,830
<c.magenta>嗯 对于我和我们楼层的工程师来说</c>

449
00:22:10,497 --> 00:22:12,566
<c.magenta>它可以使用HEVC内部编码</c>

450
00:22:12,633 --> 00:22:16,537
<c.magenta>不出所料地压缩比有20年</c>

451
00:22:17,304 --> 00:22:19,373
<c.magenta>事实上要比它小两倍</c>

452
00:22:19,740 --> 00:22:23,310
<c.magenta>这个平均值 平均小两倍</c>

453
00:22:23,911 --> 00:22:27,214
<c.magenta>我们在大数据图像集上使用定性分析</c>

454
00:22:27,281 --> 00:22:32,119
<c.magenta>以实现这个数字</c>

455
00:22:33,754 --> 00:22:37,524
<c.magenta>它支持切断图像并压缩为单独的一格</c>

456
00:22:38,058 --> 00:22:42,129
<c.magenta>这允许更高效地分段解压大图像</c>

457
00:22:43,797 --> 00:22:47,034
<c.magenta>HEIF还特别支持辅助图像</c>

458
00:22:47,301 --> 00:22:50,170
<c.magenta>比如阿尔法、视差或深度映射</c>

459
00:22:51,572 --> 00:22:53,273
<c.magenta>这是一个深度映射的可视化灰度图</c>

460
00:22:53,340 --> 00:22:55,709
<c.magenta>是嵌在这个HEIF文件中的深度映射</c>

461
00:22:56,844 --> 00:23:00,314
<c.magenta>拥有深度信息就为你们</c>

462
00:22:56,844 --> 00:23:00,314
<c.magenta>拥有深度信息就为你们</c>

463
00:23:00,614 --> 00:23:03,450
<c.magenta>比如给背景和前景应用不同的效果</c>

464
00:23:03,750 --> 00:23:04,585
<c.magenta>就像这样</c>

465
00:23:05,719 --> 00:23:08,655
<c.magenta>在这里 我给背景应用了</c>

466
00:23:08,989 --> 00:23:10,591
<c.magenta>以及到前景的淡入筛选器</c>

467
00:23:10,657 --> 00:23:13,060
<c.magenta>那么请注意</c>

468
00:23:13,126 --> 00:23:15,028
<c.magenta>而后面的一切都是黑色的</c>

469
00:23:15,963 --> 00:23:17,297
<c.magenta>了解了深度的层次</c>

470
00:23:17,364 --> 00:23:21,268
<c.magenta>我甚至可以移动筛选器的转换点</c>

471
00:23:21,502 --> 00:23:22,769
<c.magenta>密切注视她手里的花</c>

472
00:23:24,137 --> 00:23:25,939
<c.magenta>现在只有她的手和花有颜色</c>

473
00:23:26,006 --> 00:23:27,541
<c.magenta>而其它都是黑白的</c>

474
00:23:28,809 --> 00:23:31,111
<c.magenta>你甚至可以控制前景和后景的光照</c>

475
00:23:31,178 --> 00:23:33,480
<c.magenta>分别曝光 就像这样</c>

476
00:23:34,915 --> 00:23:37,818
<c.magenta>现在 她看起来你把她P进了</c>

477
00:23:38,552 --> 00:23:40,487
<c.magenta>我的意思并不是你应该这样做</c>

478
00:23:41,822 --> 00:23:46,126
<c.magenta>这是一场关于深度的两个</c>

479
00:23:46,193 --> 00:23:48,161
<c.magenta>即507和508演讲</c>

480
00:23:48,228 --> 00:23:50,063
<c.magenta>我希望你们抽时间看一下这两个视频</c>

481
00:23:51,298 --> 00:23:55,302
<c.magenta>提到元数据 HEIF的兼容性很好</c>

482
00:23:55,369 --> 00:23:59,840
<c.magenta>它特别支持产业标准Exif和xmp</c>

483
00:24:01,508 --> 00:24:03,410
<c.magenta>HEIF并不只是用于单一图像</c>

484
00:24:03,477 --> 00:24:06,446
<c.magenta>它还支持图像序列</c>

485
00:24:06,513 --> 00:24:10,584
<c.magenta>比如连拍、支架、焦点堆栈</c>

486
00:24:11,251 --> 00:24:15,489
<c.magenta>它还用在多媒体上</c>

487
00:24:17,291 --> 00:24:18,358
<c.magenta>让我们做个演示吧 好吗？</c>

488
00:24:19,626 --> 00:24:23,564
<c.magenta>好的 这是一个作品展示</c>

489
00:24:30,571 --> 00:24:34,775
<c.magenta>好的 我要从全景开始</c>

490
00:24:35,209 --> 00:24:37,778
<c.magenta>这个来自约塞米蒂国家公园的土伦草甸</c>

491
00:24:38,445 --> 00:24:41,748
<c.magenta>看起来很不错</c>

492
00:24:41,815 --> 00:24:43,584
<c.magenta>直到你开始放大</c>

493
00:24:44,284 --> 00:24:45,118
<c.magenta>那么让我们放大吧</c>

494
00:24:46,753 --> 00:24:47,588
<c.magenta>稍微放大点儿</c>

495
00:24:48,322 --> 00:24:50,390
<c.magenta>看起来不错 让我们再放大点儿</c>

496
00:24:51,191 --> 00:24:52,693
<c.magenta>然后再放大点儿</c>

497
00:24:53,760 --> 00:24:55,262
<c.magenta>然后再放大点儿</c>

498
00:24:56,230 --> 00:24:57,464
<c.magenta>一直放大</c>

499
00:24:58,131 --> 00:25:01,768
<c.magenta>一直放大 我的天啊</c>

500
00:24:58,131 --> 00:25:01,768
<c.magenta>一直放大 我的天啊</c>

501
00:25:03,403 --> 00:25:04,271
<c.magenta>哇哦</c>

502
00:25:09,409 --> 00:25:11,411
<c.magenta>那里有车 有移动厕所</c>

503
00:25:13,380 --> 00:25:15,816
<c.magenta>我甚至可以去看一眼背景中的山峰</c>

504
00:25:18,685 --> 00:25:20,888
<c.magenta>它是如何随着我的动作</c>

505
00:25:21,455 --> 00:25:25,359
<c.magenta>这实际上是一个29亿像素的全景图</c>

506
00:25:25,826 --> 00:25:29,863
<c.magenta>大约是91,000像素乘32,000像素</c>

507
00:25:30,464 --> 00:25:33,567
<c.magenta>它的RGB TIFF文件大大超过了2GB</c>

508
00:25:33,634 --> 00:25:37,971
<c.magenta>并且我向你们保证 它足以让任何</c>

509
00:25:38,038 --> 00:25:40,674
<c.magenta>是160MB</c>

510
00:25:41,041 --> 00:25:47,381
<c.magenta>这在JPEG来说是根本不可能的</c>

511
00:25:47,981 --> 00:25:49,383
<c.magenta>HEIF没有超过最高值</c>

512
00:25:49,883 --> 00:25:55,589
<c.magenta>它支持任意大文件 并随时检查内存</c>

513
00:25:55,656 --> 00:25:58,025
<c.magenta>高效地加载和卸载片段</c>

514
00:25:58,358 --> 00:26:00,627
<c.magenta>那么当我面前摆着这个庞大的数据时</c>

515
00:25:58,358 --> 00:26:00,627
<c.magenta>那么当我面前摆着这个庞大的数据时</c>

516
00:26:00,928 --> 00:26:04,998
<c.magenta>在Photos应用中</c>

517
00:26:05,332 --> 00:26:08,068
<c.magenta>那么它还具有响应性 我可以缩放</c>

518
00:26:08,135 --> 00:26:10,637
<c.magenta>我可以缩放一整天</c>

519
00:26:19,213 --> 00:26:23,851
<c.magenta>在iOS 11和macOS 10.13</c>

520
00:26:23,917 --> 00:26:28,055
<c.magenta>我们可以读取和解码HEIF的</c>

521
00:26:28,121 --> 00:26:29,723
<c.magenta>你在这里看到的三种扩展</c>

522
00:26:29,790 --> 00:26:32,759
<c.magenta>是与如何在文件中编码主图像相关的</c>

523
00:26:34,461 --> 00:26:40,400
<c.magenta>指向包含通过HEVC压缩的主图像的</c>

524
00:26:40,467 --> 00:26:43,470
<c.magenta>HEIF文件的public.heic的HEIC</c>

525
00:26:44,171 --> 00:26:50,077
<c.magenta>第二个风格是AVCI</c>

526
00:26:50,677 --> 00:26:54,081
<c.magenta>然后其它保留.HEIF扩展</c>

527
00:26:54,147 --> 00:26:57,317
<c.magenta>可以是JPEG 也可以是</c>

528
00:26:59,186 --> 00:27:02,789
<c.magenta>对于编码和写入</c>

529
00:26:59,186 --> 00:27:02,789
<c.magenta>对于编码和写入</c>

530
00:27:02,856 --> 00:27:06,994
<c.magenta>即HEIC格式</c>

531
00:27:07,361 --> 00:27:10,531
<c.magenta>我们猜如果你很好地采用了新文件容器</c>

532
00:27:10,797 --> 00:27:12,165
<c.magenta>你可能也会采用</c>

533
00:27:12,232 --> 00:27:13,800
<c.magenta>最棒的压缩标准</c>

534
00:27:14,101 --> 00:27:18,639
<c.magenta>当前仅拥有A10融合芯片的</c>

535
00:27:19,907 --> 00:27:22,609
<c.magenta>好的 让我们从低等级看一下HEIF</c>

536
00:27:23,877 --> 00:27:28,615
<c.magenta>我们平台上读写文件的最低等级</c>

537
00:27:29,116 --> 00:27:33,253
<c.magenta>它封装读取 从文件或内存数据源</c>

538
00:27:33,320 --> 00:27:35,689
<c.magenta>使用一个叫作CGImageSource的对象</c>

539
00:27:36,590 --> 00:27:39,893
<c.magenta>它还支持写入文件或写入不可变数据</c>

540
00:27:40,060 --> 00:27:42,229
<c.magenta>使用CGImageDestination</c>

541
00:27:42,896 --> 00:27:45,232
<c.magenta>这些对象已经存在很长时间了</c>

542
00:27:45,299 --> 00:27:46,333
<c.magenta>你们很可能用过它们</c>

543
00:27:47,234 --> 00:27:51,438
<c.magenta>要在磁盘上打开一个JPEG图像文件</c>

544
00:27:51,505 --> 00:27:52,906
<c.magenta>首先创建URL</c>

545
00:27:53,640 --> 00:27:57,811
<c.magenta>然后调用CGImageSourceCreateWithURL</c>

546
00:27:58,278 --> 00:28:00,147
<c.magenta>最后是一个选项库</c>

547
00:27:58,278 --> 00:28:00,147
<c.magenta>最后是一个选项库</c>

548
00:28:00,214 --> 00:28:02,783
<c.magenta>你可以选择性地传递输入的UTI</c>

549
00:28:03,217 --> 00:28:05,485
<c.magenta>当你在磁盘上打开文件时</c>

550
00:28:05,652 --> 00:28:09,456
<c.magenta>因为可以从文件路径扩展中引用UTI</c>

551
00:28:10,290 --> 00:28:13,994
<c.magenta>一旦得到CGImageSource</c>

552
00:28:14,528 --> 00:28:18,198
<c.magenta>比如在任何索引上复制属性</c>

553
00:28:18,265 --> 00:28:20,934
<c.magenta>将会从中取出元数据 比如Exif</c>

554
00:28:21,668 --> 00:28:25,205
<c.magenta>你还可以从文件中的任何图像中</c>

555
00:28:25,372 --> 00:28:28,308
<c.magenta>对于JPEG</c>

556
00:28:28,909 --> 00:28:32,779
<c.magenta>CGImage当然像是一个承诺</c>

557
00:28:33,113 --> 00:28:37,484
<c.magenta>必要时可以使用CGImage</c>

558
00:28:37,684 --> 00:28:40,988
<c.magenta>比如当你把它渲染到CG位图情境中时</c>

559
00:28:41,688 --> 00:28:45,826
<c.magenta>你还可以通过许多选项获得一个缩略图</c>

560
00:28:46,293 --> 00:28:48,495
<c.magenta>比如你想要得到的最大尺寸</c>

561
00:28:48,695 --> 00:28:50,697
<c.magenta>如果文件中没有可用的要如何处理</c>

562
00:28:51,231 --> 00:28:53,800
<c.magenta>以及何时调用CGImageSourceCreate</c>

563
00:28:53,867 --> 00:28:56,136
<c.magenta>它会立即执行解码</c>

564
00:28:57,905 --> 00:29:01,375
<c.magenta>现在这是打开.HEIC文件的模拟代码</c>

565
00:28:57,905 --> 00:29:01,375
<c.magenta>现在这是打开.HEIC文件的模拟代码</c>

566
00:29:02,509 --> 00:29:03,944
<c.magenta>有人能指出其中的不同点吗？</c>

567
00:29:05,212 --> 00:29:06,313
<c.magenta>在这里我把它变简单了</c>

568
00:29:09,149 --> 00:29:09,983
<c.magenta>就这样</c>

569
00:29:10,484 --> 00:29:13,654
<c.magenta>它是个注释并且它是个文件路径</c>

570
00:29:14,154 --> 00:29:16,190
<c.magenta>换句话说 CGImageSource就这么管用了</c>

571
00:29:16,356 --> 00:29:19,960
<c.magenta>你没有看到的一个不同点是</c>

572
00:29:20,694 --> 00:29:24,631
<c.magenta>在最近的iOS设备和Mac上</c>

573
00:29:25,032 --> 00:29:28,936
<c.magenta>而较老的设备上是通过软件解码的</c>

574
00:29:30,470 --> 00:29:33,407
<c.magenta>关于我们刚才在演示中看到的</c>

575
00:29:34,007 --> 00:29:37,945
<c.magenta>CGImageSource可以提供</c>

576
00:29:38,011 --> 00:29:42,482
<c.magenta>通过调用</c>

577
00:29:42,549 --> 00:29:48,255
<c.magenta>并且属性库是元数据的代名词</c>

578
00:29:48,956 --> 00:29:51,859
<c.magenta>还有一个子库</c>

579
00:29:52,192 --> 00:29:54,828
<c.magenta>你可以从中找到被编码的格子的尺寸</c>

580
00:29:54,895 --> 00:29:56,797
<c.magenta>比如格子长度和格子宽度</c>

581
00:29:57,231 --> 00:30:00,834
<c.magenta>默认是编码为512乘512像素</c>

582
00:29:57,231 --> 00:30:00,834
<c.magenta>默认是编码为512乘512像素</c>

583
00:30:03,003 --> 00:30:06,273
<c.magenta>正如我们所看到的</c>

584
00:30:06,673 --> 00:30:10,010
<c.magenta>并且CGImage有个很漂亮的方法</c>

585
00:30:10,344 --> 00:30:11,945
<c.magenta>利用了分格</c>

586
00:30:12,546 --> 00:30:14,515
<c.magenta>这个调用会创建一个新CGImage</c>

587
00:30:14,581 --> 00:30:17,551
<c.magenta>只包含另一个图像的一小部分</c>

588
00:30:18,285 --> 00:30:21,522
<c.magenta>这不是个新API</c>

589
00:30:21,889 --> 00:30:23,991
<c.magenta>在HEIF中分格是被单独编码的</c>

590
00:30:24,558 --> 00:30:28,328
<c.magenta>你不必担心潜在的分格编码尺寸</c>

591
00:30:28,395 --> 00:30:31,632
<c.magenta>你只需要请求分区说你想显示或渲染</c>

592
00:30:32,366 --> 00:30:35,602
<c.magenta>并了解在底层</c>

593
00:30:35,669 --> 00:30:39,706
<c.magenta>它只解码对那个分区有必要的分格</c>

594
00:30:41,208 --> 00:30:45,679
<c.magenta>现在让我们谈谈写</c>

595
00:30:46,480 --> 00:30:48,949
<c.magenta>你 在创建CGImageDestination之后</c>

596
00:30:49,016 --> 00:30:51,418
<c.magenta>调用CGImageDestination</c>

597
00:30:54,555 --> 00:30:58,125
<c.magenta>我应该指出一点</c>

598
00:30:58,926 --> 00:31:00,761
<c.magenta>在这里我用的是AVFileType.jpg</c>

599
00:30:58,926 --> 00:31:00,761
<c.magenta>在这里我用的是AVFileType.jpg</c>

600
00:31:00,827 --> 00:31:04,331
<c.magenta>与UT类型public.jpg一样</c>

601
00:31:05,699 --> 00:31:07,701
<c.magenta>我很关心结果</c>

602
00:31:08,268 --> 00:31:11,572
<c.magenta>我用了保护 让目的文件为无</c>

603
00:31:12,139 --> 00:31:15,576
<c.magenta>现在 对于当前JPEG</c>

604
00:31:15,642 --> 00:31:19,079
<c.magenta>是如果你请求写入一个沙盒外部的文件</c>

605
00:31:19,146 --> 00:31:22,282
<c.magenta>但为了防御</c>

606
00:31:23,116 --> 00:31:25,752
<c.magenta>接下来 添加你的CG图像</c>

607
00:31:25,819 --> 00:31:29,089
<c.magenta>一次添加一个 可以伴随元数据</c>

608
00:31:29,523 --> 00:31:32,960
<c.magenta>然后当你完成后</c>

609
00:31:33,360 --> 00:31:36,563
<c.magenta>这将关闭用于编辑的容器</c>

610
00:31:37,965 --> 00:31:41,702
<c.magenta>现在 让我们看一些HEIC的写法</c>

611
00:31:44,004 --> 00:31:47,174
<c.magenta>只是文件路径扩展、UTI、注释不同</c>

612
00:31:47,741 --> 00:31:50,377
<c.magenta>在JPEG和HEIF之间</c>

613
00:31:50,444 --> 00:31:54,348
<c.magenta>即创建CGImageDestination将会失败</c>

614
00:31:54,615 --> 00:31:57,584
<c.magenta>在没有HEVC硬件编码器的设备上</c>

615
00:31:58,118 --> 00:32:00,287
<c.magenta>如果失败 目的即为无</c>

616
00:31:58,118 --> 00:32:00,287
<c.magenta>如果失败 目的即为无</c>

617
00:32:00,687 --> 00:32:03,323
<c.magenta>那么我在上一张幻灯片上</c>

618
00:32:03,690 --> 00:32:06,693
<c.magenta>在HEVC中更加重要</c>

619
00:32:06,860 --> 00:32:09,696
<c.magenta>现在有一个目的为无的新理由</c>

620
00:32:10,597 --> 00:32:13,767
<c.magenta>请一定要确保你检查这个</c>

621
00:32:13,834 --> 00:32:17,371
<c.magenta>了解你当前平台</c>

622
00:32:19,106 --> 00:32:20,874
<c.magenta>还有不值一提的是那个ImageIO</c>

623
00:32:20,941 --> 00:32:23,577
<c.magenta>已经添加了读写深度映射的功能</c>

624
00:32:23,644 --> 00:32:25,078
<c.magenta>正如我之前讲过的</c>

625
00:32:25,445 --> 00:32:28,782
<c.magenta>我们已经为HEIC实现了那个</c>

626
00:32:28,849 --> 00:32:32,019
<c.magenta>以奇怪的魔法方式</c>

627
00:32:32,419 --> 00:32:34,755
<c.magenta>我不会再深入地讲了</c>

628
00:32:34,821 --> 00:32:38,625
<c.magenta>因为它在一个</c>

629
00:32:38,859 --> 00:32:39,860
<c.magenta>是关于深度的</c>

630
00:32:39,927 --> 00:32:42,062
<c.magenta>我希望你们能看一下那些演讲的视频</c>

631
00:32:42,129 --> 00:32:46,366
<c.magenta>因为它们讲的是</c>

632
00:32:48,168 --> 00:32:50,103
<c.magenta>好的 是时候继续下一个主要话题了</c>

633
00:32:50,170 --> 00:32:52,172
<c.magenta>即高等级获取HEIF</c>

634
00:32:52,973 --> 00:32:58,345
<c.magenta>但在此之前 我感觉WWDC</c>

635
00:32:58,412 --> 00:33:01,081
<c.magenta>具有文化意义上的价值</c>

636
00:32:58,412 --> 00:33:01,081
<c.magenta>具有文化意义上的价值</c>

637
00:33:01,148 --> 00:33:03,250
<c.magenta>这就是我想让你们休息片刻的原因</c>

638
00:33:03,317 --> 00:33:04,918
<c.magenta>通过一些压缩相关的诗</c>

639
00:33:06,220 --> 00:33:07,054
<c.magenta>好的</c>

640
00:33:07,421 --> 00:33:08,255
<c.magenta>等着瞧吧</c>

641
00:33:09,389 --> 00:33:13,460
<c.magenta>JPEG这么大 但HEIF很简洁</c>

642
00:33:15,062 --> 00:33:15,896
<c.magenta>谢谢</c>

643
00:33:18,065 --> 00:33:20,100
<c.magenta>看到这个压缩相关的诗句了吧 很短</c>

644
00:33:21,401 --> 00:33:23,136
<c.magenta>你喜欢吗？你想听更多吗？</c>

645
00:33:24,104 --> 00:33:26,707
<c.magenta>好的 让我们再来一个</c>

646
00:33:29,209 --> 00:33:30,911
<c.magenta>HEVC</c>

647
00:33:32,246 --> 00:33:33,747
<c.magenta>的音节</c>

648
00:33:34,815 --> 00:33:37,251
<c.magenta>比JPEG进程多一倍</c>

649
00:33:38,151 --> 00:33:39,953
<c.magenta>谢谢大家 好了 让我们继续吧</c>

650
00:33:41,755 --> 00:33:43,290
<c.magenta>我确定他们稍后会编辑并发布它</c>

651
00:33:44,224 --> 00:33:46,159
<c.magenta>好的 我们要谈谈HEIF和PhotoKit</c>

652
00:33:46,860 --> 00:33:48,562
<c.magenta>PhotoKit其实是两个框架</c>

653
00:33:48,629 --> 00:33:51,798
<c.magenta>分别是Photos框架和PhotosUI</c>

654
00:33:51,865 --> 00:33:53,166
<c.magenta>甚至在UIKit之上</c>

655
00:33:54,968 --> 00:33:59,106
<c.magenta>当应用调整时</c>

656
00:33:59,306 --> 00:34:00,874
<c.magenta>我们只是简略地谈一下</c>

657
00:33:59,306 --> 00:34:00,874
<c.magenta>我们只是简略地谈一下</c>

658
00:34:01,074 --> 00:34:03,010
<c.magenta>并且我们会谈如何在三种</c>

659
00:34:03,076 --> 00:34:06,213
<c.magenta>图片、视频和动态图片</c>

660
00:34:06,547 --> 00:34:10,516
<c.magenta>然后我们会谈你与PHPhotoLibrary</c>

661
00:34:11,784 --> 00:34:13,320
<c.magenta>让我们简略地概括一下</c>

662
00:34:13,387 --> 00:34:17,357
<c.magenta>通过PhotoLibrary把编辑或调整</c>

663
00:34:18,225 --> 00:34:20,928
<c.magenta>你请求PHPhotoLibrary</c>

664
00:34:20,994 --> 00:34:25,032
<c.magenta>在那个变更请求中</c>

665
00:34:25,498 --> 00:34:26,600
<c.magenta>比如照片</c>

666
00:34:27,367 --> 00:34:30,637
<c.magenta>并且在资产上请求内容编辑输入</c>

667
00:34:30,704 --> 00:34:33,373
<c.magenta>以获取PHContentEditingInput</c>

668
00:34:34,474 --> 00:34:38,045
<c.magenta>这就是为你提供与你的资产</c>

669
00:34:38,110 --> 00:34:43,550
<c.magenta>比如UIImage、URL、AVAsset</c>

670
00:34:44,418 --> 00:34:47,054
<c.magenta>接下来你要创建一个</c>

671
00:34:47,788 --> 00:34:49,956
<c.magenta>通过与内容编辑输入一起调用</c>

672
00:34:50,724 --> 00:34:53,393
<c.magenta>编辑输出会告诉你</c>

673
00:34:53,460 --> 00:34:58,599
<c.magenta>要把全部已渲染的文件放在磁盘上</c>

674
00:34:59,066 --> 00:35:00,467
<c.magenta>然后实施你的编辑</c>

675
00:34:59,066 --> 00:35:00,467
<c.magenta>然后实施你的编辑</c>

676
00:35:00,734 --> 00:35:04,471
<c.magenta>在编辑输入中为你提供的那个媒体上</c>

677
00:35:04,771 --> 00:35:06,974
<c.magenta>然后你将它们写入指定位置</c>

678
00:35:07,574 --> 00:35:11,879
<c.magenta>最后 PHPhotoLibrary验证你的修改</c>

679
00:35:12,145 --> 00:35:14,581
<c.magenta>并将它们作为一个整体接受或拒绝修改</c>

680
00:35:16,917 --> 00:35:20,320
<c.magenta>那么renderedOutputImages的规则没变</c>

681
00:35:20,387 --> 00:35:23,023
<c.magenta>但你可能没有意识到它们已经生效了</c>

682
00:35:23,524 --> 00:35:28,228
<c.magenta>在iOS 10中 你的输出图像</c>

683
00:35:28,729 --> 00:35:30,731
<c.magenta>Exif定向为1</c>

684
00:35:30,898 --> 00:35:33,333
<c.magenta>也就是如果需要实现任何旋转</c>

685
00:35:33,400 --> 00:35:37,037
<c.magenta>它会合并到</c>

686
00:35:37,504 --> 00:35:38,772
<c.magenta>你可能忽视了这个细节</c>

687
00:35:38,839 --> 00:35:43,277
<c.magenta>因为很可能你要编辑的99%的内容</c>

688
00:35:43,343 --> 00:35:45,546
<c.magenta>然后你只需要将其输出位同一个格式</c>

689
00:35:45,913 --> 00:35:49,516
<c.magenta>但现在 你看到输入内容的扩散</c>

690
00:35:49,716 --> 00:35:50,817
<c.magenta>所以你应该注意</c>

691
00:35:50,884 --> 00:35:54,454
<c.magenta>你必须仍然将全部输出内容</c>

692
00:35:54,821 --> 00:35:56,490
<c.magenta>Exif定向为1</c>

693
00:35:58,258 --> 00:35:59,293
<c.magenta>这是代码</c>

694
00:35:59,893 --> 00:36:03,263
<c.magenta>首先做一个CIImage</c>

695
00:35:59,893 --> 00:36:03,263
<c.magenta>首先做一个CIImage</c>

696
00:36:03,697 --> 00:36:07,668
<c.magenta>你可以从内容编辑输入文件URL中</c>

697
00:36:08,468 --> 00:36:10,003
<c.magenta>然后应用编辑</c>

698
00:36:10,204 --> 00:36:15,876
<c.magenta>在这里 关于定向</c>

699
00:36:16,677 --> 00:36:20,781
<c.magenta>然后 当我完成后</c>

700
00:36:20,848 --> 00:36:22,482
<c.magenta>写JPEGRepresentation</c>

701
00:36:23,283 --> 00:36:25,919
<c.magenta>如果你之前曾用过这个样板代码</c>

702
00:36:25,986 --> 00:36:29,323
<c.magenta>它仍然能在这里继续使用</c>

703
00:36:29,389 --> 00:36:31,191
<c.magenta>无论输入是什么</c>

704
00:36:32,926 --> 00:36:36,129
<c.magenta>我们第二个引用调整用例与食品有关</c>

705
00:36:36,196 --> 00:36:39,166
<c.magenta>规则也与iOS 10相同</c>

706
00:36:39,399 --> 00:36:42,369
<c.magenta>即无论输入电影内容的格式是什么</c>

707
00:36:42,703 --> 00:36:47,140
<c.magenta>你都必须生产用H.264压缩的电影</c>

708
00:36:48,075 --> 00:36:50,110
<c.magenta>是的 即便源电影是HEVC</c>

709
00:36:50,177 --> 00:36:53,747
<c.magenta>你仍需要将其渲染为H.264作为输出</c>

710
00:36:57,651 --> 00:37:00,988
<c.magenta>这是一些编辑像这样的</c>

711
00:36:57,651 --> 00:37:00,988
<c.magenta>这是一些编辑像这样的</c>

712
00:37:01,221 --> 00:37:05,325
<c.magenta>首先你从PHContentEditingInput中</c>

713
00:37:06,360 --> 00:37:09,296
<c.magenta>然后你可以创建一个</c>

714
00:37:09,363 --> 00:37:11,798
<c.magenta>在AVVideoComposition中</c>

715
00:37:12,933 --> 00:37:14,801
<c.magenta>并且你可以获得CIImages</c>

716
00:37:14,868 --> 00:37:18,338
<c.magenta>然后请求一个对象 名字是一长串</c>

717
00:37:18,405 --> 00:37:21,909
<c.magenta>AVAsynchronous</c>

718
00:37:22,509 --> 00:37:25,979
<c.magenta>你得到了CIImage</c>

719
00:37:26,480 --> 00:37:29,349
<c.magenta>当你渲染完成后</c>

720
00:37:29,983 --> 00:37:30,984
<c.magenta>然后作为最后一个步骤</c>

721
00:37:31,285 --> 00:37:35,155
<c.magenta>你要把你的AVAsset导出到</c>

722
00:37:35,222 --> 00:37:38,325
<c.magenta>其URL为PHContentEditingOutput</c>

723
00:37:38,926 --> 00:37:39,993
<c.magenta>现在这是最重要的部分</c>

724
00:37:40,494 --> 00:37:44,698
<c.magenta>要使用的预设是</c>

725
00:37:44,898 --> 00:37:49,503
<c.magenta>或任意现有的预设 正如Erik所说的</c>

726
00:37:50,204 --> 00:37:53,874
<c.magenta>请不要使用名字类似的新预设</c>

727
00:37:54,107 --> 00:37:56,710
<c.magenta>因为你会变更请求 从而以报错而告终</c>

728
00:37:58,745 --> 00:38:00,781
<c.magenta>最后 通过Live Photo</c>

729
00:37:58,745 --> 00:38:00,781
<c.magenta>最后 通过Live Photo</c>

730
00:38:00,848 --> 00:38:04,651
<c.magenta>Live Photo的视频内容应用调整</c>

731
00:38:05,786 --> 00:38:07,588
<c.magenta>我要讲的是</c>

732
00:38:07,654 --> 00:38:09,423
<c.magenta>画面的移动方面</c>

733
00:38:09,489 --> 00:38:12,492
<c.magenta>当你在Live Photo之间滑来滑去时</c>

734
00:38:12,559 --> 00:38:16,763
<c.magenta>或当你压感触控图片时</c>

735
00:38:17,331 --> 00:38:18,832
<c.magenta>这是最简单的用例</c>

736
00:38:18,899 --> 00:38:22,269
<c.magenta>因为你永远不会直接处理</c>

737
00:38:22,669 --> 00:38:25,639
<c.magenta>你传递了CIImages 并且生成CIImages</c>

738
00:38:26,039 --> 00:38:27,741
<c.magenta>然后就以你的名义完成了编码</c>

739
00:38:29,009 --> 00:38:30,844
<c.magenta>这里有很多很棒的代码可以看</c>

740
00:38:30,911 --> 00:38:32,579
<c.magenta>但我不会在这上面花太多时间</c>

741
00:38:32,646 --> 00:38:35,382
<c.magenta>稍后你可以暂停一下视频 再仔细看</c>

742
00:38:35,883 --> 00:38:37,050
<c.magenta>其中最重要的一点是</c>

743
00:38:37,117 --> 00:38:40,721
<c.magenta>你在Live Photo电影中筛选完每一帧后</c>

744
00:38:41,054 --> 00:38:44,157
<c.magenta>你可以让Live Photo内容</c>

745
00:38:44,224 --> 00:38:46,159
<c.magenta>到一个指定URL 就是这样</c>

746
00:38:46,960 --> 00:38:50,564
<c.magenta>Live Photo将使用H.264被保存下来</c>

747
00:38:51,098 --> 00:38:53,800
<c.magenta>就像静态图片那样被编码为JPEG</c>

748
00:38:55,669 --> 00:38:58,772
<c.magenta>好的 让我们继续看</c>

749
00:38:59,506 --> 00:39:02,209
<c.magenta>当从图库中显示内容时</c>

750
00:38:59,506 --> 00:39:02,209
<c.magenta>当从图库中显示内容时</c>

751
00:39:02,476 --> 00:39:06,013
<c.magenta>你使用一个叫作</c>

752
00:39:06,647 --> 00:39:09,149
<c.magenta>这个为你提供了三个的其中一个</c>

753
00:39:09,883 --> 00:39:12,219
<c.magenta>如果是图像的话你可以得到</c>

754
00:39:12,286 --> 00:39:14,321
<c.magenta>如果是视频的话可以得到</c>

755
00:39:14,655 --> 00:39:17,691
<c.magenta>或如果是Live Photo内容的话</c>

756
00:39:18,192 --> 00:39:19,927
<c.magenta>在这里你不需要进行任何修改</c>

757
00:39:20,127 --> 00:39:23,063
<c.magenta>因为这些都是高等级的提取</c>

758
00:39:23,130 --> 00:39:25,299
<c.magenta>你不用关心源来自哪里</c>

759
00:39:25,365 --> 00:39:28,368
<c.magenta>你要做的就是显示它们</c>

760
00:39:30,437 --> 00:39:34,241
<c.magenta>接下来是备份 当PhotoKit用于备份时</c>

761
00:39:34,675 --> 00:39:37,177
<c.magenta>你很可能想获取原始资产</c>

762
00:39:37,244 --> 00:39:39,479
<c.magenta>比如HEIC文件和QuickTime电影</c>

763
00:39:39,813 --> 00:39:42,616
<c.magenta>并且你通过</c>

764
00:39:43,016 --> 00:39:45,085
<c.magenta>它为以原生格式提供给你</c>

765
00:39:45,419 --> 00:39:47,087
<c.magenta>这里唯一需要注意的是</c>

766
00:39:47,688 --> 00:39:50,157
<c.magenta>你可能会获得与之前不同的文件类型</c>

767
00:39:50,224 --> 00:39:51,725
<c.magenta>所以要准备好接受这一点</c>

768
00:39:53,627 --> 00:39:55,762
<c.magenta>第三个也是最复杂的情况是共享</c>

769
00:39:56,730 --> 00:39:57,731
<c.magenta>在这里</c>

770
00:39:57,798 --> 00:39:59,900
<c.magenta>你即将离开Apple漂亮的围墙花园</c>

771
00:40:00,334 --> 00:40:02,769
<c.magenta>你不得不思考你自己的兼容性需求</c>

772
00:40:03,170 --> 00:40:04,838
<c.magenta>原生资产可以吗？</c>

773
00:40:05,172 --> 00:40:07,708
<c.magenta>你可能会帮你客户一个忙</c>

774
00:40:07,774 --> 00:40:11,845
<c.magenta>通过为他们提供HEIC内容</c>

775
00:40:11,912 --> 00:40:16,550
<c.magenta>那么在这里你必须权衡</c>

776
00:40:17,618 --> 00:40:20,287
<c.magenta>如果你选择兼容性高于功能</c>

777
00:40:20,354 --> 00:40:23,257
<c.magenta>你可以确保格式兼容性</c>

778
00:40:23,323 --> 00:40:25,325
<c.magenta>通过明确指定输出格式</c>

779
00:40:25,692 --> 00:40:28,262
<c.magenta>对于图片 你只需要检查UTType</c>

780
00:40:28,729 --> 00:40:32,299
<c.magenta>看是否遵从JPEG</c>

781
00:40:32,366 --> 00:40:34,334
<c.magenta>如果不遵从 就明确地转换它</c>

782
00:40:34,768 --> 00:40:38,438
<c.magenta>对于视频 你总能强制性兼容</c>

783
00:40:38,505 --> 00:40:40,274
<c.magenta>用预设导出会话</c>

784
00:40:40,340 --> 00:40:45,045
<c.magenta>你知道那将提交H.264</c>

785
00:40:47,181 --> 00:40:50,217
<c.magenta>好了 进入我们今天的最后一个话题</c>

786
00:40:50,617 --> 00:40:52,853
<c.magenta>最后这是一个我知道要讲什么的话题</c>

787
00:40:53,887 --> 00:40:56,723
<c.magenta>让我们看第二个压缩相关的俳句</c>

788
00:40:57,291 --> 00:40:59,326
<c.magenta>我觉得很有意思 开始吧</c>

789
00:41:00,127 --> 00:41:02,196
<c.magenta>HEIF 一个容器</c>

790
00:41:03,230 --> 00:41:08,268
<c.magenta>比HEVC的压缩效果好四倍</c>

791
00:41:09,970 --> 00:41:14,107
<c.magenta>思考一下 好的</c>

792
00:41:14,174 --> 00:41:16,643
<c.magenta>它应该是一个号的编解码器 对吧？</c>

793
00:41:18,512 --> 00:41:20,814
<c.magenta>好的 那么Erik提到</c>

794
00:41:21,014 --> 00:41:26,753
<c.magenta>AVCapturePhotoOutput添加了对通过</c>

795
00:41:27,421 --> 00:41:29,156
<c.magenta>这个类是去年引入的</c>

796
00:41:29,223 --> 00:41:31,825
<c.magenta>作为AVCapture</c>

797
00:41:32,159 --> 00:41:34,962
<c.magenta>它擅长处理复杂的静态图像捕捉请求</c>

798
00:41:35,028 --> 00:41:37,998
<c.magenta>当你需要随时间提交多个资产的时候</c>

799
00:41:38,832 --> 00:41:42,669
<c.magenta>它目前是我们平台上</c>

800
00:41:43,403 --> 00:41:47,841
<c.magenta>Bayer RAW图像 Apple P3宽彩色图像</c>

801
00:41:48,208 --> 00:41:50,878
<c.magenta>在iOS 11中 这是我们平台上</c>

802
00:41:50,944 --> 00:41:53,881
<c.magenta>捕捉HEIF内容的唯一界面</c>

803
00:41:54,381 --> 00:41:56,116
<c.magenta>（HEIF捕捉支持）</c>

804
00:41:56,183 --> 00:42:01,054
<c.magenta>A10芯片设备上支持HEIF捕捉</c>

805
00:41:56,183 --> 00:42:01,054
<c.magenta>A10芯片设备上支持HEIF捕捉</c>

806
00:42:01,121 --> 00:42:05,592
<c.magenta>也就是iPhone 7 Plus、iPhone 7</c>

807
00:42:07,828 --> 00:42:09,696
<c.magenta>我们会做一个简短的刷新器</c>

808
00:42:09,763 --> 00:42:12,165
<c.magenta>和接收图像 通过图片输出</c>

809
00:42:12,766 --> 00:42:16,970
<c.magenta>首先 你要填写一个</c>

810
00:42:17,037 --> 00:42:18,739
<c.magenta>这个类似于请求对象</c>

811
00:42:18,972 --> 00:42:22,376
<c.magenta>就是指定你想在图片捕捉中</c>

812
00:42:22,743 --> 00:42:24,344
<c.magenta>就是橘色框里的内容</c>

813
00:42:25,078 --> 00:42:27,447
<c.magenta>在这里我表明我想要自动闪光</c>

814
00:42:27,514 --> 00:42:31,185
<c.magenta>意思是仅适用闪光灯进行图片输出</c>

815
00:42:31,251 --> 00:42:33,654
<c.magenta>仅当灯光太暗时使用</c>

816
00:42:34,321 --> 00:42:38,225
<c.magenta>我还请求预览尺寸的图像</c>

817
00:42:38,425 --> 00:42:40,794
<c.magenta>以便我可以在屏幕上放一个快速预览</c>

818
00:42:41,361 --> 00:42:43,931
<c.magenta>我不知道最终的纵横比是多少</c>

819
00:42:43,997 --> 00:42:48,035
<c.magenta>所以我只请求为1440乘1440</c>

820
00:42:48,869 --> 00:42:52,873
<c.magenta>然后通过我给照片输出提供的</c>

821
00:42:53,373 --> 00:42:57,845
<c.magenta>捕捉请求的委托传递这个设置对象</c>

822
00:43:00,881 --> 00:43:03,784
<c.magenta>现在顶部的箭头显示何时提出请求</c>

823
00:43:04,218 --> 00:43:08,288
<c.magenta>现在我要追踪这个包裹递送</c>

824
00:43:08,455 --> 00:43:12,759
<c.magenta>PhotoOutput把我的委托调回来了</c>

825
00:43:13,360 --> 00:43:16,196
<c.magenta>在我提出请求后 PhotoOutput很快</c>

826
00:43:16,263 --> 00:43:17,531
<c.magenta>就进行了第一个委托回调</c>

827
00:43:17,598 --> 00:43:21,468
<c.magenta>即willBeginCapture</c>

828
00:43:21,535 --> 00:43:25,873
<c.magenta>它传给你这个蓝色框里的内容</c>

829
00:43:26,373 --> 00:43:29,309
<c.magenta>这就像一封礼貌的邮件 比如说</c>

830
00:43:29,376 --> 00:43:32,880
<c.magenta>“我们收到了你的订单”</c>

831
00:43:33,580 --> 00:43:38,252
<c.magenta>这个ResolvedPhotoSetting会清除</c>

832
00:43:38,452 --> 00:43:40,787
<c.magenta>你一开始在设置中设的不明确的内容</c>

833
00:43:41,154 --> 00:43:44,925
<c.magenta>在本例中 我们现在可以看到</c>

834
00:43:45,292 --> 00:43:48,428
<c.magenta>那么如果它是真 我们都知道就会闪光</c>

835
00:43:48,829 --> 00:43:53,200
<c.magenta>同时我们现在也知道</c>

836
00:43:55,569 --> 00:43:58,572
<c.magenta>最终在我们得到</c>

837
00:43:58,639 --> 00:44:00,741
<c.magenta>我们 我们收到的第二个回调是</c>

838
00:43:58,639 --> 00:44:00,741
<c.magenta>我们 我们收到的第二个回调是</c>

839
00:44:00,807 --> 00:44:03,310
<c.magenta>willCapturePhoto</c>

840
00:44:03,777 --> 00:44:07,581
<c.magenta>这是与快门声音同时提交的</c>

841
00:44:09,082 --> 00:44:10,484
<c.magenta>然后此后不久</c>

842
00:44:10,551 --> 00:44:13,387
<c.magenta>就执行了didCapturePhoto</c>

843
00:44:13,654 --> 00:44:16,490
<c.magenta>就在图像被完全曝光和读出来后</c>

844
00:44:17,824 --> 00:44:20,661
<c.magenta>然后一般会传递一些时间</c>

845
00:44:20,928 --> 00:44:24,665
<c.magenta>或几张图像时</c>

846
00:44:25,365 --> 00:44:27,067
<c.magenta>当图片准备好后 你会收到</c>

847
00:44:27,134 --> 00:44:30,337
<c.magenta>didFinishProcessingPhoto</c>

848
00:44:30,804 --> 00:44:33,640
<c.magenta>并向你提交图片</c>

849
00:44:33,907 --> 00:44:36,810
<c.magenta>在这里我得到了主图像以及预览图像</c>

850
00:44:37,010 --> 00:44:38,912
<c.magenta>它们是在同一个回调中同时提交的</c>

851
00:44:40,347 --> 00:44:42,916
<c.magenta>最后你总是会得到</c>

852
00:44:43,083 --> 00:44:46,920
<c.magenta>didFinishCaptureFor</c>

853
00:44:47,321 --> 00:44:49,489
<c.magenta>这是最后要提交的</c>

854
00:44:49,656 --> 00:44:53,861
<c.magenta>就好像PhotoOutput在说</c>

855
00:44:54,027 --> 00:44:57,364
<c.magenta>很高兴与你一起合作</c>

856
00:45:00,868 --> 00:45:03,837
<c.magenta>这个编程模型是非常灵活的</c>

857
00:45:03,904 --> 00:45:07,908
<c.magenta>我们有一些很成功的例子</c>

858
00:45:07,975 --> 00:45:09,676
<c.magenta>给委托添加新方法</c>

859
00:45:09,743 --> 00:45:11,011
<c.magenta>当我们添加新功能时</c>

860
00:45:11,745 --> 00:45:14,348
<c.magenta>比如我们添加了RAW图像支持</c>

861
00:45:14,882 --> 00:45:16,116
<c.magenta>这是那个的回调</c>

862
00:45:16,917 --> 00:45:18,552
<c.magenta>我们添加了Live Photo的支持</c>

863
00:45:18,952 --> 00:45:21,655
<c.magenta>这是那个的单独回调</c>

864
00:45:22,322 --> 00:45:24,858
<c.magenta>那么看起来HEIF也会简便地添加</c>

865
00:45:24,925 --> 00:45:27,094
<c.magenta>到这个非常灵活的编程范例中</c>

866
00:45:27,561 --> 00:45:29,062
<c.magenta>很遗憾 并不是</c>

867
00:45:30,697 --> 00:45:33,934
<c.magenta>CoreMedia SampleBuffer中的不相容性</c>

868
00:45:34,301 --> 00:45:35,903
<c.magenta>现在是并且一直是</c>

869
00:45:35,969 --> 00:45:38,705
<c.magenta>AVFoundation领域的一个难题</c>

870
00:45:39,239 --> 00:45:43,010
<c.magenta>我们从iOS 4起就开始</c>

871
00:45:44,444 --> 00:45:47,481
<c.magenta>它是一个很小的媒体数据容器</c>

872
00:45:47,548 --> 00:45:50,050
<c.magenta>音频样本、文本、闭合字幕</c>

873
00:45:51,652 --> 00:45:55,255
<c.magenta>另一方面 HEIF是一种文件格式</c>

874
00:45:55,489 --> 00:45:56,990
<c.magenta>它可以处理很多种媒体类型</c>

875
00:45:58,158 --> 00:46:03,096
<c.magenta>同时 CMSampleBuffers可以 当然了</c>

876
00:45:58,158 --> 00:46:03,096
<c.magenta>同时 CMSampleBuffers可以 当然了</c>

877
00:46:03,697 --> 00:46:07,534
<c.magenta>但那个HEVC压缩视频跟</c>

878
00:46:07,601 --> 00:46:09,536
<c.magenta>HEIF集装箱化的HEVC不一样</c>

879
00:46:09,903 --> 00:46:14,875
<c.magenta>请记住 HEIF喜欢把元素</c>

880
00:46:15,242 --> 00:46:18,779
<c.magenta>你不能存储那种HEVC压缩</c>

881
00:46:18,846 --> 00:46:22,616
<c.magenta>在QuickTime电影的帧中</c>

882
00:46:23,350 --> 00:46:24,885
<c.magenta>在这点上 你可能会问自己</c>

883
00:46:25,152 --> 00:46:27,387
<c.magenta>如果我们有这种根本意义上的紧张</c>

884
00:46:27,454 --> 00:46:30,090
<c.magenta>在文件容器和媒体容器之间</c>

885
00:46:30,290 --> 00:46:33,760
<c.magenta>我们为什么这么多年</c>

886
00:46:33,927 --> 00:46:36,597
<c.magenta>图片输出和静态图片输出？</c>

887
00:46:37,264 --> 00:46:39,366
<c.magenta>嗯 答案是JPEG</c>

888
00:46:40,501 --> 00:46:43,837
<c.magenta>我们用这个来逃避问题</c>

889
00:46:44,338 --> 00:46:47,508
<c.magenta>图片编解码器 与JFIF 文件格式</c>

890
00:46:47,674 --> 00:46:49,910
<c.magenta>实际上是不能区分开的</c>

891
00:46:50,210 --> 00:46:51,745
<c.magenta>这两个都是图片</c>

892
00:46:52,379 --> 00:46:54,848
<c.magenta>在另一个容器中</c>

893
00:46:56,550 --> 00:47:00,120
<c.magenta>那么我们那个困境的答案是</c>

894
00:46:56,550 --> 00:47:00,120
<c.magenta>那么我们那个困境的答案是</c>

895
00:47:00,420 --> 00:47:04,725
<c.magenta>内存包装器 用于图像结果</c>

896
00:47:05,325 --> 00:47:07,794
<c.magenta>这是对CMSampleBuffer的插入式替换</c>

897
00:47:09,229 --> 00:47:13,133
<c.magenta>事实上比CMSampleBuffer快</c>

898
00:47:13,200 --> 00:47:16,570
<c.magenta>它的提交</c>

899
00:47:16,737 --> 00:47:19,473
<c.magenta>所以你能得到比iOS 10中更好的性能</c>

900
00:47:20,741 --> 00:47:24,778
<c.magenta>它是100%不可变</c>

901
00:47:24,845 --> 00:47:28,081
<c.magenta>所以它在代码模型之间共享也会更容易</c>

902
00:47:29,216 --> 00:47:31,752
<c.magenta>它还得到了集装箱化数据的支持</c>

903
00:47:31,818 --> 00:47:33,420
<c.magenta>我稍后再谈这个</c>

904
00:47:34,588 --> 00:47:36,423
<c.magenta>让我们谈谈它的贡献</c>

905
00:47:36,890 --> 00:47:39,960
<c.magenta>它有与图片相关的关键信息的权限</c>

906
00:47:40,194 --> 00:47:42,162
<c.magenta>何时被捕捉</c>

907
00:47:42,229 --> 00:47:45,465
<c.magenta>是否为RAW、Bayer RAW图片</c>

908
00:47:46,066 --> 00:47:49,903
<c.magenta>对于未压缩或RAW图片来说</c>

909
00:47:50,737 --> 00:47:54,842
<c.magenta>同时边频带信息也跟随</c>

910
00:47:55,175 --> 00:47:58,745
<c.magenta>你能请求的第二个</c>

911
00:47:59,279 --> 00:48:03,717
<c.magenta>你现在还可以请求</c>

912
00:47:59,279 --> 00:48:03,717
<c.magenta>你现在还可以请求</c>

913
00:48:03,984 --> 00:48:06,887
<c.magenta>并将其作为缩略图嵌入容器中</c>

914
00:48:08,722 --> 00:48:11,058
<c.magenta>ImageIO属性样式元数据库</c>

915
00:48:11,124 --> 00:48:15,329
<c.magenta>是它可以包含Exif</c>

916
00:48:16,163 --> 00:48:21,335
<c.magenta>通过iPhone 7 Plus的双摄像头</c>

917
00:48:21,401 --> 00:48:23,971
<c.magenta>通过AVCapturePhoto 结果也一样</c>

918
00:48:25,472 --> 00:48:28,942
<c.magenta>AVCapturePhoto还提供</c>

919
00:48:29,009 --> 00:48:32,212
<c.magenta>比如引用resolvedSettings对象</c>

920
00:48:32,279 --> 00:48:34,114
<c.magenta>我们曾在之前的幻灯片中看到过</c>

921
00:48:34,548 --> 00:48:38,752
<c.magenta>此外 它还可以让你简便地获取</c>

922
00:48:39,119 --> 00:48:43,290
<c.magenta>比如 如果你提出RAW加HEIC的请求</c>

923
00:48:43,490 --> 00:48:45,158
<c.magenta>你应该会得到两张照片</c>

924
00:48:45,492 --> 00:48:49,496
<c.magenta>那么照片计数访问器将会告诉你</c>

925
00:48:50,697 --> 00:48:53,066
<c.magenta>如果这个照片是同等捕捉的一部分</c>

926
00:48:53,133 --> 00:48:57,371
<c.magenta>比如自动曝光三或四个不同的EV值</c>

927
00:48:57,905 --> 00:49:01,608
<c.magenta>它会告诉你哪个设置会导致这种结果</c>

928
00:48:57,905 --> 00:49:01,608
<c.magenta>它会告诉你哪个设置会导致这种结果</c>

929
00:49:01,675 --> 00:49:04,311
<c.magenta>以及它的序列号</c>

930
00:49:04,378 --> 00:49:07,080
<c.magenta>以及镜头稳定性是否良好</c>

931
00:49:09,116 --> 00:49:12,719
<c.magenta>AVCapturePhoto</c>

932
00:49:12,786 --> 00:49:16,523
<c.magenta>所以它很友好 并能移动到</c>

933
00:49:16,590 --> 00:49:18,425
<c.magenta>你用来处理图片的其它框架上</c>

934
00:49:18,892 --> 00:49:22,896
<c.magenta>首先也是最重要的</c>

935
00:49:22,963 --> 00:49:24,531
<c.magenta>如果你指向写入文件</c>

936
00:49:24,865 --> 00:49:28,168
<c.magenta>并且它还可以生成一个CGImage</c>

937
00:49:28,902 --> 00:49:29,837
<c.magenta>或是…</c>

938
00:49:29,903 --> 00:49:32,172
<c.magenta>抱歉 全尺寸图片或预览图片</c>

939
00:49:33,974 --> 00:49:36,710
<c.magenta>现在选择加入以获得AVCapturePhoto</c>

940
00:49:36,777 --> 00:49:39,646
<c.magenta>而不是CMSampleBuffer的机制是</c>

941
00:49:39,713 --> 00:49:43,984
<c.magenta>一个新代理方法</c>

942
00:49:44,051 --> 00:49:47,888
<c.magenta>就是这里的这个 很简单</c>

943
00:49:48,121 --> 00:49:51,825
<c.magenta>它提供AVCapturePhoto</c>

944
00:49:52,459 --> 00:49:56,029
<c.magenta>现在 无论是否有报错</c>

945
00:49:56,296 --> 00:49:58,699
<c.magenta>并获得与之相关的尽可能多的信息</c>

946
00:49:58,765 --> 00:50:00,968
<c.magenta>即使没有支持像素数据</c>

947
00:49:58,765 --> 00:50:00,968
<c.magenta>即使没有支持像素数据</c>

948
00:50:03,170 --> 00:50:07,674
<c.magenta>接下来的两个很长的</c>

949
00:50:07,975 --> 00:50:10,511
<c.magenta>以引导你使用新的、更好的方法</c>

950
00:50:11,044 --> 00:50:15,482
<c.magenta>为获得RAW或未压缩或压缩图片</c>

951
00:50:15,549 --> 00:50:19,820
<c.magenta>我们经常会执行独立回调</c>

952
00:50:19,987 --> 00:50:21,722
<c.magenta>将为你提供一个CMSampleBuffer</c>

953
00:50:21,788 --> 00:50:25,492
<c.magenta>或didFinishProcessingRawPhoto</c>

954
00:50:26,260 --> 00:50:29,096
<c.magenta>你不需要这样</c>

955
00:50:29,162 --> 00:50:33,467
<c.magenta>你只需要使用那一个新的就可以了</c>

956
00:50:35,335 --> 00:50:38,939
<c.magenta>好的 在iOS 10中</c>

957
00:50:39,540 --> 00:50:41,842
<c.magenta>对于压缩 你可以得到的就是JPEG</c>

958
00:50:42,209 --> 00:50:46,513
<c.magenta>对于未压缩格式</c>

959
00:50:46,713 --> 00:50:48,715
<c.magenta>当然了 我们支持Bayer RAW</c>

960
00:50:49,416 --> 00:50:53,987
<c.magenta>现在在iOS 11中</c>

961
00:50:54,254 --> 00:50:56,256
<c.magenta>我们还添加了一个新规格</c>

962
00:50:56,757 --> 00:51:00,394
<c.magenta>你所请求的每一个图片格式</c>

963
00:50:56,757 --> 00:51:00,394
<c.magenta>你所请求的每一个图片格式</c>

964
00:51:00,460 --> 00:51:04,064
<c.magenta>也由一个文件容器格式所支持</c>

965
00:51:04,131 --> 00:51:09,102
<c.magenta>换句话说 含蓄地 你所捕捉的每一张</c>

966
00:51:09,770 --> 00:51:13,907
<c.magenta>对于HEVC 隐含的容器是HEIC</c>

967
00:51:14,308 --> 00:51:18,045
<c.magenta>对于JPEG是JFIF</c>

968
00:51:18,512 --> 00:51:21,248
<c.magenta>对于RAW格式 跟以前一样是DNG</c>

969
00:51:21,782 --> 00:51:24,751
<c.magenta>现在为什么文件集装箱化是一件好事？</c>

970
00:51:25,452 --> 00:51:28,822
<c.magenta>答案是性能</c>

971
00:51:29,656 --> 00:51:32,759
<c.magenta>那么这是你获得JPEG</c>

972
00:51:33,794 --> 00:51:36,263
<c.magenta>PhotoOutput</c>

973
00:51:36,430 --> 00:51:39,032
<c.magenta>一个全尺寸图像和一个预览图像</c>

974
00:51:40,067 --> 00:51:42,569
<c.magenta>且它会附加一些元数据 比如Exif</c>

975
00:51:42,970 --> 00:51:45,105
<c.magenta>如果你想以任何方式改变那个</c>

976
00:51:45,172 --> 00:51:48,175
<c.magenta>你需要等待 直到它提交回调</c>

977
00:51:48,342 --> 00:51:50,577
<c.magenta>然后你会获得包含Exif的附件</c>

978
00:51:50,744 --> 00:51:54,248
<c.magenta>篡改它并重新将其添加到</c>

979
00:51:54,781 --> 00:51:58,652
<c.magenta>然后当把它写入磁盘时</c>

980
00:51:59,119 --> 00:52:03,590
<c.magenta>JPEGDataPhotoRepresentation</c>

981
00:51:59,119 --> 00:52:03,590
<c.magenta>JPEGDataPhotoRepresentation</c>

982
00:52:04,324 --> 00:52:07,261
<c.magenta>结果是一个JPEG数据</c>

983
00:52:07,861 --> 00:52:11,632
<c.magenta>那么在代码中 它看起来很简单</c>

984
00:52:12,032 --> 00:52:15,702
<c.magenta>因为我们合并了预览图像</c>

985
00:52:15,903 --> 00:52:20,407
<c.magenta>我们必须从屏幕尺寸大小的图片</c>

986
00:52:20,874 --> 00:52:24,778
<c.magenta>压缩到JPEG</c>

987
00:52:24,845 --> 00:52:30,784
<c.magenta>并重写全尺寸图像</c>

988
00:52:31,084 --> 00:52:33,754
<c.magenta>只因为你想包含一个缩略图</c>

989
00:52:33,954 --> 00:52:36,990
<c.magenta>和你的图像一起</c>

990
00:52:37,324 --> 00:52:38,559
<c.magenta>一点也没效率</c>

991
00:52:39,760 --> 00:52:41,929
<c.magenta>现在通过新方式</c>

992
00:52:42,329 --> 00:52:46,133
<c.magenta>让你提前指定在容器中想要得到什么</c>

993
00:52:47,067 --> 00:52:51,071
<c.magenta>如果它第一次有足够的信息</c>

994
00:52:51,338 --> 00:52:53,874
<c.magenta>那么就会在你获得</c>

995
00:52:55,075 --> 00:52:57,444
<c.magenta>你的实现方式是填写一些附加功能</c>

996
00:52:57,511 --> 00:52:59,179
<c.magenta>在AVCapturePhotoSettings中</c>

997
00:52:59,580 --> 00:53:02,516
<c.magenta>这次你可以提前指定</c>

998
00:52:59,580 --> 00:53:02,516
<c.magenta>这次你可以提前指定</c>

999
00:53:02,583 --> 00:53:04,551
<c.magenta>以及文件类型（可选）</c>

1000
00:53:05,485 --> 00:53:09,156
<c.magenta>你指定要添加的元数据 如GPS位置</c>

1001
00:53:09,223 --> 00:53:12,426
<c.magenta>你现在甚至可以在发起请求之前实现了</c>

1002
00:53:12,860 --> 00:53:15,128
<c.magenta>你还可以告诉它</c>

1003
00:53:15,195 --> 00:53:19,633
<c.magenta>并且我希望它采用这些规格 ”</c>

1004
00:53:21,034 --> 00:53:24,404
<c.magenta>然后你就把你的请求提交给</c>

1005
00:53:24,705 --> 00:53:29,643
<c.magenta>它会给你的委托提供一个</c>

1006
00:53:30,177 --> 00:53:34,248
<c.magenta>这个AVCapturePhoto由已经存在于</c>

1007
00:53:34,781 --> 00:53:36,884
<c.magenta>它已经在分格中被压缩了</c>

1008
00:53:37,451 --> 00:53:40,988
<c.magenta>它已经嵌入了那个</c>

1009
00:53:41,054 --> 00:53:43,991
<c.magenta>它已经把元数据放在了正确的位置</c>

1010
00:53:44,825 --> 00:53:47,828
<c.magenta>所以你要把它写入</c>

1011
00:53:48,595 --> 00:53:51,031
<c.magenta>photo.fileDataRepresentation</c>

1012
00:53:51,431 --> 00:53:53,600
<c.magenta>比之前例子中的那个简单多了</c>

1013
00:53:54,168 --> 00:53:59,306
<c.magenta>它要做的就是一个简单的字节复制</c>

1014
00:53:59,806 --> 00:54:03,010
<c.magenta>没有额外的压缩或缩减或其它操作</c>

1015
00:53:59,806 --> 00:54:03,010
<c.magenta>没有额外的压缩或缩减或其它操作</c>

1016
00:54:03,076 --> 00:54:04,778
<c.magenta>它都提前做好了</c>

1017
00:54:05,112 --> 00:54:08,415
<c.magenta>这样更加高效</c>

1018
00:54:08,749 --> 00:54:11,084
<c.magenta>有必要获得全部性能</c>

1019
00:54:11,151 --> 00:54:14,254
<c.magenta>就是我之前谈到过的</c>

1020
00:54:15,722 --> 00:54:19,660
<c.magenta>现在让我们切换到一些</c>

1021
00:54:20,360 --> 00:54:24,998
<c.magenta>第一个是要用静态捕捉</c>

1022
00:54:26,366 --> 00:54:30,637
<c.magenta>当你在拍摄电影时拍摄HEIC照片时</c>

1023
00:54:30,904 --> 00:54:33,273
<c.magenta>与压缩视频用的是同一个硬件模块</c>

1024
00:54:33,340 --> 00:54:37,244
<c.magenta>这就是执行H.264或HEVC压缩的硬件</c>

1025
00:54:37,878 --> 00:54:43,116
<c.magenta>如果你想编码HEIC文件</c>

1026
00:54:43,350 --> 00:54:45,619
<c.magenta>当HEVC为压缩格式时</c>

1027
00:54:46,420 --> 00:54:49,423
<c.magenta>硬件模块可能非常繁忙</c>

1028
00:54:49,489 --> 00:54:54,294
<c.magenta>如果你正在捕捉高带域的视频</c>

1029
00:54:55,362 --> 00:54:59,666
<c.magenta>视频有即时截止时间</c>

1030
00:55:00,000 --> 00:55:03,136
<c.magenta>意思是可能会等很长时间</c>

1031
00:55:03,770 --> 00:55:08,542
<c.magenta>并且也意味着它们比原本要大20%</c>

1032
00:55:08,842 --> 00:55:11,478
<c.magenta>因为编码器忙于使用全部功能</c>

1033
00:55:11,545 --> 00:55:14,381
<c.magenta>如果它不需要赶那个</c>

1034
00:55:14,448 --> 00:55:16,216
<c.magenta>每秒30帧或60帧</c>

1035
00:55:16,950 --> 00:55:19,620
<c.magenta>那么我们的建议是</c>

1036
00:55:19,887 --> 00:55:24,424
<c.magenta>同时也捕捉静态图像</c>

1037
00:55:24,591 --> 00:55:29,663
<c.magenta>离开HEVC编码器</c>

1038
00:55:32,299 --> 00:55:35,802
<c.magenta>另一个考虑是HEVC和HEIF连发</c>

1039
00:55:36,069 --> 00:55:39,039
<c.magenta>这是你用力压住按钮的位置</c>

1040
00:55:40,407 --> 00:55:45,345
<c.magenta>一个恒定的帧速率 也许每秒10帧</c>

1041
00:55:46,246 --> 00:55:49,416
<c.magenta>HEVC编码 很明显</c>

1042
00:55:49,716 --> 00:55:53,887
<c.magenta>它要提交一个比JPEG大小</c>

1043
00:55:54,288 --> 00:55:56,657
<c.magenta>因此 HEVC编码需要的时间也更长</c>

1044
00:55:57,324 --> 00:56:02,129
<c.magenta>现在我们已经基准了</c>

1045
00:55:57,324 --> 00:56:02,129
<c.magenta>现在我们已经基准了</c>

1046
00:56:02,663 --> 00:56:09,169
<c.magenta>可以达到连拍的最小请求10 fps</c>

1047
00:56:09,469 --> 00:56:12,306
<c.magenta>但如果你需要捕捉比那更高的帧速率</c>

1048
00:56:12,472 --> 00:56:15,509
<c.magenta>我们的建议是返回JPEG来进行连拍</c>

1049
00:56:17,845 --> 00:56:21,014
<c.magenta>我们今天了解了很多压缩相关的信息</c>

1050
00:56:21,081 --> 00:56:27,487
<c.magenta>如果我不在WWDC与你们分享我的想法</c>

1051
00:56:27,988 --> 00:56:31,058
<c.magenta>那么我不能把这个就这样挂在那儿</c>

1052
00:56:31,825 --> 00:56:33,794
<c.magenta>全球开发者大会</c>

1053
00:56:34,628 --> 00:56:35,662
<c.magenta>九个音节</c>

1054
00:56:36,797 --> 00:56:40,634
<c.magenta>W-W-D-C 八个音节</c>

1055
00:56:41,068 --> 00:56:43,971
<c.magenta>这就像是有史以来最糟糕的压缩格式</c>

1056
00:56:44,037 --> 00:56:48,709
<c.magenta>它失真了 它像是.1对1压缩比</c>

1057
00:56:48,775 --> 00:56:50,577
<c.magenta>甚至比无失真的JPEG更糟糕</c>

1058
00:56:51,011 --> 00:56:53,247
<c.magenta>那么作为一个服务给我</c>

1059
00:56:53,614 --> 00:56:55,282
<c.magenta>在大会余下的时间里</c>

1060
00:56:55,349 --> 00:57:00,921
<c.magenta>请只参加那些Dub-Dub的大会</c>

1061
00:56:55,349 --> 00:57:00,921
<c.magenta>请只参加那些Dub-Dub的大会</c>

1062
00:57:03,557 --> 00:57:05,592
<c.magenta>好的 让我们总结一下</c>

1063
00:57:06,793 --> 00:57:11,798
<c.magenta>HEVC电影的一般性内容</c>

1064
00:57:11,865 --> 00:57:15,569
<c.magenta>对于在iOS上捕捉的内容也小2倍</c>

1065
00:57:16,170 --> 00:57:20,874
<c.magenta>同时 iOS 11和High Sierra</c>

1066
00:57:21,041 --> 00:57:23,577
<c.magenta>有时是软件 有时是硬件</c>

1067
00:57:24,178 --> 00:57:27,447
<c.magenta>并且创建HEVC内容</c>

1068
00:57:27,514 --> 00:57:30,384
<c.magenta>新的捕捉API或新的导出API</c>

1069
00:57:30,884 --> 00:57:35,756
<c.magenta>此外 我们了解了HEIC文件</c>

1070
00:57:36,256 --> 00:57:40,761
<c.magenta>并且iOS 11和macOS上</c>

1071
00:57:41,128 --> 00:57:46,500
<c.magenta>捕捉仅支持iOS并且配有A10芯片</c>

1072
00:57:46,667 --> 00:57:49,536
<c.magenta>你可以通过</c>

1073
00:57:50,671 --> 00:57:54,675
<c.magenta>要获取更多信息</c>

1074
00:57:56,276 --> 00:57:59,246
<c.magenta>我还想提供一些</c>

1075
00:57:59,479 --> 00:58:02,649
<c.magenta>列表中的第一个 高效率图档格式</c>

1076
00:57:59,479 --> 00:58:02,649
<c.magenta>列表中的第一个 高效率图档格式</c>

1077
00:58:02,716 --> 00:58:04,451
<c.magenta>是直奔视频而去的</c>

1078
00:58:04,952 --> 00:58:10,057
<c.magenta>这场演讲是真的深入研究</c>

1079
00:58:10,424 --> 00:58:14,328
<c.magenta>这是一场很棒很棒的演讲</c>

1080
00:58:14,628 --> 00:58:16,196
<c.magenta>演讲人是戴维德 所以你可以</c>

1081
00:58:16,263 --> 00:58:18,465
<c.magenta>同时感受一下很棒的意大利口音</c>

1082
00:58:19,466 --> 00:58:23,036
<c.magenta>还有 HEIF和HEVC简介</c>

1083
00:58:23,237 --> 00:58:27,407
<c.magenta>提供了一个关于我们今天</c>

1084
00:58:27,708 --> 00:58:31,178
<c.magenta>最后是深度演讲 我引用了很多次</c>

1085
00:58:31,245 --> 00:58:33,814
<c.magenta>它们有许多针对我们在HEIF中</c>

1086
00:58:33,881 --> 00:58:36,783
<c.magenta>存储深度的辅助图像格式的补充</c>

1087
00:58:38,318 --> 00:58:40,153
<c.magenta>谢谢大家 祝你们在接下来的</c>
