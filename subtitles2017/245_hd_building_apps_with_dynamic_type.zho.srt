1
00:00:24,516 --> 00:00:27,846
[掌声]

2
00:00:28,346 --> 00:00:30,126
&gt;&gt; 大家好欢迎你们

3
00:00:30,126 --> 00:00:31,566
来到 Building Apps with Dynamic

4
00:00:31,566 --> 00:00:31,696
Type（使用动态字体构建 app）

5
00:00:32,426 --> 00:00:34,096
我叫 Clare

6
00:00:34,096 --> 00:00:35,436
和我的同事 Nandini

7
00:00:35,436 --> 00:00:36,576
很高兴能够与你们分享

8
00:00:36,576 --> 00:00:37,976
如何能让你的 app 

9
00:00:38,026 --> 00:00:40,466
在任何字体大小下都看起来很好

10
00:00:42,176 --> 00:00:43,876
今天我们先谈谈

11
00:00:43,876 --> 00:00:45,706
什么是 Dynamic Type 以及为什么

12
00:00:45,706 --> 00:00:46,446
提出这个功能

13
00:00:46,446 --> 00:00:48,526
接着我们将会看到

14
00:00:48,646 --> 00:00:50,046
在 iOS 11 中 Dynamic Type 有什么新的进步

15
00:00:51,096 --> 00:00:52,136
再之后我们会看到一些

16
00:00:52,136 --> 00:00:53,866
参考指导和你们可用使用的 API

17
00:00:53,866 --> 00:00:55,856
用到你自己的 app 中最后

18
00:00:55,856 --> 00:00:57,306
我们会展示所有这些

19
00:00:57,386 --> 00:00:58,906
在一个示例 app 中是怎么做的

20
00:01:01,416 --> 00:01:04,446
首先什么是 Dynamic Type

21
00:01:06,676 --> 00:01:08,606
Dynamic Type 是一个

22
00:01:08,606 --> 00:01:10,686
允许用户在屏幕上自定义

23
00:01:10,686 --> 00:01:13,796
字体大小的功能

24
00:01:13,936 --> 00:01:15,286
比如有些用户可能

25
00:01:15,286 --> 00:01:17,626
喜欢更小的字体

26
00:01:17,626 --> 00:01:18,796
这样他们可以在屏幕上看到更多内容

27
00:01:22,166 --> 00:01:23,666
有些人可能会喜欢更大的字体

28
00:01:23,666 --> 00:01:24,596
因为它会

29
00:01:24,596 --> 00:01:26,086
读起来更舒服

30
00:01:26,776 --> 00:01:28,926
但是 Dynamic Type 不仅仅限于

31
00:01:29,016 --> 00:01:30,396
用户的偏好

32
00:01:33,236 --> 00:01:34,946
很多用户可能感受过

33
00:01:34,946 --> 00:01:36,846
眼睛干涩当他们在

34
00:01:36,846 --> 00:01:37,876
默认字号下阅读很长时间之后

35
00:01:42,446 --> 00:01:43,716
有些人可能只是

36
00:01:43,716 --> 00:01:45,756
由于年纪增长而视力下降

37
00:01:49,076 --> 00:01:51,026
而有的人可能是

38
00:01:51,026 --> 00:01:52,396
视力情况很差导致

39
00:01:52,396 --> 00:01:53,776
他们几乎无法阅读

40
00:01:54,276 --> 00:01:55,256
默认字号的文字

41
00:01:56,456 --> 00:01:58,166
对于这些用户 Dynamic Type

42
00:01:58,166 --> 00:01:59,856
就不仅仅是一种偏好

43
00:01:59,856 --> 00:02:02,256
而是一种实际需求通过

44
00:01:59,856 --> 00:02:02,256
而是一种实际需求通过

45
00:02:02,256 --> 00:02:03,936
让你的 app 支持 Dynamic Type

46
00:02:03,936 --> 00:02:05,646
你可以允许这些用户使用

47
00:02:05,646 --> 00:02:06,436
你的 app 并且获得很好的

48
00:02:06,436 --> 00:02:06,976
用户体验

49
00:02:12,046 --> 00:02:13,416
Dynamic Type 的设置

50
00:02:13,466 --> 00:02:15,106
在“设置”下的

51
00:02:15,106 --> 00:02:15,996
“显示和亮度”中

52
00:02:16,736 --> 00:02:17,896
它最开始有

53
00:02:17,896 --> 00:02:18,976
其中不同的字体大小你可以

54
00:02:18,976 --> 00:02:20,616
从中选择默认字体

55
00:02:20,616 --> 00:02:21,236
在中间

56
00:02:24,116 --> 00:02:25,306
你可以到你的

57
00:02:25,306 --> 00:02:26,986
“辅助功能”设置中

58
00:02:26,986 --> 00:02:29,816
使用五个更大字体

59
00:02:31,066 --> 00:02:32,596
这些字体是为

60
00:02:32,756 --> 00:02:34,556
视力不好的用户设计的

61
00:02:35,196 --> 00:02:37,306
这些字体从

62
00:02:37,306 --> 00:02:40,796
比默认稍微大点到特别大都有

63
00:02:42,636 --> 00:02:43,746
现在看到这个你可能会

64
00:02:43,746 --> 00:02:45,686
想你到底是不是

65
00:02:45,686 --> 00:02:47,236
需要字体变的这么大

66
00:02:47,236 --> 00:02:48,906
我们来看一个例子

67
00:02:48,906 --> 00:02:49,906
看看它为什么是有用的

68
00:02:54,316 --> 00:02:56,376
这是一个手机 app

69
00:02:56,376 --> 00:02:58,186
左边我们是把它

70
00:02:58,186 --> 00:03:00,076
放大成最大字号不包括

71
00:02:58,186 --> 00:03:00,076
放大成最大字号不包括

72
00:03:00,076 --> 00:03:01,166
“辅助功能”设置里的大小

73
00:03:01,876 --> 00:03:03,726
在右边的我们把它设置成了

74
00:03:03,726 --> 00:03:05,406
更大的字体

75
00:03:06,186 --> 00:03:06,946
现在我们从

76
00:03:06,946 --> 00:03:07,806
视力差的人的视角来看

77
00:03:12,046 --> 00:03:13,216
视力差的人看事物

78
00:03:13,216 --> 00:03:14,286
比我们看事物的距离要近一些

79
00:03:15,466 --> 00:03:16,426
请看到左边的版本

80
00:03:16,426 --> 00:03:18,646
已经完全无法阅读了

81
00:03:19,476 --> 00:03:20,786
但是右边的版本

82
00:03:20,786 --> 00:03:22,126
还是可以看清楚的尽管

83
00:03:22,126 --> 00:03:22,716
是字迹模糊的.

84
00:03:24,066 --> 00:03:25,706
所以字体大小可以很大程度的

85
00:03:25,706 --> 00:03:27,426
对你的 app 的可读性造成影响

86
00:03:27,426 --> 00:03:28,726
这就是为什么

87
00:03:28,726 --> 00:03:29,626
你的 app 需要

88
00:03:29,626 --> 00:03:31,086
支持所有的

89
00:03:31,086 --> 00:03:31,976
Dynamic Type 字体

90
00:03:38,216 --> 00:03:39,546
这就是 Dynamic Type

91
00:03:39,546 --> 00:03:40,766
现在我们来看一看

92
00:03:40,766 --> 00:03:42,326
在 iOS 11 中 Dynamic Type 有什么新的进步

93
00:03:43,286 --> 00:03:44,596
最大的改变是

94
00:03:44,596 --> 00:03:46,336
Dynamic Type 已经被

95
00:03:46,336 --> 00:03:48,266
广泛的提高了并应用于

96
00:03:48,266 --> 00:03:50,106
所有的 iOS 设备

97
00:03:51,016 --> 00:03:52,566
当我们开始开发 iOS

98
00:03:52,566 --> 00:03:56,776
11时我们有三个目标

99
00:03:56,876 --> 00:03:58,716
第一字体必须足够大

100
00:03:58,716 --> 00:04:00,846
让用户能够阅读

101
00:03:58,716 --> 00:04:00,846
让用户能够阅读

102
00:04:00,846 --> 00:04:02,096
换句话说文字必须和

103
00:04:02,096 --> 00:04:03,526
Dynamic Type 大小一致

104
00:04:03,946 --> 00:04:07,926
第二文字必须可辨认度很高

105
00:04:08,846 --> 00:04:09,976
它不可以有不必要的截断

106
00:04:09,976 --> 00:04:11,706
也不可以

107
00:04:11,706 --> 00:04:12,976
发生重叠或被剪切

108
00:04:15,276 --> 00:04:17,766
第三我们希望得到一个 app 的 UI 

109
00:04:17,766 --> 00:04:19,486
在任何字体大小下都看起来美观

110
00:04:20,706 --> 00:04:23,416
如果想了解更多关于

111
00:04:23,416 --> 00:04:25,436
新一代 iOS11 的 Dynamic Type

112
00:04:25,436 --> 00:04:26,986
背后的设计理念

113
00:04:27,046 --> 00:04:28,166
请查看昨天的 Design for

114
00:04:28,166 --> 00:04:28,976
Everyone 演讲

115
00:04:33,416 --> 00:04:34,906
现在我们来看一些例子

116
00:04:34,906 --> 00:04:36,076
看看我们改变了什么

117
00:04:36,526 --> 00:04:37,266
这是设置 app

118
00:04:37,846 --> 00:04:38,856
请注意它是如何

119
00:04:38,856 --> 00:04:40,326
完美适应各种字体大小的

120
00:04:43,566 --> 00:04:45,106
这是另一个例子“日历” 

121
00:04:46,146 --> 00:04:47,546
请看所有的文字是

122
00:04:47,546 --> 00:04:49,576
随着 Dynamic Type 缩放的

123
00:04:49,576 --> 00:04:51,786
有些文字比如事件时间

124
00:04:52,406 --> 00:04:53,386
使用了不同的构图

125
00:04:53,386 --> 00:04:53,976
来适应更大的字体

126
00:04:59,046 --> 00:05:00,356
有些情况下

127
00:04:59,046 --> 00:05:00,356
有些情况下

128
00:05:00,356 --> 00:05:01,626
我们不需要与 Dynamic Type 一致

129
00:05:01,976 --> 00:05:04,346
比如在选项卡栏中如果我们

130
00:05:04,346 --> 00:05:06,076
把这里的字体放大

131
00:05:06,076 --> 00:05:07,386
选项卡栏会占用

132
00:05:07,386 --> 00:05:08,596
主要内容太多的空间

133
00:05:09,346 --> 00:05:12,226
但是现在在 in iOS 11 中如果你

134
00:05:12,226 --> 00:05:13,646
选择了

135
00:05:14,016 --> 00:05:16,106
Dynamic Type 设置中五个大字体之一

136
00:05:16,446 --> 00:05:18,516
你可以长按其中的

137
00:05:18,516 --> 00:05:19,496
一个按钮

138
00:05:20,086 --> 00:05:21,476
比如语音信箱选项

139
00:05:22,026 --> 00:05:24,146
我们会有一个更大的

140
00:05:24,146 --> 00:05:24,826
图标显示在屏幕中间

141
00:05:31,126 --> 00:05:32,276
这是对 iOS11 中改变的内容的

142
00:05:32,276 --> 00:05:33,256
一些举例

143
00:05:33,866 --> 00:05:34,866
现在我们来看一些

144
00:05:34,866 --> 00:05:36,266
API 的使用说明你们可以

145
00:05:36,266 --> 00:05:39,036
用到自己的 app 中

146
00:05:39,216 --> 00:05:40,586
我会从四个方面来谈

147
00:05:41,866 --> 00:05:43,336
首先我们先来看如何

148
00:05:43,336 --> 00:05:44,656
将你的字体大小与

149
00:05:44,656 --> 00:05:45,226
Dynamic Type 缩放一致

150
00:05:46,596 --> 00:05:48,356
第二我们来看你如何

151
00:05:48,356 --> 00:05:50,226
把更大字体放入

152
00:05:50,226 --> 00:05:50,776
你的 app 的界面中

153
00:05:52,436 --> 00:05:53,746
第三我们会看一个

154
00:05:53,746 --> 00:05:55,456
表示图的具体的常见的例子

155
00:05:57,296 --> 00:05:58,726
最后我们将会看到

156
00:05:58,726 --> 00:06:00,676
图像如何和

157
00:05:58,726 --> 00:06:00,676
图像如何和

158
00:06:00,676 --> 00:06:00,976
Dynamic Type 完美共处

159
00:06:06,386 --> 00:06:08,616
那么首先我们先将字体

160
00:06:08,616 --> 00:06:10,166
缩放到 Dynamic Type

161
00:06:10,916 --> 00:06:12,666
最简单的方法就是

162
00:06:12,666 --> 00:06:14,256
使用 iOS 内置的文本样式

163
00:06:16,316 --> 00:06:17,646
这是一个我们全部的文本

164
00:06:17,646 --> 00:06:19,896
样式的清单还有它们

165
00:06:19,896 --> 00:06:21,776
在默认设置下的字体大小

166
00:06:22,746 --> 00:06:24,346
如果你的用户选择了

167
00:06:24,346 --> 00:06:26,216
另一个字体大小这些字体的

168
00:06:26,216 --> 00:06:26,856
大小也会改变

169
00:06:31,196 --> 00:06:32,456
对于已经

170
00:06:32,456 --> 00:06:33,796
在你的 app 中使用了文本样式的人

171
00:06:33,796 --> 00:06:36,626
首先谢谢你们

172
00:06:36,626 --> 00:06:38,126
其次在 iOS 11 中有一个

173
00:06:38,126 --> 00:06:39,456
重要的改变你们需要

174
00:06:39,456 --> 00:06:39,986
加以注意

175
00:06:41,026 --> 00:06:43,476
在 iOS 11 之前所有的文本

176
00:06:43,476 --> 00:06:45,166
样式都适用七种

177
00:06:45,166 --> 00:06:46,246
标准大小

178
00:06:46,866 --> 00:06:49,336
然而只有正文内容的样式

179
00:06:49,636 --> 00:06:50,796
会适用五种

180
00:06:50,926 --> 00:06:52,296
辅助功能中的大小

181
00:06:52,836 --> 00:06:56,506
在 iOS 11 中所有的文本样式

182
00:06:56,506 --> 00:06:58,506
都适用所有的12中文字大小

183
00:06:59,036 --> 00:07:00,116
因此如果你在使用我们的文本样式

184
00:06:59,036 --> 00:07:00,116
因此如果你在使用我们的文本样式

185
00:07:00,186 --> 00:07:01,246
你将可以免费获得

186
00:07:01,246 --> 00:07:01,966
所有12种字体的支持

187
00:07:07,046 --> 00:07:09,066
如果想在 Interface

188
00:07:09,116 --> 00:07:10,566
Builder 里使用文本样式进入 Attribute

189
00:07:10,756 --> 00:07:13,756
Inspector 然后在你的视图中选择更改字体

190
00:07:15,256 --> 00:07:16,236
默认情况下这会是

191
00:07:16,236 --> 00:07:18,286
系统中的17号字

192
00:07:18,666 --> 00:07:19,706
意思是它不会根据

193
00:07:19,706 --> 00:07:20,806
Dynamic Type 而更改

194
00:07:21,466 --> 00:07:22,946
但你如果点击那个“T”按钮

195
00:07:23,186 --> 00:07:24,106
你就可以选择一个文本样式

196
00:07:24,236 --> 00:07:25,436
这些样式会进行缩放

197
00:07:30,056 --> 00:07:31,986
另外在 iOS 11 中你可以

198
00:07:31,986 --> 00:07:33,656
勾选 Automatically Adjust

199
00:07:33,656 --> 00:07:34,536
Font 选项

200
00:07:35,186 --> 00:07:36,396
这意味着如果用户

201
00:07:36,396 --> 00:07:38,226
更改了他们的字体大小

202
00:07:38,226 --> 00:07:39,766
而你的 app 正在运行时

203
00:07:39,766 --> 00:07:41,146
你的界面会自动更新它的字体

204
00:07:41,146 --> 00:07:42,476
让它变成新的字体大小

205
00:07:42,476 --> 00:07:43,456
所以我们强烈建议你

206
00:07:43,456 --> 00:07:43,976
在你的所有界面都勾选这个选项

207
00:07:49,376 --> 00:07:51,296
在代码中使用文本样式也很方便

208
00:07:52,236 --> 00:07:52,756
你可以使用

209
00:07:52,756 --> 00:07:54,696
preferredFont(forTextStyle) API

210
00:07:55,356 --> 00:07:56,906
为文本样式获取一个字体

211
00:07:56,906 --> 00:07:59,296
然后你可以使用

212
00:07:59,296 --> 00:08:00,886
adjustsFontForContentSize

213
00:07:59,296 --> 00:08:00,886
adjustsFontForContentSize

214
00:08:00,926 --> 00:08:02,986
Category 属性来确保

215
00:08:02,986 --> 00:08:03,986
你的界面会更新字体

216
00:08:03,986 --> 00:08:04,956
当文字大小发生改变时

217
00:08:11,126 --> 00:08:12,496
但是如果你不能使用文本样式时怎么办？

218
00:08:13,756 --> 00:08:15,476
也许你的设计

219
00:08:15,476 --> 00:08:16,616
要求使用自定义字体

220
00:08:17,766 --> 00:08:19,676
好消息是在 iOS 11 中

221
00:08:20,026 --> 00:08:21,796
你可以很轻易的获得那些

222
00:08:21,796 --> 00:08:23,136
跟 Dynamic Type 可以完美适应的字体

223
00:08:26,236 --> 00:08:27,676
比如说你有一些代码

224
00:08:27,786 --> 00:08:29,026
把字体属性赋值给了

225
00:08:29,026 --> 00:08:30,426
一个标签用来自定义

226
00:08:30,426 --> 00:08:30,976
你所选择的字体

227
00:08:34,285 --> 00:08:36,166
在 iOS 11 中你可以使用

228
00:08:36,166 --> 00:08:39,106
全新的 UIFontMetrics 类来缩放

229
00:08:39,106 --> 00:08:40,395
那个字体使它可以

230
00:08:40,466 --> 00:08:42,316
变大或变小取决于

231
00:08:42,316 --> 00:08:42,976
用户的字体大小

232
00:08:43,515 --> 00:08:45,726
[掌声]

233
00:08:46,226 --> 00:08:46,806
谢谢

234
00:08:47,516 --> 00:08:50,046
[掌声]

235
00:08:50,546 --> 00:08:51,766
在这个例子中我们使用了

236
00:08:51,766 --> 00:08:53,346
默认的字体规格

237
00:08:53,346 --> 00:08:54,826
也就是说我们使用了

238
00:08:54,826 --> 00:08:56,346
正文文字样式的字体规格

239
00:08:56,776 --> 00:08:58,626
这就意味着正文文字

240
00:08:58,836 --> 00:09:00,596
对于某个用户来说可能放大了百分之五十

241
00:08:58,836 --> 00:09:00,596
对于某个用户来说可能放大了百分之五十

242
00:09:00,596 --> 00:09:02,436
而你的字体同时

243
00:09:02,436 --> 00:09:03,916
也会放大百分之五十

244
00:09:04,506 --> 00:09:07,256
如果想效果更好你可以选择

245
00:09:07,256 --> 00:09:08,756
一种特定的文字样式

246
00:09:08,756 --> 00:09:09,896
让你的字体与之一致

247
00:09:10,616 --> 00:09:11,766
那么举个例子如果你有一种

248
00:09:11,766 --> 00:09:13,286
字体你用它作为

249
00:09:13,336 --> 00:09:14,906
你的 app 的标题文字的样式你可能

250
00:09:14,906 --> 00:09:16,466
会选择使用

251
00:09:16,466 --> 00:09:17,696
我们缩放 title1 的方式来处理它

252
00:09:23,196 --> 00:09:25,176
关于网页界面的最后一点说明

253
00:09:25,386 --> 00:09:26,906
你们很多人可能都有网页界面

254
00:09:26,906 --> 00:09:27,896
在你的 iOS app 中展示

255
00:09:29,096 --> 00:09:30,586
你应该使它们也适应

256
00:09:30,586 --> 00:09:31,506
Dynamic Type

257
00:09:32,156 --> 00:09:33,776
要做到这一点你可以使用

258
00:09:33,776 --> 00:09:36,286
-apple-system-body 字体

259
00:09:36,286 --> 00:09:37,786
它会让你获得正文样式字体

260
00:09:37,866 --> 00:09:39,636
能适应用户的

261
00:09:39,636 --> 00:09:41,056
动态排版

262
00:09:42,156 --> 00:09:44,186
请注意这只可以

263
00:09:44,186 --> 00:09:45,896
在苹果设备上使用

264
00:09:45,896 --> 00:09:46,806
如果你想在

265
00:09:46,856 --> 00:09:47,866
别的平台上使用同样的网页

266
00:09:47,866 --> 00:09:49,716
你要确保你已经

267
00:09:49,746 --> 00:09:51,566
正确设置了备用字体

268
00:09:52,776 --> 00:09:55,076
然后对于你的其他样式

269
00:09:55,076 --> 00:09:56,626
你可以定义它们的字体大小

270
00:09:56,626 --> 00:09:57,716
通过相对单元调整然后

271
00:09:57,746 --> 00:09:58,536
这样它们就会相应地缩放了

272
00:10:04,516 --> 00:10:06,096
这就是你怎样

273
00:10:06,096 --> 00:10:07,486
为 Dynamic Type 缩放字体的方法

274
00:10:07,996 --> 00:10:09,246
现在我们来看一看你如何才能

275
00:10:09,246 --> 00:10:10,476
在你的 app 界面中容纳更大的字体

276
00:10:15,216 --> 00:10:16,316
比如说我们现在有一些

277
00:10:16,646 --> 00:10:18,586
默认大小的文字

278
00:10:18,586 --> 00:10:19,736
你可以把这些白色的边框

279
00:10:19,736 --> 00:10:20,766
想像成在屏幕上的可用区域

280
00:10:23,356 --> 00:10:25,086
那么第一步我们首先缩放字体

281
00:10:29,166 --> 00:10:29,846
我们遇到了一个问题

282
00:10:30,256 --> 00:10:31,286
现在文字超出了屏幕范围

283
00:10:31,286 --> 00:10:33,406
而你的用户将无法

284
00:10:33,406 --> 00:10:35,346
看到白色边框外的任何内容

285
00:10:36,636 --> 00:10:38,556
为了让文字不超出

286
00:10:38,556 --> 00:10:39,396
屏幕我们可以增加一个

287
00:10:39,396 --> 00:10:39,976
尾部约束条件

288
00:10:44,236 --> 00:10:45,916
但现在我们还是遇到了问题

289
00:10:45,916 --> 00:10:46,886
因为文字被截断了

290
00:10:47,676 --> 00:10:48,966
结果是

291
00:10:48,966 --> 00:10:50,366
你的用户将不能看到

292
00:10:50,366 --> 00:10:50,646
所有的文字

293
00:10:52,296 --> 00:10:53,676
要真正解决这个问题我们

294
00:10:55,146 --> 00:10:57,236
把文字自动分行这样就可以

295
00:10:57,306 --> 00:10:58,696
让文字要变多大就变多大

296
00:10:58,696 --> 00:10:59,506
而且可以全部显示出来

297
00:11:05,126 --> 00:11:06,316
要在 Interface

298
00:11:06,316 --> 00:11:07,606
Builder 实现文字自动换行你可以使用

299
00:11:07,606 --> 00:11:09,416
Attribute Inspector 然后

300
00:11:09,506 --> 00:11:10,816
在你的标签中调整 Lines 属性

301
00:11:12,076 --> 00:11:13,306
默认情况下它被设置为

302
00:11:13,306 --> 00:11:15,236
一行但你如果把它设为 0

303
00:11:15,236 --> 00:11:16,716
它就允许你的文字

304
00:11:16,716 --> 00:11:18,196
自动换成内容

305
00:11:18,196 --> 00:11:19,436
所需要的行数

306
00:11:22,116 --> 00:11:23,346
你也可以用代码做

307
00:11:23,346 --> 00:11:24,286
通过将 Lines 属性的

308
00:11:24,286 --> 00:11:24,946
数目设为 0

309
00:11:31,266 --> 00:11:32,586
好的我们来看另一个

310
00:11:32,586 --> 00:11:33,966
经常发生的情况

311
00:11:34,576 --> 00:11:37,036
当你在写你的 app 时

312
00:11:37,036 --> 00:11:37,886
你会想到

313
00:11:37,886 --> 00:11:40,496
默认字体大小

314
00:11:40,496 --> 00:11:42,126
你可能很想把间距设为一个恒定值

315
00:11:43,326 --> 00:11:44,366
所以你可能会得到

316
00:11:44,416 --> 00:11:46,606
这样的两个标签它们的基线

317
00:11:46,606 --> 00:11:48,886
之间的距离是恒定的 40

318
00:11:49,806 --> 00:11:52,526
这在默认字体下看着不错

319
00:11:53,406 --> 00:11:55,646
但是一旦你开始

320
00:11:55,646 --> 00:11:56,856
适用 Dynamic Type 

321
00:11:56,856 --> 00:11:58,116
你就可能会遇到这样的问题

322
00:11:58,116 --> 00:11:59,156
文字会发生重合

323
00:12:00,876 --> 00:12:03,766
我们真正需要的是一种

324
00:12:03,766 --> 00:12:04,736
动态的间距

325
00:12:04,736 --> 00:12:05,976
可以应对各种字体

326
00:12:11,086 --> 00:12:13,376
在 iOS 11 中你可以通过

327
00:12:13,636 --> 00:12:15,076
新的 Auto Layout System

328
00:12:15,076 --> 00:12:15,976
Spacing Constraints 来完成

329
00:12:17,066 --> 00:12:18,586
你可以在两个基线之间

330
00:12:18,586 --> 00:12:20,566
定义间距而 Auto

331
00:12:20,566 --> 00:12:21,876
Layout 会自动找出

332
00:12:21,876 --> 00:12:23,616
最适合的间距 out 

333
00:12:24,026 --> 00:12:25,036
依据你的用户所用的字体

334
00:12:26,976 --> 00:12:28,816
现在如果你试试这个

335
00:12:28,816 --> 00:12:30,486
你决定你想要一个稍微

336
00:12:30,486 --> 00:12:32,256
大一点或者小一点的间距

337
00:12:32,426 --> 00:12:34,146
你也可以得到只需要调整

338
00:12:34,146 --> 00:12:36,706
Multiplier 属性然后它会

339
00:12:36,706 --> 00:12:37,686
让你获得你所需要的

340
00:12:37,766 --> 00:12:39,046
确切结果

341
00:12:40,876 --> 00:12:42,546
你也可以

342
00:12:42,546 --> 00:12:44,356
把 Auto Layout Constraints 用在

343
00:12:44,356 --> 00:12:45,626
Interface Builder 中

344
00:12:45,626 --> 00:12:47,096
关于此的更多信息请 information on that please

345
00:12:47,096 --> 00:12:48,226
查看今天早上的 the Auto Layout

346
00:12:48,226 --> 00:12:49,066
Techniques and Interface Builder

347
00:12:49,066 --> 00:12:49,976
讨论

348
00:12:56,156 --> 00:12:58,316
现在我知道

349
00:12:58,316 --> 00:12:59,966
在你们当中有些人的

350
00:12:59,966 --> 00:13:00,826
app 的界面是

351
00:12:59,966 --> 00:13:00,826
app 的界面是

352
00:13:00,886 --> 00:13:02,546
八九年前写的

353
00:13:02,546 --> 00:13:03,806
没有使用 Auto Layout

354
00:13:05,536 --> 00:13:06,686
不用担心我们帮你解决

355
00:13:07,846 --> 00:13:09,046
比如说你有

356
00:13:09,046 --> 00:13:10,976
一些界面的代码设置了一个

357
00:13:10,976 --> 00:13:11,696
恒定值并添加到一个 y origin

358
00:13:16,346 --> 00:13:17,476
使用我们之前看到的 UIFontMetrics

359
00:13:17,476 --> 00:13:19,556
类我们可以

360
00:13:19,556 --> 00:13:21,556
缩放这个40 点的值或

361
00:13:21,556 --> 00:13:24,616
任何 CGFloat 的值这样

362
00:13:24,616 --> 00:13:25,886
它就会变小或变大

363
00:13:25,976 --> 00:13:26,846
取决于用户的字体大小

364
00:13:33,256 --> 00:13:34,516
现在我们来看最后一个

365
00:13:34,666 --> 00:13:35,356
常见情况

366
00:13:36,366 --> 00:13:38,356
现在两个标签

367
00:13:38,356 --> 00:13:40,196
并排着且都是

368
00:13:40,196 --> 00:13:40,696
默认字体大小

369
00:13:41,476 --> 00:13:42,916
你可以把那个

370
00:13:42,916 --> 00:13:44,406
黄色边框想象成

371
00:13:44,406 --> 00:13:45,336
屏幕上的可用区域

372
00:13:46,616 --> 00:13:48,226
现在我们缩放字体大小

373
00:13:51,526 --> 00:13:52,746
正如你所看到的那样

374
00:13:52,746 --> 00:13:53,756
屏幕上没有足够的空间了

375
00:13:53,756 --> 00:13:56,906
那么回到

376
00:13:56,906 --> 00:13:58,006
我们之前看到的我们可以

377
00:13:58,076 --> 00:13:58,966
试图让文字换行

378
00:14:04,046 --> 00:14:04,736
我们会得到一个这样的情况

379
00:14:06,326 --> 00:14:07,756
那么我想要暂停一下

380
00:14:07,756 --> 00:14:09,626
然后回顾一下

381
00:14:09,626 --> 00:14:10,486
我们在开始时提到的

382
00:14:10,486 --> 00:14:11,216
三个目标

383
00:14:12,346 --> 00:14:13,846
首先所有文字都必须足够大到

384
00:14:13,846 --> 00:14:14,926
可以阅读

385
00:14:15,546 --> 00:14:16,316
我们已经解决了这个问题

386
00:14:17,586 --> 00:14:19,846
第二所有的文字必须可读性很高

387
00:14:20,926 --> 00:14:21,836
这也达到了

388
00:14:22,256 --> 00:14:24,986
没有丢失什么文字

389
00:14:25,116 --> 00:14:27,286
第三 app 的界面必须

390
00:14:27,336 --> 00:14:29,236
在任何字体大小下都看着美观

391
00:14:30,456 --> 00:14:31,556
在这一点我们还没有

392
00:14:31,556 --> 00:14:32,506
达到目标

393
00:14:32,506 --> 00:14:34,366
正如你所看到的那样在右手边

394
00:14:34,396 --> 00:14:36,456
字母 d 被和

395
00:14:36,456 --> 00:14:37,596
单词的其他部分孤立开来

396
00:14:37,596 --> 00:14:38,626
这样看起来不对

397
00:14:38,786 --> 00:14:42,476
对于这种情况

398
00:14:42,476 --> 00:14:44,026
我们建议对于较大的字体

399
00:14:44,066 --> 00:14:47,016
可以更改你的界面

400
00:14:47,016 --> 00:14:49,056
使用垂直叠加的方式

401
00:14:49,056 --> 00:14:50,396
这样每个标签都可以变得

402
00:14:50,396 --> 00:14:51,676
跟屏幕宽度一致

403
00:14:54,536 --> 00:14:56,306
现在这个技术不仅仅可以

404
00:14:56,306 --> 00:14:57,936
用在文字上也可以用在

405
00:14:57,936 --> 00:14:59,346
任何可能占用文字空间的事物

406
00:15:00,656 --> 00:15:02,106
比如说这是一个 Siri

407
00:15:02,106 --> 00:15:04,176
Help 的屏幕你可以看到

408
00:15:04,246 --> 00:15:06,296
在左边在默认的字体大小下

409
00:15:06,296 --> 00:15:08,326
有一个标志

410
00:15:08,326 --> 00:15:10,346
在水平方向占掉了一栏

411
00:15:11,966 --> 00:15:13,336
这就是为什么在更大字体下

412
00:15:13,336 --> 00:15:14,936
我们就把这个标志移动到

413
00:15:14,936 --> 00:15:16,606
文字的上方这样就允许了

414
00:15:16,606 --> 00:15:17,706
文字变得占满

415
00:15:17,706 --> 00:15:17,976
整个屏幕宽度

416
00:15:23,056 --> 00:15:24,786
要想设计一个这样的备用界面

417
00:15:24,786 --> 00:15:26,086
取决于用户的字体大小

418
00:15:26,306 --> 00:15:27,316
你需要知道怎样得到这个界面

419
00:15:28,506 --> 00:15:31,126
你可以通过访问

420
00:15:31,226 --> 00:15:34,046
preferredConstantSizeCategory

421
00:15:34,046 --> 00:15:36,166
属性在你的界面的

422
00:15:36,166 --> 00:15:38,866
traitCollection 上或是

423
00:15:38,866 --> 00:15:39,966
UIApplication 对象上完成这一点

424
00:15:42,596 --> 00:15:44,356
默认字体大小会

425
00:15:44,356 --> 00:15:46,246
返回 large 标准大小

426
00:15:46,246 --> 00:15:48,876
会从 extra small 变成

427
00:15:48,916 --> 00:15:50,406
extra extra extra large

428
00:15:53,256 --> 00:15:55,606
辅助功能中的大小

429
00:15:55,606 --> 00:15:57,076
会加上前缀 Accessibility 来避免

430
00:15:57,076 --> 00:15:57,976
要一直加 extra

431
00:16:03,356 --> 00:16:05,126
现在在 iOS 11 中我们添加了

432
00:16:05,126 --> 00:16:06,376
新的功能你可以用来

433
00:16:06,376 --> 00:16:07,676
询问用户的

434
00:16:07,676 --> 00:16:08,256
字体大小

435
00:16:09,786 --> 00:16:10,976
举个例子你可以查看

436
00:16:10,976 --> 00:16:12,136
用户是否正在使用

437
00:16:12,136 --> 00:16:13,626
辅助功能中的字体大小

438
00:16:13,716 --> 00:16:15,116
如果是的话你可以

439
00:16:15,116 --> 00:16:16,326
提供一个备用界面比如垂直堆叠界面

440
00:16:19,286 --> 00:16:20,506
或者你可以使用任何你想用的临界值

441
00:16:21,526 --> 00:16:22,746
我们现在支持在

442
00:16:22,746 --> 00:16:24,196
操作中进行比较这样你就可以

443
00:16:24,196 --> 00:16:25,636
确认用户的字体大小

444
00:16:25,636 --> 00:16:26,706
是否大于某个临界值

445
00:16:33,276 --> 00:16:35,436
这就是一些

446
00:16:35,436 --> 00:16:36,616
将你的视图适应于

447
00:16:36,616 --> 00:16:38,316
Dynamic Type 的基本参考

448
00:16:38,966 --> 00:16:40,816
现在我们来看一个桌面视图的

449
00:16:40,816 --> 00:16:44,616
具体例子

450
00:16:44,616 --> 00:16:45,946
之前我们看到了

451
00:16:45,946 --> 00:16:47,516
设置 app 是如何完美适应

452
00:16:47,516 --> 00:16:48,606
Dynamic Type 字体的

453
00:16:49,096 --> 00:16:50,246
好消息是如果你使用

454
00:16:50,246 --> 00:16:51,456
一个标准的桌面视图样式

455
00:16:51,456 --> 00:16:53,016
你可以免费获得

456
00:16:53,016 --> 00:16:53,866
这样的界面

457
00:16:54,556 --> 00:16:56,166
那样你的字体就会变大

458
00:16:56,166 --> 00:16:57,526
或缩小取决于 Dynamic

459
00:16:57,526 --> 00:16:59,316
Type 的设置对于较大的字体

460
00:16:59,316 --> 00:17:01,436
文字就会自动换行确保

461
00:16:59,316 --> 00:17:01,436
文字就会自动换行确保

462
00:17:01,436 --> 00:17:04,705
全部文字都可见

463
00:17:04,705 --> 00:17:06,066
另外对于有详细的文字标签的

464
00:17:06,066 --> 00:17:07,486
桌面视图

465
00:17:08,435 --> 00:17:09,656
它们会自动的变成

466
00:17:09,656 --> 00:17:11,306
垂直堆叠视图

467
00:17:11,306 --> 00:17:12,746
在大字体的情况下

468
00:17:15,266 --> 00:17:16,415
那么标准的桌面视图将会

469
00:17:16,415 --> 00:17:17,596
将它们的界面适应于 Dynamic

470
00:17:17,685 --> 00:17:21,175
Type 单元高度取决于

471
00:17:21,175 --> 00:17:21,906
它们的内容

472
00:17:22,695 --> 00:17:24,006
这在大字体情况下

473
00:17:24,006 --> 00:17:25,556
文字的自动换行

474
00:17:25,556 --> 00:17:27,636
尤其重要因为一个单元

475
00:17:27,636 --> 00:17:29,116
如果有较多文字的话可能需要

476
00:17:29,166 --> 00:17:31,066
比一个有较少内容的单元的高度高一些

477
00:17:32,316 --> 00:17:34,026
那么我们如何在桌面视图中实现

478
00:17:34,026 --> 00:17:34,976
可变的单元高度呢

479
00:17:38,096 --> 00:17:39,056
我们可以通过

480
00:17:39,056 --> 00:17:40,346
一种叫做 self-sizing 的技术实现

481
00:17:42,006 --> 00:17:43,346
当打开 self-sizing 时

482
00:17:43,346 --> 00:17:44,996
桌面视图会让每个单元

483
00:17:44,996 --> 00:17:47,126
提供它的大小

484
00:17:47,176 --> 00:17:48,806
而每个单元可以依据自己的

485
00:17:48,806 --> 00:17:50,346
内容多少而进行计算

486
00:17:51,236 --> 00:17:53,196
然后桌面视图监控端

487
00:17:53,196 --> 00:17:54,426
就只需要给予

488
00:17:54,426 --> 00:17:55,736
桌面视图一个有哪些单元

489
00:17:55,736 --> 00:17:56,836
没有出现在屏幕上的估算

490
00:18:03,076 --> 00:18:05,356
在 iOS 11 中 self-sizing 是默认打开的

491
00:18:07,236 --> 00:18:09,226
然而如果你使用固定的

492
00:18:09,226 --> 00:18:11,496
行高度或者如果你使用

493
00:18:11,496 --> 00:18:12,936
Interface Builder 你可能需要去

494
00:18:12,936 --> 00:18:14,206
打开 self-sizing

495
00:18:14,796 --> 00:18:17,846
你只需要把你的

496
00:18:17,846 --> 00:18:19,476
桌面视图的行高度设置成 Automatic

497
00:18:19,516 --> 00:18:21,516
Dimension 然后把

498
00:18:21,516 --> 00:18:23,166
Estimated Row Height 设置成一个 to a

499
00:18:23,166 --> 00:18:24,626
给予你的桌面视图的合理估测值

500
00:18:27,016 --> 00:18:28,516
如果你的每部分有页眉和

501
00:18:28,516 --> 00:18:30,326
页脚你可以进行相同的操作

502
00:18:30,326 --> 00:18:31,556
只要使用名字

503
00:18:31,556 --> 00:18:32,976
很相似的属性就可以

504
00:18:38,346 --> 00:18:39,826
这就是关于标准桌面视图

505
00:18:39,826 --> 00:18:40,486
单元的内容

506
00:18:41,136 --> 00:18:42,616
如果你使用自定义单元

507
00:18:42,616 --> 00:18:44,526
和 Auto Layout 很容易

508
00:18:44,526 --> 00:18:45,696
就可以使它们与

509
00:18:45,696 --> 00:18:46,366
self-sizing 一起工作

510
00:18:46,926 --> 00:18:49,436
你所要做的就只是

511
00:18:49,476 --> 00:18:50,776
设置好你的限制条件

512
00:18:50,776 --> 00:18:53,226
使它们来定义单元的大小

513
00:18:53,226 --> 00:18:54,906
然后 Auto Layout 就会帮你找到

514
00:18:54,906 --> 00:18:55,686
合适的大小

515
00:18:57,066 --> 00:18:57,996
那么让我们看看

516
00:18:58,026 --> 00:18:59,366
如何才能为这个自定义的单元

517
00:18:59,366 --> 00:19:01,126
设置限制

518
00:18:59,366 --> 00:19:01,126
设置限制

519
00:19:01,126 --> 00:19:02,766
这其中我们有两个标签一个在另一个

520
00:19:02,766 --> 00:19:02,966
的上面

521
00:19:05,356 --> 00:19:06,906
我们肯定是想要为

522
00:19:06,906 --> 00:19:08,046
这两个标签设置前后两个限制

523
00:19:09,416 --> 00:19:12,026
并且我们要确保

524
00:19:12,026 --> 00:19:13,116
这两个标签是垂直分开的

525
00:19:13,116 --> 00:19:15,086
中间有合适的间隔

526
00:19:16,786 --> 00:19:18,186
你可以再次使用新的

527
00:19:18,186 --> 00:19:19,306
System Spacing Constraints 

528
00:19:19,306 --> 00:19:20,836
来获得一个在任何字体下

529
00:19:20,836 --> 00:19:21,896
都可用的值

530
00:19:21,956 --> 00:19:23,976
那么这样做就可以了吗

531
00:19:27,186 --> 00:19:27,696
并不是

532
00:19:27,696 --> 00:19:29,296
我们还需要增加

533
00:19:29,296 --> 00:19:31,006
相对于单元的顶部和底部

534
00:19:31,006 --> 00:19:32,926
的限制并使它

535
00:19:32,926 --> 00:19:34,086
完成我们所需要的

536
00:19:34,086 --> 00:19:35,516
定义单元大小的

537
00:19:35,516 --> 00:19:35,886
一组限制条件

538
00:19:37,436 --> 00:19:38,796
你可以再一次使用这里的 System

539
00:19:38,796 --> 00:19:40,216
Spacing Constraints here 来获取

540
00:19:40,216 --> 00:19:41,036
在各个字体大小下

541
00:19:41,036 --> 00:19:41,946
都看起来美观的值

542
00:19:47,576 --> 00:19:49,236
如果你对你的单元使用 Manual

543
00:19:49,236 --> 00:19:50,606
Layout 你还可以

544
00:19:50,606 --> 00:19:51,766
使用 self-sizing

545
00:19:52,626 --> 00:19:55,356
你需要重写你的单元

546
00:19:55,356 --> 00:19:57,386
sizeThatFits 功能

547
00:19:57,386 --> 00:20:01,556
然后你可以使用

548
00:19:57,386 --> 00:20:01,556
然后你可以使用

549
00:20:01,556 --> 00:20:03,866
contentView 的宽度来

550
00:20:03,866 --> 00:20:04,726
找到你的子视图可用的宽度

551
00:20:13,176 --> 00:20:14,676
现在让我们开始我们的

552
00:20:14,676 --> 00:20:15,856
最后一个话题图像

553
00:20:17,356 --> 00:20:18,926
为什么图像会出现在

554
00:20:18,926 --> 00:20:19,936
一个关于 Dynamic Type 的演讲中呢

555
00:20:21,116 --> 00:20:22,226
毕竟它们不是文字

556
00:20:22,866 --> 00:20:25,456
但是图像是

557
00:20:25,456 --> 00:20:26,946
你的 app 的 UI 中不可或缺的一部分

558
00:20:26,946 --> 00:20:28,896
有时候它们所承载的意义并不能在

559
00:20:28,896 --> 00:20:30,266
其他地方传达

560
00:20:31,106 --> 00:20:32,416
所以与为什么

561
00:20:32,416 --> 00:20:34,036
你的文字对你的用户而言

562
00:20:34,036 --> 00:20:35,916
可读性高很重要一样

563
00:20:35,916 --> 00:20:37,436
你的图像的可分辨性

564
00:20:37,436 --> 00:20:38,276
也非常重要

565
00:20:39,596 --> 00:20:40,636
我们来看一个例子

566
00:20:43,136 --> 00:20:44,776
这是电话 app 中的最近通话界面

567
00:20:46,576 --> 00:20:48,896
请注意在有些记录的前面

568
00:20:48,896 --> 00:20:51,126
有一个电话的图像

569
00:20:51,236 --> 00:20:52,846
还有一个向外的箭头

570
00:20:54,476 --> 00:20:56,356
这个图像表示的是

571
00:20:56,356 --> 00:20:58,856
这通电话是你打出的而不是

572
00:20:59,946 --> 00:21:01,126
一个别人打进的电话

573
00:20:59,946 --> 00:21:01,126
一个别人打进的电话

574
00:21:01,126 --> 00:21:02,636
现在让我们调大字号

575
00:21:05,486 --> 00:21:06,386
对于你们中好奇的人

576
00:21:06,386 --> 00:21:08,136
这个图像已经被移动

577
00:21:08,136 --> 00:21:10,526
到了这里请注意

578
00:21:10,526 --> 00:21:12,166
与文字相比它非常小

579
00:21:12,166 --> 00:21:14,766
如果你想要你的文字变成这么大

580
00:21:14,806 --> 00:21:16,826
以至于你可以阅读那么你

581
00:21:16,826 --> 00:21:18,126
或许无法再看到这个图像

582
00:21:19,396 --> 00:21:22,056
所以我们真正要做的是

583
00:21:22,616 --> 00:21:24,316
把图像缩放

584
00:21:24,316 --> 00:21:25,746
到跟文字相同倍数

585
00:21:26,376 --> 00:21:27,526
而这就正是我们在

586
00:21:27,576 --> 00:21:29,696
iOS 11 中所做的更好的是

587
00:21:29,696 --> 00:21:31,226
我们让你在自己的 app 中进行这种操作

588
00:21:31,226 --> 00:21:31,756
变得简单

589
00:21:34,276 --> 00:21:35,896
要使你的图像

590
00:21:36,016 --> 00:21:37,986
为 Dynamic Type 缩放你需要

591
00:21:37,986 --> 00:21:39,626
首先确保

592
00:21:39,626 --> 00:21:40,886
你的图像在 1x 大的时候是 PDF 格式

593
00:21:43,416 --> 00:21:44,846
这无论如何都是一个好主意

594
00:21:44,846 --> 00:21:46,146
因为它允许你在

595
00:21:46,146 --> 00:21:48,826
2x 和 3x 分辨率的设备上使用

596
00:21:48,826 --> 00:21:49,896
同一个图像

597
00:21:50,376 --> 00:21:52,216
事实上你的 app 可能已经

598
00:21:52,216 --> 00:21:53,756
在这么做了

599
00:21:53,756 --> 00:21:55,026
所以只要确保你的格式是 PDF 的

600
00:21:55,936 --> 00:21:58,946
下一步到 Asset Catalog 中

601
00:21:59,666 --> 00:22:01,526
勾选这个新的选项即

602
00:21:59,666 --> 00:22:01,526
勾选这个新的选项即

603
00:22:01,526 --> 00:22:02,556
Preserving Vector Data

604
00:22:03,316 --> 00:22:05,696
如果你没有勾选它

605
00:22:06,086 --> 00:22:07,126
那么在 Asset Catalog 被

606
00:22:07,126 --> 00:22:09,516
编辑时它将

607
00:22:09,516 --> 00:22:10,396
栅格化所有 PDF 的数据

608
00:22:11,656 --> 00:22:12,856
但如果你勾选了这个选项

609
00:22:12,856 --> 00:22:14,636
原始 PDF 就可以得到保存

610
00:22:14,676 --> 00:22:17,316
这样做很酷的一点就是

611
00:22:17,316 --> 00:22:18,896
此时如果你使用这个图像

612
00:22:18,896 --> 00:22:20,456
并把它放入任何大小的图像视图

613
00:22:20,456 --> 00:22:22,576
这个图像就会

614
00:22:22,576 --> 00:22:23,826
用 PDF 平滑延展

615
00:22:23,826 --> 00:22:23,976
延展中

616
00:22:24,516 --> 00:22:32,576
[掌声]

617
00:22:33,076 --> 00:22:34,436
现在最后一步是

618
00:22:34,436 --> 00:22:35,996
确保你的界面为

619
00:22:35,996 --> 00:22:36,596
Dynamic Type 更改了大小

620
00:22:37,166 --> 00:22:38,796
在 Interface Builder 中

621
00:22:39,426 --> 00:22:41,846
你可用选择任何图像视图或者

622
00:22:41,846 --> 00:22:44,226
按钮并且你可以选择

623
00:22:44,226 --> 00:22:46,056
Adjusts Image Size 属性

624
00:22:47,756 --> 00:22:49,076
这意味着你的图像按钮

625
00:22:49,076 --> 00:22:51,356
将会为

626
00:22:51,356 --> 00:22:52,806
五个最大的 Dynamic Type 字体进行缩放

627
00:22:56,116 --> 00:22:57,276
你也可以用代码完成

628
00:22:57,276 --> 00:22:59,616
对 AccessibilityContentSizeCategory 属性

629
00:22:59,866 --> 00:22:59,986
使用 Adjusts Image Size 

630
00:22:59,986 --> 00:23:01,646
功能

631
00:22:59,986 --> 00:23:01,646
功能

632
00:23:08,236 --> 00:23:09,786
还有一个地方

633
00:23:09,786 --> 00:23:11,586
图像缩放会派上用场

634
00:23:12,046 --> 00:23:14,246
就是当用户长按

635
00:23:14,246 --> 00:23:16,186
标签栏按钮时

636
00:23:16,606 --> 00:23:18,366
之前我们看到你可用

637
00:23:18,366 --> 00:23:19,746
长按“语音信箱”按钮

638
00:23:19,896 --> 00:23:21,136
看到一个更大的图像出现在

639
00:23:21,136 --> 00:23:21,876
屏幕的中间

640
00:23:22,426 --> 00:23:23,936
请注意文字和图片

641
00:23:23,936 --> 00:23:25,146
都进行了缩放

642
00:23:25,146 --> 00:23:26,406
我们需要确保

643
00:23:26,406 --> 00:23:27,526
图像看起来尽可能的好

644
00:23:32,536 --> 00:23:34,746
如果你的标签栏按钮使用了 PDF

645
00:23:34,796 --> 00:23:36,666
图像那么你需要做的就是

646
00:23:36,666 --> 00:23:37,946
勾选 Preserve Vector Data

647
00:23:37,946 --> 00:23:39,656
选项

648
00:23:40,156 --> 00:23:42,216
这将允许 UIKit 把它

649
00:23:42,216 --> 00:23:42,976
顺利地的放大

650
00:23:45,276 --> 00:23:46,066
如果你没有使用 PDF 格式

651
00:23:46,066 --> 00:23:48,236
你就需要提供一个更大的版本

652
00:23:48,236 --> 00:23:49,226
让它在用户

653
00:23:49,226 --> 00:23:50,856
长按图像时显示

654
00:23:52,196 --> 00:23:55,596
要在 Interface Builder 操作

655
00:23:55,826 --> 00:23:56,896
你可以找到 Attributes

656
00:23:56,896 --> 00:23:58,726
Inspector 然后把你的标签栏的 and set the

657
00:23:58,726 --> 00:24:00,206
Accessibility 属性

658
00:23:58,726 --> 00:24:00,206
Accessibility 属性

659
00:24:00,206 --> 00:24:01,976
设置成更大的版本

660
00:24:05,046 --> 00:24:06,466
或者在代码中你可以把

661
00:24:06,466 --> 00:24:08,006
largeContentSizeImage

662
00:24:08,006 --> 00:24:08,976
属性设置成那个更大版本

663
00:24:14,536 --> 00:24:16,246
我们已经谈到了一些

664
00:24:16,246 --> 00:24:17,616
建议和窍门

665
00:24:17,936 --> 00:24:19,116
让你的 app 能适应 Dynamic Type

666
00:24:19,916 --> 00:24:20,886
现在我想有请

667
00:24:20,886 --> 00:24:22,466
Nandini 到台上来在一个

668
00:24:22,466 --> 00:24:22,976
示范 app 中展示

669
00:24:23,516 --> 00:24:30,586
[掌声]

670
00:24:31,086 --> 00:24:31,746
&gt;&gt; 大家好

671
00:24:32,456 --> 00:24:33,346
我是 Nandini

672
00:24:33,346 --> 00:24:34,696
我是苹果辅助功能团队的

673
00:24:34,696 --> 00:24:36,126
一名软件工程师

674
00:24:37,376 --> 00:24:39,366
今天我会用一个示范 app

675
00:24:39,466 --> 00:24:41,176
展示如何在

676
00:24:41,446 --> 00:24:43,066
短时间内用 Dynamic Type 字体

677
00:24:43,066 --> 00:24:43,386
修正你的 app

678
00:24:43,386 --> 00:24:46,366
首先我先用

679
00:24:46,366 --> 00:24:48,016
默认字体大小打开 app

680
00:24:48,096 --> 00:24:51,056
稍后我会用最大号的

681
00:24:51,056 --> 00:24:52,286
Dynamic Type 字体打开

682
00:24:52,286 --> 00:24:54,926
然后解决其中的问题

683
00:24:55,226 --> 00:24:56,206
让我们来打开 app

684
00:24:56,206 --> 00:24:56,626
我们已经清理过了

685
00:24:56,626 --> 00:24:58,676
它叫 Cute Battle Pets

686
00:24:58,676 --> 00:25:00,256
在这个 app 中你可以选择

687
00:24:58,676 --> 00:25:00,256
在这个 app 中你可以选择

688
00:25:00,256 --> 00:25:01,546
两只宠物来对战

689
00:25:02,396 --> 00:25:06,116
让我来打开 app

690
00:25:06,116 --> 00:25:08,346
在这个部分 Opponents 你可以看到

691
00:25:08,346 --> 00:25:10,096
一些宠物你可用从中选择

692
00:25:10,096 --> 00:25:12,396
进行对战在下一个

693
00:25:12,396 --> 00:25:14,716
部分 Achievements 你可以看到

694
00:25:14,716 --> 00:25:16,666
一些这些宠物获得的奖章

695
00:25:18,986 --> 00:25:20,476
在我们使用

696
00:25:20,476 --> 00:25:22,466
Dynamic Type 的最大号字体来审核

697
00:25:22,526 --> 00:25:23,866
我们的 app 之前如果我们切换回刚刚的

698
00:25:23,866 --> 00:25:26,726
Opponents 按钮你可以用

699
00:25:26,726 --> 00:25:28,386
一个在 Xcode 中非常好用的工具

700
00:25:28,386 --> 00:25:30,196
来测试你的 app 在不同字体下的效果

701
00:25:30,196 --> 00:25:32,096
这个工具叫做

702
00:25:32,096 --> 00:25:33,406
Accessibility Inspector

703
00:25:33,956 --> 00:25:36,646
这个工具非常好用

704
00:25:37,016 --> 00:25:38,556
因为你可以

705
00:25:38,556 --> 00:25:39,456
在更改你的设备的设置之前

706
00:25:39,456 --> 00:25:40,056
测试你的 app

707
00:25:41,356 --> 00:25:43,636
你可以通过在菜单栏进入

708
00:25:43,636 --> 00:25:45,976
Xcode 打开这个工具

709
00:25:45,976 --> 00:25:47,386
选择 Open Developer Tool 然后

710
00:25:47,446 --> 00:25:48,576
点击 Accessibility Inspector

711
00:25:55,206 --> 00:25:56,896
这个工具可以被用于

712
00:25:57,006 --> 00:25:59,326
在所有的 macOS 和 iOS 手机中测试你的 app

713
00:25:59,556 --> 00:26:01,006
包括模拟机

714
00:25:59,556 --> 00:26:01,006
包括模拟机

715
00:26:01,516 --> 00:26:05,836
因为我们的 app 现在在

716
00:26:05,836 --> 00:26:07,226
iPhone 模拟机上运行我从

717
00:26:07,226 --> 00:26:09,286
下拉菜单中选择 Simulator

718
00:26:09,886 --> 00:26:11,156
我在 Accessibility Inspector 点击设置键

719
00:26:12,676 --> 00:26:15,376
在这里你可以看到一个字体大小的滑块

720
00:26:16,576 --> 00:26:17,856
现在的字体是

721
00:26:17,856 --> 00:26:18,726
默认的字体大小

722
00:26:19,456 --> 00:26:20,766
我要把滑块

723
00:26:20,826 --> 00:26:22,276
移到最右边

724
00:26:23,006 --> 00:26:24,106
就是最大的

725
00:26:24,106 --> 00:26:26,846
Dynamic Type 字体

726
00:26:27,006 --> 00:26:29,276
让我们现在回到我们的 app

727
00:26:29,366 --> 00:26:32,716
来看看这个改变带来的效果

728
00:26:32,956 --> 00:26:34,516
这些标签的字体大小

729
00:26:34,516 --> 00:26:35,396
还没有改变

730
00:26:35,396 --> 00:26:37,576
知道为什么会这样吗

731
00:26:38,076 --> 00:26:39,346
有两个原因

732
00:26:39,926 --> 00:26:42,416
这些标签还没有被设置为

733
00:26:42,416 --> 00:26:44,956
自动调整以适应

734
00:26:44,956 --> 00:26:46,706
用户的 ContentSizeCategory

735
00:26:47,046 --> 00:26:49,456
并且 petName 和 petDescription

736
00:26:49,456 --> 00:26:50,876
标签使用的是自定义字体

737
00:26:52,456 --> 00:26:53,986
我们现在启动一个项目来

738
00:26:53,986 --> 00:26:54,486
解决这些问题

739
00:26:55,256 --> 00:26:57,286
我现在把 Accessibility

740
00:26:57,286 --> 00:26:58,196
Inspector 最小化

741
00:26:58,196 --> 00:27:03,206
打开 BattleCell 压缩文件

742
00:26:58,196 --> 00:27:03,206
打开 BattleCell 压缩文件

743
00:27:03,426 --> 00:27:05,366
使用跳转栏

744
00:27:05,366 --> 00:27:06,346
跳转到 Set Up 标签和

745
00:27:06,346 --> 00:27:07,336
Buttons 功能

746
00:27:08,686 --> 00:27:12,976
对于 petName petDescription

747
00:27:12,976 --> 00:27:15,216
和 battleButton's titleLabel 标签

748
00:27:15,876 --> 00:27:17,526
把这个字体在

749
00:27:17,726 --> 00:27:19,446
ContentSizeCategory 的属性

750
00:27:19,446 --> 00:27:19,976
设置为 True

751
00:27:27,246 --> 00:27:29,616
由于 petName 和 petDescription

752
00:27:29,616 --> 00:27:32,766
使用的是自定义字体

753
00:27:32,766 --> 00:27:35,076
我们可以使用 UIFont 设置为 API 来扫描

754
00:27:35,146 --> 00:27:36,246
字体以获得字体规格

755
00:27:37,036 --> 00:27:37,986
对于 petName 我把 Textstyle

756
00:27:38,126 --> 00:27:38,976
设为 headline

757
00:27:43,276 --> 00:27:45,316
对于 petDescription 我把 Textstype

758
00:27:45,316 --> 00:27:46,576
设为 subheadline

759
00:27:50,376 --> 00:27:51,246
我们来重新运行一下 app

760
00:27:51,246 --> 00:27:51,936
看看这些更改带来的变化

761
00:28:01,516 --> 00:28:03,636
现在当这些标签都被

762
00:28:03,636 --> 00:28:04,886
调整以适应用户的

763
00:28:04,886 --> 00:28:07,276
ContentSizeCategory 后我们可以看到

764
00:28:07,276 --> 00:28:08,736
这些标签没有足够的

765
00:28:08,736 --> 00:28:09,846
横向空间

766
00:28:09,846 --> 00:28:12,236
菜单在左边而

767
00:28:12,316 --> 00:28:14,106
按钮在右边的情况下

768
00:28:14,396 --> 00:28:15,686
这些标签并没有足够的

769
00:28:15,686 --> 00:28:17,576
横向空间进行放大

770
00:28:17,576 --> 00:28:20,516
并且要么被截断了

771
00:28:20,516 --> 00:28:21,226
要么被分成很多行

772
00:28:22,076 --> 00:28:25,776
我们可以通过一个

773
00:28:25,826 --> 00:28:27,796
使用更大字体的备用界面结构

774
00:28:27,796 --> 00:28:28,746
来解决这个问题

775
00:28:30,206 --> 00:28:32,136
我们可以通过把

776
00:28:32,136 --> 00:28:34,036
图片移动到文字上方而

777
00:28:34,036 --> 00:28:35,866
按钮移动到文字下方来实现

778
00:28:36,556 --> 00:28:38,376
这样就可以保证标签更少的发生

779
00:28:38,376 --> 00:28:40,136
换行和截断的情况

780
00:28:40,136 --> 00:28:41,766
我们现在到项目中解决这个问题

781
00:28:47,076 --> 00:28:48,966
首先为了更大字体要添加这个

782
00:28:48,966 --> 00:28:50,246
adoptLayoutConstraints 之前

783
00:28:50,246 --> 00:28:52,356
我需要先

784
00:28:52,356 --> 00:28:53,946
为它添加一个私有变量

785
00:28:58,116 --> 00:28:59,756
下一步选择

786
00:28:59,756 --> 00:29:01,576
setupLayoutConstraints 功能

787
00:28:59,756 --> 00:29:01,576
setupLayoutConstraints 功能

788
00:29:01,576 --> 00:29:04,916
现在你可以看到

789
00:29:04,916 --> 00:29:06,426
你已经有了一些对于默认字体大小的

790
00:29:06,426 --> 00:29:07,596
界面限制

791
00:29:08,626 --> 00:29:10,066
现在我要设置一些

792
00:29:10,146 --> 00:29:11,446
对于较大的

793
00:29:11,446 --> 00:29:11,976
Type 的字体大小的限制

794
00:29:18,046 --> 00:29:19,736
这些被加到这里的限制

795
00:29:19,736 --> 00:29:20,896
会和示范 app 的代码

796
00:29:20,896 --> 00:29:22,386
一起出现在

797
00:29:22,386 --> 00:29:23,176
这个会议的网站上

798
00:29:23,666 --> 00:29:25,366
会议结束以后你可以到网站上查看

799
00:29:25,366 --> 00:29:27,216
但我会简单地

800
00:29:27,216 --> 00:29:28,726
介绍一下它们是做什么的

801
00:29:29,406 --> 00:29:32,636
这些限制可以确保

802
00:29:32,636 --> 00:29:34,436
图像标签和按钮

803
00:29:34,436 --> 00:29:35,596
是垂直堆叠的

804
00:29:35,946 --> 00:29:37,816
也可以把它们放入

805
00:29:37,816 --> 00:29:40,396
单元高度中

806
00:29:40,586 --> 00:29:42,106
好了我们看到

807
00:29:42,106 --> 00:29:43,616
developerLayoutConstraints 功能

808
00:29:45,026 --> 00:29:46,356
在这里我们看到

809
00:29:46,356 --> 00:29:48,046
有一个开发者限制没有被启用

810
00:29:49,386 --> 00:29:50,106
我们需要更大的字体对吧

811
00:29:50,246 --> 00:29:50,976
让我们来解决它

812
00:29:57,046 --> 00:29:59,176
这样根据用户的

813
00:29:59,216 --> 00:30:00,676
preferredContentSizeCategory

814
00:29:59,216 --> 00:30:00,676
preferredContentSizeCategory

815
00:30:00,916 --> 00:30:01,976
这些代码添加了五个最大的

816
00:30:01,976 --> 00:30:03,606
Dynamic Type 字体

817
00:30:03,776 --> 00:30:05,746
使用 app 你应该可以

818
00:30:05,746 --> 00:30:06,876
看到它的限制和

819
00:30:06,876 --> 00:30:08,526
activateLargeTextConstraints.

820
00:30:09,246 --> 00:30:10,496
否则就采取相反操作

821
00:30:11,286 --> 00:30:14,956
为了保证这些界面

822
00:30:14,956 --> 00:30:17,066
限制能够

823
00:30:17,066 --> 00:30:18,056
根据 trait collection 的变化而

824
00:30:18,056 --> 00:30:20,906
变化

825
00:30:20,906 --> 00:30:22,166
如果 trait collection 发生变化我们就使用这个功能

826
00:30:27,076 --> 00:30:27,746
如果用户的

827
00:30:27,746 --> 00:30:29,966
preferredContentSizeCategory

828
00:30:29,966 --> 00:30:31,256
从最大的五个

829
00:30:31,256 --> 00:30:33,156
Dynamic Type 字体更换为

830
00:30:33,156 --> 00:30:34,586
较小的 Dynamic Type 字体

831
00:30:34,796 --> 00:30:37,016
或者反过来这些界面限制

832
00:30:37,016 --> 00:30:37,976
就会被更新

833
00:30:40,536 --> 00:30:41,226
我们来重新运行一下 app 来看看

834
00:30:41,226 --> 00:30:41,956
这些改变的效果

835
00:30:51,266 --> 00:30:53,346
很好在把内容垂直堆叠以后

836
00:30:53,346 --> 00:30:55,396
标签就没有那么多

837
00:30:55,396 --> 00:30:57,256
被分行的情况

838
00:30:57,256 --> 00:30:58,006
并且没有被截断的情况

839
00:30:58,566 --> 00:31:00,056
我们进行下一步

840
00:30:58,566 --> 00:31:00,056
我们进行下一步

841
00:31:00,056 --> 00:31:00,926
Achievements 部分

842
00:31:03,356 --> 00:31:04,806
当我们在默认字体情况下

843
00:31:04,806 --> 00:31:06,526
运行这个 app 时你会

844
00:31:06,526 --> 00:31:08,086
注意到这些单元

845
00:31:08,086 --> 00:31:10,226
有很多行文字

846
00:31:10,316 --> 00:31:12,166
但是现在只有一行文字

847
00:31:12,166 --> 00:31:13,056
可以在屏幕上可见

848
00:31:14,366 --> 00:31:15,646
我们到 Achievements View

849
00:31:15,646 --> 00:31:17,336
Controller 看看

850
00:31:17,336 --> 00:31:17,976
为什么会这样

851
00:31:20,176 --> 00:31:22,266
之所以会发生这样的情况是因为

852
00:31:22,266 --> 00:31:23,826
桌面视图的行高度被设置成了

853
00:31:23,826 --> 00:31:25,036
一个恒定的值 100

854
00:31:25,036 --> 00:31:27,426
这导致了这些单元

855
00:31:27,516 --> 00:31:29,256
根本没有单元大小

856
00:31:30,096 --> 00:31:31,766
为了解决这个问题让这些单元

857
00:31:31,766 --> 00:31:34,156
具有大小我们需要把

858
00:31:34,156 --> 00:31:35,976
桌面视图的行高度设置为使用

859
00:31:35,976 --> 00:31:37,756
UITableViewAutomaticDimension

860
00:31:37,756 --> 00:31:39,686
并把 TableView's

861
00:31:39,686 --> 00:31:42,206
estimatedRowHeight 设为一个恒定值

862
00:31:42,206 --> 00:31:43,976
我会选择 100

863
00:31:49,116 --> 00:31:49,916
我们再重新运行一下 app

864
00:31:58,136 --> 00:31:59,846
选择 Achievements 部分

865
00:31:59,846 --> 00:32:03,936
现在我们看到

866
00:31:59,846 --> 00:32:03,936
现在我们看到

867
00:32:03,936 --> 00:32:05,426
在每个单元里我们都有了更多行文字

868
00:32:05,476 --> 00:32:07,736
这些单元的大小都

869
00:32:07,826 --> 00:32:09,696
设置为适应内容的多少但是

870
00:32:09,986 --> 00:32:11,036
让我们来看看文字前面的图标

871
00:32:11,036 --> 00:32:16,046
与文字不同这些图标并没有

872
00:32:16,046 --> 00:32:17,106
随着用户的 ContentSizeCategory

873
00:32:17,106 --> 00:32:18,186
而变大

874
00:32:18,926 --> 00:32:21,126
要解决这个问题我们打开

875
00:32:21,126 --> 00:32:21,806
Achievements 文件

876
00:32:27,256 --> 00:32:29,376
设置标签和图像视图功能

877
00:32:30,746 --> 00:32:32,866
对于 badgeImageView 我把

878
00:32:32,866 --> 00:32:34,966
accessibilityContentSize Category

879
00:32:34,966 --> 00:32:36,106
的属性 adjustsImageSize

880
00:32:36,146 --> 00:32:37,936
设置为 True

881
00:32:38,826 --> 00:32:40,636
这能保证图像

882
00:32:40,636 --> 00:32:42,096
会随着五个最大的

883
00:32:42,096 --> 00:32:42,976
Dynamic Type 字体而缩放

884
00:32:47,056 --> 00:32:48,016
我们再一次运行一下 app

885
00:32:48,016 --> 00:32:48,946
来看看变化的效果

886
00:32:56,516 --> 00:33:00,016
打开 Achievements 选项

887
00:32:56,516 --> 00:33:00,016
打开 Achievements 选项

888
00:33:00,216 --> 00:33:02,896
很好现在文字和

889
00:33:02,896 --> 00:33:04,806
图像都是最大的 Dynamic

890
00:33:04,806 --> 00:33:08,156
Type 字号但是让我们看到

891
00:33:08,156 --> 00:33:09,346
这些单元中的图像

892
00:33:15,236 --> 00:33:17,156
我们也来看一看

893
00:33:17,156 --> 00:33:19,236
只有在长按标签栏图标才会弹出的

894
00:33:19,236 --> 00:33:20,426
大字体

895
00:33:29,376 --> 00:33:31,256
这样看起来这些

896
00:33:31,256 --> 00:33:33,306
单元中的图像和标签栏的

897
00:33:33,306 --> 00:33:35,386
图标不够顺滑

898
00:33:35,856 --> 00:33:37,556
为了解决问题我们需要到

899
00:33:37,556 --> 00:33:39,396
Assets Catalog 选择我们的

900
00:33:40,596 --> 00:33:43,996
图像都是 PDF 图像然后到

901
00:33:44,546 --> 00:33:49,636
Attributes Inspector 并

902
00:33:49,636 --> 00:33:53,596
点击 Preserve Vector

903
00:33:53,596 --> 00:33:54,946
Data 选项

904
00:34:00,356 --> 00:34:02,256
这样做之后

905
00:34:02,256 --> 00:34:03,926
PDF 向量数据就被保存了

906
00:34:03,926 --> 00:34:05,806
图像就会在

907
00:34:05,846 --> 00:34:07,376
不同的 Dynamic Type 字体中

908
00:34:07,376 --> 00:34:07,926
都平滑呈现

909
00:34:09,446 --> 00:34:10,396
我们来重新运行一下 app

910
00:34:10,396 --> 00:34:10,936
看看效果

911
00:34:21,126 --> 00:34:22,576
打开 Achievements 选项

912
00:34:23,335 --> 00:34:24,795
为了进一步确认让我放大一下

913
00:34:31,166 --> 00:34:33,996
现在我们看到这些图像都

914
00:34:33,996 --> 00:34:36,846
平滑呈现了对吧

915
00:34:39,386 --> 00:34:41,766
最后使用 Accessibility

916
00:34:41,766 --> 00:34:43,286
Inspector 我要做一个

917
00:34:43,286 --> 00:34:44,916
快速的测试

918
00:34:45,246 --> 00:34:46,926
测试这个 app 和不同 Dynamic Type

919
00:34:46,926 --> 00:34:47,466
字体

920
00:34:47,896 --> 00:34:49,356
让我先最小化 Xcode

921
00:34:49,356 --> 00:34:50,126
让我打开

922
00:34:50,755 --> 00:34:51,976
Accessibility Inspector

923
00:34:56,166 --> 00:34:57,666
打开第一个选项

924
00:34:57,666 --> 00:34:58,236
Opponents

925
00:34:59,006 --> 00:35:01,786
把字体大小的滑块

926
00:34:59,006 --> 00:35:01,786
把字体大小的滑块

927
00:35:01,836 --> 00:35:03,086
滑到默认字体大小

928
00:35:04,186 --> 00:35:05,496
现在我要一个一个的

929
00:35:05,536 --> 00:35:07,386
增大字体然后你会

930
00:35:07,386 --> 00:35:09,966
看到这些单元中的标签

931
00:35:09,966 --> 00:35:11,436
会根据

932
00:35:11,436 --> 00:35:12,696
用户 ContentSizeCategory 而变大

933
00:35:12,696 --> 00:35:13,976
当我把滑块移动到最大的五个

934
00:35:14,056 --> 00:35:16,246
Dynamic Type 字体时

935
00:35:17,046 --> 00:35:18,766
这些单元的界面发生了改变

936
00:35:19,726 --> 00:35:22,306
这些标签有了更多的

937
00:35:22,306 --> 00:35:24,496
横向空间这些单元也改变大小

938
00:35:24,496 --> 00:35:25,436
来适应内容的多少

939
00:35:28,196 --> 00:35:30,436
下一步我们打开 Achievements 来

940
00:35:30,436 --> 00:35:31,466
进行同样的测试

941
00:35:34,436 --> 00:35:37,246
我要重新切换到默认字体大小

942
00:35:39,216 --> 00:35:40,496
然后一个一个的增大字体

943
00:35:42,736 --> 00:35:44,666
现在你可以看到

944
00:35:44,666 --> 00:35:45,686
标签已经自动换行

945
00:35:46,346 --> 00:35:48,186
这些单元也自动改变大小来适应内容

946
00:35:48,756 --> 00:35:51,186
同时图像也

947
00:35:51,256 --> 00:35:52,966
按照最大的五个 Dynamic Type 字体进行缩放

948
00:35:55,256 --> 00:35:56,226
这样你就达到了目的

949
00:35:56,226 --> 00:35:58,376
我们的 app 在

950
00:35:58,376 --> 00:36:00,386
各种 Dynamic Type 字体下都看起来不错

951
00:35:58,376 --> 00:36:00,386
各种 Dynamic Type 字体下都看起来不错

952
00:36:00,676 --> 00:36:03,606
所以使用 iOS 11 提供的新的 API

953
00:36:03,606 --> 00:36:05,076
你也可以让自己的 app

954
00:36:05,136 --> 00:36:06,366
适应所有的 Dynamic

955
00:36:06,366 --> 00:36:07,046
Type 字体大小

956
00:36:07,946 --> 00:36:09,546
现在请 Clare 回来

957
00:36:09,546 --> 00:36:10,306
做一个总结

958
00:36:10,756 --> 00:36:10,946
谢谢

959
00:36:11,516 --> 00:36:17,606
[掌声]

960
00:36:18,106 --> 00:36:19,366
&gt;&gt; 谢谢 Nandini

961
00:36:19,916 --> 00:36:21,666
所有的示范代码

962
00:36:21,666 --> 00:36:23,186
都可以在

963
00:36:23,186 --> 00:36:26,436
会议的网站找到

964
00:36:26,436 --> 00:36:27,366
但是我们的版本

965
00:36:27,366 --> 00:36:28,676
实际上被扩展了包括了

966
00:36:28,676 --> 00:36:29,686
更多的例子

967
00:36:29,686 --> 00:36:31,706
所以你可以看到我们如何

968
00:36:31,706 --> 00:36:32,766
处理 Interface Builder 的

969
00:36:32,986 --> 00:36:34,396
你可以找到我们是如何

970
00:36:34,396 --> 00:36:36,196
让文字环绕图片的

971
00:36:36,556 --> 00:36:38,056
你可以看到我们

972
00:36:38,056 --> 00:36:39,376
只在大字体必要时

973
00:36:39,376 --> 00:36:41,296
允许滚动等等

974
00:36:42,276 --> 00:36:43,566
把它当成一个菜谱用来帮助你

975
00:36:43,666 --> 00:36:44,816
处理你在自己的 app 中

976
00:36:44,816 --> 00:36:45,466
可能遇到的问题

977
00:36:45,966 --> 00:36:47,376
我们强烈建议你

978
00:36:47,376 --> 00:36:47,976
在会议结束后查看

979
00:36:52,566 --> 00:36:53,506
总结一下我们今天讨论的内容

980
00:36:53,506 --> 00:36:55,556
使用新的 API 会使

981
00:36:55,556 --> 00:36:57,836
在 iOS 11 中支持 Dynamic Type 变得很简单

982
00:36:59,136 --> 00:37:00,526
如果你的 app 不支持

983
00:36:59,136 --> 00:37:00,526
如果你的 app 不支持

984
00:37:00,526 --> 00:37:02,376
Dynamic Type 现在是让它

985
00:37:02,376 --> 00:37:04,196
支持的好时候

986
00:37:04,196 --> 00:37:06,456
你应该这么做因为支持

987
00:37:06,456 --> 00:37:08,046
Dynamic Type 是对你的用户有好处的

988
00:37:09,596 --> 00:37:10,716
它对喜欢

989
00:37:10,716 --> 00:37:12,616
更小的字体的用户有好处因为它

990
00:37:12,616 --> 00:37:13,726
允许他们可以在屏幕上看到更多内容

991
00:37:15,086 --> 00:37:15,996
也对喜欢

992
00:37:15,996 --> 00:37:17,576
更大字体的用户有好处因为它

993
00:37:17,576 --> 00:37:19,886
阅读起来更舒适

994
00:37:19,886 --> 00:37:21,826
并且它对

995
00:37:21,826 --> 00:37:23,846
需要更大字体以使他们能够阅读的用户

996
00:37:23,846 --> 00:37:26,286
更加是福利性的

997
00:37:26,546 --> 00:37:29,226
当更多的 app 可以给

998
00:37:29,226 --> 00:37:30,766
残疾人使用时比如

999
00:37:30,766 --> 00:37:33,116
视力低下的人它真的

1000
00:37:33,256 --> 00:37:35,006
为这些人提供了一个更公平的环境

1001
00:37:36,456 --> 00:37:37,836
所以在你的 app 中支持 Dynamic

1002
00:37:37,886 --> 00:37:39,306
Type 你也正在把

1003
00:37:39,306 --> 00:37:40,256
这个世界变得更好

1004
00:37:41,696 --> 00:37:43,356
所以我们真的希望你能够

1005
00:37:43,356 --> 00:37:45,126
了解你今天所看到的一切

1006
00:37:45,476 --> 00:37:47,376
回去开发一些

1007
00:37:47,376 --> 00:37:48,976
适用 Dynamic Type 的 app 然后

1008
00:37:49,036 --> 00:37:50,606
包含更多的用户这样

1009
00:37:50,606 --> 00:37:51,606
更多的用户才可以从

1010
00:37:51,606 --> 00:37:51,976
你的杰出工作中获益

1011
00:37:56,286 --> 00:37:58,406
如果想了解更多信息

1012
00:37:58,406 --> 00:37:59,386
包括今天我们展示的案例

1013
00:37:59,866 --> 00:38:00,746
请查看我们的网站

1014
00:37:59,866 --> 00:38:00,746
请查看我们的网站

1015
00:38:04,396 --> 00:38:05,476
现在这次会议已经

1016
00:38:05,476 --> 00:38:06,916
有几场讨论

1017
00:38:06,916 --> 00:38:08,146
跟我们刚才谈的内容有关

1018
00:38:08,806 --> 00:38:10,076
正如我们之前提到的那样

1019
00:38:10,076 --> 00:38:11,426
昨天的 Design for Everyone 会议

1020
00:38:11,426 --> 00:38:13,086
讨论了 iOS 11 的 Dynamic Type 进步背后

1021
00:38:13,086 --> 00:38:14,646
的设计理念

1022
00:38:16,536 --> 00:38:18,056
也有两场关于

1023
00:38:18,056 --> 00:38:19,556
辅助功能的会议 What's New in

1024
00:38:19,556 --> 00:38:21,406
Accessibility 和 Media and

1025
00:38:21,406 --> 00:38:22,406
Gaming Accessibility

1026
00:38:22,406 --> 00:38:24,546
这两场会议都讨论了

1027
00:38:24,546 --> 00:38:26,126
你可以如何扩大你的用户基础和

1028
00:38:26,126 --> 00:38:27,196
包含更多用户

1029
00:38:28,296 --> 00:38:30,296
最后正如我们之前提到的

1030
00:38:30,296 --> 00:38:31,926
想了解更多关于

1031
00:38:31,926 --> 00:38:33,486
System Spacing Constraints 在

1032
00:38:33,486 --> 00:38:35,116
Interface Builder 中的内容请查看

1033
00:38:35,116 --> 00:38:36,226
Auto Layout Techniques in

1034
00:38:36,226 --> 00:38:37,226
Interface Builder 会议

1035
00:38:37,756 --> 00:38:38,706
谢谢你们来到这里

1036
00:38:38,706 --> 00:38:39,416
我希望你们能够享受接下来的会议

1037
00:38:40,516 --> 00:38:46,940
[掌声]
