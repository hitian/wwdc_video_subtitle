1
00:00:23,516 --> 00:00:25,926
[ 掌声 ]

2
00:00:26,426 --> 00:00:27,236
&gt;&gt;欢迎各位

3
00:00:27,566 --> 00:00:28,896
大家下午好

4
00:00:29,396 --> 00:00:31,066
我是 Sirisha  来自 SiriKit

5
00:00:31,066 --> 00:00:31,726
工程技术团队

6
00:00:32,095 --> 00:00:33,516
今天我要和我的同事兼好友

7
00:00:33,516 --> 00:00:36,046
Tin 一起聊聊我们今年

8
00:00:36,046 --> 00:00:37,176
将给 SiriKit 增添

9
00:00:37,176 --> 00:00:39,626
哪些酷炫的新功能

10
00:00:41,106 --> 00:00:42,746
我们去年推出了 SiriKit

11
00:00:42,746 --> 00:00:44,636
它以一种全新方式

12
00:00:44,636 --> 00:00:46,456
让每个人都能使用自己的语音来

13
00:00:46,456 --> 00:00:47,876
吩咐 App 做事情

14
00:00:48,886 --> 00:00:50,686
这项发布的主要目的

15
00:00:50,686 --> 00:00:51,966
是为了确保大家能够

16
00:00:51,966 --> 00:00:54,516
把自己的服务和内容

17
00:00:54,516 --> 00:00:56,126
与我们的 SiriKit 相结合

18
00:00:56,126 --> 00:00:58,536
这样一来 用户就能用 Siri

19
00:00:58,826 --> 00:01:00,776
跟自己的 App 对话了

20
00:00:58,826 --> 00:01:00,776
跟自己的 App 对话了

21
00:01:01,436 --> 00:01:05,116
为了实现这个目标 我们

22
00:01:05,116 --> 00:01:07,406
已经开放了许多应用域

23
00:01:07,716 --> 00:01:10,196
比如训练、发消息、乘车预订等等

24
00:01:10,196 --> 00:01:12,126
以上列举的只是其中一部分

25
00:01:12,806 --> 00:01:14,876
每个应用域都包含一个或多个

26
00:01:14,876 --> 00:01:15,406
Intent

27
00:01:15,936 --> 00:01:18,386
而这些 Intent 分别对应某个具体任务

28
00:01:18,986 --> 00:01:21,416
例如  通过发送信息的应用域

29
00:01:21,896 --> 00:01:23,676
用户可以发送

30
00:01:23,676 --> 00:01:25,836
或搜索一则信息

31
00:01:26,316 --> 00:01:28,266
使用乘车预订，每个人

32
00:01:28,266 --> 00:01:29,806
都能在自己喜欢的 App 里

33
00:01:29,806 --> 00:01:30,656
预订出行

34
00:01:31,206 --> 00:01:34,236
或者是通过付款应用

35
00:01:34,476 --> 00:01:35,076
付款结账

36
00:01:36,516 --> 00:01:38,746
因为有了这些 Intent  我们

37
00:01:38,746 --> 00:01:40,676
使得大家能够挑选

38
00:01:40,676 --> 00:01:42,596
自己想要订阅 同时也

39
00:01:42,596 --> 00:01:44,706
最适合你的各项 App 功能

40
00:01:44,706 --> 00:01:45,906
的Intent

41
00:01:47,836 --> 00:01:51,896
我们在发布 Watch 3.2 的时候

42
00:01:51,986 --> 00:01:53,866
就已经开始在 WatchOS 平台上

43
00:01:53,866 --> 00:01:54,976
支持 SiriKit 运行

44
00:01:55,526 --> 00:01:57,896
通过编写 Watch Extension

45
00:01:57,896 --> 00:01:59,976
你可以在 Watch 上

46
00:01:59,976 --> 00:02:01,616
充分利用 SiriKit Intent

47
00:01:59,976 --> 00:02:01,616
充分利用 SiriKit Intent

48
00:02:01,686 --> 00:02:02,996
框架的所有优点

49
00:02:03,556 --> 00:02:07,056
我们正在不断努力

50
00:02:07,056 --> 00:02:09,826
给大家带来便捷流畅的体验

51
00:02:09,826 --> 00:02:12,516
所以我们现在增加了

52
00:02:12,516 --> 00:02:13,196
对模拟器的支持

53
00:02:13,946 --> 00:02:17,716
启动 iOS10.3 和 watchOS3.2

54
00:02:17,746 --> 00:02:20,836
你就能够在编写 SiriKit Extension 时

55
00:02:20,836 --> 00:02:22,326
进行调试和

56
00:02:22,326 --> 00:02:22,966
检测

57
00:02:24,356 --> 00:02:26,456
今年对我们来说意义非凡

58
00:02:27,096 --> 00:02:29,256
用户的广泛认同和绝妙反馈

59
00:02:29,256 --> 00:02:30,806
让这一切成为现实

60
00:02:31,446 --> 00:02:32,796
我们不妨大致看一看

61
00:02:32,956 --> 00:02:33,876
今年我们将给大家带来

62
00:02:33,876 --> 00:02:34,876
哪些酷炫的东西

63
00:02:36,076 --> 00:02:39,646
我们开发了许多新的应用域

64
00:02:39,646 --> 00:02:40,386
和更丰富的 Intent

65
00:02:41,446 --> 00:02:43,936
全新的 API（应用程序编程接口）让你拥有更多权限

66
00:02:43,936 --> 00:02:46,156
在 Siri 里

67
00:02:46,156 --> 00:02:49,006
实现体验定制化

68
00:02:49,006 --> 00:02:49,626
并且察看自己的 App 视图

69
00:02:50,936 --> 00:02:52,696
我们还大力改进了

70
00:02:52,696 --> 00:02:54,746
各个系统和 API 以便有效地

71
00:02:54,746 --> 00:02:56,436
提升用户体验

72
00:02:57,996 --> 00:02:59,776
那么 我们不妨先从

73
00:02:59,776 --> 00:03:00,656
应用域谈起

74
00:02:59,776 --> 00:03:00,656
应用域谈起

75
00:03:01,726 --> 00:03:03,566
我们已经把一些新的 Intent 添加到

76
00:03:03,566 --> 00:03:04,746
付款应用域

77
00:03:05,216 --> 00:03:08,396
我们还增强了对列表和

78
00:03:08,396 --> 00:03:10,626
备忘录使用功能的支持

79
00:03:11,576 --> 00:03:14,086
如果你的 App 使用可视化代码

80
00:03:14,436 --> 00:03:15,876
那么你可以着手考虑整合

81
00:03:15,876 --> 00:03:17,986
今年秋天开始投入使用的 Sirikit 功能了

82
00:03:19,736 --> 00:03:22,546
付款应用域是从 iOS10 就开始

83
00:03:22,546 --> 00:03:22,896
采用了

84
00:03:23,286 --> 00:03:25,356
我们当初在做这款发布时 添加了

85
00:03:25,356 --> 00:03:27,646
支持付款和

86
00:03:27,646 --> 00:03:28,466
收款的功能

87
00:03:28,466 --> 00:03:33,156
我们在发布 10.3 版本时  又添加了

88
00:03:33,156 --> 00:03:34,276
查看账单的功能

89
00:03:34,826 --> 00:03:36,476
用户能够查询账单

90
00:03:36,476 --> 00:03:37,986
并进行支付

91
00:03:39,036 --> 00:03:40,876
今年我们将进一步扩大支持内容

92
00:03:40,976 --> 00:03:43,276
我们这次增添了对账户管理

93
00:03:43,276 --> 00:03:44,716
的支持

94
00:03:45,476 --> 00:03:47,026
用户目前将能够

95
00:03:47,886 --> 00:03:49,466
把钱从一个账户转移到

96
00:03:49,466 --> 00:03:52,336
另一个账户  或是查询

97
00:03:52,336 --> 00:03:53,406
账户信息

98
00:03:54,366 --> 00:03:55,576
我们现在来看看这些内容

99
00:03:56,406 --> 00:03:57,636
首先我想谈谈

100
00:03:57,636 --> 00:03:58,626
转账的 Intent

101
00:03:58,626 --> 00:04:01,966
请看大屏幕  Siri 的

102
00:03:58,626 --> 00:04:01,966
请看大屏幕  Siri 的

103
00:04:01,966 --> 00:04:04,476
功能确实非常强大

104
00:04:04,476 --> 00:04:06,166
它可以理解这么长的请求

105
00:04:06,776 --> 00:04:08,116
现在我就给大家

106
00:04:08,116 --> 00:04:09,526
逐行演示这些内容

107
00:04:10,256 --> 00:04:12,166
明天转账 10 美元

108
00:04:12,226 --> 00:04:18,046
就有 10 美元被映射为转账金额

109
00:04:19,166 --> 00:04:22,166
而明天 就被对应转换为

110
00:04:22,166 --> 00:04:22,906
具体执行日期

111
00:04:24,166 --> 00:04:26,026
搞定 这些交易特征

112
00:04:26,026 --> 00:04:27,856
很简单 而且映射准确

113
00:04:28,686 --> 00:04:30,006
那么账户查询是什么情况呢？

114
00:04:31,016 --> 00:04:32,526
账户的命名方式

115
00:04:32,526 --> 00:04:32,796
多种多样

116
00:04:33,256 --> 00:04:35,336
有时候我会用机构名称

117
00:04:35,336 --> 00:04:36,616
来命名账户

118
00:04:37,206 --> 00:04:39,086
或者 就像我在这里使用的

119
00:04:39,086 --> 00:04:40,426
账户类型：活期账户

120
00:04:40,896 --> 00:04:42,166
存款和信用卡

121
00:04:43,006 --> 00:04:45,036
Siri 能弄清楚所有账户的

122
00:04:45,136 --> 00:04:47,826
时间段，并且能确保

123
00:04:47,826 --> 00:04:49,906
查询准确  然后把结果传到

124
00:04:49,906 --> 00:04:51,646
你的 App

125
00:04:51,646 --> 00:04:53,976
干得漂亮

126
00:04:54,176 --> 00:04:55,556
这个 Rainbow Savings 又是什么？

127
00:04:56,036 --> 00:04:58,386
这是我在自己的一个 App 里

128
00:04:58,666 --> 00:05:00,696
注册账户时使用过

129
00:04:58,666 --> 00:05:00,696
注册账户时使用过

130
00:05:00,696 --> 00:05:01,926
的名字

131
00:05:02,466 --> 00:05:03,906
现在我想确认一下

132
00:05:03,906 --> 00:05:05,756
Siri 还能准确识别

133
00:05:05,756 --> 00:05:06,556
我的账户别称

134
00:05:07,066 --> 00:05:08,446
这是怎样实现的呢？

135
00:05:08,976 --> 00:05:10,216
如果你使用我们的

136
00:05:10,506 --> 00:05:13,056
IN Vocabulary API 来注册

137
00:05:13,056 --> 00:05:15,446
用户详细资料 我们就能

138
00:05:15,446 --> 00:05:18,776
了解到用户的具体

139
00:05:19,036 --> 00:05:19,836
信息

140
00:05:21,706 --> 00:05:22,826
你可以在这个链接中

141
00:05:22,826 --> 00:05:26,066
获取有关 IN Vocabulary API

142
00:05:26,896 --> 00:05:28,916
的更多信息

143
00:05:28,976 --> 00:05:30,746
好 我们再来谈谈查询环节

144
00:05:31,086 --> 00:05:33,336
我们第二个 Intent 是查询

145
00:05:33,336 --> 00:05:35,956
账户的 Intent 它可以

146
00:05:36,026 --> 00:05:38,816
如果用户恰好要求列出所有的

147
00:05:38,816 --> 00:05:41,176
账户  它就能列出所有的

148
00:05:41,176 --> 00:05:42,366
账户类型

149
00:05:42,986 --> 00:05:45,326
信息量恰好足够

150
00:05:45,326 --> 00:05:46,366
用来区分

151
00:05:46,366 --> 00:05:47,646
每个账户  外加它们的

152
00:05:47,646 --> 00:05:48,266
余额

153
00:05:48,836 --> 00:05:50,516
如果用户想了解

154
00:05:50,516 --> 00:05:52,386
每个账户的更多详情

155
00:05:52,386 --> 00:05:53,686
只需点开其中任意一项

156
00:05:53,686 --> 00:05:55,636
来详细了解

157
00:05:56,446 --> 00:05:58,746
账户查询 Intent 不仅

158
00:05:58,746 --> 00:06:00,756
显示所有账户 而且

159
00:05:58,746 --> 00:06:00,756
显示所有账户 而且

160
00:06:00,756 --> 00:06:02,836
还可以用来查看

161
00:06:02,836 --> 00:06:04,326
具体的账户信息

162
00:06:04,866 --> 00:06:05,856
就像这样

163
00:06:06,076 --> 00:06:08,536
我的 Rainbow Checking 账户里

164
00:06:08,536 --> 00:06:09,746
余额还有多少？

165
00:06:10,586 --> 00:06:12,706
我现在具体询问的是我

166
00:06:12,706 --> 00:06:14,706
某个账户里的余额

167
00:06:15,256 --> 00:06:17,746
Siri 完全理解这一点

168
00:06:17,746 --> 00:06:20,196
所以它马上给用户提供了

169
00:06:20,196 --> 00:06:21,256
所需要的信息

170
00:06:21,756 --> 00:06:24,116
我们不仅支持查询常规余额

171
00:06:24,116 --> 00:06:26,456
我们还另外添加了

172
00:06:26,456 --> 00:06:27,776
其他几种余额类型

173
00:06:28,106 --> 00:06:29,976
比如说 如果你的 App 支持

174
00:06:30,036 --> 00:06:32,356
飞行里程累积 或者是

175
00:06:32,456 --> 00:06:32,866
奖励值

176
00:06:33,476 --> 00:06:36,006
Siri 同样也能识别

177
00:06:36,006 --> 00:06:36,296
它们

178
00:06:36,826 --> 00:06:38,656
我的飞行里程已经积累多少到我的

179
00:06:38,656 --> 00:06:39,456
Sparkle 卡里了呢？

180
00:06:39,916 --> 00:06:41,706
Siri 理解了 于是就把

181
00:06:41,706 --> 00:06:42,686
里程数发送到你的 App

182
00:06:43,156 --> 00:06:45,056
就这样 给用户提供了

183
00:06:45,056 --> 00:06:46,146
所需要的信息

184
00:06:46,716 --> 00:06:51,976
所以，INTransferMoneyIntent 可以

185
00:06:51,976 --> 00:06:54,896
用来把钱从一个账户

186
00:06:55,316 --> 00:06:58,166
转到另一账户

187
00:06:58,166 --> 00:07:00,606
INSearchForAccountsIntent 可以

188
00:06:58,166 --> 00:07:00,606
INSearchForAccountsIntent 可以

189
00:07:00,606 --> 00:07:03,566
用来查看余额  可以列出

190
00:07:03,566 --> 00:07:05,566
所有账户  或者查看任何

191
00:07:05,566 --> 00:07:07,226
账户的具体信息

192
00:07:07,716 --> 00:07:09,496
这就是我们今年关于付款的

193
00:07:09,496 --> 00:07:10,066
全部内容

194
00:07:10,186 --> 00:07:15,906
根据分析 我们发现

195
00:07:15,906 --> 00:07:18,386
管理列表和备忘录是

196
00:07:18,386 --> 00:07:20,246
非常受 Siri 用户欢迎的

197
00:07:20,246 --> 00:07:22,126
实例之一

198
00:07:22,496 --> 00:07:24,796
所以 今年我们准备

199
00:07:24,796 --> 00:07:27,266
加大力度  来支持

200
00:07:27,526 --> 00:07:29,346
列表和备忘录功能

201
00:07:29,406 --> 00:07:31,296
我们已经添加了所有的 API 用来

202
00:07:31,296 --> 00:07:34,176
确保用户能够创建

203
00:07:34,686 --> 00:07:37,396
编辑和管理他们的列表

204
00:07:37,556 --> 00:07:39,356
备忘录和提醒

205
00:07:40,396 --> 00:07:42,816
不仅如此  用户还能在他们的

206
00:07:42,816 --> 00:07:44,556
列表和备忘录中

207
00:07:44,556 --> 00:07:46,086
进行搜索

208
00:07:46,456 --> 00:07:49,936
我们来看一下

209
00:07:50,366 --> 00:07:52,266
这是一个创建列表的

210
00:07:52,266 --> 00:07:52,676
示例

211
00:07:53,216 --> 00:07:56,206
我可以让 Siri 创建一个列表

212
00:07:56,586 --> 00:07:58,826
首先要给它提供一个标题

213
00:07:58,826 --> 00:07:59,336
和内容

214
00:07:59,726 --> 00:08:01,876
Siri 的强大功能足以

215
00:07:59,726 --> 00:08:01,876
Siri 的强大功能足以

216
00:08:01,876 --> 00:08:03,106
把它们加以区分

217
00:08:03,446 --> 00:08:05,396
并且理解清楚  再传递出

218
00:08:05,396 --> 00:08:06,986
正确的信息  它填写好

219
00:08:06,986 --> 00:08:09,276
Intent 再提供给你

220
00:08:09,276 --> 00:08:10,466
用来创建视图

221
00:08:11,006 --> 00:08:15,606
这是我最喜欢的

222
00:08:15,606 --> 00:08:17,546
Intent 之一：标记任务已完成

223
00:08:17,596 --> 00:08:18,426
是一种乐趣

224
00:08:19,326 --> 00:08:21,416
SetTaskAttributeIntent 可以

225
00:08:21,416 --> 00:08:22,836
这样使用

226
00:08:23,026 --> 00:08:25,256
它有一个任务类型  包括

227
00:08:25,256 --> 00:08:27,176
完成和未完成

228
00:08:27,176 --> 00:08:29,336
它在 Siri 和

229
00:08:29,336 --> 00:08:31,646
和 App 之间传递信息 从而

230
00:08:31,646 --> 00:08:34,015
确保我们的行动 

231
00:08:34,176 --> 00:08:34,726
正确无误

232
00:08:35,296 --> 00:08:39,186
我们添加了全新的 Intent（动机）来

233
00:08:39,186 --> 00:08:40,376
支持提醒功能

234
00:08:41,046 --> 00:08:42,655
我们可以用许多方式来创建

235
00:08:42,655 --> 00:08:42,926
提醒事项

236
00:08:43,416 --> 00:08:45,396
Siri 支持两种类型的

237
00:08:45,446 --> 00:08:48,556
提醒事项：空间类型和时间类型

238
00:08:49,176 --> 00:08:50,956
我们先来说说空间类型

239
00:08:50,956 --> 00:08:53,866
这里有个例子：在 UnicornNote 里

240
00:08:53,866 --> 00:08:55,656
提醒我在

241
00:08:55,656 --> 00:08:56,556
下午 5 点收工

242
00:08:56,556 --> 00:08:59,176
我现在再让 Siri 提醒我

243
00:08:59,176 --> 00:09:00,676
一到办公室就打印幻灯片

244
00:08:59,176 --> 00:09:00,676
一到办公室就打印幻灯片

245
00:09:00,676 --> 00:09:03,826
我正在--我要

246
00:09:04,166 --> 00:09:05,676
确保 Siri 能明白

247
00:09:05,676 --> 00:09:07,296
这个词的地理定位

248
00:09:07,546 --> 00:09:09,056
然后再把信息传递给你

249
00:09:09,056 --> 00:09:11,266
这样你就能给这个地理定位

250
00:09:11,266 --> 00:09:13,526
创建一个正确的提醒事项

251
00:09:14,076 --> 00:09:17,786
下一个例子 提醒我

252
00:09:17,786 --> 00:09:21,456
下午 5 点收工  这样是

253
00:09:21,456 --> 00:09:24,426
为了确保日期触发器

254
00:09:24,426 --> 00:09:25,156
能够创建成功

255
00:09:25,156 --> 00:09:27,566
通过这两个例子

256
00:09:27,566 --> 00:09:29,596
你会发现 Siri 很强大

257
00:09:29,596 --> 00:09:31,616
它完全能理解我所说的

258
00:09:31,696 --> 00:09:33,496
“下午5点收工”

259
00:09:33,806 --> 00:09:36,146
然后就创建一份日期提醒事项

260
00:09:36,146 --> 00:09:38,056
而不是创建一份

261
00:09:38,056 --> 00:09:38,806
地点事项的提醒下班这件事

262
00:09:39,256 --> 00:09:42,076
在前面那个例子里  Siri

263
00:09:42,076 --> 00:09:44,036
创建了一个地点触发器

264
00:09:44,036 --> 00:09:45,626
因为我说了“一到办公室”

265
00:09:46,226 --> 00:09:48,336
Siri 十分擅长对你使用的这些语句

266
00:09:48,336 --> 00:09:50,236
进行语法分析

267
00:09:50,236 --> 00:09:52,286
Siri 能够理解它们  并用来创建

268
00:09:52,286 --> 00:09:54,646
正确的 Intent 然后再传送

269
00:09:55,176 --> 00:09:55,256
给你

270
00:09:57,356 --> 00:10:00,856
因此  CreateTaskIntent 可以用来

271
00:09:57,356 --> 00:10:00,856
因此  CreateTaskIntent 可以用来

272
00:10:01,236 --> 00:10:03,266
创建任务和列表

273
00:10:04,706 --> 00:10:07,406
AddTasksIntent 可以创建提醒事项

274
00:10:07,676 --> 00:10:09,476
并在已有的提醒事项中添加

275
00:10:09,476 --> 00:10:09,776
新任务

276
00:10:11,606 --> 00:10:14,516
SetTaskAttributeIntent 是用来创建

277
00:10:14,516 --> 00:10:17,646
任务 或标明任务已完成

278
00:10:17,646 --> 00:10:18,976
或是把它更新到提醒事项里

279
00:10:22,716 --> 00:10:24,016
我们现在来说说备忘录

280
00:10:25,006 --> 00:10:26,496
备忘录的创建可以有许多

281
00:10:26,496 --> 00:10:26,876
方式

282
00:10:27,266 --> 00:10:29,186
我可以通过标题来创建

283
00:10:29,526 --> 00:10:31,816
也可以通过内容  甚至是在

284
00:10:31,816 --> 00:10:32,366
文件夹里创建

285
00:10:32,776 --> 00:10:34,376
Siri 支持所有这些

286
00:10:34,376 --> 00:10:34,926
选项

287
00:10:35,326 --> 00:10:37,166
所以当我让 Siri 创建一份

288
00:10:37,166 --> 00:10:39,976
备忘录时 只给了特定标题

289
00:10:39,976 --> 00:10:41,216
它就只创建一个空白备忘录

290
00:10:42,056 --> 00:10:45,846
我可以让 Siri 在特定的

291
00:10:45,846 --> 00:10:47,656
文件夹下面 根据内容

292
00:10:47,796 --> 00:10:49,256
创建一个备忘录

293
00:10:49,936 --> 00:10:52,076
Siri 对用户的整体意图进行

294
00:10:52,076 --> 00:10:54,896
语法分析  然后把

295
00:10:54,926 --> 00:10:57,106
贴切的标题、群组名

296
00:10:57,186 --> 00:10:59,296
和内容映射到 Intent

297
00:10:59,336 --> 00:11:01,116
然后再把它传送给你

298
00:10:59,336 --> 00:11:01,116
然后再把它传送给你

299
00:11:01,116 --> 00:11:02,926
以便创建合适的备忘录

300
00:11:06,296 --> 00:11:07,816
至于在现有的备忘录里进行添加

301
00:11:08,376 --> 00:11:10,036
Siri 也同样可以做到

302
00:11:11,226 --> 00:11:13,566
看这里  Siri 将目标备忘录

303
00:11:13,566 --> 00:11:14,696
理解为 WWDC

304
00:11:14,696 --> 00:11:17,666
然后就是实际内容

305
00:11:17,946 --> 00:11:19,746
接着再把信息传送给你

306
00:11:20,006 --> 00:11:23,246
让你创建备忘录

307
00:11:23,976 --> 00:11:24,916
我们再来看看

308
00:11:24,916 --> 00:11:25,436
各种 Intent

309
00:11:26,196 --> 00:11:28,516
CreateNoteIntent 是用来创建

310
00:11:28,516 --> 00:11:28,996
全新的备忘录

311
00:11:30,376 --> 00:11:33,056
AppendToNoteIntent 是往已经存在的

312
00:11:33,056 --> 00:11:33,916
备忘录里添加内容

313
00:11:34,626 --> 00:11:38,486
在列表和备忘录里，另一个重要的

314
00:11:38,486 --> 00:11:40,346
Intent 就是 Search

315
00:11:41,666 --> 00:11:43,646
如果有人让你展示一下

316
00:11:43,646 --> 00:11:46,086
所有的信息  Siri

317
00:11:46,086 --> 00:11:48,376
会理解指令  然后将这个

318
00:11:48,376 --> 00:11:49,996
Intent 发送到你的 App

319
00:11:50,096 --> 00:11:52,676
Siri 还把所有经过 App 传送给我们的

320
00:11:52,676 --> 00:11:55,156
备忘录 列表和提醒事项

321
00:11:55,156 --> 00:11:56,326
列出清单

322
00:11:57,466 --> 00:11:59,486
我们的显示效果 就像你要求我们

323
00:11:59,486 --> 00:12:00,106
做出来的一样

324
00:11:59,486 --> 00:12:00,106
做出来的一样

325
00:12:00,356 --> 00:12:02,816
或者  你还可以选择说

326
00:12:02,886 --> 00:12:04,746
把它按照日期分类

327
00:12:04,746 --> 00:12:06,866
这样 Siri 就会照办

328
00:12:06,866 --> 00:12:08,796
把所有项目按日期分类

329
00:12:09,126 --> 00:12:10,836
然后再展示给用户

330
00:12:10,946 --> 00:12:14,026
用户不仅可以展示所有项目 

331
00:12:14,316 --> 00:12:17,106
还可以只用某个具体类型

332
00:12:17,106 --> 00:12:21,106
进行查询  比如只展示

333
00:12:21,146 --> 00:12:23,536
备忘录 或者只展示列表

334
00:12:24,026 --> 00:12:26,066
或者是展示我昨天创建的

335
00:12:26,066 --> 00:12:26,616
备忘录

336
00:12:27,406 --> 00:12:29,456
甚至只展示我已经完成的任务

337
00:12:30,076 --> 00:12:32,836
我们使用这种 Intent

338
00:12:32,836 --> 00:12:33,866
可以支持很多类型

339
00:12:34,456 --> 00:12:37,016
这个 Intent 本身叫做

340
00:12:37,136 --> 00:12:39,566
SearchForNotebookItemIntent

341
00:12:40,646 --> 00:12:42,926
它支持所有这些类型

342
00:12:43,756 --> 00:12:46,386
因此用户可以看一看 如果使用

343
00:12:46,386 --> 00:12:47,646
其中的一种  Siri 会不会

344
00:12:47,646 --> 00:12:49,926
完全理解，然后

345
00:12:49,986 --> 00:12:51,126
完成任务

346
00:12:51,646 --> 00:12:55,026
以上就是我们所有关于

347
00:12:55,026 --> 00:12:58,806
备忘录和列表的新 API

348
00:12:59,296 --> 00:13:02,046
现在的各种可视码  比如二维码

349
00:12:59,296 --> 00:13:02,046
现在的各种可视码  比如二维码

350
00:13:02,046 --> 00:13:04,326
条形码  近来已经

351
00:13:04,326 --> 00:13:04,906
非常流行

352
00:13:05,376 --> 00:13:07,466
目前它们在 App 里有各种

353
00:13:07,466 --> 00:13:09,066
使用方法

354
00:13:09,166 --> 00:13:12,906
比如说  它们可以用来打开网页

355
00:13:12,906 --> 00:13:14,866
而不再需要输入一堆

356
00:13:14,966 --> 00:13:17,266
无聊的网址  特别是当这些网址使用的

357
00:13:17,266 --> 00:13:18,466
还是外语的时候

358
00:13:19,296 --> 00:13:21,076
展示一下二维码  就可以打开

359
00:13:21,076 --> 00:13:21,726
一个网页

360
00:13:22,396 --> 00:13:24,846
或者用它们付款

361
00:13:24,846 --> 00:13:26,836
或者发起收款 只要出示

362
00:13:26,836 --> 00:13:27,246
代码就可以了

363
00:13:27,866 --> 00:13:29,456
在加油站付费或者

364
00:13:29,456 --> 00:13:30,406
给朋友转账都可以

365
00:13:30,836 --> 00:13:32,986
现在各种 App 都使用条形码

366
00:13:32,986 --> 00:13:34,146
来执行具体任务

367
00:13:34,936 --> 00:13:38,116
我们不仅考虑到条形码或

368
00:13:38,116 --> 00:13:38,576
二维码

369
00:13:38,946 --> 00:13:40,646
我们在用于联络交往的 App 里还使用

370
00:13:40,706 --> 00:13:43,566
作为联系方式的代码

371
00:13:43,566 --> 00:13:45,676
把它们和联系方式相关联  这样就不用

372
00:13:45,676 --> 00:13:47,946
翻看查找某个人  然后

373
00:13:47,946 --> 00:13:48,576
再联系了

374
00:13:48,866 --> 00:13:50,746
只要出示联系码

375
00:13:51,306 --> 00:13:52,976
我们能够轻松获得联系

376
00:13:53,576 --> 00:13:56,466
从 iOS11 开始  Siri 就可以

377
00:13:56,466 --> 00:13:58,356
支持各种可视码了

378
00:13:59,186 --> 00:14:01,166
用户现在只要说一声

379
00:13:59,186 --> 00:14:01,166
用户现在只要说一声

380
00:14:01,656 --> 00:14:03,726
“出示我的 UnicornChat 码”就可以

381
00:14:03,996 --> 00:14:06,266
也就是说  Siri 能理解

382
00:14:06,266 --> 00:14:07,416
这是一种可视码 Intent

383
00:14:07,416 --> 00:14:09,106
它随后就把信息

384
00:14:09,106 --> 00:14:11,036
发送给你的 App

385
00:14:11,326 --> 00:14:12,746
只要是用代码能办到的  因为我们

386
00:14:12,746 --> 00:14:14,006
支持不同类型的

387
00:14:14,116 --> 00:14:16,516
代码  这要看 App 能为我们

388
00:14:16,576 --> 00:14:18,246
提供什么了  我们都会给客户

389
00:14:18,246 --> 00:14:18,756
回馈分享

390
00:14:18,866 --> 00:14:21,986
可以用来实现这个功能的

391
00:14:22,056 --> 00:14:23,696
Intent 就是

392
00:14:24,076 --> 00:14:26,226
INGetVisualCodeIntent

393
00:14:26,916 --> 00:14:28,936
它有一种属性类型

394
00:14:29,296 --> 00:14:31,926
即 visualCodeType  这个类型可以支持的是

395
00:14:32,186 --> 00:14:34,076
它可以是一个联系人

396
00:14:34,076 --> 00:14:36,586
或付款请求  或者是转账付款

397
00:14:37,516 --> 00:14:39,846
通过注册这个 Intent

398
00:14:40,146 --> 00:14:42,746
用户就能够让 Siri

399
00:14:42,746 --> 00:14:44,346
在自己喜欢的 App 里显示这些类型里

400
00:14:44,346 --> 00:14:46,246
的任何一种

401
00:14:47,756 --> 00:14:47,856
可视码

402
00:14:48,266 --> 00:14:49,826
现在  有请我的同事

403
00:14:49,826 --> 00:14:52,886
兼好友 Tin 上台  让他给大家实际展示

404
00:14:52,886 --> 00:14:53,486
这个操作过程

405
00:14:55,516 --> 00:14:58,936
[掌声]

406
00:14:59,436 --> 00:15:00,286
&gt;&gt; 谢谢你 Sirisha

407
00:14:59,436 --> 00:15:00,286
&gt;&gt; 谢谢你 Sirisha

408
00:15:01,186 --> 00:15:01,776
大家好

409
00:15:01,906 --> 00:15:02,686
我的名字是 Tin

410
00:15:02,686 --> 00:15:04,106
我是 Siri 客户团队的

411
00:15:04,106 --> 00:15:04,736
工程师

412
00:15:05,556 --> 00:15:07,546
在去年的 WWDC  我们

413
00:15:07,946 --> 00:15:09,076
向大家介绍了一款 App

414
00:15:09,226 --> 00:15:10,076
它名叫 UnicornChat

415
00:15:10,156 --> 00:15:10,906
它非常棒

416
00:15:11,296 --> 00:15:13,196
现在就让我们的 Unicorn 好友 比如

417
00:15:13,196 --> 00:15:15,036
今天在场的 Celestra  用它发送信息给

418
00:15:15,036 --> 00:15:15,976
Sparkle Sparkly

419
00:15:16,436 --> 00:15:17,046
确实非常棒

420
00:15:17,626 --> 00:15:18,796
今年我们想增加

421
00:15:18,796 --> 00:15:20,436
全新的可视码 Intent

422
00:15:20,436 --> 00:15:21,446
来支持这款 App

423
00:15:21,496 --> 00:15:22,846
它极其简单

424
00:15:23,516 --> 00:15:24,906
所以我们要做的第一件事是

425
00:15:25,086 --> 00:15:25,926
确保能够

426
00:15:25,926 --> 00:15:27,806
修改我们的 info.plist.

427
00:15:28,956 --> 00:15:30,816
如果你的 App 还没有安装

428
00:15:30,816 --> 00:15:32,996
SiriKit  那么你要做的就是

429
00:15:32,996 --> 00:15:34,106
在 App 里创建一个

430
00:15:34,106 --> 00:15:35,946
IntentsExtensionTarget 到

431
00:15:35,946 --> 00:15:37,366
在你的项目里 然后就会生成

432
00:15:37,366 --> 00:15:39,266
可编辑的 info.plist

433
00:15:39,976 --> 00:15:42,016
只要有了 info.plist  你就能继续

434
00:15:42,016 --> 00:15:43,516
在 Intent 支持键下面

435
00:15:43,516 --> 00:15:45,926
添加新的 visualCodeIntent

436
00:15:47,716 --> 00:15:49,926
下一个需要

437
00:15:49,926 --> 00:15:51,366
重点注意的  是你的

438
00:15:51,366 --> 00:15:51,896
主要类

439
00:15:52,396 --> 00:15:53,896
主要类指的是

440
00:15:54,096 --> 00:15:55,666
Siri 将调用你的 App

441
00:15:55,666 --> 00:15:57,136
并让你动手处理你的

442
00:15:57,136 --> 00:15:57,556
Intent

443
00:15:57,846 --> 00:15:58,726
我们就从这里开始

444
00:15:58,726 --> 00:16:00,456
修改我们的应用

445
00:15:58,726 --> 00:16:00,456
修改我们的应用

446
00:16:01,716 --> 00:16:04,706
我还会修改

447
00:16:04,856 --> 00:16:07,086
Intent Extension 方案

448
00:16:07,126 --> 00:16:08,976
并填完这份 Siri Intent 的

449
00:16:08,976 --> 00:16:09,376
现场查询

450
00:16:09,506 --> 00:16:11,386
我可以预先用文本填写

451
00:16:11,546 --> 00:16:13,126
以便展示我的 UnicornChat 码

452
00:16:13,686 --> 00:16:15,316
这样一来 我每次

453
00:16:15,316 --> 00:16:16,896
创建和运行时  Siri 都会

454
00:16:16,896 --> 00:16:18,086
预先填写这份文本

455
00:16:18,086 --> 00:16:19,076
我不用每一次都向它

456
00:16:19,076 --> 00:16:19,926
下达口令

457
00:16:20,016 --> 00:16:21,356
这样就能加快调试和

458
00:16:21,356 --> 00:16:22,786
开发的速度

459
00:16:23,696 --> 00:16:24,326
我们现在一起来编码

460
00:16:24,946 --> 00:16:25,346
谢谢

461
00:16:26,081 --> 00:16:28,081
[ 掌声 ]

462
00:16:28,146 --> 00:16:30,976
我们来看一下演示内容

463
00:16:36,786 --> 00:16:39,026
大家看  我现在展示的主要类

464
00:16:39,026 --> 00:16:40,616
属于我在 UnicornChat 里使用的

465
00:16:40,676 --> 00:16:41,596
Intent 扩展

466
00:16:41,656 --> 00:16:42,926
我们已经在调用

467
00:16:42,926 --> 00:16:43,886
SendMessageIntent

468
00:16:44,336 --> 00:16:45,736
那么我们现在继续处理

469
00:16:45,736 --> 00:16:47,246
这个 VisualCodeIntent

470
00:16:51,176 --> 00:16:52,886
非常简单

471
00:16:53,576 --> 00:16:55,136
如果你正在你的应用里

472
00:16:55,136 --> 00:16:56,696
处理多个 Intent

473
00:16:57,066 --> 00:16:58,426
那么  把它们分割成

474
00:16:58,426 --> 00:17:00,076
多个类别  是个好主意

475
00:16:58,426 --> 00:17:00,076
多个类别  是个好主意

476
00:17:00,646 --> 00:17:01,986
这样可以区分你的逻辑

477
00:17:01,986 --> 00:17:03,526
可以更方便地进行测试和

478
00:17:03,526 --> 00:17:03,916
调试

479
00:17:03,916 --> 00:17:05,886
好  我们现在进入

480
00:17:05,886 --> 00:17:07,496
VisualCodeIntentHandler 类

481
00:17:13,306 --> 00:17:14,866
提醒一下 你需要做好

482
00:17:15,195 --> 00:17:16,215
三件事

483
00:17:16,215 --> 00:17:18,705
来处理一项 SiriKit 的 Intent

484
00:17:19,435 --> 00:17:20,665
首先要做的是

485
00:17:20,665 --> 00:17:21,955
解析你的 Intent

486
00:17:22,486 --> 00:17:23,425
通过解析 你可以

487
00:17:23,425 --> 00:17:25,886
有机会自定义 Siri 的

488
00:17:25,886 --> 00:17:27,076
属性  以及它处理

489
00:17:27,116 --> 00:17:28,246
Intent 属性的方式

490
00:17:29,256 --> 00:17:30,896
第二件事  是确认

491
00:17:31,546 --> 00:17:33,276
确认过后 你就有办法

492
00:17:33,276 --> 00:17:35,616
向 Siri 发出准备信号  就是说

493
00:17:35,616 --> 00:17:36,356
你已经准备要处理

494
00:17:36,356 --> 00:17:37,566
这个 Intent 同时进行

495
00:17:37,566 --> 00:17:38,246
验证

496
00:17:39,226 --> 00:17:40,656
最后 你可以继续操作

497
00:17:40,656 --> 00:17:41,636
并处理你的 Intent

498
00:17:42,086 --> 00:17:44,016
至于这个 VisualCodeIntent  我们将

499
00:17:44,016 --> 00:17:45,566
返回一张图片 并让 Siri

500
00:17:45,566 --> 00:17:46,376
把它展示出来

501
00:17:47,126 --> 00:17:48,186
那么我们就来

502
00:17:48,186 --> 00:17:48,556
试一下吧

503
00:17:52,396 --> 00:17:55,346
我要让这个 Intent 的类符合

504
00:17:55,346 --> 00:17:56,906
INGetVisualCodeIntent 的

505
00:17:56,906 --> 00:17:57,706
处理协议

506
00:17:58,006 --> 00:18:00,266
现在  编译器提示我

507
00:17:58,006 --> 00:18:00,266
现在  编译器提示我

508
00:18:00,266 --> 00:18:01,846
需要执行某些

509
00:18:01,846 --> 00:18:02,306
规定方法

510
00:18:02,946 --> 00:18:05,226
继续  这样操作

511
00:18:07,396 --> 00:18:09,326
那么作为要求的唯一规定方法就是

512
00:18:09,326 --> 00:18:10,166
Handle 方法

513
00:18:10,166 --> 00:18:12,146
但是我们强烈建议大家

514
00:18:12,146 --> 00:18:13,596
完整执行解析和

515
00:18:13,596 --> 00:18:14,156
确认这两个步骤

516
00:18:14,156 --> 00:18:15,426
这样可以让你

517
00:18:15,426 --> 00:18:17,116
最大限度地控制和自定义

518
00:18:17,216 --> 00:18:18,846
你在 Siri 里的

519
00:18:18,846 --> 00:18:19,266
用户行为

520
00:18:23,146 --> 00:18:23,986
我现在暂时

521
00:18:23,986 --> 00:18:24,546
跳过这个环节

522
00:18:24,546 --> 00:18:26,236
让我们首先来执行解析

523
00:18:26,236 --> 00:18:26,676
这个步骤

524
00:18:30,616 --> 00:18:32,806
再说一遍 解析是让你能够

525
00:18:32,806 --> 00:18:34,656
自定义你的行为 让它对应

526
00:18:34,656 --> 00:18:36,196
这个 Intent 在 Siri 里的属性

527
00:18:36,646 --> 00:18:38,076
关于 VisualCodeIntent

528
00:18:38,186 --> 00:18:39,576
它只有一个属性

529
00:18:39,656 --> 00:18:40,886
那就是 VisualCodeType

530
00:18:41,556 --> 00:18:42,866
Sirisha 刚才提到过  它可以

531
00:18:42,866 --> 00:18:44,946
是联系码  收款码

532
00:18:44,946 --> 00:18:47,446
或者是付款码

533
00:18:48,266 --> 00:18:49,586
现在来执行一下我们的

534
00:18:49,586 --> 00:18:51,000
自定义逻辑

535
00:19:01,826 --> 00:19:03,706
这时候  如果用户需要一个

536
00:19:03,746 --> 00:19:05,486
联系码  我们就会告诉 Siri

537
00:19:05,486 --> 00:19:06,346
我们准备把它有效处理为一个

538
00:19:06,346 --> 00:19:08,176
联系码的

539
00:19:08,176 --> 00:19:08,466
类型

540
00:19:09,416 --> 00:19:10,856
如果用户没有明确表示

541
00:19:10,856 --> 00:19:12,366
他们想要哪种类型的代码

542
00:19:12,906 --> 00:19:14,906
比如  他们用 UnicornChat 说的只是

543
00:19:14,906 --> 00:19:16,826
“展示我的代码”  Siri 就会

544
00:19:16,826 --> 00:19:19,196
把这种类型填充为“未知”

545
00:19:19,566 --> 00:19:20,856
我们这时可以对这种行为进行

546
00:19:20,856 --> 00:19:22,796
自定义  并且告诉 Siri

547
00:19:22,796 --> 00:19:24,206
我们要把它处理为

548
00:19:24,206 --> 00:19:24,656
联系码类型

549
00:19:25,936 --> 00:19:27,556
我们不准备在这个演示版 App 里支持

550
00:19:27,556 --> 00:19:29,246
付款和收款

551
00:19:29,696 --> 00:19:30,816
所以我们就要告诉 Siri

552
00:19:30,816 --> 00:19:31,596
不支持这种操作

553
00:19:31,856 --> 00:19:33,816
这样做以后 如果用户

554
00:19:33,816 --> 00:19:35,556
请求付款码  Siri

555
00:19:35,556 --> 00:19:36,866
就会非常机智地使用它

556
00:19:36,866 --> 00:19:38,586
支持的所有语言

557
00:19:38,706 --> 00:19:39,566
跟用户会话

558
00:19:39,856 --> 00:19:41,006
我们一行代码都不用

559
00:19:41,006 --> 00:19:41,326
写出来

560
00:19:41,326 --> 00:19:42,996
这就是 SiriKit 的强大之处

561
00:19:45,016 --> 00:19:46,206
现在我们已经解析了

562
00:19:46,206 --> 00:19:46,706
各种属性

563
00:19:47,266 --> 00:19:49,166
接下来 就是进行确认

564
00:19:54,036 --> 00:19:56,036
再次声明 确认就是

565
00:19:56,036 --> 00:19:57,586
我们给 Siri 发出准备完毕的信号

566
00:19:57,726 --> 00:19:59,066
使用这个环节可以很好地

567
00:19:59,066 --> 00:19:59,736
进行验证

568
00:20:00,816 --> 00:20:02,436
接下来  我们首先要确认

569
00:20:02,636 --> 00:20:04,896
我们这位 Unicorn 用户已经拥有一个

570
00:20:04,896 --> 00:20:06,246
有效而活跃的账号 然后我们再展示

571
00:20:06,246 --> 00:20:07,186
这个联系码

572
00:20:07,806 --> 00:20:09,376
如果他们有这样的账号  我们就会继续

573
00:20:09,376 --> 00:20:11,606
把“准备完毕”的反馈码回复

574
00:20:11,606 --> 00:20:12,006
给 Siri

575
00:20:12,006 --> 00:20:14,466
但是用户如果没有一个有效帐号

576
00:20:14,466 --> 00:20:15,636
情况又会怎样？

577
00:20:16,316 --> 00:20:17,846
好，只要启动我们的 App

578
00:20:17,846 --> 00:20:19,596
就行  这样或许就能

579
00:20:19,636 --> 00:20:20,896
让他们进行登录 或者是

580
00:20:20,896 --> 00:20:21,936
重新激活自己的账号

581
00:20:21,936 --> 00:20:23,526
我们可以通过

582
00:20:23,526 --> 00:20:24,706
自定义用户操作来实现这一点

583
00:20:29,106 --> 00:20:30,326
所以我们要用一个自定义用户信息词典

584
00:20:30,326 --> 00:20:31,876
来创建一项自定义用户的操作行为

585
00:20:31,876 --> 00:20:33,166
我们的失误 将会在其中

586
00:20:33,166 --> 00:20:33,806
标注清楚

587
00:20:33,806 --> 00:20:35,356
我们现在换个题目来谈谈 Siri 的

588
00:20:35,576 --> 00:20:37,346
failureRequiringAppLaunch  并且

589
00:20:37,346 --> 00:20:38,386
把用户的操作传递出去

590
00:20:39,046 --> 00:20:41,666
好 如果用户请求代码

591
00:20:41,666 --> 00:20:42,936
但他们既没有注册  也

592
00:20:42,936 --> 00:20:45,086
没有激活账号 Siri

593
00:20:45,086 --> 00:20:47,036
会显示错误  并给用户

594
00:20:47,036 --> 00:20:48,546
一次机会  来启动

595
00:20:48,546 --> 00:20:49,196
App

596
00:20:49,196 --> 00:20:50,986
如果他们启动了这个 App

597
00:20:51,366 --> 00:20:53,036
用户操作就会被传输给

598
00:20:53,036 --> 00:20:53,346
App

599
00:20:53,386 --> 00:20:54,726
然后你就可以提取

600
00:20:54,726 --> 00:20:56,286
这个信息  并要求他们

601
00:20:56,286 --> 00:20:56,496
注册

602
00:20:56,746 --> 00:20:57,896
以确保他们可以连接到

603
00:20:57,896 --> 00:20:59,006
自己的 Unicorn 好友

604
00:20:59,686 --> 00:21:02,926
这样我们就完成了确认环节

605
00:20:59,686 --> 00:21:02,926
这样我们就完成了确认环节

606
00:21:03,336 --> 00:21:10,226
接下来 让我们来处理这一项

607
00:21:10,426 --> 00:21:12,236
Handle 非常简单明确

608
00:21:12,406 --> 00:21:13,246
我们只要在响应时

609
00:21:13,246 --> 00:21:15,246
把完成代码返回给 Siri

610
00:21:15,246 --> 00:21:15,926
就可以了

611
00:21:15,926 --> 00:21:17,146
我们将把这次响应中的

612
00:21:17,216 --> 00:21:18,776
可视码映像的属性

613
00:21:19,026 --> 00:21:20,626
设定为我们的联系码映像

614
00:21:21,486 --> 00:21:22,526
这看起来很不错

615
00:21:23,166 --> 00:21:24,966
现在我们先创建 再运行一下试试

616
00:21:35,366 --> 00:21:36,866
它已经预先填充了我的请求

617
00:21:39,596 --> 00:21:40,396
这样就完成了

618
00:21:40,666 --> 00:21:41,886
一个全新的可视化代码

619
00:21:42,016 --> 00:21:43,426
看起来很棒

620
00:21:44,516 --> 00:21:46,676
[ 掌声 ]

621
00:21:47,176 --> 00:21:48,336
那么我们现在切换回

622
00:21:48,336 --> 00:21:50,626
幻灯片 再简要复述一下

623
00:22:06,046 --> 00:22:07,476
为了支持这些 Intent  你只要

624
00:22:07,476 --> 00:22:08,886
记住修改一下

625
00:22:08,886 --> 00:22:10,356
你的 info.plist 文件

626
00:22:10,746 --> 00:22:12,226
但是  如果你没有

627
00:22:12,226 --> 00:22:13,696
info.plist 文件  你只需要

628
00:22:13,696 --> 00:22:15,256
在 App 里创建一个新的

629
00:22:15,256 --> 00:22:16,616
Intent Extension（意图扩展）目标设定为 

630
00:22:16,616 --> 00:22:17,136
你的 App 之后就能对它进行编辑

631
00:22:17,826 --> 00:22:19,876
接下来 一定要修改

632
00:22:19,876 --> 00:22:21,606
你的主要类  接着再处理

633
00:22:21,606 --> 00:22:22,046
这个 Intent

634
00:22:22,866 --> 00:22:25,686
最后对你的 Intent 进行

635
00:22:25,686 --> 00:22:26,456
解析  确认和处理

636
00:22:27,016 --> 00:22:27,726
超级简单

637
00:22:27,726 --> 00:22:29,126
好了

638
00:22:30,046 --> 00:22:32,346
现在 我稍微转换一下话题

639
00:22:32,346 --> 00:22:33,426
我们来聊一聊

640
00:22:33,816 --> 00:22:35,986
怎样在 Siri 里自定义你的 UI

641
00:22:37,386 --> 00:22:39,896
提醒一下 Siri 里有两种类型的

642
00:22:39,896 --> 00:22:40,916
Extension

643
00:22:41,626 --> 00:22:43,096
第一种类型是 Intent Extension

644
00:22:43,096 --> 00:22:44,636
就是你们刚才看到的那个

645
00:22:44,946 --> 00:22:46,026
它是你在解析

646
00:22:46,266 --> 00:22:47,926
确认和处理时使用 用来处理你的  

647
00:22:47,926 --> 00:22:48,576
事务逻辑  

648
00:22:49,326 --> 00:22:50,186
这是必需的

649
00:22:50,926 --> 00:22:52,826
第二种类型是 Intent UI

650
00:22:52,826 --> 00:22:54,506
extension  你可以用它

651
00:22:54,506 --> 00:22:55,506
配制你的视图

652
00:22:55,666 --> 00:22:56,656
我们接下来要讨论的

653
00:22:56,656 --> 00:23:00,646
就是这个

654
00:22:56,656 --> 00:23:00,646
就是这个

655
00:23:00,816 --> 00:23:02,606
那么  在 iOS10 里  你可以

656
00:23:02,606 --> 00:23:04,046
自定义一部分视图

657
00:23:04,516 --> 00:23:06,116
这是一个 RequestWriteIntent

658
00:23:07,446 --> 00:23:09,786
你可以自定义

659
00:23:09,836 --> 00:23:11,196
视图的部分内容 比如说

660
00:23:11,236 --> 00:23:12,966
把这个地图换成你的

661
00:23:12,966 --> 00:23:13,756
自定义视图

662
00:23:13,896 --> 00:23:15,476
我们真的喜欢 Unicorn 的这些特点

663
00:23:16,956 --> 00:23:18,456
这个很棒

664
00:23:18,856 --> 00:23:20,196
它能够让你添加显示更多的

665
00:23:20,196 --> 00:23:22,746
信息  根据你的个人风格

666
00:23:23,026 --> 00:23:24,846
但我们还注意到  有时也存在

667
00:23:24,846 --> 00:23:25,446
一些情况

668
00:23:25,706 --> 00:23:26,996
比如信息重复问题

669
00:23:27,236 --> 00:23:29,096
就像这里的乘车地点  和下车

670
00:23:29,096 --> 00:23:30,606
地点  它们就重复了

671
00:23:31,236 --> 00:23:32,156
车费也是同样的情况

672
00:23:32,686 --> 00:23:34,086
这是因为你先前没有 

673
00:23:34,086 --> 00:23:36,016
完全掌握 Siri 里所有的

674
00:23:36,016 --> 00:23:37,046
视图元素

675
00:23:37,946 --> 00:23:39,476
不过在今年的iOS 11里  我们

676
00:23:39,566 --> 00:23:40,716
将会让你实现

677
00:23:40,716 --> 00:23:41,216
完全掌控

678
00:23:41,346 --> 00:23:42,986
为了做到这一点  我准备

679
00:23:42,986 --> 00:23:43,846
向大家稍微解释一下

680
00:23:43,846 --> 00:23:45,956
Siri 是怎样绘制

681
00:23:45,956 --> 00:23:46,396
视图的

682
00:23:46,916 --> 00:23:50,966
Siri 视图的呈现方式

683
00:23:50,966 --> 00:23:53,116
是以 UI 元素的栈结构系列来完成

684
00:23:53,676 --> 00:23:55,736
系列里的每一个元素都由

685
00:23:55,996 --> 00:23:57,116
命名为参数的数据来提供支持

686
00:23:57,356 --> 00:23:58,986
举个例子  支持这份地图的

687
00:23:58,986 --> 00:24:00,646
是一个乘车地点参数

688
00:23:58,986 --> 00:24:00,646
是一个乘车地点参数

689
00:24:00,646 --> 00:24:02,486
其他的视图

690
00:24:02,576 --> 00:24:03,596
也与此类似

691
00:24:04,136 --> 00:24:05,886
乘车方式选项名称  下车

692
00:24:05,886 --> 00:24:07,516
地点等等

693
00:24:08,916 --> 00:24:10,126
再举一个例子

694
00:24:11,906 --> 00:24:13,916
现在 Sparkle Sparkly 正准备

695
00:24:13,916 --> 00:24:15,226
开着一款很气派的 Unicorn 汽车

696
00:24:15,226 --> 00:24:15,756
来接我们

697
00:24:15,846 --> 00:24:17,986
那么代表他的  代表这个视图的

698
00:24:17,986 --> 00:24:19,096
就是这样的两个

699
00:24:19,096 --> 00:24:21,056
参数  一个是搭载司机的参数

700
00:24:21,056 --> 00:24:22,066
一个是搭载车辆的参数

701
00:24:22,606 --> 00:24:24,526
所以 有些视图可以通过

702
00:24:24,526 --> 00:24:26,026
多个参数或多组参数

703
00:24:26,026 --> 00:24:26,696
来代表

704
00:24:27,256 --> 00:24:32,506
我们在 iOS11 里 把它作为一个新的

705
00:24:32,506 --> 00:24:34,326
分类来公布  并称为 INParameter

706
00:24:34,656 --> 00:24:36,326
这个分类代表了

707
00:24:36,326 --> 00:24:36,846
这种数据

708
00:24:37,906 --> 00:24:39,426
那么 这里是乘车地点的

709
00:24:39,516 --> 00:24:40,116
INParameter

710
00:24:41,916 --> 00:24:43,196
它是通过一个

711
00:24:43,196 --> 00:24:44,036
参数分类而构成

712
00:24:44,376 --> 00:24:45,006
这个例子里用的是

713
00:24:45,006 --> 00:24:45,916
RequestRideIntent

714
00:24:47,066 --> 00:24:48,716
然后是作为属性的

715
00:24:48,716 --> 00:24:50,766
关键路径  在这个分类里面导向

716
00:24:50,766 --> 00:24:52,726
某个属性的位置

717
00:24:52,726 --> 00:24:55,616
所以参数代表着

718
00:24:55,616 --> 00:24:57,036
一种获取值的方式

719
00:24:57,036 --> 00:24:59,146
同时我们希望能够

720
00:24:59,146 --> 00:25:00,276
获得真值

721
00:24:59,146 --> 00:25:00,276
获得真值

722
00:25:00,976 --> 00:25:02,926
因此在 INInteraction 这方面

723
00:25:02,926 --> 00:25:04,126
还有一个新方法 叫做

724
00:25:04,486 --> 00:25:05,416
参数值

725
00:25:06,486 --> 00:25:08,546
当你将参数传递到

726
00:25:08,546 --> 00:25:10,646
交互过程中  就将获得

727
00:25:10,646 --> 00:25:11,516
真值

728
00:25:11,596 --> 00:25:13,516
至于乘车地点  它就会成为

729
00:25:13,516 --> 00:25:15,756
一个 CL 位置标记对象

730
00:25:17,306 --> 00:25:18,536
不同的参数将拥有

731
00:25:18,536 --> 00:25:20,136
不同的参数值类型

732
00:25:20,476 --> 00:25:21,536
比如  价格区间参数

733
00:25:21,536 --> 00:25:22,386
就会对应于

734
00:25:22,566 --> 00:25:25,026
INPriceRange 类型

735
00:25:27,126 --> 00:25:29,346
因此 根据这样的参数

736
00:25:29,346 --> 00:25:30,606
概念 我们就可以让你

737
00:25:30,606 --> 00:25:32,496
的掌控范围从单一视图

738
00:25:32,496 --> 00:25:35,656
扩展到所有的视图

739
00:25:35,956 --> 00:25:38,076
把它们自定义为不同参数

740
00:25:38,076 --> 00:25:39,436
我们现在就可以做到这一点了

741
00:25:40,026 --> 00:25:43,876
这是 Intent UI Extension 的

742
00:25:43,876 --> 00:25:45,266
主要分类

743
00:25:45,686 --> 00:25:47,206
它符合

744
00:25:47,206 --> 00:25:48,706
INUIHostedViewControlling 协议

745
00:25:48,866 --> 00:25:49,986
这跟前面的情况相同

746
00:25:51,056 --> 00:25:52,556
我们的新方法叫作

747
00:25:52,606 --> 00:25:54,236
configureViewFor 参数

748
00:25:54,726 --> 00:25:56,106
这样的话  你就需要给一系列

749
00:25:56,106 --> 00:25:58,586
参数来配制

750
00:25:58,736 --> 00:25:59,366
你的自定义视图

751
00:26:00,666 --> 00:26:02,336
你会获得一个交互

752
00:26:02,336 --> 00:26:02,756
对象

753
00:26:03,776 --> 00:26:05,086
让你来解析这些

754
00:26:05,086 --> 00:26:05,946
参数值

755
00:26:06,466 --> 00:26:09,336
你还会获得一个语境

756
00:26:09,516 --> 00:26:10,676
它会告诉你

757
00:26:10,676 --> 00:26:11,916
你是在地图应用

758
00:26:11,946 --> 00:26:12,666
还是在 Siri 里进行绘制

759
00:26:13,246 --> 00:26:15,686
这样到了最后 你会

760
00:26:15,686 --> 00:26:16,886
获得一个完成块

761
00:26:17,426 --> 00:26:18,626
你可以调用它

762
00:26:18,866 --> 00:26:19,696
它含有三个参数

763
00:26:20,906 --> 00:26:22,316
首先是布尔数据类型

764
00:26:22,766 --> 00:26:24,516
你在这时要

765
00:26:24,516 --> 00:26:24,736
返回 True 或 False

766
00:26:25,076 --> 00:26:26,956
True 表示你想给

767
00:26:26,956 --> 00:26:28,656
这组参数绘制

768
00:26:28,656 --> 00:26:29,206
自定义视图

769
00:26:29,606 --> 00:26:31,556
False 表示你想让 Siri

770
00:26:31,556 --> 00:26:32,776
绘制默认视图

771
00:26:33,956 --> 00:26:36,156
第二组参数就是

772
00:26:36,156 --> 00:26:37,256
当你选择返回 True 时

773
00:26:37,256 --> 00:26:38,436
所要处理的参数

774
00:26:39,486 --> 00:26:41,316
最后 你给 Siri 返回你的视图尺寸

775
00:26:41,316 --> 00:26:42,796
让它进行绘制

776
00:26:44,216 --> 00:26:45,206
下面 我将通过一个具体的例子

777
00:26:45,206 --> 00:26:48,516
来给大家展示  我们是如何

778
00:26:48,516 --> 00:26:50,116
运用参数来自定义

779
00:26:50,116 --> 00:26:52,076
乘车交互过程的

780
00:26:52,226 --> 00:26:54,016
我们要制造更多的 Unicorn

781
00:26:56,226 --> 00:26:58,736
如图 最上方的是 Siri

782
00:26:59,376 --> 00:27:00,686
最下方是你的那些 Intent

783
00:26:59,376 --> 00:27:00,686
最下方是你的那些 Intent

784
00:27:00,686 --> 00:27:01,456
UIExtension

785
00:27:02,516 --> 00:27:03,656
首先 你要通过一组空参数

786
00:27:03,986 --> 00:27:05,506
来获得调用

787
00:27:06,296 --> 00:27:07,366
这样你就有机会

788
00:27:07,366 --> 00:27:08,786
获得额外信息

789
00:27:09,076 --> 00:27:11,226
来处理我们先前所说的参数

790
00:27:12,606 --> 00:27:15,986
那么  我们这个例子里的情况

791
00:27:15,986 --> 00:27:17,396
是要返回 False

792
00:27:17,396 --> 00:27:19,286
这就意味着我们想让 Siri

793
00:27:19,286 --> 00:27:20,566
为这个参数而绘制

794
00:27:20,816 --> 00:27:21,276
默认视图

795
00:27:21,716 --> 00:27:22,936
而一组空参数的

796
00:27:22,936 --> 00:27:24,326
默认视图

797
00:27:24,326 --> 00:27:25,126
实际上为空白视图

798
00:27:25,646 --> 00:27:28,186
它用代码表现时  外观就是

799
00:27:28,186 --> 00:27:28,486
这样

800
00:27:36,416 --> 00:27:38,346
现在 Siri 需要继续调用

801
00:27:38,346 --> 00:27:39,946
configureView 直到它解析完

802
00:27:39,946 --> 00:27:41,976
所有应用于此次交互的

803
00:27:41,976 --> 00:27:42,566
参数

804
00:27:43,016 --> 00:27:44,726
下一个视图 或者说 下一组 

805
00:27:44,726 --> 00:27:45,856
参数  就是乘车

806
00:27:45,856 --> 00:27:46,416
地点

807
00:27:46,416 --> 00:27:47,656
所以它需要你

808
00:27:47,656 --> 00:27:48,766
给这个环节

809
00:27:48,816 --> 00:27:49,226
配置你自己的视图

810
00:27:49,836 --> 00:27:51,246
这一次 我们要返回的是

811
00:27:51,386 --> 00:27:51,716
True

812
00:27:51,866 --> 00:27:53,976
我们准备告诉 Siri 我们

813
00:27:53,976 --> 00:27:54,856
要处理那个乘车

814
00:27:54,856 --> 00:27:55,406
地点

815
00:27:55,546 --> 00:27:57,226
接下来就是我们自定义视图的

816
00:27:57,226 --> 00:27:57,496
尺寸

817
00:27:58,146 --> 00:28:00,356
当我们这样操作时 Siri 会

818
00:27:58,146 --> 00:28:00,356
当我们这样操作时 Siri 会

819
00:28:00,356 --> 00:28:02,396
把默认视图替换为

820
00:28:02,396 --> 00:28:03,206
我们的自定义视图

821
00:28:03,896 --> 00:28:06,096
而且 它会彻底移除自己原先

822
00:28:06,096 --> 00:28:07,316
准备绘制的默认视图的

823
00:28:07,316 --> 00:28:07,966
系统进程

824
00:28:09,236 --> 00:28:10,856
最后 它将遵照

825
00:28:10,856 --> 00:28:12,256
我们要求设置的尺寸

826
00:28:12,836 --> 00:28:15,576
这就是使用代码操作的

827
00:28:15,576 --> 00:28:15,796
情况

828
00:28:17,706 --> 00:28:18,686
接下来 我们将继续定义我们的

829
00:28:18,776 --> 00:28:19,916
乘车地点参数

830
00:28:20,516 --> 00:28:24,576
当我们根据要求  配置

831
00:28:24,576 --> 00:28:25,646
乘车地点时

832
00:28:25,646 --> 00:28:26,426
就会对视图进行配置

833
00:28:26,866 --> 00:28:28,686
把 True 返回给 Siri  告诉它  我们

834
00:28:28,686 --> 00:28:29,186
正在处理

835
00:28:29,186 --> 00:28:32,486
最后 我们将把 False 的

836
00:28:32,486 --> 00:28:34,306
完成转移到某个 else block 代码块

837
00:28:38,476 --> 00:28:40,256
这样 Siri 将会继续

838
00:28:40,256 --> 00:28:41,856
调用 configureView  直到它

839
00:28:41,856 --> 00:28:42,886
把所有参数解析完毕

840
00:28:43,316 --> 00:28:44,806
接下来是搭乘选项的

841
00:28:44,806 --> 00:28:45,076
名称

842
00:28:45,676 --> 00:28:47,406
你不仅可以向 Siri 返回 False

843
00:28:47,506 --> 00:28:49,426
让它绘制默认视图

844
00:28:49,426 --> 00:28:51,086
或者每次设置一个参数

845
00:28:51,086 --> 00:28:52,656
其实 你还可以告诉

846
00:28:52,656 --> 00:28:54,106
Siri  你想要一次设置

847
00:28:54,516 --> 00:28:55,766
多个参数

848
00:28:55,816 --> 00:28:56,746
或者所有剩余的

849
00:28:56,746 --> 00:28:57,246
参数

850
00:28:57,896 --> 00:28:59,366
那么现在 我们准备告诉 Siri

851
00:28:59,406 --> 00:29:00,256
我们打算处理搭乘选项的

852
00:28:59,406 --> 00:29:00,256
我们打算处理搭乘选项的

853
00:29:00,256 --> 00:29:01,846
名称  然后处理

854
00:29:01,846 --> 00:29:02,666
视图里剩下的所有

855
00:29:02,666 --> 00:29:02,956
参数

856
00:29:03,866 --> 00:29:05,556
Siri 将把所有这些

857
00:29:05,556 --> 00:29:07,556
参数都设置成我们的自定义视图

858
00:29:08,216 --> 00:29:10,046
而且 Siri 不会再要求我们

859
00:29:10,046 --> 00:29:11,306
进一步配置视图

860
00:29:11,306 --> 00:29:12,956
因为我们已经告诉它

861
00:29:12,956 --> 00:29:16,906
我们要处理这些参数

862
00:29:17,456 --> 00:29:18,416
这是以代码形式显示的

863
00:29:18,416 --> 00:29:18,676
操作情况

864
00:29:19,636 --> 00:29:21,116
我们配置自己的参数

865
00:29:22,006 --> 00:29:24,026
这一部分在前面已经评论过了

866
00:29:25,736 --> 00:29:27,106
乘车地点的设置

867
00:29:27,106 --> 00:29:27,486
如前所述

868
00:29:29,236 --> 00:29:31,436
现在 我们要处理搭乘选项的名称

869
00:29:31,436 --> 00:29:33,326
以及剩下的所有

870
00:29:33,326 --> 00:29:33,946
参数

871
00:29:34,526 --> 00:29:38,486
然后我们实现完成  Flase

872
00:29:39,626 --> 00:29:42,036
我们从这个视图出发

873
00:29:42,036 --> 00:29:44,296
它可以使用重复方法来

874
00:29:44,576 --> 00:29:47,626
控制所有视图以及

875
00:29:47,626 --> 00:29:48,676
应用于这些视图的所有

876
00:29:48,676 --> 00:29:49,116
参数

877
00:29:50,586 --> 00:29:52,066
我们不仅可以完成这种类型的

878
00:29:52,066 --> 00:29:54,286
布局  我们还可以做出任何想要的

879
00:29:54,286 --> 00:29:55,346
自定义布局

880
00:29:55,856 --> 00:29:57,616
我们可以绘制一部分自定义视图

881
00:29:57,696 --> 00:29:59,166
可以让 Siri 绘制其余的视图

882
00:29:59,166 --> 00:30:01,286
你可以绘制所有的自定义视图

883
00:29:59,166 --> 00:30:01,286
你可以绘制所有的自定义视图

884
00:30:01,406 --> 00:30:02,386
创建一个自定义标题

885
00:30:02,686 --> 00:30:03,866
可见 它超级强大

886
00:30:05,066 --> 00:30:06,416
那么 让我们来看看它在

887
00:30:06,766 --> 00:30:07,906
Xcode 里的现场操作情况

888
00:30:08,476 --> 00:30:10,836
对我们的 Unicorn 乘车 App 进行自定义

889
00:30:11,486 --> 00:30:13,906
我们打算选用粉色主题

890
00:30:14,116 --> 00:30:16,026
独角兽(Unicorn)喜爱粉色

891
00:30:16,746 --> 00:30:18,736
我们准备处理两个

892
00:30:18,736 --> 00:30:19,126
视图

893
00:30:19,256 --> 00:30:20,496
我们要处理车费和

894
00:30:20,496 --> 00:30:21,786
特价的参数

895
00:30:21,906 --> 00:30:22,596
放在视图顶端

896
00:30:23,046 --> 00:30:24,436
然后是乘车地点、下车地点

897
00:30:24,436 --> 00:30:25,976
搭乘选项名称

898
00:30:26,046 --> 00:30:26,676
放在视图底部

899
00:30:27,206 --> 00:30:30,736
我将再次使用 Siri 的

900
00:30:30,736 --> 00:30:32,616
Intent 查询功能来

901
00:30:32,616 --> 00:30:34,086
预先填写一项请求

902
00:30:34,086 --> 00:30:38,396
让我们再看一遍

903
00:30:38,396 --> 00:30:38,626
演示

904
00:30:48,416 --> 00:30:51,146
现在打开我在

905
00:30:51,146 --> 00:30:52,156
Intents UI extension 的

906
00:30:52,156 --> 00:30:52,716
主要分类

907
00:30:53,266 --> 00:30:54,216
它遵循的是

908
00:30:54,256 --> 00:30:55,826
INUIHostedViewControlling

909
00:30:55,826 --> 00:30:56,336
协议

910
00:30:56,336 --> 00:30:58,956
我们继续来执行

911
00:30:58,956 --> 00:31:00,966
新的 configureView 方法

912
00:30:58,956 --> 00:31:00,966
新的 configureView 方法

913
00:31:03,056 --> 00:31:05,276
先开始第一遍 我会

914
00:31:05,276 --> 00:31:06,786
在每个单独步骤都会返回

915
00:31:06,786 --> 00:31:07,096
False

916
00:31:07,276 --> 00:31:08,466
那么 Siri 就会

917
00:31:08,466 --> 00:31:09,966
为所有参数绘制

918
00:31:09,966 --> 00:31:10,496
默认视图

919
00:31:10,956 --> 00:31:12,476
我们也可以在调试时

920
00:31:12,476 --> 00:31:14,156
将断点放置在这里

921
00:31:14,656 --> 00:31:15,746
看看哪几组参数

922
00:31:15,746 --> 00:31:16,786
是我们要调用的  还有它们是

923
00:31:16,786 --> 00:31:17,876
按照什么顺序

924
00:31:17,876 --> 00:31:18,226
进行交互的

925
00:31:19,316 --> 00:31:20,866
我们来构建运行一下

926
00:31:40,096 --> 00:31:40,716
好

927
00:31:41,166 --> 00:31:42,716
我们要的默认视图有了

928
00:31:42,716 --> 00:31:44,546
因为我们已经告诉 Siri

929
00:31:44,546 --> 00:31:45,326
对所有参数都设置 False

930
00:31:46,126 --> 00:31:47,946
这可不太符合 Unicorn 的风格 那么

931
00:31:47,946 --> 00:31:49,376
我们就来动动手 让它变得

932
00:31:49,946 --> 00:31:50,606
更粉嫩一些

933
00:31:51,096 --> 00:31:52,246
我们来调整一下车费和

934
00:31:52,246 --> 00:31:53,546
特价的参数

935
00:31:54,126 --> 00:31:57,366
所以 先回到控制器界面

936
00:31:58,816 --> 00:32:02,376
我们要界定

937
00:31:58,816 --> 00:32:02,376
我们要界定

938
00:32:02,376 --> 00:32:03,666
需要处理的参数 包括车费和

939
00:32:03,666 --> 00:32:04,036
特价参数

940
00:32:16,136 --> 00:32:16,916
我们将处理这些参数

941
00:32:17,006 --> 00:32:18,376
然后从交互对象的

942
00:32:18,376 --> 00:32:19,936
第一个要求

943
00:32:19,936 --> 00:32:22,896
也就是当 Siri 要求我们

944
00:32:22,896 --> 00:32:24,136
配置一个空白的参数集时

945
00:32:24,136 --> 00:32:26,076
为这些参数提取出

946
00:32:27,436 --> 00:32:27,706
真值 

947
00:32:35,136 --> 00:32:36,476
下一步 我们将使用这些参数值

948
00:32:36,476 --> 00:32:38,456
继续用它来

949
00:32:38,456 --> 00:32:39,966
配置我们的 Unicorn 乘车视图

950
00:32:40,506 --> 00:32:41,916
然后再告诉 Siri  我们要为

951
00:32:41,916 --> 00:32:43,176
这些参数来处理

952
00:32:43,176 --> 00:32:44,756
自定义视图  并规定它的

953
00:32:44,756 --> 00:32:45,216
尺寸

954
00:32:48,206 --> 00:32:50,636
我们继续 把这个移动到某个

955
00:32:50,636 --> 00:32:51,196
else-block 代码块

956
00:32:51,666 --> 00:32:56,166
让我们根据这个来构建视图

957
00:33:12,316 --> 00:33:13,966
现在看起来好多了

958
00:33:14,056 --> 00:33:15,616
我们要的粉色视图有了

959
00:33:15,786 --> 00:33:16,906
它可以处理车费和

960
00:33:16,906 --> 00:33:17,376
特价

961
00:33:17,796 --> 00:33:19,266
由于我们把 False 返给了

962
00:33:19,266 --> 00:33:20,306
其余这些参数

963
00:33:20,566 --> 00:33:22,146
所以 Siri 正在绘制默认视图

964
00:33:22,326 --> 00:33:24,106
包括乘车地点、下车地点

965
00:33:24,106 --> 00:33:25,596
还有搭乘选项名称

966
00:33:26,026 --> 00:33:27,496
所以 为了充分完成自定义视图

967
00:33:27,766 --> 00:33:28,636
我们就要继续处理

968
00:33:28,636 --> 00:33:29,616
其余的参数

969
00:33:39,476 --> 00:33:41,316
现在我们只是在定义

970
00:33:41,316 --> 00:33:43,146
剩下的一些参数

971
00:33:43,196 --> 00:33:44,696
就像先前一样

972
00:33:51,566 --> 00:33:52,746
我们将再一次配置

973
00:33:52,746 --> 00:33:53,156
视图

974
00:33:53,466 --> 00:33:54,546
当 Siri 询问乘车地点时

975
00:33:54,546 --> 00:33:56,466
采取可运用于交互的 parameterValue 方法

976
00:33:56,466 --> 00:33:58,266
就可以提取出

977
00:33:58,266 --> 00:33:59,396
真值

978
00:34:08,686 --> 00:34:09,985
我们最后将使用这些真值

979
00:34:10,266 --> 00:34:11,746
给最后这一批参数

980
00:34:11,746 --> 00:34:12,795
再次配置 Unicorn 的乘车视图

981
00:34:12,795 --> 00:34:14,326
并且告诉 Siri

982
00:34:14,326 --> 00:34:15,936
我们要用自定义的尺寸对它们

983
00:34:15,936 --> 00:34:16,315
进行处理

984
00:34:17,275 --> 00:34:18,096
这看起来很不错

985
00:34:18,716 --> 00:34:20,396
那我们现在就来构建和运行

986
00:34:21,406 --> 00:34:21,476
一下看看

987
00:34:35,496 --> 00:34:37,456
现在我们就得到了非常具有

988
00:34:37,616 --> 00:34:39,985
Unicorn 风格的自定义乘车视图

989
00:34:40,996 --> 00:34:41,815
看起来真棒

990
00:34:43,516 --> 00:34:48,666
[掌声]

991
00:34:49,166 --> 00:34:50,335
让我们再回到幻灯片

992
00:34:51,196 --> 00:34:55,246
我简单复述一下  当你在给参数

993
00:34:55,246 --> 00:34:57,696
配置视图时  要知道

994
00:34:57,696 --> 00:34:59,036
你会被再三要求

995
00:34:59,036 --> 00:35:01,306
对自己的视图进行配置

996
00:34:59,036 --> 00:35:01,306
对自己的视图进行配置

997
00:35:01,686 --> 00:35:02,766
首先 你会被要求提供

998
00:35:03,046 --> 00:35:04,316
一个空白的参数集

999
00:35:04,656 --> 00:35:06,456
那么还是这样 你可以提取

1000
00:35:06,456 --> 00:35:08,346
附加信息  你自己定义

1001
00:35:08,346 --> 00:35:08,686
标题

1002
00:35:08,816 --> 00:35:09,566
或许你甚至现在

1003
00:35:09,566 --> 00:35:10,666
就可以预先处理参数

1004
00:35:12,216 --> 00:35:13,966
你会被依次要求提供

1005
00:35:13,966 --> 00:35:15,476
一组参数

1006
00:35:15,476 --> 00:35:16,146
给某个特定的交互

1007
00:35:16,686 --> 00:35:17,966
你将在随后出现的

1008
00:35:17,966 --> 00:35:19,346
归档更新内容里

1009
00:35:19,346 --> 00:35:20,536
依次找到这一组

1010
00:35:20,536 --> 00:35:21,876
参数

1011
00:35:23,216 --> 00:35:25,056
最后 你只需继续

1012
00:35:25,056 --> 00:35:26,756
处理你的参数 把尺寸

1013
00:35:26,756 --> 00:35:28,166
返回给 Siri  再绘制

1014
00:35:28,166 --> 00:35:28,506
你的视图

1015
00:35:29,676 --> 00:35:34,186
下一步我们将

1016
00:35:34,186 --> 00:35:34,876
添加一个参数

1017
00:35:34,876 --> 00:35:36,776
到 configureView 方法

1018
00:35:36,776 --> 00:35:37,816
这个参数叫 Interactive Behavior

1019
00:35:38,606 --> 00:35:40,216
所以某些视图

1020
00:35:40,216 --> 00:35:41,646
和参数本身就关联着

1021
00:35:41,646 --> 00:35:42,516
交互性

1022
00:35:42,566 --> 00:35:44,396
我们以地图为例

1023
00:35:44,396 --> 00:35:46,026
你轻点它 就会出现另一种视图

1024
00:35:46,296 --> 00:35:47,346
就像是下一个视图

1025
00:35:48,066 --> 00:35:49,496
某些视图可能会启动

1026
00:35:49,496 --> 00:35:49,746
你的 App

1027
00:35:50,326 --> 00:35:51,546
所以 Interactive Behavior 参数

1028
00:35:51,546 --> 00:35:52,966
可以给你一些提示

1029
00:35:53,086 --> 00:35:55,066
提示这些参数

1030
00:35:55,066 --> 00:35:56,136
可以使用哪一种

1031
00:35:56,176 --> 00:35:56,686
交互类型

1032
00:35:56,846 --> 00:35:58,016
你还可以用它

1033
00:35:58,256 --> 00:35:59,846
来自定义你的视图

1034
00:36:00,366 --> 00:36:02,776
另外还有一种方法

1035
00:36:02,776 --> 00:36:04,666
叫做界面参数描述

1036
00:36:04,666 --> 00:36:06,166
它和你的

1037
00:36:06,166 --> 00:36:07,906
Intents UI extension 语境有关

1038
00:36:08,236 --> 00:36:09,176
你可以在

1039
00:36:09,176 --> 00:36:11,056
调试过程中用它来

1040
00:36:11,406 --> 00:36:12,766
打印输出某个特定交互中的

1041
00:36:12,766 --> 00:36:15,626
参数顺序以及这个

1042
00:36:16,416 --> 00:36:16,746
参数集

1043
00:36:16,746 --> 00:36:18,726
看 这就是全新的

1044
00:36:19,216 --> 00:36:20,246
INInteraction API

1045
00:36:20,766 --> 00:36:21,706
它超级强大

1046
00:36:21,706 --> 00:36:23,126
我们迫不及待地想看到

1047
00:36:23,126 --> 00:36:24,136
大家准备用它构建出怎样的惊喜

1048
00:36:24,526 --> 00:36:25,576
我要把讲台交还给 Sirisha

1049
00:36:25,576 --> 00:36:26,746
让她来展示一些

1050
00:36:26,746 --> 00:36:27,636
新增的优化功能

1051
00:36:28,016 --> 00:36:28,346
谢谢大家

1052
00:36:29,516 --> 00:36:33,676
[掌声]

1053
00:36:34,176 --> 00:36:34,896
&gt;&gt;谢谢你，Tin

1054
00:36:35,886 --> 00:36:37,636
除了添加更多的应用域

1055
00:36:38,076 --> 00:36:39,696
和强大的参数

1056
00:36:39,696 --> 00:36:41,296
就像刚才 Tin 介绍的那样

1057
00:36:41,296 --> 00:36:43,286
我们还投入了大量时间

1058
00:36:43,286 --> 00:36:44,426
来增强我们的系统和 API

1059
00:36:44,426 --> 00:36:47,256
我不打算把这些成果全部展示一遍

1060
00:36:47,326 --> 00:36:48,816
但是我想谈谈

1061
00:36:48,896 --> 00:36:49,706
其中的两样

1062
00:36:50,586 --> 00:36:52,576
首先 我要谈谈

1063
00:36:52,576 --> 00:36:54,176
后台体能训练 App Intent 处理

1064
00:36:54,476 --> 00:36:57,406
这是一项新能力

1065
00:36:57,406 --> 00:36:57,976
它可以在后台启动健身的 App

1066
00:36:59,336 --> 00:37:01,796
另一个就是 App 替换名称

1067
00:36:59,336 --> 00:37:01,796
另一个就是 App 替换名称

1068
00:37:02,176 --> 00:37:03,506
我们很快就会讲到这项新功能

1069
00:37:05,106 --> 00:37:06,846
健身广受欢迎的

1070
00:37:06,846 --> 00:37:07,406
Intent

1071
00:37:08,096 --> 00:37:09,866
用户们喜欢用 Siri 来

1072
00:37:09,866 --> 00:37:11,086
掌握健身活动

1073
00:37:11,556 --> 00:37:12,526
它操作非常简单

1074
00:37:13,036 --> 00:37:15,446
当前的执行情况是

1075
00:37:15,446 --> 00:37:17,276
当用户向某个健身 App 发出

1076
00:37:17,276 --> 00:37:18,916
请求指令时 Siri 会调用

1077
00:37:18,916 --> 00:37:19,656
Extension

1078
00:37:20,186 --> 00:37:22,286
接下来 Extension 又会把请求

1079
00:37:22,286 --> 00:37:23,836
传递给 App

1080
00:37:23,836 --> 00:37:26,046
如果设备已经锁定

1081
00:37:26,046 --> 00:37:27,836
Siri 会在启动 App 之前

1082
00:37:27,836 --> 00:37:29,896
请求用户许可

1083
00:37:30,966 --> 00:37:32,676
今年 我们在这方面做了些改变

1084
00:37:33,366 --> 00:37:35,076
我们想要确保

1085
00:37:35,076 --> 00:37:37,146
App 在前台启动之前

1086
00:37:37,146 --> 00:37:38,936
后台就已经

1087
00:37:39,096 --> 00:37:40,066
启动了 App 而不是等到

1088
00:37:40,066 --> 00:37:40,696
在前台显示过后

1089
00:37:41,206 --> 00:37:43,336
所以 用户现在只要对

1090
00:37:43,336 --> 00:37:45,236
Siri 说话 App 就能成功启动

1091
00:37:45,846 --> 00:37:47,266
这是为使用 iOS11 的

1092
00:37:47,266 --> 00:37:49,146
健身 Intent 所准备的

1093
00:37:49,896 --> 00:37:50,786
现在我们来看看代码

1094
00:37:51,916 --> 00:37:52,696
这是目前的

1095
00:37:52,696 --> 00:37:53,616
执行情况

1096
00:37:53,946 --> 00:37:55,826
启动健身 Intent 的

1097
00:37:55,826 --> 00:37:57,366
一个响应码样例

1098
00:37:57,976 --> 00:38:00,226
Extension 通常会返回

1099
00:37:57,976 --> 00:38:00,226
Extension 通常会返回

1100
00:38:00,296 --> 00:38:03,156
继续 App 当 Siri

1101
00:38:03,156 --> 00:38:05,266
调用 UI 应用授权里的

1102
00:38:05,266 --> 00:38:06,886
应用方法时

1103
00:38:08,086 --> 00:38:10,126
Extension 会让 NS userActivity 通过

1104
00:38:10,496 --> 00:38:12,266
并提示启动 App

1105
00:38:13,686 --> 00:38:15,516
我们已经新增了两个代码

1106
00:38:15,516 --> 00:38:17,026
以改变当前的流程

1107
00:38:18,176 --> 00:38:22,076
我们添加了一个新的 Intent

1108
00:38:22,076 --> 00:38:24,896
响应码 Handle an App

1109
00:38:24,896 --> 00:38:27,126
因此 你可以选择返回

1110
00:38:27,226 --> 00:38:29,276
Handle an App 响应码

1111
00:38:29,276 --> 00:38:31,286
来确认我们调用了

1112
00:38:31,286 --> 00:38:32,376
新的应用方法

1113
00:38:33,736 --> 00:38:35,116
我们在 UI 应用授权上

1114
00:38:35,116 --> 00:38:36,776
新增了一个

1115
00:38:36,776 --> 00:38:37,246
应用方法

1116
00:38:37,556 --> 00:38:41,376
这需要采用 IN Intent 和

1117
00:38:41,446 --> 00:38:42,586
Completion Handler 

1118
00:38:43,596 --> 00:38:45,576
所以 当你以 Intent 反应码的形式

1119
00:38:45,886 --> 00:38:47,276
传递 Handle an App

1120
00:38:47,576 --> 00:38:48,626
并执行新的

1121
00:38:48,626 --> 00:38:50,836
应用方法时 我们将调用

1122
00:38:50,836 --> 00:38:52,236
新的应用方法

1123
00:38:52,536 --> 00:38:54,406
在后台提示

1124
00:38:54,406 --> 00:38:55,066
启动 App

1125
00:38:55,666 --> 00:38:57,046
当用户只想启动或暂停健身

1126
00:38:57,046 --> 00:38:59,826
甚至是通过 AirPods 来操作时

1127
00:38:59,826 --> 00:39:01,876
它也非常有用

1128
00:38:59,826 --> 00:39:01,876
它也非常有用

1129
00:39:02,026 --> 00:39:03,316
他们甚至都不必触碰

1130
00:39:03,346 --> 00:39:03,916
设备

1131
00:39:07,046 --> 00:39:07,866
我们来快速地看一下

1132
00:39:07,866 --> 00:39:08,206
这个流程

1133
00:39:08,206 --> 00:39:09,026
看起来如何？

1134
00:39:09,806 --> 00:39:11,836
用户想要开始一项体能训练

1135
00:39:12,576 --> 00:39:14,796
我们启动 Extension  调用

1136
00:39:14,796 --> 00:39:15,676
处理方法

1137
00:39:16,266 --> 00:39:19,286
Extension 就会返回

1138
00:39:19,286 --> 00:39:21,346
新的 Intent 响应码  即 Handle

1139
00:39:21,346 --> 00:39:23,116
an App

1140
00:39:23,316 --> 00:39:25,006
接着 Siri 以新的应用方法

1141
00:39:25,006 --> 00:39:27,296
调用这个应用程序

1142
00:39:27,436 --> 00:39:30,266
传递 IN Intent

1143
00:39:30,266 --> 00:39:31,826
以及 Completion Handler

1144
00:39:31,976 --> 00:39:33,416
这个完成代码块

1145
00:39:33,416 --> 00:39:35,316
嵌入了 Intent 响应

1146
00:39:35,406 --> 00:39:35,656
代码

1147
00:39:36,436 --> 00:39:38,586
于是 应用程序将在

1148
00:39:38,586 --> 00:39:40,586
后台启动 并且

1149
00:39:40,806 --> 00:39:42,656
将成功操作的信息反馈给 Siri

1150
00:39:42,966 --> 00:39:44,196
告知活动

1151
00:39:44,296 --> 00:39:44,766
已完成

1152
00:39:45,406 --> 00:39:47,466
我们认为这将会让用户

1153
00:39:47,466 --> 00:39:49,516
在控制自己的体能训练计划时

1154
00:39:49,516 --> 00:39:51,546
操作体验更加便捷

1155
00:39:51,546 --> 00:39:52,166
流畅

1156
00:39:52,366 --> 00:39:53,766
对于这一点 我们感到很兴奋

1157
00:39:54,896 --> 00:39:57,296
今天我要谈论的

1158
00:39:57,296 --> 00:40:00,566
第二个优化功能是

1159
00:39:57,296 --> 00:40:00,566
第二个优化功能是

1160
00:40:00,896 --> 00:40:04,186
App 的别名

1161
00:40:04,806 --> 00:40:07,996
通常情况下 用户确实会用

1162
00:40:07,996 --> 00:40:09,616
各种各样的名字来

1163
00:40:10,076 --> 00:40:11,266
指代一个 App

1164
00:40:12,056 --> 00:40:13,696
比如 UnicornPay 会被

1165
00:40:13,696 --> 00:40:14,726
简称为 Unicorn

1166
00:40:15,256 --> 00:40:17,336
UnicornPay 或 CornPay

1167
00:40:17,856 --> 00:40:19,816
我们想确保能够

1168
00:40:19,816 --> 00:40:21,596
理解用户使用的

1169
00:40:21,596 --> 00:40:24,686
所有 App 名称变体

1170
00:40:25,366 --> 00:40:28,606
以便准确对应地启用 App

1171
00:40:28,816 --> 00:40:31,056
因此 为了实现这一目标 我们

1172
00:40:31,056 --> 00:40:32,446
将一个新字段

1173
00:40:32,866 --> 00:40:34,526
AlternativeAppName

1174
00:40:34,526 --> 00:40:34,876
引入 .plist

1175
00:40:35,386 --> 00:40:38,246
当你注册 .plist 时

1176
00:40:38,246 --> 00:40:39,826
你可以填写

1177
00:40:40,086 --> 00:40:41,916
所有你认为

1178
00:40:41,916 --> 00:40:43,756
用户可能用来称呼

1179
00:40:43,756 --> 00:40:45,196
这个 App 的名称

1180
00:40:45,196 --> 00:40:46,146
有一个字段叫做

1181
00:40:46,146 --> 00:40:47,756
AlternativeAppNames 里面填写了

1182
00:40:47,756 --> 00:40:49,336
各个实际的名称 同时你也可以

1183
00:40:49,336 --> 00:40:51,276
填写发音提示

1184
00:40:51,276 --> 00:40:52,796
如果你觉得有

1185
00:40:52,796 --> 00:40:53,396
必要的话

1186
00:40:53,396 --> 00:40:56,016
这将帮助 Siri 理解

1187
00:40:56,086 --> 00:40:57,446
所有 App 名称的变体

1188
00:40:57,446 --> 00:40:59,966
从而确保唤起

1189
00:41:00,226 --> 00:41:02,276
并调用这位用户

1190
00:41:02,276 --> 00:41:03,216
期待运行的 App

1191
00:41:06,556 --> 00:41:09,896
到目前为止 我们已经介绍了新的

1192
00:41:09,896 --> 00:41:13,086
域、列表、备忘录和

1193
00:41:13,086 --> 00:41:13,836
可视码

1194
00:41:14,976 --> 00:41:17,246
以及付款域里的

1195
00:41:17,246 --> 00:41:19,096
新 Intent 用来支持账户管理

1196
00:41:20,616 --> 00:41:23,486
全新的 API 可以让你

1197
00:41:23,486 --> 00:41:25,536
在自定义设置视图时获得更多掌控

1198
00:41:26,066 --> 00:41:27,926
我的同事 Tin 刚才已经介绍过

1199
00:41:27,926 --> 00:41:28,276
这一点

1200
00:41:29,546 --> 00:41:31,686
最后 我们的一些优化功能

1201
00:41:32,186 --> 00:41:34,126
例如  在后台开启健身 App

1202
00:41:34,126 --> 00:41:36,426
以及让大家能够向我们

1203
00:41:36,426 --> 00:41:38,606
提供你认为用户

1204
00:41:38,606 --> 00:41:40,096
有可能使用的

1205
00:41:40,406 --> 00:41:42,396
所有 App 别名

1206
00:41:44,636 --> 00:41:46,406
请大家访问我们的网站 

1207
00:41:46,406 --> 00:41:48,446
developer.apple.com 以便

1208
00:41:48,446 --> 00:41:50,996
获得这次 214 会议的

1209
00:41:51,026 --> 00:41:51,866
更多信息

1210
00:41:52,936 --> 00:41:55,156
接下来我们将进行另一场会议

1211
00:41:55,156 --> 00:41:56,696
“打造强大的 SiriKit 体验”

1212
00:41:56,696 --> 00:41:59,106
我们的专家将

1213
00:41:59,106 --> 00:42:00,686
向大家介绍  在编写

1214
00:41:59,106 --> 00:42:00,686
向大家介绍  在编写

1215
00:42:00,846 --> 00:42:03,376
Siri Extension 时

1216
00:42:03,376 --> 00:42:05,096
可能用到的方法和技术 

1217
00:42:05,096 --> 00:42:06,086
并提供各种有益提示

1218
00:42:07,756 --> 00:42:09,526
感谢大家参加

1219
00:42:09,566 --> 00:42:10,016
今天的会议

1220
00:42:10,236 --> 00:42:12,056
我们非常期待能看到

1221
00:42:12,056 --> 00:42:13,086
大家使用我们全新的 API

1222
00:42:13,086 --> 00:42:14,786
并带来各种全新事物

1223
00:42:15,356 --> 00:42:15,736
谢谢大家

1224
00:42:16,516 --> 00:42:24,690
[掌声]
