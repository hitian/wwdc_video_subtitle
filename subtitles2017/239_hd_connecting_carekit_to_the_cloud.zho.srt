1
00:00:06,516 --> 00:00:15,500
[欢呼]

2
00:00:19,516 --> 00:00:21,816
[掌声]

3
00:00:22,316 --> 00:00:22,726
&gt;&gt; 好的

4
00:00:22,726 --> 00:00:23,636
欢迎大家

5
00:00:25,986 --> 00:00:27,026
欢迎来参加我们的主题会议

6
00:00:27,026 --> 00:00:28,696
“将 CareKit 连接到 Cloud”

7
00:00:29,176 --> 00:00:30,086
我是 Kelsey Dedoshka

8
00:00:30,086 --> 00:00:31,246
是 CareKit 团队的

9
00:00:31,246 --> 00:00:32,966
软件工程师

10
00:00:35,206 --> 00:00:36,546
那么 今天的会议将从

11
00:00:36,546 --> 00:00:38,326
CareKit 的简要介绍

12
00:00:38,326 --> 00:00:38,856
开始

13
00:00:39,396 --> 00:00:40,426
随后我会介绍我们

14
00:00:40,426 --> 00:00:42,956
全新的 Bridge API

15
00:00:42,956 --> 00:00:44,176
并就如何将这个 API 整合到

16
00:00:44,176 --> 00:00:45,766
云后端

17
00:00:45,766 --> 00:00:46,306
展开深入讨论

18
00:00:46,796 --> 00:00:48,406
在整个过程中

19
00:00:48,406 --> 00:00:49,926
我们还会继续更深入地

20
00:00:49,926 --> 00:00:51,256
探讨对某些代码的

21
00:00:51,256 --> 00:00:51,676
理解

22
00:00:52,806 --> 00:00:54,266
然后我会请 Akshay

23
00:00:54,266 --> 00:00:55,396
上台来给大家做个

24
00:00:55,396 --> 00:00:56,086
快速演示

25
00:00:56,086 --> 00:00:58,266
最后我们会看看

26
00:00:58,266 --> 00:00:59,526
大家能用这个新特性

27
00:00:59,526 --> 00:01:00,056
做些什么

28
00:00:59,526 --> 00:01:00,056
做些什么

29
00:01:00,886 --> 00:01:01,586
那下面我们就进入正题

30
00:01:02,756 --> 00:01:04,156
如果你们有兴趣了解

31
00:01:04,156 --> 00:01:05,836
这个框架中的新特征

32
00:01:05,836 --> 00:01:06,776
还可以参阅先前的

33
00:01:06,776 --> 00:01:08,376
主题会议“CareKit 和 ResearchKit 中的新特性”

34
00:01:08,376 --> 00:01:10,126
这是由 Sam Ravaka

35
00:01:10,126 --> 00:01:10,576
主持的

36
00:01:11,696 --> 00:01:13,406
如果大家想知道 CareKit 的诞生过程

37
00:01:13,406 --> 00:01:14,726
以及它的底层架构

38
00:01:14,726 --> 00:01:16,626
我强烈推荐你们

39
00:01:16,626 --> 00:01:17,836
去观看去年的会议

40
00:01:17,836 --> 00:01:19,216
“CareKit 入门”

41
00:01:19,216 --> 00:01:21,676
它是由 Omar Kahn 

42
00:01:21,676 --> 00:01:23,336
主持的

43
00:01:23,336 --> 00:01:25,126
CareKit 自去年发布以来

44
00:01:25,126 --> 00:01:27,316
已经帮助众多医疗机构

45
00:01:27,316 --> 00:01:28,826
提高了病患医护的

46
00:01:28,826 --> 00:01:30,866
的整体质量

47
00:01:30,866 --> 00:01:32,826
它提供了家庭医护解决方案

48
00:01:32,826 --> 00:01:34,116
以便追踪医护活动和

49
00:01:34,116 --> 00:01:34,866
评估情况

50
00:01:36,226 --> 00:01:37,786
此外  病患可以通过

51
00:01:37,786 --> 00:01:39,196
各种 CareKit App  对自身医护状态

52
00:01:39,456 --> 00:01:41,356
拥有更多的控制及决定

53
00:01:41,356 --> 00:01:42,616
这给我们带来了新的洞见和

54
00:01:42,616 --> 00:01:44,416
机会 有利于更进一步地

55
00:01:44,416 --> 00:01:46,366
提升医护质量和技术

56
00:01:46,826 --> 00:01:49,866
所以 今年我们要

57
00:01:49,866 --> 00:01:51,896
介绍一种新卡片

58
00:01:51,956 --> 00:01:53,596
让病患可以追踪医护任务

59
00:01:54,046 --> 00:01:55,426
比如膝关节手术后的伸展运动

60
00:01:55,426 --> 00:01:57,796
以及他们需要完成的

61
00:01:57,796 --> 00:01:58,866
一些评估活动

62
00:01:58,866 --> 00:02:00,916
以便医生追踪他们在

63
00:01:58,866 --> 00:02:00,916
以便医生追踪他们在

64
00:02:00,916 --> 00:02:02,256
医护过程中的进展

65
00:02:02,966 --> 00:02:06,236
目前这些坚持治疗的情态 个人症状

66
00:02:06,236 --> 00:02:08,455
和治疗结果就是关键数据点

67
00:02:08,675 --> 00:02:10,356
它们不仅有助于了解

68
00:02:10,356 --> 00:02:12,076
病患的感受

69
00:02:12,076 --> 00:02:13,206
还能了解他们在

70
00:02:13,206 --> 00:02:13,996
自身医护中的参与程度

71
00:02:15,516 --> 00:02:17,066
这个卡片中的数据

72
00:02:17,066 --> 00:02:18,906
对于医护团队而言也是至关重要的

73
00:02:18,976 --> 00:02:20,406
这将有助于他们了解

74
00:02:20,406 --> 00:02:21,496
自己的治疗方案是否

75
00:02:21,496 --> 00:02:22,986
达到了预期效果

76
00:02:25,376 --> 00:02:27,596
我们的 CareKit Insights 标签

77
00:02:27,596 --> 00:02:29,666
现在添加了阈值提醒的特性

78
00:02:29,666 --> 00:02:31,196
它通过窗口小控件  甚至是文本形式

79
00:02:31,196 --> 00:02:34,666
给用户提供了一个很好的

80
00:02:34,706 --> 00:02:37,886
视觉提示  这个文本实际上可以将数据

81
00:02:37,886 --> 00:02:38,886
呈现在最能引起他们注意的地方

82
00:02:38,886 --> 00:02:40,396
提醒他们需要关注

83
00:02:40,396 --> 00:02:41,626
哪些事情

84
00:02:43,876 --> 00:02:46,436
最后 现在的 CareKit App

85
00:02:46,806 --> 00:02:48,096
还允许病患以 PDF 格式

86
00:02:48,096 --> 00:02:50,376
通过我们 Connect View 中的

87
00:02:50,376 --> 00:02:51,676
Share Reports 选项  来分享他们的

88
00:02:51,676 --> 00:02:51,876
数据 

89
00:02:52,916 --> 00:02:54,726
此前我们已经意识到  应该适时地

90
00:02:54,816 --> 00:02:56,646
更新一下这种分享体验了

91
00:03:00,376 --> 00:03:01,746
所以在 CareKit 发布之后

92
00:03:01,746 --> 00:03:03,566
我们非常高兴能收到

93
00:03:03,566 --> 00:03:05,466
通过 CareKit App 汇集而来的

94
00:03:05,466 --> 00:03:08,046
数据 它们不仅对于病患而言弥足珍贵

95
00:03:08,046 --> 00:03:09,416
对于他们的医护团队成员

96
00:03:09,416 --> 00:03:10,076
也是如此

97
00:03:11,236 --> 00:03:12,556
但是 这些数据返回给

98
00:03:12,556 --> 00:03:14,316
医护团队的过程  则是一个

99
00:03:14,316 --> 00:03:14,956
手动过程

100
00:03:15,626 --> 00:03:17,076
这会给医护团队远程升级

101
00:03:17,116 --> 00:03:19,156
病患卡片

102
00:03:19,156 --> 00:03:20,586
带来挑战

103
00:03:20,826 --> 00:03:22,426
他们甚至很难正确地把握

104
00:03:22,426 --> 00:03:23,206
病患在医护过程中的

105
00:03:23,206 --> 00:03:23,636
进展情况

106
00:03:25,176 --> 00:03:26,436
所以这些病患与医护团队的 App 

107
00:03:26,436 --> 00:03:28,676
真的需要努力改进

108
00:03:28,676 --> 00:03:30,156
从而打破存在于彼此间的

109
00:03:30,156 --> 00:03:31,656
数据壁垒

110
00:03:34,346 --> 00:03:36,296
所以我们看到了一些 App

111
00:03:36,386 --> 00:03:37,916
创建它们自己的

112
00:03:37,916 --> 00:03:39,956
后端云解决方案

113
00:03:40,026 --> 00:03:41,366
来帮助实现病患与医护团队 App

114
00:03:41,366 --> 00:03:42,406
的数据同步化

115
00:03:43,316 --> 00:03:44,696
但是 这并不是一件

116
00:03:44,696 --> 00:03:44,866
容易的事

117
00:03:45,666 --> 00:03:46,686
它真的需要

118
00:03:46,686 --> 00:03:48,076
开发者处理其中的

119
00:03:48,076 --> 00:03:49,036
大部分工作

120
00:03:50,086 --> 00:03:51,486
他们必须处理如何与这些 App 的

121
00:03:51,486 --> 00:03:53,006
数据存储器以及

122
00:03:53,006 --> 00:03:54,636
后端云系统

123
00:03:54,636 --> 00:03:55,766
直接建立接口

124
00:03:56,296 --> 00:03:59,806
我们可以看到 

125
00:03:59,986 --> 00:04:01,466
越来越多的人需要打破

126
00:03:59,986 --> 00:04:01,466
越来越多的人需要打破

127
00:04:01,466 --> 00:04:03,666
这个数据障碍  

128
00:04:03,726 --> 00:04:05,666
从而帮助病人和医护团队 App

129
00:04:05,666 --> 00:04:06,926
安全地实现数据同步

130
00:04:06,926 --> 00:04:07,336
如果他们需要这样做的话

131
00:04:07,886 --> 00:04:10,996
所以这就给我们带来了

132
00:04:10,996 --> 00:04:12,876
一个改进 CareKit 框架

133
00:04:12,876 --> 00:04:15,316
的机会 

134
00:04:15,316 --> 00:04:16,956
这种改进  是要在框架结构中

135
00:04:16,956 --> 00:04:19,366
直接建立勾连 从而使得当前应用和

136
00:04:19,366 --> 00:04:21,276
新的应用能够以更简单

137
00:04:21,326 --> 00:04:22,896
更清洁的方式满足它们的

138
00:04:22,896 --> 00:04:24,306
数据同步需求

139
00:04:26,746 --> 00:04:28,786
接下来 我们希望

140
00:04:28,786 --> 00:04:30,536
能借助创建这个新特性

141
00:04:30,536 --> 00:04:31,796
来改进数据管道

142
00:04:32,326 --> 00:04:34,046
从而减少

143
00:04:34,046 --> 00:04:35,156
开发团队

144
00:04:35,156 --> 00:04:35,836
需要付出的努力

145
00:04:36,306 --> 00:04:39,426
这种基于云计算的

146
00:04:39,426 --> 00:04:41,146
数据共享  意味着

147
00:04:41,146 --> 00:04:42,536
在家使用 CareKit App

148
00:04:42,616 --> 00:04:44,586
追踪自身医护情况的病人现在就可以

149
00:04:44,586 --> 00:04:45,516
实时分享这些医护数据了

150
00:04:45,516 --> 00:04:47,976
这一点很棒

151
00:04:47,976 --> 00:04:49,756
因为这就使得医护团队

152
00:04:49,756 --> 00:04:51,006
可以看到病患情况发展的

153
00:04:51,006 --> 00:04:52,876
实时记录

154
00:04:52,876 --> 00:04:54,356
这样他们就有机会

155
00:04:54,356 --> 00:04:55,956
对医护计划进行调整

156
00:04:56,406 --> 00:04:58,166
甚至直接出面提供援助  如果他们愿意

157
00:04:58,166 --> 00:04:58,646
这样做的话

158
00:05:01,396 --> 00:05:03,016
所以在这整个过程中

159
00:05:03,196 --> 00:05:04,546
我们确实从许多

160
00:05:04,546 --> 00:05:06,886
CareKit App 里面获得启发 尤其是

161
00:05:06,886 --> 00:05:08,376
南加利福利亚州

162
00:05:08,376 --> 00:05:09,246
Sharp Healthcare

163
00:05:09,246 --> 00:05:09,756
所做的工作

164
00:05:11,056 --> 00:05:12,516
那么  让我们根据他们这些用户所给予的启发

165
00:05:12,516 --> 00:05:14,366
来发挥创造出我们自己的用途吧

166
00:05:14,586 --> 00:05:16,046
我们来看看正在接受眼部手术的患者  

167
00:05:16,046 --> 00:05:18,156
这项手术就利用了

168
00:05:18,156 --> 00:05:19,446
我们的 CareKit 新功能和

169
00:05:19,446 --> 00:05:19,976
Bridge API

170
00:05:19,976 --> 00:05:21,976
这真正展现出了

171
00:05:21,976 --> 00:05:23,296
数据同步的重要性

172
00:05:23,796 --> 00:05:27,406
在这个例子中

173
00:05:27,406 --> 00:05:29,236
术后的两周时间对于

174
00:05:29,236 --> 00:05:30,176
病患康复来说至关重要

175
00:05:31,266 --> 00:05:32,786
病患必须高度认真地

176
00:05:32,786 --> 00:05:34,556
使用抗菌滴眼液

177
00:05:34,556 --> 00:05:35,906
以防止感染

178
00:05:35,976 --> 00:05:37,796
因为如果感染未能尽早处理

179
00:05:37,796 --> 00:05:38,936
最后可能会导致失明

180
00:05:39,466 --> 00:05:42,016
那么在我们的这个情境中

181
00:05:42,366 --> 00:05:43,606
医护团队可以监视

182
00:05:43,606 --> 00:05:44,936
病人的情况

183
00:05:44,936 --> 00:05:45,806
这些情况都会被记录下来

184
00:05:46,476 --> 00:05:47,706
如果在他们的医护下

185
00:05:47,706 --> 00:05:49,186
病人情况并没有好转

186
00:05:49,186 --> 00:05:50,406
如果需要

187
00:05:50,406 --> 00:05:51,246
他们可以调整医护计划

188
00:05:51,766 --> 00:05:54,866
病患也可以通过 Insight 标签

189
00:05:54,866 --> 00:05:56,516
来查看自己坚持使用滴眼液的

190
00:05:56,516 --> 00:05:59,246
情况和结果

191
00:05:59,246 --> 00:06:01,026
而医护团队也可以看到

192
00:05:59,246 --> 00:06:01,026
而医护团队也可以看到

193
00:06:01,026 --> 00:06:01,526
同样的记录

194
00:06:02,846 --> 00:06:04,276
医护团队可以监视

195
00:06:04,276 --> 00:06:05,046
病患的情况

196
00:06:05,286 --> 00:06:06,586
如果病患没有好转

197
00:06:06,736 --> 00:06:08,006
医护团队可以

198
00:06:08,006 --> 00:06:09,256
根据需要来调整他们的医护计划

199
00:06:09,526 --> 00:06:10,916
甚至可以直接提供援助

200
00:06:10,916 --> 00:06:11,416
如果他们想要这样做的话

201
00:06:11,886 --> 00:06:15,266
所以这个使用案例确实

202
00:06:15,266 --> 00:06:16,786
展现出了数据同步的重要性

203
00:06:16,786 --> 00:06:18,866
以及我们作为一个团队  为什么会觉得

204
00:06:18,866 --> 00:06:20,716
着手整合出一个解决方案

205
00:06:20,716 --> 00:06:22,276
是至关重要的事情

206
00:06:23,436 --> 00:06:24,586
讲完这些  下面我将为大家

207
00:06:24,586 --> 00:06:26,786
介绍我们全新的

208
00:06:26,786 --> 00:06:27,096
Bridge API

209
00:06:30,556 --> 00:06:32,586
Bridge API 是一种抽象的

210
00:06:32,586 --> 00:06:35,046
云API 它遵循

211
00:06:35,046 --> 00:06:36,906
CareKit 方案 可以在

212
00:06:36,906 --> 00:06:38,466
没有任何附加配置的情况下

213
00:06:38,466 --> 00:06:39,176
实现数据同步化

214
00:06:39,696 --> 00:06:42,866
Bridge API 的设计初衷是为了

215
00:06:43,176 --> 00:06:44,646
让 CareKit App 能够与

216
00:06:44,646 --> 00:06:46,006
后端云解决方案进行无缝整合

217
00:06:46,706 --> 00:06:49,406
它建立在我们当前的

218
00:06:49,406 --> 00:06:51,046
CareKit 数据模型和

219
00:06:51,046 --> 00:06:51,586
数据架构基础之上

220
00:06:55,006 --> 00:06:56,736
Bridge API 为云解决方案提供了所有

221
00:06:56,736 --> 00:06:58,746
必要的勾连

222
00:06:58,746 --> 00:07:00,166
从而使得它们能够无缝接入

223
00:06:58,746 --> 00:07:00,166
从而使得它们能够无缝接入

224
00:07:00,166 --> 00:07:01,136
CareKit 框架

225
00:07:01,636 --> 00:07:04,176
这样一来 就不再需要

226
00:07:04,276 --> 00:07:06,156
第三方开发人员来

227
00:07:06,156 --> 00:07:08,246
深入研究代码并

228
00:07:08,246 --> 00:07:09,196
对 CareKit 框架进行扩展

229
00:07:09,196 --> 00:07:09,976
以满足他们的特殊需要了

230
00:07:10,656 --> 00:07:14,686
这个 API 把相关任务抽离出来

231
00:07:14,686 --> 00:07:16,216
转而为云解决方案提供了

232
00:07:16,216 --> 00:07:17,576
可利用的委托函数

233
00:07:21,306 --> 00:07:22,666
连同 Bridge 一起 我们还添加了

234
00:07:22,666 --> 00:07:24,426
一些额外的 UI 模块

235
00:07:24,726 --> 00:07:25,996
让开发人员整合和使用起来

236
00:07:25,996 --> 00:07:29,286
更加的方便

237
00:07:30,496 --> 00:07:32,106
那么就让我们来看看这是

238
00:07:32,106 --> 00:07:32,556
是如何操作的

239
00:07:33,136 --> 00:07:36,436
医护计划中的活动是用

240
00:07:36,626 --> 00:07:38,286
OCKCarePlanActivity 对象创建的

241
00:07:38,286 --> 00:07:40,696
它或是一种评估 介入

242
00:07:41,006 --> 00:07:42,886
抑或是开发人员

243
00:07:42,886 --> 00:07:44,136
创建的自定义类型

244
00:07:46,856 --> 00:07:48,656
这些活动随后就会

245
00:07:48,656 --> 00:07:50,846
通过我们目前的 CareKit 框架函数

246
00:07:50,846 --> 00:07:51,906
添加到 OCKCarePlanStore

247
00:07:51,906 --> 00:07:52,356
当中来

248
00:07:54,756 --> 00:07:56,426
这就是 Bridge API

249
00:07:56,426 --> 00:07:57,256
真正发挥作用的地方

250
00:07:58,066 --> 00:07:59,336
它位于医护计划

251
00:07:59,336 --> 00:08:02,806
存储器和云后端之间

252
00:07:59,336 --> 00:08:02,806
存储器和云后端之间

253
00:08:02,806 --> 00:08:04,326
会根据存储器中的状态变化

254
00:08:04,326 --> 00:08:04,836
作出反应

255
00:08:06,036 --> 00:08:07,496
当检测到变化时

256
00:08:07,696 --> 00:08:09,816
API 就会相应地做出反应

257
00:08:09,816 --> 00:08:11,576
并且允许云解决方案收集

258
00:08:11,576 --> 00:08:13,386
这些变化

259
00:08:13,386 --> 00:08:15,696
继而在云端与存储器之间

260
00:08:15,696 --> 00:08:17,026
对必要的数据差异进行同步

261
00:08:19,586 --> 00:08:21,266
API 与本地医护计划

262
00:08:21,266 --> 00:08:23,876
存储器以及远程云端

263
00:08:23,876 --> 00:08:26,496
存储器形成了接口   从而确保

264
00:08:26,496 --> 00:08:27,906
任何状态变化

265
00:08:27,906 --> 00:08:28,696
都能得到相应的处理

266
00:08:30,056 --> 00:08:32,106
它可以增加医护活动

267
00:08:32,546 --> 00:08:34,206
还可以移除和更新医护活动

268
00:08:35,155 --> 00:08:37,256
Bridge API 挂钩允许

269
00:08:37,256 --> 00:08:38,846
云解决方案收集

270
00:08:38,846 --> 00:08:40,446
这些变化并进行

271
00:08:40,446 --> 00:08:41,785
必要的数据同步

272
00:08:42,376 --> 00:08:45,826
数据出现的变化

273
00:08:45,826 --> 00:08:47,406
会被更新到存储器

274
00:08:47,406 --> 00:08:48,676
并保存到本地医护计划存储器当中

275
00:08:48,676 --> 00:08:51,156
从而确保最新的数据同步

276
00:08:51,156 --> 00:08:52,796
依然是对用户开放的

277
00:08:52,796 --> 00:08:54,736
即使他们的设备在此时此刻

278
00:08:54,736 --> 00:08:55,776
未必能连接到

279
00:08:55,776 --> 00:08:55,966
云端

280
00:08:58,456 --> 00:08:59,806
我们来看看

281
00:08:59,806 --> 00:09:00,466
这一点是如何实现的

282
00:08:59,806 --> 00:09:00,466
这一点是如何实现的

283
00:09:00,956 --> 00:09:03,736
你可以继续添加

284
00:09:03,736 --> 00:09:05,946
并移除 OCKCarePlanActivities

285
00:09:06,186 --> 00:09:07,256
就像以前一样

286
00:09:07,956 --> 00:09:10,176
这就意味着

287
00:09:10,176 --> 00:09:11,896
你不需要对你现有的

288
00:09:11,896 --> 00:09:13,526
CareKit App 活动进行额外的配置

289
00:09:13,526 --> 00:09:15,826
就可以利用

290
00:09:15,826 --> 00:09:17,756
API 的功能

291
00:09:17,756 --> 00:09:19,126
并主动同步数据

292
00:09:20,536 --> 00:09:22,546
但这到底是怎么做到的呢

293
00:09:23,396 --> 00:09:25,296
API 会处理

294
00:09:25,296 --> 00:09:26,966
医护计划存储器中的变化

295
00:09:26,966 --> 00:09:28,576
当活动列表出现变化

296
00:09:28,576 --> 00:09:31,386
或者是当它收到事件更新时

297
00:09:31,386 --> 00:09:32,536
API 都会

298
00:09:32,536 --> 00:09:33,286
告知委托方

299
00:09:33,796 --> 00:09:36,656
你们看见的这些

300
00:09:36,656 --> 00:09:38,026
Bridge API 挂钩和方法 

301
00:09:38,416 --> 00:09:40,136
使得我们的云解决方案可以

302
00:09:40,136 --> 00:09:41,746
挂钩到这个框架

303
00:09:41,746 --> 00:09:43,076
并且对医护计划存储器的状态变化

304
00:09:43,076 --> 00:09:43,466
进行处理

305
00:09:45,036 --> 00:09:46,936
发生在幕后的这一切

306
00:09:46,936 --> 00:09:49,136
使得你们的 CareKit App

307
00:09:49,946 --> 00:09:51,746
可以获取

308
00:09:51,746 --> 00:09:52,536
医护计划存储器中的实时更新

309
00:09:55,366 --> 00:09:57,196
所以这些方法使得

310
00:09:57,196 --> 00:09:59,106
开发人员  比如你们所有人

311
00:09:59,106 --> 00:10:00,836
能够创建你们自己的

312
00:09:59,106 --> 00:10:00,836
能够创建你们自己的

313
00:10:00,836 --> 00:10:02,486
后端云解决方案

314
00:10:02,586 --> 00:10:04,536
这些解决方案可以直接挂钩到我们的 Bridge API

315
00:10:04,846 --> 00:10:06,416
它们还让你能够处理

316
00:10:06,416 --> 00:10:08,276
那些符合你期待的使用实例标准的

317
00:10:08,276 --> 00:10:09,626
医护计划存储器状态变化

318
00:10:11,166 --> 00:10:12,866
不过 如果你对使用

319
00:10:12,866 --> 00:10:14,416
第三方解决方案感兴趣

320
00:10:14,976 --> 00:10:15,936
你可以使用一个

321
00:10:15,936 --> 00:10:17,616
现有的解决方案

322
00:10:17,616 --> 00:10:18,936
这个方案已经利用了

323
00:10:18,936 --> 00:10:21,006
Bridge API 并且还有

324
00:10:21,006 --> 00:10:23,096
现成可用 由 CareKit 执行

325
00:10:23,096 --> 00:10:24,246
的解决方案工具

326
00:10:24,596 --> 00:10:27,406
我们已经与

327
00:10:27,406 --> 00:10:31,386
Medable 和 CloudMine 进行了合作

328
00:10:31,386 --> 00:10:33,366
以便帮助他们设计和创建符合 HIPPA 的

329
00:10:33,366 --> 00:10:34,596
后端云解决方案

330
00:10:34,596 --> 00:10:36,216
该方案使用了他们

331
00:10:36,216 --> 00:10:37,756
现有符合 HIPPA 的后端

332
00:10:37,756 --> 00:10:38,516
云系统

333
00:10:39,086 --> 00:10:41,646
利用这些解决方案当中的一种

334
00:10:41,686 --> 00:10:43,826
会有助于加快

335
00:10:43,826 --> 00:10:45,736
启动 CareKit App

336
00:10:46,246 --> 00:10:47,086
运行 Bridge API

337
00:10:47,086 --> 00:10:49,386
和主动同步数据至云端的

338
00:10:49,386 --> 00:10:55,026
进程

339
00:10:55,026 --> 00:10:56,196
那么我们来看看

340
00:10:56,196 --> 00:10:57,906
其中一个由 Medable 开发的现成解决方案

341
00:10:57,906 --> 00:11:00,496
并演示一下如何

342
00:10:57,906 --> 00:11:00,496
并演示一下如何

343
00:11:00,496 --> 00:11:02,216
利用 Bridge API 挂钩

344
00:11:02,696 --> 00:11:03,916
来将数据与云解决方案

345
00:11:03,916 --> 00:11:04,346
同步

346
00:11:07,336 --> 00:11:09,166
这里你们可以看到

347
00:11:09,166 --> 00:11:09,936
如何启动客户端

348
00:11:09,936 --> 00:11:12,346
这将引用

349
00:11:12,346 --> 00:11:13,786
你项目 plist 中的

350
00:11:13,786 --> 00:11:16,096
一些必要密钥  以便确保

351
00:11:16,096 --> 00:11:17,466
能够建立一种连接

352
00:11:17,656 --> 00:11:19,086
使得数据能够与

353
00:11:19,086 --> 00:11:20,646
预先配置的账户同步

354
00:11:22,616 --> 00:11:24,626
你可以从这里登录

355
00:11:24,626 --> 00:11:25,626
用配置好的用户名和

356
00:11:25,626 --> 00:11:28,206
密码登录 然后

357
00:11:28,206 --> 00:11:29,606
如果有错误 就继续处理错误

358
00:11:29,606 --> 00:11:31,496
如果没有 就替该用户撤回

359
00:11:31,496 --> 00:11:32,826
返回给 Bridge 引用的信息

360
00:11:33,706 --> 00:11:34,626
你在建立连接时

361
00:11:34,626 --> 00:11:35,666
可以用到这个 Bridge 引用

362
00:11:37,326 --> 00:11:38,776
一旦登录成功

363
00:11:38,776 --> 00:11:40,406
云 Bridge 就知道要利用

364
00:11:40,406 --> 00:11:42,186
这个账号来进行

365
00:11:42,186 --> 00:11:43,566
后续的协议

366
00:11:43,566 --> 00:11:44,106
处理

367
00:11:47,536 --> 00:11:48,876
所以 一旦你登录成功了

368
00:11:48,876 --> 00:11:50,566
就可以列出 Medable

369
00:11:50,566 --> 00:11:51,436
存储器连接

370
00:11:52,226 --> 00:11:53,236
这样就能够替那位用户

371
00:11:53,236 --> 00:11:54,546
返还所有可能的

372
00:11:54,546 --> 00:11:54,876
连接

373
00:11:55,376 --> 00:11:57,706
这些连接可能处于

374
00:11:57,706 --> 00:11:59,876
各式各样的状态 已接受  

375
00:12:00,196 --> 00:12:01,316
被拒绝 或者待处理

376
00:12:01,836 --> 00:12:05,046
所以从这里开始你希望

377
00:12:05,046 --> 00:12:06,326
对这些连接都做出相应的处理

378
00:12:06,806 --> 00:12:08,116
要么接受待处理的连接

379
00:12:08,116 --> 00:12:09,906
要么为用户抓取

380
00:12:09,906 --> 00:12:11,346
活跃有效的连接

381
00:12:11,946 --> 00:12:12,986
你可以利用有效连接

382
00:12:12,986 --> 00:12:13,576
开始同步数据

383
00:12:15,296 --> 00:12:16,416
这里有一点很重要

384
00:12:16,416 --> 00:12:18,096
确实需要注意 那就是

385
00:12:18,096 --> 00:12:19,546
除非你有一个有效连接

386
00:12:19,936 --> 00:12:21,116
否则的话

387
00:12:21,116 --> 00:12:21,656
数据就无法成功同步到云端

388
00:12:22,656 --> 00:12:24,106
有效连接可以确保

389
00:12:24,106 --> 00:12:26,306
用户仅能双向访问

390
00:12:26,716 --> 00:12:27,796
他们已经授权的

391
00:12:27,796 --> 00:12:28,356
那些数据

392
00:12:29,846 --> 00:12:31,596
如此而被拒绝的连接则会

393
00:12:31,596 --> 00:12:33,036
阻止数据同步到云端

394
00:12:33,036 --> 00:12:34,776
并阻止它与发起者

395
00:12:34,776 --> 00:12:35,516
的共享 

396
00:12:39,216 --> 00:12:40,756
现在我们已经介绍了

397
00:12:40,756 --> 00:12:41,606
如何创建连接和如何通过 Medable 

398
00:12:41,606 --> 00:12:43,006
解决方案而建立连接的问题

399
00:12:43,006 --> 00:12:45,496
接下来我们来看

400
00:12:45,496 --> 00:12:47,346
CareKit 的另一项新功能

401
00:12:47,346 --> 00:12:49,166
其中也用到了这些连接和

402
00:12:49,166 --> 00:12:49,766
我们的 Bridge API

403
00:12:53,256 --> 00:12:56,046
这个新 API 不仅为同步

404
00:12:56,046 --> 00:12:57,546
CareKit 数据

405
00:12:57,546 --> 00:12:59,376
比如活动和事件  打开了一扇大门

406
00:13:00,076 --> 00:13:01,516
它还可用于同步

407
00:13:01,516 --> 00:13:02,656
其他类型的数据

408
00:13:03,876 --> 00:13:05,126
这方面有一个很好的例子

409
00:13:05,126 --> 00:13:06,326
就是安全信息发送-

410
00:13:06,786 --> 00:13:09,706
安全信息发送可以在

411
00:13:09,706 --> 00:13:11,656
Connect 标签里看见

412
00:13:11,656 --> 00:13:12,966
同时 通过新的 UI 模块展示

413
00:13:13,196 --> 00:13:14,946
也就是我们在 CareKit 最新更新里开发的

414
00:13:15,386 --> 00:13:15,546
UI 模块

415
00:13:16,596 --> 00:13:18,036
如果你参加了上一次的会议

416
00:13:18,036 --> 00:13:19,586
“CareKit 和 ReserachKit 的新特性”

417
00:13:19,586 --> 00:13:21,256
你就会

418
00:13:21,256 --> 00:13:22,746
熟悉这个通过

419
00:13:22,746 --> 00:13:23,896
Connect 标签添加的收件箱特性

420
00:13:28,956 --> 00:13:31,146
收件箱让开发者

421
00:13:31,146 --> 00:13:32,716
能够简单地

422
00:13:32,716 --> 00:13:33,816
以类似会话的良好格式

423
00:13:33,846 --> 00:13:34,986
来显示信息的功能

424
00:13:35,516 --> 00:13:38,556
这种信息传送功能

425
00:13:38,556 --> 00:13:40,366
可以被直接连接到

426
00:13:40,366 --> 00:13:42,846
Bridge API 和云后端解决方案

427
00:13:43,446 --> 00:13:45,136
让病患和医护团队

428
00:13:45,396 --> 00:13:47,286
可以直接在他们的

429
00:13:47,286 --> 00:13:48,176
CareKit App 中安全地发送信息

430
00:13:49,316 --> 00:13:50,376
那么我们来看看

431
00:13:50,376 --> 00:13:54,606
怎么用代码实现这一点

432
00:13:54,816 --> 00:13:56,856
用 OCKConnectViewController

433
00:13:57,716 --> 00:13:58,246
委托以及

434
00:13:58,246 --> 00:13:59,676
OCKConnectViewController 数据源

435
00:13:59,676 --> 00:14:01,296
方法来设置你的

436
00:13:59,676 --> 00:14:01,296
方法来设置你的

437
00:14:01,296 --> 00:14:01,916
信息传送 UI

438
00:14:03,556 --> 00:14:05,246
请注意 不是所有

439
00:14:05,246 --> 00:14:06,746
必要的委托函数都在这里

440
00:14:06,746 --> 00:14:08,896
展示 但我们选择性地

441
00:14:08,896 --> 00:14:10,106
突出了其中一些更为

442
00:14:10,106 --> 00:14:11,066
具体的方法

443
00:14:11,816 --> 00:14:15,176
必须通过第一种方法

444
00:14:15,176 --> 00:14:16,996
告知委托

445
00:14:17,196 --> 00:14:19,056
有多少信息条目属于

446
00:14:19,056 --> 00:14:20,206
对应的医护团队

447
00:14:20,206 --> 00:14:20,646
联系人

448
00:14:21,856 --> 00:14:23,586
病人与医护团队

449
00:14:23,586 --> 00:14:25,486
可能会有多个会话 所以

450
00:14:25,486 --> 00:14:26,996
弄清楚哪些信息

451
00:14:26,996 --> 00:14:28,286
与哪个会话对应

452
00:14:28,286 --> 00:14:28,856
在这里十分重要

453
00:14:29,356 --> 00:14:33,326
接下来 你可以执行

454
00:14:33,326 --> 00:14:34,706
connectMessageItemAtIndex

455
00:14:34,736 --> 00:14:36,456
函数 并返回

456
00:14:36,456 --> 00:14:37,666
该索引下的合适信息

457
00:14:39,576 --> 00:14:40,366
一批 OCKConnectMessageItems

458
00:14:40,366 --> 00:14:42,226
可以在你收发信息时

459
00:14:42,226 --> 00:14:44,066
被存储下来

460
00:14:45,266 --> 00:14:46,276
你还可以使用

461
00:14:46,276 --> 00:14:48,216
这个方法的索引属性来

462
00:14:48,216 --> 00:14:49,536
为那一批条目编入索引

463
00:14:49,536 --> 00:14:50,516
并返回适当的信息

464
00:14:51,056 --> 00:14:53,156
这一步是为了

465
00:14:53,156 --> 00:14:54,596
让你的用户界面

466
00:14:54,596 --> 00:14:56,056
以适当的顺序

467
00:14:56,056 --> 00:14:56,736
展示这些信息

468
00:14:59,456 --> 00:15:01,346
最后 你可以执行

469
00:14:59,456 --> 00:15:01,346
最后 你可以执行

470
00:15:01,346 --> 00:15:02,866
didSendConnectMessage 函数

471
00:15:03,356 --> 00:15:04,996
以便安全地发送信息

472
00:15:04,996 --> 00:15:06,486
给你们的医护团队

473
00:15:06,486 --> 00:15:06,996
或者给你的病人

474
00:15:07,476 --> 00:15:09,936
所以这就是我们的

475
00:15:09,936 --> 00:15:11,736
Bridge API 和这些后端云解决方案

476
00:15:11,736 --> 00:15:13,406
真正发挥作用的地方

477
00:15:14,096 --> 00:15:16,456
你可以利用这些 Bridge

478
00:15:16,456 --> 00:15:18,446
方法来创建一个

479
00:15:18,446 --> 00:15:20,586
新会话 甚至可以添加

480
00:15:20,586 --> 00:15:21,656
一条新信息

481
00:15:21,656 --> 00:15:22,546
到现有的会话进程中

482
00:15:23,056 --> 00:15:25,536
那么我们来看看

483
00:15:25,536 --> 00:15:26,906
它在 Medable 解决方案中是什么样的

484
00:15:31,316 --> 00:15:32,866
这里你们可以看见

485
00:15:32,866 --> 00:15:33,846
如何创建会话

486
00:15:34,486 --> 00:15:35,496
这需要一个信息发送对象

487
00:15:35,536 --> 00:15:37,036
它可以从你的

488
00:15:37,036 --> 00:15:38,956
委托属性里面

489
00:15:38,956 --> 00:15:40,896
还有显示出这些信息该发送给谁的

490
00:15:40,896 --> 00:15:41,896
一系列目标里面

491
00:15:41,896 --> 00:15:41,963
找寻出来

492
00:15:43,496 --> 00:15:45,326
现在  在这个目标 ID 属性中

493
00:15:45,326 --> 00:15:46,326
大家可以看见目标的

494
00:15:46,326 --> 00:15:48,166
参数是

495
00:15:48,166 --> 00:15:49,546
连接的唯一标识符

496
00:15:49,546 --> 00:15:50,706
也是该信息接收者的

497
00:15:51,306 --> 00:15:51,426
唯一标识符

498
00:15:52,196 --> 00:15:53,906
该函数的成功执行

499
00:15:54,046 --> 00:15:55,016
不仅会创建

500
00:15:55,016 --> 00:15:56,636
会话 还会

501
00:15:56,636 --> 00:15:57,746
添加附加信息

502
00:15:58,276 --> 00:16:00,546
这里非常值得注意的是

503
00:15:58,276 --> 00:16:00,546
这里非常值得注意的是

504
00:16:00,546 --> 00:16:02,566
我们不推荐

505
00:16:02,616 --> 00:16:04,326
通过这个 createConversation 函数

506
00:16:04,566 --> 00:16:05,786
来创建

507
00:16:05,846 --> 00:16:07,006
具有相同连接的

508
00:16:07,006 --> 00:16:07,386
多个会话

509
00:16:09,126 --> 00:16:10,606
虽然这可以做到

510
00:16:10,606 --> 00:16:12,126
但最好还是只创建

511
00:16:12,126 --> 00:16:13,336
一次会话

512
00:16:13,876 --> 00:16:15,366
随后而来的信息应该

513
00:16:15,366 --> 00:16:16,576
通过使用 sendMessage 函数

514
00:16:16,576 --> 00:16:17,506
来进行添加

515
00:16:20,176 --> 00:16:21,866
所以这个 sendMessage 函数

516
00:16:22,106 --> 00:16:23,306
与上面的函数

517
00:16:23,306 --> 00:16:23,546
非常相似

518
00:16:24,146 --> 00:16:25,206
但是 它需要一个信息发送对象

519
00:16:25,206 --> 00:16:27,276
现在还需要一个会话

520
00:16:27,276 --> 00:16:27,536
ID

521
00:16:29,516 --> 00:16:31,096
当你创建上面的会话时

522
00:16:31,096 --> 00:16:32,856
有一点很重要 

523
00:16:32,856 --> 00:16:34,356
就是要保留这个

524
00:16:34,876 --> 00:16:36,366
被返回 ID 的引用

525
00:16:36,366 --> 00:16:37,626
你应该会把它用作

526
00:16:37,626 --> 00:16:38,286
该函数的会话 ID 参数

527
00:16:38,976 --> 00:16:40,136
这样就可以确保

528
00:16:40,136 --> 00:16:41,676
当你发送一条新信息时

529
00:16:41,676 --> 00:16:42,536
它会被添加到

530
00:16:42,536 --> 00:16:43,946
适当的会话线程上

531
00:16:44,536 --> 00:16:47,236
而且 为了提供更好的用户体验

532
00:16:47,416 --> 00:16:49,366
还有一点也很重要 即

533
00:16:49,366 --> 00:16:51,566
执行任何必要的 UI 更新

534
00:16:51,636 --> 00:16:53,176
当你在创建一个新会话 

535
00:16:53,176 --> 00:16:54,376
甚或是将一条新消息

536
00:16:54,376 --> 00:16:55,696
添加至现存的会话线程

537
00:16:56,346 --> 00:16:57,626
从而确保用户能

538
00:16:57,626 --> 00:16:59,166
收到即时的反馈

539
00:16:59,166 --> 00:17:00,486
知晓消息是否

540
00:16:59,166 --> 00:17:00,486
知晓消息是否

541
00:17:00,486 --> 00:17:01,016
已成功发送

542
00:17:01,536 --> 00:17:04,626
所以这个消息传送功能是

543
00:17:04,626 --> 00:17:06,086
另一个很好的例子 向我们展示了

544
00:17:06,086 --> 00:17:07,996
Bridge API 和这些

545
00:17:07,996 --> 00:17:10,205
云解决方案是如何帮助提高

546
00:17:10,336 --> 00:17:11,536
家庭病患医护

547
00:17:11,536 --> 00:17:12,185
体验的

548
00:17:15,306 --> 00:17:16,726
所以 既然我们已经了解到

549
00:17:16,726 --> 00:17:17,836
Bridge API 的架构

550
00:17:18,486 --> 00:17:19,726
以及如何将它和

551
00:17:19,726 --> 00:17:21,175
相应的云后端搭配使用

552
00:17:21,616 --> 00:17:22,826
我想邀请 Akshay 来到讲台

553
00:17:22,826 --> 00:17:24,106
给大家做一个快速的

554
00:17:24,106 --> 00:17:24,356
演示

555
00:17:25,516 --> 00:17:29,316
[掌声]

556
00:17:29,816 --> 00:17:30,196
&gt;&gt; 好的

557
00:17:30,956 --> 00:17:32,336
大家好 欢迎观看

558
00:17:32,336 --> 00:17:33,556
CareKit Cloud Bridge 

559
00:17:33,556 --> 00:17:33,806
同步演示

560
00:17:34,586 --> 00:17:36,276
本次演示中 我们将看到

561
00:17:36,276 --> 00:17:37,986
在病患 App 和

562
00:17:37,986 --> 00:17:39,616
医护团队 App 之间

563
00:17:39,616 --> 00:17:40,866
使用符合 HIPPA 的安全

564
00:17:40,866 --> 00:17:41,416
云桥接是多么简单

565
00:17:42,416 --> 00:17:43,796
在本次演示中 我们将使用

566
00:17:43,796 --> 00:17:45,036
OCKSample App 它可以在

567
00:17:45,036 --> 00:17:46,636
GitHub 开放源项目中获取

568
00:17:47,396 --> 00:17:49,076
OCKSample App 是由

569
00:17:49,076 --> 00:17:50,826
我们团队根据现有的全部

570
00:17:50,826 --> 00:17:51,976
最佳实践开发出来的

571
00:17:52,536 --> 00:17:53,946
因此我们相信 对于本次演示

572
00:17:53,946 --> 00:17:55,086
这个 Sample App 将是一个很好的

573
00:17:55,086 --> 00:17:56,796
起点 因为任何

574
00:17:56,796 --> 00:17:57,976
熟悉 Carekit 的人

575
00:17:57,976 --> 00:17:59,116
很可能也熟悉

576
00:17:59,116 --> 00:17:59,656
Sample App

577
00:18:00,196 --> 00:18:01,896
关于 Sample App 的更多参考信息

578
00:18:01,896 --> 00:18:03,356
请查阅去年

579
00:18:03,356 --> 00:18:04,966
WWDC 的主题会议

580
00:18:05,036 --> 00:18:05,646
“CareKit 入门”

581
00:18:06,786 --> 00:18:07,856
那么 现在我们来看看

582
00:18:07,856 --> 00:18:08,596
Sample App 是什么样子的

583
00:18:09,156 --> 00:18:12,636
在我的电脑里  有两个

584
00:18:12,636 --> 00:18:13,166
模拟器

585
00:18:13,776 --> 00:18:15,456
在我的 iPhone 模拟器上 我们装了

586
00:18:15,456 --> 00:18:16,226
Sample App

587
00:18:17,376 --> 00:18:18,596
目前为止 关于 Sample App

588
00:18:18,596 --> 00:18:20,606
我们已经在本地创建和存储了

589
00:18:20,606 --> 00:18:22,406
一个医护计划存储器对象

590
00:18:23,306 --> 00:18:24,956
和一个 OCKCarePatientObject

591
00:18:25,086 --> 00:18:26,276
它与这个医护计划

592
00:18:26,276 --> 00:18:26,876
存储器相关联

593
00:18:28,056 --> 00:18:29,316
这里有三个标签

594
00:18:29,316 --> 00:18:31,186
“医护内容”标签 显示所有

595
00:18:31,186 --> 00:18:32,496
属于该医护计划存储器中的活动

596
00:18:32,716 --> 00:18:35,116
“见解”标签

597
00:18:35,426 --> 00:18:36,906
显示所有相关见解的条目

598
00:18:36,906 --> 00:18:39,406
以及“联系”项目

599
00:18:39,406 --> 00:18:41,096
代表与患者的 OCKPatient 相关的

600
00:18:41,096 --> 00:18:42,826
OCKContact 联系人

601
00:18:44,086 --> 00:18:45,736
我们还为本次演示专门

602
00:18:45,736 --> 00:18:47,176
创建了一个医护团队

603
00:18:47,176 --> 00:18:47,346
App

604
00:18:48,086 --> 00:18:49,686
在我的 iPad 模拟器上 我们有

605
00:18:49,686 --> 00:18:51,516
医护团队 App  它显示了

606
00:18:51,516 --> 00:18:53,196
医护团队成员以及

607
00:18:53,196 --> 00:18:54,486
属于该医护团队照顾的

608
00:18:54,486 --> 00:18:55,096
病患列表

609
00:18:56,096 --> 00:18:57,516
点击一位患者

610
00:18:57,516 --> 00:18:58,986
我们就可以看到他的主页

611
00:18:58,986 --> 00:18:59,946
并从中看到他的活动

612
00:19:00,426 --> 00:19:01,386
本次演示中 我们将

613
00:19:01,386 --> 00:19:02,586
展示该病患的其中一项活动

614
00:19:02,586 --> 00:19:04,296
并以此显示数据同步

615
00:19:04,296 --> 00:19:04,676
的过程

616
00:19:06,026 --> 00:19:07,286
目前 这两个 App 都有

617
00:19:07,286 --> 00:19:09,056
本地医护计划存储器 因此

618
00:19:09,056 --> 00:19:10,376
我们无法在

619
00:19:10,376 --> 00:19:11,216
两个 App 之间同步数据

620
00:19:11,736 --> 00:19:12,896
接下来 我们使用云桥接

621
00:19:12,896 --> 00:19:16,126
把这两个 App 连接到一起

622
00:19:16,296 --> 00:19:17,496
这是我的 Xcode 工作空间

623
00:19:17,666 --> 00:19:18,696
这是我的两个项目：

624
00:19:18,806 --> 00:19:23,356
医护团队项目和

625
00:19:23,596 --> 00:19:25,286
OCKSample 项目

626
00:19:28,756 --> 00:19:30,446
我们继续 首先将我们的

627
00:19:30,446 --> 00:19:31,806
云桥接添加到医护团队

628
00:19:31,806 --> 00:19:32,276
App 里

629
00:19:33,516 --> 00:19:34,786
然后 正如 Kelsey 提过的

630
00:19:34,786 --> 00:19:36,196
我们将使用 Medable 作为我们

631
00:19:36,196 --> 00:19:37,276
此次演示的云桥接解决方案

632
00:19:38,876 --> 00:19:39,826
所以 你们要做的第一件事情是

633
00:19:39,826 --> 00:19:42,616
去 Medable 的 Github

634
00:19:42,676 --> 00:19:44,816
下载或复制他们的 API

635
00:19:44,816 --> 00:19:46,856
用于我们的项目 然后

636
00:19:46,856 --> 00:19:48,216
将它的框架集成到我们的

637
00:19:48,216 --> 00:19:48,636
项目当中

638
00:19:49,606 --> 00:19:50,596
我已经下载了

639
00:19:50,596 --> 00:19:52,666
并且 Medable 的 API 已经把

640
00:19:52,666 --> 00:19:54,076
Medable 的框架添加到了我的项目

641
00:19:54,076 --> 00:19:55,776
就在这里 这里还有我其他的框架

642
00:19:55,776 --> 00:19:58,026
比如 CareKit 和

643
00:19:58,026 --> 00:19:58,876
ResearchKit 等各种

644
00:19:58,876 --> 00:19:59,336
框架

645
00:20:01,676 --> 00:20:03,656
要使用 Medable 的 API  我们需要

646
00:20:03,656 --> 00:20:04,716
添加一些他们的文件

647
00:20:05,526 --> 00:20:07,346
我们可以通过进入他们的

648
00:20:07,346 --> 00:20:09,106
CareKit Bridge API 文件夹 然后

649
00:20:09,336 --> 00:20:11,196
将该文件夹拖放进

650
00:20:11,196 --> 00:20:12,786
我们的项目 放在这里

651
00:20:13,306 --> 00:20:16,636
我们来看看这个目录里有哪些

652
00:20:16,636 --> 00:20:16,896
文件

653
00:20:17,416 --> 00:20:19,286
它有三种类型的文件

654
00:20:19,446 --> 00:20:20,996
第一种 所有我们需要的辅助文件

655
00:20:20,996 --> 00:20:23,426
它们是 Medable 里相对于

656
00:20:23,546 --> 00:20:24,686
CareKit 对象的对象

657
00:20:24,686 --> 00:20:26,046
例如

658
00:20:26,046 --> 00:20:26,976
MDCarePlanStore

659
00:20:27,416 --> 00:20:29,146
MDCarePlanPatient 等等等等

660
00:20:30,446 --> 00:20:32,076
第二种是 Medable

661
00:20:32,306 --> 00:20:32,846
Swift Bridging Header

662
00:20:33,826 --> 00:20:34,836
接下来 我们将该

663
00:20:34,836 --> 00:20:35,926
桥接标头添加至我们的项目

664
00:20:36,786 --> 00:20:38,786
我要在 Building 设置里

665
00:20:38,786 --> 00:20:39,396
打开我的项目 

666
00:20:39,396 --> 00:20:41,376
我查找桥接标头

667
00:20:41,376 --> 00:20:45,036
并将该桥接标头

668
00:20:45,036 --> 00:20:45,346
添加到这里

669
00:20:48,516 --> 00:20:51,856
完美 现在 我们已将所有

670
00:20:51,856 --> 00:20:53,176
需要的文件从

671
00:20:53,176 --> 00:20:54,306
Medable 添加到我们的项目

672
00:20:56,436 --> 00:20:57,666
另外 我们在这份目录中

673
00:20:57,666 --> 00:20:59,236
拥有的另一样东西  

674
00:20:59,236 --> 00:20:59,936
就是医护计划存储器类别

675
00:21:00,846 --> 00:21:02,106
这个类别具备我们

676
00:21:02,106 --> 00:21:03,726
需要的全部方法

677
00:21:03,726 --> 00:21:05,126
有了这些办法  我们就能从 CareKit 对象中

678
00:21:05,126 --> 00:21:06,416
创建对应的 Medable 副本对象

679
00:21:08,556 --> 00:21:10,696
要使用 Medable 的 API  我们也

680
00:21:10,696 --> 00:21:12,386
需要将几个必要的方法

681
00:21:12,386 --> 00:21:13,616
添加至我们的项目中

682
00:21:14,316 --> 00:21:15,416
我们将把它们添加到我们的

683
00:21:15,416 --> 00:21:16,986
LocalCarePlanStore.m 文件里

684
00:21:18,026 --> 00:21:19,696
我们先添加这些方法

685
00:21:19,696 --> 00:21:20,846
然后我再谈谈

686
00:21:20,846 --> 00:21:22,156
这些方法的用处

687
00:21:23,816 --> 00:21:25,696
在我的 CarePlanStore.m 文件中

688
00:21:26,406 --> 00:21:27,586
我将添加这些方法

689
00:21:28,466 --> 00:21:30,516
这些方法将会模仿

690
00:21:30,516 --> 00:21:31,846
任何本地医护计划

691
00:21:31,846 --> 00:21:32,626
存储器方法所做的事情

692
00:21:32,956 --> 00:21:33,626
例如 在我们的

693
00:21:33,626 --> 00:21:34,646
CarePlanStore 里 我们有一个

694
00:21:34,646 --> 00:21:36,746
活动方法 而且我们

695
00:21:36,746 --> 00:21:38,096
刚添加的方法也要做

696
00:21:38,176 --> 00:21:39,306
完全一样的事情 只不过

697
00:21:39,306 --> 00:21:42,426
它们属于 Medable 在这个方面 

698
00:21:42,426 --> 00:21:43,946
所有这些方法都在添加活动

699
00:21:44,116 --> 00:21:45,736
移除活动 更新

700
00:21:45,736 --> 00:21:46,716
事件 等等

701
00:21:47,286 --> 00:21:49,986
这样 我们就已经将

702
00:21:49,986 --> 00:21:51,756
所有需要的东西都以文件

703
00:21:51,756 --> 00:21:53,086
和代码的形式添加至我们的项目

704
00:21:54,456 --> 00:21:56,696
要使用 Medable 的 API 我们需要

705
00:21:56,696 --> 00:21:57,736
用它们创建一个账户

706
00:21:58,576 --> 00:21:59,866
当你创建账户时

707
00:21:59,866 --> 00:22:00,996
你有三种类型的凭证

708
00:21:59,866 --> 00:22:00,996
你有三种类型的凭证

709
00:22:01,246 --> 00:22:04,586
客户端密钥 基地址和

710
00:22:04,586 --> 00:22:05,396
组织名称

711
00:22:06,226 --> 00:22:07,376
我们要将这三种

712
00:22:07,376 --> 00:22:09,356
凭证添加至我们的项目中

713
00:22:09,356 --> 00:22:10,826
以将我们的项目与

714
00:22:10,826 --> 00:22:11,686
Medable 上的账户勾连在一起

715
00:22:11,996 --> 00:22:13,376
我们继续 来看看

716
00:22:13,376 --> 00:22:13,546
要怎么做

717
00:22:14,726 --> 00:22:16,276
进入你们项目的info.plist文件

718
00:22:16,276 --> 00:22:18,336
创建一个字典

719
00:22:19,726 --> 00:22:22,186
我们将它称作 Medable 然后

720
00:22:25,536 --> 00:22:27,176
把它设置成字典

721
00:22:30,186 --> 00:22:31,286
现在 在这个字典里 我们

722
00:22:31,286 --> 00:22:32,436
要添加三个

723
00:22:32,436 --> 00:22:32,766
键值对

724
00:22:32,766 --> 00:22:35,706
第一个是 ClientKey

725
00:22:37,136 --> 00:22:38,836
第二个是 BaseURL

726
00:22:39,366 --> 00:22:42,646
第三个是组织名称

727
00:22:47,856 --> 00:22:50,216
完美  当我们添加了这三个

728
00:22:50,216 --> 00:22:51,746
凭证之后 我们应当能够

729
00:22:51,746 --> 00:22:53,626
将自己的项目连接至我们

730
00:22:53,626 --> 00:22:54,556
Medable 上的账户

731
00:22:54,616 --> 00:22:57,556
我们同样需要对我们的

732
00:22:57,556 --> 00:22:58,946
Sample App 添加

733
00:22:58,946 --> 00:22:59,156
所有这些操作步骤

734
00:22:59,956 --> 00:23:01,226
为了本次演示 我已经

735
00:22:59,956 --> 00:23:01,226
为了本次演示 我已经

736
00:23:01,226 --> 00:23:02,486
将所有步骤添加到

737
00:23:02,486 --> 00:23:03,436
我们的 Sample App

738
00:23:04,796 --> 00:23:07,396
所以现在 两个 App 都已经

739
00:23:07,516 --> 00:23:08,756
设置好 而且

740
00:23:09,276 --> 00:23:10,146
配置了云桥接

741
00:23:10,146 --> 00:23:10,396
云桥接

742
00:23:11,326 --> 00:23:13,726
接下来 我们要使用它们

743
00:23:13,936 --> 00:23:15,036
当我们使用 Medable 的控制面板  

744
00:23:15,036 --> 00:23:16,856
在其中创建账户时

745
00:23:17,146 --> 00:23:18,586
我们应当能够创建一个

746
00:23:18,586 --> 00:23:19,656
医护团队成员的账户

747
00:23:20,686 --> 00:23:22,086
我们可以通过提供

748
00:23:22,086 --> 00:23:24,156
电子邮件 密码和

749
00:23:24,156 --> 00:23:24,676
电话号码来实现

750
00:23:25,496 --> 00:23:26,576
所以 当我们创建医护团队

751
00:23:26,576 --> 00:23:30,076
成员账户时 作为交换 我们会获得

752
00:23:30,076 --> 00:23:31,096
一个验证令牌

753
00:23:31,616 --> 00:23:33,786
医护团队成员

754
00:23:33,786 --> 00:23:35,086
需要用该验证令牌

755
00:23:35,086 --> 00:23:37,476
登录自己的账户

756
00:23:37,696 --> 00:23:39,926
而这些属性可以

757
00:23:39,926 --> 00:23:41,586
通过用户界面提供出来

758
00:23:41,786 --> 00:23:43,326
最好是使用 ResearchKit 的 

759
00:23:43,326 --> 00:23:43,956
登录步骤

760
00:23:43,956 --> 00:23:46,146
所以 我们往下继续 再把那些内容添加

761
00:23:46,146 --> 00:23:46,266
进来

762
00:23:46,816 --> 00:23:49,586
我要进入我的项目 App 的

763
00:23:49,586 --> 00:23:50,126
委托文件

764
00:23:50,636 --> 00:23:52,126
首先我将添加所有

765
00:23:52,126 --> 00:23:54,696
我可能需要的

766
00:23:54,696 --> 00:23:55,206
必要属性

767
00:23:57,376 --> 00:23:59,126
我在这里有一个云桥接

768
00:23:59,126 --> 00:24:01,306
稍后我将

769
00:23:59,126 --> 00:24:01,306
稍后我将

770
00:24:01,306 --> 00:24:02,456
更详细地谈一谈它

771
00:24:03,206 --> 00:24:04,756
谈谈医护团队成员的

772
00:24:04,756 --> 00:24:06,156
电子邮件 密码和

773
00:24:06,156 --> 00:24:06,666
验证令牌

774
00:24:07,236 --> 00:24:09,276
然后我会很快地回到这些

775
00:24:09,276 --> 00:24:09,966
属性

776
00:24:11,406 --> 00:24:13,096
接下来 我们来添加 Medable 的

777
00:24:13,096 --> 00:24:13,876
登录方法

778
00:24:16,276 --> 00:24:18,166
这里是一个云桥接登录

779
00:24:18,166 --> 00:24:19,856
方法 使用到了电子邮件

780
00:24:19,856 --> 00:24:21,386
密码以及验证

781
00:24:21,386 --> 00:24:21,726
令牌

782
00:24:22,286 --> 00:24:24,736
如果这名用户成功

783
00:24:24,736 --> 00:24:27,566
登录 我们就能够

784
00:24:27,566 --> 00:24:28,306
新建一个病患记录

785
00:24:28,466 --> 00:24:29,796
否则 该方法将返回

786
00:24:29,796 --> 00:24:30,116
错误

787
00:24:30,606 --> 00:24:34,196
我们假设该医护团队成员

788
00:24:34,196 --> 00:24:34,806
已经登录

789
00:24:35,316 --> 00:24:36,756
现在 我们应当可以从

790
00:24:36,756 --> 00:24:37,956
这里新建一个病患

791
00:24:38,946 --> 00:24:39,676
这些属性的

792
00:24:39,676 --> 00:24:40,406
来源就在于此

793
00:24:40,406 --> 00:24:43,056
为了新建一个病患 我们需要

794
00:24:43,056 --> 00:24:44,686
该病患的名和姓

795
00:24:44,686 --> 00:24:46,456
以及他们所有的详细信息

796
00:24:46,726 --> 00:24:47,616
以及其电子邮件 ID

797
00:24:48,146 --> 00:24:51,306
接下来 我们用这些属性

798
00:24:51,306 --> 00:24:52,466
新建一个病患

799
00:24:53,146 --> 00:24:54,516
添加名字 姓氏

800
00:24:54,516 --> 00:24:56,006
以及该病患所有的

801
00:24:56,006 --> 00:24:56,496
属性

802
00:24:58,466 --> 00:25:00,096
该方法将进行两项操作

803
00:24:58,466 --> 00:25:00,096
该方法将进行两项操作

804
00:25:01,136 --> 00:25:03,436
在回调时 如果我们

805
00:25:03,436 --> 00:25:05,676
未能新建病患 它

806
00:25:05,676 --> 00:25:06,326
就会返回一个 Fault 值

807
00:25:06,956 --> 00:25:08,226
不过 如果你成功

808
00:25:08,226 --> 00:25:09,986
新建病患 那么

809
00:25:09,986 --> 00:25:11,196
该回调就会返回一个桥接

810
00:25:12,336 --> 00:25:13,446
现在 这里是你能

811
00:25:13,446 --> 00:25:14,946
访问医护计划存储器的地方

812
00:25:15,686 --> 00:25:16,846
所以 通过这一步骤

813
00:25:16,846 --> 00:25:18,566
云桥接正在设置一个

814
00:25:18,566 --> 00:25:19,836
本地变量

815
00:25:20,086 --> 00:25:21,026
对于我们从回调

816
00:25:21,026 --> 00:25:22,816
接收到的云桥接 我们

817
00:25:22,816 --> 00:25:24,256
可以在 App 的

818
00:25:24,706 --> 00:25:25,566
任何地方访问这个云桥接

819
00:25:26,546 --> 00:25:27,706
这就是我们使用

820
00:25:27,706 --> 00:25:29,356
cloudbridge.careplanstore 所能做的事

821
00:25:29,386 --> 00:25:30,606
它让我们得以访问

822
00:25:30,606 --> 00:25:31,726
我们所需要的医护计划存储器

823
00:25:32,146 --> 00:25:33,486
我们准备替换我们的医护计划

824
00:25:33,486 --> 00:25:34,796
存储器 并将通过 App 来把

825
00:25:34,796 --> 00:25:36,486
cloudbridge.careplanstore 作为

826
00:25:36,486 --> 00:25:37,446
默认的医护计划

827
00:25:37,446 --> 00:25:40,046
存储器

828
00:25:40,306 --> 00:25:41,286
这个方法当中的

829
00:25:41,396 --> 00:25:43,336
第二件事情  就是把邀请令牌

830
00:25:43,336 --> 00:25:44,766
发送-到我们提供给病患的

831
00:25:44,926 --> 00:25:45,916
电子邮箱里

832
00:25:48,876 --> 00:25:50,036
当病患收到这份

833
00:25:50,036 --> 00:25:53,016
电子邮件时 他们应该能够

834
00:25:53,016 --> 00:25:54,276
通过病患 App 来注册

835
00:25:54,276 --> 00:25:56,266
自己的账户

836
00:25:56,266 --> 00:25:57,336
他们可能会需要

837
00:25:57,506 --> 00:25:59,076
发送到他们电子邮箱

838
00:25:59,076 --> 00:26:00,406
的邀请令牌

839
00:25:59,076 --> 00:26:00,406
的邀请令牌

840
00:26:00,406 --> 00:26:02,316
来给自己

841
00:26:02,316 --> 00:26:02,816
注册账户

842
00:26:03,706 --> 00:26:04,886
接下来 我们在病患 App 上

843
00:26:04,886 --> 00:26:06,586
注册该病患

844
00:26:07,136 --> 00:26:08,936
在我的病患 App 上 我要进入

845
00:26:08,936 --> 00:26:11,056
这个 App 的委托 添加

846
00:26:11,056 --> 00:26:12,786
我们在病患注册所需的

847
00:26:12,786 --> 00:26:13,596
全部变量

848
00:26:13,986 --> 00:26:15,166
这包括名字

849
00:26:15,216 --> 00:26:17,206
姓氏 电子邮件 手机号码

850
00:26:17,206 --> 00:26:18,636
密码和

851
00:26:18,636 --> 00:26:19,406
邀请令牌

852
00:26:20,176 --> 00:26:21,416
而所有这些属性都能

853
00:26:21,416 --> 00:26:22,476
通过用户界面提供

854
00:26:23,206 --> 00:26:25,476
我们继续  现在我们要添加

855
00:26:25,476 --> 00:26:26,946
病患注册时使用的方法

856
00:26:30,476 --> 00:26:32,056
注册账户方法

857
00:26:32,056 --> 00:26:33,096
需要名字 姓氏

858
00:26:33,096 --> 00:26:34,856
电子邮件

859
00:26:34,856 --> 00:26:36,716
手机号码 密码和

860
00:26:36,716 --> 00:26:37,576
邀请令牌

861
00:26:37,976 --> 00:26:39,536
而且 在回调时

862
00:26:39,636 --> 00:26:40,616
也会返回云桥接

863
00:26:41,336 --> 00:26:42,686
此外 这也是

864
00:26:42,686 --> 00:26:44,036
医护团队成员访问的

865
00:26:44,036 --> 00:26:44,786
同一个云桥接

866
00:26:45,116 --> 00:26:45,946
因此 如果你使用

867
00:26:45,946 --> 00:26:48,466
cloudbridge.careplanstore

868
00:26:48,466 --> 00:26:49,626
医护团队成员和

869
00:26:49,626 --> 00:26:51,026
病患都将能够访问

870
00:26:51,026 --> 00:26:52,046
同样的医护计划存储器

871
00:26:53,146 --> 00:26:54,276
请确保你将该云桥接

872
00:26:54,276 --> 00:26:55,336
保存在你文件中的

873
00:26:55,336 --> 00:26:56,846
某个变量里面 并将

874
00:26:56,846 --> 00:26:58,246
cloudbridge.careplanstore 设置为

875
00:26:58,246 --> 00:26:59,696
默认医护计划存储器

876
00:26:59,696 --> 00:27:02,026
通过 App  就可以实现这一点

877
00:26:59,696 --> 00:27:02,026
通过 App  就可以实现这一点

878
00:27:02,296 --> 00:27:03,736
当我们进行这样的操作时 我们

879
00:27:03,736 --> 00:27:06,256
已经成功使得医护团队 App

880
00:27:06,256 --> 00:27:07,986
和病患 App 能够访问一个

881
00:27:08,086 --> 00:27:08,976
共同的医护计划存储器

882
00:27:10,006 --> 00:27:12,346
现在  在 App 里完成的  

883
00:27:12,346 --> 00:27:13,776
任何一项活动

884
00:27:13,776 --> 00:27:14,696
或者是更新

885
00:27:14,696 --> 00:27:15,786
无论是在两个 App 中的哪一个上面完成的

886
00:27:15,786 --> 00:27:15,976
都应该对另一方进行思考分析

887
00:27:17,136 --> 00:27:18,186
接下来 我们再来检验

888
00:27:18,186 --> 00:27:18,376
一下

889
00:27:19,756 --> 00:27:21,796
为了本次演示 我们已经

890
00:27:21,796 --> 00:27:23,826
创建出这个 App 的不同版本

891
00:27:23,826 --> 00:27:25,906
它的所有信息都相同

892
00:27:25,906 --> 00:27:27,146
不过我们已经添加了

893
00:27:27,146 --> 00:27:28,356
登录凭证和

894
00:27:28,356 --> 00:27:30,026
组织名称到这些

895
00:27:30,026 --> 00:27:30,276
App 里面

896
00:27:31,286 --> 00:27:32,596
我的 iPhone 模拟器上有

897
00:27:32,596 --> 00:27:33,346
Sample App

898
00:27:33,896 --> 00:27:35,546
我的 iPhone 模拟器上

899
00:27:35,546 --> 00:27:36,886
还有医护团队 App

900
00:27:37,556 --> 00:27:39,556
Sample App 是同样的 App

901
00:27:39,556 --> 00:27:40,876
它需要所有的

902
00:27:40,876 --> 00:27:41,606
登录凭证

903
00:27:41,606 --> 00:27:43,266
Care Team App 也是同样

904
00:27:43,266 --> 00:27:44,506
它也要求所有的

905
00:27:44,506 --> 00:27:45,256
登录凭证

906
00:27:45,986 --> 00:27:47,826
接下来 我们来完成

907
00:27:47,826 --> 00:27:48,916
今天的疼痛活动

908
00:27:49,516 --> 00:27:52,936
在疼痛活动中 我感觉

909
00:27:52,936 --> 00:27:53,956
疼痛程度大约为七的时候

910
00:27:53,956 --> 00:27:55,736
然后我就点击完成

911
00:27:55,736 --> 00:27:58,566
而无论何时

912
00:27:58,566 --> 00:28:00,116
这个活动都会将数据同步至

913
00:27:58,566 --> 00:28:00,116
这个活动都会将数据同步至

914
00:28:00,116 --> 00:28:01,976
医护团队的

915
00:28:02,156 --> 00:28:02,976
医护计划活动

916
00:28:03,516 --> 00:28:07,946
[掌声]

917
00:28:08,446 --> 00:28:09,776
现在在白天里  无论何时

918
00:28:09,776 --> 00:28:11,806
只要病患感觉他们的

919
00:28:11,806 --> 00:28:13,316
活动有所改变 无论在什么时候他们都能

920
00:28:13,316 --> 00:28:14,476
更新活动

921
00:28:14,476 --> 00:28:16,196
并会反映到

922
00:28:16,196 --> 00:28:17,016
医护团队这边

923
00:28:17,356 --> 00:28:19,206
而且所需时间是

924
00:28:19,856 --> 00:28:21,266
可变的 你可以

925
00:28:21,266 --> 00:28:21,786
通过 API 设置

926
00:28:22,126 --> 00:28:23,536
如果基于你的

927
00:28:23,536 --> 00:28:24,716
用例 如果你想调整

928
00:28:24,716 --> 00:28:27,166
更新的频率 你

929
00:28:27,166 --> 00:28:29,316
可以更改间隔时间 要么

930
00:28:29,316 --> 00:28:31,286
增加 要么减少

931
00:28:32,896 --> 00:28:34,566
有了这个数据的同步 大家在本次

932
00:28:34,566 --> 00:28:37,546
演示中已经看到 我们使用了

933
00:28:37,546 --> 00:28:38,866
两个具有本地医护计划存储器的

934
00:28:38,866 --> 00:28:41,086
应用  并创建了一个共同的

935
00:28:41,086 --> 00:28:43,086
云桥接  并且使得两个 App

936
00:28:43,086 --> 00:28:44,456
都能访问这个共同的医护

937
00:28:44,456 --> 00:28:47,256
计划存储器 

938
00:28:47,256 --> 00:28:47,636
并且共享数据

939
00:28:48,196 --> 00:28:50,256
我们认为像这样的

940
00:28:50,256 --> 00:28:53,006
功能是大家迫切

941
00:28:53,006 --> 00:28:53,436
需要的

942
00:28:54,836 --> 00:28:56,526
随着所有这些资源

943
00:28:56,526 --> 00:28:59,126
的公开 我们全体人员真是迫不及待地

944
00:28:59,126 --> 00:29:00,726
希望每天都能帮助数以千计的

945
00:28:59,126 --> 00:29:00,726
希望每天都能帮助数以千计的

946
00:29:00,726 --> 00:29:02,696
人们

947
00:29:02,936 --> 00:29:04,246
说到这里 我想请

948
00:29:04,246 --> 00:29:05,346
Kelsey 回到台上

949
00:29:05,346 --> 00:29:06,286
继续本次会议

950
00:29:06,546 --> 00:29:06,836
谢谢大家

951
00:29:08,516 --> 00:29:12,356
[掌声]

952
00:29:12,856 --> 00:29:14,026
&gt;&gt; 感谢 Akshay

953
00:29:14,026 --> 00:29:15,156
演示得非常精彩

954
00:29:16,286 --> 00:29:17,876
大家刚刚了解到了

955
00:29:18,036 --> 00:29:19,626
创建 CareKit App 的过程

956
00:29:19,986 --> 00:29:21,086
还有调用 Bridge API 的方法都

957
00:29:21,086 --> 00:29:22,886
相当简单直接

958
00:29:24,126 --> 00:29:25,976
大家亲眼见到了 App 是如何

959
00:29:26,056 --> 00:29:27,956
与云端往来同步数据

960
00:29:28,696 --> 00:29:30,046
以及怎样在这些

961
00:29:30,046 --> 00:29:31,716
云解决方案里

962
00:29:32,056 --> 00:29:33,246
在你的 Xcode 应用中

963
00:29:33,246 --> 00:29:33,906
直接使用那些桥接

964
00:29:34,406 --> 00:29:37,726
所以在整场会议里

965
00:29:37,896 --> 00:29:39,326
我们介绍了

966
00:29:39,326 --> 00:29:41,046
CareKit 框架里新增的

967
00:29:41,046 --> 00:29:41,506
Bridge API

968
00:29:42,716 --> 00:29:43,966
我们讨论了

969
00:29:43,966 --> 00:29:44,566
它的运行架构

970
00:29:45,716 --> 00:29:47,306
此外 通过观看现场演示

971
00:29:47,306 --> 00:29:48,916
大家还了解了如何

972
00:29:48,916 --> 00:29:49,526
在代码中使用它

973
00:29:50,846 --> 00:29:51,976
那么  大家能用这个新特性

974
00:29:51,976 --> 00:29:52,376
做些什么呢

975
00:29:54,876 --> 00:29:56,576
Bridge API 不仅

976
00:29:56,576 --> 00:29:57,736
与每个现有的

977
00:29:57,736 --> 00:29:59,806
CareKit 模块进行集成

978
00:29:59,806 --> 00:30:01,976
它还具有模块化属性  易于扩展

979
00:29:59,806 --> 00:30:01,976
它还具有模块化属性  易于扩展

980
00:30:01,976 --> 00:30:03,456
来服务于开发者社区提供的

981
00:30:03,456 --> 00:30:05,086
新想法和贡献

982
00:30:05,086 --> 00:30:05,976
就像在座的各位

983
00:30:06,566 --> 00:30:08,606
现在 既然我们都对

984
00:30:08,606 --> 00:30:10,076
Bridge API 有了更多的了解

985
00:30:10,076 --> 00:30:12,676
我们很有必要

986
00:30:12,676 --> 00:30:14,286
指明和确认

987
00:30:14,286 --> 00:30:16,946
该工具能够有多么强大

988
00:30:17,196 --> 00:30:18,796
它向开发者 医护团队和

989
00:30:18,836 --> 00:30:21,076
医疗机构

990
00:30:21,076 --> 00:30:22,936
敞开大门

991
00:30:22,936 --> 00:30:24,376
为他们提供技术 让他们

992
00:30:24,376 --> 00:30:25,836
以一种更私人和更投入的方式

993
00:30:25,836 --> 00:30:27,376
照顾病人

994
00:30:28,756 --> 00:30:29,646
那我想表达的是什么呢

995
00:30:31,146 --> 00:30:32,776
我想说 能够看到 CareKit

996
00:30:32,776 --> 00:30:34,286
和它现有的每个模块

997
00:30:34,546 --> 00:30:35,676
帮助人们提升

998
00:30:35,676 --> 00:30:37,026
病患家庭医护体验 实在是了不起

999
00:30:37,476 --> 00:30:39,246
但是 如果我们能够

1000
00:30:39,246 --> 00:30:40,586
让医护团队参与进来  那就更好了

1001
00:30:42,136 --> 00:30:43,876
为了改进病患医护的

1002
00:30:43,876 --> 00:30:45,736
过程 我们关注这个 API

1003
00:30:46,356 --> 00:30:48,136
并用它来帮助医护团队更好地

1004
00:30:48,136 --> 00:30:49,486
理解病人的

1005
00:30:49,486 --> 00:30:51,616
需求 从而让他们的医护水平

1006
00:30:51,616 --> 00:30:52,216
进一步提高

1007
00:30:52,746 --> 00:30:55,066
这能够给病患者

1008
00:30:55,066 --> 00:30:56,006
带来一种安心感 

1009
00:30:56,006 --> 00:30:58,116
并且能够鼓励他们

1010
00:30:58,256 --> 00:30:59,656
更加投入地

1011
00:30:59,656 --> 00:31:00,476
进行个人医护

1012
00:30:59,656 --> 00:31:00,476
进行个人医护

1013
00:31:01,006 --> 00:31:03,746
这些都是很强大的工具

1014
00:31:03,746 --> 00:31:04,666
现在它们就存在于你的

1015
00:31:04,666 --> 00:31:05,336
指尖之下

1016
00:31:05,816 --> 00:31:07,626
接下来会发生什么  这取决于

1017
00:31:07,626 --> 00:31:07,866
在座的各位

1018
00:31:09,786 --> 00:31:10,836
无论是扩展你们

1019
00:31:10,836 --> 00:31:12,746
现有的应用 还是

1020
00:31:12,746 --> 00:31:14,726
从零开始

1021
00:31:14,726 --> 00:31:16,416
我们相信 CareKit 和

1022
00:31:16,416 --> 00:31:18,516
Bridge API  再加上你们这样的

1023
00:31:18,516 --> 00:31:20,606
全体开发者 是有能力

1024
00:31:20,606 --> 00:31:22,126
提升病患-

1025
00:31:22,126 --> 00:31:24,306
家庭医护体验的  并且缩小

1026
00:31:24,306 --> 00:31:25,736
现存的

1027
00:31:26,496 --> 00:31:26,616
病患医护差距

1028
00:31:27,806 --> 00:31:29,056
因此 有了这个新的功能特性

1029
00:31:29,056 --> 00:31:30,816
我们着实期待

1030
00:31:30,816 --> 00:31:32,816
你们所有人都能利用

1031
00:31:32,816 --> 00:31:34,476
现有的第三方后端

1032
00:31:34,476 --> 00:31:37,556
云解决方案  或是创建你们

1033
00:31:37,556 --> 00:31:37,816
自己的云解决方案

1034
00:31:38,976 --> 00:31:40,856
在创建过程中 要考虑一下

1035
00:31:40,856 --> 00:31:42,026
数据将与谁同步

1036
00:31:42,756 --> 00:31:44,236
而与之相应的医护团队 App

1037
00:31:44,236 --> 00:31:45,506
可能是什么样的

1038
00:31:47,336 --> 00:31:49,756
从另一方面来看  Bridge API

1039
00:31:49,756 --> 00:31:51,336
在创建医护团队 App 时

1040
00:31:51,336 --> 00:31:51,926
也有同样强大的功能

1041
00:31:52,246 --> 00:31:53,836
所以 我们期望所有人来

1042
00:31:53,836 --> 00:31:55,446
帮助扩建这些医护团队解决方案

1043
00:31:55,686 --> 00:31:58,806
通过医护团队 App 和

1044
00:32:00,576 --> 00:32:00,876
控制面板的形式

1045
00:32:01,176 --> 00:32:03,186
因为 CareKit 是开放资源的 所以

1046
00:32:03,186 --> 00:32:04,806
当你创建这些解决方案

1047
00:32:04,956 --> 00:32:06,106
完善你已有的应用程序时

1048
00:32:06,106 --> 00:32:08,276
请将这方面的工作情况

1049
00:32:08,276 --> 00:32:10,526
转告给我们 这样 我们作为一个团队

1050
00:32:10,526 --> 00:32:11,986
便可以继续演化和发展

1051
00:32:11,986 --> 00:32:12,776
CareKit 框架

1052
00:32:13,766 --> 00:32:15,126
更多关于

1053
00:32:15,126 --> 00:32:17,106
CareKit 的信息以及 Medable 和 

1054
00:32:17,346 --> 00:32:19,106
CloudMine 上的 Bridge API 解决方案

1055
00:32:19,106 --> 00:32:21,056
都能在目前提供的

1056
00:32:21,056 --> 00:32:21,746
链接里找到

1057
00:32:24,316 --> 00:32:25,416
如果大家有兴趣

1058
00:32:25,416 --> 00:32:26,846
想进一步了解 CareKit 或

1059
00:32:26,846 --> 00:32:28,166
与之相关的技术

1060
00:32:28,426 --> 00:32:29,476
请观看以下会议的

1061
00:32:29,476 --> 00:32:30,246
任何一场

1062
00:32:31,646 --> 00:32:32,826
感谢大家参加本次

1063
00:32:32,826 --> 00:32:34,016
关于 CareKit Bridge API 的

1064
00:32:34,016 --> 00:32:34,566
会议

1065
00:32:34,656 --> 00:32:36,286
我们很期待

1066
00:32:36,286 --> 00:32:38,186
看到大家如何应用

1067
00:32:38,186 --> 00:32:38,906
这个新技术
