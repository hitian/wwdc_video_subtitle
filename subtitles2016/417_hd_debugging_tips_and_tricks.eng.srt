1
00:00:07,516 --> 00:00:17,500
[ Music ]

2
00:00:21,516 --> 00:00:28,466
[ Applause ]

3
00:00:28,966 --> 00:00:31,946
&gt;&gt; Good afternoon and welcome

4
00:00:32,665 --> 00:00:34,926
It warms my heart to see

5
00:00:34,926 --> 00:00:36,416
out for this topic.

6
00:00:36,726 --> 00:00:37,966
It's near and dear to my heart.

7
00:00:38,526 --> 00:00:39,446
My name is Kate Stone

8
00:00:39,446 --> 00:00:41,386
and I manage the core

9
00:00:41,386 --> 00:00:43,266
for debugging technology

10
00:00:43,796 --> 00:00:45,236
So again it's really exciting.

11
00:00:45,476 --> 00:00:47,876
I hope we'll be able to bring

12
00:00:47,876 --> 00:00:51,176
from my team to tell you

13
00:00:51,176 --> 00:00:54,596
if you're just starting but

14
00:00:54,596 --> 00:00:56,846
to you even if you've been

15
00:00:56,846 --> 00:00:58,406
for the last ten years.

16
00:00:58,736 --> 00:01:02,126
It really is a deep area and

17
00:00:58,736 --> 00:01:02,126
It really is a deep area and

18
00:01:02,126 --> 00:01:03,256
for you so let's get started.

19
00:01:05,006 --> 00:01:08,406
Specifically we should note

20
00:01:08,406 --> 00:01:09,296
that I'm talking about.

21
00:01:09,536 --> 00:01:11,616
If you've used Xcode for

22
00:01:11,616 --> 00:01:14,966
that behind the scenes there's

23
00:01:14,966 --> 00:01:16,876
the low level debugger,

24
00:01:16,876 --> 00:01:19,476
of the core technology,

25
00:01:19,476 --> 00:01:21,466
in Xcode it's everywhere

26
00:01:21,786 --> 00:01:24,346
But of course one of the more

27
00:01:24,686 --> 00:01:27,126
it is in Xcode in

28
00:01:27,916 --> 00:01:30,846
Xcode hosts that console as

29
00:01:32,006 --> 00:01:33,636
and you'll see of course

30
00:01:33,636 --> 00:01:37,186
but also this LLDB console and

31
00:01:37,186 --> 00:01:38,466
to be talking about here today.

32
00:01:38,976 --> 00:01:40,746
That prompted and

33
00:01:40,746 --> 00:01:42,276
that you can do from

34
00:01:44,966 --> 00:01:48,786
Of course that area contains

35
00:01:48,786 --> 00:01:50,436
and allow to interact

36
00:01:50,756 --> 00:01:52,786
but it also contains

37
00:01:52,926 --> 00:01:54,336
and allows you to

38
00:01:54,616 --> 00:01:56,076
for console based applications.

39
00:01:56,906 --> 00:01:58,726
That may not be the

40
00:01:58,726 --> 00:02:00,396
in case your application

41
00:01:58,726 --> 00:02:00,396
in case your application

42
00:02:00,396 --> 00:02:03,816
of other console features like

43
00:02:03,816 --> 00:02:05,846
other ANSI cursor

44
00:02:05,846 --> 00:02:09,346
So there's a new option

45
00:02:09,346 --> 00:02:10,996
to use a standalone terminal

46
00:02:11,156 --> 00:02:13,856
for your application

47
00:02:14,016 --> 00:02:15,416
in Xcode and it's simple.

48
00:02:16,036 --> 00:02:18,976
Bring up the scheme options

49
00:02:18,976 --> 00:02:21,666
at the very bottom you'll see

50
00:02:21,666 --> 00:02:23,906
to switch from the

51
00:02:24,676 --> 00:02:25,866
to use terminal instead.

52
00:02:25,866 --> 00:02:28,476
And then when you run you'll

53
00:02:28,536 --> 00:02:30,906
for your application's input

54
00:02:31,516 --> 00:02:37,546
[ Applause ]

55
00:02:38,046 --> 00:02:40,536
For the remainder of the talk

56
00:02:40,586 --> 00:02:43,196
So if you're interested in

57
00:02:43,596 --> 00:02:45,416
definitely check out the

58
00:02:45,576 --> 00:02:46,866
Of course they've past by now

59
00:02:47,136 --> 00:02:48,916
but the videos are there

60
00:02:50,786 --> 00:02:53,456
You should also note that

61
00:02:53,746 --> 00:02:57,126
but the Swift REPL

62
00:02:57,566 --> 00:03:00,006
When you bring up the Swift REPL

63
00:02:57,566 --> 00:03:00,006
When you bring up the Swift REPL

64
00:03:00,246 --> 00:03:02,756
you're interacting inside a

65
00:03:02,986 --> 00:03:03,646
so that the power

66
00:03:03,646 --> 00:03:05,726
of the debugger is there

67
00:03:06,076 --> 00:03:07,796
In fact every command

68
00:03:07,796 --> 00:03:10,416
about here you can use directly

69
00:03:10,416 --> 00:03:12,766
by prefixing it with a

70
00:03:13,226 --> 00:03:16,016
So colon followed by command

71
00:03:16,046 --> 00:03:16,926
to LLDB.

72
00:03:17,766 --> 00:03:19,686
So let's say I'm at

73
00:03:20,216 --> 00:03:22,866
At this point I'm interested

74
00:03:22,866 --> 00:03:25,656
on a type and of course I

75
00:03:25,656 --> 00:03:28,766
at the help, but right from the

76
00:03:28,766 --> 00:03:31,416
and simply say colon

77
00:03:31,556 --> 00:03:33,966
And I'll have looked up this

78
00:03:33,966 --> 00:03:35,976
in fact it derives

79
00:03:35,976 --> 00:03:37,546
and adds the following

80
00:03:38,366 --> 00:03:39,826
If you're familiar

81
00:03:39,826 --> 00:03:42,086
it's a great feature

82
00:03:42,086 --> 00:03:43,896
but you may not be

83
00:03:43,946 --> 00:03:46,416
that despite the name type

84
00:03:46,416 --> 00:03:48,016
to lookup a wider

85
00:03:48,046 --> 00:03:50,846
I can actually lookup functions

86
00:03:51,356 --> 00:03:55,166
or even lookup entire modules,

87
00:03:55,166 --> 00:03:57,246
of content as it will

88
00:03:57,246 --> 00:03:58,876
of every type in that module.

89
00:03:59,166 --> 00:04:00,216
We've abbreviated it here.

90
00:03:59,166 --> 00:04:00,216
We've abbreviated it here.

91
00:04:02,136 --> 00:04:04,386
So the REPL is fantastic

92
00:04:04,386 --> 00:04:08,896
of additional commands but

93
00:04:08,896 --> 00:04:11,546
to interact with the code

94
00:04:11,906 --> 00:04:13,426
Let's say I write a

95
00:04:14,296 --> 00:04:16,786
I've written a function,

96
00:04:16,826 --> 00:04:19,375
in the function and find out

97
00:04:19,646 --> 00:04:22,416
so I can issue the breakpoint

98
00:04:22,416 --> 00:04:25,406
with a colon, colon b 2, I

99
00:04:25,406 --> 00:04:28,606
and when I call this function,

100
00:04:29,226 --> 00:04:32,376
And because execution has

101
00:04:32,376 --> 00:04:35,506
to the LLDB prompt and from the

102
00:04:35,576 --> 00:04:39,156
LLDB commands to interact with

103
00:04:39,456 --> 00:04:42,116
And the REPL will also do

104
00:04:42,116 --> 00:04:43,776
into an overflow

105
00:04:43,776 --> 00:04:45,476
that would normally

106
00:04:45,586 --> 00:04:47,226
so that you can take

107
00:04:47,226 --> 00:04:49,146
of the debugger directly

108
00:04:49,546 --> 00:04:51,816
You should also note

109
00:04:51,866 --> 00:04:53,526
between the two prompts

110
00:04:53,836 --> 00:04:57,056
If you're at the REPL prompt

111
00:04:57,056 --> 00:04:59,536
by enter will bring

112
00:04:59,996 --> 00:05:02,566
and the command REPL will

113
00:04:59,996 --> 00:05:02,566
and the command REPL will

114
00:05:02,786 --> 00:05:05,016
so you can use the two

115
00:05:05,546 --> 00:05:07,226
The REPL has slightly

116
00:05:07,316 --> 00:05:09,506
and may even be desirable

117
00:05:09,506 --> 00:05:10,726
where you're debugging

118
00:05:12,636 --> 00:05:13,536
So that's great.

119
00:05:14,086 --> 00:05:17,156
It's a couple of the key ways a

120
00:05:17,216 --> 00:05:20,206
but LLDB is also a

121
00:05:20,606 --> 00:05:23,716
and that's fantastic if I'm a

122
00:05:23,716 --> 00:05:25,856
I have a very slow

123
00:05:25,906 --> 00:05:28,736
to use typical benefits

124
00:05:29,086 --> 00:05:31,196
But it's also useful

125
00:05:31,286 --> 00:05:33,306
You might want to use it

126
00:05:33,306 --> 00:05:34,826
to automate debugging tasks.

127
00:05:35,146 --> 00:05:38,276
I want to setup my debugger the

128
00:05:38,616 --> 00:05:42,516
so I might go ahead and provide

129
00:05:42,546 --> 00:05:44,216
of LLDB commands to

130
00:05:44,536 --> 00:05:49,606
LLDB -- source followed by

131
00:05:49,746 --> 00:05:51,276
and source all of those commands

132
00:05:51,276 --> 00:05:53,336
to setup my debug session

133
00:05:53,336 --> 00:05:56,246
If you don't want to go

134
00:05:56,246 --> 00:05:59,846
up a file, you can invoke LLDB

135
00:05:59,846 --> 00:06:04,566
on the command line; -- one-line

136
00:05:59,846 --> 00:06:04,566
on the command line; -- one-line

137
00:06:04,566 --> 00:06:06,656
and that will be issued

138
00:06:06,656 --> 00:06:09,166
and if I want additional

139
00:06:09,436 --> 00:06:11,076
I can just repeat

140
00:06:11,076 --> 00:06:14,106
in its abbreviated form -o

141
00:06:14,346 --> 00:06:15,406
as many times as I like.

142
00:06:16,116 --> 00:06:17,266
So it can be really trivial

143
00:06:17,266 --> 00:06:20,476
to setup LLDB just the way I

144
00:06:20,986 --> 00:06:24,056
And of course this is especially

145
00:06:24,326 --> 00:06:27,406
where I have an application

146
00:06:27,406 --> 00:06:28,636
out of a hundred times.

147
00:06:28,636 --> 00:06:30,226
It's a race condition, I'd

148
00:06:30,226 --> 00:06:32,906
like to run the same debugging

149
00:06:33,146 --> 00:06:34,706
and we have a special

150
00:06:35,756 --> 00:06:38,836
LLDB -- batch starts

151
00:06:39,086 --> 00:06:41,676
It will execute the instructions

152
00:06:41,676 --> 00:06:43,806
from one line or

153
00:06:44,446 --> 00:06:47,286
and presuming my application

154
00:06:47,286 --> 00:06:48,036
then exit.

155
00:06:49,026 --> 00:06:51,436
If my application

156
00:06:51,436 --> 00:06:53,836
at the LLDB prompt where I

157
00:06:54,616 --> 00:06:56,366
And of course just

158
00:06:56,726 --> 00:06:59,376
with a few other shell commands

159
00:06:59,376 --> 00:07:01,706
of actions ad infinitum

160
00:06:59,376 --> 00:07:01,706
of actions ad infinitum

161
00:07:01,856 --> 00:07:03,756
until my application

162
00:07:03,756 --> 00:07:04,926
to investigate the problem.

163
00:07:07,146 --> 00:07:09,376
LLDB has a wide range

164
00:07:09,656 --> 00:07:10,706
If you haven't looked at LLDB --

165
00:07:10,706 --> 00:07:13,106
help before, I'd encourage

166
00:07:13,156 --> 00:07:15,036
It describes these

167
00:07:16,956 --> 00:07:20,686
I'm going to introduce one

168
00:07:20,686 --> 00:07:24,276
for us as a team that's actually

169
00:07:24,276 --> 00:07:25,536
thing in this entire talk.

170
00:07:25,536 --> 00:07:27,786
So if you've going to forget

171
00:07:27,786 --> 00:07:31,326
with this one because

172
00:07:31,516 --> 00:07:32,986
You shouldn't really

173
00:07:33,046 --> 00:07:34,736
but there are some

174
00:07:34,736 --> 00:07:35,866
that I want to introduce.

175
00:07:36,156 --> 00:07:38,496
Starting with Xcode 8, LLDB runs

176
00:07:38,496 --> 00:07:40,916
in a completely separate

177
00:07:41,226 --> 00:07:42,516
It's totally transparent to you.

178
00:07:42,616 --> 00:07:45,406
You start debugging the way

179
00:07:45,406 --> 00:07:48,346
that allows us to do is support

180
00:07:48,696 --> 00:07:49,416
of the debugger.

181
00:07:50,316 --> 00:07:51,746
It's selected for

182
00:07:52,066 --> 00:07:55,566
so if I go to debug Swift 3

183
00:07:55,566 --> 00:07:56,906
I get all of the

184
00:07:56,906 --> 00:07:58,166
to introduce in this session.

185
00:07:58,416 --> 00:08:01,736
And in fact if I'm using

186
00:07:58,416 --> 00:08:01,736
And in fact if I'm using

187
00:08:02,036 --> 00:08:03,036
the same thing is true.

188
00:08:03,036 --> 00:08:04,916
I get the latest

189
00:08:04,916 --> 00:08:06,196
of the features we'll

190
00:08:07,276 --> 00:08:09,516
On the other hand, if

191
00:08:09,716 --> 00:08:12,326
I'm going to wind up with the

192
00:08:12,326 --> 00:08:16,276
we shipped earlier this

193
00:08:16,786 --> 00:08:18,706
That means some of the newer

194
00:08:18,916 --> 00:08:22,056
but we have the full support

195
00:08:22,056 --> 00:08:23,866
of the Swift compiler.

196
00:08:24,916 --> 00:08:27,876
But most importantly

197
00:08:27,876 --> 00:08:30,136
of our open source

198
00:08:30,136 --> 00:08:32,456
to debug using the

199
00:08:32,456 --> 00:08:35,246
that matches the open source

200
00:08:35,525 --> 00:08:38,566
So if you download a snapshot of

201
00:08:38,566 --> 00:08:40,186
if your start adding

202
00:08:40,596 --> 00:08:42,706
you will have a debugger

203
00:08:42,916 --> 00:08:44,496
and you can actually

204
00:08:44,606 --> 00:08:48,516
with debugging other programs

205
00:08:48,796 --> 00:08:50,636
and everything is

206
00:08:52,156 --> 00:08:55,886
There is one additional benefit

207
00:08:55,886 --> 00:08:58,906
into a situation where it cannot

208
00:08:58,906 --> 00:09:00,036
down the debugging session,

209
00:08:58,906 --> 00:09:00,036
down the debugging session,

210
00:09:00,306 --> 00:09:01,686
the debug session

211
00:09:01,886 --> 00:09:05,086
LLDB can exit gracefully,

212
00:09:09,166 --> 00:09:12,726
To talk about what you can

213
00:09:12,726 --> 00:09:15,406
that it is and how you can

214
00:09:15,406 --> 00:09:18,266
I'm going to invite up one of

215
00:09:19,516 --> 00:09:24,866
[ Applause ]

216
00:09:25,366 --> 00:09:26,046
&gt;&gt; Thank you, Kate.

217
00:09:26,046 --> 00:09:26,586
Hi, everyone.

218
00:09:27,366 --> 00:09:28,576
One of my favorite things

219
00:09:28,576 --> 00:09:32,146
about LLDB is how customizable

220
00:09:32,666 --> 00:09:35,486
It's not only great fun

221
00:09:35,486 --> 00:09:38,836
that enables this, but it's

222
00:09:38,836 --> 00:09:41,356
to be more productive in

223
00:09:41,716 --> 00:09:45,366
and LLDB offers a

224
00:09:45,366 --> 00:09:46,246
for you to customize it.

225
00:09:46,876 --> 00:09:49,776
You can start with command

226
00:09:49,776 --> 00:09:52,976
to custom commands or

227
00:09:53,296 --> 00:09:56,226
and in Xcode 8 we have

228
00:09:56,226 --> 00:09:58,486
for you; stepping actions.

229
00:09:59,106 --> 00:10:02,676
The way to think about

230
00:09:59,106 --> 00:10:02,676
The way to think about

231
00:10:02,676 --> 00:10:04,366
like what the next command does?

232
00:10:04,516 --> 00:10:06,106
Do you like what the

233
00:10:06,356 --> 00:10:09,376
But do you find yourself

234
00:10:09,376 --> 00:10:11,566
in just one or two little

235
00:10:11,996 --> 00:10:14,566
With stepping actions

236
00:10:15,756 --> 00:10:20,016
But the simplest way to

237
00:10:20,016 --> 00:10:23,876
to suit your needs is to create

238
00:10:24,096 --> 00:10:26,026
to take a piece of

239
00:10:26,066 --> 00:10:27,606
for something you frequently do

240
00:10:27,836 --> 00:10:30,536
and attach a shorter

241
00:10:31,086 --> 00:10:36,386
And now in Xcode 8 we also

242
00:10:36,716 --> 00:10:38,956
so that for your own purposes

243
00:10:39,136 --> 00:10:41,566
or for whoever you

244
00:10:41,566 --> 00:10:44,096
with you can remember

245
00:10:44,776 --> 00:10:45,706
Let's see an example.

246
00:10:46,576 --> 00:10:48,846
First of all, to create

247
00:10:48,846 --> 00:10:50,376
with the command alias command.

248
00:10:50,906 --> 00:10:55,456
Then as I said you can pass

249
00:10:55,496 --> 00:10:59,376
with a short syntax, and then

250
00:10:59,376 --> 00:11:00,676
command you want to replace.

251
00:10:59,376 --> 00:11:00,676
command you want to replace.

252
00:11:01,176 --> 00:11:05,646
And now shell is just as normal

253
00:11:05,646 --> 00:11:07,326
of the ones we built into it.

254
00:11:07,626 --> 00:11:10,196
You can for instance say

255
00:11:10,196 --> 00:11:13,596
so you help text including

256
00:11:14,316 --> 00:11:16,356
And for those situations

257
00:11:16,356 --> 00:11:20,396
where debugging becomes a little

258
00:11:20,436 --> 00:11:23,816
who you are as you pursue your

259
00:11:23,816 --> 00:11:26,806
to remind you your identity

260
00:11:26,806 --> 00:11:28,656
that it looks like I'm Enrico.

261
00:11:28,916 --> 00:11:33,146
And that's great but if you want

262
00:11:33,206 --> 00:11:35,486
than simply attach a new

263
00:11:35,926 --> 00:11:37,966
we also vend you a Python API.

264
00:11:38,596 --> 00:11:40,436
It's a fairly extensive

265
00:11:40,436 --> 00:11:43,006
that lets you band the

266
00:11:43,946 --> 00:11:46,346
Getting started is

267
00:11:46,766 --> 00:11:50,266
We've talked about this at great

268
00:11:50,336 --> 00:11:51,686
which you can find online.

269
00:11:52,296 --> 00:11:54,826
We have a website with

270
00:11:54,826 --> 00:11:59,366
to look at and if you

271
00:11:59,646 --> 00:12:01,746
there's a community that's

272
00:11:59,646 --> 00:12:01,746
there's a community that's

273
00:12:01,746 --> 00:12:03,056
around scripting LLDB.

274
00:12:03,266 --> 00:12:05,406
Let me give you a quick example.

275
00:12:06,086 --> 00:12:07,766
Let's say that I want a command

276
00:12:07,896 --> 00:12:11,676
that lets me retrieve the return

277
00:12:11,676 --> 00:12:13,676
that I exited out

278
00:12:14,616 --> 00:12:15,746
Couple caveats here.

279
00:12:16,286 --> 00:12:19,526
This command will work

280
00:12:19,526 --> 00:12:23,196
out of a function and don't

281
00:12:23,196 --> 00:12:23,876
right after.

282
00:12:24,176 --> 00:12:26,386
You can type expressions,

283
00:12:26,826 --> 00:12:28,656
just don't step around

284
00:12:29,016 --> 00:12:30,416
Let's look at an

285
00:12:31,076 --> 00:12:34,776
First of all, you import a

286
00:12:35,266 --> 00:12:37,766
and then as I said

287
00:12:38,066 --> 00:12:40,456
and the return values is

288
00:12:40,716 --> 00:12:41,836
Okay, that's great.

289
00:12:41,836 --> 00:12:44,446
That happens by default, no

290
00:12:44,776 --> 00:12:48,196
But what if I type

291
00:12:48,556 --> 00:12:51,226
and that's quite a

292
00:12:51,366 --> 00:12:53,696
and now I don't remember

293
00:12:54,056 --> 00:12:56,616
Okay, I could go up in the

294
00:12:56,996 --> 00:13:01,046
but luckily enough we actually

295
00:12:56,996 --> 00:13:01,046
but luckily enough we actually

296
00:13:01,046 --> 00:13:05,486
about it, and here that return

297
00:13:06,816 --> 00:13:09,616
This is all it takes

298
00:13:09,926 --> 00:13:12,126
And by the way don't

299
00:13:12,126 --> 00:13:15,146
that slide now, it will just be

300
00:13:16,266 --> 00:13:19,576
On the other hand, you see

301
00:13:19,916 --> 00:13:23,376
and now you can type your shell

302
00:13:23,756 --> 00:13:25,676
and you'll find yourself

303
00:13:25,676 --> 00:13:27,746
because they're awesome every

304
00:13:27,926 --> 00:13:29,746
and you'll type them

305
00:13:29,946 --> 00:13:31,366
until you're a literal

306
00:13:31,366 --> 00:13:32,936
and all you're actually

307
00:13:32,936 --> 00:13:34,286
debugger customizations.

308
00:13:34,956 --> 00:13:36,886
Nope. I say no to that.

309
00:13:37,226 --> 00:13:40,446
I say save yourselves

310
00:13:41,006 --> 00:13:41,976
There's no need to do that.

311
00:13:42,146 --> 00:13:44,166
LLDB has an initialization file.

312
00:13:44,646 --> 00:13:48,526
It's called .llbdinit and

313
00:13:49,476 --> 00:13:50,496
And if you need LLDB

314
00:13:50,496 --> 00:13:53,236
to do something special

315
00:13:53,236 --> 00:13:56,506
when launched under Xcode

316
00:13:57,736 --> 00:14:01,776
there's a .llbdinit -Xcode

317
00:13:57,736 --> 00:14:01,776
there's a .llbdinit -Xcode

318
00:14:02,126 --> 00:14:04,516
when launched in the

319
00:14:05,356 --> 00:14:06,156
One more trick.

320
00:14:06,756 --> 00:14:09,736
If you have Python commands that

321
00:14:10,096 --> 00:14:12,856
don't try to type

322
00:14:13,196 --> 00:14:17,206
Put them in a .py file and

323
00:14:17,576 --> 00:14:21,106
that in LLDB init with

324
00:14:23,276 --> 00:14:26,176
Those of you that have used LLDB

325
00:14:26,176 --> 00:14:28,926
for a while are probably

326
00:14:28,926 --> 00:14:30,616
with the p and po commands.

327
00:14:31,316 --> 00:14:34,396
These are great commands,

328
00:14:34,396 --> 00:14:37,626
at data because they

329
00:14:38,156 --> 00:14:39,626
They have the entire power

330
00:14:39,626 --> 00:14:42,556
of the language you're writing

331
00:14:42,556 --> 00:14:44,056
for you at the debugger console.

332
00:14:44,146 --> 00:14:47,146
On the other hand,

333
00:14:47,176 --> 00:14:48,296
great responsibility.

334
00:14:49,236 --> 00:14:52,576
These commands run coding

335
00:14:52,796 --> 00:14:55,336
They have potential

336
00:14:55,746 --> 00:14:59,006
and also sometimes

337
00:14:59,006 --> 00:15:00,566
to run the code you

338
00:14:59,006 --> 00:15:00,566
to run the code you

339
00:15:00,566 --> 00:15:01,756
where you're currently stopped.

340
00:15:01,986 --> 00:15:07,536
And if p runs code once, po

341
00:15:07,966 --> 00:15:10,606
because not only does it

342
00:15:10,606 --> 00:15:14,506
provide it also uses

343
00:15:14,626 --> 00:15:17,256
to print the customization

344
00:15:17,546 --> 00:15:21,746
in a way that's customizable

345
00:15:22,206 --> 00:15:25,206
if the type author customized

346
00:15:25,506 --> 00:15:27,076
in exactly the way you want it.

347
00:15:27,746 --> 00:15:28,996
If you're not that lucky,

348
00:15:29,336 --> 00:15:31,526
the p command provides

349
00:15:31,526 --> 00:15:33,776
of variables that may be

350
00:15:34,516 --> 00:15:36,706
And also po is also a command

351
00:15:36,706 --> 00:15:39,486
that runs again twice

352
00:15:39,666 --> 00:15:41,606
with all the potential

353
00:15:42,716 --> 00:15:45,716
If that scares you, we have

354
00:15:45,716 --> 00:15:48,086
at variables; frame variable.

355
00:15:48,566 --> 00:15:50,376
This is a very predictable

356
00:15:50,586 --> 00:15:52,366
it will not run any code.

357
00:15:53,016 --> 00:15:55,176
On the other hand,

358
00:15:55,176 --> 00:15:56,416
that code running ability,

359
00:15:56,786 --> 00:15:59,856
the syntax it offers is

360
00:16:00,526 --> 00:16:04,026
And that's quite a few ways

361
00:16:04,516 --> 00:16:08,886
but spoiler alert, in

362
00:16:09,586 --> 00:16:15,876
Two new ones parray and

363
00:16:16,016 --> 00:16:17,656
They sound a lot like p and po

364
00:16:17,956 --> 00:16:20,336
but they do something

365
00:16:21,496 --> 00:16:23,286
What do they do especially

366
00:16:24,056 --> 00:16:29,316
Well, if you have used

367
00:16:29,586 --> 00:16:33,196
or Swift arrays you're

368
00:16:33,196 --> 00:16:35,766
that knows how many

369
00:16:36,366 --> 00:16:38,076
C pointers don't do that.

370
00:16:38,376 --> 00:16:40,856
C pointers don't come with a

371
00:16:41,086 --> 00:16:44,426
They don't know how many

372
00:16:44,606 --> 00:16:49,326
when we print a C pointer like

373
00:16:49,326 --> 00:16:51,596
that we're told is

374
00:16:52,526 --> 00:16:54,576
But now we know that this

375
00:16:54,776 --> 00:16:56,726
so we can start printing

376
00:16:57,196 --> 00:17:00,446
printing the second one and we

377
00:16:57,196 --> 00:17:00,446
printing the second one and we

378
00:17:00,446 --> 00:17:03,236
to the little typing monkey

379
00:17:04,925 --> 00:17:10,296
Well, in Xcode 8 you can say

380
00:17:10,586 --> 00:17:13,846
pointer and it will

381
00:17:13,886 --> 00:17:16,976
as if it was an array of the

382
00:17:17,516 --> 00:17:19,675
[ Applause ]

383
00:17:20,175 --> 00:17:20,506
Thank you.

384
00:17:20,506 --> 00:17:21,056
Thank you.

385
00:17:22,465 --> 00:17:25,175
That's already nice

386
00:17:25,226 --> 00:17:26,796
to guess at the element count?

387
00:17:27,566 --> 00:17:28,616
It's right there.

388
00:17:28,766 --> 00:17:29,966
We have the count right there.

389
00:17:30,296 --> 00:17:35,066
What I really want is being able

390
00:17:36,546 --> 00:17:37,716
I almost can.

391
00:17:37,716 --> 00:17:40,906
All I have to do is

392
00:17:41,506 --> 00:17:45,186
That backtick is a general

393
00:17:45,516 --> 00:17:48,106
which lets you take an

394
00:17:48,336 --> 00:17:50,086
and replace the value

395
00:17:50,086 --> 00:17:52,006
in the command before

396
00:17:52,736 --> 00:17:55,316
And now I've got my

397
00:17:57,516 --> 00:18:01,226
[ Applause ]

398
00:17:57,516 --> 00:18:01,226
[ Applause ]

399
00:18:01,726 --> 00:18:02,206
Thank you.

400
00:18:02,236 --> 00:18:04,556
Pretty much the same

401
00:18:04,556 --> 00:18:08,016
poarray, number of

402
00:18:08,016 --> 00:18:10,876
and I get po style

403
00:18:11,926 --> 00:18:15,356
On that same topic of po,

404
00:18:15,356 --> 00:18:19,066
that could write Objective C

405
00:18:19,066 --> 00:18:22,266
have actually done something

406
00:18:22,266 --> 00:18:24,006
without even thinking about it.

407
00:18:24,346 --> 00:18:27,646
You take po, you say po followed

408
00:18:27,646 --> 00:18:29,046
to know is a pointer value

409
00:18:29,266 --> 00:18:30,956
and you get a pretty

410
00:18:31,816 --> 00:18:34,146
And you try doing the

411
00:18:34,696 --> 00:18:35,906
and all you get back

412
00:18:36,256 --> 00:18:37,796
Why? What's going on?

413
00:18:38,786 --> 00:18:42,176
Well, I'm sure you've heard

414
00:18:42,176 --> 00:18:43,836
but I'll say it one more time.

415
00:18:44,186 --> 00:18:46,826
Swift is a type safer

416
00:18:47,266 --> 00:18:50,236
We can't assume that numbers

417
00:18:50,236 --> 00:18:53,306
because not all Swift objects

418
00:18:53,306 --> 00:18:53,646
to them.

419
00:18:54,056 --> 00:18:57,456
So when we say po a number

420
00:18:58,506 --> 00:19:00,226
Okay, that's great but come

421
00:18:58,506 --> 00:19:00,226
Okay, that's great but come

422
00:19:00,226 --> 00:19:02,146
on I know there's an

423
00:19:02,146 --> 00:19:02,876
to me already.

424
00:19:03,406 --> 00:19:04,806
There's a way to do that.

425
00:19:06,686 --> 00:19:07,956
There it is.

426
00:19:08,156 --> 00:19:10,456
It looks like a lot of words,

427
00:19:10,456 --> 00:19:13,026
of words but it's actually

428
00:19:13,356 --> 00:19:15,296
Expr -O just means po.

429
00:19:15,586 --> 00:19:20,156
If you're at the LLDB

430
00:19:20,156 --> 00:19:24,486
what it will tell you is that

431
00:19:25,166 --> 00:19:28,826
So all we're actually

432
00:19:28,916 --> 00:19:31,876
as if we were in

433
00:19:31,876 --> 00:19:35,076
that we actually get the

434
00:19:35,576 --> 00:19:37,436
And that's great.

435
00:19:38,406 --> 00:19:42,486
On a topic related to actually

436
00:19:42,486 --> 00:19:46,506
and trying to make sense of

437
00:19:47,576 --> 00:19:50,186
If you remember one

438
00:19:50,186 --> 00:19:54,396
about low level debugging is

439
00:19:54,546 --> 00:19:54,976
Don't do it.

440
00:19:55,516 --> 00:19:58,996
[ Laughter ]

441
00:19:59,496 --> 00:20:03,166
Unfortunately, sometimes

442
00:19:59,496 --> 00:20:03,166
Unfortunately, sometimes

443
00:20:03,996 --> 00:20:06,216
Maybe you're debugging

444
00:20:06,336 --> 00:20:08,816
in optimized code in the

445
00:20:08,996 --> 00:20:10,286
That happens to me sometimes.

446
00:20:11,346 --> 00:20:13,846
Or you're debugging

447
00:20:13,846 --> 00:20:15,706
for which you have

448
00:20:16,656 --> 00:20:18,126
If any of that applies to you,

449
00:20:18,936 --> 00:20:21,226
follow me as we sail

450
00:20:21,226 --> 00:20:23,006
of Hercules on this journey.

451
00:20:24,176 --> 00:20:27,956
But please know that on

452
00:20:27,956 --> 00:20:28,966
at your own risk.

453
00:20:30,196 --> 00:20:36,086
It starts just like this; I

454
00:20:36,086 --> 00:20:39,486
up to me in the lab with his

455
00:20:39,486 --> 00:20:43,206
in that state, crashed in

456
00:20:43,876 --> 00:20:45,096
And he tells me a story.

457
00:20:45,486 --> 00:20:48,906
I have my app and it's

458
00:20:49,326 --> 00:20:52,036
but then my framework vendor

459
00:20:52,036 --> 00:20:54,576
of my frame, just

460
00:20:54,916 --> 00:20:56,746
And I did update,

461
00:20:56,746 --> 00:20:58,236
and now my app crashes

462
00:20:58,296 --> 00:20:59,786
What do I do, please help me.

463
00:21:00,486 --> 00:21:02,956
And so we sat down

464
00:21:03,146 --> 00:21:04,896
we know pretty much nothing here

465
00:21:04,896 --> 00:21:07,736
but one thing we can

466
00:21:07,736 --> 00:21:09,676
by reading machine registers.

467
00:21:10,686 --> 00:21:14,116
LLDB offers a facility to

468
00:21:14,116 --> 00:21:16,826
at all the registers, only

469
00:21:17,176 --> 00:21:19,296
and it even lets you

470
00:21:20,026 --> 00:21:20,886
What does it look like?

471
00:21:21,886 --> 00:21:25,536
You say register read and

472
00:21:26,236 --> 00:21:28,056
and that's a lot of registers.

473
00:21:28,056 --> 00:21:30,166
And why do I even care about

474
00:21:30,166 --> 00:21:32,236
and the words on the screen?

475
00:21:32,686 --> 00:21:36,756
Well, you do care because

476
00:21:37,026 --> 00:21:37,946
in registers.

477
00:21:38,896 --> 00:21:41,386
Okay, that's fun, but that

478
00:21:41,456 --> 00:21:43,646
How do I know which ones

479
00:21:44,266 --> 00:21:48,006
That is a question for your

480
00:21:48,006 --> 00:21:51,066
interface ABI, the colon

481
00:21:51,066 --> 00:21:51,696
those rules.

482
00:21:52,556 --> 00:21:54,186
But LLDB also exposes

483
00:21:54,186 --> 00:21:58,816
to you convenient pseudo

484
00:21:58,816 --> 00:22:01,356
and so on which in the case

485
00:21:58,816 --> 00:22:01,356
and so on which in the case

486
00:22:01,356 --> 00:22:03,946
in which your arguments are

487
00:22:04,196 --> 00:22:07,306
or pointer types

488
00:22:07,306 --> 00:22:09,256
between the registers

489
00:22:10,096 --> 00:22:13,706
Similar convenience is available

490
00:22:14,476 --> 00:22:17,406
So for example, if

491
00:22:17,406 --> 00:22:20,196
that takes these three

492
00:22:20,906 --> 00:22:23,576
those arguments will

493
00:22:23,846 --> 00:22:26,326
to $arg1, $arg2, and $arg3.

494
00:22:27,716 --> 00:22:30,206
Okay, so that applies

495
00:22:30,346 --> 00:22:33,996
We're in Objc msgSend, we

496
00:22:34,606 --> 00:22:37,636
The first argument is

497
00:22:37,786 --> 00:22:39,766
the second argument

498
00:22:39,766 --> 00:22:40,716
by appending string.

499
00:22:41,446 --> 00:22:45,036
We happen to know that Objc

500
00:22:45,036 --> 00:22:46,506
object we're trying to message

501
00:22:46,756 --> 00:22:49,176
and the second argument is the

502
00:22:50,206 --> 00:22:53,466
and we can also use the memory

503
00:22:53,466 --> 00:22:55,386
up with the object

504
00:22:55,836 --> 00:22:57,696
It turns out that's

505
00:22:58,826 --> 00:23:04,396
What is happening is that

506
00:22:58,826 --> 00:23:04,396
What is happening is that

507
00:23:04,466 --> 00:23:05,396
on a bad object.

508
00:23:06,156 --> 00:23:09,046
How did we get there?

509
00:23:09,266 --> 00:23:12,526
Well, we're in Objc

510
00:23:13,056 --> 00:23:16,246
something called Objc msgSend,

511
00:23:16,246 --> 00:23:19,986
that called it and so on and so

512
00:23:19,986 --> 00:23:21,776
to the entry point

513
00:23:22,666 --> 00:23:28,106
In LLDB we call the frames from

514
00:23:28,106 --> 00:23:32,806
to frame N the oldest and if

515
00:23:33,176 --> 00:23:36,466
you can use the up command

516
00:23:36,516 --> 00:23:38,666
on the stack and

517
00:23:38,956 --> 00:23:40,556
to go back to a younger frame.

518
00:23:42,056 --> 00:23:45,936
Another thing worth knowing

519
00:23:46,266 --> 00:23:48,866
which lets you look at the

520
00:23:49,346 --> 00:23:50,856
You can do that for

521
00:23:50,856 --> 00:23:54,896
for an arbitrary frame, for an

522
00:23:55,196 --> 00:23:57,346
you can customize the way

523
00:23:57,816 --> 00:24:00,176
and in some cases

524
00:23:57,816 --> 00:24:00,176
and in some cases

525
00:24:00,486 --> 00:24:03,066
where you do have source code

526
00:24:03,066 --> 00:24:04,636
to compare those instructions

527
00:24:04,636 --> 00:24:07,226
to machine instructions

528
00:24:07,226 --> 00:24:10,676
to always show you always

529
00:24:10,676 --> 00:24:11,396
with source code.

530
00:24:12,136 --> 00:24:17,126
So in our case, we crashed there

531
00:24:17,126 --> 00:24:18,896
that called our function

532
00:24:18,896 --> 00:24:19,716
that did finish launching.

533
00:24:20,106 --> 00:24:22,116
So let's go there real quick

534
00:24:22,226 --> 00:24:26,256
that function is doing.

535
00:24:26,766 --> 00:24:29,196
That function is

536
00:24:29,196 --> 00:24:31,526
that our framework vendor

537
00:24:31,526 --> 00:24:33,246
that initializer,

538
00:24:33,696 --> 00:24:36,756
It's moving some stuff around

539
00:24:36,756 --> 00:24:39,486
to Objc msgSend that

540
00:24:40,586 --> 00:24:42,476
So we can step around

541
00:24:42,476 --> 00:24:44,946
and see what these calls

542
00:24:45,296 --> 00:24:48,676
First of all we step over

543
00:24:48,676 --> 00:24:52,126
and then I'm going to

544
00:24:52,466 --> 00:24:56,926
I happen to know that the

545
00:24:56,926 --> 00:25:00,576
return value of that

546
00:24:56,926 --> 00:25:00,576
return value of that

547
00:25:01,636 --> 00:25:03,466
that's just the bad

548
00:25:03,986 --> 00:25:05,126
Interesting.

549
00:25:05,546 --> 00:25:07,596
Let's step around a

550
00:25:08,276 --> 00:25:10,686
No, that isn't changing

551
00:25:11,296 --> 00:25:14,686
All we're doing is taking

552
00:25:14,976 --> 00:25:19,596
and moving it into rdi and

553
00:25:20,186 --> 00:25:21,736
I wonder if that's connected?

554
00:25:22,386 --> 00:25:27,416
If I reg read $arg1 at this

555
00:25:27,416 --> 00:25:32,376
msgSend, rdi the

556
00:25:33,686 --> 00:25:35,246
What have we proven

557
00:25:35,496 --> 00:25:38,536
We've proven to ourselves that

558
00:25:38,846 --> 00:25:40,576
that our framework

559
00:25:40,576 --> 00:25:43,746
to get us calling actually

560
00:25:44,126 --> 00:25:47,066
and upon trying to send a

561
00:25:47,426 --> 00:25:50,406
big surprise, our

562
00:25:51,396 --> 00:25:53,886
And on that note of patting

563
00:25:53,886 --> 00:25:56,896
for conclusively proving

564
00:25:56,896 --> 00:25:59,026
over to Sean Callanan

565
00:25:59,026 --> 00:26:01,046
about the great new features

566
00:25:59,026 --> 00:26:01,046
about the great new features

567
00:26:01,316 --> 00:26:01,846
Thank you.

568
00:26:02,516 --> 00:26:07,546
[ Applause ]

569
00:26:08,046 --> 00:26:08,726
&gt;&gt; Isn't that magic?

570
00:26:09,276 --> 00:26:10,236
It feels like magic.

571
00:26:10,376 --> 00:26:13,616
Your program is just

572
00:26:14,116 --> 00:26:19,026
arrays of numbers and yet you

573
00:26:19,536 --> 00:26:24,436
to represent that data in

574
00:26:25,306 --> 00:26:30,106
Sometimes though it's not

575
00:26:30,106 --> 00:26:32,766
at a number and figuring

576
00:26:33,936 --> 00:26:36,336
Sometimes you need

577
00:26:36,906 --> 00:26:38,726
Now, Enrico has already

578
00:26:38,816 --> 00:26:40,516
where the expression parser fits

579
00:26:40,516 --> 00:26:42,246
in in the general

580
00:26:42,686 --> 00:26:44,226
but there's a lot

581
00:26:45,656 --> 00:26:49,706
The expression parse's job is to

582
00:26:49,796 --> 00:26:54,896
and the SDK and get from

583
00:26:55,946 --> 00:27:02,186
through some contortions to get

584
00:26:55,946 --> 00:27:02,186
through some contortions to get

585
00:27:02,186 --> 00:27:03,996
that you're actually

586
00:27:05,636 --> 00:27:09,066
Now, I said we work

587
00:27:09,066 --> 00:27:10,566
and we work with the SDK.

588
00:27:11,826 --> 00:27:15,696
Working with the SDK hasn't

589
00:27:15,786 --> 00:27:17,586
if you remember from

590
00:27:18,816 --> 00:27:20,566
So for example if

591
00:27:20,566 --> 00:27:23,356
in an Objective C

592
00:27:23,356 --> 00:27:28,146
to get the program's undo

593
00:27:28,856 --> 00:27:31,866
at least once or twice

594
00:27:33,056 --> 00:27:36,776
It wasn't at all relevant to

595
00:27:36,776 --> 00:27:39,086
and it was really puzzling.

596
00:27:39,736 --> 00:27:41,366
But last year we told

597
00:27:41,366 --> 00:27:42,166
to get out of this.

598
00:27:44,416 --> 00:27:51,456
If you just manually

599
00:27:51,456 --> 00:27:52,596
expression works.

600
00:27:53,406 --> 00:27:55,766
All right, but why

601
00:27:55,946 --> 00:27:57,126
It's already there.

602
00:27:58,546 --> 00:27:59,476
I hear you cry.

603
00:28:00,516 --> 00:28:02,596
[ Laughter ]

604
00:28:03,096 --> 00:28:05,196
You're not the only ones.

605
00:28:05,196 --> 00:28:09,336
So this year we thought what

606
00:28:10,326 --> 00:28:11,496
and it was pretty obvious.

607
00:28:12,346 --> 00:28:15,886
We looked at which modules the

608
00:28:16,226 --> 00:28:18,346
and we import them

609
00:28:18,626 --> 00:28:20,866
No more of that manual

610
00:28:21,516 --> 00:28:26,546
[ Applause ]

611
00:28:27,046 --> 00:28:30,546
Cool. So we're getting out

612
00:28:30,946 --> 00:28:34,346
That's great, but this is

613
00:28:34,886 --> 00:28:38,176
Let me tell you about

614
00:28:38,406 --> 00:28:40,286
that you can do with it.

615
00:28:40,756 --> 00:28:44,046
Now, sometimes these

616
00:28:44,046 --> 00:28:44,556
in your way.

617
00:28:44,586 --> 00:28:45,916
You're actually trying

618
00:28:46,016 --> 00:28:48,316
to manually import

619
00:28:49,336 --> 00:28:52,216
There's a feature, a

620
00:28:52,256 --> 00:28:54,976
to disable this automatic

621
00:28:55,096 --> 00:28:58,066
and get back the feature

622
00:28:59,046 --> 00:29:02,396
We think you're going to like

623
00:28:59,046 --> 00:29:02,396
We think you're going to like

624
00:29:02,796 --> 00:29:05,656
Great. Now let's

625
00:29:05,656 --> 00:29:07,866
about using the expression

626
00:29:08,526 --> 00:29:10,026
by reusing code.

627
00:29:10,626 --> 00:29:14,536
Now, the most simple case

628
00:29:14,536 --> 00:29:16,776
of reusing code is

629
00:29:17,836 --> 00:29:22,146
Now remember I said you might

630
00:29:22,676 --> 00:29:25,466
to get to the data that you

631
00:29:25,466 --> 00:29:26,446
where you currently are.

632
00:29:27,786 --> 00:29:30,116
In Swift you can do

633
00:29:30,806 --> 00:29:33,696
as defining a temporary

634
00:29:35,196 --> 00:29:36,096
This just works.

635
00:29:36,226 --> 00:29:37,976
It's as if you typed

636
00:29:39,396 --> 00:29:42,396
Now what might be

637
00:29:42,636 --> 00:29:43,696
if you try to use it again.

638
00:29:44,896 --> 00:29:47,236
Then we say, what's

639
00:29:49,216 --> 00:29:52,446
Well, actually we intended

640
00:29:53,096 --> 00:29:57,056
The reason is you might

641
00:29:57,056 --> 00:30:00,326
in different places, maybe

642
00:29:57,056 --> 00:30:00,326
in different places, maybe

643
00:30:00,326 --> 00:30:02,596
where you're program

644
00:30:02,936 --> 00:30:04,386
Do we want the A you used

645
00:30:04,386 --> 00:30:06,286
as a temporary valuable

646
00:30:07,256 --> 00:30:14,626
Probably not, but there

647
00:30:14,706 --> 00:30:17,936
The affordance we

648
00:30:17,936 --> 00:30:19,736
that your variables don't escape

649
00:30:19,736 --> 00:30:22,366
in that way is we actually

650
00:30:22,366 --> 00:30:25,626
It's as if you actually put a

651
00:30:26,046 --> 00:30:30,376
put the let A in there and the

652
00:30:30,376 --> 00:30:34,356
to break out, all you have to

653
00:30:34,876 --> 00:30:36,346
a name with a dollar sign.

654
00:30:37,176 --> 00:30:39,206
That means that it

655
00:30:39,246 --> 00:30:43,656
with your own program's names

656
00:30:44,236 --> 00:30:45,856
as long as your debug

657
00:30:47,176 --> 00:30:49,716
Awesome. What else can

658
00:30:49,716 --> 00:30:51,746
It turns out quite a lot.

659
00:30:52,386 --> 00:30:55,616
Now in Swift ever

660
00:30:55,616 --> 00:30:58,546
and Swift you've been able to do

661
00:30:59,696 --> 00:31:02,886
Now when you did that

662
00:30:59,696 --> 00:31:02,886
Now when you did that

663
00:31:02,886 --> 00:31:05,756
to use multiline

664
00:31:05,756 --> 00:31:07,956
if you typed the expression

665
00:31:08,276 --> 00:31:10,386
you're immediately going

666
00:31:10,646 --> 00:31:12,866
where you can type

667
00:31:13,726 --> 00:31:19,446
If you define your function then

668
00:31:19,446 --> 00:31:20,526
remembering the dollar sign.

669
00:31:22,106 --> 00:31:24,876
Now, those of you who

670
00:31:24,876 --> 00:31:27,976
and said that's awesome might

671
00:31:29,746 --> 00:31:32,406
and it wasn't so great.

672
00:31:34,156 --> 00:31:36,286
Function definition

673
00:31:36,716 --> 00:31:38,986
Come on these LLDB guys

674
00:31:39,486 --> 00:31:39,886
All right.

675
00:31:40,146 --> 00:31:43,896
Well, turns out we

676
00:31:43,896 --> 00:31:45,566
we think it's awesome,

677
00:31:46,786 --> 00:31:49,936
But we can't just make

678
00:31:50,436 --> 00:31:54,246
The reason is remember

679
00:31:54,706 --> 00:31:57,736
We want to act like we're

680
00:31:58,726 --> 00:32:01,746
If you're in Swift you can

681
00:31:58,726 --> 00:32:01,746
If you're in Swift you can

682
00:32:01,746 --> 00:32:03,886
it's no big deal, the

683
00:32:03,886 --> 00:32:06,256
It won't love the dollar

684
00:32:06,626 --> 00:32:08,156
but the rest it's fine with.

685
00:32:09,056 --> 00:32:09,926
This is totally legal.

686
00:32:11,746 --> 00:32:16,356
In C, C++ and Objective C though

687
00:32:16,356 --> 00:32:18,986
like that, that's no good

688
00:32:18,986 --> 00:32:22,136
to yell at you.

689
00:32:22,356 --> 00:32:23,936
Well, the way you get

690
00:32:23,936 --> 00:32:28,716
around that is using the

691
00:32:29,506 --> 00:32:31,496
That's an extension of

692
00:32:31,926 --> 00:32:33,986
that makes it break completely

693
00:32:33,986 --> 00:32:36,166
out of the current

694
00:32:36,206 --> 00:32:39,566
and just define global

695
00:32:39,566 --> 00:32:41,306
or variables or what you will.

696
00:32:42,206 --> 00:32:43,606
Now you can define your function

697
00:32:43,606 --> 00:32:45,306
and use it just the

698
00:32:46,416 --> 00:32:47,116
All right.

699
00:32:48,586 --> 00:32:51,746
Now the functions aren't

700
00:32:51,746 --> 00:32:52,326
can define.

701
00:32:52,326 --> 00:32:53,696
I've already talked

702
00:32:54,066 --> 00:32:56,806
You can define closures too,

703
00:32:56,806 --> 00:32:58,126
of variables and code.

704
00:32:59,236 --> 00:33:01,506
In Swift you can define

705
00:32:59,236 --> 00:33:01,506
In Swift you can define

706
00:33:03,006 --> 00:33:06,236
New in Xcode this year

707
00:33:06,236 --> 00:33:07,026
in Objective C.

708
00:33:07,636 --> 00:33:12,236
Blocks can be defined and

709
00:33:12,236 --> 00:33:14,116
who are diehard C++ fans,

710
00:33:14,546 --> 00:33:16,716
you can do the exact

711
00:33:17,286 --> 00:33:22,006
Now, what can you do

712
00:33:22,006 --> 00:33:23,156
What's special about them.

713
00:33:23,456 --> 00:33:25,926
Well, you can pass them off

714
00:33:26,846 --> 00:33:27,906
Sometimes you might need

715
00:33:27,906 --> 00:33:30,596
to manually run something

716
00:33:31,906 --> 00:33:32,636
That works.

717
00:33:33,086 --> 00:33:35,436
You can send stuff for

718
00:33:35,806 --> 00:33:37,156
and the block will simply run.

719
00:33:38,656 --> 00:33:43,096
Now, sometimes it

720
00:33:43,526 --> 00:33:46,636
because these complex

721
00:33:46,636 --> 00:33:49,346
in much more likelihood

722
00:33:50,646 --> 00:33:54,456
Now, what's the difference

723
00:33:54,536 --> 00:33:57,636
to the previous slide between

724
00:33:57,636 --> 00:33:58,666
from the previous slide?

725
00:33:59,556 --> 00:34:00,336
You probably missed it.

726
00:33:59,556 --> 00:34:00,336
You probably missed it.

727
00:34:00,776 --> 00:34:02,156
The compiler sure didn't.

728
00:34:03,046 --> 00:34:06,256
It will yell at you about

729
00:34:06,866 --> 00:34:09,206
but there's a better way.

730
00:34:09,656 --> 00:34:11,556
If you were to type this

731
00:34:12,406 --> 00:34:14,576
we would have told you,

732
00:34:14,576 --> 00:34:15,386
semicolon here.

733
00:34:15,386 --> 00:34:18,306
Did you mean to put it in?

734
00:34:18,306 --> 00:34:21,726
Well, it turns out LLDB

735
00:34:22,056 --> 00:34:25,436
and we can do one better by

736
00:34:25,436 --> 00:34:26,956
in the semicolon

737
00:34:27,335 --> 00:34:28,386
running your expression.

738
00:34:28,976 --> 00:34:30,266
This is called fixit.

739
00:34:30,266 --> 00:34:32,436
It's been in clang for a while

740
00:34:32,726 --> 00:34:34,806
and LLDB now applies

741
00:34:36,886 --> 00:34:38,496
Swift has fixit too.

742
00:34:39,716 --> 00:34:42,826
In Swift you're less likely

743
00:34:43,166 --> 00:34:45,426
but boy those exclamation

744
00:34:46,516 --> 00:34:48,656
[ Laughter ]

745
00:34:49,156 --> 00:34:54,025
Yeah. Well, they are as valuable

746
00:34:54,025 --> 00:34:55,176
for you to understand it,

747
00:34:55,306 --> 00:34:57,306
when you're debugging you

748
00:34:57,306 --> 00:35:00,786
out of your way, and

749
00:34:57,306 --> 00:35:00,786
out of your way, and

750
00:35:01,756 --> 00:35:04,876
So if you try to use something

751
00:35:06,126 --> 00:35:08,076
we just apply the fixit

752
00:35:09,306 --> 00:35:12,016
Now, there may be

753
00:35:12,186 --> 00:35:14,556
who say I don't want

754
00:35:15,146 --> 00:35:20,986
Now, for those people I

755
00:35:21,776 --> 00:35:26,136
and we have settings that will

756
00:35:26,136 --> 00:35:28,716
fixit feature and

757
00:35:28,716 --> 00:35:31,116
like the debugger

758
00:35:31,116 --> 00:35:33,736
out every little thing in your

759
00:35:34,176 --> 00:35:36,226
then you can turn just

760
00:35:37,956 --> 00:35:38,376
All right.

761
00:35:39,516 --> 00:35:44,156
[ Applause ]

762
00:35:44,656 --> 00:35:45,176
Thanks. All right.

763
00:35:45,916 --> 00:35:49,246
Great. That's a nice convenience

764
00:35:49,246 --> 00:35:53,696
up with just one more thing that

765
00:35:53,696 --> 00:35:56,866
You can define your own types.

766
00:35:57,966 --> 00:36:00,726
In Swift for example you can

767
00:35:57,966 --> 00:36:00,726
In Swift for example you can

768
00:36:00,926 --> 00:36:05,146
that defines a class and

769
00:36:05,146 --> 00:36:08,196
that class indeed it

770
00:36:08,576 --> 00:36:11,006
as if you had defined the

771
00:36:12,336 --> 00:36:18,026
In the same way in C++, you can

772
00:36:18,916 --> 00:36:24,256
Now let me show you an example

773
00:36:24,306 --> 00:36:28,336
and using them in

774
00:36:28,496 --> 00:36:31,666
Often especially in your

775
00:36:31,666 --> 00:36:34,566
with web APIs you get a lot

776
00:36:34,566 --> 00:36:36,446
to filter it especially

777
00:36:37,736 --> 00:36:41,826
The way you filter data

778
00:36:41,826 --> 00:36:43,076
by defining a predicate.

779
00:36:44,526 --> 00:36:48,356
Now in the expression parser you

780
00:36:49,176 --> 00:36:52,266
In this case we're

781
00:36:52,726 --> 00:36:56,266
that takes the result

782
00:36:56,996 --> 00:36:59,146
and filters them to find strings

783
00:36:59,176 --> 00:37:01,046
that have the text

784
00:36:59,176 --> 00:37:01,046
that have the text

785
00:37:01,836 --> 00:37:02,986
Probably useful for debugging.

786
00:37:04,256 --> 00:37:08,526
Now if you simply take

787
00:37:08,526 --> 00:37:12,416
from your web server and you

788
00:37:12,666 --> 00:37:14,696
you can get right

789
00:37:14,696 --> 00:37:17,356
that you actually cared about.

790
00:37:18,426 --> 00:37:18,816
All right.

791
00:37:19,186 --> 00:37:22,166
Now you've hopefully seen how

792
00:37:22,166 --> 00:37:24,806
can be for you, I'd like to

793
00:37:25,136 --> 00:37:26,816
to show you more

794
00:37:27,516 --> 00:37:31,886
[ Applause ]

795
00:37:32,386 --> 00:37:32,936
&gt;&gt; Thank you, Sean.

796
00:37:33,416 --> 00:37:36,416
So, so far we've sort of

797
00:37:36,416 --> 00:37:39,586
of things and told you

798
00:37:39,586 --> 00:37:42,116
of your program when you're

799
00:37:42,116 --> 00:37:43,886
yet told you how you

800
00:37:43,886 --> 00:37:44,996
to such interesting points.

801
00:37:44,996 --> 00:37:46,666
So that's with what I'm going

802
00:37:46,926 --> 00:37:49,646
Of course breakpoints

803
00:37:49,876 --> 00:37:51,956
that you would stop

804
00:37:51,956 --> 00:37:54,896
So I want to talk a little

805
00:37:54,896 --> 00:37:59,586
about breakpoints naively as the

806
00:37:59,806 --> 00:38:01,886
but that's actually not

807
00:37:59,806 --> 00:38:01,886
but that's actually not

808
00:38:01,886 --> 00:38:04,356
or how LLDB thinks about them.

809
00:38:04,356 --> 00:38:07,196
To LLDB a breakpoint

810
00:38:07,466 --> 00:38:10,936
through your program space

811
00:38:10,936 --> 00:38:13,366
or many different kinds of

812
00:38:13,706 --> 00:38:16,496
So breakpoints are

813
00:38:16,866 --> 00:38:20,896
and what the individual

814
00:38:20,896 --> 00:38:22,876
what you thought of

815
00:38:23,186 --> 00:38:25,136
we call breakpoint locations.

816
00:38:25,466 --> 00:38:27,616
So to make this a little more

817
00:38:27,666 --> 00:38:31,966
to Xcode's breakpoints because

818
00:38:31,966 --> 00:38:33,596
when it debugs is LLDB

819
00:38:33,596 --> 00:38:37,176
so all the Xcode breakpoints

820
00:38:37,416 --> 00:38:41,576
So for instance when you click

821
00:38:41,756 --> 00:38:45,016
what you're really doing is

822
00:38:45,016 --> 00:38:46,496
some breakpoint setting command.

823
00:38:46,976 --> 00:38:49,606
Similarly when you make a

824
00:38:49,606 --> 00:38:52,286
running a by name

825
00:38:52,506 --> 00:38:55,136
So I want to give

826
00:38:55,136 --> 00:38:58,726
that these are really

827
00:38:58,726 --> 00:39:02,906
in which you would end up

828
00:38:58,726 --> 00:39:02,906
in which you would end up

829
00:39:02,906 --> 00:39:05,786
from what you thought of as

830
00:39:05,786 --> 00:39:08,446
setting, so the first example

831
00:39:08,446 --> 00:39:10,656
that I'll show you is

832
00:39:10,926 --> 00:39:12,846
So here's an example

833
00:39:12,846 --> 00:39:14,356
to just set a breakpoint

834
00:39:14,356 --> 00:39:15,896
That should be a simple

835
00:39:16,236 --> 00:39:18,866
But then it says, no

836
00:39:18,866 --> 00:39:20,546
Well, while did you

837
00:39:20,926 --> 00:39:23,376
Do the break list

838
00:39:23,376 --> 00:39:25,406
of your breakpoint

839
00:39:25,406 --> 00:39:30,226
that the breakpoint name

840
00:39:30,226 --> 00:39:34,436
matching search, so for instance

841
00:39:34,436 --> 00:39:36,486
within a class and

842
00:39:36,486 --> 00:39:39,386
in many cases because like

843
00:39:39,386 --> 00:39:42,836
and you have a name space, and a

844
00:39:42,836 --> 00:39:45,076
and a method, you don't

845
00:39:45,076 --> 00:39:49,036
of the full path to that but

846
00:39:49,036 --> 00:39:52,006
that the search is perhaps wider

847
00:39:52,616 --> 00:39:54,976
We provide many different

848
00:39:54,976 --> 00:39:57,746
so of course we provide a

849
00:39:57,966 --> 00:40:01,486
which is the full name

850
00:39:57,966 --> 00:40:01,486
which is the full name

851
00:40:01,486 --> 00:40:05,306
to match the entire name of the

852
00:40:05,726 --> 00:40:07,866
We tried that but even

853
00:40:08,156 --> 00:40:10,806
Well, for some reason somebody

854
00:40:10,806 --> 00:40:13,516
to have a function called main

855
00:40:13,916 --> 00:40:17,816
So you can even specify

856
00:40:17,816 --> 00:40:21,976
to a particular shared

857
00:40:21,976 --> 00:40:24,276
So then finally then you

858
00:40:24,716 --> 00:40:26,286
I'm going to give you

859
00:40:26,286 --> 00:40:27,616
because I don't think

860
00:40:27,616 --> 00:40:30,206
but because this one actually

861
00:40:30,416 --> 00:40:32,116
with file and line breakpoints

862
00:40:32,406 --> 00:40:34,156
because Swift has

863
00:40:34,306 --> 00:40:38,436
that you can call a

864
00:40:38,566 --> 00:40:42,806
and define the closure simply by

865
00:40:42,806 --> 00:40:45,016
and then on with the

866
00:40:45,206 --> 00:40:47,526
But then if you try to set

867
00:40:47,696 --> 00:40:50,756
what you're going to find out

868
00:40:50,756 --> 00:40:51,656
Why do you have that?

869
00:40:52,106 --> 00:40:54,696
When you look it's actually

870
00:40:54,886 --> 00:40:58,676
That source line actually

871
00:40:58,676 --> 00:41:01,796
to the closure function and

872
00:40:58,676 --> 00:41:01,796
to the closure function and

873
00:41:01,796 --> 00:41:03,666
location on the closure

874
00:41:03,906 --> 00:41:07,486
but it also was the invoking

875
00:41:07,776 --> 00:41:11,726
and so you also have a

876
00:41:12,226 --> 00:41:16,836
So anyway that's for that so now

877
00:41:17,056 --> 00:41:19,806
let me give you the general

878
00:41:19,806 --> 00:41:22,846
on to some more interesting

879
00:41:23,416 --> 00:41:25,746
So the breakpoint set

880
00:41:25,746 --> 00:41:28,686
You say break set and then

881
00:41:28,686 --> 00:41:31,076
which specify the type

882
00:41:31,076 --> 00:41:33,846
and that's really

883
00:41:33,846 --> 00:41:34,826
of search that you're doing.

884
00:41:34,826 --> 00:41:37,086
Is it a file and line

885
00:41:37,086 --> 00:41:37,986
or so on and so forth?

886
00:41:38,286 --> 00:41:41,436
And the values for that

887
00:41:41,546 --> 00:41:45,336
for the search and then there

888
00:41:45,636 --> 00:41:48,046
like ignore count,

889
00:41:48,246 --> 00:41:51,026
The way to think about those

890
00:41:51,286 --> 00:41:54,306
where to break, they

891
00:41:54,576 --> 00:41:59,876
So that's the whether can be

892
00:41:59,876 --> 00:42:02,026
where can't because we've

893
00:41:59,876 --> 00:42:02,026
where can't because we've

894
00:42:02,026 --> 00:42:03,586
and you would just

895
00:42:03,586 --> 00:42:04,466
if you wanted to do that.

896
00:42:04,836 --> 00:42:07,556
So let's talk a little bit about

897
00:42:07,556 --> 00:42:09,736
which are the places where

898
00:42:09,736 --> 00:42:11,766
They are the individual

899
00:42:12,036 --> 00:42:14,416
they always have some

900
00:42:14,416 --> 00:42:16,746
at which your program

901
00:42:17,116 --> 00:42:19,576
When you look at them

902
00:42:19,576 --> 00:42:21,546
by the generating

903
00:42:21,716 --> 00:42:24,416
and a location number

904
00:42:24,416 --> 00:42:27,666
So if you actually notice

905
00:42:27,666 --> 00:42:30,126
and you stop at one of your

906
00:42:30,126 --> 00:42:33,746
at the little PC ribbon, the PC

907
00:42:33,746 --> 00:42:36,186
on the far right and

908
00:42:36,186 --> 00:42:37,766
but it always says 2.1.

909
00:42:37,766 --> 00:42:39,416
It never said breakpoint 2

910
00:42:39,596 --> 00:42:42,066
because you only ever

911
00:42:42,366 --> 00:42:44,316
so 1.1, 1.2 or whatever.

912
00:42:44,636 --> 00:42:48,686
By the way, the locations

913
00:42:48,686 --> 00:42:50,366
of symmetrical with

914
00:42:50,366 --> 00:42:52,606
of these other options

915
00:42:52,826 --> 00:42:55,836
They all take the same sort of

916
00:42:55,836 --> 00:42:57,076
and conditions and so forth,

917
00:42:57,396 --> 00:43:00,766
and you can specify a

918
00:42:57,396 --> 00:43:00,766
and you can specify a

919
00:43:00,766 --> 00:43:03,486
on a breakpoint and then it

920
00:43:03,696 --> 00:43:06,936
but you can also override

921
00:43:06,936 --> 00:43:08,906
of the commands or

922
00:43:08,906 --> 00:43:10,826
on the location instead.

923
00:43:11,206 --> 00:43:13,556
One other little convenience,

924
00:43:14,076 --> 00:43:17,116
oftentimes if you have a

925
00:43:17,116 --> 00:43:18,966
bunch of locations,

926
00:43:18,966 --> 00:43:21,226
you don't want five of

927
00:43:21,416 --> 00:43:22,946
which you can do independently,

928
00:43:23,266 --> 00:43:26,216
but then if you you don't want

929
00:43:26,216 --> 00:43:28,316
to be able to disable the whole

930
00:43:28,316 --> 00:43:29,616
by disabling the breakpoint.

931
00:43:29,796 --> 00:43:32,766
But it turns out that doesn't

932
00:43:32,766 --> 00:43:35,906
of it locations so then you

933
00:43:36,126 --> 00:43:39,206
and all of the location state

934
00:43:39,666 --> 00:43:40,666
So that's just a little thing.

935
00:43:40,906 --> 00:43:42,416
So now that you've

936
00:43:42,586 --> 00:43:45,356
the notion of how breakpoints

937
00:43:45,356 --> 00:43:48,736
let me show you a couple

938
00:43:48,736 --> 00:43:50,476
of breakpoints that

939
00:43:50,726 --> 00:43:53,046
So again these are

940
00:43:53,156 --> 00:43:55,586
What kinds of searches

941
00:43:55,686 --> 00:43:57,406
It's just what name spaces

942
00:43:57,406 --> 00:43:59,366
in your program might

943
00:43:59,576 --> 00:44:02,276
It turns out all of the

944
00:43:59,576 --> 00:44:02,276
It turns out all of the

945
00:44:02,276 --> 00:44:04,336
of stringy things because

946
00:44:04,336 --> 00:44:08,486
of functions or whatever, so we

947
00:44:08,656 --> 00:44:10,976
as the way to express

948
00:44:11,196 --> 00:44:12,686
So if you know regular

949
00:44:12,686 --> 00:44:13,916
this will make you feel lovely,

950
00:44:14,196 --> 00:44:16,056
and if you don't

951
00:44:16,376 --> 00:44:19,096
I would have said a couple

952
00:44:19,126 --> 00:44:21,536
in your office that

953
00:44:21,536 --> 00:44:23,506
on them although

954
00:44:23,506 --> 00:44:25,326
for somebody old you

955
00:44:25,326 --> 00:44:26,876
for somebody who

956
00:44:27,516 --> 00:44:29,516
[ Laughter ]

957
00:44:30,516 --> 00:44:32,546
[ Applause ]

958
00:44:33,046 --> 00:44:35,476
So anyway, so we provide

959
00:44:35,476 --> 00:44:38,886
one is fairly obvious which

960
00:44:38,886 --> 00:44:42,106
of functions in your program

961
00:44:42,366 --> 00:44:44,116
and one that might be

962
00:44:44,116 --> 00:44:45,996
but I'll convince you

963
00:44:45,996 --> 00:44:49,576
as we go along, are sourced

964
00:44:49,966 --> 00:44:51,456
And this is the option

965
00:44:51,946 --> 00:44:54,826
Okay, so let's give you the

966
00:44:54,826 --> 00:44:55,996
pattern matching breakpoints

967
00:44:55,996 --> 00:44:57,496
and I'll just show

968
00:44:57,806 --> 00:44:59,636
So suppose somebody has

969
00:45:00,216 --> 00:45:02,706
and you don't know what it does,

970
00:45:02,926 --> 00:45:04,326
so what you want to

971
00:45:04,326 --> 00:45:07,636
on all the methods implemented

972
00:45:07,636 --> 00:45:10,266
by going through the source

973
00:45:10,266 --> 00:45:11,296
on the beginning of all of them

974
00:45:11,296 --> 00:45:13,086
but that would quickly

975
00:45:13,456 --> 00:45:15,236
And by the way, you

976
00:45:15,236 --> 00:45:16,476
on the parent or

977
00:45:16,806 --> 00:45:18,956
What would be better

978
00:45:18,956 --> 00:45:20,116
up a regular expression

979
00:45:20,116 --> 00:45:23,796
which matches all the

980
00:45:24,046 --> 00:45:26,756
So in Swift this is an

981
00:45:27,066 --> 00:45:29,546
or in Objective C this is an

982
00:45:29,726 --> 00:45:32,406
So then you would have

983
00:45:32,406 --> 00:45:34,456
of those then you could run your

984
00:45:34,456 --> 00:45:35,526
through and see what's going on.

985
00:45:35,526 --> 00:45:38,066
And remember because you can

986
00:45:38,336 --> 00:45:40,726
when you do this

987
00:45:40,846 --> 00:45:43,606
you find that you hit one of

988
00:45:43,606 --> 00:45:45,456
you're uninterested in that

989
00:45:45,456 --> 00:45:47,366
that location then

990
00:45:47,366 --> 00:45:49,666
The second one you figure out

991
00:45:50,006 --> 00:45:52,126
So that's kind of a nice

992
00:45:52,286 --> 00:45:54,556
An even more radical version

993
00:45:54,556 --> 00:45:56,306
of the same thing is somebody

994
00:45:56,306 --> 00:45:57,876
library that does some stuff.

995
00:45:57,936 --> 00:45:59,676
You want to just see

996
00:45:59,676 --> 00:46:03,016
when it's running then set a

997
00:45:59,676 --> 00:46:03,016
when it's running then set a

998
00:46:03,016 --> 00:46:04,926
I'm using the short

999
00:46:05,246 --> 00:46:07,876
and the regular expression

1000
00:46:07,876 --> 00:46:10,216
that's what .star

1001
00:46:10,216 --> 00:46:12,516
to the library you're

1002
00:46:12,516 --> 00:46:15,706
Combining this with breakpoint

1003
00:46:15,706 --> 00:46:18,526
nice way just to sort of

1004
00:46:18,526 --> 00:46:21,786
of execution through this

1005
00:46:21,786 --> 00:46:24,376
and maybe print the

1006
00:46:24,376 --> 00:46:27,436
and you'll just run your

1007
00:46:27,436 --> 00:46:29,686
of the execution

1008
00:46:30,316 --> 00:46:31,846
Of course it slows

1009
00:46:31,846 --> 00:46:33,446
but you know whatever

1010
00:46:33,956 --> 00:46:37,626
And then the other trick

1011
00:46:37,626 --> 00:46:39,336
that you don't care about,

1012
00:46:39,676 --> 00:46:41,636
So let me talk about

1013
00:46:41,826 --> 00:46:43,966
of pattern matching in source.

1014
00:46:44,386 --> 00:46:47,946
So the point here is that

1015
00:46:47,946 --> 00:46:49,596
that are really obvious

1016
00:46:49,596 --> 00:46:52,466
at your source text but

1017
00:46:52,466 --> 00:46:55,166
in the generated code

1018
00:46:55,406 --> 00:46:57,436
So an example of this is macros

1019
00:46:57,696 --> 00:47:00,086
which generally just

1020
00:46:57,696 --> 00:47:00,086
which generally just

1021
00:47:00,086 --> 00:47:02,996
into your program and then

1022
00:47:02,996 --> 00:47:04,516
where they're inserted

1023
00:47:04,516 --> 00:47:06,176
because they're the things

1024
00:47:06,446 --> 00:47:09,356
So you want to do a search

1025
00:47:09,356 --> 00:47:11,236
or for the particular

1026
00:47:11,536 --> 00:47:13,886
But you can even be

1027
00:47:13,886 --> 00:47:16,426
so for instance I

1028
00:47:16,426 --> 00:47:19,496
that a particular field

1029
00:47:19,836 --> 00:47:22,406
which is something that in

1030
00:47:22,406 --> 00:47:23,956
because it's going

1031
00:47:24,246 --> 00:47:27,006
but in generated code

1032
00:47:27,006 --> 00:47:27,736
quite difficult.

1033
00:47:27,736 --> 00:47:31,416
So that's another instance

1034
00:47:31,416 --> 00:47:34,276
in your source can allow

1035
00:47:34,276 --> 00:47:36,576
that you might not be

1036
00:47:36,926 --> 00:47:42,696
Then another use of this is to

1037
00:47:42,806 --> 00:47:45,046
that you can set

1038
00:47:45,206 --> 00:47:47,556
by inserting patterns

1039
00:47:47,556 --> 00:47:50,816
into your source code like

1040
00:47:50,816 --> 00:47:53,016
or break here when

1041
00:47:53,016 --> 00:47:55,596
in inspecting this

1042
00:47:55,596 --> 00:47:57,226
of my program's functionality

1043
00:47:57,526 --> 00:48:00,126
and then using these source

1044
00:47:57,526 --> 00:48:00,126
and then using these source

1045
00:48:00,216 --> 00:48:01,066
to catch it.

1046
00:48:01,476 --> 00:48:05,416
So here's how the source

1047
00:48:05,416 --> 00:48:06,126
command works.

1048
00:48:06,406 --> 00:48:09,236
There's source regular

1049
00:48:09,456 --> 00:48:12,136
the data you're providing for

1050
00:48:12,366 --> 00:48:16,256
and then you can limit it to

1051
00:48:16,256 --> 00:48:19,956
to multiple files by just

1052
00:48:19,956 --> 00:48:23,296
times and there's also a flag

1053
00:48:24,106 --> 00:48:27,716
So let me just give you an

1054
00:48:27,996 --> 00:48:30,966
Suppose I had like a complex

1055
00:48:31,136 --> 00:48:33,346
which is computing stuff

1056
00:48:33,346 --> 00:48:34,616
from many different places

1057
00:48:34,616 --> 00:48:36,756
in some horrible huge case

1058
00:48:36,756 --> 00:48:40,526
like that, and I'm interested

1059
00:48:40,526 --> 00:48:43,356
to return null but I'd like

1060
00:48:43,666 --> 00:48:47,586
in this particular run through

1061
00:48:47,816 --> 00:48:49,666
and that's a hard thing

1062
00:48:49,666 --> 00:48:51,556
because you can stop

1063
00:48:51,556 --> 00:48:52,656
and check whether it's null.

1064
00:48:52,856 --> 00:48:55,936
You can go click on all the

1065
00:48:55,936 --> 00:48:59,726
but you might miss one or you

1066
00:49:00,176 --> 00:49:02,546
There's one other

1067
00:49:02,546 --> 00:49:05,136
in the source regular

1068
00:49:05,136 --> 00:49:08,206
which is you can specify not

1069
00:49:08,206 --> 00:49:09,866
to a particular function so in

1070
00:49:09,866 --> 00:49:11,326
that case I'd do

1071
00:49:11,546 --> 00:49:14,796
I'd break my pattern

1072
00:49:14,796 --> 00:49:17,556
and then I'm doing showing

1073
00:49:17,556 --> 00:49:20,946
because I'm showing off, space

1074
00:49:21,126 --> 00:49:24,246
and then my null pointer I limit

1075
00:49:24,246 --> 00:49:27,466
to a file I'm interested in and

1076
00:49:27,466 --> 00:49:29,896
through exactly where

1077
00:49:29,896 --> 00:49:31,036
in this particular usage.

1078
00:49:32,286 --> 00:49:34,296
So it's worthwhile

1079
00:49:34,296 --> 00:49:37,646
of extra breakpoint options that

1080
00:49:37,846 --> 00:49:41,116
One of them is along

1081
00:49:41,116 --> 00:49:44,906
or the filter kind that's

1082
00:49:44,906 --> 00:49:49,216
and Objective C together in

1083
00:49:49,216 --> 00:49:51,186
to specify a language

1084
00:49:51,186 --> 00:49:54,176
So for instance, there are a

1085
00:49:54,176 --> 00:49:55,796
in the world and if

1086
00:49:55,796 --> 00:49:58,306
on the name count you're

1087
00:49:58,306 --> 00:50:00,546
of Swift code but you're also

1088
00:49:58,306 --> 00:50:00,546
of Swift code but you're also

1089
00:50:00,546 --> 00:50:02,356
of Objective C methods

1090
00:50:02,356 --> 00:50:05,136
about the Objective C methods,

1091
00:50:05,476 --> 00:50:08,126
then you can just

1092
00:50:08,126 --> 00:50:09,826
and it won't set a

1093
00:50:09,826 --> 00:50:11,716
of the Objective C names

1094
00:50:11,786 --> 00:50:15,426
So that's just a useful little

1095
00:50:15,656 --> 00:50:19,516
And one other option that's

1096
00:50:19,626 --> 00:50:22,716
to narrow your search

1097
00:50:22,966 --> 00:50:25,836
So you've got some code that's

1098
00:50:25,836 --> 00:50:27,856
of different threads, it's like

1099
00:50:27,996 --> 00:50:31,126
but you've starting working

1100
00:50:31,126 --> 00:50:33,756
and you don't want your

1101
00:50:33,756 --> 00:50:35,526
for the investigation

1102
00:50:35,526 --> 00:50:37,696
onto other threads,

1103
00:50:37,946 --> 00:50:41,926
There's a thread ID option and

1104
00:50:41,926 --> 00:50:43,406
by thread name which you set

1105
00:50:43,406 --> 00:50:45,986
with this pthread

1106
00:50:45,986 --> 00:50:48,966
That one is convenient because

1107
00:50:48,966 --> 00:50:51,246
that persists over

1108
00:50:51,246 --> 00:50:53,616
where of course the thread ID

1109
00:50:54,036 --> 00:50:57,976
and you can even restrict it

1110
00:50:57,976 --> 00:50:59,596
on a particular queue by name.

1111
00:51:01,076 --> 00:51:02,846
One other thing that

1112
00:51:02,846 --> 00:51:06,116
that you can add all these

1113
00:51:06,286 --> 00:51:08,976
and particularly that's

1114
00:51:08,976 --> 00:51:11,726
and line breakpoint

1115
00:51:11,726 --> 00:51:14,526
but then you decide you want to

1116
00:51:14,526 --> 00:51:16,716
to a particular thread and

1117
00:51:16,716 --> 00:51:18,786
after the fact, the

1118
00:51:19,096 --> 00:51:20,076
and the other useful thing

1119
00:51:20,076 --> 00:51:22,846
in this slide is showing

1120
00:51:23,136 --> 00:51:26,606
because you can specify

1121
00:51:26,996 --> 00:51:28,616
by breakpoint location number

1122
00:51:28,696 --> 00:51:31,316
and there's also a little

1123
00:51:33,296 --> 00:51:35,106
That's that.

1124
00:51:35,316 --> 00:51:38,436
So now you've come up with

1125
00:51:38,636 --> 00:51:41,626
that you want but you run into

1126
00:51:41,626 --> 00:51:42,926
that it turns out Xcode

1127
00:51:42,926 --> 00:51:45,066
at present only persists

1128
00:51:45,066 --> 00:51:48,686
that it knows you set and so

1129
00:51:48,686 --> 00:51:51,206
to write in by hand

1130
00:51:51,446 --> 00:51:53,016
So how do you make them persist?

1131
00:51:53,316 --> 00:51:56,556
The first way is what Enrico

1132
00:51:56,556 --> 00:51:58,786
to hold for all projects,

1133
00:51:58,786 --> 00:52:01,046
in your LLDB init file

1134
00:51:58,786 --> 00:52:01,046
in your LLDB init file

1135
00:52:01,336 --> 00:52:03,506
But if you want to make

1136
00:52:03,506 --> 00:52:05,326
here's a cute little

1137
00:52:05,546 --> 00:52:08,656
to get the breakpoints

1138
00:52:08,656 --> 00:52:09,866
that particular project.

1139
00:52:10,186 --> 00:52:13,216
What you do is make an

1140
00:52:13,466 --> 00:52:15,406
preferably something that's

1141
00:52:15,406 --> 00:52:16,966
on in your program execution,

1142
00:52:17,186 --> 00:52:18,466
and then you put

1143
00:52:18,466 --> 00:52:19,706
as commands in that one.

1144
00:52:19,706 --> 00:52:23,326
So you know if you're a main

1145
00:52:23,326 --> 00:52:25,116
main is a very convenient place

1146
00:52:25,116 --> 00:52:26,786
so you would make a

1147
00:52:27,156 --> 00:52:29,626
and then you would put main in

1148
00:52:29,836 --> 00:52:32,906
and then you would remember

1149
00:52:32,906 --> 00:52:34,776
where I told you about our

1150
00:52:34,976 --> 00:52:37,086
so you would specify

1151
00:52:37,476 --> 00:52:39,466
then you would add an action

1152
00:52:39,466 --> 00:52:42,016
which is a debugger command

1153
00:52:42,016 --> 00:52:44,466
in all of the breakpoints

1154
00:52:44,466 --> 00:52:45,906
because that's just

1155
00:52:46,156 --> 00:52:48,806
It's much easier to put

1156
00:52:48,946 --> 00:52:51,276
and then use LLDB's

1157
00:52:51,276 --> 00:52:54,166
to load those commands in,

1158
00:52:54,436 --> 00:52:55,236
and then finally

1159
00:52:55,236 --> 00:52:57,556
if you autocontinue then just

1160
00:52:57,556 --> 00:53:00,396
automatically have all of

1161
00:52:57,556 --> 00:53:00,396
automatically have all of

1162
00:53:01,106 --> 00:53:05,416
So I want to show you one other

1163
00:53:05,826 --> 00:53:09,076
to overcome one particularly

1164
00:53:09,386 --> 00:53:13,896
in modern languages which

1165
00:53:13,896 --> 00:53:16,276
to step you're trying

1166
00:53:16,496 --> 00:53:19,906
but the problem is that in

1167
00:53:19,906 --> 00:53:23,146
of the variable access is

1168
00:53:23,146 --> 00:53:25,956
or through accessor

1169
00:53:26,166 --> 00:53:29,906
and they're generally that's not

1170
00:53:30,286 --> 00:53:32,246
So you end up in a scenario

1171
00:53:32,246 --> 00:53:34,826
like this you know I'm

1172
00:53:34,826 --> 00:53:35,916
into this function,

1173
00:53:35,916 --> 00:53:36,906
I want to step in there.

1174
00:53:37,106 --> 00:53:41,136
So I try that I step and I

1175
00:53:41,136 --> 00:53:43,826
of the arguments that I was

1176
00:53:43,826 --> 00:53:44,956
so I ended up in the accessor.

1177
00:53:44,996 --> 00:53:47,356
I don't want to be there because

1178
00:53:47,576 --> 00:53:49,146
so what I'm going end

1179
00:53:49,146 --> 00:53:50,296
out and stepping back.

1180
00:53:50,436 --> 00:53:52,956
So is there any way that we can

1181
00:53:53,146 --> 00:53:55,816
And it turns out that we've

1182
00:53:55,816 --> 00:53:59,136
stepping so the option

1183
00:53:59,136 --> 00:54:01,806
that you would say by

1184
00:53:59,136 --> 00:54:01,806
that you would say by

1185
00:54:01,806 --> 00:54:04,346
to do is I want you to step

1186
00:54:04,346 --> 00:54:05,636
in this particular place,

1187
00:54:05,636 --> 00:54:07,276
that's what you're

1188
00:54:07,676 --> 00:54:10,356
So let's try that in this

1189
00:54:10,356 --> 00:54:12,246
that it almost but

1190
00:54:12,376 --> 00:54:13,946
and the reason it

1191
00:54:13,946 --> 00:54:16,286
because though we didn't

1192
00:54:16,436 --> 00:54:19,966
we ended up on the next source

1193
00:54:19,966 --> 00:54:21,406
And that makes sense

1194
00:54:21,406 --> 00:54:24,156
because actually stepping is

1195
00:54:24,306 --> 00:54:25,976
and that was the multiline call.

1196
00:54:26,046 --> 00:54:29,786
So we've also added the

1197
00:54:29,786 --> 00:54:31,186
of the stepping operation

1198
00:54:31,386 --> 00:54:33,056
by saying what the

1199
00:54:33,216 --> 00:54:35,566
or even more conveniently

1200
00:54:35,566 --> 00:54:38,756
through this block and get me

1201
00:54:38,996 --> 00:54:40,596
And there's even

1202
00:54:40,596 --> 00:54:43,376
which is sif step in function.

1203
00:54:43,676 --> 00:54:46,406
So then what you would do

1204
00:54:46,406 --> 00:54:49,256
and you would say step in

1205
00:54:49,256 --> 00:54:51,006
in the right place or if you

1206
00:54:51,006 --> 00:54:51,526
on the slide.

1207
00:54:52,386 --> 00:54:54,616
So that I want to conclude

1208
00:54:54,616 --> 00:54:56,036
of troubleshooting information.

1209
00:54:56,346 --> 00:54:58,926
One piece of information

1210
00:54:58,926 --> 00:55:02,446
to know is what is actually

1211
00:54:58,926 --> 00:55:02,446
to know is what is actually

1212
00:55:02,636 --> 00:55:05,366
For instance maybe I built

1213
00:55:05,546 --> 00:55:07,716
and I want to know which

1214
00:55:07,976 --> 00:55:10,116
or somebody gave me a

1215
00:55:10,116 --> 00:55:11,556
Did the dSYM get read in?

1216
00:55:11,876 --> 00:55:13,356
So the command that inquiries

1217
00:55:13,566 --> 00:55:15,956
about that information is

1218
00:55:15,956 --> 00:55:18,016
You can either give

1219
00:55:18,016 --> 00:55:19,356
in which case it will

1220
00:55:19,356 --> 00:55:21,636
about just one module

1221
00:55:21,636 --> 00:55:26,656
or for amusement's sake you can

1222
00:55:26,656 --> 00:55:28,256
of them which is

1223
00:55:28,536 --> 00:55:32,216
So here's an example just

1224
00:55:32,536 --> 00:55:37,466
I say image list example

1225
00:55:37,466 --> 00:55:39,096
to the binary so for

1226
00:55:39,096 --> 00:55:41,476
to check whether I was

1227
00:55:41,476 --> 00:55:43,436
okay it does look like

1228
00:55:43,706 --> 00:55:45,706
and if there is a

1229
00:55:45,706 --> 00:55:47,636
it will always be

1230
00:55:47,636 --> 00:55:49,686
so in this case I see

1231
00:55:50,066 --> 00:55:53,376
I want to tell you one thing

1232
00:55:53,486 --> 00:55:56,306
I put on this slide the why

1233
00:55:56,306 --> 00:55:57,966
to tell you the why because

1234
00:55:57,966 --> 00:56:01,956
of time, but I'll tell you

1235
00:55:57,966 --> 00:56:01,956
of time, but I'll tell you

1236
00:56:01,956 --> 00:56:03,416
through too fast

1237
00:56:03,416 --> 00:56:06,986
The TLDR is that because of

1238
00:56:06,986 --> 00:56:09,956
with one another all the

1239
00:56:09,956 --> 00:56:13,236
that has debug information

1240
00:56:13,446 --> 00:56:16,726
so copying binaries from other

1241
00:56:16,726 --> 00:56:17,426
and stuff like that.

1242
00:56:17,426 --> 00:56:18,386
You have to have made sure

1243
00:56:18,386 --> 00:56:21,626
that everything has been built

1244
00:56:21,816 --> 00:56:23,426
that goes along with

1245
00:56:23,426 --> 00:56:24,586
that you're currently using.

1246
00:56:25,436 --> 00:56:29,216
I want to say this is one

1247
00:56:29,216 --> 00:56:31,896
and so Enrico's rule of

1248
00:56:31,896 --> 00:56:35,186
as we saw earlier is don't do

1249
00:56:35,336 --> 00:56:40,416
since most software developers

1250
00:56:40,416 --> 00:56:42,936
write a corollary to that

1251
00:56:42,936 --> 00:56:45,866
who debug optimized code

1252
00:56:46,206 --> 00:56:48,576
So now LLDB will tell you

1253
00:56:48,736 --> 00:56:51,966
that a file was compiled

1254
00:56:51,966 --> 00:56:54,436
It will only tell

1255
00:56:54,606 --> 00:56:56,006
and you'll get a little

1256
00:56:56,006 --> 00:56:58,346
And then you run quickly

1257
00:56:58,556 --> 00:57:00,826
and change them back.

1258
00:56:58,556 --> 00:57:00,826
and change them back.

1259
00:57:00,956 --> 00:57:03,266
One other new feature

1260
00:57:03,266 --> 00:57:05,836
to clang a while ago was

1261
00:57:06,076 --> 00:57:09,536
So modules are a way to

1262
00:57:09,536 --> 00:57:11,946
at all the headers that

1263
00:57:11,946 --> 00:57:16,766
for your program, compile

1264
00:57:17,036 --> 00:57:19,646
and then reuse that

1265
00:57:19,906 --> 00:57:22,426
So then we thought well why

1266
00:57:22,426 --> 00:57:24,116
for the debug information?

1267
00:57:24,116 --> 00:57:28,366
Why don't we allow that parsed

1268
00:57:28,366 --> 00:57:34,136
to be also done once and then

1269
00:57:34,136 --> 00:57:35,386
that you have debug information?

1270
00:57:35,386 --> 00:57:38,086
So that's called clang

1271
00:57:38,086 --> 00:57:40,786
We can also use PCH

1272
00:57:40,966 --> 00:57:44,756
The setting in Xcode is

1273
00:57:44,756 --> 00:57:46,906
and here's the flag for

1274
00:57:47,176 --> 00:57:51,086
This is great because again like

1275
00:57:51,086 --> 00:57:53,816
up the generation of the debug

1276
00:57:53,816 --> 00:57:58,266
up your compile times but it has

1277
00:57:58,266 --> 00:58:00,326
that or actually one major one.

1278
00:57:58,266 --> 00:58:00,326
that or actually one major one.

1279
00:58:00,326 --> 00:58:03,696
So that caveat is that now

1280
00:58:03,696 --> 00:58:06,226
on your .o files but also

1281
00:58:06,226 --> 00:58:07,706
in some cache somewhere.

1282
00:58:08,096 --> 00:58:11,526
So normally that's not a

1283
00:58:11,686 --> 00:58:15,296
but when you go to ship

1284
00:58:15,296 --> 00:58:17,536
to somebody else, how

1285
00:58:17,536 --> 00:58:19,356
Well, if it's an application

1286
00:58:19,356 --> 00:58:23,426
or a framework then you just

1287
00:58:23,426 --> 00:58:24,436
and it does the right job,

1288
00:58:24,436 --> 00:58:26,506
it gathers everything

1289
00:58:26,806 --> 00:58:30,326
But remember that dsymutil

1290
00:58:30,326 --> 00:58:32,086
it doesn't work on .o files.

1291
00:58:32,306 --> 00:58:35,836
So if you are shipping static

1292
00:58:36,076 --> 00:58:38,676
then you must turn off

1293
00:58:38,676 --> 00:58:42,026
or you will ship broken debug

1294
00:58:42,076 --> 00:58:44,616
And also by the way, if you're

1295
00:58:44,616 --> 00:58:47,076
and you delete your module

1296
00:58:47,076 --> 00:58:48,186
to be able to debug anymore.

1297
00:58:48,786 --> 00:58:51,356
So that's the only down

1298
00:58:52,056 --> 00:58:55,406
So with that let me tell

1299
00:58:56,006 --> 00:58:59,196
We hope that you see that LLDB

1300
00:58:59,196 --> 00:59:03,136
debugger providing you many

1301
00:58:59,196 --> 00:59:03,136
debugger providing you many

1302
00:59:03,136 --> 00:59:06,246
that expressions actually

1303
00:59:06,246 --> 00:59:08,966
for investigation and I

1304
00:59:08,966 --> 00:59:11,396
of how you actually

1305
00:59:11,396 --> 00:59:14,236
and find what you're interested

1306
00:59:14,656 --> 00:59:17,416
that we have more

1307
00:59:17,416 --> 00:59:21,506
of in your Xcode and that

1308
00:59:21,506 --> 00:59:23,346
into super deep trouble

1309
00:59:23,346 --> 00:59:24,586
than source level debugging,

1310
00:59:24,586 --> 00:59:27,716
and in general we hope we

1311
00:59:27,716 --> 00:59:28,786
for exploring your code.

1312
00:59:29,086 --> 00:59:32,036
And here are a couple

1313
00:59:32,036 --> 00:59:33,426
that might have interesting

1314
00:59:33,586 --> 00:59:36,246
There were a couple of sessions

1315
00:59:36,476 --> 00:59:39,326
or did see but anyway they

1316
00:59:39,416 --> 00:59:40,786
And with that thank

1317
00:59:40,786 --> 00:59:42,976
that you enjoy the little tiny

1318
00:59:43,016 --> 00:59:45,000
[ Applause ]
