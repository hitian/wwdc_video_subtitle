1
00:00:06,516 --> 00:00:17,500
[ Music ]

2
00:00:24,456 --> 00:00:24,976
&gt;&gt; Good morning.

3
00:00:25,516 --> 00:00:29,356
[ Applause ]

4
00:00:29,856 --> 00:00:33,356
Welcome to What's New in Swift.

5
00:00:33,356 --> 00:00:35,626
Let's start out by

6
00:00:35,626 --> 00:00:37,206
for the Swift 3 release.

7
00:00:37,366 --> 00:00:41,456
Swift was released as an open

8
00:00:41,456 --> 00:00:44,826
ago, and a big part of doing

9
00:00:44,826 --> 00:00:46,526
out a bunch of sources

10
00:00:46,526 --> 00:00:49,766
but to create a fully

11
00:00:50,316 --> 00:00:53,286
that drives the evolution

12
00:00:54,126 --> 00:00:58,136
Swift 3 is the first major

13
00:00:58,136 --> 00:01:02,006
to be a product of that

14
00:00:58,136 --> 00:01:02,006
to be a product of that

15
00:01:02,006 --> 00:01:05,016
about how that community has

16
00:01:05,096 --> 00:01:06,476
the evolution process

17
00:01:06,806 --> 00:01:09,416
that crafts the language going

18
00:01:09,416 --> 00:01:14,556
about what that community

19
00:01:14,766 --> 00:01:18,686
Another big aspect for this

20
00:01:18,686 --> 00:01:19,696
to more people.

21
00:01:20,526 --> 00:01:23,556
Today's software

22
00:01:23,596 --> 00:01:25,576
and people are doing a

23
00:01:25,996 --> 00:01:28,086
in different contexts,

24
00:01:28,086 --> 00:01:31,086
for the server, they are

25
00:01:31,136 --> 00:01:34,436
We want Swift to be available

26
00:01:34,436 --> 00:01:38,526
about some great things that

27
00:01:38,526 --> 00:01:41,446
And this is really the

28
00:01:41,626 --> 00:01:43,626
since Swift was ported to Linux.

29
00:01:44,776 --> 00:01:49,346
Now, looking inward at the

30
00:01:49,346 --> 00:01:51,466
through some iterate

31
00:01:51,606 --> 00:01:55,156
over the last two releases,

32
00:01:55,156 --> 00:01:58,926
from developers who are using

33
00:01:58,926 --> 00:02:01,486
from the Swift community

34
00:01:58,926 --> 00:02:01,486
from the Swift community

35
00:02:02,186 --> 00:02:04,226
A big thing about Swift

36
00:02:04,226 --> 00:02:07,396
to get those core fundamentals

37
00:02:07,396 --> 00:02:10,205
so we can really build on

38
00:02:11,416 --> 00:02:15,176
And last, and probably the most

39
00:02:15,176 --> 00:02:17,796
to awesomize Swift

40
00:02:17,796 --> 00:02:18,246
All right?

41
00:02:19,156 --> 00:02:22,566
Swift is really intended to

42
00:02:22,596 --> 00:02:25,816
of developers, and in their

43
00:02:25,816 --> 00:02:26,756
amazing things.

44
00:02:27,296 --> 00:02:28,536
That's what we intended

45
00:02:29,496 --> 00:02:31,796
Now, this is a really

46
00:02:32,066 --> 00:02:35,306
and the way we've been directing

47
00:02:35,306 --> 00:02:38,096
to feedback from those

48
00:02:38,636 --> 00:02:41,456
but also how we're

49
00:02:42,186 --> 00:02:43,416
And so I want to

50
00:02:43,416 --> 00:02:45,196
about how we've been

51
00:02:45,276 --> 00:02:48,556
in the last year in our

52
00:02:49,856 --> 00:02:52,506
Now, the big thing here is it's

53
00:02:52,506 --> 00:02:54,936
at Apple; it's just we're

54
00:02:54,936 --> 00:02:57,886
of different ways, whether

55
00:02:57,996 --> 00:03:00,386
we have internal frameworks

56
00:02:57,996 --> 00:03:00,386
we have internal frameworks

57
00:03:00,386 --> 00:03:02,146
Agents and Daemons,

58
00:03:02,146 --> 00:03:04,516
of power the underlying

59
00:03:04,846 --> 00:03:06,156
in the operating system.

60
00:03:06,756 --> 00:03:09,986
And so if you can look, you

61
00:03:09,986 --> 00:03:13,796
you can see things like the New

62
00:03:13,796 --> 00:03:14,996
amount of Swift.

63
00:03:14,996 --> 00:03:18,676
The Console app in Sierra

64
00:03:18,676 --> 00:03:25,396
to the new logging initiatives,

65
00:03:25,396 --> 00:03:27,156
Also with the Agents and

66
00:03:27,156 --> 00:03:31,616
in picture feature in Sierra is

67
00:03:32,666 --> 00:03:35,826
Now, looking to the Tools,

68
00:03:36,066 --> 00:03:37,336
it's using Swift as well.

69
00:03:37,496 --> 00:03:39,496
For example, the new

70
00:03:39,496 --> 00:03:41,936
in Xcode 8 is 100

71
00:03:42,526 --> 00:03:45,406
And the new beautiful

72
00:03:45,896 --> 00:03:47,766
that's 100 percent

73
00:03:48,636 --> 00:03:52,286
So we are really using Swift

74
00:03:52,346 --> 00:03:56,306
And this is really focusing our

75
00:03:56,306 --> 00:03:58,266
of problems, whether

76
00:03:58,266 --> 00:04:01,886
such as memory usage, getting

77
00:03:58,266 --> 00:04:01,886
such as memory usage, getting

78
00:04:02,066 --> 00:04:03,356
and so forth, and

79
00:04:03,356 --> 00:04:06,726
that Swift is the right

80
00:04:07,046 --> 00:04:09,806
I want to talk about a

81
00:04:09,926 --> 00:04:11,376
and that's the Dock.

82
00:04:12,326 --> 00:04:15,056
And the Dock is interesting

83
00:04:16,406 --> 00:04:19,296
The first reason is it's a

84
00:04:19,296 --> 00:04:23,086
It's not just the bar at

85
00:04:23,526 --> 00:04:26,746
It's actually a large amount

86
00:04:26,746 --> 00:04:27,966
management experience.

87
00:04:28,456 --> 00:04:31,976
So things like Mission

88
00:04:31,976 --> 00:04:34,816
this is all what we

89
00:04:36,166 --> 00:04:38,906
The second reason why Dock is

90
00:04:38,906 --> 00:04:40,556
been a Swift adopter

91
00:04:40,556 --> 00:04:43,176
It started adopting

92
00:04:43,176 --> 00:04:45,586
So we have two releases

93
00:04:45,586 --> 00:04:46,696
in how it was using Swift.

94
00:04:47,606 --> 00:04:51,396
So a lot of changes happened

95
00:04:52,506 --> 00:04:56,576
First, almost all of Mission

96
00:04:56,576 --> 00:04:58,956
and the accessibility engine

97
00:04:59,516 --> 00:05:00,306
Why did we do this?

98
00:04:59,516 --> 00:05:00,306
Why did we do this?

99
00:05:00,306 --> 00:05:03,186
We just didn't rewrite code just

100
00:05:03,756 --> 00:05:06,206
The code had kind of grown

101
00:05:06,206 --> 00:05:09,146
as features had been added and

102
00:05:09,616 --> 00:05:12,256
But also some new functionality

103
00:05:12,256 --> 00:05:15,606
and so it was the

104
00:05:15,606 --> 00:05:16,836
you know, to do this rewrite.

105
00:05:18,116 --> 00:05:20,626
Now, what does this look

106
00:05:21,486 --> 00:05:25,296
So to give you an idea, Dock

107
00:05:26,186 --> 00:05:29,966
with tens of thousands of

108
00:05:29,966 --> 00:05:34,676
And between El Capitan and

109
00:05:34,676 --> 00:05:36,286
in the project more

110
00:05:37,596 --> 00:05:39,616
And this actually, because

111
00:05:40,176 --> 00:05:42,236
this replaced a significant

112
00:05:42,236 --> 00:05:43,716
of C and Objective-C code.

113
00:05:45,456 --> 00:05:47,726
And the effects here

114
00:05:48,146 --> 00:05:49,346
because there's some refactoring

115
00:05:49,346 --> 00:05:52,036
and some new features being

116
00:05:52,036 --> 00:05:55,166
about 15 percent less code

117
00:05:55,166 --> 00:05:57,766
and Objective-C code in Swift,

118
00:05:57,766 --> 00:06:00,786
and this is with new features

119
00:05:57,766 --> 00:06:00,786
and this is with new features

120
00:06:01,686 --> 00:06:05,286
And the net result is this

121
00:06:05,286 --> 00:06:08,786
smaller in Sierra than

122
00:06:10,136 --> 00:06:13,186
Now, there's a lot you

123
00:06:13,646 --> 00:06:16,526
I think the most important thing

124
00:06:16,526 --> 00:06:18,826
on the Dock love using Swift.

125
00:06:19,416 --> 00:06:20,796
They are not mandated to use it.

126
00:06:21,166 --> 00:06:21,866
They volunteered.

127
00:06:22,106 --> 00:06:25,506
They really just

128
00:06:25,506 --> 00:06:27,656
And their experience

129
00:06:28,066 --> 00:06:30,036
that they can more

130
00:06:30,036 --> 00:06:32,576
that they want to write and

131
00:06:32,576 --> 00:06:34,366
from Swift that gives

132
00:06:34,366 --> 00:06:35,806
that the code they

133
00:06:36,406 --> 00:06:39,786
Let's move on to

134
00:06:40,356 --> 00:06:42,426
If you haven't already,

135
00:06:42,426 --> 00:06:44,466
on the web is swift.org.

136
00:06:45,196 --> 00:06:48,106
And there you can find a variety

137
00:06:48,106 --> 00:06:50,056
to the project, such

138
00:06:50,056 --> 00:06:52,016
to do the most awesome

139
00:06:52,016 --> 00:06:54,656
and be a compiler hacker, you

140
00:06:54,656 --> 00:06:56,186
and find ways to contribute.

141
00:06:56,486 --> 00:06:58,676
And there's other ways.

142
00:06:58,976 --> 00:07:01,026
You know, you can contribute

143
00:06:58,976 --> 00:07:01,026
You know, you can contribute

144
00:07:01,026 --> 00:07:02,516
to take the Swift language?

145
00:07:04,476 --> 00:07:07,716
Now, how we run the

146
00:07:08,426 --> 00:07:10,536
It's meant to be

147
00:07:11,116 --> 00:07:14,916
We want it to be a very

148
00:07:15,106 --> 00:07:18,786
and free, and everyone

149
00:07:19,066 --> 00:07:20,376
in driving the language forward.

150
00:07:20,626 --> 00:07:23,686
And they can see the rationale

151
00:07:24,286 --> 00:07:25,236
This is really important.

152
00:07:25,646 --> 00:07:28,196
And so all changes to language,

153
00:07:28,196 --> 00:07:31,096
who works at Apple or

154
00:07:31,096 --> 00:07:33,706
who is writing apps and you have

155
00:07:33,816 --> 00:07:36,316
to change Swift, it works

156
00:07:36,316 --> 00:07:38,586
And I think this is

157
00:07:39,116 --> 00:07:43,026
And it also means that non-Apple

158
00:07:43,026 --> 00:07:45,036
you know, to commit

159
00:07:45,036 --> 00:07:46,346
and all those repositories.

160
00:07:46,716 --> 00:07:48,996
And so we really wanted

161
00:07:49,336 --> 00:07:50,426
to drive Swift forward.

162
00:07:50,906 --> 00:07:53,506
Third, and I think this

163
00:07:53,886 --> 00:07:56,186
we have a very strong code

164
00:07:56,466 --> 00:07:59,576
and we think it's very important

165
00:07:59,576 --> 00:08:02,546
without feeling that they are

166
00:07:59,576 --> 00:08:02,546
without feeling that they are

167
00:08:02,546 --> 00:08:05,626
in an unprofessional manner, and

168
00:08:06,956 --> 00:08:11,836
And last, the project is under a

169
00:08:12,326 --> 00:08:14,286
This is really important,

170
00:08:14,286 --> 00:08:17,066
in ways that Apple

171
00:08:17,296 --> 00:08:20,166
This is one of the goals

172
00:08:20,166 --> 00:08:23,886
We really want everyone to be

173
00:08:24,456 --> 00:08:26,466
And there's strong

174
00:08:26,636 --> 00:08:27,896
for the community as well.

175
00:08:28,146 --> 00:08:29,726
So that's why we

176
00:08:31,196 --> 00:08:35,126
Now, you can follow along

177
00:08:35,686 --> 00:08:37,666
Trunk Development for

178
00:08:37,666 --> 00:08:38,706
You can check out the sources.

179
00:08:38,706 --> 00:08:39,606
You can build the compiler.

180
00:08:40,635 --> 00:08:43,206
We also provide downloadable

181
00:08:43,206 --> 00:08:46,186
that you can download from

182
00:08:46,186 --> 00:08:48,476
in Xcode, or you can

183
00:08:48,476 --> 00:08:50,386
And as other platforms

184
00:08:50,386 --> 00:08:52,786
we will provide those

185
00:08:53,686 --> 00:08:54,476
What's really awesome

186
00:08:54,476 --> 00:08:57,076
in an Xcode 8 is we now have

187
00:08:57,076 --> 00:08:58,836
with these downloadable

188
00:08:59,186 --> 00:09:01,656
which is a really

189
00:08:59,186 --> 00:09:01,656
which is a really

190
00:09:01,656 --> 00:09:03,356
with the language as it evolves.

191
00:09:03,726 --> 00:09:06,066
Also, you no longer have to

192
00:09:06,066 --> 00:09:07,226
to use one of these tool chains,

193
00:09:07,226 --> 00:09:10,976
so this really creates a really

194
00:09:10,976 --> 00:09:12,886
out the latest version of Swift.

195
00:09:13,436 --> 00:09:17,266
Now, all the development

196
00:09:17,916 --> 00:09:20,036
and it's not just one project.

197
00:09:20,036 --> 00:09:22,616
It's actually a family

198
00:09:22,616 --> 00:09:25,176
and you can find a description

199
00:09:25,176 --> 00:09:27,816
but they can roughly

200
00:09:27,816 --> 00:09:31,816
into these three

201
00:09:31,816 --> 00:09:34,956
and its evolution

202
00:09:35,496 --> 00:09:36,786
and a set of Core Libraries.

203
00:09:37,116 --> 00:09:38,216
Let me talk about each.

204
00:09:39,816 --> 00:09:41,966
Now, the Package

205
00:09:42,126 --> 00:09:43,716
when Swift went Open Source.

206
00:09:44,356 --> 00:09:47,286
It's still very early but

207
00:09:47,286 --> 00:09:50,906
There's over 1,000

208
00:09:51,156 --> 00:09:52,626
that use the Package Manager.

209
00:09:52,966 --> 00:09:54,406
So what is this?

210
00:09:55,446 --> 00:09:58,836
It's a cross-platform, Package

211
00:09:58,836 --> 00:10:00,846
packages for Linux, for 0S 10.

212
00:09:58,836 --> 00:10:00,846
packages for Linux, for 0S 10.

213
00:10:01,216 --> 00:10:04,436
The idea is that we want to

214
00:10:04,436 --> 00:10:07,216
to build, a software

215
00:10:07,216 --> 00:10:09,196
And we think this is really

216
00:10:09,196 --> 00:10:11,656
to other contexts, like

217
00:10:13,526 --> 00:10:15,866
It's designed for very

218
00:10:15,866 --> 00:10:19,216
It's like easy to get

219
00:10:19,626 --> 00:10:21,436
easy to articulate

220
00:10:21,606 --> 00:10:24,196
It's just -- the idea is

221
00:10:24,246 --> 00:10:30,276
And we think the Package Manager

222
00:10:30,326 --> 00:10:33,166
and its long-term success

223
00:10:33,166 --> 00:10:34,916
to delivering fantastic

224
00:10:34,916 --> 00:10:37,646
of the Package Manager

225
00:10:38,186 --> 00:10:43,286
Let's talk about

226
00:10:43,606 --> 00:10:44,236
So what are these?

227
00:10:45,666 --> 00:10:48,656
There's a lot of

228
00:10:48,656 --> 00:10:51,646
in macOS, TD OS, and WatchOS.

229
00:10:52,236 --> 00:10:55,336
A lot of these are like part

230
00:10:55,336 --> 00:10:56,576
that we think should

231
00:10:56,576 --> 00:10:58,356
for everyone to get work done.

232
00:10:59,226 --> 00:11:02,076
And so the Core Libraries

233
00:10:59,226 --> 00:11:02,076
And so the Core Libraries

234
00:11:02,196 --> 00:11:05,236
implementations that aren't

235
00:11:05,706 --> 00:11:09,546
of some of these core APIs on

236
00:11:09,546 --> 00:11:13,836
that Swift will be ported to, so

237
00:11:13,836 --> 00:11:16,406
like XE tests, so you

238
00:11:17,076 --> 00:11:20,236
a subset of foundation that

239
00:11:20,236 --> 00:11:23,756
and not really tied to Cocoa,

240
00:11:23,756 --> 00:11:26,766
of libdispatch so you can use

241
00:11:27,206 --> 00:11:29,896
Now, the work here is

242
00:11:29,896 --> 00:11:31,216
It launched with

243
00:11:31,366 --> 00:11:32,666
but there's a lot

244
00:11:33,016 --> 00:11:36,456
So for foundation on Linux,

245
00:11:36,456 --> 00:11:41,736
like manipulating URLs, dates,

246
00:11:41,956 --> 00:11:45,936
And we expect this to mature

247
00:11:45,936 --> 00:11:49,686
over time as the community

248
00:11:50,266 --> 00:11:55,036
Now, let's talk about

249
00:11:55,886 --> 00:11:56,756
Now, Chris will talk a lot

250
00:11:56,756 --> 00:11:58,496
about specific changes

251
00:11:58,796 --> 00:12:00,486
I want to talk about

252
00:11:58,796 --> 00:12:00,486
I want to talk about

253
00:12:00,716 --> 00:12:01,976
that creates those changes.

254
00:12:02,616 --> 00:12:05,376
This happens out on the

255
00:12:06,396 --> 00:12:10,156
So let's say you have an idea

256
00:12:10,156 --> 00:12:11,996
Like you think there's

257
00:12:11,996 --> 00:12:14,896
and some problem there

258
00:12:15,256 --> 00:12:16,186
of doing core development.

259
00:12:16,186 --> 00:12:18,346
Maybe it was a good design

260
00:12:18,346 --> 00:12:19,846
but it should be revisited.

261
00:12:20,406 --> 00:12:23,876
Or maybe there's something

262
00:12:24,256 --> 00:12:25,996
that would enable

263
00:12:25,996 --> 00:12:27,876
of opportunities for developers.

264
00:12:28,246 --> 00:12:28,826
Doesn't matter.

265
00:12:29,326 --> 00:12:31,356
You start the idea

266
00:12:31,456 --> 00:12:34,626
on a mailing list, kicking it

267
00:12:34,676 --> 00:12:37,096
who have similar

268
00:12:37,126 --> 00:12:38,846
you know, is this a good idea?

269
00:12:39,286 --> 00:12:40,736
What are the pros and cons here?

270
00:12:41,006 --> 00:12:43,436
And once there's

271
00:12:44,256 --> 00:12:46,096
it gets turned into a proposal.

272
00:12:46,726 --> 00:12:48,626
This is just essentially

273
00:12:49,116 --> 00:12:52,356
written in markdown, which

274
00:12:52,356 --> 00:12:54,196
right in a web browser

275
00:12:54,896 --> 00:12:57,896
And here's an example of

276
00:12:58,786 --> 00:13:01,926
and it gets submitted for

277
00:12:58,786 --> 00:13:01,926
and it gets submitted for

278
00:13:02,776 --> 00:13:05,626
Now, you notice in the bottom

279
00:13:05,626 --> 00:13:07,766
number, it says SE0046.

280
00:13:08,766 --> 00:13:11,496
Each proposal is numbered,

281
00:13:11,496 --> 00:13:13,376
you know, the actual

282
00:13:13,376 --> 00:13:15,456
that created change in Swift.

283
00:13:15,826 --> 00:13:19,086
Chris will refer to these

284
00:13:19,086 --> 00:13:21,316
of the talk when he talks about

285
00:13:22,356 --> 00:13:26,896
And these proposals are the way

286
00:13:26,896 --> 00:13:29,146
to the language,

287
00:13:29,146 --> 00:13:31,746
of why we're doing

288
00:13:32,836 --> 00:13:36,656
what the specific change

289
00:13:37,056 --> 00:13:38,816
and once the proposal

290
00:13:39,006 --> 00:13:40,826
the rationale for accepting it.

291
00:13:41,916 --> 00:13:45,356
So a formal review for

292
00:13:45,356 --> 00:13:47,556
by accepting it into

293
00:13:47,856 --> 00:13:51,356
and the review is really just

294
00:13:51,356 --> 00:13:53,686
It's on the mailing list,

295
00:13:53,976 --> 00:13:55,476
to the specific proposal

296
00:13:55,476 --> 00:13:56,886
not just some abstract idea.

297
00:13:56,966 --> 00:14:01,126
And after some period of

298
00:13:56,966 --> 00:14:01,126
And after some period of

299
00:14:01,126 --> 00:14:03,186
which is a small set of

300
00:14:03,186 --> 00:14:05,546
to shepherd the project going

301
00:14:05,546 --> 00:14:08,926
of the community, sees, you

302
00:14:09,376 --> 00:14:13,456
and arbitrates a decision based

303
00:14:13,836 --> 00:14:15,016
And they look at a

304
00:14:15,016 --> 00:14:17,926
How does the current

305
00:14:18,346 --> 00:14:19,136
So does it make sense?

306
00:14:19,136 --> 00:14:21,166
So sometimes proposals are

307
00:14:21,166 --> 00:14:24,376
the way it currently is, this

308
00:14:24,376 --> 00:14:27,246
so go back and consider

309
00:14:27,606 --> 00:14:29,426
Or this will just never

310
00:14:29,426 --> 00:14:32,916
But also the proposals

311
00:14:33,406 --> 00:14:34,616
sometimes with refinements.

312
00:14:34,896 --> 00:14:37,046
And any time it's

313
00:14:37,806 --> 00:14:39,156
a rationale is documented.

314
00:14:39,156 --> 00:14:41,036
So everyone can look

315
00:14:41,276 --> 00:14:44,076
of the language evolution and

316
00:14:44,076 --> 00:14:47,796
and why it was proposed and why

317
00:14:47,796 --> 00:14:52,186
And you can go and see all

318
00:14:52,186 --> 00:14:54,336
to the Swift-evolution

319
00:14:54,646 --> 00:14:57,116
And this is the process

320
00:14:57,116 --> 00:14:59,446
a process driven by everyone.

321
00:14:59,896 --> 00:15:02,316
And to talk more about

322
00:14:59,896 --> 00:15:02,316
And to talk more about

323
00:15:02,316 --> 00:15:03,976
I'm going to hand

324
00:15:04,516 --> 00:15:09,556
[ Applause ]

325
00:15:10,056 --> 00:15:12,276
&gt;&gt; Thank you, Ted.

326
00:15:12,276 --> 00:15:13,836
Well, with everything

327
00:15:13,836 --> 00:15:15,286
unfortunately I didn't have time

328
00:15:15,286 --> 00:15:17,166
to prepare notes

329
00:15:17,166 --> 00:15:19,086
But I printed out

330
00:15:19,086 --> 00:15:20,166
and I thought I'd

331
00:15:20,916 --> 00:15:21,506
Sound good?

332
00:15:23,466 --> 00:15:23,956
[Laughter] Maybe not.

333
00:15:25,406 --> 00:15:26,556
So what are we trying

334
00:15:27,476 --> 00:15:29,026
We said before that we want

335
00:15:29,026 --> 00:15:30,526
to make the core

336
00:15:30,526 --> 00:15:32,246
And that isn't just

337
00:15:32,366 --> 00:15:34,946
That's also the standard

338
00:15:34,946 --> 00:15:37,066
of working with major

339
00:15:37,446 --> 00:15:39,096
and also working with our tools.

340
00:15:39,096 --> 00:15:41,156
And so we'll go through and talk

341
00:15:42,216 --> 00:15:44,936
Now, our number one goal for

342
00:15:45,216 --> 00:15:46,646
And that's a big goal.

343
00:15:46,706 --> 00:15:49,496
That means we want to look at

344
00:15:49,496 --> 00:15:51,396
in your applications

345
00:15:51,396 --> 00:15:52,866
that when Swift 3 comes out,

346
00:15:52,866 --> 00:15:54,906
that's the right

347
00:15:55,466 --> 00:15:57,616
And this is actually

348
00:15:57,616 --> 00:16:01,296
because this isn't just a

349
00:15:57,616 --> 00:16:01,296
because this isn't just a

350
00:16:01,296 --> 00:16:03,796
or do we use colons,

351
00:16:04,106 --> 00:16:07,276
It's also about real key APIs

352
00:16:07,276 --> 00:16:09,416
to get Swift 3 into that

353
00:16:09,416 --> 00:16:11,356
with it forever and

354
00:16:11,356 --> 00:16:12,606
out from underneath

355
00:16:13,666 --> 00:16:16,246
Now, there's a number of

356
00:16:16,246 --> 00:16:17,746
one of which is that we're

357
00:16:17,746 --> 00:16:19,506
into the Swift-evolution

358
00:16:19,506 --> 00:16:22,146
that Ted discussed before, so

359
00:16:22,146 --> 00:16:25,876
in after Swift 3 really think

360
00:16:26,856 --> 00:16:30,236
Now, I think the biggest aspect,

361
00:16:30,236 --> 00:16:31,536
that affects the

362
00:16:31,536 --> 00:16:33,386
on a daily basis is the APIs.

363
00:16:33,386 --> 00:16:36,316
And so let's dive

364
00:16:36,316 --> 00:16:38,066
and just get a quick

365
00:16:39,166 --> 00:16:43,386
So APIs are an essential

366
00:16:43,386 --> 00:16:46,916
about building its platform in

367
00:16:46,916 --> 00:16:48,526
that you all work

368
00:16:48,526 --> 00:16:49,936
on to make great applications.

369
00:16:50,476 --> 00:16:53,146
And the naming rules, and

370
00:16:53,146 --> 00:16:55,596
into that shape them in

371
00:16:56,446 --> 00:16:57,826
And so with Swift 3, we looked

372
00:16:57,826 --> 00:17:00,676
at what is the best way

373
00:16:57,826 --> 00:17:00,676
at what is the best way

374
00:17:00,866 --> 00:17:02,736
Do we want full verbosity?

375
00:17:02,826 --> 00:17:06,146
Do we want full terseness and

376
00:17:06,756 --> 00:17:08,506
And what we found

377
00:17:08,506 --> 00:17:10,226
that really matters is clarity.

378
00:17:10,396 --> 00:17:11,955
And clarity at the point of use.

379
00:17:12,286 --> 00:17:13,695
And so we've really optimized

380
00:17:13,695 --> 00:17:15,996
for capturing the essential

381
00:17:16,175 --> 00:17:18,616
without encoding lots of

382
00:17:19,406 --> 00:17:22,276
Now, let's dive into a couple of

383
00:17:22,276 --> 00:17:23,806
of the thought process

384
00:17:23,806 --> 00:17:25,236
for what this means in practice.

385
00:17:26,026 --> 00:17:28,656
So here are a couple

386
00:17:29,576 --> 00:17:31,956
We will start with array

387
00:17:32,406 --> 00:17:34,746
With Swift 3, this

388
00:17:35,406 --> 00:17:38,896
The verb append, the

389
00:17:39,386 --> 00:17:42,126
Contents of is something

390
00:17:42,126 --> 00:17:43,286
of the parameter you pass in.

391
00:17:43,536 --> 00:17:45,706
Now it's an argument

392
00:17:46,086 --> 00:17:47,756
or gets used at the call site.

393
00:17:48,066 --> 00:17:49,626
This makes it a lot more

394
00:17:50,506 --> 00:17:54,016
Inserted index, this was

395
00:17:54,276 --> 00:17:57,706
but that index didn't add

396
00:17:57,896 --> 00:17:59,806
It was just repeating

397
00:17:59,806 --> 00:18:01,126
that would be better

398
00:17:59,806 --> 00:18:01,126
that would be better

399
00:18:02,276 --> 00:18:05,266
In foundation, let's

400
00:18:05,646 --> 00:18:09,236
It has a file URL method or

401
00:18:09,236 --> 00:18:11,056
at it, it's not clear

402
00:18:11,296 --> 00:18:13,946
and so now it starts with

403
00:18:14,726 --> 00:18:17,886
Another simple example is URL

404
00:18:18,366 --> 00:18:20,736
it just drops the

405
00:18:21,046 --> 00:18:22,066
because it's not necessary.

406
00:18:22,796 --> 00:18:24,956
And so there's a ton of

407
00:18:25,436 --> 00:18:27,456
that all kind of

408
00:18:27,786 --> 00:18:29,616
and there's a lot more

409
00:18:29,616 --> 00:18:31,056
up right after this at 10:00.

410
00:18:31,946 --> 00:18:35,136
Now, let's talk about

411
00:18:35,136 --> 00:18:36,566
and how they work in Swift.

412
00:18:36,566 --> 00:18:40,416
Because again, that's a key

413
00:18:40,416 --> 00:18:42,646
with look and how you

414
00:18:43,576 --> 00:18:45,106
We've done a number of

415
00:18:45,106 --> 00:18:46,946
so one we call import is member.

416
00:18:47,576 --> 00:18:49,926
Here's a typical core

417
00:18:50,796 --> 00:18:53,156
In Swift 2 it would come in as

418
00:18:53,996 --> 00:18:57,026
Well, this works, but this isn't

419
00:18:57,026 --> 00:18:59,796
with as Swift developers, and so

420
00:18:59,796 --> 00:19:04,136
that allows the API author to

421
00:18:59,796 --> 00:19:04,136
that allows the API author to

422
00:19:04,136 --> 00:19:06,506
that wraps an attribute

423
00:19:06,506 --> 00:19:08,836
as a method providing the

424
00:19:08,836 --> 00:19:10,856
that you have seen in core

425
00:19:11,326 --> 00:19:13,276
This is something you

426
00:19:15,026 --> 00:19:17,046
Another is generics.

427
00:19:17,136 --> 00:19:19,616
We introduced lightweight

428
00:19:19,616 --> 00:19:23,046
and we used them to import

429
00:19:23,216 --> 00:19:25,086
But a number of frameworks

430
00:19:25,086 --> 00:19:27,436
at Apple adopted lightweight

431
00:19:27,436 --> 00:19:29,636
for example, auto

432
00:19:29,756 --> 00:19:31,996
With Swift 3 we are now able

433
00:19:31,996 --> 00:19:37,126
to import the fully general

434
00:19:37,126 --> 00:19:40,166
as generic types, which

435
00:19:40,166 --> 00:19:42,766
and redundant coding of that

436
00:19:42,766 --> 00:19:43,166
go away.

437
00:19:44,376 --> 00:19:45,316
Let's talk --

438
00:19:46,516 --> 00:19:51,616
[ Applause ]

439
00:19:52,116 --> 00:19:53,286
Let's talk about constants.

440
00:19:53,796 --> 00:19:55,236
A common pattern

441
00:19:55,236 --> 00:19:58,706
of Cocoa APIs are

442
00:19:59,276 --> 00:20:02,226
And we do this because

443
00:19:59,276 --> 00:20:02,226
And we do this because

444
00:20:02,226 --> 00:20:06,456
that we could find to encode an

445
00:20:06,456 --> 00:20:07,956
but there are a lot of

446
00:20:08,836 --> 00:20:12,126
These "enums," in quotes,

447
00:20:12,556 --> 00:20:14,936
which then get imported

448
00:20:15,166 --> 00:20:16,826
and they get used with

449
00:20:17,156 --> 00:20:18,906
This is really unfortunate

450
00:20:18,906 --> 00:20:21,456
one of which is it's

451
00:20:21,556 --> 00:20:23,086
because you can pass

452
00:20:23,086 --> 00:20:23,846
and it won't work.

453
00:20:23,936 --> 00:20:27,426
It's also not great because

454
00:20:27,426 --> 00:20:31,126
and it just doesn't feel

455
00:20:31,396 --> 00:20:34,186
very good direction

456
00:20:35,026 --> 00:20:36,636
With Swift 3 we solved this.

457
00:20:37,016 --> 00:20:40,196
So now an API author can

458
00:20:40,276 --> 00:20:42,786
to their type def and now

459
00:20:42,786 --> 00:20:44,746
of this become strongly

460
00:20:45,116 --> 00:20:46,906
So you'll find with

461
00:20:46,906 --> 00:20:50,706
a commonly used one, that these

462
00:20:50,966 --> 00:20:53,826
user defaults in this

463
00:20:53,826 --> 00:20:55,146
with proper dot syntax.

464
00:20:56,086 --> 00:20:58,786
And the great thing about this

465
00:20:59,516 --> 00:21:04,586
[ Applause ]

466
00:20:59,516 --> 00:21:04,586
[ Applause ]

467
00:21:05,086 --> 00:21:05,586
So there are a ton

468
00:21:05,586 --> 00:21:07,816
of improvements throughout

469
00:21:07,816 --> 00:21:09,836
and other features that you

470
00:21:10,156 --> 00:21:11,786
There are a number of

471
00:21:12,766 --> 00:21:14,756
Let's dive into the

472
00:21:15,996 --> 00:21:19,496
So with these changes

473
00:21:19,496 --> 00:21:20,836
and looked at parameter labels.

474
00:21:20,986 --> 00:21:24,246
And as a quick refresher, if you

475
00:21:24,666 --> 00:21:27,496
you'd call it and

476
00:21:27,496 --> 00:21:28,956
out of the three parameters.

477
00:21:28,956 --> 00:21:29,546
Why is that?

478
00:21:30,186 --> 00:21:34,176
Well, the answer is that we were

479
00:21:34,176 --> 00:21:36,656
and design patterns and

480
00:21:36,656 --> 00:21:38,666
with Cocoa and the Cocoa

481
00:21:39,236 --> 00:21:41,666
But of course we've just

482
00:21:41,666 --> 00:21:44,786
works in Swift, and so now we're

483
00:21:44,786 --> 00:21:45,686
to all the parameters,

484
00:21:46,016 --> 00:21:48,626
which makes the language a lot

485
00:21:49,516 --> 00:21:54,266
[ Applause ]

486
00:21:54,766 --> 00:21:55,896
Let's talk about generics.

487
00:21:56,306 --> 00:21:58,656
So the Swift generic

488
00:21:58,656 --> 00:22:00,086
is really beautiful

489
00:21:58,656 --> 00:22:00,086
is really beautiful

490
00:22:00,086 --> 00:22:04,086
It allows you to capture the key

491
00:22:04,366 --> 00:22:06,366
in a very concise

492
00:22:07,506 --> 00:22:08,736
Unfortunately, though,

493
00:22:08,736 --> 00:22:10,286
into more advanced use cases,

494
00:22:10,286 --> 00:22:11,866
you start adding

495
00:22:12,206 --> 00:22:14,926
and the generic constraints are

496
00:22:14,926 --> 00:22:17,616
of the function in this

497
00:22:17,616 --> 00:22:20,676
down the primary signature

498
00:22:20,676 --> 00:22:22,066
and it makes it a lot

499
00:22:22,636 --> 00:22:25,116
With Swift 3, we've extended

500
00:22:25,446 --> 00:22:27,646
so now your signature is

501
00:22:27,646 --> 00:22:29,976
to see it and the constraints

502
00:22:30,516 --> 00:22:34,586
[ Applause ]

503
00:22:35,086 --> 00:22:36,406
Let's talk about unused results.

504
00:22:36,986 --> 00:22:38,056
So here's a simple function.

505
00:22:38,056 --> 00:22:39,716
It just adds one to a

506
00:22:40,346 --> 00:22:42,136
With Swift 2, you

507
00:22:42,136 --> 00:22:44,376
about this code even though

508
00:22:44,866 --> 00:22:46,636
Maybe you forgot to

509
00:22:46,636 --> 00:22:48,936
Maybe you're just calling it

510
00:22:49,346 --> 00:22:53,746
Right? So with Swift 3 you

511
00:22:53,746 --> 00:22:54,326
It's safe.

512
00:22:54,366 --> 00:22:54,896
This is great.

513
00:22:55,676 --> 00:22:59,226
And this is also really good

514
00:22:59,226 --> 00:23:00,896
for more complicated

515
00:22:59,226 --> 00:23:00,896
for more complicated

516
00:23:01,486 --> 00:23:03,476
So not all functions

517
00:23:03,476 --> 00:23:04,476
in the functional sense.

518
00:23:04,516 --> 00:23:06,326
Some of them actually

519
00:23:06,326 --> 00:23:07,306
We live in the real world.

520
00:23:08,186 --> 00:23:10,816
And so you may be wondering,

521
00:23:10,816 --> 00:23:12,946
maybe I'm calling this

522
00:23:13,736 --> 00:23:16,416
Well, that's okay, because you

523
00:23:16,826 --> 00:23:19,946
which tells the compiler

524
00:23:19,946 --> 00:23:22,556
to maintain your code that

525
00:23:22,556 --> 00:23:23,686
that this returned something

526
00:23:23,896 --> 00:23:26,856
and you explicitly don't

527
00:23:27,296 --> 00:23:30,076
Now, not all functions

528
00:23:30,076 --> 00:23:32,186
Some functions, which are

529
00:23:32,696 --> 00:23:35,156
have a side effect as

530
00:23:35,296 --> 00:23:37,276
and so the return value

531
00:23:37,276 --> 00:23:38,566
that often you don't care about.

532
00:23:38,826 --> 00:23:40,236
And so in those exceptional

533
00:23:40,236 --> 00:23:42,226
you can actually use an

534
00:23:42,576 --> 00:23:44,686
I know that this return

535
00:23:44,806 --> 00:23:47,216
never produce a warning

536
00:23:47,516 --> 00:23:48,456
which is a nice system.

537
00:23:49,546 --> 00:23:55,586
So let's talk about the most

538
00:23:56,046 --> 00:23:57,416
features that go away.

539
00:23:57,416 --> 00:23:59,996
And you may be saying why

540
00:24:00,556 --> 00:24:03,026
But we really want Swift

541
00:24:03,376 --> 00:24:06,256
And Swift 3 is the sum

542
00:24:06,256 --> 00:24:07,796
and many of the pieces were put

543
00:24:08,156 --> 00:24:11,196
into Swift before we really knew

544
00:24:11,196 --> 00:24:13,126
into and where we

545
00:24:13,426 --> 00:24:16,036
And so what we did was we went

546
00:24:16,036 --> 00:24:17,086
of the features in the language,

547
00:24:17,086 --> 00:24:18,286
no matter when they

548
00:24:18,286 --> 00:24:19,566
and asked a basic question.

549
00:24:20,526 --> 00:24:24,186
If this feature were not already

550
00:24:25,626 --> 00:24:27,136
And for some features,

551
00:24:27,246 --> 00:24:28,276
and so we're taking them away.

552
00:24:29,016 --> 00:24:31,266
And this is a great way,

553
00:24:31,266 --> 00:24:33,116
because it simplifies the

554
00:24:34,006 --> 00:24:38,776
Now, some of these I realize may

555
00:24:39,676 --> 00:24:41,656
The great thing about

556
00:24:41,656 --> 00:24:43,216
that we debated these

557
00:24:43,636 --> 00:24:47,226
Each of these has a proposal

558
00:24:47,576 --> 00:24:49,906
and if you really want to go

559
00:24:49,906 --> 00:24:52,186
of emails on each of these,

560
00:24:52,226 --> 00:24:54,386
to the mailing list archive

561
00:24:54,896 --> 00:24:56,686
I think that pretty

562
00:24:56,686 --> 00:24:58,836
of every perspective was

563
00:24:58,836 --> 00:24:59,946
on these issues.

564
00:25:01,106 --> 00:25:04,076
So now there are a bunch

565
00:25:04,076 --> 00:25:06,266
to language as well, and I

566
00:25:06,266 --> 00:25:08,516
of them, but we have things

567
00:25:08,826 --> 00:25:12,726
We have type safe selector

568
00:25:13,126 --> 00:25:15,426
We have new build

569
00:25:15,426 --> 00:25:17,256
to power matching, a

570
00:25:17,446 --> 00:25:19,306
and you can read them about

571
00:25:19,306 --> 00:25:21,686
or in the extra release notes.

572
00:25:22,036 --> 00:25:24,676
Now another aspect of the

573
00:25:24,676 --> 00:25:26,726
about syntax, right?

574
00:25:27,196 --> 00:25:30,386
And I think we all love,

575
00:25:30,386 --> 00:25:33,186
the basic syntactic

576
00:25:33,316 --> 00:25:35,276
I think it's one of the things

577
00:25:35,276 --> 00:25:37,896
because it feels familiar and

578
00:25:38,526 --> 00:25:40,146
But unfortunately,

579
00:25:40,146 --> 00:25:45,766
in Swift were considered

580
00:25:45,766 --> 00:25:47,826
of the syntactic

581
00:25:48,426 --> 00:25:49,176
and so we went back,

582
00:25:49,176 --> 00:25:51,586
and repainted everything

583
00:25:51,586 --> 00:25:55,506
of your favorite color

584
00:25:55,506 --> 00:25:58,626
of the weird corner cases,

585
00:25:58,626 --> 00:26:01,116
if they are inconsistent with

586
00:25:58,626 --> 00:26:01,116
if they are inconsistent with

587
00:26:01,116 --> 00:26:04,466
it makes them even harder to

588
00:26:04,466 --> 00:26:06,036
in the Swift because

589
00:26:06,566 --> 00:26:09,076
And so we went back and

590
00:26:09,076 --> 00:26:10,486
and we really want

591
00:26:10,486 --> 00:26:11,686
so it's right for the long time.

592
00:26:12,666 --> 00:26:15,176
So that's a brief overview

593
00:26:15,176 --> 00:26:16,646
I want to dive a little

594
00:26:16,646 --> 00:26:17,546
about the type system.

595
00:26:18,676 --> 00:26:20,556
First of all, what

596
00:26:21,126 --> 00:26:23,926
The type system in Swift works

597
00:26:24,526 --> 00:26:27,116
to define how types work,

598
00:26:27,116 --> 00:26:28,886
and the compiler

599
00:26:28,886 --> 00:26:33,416
to prove your code is correct

600
00:26:33,676 --> 00:26:36,336
as well as infer things that

601
00:26:36,336 --> 00:26:37,606
because it's supposed

602
00:26:37,666 --> 00:26:40,586
For example, what

603
00:26:40,586 --> 00:26:42,706
Swift 3, we wanted to

604
00:26:42,706 --> 00:26:44,626
make it more consistent,

605
00:26:44,626 --> 00:26:47,636
to define away common types

606
00:26:47,636 --> 00:26:49,646
into that were surprising

607
00:26:50,276 --> 00:26:53,126
So let's talk about a

608
00:26:53,126 --> 00:26:54,986
First is unsafe pointer, right?

609
00:26:56,096 --> 00:26:58,936
So I don't know if you realize

610
00:26:59,116 --> 00:27:01,836
in Swift 2 assign nil

611
00:26:59,116 --> 00:27:01,836
in Swift 2 assign nil

612
00:27:02,026 --> 00:27:03,946
You can test it directly

613
00:27:04,206 --> 00:27:06,006
and you can actually

614
00:27:06,006 --> 00:27:08,316
without having any idea

615
00:27:08,966 --> 00:27:11,416
This is really inconsistent

616
00:27:11,416 --> 00:27:13,886
and it makes unsafe

617
00:27:13,886 --> 00:27:17,726
Well, with Swift 3, now

618
00:27:17,726 --> 00:27:20,416
so you use optionals, just like

619
00:27:20,816 --> 00:27:24,206
You get to use if let to safely

620
00:27:24,526 --> 00:27:27,566
and you even get all the

621
00:27:27,566 --> 00:27:30,636
optionals, which makes

622
00:27:31,796 --> 00:27:33,486
more predictably.

623
00:27:33,486 --> 00:27:35,576
Speaking of optionals,

624
00:27:35,576 --> 00:27:37,966
of the language is

625
00:27:38,966 --> 00:27:41,066
Implicitly unwrapped optionals

626
00:27:41,066 --> 00:27:42,926
of the language, particularly

627
00:27:42,926 --> 00:27:45,236
with two-phase initialization

628
00:27:45,236 --> 00:27:47,206
that hasn't been

629
00:27:47,716 --> 00:27:50,196
Now, here's an overly simplified

630
00:27:50,356 --> 00:27:52,406
implicitly unwrapped

631
00:27:52,726 --> 00:27:54,286
but this applies more

632
00:27:54,286 --> 00:27:55,276
of different types of things.

633
00:27:56,176 --> 00:27:57,246
Now, the basic way

634
00:27:57,246 --> 00:27:59,186
that implicitly unwrapped

635
00:27:59,186 --> 00:28:01,306
I think, was understandable

636
00:27:59,186 --> 00:28:01,306
I think, was understandable

637
00:28:02,166 --> 00:28:06,026
In the case of X, for

638
00:28:06,026 --> 00:28:08,646
to force unwrap that implicitly

639
00:28:08,646 --> 00:28:10,016
to do the addition,

640
00:28:10,516 --> 00:28:12,716
In the case of Y, well,

641
00:28:12,716 --> 00:28:14,106
and so if just kind

642
00:28:14,106 --> 00:28:14,976
down through the code.

643
00:28:15,616 --> 00:28:17,996
Well, this propagation was

644
00:28:18,636 --> 00:28:22,996
It also was surprising because

645
00:28:22,996 --> 00:28:25,466
us to scratch our heads about

646
00:28:25,836 --> 00:28:28,136
Because you don't even know you

647
00:28:28,136 --> 00:28:29,286
optional in many cases.

648
00:28:30,086 --> 00:28:33,296
So here, I have an int and an

649
00:28:33,386 --> 00:28:35,426
Does that implicitly

650
00:28:35,926 --> 00:28:36,836
Do I get an array of any?

651
00:28:36,836 --> 00:28:37,786
Do I get an array of optional?

652
00:28:37,786 --> 00:28:38,626
What is going on?

653
00:28:38,626 --> 00:28:40,496
Well, you never really

654
00:28:40,496 --> 00:28:42,576
to compile your code and you

655
00:28:42,926 --> 00:28:45,496
and this is not the effect

656
00:28:46,846 --> 00:28:49,696
So implicitly unwrapped

657
00:28:49,846 --> 00:28:54,196
as a concept, so we kept it,

658
00:28:54,196 --> 00:28:55,896
to have a new, simpler model.

659
00:28:56,756 --> 00:28:58,196
The model is now very local.

660
00:28:58,336 --> 00:29:00,976
For any use of an

661
00:28:58,336 --> 00:29:00,976
For any use of an

662
00:29:01,756 --> 00:29:04,766
if the value can be used

663
00:29:05,176 --> 00:29:06,176
That's the safe thing.

664
00:29:06,176 --> 00:29:08,016
We don't want to be

665
00:29:08,346 --> 00:29:09,276
where you don't expect it.

666
00:29:10,006 --> 00:29:12,486
However, if the compiler

667
00:29:12,556 --> 00:29:14,386
for type checking

668
00:29:15,206 --> 00:29:17,126
So let's go through

669
00:29:17,826 --> 00:29:20,486
Here, we have X, the

670
00:29:20,486 --> 00:29:22,036
to do the addition,

671
00:29:22,036 --> 00:29:24,406
This is the key aspect of what

672
00:29:24,406 --> 00:29:26,176
optionals different

673
00:29:27,396 --> 00:29:30,856
Why? Well, here the compiler

674
00:29:31,746 --> 00:29:33,936
as an optional, and

675
00:29:33,936 --> 00:29:35,986
of propagating the

676
00:29:35,986 --> 00:29:38,966
maybe deep down through your

677
00:29:39,356 --> 00:29:41,606
it turns into a strong optional,

678
00:29:41,606 --> 00:29:44,876
about it and know

679
00:29:45,066 --> 00:29:46,326
This also leads to more

680
00:29:46,326 --> 00:29:48,786
with the array, because now, of

681
00:29:48,786 --> 00:29:50,826
as a strong optional,

682
00:29:50,936 --> 00:29:54,006
And if you actually

683
00:29:54,206 --> 00:29:55,096
well, that's okay too.

684
00:29:55,096 --> 00:29:56,906
You can explicitly

685
00:29:56,906 --> 00:30:00,126
with the exclamation mark, and

686
00:29:56,906 --> 00:30:00,126
with the exclamation mark, and

687
00:30:00,126 --> 00:30:02,526
about that, and your

688
00:30:03,516 --> 00:30:07,196
So that's my quick tour of some

689
00:30:07,196 --> 00:30:07,966
on with the type system.

690
00:30:08,216 --> 00:30:09,836
Let's talk about the

691
00:30:11,046 --> 00:30:13,756
The big news in the standard

692
00:30:13,756 --> 00:30:15,026
collection indexing model.

693
00:30:16,206 --> 00:30:17,076
And what does that mean?

694
00:30:17,196 --> 00:30:18,766
Well, maybe you've

695
00:30:18,766 --> 00:30:19,376
Maybe not.

696
00:30:19,576 --> 00:30:21,356
There are a lot of great

697
00:30:21,796 --> 00:30:23,416
The difference here

698
00:30:24,106 --> 00:30:26,746
And previously in Swift 2, you'd

699
00:30:26,856 --> 00:30:28,386
like Successor, to

700
00:30:29,156 --> 00:30:32,196
In Swift 3, the model is

701
00:30:32,196 --> 00:30:34,256
instead of the index

702
00:30:34,656 --> 00:30:38,136
the collection moves

703
00:30:39,226 --> 00:30:40,546
And why would we do this?

704
00:30:40,746 --> 00:30:42,666
Well, there's a number of

705
00:30:42,666 --> 00:30:44,566
First of all, we get to

706
00:30:44,566 --> 00:30:46,546
A bunch of types just

707
00:30:47,116 --> 00:30:50,886
Even better, common kinds of

708
00:30:51,356 --> 00:30:52,906
You can now have an

709
00:30:52,906 --> 00:30:56,136
up to the maximum element, which

710
00:30:56,136 --> 00:30:57,536
which nobody expected.

711
00:30:58,096 --> 00:30:59,916
We also think this is going

712
00:30:59,916 --> 00:31:01,666
because we can get rid

713
00:30:59,916 --> 00:31:01,666
because we can get rid

714
00:31:01,666 --> 00:31:02,866
with many common collections.

715
00:31:02,866 --> 00:31:04,526
So we are pretty

716
00:31:05,456 --> 00:31:07,466
Let's talk about numerics.

717
00:31:07,996 --> 00:31:10,776
We have a new floating point

718
00:31:10,776 --> 00:31:13,096
which help define

719
00:31:13,096 --> 00:31:15,326
to write generic algorithms

720
00:31:15,326 --> 00:31:16,356
of FloatingPoint types.

721
00:31:17,266 --> 00:31:20,566
Even better, if you are a

722
00:31:20,696 --> 00:31:23,356
and you understand IEEE

723
00:31:23,756 --> 00:31:26,866
and not most people,

724
00:31:26,866 --> 00:31:30,096
of great low level operations,

725
00:31:30,096 --> 00:31:33,546
out of the whatever, some really

726
00:31:35,566 --> 00:31:37,116
[Laughter] So I don't really

727
00:31:37,116 --> 00:31:38,346
I think it's really

728
00:31:38,346 --> 00:31:40,156
and people who do

729
00:31:40,576 --> 00:31:44,226
I do understand things like

730
00:31:44,966 --> 00:31:48,126
And in Swift 2 we always

731
00:31:48,126 --> 00:31:49,826
and it really irritated me

732
00:31:49,826 --> 00:31:51,906
because it was always the

733
00:31:51,906 --> 00:31:54,526
to cast it, and it always

734
00:31:55,196 --> 00:31:58,236
Well, now, despite all

735
00:31:58,236 --> 00:32:00,496
in addition to all that IEEE

736
00:31:58,236 --> 00:32:00,496
in addition to all that IEEE

737
00:32:00,496 --> 00:32:02,616
like Pi on all the

738
00:32:03,436 --> 00:32:05,376
And Swift often has

739
00:32:05,596 --> 00:32:07,426
And the other great

740
00:32:08,206 --> 00:32:11,176
that if you have typed

741
00:32:11,176 --> 00:32:14,566
here we're returning a CGFloat,

742
00:32:14,566 --> 00:32:17,836
you can use CGFloat.Pi, but

743
00:32:17,836 --> 00:32:20,196
compiler to infer that

744
00:32:20,566 --> 00:32:21,826
It leads to a really

745
00:32:22,516 --> 00:32:27,166
[ Applause ]

746
00:32:27,666 --> 00:32:29,156
So as with the language,

747
00:32:29,156 --> 00:32:30,986
of great improvements

748
00:32:31,376 --> 00:32:33,196
Some of these can really effect

749
00:32:33,196 --> 00:32:35,336
and really improve the

750
00:32:35,336 --> 00:32:39,246
so I highly recommend sticking

751
00:32:39,246 --> 00:32:40,576
which will dive into

752
00:32:40,576 --> 00:32:44,316
So this was a quick tour of the

753
00:32:44,316 --> 00:32:48,436
how Cocoa works in Swift, but

754
00:32:48,596 --> 00:32:49,916
and the tools work together.

755
00:32:50,186 --> 00:32:53,846
So to talk about that, I'd

756
00:32:54,636 --> 00:32:54,846
Ewa?

757
00:32:55,516 --> 00:32:57,806
[ Applause ]

758
00:32:58,306 --> 00:32:59,026
&gt;&gt; Thank you, Chris.

759
00:33:01,556 --> 00:33:02,686
Good morning, everybody.

760
00:33:03,556 --> 00:33:06,896
Let's talk about Tools, and

761
00:33:06,896 --> 00:33:09,356
than what the tools can

762
00:33:09,956 --> 00:33:12,856
As you can see, we've been

763
00:33:13,606 --> 00:33:15,776
but let's talk about

764
00:33:17,536 --> 00:33:20,646
We revamped the dictionary

765
00:33:21,166 --> 00:33:22,756
and we also really focused

766
00:33:22,756 --> 00:33:27,256
on optimizing the string hashing

767
00:33:27,756 --> 00:33:30,006
and we see some really

768
00:33:30,626 --> 00:33:33,216
in our micro benchmarks

769
00:33:33,216 --> 00:33:35,326
that use strings

770
00:33:36,736 --> 00:33:38,676
We also added stack promotion

771
00:33:39,236 --> 00:33:42,966
for class instances array

772
00:33:42,966 --> 00:33:46,676
from the heap, which is really

773
00:33:47,246 --> 00:33:49,016
and we see some really

774
00:33:49,016 --> 00:33:52,126
when our tests take

775
00:33:53,416 --> 00:33:55,986
Also, as I already

776
00:33:55,986 --> 00:33:59,246
on our string hashing

777
00:33:59,246 --> 00:34:04,176
in a dramatic way in our tests

778
00:33:59,246 --> 00:34:04,176
in a dramatic way in our tests

779
00:34:04,176 --> 00:34:08,446
and suffixes of strings, like

780
00:34:10,295 --> 00:34:14,266
Next, I want to talk to you

781
00:34:14,716 --> 00:34:17,025
This is a feature we

782
00:34:17,166 --> 00:34:20,996
but I want to just remind you

783
00:34:21,556 --> 00:34:23,076
When you look at this diagram,

784
00:34:23,596 --> 00:34:26,585
you can see a really

785
00:34:27,295 --> 00:34:29,726
one file in, one file out.

786
00:34:30,366 --> 00:34:34,565
With whole module optimization,

787
00:34:34,565 --> 00:34:37,795
of compilation from one

788
00:34:38,386 --> 00:34:41,456
And this is really great because

789
00:34:41,456 --> 00:34:45,416
information to write new,

790
00:34:45,766 --> 00:34:47,696
and to make your

791
00:34:48,716 --> 00:34:50,636
So we think this

792
00:34:50,835 --> 00:34:54,926
from our internal benchmarking,

793
00:34:54,926 --> 00:34:57,696
on by default for

794
00:34:58,326 --> 00:35:02,826
And existing projects will get

795
00:34:58,326 --> 00:35:02,826
And existing projects will get

796
00:35:03,306 --> 00:35:07,426
as it suggests, we think you

797
00:35:08,336 --> 00:35:11,376
There's a big caveat,

798
00:35:12,226 --> 00:35:14,776
As you look in this

799
00:35:14,946 --> 00:35:17,686
that the compiler is

800
00:35:18,346 --> 00:35:22,066
And as you would expect, your

801
00:35:22,846 --> 00:35:26,766
To offset this cost, we have

802
00:35:27,126 --> 00:35:29,536
and it's caching

803
00:35:30,216 --> 00:35:33,236
to avoid reoptimization

804
00:35:34,116 --> 00:35:35,756
So the result of all this is

805
00:35:35,806 --> 00:35:39,376
that although the first time

806
00:35:39,586 --> 00:35:41,986
it will take a longer

807
00:35:41,986 --> 00:35:44,646
incremental compilations

808
00:35:46,906 --> 00:35:51,866
Moving on to code size,

809
00:35:51,866 --> 00:35:55,666
we did a lot of work

810
00:35:56,106 --> 00:35:57,846
and we have some nice results.

811
00:35:58,536 --> 00:36:02,446
DemoBots is a sample app that

812
00:35:58,536 --> 00:36:02,446
DemoBots is a sample app that

813
00:36:02,446 --> 00:36:05,646
at Apple.com, and

814
00:36:05,646 --> 00:36:09,186
in its application binary

815
00:36:09,926 --> 00:36:14,456
since Swift 2.2, so that's

816
00:36:15,756 --> 00:36:17,906
Well, that's all I have

817
00:36:18,716 --> 00:36:21,496
but there's lots more

818
00:36:23,326 --> 00:36:26,966
So my favorite feature in

819
00:36:27,486 --> 00:36:31,726
navigation of Swift code because

820
00:36:31,726 --> 00:36:33,506
every day in development.

821
00:36:34,166 --> 00:36:36,206
Let's take a look at an example.

822
00:36:36,916 --> 00:36:41,486
So here's an example where we

823
00:36:41,486 --> 00:36:43,216
and then just go Sort.

824
00:36:43,736 --> 00:36:46,756
What do you think happens

825
00:36:47,296 --> 00:36:49,276
and jump to a declaration?

826
00:36:49,856 --> 00:36:54,106
In Xcode 7.1, you take

827
00:36:54,106 --> 00:36:56,406
in a synthesized header

828
00:36:57,056 --> 00:36:58,376
Like what is this?

829
00:36:58,516 --> 00:37:02,206
It's an extension to

830
00:36:58,516 --> 00:37:02,206
It's an extension to

831
00:37:02,426 --> 00:37:05,126
the sort here return self

832
00:37:05,126 --> 00:37:08,936
and the only reference

833
00:37:09,606 --> 00:37:13,276
So it doesn't make very much

834
00:37:13,936 --> 00:37:16,436
So in Xcode 8, we're

835
00:37:17,026 --> 00:37:20,196
and now you see there's

836
00:37:20,446 --> 00:37:25,376
like you would expect and

837
00:37:25,376 --> 00:37:30,136
to sorted in Xcode 8, now

838
00:37:30,896 --> 00:37:35,336
So this really improves how

839
00:37:35,336 --> 00:37:37,716
in Xcode and its readability.

840
00:37:37,716 --> 00:37:38,836
It's much more logical.

841
00:37:40,426 --> 00:37:42,606
Also, in the standard library,

842
00:37:43,116 --> 00:37:45,526
we added groupings

843
00:37:46,026 --> 00:37:49,846
For example, array is

844
00:37:50,756 --> 00:37:54,636
And speaking of the standard

845
00:37:54,636 --> 00:37:56,256
of new documentation for you.

846
00:37:56,986 --> 00:38:02,146
And again, the protocols

847
00:37:56,986 --> 00:38:02,146
And again, the protocols

848
00:38:02,276 --> 00:38:06,146
so you can logically

849
00:38:06,146 --> 00:38:07,716
in the synthesized interfaces.

850
00:38:08,016 --> 00:38:09,306
[ Applause ]

851
00:38:09,306 --> 00:38:09,736
Thank you.

852
00:38:10,516 --> 00:38:13,016
[ Applause ]

853
00:38:13,516 --> 00:38:15,616
I think you're going to

854
00:38:15,916 --> 00:38:20,276
Yeah. So how many people

855
00:38:20,876 --> 00:38:21,936
Probably lots of people.

856
00:38:22,496 --> 00:38:25,556
So, of course, we have the

857
00:38:26,276 --> 00:38:28,626
but this year you get to choose.

858
00:38:28,626 --> 00:38:33,626
You get to choose

859
00:38:34,516 --> 00:38:36,916
[ Applause ]

860
00:38:37,416 --> 00:38:40,206
If you're not quite

861
00:38:41,126 --> 00:38:46,506
Swift 2.3 is just Swift 2.2 that

862
00:38:47,076 --> 00:38:50,346
and we will be accepting

863
00:38:50,716 --> 00:38:55,116
both with Swift 3 and 2.3,

864
00:38:55,116 --> 00:38:57,846
that there are some very key

865
00:38:57,846 --> 00:39:00,976
on Swift 3, like

866
00:38:57,846 --> 00:39:00,976
on Swift 3, like

867
00:39:01,646 --> 00:39:04,136
and the new features as

868
00:39:05,246 --> 00:39:08,726
Swift 2.3 is a really

869
00:39:09,156 --> 00:39:10,586
to allow you the flexibility

870
00:39:10,586 --> 00:39:13,026
to schedule time to

871
00:39:13,476 --> 00:39:14,786
So please schedule it today.

872
00:39:16,026 --> 00:39:20,956
Yeah. If you are

873
00:39:21,146 --> 00:39:22,516
I have a little tip for you.

874
00:39:23,306 --> 00:39:24,566
Here is a sample.

875
00:39:24,566 --> 00:39:28,966
It's a little code snippet from

876
00:39:29,696 --> 00:39:33,826
And when you run the

877
00:39:33,826 --> 00:39:37,376
it will suggest you add an

878
00:39:37,706 --> 00:39:41,106
because the core

879
00:39:41,276 --> 00:39:43,626
with additional ability editing.

880
00:39:44,906 --> 00:39:50,016
Now this code compiles both

881
00:39:50,016 --> 00:39:52,736
but if you have a little

882
00:39:53,116 --> 00:39:55,086
you could conditionally

883
00:39:55,476 --> 00:39:58,786
with a pound FL statement here.

884
00:39:59,166 --> 00:40:01,046
So that's just a little tip.

885
00:39:59,166 --> 00:40:01,046
So that's just a little tip.

886
00:40:02,146 --> 00:40:05,626
And when you are ready, when you

887
00:40:06,736 --> 00:40:08,426
the migrator is there for you.

888
00:40:08,866 --> 00:40:12,256
Just go to Edit, Convert

889
00:40:12,666 --> 00:40:15,296
and you are taken through the

890
00:40:16,376 --> 00:40:17,836
So it's easy.

891
00:40:18,006 --> 00:40:19,976
Convert to Swift 3

892
00:40:21,026 --> 00:40:23,596
So that's all I have

893
00:40:24,706 --> 00:40:29,286
And just to recap,

894
00:40:29,286 --> 00:40:32,256
about how Swift 3

895
00:40:32,256 --> 00:40:33,276
down the fundamentals.

896
00:40:33,956 --> 00:40:37,156
And we're doing all this

897
00:40:37,246 --> 00:40:40,776
as Ted described, and you can

898
00:40:40,776 --> 00:40:41,926
in the evolution process.

899
00:40:42,376 --> 00:40:45,436
And you can see we've got

900
00:40:45,436 --> 00:40:45,846
as well.

901
00:40:46,906 --> 00:40:49,396
So there's lots more

902
00:40:49,396 --> 00:40:50,476
There is just the beginning.

903
00:40:50,886 --> 00:40:52,646
And we have lots of

904
00:40:53,386 --> 00:40:54,636
I want to highlight one,

905
00:40:55,196 --> 00:40:57,606
which is the Swift

906
00:40:58,006 --> 00:41:00,016
It's in this room right

907
00:40:58,006 --> 00:41:00,016
It's in this room right

908
00:41:00,476 --> 00:41:01,626
And have an awesome

909
00:41:01,626 --> 00:41:01,976
Thank you.

910
00:41:02,516 --> 00:41:13,160
[ Applause ]
