1
00:00:07,516 --> 00:00:19,500
[ Music ]

2
00:00:26,516 --> 00:00:29,966
[ Applause ]

3
00:00:30,466 --> 00:00:30,906
&gt;&gt; Thank you.

4
00:00:33,066 --> 00:00:35,016
Welcome. So, I'm Doug Gregor.

5
00:00:35,086 --> 00:00:37,316
I'm here with my

6
00:00:37,646 --> 00:00:38,686
to talk about design.

7
00:00:39,476 --> 00:00:42,386
Because good design

8
00:00:42,946 --> 00:00:46,806
And good API design helps

9
00:00:47,056 --> 00:00:49,026
concise and beautiful in Swift.

10
00:00:49,106 --> 00:00:52,596
And that's every bit as true

11
00:00:52,596 --> 00:00:55,016
for a million other

12
00:00:55,016 --> 00:00:56,696
for yourself inside

13
00:00:57,556 --> 00:00:59,106
Because good design

14
00:01:00,616 --> 00:01:03,236
So, we're going to be talking

15
00:01:03,236 --> 00:01:05,355
about the Swift API

16
00:01:05,726 --> 00:01:08,506
These are new guidelines we're

17
00:01:09,296 --> 00:01:10,956
We're going to talk about

18
00:01:10,956 --> 00:01:11,776
these guidelines.

19
00:01:12,006 --> 00:01:14,356
Talk through some of them

20
00:01:14,356 --> 00:01:16,746
to build great Swift APIs.

21
00:01:18,376 --> 00:01:22,646
Now, then we're going to talk

22
00:01:23,226 --> 00:01:25,216
Which is what we like

23
00:01:25,216 --> 00:01:28,916
of these guidelines to all of

24
00:01:29,316 --> 00:01:30,416
Swift Standard Library.

25
00:01:30,696 --> 00:01:32,966
Cocoa and Cocoa Touch APIs.

26
00:01:32,966 --> 00:01:34,146
Now, this Grand Renaming

27
00:01:34,146 --> 00:01:36,216
to affect a lot of your code.

28
00:01:37,866 --> 00:01:39,066
Pretty much all the

29
00:01:39,066 --> 00:01:41,836
in Swift 2 is going to change

30
00:01:42,556 --> 00:01:42,966
&gt;&gt; Whooh!

31
00:01:43,366 --> 00:01:43,816
&gt;&gt; Yes!

32
00:01:44,516 --> 00:01:46,546
[ Applause ]

33
00:01:47,046 --> 00:01:48,796
So, we're going to talk through

34
00:01:49,816 --> 00:01:50,906
And how to deal with it.

35
00:01:50,906 --> 00:01:53,156
And starting thinking

36
00:01:54,186 --> 00:01:57,306
Finally, we're going to talk

37
00:01:57,306 --> 00:02:01,036
that we have for mapping

38
00:01:57,306 --> 00:02:01,036
that we have for mapping

39
00:02:01,246 --> 00:02:03,416
into beautiful Swift APIs.

40
00:02:03,416 --> 00:02:07,726
That's a whole lot

41
00:02:08,196 --> 00:02:10,265
The biggest question

42
00:02:10,265 --> 00:02:12,836
about the guidelines is why?

43
00:02:14,686 --> 00:02:16,256
Why, after two years of working

44
00:02:16,256 --> 00:02:18,586
with Swift are we changing

45
00:02:18,586 --> 00:02:19,856
with on a daily basis?

46
00:02:21,096 --> 00:02:24,116
And the answer comes down to

47
00:02:24,176 --> 00:02:26,386
Because every programing

48
00:02:26,386 --> 00:02:27,846
distinctive character.

49
00:02:28,186 --> 00:02:30,116
It has its own syntactic feel.

50
00:02:31,366 --> 00:02:33,386
But it's more than the syntax.

51
00:02:33,486 --> 00:02:35,416
It's also the kinds of tradeoffs

52
00:02:35,416 --> 00:02:37,206
that that language

53
00:02:37,366 --> 00:02:40,316
Does it skew toward

54
00:02:40,316 --> 00:02:43,666
Do you care about some

55
00:02:43,716 --> 00:02:46,426
or something that is

56
00:02:46,426 --> 00:02:51,596
You take a look at Swift code,

57
00:02:51,876 --> 00:02:55,806
And you can see Swift

58
00:02:55,806 --> 00:02:56,976
about certain things here.

59
00:02:56,976 --> 00:02:58,736
It uses trailing closures.

60
00:02:59,016 --> 00:03:00,306
So the control flow works

61
00:02:59,016 --> 00:03:00,306
So the control flow works

62
00:03:00,306 --> 00:03:02,696
with your libraries

63
00:03:03,276 --> 00:03:04,816
It has optionals, so you have

64
00:03:04,876 --> 00:03:07,166
to consider the possibility

65
00:03:07,166 --> 00:03:10,986
You can't just ignore that

66
00:03:11,356 --> 00:03:15,106
And so, when you're working

67
00:03:15,776 --> 00:03:18,266
But it's not just the

68
00:03:18,266 --> 00:03:21,316
It's really the APIs you

69
00:03:21,676 --> 00:03:25,246
And these APIs have to meld with

70
00:03:25,556 --> 00:03:28,046
So you get a consistent,

71
00:03:28,046 --> 00:03:29,426
with beautiful Swift code.

72
00:03:31,276 --> 00:03:34,776
Now, these are some Cocoa

73
00:03:35,706 --> 00:03:38,596
And these APIs were

74
00:03:38,596 --> 00:03:40,216
on the coding guidelines

75
00:03:41,336 --> 00:03:42,356
You may have read these before.

76
00:03:42,356 --> 00:03:43,146
I hope you have.

77
00:03:43,666 --> 00:03:46,896
They espouse clarity

78
00:03:47,436 --> 00:03:48,536
in the design of APIs.

79
00:03:48,536 --> 00:03:53,326
And we've been applying these to

80
00:03:53,326 --> 00:03:56,476
over more than a decade, all

81
00:03:56,476 --> 00:03:57,776
and Cocoa Touch platforms.

82
00:03:57,776 --> 00:03:59,246
And these wonderful APIs we use.

83
00:03:59,876 --> 00:04:02,096
Now, these guidelines

84
00:03:59,876 --> 00:04:02,096
Now, these guidelines

85
00:04:02,706 --> 00:04:07,076
for a different language

86
00:04:08,356 --> 00:04:12,026
And so, when you bring all of

87
00:04:12,026 --> 00:04:15,426
for Objective-C into

88
00:04:16,375 --> 00:04:18,796
they seemed a little

89
00:04:18,796 --> 00:04:20,995
They feel a bit not-Swifty.

90
00:04:22,506 --> 00:04:23,496
What's that even mean?

91
00:04:24,236 --> 00:04:25,216
Not Swifty?

92
00:04:26,206 --> 00:04:26,856
You hear it a lot.

93
00:04:27,886 --> 00:04:32,386
But in essence, this is why

94
00:04:32,386 --> 00:04:35,076
as a platform that

95
00:04:35,076 --> 00:04:38,246
of developers are using, is

96
00:04:38,846 --> 00:04:41,646
Because we have experience

97
00:04:41,646 --> 00:04:44,506
to understand what works

98
00:04:45,456 --> 00:04:50,916
And so we set off to design the

99
00:04:50,916 --> 00:04:53,386
to codify what it is

100
00:04:53,386 --> 00:04:57,186
and help everyone build more

101
00:04:57,186 --> 00:04:58,526
within this language

102
00:05:00,476 --> 00:05:03,826
Now, in the lower

103
00:05:04,136 --> 00:05:06,146
That's the Swift

104
00:05:06,146 --> 00:05:09,426
that contains all of the

105
00:05:09,706 --> 00:05:11,716
You'll see these proposal

106
00:05:12,336 --> 00:05:14,006
Again, you can go

107
00:05:14,136 --> 00:05:16,456
look up this proposal number

108
00:05:16,496 --> 00:05:20,066
about that particular change

109
00:05:20,676 --> 00:05:23,196
But for now, let's talk about

110
00:05:24,576 --> 00:05:28,376
The main principles of the

111
00:05:28,376 --> 00:05:31,026
clarity at the point of use.

112
00:05:31,096 --> 00:05:34,146
Where your API shows up

113
00:05:36,306 --> 00:05:38,156
And we love concise code.

114
00:05:38,236 --> 00:05:41,026
But the clarity is the

115
00:05:41,026 --> 00:05:43,326
It's more important

116
00:05:44,486 --> 00:05:47,086
That said, concise code

117
00:05:47,366 --> 00:05:49,426
Swift code does tend

118
00:05:49,476 --> 00:05:50,896
We can feel it when we

119
00:05:50,896 --> 00:05:53,486
And we see it in actual

120
00:05:53,486 --> 00:05:56,876
that have been ported into

121
00:05:56,876 --> 00:06:00,486
But that comes from using

122
00:05:56,876 --> 00:06:00,486
But that comes from using

123
00:06:01,046 --> 00:06:03,046
Let's dive into these

124
00:06:03,046 --> 00:06:04,286
and look at some APIs.

125
00:06:05,216 --> 00:06:07,656
So, we're going to

126
00:06:09,366 --> 00:06:10,966
So why focus on the use sites?

127
00:06:11,236 --> 00:06:13,236
Well, for one, it's just

128
00:06:13,236 --> 00:06:15,046
You're going to write

129
00:06:15,636 --> 00:06:18,506
People will look at that

130
00:06:18,506 --> 00:06:21,036
at the documentation for

131
00:06:21,556 --> 00:06:25,096
But the vast majority of

132
00:06:25,096 --> 00:06:28,646
the number of times it's seen,

133
00:06:28,956 --> 00:06:30,336
of a whole lot of other code.

134
00:06:30,836 --> 00:06:33,716
And when you're in that

135
00:06:33,716 --> 00:06:35,866
of this extra rich

136
00:06:36,496 --> 00:06:40,606
You have the local variables,

137
00:06:41,316 --> 00:06:43,416
You have uses of related APIs.

138
00:06:43,466 --> 00:06:45,266
And so the goal of

139
00:06:45,266 --> 00:06:46,906
to stand up and say, "Hello!

140
00:06:46,906 --> 00:06:48,786
I'm here and I have

141
00:06:49,586 --> 00:06:52,876
The goal of your API is to fit

142
00:06:53,186 --> 00:06:54,896
so that the end result

143
00:06:55,506 --> 00:06:59,696
Now, when you're focusing on

144
00:07:00,456 --> 00:07:02,136
to optimize for bad code.

145
00:07:03,346 --> 00:07:05,906
It is absolutely true that

146
00:07:05,906 --> 00:07:08,476
like A and B and C

147
00:07:08,766 --> 00:07:10,816
And this code is

148
00:07:11,416 --> 00:07:16,666
You can't fix this bad

149
00:07:18,086 --> 00:07:21,756
All you can do is make other

150
00:07:22,986 --> 00:07:25,416
So focus on proper use cases.

151
00:07:25,416 --> 00:07:28,666
Focus on the beautiful code

152
00:07:29,876 --> 00:07:32,296
Let's actually look at

153
00:07:32,576 --> 00:07:34,236
And so we're going

154
00:07:34,436 --> 00:07:37,236
that is removing an

155
00:07:37,706 --> 00:07:40,196
We're going to start by

156
00:07:40,976 --> 00:07:41,836
Sounds good.

157
00:07:41,836 --> 00:07:43,706
But I've made my first mistake.

158
00:07:43,856 --> 00:07:45,546
This is not a use case.

159
00:07:45,616 --> 00:07:47,456
This is just a name

160
00:07:48,006 --> 00:07:51,006
So, let's bring up a use case

161
00:07:51,746 --> 00:07:52,416
Don't ask why.

162
00:07:52,706 --> 00:07:56,946
He knows. So, remove item

163
00:07:57,906 --> 00:08:00,596
Now, you'll notice that

164
00:07:57,906 --> 00:08:00,596
Now, you'll notice that

165
00:08:00,596 --> 00:08:02,216
in this use case

166
00:08:02,216 --> 00:08:03,676
to what the argument is.

167
00:08:03,676 --> 00:08:05,146
They're trying to

168
00:08:05,636 --> 00:08:07,786
There's the word item

169
00:08:07,786 --> 00:08:10,326
And then there's

170
00:08:10,416 --> 00:08:12,096
which is some local

171
00:08:12,976 --> 00:08:18,586
Of these two, the variable ted

172
00:08:18,586 --> 00:08:19,546
of what the argument is.

173
00:08:19,976 --> 00:08:21,086
It's in context.

174
00:08:21,206 --> 00:08:23,516
As you're reading this call

175
00:08:23,516 --> 00:08:24,556
that local variable is.

176
00:08:24,556 --> 00:08:25,456
It means something.

177
00:08:25,456 --> 00:08:27,826
It has a strong type.

178
00:08:28,016 --> 00:08:29,806
So maybe the problem

179
00:08:30,246 --> 00:08:33,285
that the word item isn't

180
00:08:33,785 --> 00:08:35,366
Maybe we'd feel a little

181
00:08:35,366 --> 00:08:36,626
if it were called removeObject.

182
00:08:38,126 --> 00:08:39,635
Well, that's probably not right,

183
00:08:39,635 --> 00:08:41,876
because we're probably using

184
00:08:41,876 --> 00:08:43,655
So it's just actively wrong.

185
00:08:44,066 --> 00:08:46,016
We could say, hmm,

186
00:08:46,906 --> 00:08:49,686
Okay. Collections in Swift

187
00:08:50,686 --> 00:08:52,886
But, it's not helping us any.

188
00:08:53,716 --> 00:08:55,226
And moreover, if we

189
00:08:55,226 --> 00:08:56,656
down different use cases,

190
00:08:56,906 --> 00:08:59,326
it might actually

191
00:09:00,426 --> 00:09:02,066
Here I want to remove

192
00:09:02,066 --> 00:09:03,666
from a list of organic

193
00:09:04,486 --> 00:09:05,186
That's misleading.

194
00:09:05,186 --> 00:09:05,836
It's wrong.

195
00:09:05,836 --> 00:09:07,006
Caffeine is not an element.

196
00:09:07,006 --> 00:09:09,086
It's a compound made

197
00:09:09,626 --> 00:09:12,166
So, our attempt at using

198
00:09:12,166 --> 00:09:14,626
to describe the argument

199
00:09:14,626 --> 00:09:16,606
to less clear use cases.

200
00:09:17,966 --> 00:09:22,406
Okay. So maybe the problem

201
00:09:22,406 --> 00:09:24,726
to get these innocuous sort

202
00:09:24,726 --> 00:09:25,926
and we should be

203
00:09:26,506 --> 00:09:28,836
Remove person ted from

204
00:09:29,416 --> 00:09:31,866
It's a little awkward

205
00:09:32,616 --> 00:09:33,276
I wouldn't say that.

206
00:09:33,276 --> 00:09:34,206
I would just say, remove(ted).

207
00:09:35,056 --> 00:09:40,006
But moreover, if I do this, if

208
00:09:40,616 --> 00:09:43,716
for this generic API,

209
00:09:43,716 --> 00:09:44,976
to be specific everywhere.

210
00:09:45,076 --> 00:09:49,016
And now there's one conceptual

211
00:09:49,016 --> 00:09:51,616
from a collection has

212
00:09:51,616 --> 00:09:52,476
source base.

213
00:09:53,766 --> 00:09:55,366
That makes it harder

214
00:09:55,366 --> 00:09:57,076
It's harder to recognize

215
00:09:57,076 --> 00:09:59,296
about the same thing

216
00:09:59,756 --> 00:10:04,976
So, the Swift API Design

217
00:09:59,756 --> 00:10:04,976
So, the Swift API Design

218
00:10:05,246 --> 00:10:07,336
Omit needless words.

219
00:10:09,036 --> 00:10:12,396
If a word is not

220
00:10:12,396 --> 00:10:14,326
of the use site,

221
00:10:15,116 --> 00:10:17,096
So we can just say, remove(ted)

222
00:10:17,096 --> 00:10:18,116
It reads really nicely.

223
00:10:18,936 --> 00:10:22,926
Now, one of the reasons this

224
00:10:22,926 --> 00:10:28,186
that it has a strong static

225
00:10:28,276 --> 00:10:30,936
that you don't write

226
00:10:30,936 --> 00:10:32,086
interpret it in the wrong way.

227
00:10:32,416 --> 00:10:35,216
And so the strong static

228
00:10:35,406 --> 00:10:38,466
that the argument you passed

229
00:10:38,466 --> 00:10:40,086
of the corresponding collection.

230
00:10:41,396 --> 00:10:43,906
If you were to do

231
00:10:44,036 --> 00:10:47,166
like for example, try to

232
00:10:47,166 --> 00:10:49,746
of friends, you're going

233
00:10:49,746 --> 00:10:54,016
from the compiler telling you

234
00:10:54,676 --> 00:10:58,256
So, we've talked about

235
00:10:59,436 --> 00:11:03,136
And we've eliminated a bunch

236
00:10:59,436 --> 00:11:03,136
And we've eliminated a bunch

237
00:11:03,136 --> 00:11:05,096
in the mind that what we're

238
00:11:06,136 --> 00:11:06,756
That's not true.

239
00:11:06,756 --> 00:11:07,846
We want clear code.

240
00:11:08,816 --> 00:11:13,816
But, clear code has to hit

241
00:11:13,816 --> 00:11:16,086
of spectrum of terseness

242
00:11:16,506 --> 00:11:20,426
And if you think about what is

243
00:11:20,426 --> 00:11:23,586
when you have extra information

244
00:11:25,146 --> 00:11:27,656
And verbose code

245
00:11:27,926 --> 00:11:30,146
Because what is your mind

246
00:11:30,146 --> 00:11:31,496
through this verbose code?

247
00:11:32,246 --> 00:11:35,476
It's trying to filter out

248
00:11:35,656 --> 00:11:37,676
all the things you don't need

249
00:11:37,906 --> 00:11:39,526
to find the actual

250
00:11:40,996 --> 00:11:43,196
Now, the other end of the

251
00:11:43,196 --> 00:11:44,846
If you have code

252
00:11:45,206 --> 00:11:48,346
then you're missing critical

253
00:11:48,346 --> 00:11:50,106
to understand that code.

254
00:11:51,416 --> 00:11:53,056
A sign that this is happening,

255
00:11:53,056 --> 00:11:54,676
that you've made

256
00:11:54,776 --> 00:11:57,426
is when you're reading code

257
00:11:57,426 --> 00:11:59,516
to the API documentation

258
00:11:59,766 --> 00:12:02,656
because the APIs themselves

259
00:11:59,766 --> 00:12:02,656
because the APIs themselves

260
00:12:03,246 --> 00:12:06,156
So we're looking for this

261
00:12:06,516 --> 00:12:11,076
where you get clear

262
00:12:11,366 --> 00:12:14,066
So all of the information you

263
00:12:14,066 --> 00:12:17,656
and how they work is there in

264
00:12:18,556 --> 00:12:21,196
This is actually a principle

265
00:12:21,196 --> 00:12:23,126
So I'm going to put up

266
00:12:24,606 --> 00:12:29,306
And in this bunch of code we

267
00:12:29,306 --> 00:12:30,516
not needed in Swift.

268
00:12:30,876 --> 00:12:34,156
That verbosity is all of these

269
00:12:34,926 --> 00:12:36,956
These aren't adding

270
00:12:38,016 --> 00:12:39,676
You can get a sense of

271
00:12:39,676 --> 00:12:41,096
by reading the APIs.

272
00:12:41,146 --> 00:12:43,726
And indeed, in Swift you

273
00:12:43,726 --> 00:12:44,236
this way.

274
00:12:44,436 --> 00:12:46,956
You would probably align

275
00:12:46,956 --> 00:12:48,926
and let the static type

276
00:12:49,026 --> 00:12:51,236
for you leading to

277
00:12:51,406 --> 00:12:53,276
that you can still read

278
00:12:53,406 --> 00:12:56,316
Now of course, types

279
00:12:56,316 --> 00:12:57,396
And the types are there.

280
00:12:57,786 --> 00:13:00,356
And if you need reassurance

281
00:12:57,786 --> 00:13:00,356
And if you need reassurance

282
00:13:00,356 --> 00:13:02,116
if it'd help your

283
00:13:02,116 --> 00:13:05,166
the answer is just an option

284
00:13:06,816 --> 00:13:10,306
So let's look at another

285
00:13:10,306 --> 00:13:13,666
about when a word

286
00:13:13,926 --> 00:13:15,816
to help describe an argument.

287
00:13:16,866 --> 00:13:19,726
We'll take this little API

288
00:13:20,326 --> 00:13:23,536
at some particular point

289
00:13:24,156 --> 00:13:25,446
And so we write out a use case.

290
00:13:25,616 --> 00:13:26,786
Always start with the use case.

291
00:13:27,116 --> 00:13:29,286
And think about the words

292
00:13:29,626 --> 00:13:32,796
So in the first case we have

293
00:13:32,796 --> 00:13:35,326
to this view argument that

294
00:13:36,126 --> 00:13:37,576
Is child adding something?

295
00:13:38,116 --> 00:13:39,646
Well, we know from

296
00:13:39,646 --> 00:13:42,426
that sidebar is going to

297
00:13:42,906 --> 00:13:47,556
But this word child

298
00:13:47,556 --> 00:13:49,466
of this parameter

299
00:13:49,516 --> 00:13:53,276
It's stating that this argument

300
00:13:53,276 --> 00:13:54,826
It's establishing hierarchy.

301
00:13:55,296 --> 00:13:56,756
That's really important

302
00:13:56,756 --> 00:14:02,146
for understanding

303
00:13:56,756 --> 00:14:02,146
for understanding

304
00:14:02,636 --> 00:14:07,426
Now, in the second argument, we

305
00:14:07,746 --> 00:14:08,946
What's origin going to be?

306
00:14:08,946 --> 00:14:10,546
Well, it's going

307
00:14:10,836 --> 00:14:12,526
This API is going

308
00:14:12,526 --> 00:14:14,966
And you can't provide anything

309
00:14:16,946 --> 00:14:19,046
So this word, it's

310
00:14:19,046 --> 00:14:21,416
It's just restating

311
00:14:21,446 --> 00:14:24,476
in the strong static type

312
00:14:24,586 --> 00:14:26,246
by the Swift language.

313
00:14:26,836 --> 00:14:27,516
So take it away.

314
00:14:27,586 --> 00:14:28,356
You don't need it.

315
00:14:29,016 --> 00:14:30,826
And now notice what the

316
00:14:30,826 --> 00:14:35,046
If we read it out, you add the

317
00:14:36,456 --> 00:14:37,456
It reads grammatically.

318
00:14:38,156 --> 00:14:38,396
All right?

319
00:14:38,856 --> 00:14:39,926
This is one of the principles

320
00:14:39,926 --> 00:14:43,826
of this particular API

321
00:14:43,826 --> 00:14:47,026
that we really want the use

322
00:14:47,686 --> 00:14:49,856
And we had this for our

323
00:14:50,736 --> 00:14:51,736
from our list of friends.

324
00:14:52,576 --> 00:14:54,486
Now, let's look at

325
00:14:54,486 --> 00:14:57,726
So this is removing

326
00:14:58,186 --> 00:15:00,966
If we look at, say, the

327
00:14:58,186 --> 00:15:00,966
If we look at, say, the

328
00:15:00,966 --> 00:15:01,886
in a particular position.

329
00:15:02,146 --> 00:15:02,666
Read it out.

330
00:15:03,196 --> 00:15:06,806
Remove position of former

331
00:15:07,226 --> 00:15:07,836
It's not right.

332
00:15:08,276 --> 00:15:10,496
This isn't the collection

333
00:15:10,846 --> 00:15:12,176
This is a collection of people.

334
00:15:13,576 --> 00:15:18,926
To actually make this read

335
00:15:19,476 --> 00:15:23,456
Let's read this out remove at

336
00:15:23,996 --> 00:15:29,436
Notice how we've clarified the

337
00:15:29,436 --> 00:15:32,076
in this first argument label

338
00:15:32,076 --> 00:15:34,796
of the argument to the method.

339
00:15:36,796 --> 00:15:39,416
This brings us to naming

340
00:15:39,656 --> 00:15:43,266
So, in Swift, a function

341
00:15:43,266 --> 00:15:46,226
of so-called base name,

342
00:15:46,226 --> 00:15:48,586
of these APIs, as well as all

343
00:15:48,586 --> 00:15:51,496
of the argument labels

344
00:15:51,546 --> 00:15:55,116
And so these two related APIs,

345
00:15:55,116 --> 00:15:57,776
of remove because they're in

346
00:15:57,776 --> 00:15:59,366
that remove something

347
00:15:59,846 --> 00:16:01,556
But their argument

348
00:15:59,846 --> 00:16:01,556
But their argument

349
00:16:02,316 --> 00:16:04,366
because they do different

350
00:16:04,436 --> 00:16:07,356
One removes an element

351
00:16:07,686 --> 00:16:10,016
The other one removes

352
00:16:10,016 --> 00:16:11,796
on its position in the sequence.

353
00:16:12,656 --> 00:16:15,076
So slightly different

354
00:16:15,486 --> 00:16:19,426
Now, you can overload

355
00:16:19,636 --> 00:16:22,686
And if two APIs that share

356
00:16:23,216 --> 00:16:24,856
But you should only do this

357
00:16:25,336 --> 00:16:28,206
when the APIs have

358
00:16:28,586 --> 00:16:30,616
So it's fine to overload

359
00:16:30,616 --> 00:16:33,056
with no argument label

360
00:16:33,056 --> 00:16:34,296
or a string to some text.

361
00:16:34,596 --> 00:16:36,726
Because fundamentally these

362
00:16:37,026 --> 00:16:40,876
They're just overloaded on

363
00:16:41,276 --> 00:16:43,696
Now, when you're coming up with

364
00:16:43,806 --> 00:16:47,666
you want that use case

365
00:16:47,716 --> 00:16:50,586
And that includes the base

366
00:16:50,586 --> 00:16:51,676
as the argument label.

367
00:16:52,216 --> 00:16:55,956
So my first API here

368
00:16:57,206 --> 00:16:58,306
Notice how that reads well.

369
00:16:58,676 --> 00:17:02,676
Now, inside that API we

370
00:16:58,676 --> 00:17:02,676
Now, inside that API we

371
00:17:02,676 --> 00:17:04,626
So it's a little bit of

372
00:17:04,626 --> 00:17:06,226
But essentially it's withLabel.

373
00:17:06,455 --> 00:17:09,596
And it describes the

374
00:17:10,156 --> 00:17:12,705
to the actual operation

375
00:17:12,766 --> 00:17:14,636
And so when you have one of

376
00:17:14,886 --> 00:17:16,106
put it on the first

377
00:17:16,106 --> 00:17:17,586
to describe the first argument.

378
00:17:19,616 --> 00:17:21,336
You also use first

379
00:17:21,406 --> 00:17:23,766
if you essentially can't

380
00:17:23,955 --> 00:17:25,215
because it would be misleading

381
00:17:25,336 --> 00:17:26,675
to have the first

382
00:17:27,056 --> 00:17:28,486
And so here we have

383
00:17:28,486 --> 00:17:29,716
And we say dismiss(true).

384
00:17:29,716 --> 00:17:32,186
What is that?

385
00:17:32,186 --> 00:17:34,536
I can't banish a Boolean

386
00:17:35,956 --> 00:17:38,166
And so to make this

387
00:17:38,406 --> 00:17:39,886
I need to put an

388
00:17:40,656 --> 00:17:41,756
Dismiss the viewController.

389
00:17:42,346 --> 00:17:43,186
And it's animated.

390
00:17:43,186 --> 00:17:44,076
Animated is true.

391
00:17:44,266 --> 00:17:46,276
And so this is extra

392
00:17:46,546 --> 00:17:50,376
The first argument label breaks

393
00:17:50,686 --> 00:17:53,806
and it's clear that what

394
00:17:53,806 --> 00:17:54,516
view controller.

395
00:17:55,446 --> 00:17:56,876
There are a couple of

396
00:17:56,876 --> 00:17:57,906
about on Swift.org.

397
00:17:58,286 --> 00:18:01,646
But essentially you still will

398
00:17:58,286 --> 00:18:01,646
But essentially you still will

399
00:18:01,646 --> 00:18:02,516
in some cases.

400
00:18:02,756 --> 00:18:06,056
And these are cases where

401
00:18:06,056 --> 00:18:08,546
to just have the argument

402
00:18:08,866 --> 00:18:10,496
at the start index of friends.

403
00:18:11,656 --> 00:18:12,266
That reads well.

404
00:18:12,266 --> 00:18:14,846
We don't need a first argument

405
00:18:14,846 --> 00:18:16,326
and so we leave it out.

406
00:18:17,346 --> 00:18:21,406
Okay. Let's talk

407
00:18:21,406 --> 00:18:22,746
about naming before we move on.

408
00:18:23,506 --> 00:18:27,746
So, when you name a method, name

409
00:18:28,016 --> 00:18:31,086
So, use English verbs, commands,

410
00:18:31,086 --> 00:18:33,876
to tell the receiver

411
00:18:34,866 --> 00:18:37,236
So here we might say, okay, we

412
00:18:37,456 --> 00:18:37,976
Reverse it.

413
00:18:38,246 --> 00:18:39,806
A viewController, present it.

414
00:18:40,146 --> 00:18:41,906
Organic compounds, append to it.

415
00:18:42,646 --> 00:18:44,256
Right? These are actions taken.

416
00:18:44,526 --> 00:18:46,136
We name based on

417
00:18:46,856 --> 00:18:50,546
Now, when we have methods whose

418
00:18:50,676 --> 00:18:55,916
to return some value

419
00:18:56,036 --> 00:18:58,896
Describe the thing

420
00:18:59,446 --> 00:19:02,156
And so here we can ask for the

421
00:18:59,446 --> 00:19:02,156
And so here we can ask for the

422
00:19:02,246 --> 00:19:06,046
or the suffix of

423
00:19:07,226 --> 00:19:09,266
Now, when you're

424
00:19:10,636 --> 00:19:12,876
it's sometimes the case that

425
00:19:12,876 --> 00:19:16,116
and a non-mutating form of

426
00:19:16,456 --> 00:19:17,746
And here what we like to call --

427
00:19:17,746 --> 00:19:20,206
we apply what we like

428
00:19:21,356 --> 00:19:24,646
And so this follows

429
00:19:24,646 --> 00:19:27,286
And essentially you

430
00:19:27,466 --> 00:19:29,686
And so here we have

431
00:19:29,686 --> 00:19:31,916
You're commanding X

432
00:19:33,566 --> 00:19:36,276
Now, for the more

433
00:19:36,466 --> 00:19:37,516
we use the "ed" rule.

434
00:19:37,666 --> 00:19:39,996
So we ask for X reversed.

435
00:19:39,996 --> 00:19:40,616
All right?

436
00:19:40,616 --> 00:19:43,296
Where we're describing what the

437
00:19:43,296 --> 00:19:45,436
And that corresponds

438
00:19:46,296 --> 00:19:47,786
Now, when the "ed"

439
00:19:47,786 --> 00:19:49,606
the "ing" rule generally does.

440
00:19:50,366 --> 00:19:52,266
This is usually when we

441
00:19:52,566 --> 00:19:53,826
So we have a document directory.

442
00:19:53,906 --> 00:19:55,496
We can append a path

443
00:19:55,956 --> 00:19:56,726
That's mutating.

444
00:19:56,726 --> 00:19:58,296
We told it to append this.

445
00:19:59,356 --> 00:20:00,726
Now we have the non-mutating

446
00:19:59,356 --> 00:20:00,726
Now we have the non-mutating

447
00:20:00,796 --> 00:20:03,616
Give me the document directory

448
00:20:03,616 --> 00:20:04,216
path component.

449
00:20:05,756 --> 00:20:10,886
So these rules, and many, many

450
00:20:10,886 --> 00:20:12,896
as part of the API Design

451
00:20:13,386 --> 00:20:15,896
Highly recommend that

452
00:20:15,896 --> 00:20:17,566
to apply them to your own APIs.

453
00:20:18,406 --> 00:20:20,966
But of course, these guidelines,

454
00:20:21,386 --> 00:20:23,466
they're not interesting

455
00:20:23,466 --> 00:20:24,406
widely applied.

456
00:20:25,106 --> 00:20:28,156
And this is why we set

457
00:20:28,796 --> 00:20:31,786
Which is the application

458
00:20:32,246 --> 00:20:35,246
to the Swift Standard

459
00:20:35,246 --> 00:20:39,986
and Cocoa Touch APIs as well as

460
00:20:39,986 --> 00:20:41,976
like Core Graphics,

461
00:20:41,976 --> 00:20:45,766
They're used all the time to

462
00:20:45,766 --> 00:20:46,876
to be beautiful in Swift.

463
00:20:48,566 --> 00:20:50,866
I talked a little bit about the

464
00:20:51,006 --> 00:20:53,206
So, this is a little screen shot

465
00:20:53,786 --> 00:20:56,536
of a small Swift app called

466
00:20:56,536 --> 00:20:57,406
for a couple years.

467
00:20:57,466 --> 00:20:58,816
It's one of the sample

468
00:20:59,646 --> 00:21:02,196
when it's being migrated

469
00:20:59,646 --> 00:21:02,196
when it's being migrated

470
00:21:03,066 --> 00:21:05,496
You can notice there's a whole

471
00:21:06,546 --> 00:21:09,846
Basically every Swift file in

472
00:21:09,846 --> 00:21:12,016
by the transition from

473
00:21:13,056 --> 00:21:15,416
And if you're looking at some

474
00:21:15,416 --> 00:21:18,546
and the right panes here,

475
00:21:18,546 --> 00:21:21,066
of these Cocoa API

476
00:21:22,246 --> 00:21:25,146
Okay? So, there's a

477
00:21:25,146 --> 00:21:26,016
We'll talk about that.

478
00:21:26,436 --> 00:21:28,336
But really what's interesting is

479
00:21:28,336 --> 00:21:30,516
that these Cocoa APIs

480
00:21:30,516 --> 00:21:33,556
for a very long time,

481
00:21:33,556 --> 00:21:36,856
but now a given API has

482
00:21:37,716 --> 00:21:40,006
Has one name that's

483
00:21:40,776 --> 00:21:42,976
and one name that's

484
00:21:43,116 --> 00:21:48,746
As a Swift programmer, most of

485
00:21:49,316 --> 00:21:52,146
You can entirely work

486
00:21:52,486 --> 00:21:54,566
Use your generated

487
00:21:54,566 --> 00:21:55,776
everything will show

488
00:21:55,776 --> 00:21:56,716
And that's all you'll deal with.

489
00:21:57,376 --> 00:21:59,096
However, there are times

490
00:21:59,096 --> 00:22:01,396
with the system where

491
00:21:59,096 --> 00:22:01,396
with the system where

492
00:22:01,396 --> 00:22:02,246
Objective-C name.

493
00:22:02,246 --> 00:22:04,276
For example, if you're

494
00:22:04,886 --> 00:22:06,606
And so, here we actually need

495
00:22:06,606 --> 00:22:08,866
to provide a selector

496
00:22:09,106 --> 00:22:10,446
And we have this string literal.

497
00:22:11,426 --> 00:22:12,246
What do we write here?

498
00:22:12,856 --> 00:22:14,236
I don't know.

499
00:22:14,426 --> 00:22:15,836
You can look at the

500
00:22:16,376 --> 00:22:19,116
Maybe ask your Swift compiler

501
00:22:19,586 --> 00:22:20,586
You can come up with the answer.

502
00:22:20,716 --> 00:22:21,126
That's fine.

503
00:22:21,746 --> 00:22:23,466
But, please don't do this.

504
00:22:24,346 --> 00:22:26,636
Because this is a

505
00:22:27,216 --> 00:22:29,886
between this string literal,

506
00:22:30,296 --> 00:22:32,706
and the method above that

507
00:22:33,366 --> 00:22:37,126
This is why in Swift 2.2

508
00:22:38,306 --> 00:22:39,686
#selector is a very

509
00:22:39,686 --> 00:22:40,806
It's an expression.

510
00:22:41,216 --> 00:22:44,006
It takes in the name

511
00:22:44,776 --> 00:22:47,116
and produces the Objective-C

512
00:22:47,316 --> 00:22:49,486
You don't have to care what

513
00:22:49,486 --> 00:22:50,616
The compiler will get it right.

514
00:22:50,616 --> 00:22:52,926
And the great thing

515
00:22:52,996 --> 00:22:55,136
is that Swift makes sure

516
00:22:55,626 --> 00:22:57,736
Makes sure it's exposed

517
00:22:58,226 --> 00:22:59,496
and computes the correct name.

518
00:22:59,596 --> 00:23:01,636
And of course, this is

519
00:22:59,596 --> 00:23:01,636
And of course, this is

520
00:23:01,976 --> 00:23:03,266
Works with code completion.

521
00:23:03,406 --> 00:23:05,376
So it's a much nicer

522
00:23:05,376 --> 00:23:06,446
That means you don't

523
00:23:06,446 --> 00:23:07,596
about the Objective-C names.

524
00:23:08,916 --> 00:23:12,026
In Swift 3 we've extended this

525
00:23:12,026 --> 00:23:13,316
and setters of properties.

526
00:23:13,606 --> 00:23:14,666
So we round out the set

527
00:23:14,666 --> 00:23:16,776
of Objective-C method names

528
00:23:16,876 --> 00:23:18,526
So this is very easy to use.

529
00:23:18,636 --> 00:23:21,206
You just pass in the argument

530
00:23:21,206 --> 00:23:23,106
to get the setter or

531
00:23:23,536 --> 00:23:25,306
And then refer to an

532
00:23:26,226 --> 00:23:28,186
And of course, the

533
00:23:28,186 --> 00:23:30,786
that that property exists, that

534
00:23:31,086 --> 00:23:34,226
and get the right

535
00:23:35,046 --> 00:23:36,236
Now, selectors aren't

536
00:23:36,236 --> 00:23:38,496
of stringly type thing

537
00:23:38,496 --> 00:23:39,876
about Objective-C method names.

538
00:23:40,386 --> 00:23:43,236
We also have Key Paths,

539
00:23:43,236 --> 00:23:45,876
to get right when

540
00:23:45,876 --> 00:23:47,676
as string literals

541
00:23:48,616 --> 00:23:53,236
And so, in Swift 3 we're

542
00:23:54,516 --> 00:24:00,876
[ Applause ]

543
00:23:54,516 --> 00:24:00,876
[ Applause ]

544
00:24:01,376 --> 00:24:03,786
#keyPath does exactly

545
00:24:03,906 --> 00:24:07,376
You get to refer to a dotted

546
00:24:07,686 --> 00:24:10,186
Compiler validates that these

547
00:24:10,186 --> 00:24:12,416
properties, gets

548
00:24:12,856 --> 00:24:15,206
And then produces the

549
00:24:15,206 --> 00:24:16,986
down into the frameworks.

550
00:24:17,066 --> 00:24:19,336
And so between #selector

551
00:24:19,946 --> 00:24:23,276
you can essentially not worry

552
00:24:24,066 --> 00:24:26,316
You just write everything

553
00:24:26,666 --> 00:24:28,606
and you stay in that

554
00:24:28,606 --> 00:24:30,126
You don't have to

555
00:24:31,466 --> 00:24:33,576
Now, there are cases

556
00:24:33,576 --> 00:24:35,306
about what the Objective-C

557
00:24:35,506 --> 00:24:37,766
You may have a mixed project

558
00:24:37,806 --> 00:24:39,746
that needs to refer to the

559
00:24:40,376 --> 00:24:42,486
And names like this

560
00:24:42,486 --> 00:24:45,946
for just don't feel right

561
00:24:46,456 --> 00:24:51,016
So for these cases, you can

562
00:24:51,456 --> 00:24:54,706
And in parentheses put the exact

563
00:24:55,316 --> 00:24:58,006
And that will be reflected in

564
00:24:58,006 --> 00:25:01,136
of the metadata and everything

565
00:24:58,006 --> 00:25:01,136
of the metadata and everything

566
00:25:01,136 --> 00:25:04,236
over the Objective-C

567
00:25:04,236 --> 00:25:06,106
of your Swift code actually

568
00:25:06,396 --> 00:25:11,926
And of course, this @objc with

569
00:25:11,926 --> 00:25:14,226
it works for methods,

570
00:25:14,226 --> 00:25:17,426
Anything that can be exposed

571
00:25:17,926 --> 00:25:19,366
you can control the name here.

572
00:25:19,966 --> 00:25:24,046
So you get nice Objective-C

573
00:25:25,076 --> 00:25:28,396
Okay. There's a lot of

574
00:25:29,936 --> 00:25:33,276
The Swift language itself

575
00:25:33,276 --> 00:25:34,536
about the Objective-C names,

576
00:25:34,536 --> 00:25:37,226
and yet it gives you the

577
00:25:37,226 --> 00:25:39,356
when you do care about

578
00:25:40,986 --> 00:25:42,746
The tools are here to help you.

579
00:25:44,016 --> 00:25:47,686
So the Swift 3 migrator is going

580
00:25:47,686 --> 00:25:49,906
to the Swift 3 names

581
00:25:50,226 --> 00:25:51,406
It's a lot of change.

582
00:25:52,366 --> 00:25:54,376
But these tools will help

583
00:25:54,376 --> 00:25:55,786
and get working with Swift 3.

584
00:25:57,226 --> 00:25:59,246
Now, the Swift 3

585
00:25:59,836 --> 00:26:01,976
But it can't migrate

586
00:25:59,836 --> 00:26:01,976
But it can't migrate

587
00:26:02,916 --> 00:26:04,676
Certainly can't migrate

588
00:26:04,676 --> 00:26:06,086
and paste from stack overflow.

589
00:26:09,236 --> 00:26:11,646
So, the Swift compiler's

590
00:26:12,196 --> 00:26:14,816
The Swift compiler, it knows

591
00:26:14,816 --> 00:26:17,126
of these APIs as well

592
00:26:17,436 --> 00:26:20,636
So if you write or paste

593
00:26:20,876 --> 00:26:24,586
it'll recognize the old API

594
00:26:24,646 --> 00:26:27,656
with Fix-its to update your code

595
00:26:29,066 --> 00:26:31,496
Additionally, we've put

596
00:26:31,636 --> 00:26:33,736
when you're implementing

597
00:26:34,076 --> 00:26:36,996
And so this is great when

598
00:26:37,316 --> 00:26:39,676
You make some minor

599
00:26:39,676 --> 00:26:41,326
of that delegate method

600
00:26:41,756 --> 00:26:44,406
Now you'll get a warning with

601
00:26:44,796 --> 00:26:46,876
so you can be sure that your

602
00:26:46,966 --> 00:26:47,526
All right.

603
00:26:48,356 --> 00:26:52,966
Now I'd like to turn things

604
00:26:53,376 --> 00:26:55,006
who's going to talk

605
00:26:55,006 --> 00:26:56,966
and Objective-C APIs into Swift.

606
00:26:58,516 --> 00:27:07,546
[ Applause ]

607
00:26:58,516 --> 00:27:07,546
[ Applause ]

608
00:27:08,046 --> 00:27:09,046
&gt;&gt; So that's a lot about Swift.

609
00:27:09,206 --> 00:27:12,496
But what if you're an

610
00:27:12,756 --> 00:27:14,316
or are working with

611
00:27:14,966 --> 00:27:17,666
All of your Objective-C

612
00:27:17,856 --> 00:27:18,836
They always have been.

613
00:27:19,266 --> 00:27:21,156
But as Doug explained,

614
00:27:21,156 --> 00:27:22,636
for a different language.

615
00:27:23,016 --> 00:27:24,916
They are increasingly starting

616
00:27:24,916 --> 00:27:27,356
to feel a little bit

617
00:27:27,916 --> 00:27:30,676
So today I'm going to show

618
00:27:30,676 --> 00:27:33,826
of the situation and give

619
00:27:33,946 --> 00:27:34,506
they deserve.

620
00:27:36,196 --> 00:27:38,996
I'm going to start with

621
00:27:38,996 --> 00:27:40,666
as they were imported

622
00:27:41,166 --> 00:27:44,926
Here we have two methods;

623
00:27:44,926 --> 00:27:46,756
and revertToContentsOfURL.

624
00:27:47,426 --> 00:27:51,606
But these don't really express

625
00:27:51,606 --> 00:27:52,456
that Doug outlined.

626
00:27:52,456 --> 00:27:55,186
There's a lot of

627
00:27:55,806 --> 00:27:58,986
We're not making effective use

628
00:27:59,056 --> 00:27:59,926
first argument labels.

629
00:27:59,926 --> 00:28:04,456
So I'm going to start with what

630
00:27:59,926 --> 00:28:04,456
So I'm going to start with what

631
00:28:04,456 --> 00:28:05,656
in the Swift 3 compiler.

632
00:28:05,976 --> 00:28:09,496
Swift 3 has improvements to how

633
00:28:10,926 --> 00:28:13,596
The Swift compiler will

634
00:28:13,626 --> 00:28:15,386
and use grammatical

635
00:28:15,386 --> 00:28:19,000
to infer first parameter labels.

636
00:28:23,176 --> 00:28:25,256
The Swift compiler will

637
00:28:25,256 --> 00:28:27,506
to eliminate redundant

638
00:28:28,096 --> 00:28:33,476
The compiler can even

639
00:28:33,556 --> 00:28:36,886
for common Objective-C idioms

640
00:28:38,156 --> 00:28:40,116
Or option sets.

641
00:28:40,726 --> 00:28:44,556
And also, there are

642
00:28:44,556 --> 00:28:47,096
such as URL that

643
00:28:47,446 --> 00:28:50,086
So when we import, we

644
00:28:52,376 --> 00:28:55,416
To find out more about

645
00:28:55,416 --> 00:28:59,376
What's New in Foundation

646
00:28:59,926 --> 00:29:02,286
So, automatic inference

647
00:28:59,926 --> 00:29:02,286
So, automatic inference

648
00:29:02,346 --> 00:29:05,616
but fundamentally it's

649
00:29:05,616 --> 00:29:07,546
The compiler, it

650
00:29:07,546 --> 00:29:08,956
It doesn't know your intent.

651
00:29:09,566 --> 00:29:12,816
And every now and then you

652
00:29:13,266 --> 00:29:15,296
So we've extended NS Swift Name.

653
00:29:15,366 --> 00:29:17,446
Now, NS Swift Name has

654
00:29:17,446 --> 00:29:20,646
But in Swift 3 we support

655
00:29:21,246 --> 00:29:23,906
A compound name is a base

656
00:29:24,006 --> 00:29:25,516
So in this case, we

657
00:29:26,316 --> 00:29:29,276
They're performing semantically

658
00:29:29,486 --> 00:29:32,116
But they differ basically in

659
00:29:32,116 --> 00:29:34,536
And so we import them with the

660
00:29:35,186 --> 00:29:38,766
but we say we want it equal

661
00:29:38,766 --> 00:29:41,616
or equal to this anchor.

662
00:29:42,756 --> 00:29:45,496
Now, method names will get you

663
00:29:45,496 --> 00:29:47,616
but this doesn't

664
00:29:48,266 --> 00:29:50,806
Here I have some simple code

665
00:29:50,976 --> 00:29:51,956
Gregorian calendar.

666
00:29:52,876 --> 00:29:56,146
But if you look at this, this

667
00:29:56,876 --> 00:29:59,436
especially

668
00:30:00,046 --> 00:30:02,486
which is a plain

669
00:30:02,966 --> 00:30:04,476
Plain string global variables,

670
00:30:04,476 --> 00:30:06,306
that's not really

671
00:30:06,796 --> 00:30:10,396
This is what we jokingly refer

672
00:30:11,676 --> 00:30:13,866
And the fact that this

673
00:30:14,566 --> 00:30:16,366
that kind of allows

674
00:30:16,366 --> 00:30:18,356
And yes, I know this

675
00:30:18,356 --> 00:30:20,186
and a developer would

676
00:30:20,686 --> 00:30:25,206
But the fact that a user of this

677
00:30:25,206 --> 00:30:27,326
and it's not a valid

678
00:30:27,696 --> 00:30:29,996
that's an unnecessary

679
00:30:31,736 --> 00:30:34,136
So, why is this API like this?

680
00:30:34,666 --> 00:30:36,536
Well, we all know why

681
00:30:36,536 --> 00:30:38,006
It came from Objective-C.

682
00:30:38,536 --> 00:30:41,426
But the fact that this

683
00:30:41,686 --> 00:30:43,206
that's an implementation detail.

684
00:30:43,386 --> 00:30:45,756
And that implementation

685
00:30:46,336 --> 00:30:51,976
And at Apple, we're

686
00:30:52,046 --> 00:30:52,936
To figure out what's

687
00:30:52,936 --> 00:30:55,116
let's see how this Objective-C

688
00:30:55,386 --> 00:30:58,956
Our global variable comes in as

689
00:30:59,496 --> 00:31:01,546
But other than the name

690
00:30:59,496 --> 00:31:01,546
But other than the name

691
00:31:01,826 --> 00:31:02,876
nothing really tells you

692
00:31:02,876 --> 00:31:07,426
that this a very specific string

693
00:31:08,816 --> 00:31:11,176
Now, we could try

694
00:31:11,176 --> 00:31:12,426
and hint at our intent.

695
00:31:12,856 --> 00:31:14,796
But a typedef, it's

696
00:31:14,796 --> 00:31:16,876
It's a new name for an old type.

697
00:31:17,446 --> 00:31:19,796
And so that doesn't really

698
00:31:21,356 --> 00:31:23,646
So, how will this API

699
00:31:23,646 --> 00:31:25,896
to design this fresh in Swift 3?

700
00:31:26,666 --> 00:31:30,786
Well, we'd probably make a

701
00:31:30,786 --> 00:31:32,436
to get some strong typing.

702
00:31:32,646 --> 00:31:33,836
And these global

703
00:31:33,916 --> 00:31:35,686
those would instead

704
00:31:36,346 --> 00:31:38,626
So in Swift 3 we introduced

705
00:31:38,626 --> 00:31:39,446
for this use case.

706
00:31:39,796 --> 00:31:41,056
You can access this attribute

707
00:31:41,306 --> 00:31:44,036
through NS Extensible

708
00:31:44,036 --> 00:31:45,146
to tell the Swift compiler

709
00:31:45,356 --> 00:31:48,176
to make a new wrapper

710
00:31:48,756 --> 00:31:52,306
You can just add

711
00:31:53,086 --> 00:31:57,286
And the importer will create

712
00:31:57,436 --> 00:32:00,426
And any global variables of

713
00:31:57,436 --> 00:32:00,426
And any global variables of

714
00:32:00,426 --> 00:32:03,096
automatically as static

715
00:32:04,926 --> 00:32:07,366
Now, we chose a struct here

716
00:32:07,366 --> 00:32:10,286
That is, other modules may

717
00:32:10,646 --> 00:32:13,576
And if they do, they will also

718
00:32:13,576 --> 00:32:15,226
on an extension of this struct.

719
00:32:15,856 --> 00:32:22,906
Now, behind the scenes the Swift

720
00:32:22,906 --> 00:32:24,466
to the underlying stored value,

721
00:32:24,466 --> 00:32:27,296
meaning that there's no

722
00:32:27,396 --> 00:32:32,756
or intermediaries involved.

723
00:32:33,736 --> 00:32:35,446
So, let's focus on the use site.

724
00:32:35,446 --> 00:32:38,806
Because good API design is

725
00:32:39,456 --> 00:32:41,676
Before and after.

726
00:32:41,916 --> 00:32:44,856
And because the type

727
00:32:45,036 --> 00:32:47,486
we can even just say .gregorian.

728
00:32:48,516 --> 00:32:57,146
[ Applause ]

729
00:32:57,646 --> 00:33:03,546
I'll kick it off by

730
00:32:57,646 --> 00:33:03,546
I'll kick it off by

731
00:33:03,906 --> 00:33:07,936
Also, in Swift 3 NSCalendar,

732
00:33:07,996 --> 00:33:10,666
This is a little fix up.

733
00:33:10,886 --> 00:33:16,236
So, we have method

734
00:33:16,556 --> 00:33:17,316
What else do we have?

735
00:33:18,156 --> 00:33:21,046
Well, we have an elephant.

736
00:33:22,626 --> 00:33:25,316
That is, we have an

737
00:33:26,556 --> 00:33:28,886
And we've been pretending

738
00:33:28,966 --> 00:33:30,706
But it's always been there.

739
00:33:32,396 --> 00:33:33,086
And it's C.

740
00:33:35,376 --> 00:33:39,436
Now, with Objective-C, the APIs

741
00:33:39,436 --> 00:33:42,226
so when we import them we

742
00:33:42,226 --> 00:33:43,226
add a few types.

743
00:33:43,446 --> 00:33:44,436
It's relatively straightforward.

744
00:33:44,796 --> 00:33:45,976
But what about C?

745
00:33:46,756 --> 00:33:49,616
I'm going to focus

746
00:33:50,076 --> 00:33:53,056
Now, Core Graphics is a

747
00:33:53,056 --> 00:33:54,946
by pretty much every

748
00:33:55,306 --> 00:33:56,646
It is a powerful API.

749
00:33:56,646 --> 00:34:00,326
But it looks and

750
00:33:56,646 --> 00:34:00,326
But it looks and

751
00:34:01,666 --> 00:34:02,636
Let's start with some code.

752
00:34:03,026 --> 00:34:04,196
I have two functions here.

753
00:34:04,466 --> 00:34:06,176
The first one transforms a --

754
00:34:06,176 --> 00:34:09,746
takes a transform and rotates

755
00:34:10,335 --> 00:34:12,956
And the second function

756
00:34:13,335 --> 00:34:15,326
Now, neither of these

757
00:34:15,326 --> 00:34:16,505
and the details don't matter.

758
00:34:16,505 --> 00:34:18,936
But I just want to look

759
00:34:18,936 --> 00:34:19,886
How does this feel?

760
00:34:20,005 --> 00:34:22,000
Go ahead and take a moment.

761
00:34:25,436 --> 00:34:28,346
So, if you notice, this

762
00:34:28,346 --> 00:34:30,616
with global variables

763
00:34:30,876 --> 00:34:33,356
And we don't really like

764
00:34:34,136 --> 00:34:36,005
Or global variables, of course.

765
00:34:37,866 --> 00:34:41,815
So, how could we

766
00:34:42,146 --> 00:34:43,656
and make it look Swifty?

767
00:34:43,656 --> 00:34:45,906
How can we make it feel Swifty?

768
00:34:47,085 --> 00:34:50,696
Well, for that, we revisit

769
00:34:50,936 --> 00:34:52,606
You can use NS Swift

770
00:34:52,606 --> 00:34:55,536
to import globals

771
00:34:56,065 --> 00:34:57,776
Let me start with

772
00:34:57,776 --> 00:34:58,476
to show you what I mean.

773
00:34:59,666 --> 00:35:01,696
Here at the top I have

774
00:34:59,666 --> 00:35:01,696
Here at the top I have

775
00:35:02,166 --> 00:35:04,126
Below that the generated

776
00:35:04,126 --> 00:35:05,856
And underneath that

777
00:35:05,856 --> 00:35:07,536
And we will be focusing

778
00:35:07,536 --> 00:35:09,286
and improving the

779
00:35:09,936 --> 00:35:14,436
So we add NS Swift Name and we

780
00:35:14,436 --> 00:35:20,096
to tell the Swift compiler that

781
00:35:20,096 --> 00:35:22,886
as the static property

782
00:35:23,266 --> 00:35:27,786
And of course, the Swift use

783
00:35:28,276 --> 00:35:29,876
nested property.

784
00:35:30,516 --> 00:35:35,596
[ Applause ]

785
00:35:36,096 --> 00:35:37,586
And of course, if the

786
00:35:37,586 --> 00:35:39,666
users can even omit the CGColor.

787
00:35:40,346 --> 00:35:44,346
Now Core Graphics has a lot

788
00:35:44,346 --> 00:35:46,936
to create all different kinds

789
00:35:46,936 --> 00:35:48,996
That's

790
00:35:48,996 --> 00:35:49,266
as well

791
00:35:49,266 --> 00:35:51,566
as CGAffineTransformMakeRotation

792
00:35:51,566 --> 00:35:53,826
But in Swift we prefer

793
00:35:53,826 --> 00:35:58,126
So we use TypeName.Init and

794
00:35:58,126 --> 00:35:59,106
to tell the Swift compiler

795
00:35:59,216 --> 00:36:01,496
that this should really

796
00:35:59,216 --> 00:36:01,496
that this should really

797
00:36:01,976 --> 00:36:03,806
And we use argument

798
00:36:03,806 --> 00:36:06,346
to clarify the roles

799
00:36:06,936 --> 00:36:11,856
You can also import

800
00:36:12,306 --> 00:36:14,746
Use the special argument

801
00:36:14,746 --> 00:36:16,836
to tell the Swift

802
00:36:16,876 --> 00:36:18,706
to plug the reference

803
00:36:19,906 --> 00:36:24,556
And so now CGContextFillPath is

804
00:36:24,916 --> 00:36:26,586
And of course, the

805
00:36:27,516 --> 00:36:28,946
it just calls it like a method.

806
00:36:30,516 --> 00:36:35,546
[ Applause ]

807
00:36:36,046 --> 00:36:37,926
And the compiler will take

808
00:36:37,926 --> 00:36:41,706
and plug it into the appropriate

809
00:36:41,806 --> 00:36:43,556
by the special argument

810
00:36:44,136 --> 00:36:46,936
We can get more complicated.

811
00:36:47,036 --> 00:36:50,376
You can prefix a Swift name

812
00:36:50,376 --> 00:36:53,196
to tell the compiler

813
00:36:53,196 --> 00:36:55,726
as a computed property

814
00:36:56,326 --> 00:36:57,996
Here ArtistGetName,

815
00:36:57,996 --> 00:37:01,076
ArtistSetName are now just

816
00:36:57,996 --> 00:37:01,076
ArtistSetName are now just

817
00:37:01,076 --> 00:37:02,966
for the computed

818
00:37:04,226 --> 00:37:05,916
Let's focus in the use site

819
00:37:06,146 --> 00:37:09,186
because good API design is

820
00:37:09,526 --> 00:37:11,936
Before, we would use

821
00:37:11,936 --> 00:37:13,676
to remember the former

822
00:37:13,896 --> 00:37:16,386
and a different global

823
00:37:17,956 --> 00:37:22,006
But now, our users can use the

824
00:37:23,206 --> 00:37:26,696
In all cases, this is

825
00:37:26,696 --> 00:37:29,856
That is, when the compiler

826
00:37:29,856 --> 00:37:32,046
directly to the corresponding

827
00:37:32,256 --> 00:37:35,576
without calling any wrappers

828
00:37:37,926 --> 00:37:40,616
You can also use NS Swift

829
00:37:40,946 --> 00:37:47,306
Remember earlier when we created

830
00:37:48,046 --> 00:37:49,886
Well, you can use typeName.

831
00:37:50,696 --> 00:37:52,096
-- well member name --

832
00:37:52,186 --> 00:37:54,086
nest a type name in

833
00:37:54,396 --> 00:37:58,000
So in this case we get

834
00:38:06,106 --> 00:38:08,696
Now, we love the

835
00:38:09,536 --> 00:38:18,856
We love it so much that we went

836
00:38:19,516 --> 00:38:27,566
[ Laughter &amp; Applause ]

837
00:38:28,066 --> 00:38:28,996
Don't clap for this.

838
00:38:31,906 --> 00:38:35,656
And we applied it

839
00:38:35,876 --> 00:38:38,396
in Core Graphics alone, 600.

840
00:38:39,076 --> 00:38:39,816
Now you can clap.

841
00:38:40,516 --> 00:38:43,616
[ Applause ]

842
00:38:44,116 --> 00:38:44,946
That's a lot of bananas.

843
00:38:45,796 --> 00:38:48,036
So, let's revisit

844
00:38:48,506 --> 00:38:50,296
Before, our global variable,

845
00:38:50,296 --> 00:38:54,166
which is painfully

846
00:38:54,166 --> 00:38:56,116
And because the type

847
00:38:56,276 --> 00:39:00,526
we can even omit the type name.

848
00:38:56,276 --> 00:39:00,526
we can even omit the type name.

849
00:39:00,746 --> 00:39:03,866
Our global functions

850
00:39:06,516 --> 00:39:10,626
[ Applause ]

851
00:39:11,126 --> 00:39:12,656
Actually, now that

852
00:39:12,656 --> 00:39:14,186
I think this code

853
00:39:14,186 --> 00:39:16,046
We don't need that

854
00:39:17,616 --> 00:39:18,666
And so now this reads --

855
00:39:19,516 --> 00:39:23,636
[ Applause ]

856
00:39:24,136 --> 00:39:26,526
And so now this reads

857
00:39:26,926 --> 00:39:28,276
We take a transform.

858
00:39:28,436 --> 00:39:29,586
We translate it.

859
00:39:29,586 --> 00:39:30,236
We rotate it.

860
00:39:30,236 --> 00:39:31,286
And we translate it back.

861
00:39:31,616 --> 00:39:32,426
Very straightforward.

862
00:39:32,936 --> 00:39:33,436
Moving on.

863
00:39:33,936 --> 00:39:37,656
CGColorCreateGenericRGB as

864
00:39:37,656 --> 00:39:39,326
many different ways

865
00:39:40,206 --> 00:39:43,446
these are now initializers

866
00:39:43,586 --> 00:39:45,766
And of course --

867
00:39:46,006 --> 00:39:50,376
and of course CGContextAddPath,

868
00:39:50,376 --> 00:39:54,786
of the other crazy redundant

869
00:39:55,516 --> 00:40:01,546
[ Applause ]

870
00:39:55,516 --> 00:40:01,546
[ Applause ]

871
00:40:02,046 --> 00:40:04,166
We hope you enjoy

872
00:40:04,386 --> 00:40:08,336
So, to summarize, first we

873
00:40:08,336 --> 00:40:09,246
Guidelines in Swift.

874
00:40:09,766 --> 00:40:12,746
Good API design is always

875
00:40:13,216 --> 00:40:15,806
Second, we looked at

876
00:40:15,976 --> 00:40:18,136
This is also known as, "Oh, no!

877
00:40:18,166 --> 00:40:19,206
Everything's different."

878
00:40:19,636 --> 00:40:20,456
But don't panic.

879
00:40:20,806 --> 00:40:21,486
It's okay.

880
00:40:21,766 --> 00:40:22,886
The names are better.

881
00:40:22,886 --> 00:40:23,916
The code is clearer.

882
00:40:23,916 --> 00:40:25,446
And you have the

883
00:40:25,856 --> 00:40:27,916
And last, we looked at

884
00:40:27,946 --> 00:40:30,896
in the Swift compiler so

885
00:40:30,976 --> 00:40:31,716
Great Renaming.

886
00:40:32,546 --> 00:40:36,416
For more information, visit

887
00:40:36,416 --> 00:40:40,516
at developer.apple.com and check

888
00:40:40,516 --> 00:40:42,886
of the open source Swift

889
00:40:42,886 --> 00:40:44,146
of the Swift evolution.

890
00:40:44,436 --> 00:40:45,926
I also showed you Core Graphics.

891
00:40:46,126 --> 00:40:49,256
But Grand Central Dispatch has

892
00:40:49,256 --> 00:40:51,016
many of these same

893
00:40:51,426 --> 00:40:55,246
So, Friday, check out

894
00:40:55,246 --> 00:40:57,096
with Grand Central

895
00:40:57,626 --> 00:40:57,986
Friday.

896
00:40:59,516 --> 00:41:15,080
[ Applause ]
