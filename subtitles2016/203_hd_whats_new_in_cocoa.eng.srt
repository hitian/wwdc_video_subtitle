1
00:00:07,516 --> 00:00:25,926
[ Music ]

2
00:00:26,426 --> 00:00:26,946
&gt;&gt; Good morning.

3
00:00:28,006 --> 00:00:29,016
My name is Ali Ozer.

4
00:00:29,396 --> 00:00:30,506
I and my colleagues [applause].

5
00:00:31,496 --> 00:00:31,786
Thank you.

6
00:00:35,336 --> 00:00:37,926
I and my colleagues Raleigh

7
00:00:37,926 --> 00:00:40,206
from the Cocoa Frameworks

8
00:00:40,206 --> 00:00:41,866
about what's new

9
00:00:42,856 --> 00:00:44,006
Our agenda is pretty simple.

10
00:00:44,006 --> 00:00:47,016
First, API updates

11
00:00:47,016 --> 00:00:48,246
in AppKit and Foundation.

12
00:00:49,776 --> 00:00:54,116
And in the area of API updates,

13
00:00:54,116 --> 00:00:55,726
of API updates I

14
00:00:55,726 --> 00:00:59,046
One, the API changes due to

15
00:00:59,476 --> 00:01:01,866
and secondly, the general API

16
00:00:59,476 --> 00:01:01,866
and secondly, the general API

17
00:01:02,296 --> 00:01:03,306
So let's get started.

18
00:01:04,436 --> 00:01:07,746
Now as you heard probably

19
00:01:07,786 --> 00:01:11,636
this morning, we have new API

20
00:01:11,636 --> 00:01:13,936
And these guidelines still

21
00:01:13,936 --> 00:01:16,176
and practices and

22
00:01:16,176 --> 00:01:17,356
of what some of these are.

23
00:01:18,176 --> 00:01:20,346
Using clear and consistent

24
00:01:20,936 --> 00:01:24,486
striving for fluent usage, you

25
00:01:24,486 --> 00:01:27,016
as an English phrase,

26
00:01:27,016 --> 00:01:30,406
and non-muting method pairs

27
00:01:30,626 --> 00:01:33,876
append and appending, and

28
00:01:33,876 --> 00:01:36,606
These are just of the

29
00:01:36,636 --> 00:01:39,236
for many years and

30
00:01:39,236 --> 00:01:41,296
and we've talked about

31
00:01:41,296 --> 00:01:42,796
as you see in this session here.

32
00:01:43,496 --> 00:01:45,566
And now we updated

33
00:01:45,956 --> 00:01:48,956
to utilize Swift features

34
00:01:49,216 --> 00:01:51,526
type inference, and overloading,

35
00:01:51,776 --> 00:01:54,756
and to make sure our APIs

36
00:01:54,756 --> 00:01:57,146
And let me talk about some of

37
00:01:57,146 --> 00:01:58,626
as a result of these changes.

38
00:01:59,096 --> 00:02:02,466
For one thing, we're eliminating

39
00:01:59,096 --> 00:02:02,466
For one thing, we're eliminating

40
00:02:02,666 --> 00:02:05,636
which of course makes

41
00:02:05,666 --> 00:02:06,906
as you might have

42
00:02:06,906 --> 00:02:09,545
You saw an example yesterday in

43
00:02:09,545 --> 00:02:11,256
of the union with an example.

44
00:02:11,256 --> 00:02:14,526
Here's another example,

45
00:02:14,896 --> 00:02:19,056
In a method call like this, both

46
00:02:19,056 --> 00:02:21,426
"object" don't really

47
00:02:21,766 --> 00:02:25,176
So such a name now comes across

48
00:02:26,486 --> 00:02:30,046
Here's another example

49
00:02:30,046 --> 00:02:33,616
NSColor.blueColor, now

50
00:02:33,616 --> 00:02:35,076
Blue is already a color,

51
00:02:35,076 --> 00:02:37,516
so the word color really

52
00:02:37,876 --> 00:02:39,496
So in the new guidelines,

53
00:02:39,496 --> 00:02:41,056
across as NSColor.blue.

54
00:02:41,836 --> 00:02:44,386
But note that we're still

55
00:02:44,576 --> 00:02:47,986
Here's another method from

56
00:02:49,016 --> 00:02:51,756
Text is not inherently

57
00:02:51,756 --> 00:02:55,086
talking about the text of

58
00:02:55,506 --> 00:02:59,006
Is it the text that represents

59
00:02:59,516 --> 00:03:01,866
So in a case like this, we've

60
00:02:59,516 --> 00:03:01,866
So in a case like this, we've

61
00:03:01,866 --> 00:03:04,136
and it comes across

62
00:03:04,266 --> 00:03:06,676
like it used to be.

63
00:03:08,506 --> 00:03:13,616
Now some of the other key

64
00:03:13,756 --> 00:03:18,376
here's an example,

65
00:03:18,606 --> 00:03:22,506
now this API comes across

66
00:03:22,856 --> 00:03:26,636
You'll note that we've

67
00:03:26,736 --> 00:03:27,886
from our method signature.

68
00:03:28,076 --> 00:03:31,376
It's because the type of

69
00:03:31,656 --> 00:03:34,146
and with type inference, Swift

70
00:03:34,346 --> 00:03:35,496
And by dropping that word,

71
00:03:35,496 --> 00:03:38,246
we actually now have three

72
00:03:38,916 --> 00:03:42,256
that are all named exactly the

73
00:03:42,256 --> 00:03:45,626
and it's that first argument,

74
00:03:45,626 --> 00:03:48,036
URL data or FileWrapper

75
00:03:48,036 --> 00:03:50,406
that distinguishes

76
00:03:51,706 --> 00:03:54,576
Now another thing to note

77
00:03:54,576 --> 00:03:56,556
on the first argument.

78
00:03:57,066 --> 00:04:00,526
From here has now been

79
00:03:57,066 --> 00:04:00,526
From here has now been

80
00:04:00,526 --> 00:04:02,066
We do this in a number of cases.

81
00:04:02,066 --> 00:04:03,896
For instance, when the

82
00:04:03,896 --> 00:04:05,066
of a prepositional phrase,

83
00:04:05,376 --> 00:04:08,706
we pull that phrase inside the

84
00:04:08,706 --> 00:04:10,306
And you'll probably

85
00:04:10,306 --> 00:04:12,366
of this throughout out APIs.

86
00:04:12,766 --> 00:04:15,616
Now you'll also notice that

87
00:04:16,076 --> 00:04:18,305
Here we haven't dropped

88
00:04:18,856 --> 00:04:20,786
because that argument

89
00:04:21,065 --> 00:04:22,446
and strings are weakly typed.

90
00:04:22,516 --> 00:04:24,806
So we really need a word

91
00:04:24,806 --> 00:04:26,746
and the role here is

92
00:04:26,746 --> 00:04:27,846
of file we're opening.

93
00:04:28,076 --> 00:04:32,036
So there, we keep the

94
00:04:35,116 --> 00:04:38,406
Now many framework and standard

95
00:04:38,406 --> 00:04:39,936
as a result of these

96
00:04:40,376 --> 00:04:43,756
and the importer whose job

97
00:04:43,756 --> 00:04:46,716
into Swift now does it

98
00:04:47,036 --> 00:04:49,726
but you'll note that some

99
00:04:49,996 --> 00:04:53,056
We've done that in our APIs,

100
00:04:53,056 --> 00:04:54,956
which I showed earlier,

101
00:04:55,146 --> 00:04:57,776
And if you yourself have

102
00:04:57,776 --> 00:05:00,726
in Swift, you may need to do

103
00:04:57,776 --> 00:05:00,726
in Swift, you may need to do

104
00:05:00,726 --> 00:05:04,526
like NS Swift Name, which lets

105
00:05:04,526 --> 00:05:05,326
the importer is doing.

106
00:05:06,136 --> 00:05:08,376
You also know that the

107
00:05:08,376 --> 00:05:10,696
There's a migrator that converts

108
00:05:10,696 --> 00:05:14,666
to Swift 3 and it will help

109
00:05:14,666 --> 00:05:16,086
in your existing

110
00:05:16,416 --> 00:05:18,886
And the Swift API

111
00:05:18,886 --> 00:05:21,286
which took place just before

112
00:05:21,286 --> 00:05:22,716
on video for a lot more details

113
00:05:22,766 --> 00:05:25,916
on these guidelines

114
00:05:26,046 --> 00:05:29,086
Now we have a number of

115
00:05:29,366 --> 00:05:31,206
that some of which

116
00:05:31,206 --> 00:05:32,536
and others we're

117
00:05:32,536 --> 00:05:33,726
Let me quickly go through these.

118
00:05:34,246 --> 00:05:35,816
Nullability is something

119
00:05:35,816 --> 00:05:38,696
that we've already

120
00:05:38,926 --> 00:05:42,006
It's basically declaring whether

121
00:05:42,006 --> 00:05:44,666
properties can be nil or

122
00:05:45,006 --> 00:05:47,136
and we've continued to

123
00:05:47,466 --> 00:05:51,236
For instance, here's a method

124
00:05:51,236 --> 00:05:52,766
as returning an optional value.

125
00:05:52,816 --> 00:05:56,736
This is addItem on NSMenu

126
00:05:56,736 --> 00:05:59,746
as returning a non-optional

127
00:05:59,746 --> 00:06:01,926
that this can never really

128
00:05:59,746 --> 00:06:01,926
that this can never really

129
00:06:01,926 --> 00:06:03,756
to reflect that properly

130
00:06:03,756 --> 00:06:06,476
of course, a little simpler.

131
00:06:06,476 --> 00:06:09,636
We've been doing properties,

132
00:06:09,636 --> 00:06:11,426
into formal properties all along

133
00:06:11,836 --> 00:06:14,736
and this year we're also

134
00:06:14,736 --> 00:06:16,146
to declare properties

135
00:06:16,146 --> 00:06:19,326
For instance, here is a

136
00:06:19,386 --> 00:06:20,896
You'll hear about this

137
00:06:20,896 --> 00:06:22,576
allowsAutomaticWindowTabbing.

138
00:06:23,216 --> 00:06:26,026
This is reflected as an actual

139
00:06:27,236 --> 00:06:28,836
You'll also note that

140
00:06:28,836 --> 00:06:30,006
to do this in Objective-C.

141
00:06:30,296 --> 00:06:32,446
You can actually declare class

142
00:06:32,446 --> 00:06:34,446
with this syntax

143
00:06:34,786 --> 00:06:37,216
So the same feature comes

144
00:06:37,216 --> 00:06:38,286
as well, which is pretty cool.

145
00:06:38,736 --> 00:06:42,856
Here's a Core Data example

146
00:06:43,106 --> 00:06:45,936
It had this method,

147
00:06:46,176 --> 00:06:48,006
It's now declared

148
00:06:48,006 --> 00:06:49,176
It's a read-only property,

149
00:06:49,176 --> 00:06:51,226
so it only has a get,

150
00:06:51,526 --> 00:06:53,196
And in Objective-C,

151
00:06:53,196 --> 00:06:57,486
across as property

152
00:06:58,186 --> 00:07:00,016
Now generics, we've

153
00:06:58,186 --> 00:07:00,016
Now generics, we've

154
00:07:00,016 --> 00:07:02,476
to our collections' classes

155
00:07:02,476 --> 00:07:03,576
not just for collections

156
00:07:03,576 --> 00:07:05,486
but they have many

157
00:07:05,486 --> 00:07:07,036
I'm sure as you're aware.

158
00:07:07,436 --> 00:07:10,326
Here's an example from

159
00:07:11,686 --> 00:07:14,376
Here's the way it's declared

160
00:07:14,456 --> 00:07:16,606
In 10.12, we just went ahead

161
00:07:16,606 --> 00:07:19,016
and added a parameterized

162
00:07:19,376 --> 00:07:23,436
We also touched a few other

163
00:07:23,436 --> 00:07:24,786
such as this execute method

164
00:07:24,786 --> 00:07:27,686
which returns an array

165
00:07:28,076 --> 00:07:30,986
As a result of this, the use

166
00:07:30,986 --> 00:07:31,556
like this.

167
00:07:31,916 --> 00:07:34,906
You have a request which you

168
00:07:34,906 --> 00:07:38,016
such as employee, and then when

169
00:07:38,236 --> 00:07:40,176
your return now is

170
00:07:40,176 --> 00:07:42,096
to be an array of employee.

171
00:07:42,716 --> 00:07:45,086
Now this is the case

172
00:07:45,086 --> 00:07:47,816
that in upcoming seeds we'll

173
00:07:47,816 --> 00:07:50,476
cleaner like so, which

174
00:07:50,476 --> 00:07:53,986
So from those two lines, the

175
00:07:53,986 --> 00:07:56,126
that the return type is an

176
00:07:56,616 --> 00:07:59,966
We've been improving

177
00:08:00,366 --> 00:08:03,936
An example that we've done this

178
00:08:04,366 --> 00:08:07,266
The change -- And here's a

179
00:08:07,446 --> 00:08:08,966
You'll see that's

180
00:08:09,806 --> 00:08:12,836
because .NSCrayonModeColorPanel

181
00:08:13,646 --> 00:08:17,396
The change we've done is to take

182
00:08:17,396 --> 00:08:19,306
in as a prefix, which

183
00:08:19,306 --> 00:08:20,716
to come across a lot cleaner.

184
00:08:20,786 --> 00:08:22,676
You know, where the

185
00:08:23,036 --> 00:08:25,026
and the use case is .crayon.

186
00:08:25,076 --> 00:08:27,006
Again, this is what

187
00:08:27,516 --> 00:08:30,786
and this is what it looks

188
00:08:31,506 --> 00:08:34,895
Now in the enumerations area,

189
00:08:34,895 --> 00:08:35,895
of string enumerations.

190
00:08:35,895 --> 00:08:37,895
Swift supports string-valued

191
00:08:38,206 --> 00:08:41,275
and in many cases Cocoa APIs

192
00:08:41,275 --> 00:08:44,526
as opened or closed sets of

193
00:08:44,526 --> 00:08:47,756
And let's look at an example

194
00:08:48,946 --> 00:08:51,476
In Swift 2 we had a bunch

195
00:08:52,026 --> 00:08:54,486
NSStringTransformLatinToGreek

196
00:08:54,626 --> 00:08:57,066
And then we have an API,

197
00:08:57,066 --> 00:08:59,356
that took those strings

198
00:08:59,876 --> 00:09:02,116
In Swift 3 we've actually

199
00:08:59,876 --> 00:09:02,116
In Swift 3 we've actually

200
00:09:02,116 --> 00:09:05,526
StringTransform and then an

201
00:09:05,526 --> 00:09:07,766
values for that,

202
00:09:08,056 --> 00:09:10,916
And the API that takes

203
00:09:10,916 --> 00:09:15,456
where the first argument is now

204
00:09:15,586 --> 00:09:19,256
So the string argument has

205
00:09:19,256 --> 00:09:20,586
a little more type safe.

206
00:09:21,126 --> 00:09:24,876
Now note that this is an

207
00:09:25,066 --> 00:09:26,866
in that you can declare

208
00:09:27,406 --> 00:09:31,906
Let me show you how you do that.

209
00:09:32,086 --> 00:09:33,406
You can go ahead

210
00:09:33,406 --> 00:09:35,866
to StringTransform yourself

211
00:09:36,216 --> 00:09:39,896
Now the values here are the

212
00:09:39,896 --> 00:09:41,266
for doing transforms.

213
00:09:41,266 --> 00:09:44,496
So you can use any valid

214
00:09:44,856 --> 00:09:47,316
It turns out Any to

215
00:09:47,316 --> 00:09:49,456
that we don't expose

216
00:09:49,456 --> 00:09:52,826
So again, go ahead and define

217
00:09:53,106 --> 00:09:55,706
and pass it to the APIs just

218
00:09:57,916 --> 00:10:00,686
And string enumerations are

219
00:09:57,916 --> 00:10:00,686
And string enumerations are

220
00:10:00,686 --> 00:10:03,916
by using of these two macros

221
00:10:04,376 --> 00:10:06,796
And here's the way the string

222
00:10:06,796 --> 00:10:07,456
in fact added.

223
00:10:07,456 --> 00:10:09,046
In 10.11, this is what we had.

224
00:10:09,046 --> 00:10:11,436
And in 10.12, we have a

225
00:10:11,436 --> 00:10:16,096
which is decorated as NS

226
00:10:17,066 --> 00:10:19,776
And we're also taking

227
00:10:19,776 --> 00:10:24,246
to nest declarations related

228
00:10:24,726 --> 00:10:26,996
An example here from NSData.

229
00:10:26,996 --> 00:10:29,756
We had a option set,

230
00:10:30,266 --> 00:10:34,396
and class NSData with an API

231
00:10:34,896 --> 00:10:37,926
In Swift 3, this comes

232
00:10:38,266 --> 00:10:40,796
with a nested WritingOptions,

233
00:10:42,056 --> 00:10:45,346
And the API that uses

234
00:10:45,346 --> 00:10:46,226
to WritingOptions, which is

235
00:10:46,226 --> 00:10:48,226
of course much more

236
00:10:48,816 --> 00:10:51,056
Now unrelated to

237
00:10:51,056 --> 00:10:52,196
you'll note a few more things.

238
00:10:53,436 --> 00:10:55,766
So that's the change

239
00:10:56,056 --> 00:11:00,426
You'll also you might note that

240
00:10:56,056 --> 00:11:00,426
You'll also you might note that

241
00:11:00,426 --> 00:11:03,636
of an empty set most cases

242
00:11:03,636 --> 00:11:04,716
which means you actually

243
00:11:04,776 --> 00:11:06,366
to pass the options

244
00:11:07,116 --> 00:11:10,006
You might've also noticed that

245
00:11:10,066 --> 00:11:11,716
You might've already heard

246
00:11:11,716 --> 00:11:13,386
about this more later

247
00:11:15,016 --> 00:11:17,296
Now my last topic

248
00:11:17,296 --> 00:11:20,396
for now is noescape.

249
00:11:20,896 --> 00:11:24,136
Okay. So noescape indicates

250
00:11:24,186 --> 00:11:27,496
that a closure's execution will

251
00:11:28,006 --> 00:11:28,966
What do I mean by that?

252
00:11:29,076 --> 00:11:29,656
Here's a method

253
00:11:29,656 --> 00:11:31,976
from NSCollection view

254
00:11:32,186 --> 00:11:33,836
It takes two closure arguments.

255
00:11:34,856 --> 00:11:37,466
You'll note that the first

256
00:11:37,526 --> 00:11:38,756
This means that the execution

257
00:11:38,756 --> 00:11:42,596
of this closure will

258
00:11:42,796 --> 00:11:44,256
performBatchUpdates returns.

259
00:11:44,566 --> 00:11:46,906
The second argument is

260
00:11:46,936 --> 00:11:50,866
which means that the execution

261
00:11:51,166 --> 00:11:52,606
after this function returns.

262
00:11:52,826 --> 00:11:54,626
So it's a good hint to

263
00:11:54,626 --> 00:11:55,646
for the compiler as well.

264
00:11:56,006 --> 00:11:58,096
This facility is also

265
00:11:58,316 --> 00:12:00,706
where we can decorate

266
00:11:58,316 --> 00:12:00,706
where we can decorate

267
00:12:00,796 --> 00:12:01,686
to get the same effect.

268
00:12:02,616 --> 00:12:05,506
So that's it for our quick

269
00:12:05,826 --> 00:12:07,466
Now note in the seed you have,

270
00:12:07,746 --> 00:12:09,296
we haven't done everything

271
00:12:09,296 --> 00:12:11,636
so there will be some

272
00:12:11,636 --> 00:12:14,026
class property changes coming

273
00:12:14,396 --> 00:12:16,646
So we're going to

274
00:12:20,046 --> 00:12:22,026
So with that, let's talk

275
00:12:22,026 --> 00:12:24,936
to invite Raleigh Ledet

276
00:12:25,206 --> 00:12:25,456
Thank you.

277
00:12:26,516 --> 00:12:30,036
[ Applause ]

278
00:12:30,536 --> 00:12:31,046
&gt;&gt; Thank you, Ali.

279
00:12:31,046 --> 00:12:32,226
Good morning, everyone.

280
00:12:33,336 --> 00:12:36,326
As you can see, we've been very

281
00:12:36,826 --> 00:12:40,076
So let's dive right on in and

282
00:12:41,526 --> 00:12:45,116
So when you're dragging

283
00:12:45,266 --> 00:12:47,556
as you bump up against the

284
00:12:47,746 --> 00:12:49,786
and as you get along the

285
00:12:49,786 --> 00:12:51,046
and even during resizing.

286
00:12:51,406 --> 00:12:55,046
So it's now much easier for

287
00:12:55,216 --> 00:12:57,926
and resize them just the

288
00:12:58,516 --> 00:13:01,616
And we spent a lot of effort

289
00:12:58,516 --> 00:13:01,616
And we spent a lot of effort

290
00:13:01,616 --> 00:13:03,906
to make sure that we only

291
00:13:04,276 --> 00:13:06,006
when that is what

292
00:13:06,006 --> 00:13:07,366
with your windows

293
00:13:08,366 --> 00:13:10,956
The way you get snapping

294
00:13:10,956 --> 00:13:14,036
to just let the system do the

295
00:13:14,916 --> 00:13:16,746
If you track the mouse yourself

296
00:13:16,746 --> 00:13:19,156
and manually position

297
00:13:19,156 --> 00:13:21,816
to bypass window snapping and

298
00:13:21,816 --> 00:13:24,596
where you ask us to put it, just

299
00:13:25,156 --> 00:13:29,416
As you've seen in the keynote,

300
00:13:29,416 --> 00:13:34,006
This is an example of TextEdit

301
00:13:34,606 --> 00:13:37,366
And the thing about

302
00:13:37,366 --> 00:13:38,296
just windows.

303
00:13:38,876 --> 00:13:42,916
So this example of TextEdit with

304
00:13:42,976 --> 00:13:44,676
by three different NS windows.

305
00:13:46,146 --> 00:13:50,586
So what we do is every one of

306
00:13:50,586 --> 00:13:52,386
of the tabs is visible,

307
00:13:52,996 --> 00:13:55,306
So if you check the

308
00:13:55,366 --> 00:13:56,586
it's going to return true.

309
00:13:57,446 --> 00:13:59,906
But only the visible tab

310
00:13:59,906 --> 00:14:00,636
to the screen.

311
00:13:59,906 --> 00:14:00,636
to the screen.

312
00:14:00,866 --> 00:14:03,666
We hide all the other windows

313
00:14:04,056 --> 00:14:05,316
so they aren't rendered

314
00:14:05,316 --> 00:14:06,216
up resources that way.

315
00:14:06,816 --> 00:14:10,486
And we handle this

316
00:14:11,436 --> 00:14:13,726
So how do you add a

317
00:14:14,736 --> 00:14:17,076
You create a new window

318
00:14:17,076 --> 00:14:19,886
and we will go ahead and create

319
00:14:20,196 --> 00:14:21,676
and place it in the window.

320
00:14:22,216 --> 00:14:25,546
If you want to remove a tab,

321
00:14:25,876 --> 00:14:27,406
and we'll go ahead

322
00:14:27,666 --> 00:14:29,006
This is all done automatically.

323
00:14:29,496 --> 00:14:33,086
Now if the user resizes the

324
00:14:33,086 --> 00:14:35,126
to resize the window

325
00:14:36,236 --> 00:14:38,046
We don't want to take

326
00:14:38,046 --> 00:14:39,666
to manage the other windows

327
00:14:39,666 --> 00:14:41,276
when the users might

328
00:14:41,596 --> 00:14:43,826
But when the user does switch

329
00:14:43,876 --> 00:14:45,686
at that point AppKit goes ahead

330
00:14:45,686 --> 00:14:48,616
and resizes the windows

331
00:14:48,836 --> 00:14:50,806
and then changes the

332
00:14:50,806 --> 00:14:51,956
at the window server level,

333
00:14:52,016 --> 00:14:54,566
and so the user gets

334
00:14:54,566 --> 00:14:57,946
of one window with multiple tabs

335
00:14:57,946 --> 00:14:59,766
we're just dealing

336
00:15:02,286 --> 00:15:05,236
So I want to cover some

337
00:15:05,236 --> 00:15:07,206
in your applications

338
00:15:07,486 --> 00:15:09,706
into your applications

339
00:15:09,706 --> 00:15:10,626
of application you have.

340
00:15:11,216 --> 00:15:14,216
If you have for example an

341
00:15:14,656 --> 00:15:17,316
or a non-NSDocument

342
00:15:17,746 --> 00:15:18,646
What you might want to do

343
00:15:18,646 --> 00:15:21,026
if you already have an

344
00:15:21,336 --> 00:15:24,886
and I'll round the section out

345
00:15:25,096 --> 00:15:27,276
to customize tabs

346
00:15:28,366 --> 00:15:30,406
If you're in an NSDocument

347
00:15:30,526 --> 00:15:31,466
there's nothing for you to do.

348
00:15:31,516 --> 00:15:34,966
This is fully automatic and,

349
00:15:34,966 --> 00:15:38,206
we made exactly zero lines

350
00:15:38,446 --> 00:15:41,426
It fully supports tabs and it

351
00:15:42,596 --> 00:15:46,106
If you're a non-NSDocument

352
00:15:46,106 --> 00:15:48,366
but what you'll probably

353
00:15:48,366 --> 00:15:51,776
to New Tab button

354
00:15:52,236 --> 00:15:54,816
The New Tab button is

355
00:15:55,056 --> 00:15:56,216
to the right of all the tabs.

356
00:15:57,546 --> 00:15:59,096
To enable that button, you need

357
00:15:59,096 --> 00:16:02,266
to implement this

358
00:15:59,096 --> 00:16:02,266
to implement this

359
00:16:02,266 --> 00:16:05,856
override in your NSWindow

360
00:16:05,856 --> 00:16:06,746
up the responder chain.

361
00:16:06,816 --> 00:16:08,786
For example, your

362
00:16:09,136 --> 00:16:12,176
or your NSWindow controller

363
00:16:12,306 --> 00:16:14,986
If you implement this override

364
00:16:14,986 --> 00:16:17,066
AppKit will see it

365
00:16:17,066 --> 00:16:19,506
and enable the New Tab

366
00:16:20,146 --> 00:16:24,756
If you have your own

367
00:16:25,046 --> 00:16:25,736
then you probably want

368
00:16:25,736 --> 00:16:28,746
to disable AppKit's automatic

369
00:16:29,626 --> 00:16:30,986
There's this class property

370
00:16:30,986 --> 00:16:33,296
on NSWindow

371
00:16:34,196 --> 00:16:36,556
This is a class property

372
00:16:36,556 --> 00:16:38,106
of your application

373
00:16:38,106 --> 00:16:42,026
allowsAutomaticWindowTabbing

374
00:16:42,196 --> 00:16:44,586
and this will turn off

375
00:16:44,896 --> 00:16:48,006
and then you can continue using

376
00:16:48,416 --> 00:16:50,646
It's important that you call

377
00:16:50,646 --> 00:16:55,116
of your application before you

378
00:16:56,126 --> 00:16:57,576
That's all you really need to do

379
00:16:57,576 --> 00:16:59,666
to adopt tabs in

380
00:16:59,666 --> 00:17:00,776
It works mostly automatically.

381
00:16:59,666 --> 00:17:00,776
It works mostly automatically.

382
00:17:00,776 --> 00:17:03,516
But here's some of the API that

383
00:17:04,146 --> 00:17:07,205
First off, the user can

384
00:17:07,205 --> 00:17:10,086
on how they want tabbing

385
00:17:10,215 --> 00:17:11,915
and they can do this in

386
00:17:11,915 --> 00:17:13,906
and you can find out what

387
00:17:13,935 --> 00:17:17,826
by the class property user

388
00:17:17,886 --> 00:17:21,445
and they can set it to manual,

389
00:17:21,445 --> 00:17:23,165
when they're in full screen.

390
00:17:25,056 --> 00:17:27,146
The rest of these properties

391
00:17:27,146 --> 00:17:29,726
on out I'm going to discuss

392
00:17:29,726 --> 00:17:30,896
and functions on NSWindow.

393
00:17:31,626 --> 00:17:33,836
So once you have an

394
00:17:34,066 --> 00:17:35,346
you can set it to tabbing mode.

395
00:17:35,776 --> 00:17:37,666
By default, this tabbing

396
00:17:37,666 --> 00:17:38,506
which means we're just going

397
00:17:38,506 --> 00:17:40,546
to follow what the user

398
00:17:40,546 --> 00:17:43,396
but you can set it to

399
00:17:43,396 --> 00:17:44,996
depending on your window

400
00:17:45,876 --> 00:17:50,516
When we group windows together

401
00:17:50,516 --> 00:17:52,796
to group windows that are

402
00:17:52,796 --> 00:17:54,676
that is by looking at

403
00:17:54,956 --> 00:17:57,266
So windows that have the same

404
00:17:57,266 --> 00:17:58,596
grouped together into tabs.

405
00:17:59,296 --> 00:18:01,926
By default, AppKit will use

406
00:17:59,296 --> 00:18:01,926
By default, AppKit will use

407
00:18:01,926 --> 00:18:03,816
up with a tabbing

408
00:18:04,106 --> 00:18:07,436
We look at things such as

409
00:18:07,806 --> 00:18:11,046
the properties of the

410
00:18:11,046 --> 00:18:13,336
and various few other

411
00:18:13,336 --> 00:18:15,906
up with the appropriate

412
00:18:16,516 --> 00:18:17,576
This works really well,

413
00:18:17,986 --> 00:18:20,606
but if it doesn't quite work

414
00:18:20,606 --> 00:18:23,696
or if you want to have

415
00:18:23,696 --> 00:18:25,596
you can set the tabbing

416
00:18:25,826 --> 00:18:27,346
and AppKit will respect that.

417
00:18:28,556 --> 00:18:31,086
You can find out what are the

418
00:18:31,086 --> 00:18:34,386
with some instance of a

419
00:18:34,386 --> 00:18:35,896
by asking for the tab windows.

420
00:18:36,506 --> 00:18:38,586
Note this returns

421
00:18:38,976 --> 00:18:41,326
It can return nil and

422
00:18:41,326 --> 00:18:42,736
if the tab bar isn't even shown

423
00:18:42,736 --> 00:18:44,946
and there are no tabs

424
00:18:46,106 --> 00:18:50,516
And you can manually add

425
00:18:50,516 --> 00:18:51,116
to the group.

426
00:18:51,236 --> 00:18:53,836
Since these are just windows

427
00:18:53,836 --> 00:18:56,746
where you add a tab window,

428
00:18:56,746 --> 00:18:58,946
you add the tab window

429
00:18:58,946 --> 00:19:01,456
NSWindowOrderingMode and

430
00:18:58,946 --> 00:19:01,456
NSWindowOrderingMode and

431
00:19:01,916 --> 00:19:03,316
in relation to the other tabs.

432
00:19:05,446 --> 00:19:08,686
AppKit will add a few

433
00:19:09,136 --> 00:19:12,306
Namely in the windows menu,

434
00:19:12,306 --> 00:19:15,016
and help the user

435
00:19:15,196 --> 00:19:17,216
such as selecting the

436
00:19:17,696 --> 00:19:20,876
These are just IB actions on

437
00:19:20,876 --> 00:19:23,266
up to your own user

438
00:19:23,266 --> 00:19:25,396
For example, you might

439
00:19:25,396 --> 00:19:26,576
that toggles the tab bar.

440
00:19:26,876 --> 00:19:28,866
You just wire that

441
00:19:30,196 --> 00:19:31,986
toggleTabBar IBAction

442
00:19:32,556 --> 00:19:35,766
and NSWindow will handle

443
00:19:36,896 --> 00:19:39,606
So that's everything about

444
00:19:40,196 --> 00:19:42,926
Let's move ahead and talk

445
00:19:42,926 --> 00:19:44,656
We've done a lot

446
00:19:44,656 --> 00:19:47,156
to enhance our already

447
00:19:47,766 --> 00:19:50,956
In the screenshot you can

448
00:19:50,956 --> 00:19:51,516
in Arabic.

449
00:19:51,956 --> 00:19:54,166
The title bar is flipped.

450
00:19:54,386 --> 00:19:56,336
The scrollers are

451
00:19:56,336 --> 00:19:58,156
Even the new tab button is

452
00:19:58,416 --> 00:20:00,016
And all the little attributes

453
00:19:58,416 --> 00:20:00,016
And all the little attributes

454
00:20:00,016 --> 00:20:02,176
and the various title bar

455
00:20:02,176 --> 00:20:04,586
appropriately as a

456
00:20:06,046 --> 00:20:08,146
I want to talk about

457
00:20:08,146 --> 00:20:09,166
at three different levels.

458
00:20:09,476 --> 00:20:10,926
What's going on at

459
00:20:10,926 --> 00:20:13,166
where the user sets

460
00:20:13,166 --> 00:20:14,286
in the system preference pane,

461
00:20:15,196 --> 00:20:17,266
how that impacts your

462
00:20:17,266 --> 00:20:18,486
on in your application depending

463
00:20:18,486 --> 00:20:20,306
on the localizations

464
00:20:20,836 --> 00:20:22,536
And then finally down

465
00:20:22,536 --> 00:20:23,916
which is at the NSView level

466
00:20:24,256 --> 00:20:26,666
where you can override

467
00:20:26,666 --> 00:20:28,326
with the user interface

468
00:20:28,906 --> 00:20:30,566
And then I'm going

469
00:20:30,566 --> 00:20:33,696
up with a really nice

470
00:20:34,006 --> 00:20:36,376
on right-to-left support

471
00:20:37,576 --> 00:20:39,886
To start off with, let's

472
00:20:41,206 --> 00:20:42,916
The key here is consistency.

473
00:20:43,156 --> 00:20:45,356
We want to have a

474
00:20:45,356 --> 00:20:47,466
to the user who's running

475
00:20:47,986 --> 00:20:51,056
So regardless of what

476
00:20:51,056 --> 00:20:53,866
in your application,

477
00:20:54,136 --> 00:20:57,746
on a right-to-left system

478
00:20:57,746 --> 00:21:00,276
over here on the right

479
00:20:57,746 --> 00:21:00,276
over here on the right

480
00:21:00,276 --> 00:21:03,716
of the menu items

481
00:21:03,716 --> 00:21:05,076
for the windows title bar.

482
00:21:06,076 --> 00:21:07,556
So the traffic lights

483
00:21:07,556 --> 00:21:09,126
over to the other side

484
00:21:09,126 --> 00:21:10,446
in the content area

485
00:21:10,446 --> 00:21:11,336
over to the other side,

486
00:21:11,746 --> 00:21:14,076
regardless of what localization

487
00:21:14,296 --> 00:21:16,526
providing a consistent

488
00:21:17,376 --> 00:21:18,896
Now we can't automatically

489
00:21:18,896 --> 00:21:22,166
down into the application

490
00:21:22,166 --> 00:21:23,006
to break any assumptions

491
00:21:23,006 --> 00:21:24,356
that your application

492
00:21:24,846 --> 00:21:28,616
So it's highly recommended that

493
00:21:28,616 --> 00:21:31,996
in your application, add Hebrew

494
00:21:32,646 --> 00:21:35,896
And once you have those

495
00:21:36,316 --> 00:21:37,826
at an application level,

496
00:21:37,826 --> 00:21:40,196
all your scroll views will

497
00:21:40,196 --> 00:21:41,196
scroller and rulers

498
00:21:41,456 --> 00:21:43,736
and NSBrowser will automatically

499
00:21:44,096 --> 00:21:47,116
At this level, again we want

500
00:21:47,116 --> 00:21:50,816
of what content views user

501
00:21:50,816 --> 00:21:53,576
be, we want the scroll

502
00:21:53,576 --> 00:21:55,686
on the same side

503
00:21:55,686 --> 00:21:58,766
Moving down to the

504
00:21:59,286 --> 00:22:01,366
by default the user interface

505
00:21:59,286 --> 00:22:01,366
by default the user interface

506
00:22:01,366 --> 00:22:04,116
to match what your

507
00:22:05,416 --> 00:22:08,616
This is exactly what you

508
00:22:08,616 --> 00:22:10,986
but there are a few exceptions,

509
00:22:10,986 --> 00:22:15,126
like media controls or spatial

510
00:22:15,126 --> 00:22:19,696
where it is always laid out

511
00:22:19,696 --> 00:22:22,396
for both left-to-right users

512
00:22:23,086 --> 00:22:25,836
So you can modify the user

513
00:22:26,556 --> 00:22:29,016
And the following controls

514
00:22:29,406 --> 00:22:31,986
So auto layout will

515
00:22:31,986 --> 00:22:37,516
but in the upcoming seed two

516
00:22:37,686 --> 00:22:44,776
container to determine what is

517
00:22:46,036 --> 00:22:47,656
And already in the

518
00:22:47,656 --> 00:22:50,246
and outline view will flip

519
00:22:50,246 --> 00:22:54,746
NSPageController switches its

520
00:22:54,746 --> 00:22:57,996
We have a lot of support in

521
00:22:57,996 --> 00:23:00,016
Let AppKit do the heavy

522
00:22:57,996 --> 00:23:00,016
Let AppKit do the heavy

523
00:23:00,476 --> 00:23:04,486
and provide your right-to-left

524
00:23:05,086 --> 00:23:08,596
I promised you a

525
00:23:08,596 --> 00:23:10,076
I've been using this

526
00:23:10,156 --> 00:23:11,876
I found it incredibly useful.

527
00:23:12,246 --> 00:23:14,786
In Xcode, you can modify

528
00:23:14,986 --> 00:23:17,606
in the Options section, change

529
00:23:17,606 --> 00:23:19,046
to right-to-left pseudolanguage.

530
00:23:19,626 --> 00:23:21,526
This allows you to

531
00:23:21,526 --> 00:23:24,086
in your development language,

532
00:23:24,436 --> 00:23:26,216
and so you can see

533
00:23:26,706 --> 00:23:30,916
but it is all using

534
00:23:30,916 --> 00:23:31,116
in it.

535
00:23:31,336 --> 00:23:34,326
So the window title

536
00:23:34,576 --> 00:23:36,386
The scroller for the

537
00:23:36,486 --> 00:23:39,386
and you can see all the little

538
00:23:39,386 --> 00:23:40,356
of the title bar are flipped.

539
00:23:40,536 --> 00:23:44,066
So it's a much easier

540
00:23:44,066 --> 00:23:44,936
on right-to-left support

541
00:23:44,936 --> 00:23:46,646
and make sure everything

542
00:23:46,886 --> 00:23:47,856
in your native language.

543
00:23:48,596 --> 00:23:52,076
Now I've just covered what

544
00:23:53,126 --> 00:23:55,966
There's a lot more to

545
00:23:55,966 --> 00:23:58,626
in International User Interfaces

546
00:23:58,626 --> 00:24:01,326
at 9:00 a.m. They cover

547
00:23:58,626 --> 00:24:01,326
at 9:00 a.m. They cover

548
00:24:01,326 --> 00:24:06,096
such as WebKit, text

549
00:24:06,096 --> 00:24:09,056
and they also cover

550
00:24:09,056 --> 00:24:11,176
So I highly recommend that you

551
00:24:14,176 --> 00:24:15,936
Let's now talk about

552
00:24:16,296 --> 00:24:18,336
If you're not familiar,

553
00:24:18,336 --> 00:24:21,376
when the user is dragging a

554
00:24:22,306 --> 00:24:25,826
but you don't have this

555
00:24:26,216 --> 00:24:27,436
But you're just going to promise

556
00:24:27,436 --> 00:24:29,496
that you'll write it wherever

557
00:24:29,966 --> 00:24:31,086
That's a file promise drag.

558
00:24:31,086 --> 00:24:32,756
We've supported file

559
00:24:33,186 --> 00:24:34,616
in OS X since the beginning.

560
00:24:35,876 --> 00:24:38,746
In macOS Sierra, we're

561
00:24:38,806 --> 00:24:41,976
to be more modern with the

562
00:24:41,976 --> 00:24:44,226
and NSFilePromiseReciever

563
00:24:45,006 --> 00:24:47,456
Now these objects allow

564
00:24:47,456 --> 00:24:48,826
to support drag flocking.

565
00:24:49,256 --> 00:24:50,596
If you're not familiar

566
00:24:50,596 --> 00:24:52,136
it's when you're

567
00:24:52,386 --> 00:24:54,466
and they can change

568
00:24:54,466 --> 00:24:56,606
depending on the

569
00:24:56,606 --> 00:24:57,466
and what's going on there.

570
00:24:59,376 --> 00:25:02,316
So file promise drags with

571
00:24:59,376 --> 00:25:02,316
So file promise drags with

572
00:25:02,486 --> 00:25:03,216
drag flocking.

573
00:25:03,286 --> 00:25:04,246
They're UTI based.

574
00:25:04,596 --> 00:25:07,086
They're completely pasteboard

575
00:25:07,086 --> 00:25:10,916
which means you can use the

576
00:25:10,916 --> 00:25:12,476
to work with these objects,

577
00:25:13,366 --> 00:25:15,096
and they're file

578
00:25:15,096 --> 00:25:16,976
So you don't need to worry

579
00:25:16,976 --> 00:25:19,366
We'll automatically wrap

580
00:25:19,366 --> 00:25:21,526
or write on your behalf.

581
00:25:21,776 --> 00:25:23,376
And they're backwards

582
00:25:24,226 --> 00:25:25,036
They're backwards compatible

583
00:25:25,036 --> 00:25:27,696
with the non-item

584
00:25:28,426 --> 00:25:30,846
And what this means is you only

585
00:25:31,276 --> 00:25:33,776
If you implement an

586
00:25:33,826 --> 00:25:35,376
you can now provide

587
00:25:35,646 --> 00:25:38,996
to anybody that's using the

588
00:25:39,516 --> 00:25:42,206
or somebody that an existing

589
00:25:42,206 --> 00:25:43,286
non-item-based API.

590
00:25:43,736 --> 00:25:45,686
They will still be able to

591
00:25:46,106 --> 00:25:49,336
and likewise with

592
00:25:49,386 --> 00:25:51,356
You will be able to

593
00:25:51,386 --> 00:25:54,396
from anybody using an

594
00:25:54,586 --> 00:25:56,926
or using the non-item-based

595
00:25:57,906 --> 00:26:03,646
So you want to provide a

596
00:25:57,906 --> 00:26:03,646
So you want to provide a

597
00:26:03,646 --> 00:26:06,016
so as the user starts to drag,

598
00:26:06,306 --> 00:26:08,246
and you do that by

599
00:26:08,246 --> 00:26:09,746
of NSFilePromiseProvider.

600
00:26:10,096 --> 00:26:13,306
You want to create an instance

601
00:26:13,306 --> 00:26:15,116
that you are going to

602
00:26:15,116 --> 00:26:17,266
to provide an

603
00:26:17,706 --> 00:26:19,696
This delegate is what's

604
00:26:19,696 --> 00:26:21,226
of writing the files to disc.

605
00:26:22,066 --> 00:26:24,646
At some point the destination

606
00:26:24,776 --> 00:26:26,846
and you'll be asked to

607
00:26:26,846 --> 00:26:27,676
for the destination.

608
00:26:27,676 --> 00:26:29,386
Now you know where the

609
00:26:29,386 --> 00:26:31,836
out the appropriate file name,

610
00:26:31,836 --> 00:26:33,376
at this point because

611
00:26:33,376 --> 00:26:35,736
up with file coordination

612
00:26:35,736 --> 00:26:37,636
out some of the remaining

613
00:26:38,316 --> 00:26:39,256
When the drag is completed

614
00:26:39,256 --> 00:26:40,826
and we know all the

615
00:26:40,826 --> 00:26:43,386
we'll call your delegate back

616
00:26:43,386 --> 00:26:46,436
to URL and provide a

617
00:26:46,436 --> 00:26:50,606
At this point, it's all wrapped

618
00:26:51,046 --> 00:26:53,526
So just write the file

619
00:26:53,526 --> 00:26:56,056
and call the completion handler

620
00:26:56,056 --> 00:26:56,906
that you're finished writing.

621
00:26:58,136 --> 00:27:00,606
If you want to receive

622
00:26:58,136 --> 00:27:00,606
If you want to receive

623
00:27:00,916 --> 00:27:02,806
the first thing you need to

624
00:27:02,806 --> 00:27:04,736
that you want to allow

625
00:27:04,736 --> 00:27:07,746
And this is normally done with

626
00:27:08,016 --> 00:27:08,856
and the drag types you need

627
00:27:08,856 --> 00:27:11,366
to add are the

628
00:27:11,366 --> 00:27:12,526
readableDrappedTypes.

629
00:27:12,636 --> 00:27:13,996
It's fairly straightforward.

630
00:27:15,156 --> 00:27:17,926
Now once the user is dragging

631
00:27:17,926 --> 00:27:19,786
you'll start getting dragging

632
00:27:19,786 --> 00:27:21,376
to get the promise objects.

633
00:27:22,346 --> 00:27:26,186
So you can use the pasteboard

634
00:27:26,186 --> 00:27:29,626
to read the objects forClasses

635
00:27:29,626 --> 00:27:32,386
and you'll get an array of

636
00:27:33,436 --> 00:27:35,456
Once you have an

637
00:27:35,806 --> 00:27:37,006
you can call in the promise

638
00:27:37,236 --> 00:27:40,316
by calling receivePromisedFiles

639
00:27:40,406 --> 00:27:41,396
operationQueue reader.

640
00:27:41,396 --> 00:27:44,426
And it will return pretty

641
00:27:44,626 --> 00:27:46,496
and your reader block will

642
00:27:46,496 --> 00:27:47,736
We're going to call

643
00:27:48,976 --> 00:27:51,036
Once the source file has

644
00:27:51,036 --> 00:27:54,466
promises, now we go ahead and

645
00:27:54,466 --> 00:27:56,356
on the operation queue

646
00:27:56,986 --> 00:28:01,786
Now it's important that you do

647
00:27:56,986 --> 00:28:01,786
Now it's important that you do

648
00:28:01,786 --> 00:28:03,696
for the operation queue

649
00:28:03,696 --> 00:28:07,596
to block your application while

650
00:28:07,696 --> 00:28:08,706
to finish writing the files.

651
00:28:08,896 --> 00:28:10,626
And this can take some

652
00:28:10,626 --> 00:28:12,436
to block your application

653
00:28:14,916 --> 00:28:18,256
And that's all there is to

654
00:28:18,296 --> 00:28:22,356
It's much simpler API to use

655
00:28:22,356 --> 00:28:24,776
and supports the item-based

656
00:28:25,556 --> 00:28:27,876
So let's move on and talk

657
00:28:27,876 --> 00:28:29,256
to our various container views.

658
00:28:29,576 --> 00:28:30,926
We'll start off with

659
00:28:31,896 --> 00:28:34,796
With collection view, previously

660
00:28:35,266 --> 00:28:38,526
your contents would scroll

661
00:28:38,526 --> 00:28:39,346
that you might've had.

662
00:28:39,686 --> 00:28:41,476
Well, now you can tell the

663
00:28:41,476 --> 00:28:43,276
with your contexts by

664
00:28:43,276 --> 00:28:45,936
ScrollsWithContent to true

665
00:28:47,126 --> 00:28:48,056
We also have support

666
00:28:48,056 --> 00:28:50,276
for optional floating

667
00:28:50,276 --> 00:28:52,796
So you can see the documents

668
00:28:52,796 --> 00:28:54,296
and the content scrolls

669
00:28:56,036 --> 00:28:58,826
This is real easy to do with the

670
00:28:59,106 --> 00:29:01,256
Just set the

671
00:28:59,106 --> 00:29:01,256
Just set the

672
00:29:01,256 --> 00:29:04,206
or the

673
00:29:04,206 --> 00:29:05,876
true if you want

674
00:29:06,166 --> 00:29:07,796
and NSCollectionView

675
00:29:07,796 --> 00:29:09,996
of doing everything

676
00:29:11,236 --> 00:29:13,526
You can also optionally

677
00:29:13,916 --> 00:29:16,176
into a single horizontally

678
00:29:16,176 --> 00:29:19,106
as you can see here, and you get

679
00:29:19,106 --> 00:29:20,416
whenever you scroll

680
00:29:21,346 --> 00:29:25,816
This is real easy to do with the

681
00:29:25,906 --> 00:29:27,116
on NSCollectionView.

682
00:29:27,726 --> 00:29:31,976
Now the sender of this message

683
00:29:31,976 --> 00:29:34,206
at your section header

684
00:29:34,206 --> 00:29:35,246
of your section header view

685
00:29:35,516 --> 00:29:38,616
and that is how NSCollectionView

686
00:29:38,616 --> 00:29:41,226
which section needs to toggle

687
00:29:42,556 --> 00:29:47,246
Since you have your button in

688
00:29:47,676 --> 00:29:49,466
you should have your

689
00:29:49,616 --> 00:29:51,056
implement NSCollectionView

690
00:29:51,056 --> 00:29:53,956
SectionHeaderView protocol

691
00:29:53,956 --> 00:29:56,646
up your button to the

692
00:29:57,206 --> 00:29:59,596
Then NSCollectionView will now

693
00:29:59,596 --> 00:30:01,056
and automatically

694
00:29:59,596 --> 00:30:01,056
and automatically

695
00:30:01,276 --> 00:30:05,206
depending on if there

696
00:30:05,206 --> 00:30:08,686
that section to collapse.

697
00:30:09,046 --> 00:30:11,786
NSTableView will now

698
00:30:12,336 --> 00:30:13,976
when the column index

699
00:30:13,976 --> 00:30:17,326
Negative 1 is our magic

700
00:30:17,746 --> 00:30:22,576
that expands all the way across

701
00:30:22,936 --> 00:30:24,096
So when you call reloadData

702
00:30:24,096 --> 00:30:26,386
and columnIndexes includes

703
00:30:26,386 --> 00:30:27,786
we will automatically reload

704
00:30:27,786 --> 00:30:29,496
that full width cell

705
00:30:29,976 --> 00:30:33,666
This only works for 10.12 and

706
00:30:34,606 --> 00:30:37,186
Likewise on 10.12 linked

707
00:30:37,186 --> 00:30:40,546
NSOutlineView will also

708
00:30:40,546 --> 00:30:44,416
views associated with the item

709
00:30:44,646 --> 00:30:48,526
Additionally, OutlineView now

710
00:30:48,526 --> 00:30:50,696
you return to it

711
00:30:51,796 --> 00:30:56,736
This is really useful but if

712
00:30:56,736 --> 00:30:59,996
to maintain the original

713
00:30:59,996 --> 00:31:03,216
that we had previously, you

714
00:30:59,996 --> 00:31:03,216
that we had previously, you

715
00:31:03,216 --> 00:31:07,416
to false and return to

716
00:31:07,986 --> 00:31:13,896
And with that, I'd like to bring

717
00:31:13,896 --> 00:31:15,726
and talk to you about

718
00:31:16,516 --> 00:31:22,126
[ Applause ]

719
00:31:22,626 --> 00:31:23,106
&gt;&gt; Thanks, Raleigh.

720
00:31:24,026 --> 00:31:26,636
So the first thing I'd like to

721
00:31:27,166 --> 00:31:30,246
This is a new container view

722
00:31:30,276 --> 00:31:31,396
where we completely create

723
00:31:31,396 --> 00:31:33,906
and manage the constraints

724
00:31:33,966 --> 00:31:37,446
But where StackView creates

725
00:31:37,706 --> 00:31:40,576
NSGridView creates these

726
00:31:41,116 --> 00:31:42,576
You very commonly

727
00:31:42,576 --> 00:31:43,536
like a preference pane UI.

728
00:31:43,536 --> 00:31:46,606
Right, there are these

729
00:31:46,606 --> 00:31:48,916
of aligned content

730
00:31:49,136 --> 00:31:50,566
and pretty statically defined.

731
00:31:51,376 --> 00:31:55,616
It supports alignment such as

732
00:31:55,616 --> 00:31:59,686
It supports spacing of the

733
00:31:59,686 --> 00:32:02,766
as its padding on an

734
00:31:59,686 --> 00:32:02,766
as its padding on an

735
00:32:04,126 --> 00:32:05,496
Similar to a spreadsheet

736
00:32:05,496 --> 00:32:06,646
it supports cell merging.

737
00:32:06,896 --> 00:32:09,116
So a single view can

738
00:32:09,116 --> 00:32:10,186
or multiple columns.

739
00:32:11,186 --> 00:32:13,786
So for instance these

740
00:32:15,226 --> 00:32:18,016
It also supports dynamic hiding

741
00:32:18,126 --> 00:32:19,996
without changing the

742
00:32:20,556 --> 00:32:23,386
So for instance, when we click

743
00:32:23,386 --> 00:32:24,926
to hide the Display

744
00:32:25,726 --> 00:32:28,376
And we can do that by getting

745
00:32:28,376 --> 00:32:30,266
and just setting its

746
00:32:30,876 --> 00:32:32,396
GridView will take

747
00:32:34,066 --> 00:32:35,746
There are several other

748
00:32:35,746 --> 00:32:36,416
to Auto Layout.

749
00:32:37,126 --> 00:32:40,676
One is a cleanup of overall

750
00:32:40,676 --> 00:32:42,876
that a view no longer needs

751
00:32:42,876 --> 00:32:44,746
or layer backing in

752
00:32:45,496 --> 00:32:47,646
Just by setting needsLayout

753
00:32:47,936 --> 00:32:50,776
during the next display pass

754
00:32:52,136 --> 00:32:53,086
One implication of this is

755
00:32:53,086 --> 00:32:55,616
that layout is no longer

756
00:32:55,616 --> 00:32:59,246
for layer-backed views and we

757
00:32:59,246 --> 00:33:02,646
of that layout and less

758
00:32:59,246 --> 00:33:02,646
of that layout and less

759
00:33:02,926 --> 00:33:04,206
which is great for performance.

760
00:33:04,676 --> 00:33:06,506
But if you notice that

761
00:33:06,506 --> 00:33:07,696
on your view when you expect,

762
00:33:07,976 --> 00:33:10,166
make sure you're explicitly

763
00:33:11,356 --> 00:33:12,586
All of this makes it easier

764
00:33:12,586 --> 00:33:14,246
to do manual layout

765
00:33:14,246 --> 00:33:17,276
So you can overwrite

766
00:33:17,576 --> 00:33:19,086
and instead just

767
00:33:19,086 --> 00:33:21,326
of your subviews,

768
00:33:22,626 --> 00:33:24,816
You do want to be sure

769
00:33:24,816 --> 00:33:26,386
that view's layout

770
00:33:26,736 --> 00:33:29,256
This can happen if during a

771
00:33:29,256 --> 00:33:30,926
frame or the frame

772
00:33:31,396 --> 00:33:32,666
This will dirty that

773
00:33:32,666 --> 00:33:36,226
and cause an additional

774
00:33:36,616 --> 00:33:39,836
If this continues, this is

775
00:33:40,326 --> 00:33:41,846
and these are pretty

776
00:33:42,316 --> 00:33:44,176
So on macOS and iOS,

777
00:33:44,176 --> 00:33:46,356
we've introduced new layout

778
00:33:46,356 --> 00:33:49,006
so you can better understand

779
00:33:49,006 --> 00:33:49,686
and why.

780
00:33:51,266 --> 00:33:54,366
There's changes to the layout

781
00:33:54,366 --> 00:33:55,846
properties so you

782
00:33:55,846 --> 00:33:57,086
that constraint refers to.

783
00:33:57,646 --> 00:34:00,216
These apply even when you're

784
00:33:57,646 --> 00:34:00,216
These apply even when you're

785
00:34:02,536 --> 00:34:04,576
In addition with that first

786
00:34:04,576 --> 00:34:05,756
so if you are reading

787
00:34:05,806 --> 00:34:07,166
be sure to handle the nil case.

788
00:34:08,186 --> 00:34:10,275
In addition, Interface

789
00:34:10,275 --> 00:34:12,146
for incremental adoption

790
00:34:12,505 --> 00:34:14,096
So within a single

791
00:34:14,096 --> 00:34:16,496
within a single view hierarchy

792
00:34:16,496 --> 00:34:19,846
constants, which

793
00:34:19,846 --> 00:34:22,196
NSGridView, the layout

794
00:34:22,196 --> 00:34:24,686
is talked about in Friday's,

795
00:34:25,545 --> 00:34:27,946
At this point I'd like

796
00:34:27,946 --> 00:34:30,246
specifically wide gamut colors.

797
00:34:30,886 --> 00:34:33,636
So sRGB is a pretty

798
00:34:33,636 --> 00:34:37,856
Usually it's the implied color

799
00:34:38,146 --> 00:34:40,676
and most of our displays

800
00:34:41,585 --> 00:34:44,686
The new 5K iMac and

801
00:34:45,025 --> 00:34:46,806
both contain these

802
00:34:46,906 --> 00:34:48,815
that can display

803
00:34:49,436 --> 00:34:51,966
Specifically, they're

804
00:34:52,596 --> 00:34:55,166
and this is what we call a wide

805
00:34:55,166 --> 00:34:58,656
to sRGB, it can display much

806
00:34:59,536 --> 00:35:02,726
So your applications can display

807
00:34:59,536 --> 00:35:02,726
So your applications can display

808
00:35:02,726 --> 00:35:05,866
to their original color and they

809
00:35:05,866 --> 00:35:08,086
colors to make UI

810
00:35:09,046 --> 00:35:11,856
An example of such a color

811
00:35:11,856 --> 00:35:14,946
which happens to be Pantone's

812
00:35:14,946 --> 00:35:18,166
It's outside of sRGB.

813
00:35:18,166 --> 00:35:19,916
So previous displays

814
00:35:19,966 --> 00:35:23,236
but it is fully representable

815
00:35:24,136 --> 00:35:27,326
Your photos also contain

816
00:35:27,326 --> 00:35:29,206
especially these

817
00:35:29,786 --> 00:35:33,236
A note of irony here is that

818
00:35:33,236 --> 00:35:35,686
at home are not actually going

819
00:35:35,686 --> 00:35:38,636
so you'll kind of have to take

820
00:35:40,646 --> 00:35:41,896
If you want to work

821
00:35:41,896 --> 00:35:44,366
there's a new color

822
00:35:44,506 --> 00:35:45,376
which lets you work with this.

823
00:35:45,376 --> 00:35:47,766
This joins sRGB and

824
00:35:48,516 --> 00:35:49,696
There's also a new constructor

825
00:35:49,696 --> 00:35:53,786
on NSColor displayP3 red green

826
00:35:53,786 --> 00:35:55,516
to create a color

827
00:35:55,896 --> 00:35:58,786
UIColor has the same constructor

828
00:35:59,846 --> 00:36:02,486
Another way of working with wide

829
00:35:59,846 --> 00:36:02,486
Another way of working with wide

830
00:36:02,486 --> 00:36:05,086
calling extended range sRGB.

831
00:36:06,516 --> 00:36:08,906
And so when working

832
00:36:08,986 --> 00:36:10,016
you're typically constrained

833
00:36:10,016 --> 00:36:11,976
with component values

834
00:36:12,496 --> 00:36:14,446
And you can pick any color

835
00:36:14,446 --> 00:36:16,796
such as this blue,

836
00:36:17,356 --> 00:36:19,276
But you can't represent

837
00:36:19,276 --> 00:36:20,076
of that color gamut.

838
00:36:20,286 --> 00:36:22,576
So sRGB cannot represent

839
00:36:23,676 --> 00:36:26,526
Well extended range sRGB

840
00:36:26,526 --> 00:36:29,566
and the same white point as

841
00:36:29,566 --> 00:36:32,156
to take on values less

842
00:36:32,856 --> 00:36:35,466
So it can represent this

843
00:36:35,466 --> 00:36:38,066
and blue value and a

844
00:36:39,166 --> 00:36:42,246
It happens to also be the P3

845
00:36:42,246 --> 00:36:45,266
that with extended range sRGB,

846
00:36:45,266 --> 00:36:47,296
of colors necessary

847
00:36:48,646 --> 00:36:51,396
This also has a color

848
00:36:51,976 --> 00:36:53,546
and the existing NSColor

849
00:36:53,546 --> 00:36:55,726
and UIColor constructors

850
00:36:55,896 --> 00:36:58,036
that previously gave

851
00:36:58,326 --> 00:37:01,446
Will now accept values less

852
00:36:58,326 --> 00:37:01,446
Will now accept values less

853
00:37:01,446 --> 00:37:04,006
and give you back an

854
00:37:04,506 --> 00:37:05,326
which is pretty convenient.

855
00:37:07,566 --> 00:37:08,816
One important thing to consider

856
00:37:08,816 --> 00:37:11,376
with these wider color

857
00:37:12,236 --> 00:37:14,636
So sRGB can theoretically

858
00:37:14,636 --> 00:37:17,316
within its gamut, but

859
00:37:17,316 --> 00:37:20,426
you can only address a finite

860
00:37:20,566 --> 00:37:23,286
The black space here are simply

861
00:37:23,286 --> 00:37:24,436
those 8 bits per component.

862
00:37:25,826 --> 00:37:28,606
When you widen the color gamut,

863
00:37:28,606 --> 00:37:30,756
of that gamut but keep

864
00:37:31,246 --> 00:37:33,616
you're addressable

865
00:37:34,206 --> 00:37:37,436
Your ability to specify

866
00:37:37,436 --> 00:37:39,776
So this is why we

867
00:37:39,776 --> 00:37:41,876
with these wider color

868
00:37:41,876 --> 00:37:45,256
that you use 16 bits

869
00:37:46,326 --> 00:37:48,276
It doubles the amount

870
00:37:48,276 --> 00:37:50,936
but gives you exponentially

871
00:37:50,936 --> 00:37:52,696
So we think that

872
00:37:54,466 --> 00:37:56,236
What API do you need

873
00:37:56,236 --> 00:37:58,036
to consider these deeper colors?

874
00:37:58,516 --> 00:38:00,796
Well, the great news is that

875
00:37:58,516 --> 00:38:00,796
Well, the great news is that

876
00:38:01,086 --> 00:38:04,236
So NSWindow will automatically

877
00:38:04,356 --> 00:38:07,266
with these higher bit depths

878
00:38:07,486 --> 00:38:09,186
even as you drag

879
00:38:10,086 --> 00:38:12,126
If there's a reason you need

880
00:38:12,126 --> 00:38:13,566
you can set the depth

881
00:38:13,656 --> 00:38:15,136
to some value of your choice.

882
00:38:16,096 --> 00:38:19,136
Views and layers within that

883
00:38:19,136 --> 00:38:22,286
inherit that bit depth with the

884
00:38:22,726 --> 00:38:24,826
There you should use the

885
00:38:26,616 --> 00:38:30,796
CALayer on both macOS and iOS

886
00:38:31,136 --> 00:38:32,856
property that allows you

887
00:38:32,856 --> 00:38:35,446
to again explicitly control

888
00:38:36,336 --> 00:38:37,756
So this is how you

889
00:38:37,756 --> 00:38:39,116
of wide color in

890
00:38:39,436 --> 00:38:42,296
We've also enhanced part of the

891
00:38:42,296 --> 00:38:43,256
of these wider colors.

892
00:38:43,896 --> 00:38:45,166
One example is the color panel.

893
00:38:45,816 --> 00:38:47,036
So on the iMac on the left here,

894
00:38:47,486 --> 00:38:51,846
the color wheel will

895
00:38:51,846 --> 00:38:53,746
It will actually

896
00:38:53,746 --> 00:38:58,556
from the full range of

897
00:38:58,556 --> 00:38:59,786
that normal color wheels allow.

898
00:39:00,486 --> 00:39:03,706
However, you can also

899
00:39:03,836 --> 00:39:06,246
and explicitly choose

900
00:39:06,776 --> 00:39:08,156
So even on these

901
00:39:08,156 --> 00:39:09,736
that can't render P3 colors,

902
00:39:09,936 --> 00:39:11,756
you can still allow

903
00:39:14,046 --> 00:39:16,146
The RGB color picker

904
00:39:16,146 --> 00:39:17,776
to choose the color

905
00:39:18,036 --> 00:39:20,046
but it also allows you to

906
00:39:20,046 --> 00:39:24,136
from 8-bit values from 0

907
00:39:24,616 --> 00:39:26,566
So again you can get this

908
00:39:26,566 --> 00:39:28,016
with these wider color spaces.

909
00:39:28,806 --> 00:39:30,826
These color panel changes comes

910
00:39:30,826 --> 00:39:32,826
to all applications

911
00:39:32,826 --> 00:39:34,546
No API is needed for those.

912
00:39:36,396 --> 00:39:38,976
The Working with Wide Color

913
00:39:38,976 --> 00:39:41,746
and more, such as asset catalog

914
00:39:41,906 --> 00:39:44,766
I'd recommend checking that out

915
00:39:45,426 --> 00:39:49,226
So the next topic is

916
00:39:49,226 --> 00:39:50,866
So status items are

917
00:39:50,866 --> 00:39:52,596
in the upper trailing

918
00:39:52,976 --> 00:39:54,966
and these are things that

919
00:39:54,966 --> 00:39:57,966
of private API to achieve

920
00:39:59,016 --> 00:40:00,456
First is reordering.

921
00:39:59,016 --> 00:40:00,456
First is reordering.

922
00:40:00,536 --> 00:40:03,856
You can now command click and

923
00:40:03,856 --> 00:40:05,716
within and beyond

924
00:40:06,556 --> 00:40:09,356
You can also use keyboard

925
00:40:09,546 --> 00:40:11,646
and even activate

926
00:40:12,866 --> 00:40:14,106
The best part of all of this is

927
00:40:14,106 --> 00:40:16,026
that this comes completely

928
00:40:16,026 --> 00:40:17,896
with no API opt-in

929
00:40:18,596 --> 00:40:20,906
So all items are command-click

930
00:40:21,306 --> 00:40:23,816
and any items with a

931
00:40:23,816 --> 00:40:24,826
in keyboard navigation.

932
00:40:25,306 --> 00:40:26,666
If they have a custom

933
00:40:26,666 --> 00:40:27,746
they'll just be skipped over.

934
00:40:28,996 --> 00:40:31,166
The next is hiding and removal.

935
00:40:31,746 --> 00:40:33,326
You can now command-click

936
00:40:33,326 --> 00:40:36,516
out of the status bar, remove

937
00:40:36,516 --> 00:40:38,136
and even programmatically

938
00:40:39,396 --> 00:40:41,806
Unlike reordering, this

939
00:40:41,806 --> 00:40:44,426
No status items will be

940
00:40:44,996 --> 00:40:47,446
and you can do that by setting

941
00:40:47,446 --> 00:40:48,686
to include removalAllowed.

942
00:40:49,796 --> 00:40:51,436
You can programmatically

943
00:40:51,436 --> 00:40:52,866
and even get KVO notified

944
00:40:52,866 --> 00:40:55,046
of this change using

945
00:40:55,686 --> 00:40:57,586
And if your application

946
00:40:57,656 --> 00:41:00,286
meaning its only representation

947
00:40:57,656 --> 00:41:00,286
meaning its only representation

948
00:41:00,286 --> 00:41:03,766
there's no doc icon or other

949
00:41:03,766 --> 00:41:05,556
to automatically quit on removal

950
00:41:05,736 --> 00:41:07,636
by setting the

951
00:41:09,456 --> 00:41:11,906
All of this gets autosaved

952
00:41:11,906 --> 00:41:13,966
and the visible state so you

953
00:41:13,966 --> 00:41:16,306
to preserve that using

954
00:41:16,966 --> 00:41:19,516
We automatically generate

955
00:41:19,516 --> 00:41:20,906
that you created in

956
00:41:21,566 --> 00:41:23,876
but if you create them in

957
00:41:23,876 --> 00:41:25,466
or just want to have

958
00:41:25,806 --> 00:41:27,046
you can set that autosave name

959
00:41:27,046 --> 00:41:28,886
to some identifier

960
00:41:29,796 --> 00:41:31,716
So that's status

961
00:41:31,716 --> 00:41:33,796
A lot of it comes for free, and

962
00:41:34,046 --> 00:41:35,916
you can really make them

963
00:41:37,206 --> 00:41:39,216
Next are control constructors.

964
00:41:39,636 --> 00:41:42,796
So these are new constructors

965
00:41:42,796 --> 00:41:45,896
that make it really easy to

966
00:41:46,596 --> 00:41:50,376
Examples are different types

967
00:41:51,036 --> 00:41:55,416
image views, sliders, and

968
00:41:56,226 --> 00:41:57,896
So these are the types of

969
00:41:57,896 --> 00:41:59,696
with in the Interface

970
00:41:59,816 --> 00:42:01,226
and it makes it just as easily

971
00:41:59,816 --> 00:42:01,226
and it makes it just as easily

972
00:42:01,226 --> 00:42:03,096
to use these right

973
00:42:03,726 --> 00:42:05,306
They come with the

974
00:42:05,306 --> 00:42:07,066
the right font size,

975
00:42:07,386 --> 00:42:08,836
and they support

976
00:42:09,336 --> 00:42:13,016
So the label here looks

977
00:42:13,016 --> 00:42:15,446
and even a vibrant dark

978
00:42:15,566 --> 00:42:16,826
There's no additional

979
00:42:17,576 --> 00:42:19,936
I'd love to show you an example

980
00:42:19,936 --> 00:42:22,686
So this is creating

981
00:42:22,766 --> 00:42:24,266
There's quite a few

982
00:42:24,266 --> 00:42:26,456
and the unfortunate thing is

983
00:42:26,456 --> 00:42:28,536
of those; the title,

984
00:42:28,996 --> 00:42:32,426
Well with checkbox, title,

985
00:42:32,426 --> 00:42:34,436
down to just that,

986
00:42:35,716 --> 00:42:39,536
A bit more of a --

987
00:42:42,306 --> 00:42:42,896
Just wait.

988
00:42:43,636 --> 00:42:45,756
So this is creating just

989
00:42:45,756 --> 00:42:47,386
just some text on the screen.

990
00:42:47,536 --> 00:42:50,186
And here, we care about

991
00:42:51,056 --> 00:42:54,026
Well, with labelWithString,

992
00:42:54,906 --> 00:42:57,056
So, this is pretty great.

993
00:42:57,056 --> 00:42:58,536
It comes out of the box --

994
00:42:59,516 --> 00:43:03,016
[ Applause ]

995
00:42:59,516 --> 00:43:03,016
[ Applause ]

996
00:43:03,516 --> 00:43:05,596
It comes out of the box

997
00:43:05,596 --> 00:43:06,716
or without auto layout.

998
00:43:06,846 --> 00:43:08,866
So if you are going to be

999
00:43:09,056 --> 00:43:11,186
you still need to set

1000
00:43:11,186 --> 00:43:14,316
IntoConstaints to false,

1001
00:43:14,806 --> 00:43:16,826
And so if you already have

1002
00:43:16,826 --> 00:43:18,166
of things, we still

1003
00:43:18,166 --> 00:43:20,256
over to these new system

1004
00:43:20,466 --> 00:43:21,876
that your controls

1005
00:43:21,876 --> 00:43:23,906
and feel both now

1006
00:43:24,096 --> 00:43:28,116
The last thing I'd like to

1007
00:43:28,116 --> 00:43:29,906
I only covered a number of

1008
00:43:29,906 --> 00:43:31,946
of our frameworks and these

1009
00:43:31,946 --> 00:43:34,026
but there's two more that I

1010
00:43:34,026 --> 00:43:35,046
to AppKit specifically.

1011
00:43:36,116 --> 00:43:37,766
The first is weak delegates.

1012
00:43:38,436 --> 00:43:40,756
So we've added new zeroing

1013
00:43:40,756 --> 00:43:44,066
for various delegates and data

1014
00:43:44,806 --> 00:43:47,396
so you no longer need to clear

1015
00:43:47,396 --> 00:43:48,466
delegates is deallocated.

1016
00:43:49,786 --> 00:43:52,136
It still supports non-weak

1017
00:43:52,326 --> 00:43:54,676
in which case it'll fall

1018
00:43:54,676 --> 00:43:56,626
or unsafe, unretained semantics.

1019
00:43:57,886 --> 00:43:59,456
We've also gone through

1020
00:43:59,456 --> 00:44:01,446
of our classes explicitly

1021
00:43:59,456 --> 00:44:01,446
of our classes explicitly

1022
00:44:01,446 --> 00:44:02,886
designated initializers.

1023
00:44:03,466 --> 00:44:05,626
These are the same as what they

1024
00:44:05,786 --> 00:44:07,866
but now are just

1025
00:44:08,696 --> 00:44:10,386
with the one exception

1026
00:44:10,756 --> 00:44:12,286
So if you are subclassing

1027
00:44:12,286 --> 00:44:13,266
please see the release notes

1028
00:44:13,266 --> 00:44:16,136
for how you should

1029
00:44:16,416 --> 00:44:18,736
As with all newly declared

1030
00:44:19,156 --> 00:44:21,906
you should make sure that

1031
00:44:21,906 --> 00:44:23,186
with that in your subclass.

1032
00:44:24,286 --> 00:44:25,846
And so if you weren't

1033
00:44:25,846 --> 00:44:27,726
you potentially had these

1034
00:44:27,726 --> 00:44:29,226
that maybe were subtle bugs.

1035
00:44:29,546 --> 00:44:31,676
In Objective-C, you'll now

1036
00:44:31,866 --> 00:44:33,676
And in Swift, you're going

1037
00:44:33,676 --> 00:44:35,026
So you want to make sure

1038
00:44:35,026 --> 00:44:37,026
that you're properly handling

1039
00:44:37,366 --> 00:44:39,386
So that's it for

1040
00:44:39,386 --> 00:44:41,886
At this point, I'd like to turn

1041
00:44:41,886 --> 00:44:43,056
about what's new in Foundation.

1042
00:44:44,516 --> 00:44:50,076
[ Applause ]

1043
00:44:50,576 --> 00:44:51,196
&gt;&gt; Thank you, Taylor.

1044
00:44:53,946 --> 00:44:56,166
So here are some of the things

1045
00:44:56,636 --> 00:44:58,536
and let me just dive right in.

1046
00:44:59,396 --> 00:45:02,486
Now earlier you saw

1047
00:44:59,396 --> 00:45:02,486
Now earlier you saw

1048
00:45:02,486 --> 00:45:04,706
and I think we also talked

1049
00:45:05,026 --> 00:45:10,226
We are dropping NS prefix in

1050
00:45:10,506 --> 00:45:12,316
Now, as you might

1051
00:45:12,316 --> 00:45:16,586
of Foundation actually ships

1052
00:45:16,586 --> 00:45:19,026
as a part of Swift Core

1053
00:45:19,026 --> 00:45:20,576
in other platforms,

1054
00:45:21,436 --> 00:45:25,506
And we want to match the naming

1055
00:45:25,686 --> 00:45:28,206
with the convention established

1056
00:45:28,206 --> 00:45:29,736
which does not use prefixes.

1057
00:45:30,756 --> 00:45:35,126
As a result, a lot of our

1058
00:45:35,166 --> 00:45:37,136
in Foundation and

1059
00:45:37,136 --> 00:45:39,076
NSFormatter becomes

1060
00:45:39,136 --> 00:45:41,906
Now the last two here,

1061
00:45:41,906 --> 00:45:45,906
of a special category and I'll

1062
00:45:46,016 --> 00:45:48,356
Now, this is happening

1063
00:45:48,356 --> 00:45:49,516
It's not something

1064
00:45:49,516 --> 00:45:52,036
to our other frameworks,

1065
00:45:52,276 --> 00:45:53,676
it's only applying to some APIs.

1066
00:45:53,676 --> 00:45:56,926
We do not apply this

1067
00:45:56,926 --> 00:45:59,176
that are inherently

1068
00:45:59,466 --> 00:46:03,206
Examples are NSObject,

1069
00:45:59,466 --> 00:46:03,206
Examples are NSObject,

1070
00:46:03,546 --> 00:46:06,816
We also do not apply it to

1071
00:46:06,816 --> 00:46:09,466
and are, in fact, not

1072
00:46:09,466 --> 00:46:12,976
such as NSUserNotification,

1073
00:46:14,036 --> 00:46:17,176
And in one other case is classes

1074
00:46:17,176 --> 00:46:18,976
which are also exposed

1075
00:46:19,416 --> 00:46:22,386
So here we are exposing

1076
00:46:22,386 --> 00:46:26,866
but we're also exposing NSData,

1077
00:46:26,866 --> 00:46:27,756
about what I mean there.

1078
00:46:28,216 --> 00:46:30,876
Now first let me explain

1079
00:46:32,006 --> 00:46:34,016
You might already be

1080
00:46:34,406 --> 00:46:36,526
We've had this concept in

1081
00:46:36,846 --> 00:46:39,936
These are types where value is

1082
00:46:40,586 --> 00:46:44,396
Examples are NSString,

1083
00:46:45,496 --> 00:46:46,656
Now, since a number

1084
00:46:46,656 --> 00:46:49,786
of Foundation APIs already have

1085
00:46:49,826 --> 00:46:52,496
we've gone ahead and added

1086
00:46:53,056 --> 00:46:55,766
And here is the full set of

1087
00:46:55,966 --> 00:47:00,066
This is in addition of course

1088
00:46:55,966 --> 00:47:00,066
This is in addition of course

1089
00:47:00,066 --> 00:47:02,496
and set which are already

1090
00:47:02,496 --> 00:47:03,726
in Swift, since they're

1091
00:47:03,726 --> 00:47:04,816
in the standard library.

1092
00:47:05,516 --> 00:47:09,536
So now these types here are

1093
00:47:09,746 --> 00:47:11,386
and they have value

1094
00:47:11,386 --> 00:47:13,486
meaning they can be

1095
00:47:13,686 --> 00:47:15,086
if mutability makes

1096
00:47:15,476 --> 00:47:19,096
You can use let or var on these

1097
00:47:19,626 --> 00:47:20,656
at the time you declare them.

1098
00:47:21,206 --> 00:47:24,176
These also conform to the

1099
00:47:24,176 --> 00:47:28,136
as well, as you might expect.

1100
00:47:28,286 --> 00:47:31,136
Now existing class APIs

1101
00:47:31,136 --> 00:47:32,826
where we've created

1102
00:47:33,026 --> 00:47:35,666
and let me look at

1103
00:47:36,186 --> 00:47:38,576
An example is data, the

1104
00:47:38,846 --> 00:47:40,806
So now we have the

1105
00:47:40,866 --> 00:47:42,196
This is the value type for data.

1106
00:47:42,536 --> 00:47:44,476
This is the data

1107
00:47:44,476 --> 00:47:48,206
to use most often

1108
00:47:48,236 --> 00:47:52,086
This is the type moving forward;

1109
00:47:52,116 --> 00:47:54,756
which is a subclass of

1110
00:47:54,756 --> 00:47:57,426
which is a subclass

1111
00:47:57,846 --> 00:48:00,256
Now NS types remain

1112
00:47:57,846 --> 00:48:00,256
Now NS types remain

1113
00:48:00,256 --> 00:48:03,236
like NSMutableData is not

1114
00:48:03,236 --> 00:48:05,146
so the migrator will

1115
00:48:05,556 --> 00:48:08,306
Another reason we have NS types

1116
00:48:08,306 --> 00:48:09,606
want to subclass these types.

1117
00:48:09,606 --> 00:48:11,266
You know, you might

1118
00:48:11,266 --> 00:48:14,326
or NSMutableData to provide

1119
00:48:14,636 --> 00:48:16,056
and you can do that

1120
00:48:16,056 --> 00:48:18,226
the class types,

1121
00:48:18,226 --> 00:48:20,696
So these are some of the reasons

1122
00:48:22,186 --> 00:48:24,456
Now, let's look at

1123
00:48:25,256 --> 00:48:29,256
The NSData class has

1124
00:48:29,546 --> 00:48:31,916
This has been named count

1125
00:48:31,916 --> 00:48:33,716
because it's more

1126
00:48:33,716 --> 00:48:34,986
of the Swift Standard Library.

1127
00:48:35,576 --> 00:48:38,026
Methods such as write

1128
00:48:38,026 --> 00:48:40,036
of these other methods

1129
00:48:40,036 --> 00:48:42,346
They come across the same

1130
00:48:42,346 --> 00:48:45,796
that the NSRange and NSData

1131
00:48:46,776 --> 00:48:48,956
in the struct data version,

1132
00:48:48,956 --> 00:48:50,656
with the Swift Library.

1133
00:48:51,036 --> 00:48:54,196
And finally you'll note that a

1134
00:48:54,196 --> 00:48:57,416
is not available on this

1135
00:48:57,416 --> 00:49:00,336
in the case of NSData, it's

1136
00:48:57,416 --> 00:49:00,336
in the case of NSData, it's

1137
00:49:00,736 --> 00:49:02,486
So these are some of the

1138
00:49:02,486 --> 00:49:04,946
between the value types

1139
00:49:05,516 --> 00:49:08,066
Now I'm not going to say

1140
00:49:08,566 --> 00:49:10,926
There is a talk this afternoon,

1141
00:49:10,926 --> 00:49:12,996
for Swift in the Mission room.

1142
00:49:13,206 --> 00:49:17,696
I encourage you to attend that

1143
00:49:17,916 --> 00:49:20,096
Now we have several

1144
00:49:20,326 --> 00:49:21,746
to represent measured amounts.

1145
00:49:22,276 --> 00:49:24,406
The main class here

1146
00:49:24,446 --> 00:49:27,826
This is an abstract type to

1147
00:49:27,986 --> 00:49:30,406
degrees Celsius, kilometers

1148
00:49:30,596 --> 00:49:32,446
And then we have

1149
00:49:32,446 --> 00:49:33,606
which is a subclass of unit.

1150
00:49:33,976 --> 00:49:36,046
This represents unit

1151
00:49:36,156 --> 00:49:38,236
temperature, and

1152
00:49:38,716 --> 00:49:40,146
So here we have the unit class.

1153
00:49:40,446 --> 00:49:43,486
We have the subclass dimension

1154
00:49:44,206 --> 00:49:46,696
such as unit length,

1155
00:49:46,696 --> 00:49:48,326
unit speed, and a bunch more.

1156
00:49:49,586 --> 00:49:53,036
There's a helper class unit

1157
00:49:53,036 --> 00:49:55,276
between units within

1158
00:49:56,246 --> 00:49:59,576
and there is a struct

1159
00:49:59,576 --> 00:50:02,596
of course, in Objective-C but

1160
00:49:59,576 --> 00:50:02,596
of course, in Objective-C but

1161
00:50:03,036 --> 00:50:05,716
struct measurement which

1162
00:50:06,026 --> 00:50:07,606
with a unit such as miles,

1163
00:50:07,996 --> 00:50:09,776
so this basically is

1164
00:50:09,986 --> 00:50:11,466
and finally the icing

1165
00:50:11,896 --> 00:50:13,536
we have the measurement

1166
00:50:13,776 --> 00:50:16,076
which will take one of these

1167
00:50:16,076 --> 00:50:17,906
to the user in the

1168
00:50:18,416 --> 00:50:23,246
So it'll show 10 miles to a

1169
00:50:23,526 --> 00:50:26,496
but will show 16 kilometers, for

1170
00:50:26,726 --> 00:50:27,896
who's using the European system.

1171
00:50:27,896 --> 00:50:29,466
So it will do the

1172
00:50:29,596 --> 00:50:31,076
and show the user

1173
00:50:32,516 --> 00:50:37,186
[ Applause ]

1174
00:50:37,686 --> 00:50:40,506
Now out of the box, we have

1175
00:50:40,866 --> 00:50:41,706
Here's the whole set.

1176
00:50:42,236 --> 00:50:45,286
So these are subclasses of

1177
00:50:45,286 --> 00:50:46,406
of these unit families,

1178
00:50:46,406 --> 00:50:49,486
we actually have multiple units

1179
00:50:49,736 --> 00:50:52,016
Let me take a look at unit

1180
00:50:52,446 --> 00:50:54,916
You'll see that unit temperature

1181
00:50:54,916 --> 00:50:57,276
kelvin, Celsius, and Fahrenheit.

1182
00:50:57,596 --> 00:50:59,596
And these are defined

1183
00:50:59,656 --> 00:51:02,646
on the UnitTemperature

1184
00:50:59,656 --> 00:51:02,646
on the UnitTemperature

1185
00:51:02,646 --> 00:51:06,126
of the other dimensions also

1186
00:51:06,126 --> 00:51:07,836
that know how to convert

1187
00:51:08,306 --> 00:51:13,346
And even better news, you can

1188
00:51:13,386 --> 00:51:15,276
on top of what we

1189
00:51:15,276 --> 00:51:16,426
with what's already there

1190
00:51:16,426 --> 00:51:18,896
and you can also add your

1191
00:51:19,526 --> 00:51:22,426
So you can hear much more

1192
00:51:22,426 --> 00:51:25,816
at 4:00 o'clock,

1193
00:51:26,886 --> 00:51:29,166
DateInterval is a new type

1194
00:51:29,536 --> 00:51:31,906
It represents a date interval.

1195
00:51:32,386 --> 00:51:36,766
It's got three properties;

1196
00:51:36,766 --> 00:51:38,526
Fairly straightforward, so

1197
00:51:38,526 --> 00:51:40,026
fully independent

1198
00:51:40,026 --> 00:51:41,306
as three separate properties.

1199
00:51:41,546 --> 00:51:43,846
In addition to these properties,

1200
00:51:43,846 --> 00:51:46,476
to do things like check if a

1201
00:51:46,706 --> 00:51:48,976
or whether two date

1202
00:51:49,616 --> 00:51:54,296
Date intervals are of course

1203
00:51:54,346 --> 00:51:55,836
with the DateIntervalFormatter

1204
00:51:55,836 --> 00:51:58,806
That's something we -- That's an

1205
00:51:59,646 --> 00:52:01,766
We had an API string from to.

1206
00:51:59,646 --> 00:52:01,766
We had an API string from to.

1207
00:52:01,916 --> 00:52:03,406
Now we have the string from API

1208
00:52:03,566 --> 00:52:05,176
which simply takes

1209
00:52:05,766 --> 00:52:06,766
so fairly straightforward.

1210
00:52:07,816 --> 00:52:10,696
Now at this point let me

1211
00:52:10,696 --> 00:52:13,396
announcement about

1212
00:52:14,716 --> 00:52:16,486
So handling dates can be tricky.

1213
00:52:17,306 --> 00:52:19,296
Now this is not relationship

1214
00:52:19,506 --> 00:52:22,236
Okay? I'm not a doctor.

1215
00:52:24,086 --> 00:52:26,406
Let's say you want to

1216
00:52:26,866 --> 00:52:28,996
You might go ahead and create

1217
00:52:29,096 --> 00:52:31,426
start date and a

1218
00:52:31,836 --> 00:52:35,066
This is likely correct for

1219
00:52:35,066 --> 00:52:37,366
whatever you're trying to

1220
00:52:37,906 --> 00:52:39,636
but let's say you're

1221
00:52:40,326 --> 00:52:42,106
You might go ahead and

1222
00:52:43,276 --> 00:52:46,436
24 times 60 by 60 which is the

1223
00:52:47,016 --> 00:52:49,326
Well this is the number of

1224
00:52:49,836 --> 00:52:52,986
and it's often not

1225
00:52:53,346 --> 00:52:55,956
The reason is because days

1226
00:52:56,056 --> 00:52:57,836
Months aren't always 31 days.

1227
00:52:57,836 --> 00:53:00,456
Years aren't always

1228
00:52:57,836 --> 00:53:00,456
Years aren't always

1229
00:53:00,456 --> 00:53:02,946
We always keep those in

1230
00:53:02,946 --> 00:53:07,786
which are 23 hours or sometimes

1231
00:53:08,316 --> 00:53:10,016
So depending on what

1232
00:53:10,016 --> 00:53:12,476
with a DateInterval representing

1233
00:53:12,476 --> 00:53:14,476
to set an alarm exactly

1234
00:53:14,746 --> 00:53:17,606
Are you trying to send an alarm

1235
00:53:17,606 --> 00:53:18,896
You have to be careful.

1236
00:53:19,326 --> 00:53:22,746
Typically the correct solutions

1237
00:53:22,746 --> 00:53:25,306
class and you can hear

1238
00:53:25,306 --> 00:53:28,696
and also luckily their solutions

1239
00:53:28,696 --> 00:53:30,666
Solutions to Common Date

1240
00:53:30,666 --> 00:53:33,316
which I encourage you

1241
00:53:35,336 --> 00:53:38,906
ISO8601 DateFormatter is

1242
00:53:38,906 --> 00:53:40,226
It's a formatter for dates.

1243
00:53:40,896 --> 00:53:41,286
Thank you.

1244
00:53:42,516 --> 00:53:45,006
[ Applause ]

1245
00:53:45,506 --> 00:53:47,176
So clearly some of you have had

1246
00:53:47,236 --> 00:53:50,486
to use 8601 before;

1247
00:53:50,486 --> 00:53:52,666
It's an interchange

1248
00:53:52,666 --> 00:53:53,956
in an unambiguous manner.

1249
00:53:54,446 --> 00:53:56,786
So this is a separate

1250
00:53:56,786 --> 00:53:58,646
because unlike DateFormatter,

1251
00:53:58,646 --> 00:54:02,916
for user-localized dates, 8601

1252
00:53:58,646 --> 00:54:02,916
for user-localized dates, 8601

1253
00:54:03,426 --> 00:54:04,666
It's, you know, interchange

1254
00:54:04,666 --> 00:54:06,236
So it's a separate type.

1255
00:54:06,426 --> 00:54:08,076
We decided to keep

1256
00:54:08,546 --> 00:54:09,706
Using it is very simple.

1257
00:54:10,596 --> 00:54:11,786
So create a formatter.

1258
00:54:12,726 --> 00:54:16,486
Get yourself a date, again

1259
00:54:18,086 --> 00:54:20,616
And simply ask the formatter

1260
00:54:20,616 --> 00:54:22,006
and it will return

1261
00:54:22,256 --> 00:54:24,276
Now this DateFormatter

1262
00:54:24,836 --> 00:54:26,656
so you can actually -- Oh,

1263
00:54:26,686 --> 00:54:28,416
from that call, and

1264
00:54:28,416 --> 00:54:29,816
it's getting close to lunchtime.

1265
00:54:30,476 --> 00:54:33,266
And here is -- This formatter

1266
00:54:33,586 --> 00:54:34,596
also does parsing.

1267
00:54:34,786 --> 00:54:37,696
So you can get yourself a

1268
00:54:37,696 --> 00:54:40,116
from a string and it'll

1269
00:54:40,216 --> 00:54:41,276
So it goes both ways.

1270
00:54:42,626 --> 00:54:46,146
Now by default, this will do

1271
00:54:46,466 --> 00:54:48,956
however, there are options

1272
00:54:48,956 --> 00:54:51,926
of the behaviors,

1273
00:54:52,276 --> 00:54:55,096
Now quickly let me cover

1274
00:54:55,096 --> 00:54:56,676
we have.

1275
00:54:56,676 --> 00:55:00,236
URL has a bunch of

1276
00:54:56,676 --> 00:55:00,236
URL has a bunch of

1277
00:55:00,646 --> 00:55:04,276
such as canonical path of

1278
00:55:04,276 --> 00:55:06,566
like whether a volume

1279
00:55:06,566 --> 00:55:08,746
You can read all about

1280
00:55:09,046 --> 00:55:11,206
There's a new class

1281
00:55:11,606 --> 00:55:15,486
This class helps you gather

1282
00:55:15,486 --> 00:55:18,406
performance information

1283
00:55:18,406 --> 00:55:20,936
at the network performance

1284
00:55:21,956 --> 00:55:25,456
PersonNameComponentsFormatter

1285
00:55:26,006 --> 00:55:28,866
As you know, it takes a

1286
00:55:28,916 --> 00:55:30,696
in a locale-appropriate manner.

1287
00:55:31,176 --> 00:55:33,456
Well in this release, it

1288
00:55:33,456 --> 00:55:35,216
So you give it a name

1289
00:55:35,216 --> 00:55:37,386
to you the first name,

1290
00:55:37,626 --> 00:55:38,796
and it does a pretty good job

1291
00:55:38,796 --> 00:55:42,886
since it uses a statistical

1292
00:55:43,506 --> 00:55:47,986
And finally -- But there are

1293
00:55:47,986 --> 00:55:52,126
So don't get your

1294
00:55:52,956 --> 00:55:54,966
And DateComponentsFormatter,

1295
00:55:55,296 --> 00:55:58,426
again this is API we

1296
00:55:58,656 --> 00:56:01,386
In addition to the full

1297
00:55:58,656 --> 00:56:01,386
In addition to the full

1298
00:56:01,386 --> 00:56:03,976
we now have a brief style

1299
00:56:04,236 --> 00:56:06,946
And next release, maybe we'll

1300
00:56:07,646 --> 00:56:09,336
Okay, so that's it

1301
00:56:11,406 --> 00:56:13,676
Core data, just a quick

1302
00:56:13,716 --> 00:56:15,736
You already saw some

1303
00:56:15,736 --> 00:56:16,996
in core data with generics.

1304
00:56:16,996 --> 00:56:19,876
There's a bunch more

1305
00:56:19,876 --> 00:56:22,456
such as generational querying,

1306
00:56:22,786 --> 00:56:26,516
the NSFetchedResultsController

1307
00:56:26,516 --> 00:56:28,776
as well, I'm sorry,

1308
00:56:29,086 --> 00:56:30,706
You can hear all

1309
00:56:30,706 --> 00:56:32,346
at 10:00 a.m. What's

1310
00:56:33,116 --> 00:56:35,526
And one more talk I want

1311
00:56:36,516 --> 00:56:40,016
every year we get up here

1312
00:56:40,016 --> 00:56:42,676
new technologies were introduced

1313
00:56:42,676 --> 00:56:44,776
in a position to adopt

1314
00:56:44,776 --> 00:56:46,396
in the middle of something else

1315
00:56:46,466 --> 00:56:48,016
or maybe you wait a

1316
00:56:48,426 --> 00:56:49,896
Well, if you want

1317
00:56:49,896 --> 00:56:53,086
of recent APIs we've

1318
00:56:53,176 --> 00:56:55,116
to create modern

1319
00:56:55,236 --> 00:56:56,296
This is talk for you.

1320
00:56:56,556 --> 00:56:59,796
It will cover a lot of topics

1321
00:56:59,796 --> 00:57:01,966
to other sessions of

1322
00:56:59,796 --> 00:57:01,966
to other sessions of

1323
00:57:01,966 --> 00:57:04,096
but also prior WWDCs as well.

1324
00:57:04,476 --> 00:57:06,506
It's also appropriate

1325
00:57:06,506 --> 00:57:07,676
all experience levels.

1326
00:57:07,986 --> 00:57:09,456
It's also Friday

1327
00:57:09,456 --> 00:57:11,136
So I hope you're here.

1328
00:57:13,146 --> 00:57:16,476
Okay, so and here is

1329
00:57:16,476 --> 00:57:17,466
to for more information.

1330
00:57:17,826 --> 00:57:20,596
Please read the AppKit and

1331
00:57:20,596 --> 00:57:22,586
which you can find in

1332
00:57:22,586 --> 00:57:24,816
It's there, just raw

1333
00:57:24,816 --> 00:57:25,886
of the stuff I talked about.

1334
00:57:26,256 --> 00:57:27,926
Here are the related

1335
00:57:27,926 --> 00:57:29,076
There are of course many more.

1336
00:57:29,506 --> 00:57:30,186
Thank you very much.
