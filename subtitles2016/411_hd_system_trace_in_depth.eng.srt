1
00:00:08,516 --> 00:00:17,500
[ Music ]

2
00:00:21,516 --> 00:00:29,546
[ Applause ]

3
00:00:30,046 --> 00:00:30,456
&gt;&gt; Good morning.

4
00:00:30,456 --> 00:00:33,176
This is session 411,

5
00:00:33,356 --> 00:00:34,206
My name is Chad Woolf.

6
00:00:34,206 --> 00:00:35,396
&gt;&gt; And I'm Joe Grzywacz.

7
00:00:36,116 --> 00:00:38,226
&gt;&gt; And we are performance

8
00:00:39,366 --> 00:00:41,496
Now in last year's In Depth

9
00:00:41,496 --> 00:00:42,256
Time Profiler.

10
00:00:42,726 --> 00:00:44,876
And we showed you how to analyze

11
00:00:44,876 --> 00:00:46,206
down to the disassembly level.

12
00:00:46,286 --> 00:00:47,576
And our goal, then,

13
00:00:47,576 --> 00:00:49,246
to make your code

14
00:00:49,426 --> 00:00:52,976
Now at some point you may want

15
00:00:52,976 --> 00:00:56,206
on multiple CPUs in order

16
00:00:56,286 --> 00:00:59,636
But as you do this, you also

17
00:01:00,216 --> 00:01:01,916
Now as the system

18
00:01:01,916 --> 00:01:05,146
a couple of second-order effects

19
00:01:05,146 --> 00:01:07,886
in preemption, lock contention,

20
00:01:08,126 --> 00:01:10,376
Now any one of these

21
00:01:10,376 --> 00:01:12,546
to potentially offset the

22
00:01:12,696 --> 00:01:13,916
when you were doing

23
00:01:14,866 --> 00:01:16,546
So in today's session,

24
00:01:16,546 --> 00:01:19,966
to use system trace to analyze

25
00:01:20,416 --> 00:01:21,316
And we're going to show you how

26
00:01:21,316 --> 00:01:23,636
to efficiently load the

27
00:01:23,636 --> 00:01:24,796
optimum performance.

28
00:01:24,796 --> 00:01:27,516
So our session's going

29
00:01:27,516 --> 00:01:29,136
We're going to talk a little

30
00:01:29,136 --> 00:01:30,956
and why it applies to

31
00:01:31,316 --> 00:01:33,546
And then Joe and I are going to

32
00:01:33,686 --> 00:01:35,236
We're also going to talk a

33
00:01:35,536 --> 00:01:37,896
signposts, some a little

34
00:01:38,476 --> 00:01:39,966
and show you some

35
00:01:39,966 --> 00:01:41,336
to get the most out

36
00:01:42,736 --> 00:01:44,986
So why system trace for

37
00:01:45,456 --> 00:01:47,996
Well, when your application

38
00:01:47,996 --> 00:01:51,326
on the device, from the users'

39
00:01:52,186 --> 00:01:54,126
They don't see your

40
00:01:54,126 --> 00:01:56,176
with all these system

41
00:01:56,176 --> 00:01:58,956
for shared resources

42
00:01:59,526 --> 00:02:00,366
They just see your app.

43
00:01:59,526 --> 00:02:00,366
They just see your app.

44
00:02:00,366 --> 00:02:02,776
And so if your app

45
00:02:02,776 --> 00:02:05,216
of virtual memory

46
00:02:05,216 --> 00:02:07,356
to maybe a misprioritized

47
00:02:07,356 --> 00:02:09,056
to you looking for a fix.

48
00:02:09,056 --> 00:02:10,586
So that's the bad news.

49
00:02:11,796 --> 00:02:14,356
The good news is that when

50
00:02:14,356 --> 00:02:17,356
on the device, it is the most

51
00:02:17,916 --> 00:02:19,816
So the operating system knows

52
00:02:19,816 --> 00:02:22,196
as much CPU time and memory

53
00:02:22,946 --> 00:02:24,976
So when we talk about

54
00:02:25,106 --> 00:02:27,226
we're not really talking about

55
00:02:27,226 --> 00:02:28,466
about tuning your application

56
00:02:28,856 --> 00:02:30,296
to use the resources

57
00:02:31,256 --> 00:02:33,716
Now system trace is a

58
00:02:33,716 --> 00:02:35,676
It works great in all

59
00:02:36,546 --> 00:02:38,676
And when you take a recording

60
00:02:38,676 --> 00:02:40,006
into a special tracing mode

61
00:02:40,626 --> 00:02:43,956
that records all the scheduling

62
00:02:44,466 --> 00:02:46,236
and virtual memory

63
00:02:46,976 --> 00:02:49,076
Now this can accumulate

64
00:02:49,076 --> 00:02:50,006
It could be a lot of data.

65
00:02:50,286 --> 00:02:52,686
So one of the changes we

66
00:02:52,686 --> 00:02:55,096
that we put the template into

67
00:02:55,096 --> 00:02:56,926
And what that means

68
00:02:56,926 --> 00:02:58,966
about the last five seconds

69
00:02:59,506 --> 00:03:02,216
And the advantage here

70
00:02:59,506 --> 00:03:02,216
And the advantage here

71
00:03:02,366 --> 00:03:04,646
you can start your recording,

72
00:03:04,946 --> 00:03:06,166
take as long as you

73
00:03:06,166 --> 00:03:07,556
to reproduce the

74
00:03:07,796 --> 00:03:10,296
and when that performance

75
00:03:10,296 --> 00:03:12,366
and you get that last

76
00:03:12,366 --> 00:03:13,306
of actionable data.

77
00:03:14,016 --> 00:03:16,316
Now this is what five seconds

78
00:03:16,486 --> 00:03:18,096
These traces can

79
00:03:18,596 --> 00:03:20,876
We found it's very

80
00:03:20,876 --> 00:03:22,956
to correlate this data with some

81
00:03:22,956 --> 00:03:25,016
of the high-level activities

82
00:03:25,526 --> 00:03:27,466
such as am I updating

83
00:03:27,596 --> 00:03:29,526
did I have a download

84
00:03:29,596 --> 00:03:30,646
maybe am I updating a graph.

85
00:03:30,646 --> 00:03:31,976
Those kind of high level things.

86
00:03:32,806 --> 00:03:35,686
So this year in Instruments

87
00:03:35,686 --> 00:03:36,486
of Interest instrument.

88
00:03:37,666 --> 00:03:40,166
Now the Points of Interest

89
00:03:40,166 --> 00:03:42,976
blank canvas where you tell

90
00:03:42,976 --> 00:03:45,366
interesting and we'll put it

91
00:03:46,316 --> 00:03:48,836
Now you do this using

92
00:03:50,216 --> 00:03:52,056
And Signposts have been

93
00:03:52,216 --> 00:03:54,956
but we used to have -- the

94
00:03:55,026 --> 00:03:57,696
to call this direct system call

95
00:03:57,696 --> 00:03:59,286
out of these header files

96
00:03:59,286 --> 00:04:01,096
And it was kind of clunky.

97
00:03:59,286 --> 00:04:01,096
And it was kind of clunky.

98
00:04:01,776 --> 00:04:05,466
Now on top of it being clucky

99
00:04:05,466 --> 00:04:06,676
it just simply doesn't work.

100
00:04:06,836 --> 00:04:08,976
So what we're going to do

101
00:04:09,936 --> 00:04:12,006
But we have added in the new

102
00:04:12,006 --> 00:04:14,026
functions to do the

103
00:04:14,156 --> 00:04:16,065
And they're kdebug signpost.

104
00:04:16,065 --> 00:04:18,696
So they work great from

105
00:04:18,696 --> 00:04:19,836
and now SWIFT as well.

106
00:04:21,356 --> 00:04:22,836
So to get started,

107
00:04:22,836 --> 00:04:24,446
to drop a point event

108
00:04:24,446 --> 00:04:26,236
That's one of those

109
00:04:26,596 --> 00:04:29,926
And the way you do that

110
00:04:30,096 --> 00:04:31,236
and that's it.

111
00:04:31,236 --> 00:04:32,256
So inside of our Mouse Down,

112
00:04:32,256 --> 00:04:33,706
every time we hit our

113
00:04:33,706 --> 00:04:35,426
of these appear on the timeline.

114
00:04:36,126 --> 00:04:37,406
Now it does take

115
00:04:37,466 --> 00:04:40,606
The first one is a code that's

116
00:04:40,606 --> 00:04:42,686
between 0 and 16383.

117
00:04:42,916 --> 00:04:44,596
And it helps you

118
00:04:45,506 --> 00:04:47,376
The next four arguments

119
00:04:47,376 --> 00:04:48,426
and can be anything you want.

120
00:04:48,596 --> 00:04:50,656
By default Instruments will just

121
00:04:50,656 --> 00:04:53,606
Now you can name these things.

122
00:04:53,606 --> 00:04:55,446
Just got to toggle over to

123
00:04:55,446 --> 00:04:58,536
of the Instrument and

124
00:04:58,536 --> 00:05:01,636
And so we have our code

125
00:04:58,536 --> 00:05:01,636
And so we have our code

126
00:05:01,726 --> 00:05:04,836
So next time I take a recording,

127
00:05:04,836 --> 00:05:06,276
of Interest are now Mouse Downs.

128
00:05:07,486 --> 00:05:08,536
Now if you like Points

129
00:05:08,536 --> 00:05:10,056
you'll also like

130
00:05:10,056 --> 00:05:12,826
They're basically the same

131
00:05:12,826 --> 00:05:15,106
and actions or things that

132
00:05:15,106 --> 00:05:17,666
Now it's a little bit more

133
00:05:17,666 --> 00:05:18,876
of one call you do have two.

134
00:05:18,876 --> 00:05:20,336
You got a start and an end.

135
00:05:20,826 --> 00:05:23,576
And you also have a pairing

136
00:05:24,076 --> 00:05:25,896
Now by default it's a

137
00:05:25,896 --> 00:05:27,556
It just uses the

138
00:05:27,556 --> 00:05:31,996
to do is supply the same code

139
00:05:31,996 --> 00:05:33,506
Now we know that

140
00:05:33,506 --> 00:05:35,526
for all applications because

141
00:05:35,526 --> 00:05:38,526
to issue a flurry of starts

142
00:05:38,916 --> 00:05:40,096
And what that can be --

143
00:05:40,096 --> 00:05:43,466
inside Instruments there

144
00:05:43,466 --> 00:05:44,416
to pair those things up.

145
00:05:45,016 --> 00:05:46,626
So we do allow you to

146
00:05:46,936 --> 00:05:48,136
Come down here to

147
00:05:48,996 --> 00:05:52,426
You can select Code and First

148
00:05:53,766 --> 00:05:56,826
So Code and First Argument

149
00:05:56,826 --> 00:05:59,736
and end have to have the same

150
00:06:00,396 --> 00:06:02,356
So in this example what

151
00:06:02,356 --> 00:06:03,956
of URL downloads in parallel,

152
00:06:04,386 --> 00:06:07,276
and we've used the URL

153
00:06:07,366 --> 00:06:08,566
as a first argument.

154
00:06:08,566 --> 00:06:11,176
So now you can see

155
00:06:11,296 --> 00:06:12,246
on the Instruments timeline.

156
00:06:12,716 --> 00:06:15,046
If you use Code and Thread,

157
00:06:15,876 --> 00:06:19,426
you have to issue

158
00:06:19,426 --> 00:06:20,566
and end on the same thread.

159
00:06:20,566 --> 00:06:22,346
And here's an example

160
00:06:22,526 --> 00:06:24,456
But you can see it's

161
00:06:24,456 --> 00:06:25,606
of a dispatch apply block.

162
00:06:25,926 --> 00:06:30,076
So now we have four Regions

163
00:06:30,076 --> 00:06:32,566
that are -- we've got one for

164
00:06:34,476 --> 00:06:36,226
Now so far, the Regions

165
00:06:36,226 --> 00:06:37,576
of Interest you've seen

166
00:06:37,576 --> 00:06:38,476
It's all monochromatic.

167
00:06:38,716 --> 00:06:40,626
But if you're willing to

168
00:06:40,626 --> 00:06:42,926
you can come over here

169
00:06:42,926 --> 00:06:45,026
that says use the last

170
00:06:46,556 --> 00:06:48,786
And in your fourth argument,

171
00:06:48,786 --> 00:06:51,346
of these enumerations

172
00:06:51,346 --> 00:06:53,096
and those are the five

173
00:06:53,166 --> 00:06:56,346
And in this example when

174
00:06:56,346 --> 00:06:57,996
successfully, I've

175
00:06:58,416 --> 00:07:01,386
And if it completes with

176
00:06:58,416 --> 00:07:01,386
And if it completes with

177
00:07:01,456 --> 00:07:02,716
So you can see very

178
00:07:02,716 --> 00:07:04,196
between pass and fail.

179
00:07:05,916 --> 00:07:07,136
So now when we put

180
00:07:07,136 --> 00:07:10,126
you can see how it's much

181
00:07:10,126 --> 00:07:11,356
complicated trace I showed you

182
00:07:11,356 --> 00:07:14,356
with the high level

183
00:07:15,176 --> 00:07:16,256
So for example, you can see

184
00:07:16,256 --> 00:07:18,346
that this flurry activity

185
00:07:18,806 --> 00:07:20,576
by our download tasks.

186
00:07:21,626 --> 00:07:23,756
So let's talk about our

187
00:07:23,756 --> 00:07:26,386
We're going to be

188
00:07:26,386 --> 00:07:28,966
for you guys called Graphasaurus

189
00:07:28,966 --> 00:07:31,426
to Graphasaurus from

190
00:07:31,926 --> 00:07:33,006
But just like last

191
00:07:33,006 --> 00:07:34,906
we're going to be looking

192
00:07:35,116 --> 00:07:36,546
So these are problems

193
00:07:36,606 --> 00:07:38,156
when we were tuning

194
00:07:38,696 --> 00:07:40,206
And we decided to

195
00:07:40,206 --> 00:07:41,836
in an iOS application for demo.

196
00:07:42,686 --> 00:07:43,896
There is a new graphing style.

197
00:07:43,946 --> 00:07:46,066
This looks more like the state

198
00:07:46,066 --> 00:07:47,406
in Instruments because

199
00:07:47,406 --> 00:07:48,956
that we're tuning this year.

200
00:07:49,966 --> 00:07:51,926
And another difference from

201
00:07:51,926 --> 00:07:55,046
to assume that our code is --

202
00:07:55,046 --> 00:07:57,336
and it's already optimal

203
00:07:57,746 --> 00:07:58,626
And just like last year,

204
00:07:58,626 --> 00:08:00,146
we're going to be

205
00:07:58,626 --> 00:08:00,146
we're going to be

206
00:08:00,146 --> 00:08:01,916
on the CPU using core graphics.

207
00:08:03,306 --> 00:08:06,696
Now, what we did is we

208
00:08:07,286 --> 00:08:09,426
And we found that to generate

209
00:08:09,426 --> 00:08:11,406
It was going to take about

210
00:08:11,406 --> 00:08:13,836
And that's in the worst case

211
00:08:14,756 --> 00:08:17,466
Now that is larger than

212
00:08:17,466 --> 00:08:19,346
if we wanted to hit

213
00:08:19,346 --> 00:08:21,346
So we decided that

214
00:08:21,346 --> 00:08:22,776
to introduce some parallelism.

215
00:08:23,366 --> 00:08:25,626
Because what we know

216
00:08:25,626 --> 00:08:27,116
of these graphs can be

217
00:08:27,116 --> 00:08:29,816
And they take about five

218
00:08:30,006 --> 00:08:32,846
So we're thinking if throw

219
00:08:32,846 --> 00:08:36,166
and we have perfect scalability,

220
00:08:36,166 --> 00:08:38,645
over here should be able to

221
00:08:39,756 --> 00:08:41,986
To see how we did, show you

222
00:08:41,986 --> 00:08:43,405
I'm going to turn

223
00:08:43,405 --> 00:08:44,035
&gt;&gt; Thank you, Chad.

224
00:08:45,516 --> 00:08:49,566
[ Applause ]

225
00:08:50,066 --> 00:08:50,806
All right, so what

226
00:08:50,806 --> 00:08:52,776
at here is a Quick Time mirror

227
00:08:52,776 --> 00:08:54,646
of the iPad Pro I'm

228
00:08:54,646 --> 00:08:56,526
So you can see just

229
00:08:56,526 --> 00:08:58,606
you can pan around

230
00:08:59,026 --> 00:09:01,036
But when I eventually

231
00:08:59,026 --> 00:09:01,036
But when I eventually

232
00:09:01,276 --> 00:09:04,246
the animation gets just a little

233
00:09:04,246 --> 00:09:06,856
It's not awful, but

234
00:09:07,416 --> 00:09:09,966
So what I want to do now

235
00:09:10,076 --> 00:09:12,806
So let's go to it here to Xcode.

236
00:09:12,806 --> 00:09:15,896
And let's click and hold on the

237
00:09:16,966 --> 00:09:18,716
So that'll build your

238
00:09:19,196 --> 00:09:20,406
Install it on the device.

239
00:09:20,906 --> 00:09:23,416
And then Instruments will come

240
00:09:23,416 --> 00:09:24,996
where you decide how

241
00:09:25,766 --> 00:09:26,856
I'm going to go ahead

242
00:09:26,856 --> 00:09:28,136
on the System Trace template.

243
00:09:29,336 --> 00:09:33,376
And now from here before I

244
00:09:33,376 --> 00:09:35,956
and added some of the kdebug

245
00:09:35,956 --> 00:09:37,016
to my code ahead of time.

246
00:09:37,366 --> 00:09:39,326
And so I want to configure

247
00:09:39,326 --> 00:09:39,956
of Instruments.

248
00:09:40,366 --> 00:09:42,246
And so you do that down

249
00:09:43,156 --> 00:09:44,186
in the Record settings.

250
00:09:44,356 --> 00:09:47,356
And first off, I did want to

251
00:09:47,696 --> 00:09:50,526
so I put some unique numbers

252
00:09:51,116 --> 00:09:54,276
And I added three

253
00:09:54,386 --> 00:09:58,276
Code 0 is CADisplayLink.

254
00:09:58,716 --> 00:10:01,616
So that's that 60 hertz timer

255
00:09:58,716 --> 00:10:01,616
So that's that 60 hertz timer

256
00:10:01,806 --> 00:10:03,786
So basically this region

257
00:10:03,786 --> 00:10:06,086
to my frame time because this is

258
00:10:07,356 --> 00:10:11,446
Next is Code 1, and that

259
00:10:11,516 --> 00:10:13,306
So this one I'm actually

260
00:10:13,396 --> 00:10:15,356
the rectangles and the

261
00:10:15,356 --> 00:10:16,686
to be appearing on the screen.

262
00:10:17,656 --> 00:10:21,326
Finally Code 2 is

263
00:10:21,326 --> 00:10:23,856
So that's when I take those CG

264
00:10:23,856 --> 00:10:26,876
into a CG bitmap context and

265
00:10:28,156 --> 00:10:30,366
Finally, since my code's going

266
00:10:30,416 --> 00:10:33,006
and they're going to be emitting

267
00:10:33,236 --> 00:10:35,176
I need to tell Instruments

268
00:10:35,216 --> 00:10:37,296
And in this case, the

269
00:10:37,296 --> 00:10:38,686
since it'll be running

270
00:10:39,466 --> 00:10:41,346
All right, so I did

271
00:10:41,346 --> 00:10:42,696
I don't want to be

272
00:10:42,696 --> 00:10:44,336
and again every time

273
00:10:44,806 --> 00:10:47,296
So we go to file and

274
00:10:47,896 --> 00:10:49,586
I'll give it a descriptive name.

275
00:10:51,516 --> 00:10:53,976
Graphasaurus System

276
00:10:54,576 --> 00:10:57,046
And now let's say you close this

277
00:10:57,046 --> 00:10:59,086
you come back a week

278
00:10:59,086 --> 00:11:02,506
to the template chooser,

279
00:10:59,086 --> 00:11:02,506
to the template chooser,

280
00:11:03,386 --> 00:11:04,816
there's your template

281
00:11:05,566 --> 00:11:06,956
You don't have to redo

282
00:11:07,556 --> 00:11:08,266
Just hit record.

283
00:11:09,446 --> 00:11:11,126
Now Instruments is going

284
00:11:11,126 --> 00:11:12,226
of reproduce the problem here.

285
00:11:12,226 --> 00:11:14,566
So I'm just going to pinch out,

286
00:11:15,556 --> 00:11:17,016
Pinch out where it

287
00:11:17,266 --> 00:11:19,216
And then I'm going to just

288
00:11:19,216 --> 00:11:22,136
for a couple of seconds so that

289
00:11:22,136 --> 00:11:23,346
with the data I'm interested in.

290
00:11:23,746 --> 00:11:25,396
And once I do that,

291
00:11:26,036 --> 00:11:28,296
So now Instruments

292
00:11:28,296 --> 00:11:30,956
of that data off the device

293
00:11:31,286 --> 00:11:32,856
And since this was a

294
00:11:32,856 --> 00:11:34,156
you only get those

295
00:11:34,586 --> 00:11:36,816
Make sure that when you

296
00:11:36,936 --> 00:11:38,336
you stop the recording

297
00:11:38,646 --> 00:11:40,526
Otherwise, newer events are

298
00:11:40,526 --> 00:11:42,426
of push out the stuff you

299
00:11:43,826 --> 00:11:46,706
So we'll wait here for

300
00:11:50,656 --> 00:11:54,356
And there we go.

301
00:11:54,716 --> 00:11:56,306
So we're looking at a

302
00:11:56,986 --> 00:11:58,936
So let's make this

303
00:11:58,936 --> 00:12:00,006
so we can see what's going on.

304
00:11:58,936 --> 00:12:00,006
so we can see what's going on.

305
00:12:00,946 --> 00:12:03,096
All right, so this first

306
00:12:03,096 --> 00:12:04,606
new Points of Interest

307
00:12:05,006 --> 00:12:07,496
So let's zoom in on a

308
00:12:07,496 --> 00:12:10,086
of see what we're looking at.

309
00:12:10,086 --> 00:12:13,246
So now we can see there's

310
00:12:13,246 --> 00:12:15,716
I see DisplayLink, the

311
00:12:15,916 --> 00:12:17,126
And it looks like I'd expect.

312
00:12:17,126 --> 00:12:19,726
I have my big blue

313
00:12:20,096 --> 00:12:23,276
And inside there's four pairs

314
00:12:23,276 --> 00:12:24,516
and rendering those graphs.

315
00:12:24,836 --> 00:12:25,726
And so that looks good.

316
00:12:26,326 --> 00:12:28,976
But when I mouse

317
00:12:29,146 --> 00:12:31,756
you get a little tool tip

318
00:12:31,756 --> 00:12:33,496
provided along with

319
00:12:33,836 --> 00:12:36,526
And I'm actually running here

320
00:12:36,526 --> 00:12:39,136
So it's about half of the

321
00:12:39,136 --> 00:12:39,806
So that's not good.

322
00:12:40,706 --> 00:12:41,926
But this was just one frame.

323
00:12:41,926 --> 00:12:42,806
I rendered a ton.

324
00:12:43,056 --> 00:12:44,676
So what does it look

325
00:12:44,916 --> 00:12:47,886
Well, we come down here and

326
00:12:48,206 --> 00:12:50,206
This is currently showing

327
00:12:50,206 --> 00:12:51,206
of all those regions.

328
00:12:51,506 --> 00:12:53,536
So you could look through

329
00:12:53,536 --> 00:12:54,986
at the arguments and et cetera.

330
00:12:55,646 --> 00:12:58,946
But we did a table here that

331
00:12:59,166 --> 00:13:01,986
It's called the KDebug Interval

332
00:12:59,166 --> 00:13:01,986
It's called the KDebug Interval

333
00:13:02,846 --> 00:13:05,136
And when I select that

334
00:13:05,136 --> 00:13:06,376
that Graphasaurus 2 emitted.

335
00:13:07,026 --> 00:13:09,026
And we can see here's

336
00:13:09,166 --> 00:13:12,976
I rendered 152 frames, and

337
00:13:12,976 --> 00:13:14,426
about 28 milliseconds.

338
00:13:14,426 --> 00:13:16,116
So yeah, in average,

339
00:13:16,176 --> 00:13:17,636
You can see the min, the max,

340
00:13:17,636 --> 00:13:19,186
the standard deviation

341
00:13:19,876 --> 00:13:22,276
You can dive in with this

342
00:13:22,276 --> 00:13:25,556
And now that'll give you a

343
00:13:25,556 --> 00:13:26,886
Those are all the

344
00:13:26,886 --> 00:13:28,486
that were my CADisplayLink

345
00:13:29,366 --> 00:13:31,456
So I'm going to -- from

346
00:13:31,456 --> 00:13:33,116
by anything you want,

347
00:13:33,116 --> 00:13:35,086
whatever is important

348
00:13:35,416 --> 00:13:36,876
Here I just want to

349
00:13:37,926 --> 00:13:40,476
And then what I'm going

350
00:13:40,476 --> 00:13:43,116
I'm going to pick one of

351
00:13:43,116 --> 00:13:45,556
in the middle, and now

352
00:13:45,556 --> 00:13:47,086
when I click on one

353
00:13:47,396 --> 00:13:49,036
the graph view up above shifted.

354
00:13:49,656 --> 00:13:51,596
And what happened was it went

355
00:13:51,696 --> 00:13:55,636
and it made the region

356
00:13:55,966 --> 00:13:56,546
Here it is.

357
00:13:56,986 --> 00:13:59,106
And it put this blue

358
00:13:59,106 --> 00:14:00,106
at the beginning of that region.

359
00:13:59,106 --> 00:14:00,106
at the beginning of that region.

360
00:14:00,106 --> 00:14:01,726
So you kind of correlate

361
00:14:01,726 --> 00:14:04,036
on in the bottom with where it

362
00:14:04,826 --> 00:14:05,966
So now I'm looking

363
00:14:06,476 --> 00:14:09,976
You can also control-click

364
00:14:10,076 --> 00:14:11,356
and choose set time filter.

365
00:14:11,956 --> 00:14:13,406
And what that'll do

366
00:14:13,406 --> 00:14:15,426
in the detail view that's

367
00:14:15,526 --> 00:14:17,816
and it does the same up in

368
00:14:17,816 --> 00:14:19,656
So you can use that to kind

369
00:14:19,656 --> 00:14:22,236
that you're interested in

370
00:14:22,236 --> 00:14:24,726
of a visual cue at the

371
00:14:24,786 --> 00:14:25,826
So now that I've done that.

372
00:14:26,416 --> 00:14:27,646
I'm looking at this frame.

373
00:14:27,776 --> 00:14:30,096
I can see that my

374
00:14:30,096 --> 00:14:30,796
It ended here.

375
00:14:30,796 --> 00:14:32,896
But I don't really know

376
00:14:32,956 --> 00:14:35,196
All this is telling you is

377
00:14:35,546 --> 00:14:37,156
You don't know if your

378
00:14:37,256 --> 00:14:38,126
if it went to sleep.

379
00:14:38,326 --> 00:14:39,956
You can't tell from this graph.

380
00:14:40,016 --> 00:14:41,246
So we need to dive in deeper.

381
00:14:42,436 --> 00:14:44,736
Here in the top right of

382
00:14:45,186 --> 00:14:47,386
we're currently on the

383
00:14:47,386 --> 00:14:50,076
which is those list of all the

384
00:14:50,076 --> 00:14:52,926
You could click here

385
00:14:52,996 --> 00:14:54,546
to see all the threads

386
00:14:55,266 --> 00:14:58,086
Alternatively, let's say we

387
00:14:58,086 --> 00:14:59,366
at a thread in our detail view.

388
00:14:59,816 --> 00:15:03,066
If you option-click, you'll see

389
00:14:59,816 --> 00:15:03,066
If you option-click, you'll see

390
00:15:03,066 --> 00:15:04,456
of style that you

391
00:15:04,796 --> 00:15:06,606
and choose Reveal

392
00:15:07,196 --> 00:15:08,956
So that'll jump you

393
00:15:08,996 --> 00:15:11,486
and preselect that

394
00:15:12,036 --> 00:15:14,466
So we can see here, make

395
00:15:16,146 --> 00:15:17,706
It selected the main

396
00:15:18,196 --> 00:15:19,776
And if I look at

397
00:15:19,776 --> 00:15:22,086
of other dispatch worker

398
00:15:22,286 --> 00:15:25,296
And these two in particular,

399
00:15:25,296 --> 00:15:27,226
and the one below it,

400
00:15:27,876 --> 00:15:31,196
These are all those red

401
00:15:32,196 --> 00:15:36,006
So if I option drag to zoom

402
00:15:36,586 --> 00:15:38,446
we can actually start

403
00:15:38,666 --> 00:15:39,526
by hovering over them.

404
00:15:40,456 --> 00:15:43,206
Here, this is a ulock wake

405
00:15:43,206 --> 00:15:44,076
up from some sort of lock.

406
00:15:44,476 --> 00:15:47,906
Here's a ulock wait system call,

407
00:15:48,176 --> 00:15:49,976
And if you keep hovering over

408
00:15:49,976 --> 00:15:51,166
to see that pattern repeating.

409
00:15:51,166 --> 00:15:53,606
There's a lot of this ulock

410
00:15:54,336 --> 00:15:57,346
So if you click, you'll set that

411
00:15:57,826 --> 00:16:00,156
And if you come down here

412
00:15:57,826 --> 00:16:00,156
And if you come down here

413
00:16:00,156 --> 00:16:03,106
and narrative view,

414
00:16:03,496 --> 00:16:06,706
it'll actually show you in that

415
00:16:06,706 --> 00:16:08,736
up above, what was going on

416
00:16:08,736 --> 00:16:09,926
All right, this is a list

417
00:16:09,926 --> 00:16:11,956
of everything this thread

418
00:16:11,956 --> 00:16:12,836
of this thread's life.

419
00:16:13,236 --> 00:16:15,136
So here we can see one

420
00:16:15,226 --> 00:16:16,956
Okay, well where

421
00:16:17,556 --> 00:16:20,826
Whenever possible Instruments is

422
00:16:20,826 --> 00:16:22,006
with those system events.

423
00:16:22,556 --> 00:16:24,886
And you can find those

424
00:16:25,336 --> 00:16:26,956
in the Extended Detail View.

425
00:16:28,056 --> 00:16:32,816
So we can see I have some SWIFT

426
00:16:32,816 --> 00:16:35,476
of it it's actually creating

427
00:16:36,076 --> 00:16:39,196
Okay, and down below

428
00:16:39,196 --> 00:16:40,236
where it's taking that lock.

429
00:16:40,986 --> 00:16:43,436
Kind of unexpected, wasn't

430
00:16:43,436 --> 00:16:45,306
of NSAttributedString,

431
00:16:45,696 --> 00:16:47,616
So what are the ramifications

432
00:16:48,176 --> 00:16:50,396
Let's go back over to the

433
00:16:50,396 --> 00:16:51,126
and see what happens.

434
00:16:51,586 --> 00:16:55,626
So it took us 109 microseconds

435
00:16:55,626 --> 00:16:57,956
And then we blocked for

436
00:16:58,476 --> 00:17:00,896
What's really cool this

437
00:16:58,476 --> 00:17:00,896
What's really cool this

438
00:17:01,116 --> 00:17:03,276
which thread made

439
00:17:03,276 --> 00:17:05,516
So basically who released that

440
00:17:05,516 --> 00:17:07,326
And we can see that

441
00:17:07,326 --> 00:17:12,576
by a Graphasaurus

442
00:17:12,576 --> 00:17:16,236
Okay. And we can see that even

443
00:17:16,665 --> 00:17:19,376
we still waiting another 98

444
00:17:19,376 --> 00:17:20,136
give a CPU back.

445
00:17:20,606 --> 00:17:23,516
All right, let's look at what

446
00:17:23,516 --> 00:17:25,726
Why did he release that lock?

447
00:17:25,726 --> 00:17:28,056
Option click on that, choose

448
00:17:28,836 --> 00:17:32,436
That'll select that other thread

449
00:17:32,436 --> 00:17:34,826
in the narrative view, we'll

450
00:17:34,826 --> 00:17:35,366
at that time.

451
00:17:35,716 --> 00:17:37,776
And we can see he was

452
00:17:37,986 --> 00:17:39,396
So he was releasing that lock.

453
00:17:39,806 --> 00:17:40,396
That makes sense.

454
00:17:40,396 --> 00:17:43,066
So we can kind of see that we

455
00:17:43,066 --> 00:17:45,776
in parallel, except they're kind

456
00:17:45,956 --> 00:17:47,036
And so they're doing a bunch

457
00:17:47,036 --> 00:17:49,236
of things besides

458
00:17:49,916 --> 00:17:53,966
Another way to see that

459
00:17:54,876 --> 00:17:57,466
We have those thread

460
00:17:57,516 --> 00:17:58,556
Let me make this a

461
00:17:58,926 --> 00:18:00,676
So if you hover over

462
00:17:58,926 --> 00:18:00,676
So if you hover over

463
00:18:00,826 --> 00:18:02,436
you'll see it was

464
00:18:02,436 --> 00:18:03,566
of time, 64 microseconds.

465
00:18:03,566 --> 00:18:06,046
Then it was blocked

466
00:18:06,376 --> 00:18:08,336
Then it was runnable

467
00:18:08,336 --> 00:18:09,696
so that means it's

468
00:18:09,696 --> 00:18:11,486
And then finally it runs.

469
00:18:11,686 --> 00:18:13,276
And if we kept digging

470
00:18:13,276 --> 00:18:15,246
we would see this pattern

471
00:18:15,866 --> 00:18:18,616
And so what becomes clear is

472
00:18:18,616 --> 00:18:19,166
over this lock.

473
00:18:19,576 --> 00:18:21,696
And I'm creating a whole bunch

474
00:18:22,566 --> 00:18:24,926
So if this is taking so much

475
00:18:25,126 --> 00:18:27,046
why don't I see that

476
00:18:27,566 --> 00:18:29,246
Well, truth be told if

477
00:18:29,246 --> 00:18:30,666
at the time profiler,

478
00:18:31,006 --> 00:18:32,926
But it's only like four

479
00:18:32,926 --> 00:18:34,746
It didn't really stick

480
00:18:35,146 --> 00:18:36,756
And a big reason for that is

481
00:18:36,756 --> 00:18:38,646
because these threads are

482
00:18:38,646 --> 00:18:40,156
in the blocked and

483
00:18:40,156 --> 00:18:42,496
And time profiler only

484
00:18:42,496 --> 00:18:45,046
on a CPU, so it's not

485
00:18:45,636 --> 00:18:49,116
And so what I need to do to fix

486
00:18:49,116 --> 00:18:52,136
I'm just putting some attributed

487
00:18:52,136 --> 00:18:54,546
There's not that many states

488
00:18:54,906 --> 00:18:56,966
I should just cash them ahead

489
00:18:56,966 --> 00:18:58,116
up in a dictionary lock free.

490
00:18:58,476 --> 00:19:00,566
And everything should

491
00:18:58,476 --> 00:19:00,566
And everything should

492
00:19:00,906 --> 00:19:03,106
And to show you what that

493
00:19:04,516 --> 00:19:10,546
[ Applause ]

494
00:19:11,046 --> 00:19:13,406
&gt;&gt; Okay, so what Joe is

495
00:19:13,406 --> 00:19:14,206
Contention pattern.

496
00:19:14,276 --> 00:19:16,766
And this is where we have

497
00:19:16,766 --> 00:19:19,536
And they're contending for

498
00:19:19,536 --> 00:19:21,596
in the attributed string

499
00:19:21,596 --> 00:19:23,876
Now even though we're

500
00:19:23,876 --> 00:19:25,136
for a few microseconds,

501
00:19:25,166 --> 00:19:28,726
the performance impact is much

502
00:19:28,726 --> 00:19:29,896
And Joe showed you

503
00:19:29,896 --> 00:19:31,846
But I want to talk about

504
00:19:33,356 --> 00:19:35,886
So when your thread is in

505
00:19:35,926 --> 00:19:37,506
that the thread is on the CPU.

506
00:19:37,836 --> 00:19:39,136
It's running its full stride,

507
00:19:39,136 --> 00:19:40,676
and all of those

508
00:19:40,676 --> 00:19:42,966
that you were making with a time

509
00:19:43,306 --> 00:19:45,666
Now at some point, you

510
00:19:45,936 --> 00:19:46,966
and then some short period

511
00:19:46,966 --> 00:19:49,476
after that it puts the

512
00:19:49,756 --> 00:19:53,206
And so what's happening here is

513
00:19:53,286 --> 00:19:56,176
that that lock is being

514
00:19:56,176 --> 00:19:59,196
and so it asks the kernel

515
00:19:59,496 --> 00:20:01,596
and put you back when

516
00:19:59,496 --> 00:20:01,596
and put you back when

517
00:20:01,596 --> 00:20:03,086
sorry, when that lock

518
00:20:03,766 --> 00:20:06,446
Now 3.42 microseconds

519
00:20:06,496 --> 00:20:07,826
We do go into the

520
00:20:08,666 --> 00:20:10,026
But now when we're in

521
00:20:10,096 --> 00:20:11,366
this is the amount

522
00:20:11,366 --> 00:20:13,006
to get back onto the CPU.

523
00:20:13,786 --> 00:20:15,306
Now if you'll notice we're

524
00:20:15,306 --> 00:20:16,566
for about 7 microseconds.

525
00:20:16,566 --> 00:20:18,776
That's nearly twice

526
00:20:18,776 --> 00:20:20,506
that that lock was

527
00:20:20,736 --> 00:20:22,406
So we're getting a

528
00:20:23,196 --> 00:20:25,806
Now another way to look at this

529
00:20:25,806 --> 00:20:28,116
into the thread strategy,

530
00:20:28,546 --> 00:20:30,926
create a time filter selection

531
00:20:31,466 --> 00:20:33,966
and then change the detail

532
00:20:33,966 --> 00:20:35,136
over here to the thread summary.

533
00:20:35,136 --> 00:20:38,636
And what that will show you

534
00:20:38,636 --> 00:20:39,306
thread state.

535
00:20:39,446 --> 00:20:41,016
In this particular example,

536
00:20:41,016 --> 00:20:42,686
we can see that our

537
00:20:42,686 --> 00:20:44,236
about 82 percent of the time.

538
00:20:45,136 --> 00:20:46,106
Now what that means is

539
00:20:46,106 --> 00:20:48,196
that we're still getting some

540
00:20:48,196 --> 00:20:50,646
We are getting some work

541
00:20:50,646 --> 00:20:53,846
that linear scaling, perfect

542
00:20:54,176 --> 00:20:56,226
We are still wasting

543
00:20:56,946 --> 00:21:00,736
Now when Joe makes the fix

544
00:20:56,946 --> 00:21:00,736
Now when Joe makes the fix

545
00:21:00,736 --> 00:21:02,316
what's going to happen -- well,

546
00:21:02,316 --> 00:21:05,216
The first one is that the update

547
00:21:05,216 --> 00:21:07,366
to get a little shorter

548
00:21:07,366 --> 00:21:08,816
when we're caching

549
00:21:09,286 --> 00:21:10,106
But more importantly,

550
00:21:10,426 --> 00:21:12,716
that thread is no running a

551
00:21:12,996 --> 00:21:14,746
So you're going to get

552
00:21:14,866 --> 00:21:16,946
So if you add a -- so if you

553
00:21:16,946 --> 00:21:18,976
you're going to half the amount

554
00:21:18,976 --> 00:21:19,766
And that's great.

555
00:21:20,106 --> 00:21:21,806
So if you have a fix like that,

556
00:21:21,806 --> 00:21:23,006
you should definitely

557
00:21:24,516 --> 00:21:25,656
Now let's talk about preemption.

558
00:21:25,656 --> 00:21:28,386
We didn't get to see any

559
00:21:28,386 --> 00:21:30,216
it is something that shows

560
00:21:30,216 --> 00:21:31,786
up quite frequently

561
00:21:32,436 --> 00:21:35,306
And what preemption is is

562
00:21:35,306 --> 00:21:37,586
of your thread from the CPU.

563
00:21:38,926 --> 00:21:42,076
So some other higher

564
00:21:42,076 --> 00:21:42,996
needed the CPUs.

565
00:21:42,996 --> 00:21:43,916
There were none available,

566
00:21:44,256 --> 00:21:45,716
and so your thread

567
00:21:46,476 --> 00:21:48,146
Now there's an exception

568
00:21:48,146 --> 00:21:49,906
There is a voluntary

569
00:21:49,906 --> 00:21:51,276
that you might see

570
00:21:51,716 --> 00:21:53,336
And that occurs inside

571
00:21:53,506 --> 00:21:55,776
When a spin lock realizes it's

572
00:21:55,776 --> 00:21:58,566
progress, it can call into

573
00:21:59,186 --> 00:22:01,156
and essentially yield

574
00:21:59,186 --> 00:22:01,156
and essentially yield

575
00:22:01,156 --> 00:22:02,436
over the holder of the lock.

576
00:22:03,496 --> 00:22:05,686
And so what that looks

577
00:22:05,686 --> 00:22:07,516
in the thread narrative

578
00:22:07,516 --> 00:22:08,346
thread switch.

579
00:22:08,756 --> 00:22:11,666
And then the preemption

580
00:22:11,666 --> 00:22:13,706
that it was yielding

581
00:22:13,706 --> 00:22:15,996
than being I think

582
00:22:16,206 --> 00:22:19,286
So another lighter weight form

583
00:22:19,286 --> 00:22:21,556
of preemption is called

584
00:22:21,556 --> 00:22:23,946
And the interrupted state is

585
00:22:23,946 --> 00:22:28,526
on a CPU and that CPU has to

586
00:22:28,986 --> 00:22:30,346
So your thread is suspended.

587
00:22:30,506 --> 00:22:32,906
The interrupt handler runs, and

588
00:22:33,186 --> 00:22:35,536
Now at this point, the priority

589
00:22:35,536 --> 00:22:36,686
You can have the

590
00:22:36,686 --> 00:22:37,846
It really won't matter.

591
00:22:38,186 --> 00:22:40,446
The interrupt will

592
00:22:40,446 --> 00:22:43,116
Now the good news is that

593
00:22:43,116 --> 00:22:44,246
a couple of microseconds.

594
00:22:44,246 --> 00:22:46,976
And typically they won't add

595
00:22:46,976 --> 00:22:48,706
of performance problem

596
00:22:48,946 --> 00:22:51,636
But they do show up, so that's

597
00:22:51,946 --> 00:22:52,876
Now another nice feature

598
00:22:52,876 --> 00:22:55,836
of Instruments 8 is called a

599
00:22:55,836 --> 00:23:00,086
And what that instrument does

600
00:22:55,836 --> 00:23:00,086
And what that instrument does

601
00:23:00,466 --> 00:23:02,226
in your system trace that

602
00:23:02,226 --> 00:23:04,276
to dropped frames, for example.

603
00:23:04,526 --> 00:23:06,026
Now it does that in two ways.

604
00:23:06,026 --> 00:23:07,856
The first way is this

605
00:23:07,856 --> 00:23:10,136
And this shows you a picture

606
00:23:10,266 --> 00:23:12,466
of what the scheduling

607
00:23:12,466 --> 00:23:13,536
All of the threads

608
00:23:13,536 --> 00:23:16,376
to run underneath the

609
00:23:17,516 --> 00:23:19,076
So you can tell that

610
00:23:19,076 --> 00:23:20,646
in time, we had three threads.

611
00:23:20,736 --> 00:23:23,106
One was a kernel thread and

612
00:23:23,106 --> 00:23:23,976
And these are the threads

613
00:23:23,976 --> 00:23:25,856
that were not blocked

614
00:23:26,156 --> 00:23:28,426
You can see the core

615
00:23:28,736 --> 00:23:32,086
Now the other feature of this

616
00:23:32,086 --> 00:23:33,676
Interactive Load Average graph.

617
00:23:34,396 --> 00:23:35,376
And what this is is a --

618
00:23:35,376 --> 00:23:38,116
each one of these bars

619
00:23:38,116 --> 00:23:38,796
window of time.

620
00:23:38,796 --> 00:23:42,686
And the height of the bar is the

621
00:23:42,846 --> 00:23:44,146
in that 10 millisecond period.

622
00:23:44,546 --> 00:23:47,376
So that's threads that are

623
00:23:47,666 --> 00:23:48,956
preempted, or interrupted.

624
00:23:49,206 --> 00:23:50,456
Essentially threads

625
00:23:51,346 --> 00:23:53,786
Now since it's the User

626
00:23:53,786 --> 00:23:56,366
we only include threads that

627
00:23:56,366 --> 00:23:58,996
or equal to 33 because

628
00:23:58,996 --> 00:24:01,466
those are the threads with a

629
00:23:58,996 --> 00:24:01,466
those are the threads with a

630
00:24:01,826 --> 00:24:03,956
with the user interactive

631
00:24:04,826 --> 00:24:06,586
Now to make it stand out

632
00:24:06,876 --> 00:24:08,806
when the thread bars

633
00:24:08,806 --> 00:24:11,486
that your load average has

634
00:24:11,486 --> 00:24:12,736
on that particular device.

635
00:24:12,946 --> 00:24:15,176
So wherever you see

636
00:24:15,436 --> 00:24:17,886
you can see that that's a

637
00:24:17,886 --> 00:24:21,406
So you might want to zoom in

638
00:24:21,406 --> 00:24:23,226
that are orange, make

639
00:24:23,226 --> 00:24:24,726
that you have running

640
00:24:24,726 --> 00:24:26,086
at the right quality

641
00:24:28,046 --> 00:24:29,886
Now when Joe makes this

642
00:24:29,886 --> 00:24:30,736
up with a little

643
00:24:30,736 --> 00:24:32,226
We're going to be able

644
00:24:32,306 --> 00:24:35,136
And that new feature are these

645
00:24:35,136 --> 00:24:36,766
to the hover labels that

646
00:24:37,066 --> 00:24:39,176
except on Graphasaurus

647
00:24:39,176 --> 00:24:41,156
And then the hover labels

648
00:24:41,696 --> 00:24:42,776
So to show how that

649
00:24:42,776 --> 00:24:44,476
I'm going to turn

650
00:24:45,516 --> 00:24:49,646
[ Applause ]

651
00:24:50,146 --> 00:24:50,736
&gt;&gt; Thanks, Chad.

652
00:24:51,216 --> 00:24:53,626
So yeah, so I added the

653
00:24:53,626 --> 00:24:55,406
went back to 60 frames

654
00:24:55,936 --> 00:24:58,086
added the new generation

655
00:24:58,086 --> 00:24:59,626
and things got slow again.

656
00:24:59,626 --> 00:25:02,166
You can kind of tell there's a

657
00:24:59,626 --> 00:25:02,166
You can kind of tell there's a

658
00:25:02,166 --> 00:25:02,456
and there.

659
00:25:02,676 --> 00:25:03,916
So looked in at time profiler,

660
00:25:04,346 --> 00:25:06,106
wasn't anything obvious

661
00:25:06,106 --> 00:25:07,676
There wasn't any extra

662
00:25:08,026 --> 00:25:09,516
So I went back and

663
00:25:09,516 --> 00:25:10,386
that you're looking at here.

664
00:25:11,156 --> 00:25:12,816
Before I took that

665
00:25:12,816 --> 00:25:15,276
and added a new Signpost code,

666
00:25:15,306 --> 00:25:16,826
to represent my GenToolTips

667
00:25:16,826 --> 00:25:19,036
And you'll see that

668
00:25:19,846 --> 00:25:23,376
So let's zoom in on one

669
00:25:26,436 --> 00:25:30,836
All right, so we can see

670
00:25:30,836 --> 00:25:31,956
these GenToolTips.

671
00:25:32,346 --> 00:25:33,366
And so it's important

672
00:25:33,366 --> 00:25:35,126
of describe how my

673
00:25:35,526 --> 00:25:38,106
Basically whenever this

674
00:25:38,376 --> 00:25:39,906
for every single

675
00:25:39,956 --> 00:25:42,506
I go and do a dispatch

676
00:25:42,806 --> 00:25:44,526
for that graph and

677
00:25:44,526 --> 00:25:47,056
to go generate the tool tip

678
00:25:47,916 --> 00:25:50,396
And I do that for every

679
00:25:50,846 --> 00:25:54,306
But then I had kind of a clever

680
00:25:54,306 --> 00:25:56,896
to kind of call my rendering

681
00:25:56,896 --> 00:25:59,066
to wait for the tool

682
00:25:59,376 --> 00:26:02,416
And so I do a dispatch group

683
00:25:59,376 --> 00:26:02,416
And so I do a dispatch group

684
00:26:02,756 --> 00:26:05,086
And we can see that actually

685
00:26:05,206 --> 00:26:06,426
Here's my start of my frame.

686
00:26:06,426 --> 00:26:07,596
The CADisplayLink time.

687
00:26:07,596 --> 00:26:10,196
We can see some of those

688
00:26:10,486 --> 00:26:11,736
Let me scroll over to the right.

689
00:26:11,736 --> 00:26:13,006
You can see actually

690
00:26:13,006 --> 00:26:14,466
Actually, barely

691
00:26:14,466 --> 00:26:15,816
until my render frame is done.

692
00:26:15,816 --> 00:26:17,006
So it looks like

693
00:26:17,006 --> 00:26:18,276
I can give myself

694
00:26:18,276 --> 00:26:19,146
That looks nice.

695
00:26:19,676 --> 00:26:24,226
However, when I look at my

696
00:26:25,366 --> 00:26:28,526
it's taking 17.4 milliseconds.

697
00:26:28,606 --> 00:26:31,716
Pretty close, but it's

698
00:26:32,386 --> 00:26:34,506
So again, that was just

699
00:26:34,506 --> 00:26:36,896
Let's look at what we

700
00:26:37,196 --> 00:26:39,826
Let's go back to that KDebug

701
00:26:40,596 --> 00:26:42,646
Here we can see our

702
00:26:42,646 --> 00:26:44,276
I did about 260.

703
00:26:44,276 --> 00:26:47,276
That's more than we did the

704
00:26:47,746 --> 00:26:49,856
Sixteen milliseconds on average.

705
00:26:49,856 --> 00:26:51,696
That's actually less

706
00:26:51,696 --> 00:26:53,466
So that actually

707
00:26:53,866 --> 00:26:57,106
However, this max is still

708
00:26:57,676 --> 00:26:59,936
And if we look at all

709
00:27:01,406 --> 00:27:03,946
let's sort this by duration

710
00:27:04,396 --> 00:27:06,046
we can see here's

711
00:27:06,166 --> 00:27:07,876
There's a bunch in the 18s.

712
00:27:07,876 --> 00:27:09,766
There's some here in the 17s.

713
00:27:09,766 --> 00:27:10,996
A lot in the 17s.

714
00:27:10,996 --> 00:27:12,076
More in these upper 16s.

715
00:27:12,326 --> 00:27:13,586
So we still have

716
00:27:13,586 --> 00:27:15,076
that are actually

717
00:27:15,486 --> 00:27:17,686
Not by much, but

718
00:27:17,686 --> 00:27:19,246
That means we're going

719
00:27:20,086 --> 00:27:22,106
So this time, where

720
00:27:22,106 --> 00:27:25,556
We could go back to diving down

721
00:27:25,556 --> 00:27:27,926
at all our threads and the

722
00:27:27,926 --> 00:27:29,416
and thread events and

723
00:27:29,916 --> 00:27:34,256
But whenever possible, well

724
00:27:34,256 --> 00:27:36,926
bunch of instruments up here,

725
00:27:36,926 --> 00:27:39,296
of like higher level aggregate

726
00:27:39,296 --> 00:27:41,056
of useful to look at that first.

727
00:27:41,056 --> 00:27:44,066
So before you go diving down

728
00:27:44,066 --> 00:27:46,396
take a look at these

729
00:27:46,776 --> 00:27:49,106
And so what I'm going to

730
00:27:49,106 --> 00:27:50,666
at this User Interactive

731
00:27:50,666 --> 00:27:52,376
That's part of that

732
00:27:53,796 --> 00:27:57,826
And let's go ahead and zoom

733
00:27:57,826 --> 00:28:00,026
so we can see all the data

734
00:27:57,826 --> 00:28:00,026
so we can see all the data

735
00:28:01,016 --> 00:28:04,206
And when we've done that, I'm

736
00:28:05,136 --> 00:28:07,836
You can see there's a fair

737
00:28:08,016 --> 00:28:08,946
Make this a little bit larger.

738
00:28:08,946 --> 00:28:11,826
So you can see there's a

739
00:28:11,826 --> 00:28:14,586
which means we have more user

740
00:28:14,586 --> 00:28:15,406
than we have cores, right.

741
00:28:15,406 --> 00:28:17,046
These are threads that are

742
00:28:17,046 --> 00:28:20,226
to do, and I need to do it now.

743
00:28:20,336 --> 00:28:21,476
Give me a CPU.

744
00:28:21,476 --> 00:28:22,866
Well, we're running out of CPUs

745
00:28:22,866 --> 00:28:25,356
and that's why our

746
00:28:25,356 --> 00:28:27,976
So let's zoom on one

747
00:28:28,016 --> 00:28:29,036
of orange over here.

748
00:28:29,946 --> 00:28:32,536
You can tell what the value is

749
00:28:33,406 --> 00:28:34,236
Zoom in a little bit.

750
00:28:34,716 --> 00:28:37,486
So we can see this particular

751
00:28:37,486 --> 00:28:40,146
on average there's about

752
00:28:40,146 --> 00:28:42,766
that we're trying to run,

753
00:28:42,766 --> 00:28:46,186
so about .8 threads

754
00:28:46,516 --> 00:28:47,606
And that's why that's orange.

755
00:28:47,986 --> 00:28:50,016
And we can see on

756
00:28:50,016 --> 00:28:52,146
of regions here that

757
00:28:52,146 --> 00:28:53,046
Here actually it's four.

758
00:28:53,046 --> 00:28:55,886
We were trying to run twice as

759
00:28:56,276 --> 00:28:58,436
So let's look at that

760
00:28:58,436 --> 00:29:01,546
So let me scooch this

761
00:28:58,436 --> 00:29:01,546
So let me scooch this

762
00:29:02,216 --> 00:29:05,346
As Chad mentioned, you can see

763
00:29:05,346 --> 00:29:08,216
trying to run in that

764
00:29:08,216 --> 00:29:10,256
in the ruler view up

765
00:29:10,256 --> 00:29:11,676
that blue inspection

766
00:29:11,676 --> 00:29:14,326
and Instruments will tell you

767
00:29:14,326 --> 00:29:16,976
to run during that

768
00:29:17,606 --> 00:29:19,756
And if we come down

769
00:29:19,756 --> 00:29:20,996
I'll sort it by the priority.

770
00:29:21,546 --> 00:29:23,276
We can see, I looked right here

771
00:29:23,276 --> 00:29:27,786
and there are two Graphasaurus

772
00:29:28,016 --> 00:29:30,646
There's actually two location D

773
00:29:30,646 --> 00:29:31,906
at a slightly lower priority.

774
00:29:32,206 --> 00:29:33,866
And that's part of

775
00:29:33,866 --> 00:29:35,386
You're going to see

776
00:29:35,386 --> 00:29:36,436
and trying to do their work.

777
00:29:36,706 --> 00:29:37,566
But it's okay.

778
00:29:37,566 --> 00:29:39,386
They're running on a slightly

779
00:29:39,386 --> 00:29:40,886
so I still have the

780
00:29:41,396 --> 00:29:44,156
I do, however, have this

781
00:29:44,156 --> 00:29:47,066
at the same time, well, trying

782
00:29:47,066 --> 00:29:48,886
And he's not getting

783
00:29:49,846 --> 00:29:51,816
And I know what these

784
00:29:51,936 --> 00:29:53,506
The two of them are

785
00:29:53,506 --> 00:29:54,836
And then I have the third

786
00:29:54,836 --> 00:29:56,346
to do my generation

787
00:29:56,816 --> 00:29:58,566
And so what's happening is one

788
00:29:58,566 --> 00:30:00,136
of them is not able

789
00:29:58,566 --> 00:30:00,136
of them is not able

790
00:30:01,156 --> 00:30:02,906
And we can kind of

791
00:30:02,906 --> 00:30:04,606
If we look at, say,

792
00:30:04,796 --> 00:30:06,846
Let's go back up to that

793
00:30:06,846 --> 00:30:08,686
You know, we could see

794
00:30:08,686 --> 00:30:11,196
that we're doing our rendering

795
00:30:11,396 --> 00:30:12,826
and the generation

796
00:30:12,826 --> 00:30:15,026
so it gets a little

797
00:30:15,426 --> 00:30:18,276
But what it's doing is when

798
00:30:18,276 --> 00:30:19,646
it's taking away

799
00:30:20,236 --> 00:30:23,116
And so basically I've kind

800
00:30:23,116 --> 00:30:25,746
because when I stop and

801
00:30:25,746 --> 00:30:27,496
I need that rendering

802
00:30:27,706 --> 00:30:29,886
Being at that user interactive

803
00:30:29,886 --> 00:30:32,476
because I want it to be nice and

804
00:30:33,106 --> 00:30:35,886
But these tool tips, they're

805
00:30:35,886 --> 00:30:37,716
I do want them done

806
00:30:37,716 --> 00:30:39,166
as that user long

807
00:30:39,166 --> 00:30:39,986
I want them to show up.

808
00:30:40,686 --> 00:30:42,896
But they're not really as

809
00:30:43,076 --> 00:30:44,536
And you can see it

810
00:30:44,536 --> 00:30:46,726
They are definitely taking

811
00:30:46,726 --> 00:30:49,746
that CPU resources from

812
00:30:49,746 --> 00:30:50,386
being delayed.

813
00:30:50,386 --> 00:30:51,806
And that's what's

814
00:30:51,806 --> 00:30:53,276
out that CADisplayLink time.

815
00:30:54,126 --> 00:30:57,546
So the fix for that is

816
00:30:57,606 --> 00:30:58,706
Let's go over to Xcode.

817
00:30:59,036 --> 00:31:00,646
So I have this view

818
00:30:59,036 --> 00:31:00,646
So I have this view

819
00:31:00,696 --> 00:31:03,006
And one of the things it does

820
00:31:03,526 --> 00:31:05,766
We can see that created

821
00:31:05,766 --> 00:31:08,046
This is where I do

822
00:31:08,426 --> 00:31:10,046
And it's created with

823
00:31:10,046 --> 00:31:11,796
One is, you know, it's

824
00:31:11,796 --> 00:31:13,786
they can run on multiple

825
00:31:14,256 --> 00:31:16,726
And it's set for the user

826
00:31:16,726 --> 00:31:19,096
And that's that same QOS class

827
00:31:19,096 --> 00:31:20,286
that my render work

828
00:31:20,286 --> 00:31:21,926
so they're all contending

829
00:31:22,476 --> 00:31:25,176
So like we said, it's not

830
00:31:25,176 --> 00:31:26,556
so I'm going to change

831
00:31:27,016 --> 00:31:28,466
You can read about the

832
00:31:28,466 --> 00:31:29,056
in the header file.

833
00:31:29,056 --> 00:31:31,826
I'm going to take it a

834
00:31:31,826 --> 00:31:33,606
with the utility level class.

835
00:31:33,866 --> 00:31:36,296
And what that'll do is give

836
00:31:36,296 --> 00:31:38,856
to do my rendering work, and

837
00:31:38,856 --> 00:31:40,936
of CPU time at the end

838
00:31:41,226 --> 00:31:42,466
then the tool tips will run.

839
00:31:42,516 --> 00:31:44,086
And they're still at a high

840
00:31:44,086 --> 00:31:46,486
that user taps on the screen,

841
00:31:47,056 --> 00:31:49,196
And so to show you what that

842
00:31:50,516 --> 00:31:55,866
[ Applause ]

843
00:31:56,366 --> 00:31:58,256
&gt;&gt; Okay, so when

844
00:31:58,256 --> 00:31:59,646
the graph's going

845
00:31:59,646 --> 00:32:02,696
We're going to notice that our

846
00:31:59,646 --> 00:32:02,696
We're going to notice that our

847
00:32:02,696 --> 00:32:05,526
down to about 12.7

848
00:32:05,626 --> 00:32:06,726
which is much better

849
00:32:07,246 --> 00:32:10,206
But even better still is

850
00:32:10,206 --> 00:32:12,956
about 14.6 milliseconds.

851
00:32:13,296 --> 00:32:15,406
So we're not dropping any

852
00:32:15,406 --> 00:32:17,806
within our 16 millisecond

853
00:32:18,806 --> 00:32:22,386
Now we're doing that in

854
00:32:22,386 --> 00:32:23,326
to overload the system.

855
00:32:23,326 --> 00:32:24,166
If you think about it,

856
00:32:24,406 --> 00:32:26,646
we are still running

857
00:32:27,246 --> 00:32:29,656
But because we've correctly

858
00:32:29,656 --> 00:32:31,966
our Gen Tool Tips

859
00:32:31,966 --> 00:32:33,226
down here at priority four.

860
00:32:33,226 --> 00:32:34,986
So that's going to

861
00:32:34,986 --> 00:32:36,696
of the User Interactive code.

862
00:32:37,106 --> 00:32:39,936
So we're still getting a

863
00:32:39,936 --> 00:32:41,946
We still have a very

864
00:32:42,366 --> 00:32:43,966
But at the same time,

865
00:32:43,966 --> 00:32:46,886
we're still getting a perfectly

866
00:32:48,296 --> 00:32:49,956
So what is Quality

867
00:32:50,006 --> 00:32:52,286
Quality of Service, in case

868
00:32:52,286 --> 00:32:56,106
is an attribute that you attach

869
00:32:56,486 --> 00:32:59,826
And it's basically an expression

870
00:32:59,826 --> 00:33:02,336
of the system resources you're

871
00:32:59,826 --> 00:33:02,336
of the system resources you're

872
00:33:02,336 --> 00:33:04,476
that particular piece

873
00:33:04,976 --> 00:33:06,256
Now the different Quality

874
00:33:06,256 --> 00:33:09,606
of Service classes can

875
00:33:09,606 --> 00:33:12,016
So you can see that our

876
00:33:12,016 --> 00:33:13,236
down into a priority of four,

877
00:33:13,236 --> 00:33:15,306
so in our User Interactive

878
00:33:15,306 --> 00:33:16,756
in the high 30s, high 40s.

879
00:33:17,546 --> 00:33:20,796
But the Quality of Service

880
00:33:20,796 --> 00:33:23,136
like IO and also

881
00:33:23,136 --> 00:33:24,266
that the code is running at.

882
00:33:24,956 --> 00:33:27,196
So when you pick a Quality

883
00:33:27,456 --> 00:33:29,586
make sure that you look through

884
00:33:29,586 --> 00:33:31,416
and make sure that

885
00:33:31,416 --> 00:33:32,336
of work that you're doing.

886
00:33:33,326 --> 00:33:35,446
Now another thing that

887
00:33:35,446 --> 00:33:37,516
of your application is

888
00:33:37,756 --> 00:33:40,816
They do get a little

889
00:33:40,816 --> 00:33:42,286
as memory pressure increases.

890
00:33:42,766 --> 00:33:44,776
But the good news is

891
00:33:46,006 --> 00:33:48,686
Now System Trace has all the

892
00:33:48,686 --> 00:33:50,126
to analyze virtual

893
00:33:50,426 --> 00:33:53,016
Inside the thread strategy,

894
00:33:53,016 --> 00:33:54,276
as these little blue capsules.

895
00:33:54,836 --> 00:33:58,126
Inside the thread narrative it

896
00:33:58,126 --> 00:34:00,106
and even attaches a

897
00:33:58,126 --> 00:34:00,106
and even attaches a

898
00:34:00,106 --> 00:34:02,116
that fault was resolved

899
00:34:02,676 --> 00:34:05,716
Now we also have an

900
00:34:05,716 --> 00:34:07,486
to analyzing virtual

901
00:34:07,486 --> 00:34:09,356
So for example, you can see

902
00:34:09,686 --> 00:34:11,676
where your code is

903
00:34:11,676 --> 00:34:13,795
to one type of fault or another.

904
00:34:13,795 --> 00:34:15,376
So for example, maybe

905
00:34:15,755 --> 00:34:19,315
that is experiencing more zero

906
00:34:19,746 --> 00:34:21,956
Now the next thing

907
00:34:21,956 --> 00:34:24,525
about virtual memory faults

908
00:34:24,525 --> 00:34:26,876
on access rather

909
00:34:27,226 --> 00:34:29,856
So you can ask for a large

910
00:34:29,856 --> 00:34:33,266
let's say 500 meg, but

911
00:34:33,466 --> 00:34:35,335
that with physical memory

912
00:34:35,335 --> 00:34:38,326
or accessing the pages of that

913
00:34:38,326 --> 00:34:41,436
So it's something to think about

914
00:34:41,545 --> 00:34:44,806
The other thing that's

915
00:34:44,806 --> 00:34:47,255
about virtual memory faults is

916
00:34:47,596 --> 00:34:49,505
So there's no explicit

917
00:34:49,505 --> 00:34:51,815
to resolve a virtual

918
00:34:52,295 --> 00:34:55,966
All you need to do is touch any

919
00:34:56,266 --> 00:34:59,396
as requiring a fault, and

920
00:34:59,396 --> 00:35:01,766
of your thread, resolve

921
00:34:59,396 --> 00:35:01,766
of your thread, resolve

922
00:35:01,806 --> 00:35:03,426
and then give you control back.

923
00:35:03,706 --> 00:35:06,546
And so when you see those blue

924
00:35:06,586 --> 00:35:08,816
on the thread strategy that's

925
00:35:09,206 --> 00:35:12,776
So what do you do about

926
00:35:12,776 --> 00:35:13,386
your application?

927
00:35:14,566 --> 00:35:16,336
Well the easiest thing

928
00:35:16,896 --> 00:35:19,426
The easiest thing to do is

929
00:35:20,106 --> 00:35:22,586
What I mean by that is leave

930
00:35:22,586 --> 00:35:26,686
performance budget where you

931
00:35:26,686 --> 00:35:29,336
of virtual memory faults

932
00:35:29,816 --> 00:35:31,856
This will make you more

933
00:35:31,856 --> 00:35:34,446
So as memory pressure increases,

934
00:35:34,446 --> 00:35:35,296
and you have enough slack,

935
00:35:35,906 --> 00:35:37,866
you won't notice the

936
00:35:38,306 --> 00:35:41,266
Now we realize that some

937
00:35:41,266 --> 00:35:43,786
of lax deadlines in terms

938
00:35:44,626 --> 00:35:47,476
So another alternative is

939
00:35:47,476 --> 00:35:48,666
on a background thread.

940
00:35:49,026 --> 00:35:51,156
So let's say you have

941
00:35:51,516 --> 00:35:53,886
and your player is coming

942
00:35:53,886 --> 00:35:55,426
and they're going to

943
00:35:55,656 --> 00:35:58,736
Well, what you might

944
00:35:58,736 --> 00:36:02,926
to a background queue and then

945
00:35:58,736 --> 00:36:02,926
to a background queue and then

946
00:36:02,926 --> 00:36:04,496
of level two on that

947
00:36:04,856 --> 00:36:07,646
And then by the time your

948
00:36:07,646 --> 00:36:10,026
around to pick up that

949
00:36:10,026 --> 00:36:10,596
no stutter.

950
00:36:11,376 --> 00:36:14,716
Now, we'll have to give you a

951
00:36:14,816 --> 00:36:16,366
Make sure you only

952
00:36:16,366 --> 00:36:17,776
that you're absolutely

953
00:36:17,776 --> 00:36:20,446
Because if you start touching

954
00:36:20,446 --> 00:36:22,446
then you're actually going

955
00:36:22,966 --> 00:36:27,206
And that about does it

956
00:36:27,206 --> 00:36:29,106
We think that the System

957
00:36:29,106 --> 00:36:30,176
to the Time Profiler.

958
00:36:30,256 --> 00:36:32,586
The Time Profiler helps

959
00:36:32,766 --> 00:36:34,736
but System Trace

960
00:36:34,736 --> 00:36:36,656
to scale better under

961
00:36:36,656 --> 00:36:40,186
We encourage you to try a System

962
00:36:40,186 --> 00:36:42,406
We know that when we try

963
00:36:42,406 --> 00:36:44,366
we always find something

964
00:36:44,366 --> 00:36:47,636
And if you've used System Trace

965
00:36:47,636 --> 00:36:50,376
to come back to Instruments

966
00:36:50,376 --> 00:36:52,256
because we've done

967
00:36:52,256 --> 00:36:54,256
to both the approachability

968
00:36:54,256 --> 00:36:57,066
We think it'll make a great

969
00:36:57,796 --> 00:37:01,336
For more information,

970
00:36:57,796 --> 00:37:01,336
For more information,

971
00:37:02,326 --> 00:37:03,676
We have some related

972
00:37:03,676 --> 00:37:06,406
that happened also happened

973
00:37:07,186 --> 00:37:07,946
Enjoy the rest of your morning.
