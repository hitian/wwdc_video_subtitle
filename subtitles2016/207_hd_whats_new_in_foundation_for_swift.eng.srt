1
00:00:07,516 --> 00:00:19,500
[ Music ]

2
00:00:27,516 --> 00:00:31,756
[ Applause ]

3
00:00:32,256 --> 00:00:32,496
&gt;&gt; Thank you.

4
00:00:34,746 --> 00:00:35,416
Hello, and welcome.

5
00:00:35,936 --> 00:00:36,936
My name is Tony Parker.

6
00:00:36,936 --> 00:00:38,666
I am the manager of the

7
00:00:38,816 --> 00:00:40,956
and I'm here with my

8
00:00:40,956 --> 00:00:42,836
about what's new in

9
00:00:44,636 --> 00:00:46,846
This year the Foundation

10
00:00:46,846 --> 00:00:49,096
into improving the way

11
00:00:49,096 --> 00:00:51,186
and Cocoa Touch APIs in Swift.

12
00:00:51,856 --> 00:00:54,326
We started by working on the

13
00:00:55,106 --> 00:00:57,546
After that, we looked at how

14
00:00:57,546 --> 00:01:01,316
that the Cocoa SDK uses and your

15
00:00:57,546 --> 00:01:01,316
that the Cocoa SDK uses and your

16
00:01:02,536 --> 00:01:04,066
but we knew that we

17
00:01:04,236 --> 00:01:06,926
So, we have introduced a

18
00:01:06,926 --> 00:01:09,686
in Foundation, and

19
00:01:09,686 --> 00:01:12,316
of new Swift-specific API.

20
00:01:13,056 --> 00:01:15,196
So, let's go ahead and jump

21
00:01:17,186 --> 00:01:19,316
Now, this year we're

22
00:01:19,516 --> 00:01:21,886
from the beginning our goals for

23
00:01:22,476 --> 00:01:25,856
We want you to write code that's

24
00:01:26,946 --> 00:01:28,876
We've built the libraries,

25
00:01:28,876 --> 00:01:30,726
and the language

26
00:01:30,726 --> 00:01:33,576
And many of you have also

27
00:01:33,576 --> 00:01:36,066
principals and built your

28
00:01:36,886 --> 00:01:39,426
However, we all know that there

29
00:01:39,556 --> 00:01:41,006
and that it the Cocoa SDK.

30
00:01:41,956 --> 00:01:45,526
Your app depends on this just as

31
00:01:45,526 --> 00:01:46,626
the Swift standard library.

32
00:01:47,086 --> 00:01:49,516
It needs to feel like it's

33
00:01:50,486 --> 00:01:52,996
Because the SDK is a

34
00:01:53,166 --> 00:01:56,186
about how we develop apps on our

35
00:01:56,186 --> 00:01:59,026
that the language and the

36
00:02:01,086 --> 00:02:03,826
So this year we focused on

37
00:02:04,386 --> 00:02:05,826
When I say expressive,

38
00:02:05,826 --> 00:02:06,626
in two different ways.

39
00:02:07,016 --> 00:02:10,256
First is your ability as app

40
00:02:10,256 --> 00:02:13,596
that expresses your intent to

41
00:02:14,206 --> 00:02:15,416
but it goes the other way too.

42
00:02:15,836 --> 00:02:18,096
The libraries need to be

43
00:02:18,246 --> 00:02:20,976
their design patterns and

44
00:02:20,976 --> 00:02:23,636
to use the API to

45
00:02:25,596 --> 00:02:27,486
And so, while working

46
00:02:27,486 --> 00:02:29,966
we focused on this idea of

47
00:02:30,316 --> 00:02:32,916
Every decision made about those

48
00:02:32,916 --> 00:02:34,006
of the idea that the language

49
00:02:34,006 --> 00:02:35,386
and the libraries

50
00:02:35,566 --> 00:02:36,596
They have to work together.

51
00:02:37,266 --> 00:02:38,876
So, for example,

52
00:02:39,226 --> 00:02:40,936
they bring a huge

53
00:02:41,336 --> 00:02:43,166
Many of the features that

54
00:02:43,166 --> 00:02:45,846
of our platforms this year

55
00:02:45,846 --> 00:02:48,486
in the libraries that you

56
00:02:48,656 --> 00:02:50,286
to improve your experience.

57
00:02:51,176 --> 00:02:53,476
These libraries have a

58
00:02:53,476 --> 00:02:56,736
of our platforms, including

59
00:02:56,736 --> 00:02:57,676
and Swift Open Source.

60
00:02:58,266 --> 00:03:00,186
So, we have Swift

61
00:02:58,266 --> 00:03:00,186
So, we have Swift

62
00:03:00,416 --> 00:03:02,836
which is bringing the

63
00:03:03,136 --> 00:03:04,686
to other platforms like Linux.

64
00:03:05,846 --> 00:03:07,886
These libraries have a

65
00:03:08,486 --> 00:03:10,176
Many of them have been

66
00:03:10,176 --> 00:03:12,646
of OS X or even further back.

67
00:03:13,576 --> 00:03:14,786
They also bring with them,

68
00:03:14,786 --> 00:03:16,346
thanks to the Cocoa

69
00:03:16,456 --> 00:03:17,976
a consistent set of conventions.

70
00:03:18,336 --> 00:03:20,286
This means that when you

71
00:03:20,286 --> 00:03:22,326
you can understand how it works

72
00:03:22,326 --> 00:03:24,086
and what it does

73
00:03:24,816 --> 00:03:27,076
And finally and importantly,

74
00:03:27,076 --> 00:03:29,036
under continuous and

75
00:03:29,466 --> 00:03:31,176
Not only are we adding

76
00:03:31,446 --> 00:03:34,226
but we're making enhancements,

77
00:03:34,226 --> 00:03:37,186
and we're going to continue

78
00:03:37,356 --> 00:03:38,316
as we release new OSs.

79
00:03:38,316 --> 00:03:42,576
Now, on the other hand,

80
00:03:42,726 --> 00:03:45,416
brings with it things that we

81
00:03:45,806 --> 00:03:47,876
For example, first class

82
00:03:48,536 --> 00:03:51,266
and built in support for

83
00:03:51,266 --> 00:03:52,646
of Swift's story about safety.

84
00:03:53,936 --> 00:03:55,806
There's also things like

85
00:03:55,806 --> 00:03:58,006
function overloading, and

86
00:03:58,476 --> 00:03:59,876
all of which make

87
00:03:59,876 --> 00:04:01,796
on how you design

88
00:03:59,876 --> 00:04:01,796
on how you design

89
00:04:03,096 --> 00:04:04,556
This isn't a complete

90
00:04:04,556 --> 00:04:05,726
by the way I just

91
00:04:05,986 --> 00:04:07,166
There's plenty more

92
00:04:07,846 --> 00:04:12,176
So, we came up with

93
00:04:12,666 --> 00:04:16,156
The first was SE-0023,

94
00:04:16,216 --> 00:04:17,986
Now, all these documents

95
00:04:18,086 --> 00:04:21,106
to the Swift Evolution

96
00:04:21,106 --> 00:04:22,756
and the rest of the

97
00:04:22,756 --> 00:04:25,646
to participate in the design

98
00:04:26,246 --> 00:04:29,376
Now, we see these guidelines as

99
00:04:29,376 --> 00:04:30,766
and future Swift libraries.

100
00:04:31,186 --> 00:04:32,846
Along with that we have SE-0006,

101
00:04:32,906 --> 00:04:35,426
which applied those design

102
00:04:35,796 --> 00:04:38,286
giving us a consistent and

103
00:04:38,286 --> 00:04:41,296
that we can build on

104
00:04:41,696 --> 00:04:44,756
which dramatically improved the

105
00:04:45,126 --> 00:04:47,036
by doing things like

106
00:04:47,286 --> 00:04:49,206
improving option sets

107
00:04:49,506 --> 00:04:51,776
even automatically adopting

108
00:04:51,956 --> 00:04:56,846
We had a whole talk about this

109
00:04:56,846 --> 00:04:59,986
that you check out if you missed

110
00:05:02,136 --> 00:05:04,206
Now, all these were

111
00:05:04,816 --> 00:05:06,606
but we knew that we

112
00:05:07,226 --> 00:05:09,756
That's because Swift goals

113
00:05:11,366 --> 00:05:14,856
Mutability in particular is

114
00:05:15,616 --> 00:05:18,466
and so, we turned our

115
00:05:19,956 --> 00:05:21,836
Now, if you're wondering

116
00:05:22,626 --> 00:05:24,416
The answer is because

117
00:05:24,756 --> 00:05:26,546
and I'm not just saying

118
00:05:27,486 --> 00:05:30,976
Foundation occupies a

119
00:05:31,056 --> 00:05:33,006
What's interesting about it

120
00:05:33,006 --> 00:05:35,576
to be used everywhere, on all

121
00:05:36,276 --> 00:05:38,496
Yet, at the same time,

122
00:05:38,906 --> 00:05:42,646
to establish a whole new set of

123
00:05:42,646 --> 00:05:44,966
that again you see reflected

124
00:05:44,966 --> 00:05:48,296
If we go back to our picture

125
00:05:48,296 --> 00:05:52,456
in on the Cocoa SDK, you'll see

126
00:05:52,456 --> 00:05:56,226
in your apps every day, from

127
00:05:56,226 --> 00:05:58,256
to CoreData, and many

128
00:05:58,346 --> 00:05:59,516
that don't fit here either.

129
00:06:00,376 --> 00:06:02,646
Now, what's interesting

130
00:06:02,646 --> 00:06:04,646
of these are built

131
00:06:05,616 --> 00:06:07,676
So, we see Foundation

132
00:06:08,696 --> 00:06:10,876
What that means is that we can

133
00:06:10,876 --> 00:06:14,976
in Foundation, and that can have

134
00:06:16,476 --> 00:06:18,486
Partly, that's because

135
00:06:18,486 --> 00:06:20,526
of many value types.

136
00:06:21,456 --> 00:06:25,436
So, we focused on this idea

137
00:06:25,926 --> 00:06:27,856
We've seen everything

138
00:06:27,856 --> 00:06:29,136
to the development of your apps.

139
00:06:29,606 --> 00:06:31,166
We're not going to

140
00:06:31,466 --> 00:06:32,656
because we have a new language.

141
00:06:32,996 --> 00:06:35,146
Instead what we're doing is

142
00:06:35,146 --> 00:06:37,106
and the libraries

143
00:06:37,176 --> 00:06:39,136
by making incremental

144
00:06:39,756 --> 00:06:40,656
The changes that we're talking

145
00:06:40,656 --> 00:06:43,676
about today are a

146
00:06:44,166 --> 00:06:46,716
And so with that in mind,

147
00:06:46,716 --> 00:06:49,306
the Foundation team put forth

148
00:06:49,306 --> 00:06:50,696
to the Swift Evolution

149
00:06:51,246 --> 00:06:53,776
The first was mutability

150
00:06:54,186 --> 00:06:56,706
which is about embracing

151
00:06:56,706 --> 00:06:57,816
in the Foundation framework.

152
00:06:59,766 --> 00:07:02,876
And also, dropping the NS

153
00:06:59,766 --> 00:07:02,876
And also, dropping the NS

154
00:07:03,256 --> 00:07:05,316
which is about establishing

155
00:07:05,316 --> 00:07:06,816
and design patterns for Swift,

156
00:07:07,156 --> 00:07:08,686
no matter which platform

157
00:07:09,306 --> 00:07:13,846
So here is an overview of some

158
00:07:13,846 --> 00:07:15,496
of the API improvements

159
00:07:15,876 --> 00:07:18,416
First and foremost, value

160
00:07:18,416 --> 00:07:20,616
of value types that you're

161
00:07:21,436 --> 00:07:23,076
Beyond that, we did

162
00:07:23,076 --> 00:07:23,946
of naming improvements,

163
00:07:24,016 --> 00:07:26,946
beyond what the Objective-C

164
00:07:27,656 --> 00:07:29,516
We've adopted many

165
00:07:29,516 --> 00:07:30,886
on these types, which means

166
00:07:30,886 --> 00:07:32,506
that your generic

167
00:07:32,506 --> 00:07:33,896
on Foundation types as well.

168
00:07:34,746 --> 00:07:36,846
We've added additional

169
00:07:36,846 --> 00:07:38,366
of new Swift-specific features.

170
00:07:38,366 --> 00:07:42,986
So, let's do a quick

171
00:07:43,546 --> 00:07:45,656
Now, value types

172
00:07:45,656 --> 00:07:49,196
from reference types, primarily

173
00:07:49,196 --> 00:07:53,266
around copying, so value types

174
00:07:53,266 --> 00:07:54,426
or passed as a parameter.

175
00:07:54,596 --> 00:07:55,486
Here's a quick example.

176
00:07:55,796 --> 00:07:56,436
I've got a point.

177
00:07:57,046 --> 00:07:59,306
I use the equals operator

178
00:07:59,346 --> 00:08:01,966
to another point, and when

179
00:07:59,346 --> 00:08:01,966
to another point, and when

180
00:08:02,166 --> 00:08:03,856
you see that only

181
00:08:03,856 --> 00:08:05,346
I didn't affect the

182
00:08:05,686 --> 00:08:08,106
That's because CGPoint

183
00:08:09,226 --> 00:08:10,016
Now, on the other hand,

184
00:08:10,016 --> 00:08:12,096
reference types share

185
00:08:12,816 --> 00:08:14,906
Here I'm going to create some

186
00:08:14,906 --> 00:08:15,816
and its mutable data.

187
00:08:16,776 --> 00:08:19,486
Then I use that same

188
00:08:19,486 --> 00:08:20,526
that data to otherData.

189
00:08:21,126 --> 00:08:23,686
However, this time, when

190
00:08:24,106 --> 00:08:25,966
you can see that it

191
00:08:26,066 --> 00:08:28,706
Now, it's important to

192
00:08:28,706 --> 00:08:30,216
of these is better

193
00:08:30,866 --> 00:08:32,186
You just use them

194
00:08:33,265 --> 00:08:35,285
I like to think of it as a

195
00:08:35,285 --> 00:08:38,876
that you can reach for when

196
00:08:39,525 --> 00:08:40,635
to solve.

197
00:08:41,326 --> 00:08:43,216
So, when you're trying

198
00:08:43,996 --> 00:08:46,166
if your type is a value

199
00:08:46,906 --> 00:08:49,796
you should think about object

200
00:08:49,796 --> 00:08:52,326
Let me explain by way

201
00:08:52,906 --> 00:08:56,626
So, in Foundation, we

202
00:08:57,376 --> 00:09:00,276
OperationQueue has a singleton,

203
00:08:57,376 --> 00:09:00,276
OperationQueue has a singleton,

204
00:09:01,386 --> 00:09:03,416
That operation queue,

205
00:09:03,416 --> 00:09:04,596
is where you put

206
00:09:04,596 --> 00:09:05,666
to happen on the main thread.

207
00:09:06,056 --> 00:09:07,596
And so, there's only

208
00:09:07,856 --> 00:09:09,076
It has a kind of identity.

209
00:09:09,436 --> 00:09:11,996
If I were to copy the main

210
00:09:11,996 --> 00:09:13,416
longer be the main

211
00:09:13,986 --> 00:09:15,076
So, we believe

212
00:09:15,146 --> 00:09:17,646
that OperationQueue

213
00:09:18,646 --> 00:09:19,776
Another example, a pattern

214
00:09:19,776 --> 00:09:22,366
that you see throughout the

215
00:09:23,146 --> 00:09:25,106
So here is the delegate,

216
00:09:25,106 --> 00:09:27,506
for URL session,

217
00:09:27,666 --> 00:09:30,156
that the delegate protocol

218
00:09:30,306 --> 00:09:33,826
called Session, and that

219
00:09:33,826 --> 00:09:37,336
delegated to which URLSession

220
00:09:37,906 --> 00:09:41,796
and that idea of which

221
00:09:41,906 --> 00:09:42,786
again, identity.

222
00:09:43,186 --> 00:09:45,036
So, we believe that types

223
00:09:45,036 --> 00:09:47,006
with delegates are

224
00:09:47,566 --> 00:09:50,776
On the other hand,

225
00:09:50,776 --> 00:09:52,196
about their store contents.

226
00:09:52,256 --> 00:09:53,506
For example, Date.

227
00:09:53,506 --> 00:09:55,306
This is one of our new

228
00:09:56,376 --> 00:09:57,866
Date is an absolute

229
00:09:58,596 --> 00:10:01,276
We can have two Dates

230
00:09:58,596 --> 00:10:01,276
We can have two Dates

231
00:10:01,406 --> 00:10:03,016
the same absolute point in time,

232
00:10:03,336 --> 00:10:04,656
and be talking about

233
00:10:04,656 --> 00:10:07,086
We don't need to talk about the

234
00:10:07,626 --> 00:10:09,536
In fact, if we look inside

235
00:10:09,776 --> 00:10:11,856
as you see here, it's

236
00:10:12,346 --> 00:10:13,716
and a double is something

237
00:10:13,716 --> 00:10:15,876
of already intuitively

238
00:10:17,106 --> 00:10:18,476
Another example is Data.

239
00:10:19,006 --> 00:10:21,536
Data is another one of our

240
00:10:22,126 --> 00:10:24,966
Data, normally you care about

241
00:10:25,206 --> 00:10:28,376
the bytes that are there, not

242
00:10:28,546 --> 00:10:33,976
So, Foundation has made

243
00:10:34,146 --> 00:10:36,626
Now, copying the data

244
00:10:36,626 --> 00:10:38,476
as a parameter would

245
00:10:39,026 --> 00:10:41,626
So, we performed an optimization

246
00:10:42,496 --> 00:10:44,136
So, here I'm going

247
00:10:44,896 --> 00:10:47,596
and you see I've got a

248
00:10:47,596 --> 00:10:48,856
I also have a reference.

249
00:10:48,886 --> 00:10:50,816
So, another example of

250
00:10:50,816 --> 00:10:51,636
when they work together.

251
00:10:51,976 --> 00:10:53,866
Here I'm using both a

252
00:10:54,266 --> 00:10:55,976
to get the performance

253
00:10:56,276 --> 00:10:58,946
that I want along with the value

254
00:11:00,026 --> 00:11:02,756
Now, if I use that equal

255
00:11:02,756 --> 00:11:05,116
to another data,

256
00:11:05,116 --> 00:11:07,616
that I've got another

257
00:11:07,616 --> 00:11:09,446
at the same class

258
00:11:10,146 --> 00:11:14,006
However, if I mutate that Data,

259
00:11:14,486 --> 00:11:17,506
mutate the copy, and now we've

260
00:11:18,876 --> 00:11:20,456
If I continue to

261
00:11:20,986 --> 00:11:23,616
we can tell that that Data

262
00:11:23,616 --> 00:11:25,066
and we don't need to

263
00:11:25,996 --> 00:11:28,556
So, this is an extension, or

264
00:11:28,556 --> 00:11:31,256
of the same technique that

265
00:11:31,256 --> 00:11:33,366
including last year,

266
00:11:33,366 --> 00:11:34,396
and value types in Swift.

267
00:11:34,396 --> 00:11:36,046
So, check that out if you

268
00:11:36,046 --> 00:11:38,486
on how this works.

269
00:11:38,656 --> 00:11:41,386
So, we did a survey of

270
00:11:41,656 --> 00:11:43,476
and we came up with

271
00:11:43,476 --> 00:11:45,196
that we think would

272
00:11:45,656 --> 00:11:47,566
and I think you'll be happy

273
00:11:47,566 --> 00:11:49,566
that you use every

274
00:11:49,976 --> 00:11:51,976
That includes Data and

275
00:11:52,326 --> 00:11:54,766
but also other types that

276
00:11:55,166 --> 00:11:57,986
IndexPath, CharacterSet,

277
00:11:58,286 --> 00:12:00,426
And many of these types not

278
00:11:58,286 --> 00:12:00,426
And many of these types not

279
00:12:00,726 --> 00:12:03,186
but gained a lot of

280
00:12:03,716 --> 00:12:06,946
Now, to give you an idea

281
00:12:07,036 --> 00:12:08,406
I'd like to invite

282
00:12:09,516 --> 00:12:13,796
[ Applause ]

283
00:12:14,296 --> 00:12:14,846
&gt;&gt; Thank you, Tony.

284
00:12:15,616 --> 00:12:17,626
Let's start by visiting

285
00:12:17,626 --> 00:12:19,046
of Foundation's enumerations.

286
00:12:19,696 --> 00:12:22,176
Now, as you know,

287
00:12:22,176 --> 00:12:24,166
and option sets live in

288
00:12:24,226 --> 00:12:25,896
alongside the types

289
00:12:26,166 --> 00:12:30,066
For example, NSNumberFormatter

290
00:12:30,226 --> 00:12:33,676
for the style, behavior, pad

291
00:12:34,476 --> 00:12:37,106
And each of these are implicitly

292
00:12:37,466 --> 00:12:39,346
through careful and

293
00:12:39,996 --> 00:12:42,226
In Swift 2 as you

294
00:12:42,226 --> 00:12:43,576
to the global namespace as well.

295
00:12:43,576 --> 00:12:46,896
But that doesn't feel

296
00:12:47,426 --> 00:12:49,286
Swift supports nested types,

297
00:12:49,886 --> 00:12:53,126
and so in Swift 3 we made the

298
00:12:53,876 --> 00:12:56,496
to be declared inside,

299
00:12:56,496 --> 00:12:59,026
So NumberFormatter now has

300
00:12:59,066 --> 00:13:00,526
behavior, pad position,

301
00:12:59,066 --> 00:13:00,526
behavior, pad position,

302
00:13:00,886 --> 00:13:02,816
And their names are

303
00:13:03,716 --> 00:13:05,856
and this greatly reduces

304
00:13:05,856 --> 00:13:08,066
that Foundation declares

305
00:13:08,506 --> 00:13:10,486
and now the relationship

306
00:13:10,526 --> 00:13:12,946
our APIs more expressive

307
00:13:14,476 --> 00:13:16,806
Sticking with the

308
00:13:17,196 --> 00:13:20,836
many Foundation APIs also use

309
00:13:20,986 --> 00:13:24,626
Examples include notification

310
00:13:25,066 --> 00:13:29,136
Now of course, Swift has support

311
00:13:29,136 --> 00:13:31,496
on raw representations

312
00:13:31,496 --> 00:13:33,396
than integers, including string.

313
00:13:33,816 --> 00:13:35,486
Wouldn't it be great if

314
00:13:35,486 --> 00:13:36,326
in Objective-C?

315
00:13:37,336 --> 00:13:40,346
Well, new this year we can, and

316
00:13:40,346 --> 00:13:42,806
in terms of very specific

317
00:13:43,026 --> 00:13:46,286
like notification name

318
00:13:46,596 --> 00:13:47,746
and many, many more.

319
00:13:49,706 --> 00:13:53,846
And these constants remain

320
00:13:54,556 --> 00:14:00,966
and also in Swift, where we can

321
00:13:54,556 --> 00:14:00,966
and also in Swift, where we can

322
00:14:00,966 --> 00:14:04,036
like their integral

323
00:14:04,036 --> 00:14:06,166
in Swift 3 is both

324
00:14:06,896 --> 00:14:10,036
Now another common Foundation

325
00:14:10,036 --> 00:14:10,876
state with a type.

326
00:14:11,226 --> 00:14:14,066
For instance, the

327
00:14:14,886 --> 00:14:16,106
Now, of course, Swift support

328
00:14:16,106 --> 00:14:19,516
for class properties are

329
00:14:20,126 --> 00:14:22,956
and new in this year, we

330
00:14:22,956 --> 00:14:25,266
to Objective-C, and

331
00:14:25,266 --> 00:14:26,476
like instance properties,

332
00:14:26,786 --> 00:14:29,446
except we now accept

333
00:14:29,796 --> 00:14:33,536
and because we know that

334
00:14:33,536 --> 00:14:35,286
we no longer need to

335
00:14:35,286 --> 00:14:36,506
as we did in Swift 2.2.

336
00:14:36,696 --> 00:14:40,316
It can now appear as a class

337
00:14:40,316 --> 00:14:41,946
if you were defining

338
00:14:43,036 --> 00:14:44,836
But we didn't stop there.

339
00:14:44,836 --> 00:14:48,266
There's some redundant

340
00:14:48,266 --> 00:14:50,976
we overhauled the way that

341
00:14:50,976 --> 00:14:53,066
or Objective-C code

342
00:14:53,366 --> 00:14:56,556
so that our final API could

343
00:14:57,106 --> 00:15:00,166
We know it's our user defaults,

344
00:14:57,106 --> 00:15:00,166
We know it's our user defaults,

345
00:15:00,166 --> 00:15:02,346
to be more Swift-like, we've

346
00:15:02,346 --> 00:15:04,026
for both Objective-C and Swift.

347
00:15:04,516 --> 00:15:08,896
Now Tony mentioned many

348
00:15:08,896 --> 00:15:11,316
to be value types, and so I'm

349
00:15:11,526 --> 00:15:13,986
We'll start with Date.

350
00:15:14,356 --> 00:15:16,396
Now let's suppose we want

351
00:15:16,396 --> 00:15:17,766
for when we should go home.

352
00:15:17,816 --> 00:15:21,336
We'll start with Swift 2.2,

353
00:15:21,616 --> 00:15:23,486
Let's suppose that we have

354
00:15:23,486 --> 00:15:28,486
when we need to go home, and we

355
00:15:28,486 --> 00:15:30,776
like a good time for our

356
00:15:31,106 --> 00:15:32,456
you know, offset

357
00:15:33,236 --> 00:15:35,636
Now, it's worth pointing

358
00:15:35,636 --> 00:15:38,746
and remains a reference type,

359
00:15:39,156 --> 00:15:41,356
potentially two dynamic

360
00:15:41,796 --> 00:15:43,756
One here, and another here.

361
00:15:44,346 --> 00:15:48,186
Now in Swift 3, we gain

362
00:15:49,206 --> 00:15:50,516
So, let's go ahead and use it,

363
00:15:51,746 --> 00:15:53,106
and consuming it

364
00:15:53,166 --> 00:15:56,446
however now this var takes on

365
00:15:56,946 --> 00:15:59,456
We specifically, we now

366
00:16:00,326 --> 00:16:01,536
And so, we've done zero,

367
00:16:02,056 --> 00:16:04,556
these two examples here are

368
00:16:04,556 --> 00:16:08,076
except with the value

369
00:16:08,076 --> 00:16:09,166
dynamic allocations.

370
00:16:09,466 --> 00:16:10,556
Let's continue our example.

371
00:16:10,886 --> 00:16:12,836
Now, of course, we can

372
00:16:12,836 --> 00:16:17,336
Now, with reminders, it's

373
00:16:17,336 --> 00:16:19,486
to schedule them if

374
00:16:20,076 --> 00:16:21,986
and one of the great

375
00:16:21,986 --> 00:16:25,156
to the table is automatic

376
00:16:25,156 --> 00:16:29,066
when you satisfy certain

377
00:16:29,066 --> 00:16:31,606
Date Auto has conforms

378
00:16:31,756 --> 00:16:33,486
which gives us access

379
00:16:33,536 --> 00:16:35,816
than operator, which we use now.

380
00:16:36,336 --> 00:16:38,276
And we can go ahead

381
00:16:38,276 --> 00:16:39,426
but first we need to create it.

382
00:16:39,486 --> 00:16:41,996
And so we'll use another new

383
00:16:42,356 --> 00:16:45,666
which is this fancy

384
00:16:46,286 --> 00:16:48,356
where we initialize the

385
00:16:48,356 --> 00:16:50,556
So no more selectors

386
00:16:50,556 --> 00:16:53,236
and we'll schedule it

387
00:16:54,516 --> 00:16:58,606
[ Applause ]

388
00:16:59,106 --> 00:17:00,566
I'll also call out thread

389
00:16:59,106 --> 00:17:00,566
I'll also call out thread

390
00:17:00,566 --> 00:17:03,106
and run loop have those

391
00:17:03,106 --> 00:17:06,046
And we schedule them on our

392
00:17:06,476 --> 00:17:08,066
And this is a great

393
00:17:08,066 --> 00:17:10,546
of these familiar Foundation

394
00:17:10,546 --> 00:17:12,215
across so beautifully

395
00:17:12,856 --> 00:17:14,965
This is some of the most

396
00:17:14,965 --> 00:17:16,106
possibly have in a demo.

397
00:17:16,106 --> 00:17:18,056
I have a run loop, I have

398
00:17:18,236 --> 00:17:19,986
I just, there's only

399
00:17:19,986 --> 00:17:21,425
and this is pretty

400
00:17:21,566 --> 00:17:23,606
And there isn't a

401
00:17:25,606 --> 00:17:27,756
So, another new example,

402
00:17:27,846 --> 00:17:30,226
in Foundation is the

403
00:17:31,156 --> 00:17:33,456
And let's suppose with

404
00:17:33,456 --> 00:17:34,956
we care about how

405
00:17:34,956 --> 00:17:37,876
and we're lucky enough to

406
00:17:37,876 --> 00:17:38,646
from where we work.

407
00:17:39,386 --> 00:17:40,656
Now, measurements

408
00:17:40,656 --> 00:17:43,046
and Swift supports

409
00:17:43,376 --> 00:17:44,806
and not only are they

410
00:17:45,036 --> 00:17:47,306
They're mathematical in

411
00:17:47,306 --> 00:17:50,796
to specify operators on them.

412
00:17:50,796 --> 00:17:54,646
No one will look the other

413
00:17:54,646 --> 00:17:57,116
if we contemplate

414
00:17:57,116 --> 00:18:00,636
and so we can compute their sum,

415
00:17:57,116 --> 00:18:00,636
and so we can compute their sum,

416
00:18:00,636 --> 00:18:01,786
to a different kind of unit.

417
00:18:01,786 --> 00:18:04,376
And let's suppose we were

418
00:18:04,376 --> 00:18:05,256
for us to get to work.

419
00:18:05,256 --> 00:18:08,506
Well, we could do that as

420
00:18:08,506 --> 00:18:10,996
if we were to try to build

421
00:18:10,996 --> 00:18:13,516
and it would fail at

422
00:18:13,656 --> 00:18:16,526
thanks to the power of Swift 3's

423
00:18:16,916 --> 00:18:19,976
we actually have designed this

424
00:18:19,976 --> 00:18:21,826
in units is knowable

425
00:18:22,046 --> 00:18:24,106
and so the Swift compiler

426
00:18:24,146 --> 00:18:25,796
that we're trying to do

427
00:18:26,746 --> 00:18:28,526
To learn more about

428
00:18:28,526 --> 00:18:30,136
and the whole new

429
00:18:30,136 --> 00:18:33,346
that we've introduced this year,

430
00:18:33,346 --> 00:18:35,776
on Friday afternoon

431
00:18:35,776 --> 00:18:36,986
about measurements and units.

432
00:18:38,076 --> 00:18:39,926
I'm going to switch

433
00:18:40,886 --> 00:18:43,096
I did say this was going

434
00:18:43,326 --> 00:18:45,656
Suppose we want to

435
00:18:45,846 --> 00:18:48,116
We'll use the new URL

436
00:18:48,916 --> 00:18:50,446
and we can do this

437
00:18:51,166 --> 00:18:53,476
We'll begin by describing

438
00:18:53,476 --> 00:18:55,526
which we'll use as

439
00:18:55,826 --> 00:18:57,656
And we iterate through

440
00:18:57,696 --> 00:19:02,856
to purchase, make a copy of

441
00:18:57,696 --> 00:19:02,856
to purchase, make a copy of

442
00:19:02,856 --> 00:19:06,176
that copy, specifying the

443
00:19:07,046 --> 00:19:07,766
Note that we're safe

444
00:19:07,766 --> 00:19:09,756
to explicitly unwrap

445
00:19:10,146 --> 00:19:13,256
because we specified that it was

446
00:19:14,466 --> 00:19:16,956
We can go ahead and

447
00:19:16,956 --> 00:19:21,136
that we have been able to build,

448
00:19:21,136 --> 00:19:26,606
like to purchase with no

449
00:19:26,926 --> 00:19:29,276
All we had to do was

450
00:19:29,276 --> 00:19:31,576
or not something was mutable or

451
00:19:31,576 --> 00:19:33,766
of the rest of the

452
00:19:34,676 --> 00:19:37,106
Now, another thing

453
00:19:37,216 --> 00:19:38,286
or Swift in general brings

454
00:19:38,286 --> 00:19:40,126
to the table is protocol

455
00:19:40,126 --> 00:19:42,506
In many Foundation

456
00:19:42,706 --> 00:19:46,516
getting useful new capabilities

457
00:19:46,716 --> 00:19:48,136
For instance, CharacterSet

458
00:19:48,136 --> 00:19:51,236
and IndexSet are now

459
00:19:51,496 --> 00:19:54,206
So you can union, intersect, and

460
00:19:54,206 --> 00:19:55,106
to your hearts' content.

461
00:19:56,356 --> 00:19:59,006
Data is also now a

462
00:19:59,296 --> 00:20:02,776
MutableRandomAccessCollection

463
00:19:59,296 --> 00:20:02,776
MutableRandomAccessCollection

464
00:20:03,466 --> 00:20:06,526
but, like you always

465
00:20:06,806 --> 00:20:08,546
Let's look at some of the

466
00:20:08,546 --> 00:20:09,926
of Data's new conformances.

467
00:20:11,016 --> 00:20:13,236
First we're going to need

468
00:20:13,236 --> 00:20:15,456
to have some base64

469
00:20:15,616 --> 00:20:17,656
which we'll parse using

470
00:20:18,476 --> 00:20:23,796
In the explicit unwrap here

471
00:20:23,826 --> 00:20:25,126
because this is a demo,

472
00:20:25,126 --> 00:20:26,546
and I know that that's

473
00:20:26,546 --> 00:20:31,446
You should probably use a

474
00:20:31,446 --> 00:20:35,376
for yourself, but let's say,

475
00:20:35,376 --> 00:20:36,826
and the nice thing to look

476
00:20:36,826 --> 00:20:38,546
at when you have

477
00:20:38,546 --> 00:20:39,416
That's always a good

478
00:20:39,416 --> 00:20:40,426
So we're going to

479
00:20:40,646 --> 00:20:42,126
We'll use as our

480
00:20:42,126 --> 00:20:44,806
we'll use a native Swift array,

481
00:20:44,996 --> 00:20:48,466
and we'll just use the byte

482
00:20:48,466 --> 00:20:51,216
as the index and maintain

483
00:20:52,046 --> 00:20:54,696
So let's, because Data

484
00:20:54,696 --> 00:20:58,026
through its bytes, is natural

485
00:20:58,026 --> 00:21:01,066
with a four N loop, and so

486
00:20:58,026 --> 00:21:01,066
with a four N loop, and so

487
00:21:01,066 --> 00:21:01,856
And let's take a look.

488
00:21:01,856 --> 00:21:04,636
Well that definitely

489
00:21:04,896 --> 00:21:07,076
and like all histograms,

490
00:21:07,076 --> 00:21:09,216
and I'm seeing a lot of high

491
00:21:09,856 --> 00:21:11,436
and I'd like to filter that out,

492
00:21:11,726 --> 00:21:14,536
and luckily Data's a collection

493
00:21:14,536 --> 00:21:16,396
to things like Map,

494
00:21:16,396 --> 00:21:19,106
and all of your other

495
00:21:19,656 --> 00:21:21,606
And so, let's say we wanted

496
00:21:21,606 --> 00:21:23,486
that was greater than three.

497
00:21:23,786 --> 00:21:25,996
It's as simple as

498
00:21:26,436 --> 00:21:29,666
and we can generate

499
00:21:30,666 --> 00:21:33,306
And also as a collection,

500
00:21:33,816 --> 00:21:37,156
and these slices work just

501
00:21:37,326 --> 00:21:38,256
or value type collections

502
00:21:38,256 --> 00:21:40,306
that you're already

503
00:21:41,456 --> 00:21:44,456
Mutating them invokes the

504
00:21:44,456 --> 00:21:48,166
that Tony described earlier and

505
00:21:49,826 --> 00:21:53,426
Now, Data also remains

506
00:21:53,426 --> 00:21:54,946
of the underlying

507
00:21:55,176 --> 00:21:57,866
and that's a very big sentence,

508
00:21:57,866 --> 00:21:59,636
to show what I mean by that.

509
00:22:00,056 --> 00:22:01,346
As an example, let's go ahead

510
00:22:01,346 --> 00:22:04,106
and create a custom

511
00:22:04,426 --> 00:22:05,676
that allocates no storage,

512
00:22:05,906 --> 00:22:08,446
but represents a virtual

513
00:22:09,116 --> 00:22:10,556
We'll call it an AllOnesData.

514
00:22:10,806 --> 00:22:11,556
Very descriptive.

515
00:22:11,556 --> 00:22:14,006
And I'm only going to show the

516
00:22:14,006 --> 00:22:17,916
here, specifically

517
00:22:17,916 --> 00:22:20,596
of this class is more

518
00:22:20,736 --> 00:22:21,976
We set all the bytes to one.

519
00:22:22,436 --> 00:22:26,016
So we don't need to store

520
00:22:26,016 --> 00:22:27,936
and create a read-only

521
00:22:28,496 --> 00:22:30,116
But we won't just

522
00:22:30,116 --> 00:22:33,906
We're actually going

523
00:22:33,906 --> 00:22:35,636
that wraps the reference

524
00:22:35,926 --> 00:22:39,546
And using that, we just use

525
00:22:39,546 --> 00:22:41,786
and it works exactly the

526
00:22:42,536 --> 00:22:46,226
We have a ones value type that's

527
00:22:46,226 --> 00:22:47,946
of all ones, and those

528
00:22:47,946 --> 00:22:50,306
They don't actually consume

529
00:22:50,626 --> 00:22:53,106
Let's go ahead and create

530
00:22:53,236 --> 00:22:56,156
we've not done any mutation,

531
00:22:56,156 --> 00:22:58,266
or manifest any of those

532
00:22:59,096 --> 00:23:01,646
But let's get ready to mutate

533
00:22:59,096 --> 00:23:01,646
But let's get ready to mutate

534
00:23:01,646 --> 00:23:04,146
we're going to actually use

535
00:23:04,146 --> 00:23:07,646
year, which is the

536
00:23:08,626 --> 00:23:10,856
called withUnsafe MutableBytes.

537
00:23:11,046 --> 00:23:13,456
And this is much better than

538
00:23:13,456 --> 00:23:18,646
on the data itself, because

539
00:23:18,646 --> 00:23:20,886
to those bytes within the

540
00:23:21,236 --> 00:23:23,956
which it makes it very easy to

541
00:23:23,956 --> 00:23:25,446
you don't have pointers

542
00:23:25,446 --> 00:23:27,536
Pointers are only going to

543
00:23:28,596 --> 00:23:31,916
And so we actually perform our

544
00:23:31,916 --> 00:23:34,066
on right machinery, and

545
00:23:34,176 --> 00:23:38,966
the copies bytes are now

546
00:23:39,066 --> 00:23:40,036
Let's move on to

547
00:23:40,036 --> 00:23:41,296
I'm tired of talking about Data.

548
00:23:42,006 --> 00:23:47,216
Let's talk about, URLs

549
00:23:47,546 --> 00:23:49,866
Now to motivate this

550
00:23:49,866 --> 00:23:53,146
about how we did

551
00:23:53,146 --> 00:23:56,456
So in Swift 2.2, we would

552
00:23:56,456 --> 00:23:58,626
we're going to talk about by

553
00:23:58,626 --> 00:24:01,336
so special, I keep it at

554
00:23:58,626 --> 00:24:01,336
so special, I keep it at

555
00:24:02,086 --> 00:24:03,676
And I'm curious about

556
00:24:03,676 --> 00:24:06,966
I care about the creation date,

557
00:24:07,306 --> 00:24:10,016
and for some reason, the

558
00:24:10,016 --> 00:24:11,186
that this file's located on.

559
00:24:11,866 --> 00:24:14,116
And these are just strings

560
00:24:14,116 --> 00:24:15,646
this is just an array

561
00:24:16,036 --> 00:24:18,426
And when I ask my URL

562
00:24:18,426 --> 00:24:21,516
I just get a regular dictionary,

563
00:24:21,516 --> 00:24:25,016
It's just a string to an

564
00:24:25,016 --> 00:24:29,676
that result requires a lot of

565
00:24:29,676 --> 00:24:31,086
you know, suggest

566
00:24:31,086 --> 00:24:32,376
and suggest that

567
00:24:32,376 --> 00:24:35,246
and I'm constantly consulting

568
00:24:35,246 --> 00:24:38,696
that I'm getting it right, and

569
00:24:38,696 --> 00:24:39,826
in terms of the dictionary.

570
00:24:40,336 --> 00:24:45,236
And so you can do

571
00:24:45,366 --> 00:24:48,206
and it's every failure is

572
00:24:49,166 --> 00:24:51,126
So, let's see how this

573
00:24:51,796 --> 00:24:55,416
In Swift 3, creating

574
00:24:55,416 --> 00:24:59,006
but we no longer use a

575
00:24:59,006 --> 00:25:02,626
This is moved into a

576
00:24:59,006 --> 00:25:02,626
This is moved into a

577
00:25:03,456 --> 00:25:05,036
We're still talking

578
00:25:05,996 --> 00:25:09,656
and instead of asking with an

579
00:25:09,656 --> 00:25:11,966
to use those new strongly

580
00:25:11,966 --> 00:25:14,566
that I mentioned earlier, and

581
00:25:14,566 --> 00:25:17,546
and when we ask the URL

582
00:25:17,546 --> 00:25:19,296
no longer are we going

583
00:25:19,606 --> 00:25:21,876
but instead we're

584
00:25:21,966 --> 00:25:24,326
a new Foundation value

585
00:25:24,326 --> 00:25:26,746
that Foundation value type

586
00:25:26,776 --> 00:25:28,296
that we're asking

587
00:25:29,346 --> 00:25:31,476
As you can see, creation

588
00:25:31,846 --> 00:25:33,176
its regular file is a Bool,

589
00:25:33,176 --> 00:25:35,366
and volume maximum file

590
00:25:35,796 --> 00:25:38,686
And it's also worth pointing

591
00:25:38,686 --> 00:25:42,396
out that the URLResourceValue

592
00:25:42,396 --> 00:25:45,626
It's still implemented in terms

593
00:25:45,626 --> 00:25:48,606
in the Swift 2 API, so we're not

594
00:25:48,746 --> 00:25:51,176
of things that are

595
00:25:51,176 --> 00:25:52,926
It's still going to be,

596
00:25:52,926 --> 00:25:54,356
I get potentially

597
00:25:54,746 --> 00:25:56,246
And further, if you

598
00:25:56,246 --> 00:25:58,356
the dictionary is still here,

599
00:25:58,356 --> 00:25:59,676
to ask for a string,

600
00:25:59,676 --> 00:26:01,576
for the URL resource key

601
00:25:59,676 --> 00:26:01,576
for the URL resource key

602
00:26:02,656 --> 00:26:04,836
Now, you might be noticing

603
00:26:04,836 --> 00:26:07,276
and the reason why is, well,

604
00:26:07,276 --> 00:26:09,056
The first is that you

605
00:26:09,366 --> 00:26:11,616
So, if you didn't ask for the

606
00:26:11,616 --> 00:26:13,776
and that again, goes back to

607
00:26:14,256 --> 00:26:16,246
The second reason why

608
00:26:16,246 --> 00:26:20,526
that the property itself might

609
00:26:20,526 --> 00:26:21,796
of VolumeMaximumFileSize.

610
00:26:22,066 --> 00:26:24,266
Let's look at two

611
00:26:25,536 --> 00:26:28,916
So because we asked for regular

612
00:26:28,916 --> 00:26:30,686
to explicitly unwrap

613
00:26:30,686 --> 00:26:31,576
It will be there.

614
00:26:31,576 --> 00:26:32,586
We asked for it.

615
00:26:32,696 --> 00:26:35,696
However, the documentation

616
00:26:35,696 --> 00:26:38,676
that not all volumes and not all

617
00:26:38,676 --> 00:26:41,206
file system size, and so

618
00:26:41,416 --> 00:26:45,336
And as a perfect example of a

619
00:26:45,336 --> 00:26:47,686
in Swift, to conditionally

620
00:26:47,686 --> 00:26:51,226
Now, let's talk about mutation.

621
00:26:51,396 --> 00:26:54,446
Of course, the mutation

622
00:26:54,446 --> 00:26:57,176
in URLResourceValues is in

623
00:26:57,516 --> 00:26:58,776
and so when you try

624
00:26:58,776 --> 00:27:00,986
even though this is my special

625
00:26:58,776 --> 00:27:00,986
even though this is my special

626
00:27:00,986 --> 00:27:04,236
to say that it's not regular,

627
00:27:04,236 --> 00:27:06,246
at compile time instead

628
00:27:06,246 --> 00:27:07,286
that problem at run time.

629
00:27:07,856 --> 00:27:12,386
And further, the creation date

630
00:27:12,386 --> 00:27:14,676
and so something absurd

631
00:27:14,676 --> 00:27:16,856
with Siri, can't work with code.

632
00:27:17,466 --> 00:27:20,396
Now the last thing

633
00:27:20,396 --> 00:27:23,076
about on this Foundation

634
00:27:23,076 --> 00:27:24,746
about Swift's native

635
00:27:24,956 --> 00:27:27,576
And we're going to talk about

636
00:27:27,576 --> 00:27:29,136
because there's a

637
00:27:30,256 --> 00:27:32,686
When data takes ownership

638
00:27:32,856 --> 00:27:35,116
you have the option of

639
00:27:36,636 --> 00:27:38,456
Data supports many

640
00:27:38,456 --> 00:27:43,426
and including the option to

641
00:27:44,256 --> 00:27:49,106
Now, Swift supports

642
00:27:49,106 --> 00:27:50,616
and oftentimes you'll

643
00:27:50,616 --> 00:27:52,996
integers where you can do case

644
00:27:52,996 --> 00:27:56,206
to be able to, you know, do

645
00:27:56,206 --> 00:27:57,586
with it, but here

646
00:27:57,966 --> 00:28:00,526
because we actually want

647
00:27:57,966 --> 00:28:00,526
because we actually want

648
00:28:00,526 --> 00:28:01,486
that you want to provide.

649
00:28:01,746 --> 00:28:03,066
Let's see this in action.

650
00:28:03,216 --> 00:28:04,966
We'll start simple

651
00:28:05,296 --> 00:28:07,256
Of course, you can

652
00:28:07,256 --> 00:28:10,316
although you probably don't

653
00:28:10,536 --> 00:28:14,986
So, you malloc, and when you

654
00:28:15,216 --> 00:28:17,036
you can, you'll deallocate

655
00:28:17,116 --> 00:28:20,796
and the syntax there

656
00:28:20,856 --> 00:28:23,156
as using the integration

657
00:28:23,526 --> 00:28:24,826
Let's look at a custom example.

658
00:28:24,936 --> 00:28:27,026
Let's suppose we have a

659
00:28:27,026 --> 00:28:30,156
to create glorious pointers,

660
00:28:30,156 --> 00:28:32,446
that we free gloriously,

661
00:28:32,826 --> 00:28:35,606
and so we can specify the custom

662
00:28:35,606 --> 00:28:38,596
as providing a closure

663
00:28:38,596 --> 00:28:40,186
that you do the custom

664
00:28:40,186 --> 00:28:45,656
And this is really powerful, and

665
00:28:45,656 --> 00:28:46,976
for framework developers,

666
00:28:47,246 --> 00:28:50,836
because in other languages

667
00:28:50,836 --> 00:28:52,886
to provide a second

668
00:28:53,256 --> 00:28:57,566
but now in Swift 3, we can

669
00:28:57,566 --> 00:29:00,096
that expresses all of

670
00:28:57,566 --> 00:29:00,096
that expresses all of

671
00:29:00,476 --> 00:29:01,166
and expressively.

672
00:29:02,386 --> 00:29:04,276
And so that concludes our

673
00:29:04,586 --> 00:29:06,416
Hopefully we saw a great

674
00:29:06,416 --> 00:29:07,376
to hand things back to Tony

675
00:29:07,376 --> 00:29:08,646
to talk a little

676
00:29:09,516 --> 00:29:15,746
[ Applause ]

677
00:29:16,246 --> 00:29:16,686
&gt;&gt; Thanks Michael.

678
00:29:17,216 --> 00:29:21,026
All right, now you've seen just

679
00:29:21,676 --> 00:29:23,616
Let's talk about how you

680
00:29:24,986 --> 00:29:26,656
First, let's talk

681
00:29:27,046 --> 00:29:29,066
So, keeping with this theme

682
00:29:29,486 --> 00:29:31,036
we've extended the

683
00:29:31,036 --> 00:29:33,716
that you're already familiar

684
00:29:33,716 --> 00:29:36,976
between Objective-C and Swift,

685
00:29:36,976 --> 00:29:38,726
and NSString are

686
00:29:38,726 --> 00:29:40,786
that exact same concepts

687
00:29:40,786 --> 00:29:42,666
and all the other value

688
00:29:43,916 --> 00:29:47,466
That means that all

689
00:29:47,506 --> 00:29:50,696
from Cocoa SDK is going to

690
00:29:51,136 --> 00:29:54,586
and that's a key part of how we

691
00:29:55,126 --> 00:29:59,346
So for example, in

692
00:29:59,556 --> 00:30:02,246
you'll see this class called

693
00:29:59,556 --> 00:30:02,246
you'll see this class called

694
00:30:02,746 --> 00:30:06,466
presents a UI to allow your

695
00:30:06,536 --> 00:30:09,176
among others, two properties

696
00:30:09,476 --> 00:30:11,406
and you see here their

697
00:30:11,676 --> 00:30:13,616
and also NSDate reference types.

698
00:30:15,016 --> 00:30:17,146
In Swift 3, with no

699
00:30:17,536 --> 00:30:19,306
just by making these

700
00:30:19,666 --> 00:30:20,766
this class looks like this.

701
00:30:20,926 --> 00:30:23,746
You see we've got the struct

702
00:30:23,746 --> 00:30:27,126
to mark this as @NSCopying

703
00:30:27,186 --> 00:30:28,756
and we handle the

704
00:30:29,366 --> 00:30:34,666
Now there can be a performance

705
00:30:34,846 --> 00:30:37,916
and to explain what that is, I'd

706
00:30:37,916 --> 00:30:39,546
on how the bridging

707
00:30:39,856 --> 00:30:42,796
We have two major strategies for

708
00:30:42,886 --> 00:30:45,416
which hold a reference, and

709
00:30:45,556 --> 00:30:46,646
which create a reference.

710
00:30:47,356 --> 00:30:51,106
So, for example, we're

711
00:30:51,186 --> 00:30:53,496
Here I've created data

712
00:30:53,536 --> 00:30:54,716
that wraps a reference type.

713
00:30:55,246 --> 00:30:58,326
Now, if I call some

714
00:30:58,326 --> 00:31:01,106
that we hand the reference

715
00:30:58,326 --> 00:31:01,106
that we hand the reference

716
00:31:01,486 --> 00:31:02,216
That's because, of course,

717
00:31:02,216 --> 00:31:03,866
Objective-C doesn't

718
00:31:03,866 --> 00:31:05,466
It only understands NSData.

719
00:31:05,966 --> 00:31:07,996
Now, in this case perhaps

720
00:31:08,326 --> 00:31:10,616
that Objective-C code isn't

721
00:31:10,616 --> 00:31:11,636
for any period of time.

722
00:31:11,636 --> 00:31:13,266
It may access it, and

723
00:31:13,436 --> 00:31:15,206
So, just holding the reference

724
00:31:15,206 --> 00:31:16,476
for a short period

725
00:31:17,066 --> 00:31:20,106
On the other hand, you'll see

726
00:31:20,106 --> 00:31:23,436
take a data for longer period

727
00:31:23,436 --> 00:31:25,926
as properties that have

728
00:31:26,916 --> 00:31:28,766
In that case, in Objective-C,

729
00:31:29,126 --> 00:31:31,646
this Objective-C code will

730
00:31:32,106 --> 00:31:33,876
and that's because it

731
00:31:33,876 --> 00:31:36,066
from any potential mutation

732
00:31:36,066 --> 00:31:38,286
that it just received from

733
00:31:39,236 --> 00:31:42,436
So that means that when crossing

734
00:31:43,296 --> 00:31:44,336
Let's flip that around

735
00:31:44,526 --> 00:31:45,706
Let's say I've got

736
00:31:45,706 --> 00:31:48,326
that is calling an Objective-C

737
00:31:48,846 --> 00:31:50,766
Here, the Objective-C

738
00:31:50,766 --> 00:31:53,996
created the class NSData and

739
00:31:54,746 --> 00:31:57,036
we create the struct Data,

740
00:31:57,106 --> 00:31:59,596
and it calls copy, for exactly

741
00:31:59,596 --> 00:32:00,336
in the previous slide.

742
00:31:59,596 --> 00:32:00,336
in the previous slide.

743
00:32:00,846 --> 00:32:03,206
The struct needs to maintain

744
00:32:03,206 --> 00:32:06,386
so that it can provide the

745
00:32:07,776 --> 00:32:10,426
Fortunately, almost all data

746
00:32:10,426 --> 00:32:11,986
from the SDK is immutable,

747
00:32:12,276 --> 00:32:14,416
which means that the copy

748
00:32:14,606 --> 00:32:16,236
However, it is important

749
00:32:16,526 --> 00:32:18,846
that when crossing this

750
00:32:19,966 --> 00:32:23,456
For small types, like Date, you

751
00:32:23,516 --> 00:32:24,866
We saw earlier the

752
00:32:24,866 --> 00:32:25,486
just had a double.

753
00:32:25,996 --> 00:32:30,366
So, in Swift, if we call an

754
00:32:30,906 --> 00:32:34,766
which takes a date, then we

755
00:32:34,766 --> 00:32:37,296
on the bridging, and

756
00:32:37,296 --> 00:32:38,836
because the Objective-C

757
00:32:38,836 --> 00:32:39,726
to deal with references.

758
00:32:40,236 --> 00:32:42,886
Now, we do a lot of tricks in

759
00:32:42,886 --> 00:32:44,786
of things like NSDates

760
00:32:45,156 --> 00:32:46,906
However, it is important

761
00:32:46,906 --> 00:32:48,976
that an allocation can

762
00:32:53,516 --> 00:32:56,016
So, we optimize these

763
00:32:56,976 --> 00:32:58,916
In your code, you should

764
00:32:58,916 --> 00:33:00,776
over that bridge repeatedly.

765
00:32:58,916 --> 00:33:00,776
over that bridge repeatedly.

766
00:33:01,826 --> 00:33:04,206
This is because we wanted our

767
00:33:04,656 --> 00:33:07,186
but it does mean that there

768
00:33:07,186 --> 00:33:08,846
So, something to be aware

769
00:33:08,846 --> 00:33:10,216
at adopting these

770
00:33:10,666 --> 00:33:13,326
Next, let's talk

771
00:33:14,296 --> 00:33:15,296
So, first, some good news.

772
00:33:16,166 --> 00:33:18,086
These new types we're

773
00:33:18,086 --> 00:33:19,816
for all Swift deployment

774
00:33:20,496 --> 00:33:22,026
They're part of the

775
00:33:22,496 --> 00:33:24,266
which means you don't need

776
00:33:24,266 --> 00:33:26,376
to upgrade to the newest

777
00:33:26,826 --> 00:33:29,016
As soon as Swift 3 and

778
00:33:29,016 --> 00:33:30,386
you can begin using

779
00:33:31,216 --> 00:33:34,936
Now, to help you, we've of

780
00:33:35,416 --> 00:33:38,706
and that means that when you

781
00:33:38,706 --> 00:33:41,346
you'll see a dialog box like

782
00:33:41,346 --> 00:33:42,156
that you click convert.

783
00:33:42,526 --> 00:33:43,766
So, let me show you a few things

784
00:33:43,986 --> 00:33:45,676
that the Migrator

785
00:33:46,676 --> 00:33:49,616
So here we have in

786
00:33:49,826 --> 00:33:52,886
and we're calling a method on

787
00:33:53,456 --> 00:33:56,616
The Migrator will fix up

788
00:33:56,616 --> 00:33:58,486
into the value type

789
00:33:59,206 --> 00:34:00,996
and it will change the methods

790
00:33:59,206 --> 00:34:00,996
and it will change the methods

791
00:34:01,216 --> 00:34:02,746
because they've changed

792
00:34:02,746 --> 00:34:04,606
to our new Swift 3

793
00:34:05,016 --> 00:34:07,566
both for the reference types

794
00:34:08,335 --> 00:34:09,376
Here's another example.

795
00:34:10,085 --> 00:34:12,606
Here, I'm creating an

796
00:34:12,956 --> 00:34:16,496
and then setting some of its

797
00:34:16,496 --> 00:34:19,866
because NSDateComponents is an

798
00:34:20,656 --> 00:34:21,366
Now, in Swift 3,

799
00:34:21,366 --> 00:34:23,235
we've introduced a

800
00:34:23,636 --> 00:34:25,775
So the Migrator will change

801
00:34:26,416 --> 00:34:29,216
but also it notices that you're

802
00:34:29,216 --> 00:34:30,446
to a var for you as well.

803
00:34:31,466 --> 00:34:33,505
Now the Migrator can

804
00:34:33,896 --> 00:34:35,956
but there are some places

805
00:34:35,956 --> 00:34:38,596
at what it's done, you can do

806
00:34:38,596 --> 00:34:40,315
of some additional things

807
00:34:40,726 --> 00:34:43,536
In this case, DateComponents

808
00:34:43,536 --> 00:34:45,186
and this is something

809
00:34:45,186 --> 00:34:48,545
The initializer has

810
00:34:48,545 --> 00:34:50,295
in the DateComponents,

811
00:34:50,406 --> 00:34:51,505
and they all have

812
00:34:51,835 --> 00:34:53,966
which means that you can create

813
00:34:53,966 --> 00:34:56,426
values you care about, your

814
00:34:56,696 --> 00:34:58,066
And you can change

815
00:34:58,176 --> 00:34:59,826
because now you don't

816
00:34:59,826 --> 00:35:01,386
after you've initialized it.

817
00:34:59,826 --> 00:35:01,386
after you've initialized it.

818
00:35:02,986 --> 00:35:04,656
And finally, our

819
00:35:05,156 --> 00:35:08,036
Here in Swift 2, see that I'm

820
00:35:08,206 --> 00:35:10,556
the reference type, and

821
00:35:11,846 --> 00:35:14,556
In Swift 3, the Migrator

822
00:35:14,826 --> 00:35:18,196
like contentsOf URL,

823
00:35:19,376 --> 00:35:21,796
and it will change NSData

824
00:35:22,246 --> 00:35:24,536
However, it's left the

825
00:35:24,536 --> 00:35:25,006
type alone.

826
00:35:25,526 --> 00:35:28,046
In some cases like this, there's

827
00:35:28,046 --> 00:35:29,066
for the Migrator in order

828
00:35:29,066 --> 00:35:31,236
to do what we think is the

829
00:35:31,236 --> 00:35:33,036
to leave it as is and

830
00:35:33,726 --> 00:35:36,176
However, if you go back and

831
00:35:36,176 --> 00:35:38,676
on your own, you can

832
00:35:38,736 --> 00:35:41,056
We can change the

833
00:35:41,636 --> 00:35:43,516
which means that we

834
00:35:43,866 --> 00:35:46,046
And we can remove

835
00:35:46,046 --> 00:35:47,426
because it has a

836
00:35:48,006 --> 00:35:51,596
So, we've talked

837
00:35:51,596 --> 00:35:53,316
and I'd like to just

838
00:35:54,496 --> 00:35:55,826
We believe that these

839
00:35:55,826 --> 00:35:58,316
to Foundation are going

840
00:35:58,316 --> 00:36:00,486
and your whole development

841
00:35:58,316 --> 00:36:00,486
and your whole development

842
00:36:01,366 --> 00:36:03,496
Partly that was due

843
00:36:03,966 --> 00:36:06,406
but we also took the

844
00:36:06,596 --> 00:36:08,446
and add a brand new

845
00:36:08,566 --> 00:36:10,426
and a lot of new

846
00:36:11,626 --> 00:36:14,846
We see this as the start

847
00:36:14,846 --> 00:36:16,886
to continue to be this

848
00:36:16,886 --> 00:36:19,006
We're going to make many

849
00:36:19,006 --> 00:36:22,056
to make your Swift apps safer,

850
00:36:23,296 --> 00:36:25,406
So for more information,

851
00:36:26,556 --> 00:36:30,186
and these related sessions,

852
00:36:30,186 --> 00:36:31,976
with Swift Open Source,

853
00:36:32,111 --> 00:36:34,111
[ Applause ]

854
00:36:34,206 --> 00:36:34,446
Thank you.

855
00:36:35,508 --> 00:36:37,508
[ Applause ]
