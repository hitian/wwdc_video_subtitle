1
00:00:07,516 --> 00:00:18,500
[ Music ]

2
00:00:26,516 --> 00:00:32,195
[ Applause ]

3
00:00:32,695 --> 00:00:32,976
&gt;&gt; Great.

4
00:00:33,526 --> 00:00:35,156
Hello, and welcome

5
00:00:35,156 --> 00:00:37,156
on keeping your Watch

6
00:00:37,866 --> 00:00:41,456
My name is Eric Lanz, and

7
00:00:41,906 --> 00:00:44,436
We're both engineers

8
00:00:46,456 --> 00:00:49,036
Here you see a screenshot

9
00:00:49,586 --> 00:00:52,616
When you hear the word app, this

10
00:00:53,206 --> 00:00:55,216
but watchOS has many ways

11
00:00:55,286 --> 00:00:57,636
to interact beyond the

12
00:00:58,106 --> 00:01:01,056
For example, your users

13
00:00:58,106 --> 00:01:01,056
For example, your users

14
00:01:01,156 --> 00:01:03,186
as an important part

15
00:01:04,495 --> 00:01:07,466
If you have a complication,

16
00:01:07,466 --> 00:01:10,826
as an important part

17
00:01:11,066 --> 00:01:14,796
In watchOS 3, we're introducing

18
00:01:15,236 --> 00:01:17,786
This feature allows

19
00:01:17,786 --> 00:01:21,436
of their favorite applications

20
00:01:21,756 --> 00:01:23,976
They can then swipe through

21
00:01:23,976 --> 00:01:25,446
at their data in one place.

22
00:01:26,376 --> 00:01:28,506
This is now also

23
00:01:29,576 --> 00:01:32,106
People are using your

24
00:01:32,106 --> 00:01:35,306
in many different ways and

25
00:01:35,306 --> 00:01:37,486
in sync and up to

26
00:01:38,236 --> 00:01:40,306
This may sound like

27
00:01:40,426 --> 00:01:41,236
but don't worry.

28
00:01:41,686 --> 00:01:43,306
We're here to help.

29
00:01:44,196 --> 00:01:46,646
Today we'll be talking

30
00:01:47,076 --> 00:01:50,676
First, an overview of this API

31
00:01:51,496 --> 00:01:52,776
Next, a walkthrough

32
00:01:52,776 --> 00:01:55,256
of an example application

33
00:01:56,046 --> 00:01:57,886
Then Austen will come on stage

34
00:01:58,086 --> 00:02:00,606
and show you how scheduling

35
00:01:58,086 --> 00:02:00,606
and show you how scheduling

36
00:02:01,466 --> 00:02:03,746
After that, we'll share

37
00:02:03,746 --> 00:02:06,266
for adopting this API in

38
00:02:06,966 --> 00:02:10,036
To close out the session,

39
00:02:10,036 --> 00:02:13,296
of how we adopted this API in

40
00:02:13,926 --> 00:02:18,756
Let's get started by thinking

41
00:02:18,756 --> 00:02:21,206
and our watches in different

42
00:02:21,976 --> 00:02:25,036
In the morning, you can

43
00:02:25,036 --> 00:02:26,006
in line for coffee.

44
00:02:26,256 --> 00:02:28,586
You can then browse the news on

45
00:02:29,366 --> 00:02:31,566
Before you leave the shop,

46
00:02:31,566 --> 00:02:34,726
with the complication on your

47
00:02:36,346 --> 00:02:39,496
For lunch, you use maps again

48
00:02:39,496 --> 00:02:41,146
After a few minutes,

49
00:02:41,276 --> 00:02:42,236
and put your phone away.

50
00:02:43,506 --> 00:02:45,856
On the way to the restaurant,

51
00:02:46,066 --> 00:02:48,476
A quick glance at your wrist

52
00:02:48,476 --> 00:02:51,326
be a few minutes late,

53
00:02:52,006 --> 00:02:55,046
At the end of the day,

54
00:02:55,046 --> 00:02:56,956
to plan your route,

55
00:02:58,226 --> 00:03:01,286
You get an iMessage asking

56
00:02:58,226 --> 00:03:01,286
You get an iMessage asking

57
00:03:02,086 --> 00:03:05,496
Use the quick reply features

58
00:03:05,496 --> 00:03:09,646
"On my way," another

59
00:03:10,026 --> 00:03:13,516
It simply is impossible to have

60
00:03:13,516 --> 00:03:15,426
of seconds that users

61
00:03:15,776 --> 00:03:16,866
We need more time,

62
00:03:17,276 --> 00:03:19,286
and background refresh

63
00:03:19,856 --> 00:03:23,306
This powerful new API allows

64
00:03:23,306 --> 00:03:27,146
so you can have your data

65
00:03:30,196 --> 00:03:34,296
To understand what this new API

66
00:03:34,376 --> 00:03:36,116
at checking the weather

67
00:03:36,956 --> 00:03:39,376
Here we see the foreground

68
00:03:39,376 --> 00:03:40,606
at the weather complication.

69
00:03:41,196 --> 00:03:43,956
Our data would have to be

70
00:03:45,056 --> 00:03:47,856
So let's use this API to

71
00:03:47,966 --> 00:03:52,236
to update our UI, but how can

72
00:03:52,726 --> 00:03:55,246
We'll need more time to

73
00:03:55,246 --> 00:03:56,016
from our server.

74
00:03:56,196 --> 00:03:57,506
So let's schedule

75
00:03:58,546 --> 00:04:01,046
But how did we even get

76
00:03:58,546 --> 00:04:01,046
But how did we even get

77
00:04:01,656 --> 00:04:03,526
We're going to need

78
00:04:03,526 --> 00:04:05,866
to wake our application

79
00:04:06,416 --> 00:04:10,476
On watchOS, the system

80
00:04:10,596 --> 00:04:11,566
by giving it a task.

81
00:04:12,336 --> 00:04:14,936
The system has a limited

82
00:04:15,106 --> 00:04:17,106
So make the best use

83
00:04:18,606 --> 00:04:20,826
When the system wants to

84
00:04:20,946 --> 00:04:23,636
it delivers one or more

85
00:04:24,156 --> 00:04:25,666
Make sure to hold

86
00:04:25,796 --> 00:04:27,646
until you're finished

87
00:04:29,136 --> 00:04:30,496
The system delivers tasks

88
00:04:30,626 --> 00:04:33,916
by calling the new handled

89
00:04:33,916 --> 00:04:35,356
on WK extension delegate.

90
00:04:36,126 --> 00:04:38,526
We'll go through an example

91
00:04:39,086 --> 00:04:42,746
When you're finished with your

92
00:04:42,746 --> 00:04:44,366
to the system by completing it.

93
00:04:44,856 --> 00:04:46,516
This is the fundamental process

94
00:04:46,576 --> 00:04:49,456
by which you obtain

95
00:04:49,996 --> 00:04:54,236
Now that we understand the

96
00:04:54,366 --> 00:04:57,056
let's dive in and look at

97
00:04:57,056 --> 00:04:59,546
that the system can

98
00:05:00,056 --> 00:05:02,196
First, this is the

99
00:05:02,756 --> 00:05:05,776
This is a generic runtime

100
00:05:05,826 --> 00:05:08,276
to have your application

101
00:05:09,436 --> 00:05:11,816
Within the application

102
00:05:11,866 --> 00:05:14,086
you can do any kind

103
00:05:14,626 --> 00:05:16,826
You may want to update

104
00:05:17,246 --> 00:05:20,116
or download some data from

105
00:05:21,306 --> 00:05:23,446
The URLSession task

106
00:05:23,446 --> 00:05:25,336
out that your data has

107
00:05:25,446 --> 00:05:26,396
and ready to process.

108
00:05:27,876 --> 00:05:31,286
Since watchOS is a shared

109
00:05:31,406 --> 00:05:34,296
to leave our application running

110
00:05:34,926 --> 00:05:37,406
It would be better to allow

111
00:05:37,406 --> 00:05:40,026
and let the system

112
00:05:40,616 --> 00:05:44,346
Snapshots are a very

113
00:05:44,996 --> 00:05:46,406
They are both your launch image

114
00:05:47,086 --> 00:05:49,276
and your preview image

115
00:05:50,026 --> 00:05:51,576
If the user settles on your app,

116
00:05:51,576 --> 00:05:53,046
it will start running

117
00:05:53,226 --> 00:05:54,956
So it's critical

118
00:05:54,956 --> 00:05:56,476
up to date at all times.

119
00:05:56,886 --> 00:06:02,226
The snapshot task is how you

120
00:05:56,886 --> 00:06:02,226
The snapshot task is how you

121
00:06:02,226 --> 00:06:04,686
in the background to be

122
00:06:04,996 --> 00:06:09,716
When you complete this task,

123
00:06:09,846 --> 00:06:12,326
the system will automatically

124
00:06:13,096 --> 00:06:14,926
Remember to always

125
00:06:15,056 --> 00:06:16,726
after you finish

126
00:06:16,796 --> 00:06:18,976
or the user won't see

127
00:06:20,566 --> 00:06:23,226
When a notification arrives,

128
00:06:23,446 --> 00:06:26,746
They will then expect your

129
00:06:26,876 --> 00:06:28,776
to be updated to

130
00:06:29,486 --> 00:06:32,746
Users love applications that

131
00:06:32,746 --> 00:06:36,226
of the OS and are more likely

132
00:06:36,666 --> 00:06:41,526
If the user does not interact

133
00:06:41,526 --> 00:06:44,926
than one hour, the system is

134
00:06:44,996 --> 00:06:46,606
to restore your default state.

135
00:06:47,796 --> 00:06:50,536
Default state means different

136
00:06:50,536 --> 00:06:53,866
and some apps have no

137
00:06:55,876 --> 00:06:58,466
Designing great snapshots

138
00:06:58,466 --> 00:07:00,566
and important topic

139
00:06:58,466 --> 00:07:00,566
and important topic

140
00:07:00,996 --> 00:07:03,186
We recommend you check

141
00:07:03,396 --> 00:07:04,496
for some great advice

142
00:07:04,606 --> 00:07:07,116
on designing excellent

143
00:07:09,036 --> 00:07:11,956
The last task type is

144
00:07:12,606 --> 00:07:15,896
On watchOS 3, we've

145
00:07:16,066 --> 00:07:17,936
with our background refresh API.

146
00:07:19,036 --> 00:07:22,436
This means you can now use

147
00:07:22,476 --> 00:07:25,286
to get data to your

148
00:07:25,286 --> 00:07:26,066
in the background.

149
00:07:28,556 --> 00:07:31,836
Complication push, application

150
00:07:31,836 --> 00:07:34,496
or sending user info will

151
00:07:34,526 --> 00:07:35,336
in the background.

152
00:07:36,096 --> 00:07:37,686
We hope that this

153
00:07:37,686 --> 00:07:41,486
to even richer watch

154
00:07:42,276 --> 00:07:46,086
When your application is woken

155
00:07:46,916 --> 00:07:49,256
use the standard API

156
00:07:49,716 --> 00:07:51,966
First, make sure the

157
00:07:53,356 --> 00:07:54,796
Once the session reactivates,

158
00:07:54,966 --> 00:07:58,336
start monitoring the new

159
00:07:59,026 --> 00:08:00,676
As long as this property

160
00:07:59,026 --> 00:08:00,676
As long as this property

161
00:08:00,806 --> 00:08:02,416
you still have data to process.

162
00:08:02,916 --> 00:08:04,286
Make sure to hold onto the task

163
00:08:04,426 --> 00:08:06,296
until you're finished

164
00:08:06,516 --> 00:08:10,286
It is your responsibility

165
00:08:10,326 --> 00:08:12,056
to the system by completing it.

166
00:08:12,056 --> 00:08:15,506
If you don't do this, you will

167
00:08:15,596 --> 00:08:17,736
and we're going to give

168
00:08:18,256 --> 00:08:21,806
Austen will talk more in the

169
00:08:21,916 --> 00:08:23,336
about these runtime caveats.

170
00:08:24,046 --> 00:08:27,296
Let's quickly review

171
00:08:27,296 --> 00:08:29,596
of using our new

172
00:08:30,306 --> 00:08:32,336
First, schedule a task.

173
00:08:33,806 --> 00:08:35,916
Next, receive the

174
00:08:36,895 --> 00:08:38,466
Now you can do your

175
00:08:38,866 --> 00:08:40,405
Make sure to hold onto the task

176
00:08:40,405 --> 00:08:41,806
until you're finished

177
00:08:42,846 --> 00:08:45,386
You may use this runtime

178
00:08:45,566 --> 00:08:48,346
such as fetching data from

179
00:08:49,826 --> 00:08:55,786
When finished, return the task

180
00:08:56,766 --> 00:08:58,326
Before we continue, I want

181
00:08:58,326 --> 00:09:01,676
to stress an important

182
00:08:58,326 --> 00:09:01,676
to stress an important

183
00:09:03,196 --> 00:09:07,056
watchOS is a shared ecosystem,

184
00:09:07,176 --> 00:09:10,816
and system processes competing

185
00:09:11,426 --> 00:09:15,006
It is our responsibility as

186
00:09:15,066 --> 00:09:17,926
to do our best to use these

187
00:09:18,806 --> 00:09:22,926
Let's pretend the user launches

188
00:09:22,926 --> 00:09:24,566
to make sure you have

189
00:09:24,566 --> 00:09:25,766
in with your server in an hour.

190
00:09:25,956 --> 00:09:29,526
So schedule a task for 4:00

191
00:09:29,576 --> 00:09:31,796
if the user launches

192
00:09:33,026 --> 00:09:35,976
We could update our data

193
00:09:35,976 --> 00:09:38,896
when the task runs, but that

194
00:09:40,256 --> 00:09:43,366
A better approach is to

195
00:09:43,456 --> 00:09:47,186
to reschedule our background

196
00:09:48,046 --> 00:09:50,766
Every app is different, but

197
00:09:50,766 --> 00:09:53,066
like this to help us

198
00:09:54,946 --> 00:09:56,696
Okay, let's start

199
00:09:57,166 --> 00:10:00,146
To help frame our sample

200
00:09:57,166 --> 00:10:00,146
To help frame our sample

201
00:10:00,196 --> 00:10:02,546
through the timeline of

202
00:10:02,626 --> 00:10:05,786
and show how you can write the

203
00:10:05,786 --> 00:10:07,966
of these life cycle events.

204
00:10:08,046 --> 00:10:09,696
Let's take a look

205
00:10:09,896 --> 00:10:12,886
and pretend that there's

206
00:10:12,966 --> 00:10:17,316
to 9:00 p.m. We know our user's

207
00:10:17,436 --> 00:10:19,926
and we expect them to be

208
00:10:20,656 --> 00:10:22,606
Let's settle on a

209
00:10:22,836 --> 00:10:24,116
for our background activity.

210
00:10:24,676 --> 00:10:28,626
The background refresh

211
00:10:28,626 --> 00:10:31,556
of each type to be in

212
00:10:32,376 --> 00:10:35,976
So to start off, let's schedule

213
00:10:37,256 --> 00:10:40,996
At 7:30, we'll use that runtime

214
00:10:42,166 --> 00:10:44,136
At 8, we'll again

215
00:10:44,136 --> 00:10:46,136
to schedule our next

216
00:10:46,536 --> 00:10:49,896
It is important to always make

217
00:10:49,896 --> 00:10:51,366
scheduled, or you won't know

218
00:10:51,366 --> 00:10:53,836
when you'll next

219
00:10:55,056 --> 00:10:56,716
Here we see the code

220
00:10:56,716 --> 00:10:59,496
for scheduling an

221
00:11:00,346 --> 00:11:03,096
First, let's set the fire date

222
00:11:03,636 --> 00:11:07,186
Use the userInfo object

223
00:11:07,186 --> 00:11:08,916
about why you made this request.

224
00:11:09,436 --> 00:11:12,336
In this example, I've put the

225
00:11:12,846 --> 00:11:15,366
and a reason string

226
00:11:15,426 --> 00:11:16,446
when the task comes back.

227
00:11:17,346 --> 00:11:18,646
This property is optional,

228
00:11:18,776 --> 00:11:21,936
and any secure coding compliant

229
00:11:23,916 --> 00:11:25,916
This completion blog

230
00:11:25,916 --> 00:11:29,546
out that the system has

231
00:11:29,636 --> 00:11:30,106
your task.

232
00:11:31,016 --> 00:11:33,036
Note that just because

233
00:11:33,076 --> 00:11:34,786
it does not mean

234
00:11:34,826 --> 00:11:36,536
at exactly the requested time.

235
00:11:37,576 --> 00:11:39,306
Austen will talk more about when

236
00:11:39,306 --> 00:11:41,596
and why the system

237
00:11:43,806 --> 00:11:45,366
With our application

238
00:11:45,576 --> 00:11:47,326
let's zoom in on our

239
00:11:47,326 --> 00:11:48,746
at only a five-minute window

240
00:11:48,806 --> 00:11:50,656
in which our task

241
00:11:51,366 --> 00:11:54,526
When the system wakes

242
00:11:54,566 --> 00:11:56,786
to get the latest score

243
00:11:57,046 --> 00:11:58,326
So let's take a look at the code

244
00:11:58,326 --> 00:12:01,446
for starting a background

245
00:11:58,326 --> 00:12:01,446
for starting a background

246
00:12:06,126 --> 00:12:08,996
First, create a URLSession

247
00:12:09,666 --> 00:12:11,796
It is important that

248
00:12:11,796 --> 00:12:14,536
as a background session because

249
00:12:16,196 --> 00:12:17,716
Also, set an identifier

250
00:12:17,786 --> 00:12:21,486
that we'll use later

251
00:12:22,026 --> 00:12:25,226
Next, create a URL session

252
00:12:25,316 --> 00:12:28,976
We ask the URLSession

253
00:12:28,976 --> 00:12:32,906
or more download task

254
00:12:32,906 --> 00:12:35,406
as many download tasks as

255
00:12:35,856 --> 00:12:37,886
Keep in mind the

256
00:12:37,966 --> 00:12:42,706
when all associated

257
00:12:42,826 --> 00:12:47,446
Don't forget to call resume

258
00:12:48,576 --> 00:12:49,806
Getting back to our timeline,

259
00:12:49,956 --> 00:12:51,626
we've got the URL

260
00:12:51,706 --> 00:12:53,516
So it is safe to

261
00:12:53,516 --> 00:12:55,126
and allow the application

262
00:12:56,046 --> 00:12:58,816
The system will continue

263
00:12:58,816 --> 00:12:59,396
are suspended.

264
00:12:59,396 --> 00:13:04,396
When our data is ready,

265
00:12:59,396 --> 00:13:04,396
When our data is ready,

266
00:13:04,396 --> 00:13:06,286
and wake our application

267
00:13:06,286 --> 00:13:09,176
But what does wake our

268
00:13:10,746 --> 00:13:14,586
In concrete terms, waking your

269
00:13:14,586 --> 00:13:18,616
new handle background task

270
00:13:19,256 --> 00:13:21,546
In addition to this call,

271
00:13:21,646 --> 00:13:23,446
we will receive a

272
00:13:23,446 --> 00:13:24,976
on our visible view controllers.

273
00:13:26,636 --> 00:13:30,116
The system coalesces tasks and

274
00:13:30,736 --> 00:13:33,096
We need to process all

275
00:13:33,096 --> 00:13:35,066
So let's get started by

276
00:13:36,266 --> 00:13:39,966
For each task, we can use an

277
00:13:39,966 --> 00:13:41,426
of the types we care about.

278
00:13:42,776 --> 00:13:45,216
In this case, we're

279
00:13:45,516 --> 00:13:49,436
So we need to rejoin the session

280
00:13:49,436 --> 00:13:51,746
with the task.

281
00:13:52,186 --> 00:13:54,646
URLSession is a highly

282
00:13:55,236 --> 00:13:57,606
We need to be careful

283
00:13:57,606 --> 00:13:59,486
until we're finished

284
00:14:00,426 --> 00:14:02,896
We recommend you store

285
00:14:03,106 --> 00:14:04,866
and then drain the

286
00:14:04,936 --> 00:14:08,006
completing each task to

287
00:14:10,486 --> 00:14:12,016
Make sure to complete task types

288
00:14:12,016 --> 00:14:13,636
that you don't specifically

289
00:14:14,166 --> 00:14:16,626
Remember, the system has a

290
00:14:16,726 --> 00:14:18,946
So complete each

291
00:14:19,776 --> 00:14:21,156
We've got our data.

292
00:14:21,386 --> 00:14:22,366
Let's update our model.

293
00:14:22,826 --> 00:14:25,856
You might consider updating

294
00:14:25,856 --> 00:14:29,136
but we recommend you make use

295
00:14:29,196 --> 00:14:30,186
for that type of work.

296
00:14:31,266 --> 00:14:34,186
So before we complete our

297
00:14:34,186 --> 00:14:35,296
to schedule a snapshot.

298
00:14:37,326 --> 00:14:38,606
With our snapshot scheduled,

299
00:14:38,686 --> 00:14:40,416
it's safe to complete

300
00:14:40,496 --> 00:14:42,466
and allow the application

301
00:14:44,316 --> 00:14:46,196
Soon, the system

302
00:14:46,196 --> 00:14:49,176
up with the snapshot

303
00:14:49,926 --> 00:14:51,916
Now is our chance

304
00:14:51,916 --> 00:14:54,426
and get everything ready

305
00:14:56,216 --> 00:14:59,116
Snapshots have a unique

306
00:14:59,326 --> 00:15:01,276
So let's take a look at

307
00:14:59,326 --> 00:15:01,276
So let's take a look at

308
00:15:01,396 --> 00:15:02,876
for snapshots on watchOS.

309
00:15:03,596 --> 00:15:08,466
Every application must have

310
00:15:09,226 --> 00:15:11,786
This is because your snapshot

311
00:15:12,306 --> 00:15:14,516
and your preview image

312
00:15:15,376 --> 00:15:17,836
That rule means that when

313
00:15:18,576 --> 00:15:21,516
we need to tell the system

314
00:15:22,306 --> 00:15:25,186
Think about your data and

315
00:15:25,236 --> 00:15:25,946
to your users.

316
00:15:26,946 --> 00:15:29,366
In this case, we have another

317
00:15:29,696 --> 00:15:34,036
So let's set our expiration

318
00:15:35,196 --> 00:15:37,766
User info can optionally

319
00:15:37,766 --> 00:15:39,246
about why we made this request.

320
00:15:39,706 --> 00:15:45,556
That data will return to us

321
00:15:45,716 --> 00:15:48,866
WatchOS will give your

322
00:15:48,866 --> 00:15:52,176
to restore its default state

323
00:15:52,986 --> 00:15:55,246
You can tell the system

324
00:15:55,596 --> 00:15:57,966
by setting the

325
00:15:58,136 --> 00:15:58,596
to true.

326
00:15:59,556 --> 00:16:02,146
Doing this lets the system

327
00:15:59,556 --> 00:16:02,146
Doing this lets the system

328
00:16:02,146 --> 00:16:04,926
at your default state, and don't

329
00:16:05,976 --> 00:16:07,426
Apps that have no concept

330
00:16:07,426 --> 00:16:10,136
of a default state should

331
00:16:10,176 --> 00:16:12,666
property to true.

332
00:16:13,096 --> 00:16:14,716
Once you complete

333
00:16:14,936 --> 00:16:16,906
the system will suspend

334
00:16:17,416 --> 00:16:20,376
Your UI will then be

335
00:16:20,376 --> 00:16:21,526
as your new launch image.

336
00:16:22,316 --> 00:16:24,946
This activity will not

337
00:16:25,306 --> 00:16:30,196
We've made it through

338
00:16:30,326 --> 00:16:34,026
of a common background refresh

339
00:16:34,836 --> 00:16:36,976
In case you didn't notice,

340
00:16:36,976 --> 00:16:38,996
at a whole five minutes

341
00:16:39,486 --> 00:16:42,796
our application was only

342
00:16:44,016 --> 00:16:45,726
By chaining tasks, we were able

343
00:16:45,726 --> 00:16:48,456
to maximize our use

344
00:16:50,046 --> 00:16:51,966
You now have a good

345
00:16:52,026 --> 00:16:55,806
of what this new API is,

346
00:16:56,296 --> 00:16:58,686
and how you can go

347
00:16:59,306 --> 00:17:02,336
I'd like to welcome

348
00:16:59,306 --> 00:17:02,336
I'd like to welcome

349
00:17:02,416 --> 00:17:03,956
to give you some deeper insights

350
00:17:03,956 --> 00:17:06,846
into how scheduling

351
00:17:09,465 --> 00:17:09,945
Good luck [applause].

352
00:17:14,116 --> 00:17:14,465
&gt;&gt; Hi, everyone.

353
00:17:14,626 --> 00:17:15,476
I'm Austen Green.

354
00:17:15,626 --> 00:17:16,945
I'm a watchOS engineer.

355
00:17:17,286 --> 00:17:21,626
This morning, I would like to

356
00:17:21,746 --> 00:17:24,116
about how scheduling

357
00:17:24,626 --> 00:17:27,455
I'd like to provide some

358
00:17:27,455 --> 00:17:30,556
up as we adopted background

359
00:17:31,106 --> 00:17:33,216
And, finally, I'd like to

360
00:17:33,626 --> 00:17:36,336
about specifically how we

361
00:17:36,396 --> 00:17:37,556
in our stocks application.

362
00:17:38,836 --> 00:17:39,556
So let's get started.

363
00:17:39,556 --> 00:17:45,306
So the first thing I want

364
00:17:46,186 --> 00:17:48,896
So while your application

365
00:17:50,016 --> 00:17:51,336
you're always scheduled to run.

366
00:17:51,896 --> 00:17:54,836
This means that your

367
00:17:55,186 --> 00:17:57,876
so that you can do things

368
00:17:58,066 --> 00:18:00,516
and draw your UI, and

369
00:17:58,066 --> 00:18:00,516
and draw your UI, and

370
00:18:00,516 --> 00:18:02,776
that your application

371
00:18:03,286 --> 00:18:04,836
Now when your application moves

372
00:18:04,836 --> 00:18:07,526
into the background the

373
00:18:07,526 --> 00:18:08,326
your application.

374
00:18:08,856 --> 00:18:11,016
This means that your

375
00:18:11,016 --> 00:18:12,386
to execute any code at all.

376
00:18:13,886 --> 00:18:15,936
Now sometimes while

377
00:18:15,936 --> 00:18:18,496
in the background, the system

378
00:18:18,766 --> 00:18:20,306
to perform a very specific task.

379
00:18:20,746 --> 00:18:24,426
The system will wake your

380
00:18:24,426 --> 00:18:27,456
to perform a specific task

381
00:18:27,956 --> 00:18:30,626
In watchOS 2, there

382
00:18:30,626 --> 00:18:32,506
that the system could

383
00:18:32,726 --> 00:18:36,046
For example, to handle a

384
00:18:36,996 --> 00:18:39,336
or perhaps ClockKit would

385
00:18:39,486 --> 00:18:40,896
to update its complication.

386
00:18:41,746 --> 00:18:44,986
In watchOS 3, we're adding even

387
00:18:45,066 --> 00:18:45,886
to run in the background.

388
00:18:50,046 --> 00:18:53,786
Now the system is going to

389
00:18:53,786 --> 00:18:56,966
of time that you get to run

390
00:18:57,556 --> 00:19:01,826
These limits are on the order of

391
00:18:57,556 --> 00:19:01,826
These limits are on the order of

392
00:19:01,826 --> 00:19:04,986
to consider the amount of

393
00:19:04,986 --> 00:19:06,676
as the amount of CPU you use.

394
00:19:06,956 --> 00:19:10,006
So it's in your best interest

395
00:19:10,086 --> 00:19:11,696
and as efficiently as possible.

396
00:19:13,016 --> 00:19:15,756
Now in a later seed, if

397
00:19:16,326 --> 00:19:17,726
the system will kill

398
00:19:18,496 --> 00:19:19,536
You'll get a crash report,

399
00:19:19,656 --> 00:19:22,126
and you'll know whether

400
00:19:22,626 --> 00:19:24,056
or the time limits based

401
00:19:24,056 --> 00:19:26,496
on the exception code

402
00:19:26,936 --> 00:19:32,436
Now we recognize that different

403
00:19:32,916 --> 00:19:34,416
So ApplicationRefresh task

404
00:19:34,826 --> 00:19:38,396
and the URLSession task have

405
00:19:38,906 --> 00:19:41,746
than watch connectivity

406
00:19:52,446 --> 00:19:56,546
So in watchOS 2, complications

407
00:19:56,546 --> 00:19:58,716
that your application got

408
00:19:59,936 --> 00:20:02,696
In watchOS 3, we're going to

409
00:19:59,936 --> 00:20:02,696
In watchOS 3, we're going to

410
00:20:02,696 --> 00:20:04,156
to get multiple updates an hour

411
00:20:04,226 --> 00:20:06,616
if you're a complication

412
00:20:06,616 --> 00:20:08,516
with what you were

413
00:20:09,546 --> 00:20:13,616
However, if you were previously

414
00:20:13,616 --> 00:20:14,876
to update your complication

415
00:20:15,616 --> 00:20:18,146
you can now request

416
00:20:18,216 --> 00:20:19,666
I'll show you how to do

417
00:20:21,066 --> 00:20:25,296
Also, new in watchOS 3, we're

418
00:20:25,296 --> 00:20:28,986
from your parent iPhone if

419
00:20:29,456 --> 00:20:32,586
It's really easy to take

420
00:20:32,846 --> 00:20:36,166
to make sure that you have a

421
00:20:36,166 --> 00:20:37,846
for your users all day long.

422
00:20:38,716 --> 00:20:42,446
Let's take a look at some code.

423
00:20:42,446 --> 00:20:46,596
So let's say that you're running

424
00:20:46,596 --> 00:20:47,496
that your model changed.

425
00:20:48,656 --> 00:20:50,776
You can now query WCSession,

426
00:20:51,036 --> 00:20:53,636
remainingComplication

427
00:20:53,636 --> 00:20:56,596
out how many high-priority

428
00:20:56,846 --> 00:20:58,516
for the rest of the day.

429
00:20:58,516 --> 00:21:01,086
You can use this information

430
00:20:58,516 --> 00:21:01,086
You can use this information

431
00:21:01,376 --> 00:21:04,246
to tailor your complication

432
00:21:04,246 --> 00:21:06,866
when the best time is for you

433
00:21:08,146 --> 00:21:09,936
So let's say in the

434
00:21:10,686 --> 00:21:11,936
you've got plenty of pushes.

435
00:21:12,716 --> 00:21:14,276
Go ahead and send

436
00:21:14,476 --> 00:21:16,946
The user will see your

437
00:21:17,356 --> 00:21:18,346
almost immediately.

438
00:21:19,476 --> 00:21:22,576
Now let's say that you've been

439
00:21:22,576 --> 00:21:24,336
of running low on, on transfers.

440
00:21:24,816 --> 00:21:29,156
So you might consider throttling

441
00:21:29,156 --> 00:21:30,116
to the watch to make sure

442
00:21:30,116 --> 00:21:34,166
that your user will have

443
00:21:34,226 --> 00:21:35,336
throughout the rest of the day.

444
00:21:36,376 --> 00:21:40,526
Finally, if you don't have any

445
00:21:40,806 --> 00:21:43,586
it's still okay to try and

446
00:21:44,016 --> 00:21:46,276
the data will get sent

447
00:21:47,306 --> 00:21:51,096
Next, I'd like to

448
00:21:51,096 --> 00:21:54,166
of the CLKComplication

449
00:21:54,166 --> 00:21:56,066
like to move into WatchKit.

450
00:21:56,626 --> 00:22:00,676
If you were previously

451
00:21:56,626 --> 00:22:00,676
If you were previously

452
00:22:00,946 --> 00:22:02,696
with getNextRequested

453
00:22:05,576 --> 00:22:10,496
You should now expect the system

454
00:22:10,606 --> 00:22:12,536
with a preferred

455
00:22:12,536 --> 00:22:14,606
that you were telling

456
00:22:16,116 --> 00:22:19,556
Similarly, when ClockKit

457
00:22:19,846 --> 00:22:21,586
it would call requestedUpdate

458
00:22:22,636 --> 00:22:25,406
Now we want to do that

459
00:22:26,006 --> 00:22:28,666
with handle background refreshed

460
00:22:29,116 --> 00:22:30,986
You'll get an application task

461
00:22:31,096 --> 00:22:33,326
to handle both complication

462
00:22:33,606 --> 00:22:37,736
and your application updates.

463
00:22:38,336 --> 00:22:41,186
Now, new in watchOS 3,

464
00:22:41,376 --> 00:22:44,246
We think it's a great way

465
00:22:44,246 --> 00:22:47,116
at their favorite applications

466
00:22:47,116 --> 00:22:50,146
of all of the information

467
00:22:50,616 --> 00:22:53,236
We want your applications in

468
00:22:53,576 --> 00:22:55,176
So we're going to

469
00:22:55,176 --> 00:22:56,316
of one update per hour.

470
00:22:56,466 --> 00:23:00,366
This applies to a snapshot task

471
00:22:56,466 --> 00:23:00,366
This applies to a snapshot task

472
00:23:01,136 --> 00:23:04,706
Now this budget is distributed

473
00:23:04,856 --> 00:23:08,046
in the dock, and the user can

474
00:23:08,046 --> 00:23:08,796
want in their dock.

475
00:23:09,096 --> 00:23:12,866
Consequence of this is that if a

476
00:23:13,296 --> 00:23:16,376
then your application can

477
00:23:16,376 --> 00:23:18,466
in the background

478
00:23:19,656 --> 00:23:22,246
Also, we keep your

479
00:23:22,696 --> 00:23:25,446
so that resumes are fast,

480
00:23:25,446 --> 00:23:27,176
with your application

481
00:23:27,386 --> 00:23:30,876
as quickly as possible.

482
00:23:30,876 --> 00:23:32,736
Also in the dock,

483
00:23:32,736 --> 00:23:34,416
of a most recently used app.

484
00:23:35,476 --> 00:23:37,866
This application occupies

485
00:23:38,356 --> 00:23:40,946
and the users are given

486
00:23:40,946 --> 00:23:42,936
in the dock by pressing

487
00:23:44,116 --> 00:23:46,256
Now this application

488
00:23:46,256 --> 00:23:48,476
like a user's favorite

489
00:23:48,736 --> 00:23:50,836
that the user has explicitly

490
00:23:52,026 --> 00:23:56,356
This means that this application

491
00:23:56,356 --> 00:23:57,946
tasks and snapshot tasks

492
00:23:58,206 --> 00:23:59,896
like any other application

493
00:24:00,166 --> 00:24:02,986
So you should always make

494
00:24:03,026 --> 00:24:04,906
with the system any application,

495
00:24:04,986 --> 00:24:08,146
any background refresh

496
00:24:09,156 --> 00:24:11,876
Now home screen applications

497
00:24:11,876 --> 00:24:12,836
regular scheduling.

498
00:24:13,186 --> 00:24:15,866
So just keep that in mind.

499
00:24:17,426 --> 00:24:20,636
As Eric mentioned

500
00:24:20,636 --> 00:24:24,656
of your application are

501
00:24:24,876 --> 00:24:27,326
of your application in

502
00:24:28,856 --> 00:24:30,756
There may be times

503
00:24:30,756 --> 00:24:34,376
to snapshot your application

504
00:24:35,146 --> 00:24:38,076
Now if the system

505
00:24:38,156 --> 00:24:40,496
to perform a snapshot

506
00:24:41,206 --> 00:24:42,806
these snapshots don't

507
00:24:43,336 --> 00:24:46,246
and they're in addition

508
00:24:46,376 --> 00:24:47,566
that you've asked of the system.

509
00:24:48,416 --> 00:24:51,266
There are five triggers

510
00:24:51,266 --> 00:24:52,986
to ask your application

511
00:24:53,526 --> 00:24:58,606
If your complication timeline

512
00:24:58,606 --> 00:24:59,966
with one of your notifications,

513
00:25:00,676 --> 00:25:03,566
this means that the notification

514
00:25:03,796 --> 00:25:06,126
and it doesn't count if it goes

515
00:25:06,666 --> 00:25:09,506
When you go from the

516
00:25:10,126 --> 00:25:11,646
and then again, one hour later

517
00:25:11,646 --> 00:25:13,326
to give your application

518
00:25:13,326 --> 00:25:15,276
to its default state,

519
00:25:16,526 --> 00:25:19,086
And, finally, in order to

520
00:25:19,346 --> 00:25:21,196
the system is going to

521
00:25:21,196 --> 00:25:22,376
for a snapshot on boot.

522
00:25:23,026 --> 00:25:24,076
This is your opportunity

523
00:25:24,186 --> 00:25:26,726
to start scheduling any other

524
00:25:26,806 --> 00:25:31,626
with the system.

525
00:25:31,756 --> 00:25:34,416
Now, I'd like to take

526
00:25:34,416 --> 00:25:37,536
with you some best practices

527
00:25:37,626 --> 00:25:40,676
as we adopt a background

528
00:25:43,056 --> 00:25:46,386
So, first of all, the

529
00:25:46,386 --> 00:25:48,476
as much information as

530
00:25:48,656 --> 00:25:50,606
So schedule as often

531
00:25:51,376 --> 00:25:53,486
Every time your application

532
00:25:53,756 --> 00:25:56,206
you should consider

533
00:25:56,206 --> 00:25:59,626
refresh needs and scheduling

534
00:26:00,196 --> 00:26:03,656
You should not feel

535
00:26:03,796 --> 00:26:05,366
If the system calls

536
00:26:05,366 --> 00:26:08,326
for a background refresh task,

537
00:26:08,326 --> 00:26:10,056
maybe you just updated

538
00:26:10,586 --> 00:26:13,336
need to do anything else,

539
00:26:13,386 --> 00:26:18,076
Or better yet, in the, in the

540
00:26:18,146 --> 00:26:21,366
consider deferring

541
00:26:21,366 --> 00:26:22,586
that you've scheduled

542
00:26:22,586 --> 00:26:26,326
You should consider all

543
00:26:26,546 --> 00:26:27,826
that you get to make sure

544
00:26:27,826 --> 00:26:29,366
that you keep your

545
00:26:29,696 --> 00:26:32,046
This means updating

546
00:26:32,046 --> 00:26:34,236
and scheduling background

547
00:26:34,936 --> 00:26:37,746
So for dock and foreground

548
00:26:37,746 --> 00:26:39,636
complication updates,

549
00:26:39,636 --> 00:26:42,436
There's any number of reasons

550
00:26:42,436 --> 00:26:45,686
runtime, and you should keep

551
00:26:45,686 --> 00:26:48,636
and keep your application

552
00:26:48,916 --> 00:26:54,146
So application refresh

553
00:26:54,146 --> 00:26:57,206
point into general purpose

554
00:26:57,206 --> 00:26:59,896
in the background, and we think

555
00:26:59,896 --> 00:27:00,366
for this.

556
00:26:59,896 --> 00:27:00,366
for this.

557
00:27:00,756 --> 00:27:03,466
You can do things like

558
00:27:04,266 --> 00:27:06,506
Maybe you need to read

559
00:27:06,506 --> 00:27:08,256
or the calendar database

560
00:27:09,356 --> 00:27:11,516
You can use this to

561
00:27:11,586 --> 00:27:13,576
This is what we do in

562
00:27:13,626 --> 00:27:15,946
If you have known

563
00:27:16,186 --> 00:27:19,086
you can tell the system the

564
00:27:19,086 --> 00:27:21,346
that it would be great

565
00:27:21,706 --> 00:27:23,426
For example, a calendar

566
00:27:23,426 --> 00:27:27,716
or an itinerary application

567
00:27:27,716 --> 00:27:28,666
time transitions.

568
00:27:29,776 --> 00:27:32,586
And, finally, if you were

569
00:27:32,586 --> 00:27:35,356
runtime through the ClockKit

570
00:27:35,826 --> 00:27:38,916
to the WatchKit API's to

571
00:27:38,916 --> 00:27:45,376
Now let's talk about some best

572
00:27:47,276 --> 00:27:50,326
The snapshot is a

573
00:27:50,446 --> 00:27:53,236
of your application's

574
00:27:54,066 --> 00:27:55,206
that data can become stale.

575
00:27:55,206 --> 00:27:58,156
So the system wants to know

576
00:27:59,116 --> 00:28:02,126
You can tell the system

577
00:27:59,116 --> 00:28:02,126
You can tell the system

578
00:28:02,126 --> 00:28:04,996
to be updated by scheduling a

579
00:28:06,316 --> 00:28:09,386
Now you should think in terms

580
00:28:09,606 --> 00:28:11,256
when you're trying to

581
00:28:11,876 --> 00:28:12,996
You wouldn't want

582
00:28:13,396 --> 00:28:14,996
like high-frequency

583
00:28:15,486 --> 00:28:18,966
For example, in a timer

584
00:28:18,966 --> 00:28:19,996
down, you wouldn't want

585
00:28:19,996 --> 00:28:22,156
to update our snapshot

586
00:28:22,406 --> 00:28:23,396
This doesn't make sense.

587
00:28:23,546 --> 00:28:25,516
Instead, you would

588
00:28:25,516 --> 00:28:26,346
to update your snapshot

589
00:28:26,696 --> 00:28:29,366
when something significant has

590
00:28:29,366 --> 00:28:33,906
Now I know this is complex,

591
00:28:34,086 --> 00:28:38,666
and I'd like to share what

592
00:28:38,936 --> 00:28:40,296
for how to manage

593
00:28:41,586 --> 00:28:43,836
So let's say that you

594
00:28:44,276 --> 00:28:45,456
Maybe it's watch connectivity.

595
00:28:45,456 --> 00:28:46,786
Maybe it's NSURLSession.

596
00:28:47,146 --> 00:28:49,626
Maybe you just happened

597
00:28:49,626 --> 00:28:51,046
because the user

598
00:28:51,646 --> 00:28:55,756
Basically, anything that causes

599
00:28:57,116 --> 00:28:59,586
All of the operations

600
00:29:00,246 --> 00:29:03,086
for background refresh are in

601
00:29:03,476 --> 00:29:05,826
For example, updating

602
00:29:06,096 --> 00:29:07,376
requesting a new snapshot,

603
00:29:07,966 --> 00:29:10,696
and then evaluating what your

604
00:29:10,696 --> 00:29:12,906
are, whether it's for a

605
00:29:12,906 --> 00:29:14,436
or just scheduling

606
00:29:14,436 --> 00:29:16,276
with a background refresh API.

607
00:29:22,066 --> 00:29:24,046
Now with the dock in watchOS 3,

608
00:29:24,476 --> 00:29:26,846
we think that users

609
00:29:28,156 --> 00:29:30,406
we think that users are

610
00:29:30,406 --> 00:29:32,676
of many applications

611
00:29:32,676 --> 00:29:33,886
than they were in watchOS 2.

612
00:29:34,646 --> 00:29:37,256
Now in watchOS 2, you

613
00:29:37,256 --> 00:29:40,576
to enter the foreground or enter

614
00:29:40,576 --> 00:29:42,346
but we think these

615
00:29:42,346 --> 00:29:45,056
to happen a lot more often now.

616
00:29:45,256 --> 00:29:48,266
So you should make sure that

617
00:29:48,266 --> 00:29:50,576
as soon as possible on

618
00:29:51,916 --> 00:29:54,036
When your application

619
00:29:54,236 --> 00:29:56,656
you don't want to be

620
00:29:57,036 --> 00:29:59,156
You just want to do the

621
00:29:59,236 --> 00:30:01,976
for displaying your

622
00:29:59,236 --> 00:30:01,976
for displaying your

623
00:30:02,046 --> 00:30:04,996
Similarly, when you entered

624
00:30:04,996 --> 00:30:07,656
in the foreground, you should

625
00:30:07,656 --> 00:30:09,366
that you were doing

626
00:30:09,906 --> 00:30:12,846
Now we recognize that you

627
00:30:13,216 --> 00:30:15,426
to complete any foreground

628
00:30:15,426 --> 00:30:16,936
by using NSProcessInfo.

629
00:30:16,936 --> 00:30:18,296
performExpiringActivity.

630
00:30:19,466 --> 00:30:23,576
There's a great session from

631
00:30:23,576 --> 00:30:25,806
and Tricks that tells you

632
00:30:25,806 --> 00:30:26,956
use NSProcessInfo.

633
00:30:26,956 --> 00:30:28,166
performExpiringActivity.

634
00:30:29,436 --> 00:30:32,256
Finally, one more thing I want

635
00:30:33,176 --> 00:30:36,916
Now, typically, a user will put

636
00:30:37,606 --> 00:30:40,496
and unlock it, and the watch

637
00:30:40,496 --> 00:30:42,936
until they take it off at night,

638
00:30:45,446 --> 00:30:46,366
Certain types of data

639
00:30:46,486 --> 00:30:49,966
on the watch are completely

640
00:30:49,966 --> 00:30:50,466
is locked.

641
00:30:51,056 --> 00:30:54,436
For example, the most prominent

642
00:30:54,906 --> 00:30:56,356
So you should just make sure

643
00:30:56,356 --> 00:30:58,686
that you consider

644
00:30:58,756 --> 00:31:01,436
if your data is not

645
00:30:58,756 --> 00:31:01,436
if your data is not

646
00:31:05,376 --> 00:31:08,246
And then I'd like to

647
00:31:09,596 --> 00:31:12,246
The simulator is going to be

648
00:31:12,606 --> 00:31:14,736
As I mentioned before,

649
00:31:15,106 --> 00:31:16,436
but in a simulator,

650
00:31:16,436 --> 00:31:17,666
to enforce any of those budgets.

651
00:31:17,666 --> 00:31:21,636
So you should basically get

652
00:31:21,636 --> 00:31:23,166
that you want them

653
00:31:24,836 --> 00:31:26,816
Similarly, while

654
00:31:27,576 --> 00:31:30,286
we may still apply some

655
00:31:30,286 --> 00:31:32,296
to have the best experience

656
00:31:32,736 --> 00:31:37,286
You need to make sure that

657
00:31:37,286 --> 00:31:37,936
and the resume path.

658
00:31:38,276 --> 00:31:40,516
The system is going to do its

659
00:31:40,516 --> 00:31:43,756
in memory, but in the

660
00:31:43,806 --> 00:31:46,326
the system will have to launch

661
00:31:46,636 --> 00:31:48,116
to request the initial snapshot.

662
00:31:48,556 --> 00:31:51,726
Verify that your tasks

663
00:31:52,406 --> 00:31:55,126
In a future seed, you'll get

664
00:31:55,126 --> 00:31:56,426
to complete your tasks in time.

665
00:31:56,986 --> 00:31:59,876
And it's super important that

666
00:31:59,876 --> 00:32:01,966
because we want your

667
00:31:59,876 --> 00:32:01,966
because we want your

668
00:32:01,966 --> 00:32:03,176
as possible for users.

669
00:32:03,686 --> 00:32:07,776
And, finally, once you think

670
00:32:07,776 --> 00:32:09,816
strategy implemented,

671
00:32:10,326 --> 00:32:11,806
Make sure that you're

672
00:32:11,806 --> 00:32:13,246
that you want your

673
00:32:14,096 --> 00:32:16,486
You should vary the number

674
00:32:16,486 --> 00:32:20,056
in your dock to make sure

675
00:32:20,056 --> 00:32:22,506
and worst-case scenarios for

676
00:32:23,236 --> 00:32:25,446
Now, I'd like to share

677
00:32:25,586 --> 00:32:27,306
on how we adopted

678
00:32:27,536 --> 00:32:28,626
in our stocks application.

679
00:32:30,436 --> 00:32:33,376
So before we even got

680
00:32:34,266 --> 00:32:38,156
we took a step back and thought

681
00:32:38,466 --> 00:32:40,326
that are interesting

682
00:32:40,636 --> 00:32:41,776
for our stocks application.

683
00:32:43,416 --> 00:32:49,836
We use a URLSession to retrieve

684
00:32:49,836 --> 00:32:51,056
to have a complication.

685
00:32:51,736 --> 00:32:54,176
This means that we know

686
00:32:54,176 --> 00:32:55,566
of our data across the system.

687
00:32:55,566 --> 00:32:57,916
With our complication,

688
00:32:58,586 --> 00:33:01,006
and now our live application.

689
00:32:58,586 --> 00:33:01,006
and now our live application.

690
00:33:03,716 --> 00:33:04,936
We know that we want

691
00:33:05,396 --> 00:33:08,116
to be periodic throughout

692
00:33:08,716 --> 00:33:11,236
We want to get regular

693
00:33:12,636 --> 00:33:14,346
but then we know something

694
00:33:14,756 --> 00:33:17,896
which is that once the

695
00:33:17,896 --> 00:33:18,906
for the rest of the day.

696
00:33:19,276 --> 00:33:20,506
It's not going to change at all.

697
00:33:21,106 --> 00:33:23,566
Well, let's talk about how this

698
00:33:24,956 --> 00:33:27,456
So let's say our device boots.

699
00:33:27,766 --> 00:33:30,706
The system is going to ask our

700
00:33:31,686 --> 00:33:33,976
So we'll load our last data,

701
00:33:34,136 --> 00:33:36,016
but before we complete

702
00:33:36,426 --> 00:33:39,856
we're going to schedule a

703
00:33:40,336 --> 00:33:41,546
Now this is our opportunity

704
00:33:41,786 --> 00:33:45,086
to start the background

705
00:33:45,086 --> 00:33:47,946
that we can download the most

706
00:33:49,016 --> 00:33:52,896
Now we're going to use an

707
00:33:53,606 --> 00:33:56,586
so that we can give

708
00:33:56,586 --> 00:33:58,066
about what data we

709
00:33:58,466 --> 00:34:01,226
and the system can put

710
00:33:58,466 --> 00:34:01,226
and the system can put

711
00:34:01,226 --> 00:34:02,636
and download our data

712
00:34:04,056 --> 00:34:08,906
Now URLSession DataTask does

713
00:34:09,196 --> 00:34:13,556
however, it will fail if your

714
00:34:13,886 --> 00:34:15,636
when your application

715
00:34:15,966 --> 00:34:19,926
And because of the time

716
00:34:19,926 --> 00:34:21,476
your application is likely going

717
00:34:21,476 --> 00:34:23,795
to suspend before your

718
00:34:23,985 --> 00:34:26,966
So we could recommend

719
00:34:28,016 --> 00:34:30,996
So a little bit later,

720
00:34:30,996 --> 00:34:32,045
to wake our application

721
00:34:32,045 --> 00:34:33,516
up because we finished

722
00:34:34,476 --> 00:34:36,045
So we're going to

723
00:34:36,295 --> 00:34:37,726
and because we've

724
00:34:37,926 --> 00:34:39,386
we're going to do three things.

725
00:34:39,946 --> 00:34:42,126
We're going to trigger

726
00:34:43,206 --> 00:34:44,826
and we're also going

727
00:34:44,826 --> 00:34:46,916
that our snapshot

728
00:34:46,916 --> 00:34:50,436
for a new snapshot right now,

729
00:34:50,436 --> 00:34:53,416
to evaluate what our next

730
00:34:54,056 --> 00:34:56,786
So we'll figure out what the

731
00:34:56,846 --> 00:34:59,036
and we'll tell the system that.

732
00:34:59,216 --> 00:35:02,936
Now a little bit later, we get

733
00:34:59,216 --> 00:35:02,936
Now a little bit later, we get

734
00:35:03,316 --> 00:35:05,656
and all we're doing here

735
00:35:05,656 --> 00:35:06,786
URLSession download.

736
00:35:07,696 --> 00:35:11,596
So we complete this cycle

737
00:35:12,726 --> 00:35:14,356
Just keeping our

738
00:35:14,356 --> 00:35:16,926
the system will snapshot us, and

739
00:35:16,926 --> 00:35:20,286
in the dock, we'll have the

740
00:35:20,286 --> 00:35:20,966
in our snapshot.

741
00:35:22,616 --> 00:35:25,376
Well, let's say that the user

742
00:35:26,066 --> 00:35:28,666
So we go full screen,

743
00:35:28,666 --> 00:35:30,436
that our users have the

744
00:35:30,746 --> 00:35:34,096
So we'll download the

745
00:35:34,426 --> 00:35:35,656
because we've entered

746
00:35:36,216 --> 00:35:40,636
And, and once we've updated our

747
00:35:40,846 --> 00:35:42,286
We request a complication

748
00:35:42,906 --> 00:35:44,096
we request a new snapshot,

749
00:35:44,096 --> 00:35:46,976
and then we schedule a

750
00:35:46,976 --> 00:35:47,666
for a later time.

751
00:35:47,666 --> 00:35:49,606
Now there's two things I

752
00:35:50,206 --> 00:35:51,816
First of all, we're

753
00:35:51,946 --> 00:35:53,566
but we're still requesting

754
00:35:54,326 --> 00:35:57,396
This is absolutely okay, and we

755
00:35:57,756 --> 00:35:59,766
We want you to request a

756
00:35:59,766 --> 00:36:00,536
model changes.

757
00:35:59,766 --> 00:36:00,536
model changes.

758
00:36:00,786 --> 00:36:02,186
The system is smart

759
00:36:02,186 --> 00:36:03,516
when your application's

760
00:36:03,986 --> 00:36:08,186
and when it's not okay for us

761
00:36:08,316 --> 00:36:10,996
The second thing is because

762
00:36:11,596 --> 00:36:14,276
and updated our model,

763
00:36:14,276 --> 00:36:16,296
to evaluate our next

764
00:36:16,886 --> 00:36:18,946
If we knew that we were

765
00:36:18,946 --> 00:36:21,346
in the next ten minutes, but

766
00:36:22,436 --> 00:36:26,076
we can defer our snap, or we

767
00:36:26,076 --> 00:36:29,546
request with the system

768
00:36:29,546 --> 00:36:30,716
of time that we get to run.

769
00:36:31,016 --> 00:36:33,056
To maximize the number

770
00:36:33,056 --> 00:36:37,116
of opportunities

771
00:36:37,206 --> 00:36:39,966
Finally, the last update

772
00:36:41,296 --> 00:36:42,966
We know our data stopped

773
00:36:44,056 --> 00:36:45,636
but we'll complete

774
00:36:45,996 --> 00:36:47,806
This means updating

775
00:36:48,526 --> 00:36:49,786
requesting a new snapshot,

776
00:36:50,476 --> 00:36:53,416
and then evaluating our

777
00:36:54,616 --> 00:36:57,446
So because we know our data

778
00:36:57,856 --> 00:36:59,096
that we can't have stale data

779
00:36:59,096 --> 00:37:01,066
in our complications

780
00:36:59,096 --> 00:37:01,066
in our complications

781
00:37:02,396 --> 00:37:05,046
We can wait until

782
00:37:05,196 --> 00:37:06,936
for the next background

783
00:37:08,516 --> 00:37:12,126
This lets our application get

784
00:37:12,466 --> 00:37:14,456
and not do any unnecessary work,

785
00:37:15,046 --> 00:37:17,026
which means that there's

786
00:37:17,026 --> 00:37:21,586
for other applications

787
00:37:21,586 --> 00:37:25,136
So to summarize,

788
00:37:25,476 --> 00:37:27,686
It's absolutely critical

789
00:37:27,916 --> 00:37:30,366
If you don't, in a future

790
00:37:30,366 --> 00:37:31,416
to kill your application.

791
00:37:31,716 --> 00:37:33,266
If the system kills

792
00:37:33,786 --> 00:37:37,676
users won't have the quick

793
00:37:37,676 --> 00:37:38,546
that they're expecting,

794
00:37:39,016 --> 00:37:42,636
and users will take your

795
00:37:42,826 --> 00:37:45,116
Use all the runtime that

796
00:37:45,256 --> 00:37:48,776
Consider foreground activations,

797
00:37:48,776 --> 00:37:51,556
of course, the background

798
00:37:52,126 --> 00:37:53,256
Anytime you get runtime,

799
00:37:53,856 --> 00:37:56,656
make sure that you consider

800
00:37:57,016 --> 00:38:01,246
and evaluating your background

801
00:37:57,016 --> 00:38:01,246
and evaluating your background

802
00:38:01,356 --> 00:38:03,176
Tell the system when

803
00:38:04,136 --> 00:38:07,356
Your complication and your

804
00:38:07,356 --> 00:38:11,306
system-owned caches of

805
00:38:12,736 --> 00:38:15,886
The system needs to know when

806
00:38:16,586 --> 00:38:18,896
so that we won't display the

807
00:38:19,686 --> 00:38:23,646
Users expect to see consistent

808
00:38:23,646 --> 00:38:24,646
your application's data.

809
00:38:25,276 --> 00:38:27,736
And, finally, you need

810
00:38:27,736 --> 00:38:29,236
to consider your

811
00:38:29,236 --> 00:38:30,586
on a case-by-case basis.

812
00:38:30,906 --> 00:38:32,526
There is no one size

813
00:38:32,666 --> 00:38:35,896
You have to really consider how

814
00:38:36,286 --> 00:38:38,056
and interesting characteristics

815
00:38:38,496 --> 00:38:40,556
for how you plan your

816
00:38:41,856 --> 00:38:44,536
For more information, you

817
00:38:45,466 --> 00:38:49,896
and there is some great related

818
00:38:49,896 --> 00:38:51,826
Architecting for

819
00:38:51,826 --> 00:38:53,736
We'll go into some more

820
00:38:53,736 --> 00:38:54,786
in the stocks application.

821
00:38:55,016 --> 00:38:56,086
Thank you very much.
