1
00:00:07,516 --> 00:00:19,460
[ Music ]

2
00:00:22,516 --> 00:00:27,896
[ Applause ]

3
00:00:28,396 --> 00:00:30,036
&gt;&gt; Good afternoon

4
00:00:30,036 --> 00:00:32,286
to Architecting Performance

5
00:00:32,806 --> 00:00:34,006
My name is Tyler McAtee

6
00:00:34,266 --> 00:00:36,476
and shortly you'll be meeting

7
00:00:37,386 --> 00:00:39,996
Today we'll be discussing the

8
00:00:39,996 --> 00:00:42,806
about performance and where that

9
00:00:43,736 --> 00:00:47,156
We'll start by talking about

10
00:00:47,426 --> 00:00:49,456
how it helped influence

11
00:00:49,576 --> 00:00:51,366
and what that means for

12
00:00:52,366 --> 00:00:55,166
I'll then talk a bit about how

13
00:00:55,166 --> 00:00:59,206
performance and, showcase

14
00:00:59,206 --> 00:01:01,686
that will help reduce

15
00:00:59,206 --> 00:01:01,686
that will help reduce

16
00:01:02,946 --> 00:01:04,696
Finally, Todd will come on stage

17
00:01:04,736 --> 00:01:06,856
and show how we've taken

18
00:01:06,856 --> 00:01:08,726
to them the stock's

19
00:01:09,366 --> 00:01:11,436
So let's start with

20
00:01:11,436 --> 00:01:13,856
We've focused on this idea

21
00:01:14,086 --> 00:01:16,276
for what an interaction with the

22
00:01:16,436 --> 00:01:17,776
So what is a 2-Second task?

23
00:01:18,636 --> 00:01:21,156
A 2-Second task is something

24
00:01:21,226 --> 00:01:22,926
or learn by looking

25
00:01:23,716 --> 00:01:25,786
These tasks should only

26
00:01:26,516 --> 00:01:29,926
And these seconds should be

27
00:01:29,926 --> 00:01:31,626
of the interaction

28
00:01:31,866 --> 00:01:33,706
from the moment the user

29
00:01:33,706 --> 00:01:35,776
at their Apple Watch, to the

30
00:01:36,836 --> 00:01:41,086
Some examples of a 2-Second task

31
00:01:41,816 --> 00:01:43,526
setting a timer or

32
00:01:44,826 --> 00:01:46,076
Today I'm going to

33
00:01:46,076 --> 00:01:47,816
of the key changes

34
00:01:47,936 --> 00:01:49,726
and explain how these

35
00:01:49,726 --> 00:01:51,766
as a developer should

36
00:01:51,766 --> 00:01:52,936
in your WatchKit application.

37
00:01:54,986 --> 00:01:56,516
Now, one of the first

38
00:01:56,516 --> 00:01:59,006
in accomplishing a task on

39
00:01:59,006 --> 00:02:01,726
of navigation it can take to get

40
00:01:59,006 --> 00:02:01,726
of navigation it can take to get

41
00:02:02,496 --> 00:02:04,046
The quickest way to

42
00:02:04,046 --> 00:02:06,226
on the Apple Watch is by

43
00:02:06,896 --> 00:02:09,326
We only encourage developers

44
00:02:09,476 --> 00:02:10,895
if they had relevant

45
00:02:10,895 --> 00:02:13,626
A lot of our apps,

46
00:02:13,626 --> 00:02:15,496
Mail and Phone had

47
00:02:16,266 --> 00:02:17,796
In order to increase

48
00:02:17,796 --> 00:02:20,696
on the Apple Watch as well as

49
00:02:20,696 --> 00:02:23,146
to customize, now

50
00:02:23,146 --> 00:02:25,046
of our applications

51
00:02:25,906 --> 00:02:28,486
These launcher complications

52
00:02:28,486 --> 00:02:30,256
to your very favorite

53
00:02:30,256 --> 00:02:31,156
from the watch face.

54
00:02:31,776 --> 00:02:33,176
We encourage you to

55
00:02:33,176 --> 00:02:34,486
for your application as well.

56
00:02:34,816 --> 00:02:38,876
Implement a complication whether

57
00:02:38,996 --> 00:02:41,496
Additionally, new in watchOS

58
00:02:42,576 --> 00:02:44,936
Just by pressing the side button

59
00:02:44,936 --> 00:02:46,786
up their dock and

60
00:02:46,786 --> 00:02:48,036
of their favorites applications.

61
00:02:49,066 --> 00:02:52,136
Navigating to and from these

62
00:02:52,136 --> 00:02:52,526
and easy.

63
00:02:53,496 --> 00:02:55,006
Now we want our users

64
00:02:55,006 --> 00:02:57,246
to these favorite applications

65
00:02:57,246 --> 00:02:59,866
and loaded, instead of having to

66
00:02:59,906 --> 00:03:01,166
as the application

67
00:02:59,906 --> 00:03:01,166
as the application

68
00:03:01,926 --> 00:03:05,146
In order to address this, in

69
00:03:05,146 --> 00:03:07,106
that a user chooses to

70
00:03:07,226 --> 00:03:09,506
or in their dock will be

71
00:03:09,506 --> 00:03:10,536
in memory by the system.

72
00:03:11,376 --> 00:03:13,866
That way when they go to

73
00:03:14,066 --> 00:03:16,316
they only have to wait for

74
00:03:16,926 --> 00:03:18,686
But the system still has

75
00:03:19,046 --> 00:03:20,586
and as an application

76
00:03:20,916 --> 00:03:22,176
you'll need to be

77
00:03:22,456 --> 00:03:24,486
Because there can be up

78
00:03:24,776 --> 00:03:26,756
up to 5 complications, as well

79
00:03:26,756 --> 00:03:28,826
as the system application,

80
00:03:30,236 --> 00:03:32,486
You have to remember

81
00:03:32,486 --> 00:03:35,296
of a large ecosystem, so

82
00:03:35,296 --> 00:03:37,006
as you absolutely need.

83
00:03:38,206 --> 00:03:40,956
Now the system, because of

84
00:03:41,046 --> 00:03:43,866
our system does impose a fixed

85
00:03:43,866 --> 00:03:45,526
that a WatchKit application

86
00:03:46,016 --> 00:03:47,046
If you exceed this limit,

87
00:03:47,286 --> 00:03:49,696
our system will terminate you

88
00:03:49,696 --> 00:03:52,386
down so that the memory can be

89
00:03:52,836 --> 00:03:56,256
This limit isn't a goal, and you

90
00:03:56,256 --> 00:03:57,836
up all this memory

91
00:03:57,836 --> 00:03:58,976
it should be nowhere

92
00:03:59,626 --> 00:04:02,696
The current limit, as of watchOS

93
00:03:59,626 --> 00:04:02,696
The current limit, as of watchOS

94
00:04:02,696 --> 00:04:04,716
application, but this

95
00:04:05,786 --> 00:04:07,966
So what are some good tips for

96
00:04:09,146 --> 00:04:11,306
Use appropriately sized

97
00:04:11,656 --> 00:04:13,586
not only does this

98
00:04:13,816 --> 00:04:15,456
but will help increase

99
00:04:15,496 --> 00:04:16,326
because the watch won't have

100
00:04:16,356 --> 00:04:18,696
to do the extra work

101
00:04:19,326 --> 00:04:23,926
Use appropriately sized data

102
00:04:23,926 --> 00:04:25,786
of data if you're only

103
00:04:25,786 --> 00:04:26,236
on screen.

104
00:04:26,716 --> 00:04:29,136
And if you're only displaying

105
00:04:29,286 --> 00:04:30,126
don't download or keep

106
00:04:30,126 --> 00:04:31,676
around all the other

107
00:04:32,866 --> 00:04:34,936
If you have control over

108
00:04:34,936 --> 00:04:36,896
to download the data

109
00:04:36,896 --> 00:04:39,406
to build separate end points

110
00:04:39,406 --> 00:04:41,906
since the watch will probably

111
00:04:41,906 --> 00:04:42,706
of the information.

112
00:04:43,176 --> 00:04:45,876
This will help save on the

113
00:04:45,876 --> 00:04:47,916
that your watch has to

114
00:04:47,916 --> 00:04:48,996
of transient data and memory.

115
00:04:50,306 --> 00:04:51,756
Finally, it's important

116
00:04:51,756 --> 00:04:53,156
to release objects

117
00:04:53,736 --> 00:04:54,896
Take the time to go

118
00:04:54,896 --> 00:04:55,926
and make sure you're

119
00:04:55,926 --> 00:04:57,466
around things you

120
00:04:58,516 --> 00:05:01,436
Now, because the applications

121
00:04:58,516 --> 00:05:01,436
Now, because the applications

122
00:05:01,436 --> 00:05:03,776
on their watch face and

123
00:05:03,776 --> 00:05:05,386
and suspended in

124
00:05:05,386 --> 00:05:08,136
they will be resumed much more

125
00:05:08,896 --> 00:05:11,576
Because of this, for watchOS 3

126
00:05:11,576 --> 00:05:13,036
on optimizing is resume time.

127
00:05:14,046 --> 00:05:16,826
Now apps won't only be

128
00:05:16,826 --> 00:05:18,316
because they're kept

129
00:05:18,506 --> 00:05:19,916
but also because

130
00:05:20,806 --> 00:05:22,976
When the user scrolls over to

131
00:05:23,396 --> 00:05:24,516
the application will be resumed.

132
00:05:24,516 --> 00:05:27,706
When the user scrolls away, the

133
00:05:29,186 --> 00:05:32,896
This behavior of resuming and

134
00:05:32,896 --> 00:05:34,406
for applications in watchOS 3.

135
00:05:34,436 --> 00:05:37,446
So it's important to understand

136
00:05:37,446 --> 00:05:39,526
which lifecycle methods

137
00:05:39,706 --> 00:05:41,756
and which lifecycle methods

138
00:05:42,876 --> 00:05:44,626
So let's talk about the

139
00:05:44,676 --> 00:05:46,436
that the WatchKit

140
00:05:47,576 --> 00:05:49,576
ApplicationDidFinishLaunching

141
00:05:49,576 --> 00:05:50,526
that your delegate will see.

142
00:05:50,946 --> 00:05:53,086
This gets called when the

143
00:05:53,426 --> 00:05:55,596
and is a good place to perform

144
00:05:55,596 --> 00:05:57,556
of your application

145
00:05:57,556 --> 00:05:59,156
that only need to

146
00:06:00,146 --> 00:06:01,886
The second method that

147
00:06:01,886 --> 00:06:04,076
is applicationDidBecomeActive.

148
00:06:05,036 --> 00:06:07,616
This gets called whenever your

149
00:06:07,616 --> 00:06:10,136
application on the

150
00:06:10,186 --> 00:06:13,126
that were previously paused or

151
00:06:13,256 --> 00:06:14,546
refresh the user interface.

152
00:06:15,986 --> 00:06:17,886
Once the application

153
00:06:18,006 --> 00:06:19,716
to the inactive state

154
00:06:19,716 --> 00:06:21,446
applicationWillResignActive

155
00:06:22,156 --> 00:06:24,596
This can occur for certain

156
00:06:24,596 --> 00:06:26,836
such as an incoming phone

157
00:06:27,406 --> 00:06:29,576
when the user presses the side

158
00:06:30,016 --> 00:06:31,706
or when the user

159
00:06:31,786 --> 00:06:34,306
and it starts its transition

160
00:06:35,876 --> 00:06:38,296
When your application is no

161
00:06:38,296 --> 00:06:39,576
to go to the background

162
00:06:39,576 --> 00:06:41,156
applicationDidEnterBackground

163
00:06:41,156 --> 00:06:42,666
And when your application

164
00:06:42,666 --> 00:06:44,986
to the foreground you'll get the

165
00:06:44,986 --> 00:06:45,236
call.

166
00:06:45,966 --> 00:06:47,376
These methods are only

167
00:06:47,376 --> 00:06:50,446
from background to foreground or

168
00:06:50,486 --> 00:06:51,836
so it won't be called

169
00:06:52,376 --> 00:06:55,826
In addition, there are

170
00:06:55,826 --> 00:06:56,866
with the interface controller.

171
00:06:57,876 --> 00:06:59,306
AwakeWithContext gets called

172
00:06:59,306 --> 00:07:01,396
when your interface

173
00:06:59,306 --> 00:07:01,396
when your interface

174
00:07:01,806 --> 00:07:04,336
This is a good place to do work

175
00:07:05,326 --> 00:07:07,906
willActivate is called when

176
00:07:08,026 --> 00:07:09,056
and able to be updated.

177
00:07:09,356 --> 00:07:11,686
It can be called before the

178
00:07:11,686 --> 00:07:12,276
to the user.

179
00:07:12,676 --> 00:07:14,696
Once the interface is

180
00:07:14,696 --> 00:07:15,906
you'll get the didAppear method.

181
00:07:16,526 --> 00:07:17,806
If you have work

182
00:07:18,236 --> 00:07:19,636
these methods are the

183
00:07:20,146 --> 00:07:21,946
If the work is heavy

184
00:07:22,006 --> 00:07:23,926
to dispatch the work out

185
00:07:24,086 --> 00:07:25,386
so that these methods

186
00:07:25,756 --> 00:07:27,026
and your app can

187
00:07:28,876 --> 00:07:30,436
Once you're application's

188
00:07:31,016 --> 00:07:32,766
you'll get the willDisappear

189
00:07:32,766 --> 00:07:35,896
on your interface controller

190
00:07:35,896 --> 00:07:37,696
about to be no longer

191
00:07:38,646 --> 00:07:40,556
Once the user interface

192
00:07:40,556 --> 00:07:43,226
and no longer be updated you'll

193
00:07:44,376 --> 00:07:46,826
These methods are a good place

194
00:07:46,936 --> 00:07:49,476
that you may have started in

195
00:07:50,716 --> 00:07:54,746
It's important to understand

196
00:07:54,746 --> 00:07:57,266
that these methods can get

197
00:07:58,546 --> 00:08:00,136
I'd like to now walk

198
00:07:58,546 --> 00:08:00,136
I'd like to now walk

199
00:08:00,136 --> 00:08:02,046
of how an application might

200
00:08:02,046 --> 00:08:02,646
its lifetime.

201
00:08:03,246 --> 00:08:05,496
We'll start with an application

202
00:08:05,496 --> 00:08:07,596
of this talk is not

203
00:08:08,216 --> 00:08:09,716
When the user taps

204
00:08:09,976 --> 00:08:12,376
the first methods will go to

205
00:08:12,746 --> 00:08:14,516
didFinishLaunching,

206
00:08:15,116 --> 00:08:17,716
The interface controller will

207
00:08:17,796 --> 00:08:19,136
willActivate and didAppear.

208
00:08:20,436 --> 00:08:23,206
Now your application is running

209
00:08:23,246 --> 00:08:25,536
But what happens when the

210
00:08:25,636 --> 00:08:26,396
to bring up the dock?

211
00:08:27,476 --> 00:08:30,076
At this moment your application

212
00:08:30,076 --> 00:08:32,655
application on the platform,

213
00:08:32,876 --> 00:08:35,535
So your delegate will get the

214
00:08:35,596 --> 00:08:35,785
call.

215
00:08:38,166 --> 00:08:40,436
While the user's still settled

216
00:08:40,726 --> 00:08:42,285
you'll still foreground

217
00:08:42,446 --> 00:08:43,666
you're getting CPU time,

218
00:08:43,666 --> 00:08:46,066
your updating your user

219
00:08:46,476 --> 00:08:48,616
As soon as the user scrolls

220
00:08:48,906 --> 00:08:50,516
the system will suspend

221
00:08:50,956 --> 00:08:53,196
So your interface controller

222
00:08:53,196 --> 00:08:54,926
and didDeactivate

223
00:08:54,926 --> 00:08:56,446
application didEnterBackground.

224
00:08:58,876 --> 00:09:01,436
Now here your application has

225
00:08:58,876 --> 00:09:01,436
Now here your application has

226
00:09:01,956 --> 00:09:03,816
so the system might

227
00:09:03,876 --> 00:09:05,316
for a background snapshot task.

228
00:09:05,766 --> 00:09:07,486
To learn more about

229
00:09:07,746 --> 00:09:09,156
check out the talk

230
00:09:09,366 --> 00:09:10,706
Keeping Your Watch

231
00:09:10,706 --> 00:09:14,066
Your interface controller gets

232
00:09:14,066 --> 00:09:16,576
and didAppear, before your

233
00:09:16,676 --> 00:09:17,876
to handleBackgroundTasks.

234
00:09:18,716 --> 00:09:20,196
And then your interface

235
00:09:20,196 --> 00:09:21,706
willDisappear and didDeactivate.

236
00:09:22,936 --> 00:09:24,736
Now your application

237
00:09:24,836 --> 00:09:26,526
and it's handled its

238
00:09:26,896 --> 00:09:28,776
Once the user swipes

239
00:09:29,096 --> 00:09:30,906
you'll get your

240
00:09:31,306 --> 00:09:34,586
and your willActivate

241
00:09:34,586 --> 00:09:36,406
Your application is

242
00:09:36,486 --> 00:09:37,846
and foregrounded in the dock.

243
00:09:38,586 --> 00:09:40,636
It's no until the user taps

244
00:09:40,636 --> 00:09:42,786
that you become the active

245
00:09:42,786 --> 00:09:44,686
and get

246
00:09:46,236 --> 00:09:48,806
Now a lot has happened just

247
00:09:48,956 --> 00:09:51,366
swiping away from your

248
00:09:51,816 --> 00:09:54,076
That's why it's important to

249
00:09:54,076 --> 00:09:56,716
and understand that as a

250
00:09:56,716 --> 00:10:01,706
application may be seeing these

251
00:09:56,716 --> 00:10:01,706
application may be seeing these

252
00:10:02,046 --> 00:10:03,856
So what are some other tips

253
00:10:04,416 --> 00:10:08,276
You should use discretion when

254
00:10:08,576 --> 00:10:10,216
Every time you set a property

255
00:10:10,216 --> 00:10:13,216
on WKInterface object the system

256
00:10:13,506 --> 00:10:15,686
packs it up, and dispatches

257
00:10:15,726 --> 00:10:16,766
where the UI is updated.

258
00:10:17,476 --> 00:10:19,986
It may be tempting to build some

259
00:10:19,986 --> 00:10:22,646
of your application updates

260
00:10:22,646 --> 00:10:23,686
that every time you resume.

261
00:10:24,016 --> 00:10:25,846
But setting each property

262
00:10:26,116 --> 00:10:28,376
Even if the property isn't

263
00:10:28,376 --> 00:10:32,456
in unnecessary traffic between

264
00:10:32,456 --> 00:10:34,476
It's worth the effort to

265
00:10:34,476 --> 00:10:39,096
if they're changing, so

266
00:10:39,256 --> 00:10:40,096
You should also not

267
00:10:40,096 --> 00:10:43,146
that WKInterfaceTable does not

268
00:10:43,706 --> 00:10:44,946
The phone has a lot more memory

269
00:10:44,946 --> 00:10:46,486
for storing a lot

270
00:10:46,736 --> 00:10:49,416
and UITableView is just

271
00:10:49,416 --> 00:10:50,466
through these larger data set.

272
00:10:51,076 --> 00:10:53,836
The cells are created on demand,

273
00:10:54,806 --> 00:10:56,396
With WKInterfaceTable however,

274
00:10:56,536 --> 00:10:59,196
all the cells are created

275
00:10:59,396 --> 00:11:00,776
So the amount of work

276
00:10:59,396 --> 00:11:00,776
So the amount of work

277
00:11:00,776 --> 00:11:02,966
to do scales linearly

278
00:11:03,886 --> 00:11:05,186
Because of that it's important

279
00:11:05,186 --> 00:11:07,146
to keep WKInterfaceTable

280
00:11:07,716 --> 00:11:09,776
The watch is not the appropriate

281
00:11:09,776 --> 00:11:12,666
through hundreds of records and

282
00:11:12,666 --> 00:11:17,876
to keep WKInterfaceTable

283
00:11:18,116 --> 00:11:20,536
You should avoid reloading

284
00:11:20,536 --> 00:11:21,336
possible as well.

285
00:11:21,766 --> 00:11:24,106
This is an expensive operation.

286
00:11:24,626 --> 00:11:27,886
If it may be tempting to reload

287
00:11:28,026 --> 00:11:30,336
or when your data set

288
00:11:30,336 --> 00:11:31,506
and remove rows, it's better

289
00:11:31,506 --> 00:11:34,636
to use the insertion

290
00:11:35,806 --> 00:11:38,096
I'd now like to talk

291
00:11:38,696 --> 00:11:40,666
Thinking about the right

292
00:11:40,666 --> 00:11:42,876
on the watch form factor

293
00:11:42,876 --> 00:11:44,986
to display it can

294
00:11:46,466 --> 00:11:48,786
In watchOS 3you should

295
00:11:48,986 --> 00:11:49,866
to be glanceable.

296
00:11:50,276 --> 00:11:54,646
The dock lets users quickly look

297
00:11:54,776 --> 00:11:56,106
through their favorite

298
00:11:56,636 --> 00:11:58,586
So your application may

299
00:11:58,586 --> 00:12:00,726
for a brief moment in

300
00:11:58,586 --> 00:12:00,726
for a brief moment in

301
00:12:00,726 --> 00:12:02,196
from one application

302
00:12:02,806 --> 00:12:05,326
So focus on showing only the

303
00:12:05,416 --> 00:12:07,006
and display it as

304
00:12:08,196 --> 00:12:11,186
Part of making your application

305
00:12:11,186 --> 00:12:12,266
with a focused purpose.

306
00:12:12,956 --> 00:12:15,376
The watch is not the appropriate

307
00:12:15,376 --> 00:12:16,886
through large amounts

308
00:12:17,386 --> 00:12:19,236
or looking at complex

309
00:12:20,126 --> 00:12:22,426
By only showing the most

310
00:12:22,546 --> 00:12:24,436
you tend to get better

311
00:12:25,216 --> 00:12:27,336
Since you're displaying less

312
00:12:27,396 --> 00:12:29,416
and processing and need

313
00:12:29,416 --> 00:12:32,506
to stay up to date.

314
00:12:32,506 --> 00:12:34,406
Lastly, it's important

315
00:12:34,966 --> 00:12:36,876
I've talked a lot about how

316
00:12:36,876 --> 00:12:39,036
on a system level, but

317
00:12:39,036 --> 00:12:41,346
to consider navigation on an

318
00:12:41,976 --> 00:12:45,636
In order to help with this

319
00:12:45,636 --> 00:12:46,266
pageing API.

320
00:12:47,326 --> 00:12:51,736
A standard setup for a WatchKit

321
00:12:51,736 --> 00:12:55,446
data view where you have a

322
00:12:55,446 --> 00:12:57,306
of the cells drills into

323
00:12:57,926 --> 00:12:59,746
The problem with this

324
00:12:59,746 --> 00:13:01,176
to see the detail

325
00:12:59,746 --> 00:13:01,176
to see the detail

326
00:13:01,446 --> 00:13:03,576
you end up tapping

327
00:13:04,476 --> 00:13:07,606
In order to solve this, our new

328
00:13:07,606 --> 00:13:09,616
quickly scroll from

329
00:13:09,956 --> 00:13:13,286
just panning along the screen

330
00:13:14,066 --> 00:13:16,536
To learn more about how to set

331
00:13:16,536 --> 00:13:19,026
as learn about other quick

332
00:13:19,396 --> 00:13:20,436
released, for developers,

333
00:13:20,786 --> 00:13:22,346
check out the Quick

334
00:13:22,346 --> 00:13:23,946
for watchOS talk

335
00:13:25,146 --> 00:13:27,666
But in this talk I'd like

336
00:13:27,666 --> 00:13:29,726
about the lifecycle that

337
00:13:29,726 --> 00:13:30,716
through as part of this API.

338
00:13:30,716 --> 00:13:33,096
Because it's important from

339
00:13:33,976 --> 00:13:37,506
So here we have our table with

340
00:13:37,936 --> 00:13:41,436
The detail paging API works

341
00:13:41,436 --> 00:13:42,476
to interface controllers.

342
00:13:42,776 --> 00:13:44,826
So when you tap one of the cells

343
00:13:44,826 --> 00:13:46,706
When you tap the cell,

344
00:13:46,706 --> 00:13:48,616
your master interface

345
00:13:48,616 --> 00:13:50,096
to get the method

346
00:13:50,096 --> 00:13:52,266
withidentifierinTable row index.

347
00:13:53,056 --> 00:13:54,856
This is where you're going to

348
00:13:54,996 --> 00:13:56,936
that gets passed to your

349
00:13:56,936 --> 00:13:58,346
and it's awakeWithContext

350
00:13:59,346 --> 00:14:01,376
Your master view controller

351
00:13:59,346 --> 00:14:01,376
Your master view controller

352
00:14:01,376 --> 00:14:03,166
for the cell you

353
00:14:03,166 --> 00:14:04,536
and every cell in the table.

354
00:14:05,696 --> 00:14:08,186
We prepare the context for every

355
00:14:08,186 --> 00:14:11,136
away so that when we

356
00:14:11,136 --> 00:14:12,886
so that we can instantiate

357
00:14:13,376 --> 00:14:15,016
That way when the user, goes

358
00:14:15,016 --> 00:14:16,566
to their first one

359
00:14:16,566 --> 00:14:20,386
through all of them.

360
00:14:21,226 --> 00:14:23,226
Your first controller

361
00:14:23,466 --> 00:14:25,456
first one to get its

362
00:14:25,456 --> 00:14:28,176
as well as its willActivate

363
00:14:28,906 --> 00:14:30,626
However, this is where

364
00:14:30,626 --> 00:14:31,296
for the scroll view.

365
00:14:31,706 --> 00:14:33,176
We'll preheat the

366
00:14:33,176 --> 00:14:34,726
to the selected detail

367
00:14:35,176 --> 00:14:37,346
so that the users can

368
00:14:37,556 --> 00:14:38,486
So the other colors are going

369
00:14:38,486 --> 00:14:40,496
to get their lifecycle

370
00:14:41,376 --> 00:14:43,516
They're going to first get

371
00:14:44,046 --> 00:14:47,526
and then their willActivate

372
00:14:50,566 --> 00:14:52,816
It's important to be smart

373
00:14:52,816 --> 00:14:54,216
on these off screen

374
00:14:54,906 --> 00:14:58,026
Don't start long CPU intensive

375
00:14:58,586 --> 00:15:02,296
Because this may cause a lot

376
00:14:58,586 --> 00:15:02,296
Because this may cause a lot

377
00:15:02,366 --> 00:15:03,676
if you have a lot

378
00:15:04,486 --> 00:15:06,156
Now as the user scrolls

379
00:15:06,156 --> 00:15:09,176
to the other your previous

380
00:15:09,246 --> 00:15:12,366
first to get its willDisappear

381
00:15:12,796 --> 00:15:14,266
didDeactivate, and didAppear.

382
00:15:15,026 --> 00:15:16,306
This keeps your interface

383
00:15:16,306 --> 00:15:17,246
in a consistent state.

384
00:15:17,716 --> 00:15:19,706
Those that are on screen

385
00:15:19,706 --> 00:15:21,026
didAppear call and those

386
00:15:21,026 --> 00:15:23,236
that are off screen

387
00:15:23,326 --> 00:15:24,176
didDeactivate call.

388
00:15:25,226 --> 00:15:26,706
That way when you tap back to go

389
00:15:26,706 --> 00:15:28,016
to the master interface

390
00:15:28,256 --> 00:15:31,346
only one interface controller

391
00:15:31,346 --> 00:15:32,646
on it, the one that's visible.

392
00:15:32,766 --> 00:15:35,336
It'll get its willDisappear,

393
00:15:38,076 --> 00:15:40,056
Alright, I'd like to

394
00:15:40,056 --> 00:15:41,616
about how we've applied

395
00:15:41,656 --> 00:15:43,216
to our Stocks WatchKit

396
00:15:43,656 --> 00:15:43,906
Thank you.

397
00:15:45,516 --> 00:15:50,500
[ Applause ]

398
00:15:56,576 --> 00:15:57,396
&gt;&gt; Good afternoon.

399
00:15:57,606 --> 00:16:01,746
I'm a watch OS engineer,

400
00:15:57,606 --> 00:16:01,746
I'm a watch OS engineer,

401
00:16:01,746 --> 00:16:04,116
as a case study to

402
00:16:04,796 --> 00:16:06,546
So many of you may

403
00:16:06,856 --> 00:16:09,296
but Stocks is a watch

404
00:16:09,636 --> 00:16:12,106
At Apple we wanted to

405
00:16:12,566 --> 00:16:13,686
with WatchKit development,

406
00:16:13,926 --> 00:16:16,386
and we felt that Stocks

407
00:16:16,696 --> 00:16:17,666
for WatchKit development.

408
00:16:18,826 --> 00:16:22,566
I have three topics that I

409
00:16:22,756 --> 00:16:24,786
in regard to Stocks and

410
00:16:25,596 --> 00:16:29,246
I'm going to identify our

411
00:16:30,146 --> 00:16:31,626
then I'm going to discuss some

412
00:16:31,626 --> 00:16:34,976
of the implementation details

413
00:16:34,976 --> 00:16:35,516
use cases.

414
00:16:37,686 --> 00:16:40,996
Finally, I will talk a bit about

415
00:16:41,456 --> 00:16:45,446
to help with our resume time and

416
00:16:47,466 --> 00:16:51,136
So, we'll begin with

417
00:16:51,776 --> 00:16:53,786
When we thought of Stocks,

418
00:16:54,446 --> 00:16:56,676
we thought of three

419
00:16:57,646 --> 00:16:59,846
the first is you

420
00:16:59,846 --> 00:17:02,266
to view how a favorite

421
00:16:59,846 --> 00:17:02,266
to view how a favorite

422
00:17:02,326 --> 00:17:03,696
right now.

423
00:17:04,046 --> 00:17:05,816
This can of course

424
00:17:06,056 --> 00:17:07,046
with a complication.

425
00:17:07,915 --> 00:17:10,955
But with the dock, we're able

426
00:17:11,256 --> 00:17:12,316
with that 2-Second task.

427
00:17:13,026 --> 00:17:14,455
In particular, we felt

428
00:17:14,455 --> 00:17:17,546
that another important 2-Second

429
00:17:17,586 --> 00:17:20,896
favorite stock's current

430
00:17:21,116 --> 00:17:21,586
in a chart.

431
00:17:22,896 --> 00:17:25,945
Lastly, we felt that it

432
00:17:25,945 --> 00:17:29,456
to see the current

433
00:17:30,016 --> 00:17:31,636
So we'll start with

434
00:17:32,146 --> 00:17:34,816
Now of course the

435
00:17:35,346 --> 00:17:38,036
to see data on your watch.

436
00:17:38,646 --> 00:17:41,956
That data is always present and

437
00:17:41,956 --> 00:17:43,556
to look at the time

438
00:17:44,376 --> 00:17:48,876
The important piece in that, in

439
00:17:48,876 --> 00:17:52,916
in sync between the

440
00:17:53,276 --> 00:17:55,916
Now for more information on

441
00:17:55,916 --> 00:17:58,676
to check out the Keeping Your

442
00:17:58,976 --> 00:17:59,986
that occurred this morning.

443
00:18:01,156 --> 00:18:04,336
So now we'll go and

444
00:18:04,336 --> 00:18:07,796
of the other 2-Second tasks

445
00:18:08,706 --> 00:18:12,386
So in watchOS 2, you

446
00:18:12,906 --> 00:18:15,656
and you could see the

447
00:18:15,816 --> 00:18:17,916
that you were interested in or

448
00:18:18,746 --> 00:18:20,036
But if you wanted to see how

449
00:18:20,036 --> 00:18:22,066
that stock had been

450
00:18:22,346 --> 00:18:23,926
you would need to

451
00:18:24,096 --> 00:18:25,346
and now you're presented

452
00:18:25,526 --> 00:18:26,756
It's a little bit

453
00:18:26,756 --> 00:18:29,236
but it still doesn't really

454
00:18:29,236 --> 00:18:31,906
that stock price had been

455
00:18:32,556 --> 00:18:34,636
So if you wanted to see that,

456
00:18:34,636 --> 00:18:36,686
down a little bit, and

457
00:18:37,996 --> 00:18:41,216
We had four options, for the

458
00:18:41,376 --> 00:18:43,866
the one week, the one

459
00:18:44,796 --> 00:18:46,296
So odds are the first

460
00:18:46,296 --> 00:18:48,816
down there you're probably

461
00:18:48,816 --> 00:18:51,696
that you care about which is

462
00:18:52,856 --> 00:18:54,876
So that would require you

463
00:18:55,046 --> 00:18:58,156
very small buttons and

464
00:18:58,156 --> 00:19:01,796
And then after that, you would

465
00:18:58,156 --> 00:19:01,796
And then after that, you would

466
00:19:02,396 --> 00:19:06,076
down below that a lot of the

467
00:19:06,076 --> 00:19:08,366
for when you're glancing at

468
00:19:09,616 --> 00:19:12,206
And of course if you wanted

469
00:19:12,206 --> 00:19:13,496
and how they're performing

470
00:19:13,496 --> 00:19:16,476
you would have to navigate

471
00:19:16,626 --> 00:19:18,506
much like Tyler should you

472
00:19:20,236 --> 00:19:21,836
So let's look at watchOS 3.

473
00:19:22,686 --> 00:19:25,766
Now here's the new watchOS

474
00:19:25,816 --> 00:19:28,816
first of all, still a list

475
00:19:29,436 --> 00:19:32,746
But the font is much larger,

476
00:19:32,746 --> 00:19:33,806
of a simplified interface.

477
00:19:34,176 --> 00:19:37,916
To me it pops and it's easily

478
00:19:38,006 --> 00:19:38,976
like you would see in the dock.

479
00:19:40,056 --> 00:19:42,646
So if you wanted to see

480
00:19:42,876 --> 00:19:44,986
today and how the performance

481
00:19:44,986 --> 00:19:48,756
on Apple, again, but now you

482
00:19:49,126 --> 00:19:50,906
And we just assume

483
00:19:50,906 --> 00:19:51,996
to see the one day chart.

484
00:19:52,996 --> 00:19:55,366
There are instances of course,

485
00:19:55,966 --> 00:19:57,906
much like index funds

486
00:19:58,666 --> 00:20:01,476
But we can fall back to the

487
00:19:58,666 --> 00:20:01,476
But we can fall back to the

488
00:20:01,476 --> 00:20:04,436
across those, and that's

489
00:20:04,436 --> 00:20:05,626
that you would like

490
00:20:08,346 --> 00:20:11,156
We also got rid of some of

491
00:20:11,676 --> 00:20:13,636
Now this gives us

492
00:20:13,876 --> 00:20:17,356
One, it eliminates a

493
00:20:17,356 --> 00:20:18,506
up our loading performance.

494
00:20:19,466 --> 00:20:23,506
And two, it allows us to adopt

495
00:20:23,506 --> 00:20:26,086
API, so then that

496
00:20:26,086 --> 00:20:29,246
through multiple Stocks either

497
00:20:29,716 --> 00:20:30,766
or a swipe of your finger.

498
00:20:31,516 --> 00:20:33,266
And of course, if you

499
00:20:33,266 --> 00:20:36,906
of a stock's performance you

500
00:20:36,906 --> 00:20:40,126
that we had before such as the

501
00:20:40,736 --> 00:20:44,136
You can view that using

502
00:20:44,276 --> 00:20:48,666
you're able to setup a

503
00:20:48,666 --> 00:20:49,656
that off to your iPhone.

504
00:20:50,356 --> 00:20:53,386
So we feel that the watch is

505
00:20:54,076 --> 00:20:56,376
and that the iPhone

506
00:20:56,596 --> 00:20:58,896
you know like a view

507
00:20:59,016 --> 00:21:00,536
or a little bit too convoluted.

508
00:20:59,016 --> 00:21:00,536
or a little bit too convoluted.

509
00:21:01,636 --> 00:21:04,566
So the good thing about the

510
00:21:04,766 --> 00:21:09,146
it's very readable in the

511
00:21:09,506 --> 00:21:12,786
we decided to reevaluate what

512
00:21:13,576 --> 00:21:15,636
So if you attended some of the

513
00:21:15,636 --> 00:21:19,046
that there is a concept of a

514
00:21:19,966 --> 00:21:23,166
So we took this to mean that

515
00:21:23,616 --> 00:21:26,126
And what I mean by sticky is

516
00:21:26,386 --> 00:21:29,246
if you're looking at the

517
00:21:29,246 --> 00:21:32,916
to Stocks either in the dock or

518
00:21:33,366 --> 00:21:34,686
you will see the stock list.

519
00:21:35,736 --> 00:21:37,136
And this is also the

520
00:21:37,136 --> 00:21:38,556
up to date throughout the day.

521
00:21:39,616 --> 00:21:43,816
However, if you were to tap

522
00:21:43,816 --> 00:21:47,046
and returned to look at

523
00:21:47,046 --> 00:21:49,876
into the app, then you're

524
00:21:50,286 --> 00:21:52,426
Now there's one caveat

525
00:21:52,986 --> 00:21:56,196
so on Stocks you can set

526
00:21:56,726 --> 00:21:58,106
and that's the stock

527
00:21:58,106 --> 00:21:59,316
of course on your complication.

528
00:21:59,716 --> 00:22:00,466
So we took that to mean

529
00:21:59,716 --> 00:22:00,466
So we took that to mean

530
00:22:00,466 --> 00:22:02,116
that that's most likely

531
00:22:03,076 --> 00:22:05,446
So once you set that,

532
00:22:05,446 --> 00:22:06,596
that we try to return you to.

533
00:22:07,186 --> 00:22:10,786
So if you open up Stocks and

534
00:22:10,916 --> 00:22:14,646
to the Facebook stock, and you

535
00:22:15,386 --> 00:22:19,436
in about an hour, when we get

536
00:22:19,636 --> 00:22:22,306
for our snapshot, we will

537
00:22:22,306 --> 00:22:23,176
to the Apple stock.

538
00:22:23,426 --> 00:22:26,106
Because we take that to mean

539
00:22:26,106 --> 00:22:27,906
as your complication

540
00:22:27,906 --> 00:22:29,826
that would be your favorite

541
00:22:29,826 --> 00:22:30,926
that we want to return you to.

542
00:22:31,296 --> 00:22:33,306
So we want to make a

543
00:22:33,516 --> 00:22:36,086
and always return the user to

544
00:22:36,086 --> 00:22:38,826
to see after a certain

545
00:22:39,676 --> 00:22:41,656
So let's recap what we've done

546
00:22:42,306 --> 00:22:43,866
in our 2-Second tasks

547
00:22:44,296 --> 00:22:48,966
The first thing, we made sure

548
00:22:49,226 --> 00:22:52,586
between our complication

549
00:22:52,646 --> 00:22:54,866
The next, we simplified

550
00:22:55,436 --> 00:22:58,046
we made it a lot more

551
00:22:59,176 --> 00:23:04,516
and much more usable

552
00:22:59,176 --> 00:23:04,516
and much more usable

553
00:23:04,516 --> 00:23:05,626
through the detail pageing API.

554
00:23:05,626 --> 00:23:10,616
And that lets you look at

555
00:23:10,616 --> 00:23:12,716
of having to do the

556
00:23:13,226 --> 00:23:16,556
So next, we'll talk a little

557
00:23:17,216 --> 00:23:18,766
and I would like to

558
00:23:18,766 --> 00:23:21,686
about how we implemented

559
00:23:26,436 --> 00:23:29,046
So when we started implementing

560
00:23:29,776 --> 00:23:30,826
we came up with two questions.

561
00:23:31,506 --> 00:23:33,966
One, how often do we need

562
00:23:33,966 --> 00:23:35,716
to update our information

563
00:23:36,696 --> 00:23:39,616
And two, what data

564
00:23:39,796 --> 00:23:41,726
to keep our app up to date?

565
00:23:42,776 --> 00:23:45,626
So determining how often

566
00:23:45,626 --> 00:23:48,096
in Stocks was a little bit

567
00:23:49,066 --> 00:23:51,816
At first we felt that updating

568
00:23:51,816 --> 00:23:52,716
pretty good start.

569
00:23:54,316 --> 00:23:57,326
This would leave us updating our

570
00:23:57,326 --> 00:23:58,046
day, however.

571
00:23:58,506 --> 00:24:03,496
And many of those updates could

572
00:23:58,506 --> 00:24:03,496
And many of those updates could

573
00:24:03,846 --> 00:24:05,836
like when the stock

574
00:24:05,836 --> 00:24:07,706
of the day or over the weekend.

575
00:24:09,746 --> 00:24:11,556
So let's take some

576
00:24:11,556 --> 00:24:13,336
because we felt we

577
00:24:13,336 --> 00:24:14,476
in how we implemented this.

578
00:24:14,826 --> 00:24:16,516
First, markets are

579
00:24:16,516 --> 00:24:17,476
of time throughout the day.

580
00:24:18,076 --> 00:24:20,756
So for an example, let's

581
00:24:20,756 --> 00:24:21,926
on the New York Stock Exchange,

582
00:24:23,096 --> 00:24:25,716
and we know that the New

583
00:24:25,716 --> 00:24:29,326
at 9:30 a.m. Eastern and it

584
00:24:29,326 --> 00:24:33,436
So if we limit our

585
00:24:34,266 --> 00:24:37,346
basically when the market is

586
00:24:37,346 --> 00:24:41,006
down our number of updates,

587
00:24:41,326 --> 00:24:42,426
for other applications.

588
00:24:42,886 --> 00:24:46,096
And it's also going

589
00:24:46,176 --> 00:24:50,756
of not updating our complication

590
00:24:50,756 --> 00:24:51,716
when it would be ineffective.

591
00:24:52,676 --> 00:24:57,776
So that's also nice as well.

592
00:24:59,016 --> 00:25:01,996
So let's look at a little pseudo

593
00:24:59,016 --> 00:25:01,996
So let's look at a little pseudo

594
00:25:01,996 --> 00:25:04,146
and how would we decide

595
00:25:04,146 --> 00:25:05,376
for Stocks should be.

596
00:25:06,486 --> 00:25:09,216
First, we're going to enumerate

597
00:25:10,496 --> 00:25:14,796
then we're going to check and

598
00:25:14,796 --> 00:25:17,456
basically if the

599
00:25:17,536 --> 00:25:18,266
Because if we know,

600
00:25:18,496 --> 00:25:22,306
if the markets are all closed we

601
00:25:22,416 --> 00:25:23,406
that we have in our stock list.

602
00:25:24,416 --> 00:25:27,006
Otherwise, that means at

603
00:25:27,276 --> 00:25:30,366
so we should fall back to our

604
00:25:31,116 --> 00:25:32,736
So we'll look at a

605
00:25:33,686 --> 00:25:35,346
The first thing that I'll

606
00:25:35,346 --> 00:25:37,226
this is just a function

607
00:25:37,226 --> 00:25:38,896
for scheduling our

608
00:25:39,156 --> 00:25:41,066
and it takes an optional

609
00:25:43,296 --> 00:25:46,156
We use the

610
00:25:46,226 --> 00:25:49,976
instance method in WKExtension,

611
00:25:49,976 --> 00:25:52,126
in this preferredDate here.

612
00:25:53,106 --> 00:25:55,646
Now that preferred date is

613
00:25:55,956 --> 00:25:57,536
but that's at least how

614
00:25:57,536 --> 00:25:58,206
refresh time.

615
00:25:58,206 --> 00:26:00,626
So I'm kind of working

616
00:25:58,206 --> 00:26:00,626
So I'm kind of working

617
00:26:01,806 --> 00:26:05,726
So let's see what happens in

618
00:26:06,526 --> 00:26:11,026
That function has a guard early

619
00:26:11,026 --> 00:26:14,576
to call our function

620
00:26:16,286 --> 00:26:20,196
And if it returns nil, then

621
00:26:20,196 --> 00:26:23,446
and bail, because in

622
00:26:23,956 --> 00:26:24,986
we would return nil

623
00:26:25,246 --> 00:26:27,106
if you didn't have any

624
00:26:27,406 --> 00:26:28,676
Because at that point

625
00:26:28,676 --> 00:26:30,156
in doing a background refresh

626
00:26:30,196 --> 00:26:31,596
because there's no

627
00:26:33,616 --> 00:26:36,946
So now we'll go ahead

628
00:26:36,946 --> 00:26:38,356
nextRegularRefreshData,

629
00:26:38,526 --> 00:26:40,706
so that's just our update

630
00:26:41,146 --> 00:26:44,586
And then finally, we'll

631
00:26:44,766 --> 00:26:46,966
So we take that

632
00:26:47,506 --> 00:26:49,396
and we'll do a later

633
00:26:49,536 --> 00:26:51,806
against our regular

634
00:26:53,096 --> 00:26:55,426
Now our

635
00:26:55,426 --> 00:26:59,516
also has the added benefit

636
00:26:59,516 --> 00:27:01,886
if the market is currently

637
00:26:59,516 --> 00:27:01,886
if the market is currently

638
00:27:02,246 --> 00:27:05,936
So the later date would

639
00:27:05,936 --> 00:27:06,776
in that scenario.

640
00:27:07,346 --> 00:27:11,336
So let's look at that

641
00:27:11,336 --> 00:27:11,746
method.

642
00:27:12,726 --> 00:27:14,666
First we're going to

643
00:27:14,976 --> 00:27:16,716
and then we're going to

644
00:27:16,716 --> 00:27:21,236
And so if it's 0 again, we're

645
00:27:21,486 --> 00:27:23,766
there's no use in doing

646
00:27:26,226 --> 00:27:32,216
Then we're going to iterate

647
00:27:32,666 --> 00:27:37,636
If any of the markets, are open

648
00:27:37,636 --> 00:27:38,736
and return the distantPast.

649
00:27:40,006 --> 00:27:41,796
Otherwise we're going

650
00:27:41,846 --> 00:27:44,086
And we're just going to

651
00:27:44,366 --> 00:27:45,866
and find the

652
00:27:46,956 --> 00:27:49,386
And so I mean, I just wanted

653
00:27:50,156 --> 00:27:52,046
because we feel that

654
00:27:52,116 --> 00:27:53,586
of limiting the number of times

655
00:27:53,586 --> 00:27:55,046
that you're doing

656
00:27:55,296 --> 00:27:59,866
with not a whole lot of code.

657
00:28:00,056 --> 00:28:02,606
So let's talk about scheduling

658
00:28:03,246 --> 00:28:05,706
Because in particularly with

659
00:28:05,706 --> 00:28:07,576
that we hit to keep our

660
00:28:08,246 --> 00:28:12,036
So we have endpoint A, which

661
00:28:12,036 --> 00:28:13,896
up to date, and then

662
00:28:14,116 --> 00:28:15,316
for updating the complication.

663
00:28:18,216 --> 00:28:21,316
So if we're going to schedule

664
00:28:21,786 --> 00:28:22,316
we do that.

665
00:28:23,006 --> 00:28:25,376
Once we receive the

666
00:28:26,086 --> 00:28:27,576
we'll submit our

667
00:28:27,836 --> 00:28:29,176
submit our endpoint B request

668
00:28:29,226 --> 00:28:31,426
and we'll schedule our future

669
00:28:31,946 --> 00:28:32,826
So what does that look like?

670
00:28:33,056 --> 00:28:35,786
Well, we have our handle

671
00:28:35,856 --> 00:28:37,356
in our WKExtension delegate.

672
00:28:38,616 --> 00:28:41,386
We're going to iterate over

673
00:28:42,226 --> 00:28:44,376
We're going to go ahead

674
00:28:44,376 --> 00:28:45,916
if it's an application

675
00:28:46,606 --> 00:28:49,056
And if it is, we're going

676
00:28:49,056 --> 00:28:51,006
that data update request

677
00:28:51,006 --> 00:28:53,726
where we actually

678
00:28:55,026 --> 00:28:56,466
The next we'll do,

679
00:28:56,466 --> 00:28:58,436
and schedule our next

680
00:28:58,436 --> 00:29:00,826
using that handy dandy

681
00:28:58,436 --> 00:29:00,826
using that handy dandy

682
00:29:01,326 --> 00:29:03,946
And then we'll complete

683
00:29:05,066 --> 00:29:07,166
The last part of this, I'll

684
00:29:07,166 --> 00:29:09,096
that URL session

685
00:29:09,316 --> 00:29:10,436
Now you will get one of these

686
00:29:10,896 --> 00:29:14,516
when you trigger a background

687
00:29:15,196 --> 00:29:17,586
So it's our job here

688
00:29:17,706 --> 00:29:20,156
where we can complete

689
00:29:20,156 --> 00:29:23,126
that request is finished.

690
00:29:24,936 --> 00:29:26,246
So now we've talked

691
00:29:26,246 --> 00:29:27,186
about what it actually looks

692
00:29:27,186 --> 00:29:29,136
like when we schedule

693
00:29:29,346 --> 00:29:30,116
just at a high level.

694
00:29:30,116 --> 00:29:33,806
So we're going to schedule

695
00:29:33,806 --> 00:29:35,266
and then when those

696
00:29:36,146 --> 00:29:37,586
we're going to schedule

697
00:29:37,696 --> 00:29:39,356
reload the complication,

698
00:29:39,356 --> 00:29:42,106
to complete our refresh

699
00:29:42,936 --> 00:29:46,036
So the first thing we'll

700
00:29:46,126 --> 00:29:47,516
and the complication

701
00:29:48,106 --> 00:29:50,526
Then we're going to setup

702
00:29:50,716 --> 00:29:54,326
Now the finish update handler is

703
00:29:54,716 --> 00:29:58,406
a block that I set so that

704
00:29:58,406 --> 00:30:01,536
delegate method for finishing

705
00:29:58,406 --> 00:30:01,536
delegate method for finishing

706
00:30:01,536 --> 00:30:03,966
called, I can call that

707
00:30:04,666 --> 00:30:08,636
and that'll call

708
00:30:10,306 --> 00:30:11,836
So then we have our

709
00:30:11,836 --> 00:30:14,366
which is essentially just

710
00:30:14,456 --> 00:30:17,486
and calling resume on the tasks.

711
00:30:17,856 --> 00:30:20,316
Now once the task is complete,

712
00:30:20,316 --> 00:30:23,526
that task from our URL sessions

713
00:30:24,276 --> 00:30:27,096
We'll schedule our snapshot,

714
00:30:27,446 --> 00:30:32,896
and we'll go ahead and

715
00:30:33,766 --> 00:30:35,116
And one last thing

716
00:30:35,116 --> 00:30:38,106
out here is our

717
00:30:38,106 --> 00:30:40,996
to show you that whenever

718
00:30:41,376 --> 00:30:45,876
we just grab the identifier

719
00:30:46,406 --> 00:30:47,846
and we call our

720
00:30:48,806 --> 00:30:50,236
And so that kind of

721
00:30:50,576 --> 00:30:53,366
of how you can run multiple

722
00:30:53,466 --> 00:30:55,936
up to date if you have

723
00:30:56,136 --> 00:30:57,116
and your complication.

724
00:30:57,576 --> 00:30:59,966
So the first thing,

725
00:30:59,966 --> 00:31:01,916
to optimize how often

726
00:30:59,966 --> 00:31:01,916
to optimize how often

727
00:31:02,086 --> 00:31:03,946
for your app when you're

728
00:31:04,746 --> 00:31:06,546
That's goal number one.

729
00:31:07,226 --> 00:31:10,036
And if you're updating

730
00:31:10,206 --> 00:31:12,166
try to use a single

731
00:31:12,206 --> 00:31:13,356
if you have control over that.

732
00:31:13,836 --> 00:31:15,506
But if you don't, it is possible

733
00:31:15,656 --> 00:31:18,476
to submit multiple requests

734
00:31:18,926 --> 00:31:22,656
So now let's move onto

735
00:31:23,026 --> 00:31:25,936
So when you optimize your resume

736
00:31:25,936 --> 00:31:27,256
to be optimizing

737
00:31:27,256 --> 00:31:29,186
as well, which is very nice.

738
00:31:29,796 --> 00:31:32,856
So let's talk about

739
00:31:33,586 --> 00:31:34,786
As Tyler I mentioned earlier,

740
00:31:35,886 --> 00:31:38,616
we can minimize the work we're

741
00:31:38,756 --> 00:31:39,526
and didAppear.

742
00:31:39,826 --> 00:31:40,856
So you know to do that,

743
00:31:40,856 --> 00:31:42,496
of course we avoid

744
00:31:42,496 --> 00:31:43,756
that are triggered

745
00:31:44,256 --> 00:31:46,816
We'll do a smart loading

746
00:31:47,406 --> 00:31:48,966
and of course as he

747
00:31:48,966 --> 00:31:50,956
to set properties on

748
00:31:50,996 --> 00:31:52,086
that have actually changed.

749
00:31:52,976 --> 00:31:55,416
So I'll start this off

750
00:31:55,796 --> 00:31:59,006
and this involves implementing

751
00:31:59,716 --> 00:32:00,986
So as Tyler mentioned before,

752
00:31:59,716 --> 00:32:00,986
So as Tyler mentioned before,

753
00:32:00,986 --> 00:32:03,156
neighboring detail pages

754
00:32:03,966 --> 00:32:06,536
and you also want to

755
00:32:06,536 --> 00:32:08,476
in willActivate for

756
00:32:08,776 --> 00:32:11,716
But in particular, there's one

757
00:32:11,716 --> 00:32:12,336
in this view.

758
00:32:12,606 --> 00:32:15,046
So it started with a

759
00:32:15,046 --> 00:32:17,046
but essentially we got

760
00:32:17,046 --> 00:32:19,236
a slow loading chart for a stock

761
00:32:19,236 --> 00:32:20,646
when you first entered

762
00:32:21,056 --> 00:32:23,646
And other detail pages never

763
00:32:23,726 --> 00:32:25,256
or were extremely slow.

764
00:32:25,256 --> 00:32:28,276
So we kind of looked at

765
00:32:28,276 --> 00:32:30,406
and see what was going on, so

766
00:32:30,406 --> 00:32:31,706
of a stock interface controller.

767
00:32:32,266 --> 00:32:33,356
But if you'll notice,

768
00:32:33,356 --> 00:32:36,076
in willActivate we're calling

769
00:32:36,576 --> 00:32:41,076
which was, basically an NS

770
00:32:41,076 --> 00:32:43,906
and doing a lot of work to get

771
00:32:43,906 --> 00:32:47,006
So what can we do to

772
00:32:47,676 --> 00:32:51,376
Well, so we know that in

773
00:32:51,376 --> 00:32:53,626
when that interface

774
00:32:53,626 --> 00:32:54,956
to the user and it has settled.

775
00:32:55,656 --> 00:32:58,226
So how about we start

776
00:32:58,226 --> 00:32:59,306
that chart data there?

777
00:33:00,016 --> 00:33:02,266
And then what happens

778
00:33:02,266 --> 00:33:04,306
through those quite frequently?

779
00:33:04,866 --> 00:33:06,896
We don't want to continue

780
00:33:06,896 --> 00:33:08,856
that chart data for a view

781
00:33:08,856 --> 00:33:12,256
So we'll go ahead and we'll call

782
00:33:12,606 --> 00:33:13,546
which is just a method

783
00:33:13,626 --> 00:33:15,946
that takes the operation

784
00:33:16,676 --> 00:33:21,046
So, let's look at, again to

785
00:33:21,256 --> 00:33:23,236
because I have to learn

786
00:33:23,976 --> 00:33:26,996
We want to avoid triggering long

787
00:33:29,396 --> 00:33:32,136
And if possible, it's

788
00:33:32,216 --> 00:33:33,746
of cancellable operations,

789
00:33:34,306 --> 00:33:37,546
so NS operation is a nice

790
00:33:38,126 --> 00:33:40,356
So we'll move onto the

791
00:33:40,996 --> 00:33:43,346
We know that all rows

792
00:33:44,016 --> 00:33:45,856
and we know that there's

793
00:33:45,856 --> 00:33:47,886
to the number of rows

794
00:33:48,566 --> 00:33:51,906
And, of course there's no reuse

795
00:33:52,106 --> 00:33:54,976
So I'm going to show a graph and

796
00:33:54,976 --> 00:33:55,976
that I had done in Stocks.

797
00:33:56,656 --> 00:33:59,606
And this for the initial

798
00:33:59,996 --> 00:34:02,036
not resume time, any of that.

799
00:33:59,996 --> 00:34:02,036
not resume time, any of that.

800
00:34:02,316 --> 00:34:04,526
But it's kind of important to

801
00:34:04,526 --> 00:34:05,956
in the list, so an

802
00:34:06,026 --> 00:34:08,206
so just under 5 1/2

803
00:34:09,565 --> 00:34:11,585
If we added one stock it

804
00:34:11,766 --> 00:34:14,755
to just under 6 1/2

805
00:34:14,926 --> 00:34:16,676
a little over 6 1/2 seconds.

806
00:34:17,255 --> 00:34:19,295
And if we had 10

807
00:34:19,366 --> 00:34:20,946
to creep up towards 7 seconds.

808
00:34:22,406 --> 00:34:25,295
So if you have a

809
00:34:25,815 --> 00:34:30,096
in your table you're just

810
00:34:30,356 --> 00:34:35,525
that interface controller

811
00:34:36,056 --> 00:34:38,556
So what can we do to improve

812
00:34:38,976 --> 00:34:41,416
Well first we can limit the

813
00:34:42,016 --> 00:34:45,226
And we can also try to do

814
00:34:45,315 --> 00:34:47,946
when row deltas occur so

815
00:34:48,326 --> 00:34:50,466
So let's look at our initial

816
00:34:52,116 --> 00:34:54,806
We'll go ahead and we'll grab

817
00:34:54,906 --> 00:34:57,366
and then we're going to set the

818
00:34:57,956 --> 00:34:59,896
And then after that,

819
00:35:00,066 --> 00:35:02,856
we'll populate each row

820
00:35:02,856 --> 00:35:05,846
Now it seems pretty harmless at

821
00:35:06,336 --> 00:35:09,746
Well the number of stocks isn't

822
00:35:09,746 --> 00:35:13,166
it would be 20 rows, if you had

823
00:35:14,446 --> 00:35:16,676
And we were always using

824
00:35:17,026 --> 00:35:20,806
And if just one row is being

825
00:35:20,806 --> 00:35:22,876
of rows you're essentially

826
00:35:22,876 --> 00:35:26,486
out what you had there before

827
00:35:26,836 --> 00:35:27,546
So it's inefficient.

828
00:35:28,466 --> 00:35:29,716
So let's look at

829
00:35:29,716 --> 00:35:31,116
to be a little smarter

830
00:35:31,606 --> 00:35:34,056
So we grab the stocks like

831
00:35:34,056 --> 00:35:35,726
and check the count, and

832
00:35:35,726 --> 00:35:36,956
and cap that at a max size.

833
00:35:37,456 --> 00:35:38,786
So in Stocks' case, 20.

834
00:35:40,286 --> 00:35:42,876
Then we're going to

835
00:35:43,026 --> 00:35:45,076
to see what the difference

836
00:35:45,376 --> 00:35:47,646
And then we're going to call

837
00:35:47,846 --> 00:35:48,706
which I'll get to in a second.

838
00:35:49,556 --> 00:35:51,936
And then one last

839
00:35:51,936 --> 00:35:53,716
to make sure we're not doing

840
00:35:54,076 --> 00:35:56,996
We'll go ahead and check to

841
00:35:56,996 --> 00:35:59,446
that max Stocks list size.

842
00:36:00,336 --> 00:36:02,676
So let's look at that

843
00:36:03,076 --> 00:36:04,126
So the first thing we're going

844
00:36:04,126 --> 00:36:07,526
to do is calculate the row

845
00:36:07,526 --> 00:36:08,656
to check the stock row delta.

846
00:36:08,656 --> 00:36:11,086
So if it's greater than 0,

847
00:36:11,616 --> 00:36:15,796
if it's less than 0, then we

848
00:36:16,136 --> 00:36:17,806
And the important thing

849
00:36:17,806 --> 00:36:19,626
to be a little bit more

850
00:36:19,626 --> 00:36:20,996
and do smart updating based

851
00:36:20,996 --> 00:36:22,956
on how much the list

852
00:36:23,026 --> 00:36:25,226
But we found, for

853
00:36:25,226 --> 00:36:29,666
just doing a simple insert

854
00:36:29,756 --> 00:36:32,656
starting at index 0, seems

855
00:36:33,926 --> 00:36:37,076
So let's not do more

856
00:36:37,286 --> 00:36:40,686
Alright so to recap,

857
00:36:40,686 --> 00:36:42,796
in your stock list, or in

858
00:36:42,896 --> 00:36:44,486
in your case, I'm not sure

859
00:36:44,686 --> 00:36:47,006
but keep the number of

860
00:36:47,006 --> 00:36:49,036
at something reasonable

861
00:36:49,816 --> 00:36:54,376
Next, when you're inserting

862
00:36:54,376 --> 00:36:57,176
to be much more efficient than

863
00:36:57,176 --> 00:36:59,526
of rows method on

864
00:37:00,126 --> 00:37:04,606
So one last thing here,

865
00:37:04,606 --> 00:37:08,096
over the entire table when

866
00:37:08,326 --> 00:37:09,326
So think about it this way,

867
00:37:09,326 --> 00:37:12,426
like what if we're updating

868
00:37:12,496 --> 00:37:14,986
in our table list or

869
00:37:16,126 --> 00:37:18,916
Instead of going through and

870
00:37:18,916 --> 00:37:22,226
when we don't have to, we can

871
00:37:22,226 --> 00:37:24,456
at index so that way we only

872
00:37:24,456 --> 00:37:25,236
that we care about.

873
00:37:25,896 --> 00:37:30,086
Or, you can even do something

874
00:37:30,086 --> 00:37:32,326
to that rowController

875
00:37:32,906 --> 00:37:36,136
So now we're going

876
00:37:36,136 --> 00:37:37,566
about updating your UIElements.

877
00:37:38,286 --> 00:37:42,486
So as Tyler mentioned before,

878
00:37:42,486 --> 00:37:44,886
they're modified in

879
00:37:45,336 --> 00:37:46,896
and updates to these

880
00:37:46,896 --> 00:37:49,076
from the extension

881
00:37:49,756 --> 00:37:52,596
And the app process handles

882
00:37:53,176 --> 00:37:54,846
So let's look at

883
00:37:54,846 --> 00:37:56,256
and this is just

884
00:37:56,396 --> 00:37:58,316
But we have the platter

885
00:37:58,416 --> 00:38:00,926
which has just the

886
00:37:58,416 --> 00:38:00,926
which has just the

887
00:38:02,146 --> 00:38:03,446
Then we also have the list name

888
00:38:03,446 --> 00:38:04,936
and so that's just

889
00:38:04,936 --> 00:38:06,806
of the company name,

890
00:38:07,146 --> 00:38:08,806
The change in points label,

891
00:38:08,886 --> 00:38:10,656
and that's just the

892
00:38:11,226 --> 00:38:13,746
And then we have the price

893
00:38:14,376 --> 00:38:15,886
So let's look and see

894
00:38:16,256 --> 00:38:18,096
When we would go to

895
00:38:18,126 --> 00:38:19,236
we had this update method

896
00:38:19,386 --> 00:38:21,266
and it would just take

897
00:38:21,266 --> 00:38:23,096
and it would set those

898
00:38:24,426 --> 00:38:27,976
Now that's bad because

899
00:38:28,256 --> 00:38:31,606
on the interface object

900
00:38:32,576 --> 00:38:36,366
And setting a property on

901
00:38:36,366 --> 00:38:39,136
to the app process every time,

902
00:38:39,136 --> 00:38:42,276
but I want to emphasize

903
00:38:42,606 --> 00:38:45,866
On average, in my profiling

904
00:38:45,866 --> 00:38:49,526
in Stocks it would take roughly

905
00:38:49,526 --> 00:38:52,526
to move from the extension

906
00:38:52,526 --> 00:38:56,186
And that doesn't really

907
00:38:57,256 --> 00:39:01,326
in some profiling, that I

908
00:38:57,256 --> 00:39:01,326
in some profiling, that I

909
00:39:01,996 --> 00:39:05,496
I saw a pretty staggering

910
00:39:05,786 --> 00:39:08,226
a worst case scenario

911
00:39:08,226 --> 00:39:09,476
of those messages to get sent

912
00:39:09,476 --> 00:39:12,296
over from the extension

913
00:39:13,146 --> 00:39:16,286
So it's a big difference.

914
00:39:16,806 --> 00:39:18,306
So what can we do to

915
00:39:19,306 --> 00:39:21,866
Really just cache those values

916
00:39:22,376 --> 00:39:26,936
and then only send them

917
00:39:27,006 --> 00:39:29,726
So let's do a little recap of

918
00:39:29,726 --> 00:39:33,036
We want to minimize the work

919
00:39:33,036 --> 00:39:35,546
and our didAppear, and

920
00:39:35,596 --> 00:39:37,956
of cancelable operations

921
00:39:38,426 --> 00:39:39,736
It's also important to note,

922
00:39:39,916 --> 00:39:42,676
that overly complicated user

923
00:39:42,676 --> 00:39:43,836
to lead to slower load times.

924
00:39:44,316 --> 00:39:46,476
So the more data that you're

925
00:39:46,476 --> 00:39:48,826
and update on the UI,

926
00:39:49,506 --> 00:39:52,456
And of course, we'll only want

927
00:39:52,456 --> 00:39:54,596
when necessary, so only

928
00:39:55,746 --> 00:39:59,256
So to summarize the Stocks

929
00:39:59,256 --> 00:40:01,736
like for you to take from

930
00:39:59,256 --> 00:40:01,736
like for you to take from

931
00:40:02,366 --> 00:40:05,016
Keep your tasks small

932
00:40:05,486 --> 00:40:09,526
You'll want to simplify your

933
00:40:09,526 --> 00:40:13,706
to make use of the new

934
00:40:13,876 --> 00:40:16,826
Focus on resume time in your

935
00:40:16,826 --> 00:40:19,166
to the WKInterfaceController

936
00:40:19,356 --> 00:40:20,936
especially willActivate

937
00:40:21,416 --> 00:40:24,386
And make use of our cancelable

938
00:40:25,006 --> 00:40:27,776
and optimize when updating

939
00:40:27,916 --> 00:40:29,376
by not sending redundant

940
00:40:30,146 --> 00:40:33,456
For more information, you can

941
00:40:33,456 --> 00:40:35,096
Our session number is 227.

942
00:40:35,576 --> 00:40:36,996
Some of the related sessions,

943
00:40:36,996 --> 00:40:38,466
unfortunately have

944
00:40:38,696 --> 00:40:40,926
but some of these I

945
00:40:40,926 --> 00:40:44,596
to not only WatchKit development

946
00:40:44,596 --> 00:40:48,576
on GCD in Swift 3, so that's

947
00:40:48,576 --> 00:40:51,646
So thank you and have a

948
00:40:52,516 --> 00:41:01,030
[ Applause ]
