1
00:00:00,506 --> 0:00:05,926
[音乐]

2
00:00:06,426 --> 0:00:08,396
&gt;&gt; 大家好我是 Sommer Panage 

3
00:00:08,396 --> 0:00:09,996
我是 Apple 辅助功能团队

4
00:00:09,996 --> 0:00:12,976
的工程经理

5
00:00:12,976 --> 0:00:15,486
接下来我将会谈及

6
00:00:15,486 --> 0:00:16,286
Large Content Viewer

7
00:00:16,566 --> 0:00:18,426
这一功能将帮助那些

8
00:00:18,426 --> 0:00:20,106
喜欢大号字体的用户

9
00:00:20,836 --> 0:00:22,456
在这次演讲中你将会学习到

10
00:00:22,456 --> 0:00:24,616
如何确保 App 内全部内容

11
00:00:24,616 --> 0:00:26,666
都能适于每个用户阅读的方法

12
00:00:28,216 --> 0:00:30,146
我们将首先概览一下

13
00:00:30,146 --> 0:00:32,856
Large Content Viewer 以及其为什么重要

14
00:00:33,626 --> 0:00:35,476
接下来我们将关注一些

15
00:00:35,916 --> 0:00:37,226
能够让你在你的 App 中

16
00:00:37,226 --> 0:00:38,016
使用这一功能的 API

17
00:00:38,876 --> 0:00:41,266
最后我们将查看在 App 中

18
00:00:41,266 --> 0:00:42,826
你可能会遇到的问题实例

19
00:00:42,826 --> 0:00:46,916
以及如何解决它们

20
00:00:47,176 --> 0:00:49,186
所以让我们先从一些背景说起

21
00:00:51,136 --> 0:00:52,906
在我们谈及 Large Content Viewer 前

22
00:00:52,906 --> 0:00:55,046
让我们先从动态类型

23
00:00:55,046 --> 0:00:57,206
这一相关话题开始

24
00:00:58,166 --> 0:01:00,366
动态类型是一个可以帮助你

25
00:00:58,166 --> 0:01:00,366
动态类型是一个可以帮助你

26
00:01:00,366 --> 0:01:03,506
定制系统内字体尺寸的功能

27
00:01:04,096 --> 0:01:05,946
当你想在屏幕上显示更多内容

28
00:01:05,946 --> 0:01:07,336
你可以将字体的尺寸调小

29
00:01:07,336 --> 0:01:09,486
这一功能也可以帮助你

30
00:01:09,486 --> 0:01:10,866
让屏幕上的字体变得更大更可读

31
00:01:11,246 --> 0:01:13,226
默认状态下你可以

32
00:01:13,226 --> 0:01:14,876
在七种不同的尺寸中选择

33
00:01:16,116 --> 0:01:17,666
但当你进入辅助功能设置后

34
00:01:17,666 --> 0:01:21,696
你可以启用更大的尺寸

35
00:01:21,696 --> 0:01:23,246
会有五个额外的尺寸供选择

36
00:01:24,026 --> 0:01:26,026
这是非常重要的

37
00:01:26,026 --> 0:01:27,426
使用这一功能的人并不只因为

38
00:01:27,426 --> 0:01:29,996
他们想要不同的字体尺寸

39
00:01:30,546 --> 0:01:31,806
他们这样做的原因是

40
00:01:31,806 --> 0:01:34,046
需要更大的字体尺寸

41
00:01:34,046 --> 0:01:37,226
来让自己的文本可读性更高

42
00:01:37,746 --> 0:01:39,216
接下来让我们来看一下

43
00:01:39,216 --> 0:01:40,716
动态类型是如何改变

44
00:01:40,716 --> 0:01:42,796
iOS 的显示行为的

45
00:01:43,016 --> 0:01:44,636
这里展示了手机 App 在默认字体

46
00:01:44,736 --> 0:01:46,286
尺寸下的显示效果

47
00:01:47,886 --> 0:01:49,906
如果我现在将字体设置为

48
00:01:49,906 --> 0:01:51,586
辅助功能设置中的其中一个尺寸

49
00:01:51,886 --> 0:01:53,376
文本的大小变大了许多

50
00:01:54,006 --> 0:01:55,816
但你也许注意到了

51
00:01:55,896 --> 0:01:57,606
文本在屏幕上占据的部分

52
00:01:57,746 --> 0:01:58,846
并没有变得更大

53
00:02:00,346 --> 0:02:04,536
比如可以看底部左侧的按钮

54
00:02:04,536 --> 0:02:06,046
如果顾客将尺寸

55
00:02:06,046 --> 0:02:08,175
调节到与我们在内容区域看到的

56
00:02:08,175 --> 0:02:10,045
尺寸一样大时

57
00:02:10,045 --> 0:02:11,946
他们不太可能看到

58
00:02:12,066 --> 0:02:13,326
我们在标签栏中看到的字体

59
00:02:13,426 --> 0:02:14,596
因为该尺寸还是太小

60
00:02:15,466 --> 0:02:17,216
你可能也不能直接把图标

61
00:02:17,216 --> 0:02:18,926
放在上面做补偿

62
00:02:19,606 --> 0:02:21,526
然而我们并不想调大标签栏

63
00:02:21,526 --> 0:02:22,946
因为这会使得

64
00:02:22,946 --> 0:02:24,286
留给显示主要内容

65
00:02:24,286 --> 0:02:26,376
的面积变得非常小

66
00:02:26,376 --> 0:02:27,876
就像这一例子中的联系人名单

67
00:02:28,396 --> 0:02:30,856
所以如果你想使用

68
00:02:30,886 --> 0:02:32,856
更大的文本尺寸

69
00:02:32,856 --> 0:02:34,536
我们允许你长按需要调节的按钮

70
00:02:34,536 --> 0:02:35,626
来获得更大的版本

71
00:02:36,096 --> 0:02:38,256
这是它的显示效果

72
00:02:38,746 --> 0:02:40,226
你可以用手指在底部栏拖动

73
00:02:40,226 --> 0:02:42,916
以获取这些按钮的内容

74
00:02:43,456 --> 0:02:44,716
当你将手指拖动到

75
00:02:44,716 --> 0:02:46,216
你想要点击的按钮上时

76
00:02:46,216 --> 0:02:48,366
只需要松开手指

77
00:02:48,626 --> 0:02:50,126
Apple 设备就会执行

78
00:02:50,126 --> 0:02:50,926
点按按钮的操作

79
00:02:51,616 --> 0:02:53,366
这就是我们称作

80
00:02:53,366 --> 0:02:54,576
Large Content Viewer 的功能

81
00:02:55,196 --> 0:02:57,046
这一功能允许视力不佳的用户

82
00:02:57,246 --> 0:02:59,396
可以方便的使用像是标签栏

83
00:02:59,626 --> 0:03:00,666
或是其他尺寸较小的 UI 

84
00:02:59,626 --> 0:03:00,666
或是其他尺寸较小的 UI 

85
00:03:01,566 --> 0:03:02,986
让你的 App 在合适的时候

86
00:03:02,986 --> 0:03:05,466
显示大功能内容查看器非常重要

87
00:03:06,206 --> 0:03:07,906
如果你使用标准的 UIKit 栏

88
00:03:07,906 --> 0:03:10,386
你就已经启用了 Large Content Viewer 功能

89
00:03:10,956 --> 0:03:12,226
在之前你可能没有注意到

90
00:03:12,226 --> 0:03:13,736
这是因为这一功能仅在

91
00:03:13,736 --> 0:03:15,316
辅助功能设置中的尺寸时

92
00:03:15,316 --> 0:03:16,296
才会体现出来

93
00:03:16,866 --> 0:03:18,896
但如果你使用自定义栏

94
00:03:19,276 --> 0:03:21,256
或者一些其他自定义的 UI

95
00:03:21,256 --> 0:03:22,926
并且他们的尺寸较小的话

96
00:03:22,926 --> 0:03:24,846
你可能需要在内部适配 API

97
00:03:24,846 --> 0:03:26,686
来使得你的 UI 功能

98
00:03:26,686 --> 0:03:28,326
与标准 UIKit 相符合

99
00:03:28,796 --> 0:03:30,596
需要注意的是

100
00:03:30,596 --> 0:03:32,636
这一功能只在你无法调大

101
00:03:32,636 --> 0:03:33,346
自定义 UI 时使用

102
00:03:34,736 --> 0:03:36,876
使用动态类型进行缩放时

103
00:03:36,926 --> 0:03:38,586
Large Content Viewer 功能

104
00:03:38,586 --> 0:03:39,616
将会被优先启用

105
00:03:40,186 --> 0:03:44,736
但有的时候我们的栏不能缩放

106
00:03:45,036 --> 0:03:46,956
让我们来看看如何在你的 App 中

107
00:03:46,956 --> 0:03:48,846
支持 Large Content Viewer

108
00:03:48,846 --> 0:03:51,226
这一功能

109
00:03:51,446 --> 0:03:53,446
早前我已经说明了

110
00:03:53,446 --> 0:03:54,806
如果你使用标准 UIKit 栏

111
00:03:54,916 --> 0:03:57,096
Large Content Viewer 功能就会开启

112
00:03:57,886 --> 0:03:59,406
但你可能还需要一些操作

113
00:03:59,406 --> 0:04:01,506
来确保界面的美观

114
00:03:59,406 --> 0:04:01,506
来确保界面的美观

115
00:04:02,736 --> 0:04:04,166
如果你的栏组件使用 PDF 图像

116
00:04:04,166 --> 0:04:06,606
确保你检查了素材目录中

117
00:04:06,706 --> 0:04:09,406
Preserve Vector 选择框

118
00:04:09,406 --> 0:04:11,306
处于启用状态

119
00:04:12,106 --> 0:04:13,466
这将确保你的图片

120
00:04:13,466 --> 0:04:15,836
顺畅地放大为更大的尺寸

121
00:04:16,435 --> 0:04:19,305
但如果你的图片按钮使用 PNG

122
00:04:19,305 --> 0:04:21,555
这样不具备矢量数据

123
00:04:21,555 --> 0:04:24,246
那在默认情况下

124
00:04:24,246 --> 0:04:25,716
图片在预览框中的显示

125
00:04:25,766 --> 0:04:27,616
就会变得模糊

126
00:04:28,316 --> 0:04:29,686
想要修复这一情况的话

127
00:04:29,686 --> 0:04:32,116
你需要提供更大尺寸的图像

128
00:04:33,366 --> 0:04:35,756
使用具有更放大尺寸

129
00:04:35,756 --> 0:04:38,616
性能的图像来建立 UI 栏项目

130
00:04:39,286 --> 0:04:41,006
如果你需要调整位置

131
00:04:41,006 --> 0:04:42,876
比如你想调节那些

132
00:04:42,876 --> 0:04:44,216
在预览器内看起来没有处于

133
00:04:44,216 --> 0:04:45,466
居中状态的图片位置时

134
00:04:45,466 --> 0:04:47,616
你可以调节选项中的

135
00:04:47,616 --> 0:04:50,506
大型内容图片尺寸

136
00:04:51,416 --> 0:04:53,516
那当你需要使用自定义 UI 的时候

137
00:04:53,516 --> 0:04:54,276
应该如何处理呢

138
00:04:55,166 --> 0:04:57,626
在 iOS 13 之前

139
00:04:57,626 --> 0:04:59,186
在 Large Content Viewer 中

140
00:04:59,186 --> 0:05:00,876
直接拖动即可

141
00:04:59,186 --> 0:05:00,876
直接拖动即可

142
00:05:01,416 --> 0:05:03,586
现在我们添加了一些 API

143
00:05:03,586 --> 0:05:05,346
让你可以得到与标准 UIKit 栏

144
00:05:05,446 --> 0:05:07,396
相同显示方法的 UI 

145
00:05:08,016 --> 0:05:09,556
当你在自定义状态栏时

146
00:05:09,556 --> 0:05:12,076
你首先需要做的事

147
00:05:12,076 --> 0:05:13,766
是将状态栏里的按钮

148
00:05:13,766 --> 0:05:16,126
指定为需要被显示的对象

149
00:05:17,046 --> 0:05:18,936
接着 Large Content Viewer 就会

150
00:05:18,936 --> 0:05:21,256
为每个指定的按钮请求

151
00:05:21,256 --> 0:05:22,436
标题或是图片信息

152
00:05:22,776 --> 0:05:24,706
如果你为这些按钮选定的是

153
00:05:24,706 --> 0:05:26,516
标准 UIKit 类型

154
00:05:26,516 --> 0:05:28,086
你将会直接得到这些信息

155
00:05:29,126 --> 0:05:31,006
最后你还需要为

156
00:05:31,006 --> 0:05:32,316
你自定义的状态栏

157
00:05:32,316 --> 0:05:33,596
设定手势交互方式

158
00:05:35,196 --> 0:05:38,276
全新的 UILargeContentViewerItem

159
00:05:38,276 --> 0:05:40,746
协议指定了 Large Content Viewer 

160
00:05:40,746 --> 0:05:44,026
显示你的内容所需要的信息

161
00:05:45,306 --> 0:05:47,006
而 ShowsLargeContentViewer 

162
00:05:47,006 --> 0:05:49,186
属性是你需要

163
00:05:49,186 --> 0:05:50,726
用来标记你的状态栏按钮的属性

164
00:05:51,136 --> 0:05:53,496
将需要在查看器中

165
00:05:53,496 --> 0:05:54,566
显示的按钮的该属性设置为“true”值

166
00:05:55,686 --> 0:05:57,206
接着你就可以指定

167
00:05:57,206 --> 0:05:59,456
largeContentTitle 属性

168
00:05:59,456 --> 0:06:00,626
和 largeContentImage 属性

169
00:05:59,456 --> 0:06:00,626
和 largeContentImage 属性

170
00:06:00,926 --> 0:06:02,576
你可以指定其中一项属性

171
00:06:02,876 --> 0:06:03,616
也可以指定两个属性

172
00:06:04,486 --> 0:06:07,226
如果你想要重复使用

173
00:06:07,226 --> 0:06:09,026
别的小图标上的 PDF 图片

174
00:06:09,026 --> 0:06:10,976
就将 scalesLargeContentImage

175
00:06:10,976 --> 0:06:11,966
属性设置为“true”值即可

176
00:06:12,656 --> 0:06:14,546
但正如我们早前在 UI 栏

177
00:06:14,546 --> 0:06:16,626
对象中所看到的一样

178
00:06:16,626 --> 0:06:19,186
你需要保存对应图像的矢量数据

179
00:06:19,696 --> 0:06:21,566
最后如果你想要居中图像

180
00:06:21,566 --> 0:06:23,096
你可以使用属性中的

181
00:06:23,096 --> 0:06:25,116
largeContentImageInsets 选项

182
00:06:27,216 --> 0:06:29,226
UIView 中已经预置了该协议

183
00:06:29,226 --> 0:06:31,756
并且提供了对齐标志

184
00:06:31,996 --> 0:06:34,116
所以在很多情况下

185
00:06:34,116 --> 0:06:35,656
你可以使用设置属性而不是

186
00:06:35,656 --> 0:06:37,396
建立子类来覆盖的方法

187
00:06:38,296 --> 0:06:39,966
正如我们之前提到的是

188
00:06:40,306 --> 0:06:42,256
确定的 UIKit 类

189
00:06:42,256 --> 0:06:44,376
像是 UI 按钮及标签

190
00:06:44,376 --> 0:06:47,126
将会返回其标题和图像的默认值

191
00:06:47,636 --> 0:06:50,416
那就是你注释标签栏中

192
00:06:50,416 --> 0:06:51,586
按钮的方法

193
00:06:52,496 --> 0:06:54,166
接下来你还需要增加

194
00:06:54,166 --> 0:06:56,446
标签栏本身的手势交互

195
00:06:56,806 --> 0:06:58,756
增加交互方式的方法是

196
00:06:58,756 --> 0:07:00,716
使用支持添加

197
00:06:58,756 --> 0:07:00,716
使用支持添加

198
00:07:00,846 --> 0:07:02,456
拖拽及丢弃指令

199
00:07:02,526 --> 0:07:03,556
相同的 addInteraction 方法

200
00:07:03,856 --> 0:07:06,906
这里展示了 Large Content Viewer 

201
00:07:06,906 --> 0:07:08,526
是如何实现交互的方法

202
00:07:08,846 --> 0:07:10,806
这里面有一些属性

203
00:07:11,276 --> 0:07:12,896
在一个简易的情况下

204
00:07:12,896 --> 0:07:14,356
你可以创建一个没有变元的实例

205
00:07:14,356 --> 0:07:15,936
并且不需要更改任何其他属性

206
00:07:16,156 --> 0:07:18,896
即可创建一个交互方法

207
00:07:19,416 --> 0:07:21,426
但如果你的 App 有任何其他的

208
00:07:21,426 --> 0:07:23,206
手势识别方法的话

209
00:07:23,206 --> 0:07:24,706
你可能需要调整其行为

210
00:07:25,866 --> 0:07:27,676
你可以为它提供委托

211
00:07:27,676 --> 0:07:30,306
来得到替代它的粒度控制

212
00:07:31,156 --> 0:07:32,396
你也可以利用

213
00:07:32,396 --> 0:07:34,516
gestureRecognizer 属性

214
00:07:34,516 --> 0:07:36,246
来设置与 App 内

215
00:07:36,246 --> 0:07:38,546
其他手势识别方法的关联

216
00:07:39,206 --> 0:07:41,806
最后如果你要检查

217
00:07:41,806 --> 0:07:43,606
是否开启了 Large Content Viewer

218
00:07:43,936 --> 0:07:46,006
你可以检查 isEnabled 属性

219
00:07:46,536 --> 0:07:48,096
当然你可以通过关注通知

220
00:07:48,096 --> 0:07:50,536
来查看其变化

221
00:07:52,356 --> 0:07:53,836
这里有一些使用委托

222
00:07:53,836 --> 0:07:56,136
来定制其行为的方式

223
00:07:57,836 --> 0:08:00,026
首先你可以指定

224
00:07:57,836 --> 0:08:00,026
首先你可以指定

225
00:08:00,026 --> 0:08:01,616
用户将手指从部件上移开时

226
00:08:01,616 --> 0:08:03,756
视图中要进行的操作

227
00:08:04,146 --> 0:08:06,206
这一操作应该在用户

228
00:08:06,206 --> 0:08:07,176
点击对应部件时完成

229
00:08:07,826 --> 0:08:08,956
如果你不采用这一方法

230
00:08:08,956 --> 0:08:10,436
并且使用例如 UI 按钮的

231
00:08:10,436 --> 0:08:12,326
标准 UI 控制方式

232
00:08:12,326 --> 0:08:14,376
默认情况下这里的操作将会是

233
00:08:14,376 --> 0:08:16,306
发起一个内部弹起的事件

234
00:08:16,926 --> 0:08:18,556
但如果你在这里进行

235
00:08:18,556 --> 0:08:21,086
更多的自定义设置

236
00:08:21,086 --> 0:08:22,376
比如其自带的点击弹出视图

237
00:08:22,376 --> 0:08:24,136
你也可以采用这种方法

238
00:08:24,136 --> 0:08:26,376
来实现你想要执行的行为

239
00:08:27,206 --> 0:08:29,316
接下来介绍对

240
00:08:29,316 --> 0:08:31,426
对象中特定坐标进行设定的选项

241
00:08:31,946 --> 0:08:33,706
默认情况下对象

242
00:08:33,706 --> 0:08:35,366
通过在视图层次结构上

243
00:08:35,366 --> 0:08:37,236
递归调用事件内部的点

244
00:08:37,236 --> 0:08:38,106
的方式被查询到

245
00:08:38,765 --> 0:08:40,836
但如果你没有使用视图的话

246
00:08:40,876 --> 0:08:42,496
这个方法就可能无效

247
00:08:42,986 --> 0:08:45,356
所以这个方法让你

248
00:08:45,356 --> 0:08:47,136
返回到特定点

249
00:08:47,136 --> 0:08:48,816
所对应显示的对象

250
00:08:50,016 --> 0:08:52,346
最后你应该决定该由

251
00:08:52,346 --> 0:08:53,836
哪个 viewController 来控制

252
00:08:53,836 --> 0:08:54,916
Large Content Viewer 这一功能

253
00:08:55,456 --> 0:08:57,446
默认情况下 UIKit 将会尝试

254
00:08:57,446 --> 0:08:58,956
选取一个你添加到

255
00:08:58,956 --> 0:09:01,556
视图中的 viewController 交互

256
00:08:58,956 --> 0:09:01,556
视图中的 viewController 交互

257
00:09:02,406 --> 0:09:03,796
但如果该默认设置

258
00:09:03,796 --> 0:09:05,166
在你的 App 上没有很好地工作

259
00:09:05,326 --> 0:09:06,536
你可以在这里指定你想要的

260
00:09:08,556 --> 0:09:10,236
至此我们讲解了 API 的内容

261
00:09:11,026 --> 0:09:12,616
现在让我们来看看一些

262
00:09:12,616 --> 0:09:14,206
说明其如何使用的例子

263
00:09:15,776 --> 0:09:18,136
让我们先从一个简单的例子说起

264
00:09:18,616 --> 0:09:20,446
你已经构建了一个自定义栏

265
00:09:20,446 --> 0:09:22,606
但在栏内你是用的是

266
00:09:22,606 --> 0:09:23,056
标准 UIKit 视图

267
00:09:23,426 --> 0:09:25,546
这里我们有一个带有

268
00:09:25,546 --> 0:09:27,096
UI 按钮和 UI 图标的栏

269
00:09:28,816 --> 0:09:30,446
因为我们使用标准视图

270
00:09:30,446 --> 0:09:32,856
我们需要做的是使用

271
00:09:32,856 --> 0:09:35,006
showsLargeContentViewer 属性

272
00:09:35,316 --> 0:09:37,786
来设定按钮和标签

273
00:09:38,166 --> 0:09:39,876
在这里不需要设置标题或是图片

274
00:09:39,876 --> 0:09:42,076
因为这些内容可以

275
00:09:42,076 --> 0:09:44,406
从属性页面中找到

276
00:09:45,336 --> 0:09:47,166
最后我们可以在不设定

277
00:09:47,166 --> 0:09:48,646
任何属性的情况下对自定义栏

278
00:09:48,906 --> 0:09:50,956
添加需要的手势交互

279
00:09:51,296 --> 0:09:52,296
这就可以了

280
00:09:53,556 --> 0:09:55,246
如果你的自定义栏除了

281
00:09:55,246 --> 0:09:56,806
按钮之外还使用别的组件

282
00:09:57,106 --> 0:09:59,076
你可能需要别的一些 API

283
00:09:59,826 --> 0:10:01,696
我们先把你的按钮称为

284
00:09:59,826 --> 0:10:01,696
我们先把你的按钮称为

285
00:10:01,696 --> 0:10:04,786
MyButton 的自定义实例类

286
00:10:05,326 --> 0:10:08,406
你可以覆盖原有的

287
00:10:08,406 --> 0:10:10,086
Large Content Viewer 组件属性

288
00:10:10,176 --> 0:10:12,366
来返回你所需要的结果

289
00:10:13,136 --> 0:10:15,166
在这里我们将 

290
00:10:15,166 --> 0:10:17,596
的返回值设置为“true”

291
00:10:17,736 --> 0:10:19,236
将标题属性的返回值设置为

292
00:10:19,236 --> 0:10:19,606
我们的文字

293
00:10:21,116 --> 0:10:23,226
如果你的每个按钮图片

294
00:10:23,226 --> 0:10:25,466
都有原始的矢量数据

295
00:10:25,466 --> 0:10:27,186
你可以将数据指定为 Large Content Viewer

296
00:10:27,186 --> 0:10:28,406
要显示的图像数据

297
00:10:29,266 --> 0:10:31,006
只要确保 scalesLargeContentImage

298
00:10:31,006 --> 0:10:33,406
的返回值为“true”

299
00:10:33,406 --> 0:10:35,226
就可以让图像放大到正确尺寸

300
00:10:36,656 --> 0:10:38,666
最后让我们来看

301
00:10:38,666 --> 0:10:40,436
当你想要使用另外的手势识别时

302
00:10:40,436 --> 0:10:42,036
应该如何处理的实例

303
00:10:42,036 --> 0:10:44,436
在 Apple 的 Safari 浏览器 App 中

304
00:10:44,436 --> 0:10:46,126
有这么一个经典例子

305
00:10:46,866 --> 0:10:48,366
当你轻击返回按钮时

306
00:10:48,596 --> 0:10:50,326
它会回到之前的页面

307
00:10:50,826 --> 0:10:52,356
但如果你长按返回按钮

308
00:10:52,716 --> 0:10:54,156
这一操作会打开

309
00:10:54,156 --> 0:10:55,396
查看浏览历史记录的页面

310
00:10:56,166 --> 0:10:57,956
Large Content Viewer 也可以

311
00:10:57,956 --> 0:10:59,436
利用长按手势来启用

312
00:11:00,056 --> 0:11:04,136
所以你应该如何使其同时工作

313
00:11:04,436 --> 0:11:06,936
你绝对应该让两者同时生效

314
00:11:07,546 --> 0:11:09,436
换种说法就是

315
00:11:09,436 --> 0:11:11,266
让 Large Content Viewer 生效

316
00:11:11,266 --> 0:11:12,876
来让用户知道按钮具有什么功能

317
00:11:13,486 --> 0:11:15,216
而当用户查看了这些功能之后

318
00:11:15,216 --> 0:11:17,006
此前长按按钮进行的操作

319
00:11:17,006 --> 0:11:18,586
依旧可以被唤醒

320
00:11:19,606 --> 0:11:21,386
要实现这一功能

321
00:11:21,386 --> 0:11:22,786
首先需要增加已有 longPressRecognizer

322
00:11:22,846 --> 0:11:24,866
属性的持续时间

323
00:11:25,466 --> 0:11:26,916
这样我们就在执行后续操作前

324
00:11:26,916 --> 0:11:28,576
给了用户额外的时间来查看

325
00:11:28,576 --> 0:11:31,106
Large Content Viewer 显示的内容

326
00:11:31,766 --> 0:11:34,036
你还应该确保持续时间

327
00:11:34,036 --> 0:11:35,586
在用户更改设置后

328
00:11:35,586 --> 0:11:36,566
进行更新

329
00:11:37,116 --> 0:11:39,026
如果它们开始或者停止使用

330
00:11:39,026 --> 0:11:40,766
辅助功能设置中的字体尺寸

331
00:11:41,076 --> 0:11:43,056
那么持续时间也应该更新

332
00:11:44,306 --> 0:11:45,676
接下来我们需要设置

333
00:11:45,676 --> 0:11:47,926
UIGestureRecognizer 委托

334
00:11:47,926 --> 0:11:48,706
给已有的

335
00:11:48,766 --> 0:11:49,886
longPressRecognizer 属性

336
00:11:51,366 --> 0:11:53,406
之后在你的委托回调里

337
00:11:53,766 --> 0:11:55,386
你就能确保

338
00:11:55,386 --> 0:11:55,966
已有的 longPressRecognizer

339
00:11:55,966 --> 0:11:58,106
和 gestureRecognizer 两个属性

340
00:11:58,106 --> 0:11:59,576
可以同时被

341
00:11:59,576 --> 0:12:02,216
Large Content Viewer 识别出来

342
00:11:59,576 --> 0:12:02,216
Large Content Viewer 识别出来

343
00:12:02,466 --> 0:12:04,446
这样二者之间就不会

344
00:12:04,526 --> 0:12:06,156
导致另一个功能不工作了

345
00:12:07,456 --> 0:12:09,476
在这里我们可以看到

346
00:12:09,476 --> 0:12:10,976
在实施了 Large Content Viewer 之后

347
00:12:11,036 --> 0:12:11,866
我们的程序是如何表现的

348
00:12:12,606 --> 0:12:14,576
如果在 Large Content Viewer 显示期间

349
00:12:14,576 --> 0:12:16,156
我将手指松开

350
00:12:16,286 --> 0:12:17,806
就可以进行返回操作

351
00:12:18,336 --> 0:12:19,936
而当我长按一段时间之后

352
00:12:19,936 --> 0:12:21,676
我依旧能够进入

353
00:12:21,676 --> 0:12:22,746
浏览历史记录的页面

354
00:12:23,286 --> 0:12:25,836
这就是如何让你的 App

355
00:12:25,836 --> 0:12:27,306
适应那些喜欢大尺寸字体人群

356
00:12:27,306 --> 0:12:29,426
但 UI 元素又需要保持

357
00:12:29,656 --> 0:12:30,886
较小尺寸的方法

358
00:12:30,886 --> 0:12:33,176
要注意的是你只能在

359
00:12:33,176 --> 0:12:35,066
UI 元素无法缩放的时候

360
00:12:35,236 --> 0:12:36,136
使用 Large Content Viewer 功能

361
00:12:36,836 --> 0:12:38,436
为动态类型进行缩放

362
00:12:38,436 --> 0:12:39,846
总会是更好的选择

363
00:12:40,146 --> 0:12:41,936
所以如果你能使用这一功能的话

364
00:12:41,936 --> 0:12:42,386
不要将 Large Content Viewer 作为 API 使用

365
00:12:43,396 --> 0:12:45,696
最后如果你的自定义视图

366
00:12:45,696 --> 0:12:47,516
还有别的交互方式的话

367
00:12:47,656 --> 0:12:48,676
这些自定义视图

368
00:12:48,676 --> 0:12:50,656
对于使用 Large Content Viewer 的用户

369
00:12:50,656 --> 0:12:51,606
依旧可以生效

370
00:12:52,206 --> 0:12:54,026
用这样的方法所有人都能够使用

371
00:12:54,026 --> 0:12:55,516
你的 App 的这些功能了

372
00:12:55,966 --> 0:12:56,836
这就是我要说的全部内容

373
00:12:57,156 --> 0:12:57,966
感谢观看
