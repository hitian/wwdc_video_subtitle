1
00:00:06,039 --> 0:00:09,910
（掌握Xcode预览）

2
00:00:13,881 --> 0:00:17,684
各位下午好 欢迎来到

3
00:00:18,051 --> 0:00:22,155
这周你可能在许多地方

4
00:00:22,222 --> 0:00:24,224
主题演讲 国情咨文

5
00:00:24,291 --> 0:00:26,493
还有一些关于SwiftUI

6
00:00:26,860 --> 0:00:30,163
但今天 我们关注的是

7
00:00:30,964 --> 0:00:32,031
我叫Anton

8
00:00:32,098 --> 0:00:34,268
待会我会与

9
00:00:34,334 --> 0:00:37,337
我的同事Nate一起介绍

10
00:00:37,404 --> 0:00:38,305
它是如何运作的

11
00:00:38,372 --> 0:00:40,641
以及在你的工作中

12
00:00:40,707 --> 0:00:41,742
如何运用

13
00:00:41,808 --> 0:00:44,711
无论你是用SwiftUI

14
00:00:45,078 --> 0:00:48,015
或是用UIKit或AppKit

15
00:00:48,849 --> 0:00:50,751
让我先说一个小故事

16
00:00:52,052 --> 0:00:55,255
一位设计师拿着他为你的

17
00:00:55,322 --> 0:00:58,892
迪士尼app设计的界面样板找到你

18
00:00:59,193 --> 0:01:01,428
你拿到样板 拿回办公室

19
00:00:59,193 --> 0:01:01,428
你拿到样板 拿回办公室

20
00:01:01,495 --> 0:01:02,796
开始创建

21
00:01:03,197 --> 0:01:05,999
完成后再拿给设计师看

22
00:01:06,600 --> 0:01:07,901
你运行代码

23
00:01:08,168 --> 0:01:10,904
浏览之前做好的许多见面

24
00:01:10,971 --> 0:01:11,972
找到这个界面

25
00:01:12,272 --> 0:01:13,740
然后把该界面给设计师看

26
00:01:14,708 --> 0:01:16,710
看起来不错 但是

27
00:01:17,578 --> 0:01:19,246
我现在看这个做好的界面

28
00:01:19,713 --> 0:01:22,449
我觉得这个按钮可以再蓝一点

29
00:01:23,250 --> 0:01:24,251
没问题

30
00:01:24,318 --> 0:01:27,454
你退出app 打开Xcode

31
00:01:28,422 --> 0:01:29,289
然后再次运行

32
00:01:29,356 --> 0:01:31,358
再从一堆界面中

33
00:01:31,425 --> 0:01:32,726
找到刚刚创建的新界面

34
00:01:32,793 --> 0:01:34,127
拿给设计师看

35
00:01:34,695 --> 0:01:35,529
他们又说

36
00:01:36,129 --> 0:01:38,599
好多了 但是

37
00:01:39,833 --> 0:01:41,535
文字部分我觉得可以

38
00:01:41,802 --> 0:01:43,604
可以再紧凑一点 你觉得呢

39
00:01:44,538 --> 0:01:46,039
你应该知道这个故事是什么意思

40
00:01:46,106 --> 0:01:49,943
这种弄来弄去的反复

41
00:01:50,410 --> 0:01:51,645
我们每个人都经历过

42
00:01:51,712 --> 0:01:54,481
这也是我们创建好看的app的方式

43
00:01:54,748 --> 0:01:58,218
但是这就消耗太多时间了

44
00:01:58,285 --> 0:02:01,755
而且浪费时间的也不是反复的过程

45
00:01:58,285 --> 0:02:01,755
而且浪费时间的也不是反复的过程

46
00:02:01,822 --> 0:02:04,191
不是这里小改一下 那里小弄一下

47
00:02:04,258 --> 0:02:05,859
也不是得到反馈的过程

48
00:02:06,126 --> 0:02:09,562
而是创建 运行 配置 浏览

49
00:02:09,630 --> 0:02:13,400
再验证你刚刚对app

50
00:02:13,467 --> 0:02:16,103
做出的那些更改是否达到预期效果

51
00:02:17,804 --> 0:02:18,639
所以

52
00:02:19,540 --> 0:02:20,741
我再举一个例子

53
00:02:22,309 --> 0:02:25,546
你和设计师交流结束

54
00:02:25,612 --> 0:02:29,249
你对新界面也很满意

55
00:02:29,550 --> 0:02:30,684
你把它拿回去

56
00:02:30,984 --> 0:02:35,155
但是你作为开发者的工作还没有结束

57
00:02:35,222 --> 0:02:39,459
因为作为开发者

58
00:02:39,526 --> 0:02:40,360
然后

59
00:02:40,928 --> 0:02:43,297
正常运作的意思是

60
00:02:43,964 --> 0:02:46,600
不管用户在什么样的

61
00:02:46,667 --> 0:02:47,935
新界面看起来都要很好

62
00:02:48,202 --> 0:02:52,072
比如 在深色模式下要好看

63
00:02:53,907 --> 0:02:57,044
或者是在不同动态大小

64
00:02:58,612 --> 0:03:01,014
甚至是不同设备上都要好看

65
00:02:58,612 --> 0:03:01,014
甚至是不同设备上都要好看

66
00:03:02,316 --> 0:03:06,486
而且验证你的UI和app

67
00:03:06,553 --> 0:03:10,157
在不同的情况下看起来都一样好

68
00:03:10,457 --> 0:03:12,626
还是有一定难度的

69
00:03:12,693 --> 0:03:15,996
之后还要将你的app

70
00:03:16,363 --> 0:03:19,800
作为开发者这个过程我们都很熟悉了

71
00:03:20,734 --> 0:03:23,136
我们Xcode团队也一直在

72
00:03:23,203 --> 0:03:24,004
思考这个问题

73
00:03:24,471 --> 0:03:25,973
我们得出了解决方案

74
00:03:26,673 --> 0:03:28,041
那就是Xcode预览

75
00:03:28,108 --> 0:03:31,345
Xcode预览是

76
00:03:33,881 --> 0:03:36,216
该功能可以大大减少

77
00:03:36,283 --> 0:03:38,385
构建 运行和配置视图

78
00:03:38,752 --> 0:03:40,654
以验证所做改变的时间

79
00:03:40,721 --> 0:03:44,892
让你能够专注于你真正想做的事情

80
00:03:44,958 --> 0:03:47,094
那就是创建好app

81
00:03:48,962 --> 0:03:52,065
但问题是怎么做

82
00:03:53,000 --> 0:03:55,669
那么你在app中启用预览时

83
00:03:55,736 --> 0:03:58,906
Xcode会以一种

84
00:04:00,240 --> 0:04:03,210
Xcode知道

85
00:04:03,277 --> 0:04:05,546
你正在处理的是哪个视图和哪个文件

86
00:04:05,612 --> 0:04:08,115
它就只会编译该文件

87
00:04:08,182 --> 0:04:11,218
和该视图 与app中的

88
00:04:12,119 --> 0:04:16,456
然后使用Swift的动态替换功能

89
00:04:16,523 --> 0:04:19,059
将该实现应用于app

90
00:04:20,226 --> 0:04:21,394
因为这些代码

91
00:04:21,461 --> 0:04:23,230
对于每次更改进行重新编译

92
00:04:23,297 --> 0:04:27,534
比重新编译整个app

93
00:04:27,601 --> 0:04:31,738
Xcode可以针对你所做的

94
00:04:32,573 --> 0:04:37,611
也就是说对更改进行的反馈会更快

95
00:04:38,412 --> 0:04:42,816
但是这些变化Xcode

96
00:04:43,217 --> 0:04:46,587
对于仅涉及字面值

97
00:04:46,653 --> 0:04:50,190
Xcode不会做出重新编译

98
00:04:52,226 --> 0:04:55,295
只会将新值传入正在运行的app中

99
00:04:55,629 --> 0:04:57,397
你就可以获得即时反馈

100
00:04:57,664 --> 0:05:00,267
就像可视化编辑工具那样

101
00:04:57,664 --> 0:05:00,267
就像可视化编辑工具那样

102
00:05:02,870 --> 0:05:05,072
还有更为重要的一点是

103
00:05:06,573 --> 0:05:09,276
Xcode预览并不代表

104
00:05:09,343 --> 0:05:12,112
Xcode在运行app时

105
00:05:12,179 --> 0:05:13,714
所见的视图

106
00:05:14,114 --> 0:05:17,217
它实际上会构建和运行代码

107
00:05:18,619 --> 0:05:21,722
所以在你运行app时可用的上下文

108
00:05:21,788 --> 0:05:25,459
在预览视图中也可用

109
00:05:25,526 --> 0:05:26,927
所以如果你有自定义资产

110
00:05:27,327 --> 0:05:29,530
你就可以在预览中使用并进行渲染

111
00:05:29,596 --> 0:05:32,766
如果你想要在app中

112
00:05:32,833 --> 0:05:35,903
当然每款app都有自定义逻辑

113
00:05:36,203 --> 0:05:37,337
你也同样可以使用

114
00:05:37,404 --> 0:05:41,742
甚至是运行配置

115
00:05:41,808 --> 0:05:44,111
在预览视图下同样可以使用

116
00:05:45,812 --> 0:05:50,450
所以现在的问题是

117
00:05:52,786 --> 0:05:54,154
其实

118
00:05:54,688 --> 0:05:55,923
告诉Xcode

119
00:05:56,490 --> 0:05:59,026
要显示什么视图以及如何进行配置

120
00:05:59,092 --> 0:06:00,227
只需要几行代码

121
00:05:59,092 --> 0:06:00,227
只需要几行代码

122
00:06:01,028 --> 0:06:04,598
你需要做的就是实现一个

123
00:06:04,665 --> 0:06:06,900
符合PreviewProvider

124
00:06:07,234 --> 0:06:09,536
这也是SwiftUI框架的一部分

125
00:06:10,003 --> 0:06:11,805
这部分有一个要求

126
00:06:11,872 --> 0:06:14,274
就是你实现的预览属性

127
00:06:14,775 --> 0:06:15,876
之后就会返回一些内容

128
00:06:15,943 --> 0:06:18,378
而你得到的返回

129
00:06:19,213 --> 0:06:20,848
都是取决于你

130
00:06:22,649 --> 0:06:26,687
因为这些代码也是你app的一部分

131
00:06:26,753 --> 0:06:29,489
它与app中的其他部分一起编译的

132
00:06:29,823 --> 0:06:34,194
配置代码也是一样的道理

133
00:06:34,261 --> 0:06:35,162
和视图一样

134
00:06:35,229 --> 0:06:38,265
所以在这里你可以使用自定义逻辑

135
00:06:38,332 --> 0:06:42,302
自定义资源甚至运行配置

136
00:06:42,870 --> 0:06:46,440
运用代码来配置视图

137
00:06:46,507 --> 0:06:48,375
还有许多好处

138
00:06:49,009 --> 0:06:51,578
比如 这是SwiftUI代码

139
00:06:51,645 --> 0:06:53,280
配置代码只是SwiftUI

140
00:06:53,347 --> 0:06:55,816
如果你知道如何

141
00:06:55,883 --> 0:06:59,753
那么你就知道如何配置该视图

142
00:07:01,421 --> 0:07:03,624
你也可以先写一个预览

143
00:07:03,991 --> 0:07:06,059
将它放在源代码管理中

144
00:07:06,126 --> 0:07:09,963
这样你团队都可以从

145
00:07:11,131 --> 0:07:14,334
最后 因为你的变更

146
00:07:14,401 --> 0:07:15,769
app也在不断变化

147
00:07:15,836 --> 0:07:20,707
当视图或是它的API变化时

148
00:07:20,774 --> 0:07:23,143
预览与视图保持同步

149
00:07:23,210 --> 0:07:24,044
这样

150
00:07:24,545 --> 0:07:26,780
你就知道你预览的内容是正确的

151
00:07:28,916 --> 0:07:32,619
所以这就是预览运作方式的简要介绍

152
00:07:33,187 --> 0:07:35,689
接下来就讲讲如何配置预览

153
00:07:35,756 --> 0:07:38,859
来充分利用预览的优势

154
00:07:48,702 --> 0:07:50,604
Anton刚才说到预览其实是代码

155
00:07:51,271 --> 0:07:52,773
现在我就来说说怎么写这个代码

156
00:07:54,408 --> 0:07:58,178
我们Xcode预览团队

157
00:08:00,447 --> 0:08:01,849
动物园里有很多动物

158
00:08:01,915 --> 0:08:04,518
我们想确保我们看到了每一个动物

159
00:08:05,619 --> 0:08:07,521
作为开发者

160
00:08:07,588 --> 0:08:10,257
我们实在忍不住想要创建一个app

161
00:08:10,624 --> 0:08:12,292
来追踪动物园里的动物

162
00:08:13,961 --> 0:08:15,729
我就担起了做这个app的任务

163
00:08:16,096 --> 0:08:18,732
它的主要用户界面

164
00:08:19,566 --> 0:08:21,134
就是动物园里的动物清单列表

165
00:08:21,768 --> 0:08:25,339
在该列表中有每个动物名称

166
00:08:27,641 --> 0:08:29,276
我来给你们看看现在我做到哪了

167
00:08:32,913 --> 0:08:36,383
在画布中 你可以看到动物的预览

168
00:08:37,851 --> 0:08:41,121
因为iPhone 10S的

169
00:08:41,188 --> 0:08:43,724
我们在动物视图看到的

170
00:08:44,858 --> 0:08:49,129
但是我们想让该视图

171
00:08:49,196 --> 0:08:52,099
我的手机是iPhone SE

172
00:08:52,833 --> 0:08:56,470
我可以将运行目的地

173
00:08:56,537 --> 0:08:59,439
但预览API还提供另一种机制

174
00:08:59,806 --> 0:09:02,176
准确来说是预览设备

175
00:08:59,806 --> 0:09:02,176
准确来说是预览设备

176
00:09:04,211 --> 0:09:06,246
你可以将想要显示预览的

177
00:09:06,313 --> 0:09:07,581
设备名称输入该机制

178
00:09:08,215 --> 0:09:13,220
几乎同一时间 你就可以在画布上

179
00:09:14,354 --> 0:09:18,292
现在我再看看设备

180
00:09:18,358 --> 0:09:19,493
我发现了一个问题

181
00:09:19,826 --> 0:09:21,929
最右边的文本被截断了

182
00:09:22,963 --> 0:09:24,131
我们来解决这个问题

183
00:09:24,665 --> 0:09:27,801
为此 我将HStack

184
00:09:29,169 --> 0:09:33,540
画布马上就更新了

185
00:09:34,908 --> 0:09:37,511
Anton的手机是

186
00:09:37,578 --> 0:09:40,280
我们想要确保该动物名称

187
00:09:40,347 --> 0:09:43,617
我们可以改变我们传递给

188
00:09:44,151 --> 0:09:45,285
但是方法更简单

189
00:09:45,686 --> 0:09:49,022
具体来说 我们可以将此视图

190
00:09:49,423 --> 0:09:54,228
按住Command键并单击

191
00:09:54,928 --> 0:09:58,765
之后添加动物名称图的第二个实例

192
00:09:59,032 --> 0:10:03,103
这次我们用iPhone 10r

193
00:09:59,032 --> 0:10:03,103
这次我们用iPhone 10r

194
00:10:04,638 --> 0:10:06,173
我们可以看到 在画布中

195
00:10:06,607 --> 0:10:09,176
该视图在两个设备中运行

196
00:10:10,444 --> 0:10:13,247
动物的学名一般是用斜体写的

197
00:10:13,680 --> 0:10:15,649
我们现在就来更改

198
00:10:19,853 --> 0:10:23,423
现在画布中

199
00:10:23,690 --> 0:10:25,192
两台设备都可以

200
00:10:25,259 --> 0:10:26,527
真的太简单了

201
00:10:33,767 --> 0:10:37,004
我们可以看到在用户使用的设备上

202
00:10:37,070 --> 0:10:38,705
我们的界面预览

203
00:10:39,072 --> 0:10:40,674
对于像格子这样的小视图

204
00:10:40,741 --> 0:10:44,845
也能让你更加专注于你想要的东西

205
00:10:45,179 --> 0:10:47,414
摆脱多余的chrome

206
00:10:48,148 --> 0:10:50,584
为此 预览API提供了这个方法

207
00:10:50,651 --> 0:10:51,718
预览布局

208
00:10:52,653 --> 0:10:54,154
现在这个预览布局方法

209
00:10:55,222 --> 0:10:56,957
可以传递三个不同的参数

210
00:10:57,457 --> 0:10:59,993
首先你可以指定设备

211
00:11:00,060 --> 0:11:01,929
这实际上是默认使用的

212
00:11:01,995 --> 0:11:04,097
也就是现在画布上的内容

213
00:11:04,531 --> 0:11:05,365
然后

214
00:11:06,133 --> 0:11:08,168
你可以指定

215
00:11:08,235 --> 0:11:09,970
预览显示的大小

216
00:11:10,037 --> 0:11:12,105
如果你要将你的视图

217
00:11:12,172 --> 0:11:15,642
嵌入到特定大小的更大的界面上

218
00:11:15,943 --> 0:11:18,612
最后你可以使用适合大小功能

219
00:11:18,912 --> 0:11:23,317
如果你希望视图可以根据内容

220
00:11:23,383 --> 0:11:25,919
确定预览大小 那该功能十分有用

221
00:11:26,220 --> 0:11:28,722
因为动物名称单元格

222
00:11:29,122 --> 0:11:33,894
该列表允许动物单元格

223
00:11:34,428 --> 0:11:37,197
根据其内容垂直调整大小

224
00:11:37,264 --> 0:11:39,132
我们来使用适合大小功能

225
00:11:41,535 --> 0:11:45,105
画布马上进行更新

226
00:11:46,573 --> 0:11:49,009
我现在点击画布右下方按钮

227
00:11:49,076 --> 0:11:50,410
来将视图放大

228
00:11:51,945 --> 0:11:54,047
这两个文本

229
00:11:54,548 --> 0:11:56,884
红狐和它下面的所述科

230
00:11:56,950 --> 0:11:57,784
犬类

231
00:11:58,986 --> 0:12:01,054
有点太模糊了

232
00:11:58,986 --> 0:12:01,054
有点太模糊了

233
00:12:01,421 --> 0:12:04,057
我希望它们看起来是清晰可见的

234
00:12:04,124 --> 0:12:06,827
所以我要将红狐加粗

235
00:12:07,394 --> 0:12:09,696
我对该文本点击Command

236
00:12:10,330 --> 0:12:12,165
向下滚动到检验操作

237
00:12:12,633 --> 0:12:14,868
将字体加粗

238
00:12:17,137 --> 0:12:19,640
源编辑器添加了新代码

239
00:12:20,007 --> 0:12:22,309
预览也进行了相应的更新

240
00:12:23,110 --> 0:12:23,944
看起来不错

241
00:12:25,445 --> 0:12:29,249
很多用户喜欢用动态字体大小

242
00:12:29,583 --> 0:12:32,286
我们来看看当用户将字体

243
00:12:32,586 --> 0:12:36,490
调到最大的时候

244
00:12:37,491 --> 0:12:40,861
因为预览API是

245
00:12:41,128 --> 0:12:45,098
我们在写预览的时候

246
00:12:45,165 --> 0:12:48,769
在这种情况下

247
00:12:50,237 --> 0:12:53,240
并将字体类别键径值

248
00:12:53,307 --> 0:12:54,408
调到最大

249
00:12:56,109 --> 0:13:00,013
这样就能轻松改变

250
00:12:56,109 --> 0:13:00,013
这样就能轻松改变

251
00:13:00,080 --> 0:13:01,481
我们正在看的字体大小

252
00:13:01,548 --> 0:13:03,250
还有更棒的一点是

253
00:13:03,317 --> 0:13:05,953
我们可以一次看到

254
00:13:06,019 --> 0:13:09,022
所有不同字体大小下的界面

255
00:13:09,556 --> 0:13:12,926
我们要做的就是将该界面嵌入一个组

256
00:13:12,993 --> 0:13:16,597
对于每一个大小

257
00:13:16,663 --> 0:13:19,333
但是重复工作太多了

258
00:13:20,701 --> 0:13:23,303
SwiftUI有一个

259
00:13:23,370 --> 0:13:26,173
我对动物单元格点击Command

260
00:13:26,507 --> 0:13:27,941
下滑选择重复

261
00:13:29,142 --> 0:13:33,180
现在对于0到5

262
00:13:33,814 --> 0:13:34,948
但是我想要的

263
00:13:35,482 --> 0:13:38,252
是每种字体大小

264
00:13:38,318 --> 0:13:39,253
都有预览

265
00:13:39,520 --> 0:13:44,057
而且我想要每种情况的

266
00:13:44,391 --> 0:13:47,661
都在环境中指定为对应的值

267
00:13:49,062 --> 0:13:49,897
就像这样

268
00:13:50,264 --> 0:13:52,165
你可以看到在画布上

269
00:13:52,432 --> 0:13:55,369
每种字体大小都显示出来了

270
00:14:03,310 --> 0:14:04,411
完成之后

271
00:14:04,845 --> 0:14:08,348
在最小的字体那我发现一个问题

272
00:14:08,415 --> 0:14:10,450
标题 也就是通俗名称

273
00:14:10,517 --> 0:14:12,619
不是我想的那么显眼

274
00:14:12,886 --> 0:14:14,788
让我们将它放大一点

275
00:14:15,322 --> 0:14:18,425
我再次在视图上点击Command

276
00:14:19,393 --> 0:14:21,628
再选择检查操作

277
00:14:22,262 --> 0:14:24,064
改变标题字体

278
00:14:26,433 --> 0:14:29,937
在源代码编辑器中插入代码

279
00:14:30,537 --> 0:14:31,405
看起来不错

280
00:14:32,105 --> 0:14:33,874
你可能会遇到一个问题

281
00:14:33,941 --> 0:14:36,643
当你在画布中有多个预览

282
00:14:37,044 --> 0:14:40,514
很难区分

283
00:14:40,781 --> 0:14:44,084
你要分清楚代码中的配置

284
00:14:44,151 --> 0:14:46,887
预览静态属性的实现

285
00:14:46,954 --> 0:14:50,090
对应的是画布中的哪个预览

286
00:14:51,325 --> 0:14:52,860
为了解决这个问题

287
00:14:53,427 --> 0:14:56,763
预览API提供一个功能

288
00:14:57,231 --> 0:14:59,132
以免你想要使用这些

289
00:14:59,199 --> 0:15:01,401
文字大小的名称

290
00:14:59,199 --> 0:15:01,401
文字大小的名称

291
00:15:02,002 --> 0:15:05,839
在每个预览的下方

292
00:15:10,911 --> 0:15:12,246
是的 真的很棒

293
00:15:14,448 --> 0:15:18,085
预览API非常简洁且功能非常强大

294
00:15:18,619 --> 0:15:21,154
接下来要讲的是

295
00:15:21,221 --> 0:15:23,824
来发挥预览的最大作用

296
00:15:31,598 --> 0:15:36,770
我来继续讲这个演示

297
00:15:36,837 --> 0:15:38,572
把Nate做的这个动物清单创建完

298
00:15:38,872 --> 0:15:39,973
我要做的第一件事

299
00:15:40,040 --> 0:15:43,710
是把注意力放到红狐图像占位符

300
00:15:44,011 --> 0:15:45,779
我们发布此款app的时候

301
00:15:45,846 --> 0:15:48,982
我们希望这些数据是来自于

302
00:15:49,049 --> 0:15:50,184
我们将要提供的网络服务

303
00:15:50,817 --> 0:15:52,819
但是我们还没有构建网络代码

304
00:15:52,886 --> 0:15:55,455
所以我还没有这些数据

305
00:15:55,522 --> 0:15:57,991
所以我先使用占位符代码

306
00:15:58,058 --> 0:16:01,261
这对字符串来说会容易一些

307
00:15:58,058 --> 0:16:01,261
这对字符串来说会容易一些

308
00:16:01,328 --> 0:16:03,797
但是对于图像来说就有些难度了

309
00:16:03,864 --> 0:16:07,000
因为我可以在预览中加入

310
00:16:07,067 --> 0:16:08,502
占位符资产

311
00:16:09,136 --> 0:16:09,970
但是

312
00:16:10,437 --> 0:16:12,506
但这也意味着我们要将此资产

313
00:16:12,573 --> 0:16:14,274
与app一起发给用户

314
00:16:14,341 --> 0:16:16,009
我不想这样

315
00:16:16,343 --> 0:16:18,278
我也不想搞乱我的二进制文件

316
00:16:19,012 --> 0:16:24,084
所以今年Xcode就出了一个

317
00:16:25,018 --> 0:16:26,720
叫做开发资产

318
00:16:26,787 --> 0:16:30,657
我现在就来展示这个功能

319
00:16:32,459 --> 0:16:36,230
就在目标下面 下滑到开发资产

320
00:16:36,296 --> 0:16:38,198
你可能已经注意到

321
00:16:38,665 --> 0:16:42,269
我预先将预览资产

322
00:16:42,336 --> 0:16:43,570
如果你是从头开始

323
00:16:43,637 --> 0:16:46,406
并且使用的是新模板

324
00:16:46,473 --> 0:16:48,275
它会自动预配置

325
00:16:48,342 --> 0:16:50,077
但如果你编辑的是已经存在的app

326
00:16:50,143 --> 0:16:52,279
添加这个也很容易

327
00:16:53,046 --> 0:16:55,349
现在我将预览资产

328
00:16:55,415 --> 0:16:56,483
加入到资产目录

329
00:16:56,550 --> 0:17:00,120
就在我的预览数据下面

330
00:16:56,550 --> 0:17:00,120
就在我的预览数据下面

331
00:17:00,187 --> 0:17:03,190
这里已经有一张红狐的图片了

332
00:17:03,257 --> 0:17:04,958
我就用它作为占位符

333
00:17:05,925 --> 0:17:08,929
然后我打开动物名单元格

334
00:17:10,531 --> 0:17:11,365
然后

335
00:17:13,066 --> 0:17:14,101
我们可以预览

336
00:17:15,736 --> 0:17:20,040
占位符已经是图片名称了

337
00:17:20,107 --> 0:17:23,176
我们要做的就是把这个文字改成图像

338
00:17:26,012 --> 0:17:28,549
图像就会在预览中出现了

339
00:17:28,916 --> 0:17:29,983
看起来不错

340
00:17:30,284 --> 0:17:33,353
但是我还想对它进行一些视觉处理

341
00:17:33,420 --> 0:17:35,055
让它更加脱颖而出

342
00:17:35,322 --> 0:17:38,392
我可以用SwiftUI代码来做

343
00:17:38,926 --> 0:17:43,063
这看起来不错

344
00:17:43,130 --> 0:17:45,299
看起来不错 我们来看看代码

345
00:17:45,365 --> 0:17:49,403
现在单元格的视图大部分

346
00:17:49,469 --> 0:17:51,004
都被图像处理代码支配

347
00:17:51,371 --> 0:17:53,874
我处理完图片

348
00:17:53,941 --> 0:17:56,643
我也不想丢失这些细节

349
00:17:56,710 --> 0:18:00,614
所以我Command

350
00:17:56,710 --> 0:18:00,614
所以我Command

351
00:18:01,348 --> 0:18:02,416
点击图像

352
00:18:02,850 --> 0:18:04,518
选择提取视图

353
00:18:05,052 --> 0:18:09,022
Xcode就会在下面的同一文件中

354
00:18:09,089 --> 0:18:12,192
我将其重新命名为动物图像

355
00:18:13,427 --> 0:18:16,363
再给它一些参数 也就是图片名称

356
00:18:16,430 --> 0:18:18,932
滑下来 这是我的动物图片

357
00:18:19,800 --> 0:18:22,936
很简单 删除输入

358
00:18:26,240 --> 0:18:27,474
更新预览

359
00:18:31,211 --> 0:18:33,180
谢谢 我也觉得很厉害

360
00:18:33,580 --> 0:18:35,148
你可以看到预览其实没有变

361
00:18:35,215 --> 0:18:38,685
再划上去看看动物单元格是什么样的

362
00:18:38,752 --> 0:18:40,621
现在就清楚多了

363
00:18:40,687 --> 0:18:44,024
我也可以专注图像处理以外的细节了

364
00:18:45,025 --> 0:18:46,493
现在看起来很好

365
00:18:46,560 --> 0:18:49,997
请注意 我们现在

366
00:18:50,063 --> 0:18:53,534
但它不会以这种方式出现在用户面前

367
00:18:53,600 --> 0:18:57,037
用户只会在列表的上下文中

368
00:18:57,104 --> 0:18:59,406
看到这个

369
00:18:59,473 --> 0:19:01,074
所以现在我来做这一点

370
00:18:59,473 --> 0:19:01,074
所以现在我来做这一点

371
00:19:01,842 --> 0:19:05,746
实际上我在这个

372
00:19:05,812 --> 0:19:07,614
之前我们还没有动物单元格

373
00:19:07,681 --> 0:19:12,753
所以我创建了一个简单的

374
00:19:12,819 --> 0:19:15,923
每个动物都会在单元格中展示

375
00:19:15,989 --> 0:19:19,560
所以我用刚刚创建的新的

376
00:19:19,626 --> 0:19:20,861
这里显示出来了

377
00:19:21,461 --> 0:19:23,830
这和用户看到的十分接近了

378
00:19:25,199 --> 0:19:28,302
但是没有动物园只有一只动物

379
00:19:28,368 --> 0:19:29,203
所以

380
00:19:29,536 --> 0:19:34,308
我用一些数据来填充该单元格

381
00:19:34,374 --> 0:19:38,078
这和用户看到的就很接近了

382
00:19:38,912 --> 0:19:39,913
那么要怎么做呢

383
00:19:39,980 --> 0:19:43,750
向下滚动到预览配置代码

384
00:19:44,551 --> 0:19:47,087
你可以看到我用只有一个元素的

385
00:19:47,154 --> 0:19:48,922
数组来填充列表

386
00:19:49,256 --> 0:19:52,693
所以我可以在这里进行硬编码

387
00:19:52,759 --> 0:19:54,328
添加一些这个

388
00:19:54,595 --> 0:19:56,496
三个单元格就会出现

389
00:19:56,864 --> 0:19:57,698
很接近了

390
00:19:58,432 --> 0:20:00,601
我可以继续这样填充

391
00:19:58,432 --> 0:20:00,601
我可以继续这样填充

392
00:20:00,667 --> 0:20:02,402
但这过于均匀

393
00:20:02,469 --> 0:20:05,539
和用户看到的也不完全一样

394
00:20:06,139 --> 0:20:08,475
动物名称有长有短

395
00:20:08,542 --> 0:20:09,610
颜色也不一样

396
00:20:09,676 --> 0:20:13,413
我真的很想知道它会是什么样子

397
00:20:14,014 --> 0:20:15,482
那我还有其他选择吗

398
00:20:16,083 --> 0:20:17,251
我还可以做一件事

399
00:20:17,317 --> 0:20:21,388
因为预览代码是作为

400
00:20:21,688 --> 0:20:24,057
我实际上可以启动网络代码

401
00:20:24,124 --> 0:20:27,194
点击网络 获取一些数据来做填充

402
00:20:27,261 --> 0:20:28,262
可以这样做

403
00:20:28,328 --> 0:20:30,430
但这样做会有一些问题

404
00:20:30,497 --> 0:20:31,331
首先

405
00:20:32,032 --> 0:20:34,801
我还没有创建网络代码

406
00:20:35,102 --> 0:20:38,438
第二 即使我创建了还是会有问题

407
00:20:38,505 --> 0:20:41,241
因为每次我编辑该界面时

408
00:20:41,942 --> 0:20:45,212
我必须要在线 且必须提供服务

409
00:20:46,280 --> 0:20:48,182
这不是一个好方法

410
00:20:48,248 --> 0:20:53,620
所以我想做的是获取数据并缓存

411
00:20:53,687 --> 0:20:55,556
而且不用app中的

412
00:20:55,622 --> 0:20:58,559
其他组件就可以看到视图

413
00:20:58,625 --> 0:21:00,460
所以我已经提前做好；

414
00:20:58,625 --> 0:21:00,460
所以我已经提前做好；

415
00:21:00,527 --> 0:21:04,164
我创建了JSON文件缓存

416
00:21:04,231 --> 0:21:05,065
我来给你看看

417
00:21:05,465 --> 0:21:07,868
预览数据下面就是一个

418
00:21:07,935 --> 0:21:11,338
就是一些动物列表来填充我们的数据

419
00:21:11,405 --> 0:21:12,739
我能做的就是

420
00:21:13,707 --> 0:21:15,542
我并不想把这个也一起传给用户

421
00:21:15,609 --> 0:21:17,277
所以待会我要把它

422
00:21:18,045 --> 0:21:21,381
添加到开发资产

423
00:21:21,448 --> 0:21:26,453
现在它已经在这里了 我只需要加载

424
00:21:26,520 --> 0:21:29,056
我还要在预览代码中添加一些代码

425
00:21:29,122 --> 0:21:31,225
从主包中加载JSON

426
00:21:31,758 --> 0:21:35,128
并使用JSON解码器

427
00:21:35,195 --> 0:21:37,965
现在我就有一组数据了 我可以

428
00:21:38,031 --> 0:21:39,299
我把这个关了

429
00:21:39,600 --> 0:21:40,467
我可以用

430
00:21:41,702 --> 0:21:45,072
Self.sampleAnimals

431
00:21:46,440 --> 0:21:48,275
更新预览

432
00:21:49,142 --> 0:21:51,745
UI就会用样本动物进行填充

433
00:21:55,482 --> 0:21:56,316
谢谢

434
00:21:56,984 --> 0:22:00,787
这就比较像用户看到的界面了

435
00:21:56,984 --> 0:22:00,787
这就比较像用户看到的界面了

436
00:22:00,854 --> 0:22:03,490
但是在布局上马上也出现了一些问题

437
00:22:03,557 --> 0:22:05,592
比如 这里的雪豹太长了

438
00:22:05,659 --> 0:22:08,562
这个名称应该顶端对其

439
00:22:09,496 --> 0:22:12,633
另外一个问题是 标题太大了

440
00:22:12,699 --> 0:22:15,669
你现在看还可以

441
00:22:15,736 --> 0:22:17,871
我想顶部和底部的字再大一点

442
00:22:17,938 --> 0:22:21,175
因为这些改变都是在动物单元格里的

443
00:22:21,241 --> 0:22:23,277
所以找到动物单元格进行连接

444
00:22:25,078 --> 0:22:25,946
看看发生了什么

445
00:22:26,747 --> 0:22:29,016
刚刚的预览不见了

446
00:22:29,082 --> 0:22:34,354
我回到了单元格的上下文

447
00:22:34,855 --> 0:22:37,791
我想在找到该单元格出现的

448
00:22:37,858 --> 0:22:40,627
上下文的同时进行编辑

449
00:22:40,694 --> 0:22:41,528
也就是该列表

450
00:22:41,962 --> 0:22:44,531
我可以在此处添加预览

451
00:22:44,598 --> 0:22:45,666
来预览该列表

452
00:22:45,732 --> 0:22:49,002
就像我之前说到的

453
00:22:49,069 --> 0:22:50,137
作为预览的一部分

454
00:22:50,604 --> 0:22:53,707
但这也就意味着每次我要看

455
00:22:53,774 --> 0:22:54,608
这里面的东西时

456
00:22:54,675 --> 0:22:56,643
我要一遍又一编地

457
00:22:56,710 --> 0:22:57,744
所以还有更好的方法

458
00:22:59,079 --> 0:23:00,347
我来告诉你可以怎么做

459
00:22:59,079 --> 0:23:00,347
我来告诉你可以怎么做

460
00:23:00,848 --> 0:23:02,249
再次回到动物列表

461
00:23:02,316 --> 0:23:04,585
会看到和之前一样的预览列表

462
00:23:04,651 --> 0:23:08,121
用到左下角这个固定按钮

463
00:23:08,422 --> 0:23:09,356
点击

464
00:23:09,423 --> 0:23:10,591
你就会看到

465
00:23:10,657 --> 0:23:15,262
它将当前预览固定到此预览中

466
00:23:15,329 --> 0:23:18,632
因为我是在不同的文件中进行导航的

467
00:23:20,767 --> 0:23:21,935
此预览不变

468
00:23:23,337 --> 0:23:24,171
谢谢

469
00:23:27,241 --> 0:23:29,109
这里有一个标题告诉我

470
00:23:29,176 --> 0:23:31,478
现在的预览和之前

471
00:23:31,545 --> 0:23:32,679
文件里的不一样

472
00:23:32,746 --> 0:23:35,415
这是动物列表里的 所以你知道

473
00:23:35,482 --> 0:23:38,352
如果我想从这个文件中获取原始预览

474
00:23:38,418 --> 0:23:40,587
我就直接滑下去 一切都还在

475
00:23:40,654 --> 0:23:42,356
我不需要做任何上下文

476
00:23:46,994 --> 0:23:48,962
现在我知道要做什么

477
00:23:49,029 --> 0:23:52,032
对VStack点击Command

478
00:23:52,099 --> 0:23:54,835
就可以检查和改变这里的对齐方式

479
00:23:55,736 --> 0:23:56,837
放大一点

480
00:23:58,005 --> 0:23:58,972
我们来看看

481
00:24:02,075 --> 0:24:06,246
这有点太大了

482
00:24:06,313 --> 0:24:07,247
我们回去

483
00:24:07,314 --> 0:24:09,583
再放小一点

484
00:24:11,218 --> 0:24:12,553
看起来好多了 我喜欢

485
00:24:12,619 --> 0:24:13,887
所以就让它这样了

486
00:24:14,454 --> 0:24:15,956
下一步就是

487
00:24:16,023 --> 0:24:21,762
是一个操作列表 你可以在每个

488
00:24:22,129 --> 0:24:25,299
现在我要进行单元格实现

489
00:24:25,933 --> 0:24:28,435
在另一个叫可选动物单元格的文件中

490
00:24:29,670 --> 0:24:32,873
因为我不想破坏我的数据

491
00:24:32,940 --> 0:24:36,910
不想加一些来自UI的东西

492
00:24:36,977 --> 0:24:40,047
我添加了一个小包装程序

493
00:24:40,414 --> 0:24:43,016
再向其添加选定的点

494
00:24:43,083 --> 0:24:47,354
我再用这个

495
00:24:47,421 --> 0:24:50,591
它要做的就是接受模型

496
00:24:50,657 --> 0:24:54,394
检查选定点并显示操作

497
00:24:54,461 --> 0:24:55,729
这些小图标

498
00:24:55,796 --> 0:24:58,065
会给我更多的信息并拍照

499
00:24:59,399 --> 0:25:01,101
如果我取消固定预览

500
00:24:59,399 --> 0:25:01,101
如果我取消固定预览

501
00:25:01,168 --> 0:25:04,271
你可以看到我为此单元格

502
00:25:04,338 --> 0:25:07,307
一个是选定状态

503
00:25:07,741 --> 0:25:10,277
反了 这个是未选定的

504
00:25:11,712 --> 0:25:13,380
这是一个好方法

505
00:25:13,447 --> 0:25:16,183
但同样我希望在列表

506
00:25:17,084 --> 0:25:19,353
所以我要将选择也加入列表中

507
00:25:19,419 --> 0:25:21,321
所以定位到动物列表

508
00:25:23,156 --> 0:25:28,362
SwiftUI处理这样的数据的

509
00:25:28,428 --> 0:25:32,299
所以我在此添加以储存数据

510
00:25:32,366 --> 0:25:34,668
就是我现在选择的数据

511
00:25:35,836 --> 0:25:38,172
再用一些代码

512
00:25:38,472 --> 0:25:42,843
进行翻译

513
00:25:42,910 --> 0:25:46,280
但不管单元格是否被选中

514
00:25:46,713 --> 0:25:48,182
我要把它也加上去

515
00:25:49,783 --> 0:25:51,552
现在我做了两件事

516
00:25:51,618 --> 0:25:53,353
我要用这些可选动物表格

517
00:25:54,688 --> 0:25:56,089
来替换动物列表

518
00:25:57,457 --> 0:25:58,525
我只需要这样

519
00:25:58,592 --> 0:26:00,194
更新预览

520
00:25:58,592 --> 0:26:00,194
更新预览

521
00:26:01,195 --> 0:26:02,563
你可以看到

522
00:26:03,797 --> 0:26:04,932
没有什么变化

523
00:26:05,432 --> 0:26:06,633
为什么呢

524
00:26:06,700 --> 0:26:07,534
因为

525
00:26:08,435 --> 0:26:10,304
这里的选则是可选的

526
00:26:10,737 --> 0:26:12,873
但是我的列表默认是没有被选中

527
00:26:12,940 --> 0:26:16,176
所以看不到我刚刚改的东西

528
00:26:16,243 --> 0:26:18,879
我也可以点击实时模式按钮

529
00:26:20,080 --> 0:26:21,248
用实时视图查看页面

530
00:26:21,548 --> 0:26:23,150
如果我点击

531
00:26:24,151 --> 0:26:25,285
选择就出现了

532
00:26:26,019 --> 0:26:27,421
和我想的一样

533
00:26:28,188 --> 0:26:30,891
但如果我想创建静态 谢谢

534
00:26:31,358 --> 0:26:34,461
但如果我想创建静态预览

535
00:26:35,262 --> 0:26:38,599
来提醒我选择状态是这样的

536
00:26:38,665 --> 0:26:41,869
所以当我对这些

537
00:26:41,935 --> 0:26:43,871
验证更改后的选择看起来是什么样的

538
00:26:43,937 --> 0:26:46,106
我可以在这里创建静态预览

539
00:26:46,173 --> 0:26:48,342
但是要对代码做出一些更改

540
00:26:48,408 --> 0:26:51,245
因为这些数据是比较私密的

541
00:26:51,311 --> 0:26:54,348
我无法从预览中做出更改

542
00:26:54,414 --> 0:26:56,517
那么我该怎么做才能展示这个预览呢

543
00:26:56,583 --> 0:26:58,619
我要做的就是将其移动至

544
00:26:58,685 --> 0:27:00,420
我可以设置的绑定中

545
00:26:58,685 --> 0:27:00,420
我可以设置的绑定中

546
00:27:00,687 --> 0:27:03,357
我将通过引入新视图来实现

547
00:27:03,423 --> 0:27:05,926
我要在动物列表中创建私密视图

548
00:27:05,993 --> 0:27:07,961
会运用于所有的实现中

549
00:27:08,028 --> 0:27:09,229
我要叫它内容

550
00:27:09,596 --> 0:27:13,233
因为这是私密的

551
00:27:14,001 --> 0:27:17,804
然后采用我刚刚构建的所有实现

552
00:27:18,272 --> 0:27:22,109
移动到我刚刚声明的视图中

553
00:27:22,476 --> 0:27:23,610
最后一点是

554
00:27:23,677 --> 0:27:27,414
是为动物列表添加主体实现

555
00:27:27,481 --> 0:27:28,549
根据是其内容

556
00:27:28,615 --> 0:27:32,085
这样做只是证实了我刚刚

557
00:27:32,386 --> 0:27:33,420
运用于动物

558
00:27:33,487 --> 0:27:35,789
并创建一个绑定到选定的状态

559
00:27:36,356 --> 0:27:38,692
现在可以看到预览中的改变

560
00:27:38,759 --> 0:27:40,527
而不是预览动物列表了

561
00:27:41,128 --> 0:27:43,063
预览的是动物列表内容

562
00:27:44,731 --> 0:27:45,799
当我更新后

563
00:27:47,568 --> 0:27:49,369
可以看到选定出现了

564
00:27:49,436 --> 0:27:51,371
实现了选定的静态预览

565
00:27:51,438 --> 0:27:55,709
现 在 我在这里设置动物列表预览

566
00:27:55,776 --> 0:27:58,445
同样可以验证未选定时

567
00:27:58,512 --> 0:27:59,580
动物列表看起来是什么样的

568
00:27:59,646 --> 0:28:04,117
而且 我仍然可以使用

569
00:27:59,646 --> 0:28:04,117
而且 我仍然可以使用

570
00:28:04,184 --> 0:28:05,886
并对预览进行编辑

571
00:28:07,487 --> 0:28:08,322
谢谢

572
00:28:11,625 --> 0:28:14,461
现在我们介绍了XCode预览

573
00:28:14,528 --> 0:28:15,929
以及如何在SwiftUI中使用

574
00:28:15,996 --> 0:28:19,099
但是它能做的还有更多

575
00:28:19,633 --> 0:28:22,503
下面欢迎Nate进行讲解

576
00:28:25,172 --> 0:28:27,508
（演示）

577
00:28:27,574 --> 0:28:28,475
谢谢Anton

578
00:28:33,347 --> 0:28:35,983
并不是所有人都是从这周开始

579
00:28:36,049 --> 0:28:37,918
用SwiftUI写一款

580
00:28:38,519 --> 0:28:40,220
可能有些人在

581
00:28:40,287 --> 0:28:42,155
或者是有已经做了几年的app了

582
00:28:42,923 --> 0:28:47,761
因为SwiftUI与UIKit、AppKit

583
00:28:48,295 --> 0:28:51,164
也因为API是

584
00:28:52,032 --> 0:28:55,802
Xcode预览在这些框架下

585
00:28:57,971 --> 0:28:59,306
在我们的动物园app

586
00:28:59,907 --> 0:29:02,176
当你点击详情按钮

587
00:28:59,907 --> 0:29:02,176
当你点击详情按钮

588
00:29:02,543 --> 0:29:04,611
也就是Anton刚刚在

589
00:29:04,878 --> 0:29:08,282
就会展示选定动物的细节

590
00:29:08,882 --> 0:29:13,420
该界面是用

591
00:29:14,788 --> 0:29:16,356
叫动物视图控制器

592
00:29:17,524 --> 0:29:18,659
让我给你们看看代码

593
00:29:19,426 --> 0:29:21,628
我先关闭画布

594
00:29:21,695 --> 0:29:22,729
按Command 返回

595
00:29:23,630 --> 0:29:25,766
再转到动物视图控制器

596
00:29:27,768 --> 0:29:30,003
我给你们看看视图控制器是怎样的

597
00:29:30,270 --> 0:29:32,539
但是先不急创建和运行

598
00:29:32,606 --> 0:29:34,741
我先创建一个预览

599
00:29:35,542 --> 0:29:37,344
现在预览还只是代码

600
00:29:37,411 --> 0:29:40,347
所以我们可以继续在此文件中

601
00:29:40,414 --> 0:29:43,150
与此UIViewController

602
00:29:43,684 --> 0:29:46,520
但在这个例子中 我想创建新文件

603
00:29:47,120 --> 0:29:50,157
按Command-0

604
00:29:50,557 --> 0:29:54,027
之后在我想要的组中添加新文件

605
00:29:54,661 --> 0:29:56,563
右击 选择新文件

606
00:29:57,431 --> 0:29:58,265
SwiftFile

607
00:29:58,332 --> 0:30:01,702
输入名称

608
00:29:58,332 --> 0:30:01,702
输入名称

609
00:30:06,306 --> 0:30:08,976
预览API是

610
00:30:09,042 --> 0:30:12,045
所以要编写预览 你需要导入该框架

611
00:30:13,313 --> 0:30:15,616
为了创建在画布中显示的预览

612
00:30:15,682 --> 0:30:18,685
你需要为预览提供程序协议

613
00:30:19,219 --> 0:30:21,455
在该例中 我要创建一个全新类型

614
00:30:21,522 --> 0:30:25,392
来确定该协议

615
00:30:26,226 --> 0:30:29,396
现在 预览提供程序协议只有一个

616
00:30:29,463 --> 0:30:33,400
必须实现的要求 即静态预览属性

617
00:30:33,967 --> 0:30:36,803
为实现该属性 我要返回某些视图

618
00:30:36,870 --> 0:30:40,807
在该例中我们需要嵌入

619
00:30:42,042 --> 0:30:46,747
SwiftUI支持以

620
00:30:47,047 --> 0:30:50,450
将UIViewControllers

621
00:30:50,751 --> 0:30:52,019
欲了解更多详情

622
00:30:52,085 --> 0:30:54,488
请查看集成SwiftUI演讲

623
00:30:54,988 --> 0:30:55,889
在我们的例子中

624
00:30:56,156 --> 0:30:58,825
因为我们想要

625
00:30:59,293 --> 0:31:02,996
我们想要添加一个可表示的

626
00:30:59,293 --> 0:31:02,996
我们想要添加一个可表示的

627
00:31:03,530 --> 0:31:05,732
方便起见 我继续操作

628
00:31:05,799 --> 0:31:08,569
将其与

629
00:31:08,635 --> 0:31:10,637
至动物视图控制器预览类别

630
00:31:11,972 --> 0:31:13,440
为了达到目的

631
00:31:13,907 --> 0:31:16,109
UIViewController

632
00:31:16,176 --> 0:31:19,046
还有三个要求需要实现

633
00:31:19,413 --> 0:31:23,317
第一种是指定要表示的

634
00:31:23,383 --> 0:31:24,618
UIViewController

635
00:31:25,052 --> 0:31:27,454
在该例中就是动物视图控制器

636
00:31:28,088 --> 0:31:29,089
接下来

637
00:31:29,156 --> 0:31:33,026
我们需要描述如何创建这些

638
00:31:33,093 --> 0:31:35,262
动物视图控制器

639
00:31:35,562 --> 0:31:37,231
该上下文包括

640
00:31:37,297 --> 0:31:39,800
用户是在明亮或是深色模式下使用

641
00:31:39,867 --> 0:31:41,535
或是动态字体的大小

642
00:31:43,470 --> 0:31:44,304
在该例中

643
00:31:44,371 --> 0:31:46,273
我们已经在

644
00:31:46,340 --> 0:31:47,674
添加了包好的一类

645
00:31:47,741 --> 0:31:49,910
我要从中加载动物视图控制器

646
00:31:51,478 --> 0:31:53,680
我们要实现的第三个要求

647
00:31:53,747 --> 0:31:55,449
就是更新

648
00:31:55,916 --> 0:31:59,419
这允许我们根据环境的变化等

649
00:31:59,486 --> 0:32:02,723
改变视图控制器的外观

650
00:31:59,486 --> 0:32:02,723
改变视图控制器的外观

651
00:32:03,390 --> 0:32:05,692
在该例中 我们需要创建预览

652
00:32:06,159 --> 0:32:09,596
所以我将继续将此实现留空

653
00:32:11,198 --> 0:32:12,866
现在我们已经符合

654
00:32:13,233 --> 0:32:15,669
UIViewController

655
00:32:15,969 --> 0:32:18,739
我们已准备好实施预览的方法

656
00:32:20,240 --> 0:32:23,343
具体来说 我们将返回符合

657
00:32:23,410 --> 0:32:25,646
UIViewController

658
00:32:25,712 --> 0:32:28,081
也就是动物视图控制器预览

659
00:32:28,982 --> 0:32:30,984
在这几行代码

660
00:32:31,451 --> 0:32:35,122
你可以在Xcode中看到

661
00:32:35,189 --> 0:32:36,290
我们来看看

662
00:32:37,090 --> 0:32:39,159
我要关闭项目导航

663
00:32:39,459 --> 0:32:42,296
再打开画布

664
00:32:43,664 --> 0:32:47,100
因为我们在源编辑器中添加了新方法

665
00:32:47,167 --> 0:32:48,435
所以我们要重新创建

666
00:32:48,869 --> 0:32:50,437
在画布中

667
00:32:50,504 --> 0:32:54,107
UIViewController预览

668
00:32:54,174 --> 0:32:57,110
谢谢 这真的很棒

669
00:32:57,945 --> 0:33:02,716
在UIKit中用Swift写的

670
00:32:57,945 --> 0:33:02,716
在UIKit中用Swift写的

671
00:33:05,452 --> 0:33:07,688
但是当我看该视图控制器

672
00:33:07,754 --> 0:33:09,189
我发现了一个问题

673
00:33:09,489 --> 0:33:12,059
这些文本读起来太困难了

674
00:33:13,026 --> 0:33:16,897
图片上方的文字下面

675
00:33:17,231 --> 0:33:20,100
它是半透明的 因此让文本更加好读

676
00:33:20,367 --> 0:33:22,703
但是这还不够半透明

677
00:33:23,136 --> 0:33:26,473
所以让我们继续提高不透明度

678
00:33:26,940 --> 0:33:28,408
我将该预览固定

679
00:33:28,709 --> 0:33:31,278
这样我们就可以看到做出的改变

680
00:33:31,979 --> 0:33:34,348
转到动物视图控制器文件

681
00:33:37,384 --> 0:33:41,955
在这里我将底层视图的

682
00:33:42,689 --> 0:33:44,691
画布立马做出更新

683
00:33:44,958 --> 0:33:48,829
为视图控制器显示出

684
00:33:49,830 --> 0:33:53,200
Xcode的预览

685
00:33:53,467 --> 0:33:55,402
而是所有Swift代码

686
00:33:55,469 --> 0:33:58,405
而且 我们可以获得所有热交换

687
00:33:58,472 --> 0:34:01,842
和增量更新而无需重新编译文字值

688
00:33:58,472 --> 0:34:01,842
和增量更新而无需重新编译文字值

689
00:34:01,909 --> 0:34:03,310
就像Anton说的

690
00:34:03,377 --> 0:34:07,080
SwiftUI UIAppKit

691
00:34:11,717 --> 0:34:12,553
谢谢

692
00:34:15,121 --> 0:34:17,623
Anton向你们展示了

693
00:34:18,158 --> 0:34:21,094
我已经对其进行编辑了

694
00:34:21,527 --> 0:34:22,563
让我给你们看看

695
00:34:23,030 --> 0:34:26,934
取消固定动物视图编辑器

696
00:34:27,201 --> 0:34:29,503
点击左下角取消固定按钮

697
00:34:29,803 --> 0:34:30,771
再转到

698
00:34:31,103 --> 0:34:33,540
动物操作视图控制器表示

699
00:34:34,474 --> 0:34:37,543
这是动物操作视图控制器的预览

700
00:34:38,277 --> 0:34:41,348
我们觉得按钮隔太开了

701
00:34:41,614 --> 0:34:45,284
我们觉得IImage不太合适

702
00:34:45,351 --> 0:34:47,688
它与平台不太一致

703
00:34:48,655 --> 0:34:50,123
我们来解决这个问题

704
00:34:50,991 --> 0:34:53,627
打开动物操作视图操作器文件

705
00:34:54,027 --> 0:34:57,464
因为我实是在很久很久之前写的

706
00:34:57,531 --> 0:34:59,533
所以我用的是

707
00:35:03,003 --> 0:35:04,304
谢谢

708
00:35:04,972 --> 0:35:06,139
很棒的语言

709
00:35:07,374 --> 0:35:10,377
我们来把填充详情按钮的

710
00:35:10,444 --> 0:35:12,980
系统图像改成

711
00:35:14,748 --> 0:35:15,582
再返回到

712
00:35:16,149 --> 0:35:17,651
我们的预览

713
00:35:18,318 --> 0:35:19,486
再更新预览

714
00:35:19,820 --> 0:35:23,023
因为这是用Objective-C

715
00:35:24,892 --> 0:35:28,295
Xcode会告诉构建系统

716
00:35:28,362 --> 0:35:31,832
而不是使用增量更新或热交换

717
00:35:31,899 --> 0:35:34,134
但还是很快

718
00:35:34,201 --> 0:35:37,604
特别是比进行app重建

719
00:35:37,671 --> 0:35:40,240
运行又导航来说快多了

720
00:35:41,208 --> 0:35:45,512
Xcode预览不仅适用于

721
00:35:45,846 --> 0:35:50,117
甚至UIKit、AppKit和WatchKit中

722
00:35:50,184 --> 0:35:52,586
而是适用于Xcode能理解的

723
00:35:52,653 --> 0:35:54,087
所有源文件

724
00:36:03,697 --> 0:36:04,831
（演示）

725
00:36:04,898 --> 0:36:05,732
正如你所见

726
00:36:06,433 --> 0:36:09,636
Xcode预览可以

727
00:36:10,237 --> 0:36:11,605
但是现在我想说说

728
00:36:12,206 --> 0:36:16,610
如何调整你的app

729
00:36:17,411 --> 0:36:20,214
如何调整app体系结构

730
00:36:20,848 --> 0:36:21,682
特别是

731
00:36:22,282 --> 0:36:23,917
我想说说在我们动物园app中

732
00:36:23,984 --> 0:36:25,586
出现过的一个类型

733
00:36:25,853 --> 0:36:28,055
叫动物单元格模型

734
00:36:28,922 --> 0:36:30,457
我们做了什么呢

735
00:36:31,658 --> 0:36:32,559
来看看

736
00:36:32,626 --> 0:36:34,428
我们填充了动物视图

737
00:36:35,195 --> 0:36:36,163
动物单元格

738
00:36:36,897 --> 0:36:39,566
因为SwiftUI流畅的API

739
00:36:40,300 --> 0:36:41,134
还有

740
00:36:42,936 --> 0:36:46,573
我们也可以很简便地

741
00:36:47,508 --> 0:36:49,910
我们也用了单元格模型

742
00:36:51,011 --> 0:36:53,113
哪个数据

743
00:36:53,180 --> 0:36:57,985
进入视图的哪部分

744
00:37:00,921 --> 0:37:01,855
这样

745
00:37:02,122 --> 0:37:04,758
我们就可以使用动物模型对象

746
00:37:04,825 --> 0:37:06,960
再将其直接传入视图

747
00:37:07,728 --> 0:37:09,730
但是我们没有 原因有二

748
00:37:11,465 --> 0:37:12,299
第一

749
00:37:12,833 --> 0:37:14,868
使用视图模型

750
00:37:15,202 --> 0:37:16,436
添加新预览

751
00:37:17,104 --> 0:37:18,505
是很容易的

752
00:37:19,206 --> 0:37:23,343
为实现预览提供程序的一个好方法

753
00:37:23,744 --> 0:37:27,014
是在视图模型中添加静态数组

754
00:37:27,381 --> 0:37:31,351
并在您的静态预览属性的实现中

755
00:37:31,952 --> 0:37:35,989
迭代该视图模型数组并填充视图

756
00:37:36,557 --> 0:37:40,727
当新数据配置

757
00:37:40,794 --> 0:37:43,096
会导致不同布局时 这就很有用了

758
00:37:43,931 --> 0:37:48,168
你要做的就是创建一个新的

759
00:37:49,203 --> 0:37:51,405
然后你就会在画布上看到新预览

760
00:37:51,471 --> 0:37:53,207
显示你的新视图布局

761
00:37:54,575 --> 0:37:57,110
在说第二个为什么我们

762
00:37:57,477 --> 0:38:00,380
要在动物园app中使用

763
00:37:57,477 --> 0:38:00,380
要在动物园app中使用

764
00:38:00,881 --> 0:38:03,550
如果你们忍得了我的话

765
00:38:03,617 --> 0:38:04,551
我想提一点哲学问题

766
00:38:08,188 --> 0:38:12,726
应用程序的模型层包含丰富的对象图

767
00:38:13,427 --> 0:38:16,930
在动物园app中

768
00:38:17,531 --> 0:38:20,868
而且该动物模型对象也只是

769
00:38:21,235 --> 0:38:23,203
许多动物中的一个

770
00:38:24,605 --> 0:38:25,672
另一方面

771
00:38:25,739 --> 0:38:29,076
该动物模型对象中含有基因数组

772
00:38:30,878 --> 0:38:33,614
那么你要怎么将

773
00:38:34,948 --> 0:38:36,016
好

774
00:38:36,483 --> 0:38:38,018
并不是一次做到的

775
00:38:40,454 --> 0:38:44,691
比如说 你不会在动物单元格里

776
00:38:44,758 --> 0:38:46,260
信息量太大了

777
00:38:47,127 --> 0:38:49,496
所以你要从

778
00:38:49,563 --> 0:38:52,132
模型对象中提取

779
00:38:52,566 --> 0:38:54,101
最重要的信息

780
00:38:54,535 --> 0:38:57,237
再创建预览

781
00:38:57,771 --> 0:39:00,841
但不是用一对一的方式来提取

782
00:38:57,771 --> 0:39:00,841
但不是用一对一的方式来提取

783
00:39:01,375 --> 0:39:04,578
通常要对数据进行一些转换

784
00:39:05,379 --> 0:39:09,016
我们从动物模型对象中提取了两部分

785
00:39:09,416 --> 0:39:14,321
并将它们组合起来

786
00:39:16,990 --> 0:39:19,626
转化和提取的过程

787
00:39:19,893 --> 0:39:21,028
很容易出错

788
00:39:21,662 --> 0:39:24,064
但是用预览模型就简单多了

789
00:39:25,899 --> 0:39:27,167
这是一个预览模型

790
00:39:28,068 --> 0:39:32,606
特别是我们的动物单元格模型

791
00:39:34,441 --> 0:39:37,811
我们就可以清楚地看到这些数据

792
00:39:37,878 --> 0:39:38,912
再进行结合

793
00:39:38,979 --> 0:39:42,416
我们就可以向用户展示

794
00:39:43,650 --> 0:39:47,254
而且这一点非常有用

795
00:39:47,321 --> 0:39:50,591
因为检验起来更容易

796
00:39:50,924 --> 0:39:54,294
当我们遇到新的模型对象

797
00:39:54,828 --> 0:39:58,198
需要以不同的方式向用户展示时

798
00:39:58,699 --> 0:40:01,101
我们需要做的就是利用XCTest

799
00:39:58,699 --> 0:40:01,101
我们需要做的就是利用XCTest

800
00:40:01,168 --> 0:40:07,007
添加一个新的测试用例

801
00:40:07,074 --> 0:40:08,876
从中创建一个视图模型

802
00:40:08,942 --> 0:40:10,677
再验证该视图模型

803
00:40:10,744 --> 0:40:13,747
是否具有我们希望向用户显示的数据

804
00:40:13,814 --> 0:40:15,883
以表示该模型对象

805
00:40:17,017 --> 0:40:20,454
这也是为什么我们

806
00:40:20,521 --> 0:40:21,688
使用视图模型的第二个原因

807
00:40:22,523 --> 0:40:23,624
（应用架构）

808
00:40:23,690 --> 0:40:24,525
那么对于总体app架构来说

809
00:40:24,591 --> 0:40:27,094
这意味什么呢

810
00:40:29,997 --> 0:40:32,766
构建一款好app 重要的一点是

811
00:40:33,300 --> 0:40:38,172
是在你的模型层中

812
00:40:38,238 --> 0:40:40,007
采用丰富的模型对象图

813
00:40:40,974 --> 0:40:43,277
再向你的用户进行展示

814
00:40:43,343 --> 0:40:46,246
再从中提取最重要的信息

815
00:40:46,613 --> 0:40:49,082
再以好看的方式展示给用户

816
00:40:50,417 --> 0:40:54,087
使用视图模型会简单得多

817
00:40:55,022 --> 0:40:56,056
原因是

818
00:40:56,723 --> 0:40:59,159
你可以使用以下流程

819
00:41:00,494 --> 0:41:01,328
首先

820
00:41:01,929 --> 0:41:05,032
为你的模型对象构建视图模型

821
00:41:07,367 --> 0:41:09,236
这个过程很容易出错

822
00:41:09,303 --> 0:41:11,705
所以你一遍又一遍地测试

823
00:41:12,139 --> 0:41:15,242
确保视图模型包含你想让

824
00:41:15,309 --> 0:41:16,610
你的用户看到的完整数据

825
00:41:17,010 --> 0:41:19,913
第二 对于每个视图模型的不同风格

826
00:41:21,748 --> 0:41:25,652
都会呈现不同的布局

827
00:41:26,019 --> 0:41:28,088
你可以在画布中检验

828
00:41:28,388 --> 0:41:32,426
你的视图和你想让用户看到的一样

829
00:41:33,160 --> 0:41:35,796
最后 你可以用XCUI测试

830
00:41:36,330 --> 0:41:39,199
验证你的app在创建过程中的

831
00:41:39,499 --> 0:41:40,367
工作方式

832
00:41:41,802 --> 0:41:44,338
我想花点时间谈谈性能

833
00:41:44,404 --> 0:41:45,639
（app的生命周期）

834
00:41:47,541 --> 0:41:48,542
我们刚刚说过

835
00:41:49,409 --> 0:41:50,844
预览只是一些代码

836
00:41:51,778 --> 0:41:53,013
而后果就是

837
00:41:53,080 --> 0:41:56,016
你不想在显示预览的时候

838
00:41:56,583 --> 0:41:58,785
运行任意操作

839
00:41:59,052 --> 0:42:01,555
你不想要这么多的运算

840
00:41:59,052 --> 0:42:01,555
你不想要这么多的运算

841
00:42:02,456 --> 0:42:04,725
Xcode预览也是同样的道理

842
00:42:04,791 --> 0:42:08,195
它会调用app

843
00:42:08,695 --> 0:42:12,232
所以你也不想做一些无关紧要的工作

844
00:42:12,499 --> 0:42:16,570
特别是当你只想看在画布上的

845
00:42:16,637 --> 0:42:20,541
预览视图时 你并不想

846
00:42:20,607 --> 0:42:21,875
设置UI层次结构

847
00:42:22,409 --> 0:42:23,243
所以

848
00:42:23,610 --> 0:42:28,015
识别app场景 使其符合

849
00:42:28,315 --> 0:42:31,485
实现场景连接到操作方法

850
00:42:31,919 --> 0:42:34,521
并在那里设置UI层次结构

851
00:42:35,355 --> 0:42:38,325
看看 这并不只是对开发者有益

852
00:42:38,392 --> 0:42:40,494
能让你更快地看到预览

853
00:42:40,761 --> 0:42:42,896
对用户来说也是好消息

854
00:42:43,797 --> 0:42:46,133
当你的app在后台运行时

855
00:42:46,400 --> 0:42:48,302
它不会做一堆额外的工作

856
00:42:48,669 --> 0:42:51,705
它只做它需要做的事情

857
00:42:52,139 --> 0:42:54,274
也避免了浪费用户的电池

858
00:42:55,843 --> 0:43:00,814
（总结）

859
00:42:55,843 --> 0:43:00,814
（总结）

860
00:43:02,516 --> 0:43:03,550
我们来做一个回顾

861
00:43:04,318 --> 0:43:08,789
我们说到了如何写预览

862
00:43:08,856 --> 0:43:10,190
它的功能真的很强大

863
00:43:10,557 --> 0:43:13,994
当你在写预览的时候

864
00:43:15,562 --> 0:43:18,232
你也学习了如何使用

865
00:43:18,298 --> 0:43:20,701
比如说预览固定 在你要在不同

866
00:43:20,767 --> 0:43:23,103
文件转换的时候固定预览视图

867
00:43:23,704 --> 0:43:26,640
我们也说到了

868
00:43:26,707 --> 0:43:29,576
让你拥有丰富有趣的预览

869
00:43:31,712 --> 0:43:34,515
而不用把测试数据也传给用户

870
00:43:35,082 --> 0:43:35,916
最后

871
00:43:36,250 --> 0:43:37,284
你也看到了

872
00:43:38,218 --> 0:43:41,555
预览并不只是适用于

873
00:43:41,889 --> 0:43:44,658
而是所有Xcode

874
00:43:44,725 --> 0:43:47,427
可以是用UIKit、AppKit

875
00:43:55,035 --> 0:43:57,070
这就是掌握

876
00:43:57,137 --> 0:43:58,272
谢谢大家捧场

877
00:43:58,338 --> 0:44:00,774
（更多信息）

878
00:43:58,338 --> 0:44:00,774
（更多信息）

879
00:44:02,309 --> 0:44:03,577
来实验室找我们吧
