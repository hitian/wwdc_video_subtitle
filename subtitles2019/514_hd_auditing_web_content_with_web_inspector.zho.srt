1
00:00:07,174 --> 0:00:08,809
大家好

2
00:00:08,876 --> 0:00:12,312
Safari和WebKit团队的

3
00:00:12,613 --> 0:00:15,549
欢迎收看

4
00:00:16,049 --> 0:00:18,051
在创建网页内容的过程中

5
00:00:18,118 --> 0:00:20,220
开发者需要检查许多细节

6
00:00:21,021 --> 0:00:23,724
比如CSS类名的命名规则

7
00:00:23,790 --> 0:00:26,026
还要保证网页可以正常访问

8
00:00:26,493 --> 0:00:27,861
细节太多

9
00:00:27,928 --> 0:00:31,031
很容易忘记 找起来也很乏味

10
00:00:31,331 --> 0:00:33,400
内置清单是最理想的办法

11
00:00:33,867 --> 0:00:37,571
部分团队会给持续集成系统

12
00:00:37,638 --> 0:00:40,340
就像Safari的

13
00:00:40,407 --> 0:00:43,343
macOS可用

14
00:00:43,710 --> 0:00:46,113
WebDriver

15
00:00:46,180 --> 0:00:48,749
找到用户功能失败的原因

16
00:00:49,216 --> 0:00:50,417
但对于网页开发者

17
00:00:50,484 --> 0:00:53,854
他们要检查进程是否符合代码结果

18
00:00:54,121 --> 0:00:57,057
网页查看器现在有个新的审查系统

19
00:00:57,124 --> 0:00:59,660
可用于macOS的

20
00:00:59,726 --> 0:01:01,295
它提供了快速 简单

21
00:00:59,726 --> 0:01:01,295
它提供了快速 简单

22
00:01:01,361 --> 0:01:03,764
更方便的方法 检查网页内容

23
00:01:05,599 --> 0:01:09,069
本视频中 我会演示

24
00:01:09,469 --> 0:01:12,206
如何实现测试并分析测试结果

25
00:01:12,472 --> 0:01:13,307
以及最后

26
00:01:13,373 --> 0:01:16,543
如何为项目 创建自定义审查

27
00:01:17,411 --> 0:01:18,245
首先

28
00:01:18,312 --> 0:01:21,315
访问网页查看器

29
00:01:22,482 --> 0:01:24,384
只要打开Safari偏好设置

30
00:01:24,751 --> 0:01:26,086
点击“高级”

31
00:01:26,553 --> 0:01:30,390
然后勾选“在菜单栏显示开发菜单”

32
00:01:32,192 --> 0:01:33,727
然后加载一个网页

33
00:01:34,127 --> 0:01:36,430
在开发菜单打开网页查看器

34
00:01:36,830 --> 0:01:39,466
或使用快捷键

35
00:01:40,934 --> 0:01:43,804
以WebKit.org为例

36
00:01:44,071 --> 0:01:45,672
点击“审查”标签

37
00:01:48,308 --> 0:01:51,111
左边栏列出了审查项

38
00:01:51,645 --> 0:01:54,581
点击左侧的箭头 展开审查项

39
00:01:55,215 --> 0:01:58,452
审查项是多个测试组或测试的集合

40
00:01:59,119 --> 0:02:00,854
测试组没有任何功能

41
00:01:59,119 --> 0:02:00,854
测试组没有任何功能

42
00:02:00,921 --> 0:02:05,325
只是单个测试集合的组织容器

43
00:02:06,260 --> 0:02:07,694
运行审查很简单

44
00:02:07,761 --> 0:02:10,564
点击“开始”按钮

45
00:02:11,265 --> 0:02:15,202
或右击一个审查项

46
00:02:15,903 --> 0:02:17,204
如果只运行一个审查项

47
00:02:17,271 --> 0:02:19,473
右击审查项 选择“开始”

48
00:02:19,940 --> 0:02:22,409
或者将鼠标悬停在左边栏的右侧

49
00:02:22,476 --> 0:02:24,044
会出现一个播放键

50
00:02:24,478 --> 0:02:26,947
也可以点亮后 按下空格

51
00:02:27,347 --> 0:02:30,617
审查十分迅速

52
00:02:32,286 --> 0:02:34,521
选择审查项的另一个方法

53
00:02:34,888 --> 0:02:36,590
是点击“编辑”按钮

54
00:02:36,657 --> 0:02:38,892
在导航边栏的底部

55
00:02:41,195 --> 0:02:45,499
这里可以勾选或取消单个测试

56
00:02:45,966 --> 0:02:47,167
测试组

57
00:02:48,035 --> 0:02:51,572
或整个审查项

58
00:02:54,308 --> 0:02:57,211
完成后点击底部的“完成”按钮

59
00:02:59,112 --> 0:03:02,282
测试的结果列表显示在审查项下方

60
00:02:59,112 --> 0:03:02,282
测试的结果列表显示在审查项下方

61
00:03:02,349 --> 0:03:03,784
在结果文件夹里

62
00:03:03,851 --> 0:03:06,820
每个结果被存入“运行”文件夹

63
00:03:08,522 --> 0:03:12,459
展开“运行”文件夹

64
00:03:13,160 --> 0:03:16,730
结果运行在页面重新加载后也可用

65
00:03:16,797 --> 0:03:18,565
因此你可以修改网页

66
00:03:18,632 --> 0:03:21,001
然后重新审核更新后的结果

67
00:03:21,368 --> 0:03:23,937
比如 你可以对比通过率

68
00:03:24,304 --> 0:03:27,207
结果会在关闭网页查看器后清空

69
00:03:30,177 --> 0:03:32,646
点击审查运行演示的结果

70
00:03:32,713 --> 0:03:36,483
会出现一个报告

71
00:03:38,619 --> 0:03:39,820
前三个级别

72
00:03:39,887 --> 0:03:42,222
应该很眼熟

73
00:03:42,623 --> 0:03:44,825
“通过”代表测试通过

74
00:03:44,892 --> 0:03:47,227
指代码符合测试要求

75
00:03:47,728 --> 0:03:49,229
“警告”是基本通过

76
00:03:49,296 --> 0:03:51,298
指虽然代码通过了测试

77
00:03:51,365 --> 0:03:53,133
但还有需要修改的地方

78
00:03:53,433 --> 0:03:55,869
“失败”指代码没能通过测试

79
00:03:57,905 --> 0:04:01,608
另外这两个级别

80
00:03:57,905 --> 0:04:01,608
另外这两个级别

81
00:04:01,975 --> 0:04:05,012
“错误”是在使用

82
00:04:05,078 --> 0:04:06,246
出现的报错

83
00:04:06,747 --> 0:04:09,483
“不支持”是个特殊情况 说明

84
00:04:09,550 --> 0:04:12,753
当前页面不支持被测试的数据

85
00:04:12,819 --> 0:04:14,821
比如API缺失

86
00:04:15,923 --> 0:04:18,559
测试结果还可以包括测试数据

87
00:04:18,625 --> 0:04:21,295
形式为DOM节点或报错消息

88
00:04:23,697 --> 0:04:26,300
网页查看器自带部分默认的审查项

89
00:04:26,366 --> 0:04:28,602
可以禁用 但不能删除

90
00:04:29,102 --> 0:04:30,370
其中一个默认项

91
00:04:30,437 --> 0:04:33,006
测试网页的标记

92
00:04:33,073 --> 0:04:36,276
是否符合访问性的一般准则

93
00:04:37,744 --> 0:04:40,514
然后是访问性审查的运行结果

94
00:04:40,581 --> 0:04:41,849
在WebKit.org

95
00:04:43,150 --> 0:04:46,286
整体评分说明WebKit运行不错

96
00:04:46,720 --> 0:04:48,288
但还有提升空间

97
00:04:49,690 --> 0:04:51,892
结果中显示“失败”的地方

98
00:04:51,959 --> 0:04:54,194
是检测到失败的DOM节点

99
00:04:54,261 --> 0:04:56,663
显示为可互动的DOM树

100
00:04:57,264 --> 0:04:58,732
展开该节点的DOM树

101
00:04:58,799 --> 0:05:01,001
就可以访问子节点

102
00:04:58,799 --> 0:05:01,001
就可以访问子节点

103
00:05:01,068 --> 0:05:04,838
悬停鼠标会显示对应的页面元素

104
00:05:04,905 --> 0:05:06,840
就像在使用元素标签

105
00:05:11,378 --> 0:05:13,547
这就很容易理解

106
00:05:13,614 --> 0:05:16,350
网页内容的哪个代码需要完善

107
00:05:17,417 --> 0:05:18,519
要修复它

108
00:05:18,585 --> 0:05:20,120
只要点击这个箭头

109
00:05:20,187 --> 0:05:22,155
直接到元素标签里的节点

110
00:05:23,123 --> 0:05:25,492
问题是作为菜单的元素

111
00:05:25,559 --> 0:05:28,695
需要子元素才能形成菜单项

112
00:05:29,730 --> 0:05:32,533
因此我只要添加一个新的角色属性

113
00:05:32,599 --> 0:05:34,334
用菜单项的值

114
00:05:34,401 --> 0:05:36,870
给菜单的每个子元素

115
00:05:37,871 --> 0:05:39,773
我现在就补上缺失的属性

116
00:05:39,840 --> 0:05:41,308
给每个元素

117
00:05:44,745 --> 0:05:46,180
还有几个

118
00:05:50,717 --> 0:05:51,552
好了

119
00:05:51,919 --> 0:05:53,654
现在切换回审查标签

120
00:05:53,720 --> 0:05:55,289
重新运行审查

121
00:05:55,355 --> 0:05:58,158
看看DOM修改后的新结果

122
00:06:01,428 --> 0:06:04,498
很好

123
00:06:04,765 --> 0:06:08,936
我只需将这些修改并入实际代码中

124
00:06:11,471 --> 0:06:13,740
你看 检查问题就这么简单

125
00:06:13,807 --> 0:06:16,810
修改它们也很方便

126
00:06:17,544 --> 0:06:21,548
审查和审查结果可以导出 再导入

127
00:06:21,615 --> 0:06:25,385
点击“导出”按钮

128
00:06:26,153 --> 0:06:28,222
它们可以通过查看器再次导入

129
00:06:28,288 --> 0:06:29,923
仍然可以访问完整结果

130
00:06:29,990 --> 0:06:31,892
包括可互动的DOM节点

131
00:06:31,959 --> 0:06:35,229
只要页面元素匹配报表节点

132
00:06:36,897 --> 0:06:38,799
你也可以导出内置的审查项

133
00:06:38,866 --> 0:06:41,668
作为你编写审查项的示例

134
00:06:41,735 --> 0:06:44,872
由于许多团队都有独特的目标代码

135
00:06:44,938 --> 0:06:48,375
编写自定义的审查项

136
00:06:48,442 --> 0:06:51,011
在使用网页查看器的审查框架时

137
00:06:52,312 --> 0:06:54,815
使用JSON格式实现便携

138
00:06:55,082 --> 0:06:58,452
每个测试都是字符串化的

139
00:06:58,519 --> 0:06:59,953
提供简单的框架

140
00:07:00,020 --> 0:07:02,689
和特殊的通道

141
00:07:02,756 --> 0:07:03,724
在JavaScript

142
00:07:04,424 --> 0:07:05,592
简单的JSON格式

143
00:07:05,659 --> 0:07:09,129
方便分享测试给组员或其他开发者

144
00:07:10,330 --> 0:07:12,032
这个例子是ESLint审查

145
00:07:12,099 --> 0:07:13,800
WebKit博客上有

146
00:07:13,867 --> 0:07:15,936
关于创建网页查看器审核

147
00:07:16,503 --> 0:07:19,740
这篇博客深入讲解了

148
00:07:19,806 --> 0:07:23,243
以及使用审查框架的其他好处

149
00:07:23,677 --> 0:07:26,446
只要下载

150
00:07:27,247 --> 0:07:30,717
就能拖拽到网页查看器中

151
00:07:30,784 --> 0:07:31,919
导入它

152
00:07:34,154 --> 0:07:36,790
网页查看器的审查又快又方便

153
00:07:36,857 --> 0:07:38,292
希望你们可以尝试一下

154
00:07:38,358 --> 0:07:41,628
使用内置访问性审查

155
00:07:42,796 --> 0:07:45,465
使用便携的审查格式

156
00:07:45,532 --> 0:07:49,336
保证进程中的代码符合项目标准

157
00:07:49,937 --> 0:07:51,371
我们期待您的反馈

158
00:07:51,438 --> 0:07:53,774
如果发现任何问题

159
00:07:53,841 --> 0:07:55,576
也可提出特殊要求

160
00:07:56,243 --> 0:07:57,211
更多信息

161
00:07:57,277 --> 0:07:59,513
和其他相关资料

162
00:07:59,580 --> 0:08:03,517
请查看本视频相关讲演中的链接
