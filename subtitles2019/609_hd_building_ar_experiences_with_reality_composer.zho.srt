1
00:00:06,640 --> 0:00:10,511
（用REALITY COMPOSER

2
00:00:20,120 --> 0:00:22,222
早上好 很高兴看到你们

3
00:00:22,856 --> 0:00:25,158
我希望你们都能度过一个

4
00:00:26,159 --> 0:00:29,196
今天能来这里与大家分享

5
00:00:29,263 --> 0:00:31,632
用Reality Composer

6
00:00:32,566 --> 0:00:36,336
我是Michelle 稍后同事

7
00:00:36,870 --> 0:00:39,173
今天我们讲什么是

8
00:00:39,573 --> 0:00:41,408
以及它如何帮助你创建AR app

9
00:00:42,476 --> 0:00:43,577
在这场演讲之后

10
00:00:43,644 --> 0:00:46,046
你将了解Reality Composer

11
00:00:46,813 --> 0:00:48,215
以及如何在Reality Composer中

12
00:00:48,815 --> 0:00:51,818
然后如何接受…如何把你在

13
00:00:52,419 --> 0:00:53,787
迁移到Xcode中的app中

14
00:00:56,190 --> 0:00:58,592
那么首先什么是

15
00:00:59,459 --> 0:01:01,195
你在本周稍早些时候可能听说了

16
00:00:59,459 --> 0:01:01,195
你在本周稍早些时候可能听说了

17
00:01:01,995 --> 0:01:04,263
Reality Composer

18
00:01:04,331 --> 0:01:07,067
用于帮助iOS开发人员

19
00:01:07,501 --> 0:01:09,536
开始使用3D和AR

20
00:01:10,704 --> 0:01:12,806
你们中有些人已经开始使用

21
00:01:13,140 --> 0:01:15,609
在Reality Composer中

22
00:01:16,043 --> 0:01:18,912
你所创建、发布和标记的一切内容

23
00:01:18,979 --> 0:01:20,781
是一件非常、非常神奇的事

24
00:01:21,315 --> 0:01:23,016
因此请继续这样做

25
00:01:24,585 --> 0:01:26,320
如果你不熟悉3D

26
00:01:26,587 --> 0:01:30,891
你第一次打开3D app时

27
00:01:31,391 --> 0:01:35,262
是时候花时间来使用AR了

28
00:01:36,196 --> 0:01:37,698
但通过

29
00:01:38,232 --> 0:01:43,437
视觉化并展示你的体验是一件

30
00:01:43,504 --> 0:01:45,305
可以使用内置内容库实现

31
00:01:45,873 --> 0:01:49,843
或者如果你愿意

32
00:01:50,444 --> 0:01:54,248
如果你不熟悉的话

33
00:01:54,314 --> 0:01:56,149
Reality Composer

34
00:01:57,751 --> 0:01:59,553
一旦你展示出了体验

35
00:01:59,620 --> 0:02:02,122
你可以通过行为系统

36
00:01:59,620 --> 0:02:02,122
你可以通过行为系统

37
00:02:02,422 --> 0:02:06,059
甚至可以在你编写任何代码之前

38
00:02:06,527 --> 0:02:09,696
因此 它确实加速了体验自身的

39
00:02:10,697 --> 0:02:13,700
然后最后你在Reality Composer中

40
00:02:13,767 --> 0:02:15,969
你都可以直接迁移到

41
00:02:18,238 --> 0:02:21,708
关于增强现实的创建

42
00:02:22,509 --> 0:02:26,213
就是看到体验在物理空间中的感受

43
00:02:26,513 --> 0:02:28,315
在预期的设备上看它

44
00:02:28,382 --> 0:02:31,385
并了解你的观众可能会如何看到

45
00:02:32,686 --> 0:02:36,089
Reality Composer

46
00:02:36,690 --> 0:02:38,091
在iPhone和iPad上都可用

47
00:02:38,358 --> 0:02:43,297
你可在iOS上编辑它 从而你可以

48
00:02:43,797 --> 0:02:48,602
然后在iOS上进行编辑

49
00:02:48,969 --> 0:02:50,504
从而继续在iPad或

50
00:02:52,506 --> 0:02:56,176
或者你还可以在iOS设备上

51
00:02:56,910 --> 0:02:58,078
并以另一种方式进行编辑

52
00:03:03,116 --> 0:03:05,419
今天我要给你们介绍创建场景

53
00:03:05,953 --> 0:03:08,589
Pau会讲添加行为和使用物理世界

54
00:03:09,156 --> 0:03:11,592
然后Abhi会讲创建app

55
00:03:11,658 --> 0:03:13,060
（创建场景）

56
00:03:13,627 --> 0:03:15,863
对于创建场景

57
00:03:17,197 --> 0:03:18,532
首先场景是什么？

58
00:03:18,599 --> 0:03:23,036
你可能在RealityKit入门

59
00:03:23,103 --> 0:03:24,505
和Reality Composer

60
00:03:24,872 --> 0:03:28,242
Reality Composer

61
00:03:28,709 --> 0:03:31,245
包含锚点、对象、

62
00:03:32,045 --> 0:03:33,881
行为和物理世界

63
00:03:36,183 --> 0:03:38,252
每个场景都恰好只有一个锚点

64
00:03:38,585 --> 0:03:42,089
当你开始一个项目或当你开始一个

65
00:03:42,756 --> 0:03:46,393
你都会被问到你在营造什么样的场景

66
00:03:47,461 --> 0:03:51,965
如果你要创建房间里、舞台上

67
00:03:52,533 --> 0:03:53,767
你要选择水平锚点

68
00:03:54,801 --> 0:03:57,204
如果你希望它在墙面上

69
00:03:58,405 --> 0:04:00,174
如果你正在增强一本书

70
00:03:58,405 --> 0:04:00,174
如果你正在增强一本书

71
00:04:00,440 --> 0:04:04,244
或一些包装、一本手册

72
00:04:05,078 --> 0:04:06,079
请选择图像锚点

73
00:04:06,747 --> 0:04:10,150
对于自拍效果 比如眼镜或帽子

74
00:04:10,884 --> 0:04:11,785
请选择面部锚点

75
00:04:12,786 --> 0:04:15,222
项目可以有多个场景

76
00:04:15,556 --> 0:04:17,858
但我认为你会发现当你第一次尝试时

77
00:04:17,925 --> 0:04:19,726
一个或两个场景通常就足够了

78
00:04:21,827 --> 0:04:22,930
好的 在这个例子中

79
00:04:22,996 --> 0:04:25,265
让我们假设你已经选择了水平锚点

80
00:04:25,866 --> 0:04:27,601
我们在这里

81
00:04:28,435 --> 0:04:30,637
在Reality Composer中

82
00:04:31,238 --> 0:04:34,374
它的布局和你在AR中看到的

83
00:04:34,942 --> 0:04:37,477
布局位于主视图端口或工作空间中

84
00:04:38,312 --> 0:04:39,780
右侧的面板…

85
00:04:41,014 --> 0:04:43,383
显示了你所选择的所有属性

86
00:04:44,051 --> 0:04:46,653
并显示配置该实体的各种选项

87
00:04:47,154 --> 0:04:50,858
可以是对象自身

88
00:04:50,924 --> 0:04:53,527
你可以看到它因为圆环而被选中

89
00:04:54,895 --> 0:04:56,597
你可以选择对象

90
00:04:56,997 --> 0:04:57,831
或一个场景

91
00:04:59,166 --> 0:05:00,367
我可以给你展示更多的幻灯片

92
00:04:59,166 --> 0:05:00,367
我可以给你展示更多的幻灯片

93
00:05:00,634 --> 0:05:04,404
但我们为什么不一起在iPad上

94
00:05:05,272 --> 0:05:07,641
哦 不过我希望你们记住这个场景

95
00:05:07,708 --> 0:05:10,310
因为我们要在本场演讲过程中

96
00:05:10,711 --> 0:05:12,179
一起创建这个小教程

97
00:05:12,546 --> 0:05:15,649
它是季节和太阳系课程

98
00:05:16,183 --> 0:05:17,217
我们要在AR中创建它

99
00:05:21,221 --> 0:05:22,756
好的 为了我们的演示

100
00:05:23,524 --> 0:05:27,928
我要给你讲三个完全不同的RC项目

101
00:05:28,529 --> 0:05:30,030
第一个有点像是初级版

102
00:05:32,399 --> 0:05:36,403
它会给你展示五个

103
00:05:36,703 --> 0:05:38,672
你可以在Reality Composer中

104
00:05:38,739 --> 0:05:40,307
很可能几分钟后你就会看到它

105
00:05:41,175 --> 0:05:46,613
第二个是一个丰富得多

106
00:05:46,680 --> 0:05:50,150
一个完整体验 关于你可以在

107
00:05:50,951 --> 0:05:52,686
如果你不想写任何代码的话

108
00:05:52,753 --> 0:05:54,488
这非常棒 如果你不是个开发人员

109
00:05:54,755 --> 0:05:55,956
或你只是刚开始尝试

110
00:05:56,023 --> 0:05:58,192
并且你希望在开发app时

111
00:05:58,492 --> 0:05:59,960
在完全投入使用它之前

112
00:06:00,894 --> 0:06:02,196
先尝试一下体验的话

113
00:06:02,930 --> 0:06:07,501
最后我们要一起创建我们看到的那个

114
00:06:08,135 --> 0:06:09,837
好的 那么这里是初级版…

115
00:06:10,938 --> 0:06:11,905
在Reality Composer中

116
00:06:13,307 --> 0:06:14,842
我要把我们带到AR中

117
00:06:15,442 --> 0:06:18,045
因为我们打算在AR中看它

118
00:06:19,012 --> 0:06:21,081
好的 这是我提到过的五个例子

119
00:06:21,148 --> 0:06:22,549
让我们按播放…

120
00:06:23,217 --> 0:06:25,786
以便我们可以看到交互

121
00:06:26,253 --> 0:06:27,454
当我们开始之后

122
00:06:28,121 --> 0:06:29,323
我们就 哦 大家好

123
00:06:30,390 --> 0:06:32,960
当我们开始之后 螺旋开始旋转

124
00:06:33,594 --> 0:06:36,129
在这里 如果我在第二个例子中

125
00:06:36,630 --> 0:06:37,965
我可以让这个棋子抖动

126
00:06:39,666 --> 0:06:41,368
我可以轻触这个棋子 获得物理移动

127
00:06:42,436 --> 0:06:43,470
并得到一个声音

128
00:06:44,037 --> 0:06:45,038
这是一种很有意思的声音

129
00:06:46,406 --> 0:06:48,742
然后有人问我 如果我是个动画师

130
00:06:48,809 --> 0:06:51,345
并且我有自己的模型

131
00:06:51,712 --> 0:06:53,080
我有自己的动画

132
00:06:53,580 --> 0:06:55,516
我是否可以把它们放到

133
00:06:55,582 --> 0:06:57,017
是的 你可以

134
00:06:57,851 --> 0:07:00,754
你可以在用户交互上触发它们

135
00:06:57,851 --> 0:07:00,754
你可以在用户交互上触发它们

136
00:07:01,288 --> 0:07:02,489
如果你不是动画师

137
00:07:02,890 --> 0:07:04,491
你可以在场景中的任意对象上

138
00:07:04,558 --> 0:07:06,860
使用预制的强调动画

139
00:07:07,127 --> 0:07:09,563
在这里我们已经把它们应用到了

140
00:07:09,630 --> 0:07:12,533
但你可以把它们应用到 你知道的

141
00:07:15,135 --> 0:07:16,403
这就是AR中的场景

142
00:07:21,642 --> 0:07:23,010
接下来我给你展示…

143
00:07:23,544 --> 0:07:27,047
这个更复杂的体验 更丰富的体验

144
00:07:28,448 --> 0:07:31,485
哦 你很可能在想

145
00:07:31,752 --> 0:07:32,653
移动摄像头

146
00:07:32,920 --> 0:07:36,657
对于平移 我所做的就是用两根手指

147
00:07:37,090 --> 0:07:38,992
像这样移动它们

148
00:07:39,326 --> 0:07:41,762
从而我可以看到我想要看的内容

149
00:07:42,863 --> 0:07:45,566
如果你观看了周二的极限特工

150
00:07:45,632 --> 0:07:47,334
你可能会觉得这个小岛很眼熟

151
00:07:47,935 --> 0:07:49,937
我们希望能再增加一些体验

152
00:07:50,003 --> 0:07:53,473
因此如果你想象你正在开发

153
00:07:53,540 --> 0:07:56,743
或旅游中心体验

154
00:07:57,110 --> 0:07:59,513
这是我们在这里所设想的东西

155
00:08:00,314 --> 0:08:02,349
让我们在AR中看一下这个

156
00:08:03,650 --> 0:08:06,887
我要按播放从而开始播放

157
00:08:11,158 --> 0:08:12,826
你可以听到一些波浪声

158
00:08:15,195 --> 0:08:18,732
现在提示我们轻触直升飞机

159
00:08:22,769 --> 0:08:25,939
你可以看到还要求我们轻触位置

160
00:08:26,773 --> 0:08:29,109
因此我要轻触这些标记

161
00:08:29,176 --> 0:08:33,614
你可以看到我得到了关于我所轻触的

162
00:08:34,881 --> 0:08:35,948
其它位置都消退了

163
00:08:44,024 --> 0:08:47,394
我还要拆开来讲

164
00:08:49,162 --> 0:08:52,332
那么…实际上在这个场景中

165
00:08:52,399 --> 0:08:55,602
并没有太多自定义内容

166
00:08:55,936 --> 0:08:58,772
只有设计师创建的两个

167
00:08:58,839 --> 0:09:00,774
小岛和直升机

168
00:08:58,839 --> 0:09:00,774
小岛和直升机

169
00:09:00,841 --> 0:09:02,376
你可以看到在这里我们导入了它们

170
00:09:02,442 --> 0:09:03,777
如果你想的话 你可以导入更多

171
00:09:04,311 --> 0:09:08,081
其余的都是从内容库中创建的

172
00:09:08,382 --> 0:09:09,383
内容库是与

173
00:09:09,449 --> 0:09:10,817
你可以看到我们在这里有许多东西

174
00:09:12,386 --> 0:09:13,687
文本、基本形状

175
00:09:13,987 --> 0:09:16,423
这就是你在这个场景中所看到的东西

176
00:09:16,490 --> 0:09:19,159
这些标记只是基本形状

177
00:09:19,760 --> 0:09:23,363
我们把它们合在一起

178
00:09:24,298 --> 0:09:25,599
在这里添加文本

179
00:09:26,900 --> 0:09:28,402
我们还经常被问到另一个问题

180
00:09:28,836 --> 0:09:33,574
我主要在2D中工作

181
00:09:34,875 --> 0:09:36,109
你知道的 公司的图像

182
00:09:36,176 --> 0:09:37,878
我可以在Reality Composer中

183
00:09:38,412 --> 0:09:39,479
答案为是的

184
00:09:39,546 --> 0:09:40,480
你当然可以了！

185
00:09:40,948 --> 0:09:42,449
你可以把它们带到体验中来…

186
00:09:44,518 --> 0:09:47,554
因为照片使用图片框架

187
00:09:47,621 --> 0:09:49,990
图片框架就包含在

188
00:09:51,859 --> 0:09:52,860
就在Finally中

189
00:09:54,194 --> 0:09:57,331
你很可能在想我们要如何创建

190
00:09:57,731 --> 0:09:59,366
如果我们进入行为

191
00:09:59,433 --> 0:10:03,003
通过点击右上方的行为按钮

192
00:09:59,433 --> 0:10:03,003
通过点击右上方的行为按钮

193
00:10:04,238 --> 0:10:07,808
你可以看到我们用于创建

194
00:10:08,742 --> 0:10:09,676
和那些交互的行为

195
00:10:09,743 --> 0:10:12,546
我们在宣传要看的东西

196
00:10:12,613 --> 0:10:14,515
你可能已经注意到随着我移动场景

197
00:10:14,982 --> 0:10:16,416
场景中的那些对象都盯着我看

198
00:10:17,651 --> 0:10:20,254
我们在这里使用了

199
00:10:20,687 --> 0:10:22,222
从而让一切东西都盯着摄像头看

200
00:10:23,190 --> 0:10:25,292
开始你只看到了小岛

201
00:10:27,094 --> 0:10:28,562
其它一切都是隐藏的

202
00:10:28,629 --> 0:10:30,297
你可以看到我们隐藏了其它东西

203
00:10:30,797 --> 0:10:32,766
然后我们依次把它们展示给你

204
00:10:33,033 --> 0:10:34,935
我们等0.2秒

205
00:10:35,402 --> 0:10:38,305
然后我们首先显示了直升机文本

206
00:10:39,173 --> 0:10:41,875
然后我们显示了直升机

207
00:10:42,643 --> 0:10:45,546
然后我们淡入了下边的标记

208
00:10:45,612 --> 0:10:47,247
这就是下边的动作

209
00:10:47,314 --> 0:10:50,284
我现在就可以给你预览一下

210
00:10:53,153 --> 0:10:56,223
我还要给你展示一个小秘密

211
00:10:57,591 --> 0:10:58,825
这些鸟…

212
00:10:59,326 --> 0:11:00,294
你可能已经注意到了…

213
00:10:59,326 --> 0:11:00,294
你可能已经注意到了…

214
00:11:06,033 --> 0:11:07,601
我要从这里看它们

215
00:11:08,068 --> 0:11:11,371
我们要求它们以群组为单位

216
00:11:12,339 --> 0:11:14,942
它们根本不是真实的鸟

217
00:11:15,475 --> 0:11:18,679
它们只是我们所使用的基本体

218
00:11:18,745 --> 0:11:19,947
或只是基础形状

219
00:11:20,214 --> 0:11:24,985
我们放了两张移动卡片

220
00:11:25,052 --> 0:11:27,187
我们不再花时间创建小鸟了

221
00:11:27,454 --> 0:11:31,558
我们所做的就是获取一对形状

222
00:11:32,125 --> 0:11:33,126
从而形成动画

223
00:11:33,927 --> 0:11:36,296
如果你之前尝试过制作动画

224
00:11:36,363 --> 0:11:39,433
你就知道创建一个这么简单的东西

225
00:11:39,733 --> 0:11:41,235
而这样只需要几秒钟

226
00:11:43,537 --> 0:11:47,508
那么这是一个你可以

227
00:11:48,141 --> 0:11:51,545
完全不需要代码就能实现的

228
00:11:52,079 --> 0:11:53,947
最棒的是

229
00:11:54,014 --> 0:11:56,083
一旦你拥有这个Reality文件

230
00:11:56,550 --> 0:12:00,554
你就可以把它分享给任何人并可以在

231
00:11:56,550 --> 0:12:00,554
你就可以把它分享给任何人并可以在

232
00:12:01,054 --> 0:12:03,624
而你得到的体验与你在

233
00:12:04,758 --> 0:12:05,893
那么这是第二个项目

234
00:12:12,533 --> 0:12:13,834
最后让我们一起创建…

235
00:12:14,334 --> 0:12:16,870
那个季节课程的体验

236
00:12:17,504 --> 0:12:20,340
我要添加三个天体

237
00:12:21,341 --> 0:12:22,876
太阳、月球和地球

238
00:12:23,544 --> 0:12:25,879
为此我只需要用一些占位符对象

239
00:12:26,380 --> 0:12:29,583
画出场景的草图就可以开始了

240
00:12:30,350 --> 0:12:31,652
这是太阳 我已经把它引入进来了

241
00:12:33,453 --> 0:12:34,588
现在我要…

242
00:12:36,223 --> 0:12:37,324
复制它…

243
00:12:39,359 --> 0:12:42,029
来创建…地球

244
00:12:43,664 --> 0:12:46,600
我只需要在这里使用捏合

245
00:12:47,201 --> 0:12:48,235
移动摄像头

246
00:12:48,302 --> 0:12:50,971
让我们…抓住这个箭头

247
00:12:51,438 --> 0:12:52,372
把地球移过去

248
00:12:53,707 --> 0:12:54,942
然后接下来…

249
00:12:55,576 --> 0:12:57,277
我还需要一个月球

250
00:12:58,011 --> 0:12:59,746
让我们再次复制它

251
00:13:00,681 --> 0:13:01,915
把它带到这里

252
00:13:03,917 --> 0:13:06,453
然后我可以抓住这个圆环上的

253
00:13:06,520 --> 0:13:07,454
从而把它移到这个平面上来

254
00:13:08,355 --> 0:13:09,289
让我们把它移过来

255
00:13:09,590 --> 0:13:10,624
好的 很棒

256
00:13:11,291 --> 0:13:13,627
现在我想稍微把月球缩小点

257
00:13:14,394 --> 0:13:17,397
我只需要抓住圆环并向内移动

258
00:13:20,267 --> 0:13:21,168
好了

259
00:13:21,702 --> 0:13:22,870
把它移近一些

260
00:13:24,071 --> 0:13:25,539
好的 我们有这三个天体

261
00:13:25,906 --> 0:13:27,374
让我们把太阳放大一些

262
00:13:27,441 --> 0:13:28,408
我再次抓住这个圆环

263
00:13:29,009 --> 0:13:30,177
只需要抓住它就能调整尺寸

264
00:13:31,578 --> 0:13:32,479
调整太阳的尺寸

265
00:13:34,448 --> 0:13:36,116
我们已经有了三个主体

266
00:13:37,885 --> 0:13:40,254
接下来我要添加一些文本

267
00:13:40,687 --> 0:13:42,022
我要再次进入内容库

268
00:13:42,689 --> 0:13:43,524
让我们获取文本

269
00:13:44,224 --> 0:13:47,528
看起来比我预期的位置要低一些

270
00:13:47,594 --> 0:13:50,564
我只需要抓住这个绿色箭头

271
00:13:51,365 --> 0:13:53,667
你可以看到它弹出显示在地平面上

272
00:13:54,101 --> 0:13:57,538
那是因为我打开了吸附功能

273
00:13:57,604 --> 0:13:59,973
如果你看一下左边的角落

274
00:14:00,040 --> 0:14:02,676
如果我想自由移动物体

275
00:14:02,743 --> 0:14:05,345
但实际上我只想拉动这个蓝色箭头

276
00:14:06,813 --> 0:14:10,250
我希望它距离太阳

277
00:14:12,853 --> 0:14:13,887
大概半米左右…

278
00:14:14,821 --> 0:14:17,324
我要打开我们在右侧看到的面板

279
00:14:17,858 --> 0:14:19,026
用来修改文本

280
00:14:19,693 --> 0:14:21,762
让我们把它修改为秋季

281
00:14:25,332 --> 0:14:28,635
在Composer中添加这些元素

282
00:14:32,005 --> 0:14:34,441
最后我认为这就是我想要得到的效果

283
00:14:34,508 --> 0:14:37,044
因此我只需要使用手指触摸屏幕

284
00:14:37,110 --> 0:14:37,945
就可以四处移动摄像头

285
00:14:41,281 --> 0:14:44,084
接下来我要添加…一个箭头

286
00:14:46,954 --> 0:14:49,056
它并没有指向我希望它指向的方向

287
00:14:49,556 --> 0:14:50,390
旋转一下

288
00:14:50,457 --> 0:14:54,928
我要移动摄像头

289
00:14:55,362 --> 0:14:57,497
它位于地平面上

290
00:14:57,831 --> 0:15:01,101
这个圆圈随着摄像头的移动而旋转

291
00:14:57,831 --> 0:15:01,101
这个圆圈随着摄像头的移动而旋转

292
00:15:01,168 --> 0:15:04,538
我总是可以处于我想处于的平面上

293
00:15:05,072 --> 0:15:08,175
如果我不想通过移动摄像头来实现

294
00:15:08,242 --> 0:15:12,079
我只需要轻触箭头即可

295
00:15:12,145 --> 0:15:13,647
你可以看到圆环变得有点扁了

296
00:15:14,281 --> 0:15:16,083
我只需要旋转…

297
00:15:16,583 --> 0:15:19,052
这个区域 它正以15度角增量

298
00:15:19,119 --> 0:15:20,954
再一次 因为我打开了吸附功能

299
00:15:21,522 --> 0:15:24,424
但如果我不想让它吸附的话

300
00:15:24,491 --> 0:15:25,559
在这里我拖动它

301
00:15:25,626 --> 0:15:29,162
它总是在水平面上移动

302
00:15:29,229 --> 0:15:30,264
在这个绿色圆环上移动

303
00:15:30,797 --> 0:15:34,001
但我实际上希望它吸附在

304
00:15:34,067 --> 0:15:35,602
太阳球体和秋季文本之间

305
00:15:35,669 --> 0:15:36,770
因此我要打开吸附功能

306
00:15:38,272 --> 0:15:39,306
你可以看到它吸附到那个位置了

307
00:15:39,673 --> 0:15:42,176
这超级有用 超级简单

308
00:15:42,943 --> 0:15:43,777
然后…

309
00:15:44,711 --> 0:15:46,647
我想稍微修改一下这个箭头

310
00:15:47,114 --> 0:15:52,419
我可以继续并点击

311
00:15:53,187 --> 0:15:55,989
我要把它稍微放大点

312
00:15:56,990 --> 0:15:58,392
我可以抓住这个手柄

313
00:15:58,792 --> 0:15:59,626
拖动它

314
00:16:00,827 --> 0:16:03,997
我还要把这个稍微变小点

315
00:16:04,665 --> 0:16:05,532
稍微变平点

316
00:16:07,034 --> 0:16:10,804
好的 然后我要把它移远一些

317
00:16:12,506 --> 0:16:14,341
好的 现在一切都好像被挡住了

318
00:16:14,675 --> 0:16:15,943
我们只花了几分钟就实现了

319
00:16:17,444 --> 0:16:20,180
我实际上想替换这些天体

320
00:16:20,247 --> 0:16:22,549
因为它们现在看起来都非常模糊

321
00:16:22,616 --> 0:16:24,952
我想导入一些自定义USDZ

322
00:16:25,752 --> 0:16:28,722
因为我已经把它们放在我想要放的

323
00:16:29,256 --> 0:16:30,257
我要做一次替换

324
00:16:30,324 --> 0:16:32,192
因此我只需要轻触这个对象

325
00:16:32,492 --> 0:16:33,727
我得到了这个编辑菜单

326
00:16:34,094 --> 0:16:35,095
点击替换

327
00:16:35,162 --> 0:16:36,296
我要导入…

328
00:16:38,632 --> 0:16:39,600
太阳…

329
00:16:42,069 --> 0:16:44,037
这将替换太阳

330
00:16:44,104 --> 0:16:45,939
你可以看到尺寸一样

331
00:16:46,206 --> 0:16:48,308
并且它正好是在

332
00:16:50,744 --> 0:16:52,012
我可以采用同样的方式…

333
00:16:52,713 --> 0:16:53,614
替换地球

334
00:16:54,948 --> 0:16:56,216
让我们快速实现一下

335
00:16:58,218 --> 0:16:59,186
好了

336
00:16:59,653 --> 0:17:01,822
还有月球 我要…

337
00:16:59,653 --> 0:17:01,822
还有月球 我要…

338
00:17:03,357 --> 0:17:05,459
对它进行一些自定义 通过一些

339
00:17:05,925 --> 0:17:07,861
让我们看一下 我想要地图材料

340
00:17:08,395 --> 0:17:10,631
我可以让月球显示我想要显示的颜色

341
00:17:10,696 --> 0:17:12,665
但我认为

342
00:17:12,733 --> 0:17:14,902
为了安全起见我要选择灰色

343
00:17:17,538 --> 0:17:19,839
如果我想更好地查看任何一项

344
00:17:20,440 --> 0:17:22,742
我只需要双击来框住对象

345
00:17:23,176 --> 0:17:24,778
这是在场景中四处游逛的一种

346
00:17:25,779 --> 0:17:27,848
或如果我想查看场景 向后拉

347
00:17:28,515 --> 0:17:30,884
我可以双击网格中的任意位置

348
00:17:31,218 --> 0:17:32,085
来查看场景

349
00:17:32,419 --> 0:17:33,487
这里还可以使用那些快捷方式

350
00:17:33,554 --> 0:17:36,823
框住场景或框住所选定的东西

351
00:17:39,860 --> 0:17:43,730
好的 我想我们已经准备好

352
00:17:44,064 --> 0:17:45,999
我可以添加所有其它元素

353
00:17:46,066 --> 0:17:48,468
但由于时间关系

354
00:17:49,503 --> 0:17:51,305
在我们完成这部分演示之前

355
00:17:52,039 --> 0:17:54,641
我想与你们分享一些小窍门

356
00:17:55,742 --> 0:17:57,144
你看到那个替换了吗？

357
00:17:57,945 --> 0:17:59,913
如果我们已经应用了行为

358
00:17:59,980 --> 0:18:02,916
就像我们做其它动画一样 比如

359
00:17:59,980 --> 0:18:02,916
就像我们做其它动画一样 比如

360
00:18:02,983 --> 0:18:05,385
假如是太阳 如果我替换它

361
00:18:05,986 --> 0:18:07,154
那些行为将会保留下来

362
00:18:07,221 --> 0:18:08,522
这会节约很多时间

363
00:18:08,589 --> 0:18:11,291
如果你只想替换新内容的话

364
00:18:12,159 --> 0:18:13,193
这个技巧很强大

365
00:18:14,161 --> 0:18:16,463
然后同时我们提到了拥有多个场景

366
00:18:16,530 --> 0:18:19,700
你可以在左上方的场景选择器中

367
00:18:20,334 --> 0:18:22,336
因此如果你想添加更多场景

368
00:18:22,402 --> 0:18:23,403
你只需要在这里添加即可

369
00:18:27,708 --> 0:18:30,944
如果你正在Xcode中

370
00:18:31,011 --> 0:18:32,145
你一定想给它们命名

371
00:18:32,412 --> 0:18:34,681
你将在演讲的后半部分了解

372
00:18:35,282 --> 0:18:37,017
你可以在打开面板时就开始命名

373
00:18:37,084 --> 0:18:39,686
有一个配置面板

374
00:18:40,053 --> 0:18:41,221
我要把它命名为太阳

375
00:18:43,757 --> 0:18:46,193
最后如果有一些你不想做的操作

376
00:18:46,260 --> 0:18:48,362
比如假如我移动了地球

377
00:18:49,196 --> 0:18:50,464
但我却不想这样做

378
00:18:50,531 --> 0:18:51,965
我可以撤销那个动作

379
00:18:52,466 --> 0:18:55,302
我还可以长按

380
00:18:57,004 --> 0:19:00,307
并重做 它会告诉我说

381
00:18:57,004 --> 0:19:00,307
并重做 它会告诉我说

382
00:19:00,607 --> 0:19:05,546
我即将调用的撤销会做什么

383
00:19:07,147 --> 0:19:08,081
好的

384
00:19:09,683 --> 0:19:11,718
最后有些人问我

385
00:19:11,785 --> 0:19:13,387
共享RC项目的最简单的方式是什么

386
00:19:13,754 --> 0:19:16,490
你可以在设备间进行隔空投送

387
00:19:16,890 --> 0:19:19,826
或像我们之前讲过的那样

388
00:19:20,260 --> 0:19:23,997
轻松地在开发机器和iOS设备之间

389
00:19:25,799 --> 0:19:26,733
好的

390
00:19:28,268 --> 0:19:32,005
我们现在得到了这个场景

391
00:19:33,173 --> 0:19:37,211
你刚了解了如何

392
00:19:37,945 --> 0:19:40,714
我要带你们了解如何使用内容库

393
00:19:41,114 --> 0:19:42,482
进行快速布局

394
00:19:42,816 --> 0:19:45,686
我们刚才还讲了

395
00:19:47,821 --> 0:19:52,459
现在我们将转到添加交互和行为上

396
00:19:52,526 --> 0:19:54,161
为了让你们了解这些内容

397
00:19:54,461 --> 0:19:55,863
让我们欢迎我的同事Pau上台来

398
00:19:59,933 --> 0:20:01,101
谢谢Michelle

399
00:19:59,933 --> 0:20:01,101
谢谢Michelle

400
00:20:02,202 --> 0:20:03,270
好的

401
00:20:03,337 --> 0:20:04,404
（添加行为）

402
00:20:05,138 --> 0:20:08,976
现在我们了解了如何向场景中

403
00:20:09,443 --> 0:20:11,912
现在是时候让全部这些内容动起来了

404
00:20:12,913 --> 0:20:17,217
当用户轻触某个对象时

405
00:20:17,584 --> 0:20:20,687
或当用户靠近某个对象时

406
00:20:21,622 --> 0:20:24,024
或也许你只想播放一些USD动画

407
00:20:25,158 --> 0:20:26,660
为了实现这些功能以及更多功能

408
00:20:27,094 --> 0:20:29,463
我们需要利用

409
00:20:30,464 --> 0:20:31,431
让我们开始吧

410
00:20:32,866 --> 0:20:33,967
正如我们之前所看到的

411
00:20:34,034 --> 0:20:36,103
Reality Composer

412
00:20:36,470 --> 0:20:38,939
对象、行为和物理世界

413
00:20:39,973 --> 0:20:41,808
行为总是发生在场景范围内

414
00:20:41,875 --> 0:20:44,945
意思是你只能在同一个场景内

415
00:20:47,614 --> 0:20:49,483
让我们具体看一下什么是行为

416
00:20:50,751 --> 0:20:52,719
行为由两种东西组成

417
00:20:53,120 --> 0:20:54,855
触发器和动作序列

418
00:20:55,622 --> 0:20:57,090
触发器 正如它的名字所暗示的那样

419
00:20:57,157 --> 0:20:59,893
其实就是动作序列开始的条件

420
00:21:01,028 --> 0:21:03,797
假如我们有一个场景是

421
00:21:04,431 --> 0:21:05,566
当用户轻触它时

422
00:21:05,632 --> 0:21:08,402
我们想播放一些音乐同时进行旋转

423
00:21:09,536 --> 0:21:12,339
嗯 为了实现这个功能

424
00:21:13,307 --> 0:21:14,575
使用轻触触发器

425
00:21:14,641 --> 0:21:17,711
然后创建一个动作序列

426
00:21:17,778 --> 0:21:18,846
由音乐动作和旋转动作组成

427
00:21:20,814 --> 0:21:23,083
当创建新行为时 第一件事是

428
00:21:23,150 --> 0:21:26,820
选择要开始动作序列的触发器

429
00:21:28,021 --> 0:21:30,591
Reality Composer

430
00:21:33,193 --> 0:21:34,261
使用开始触发器

431
00:21:34,328 --> 0:21:37,231
将在场景加载完成后尽快开始

432
00:21:39,366 --> 0:21:42,202
使用轻触触发器

433
00:21:42,269 --> 0:21:44,972
将在用户轻触你所定义的对象时

434
00:21:46,807 --> 0:21:48,041
使用接近触发器

435
00:21:48,108 --> 0:21:50,844
你要定义对象到摄像头的临界距离

436
00:21:51,778 --> 0:21:53,981
一旦摄像头距离对象足够近

437
00:21:54,047 --> 0:21:55,382
就开始动作序列

438
00:21:57,684 --> 0:21:59,953
使用碰撞触发器 你要定义两个对象

439
00:22:00,287 --> 0:22:01,989
一旦这两个对象发生碰撞

440
00:22:02,823 --> 0:22:04,258
就开始动作序列

441
00:22:05,192 --> 0:22:07,127
最后一个触发器是通知触发器

442
00:22:07,761 --> 0:22:10,864
这个触发器可以让你

443
00:22:10,931 --> 0:22:12,232
以编程方式从app中开始动作序列

444
00:22:12,499 --> 0:22:15,636
我们将在本场演讲的最后一部分

445
00:22:17,704 --> 0:22:19,907
现在让我们谈一下动作序列

446
00:22:21,742 --> 0:22:22,910
你有三种主要方式

447
00:22:22,976 --> 0:22:25,579
修改动作序列的执行

448
00:22:25,646 --> 0:22:26,480
（动作序列）

449
00:22:26,547 --> 0:22:29,816
分别是群组、循环和独有动作序列

450
00:22:31,218 --> 0:22:32,085
让我们从群组开始讲

451
00:22:33,754 --> 0:22:36,723
默认情况下在Reality Composer中

452
00:22:36,790 --> 0:22:38,559
因此动作一个接一个地播放

453
00:22:39,159 --> 0:22:41,295
但你可以合并多个动作

454
00:22:41,361 --> 0:22:42,696
如果你想让动作并行播放的话

455
00:22:43,163 --> 0:22:45,933
在这个例子中 在动作一完成之后

456
00:22:46,266 --> 0:22:47,901
动作二和动作三可以立即同时播放

457
00:22:48,402 --> 0:22:52,806
动作四只能在群组中所有动作

458
00:22:52,873 --> 0:22:54,107
（群组）

459
00:22:55,742 --> 0:22:57,211
动作序列还可以进行循环

460
00:22:58,078 --> 0:23:00,647
假如你想在场景中播放一些音乐

461
00:22:58,078 --> 0:23:00,647
假如你想在场景中播放一些音乐

462
00:23:00,914 --> 0:23:02,583
并且你想永久循环那首音乐

463
00:23:03,083 --> 0:23:06,453
嗯 你只需要创建一个行为

464
00:23:06,520 --> 0:23:07,588
把音乐动作放在动作序列中

465
00:23:07,654 --> 0:23:09,623
并把动作序列标记为循环即可

466
00:23:12,226 --> 0:23:14,695
最后一部分是独有动作序列

467
00:23:15,462 --> 0:23:18,732
在Reality Composer中

468
00:23:20,300 --> 0:23:23,504
每次只能播放一个独有动作序列

469
00:23:24,204 --> 0:23:27,541
那意味着一旦开始独有动作序列

470
00:23:28,175 --> 0:23:30,777
或将会停止其它正在运行的

471
00:23:31,712 --> 0:23:35,048
非独有的动作序列也会播放

472
00:23:35,516 --> 0:23:38,585
比如与其它独有

473
00:23:40,220 --> 0:23:43,457
关于动作序列 你了解这么多就够了

474
00:23:43,757 --> 0:23:46,260
现在让我们看一下

475
00:23:46,727 --> 0:23:47,828
在Reality Composer

476
00:23:50,631 --> 0:23:51,932
使用可见度动作

477
00:23:52,199 --> 0:23:55,903
你可以使用动作在场景中

478
00:23:56,837 --> 0:23:59,773
我们支持多种类型的动画

479
00:23:59,840 --> 0:24:02,643
并且你可以使用一些基础功能

480
00:23:59,840 --> 0:24:02,643
并且你可以使用一些基础功能

481
00:24:03,610 --> 0:24:06,280
但你还可以使用更好玩的动画比如

482
00:24:06,613 --> 0:24:09,850
放大然后缩小

483
00:24:13,187 --> 0:24:16,823
Reality Composer

484
00:24:18,091 --> 0:24:20,160
重点是与所显示的高度相似

485
00:24:20,227 --> 0:24:24,198
你可以给对象施加不同的动作类型

486
00:24:25,132 --> 0:24:27,067
你可以使用BasicPop

487
00:24:27,801 --> 0:24:31,305
但你还可以使用更好玩的弹出动画

488
00:24:33,106 --> 0:24:35,475
你还可以旋转对象或

489
00:24:36,610 --> 0:24:37,911
让对象围绕其它对象环绕运动

490
00:24:37,978 --> 0:24:40,380
如果你在文件中使用了USD资产

491
00:24:40,747 --> 0:24:42,983
你可以使用它们的转换和骨骼动画

492
00:24:46,320 --> 0:24:48,021
对于移动动作

493
00:24:48,088 --> 0:24:51,525
你可以同时平移、缩放和旋转对象

494
00:24:52,626 --> 0:24:53,627
使用移动由

495
00:24:53,694 --> 0:24:56,363
将相对于对象目前所在位置移动

496
00:24:57,030 --> 0:24:58,031
比如在这个例子中

497
00:24:58,098 --> 0:25:01,935
对象总是会向前移动两格

498
00:24:58,098 --> 0:25:01,935
对象总是会向前移动两格

499
00:25:03,303 --> 0:25:06,073
使用移动到 你总是可以把对象

500
00:25:06,139 --> 0:25:07,875
移动到场景中的指定位置

501
00:25:08,609 --> 0:25:11,945
就像这里 对象将返回场景中的

502
00:25:15,749 --> 0:25:18,719
使用Look At

503
00:25:19,953 --> 0:25:23,423
就像在这个例子中

504
00:25:23,490 --> 0:25:24,791
（看动作）

505
00:25:25,759 --> 0:25:26,960
（音频动作）

506
00:25:27,861 --> 0:25:30,197
现在我们已经有了所有的动画动作

507
00:25:30,864 --> 0:25:33,500
是时候给你的体验添加一些声音了

508
00:25:34,101 --> 0:25:36,537
在Reality Composer中

509
00:25:36,603 --> 0:25:38,172
可以给你的场景中添加音频

510
00:25:39,573 --> 0:25:42,409
使用播放声音将从对象自身播放音频

511
00:25:42,976 --> 0:25:46,046
就像这里 马正在发出嘶鸣声

512
00:25:47,047 --> 0:25:49,750
使用环绕播放将面向场景发出声音

513
00:25:50,551 --> 0:25:51,952
使用播放音乐

514
00:25:52,452 --> 0:25:55,422
不需要任何转换即可播放音频

515
00:25:57,291 --> 0:25:59,126
现在让我们做一个快速演示

516
00:25:59,193 --> 0:26:02,396
让我们迅速看一下如何把一些行为

517
00:25:59,193 --> 0:26:02,396
让我们迅速看一下如何把一些行为

518
00:26:02,663 --> 0:26:04,498
引入到Michelle

519
00:26:05,199 --> 0:26:07,835
在这里我们有一个

520
00:26:08,635 --> 0:26:10,504
比Michelle所创建的场景

521
00:26:10,571 --> 0:26:13,407
这里我们有月球、地球和太阳

522
00:26:13,473 --> 0:26:17,277
我们有一些文本和太阳光线

523
00:26:18,745 --> 0:26:20,647
让我们打开行为面板

524
00:26:20,714 --> 0:26:23,483
点击右上角的行为按钮即可打开它

525
00:26:26,019 --> 0:26:28,288
你可以在这里看到已经有一些行为了

526
00:26:28,789 --> 0:26:32,926
让我们点击播放

527
00:26:34,995 --> 0:26:38,265
在这里你可以看到月球、地球

528
00:26:38,999 --> 0:26:43,170
但以相继次序出现不同的光线、

529
00:26:44,404 --> 0:26:47,808
让我们继续并创建一个新行为

530
00:26:47,875 --> 0:26:50,310
以制作不同的动态月球、

531
00:26:51,111 --> 0:26:53,814
为此 让我们从引入新行为开始

532
00:26:55,249 --> 0:26:58,852
我们点击加 然后在这里

533
00:26:59,286 --> 0:27:01,021
我们可以从中选择

534
00:26:59,286 --> 0:27:01,021
我们可以从中选择

535
00:27:01,088 --> 0:27:03,457
但对这个演示来说

536
00:27:06,059 --> 0:27:09,997
第一件事就是选择我们想要用于

537
00:27:10,063 --> 0:27:11,298
开始动作序列的触发器

538
00:27:11,665 --> 0:27:15,135
因为我们想当场景加载完成后

539
00:27:15,469 --> 0:27:19,506
我们可以打开库并选择场景开始

540
00:27:21,208 --> 0:27:23,510
太棒了 现在是时候开始动作序列了

541
00:27:24,811 --> 0:27:26,180
对于这个动作序列

542
00:27:26,246 --> 0:27:28,849
我们希望地球围绕太阳转

543
00:27:29,249 --> 0:27:30,884
然后月球围绕地球转

544
00:27:31,251 --> 0:27:33,987
同时我们想让地球和太阳旋转

545
00:27:34,655 --> 0:27:35,956
让我们从环绕开始做

546
00:27:37,958 --> 0:27:40,394
我们可以打开动作库 然后…

547
00:27:40,961 --> 0:27:42,529
选择环绕作为第一个动作

548
00:27:43,463 --> 0:27:45,699
当创建一个新动作时

549
00:27:45,766 --> 0:27:48,869
动作的目标是谁

550
00:27:49,469 --> 0:27:52,339
在这个例子中

551
00:27:53,106 --> 0:27:55,609
并且中心是太阳

552
00:27:57,211 --> 0:28:00,747
太棒了 我们有了所有的属性

553
00:27:57,211 --> 0:28:00,747
太棒了 我们有了所有的属性

554
00:28:01,048 --> 0:28:03,150
对齐到路径和环绕方向

555
00:28:03,684 --> 0:28:06,220
对于方向 我们希望使用逆时针方向

556
00:28:08,155 --> 0:28:11,091
现在我们可以轻松地预览动作了

557
00:28:11,558 --> 0:28:13,794
只需要点击动作卡片中的播放按钮

558
00:28:15,762 --> 0:28:16,697
速度有点快

559
00:28:16,997 --> 0:28:21,702
让我们把持续时间修改为一个

560
00:28:22,169 --> 0:28:23,537
让我们把它设为20秒

561
00:28:25,305 --> 0:28:27,174
你可以修改持续时间并再次播放

562
00:28:27,808 --> 0:28:30,177
耶 我认为持续时间看起来正合适

563
00:28:30,777 --> 0:28:32,980
现在让我们引入第二个环绕

564
00:28:33,914 --> 0:28:38,352
我们要再次打开库并选择环绕

565
00:28:39,520 --> 0:28:44,825
现在所影响的对象是月球

566
00:28:46,460 --> 0:28:48,662
持续时间 我们希望跟以前一样

567
00:28:49,463 --> 0:28:51,064
对于转速

568
00:28:51,131 --> 0:28:53,000
因为我们不是在尝试做到实际准确度

569
00:28:53,066 --> 0:28:55,969
我们只想让它在这个场景中看起来

570
00:28:56,236 --> 0:28:58,305
我们把它设为四

571
00:28:58,372 --> 0:28:59,339
我认为设为四挺好的

572
00:29:00,107 --> 0:29:02,476
现在因为月球被地球潮汐锁定了

573
00:29:03,377 --> 0:29:05,312
我们希望月球能与轨道对齐

574
00:29:05,712 --> 0:29:07,948
因此我们选择对齐到路径

575
00:29:08,882 --> 0:29:11,418
现在方向仍然是逆时针方向

576
00:29:12,419 --> 0:29:15,189
让我们试一下 耶

577
00:29:15,656 --> 0:29:16,823
动画看起来不错

578
00:29:18,525 --> 0:29:20,627
现在环绕已经按我们的要求实现了

579
00:29:21,028 --> 0:29:22,796
让我们开始旋转动作

580
00:29:23,797 --> 0:29:26,233
为此我们要打开另一个旋转动作

581
00:29:26,800 --> 0:29:28,902
让我们从太阳开始

582
00:29:30,337 --> 0:29:32,573
方向跟以前一样 那么20秒

583
00:29:33,140 --> 0:29:36,076
对于迭代次数 我觉得四次不错

584
00:29:38,212 --> 0:29:40,347
方向相同 因此是逆时针方向

585
00:29:41,782 --> 0:29:45,319
如果我们点击播放

586
00:29:46,420 --> 0:29:51,091
好的 现在让我们引入序列中的

587
00:29:51,158 --> 0:29:52,559
即地球的旋转

588
00:29:54,061 --> 0:29:55,395
我们要创建另一个旋转

589
00:29:55,729 --> 0:29:58,298
我们选择地球 相同的持续时间

590
00:29:59,700 --> 0:30:02,536
因为我们想让地球比太阳的

591
00:29:59,700 --> 0:30:02,536
因为我们想让地球比太阳的

592
00:30:02,603 --> 0:30:07,274
在这个例子中让我们把它设为十

593
00:30:08,008 --> 0:30:09,877
对于方向 再一次 逆时针方向

594
00:30:10,878 --> 0:30:13,447
让我们试一下 耶 看起来很好

595
00:30:14,248 --> 0:30:17,251
现在我们的动作序列完全展示出来了

596
00:30:17,784 --> 0:30:20,554
让我们尝试播放整个动作序列

597
00:30:20,621 --> 0:30:23,757
我们可以按动作序列页眉中的

598
00:30:23,824 --> 0:30:25,158
播放按钮上的播放

599
00:30:27,194 --> 0:30:29,696
我们可以在这里看到只有地球在移动

600
00:30:30,230 --> 0:30:32,399
那是因为动作序列的播放是

601
00:30:32,466 --> 0:30:34,535
按次序播放所有动作 一个接一个

602
00:30:35,369 --> 0:30:39,039
然而我们想在这里

603
00:30:39,106 --> 0:30:40,073
并行运行所有这些动作

604
00:30:40,140 --> 0:30:41,975
为此我们可以使用拖放

605
00:30:42,376 --> 0:30:44,311
拖动不同的卡把它们叠起来

606
00:30:46,079 --> 0:30:47,281
这样做

607
00:30:47,347 --> 0:30:49,416
我们就能创建有四个动作的一个群组

608
00:30:50,417 --> 0:30:52,586
现在让我们继续并尝试…

609
00:30:53,353 --> 0:30:54,421
谢谢

610
00:30:57,524 --> 0:30:59,092
现在让我们继续并点击播放

611
00:30:59,159 --> 0:31:02,296
看看所有行为同时播放时怎么样

612
00:30:59,159 --> 0:31:02,296
看看所有行为同时播放时怎么样

613
00:31:03,463 --> 0:31:06,466
我们可以看到

614
00:31:06,533 --> 0:31:09,570
正在同时播放

615
00:31:09,636 --> 0:31:12,406
场景中还出现文本和光线

616
00:31:20,214 --> 0:31:22,182
好的 让我们返回到演讲中

617
00:31:23,483 --> 0:31:26,386
在Reality Composer中

618
00:31:26,453 --> 0:31:28,822
引入到你的场景中就是如此简单

619
00:31:29,690 --> 0:31:31,491
现在让我们讲物理

620
00:31:33,093 --> 0:31:36,697
为了创建优秀的沉浸式AR体验

621
00:31:37,364 --> 0:31:40,367
你需要让你的对象

622
00:31:40,968 --> 0:31:43,003
你需要让你的对象跟实际的对象

623
00:31:43,704 --> 0:31:47,474
为此我们需要利用

624
00:31:47,541 --> 0:31:49,109
这个强大的物理引擎

625
00:31:50,477 --> 0:31:51,545
让我们看一下

626
00:31:52,946 --> 0:31:55,816
这是一个你可以

627
00:31:55,883 --> 0:31:56,917
使用物理引擎创建的一个场景的示例

628
00:31:57,384 --> 0:31:58,318
我在这里使用了物理引擎

629
00:31:58,385 --> 0:32:01,688
球体因为重力作用正在下落

630
00:31:58,385 --> 0:32:01,688
球体因为重力作用正在下落

631
00:32:02,155 --> 0:32:05,792
最后一旦它弹到绿色方框

632
00:32:06,360 --> 0:32:08,795
我们就显示这个赢家文本

633
00:32:09,863 --> 0:32:11,965
让我们看一下该如何创建这种场景

634
00:32:13,834 --> 0:32:15,969
有三种方式可以影响

635
00:32:16,036 --> 0:32:17,838
你场景中的物理模拟

636
00:32:19,206 --> 0:32:22,242
各种不同的材料将定义

637
00:32:22,309 --> 0:32:23,944
对象与场景及其它对象之间的交互

638
00:32:25,345 --> 0:32:26,880
通过力量动作和重力

639
00:32:27,314 --> 0:32:30,384
我们可以定义如何在你的世界中

640
00:32:31,685 --> 0:32:34,488
通过碰撞触发器和碰撞形状

641
00:32:34,788 --> 0:32:36,790
你可以定义碰撞力学

642
00:32:37,090 --> 0:32:38,959
如何在物理模拟中发生

643
00:32:40,460 --> 0:32:41,562
让我们从材料开始看

644
00:32:42,663 --> 0:32:43,564
在Reality Composer中

645
00:32:43,630 --> 0:32:45,432
你可以使用六种不同的材料

646
00:32:46,667 --> 0:32:49,970
你需要定义场景材料和对象材料

647
00:32:51,205 --> 0:32:53,574
假如你使用了对象材料

648
00:32:53,640 --> 0:32:55,475
使用冰作为对象材料

649
00:32:55,976 --> 0:32:58,045
这将使你的对象滑过场景

650
00:32:58,879 --> 0:33:00,747
如果你使用橡胶

651
00:32:58,879 --> 0:33:00,747
如果你使用橡胶

652
00:33:00,814 --> 0:33:03,350
对象将变得更有弹性

653
00:33:07,321 --> 0:33:08,755
现在让我们讲一下力

654
00:33:08,822 --> 0:33:10,157
（力）

655
00:33:10,224 --> 0:33:12,593
默认情况下你所有的场景

656
00:33:13,760 --> 0:33:15,729
并且重力值将为设为地球的重力值

657
00:33:15,996 --> 0:33:17,931
但你可以把那个值修改为

658
00:33:20,734 --> 0:33:21,668
使用力动作

659
00:33:21,735 --> 0:33:23,637
你可以赋予你的对象一个初始刺激

660
00:33:24,271 --> 0:33:25,706
你要定义一个方向

661
00:33:25,772 --> 0:33:27,908
要给对象施加多少速度

662
00:33:28,509 --> 0:33:30,143
你可以创建这种行为

663
00:33:30,210 --> 0:33:33,146
你可以在用户轻触对象时

664
00:33:34,248 --> 0:33:35,582
（碰撞）

665
00:33:35,983 --> 0:33:40,053
现在你的对象有了材料 可以受力了

666
00:33:40,687 --> 0:33:42,789
是时候让它们相互碰撞了

667
00:33:44,057 --> 0:33:46,226
默认情况下

668
00:33:46,293 --> 0:33:49,496
所有对象都不参与物理模拟

669
00:33:50,464 --> 0:33:52,633
如果你想让对象与其它对象发生碰撞

670
00:33:52,933 --> 0:33:55,202
你需要设置碰撞动作

671
00:33:56,103 --> 0:33:59,473
如果你想让对象按物理模拟进行移动

672
00:33:59,840 --> 0:34:01,942
你需要设置模拟动作

673
00:33:59,840 --> 0:34:01,942
你需要设置模拟动作

674
00:34:02,843 --> 0:34:05,412
在这里你可以看到在默认情况下

675
00:34:05,679 --> 0:34:08,248
碰撞和模拟选项是如何影响

676
00:34:15,856 --> 0:34:18,559
碰撞力由场景中的

677
00:34:18,625 --> 0:34:19,726
对象的形状决定

678
00:34:20,393 --> 0:34:23,530
在Reality Composer中

679
00:34:24,231 --> 0:34:26,333
分别是方框、球体和胶囊

680
00:34:27,534 --> 0:34:30,737
这些形状将决定你的对象

681
00:34:30,804 --> 0:34:34,341
以及如何与其它对象及锚点相碰撞

682
00:34:37,643 --> 0:34:40,781
使用碰撞触发器

683
00:34:41,380 --> 0:34:43,516
在这里我们有一个

684
00:34:43,784 --> 0:34:45,284
球体和方框的碰撞触发器

685
00:34:45,953 --> 0:34:49,255
那样我们可以检测到用户

686
00:34:49,322 --> 0:34:50,524
并显示赢家文本

687
00:34:55,062 --> 0:34:57,531
关于Reality Composer中的物理

688
00:34:57,598 --> 0:34:58,732
我们就讲这么多了

689
00:34:59,433 --> 0:35:01,869
现在我想把舞台交给

690
00:34:59,433 --> 0:35:01,869
现在我想把舞台交给

691
00:35:02,269 --> 0:35:05,072
他会讲如何使用

692
00:35:06,173 --> 0:35:07,307
Abhi？

693
00:35:08,342 --> 0:35:09,810
（创建app）

694
00:35:11,411 --> 0:35:12,513
大家好 我是Abhi

695
00:35:12,579 --> 0:35:14,081
今天来到这里我感到非常激动

696
00:35:14,348 --> 0:35:16,884
在演讲的上半场我们了解了如何用

697
00:35:17,317 --> 0:35:19,486
创建优秀的3D体验

698
00:35:19,920 --> 0:35:21,555
然后通过行为让体验鲜活起来

699
00:35:22,089 --> 0:35:24,358
现在让我们了解一下如何

700
00:35:24,625 --> 0:35:26,326
集成到我们的app中

701
00:35:27,761 --> 0:35:29,630
我们提供三种不同的方式

702
00:35:30,430 --> 0:35:33,433
第一种是直接在Xcode中创建

703
00:35:33,500 --> 0:35:35,035
或游戏模板

704
00:35:36,069 --> 0:35:39,173
第二种是从Reality Composer中

705
00:35:39,806 --> 0:35:41,875
第三种是从Reality Composer中

706
00:35:42,342 --> 0:35:45,012
然后把它包含到你的app内

707
00:35:46,980 --> 0:35:49,483
让我们先讲一下两个必需文件

708
00:35:49,550 --> 0:35:52,019
Reality Composer

709
00:35:52,719 --> 0:35:55,022
我们要从Reality Composer项目

710
00:35:55,756 --> 0:35:59,059
这是Reality Composer的项目文件

711
00:35:59,726 --> 0:36:04,097
它自动包含RealityKit AR

712
00:35:59,726 --> 0:36:04,097
它自动包含RealityKit AR

713
00:36:04,765 --> 0:36:08,168
你可以直接在Xcode内预览它

714
00:36:08,902 --> 0:36:11,972
并且在Xcode的创建过程中

715
00:36:12,306 --> 0:36:15,008
Xcode自动把你的Reality Composer

716
00:36:16,643 --> 0:36:18,812
在这里我们可以看到我们的

717
00:36:19,179 --> 0:36:21,348
在Xcode 11中

718
00:36:21,415 --> 0:36:23,483
我们还可以预览每一个场景

719
00:36:24,418 --> 0:36:25,619
在右上角

720
00:36:25,686 --> 0:36:27,654
我们可以看到一个

721
00:36:27,721 --> 0:36:30,123
这将直接从Xcode中启动

722
00:36:32,125 --> 0:36:33,427
正如我刚才提到过的

723
00:36:33,493 --> 0:36:36,630
如果你在创建

724
00:36:37,064 --> 0:36:38,232
有Reality Composer项目

725
00:36:38,298 --> 0:36:40,701
我们将自动为你生成

726
00:36:41,301 --> 0:36:43,103
它包含在你的app中

727
00:36:43,437 --> 0:36:44,471
跟其它资源一样

728
00:36:44,538 --> 0:36:46,507
你可以用同样的方式访问它

729
00:36:47,441 --> 0:36:48,542
那么什么是Reality文件？

730
00:36:49,009 --> 0:36:52,679
这是一个中心对象

731
00:36:52,746 --> 0:36:53,981
以及你将如何运用你的AR体验

732
00:36:54,648 --> 0:36:56,283
它包含渲染和模拟所需要的全部数据

733
00:36:56,817 --> 0:37:00,287
并且它对

734
00:36:56,817 --> 0:37:00,287
并且它对

735
00:37:01,221 --> 0:37:03,590
正如我刚才所说过的那样它是

736
00:37:04,124 --> 0:37:06,560
并且在项目创建过程中

737
00:37:06,627 --> 0:37:08,028
Xcode会自动导出它

738
00:37:09,796 --> 0:37:11,064
你使用Reality文件的方式是

739
00:37:11,365 --> 0:37:13,367
要么直接在app中引用

740
00:37:13,934 --> 0:37:15,702
要么在AR

741
00:37:16,403 --> 0:37:17,771
我们推荐你们参加

742
00:37:17,838 --> 0:37:19,740
明天举办的AR

743
00:37:20,240 --> 0:37:21,575
以了解更多信息

744
00:37:23,377 --> 0:37:25,779
让我们再深入一些

745
00:37:26,446 --> 0:37:29,016
因为这是由Reality Composer

746
00:37:29,616 --> 0:37:31,652
它将包含你在

747
00:37:32,052 --> 0:37:33,153
所创建的每一个场景

748
00:37:33,220 --> 0:37:34,521
比如这里有两个场景

749
00:37:35,055 --> 0:37:38,959
它还包含你在app中所创建的

750
00:37:39,960 --> 0:37:42,429
当我们在Reality文件中

751
00:37:42,763 --> 0:37:44,531
我们把场景看作一个锚点

752
00:37:44,598 --> 0:37:46,033
具体的说是一个锚点实体

753
00:37:46,533 --> 0:37:49,336
因此这包含比如

754
00:37:49,636 --> 0:37:51,104
你在Reality Composer中

755
00:37:56,343 --> 0:37:58,946
因此我们认为使用

756
00:37:59,446 --> 0:38:00,514
一个最大的困难是

757
00:37:59,446 --> 0:38:00,514
一个最大的困难是

758
00:38:01,148 --> 0:38:03,483
能用字符串进行访问

759
00:38:03,550 --> 0:38:07,287
我们既有Reality Composer项目

760
00:38:07,821 --> 0:38:11,325
我们想引入一种方式

761
00:38:11,391 --> 0:38:12,726
几乎就像是一个对象一样

762
00:38:13,126 --> 0:38:15,729
因此我们决定通过Xcode中的

763
00:38:16,763 --> 0:38:17,965
代码生成将

764
00:38:18,232 --> 0:38:20,734
分析Reality Composer

765
00:38:21,335 --> 0:38:22,669
并生成一个对象

766
00:38:22,736 --> 0:38:24,972
一个实际对象

767
00:38:25,339 --> 0:38:26,540
比如说

768
00:38:26,607 --> 0:38:29,309
这里是我们的太阳系

769
00:38:29,843 --> 0:38:32,279
我们自动生成了一个太阳系对象

770
00:38:32,646 --> 0:38:34,014
你可以在你的app中使用

771
00:38:40,354 --> 0:38:43,690
为你生成的代码是一个

772
00:38:44,525 --> 0:38:45,626
用于你的场景

773
00:38:45,692 --> 0:38:48,028
用于Michelle

774
00:38:49,096 --> 0:38:51,832
用于通知动作和通知触发器

775
00:38:52,099 --> 0:38:55,269
稍后我们再讲最后两个用法

776
00:38:57,237 --> 0:38:59,373
代码生成

777
00:38:59,439 --> 0:39:00,774
和使用AR体验的第一步是

778
00:38:59,439 --> 0:39:00,774
和使用AR体验的第一步是

779
00:39:01,074 --> 0:39:04,211
为你所关心的一切命名

780
00:39:04,645 --> 0:39:05,746
重点是直接在Reality Composer中

781
00:39:06,079 --> 0:39:08,882
你可以在配置下的设置面板中实现

782
00:39:08,949 --> 0:39:12,085
比如我们给太阳

783
00:39:12,152 --> 0:39:14,755
我们所导入的太阳

784
00:39:14,821 --> 0:39:17,024
我们将使用这个名称在代码中访问它

785
00:39:19,359 --> 0:39:21,528
如何把我们的Reality Composer

786
00:39:21,962 --> 0:39:23,997
我们可以使用的一个对象呢？

787
00:39:24,798 --> 0:39:25,899
在顶层

788
00:39:25,966 --> 0:39:30,037
我们的Reality Composer项目成为

789
00:39:30,971 --> 0:39:33,674
我们的场景成为有锚点的一个实体

790
00:39:34,107 --> 0:39:36,243
这非常重要

791
00:39:36,310 --> 0:39:38,312
你可以直接把它添加到场景的锚点中

792
00:39:39,479 --> 0:39:42,850
此外 你所设置的任何对象

793
00:39:43,116 --> 0:39:45,252
这些是你可以使用的真正的

794
00:39:45,319 --> 0:39:46,887
你可以用完全相同的方式使用它们

795
00:39:48,188 --> 0:39:51,592
此外 我们还提供两种不同的

796
00:39:52,025 --> 0:39:54,528
一种是同步加载 一种是异步加载

797
00:39:57,397 --> 0:40:00,100
让我们看一下同步加载

798
00:39:57,397 --> 0:40:00,100
让我们看一下同步加载

799
00:40:00,734 --> 0:40:03,504
我们还以太阳系作为我们的例子

800
00:40:03,837 --> 0:40:05,506
我们要加载

801
00:40:06,039 --> 0:40:08,108
我们只需要一行代码就能实现

802
00:40:08,575 --> 0:40:11,578
我们可以说

803
00:40:11,879 --> 0:40:14,648
这将会给我们返回一个锚点

804
00:40:14,715 --> 0:40:15,682
超级简单

805
00:40:17,284 --> 0:40:20,654
接下来如果我们想异步加载

806
00:40:20,721 --> 0:40:21,622
或任意场景

807
00:40:21,889 --> 0:40:23,156
我们可以使用比如

808
00:40:23,223 --> 0:40:26,026
solarsystem.load

809
00:40:26,560 --> 0:40:27,928
我们将得到一个结果对象

810
00:40:27,995 --> 0:40:29,396
我们可以处理成功的情况

811
00:40:29,963 --> 0:40:31,131
我们得到了锚点

812
00:40:31,765 --> 0:40:34,535
或我们可以处理失败的情况

813
00:40:36,570 --> 0:40:39,306
此外 如果我们想访问场景中的

814
00:40:39,673 --> 0:40:43,443
我们可以很简单地调用比如

815
00:40:43,844 --> 0:40:45,145
.earth和.moon

816
00:40:45,445 --> 0:40:48,582
这将使我们可以访问我们在

817
00:40:48,949 --> 0:40:50,551
这跟其它对象一样

818
00:40:51,852 --> 0:40:54,788
把Xcode中的代码生成

819
00:40:55,155 --> 0:40:56,256
和Reality Composer

820
00:40:56,857 --> 0:40:59,193
我们可以在我们的app中

821
00:40:59,259 --> 0:41:00,627
只需要两行代码就能实现

822
00:40:59,259 --> 0:41:00,627
只需要两行代码就能实现

823
00:41:01,428 --> 0:41:04,131
第一行代码是加载Chapter

824
00:41:04,865 --> 0:41:07,534
第二行代码是把它添加到

825
00:41:07,601 --> 0:41:08,702
超级简单

826
00:41:08,769 --> 0:41:10,037
（Xcode中的代码生成）

827
00:41:16,310 --> 0:41:18,212
这是Xcode中的代码生成

828
00:41:18,779 --> 0:41:20,981
我们还提供一种

829
00:41:21,415 --> 0:41:24,484
比如如果你正在从服务器上下载内容

830
00:41:24,551 --> 0:41:26,420
并且你想在app中显示内容

831
00:41:27,187 --> 0:41:29,256
为此 我们有

832
00:41:29,990 --> 0:41:32,059
要同步加载Reality文件

833
00:41:32,593 --> 0:41:33,994
你首先需要获取URL

834
00:41:34,394 --> 0:41:36,430
就像你app捆绑包中的

835
00:41:37,197 --> 0:41:38,265
接下来

836
00:41:39,299 --> 0:41:41,535
使用

837
00:41:41,835 --> 0:41:43,270
传递资源的URL

838
00:41:43,570 --> 0:41:45,506
以及你要加载内容的场景名称

839
00:41:46,039 --> 0:41:47,841
这将给你返回一个你可以使用的锚点

840
00:41:48,375 --> 0:41:50,577
或者你还可以使用

841
00:41:50,911 --> 0:41:53,714
加载实体树 不需要锚点信息

842
00:41:55,249 --> 0:41:57,484
要异步加载Reality文件

843
00:41:57,551 --> 0:41:58,619
也有一种方式可以实现

844
00:41:58,986 --> 0:42:00,287
第一步完全相同

845
00:41:58,986 --> 0:42:00,287
第一步完全相同

846
00:42:00,687 --> 0:42:03,156
获取资源的URL资源

847
00:42:04,291 --> 0:42:06,426
使用

848
00:42:06,493 --> 0:42:09,029
传入URL

849
00:42:09,596 --> 0:42:10,998
这将给你提供一个加载请求

850
00:42:11,798 --> 0:42:13,400
使用新的合并框架

851
00:42:13,901 --> 0:42:16,904
我们可以收到一个完成 然后收到值

852
00:42:16,970 --> 0:42:19,239
值包含我们要加载的锚点

853
00:42:19,306 --> 0:42:21,141
从而你可以把这个

854
00:42:22,943 --> 0:42:23,977
访问实体

855
00:42:24,044 --> 0:42:27,047
你可以通过

856
00:42:27,447 --> 0:42:29,917
然后传入你要加载的对象的名称

857
00:42:30,217 --> 0:42:32,252
比如太阳、地球和月球

858
00:42:33,053 --> 0:42:35,689
使用Xcode中的代码生成

859
00:42:35,756 --> 0:42:39,026
和RealityKit把AR体验

860
00:42:41,495 --> 0:42:43,630
接下来我们讲我们的app

861
00:42:43,897 --> 0:42:45,699
如何与我们的AR内容进行交互

862
00:42:46,099 --> 0:42:47,868
我们可以直接在

863
00:42:48,135 --> 0:42:49,670
创建优秀的体验

864
00:42:49,736 --> 0:42:50,838
但我们该如何使用它呢？

865
00:42:51,205 --> 0:42:52,773
正如Pau刚才提到的那样

866
00:42:52,840 --> 0:42:55,576
我们给你们准备了很棒的内置动作集

867
00:42:55,943 --> 0:42:58,111
但你可能想定义自己的动作

868
00:42:58,745 --> 0:43:01,114
为此我们创建了通知动作

869
00:42:58,745 --> 0:43:01,114
为此我们创建了通知动作

870
00:43:01,748 --> 0:43:04,484
你可以在Reality Composer中

871
00:43:06,587 --> 0:43:09,423
它与你的其它动作序列一起被调用

872
00:43:09,790 --> 0:43:10,991
次序完全相同

873
00:43:11,058 --> 0:43:13,961
比如如果它属于某个动作序列

874
00:43:15,362 --> 0:43:17,564
你的app代码中有一个

875
00:43:17,631 --> 0:43:20,334
你可以定义这个动作的实施

876
00:43:21,602 --> 0:43:23,971
就像通过代码生成访问一个实体一样

877
00:43:24,805 --> 0:43:28,509
通知动作也可以通过对象进行访问

878
00:43:30,244 --> 0:43:33,080
在Reality Composer中

879
00:43:34,781 --> 0:43:35,983
我们赋予它一个标识符

880
00:43:36,049 --> 0:43:38,185
这是我们要在代码中使用的标识符

881
00:43:38,519 --> 0:43:41,355
用于引用我们的通知动作

882
00:43:43,690 --> 0:43:46,927
在我们所生成的对象的结构中

883
00:43:47,661 --> 0:43:50,931
动作位于场景对象内的能源旁边

884
00:43:51,798 --> 0:43:54,234
在这里我们有动作和属性动作

885
00:43:55,402 --> 0:43:56,803
在动作类内

886
00:43:57,137 --> 0:43:58,739
你可以看到多个通知动作

887
00:43:59,139 --> 0:44:01,642
动作名称是你赋予通知动作的标识符

888
00:43:59,139 --> 0:44:01,642
动作名称是你赋予通知动作的标识符

889
00:44:02,176 --> 0:44:06,246
你可对这些进行访问就像访问所加载

890
00:44:06,680 --> 0:44:08,115
和你所关心的动作名称那样简单

891
00:44:08,582 --> 0:44:10,951
此外 我们还生成一个全部动作数组

892
00:44:11,318 --> 0:44:13,787
你可以实现很棒的功能

893
00:44:14,188 --> 0:44:15,789
你可以对它进行筛选、迭代

894
00:44:16,056 --> 0:44:17,991
只要你能对Swift中的

895
00:44:18,058 --> 0:44:19,626
都可以在这个全部动作属性上实施

896
00:44:21,628 --> 0:44:24,064
要设置通知动作的实施

897
00:44:24,665 --> 0:44:26,967
你首先需要通过警告锚点获取它

898
00:44:27,434 --> 0:44:28,302
比如

899
00:44:28,702 --> 0:44:32,472
seasonschapter.actions.display

900
00:44:32,940 --> 0:44:34,808
然后提供自定义闭包

901
00:44:34,875 --> 0:44:35,876
因此.onaction

902
00:44:36,510 --> 0:44:38,879
你将在这个闭包内得到的返回是

903
00:44:39,279 --> 0:44:41,481
你在Reality Composer中

904
00:44:44,618 --> 0:44:47,354
另一方面 要启动动作序列

905
00:44:47,721 --> 0:44:49,089
并提供一种实现方式

906
00:44:49,489 --> 0:44:51,592
我们有一些很棒的内置触发器

907
00:44:51,658 --> 0:44:53,293
比如场景开始和接近

908
00:44:53,694 --> 0:44:56,630
但有时候你可能想提供自定义触发器

909
00:44:56,697 --> 0:44:59,700
比如选择一个控制片段或轻触按钮

910
00:45:00,133 --> 0:45:02,870
为此 我们提供通知触发器

911
00:45:03,904 --> 0:45:06,440
你可以在Reality Composer中

912
00:45:07,374 --> 0:45:10,043
它会开始一个动作序列

913
00:45:10,110 --> 0:45:11,211
或拥有同一个标识符的多个动作序列

914
00:45:12,679 --> 0:45:14,515
它要在app运行时发布

915
00:45:15,282 --> 0:45:17,384
与通知动作一样 它是可访问的

916
00:45:17,718 --> 0:45:20,654
在代码中按名称充当你的实体

917
00:45:22,222 --> 0:45:25,325
你可以直接在你的行为内

918
00:45:26,226 --> 0:45:28,795
在这里我们赋予它一个

919
00:45:29,329 --> 0:45:30,697
我们将在代码中使用这个名称

920
00:45:32,432 --> 0:45:35,402
跟动作一样 在所生成的代码中

921
00:45:35,469 --> 0:45:36,770
通知触发器位于实体旁边

922
00:45:38,572 --> 0:45:41,542
在一个新的通知对象类内

923
00:45:43,043 --> 0:45:45,379
在通知内 跟通知动作一样

924
00:45:45,445 --> 0:45:46,880
你将有与名称对应的

925
00:45:47,281 --> 0:45:48,549
通知触发器

926
00:45:48,615 --> 0:45:51,018
名称是你在

927
00:45:51,318 --> 0:45:52,553
赋予那些通知触发器的标识符

928
00:45:52,619 --> 0:45:54,021
与通知动作一样

929
00:45:54,087 --> 0:45:56,623
你也有一个数组

930
00:45:57,758 --> 0:45:59,059
这叫做

931
00:46:01,261 --> 0:46:05,432
你可以通过调用发布方法

932
00:46:05,499 --> 0:46:08,335
这将启动一个动作序列

933
00:46:09,336 --> 0:46:11,705
你还可以传入一个可选的重写集

934
00:46:12,105 --> 0:46:14,641
如果你想复制一个实体

935
00:46:14,908 --> 0:46:18,478
并仅动态地调用新实体的动作序列

936
00:46:19,146 --> 0:46:20,681
重写将把

937
00:46:20,747 --> 0:46:24,084
Reality Composer

938
00:46:24,484 --> 0:46:25,686
然后你传入新目标

939
00:46:25,953 --> 0:46:27,321
当动作序列运行时

940
00:46:27,387 --> 0:46:29,356
它只把新实体作为目标

941
00:46:30,891 --> 0:46:33,460
让我们这些总结在一起

942
00:46:34,161 --> 0:46:35,429
（演示）

943
00:46:47,574 --> 0:46:49,042
这是我的app

944
00:46:49,109 --> 0:46:52,045
这是在演讲进行过程中

945
00:46:52,412 --> 0:46:54,915
所创建的太阳系课程的季节篇章

946
00:46:55,415 --> 0:46:57,384
在这里我想实施第二个篇章

947
00:46:57,651 --> 0:46:59,553
根据不同天体的尺寸

948
00:47:00,020 --> 0:47:03,090
这是我们的Xcode 11

949
00:47:03,624 --> 0:47:05,993
我们已经包含了我们的

950
00:47:06,059 --> 0:47:08,662
再一次 你可以创建一个新AR

951
00:47:08,729 --> 0:47:11,632
或你可以把Reality Composer项目

952
00:47:14,668 --> 0:47:15,702
我们可以直接在Xcode中…

953
00:47:16,570 --> 0:47:17,571
预览项目…

954
00:47:18,472 --> 0:47:20,274
并继续在

955
00:47:24,278 --> 0:47:26,313
在我们写任何代码之前

956
00:47:26,380 --> 0:47:27,514
让我们先快速操作一下这个过程

957
00:47:28,382 --> 0:47:30,717
在我们的篇章中

958
00:47:31,185 --> 0:47:33,053
我们给场景赋予了一个名称

959
00:47:33,120 --> 0:47:35,489
我们给我们所关心的不同实体

960
00:47:35,556 --> 0:47:37,591
比如这个金星叫做

961
00:47:38,058 --> 0:47:39,960
这个名称是我们要在代码中

962
00:47:41,428 --> 0:47:43,096
此外我们还设置了一些行为

963
00:47:44,164 --> 0:47:45,432
比如对于月球

964
00:47:45,832 --> 0:47:48,902
我们想了解月球何时被轻触了

965
00:47:49,903 --> 0:47:52,806
同时隐藏所有其他文本标签

966
00:47:53,173 --> 0:47:55,175
并仅显示月球的标签

967
00:47:55,242 --> 0:47:57,678
这些动作都是同时发生的

968
00:47:59,112 --> 0:48:00,914
此外我们还有一个通知动作

969
00:47:59,112 --> 0:48:00,914
此外我们还有一个通知动作

970
00:48:00,981 --> 0:48:02,916
我们将在我们的app内

971
00:48:02,983 --> 0:48:03,884
月球何时被轻触了

972
00:48:04,751 --> 0:48:08,322
我们也对地球和太阳实施了

973
00:48:09,456 --> 0:48:11,425
我们还设置了一个

974
00:48:11,491 --> 0:48:12,559
当场景开始时

975
00:48:12,893 --> 0:48:15,762
每个文本标签都将面向摄像头

976
00:48:15,829 --> 0:48:16,964
无论我们在看哪儿

977
00:48:18,765 --> 0:48:21,134
并且我们有一个

978
00:48:21,535 --> 0:48:24,705
那将隐藏我们只想在特定时间

979
00:48:24,972 --> 0:48:28,008
比如Chapter Completed

980
00:48:29,943 --> 0:48:31,945
此外我们有一些动作序列

981
00:48:32,012 --> 0:48:33,213
将在代码中被触发

982
00:48:33,280 --> 0:48:35,315
我们稍后会在这个演示中看到

983
00:48:36,016 --> 0:48:38,685
那会把天体的尺寸调整为

984
00:48:39,786 --> 0:48:41,321
把它们的尺寸调整到同一个尺寸…

985
00:48:42,723 --> 0:48:45,626
显示

986
00:48:46,093 --> 0:48:47,160
开始地球环绕

987
00:48:47,427 --> 0:48:49,496
并隐藏全部其它天体

988
00:48:50,430 --> 0:48:51,832
我们有一个很酷的小动画…

989
00:48:52,699 --> 0:48:54,168
是从通知触发器中触发的

990
00:48:55,836 --> 0:48:58,605
那将显示金星 旋转它

991
00:49:00,140 --> 0:49:02,075
现在让我们返回到

992
00:49:03,210 --> 0:49:04,111
快速地操作一下

993
00:49:04,178 --> 0:49:05,979
这个app非常简单明了

994
00:49:06,313 --> 0:49:07,514
它是个单一视图的app

995
00:49:08,582 --> 0:49:10,817
在顶层我们有一个AR视图

996
00:49:11,985 --> 0:49:15,789
一个分段的控制

997
00:49:17,224 --> 0:49:18,525
一个课程完成按钮

998
00:49:18,592 --> 0:49:20,194
从而学生可以说我已经完成课程了

999
00:49:20,260 --> 0:49:22,963
并在最后浏览篇章

1000
00:49:24,097 --> 0:49:26,800
在详情视图中 当我们轻触月球、

1001
00:49:26,867 --> 0:49:27,901
会显示更多的详情

1002
00:49:29,503 --> 0:49:32,506
此外我们有一些视图模型

1003
00:49:32,573 --> 0:49:33,740
因此它只显示一些文本…

1004
00:49:34,608 --> 0:49:37,077
然后有一些基本的app逻辑

1005
00:49:37,611 --> 0:49:38,745
让我们首先看一下加载

1006
00:49:40,581 --> 0:49:42,182
在这里你注意到的第一件事是…

1007
00:49:42,549 --> 0:49:44,051
我们在这个项目中使用了代码生成

1008
00:49:44,785 --> 0:49:46,820
因此我们的

1009
00:49:46,887 --> 0:49:49,056
将被自动转化为

1010
00:49:49,122 --> 0:49:50,023
它是个真正的类型

1011
00:49:50,090 --> 0:49:53,527
我们可以直接在这里把它用作

1012
00:49:54,528 --> 0:49:57,364
比如太阳系

1013
00:49:57,431 --> 0:49:58,498
就是我们可以使用的一个真正的类型

1014
00:49:59,466 --> 0:50:00,434
我们可以继续…

1015
00:49:59,466 --> 0:50:00,434
我们可以继续…

1016
00:50:00,868 --> 0:50:02,436
并加载我们的场景…

1017
00:50:02,503 --> 0:50:04,872
让我们一起来看一下这段代码

1018
00:50:05,339 --> 0:50:08,408
我们正在做的是异步加载尺寸篇章

1019
00:50:10,077 --> 0:50:13,213
然后进行处理

1020
00:50:13,614 --> 0:50:15,115
从而可以让轻触触发器发挥作用

1021
00:50:16,016 --> 0:50:17,384
然后我们把它添加到我们的场景中

1022
00:50:18,118 --> 0:50:19,686
因为我们稍后才使用尺寸篇章

1023
00:50:19,753 --> 0:50:21,855
我们要把它存在尺寸篇章属性中

1024
00:50:22,356 --> 0:50:24,658
我们要设置通知动作 我们稍后再用

1025
00:50:24,725 --> 0:50:25,859
目前并没有挂钩起来

1026
00:50:26,660 --> 0:50:27,861
让我们继续并运行一下

1027
00:50:28,161 --> 0:50:29,496
我们可以看到仅通过几行代码

1028
00:50:29,963 --> 0:50:32,399
我们就引入了我们的实体AR体验

1029
00:50:32,466 --> 0:50:35,269
并且它应该与Reality Composer中的

1030
00:50:37,571 --> 0:50:38,605
好了 我们有场景了

1031
00:50:38,672 --> 0:50:39,673
我们看到内容

1032
00:50:39,740 --> 0:50:41,275
比如Chapter Completed

1033
00:50:41,742 --> 0:50:43,777
当我们轻触每个天体时

1034
00:50:44,278 --> 0:50:46,180
我们看到文本自动显示出来

1035
00:50:46,613 --> 0:50:49,383
并且它面向摄像头

1036
00:50:51,018 --> 0:50:52,085
跟太阳一样

1037
00:50:52,152 --> 0:50:53,754
看起来很不错 只需要几行代码

1038
00:50:53,820 --> 0:50:56,723
我们就把整个Reality Composer项目

1039
00:50:56,790 --> 0:50:57,891
超级简单

1040
00:50:57,958 --> 0:51:00,894
接下来我要做的其实是

1041
00:50:57,958 --> 0:51:00,894
接下来我要做的其实是

1042
00:51:00,961 --> 0:51:02,763
你可以注意到当我轻触太阳时

1043
00:51:03,163 --> 0:51:05,232
其实并没有填充详情视图

1044
00:51:05,299 --> 0:51:06,567
让我们返回到Xcode中…

1045
00:51:07,534 --> 0:51:09,002
并填充通知动作

1046
00:51:15,209 --> 0:51:18,712
因为我们的通知动作是自动生成的

1047
00:51:18,979 --> 0:51:21,915
我们还得到一个可以进行筛选的

1048
00:51:22,182 --> 0:51:24,918
我们将对这些动作进行筛选

1049
00:51:24,985 --> 0:51:27,154
只获得我们所关注的动作

1050
00:51:30,858 --> 0:51:31,992
让我们看一下这段代码

1051
00:51:33,660 --> 0:51:36,063
因为我们在尺寸篇章设置了通知动作

1052
00:51:36,630 --> 0:51:38,866
我们可以返回到Reality Composer

1053
00:51:40,601 --> 0:51:43,971
对于这里的每一个天体

1054
00:51:44,037 --> 0:51:45,038
显示月球详情、

1055
00:51:45,105 --> 0:51:47,107
显示地球详情和显示太阳详情

1056
00:51:47,608 --> 0:51:48,575
我们可以在代码中访问这些

1057
00:51:48,976 --> 0:51:52,012
我们实际上想筛选通知动作

1058
00:51:52,079 --> 0:51:53,714
只筛选以display开始的动作

1059
00:51:53,780 --> 0:51:56,517
因为我们想给每一个display动作

1060
00:51:57,951 --> 0:52:00,654
因此返回到Xcode中

1061
00:51:57,951 --> 0:52:00,654
因此返回到Xcode中

1062
00:52:00,721 --> 0:52:03,223
我们正在执行size chapter.actions

1063
00:52:03,624 --> 0:52:04,791
我们对它进行筛选

1064
00:52:05,125 --> 0:52:07,661
从通知动作对象中获得标识符

1065
00:52:08,195 --> 0:52:09,763
并检查标识符是否以

1066
00:52:10,864 --> 0:52:13,233
接下来我们迭代所有

1067
00:52:13,700 --> 0:52:17,237
并给每一个使用on-action

1068
00:52:18,672 --> 0:52:20,908
我们要获取通知动作的目标

1069
00:52:20,974 --> 0:52:23,577
在这个例子中 对于月球来说是月球

1070
00:52:23,911 --> 0:52:25,078
对于地球来说是地球

1071
00:52:26,346 --> 0:52:28,515
并使用那个实体来显示

1072
00:52:29,816 --> 0:52:31,084
让我们现在运行一下app

1073
00:52:32,152 --> 0:52:34,087
当我们轻触每个天体时

1074
00:52:34,588 --> 0:52:36,423
我们希望看到不同的视图模型

1075
00:52:38,225 --> 0:52:39,092
好了

1076
00:52:39,626 --> 0:52:40,460
我们有内容了

1077
00:52:40,928 --> 0:52:42,296
现在当我们轻触月球时

1078
00:52:42,563 --> 0:52:47,067
因为我们已经设置了通知动作

1079
00:52:47,467 --> 0:52:50,170
我们现在可以在底部这里看到

1080
00:52:50,637 --> 0:52:52,873
当我们轻触地球时可以看到地球详情

1081
00:52:53,340 --> 0:52:55,909
当我们轻触太阳时可以看到太阳详情

1082
00:52:56,243 --> 0:52:57,144
看起来非常棒

1083
00:52:58,612 --> 0:53:00,013
我们还保持着某种状态

1084
00:52:58,612 --> 0:53:00,013
我们还保持着某种状态

1085
00:53:00,080 --> 0:53:03,650
当我们轻触全部三个天体地球、

1086
00:53:04,318 --> 0:53:06,587
我们只是要确保

1087
00:53:07,054 --> 0:53:09,823
并在右上角显示一个课程完成按钮

1088
00:53:11,091 --> 0:53:13,794
现在我们要做的是使用通知触发器

1089
00:53:14,595 --> 0:53:16,630
启动我们在Reality Composer中

1090
00:53:16,697 --> 0:53:19,066
调整为相对尺寸

1091
00:53:19,132 --> 0:53:20,400
以及调整为动作序列的同一尺寸

1092
00:53:20,834 --> 0:53:22,202
通过使用顶部的分段控制

1093
00:53:22,703 --> 0:53:24,404
和右上角的按钮实现

1094
00:53:30,777 --> 0:53:33,714
我们可以使用segmentedControl

1095
00:53:33,780 --> 0:53:36,216
这是一个界面创建器方法

1096
00:53:36,283 --> 0:53:38,185
我们就在界面创建器中

1097
00:53:42,456 --> 0:53:45,225
使用我们的通知动作触发器

1098
00:53:45,559 --> 0:53:48,195
我们可以启动我们在

1099
00:53:48,262 --> 0:53:49,830
调整为同一尺寸动作序列

1100
00:53:51,832 --> 0:53:54,501
那将把每个天体尺寸重新调整到

1101
00:53:54,768 --> 0:53:56,670
100%初始尺寸

1102
00:53:57,838 --> 0:54:00,207
当选中尺寸分段控制之后

1103
00:53:57,838 --> 0:54:00,207
当选中尺寸分段控制之后

1104
00:54:00,274 --> 0:54:03,310
我们可以把太阳的尺寸调整为

1105
00:54:04,411 --> 0:54:06,547
为此我们可以启动…

1106
00:54:08,315 --> 0:54:10,117
调整为相对尺寸动作序列

1107
00:54:11,618 --> 0:54:14,421
最后当轻触课程结束按钮时

1108
00:54:14,488 --> 0:54:16,857
这是我们所设置和挂钩的

1109
00:54:19,593 --> 0:54:22,129
我们将启动Chapter Completed

1110
00:54:23,030 --> 0:54:24,097
它所执行的操作是

1111
00:54:24,164 --> 0:54:27,201
因为Reality Composer中

1112
00:54:27,267 --> 0:54:28,602
有三个不同的通知触发器

1113
00:54:28,969 --> 0:54:31,038
我们将触发全部三个动作序列

1114
00:54:31,538 --> 0:54:33,207
我们将淡出现有内容

1115
00:54:34,741 --> 0:54:37,411
然后开始小地球和小月球的环绕

1116
00:54:39,680 --> 0:54:41,715
我们将显示

1117
00:54:44,818 --> 0:54:47,087
让我们现在运行一下

1118
00:54:51,258 --> 0:54:52,359
好的 在这里我们有内容

1119
00:54:53,527 --> 0:54:55,162
我们可以轻触月球 一切都…

1120
00:54:55,229 --> 0:54:57,331
跟我们在Reality Composer中

1121
00:54:57,731 --> 0:55:00,067
现在当我们轻触尺寸分段控制时

1122
00:54:57,731 --> 0:55:00,067
现在当我们轻触尺寸分段控制时

1123
00:55:00,133 --> 0:55:01,468
当我们看地球和月球时

1124
00:55:01,869 --> 0:55:04,738
我们就可以很好地了解

1125
00:55:05,305 --> 0:55:06,907
地球非常小

1126
00:55:08,809 --> 0:55:09,710
看起来很不错

1127
00:55:09,776 --> 0:55:10,844
让我们把它的尺寸调回去

1128
00:55:11,411 --> 0:55:12,279
让我们结束课程

1129
00:55:12,713 --> 0:55:14,081
我要轻触课程完成

1130
00:55:14,147 --> 0:55:16,016
位于右上角的完成课程按钮

1131
00:55:17,284 --> 0:55:18,719
我们可以看到内容淡出了

1132
00:55:19,119 --> 0:55:20,420
并且我们看到

1133
00:55:21,388 --> 0:55:23,190
并且地球和月球开始环绕小太阳移动

1134
00:55:23,690 --> 0:55:24,758
看起来很不错

1135
00:55:24,825 --> 0:55:28,161
我们可以看到如何在app中使用

1136
00:55:28,562 --> 0:55:30,931
来处理我们的AR内容

1137
00:55:31,231 --> 0:55:32,499
我们还有最后一件事要做

1138
00:55:32,566 --> 0:55:34,134
我们提到过用重写进行发布

1139
00:55:34,635 --> 0:55:35,969
我想告诉你如何使用重写

1140
00:55:36,036 --> 0:55:38,338
来显示使用了app状态的动态内容

1141
00:55:39,173 --> 0:55:40,807
因为这是一个课程app

1142
00:55:41,074 --> 0:55:43,777
我们想根据学生的表现显示金星

1143
00:55:47,347 --> 0:55:49,116
对于这场演讲来说

1144
00:55:49,183 --> 0:55:50,284
因此我要给我们三颗星

1145
00:55:50,651 --> 0:55:51,952
我们可以看一下如何进行设置

1146
00:55:52,653 --> 0:55:56,590
这个方法是我们要在上边的

1147
00:55:56,924 --> 0:55:59,293
我们要在这个方法中保持状态

1148
00:56:01,995 --> 0:56:04,498
看起来我刚传入了许多代码

1149
00:56:05,432 --> 0:56:08,936
我们要做的第一件事就是访问

1150
00:56:09,002 --> 0:56:10,437
我们在Reality Composer中

1151
00:56:12,272 --> 0:56:13,173
就在这里

1152
00:56:15,108 --> 0:56:18,245
我们赋予它一个名称是Special Star

1153
00:56:19,513 --> 0:56:23,150
接下来我们直接在代码中

1154
00:56:23,650 --> 0:56:24,685
触发显示金星动作序列

1155
00:56:24,751 --> 0:56:26,220
从而可以显示第一颗金星

1156
00:56:26,486 --> 0:56:27,554
但我们想显示三颗

1157
00:56:28,288 --> 0:56:31,091
因此我们可以分派实现

1158
00:56:31,158 --> 0:56:33,293
对于这个演示来说

1159
00:56:33,760 --> 0:56:35,395
我们要克隆星星

1160
00:56:36,463 --> 0:56:40,234
我们要把它放在右侧稍微靠上一些

1161
00:56:41,001 --> 0:56:42,302
我们要把它添加到我们的场景中

1162
00:56:43,437 --> 0:56:45,072
然后使用发布重写

1163
00:56:45,138 --> 0:56:47,674
我们传入动作序列的初始目标

1164
00:56:48,041 --> 0:56:51,912
然后传入新动作以及动作的新目标

1165
00:56:51,979 --> 0:56:53,213
在这个例子中是右侧的星星

1166
00:56:54,114 --> 0:56:56,016
我们想对左边的星星做同样的操作

1167
00:56:56,083 --> 0:56:58,252
我们再次复制它 复制星星

1168
00:56:59,086 --> 0:57:01,421
把它放在左边稍微靠下一点的位置

1169
00:56:59,086 --> 0:57:01,421
把它放在左边稍微靠下一点的位置

1170
00:57:02,289 --> 0:57:05,092
把它添加到我们的场景中 再一次

1171
00:57:05,425 --> 0:57:08,328
获取初始名称

1172
00:57:08,662 --> 0:57:10,464
作为动作序列的目标

1173
00:57:11,899 --> 0:57:13,166
让我们现在创建并运行这个app

1174
00:57:13,233 --> 0:57:15,435
我们希望能看到三颗金星

1175
00:57:15,502 --> 0:57:17,738
即使我们只在app中设置了一颗

1176
00:57:17,804 --> 0:57:19,606
这完全是由app逻辑驱动的

1177
00:57:25,445 --> 0:57:26,780
又是我们的场景

1178
00:57:27,347 --> 0:57:28,515
我们可以完成课程

1179
00:57:30,083 --> 0:57:31,552
我觉得我现在已经完成了

1180
00:57:33,120 --> 0:57:34,254
完成课程

1181
00:57:34,321 --> 0:57:35,889
我们看到出现了一颗金星

1182
00:57:36,890 --> 0:57:38,325
然后出现第二颗金星

1183
00:57:38,992 --> 0:57:40,093
然后是第三颗金星

1184
00:57:40,160 --> 0:57:41,828
我们做的很棒

1185
00:57:51,839 --> 0:57:54,374
因此把AR内容

1186
00:57:54,441 --> 0:57:55,442
加载到app中非常简单

1187
00:57:56,143 --> 0:57:59,913
先使用通知动作来提供自定义实施

1188
00:58:00,347 --> 0:58:03,450
然后使用你在

1189
00:58:03,884 --> 0:58:05,219
使用通知触发器设置的

1190
00:58:07,354 --> 0:58:09,022
让我们总结一下我们今天讲过的内容

1191
00:58:09,089 --> 0:58:12,593
我们了解了

1192
00:58:12,993 --> 0:58:15,295
我们可以使用内置的模块化资产

1193
00:58:15,362 --> 0:58:17,164
比如球体或立方体

1194
00:58:18,065 --> 0:58:20,701
然后我们使用行为和简单的交互

1195
00:58:22,536 --> 0:58:23,670
把那些资产变得鲜活起来

1196
00:58:24,638 --> 0:58:27,140
最后我们通过代码生成

1197
00:58:27,207 --> 0:58:29,710
把那些优秀的AR体验

1198
00:58:29,776 --> 0:58:31,078
引入到我们的app中

1199
00:58:31,945 --> 0:58:33,614
我们已经看到你们使用

1200
00:58:33,680 --> 0:58:36,149
所创建的一些很棒的东西了

1201
00:58:36,517 --> 0:58:38,385
我们鼓励你们继续创建

1202
00:58:38,652 --> 0:58:41,255
能看到你们即将要创建的

1203
00:58:41,555 --> 0:58:42,489
我们感到非常激动

1204
00:58:43,524 --> 0:58:46,226
今天和明天

1205
00:58:46,593 --> 0:58:47,427
还有一些演讲和演讲

1206
00:58:48,095 --> 0:58:50,430
我们鼓励你们带上你们的问题

1207
00:58:50,497 --> 0:58:52,132
带上你们需要带的一切来参加

1208
00:58:53,000 --> 0:58:54,668
祝你们度过一个愉快的WWDC

1209
00:58:54,735 --> 0:58:55,769
谢谢大家
