1
00:00:00,506 --> 0:00:05,516
[ Music ]

2
00:00:06,516 --> 0:00:11,566
[ Cheering and Applause ]

3
00:00:12,066 --> 0:00:12,836
&gt;&gt; Good afternoon.

4
00:00:13,916 --> 0:00:15,856
My name is Luke Spicer and today

5
00:00:15,926 --> 0:00:17,706
my teammate Divya and I are very

6
00:00:17,706 --> 0:00:19,326
excited to show you how

7
00:00:19,326 --> 0:00:20,956
HealthKit has expanded our data

8
00:00:20,956 --> 0:00:22,956
representations in iOS 13.

9
00:00:23,446 --> 0:00:26,636
As many of you already know,

10
00:00:26,866 --> 0:00:29,166
HealthKit provides a centralized

11
00:00:29,206 --> 0:00:30,336
data store for health and

12
00:00:30,376 --> 0:00:31,936
fitness data while also

13
00:00:31,936 --> 0:00:33,466
providing interoperability for

14
00:00:33,466 --> 0:00:34,566
health and fitness apps and

15
00:00:34,566 --> 0:00:35,396
experiences.

16
00:00:36,296 --> 0:00:37,576
If you're not already excited

17
00:00:37,646 --> 0:00:39,366
about using HealthKit, let me

18
00:00:39,366 --> 0:00:40,786
remind you that there are over

19
00:00:40,786 --> 0:00:42,936
70,000 apps in the health and

20
00:00:42,936 --> 0:00:44,116
fitness category on the App

21
00:00:44,116 --> 0:00:45,876
Store and all of them can

22
00:00:45,876 --> 0:00:46,926
benefit from the

23
00:00:46,926 --> 0:00:48,336
interoperability and

24
00:00:48,336 --> 0:00:49,666
functionality provided by

25
00:00:49,666 --> 0:00:50,126
HealthKit.

26
00:00:51,526 --> 0:00:52,686
Today, we're going to show you a

27
00:00:52,686 --> 0:00:54,046
few things related to data

28
00:00:54,046 --> 0:00:55,256
representations in HealthKit,

29
00:00:55,776 --> 0:00:57,286
starting with a review of the

30
00:00:57,286 --> 0:00:58,206
HealthKit data model.

31
00:00:58,986 --> 0:01:00,706
Then I'll go into some specific

32
00:00:58,986 --> 0:01:00,706
Then I'll go into some specific

33
00:01:00,706 --> 0:01:02,386
APIs focused on quantity data.

34
00:01:03,656 --> 0:01:04,936
Later, Divya will come out to

35
00:01:04,936 --> 0:01:05,866
show you beat-to-beat

36
00:01:05,866 --> 0:01:07,656
measurements, heart rate events,

37
00:01:08,246 --> 0:01:10,776
and the brand new API's focused

38
00:01:10,776 --> 0:01:13,026
on hearing health.

39
00:01:13,206 --> 0:01:15,226
Let's jump right in and start

40
00:01:15,386 --> 0:01:16,376
with the HealthKit data model.

41
00:01:17,026 --> 0:01:19,206
In HealthKit, we represent our

42
00:01:19,206 --> 0:01:22,056
data-- in HealthKit we represent

43
00:01:22,056 --> 0:01:23,986
our data with samples, which are

44
00:01:23,986 --> 0:01:25,226
measurements taken at a

45
00:01:25,226 --> 0:01:27,536
particular time that span some

46
00:01:27,536 --> 0:01:28,146
time interval.

47
00:01:29,586 --> 0:01:30,916
Most of these measurements are

48
00:01:30,916 --> 0:01:33,336
simple measurements, like the

49
00:01:33,336 --> 0:01:34,906
heart rates measured with Apple

50
00:01:34,956 --> 0:01:38,576
Watch or body mass measurements

51
00:01:38,576 --> 0:01:40,906
taken with a connected Bluetooth

52
00:01:41,996 --> 0:01:42,126
scale.

53
00:01:42,516 --> 0:01:43,926
Other measurements are more rich

54
00:01:43,926 --> 0:01:46,106
and complex, like workouts or

55
00:01:46,106 --> 0:01:47,256
the clinical health records that

56
00:01:47,256 --> 0:01:48,826
can be downloaded directly to

57
00:01:48,866 --> 0:01:49,330
iPhone.

58
00:01:51,656 --> 0:01:54,026
All of these rich complex data

59
00:01:54,396 --> 0:01:55,716
representations share a common

60
00:01:55,716 --> 0:01:57,716
structure; a top-level sample

61
00:01:57,716 --> 0:01:58,576
that's backed by some

62
00:01:58,576 --> 0:02:00,156
specialized data representation.

63
00:01:58,576 --> 0:02:00,156
specialized data representation.

64
00:02:01,076 --> 0:02:04,406
For example, a blood pressure

65
00:02:04,406 --> 0:02:05,776
measurement can be represented

66
00:02:05,776 --> 0:02:07,616
with a correlation sample, an

67
00:02:07,616 --> 0:02:09,346
allergy resource by clinical

68
00:02:09,346 --> 0:02:12,886
record, and a workout route by a

69
00:02:12,886 --> 0:02:13,646
series sample.

70
00:02:14,146 --> 0:02:15,256
All of these are examples of

71
00:02:15,256 --> 0:02:17,206
specialized sample types that

72
00:02:17,206 --> 0:02:18,546
all have their own unique

73
00:02:18,546 --> 0:02:19,666
backing data format.

74
00:02:20,306 --> 0:02:21,906
For example, the blood pressure

75
00:02:21,906 --> 0:02:23,276
correlation is a set of blood

76
00:02:23,276 --> 0:02:24,066
pressure measurements.

77
00:02:24,526 --> 0:02:25,786
The allergy resource is backed

78
00:02:25,886 --> 0:02:28,346
by a file resource, and the

79
00:02:28,346 --> 0:02:30,146
workout route is an array of CL

80
00:02:30,146 --> 0:02:30,816
location data.

81
00:02:31,606 --> 0:02:33,226
And just as HealthKit provides

82
00:02:33,276 --> 0:02:34,166
these specialized data

83
00:02:34,166 --> 0:02:35,396
representations for these

84
00:02:35,396 --> 0:02:36,566
special types of measurements,

85
00:02:37,196 --> 0:02:39,036
we've also expanded our data

86
00:02:39,036 --> 0:02:40,416
representations for our most

87
00:02:40,416 --> 0:02:41,556
common type of measurement,

88
00:02:41,826 --> 0:02:42,806
which are for quantity data.

89
00:02:43,416 --> 0:02:44,736
So, let's continue by talking

90
00:02:44,736 --> 0:02:46,486
about quantity data.

91
00:02:48,076 --> 0:02:50,616
To quickly review, quantity data

92
00:02:50,616 --> 0:02:51,866
in HealthKit applies to some

93
00:02:51,866 --> 0:02:53,666
very commonly-measured concepts,

94
00:02:54,896 --> 0:02:56,706
like walking distance, body

95
00:02:56,706 --> 0:02:58,166
mass, and heart rate.

96
00:02:59,036 --> 0:03:00,546
All of these concepts we refer

97
00:02:59,036 --> 0:03:00,546
All of these concepts we refer

98
00:03:00,546 --> 0:03:02,976
to as quantity types and they

99
00:03:02,976 --> 0:03:03,876
have measurements that look

100
00:03:03,876 --> 0:03:07,056
something like this, where each

101
00:03:07,056 --> 0:03:08,596
of these measurements consists

102
00:03:08,596 --> 0:03:10,346
of a quantity that is a value

103
00:03:10,596 --> 0:03:12,676
and a unit as well as a date

104
00:03:12,676 --> 0:03:13,696
interval that tells us the

105
00:03:13,696 --> 0:03:14,636
interval over which the

106
00:03:14,636 --> 0:03:15,456
measurement was taken.

107
00:03:16,446 --> 0:03:17,376
We call each of these

108
00:03:17,376 --> 0:03:18,726
measurements a quantity sample.

109
00:03:20,046 --> 0:03:21,386
Throughout this presentation,

110
00:03:21,596 --> 0:03:22,536
we're going to talk about

111
00:03:23,216 --> 0:03:24,546
quantity types and quantity

112
00:03:24,546 --> 0:03:26,496
samples specifically focused on

113
00:03:26,496 --> 0:03:27,896
how we can efficiently represent

114
00:03:27,896 --> 0:03:29,706
large numbers of quantities, but

115
00:03:29,706 --> 0:03:30,476
if you'd like more of an

116
00:03:30,476 --> 0:03:31,836
introduction to these concepts,

117
00:03:31,906 --> 0:03:33,056
you can always refer back to our

118
00:03:33,056 --> 0:03:35,496
2014 presentation, Introducing

119
00:03:35,496 --> 0:03:35,866
HealthKit.

120
00:03:37,126 --> 0:03:38,126
To forward our discussion of

121
00:03:38,126 --> 0:03:39,146
quantity data, I'd like to

122
00:03:39,146 --> 0:03:40,016
describe a scenario.

123
00:03:40,956 --> 0:03:42,326
If you would, please imagine

124
00:03:42,436 --> 0:03:44,276
that together we're working on a

125
00:03:44,276 --> 0:03:45,086
brand-new app.

126
00:03:45,906 --> 0:03:47,096
This app connects to a

127
00:03:47,096 --> 0:03:48,416
never-before-seen heart rate

128
00:03:48,416 --> 0:03:49,916
sensor that's been built right

129
00:03:49,916 --> 0:03:51,236
into a video game controller.

130
00:03:51,956 --> 0:03:53,686
Our task is to take measurements

131
00:03:53,686 --> 0:03:55,286
from this heart sensor and save

132
00:03:55,286 --> 0:03:56,366
them to HealthKit so that our

133
00:03:56,366 --> 0:03:57,586
users can see what their heart

134
00:03:57,586 --> 0:03:58,956
rate was when they play any

135
00:03:58,956 --> 0:03:59,726
particular game.

136
00:04:00,276 --> 0:04:02,576
The heart rates that we're

137
00:04:02,576 --> 0:04:03,856
receiving from the sensor might

138
00:04:03,856 --> 0:04:05,276
look something like this; a

139
00:04:05,276 --> 0:04:06,436
sequence of measurements that

140
00:04:06,436 --> 0:04:07,956
are coming into our app over

141
00:04:07,956 --> 0:04:09,206
time while the user plays.

142
00:04:09,696 --> 0:04:10,746
And we have to decide how we

143
00:04:10,746 --> 0:04:12,076
want to represent this data so

144
00:04:12,076 --> 0:04:12,936
that we can save it to

145
00:04:12,936 --> 0:04:13,346
HealthKit.

146
00:04:14,656 --> 0:04:15,816
One approach that we could take

147
00:04:16,005 --> 0:04:17,286
would be to use a single

148
00:04:17,315 --> 0:04:19,156
quantity sample and that might

149
00:04:19,156 --> 0:04:20,336
look something like this.

150
00:04:21,326 --> 0:04:22,516
This single quantity sample

151
00:04:22,516 --> 0:04:23,866
spans the entire measurement

152
00:04:23,866 --> 0:04:25,546
interval, that is the entire

153
00:04:25,646 --> 0:04:27,156
duration of the game, and

154
00:04:27,156 --> 0:04:28,056
represents all of the

155
00:04:28,056 --> 0:04:29,116
measurements we received from

156
00:04:29,116 --> 0:04:30,246
our sensor with a single

157
00:04:30,246 --> 0:04:30,606
quantity.

158
00:04:30,936 --> 0:04:31,776
Maybe an average.

159
00:04:32,856 --> 0:04:34,606
This representation gives us an

160
00:04:34,606 --> 0:04:36,456
object to represent the

161
00:04:36,456 --> 0:04:37,456
measurement we took, which was

162
00:04:37,456 --> 0:04:38,546
the heart rate during this game,

163
00:04:39,206 --> 0:04:40,666
but if later we want to see

164
00:04:40,666 --> 0:04:41,826
changes in heart rate over the

165
00:04:41,826 --> 0:04:42,846
game, we won't have the

166
00:04:42,846 --> 0:04:44,166
resolution to do that with this

167
00:04:44,166 --> 0:04:44,856
representation.

168
00:04:46,436 --> 0:04:47,646
Another representation we could

169
00:04:47,646 --> 0:04:49,506
take is to use multiple quantity

170
00:04:49,506 --> 0:04:50,746
samples and that might look

171
00:04:50,746 --> 0:04:52,816
something like this, where every

172
00:04:52,816 --> 0:04:54,416
measurement is represented by a

173
00:04:54,416 --> 0:04:55,646
different quantity sample.

174
00:04:56,586 --> 0:04:57,996
This representation will allow

175
00:04:57,996 --> 0:04:59,536
us to keep the full resolution

176
00:04:59,536 --> 0:05:01,396
measured by our sensor, but it

177
00:04:59,536 --> 0:05:01,396
measured by our sensor, but it

178
00:05:01,396 --> 0:05:02,836
is not an efficient

179
00:05:02,836 --> 0:05:03,996
representation of this data

180
00:05:04,086 --> 0:05:05,336
because we have redundancy.

181
00:05:05,976 --> 0:05:07,276
All of these quantity samples

182
00:05:07,456 --> 0:05:08,786
have identical metadata and

183
00:05:08,786 --> 0:05:11,536
device information and we no

184
00:05:11,536 --> 0:05:12,606
longer have that single

185
00:05:12,606 --> 0:05:13,596
convenient object that

186
00:05:13,596 --> 0:05:14,716
represents the measurement that

187
00:05:14,716 --> 0:05:15,986
we actually took, which was the

188
00:05:15,986 --> 0:05:17,406
heart rate during the game.

189
00:05:18,476 --> 0:05:20,186
Thankfully, we have a third

190
00:05:20,186 --> 0:05:21,466
approach that we can take that

191
00:05:21,466 --> 0:05:23,146
we call quantity series.

192
00:05:23,926 --> 0:05:24,676
The quantity series

193
00:05:24,676 --> 0:05:26,436
representation looks something

194
00:05:26,436 --> 0:05:27,016
like this.

195
00:05:27,976 --> 0:05:29,736
Again, a single quantity sample

196
00:05:29,736 --> 0:05:30,816
that spans our entire

197
00:05:30,816 --> 0:05:32,606
measurement interval, but in

198
00:05:32,606 --> 0:05:33,936
this case, instead of holding a

199
00:05:34,006 --> 0:05:35,206
single quantity, it can be

200
00:05:35,206 --> 0:05:36,876
backed by multiple quantities.

201
00:05:37,926 --> 0:05:40,026
This representation gives us the

202
00:05:40,026 --> 0:05:41,236
best of both of the previous

203
00:05:41,236 --> 0:05:42,946
approaches; a single object to

204
00:05:42,946 --> 0:05:44,746
represent our measurement that

205
00:05:44,746 --> 0:05:46,076
keeps the full resolution

206
00:05:46,436 --> 0:05:47,606
measure-- taken by our sensor.

207
00:05:48,626 --> 0:05:50,116
And notice that we've moved

208
00:05:50,326 --> 0:05:51,396
those redundant pieces of

209
00:05:51,396 --> 0:05:53,006
information that were previously

210
00:05:53,006 --> 0:05:54,086
on the individual quantity

211
00:05:54,086 --> 0:05:55,276
samples, so we only store a

212
00:05:55,276 --> 0:05:56,896
single copy at the quantity

213
00:05:56,956 --> 0:05:57,836
series sample level.

214
00:05:58,626 --> 0:05:59,886
We all want to be respectful of

215
00:05:59,886 --> 0:06:01,956
our users' device storage and

216
00:05:59,886 --> 0:06:01,956
our users' device storage and

217
00:06:01,956 --> 0:06:03,446
device performance and this

218
00:06:03,446 --> 0:06:04,886
representation allows us to do

219
00:06:05,526 --> 0:06:05,626
that.

220
00:06:06,536 --> 0:06:08,256
Because a quantity series sample

221
00:06:08,286 --> 0:06:10,316
is a quantity sample, we need a

222
00:06:10,316 --> 0:06:13,016
way to represent the sequence of

223
00:06:13,016 --> 0:06:14,636
quantities with a single value

224
00:06:15,116 --> 0:06:16,246
and in HealthKit we do that

225
00:06:16,246 --> 0:06:17,206
through a technique called

226
00:06:17,206 --> 0:06:17,866
aggregation.

227
00:06:19,076 --> 0:06:20,416
We have two primary aggregation

228
00:06:20,416 --> 0:06:22,726
styles; cumulative and discrete.

229
00:06:23,416 --> 0:06:24,826
The cumulative aggregation style

230
00:06:25,026 --> 0:06:26,206
applies to some very common

231
00:06:26,206 --> 0:06:27,886
quantity types, like distances,

232
00:06:28,016 --> 0:06:29,146
calories, and steps.

233
00:06:30,026 --> 0:06:31,326
All of these quantity types are

234
00:06:31,326 --> 0:06:32,916
constantly being accumulated by

235
00:06:32,916 --> 0:06:34,106
our users who are taking more

236
00:06:34,106 --> 0:06:35,676
steps and burning more calories

237
00:06:35,676 --> 0:06:37,966
and moving more distance and a

238
00:06:37,966 --> 0:06:39,836
natural way to accumulate-- to

239
00:06:39,836 --> 0:06:41,206
aggregate multiple quantities

240
00:06:41,206 --> 0:06:42,986
for these types is with a sum.

241
00:06:44,856 --> 0:06:46,546
On the other hand, we have some

242
00:06:46,576 --> 0:06:48,096
other common quantity types for

243
00:06:48,096 --> 0:06:49,456
which a sum doesn't make sense.

244
00:06:50,126 --> 0:06:51,976
For example, heart rate, body

245
00:06:51,976 --> 0:06:54,506
mass, and height won't mean

246
00:06:54,506 --> 0:06:55,796
anything when summed together.

247
00:06:55,876 --> 0:06:57,056
If you take multiple heart rates

248
00:06:57,056 --> 0:06:58,206
over a day and add them up,

249
00:06:58,806 --> 0:07:00,026
you'll get a nonsense value.

250
00:06:58,806 --> 0:07:00,026
you'll get a nonsense value.

251
00:07:00,546 --> 0:07:01,616
It's much more natural to

252
00:07:01,616 --> 0:07:03,856
aggregate quantity types like

253
00:07:03,856 --> 0:07:05,396
this with an average and maybe

254
00:07:05,396 --> 0:07:06,786
some other aggregating

255
00:07:06,786 --> 0:07:08,606
statistics, like minimum,

256
00:07:08,606 --> 0:07:10,116
maximum, and most recent value.

257
00:07:10,686 --> 0:07:14,296
Again, we can see that a

258
00:07:14,296 --> 0:07:16,326
sequence of cumulative

259
00:07:16,326 --> 0:07:18,166
quantities can be represented

260
00:07:18,166 --> 0:07:20,316
and aggregated by a sum and a

261
00:07:20,316 --> 0:07:21,886
series of discrete quantities

262
00:07:21,976 --> 0:07:23,566
like heart rates are going to be

263
00:07:23,566 --> 0:07:25,606
aggregated to produce some

264
00:07:25,606 --> 0:07:27,196
rising statistics, like minimum,

265
00:07:27,536 --> 0:07:28,846
maximum, average, and most

266
00:07:28,846 --> 0:07:29,366
recent value.

267
00:07:29,956 --> 0:07:32,826
In HealthKit, we use quantity

268
00:07:32,826 --> 0:07:34,246
aggregation style to tell us the

269
00:07:34,246 --> 0:07:35,386
aggregation style for a

270
00:07:35,386 --> 0:07:36,456
particular quantity type.

271
00:07:37,156 --> 0:07:39,586
And in iOS 13, we've decided to

272
00:07:39,586 --> 0:07:40,716
deprecate the discrete

273
00:07:40,716 --> 0:07:43,716
aggregation style in favor of a

274
00:07:43,716 --> 0:07:45,216
new discrete arithmetic

275
00:07:45,276 --> 0:07:46,396
aggregation style.

276
00:07:46,786 --> 0:07:48,226
We've done this to make clear

277
00:07:48,226 --> 0:07:49,726
that the average calculated for

278
00:07:49,726 --> 0:07:51,476
this aggregation style is the

279
00:07:51,476 --> 0:07:52,646
simple arithmetic mean.

280
00:07:53,566 --> 0:07:55,356
We've also introduced a couple

281
00:07:55,356 --> 0:07:56,636
of new aggregation styles,

282
00:07:56,856 --> 0:07:57,526
starting with

283
00:07:57,846 --> 0:07:59,636
discreteTemporallyWeighted, a

284
00:07:59,636 --> 0:08:01,186
special aggregation style that

285
00:07:59,636 --> 0:08:01,186
special aggregation style that

286
00:08:01,186 --> 0:08:02,726
uses a time-weighted average

287
00:08:02,906 --> 0:08:04,296
that we apply when aggregating

288
00:08:04,296 --> 0:08:05,146
heart rate quantities.

289
00:08:06,426 --> 0:08:07,266
We've also added

290
00:08:07,356 --> 0:08:08,526
discreteEquivalent

291
00:08:08,526 --> 0:08:10,546
ContinuousLevel, a special

292
00:08:10,546 --> 0:08:11,666
aggregation style that gets

293
00:08:11,666 --> 0:08:13,196
applied to audio exposure

294
00:08:13,196 --> 0:08:13,636
quantities.

295
00:08:14,346 --> 0:08:15,446
Divya's going to go into more

296
00:08:15,446 --> 0:08:16,776
detail about audio exposure

297
00:08:16,776 --> 0:08:17,256
later on.

298
00:08:17,846 --> 0:08:20,976
Now that we know how to

299
00:08:20,976 --> 0:08:23,176
aggregate multiple quantities to

300
00:08:23,176 --> 0:08:24,656
produce some rising statistics,

301
00:08:24,946 --> 0:08:26,226
we need somewhere to store this

302
00:08:26,226 --> 0:08:27,416
information on our quantity

303
00:08:27,416 --> 0:08:27,826
sample.

304
00:08:28,746 --> 0:08:30,346
And we've done this in iOS 13 by

305
00:08:30,346 --> 0:08:31,686
introducing two new quantity

306
00:08:31,686 --> 0:08:33,626
sample subclasses, starting with

307
00:08:33,626 --> 0:08:34,856
cumulative quantity sample,

308
00:08:34,936 --> 0:08:36,706
which has a sum property, and

309
00:08:36,706 --> 0:08:38,456
discrete quantity sample, which

310
00:08:38,456 --> 0:08:41,525
has a average, minimum, maximum,

311
00:08:41,525 --> 0:08:42,515
and most recent quantity

312
00:08:42,515 --> 0:08:42,956
properties.

313
00:08:43,926 --> 0:08:45,936
We've also made quantity sample

314
00:08:46,156 --> 0:08:48,006
an abstract base class, which

315
00:08:48,006 --> 0:08:49,476
means that from now on all

316
00:08:49,476 --> 0:08:50,966
instances of quantity sample

317
00:08:50,966 --> 0:08:52,486
that you interact with will be

318
00:08:52,486 --> 0:08:54,476
one of these two quantity sample

319
00:08:54,476 --> 0:08:56,156
subclasses, depending on the

320
00:08:56,156 --> 0:08:57,396
quantity type's aggregation

321
00:08:57,396 --> 0:08:57,746
style.

322
00:08:58,966 --> 0:09:01,056
And also I want to note that all

323
00:08:58,966 --> 0:09:01,056
And also I want to note that all

324
00:09:01,056 --> 0:09:02,296
quantity samples can be thought

325
00:09:02,296 --> 0:09:04,176
of as quantity series, some of

326
00:09:04,176 --> 0:09:05,686
which just happen to have a

327
00:09:05,686 --> 0:09:07,756
count of 1.

328
00:09:07,956 --> 0:09:09,096
We've also introduced

329
00:09:09,096 --> 0:09:10,786
corresponding predicate keypaths

330
00:09:10,946 --> 0:09:12,016
for both of these new sample

331
00:09:12,016 --> 0:09:15,156
types so that you can query for

332
00:09:15,156 --> 0:09:16,696
corresponding properties of both

333
00:09:16,696 --> 0:09:17,426
of these samples.

334
00:09:18,836 --> 0:09:19,766
Going back to our quantity

335
00:09:19,766 --> 0:09:21,876
series sample example, we can

336
00:09:21,946 --> 0:09:23,716
see that quantity series sample

337
00:09:23,776 --> 0:09:24,766
can be summarized with our

338
00:09:24,766 --> 0:09:26,476
aggregating statistics, average,

339
00:09:26,476 --> 0:09:27,776
min, max, and most recent value.

340
00:09:29,186 --> 0:09:30,236
Now I'd like to show you how we

341
00:09:30,236 --> 0:09:31,756
go about building this quantity

342
00:09:31,756 --> 0:09:32,106
series.

343
00:09:32,746 --> 0:09:35,026
We're going to start our

344
00:09:35,026 --> 0:09:36,406
quantity series at the time that

345
00:09:36,406 --> 0:09:37,346
our measurement starts.

346
00:09:37,806 --> 0:09:38,906
In this scenario, it's at the

347
00:09:38,906 --> 0:09:39,576
start of a game.

348
00:09:40,716 --> 0:09:42,426
Then, we'll receive measurements

349
00:09:42,426 --> 0:09:43,536
from our sensor which we can

350
00:09:43,536 --> 0:09:45,126
insert into this quantity series

351
00:09:45,276 --> 0:09:46,686
and we can continue to take

352
00:09:46,686 --> 0:09:47,836
measurements from our sensor and

353
00:09:47,836 --> 0:09:48,846
insert them into the quantity

354
00:09:48,846 --> 0:09:50,756
series as long as the game is

355
00:09:50,756 --> 0:09:51,256
being played.

356
00:09:52,506 --> 0:09:53,486
Finally, when we're done

357
00:09:53,486 --> 0:09:55,006
measuring, we can end the

358
00:09:55,006 --> 0:09:57,116
quantity series and get back the

359
00:09:57,116 --> 0:09:58,426
summarizing quantity series

360
00:09:58,426 --> 0:09:59,000
sample.

361
00:10:01,546 --> 0:10:02,446
Now let's see what this looks

362
00:10:02,446 --> 0:10:02,986
like in code.

363
00:10:03,576 --> 0:10:07,006
Our first step, as with all

364
00:10:07,006 --> 0:10:08,706
HealthKit interaction is to

365
00:10:08,706 --> 0:10:09,946
request authorization for the

366
00:10:09,946 --> 0:10:11,686
data types that we plan to read

367
00:10:11,686 --> 0:10:12,096
and write.

368
00:10:12,366 --> 0:10:13,416
In this case, we're going to

369
00:10:13,416 --> 0:10:14,836
request authorization for heart

370
00:10:14,836 --> 0:10:15,056
rate.

371
00:10:16,096 --> 0:10:16,736
Once we've requested

372
00:10:16,736 --> 0:10:19,096
authorization, we can create our

373
00:10:19,096 --> 0:10:20,496
quantity series sample builder

374
00:10:20,566 --> 0:10:21,866
with our healthStore, the data

375
00:10:21,866 --> 0:10:23,366
type, the start date of

376
00:10:23,366 --> 0:10:25,296
measurement, and an optional HK

377
00:10:25,856 --> 0:10:26,000
device.

378
00:10:27,376 --> 0:10:29,096
Then, as long as we're receiving

379
00:10:29,096 --> 0:10:30,376
measurements from our sensor, we

380
00:10:30,456 --> 0:10:31,756
can insert those into our

381
00:10:31,756 --> 0:10:33,036
quantity series sample builder.

382
00:10:33,536 --> 0:10:35,156
And, finally, at the end of the

383
00:10:35,156 --> 0:10:36,736
game, we can finish our quantity

384
00:10:36,736 --> 0:10:38,516
series sample builder with

385
00:10:38,516 --> 0:10:39,986
optional metadata and the end

386
00:10:39,986 --> 0:10:40,816
date for our measurement.

387
00:10:41,326 --> 0:10:44,276
Now that we've thought about how

388
00:10:44,276 --> 0:10:45,396
we can efficiently represent

389
00:10:45,396 --> 0:10:46,576
quantity data and save it to

390
00:10:46,576 --> 0:10:47,886
HealthKit as a quantity series,

391
00:10:48,156 --> 0:10:49,086
we can think about the

392
00:10:49,086 --> 0:10:50,776
experiences we can bring to our

393
00:10:50,776 --> 0:10:52,086
app with the data once it's

394
00:10:52,086 --> 0:10:52,806
saved to HealthKit.

395
00:10:53,836 --> 0:10:55,016
Maybe we want to give our app

396
00:10:55,016 --> 0:10:56,846
the ability to record calorie

397
00:10:56,846 --> 0:10:58,026
information in addition to heart

398
00:10:58,026 --> 0:10:59,706
rate so that we can show our

399
00:10:59,706 --> 0:11:01,806
users the total calories that

400
00:10:59,706 --> 0:11:01,806
users the total calories that

401
00:11:01,806 --> 0:11:02,766
they burned in some time

402
00:11:02,766 --> 0:11:04,746
interval or just present some

403
00:11:04,746 --> 0:11:06,276
amazing graphs and charts that

404
00:11:06,276 --> 0:11:07,346
highlight and help them

405
00:11:07,346 --> 0:11:08,156
visualize their data.

406
00:11:08,156 --> 0:11:10,406
Or we want to point out averages

407
00:11:10,406 --> 0:11:11,676
that have been recorded over a

408
00:11:11,676 --> 0:11:12,316
time period.

409
00:11:12,896 --> 0:11:15,736
Or help users see the minimum

410
00:11:15,736 --> 0:11:16,966
and maximum value that they hit

411
00:11:16,966 --> 0:11:17,916
during a particular game.

412
00:11:19,096 --> 0:11:20,786
Or we just want to keep our UI

413
00:11:20,926 --> 0:11:23,036
live and up to date as new data

414
00:11:23,036 --> 0:11:24,716
is being recorded as it's

415
00:11:24,716 --> 0:11:25,606
received from our sensor.

416
00:11:26,216 --> 0:11:29,526
We can do all of this and more

417
00:11:29,586 --> 0:11:30,966
with a single HealthKit query.

418
00:11:33,036 --> 0:11:35,156
HKStatisticsCollectionQuery.

419
00:11:36,586 --> 0:11:37,946
Many of you are already familiar

420
00:11:37,946 --> 0:11:39,276
with StatisticsCollectionQuery,

421
00:11:39,806 --> 0:11:41,576
but it's pretty amazing, so I

422
00:11:41,576 --> 0:11:43,196
just wanted to reiterate what

423
00:11:43,196 --> 0:11:43,836
it's capable of.

424
00:11:44,616 --> 0:11:46,336
StatisticsCollectionQuery can

425
00:11:46,336 --> 0:11:48,096
help you calculate multiple

426
00:11:48,096 --> 0:11:49,986
statistics that can be separated

427
00:11:49,986 --> 0:11:51,776
by the source of data and you

428
00:11:51,776 --> 0:11:53,296
can receive updates to those

429
00:11:53,296 --> 0:11:55,186
statistics as new data is saved

430
00:11:55,186 --> 0:11:55,636
to HealthKit.

431
00:11:56,956 --> 0:11:58,946
And if that wasn't enough, we've

432
00:11:58,946 --> 0:11:59,846
also updated

433
00:11:59,846 --> 0:12:01,236
StatisticsCollectionQuery to

434
00:11:59,846 --> 0:12:01,236
StatisticsCollectionQuery to

435
00:12:01,236 --> 0:12:02,566
support all of our new

436
00:12:02,566 --> 0:12:04,346
aggregation styles and to

437
00:12:04,416 --> 0:12:06,126
automatically include all of the

438
00:12:06,126 --> 0:12:08,896
backing quantity data that is

439
00:12:09,066 --> 0:12:10,486
stored in quantity series

440
00:12:10,486 --> 0:12:10,896
samples.

441
00:12:11,886 --> 0:12:13,796
If you want more information on

442
00:12:13,896 --> 0:12:15,466
StatisticsCollectionQuery and

443
00:12:15,466 --> 0:12:17,136
HKStatistics, you can always

444
00:12:17,136 --> 0:12:18,556
refer back to Introducing

445
00:12:18,556 --> 0:12:18,936
HealthKit.

446
00:12:19,426 --> 0:12:21,066
Even though

447
00:12:21,756 --> 0:12:24,116
StatisticsCollectionQuery should

448
00:12:24,116 --> 0:12:25,996
be our go-to tool to efficiently

449
00:12:25,996 --> 0:12:27,166
interact with quantity data

450
00:12:27,166 --> 0:12:28,326
that's been saved to HealthKit,

451
00:12:29,546 --> 0:12:31,496
sometimes we really do want to

452
00:12:31,496 --> 0:12:33,076
enumerate every single quantity

453
00:12:33,256 --> 0:12:34,356
that are stored in quantity

454
00:12:34,356 --> 0:12:34,726
series.

455
00:12:35,516 --> 0:12:36,846
For example, if we want to do

456
00:12:36,846 --> 0:12:38,906
something like plot every single

457
00:12:38,906 --> 0:12:40,236
heart rate that was measured by

458
00:12:40,236 --> 0:12:41,316
our application while a user

459
00:12:41,316 --> 0:12:41,896
played the game.

460
00:12:43,046 --> 0:12:44,696
We can do this with

461
00:12:45,216 --> 0:12:46,926
QuantitySeriesSampleQuery.

462
00:12:48,056 --> 0:12:49,536
In iOS 13, we've enhanced

463
00:12:49,536 --> 0:12:51,156
QuantitySeriesSampleQuery by

464
00:12:51,156 --> 0:12:52,836
replacing the quantity sample

465
00:12:52,836 --> 0:12:55,026
argument with a quantity type in

466
00:12:55,636 --> 0:12:56,316
NSPredicate.

467
00:12:58,056 --> 0:12:59,356
Now, instead of simply

468
00:12:59,356 --> 0:13:00,876
enumerating the quantities for a

469
00:12:59,356 --> 0:13:00,876
enumerating the quantities for a

470
00:13:00,876 --> 0:13:02,406
single quantity sample, you can

471
00:13:02,406 --> 0:13:03,806
enumerate multiple quantity

472
00:13:03,806 --> 0:13:05,366
samples and all of their backing

473
00:13:05,366 --> 0:13:05,966
quantity data.

474
00:13:07,466 --> 0:13:08,976
We've also updated the date

475
00:13:08,976 --> 0:13:10,246
parameter with a date interval,

476
00:13:10,436 --> 0:13:11,356
so you get the full date

477
00:13:11,356 --> 0:13:12,446
interval for every single

478
00:13:12,446 --> 0:13:13,386
quantity while it's being

479
00:13:13,386 --> 0:13:13,856
enumerated.

480
00:13:14,426 --> 0:13:16,026
And we also have an optional

481
00:13:16,096 --> 0:13:17,746
quantity sample parameter which

482
00:13:17,746 --> 0:13:19,806
can give you the quantity series

483
00:13:19,836 --> 0:13:21,036
sample that is currently being

484
00:13:21,036 --> 0:13:21,506
enumerated.

485
00:13:22,006 --> 0:13:25,536
This query is best explained

486
00:13:25,536 --> 0:13:26,916
visually, so I'd like to show

487
00:13:26,916 --> 0:13:27,456
you this.

488
00:13:28,306 --> 0:13:30,096
Here we have two quantity series

489
00:13:30,126 --> 0:13:30,496
samples.

490
00:13:31,076 --> 0:13:32,636
The first quantity series sample

491
00:13:32,666 --> 0:13:33,846
consists of quantities that were

492
00:13:33,846 --> 0:13:35,346
measured with the heart sensor

493
00:13:35,466 --> 0:13:36,516
built into our video game

494
00:13:36,516 --> 0:13:36,976
controller.

495
00:13:38,206 --> 0:13:39,966
And the second series consists

496
00:13:39,966 --> 0:13:41,196
of quantities measured on Apple

497
00:13:41,196 --> 0:13:41,596
Watch.

498
00:13:42,126 --> 0:13:43,316
Because our user happened to be

499
00:13:43,316 --> 0:13:44,306
using both devices

500
00:13:44,306 --> 0:13:46,436
simultaneously, these series

501
00:13:46,436 --> 0:13:48,946
overlap each other in time.

502
00:13:49,006 --> 0:13:49,746
By default, the

503
00:13:49,746 --> 0:13:51,136
QuantitySeriesSampleQuery is

504
00:13:51,136 --> 0:13:52,346
going to enumerate all of the

505
00:13:52,346 --> 0:13:53,936
quantities from both of these

506
00:13:53,936 --> 0:13:55,026
quantity series in the

507
00:13:55,026 --> 0:13:56,326
quantity's start date order.

508
00:13:56,686 --> 0:13:57,226
Like this.

509
00:13:58,176 --> 0:13:59,616
And note that at the end of the

510
00:13:59,616 --> 0:14:02,036
quantity series, the done

511
00:13:59,616 --> 0:14:02,036
quantity series, the done

512
00:14:02,036 --> 0:14:04,696
parameter is set to true.

513
00:14:04,846 --> 0:14:06,736
If you need access to properties

514
00:14:06,946 --> 0:14:08,306
on the quantity series samples

515
00:14:08,306 --> 0:14:09,656
themselves, like device

516
00:14:09,656 --> 0:14:10,866
information, source, revision,

517
00:14:10,866 --> 0:14:12,826
or metadata, you can set include

518
00:14:12,866 --> 0:14:14,676
sample to true on the query

519
00:14:14,676 --> 0:14:15,556
before executing it.

520
00:14:16,156 --> 0:14:17,296
And notice that, in this case,

521
00:14:17,406 --> 0:14:18,676
while enumerating these quantity

522
00:14:18,676 --> 0:14:20,266
series you can get the

523
00:14:20,266 --> 0:14:21,656
corresponding quantity series

524
00:14:21,696 --> 0:14:22,866
sample in the quantities

525
00:14:22,866 --> 0:14:23,186
handler.

526
00:14:26,966 --> 0:14:28,326
Now that we've seen how we can

527
00:14:28,326 --> 0:14:29,406
efficiently interact with

528
00:14:29,406 --> 0:14:30,696
quantity data using quantity

529
00:14:30,696 --> 0:14:31,966
series, I'd like to show you how

530
00:14:31,966 --> 0:14:33,236
easy it is to add support for

531
00:14:33,236 --> 0:14:34,586
this to the game that we've been

532
00:14:34,586 --> 0:14:35,426
talking about in this

533
00:14:35,426 --> 0:14:35,996
presentation.

534
00:14:36,836 --> 0:14:38,036
Follow me over to Xcode and I'll

535
00:14:38,036 --> 0:14:38,816
show you a brief demo.

536
00:14:44,486 --> 0:14:46,146
What I have here is our game in

537
00:14:46,146 --> 0:14:47,576
its current form.

538
00:14:48,136 --> 0:14:49,776
I don't actually have a heart

539
00:14:49,776 --> 0:14:51,506
rate sensor that's been built

540
00:14:51,506 --> 0:14:52,746
into a video game controller,

541
00:14:52,826 --> 0:14:53,746
but if any of you want to make

542
00:14:53,746 --> 0:14:55,006
one, come find me after.

543
00:14:55,696 --> 0:14:57,656
I do have another external heart

544
00:14:57,656 --> 0:14:59,186
sensor that I can use to get

545
00:14:59,186 --> 0:15:00,966
information into this app.

546
00:14:59,186 --> 0:15:00,966
information into this app.

547
00:15:00,966 --> 0:15:02,486
And remember the quantity series

548
00:15:02,486 --> 0:15:04,106
can be applied to any quantity

549
00:15:04,106 --> 0:15:05,396
type, not just heart rate, and

550
00:15:05,766 --> 0:15:06,816
the data can come from an

551
00:15:06,816 --> 0:15:08,206
external sensor, an external

552
00:15:08,206 --> 0:15:10,796
database, a file on disk, or

553
00:15:11,296 --> 0:15:12,736
just be directly entered by your

554
00:15:13,906 --> 0:15:14,016
app.

555
00:15:14,376 --> 0:15:15,916
In this game, we have two tabs.

556
00:15:16,916 --> 0:15:18,346
First, the Play tab brings up

557
00:15:18,346 --> 0:15:19,536
the PlayViewController where we

558
00:15:19,536 --> 0:15:20,196
can play our game.

559
00:15:20,196 --> 0:15:22,446
And the second tab, the Last

560
00:15:22,446 --> 0:15:23,816
Game tab, brings up the

561
00:15:23,816 --> 0:15:24,886
ResultsViewController, which

562
00:15:24,886 --> 0:15:25,946
will show us the heart rates

563
00:15:25,946 --> 0:15:26,776
that were measured during the

564
00:15:26,776 --> 0:15:28,686
most recently played game.

565
00:15:30,786 --> 0:15:31,946
I'm going to go ahead and switch

566
00:15:31,946 --> 0:15:33,076
back to the PlayViewController

567
00:15:33,076 --> 0:15:34,446
to show you what a round of the

568
00:15:34,446 --> 0:15:35,116
game looks like.

569
00:15:35,716 --> 0:15:38,376
In this game, I'm trying to

570
00:15:38,376 --> 0:15:40,046
click these hot dogs and not hit

571
00:15:40,046 --> 0:15:40,516
the broccoli.

572
00:15:41,136 --> 0:15:42,266
Might seem a bit backwards for a

573
00:15:42,266 --> 0:15:43,796
health app, but this is what I

574
00:15:43,796 --> 0:15:44,000
have.

575
00:15:45,486 --> 0:15:47,226
Every hot dog that I get scores

576
00:15:47,226 --> 0:15:48,626
another point and my heart rate

577
00:15:48,626 --> 0:15:50,116
has a tendency to increase while

578
00:15:50,116 --> 0:15:51,236
I play.

579
00:15:51,426 --> 0:15:52,606
If I switch back to the Last

580
00:15:52,606 --> 0:15:53,776
Game tab, I can see we don't yet

581
00:15:53,776 --> 0:15:54,946
have any heart rate data being

582
00:15:54,946 --> 0:15:55,956
measured while I played that

583
00:15:55,956 --> 0:15:56,466
last game.

584
00:15:56,856 --> 0:15:57,916
We'd like to add that support to

585
00:15:57,916 --> 0:15:58,456
our app now.

586
00:15:59,626 --> 0:16:01,006
Our first step is going to

587
00:15:59,626 --> 0:16:01,006
Our first step is going to

588
00:16:01,006 --> 0:16:02,646
have-- be to have our app

589
00:16:02,646 --> 0:16:04,136
request authorization, just like

590
00:16:04,136 --> 0:16:05,296
we saw in the presentation.

591
00:16:05,916 --> 0:16:07,666
And because our app is all about

592
00:16:08,126 --> 0:16:09,356
writing and reading heart rate

593
00:16:09,356 --> 0:16:11,026
data while users play, I want to

594
00:16:11,026 --> 0:16:12,096
do this request for

595
00:16:12,096 --> 0:16:14,396
authorization as soon as my app

596
00:16:14,436 --> 0:16:15,476
finishes launching, so I'm going

597
00:16:15,476 --> 0:16:17,086
to add this in application

598
00:16:17,086 --> 0:16:18,776
didFinishLaunchingWithOptions in

599
00:16:18,776 --> 0:16:19,500
my app delegate.

600
00:16:22,516 --> 0:16:24,646
Here I'm requesting-- I'm

601
00:16:24,646 --> 0:16:26,146
creating a set of quantity types

602
00:16:26,146 --> 0:16:28,026
specifically for heart rate so

603
00:16:28,026 --> 0:16:29,576
that I can request authorization

604
00:16:29,576 --> 0:16:31,256
within HK healthStore for these

605
00:16:31,256 --> 0:16:31,886
sample types.

606
00:16:32,426 --> 0:16:35,176
After we request authorization,

607
00:16:35,266 --> 0:16:36,426
we can get measurements from our

608
00:16:36,426 --> 0:16:38,466
sensor and save that data to a

609
00:16:38,466 --> 0:16:39,136
quantity series.

610
00:16:40,046 --> 0:16:41,246
I've already created a class

611
00:16:41,246 --> 0:16:42,726
that encapsulates the connection

612
00:16:42,996 --> 0:16:44,316
to my external sensor and, if

613
00:16:44,316 --> 0:16:45,416
you want to see how that works,

614
00:16:45,586 --> 0:16:46,496
you can always check out the

615
00:16:46,496 --> 0:16:47,976
sample project associated with

616
00:16:47,976 --> 0:16:48,436
this session.

617
00:16:49,396 --> 0:16:50,806
I'm going to switch over to the

618
00:16:50,806 --> 0:16:52,396
PlayViewController now because

619
00:16:52,396 --> 0:16:53,826
we want to add the connection to

620
00:16:53,826 --> 0:16:55,406
record heart rate while the user

621
00:16:55,406 --> 0:16:55,956
plays a game.

622
00:16:55,956 --> 0:16:57,446
I'm going to open the project

623
00:16:57,446 --> 0:16:58,956
navigator and switch over to our

624
00:16:58,956 --> 0:16:59,736
PlayViewController.

625
00:17:01,256 --> 0:17:02,216
In the PlayViewController, I

626
00:17:02,216 --> 0:17:03,566
have a function, startNewGame,

627
00:17:03,566 --> 0:17:04,536
that's called whenever that

628
00:17:04,536 --> 0:17:06,096
Start Game button is pressed in

629
00:17:06,096 --> 0:17:06,316
our app.

630
00:17:06,816 --> 0:17:08,146
This is a great place for us to

631
00:17:08,146 --> 0:17:09,076
create a connection to our

632
00:17:09,076 --> 0:17:11,165
external heart sensor and start

633
00:17:11,165 --> 0:17:12,406
our quantity series-- our

634
00:17:12,406 --> 0:17:13,806
quantity series sample builder.

635
00:17:14,606 --> 0:17:15,506
First, I'm going to create the

636
00:17:15,506 --> 0:17:17,000
connection to my sensor.

637
00:17:20,195 --> 0:17:21,915
This HeartSensorSession is the

638
00:17:21,915 --> 0:17:23,036
class that I mentioned earlier

639
00:17:23,036 --> 0:17:24,425
that I wrote that encapsulates

640
00:17:24,425 --> 0:17:25,816
the connection to my sensor and

641
00:17:25,816 --> 0:17:26,336
I'm setting the

642
00:17:26,336 --> 0:17:28,076
PlayViewController itself as the

643
00:17:28,076 --> 0:17:28,736
delegate of the

644
00:17:28,736 --> 0:17:30,000
HeartSensorSession.

645
00:17:31,046 --> 0:17:32,716
Now I can start my quantity

646
00:17:32,716 --> 0:17:34,356
series sample builder for heart

647
00:17:34,806 --> 0:17:35,000
rate.

648
00:17:36,636 --> 0:17:38,106
Here I'm creating a quantity

649
00:17:38,106 --> 0:17:39,296
series sample builder with my

650
00:17:39,296 --> 0:17:40,606
healthStore for the heart rate

651
00:17:40,606 --> 0:17:41,896
type where the start date of

652
00:17:41,896 --> 0:17:43,076
measurement is the current date

653
00:17:43,386 --> 0:17:44,906
and I'm getting my HK device

654
00:17:44,906 --> 0:17:45,706
information from the

655
00:17:45,706 --> 0:17:46,436
HeartSensorSession.

656
00:17:47,726 --> 0:17:48,626
The HeartSensorSession

657
00:17:48,626 --> 0:17:49,446
communicates to the

658
00:17:49,446 --> 0:17:50,486
PlayViewController through its

659
00:17:50,486 --> 0:17:52,216
delegate protocol,

660
00:17:53,216 --> 0:17:54,366
HeartSensorSessionDelegate,

661
00:17:54,606 --> 0:17:56,056
which has these two methods;

662
00:17:56,586 --> 0:17:57,916
sessionDidReceiveHeartRate and

663
00:17:57,916 --> 0:17:58,766
sessionDidEnd.

664
00:18:00,036 --> 0:18:01,026
With sessionDidEnd--

665
00:18:01,126 --> 0:18:02,006
DidReceiveHeartRate,

666
00:18:02,226 --> 0:18:03,826
HeartSensorSession provides

667
00:18:03,826 --> 0:18:05,516
heart rate measurements to its

668
00:18:05,516 --> 0:18:06,796
delegate and this is a great

669
00:18:06,796 --> 0:18:07,576
place for us to take these

670
00:18:07,576 --> 0:18:08,746
measurements and insert them

671
00:18:08,746 --> 0:18:09,976
into our quantity series sample

672
00:18:09,976 --> 0:18:10,330
builder.

673
00:18:16,536 --> 0:18:18,626
Here I'm inserting the heart

674
00:18:18,626 --> 0:18:19,926
rates and date intervals that

675
00:18:19,926 --> 0:18:20,696
I've received from the

676
00:18:20,696 --> 0:18:21,686
HeartSensorSession into my

677
00:18:21,686 --> 0:18:22,916
quantity series sample builder.

678
00:18:24,746 --> 0:18:26,626
And, finally, sessionDidEnd is

679
00:18:26,626 --> 0:18:28,616
called by the HeartSensorSession

680
00:18:28,866 --> 0:18:30,166
when a HeartSensorSession ends

681
00:18:30,166 --> 0:18:30,896
at the end of a game.

682
00:18:31,296 --> 0:18:32,646
This is the perfect place for us

683
00:18:32,646 --> 0:18:33,816
to end our quantity series

684
00:18:33,816 --> 0:18:35,826
sample builder to persist the

685
00:18:35,826 --> 0:18:36,966
heart rate quantities that we've

686
00:18:36,966 --> 0:18:37,796
inserted to HealthKit.

687
00:18:37,796 --> 0:18:40,056
And we can also associate the

688
00:18:40,056 --> 0:18:40,996
quantity series that we've

689
00:18:40,996 --> 0:18:42,366
created with metadata.

690
00:18:42,716 --> 0:18:43,886
In this case, I'd like to use

691
00:18:43,886 --> 0:18:45,326
metadata to associate these

692
00:18:45,326 --> 0:18:46,406
heart rates with the game

693
00:18:46,406 --> 0:18:48,006
session that we just played, so

694
00:18:48,006 --> 0:18:48,756
that in the

695
00:18:48,756 --> 0:18:50,036
ResultsViewController we can

696
00:18:50,036 --> 0:18:51,326
query for the heart data

697
00:18:51,546 --> 0:18:52,806
associated with the most recent

698
00:18:52,806 --> 0:18:53,000
game.

699
00:18:57,546 --> 0:18:58,976
Here I'm creating a metadata

700
00:18:58,976 --> 0:19:00,216
dictionary using the

701
00:18:58,976 --> 0:19:00,216
dictionary using the

702
00:19:00,216 --> 0:19:02,546
MetadataKeyExternalUUID, which I

703
00:19:02,546 --> 0:19:03,936
am setting to the heart sensor's

704
00:19:04,166 --> 0:19:04,896
UUID string.

705
00:19:05,506 --> 0:19:07,016
And finally, I am finishing my

706
00:19:07,016 --> 0:19:08,236
quantity series with that

707
00:19:08,236 --> 0:19:09,486
metadata and the end date of

708
00:19:09,486 --> 0:19:10,756
measurement that we receive from

709
00:19:10,756 --> 0:19:11,576
the HeartSensorSession.

710
00:19:12,186 --> 0:19:15,146
Now that we've saved our heart

711
00:19:15,146 --> 0:19:17,266
rate data to HealthKit, we want

712
00:19:17,266 --> 0:19:19,026
to-- we want to display that

713
00:19:19,026 --> 0:19:20,166
data to the users in the

714
00:19:20,166 --> 0:19:21,016
ResultsViewController.

715
00:19:21,126 --> 0:19:21,936
So, let's move over to the

716
00:19:21,936 --> 0:19:22,976
ResultsViewController now.

717
00:19:28,356 --> 0:19:29,946
In the ResultsViewController

718
00:19:29,946 --> 0:19:31,476
viewDidLoad function, I have a

719
00:19:31,476 --> 0:19:32,256
utility function,

720
00:19:32,786 --> 0:19:34,276
loadHeartRateQuanitites, that's

721
00:19:34,276 --> 0:19:35,416
going to query for the heart

722
00:19:35,416 --> 0:19:36,936
rate data associated with the

723
00:19:36,936 --> 0:19:39,136
most recent game session and

724
00:19:39,136 --> 0:19:40,946
generate a string representation

725
00:19:40,946 --> 0:19:42,086
of each of these quantities that

726
00:19:42,086 --> 0:19:43,326
can be displayed in a table

727
00:19:43,326 --> 0:19:43,536
view.

728
00:19:44,866 --> 0:19:46,916
Let's go ahead and start this by

729
00:19:46,916 --> 0:19:48,636
adding a quantity series sample

730
00:19:48,636 --> 0:19:50,406
query for heart rate associated

731
00:19:50,406 --> 0:19:51,966
with our most recent game, if we

732
00:19:51,966 --> 0:19:53,000
have one.

733
00:19:56,336 --> 0:19:57,536
Here I'm guarding against the

734
00:19:57,536 --> 0:19:59,006
case that no game has yet been

735
00:19:59,006 --> 0:19:59,266
played.

736
00:20:00,286 --> 0:20:01,806
If we have a game identifier, we

737
00:20:01,806 --> 0:20:03,706
can go ahead and create a query

738
00:20:03,706 --> 0:20:04,646
predicate for the

739
00:20:04,646 --> 0:20:07,376
MetadataExternalKeyUUID using

740
00:20:07,376 --> 0:20:08,156
that game identifier.

741
00:20:08,646 --> 0:20:10,136
Remember, we use this metadata

742
00:20:10,136 --> 0:20:11,286
so that we would later be able

743
00:20:11,286 --> 0:20:12,626
to query for the heart rate data

744
00:20:12,626 --> 0:20:13,916
associated with our most recent

745
00:20:13,916 --> 0:20:14,000
game.

746
00:20:16,416 --> 0:20:18,056
Then, I can create my quantity

747
00:20:18,056 --> 0:20:19,236
series sample query for the

748
00:20:19,236 --> 0:20:20,326
heart rate type using the

749
00:20:20,326 --> 0:20:21,476
predicate we created above.

750
00:20:22,886 --> 0:20:24,146
Inside of the query's handler,

751
00:20:24,336 --> 0:20:25,426
I'm going to be enumerating the

752
00:20:25,426 --> 0:20:26,566
quantities and date intervals

753
00:20:26,636 --> 0:20:29,446
associated with this-- with this

754
00:20:29,546 --> 0:20:30,796
latest game and I'm going to

755
00:20:31,146 --> 0:20:32,416
create a string representation

756
00:20:32,416 --> 0:20:32,916
for each of them.

757
00:20:33,326 --> 0:20:34,356
Let's go ahead and create an

758
00:20:34,356 --> 0:20:35,846
array of strings we can use to

759
00:20:36,556 --> 0:20:38,000
store these result strings.

760
00:20:41,066 --> 0:20:43,526
And then we can use this in our

761
00:20:43,916 --> 0:20:44,626
query handler.

762
00:20:45,116 --> 0:20:48,996
First, I'm going to guard

763
00:20:48,996 --> 0:20:50,226
against errors that might have

764
00:20:50,226 --> 0:20:51,306
been returned during

765
00:20:51,306 --> 0:20:51,936
enumeration.

766
00:20:52,406 --> 0:20:53,646
And if I don't have any errors,

767
00:20:53,826 --> 0:20:54,996
I can go ahead and create a

768
00:20:54,996 --> 0:20:56,916
heartRateDetailsStrings using

769
00:20:56,916 --> 0:20:58,236
the enumerated quantities and

770
00:20:58,236 --> 0:20:59,956
date intervals and I'll append

771
00:20:59,956 --> 0:21:01,326
these detail strings to my

772
00:20:59,956 --> 0:21:01,326
these detail strings to my

773
00:21:01,326 --> 0:21:02,346
heartRateStrings array.

774
00:21:03,556 --> 0:21:05,616
Finally, when enumeration is

775
00:21:05,616 --> 0:21:07,026
complete, the done parameter

776
00:21:07,026 --> 0:21:08,596
will be set to true and this is

777
00:21:08,596 --> 0:21:09,956
the perfect place for me to

778
00:21:09,956 --> 0:21:11,366
dispatch back to the main queue

779
00:21:11,626 --> 0:21:12,496
to reload our

780
00:21:12,496 --> 0:21:14,056
ResultsViewController to display

781
00:21:14,226 --> 0:21:14,646
these strings.

782
00:21:16,986 --> 0:21:18,296
Now I'd like to re-run the app

783
00:21:18,416 --> 0:21:19,586
to show you what this looks like

784
00:21:19,586 --> 0:21:21,246
now that we've added support for

785
00:21:21,326 --> 0:21:22,606
writing and reading heart rate

786
00:21:22,606 --> 0:21:22,766
data.

787
00:21:24,066 --> 0:21:25,106
Remember, the first thing we're

788
00:21:25,106 --> 0:21:26,006
going to see when our app

789
00:21:26,006 --> 0:21:27,286
launches is that request for

790
00:21:27,286 --> 0:21:27,966
authorization.

791
00:21:28,536 --> 0:21:31,846
I'm going to go ahead and turn

792
00:21:31,846 --> 0:21:33,636
on authorization to read and

793
00:21:33,636 --> 0:21:34,296
write heart rate data.

794
00:21:35,596 --> 0:21:37,036
And now I'll play another round

795
00:21:37,036 --> 0:21:37,436
of our game.

796
00:21:38,826 --> 0:21:39,856
Remember, I'm trying to hit the

797
00:21:39,856 --> 0:21:41,306
hot dogs and miss the broccoli.

798
00:21:41,886 --> 0:21:42,786
Oh, scored zero.

799
00:21:42,786 --> 0:21:43,776
Let me play another round.

800
00:21:49,486 --> 0:21:50,906
Oh, scored two, but we can still

801
00:21:50,906 --> 0:21:51,936
see what my heart rate looked

802
00:21:51,936 --> 0:21:52,126
like.

803
00:21:52,756 --> 0:21:53,216
There we go.

804
00:21:53,216 --> 0:21:54,506
We have some heart rates that

805
00:21:54,506 --> 0:21:55,636
were measured during this most

806
00:21:55,636 --> 0:21:56,776
recent game.

807
00:21:58,516 --> 0:22:04,676
[ Applause ]

808
00:21:58,516 --> 0:22:04,676
[ Applause ]

809
00:22:05,176 --> 0:22:06,936
What we just saw was how easy it

810
00:22:06,936 --> 0:22:09,606
is to efficiently save quantity

811
00:22:09,606 --> 0:22:10,896
data with a quantity series

812
00:22:10,896 --> 0:22:12,966
sample builder and how we can

813
00:22:12,966 --> 0:22:14,396
query for that data using

814
00:22:14,446 --> 0:22:15,746
QuantitySeriesSampleQuery.

815
00:22:16,536 --> 0:22:18,006
Now I'd like to invite up my

816
00:22:18,006 --> 0:22:19,736
teammate Divya, who is going to

817
00:22:20,016 --> 0:22:21,266
show you how HealthKit has

818
00:22:21,266 --> 0:22:22,906
expanded our representations in

819
00:22:22,906 --> 0:22:24,836
the area of heart and how we've

820
00:22:24,836 --> 0:22:25,956
moved into the brand-new health

821
00:22:26,006 --> 0:22:27,206
domain of hearing health.

822
00:22:27,816 --> 0:22:28,666
Thank you.

823
00:22:29,516 --> 0:22:34,546
[ Applause ]

824
00:22:35,046 --> 0:22:36,616
&gt;&gt; So, my colleague Luke just

825
00:22:36,616 --> 0:22:37,826
described to you the new

826
00:22:37,826 --> 0:22:39,596
efficient way to store HK

827
00:22:39,596 --> 0:22:42,586
quantities now in iOS 13 and

828
00:22:42,586 --> 0:22:43,846
HealthKit has become a

829
00:22:43,846 --> 0:22:46,006
repository for more and more of

830
00:22:46,006 --> 0:22:47,726
our users' daily health data.

831
00:22:47,726 --> 0:22:50,196
And in addition to storing more

832
00:22:50,196 --> 0:22:51,726
and more data, we're also

833
00:22:51,726 --> 0:22:53,206
storing more kinds of data.

834
00:22:54,106 --> 0:22:55,446
This year, we're adding on to

835
00:22:55,446 --> 0:22:57,086
our existing support for heart

836
00:22:57,086 --> 0:22:58,746
health and adding new support

837
00:22:58,746 --> 0:22:59,556
for hearing health.

838
00:22:59,996 --> 0:23:03,566
Our users have been interacting

839
00:22:59,996 --> 0:23:03,566
Our users have been interacting

840
00:23:03,566 --> 0:23:04,896
with heart-related features

841
00:23:04,896 --> 0:23:07,036
since iOS 8, where they've been

842
00:23:07,036 --> 0:23:08,406
able to get heart rate from

843
00:23:08,406 --> 0:23:10,466
Apple Watch, or from sensors

844
00:23:10,466 --> 0:23:12,426
connected to apps created by

845
00:23:12,426 --> 0:23:14,106
developers like you, and view

846
00:23:14,106 --> 0:23:15,566
that data all together in the

847
00:23:15,566 --> 0:23:16,666
Health app.

848
00:23:18,016 --> 0:23:20,126
HealthKit has always had heart

849
00:23:20,126 --> 0:23:22,296
rate support, so if you had a

850
00:23:22,296 --> 0:23:23,596
heart rate reading like the one

851
00:23:23,706 --> 0:23:25,546
here, you could determine that

852
00:23:25,546 --> 0:23:27,356
over a five-second period that

853
00:23:27,736 --> 0:23:29,996
the average heart rate was 68

854
00:23:30,186 --> 0:23:30,766
beats per minute.

855
00:23:30,766 --> 0:23:33,516
And in HealthKit, you would save

856
00:23:33,736 --> 0:23:35,416
that as an HK quantity sample.

857
00:23:35,976 --> 0:23:40,046
In iOS 11, we introduced heart

858
00:23:40,046 --> 0:23:41,606
rate variability SDNN.

859
00:23:42,446 --> 0:23:43,976
Heart rate variability is a

860
00:23:43,976 --> 0:23:45,846
measurement of the variation in

861
00:23:45,846 --> 0:23:47,446
the time intervals between

862
00:23:47,446 --> 0:23:49,636
heartbeats and SDNN stands for

863
00:23:49,636 --> 0:23:51,506
standard deviation normal to

864
00:23:51,506 --> 0:23:51,856
normal.

865
00:23:52,586 --> 0:23:54,196
So, Apple Watch would take the

866
00:23:54,196 --> 0:23:56,616
same heart rate reading and take

867
00:23:56,616 --> 0:23:58,386
the time intervals between each

868
00:23:58,386 --> 0:24:00,286
beat to calculate a standard

869
00:23:58,386 --> 0:24:00,286
beat to calculate a standard

870
00:24:00,286 --> 0:24:02,386
deviation and save that as a

871
00:24:02,386 --> 0:24:03,906
quantity sample to HealthKit.

872
00:24:05,076 --> 0:24:06,516
Heart rate and heart rate

873
00:24:06,516 --> 0:24:08,596
variability are both important

874
00:24:08,596 --> 0:24:10,106
metrics for cardiovascular

875
00:24:10,106 --> 0:24:12,076
health and our users have loved

876
00:24:12,076 --> 0:24:13,616
looking at these at a glance

877
00:24:13,616 --> 0:24:15,126
throughout the day or in more

878
00:24:15,126 --> 0:24:16,356
detail, like when they do a

879
00:24:16,356 --> 0:24:16,876
workout.

880
00:24:18,036 --> 0:24:20,386
So, let's take a look at this

881
00:24:20,386 --> 0:24:21,696
same heart rate reading one more

882
00:24:21,696 --> 0:24:22,106
time.

883
00:24:22,916 --> 0:24:24,666
Thus far, I've described to you

884
00:24:24,666 --> 0:24:26,566
ways in which we can summarize

885
00:24:26,646 --> 0:24:28,346
this heart rate data, but

886
00:24:28,346 --> 0:24:29,866
sometimes you want the actual

887
00:24:29,866 --> 0:24:31,336
underlying data itself.

888
00:24:31,996 --> 0:24:33,616
So, let's say that I want the

889
00:24:33,896 --> 0:24:35,736
time-- to know the times at

890
00:24:35,736 --> 0:24:37,046
which each heartbeat occurred.

891
00:24:37,676 --> 0:24:39,536
And returning to our scenario,

892
00:24:39,866 --> 0:24:40,986
let's say that our game

893
00:24:40,986 --> 0:24:42,906
controller has a sensor capable

894
00:24:42,906 --> 0:24:44,546
of telling us any time a new

895
00:24:44,546 --> 0:24:46,276
beat comes in while the user is

896
00:24:46,276 --> 0:24:46,916
playing a game.

897
00:24:47,356 --> 0:24:49,496
So here, the first heartbeat

898
00:24:49,496 --> 0:24:51,716
occurs at 0.5 seconds from the

899
00:24:51,716 --> 0:24:53,166
start point of data collection,

900
00:24:53,496 --> 0:24:56,116
the second at 1.49 seconds, and

901
00:24:56,346 --> 0:24:57,906
we can get-- we can continue to

902
00:24:57,906 --> 0:24:59,486
get the rest of the times that

903
00:24:59,486 --> 0:25:00,856
these beats occurred since the

904
00:24:59,486 --> 0:25:00,856
these beats occurred since the

905
00:25:00,856 --> 0:25:01,946
start of data collection.

906
00:25:02,846 --> 0:25:04,496
So, you'll notice that each beat

907
00:25:04,606 --> 0:25:05,886
happens at a certain point of

908
00:25:05,886 --> 0:25:08,176
time and put together they form

909
00:25:08,216 --> 0:25:09,786
a series of heartbeats.

910
00:25:10,436 --> 0:25:12,136
To save this data to HealthKit,

911
00:25:12,456 --> 0:25:13,076
we have an

912
00:25:13,076 --> 0:25:15,666
HKHeartbeatSeriesSample that

913
00:25:15,666 --> 0:25:17,466
stores a series of heartbeats by

914
00:25:17,466 --> 0:25:18,936
the time stamps at which they

915
00:25:18,936 --> 0:25:19,316
occurred.

916
00:25:20,506 --> 0:25:22,256
Now, you might notice that this

917
00:25:22,256 --> 0:25:24,166
feels similar to the series API

918
00:25:24,166 --> 0:25:25,466
that Luke showed to you before,

919
00:25:26,246 --> 0:25:27,936
but it's important to note that

920
00:25:28,066 --> 0:25:29,446
heartbeat series samples

921
00:25:29,446 --> 0:25:31,746
encapsulate a type of data that

922
00:25:31,746 --> 0:25:33,316
deviates from our other sample

923
00:25:33,316 --> 0:25:34,296
types in HealthKit.

924
00:25:34,946 --> 0:25:36,996
There are no values or units

925
00:25:36,996 --> 0:25:38,706
like the HK quantities that are

926
00:25:38,706 --> 0:25:40,146
the underlying data behind a

927
00:25:40,146 --> 0:25:42,266
quantity series, and therefore

928
00:25:42,266 --> 0:25:43,836
we can more efficiently just

929
00:25:43,836 --> 0:25:46,166
store a series of timestamps to

930
00:25:46,166 --> 0:25:47,786
represent a heartbeat series.

931
00:25:48,366 --> 0:25:51,736
But because we're still storing

932
00:25:51,736 --> 0:25:53,366
a series of data that could get

933
00:25:53,396 --> 0:25:55,246
potentially large, we have in--

934
00:25:55,526 --> 0:25:57,926
we have designed the API to be

935
00:25:58,076 --> 0:25:59,676
familiar to the quantity series,

936
00:26:00,246 --> 0:26:01,316
so we've equipped this

937
00:26:01,316 --> 0:26:03,086
HeartbeatSeriesSample with its

938
00:26:03,086 --> 0:26:04,816
own builder and custom query.

939
00:26:05,366 --> 0:26:08,446
Like quantity series samples,

940
00:26:08,696 --> 0:26:10,056
heartbeat series samples get

941
00:26:10,056 --> 0:26:11,496
created with a builder and

942
00:26:11,536 --> 0:26:12,716
finished when you're done saving

943
00:26:12,716 --> 0:26:12,956
data.

944
00:26:13,646 --> 0:26:14,906
So, let's build one in code.

945
00:26:16,426 --> 0:26:18,316
Our first step, as always, is to

946
00:26:18,316 --> 0:26:19,406
request the proper

947
00:26:19,406 --> 0:26:20,316
authorizations.

948
00:26:20,946 --> 0:26:22,946
For this, you'll need to request

949
00:26:22,946 --> 0:26:25,066
the new heartbeat series type as

950
00:26:25,066 --> 0:26:26,346
well as the quantity type

951
00:26:26,346 --> 0:26:28,256
heartRateVariabilitySDNN

952
00:26:28,386 --> 0:26:30,106
introduced back in iOS 11.

953
00:26:30,896 --> 0:26:31,736
You'll need to request

954
00:26:31,736 --> 0:26:33,396
authorization for both of these

955
00:26:33,396 --> 0:26:34,556
types since heart rate

956
00:26:34,556 --> 0:26:36,436
variability is a metric that can

957
00:26:36,436 --> 0:26:37,846
be directly derived from

958
00:26:37,846 --> 0:26:39,716
heartbeat series and this way

959
00:26:39,716 --> 0:26:40,846
your users have a clear

960
00:26:40,846 --> 0:26:42,256
understanding of exactly the

961
00:26:42,256 --> 0:26:43,686
kind of data they're sharing

962
00:26:43,686 --> 0:26:45,266
with you.

963
00:26:45,486 --> 0:26:46,416
Once we've requested

964
00:26:46,416 --> 0:26:48,526
authorization, we can initialize

965
00:26:48,526 --> 0:26:50,036
a heartbeat series builder with

966
00:26:50,036 --> 0:26:52,016
a healthStore, gameDevice, and

967
00:26:52,016 --> 0:26:53,196
the gameStartDate that will

968
00:26:53,196 --> 0:26:54,586
indicate when we're starting

969
00:26:54,586 --> 0:26:55,366
data collection.

970
00:26:55,856 --> 0:26:58,476
And while the game is ongoing

971
00:26:58,596 --> 0:26:59,606
and our user is playing the

972
00:26:59,606 --> 0:27:01,466
game, we'll add heartbeats with

973
00:26:59,606 --> 0:27:01,466
game, we'll add heartbeats with

974
00:27:01,466 --> 0:27:02,906
the time interval since the

975
00:27:02,906 --> 0:27:04,236
series start date to our

976
00:27:04,236 --> 0:27:04,596
builder.

977
00:27:04,976 --> 0:27:08,266
But you might enter a case like

978
00:27:08,326 --> 0:27:10,486
this where your sensor goes down

979
00:27:10,686 --> 0:27:12,096
and here we have a gap in data

980
00:27:12,096 --> 0:27:13,936
collection between seconds two

981
00:27:13,966 --> 0:27:14,466
and three.

982
00:27:15,366 --> 0:27:16,806
Now, it might look like there is

983
00:27:16,806 --> 0:27:19,286
a 1.99 second gap between beats

984
00:27:19,286 --> 0:27:20,876
two and three that could lead to

985
00:27:20,876 --> 0:27:23,516
erroneous interpretation of this

986
00:27:23,516 --> 0:27:24,416
user's heart data.

987
00:27:25,486 --> 0:27:26,846
In order to account for this,

988
00:27:27,056 --> 0:27:28,856
we'll set precededByGap to YES,

989
00:27:29,366 --> 0:27:30,936
which you can set for each beat

990
00:27:30,936 --> 0:27:32,566
that you add if you're aware

991
00:27:32,566 --> 0:27:33,636
that there was a gap in data

992
00:27:33,636 --> 0:27:35,076
collection from a sensor going

993
00:27:35,076 --> 0:27:35,326
down.

994
00:27:35,326 --> 0:27:39,276
Now I can add metadata to my

995
00:27:39,276 --> 0:27:40,736
builder like I would to any

996
00:27:40,736 --> 0:27:41,996
other HK sample.

997
00:27:42,946 --> 0:27:44,816
And when I'm done saving data,

998
00:27:44,906 --> 0:27:46,396
I'll finish the series, which

999
00:27:46,396 --> 0:27:47,696
will save the Heartbeat series

1000
00:27:47,696 --> 0:27:51,366
sample to HealthKit.

1001
00:27:51,366 --> 0:27:52,936
Now we've added support for

1002
00:27:52,936 --> 0:27:54,276
beat-to-beat measurements to our

1003
00:27:54,276 --> 0:27:55,806
game and we're ready to start

1004
00:27:55,806 --> 0:27:57,556
querying for the underlying beat

1005
00:27:57,686 --> 0:27:58,446
measurements.

1006
00:27:58,986 --> 0:28:02,056
Like what Luke described to you

1007
00:27:58,986 --> 0:28:02,056
Like what Luke described to you

1008
00:28:02,056 --> 0:28:03,906
before, we can interact with our

1009
00:28:03,906 --> 0:28:06,666
normal HK queries to fetch the

1010
00:28:06,866 --> 0:28:09,126
high-level samples and then use

1011
00:28:09,126 --> 0:28:11,176
the custom queries to interact

1012
00:28:11,176 --> 0:28:12,156
with the finer-grain data.

1013
00:28:13,536 --> 0:28:15,306
So, my first step will be to run

1014
00:28:15,376 --> 0:28:17,326
a normal HK sample query to

1015
00:28:17,326 --> 0:28:18,926
fetch my heartbeat series sample

1016
00:28:18,926 --> 0:28:19,686
of interest.

1017
00:28:20,116 --> 0:28:22,036
And once I've done that, I'll

1018
00:28:22,036 --> 0:28:23,336
initialize a heartbeat series

1019
00:28:23,336 --> 0:28:25,126
query with that sample, which

1020
00:28:25,126 --> 0:28:26,576
will let me enumerate over the

1021
00:28:26,576 --> 0:28:27,946
times for each beat.

1022
00:28:28,436 --> 0:28:30,866
And finally, I'll execute my

1023
00:28:30,866 --> 0:28:31,726
query.

1024
00:28:32,286 --> 0:28:35,136
Now, heartbeat series are a

1025
00:28:35,136 --> 0:28:36,856
powerful addition to HealthKit,

1026
00:28:36,976 --> 0:28:38,296
but that's not all we have

1027
00:28:38,526 --> 0:28:39,776
related to heart features.

1028
00:28:40,626 --> 0:28:42,696
Back in iOS 12, Apple Watch

1029
00:28:42,696 --> 0:28:44,326
started notifying users with

1030
00:28:44,326 --> 0:28:45,236
heart alerts.

1031
00:28:46,436 --> 0:28:47,776
A low heart rate alert when

1032
00:28:47,776 --> 0:28:49,806
Apple Watch detected a heart

1033
00:28:49,806 --> 0:28:51,656
rate below a given BPM

1034
00:28:51,656 --> 0:28:53,946
threshold, a high heart rate

1035
00:28:53,946 --> 0:28:55,856
alert for when heart rate rose

1036
00:28:55,856 --> 0:28:58,626
above a given BPM threshold, and

1037
00:28:58,626 --> 0:29:00,056
an irregular heart rate alert

1038
00:28:58,626 --> 0:29:00,056
an irregular heart rate alert

1039
00:29:00,246 --> 0:29:01,776
for when Apple Watch detected a

1040
00:29:01,776 --> 0:29:03,326
rhythm that could be indicative

1041
00:29:03,426 --> 0:29:04,000
of AFib.

1042
00:29:05,876 --> 0:29:07,666
Well, in HealthKit, these alerts

1043
00:29:07,666 --> 0:29:09,086
now come in the form of three

1044
00:29:09,086 --> 0:29:11,266
new category types that will get

1045
00:29:11,266 --> 0:29:12,816
saved to HealthKit any time

1046
00:29:12,816 --> 0:29:14,436
Apple Watch detects an alert.

1047
00:29:15,006 --> 0:29:18,326
Now, in addition to all this

1048
00:29:18,326 --> 0:29:19,816
great heart support, there's

1049
00:29:19,816 --> 0:29:21,576
also this new area that we're

1050
00:29:21,576 --> 0:29:23,656
exposing in iOS 13 and I'm

1051
00:29:23,656 --> 0:29:25,846
excited to share with you that

1052
00:29:25,906 --> 0:29:27,026
hearing health has found its

1053
00:29:27,026 --> 0:29:28,036
place in HealthKit.

1054
00:29:28,036 --> 0:29:31,766
At some point in your life, you

1055
00:29:31,766 --> 0:29:33,196
might remember getting a hearing

1056
00:29:33,196 --> 0:29:35,006
test where you put on a pair of

1057
00:29:35,006 --> 0:29:36,696
headphones and listened to a

1058
00:29:36,696 --> 0:29:39,086
series of sounds and would raise

1059
00:29:39,086 --> 0:29:40,586
your hand as soon as a single

1060
00:29:40,586 --> 0:29:41,736
sound was loud enough for you to

1061
00:29:41,736 --> 0:29:42,056
hear it.

1062
00:29:42,056 --> 0:29:44,066
Well, this was an example of a

1063
00:29:44,066 --> 0:29:46,026
pure tone hearing test, where a

1064
00:29:46,026 --> 0:29:47,496
pure tone is a sound with a

1065
00:29:47,496 --> 0:29:48,506
single frequency.

1066
00:29:49,026 --> 0:29:52,706
Pure tone testing helps identify

1067
00:29:52,706 --> 0:29:54,266
the quietest sound that you can

1068
00:29:54,316 --> 0:29:55,456
hear at a set of different

1069
00:29:55,486 --> 0:29:57,996
frequencies and it can provide

1070
00:29:57,996 --> 0:29:59,236
assessment on the kind of

1071
00:29:59,236 --> 0:30:00,806
hearing impairment or loss that

1072
00:29:59,236 --> 0:30:00,806
hearing impairment or loss that

1073
00:30:00,806 --> 0:30:01,546
you might have.

1074
00:30:03,046 --> 0:30:04,936
The results of pure tone testing

1075
00:30:04,986 --> 0:30:06,776
most commonly get displayed in

1076
00:30:06,776 --> 0:30:08,246
graphs called audiograms.

1077
00:30:08,636 --> 0:30:11,656
This here is an example of an

1078
00:30:11,656 --> 0:30:13,796
audiogram for someone with mild

1079
00:30:13,826 --> 0:30:15,576
hearing impairment and let's

1080
00:30:15,576 --> 0:30:17,456
just zoom into this graph to get

1081
00:30:17,456 --> 0:30:19,106
a better idea of the kind of

1082
00:30:19,106 --> 0:30:20,496
data that is stored in an

1083
00:30:20,496 --> 0:30:21,096
audiogram.

1084
00:30:21,666 --> 0:30:24,256
So, here you'll see two lines,

1085
00:30:24,716 --> 0:30:26,206
one corresponding to the pure

1086
00:30:26,206 --> 0:30:27,916
tone hearing test results from

1087
00:30:27,916 --> 0:30:29,306
the left ear and one for the

1088
00:30:29,306 --> 0:30:29,716
right ear.

1089
00:30:29,716 --> 0:30:31,406
And let's just take a look at

1090
00:30:31,406 --> 0:30:32,726
the first two data points at the

1091
00:30:32,726 --> 0:30:34,076
125-hertz line.

1092
00:30:35,456 --> 0:30:37,126
This shows that for this user to

1093
00:30:37,126 --> 0:30:39,256
hear a sound at a 125-hertz

1094
00:30:39,256 --> 0:30:41,466
frequency, they need around 11

1095
00:30:41,466 --> 0:30:43,086
decibel hearing level units in

1096
00:30:43,086 --> 0:30:45,116
their left ear and 31 in their

1097
00:30:45,116 --> 0:30:45,336
right.

1098
00:30:46,186 --> 0:30:47,696
The decibel hearing level unit

1099
00:30:47,696 --> 0:30:49,226
measures the intensity of a

1100
00:30:49,226 --> 0:30:51,016
sound relative to the quietest

1101
00:30:51,016 --> 0:30:52,416
sound that a young, healthy

1102
00:30:52,416 --> 0:30:53,556
individual would be able to

1103
00:30:53,556 --> 0:30:53,766
hear.

1104
00:30:55,156 --> 0:30:56,706
So, we can get the rest of the

1105
00:30:56,706 --> 0:30:58,516
data points associated with this

1106
00:30:58,516 --> 0:31:00,586
audiogram and in order to store

1107
00:30:58,516 --> 0:31:00,586
audiogram and in order to store

1108
00:31:00,586 --> 0:31:02,206
this data in HealthKit, we're

1109
00:31:02,206 --> 0:31:05,106
introducing an HKAudiogramSample

1110
00:31:05,346 --> 0:31:06,926
that stores an array of hearing

1111
00:31:06,926 --> 0:31:08,686
sensitivity points associated

1112
00:31:08,686 --> 0:31:09,706
with a hearing test.

1113
00:31:09,966 --> 0:31:11,576
So, let's create an audiogram

1114
00:31:11,576 --> 0:31:14,406
sample and code.

1115
00:31:14,406 --> 0:31:16,606
Our first step is to create an

1116
00:31:16,606 --> 0:31:18,706
HKAudiogramSensitivityPoint that

1117
00:31:18,706 --> 0:31:20,456
encapsulates the intensity of a

1118
00:31:20,456 --> 0:31:22,526
sound required for both ears to

1119
00:31:22,526 --> 0:31:23,676
hear a given frequency.

1120
00:31:24,606 --> 0:31:26,346
So, I'll create a frequency

1121
00:31:26,346 --> 0:31:28,646
quantity with my new HK unit

1122
00:31:28,646 --> 0:31:31,206
hertz unit and a left-ear and

1123
00:31:31,206 --> 0:31:32,786
right-ear sensitivity quantity

1124
00:31:32,786 --> 0:31:34,226
with my new decibel hearing

1125
00:31:34,226 --> 0:31:34,766
level unit.

1126
00:31:36,226 --> 0:31:37,506
Now I'm ready to create an

1127
00:31:37,506 --> 0:31:38,856
audiogram sensitivity point.

1128
00:31:39,786 --> 0:31:41,736
Once you've created an array of

1129
00:31:41,736 --> 0:31:43,336
audiogram sensitivity points,

1130
00:31:43,676 --> 0:31:44,826
you can store that in an

1131
00:31:44,826 --> 0:31:45,916
audiogramSample.

1132
00:31:46,516 --> 0:31:47,586
Now, you'll need to make sure

1133
00:31:47,586 --> 0:31:49,166
that the array of sensitivity

1134
00:31:49,166 --> 0:31:51,036
points are all unique and in

1135
00:31:51,086 --> 0:31:52,646
order, since that's how you

1136
00:31:52,646 --> 0:31:54,156
should expect to interact with

1137
00:31:54,156 --> 0:31:56,176
this data later on in analysis

1138
00:31:56,176 --> 0:31:56,816
or charting.

1139
00:31:58,136 --> 0:31:59,856
And finally, I'm ready to store

1140
00:31:59,856 --> 0:32:01,206
that data to HealthKit.

1141
00:31:59,856 --> 0:32:01,206
that data to HealthKit.

1142
00:32:02,156 --> 0:32:03,516
And that's how easy it is for

1143
00:32:03,516 --> 0:32:04,886
you to start creating audiogram

1144
00:32:04,886 --> 0:32:06,556
samples and to start building

1145
00:32:06,616 --> 0:32:07,576
hearing health apps with

1146
00:32:07,576 --> 0:32:07,996
HealthKit.

1147
00:32:07,996 --> 0:32:10,866
But an audiogram sample only

1148
00:32:10,866 --> 0:32:12,426
represents the health of your

1149
00:32:12,426 --> 0:32:13,846
ears at a given point of time

1150
00:32:13,886 --> 0:32:14,816
when you're taking a hearing

1151
00:32:14,816 --> 0:32:15,266
test.

1152
00:32:15,536 --> 0:32:17,906
Most of the day, we're exposed

1153
00:32:17,906 --> 0:32:19,556
to sounds through our headphones

1154
00:32:19,556 --> 0:32:21,036
or while we're walking down the

1155
00:32:21,036 --> 0:32:22,906
street in the environment and

1156
00:32:22,906 --> 0:32:24,346
all of that can impact our

1157
00:32:24,346 --> 0:32:25,666
hearing health for life.

1158
00:32:26,256 --> 0:32:28,456
To keep track of the audio

1159
00:32:28,456 --> 0:32:29,966
exposure that you're exposed to

1160
00:32:29,966 --> 0:32:31,456
through your headphones, we have

1161
00:32:31,456 --> 0:32:32,776
a read-write quantity type,

1162
00:32:32,926 --> 0:32:34,306
headphoneAudioExposure.

1163
00:32:34,876 --> 0:32:37,406
And for the rest of the day,

1164
00:32:37,526 --> 0:32:38,676
when we're walking down the

1165
00:32:38,676 --> 0:32:40,306
street exposed to construction

1166
00:32:40,306 --> 0:32:42,556
work sounds or traffic, Apple

1167
00:32:42,556 --> 0:32:44,216
Watch is capable of capturing

1168
00:32:44,216 --> 0:32:45,456
that environmental audio

1169
00:32:45,456 --> 0:32:47,046
exposure data and saving it to

1170
00:32:47,046 --> 0:32:48,846
HealthKit, and for that we have

1171
00:32:48,846 --> 0:32:50,326
an analogous read-write quantity

1172
00:32:50,326 --> 0:32:50,666
type,

1173
00:32:50,976 --> 0:32:52,496
environmentalAudioExposure.

1174
00:32:52,496 --> 0:32:55,516
And for times when environmental

1175
00:32:55,516 --> 0:32:57,326
audio exposure gets too high,

1176
00:32:57,856 --> 0:32:59,376
Apple Watch will generate an

1177
00:32:59,376 --> 0:33:00,926
audio exposure alert to make

1178
00:32:59,376 --> 0:33:00,926
audio exposure alert to make

1179
00:33:00,926 --> 0:33:02,226
sure that you're aware of the

1180
00:33:02,226 --> 0:33:04,216
possible impact that can have on

1181
00:33:04,216 --> 0:33:05,126
the health of your ears.

1182
00:33:05,836 --> 0:33:06,986
And it will save this as a

1183
00:33:06,986 --> 0:33:09,576
category sample using the new

1184
00:33:09,576 --> 0:33:11,466
audioExposureEvent category type

1185
00:33:11,466 --> 0:33:12,146
identifier.

1186
00:33:12,696 --> 0:33:16,016
So, we've covered a lot about

1187
00:33:16,016 --> 0:33:17,856
the new data representations now

1188
00:33:17,856 --> 0:33:19,596
available with HealthKit and iOS

1189
00:33:19,596 --> 0:33:22,146
13, from new efficient series

1190
00:33:22,146 --> 0:33:23,726
representations to the new

1191
00:33:23,726 --> 0:33:25,196
support with hearing health.

1192
00:33:25,476 --> 0:33:28,366
Now you can officially store

1193
00:33:28,516 --> 0:33:30,656
large numbers of HK quantities,

1194
00:33:30,916 --> 0:33:32,616
the most abundant kind of data

1195
00:33:32,616 --> 0:33:33,396
stored in HealthKit.

1196
00:33:33,396 --> 0:33:36,246
And you have the opportunity to

1197
00:33:36,246 --> 0:33:38,536
represent even more rich data

1198
00:33:38,536 --> 0:33:40,706
representations related to heart

1199
00:33:40,706 --> 0:33:41,406
and hearing health.

1200
00:33:42,676 --> 0:33:44,696
For more information as well as

1201
00:33:44,696 --> 0:33:46,096
our sample code projects you saw

1202
00:33:46,236 --> 0:33:47,896
here, you can visit our session

1203
00:33:47,896 --> 0:33:50,386
link listed or come talk to us

1204
00:33:50,386 --> 0:33:51,806
right after this session at the

1205
00:33:51,806 --> 0:33:53,076
Health and Fitness Technologies

1206
00:33:53,836 --> 0:33:53,926
Lab.

1207
00:33:54,496 --> 0:33:56,736
Thank you and have a great rest

1208
00:33:56,736 --> 0:33:57,976
of your WWDC.

1209
00:33:58,516 --> 0:34:04,500
[ Cheering and Applause ]
