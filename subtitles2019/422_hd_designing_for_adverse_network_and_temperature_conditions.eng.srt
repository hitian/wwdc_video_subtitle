1
00:00:01,176 --> 0:00:04,500
[ Music ]

2
00:00:11,696 --> 0:00:12,696
&gt;&gt; Good evening, hello.

3
00:00:14,066 --> 0:00:16,136
Welcome to Designing for Adverse

4
00:00:16,136 --> 0:00:17,156
Network and Temperature

5
00:00:17,156 --> 0:00:17,856
Conditions.

6
00:00:18,716 --> 0:00:19,986
Whether you're just starting out

7
00:00:19,986 --> 0:00:21,536
with your first app or if you're

8
00:00:21,536 --> 0:00:23,336
a seasoned app developer, we

9
00:00:23,336 --> 0:00:25,036
want you to design for a world

10
00:00:25,036 --> 0:00:26,136
class experience.

11
00:00:27,016 --> 0:00:28,366
Your apps have the potential to

12
00:00:28,366 --> 0:00:30,136
be used by millions of people in

13
00:00:30,136 --> 0:00:31,626
so many different situations.

14
00:00:32,566 --> 0:00:34,526
Many of those people will not be

15
00:00:34,526 --> 0:00:37,106
on a superfast 4G network, and

16
00:00:37,106 --> 0:00:38,096
others may be in warmer

17
00:00:38,096 --> 0:00:38,806
environments.

18
00:00:39,966 --> 0:00:41,166
Now, we all do some level of

19
00:00:41,196 --> 0:00:43,346
testing, but are you doing

20
00:00:43,346 --> 0:00:44,806
enough to know what it's like to

21
00:00:44,806 --> 0:00:46,506
interact with your app the way

22
00:00:46,506 --> 0:00:48,346
those users would, and if you

23
00:00:48,346 --> 0:00:50,086
are, are you providing the best

24
00:00:50,086 --> 0:00:51,146
experience that you can?

25
00:00:52,326 --> 0:00:54,266
Great apps continue to work well

26
00:00:54,326 --> 0:00:55,436
even under challenging

27
00:00:55,436 --> 0:00:57,006
real-world situations, which

28
00:00:57,006 --> 0:00:58,216
might be difficult to design

29
00:00:58,286 --> 0:00:58,496
for.

30
00:00:59,046 --> 0:01:00,396
That's why we're here to share

31
00:00:59,046 --> 0:01:00,396
That's why we're here to share

32
00:01:00,396 --> 0:01:02,046
some tips with you and brand-new

33
00:01:02,086 --> 0:01:03,656
tools in Xcode to help with

34
00:01:03,656 --> 0:01:03,856
that.

35
00:01:04,366 --> 0:01:05,215
I'm Alex Kara.

36
00:01:05,596 --> 0:01:06,546
&gt;&gt; And I'm Ilya Veygman.

37
00:01:07,206 --> 0:01:08,446
We work in iOS system

38
00:01:08,446 --> 0:01:10,196
performance so that the system

39
00:01:10,196 --> 0:01:11,626
works well and reliably and

40
00:01:11,626 --> 0:01:13,106
consistently in the real world.

41
00:01:13,826 --> 0:01:15,286
IOS reacts to changing network

42
00:01:15,286 --> 0:01:16,866
and temperature conditions, and

43
00:01:16,866 --> 0:01:18,386
we want you to be able to do the

44
00:01:18,386 --> 0:01:20,036
same thing with your app so that

45
00:01:20,036 --> 0:01:21,156
you just can experience your app

46
00:01:21,376 --> 0:01:22,436
the way that you designed it.

47
00:01:23,856 --> 0:01:24,956
&gt;&gt; We have some exciting things

48
00:01:24,956 --> 0:01:25,806
to talk about today.

49
00:01:26,146 --> 0:01:28,116
First, we're going to dive into

50
00:01:28,116 --> 0:01:29,746
real-world device conditions and

51
00:01:29,746 --> 0:01:31,256
where they fit in to your design

52
00:01:31,256 --> 0:01:31,906
process.

53
00:01:33,066 --> 0:01:34,906
Next, we'll show you how to

54
00:01:34,906 --> 0:01:36,286
improve your app's behavior

55
00:01:36,466 --> 0:01:37,866
under different network links

56
00:01:38,186 --> 0:01:39,736
with new and existing developer

57
00:01:39,736 --> 0:01:40,186
tools.

58
00:01:41,366 --> 0:01:42,846
And finally, we'll reveal a

59
00:01:42,846 --> 0:01:44,506
brand-new way to optimize your

60
00:01:44,506 --> 0:01:46,126
app with varying temperature

61
00:01:46,126 --> 0:01:46,666
conditions.

62
00:01:52,016 --> 0:01:54,166
&gt;&gt; I want you to picture how and

63
00:01:54,166 --> 0:01:55,736
where you use iOS.

64
00:01:56,226 --> 0:01:57,646
You don't simply use your

65
00:01:57,646 --> 0:01:58,686
devices at home or at the

66
00:01:58,686 --> 0:01:59,176
office.

67
00:02:00,156 --> 0:02:00,766
You take them with you

68
00:02:00,766 --> 0:02:01,176
everywhere.

69
00:02:01,636 --> 0:02:04,826
To the beach, to the park, on

70
00:02:04,826 --> 0:02:06,736
the subway, in your car on a

71
00:02:06,736 --> 0:02:07,336
long road trip.

72
00:02:08,716 --> 0:02:09,826
These might be places with a lot

73
00:02:09,826 --> 0:02:12,146
of sunlight or heat or with weak

74
00:02:12,146 --> 0:02:12,926
network connectivity.

75
00:02:14,106 --> 0:02:15,186
Now, picture your users.

76
00:02:15,966 --> 0:02:17,326
Chances are, they'll be using

77
00:02:17,326 --> 0:02:18,586
your app in environments just

78
00:02:18,586 --> 0:02:19,106
like these.

79
00:02:19,606 --> 0:02:20,746
It's important for you to

80
00:02:20,746 --> 0:02:22,356
consider how that compares with

81
00:02:22,356 --> 0:02:23,276
your development and test

82
00:02:23,276 --> 0:02:23,736
environment.

83
00:02:25,106 --> 0:02:26,896
Now, you're probably doing most

84
00:02:26,976 --> 0:02:28,976
or all of your development and

85
00:02:28,976 --> 0:02:30,366
testing in your office or in a

86
00:02:30,366 --> 0:02:31,116
lab.

87
00:02:31,536 --> 0:02:32,796
These are all certainly going to

88
00:02:32,796 --> 0:02:34,066
have fast, reliable internet

89
00:02:34,066 --> 0:02:35,506
connectivity and climate

90
00:02:35,506 --> 0:02:37,066
control, and that's a good

91
00:02:37,066 --> 0:02:37,326
thing.

92
00:02:37,326 --> 0:02:38,746
We all want a good controlled

93
00:02:38,746 --> 0:02:39,216
place to work.

94
00:02:40,526 --> 0:02:41,416
But these won't be the same

95
00:02:41,416 --> 0:02:42,846
conditions your users around the

96
00:02:42,846 --> 0:02:44,376
world face when interacting with

97
00:02:44,376 --> 0:02:45,986
your app.

98
00:02:46,026 --> 0:02:47,176
This difference can be a big

99
00:02:47,176 --> 0:02:48,226
reason why you might be seeing

100
00:02:48,226 --> 0:02:49,736
complaints about your app but

101
00:02:49,736 --> 0:02:51,266
dismissing them as one-offs or

102
00:02:51,266 --> 0:02:51,996
corner cases.

103
00:02:52,556 --> 0:02:55,686
In addition to this, these

104
00:02:55,686 --> 0:02:56,656
devices can multitask.

105
00:02:57,696 --> 0:02:58,996
Your users might be in the

106
00:02:58,996 --> 0:03:00,536
passenger seat of a car, getting

107
00:02:58,996 --> 0:03:00,536
passenger seat of a car, getting

108
00:03:00,536 --> 0:03:01,766
turn-by-turn directions while

109
00:03:01,766 --> 0:03:03,196
streaming music even wirelessly

110
00:03:03,196 --> 0:03:03,756
to CarPlay.

111
00:03:04,706 --> 0:03:05,636
They might be at a coffee shop

112
00:03:06,176 --> 0:03:07,816
charging their iPhone and using

113
00:03:07,816 --> 0:03:09,526
it as a hotspot for their Mac.

114
00:03:10,116 --> 0:03:11,496
Or, they might be using ARKit to

115
00:03:11,496 --> 0:03:12,726
recognize objects in your app

116
00:03:12,726 --> 0:03:14,316
through the camera while the app

117
00:03:14,316 --> 0:03:15,686
runs 3D rendering or some other

118
00:03:15,686 --> 0:03:17,026
kind of complicated background

119
00:03:17,026 --> 0:03:17,506
processing.

120
00:03:18,116 --> 0:03:21,176
The point of all this is all of

121
00:03:21,176 --> 0:03:22,736
these scenarios can cause your

122
00:03:22,736 --> 0:03:24,896
device to work harder and get

123
00:03:24,896 --> 0:03:25,096
warm.

124
00:03:26,486 --> 0:03:27,706
While your app's features may

125
00:03:27,706 --> 0:03:28,906
work well in your test weaves

126
00:03:28,996 --> 0:03:30,976
under isolation, are you taking

127
00:03:30,976 --> 0:03:32,506
into account how the performance

128
00:03:32,506 --> 0:03:33,676
of your app might be different

129
00:03:33,676 --> 0:03:34,636
during these very real and

130
00:03:34,636 --> 0:03:35,496
common use cases?

131
00:03:36,286 --> 0:03:38,326
A potential pain point for your

132
00:03:38,326 --> 0:03:40,536
users is when they try to

133
00:03:40,536 --> 0:03:41,866
interact with an app designed

134
00:03:41,866 --> 0:03:42,996
only for the conditions you've

135
00:03:42,996 --> 0:03:43,556
been working in.

136
00:03:44,456 --> 0:03:45,256
How might that look like to

137
00:03:45,256 --> 0:03:45,426
them?

138
00:03:46,456 --> 0:03:48,806
&gt;&gt; Well, we noticed some reviews

139
00:03:48,806 --> 0:03:50,116
on the App Store which mentioned

140
00:03:50,116 --> 0:03:51,896
worsened behavior in certain

141
00:03:51,896 --> 0:03:52,676
situations.

142
00:03:53,276 --> 0:03:54,686
Great apps, which would

143
00:03:54,686 --> 0:03:55,836
sometimes feel short.

144
00:03:56,586 --> 0:03:57,706
Whether it's on the train,

145
00:03:58,146 --> 0:03:59,956
places with a bit of heat, or on

146
00:03:59,956 --> 0:04:02,076
a road trip, this might end up

147
00:03:59,956 --> 0:04:02,076
a road trip, this might end up

148
00:04:02,076 --> 0:04:03,546
being the biggest way your users

149
00:04:03,546 --> 0:04:04,856
remember your app, and they

150
00:04:04,856 --> 0:04:06,206
might not want to come back to

151
00:04:06,206 --> 0:04:07,266
it after an egregious

152
00:04:07,266 --> 0:04:07,996
experience.

153
00:04:08,636 --> 0:04:10,176
Now, we know that people use

154
00:04:10,176 --> 0:04:11,386
their phones in direct sunlight

155
00:04:11,386 --> 0:04:13,206
and that people go into tunnels

156
00:04:13,206 --> 0:04:14,436
and expect your app to continue

157
00:04:14,436 --> 0:04:16,446
to work, and we know that people

158
00:04:16,446 --> 0:04:17,526
aren't always in the best

159
00:04:17,526 --> 0:04:18,606
network situations.

160
00:04:19,606 --> 0:04:20,896
It's easy to overlook this when

161
00:04:20,896 --> 0:04:22,416
your development conditions are

162
00:04:22,416 --> 0:04:24,076
less representative or clean

163
00:04:24,076 --> 0:04:24,306
room.

164
00:04:25,476 --> 0:04:26,926
So we want to take these

165
00:04:26,956 --> 0:04:28,496
conditions into account, and we

166
00:04:28,496 --> 0:04:30,226
want you to provide a consistent

167
00:04:30,226 --> 0:04:32,266
experience, not one that's worse

168
00:04:32,266 --> 0:04:33,086
than it needs to be.

169
00:04:33,906 --> 0:04:35,246
You'll find users connected to

170
00:04:35,306 --> 0:04:37,226
3G networks in your feedback, or

171
00:04:37,226 --> 0:04:38,456
you might find a problem in your

172
00:04:38,456 --> 0:04:40,266
app and notice that your device

173
00:04:40,266 --> 0:04:41,386
was warmer to the touch.

174
00:04:42,066 --> 0:04:43,246
Now you might be tempted to

175
00:04:43,246 --> 0:04:44,826
think of these as expected bad

176
00:04:44,856 --> 0:04:46,816
behavior, but these are not edge

177
00:04:46,816 --> 0:04:47,316
cases.

178
00:04:47,706 --> 0:04:49,046
These are real situations that

179
00:04:49,046 --> 0:04:51,036
you and your users will face.

180
00:04:51,626 --> 0:04:52,766
To be able to handle them

181
00:04:52,766 --> 0:04:54,476
better, you're going to need the

182
00:04:54,476 --> 0:04:56,096
right developer tools and the

183
00:04:56,176 --> 0:04:57,656
process that lets you apply them

184
00:04:57,656 --> 0:04:57,876
well.

185
00:04:58,186 --> 0:04:59,636
So, let's get started with

186
00:04:59,636 --> 0:05:00,316
network link.

187
00:04:59,636 --> 0:05:00,316
network link.

188
00:05:00,966 --> 0:05:03,256
If you're using the network

189
00:05:03,586 --> 0:05:04,896
either for primary functions in

190
00:05:04,896 --> 0:05:06,406
your app or for background work,

191
00:05:07,186 --> 0:05:08,426
you might have made decisions in

192
00:05:08,426 --> 0:05:10,086
your code to act on the type of

193
00:05:10,086 --> 0:05:11,026
network that you're on.

194
00:05:12,096 --> 0:05:13,266
You might be choosing to time

195
00:05:13,266 --> 0:05:14,846
out if network calls take long.

196
00:05:15,846 --> 0:05:17,766
Now, for your users, some of

197
00:05:17,766 --> 0:05:19,286
them might be on 3G networks.

198
00:05:20,186 --> 0:05:21,786
If that's their reality, they

199
00:05:21,786 --> 0:05:23,096
might be happy to wait for a

200
00:05:23,096 --> 0:05:24,726
download to finish even if it

201
00:05:24,726 --> 0:05:25,306
takes longer.

202
00:05:26,436 --> 0:05:28,046
But your decision to timeout

203
00:05:28,756 --> 0:05:30,546
will not respect their wishes,

204
00:05:31,126 --> 0:05:32,236
and they'll be surprised when

205
00:05:32,236 --> 0:05:33,776
the app makes no progress even

206
00:05:33,776 --> 0:05:34,736
when they're happy to wait.

207
00:05:35,246 --> 0:05:37,066
It's these decisions that add up

208
00:05:37,116 --> 0:05:38,376
to become part of your user's

209
00:05:38,376 --> 0:05:39,066
experience.

210
00:05:42,836 --> 0:05:45,416
When users launch your app, they

211
00:05:45,416 --> 0:05:46,566
don't want to see a network

212
00:05:46,566 --> 0:05:48,026
spinner that looks like it's

213
00:05:48,026 --> 0:05:50,116
perpetually downloading or one

214
00:05:50,116 --> 0:05:51,236
that totally stops.

215
00:05:52,206 --> 0:05:53,566
This might be the experience you

216
00:05:53,566 --> 0:05:55,406
provide if you're doing network

217
00:05:55,406 --> 0:05:56,686
calls during your app launch,

218
00:05:56,936 --> 0:05:58,586
but it might look fine to you if

219
00:05:58,586 --> 0:06:00,416
you ran this on LTE or fast

220
00:05:58,586 --> 0:06:00,416
you ran this on LTE or fast

221
00:06:00,416 --> 0:06:01,906
Wi-Fi even if you were doing

222
00:06:01,906 --> 0:06:02,816
performance testing.

223
00:06:03,296 --> 0:06:04,796
After some time, your users

224
00:06:04,796 --> 0:06:06,296
might give up on this screen and

225
00:06:06,296 --> 0:06:08,166
maybe even on your app entirely,

226
00:06:08,376 --> 0:06:09,766
especially if there are other

227
00:06:09,766 --> 0:06:11,426
apps performing under the same

228
00:06:11,426 --> 0:06:11,976
conditions.

229
00:06:12,796 --> 0:06:13,916
Your app should continue to be

230
00:06:13,916 --> 0:06:15,416
launchable even without a

231
00:06:15,416 --> 0:06:16,206
network connection.

232
00:06:16,746 --> 0:06:19,266
And if I'm trying to catch on

233
00:06:19,316 --> 0:06:21,126
important news with an app that

234
00:06:21,126 --> 0:06:22,966
times out early, I might notice

235
00:06:22,966 --> 0:06:24,636
that content fails to load on a

236
00:06:24,636 --> 0:06:25,916
slower network connection.

237
00:06:26,426 --> 0:06:28,086
Now, if I use other apps and

238
00:06:28,086 --> 0:06:29,546
notice that they don't fail in

239
00:06:29,546 --> 0:06:31,236
the same way, I would think that

240
00:06:31,236 --> 0:06:33,176
this app is frozen or that it's

241
00:06:33,176 --> 0:06:33,566
buggy.

242
00:06:34,406 --> 0:06:35,926
This situation could escape your

243
00:06:35,926 --> 0:06:37,726
development or testing if you're

244
00:06:37,726 --> 0:06:39,486
mocking out network calls or

245
00:06:39,486 --> 0:06:40,976
explicitly skipping them in your

246
00:06:40,976 --> 0:06:41,376
tests.

247
00:06:42,556 --> 0:06:43,756
So, you should go and take a

248
00:06:43,756 --> 0:06:45,236
look at Xcode's Scheme Editor

249
00:06:45,556 --> 0:06:46,526
and see if you're setting an

250
00:06:46,526 --> 0:06:48,006
environment variable for unit

251
00:06:48,006 --> 0:06:48,906
testing purposes.

252
00:06:50,106 --> 0:06:51,066
When you're running your app as

253
00:06:51,066 --> 0:06:52,886
a unit test host, you might be

254
00:06:52,886 --> 0:06:54,506
using this to prevent unneeded

255
00:06:54,506 --> 0:06:55,816
work happening during your app's

256
00:06:55,816 --> 0:06:56,226
launch.

257
00:06:56,816 --> 0:06:58,656
For unit tests, it's okay to

258
00:06:58,656 --> 0:06:59,976
skip work such as kicking off

259
00:06:59,976 --> 0:07:01,716
background network requests in

260
00:06:59,976 --> 0:07:01,716
background network requests in

261
00:07:01,716 --> 0:07:03,206
order to optimize for execution

262
00:07:03,206 --> 0:07:05,006
speed, but you need to make sure

263
00:07:05,006 --> 0:07:05,966
you're still covering those

264
00:07:05,966 --> 0:07:06,886
cases elsewhere.

265
00:07:08,196 --> 0:07:09,866
XC tests will wait

266
00:07:09,866 --> 0:07:11,196
until your app delegates did

267
00:07:11,196 --> 0:07:12,756
finish launching method returns

268
00:07:13,046 --> 0:07:14,666
before it begins running tests.

269
00:07:15,336 --> 0:07:16,386
If you're using an environment

270
00:07:16,386 --> 0:07:18,066
variable here, do check that the

271
00:07:18,066 --> 0:07:19,356
code you skip is truly

272
00:07:19,356 --> 0:07:21,016
nonessential for your unit tests

273
00:07:21,076 --> 0:07:21,926
to run properly.

274
00:07:22,796 --> 0:07:23,666
If you're mocking out or

275
00:07:23,666 --> 0:07:25,166
skipping network calls entirely,

276
00:07:25,486 --> 0:07:26,306
you need to make sure you're

277
00:07:26,306 --> 0:07:27,966
covering those cases along with

278
00:07:27,966 --> 0:07:29,336
realistic network types

279
00:07:29,546 --> 0:07:30,406
somewhere else in the

280
00:07:30,406 --> 0:07:32,226
development process, and to do

281
00:07:32,226 --> 0:07:33,776
that, we need to consider what a

282
00:07:33,776 --> 0:07:35,196
good testing model looks like.

283
00:07:35,596 --> 0:07:39,436
Earlier this week in the testing

284
00:07:39,436 --> 0:07:40,966
and Xcode session, we heard

285
00:07:40,966 --> 0:07:42,336
about the Pyramid model as a

286
00:07:42,336 --> 0:07:43,956
guide for how to structure a

287
00:07:43,956 --> 0:07:45,606
maintainable automation test

288
00:07:45,606 --> 0:07:45,856
suite.

289
00:07:46,966 --> 0:07:48,596
A good testing model balances

290
00:07:48,676 --> 0:07:50,596
thoroughness, quality, and

291
00:07:50,596 --> 0:07:52,886
execution speed and consists of

292
00:07:52,886 --> 0:07:54,456
a large number of focused unit

293
00:07:55,586 --> 0:07:55,766
tests.

294
00:07:56,146 --> 0:07:57,406
These are where it's okay to

295
00:07:57,406 --> 0:07:58,936
optimize for fast execution

296
00:07:58,936 --> 0:08:00,566
times, and because we want to

297
00:07:58,936 --> 0:08:00,566
times, and because we want to

298
00:08:00,566 --> 0:08:02,796
isolate features here, it's okay

299
00:08:02,796 --> 0:08:03,936
to run these in clean room

300
00:08:03,936 --> 0:08:04,516
conditions.

301
00:08:05,346 --> 0:08:06,416
You might be using these to look

302
00:08:06,416 --> 0:08:07,526
for functional regressions.

303
00:08:08,876 --> 0:08:10,196
These are complemented by a

304
00:08:10,196 --> 0:08:11,696
smaller number of integration

305
00:08:11,696 --> 0:08:13,606
tests targeting a discrete set

306
00:08:13,606 --> 0:08:15,676
of classes in your app.

307
00:08:15,846 --> 0:08:17,706
Integration tests check that

308
00:08:17,706 --> 0:08:19,146
your app's subsystems work

309
00:08:19,146 --> 0:08:20,766
together from the perspective of

310
00:08:20,766 --> 0:08:21,176
a user.

311
00:08:22,176 --> 0:08:23,556
Since these test results will

312
00:08:23,556 --> 0:08:25,026
more closely reflect real-world

313
00:08:25,026 --> 0:08:26,766
use, they may come with an

314
00:08:26,766 --> 0:08:27,876
increase variance.

315
00:08:28,196 --> 0:08:29,356
So you should be prepared to

316
00:08:29,356 --> 0:08:30,736
triage the failure reasons in

317
00:08:30,736 --> 0:08:32,596
more depth and not just consider

318
00:08:32,596 --> 0:08:34,166
these tests flaky.

319
00:08:34,746 --> 0:08:38,976
And finally, the suite is topped

320
00:08:38,976 --> 0:08:40,775
off with user interface tests or

321
00:08:40,775 --> 0:08:42,876
UI tests, which exercise the app

322
00:08:42,946 --> 0:08:44,256
in a way very similar to how

323
00:08:44,256 --> 0:08:46,176
users would interact with it.

324
00:08:46,396 --> 0:08:48,226
This is your place to validate

325
00:08:48,226 --> 0:08:49,586
that all the pieces of your app

326
00:08:49,586 --> 0:08:51,346
are hooked up and interact

327
00:08:51,346 --> 0:08:52,496
correctly with external

328
00:08:52,496 --> 0:08:53,696
resources like the network.

329
00:08:54,336 --> 0:08:55,556
So this is where your most

330
00:08:55,556 --> 0:08:56,916
representative tests might be.

331
00:08:57,856 --> 0:08:59,586
At the same time, this is where

332
00:08:59,586 --> 0:09:00,526
you might see the highest

333
00:08:59,586 --> 0:09:00,526
you might see the highest

334
00:09:00,526 --> 0:09:02,456
variance in your results, and

335
00:09:02,456 --> 0:09:04,106
because of that, it might feel

336
00:09:04,226 --> 0:09:06,246
tempting to place more focus on

337
00:09:06,246 --> 0:09:08,826
unit tests, and that might lead

338
00:09:08,826 --> 0:09:10,086
you into a false sense of

339
00:09:10,086 --> 0:09:11,176
security about your app's

340
00:09:11,176 --> 0:09:11,636
behavior.

341
00:09:12,726 --> 0:09:14,406
When applied well, this testing

342
00:09:14,406 --> 0:09:15,306
model can provide a

343
00:09:15,306 --> 0:09:17,026
comprehensive picture of how

344
00:09:17,026 --> 0:09:17,986
your app's code base is

345
00:09:17,986 --> 0:09:18,556
functioning.

346
00:09:19,656 --> 0:09:20,896
This is great for the testing

347
00:09:20,896 --> 0:09:22,376
coverage enables you to do, but

348
00:09:22,596 --> 0:09:24,096
you need to be mindful of the

349
00:09:24,146 --> 0:09:25,356
testing you might be leaving out

350
00:09:25,646 --> 0:09:26,986
in your integration and UI

351
00:09:26,986 --> 0:09:27,526
suites.

352
00:09:28,676 --> 0:09:30,026
Putting your focus entirely on

353
00:09:30,026 --> 0:09:31,286
unit testing comes with clean

354
00:09:31,286 --> 0:09:32,886
room conditions, and while that

355
00:09:32,886 --> 0:09:34,766
helps you find regressions, you

356
00:09:34,766 --> 0:09:36,046
might be leaving out real-world

357
00:09:36,046 --> 0:09:37,316
behavior that you can make

358
00:09:37,356 --> 0:09:38,556
progressions under for your

359
00:09:38,556 --> 0:09:39,016
users.

360
00:09:39,636 --> 0:09:44,556
Now, it's easy to fall into the

361
00:09:44,556 --> 0:09:46,106
habit of clean room testing

362
00:09:46,356 --> 0:09:47,416
because it gives us many of the

363
00:09:47,416 --> 0:09:48,746
qualities we like to see,

364
00:09:48,996 --> 0:09:50,906
repeatable results, low

365
00:09:50,906 --> 0:09:51,586
variance.

366
00:09:51,966 --> 0:09:53,296
These translate into reduced

367
00:09:53,376 --> 0:09:54,416
test flakiness.

368
00:09:55,276 --> 0:09:56,586
Now we want your functionality

369
00:09:56,586 --> 0:09:57,496
and performance wins to

370
00:09:57,496 --> 0:09:58,866
translate into the real world,

371
00:09:58,866 --> 0:10:00,016
so you're going to need the

372
00:09:58,866 --> 0:10:00,016
so you're going to need the

373
00:10:00,056 --> 0:10:01,216
right developer tools that also

374
00:10:01,216 --> 0:10:01,966
have these qualities.

375
00:10:04,216 --> 0:10:05,946
Variance can be a consequence of

376
00:10:05,946 --> 0:10:07,476
realism, and it deserves the

377
00:10:07,476 --> 0:10:09,176
same attention you would give to

378
00:10:09,176 --> 0:10:10,876
testing and triaging those tough

379
00:10:10,876 --> 0:10:12,096
edge case in your source.

380
00:10:13,216 --> 0:10:14,636
As you apply the Pyramid model

381
00:10:14,816 --> 0:10:16,016
to different parts of your

382
00:10:16,016 --> 0:10:17,416
development workflow, you'll

383
00:10:17,416 --> 0:10:19,246
find the right places to create

384
00:10:19,246 --> 0:10:20,676
quality checkpoints that work

385
00:10:20,676 --> 0:10:22,636
for you and your team, like

386
00:10:22,636 --> 0:10:24,106
making sure that all unit tests

387
00:10:24,156 --> 0:10:25,766
pass before you merge, so you

388
00:10:25,766 --> 0:10:26,946
can find regressions early.

389
00:10:28,016 --> 0:10:29,386
Now, while integration and UI

390
00:10:29,386 --> 0:10:30,936
tests might not fit in well as

391
00:10:30,936 --> 0:10:32,286
an early checkpoint because of

392
00:10:32,286 --> 0:10:33,556
the variance that's incurred

393
00:10:33,906 --> 0:10:35,066
when you bring in real-world

394
00:10:35,066 --> 0:10:36,856
conditions, they must still have

395
00:10:36,856 --> 0:10:38,086
a place in your process.

396
00:10:38,906 --> 0:10:40,006
If you make sure you're running

397
00:10:40,006 --> 0:10:41,226
them at appropriate times,

398
00:10:41,556 --> 0:10:42,896
you'll be able to characterize

399
00:10:42,896 --> 0:10:44,356
your app's behavior and find

400
00:10:44,356 --> 0:10:45,916
areas of improvement and

401
00:10:45,916 --> 0:10:47,076
behavioral progressions that you

402
00:10:47,076 --> 0:10:47,976
can make.

403
00:10:48,876 --> 0:10:50,266
So, now that we've made room for

404
00:10:50,266 --> 0:10:51,656
real-world conditions, you can

405
00:10:51,656 --> 0:10:53,016
bring back and focus on the

406
00:10:53,016 --> 0:10:54,186
testing you might have skipped

407
00:10:54,186 --> 0:10:55,836
earlier, like those network

408
00:10:56,396 --> 0:10:56,546
ones.

409
00:10:57,916 --> 0:10:59,376
So, we've seen some approaches

410
00:10:59,376 --> 0:11:02,276
to do this like using custom

411
00:10:59,376 --> 0:11:02,276
to do this like using custom

412
00:11:02,276 --> 0:11:03,446
routers that condition the

413
00:11:03,446 --> 0:11:05,166
network infrastructure, and this

414
00:11:05,166 --> 0:11:06,646
can be really successful when

415
00:11:06,646 --> 0:11:07,156
done right.

416
00:11:08,076 --> 0:11:09,416
But this can also be really

417
00:11:09,416 --> 0:11:11,036
difficult to do, especially if

418
00:11:11,036 --> 0:11:12,256
you're a developer just starting

419
00:11:12,256 --> 0:11:12,476
out.

420
00:11:13,406 --> 0:11:14,676
Even with a good testing model

421
00:11:14,736 --> 0:11:16,636
and a strong focus on triage, to

422
00:11:16,636 --> 0:11:18,086
conduct real-world testing,

423
00:11:18,336 --> 0:11:19,816
you'll need good and reliable

424
00:11:19,816 --> 0:11:20,536
developer tools.

425
00:11:21,526 --> 0:11:23,666
So, if you're targeting macOS

426
00:11:23,666 --> 0:11:24,886
with your app, you should

427
00:11:24,886 --> 0:11:26,316
download and use the Network

428
00:11:26,316 --> 0:11:27,546
Link Conditioner Preference

429
00:11:27,546 --> 0:11:27,866
pane.

430
00:11:28,476 --> 0:11:29,636
You can use it to vary the

431
00:11:29,636 --> 0:11:31,356
network type and see how your

432
00:11:31,356 --> 0:11:32,976
app behaves under networks like

433
00:11:33,056 --> 0:11:34,766
3G or EDGE.

434
00:11:37,636 --> 0:11:39,386
The Network Link Conditioner is

435
00:11:39,386 --> 0:11:41,226
available on iOS from the

436
00:11:41,226 --> 0:11:43,116
developer settings menu on

437
00:11:43,116 --> 0:11:44,226
devices that you're using for

438
00:11:44,226 --> 0:11:44,746
development.

439
00:11:45,336 --> 0:11:46,856
From here, you can vary the

440
00:11:46,856 --> 0:11:48,796
network type between contended

441
00:11:48,796 --> 0:11:50,516
or more representative presets

442
00:11:50,936 --> 0:11:52,196
and design your app for them

443
00:11:52,336 --> 0:11:53,756
without the need to set up or

444
00:11:53,756 --> 0:11:54,576
change the network

445
00:11:54,576 --> 0:11:55,236
infrastructure.

446
00:11:56,176 --> 0:11:57,446
This is a reliable and

447
00:11:57,446 --> 0:11:59,226
repeatable device supported way

448
00:11:59,486 --> 0:12:00,826
to run your app under different

449
00:11:59,486 --> 0:12:00,826
to run your app under different

450
00:12:00,826 --> 0:12:01,316
networks.

451
00:12:02,406 --> 0:12:03,716
And if you have custom needs,

452
00:12:03,926 --> 0:12:05,356
you can also create customized

453
00:12:05,356 --> 0:12:07,236
presets for specific types of

454
00:12:07,296 --> 0:12:09,206
bandwidth, packet loss, and

455
00:12:09,206 --> 0:12:10,306
latency that you would like to

456
00:12:10,306 --> 0:12:10,966
design for.

457
00:12:11,836 --> 0:12:13,146
This is great to check how your

458
00:12:13,146 --> 0:12:14,626
app behaves in specific

459
00:12:14,626 --> 0:12:15,316
environments.

460
00:12:15,856 --> 0:12:18,686
In Xcode 11, we've brought the

461
00:12:18,686 --> 0:12:20,506
ability to activate and vary

462
00:12:20,506 --> 0:12:21,856
different network types to the

463
00:12:21,856 --> 0:12:23,806
devices and simulators window so

464
00:12:23,806 --> 0:12:25,316
that you can start easily and

465
00:12:25,316 --> 0:12:27,226
reliably including realism in

466
00:12:27,226 --> 0:12:28,316
your design process.

467
00:12:28,796 --> 0:12:31,066
You'll see a new device

468
00:12:31,066 --> 0:12:32,826
condition section on the lower

469
00:12:32,826 --> 0:12:33,606
part of the window.

470
00:12:34,256 --> 0:12:35,696
From here, you can put your

471
00:12:35,696 --> 0:12:36,736
device into a more

472
00:12:36,736 --> 0:12:37,636
representative state.

473
00:12:38,846 --> 0:12:40,046
If you want a network link,

474
00:12:40,256 --> 0:12:41,306
you'll see all of the network

475
00:12:41,306 --> 0:12:42,636
types from earlier as well as

476
00:12:42,636 --> 0:12:44,066
new profiles to vary the network

477
00:12:44,066 --> 0:12:45,076
quality itself.

478
00:12:46,436 --> 0:12:47,786
This means you can have your

479
00:12:47,786 --> 0:12:49,706
device and your app behave as if

480
00:12:49,706 --> 0:12:51,686
it's running on networks like 2G

481
00:12:51,686 --> 0:12:54,576
or EDGE, 3G or LTE, or different

482
00:12:54,576 --> 0:12:55,356
types of Wi-Fi.

483
00:12:56,046 --> 0:12:57,396
You can even choose the quality

484
00:12:57,396 --> 0:12:58,896
of the network type like a good

485
00:12:58,896 --> 0:13:00,926
EDGE network or an average 3G

486
00:12:58,896 --> 0:13:00,926
EDGE network or an average 3G

487
00:13:00,926 --> 0:13:01,166
one.

488
00:13:01,846 --> 0:13:03,486
Now, people do use connections

489
00:13:03,486 --> 0:13:05,176
like these, so I hope you find

490
00:13:05,176 --> 0:13:06,866
it helpful to see how your apps

491
00:13:06,866 --> 0:13:08,606
work with them too and look for

492
00:13:08,606 --> 0:13:09,696
where you can find behavioral

493
00:13:09,696 --> 0:13:10,296
progressions.

494
00:13:11,466 --> 0:13:12,546
Once you've picked a condition

495
00:13:12,546 --> 0:13:13,826
you want to activate, click

496
00:13:13,826 --> 0:13:15,176
start from the devices window.

497
00:13:16,116 --> 0:13:18,256
Now, these conditions are system

498
00:13:18,256 --> 0:13:19,946
wide, so you can expect

499
00:13:19,946 --> 0:13:21,156
everything to start reacting

500
00:13:21,156 --> 0:13:23,346
differently, including your app.

501
00:13:24,386 --> 0:13:26,246
On devices which have conditions

502
00:13:26,246 --> 0:13:28,186
active, you'll see a new gray

503
00:13:28,186 --> 0:13:29,266
status indicator.

504
00:13:31,056 --> 0:13:32,626
Although activating a network

505
00:13:32,626 --> 0:13:34,186
type affects the whole system,

506
00:13:34,396 --> 0:13:35,656
the UI indicators for your

507
00:13:35,656 --> 0:13:37,126
network will remain unchanged.

508
00:13:38,276 --> 0:13:39,316
You should also know that an

509
00:13:39,316 --> 0:13:41,106
activated network condition is a

510
00:13:41,106 --> 0:13:43,456
ceiling or a cap on your network

511
00:13:43,556 --> 0:13:45,166
type, and it cannot upgrade your

512
00:13:45,166 --> 0:13:46,376
network performance from where

513
00:13:46,376 --> 0:13:47,456
it actually is in the real

514
00:13:47,456 --> 0:13:47,816
world.

515
00:13:49,516 --> 0:13:50,996
From the device, if you tap the

516
00:13:50,996 --> 0:13:52,706
gray status icon, you'll see a

517
00:13:52,706 --> 0:13:54,046
prompt telling you about the

518
00:13:54,046 --> 0:13:55,726
active condition as well as an

519
00:13:55,726 --> 0:13:57,756
option to stop it, and if your

520
00:13:57,756 --> 0:13:59,496
device is disconnected from

521
00:13:59,496 --> 0:14:00,716
Xcode, the condition is

522
00:13:59,496 --> 0:14:00,716
Xcode, the condition is

523
00:14:00,716 --> 0:14:01,756
automatically stopped.

524
00:14:03,076 --> 0:14:04,426
To show you how you can use

525
00:14:04,426 --> 0:14:06,026
network link device conditions

526
00:14:06,246 --> 0:14:07,696
to find areas of progression in

527
00:14:07,696 --> 0:14:08,936
your app, I'm going to bring

528
00:14:08,936 --> 0:14:09,976
Ilya back on stage.

529
00:14:10,516 --> 0:14:12,656
[ Applause ]

530
00:14:13,156 --> 0:14:14,406
&gt;&gt; We often expect our apps to

531
00:14:14,406 --> 0:14:16,006
behave slightly worse on a

532
00:14:16,006 --> 0:14:17,026
slightly worse network link.

533
00:14:17,056 --> 0:14:18,656
But it's important for you to be

534
00:14:18,656 --> 0:14:19,716
asking yourselves whether the

535
00:14:19,716 --> 0:14:21,136
behavior is as bad as it really

536
00:14:21,136 --> 0:14:21,606
needs to be.

537
00:14:22,156 --> 0:14:23,266
Could it be better?

538
00:14:23,626 --> 0:14:24,616
Are there progression we could

539
00:14:24,616 --> 0:14:25,876
make under an adverse or

540
00:14:25,876 --> 0:14:27,246
different network.

541
00:14:28,436 --> 0:14:30,016
Here's a mind-blowing example

542
00:14:30,576 --> 0:14:30,676
app.

543
00:14:30,936 --> 0:14:31,876
We can launch this to look at

544
00:14:31,876 --> 0:14:33,066
baseline behavior for a network

545
00:14:33,066 --> 0:14:34,386
connection with an ideal lab

546
00:14:34,386 --> 0:14:34,856
condition.

547
00:14:36,016 --> 0:14:38,006
This app probes an endpoint we

548
00:14:38,006 --> 0:14:39,636
set up just for this demo to see

549
00:14:39,636 --> 0:14:40,456
how long it takes to make the

550
00:14:40,456 --> 0:14:40,866
connection.

551
00:14:41,646 --> 0:14:43,956
We see that on average this

552
00:14:43,956 --> 0:14:45,176
connection takes around 150

553
00:14:45,176 --> 0:14:45,786
milliseconds.

554
00:14:46,346 --> 0:14:46,946
We can think of this as

555
00:14:46,946 --> 0:14:48,506
analogous to something like

556
00:14:48,576 --> 0:14:49,756
requiring secure login or

557
00:14:49,756 --> 0:14:50,466
streaming content from a

558
00:14:50,466 --> 0:14:50,866
website.

559
00:14:51,606 --> 0:14:52,636
And this looks great.

560
00:14:52,636 --> 0:14:54,516
If we're doing UI testing in our

561
00:14:54,516 --> 0:14:55,746
lab, we would assume that

562
00:14:55,746 --> 0:14:56,826
everything is working smoothly,

563
00:14:56,826 --> 0:14:57,846
and we have no problems.

564
00:14:58,716 --> 0:15:00,656
Now let's see what happens if we

565
00:14:58,716 --> 0:15:00,656
Now let's see what happens if we

566
00:15:00,656 --> 0:15:01,416
turn on the Network Link

567
00:15:01,416 --> 0:15:02,466
Conditioner from the Xcode

568
00:15:02,466 --> 0:15:03,116
devices window.

569
00:15:04,616 --> 0:15:07,856
This is an average 3G network

570
00:15:07,856 --> 0:15:08,846
connection in this example.

571
00:15:10,266 --> 0:15:11,856
Let's see what happens now.

572
00:15:13,436 --> 0:15:15,886
When we run the probe again, we

573
00:15:15,886 --> 0:15:17,746
see it takes longer, in this

574
00:15:17,746 --> 0:15:19,766
case, on average around a little

575
00:15:19,766 --> 0:15:21,476
over 750 milliseconds.

576
00:15:22,406 --> 0:15:23,226
This might not be all that

577
00:15:23,226 --> 0:15:24,676
surprising because after all a

578
00:15:24,676 --> 0:15:26,326
3G network is slower when

579
00:15:26,326 --> 0:15:27,666
compared to something like LTE

580
00:15:27,666 --> 0:15:28,156
or Wi-Fi.

581
00:15:29,156 --> 0:15:30,456
But the important thing to note

582
00:15:30,456 --> 0:15:32,436
is as we said before this is the

583
00:15:32,536 --> 0:15:34,186
actual network many of your

584
00:15:34,186 --> 0:15:34,826
users will see.

585
00:15:35,526 --> 0:15:36,916
What can we do to improve this

586
00:15:36,916 --> 0:15:38,236
experience for them?

587
00:15:39,216 --> 0:15:41,156
So you probably noticed just

588
00:15:41,156 --> 0:15:42,406
above the run probe button we

589
00:15:42,406 --> 0:15:43,526
have these two switches which

590
00:15:43,526 --> 0:15:45,356
are disabled for Optimistic DNS and

591
00:15:45,356 --> 0:15:46,206
TLS 1.3.

592
00:15:46,886 --> 0:15:47,996
Let's turn them on and see what

593
00:15:47,996 --> 0:15:48,426
happens.

594
00:15:48,916 --> 0:15:53,106
And now as we turn them on and

595
00:15:53,106 --> 0:15:54,426
run the probe again, we see an

596
00:15:54,426 --> 0:15:56,166
immediate improvement, around 33

597
00:15:56,166 --> 0:15:58,776
percent faster.

598
00:15:58,876 --> 0:16:00,826
Simply by testing this app with

599
00:15:58,876 --> 0:16:00,826
Simply by testing this app with

600
00:16:00,826 --> 0:16:01,666
the Network Link Conditioner

601
00:16:01,666 --> 0:16:03,876
active, we explicitly noted that

602
00:16:03,876 --> 0:16:04,816
there is a significant

603
00:16:04,816 --> 0:16:06,036
performance loss when we have a

604
00:16:06,036 --> 0:16:08,266
slower network like 3G or when

605
00:16:08,266 --> 0:16:09,486
compared to a faster one like

606
00:16:09,486 --> 0:16:10,366
Wi-Fi or LTE.

607
00:16:11,716 --> 0:16:13,006
This told us that we should take

608
00:16:13,006 --> 0:16:14,386
into account these new features

609
00:16:14,716 --> 0:16:15,956
and use them to proactively

610
00:16:16,046 --> 0:16:17,646
improve performance even under

611
00:16:17,816 --> 0:16:18,966
realistic network conditions.

612
00:16:21,756 --> 0:16:22,906
By running Network Link

613
00:16:22,906 --> 0:16:24,296
Conditioner, you'll notice some

614
00:16:24,296 --> 0:16:25,306
behaviors are worse than they

615
00:16:25,306 --> 0:16:26,966
need to be whereas previously

616
00:16:26,966 --> 0:16:27,536
you might not have.

617
00:16:28,246 --> 0:16:29,426
Here are just a few things you

618
00:16:29,426 --> 0:16:30,716
can do to proactively improve

619
00:16:30,716 --> 0:16:31,656
the overall experience.

620
00:16:32,756 --> 0:16:34,306
First, do set reasonable

621
00:16:34,306 --> 0:16:34,806
timeouts.

622
00:16:35,726 --> 0:16:37,316
That is, timeout when you stop

623
00:16:37,316 --> 0:16:38,876
making progress, not just when

624
00:16:38,876 --> 0:16:39,776
progress takes too long.

625
00:16:40,366 --> 0:16:42,576
As we said before, if your users

626
00:16:42,576 --> 0:16:44,056
are at 3G network, you might be

627
00:16:44,056 --> 0:16:45,376
happy to wait longer for content

628
00:16:45,376 --> 0:16:45,676
to load.

629
00:16:46,356 --> 0:16:47,576
An arbitrary timeout will be a

630
00:16:47,576 --> 0:16:49,516
worse user experience for them.

631
00:16:49,786 --> 0:16:52,786
Additionally, do use HTTP/2 and

632
00:16:52,786 --> 0:16:53,966
do avoid reachability checks

633
00:16:54,046 --> 0:16:54,796
whenever possible.

634
00:16:55,306 --> 0:16:56,556
Instead, just try to use a

635
00:16:56,556 --> 0:16:57,956
network and do what you can to

636
00:16:57,956 --> 0:16:59,366
make sure your app works well

637
00:16:59,366 --> 0:17:00,406
under as many network conditions

638
00:16:59,366 --> 0:17:00,406
under as many network conditions

639
00:17:00,406 --> 0:17:00,946
as possible.

640
00:17:01,636 --> 0:17:03,096
To learn more about what else

641
00:17:03,096 --> 0:17:04,586
you can do, please see these two

642
00:17:04,586 --> 0:17:06,646
sessions from last year's WWDC

643
00:17:06,646 --> 0:17:07,846
as well as Advances in

644
00:17:07,846 --> 0:17:08,976
Networking parts one and two

645
00:17:09,046 --> 0:17:09,776
from earlier this week.

646
00:17:11,876 --> 0:17:14,096
&gt;&gt; So, get conditioning.

647
00:17:14,126 --> 0:17:16,665
You want to start considering

648
00:17:16,665 --> 0:17:18,136
real-world network usage in your

649
00:17:18,646 --> 0:17:18,713
app.

650
00:17:18,906 --> 0:17:20,076
You want to use network link

651
00:17:20,076 --> 0:17:21,226
device conditions to

652
00:17:21,226 --> 0:17:22,915
characterize your app's behavior

653
00:17:23,026 --> 0:17:24,626
under that usage and ask

654
00:17:24,626 --> 0:17:26,346
yourselves, is this acceptable

655
00:17:26,346 --> 0:17:28,336
performance or can it be better.

656
00:17:29,066 --> 0:17:30,456
We recommend that you test with

657
00:17:30,456 --> 0:17:32,206
at least 3G networks and look

658
00:17:32,206 --> 0:17:33,156
for the progressions that you

659
00:17:33,156 --> 0:17:33,566
can make.

660
00:17:34,216 --> 0:17:35,176
You want to vary both the

661
00:17:35,176 --> 0:17:37,246
network type and its quality to

662
00:17:37,246 --> 0:17:38,626
see if you're still providing a

663
00:17:38,626 --> 0:17:40,326
good experience and then you can

664
00:17:40,326 --> 0:17:41,666
lock in those performance wins

665
00:17:41,876 --> 0:17:43,196
by making this a part of your

666
00:17:43,196 --> 0:17:45,146
integration and UI test runs.

667
00:17:45,506 --> 0:17:49,426
Now, I want to talk about

668
00:17:49,966 --> 0:17:51,136
varying temperatures.

669
00:17:52,216 --> 0:17:53,946
People like to go outdoors and

670
00:17:53,946 --> 0:17:55,146
use their devices on a sunny

671
00:17:55,146 --> 0:17:55,476
day.

672
00:17:56,216 --> 0:17:57,636
They might head to coffee shops

673
00:17:57,636 --> 0:17:59,106
and use personal hotspot while

674
00:17:59,106 --> 0:18:00,546
iPhone is wirelessly charging.

675
00:17:59,106 --> 0:18:00,546
iPhone is wirelessly charging.

676
00:18:01,546 --> 0:18:03,366
In these situations, devices

677
00:18:03,366 --> 0:18:05,056
will start to feel warmer, and

678
00:18:05,056 --> 0:18:05,976
that's normal behavior.

679
00:18:06,536 --> 0:18:08,056
Some thermal conditions can

680
00:18:08,056 --> 0:18:09,996
cause iOS devices to change

681
00:18:09,996 --> 0:18:12,016
their behavior or performance in

682
00:18:12,016 --> 0:18:12,916
order to regulate their

683
00:18:12,916 --> 0:18:13,476
temperature.

684
00:18:14,006 --> 0:18:16,786
And temperature can vary for any

685
00:18:16,786 --> 0:18:18,336
number of reasons, whether it's

686
00:18:18,336 --> 0:18:19,846
an increase in work done by the

687
00:18:19,846 --> 0:18:22,396
device or environmental effects

688
00:18:22,616 --> 0:18:24,186
like exposure to direct sunlight

689
00:18:25,086 --> 0:18:25,756
and many more.

690
00:18:27,156 --> 0:18:28,246
All of these are normal

691
00:18:28,246 --> 0:18:30,846
scenarios, and iOS subsystems

692
00:18:30,846 --> 0:18:32,546
react to changing temperatures

693
00:18:32,836 --> 0:18:34,276
to regulate the impact of those

694
00:18:34,276 --> 0:18:34,816
effects.

695
00:18:35,366 --> 0:18:37,406
But what's missing is for your

696
00:18:37,406 --> 0:18:38,716
app to work well under changing

697
00:18:38,716 --> 0:18:40,706
temperatures and how you react

698
00:18:40,706 --> 0:18:41,296
to them too.

699
00:18:42,836 --> 0:18:44,356
Now, when certain thresholds are

700
00:18:44,356 --> 0:18:45,746
exceeded, for example, if the

701
00:18:45,746 --> 0:18:47,436
device is left in a hot car for

702
00:18:47,436 --> 0:18:49,376
a prolonged time, users might

703
00:18:49,376 --> 0:18:50,586
see this temperature warning

704
00:18:50,586 --> 0:18:50,956
screen.

705
00:18:51,916 --> 0:18:53,546
At this point, they can no

706
00:18:53,546 --> 0:18:55,066
longer interact with your apps.

707
00:18:55,946 --> 0:18:57,496
Part of the reason this happens

708
00:18:57,776 --> 0:18:58,986
is to provide users with the

709
00:18:58,986 --> 0:19:00,676
crucial ability to make

710
00:18:58,986 --> 0:19:00,676
crucial ability to make

711
00:19:00,676 --> 0:19:02,066
emergency calls should they need

712
00:19:02,066 --> 0:19:02,636
to do so.

713
00:19:04,076 --> 0:19:05,856
Now, the system is doing what it

714
00:19:05,856 --> 0:19:07,596
can to limit its energy impact,

715
00:19:07,856 --> 0:19:09,606
which effects heat and battery

716
00:19:09,606 --> 0:19:11,796
life, and your app is a resident

717
00:19:11,796 --> 0:19:13,316
of the system as well, and it's

718
00:19:13,316 --> 0:19:14,576
important that you take into

719
00:19:14,576 --> 0:19:16,396
account its energy impact too.

720
00:19:17,416 --> 0:19:18,886
To do this, you can start

721
00:19:18,886 --> 0:19:20,076
changing your app's behavior

722
00:19:20,076 --> 0:19:21,446
dynamically when you're in a

723
00:19:21,446 --> 0:19:23,106
different thermal state.

724
00:19:23,916 --> 0:19:25,846
By designing defensively, you

725
00:19:25,846 --> 0:19:27,396
can reduce your app's energy

726
00:19:27,396 --> 0:19:29,156
impact by turning off background

727
00:19:29,156 --> 0:19:30,276
work, which contributes to

728
00:19:30,276 --> 0:19:31,416
higher thermal states.

729
00:19:32,446 --> 0:19:33,936
You can register for thermal

730
00:19:33,936 --> 0:19:35,906
state change notifications and

731
00:19:35,906 --> 0:19:37,256
look up which state the device

732
00:19:37,256 --> 0:19:39,916
reports to your app and consider

733
00:19:39,916 --> 0:19:41,646
scenarios that are normal like

734
00:19:41,646 --> 0:19:44,246
device warming, because the

735
00:19:44,246 --> 0:19:45,596
system knows how it should react

736
00:19:45,696 --> 0:19:46,836
to an increase in temperature.

737
00:19:47,696 --> 0:19:49,056
But your app knows more details

738
00:19:49,056 --> 0:19:50,546
about the work it's doing and

739
00:19:50,546 --> 0:19:52,366
how that work should react to a

740
00:19:52,366 --> 0:19:53,726
higher thermal state while

741
00:19:53,726 --> 0:19:55,266
maintaining a good experience.

742
00:19:56,916 --> 0:19:57,886
So, let's take a look at these

743
00:19:57,886 --> 0:19:58,486
thermal states that you might

744
00:19:58,486 --> 0:19:58,976
see reported.

745
00:20:00,156 --> 0:20:02,706
At the nominal state, the device

746
00:20:02,706 --> 0:20:03,676
is at normal operating

747
00:20:03,676 --> 0:20:04,886
temperatures, and there's no

748
00:20:04,886 --> 0:20:06,126
need for any corrective action

749
00:20:06,126 --> 0:20:07,246
from your app.

750
00:20:07,906 --> 0:20:09,966
At the first state, we recommend

751
00:20:10,006 --> 0:20:11,516
that you proactively start some

752
00:20:11,516 --> 0:20:13,116
energy saving measures so that

753
00:20:13,116 --> 0:20:14,226
you're not contributing

754
00:20:14,356 --> 0:20:15,666
significantly to an overall

755
00:20:15,666 --> 0:20:16,216
increase.

756
00:20:17,216 --> 0:20:18,896
When iOS sees thermal state

757
00:20:18,896 --> 0:20:20,446
fair, we start to pause

758
00:20:20,446 --> 0:20:21,806
discretionary background work

759
00:20:22,006 --> 0:20:23,256
like photos analysis.

760
00:20:23,726 --> 0:20:26,406
When the device reports a

761
00:20:26,406 --> 0:20:28,146
serious thermal state, system

762
00:20:28,146 --> 0:20:29,566
performance will be impacted,

763
00:20:29,906 --> 0:20:30,946
and your app should start

764
00:20:30,946 --> 0:20:32,446
stronger energy saving measures

765
00:20:32,656 --> 0:20:34,546
and reduce heavy CPU usage,

766
00:20:34,846 --> 0:20:36,316
graphics, and I/O.

767
00:20:37,056 --> 0:20:38,546
At this point, you should use

768
00:20:38,546 --> 0:20:40,816
lower quality visual effects.

769
00:20:41,536 --> 0:20:43,016
Some measures we take on the

770
00:20:43,016 --> 0:20:44,366
system include lowering the

771
00:20:44,366 --> 0:20:46,126
frame rate of ARKit apps and

772
00:20:46,126 --> 0:20:47,746
Facetime so that they're less

773
00:20:47,746 --> 0:20:48,306
intensive.

774
00:20:48,956 --> 0:20:50,456
And if a user is restoring from

775
00:20:50,456 --> 0:20:52,096
an iCloud backup, they'll find

776
00:20:52,096 --> 0:20:53,166
that it will be paused at this

777
00:20:53,166 --> 0:20:54,536
state until the device cools

778
00:20:54,536 --> 0:20:54,816
down.

779
00:20:55,906 --> 0:20:57,706
And at thermal state critical,

780
00:20:58,076 --> 0:20:59,246
your app should stop using

781
00:20:59,246 --> 0:21:00,536
peripherals such as the camera.

782
00:20:59,246 --> 0:21:00,536
peripherals such as the camera.

783
00:21:01,236 --> 0:21:02,696
If you're ending up on the top

784
00:21:02,696 --> 0:21:03,886
of the list on the battery

785
00:21:03,886 --> 0:21:05,636
impact screen, users might even

786
00:21:05,636 --> 0:21:08,036
consider deleting your app.

787
00:21:08,096 --> 0:21:09,886
Together with the system, your

788
00:21:09,886 --> 0:21:11,556
app should dynamically react to

789
00:21:11,556 --> 0:21:13,116
these changes so that you can

790
00:21:13,116 --> 0:21:14,446
continue to maintain a good

791
00:21:14,446 --> 0:21:16,096
experience while keeping your

792
00:21:16,096 --> 0:21:17,776
energy impact low.

793
00:21:18,796 --> 0:21:20,276
To learn more about the state

794
00:21:20,276 --> 0:21:21,706
cases and our recommendations,

795
00:21:22,076 --> 0:21:22,966
you can take a look at our

796
00:21:22,966 --> 0:21:23,716
documentation.

797
00:21:24,266 --> 0:21:27,276
And Ilya is now going to show

798
00:21:27,276 --> 0:21:28,426
you how you can dynamically

799
00:21:28,426 --> 0:21:29,666
react to these states in an

800
00:21:29,666 --> 0:21:30,116
example.

801
00:21:30,776 --> 0:21:34,106
&gt;&gt; I'm going to show you a

802
00:21:34,106 --> 0:21:35,936
sample ARKit app based on a

803
00:21:35,936 --> 0:21:37,256
modified version of our existing

804
00:21:37,256 --> 0:21:38,836
sample code handling 3D

805
00:21:38,836 --> 0:21:40,326
interaction and UI controls in

806
00:21:40,366 --> 0:21:41,126
augmented reality.

807
00:21:41,126 --> 0:21:43,666
I took it for a stroll in Apple Park

808
00:21:43,666 --> 0:21:44,986
and it's performing some heavy

809
00:21:44,986 --> 0:21:47,116
background work too.

810
00:21:47,346 --> 0:21:48,376
Here you'll see the app running

811
00:21:48,376 --> 0:21:49,506
under nominal conditions.

812
00:21:49,506 --> 0:21:51,146
You can see the red focus square

813
00:21:51,216 --> 0:21:52,906
turn solid, finding a

814
00:21:52,906 --> 0:21:54,966
surface, and letting me drop a

815
00:21:54,966 --> 0:21:56,706
nice chair and a lamp for myself

816
00:21:56,706 --> 0:21:57,796
to sit in and do some reading.

817
00:21:58,676 --> 0:22:01,346
Now you can see the camera

818
00:21:58,676 --> 0:22:01,346
Now you can see the camera

819
00:22:01,346 --> 0:22:02,856
movement is quite smooth.

820
00:22:02,926 --> 0:22:03,446
Everything stays in place.

821
00:22:03,446 --> 0:22:04,456
Everything stays in place.

822
00:22:04,616 --> 0:22:05,996
Everything is behaving just like

823
00:22:05,996 --> 0:22:08,426
it should be.

824
00:22:08,686 --> 0:22:09,656
Now, let's look at this same app

825
00:22:09,656 --> 0:22:11,656
again, but now I've been outside

826
00:22:11,706 --> 0:22:12,796
for a long time.

827
00:22:12,796 --> 0:22:13,856
I've been sitting in the sun.

828
00:22:13,996 --> 0:22:15,406
It's warm out, and the device

829
00:22:15,406 --> 0:22:15,876
has warmed up.

830
00:22:17,356 --> 0:22:18,346
You'll notice two things.

831
00:22:18,656 --> 0:22:20,446
First, the frame rate is not

832
00:22:20,446 --> 0:22:22,146
quite as good as before, and

833
00:22:22,146 --> 0:22:23,896
second is that despite the fact

834
00:22:23,896 --> 0:22:25,216
that I'm aiming almost straight

835
00:22:25,216 --> 0:22:26,756
at the ground, the focus square

836
00:22:26,756 --> 0:22:27,756
does not have time to find a

837
00:22:27,756 --> 0:22:28,246
surface.

838
00:22:28,936 --> 0:22:30,136
This would not be a great

839
00:22:30,136 --> 0:22:31,596
experience for your users, and

840
00:22:31,596 --> 0:22:32,806
it might be a little frustrating

841
00:22:33,386 --> 0:22:33,926
for them.

842
00:22:34,096 --> 0:22:35,156
So, what can we do about this?

843
00:22:36,446 --> 0:22:39,216
First, you should register for

844
00:22:39,216 --> 0:22:40,566
the ProcessInfo.theremalStateDid

845
00:22:40,566 --> 0:22:41,356
ChangeNotification.

846
00:22:42,476 --> 0:22:43,636
When you receive a thermal state

847
00:22:43,636 --> 0:22:46,386
change notification, read the

848
00:22:46,386 --> 0:22:48,576
actual thermal state and then

849
00:22:48,576 --> 0:22:49,396
react accordingly.

850
00:22:50,156 --> 0:22:51,246
Depending on your state, you

851
00:22:51,246 --> 0:22:53,156
should enable or disable certain

852
00:22:53,156 --> 0:22:54,996
features to ensure smooth

853
00:22:54,996 --> 0:22:57,796
functionality or whatever metric

854
00:22:57,796 --> 0:22:58,586
you find is important.

855
00:22:59,046 --> 0:23:02,036
Here's an example of how you can

856
00:22:59,046 --> 0:23:02,036
Here's an example of how you can

857
00:23:02,036 --> 0:23:03,096
register for the thermal state

858
00:23:03,096 --> 0:23:04,516
and then read the thermal state.

859
00:23:04,516 --> 0:23:07,736
And here is how you might choose

860
00:23:07,796 --> 0:23:08,876
to react to the thermal state.

861
00:23:10,156 --> 0:23:11,946
In this scenario, under nominal

862
00:23:11,946 --> 0:23:13,596
and fair, I have all my features

863
00:23:13,596 --> 0:23:13,966
enabled.

864
00:23:14,616 --> 0:23:16,106
In this example, I have face

865
00:23:16,106 --> 0:23:18,046
tracking, person segmentation,

866
00:23:18,176 --> 0:23:19,606
and motion blur all turned on.

867
00:23:19,606 --> 0:23:23,196
As the thermal state increases

868
00:23:23,196 --> 0:23:25,056
to serious, I disable face

869
00:23:25,056 --> 0:23:26,306
tracking and frame semantics,

870
00:23:26,826 --> 0:23:27,736
but I leave motion blur on.

871
00:23:27,736 --> 0:23:31,396
And at critical, I turn off

872
00:23:31,396 --> 0:23:31,716
everything.

873
00:23:32,566 --> 0:23:34,996
Now that we actually react to

874
00:23:34,996 --> 0:23:36,246
thermal states, let's see how

875
00:23:36,246 --> 0:23:37,766
this app behaves again in the

876
00:23:37,766 --> 0:23:38,836
same scenario where we've been

877
00:23:38,836 --> 0:23:41,926
outside for a long time, and we

878
00:23:41,926 --> 0:23:42,746
see it's much better now.

879
00:23:43,496 --> 0:23:44,346
The focus square finds a

880
00:23:44,346 --> 0:23:44,886
surface.

881
00:23:45,016 --> 0:23:46,916
I can drop my chair and my lamp

882
00:23:46,916 --> 0:23:48,486
just like before, and I can get

883
00:23:48,486 --> 0:23:48,996
some reading done.

884
00:23:49,706 --> 0:23:52,496
Now, it's good to code

885
00:23:52,496 --> 0:23:53,986
defensively and to react to

886
00:23:53,986 --> 0:23:55,606
thermal state changes, but you

887
00:23:55,606 --> 0:23:57,036
want to know ahead of time if

888
00:23:57,036 --> 0:23:58,016
this works as you expect.

889
00:23:59,666 --> 0:24:01,826
In general, we can do better by

890
00:23:59,666 --> 0:24:01,826
In general, we can do better by

891
00:24:01,826 --> 0:24:03,516
testing how we expect our app to

892
00:24:03,516 --> 0:24:04,406
behave under varying

893
00:24:04,406 --> 0:24:05,266
temperatures ahead of time.

894
00:24:06,056 --> 0:24:08,006
In other words, you should test

895
00:24:08,006 --> 0:24:08,656
your defenses.

896
00:24:10,096 --> 0:24:12,096
But for something like this, how

897
00:24:12,096 --> 0:24:13,726
do we even go about that?

898
00:24:15,076 --> 0:24:15,966
&gt;&gt; Thanks Ilya.

899
00:24:15,966 --> 0:24:17,806
But the thing is, not all of us

900
00:24:17,806 --> 0:24:18,666
are going to have access to

901
00:24:18,746 --> 0:24:19,416
thermal imaging.

902
00:24:20,616 --> 0:24:22,286
So, just like with network

903
00:24:22,286 --> 0:24:23,716
conditions, we recognize the

904
00:24:23,716 --> 0:24:25,386
challenge in trying to verify

905
00:24:25,386 --> 0:24:26,926
your app's behavior and that

906
00:24:26,926 --> 0:24:28,716
there's high variance in

907
00:24:28,716 --> 0:24:29,766
existing approaches.

908
00:24:30,656 --> 0:24:32,106
We've noticed some methods that

909
00:24:32,106 --> 0:24:33,346
people are taking which we would

910
00:24:33,346 --> 0:24:34,996
not recommend like running a

911
00:24:34,996 --> 0:24:36,456
dummy CPU load to warm the

912
00:24:36,456 --> 0:24:38,226
device, throwing away the first

913
00:24:38,226 --> 0:24:39,566
hour of results, and then

914
00:24:39,566 --> 0:24:41,396
profiling app behavior when the

915
00:24:41,396 --> 0:24:42,126
device is hot.

916
00:24:42,776 --> 0:24:44,526
So, we've been hard at work to

917
00:24:44,526 --> 0:24:45,816
provide a developer tool for

918
00:24:45,816 --> 0:24:47,536
this, and we came up with a way

919
00:24:47,536 --> 0:24:49,306
to reliably change the reported

920
00:24:49,336 --> 0:24:50,676
thermal state on the device

921
00:24:51,056 --> 0:24:52,396
without physically warming it

922
00:24:52,566 --> 0:24:53,836
and still keeping it safe to

923
00:24:53,836 --> 0:24:54,216
use.

924
00:24:54,786 --> 0:24:56,206
And we built that way into

925
00:24:56,206 --> 0:24:58,136
device conditions in Xcode 11.

926
00:24:59,346 --> 0:25:00,806
From the same devices and

927
00:24:59,346 --> 0:25:00,806
From the same devices and

928
00:25:00,806 --> 0:25:02,346
simulators window, you can

929
00:25:02,346 --> 0:25:03,986
activate elevated temperature

930
00:25:03,986 --> 0:25:05,806
conditions and have your device

931
00:25:05,806 --> 0:25:07,416
reach different thermal states

932
00:25:07,646 --> 0:25:08,626
without it needing to be

933
00:25:08,626 --> 0:25:09,406
physically warm.

934
00:25:10,346 --> 0:25:11,816
So now, you can quickly and

935
00:25:11,816 --> 0:25:13,436
easily have your device report

936
00:25:13,436 --> 0:25:15,056
the fair state, to test your

937
00:25:15,056 --> 0:25:16,136
proactive energy-saving

938
00:25:16,136 --> 0:25:16,516
measures.

939
00:25:17,346 --> 0:25:19,156
Thermal state serious, to check

940
00:25:19,156 --> 0:25:20,386
that you're reliably lowering

941
00:25:20,386 --> 0:25:21,776
your resource usage and energy

942
00:25:21,776 --> 0:25:23,886
impact, and thermal state

943
00:25:23,886 --> 0:25:25,586
critical, to see that your use

944
00:25:25,586 --> 0:25:27,526
of peripherals do actually stop.

945
00:25:28,546 --> 0:25:29,876
Running one of these causes the

946
00:25:29,876 --> 0:25:31,676
device to behave exactly as if

947
00:25:31,676 --> 0:25:32,906
it were really in that thermal

948
00:25:32,906 --> 0:25:34,986
state, but before you start

949
00:25:34,986 --> 0:25:36,256
using these, there's more you

950
00:25:36,256 --> 0:25:37,736
need to know about how they work

951
00:25:37,736 --> 0:25:38,306
on your device.

952
00:25:38,606 --> 0:25:39,016
Ilya.

953
00:25:39,566 --> 0:25:40,416
&gt;&gt; Thanks Alex.

954
00:25:40,646 --> 0:25:43,426
I'm going to show you more about

955
00:25:43,426 --> 0:25:44,876
how this condition works under

956
00:25:44,876 --> 0:25:45,196
the hood.

957
00:25:45,196 --> 0:25:47,026
You can see a graph here

958
00:25:47,026 --> 0:25:48,246
representing the actual thermal

959
00:25:48,246 --> 0:25:50,396
state of the device, the active

960
00:25:50,396 --> 0:25:52,656
condition if there is any, and

961
00:25:52,656 --> 0:25:53,836
how warm the device actually

962
00:25:53,836 --> 0:25:55,356
feels to the touch, also

963
00:25:55,356 --> 0:25:56,646
represented by a thermometer at

964
00:25:56,646 --> 0:25:57,116
the top right.

965
00:25:57,116 --> 0:25:59,816
Imagine a baseline device on

966
00:25:59,816 --> 0:26:00,186
your desk.

967
00:25:59,816 --> 0:26:00,186
your desk.

968
00:26:00,726 --> 0:26:01,776
It's at room temperature.

969
00:26:01,776 --> 0:26:03,126
You have no condition active,

970
00:26:03,126 --> 0:26:03,916
and you haven't been using it

971
00:26:03,916 --> 0:26:04,396
for a while.

972
00:26:05,096 --> 0:26:06,526
Here, the thermal state is at

973
00:26:06,526 --> 0:26:06,946
nominal.

974
00:26:07,556 --> 0:26:10,796
If you now activate the serious

975
00:26:10,796 --> 0:26:12,686
thermal profile, the device will

976
00:26:12,686 --> 0:26:14,366
ramp up over time to serious

977
00:26:14,366 --> 0:26:16,956
starting from nominal, reaching

978
00:26:16,956 --> 0:26:19,366
fair, and eventually reaching

979
00:26:19,366 --> 0:26:19,926
serious.

980
00:26:20,676 --> 0:26:21,586
This process will take a few

981
00:26:21,586 --> 0:26:22,056
seconds.

982
00:26:22,876 --> 0:26:24,166
Just like in real life, if you

983
00:26:24,166 --> 0:26:25,256
are subscribed to thermal state

984
00:26:25,256 --> 0:26:26,976
notifications, you'll receive a

985
00:26:26,976 --> 0:26:28,246
notification at fair and at

986
00:26:28,246 --> 0:26:28,816
serious.

987
00:26:29,396 --> 0:26:30,646
Now, there are two important

988
00:26:30,646 --> 0:26:31,986
things to note about this.

989
00:26:32,896 --> 0:26:34,506
The first is that your devices

990
00:26:34,506 --> 0:26:35,796
has not actually warmed up or

991
00:26:35,796 --> 0:26:36,786
changed in temperature as a

992
00:26:36,786 --> 0:26:37,106
result.

993
00:26:37,106 --> 0:26:39,746
The second is that this does not

994
00:26:39,936 --> 0:26:41,606
fix your thermal state, but it

995
00:26:41,606 --> 0:26:42,456
rather acts like a floor.

996
00:26:42,496 --> 0:26:44,776
Let me explain what that means.

997
00:26:45,626 --> 0:26:47,586
Imagine you have your device in

998
00:26:47,586 --> 0:26:49,606
this condition, and you ran some

999
00:26:49,606 --> 0:26:51,376
heavy computational load, or you

1000
00:26:51,376 --> 0:26:52,546
just left it out in the sun for

1001
00:26:52,546 --> 0:26:52,836
a while.

1002
00:26:53,956 --> 0:26:55,666
And now the underlying

1003
00:26:55,666 --> 0:26:56,496
temperature is actually

1004
00:26:56,496 --> 0:26:56,916
increased.

1005
00:26:57,016 --> 0:26:57,816
The device feels warm to the

1006
00:26:57,816 --> 0:26:58,096
touch.

1007
00:26:59,146 --> 0:27:00,786
Regardless of why, the thermal

1008
00:26:59,146 --> 0:27:00,786
Regardless of why, the thermal

1009
00:27:00,786 --> 0:27:02,456
state will actually also

1010
00:27:02,456 --> 0:27:03,876
increase from serious to

1011
00:27:03,876 --> 0:27:04,276
critical.

1012
00:27:06,176 --> 0:27:08,026
This is a precaution to ensure

1013
00:27:08,026 --> 0:27:09,496
your system still behaves safely

1014
00:27:09,976 --> 0:27:10,986
even if you do very heavy

1015
00:27:10,986 --> 0:27:11,996
testing under the thermal

1016
00:27:11,996 --> 0:27:12,396
condition.

1017
00:27:13,046 --> 0:27:14,226
If you then stop using your

1018
00:27:14,226 --> 0:27:18,796
device or let it cool down, the

1019
00:27:18,796 --> 0:27:20,006
thermal state will return back

1020
00:27:20,006 --> 0:27:22,936
down to serious and remain there

1021
00:27:23,386 --> 0:27:24,246
until you tear down the

1022
00:27:24,246 --> 0:27:26,896
condition, at which point, the

1023
00:27:27,026 --> 0:27:28,246
device will ramp from serious to

1024
00:27:28,246 --> 0:27:30,116
fair and down to nominal.

1025
00:27:30,966 --> 0:27:32,136
In all these situations, you

1026
00:27:32,276 --> 0:27:33,846
will receive thermal state user

1027
00:27:33,846 --> 0:27:34,546
notifications.

1028
00:27:35,076 --> 0:27:38,656
In Xcode 11, this thermal state

1029
00:27:38,656 --> 0:27:40,326
information is visible in an

1030
00:27:40,326 --> 0:27:41,426
energy gauge in the debugging

1031
00:27:41,426 --> 0:27:41,946
navigator.

1032
00:27:43,196 --> 0:27:44,826
There are two thermal state

1033
00:27:44,826 --> 0:27:46,656
tracks here, both located toward

1034
00:27:46,656 --> 0:27:47,776
the bottom of the energy impact

1035
00:27:47,776 --> 0:27:48,106
section.

1036
00:27:48,596 --> 0:27:50,206
The bottommost track shows the

1037
00:27:50,286 --> 0:27:51,206
actual thermal state of the

1038
00:27:51,206 --> 0:27:52,916
device, color coded for easy

1039
00:27:52,916 --> 0:27:53,596
interpretation.

1040
00:27:54,526 --> 0:27:55,596
Here, you can see the thermal

1041
00:27:55,596 --> 0:27:57,186
state ramping up and then down

1042
00:27:57,236 --> 0:27:59,096
in reaction to the active

1043
00:27:59,096 --> 0:27:59,506
condition.

1044
00:27:59,506 --> 0:28:01,536
You can see in this scenario it

1045
00:27:59,506 --> 0:28:01,536
You can see in this scenario it

1046
00:28:01,536 --> 0:28:03,146
took around 10 seconds in each

1047
00:28:03,146 --> 0:28:03,486
direction.

1048
00:28:04,616 --> 0:28:06,796
The top track shows the active

1049
00:28:06,796 --> 0:28:08,146
thermal device condition, if

1050
00:28:08,146 --> 0:28:08,536
there is one.

1051
00:28:09,766 --> 0:28:11,816
To show you more about debugging

1052
00:28:11,816 --> 0:28:13,196
and optimizing with Xcode and

1053
00:28:13,196 --> 0:28:13,876
what tools you have at your

1054
00:28:13,876 --> 0:28:15,346
disposal, I'm going to call Jay

1055
00:28:15,346 --> 0:28:15,836
on stage.

1056
00:28:17,516 --> 0:28:25,036
[ Applause ]

1057
00:28:25,536 --> 0:28:26,626
&gt;&gt; Hi everyone.

1058
00:28:27,136 --> 0:28:29,006
I'm Jay. I'm part of the Energy

1059
00:28:29,006 --> 0:28:31,136
TechnologyTteam in Core OS, and

1060
00:28:31,136 --> 0:28:32,446
I'm here to show you how an app

1061
00:28:32,446 --> 0:28:33,906
behaves when the device is

1062
00:28:33,906 --> 0:28:35,336
thermally constrained and what

1063
00:28:35,336 --> 0:28:36,166
can you do about it.

1064
00:28:37,496 --> 0:28:38,706
For the purpose of the demo,

1065
00:28:38,706 --> 0:28:40,036
we're going to use a modified

1066
00:28:40,036 --> 0:28:41,926
version of the Fox 2 app that's

1067
00:28:41,926 --> 0:28:43,226
a publicly released sample for

1068
00:28:43,226 --> 0:28:44,606
SceneKit from a few years back.

1069
00:28:45,816 --> 0:28:46,646
Let's get started.

1070
00:28:47,056 --> 0:28:48,656
I have a device that's running

1071
00:28:48,656 --> 0:28:49,966
the app without any thermal

1072
00:28:49,966 --> 0:28:50,786
condition active.

1073
00:28:51,356 --> 0:28:52,236
Let's see how it loads.

1074
00:28:53,346 --> 0:28:55,106
This is how the app looks.

1075
00:28:56,346 --> 0:28:57,616
First, let's look at the bottom

1076
00:28:57,616 --> 0:28:58,706
left corner of the screen.

1077
00:29:00,026 --> 0:29:01,096
That's the FPS.

1078
00:29:01,356 --> 0:29:02,256
We can look the FPS is

1079
00:29:02,256 --> 0:29:04,056
consistently hitting more than

1080
00:29:04,056 --> 0:29:04,316
30.

1081
00:29:04,766 --> 0:29:08,056
Let's look at the details on the

1082
00:29:08,056 --> 0:29:08,366
app.

1083
00:29:09,296 --> 0:29:11,276
There's a nice vignetting around the app for

1084
00:29:11,276 --> 0:29:12,286
a cinematic effect.

1085
00:29:12,476 --> 0:29:15,106
Let's look at all the details

1086
00:29:15,106 --> 0:29:15,756
inside the app.

1087
00:29:15,756 --> 0:29:17,016
There's just tons of details.

1088
00:29:18,406 --> 0:29:19,466
If you look at the green

1089
00:29:19,466 --> 0:29:20,226
gem on the right side,

1090
00:29:20,706 --> 0:29:21,896
there's a light source on top of

1091
00:29:21,946 --> 0:29:23,166
it, and it's doing a great

1092
00:29:23,166 --> 0:29:23,626
shadow.

1093
00:29:24,906 --> 0:29:25,676
If you look at the moving

1094
00:29:25,676 --> 0:29:27,286
objects, they have light sources

1095
00:29:27,286 --> 0:29:28,776
coming out of them, and they're

1096
00:29:28,776 --> 0:29:30,036
doing great shadows on the fox

1097
00:29:30,036 --> 0:29:30,356
as well.

1098
00:29:30,996 --> 0:29:33,116
Let's look at the lava.

1099
00:29:33,236 --> 0:29:34,586
There's smoke coming out of it,

1100
00:29:34,586 --> 0:29:35,516
and the GPU is doing a

1101
00:29:35,516 --> 0:29:37,066
great job of blending in with

1102
00:29:37,066 --> 0:29:37,716
the background.

1103
00:29:38,556 --> 0:29:39,856
There's a lot of tiny fire

1104
00:29:39,856 --> 0:29:42,466
particles coming out as well.

1105
00:29:42,666 --> 0:29:44,416
This is a great user experience.

1106
00:29:45,276 --> 0:29:46,726
Users really like to use apps

1107
00:29:46,726 --> 0:29:47,206
like these.

1108
00:29:48,116 --> 0:29:49,116
If you're running performance

1109
00:29:49,146 --> 0:29:51,426
tests, they're going to be all

1110
00:29:52,536 --> 0:29:52,666
green.

1111
00:29:52,866 --> 0:29:54,176
Let's switch gears and see what

1112
00:29:54,176 --> 0:29:55,286
happens when you run a thermal

1113
00:29:55,286 --> 0:29:55,836
condition.

1114
00:29:56,406 --> 0:29:59,096
I have another device running

1115
00:29:59,096 --> 0:30:00,596
the same app but with a serious

1116
00:29:59,096 --> 0:30:00,596
the same app but with a serious

1117
00:30:00,646 --> 0:30:02,296
thermal condition active, and

1118
00:30:02,296 --> 0:30:03,016
let's see what happens.

1119
00:30:03,736 --> 0:30:06,156
I'm going to switch over to the

1120
00:30:06,156 --> 0:30:06,506
device.

1121
00:30:06,506 --> 0:30:12,396
Now, if you look at the bottom

1122
00:30:12,396 --> 0:30:14,636
left corner of the screen, the

1123
00:30:14,886 --> 0:30:16,436
FPS is down to 17.

1124
00:30:16,966 --> 0:30:18,506
We lost almost half of our

1125
00:30:18,506 --> 0:30:19,136
performance.

1126
00:30:19,696 --> 0:30:21,096
If you look at the moving

1127
00:30:21,096 --> 0:30:23,056
objects, there aren't as

1128
00:30:23,056 --> 0:30:23,546
buttery smooth as they were

1129
00:30:23,546 --> 0:30:24,016
before.

1130
00:30:24,336 --> 0:30:25,086
If you look at the moving

1131
00:30:25,086 --> 0:30:26,626
platforms or the moving rocks,

1132
00:30:27,166 --> 0:30:28,146
they aren't as smooth as they

1133
00:30:28,146 --> 0:30:28,636
were before.

1134
00:30:29,206 --> 0:30:32,316
What can we do to fix this?

1135
00:30:33,606 --> 0:30:34,876
We went ahead and we modified

1136
00:30:34,876 --> 0:30:36,076
the app to listen for changes in

1137
00:30:36,076 --> 0:30:36,706
thermal state.

1138
00:30:37,826 --> 0:30:38,696
Whenever the thermal state

1139
00:30:38,696 --> 0:30:40,236
changes, the app is going to

1140
00:30:40,236 --> 0:30:41,876
respond dynamically and reduce

1141
00:30:41,876 --> 0:30:43,106
the features it supports.

1142
00:30:43,566 --> 0:30:45,626
Let's see how that works.

1143
00:30:45,946 --> 0:30:48,156
I have a small debug UI on the

1144
00:30:48,156 --> 0:30:49,656
top that can switch it from

1145
00:30:49,656 --> 0:30:51,256
being static or dynamic, and I'm

1146
00:30:51,256 --> 0:30:52,536
going to switch it to be dynamic

1147
00:30:52,536 --> 0:30:52,756
now.

1148
00:30:59,356 --> 0:31:00,416
If you look at the bottom screen

1149
00:30:59,356 --> 0:31:00,416
If you look at the bottom screen

1150
00:31:00,416 --> 0:31:03,966
now, we're close to 20 FPS

1151
00:31:04,506 --> 0:31:04,636
again.

1152
00:31:04,816 --> 0:31:06,196
The scene looks similar, but we

1153
00:31:06,196 --> 0:31:07,526
got rid of some of the details.

1154
00:31:07,806 --> 0:31:08,936
We got rid of the smoke coming

1155
00:31:08,936 --> 0:31:09,706
out of the lava.

1156
00:31:10,256 --> 0:31:11,486
We reduced the fire particles a

1157
00:31:11,486 --> 0:31:13,906
bit, but you can see, the

1158
00:31:13,906 --> 0:31:15,666
response of the app is still

1159
00:31:15,666 --> 0:31:15,986
great.

1160
00:31:17,216 --> 0:31:18,136
That's what we're looking for.

1161
00:31:18,136 --> 0:31:23,176
Now, let's look at the code

1162
00:31:23,176 --> 0:31:24,646
changes we had to do to make

1163
00:31:24,646 --> 0:31:24,966
this happen.

1164
00:31:31,466 --> 0:31:33,046
When you're at nominal or fair,

1165
00:31:33,046 --> 0:31:34,086
we don't have to do anything.

1166
00:31:34,906 --> 0:31:35,786
You can enable all of the

1167
00:31:35,786 --> 0:31:36,556
features on the app.

1168
00:31:37,096 --> 0:31:37,436
We have HDR.

1169
00:31:37,436 --> 0:31:39,096
We have depth of field.

1170
00:31:39,286 --> 0:31:40,546
We have soft shadows, and we

1171
00:31:40,546 --> 0:31:41,546
also have the post processing

1172
00:31:41,546 --> 0:31:41,976
set to high.

1173
00:31:45,836 --> 0:31:47,936
As soon as you hit serious, we

1174
00:31:47,936 --> 0:31:48,836
start doing something.

1175
00:31:48,836 --> 0:31:51,146
We react by disabling HDR.

1176
00:31:51,936 --> 0:31:53,306
We also turn the shadows from

1177
00:31:53,306 --> 0:31:54,256
soft to blob.

1178
00:31:54,796 --> 0:31:56,156
We also set the post-processing

1179
00:31:56,156 --> 0:31:56,746
to medium.

1180
00:31:57,246 --> 0:32:00,356
When we are at critical, we go

1181
00:31:57,246 --> 0:32:00,356
When we are at critical, we go

1182
00:32:00,356 --> 0:32:01,026
even further.

1183
00:32:01,026 --> 0:32:02,236
Critical is a very high thermal

1184
00:32:02,236 --> 0:32:03,566
state, and we disable as many

1185
00:32:03,566 --> 0:32:04,426
features as we can.

1186
00:32:04,956 --> 0:32:05,756
We disabled HDR.

1187
00:32:05,846 --> 0:32:06,936
We disabled depth of field.

1188
00:32:06,936 --> 0:32:08,576
We disabled shadows, and we also

1189
00:32:08,576 --> 0:32:09,736
turned on post processing.

1190
00:32:10,946 --> 0:32:13,456
All of this is going to help to

1191
00:32:13,456 --> 0:32:14,876
keep the app responsive at all

1192
00:32:14,876 --> 0:32:15,416
times.

1193
00:32:15,936 --> 0:32:18,946
Now, let's look at some tools

1194
00:32:18,946 --> 0:32:20,466
that we can use for tuning for

1195
00:32:20,466 --> 0:32:21,006
thermals.

1196
00:32:23,876 --> 0:32:25,506
This is an instrument stack

1197
00:32:25,816 --> 0:32:28,196
taken on the same app with and

1198
00:32:28,196 --> 0:32:29,426
without any optimizations.

1199
00:32:29,966 --> 0:32:31,346
Both have been captured with a

1200
00:32:31,346 --> 0:32:32,286
serious thermal condition

1201
00:32:32,286 --> 0:32:32,546
active.

1202
00:32:32,606 --> 0:32:36,176
Let's look at the FPS track.

1203
00:32:36,176 --> 0:32:39,646
This is the time display was

1204
00:32:39,646 --> 0:32:40,596
shown in the same frame.

1205
00:32:41,366 --> 0:32:42,396
Let's decode it a bit.

1206
00:32:42,886 --> 0:32:43,916
When the display is showing one

1207
00:32:43,916 --> 0:32:45,436
frame, the GP is working on

1208
00:32:45,436 --> 0:32:47,136
rendering the next one, and the

1209
00:32:47,136 --> 0:32:48,556
CP is working on creating the

1210
00:32:48,556 --> 0:32:49,786
instructions for the one coming

1211
00:32:49,786 --> 0:32:52,276
even after that.

1212
00:32:52,276 --> 0:32:54,676
What happens is when, and

1213
00:32:55,226 --> 0:32:57,506
without any optimizations what

1214
00:32:57,506 --> 0:32:58,576
happens is that the GP is not

1215
00:32:58,576 --> 0:32:59,796
able to deliver frames in time,

1216
00:33:00,146 --> 0:33:01,226
and the display keeps showing

1217
00:33:01,226 --> 0:33:01,956
the same frame.

1218
00:33:02,816 --> 0:33:03,776
This is what a stutter looks

1219
00:33:03,776 --> 0:33:04,096
like.

1220
00:33:04,236 --> 0:33:05,146
This is when your app is

1221
00:33:05,146 --> 0:33:05,566
lagging.

1222
00:33:05,846 --> 0:33:06,576
If you notice, after the

1223
00:33:06,576 --> 0:33:08,756
optimizations, the frames are

1224
00:33:08,756 --> 0:33:09,926
spaced consistently.

1225
00:33:10,156 --> 0:33:11,516
Apart from using instruments,

1226
00:33:11,986 --> 0:33:13,186
you should also be using the

1227
00:33:13,186 --> 0:33:14,166
Xcode energy gauge.

1228
00:33:14,346 --> 0:33:15,916
You should focus your attention

1229
00:33:15,916 --> 0:33:17,086
to the average energy impact

1230
00:33:17,086 --> 0:33:17,856
your app has.

1231
00:33:18,766 --> 0:33:20,176
The higher the energy impact,

1232
00:33:20,286 --> 0:33:21,806
the higher the battery drain and

1233
00:33:21,806 --> 0:33:22,966
the higher the chances of your

1234
00:33:22,966 --> 0:33:23,866
app causing a rise in the

1235
00:33:23,866 --> 0:33:24,526
thermal state.

1236
00:33:24,966 --> 0:33:26,306
If you look at without

1237
00:33:26,306 --> 0:33:27,456
optimizations, we had a very

1238
00:33:27,456 --> 0:33:31,196
high energy impact, but with the

1239
00:33:31,196 --> 0:33:32,476
optimizations enabled, we were

1240
00:33:32,476 --> 0:33:34,126
able to lower the energy impact.

1241
00:33:34,286 --> 0:33:35,496
What that means is the app is

1242
00:33:35,496 --> 0:33:36,656
not going to contribute to a

1243
00:33:36,656 --> 0:33:38,036
rise in the thermal state when

1244
00:33:38,036 --> 0:33:39,746
the device is running the app.

1245
00:33:42,676 --> 0:33:44,186
Back to Alex and Ilya for a

1246
00:33:44,186 --> 0:33:44,576
recap.

1247
00:33:45,516 --> 0:33:49,500
[ Applause ]

1248
00:33:52,256 --> 0:33:53,566
&gt;&gt; Thank you, Jay.

1249
00:33:56,056 --> 0:33:57,806
If you want to learn more about

1250
00:33:57,806 --> 0:33:59,396
debugging in Xcode as well as

1251
00:33:59,396 --> 0:34:00,896
other things you can do to bring

1252
00:33:59,396 --> 0:34:00,896
other things you can do to bring

1253
00:34:00,896 --> 0:34:01,836
real-world scenarios to your

1254
00:34:01,836 --> 0:34:03,266
development process, such as

1255
00:34:03,266 --> 0:34:04,946
environment overrides, please

1256
00:34:04,946 --> 0:34:06,166
take a look at this session from

1257
00:34:06,166 --> 0:34:06,806
earlier this week.

1258
00:34:08,096 --> 0:34:10,656
&gt;&gt; So, we heard about real-world

1259
00:34:10,656 --> 0:34:11,936
conditions that people will be

1260
00:34:11,936 --> 0:34:13,985
using your apps under, like 3G

1261
00:34:13,985 --> 0:34:15,985
networks or elevated temperature

1262
00:34:15,985 --> 0:34:16,485
states.

1263
00:34:16,686 --> 0:34:17,795
And we heard about the

1264
00:34:17,795 --> 0:34:19,275
importance of providing the best

1265
00:34:19,275 --> 0:34:20,966
experience truly possible in

1266
00:34:20,966 --> 0:34:21,666
those states.

1267
00:34:22,686 --> 0:34:24,235
We heard about how a typical

1268
00:34:24,235 --> 0:34:25,815
development and testing workflow

1269
00:34:26,045 --> 0:34:27,775
might natural steer you towards

1270
00:34:27,775 --> 0:34:29,516
clean room in an attempt to

1271
00:34:29,516 --> 0:34:31,516
avoid flaky tests and variance.

1272
00:34:31,686 --> 0:34:33,616
And we heard about the new

1273
00:34:33,616 --> 0:34:35,536
device conditions in Xcode 11,

1274
00:34:35,896 --> 0:34:37,156
which lets to you quickly and

1275
00:34:37,156 --> 0:34:39,346
easily put your test devices in

1276
00:34:39,346 --> 0:34:40,716
adverse network or temperature

1277
00:34:40,716 --> 0:34:41,216
states.

1278
00:34:41,985 --> 0:34:43,396
That means no more waiting an

1279
00:34:43,396 --> 0:34:44,966
hour for devices to actually

1280
00:34:44,966 --> 0:34:46,196
warm up and no more throwing

1281
00:34:46,196 --> 0:34:47,186
away test results.

1282
00:34:47,565 --> 0:34:49,376
This is a great way to ensure

1283
00:34:49,376 --> 0:34:50,516
the code that you're designing

1284
00:34:50,686 --> 0:34:52,266
and all the great performance

1285
00:34:52,326 --> 0:34:53,565
and features that come with it

1286
00:34:53,775 --> 0:34:55,275
translate into progression for

1287
00:34:55,275 --> 0:34:56,996
your users in the real world.

1288
00:34:58,416 --> 0:35:00,666
So, to recap, do use the Test

1289
00:34:58,416 --> 0:35:00,666
So, to recap, do use the Test

1290
00:35:00,666 --> 0:35:02,096
Pyramid model for organizing

1291
00:35:02,096 --> 0:35:03,896
your automation test suites and

1292
00:35:03,896 --> 0:35:05,286
be prepared to triage your

1293
00:35:05,286 --> 0:35:06,906
results as you introduce

1294
00:35:06,956 --> 0:35:09,286
real-world conditions to your

1295
00:35:10,256 --> 0:35:10,666
testing.

1296
00:35:11,156 --> 0:35:13,246
Only skip truly unnecessary code

1297
00:35:13,246 --> 0:35:14,216
in your unit testing.

1298
00:35:14,746 --> 0:35:17,336
And there's a call to action

1299
00:35:17,336 --> 0:35:17,576
here.

1300
00:35:18,926 --> 0:35:19,856
Don't forget to take your

1301
00:35:19,856 --> 0:35:20,686
conditioners with you.

1302
00:35:21,316 --> 0:35:22,796
Do activate a device condition,

1303
00:35:22,986 --> 0:35:24,766
see how your app behaves, and

1304
00:35:24,766 --> 0:35:26,196
add test runs to find that

1305
00:35:26,196 --> 0:35:27,576
egregious behavior that you

1306
00:35:27,576 --> 0:35:28,256
might have missed.

1307
00:35:29,416 --> 0:35:31,056
We recommend, again, that you do

1308
00:35:31,056 --> 0:35:32,426
test with at least the 3G

1309
00:35:32,426 --> 0:35:34,066
network type of varying quality,

1310
00:35:34,446 --> 0:35:36,126
see how your app behaves in the

1311
00:35:36,126 --> 0:35:37,406
serious thermal state too.

1312
00:35:38,396 --> 0:35:39,816
We are really excited to see

1313
00:35:39,816 --> 0:35:41,076
what progressions you can make

1314
00:35:41,276 --> 0:35:42,466
with the device conditions we've

1315
00:35:42,466 --> 0:35:43,096
made available.

1316
00:35:43,756 --> 0:35:45,686
And we'd love to hear from you.

1317
00:35:46,126 --> 0:35:47,656
Contact developer support or

1318
00:35:47,656 --> 0:35:49,126
come to the Xcode labs right

1319
00:35:49,126 --> 0:35:49,966
after this session.

1320
00:35:50,356 --> 0:35:52,066
And for more information, see

1321
00:35:52,066 --> 0:35:52,876
our session link.

1322
00:35:53,526 --> 0:35:54,826
Thank you so much and we hope

1323
00:35:54,826 --> 0:35:55,966
you have a great WWDC.

1324
00:35:56,516 --> 0:36:03,500
[ Applause ]
