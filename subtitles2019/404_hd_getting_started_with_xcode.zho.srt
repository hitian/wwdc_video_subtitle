1
00:00:06,406 --> 0:00:10,777
（Xcode入门）

2
00:00:15,983 --> 0:00:18,285
欢迎参加Xcode入门演讲

3
00:00:18,886 --> 0:00:21,889
我是Prachi

4
00:00:22,689 --> 0:00:25,092
我将和同事Holly、Honza

5
00:00:25,492 --> 0:00:30,464
我要讲的是如何用Xcode

6
00:00:31,198 --> 0:00:34,168
Xcode是一个集成的开发环境

7
00:00:34,234 --> 0:00:36,670
用于Swift、

8
00:00:37,137 --> 0:00:39,473
和其它语言的软件开发

9
00:00:41,375 --> 0:00:42,309
在本场演讲中

10
00:00:42,576 --> 0:00:46,780
我们会讲如何用

11
00:00:47,247 --> 0:00:51,818
在Xcode的源编辑器中如何编写

12
00:00:52,853 --> 0:00:57,424
运行和调试可能存在于代码基中的

13
00:00:58,492 --> 0:01:02,863
使用程序包和框架扩展app的功能

14
00:00:58,492 --> 0:01:02,863
使用程序包和框架扩展app的功能

15
00:01:03,497 --> 0:01:06,967
最后讲如何测试并把app

16
00:01:08,302 --> 0:01:09,336
（创建新项目）

17
00:01:09,903 --> 0:01:11,839
让我们先讲…

18
00:01:12,673 --> 0:01:14,508
在Xcode中创建新项目

19
00:01:17,010 --> 0:01:19,813
在你面前的是Xcode窗口

20
00:01:20,180 --> 0:01:22,983
我要分成四个不同的区块讲

21
00:01:26,186 --> 0:01:28,322
中间的区块是源编辑器

22
00:01:28,388 --> 0:01:31,291
你可以浏览并编辑所有文件

23
00:01:31,859 --> 0:01:34,361
特别是当源编辑器打开时

24
00:01:34,761 --> 0:01:37,998
你可以用它导航并编辑所有源代码

25
00:01:38,899 --> 0:01:42,102
还有其它编辑器可用 如项目编辑器

26
00:01:42,636 --> 0:01:45,973
在这里 你可以在需要的时候

27
00:01:47,007 --> 0:01:48,475
在项目编辑器内

28
00:01:48,542 --> 0:01:50,511
你可以找到app的目标

29
00:01:50,978 --> 0:01:54,948
目标包含创建产品的说明

30
00:01:55,883 --> 0:01:59,486
这些产品比如包含库、框架、

31
00:02:00,454 --> 0:02:02,155
测试包和app自己

32
00:02:03,790 --> 0:02:06,793
Xcode最左边的窗口是导航器

33
00:02:06,860 --> 0:02:10,898
你可以快速、轻松地浏览

34
00:02:11,865 --> 0:02:14,301
你可以使用导航器选择条

35
00:02:14,935 --> 0:02:16,703
来选择一个导航器

36
00:02:16,770 --> 0:02:18,238
你有许多可用的工具

37
00:02:19,706 --> 0:02:22,776
因为我们已经选择好了项目导航器

38
00:02:23,510 --> 0:02:26,113
你可以用它来添加、删除群组

39
00:02:26,180 --> 0:02:30,050
或管理存在于项目中的所有文件

40
00:02:31,752 --> 0:02:34,021
在最右边的区块是检查器

41
00:02:34,888 --> 0:02:38,992
它提供关于编辑器的内容的情境数据

42
00:02:39,393 --> 0:02:41,295
因为我们已经打开了源编辑器

43
00:02:41,562 --> 0:02:45,365
你可以浏览所显示的文件的信息

44
00:02:45,432 --> 0:02:47,734
比如文件名称和文件路径

45
00:02:49,469 --> 0:02:51,572
顶部区块是一个工具栏

46
00:02:52,339 --> 0:02:55,042
你可以在这里找到运行按钮

47
00:02:55,475 --> 0:02:57,611
它会创建并运行产品

48
00:02:59,847 --> 0:03:03,717
停止按钮会终止

49
00:02:59,847 --> 0:03:03,717
停止按钮会终止

50
00:03:05,886 --> 0:03:09,790
接下来的两个下拉菜单是

51
00:03:10,324 --> 0:03:12,659
方案是一个可共享的文件

52
00:03:12,993 --> 0:03:17,397
包含创建、运行和测试app的规则

53
00:03:18,065 --> 0:03:20,601
运行目的地是在哪里运行app

54
00:03:21,401 --> 0:03:24,371
你可以选择在某设备的模拟器上

55
00:03:24,438 --> 0:03:27,174
如iPhone XR 我们用的是

56
00:03:27,841 --> 0:03:30,177
你可以在Mac上运行它

57
00:03:30,544 --> 0:03:34,748
或在已连接的设备上运行它

58
00:03:36,817 --> 0:03:37,985
最后三个按钮

59
00:03:38,318 --> 0:03:39,653
是显示和隐藏菜单

60
00:03:39,720 --> 0:03:42,823
它们会显示并隐藏Xcode窗口的

61
00:03:43,257 --> 0:03:44,424
这些菜单用起来非常便利

62
00:03:44,491 --> 0:03:46,860
比如 如果你正在开发代码

63
00:03:47,394 --> 0:03:48,962
并且你需要在编辑器中有更多空间

64
00:03:49,029 --> 0:03:53,267
你可以右击鼠标关闭检查器

65
00:03:53,333 --> 0:03:56,670
并在编辑器中获得额外的空间

66
00:03:59,740 --> 0:04:02,843
现在我想让你们注意一下

67
00:03:59,740 --> 0:04:02,843
现在我想让你们注意一下

68
00:04:03,110 --> 0:04:05,746
在这里你可以访问资源 比如

69
00:04:05,812 --> 0:04:09,550
开发者文档、

70
00:04:11,351 --> 0:04:14,788
Xcode帮助对于了解Xcode

71
00:04:15,155 --> 0:04:17,791
我们强烈推荐你们自己浏览

72
00:04:18,892 --> 0:04:19,892
（演示）

73
00:04:19,959 --> 0:04:22,629
现在我们讲了Xcode窗口的布局

74
00:04:23,096 --> 0:04:26,266
让我们继续并从零开始

75
00:04:27,968 --> 0:04:31,271
在你们面前的是

76
00:04:32,139 --> 0:04:33,607
在左边

77
00:04:33,674 --> 0:04:36,109
你可以选择创建一个新项目

78
00:04:36,743 --> 0:04:40,280
它会保存app的所有文件和资源

79
00:04:41,014 --> 0:04:43,450
你还可以克隆一个现有项目

80
00:04:43,517 --> 0:04:47,020
那可能会托管在源代码控制账户上

81
00:04:47,888 --> 0:04:51,859
最后你还可以选择打开

82
00:04:52,192 --> 0:04:54,828
它允许你体验你的Swift代码

83
00:04:54,895 --> 0:04:57,431
然后实时查看代码所产生的结果

84
00:04:58,632 --> 0:05:02,703
在右侧是我们最近正在修改的

85
00:04:58,632 --> 0:05:02,703
在右侧是我们最近正在修改的

86
00:05:02,769 --> 0:05:04,605
我们可以快速、轻松的看到它们

87
00:05:05,272 --> 0:05:08,308
我要继续并在Xcode中

88
00:05:09,743 --> 0:05:11,945
这将打开模板选择器

89
00:05:12,679 --> 0:05:15,015
模板是app的起点

90
00:05:15,782 --> 0:05:19,686
Xcode中有各种不同的可用模板

91
00:05:21,355 --> 0:05:22,823
为了选择合适的模板

92
00:05:22,890 --> 0:05:25,792
我们需要先确认我们要开发的平台

93
00:05:26,193 --> 0:05:27,828
我知道我要写一个iOS app

94
00:05:28,195 --> 0:05:30,497
所以我继续并点击iOS标签

95
00:05:31,131 --> 0:05:33,967
在这个标签内

96
00:05:34,034 --> 0:05:38,205
即app模板

97
00:05:38,572 --> 0:05:40,607
以及框架和库模板

98
00:05:42,309 --> 0:05:43,877
为了达到这场演讲的目的

99
00:05:43,944 --> 0:05:47,181
我要继续并选择app模板

100
00:05:47,247 --> 0:05:50,384
我要选择最简单的一个模板

101
00:05:51,018 --> 0:05:52,052
我要点击下一步

102
00:05:52,819 --> 0:05:56,423
我和我同事决定创建一个冥想app

103
00:05:57,191 --> 0:05:58,525
我们决定把它命名为Mind

104
00:05:58,825 --> 0:06:00,127
对于项目名称

105
00:05:58,825 --> 0:06:00,127
对于项目名称

106
00:06:00,594 --> 0:06:01,828
我要输入Mind

107
00:06:03,330 --> 0:06:05,632
对于组织名称 一般来说

108
00:06:05,699 --> 0:06:07,868
我会填写我的组织的名称

109
00:06:08,202 --> 0:06:10,037
但为了本场演讲的目的

110
00:06:10,404 --> 0:06:12,472
我要把我们的组织叫做

111
00:06:13,974 --> 0:06:17,778
然后组织标识符是

112
00:06:17,845 --> 0:06:19,112
组织名称的反向DNS

113
00:06:19,413 --> 0:06:22,182
在这个例子中

114
00:06:23,283 --> 0:06:26,019
最后捆绑标识符是自动填写的

115
00:06:26,520 --> 0:06:31,091
它是你的app

116
00:06:31,158 --> 0:06:34,061
它是产品名称

117
00:06:34,361 --> 0:06:36,029
和组织标识符的组合

118
00:06:36,763 --> 0:06:37,698
对于语言

119
00:06:37,764 --> 0:06:40,901
我要继续并保留Swift

120
00:06:41,969 --> 0:06:45,706
我要确保我包含了UI测试

121
00:06:45,772 --> 0:06:47,441
从而它会为UI测试创建一个目标

122
00:06:47,508 --> 0:06:50,511
因为作为开发人员 我们想形成

123
00:06:50,978 --> 0:06:52,679
时常测试代码的习惯

124
00:06:53,347 --> 0:06:56,016
我们稍后会演示如何添加单元测试

125
00:07:00,120 --> 0:07:01,822
在你点击完成后

126
00:07:02,189 --> 0:07:03,590
它将打开保存表单

127
00:07:03,991 --> 0:07:06,393
在这里我可以决定

128
00:07:06,860 --> 0:07:09,930
它默认保存到桌面 我觉得没问题

129
00:07:10,330 --> 0:07:11,965
所以我没做出什么修改

130
00:07:12,232 --> 0:07:14,067
但我想确认一件事

131
00:07:14,134 --> 0:07:17,905
即在项目的最开始源代码就可用

132
00:07:17,971 --> 0:07:22,576
从而我可以管理、追踪和备份

133
00:07:24,011 --> 0:07:25,445
我在开发过程中所做出的任何修改

134
00:07:25,512 --> 0:07:27,347
因此我要继续并检查

135
00:07:27,414 --> 0:07:31,018
Mac复选框中的

136
00:07:31,418 --> 0:07:32,319
我要点击创建

137
00:07:34,688 --> 0:07:36,256
现在我们已经设置好模板了

138
00:07:36,757 --> 0:07:40,093
我们可以向app中添加app图标

139
00:07:40,894 --> 0:07:44,464
app图标是无论何时

140
00:07:44,965 --> 0:07:46,600
所要选择的图片

141
00:07:47,534 --> 0:07:48,969
app图标是资产

142
00:07:49,436 --> 0:07:52,439
资产比如包括图片和颜色

143
00:07:53,707 --> 0:07:57,778
资产目录管理和组织资产

144
00:07:58,111 --> 0:08:02,082
我们可以通过导航器

145
00:07:58,111 --> 0:08:02,082
我们可以通过导航器

146
00:08:03,050 --> 0:08:05,185
因为我们想要app图标的目录

147
00:08:05,252 --> 0:08:07,688
让我们继续并点击

148
00:08:09,289 --> 0:08:12,292
从目录中你会注意到你的资产有

149
00:08:12,626 --> 0:08:18,265
通知、设置、聚焦以及app自己

150
00:08:19,066 --> 0:08:21,335
我桌面上有app图标了

151
00:08:21,401 --> 0:08:22,402
它已经可以使用了

152
00:08:23,270 --> 0:08:27,541
我有一台设备使用2X分辨率

153
00:08:27,975 --> 0:08:34,313
因此app图标——

154
00:08:34,381 --> 0:08:35,816
取决于你所使用的设备

155
00:08:36,216 --> 0:08:38,452
我要继续并把这个app图标

156
00:08:39,219 --> 0:08:43,357
拖入到针对iPhone app的

157
00:08:46,260 --> 0:08:49,463
现在我想测试我的app图标

158
00:08:50,230 --> 0:08:54,201
为此 我想在iPhone XR

159
00:08:54,601 --> 0:08:57,437
因此我要把运行目的地修改为

160
00:08:58,572 --> 0:08:59,973
然后点击运行按钮

161
00:09:04,945 --> 0:09:07,080
这将会启动模拟器

162
00:09:08,682 --> 0:09:12,286
你将注意到模拟器

163
00:09:12,352 --> 0:09:14,588
我知道这是因为它显示的是

164
00:09:14,888 --> 0:09:16,657
这是我的模板的设置

165
00:09:17,524 --> 0:09:19,660
所以我需要进入硬件菜单

166
00:09:19,993 --> 0:09:22,663
在主页屏幕上查看我的app图标

167
00:09:22,729 --> 0:09:23,964
我要进入硬件菜单…

168
00:09:25,399 --> 0:09:26,366
点击主页

169
00:09:28,001 --> 0:09:30,804
这将把我带到主屏幕上

170
00:09:31,171 --> 0:09:32,706
如果我点击app图标

171
00:09:33,407 --> 0:09:34,942
我的app会返回到前台中

172
00:09:35,342 --> 0:09:37,477
很棒 我知道我的app图标能用了

173
00:09:37,544 --> 0:09:40,547
我可以终止模拟器的执行

174
00:09:41,982 --> 0:09:44,117
现在我们的起点很好

175
00:09:44,184 --> 0:09:47,387
我们可以提交并保存我们的修改

176
00:09:47,721 --> 0:09:50,290
可以继续开发这个app…

177
00:09:50,557 --> 0:09:51,625
继续开发这个项目

178
00:09:52,492 --> 0:09:55,896
为此 我们首先需要添加一个

179
00:09:57,030 --> 0:09:59,466
我们可以通过Xcode首选项实现

180
00:09:59,533 --> 0:10:03,070
你可以打开Xcode菜单

181
00:09:59,533 --> 0:10:03,070
你可以打开Xcode菜单

182
00:10:04,137 --> 0:10:07,841
Xcode首选项可让你按需

183
00:10:08,609 --> 0:10:09,977
要添加一个账户

184
00:10:10,310 --> 0:10:12,679
我们要继续并继续账户首选项面板

185
00:10:13,113 --> 0:10:14,648
并点击加号按钮

186
00:10:15,349 --> 0:10:18,018
你可以看到

187
00:10:18,418 --> 0:10:19,486
有许多可用的账户

188
00:10:19,553 --> 0:10:21,488
因为我们只对

189
00:10:22,422 --> 0:10:24,291
我们要点击GitHub并点击继续

190
00:10:25,826 --> 0:10:28,395
现在它要求我填写账户认证信息

191
00:10:28,462 --> 0:10:33,634
我要继续并输入我的账户名称和密码

192
00:10:34,801 --> 0:10:37,437
它登录了我的账户 很棒

193
00:10:37,504 --> 0:10:39,740
我要继续并关闭Xcode首选项

194
00:10:43,210 --> 0:10:45,045
现在我需要进行提交

195
00:10:45,112 --> 0:10:47,447
为此 我要进入源代码控制菜单

196
00:10:47,514 --> 0:10:48,649
并点击提交

197
00:10:51,985 --> 0:10:53,554
这将打开提交表单

198
00:10:53,620 --> 0:10:56,857
在这里你可以核实你所做的全部修改

199
00:10:57,157 --> 0:10:58,525
并且你可以添加一条提交信息

200
00:10:58,592 --> 0:11:00,527
从而告诉你的同事你做了哪些修改

201
00:10:58,592 --> 0:11:00,527
从而告诉你的同事你做了哪些修改

202
00:11:00,594 --> 0:11:01,828
对于提交信息

203
00:11:01,895 --> 0:11:05,199
我要写此次提交

204
00:11:06,767 --> 0:11:09,436
然后我点击提交 那将关闭提交表单

205
00:11:10,470 --> 0:11:12,906
现在我们的情况是这样的…

206
00:11:13,707 --> 0:11:14,775
在我们的开发中

207
00:11:14,842 --> 0:11:18,011
我们先是用Xcode

208
00:11:19,012 --> 0:11:23,150
然后选择了一个

209
00:11:24,751 --> 0:11:27,721
我们给我们的资产目录中

210
00:11:28,322 --> 0:11:31,358
然后我们使用了

211
00:11:31,692 --> 0:11:33,026
提交了我们的修改

212
00:11:33,093 --> 0:11:35,896
从而我们的同事可以继续开发

213
00:11:37,464 --> 0:11:39,266
要了解更多关于源代码控制的信息

214
00:11:39,333 --> 0:11:40,834
我们推荐你们参看

215
00:11:40,901 --> 0:11:45,005
2018年的Xcode中的

216
00:11:46,340 --> 0:11:48,775
现在我们可以开始

217
00:11:48,842 --> 0:11:51,144
向我们的app中

218
00:11:51,578 --> 0:11:54,381
为此 我要邀请同事Holly上台

219
00:11:54,748 --> 0:11:55,649
谢谢

220
00:12:03,357 --> 0:12:04,358
谢谢Prachi

221
00:12:06,126 --> 0:12:09,796
我叫Holly 是Xcode

222
00:12:11,098 --> 0:12:13,467
欢迎使用源代码编辑器

223
00:12:14,434 --> 0:12:17,037
你可以在这里编写app的所有代码

224
00:12:18,572 --> 0:12:21,475
在源代码左侧有行编号

225
00:12:22,209 --> 0:12:24,545
代码右侧是迷你地图

226
00:12:24,845 --> 0:12:28,549
显示编辑器中的文件的视图缩影

227
00:12:30,250 --> 0:12:32,452
在源代码上方是跳转栏

228
00:12:33,887 --> 0:12:36,623
跳转栏还会帮助你在编辑器中

229
00:12:36,690 --> 0:12:37,991
通过弹出功能实现

230
00:12:40,227 --> 0:12:42,296
跳转栏可以让你自定义

231
00:12:42,362 --> 0:12:46,600
编辑器的布局 通过使用编辑器选项

232
00:12:48,735 --> 0:12:52,206
我们已经在创建我们的冥想app上

233
00:12:52,739 --> 0:12:54,107
让我们看一下我们的目标

234
00:12:55,676 --> 0:12:57,477
我们要创建一个冥想app

235
00:12:57,544 --> 0:13:01,715
可以让用户选择一个持续时间

236
00:12:57,544 --> 0:13:01,715
可以让用户选择一个持续时间

237
00:13:02,583 --> 0:13:03,917
当冥想结束后

238
00:13:04,218 --> 0:13:07,688
app将把用户进行冥想的分钟数

239
00:13:08,722 --> 0:13:11,692
我们需要添加大量Swift代码

240
00:13:12,292 --> 0:13:15,062
但我们不尝试读取我所写的代码

241
00:13:15,362 --> 0:13:18,131
我希望你注意一下

242
00:13:18,198 --> 0:13:19,766
用以辅助编辑过程

243
00:13:21,134 --> 0:13:22,836
如果你不熟悉Swift

244
00:13:23,437 --> 0:13:24,538
要了解Swift

245
00:13:24,605 --> 0:13:27,007
我推荐你浏览Swift指南

246
00:13:27,074 --> 0:13:28,609
它在线可用

247
00:13:28,976 --> 0:13:30,577
或你可以查看

248
00:13:30,978 --> 0:13:33,280
从而可以在你看Swift指南时

249
00:13:33,347 --> 0:13:34,615
体验Swift代码

250
00:13:36,517 --> 0:13:39,286
你可以在docs.swift.org上

251
00:13:40,554 --> 0:13:42,589
接下来让我们继续讲Xcode

252
00:13:49,096 --> 0:13:52,232
我向Prachi刚展示给我们的

253
00:13:52,299 --> 0:13:54,134
用于实施冥想的时间选择

254
00:13:54,201 --> 0:13:56,637
并为app绘制一个平静的背景

255
00:13:57,471 --> 0:14:01,675
我们仍需要实施一个UI

256
00:13:57,471 --> 0:14:01,675
我们仍需要实施一个UI

257
00:14:01,942 --> 0:14:03,644
从而开始冥想

258
00:14:04,678 --> 0:14:07,681
我们还需要实施一个

259
00:14:08,448 --> 0:14:10,517
为了让我们的app

260
00:14:10,584 --> 0:14:14,288
我实施了一个虚假HealthStore

261
00:14:14,588 --> 0:14:16,423
我们稍后再实施

262
00:14:17,758 --> 0:14:20,060
那么在这里 我们正在从项目模板中

263
00:14:20,127 --> 0:14:23,997
并且我添加了一个标题和背景

264
00:14:25,199 --> 0:14:27,201
在创建app的UI时

265
00:14:27,267 --> 0:14:30,737
Xcode可以在

266
00:14:31,004 --> 0:14:32,973
给你展示UI的预览

267
00:14:33,507 --> 0:14:36,944
要显示Canvas

268
00:14:37,311 --> 0:14:39,112
并点击编辑器和Canvas

269
00:14:41,148 --> 0:14:43,250
Canvas将在你编辑时

270
00:14:43,317 --> 0:14:47,554
因此它可以实时显示代码的运行结果

271
00:14:48,388 --> 0:14:49,556
现在在预览中

272
00:14:49,857 --> 0:14:52,826
我们可以看到欢迎标题和平静的背景

273
00:14:53,627 --> 0:14:56,463
接下来我想添加一个冥想视图

274
00:14:56,530 --> 0:14:58,699
因此我要创建一个新文件

275
00:15:01,034 --> 0:15:03,670
我要使用

276
00:15:06,073 --> 0:15:08,242
我要把它命名为

277
00:15:16,083 --> 0:15:19,386
现在预览给我显示了一个

278
00:15:19,853 --> 0:15:21,188
但我正在创建的视图

279
00:15:21,255 --> 0:15:23,891
只占据屏幕的一小部分

280
00:15:24,791 --> 0:15:26,793
我可以修改预览提供器

281
00:15:26,860 --> 0:15:29,730
把在Canvas上显示哪个视图

282
00:15:30,063 --> 0:15:34,001
修改为只显示我正在使用

283
00:15:35,536 --> 0:15:37,304
当我开始在修改器中输入时

284
00:15:37,571 --> 0:15:40,174
Xcode会打开代码完成窗口

285
00:15:40,908 --> 0:15:43,544
这会根据我所键入的文本

286
00:15:43,610 --> 0:15:47,748
给我显示一个推荐列表

287
00:15:48,982 --> 0:15:52,419
我想要的修改器就是

288
00:15:52,486 --> 0:15:54,855
我可以按回车以接受推荐

289
00:15:56,156 --> 0:15:58,725
现在Xcode在编辑器中插入了

290
00:15:58,792 --> 0:16:01,695
以及占位符 从而填写余下的代码

291
00:15:58,792 --> 0:16:01,695
以及占位符 从而填写余下的代码

292
00:16:02,229 --> 0:16:04,131
我现在要填写

293
00:16:06,400 --> 0:16:09,770
接下来我知道

294
00:16:09,837 --> 0:16:11,471
需要与MeditationController

295
00:16:11,805 --> 0:16:14,107
因此我要添加一个属性包装器

296
00:16:14,842 --> 0:16:17,144
包装

297
00:16:18,278 --> 0:16:19,313
然后我就重新预览

298
00:16:20,981 --> 0:16:24,852
如果你不确定源代码编辑器中

299
00:16:24,918 --> 0:16:27,221
你可以浏览那个API的文档

300
00:16:27,888 --> 0:16:30,357
按住“选项”并点击

301
00:16:30,424 --> 0:16:32,359
你要查看文档的API的标志即可

302
00:16:33,627 --> 0:16:35,629
这会打开快速帮助弹出框

303
00:16:35,896 --> 0:16:38,232
显示该标志的声明

304
00:16:38,298 --> 0:16:39,867
及其文档

305
00:16:41,235 --> 0:16:42,336
在我们继续之前

306
00:16:42,636 --> 0:16:45,772
我需要提供一个

307
00:16:46,139 --> 0:16:47,875
通过使用environmentObject

308
00:16:54,014 --> 0:16:56,450
现在让我们开始创建这个视图

309
00:16:57,317 --> 0:17:00,287
目前我们有

310
00:16:57,317 --> 0:17:00,287
目前我们有

311
00:17:00,654 --> 0:17:01,989
我想把它修改为

312
00:17:02,256 --> 0:17:04,458
显示冥想的剩余时间

313
00:17:04,758 --> 0:17:06,859
我可以从MeditationController中

314
00:17:09,162 --> 0:17:11,265
当我在编辑器中更新代码时

315
00:17:11,330 --> 0:17:13,567
预览也更新了 用以反映所做的修改

316
00:17:14,268 --> 0:17:16,435
现在文本看起来有点小

317
00:17:16,703 --> 0:17:18,906
我可以用检查器把它变大点

318
00:17:19,473 --> 0:17:23,277
我要从Xcode工具栏中的按钮

319
00:17:23,844 --> 0:17:25,512
我要点击属性图标

320
00:17:26,246 --> 0:17:28,815
然后点击我想检查的视图

321
00:17:29,316 --> 0:17:32,252
在这里我可以看到

322
00:17:32,319 --> 0:17:33,754
所有修改器的值

323
00:17:34,588 --> 0:17:36,790
目前字体是继承的

324
00:17:36,857 --> 0:17:40,194
我可以通过点击菜单并选择大标题

325
00:17:41,395 --> 0:17:42,329
当我这样做时

326
00:17:42,396 --> 0:17:46,333
预览会进行更新

327
00:17:46,400 --> 0:17:48,168
做出这个修改所需要的代码

328
00:17:53,774 --> 0:17:54,741
在文本上方

329
00:17:54,808 --> 0:17:59,279
我想显示一个按钮

330
00:18:00,247 --> 0:18:02,783
你可以使用库把现成的资源

331
00:18:02,850 --> 0:18:05,652
添加到你正在处理的文件中

332
00:18:05,953 --> 0:18:09,089
你可以通过点击工具栏中的加号按钮

333
00:18:10,557 --> 0:18:13,760
库有许多类不同的对象

334
00:18:13,827 --> 0:18:17,197
包括视图、修改器和代码片段

335
00:18:17,598 --> 0:18:19,299
让我们看一下代码片段类

336
00:18:20,501 --> 0:18:22,736
Xcode有内置代码片段

337
00:18:22,803 --> 0:18:25,405
你可以也可以添加自己的代码片段

338
00:18:25,472 --> 0:18:26,707
添加你经常写的代码碎片

339
00:18:27,474 --> 0:18:29,877
在这里你可以看到我所添加的

340
00:18:29,943 --> 0:18:32,646
可以让我们在这个演示中

341
00:18:33,514 --> 0:18:35,716
但现在我要切换到视图类中

342
00:18:36,016 --> 0:18:38,318
我可以键入我正在查找的视图

343
00:18:39,453 --> 0:18:42,089
我可以把这个按钮

344
00:18:42,155 --> 0:18:44,224
或直接拖到预览上

345
00:18:45,025 --> 0:18:47,227
现在Canvas告诉我这个按钮

346
00:18:47,294 --> 0:18:49,463
以及现有文本

347
00:18:49,796 --> 0:18:51,498
将被添加到一个新的垂直堆栈上

348
00:18:52,366 --> 0:18:53,600
当我释放按钮时

349
00:18:54,501 --> 0:18:57,271
源代码编辑器将添加必要的代码

350
00:18:57,337 --> 0:18:58,906
从而把按钮

351
00:18:58,972 --> 0:19:02,476
和文本嵌入一个垂直堆栈中

352
00:18:58,972 --> 0:19:02,476
和文本嵌入一个垂直堆栈中

353
00:19:03,277 --> 0:19:04,945
现在我可以填写占位符

354
00:19:05,512 --> 0:19:08,415
当我们轻触按钮时

355
00:19:08,949 --> 0:19:10,250
我不想显示文本…

356
00:19:11,485 --> 0:19:15,155
而是显示一个图标 显示播放或暂停

357
00:19:16,823 --> 0:19:18,158
最后

358
00:19:18,225 --> 0:19:22,496
我只想显示剩余时间

359
00:19:23,163 --> 0:19:25,465
否则我就显示一个选择器

360
00:19:25,532 --> 0:19:27,634
有预设的冥想持续时间

361
00:19:28,735 --> 0:19:31,138
Xcode非常了解

362
00:19:31,205 --> 0:19:32,739
我在编辑器中所写的代码的结构

363
00:19:33,173 --> 0:19:36,577
并且它可以使用结构化编辑

364
00:19:36,643 --> 0:19:38,011
帮助我转换和重构我的代码

365
00:19:38,946 --> 0:19:41,949
如果我按住Command

366
00:19:42,015 --> 0:19:43,116
比如文本

367
00:19:43,450 --> 0:19:45,853
Xcode将给我显示行动按钮

368
00:19:45,919 --> 0:19:48,589
它有许多我可以实施的不同的行动

369
00:19:48,655 --> 0:19:50,557
用于转换这种代码结构

370
00:19:51,258 --> 0:19:54,461
在菜单中还有跳转到目的地选项

371
00:19:54,528 --> 0:19:56,830
可以浏览文本标志的快速帮助

372
00:19:58,065 --> 0:20:01,068
因为我只想在特定条件下显示文本

373
00:19:58,065 --> 0:20:01,068
因为我只想在特定条件下显示文本

374
00:20:01,134 --> 0:20:02,903
我要点击条件式

375
00:20:04,371 --> 0:20:06,507
现在我可以再次填写占位符

376
00:20:07,441 --> 0:20:09,776
条件是如果冥想是活跃的

377
00:20:10,244 --> 0:20:13,447
现在文件下面还有另一个占位符

378
00:20:13,714 --> 0:20:15,015
我可以跳转到它

379
00:20:15,082 --> 0:20:17,417
使用控制-向前/键绑定

380
00:20:17,951 --> 0:20:20,387
它会帮助我非常迅速地填写缺失代码

381
00:20:20,454 --> 0:20:22,523
甚至不需要触摸鼠标

382
00:20:23,757 --> 0:20:26,860
这就是我想要的那个冥想视图

383
00:20:27,294 --> 0:20:29,930
因此我切换到ContentView

384
00:20:31,431 --> 0:20:34,501
我想把MeditationView

385
00:20:34,935 --> 0:20:36,136
与另一个占位器一起

386
00:20:38,005 --> 0:20:41,375
现在预览已经进行了更新

387
00:20:41,775 --> 0:20:45,646
我的播放按钮

388
00:20:46,480 --> 0:20:49,449
现在我已经完成了UI

389
00:20:50,284 --> 0:20:52,553
我要隐藏检查器

390
00:20:54,655 --> 0:20:56,089
在我们尝试运行app之前

391
00:20:56,356 --> 0:20:58,825
我想要修改

392
00:20:58,892 --> 0:21:00,761
使调试变得稍微简单点

393
00:20:58,892 --> 0:21:00,761
使调试变得稍微简单点

394
00:21:01,562 --> 0:21:03,964
在这里 我要使用迷你地图

395
00:21:04,031 --> 0:21:07,501
导航到冥想计时器状态的代码段

396
00:21:08,535 --> 0:21:12,172
迷你地图给我显示这个文件中

397
00:21:12,239 --> 0:21:13,240
所有标记的文本标签

398
00:21:13,807 --> 0:21:17,110
我可以通过点击迷你地图中的标签

399
00:21:18,712 --> 0:21:22,249
标记是一个Xcode

400
00:21:22,316 --> 0:21:26,787
用于在任意编辑器中显示代码段

401
00:21:27,421 --> 0:21:29,356
现在在这段代码中

402
00:21:29,423 --> 0:21:32,492
我有一些计算的属性 用于表明状态

403
00:21:33,260 --> 0:21:35,529
为了方便地检查状态

404
00:21:35,596 --> 0:21:39,099
我要添加一个已存储的属性

405
00:21:39,800 --> 0:21:43,504
它有其中一个可能的值

406
00:21:44,037 --> 0:21:45,572
并且我把它默认为已停止

407
00:21:46,840 --> 0:21:49,443
现在当我们更新

408
00:21:49,743 --> 0:21:53,881
我们想使用开关语句

409
00:21:54,448 --> 0:21:55,682
查看计时器状态并更新控制器状态

410
00:21:58,652 --> 0:22:02,523
计时器可能的值是无、已暂停

411
00:21:58,652 --> 0:22:02,523
计时器可能的值是无、已暂停

412
00:22:02,990 --> 0:22:06,193
在Swift中

413
00:22:06,727 --> 0:22:07,628
如果不面面俱到

414
00:22:07,694 --> 0:22:10,731
我会得到一个编译程序报错

415
00:22:11,098 --> 0:22:13,934
请注意我已经在编辑器中得到了一个

416
00:22:14,001 --> 0:22:15,435
甚至没有生成我的代码

417
00:22:15,969 --> 0:22:18,839
这些叫做实时问题 在你输入时发生

418
00:22:19,973 --> 0:22:22,676
那么如果我点击实时问题

419
00:22:22,743 --> 0:22:24,912
问我是否想添加缺失的情况

420
00:22:24,978 --> 0:22:26,647
我想 因此我要继续并点击它

421
00:22:33,153 --> 0:22:35,122
现在当计时器为无时

422
00:22:35,455 --> 0:22:37,124
我希望状态是已停止

423
00:22:38,258 --> 0:22:40,861
现在我不想对可以被包装起来的

424
00:22:41,128 --> 0:22:43,463
都使用同一个设置

425
00:22:43,764 --> 0:22:46,900
我想明确每一个值的情况

426
00:22:47,267 --> 0:22:50,671
因此我要把这个下划线改为第一个值

427
00:22:51,405 --> 0:22:52,840
现在我已经完成了

428
00:22:52,906 --> 0:22:55,242
这个开关语句已经不再面面俱到了

429
00:22:55,642 --> 0:22:57,811
因此我得到了另一个实时问题

430
00:22:58,245 --> 0:23:01,081
有另一个修复它

431
00:22:58,245 --> 0:23:01,081
有另一个修复它

432
00:23:02,149 --> 0:23:03,617
我不需要…

433
00:23:04,318 --> 0:23:07,120
这个关联值 因此我要继续并移除它

434
00:23:09,122 --> 0:23:12,492
你可能已经注意到这两个名称

435
00:23:12,559 --> 0:23:16,363
与这个状态枚举的剩余的情况相同

436
00:23:16,697 --> 0:23:20,901
我可以使用多光标编辑

437
00:23:21,702 --> 0:23:23,537
目前我有一个插入点

438
00:23:23,837 --> 0:23:27,007
我可以添加另一个插入点

439
00:23:27,374 --> 0:23:30,310
并点击我要放置下一个插入点的位置

440
00:23:31,745 --> 0:23:33,914
现在我有多个插入点

441
00:23:34,214 --> 0:23:39,520
我可以实施任意命令

442
00:23:40,187 --> 0:23:42,322
要了解所有可用的命令

443
00:23:42,789 --> 0:23:44,658
你可以进入Xcode首选项

444
00:23:45,492 --> 0:23:46,927
选择按键绑定标签

445
00:23:47,494 --> 0:23:50,764
在这里你可以看到所有命令

446
00:23:50,831 --> 0:23:53,233
你甚至可以把按键绑定修改为

447
00:23:54,501 --> 0:23:55,636
我现在可以给你展示其中一些

448
00:23:56,403 --> 0:23:57,771
我可以选择词比如返回、

449
00:23:58,438 --> 0:24:03,110
复制、跳转到下一个占位符、

450
00:23:58,438 --> 0:24:03,110
复制、跳转到下一个占位符、

451
00:24:04,444 --> 0:24:05,512
现在我们已经完成了

452
00:24:11,118 --> 0:24:13,287
这是要实施我们的app的基本功能

453
00:24:13,353 --> 0:24:14,955
所需要的全部代码

454
00:24:15,622 --> 0:24:17,558
在我们运行和调试之前

455
00:24:17,858 --> 0:24:19,893
让我们回顾一下

456
00:24:20,627 --> 0:24:21,828
（演示）

457
00:24:22,229 --> 0:24:23,697
（总结）

458
00:24:24,831 --> 0:24:27,401
我们了解了Xcode的

459
00:24:27,467 --> 0:24:29,469
帮助我们预览app的UI

460
00:24:29,837 --> 0:24:32,406
以及如何帮助我们编辑视图的外观

461
00:24:33,740 --> 0:24:37,311
我们了解了代码完成

462
00:24:38,512 --> 0:24:41,415
然后我们了解了

463
00:24:41,481 --> 0:24:43,517
帮助我们自动转换代码结构

464
00:24:43,584 --> 0:24:45,686
并给代码结构添加功能

465
00:24:46,887 --> 0:24:49,823
最后我们了解了实时问题和修复它

466
00:24:49,890 --> 0:24:53,360
如何帮助我们修复编译程序报错

467
00:24:55,128 --> 0:24:58,165
要获取更多关于

468
00:24:58,565 --> 0:25:00,667
或SwiftUI框架的信息…

469
00:24:58,565 --> 0:25:00,667
或SwiftUI框架的信息…

470
00:25:00,734 --> 0:25:02,669
SwiftUI框架

471
00:25:02,736 --> 0:25:04,438
请参看Swift的新功能

472
00:25:04,505 --> 0:25:07,040
以及SwiftUI入门演讲视频

473
00:25:07,975 --> 0:25:09,943
现在我们已经准备运行app了

474
00:25:10,544 --> 0:25:11,879
我要把舞台交给Honza

475
00:25:11,945 --> 0:25:13,146
她会带我们运行并调试app

476
00:25:13,480 --> 0:25:14,581
（运行和调试）

477
00:25:19,987 --> 0:25:20,888
谢谢Holly

478
00:25:21,355 --> 0:25:23,824
大家好 我是Honza

479
00:25:24,892 --> 0:25:26,960
现在Prachi创建了项目

480
00:25:27,227 --> 0:25:28,862
Holly添加了一些代码

481
00:25:29,296 --> 0:25:32,900
接下来我们要讲

482
00:25:33,300 --> 0:25:35,235
创建、运行和调试app

483
00:25:36,069 --> 0:25:38,906
然后我们要添加一个

484
00:25:38,972 --> 0:25:40,908
那可以让我们向app中添加新功能

485
00:25:41,508 --> 0:25:42,576
让我们开始吧

486
00:25:50,350 --> 0:25:53,487
Prachi已经讲了如何创建

487
00:25:53,887 --> 0:25:55,789
并使用工具栏中的

488
00:25:56,223 --> 0:25:58,725
但我们还可以从产品菜单中实现

489
00:25:58,792 --> 0:26:03,363
我们可以选择运行、测试、存档、

490
00:25:58,792 --> 0:26:03,363
我们可以选择运行、测试、存档、

491
00:26:03,964 --> 0:26:07,000
那么目前我要在模拟器中运行app

492
00:26:09,803 --> 0:26:11,038
这个app的创建、安装和启动

493
00:26:11,405 --> 0:26:13,907
是在iPhone模拟器上

494
00:26:14,241 --> 0:26:17,077
并且模拟器app会自动进入前台

495
00:26:18,178 --> 0:26:20,480
这就是我们的app现在的样子

496
00:26:21,682 --> 0:26:23,283
因为我们进展太快了

497
00:26:23,350 --> 0:26:26,253
让我们用我们的新app

498
00:26:26,753 --> 0:26:29,456
我所要做的就是点击播放按钮

499
00:26:29,523 --> 0:26:31,625
并开始一个新的三分钟冥想

500
00:26:34,294 --> 0:26:35,829
那么冥想开始了 没有任何问题

501
00:26:36,363 --> 0:26:39,466
但播放图标却没有发生改变

502
00:26:40,200 --> 0:26:41,502
就像在音乐app中一样

503
00:26:41,835 --> 0:26:45,572
我们希望当冥想暂停时显示播放图标

504
00:26:45,873 --> 0:26:48,509
当冥想正在运行时显示暂停图标

505
00:26:49,243 --> 0:26:51,345
因此我们要在Xcode中使用

506
00:26:51,411 --> 0:26:53,580
帮助我们发现并修复这个错误

507
00:26:55,649 --> 0:26:58,285
要运行附加有调试器的app

508
00:26:58,352 --> 0:26:59,753
我不需要做任何特别的操作

509
00:27:00,254 --> 0:27:02,623
因为当我刚运行app时

510
00:27:02,890 --> 0:27:04,892
Xcode自动附加了调试器

511
00:27:07,895 --> 0:27:10,397
因此我要让app

512
00:27:10,731 --> 0:27:11,798
并返回到Xcode中

513
00:27:12,566 --> 0:27:14,735
我们要开始查看

514
00:27:15,335 --> 0:27:18,305
我们通过使用跳转栏进入

515
00:27:20,440 --> 0:27:22,676
MeditationView

516
00:27:22,743 --> 0:27:25,412
播放图标和剩余的时间标签

517
00:27:25,913 --> 0:27:28,015
在这里看起来我们得到了

518
00:27:28,682 --> 0:27:30,117
来自

519
00:27:30,517 --> 0:27:32,019
displayedIcon

520
00:27:32,953 --> 0:27:34,354
因此要进入

521
00:27:34,421 --> 0:27:36,924
我要命令点击

522
00:27:37,191 --> 0:27:38,659
并选择跳转到目的地

523
00:27:39,860 --> 0:27:42,196
在这里我们在

524
00:27:43,096 --> 0:27:44,565
我要向displayedIcon

525
00:27:45,065 --> 0:27:48,402
添加一个断点

526
00:27:48,836 --> 0:27:50,437
通过点击行编号实现

527
00:27:52,372 --> 0:27:55,042
因为app仍在模拟器中运行

528
00:27:55,108 --> 0:27:56,777
并且计时器仍在计时

529
00:27:57,144 --> 0:28:00,814
立即就击中了断点

530
00:27:57,144 --> 0:28:00,814
立即就击中了断点

531
00:28:02,549 --> 0:28:05,786
断点通常会当击中某行特定的代码时

532
00:28:05,853 --> 0:28:07,988
暂停app的执行

533
00:28:09,456 --> 0:28:11,358
因此现在在Xcode窗口底部

534
00:28:11,692 --> 0:28:12,860
让我把它变大点

535
00:28:13,327 --> 0:28:14,761
我们有调试区

536
00:28:14,828 --> 0:28:16,730
调试区顶部是调试栏

537
00:28:16,797 --> 0:28:19,032
调试栏中有按钮可以控制调试器

538
00:28:19,366 --> 0:28:22,169
并激活功能 比如浏览调试器

539
00:28:22,236 --> 0:28:24,071
内存图形调试器等等

540
00:28:25,072 --> 0:28:27,508
在它下边 左侧是变量视图

541
00:28:27,841 --> 0:28:29,309
右侧是控制台

542
00:28:30,511 --> 0:28:33,213
最后在Xcode窗口的左侧

543
00:28:33,514 --> 0:28:34,882
我们有调试导航器

544
00:28:35,215 --> 0:28:36,783
其中包含有关我们正在运行的

545
00:28:36,850 --> 0:28:39,453
比如它做了多少工作

546
00:28:40,020 --> 0:28:41,154
在它下边

547
00:28:41,221 --> 0:28:42,289
我们有调用栈

548
00:28:42,689 --> 0:28:45,893
调用栈是关于

549
00:28:47,027 --> 0:28:49,663
当我在调用栈中

550
00:28:50,197 --> 0:28:52,399
Xcode将在这里

551
00:28:52,466 --> 0:28:54,801
调试器甚至是变量

552
00:28:56,236 --> 0:28:59,473
我要切换回原始框架

553
00:28:59,873 --> 0:29:01,575
我们要返回去尝试修复

554
00:28:59,873 --> 0:29:01,575
我们要返回去尝试修复

555
00:29:01,642 --> 0:29:05,112
当我们开始冥想之后

556
00:29:06,980 --> 0:29:09,683
让我们看一下现在要使用哪个图标

557
00:29:10,851 --> 0:29:12,786
我可以通过选择变量

558
00:29:13,487 --> 0:29:16,623
并点击底部的快速查看按钮实现

559
00:29:17,558 --> 0:29:19,259
在这里我们得到了一个预览

560
00:29:21,728 --> 0:29:25,365
因为我们所预览的变量是个图片

561
00:29:25,432 --> 0:29:29,002
我们实际上得到了一个渲染版

562
00:29:30,304 --> 0:29:35,008
快速查看预览支持图片、颜色、视图

563
00:29:35,075 --> 0:29:37,411
以及实施了调试快速查看对象方法的

564
00:29:39,413 --> 0:29:43,050
因此在预览中我们可以看到

565
00:29:43,417 --> 0:29:45,152
即使冥想已经正在运行中了

566
00:29:46,186 --> 0:29:48,622
因此我想是否因为

567
00:29:48,689 --> 0:29:49,590
处于错误的状态

568
00:29:50,457 --> 0:29:51,658
为了找到答案

569
00:29:52,059 --> 0:29:55,395
我要扩展引用MeditationController的

570
00:29:55,462 --> 0:29:58,232
我们在这里进行调试并显示属性

571
00:29:58,599 --> 0:30:01,134
其中一个是状态属性

572
00:29:58,599 --> 0:30:01,134
其中一个是状态属性

573
00:30:01,201 --> 0:30:03,270
它告诉我们

574
00:30:03,337 --> 0:30:04,771
是正在运行状态

575
00:30:06,073 --> 0:30:07,541
这正是我所期待的

576
00:30:07,808 --> 0:30:10,777
那意味着所显示的图标

577
00:30:10,844 --> 0:30:14,281
在选择要显示的图标时

578
00:30:14,581 --> 0:30:16,083
并没有考虑到

579
00:30:16,950 --> 0:30:18,051
因此为了修复这个问题

580
00:30:18,519 --> 0:30:21,488
我要检查MeditationController

581
00:30:22,322 --> 0:30:25,792
如果是 我们将显示…

582
00:30:28,462 --> 0:30:30,330
否则我们就显示播放图标

583
00:30:31,198 --> 0:30:32,933
现在因为我不再需要断点了

584
00:30:33,000 --> 0:30:37,004
我要移除它

585
00:30:37,771 --> 0:30:39,773
因为我们刚刚修改了代码

586
00:30:40,407 --> 0:30:43,777
我要停止app并在此点击运行按钮

587
00:30:44,311 --> 0:30:45,846
这会重新编译项目

588
00:30:45,913 --> 0:30:48,715
在模拟器中

589
00:30:49,550 --> 0:30:52,019
这一次 当我开始新的冥想时

590
00:30:52,586 --> 0:30:54,855
我们可以看到图标从播放改成了暂停

591
00:30:55,222 --> 0:30:56,557
错误已经修复了 太棒了

592
00:31:03,397 --> 0:31:04,831
我们要暂时停止app

593
00:31:06,099 --> 0:31:08,001
并隐藏调试区

594
00:31:09,903 --> 0:31:12,272
我们已经在模拟器中运行了app

595
00:31:12,339 --> 0:31:14,741
这是一种快速迭代

596
00:31:15,375 --> 0:31:18,946
但我还想在真实设备上

597
00:31:19,346 --> 0:31:21,381
这样我就可以随时随地开始冥想了

598
00:31:22,583 --> 0:31:25,419
首先 要运行…

599
00:31:25,485 --> 0:31:27,955
要在已连接的设备上

600
00:31:28,322 --> 0:31:30,858
我们需要用Apple ID

601
00:31:31,859 --> 0:31:34,194
我们首先要进入Xcode首选项

602
00:31:35,896 --> 0:31:38,232
选择一个账户 然后添加新账户

603
00:31:39,266 --> 0:31:40,567
我们选择Apple ID

604
00:31:41,702 --> 0:31:43,370
输入用户名和密码

605
00:31:53,180 --> 0:31:55,382
然后我们就用Apple ID

606
00:31:55,916 --> 0:31:58,185
接下来关闭窗口

607
00:31:58,252 --> 0:32:01,522
进入项目导航器并选择项目

608
00:31:58,252 --> 0:32:01,522
进入项目导航器并选择项目

609
00:32:02,856 --> 0:32:05,025
在这里我们要选择app目标

610
00:32:05,092 --> 0:32:07,561
并进入签名&amp;权限标签

611
00:32:08,595 --> 0:32:11,131
在这里我们可以管理代码签名和权限

612
00:32:12,099 --> 0:32:15,602
权限可以让我们声明我们的app

613
00:32:16,170 --> 0:32:19,339
在我们的例子中

614
00:32:19,706 --> 0:32:23,610
从而能写入用户在我们的app中

615
00:32:23,677 --> 0:32:26,480
但同时也读取用户在其它app上

616
00:32:26,813 --> 0:32:29,950
从而我们可以给他们显示

617
00:32:31,185 --> 0:32:32,553
因此我们要添加一个新权限

618
00:32:34,488 --> 0:32:37,324
搜索健康

619
00:32:38,992 --> 0:32:42,362
接下来我把这个iPhone

620
00:32:43,630 --> 0:32:46,266
我要把iPhone作为运行目的地

621
00:32:48,068 --> 0:32:48,936
我要点击运行

622
00:32:49,870 --> 0:32:52,039
现在已经针对该设备进行了

623
00:32:52,539 --> 0:32:53,941
并在该设备上进行了安装和启动

624
00:32:54,007 --> 0:32:56,143
从而你可以看到屏幕上正在进行什么

625
00:32:56,610 --> 0:33:00,647
我们要用QuickTime播放器

626
00:32:56,610 --> 0:33:00,647
我们要用QuickTime播放器

627
00:33:01,048 --> 0:33:02,149
传回Mac

628
00:33:04,151 --> 0:33:06,987
我们现在正在真正的iPhone上

629
00:33:07,054 --> 0:33:10,190
我可以拔下这台手机

630
00:33:11,024 --> 0:33:11,925
现在…

631
00:33:12,526 --> 0:33:13,493
让我停止app…

632
00:33:14,695 --> 0:33:17,197
把目的地切换回模拟器

633
00:33:18,398 --> 0:33:20,501
当你想查找关于设备的更多信息时

634
00:33:20,934 --> 0:33:23,971
你可以进入窗口、设备、模拟器

635
00:33:24,605 --> 0:33:26,173
我们可以在模拟器中看到名称、

636
00:33:26,240 --> 0:33:28,809
类型以及设备的OS版本

637
00:33:29,176 --> 0:33:32,713
并且我们还可以看到已安装的app

638
00:33:33,413 --> 0:33:35,516
但同时我们其实可以配置设备

639
00:33:35,849 --> 0:33:38,285
通过Wi-Fi连接Mac

640
00:33:38,785 --> 0:33:41,655
那样我就不需要用USB线

641
00:33:41,722 --> 0:33:44,992
但我仍然可以在手机上创建、

642
00:33:45,058 --> 0:33:46,360
运行并调试app

643
00:33:53,233 --> 0:33:57,204
现在我们已经成功地在模拟器上

644
00:33:57,504 --> 0:34:00,474
和设备上运行了我们的app

645
00:33:57,504 --> 0:34:00,474
和设备上运行了我们的app

646
00:34:00,541 --> 0:34:01,675
并且我们甚至还使用调试器

647
00:34:01,742 --> 0:34:04,077
让我们讲一下如何向app中

648
00:34:05,646 --> 0:34:08,081
我希望我们的app可以显示

649
00:34:08,415 --> 0:34:09,850
关于用户的冥想的统计信息

650
00:34:09,917 --> 0:34:13,954
比如他们进行了多少次冥想、

651
00:34:14,755 --> 0:34:16,023
但计算统计信息

652
00:34:16,089 --> 0:34:18,559
并不只是我们的冥想app的一个

653
00:34:19,059 --> 0:34:22,362
我们创建了一个Swift程序包

654
00:34:22,429 --> 0:34:23,764
它可以帮助我们解决那个问题

655
00:34:25,532 --> 0:34:29,402
从根本上说

656
00:34:29,469 --> 0:34:33,407
其中包含你可以用于创建产品的

657
00:34:33,473 --> 0:34:34,808
比如我们的QuickStats库

658
00:34:36,376 --> 0:34:37,911
要把项目添加到我们的程序包中

659
00:34:38,612 --> 0:34:42,748
我要进入项目编辑器

660
00:34:43,483 --> 0:34:45,819
在这里我要向我们的项目中

661
00:34:46,620 --> 0:34:49,889
因为Prachi用我们的账户

662
00:34:49,956 --> 0:34:53,927
我们可以看到我们的账户所收藏的

663
00:34:54,761 --> 0:34:57,030
QuickStats就位于顶部

664
00:34:58,298 --> 0:34:59,199
点击下一步

665
00:34:59,566 --> 0:35:01,401
我们要使用版本1 看起来不错

666
00:34:59,566 --> 0:35:01,401
我们要使用版本1 看起来不错

667
00:35:05,305 --> 0:35:08,141
我们要在这里确认

668
00:35:08,208 --> 0:35:09,576
我们的app已链接

669
00:35:10,844 --> 0:35:11,912
我要点击完成

670
00:35:12,246 --> 0:35:15,983
现在Xcode在

671
00:35:16,783 --> 0:35:18,385
在项目导航器中

672
00:35:18,452 --> 0:35:20,521
有一个Swift程序包

673
00:35:20,854 --> 0:35:23,657
我可以浏览程序包的资源

674
00:35:23,957 --> 0:35:27,561
这样可以很好地理解

675
00:35:29,696 --> 0:35:31,398
现在 在我把舞台交还给Holly

676
00:35:31,465 --> 0:35:34,968
把程序包整合到我们的项目中去之前

677
00:35:38,438 --> 0:35:39,706
（演示）

678
00:35:42,242 --> 0:35:46,580
我们了解了如何在模拟器上

679
00:35:47,281 --> 0:35:50,184
我们还在实际设备上运行了

680
00:35:51,185 --> 0:35:53,921
然后我们向项目中添加了

681
00:35:53,987 --> 0:35:57,191
那可以让我们向app中添加功能

682
00:35:58,592 --> 0:35:59,993
（总结）

683
00:36:01,361 --> 0:36:04,531
这些是与这个演示中所讨论的话题

684
00:36:04,932 --> 0:36:06,533
接下来欢迎Holly返回舞台

685
00:36:06,900 --> 0:36:07,835
谢谢

686
00:36:10,604 --> 0:36:12,406
（使用程序包和框架）

687
00:36:14,708 --> 0:36:15,676
谢谢Honza

688
00:36:17,845 --> 0:36:18,912
在这个演示中

689
00:36:19,179 --> 0:36:22,583
我们将了解如何在我们的项目中使用

690
00:36:23,283 --> 0:36:26,987
然后我们将了解如何重构我们的项目

691
00:36:27,054 --> 0:36:29,323
通过把模型代码移动到框架中实现

692
00:36:30,791 --> 0:36:32,292
先让我们返回到Xcode中

693
00:36:42,169 --> 0:36:44,371
现在我们已经添加了

694
00:36:44,805 --> 0:36:49,109
我们可以向我们的代码中导入程序包

695
00:36:49,810 --> 0:36:50,944
Honza刚才提到了

696
00:36:51,011 --> 0:36:54,982
我们想在ContentView中

697
00:36:55,249 --> 0:36:56,250
与他们的冥想会话相关的统计信息

698
00:36:57,251 --> 0:37:00,354
我们要使用快速打开跳转回

699
00:36:57,251 --> 0:37:00,354
我们要使用快速打开跳转回

700
00:37:00,687 --> 0:37:02,222
你可以在文件菜单下找到快速打开

701
00:37:04,324 --> 0:37:05,526
在快速打开中

702
00:37:05,592 --> 0:37:10,097
我可以输入任意类型名称、

703
00:37:10,898 --> 0:37:13,166
我要输入Contentview

704
00:37:14,434 --> 0:37:17,237
我要做的第一件事就是导入

705
00:37:20,107 --> 0:37:23,443
现在我们已经准备好开始使用

706
00:37:24,678 --> 0:37:27,181
我要在从一个代码片段中

707
00:37:27,481 --> 0:37:31,285
那会实施一个

708
00:37:31,351 --> 0:37:33,921
它接受一组冥想会话

709
00:37:34,354 --> 0:37:39,159
并用QuickStats API

710
00:37:40,594 --> 0:37:43,597
因为我有访问

711
00:37:43,864 --> 0:37:46,366
我可以跳转到源代码实施

712
00:37:46,433 --> 0:37:48,101
来了解它是如何运作的

713
00:37:48,702 --> 0:37:52,606
那么如果我命令点击

714
00:37:52,673 --> 0:37:54,474
并选择跳转到目的地

715
00:37:55,042 --> 0:37:58,378
我现在正在查看这个方法的实际实施

716
00:37:59,379 --> 0:38:02,816
我可以看到

717
00:37:59,379 --> 0:38:02,816
我可以看到

718
00:38:02,883 --> 0:38:05,919
通过点击导航、

719
00:38:06,587 --> 0:38:09,022
现在我们可以看到

720
00:38:09,957 --> 0:38:12,226
我可以导航回之前的文件

721
00:38:12,292 --> 0:38:15,095
通过使用调专栏中的

722
00:38:16,763 --> 0:38:20,000
现在让我们向ContentView中

723
00:38:20,701 --> 0:38:23,103
但在此之前我想显示Canvas

724
00:38:29,610 --> 0:38:31,612
我要放大

725
00:38:33,247 --> 0:38:35,816
我要在占位器下添加StatisticsView

726
00:38:36,817 --> 0:38:38,752
它接受一组会话

727
00:38:38,819 --> 0:38:40,921
我们可以从MeditationController中

728
00:38:42,890 --> 0:38:46,059
现在我们可以看到StatisticsView

729
00:38:46,960 --> 0:38:50,163
现在我已经完成了UI

730
00:38:52,499 --> 0:38:55,836
现在我们想开始编写模型的单元测试

731
00:38:56,203 --> 0:38:57,437
为了让它更简单点

732
00:38:57,771 --> 0:39:01,475
我们要把模型代码移到一个

733
00:38:57,771 --> 0:39:01,475
我们要把模型代码移到一个

734
00:39:02,075 --> 0:39:04,444
我可以选择使用Swift程序包

735
00:39:04,811 --> 0:39:07,014
但我只想与我的团队共享这段代码

736
00:39:07,281 --> 0:39:09,449
因此我要选择框架来代替程序包

737
00:39:10,217 --> 0:39:11,952
我们需要创建一个新目标…

738
00:39:14,488 --> 0:39:16,590
并且我可以使用过滤器来搜索框架

739
00:39:18,358 --> 0:39:20,460
我要把这个框架命名为

740
00:39:22,229 --> 0:39:25,966
我想确保在单元测试内

741
00:39:26,300 --> 0:39:29,670
从而当我创建框架时

742
00:39:29,736 --> 0:39:30,804
自动生成单元测试目标

743
00:39:34,741 --> 0:39:36,877
现在在我迁移代码之前

744
00:39:36,944 --> 0:39:40,814
我想把MindKit导入到

745
00:39:41,615 --> 0:39:44,151
我知道我要迁移

746
00:39:44,551 --> 0:39:48,422
这个文件有两个公共类型

747
00:39:48,956 --> 0:39:51,291
我要使用查找导航器

748
00:39:51,358 --> 0:39:53,193
来查找要在哪里使用这两个类型

749
00:39:54,061 --> 0:39:55,596
我要切换到查找导航器

750
00:39:56,697 --> 0:40:00,200
查找导航器可以让我搜索整个项目

751
00:39:56,697 --> 0:40:00,200
查找导航器可以让我搜索整个项目

752
00:40:00,267 --> 0:40:04,204
搜索文本、标志引用、正则表达式

753
00:40:05,005 --> 0:40:06,773
目前我想查找正则表达式…

754
00:40:08,108 --> 0:40:11,278
我想搜索…

755
00:40:11,912 --> 0:40:13,814
或HealthStore

756
00:40:14,248 --> 0:40:15,849
然后我按回车查看结果

757
00:40:17,284 --> 0:40:20,053
我知道我要把

758
00:40:20,120 --> 0:40:23,624
和HealthStoreFactory.swift

759
00:40:23,957 --> 0:40:27,227
我可以通过点击公开三角形查看结果

760
00:40:28,695 --> 0:40:30,964
现在我要导航到每一个文件

761
00:40:31,565 --> 0:40:32,699
并添加导入

762
00:40:34,801 --> 0:40:36,570
因此我要跳转到文件的顶部…

763
00:40:37,804 --> 0:40:38,906
添加导入

764
00:40:39,673 --> 0:40:42,209
最后我们在ContentView.swift中

765
00:40:45,145 --> 0:40:46,847
现在我们已经准备好迁移文件了

766
00:40:46,914 --> 0:40:48,782
因此我要切换回项目导航器

767
00:40:49,716 --> 0:40:52,719
我提到过 我想迁移

768
00:40:53,287 --> 0:40:56,390
但我还想迁移

769
00:40:57,191 --> 0:41:00,260
我可以在项目导航器中选择多个文件

770
00:40:57,191 --> 0:41:00,260
我可以在项目导航器中选择多个文件

771
00:41:00,327 --> 0:41:04,298
通过按住Command并点击

772
00:41:05,199 --> 0:41:09,169
然后我可以把这些选中的文件

773
00:41:10,671 --> 0:41:13,574
当我这样做时

774
00:41:13,640 --> 0:41:15,642
这些文件的目标成员

775
00:41:16,143 --> 0:41:18,879
我们可以对此进行验证

776
00:41:19,913 --> 0:41:23,116
我们看到编辑器中打开了

777
00:41:23,183 --> 0:41:26,753
即HealthStore.swift

778
00:41:27,120 --> 0:41:29,056
而不是Mind app的目标了

779
00:41:30,924 --> 0:41:34,194
现在我还没有忘记我们仍需要实施

780
00:41:34,261 --> 0:41:36,263
与HealthKit相交互的

781
00:41:36,997 --> 0:41:38,065
我们现在就做

782
00:41:38,131 --> 0:41:41,235
以便我们可以开始把真正的健康数据

783
00:41:42,169 --> 0:41:44,771
我要做的第一件事

784
00:41:46,807 --> 0:41:48,942
现在我之前从未用过

785
00:41:49,243 --> 0:41:51,945
因此我想阅读一下文档

786
00:41:52,746 --> 0:41:56,850
我可以直接在Xcode中阅读文档

787
00:41:56,917 --> 0:41:58,519
你可以在帮助菜单中找到文档

788
00:42:00,554 --> 0:42:03,457
在这里你可以搜索来自SDK的框架

789
00:42:03,891 --> 0:42:05,492
搜索特定API

790
00:42:05,559 --> 0:42:09,563
或搜索编程话题

791
00:42:10,163 --> 0:42:11,532
因此在这里

792
00:42:14,501 --> 0:42:16,837
现在我可以浏览

793
00:42:16,904 --> 0:42:18,238
整个框架的所有文档了

794
00:42:18,305 --> 0:42:20,073
这在离线时也可用

795
00:42:21,041 --> 0:42:24,244
幸运的是我已经把我所需要的

796
00:42:24,745 --> 0:42:26,780
我要把它添加到文件末端

797
00:42:29,483 --> 0:42:31,952
在我们开始编写单元测试之前

798
00:42:32,219 --> 0:42:36,690
我想在MindKit框架中添加

799
00:42:37,024 --> 0:42:38,725
从HealthStore协议开始

800
00:42:39,526 --> 0:42:43,197
我可以使用一种叫做文档注释的

801
00:42:44,097 --> 0:42:47,801
Xcode知道如何给声明生成

802
00:42:48,468 --> 0:42:51,038
这个功能在行动菜单中可用

803
00:42:51,772 --> 0:42:55,776
因此我要命令点击

804
00:42:55,843 --> 0:42:57,177
即requestAccess

805
00:42:58,078 --> 0:43:00,080
然后我要选择添加文档

806
00:42:58,078 --> 0:43:00,080
然后我要选择添加文档

807
00:43:01,815 --> 0:43:05,018
现在Xcode已经插入了一个

808
00:43:05,085 --> 0:43:08,222
其中有占位符用于方法描述

809
00:43:08,288 --> 0:43:10,891
还有它所接受的参数的描述

810
00:43:12,025 --> 0:43:14,761
这个方法要求…

811
00:43:18,532 --> 0:43:19,666
用户权限…

812
00:43:20,267 --> 0:43:23,237
能访问冥想会话

813
00:43:24,771 --> 0:43:28,809
完成参数是请求完成时

814
00:43:32,513 --> 0:43:35,415
我知道这个方法可以异步执行

815
00:43:35,849 --> 0:43:40,420
并且我想添加一个特殊注释…

816
00:43:40,487 --> 0:43:42,990
我可以使用一个特殊的项目符号

817
00:43:43,991 --> 0:43:45,292
现在我可以添加那个注释

818
00:43:50,931 --> 0:43:52,766
现在我已经写好了文档

819
00:43:52,833 --> 0:43:54,101
我可以在快速帮助中浏览它

820
00:43:55,135 --> 0:43:57,271
再一次我们可以打开快速帮助弹出框

821
00:43:57,337 --> 0:44:01,141
可以选择点击

822
00:43:57,337 --> 0:44:01,141
可以选择点击

823
00:44:01,642 --> 0:44:04,077
现在我们可以看到我们刚写的描述

824
00:44:04,945 --> 0:44:08,615
以及我们写的参数的描述

825
00:44:08,982 --> 0:44:12,252
这在任意请求访问中都可用

826
00:44:18,392 --> 0:44:21,962
要获取更多关于编写和记录

827
00:44:22,029 --> 0:44:24,565
请参看Swift API设计指南

828
00:44:25,232 --> 0:44:26,867
在swift.org上可以找到它

829
00:44:27,835 --> 0:44:29,102
（总结）

830
00:44:29,169 --> 0:44:30,237
在这个演示中

831
00:44:30,504 --> 0:44:34,007
我们了解了如何使用和导航

832
00:44:35,142 --> 0:44:38,779
我们讲了在项目中创建一个

833
00:44:38,846 --> 0:44:41,448
以及把现有代码迁移到那个框架中

834
00:44:42,816 --> 0:44:46,220
接下来我们了解了

835
00:44:46,587 --> 0:44:47,454
最后

836
00:44:47,721 --> 0:44:51,291
我们了解了如何通过文档注释

837
00:44:52,459 --> 0:44:56,063
现在我要把舞台交给Honza

838
00:44:56,630 --> 0:44:57,798
（测试和发布）

839
00:44:58,098 --> 0:44:59,099
谢谢Holly

840
00:44:59,166 --> 0:45:00,734
在这部分中

841
00:44:59,166 --> 0:45:00,734
在这部分中

842
00:45:00,801 --> 0:45:04,104
我们要讲如何在Xcode中

843
00:45:04,171 --> 0:45:06,673
以及一旦我们准备好发布后

844
00:45:08,976 --> 0:45:11,545
现在因为你的app运行得不错

845
00:45:11,912 --> 0:45:14,281
我们需要确保它能继续适当地运行

846
00:45:15,082 --> 0:45:18,986
增加我们对app品质的自信心的

847
00:45:19,253 --> 0:45:21,655
是通过自动化测试

848
00:45:24,925 --> 0:45:27,728
我们要给我们的app

849
00:45:27,794 --> 0:45:29,229
编写两大类高层级测试…

850
00:45:29,563 --> 0:45:31,231
单元测试和UI测试

851
00:45:32,933 --> 0:45:35,569
单元测试可以确保单一组件

852
00:45:35,903 --> 0:45:40,741
比如我们的HealthStore

853
00:45:40,807 --> 0:45:44,011
并验证输出是否与我们的预期相匹配

854
00:45:46,280 --> 0:45:49,850
另一方面的UI测试

855
00:45:49,917 --> 0:45:53,854
都进行了正确集成并且

856
00:45:55,822 --> 0:45:57,224
让我们返回到Xcode中

857
00:46:07,334 --> 0:46:11,305
Holly已经创建了

858
00:46:11,572 --> 0:46:12,739
叫做MindKitTests

859
00:46:13,140 --> 0:46:15,509
但我们仍需要把它添加到

860
00:46:16,243 --> 0:46:19,413
测试计划是一个文件…一个资源库

861
00:46:19,713 --> 0:46:22,850
描述了如何创建和运行测试

862
00:46:24,051 --> 0:46:27,754
查看我们的方案使用了

863
00:46:27,821 --> 0:46:30,224
点击方案并点击编辑方案

864
00:46:31,458 --> 0:46:33,060
我们要切换到测试行动

865
00:46:33,594 --> 0:46:36,663
在这里我们可以看到我们的方案

866
00:46:36,730 --> 0:46:38,265
只有一个 即默认测试计划

867
00:46:38,665 --> 0:46:39,633
我们要跳转到它

868
00:46:39,700 --> 0:46:42,102
点击测试计划的名字旁边的跳转箭头

869
00:46:43,971 --> 0:46:47,307
测试计划编辑器显示了

870
00:46:47,374 --> 0:46:50,944
这里我们已经有了UI测试目标

871
00:46:51,211 --> 0:46:52,980
我们稍后再编写代码

872
00:46:53,347 --> 0:46:55,816
但我们仍需要添加单元测试的目标

873
00:46:56,917 --> 0:47:00,053
我们通过点击底部的加号按钮

874
00:46:56,917 --> 0:47:00,053
我们通过点击底部的加号按钮

875
00:47:00,888 --> 0:47:02,523
并选择

876
00:47:04,658 --> 0:47:07,127
现在让我们实际编写我们的

877
00:47:08,862 --> 0:47:11,965
我要给HealthStore

878
00:47:12,599 --> 0:47:16,904
我现在要做的就是控制点击

879
00:47:17,371 --> 0:47:18,539
并点击新文件

880
00:47:20,140 --> 0:47:22,442
我将使用单元测试文件模板…

881
00:47:24,645 --> 0:47:28,715
并把文件测试命名为

882
00:47:31,285 --> 0:47:32,419
看起来还不错

883
00:47:33,520 --> 0:47:36,523
在这里我们要做的第一件事就是

884
00:47:36,590 --> 0:47:38,192
因为这是代码所在的地方

885
00:47:43,630 --> 0:47:47,267
为了既测试MindKit框架

886
00:47:47,334 --> 0:47:48,635
也测试它的内部界面

887
00:47:49,036 --> 0:47:53,040
我们要在导入中添加可测试的关键字

888
00:47:54,074 --> 0:47:56,677
接下来我要向我们的类中

889
00:47:58,212 --> 0:47:59,880
添加两个测试

890
00:48:00,347 --> 0:48:04,084
第一个在我们保存冥想之后进行验证

891
00:48:04,351 --> 0:48:05,686
我们可以马上取回它

892
00:48:06,787 --> 0:48:09,623
第二个测试可以确保

893
00:48:09,923 --> 0:48:11,959
读取数据

894
00:48:13,293 --> 0:48:16,630
我要通过进入产品、测试

895
00:48:19,266 --> 0:48:21,735
现在这些测试是针对模拟器创建的

896
00:48:21,802 --> 0:48:24,338
并且要在iPhone XR

897
00:48:35,582 --> 0:48:36,884
现在测试已经完成

898
00:48:36,950 --> 0:48:41,788
我们实际上可以在源代码编辑器中的

899
00:48:41,855 --> 0:48:44,525
测试菱形 表明两个测试都成功了

900
00:48:45,526 --> 0:48:46,460
很好

901
00:48:46,894 --> 0:48:49,062
现在我们还可以在测试导航器中

902
00:48:50,030 --> 0:48:51,298
看到测试等级

903
00:48:52,733 --> 0:48:55,235
我们给HealthStore

904
00:48:55,302 --> 0:48:58,205
但我们想确保app的UI也没问题

905
00:48:58,906 --> 0:49:00,541
因此我们要向UI测试中

906
00:48:58,906 --> 0:49:00,541
因此我们要向UI测试中

907
00:49:01,808 --> 0:49:04,545
我要跳转到现有的

908
00:49:04,611 --> 0:49:06,780
通过在测试导航器中选中它进行跳转

909
00:49:07,548 --> 0:49:08,849
在这里我们要添加…

910
00:49:09,783 --> 0:49:10,817
UI测试代码

911
00:49:11,952 --> 0:49:13,854
那会启动我们的app

912
00:49:14,621 --> 0:49:17,691
开始一个新的冥想 数秒钟后

913
00:49:18,125 --> 0:49:19,560
它会暂停冥想

914
00:49:20,027 --> 0:49:24,097
然后最后它验证剩余时间标签

915
00:49:24,164 --> 0:49:25,699
是否显示我们的预期值

916
00:49:26,934 --> 0:49:28,769
因此我要再次运行我们的测试

917
00:49:30,204 --> 0:49:32,406
这一次我要把模拟器带到前台来

918
00:49:32,472 --> 0:49:34,942
以便我们可以观看UI测试运行

919
00:49:36,143 --> 0:49:39,279
那么app已经启动

920
00:49:39,346 --> 0:49:40,614
数秒钟之后

921
00:49:40,681 --> 0:49:42,583
它开始暂停冥想 然后终止app

922
00:49:43,283 --> 0:49:46,987
接下来我们还看到单元测试

923
00:49:48,388 --> 0:49:50,357
现在看起来有些测试失败了

924
00:49:50,424 --> 0:49:52,159
要了解具体发生了什么

925
00:49:52,526 --> 0:49:54,361
我们要进入报告导航器

926
00:49:54,428 --> 0:49:56,697
通过点击最右侧的导航器按钮

927
00:49:57,865 --> 0:50:01,502
在这里 我选择顶部的测试行动

928
00:49:57,865 --> 0:50:01,502
在这里 我选择顶部的测试行动

929
00:50:02,669 --> 0:50:04,571
然后我们就得到了测试报告

930
00:50:05,572 --> 0:50:08,075
在这里我可以看到刚添加的UI测试

931
00:50:08,141 --> 0:50:10,244
被标记为红色 意味着它失败了

932
00:50:10,878 --> 0:50:12,579
要了解具体发生了什么

933
00:50:12,946 --> 0:50:14,214
我要公开测试…

934
00:50:14,715 --> 0:50:16,950
并深究失败的活动

935
00:50:17,551 --> 0:50:22,389
从而了解失败的搜索结果显示

936
00:50:23,390 --> 0:50:24,825
现在这开始变得有意义了

937
00:50:25,325 --> 0:50:29,162
但要真正理解当失败发生时

938
00:50:29,596 --> 0:50:31,532
我可以公开失败自身

939
00:50:31,832 --> 0:50:33,600
从而显示自动截图

940
00:50:34,001 --> 0:50:36,069
我可以预览点击图标

941
00:50:36,737 --> 0:50:41,008
在这里我可以清楚地看到

942
00:50:41,341 --> 0:50:44,578
02:56而不是

943
00:50:46,013 --> 0:50:47,481
我要关闭预览

944
00:50:47,548 --> 0:50:49,583
并跳转回测试资源

945
00:50:49,650 --> 0:50:52,085
可以通过点击

946
00:50:53,387 --> 0:50:56,890
在这里我们要修复这个断言

947
00:50:58,192 --> 0:51:00,994
现在我要重新运行这一个测试

948
00:50:58,192 --> 0:51:00,994
现在我要重新运行这一个测试

949
00:51:01,495 --> 0:51:04,398
可以通过点击

950
00:51:06,366 --> 0:51:07,467
再一次…

951
00:51:07,835 --> 0:51:12,039
我们可以看到app已经启动

952
00:51:12,773 --> 0:51:14,341
数秒钟之后它暂停了

953
00:51:14,408 --> 0:51:16,910
然后app被执行了 这一次…

954
00:51:17,277 --> 0:51:21,481
终止了 抱歉 这一次

955
00:51:21,782 --> 0:51:23,016
表明测试成功

956
00:51:23,350 --> 0:51:24,184
太棒了

957
00:51:30,123 --> 0:51:32,359
终于 我们现在有了

958
00:51:32,426 --> 0:51:35,562
我们希望很多人能使用它

959
00:51:37,831 --> 0:51:42,302
要在App Store或

960
00:51:42,369 --> 0:51:45,973
TestFlight是Apple

961
00:51:47,441 --> 0:51:52,246
为此我们首先选择通用的

962
00:51:52,813 --> 0:51:55,048
然后选择产品存档

963
00:51:55,716 --> 0:51:58,485
这会创建发布配置

964
00:51:58,819 --> 0:52:02,456
并生成一个存档

965
00:51:58,819 --> 0:52:02,456
并生成一个存档

966
00:52:04,525 --> 0:52:07,494
当它完成后 它会自动打开管理器

967
00:52:07,828 --> 0:52:09,596
在这里当我们选择存档时

968
00:52:09,963 --> 0:52:11,798
我们可以点击发布app

969
00:52:12,232 --> 0:52:15,202
我们会进入把app

970
00:52:15,469 --> 0:52:18,038
直接从Xcode提交到

971
00:52:22,209 --> 0:52:25,646
请注意要把app部署到TestFlight

972
00:52:26,013 --> 0:52:29,816
你需要注册与你的Apple ID

973
00:52:36,790 --> 0:52:38,358
一旦app成功上传

974
00:52:39,459 --> 0:52:42,196
你可以使用App Store

975
00:52:42,763 --> 0:52:45,866
这样你可以要求你的朋友和家人

976
00:52:45,933 --> 0:52:47,000
或你的同事

977
00:52:47,067 --> 0:52:48,735
使用TestFlight

978
00:52:48,802 --> 0:52:52,372
并最终上线…

979
00:52:54,107 --> 0:52:55,242
在这个演示中

980
00:52:55,309 --> 0:52:58,612
我们从给app创建单元测试

981
00:52:59,146 --> 0:53:02,115
然后我们了解了如何编辑

982
00:52:59,146 --> 0:53:02,115
然后我们了解了如何编辑

983
00:53:02,683 --> 0:53:06,520
以及如何使用测试报告

984
00:53:07,387 --> 0:53:10,457
然后我们创建了存档

985
00:53:10,757 --> 0:53:13,861
把我们的app上传到TestFlight

986
00:53:15,729 --> 0:53:18,332
要了解更多关于这些话题的信息

987
00:53:19,867 --> 0:53:22,536
让我们回顾一下在过去的一小时内

988
00:53:23,704 --> 0:53:27,007
今天我们了解了从零创建app的

989
00:53:28,475 --> 0:53:31,879
Prachi创建了我们的项目

990
00:53:32,746 --> 0:53:35,048
然后Holly向app中

991
00:53:35,315 --> 0:53:38,785
使用源代码编辑器功能让添加

992
00:53:40,053 --> 0:53:42,723
然后我上台来讲了在模拟器和设备上

993
00:53:42,789 --> 0:53:44,791
进行运行和调试

994
00:53:45,125 --> 0:53:47,094
并且我们向项目中添加了一个

995
00:53:48,328 --> 0:53:51,632
然后Holly上台

996
00:53:51,698 --> 0:53:53,700
并把我们的一些代码

997
00:53:54,768 --> 0:53:58,405
最后我们刚了解了如何

998
00:53:58,672 --> 0:54:02,342
以及如何把app发布到App Store

999
00:53:58,672 --> 0:54:02,342
以及如何把app发布到App Store

1000
00:54:04,912 --> 0:54:06,547
要获取关于本场演讲的更多信息

1001
00:54:06,613 --> 0:54:07,814
请参看这个链接

1002
00:54:08,148 --> 0:54:09,383
如果你有任何疑问

1003
00:54:09,683 --> 0:54:12,319
在本场演讲结束后有一场演讲

1004
00:54:12,386 --> 0:54:13,854
（更多信息请参看

1005
00:54:13,921 --> 0:54:15,722
祝你们一周愉快 非常感谢
