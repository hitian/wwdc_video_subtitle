1
00:00:01,516 --> 0:00:04,500
[ Music ]

2
00:00:12,516 --> 0:00:15,186
[ Applause ]

3
00:00:15,686 --> 0:00:15,906
&gt;&gt; Thank you.

4
00:00:16,516 --> 0:00:19,716
[ Applause ]

5
00:00:20,216 --> 0:00:21,496
Welcome, great to see you all

6
00:00:21,496 --> 0:00:22,176
here.

7
00:00:22,746 --> 0:00:24,726
My name is Ali Ozer, I along

8
00:00:24,726 --> 0:00:26,076
with my colleagues, Jake and

9
00:00:26,076 --> 0:00:27,336
Jason will be giving you an

10
00:00:27,336 --> 0:00:29,046
overview of iPad apps for Mac

11
00:00:29,136 --> 0:00:29,356
today.

12
00:00:30,736 --> 0:00:32,086
We have two talks for you.

13
00:00:32,086 --> 0:00:33,466
In this first talk, we will

14
00:00:33,466 --> 0:00:35,206
cover the basics, what this

15
00:00:35,206 --> 0:00:36,786
technology is, how to get

16
00:00:36,826 --> 0:00:38,766
started, some things you get for

17
00:00:38,766 --> 0:00:40,846
free, and also some significant

18
00:00:40,846 --> 0:00:42,426
API differences you should be

19
00:00:42,426 --> 0:00:43,196
aware of.

20
00:00:43,536 --> 0:00:45,186
In our second talk, taking iPad

21
00:00:45,246 --> 0:00:48,046
apps for Mac to the next level,

22
00:00:48,046 --> 0:00:49,776
which is later this week, we'll

23
00:00:49,776 --> 0:00:51,656
cover advance topics such as

24
00:00:51,656 --> 0:00:53,256
making your app a better Mac app

25
00:00:53,256 --> 0:00:55,206
and also considerations for

26
00:00:55,206 --> 0:00:56,586
distributing your app.

27
00:00:57,936 --> 0:00:59,336
So, what is iPad apps for Mac

28
00:00:59,546 --> 0:01:00,026
all about?

29
00:00:59,546 --> 0:01:00,026
all about?

30
00:01:00,656 --> 0:01:02,216
Well, it's a technology that

31
00:01:02,216 --> 0:01:04,876
enables you to rebuild and run

32
00:01:04,876 --> 0:01:06,726
iPad apps natively on the Mac.

33
00:01:07,726 --> 0:01:09,506
Let me expand on this.

34
00:01:10,316 --> 0:01:12,426
The Mac is a robust platform for

35
00:01:12,426 --> 0:01:13,836
development that enables all

36
00:01:13,836 --> 0:01:14,636
kinds of apps.

37
00:01:15,046 --> 0:01:17,236
We have powerful desktop apps,

38
00:01:17,236 --> 0:01:18,866
web-based experiences, and also

39
00:01:18,866 --> 0:01:20,056
graphic intensive games.

40
00:01:20,516 --> 0:01:22,886
And these experiences, all have

41
00:01:22,886 --> 0:01:24,006
dedicated frameworks that

42
00:01:24,046 --> 0:01:24,586
support them.

43
00:01:24,586 --> 0:01:26,296
But we've been missing one thing

44
00:01:26,896 --> 0:01:29,116
and that's UIKit, the technology

45
00:01:29,116 --> 0:01:31,356
used by iOS apps today.

46
00:01:31,786 --> 0:01:34,616
With the UIKit as a native peer

47
00:01:34,616 --> 0:01:36,346
to these other frameworks on the

48
00:01:36,346 --> 0:01:38,476
Mac, you're enabling you to

49
00:01:38,476 --> 0:01:40,356
bring your iPad apps to the Mac

50
00:01:40,356 --> 0:01:42,146
as first-class experiences.

51
00:01:43,046 --> 0:01:45,236
Let's talk about how we're doing

52
00:01:46,716 --> 0:01:46,826
this.

53
00:01:47,046 --> 0:01:49,856
We have a rich technology stack

54
00:01:50,196 --> 0:01:51,846
that's shared between iOS and

55
00:01:51,846 --> 0:01:53,776
macOS, and we leverage that as

56
00:01:53,776 --> 0:01:54,586
much as possible.

57
00:01:56,076 --> 0:01:57,576
We also bring in iOS frameworks

58
00:01:57,606 --> 0:01:58,816
that don't exist on the Mac and

59
00:01:59,256 --> 0:02:01,386
integrate them to work well on

60
00:01:59,256 --> 0:02:01,386
integrate them to work well on

61
00:02:01,386 --> 0:02:02,496
the Mac with the Mac

62
00:02:02,496 --> 0:02:03,846
infrastructure and with the Mac

63
00:02:03,976 --> 0:02:05,246
UI design guidelines.

64
00:02:05,886 --> 0:02:07,786
And last but not least, we make

65
00:02:07,786 --> 0:02:09,485
it easy for you to get started.

66
00:02:09,485 --> 0:02:11,716
I'll talk about the first two

67
00:02:11,716 --> 0:02:13,166
then Jake will come on stage to

68
00:02:13,166 --> 0:02:14,526
demo and discuss the third one.

69
00:02:15,256 --> 0:02:18,446
OK. So, let me show you what I

70
00:02:18,446 --> 0:02:19,716
mean by technology stack.

71
00:02:20,216 --> 0:02:21,476
Here is the technology stack for

72
00:02:21,476 --> 0:02:23,066
the Mac, we have macOS apps,

73
00:02:23,486 --> 0:02:24,986
these are built upon frameworks,

74
00:02:24,986 --> 0:02:26,636
UI frameworks and also lower

75
00:02:26,636 --> 0:02:28,016
level frameworks as you can see

76
00:02:28,016 --> 0:02:28,216
here.

77
00:02:28,696 --> 0:02:29,546
Now, these are just some

78
00:02:29,546 --> 0:02:30,636
representative frameworks.

79
00:02:30,636 --> 0:02:31,726
We, of course, have hundreds of

80
00:02:31,726 --> 0:02:33,076
frameworks in that stack.

81
00:02:33,646 --> 0:02:34,846
In addition to frameworks, we

82
00:02:34,846 --> 0:02:36,186
also have databases.

83
00:02:36,366 --> 0:02:37,826
These are things like the user's

84
00:02:37,826 --> 0:02:39,216
photos database, context,

85
00:02:39,466 --> 0:02:40,636
preferences, and so on.

86
00:02:41,226 --> 0:02:42,556
And now, we have services, this

87
00:02:42,556 --> 0:02:43,386
includes things like the

88
00:02:43,386 --> 0:02:45,106
Clipboard service for a copy

89
00:02:45,106 --> 0:02:46,946
paste and file coordination.

90
00:02:47,406 --> 0:02:48,586
And then we have the granddaddy

91
00:02:48,656 --> 0:02:50,006
service of them all, the Kernel,

92
00:02:50,006 --> 0:02:51,376
which is our Darwin Kernel.

93
00:02:52,216 --> 0:02:54,046
Now, the iOS stack looks very

94
00:02:54,146 --> 0:02:54,566
similar.

95
00:02:54,906 --> 0:02:56,826
On iOS we have iOS apps and then

96
00:02:56,826 --> 0:02:58,316
there is the stack of frameworks

97
00:02:58,316 --> 0:02:59,686
and databases and services

98
00:02:59,686 --> 0:03:00,156
underneath.

99
00:02:59,686 --> 0:03:00,156
underneath.

100
00:03:00,646 --> 0:03:01,736
There are some differences as

101
00:03:01,736 --> 0:03:02,816
you can see here and I'll talk

102
00:03:02,816 --> 0:03:06,076
about this in a minute.

103
00:03:06,236 --> 0:03:08,336
Now, many of you aren't aware

104
00:03:08,336 --> 0:03:09,996
that we have been able to run

105
00:03:10,076 --> 0:03:12,086
iOS apps on the Mac for a while

106
00:03:12,086 --> 0:03:13,706
now in the Simulator.

107
00:03:14,686 --> 0:03:16,166
The Simulator has a distinct

108
00:03:16,166 --> 0:03:18,586
copy of the stack running in an

109
00:03:18,586 --> 0:03:19,496
environment of its own.

110
00:03:19,616 --> 0:03:21,036
So, it got its own copy of

111
00:03:21,106 --> 0:03:22,426
frameworks, databases, and

112
00:03:22,426 --> 0:03:22,926
services.

113
00:03:23,956 --> 0:03:25,316
The main goal of the Simulator

114
00:03:25,316 --> 0:03:26,826
is to replicate the iOS

115
00:03:26,826 --> 0:03:28,716
environment so that you can

116
00:03:28,716 --> 0:03:30,526
debug and test your iOS apps as

117
00:03:30,636 --> 0:03:32,086
if they are running on iOS.

118
00:03:32,676 --> 0:03:34,116
The Simulator does an amazing

119
00:03:34,116 --> 0:03:34,736
job of this.

120
00:03:35,576 --> 0:03:37,716
However, integrating well with

121
00:03:37,756 --> 0:03:39,866
the Mac user experience is not a

122
00:03:39,866 --> 0:03:41,096
goal of the Simulator.

123
00:03:41,496 --> 0:03:42,616
And neither is running in an

124
00:03:42,616 --> 0:03:43,926
optimal fashion for the end

125
00:03:43,926 --> 0:03:44,256
user.

126
00:03:44,906 --> 0:03:47,836
So, as a way to bring iOS apps

127
00:03:48,126 --> 0:03:50,396
to the Mac natively, we augment

128
00:03:50,396 --> 0:03:52,096
it, the frameworks, on the Mac

129
00:03:52,576 --> 0:03:54,416
to support the needs of both

130
00:03:54,506 --> 0:03:57,396
AppKit apps and UIKit apps.

131
00:03:57,936 --> 0:03:59,526
We combine and unify the

132
00:03:59,526 --> 0:04:01,016
functionality of lower level

133
00:03:59,526 --> 0:04:01,016
functionality of lower level

134
00:04:01,016 --> 0:04:03,126
frameworks that exist on both.

135
00:04:03,336 --> 0:04:04,716
Framework such as CoreGraphics,

136
00:04:04,846 --> 0:04:07,466
Foundation, libSystem, to create

137
00:04:07,466 --> 0:04:08,826
single copy that can serve both

138
00:04:08,826 --> 0:04:08,976
stacks.

139
00:04:11,746 --> 0:04:13,116
Now, notice in this picture how

140
00:04:13,166 --> 0:04:14,956
UIKit and AppKit in the

141
00:04:14,956 --> 0:04:16,146
frameworks that depend on them

142
00:04:16,516 --> 0:04:17,486
do not get unified.

143
00:04:17,926 --> 0:04:18,916
Now I'll talk about that in a

144
00:04:18,916 --> 0:04:19,096
bit.

145
00:04:20,136 --> 0:04:21,766
Also note ARKit to the side

146
00:04:21,815 --> 0:04:22,376
there.

147
00:04:22,376 --> 0:04:23,506
Since there is no augmented

148
00:04:23,506 --> 0:04:24,666
reality functionality on the

149
00:04:24,666 --> 0:04:26,206
Mac, we did not bring that

150
00:04:26,206 --> 0:04:26,866
framework over.

151
00:04:26,866 --> 0:04:28,206
So, there it goes.

152
00:04:28,506 --> 0:04:30,116
Now, don't get us wrong, we love

153
00:04:30,116 --> 0:04:32,626
ARKit, just not on the Mac yet.

154
00:04:33,186 --> 0:04:34,856
And, finally, UserNotifications

155
00:04:34,856 --> 0:04:36,096
is in the middle there.

156
00:04:36,156 --> 0:04:37,396
That is an example of a

157
00:04:37,396 --> 0:04:38,716
framework that we not only

158
00:04:38,716 --> 0:04:40,586
brought to the Mac, but we also

159
00:04:40,586 --> 0:04:42,206
made public API on the Mac.

160
00:04:42,346 --> 0:04:44,686
And we did that last year during

161
00:04:44,686 --> 0:04:45,806
the initial bring up of this

162
00:04:45,856 --> 0:04:47,436
technology and we did it on

163
00:04:47,436 --> 0:04:48,656
plain sight as well.

164
00:04:49,296 --> 0:04:50,716
And we also unified services and

165
00:04:50,716 --> 0:04:52,676
databases, so that a single copy

166
00:04:52,676 --> 0:04:54,246
of Photos and Contacts and

167
00:04:54,246 --> 0:04:55,776
Preferences serves both AppKit

168
00:04:55,776 --> 0:04:57,036
apps and UIKit apps.

169
00:04:57,316 --> 0:04:58,456
And same with Services, there's

170
00:04:58,456 --> 0:05:00,116
only a single Copy Paste service

171
00:04:58,456 --> 0:05:00,116
only a single Copy Paste service

172
00:05:00,116 --> 0:05:01,406
single file coordination, and so

173
00:05:01,406 --> 0:05:01,566
on.

174
00:05:02,416 --> 0:05:03,826
So this is how the environment

175
00:05:03,866 --> 0:05:06,166
for iPad apps for Mac looks.

176
00:05:06,566 --> 0:05:07,656
It's very much like the

177
00:05:07,656 --> 0:05:08,956
environment that AppKit apps

178
00:05:08,956 --> 0:05:11,236
enjoy and running with native

179
00:05:11,396 --> 0:05:12,716
performance characteristics.

180
00:05:14,196 --> 0:05:15,726
Now, before I let go, let me

181
00:05:15,726 --> 0:05:16,626
talk a bit about those

182
00:05:16,626 --> 0:05:18,096
frameworks about AppKit and

183
00:05:18,206 --> 0:05:18,636
UIKit.

184
00:05:19,846 --> 0:05:21,336
Of course, it's not just WebKit

185
00:05:21,336 --> 0:05:21,846
and SceneKit.

186
00:05:21,846 --> 0:05:22,886
There are many other frameworks

187
00:05:22,886 --> 0:05:23,216
up there.

188
00:05:23,686 --> 0:05:24,896
And I'm showing you two copies

189
00:05:24,896 --> 0:05:25,256
of these.

190
00:05:25,786 --> 0:05:26,906
And that's indeed the case.

191
00:05:27,576 --> 0:05:29,256
Since AppKit and UIKit are not

192
00:05:29,256 --> 0:05:30,396
unified, the frameworks that

193
00:05:30,426 --> 0:05:32,106
depend on them also remain

194
00:05:32,176 --> 0:05:33,476
separate even if they are

195
00:05:33,536 --> 0:05:35,086
literally called the same thing,

196
00:05:35,086 --> 0:05:36,516
like two WebKits, two SceneKits,

197
00:05:36,516 --> 0:05:36,976
and so on.

198
00:05:36,976 --> 0:05:38,436
And there are number of reasons

199
00:05:38,436 --> 0:05:38,846
for this.

200
00:05:39,926 --> 0:05:41,736
The main one is that classes

201
00:05:41,786 --> 0:05:43,376
such as NSView and UIView are

202
00:05:43,946 --> 0:05:45,646
distinct and have their own

203
00:05:45,646 --> 0:05:46,676
behaviors and support

204
00:05:46,676 --> 0:05:47,356
infrastructure.

205
00:05:47,676 --> 0:05:48,416
So, we have distinct

206
00:05:48,416 --> 0:05:50,466
declarations and implementations

207
00:05:50,466 --> 0:05:52,266
of classes that in turn build

208
00:05:52,266 --> 0:05:52,716
upon them.

209
00:05:53,286 --> 0:05:54,596
So, here is declaration of

210
00:05:54,596 --> 0:05:57,546
MKMapView for instance for -- in

211
00:05:57,546 --> 0:05:58,986
the case of AppKit and the case

212
00:05:58,986 --> 0:05:59,546
of UIKit.

213
00:05:59,546 --> 0:06:00,886
And as you can see these are

214
00:05:59,546 --> 0:06:00,886
And as you can see these are

215
00:06:00,886 --> 0:06:02,076
effectively incompatible

216
00:06:02,076 --> 0:06:02,716
definitions.

217
00:06:03,976 --> 0:06:06,236
So, we really do have two copies

218
00:06:06,646 --> 0:06:08,036
of these frameworks in the

219
00:06:08,106 --> 0:06:10,076
system and also in the developer

220
00:06:10,356 --> 0:06:10,566
SDK.

221
00:06:11,126 --> 0:06:12,056
However, it's not something you

222
00:06:12,056 --> 0:06:12,816
need to worry about.

223
00:06:13,266 --> 0:06:14,866
The Static Linker and the

224
00:06:14,866 --> 0:06:16,326
Dynamic Loader do the right

225
00:06:16,326 --> 0:06:18,216
thing when it comes to finding

226
00:06:18,216 --> 0:06:19,406
the right copy of these

227
00:06:19,406 --> 0:06:19,976
frameworks.

228
00:06:20,616 --> 0:06:21,686
Either at built time during

229
00:06:21,686 --> 0:06:23,466
linking or at run time when

230
00:06:23,466 --> 0:06:23,746
loading.

231
00:06:25,716 --> 0:06:27,366
So, let me shift gears now and

232
00:06:27,406 --> 0:06:28,916
talk about why we're doing this.

233
00:06:29,046 --> 0:06:31,446
Why are we bringing UIKit to the

234
00:06:31,996 --> 0:06:32,096
Mac?

235
00:06:32,326 --> 0:06:33,456
Well, I mean this is part of the

236
00:06:33,456 --> 0:06:34,626
reason, you know, just showing

237
00:06:34,626 --> 0:06:36,066
you of just few of the hundreds

238
00:06:36,066 --> 0:06:37,776
of thousands of iPad apps out

239
00:06:37,846 --> 0:06:39,076
there that you've created.

240
00:06:39,656 --> 0:06:40,786
And we think many of them would

241
00:06:40,816 --> 0:06:41,826
be great on Mac.

242
00:06:42,916 --> 0:06:43,976
And there are also millions of

243
00:06:43,976 --> 0:06:45,816
Mac users out there and many of

244
00:06:45,816 --> 0:06:46,806
them would look great with your

245
00:06:46,806 --> 0:06:47,236
apps.

246
00:06:47,716 --> 0:06:48,996
So this technology provides them

247
00:06:48,996 --> 0:06:50,416
with access to these apps and

248
00:06:50,416 --> 0:06:51,596
creates new opportunities for

249
00:06:51,596 --> 0:06:52,156
you.

250
00:06:52,156 --> 0:06:55,596
Or you may be wondering whether

251
00:06:55,596 --> 0:06:57,576
this technology is appropriate

252
00:06:57,636 --> 0:06:58,576
for your application.

253
00:06:58,896 --> 0:07:00,416
And that's an excellent

254
00:06:58,896 --> 0:07:00,416
And that's an excellent

255
00:07:00,416 --> 0:07:00,786
question.

256
00:07:03,016 --> 0:07:04,906
So, let's say you have an iPad

257
00:07:04,906 --> 0:07:06,526
app and you don't have Mac app

258
00:07:06,526 --> 0:07:07,586
and you want to bring the

259
00:07:07,586 --> 0:07:09,226
functionality of your app to the

260
00:07:09,226 --> 0:07:09,356
Mac.

261
00:07:10,166 --> 0:07:11,426
Well, that's a very good case,

262
00:07:11,426 --> 0:07:12,636
very good time to consider this

263
00:07:12,636 --> 0:07:13,246
technology.

264
00:07:13,676 --> 0:07:15,386
One case of this is, you may

265
00:07:15,436 --> 0:07:17,596
have an iPad app, but maybe on

266
00:07:17,596 --> 0:07:18,896
the desktop the experience is a

267
00:07:18,896 --> 0:07:19,466
web page.

268
00:07:20,506 --> 0:07:21,616
Now, web interfaces can be

269
00:07:21,616 --> 0:07:22,996
pretty great, but they're not

270
00:07:22,996 --> 0:07:24,396
native, you know, native apps

271
00:07:24,486 --> 0:07:26,286
have menu bars, command keys,

272
00:07:26,286 --> 0:07:27,756
access to hardware features,

273
00:07:27,756 --> 0:07:29,836
robust local storage, so much

274
00:07:29,836 --> 0:07:31,056
more complete experience.

275
00:07:31,536 --> 0:07:33,506
In another case, is you may have

276
00:07:33,506 --> 0:07:35,816
an older Mac app, but maybe your

277
00:07:35,816 --> 0:07:37,096
iPad app has features you have

278
00:07:37,096 --> 0:07:38,786
since added and it's come

279
00:07:38,826 --> 0:07:40,886
further, the two have fallen out

280
00:07:40,886 --> 0:07:41,316
of sync.

281
00:07:41,636 --> 0:07:43,236
So, this may be a way to freshen

282
00:07:43,236 --> 0:07:45,126
your Mac app.

283
00:07:45,256 --> 0:07:47,586
One other case is maybe

284
00:07:47,586 --> 0:07:49,896
replacing a Mac app that's using

285
00:07:49,896 --> 0:07:52,036
a non-native, non-optimal third

286
00:07:52,036 --> 0:07:53,136
party porting framework.

287
00:07:53,596 --> 0:07:55,556
If your iPad app is native, this

288
00:07:55,556 --> 0:07:56,906
could be a good way to modernize

289
00:07:57,026 --> 0:08:00,266
your Mac app.

290
00:07:57,026 --> 0:08:00,266
your Mac app.

291
00:08:00,536 --> 0:08:01,296
But, however, there is one

292
00:08:01,296 --> 0:08:02,606
important thing to keep in mind.

293
00:08:03,806 --> 0:08:04,936
If you already have an AppKit

294
00:08:04,936 --> 0:08:07,236
app on your Mac -- on the Mac

295
00:08:07,296 --> 0:08:08,906
that is well-maintained and up

296
00:08:08,906 --> 0:08:10,446
to date with your iOS version,

297
00:08:11,056 --> 0:08:11,976
there is no need to consider

298
00:08:11,976 --> 0:08:13,436
this technology, really, you can

299
00:08:13,436 --> 0:08:14,586
continue using AppKit.

300
00:08:15,256 --> 0:08:16,436
AppKit is a first-class

301
00:08:16,436 --> 0:08:17,506
framework that provides a

302
00:08:17,506 --> 0:08:18,596
complete set of APIs for

303
00:08:18,726 --> 0:08:19,596
developing Mac apps.

304
00:08:20,336 --> 0:08:21,906
In fact, it provides access to a

305
00:08:21,906 --> 0:08:23,996
more complete API set than this

306
00:08:23,996 --> 0:08:27,206
technology provides on the Mac.

307
00:08:28,126 --> 0:08:29,186
Now along those lines, there's

308
00:08:29,186 --> 0:08:30,386
also some apps that are just not

309
00:08:30,506 --> 0:08:31,836
candidates for this technology.

310
00:08:32,856 --> 0:08:34,446
One example is iPhone apps.

311
00:08:34,446 --> 0:08:35,905
iPhone apps are optimized for

312
00:08:35,905 --> 0:08:37,126
the smaller screen, so they're

313
00:08:37,126 --> 0:08:38,655
trying to take advantage of that

314
00:08:38,655 --> 0:08:39,296
small screen.

315
00:08:39,326 --> 0:08:40,696
We really want you to have an

316
00:08:40,696 --> 0:08:42,936
iPad app that's taking advantage

317
00:08:42,936 --> 0:08:44,256
of larger screen sizes before

318
00:08:44,256 --> 0:08:45,126
bringing it to the Mac.

319
00:08:46,686 --> 0:08:48,266
Another case is apps that are

320
00:08:48,306 --> 0:08:49,716
built around mobile features.

321
00:08:50,656 --> 0:08:52,256
Earlier I showed you ARKit is

322
00:08:52,296 --> 0:08:53,116
not being available.

323
00:08:53,646 --> 0:08:55,306
If your app is based on ARKit,

324
00:08:55,306 --> 0:08:56,716
it's not going to run very well

325
00:08:56,716 --> 0:08:57,226
on the Mac.

326
00:08:58,006 --> 0:08:59,486
But if the augmented reality

327
00:08:59,486 --> 0:09:01,926
functionality is not crucial, it

328
00:08:59,486 --> 0:09:01,926
functionality is not crucial, it

329
00:09:01,926 --> 0:09:03,096
may still make sense to bring

330
00:09:03,096 --> 0:09:04,926
the app over and conditionally

331
00:09:04,926 --> 0:09:07,246
remove that functionality on the

332
00:09:08,276 --> 0:09:08,396
Mac.

333
00:09:08,586 --> 0:09:10,086
So, at this stage, before

334
00:09:10,086 --> 0:09:11,806
inviting Jake on stage for his

335
00:09:11,806 --> 0:09:13,276
demo, let me mention the

336
00:09:13,276 --> 0:09:14,446
high-level goals that help us

337
00:09:14,556 --> 0:09:15,536
design and deliver this

338
00:09:15,626 --> 0:09:16,166
technology.

339
00:09:16,166 --> 0:09:19,786
We want this to be easy to get

340
00:09:19,786 --> 0:09:20,156
started.

341
00:09:21,076 --> 0:09:22,646
We have a check box for that,

342
00:09:22,646 --> 0:09:23,826
you saw it yesterday and you'll

343
00:09:23,826 --> 0:09:26,316
also see in a minute.

344
00:09:26,316 --> 0:09:28,796
And we want you to be able to

345
00:09:28,796 --> 0:09:30,436
work with a single source base.

346
00:09:30,946 --> 0:09:32,366
A single source base enables you

347
00:09:32,366 --> 0:09:33,696
to develop without forking your

348
00:09:33,696 --> 0:09:35,766
code and enables carrying both

349
00:09:35,766 --> 0:09:37,266
the iPad and Mac versions of

350
00:09:37,266 --> 0:09:39,156
your app forward simultaneously.

351
00:09:39,926 --> 0:09:41,636
I want you to think of your apps

352
00:09:41,636 --> 0:09:43,146
as iPad apps on the inside.

353
00:09:43,896 --> 0:09:45,126
That's the way you've been

354
00:09:45,126 --> 0:09:47,176
developing them as iOS SDK and

355
00:09:47,176 --> 0:09:48,426
we want you to think -- continue

356
00:09:48,426 --> 0:09:50,016
thinking in terms of the iOS SDK

357
00:09:50,016 --> 0:09:50,866
and concepts.

358
00:09:51,786 --> 0:09:53,426
And finally, we want the app to

359
00:09:53,426 --> 0:09:55,046
come across as a Mac app on the

360
00:09:55,046 --> 0:09:55,556
outside.

361
00:09:55,906 --> 0:09:57,406
So, to the user, it is a

362
00:09:57,406 --> 0:09:59,276
first-class Mac experience.

363
00:09:59,836 --> 0:10:02,506
OK. So with this, let me invite

364
00:09:59,836 --> 0:10:02,506
OK. So with this, let me invite

365
00:10:02,506 --> 0:10:03,986
Jake on stage to show you how

366
00:10:03,986 --> 0:10:04,566
you get started.

367
00:10:05,516 --> 0:10:10,276
[ Applause ]

368
00:10:10,776 --> 0:10:11,856
&gt;&gt; Good afternoon, everyone.

369
00:10:12,536 --> 0:10:13,766
So, now that you've learned a

370
00:10:13,766 --> 0:10:15,646
bit about iPad apps for Mac, I'm

371
00:10:15,646 --> 0:10:16,586
going to show you how you can

372
00:10:16,586 --> 0:10:18,086
bring your apps to the Mac using

373
00:10:18,126 --> 0:10:18,596
Xcode.

374
00:10:19,266 --> 0:10:20,586
Traditionally, you'd have to

375
00:10:20,586 --> 0:10:21,896
learn a completely different UI

376
00:10:21,896 --> 0:10:23,076
framework and write a whole new

377
00:10:23,076 --> 0:10:23,996
app from scratch.

378
00:10:24,446 --> 0:10:25,946
But with Xcode 11, we're making

379
00:10:25,946 --> 0:10:27,416
it possible for you to reuse

380
00:10:27,416 --> 0:10:29,196
your existing project and source

381
00:10:29,196 --> 0:10:29,436
code.

382
00:10:29,946 --> 0:10:30,736
Let's go give it a try.

383
00:10:41,976 --> 0:10:44,056
So, here I've got a small recipe

384
00:10:44,056 --> 0:10:45,456
management iPad app that I've

385
00:10:45,456 --> 0:10:46,226
prepared earlier.

386
00:10:46,536 --> 0:10:48,116
And to get started, we're going

387
00:10:48,116 --> 0:10:50,386
to open our project in Xcode and

388
00:10:52,736 --> 0:10:54,916
we're going to check the Mac

389
00:10:55,706 --> 0:10:57,496
check box under Deployment Info.

390
00:10:58,516 --> 0:10:59,846
Now, note that this will only be

391
00:10:59,846 --> 0:11:01,206
available if your app supports

392
00:10:59,846 --> 0:11:01,206
available if your app supports

393
00:11:01,206 --> 0:11:01,546
iPad.

394
00:11:02,686 --> 0:11:03,886
So, I'm going to go ahead and

395
00:11:03,886 --> 0:11:06,676
click this check box and we're

396
00:11:06,676 --> 0:11:07,716
going to see a sheet pop up

397
00:11:07,716 --> 0:11:08,936
which will explain that Xcode is

398
00:11:08,936 --> 0:11:10,096
going to make some changes to

399
00:11:10,096 --> 0:11:10,796
your project.

400
00:11:11,206 --> 0:11:12,326
So, I'm going to go ahead and

401
00:11:12,326 --> 0:11:12,956
click Enable.

402
00:11:12,956 --> 0:11:16,436
Now, let's take a look at what

403
00:11:16,436 --> 0:11:17,286
that did.

404
00:11:17,666 --> 0:11:18,976
So, one of the first things

405
00:11:18,976 --> 0:11:20,486
you'll notice is that there is a

406
00:11:20,486 --> 0:11:22,596
new My Mac run destination in

407
00:11:22,596 --> 0:11:23,376
the Scheme Selector.

408
00:11:23,896 --> 0:11:25,656
This allows you to build, debug,

409
00:11:25,706 --> 0:11:30,066
and test your app for the Mac.

410
00:11:30,286 --> 0:11:31,676
You'll also see that there's a

411
00:11:31,676 --> 0:11:33,336
new label below the Bundle

412
00:11:33,336 --> 0:11:34,236
Identifier field.

413
00:11:34,726 --> 0:11:36,986
All iPad apps and app extensions

414
00:11:37,036 --> 0:11:38,226
brought to the Mac using this

415
00:11:38,226 --> 0:11:39,836
technology will automatically

416
00:11:39,836 --> 0:11:41,256
get a new bundle identifier by

417
00:11:41,256 --> 0:11:42,806
default which uses a special

418
00:11:42,806 --> 0:11:43,266
prefix.

419
00:11:43,996 --> 0:11:46,336
If you have any hard-coded

420
00:11:46,336 --> 0:11:47,706
references to your app or its

421
00:11:47,706 --> 0:11:49,026
app extensions bundle IDs, you

422
00:11:49,456 --> 0:11:50,896
may need to make some co-changes

423
00:11:50,896 --> 0:11:51,986
to take that into account.

424
00:11:52,666 --> 0:11:53,966
And you can learn more about

425
00:11:53,996 --> 0:11:55,656
this and how it affects signing,

426
00:11:55,656 --> 0:11:57,476
provisioning and distribution in

427
00:11:57,476 --> 0:11:59,416
our next talk, Taking iPad Apps

428
00:11:59,416 --> 0:12:00,646
for Mac to the Next Level.

429
00:11:59,416 --> 0:12:00,646
for Mac to the Next Level.

430
00:12:01,616 --> 0:12:02,906
Next, let's talk about

431
00:12:02,966 --> 0:12:03,736
capabilities.

432
00:12:04,666 --> 0:12:06,786
On iOS, apps need to specify

433
00:12:06,846 --> 0:12:08,276
usage description strings in

434
00:12:08,276 --> 0:12:10,226
their Info.plist, in order to

435
00:12:10,226 --> 0:12:11,656
gain access to certain protected

436
00:12:11,656 --> 0:12:13,366
system resources like the camera

437
00:12:13,516 --> 0:12:15,016
or the user's location.

438
00:12:15,626 --> 0:12:17,386
Xcode will use this information

439
00:12:17,596 --> 0:12:19,076
to automatically add equivalent

440
00:12:19,076 --> 0:12:20,676
entitlements to your Mac app, so

441
00:12:20,676 --> 0:12:22,036
that you get the same behavior

442
00:12:22,036 --> 0:12:23,116
as you had on iOS.

443
00:12:24,376 --> 0:12:27,546
For example, iOS apps get the

444
00:12:27,546 --> 0:12:29,236
ability to make outgoing network

445
00:12:29,236 --> 0:12:30,826
connections by default, whereas

446
00:12:30,826 --> 0:12:32,386
Mac apps need entitlement.

447
00:12:33,026 --> 0:12:34,306
If we go to the Signing and

448
00:12:34,306 --> 0:12:36,386
Capabilities Editor, we can see

449
00:12:36,386 --> 0:12:37,976
that Xcode has automatically

450
00:12:37,976 --> 0:12:39,266
added the network client

451
00:12:39,266 --> 0:12:40,916
entitlement as well as a couple

452
00:12:40,916 --> 0:12:42,366
of others based on the Usage

453
00:12:42,366 --> 0:12:43,856
Description strings in our apps

454
00:12:43,856 --> 0:12:44,766
Info.plist.

455
00:12:48,296 --> 0:12:50,206
Next up are frameworks and app

456
00:12:50,206 --> 0:12:50,796
extensions.

457
00:12:51,706 --> 0:12:53,016
While the majority of the iOS

458
00:12:53,016 --> 0:12:54,486
frameworks are also supported on

459
00:12:54,486 --> 0:12:55,796
macOS, there are still

460
00:12:55,796 --> 0:12:57,126
differences between the two

461
00:12:57,246 --> 0:12:57,476
SDKs.

462
00:12:57,476 --> 0:13:00,146
I'm going to focus primarily on

463
00:12:57,476 --> 0:13:00,146
I'm going to focus primarily on

464
00:13:00,146 --> 0:13:01,746
the Xcode project configuration

465
00:13:02,046 --> 0:13:03,386
and later Jason will tell you

466
00:13:03,386 --> 0:13:05,016
more about the API differences.

467
00:13:06,486 --> 0:13:07,776
Now, when Xcode updates your

468
00:13:07,776 --> 0:13:09,876
project it automatically

469
00:13:09,876 --> 0:13:11,716
excludes any unavailable content

470
00:13:11,716 --> 0:13:12,516
from your Mac build.

471
00:13:12,716 --> 0:13:14,276
This includes unavailable system

472
00:13:14,276 --> 0:13:16,146
SDK frameworks, unavailable app

473
00:13:16,146 --> 0:13:18,036
extension types, and Apple Watch

474
00:13:18,036 --> 0:13:18,496
content.

475
00:13:19,806 --> 0:13:21,246
If we go back to the general tab

476
00:13:22,836 --> 0:13:24,126
you can see in the frameworks

477
00:13:24,126 --> 0:13:25,386
libraries and embedded content

478
00:13:25,386 --> 0:13:27,886
section that Xcode has already

479
00:13:27,886 --> 0:13:28,846
done this for some of our

480
00:13:28,846 --> 0:13:29,626
dependencies.

481
00:13:30,086 --> 0:13:32,156
Both ARKit and our Watch app are

482
00:13:32,156 --> 0:13:33,976
marked as building for iOS only.

483
00:13:34,566 --> 0:13:39,056
So, let's go ahead and try to

484
00:13:39,156 --> 0:13:42,856
build this out for the Mac now.

485
00:13:43,606 --> 0:13:44,796
So, let's see if we've got an

486
00:13:44,846 --> 0:13:45,216
error.

487
00:13:46,006 --> 0:13:48,066
And this error says that one of

488
00:13:48,066 --> 0:13:50,826
our dependent frameworks is not

489
00:13:50,826 --> 0:13:52,096
compatible because it was built

490
00:13:52,096 --> 0:13:53,196
for iOS Simulator.

491
00:13:54,406 --> 0:13:56,096
You may be wondering, both iOS

492
00:13:56,096 --> 0:13:58,016
Simulator and macOS frameworks

493
00:13:58,016 --> 0:13:59,086
are built for x86.

494
00:13:59,576 --> 0:14:01,256
So, can you reuse them in your

495
00:13:59,576 --> 0:14:01,256
So, can you reuse them in your

496
00:14:01,256 --> 0:14:02,096
iPad apps for Mac?

497
00:14:02,856 --> 0:14:04,316
Well, the answer is no.

498
00:14:05,496 --> 0:14:06,896
For any pre-compiled binary

499
00:14:06,896 --> 0:14:08,036
libraries that you may have,

500
00:14:08,506 --> 0:14:09,416
you'll need to reach out to your

501
00:14:09,416 --> 0:14:10,576
vendor to provide a version

502
00:14:10,576 --> 0:14:12,126
specifically compiled for the

503
00:14:12,126 --> 0:14:13,816
iPad apps for Mac environment.

504
00:14:14,676 --> 0:14:15,986
Frameworks built from source as

505
00:14:15,986 --> 0:14:16,996
part of your project on the

506
00:14:16,996 --> 0:14:18,446
other hand are automatically

507
00:14:18,446 --> 0:14:19,856
configured to build for Mac by

508
00:14:19,856 --> 0:14:20,226
default.

509
00:14:24,396 --> 0:14:26,086
You may want to consider using

510
00:14:26,086 --> 0:14:27,536
the platform drop-down if you're

511
00:14:27,536 --> 0:14:28,826
in the frameworks libraries and

512
00:14:28,826 --> 0:14:30,556
embedded content section, to

513
00:14:30,866 --> 0:14:32,556
exclude incompatible libraries

514
00:14:32,556 --> 0:14:34,266
from your Mac build until you're

515
00:14:34,266 --> 0:14:35,486
able to obtain a compatible

516
00:14:35,486 --> 0:14:37,356
version or if the functionality

517
00:14:37,356 --> 0:14:39,026
that it provides isn't suitable

518
00:14:39,026 --> 0:14:39,726
for your Mac app.

519
00:14:40,646 --> 0:14:42,036
However, if you rely on that

520
00:14:42,036 --> 0:14:42,876
framework for critical

521
00:14:42,876 --> 0:14:44,596
functionality, it may be best to

522
00:14:44,596 --> 0:14:46,176
wait for updated libraries from

523
00:14:46,176 --> 0:14:48,856
your vendors before reporting to

524
00:14:50,856 --> 0:14:50,966
Mac.

525
00:14:51,126 --> 0:14:52,986
Now, in this case, I happen to

526
00:14:52,986 --> 0:14:54,586
have an updated copy of this

527
00:14:54,586 --> 0:14:55,486
library available.

528
00:14:55,936 --> 0:14:56,986
So, I'm going to go ahead and

529
00:14:56,986 --> 0:14:58,166
add this to the project.

530
00:14:59,606 --> 0:15:00,976
So, first I'll delete the

531
00:14:59,606 --> 0:15:00,976
So, first I'll delete the

532
00:15:00,976 --> 0:15:01,886
existing framework.

533
00:15:02,536 --> 0:15:05,046
And, now, we'll go ahead and

534
00:15:05,046 --> 0:15:06,066
drag the new one in.

535
00:15:06,706 --> 0:15:10,266
Now, the first thing you may

536
00:15:10,266 --> 0:15:11,766
notice is that this isn't a

537
00:15:11,766 --> 0:15:12,716
regular framework.

538
00:15:14,186 --> 0:15:15,956
This updated library has been

539
00:15:15,956 --> 0:15:17,476
delivered as an XC framework,

540
00:15:17,836 --> 0:15:19,286
which is a new feature in Xcode

541
00:15:19,286 --> 0:15:20,576
11 that allows library

542
00:15:20,576 --> 0:15:22,126
developers to package a library

543
00:15:22,126 --> 0:15:23,926
from multiple platforms into a

544
00:15:23,926 --> 0:15:25,406
single distributable bundle that

545
00:15:25,406 --> 0:15:26,526
you can use in your Xcode

546
00:15:26,556 --> 0:15:27,166
projects.

547
00:15:28,286 --> 0:15:29,826
XC frameworks are not required

548
00:15:29,826 --> 0:15:30,566
when bringing your app to the

549
00:15:30,566 --> 0:15:32,276
Mac, but then they got much more

550
00:15:32,276 --> 0:15:33,956
convenient to manage your

551
00:15:33,956 --> 0:15:35,356
dependencies across multiple

552
00:15:35,356 --> 0:15:36,066
platforms.

553
00:15:37,356 --> 0:15:38,436
You can learn more about them in

554
00:15:38,436 --> 0:15:39,806
binary frameworks in Swift.

555
00:15:40,346 --> 0:15:42,086
And note that they do work for

556
00:15:42,086 --> 0:15:42,976
Objective-C as well.

557
00:15:46,956 --> 0:15:48,656
Next, one of the most important

558
00:15:48,656 --> 0:15:49,786
aspects of bringing your app to

559
00:15:49,786 --> 0:15:51,356
the Mac is, of course, your

560
00:15:51,356 --> 0:15:51,716
code.

561
00:15:52,666 --> 0:15:54,066
Now, I previously showed you how

562
00:15:54,066 --> 0:15:55,676
Xcode will automatically exclude

563
00:15:55,676 --> 0:15:57,096
some unavailable frameworks from

564
00:15:57,096 --> 0:15:57,536
your build.

565
00:15:58,216 --> 0:15:59,136
But you may still need to make

566
00:15:59,136 --> 0:16:00,476
adjustments to your source code

567
00:15:59,136 --> 0:16:00,476
adjustments to your source code

568
00:16:00,716 --> 0:16:01,866
in order to compile out any

569
00:16:01,896 --> 0:16:03,636
references to API as provided by

570
00:16:03,636 --> 0:16:05,326
those frameworks which may be

571
00:16:05,326 --> 0:16:06,866
unavailable due to differences

572
00:16:06,866 --> 0:16:08,536
in hardware or differences in

573
00:16:08,536 --> 0:16:09,556
user experience.

574
00:16:10,096 --> 0:16:13,016
You can conditionally compile

575
00:16:13,016 --> 0:16:14,296
your code using the target

576
00:16:14,296 --> 0:16:15,606
environment platform condition

577
00:16:15,606 --> 0:16:18,216
in Swift or the target OS macros

578
00:16:18,306 --> 0:16:19,206
in Objective-C.

579
00:16:19,676 --> 0:16:22,096
So, let's take a look at that

580
00:16:22,096 --> 0:16:22,286
now.

581
00:16:22,286 --> 0:16:23,666
I'm going to go ahead and try to

582
00:16:23,666 --> 0:16:24,356
build again.

583
00:16:24,866 --> 0:16:29,556
And we can see that ARKit is not

584
00:16:29,556 --> 0:16:30,006
available.

585
00:16:31,296 --> 0:16:34,336
Great. So, I was hoping to add a

586
00:16:34,336 --> 0:16:36,746
way to preview my recipes in

587
00:16:36,746 --> 0:16:37,636
augmented reality.

588
00:16:38,336 --> 0:16:39,976
But we can probably get away

589
00:16:39,976 --> 0:16:41,846
without that, the food is best

590
00:16:41,846 --> 0:16:43,076
experienced in a different kind

591
00:16:43,076 --> 0:16:44,546
of AR, actual reality.

592
00:16:44,696 --> 0:16:46,146
So, let's just go ahead and

593
00:16:46,236 --> 0:16:46,896
comment that out.

594
00:16:48,246 --> 0:16:49,776
So, I've got some sample code

595
00:16:49,776 --> 0:16:50,946
here I can use to do that.

596
00:16:50,946 --> 0:16:54,076
I'm going to go ahead and #ifdef

597
00:16:54,076 --> 0:16:54,956
out ARKit.

598
00:16:54,956 --> 0:16:58,846
And I'm going to #ifdef out the

599
00:16:58,846 --> 0:17:00,396
corresponding API as well.

600
00:16:58,846 --> 0:17:00,396
corresponding API as well.

601
00:17:00,396 --> 0:17:04,205
OK. Let's try to build it one

602
00:17:04,205 --> 0:17:05,576
more time.

603
00:17:06,915 --> 0:17:07,726
Another error.

604
00:17:08,106 --> 0:17:13,496
OK. So, this time this looks

605
00:17:13,496 --> 0:17:15,346
like the StoreKit framework is

606
00:17:15,346 --> 0:17:16,056
available in the Mac.

607
00:17:16,736 --> 0:17:18,986
But the specific API that we're

608
00:17:18,986 --> 0:17:20,185
trying to use here is not.

609
00:17:21,056 --> 0:17:22,376
Now, I'm not sure what my apps

610
00:17:22,376 --> 0:17:23,576
marketing team is trying to do

611
00:17:23,576 --> 0:17:25,945
here, but probably not too

612
00:17:25,945 --> 0:17:26,296
important.

613
00:17:26,296 --> 0:17:27,836
I'm just going to #if this out

614
00:17:28,496 --> 0:17:28,936
as well.

615
00:17:29,856 --> 0:17:33,816
OK. And we can leave it to do

616
00:17:33,816 --> 0:17:37,956
for them, TODO: Something else?

617
00:17:39,216 --> 0:17:41,396
OK. Great.

618
00:17:42,326 --> 0:17:44,296
So, at this point, I could run

619
00:17:44,296 --> 0:17:44,646
the app.

620
00:17:45,436 --> 0:17:47,096
But before I do so, let's

621
00:17:47,096 --> 0:17:48,866
consider one key refinement that

622
00:17:48,866 --> 0:17:49,876
we can make to our Mac app.

623
00:17:50,806 --> 0:17:53,536
By default, UIKit apps will use

624
00:17:53,686 --> 0:17:55,896
the icon from your iPad app, the

625
00:17:55,896 --> 0:17:58,486
same rounded rec design, as you

626
00:17:58,486 --> 0:18:00,096
can see here, this nice little

627
00:17:58,486 --> 0:18:00,096
can see here, this nice little

628
00:18:00,096 --> 0:18:00,706
cookie.

629
00:18:01,446 --> 0:18:03,566
But Mac apps traditionally have

630
00:18:03,566 --> 0:18:05,276
beautiful detailed rich icons,

631
00:18:05,276 --> 0:18:07,166
which can be up to 512 points in

632
00:18:07,166 --> 0:18:08,676
size and make use of

633
00:18:08,676 --> 0:18:09,946
transparency for even more

634
00:18:09,946 --> 0:18:11,176
design and flexibility.

635
00:18:12,316 --> 0:18:13,396
Customizing your app with a

636
00:18:13,396 --> 0:18:14,806
great Mac icon really helps it

637
00:18:14,806 --> 0:18:16,426
to standout and you can learn

638
00:18:16,426 --> 0:18:17,876
more about how to design a great

639
00:18:17,876 --> 0:18:20,466
one in the section, What's New

640
00:18:20,466 --> 0:18:22,896
in iOS and macOS Design.

641
00:18:23,616 --> 0:18:25,886
So, to add a Mac specific icon

642
00:18:26,306 --> 0:18:27,966
we're going to want to navigate

643
00:18:28,016 --> 0:18:30,156
to the Asset Catalog Editor in

644
00:18:30,206 --> 0:18:32,786
Xcode, so select my Asset

645
00:18:32,846 --> 0:18:35,426
Catalog here and I'm going to

646
00:18:35,426 --> 0:18:37,036
select the App Icon Resource.

647
00:18:37,706 --> 0:18:41,126
And I'm going to the Inspector

648
00:18:41,526 --> 0:18:44,146
and I'm going to check the Mac

649
00:18:44,226 --> 0:18:45,486
check box to reveal the new

650
00:18:45,486 --> 0:18:46,056
slots.

651
00:18:46,606 --> 0:18:48,666
And from here, you just need to

652
00:18:48,666 --> 0:18:49,946
drag in your new icons.

653
00:18:49,996 --> 0:18:51,636
So, I'm going to go ahead and

654
00:18:51,636 --> 0:18:52,766
use an icon set that I've

655
00:18:52,766 --> 0:18:53,676
prepared earlier.

656
00:18:55,216 --> 0:18:57,226
I'm going to go ahead and drag

657
00:18:58,376 --> 0:18:58,916
that in.

658
00:18:59,566 --> 0:19:03,786
Oops. There we go.

659
00:18:59,566 --> 0:19:03,786
Oops. There we go.

660
00:19:04,046 --> 0:19:05,676
OK. You can see we got this

661
00:19:05,706 --> 0:19:06,746
great cookie icon.

662
00:19:08,526 --> 0:19:10,626
So, let's go ahead and give this

663
00:19:10,626 --> 0:19:11,226
one more try.

664
00:19:11,226 --> 0:19:12,556
I'm going to go ahead and build

665
00:19:12,556 --> 0:19:12,926
again.

666
00:19:13,826 --> 0:19:15,056
And this may take a moment

667
00:19:15,056 --> 0:19:16,106
because we've switch from

668
00:19:16,106 --> 0:19:17,666
building for iOS to building for

669
00:19:17,666 --> 0:19:18,056
the Mac.

670
00:19:18,056 --> 0:19:19,116
It's going to need to rebuild

671
00:19:19,116 --> 0:19:21,186
all of our source code and our

672
00:19:21,186 --> 0:19:21,936
resources.

673
00:19:22,036 --> 0:19:25,346
I'll give that a moment to come

674
00:19:25,346 --> 0:19:25,486
up.

675
00:19:27,006 --> 0:19:28,786
And we have successfully built

676
00:19:28,826 --> 0:19:30,286
and run for the Mac.

677
00:19:30,286 --> 0:19:32,346
And you can see we've got -- oh,

678
00:19:32,346 --> 0:19:32,876
thank you.

679
00:19:33,516 --> 0:19:36,896
[ Applause ]

680
00:19:37,396 --> 0:19:38,256
And you can see we've got a

681
00:19:38,256 --> 0:19:40,496
title bar, we've got window stop

682
00:19:40,496 --> 0:19:43,156
lights, we've got a menu,

683
00:19:44,036 --> 0:19:46,446
resizable window, and of course

684
00:19:46,446 --> 0:19:48,656
our beautiful Mac cookie icon,

685
00:19:49,846 --> 0:19:51,386
just like you'd expect.

686
00:19:52,276 --> 0:19:53,746
And once you're finished

687
00:19:53,746 --> 0:19:55,966
bringing your app to the Mac you

688
00:19:55,966 --> 0:19:57,656
can click the product archive

689
00:19:57,656 --> 0:19:59,586
Menu item in Xcode to create an

690
00:19:59,586 --> 0:20:00,976
archive and open the organizer.

691
00:19:59,586 --> 0:20:00,976
archive and open the organizer.

692
00:20:01,726 --> 0:20:02,756
And from there, you can

693
00:20:02,756 --> 0:20:04,286
distribute to the Mac App Store

694
00:20:04,446 --> 0:20:05,936
or do so independently using

695
00:20:05,936 --> 0:20:07,326
developer ID.

696
00:20:08,696 --> 0:20:11,396
So, that's how Xcode 11 helps

697
00:20:11,396 --> 0:20:12,646
you bring your iPad apps to the

698
00:20:12,646 --> 0:20:12,806
Mac.

699
00:20:14,446 --> 0:20:15,836
And now, I'd like to invite Ali

700
00:20:15,836 --> 0:20:17,166
back to the stage who's going to

701
00:20:17,166 --> 0:20:18,366
tell you more about the user

702
00:20:18,366 --> 0:20:19,736
experience improvements that you

703
00:20:19,736 --> 0:20:20,246
get for free.

704
00:20:21,516 --> 0:20:25,476
[ Applause ]

705
00:20:25,976 --> 0:20:26,926
&gt;&gt; OK. So, now, I want to talk

706
00:20:26,976 --> 0:20:28,516
to you about things you get for

707
00:20:28,516 --> 0:20:30,246
free and I'm not going to talk

708
00:20:30,246 --> 0:20:31,796
to you about the lunch you got

709
00:20:31,796 --> 0:20:32,606
out on the concourse.

710
00:20:33,116 --> 0:20:35,176
But what you get in your UIKit

711
00:20:35,246 --> 0:20:36,256
for Mac app.

712
00:20:36,256 --> 0:20:37,586
So there are ton of -- frankly

713
00:20:37,586 --> 0:20:38,446
there are tons of things you get

714
00:20:38,496 --> 0:20:38,976
for free.

715
00:20:39,276 --> 0:20:40,576
Large sections of that whole

716
00:20:40,576 --> 0:20:41,766
stack of frameworks, and

717
00:20:41,766 --> 0:20:43,166
database, and services I showed

718
00:20:43,166 --> 0:20:45,016
you earlier works in your Mac

719
00:20:45,176 --> 0:20:46,146
app automatically.

720
00:20:46,576 --> 0:20:47,516
But here, I want to highlight

721
00:20:47,586 --> 0:20:49,006
some things that are not just

722
00:20:49,146 --> 0:20:51,306
free but also automatically

723
00:20:51,306 --> 0:20:53,406
mapped over to Mac paradigms and

724
00:20:53,406 --> 0:20:54,586
Mac way of doing things.

725
00:20:55,126 --> 0:20:56,156
So, let's first take a look at

726
00:20:56,156 --> 0:20:57,906
that tasty recipe app that Jake

727
00:20:57,906 --> 0:20:58,326
used.

728
00:20:59,126 --> 0:21:00,666
So, as you saw on the demo, you

729
00:20:59,126 --> 0:21:00,666
So, as you saw on the demo, you

730
00:21:00,666 --> 0:21:01,916
got the default menu bar.

731
00:21:02,256 --> 0:21:03,656
The app gets a pretty functional

732
00:21:03,656 --> 0:21:05,066
default menu bar that has a lot

733
00:21:05,066 --> 0:21:06,706
of menu items that Mac users

734
00:21:06,706 --> 0:21:07,046
expect.

735
00:21:09,456 --> 0:21:10,656
Next to get window management.

736
00:21:10,656 --> 0:21:11,836
This includes things like window

737
00:21:11,836 --> 0:21:13,856
resizing, full screen, split

738
00:21:13,906 --> 0:21:15,046
view, also what we

739
00:21:15,046 --> 0:21:16,266
affectionately call the window

740
00:21:16,266 --> 0:21:16,796
stoplight.

741
00:21:16,876 --> 0:21:17,986
So there's three buttons in the

742
00:21:17,986 --> 0:21:18,536
title bar.

743
00:21:19,246 --> 0:21:20,546
And one more thing to point out,

744
00:21:21,976 --> 0:21:23,276
if you happen to have your iPad

745
00:21:23,276 --> 0:21:25,056
nearby, you have the ability to

746
00:21:25,056 --> 0:21:26,876
display your iPad app for a Mac

747
00:21:26,876 --> 0:21:28,336
window on your iPad.

748
00:21:29,516 --> 0:21:33,136
[ Applause ]

749
00:21:33,636 --> 0:21:35,306
Dark mode works automatically.

750
00:21:36,476 --> 0:21:37,796
If you go further and adapt any

751
00:21:37,796 --> 0:21:39,466
of the new APIs to make your app

752
00:21:39,466 --> 0:21:40,826
a better iOS dark mode app,

753
00:21:40,906 --> 0:21:42,106
those will also carry over

754
00:21:42,106 --> 0:21:42,746
automatically.

755
00:21:43,666 --> 0:21:45,316
Scrollbars and scrolling also

756
00:21:45,316 --> 0:21:46,626
works as expected on the Mac,

757
00:21:47,146 --> 0:21:48,636
mapping to overlay scrollbar

758
00:21:48,636 --> 0:21:49,336
functionality.

759
00:21:50,646 --> 0:21:51,746
Scrolling also works when the

760
00:21:51,746 --> 0:21:53,116
window is inactive which, of

761
00:21:53,116 --> 0:21:54,326
course is something that users

762
00:21:54,326 --> 0:21:56,286
expect on the Mac with gesture

763
00:21:56,286 --> 0:21:56,776
scrolling.

764
00:21:57,816 --> 0:21:59,646
If the user has scrollbars

765
00:21:59,646 --> 0:22:01,226
always showing, that will also

766
00:21:59,646 --> 0:22:01,226
always showing, that will also

767
00:22:01,226 --> 0:22:03,446
work automatically in your

768
00:22:03,446 --> 0:22:04,036
application.

769
00:22:05,296 --> 0:22:06,946
Now let me talk about settings.

770
00:22:07,346 --> 0:22:08,546
Our recipe app does not have any

771
00:22:08,626 --> 0:22:10,486
settings, so I'll show you the

772
00:22:10,486 --> 0:22:11,836
voice memos app.

773
00:22:12,956 --> 0:22:14,706
On iOS, apps specify setting

774
00:22:14,776 --> 0:22:16,736
bundles and these controls --

775
00:22:16,736 --> 0:22:18,206
these settings controls appear

776
00:22:18,206 --> 0:22:19,286
in the iOS settings app.

777
00:22:19,766 --> 0:22:20,486
For instance, here are the

778
00:22:20,576 --> 0:22:22,186
settings for voice memos, in the

779
00:22:22,236 --> 0:22:22,826
settings apps.

780
00:22:23,116 --> 0:22:24,416
Now, on the Mac, the design

781
00:22:24,416 --> 0:22:25,646
guideline is to access app

782
00:22:25,886 --> 0:22:27,956
preferences through a menu item

783
00:22:28,056 --> 0:22:29,156
in the app like this.

784
00:22:29,666 --> 0:22:30,876
So, when we see that your app

785
00:22:30,966 --> 0:22:32,676
has settings, we give you this

786
00:22:32,736 --> 0:22:34,566
menu item and automatically map

787
00:22:34,676 --> 0:22:36,406
the settings to a Mac prefpane

788
00:22:36,806 --> 0:22:39,046
within the app like so, and you

789
00:22:39,046 --> 0:22:40,376
can see them side by side.

790
00:22:40,416 --> 0:22:41,236
So, this is automatic.

791
00:22:42,516 --> 0:22:46,916
[ Applause ]

792
00:22:47,416 --> 0:22:49,346
Your application gets basic

793
00:22:49,346 --> 0:22:50,816
support for touch bar, the

794
00:22:50,816 --> 0:22:52,206
system touch bar that all apps

795
00:22:52,266 --> 0:22:52,696
get.

796
00:22:52,956 --> 0:22:54,476
But in addition, if you're using

797
00:22:54,476 --> 0:22:55,386
API such as

798
00:22:55,386 --> 0:22:57,256
AVPlayerViewController or

799
00:22:57,256 --> 0:22:59,346
UITextView, they will also

800
00:22:59,346 --> 0:23:00,706
automatically provide access to

801
00:22:59,346 --> 0:23:00,706
automatically provide access to

802
00:23:00,706 --> 0:23:02,366
the media in the text touch bars

803
00:23:02,436 --> 0:23:03,626
in your app, like the ones you

804
00:23:03,626 --> 0:23:04,046
see here.

805
00:23:06,526 --> 0:23:07,576
Another key element that's

806
00:23:07,576 --> 0:23:08,756
automatically mapped is the

807
00:23:08,756 --> 0:23:09,906
Document Picker.

808
00:23:09,906 --> 0:23:10,326
Here is how

809
00:23:10,326 --> 0:23:12,096
UIDocumentPickerViewController

810
00:23:12,096 --> 0:23:14,626
comes across as NSOpenPanel as

811
00:23:14,626 --> 0:23:17,936
the user would expect.

812
00:23:18,126 --> 0:23:19,676
Custom views that you've created

813
00:23:19,886 --> 0:23:22,096
come across as is, as intended.

814
00:23:22,546 --> 0:23:23,856
Here in the voice memos app, the

815
00:23:23,856 --> 0:23:25,146
custom waveform view looks

816
00:23:25,146 --> 0:23:27,226
exactly the same across both

817
00:23:27,226 --> 0:23:27,786
platforms.

818
00:23:28,126 --> 0:23:32,036
Now, let me talk about another

819
00:23:32,036 --> 0:23:33,296
set of things that come across

820
00:23:33,556 --> 0:23:34,536
pretty much as is.

821
00:23:35,316 --> 0:23:37,216
Let's look at a form sheet in

822
00:23:37,216 --> 0:23:37,806
News.

823
00:23:38,186 --> 0:23:40,196
Here's News on the iPad and

824
00:23:40,196 --> 0:23:41,916
here's the form sheet for

825
00:23:42,356 --> 0:23:43,416
managing notifications.

826
00:23:44,666 --> 0:23:46,916
And here's News on the Mac with

827
00:23:46,916 --> 0:23:48,316
the same form sheet displayed.

828
00:23:48,986 --> 0:23:50,146
You can see that that form sheet

829
00:23:50,146 --> 0:23:52,276
comes across as is along with

830
00:23:52,276 --> 0:23:53,946
the UI switches in the content.

831
00:23:54,506 --> 0:23:56,276
Let me show you side by side.

832
00:23:56,886 --> 0:23:58,296
So, here, you're seeing one of

833
00:23:58,296 --> 0:24:00,066
my main goals and that's to

834
00:23:58,296 --> 0:24:00,066
my main goals and that's to

835
00:24:00,066 --> 0:24:01,776
provide a high degree of source

836
00:24:01,776 --> 0:24:04,896
compatibility for your apps

837
00:24:04,896 --> 0:24:05,506
where possible.

838
00:24:05,986 --> 0:24:07,606
Trying to give apps full AppKit

839
00:24:07,646 --> 0:24:09,246
controls and metrics with

840
00:24:09,246 --> 0:24:10,406
represent too much of a

841
00:24:10,406 --> 0:24:10,916
disruption.

842
00:24:11,526 --> 0:24:13,586
So, individually, UIKit controls

843
00:24:13,586 --> 0:24:15,006
and layouts based on them come

844
00:24:15,006 --> 0:24:17,146
across as is providing maximal

845
00:24:17,146 --> 0:24:19,196
compatibility for your app.

846
00:24:20,996 --> 0:24:22,596
Now along the same lines, text

847
00:24:22,596 --> 0:24:22,986
sizes.

848
00:24:23,846 --> 0:24:25,576
On iOS, the base line font size

849
00:24:25,576 --> 0:24:28,286
for controls is 17 points while

850
00:24:28,496 --> 0:24:30,526
on the Mac, it's 13 points.

851
00:24:30,526 --> 0:24:33,116
And as you can see, not the same

852
00:24:33,116 --> 0:24:34,606
size when displayed next to each

853
00:24:34,606 --> 0:24:36,456
other, so two reasons for this

854
00:24:36,676 --> 0:24:38,226
discrepancy is the higher

855
00:24:38,226 --> 0:24:39,726
relative display density of iOS

856
00:24:39,786 --> 0:24:41,176
devices and the need to

857
00:24:41,176 --> 0:24:42,136
accommodate touches.

858
00:24:42,996 --> 0:24:44,656
So, to provide interaction

859
00:24:44,746 --> 0:24:45,666
consistent with Mac

860
00:24:45,666 --> 0:24:47,656
applications, we scale content

861
00:24:47,656 --> 0:24:49,836
areas down to 77%.

862
00:24:51,176 --> 0:24:52,276
So, everything in the window is

863
00:24:52,356 --> 0:24:53,826
scaled uniformly and you don't

864
00:24:53,826 --> 0:24:55,716
have to redesign any of your

865
00:24:55,716 --> 0:24:56,816
windows for the Mac.

866
00:24:58,016 --> 0:24:59,126
We have a Font Management and

867
00:24:59,166 --> 0:25:00,656
Text Scaling talk later in the

868
00:24:59,166 --> 0:25:00,656
Text Scaling talk later in the

869
00:25:00,656 --> 0:25:02,256
week which will cover this and

870
00:25:02,256 --> 0:25:03,696
some related topics in more

871
00:25:03,696 --> 0:25:03,956
depth.

872
00:25:06,936 --> 0:25:07,926
Now, let me talk about a few

873
00:25:07,926 --> 0:25:09,186
more things quickly that you get

874
00:25:09,236 --> 0:25:10,276
for free.

875
00:25:10,466 --> 0:25:11,846
If you implement copy and paste,

876
00:25:12,106 --> 0:25:14,186
drag and drop, printing or take

877
00:25:14,686 --> 0:25:16,326
advantage of the new multiple

878
00:25:16,326 --> 0:25:18,846
window, multitasking APIs in iOS

879
00:25:18,906 --> 0:25:20,496
13, these will carry over to the

880
00:25:20,496 --> 0:25:22,176
Mac free and automatically.

881
00:25:23,446 --> 0:25:24,736
On the Mac, the lifecycle of

882
00:25:24,736 --> 0:25:25,856
your app adjusts to the Mac

883
00:25:25,936 --> 0:25:27,506
paradigms and any call backs you

884
00:25:27,506 --> 0:25:28,806
implement for managing a

885
00:25:28,806 --> 0:25:30,566
lifecycle will also carry over

886
00:25:30,566 --> 0:25:31,596
and work automatically on the

887
00:25:31,596 --> 0:25:31,756
Mac.

888
00:25:32,296 --> 0:25:33,486
You will hear more about this in

889
00:25:33,486 --> 0:25:35,826
our Taking iPad Apps for Mac to

890
00:25:35,826 --> 0:25:36,726
the Next Level talk.

891
00:25:37,736 --> 0:25:38,826
Beyond these things you get for

892
00:25:38,826 --> 0:25:39,876
free, there are things you can

893
00:25:39,876 --> 0:25:41,206
do to make your app a better Mac

894
00:25:41,206 --> 0:25:43,336
app and here are some of these.

895
00:25:43,756 --> 0:25:44,896
Jake already covered the Mac

896
00:25:45,056 --> 0:25:45,616
icon.

897
00:25:46,236 --> 0:25:47,616
The rest we'll be covering in

898
00:25:47,616 --> 0:25:49,046
our advanced session later in

899
00:25:49,046 --> 0:25:50,676
the week and also in the iOS and

900
00:25:50,676 --> 0:25:52,406
macOS design session later this

901
00:25:52,406 --> 0:25:52,896
afternoon.

902
00:25:54,476 --> 0:25:55,786
OK, so thank you.

903
00:25:55,786 --> 0:25:56,716
At this point, I'd like to

904
00:25:56,716 --> 0:25:57,826
invite Jason on stage.

905
00:25:58,516 --> 0:26:03,386
[ Applause ]

906
00:25:58,516 --> 0:26:03,386
[ Applause ]

907
00:26:03,886 --> 0:26:04,976
&gt;&gt; All right, thanks Ali.

908
00:26:08,616 --> 0:26:09,516
Good afternoon.

909
00:26:09,516 --> 0:26:11,376
So, I'd like to dive into some

910
00:26:11,376 --> 0:26:12,696
of the API differences that

911
00:26:12,696 --> 0:26:13,606
you're likely to encounter when

912
00:26:13,606 --> 0:26:14,706
you bring your iPad app to the

913
00:26:14,706 --> 0:26:15,006
Mac.

914
00:26:15,516 --> 0:26:17,626
And there are three categories

915
00:26:17,626 --> 0:26:18,666
of API differences I want to

916
00:26:18,666 --> 0:26:19,136
talk about.

917
00:26:19,136 --> 0:26:21,596
Those APIs that have identical

918
00:26:21,596 --> 0:26:23,006
behavior and the good news is

919
00:26:23,006 --> 0:26:24,536
the majority of the APIs worked

920
00:26:24,596 --> 0:26:25,386
as expected.

921
00:26:25,926 --> 0:26:28,226
Those APIs that are mapped to

922
00:26:28,226 --> 0:26:29,066
macOS functionally--

923
00:26:29,246 --> 0:26:30,576
functionality automatically.

924
00:26:31,156 --> 0:26:33,176
And these utilize the iOS APIs

925
00:26:33,176 --> 0:26:34,626
but they result in macOS

926
00:26:34,626 --> 0:26:35,416
behavior.

927
00:26:36,426 --> 0:26:38,036
And then, finally, APIs that are

928
00:26:38,036 --> 0:26:39,396
unavailable for various reasons

929
00:26:39,396 --> 0:26:40,556
which we'll get into.

930
00:26:40,826 --> 0:26:41,476
Now, we're not going to cover

931
00:26:41,476 --> 0:26:42,616
anything in the first section

932
00:26:43,396 --> 0:26:44,776
and Ali covered many of the

933
00:26:44,776 --> 0:26:46,016
items in the second section.

934
00:26:46,616 --> 0:26:47,896
But there's one additional area

935
00:26:47,896 --> 0:26:50,036
that I like to talk about before

936
00:26:50,036 --> 0:26:51,306
we jump into the third section

937
00:26:52,306 --> 0:26:53,386
and that is mouse and touch

938
00:26:53,386 --> 0:26:53,956
events.

939
00:26:55,156 --> 0:26:56,676
So, iOS is built around a

940
00:26:56,676 --> 0:26:58,716
direct, multi-touch interaction

941
00:26:58,716 --> 0:26:59,006
model.

942
00:26:59,626 --> 0:27:01,156
And macOS is built around an

943
00:26:59,626 --> 0:27:01,156
And macOS is built around an

944
00:27:01,186 --> 0:27:02,916
indirect cursor-based

945
00:27:02,916 --> 0:27:03,716
interaction model.

946
00:27:03,716 --> 0:27:05,366
And there are significant

947
00:27:05,366 --> 0:27:06,996
challenges when trying to bring

948
00:27:06,996 --> 0:27:08,936
a multi-touch application to the

949
00:27:08,936 --> 0:27:10,216
Mac and make it feel at home,

950
00:27:10,836 --> 0:27:12,006
though we do try to map

951
00:27:12,486 --> 0:27:14,156
automatically as much behavior

952
00:27:14,156 --> 0:27:15,216
as we possibly can.

953
00:27:16,716 --> 0:27:18,366
We introduced a new UI Hover

954
00:27:18,366 --> 0:27:20,226
Gesture Recognizer to let you

955
00:27:20,226 --> 0:27:21,286
know when the mouse cursor is

956
00:27:21,326 --> 0:27:22,596
position over your views.

957
00:27:23,166 --> 0:27:27,106
And left mouse button drags are

958
00:27:27,106 --> 0:27:29,136
mapped to a single synthesized

959
00:27:29,186 --> 0:27:30,716
touch sequence that is

960
00:27:30,716 --> 0:27:32,536
automatically recognized by tap,

961
00:27:33,166 --> 0:27:34,496
psn and long-press gesture

962
00:27:34,496 --> 0:27:35,806
recognizers that are set to

963
00:27:35,806 --> 0:27:36,946
recognize a single touch.

964
00:27:42,776 --> 0:27:45,146
Standard system gestures are

965
00:27:45,146 --> 0:27:46,466
recognized at the hardware or

966
00:27:46,466 --> 0:27:47,556
driver-level on the Mac, and

967
00:27:48,086 --> 0:27:49,636
they post high level gesture

968
00:27:49,636 --> 0:27:50,736
events to the system.

969
00:27:51,866 --> 0:27:52,986
When the UIKit application

970
00:27:52,986 --> 0:27:54,346
receives a high-level pinch

971
00:27:54,346 --> 0:27:56,976
rotate gesture, we synthesize a

972
00:27:56,976 --> 0:27:58,866
pair of touches and deliver them

973
00:27:58,866 --> 0:27:59,716
to the view that's under the

974
00:27:59,716 --> 0:28:01,436
cursor and this will

975
00:27:59,716 --> 0:28:01,436
cursor and this will

976
00:28:01,436 --> 0:28:03,276
automatically trigger any pinch

977
00:28:03,576 --> 0:28:05,356
or rotation gesture recognizers

978
00:28:05,356 --> 0:28:05,976
in your application.

979
00:28:08,856 --> 0:28:09,846
If the user performs the

980
00:28:09,846 --> 0:28:11,726
standard system scroll gesture,

981
00:28:12,176 --> 0:28:13,496
in this case we don't synthesize

982
00:28:13,496 --> 0:28:15,386
any touches but UIKit will

983
00:28:15,386 --> 0:28:17,256
automatically scroll in the UI

984
00:28:17,256 --> 0:28:19,246
Scroll Views that are under the

985
00:28:20,976 --> 0:28:21,116
cursor.

986
00:28:21,286 --> 0:28:22,506
Now, one thing we can't map

987
00:28:22,506 --> 0:28:23,926
automatically is custom

988
00:28:23,926 --> 0:28:24,906
multi-touch behavior.

989
00:28:25,446 --> 0:28:26,536
Whether you're dealing with the

990
00:28:26,536 --> 0:28:27,826
UI touches directly or you've

991
00:28:27,896 --> 0:28:29,046
written a custom gesture

992
00:28:29,046 --> 0:28:30,916
recognizer, there's simply no

993
00:28:30,916 --> 0:28:33,116
automatic way to map from all of

994
00:28:33,116 --> 0:28:34,566
the various input devices on the

995
00:28:34,566 --> 0:28:36,886
Mac to your custom gestures.

996
00:28:37,696 --> 0:28:38,866
If you rely on this in your

997
00:28:38,866 --> 0:28:39,846
application, you'll need to

998
00:28:39,846 --> 0:28:41,616
provide an alternate way for the

999
00:28:41,616 --> 0:28:42,856
user to accomplish the same

1000
00:28:42,856 --> 0:28:43,636
thing when you bring your

1001
00:28:43,636 --> 0:28:44,466
application to the Mac.

1002
00:28:46,736 --> 0:28:47,766
So, let's move on to that third

1003
00:28:47,766 --> 0:28:49,386
category of API differences and

1004
00:28:49,386 --> 0:28:50,406
that's APIs that are

1005
00:28:50,406 --> 0:28:51,006
unavailable.

1006
00:28:51,896 --> 0:28:53,016
This fall into four general

1007
00:28:53,096 --> 0:28:55,126
groups, frameworks that are

1008
00:28:55,126 --> 0:28:57,406
deprecated, frameworks that are

1009
00:28:57,406 --> 0:28:59,156
unavailable because they're tied

1010
00:28:59,436 --> 0:29:01,316
to functionality in iOS that

1011
00:28:59,436 --> 0:29:01,316
to functionality in iOS that

1012
00:29:01,316 --> 0:29:02,996
doesn't exist in macOS,

1013
00:29:04,536 --> 0:29:05,436
frameworks that are tied to

1014
00:29:05,436 --> 0:29:07,236
specific hardware functionality

1015
00:29:07,236 --> 0:29:09,256
or sensors that don't exist on

1016
00:29:09,256 --> 0:29:09,626
the Mac.

1017
00:29:10,666 --> 0:29:11,586
And, finally, there are number

1018
00:29:11,586 --> 0:29:12,276
of frameworks that have

1019
00:29:12,346 --> 0:29:14,276
different behaviors or APIs that

1020
00:29:14,786 --> 0:29:16,196
are unavailable on macOS for

1021
00:29:16,196 --> 0:29:17,046
various reasons.

1022
00:29:17,746 --> 0:29:18,846
These would be annotated to make

1023
00:29:18,846 --> 0:29:19,816
this clear and to generate an

1024
00:29:19,816 --> 0:29:20,656
error in Xcode.

1025
00:29:21,206 --> 0:29:22,006
So, let's delve into this a

1026
00:29:22,006 --> 0:29:22,636
little bit deeper.

1027
00:29:24,956 --> 0:29:26,606
Deprecated frameworks are often

1028
00:29:26,606 --> 0:29:28,386
available for quite some time

1029
00:29:28,736 --> 0:29:29,926
after they've been deprecated.

1030
00:29:30,896 --> 0:29:32,946
However, this is a new platform

1031
00:29:32,946 --> 0:29:34,046
for your iPad apps.

1032
00:29:34,436 --> 0:29:35,576
And so, you shouldn't assume

1033
00:29:35,576 --> 0:29:36,766
that any of the deprecated

1034
00:29:36,766 --> 0:29:38,376
frameworks will be available to

1035
00:29:38,436 --> 0:29:38,706
you.

1036
00:29:39,936 --> 0:29:41,656
Now is a great time to migrate

1037
00:29:41,656 --> 0:29:42,966
off these deprecated frameworks

1038
00:29:42,966 --> 0:29:44,026
and on to the replacement.

1039
00:29:44,786 --> 0:29:45,916
This will not only allow you to

1040
00:29:45,916 --> 0:29:47,116
bring your iPad application to

1041
00:29:47,116 --> 0:29:48,536
the Mac, but your iPad app will

1042
00:29:48,536 --> 0:29:49,286
benefit as well.

1043
00:29:50,956 --> 0:29:52,326
There are also several

1044
00:29:52,326 --> 0:29:53,526
frameworks that are tied to

1045
00:29:53,526 --> 0:29:55,316
functionality in iOS that does

1046
00:29:55,316 --> 0:29:56,446
currently exist on the Mac.

1047
00:29:57,836 --> 0:29:58,826
The ClassKit framework is

1048
00:29:58,826 --> 0:29:59,696
designed to allow your

1049
00:29:59,696 --> 0:30:00,686
application to work with the

1050
00:29:59,696 --> 0:30:00,686
application to work with the

1051
00:30:00,686 --> 0:30:01,516
Schoolwork app.

1052
00:30:02,046 --> 0:30:02,956
But this application doesn't

1053
00:30:02,956 --> 0:30:04,046
exist on the Mac, so it wouldn't

1054
00:30:04,046 --> 0:30:04,746
make sense.

1055
00:30:05,376 --> 0:30:07,586
And HealthKit and HomeKit are

1056
00:30:07,586 --> 0:30:08,646
not available at this point

1057
00:30:08,646 --> 0:30:09,886
since not all of the underlying

1058
00:30:09,886 --> 0:30:10,986
functionality is present.

1059
00:30:12,436 --> 0:30:13,836
There are several frameworks

1060
00:30:13,836 --> 0:30:14,806
that are tied to specific

1061
00:30:14,926 --> 0:30:16,966
sensors on iOS devices for

1062
00:30:16,966 --> 0:30:17,896
functionality that can only

1063
00:30:17,896 --> 0:30:18,486
exist there.

1064
00:30:19,226 --> 0:30:20,266
This will not be available on

1065
00:30:20,266 --> 0:30:20,616
the Mac.

1066
00:30:20,616 --> 0:30:21,746
So, if your application uses

1067
00:30:21,746 --> 0:30:22,536
this, you'll need to

1068
00:30:22,536 --> 0:30:23,966
conditionalize their use before

1069
00:30:23,966 --> 0:30:24,726
you can bring it over.

1070
00:30:26,906 --> 0:30:28,066
Now, some of the frameworks that

1071
00:30:28,066 --> 0:30:29,966
are tied to specific hardware on

1072
00:30:29,966 --> 0:30:31,506
iOS devices do make sense on the

1073
00:30:31,506 --> 0:30:31,826
Mac.

1074
00:30:32,756 --> 0:30:33,706
But the availability and

1075
00:30:33,706 --> 0:30:36,436
functionality of these APIs will

1076
00:30:36,436 --> 0:30:37,966
be somewhat limited because Macs

1077
00:30:38,016 --> 0:30:39,146
often don't have comparable

1078
00:30:39,146 --> 0:30:39,806
sensors.

1079
00:30:41,756 --> 0:30:42,866
In some cases, it's true on

1080
00:30:42,866 --> 0:30:44,396
non-cellular iPads as well.

1081
00:30:44,396 --> 0:30:45,926
So, your app may already be

1082
00:30:45,926 --> 0:30:46,786
doing the right thing.

1083
00:30:47,736 --> 0:30:48,876
To give you a sense of the kind

1084
00:30:48,876 --> 0:30:50,246
of differences you can expect.

1085
00:30:50,996 --> 0:30:52,966
Core Location works but Macs

1086
00:30:52,966 --> 0:30:54,256
don't have GPS chips.

1087
00:30:54,636 --> 0:30:55,626
And so, you should expect them

1088
00:30:55,626 --> 0:30:57,036
to be less sensitive to changes

1089
00:30:57,036 --> 0:30:58,156
in location when they're moved.

1090
00:30:59,556 --> 0:31:01,626
And if you use Core Motion to

1091
00:30:59,556 --> 0:31:01,626
And if you use Core Motion to

1092
00:31:01,626 --> 0:31:03,706
control game play in your app,

1093
00:31:04,426 --> 0:31:05,456
you should be aware that the Mac

1094
00:31:05,456 --> 0:31:06,396
doesn't have the sensors

1095
00:31:06,396 --> 0:31:08,096
necessarily to do this nor it

1096
00:31:08,096 --> 0:31:09,056
would be a very good user

1097
00:31:09,056 --> 0:31:09,756
experience.

1098
00:31:09,946 --> 0:31:10,856
And so, you should add an

1099
00:31:10,856 --> 0:31:12,356
alternate mechanism to control

1100
00:31:12,486 --> 0:31:14,266
your game on the Mac.

1101
00:31:15,356 --> 0:31:17,576
There are several media related

1102
00:31:17,576 --> 0:31:18,726
frameworks that have differences

1103
00:31:18,726 --> 0:31:19,626
you should be aware of.

1104
00:31:20,786 --> 0:31:22,206
The Media Player framework gives

1105
00:31:22,206 --> 0:31:23,236
you basically the same

1106
00:31:23,236 --> 0:31:24,696
functionality it does on the Mac

1107
00:31:25,266 --> 0:31:26,816
with access to the Now Playing

1108
00:31:26,816 --> 0:31:28,446
Info Center and Remote Command

1109
00:31:28,446 --> 0:31:28,796
Center.

1110
00:31:29,546 --> 0:31:30,936
But there's no library access or

1111
00:31:30,936 --> 0:31:31,776
playback support.

1112
00:31:32,896 --> 0:31:34,166
And if you were using the

1113
00:31:34,166 --> 0:31:35,576
AVFoundation framework to

1114
00:31:35,576 --> 0:31:38,266
capture still images or video on

1115
00:31:38,266 --> 0:31:40,106
iOS devices, you can use the

1116
00:31:40,106 --> 0:31:42,216
UIImagePickerController in UIKit

1117
00:31:42,256 --> 0:31:43,176
to capture them from the

1118
00:31:43,176 --> 0:31:44,806
built-in front-facing Mac

1119
00:31:44,806 --> 0:31:44,976
camera.

1120
00:31:47,856 --> 0:31:48,896
A number of other frameworks

1121
00:31:48,896 --> 0:31:49,936
have differences as well and I

1122
00:31:49,936 --> 0:31:51,126
want to draw your attention to a

1123
00:31:51,166 --> 0:31:51,876
couple of them.

1124
00:31:53,076 --> 0:31:54,706
So, Metal is largely the same

1125
00:31:54,706 --> 0:31:56,876
across all of our platforms, so

1126
00:31:56,876 --> 0:31:58,566
most of you will find that your

1127
00:31:58,566 --> 0:32:00,896
iPad Metal apps work without

1128
00:31:58,566 --> 0:32:00,896
iPad Metal apps work without

1129
00:32:00,896 --> 0:32:02,146
change when you bring them to

1130
00:32:02,146 --> 0:32:02,476
the Mac.

1131
00:32:03,416 --> 0:32:05,086
For those of you that are using

1132
00:32:05,086 --> 0:32:06,256
some of the more advanced

1133
00:32:06,256 --> 0:32:08,386
features in our latest GPUs such

1134
00:32:08,386 --> 0:32:09,796
as Memoryless Textures.

1135
00:32:11,296 --> 0:32:12,396
We've introduced a new GPU

1136
00:32:12,476 --> 0:32:14,436
family API that will help you to

1137
00:32:14,436 --> 0:32:16,066
conditionalize your code to run

1138
00:32:16,066 --> 0:32:17,916
across a range of GPU families.

1139
00:32:18,786 --> 0:32:20,886
And in UIKit, UIWebView will not

1140
00:32:20,886 --> 0:32:21,736
be present on the Mac.

1141
00:32:22,216 --> 0:32:23,146
And so, if you have it already,

1142
00:32:23,146 --> 0:32:24,726
now is a great time to migrate

1143
00:32:24,946 --> 0:32:25,746
to WKWebView.

1144
00:32:26,486 --> 0:32:29,556
So, as you've seen there's a

1145
00:32:29,556 --> 0:32:30,736
number of differences in our API

1146
00:32:30,736 --> 0:32:32,066
and we don't have time to cover

1147
00:32:32,066 --> 0:32:32,656
all of them.

1148
00:32:33,416 --> 0:32:34,286
So, I want to take a moment to

1149
00:32:34,286 --> 0:32:35,226
talk about how you could

1150
00:32:35,226 --> 0:32:36,526
determine for yourselves what

1151
00:32:36,526 --> 0:32:38,766
API is and is not available to

1152
00:32:38,766 --> 0:32:39,696
you when you bring your iPad

1153
00:32:39,696 --> 0:32:40,266
apps to the Mac.

1154
00:32:42,326 --> 0:32:44,356
So, iPad apps for the Mac are

1155
00:32:44,356 --> 0:32:46,156
built against the macOS SDK.

1156
00:32:47,266 --> 0:32:48,656
And so, for frameworks that are

1157
00:32:48,656 --> 0:32:50,626
unavailable, they simply are

1158
00:32:50,626 --> 0:32:52,346
just not present in the SDK.

1159
00:32:52,346 --> 0:32:54,116
And for frameworks that have

1160
00:32:54,116 --> 0:32:55,626
differences between iOS and

1161
00:32:55,626 --> 0:32:58,326
macOS, we annotate methods as

1162
00:32:58,326 --> 0:32:59,656
appropriate to make that clear.

1163
00:33:01,126 --> 0:33:03,116
We annotate our APIs with

1164
00:33:03,116 --> 0:33:04,926
@available in Swift and API

1165
00:33:04,926 --> 0:33:06,386
available in Objective-C.

1166
00:33:07,236 --> 0:33:09,196
And for iOS applications, we're

1167
00:33:09,196 --> 0:33:10,316
obviously only concerned with

1168
00:33:10,316 --> 0:33:10,756
this part.

1169
00:33:10,756 --> 0:33:13,786
And the good news is that

1170
00:33:13,786 --> 0:33:15,046
availability for iOS

1171
00:33:15,096 --> 0:33:16,466
automatically implies

1172
00:33:16,466 --> 0:33:17,916
availability for iPad apps for

1173
00:33:17,916 --> 0:33:18,146
Mac.

1174
00:33:19,256 --> 0:33:20,146
As I've mentioned earlier, the

1175
00:33:20,146 --> 0:33:21,496
vast majority of APIs are

1176
00:33:21,496 --> 0:33:22,696
available, so this is typically

1177
00:33:22,696 --> 0:33:24,296
what you'll see when you look

1178
00:33:24,346 --> 0:33:25,356
through the APIs.

1179
00:33:27,046 --> 0:33:28,036
When there are differences in

1180
00:33:28,036 --> 0:33:29,206
availability, you'll see that

1181
00:33:29,206 --> 0:33:30,546
clearly annotated as well.

1182
00:33:31,286 --> 0:33:32,386
Here's an example of an API that

1183
00:33:32,386 --> 0:33:34,146
only exist for iPad apps on the

1184
00:33:34,146 --> 0:33:34,416
Mac.

1185
00:33:35,246 --> 0:33:36,396
Now, API such as this, are

1186
00:33:36,396 --> 0:33:37,286
fairly rare.

1187
00:33:38,246 --> 0:33:39,466
Most of the API differences

1188
00:33:39,466 --> 0:33:40,836
you'll find for iPad apps for

1189
00:33:40,836 --> 0:33:43,106
Mac are for differences where

1190
00:33:43,106 --> 0:33:45,366
the API is available on iOS but

1191
00:33:45,366 --> 0:33:46,126
not for the Mac.

1192
00:33:46,946 --> 0:33:48,226
In the most cases, you'll see

1193
00:33:48,226 --> 0:33:49,516
the API clearly annotated as

1194
00:33:49,516 --> 0:33:51,586
unavailable for UIKitForMac.

1195
00:33:54,856 --> 0:33:57,026
Ideally, most of your code will

1196
00:33:57,026 --> 0:33:58,426
be identical when you bring it

1197
00:33:58,426 --> 0:33:58,826
to the Mac.

1198
00:33:59,316 --> 0:34:00,446
However, if you have code that

1199
00:33:59,316 --> 0:34:00,446
However, if you have code that

1200
00:34:00,446 --> 0:34:01,536
shouldn't be included on the

1201
00:34:01,536 --> 0:34:02,686
Mac, you can use the

1202
00:34:02,686 --> 0:34:04,306
targetEnvironment conditional to

1203
00:34:04,306 --> 0:34:04,986
exclude it.

1204
00:34:06,616 --> 0:34:08,085
And if using Objective-C, you

1205
00:34:08,085 --> 0:34:09,366
can use the Target OS

1206
00:34:09,456 --> 0:34:10,916
UIKitForMac, target conditional

1207
00:34:10,916 --> 0:34:11,795
to do the same thing.

1208
00:34:13,176 --> 0:34:14,005
Of course, you can use this

1209
00:34:14,005 --> 0:34:15,295
target conditional to include

1210
00:34:15,295 --> 0:34:18,176
code which only relevant to Mac.

1211
00:34:20,396 --> 0:34:21,936
Data protection is an iOS

1212
00:34:21,936 --> 0:34:23,545
feature that you use to secure

1213
00:34:23,545 --> 0:34:24,946
your app's files and prevent

1214
00:34:25,016 --> 0:34:26,396
unauthorized access to them.

1215
00:34:27,356 --> 0:34:28,156
You can read and write your

1216
00:34:28,156 --> 0:34:29,585
files normally, but the system

1217
00:34:29,585 --> 0:34:31,176
encrypts and decrypts them

1218
00:34:31,176 --> 0:34:31,826
automatically.

1219
00:34:33,315 --> 0:34:34,916
This is access by specifying one

1220
00:34:34,916 --> 0:34:36,116
of the following four writing

1221
00:34:36,116 --> 0:34:37,356
options when writing files to

1222
00:34:37,356 --> 0:34:38,045
the file system.

1223
00:34:38,626 --> 0:34:42,216
On macOS, these data protection

1224
00:34:42,286 --> 0:34:43,606
APIs are not currently

1225
00:34:43,606 --> 0:34:44,106
functional.

1226
00:34:44,976 --> 0:34:46,505
If you try to use them like in

1227
00:34:46,505 --> 0:34:48,735
this example, the code will

1228
00:34:48,735 --> 0:34:51,286
compile and execute but the data

1229
00:34:51,286 --> 0:34:52,815
is not being stored securely on

1230
00:34:52,815 --> 0:34:53,525
the file system.

1231
00:34:54,565 --> 0:34:55,966
If you need to store data

1232
00:34:55,966 --> 0:34:57,626
securely, there are several

1233
00:34:57,626 --> 0:34:58,746
options available to you.

1234
00:34:59,656 --> 0:35:00,966
Passwords and related data can

1235
00:34:59,656 --> 0:35:00,966
Passwords and related data can

1236
00:35:00,966 --> 0:35:02,186
be stored in the Keychain and

1237
00:35:02,906 --> 0:35:04,626
FileVault will encrypt all of

1238
00:35:04,626 --> 0:35:05,456
the files on the disk

1239
00:35:05,506 --> 0:35:07,956
transparently, but if that's not

1240
00:35:07,956 --> 0:35:09,216
sufficient for your needs.

1241
00:35:09,216 --> 0:35:11,176
You can use the new AES.GCM

1242
00:35:11,176 --> 0:35:14,716
encryption API in CryptoKit to

1243
00:35:14,716 --> 0:35:15,806
encrypt your content before

1244
00:35:15,806 --> 0:35:16,646
writing it to disk.

1245
00:35:17,526 --> 0:35:18,716
As you can see in the short code

1246
00:35:18,716 --> 0:35:20,436
sample, this API makes it very

1247
00:35:20,436 --> 0:35:21,596
straightforward to encrypt your

1248
00:35:21,596 --> 0:35:21,906
data.

1249
00:35:22,846 --> 0:35:23,776
You then just need to store the

1250
00:35:23,776 --> 0:35:25,296
data on the disk and write the

1251
00:35:25,296 --> 0:35:26,796
key to the Keychain and you

1252
00:35:26,796 --> 0:35:28,036
refer to the documentation for

1253
00:35:28,036 --> 0:35:29,856
all the details on how to store

1254
00:35:29,896 --> 0:35:33,616
and later decrypt the data.

1255
00:35:34,936 --> 0:35:35,766
Another difference I want to

1256
00:35:35,766 --> 0:35:37,216
talk about is your application's

1257
00:35:37,276 --> 0:35:37,936
Bundle Format.

1258
00:35:39,136 --> 0:35:41,946
Application bundles on iOS are

1259
00:35:41,946 --> 0:35:43,326
considered flat bundles.

1260
00:35:44,116 --> 0:35:45,276
When Xcode builds your

1261
00:35:45,276 --> 0:35:46,776
application for iPad for the

1262
00:35:46,776 --> 0:35:49,476
Mac, it will build a macOS style

1263
00:35:49,516 --> 0:35:50,906
bundle that is deeper than the

1264
00:35:50,906 --> 0:35:52,226
flat bundle format that you used

1265
00:35:52,226 --> 0:35:52,956
on iOS.

1266
00:35:53,556 --> 0:35:55,746
If you're using the NSBundle

1267
00:35:55,746 --> 0:35:57,356
APIs to find resources in your

1268
00:35:57,356 --> 0:35:59,336
application, then all of this

1269
00:35:59,336 --> 0:36:00,596
will be transparent to you.

1270
00:35:59,336 --> 0:36:00,596
will be transparent to you.

1271
00:36:01,326 --> 0:36:02,786
However, if you've hard-coded

1272
00:36:02,786 --> 0:36:04,236
paths relative your app bundle,

1273
00:36:04,716 --> 0:36:06,066
you'll need to modify that code

1274
00:36:06,066 --> 0:36:07,536
to deal with the macOS bundle

1275
00:36:07,586 --> 0:36:07,956
format.

1276
00:36:12,036 --> 0:36:13,476
iOS supports a wide variety of

1277
00:36:13,476 --> 0:36:15,296
extensions but not all of them

1278
00:36:15,296 --> 0:36:16,876
will be available when you work

1279
00:36:17,086 --> 0:36:18,796
-- will work when you bring your

1280
00:36:18,796 --> 0:36:19,666
iPad app to the Mac.

1281
00:36:20,586 --> 0:36:21,796
So, here are set of extensions

1282
00:36:21,796 --> 0:36:23,286
which are supported but you may

1283
00:36:23,286 --> 0:36:24,856
find some API differences.

1284
00:36:25,946 --> 0:36:26,806
These extensions will

1285
00:36:26,806 --> 0:36:28,156
automatically work with both

1286
00:36:28,266 --> 0:36:30,766
AppKit and UIKit Macs -- apps on

1287
00:36:30,766 --> 0:36:31,086
the Mac.

1288
00:36:31,626 --> 0:36:32,716
So, for example, a Share

1289
00:36:32,716 --> 0:36:34,196
Extension in your application

1290
00:36:34,836 --> 0:36:35,926
will appear in the Share menu

1291
00:36:36,056 --> 0:36:37,096
right alongside the Share

1292
00:36:37,096 --> 0:36:38,226
Extension in an AppKit

1293
00:36:38,226 --> 0:36:38,786
application.

1294
00:36:39,416 --> 0:36:42,786
There are also a number of ACPI

1295
00:36:42,786 --> 0:36:43,996
extension -- or sorry, number of

1296
00:36:43,996 --> 0:36:45,506
extensions that do not currently

1297
00:36:45,506 --> 0:36:46,716
work on macOS.

1298
00:36:47,526 --> 0:36:49,126
Many of this, do not make sense

1299
00:36:49,126 --> 0:36:50,456
on macOS today like Sticker

1300
00:36:50,456 --> 0:36:52,516
Packs, Custom Keyboards or

1301
00:36:52,516 --> 0:36:54,356
iMessage extensions because the

1302
00:36:54,356 --> 0:36:55,406
corresponding functionality

1303
00:36:55,406 --> 0:36:57,706
doesn't exist on macOS and in

1304
00:36:57,706 --> 0:36:58,876
some cases such as the File

1305
00:36:58,876 --> 0:37:00,266
Provider, you should switch to

1306
00:36:58,876 --> 0:37:00,266
Provider, you should switch to

1307
00:37:00,266 --> 0:37:01,726
the macOS File Provider

1308
00:37:02,056 --> 0:37:03,016
extension directly.

1309
00:37:04,926 --> 0:37:05,946
So, we've seen a number of API

1310
00:37:05,946 --> 0:37:06,896
differences that will impact

1311
00:37:06,896 --> 0:37:07,856
your iPad apps for Mac.

1312
00:37:08,286 --> 0:37:09,286
Let's take a look at the demo of

1313
00:37:09,286 --> 0:37:10,256
how you can start to deal with

1314
00:37:10,256 --> 0:37:11,056
some of these differences in

1315
00:37:11,056 --> 0:37:11,836
your application.

1316
00:37:26,696 --> 0:37:29,146
So, our recipe application has

1317
00:37:29,376 --> 0:37:31,306
the ability to mark a recipe as

1318
00:37:31,306 --> 0:37:33,516
a favorite and you can see one

1319
00:37:33,516 --> 0:37:34,326
of the recipes already has a

1320
00:37:34,326 --> 0:37:35,436
heart next to it, to show the

1321
00:37:35,436 --> 0:37:35,926
state.

1322
00:37:36,446 --> 0:37:38,326
Now the app has a custom

1323
00:37:38,326 --> 0:37:39,616
multi-touch gesture that will

1324
00:37:39,616 --> 0:37:40,756
toggle the favorite state.

1325
00:37:41,366 --> 0:37:43,116
But as we discussed that won't

1326
00:37:43,116 --> 0:37:43,696
work on the Mac.

1327
00:37:44,166 --> 0:37:45,566
So, let's add a custom menu item

1328
00:37:45,566 --> 0:37:46,466
to do that instead.

1329
00:37:55,626 --> 0:37:56,656
So, first thing we need to do is

1330
00:37:56,726 --> 0:37:59,146
disable our Custom Gesture

1331
00:37:59,146 --> 0:37:59,736
Recognizer.

1332
00:38:01,156 --> 0:38:01,986
We'll do that by wrapping it

1333
00:38:01,986 --> 0:38:03,026
with the target conditional that

1334
00:38:03,026 --> 0:38:04,096
we talked about before.

1335
00:38:06,106 --> 0:38:07,186
Oops, that.

1336
00:38:09,016 --> 0:38:10,296
Hang on one second.

1337
00:38:19,426 --> 0:38:22,706
OK. And then, the next thing we

1338
00:38:22,706 --> 0:38:27,346
need to do is take the method

1339
00:38:27,346 --> 0:38:28,426
that that Gesture Recognizer

1340
00:38:28,426 --> 0:38:29,106
calls which is

1341
00:38:29,106 --> 0:38:30,016
toggleSelectedRecipe

1342
00:38:30,066 --> 0:38:32,216
FavoriteState and mark it with

1343
00:38:32,216 --> 0:38:33,656
the IBAction annotation.

1344
00:38:34,016 --> 0:38:36,696
This is so IB -- or the IB can

1345
00:38:36,696 --> 0:38:37,406
see this.

1346
00:38:37,436 --> 0:38:39,626
And then, finally, we need to

1347
00:38:40,186 --> 0:38:41,776
add a Menu Validation method,

1348
00:38:41,776 --> 0:38:43,456
and this will toggle the menu

1349
00:38:43,456 --> 0:38:45,146
item between remove favorite and

1350
00:38:45,146 --> 0:38:47,106
make favorite based on whether

1351
00:38:47,106 --> 0:38:48,266
the currently selective recipe

1352
00:38:48,266 --> 0:38:48,786
is favorite.

1353
00:38:49,446 --> 0:38:52,646
Now, we just need to add our

1354
00:38:52,646 --> 0:38:53,416
custom menu.

1355
00:38:54,166 --> 0:38:59,006
So, we'll go to the Storyboard

1356
00:38:59,006 --> 0:39:00,056
Editor and we'll drag out the

1357
00:38:59,006 --> 0:39:00,056
Editor and we'll drag out the

1358
00:39:00,056 --> 0:39:00,636
main menu.

1359
00:39:06,256 --> 0:39:08,906
Oops, sorry, I dragged the wrong

1360
00:39:08,906 --> 0:39:09,176
thing.

1361
00:39:09,726 --> 0:39:11,616
Main menu.

1362
00:39:13,006 --> 0:39:14,636
We want to add a new menu item

1363
00:39:14,636 --> 0:39:16,136
to the file menu.

1364
00:39:16,996 --> 0:39:18,216
So, I'll add an inline menu

1365
00:39:18,216 --> 0:39:18,696
section.

1366
00:39:19,916 --> 0:39:21,076
We only need one of these items

1367
00:39:21,076 --> 0:39:21,256
here.

1368
00:39:21,256 --> 0:39:22,376
So, we'll delete the other one.

1369
00:39:23,466 --> 0:39:24,556
We'll change this to Make

1370
00:39:24,556 --> 0:39:25,036
Favorite.

1371
00:39:27,096 --> 0:39:28,336
We'll give this a command key

1372
00:39:28,336 --> 0:39:28,716
equivalent.

1373
00:39:35,096 --> 0:39:36,486
And then all we need to do is

1374
00:39:36,486 --> 0:39:37,536
wire that up to the first

1375
00:39:37,536 --> 0:39:38,116
responder.

1376
00:39:39,826 --> 0:39:41,036
And have it send that same

1377
00:39:41,036 --> 0:39:41,846
method that our Gesture

1378
00:39:41,846 --> 0:39:42,666
Recognizer would send.

1379
00:39:43,386 --> 0:39:44,926
So, now, let's build and run our

1380
00:39:44,926 --> 0:39:45,486
application.

1381
00:39:55,186 --> 0:39:56,936
I think that was in the wrong

1382
00:39:56,936 --> 0:39:57,186
place.

1383
00:40:07,986 --> 0:40:08,726
So, now, you see we have a new

1384
00:40:08,726 --> 0:40:10,036
menu item called Make Favorite

1385
00:40:10,036 --> 0:40:11,566
and when I click that we see the

1386
00:40:11,566 --> 0:40:13,876
Favorite icon and of course

1387
00:40:13,876 --> 0:40:15,166
remove -- the changes removed

1388
00:40:15,166 --> 0:40:16,356
Favorite Network as well and

1389
00:40:16,356 --> 0:40:17,596
we'll just test our menu short

1390
00:40:17,686 --> 0:40:18,996
-- clicking shortcut and of

1391
00:40:18,996 --> 0:40:19,826
course that works as well.

1392
00:40:20,516 --> 0:40:27,500
[ Applause ]

1393
00:40:32,056 --> 0:40:33,186
So, you've just seen how easy it

1394
00:40:33,186 --> 0:40:34,686
is to bring your iPad apps to

1395
00:40:34,686 --> 0:40:35,116
the Mac.

1396
00:40:35,306 --> 0:40:36,106
So, if your app's a good

1397
00:40:36,106 --> 0:40:37,756
candidate, then check the box

1398
00:40:37,756 --> 0:40:38,716
and get your app building and

1399
00:40:38,716 --> 0:40:39,326
running on the Mac.

1400
00:40:39,756 --> 0:40:41,716
As always consult the docs and

1401
00:40:41,716 --> 0:40:42,596
release notes for the latest

1402
00:40:42,596 --> 0:40:44,216
information and we'll be in the

1403
00:40:44,216 --> 0:40:45,646
labs right after this session to

1404
00:40:45,646 --> 0:40:47,396
help you out and please join us

1405
00:40:47,396 --> 0:40:48,696
on Thursday afternoon at Taking

1406
00:40:48,696 --> 0:40:50,326
iPad Apps for Mac to the next

1407
00:40:50,326 --> 0:40:50,656
level.

1408
00:40:51,286 --> 0:40:52,456
We we'll cover how you can make

1409
00:40:52,456 --> 0:40:54,196
your app feel even more at home

1410
00:40:54,196 --> 0:40:55,766
on the Mac by incorporating

1411
00:40:55,766 --> 0:40:57,136
platforms specific features.

1412
00:40:58,026 --> 0:40:58,846
Please check out the, What's New

1413
00:40:58,846 --> 0:41:00,376
in iOS and macOS Design session

1414
00:40:58,846 --> 0:41:00,376
in iOS and macOS Design session

1415
00:41:00,376 --> 0:41:02,036
later today where we'll discuss

1416
00:41:02,076 --> 0:41:03,366
design considerations when

1417
00:41:03,366 --> 0:41:04,366
bringing your iPad app to the

1418
00:41:04,366 --> 0:41:06,326
Mac, and finally, the Font

1419
00:41:06,326 --> 0:41:07,746
Management and Text Scaling

1420
00:41:07,746 --> 0:41:08,806
session on Thursday morning.

1421
00:41:08,976 --> 0:41:10,196
We'll go into detail about how

1422
00:41:10,196 --> 0:41:11,756
new fonts are handled or how

1423
00:41:11,756 --> 0:41:13,086
fonts are handled in iPad apps

1424
00:41:13,086 --> 0:41:13,406
for Mac.

1425
00:41:13,846 --> 0:41:14,796
Thanks. Enjoy the rest of the

1426
00:41:14,796 --> 0:41:14,906
show.

1427
00:41:15,516 --> 0:41:19,500
[ Applause ]
