1
00:00:06,640 --> 0:00:10,477
（MAC OS关于安全性的改进）

2
00:00:12,880 --> 0:00:13,981
大家早上好

3
00:00:15,148 --> 0:00:16,383
感谢大家今天来参加我们的演讲

4
00:00:17,584 --> 0:00:18,685
我是Garrett

5
00:00:18,752 --> 0:00:21,455
我在Apple安全工程

6
00:00:22,055 --> 0:00:24,458
今天我们要讲

7
00:00:24,858 --> 0:00:26,059
关于安全性的一些改进

8
00:00:29,029 --> 0:00:30,230
这是本场演讲的进度安排

9
00:00:30,831 --> 0:00:33,767
我们要深入地讲一下

10
00:00:33,834 --> 0:00:35,202
以及如何在macOS中实施

11
00:00:36,103 --> 0:00:39,373
然后我们要深入macOS

12
00:00:39,907 --> 0:00:42,142
Gatekeeper

13
00:00:45,145 --> 0:00:46,647
让我们先从纵深防御开始讲

14
00:00:46,713 --> 0:00:47,414
（纵深防御）

15
00:00:47,481 --> 0:00:50,484
对于macOS这样一种既复杂

16
00:00:50,551 --> 0:00:52,553
又有很多用例的产品来说

17
00:00:54,154 --> 0:00:56,723
没有任何一种技术或功能

18
00:00:56,790 --> 0:00:58,792
可以独立提供完美的安全性

19
00:00:59,860 --> 0:01:03,597
因此在设计macOS时

20
00:00:59,860 --> 0:01:03,597
因此在设计macOS时

21
00:01:04,364 --> 0:01:06,733
每个层面都有具体的目的或目标

22
00:01:08,635 --> 0:01:12,506
并且每一年我们都会改进

23
00:01:12,906 --> 0:01:15,609
从而保证你们的安全

24
00:01:18,645 --> 0:01:20,781
这就是纵深防御的原则的一个应用

25
00:01:22,049 --> 0:01:25,352
目标是确保其中一个层面的

26
00:01:26,119 --> 0:01:28,989
不会破坏系统的整个安全模型

27
00:01:31,725 --> 0:01:34,661
相反 我们依赖于通过不同性能

28
00:01:34,995 --> 0:01:36,129
提供多重保护

29
00:01:36,897 --> 0:01:40,067
有些层面可以拖延攻击者的前进

30
00:01:41,101 --> 0:01:43,837
其它层面可以减少某组件的攻击面

31
00:01:44,571 --> 0:01:46,673
有一些层面可以创建阻碍

32
00:01:47,007 --> 0:01:49,009
可以让它更轻松地防御特定资产

33
00:01:53,280 --> 0:01:56,183
今天我们在这里要谈macOS中

34
00:01:56,850 --> 0:01:58,185
关于安全性的两个截然不同的层面

35
00:01:59,219 --> 0:02:01,788
首先我们先稍微讲一下

36
00:01:59,219 --> 0:02:01,788
首先我们先稍微讲一下

37
00:02:02,356 --> 0:02:04,525
它是安全性的一个很重要的外部层面

38
00:02:04,958 --> 0:02:06,793
用于第一时间防止恶意软件

39
00:02:06,860 --> 0:02:08,961
在你的系统上运行

40
00:02:11,131 --> 0:02:13,834
然后我们会讲用户隐私权保护

41
00:02:14,568 --> 0:02:17,237
用于确保即使恶意软件

42
00:02:17,304 --> 0:02:18,872
能应付Gatekeeper

43
00:02:19,273 --> 0:02:22,943
它也不一定可以访问

44
00:02:25,879 --> 0:02:26,947
让我们讲一下Gatekeeper

45
00:02:28,015 --> 0:02:29,950
初次引入Gatekeeper时

46
00:02:30,450 --> 0:02:32,019
与开发者ID程序一起

47
00:02:32,653 --> 0:02:34,721
它的目标是防止广泛的…

48
00:02:35,255 --> 0:02:38,825
防止爆发 防止恶意软件的广泛爆发

49
00:02:40,027 --> 0:02:42,696
但多年以来 它的目标有所扩大

50
00:02:43,363 --> 0:02:46,099
现在它用于保护用户

51
00:02:46,166 --> 0:02:49,336
不运行恶意软件 并让用户控制

52
00:02:49,803 --> 0:02:51,205
他们在Mac上所运行的东西

53
00:02:53,006 --> 0:02:56,343
它的具体实现方式在多年以来

54
00:02:57,144 --> 0:02:58,645
虽然有很多细微差别

55
00:02:59,046 --> 0:03:03,383
但Gatekeeper的意图通常

56
00:02:59,046 --> 0:03:03,383
但Gatekeeper的意图通常

57
00:03:04,718 --> 0:03:07,621
我们谈谈如今Gatekeeper

58
00:03:10,524 --> 0:03:13,460
有四件事我们认为是

59
00:03:15,128 --> 0:03:16,096
第一件事…

60
00:03:19,466 --> 0:03:21,802
第一是恶意内容扫描

61
00:03:22,903 --> 0:03:25,739
从而确保在即将运行的app中

62
00:03:26,240 --> 0:03:27,574
没有任何已知的恶意内容

63
00:03:30,210 --> 0:03:32,813
第二是署名验证

64
00:03:33,247 --> 0:03:35,616
从而确保app没有被篡改

65
00:03:35,916 --> 0:03:37,484
因为开发者对它署名了

66
00:03:40,854 --> 0:03:42,890
第三是身份验证

67
00:03:43,490 --> 0:03:46,527
我们正是用这个来强制实施计算机的

68
00:03:47,261 --> 0:03:49,596
如果用户选择了

69
00:03:49,663 --> 0:03:50,531
他们只希望运行

70
00:03:50,998 --> 0:03:52,099
或已认证的开发者的软件

71
00:03:52,666 --> 0:03:55,469
我们就不允许运行由其它任何人署名

72
00:03:55,536 --> 0:03:57,137
或根本没有署名的软件

73
00:04:00,107 --> 0:04:02,276
最后是首次启动提示

74
00:04:02,876 --> 0:04:06,446
这是为了确保用户实际上希望

75
00:04:09,583 --> 0:04:11,818
如果我们不讲

76
00:04:12,352 --> 0:04:14,555
我们就不能讲

77
00:04:15,989 --> 0:04:17,291
在macOS Mojave中

78
00:04:18,225 --> 0:04:23,597
Gatekeeper在经由

79
00:04:24,264 --> 0:04:25,599
隔离软件的首次启动时运行它的扫描

80
00:04:27,467 --> 0:04:28,902
为了更好地理解

81
00:04:29,169 --> 0:04:31,238
我们需要深入了解一下

82
00:04:31,705 --> 0:04:33,774
以及它对于经由LaunchServices

83
00:04:34,708 --> 0:04:35,742
让我们看一下吧

84
00:04:39,112 --> 0:04:40,781
隔离是一种技术

85
00:04:41,181 --> 0:04:45,953
它嵌入在macOS中用于标记

86
00:04:46,587 --> 0:04:47,621
从设备以外的其它地方

87
00:04:48,188 --> 0:04:50,257
当你从web浏览器中下载文件时

88
00:04:50,791 --> 0:04:53,760
或当某人通过iMessages

89
00:04:54,595 --> 0:04:57,798
或如果你进行隔空投送

90
00:04:59,032 --> 0:05:00,033
此外

91
00:04:59,032 --> 0:05:00,033
此外

92
00:05:00,300 --> 0:05:04,171
macOS将向那个文件添加

93
00:05:05,239 --> 0:05:06,840
当我们呈现首次启动提示时

94
00:05:07,207 --> 0:05:10,944
我们可以为你提供

95
00:05:12,412 --> 0:05:15,148
现在隔离是一个选择加入模型

96
00:05:15,983 --> 0:05:16,984
那意味着app

97
00:05:17,050 --> 0:05:19,887
需要选择加入才能隔离

98
00:05:21,321 --> 0:05:24,124
这通常意味着当app在后台下载时

99
00:05:24,391 --> 0:05:27,594
作为比如自我更新的一部分

100
00:05:27,961 --> 0:05:29,863
那些文件通常永远不会被隔离

101
00:05:31,798 --> 0:05:34,301
有个例外情况

102
00:05:35,169 --> 0:05:38,405
因为默认隔离沙盒化app的文件

103
00:05:41,275 --> 0:05:43,510
这会帮助你更好地了解系统上

104
00:05:43,577 --> 0:05:44,845
哪些文件会被隔离

105
00:05:45,579 --> 0:05:47,915
现在让我们谈谈启动服务

106
00:05:51,318 --> 0:05:54,555
启动服务是一个框架

107
00:05:55,756 --> 0:05:58,292
通常在你能想到的在Mac上

108
00:05:58,358 --> 0:06:00,460
启动app的绝大多数方式中

109
00:05:58,358 --> 0:06:00,460
启动app的绝大多数方式中

110
00:06:01,361 --> 0:06:04,264
比如当你在Finder

111
00:06:04,665 --> 0:06:05,832
将会使用启动服务

112
00:06:06,934 --> 0:06:08,969
如果你使用了

113
00:06:09,403 --> 0:06:11,505
通常也会使用启动服务

114
00:06:12,673 --> 0:06:14,775
当app经由文档处理器

115
00:06:14,842 --> 0:06:16,176
或直接经由URL打开时

116
00:06:16,476 --> 0:06:17,845
都会使用启动服务

117
00:06:20,747 --> 0:06:22,216
在接下来的演讲中

118
00:06:22,516 --> 0:06:25,686
当我具体讲经由启动服务路径的

119
00:06:25,752 --> 0:06:27,354
我将使用这个Finder图标

120
00:06:33,260 --> 0:06:35,295
但还有许多加载代码的方式

121
00:06:35,829 --> 0:06:37,331
不经由启动服务

122
00:06:38,498 --> 0:06:40,434
这是其中一些例子但并不详尽

123
00:06:40,801 --> 0:06:43,770
包括使用NSTask来启动进程

124
00:06:44,838 --> 0:06:46,907
或exec和

125
00:06:48,041 --> 0:06:51,345
或使用NSBundle API

126
00:06:51,411 --> 0:06:52,913
用于加载或dlopen

127
00:06:55,015 --> 0:06:56,450
在接下来的演讲中

128
00:06:57,618 --> 0:06:59,119
当我提及不经由启动服务路径

129
00:06:59,820 --> 0:07:03,457
我将使用这个终端图标

130
00:06:59,820 --> 0:07:03,457
我将使用这个终端图标

131
00:07:06,727 --> 0:07:09,696
现在让我们以一种

132
00:07:10,163 --> 0:07:12,633
更容易谈论今年的变化的形式

133
00:07:12,699 --> 0:07:13,901
迅速总结一下

134
00:07:17,237 --> 0:07:20,374
在这里我们可以看到

135
00:07:21,208 --> 0:07:24,244
在启动服务路径上

136
00:07:24,912 --> 0:07:26,380
Gatekeeper的行为

137
00:07:27,214 --> 0:07:29,483
Gatekeeper

138
00:07:29,983 --> 0:07:32,753
和署名检查 以确保没有任何已知的

139
00:07:32,819 --> 0:07:34,788
以及app没有被篡改过

140
00:07:36,623 --> 0:07:38,392
然后它会实施本地政策检查

141
00:07:38,992 --> 0:07:41,762
默认情况是app必须

142
00:07:42,396 --> 0:07:43,263
或由App Store进行签名

143
00:07:44,665 --> 0:07:47,100
最后它会给用户呈现首次启动提醒

144
00:07:47,467 --> 0:07:49,136
从而用户必须批准app

145
00:07:50,771 --> 0:07:56,343
从最新发布的macOS Mojave

146
00:07:57,344 --> 0:07:59,413
默认政策发生了轻微的改变

147
00:08:00,113 --> 0:08:02,349
新的Mac开发者证书

148
00:08:02,850 --> 0:08:06,086
要求他们的软件必须经过公证

149
00:08:08,789 --> 0:08:11,825
这就是我们在macOS Catalina

150
00:08:12,693 --> 0:08:16,129
我们扩展了这个政策

151
00:08:16,597 --> 0:08:17,731
从而所有新软件都需要进行公证

152
00:08:19,933 --> 0:08:24,471
在这种情况下 “新”的意思是

153
00:08:24,838 --> 0:08:27,241
在2019年6月1日以后签名

154
00:08:28,942 --> 0:08:32,212
这意味着全部现有软件将继续通过

155
00:08:32,279 --> 0:08:33,547
不予改变

156
00:08:34,081 --> 0:08:36,149
只需要开发者ID证书签名即可

157
00:08:37,049 --> 0:08:40,419
但所有新软件必须经过公证才能通过

158
00:08:44,791 --> 0:08:45,759
现在…

159
00:08:46,560 --> 0:08:48,829
我们在macOS Catalina中

160
00:08:49,596 --> 0:08:51,532
Gatekeeper将扩展到

161
00:08:52,499 --> 0:08:56,537
在所有隔离软件上强制实施

162
00:08:58,071 --> 0:08:59,706
那意味着无论

163
00:08:59,773 --> 0:09:01,241
软件是如何加载的

164
00:08:59,773 --> 0:09:01,241
软件是如何加载的

165
00:09:01,875 --> 0:09:06,580
如果它是隔离软件

166
00:09:07,247 --> 0:09:08,682
它必须没有被篡改

167
00:09:09,449 --> 0:09:11,552
新软件将需要进行公证

168
00:09:12,753 --> 0:09:14,788
首次启动政策也有些微改变

169
00:09:15,222 --> 0:09:18,325
我们不要求用户批准

170
00:09:18,892 --> 0:09:21,728
独立的可执行文件或库的首次启动

171
00:09:22,496 --> 0:09:25,432
但对于所有捆绑软件来说

172
00:09:29,169 --> 0:09:30,838
因此现在

173
00:09:30,904 --> 0:09:34,241
扫描所有隔离软件

174
00:09:35,809 --> 0:09:38,612
这就把我们引向我们在macOS

175
00:09:39,880 --> 0:09:41,915
Gatekeeper将为你

176
00:09:43,083 --> 0:09:46,587
通过确保所有软件都进行了

177
00:09:49,556 --> 0:09:52,159
那意味着无论软件是否被隔离

178
00:09:53,026 --> 0:09:54,761
无论代码是如何加载的

179
00:09:55,629 --> 0:09:57,698
只要找到任何已知恶意内容

180
00:09:58,365 --> 0:10:01,235
软件都将被阻止…并且会警告用户

181
00:09:58,365 --> 0:10:01,235
软件都将被阻止…并且会警告用户

182
00:10:04,538 --> 0:10:07,908
这就是Gatekeeper

183
00:10:07,975 --> 0:10:11,545
从而为你提供保护

184
00:10:13,580 --> 0:10:15,482
重点是要记住一件事

185
00:10:18,285 --> 0:10:21,121
我们的目标是默认保护每一个

186
00:10:22,589 --> 0:10:26,660
而不是阻止你想在

187
00:10:26,727 --> 0:10:28,629
（你总是可以选择在你的系统上

188
00:10:28,695 --> 0:10:30,597
那意味着总是有一种方式

189
00:10:30,964 --> 0:10:32,799
可以让你运行

190
00:10:33,066 --> 0:10:35,235
你想在你的系统上运行的特定软件

191
00:10:39,406 --> 0:10:42,442
刚才我稍微提了一下

192
00:10:42,509 --> 0:10:45,579
我们一直持续不断地改进

193
00:10:45,646 --> 0:10:46,947
每个层面的技术和政策

194
00:10:48,348 --> 0:10:50,551
我还想花点时间稍微提一下

195
00:10:51,818 --> 0:10:52,819
Gatekeeper的下一个改进

196
00:10:54,821 --> 0:10:56,957
现在我们安全工程团队

197
00:10:57,591 --> 0:10:58,559
有一个很大的目标

198
00:10:58,959 --> 0:11:03,096
我们想让macOS

199
00:10:58,959 --> 0:11:03,096
我们想让macOS

200
00:11:04,031 --> 0:11:06,233
同时仍保持

201
00:11:06,733 --> 0:11:08,502
你所期待的Mac的所有灵活性

202
00:11:09,703 --> 0:11:11,638
那代表着一些非常有意思的挑战

203
00:11:13,006 --> 0:11:14,575
但有一件事变得非常清楚

204
00:11:16,210 --> 0:11:19,179
平台的安全性已经变得越来越依赖于

205
00:11:19,246 --> 0:11:20,914
代码签名的有效性了

206
00:11:24,618 --> 0:11:27,554
这意味着如果app没有签名…

207
00:11:29,690 --> 0:11:31,525
将不可能检测到篡改

208
00:11:34,728 --> 0:11:38,632
更进一步

209
00:11:41,101 --> 0:11:46,473
当In-Out在运行时自我修改时

210
00:11:46,540 --> 0:11:48,442
将很难区分恶意篡改和一般篡改

211
00:11:53,447 --> 0:11:55,215
在未来版本的macOS中

212
00:11:55,849 --> 0:11:58,085
将默认不再运行任何无签名的代码

213
00:12:01,955 --> 0:12:03,056
为了实现这个目标

214
00:12:03,123 --> 0:12:06,527
你们可以做一些事情

215
00:12:06,827 --> 0:12:07,728
来帮助改善平台的安全性

216
00:12:09,463 --> 0:12:13,967
首先是签署并公证你所发布的

217
00:12:14,568 --> 0:12:16,170
即使它目前没有被隔离

218
00:12:19,173 --> 0:12:20,374
（我们需要你们的帮助）

219
00:12:21,008 --> 0:12:22,176
第二…

220
00:12:22,676 --> 0:12:26,046
不要在运行时损坏app或捆绑签名

221
00:12:26,980 --> 0:12:28,815
如果你需要更新app

222
00:12:29,082 --> 0:12:31,485
请确保最后的结果是磁盘上的app

223
00:12:31,818 --> 0:12:33,921
仍进行了适当的签名和公证

224
00:12:37,491 --> 0:12:41,128
最后请记住加载代码可能会失败

225
00:12:41,762 --> 0:12:43,964
如果你尝试加载隔离库或进程

226
00:12:44,031 --> 0:12:45,566
而用户选择不运行它的话

227
00:12:46,300 --> 0:12:50,571
那将会运行失败 请确保你的app

228
00:12:56,476 --> 0:12:59,379
这就是Gatekeeper的

229
00:12:59,646 --> 0:13:02,115
从而尝试防止在你的Mac上

230
00:12:59,646 --> 0:13:02,115
从而尝试防止在你的Mac上

231
00:13:03,250 --> 0:13:04,551
现在让我们邀请Kelly上台

232
00:13:04,618 --> 0:13:07,187
讲一下在用户隐私权保护方面的改进

233
00:13:07,254 --> 0:13:08,155
（用户隐私权保护）

234
00:13:08,222 --> 0:13:09,056
Kelly

235
00:13:14,127 --> 0:13:15,128
嗯 谢谢Garrett

236
00:13:15,529 --> 0:13:16,463
大家早上好

237
00:13:16,763 --> 0:13:17,664
我是Kelly Yancey

238
00:13:17,731 --> 0:13:19,499
我和Garrett都是

239
00:13:19,566 --> 0:13:20,834
与架构团队的一员

240
00:13:21,335 --> 0:13:24,204
去年在WWDC 2018时

241
00:13:24,738 --> 0:13:27,908
我很荣幸地介绍了

242
00:13:28,242 --> 0:13:29,510
macOS Mojave中的

243
00:13:29,910 --> 0:13:31,378
具有广泛特征…抱歉

244
00:13:32,312 --> 0:13:33,146
让我们回顾一下

245
00:13:33,213 --> 0:13:36,483
这些保护用于提高用户

246
00:13:36,550 --> 0:13:38,852
对于如何访问他们的数据的透明度

247
00:13:39,119 --> 0:13:40,821
并为用户提供对那些访问的控制

248
00:13:41,288 --> 0:13:42,890
今天我能再次回到这里

249
00:13:43,223 --> 0:13:45,959
我要与大家分享我们在

250
00:13:47,494 --> 0:13:49,096
具有广泛特征

251
00:13:50,531 --> 0:13:52,633
隐私权保护要求用户准许

252
00:13:52,933 --> 0:13:55,002
访问可能会记录用户的硬件

253
00:13:55,068 --> 0:13:56,970
比如摄像头或麦克风

254
00:13:58,038 --> 0:14:01,041
或准许访问用户的隐私敏感文件

255
00:13:58,038 --> 0:14:01,041
或准许访问用户的隐私敏感文件

256
00:14:01,909 --> 0:14:03,911
比如照片、邮件或消息

257
00:14:05,245 --> 0:14:07,581
此外还保护

258
00:14:07,981 --> 0:14:09,349
自动化其它app的能力

259
00:14:09,716 --> 0:14:13,720
从而用户可以控制在app之间

260
00:14:14,988 --> 0:14:17,224
今天我想先讲记录功能

261
00:14:18,792 --> 0:14:20,093
自macOS Mojave起

262
00:14:20,527 --> 0:14:23,964
在app访问摄像头或麦克风之前

263
00:14:25,065 --> 0:14:26,366
然后在

264
00:14:26,834 --> 0:14:30,170
进一步要求用户准许记录

265
00:14:30,871 --> 0:14:32,506
或他们在键盘上键入的键

266
00:14:33,507 --> 0:14:34,741
这很重要

267
00:14:35,008 --> 0:14:37,578
因为这就好比我们不希望人们

268
00:14:37,644 --> 0:14:40,514
越过我们的肩膀来看我们正在做什么

269
00:14:41,114 --> 0:14:44,251
我们不希望app偷窥

270
00:14:44,885 --> 0:14:47,788
我们的联系信息、银行信息

271
00:14:47,855 --> 0:14:49,122
或密码等等

272
00:14:49,790 --> 0:14:51,625
无论是有意或无意的

273
00:14:53,594 --> 0:14:54,661
我们该如何实现呢？

274
00:14:54,728 --> 0:14:56,163
让我们先看一下屏幕记录

275
00:14:57,764 --> 0:15:00,734
这是使用

276
00:14:57,764 --> 0:15:00,734
这是使用

277
00:15:01,201 --> 0:15:03,136
实时记录显示屏上的内容的简单示例

278
00:15:03,904 --> 0:15:05,239
在macOS Catalina上

279
00:15:05,305 --> 0:15:07,808
这个app首次运行时…

280
00:15:08,609 --> 0:15:11,211
将会执行创建

281
00:15:12,045 --> 0:15:13,881
它将返回无

282
00:15:14,681 --> 0:15:16,049
并显示一个对话框

283
00:15:16,583 --> 0:15:19,052
指导用户进入安全和隐私首选项

284
00:15:20,454 --> 0:15:23,023
如果用户希望app记录屏幕的话

285
00:15:23,757 --> 0:15:24,825
用户可以批准它这样做

286
00:15:27,060 --> 0:15:30,264
当读取其它app窗口中的内容时

287
00:15:31,064 --> 0:15:33,500
比如有个功能是把窗口中的内容

288
00:15:33,567 --> 0:15:35,335
保存为磁盘上的一张图片

289
00:15:36,837 --> 0:15:40,073
很显然

290
00:15:41,074 --> 0:15:43,510
可以返回无

291
00:15:44,244 --> 0:15:46,847
不属于发起调用的app

292
00:15:47,648 --> 0:15:50,684
并且也不属于桌面背景图

293
00:15:51,218 --> 0:15:52,286
或菜单栏

294
00:15:52,352 --> 0:15:54,354
我想强调的是 这是背景图

295
00:15:54,421 --> 0:15:58,292
它不包含桌面上的任何图标

296
00:16:01,028 --> 0:16:03,030
可能会给用户显示授权对话框

297
00:16:03,363 --> 0:16:06,867
指导用户批准app

298
00:16:06,934 --> 0:16:08,068
进行屏幕记录

299
00:16:08,135 --> 0:16:11,638
因为对话框只在首次记录时显示

300
00:16:11,705 --> 0:16:15,509
CGWindowListCreateImage

301
00:16:15,843 --> 0:16:18,312
可能会由于没有批准屏幕记录而失败

302
00:16:20,814 --> 0:16:23,483
我要讲的另一个

303
00:16:23,550 --> 0:16:25,586
与屏幕记录相关的外围话题是

304
00:16:26,887 --> 0:16:30,123
app可以使用Core Graphics框架的

305
00:16:30,557 --> 0:16:34,194
查询关于屏幕上打开或处于后台的

306
00:16:36,830 --> 0:16:41,235
所返回的元数据包含

307
00:16:41,668 --> 0:16:43,370
和唯一的窗口标识符

308
00:16:43,437 --> 0:16:45,239
以及拥有窗口的app的

309
00:16:45,639 --> 0:16:47,040
标识符的名称和进程

310
00:16:48,909 --> 0:16:52,179
然而窗口名称和共享状态不可用

311
00:16:52,446 --> 0:16:55,682
除非用户预批准app可以进行

312
00:16:56,650 --> 0:16:58,785
这是因为有些app会在窗口名称中

313
00:16:58,852 --> 0:17:04,191
比如账户名称或更可能是网页URL

314
00:16:58,852 --> 0:17:04,191
比如账户名称或更可能是网页URL

315
00:17:05,425 --> 0:17:08,462
并且CGWindowListCopyWindowInfo

316
00:17:08,996 --> 0:17:10,597
永远不会触发授权提示

317
00:17:10,664 --> 0:17:13,599
但它会过滤它给调用它的app

318
00:17:14,201 --> 0:17:17,604
因此如果你的app依赖于

319
00:17:17,671 --> 0:17:18,505
比如说

320
00:17:19,205 --> 0:17:20,973
你会发现所返回的元数据

321
00:17:21,040 --> 0:17:22,342
不包含窗口名称

322
00:17:22,910 --> 0:17:26,747
你可能想警告用户并把用户指向隐私

323
00:17:26,813 --> 0:17:28,182
安全与隐私首选项设置

324
00:17:30,117 --> 0:17:31,852
这里有一个示例函数

325
00:17:32,586 --> 0:17:35,355
在每次显示中都可以获取

326
00:17:35,923 --> 0:17:38,125
桌面背景图的唯一窗口标识符

327
00:17:38,892 --> 0:17:40,661
再一次 背景图

328
00:17:40,727 --> 0:17:43,430
不包含桌面上的图标

329
00:17:46,500 --> 0:17:50,037
这个函数首先会获取屏幕上

330
00:17:50,337 --> 0:17:53,207
使用CGWindowListCopyWindowInfo

331
00:17:54,608 --> 0:17:57,945
然后它获取

332
00:17:58,212 --> 0:18:01,281
用于桌面背景图窗口的窗口级别

333
00:17:58,212 --> 0:18:01,281
用于桌面背景图窗口的窗口级别

334
00:18:03,217 --> 0:18:07,154
然后再过滤整个窗口列表

335
00:18:07,221 --> 0:18:09,122
只保留桌面背景窗口级的窗口

336
00:18:10,357 --> 0:18:13,093
如果你从网上查一下

337
00:18:13,160 --> 0:18:16,029
都是按kCG窗口名称过滤的

338
00:18:16,296 --> 0:18:19,132
因为窗口名称可能包含

339
00:18:19,466 --> 0:18:22,169
可能要求用户预批准app

340
00:18:23,203 --> 0:18:26,273
然而通过以窗口级别而不是窗口名称

341
00:18:26,540 --> 0:18:28,942
识别桌面背景窗口

342
00:18:29,743 --> 0:18:32,646
无论用户是否预批准app

343
00:18:32,713 --> 0:18:33,747
都能进行识别

344
00:18:33,814 --> 0:18:37,584
这正是app设计的小修改

345
00:18:37,651 --> 0:18:40,921
可以导致用户体验的

346
00:18:41,321 --> 0:18:42,723
大改变的一个例子

347
00:18:43,357 --> 0:18:44,725
（Catalina中的记录保护）

348
00:18:45,759 --> 0:18:49,329
这是macOS Catalina

349
00:18:49,396 --> 0:18:50,831
不经你允许就被记录下来的方式

350
00:18:51,365 --> 0:18:54,935
app可以自由记录

351
00:18:56,270 --> 0:18:58,539
菜单栏和桌面背景图

352
00:18:59,740 --> 0:19:02,776
但用户必须使用

353
00:18:59,740 --> 0:19:02,776
但用户必须使用

354
00:19:03,177 --> 0:19:07,181
预批准app记录整个屏幕

355
00:19:07,581 --> 0:19:09,550
或除它们自己的窗口之外的

356
00:19:12,052 --> 0:19:14,121
我想讲一下

357
00:19:14,188 --> 0:19:16,657
受保护的其它记录功能：你的键盘

358
00:19:18,258 --> 0:19:20,194
现在绝大多数用户都期待

359
00:19:20,661 --> 0:19:24,198
他们的键盘

360
00:19:24,264 --> 0:19:25,299
也就是处于最前的app

361
00:19:25,999 --> 0:19:28,368
并且绝大多数app都仅当用户

362
00:19:28,435 --> 0:19:29,970
正在使用它们时才会要求键盘输入

363
00:19:30,304 --> 0:19:33,073
事实上如果你的app使用了

364
00:19:33,373 --> 0:19:34,608
它们会自动处理

365
00:19:34,675 --> 0:19:36,510
提交到你的app的键盘事件

366
00:19:37,678 --> 0:19:39,613
有些app希望能在键盘事件

367
00:19:40,113 --> 0:19:42,249
提交到app时进行拦截

368
00:19:42,749 --> 0:19:45,986
这没问题 可以通过创建

369
00:19:46,386 --> 0:19:47,921
并覆盖sendEvent方法实现

370
00:19:48,455 --> 0:19:49,623
或像这里所显示的这样

371
00:19:49,890 --> 0:19:53,393
你可以使用NSEvent的

372
00:19:56,930 --> 0:19:58,632
监控所有键盘事件

373
00:19:59,066 --> 0:20:02,069
包括其它app的键盘事件

374
00:19:59,066 --> 0:20:02,069
包括其它app的键盘事件

375
00:20:03,170 --> 0:20:06,673
在这里你可以看到一个使用

376
00:20:07,674 --> 0:20:10,611
用于调用按下和释放键事件的回调

377
00:20:11,712 --> 0:20:13,380
这段代码首次运行时

378
00:20:13,914 --> 0:20:18,785
这个调用CGEventTapCreate

379
00:20:22,022 --> 0:20:24,825
与此同时给用户显示一个对话框

380
00:20:24,892 --> 0:20:26,660
把用户指向安全与隐私首选项设置

381
00:20:27,294 --> 0:20:30,230
用户可以批准你的app在后台监控

382
00:20:30,564 --> 0:20:32,332
如果他们愿意的话

383
00:20:35,068 --> 0:20:37,204
app可能会检查授权状态

384
00:20:37,271 --> 0:20:38,906
而不需要触发批准提示

385
00:20:40,007 --> 0:20:42,743
使用

386
00:20:42,809 --> 0:20:45,946
和kIOHIDRequestTypeListenEvent

387
00:20:48,715 --> 0:20:51,552
并且app可以请求显示一个

388
00:20:51,618 --> 0:20:55,255
而不需要使用IOHIDRequestAccess

389
00:20:55,856 --> 0:20:59,826
创建一个事件标签来尝试发布事件

390
00:21:02,362 --> 0:21:05,265
总的来说 macOS Catalina

391
00:21:05,332 --> 0:21:07,701
app记录他们屏幕上的内容

392
00:21:08,202 --> 0:21:09,970
或他们通过键盘进行的键入

393
00:21:10,037 --> 0:21:11,138
（用户隐私权保护记录功能）

394
00:21:11,205 --> 0:21:15,709
现在我想让你们注意一下

395
00:21:15,776 --> 0:21:17,277
对你们的隐私敏感性文件的访问

396
00:21:19,279 --> 0:21:21,348
macOS Catalina

397
00:21:21,915 --> 0:21:26,186
对用户的文件和文件夹的

398
00:21:26,653 --> 0:21:27,988
隐私保护提供两大级别

399
00:21:28,789 --> 0:21:31,325
第一 app通常可能

400
00:21:31,391 --> 0:21:32,960
比如联系方式或照片

401
00:21:33,260 --> 0:21:36,296
对于这些数据 macOS将在

402
00:21:36,363 --> 0:21:38,465
确认用户的准许

403
00:21:39,867 --> 0:21:42,236
第二 还有一些用户数据

404
00:21:42,569 --> 0:21:45,239
这些数据在文件系统中只是

405
00:21:45,305 --> 0:21:46,206
并不是API的一部分

406
00:21:46,940 --> 0:21:50,310
诸如邮件、消息

407
00:21:51,078 --> 0:21:52,913
要访问这些数据

408
00:21:52,980 --> 0:21:56,250
因为这些文件

409
00:21:56,316 --> 0:21:58,318
比如磁盘管理或备份实用程序

410
00:21:59,786 --> 0:22:01,722
但首先让我们谈谈需要用户批准

411
00:21:59,786 --> 0:22:01,722
但首先让我们谈谈需要用户批准

412
00:22:01,788 --> 0:22:03,557
才能访问的文件和文件夹

413
00:22:05,192 --> 0:22:07,995
macOS Mojave

414
00:22:08,562 --> 0:22:12,599
用于通过文件系统访问你的

415
00:22:12,933 --> 0:22:13,967
联系方式、日历、提醒或相册

416
00:22:14,735 --> 0:22:16,503
当app尝试访问这些类别中的

417
00:22:17,738 --> 0:22:20,440
看起来就是这样一个提示

418
00:22:22,109 --> 0:22:24,745
这与我们刚才看到的

419
00:22:24,811 --> 0:22:28,382
用于屏幕记录和键盘事件记录的

420
00:22:29,316 --> 0:22:32,519
调用线程实际上宁愿被阻止

421
00:22:33,720 --> 0:22:36,023
也不愿意停止访问并给用户显示警告

422
00:22:36,089 --> 0:22:39,593
它会等待用户批准或拒绝app

423
00:22:42,229 --> 0:22:43,597
在macOS Catalina中

424
00:22:43,664 --> 0:22:45,165
我们给这些类别补充了

425
00:22:45,966 --> 0:22:50,170
这些额外的类别

426
00:22:51,405 --> 0:22:54,308
这些代表用户用于存储文档的

427
00:22:56,009 --> 0:22:57,311
他们在Finder中双击

428
00:22:58,312 --> 0:23:01,081
通过打开或保存面板进行选择 等等

429
00:22:58,312 --> 0:23:01,081
通过打开或保存面板进行选择 等等

430
00:23:02,883 --> 0:23:05,986
用户的桌面和文档文件夹

431
00:23:06,053 --> 0:23:08,789
因为那是许多用户保存文件的

432
00:23:10,123 --> 0:23:13,026
并且因为某些app

433
00:23:13,527 --> 0:23:15,295
在下载时默认把所下载的文件

434
00:23:17,798 --> 0:23:20,834
同时也要保护在

435
00:23:20,901 --> 0:23:23,804
或在第三方云存储中保存的文档

436
00:23:24,705 --> 0:23:26,206
或在可移除空间中保存的文档

437
00:23:26,273 --> 0:23:27,841
并且如果你像我一样经验丰富

438
00:23:27,908 --> 0:23:29,343
你看能会考虑保护软盘上的文档

439
00:23:29,977 --> 0:23:33,080
但在这里我是指可能会被移除的

440
00:23:33,480 --> 0:23:36,083
包括USB拇指驱动或外部磁盘

441
00:23:38,252 --> 0:23:40,487
并且我相信摄影师可以证明

442
00:23:40,854 --> 0:23:43,957
有些人一辈子都使用外部磁盘

443
00:23:44,458 --> 0:23:46,793
或使用网络附加的存储

444
00:23:49,229 --> 0:23:51,465
因此macOS Catalina

445
00:23:51,865 --> 0:23:54,768
我们用于存储文件的绝大多数

446
00:23:57,037 --> 0:23:58,038
现在…

447
00:23:58,939 --> 0:24:02,643
用户不需要批准app

448
00:23:58,939 --> 0:24:02,643
用户不需要批准app

449
00:24:02,709 --> 0:24:04,444
在任意受保护的位置创建新文档

450
00:24:05,579 --> 0:24:07,347
只是为了读取现有内容

451
00:24:08,582 --> 0:24:10,384
文件内容已经存在了

452
00:24:11,151 --> 0:24:13,754
比如说文件传输app

453
00:24:14,488 --> 0:24:17,991
可以继续把新文件保存到用户的

454
00:24:18,358 --> 0:24:19,960
而不需要出发准许提示

455
00:24:21,495 --> 0:24:24,565
macOS Catalina中的

456
00:24:25,599 --> 0:24:27,768
现在支持用户意图的概念

457
00:24:29,336 --> 0:24:33,340
当在Finder中双击文件时

458
00:24:33,974 --> 0:24:36,777
当从另一个app中进行拖拽时

459
00:24:37,144 --> 0:24:39,713
或当在打开或保存面板中选择文件时

460
00:24:41,248 --> 0:24:43,350
并且当用户实施任意一种上述动作时

461
00:24:44,852 --> 0:24:49,389
在文件受保护的地方实施

462
00:24:50,390 --> 0:24:52,759
你的app都将访问用户所选的

463
00:24:53,160 --> 0:24:56,096
而不需要触发准许提示

464
00:24:57,965 --> 0:25:01,835
让我们看一下相对于用户准许而言

465
00:24:57,965 --> 0:25:01,835
让我们看一下相对于用户准许而言

466
00:25:02,302 --> 0:25:03,670
Catalina如何推断用户意图

467
00:25:05,539 --> 0:25:06,507
抱歉

468
00:25:07,274 --> 0:25:10,277
首先用户准许是被动的

469
00:25:11,011 --> 0:25:15,582
只有当app尝试读写文件时

470
00:25:16,183 --> 0:25:17,651
然而用户意图是主动的

471
00:25:18,318 --> 0:25:22,155
甚至在app试图读写文件之前

472
00:25:24,324 --> 0:25:28,128
并且用户准许提示可能会中断

473
00:25:28,395 --> 0:25:32,132
然而用户意图是从标准的UI交互中

474
00:25:33,433 --> 0:25:35,068
为了尽可能减少这些中断

475
00:25:35,335 --> 0:25:38,739
用户准许可应用于所有数据 比如说

476
00:25:38,805 --> 0:25:40,007
你桌面上的所有文件

477
00:25:40,674 --> 0:25:43,377
然而用户意图仅针对

478
00:25:43,443 --> 0:25:44,845
用户所交互的一个或多个文件

479
00:25:46,180 --> 0:25:48,282
尽管如此 这两者并不相互排斥

480
00:25:49,249 --> 0:25:51,518
只要你的app访问它所创建的文件

481
00:25:51,852 --> 0:25:53,220
或用户所选的文件

482
00:25:53,754 --> 0:25:55,355
就不需要触发准许提示

483
00:25:56,456 --> 0:25:59,293
但如果你的app要访问处于

484
00:25:59,793 --> 0:26:01,528
而不是它自己所创建的文件

485
00:25:59,793 --> 0:26:01,528
而不是它自己所创建的文件

486
00:26:02,329 --> 0:26:03,897
或也不是用户所选的文件

487
00:26:04,798 --> 0:26:07,568
用户就需要通过准许提示

488
00:26:08,836 --> 0:26:10,037
有一个常见的情境

489
00:26:10,637 --> 0:26:13,974
app可能需要访问用户所选的

490
00:26:14,374 --> 0:26:16,677
即附带文件

491
00:26:17,778 --> 0:26:21,481
比如自动打开与电影文件名称相同的

492
00:26:22,282 --> 0:26:25,385
但字幕文件位于电影文件旁边

493
00:26:27,187 --> 0:26:30,224
因此使用NSFileCoordinator中的

494
00:26:31,325 --> 0:26:34,895
可以推断对一个文件的许可

495
00:26:34,962 --> 0:26:37,397
可以扩展到对其它文件的许可

496
00:26:41,435 --> 0:26:44,004
要使用NSFileCoordinator

497
00:26:44,505 --> 0:26:48,542
你首先需要在你的app中声明

498
00:26:49,843 --> 0:26:52,479
CFBundleDocumentTypes Info.plist

499
00:26:53,280 --> 0:26:59,052
并把NSIsRelatedItemType的

500
00:27:00,120 --> 0:27:01,221
然后在你的代码中

501
00:27:02,422 --> 0:27:04,124
创建NSFilePresenter

502
00:27:05,392 --> 0:27:09,363
把primaryPresentedItemURL

503
00:27:10,197 --> 0:27:12,099
也就是你的app

504
00:27:12,966 --> 0:27:15,335
并把PresentedItemURL

505
00:27:15,669 --> 0:27:17,070
也就是你想要访问的那个文件

506
00:27:18,438 --> 0:27:20,974
请注意 附带文件的扩展名可以

507
00:27:21,475 --> 0:27:22,943
与用户所选文件的扩展名不同

508
00:27:23,010 --> 0:27:25,679
但所有其它组成部分都必须相同

509
00:27:27,281 --> 0:27:28,348
最后

510
00:27:28,615 --> 0:27:33,754
创建NSFileCoordinator

511
00:27:35,022 --> 0:27:38,325
当你调用NSFileCoordinator的

512
00:27:38,725 --> 0:27:41,094
在那一段时间内

513
00:27:41,995 --> 0:27:43,096
你的app同时也会获取

514
00:27:45,332 --> 0:27:47,768
这是关于app如何使用

515
00:27:47,835 --> 0:27:50,971
来获取拥有文件名称相同

516
00:27:51,271 --> 0:27:52,806
但扩展名与用户所选的文件不同的

517
00:27:53,574 --> 0:27:56,176
文件的访问权限的简单介绍

518
00:27:56,243 --> 0:27:57,244
而不会触发用户准许提示

519
00:27:58,612 --> 0:28:01,014
为了安全地推断用户意图

520
00:27:58,612 --> 0:28:01,014
为了安全地推断用户意图

521
00:28:01,081 --> 0:28:04,852
现在打开并保存面板总是处于

522
00:28:05,953 --> 0:28:08,622
因此类继承和视图等级就发生了改变

523
00:28:09,022 --> 0:28:11,325
这可能会对你的app产生影响

524
00:28:11,391 --> 0:28:14,027
如果你有NSOpenPanel

525
00:28:16,196 --> 0:28:19,633
app将再也不能

526
00:28:20,100 --> 0:28:22,102
通过调用OK方法显示面板

527
00:28:22,569 --> 0:28:23,971
用户必须自己操作

528
00:28:26,006 --> 0:28:27,207
NSOpenSavePanelDelegate方法

529
00:28:27,274 --> 0:28:30,677
也有些微的修改

530
00:28:32,112 --> 0:28:35,582
app再也不能使用这个方法来重写

531
00:28:38,018 --> 0:28:41,121
访问URL提供给这些方法的文件

532
00:28:41,388 --> 0:28:43,223
可能会触发用户准许提示

533
00:28:43,490 --> 0:28:45,659
因为这些方法是通过面板进行调用的

534
00:28:46,727 --> 0:28:48,996
而在此过程中用户仍正在与面板

535
00:28:49,062 --> 0:28:50,597
因此他们还未选择文件

536
00:28:51,398 --> 0:28:53,600
因此你的app还未被授权访问

537
00:28:55,903 --> 0:28:58,071
现在app可以测试指定文件

538
00:28:58,138 --> 0:29:01,775
或可写 而不需要使用这些API

539
00:28:58,138 --> 0:29:01,775
或可写 而不需要使用这些API

540
00:29:04,344 --> 0:29:07,881
只要你的app仅访问

541
00:29:08,415 --> 0:29:11,418
它自己所创建的文件或用户…

542
00:29:11,985 --> 0:29:15,756
通过文件打开事件或拖放

543
00:29:15,822 --> 0:29:18,158
或打开面板或保存面板选择

544
00:29:18,725 --> 0:29:21,328
将推断app被许可访问这些文件

545
00:29:21,395 --> 0:29:23,797
并且没有必要显示准许提示

546
00:29:24,698 --> 0:29:25,666
然而

547
00:29:26,133 --> 0:29:27,935
如果需要显示准许提示

548
00:29:28,669 --> 0:29:32,105
所有新的受保护的文件系统位置

549
00:29:32,940 --> 0:29:34,842
你可以在Info.plist中

550
00:29:34,908 --> 0:29:38,946
用于解释当显示准许提示时

551
00:29:43,784 --> 0:29:46,253
用于这些类别的目的字符串是可选的

552
00:29:47,020 --> 0:29:49,556
如果你的app要访问其中一个

553
00:29:50,290 --> 0:29:51,358
是有意地访问

554
00:29:51,992 --> 0:29:54,895
我们强烈推荐你对该位置添加

555
00:29:54,962 --> 0:29:58,532
从而用户了解app为什么要访问

556
00:29:59,333 --> 0:30:01,201
如果你发现在你的测试中

557
00:29:59,333 --> 0:30:01,201
如果你发现在你的测试中

558
00:30:01,268 --> 0:30:03,770
你的app触发了

559
00:30:04,271 --> 0:30:07,274
你可以点击“不允许”按钮

560
00:30:07,341 --> 0:30:09,376
并查找所产生的沙盒冲突

561
00:30:09,443 --> 0:30:12,079
那会告诉你app所尝试访问的文件

562
00:30:12,779 --> 0:30:15,916
并回溯导致它

563
00:30:18,752 --> 0:30:19,953
需要显示准许提示的根由

564
00:30:22,022 --> 0:30:24,591
这即macOS Catalina

565
00:30:25,025 --> 0:30:28,295
以及标准UI如何

566
00:30:28,362 --> 0:30:30,797
推断他们期待app访问哪个文档

567
00:30:32,266 --> 0:30:35,802
让我们看一下macOS如何保护

568
00:30:36,069 --> 0:30:37,437
由系统管理的用户数据

569
00:30:37,504 --> 0:30:40,040
以及app如何请求访问那些数据

570
00:30:42,242 --> 0:30:43,710
在这里我们看到

571
00:30:43,977 --> 0:30:46,046
就受保护的数据类别

572
00:30:47,681 --> 0:30:51,151
一些软件 比如磁盘管理或备份软件

573
00:30:51,652 --> 0:30:53,787
需要处理所有文件

574
00:30:54,788 --> 0:30:55,789
并且那些软件…

575
00:30:56,423 --> 0:31:00,060
那些app可以使用与我们刚才

576
00:30:56,423 --> 0:31:00,060
那些app可以使用与我们刚才

577
00:31:00,928 --> 0:31:03,096
用于决定给定文件是否可读或可写

578
00:31:03,630 --> 0:31:05,399
然后取决于什么适合app

579
00:31:05,465 --> 0:31:08,669
它们可以跳过不可访问的文件

580
00:31:08,735 --> 0:31:10,304
并指导他们

581
00:31:10,370 --> 0:31:13,207
批准app获取完整权限

582
00:31:17,077 --> 0:31:19,179
这就是用户批准完整磁盘权限的地方

583
00:31:20,981 --> 0:31:22,049
既然我们已经到这了

584
00:31:22,382 --> 0:31:24,885
我想讲一下我们在

585
00:31:24,952 --> 0:31:26,053
所做的一个改进

586
00:31:27,187 --> 0:31:30,624
我们改进了用户批准app

587
00:31:30,958 --> 0:31:33,260
同时用户仍可以使用这个加号按钮

588
00:31:33,527 --> 0:31:35,362
手动向列表中添加app

589
00:31:36,630 --> 0:31:38,699
我们从开发者们那里得到的

590
00:31:39,466 --> 0:31:41,435
用户找到他们的app的

591
00:31:42,336 --> 0:31:43,637
可能会很尴尬

592
00:31:44,905 --> 0:31:46,673
因此

593
00:31:47,241 --> 0:31:49,476
由于缺乏完整磁盘权限批准

594
00:31:49,543 --> 0:31:51,612
而被拒绝访问的可执行文件

595
00:31:51,912 --> 0:31:53,981
现在可以未经检查就进行预填充

596
00:31:55,082 --> 0:31:58,051
在这里我们看到这样的helper

597
00:32:00,254 --> 0:32:02,389
如果那个helper嵌入到

598
00:32:02,756 --> 0:32:04,291
将显示指定捆绑包

599
00:32:05,259 --> 0:32:08,529
图标中的显示名称

600
00:32:12,533 --> 0:32:14,168
再一次 被预批准获取

601
00:32:14,635 --> 0:32:16,937
可以访问这个数据

602
00:32:17,771 --> 0:32:22,309
app使用FileManager

603
00:32:23,010 --> 0:32:23,844
并且如果有必要的话

604
00:32:23,911 --> 0:32:26,747
还可以指导用户进入

605
00:32:27,848 --> 0:32:31,018
用户可以在那里批准app的权限

606
00:32:32,786 --> 0:32:35,222
在Catalina中

607
00:32:35,522 --> 0:32:37,925
需要预批准完整磁盘权限的数据

608
00:32:38,392 --> 0:32:41,495
已经进行了扩展 从而包含垃圾数据

609
00:32:43,330 --> 0:32:45,832
许多人认为只要他们把文件

610
00:32:46,200 --> 0:32:47,734
文件就消失了

611
00:32:48,535 --> 0:32:49,903
因此他们所期待的最后一件事就是

612
00:32:50,337 --> 0:32:52,439
有一个东西能深入到他们的

613
00:32:54,341 --> 0:32:55,542
这太吓人了

614
00:32:59,580 --> 0:33:00,881
与其它类别的数据一样

615
00:32:59,580 --> 0:33:00,881
与其它类别的数据一样

616
00:33:01,481 --> 0:33:03,851
垃圾数据可能包含大量

617
00:33:03,917 --> 0:33:05,786
然而与其它类别不同

618
00:33:05,853 --> 0:33:09,890
垃圾数据以文件为中心

619
00:33:10,490 --> 0:33:11,558
诸如这样的API

620
00:33:12,593 --> 0:33:14,294
会把文件移到用户的回收站中

621
00:33:15,796 --> 0:33:19,600
现在我想稍微深入地讲一下

622
00:33:20,100 --> 0:33:24,404
它把文件的URL作为参数

623
00:33:26,940 --> 0:33:29,810
调用参数的app需要已经获取

624
00:33:29,877 --> 0:33:31,745
你不能把你自己

625
00:33:31,812 --> 0:33:33,113
移到回收站

626
00:33:34,748 --> 0:33:38,185
但如果成功 它会在文件在用户的

627
00:33:38,252 --> 0:33:42,523
用文件的NSURL

628
00:33:43,790 --> 0:33:45,893
并且它仍可以访问那个URL

629
00:33:46,560 --> 0:33:48,729
为了讲得通 它在把文件移到回收站

630
00:33:48,795 --> 0:33:50,631
在它把文件移到回收站之后

631
00:33:50,697 --> 0:33:53,667
这就可以让你使用

632
00:33:53,734 --> 0:33:55,202
把文件从回收站中移回去

633
00:33:57,604 --> 0:34:00,073
总而言之

634
00:33:57,604 --> 0:34:00,073
总而言之

635
00:34:00,407 --> 0:34:01,942
来枚举回收站中的文件时

636
00:34:02,342 --> 0:34:03,777
或来查看那些文件内容时

637
00:34:04,444 --> 0:34:08,014
不需要任何授权就可以把文件

638
00:34:08,081 --> 0:34:10,751
或访问它们之前放在回收站中的文件

639
00:34:13,286 --> 0:34:15,489
最后我要简单讲一下自动化

640
00:34:17,056 --> 0:34:19,993
macOS Mojave

641
00:34:20,561 --> 0:34:22,596
自动化准许要求

642
00:34:22,963 --> 0:34:25,331
这对于防止恶意软件滥用你所信任

643
00:34:25,399 --> 0:34:26,600
并与之共享数据的app来说

644
00:34:31,505 --> 0:34:33,106
首先是合成事件

645
00:34:33,373 --> 0:34:34,675
合成输入事件

646
00:34:34,741 --> 0:34:38,344
一般由可访问性软件用于提供

647
00:34:39,646 --> 0:34:42,181
对键盘或鼠标输入的帮助

648
00:34:45,185 --> 0:34:46,887
但因为用户准许对话框

649
00:34:47,454 --> 0:34:50,290
用户意图界面或其它各种安全性提示

650
00:34:51,190 --> 0:34:52,926
都依赖于用户输入

651
00:34:53,860 --> 0:34:56,797
合成输入事件仅被允许发生在

652
00:34:56,864 --> 0:34:58,832
用户所安装的用作代理的app中

653
00:34:59,333 --> 0:35:01,502
这一点很重要

654
00:34:59,333 --> 0:35:01,502
这一点很重要

655
00:35:03,136 --> 0:35:04,171
这里有段示例代码…

656
00:35:05,372 --> 0:35:08,642
这是一个代码示例 模拟…

657
00:35:09,443 --> 0:35:11,011
按下键和释放键

658
00:35:12,513 --> 0:35:13,847
这段代码首次运行时…

659
00:35:15,682 --> 0:35:18,452
并尝试发布这些事件时

660
00:35:19,620 --> 0:35:20,687
这些事件被丢弃了

661
00:35:21,955 --> 0:35:25,125
并给用户显示类似这样的对话框

662
00:35:25,192 --> 0:35:27,628
他们需要进入安全与隐私首选项设置

663
00:35:28,262 --> 0:35:30,564
授权app获取可访问性功能

664
00:35:32,866 --> 0:35:35,636
之前我们看过这段

665
00:35:35,702 --> 0:35:37,037
用于监听键盘事件的示例代码

666
00:35:38,772 --> 0:35:40,641
如果我把

667
00:35:41,975 --> 0:35:44,211
defaultTap…

668
00:35:45,479 --> 0:35:46,513
就像那样的

669
00:35:48,148 --> 0:35:51,218
CGEventTapCreate

670
00:35:51,652 --> 0:35:54,188
而回调可以改动事件流

671
00:35:54,254 --> 0:35:56,924
这意味着现在你的app有一种

672
00:35:56,990 --> 0:35:58,659
向系统的其余部分

673
00:36:00,294 --> 0:36:03,764
而仅监听事件要求输入监控的授权

674
00:36:04,131 --> 0:36:07,434
修改事件轻触

675
00:36:09,436 --> 0:36:12,539
app可以测试用户

676
00:36:12,973 --> 0:36:14,541
合成本地…

677
00:36:14,608 --> 0:36:18,645
合成输入事件 通过

678
00:36:19,413 --> 0:36:21,882
这与检查键盘输入监控授权的API

679
00:36:21,949 --> 0:36:23,717
是同一个API

680
00:36:24,484 --> 0:36:26,386
但你可以在这里看到我们传递了

681
00:36:26,453 --> 0:36:29,857
kIOHIDRequestTypePostEvent

682
00:36:32,426 --> 0:36:34,561
因此这通过合成事件自动化了

683
00:36:35,362 --> 0:36:37,831
现在让我们谈谈通过Apple事件

684
00:36:39,499 --> 0:36:42,870
在app用AppleScript

685
00:36:42,936 --> 0:36:45,739
来控制其它app的动作之前

686
00:36:46,907 --> 0:36:48,542
这些准许提示指明了

687
00:36:48,609 --> 0:36:51,245
哪些app处于哪些其它app的

688
00:36:51,612 --> 0:36:53,881
并为用户提供了对那个自动化的控制

689
00:36:55,449 --> 0:36:58,318
但没有为发送进程

690
00:37:00,721 --> 0:37:04,825
提供隐私敏感性数据的访问权限的

691
00:37:06,126 --> 0:37:08,795
许多这样的时间都经由

692
00:37:11,231 --> 0:37:14,568
AEDeterminePermissionToAutomate

693
00:37:15,736 --> 0:37:19,273
可用于测试向目标app发送

694
00:37:19,339 --> 0:37:20,641
是否需要授权

695
00:37:21,742 --> 0:37:22,743
这里有个例子

696
00:37:23,210 --> 0:37:26,213
测试调用者是否可向Keynote

697
00:37:28,615 --> 0:37:30,350
通过传递布尔值为真

698
00:37:30,851 --> 0:37:32,719
对于

699
00:37:33,086 --> 0:37:36,423
你可以请求…

700
00:37:37,624 --> 0:37:39,493
但我要指出的是如果显示了提示

701
00:37:39,560 --> 0:37:42,296
发起调用的线程将被阻止

702
00:37:42,596 --> 0:37:44,798
因此你一定不想在app的主线程上

703
00:37:45,966 --> 0:37:48,135
这个API的级别很低

704
00:37:48,202 --> 0:37:50,704
它会返回一个

705
00:37:51,271 --> 0:37:55,609
调用者是否被允许向

706
00:37:57,211 --> 0:37:59,746
尝试发送Apple事件

707
00:38:00,147 --> 0:38:01,481
以确认用户的准许

708
00:38:02,082 --> 0:38:04,117
或目标当前不在运行

709
00:38:04,184 --> 0:38:06,720
而尝试发送可能会导致启动目标的

710
00:38:07,888 --> 0:38:09,590
或是否产生某些报错

711
00:38:11,458 --> 0:38:13,193
这是关于macOS

712
00:38:13,994 --> 0:38:16,964
如何捕捉用户的准许

713
00:38:17,464 --> 0:38:19,867
以及app如何决定是否提供准许

714
00:38:19,933 --> 0:38:21,034
并进行相应的调整的快速总结

715
00:38:21,468 --> 0:38:22,870
（Catalina中的

716
00:38:23,470 --> 0:38:25,205
在macOS Catalina中

717
00:38:25,272 --> 0:38:28,942
需要用户准许才能记录

718
00:38:29,009 --> 0:38:31,745
这对于现有的摄像头和麦克风保护

719
00:38:32,579 --> 0:38:34,515
现在许多常用的位置…

720
00:38:34,815 --> 0:38:36,717
也保护许多常用的

721
00:38:36,783 --> 0:38:39,086
比如用户的桌面文档下载

722
00:38:39,953 --> 0:38:42,689
他们的iCloud Drive

723
00:38:43,457 --> 0:38:45,893
可移除的网络空间以及

724
00:38:47,928 --> 0:38:51,899
我们在macOS Catalina中也扩展了

725
00:38:52,332 --> 0:38:55,802
隐私权首选项政策控制

726
00:38:55,869 --> 0:38:56,837
以包含新的受保护资源的服务

727
00:38:57,638 --> 0:39:00,140
我想指出在开发过程中

728
00:38:57,638 --> 0:39:00,140
我想指出在开发过程中

729
00:39:00,574 --> 0:39:03,410
你可能想触发—

730
00:39:03,477 --> 0:39:04,778
你可以再触发提示

731
00:39:05,279 --> 0:39:09,216
并且你可以使用与你在左侧看到的

732
00:39:10,050 --> 0:39:11,785
通过tccutil命令行工具

733
00:39:12,219 --> 0:39:15,322
分别为受保护的资源重设提示状态

734
00:39:16,156 --> 0:39:17,291
（总结）

735
00:39:17,724 --> 0:39:19,159
之前

736
00:39:19,226 --> 0:39:20,894
关于Gatekeeper的改进

737
00:39:21,328 --> 0:39:24,164
我们只讨论了一些…

738
00:39:25,065 --> 0:39:28,635
macOS Catalina中

739
00:39:29,970 --> 0:39:32,339
我想回顾一下

740
00:39:33,640 --> 0:39:36,577
请记住一定要对你所发布的

741
00:39:37,377 --> 0:39:40,414
并且一旦被签署

742
00:39:41,048 --> 0:39:42,716
如果你确实需要修改捆绑包

743
00:39:43,050 --> 0:39:45,986
请一定要把修改转换到另一个

744
00:39:46,320 --> 0:39:47,387
也被签署了的捆绑包中

745
00:39:51,792 --> 0:39:54,661
对于用户隐私权保护

746
00:39:55,229 --> 0:39:57,297
请尝试尽可能地利用标准UI

747
00:39:57,598 --> 0:39:58,699
一定要处理报错

748
00:39:59,032 --> 0:40:01,068
API可能会返回

749
00:39:59,032 --> 0:40:01,068
API可能会返回

750
00:40:01,401 --> 0:40:04,938
如果用户…抱歉

751
00:40:05,005 --> 0:40:06,340
如果用户拒绝准许的话

752
00:40:06,907 --> 0:40:09,510
请记住一旦用户授权你的app

753
00:40:09,576 --> 0:40:11,011
访问他们的个人数据

754
00:40:11,445 --> 0:40:14,481
保护他们隐私权的责任就转交给你了

755
00:40:14,815 --> 0:40:16,183
因此请谨慎处理用户的数据

756
00:40:18,252 --> 0:40:19,720
非常感谢你们 希望你们享受

757
00:40:19,786 --> 0:40:21,421
本周WWDC余下的时光

758
00:40:21,488 --> 0:40:24,424
演讲结束之后就有一场

759
00:40:24,992 --> 0:40:28,562
若你有关于macOS中的安全性或

760
00:40:28,996 --> 0:40:30,030
非常感谢
