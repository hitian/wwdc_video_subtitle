1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:06,516 --> 0:00:10,866
[掌声]

3
00:00:11,366 --> 0:00:11,796
&gt;&gt; 早上好

4
00:00:12,516 --> 0:00:14,656
[掌声]

5
00:00:15,156 --> 0:00:16,056
我是 Josh

6
00:00:16,175 --> 0:00:17,576
我是来自 Apple

7
00:00:17,576 --> 0:00:19,136
技术传播团队的一员

8
00:00:20,436 --> 0:00:22,246
我们的团队非常荣幸

9
00:00:22,246 --> 0:00:23,396
能与来自世界各地的

10
00:00:23,396 --> 0:00:25,856
像你们一样的

11
00:00:25,856 --> 0:00:26,476
开发者合作

12
00:00:27,596 --> 0:00:29,566
我们的目标是帮助你

13
00:00:29,686 --> 0:00:31,856
创造真正优秀的 App

14
00:00:32,735 --> 0:00:34,396
在与你们的对话中

15
00:00:34,396 --> 0:00:36,116
我们学到了很多

16
00:00:36,996 --> 0:00:38,166
我们了解到了

17
00:00:38,166 --> 0:00:39,876
你工作的过程

18
00:00:39,876 --> 0:00:40,966
你面临的挑战 目标

19
00:00:40,966 --> 0:00:42,566
和你的抱负

20
00:00:43,516 --> 0:00:44,736
我们也学习到了那些

21
00:00:44,736 --> 0:00:46,716
帮你走出困境的技巧和技能

22
00:00:46,716 --> 0:00:47,726
也了解了你的困难

23
00:00:49,006 --> 0:00:50,546
尽管我们听到的每个故事

24
00:00:50,546 --> 0:00:52,286
都有一些不同

25
00:00:53,376 --> 0:00:54,566
但是大家身上

26
00:00:54,566 --> 0:00:56,466
也有着诸多共通之处

27
00:00:56,466 --> 0:00:58,116
无论你来自何方

28
00:00:59,536 --> 0:01:01,366
当我们提到“craft”（手艺）这个词

29
00:00:59,536 --> 0:01:01,366
当我们提到“craft”（手艺）这个词

30
00:01:01,946 --> 0:01:03,766
你最先想到的可能是设计

31
00:01:04,495 --> 0:01:06,446
但作为开发者和工程师

32
00:01:06,686 --> 0:01:07,566
我们同样也有“手艺”

33
00:01:08,616 --> 0:01:10,606
毕竟手艺的定义是

34
00:01:10,606 --> 0:01:13,556
计划 制作和执行的技能

35
00:01:14,126 --> 0:01:15,466
它也是用细心 技巧和独创性

36
00:01:15,516 --> 0:01:18,986
来创造和生产的过程

37
00:01:20,916 --> 0:01:22,366
我们用双手书写代码

38
00:01:23,476 --> 0:01:25,206
它对技巧的要求也很高

39
00:01:25,596 --> 0:01:27,236
在我们搭建 App 时

40
00:01:27,236 --> 0:01:28,326
我们使用的技巧

41
00:01:28,556 --> 0:01:30,036
我们做出的选择

42
00:01:30,036 --> 0:01:30,716
都是具有独创性的

43
00:01:31,606 --> 0:01:33,226
今天我想和大家谈谈

44
00:01:33,466 --> 0:01:35,916
手艺和细心

45
00:01:35,916 --> 0:01:38,046
将它们融入到你的代码

46
00:01:38,046 --> 0:01:40,416
你的 Storyboards

47
00:01:40,416 --> 0:01:40,906
和你的产品中

48
00:01:41,596 --> 0:01:43,186
一开始这似乎很简单

49
00:01:43,346 --> 0:01:44,566
但是 作为当今的开发者

50
00:01:44,566 --> 0:01:46,276
我们面临着各种各样的需求

51
00:01:46,276 --> 0:01:48,226
这有时会非常困难

52
00:01:48,996 --> 0:01:51,226
特定技能是随着时间的推移

53
00:01:51,226 --> 0:01:52,236
而发展起来的

54
00:01:52,236 --> 0:01:55,106
这需要奉献 耐心

55
00:01:55,106 --> 0:01:55,876
和专注

56
00:01:56,466 --> 0:01:58,206
学习享受

57
00:01:58,246 --> 0:02:00,356
到达目的的过程

58
00:01:58,246 --> 0:02:00,356
到达目的的过程

59
00:02:00,356 --> 0:02:01,566
就像享受目的本身一样

60
00:02:01,566 --> 0:02:05,166
现在 过程的一部分

61
00:02:05,166 --> 0:02:06,816
也包括把那些可能

62
00:02:06,816 --> 0:02:08,376
一开始需要

63
00:02:08,485 --> 0:02:10,126
集中注意力的事情

64
00:02:10,526 --> 0:02:11,166
转变成习惯

65
00:02:13,036 --> 0:02:14,766
与开车相似

66
00:02:14,766 --> 0:02:16,566
随着经验和实践的积累

67
00:02:16,566 --> 0:02:17,706
我们在开车时

68
00:02:17,706 --> 0:02:19,536
必须有意识地关注的事情

69
00:02:19,536 --> 0:02:21,476
会随着时间的推移而减少

70
00:02:21,706 --> 0:02:23,106
因为我们把它转变成了

71
00:02:23,106 --> 0:02:24,856
自然的 自动的习惯

72
00:02:25,266 --> 0:02:26,726
我们可以在 App 开发中

73
00:02:26,946 --> 0:02:28,026
达到同样的效果

74
00:02:28,696 --> 0:02:30,456
要做到这一点

75
00:02:30,506 --> 0:02:32,236
就意味着培养良好的习惯

76
00:02:32,236 --> 0:02:33,356
而不是坏习惯

77
00:02:34,766 --> 0:02:36,536
当涉及到构建一个 App 时

78
00:02:36,536 --> 0:02:38,836
有很多细节需要注意

79
00:02:38,836 --> 0:02:40,396
作为一个开发者

80
00:02:40,396 --> 0:02:41,996
我们需要关注

81
00:02:41,996 --> 0:02:43,526
很多的细节

82
00:02:43,526 --> 0:02:45,516
然而这些努力

83
00:02:45,516 --> 0:02:46,916
可能很少会被用户

84
00:02:46,916 --> 0:02:48,726
直接看到

85
00:02:48,886 --> 0:02:50,636
然而 它们可以

86
00:02:50,746 --> 0:02:52,856
以重要的形式被感觉到

87
00:02:52,856 --> 0:02:55,166
影响性能 可靠性

88
00:02:55,166 --> 0:02:55,756
和稳定性

89
00:02:57,026 --> 0:02:58,026
其实 细节很多

90
00:02:58,026 --> 0:03:00,366
只是没有足够的时间

91
00:02:58,026 --> 0:03:00,366
只是没有足够的时间

92
00:03:00,366 --> 0:03:01,606
去全部关注到

93
00:03:02,496 --> 0:03:03,886
今天我想花点时间

94
00:03:03,886 --> 0:03:05,886
回顾一下一些实践

95
00:03:05,886 --> 0:03:07,376
这些实践可能会丰富

96
00:03:07,376 --> 0:03:09,366
作为开发者的我们

97
00:03:09,766 --> 0:03:11,316
的工作内容

98
00:03:11,356 --> 0:03:12,896
让我们可以将它们整合到

99
00:03:12,896 --> 0:03:14,566
我们的常规工作流程中

100
00:03:14,566 --> 0:03:16,576
形成主动的习惯

101
00:03:17,346 --> 0:03:18,666
这样我们可以避免挫折

102
00:03:19,326 --> 0:03:21,056
省去麻烦和节约时间

103
00:03:21,056 --> 0:03:24,026
对于你们中的许多人

104
00:03:24,026 --> 0:03:25,286
我相信你们已经在做

105
00:03:25,286 --> 0:03:26,066
这些事情了

106
00:03:26,296 --> 0:03:27,716
但也许有些人

107
00:03:27,716 --> 0:03:29,306
还没有完全

108
00:03:29,306 --> 0:03:29,716
形成习惯

109
00:03:30,076 --> 0:03:31,826
也许你会受到启发

110
00:03:31,826 --> 0:03:32,686
加强练习

111
00:03:33,796 --> 0:03:35,796
首先 让我们梳理一下

112
00:03:36,976 --> 0:03:38,206
除了是一名 App 开发者 

113
00:03:38,246 --> 0:03:40,186
我还是一个木工

114
00:03:40,636 --> 0:03:41,966
我觉得对我而言

115
00:03:41,966 --> 0:03:43,826
这是逃离现代世界的

116
00:03:43,886 --> 0:03:44,256
一个很好的方式

117
00:03:44,546 --> 0:03:46,526
但有一件事是肯定的

118
00:03:46,826 --> 0:03:48,636
漂亮的 精致的家具

119
00:03:48,636 --> 0:03:50,276
一定出自

120
00:03:50,276 --> 0:03:51,986
干净整洁的商店

121
00:03:52,806 --> 0:03:54,646
所以 如果你的工作台杂乱不堪

122
00:03:54,826 --> 0:03:56,626
摆放混乱

123
00:03:56,626 --> 0:03:58,046
就很难找到你

124
00:03:58,046 --> 0:03:59,526
工作时需要的工具和材料

125
00:04:00,136 --> 0:04:01,016
你必须不断地

126
00:04:01,016 --> 0:04:02,706
把东西挪来挪去

127
00:04:02,746 --> 0:04:03,696
为你正在做的工作

128
00:04:03,696 --> 0:04:04,426
腾出空间

129
00:04:04,646 --> 0:04:06,256
简而言之 每件事都比它

130
00:04:06,256 --> 0:04:08,086
应该花费的时间要长得多

131
00:04:08,416 --> 0:04:10,026
在这个过程中会发生更多的

132
00:04:10,026 --> 0:04:11,076
事故和错误

133
00:04:11,616 --> 0:04:13,706
我们的团队每年都

134
00:04:13,706 --> 0:04:14,666
会看到很多 Xcode 项目

135
00:04:14,826 --> 0:04:15,706
当然 保持你的工作区

136
00:04:15,706 --> 0:04:17,176
干净整洁

137
00:04:17,176 --> 0:04:18,706
有很多的办法

138
00:04:18,706 --> 0:04:20,846
能找到激发你

139
00:04:20,875 --> 0:04:22,356
最佳工作表现的

140
00:04:22,426 --> 0:04:23,676
合适位置

141
00:04:24,206 --> 0:04:27,086
Xcode 受益于

142
00:04:27,086 --> 0:04:29,616
基于群组的结构和组织

143
00:04:30,496 --> 0:04:31,996
这使得查看 App 中

144
00:04:31,996 --> 0:04:33,676
每个部分中的文件

145
00:04:33,676 --> 0:04:35,126
变得非常容易

146
00:04:35,126 --> 0:04:37,626
当你要修复 Bug 时

147
00:04:37,676 --> 0:04:39,016
它可以帮助你快速实现

148
00:04:40,146 --> 0:04:42,206
群组最适合

149
00:04:42,206 --> 0:04:43,996
从功能上组织你的项目

150
00:04:43,996 --> 0:04:45,666
这种方式可以遵循用户与 App

151
00:04:45,666 --> 0:04:47,856
潜在的进行交互的方式

152
00:04:48,496 --> 0:04:49,756
我们经常看到

153
00:04:49,936 --> 0:04:52,046
按文件类型分类的项目

154
00:04:52,046 --> 0:04:53,556
或者根本不使用群组

155
00:04:53,556 --> 0:04:55,176
当人们随后

156
00:04:55,176 --> 0:04:56,426
想要快速理解这些

157
00:04:56,426 --> 0:04:57,876
原文件之间的关联时

158
00:04:57,876 --> 0:04:59,476
这样并不能真正帮助人们

159
00:04:59,476 --> 0:05:00,026
解决问题

160
00:04:59,476 --> 0:05:00,026
解决问题

161
00:05:01,226 --> 0:05:02,396
此外 如果你能确保

162
00:05:02,396 --> 0:05:04,646
Xcode 项目结构和文件系统结构

163
00:05:04,646 --> 0:05:06,316
相互匹配

164
00:05:06,316 --> 0:05:08,406
将会非常有帮助

165
00:05:09,286 --> 0:05:11,386
自 Xcode 9 起

166
00:05:11,386 --> 0:05:12,786
当你在项目中创建新群组

167
00:05:12,786 --> 0:05:14,406
它也会在磁盘上

168
00:05:14,406 --> 0:05:15,866
创建一个文件夹

169
00:05:15,866 --> 0:05:17,276
来存放你

170
00:05:17,276 --> 0:05:18,366
该组中的文件

171
00:05:19,406 --> 0:05:20,626
这意味着当你

172
00:05:20,626 --> 0:05:21,686
在源代码控制中查看项目时

173
00:05:21,686 --> 0:05:23,546
或者只是浏览文件系统时

174
00:05:23,546 --> 0:05:25,356
结构是镜像的

175
00:05:25,356 --> 0:05:26,616
这会切实帮助你

176
00:05:26,616 --> 0:05:28,036
减少日后的

177
00:05:28,036 --> 0:05:29,876
混淆和错误

178
00:05:30,756 --> 0:05:32,886
Storyboards 是一个

179
00:05:32,886 --> 0:05:34,536
非常强大的工具

180
00:05:34,536 --> 0:05:35,886
可以用可视化的方式构建用户界面

181
00:05:35,886 --> 0:05:38,676
但我们确实

182
00:05:38,676 --> 0:05:39,966
遇到过很多项目

183
00:05:39,966 --> 0:05:41,586
它们将整个 UI 构建在

184
00:05:41,586 --> 0:05:42,216
一个 Storyboards 中

185
00:05:42,586 --> 0:05:44,126
由于 Storyboards 的引用功能

186
00:05:44,296 --> 0:05:45,656
我们不应该这样做

187
00:05:46,716 --> 0:05:48,176
我们应该为 App 的每个主要部分

188
00:05:48,176 --> 0:05:49,606
使用不同的 Storyboards 文件

189
00:05:49,606 --> 0:05:50,976
然后使用引用功能

190
00:05:50,976 --> 0:05:52,556
将它们连接在一起

191
00:05:52,866 --> 0:05:54,196
你会发现 这样会使分离单个更改

192
00:05:54,196 --> 0:05:55,896
变得非常容易

193
00:05:55,896 --> 0:05:58,096
当与更大的团队一起工作时

194
00:05:58,176 --> 0:05:59,506
它也会使事情变得简单得多

195
00:05:59,706 --> 0:06:00,916
因为你可以避免

196
00:05:59,706 --> 0:06:00,916
因为你可以避免

197
00:06:00,916 --> 0:06:02,826
那些讨厌的合并冲突的风险

198
00:06:02,826 --> 0:06:04,446
并且使解决冲突

199
00:06:04,446 --> 0:06:05,236
变得更容易

200
00:06:06,556 --> 0:06:07,576
就像你不会将整个源代码

201
00:06:07,576 --> 0:06:09,346
放在一个文件中一样

202
00:06:09,346 --> 0:06:11,456
也不要将整个 UI

203
00:06:11,456 --> 0:06:13,336
放在一个 Storyboards 中

204
00:06:15,756 --> 0:06:18,016
保持项目文件的更新

205
00:06:18,416 --> 0:06:19,926
是确保 Xcode 能够帮助你解决问题

206
00:06:19,926 --> 0:06:22,276
并避免问题积累的

207
00:06:22,276 --> 0:06:23,556
重要方法

208
00:06:23,556 --> 0:06:25,956
如果你经常处理的话

209
00:06:25,956 --> 0:06:27,976
这些问题实际上

210
00:06:27,976 --> 0:06:29,216
都算不上是问题

211
00:06:29,736 --> 0:06:31,886
但如果你没有经常处理

212
00:06:31,886 --> 0:06:33,406
在未来的工作中会很容易

213
00:06:33,406 --> 0:06:33,876
出现问题

214
00:06:35,036 --> 0:06:36,766
首先 当你更新到

215
00:06:36,766 --> 0:06:38,546
Xcode 的新版本时

216
00:06:38,546 --> 0:06:39,656
你也有机会让 Xcode 

217
00:06:39,656 --> 0:06:41,476
更新项目设置

218
00:06:41,556 --> 0:06:43,376
并将项目文件

219
00:06:43,376 --> 0:06:45,016
更新到最新的格式

220
00:06:45,016 --> 0:06:46,816
因此 除非你有

221
00:06:46,816 --> 0:06:48,496
重要的理由不更新

222
00:06:48,826 --> 0:06:49,946
否则我们建议你在出现提示时选择更新

223
00:06:49,946 --> 0:06:51,866
或者在问题导航器

224
00:06:51,866 --> 0:06:53,316
中出现警告时进行更新

225
00:06:53,316 --> 0:06:56,766
其次 要确保你的项目

226
00:06:56,766 --> 0:06:58,766
使用的是 2017 年首次发行的

227
00:06:58,766 --> 0:07:00,046
新版 Xcode 构建系统

228
00:06:58,766 --> 0:07:00,046
新版 Xcode 构建系统

229
00:07:00,046 --> 0:07:03,206
它在性能 依赖关系管理方面

230
00:07:03,206 --> 0:07:04,706
提供了显著的改进

231
00:07:05,596 --> 0:07:08,556
这对你采用 Swift 包

232
00:07:08,556 --> 0:07:10,096
绝对是至关重要的

233
00:07:10,666 --> 0:07:13,026
自 Xcode 10 起它就是

234
00:07:13,026 --> 0:07:14,536
默认的构建系统

235
00:07:14,756 --> 0:07:16,036
你可以通过查看文件菜单

236
00:07:16,036 --> 0:07:17,226
下的项目设置

237
00:07:17,226 --> 0:07:18,796
来验证项目

238
00:07:18,796 --> 0:07:20,666
正在使用的构建系统

239
00:07:20,666 --> 0:07:25,266
木工都喜欢保留边角料

240
00:07:25,266 --> 0:07:27,956
以备不时之需

241
00:07:27,956 --> 0:07:30,596
直到有一天

242
00:07:30,596 --> 0:07:32,886
边角料箱装满

243
00:07:32,886 --> 0:07:34,126
我们没办法处理它

244
00:07:34,126 --> 0:07:35,496
我们才不得不接受

245
00:07:35,496 --> 0:07:37,306
这样一个事实

246
00:07:37,306 --> 0:07:38,726
我们一直保留的边角料

247
00:07:38,726 --> 0:07:40,186
永远也无法变成

248
00:07:40,186 --> 0:07:41,846
一个真正像样的项目

249
00:07:42,666 --> 0:07:43,826
作为开发者

250
00:07:43,856 --> 0:07:45,306
我们也有保留碎片的习惯

251
00:07:45,306 --> 0:07:48,626
但对我们来说 这个决定更简单

252
00:07:49,436 --> 0:07:51,556
既然你的项目在

253
00:07:51,556 --> 0:07:53,516
源代码控制之下

254
00:07:53,516 --> 0:07:54,726
你的项目是在源代码控制之下的

255
00:07:54,726 --> 0:07:55,326
对吧

256
00:07:56,576 --> 0:07:58,306
删除那些不需要和

257
00:07:58,306 --> 0:07:59,056
不使用的代码

258
00:08:00,176 --> 0:08:02,946
不要只是把它注释掉

259
00:08:02,946 --> 0:08:04,106
以防有一天你有用

260
00:08:04,106 --> 0:08:06,486
如果你真的需要它

261
00:08:06,486 --> 0:08:07,586
它也会在

262
00:08:07,586 --> 0:08:08,326
历史文件中

263
00:08:08,326 --> 0:08:09,826
你仍然可以把它拿回来

264
00:08:10,296 --> 0:08:14,456
扔掉那些碎片吧

265
00:08:14,456 --> 0:08:15,786
另一个我们不想

266
00:08:15,786 --> 0:08:16,936
泛滥成灾的部分就是

267
00:08:16,936 --> 0:08:18,516
警告

268
00:08:18,786 --> 0:08:20,736
为此 为你自己

269
00:08:20,736 --> 0:08:22,686
和你的团队

270
00:08:22,686 --> 0:08:24,396
建立个没有警告的项目

271
00:08:25,236 --> 0:08:26,536
永远不要在有警告的环境下

272
00:08:26,536 --> 0:08:27,536
保留代码

273
00:08:28,086 --> 0:08:29,336
在编写代码时

274
00:08:29,376 --> 0:08:30,626
应该将警告视为错误

275
00:08:30,626 --> 0:08:32,966
一边做一边修复问题

276
00:08:34,246 --> 0:08:35,716
我们碰到过有

277
00:08:36,186 --> 0:08:37,525
上千个警告的项目

278
00:08:37,756 --> 0:08:39,226
在大多数情况下

279
00:08:39,226 --> 0:08:41,116
它们积累的时间太长

280
00:08:41,116 --> 0:08:43,096
以至于开发者都放弃了

281
00:08:43,096 --> 0:08:44,336
根本没有时间去修复它们

282
00:08:45,226 --> 0:08:45,936
此外 如果你正在

283
00:08:45,936 --> 0:08:47,406
维护这样的项目

284
00:08:48,246 --> 0:08:49,046
当有问题出现时

285
00:08:49,046 --> 0:08:51,046
你不会看到有新的警报

286
00:08:53,036 --> 0:08:54,706
这个已经整理得挺好了

287
00:08:54,886 --> 0:08:56,166
保持工作空间和项目

288
00:08:56,166 --> 0:08:57,956
整洁有序

289
00:08:57,956 --> 0:09:00,376
这对你的 App 的长期健康和成功

290
00:08:57,956 --> 0:09:00,376
这对你的 App 的长期健康和成功

291
00:09:00,376 --> 0:09:00,716
至关重要

292
00:09:01,546 --> 0:09:03,486
所以要使用群组来整理项目

293
00:09:03,526 --> 0:09:06,416
并让这些群组

294
00:09:06,416 --> 0:09:07,416
镜像文件系统结构

295
00:09:08,176 --> 0:09:09,296
使用引用来分解那些

296
00:09:09,296 --> 0:09:10,806
大型 Storyboards

297
00:09:11,516 --> 0:09:13,056
还要确保你的项目文件

298
00:09:13,126 --> 0:09:14,326
是最新的

299
00:09:14,786 --> 0:09:16,386
清除旧的和废弃的代码

300
00:09:16,386 --> 0:09:19,536
找到警告的根源

301
00:09:19,536 --> 0:09:20,926
并在警告出现时

302
00:09:20,926 --> 0:09:21,686
进行修复

303
00:09:21,976 --> 0:09:23,156
做这些事情

304
00:09:23,156 --> 0:09:24,976
会让的项目更加灵活

305
00:09:24,976 --> 0:09:27,116
并且在整个项目的生命周期中

306
00:09:27,116 --> 0:09:28,116
你的工作进展也会更加

307
00:09:28,116 --> 0:09:29,286
顺畅

308
00:09:31,636 --> 0:09:33,736
说到源代码控制

309
00:09:33,736 --> 0:09:34,596
在设置项目时

310
00:09:34,696 --> 0:09:36,876
你一定要做的事

311
00:09:36,926 --> 0:09:38,956
就是启用源代码控制

312
00:09:40,516 --> 0:09:42,206
我们确实遇到过很多

313
00:09:42,206 --> 0:09:43,666
不使用源代码控制的项目

314
00:09:43,666 --> 0:09:45,026
特别是那些

315
00:09:45,026 --> 0:09:46,346
独立开发团队的项目

316
00:09:47,806 --> 0:09:48,836
方便的是 当你设置

317
00:09:48,836 --> 0:09:50,606
一个新的 Xcode 项目时

318
00:09:51,356 --> 0:09:52,676
只需要确保

319
00:09:52,676 --> 0:09:55,076
选中了一个复选框

320
00:09:55,076 --> 0:09:56,196
你的项目就会用 Git 

321
00:09:56,196 --> 0:09:57,126
进行源代码控制了

322
00:09:58,516 --> 0:09:59,866
现在 当你提交

323
00:09:59,866 --> 0:10:00,776
当前的一组更改时

324
00:09:59,866 --> 0:10:00,776
当前的一组更改时

325
00:10:00,776 --> 0:10:00,976
你可以回头查看

326
00:10:02,146 --> 0:10:03,616
你在过去做了哪些更改

327
00:10:03,616 --> 0:10:05,236
以及将要更改的内容

328
00:10:05,416 --> 0:10:06,996
而且更容易捕捉到

329
00:10:06,996 --> 0:10:07,626
任何类型的错误

330
00:10:08,976 --> 0:10:10,346
因此 现在你已经

331
00:10:10,346 --> 0:10:12,086
启用了 Git

332
00:10:12,146 --> 0:10:13,526
为了使它更实用 更高效

333
00:10:13,526 --> 0:10:15,946
你应该牢记一些事情

334
00:10:16,576 --> 0:10:19,936
首先 保持小的体量

335
00:10:20,236 --> 0:10:21,206
定期以小的增量

336
00:10:21,206 --> 0:10:22,536
将代码签入

337
00:10:22,536 --> 0:10:23,936
工作分支

338
00:10:24,196 --> 0:10:25,356
并使这些更改

339
00:10:25,356 --> 0:10:27,886
尽可能本地化和自包含

340
00:10:29,146 --> 0:10:30,176
当你需要回头查看

341
00:10:30,176 --> 0:10:32,686
或者复原时

342
00:10:32,686 --> 0:10:33,976
这将为你提供

343
00:10:33,976 --> 0:10:34,916
回头查看的路径

344
00:10:35,676 --> 0:10:37,106
同时 它会降低

345
00:10:37,106 --> 0:10:38,626
引入回归的几率

346
00:10:38,626 --> 0:10:39,846
因为你的改变

347
00:10:39,846 --> 0:10:41,346
都很微小

348
00:10:42,946 --> 0:10:44,756
第二 写有用的提交消息

349
00:10:44,756 --> 0:10:46,596
因为总有一天

350
00:10:46,596 --> 0:10:48,616
我们会有一些

351
00:10:48,616 --> 0:10:49,836
我们希望自己能够回答的问题

352
00:10:50,166 --> 0:10:51,616
我当时到底在想什么

353
00:10:52,906 --> 0:10:54,186
当你回忆某些代码

354
00:10:54,186 --> 0:10:56,596
在什么情况下发生了更改

355
00:10:56,596 --> 0:10:58,206
以及更改的原因

356
00:10:58,206 --> 0:10:59,906
提交消息就是你

357
00:11:00,236 --> 0:11:01,000
对未来自己的注释

358
00:11:04,726 --> 0:11:06,616
运行源代码控制

359
00:11:06,616 --> 0:11:07,936
就像在大型团队中一样

360
00:11:07,976 --> 0:11:09,876
即便你是一个独立开发者

361
00:11:09,876 --> 0:11:11,796
这意味着可能会

362
00:11:11,796 --> 0:11:13,116
出现 Bug 和新特性

363
00:11:13,366 --> 0:11:14,876
然后 一旦工作收尾

364
00:11:14,876 --> 0:11:17,186
将它们压缩回

365
00:11:17,186 --> 0:11:19,216
主批处理或开发批处理中

366
00:11:19,216 --> 0:11:20,556
并要使用一个干净且有用的

367
00:11:20,586 --> 0:11:21,086
提交消息

368
00:11:21,726 --> 0:11:23,166
现在 有几个选项和模式

369
00:11:23,166 --> 0:11:24,316
可以用于

370
00:11:24,316 --> 0:11:25,576
源代码控制

371
00:11:25,866 --> 0:11:27,656
我们建议仔细浏览它们

372
00:11:27,656 --> 0:11:28,756
找到一个真正适合你的

373
00:11:28,756 --> 0:11:30,296
并将其集成到

374
00:11:30,346 --> 0:11:32,606
你的开发者工作流程中

375
00:11:33,186 --> 0:11:35,136
这就是跟踪

376
00:11:35,786 --> 0:11:37,326
源代码控制对于一个成功的 现代的

377
00:11:37,326 --> 0:11:39,686
App 开发工作流

378
00:11:39,786 --> 0:11:41,016
是绝对关键的

379
00:11:41,266 --> 0:11:42,416
因此 将其作为项目的一部分

380
00:11:42,416 --> 0:11:44,216
并将其作为

381
00:11:44,216 --> 0:11:45,346
常规实践的一部分

382
00:11:45,896 --> 0:11:47,966
保持这些提交短小

383
00:11:47,966 --> 0:11:49,476
并编写有用的提交消息

384
00:11:50,276 --> 0:11:52,376
最后 利用分支来帮助

385
00:11:52,376 --> 0:11:53,946
隔离和管理这些更改

386
00:11:53,946 --> 0:11:58,000
Bug 修复和特性工作

387
00:12:00,276 --> 0:12:02,126
在我看来

388
00:12:02,126 --> 0:12:04,136
对清晰性和可维护性贡献最大的是

389
00:12:04,196 --> 0:12:07,176
代码注释和文档记录

390
00:12:08,226 --> 0:12:09,316
它们是对你的队友

391
00:12:09,316 --> 0:12:10,846
或未来的自己

392
00:12:10,966 --> 0:12:11,906
有用的线索

393
00:12:13,136 --> 0:12:14,656
有些人可能会说

394
00:12:14,656 --> 0:12:16,186
我不需要注释 我的代码

395
00:12:16,186 --> 0:12:17,156
是自我记录的

396
00:12:18,536 --> 0:12:19,486
我一点也不相信

397
00:12:20,486 --> 0:12:22,546
写得好的代码

398
00:12:22,546 --> 0:12:23,906
在算法上是清楚的

399
00:12:23,906 --> 0:12:26,196
在这方面

400
00:12:26,196 --> 0:12:27,016
它是自我记录的

401
00:12:27,606 --> 0:12:29,236
但我们并不知道原因

402
00:12:29,686 --> 0:12:31,006
为什么一开始要

403
00:12:31,006 --> 0:12:31,776
写这些代码呢

404
00:12:32,366 --> 0:12:34,096
这段代码如何融入

405
00:12:34,096 --> 0:12:35,316
更大的上下文

406
00:12:36,066 --> 0:12:38,056
也没有描述

407
00:12:38,056 --> 0:12:39,426
编写方法

408
00:12:39,426 --> 0:12:41,066
背后的原理

409
00:12:42,376 --> 0:12:44,086
我共事过的最好的开发者

410
00:12:44,166 --> 0:12:46,256
不仅写出了令人难以置信的

411
00:12:46,256 --> 0:12:48,226
清晰的 简洁的代码

412
00:12:48,226 --> 0:12:49,916
而且他们还花时间

413
00:12:49,916 --> 0:12:51,836
在整个代码中

414
00:12:51,836 --> 0:12:53,686
添加了有用的注释

415
00:12:53,726 --> 0:12:54,836
引导未来的读者

416
00:12:54,836 --> 0:12:56,796
进入原作者的空间

417
00:12:58,226 --> 0:12:59,876
初级开发者可能会

418
00:12:59,876 --> 0:13:01,486
从这个过程中受益

419
00:12:59,876 --> 0:13:01,486
从这个过程中受益

420
00:13:01,486 --> 0:13:03,576
因为你在项目开始时的经验

421
00:13:03,576 --> 0:13:05,096
与在项目结束时

422
00:13:05,516 --> 0:13:07,436
相差太大

423
00:13:07,676 --> 0:13:08,786
你在项目开始时所做的决定

424
00:13:08,786 --> 0:13:09,986
实际上可能与项目结束

425
00:13:10,196 --> 0:13:11,396
时所做的决定

426
00:13:11,426 --> 0:13:12,626
完全不一致

427
00:13:13,806 --> 0:13:15,076
那么 怎样才能做出好的

428
00:13:15,076 --> 0:13:15,536
提交消息呢

429
00:13:16,246 --> 0:13:19,506
好的注释假设读者理解

430
00:13:19,506 --> 0:13:21,136
所使用的编程语言

431
00:13:21,776 --> 0:13:22,616
并且能够亲历

432
00:13:22,616 --> 0:13:24,916
代码中的顺序和步骤

433
00:13:26,516 --> 0:13:27,866
它真正关注的是

434
00:13:27,866 --> 0:13:29,346
最初为什么

435
00:13:29,346 --> 0:13:30,166
要编写代码

436
00:13:30,436 --> 0:13:32,186
这背后的原因是什么

437
00:13:32,736 --> 0:13:34,326
例如 这条注释

438
00:13:34,326 --> 0:13:37,216
没有任何价值

439
00:13:37,216 --> 0:13:38,786
但是 我们总是能看到它

440
00:13:39,186 --> 0:13:40,476
假设你们大多数人

441
00:13:40,476 --> 0:13:41,626
已经用 Swift 编写了一些代码

442
00:13:41,626 --> 0:13:43,346
可以知道

443
00:13:43,346 --> 0:13:45,116
我们在这里创建了一个

444
00:13:45,116 --> 0:13:46,516
带值的字符串常量

445
00:13:47,326 --> 0:13:49,496
但我们不知道 id 是什么

446
00:13:49,856 --> 0:13:52,146
它是用来做什么的

447
00:13:52,146 --> 0:13:54,966
或者为什么这个被硬编码到 App 中

448
00:13:55,246 --> 0:13:56,366
通过一些注释

449
00:13:56,366 --> 0:13:57,956
我们现在理解了

450
00:13:57,956 --> 0:13:59,396
为什么存在这个值

451
00:13:59,396 --> 0:14:00,056
以及它来自何处

452
00:13:59,396 --> 0:14:00,056
以及它来自何处

453
00:14:00,246 --> 0:14:01,356
但我们可以更进一步

454
00:14:01,356 --> 0:14:03,766
常量和变量的名称

455
00:14:03,766 --> 0:14:05,546
提供了额外的

456
00:14:05,546 --> 0:14:06,716
清晰的机会

457
00:14:07,256 --> 0:14:08,616
因此 如果你发现自己使用的是

458
00:14:08,616 --> 0:14:11,376
m 或 i 这样的单个字母

459
00:14:11,376 --> 0:14:13,816
或者 id 或 idx 这样的东西

460
00:14:13,816 --> 0:14:15,566
那么可能是一个很好的机会

461
00:14:15,566 --> 0:14:17,146
来选择一个更具描述性的变量名

462
00:14:18,026 --> 0:14:19,886
在 Xcode 中 自动完成就像魔法一样神奇

463
00:14:20,056 --> 0:14:20,906
所以 你甚至不需要再

464
00:14:20,906 --> 0:14:21,966
输入任何东西

465
00:14:22,856 --> 0:14:24,126
在你的代码库中

466
00:14:24,316 --> 0:14:26,206
始终会清楚地知道

467
00:14:26,206 --> 0:14:27,726
在任何时候使用的

468
00:14:27,726 --> 0:14:29,636
特定标识符

469
00:14:30,456 --> 0:14:31,986
是什么

470
00:14:32,786 --> 0:14:34,316
文档的好处

471
00:14:34,556 --> 0:14:36,626
与注释非常相似

472
00:14:36,866 --> 0:14:38,386
但是这些可以扩展到

473
00:14:38,386 --> 0:14:39,896
整个 App 甚至更远

474
00:14:41,276 --> 0:14:42,596
当你编写自己的 App 时

475
00:14:42,906 --> 0:14:44,556
你正在创建

476
00:14:44,556 --> 0:14:45,876
一层又一层的

477
00:14:45,876 --> 0:14:47,566
抽象和算法

478
00:14:47,566 --> 0:14:49,486
这些抽象和算法

479
00:14:49,486 --> 0:14:51,356
将代码的大段大段地编写出来

480
00:14:51,356 --> 0:14:54,156
并将它们分解为整洁的 可测试的 可重用的函数

481
00:14:55,296 --> 0:14:56,256
但是如果你

482
00:14:56,256 --> 0:14:57,716
不记录这些函数

483
00:14:57,716 --> 0:14:59,206
那么每次使用该函数时

484
00:14:59,256 --> 0:15:00,996
你实际上

485
00:14:59,256 --> 0:15:00,996
你实际上

486
00:15:00,996 --> 0:15:03,326
都在强迫自己

487
00:15:03,326 --> 0:15:04,396
在头脑中重写该文档

488
00:15:04,996 --> 0:15:06,416
通常 通过必须重新访问

489
00:15:06,416 --> 0:15:07,636
函数的实现

490
00:15:07,636 --> 0:15:09,056
查看如何

491
00:15:09,056 --> 0:15:09,976
使用每个参数

492
00:15:09,976 --> 0:15:11,416
并找出如何

493
00:15:11,416 --> 0:15:12,806
转换它们

494
00:15:12,806 --> 0:15:13,626
以提供结果

495
00:15:14,356 --> 0:15:16,856
如果你不知道

496
00:15:16,996 --> 0:15:18,936
在 Xcode 中生成一个存档

497
00:15:19,016 --> 0:15:20,306
非常简单

498
00:15:20,516 --> 0:15:21,646
只需将光标放在

499
00:15:21,686 --> 0:15:22,666
函数签名的第一行

500
00:15:22,666 --> 0:15:24,436
按下 Option-Comman-/

501
00:15:24,436 --> 0:15:26,406
就会自动生成

502
00:15:26,406 --> 0:15:27,806
所需的所有

503
00:15:27,806 --> 0:15:28,526
占位符文本

504
00:15:28,786 --> 0:15:33,466
只需要填空就好了

505
00:15:33,676 --> 0:15:35,376
点按该函数的任意用法

506
00:15:35,376 --> 0:15:36,796
现在就会在你

507
00:15:36,866 --> 0:15:38,446
熟悉并喜爱的

508
00:15:38,446 --> 0:15:41,346
本机 SDK 和 Swift 标准库的上下文

509
00:15:41,346 --> 0:15:43,036
快速帮助弹出窗口中

510
00:15:43,216 --> 0:15:44,516
显示你自己的文档

511
00:15:44,976 --> 0:15:48,516
注释和文档

512
00:15:49,006 --> 0:15:50,266
要做到它们非常容易

513
00:15:50,266 --> 0:15:51,656
但是非常高回报的

514
00:15:51,656 --> 0:15:53,576
时间投资

515
00:15:53,846 --> 0:15:55,156
它会在你的项目的

516
00:15:55,156 --> 0:15:56,556
整个生命周期中

517
00:15:56,986 --> 0:15:58,546
所以 在你的代码中

518
00:15:58,546 --> 0:15:59,646
添加一些有用的注释

519
00:15:59,646 --> 0:16:00,586
有助于将来的理解

520
00:15:59,646 --> 0:16:00,586
有助于将来的理解

521
00:16:01,056 --> 0:16:03,056
用这些注释

522
00:16:03,126 --> 0:16:04,566
把读者带入原作者的

523
00:16:04,606 --> 0:16:05,316
思想空间

524
00:16:06,006 --> 0:16:07,236
对变量使用描述性名称

525
00:16:07,236 --> 0:16:09,116
并完整地记录

526
00:16:09,116 --> 0:16:10,456
函数 属性

527
00:16:10,546 --> 0:16:11,876
结构和枚举

528
00:16:12,446 --> 0:16:16,436
接下来 我们来聊聊测试

529
00:16:16,436 --> 0:16:19,156
特别是单元测试

530
00:16:19,746 --> 0:16:21,226
为此 我想为大家

531
00:16:21,226 --> 0:16:22,016
介绍 Marshall

532
00:16:22,896 --> 0:16:24,536
Marshall 是我们 Swift 以及

533
00:16:24,536 --> 0:16:25,896
开发工具的传播者

534
00:16:26,256 --> 0:16:27,726
他是个非常聪明

535
00:16:27,766 --> 0:16:28,446
善良的人

536
00:16:28,446 --> 0:16:30,306
他碰巧也是个

537
00:16:30,306 --> 0:16:32,616
活生生的 Swift 分析机

538
00:16:33,176 --> 0:16:36,106
每次我提交代码进行检查时

539
00:16:36,106 --> 0:16:38,636
我都准备好接受

540
00:16:38,636 --> 0:16:40,096
大量有深度的注释和反馈

541
00:16:40,096 --> 0:16:41,756
以帮助我从形式和功能角度

542
00:16:41,756 --> 0:16:43,396
改进我的代码

543
00:16:43,736 --> 0:16:45,666
有一天 Marshall 在另一个主题上

544
00:16:45,666 --> 0:16:47,346
给了我一个正确的方向

545
00:16:47,346 --> 0:16:49,316
那就是单元测试

546
00:16:50,516 --> 0:16:52,986
我必须承认 

547
00:16:52,986 --> 0:16:54,606
我在编写单元测试方面的纪录

548
00:16:54,606 --> 0:16:55,806
并不完美

549
00:16:56,626 --> 0:16:58,116
这并不是说

550
00:16:58,116 --> 0:16:59,506
我不欣赏他们的潜在价值

551
00:16:59,506 --> 0:17:00,886
也不是说我就是新手

552
00:16:59,506 --> 0:17:00,886
也不是说我就是新手

553
00:17:01,386 --> 0:17:02,676
我只是总习惯

554
00:17:02,676 --> 0:17:03,466
把它留到最后

555
00:17:03,646 --> 0:17:04,846
当我完成

556
00:17:04,925 --> 0:17:06,356
实际代码的实现时

557
00:17:07,016 --> 0:17:08,376
我最不想做的事情

558
00:17:08,376 --> 0:17:09,476
就是编写单元测试

559
00:17:10,066 --> 0:17:11,826
然而 前几天

560
00:17:11,965 --> 0:17:13,046
在为 WWDC App

561
00:17:13,046 --> 0:17:14,415
新的实验室排队功能

562
00:17:14,415 --> 0:17:15,806
实现数据模型的同时

563
00:17:16,636 --> 0:17:17,476
Marshall 加入了进来

564
00:17:18,856 --> 0:17:19,955
&gt;&gt; 当你这样做时

565
00:17:20,205 --> 0:17:21,116
你最好再做一个单元测试

566
00:17:21,156 --> 0:17:22,465
来确保在 Struct

567
00:17:22,526 --> 0:17:23,705
和字典表示之间

568
00:17:23,705 --> 0:17:25,425
往返的工作能顺利进行

569
00:17:26,906 --> 0:17:29,326
&gt;&gt;现在 我的大脑

570
00:17:29,326 --> 0:17:30,196
我真的不知道

571
00:17:30,196 --> 0:17:31,416
将来它们会变得多糟糕

572
00:17:31,736 --> 0:17:33,176
尽管如此

573
00:17:33,176 --> 0:17:34,756
我还是听取了 Marshall 的意见

574
00:17:34,756 --> 0:17:35,776
行了一个简单的往返单元测试

575
00:17:36,886 --> 0:17:37,386
我测试了

576
00:17:37,386 --> 0:17:39,706
当绿色的检查标志

577
00:17:40,086 --> 0:17:41,566
显示测试通过时

578
00:17:41,566 --> 0:17:43,146
我非常有满足感

579
00:17:44,576 --> 0:17:45,746
所以 我提交了修改

580
00:17:45,746 --> 0:17:47,136
以供审查

581
00:17:47,136 --> 0:17:48,916
直到几周后

582
00:17:48,916 --> 0:17:51,326
当我们想在 Struct 中加入

583
00:17:51,326 --> 0:17:52,756
额外的数据时

584
00:17:52,756 --> 0:17:53,566
我才再次考虑这个测试

585
00:17:54,626 --> 0:17:56,566
所以对 Struct 

586
00:17:56,566 --> 0:17:56,866
做了一些改变

587
00:17:56,866 --> 0:17:58,536
我在运行时没有发现

588
00:17:58,536 --> 0:17:58,806
任何问题

589
00:17:58,806 --> 0:18:00,536
我完成了 对吗

590
00:17:58,806 --> 0:18:00,536
我完成了 对吗

591
00:18:01,566 --> 0:18:03,306
于是 我去提交修改

592
00:18:03,846 --> 0:18:05,036
然后 我才想起

593
00:18:05,036 --> 0:18:05,766
运行单元测试

594
00:18:05,986 --> 0:18:08,046
果然 我忘了改变

595
00:18:08,046 --> 0:18:09,266
字典反序列化的

596
00:18:09,266 --> 0:18:11,026
工作方式

597
00:18:11,176 --> 0:18:11,956
而测试捕捉到了这一点

598
00:18:12,676 --> 0:18:13,986
这个 Bug 晚些会

599
00:18:13,986 --> 0:18:15,596
在我们实现 UI 时出现

600
00:18:15,706 --> 0:18:17,046
而且毫无疑问会

601
00:18:17,046 --> 0:18:18,456
浪费我们相当多的时间

602
00:18:18,456 --> 0:18:19,946
试图找出问题出在哪里

603
00:18:21,066 --> 0:18:22,606
所以 谢谢 Marshall 提醒我

604
00:18:22,606 --> 0:18:24,426
将单元测试

605
00:18:24,426 --> 0:18:25,736
作为我常规实践的

606
00:18:25,736 --> 0:18:26,256
一部分

607
00:18:27,006 --> 0:18:29,276
&gt;&gt; 不客气 Josh 

608
00:18:29,276 --> 0:18:30,016
[简短笑声]

609
00:18:30,516 --> 0:18:34,866
[掌声]

610
00:18:35,366 --> 0:18:36,996
&gt;&gt; 所以 即使对于代码中

611
00:18:37,126 --> 0:18:38,816
看似简单的部分

612
00:18:39,046 --> 0:18:40,506
就像我当时所做的 

613
00:18:40,506 --> 0:18:42,436
编写这些单元测试

614
00:18:42,436 --> 0:18:43,556
也是非常重要的

615
00:18:44,156 --> 0:18:45,746
随着代码的可塑性

616
00:18:45,916 --> 0:18:47,666
可能会引入

617
00:18:47,796 --> 0:18:48,636
回归

618
00:18:49,366 --> 0:18:50,546
考虑到我们似乎

619
00:18:50,546 --> 0:18:52,106
从来没有足够的时间来

620
00:18:52,106 --> 0:18:54,516
彻底地测试

621
00:18:54,516 --> 0:18:56,186
就让我们将 Xcode 当作额外的一双眼睛

622
00:18:56,986 --> 0:18:58,876
因此 将单元测试的实现

623
00:18:58,876 --> 0:19:00,186
作为常规开发实践的一部分

624
00:18:58,876 --> 0:19:00,186
作为常规开发实践的一部分

625
00:19:00,186 --> 0:19:01,926
并在每次提交之前

626
00:19:01,926 --> 0:19:03,666
运行这些测试

627
00:19:05,046 --> 0:19:06,566
此外 单元测试也是

628
00:19:06,566 --> 0:19:07,856
持续集成的

629
00:19:07,856 --> 0:19:08,416
关键组件

630
00:19:08,566 --> 0:19:09,746
所以 你可以为它

631
00:19:09,776 --> 0:19:10,806
做好准备

632
00:19:11,106 --> 0:19:12,336
测试是一个

633
00:19:12,336 --> 0:19:13,686
隐藏的细节

634
00:19:13,686 --> 0:19:15,566
你的客户永远不会真正看到

635
00:19:16,136 --> 0:19:17,016
但是 这可能意味着

636
00:19:17,016 --> 0:19:18,546
使用你的 App 时的

637
00:19:18,546 --> 0:19:20,516
绝佳体验

638
00:19:20,516 --> 0:19:22,106
和重要数据被破坏时

639
00:19:22,106 --> 0:19:23,216
的糟心体验

640
00:19:23,216 --> 0:19:24,006
之间的对比

641
00:19:26,696 --> 0:19:28,666
大家最好

642
00:19:28,666 --> 0:19:29,866
将一些分析形式保留为

643
00:19:29,866 --> 0:19:30,886
常规工作流程的一部分

644
00:19:31,016 --> 0:19:32,866
其中一些确实需要一些

645
00:19:32,866 --> 0:19:34,176
额外的时间投资

646
00:19:34,426 --> 0:19:35,956
其他的事情

647
00:19:35,956 --> 0:19:37,456
也可能发生在你的幕后

648
00:19:37,456 --> 0:19:39,026
你甚至不需要去考虑它

649
00:19:40,376 --> 0:19:41,486
一个非常有用的工具是

650
00:19:41,486 --> 0:19:43,266
网络链接调节器

651
00:19:43,716 --> 0:19:45,306
毕竟 App 开发

652
00:19:45,306 --> 0:19:46,826
往往是在家庭和办公室进行的

653
00:19:46,826 --> 0:19:48,346
对网络性能要求

654
00:19:48,406 --> 0:19:49,056
非常高

655
00:19:49,786 --> 0:19:51,086
但这真的不是一个

656
00:19:51,086 --> 0:19:53,896
你的 App 有可能会运行的

657
00:19:53,896 --> 0:19:54,526
代表环境

658
00:19:55,056 --> 0:19:56,656
所以 通过启动

659
00:19:56,656 --> 0:19:57,776
网络链接调节器

660
00:19:57,776 --> 0:19:59,016
你可以人为地

661
00:19:59,016 --> 0:20:00,126
将你的网络性能

662
00:19:59,016 --> 0:20:00,126
将你的网络性能

663
00:20:00,186 --> 0:20:01,406
压缩至与普通的蜂窝网络

664
00:20:01,406 --> 0:20:01,976
相似的性能

665
00:20:02,176 --> 0:20:04,116
甚至是一个表现不好的性能

666
00:20:04,736 --> 0:20:06,106
你会惊讶于为了让你的用户不必操心

667
00:20:06,106 --> 0:20:07,366
你需要解决的

668
00:20:07,366 --> 0:20:08,786
加载问题 

669
00:20:09,146 --> 0:20:10,846
和竞争条件的数量

670
00:20:12,276 --> 0:20:13,936
在你的 Scheme 设置中

671
00:20:14,146 --> 0:20:16,676
还有好几个检测器和检查器

672
00:20:16,676 --> 0:20:19,206
可以检查你的开发周期内的

673
00:20:17,996 --> 0:20:18,846
各种问题

674
00:20:19,906 --> 0:20:21,646
Address Sanitizer 会

675
00:20:21,646 --> 0:20:22,536
观察如内存损坏和

676
00:20:22,536 --> 0:20:25,246
缓冲区溢出等问题

677
00:20:26,416 --> 0:20:27,676
内存问题经常是

678
00:20:27,676 --> 0:20:29,236
安全漏洞的原因

679
00:20:29,406 --> 0:20:30,856
所以使用 Address Sanitizer

680
00:20:30,856 --> 0:20:32,076
首先可以帮助你

681
00:20:32,076 --> 0:20:34,886
不出现这些问题

682
00:20:36,116 --> 0:20:37,916
通过启用 Thread Sanitizer

683
00:20:37,916 --> 0:20:39,376
它可以在模拟器中

684
00:20:39,376 --> 0:20:40,626
测试并调试你的 App

685
00:20:40,626 --> 0:20:42,446
你可以帮助发现这些

686
00:20:42,446 --> 0:20:43,376
数据竞争

687
00:20:44,476 --> 0:20:46,116
数据竞争是你有两个

688
00:20:46,276 --> 0:20:47,486
不同步的线程

689
00:20:47,486 --> 0:20:49,726
而它们中至少有一个

690
00:20:49,726 --> 0:20:51,006
试着要编写

691
00:20:51,006 --> 0:20:53,136
一个相同的数据

692
00:20:53,806 --> 0:20:56,106
这些可能是非常不好的 Bug 

693
00:20:56,106 --> 0:20:58,086
它们可能会

694
00:20:58,186 --> 0:21:00,186
有些无法预测的程序

695
00:20:58,186 --> 0:21:00,186
有些无法预测的程序

696
00:21:00,566 --> 0:21:01,726
或者它们也可能会造成

697
00:21:01,726 --> 0:21:02,476
内存损坏

698
00:21:03,066 --> 0:21:06,756
Undefined Behavior Sanitizer

699
00:21:07,136 --> 0:21:08,496
会捕捉一些如

700
00:21:08,496 --> 0:21:10,416
除零 浮点溢出 算术溢出

701
00:21:10,416 --> 0:21:13,466
指针偏差等问题

702
00:21:13,906 --> 0:21:15,326
当一个程序有未定义的行为

703
00:21:15,326 --> 0:21:16,446
它可能会导致

704
00:21:16,446 --> 0:21:17,056
崩溃

705
00:21:17,536 --> 0:21:18,646
它可能会以一种

706
00:21:18,646 --> 0:21:21,246
无法预测的方式表现

707
00:21:21,246 --> 0:21:23,356
或者表现得像毫无问题一样

708
00:21:23,356 --> 0:21:24,616
但是会毫无原因地

709
00:21:24,616 --> 0:21:26,296
在不同的时间出现不同的结果

710
00:21:27,256 --> 0:21:28,816
这真是令人沮丧的 Bug

711
00:21:28,816 --> 0:21:30,246
检测器可以帮你们

712
00:21:30,246 --> 0:21:31,206
在它们对你的项目造成大的危害前

713
00:21:31,206 --> 0:21:32,226
解决这些 Bug

714
00:21:33,556 --> 0:21:35,036
最后 还有 Main Thread Checker

715
00:21:35,036 --> 0:21:36,656
可以保证

716
00:21:36,706 --> 0:21:38,326
你没有实现

717
00:21:38,326 --> 0:21:40,886
AppKit UIKit 和其他 API 的后台线程的

718
00:21:41,066 --> 0:21:42,986
无效使用

719
00:21:43,386 --> 0:21:44,726
比如说

720
00:21:44,726 --> 0:21:46,166
如果你在更新一个线程的 UI

721
00:21:46,166 --> 0:21:48,096
而这个线程不是主线程

722
00:21:48,186 --> 0:21:49,996
它可能会造成错过的 UI 更新

723
00:21:49,996 --> 0:21:52,356
视觉缺陷 数据损坏和崩溃

724
00:21:53,376 --> 0:21:54,496
有时候这些 Bug

725
00:21:54,566 --> 0:21:55,726
可能很难解决

726
00:21:55,726 --> 0:21:56,836
因为它们可能只会

727
00:21:56,836 --> 0:21:57,606
间歇性出现

728
00:21:58,136 --> 0:21:59,376
启用这个会有一个

729
00:21:59,376 --> 0:22:00,766
最小化的性能影响

730
00:21:59,376 --> 0:22:00,766
最小化的性能影响

731
00:22:00,966 --> 0:22:02,226
我们建议只要可能的话

732
00:22:02,226 --> 0:22:03,486
都保持其启用状态

733
00:22:04,006 --> 0:22:07,836
在调试你们的 App 时

734
00:22:07,836 --> 0:22:08,976
注意性能和

735
00:22:08,976 --> 0:22:10,066
资源使用

736
00:22:10,196 --> 0:22:11,226
尽可能地保证你的 App

737
00:22:11,276 --> 0:22:12,676
与系统资源一起

738
00:22:12,676 --> 0:22:13,916
是有效率的

739
00:22:14,746 --> 0:22:16,366
第一步是使用

740
00:22:16,406 --> 0:22:16,916
Debug Gauges

741
00:22:17,676 --> 0:22:20,296
当你构建和运行你的项目时

742
00:22:20,296 --> 0:22:21,606
你就可以在 Xcode 中的调试导航中看到它们

743
00:22:22,866 --> 0:22:24,656
你可以在你 App 的生命周期

744
00:22:24,656 --> 0:22:27,346
检查 CPU 内存 磁盘 和网络使用

745
00:22:27,346 --> 0:22:29,596
快速地了解

746
00:22:29,596 --> 0:22:31,006
你的 App 是否在做

747
00:22:31,006 --> 0:22:32,106
如通过网络

748
00:22:32,106 --> 0:22:33,776
连接意外的服务器之类的事情

749
00:22:34,026 --> 0:22:35,616
或者它只是不断地在一个末端努力

750
00:22:35,616 --> 0:22:39,106
消耗很多带宽和电量

751
00:22:39,746 --> 0:22:42,486
最后 你还可以更进一步

752
00:22:42,486 --> 0:22:44,076
点按文件和工具按钮

753
00:22:44,126 --> 0:22:45,536
可以让你运行一个

754
00:22:45,776 --> 0:22:48,786
更加有深度的分析

755
00:22:49,526 --> 0:22:51,106
有一个我常用的工具就是

756
00:22:51,106 --> 0:22:53,176
时间分析器

757
00:22:53,406 --> 0:22:54,816
这会让你查明

758
00:22:54,816 --> 0:22:56,256
你代码的哪一段

759
00:22:56,256 --> 0:22:57,966
占据了最多的周期

760
00:22:58,136 --> 0:22:59,796
同时也让我们缩小

761
00:23:00,346 --> 0:23:02,006
需要同步的

762
00:23:02,006 --> 0:23:03,316
工作段落

763
00:23:03,676 --> 0:23:05,726
如果我刚刚实现了一个

764
00:23:05,726 --> 0:23:09,706
不可拓展的行为

765
00:23:10,106 --> 0:23:11,826
分析是一个非常宽广的话题

766
00:23:12,536 --> 0:23:13,356
但是我这这里提到的大部分

767
00:23:13,356 --> 0:23:14,876
工具你只需要记住

768
00:23:14,876 --> 0:23:16,096
打开它们即可

769
00:23:17,086 --> 0:23:18,886
所以 使用网络链接调节器

770
00:23:18,886 --> 0:23:20,726
来模仿典型的不理想网络

771
00:23:21,446 --> 0:23:23,566
经常使用检测器和检查器

772
00:23:23,676 --> 0:23:25,166
如果可以的话 只需要启动

773
00:23:25,166 --> 0:23:25,636
它们即可

774
00:23:26,486 --> 0:23:27,836
定期使用这些

775
00:23:27,836 --> 0:23:28,486
Debug Gauges

776
00:23:28,486 --> 0:23:29,726
注意你 App 的

777
00:23:29,726 --> 0:23:31,416
内存占用量和性能

778
00:23:32,386 --> 0:23:33,996
通过分析你的 App 

779
00:23:33,996 --> 0:23:34,946
使用工具

780
00:23:34,986 --> 0:23:36,706
深入挖掘这些问题

781
00:23:36,706 --> 0:23:37,796
用精准度处理它们

782
00:23:38,306 --> 0:23:39,836
把这些努力转变为习惯

783
00:23:39,836 --> 0:23:42,366
会很大程度地

784
00:23:42,366 --> 0:23:43,616
改善你们 App 的

785
00:23:43,616 --> 0:23:45,446
性能和稳定性

786
00:23:46,836 --> 0:23:49,206
我住在多伦多的时候

787
00:23:49,866 --> 0:23:52,416
我把一个车库

788
00:23:52,416 --> 0:23:53,566
改成了我的

789
00:23:53,566 --> 0:23:54,336
木工商店

790
00:23:55,586 --> 0:23:56,646
这是一个舒适的地方

791
00:23:57,526 --> 0:23:59,236
这完全属于我自己

792
00:24:00,296 --> 0:24:01,706
但是自从我搬到

793
00:24:01,706 --> 0:24:03,926
海湾地区 我就不再拥有一个

794
00:24:03,926 --> 0:24:04,756
属于我自己的空间了

795
00:24:05,076 --> 0:24:06,396
我开始使用

796
00:24:06,396 --> 0:24:08,136
这片地区共享的

797
00:24:08,206 --> 0:24:08,796
社区木工房

798
00:24:09,526 --> 0:24:11,226
这样有时候会很令人沮丧

799
00:24:11,226 --> 0:24:13,526
因为我必须

800
00:24:13,526 --> 0:24:14,536
和其他人共享

801
00:24:14,536 --> 0:24:16,236
工具和设备以及空间

802
00:24:17,106 --> 0:24:18,836
但是有一件事我没有意识到

803
00:24:18,836 --> 0:24:20,626
我会如此感激的是

804
00:24:20,626 --> 0:24:22,156
我可以在店里

805
00:24:22,156 --> 0:24:23,996
听取他人的意见

806
00:24:23,996 --> 0:24:25,336
获得他们的意见

807
00:24:25,396 --> 0:24:26,486
可以开始做一些事情

808
00:24:27,886 --> 0:24:29,526
我认为 App 开发

809
00:24:29,526 --> 0:24:30,906
与之类似的就是

810
00:24:30,906 --> 0:24:31,216
代码审核

811
00:24:32,266 --> 0:24:33,816
所以很多我过去开发的 App

812
00:24:33,846 --> 0:24:35,936
都只有我一个开发者

813
00:24:37,156 --> 0:24:38,136
这就好像拥有你自己的商店

814
00:24:38,136 --> 0:24:39,996
感觉非常地快速和灵活

815
00:24:39,996 --> 0:24:43,746
因为你的想法

816
00:24:43,746 --> 0:24:44,566
决定了一切

817
00:24:45,396 --> 0:24:46,976
但是缺点就是

818
00:24:46,976 --> 0:24:48,226
你没有机会

819
00:24:48,226 --> 0:24:49,766
向你的同事和同行

820
00:24:49,816 --> 0:24:52,436
学习如何更好地

821
00:24:52,436 --> 0:24:54,416
使用语言 框架和 SDK

822
00:24:55,536 --> 0:24:57,066
一般来说 解决问题

823
00:24:57,066 --> 0:24:58,386
有很多方法

824
00:24:58,786 --> 0:25:00,316
但是总会有一个更好的办法

825
00:24:58,786 --> 0:25:00,316
但是总会有一个更好的办法

826
00:25:01,196 --> 0:25:02,496
有些方法脱颖而出是因为

827
00:25:02,496 --> 0:25:03,966
更加精准

828
00:25:04,476 --> 0:25:06,226
或者有更好的

829
00:25:06,226 --> 0:25:08,596
性能 可维护性或可靠性

830
00:25:09,096 --> 0:25:10,486
因为如果只是因为它能运行

831
00:25:10,486 --> 0:25:12,646
并不能代表

832
00:25:12,646 --> 0:25:13,606
它是完全正确的

833
00:25:14,216 --> 0:25:15,736
它可能可以

834
00:25:15,736 --> 0:25:16,746
获得很大的提升

835
00:25:17,896 --> 0:25:19,796
在 Apple  所有团队都有一个政策

836
00:25:19,796 --> 0:25:21,226
那就是如果没有代码审核

837
00:25:21,226 --> 0:25:22,706
那么没有一个代码能成为

838
00:25:22,746 --> 0:25:23,046
一个项目

839
00:25:23,496 --> 0:25:25,106
我们的团队通过

840
00:25:25,106 --> 0:25:26,016
这个方法从彼此身上

841
00:25:26,016 --> 0:25:26,596
学到了很多

842
00:25:26,836 --> 0:25:29,796
我们的代码在风格上也更一致

843
00:25:29,796 --> 0:25:31,636
更别说在可靠性上的提升了

844
00:25:32,326 --> 0:25:33,856
这也保证了

845
00:25:33,966 --> 0:25:35,846
我们的整个团队更了解

846
00:25:35,846 --> 0:25:37,316
更广泛的代码基数

847
00:25:37,536 --> 0:25:38,836
这使得我们可以

848
00:25:38,836 --> 0:25:40,306
解决的 Bug 范围和特点

849
00:25:40,586 --> 0:25:41,436
也更加广泛

850
00:25:42,586 --> 0:25:44,386
现在 我很幸运

851
00:25:44,386 --> 0:25:46,166
能加入一个拥有很多有经验的

852
00:25:46,166 --> 0:25:47,766
开发者的好团队

853
00:25:47,766 --> 0:25:48,906
这也让这些更加的简单

854
00:25:49,426 --> 0:25:50,646
但是如果你自己开了公司

855
00:25:50,646 --> 0:25:52,276
或者你们项目

856
00:25:52,276 --> 0:25:54,036
只有你一个开发者怎么办呢

857
00:25:55,156 --> 0:25:57,236
你可以试着

858
00:25:57,236 --> 0:25:58,626
与你们地区的开发者联系

859
00:25:58,836 --> 0:26:00,646
或者与世界各地的其他开发者联系

860
00:25:58,836 --> 0:26:00,646
或者与世界各地的其他开发者联系

861
00:26:00,876 --> 0:26:02,086
想办法和他们互相

862
00:26:02,086 --> 0:26:04,936
进行代码审核

863
00:26:05,146 --> 0:26:06,536
也许是调查见面会

864
00:26:06,676 --> 0:26:07,886
本地会议

865
00:26:07,886 --> 0:26:08,836
或者共享办公

866
00:26:10,116 --> 0:26:11,156
现在你要做的就是把代码审核

867
00:26:11,156 --> 0:26:12,396
作为你开发实践的一部分

868
00:26:12,396 --> 0:26:14,146
那么什么是一个好的

869
00:26:14,146 --> 0:26:14,976
代码审核呢

870
00:26:15,766 --> 0:26:18,376
首先 它意味着

871
00:26:18,376 --> 0:26:20,266
花时间了解

872
00:26:20,266 --> 0:26:21,016
每一行变化的代码

873
00:26:21,396 --> 0:26:22,666
如果只是快速浏览的话

874
00:26:22,666 --> 0:26:23,786
就代码审核就

875
00:26:23,786 --> 0:26:24,206
没有意义

876
00:26:26,266 --> 0:26:29,116
其次 真正地构建这个项目

877
00:26:29,816 --> 0:26:32,656
运行这个项目 不要假设

878
00:26:32,716 --> 0:26:34,446
原始的作者已经

879
00:26:34,526 --> 0:26:34,726
这样做过

880
00:26:34,796 --> 0:26:36,246
尤其是如果

881
00:26:36,246 --> 0:26:38,256
你在历史中看到的最后一个任务是合并

882
00:26:38,736 --> 0:26:42,186
运行这些测试

883
00:26:42,656 --> 0:26:44,796
首先 这样做会提醒你

884
00:26:44,846 --> 0:26:46,266
去检查和看看

885
00:26:46,266 --> 0:26:47,276
真正的测试

886
00:26:47,516 --> 0:26:49,426
以及通过的单元测试

887
00:26:50,266 --> 0:26:51,246
记住 仅仅是因为它构建了

888
00:26:51,306 --> 0:26:53,136
不能代表它就

889
00:26:53,136 --> 0:26:54,326
不会崩溃了

890
00:26:54,866 --> 0:26:58,656
仔细看看这些注释和文档

891
00:26:58,946 --> 0:27:00,196
我的意思是 总会有

892
00:26:58,946 --> 0:27:00,196
我的意思是 总会有

893
00:27:00,196 --> 0:27:01,546
注释和文档 对吗

894
00:27:02,706 --> 0:27:04,926
然后检查拼写和语法错误

895
00:27:07,086 --> 0:27:08,426
与此相似的 

896
00:27:08,426 --> 0:27:09,626
在变量名中寻找拼写错误

897
00:27:10,256 --> 0:27:12,486
作为一个加拿大人

898
00:27:12,486 --> 0:27:14,206
我一直有一个习惯

899
00:27:14,206 --> 0:27:16,796
就是在如“color”等单词中添加“u”

900
00:27:16,796 --> 0:27:18,976
当我的团队开始搜索“color”时

901
00:27:18,976 --> 0:27:22,596
他们真的要崩溃了

902
00:27:23,086 --> 0:27:24,626
保证代码基数的

903
00:27:24,626 --> 0:27:26,096
一致性可以在之后

904
00:27:26,096 --> 0:27:27,066
帮助寻找和使用

905
00:27:27,066 --> 0:27:28,506
这些功能和变量

906
00:27:28,566 --> 0:27:32,186
这还是会节省时间

907
00:27:32,406 --> 0:27:33,756
所以 即便你可能会感觉

908
00:27:33,756 --> 0:27:35,116
这些过程可能会

909
00:27:35,116 --> 0:27:36,786
在短期内拉慢你的项目

910
00:27:36,786 --> 0:27:38,226
但是长期来看 它通过减少

911
00:27:38,456 --> 0:27:40,086
潜在的错误和问题

912
00:27:40,086 --> 0:27:41,306
它毫无疑问会节约

913
00:27:41,306 --> 0:27:42,916
你的时间 金钱和

914
00:27:42,916 --> 0:27:43,506
用户成本

915
00:27:44,306 --> 0:27:46,166
如果你在未来使用相似的方法

916
00:27:46,316 --> 0:27:48,236
或挑战的话

917
00:27:48,236 --> 0:27:49,996
你作为开发者的技能

918
00:27:49,996 --> 0:27:51,256
会大受裨益

919
00:27:54,226 --> 0:27:56,226
作为开发者 我们都致力于

920
00:27:56,226 --> 0:27:58,126
创建精简的

921
00:27:58,216 --> 0:28:00,736
准确的 可重复使用的

922
00:27:58,216 --> 0:28:00,736
准确的 可重复使用的

923
00:28:00,736 --> 0:28:01,676
可测试的代码

924
00:28:02,496 --> 0:28:04,476
毕竟 我们不想

925
00:28:04,476 --> 0:28:06,336
不停地重新创造

926
00:28:06,336 --> 0:28:07,506
相同的代码

927
00:28:09,256 --> 0:28:10,836
程序包和框架

928
00:28:10,836 --> 0:28:12,246
可以用更集中的方式

929
00:28:12,326 --> 0:28:14,116
保留代码

930
00:28:14,426 --> 0:28:16,256
同时以一种可移植的方式

931
00:28:16,256 --> 0:28:17,216
提供那个性能

932
00:28:17,596 --> 0:28:18,926
它不仅会通过你现在的 App

933
00:28:18,926 --> 0:28:20,816
还会通过其他

934
00:28:20,816 --> 0:28:21,966
可能会利用这个成就的 App

935
00:28:21,966 --> 0:28:22,206
来提供

936
00:28:23,426 --> 0:28:24,886
如果你的 App 包含拓展

937
00:28:24,986 --> 0:28:26,736
你可以在框架中

938
00:28:26,736 --> 0:28:28,776
打包你的共享代码

939
00:28:28,776 --> 0:28:30,406
你的二进制大小可能会减小

940
00:28:30,406 --> 0:28:32,256
因为你的主 App

941
00:28:32,256 --> 0:28:33,396
和拓展都会

942
00:28:33,396 --> 0:28:34,616
分享相同的框架

943
00:28:35,286 --> 0:28:38,266
当然了 创造程序包会让你

944
00:28:38,266 --> 0:28:39,736
有机会与

945
00:28:39,736 --> 0:28:40,706
整个社群分享

946
00:28:40,706 --> 0:28:42,156
你的成就

947
00:28:42,156 --> 0:28:43,556
尤其是现在的 Xcode 11

948
00:28:43,666 --> 0:28:44,346
对此有如此深度的集成

949
00:28:44,906 --> 0:28:47,936
为了便于他人使用

950
00:28:47,936 --> 0:28:49,666
你的 App 中不仅是代码

951
00:28:49,736 --> 0:28:52,736
共享的框架 程序包和库

952
00:28:52,736 --> 0:28:57,866
都需要很好的文档

953
00:28:58,296 --> 0:28:59,516
所以 采用程序包

954
00:28:59,516 --> 0:29:01,216
和框架是打散

955
00:28:59,516 --> 0:29:01,216
和框架是打散

956
00:29:01,216 --> 0:29:02,326
你的代码的一个办法

957
00:29:03,476 --> 0:29:04,396
这还会让你

958
00:29:04,396 --> 0:29:06,016
扩大你的工作至

959
00:29:06,016 --> 0:29:07,356
你可能在开发或维护的

960
00:29:07,356 --> 0:29:07,936
多个 App 中

961
00:29:08,716 --> 0:29:10,186
框架还可以帮你减小

962
00:29:10,226 --> 0:29:11,186
二进制文件大小

963
00:29:11,796 --> 0:29:14,136
然后你就可以

964
00:29:14,136 --> 0:29:15,036
与社群共享你的

965
00:29:15,036 --> 0:29:15,516
成就

966
00:29:16,386 --> 0:29:17,896
但是请保证

967
00:29:17,896 --> 0:29:18,916
其包含了很好的文档

968
00:29:21,916 --> 0:29:23,426
今天我想和你们分享的

969
00:29:23,426 --> 0:29:25,126
最后一点就是

970
00:29:25,126 --> 0:29:26,866
依赖 明确点就是

971
00:29:26,956 --> 0:29:28,336
了解它们可能会给你的项目

972
00:29:28,336 --> 0:29:30,146
带来的好处和风险

973
00:29:32,096 --> 0:29:33,276
使用 Swift 程序包

974
00:29:33,646 --> 0:29:35,216
框架和其他函数库

975
00:29:35,816 --> 0:29:37,166
会有很多好处

976
00:29:37,726 --> 0:29:39,886
在你开始使用

977
00:29:39,886 --> 0:29:41,946
规定的程序包前

978
00:29:41,946 --> 0:29:43,066
知道里面有什么

979
00:29:43,066 --> 0:29:43,266
以及它可能会

980
00:29:43,476 --> 0:29:44,576
带来什么

981
00:29:44,576 --> 0:29:45,846
真的很重要

982
00:29:46,506 --> 0:29:49,006
你需要确保自己了解

983
00:29:49,006 --> 0:29:50,216
你的依赖和数据

984
00:29:50,216 --> 0:29:50,676
会产生什么

985
00:29:51,636 --> 0:29:53,256
根本上来说 你需要

986
00:29:53,256 --> 0:29:54,446
对你 App 的内容负责

987
00:29:55,406 --> 0:29:57,356
以及它对用户数据所做的负责

988
00:29:58,286 --> 0:29:59,276
确保框架没有

989
00:29:59,276 --> 0:30:00,646
收集不必要的

990
00:29:59,276 --> 0:30:00,646
收集不必要的

991
00:30:00,646 --> 0:30:02,456
指标和设备信息

992
00:30:03,356 --> 0:30:04,356
确保它没有

993
00:30:04,356 --> 0:30:06,796
从设备发送数据

994
00:30:07,306 --> 0:30:10,486
注意其他的依赖

995
00:30:10,486 --> 0:30:12,256
一个给定的依赖性 依靠的是什么

996
00:30:12,836 --> 0:30:14,316
同时研究它们

997
00:30:15,156 --> 0:30:18,066
毕竟多层依赖

998
00:30:18,066 --> 0:30:20,106
现在意味着你的 App

999
00:30:20,106 --> 0:30:21,876
实际上取决于

1000
00:30:21,876 --> 0:30:23,536
整个链的安全和成功

1001
00:30:24,136 --> 0:30:27,206
最后 还有另一个其他的可能性

1002
00:30:27,616 --> 0:30:28,826
如果框架在你这崩溃了

1003
00:30:28,826 --> 0:30:28,926
怎么办

1004
00:30:29,976 --> 0:30:31,636
如果它没有维护了怎么办

1005
00:30:32,306 --> 0:30:36,056
或者它就是突然不见了怎么办

1006
00:30:36,116 --> 0:30:37,246
当你为你的项目

1007
00:30:37,246 --> 0:30:38,616
引入一个新的依赖时

1008
00:30:38,616 --> 0:30:40,036
重要的是

1009
00:30:40,096 --> 0:30:41,866
有一个如何解决

1010
00:30:41,866 --> 0:30:43,136
这些情况的计划

1011
00:30:43,456 --> 0:30:45,336
毕竟 你的 App 的

1012
00:30:45,336 --> 0:30:47,106
未来依赖于此

1013
00:30:48,626 --> 0:30:49,946
所以 你要自己修复

1014
00:30:49,946 --> 0:30:51,256
这些公开的 Bug 吗

1015
00:30:51,346 --> 0:30:52,876
你要把项目带回内部

1016
00:30:52,876 --> 0:30:54,246
然后维护它吗

1017
00:30:54,866 --> 0:30:56,496
或者你计划

1018
00:30:56,536 --> 0:30:58,106
在之后把那个依赖

1019
00:30:58,106 --> 0:30:58,996
完全替换掉

1020
00:30:59,296 --> 0:31:00,616
与所有和那个任务一起的

1021
00:30:59,296 --> 0:31:00,616
与所有和那个任务一起的

1022
00:31:00,666 --> 0:31:02,386
必要的工作一起吗

1023
00:31:03,296 --> 0:31:04,276
外部依赖的使用

1024
00:31:04,276 --> 0:31:05,326
比如 Swift 程序包

1025
00:31:05,326 --> 0:31:06,716
可以让你进展更快

1026
00:31:06,716 --> 0:31:07,816
同时避免

1027
00:31:07,886 --> 0:31:09,136
重新创建在社群中

1028
00:31:09,136 --> 0:31:10,536
可能已经存在的工具

1029
00:31:12,006 --> 0:31:14,066
但是要注意它们的使用

1030
00:31:14,966 --> 0:31:16,166
保证它们只做

1031
00:31:16,166 --> 0:31:17,166
你让它们做的事情

1032
00:31:17,636 --> 0:31:19,836
一定要确保

1033
00:31:19,836 --> 0:31:21,446
它们会尊重使用你 App 的

1034
00:31:21,446 --> 0:31:22,386
用户的隐私

1035
00:31:23,926 --> 0:31:25,056
确保你有一个计划

1036
00:31:25,056 --> 0:31:26,616
来应对未来

1037
00:31:26,616 --> 0:31:28,356
如果它们崩溃

1038
00:31:28,356 --> 0:31:29,126
或者消失的情况

1039
00:31:30,116 --> 0:31:31,366
如果在你为项目

1040
00:31:31,366 --> 0:31:33,506
增加新的依赖时

1041
00:31:33,506 --> 0:31:35,006
能把问这些问题当成一个习惯

1042
00:31:35,566 --> 0:31:36,796
长远来看你将获得回报

1043
00:31:36,796 --> 0:31:38,416
同时会最大化

1044
00:31:38,416 --> 0:31:39,000
使用它们的好处

1045
00:31:42,726 --> 0:31:44,146
对于 App 开发项目来说

1046
00:31:44,856 --> 0:31:46,146
有时候完成它最后的 10%

1047
00:31:46,146 --> 0:31:48,866
似乎和最初的 

1048
00:31:48,896 --> 0:31:51,946
90% 一样漫长

1049
00:31:52,616 --> 0:31:53,866
但是我认为

1050
00:31:53,866 --> 0:31:55,376
通过试着转变某些操作

1051
00:31:55,376 --> 0:31:57,316
和规则为习惯

1052
00:31:57,316 --> 0:31:58,606
你可以避免那种感觉

1053
00:31:59,226 --> 0:32:01,726
所以 有效地组织

1054
00:31:59,226 --> 0:32:01,726
所以 有效地组织

1055
00:32:01,726 --> 0:32:03,056
你的工作空间 你可以

1056
00:32:03,056 --> 0:32:04,836
更快且更有效地

1057
00:32:05,116 --> 0:32:07,726
把注意力集中在代码上

1058
00:32:08,436 --> 0:32:09,896
借助强大的源代码控制

1059
00:32:09,896 --> 0:32:11,526
你可以准确地

1060
00:32:11,526 --> 0:32:13,446
追踪你的代码基数

1061
00:32:13,446 --> 0:32:14,996
减少回归的几率

1062
00:32:14,996 --> 0:32:16,936
加快发现可能发生的

1063
00:32:16,936 --> 0:32:17,856
Bug 的速度

1064
00:32:19,046 --> 0:32:20,146
通过写下有用的

1065
00:32:20,146 --> 0:32:21,606
有意义的注释和文档

1066
00:32:21,606 --> 0:32:24,956
你可以在未来重新访问代码

1067
00:32:24,956 --> 0:32:26,476
和利用你构建的

1068
00:32:26,656 --> 0:32:27,956
类 结构和功能时

1069
00:32:27,956 --> 0:32:29,966
减少理解的压力

1070
00:32:31,356 --> 0:32:33,086
单元测试每 11 个小时

1071
00:32:33,086 --> 0:32:34,856
会保存一次

1072
00:32:34,856 --> 0:32:36,126
通过检查引入

1073
00:32:36,126 --> 0:32:36,606
新回归的编码

1074
00:32:38,046 --> 0:32:39,906
检测器和检查器

1075
00:32:39,906 --> 0:32:41,446
不停地对你的代码进行分析

1076
00:32:41,856 --> 0:32:43,046
因为它们在后台运行

1077
00:32:43,046 --> 0:32:44,246
你甚至都不需要去

1078
00:32:44,246 --> 0:32:44,646
担心它们

1079
00:32:45,166 --> 0:32:46,846
传感器和工具

1080
00:32:46,846 --> 0:32:48,046
保证你有效地

1081
00:32:48,046 --> 0:32:49,096
使用系统资源

1082
00:32:49,096 --> 0:32:50,796
它们会让你

1083
00:32:50,796 --> 0:32:52,186
准确地找出性能和

1084
00:32:52,186 --> 0:32:53,506
其他问题

1085
00:32:54,656 --> 0:32:56,716
代码审核不仅仅

1086
00:32:56,716 --> 0:32:57,926
是一个评估你代码

1087
00:32:57,966 --> 0:32:59,276
风格和功能的机会

1088
00:32:59,276 --> 0:33:00,836
也是一个学习开发的很好的机会

1089
00:32:59,276 --> 0:33:00,836
也是一个学习开发的很好的机会

1090
00:33:00,886 --> 0:33:02,426
它可以提升你作为

1091
00:33:02,426 --> 0:33:04,266
开发者的技能

1092
00:33:04,266 --> 0:33:06,096
与你的团队和社群分享

1093
00:33:07,176 --> 0:33:08,386
将你的项目

1094
00:33:08,386 --> 0:33:10,596
分解成更小的和可重复使用的程序包

1095
00:33:10,596 --> 0:33:12,106
以及框架

1096
00:33:12,106 --> 0:33:13,186
可以帮助你扩大你的工作

1097
00:33:13,186 --> 0:33:14,966
至多个项目 并让你能够分享它

1098
00:33:15,876 --> 0:33:17,006
对于二进制文件的大小

1099
00:33:17,006 --> 0:33:17,726
也有所裨益

1100
00:33:18,906 --> 0:33:20,516
最后 外部依赖

1101
00:33:20,516 --> 0:33:21,936
如 Swift 程序包的使用

1102
00:33:21,936 --> 0:33:23,496
可以让你进展更快

1103
00:33:23,496 --> 0:33:25,466
同时可以重复使用

1104
00:33:25,466 --> 0:33:26,846
已经在社群存在的函数

1105
00:33:27,176 --> 0:33:28,916
一定要认真使用

1106
00:33:29,086 --> 0:33:30,946
理解它们如何处理

1107
00:33:30,976 --> 0:33:31,626
用户数据

1108
00:33:31,696 --> 0:33:33,256
设定一个计划

1109
00:33:33,256 --> 0:33:33,886
以防止它们消失

1110
00:33:34,856 --> 0:33:36,486
作为 App 开发者 将这些实践作为

1111
00:33:36,486 --> 0:33:37,866
你工作的一部分

1112
00:33:37,916 --> 0:33:40,196
只会增加

1113
00:33:40,196 --> 0:33:41,356
你项目每个阶段的

1114
00:33:41,356 --> 0:33:41,986
一点点时间

1115
00:33:41,986 --> 0:33:42,886
但是从长远来看

1116
00:33:42,886 --> 0:33:44,496
它会为你节省很多时间

1117
00:33:44,496 --> 0:33:45,976
保证你的 App

1118
00:33:45,976 --> 0:33:46,816
能运行久远

1119
00:33:47,676 --> 0:33:49,286
我希望我今天提供给你们的

1120
00:33:49,286 --> 0:33:50,606
想法和建议

1121
00:33:50,606 --> 0:33:52,106
可以让你们思考

1122
00:33:52,106 --> 0:33:53,506
作为一名 App 开发者

1123
00:33:53,546 --> 0:33:54,876
如何更好地

1124
00:33:54,876 --> 0:33:55,756
提升你们的技能

1125
00:33:56,036 --> 0:33:57,516
你可能会养成习惯的的操作

1126
00:33:57,766 --> 0:33:58,596
会增加你工作的

1127
00:33:58,596 --> 0:34:00,266
质量和持久性

1128
00:33:58,596 --> 0:34:00,266
质量和持久性

1129
00:34:00,266 --> 0:34:02,146
有意识的努力

1130
00:34:02,146 --> 0:34:03,486
可以转化为自动的习惯

1131
00:34:03,486 --> 0:34:05,176
它可以让你把自己的能量

1132
00:34:05,176 --> 0:34:07,296
用到最重要的地方

1133
00:34:07,556 --> 0:34:09,366
那些使用你 App 的人

1134
00:34:09,406 --> 0:34:11,786
会感受到你为之倾注的

1135
00:34:11,786 --> 0:34:13,386
关怀与爱

1136
00:34:13,386 --> 0:34:14,896
即便他们也说不出

1137
00:34:14,896 --> 0:34:16,025
为什么

1138
00:34:16,626 --> 0:34:18,826
你也可以为你创造出的东西

1139
00:34:18,826 --> 0:34:19,696
感到自豪

1140
00:34:21,016 --> 0:34:21,326
谢谢

1141
00:34:22,516 --> 0:34:29,505
[掌声]
