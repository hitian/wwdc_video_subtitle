1
00:00:00,506 --> 0:00:06,516
[ Music ]

2
00:00:07,516 --> 0:00:13,036
[ Applause ]

3
00:00:13,536 --> 0:00:14,596
&gt;&gt; Good afternoon.

4
00:00:14,796 --> 0:00:16,116
Welcome to Introducing

5
00:00:16,116 --> 0:00:16,636
PencilKit.

6
00:00:17,326 --> 0:00:20,396
I'm Will Thimbleby, and I want

7
00:00:20,396 --> 0:00:22,776
to talk about this fantastic

8
00:00:22,776 --> 0:00:23,426
little device.

9
00:00:24,116 --> 0:00:26,026
This is the Apple Pencil and it

10
00:00:26,026 --> 0:00:28,556
can truly transform your user's

11
00:00:28,556 --> 0:00:31,026
experience on iPad.

12
00:00:33,416 --> 0:00:35,646
In fact, it's the most unique

13
00:00:35,646 --> 0:00:37,696
aspect of iPad.

14
00:00:39,076 --> 0:00:42,416
From preschoolers to Isaac

15
00:00:42,416 --> 0:00:45,146
Newton, from your To-Do list to

16
00:00:45,146 --> 0:00:48,026
fine art, the Pencil is often

17
00:00:48,026 --> 0:00:48,706
where it starts.

18
00:00:50,786 --> 0:00:53,526
It's available on the fantastic

19
00:00:53,526 --> 0:00:56,896
iPad Pros and across our entire

20
00:00:56,896 --> 0:00:58,406
lineup of iPads, from the

21
00:00:58,406 --> 0:01:00,826
smallest Mini to the largest

22
00:00:58,406 --> 0:01:00,826
smallest Mini to the largest

23
00:01:01,416 --> 0:01:01,526
Pro.

24
00:01:02,626 --> 0:01:05,436
It's fantastic for photo

25
00:01:05,436 --> 0:01:07,656
retouching, annotating,

26
00:01:07,656 --> 0:01:09,816
doodling, in fact, anything you

27
00:01:09,816 --> 0:01:11,126
want to do that requires

28
00:01:11,126 --> 0:01:11,686
precision.

29
00:01:15,196 --> 0:01:18,616
In iOS 13, we've made great

30
00:01:18,616 --> 0:01:21,626
strides in latency, we've added

31
00:01:21,626 --> 0:01:23,796
a fantastic new tool palette.

32
00:01:24,456 --> 0:01:27,916
We're introducing PencilKit to

33
00:01:27,916 --> 0:01:30,206
enable you to add Pencil to your

34
00:01:30,206 --> 0:01:32,846
apps that much easier.

35
00:01:33,046 --> 0:01:34,206
And we're also introducing

36
00:01:34,206 --> 0:01:36,126
Markup Everywhere to allow users

37
00:01:36,186 --> 0:01:38,716
to annotate and markup your

38
00:01:38,716 --> 0:01:41,166
app's content even if your app

39
00:01:41,216 --> 0:01:42,616
doesn't do anything with Pencil.

40
00:01:43,406 --> 0:01:44,776
We're going to talk about great

41
00:01:44,966 --> 0:01:47,116
Pencil experiences, how

42
00:01:47,116 --> 0:01:48,686
PencilKit can help you make a

43
00:01:48,686 --> 0:01:49,916
great Pencil experience.

44
00:01:50,156 --> 0:01:51,906
And finally, with Markup

45
00:01:51,906 --> 0:01:53,436
Everywhere, how you can provide

46
00:01:53,436 --> 0:01:55,556
the content to users so that

47
00:01:55,556 --> 0:01:58,146
they can mark it up.

48
00:01:58,416 --> 0:02:00,226
What makes a great Pencil

49
00:01:58,416 --> 0:02:00,226
What makes a great Pencil

50
00:02:00,226 --> 0:02:00,766
experience?

51
00:02:02,086 --> 0:02:03,846
Well, a great Pencil experience

52
00:02:03,846 --> 0:02:05,496
is one that fully uses

53
00:02:05,656 --> 0:02:07,556
everything the Apple Pencil has

54
00:02:07,556 --> 0:02:08,136
to offer.

55
00:02:09,616 --> 0:02:12,176
And that means fully using the

56
00:02:12,176 --> 0:02:13,886
precision the Apple Pencil has

57
00:02:13,946 --> 0:02:14,326
to offer.

58
00:02:15,296 --> 0:02:17,466
It lets you touch a pixel and it

59
00:02:17,466 --> 0:02:18,776
gives you that information at

60
00:02:18,826 --> 0:02:20,596
240 times a second.

61
00:02:21,626 --> 0:02:23,406
It's uniquely expressive, giving

62
00:02:23,406 --> 0:02:25,856
you force, azimuth, and

63
00:02:25,856 --> 0:02:27,386
altitude, allowing you to create

64
00:02:27,706 --> 0:02:29,656
real expressive marks on your

65
00:02:29,656 --> 0:02:31,306
app that bring your apps to

66
00:02:31,306 --> 0:02:31,686
life.

67
00:02:33,126 --> 0:02:33,886
And finally, the

68
00:02:34,216 --> 0:02:36,006
second-generation Apple Pencil

69
00:02:36,326 --> 0:02:38,436
has Pencil taps, that allow the

70
00:02:38,436 --> 0:02:40,476
user to change modes in your app

71
00:02:41,056 --> 0:02:42,356
without ever putting the Pencil

72
00:02:42,356 --> 0:02:42,656
down.

73
00:02:44,696 --> 0:02:46,586
There are now three different

74
00:02:46,616 --> 0:02:47,416
types of Pencil.

75
00:02:47,936 --> 0:02:49,116
The first-generation Apple

76
00:02:49,116 --> 0:02:50,886
Pencil, the second-generation,

77
00:02:50,946 --> 0:02:52,096
and the Logitech Crayon.

78
00:02:53,366 --> 0:02:54,586
These all have slightly

79
00:02:54,586 --> 0:02:55,656
different capabilities.

80
00:02:55,656 --> 0:02:57,546
They all have that same great

81
00:02:57,826 --> 0:02:58,486
precision.

82
00:02:59,706 --> 0:03:01,916
They all have the same azimuth

83
00:02:59,706 --> 0:03:01,916
They all have the same azimuth

84
00:03:01,916 --> 0:03:03,136
and altitude that allow you to

85
00:03:03,166 --> 0:03:04,286
create your expressive marks.

86
00:03:05,766 --> 0:03:08,256
The first-generation Pencil adds

87
00:03:08,836 --> 0:03:09,586
force to that.

88
00:03:10,346 --> 0:03:12,036
And the second-generation Pencil

89
00:03:12,606 --> 0:03:13,656
adds tap gestures.

90
00:03:17,056 --> 0:03:18,266
I'm going to talk about a few of

91
00:03:18,266 --> 0:03:19,916
the more complicated aspects of

92
00:03:19,916 --> 0:03:21,556
supporting Apple Pencil well.

93
00:03:21,556 --> 0:03:24,416
But if you're just starting and

94
00:03:24,416 --> 0:03:25,556
you're wanting to build a custom

95
00:03:25,556 --> 0:03:27,396
drawing experience, I especially

96
00:03:27,396 --> 0:03:29,546
recommend ''Leveraging Touch

97
00:03:29,546 --> 0:03:35,146
Input on iOS'' in WWDC 2016.

98
00:03:35,226 --> 0:03:37,796
Understanding how a Pencil works

99
00:03:38,376 --> 0:03:41,296
is key to understanding what it

100
00:03:41,296 --> 0:03:41,666
does.

101
00:03:43,006 --> 0:03:43,996
And so, I'm going to take you a

102
00:03:43,996 --> 0:03:45,846
little bit behind the scenes and

103
00:03:45,846 --> 0:03:46,866
tell you how the Pencil

104
00:03:46,866 --> 0:03:47,386
functions.

105
00:03:49,176 --> 0:03:50,906
The Pencil creates a uniquely

106
00:03:50,906 --> 0:03:52,526
precise touch location on the

107
00:03:52,526 --> 0:03:55,216
screen and gives you that 240

108
00:03:55,216 --> 0:03:55,506
hits.

109
00:03:56,736 --> 0:03:57,776
As you know, it gives you

110
00:03:57,776 --> 0:03:59,256
azimuth, which is the angle

111
00:03:59,256 --> 0:04:01,566
around the perpendicular of the

112
00:03:59,256 --> 0:04:01,566
around the perpendicular of the

113
00:04:01,566 --> 0:04:01,806
iPad.

114
00:04:06,046 --> 0:04:07,976
And it gives you altitude or

115
00:04:08,046 --> 0:04:10,476
tilt, which is the steepness at

116
00:04:10,476 --> 0:04:11,706
which you're holding the Pencil.

117
00:04:12,716 --> 0:04:14,286
What you may not know is how it

118
00:04:14,286 --> 0:04:14,706
does this.

119
00:04:15,686 --> 0:04:17,185
The Pencil generates a second

120
00:04:17,336 --> 0:04:18,636
hit and touchpoint on the

121
00:04:18,636 --> 0:04:19,536
surface of the iPad.

122
00:04:20,166 --> 0:04:22,106
And using trigonometry, it uses

123
00:04:22,106 --> 0:04:24,546
that to calculate azimuth and

124
00:04:24,546 --> 0:04:25,066
altitude.

125
00:04:27,696 --> 0:04:30,816
Finally, the Pencil has an axial

126
00:04:30,906 --> 0:04:32,596
force sensor that detects the

127
00:04:32,596 --> 0:04:34,676
pressure and it sends that data

128
00:04:34,676 --> 0:04:35,386
over Bluetooth.

129
00:04:36,026 --> 0:04:39,456
There are a few consequences of

130
00:04:39,456 --> 0:04:39,666
this.

131
00:04:40,916 --> 0:04:43,146
The first is azimuth and

132
00:04:43,146 --> 0:04:45,516
altitude may be estimated when

133
00:04:45,516 --> 0:04:46,686
that second touchpoint is

134
00:04:46,686 --> 0:04:49,516
obscured, perhaps by a finger or

135
00:04:49,516 --> 0:04:50,316
the edge of the screen.

136
00:04:52,396 --> 0:04:54,706
Azimuth is emphasized when the

137
00:04:54,706 --> 0:04:56,246
Pencil is nearly perpendicular

138
00:04:56,246 --> 0:04:56,876
to the iPad.

139
00:04:58,126 --> 0:05:00,496
And finally, the force data

140
00:04:58,126 --> 0:05:00,496
And finally, the force data

141
00:05:00,496 --> 0:05:01,836
which comes via a different

142
00:05:01,836 --> 0:05:03,866
mechanism is delayed from the

143
00:05:03,866 --> 0:05:04,866
touch location data.

144
00:05:06,186 --> 0:05:08,976
Handling these more complicated

145
00:05:08,976 --> 0:05:11,036
aspects of the Pencil is key to

146
00:05:11,036 --> 0:05:12,206
building a great Pencil

147
00:05:12,206 --> 0:05:12,726
experience.

148
00:05:15,626 --> 0:05:17,376
As I draw in from the edge of

149
00:05:17,376 --> 0:05:19,636
the screen, I'm getting

150
00:05:19,636 --> 0:05:21,516
estimated azimuth and altitude.

151
00:05:23,926 --> 0:05:26,036
As I continue to draw into the

152
00:05:26,036 --> 0:05:28,166
screen, as a second touchpoint

153
00:05:28,166 --> 0:05:29,236
comes onto the surface of the

154
00:05:29,236 --> 0:05:31,506
screen, you get the correct

155
00:05:31,506 --> 0:05:31,906
values.

156
00:05:32,666 --> 0:05:33,636
Now, instead of leaving it

157
00:05:33,636 --> 0:05:35,836
looking something like this, you

158
00:05:35,836 --> 0:05:36,966
should be back-filling those

159
00:05:37,056 --> 0:05:38,246
correct values to correct the

160
00:05:38,246 --> 0:05:39,966
estimated ones.

161
00:05:45,166 --> 0:05:48,406
Second, as you draw, there's a

162
00:05:48,466 --> 0:05:50,896
region behind the Pencil that is

163
00:05:50,896 --> 0:05:52,266
using estimated force.

164
00:05:52,266 --> 0:05:56,526
You should be continuously

165
00:05:56,526 --> 0:05:58,566
listening to force updates so

166
00:05:58,616 --> 0:05:59,706
you can be drawing the correct

167
00:05:59,706 --> 0:06:00,156
values.

168
00:05:59,706 --> 0:06:00,156
values.

169
00:06:01,636 --> 0:06:04,066
This remains true even after the

170
00:06:04,136 --> 0:06:05,706
Pencil is lifted off the surface

171
00:06:05,706 --> 0:06:06,306
of the iPad.

172
00:06:07,546 --> 0:06:09,186
There's a region of the stroke

173
00:06:09,976 --> 0:06:11,296
that's still waiting for those

174
00:06:11,296 --> 0:06:12,226
final force values.

175
00:06:12,786 --> 0:06:13,986
You need to keep listening to

176
00:06:13,986 --> 0:06:16,036
them even after touch has ended.

177
00:06:19,446 --> 0:06:22,846
Now, one aspect of this is that

178
00:06:23,326 --> 0:06:25,156
it means that the user can start

179
00:06:25,156 --> 0:06:27,786
drawing the next stroke before

180
00:06:27,786 --> 0:06:30,096
the last stroke has got all the

181
00:06:30,096 --> 0:06:30,806
final values.

182
00:06:33,396 --> 0:06:35,076
I would recommend using a serial

183
00:06:35,076 --> 0:06:37,176
queue to only be handling one

184
00:06:37,176 --> 0:06:37,996
stroke at a time.

185
00:06:38,916 --> 0:06:41,416
The time is short enough that

186
00:06:41,416 --> 0:06:42,566
the user is not going to notice.

187
00:06:42,566 --> 0:06:44,636
But you want to handle the data

188
00:06:44,636 --> 0:06:45,146
correctly.

189
00:06:48,216 --> 0:06:50,186
Another part of handling Pencil

190
00:06:50,186 --> 0:06:51,926
well is latency.

191
00:06:52,466 --> 0:06:55,066
With physical pencils, the

192
00:06:55,116 --> 0:06:57,096
pencil is intrinsically tied to

193
00:06:57,096 --> 0:06:59,186
the line that's being drawn.

194
00:07:00,306 --> 0:07:02,696
On a digital device, there's

195
00:07:02,696 --> 0:07:04,606
often a gap between where the

196
00:07:05,366 --> 0:07:07,056
implement is and where the line

197
00:07:07,056 --> 0:07:08,506
on screen is.

198
00:07:09,056 --> 0:07:10,766
Keeping this as small as

199
00:07:10,836 --> 0:07:13,196
possible is critical to

200
00:07:13,196 --> 0:07:14,776
maintaining that feeling of

201
00:07:14,876 --> 0:07:15,836
drawing on paper.

202
00:07:21,586 --> 0:07:24,326
We care so much about latency at

203
00:07:24,326 --> 0:07:25,726
Apple, that we have robots

204
00:07:25,796 --> 0:07:27,456
testing it continuously.

205
00:07:28,776 --> 0:07:30,116
This is a high-speed capture

206
00:07:30,116 --> 0:07:31,296
from one of our tests.

207
00:07:31,856 --> 0:07:33,466
It's at 800 frames per second

208
00:07:33,466 --> 0:07:35,946
and you can see just how small

209
00:07:35,946 --> 0:07:37,316
the distance between the pencil

210
00:07:37,316 --> 0:07:38,826
and the line is.

211
00:07:40,066 --> 0:07:41,746
Let me show you that in real

212
00:07:41,746 --> 0:07:42,056
time.

213
00:07:42,606 --> 0:07:44,976
Did you get it?

214
00:07:45,326 --> 0:07:46,316
I'll show it to you again.

215
00:07:49,976 --> 0:07:52,586
So, a few tips for providing the

216
00:07:52,646 --> 0:07:53,536
best latency.

217
00:07:54,636 --> 0:07:56,236
First, you need to be rendering

218
00:07:56,236 --> 0:07:56,666
in Metal.

219
00:07:57,836 --> 0:07:59,566
You only have a few milliseconds

220
00:07:59,566 --> 0:08:00,946
each frame and you need to be

221
00:07:59,566 --> 0:08:00,946
each frame and you need to be

222
00:08:00,946 --> 0:08:02,726
doing so consistently frame

223
00:08:02,726 --> 0:08:04,546
after frame to provide good

224
00:08:04,546 --> 0:08:04,976
latency.

225
00:08:06,636 --> 0:08:08,826
In iOS 13, we've made great

226
00:08:08,886 --> 0:08:10,266
strides improving prediction.

227
00:08:10,686 --> 0:08:11,916
You should be using predicted

228
00:08:11,966 --> 0:08:13,936
touches to reduce your latency

229
00:08:13,936 --> 0:08:15,246
even further.

230
00:08:17,296 --> 0:08:19,236
Finally, if you're building a

231
00:08:19,236 --> 0:08:22,226
drawing app, for absolute best

232
00:08:22,226 --> 0:08:24,386
latency you should avoid things

233
00:08:24,386 --> 0:08:26,436
like transparent Metal layers.

234
00:08:26,846 --> 0:08:27,736
And you should be avoiding

235
00:08:27,736 --> 0:08:29,246
things like UI effects views

236
00:08:29,746 --> 0:08:32,206
with blurs and overlays on top

237
00:08:32,206 --> 0:08:33,155
of your Metal layers.

238
00:08:34,606 --> 0:08:36,556
And one aspect of this that gets

239
00:08:36,556 --> 0:08:38,336
overlooked sometimes is the

240
00:08:38,446 --> 0:08:40,566
default navigation bar and, in

241
00:08:40,566 --> 0:08:42,336
fact, the home affordance can

242
00:08:42,336 --> 0:08:45,016
add extra cost to the rendering.

243
00:08:46,066 --> 0:08:47,456
The final part of supporting the

244
00:08:47,456 --> 0:08:49,306
Pencil is the Pencil Tap

245
00:08:49,306 --> 0:08:49,726
gesture.

246
00:08:50,356 --> 0:08:52,196
And this is a great way to let

247
00:08:52,196 --> 0:08:54,846
the user switch modes without

248
00:08:54,846 --> 0:08:56,456
having to put the Pencil down.

249
00:09:00,136 --> 0:09:01,676
To do so, you should use

250
00:09:01,676 --> 0:09:03,826
UIPencilInteraction, set

251
00:09:04,436 --> 0:09:06,056
yourself as the delegate, and

252
00:09:06,816 --> 0:09:08,316
when the user taps, you'll get

253
00:09:08,316 --> 0:09:08,956
called back.

254
00:09:10,436 --> 0:09:12,206
When you do so, you should be

255
00:09:12,206 --> 0:09:13,816
respecting the user's preferred

256
00:09:14,076 --> 0:09:14,766
tap action.

257
00:09:15,416 --> 0:09:16,536
And this is something the user

258
00:09:16,536 --> 0:09:17,956
will have chosen in Settings.

259
00:09:18,976 --> 0:09:21,316
If you can, you should be

260
00:09:21,316 --> 0:09:22,086
respecting this.

261
00:09:23,496 --> 0:09:24,786
If it doesn't make sense for

262
00:09:24,786 --> 0:09:27,636
your app, Pencil Tap should be

263
00:09:27,636 --> 0:09:29,346
used for nondestructive mode

264
00:09:29,346 --> 0:09:29,816
switching.

265
00:09:33,156 --> 0:09:35,786
So, up until today, building a

266
00:09:35,786 --> 0:09:38,216
great Pencil experience was a

267
00:09:38,216 --> 0:09:38,926
lot of work.

268
00:09:38,926 --> 0:09:41,826
We provide some great APIs and

269
00:09:41,976 --> 0:09:45,436
fantastic hardware and you have

270
00:09:45,436 --> 0:09:46,576
created some of the best drawing

271
00:09:46,576 --> 0:09:47,746
experiences in the world.

272
00:09:48,726 --> 0:09:50,126
I've highlighted a few of the

273
00:09:50,126 --> 0:09:51,496
more complicated aspects of

274
00:09:51,496 --> 0:09:52,806
supporting Apple Pencil well.

275
00:09:53,606 --> 0:09:55,056
And if you haven't already,

276
00:09:55,726 --> 0:09:57,016
consider these as polish.

277
00:09:57,896 --> 0:09:59,136
But for those of you who are

278
00:09:59,136 --> 0:10:01,126
just getting started, we'd love

279
00:09:59,136 --> 0:10:01,126
just getting started, we'd love

280
00:10:02,836 --> 0:10:04,856
to make your lives a whole lot

281
00:10:04,856 --> 0:10:05,506
easier today.

282
00:10:06,856 --> 0:10:09,166
So, I'm very happy to introduce

283
00:10:10,096 --> 0:10:10,946
PencilKit.

284
00:10:12,516 --> 0:10:19,116
[ Applause ]

285
00:10:19,616 --> 0:10:21,476
PencilKit is the framework that

286
00:10:21,476 --> 0:10:22,846
we use across our entire

287
00:10:22,846 --> 0:10:23,856
operating system.

288
00:10:24,796 --> 0:10:26,626
We use it in Notes for providing

289
00:10:26,626 --> 0:10:28,206
low latency drawing and

290
00:10:28,206 --> 0:10:28,736
notetaking.

291
00:10:29,426 --> 0:10:31,766
We use it in Pages for marking

292
00:10:31,766 --> 0:10:32,516
up documents.

293
00:10:33,116 --> 0:10:34,146
And we use it in Markup

294
00:10:34,146 --> 0:10:35,486
Everywhere for annotating

295
00:10:35,486 --> 0:10:37,296
screenshots and PDFs of your

296
00:10:37,296 --> 0:10:38,136
app's content.

297
00:10:39,196 --> 0:10:40,776
We gave it to a few developers

298
00:10:40,856 --> 0:10:43,026
and Pinterest and Canvas added

299
00:10:43,136 --> 0:10:44,906
features to their apps in just

300
00:10:45,236 --> 0:10:46,426
such little time.

301
00:10:48,716 --> 0:10:50,366
You can add it to your app in

302
00:10:50,366 --> 0:10:51,926
just three lines of code.

303
00:10:55,526 --> 0:10:58,256
Here, we create a canvas, add it

304
00:10:58,256 --> 0:10:59,426
to your view hierarchy, and

305
00:10:59,426 --> 0:11:00,766
choose an ink.

306
00:10:59,426 --> 0:11:00,766
choose an ink.

307
00:11:01,626 --> 0:11:04,236
And with that, you get the same

308
00:11:04,446 --> 0:11:06,916
industry-leading, low latency

309
00:11:07,286 --> 0:11:08,326
that we have across our

310
00:11:08,326 --> 0:11:09,086
operating system.

311
00:11:09,566 --> 0:11:11,696
The same great expressive inks

312
00:11:11,846 --> 0:11:13,026
that we've spent hours

313
00:11:13,026 --> 0:11:13,686
perfecting.

314
00:11:14,726 --> 0:11:17,376
And the same fantastic UI and

315
00:11:17,376 --> 0:11:17,976
tool palette.

316
00:11:20,096 --> 0:11:21,476
With a few more lines of code,

317
00:11:21,476 --> 0:11:22,306
you can create something a

318
00:11:22,306 --> 0:11:23,576
little bit more comprehensive

319
00:11:23,996 --> 0:11:24,896
like our sample app.

320
00:11:25,876 --> 0:11:26,876
I'd love to show that to you,

321
00:11:26,876 --> 0:11:26,976
now.

322
00:11:30,256 --> 0:11:32,646
So, here we have our sample app.

323
00:11:33,046 --> 0:11:35,736
It's a little, little drawing

324
00:11:35,736 --> 0:11:35,956
app.

325
00:11:36,186 --> 0:11:37,436
It's got a few thumbnails of

326
00:11:37,436 --> 0:11:38,336
things I've been working on

327
00:11:38,336 --> 0:11:38,606
earlier.

328
00:11:39,496 --> 0:11:40,776
And to give you an idea of the

329
00:11:40,896 --> 0:11:42,776
breadth of what PencilKit can

330
00:11:42,776 --> 0:11:45,056
do, I'll just show you some of

331
00:11:45,056 --> 0:11:45,266
these.

332
00:11:45,456 --> 0:11:46,426
Here're some notes that have

333
00:11:46,426 --> 0:11:47,576
been taken and we can scroll

334
00:11:47,576 --> 0:11:50,306
through these beautiful notes.

335
00:11:52,436 --> 0:11:54,536
And here's a beautiful flower my

336
00:11:54,536 --> 0:11:55,396
friend Andy drew.

337
00:11:55,946 --> 0:11:58,456
This gives me an opportunity to

338
00:11:58,456 --> 0:12:00,496
also show how PencilKit reacts

339
00:11:58,456 --> 0:12:00,496
also show how PencilKit reacts

340
00:12:00,566 --> 0:12:01,156
to Dark Mode.

341
00:12:01,156 --> 0:12:03,636
If I bring down Control Center,

342
00:12:05,016 --> 0:12:07,726
I can switch into Dark, and the

343
00:12:07,846 --> 0:12:09,116
flower that looked great in

344
00:12:09,116 --> 0:12:11,686
Light looks just as stunning in

345
00:12:11,686 --> 0:12:12,886
Dark Mode.

346
00:12:14,826 --> 0:12:16,786
As I come out, the thumbnails

347
00:12:16,786 --> 0:12:18,636
are rerendered and you can see

348
00:12:18,636 --> 0:12:19,766
that the notes are just a

349
00:12:19,766 --> 0:12:20,216
legible.

350
00:12:22,116 --> 0:12:24,406
But luckily for me, I get to do

351
00:12:24,406 --> 0:12:25,826
what every engineer dreams of

352
00:12:25,936 --> 0:12:29,046
and that is drawing on stage.

353
00:12:31,076 --> 0:12:33,836
So, I'm going to switch back to

354
00:12:33,836 --> 0:12:36,506
Light Mode and I'm going to

355
00:12:36,506 --> 0:12:38,546
continue drawing a logo I was

356
00:12:38,546 --> 0:12:39,846
drawing earlier.

357
00:12:41,476 --> 0:12:43,036
At the bottom here, you can see

358
00:12:43,036 --> 0:12:45,936
our great new tool palette UI.

359
00:12:46,046 --> 0:12:46,966
And with a single finger, I can

360
00:12:46,966 --> 0:12:48,206
drag it around the screen to

361
00:12:48,206 --> 0:12:48,976
where it's comfortable.

362
00:12:51,616 --> 0:12:52,936
For now, I'm going to leave it

363
00:12:52,936 --> 0:12:53,876
at the bottom of the screen.

364
00:12:53,876 --> 0:12:55,746
To finish this, I'm going to use

365
00:12:55,746 --> 0:12:57,246
the Ruler and marker to add some

366
00:12:57,246 --> 0:12:57,556
color.

367
00:12:58,666 --> 0:13:00,256
So, I can tap the Ruler to bring

368
00:12:58,666 --> 0:13:00,256
So, I can tap the Ruler to bring

369
00:13:00,256 --> 0:13:00,766
the Ruler in.

370
00:13:01,166 --> 0:13:02,916
And with two fingers, I can

371
00:13:02,916 --> 0:13:03,686
position the Ruler.

372
00:13:05,056 --> 0:13:06,486
I can draw a straight line along

373
00:13:06,486 --> 0:13:08,276
the Ruler but I can also use the

374
00:13:08,276 --> 0:13:09,336
Ruler to mask.

375
00:13:10,686 --> 0:13:12,446
So, I'll do that.

376
00:13:15,056 --> 0:13:17,316
Let me add some more color.

377
00:13:26,406 --> 0:13:27,896
I'll tap the Ruler to dismiss

378
00:13:27,896 --> 0:13:28,096
it.

379
00:13:28,946 --> 0:13:30,146
And I'll add some color in at

380
00:13:30,146 --> 0:13:30,666
the bottom.

381
00:13:32,466 --> 0:13:34,196
Now, one of the most exciting

382
00:13:34,196 --> 0:13:36,216
things PencilKit is doing, is

383
00:13:36,216 --> 0:13:37,516
it's starting to bring together

384
00:13:37,516 --> 0:13:39,506
the worlds of bitmap and vector,

385
00:13:40,236 --> 0:13:41,276
object and pixel.

386
00:13:42,486 --> 0:13:43,616
And one of the areas you see

387
00:13:43,616 --> 0:13:44,526
there is the Eraser.

388
00:13:44,526 --> 0:13:45,906
So, I'm going to use the

389
00:13:46,506 --> 0:13:47,886
double-tap gesture on the Apple

390
00:13:47,886 --> 0:13:49,326
Pencil to change the Eraser.

391
00:13:51,776 --> 0:13:53,116
Just like that, I've switched

392
00:13:53,116 --> 0:13:53,466
modes.

393
00:13:54,416 --> 0:13:55,856
And this is the Pixel Eraser

394
00:13:55,856 --> 0:13:58,716
which lets me draw around and

395
00:13:58,716 --> 0:14:00,366
cut out parts of this logo.

396
00:13:58,716 --> 0:14:00,366
cut out parts of this logo.

397
00:14:12,276 --> 0:14:14,116
Now, if I tap the Eraser, I

398
00:14:14,116 --> 0:14:15,456
switch to the Object Eraser.

399
00:14:15,946 --> 0:14:17,506
And using Object Eraser, I can

400
00:14:17,506 --> 0:14:20,006
draw around this and I can just

401
00:14:20,066 --> 0:14:21,656
delete the bits that I've cut

402
00:14:21,656 --> 0:14:21,886
out.

403
00:14:26,186 --> 0:14:28,016
Just like that, I've used vector

404
00:14:28,016 --> 0:14:31,176
and bitmap operations to create

405
00:14:31,176 --> 0:14:31,606
a drawing.

406
00:14:31,606 --> 0:14:32,896
Let me show you that again.

407
00:14:33,166 --> 0:14:34,626
I'll tap. I'll get the Pixel

408
00:14:34,626 --> 0:14:34,976
Eraser.

409
00:14:38,346 --> 0:14:39,326
I'll take a cutout.

410
00:14:39,656 --> 0:14:40,766
And this time, I'll use the

411
00:14:40,766 --> 0:14:43,066
Lasso Tool, which is next to the

412
00:14:43,066 --> 0:14:43,436
Eraser.

413
00:14:48,156 --> 0:14:50,886
I can move that where I want, or

414
00:14:50,886 --> 0:14:53,626
I can tap on it and delete it.

415
00:14:54,336 --> 0:14:56,026
Now, that I've created my work

416
00:14:56,026 --> 0:14:58,526
of art, I really ought to sign

417
00:14:58,526 --> 0:14:58,686
this.

418
00:14:58,786 --> 0:15:00,976
Luckily, our sample app has a

419
00:14:58,786 --> 0:15:00,976
Luckily, our sample app has a

420
00:15:00,976 --> 0:15:01,876
signature feature.

421
00:15:02,736 --> 0:15:03,916
And up here in the top right,

422
00:15:03,916 --> 0:15:06,306
I'm going to tap Signature and

423
00:15:06,306 --> 0:15:07,496
you'll notice as I do so, the

424
00:15:07,496 --> 0:15:09,596
tool palette goes away and we

425
00:15:09,596 --> 0:15:11,416
have a custom picker up here

426
00:15:11,416 --> 0:15:12,786
which lets me take just a black

427
00:15:12,846 --> 0:15:13,506
or blue ink.

428
00:15:14,686 --> 0:15:16,466
For now, I'm going to stick with

429
00:15:16,466 --> 0:15:16,736
black.

430
00:15:17,476 --> 0:15:20,256
I'm going to add my signature.

431
00:15:20,256 --> 0:15:22,946
Now that I've done that, I'm

432
00:15:22,946 --> 0:15:25,776
going to tap to sign my drawing.

433
00:15:27,846 --> 0:15:27,946
There.

434
00:15:28,156 --> 0:15:29,786
I think that's a great place to

435
00:15:29,786 --> 0:15:29,976
leave it.

436
00:15:30,046 --> 0:15:31,676
I think I could frame that.

437
00:15:33,516 --> 0:15:36,686
That's cool.

438
00:15:37,516 --> 0:15:43,266
[ Applause ]

439
00:15:43,766 --> 0:15:44,566
So let's talk about the

440
00:15:44,596 --> 0:15:46,456
architecture of PencilKit.

441
00:15:48,106 --> 0:15:49,106
The main thing you'll be using

442
00:15:49,106 --> 0:15:50,316
is the PKCanvasView.

443
00:15:50,716 --> 0:15:52,056
This provides the drawable

444
00:15:52,056 --> 0:15:52,956
region for your app.

445
00:15:55,396 --> 0:15:58,366
PKDrawing is the data model.

446
00:15:59,346 --> 0:16:01,096
It captures all those beautiful

447
00:15:59,346 --> 0:16:01,096
It captures all those beautiful

448
00:16:01,786 --> 0:16:01,966
strokes.

449
00:16:03,276 --> 0:16:06,256
PKToolPicker provides the UI

450
00:16:06,696 --> 0:16:09,976
that floats around the screen.

451
00:16:10,046 --> 0:16:12,356
And PKTools are the tools that

452
00:16:12,356 --> 0:16:14,236
provide those inks and

453
00:16:14,236 --> 0:16:16,316
interactions that happen on your

454
00:16:16,316 --> 0:16:16,686
canvas.

455
00:16:21,266 --> 0:16:23,386
PKCanvasView is a UI scroll view

456
00:16:23,876 --> 0:16:25,576
that lets you pan and zoom.

457
00:16:26,456 --> 0:16:27,776
It lets you choose how the

458
00:16:27,776 --> 0:16:29,066
user-- what the user's

459
00:16:29,066 --> 0:16:30,566
interaction does to it by

460
00:16:30,566 --> 0:16:31,286
setting the tool.

461
00:16:31,576 --> 0:16:32,766
And it allows you to get the

462
00:16:32,766 --> 0:16:35,596
data model from it and set the

463
00:16:35,596 --> 0:16:37,216
data model on it using the

464
00:16:37,216 --> 0:16:38,676
drawing property.

465
00:16:40,596 --> 0:16:42,696
PKDrawing is the data model of

466
00:16:42,696 --> 0:16:43,066
PencilKit.

467
00:16:43,066 --> 0:16:44,816
And this is the one piece of

468
00:16:44,856 --> 0:16:46,156
PencilKit that is available on

469
00:16:46,156 --> 0:16:46,726
macOS.

470
00:16:47,456 --> 0:16:50,326
It has a data format and it

471
00:16:50,326 --> 0:16:52,136
allows you to load and store

472
00:16:52,136 --> 0:16:53,536
drawings to data.

473
00:16:54,106 --> 0:16:56,246
You can use these drawings to

474
00:16:56,246 --> 0:16:58,446
generate images for sharing or

475
00:16:58,446 --> 0:16:58,936
thumbnails.

476
00:17:01,386 --> 0:17:03,116
Let's take a look at how the

477
00:17:03,116 --> 0:17:04,606
sample app generates thumbnails.

478
00:17:07,215 --> 0:17:09,846
Because all of these values have

479
00:17:09,846 --> 0:17:11,976
value types, we can safely do

480
00:17:11,976 --> 0:17:13,976
this work on a background queue.

481
00:17:15,576 --> 0:17:17,205
Because we want to generate

482
00:17:17,746 --> 0:17:19,056
those thumbnails in Light or

483
00:17:19,056 --> 0:17:20,906
Dark Mode depending on where the

484
00:17:20,906 --> 0:17:22,906
app is, we can use

485
00:17:22,906 --> 0:17:24,136
UITraitCollections

486
00:17:24,246 --> 0:17:25,256
performAsCurrent.

487
00:17:29,286 --> 0:17:31,106
We use the drawing to generate

488
00:17:31,106 --> 0:17:31,646
that image.

489
00:17:32,756 --> 0:17:34,796
And then, finally, we can set

490
00:17:34,796 --> 0:17:36,386
that image back on the main

491
00:17:36,386 --> 0:17:36,646
thread.

492
00:17:39,596 --> 0:17:41,806
So, now I'd love to hand over to

493
00:17:41,806 --> 0:17:44,136
Jenny who'll talk more about the

494
00:17:44,136 --> 0:17:46,826
fantastic tools and Tool Picker

495
00:17:46,826 --> 0:17:48,346
and the great things that

496
00:17:48,346 --> 0:17:49,326
PencilKit can do.

497
00:17:50,516 --> 0:17:55,500
[ Applause ]

498
00:17:58,336 --> 0:17:58,976
&gt;&gt; Thanks, Will.

499
00:17:59,156 --> 0:18:01,356
Hi. I'm Jenny and I'm going to--

500
00:17:59,156 --> 0:18:01,356
Hi. I'm Jenny and I'm going to--

501
00:18:01,356 --> 0:18:02,936
let's continue our tour through

502
00:18:02,936 --> 0:18:04,706
PencilKit by walking through

503
00:18:04,756 --> 0:18:06,326
some of the great tools that

504
00:18:06,326 --> 0:18:07,526
PencilKit offers you.

505
00:18:08,376 --> 0:18:10,046
These tools are located in a

506
00:18:10,046 --> 0:18:11,586
brand-new Tool Picker.

507
00:18:11,846 --> 0:18:12,676
It's dynamic.

508
00:18:13,106 --> 0:18:14,296
It floats above everything.

509
00:18:14,296 --> 0:18:16,506
I can drag it from edge to edge

510
00:18:16,696 --> 0:18:18,886
or even dock it to the bottom to

511
00:18:18,886 --> 0:18:20,456
really let it get out of my way.

512
00:18:22,446 --> 0:18:24,456
As Will mentioned, these tools

513
00:18:24,456 --> 0:18:25,716
are PKTool types.

514
00:18:26,316 --> 0:18:27,946
And for the marking tools,

515
00:18:27,946 --> 0:18:29,636
they're PKInkingTool types.

516
00:18:30,186 --> 0:18:31,776
You can specify one of the three

517
00:18:31,776 --> 0:18:36,126
types, either pen, marker, or

518
00:18:36,126 --> 0:18:36,726
pencil.

519
00:18:39,816 --> 0:18:42,066
Each of these tools are super

520
00:18:42,066 --> 0:18:43,796
dynamic and expressive.

521
00:18:43,996 --> 0:18:45,886
And you can see how within even

522
00:18:45,926 --> 0:18:48,336
a single stroke, the width and

523
00:18:48,336 --> 0:18:50,256
opacity change based on

524
00:18:50,256 --> 0:18:52,586
different Pencil properties like

525
00:18:52,586 --> 0:18:55,436
force, azimuth, altitude, or

526
00:18:55,436 --> 0:18:56,866
velocity.

527
00:18:59,086 --> 0:18:59,986
You can set this tool on the

528
00:18:59,986 --> 0:19:03,196
canvasView to set what ink is

529
00:18:59,986 --> 0:19:03,196
canvasView to set what ink is

530
00:19:03,236 --> 0:19:04,156
set on the canvas.

531
00:19:04,566 --> 0:19:06,276
If you set the canvasView as an

532
00:19:06,276 --> 0:19:07,956
observer of the Tool Picker,

533
00:19:08,486 --> 0:19:09,906
underneath the hood will set the

534
00:19:09,906 --> 0:19:11,746
ink on the canvasView for you.

535
00:19:12,476 --> 0:19:13,816
However, if you have the

536
00:19:13,816 --> 0:19:15,406
signature pane and you don't

537
00:19:15,406 --> 0:19:17,896
want the Tool Picker, you'll set

538
00:19:17,896 --> 0:19:19,156
this in your application

539
00:19:19,156 --> 0:19:19,646
yourself.

540
00:19:20,746 --> 0:19:22,236
For the PKInkingTool, you'll

541
00:19:22,236 --> 0:19:24,546
specify either the type, pen,

542
00:19:24,706 --> 0:19:28,216
marker, pencil, the color, or

543
00:19:28,216 --> 0:19:29,386
the width.

544
00:19:30,786 --> 0:19:33,546
For the width value, each of ink

545
00:19:33,546 --> 0:19:35,176
type has a default width.

546
00:19:35,916 --> 0:19:37,816
However, as we saw before, this

547
00:19:37,816 --> 0:19:40,026
width isn't a fixed value and it

548
00:19:40,026 --> 0:19:41,196
changes based on different

549
00:19:41,196 --> 0:19:42,096
pencil properties.

550
00:19:42,676 --> 0:19:43,866
And so, rather this width

551
00:19:43,866 --> 0:19:46,476
represents a base value based on

552
00:19:46,476 --> 0:19:48,576
an average pencil user pencil

553
00:19:48,576 --> 0:19:49,386
characteristic.

554
00:19:50,806 --> 0:19:52,206
You can also query the valid

555
00:19:52,206 --> 0:19:53,816
width range for each of those

556
00:19:53,816 --> 0:19:55,436
ink types.

557
00:19:56,876 --> 0:19:58,786
You can see this here as I use

558
00:19:58,786 --> 0:19:59,676
the pencil tool.

559
00:20:00,156 --> 0:20:01,496
As I hold the pencil more

560
00:20:01,496 --> 0:20:04,076
vertically, the pencil stroke is

561
00:20:04,166 --> 0:20:04,636
thinner.

562
00:20:05,066 --> 0:20:05,916
But as I hold it more

563
00:20:05,916 --> 0:20:07,666
horizontally, the stroke is

564
00:20:07,666 --> 0:20:08,746
actually thicker.

565
00:20:09,716 --> 0:20:11,296
As I change the thickness in the

566
00:20:11,296 --> 0:20:13,266
Tool Picker, the thickness

567
00:20:13,266 --> 0:20:14,476
scales accordingly.

568
00:20:18,266 --> 0:20:20,706
We also have a PKEraser tool in

569
00:20:20,706 --> 0:20:22,336
which you can specify either a

570
00:20:22,336 --> 0:20:25,526
vector or bitmap, where vector

571
00:20:25,526 --> 0:20:27,246
corresponds to objects and

572
00:20:27,246 --> 0:20:28,956
bitmap corresponds to pixel.

573
00:20:29,746 --> 0:20:30,916
We've actually worked really

574
00:20:30,916 --> 0:20:33,116
hard to unify the two worlds of

575
00:20:33,116 --> 0:20:34,566
vector and bitmap together,

576
00:20:35,136 --> 0:20:36,786
where vector is object and

577
00:20:36,786 --> 0:20:37,766
bitmap is pixel.

578
00:20:38,526 --> 0:20:40,196
Instead of just erasing the

579
00:20:40,246 --> 0:20:42,206
pixels on the screen, we also

580
00:20:42,396 --> 0:20:44,286
sliced through those strokes so

581
00:20:44,286 --> 0:20:45,566
that you can separate them out

582
00:20:45,566 --> 0:20:47,316
or object erase them later.

583
00:20:51,076 --> 0:20:52,826
We also have for selection, the

584
00:20:52,826 --> 0:20:54,126
PKLasso Tool.

585
00:20:55,436 --> 0:20:57,416
With the Lasso Tool, any strokes

586
00:20:57,416 --> 0:20:58,466
that you intersect will be

587
00:20:58,466 --> 0:21:00,636
selected and then, you can drag

588
00:20:58,466 --> 0:21:00,636
selected and then, you can drag

589
00:21:00,636 --> 0:21:02,846
them around, cut, copy, paste

590
00:21:02,846 --> 0:21:04,886
it, or even drag and drop them

591
00:21:04,886 --> 0:21:06,276
to different applications.

592
00:21:08,386 --> 0:21:11,206
New to iOS 13, we also have a

593
00:21:11,206 --> 0:21:12,476
great Ruler Tool.

594
00:21:12,996 --> 0:21:15,606
And it's important to note that

595
00:21:15,606 --> 0:21:17,466
the Ruler is not a tool--

596
00:21:17,536 --> 0:21:18,466
PKTool.

597
00:21:18,466 --> 0:21:19,996
But rather, it's a property that

598
00:21:19,996 --> 0:21:22,696
you toggle on the canvas to show

599
00:21:22,696 --> 0:21:23,956
or hide the Ruler.

600
00:21:25,196 --> 0:21:27,486
You can either draw against it

601
00:21:27,536 --> 0:21:28,946
to snap your lines to draw

602
00:21:28,946 --> 0:21:30,706
straight lines, or you can mask

603
00:21:30,906 --> 0:21:32,476
against it like Will did with

604
00:21:32,476 --> 0:21:34,846
the apple in here with the water

605
00:21:34,846 --> 0:21:35,406
and the grass.

606
00:21:38,476 --> 0:21:39,256
Now, that we've gone through

607
00:21:39,256 --> 0:21:41,216
some of the amazing tools, let's

608
00:21:41,216 --> 0:21:43,426
look at the PKToolPicker and how

609
00:21:43,426 --> 0:21:45,116
we can get it on the screen.

610
00:21:47,166 --> 0:21:49,026
An important thing to note with

611
00:21:49,026 --> 0:21:50,896
the Tool Picker is that it's not

612
00:21:50,946 --> 0:21:51,566
a view.

613
00:21:52,156 --> 0:21:53,776
Rather, it's an object that

614
00:21:53,776 --> 0:21:55,146
shows or hides the view and it's

615
00:21:55,146 --> 0:21:56,706
separate from the Canvas View.

616
00:21:57,726 --> 0:21:59,016
It's also important to note that

617
00:21:59,016 --> 0:22:01,546
it floats above everything and

618
00:21:59,016 --> 0:22:01,546
it floats above everything and

619
00:22:01,546 --> 0:22:02,526
it's very similar to the

620
00:22:02,526 --> 0:22:04,266
keyboard in that its visibility

621
00:22:04,266 --> 0:22:05,346
is based off of first

622
00:22:05,346 --> 0:22:06,046
responders.

623
00:22:06,906 --> 0:22:08,416
So, let's walk through some code

624
00:22:08,416 --> 0:22:10,526
and see how we can do that.

625
00:22:10,946 --> 0:22:12,836
First, we'll ask for the shared

626
00:22:12,836 --> 0:22:14,916
Tool Picker for the window.

627
00:22:16,106 --> 0:22:17,856
We'll add the Canvas View as an

628
00:22:17,896 --> 0:22:18,366
observer.

629
00:22:18,366 --> 0:22:20,096
And by doing so, whenever you

630
00:22:20,096 --> 0:22:21,236
change the tool in the Tool

631
00:22:21,236 --> 0:22:23,316
Picker, you'll also change the

632
00:22:23,316 --> 0:22:24,826
tool on the Canvas View.

633
00:22:27,736 --> 0:22:29,846
The Tool Picker also has a list

634
00:22:29,846 --> 0:22:30,796
of responders.

635
00:22:31,506 --> 0:22:32,776
If your object becomes first

636
00:22:32,776 --> 0:22:34,586
responder and it's in this lest

637
00:22:34,586 --> 0:22:36,526
by setting visible to true, the

638
00:22:36,526 --> 0:22:37,556
palette will show up.

639
00:22:38,376 --> 0:22:40,176
If setVisible is false, it'll

640
00:22:40,176 --> 0:22:41,746
remove it from that list and

641
00:22:41,746 --> 0:22:42,746
then the palette will hide.

642
00:22:44,236 --> 0:22:46,096
And so, when the Canvas View

643
00:22:46,136 --> 0:22:47,746
becomes first responder, we want

644
00:22:47,746 --> 0:22:48,536
the palette to show.

645
00:22:48,786 --> 0:22:52,036
So, we'll set visible to true.

646
00:22:52,206 --> 0:22:53,636
Finally, we'll make the Canvas

647
00:22:53,636 --> 0:22:55,496
View becomeFirstResponder so the

648
00:22:55,496 --> 0:22:56,976
palette will show up.

649
00:22:57,876 --> 0:22:59,516
You can see this in our sample

650
00:22:59,766 --> 0:22:59,866
app.

651
00:23:00,046 --> 0:23:01,626
Once we set the Canvas View to

652
00:23:01,626 --> 0:23:03,116
becomeFirstResponder, the

653
00:23:03,166 --> 0:23:04,356
palette will be visible.

654
00:23:05,666 --> 0:23:07,196
However, in our sample app, we

655
00:23:07,196 --> 0:23:08,576
also have a case with at

656
00:23:08,576 --> 0:23:10,306
signature pane where we only

657
00:23:10,306 --> 0:23:12,806
want to offer you blue or black

658
00:23:12,916 --> 0:23:13,226
ink.

659
00:23:13,766 --> 0:23:15,036
And we don't want the palette to

660
00:23:15,036 --> 0:23:15,606
be shown.

661
00:23:16,436 --> 0:23:18,176
And so, in order to handle that,

662
00:23:18,446 --> 0:23:19,656
we actually make the canvas--

663
00:23:19,986 --> 0:23:21,506
the signature's Canvas View

664
00:23:21,506 --> 0:23:23,786
becomeFirstResponder, which will

665
00:23:23,786 --> 0:23:25,596
then make the Tool Picker go

666
00:23:26,406 --> 0:23:26,546
away.

667
00:23:28,416 --> 0:23:29,836
When you dismiss that Signature

668
00:23:29,836 --> 0:23:31,136
View Controller, underneath the

669
00:23:31,136 --> 0:23:32,756
hood you'll automatically resign

670
00:23:32,756 --> 0:23:34,606
first responder which will then

671
00:23:34,606 --> 0:23:36,006
cause the tool palette to show

672
00:23:36,006 --> 0:23:37,246
up again.

673
00:23:38,236 --> 0:23:39,696
One of the other things you'll

674
00:23:39,696 --> 0:23:40,856
want to keep in mind with this

675
00:23:40,856 --> 0:23:42,766
responder-based visibility is

676
00:23:42,766 --> 0:23:43,856
that you may already have

677
00:23:43,946 --> 0:23:45,546
objects in your application that

678
00:23:45,626 --> 0:23:46,676
take first responder.

679
00:23:47,166 --> 0:23:48,436
Like, for example, for edit and

680
00:23:48,436 --> 0:23:49,136
the new controllers.

681
00:23:49,136 --> 0:23:50,886
And you'll basically want the

682
00:23:50,886 --> 0:23:52,826
palette to show even when your

683
00:23:52,906 --> 0:23:53,756
Edit menu is up.

684
00:23:54,526 --> 0:23:55,856
To do this, you'll simply set

685
00:23:55,856 --> 0:23:57,966
visible to true for your object

686
00:23:58,816 --> 0:23:59,766
so that the palette stays

687
00:23:59,766 --> 0:24:00,256
visible.

688
00:23:59,766 --> 0:24:00,256
visible.

689
00:24:02,246 --> 0:24:03,516
Another thing you'll want to

690
00:24:03,516 --> 0:24:05,816
consider with the Tool Picker is

691
00:24:06,066 --> 0:24:08,086
regular versus compact size

692
00:24:08,186 --> 0:24:08,766
classes.

693
00:24:09,836 --> 0:24:10,766
You'll notice in the regular

694
00:24:10,766 --> 0:24:13,246
size class that it floats above

695
00:24:13,246 --> 0:24:14,556
everything, you can move it

696
00:24:14,556 --> 0:24:15,226
around.

697
00:24:16,136 --> 0:24:17,466
However, in the compact size

698
00:24:17,546 --> 0:24:19,426
class, it's actually fixed and

699
00:24:19,426 --> 0:24:20,456
docked to the bottom.

700
00:24:21,226 --> 0:24:23,016
And so, what does that mean in

701
00:24:23,016 --> 0:24:23,956
your application?

702
00:24:25,476 --> 0:24:27,316
Well, let's say you have a

703
00:24:27,316 --> 0:24:27,986
full-size app.

704
00:24:28,696 --> 0:24:30,176
The photo spans mostly edge to

705
00:24:30,176 --> 0:24:30,716
edge.

706
00:24:31,206 --> 0:24:32,456
And maybe it's obscuring some of

707
00:24:32,456 --> 0:24:33,686
the photo in the regular size

708
00:24:33,766 --> 0:24:34,076
class.

709
00:24:34,646 --> 0:24:36,036
But you can just move the Tool

710
00:24:36,036 --> 0:24:37,286
Picker out of the way, so it's

711
00:24:37,286 --> 0:24:37,736
fine.

712
00:24:39,166 --> 0:24:40,826
However, in the compact size

713
00:24:40,916 --> 0:24:43,926
class, it actually obscures kind

714
00:24:43,926 --> 0:24:45,006
of the most interesting part of

715
00:24:45,006 --> 0:24:45,736
this photo.

716
00:24:46,686 --> 0:24:47,896
And so, what you'll need to do

717
00:24:48,366 --> 0:24:49,726
in the compact size class is to

718
00:24:49,726 --> 0:24:51,506
make sure to adjust your view's

719
00:24:51,506 --> 0:24:53,446
frame or your scroll view insets

720
00:24:54,016 --> 0:24:55,296
to account for the obscured

721
00:24:55,296 --> 0:24:56,546
frame from the Tool Picker.

722
00:24:58,196 --> 0:24:59,876
You can do this by just

723
00:24:59,876 --> 0:25:01,176
listening for the Tool Picker's

724
00:24:59,876 --> 0:25:01,176
listening for the Tool Picker's

725
00:25:01,176 --> 0:25:02,936
frame changes with the Observer

726
00:25:02,936 --> 0:25:05,516
method toolPickerFramesObscured

727
00:25:05,626 --> 0:25:06,466
DidChange.

728
00:25:06,846 --> 0:25:07,846
You'll get this whenever you

729
00:25:07,846 --> 0:25:10,166
move from floating to docked.

730
00:25:10,876 --> 0:25:12,256
At that point, you can adjust

731
00:25:12,256 --> 0:25:13,636
your content accordingly by

732
00:25:13,886 --> 0:25:15,806
asking for the frame obscured in

733
00:25:15,856 --> 0:25:16,876
your view.

734
00:25:19,446 --> 0:25:20,526
Another thing you'll want to

735
00:25:20,526 --> 0:25:21,796
consider with the Tool Picker

736
00:25:21,796 --> 0:25:23,976
are your undo and redo buttons.

737
00:25:25,336 --> 0:25:27,066
You'll notice how in the regular

738
00:25:27,066 --> 0:25:29,736
size class that undo/redo

739
00:25:29,736 --> 0:25:31,116
buttons are actually baked

740
00:25:31,116 --> 0:25:32,366
inside of the palette and

741
00:25:32,366 --> 0:25:33,466
provided for you.

742
00:25:34,186 --> 0:25:35,636
However, in the compact size

743
00:25:35,636 --> 0:25:36,506
class, they're not in the

744
00:25:36,506 --> 0:25:37,436
palette at all.

745
00:25:37,436 --> 0:25:38,726
So, you'll need to make sure in

746
00:25:38,726 --> 0:25:40,296
the compact size classes that

747
00:25:40,296 --> 0:25:42,116
you show your own undo and redo

748
00:25:42,116 --> 0:25:42,696
buttons.

749
00:25:45,376 --> 0:25:46,986
Now that we've walked through

750
00:25:46,986 --> 0:25:48,586
how you can get a basic Canvas

751
00:25:48,586 --> 0:25:49,816
View and Tool Picker on the

752
00:25:49,816 --> 0:25:52,156
screen, let's walk through some

753
00:25:52,156 --> 0:25:53,866
more of the advanced behaviors

754
00:25:54,016 --> 0:25:55,906
that you can have in PencilKit,

755
00:25:56,486 --> 0:25:57,926
starting with some of the Canvas

756
00:25:57,926 --> 0:25:58,696
View delegates.

757
00:26:00,346 --> 0:26:01,486
You might want to update your

758
00:26:01,666 --> 0:26:03,206
app based on what the user is

759
00:26:03,206 --> 0:26:03,796
drawing.

760
00:26:04,426 --> 0:26:05,756
You can do so by listening to

761
00:26:05,756 --> 0:26:07,856
the pencil or touch down, in

762
00:26:07,856 --> 0:26:08,846
which case you'll get a

763
00:26:08,846 --> 0:26:11,366
canvasViewDidBeginUsingTool

764
00:26:11,366 --> 0:26:11,736
callback.

765
00:26:13,296 --> 0:26:15,086
On pencil or touch up, you'll

766
00:26:15,086 --> 0:26:17,516
get a canvasViewDidEndUsingTool

767
00:26:17,516 --> 0:26:17,886
callback.

768
00:26:18,616 --> 0:26:20,096
However, at this point, your

769
00:26:20,096 --> 0:26:22,246
drawing is not yet fully updated

770
00:26:22,636 --> 0:26:23,956
because as Will mentioned, it's

771
00:26:23,956 --> 0:26:25,406
not until those final force

772
00:26:25,486 --> 0:26:27,716
values come in, that you get a

773
00:26:27,716 --> 0:26:28,126
final

774
00:26:28,256 --> 0:26:30,576
canvasViewDrawingDidChange.

775
00:26:31,066 --> 0:26:32,216
Only at this point, you're

776
00:26:32,216 --> 0:26:34,136
guaranteed to have a final

777
00:26:34,136 --> 0:26:35,226
finished drawing.

778
00:26:35,716 --> 0:26:36,876
And so, at this point, you can

779
00:26:36,876 --> 0:26:37,946
query the drawing from the

780
00:26:37,946 --> 0:26:40,336
canvas and update your model

781
00:26:40,336 --> 0:26:42,156
objects, generate thumbnails, or

782
00:26:42,156 --> 0:26:43,646
save if necessary.

783
00:26:45,276 --> 0:26:47,046
You might also want to load a

784
00:26:47,046 --> 0:26:49,006
drawing into your Canvas View.

785
00:26:49,906 --> 0:26:51,516
You can do so by calling set

786
00:26:51,516 --> 0:26:52,096
drawing.

787
00:26:52,346 --> 0:26:53,936
At that point, we'll start

788
00:26:54,016 --> 0:26:55,816
loading in the tiles.

789
00:26:57,376 --> 0:26:58,816
However, it's not until those

790
00:26:58,816 --> 0:27:00,556
tiles are done loading that

791
00:26:58,816 --> 0:27:00,556
tiles are done loading that

792
00:27:00,556 --> 0:27:01,066
you'll get a

793
00:27:01,066 --> 0:27:03,086
canvasViewDidFinishRendering

794
00:27:03,086 --> 0:27:03,466
callback.

795
00:27:04,416 --> 0:27:06,696
You'll also get this callback

796
00:27:07,016 --> 0:27:09,036
after scrolling or zooming.

797
00:27:10,186 --> 0:27:12,666
Speaking of scrolling, we not

798
00:27:12,666 --> 0:27:14,906
only have let you draw with your

799
00:27:14,906 --> 0:27:16,846
Pencil, but we also let you draw

800
00:27:16,846 --> 0:27:17,656
with your finger.

801
00:27:18,266 --> 0:27:20,136
And since PKCanvasView is a

802
00:27:20,196 --> 0:27:22,746
scroll view, that means that one

803
00:27:22,746 --> 0:27:24,446
finger actually lets you draw.

804
00:27:31,106 --> 0:27:33,046
And two fingers scroll.

805
00:27:35,256 --> 0:27:36,796
This is toggled via the

806
00:27:36,796 --> 0:27:38,846
allowsFingerDrawing property on

807
00:27:38,846 --> 0:27:39,776
the Canvas View.

808
00:27:40,676 --> 0:27:42,386
When this is set to true, one

809
00:27:42,386 --> 0:27:44,376
finger and pencil draw while two

810
00:27:44,376 --> 0:27:45,276
fingers scroll.

811
00:27:45,706 --> 0:27:47,066
Now, this is the default

812
00:27:47,066 --> 0:27:48,706
behavior on the Canvas View.

813
00:27:48,706 --> 0:27:49,946
And if this is not what you

814
00:27:49,946 --> 0:27:51,666
want, you can actually set this

815
00:27:51,666 --> 0:27:52,736
property to false.

816
00:27:53,326 --> 0:27:55,476
In which case, only Pencil will

817
00:27:55,476 --> 0:27:58,206
draw and one finger will scroll.

818
00:27:58,766 --> 0:27:59,996
However, you should keep in mind

819
00:28:00,056 --> 0:28:01,816
contexts like iPhone where

820
00:28:01,816 --> 0:28:03,196
Pencil is not available.

821
00:28:05,156 --> 0:28:06,756
If you have some more complex

822
00:28:06,756 --> 0:28:08,296
interactions in your app, we've

823
00:28:08,296 --> 0:28:09,246
also exposed the

824
00:28:09,246 --> 0:28:10,976
drawingGestureRecognizer for

825
00:28:10,976 --> 0:28:11,306
you.

826
00:28:11,916 --> 0:28:13,036
With that, you can set up

827
00:28:13,356 --> 0:28:15,096
gesture recognizer exclusions or

828
00:28:15,096 --> 0:28:16,506
failure requirements.

829
00:28:17,416 --> 0:28:19,076
There's a great talk from WWDC

830
00:28:19,076 --> 0:28:21,956
2017 for ''Modern User

831
00:28:22,346 --> 0:28:24,966
Interaction on iOS''.

832
00:28:26,516 --> 0:28:28,446
As Will mentioned, we also use

833
00:28:28,446 --> 0:28:30,576
PencilKit across all create

834
00:28:30,576 --> 0:28:32,726
parts including screenshots and

835
00:28:32,726 --> 0:28:33,226
markup.

836
00:28:33,746 --> 0:28:35,246
And in these contexts, you can

837
00:28:35,246 --> 0:28:36,816
draw over contents.

838
00:28:37,326 --> 0:28:38,606
You can easily achieve this in

839
00:28:38,606 --> 0:28:40,596
your app as well, by setting the

840
00:28:40,596 --> 0:28:43,276
opaque flag to false and setting

841
00:28:43,276 --> 0:28:44,746
the background color to clear.

842
00:28:47,636 --> 0:28:49,936
In iOS 13, we also introduce

843
00:28:50,016 --> 0:28:51,916
Dark Mode which is a fantastic

844
00:28:51,986 --> 0:28:53,956
way to see your content in a

845
00:28:53,956 --> 0:28:55,376
completely different way.

846
00:28:55,976 --> 0:28:57,686
Your PencilKit canvases also

847
00:28:57,686 --> 0:28:59,636
still look amazing as the colors

848
00:28:59,636 --> 0:29:02,286
dynamically adjust to maintain

849
00:28:59,636 --> 0:29:02,286
dynamically adjust to maintain

850
00:29:02,286 --> 0:29:03,046
legibility.

851
00:29:03,046 --> 0:29:04,906
You can see how I originally

852
00:29:04,906 --> 0:29:06,486
wrote this note with black ink

853
00:29:06,486 --> 0:29:07,766
over a white background.

854
00:29:08,236 --> 0:29:10,016
But in Dark Mode, it changes to

855
00:29:10,106 --> 0:29:11,756
mostly white ink over a black

856
00:29:11,836 --> 0:29:12,466
background.

857
00:29:12,816 --> 0:29:14,586
Not only do my notes still

858
00:29:14,586 --> 0:29:16,106
maintain legibility, but they

859
00:29:16,106 --> 0:29:17,856
also still look fantastic.

860
00:29:18,926 --> 0:29:21,546
By default, your canvases will

861
00:29:21,546 --> 0:29:23,166
also dynamically adjust their

862
00:29:23,166 --> 0:29:24,696
colors if they're in Dark Mode.

863
00:29:25,966 --> 0:29:27,306
However, if this is not what you

864
00:29:27,306 --> 0:29:30,296
want, you can set the

865
00:29:30,296 --> 0:29:32,276
overrideUserInterfaceStyle to

866
00:29:32,376 --> 0:29:33,406
always be light.

867
00:29:34,196 --> 0:29:35,456
You'll especially want to do

868
00:29:35,456 --> 0:29:37,286
this if your content that you're

869
00:29:37,286 --> 0:29:38,926
marking up doesn't change, like

870
00:29:38,926 --> 0:29:40,216
if you're marking up over an

871
00:29:40,216 --> 0:29:44,516
image or a PDF.

872
00:29:44,726 --> 0:29:45,676
Now that we've walked through

873
00:29:45,676 --> 0:29:47,676
PencilKit and shown you how you

874
00:29:47,676 --> 0:29:49,596
can make an amazing drawing

875
00:29:49,596 --> 0:29:51,146
experience in your application,

876
00:29:51,736 --> 0:29:53,276
let's look at Markup Everywhere,

877
00:29:53,676 --> 0:29:55,286
a new feature which allows your

878
00:29:55,286 --> 0:29:57,836
application to pass any content

879
00:29:57,916 --> 0:29:58,756
to be marked up.

880
00:29:59,636 --> 0:30:00,786
This has surfaced through a new

881
00:29:59,636 --> 0:30:00,786
This has surfaced through a new

882
00:30:00,786 --> 0:30:04,596
API on Screenshots, where we let

883
00:30:04,596 --> 0:30:07,406
you provide full content that

884
00:30:07,406 --> 0:30:08,766
whenever you take a screenshot

885
00:30:08,766 --> 0:30:10,206
over your app.

886
00:30:11,596 --> 0:30:13,236
You can see this adopted in

887
00:30:13,236 --> 0:30:13,916
Safari.

888
00:30:14,386 --> 0:30:16,196
Here, I have apple.com.

889
00:30:16,776 --> 0:30:18,156
I'm going to take a screenshot

890
00:30:18,156 --> 0:30:19,606
by using the new pencil gesture

891
00:30:19,606 --> 0:30:20,956
by pulling in from the corner.

892
00:30:20,956 --> 0:30:22,936
And so, I have the screenshot I

893
00:30:22,936 --> 0:30:24,506
know and love but I can't see

894
00:30:24,506 --> 0:30:25,616
the rest of the page.

895
00:30:26,106 --> 0:30:27,406
So, I'll tap that full-page

896
00:30:27,466 --> 0:30:29,656
segment at the top and now I

897
00:30:29,656 --> 0:30:31,796
have the full scrolling webpage

898
00:30:31,856 --> 0:30:33,866
for me to markup and share.

899
00:30:34,016 --> 0:30:35,546
[ Applause ]

900
00:30:35,546 --> 0:30:35,626
Yeah.

901
00:30:36,516 --> 0:30:39,500
[ Applause ]

902
00:30:41,316 --> 0:30:42,806
You can also see this

903
00:30:43,526 --> 0:30:45,796
implemented in our sample app.

904
00:30:45,796 --> 0:30:47,206
Again, with the new Screenshot

905
00:30:47,416 --> 0:30:49,556
gesture, I'll tap that full-page

906
00:30:49,556 --> 0:30:51,286
segment and now I have the whole

907
00:30:51,286 --> 0:30:53,866
note for me to send off.

908
00:30:56,256 --> 0:30:57,156
You can also see this in

909
00:30:57,156 --> 0:30:58,886
interesting use cases like maps.

910
00:31:00,216 --> 0:31:01,666
Again, using the new Screenshot

911
00:31:01,666 --> 0:31:02,716
gesture, I'm going to take a

912
00:31:02,816 --> 0:31:03,486
screenshot.

913
00:31:03,976 --> 0:31:05,096
But you can see my screenshot is

914
00:31:05,196 --> 0:31:06,406
kind of covered up by the

915
00:31:06,406 --> 0:31:07,056
chrome.

916
00:31:07,756 --> 0:31:09,606
When I tap the full-page segment

917
00:31:09,606 --> 0:31:11,596
at the top, I'll be able to see

918
00:31:11,596 --> 0:31:13,236
my map without any of the chrome

919
00:31:13,236 --> 0:31:13,806
in the way.

920
00:31:13,876 --> 0:31:14,926
I can see the roads and

921
00:31:14,926 --> 0:31:16,276
restaurants underneath.

922
00:31:18,316 --> 0:31:20,526
You can easily adopt this in

923
00:31:20,526 --> 0:31:22,626
your application with only a few

924
00:31:22,626 --> 0:31:23,526
lines of code.

925
00:31:24,306 --> 0:31:25,616
You'll start by setting yourself

926
00:31:25,616 --> 0:31:26,736
as the delegate of the

927
00:31:26,736 --> 0:31:28,896
UIScreenshotService on

928
00:31:28,896 --> 0:31:30,056
UIWindowScene.

929
00:31:30,776 --> 0:31:32,556
UIWindowScene is a new API to

930
00:31:32,676 --> 0:31:33,486
UIKit this year.

931
00:31:33,486 --> 0:31:34,786
And you can learn more by

932
00:31:34,786 --> 0:31:36,126
referencing the ''Introducing

933
00:31:36,126 --> 0:31:37,976
Multiple Windows on iPad'' talk.

934
00:31:39,346 --> 0:31:40,606
Once you've set yourself as the

935
00:31:40,606 --> 0:31:41,796
delegate, you'll deliver as the

936
00:31:41,796 --> 0:31:43,776
full content, which is expressed

937
00:31:43,776 --> 0:31:44,406
as PDF data.

938
00:31:45,836 --> 0:31:46,956
You might already have this

939
00:31:46,956 --> 0:31:48,326
information generated for

940
00:31:48,426 --> 0:31:49,816
actions like sharing or

941
00:31:49,816 --> 0:31:50,446
printing.

942
00:31:50,866 --> 0:31:52,086
But in case you don't, there's a

943
00:31:52,086 --> 0:31:55,626
great talk from WWDC 2017 from

944
00:31:55,626 --> 0:31:57,176
''Introducing PDFKit on iOS''.

945
00:31:58,806 --> 0:32:00,486
So, once you have that PDF data,

946
00:31:58,806 --> 0:32:00,486
So, once you have that PDF data,

947
00:32:00,896 --> 0:32:01,926
you'll implement the delegate

948
00:32:01,926 --> 0:32:03,496
method screenshotService,

949
00:32:03,576 --> 0:32:05,256
generatePDFRepresentation

950
00:32:05,256 --> 0:32:06,036
WithCompletion.

951
00:32:06,036 --> 0:32:08,626
You'll pass that PDF data to us

952
00:32:08,676 --> 0:32:10,446
in the completion handler along

953
00:32:10,446 --> 0:32:11,626
with two other pieces of

954
00:32:11,626 --> 0:32:12,336
metadata.

955
00:32:13,056 --> 0:32:14,256
Which will help us ensure that

956
00:32:14,256 --> 0:32:15,996
when you go from screen to full

957
00:32:15,996 --> 0:32:17,826
page, that we have a smooth

958
00:32:17,966 --> 0:32:18,936
seamless transition.

959
00:32:21,166 --> 0:32:22,266
The first piece of metadata is

960
00:32:22,266 --> 0:32:23,886
the indexOfCurrentPage.

961
00:32:24,276 --> 0:32:25,966
This is useful in cases like

962
00:32:26,096 --> 0:32:26,546
Keynote.

963
00:32:27,016 --> 0:32:29,306
Let's say I take a screenshot of

964
00:32:29,416 --> 0:32:30,226
slide seven.

965
00:32:30,556 --> 0:32:32,156
When I switch to the full-page

966
00:32:32,216 --> 0:32:33,516
segment, it'll automatically

967
00:32:33,516 --> 0:32:35,506
jump me to page seven.

968
00:32:37,636 --> 0:32:39,926
The second piece of metadata is

969
00:32:39,956 --> 0:32:41,746
the rectInCurrentPage.

970
00:32:42,246 --> 0:32:43,666
This is useful in cases like

971
00:32:43,726 --> 0:32:44,386
Safari.

972
00:32:44,846 --> 0:32:46,546
Here, I have this long scrolling

973
00:32:46,546 --> 0:32:47,196
page.

974
00:32:47,496 --> 0:32:48,896
And I'm going to scroll to the

975
00:32:48,896 --> 0:32:50,096
bottom because I'm really

976
00:32:50,376 --> 0:32:51,606
feeling excited about the new

977
00:32:51,776 --> 0:32:52,586
iPad Pro.

978
00:32:53,156 --> 0:32:54,246
So, I'll take a screenshot at

979
00:32:54,246 --> 0:32:57,406
the bottom there.

980
00:32:57,606 --> 0:32:59,566
Now, when I tap the full-page

981
00:32:59,596 --> 0:33:01,646
segment at the top, instead of

982
00:32:59,596 --> 0:33:01,646
segment at the top, instead of

983
00:33:01,886 --> 0:33:03,606
awkwardly jumping me to the top,

984
00:33:03,916 --> 0:33:04,906
it'll actually take me to the

985
00:33:04,906 --> 0:33:06,906
same page-- same RECT that I

986
00:33:06,906 --> 0:33:08,766
took the screenshot in.

987
00:33:09,936 --> 0:33:11,486
The one important thing to note

988
00:33:11,486 --> 0:33:13,236
about this RECT is that we

989
00:33:13,236 --> 0:33:15,016
expect it in PDF coordinates.

990
00:33:15,776 --> 0:33:17,066
And so, what does this mean?

991
00:33:17,816 --> 0:33:19,196
In View Coordinates the origin

992
00:33:19,196 --> 0:33:20,706
is actually the top left.

993
00:33:21,636 --> 0:33:23,326
However, in PDF coordinates,

994
00:33:23,376 --> 0:33:24,526
it's actually in the bottom

995
00:33:24,666 --> 0:33:24,836
left.

996
00:33:25,286 --> 0:33:26,456
So, you'll need to make sure to

997
00:33:26,456 --> 0:33:27,816
do the appropriate coordinate

998
00:33:27,816 --> 0:33:29,586
transformations and send us that

999
00:33:29,586 --> 0:33:30,526
RECT in the appropriate

1000
00:33:30,526 --> 0:33:31,466
coordinates space.

1001
00:33:34,316 --> 0:33:36,606
And so, we've shown you how with

1002
00:33:36,606 --> 0:33:38,196
existing Pencil APIs, you can

1003
00:33:38,676 --> 0:33:41,496
build your own powerful custom

1004
00:33:41,496 --> 0:33:42,506
drawing engine.

1005
00:33:42,996 --> 0:33:44,716
But it will require a little bit

1006
00:33:44,716 --> 0:33:45,646
of elbow grease.

1007
00:33:45,926 --> 0:33:46,846
You'll need to listen to

1008
00:33:46,996 --> 0:33:48,846
estimated touches, delayed

1009
00:33:48,996 --> 0:33:51,016
force, all while rendering

1010
00:33:51,056 --> 0:33:53,296
quickly and asynchronously.

1011
00:33:54,266 --> 0:33:56,616
But now, with the new PencilKit

1012
00:33:56,616 --> 0:33:59,106
APIs, we've made it super easy

1013
00:33:59,106 --> 0:34:00,286
for you to integrate drawing

1014
00:33:59,106 --> 0:34:00,286
for you to integrate drawing

1015
00:34:00,286 --> 0:34:01,286
into your application.

1016
00:34:01,286 --> 0:34:02,766
And you'll get the same

1017
00:34:02,816 --> 0:34:04,776
expressive low-latency

1018
00:34:04,776 --> 0:34:06,106
experience that we have across

1019
00:34:06,106 --> 0:34:07,056
all of iOS.

1020
00:34:08,716 --> 0:34:10,795
Finally, you can also adopt

1021
00:34:10,795 --> 0:34:13,036
other great Pencil APIs in UIKit

1022
00:34:13,585 --> 0:34:15,156
such as UIPencil interaction to

1023
00:34:15,156 --> 0:34:16,485
handle double-taps on the new

1024
00:34:16,485 --> 0:34:17,356
Apple Pencil.

1025
00:34:17,886 --> 0:34:19,735
Or the new UIScreenshotService

1026
00:34:19,735 --> 0:34:21,606
API so that you can deliver full

1027
00:34:21,606 --> 0:34:22,856
content to be marked up

1028
00:34:22,856 --> 0:34:23,466
everywhere.

1029
00:34:24,926 --> 0:34:26,136
For more information, you can

1030
00:34:26,136 --> 0:34:27,545
reference the URL at this

1031
00:34:27,616 --> 0:34:27,966
session.

1032
00:34:29,386 --> 0:34:30,716
Now, go off and build some

1033
00:34:30,716 --> 0:34:32,636
amazing great Pencil

1034
00:34:32,636 --> 0:34:33,406
applications.

1035
00:34:33,696 --> 0:34:34,886
And we hope you have a great

1036
00:34:34,886 --> 0:34:36,676
WWDC 2019.

1037
00:34:37,516 --> 0:34:44,505
[ Applause ]
