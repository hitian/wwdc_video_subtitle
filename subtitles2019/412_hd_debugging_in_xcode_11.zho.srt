1
00:00:06,640 --> 0:00:07,941
（Xcode 11调试）

2
00:00:08,007 --> 0:00:10,611
大家好 欢迎参加

3
00:00:11,111 --> 0:00:14,081
我是Chris Miles

4
00:00:14,314 --> 0:00:15,649
今天非常开心能来这里

5
00:00:15,716 --> 0:00:17,317
我有很多内容要讲

6
00:00:17,618 --> 0:00:19,186
那我就开门见山吧

7
00:00:19,253 --> 0:00:21,889
从设备状况和环境重写

8
00:00:21,955 --> 0:00:23,457
开始介绍吧

9
00:00:24,625 --> 0:00:26,860
当你的app在实际使用中

10
00:00:26,927 --> 0:00:31,465
你可能已经从用户那获取到了报告

11
00:00:31,765 --> 0:00:33,433
他们报告的状况

12
00:00:33,500 --> 0:00:36,737
可能很难在你的开发环境中复现

13
00:00:37,704 --> 0:00:39,873
比如现实生活中的网络状况

14
00:00:40,207 --> 0:00:42,109
现实生活中网络响应

15
00:00:42,176 --> 0:00:45,179
并不如我们在家或办公室

16
00:00:45,245 --> 0:00:46,513
创建app时那么的理想

17
00:00:46,947 --> 0:00:48,282
如果用户在有限的网络连接中

18
00:00:48,649 --> 0:00:52,586
出现了一个问题向你报告了

19
00:00:52,819 --> 0:00:56,490
你需要复现一个

20
00:00:56,557 --> 0:00:58,091
来调试和提升你的app

21
00:00:59,359 --> 0:01:02,796
或是 当设备在现实状况中

22
00:00:59,359 --> 0:01:02,796
或是 当设备在现实状况中

23
00:01:03,096 --> 0:01:06,133
需要控制你app的资源访问量

24
00:01:06,433 --> 0:01:08,368
来降低设备的温度

25
00:01:08,669 --> 0:01:10,571
你需要了解你的app在这类热压力

26
00:01:10,771 --> 0:01:12,506
的状况下的表现

27
00:01:12,773 --> 0:01:15,275
对于那些大量使用资源的app

28
00:01:15,542 --> 0:01:18,378
在设备处于热压力时

29
00:01:18,645 --> 0:01:22,850
你可能要主动地通过减少资源量来

30
00:01:23,350 --> 0:01:27,154
但为了调试和理清你的逻辑

31
00:01:27,521 --> 0:01:29,857
你要如何让你的设备处于

32
00:01:30,691 --> 0:01:32,659
这时就可以使用设备状况

33
00:01:33,093 --> 0:01:37,364
这是Xcode 11的新功能

34
00:01:37,431 --> 0:01:40,901
来安全可靠地升高设备的热压力

35
00:01:40,968 --> 0:01:44,438
到任意级别

36
00:01:44,771 --> 0:01:46,974
你可以使用它来了解你app

37
00:01:47,274 --> 0:01:49,243
在这些热压力的状态下

38
00:01:49,576 --> 0:01:53,247
调试和确认你处理这些热压力

39
00:01:53,947 --> 0:01:56,283
只需注意设备本身并不会

40
00:01:56,517 --> 0:01:59,286
所以不要在天冷的时候

41
00:02:00,787 --> 0:02:03,957
同热压力状态一起

42
00:02:04,291 --> 0:02:07,761
这允许你的Xcode所处的

43
00:02:07,928 --> 0:02:10,097
直接模拟现实生活中的网络状态

44
00:02:10,330 --> 0:02:15,035
比如一个高延时 低带宽

45
00:02:16,036 --> 0:02:19,039
所以你能在多种网络状态下

46
00:02:19,273 --> 0:02:21,708
和调试你app的行为表现

47
00:02:22,309 --> 0:02:24,945
现在 这个功能和

48
00:02:25,212 --> 0:02:28,815
非常熟悉的iOS开发者设置

49
00:02:29,249 --> 0:02:33,320
但我们为它更新了一个更广泛

50
00:02:33,587 --> 0:02:35,622
它完全能被Xcode控制

51
00:02:36,123 --> 0:02:37,991
我马上会为你展示它是如何工作的

52
00:02:39,860 --> 0:02:41,962
现在 用户控制了一些

53
00:02:42,262 --> 0:02:43,730
app必须适配的状况

54
00:02:44,131 --> 0:02:46,633
用户可以自定义他们界面的

55
00:02:47,067 --> 0:02:48,869
可控制设置有很多

56
00:02:49,770 --> 0:02:53,473
比如一个app运行时

57
00:02:54,141 --> 0:02:58,245
在iOS 13中 你的app在

58
00:02:58,412 --> 0:03:00,414
模式中必须提供一个好的用户体验

59
00:02:58,412 --> 0:03:00,414
模式中必须提供一个好的用户体验

60
00:03:02,182 --> 0:03:05,452
一个动态的高度客制化的设置

61
00:03:06,653 --> 0:03:09,523
用户可以从非常动态的尺寸

62
00:03:09,723 --> 0:03:11,625
之间选择

63
00:03:12,025 --> 0:03:15,596
在辅助功能设置中还有更大的

64
00:03:16,163 --> 0:03:18,832
所以你需要调试你的UI样式

65
00:03:18,999 --> 0:03:22,035
在一个范围非常大的动态

66
00:03:23,937 --> 0:03:26,740
辅助功能也有很多选项

67
00:03:27,307 --> 0:03:29,710
许多系统控制已经

68
00:03:29,776 --> 0:03:32,646
但当这些设置生效时

69
00:03:32,713 --> 0:03:35,782
的视图和控制器也能正常运转

70
00:03:36,283 --> 0:03:37,150
就像你在这里看到的

71
00:03:37,417 --> 0:03:40,954
用户可以设置的环境配置有很多

72
00:03:41,321 --> 0:03:42,523
你会在这些设置下

73
00:03:42,589 --> 0:03:45,092
调试和测试你app吗？

74
00:03:45,492 --> 0:03:48,061
你甚至还记得去哪里找到

75
00:03:48,428 --> 0:03:51,398
这就是环境重写能帮你做到的

76
00:03:51,732 --> 0:03:55,135
它允许你轻松地重写这些设置的组合

77
00:03:55,402 --> 0:03:57,804
当你使用Xcode

78
00:03:59,139 --> 0:04:00,274
我们来快速了解一下

79
00:03:59,139 --> 0:04:00,274
我们来快速了解一下

80
00:04:00,340 --> 0:04:02,075
设备状态和环境重写

81
00:04:02,142 --> 0:04:03,577
但我想向你展示它们是如何工作的

82
00:04:03,644 --> 0:04:05,279
我会在Xcode中为你展示

83
00:04:08,315 --> 0:04:11,084
我用Xcode打开了

84
00:04:11,151 --> 0:04:12,920
这是一个允许用户发现旅行目的地

85
00:04:13,187 --> 0:04:15,589
创建一个旅行计划和

86
00:04:15,656 --> 0:04:18,091
记录一段旅程的一个iOS app

87
00:04:18,158 --> 0:04:20,726
你可能在这周其他的一些演讲中

88
00:04:21,228 --> 0:04:24,464
我集中注意力在这个美丽的

89
00:04:24,865 --> 0:04:28,168
的3D渲染地球这里

90
00:04:28,802 --> 0:04:31,004
现在我想测试这个app的

91
00:04:31,371 --> 0:04:33,540
那么我开始添加代码来

92
00:04:33,607 --> 0:04:35,676
观察这台设备上热压力状态的改变

93
00:04:35,909 --> 0:04:38,779
我想减少使用GPU资源

94
00:04:38,946 --> 0:04:40,747
当设备处于热压力下时

95
00:04:41,148 --> 0:04:42,850
那么 我来向你展示我是如何

96
00:04:43,617 --> 0:04:45,919
我将切换到这个

97
00:04:46,320 --> 0:04:49,223
这个控制器被用来配置3D场景

98
00:04:49,990 --> 0:04:52,759
在这个注册器中 你能看到我为

99
00:04:52,826 --> 0:04:55,095
thermalStatedidChangeNotification

100
00:04:55,429 --> 0:04:58,265
当设备的热压力状态改变时

101
00:04:58,532 --> 0:05:01,935
在回调中 我们调用

102
00:04:58,532 --> 0:05:01,935
在回调中 我们调用

103
00:05:02,236 --> 0:05:03,604
那么我们来看一下这个功能

104
00:05:04,204 --> 0:05:06,974
它负责我们3D场景的两个参数

105
00:05:07,307 --> 0:05:09,910
反锯齿模式和请求帧率

106
00:05:10,677 --> 0:05:13,814
当它被调用时 我们能获取到设备

107
00:05:14,181 --> 0:05:17,084
当设备处于非常严重的热压力状态时

108
00:05:17,317 --> 0:05:21,788
我们推荐尽可能减少耗能大

109
00:05:21,855 --> 0:05:24,191
来为设备降温

110
00:05:24,658 --> 0:05:28,028
在当前情况下 我会关闭反锯齿模式

111
00:05:28,495 --> 0:05:30,898
同时将我们的帧率降到30

112
00:05:31,832 --> 0:05:33,700
当处于严重热压力状态时

113
00:05:33,934 --> 0:05:35,302
我们无需像刚才那么激进

114
00:05:35,369 --> 0:05:39,473
所以我们只用关掉反锯齿模式

115
00:05:39,840 --> 0:05:40,974
在较低的热压力状态下时

116
00:05:41,041 --> 0:05:43,410
我们无需在当前的场景中

117
00:05:43,911 --> 0:05:47,014
那么改完之后 我停止下来

118
00:05:47,748 --> 0:05:49,116
我使用旁边的一个设备

119
00:05:49,183 --> 0:05:50,851
我会使用右边的

120
00:05:50,918 --> 0:05:52,619
投屏到这个桌面上

121
00:05:53,787 --> 0:05:56,523
现在 我想要将这台设备设置为

122
00:05:56,590 --> 0:05:59,259
这样我们就能测试逻辑和调试它

123
00:05:59,626 --> 0:06:01,495
我也可以使用新的设备状态

124
00:05:59,626 --> 0:06:01,495
我也可以使用新的设备状态

125
00:06:02,029 --> 0:06:05,699
但在我开始之前 我也想要监控

126
00:06:06,033 --> 0:06:08,936
我现在切换至调试导航栏

127
00:06:09,002 --> 0:06:11,438
选择能源损失测量仪来实现

128
00:06:11,905 --> 0:06:15,943
这个测量仪为你展示了一个平均

129
00:06:16,276 --> 0:06:19,680
和右上方的成分使用率

130
00:06:20,047 --> 0:06:21,615
当我使用这个app时 你能看到

131
00:06:21,882 --> 0:06:25,118
GPU是主要的使用成分

132
00:06:25,686 --> 0:06:28,222
但请你留意中间这里

133
00:06:28,589 --> 0:06:32,125
在Xcode 11中

134
00:06:32,459 --> 0:06:34,161
它为你展示了两个部分的信息

135
00:06:34,494 --> 0:06:37,297
上面的追踪信息显示了设备状态是

136
00:06:37,364 --> 0:06:39,600
现在还没有设备状态

137
00:06:40,067 --> 0:06:42,636
下面的部分展示了设备的当前

138
00:06:42,936 --> 0:06:44,805
蓝色表示正常的热压力状态

139
00:06:44,872 --> 0:06:46,306
所有组件温度都正常 运行平稳

140
00:06:46,807 --> 0:06:47,908
那我们保持它运行

141
00:06:48,108 --> 0:06:51,311
同时我使用窗口菜单来打

142
00:06:52,379 --> 0:06:53,313
我把它挪到上面

143
00:06:53,614 --> 0:06:54,948
现在 设备被选中

144
00:06:55,115 --> 0:06:57,951
我们滚到底部

145
00:06:58,719 --> 0:07:00,888
这里我们看到了这台设备的

146
00:06:58,719 --> 0:07:00,888
这里我们看到了这台设备的

147
00:07:01,221 --> 0:07:02,189
所有的设备状态都处于可用状态

148
00:07:02,256 --> 0:07:05,859
我们有网络连接状态

149
00:07:06,393 --> 0:07:08,729
在我们的使用场景中

150
00:07:09,396 --> 0:07:11,632
我们可以选择热压力状态级别

151
00:07:11,698 --> 0:07:13,534
我会选择非常严 点击开始

152
00:07:14,168 --> 0:07:16,136
现在 这里有几件事需要留意

153
00:07:16,203 --> 0:07:17,471
一个是它要等几分钟

154
00:07:17,538 --> 0:07:20,340
来让设备过渡到非常严重

155
00:07:20,841 --> 0:07:22,309
底下这里的热压力跟踪

156
00:07:22,543 --> 0:07:25,746
我们看到了设备状态现在被激活后

157
00:07:26,146 --> 0:07:26,980
过了一会儿

158
00:07:27,047 --> 0:07:30,751
你能看到设备过渡到了非常严重的

159
00:07:31,318 --> 0:07:34,021
设备的右边这里

160
00:07:34,288 --> 0:07:37,357
注意上面有一个实时的背景过滤

161
00:07:37,424 --> 0:07:38,992
那就是你的状态栏指示器

162
00:07:39,159 --> 0:07:41,929
表示一条设备状态在这个设备

163
00:07:42,496 --> 0:07:45,132
最后 如果我们与我们的3D场景

164
00:07:45,832 --> 0:07:48,135
我们能看到我们添加的帧率指示器

165
00:07:48,402 --> 0:07:49,837
展示的是30帧每秒

166
00:07:50,103 --> 0:07:53,373
这样我们就能非常简单的确认

167
00:07:54,041 --> 0:07:55,642
抗锯齿也处于关闭状态

168
00:07:55,909 --> 0:07:57,678
在这台小设备上有点难看清

169
00:07:57,744 --> 0:07:59,746
但在一台大设备上你可以看到

170
00:08:00,247 --> 0:08:03,217
那么 现在我们已经使用了

171
00:08:03,283 --> 0:08:04,651
我们可以关掉它了

172
00:08:05,219 --> 0:08:06,553
我点击这里的停止按钮

173
00:08:06,620 --> 0:08:09,256
但这里还有一些其他的方式来

174
00:08:09,556 --> 0:08:13,093
一个是在Xcode上断开

175
00:08:13,360 --> 0:08:15,596
如果设备始终与Xcode断开

176
00:08:15,662 --> 0:08:17,764
它会自动地关闭一个设备状态

177
00:08:17,831 --> 0:08:19,967
因为我们不希望你的设备

178
00:08:20,033 --> 0:08:21,068
当你不处于开发模式中时

179
00:08:21,568 --> 0:08:23,270
另一个是设备本身

180
00:08:23,604 --> 0:08:26,406
我们可以点击上面的状态栏指示器

181
00:08:27,107 --> 0:08:30,043
我们看到了

182
00:08:30,110 --> 0:08:32,913
我可以点击停止按钮来关闭状态

183
00:08:33,113 --> 0:08:33,981
我现在来点

184
00:08:34,548 --> 0:08:36,082
我们能关闭设备窗口

185
00:08:36,984 --> 0:08:38,852
在热压力状态追踪这里

186
00:08:38,919 --> 0:08:42,022
我们看到设备状态

187
00:08:42,456 --> 0:08:45,092
我们看到设备开始过渡回之前

188
00:08:45,158 --> 0:08:46,560
回落到一般热压力的状态

189
00:08:46,860 --> 0:08:48,128
和正常的热压力状态

190
00:08:53,600 --> 0:08:55,702
这就是使用设备状态的

191
00:08:55,769 --> 0:08:58,405
在这种使用案例中 热压力状态

192
00:08:58,705 --> 0:09:01,308
现在 我想继续向你介绍环境重写

193
00:08:58,705 --> 0:09:01,308
现在 我想继续向你介绍环境重写

194
00:09:01,909 --> 0:09:06,413
现在我将停止运行

195
00:09:06,880 --> 0:09:08,081
我将选择个人档案视图

196
00:09:08,148 --> 0:09:09,449
它是用SwiftUI创建的

197
00:09:09,850 --> 0:09:12,686
我真的很想写SwiftUI

198
00:09:12,753 --> 0:09:15,389
以及使用新的Xcode预览

199
00:09:15,455 --> 0:09:18,425
我将打来画布来启动预览引擎

200
00:09:18,992 --> 0:09:21,695
现在 我不再需要这台设备了

201
00:09:22,963 --> 0:09:23,931
预览开始运行了

202
00:09:24,498 --> 0:09:26,200
现在 使用环境重写

203
00:09:26,266 --> 0:09:28,769
你需要调试你的app或

204
00:09:29,036 --> 0:09:32,072
如果你还没看到

205
00:09:32,506 --> 0:09:36,143
点击底部右边的这个运行按钮

206
00:09:36,577 --> 0:09:38,912
你会看到一个弹窗菜单

207
00:09:39,680 --> 0:09:40,747
它做了两件事

208
00:09:41,281 --> 0:09:45,319
它让预览图进入了运行模式

209
00:09:45,786 --> 0:09:47,754
那么 现在预览图处于运行中

210
00:09:48,755 --> 0:09:52,960
我们来到底部 我将它提高一点

211
00:09:53,026 --> 0:09:53,961
在调试栏中

212
00:09:54,328 --> 0:09:56,597
我们看到我们收到确认了

213
00:09:56,663 --> 0:09:58,932
我们有一个活跃状态的调试会话

214
00:09:59,299 --> 0:10:01,168
我们有了所有常用的调试工具

215
00:09:59,299 --> 0:10:01,168
我们有了所有常用的调试工具

216
00:10:01,235 --> 0:10:03,003
比如视图调试 内存移植调试

217
00:10:03,303 --> 0:10:05,138
和新的环境重写

218
00:10:05,772 --> 0:10:08,876
那么 如果我点击它

219
00:10:09,376 --> 0:10:11,778
我们可以简单地重写用户界面样式

220
00:10:12,012 --> 0:10:13,046
通过点击切换

221
00:10:13,380 --> 0:10:15,582
现在我们将预览图设为深色模式

222
00:10:16,350 --> 0:10:18,218
我们可以在浅色和深色模式中

223
00:10:18,285 --> 0:10:20,454
来测试我们的布局和我们的UI

224
00:10:21,088 --> 0:10:22,689
那么 你可能已经留意到了一个问题

225
00:10:23,190 --> 0:10:25,826
这里的描述文字在浅色模式下

226
00:10:26,026 --> 0:10:27,995
但在深色模式中 我们看不到它了

227
00:10:28,462 --> 0:10:29,796
那么 我们在这里快速看一下

228
00:10:30,664 --> 0:10:34,334
我光标下的这个文字元素负责

229
00:10:34,768 --> 0:10:37,437
你可以看到我还没过渡到这个视图

230
00:10:37,504 --> 0:10:39,773
来利用深色模式的优势

231
00:10:40,240 --> 0:10:42,910
我应该使用一个具有语义的颜色

232
00:10:43,443 --> 0:10:45,946
我喜欢预览图的一点是

233
00:10:46,580 --> 0:10:48,715
因为我们请求了调试

234
00:10:48,782 --> 0:10:50,684
那么我来使用环境重写

235
00:10:51,151 --> 0:10:53,687
查看深色模式

236
00:10:58,458 --> 0:11:00,227
我们来试着使用动态类型的重写

237
00:10:58,458 --> 0:11:00,227
我们来试着使用动态类型的重写

238
00:11:00,427 --> 0:11:01,795
我切换到文字重写

239
00:11:01,995 --> 0:11:03,497
我使用这个滑动条

240
00:11:03,730 --> 0:11:07,401
来选择这些动态类型设置中

241
00:11:08,402 --> 0:11:10,170
到非常大

242
00:11:10,904 --> 0:11:13,740
接下来 我们来看看无障碍尺寸

243
00:11:13,807 --> 0:11:17,377
一直到非常大的无障碍动态

244
00:11:17,878 --> 0:11:20,848
注意我们的布局在当前使用案例中

245
00:11:20,914 --> 0:11:24,518
点击这些小的矩形到

246
00:11:24,852 --> 0:11:26,253
那么 我们在这里

247
00:11:27,020 --> 0:11:28,121
我向下滚动至

248
00:11:28,288 --> 0:11:31,358
ImageTextPill

249
00:11:31,892 --> 0:11:34,628
它水平排列展示了一张图片

250
00:11:35,295 --> 0:11:38,632
我想做的是当类型尺寸变得太大时

251
00:11:38,699 --> 0:11:41,568
就切换至垂直布局 将它们上下布局

252
00:11:42,135 --> 0:11:43,437
现在 我已经在其他地方

253
00:11:43,504 --> 0:11:46,006
我创建了一个自定义的视图

254
00:11:46,306 --> 0:11:49,343
我现在随便点击一个打开

255
00:11:50,344 --> 0:11:53,847
这种场景中我们不需要画布

256
00:11:54,047 --> 0:11:57,150
那么我们在另一个编辑器中打来它

257
00:11:57,217 --> 0:11:59,119
一个AdaptingStack

258
00:11:59,486 --> 0:12:01,855
它将一个视图创建器的闭包

259
00:11:59,486 --> 0:12:01,855
它将一个视图创建器的闭包

260
00:12:01,922 --> 0:12:03,857
就像一个H布局或一个V布局

261
00:12:04,591 --> 0:12:06,660
它为它自己绑定了

262
00:12:07,160 --> 0:12:08,762
所以当一个尺寸类别改变时

263
00:12:08,829 --> 0:12:10,430
就在你动态改变我们的主体层级时

264
00:12:10,764 --> 0:12:13,300
接下来 如果我们切换至尺寸类别

265
00:12:13,367 --> 0:12:15,335
如果它的无障碍放大效果

266
00:12:15,702 --> 0:12:17,671
接下来我们将内容放置到一个

267
00:12:18,005 --> 0:12:18,906
调节一下边距

268
00:12:19,206 --> 0:12:20,841
或者 我们把它放置到一个

269
00:12:21,441 --> 0:12:22,876
那么 我们来试一下

270
00:12:23,644 --> 0:12:26,680
我会改变这个HStack至

271
00:12:29,750 --> 0:12:32,019
我们的预览视图刷新了

272
00:12:32,386 --> 0:12:35,856
现在我们尝试环境重写

273
00:12:36,490 --> 0:12:40,961
我们扩大到大的尺寸

274
00:12:46,533 --> 0:12:47,601
看到这个变化我很开心

275
00:12:47,901 --> 0:12:49,670
我们来快速看一下无障碍设置

276
00:12:49,736 --> 0:12:50,904
你能看到这里有很多设置

277
00:12:51,138 --> 0:12:52,806
我们今天没有时间来试

278
00:12:52,873 --> 0:12:57,277
但我非常鼓励你在你的app和

279
00:12:57,578 --> 0:13:00,581
保证你的UI在启用这些设置时能

280
00:12:57,578 --> 0:13:00,581
保证你的UI在启用这些设置时能

281
00:13:01,215 --> 0:13:02,049
谢谢

282
00:13:07,988 --> 0:13:11,058
那么我来为你快速总结一下

283
00:13:11,124 --> 0:13:12,526
首先 我们来看设备状态

284
00:13:12,593 --> 0:13:14,595
在设备视窗上可用

285
00:13:15,028 --> 0:13:18,832
它允许你启用一个网络连接状态

286
00:13:18,899 --> 0:13:20,667
或是一个热压力状态

287
00:13:21,435 --> 0:13:25,172
设备状态和Xcode设备

288
00:13:25,239 --> 0:13:27,341
所以如果设备从Xcode断开链接

289
00:13:27,574 --> 0:13:29,843
我们会自动地断开设备状态

290
00:13:30,177 --> 0:13:31,678
一个iOS状态栏指示器

291
00:13:32,246 --> 0:13:35,716
为你提供一台设备的活跃状态

292
00:13:35,782 --> 0:13:38,352
你可以点击指示器来查看

293
00:13:38,418 --> 0:13:39,786
使用它来停止状态

294
00:13:41,054 --> 0:13:43,624
环境重写可以在调试中使用

295
00:13:43,957 --> 0:13:47,261
你可以使用立即重写

296
00:13:47,561 --> 0:13:50,063
它只会影响你调试的app

297
00:13:50,130 --> 0:13:52,666
它不会影响其他一些

298
00:13:52,833 --> 0:13:55,736
最重要的是 它不会改变

299
00:13:56,003 --> 0:13:57,771
所以 它使用起来非常方便

300
00:13:58,338 --> 0:14:01,108
它支持任何使用场景下的

301
00:13:58,338 --> 0:14:01,108
它支持任何使用场景下的

302
00:14:01,175 --> 0:14:03,477
设备 模拟器或你之前看到的调试

303
00:14:03,877 --> 0:14:05,946
它支持我们所有的平台

304
00:14:06,113 --> 0:14:07,247
有些设置可能不一样

305
00:14:07,648 --> 0:14:10,250
但它适用于所有你能调试的平台

306
00:14:11,351 --> 0:14:13,554
所以 我希望你能利用好这些新功能

307
00:14:13,820 --> 0:14:15,522
在更宽广的状况和环境范围中

308
00:14:15,589 --> 0:14:17,724
开发和测试你的app

309
00:14:17,958 --> 0:14:22,563
所以你能为更多用户在更多的使用

310
00:14:23,096 --> 0:14:24,798
谢谢 我将邀请Han Ming

311
00:14:24,865 --> 0:14:27,634
他会为你带来更多关于调试实时

312
00:14:33,440 --> 0:14:34,274
谢谢Chris

313
00:14:35,342 --> 0:14:36,176
早上好

314
00:14:37,377 --> 0:14:38,745
在过去的几天里 我们了解了

315
00:14:38,912 --> 0:14:41,782
实时预览是测试你项目中一个

316
00:14:42,015 --> 0:14:43,784
特别视图之间的交互很好的方式

317
00:14:44,251 --> 0:14:46,520
Xcode也优化提升了编辑

318
00:14:46,820 --> 0:14:49,489
和更新预览视图之间最快的运转时间

319
00:14:50,424 --> 0:14:53,260
但我们中的一些人 不

320
00:14:53,327 --> 0:14:55,796
我们一定会在代码中引入一个问题

321
00:14:56,396 --> 0:14:59,933
所以Xcode为开发者提供了一个

322
00:15:00,000 --> 0:15:01,368
发现这些问题

323
00:15:02,836 --> 0:15:05,572
当调试工具被附加时

324
00:15:05,973 --> 0:15:10,244
比如调试导航栏

325
00:15:11,879 --> 0:15:13,881
打断点

326
00:15:15,916 --> 0:15:18,318
调试栏

327
00:15:18,385 --> 0:15:19,686
比如分步控制

328
00:15:20,621 --> 0:15:23,957
以及变量视图

329
00:15:26,293 --> 0:15:30,330
Xcode 11的新功能 它会为你展示

330
00:15:32,399 --> 0:15:35,402
现在这是一个新的由系统框架

331
00:15:35,469 --> 0:15:37,437
产生的一类新问题

332
00:15:37,971 --> 0:15:41,575
它通常和它们的API没有被

333
00:15:43,844 --> 0:15:47,147
Xcode会在进程运行时找到它们

334
00:15:48,015 --> 0:15:51,084
我们现在有几个框架正在参与开发

335
00:15:51,685 --> 0:15:53,320
因为SwiftUI是一个全新的

336
00:15:53,387 --> 0:15:56,323
从一开始就为你设计来发现问题的

337
00:15:57,524 --> 0:15:59,259
这些问题不会阻断你的进程

338
00:15:59,660 --> 0:16:02,663
但它们会为你展示你想要修复的

339
00:15:59,660 --> 0:16:02,663
但它们会为你展示你想要修复的

340
00:16:03,096 --> 0:16:04,831
在你的app发布至

341
00:16:05,232 --> 0:16:08,435
为了吸引你的注意 它们会在

342
00:16:09,102 --> 0:16:11,705
它们会在活跃视图查看器中

343
00:16:12,472 --> 0:16:15,209
在问题导航栏中会有更多的细节

344
00:16:17,377 --> 0:16:20,380
除了预览视图 所有的平台都可以

345
00:16:20,581 --> 0:16:21,782
和运行目的地

346
00:16:22,649 --> 0:16:24,885
我们直接用一个示例来了解更多

347
00:16:26,553 --> 0:16:29,256
好的 这个我们创建的项目

348
00:16:29,790 --> 0:16:32,726
这个画布开始为你展示静态视图

349
00:16:36,630 --> 0:16:40,300
这个预览图会在右侧展示温度

350
00:16:40,367 --> 0:16:41,635
当数据加载完成时

351
00:16:42,870 --> 0:16:44,471
但在这之前 它会展示自旋体

352
00:16:44,805 --> 0:16:45,939
自旋体的显示

353
00:16:47,174 --> 0:16:49,576
由一个状态值itsloading

354
00:16:52,012 --> 0:16:54,348
Itsloading在数据载入

355
00:16:55,449 --> 0:16:57,017
那时自旋体就会消失

356
00:16:57,718 --> 0:16:58,752
相当简单的逻辑

357
00:17:01,321 --> 0:17:03,423
为了获取实时预览图

358
00:17:03,490 --> 0:17:04,657
你点击播放按钮

359
00:17:05,526 --> 0:17:06,792
来获取调试器

360
00:17:07,560 --> 0:17:09,829
你可以按Control键并点击

361
00:17:09,896 --> 0:17:11,098
选择调试预览图

362
00:17:12,232 --> 0:17:14,800
现在 我的QA工程师告诉我她发现

363
00:17:14,867 --> 0:17:16,403
就是这个自旋体不会消失

364
00:17:16,670 --> 0:17:20,607
那么请你留意

365
00:17:22,608 --> 0:17:26,413
Xcode现会重新编译这个特别的

366
00:17:26,613 --> 0:17:29,616
启动一个新的预览视图

367
00:17:30,450 --> 0:17:33,954
你知道调试器是由两种方式固定住的

368
00:17:34,755 --> 0:17:37,491
首先 你可以到调试导航栏

369
00:17:37,758 --> 0:17:41,328
寻找它 或者你可以在调试栏中寻找

370
00:17:42,095 --> 0:17:43,564
进程控制按钮

371
00:17:44,565 --> 0:17:47,234
它就像我们的画布中有一个运行中

372
00:17:48,001 --> 0:17:51,905
我们看到自旋体没有消失

373
00:17:51,972 --> 0:17:52,806
她是对的

374
00:17:53,473 --> 0:17:54,408
我们来解决这个问题

375
00:17:55,609 --> 0:17:57,611
在调试器下面 我们看到

376
00:17:57,978 --> 0:18:00,747
编辑器上展示了

377
00:17:57,978 --> 0:18:00,747
编辑器上展示了

378
00:18:01,448 --> 0:18:05,152
我们点击注释

379
00:18:05,586 --> 0:18:08,155
它表示 在视图更新时修正状态

380
00:18:08,856 --> 0:18:11,258
这会导致未定义的行为问题

381
00:18:11,558 --> 0:18:13,760
这非常难懂 那么我来解释一下

382
00:18:15,796 --> 0:18:17,231
body属性

383
00:18:17,698 --> 0:18:19,766
保留了一个等下会展示的

384
00:18:20,801 --> 0:18:22,903
这个框架会请求body属性

385
00:18:23,203 --> 0:18:25,472
它是否需要更新视图

386
00:18:25,939 --> 0:18:30,043
所以你无法控制何时或请求次数

387
00:18:30,744 --> 0:18:32,045
因此没有上下文环境

388
00:18:32,212 --> 0:18:34,481
绝对没有上下文环境提供给你

389
00:18:34,648 --> 0:18:36,149
来决定如何改变状态值

390
00:18:37,317 --> 0:18:40,921
幸运的是 可以将它的加载放在

391
00:18:41,255 --> 0:18:43,357
就是weatherFetcher

392
00:18:46,360 --> 0:18:47,261
在第47行代码

393
00:18:47,594 --> 0:18:49,329
那么 我将这段代码移到

394
00:18:52,666 --> 0:18:53,667
第47行

395
00:18:54,101 --> 0:18:57,104
但你会看到Xcode

396
00:18:57,304 --> 0:19:00,007
它会自动地尝试加载

397
00:18:57,304 --> 0:19:00,007
它会自动地尝试加载

398
00:19:00,340 --> 0:19:03,143
那么 请你再次留意自旋体

399
00:19:12,519 --> 0:19:13,420
这是自旋体

400
00:19:14,154 --> 0:19:15,422
数据被加载完成了

401
00:19:16,190 --> 0:19:18,025
等一下 调试会话要进来

402
00:19:18,892 --> 0:19:19,726
这是自旋体

403
00:19:19,993 --> 0:19:20,928
它是获取到的数据

404
00:19:21,628 --> 0:19:23,497
数据加载后自旋体消失

405
00:19:23,697 --> 0:19:24,932
所以第一个问题解决了

406
00:19:30,070 --> 0:19:33,373
为了停止调试会话

407
00:19:33,540 --> 0:19:35,375
点击停止按钮

408
00:19:36,677 --> 0:19:40,447
那么我勤劳的QA工程师告诉我

409
00:19:40,514 --> 0:19:41,982
这次它会展示一个不同的视图

410
00:19:42,249 --> 0:19:43,517
它调用了一个普通的细节视图

411
00:19:46,019 --> 0:19:46,920
那么我来展示它

412
00:19:48,989 --> 0:19:52,125
我会在描述情况时获得调试会话

413
00:19:55,462 --> 0:19:57,030
那么我在上面有了一个标头

414
00:19:57,631 --> 0:19:59,800
这里的设计是为了增大一些

415
00:20:00,367 --> 0:20:01,902
当我向下拉屏幕时

416
00:20:02,269 --> 0:20:04,137
这会帮助像我一样的朋友们能看得

417
00:20:04,938 --> 0:20:07,107
那么 它看上去我们有一个调试会话

418
00:20:09,576 --> 0:20:10,844
它的确变大了 很好

419
00:20:11,745 --> 0:20:13,413
在某个节点上它突然消失了

420
00:20:13,780 --> 0:20:15,916
这一定就是她提到的问题

421
00:20:17,084 --> 0:20:19,086
接下来我意识到

422
00:20:19,152 --> 0:20:21,655
一个紫色的图标在活动视图器

423
00:20:23,757 --> 0:20:24,825
所以 我会点击它

424
00:20:25,192 --> 0:20:27,694
它应该能带我到问题导航栏

425
00:20:28,495 --> 0:20:30,397
它显示 无法逆转奇异矩阵

426
00:20:30,964 --> 0:20:34,501
对于我们每日使用CGAffine

427
00:20:34,568 --> 0:20:36,069
你一定知道这是什么意思

428
00:20:36,937 --> 0:20:38,071
对于不知道的人

429
00:20:38,138 --> 0:20:40,307
这是一个两小时的

430
00:20:41,642 --> 0:20:43,911
我的一个数学博士朋友

431
00:20:44,745 --> 0:20:45,646
但请不要 我们不要那么做

432
00:20:45,712 --> 0:20:47,915
这是一个非常简单的解释

433
00:20:48,682 --> 0:20:52,052
获取一个逆矩阵就和

434
00:20:52,419 --> 0:20:54,121
数学除法 你们都知道的

435
00:20:54,555 --> 0:20:56,657
有些值是不可能出现的

436
00:20:57,524 --> 0:21:00,360
那么 我们来看一下为什么

437
00:20:57,524 --> 0:21:00,360
那么 我们来看一下为什么

438
00:21:00,727 --> 0:21:02,362
但现在 你要注意

439
00:21:03,197 --> 0:21:06,466
在问题导航栏上的另一个数据

440
00:21:06,533 --> 0:21:08,969
由调试器产生的记录回溯

441
00:21:09,736 --> 0:21:13,140
你展开它 你看到回溯

442
00:21:13,307 --> 0:21:15,576
接下来 会有一个

443
00:21:15,642 --> 0:21:16,777
就是第一个框架

444
00:21:17,277 --> 0:21:20,147
选择它 它会为你导航到接下来

445
00:21:20,380 --> 0:21:22,549
就是问题产生的地方

446
00:21:22,950 --> 0:21:26,386
但在当前情况下 了解在哪发生

447
00:21:27,120 --> 0:21:29,489
我们通常要做的是在调试器中暂停

448
00:21:30,457 --> 0:21:32,292
接下来你可以检查进程的状态

449
00:21:32,726 --> 0:21:35,529
现在你可能已经知道我将要使用

450
00:21:36,430 --> 0:21:37,397
是的 断点

451
00:21:38,098 --> 0:21:41,768
我可以在第44行打一个文件断点

452
00:21:43,704 --> 0:21:44,805
但你猜发生了什么？

453
00:21:45,839 --> 0:21:47,941
当我下拉时我需要点这里很多次

454
00:21:48,008 --> 0:21:49,409
所以这不是很有效率

455
00:21:49,810 --> 0:21:50,777
我们不要这么做

456
00:21:51,879 --> 0:21:54,915
我们来使用断点导航栏来代替

457
00:21:56,884 --> 0:21:58,285
点击添加按钮

458
00:22:00,487 --> 0:22:02,589
在Xcode 11我们引入了

459
00:22:02,656 --> 0:22:04,391
叫做运行时问题断点

460
00:22:04,458 --> 0:22:05,359
我们添加它

461
00:22:06,426 --> 0:22:09,530
我们保留这个目标系统框架

462
00:22:10,831 --> 0:22:12,833
现在 在例子中

463
00:22:12,900 --> 0:22:15,002
会让你的工作流更有效率

464
00:22:15,302 --> 0:22:16,270
这是另一个好例子

465
00:22:17,070 --> 0:22:19,973
如果你曾想停止或重启

466
00:22:20,307 --> 0:22:25,212
你可以使用在编辑器菜单里

467
00:22:25,546 --> 0:22:26,380
我们来试一下

468
00:22:29,750 --> 0:22:32,586
那么我们有了一个新附着的

469
00:22:33,187 --> 0:22:35,822
Xcode会一直记住你之前的配置

470
00:22:36,089 --> 0:22:37,558
所以如果你使用调试器

471
00:22:38,292 --> 0:22:40,794
调试器会附着在新的预览视图会话里

472
00:22:41,495 --> 0:22:43,096
那么 我将会向下拉

473
00:22:43,263 --> 0:22:45,365
如果我幸运的话 我会遇到断点

474
00:22:46,333 --> 0:22:48,936
Xcode方便地带入了变量视图

475
00:22:50,237 --> 0:22:52,306
现在我们知道我们的

476
00:22:52,606 --> 0:22:55,275
所以我会展开它来查看矩阵

477
00:22:57,544 --> 0:23:01,448
M11是我们在X方向上的缩放值

478
00:22:57,544 --> 0:23:01,448
M11是我们在X方向上的缩放值

479
00:23:01,515 --> 0:23:03,951
我们不会对它进行任何操作

480
00:23:05,552 --> 0:23:08,288
M22是我们在Y方向上的缩放值

481
00:23:08,689 --> 0:23:10,090
当这个值为0时

482
00:23:10,157 --> 0:23:14,428
是无法通过数学公式获取到逆值的

483
00:23:14,995 --> 0:23:15,829
是的

484
00:23:16,096 --> 0:23:20,801
那么 我们现在知道了

485
00:23:21,768 --> 0:23:23,103
我们来看一下代码

486
00:23:23,604 --> 0:23:27,474
来看一下我是在哪里将值设为0的

487
00:23:27,674 --> 0:23:29,843
它看上去像是这一行

488
00:23:30,444 --> 0:23:32,446
我在这里也来让这段代码

489
00:23:35,282 --> 0:23:36,116
哎呀

490
00:23:38,185 --> 0:23:41,488
好的 我会关闭调试区域

491
00:23:42,222 --> 0:23:44,124
好的 我现在来试一试

492
00:23:45,826 --> 0:23:48,862
好了 它变大一点了

493
00:23:49,329 --> 0:23:51,498
好的 第二个问题解决了

494
00:23:51,698 --> 0:23:53,333
那就是我示例的结尾了

495
00:24:01,708 --> 0:24:04,878
所以 当你调试实时预览视图时

496
00:24:04,945 --> 0:24:06,613
和你平常调试时比较

497
00:24:07,047 --> 0:24:09,516
有三件事情不相同

498
00:24:09,783 --> 0:24:14,922
首先 你使用画布播放按钮的

499
00:24:15,222 --> 0:24:17,457
来启动你的调试会话

500
00:24:17,791 --> 0:24:19,760
为了停止它 你点击相同的按钮

501
00:24:21,595 --> 0:24:25,399
你们可以看到Xcode

502
00:24:25,766 --> 0:24:29,603
接下来尝试启动一个视图

503
00:24:29,670 --> 0:24:31,805
不管有或没有调试器 这都会发生

504
00:24:32,272 --> 0:24:35,309
当有调试器时

505
00:24:36,243 --> 0:24:38,011
所以 如果你想要和和编辑器里的

506
00:24:38,078 --> 0:24:40,147
保持相同的调试会话

507
00:24:40,480 --> 0:24:41,748
不要改变那份文件

508
00:24:42,316 --> 0:24:43,483
查看一份不同的文件

509
00:24:43,750 --> 0:24:46,820
使用一个不同的面板

510
00:24:47,321 --> 0:24:49,790
Sebastian马上会为你展示

511
00:24:54,795 --> 0:24:56,563
好的 从我的例子中 我们学习到

512
00:24:56,897 --> 0:24:58,665
当你调试实时预览图时

513
00:24:58,732 --> 0:25:01,235
你可以使用你以前习惯的

514
00:24:58,732 --> 0:25:01,235
你可以使用你以前习惯的

515
00:25:01,969 --> 0:25:03,070
所有的这些很棒的工具

516
00:25:03,303 --> 0:25:05,138
你想要调整我们特别为

517
00:25:05,205 --> 0:25:07,541
预览视图设计的工作流程

518
00:25:08,375 --> 0:25:11,645
留意这些SwiftUI运行时

519
00:25:11,945 --> 0:25:13,981
因为它们指出的是真正的问题

520
00:25:14,448 --> 0:25:17,251
以及使用运行时问题断点

521
00:25:17,317 --> 0:25:18,452
来帮你调试

522
00:25:19,319 --> 0:25:21,889
我已经为你展示了几个调试的方法

523
00:25:22,155 --> 0:25:24,124
但有时你只需要在视觉上处理它

524
00:25:24,925 --> 0:25:26,627
有请Sebastian

525
00:25:32,332 --> 0:25:33,233
谢谢Han Ming

526
00:25:34,768 --> 0:25:39,106
我们确实会来看一下在一个

527
00:25:39,640 --> 0:25:40,641
但在开始之前

528
00:25:40,707 --> 0:25:43,710
我们来看一些SwiftUI

529
00:25:43,777 --> 0:25:45,479
以及SwiftUI和传统UI框架

530
00:25:45,546 --> 0:25:47,915
比如AppKit和UIKit的

531
00:25:48,148 --> 0:25:50,684
以及了解那会如何影响你调试

532
00:25:51,752 --> 0:25:55,556
首先 SwiftUI使用了

533
00:25:55,622 --> 0:25:57,858
这意味着它会显示运行时

534
00:25:57,925 --> 0:26:00,761
而不是视图的初始化

535
00:25:57,925 --> 0:26:00,761
而不是视图的初始化

536
00:26:01,094 --> 0:26:02,863
你提供了一套你的视图层级

537
00:26:02,930 --> 0:26:04,998
以及构造你视图的框架

538
00:26:05,299 --> 0:26:06,967
在运行时保持它们的状态更新

539
00:26:08,202 --> 0:26:10,971
SwiftUI包括了构成和

540
00:26:11,038 --> 0:26:12,472
超过复杂视图类型

541
00:26:13,073 --> 0:26:15,542
所以在运行时你可能看到的视图

542
00:26:15,609 --> 0:26:17,644
可以观测到有许多少的属性

543
00:26:18,912 --> 0:26:20,948
SwiftUI的视图是值的类型

544
00:26:21,014 --> 0:26:24,218
那意味着调试工作流程

545
00:26:24,284 --> 0:26:25,485
可能不再合适了

546
00:26:26,520 --> 0:26:30,490
再运行时 SwiftUI可能将

547
00:26:30,791 --> 0:26:33,393
转换为特定平台

548
00:26:33,894 --> 0:26:35,863
我们等下会在例子中看到

549
00:26:37,831 --> 0:26:39,633
SwiftUI也将

550
00:26:39,700 --> 0:26:43,370
已有的框架视图整合得非常好

551
00:26:44,004 --> 0:26:47,474
你早些时候看到的travel

552
00:26:47,875 --> 0:26:51,245
来将一个UIKit视图混合

553
00:26:51,745 --> 0:26:54,848
这是app中使用的主要视图

554
00:26:56,350 --> 0:26:58,051
考虑到这些方面的同时

555
00:26:58,118 --> 0:26:59,386
我们来切换至示例机器

556
00:26:59,453 --> 0:27:02,389
了解下在这travel app中

557
00:26:59,453 --> 0:27:02,389
了解下在这travel app中

558
00:27:02,456 --> 0:27:03,323
屏幕的视图层级

559
00:27:05,826 --> 0:27:06,660
谢谢

560
00:27:07,194 --> 0:27:09,730
我们再次调试travel app

561
00:27:09,997 --> 0:27:11,932
我们在这里已经处于调试模式了

562
00:27:11,999 --> 0:27:13,934
我再重新调整一下检查器

563
00:27:15,636 --> 0:27:16,870
为了检查视图层级

564
00:27:17,304 --> 0:27:19,606
我们可以使用Xcode的调试栏

565
00:27:19,907 --> 0:27:21,308
来调试视图层级

566
00:27:21,875 --> 0:27:23,210
就像Han Ming之前提过的

567
00:27:23,277 --> 0:27:26,146
我们必须确保我们在调试过程中

568
00:27:26,213 --> 0:27:28,815
因为调试会话和预览视图的

569
00:27:29,316 --> 0:27:32,653
我们可以使用Xcode 11中

570
00:27:32,920 --> 0:27:34,154
按下option键的同时

571
00:27:34,388 --> 0:27:37,791
在我们在Xcode调试栏中

572
00:27:38,025 --> 0:27:40,928
它在一个单独的编辑器分屏中

573
00:27:41,295 --> 0:27:43,597
我们可以访问左上方的源码

574
00:27:44,131 --> 0:27:45,432
预览视图在左下方

575
00:27:45,632 --> 0:27:48,468
视图调试画布在右侧

576
00:27:51,772 --> 0:27:52,606
谢谢

577
00:27:53,941 --> 0:27:56,810
如果你之前使用过视图调试器

578
00:27:57,211 --> 0:28:00,080
你有一个画布区域

579
00:27:57,211 --> 0:28:00,080
你有一个画布区域

580
00:28:00,147 --> 0:28:02,382
你只需简单的旋转就可以分解它们

581
00:28:02,449 --> 0:28:04,084
这样你就能很好地预览你的视图

582
00:28:04,685 --> 0:28:06,086
你可以选择元素

583
00:28:06,153 --> 0:28:08,121
在右侧查看检查器属性

584
00:28:08,856 --> 0:28:10,224
左边的导航栏

585
00:28:10,290 --> 0:28:12,125
有一个你视图层级的缩略展示

586
00:28:12,192 --> 0:28:15,429
这样你能自己定位

587
00:28:16,964 --> 0:28:18,699
好的 那么 就像我之前提到过的

588
00:28:18,899 --> 0:28:22,169
这个个人资料视图结合了UIKit

589
00:28:22,736 --> 0:28:24,438
看一下实现

590
00:28:24,838 --> 0:28:29,910
你可以看到它返回了一个垂直的栈

591
00:28:30,277 --> 0:28:33,113
它包含这里的头像视图控制器视图

592
00:28:33,180 --> 0:28:36,450
那个视图从一个故事板文件

593
00:28:37,117 --> 0:28:39,019
在下面 它实例化了一个列表

594
00:28:39,686 --> 0:28:42,890
那意味着这里上面的部分

595
00:28:42,956 --> 0:28:46,226
下面的部分是使用SwiftUI

596
00:28:48,395 --> 0:28:49,763
在第一部分的示例中 我想要

597
00:28:50,130 --> 0:28:51,965
专注于视图层级的UIKit部分

598
00:28:52,032 --> 0:28:54,201
接下来第二部分 我们会关注

599
00:28:55,602 --> 0:28:58,172
Xcode 11新支持了

600
00:28:58,405 --> 0:29:03,310
它是在iOS 13的UIKit的

601
00:28:58,405 --> 0:29:03,310
它是在iOS 13的UIKit的

602
00:29:03,510 --> 0:29:05,913
你可以看到所有的UI窗口现在

603
00:29:06,346 --> 0:29:08,782
都罗列在自己的UI窗口视图下面

604
00:29:09,016 --> 0:29:11,885
所以只要你在你的iOS app中

605
00:29:12,186 --> 0:29:14,254
寻找这些窗口场景会非常容易

606
00:29:14,588 --> 0:29:16,290
当你在导航栏中选择一个

607
00:29:16,356 --> 0:29:18,292
你也可以检查它们的属性

608
00:29:18,358 --> 0:29:21,762
比如 在检查器中查看标题

609
00:29:23,197 --> 0:29:26,233
iOS 13的另一个新功能是

610
00:29:27,201 --> 0:29:31,505
今年 我们采用了几种方法来

611
00:29:31,572 --> 0:29:33,740
来帮你为你自己的app增加支持

612
00:29:34,675 --> 0:29:37,578
首先 当你选择一个UI视图或UI

613
00:29:37,911 --> 0:29:40,180
我们现在在检查器中

614
00:29:40,247 --> 0:29:42,316
比如用户界面样式

615
00:29:42,950 --> 0:29:45,085
视图样式是我们期待的那样

616
00:29:45,152 --> 0:29:46,753
当你为你视图层级中特定的

617
00:29:46,820 --> 0:29:48,722
子元件重写用户界面样式时

618
00:29:49,022 --> 0:29:51,391
你可以马上在视图调试器中调试它

619
00:29:52,893 --> 0:29:54,394
深色模式的另一个关键点

620
00:29:54,461 --> 0:29:57,297
是适配外观变化的动态颜色

621
00:29:57,564 --> 0:30:01,034
使用资产目录和语义化颜色

622
00:29:57,564 --> 0:30:01,034
使用资产目录和语义化颜色

623
00:30:01,502 --> 0:30:02,769
当我们选择这里的这个徽章

624
00:30:02,836 --> 0:30:07,207
你能看到它用了一个语义化的颜色

625
00:30:07,608 --> 0:30:09,610
来自资产目录的强调色

626
00:30:09,776 --> 0:30:12,045
所以它现在非常容易确认一个

627
00:30:12,112 --> 0:30:14,314
颜色是否来自资产目录里的

628
00:30:14,381 --> 0:30:16,383
它能动态地适配外观的改变

629
00:30:16,717 --> 0:30:19,553
或是否是一个不能适配外观改变的

630
00:30:20,387 --> 0:30:22,222
另一个新功能是符号图片

631
00:30:22,589 --> 0:30:25,726
这个徽章实际上使用了一张

632
00:30:26,093 --> 0:30:28,161
当我在这个检查器往上一点

633
00:30:28,228 --> 0:30:30,898
你能看到检查器中

634
00:30:31,231 --> 0:30:34,668
我们现在展示了你在选择器中选择的

635
00:30:34,935 --> 0:30:37,371
你获取了比如符号配置的细节信息

636
00:30:37,437 --> 0:30:39,973
看到了它实际上是一个系统

637
00:30:40,040 --> 0:30:42,843
和比如一个你在你的资产目录中

638
00:30:47,481 --> 0:30:52,653
符号图片由它们的基准线 这样它们

639
00:30:52,953 --> 0:30:56,590
我们将这个基准线在右侧

640
00:30:57,157 --> 0:30:59,893
来保证它在文本旁呈现良好的布局

641
00:30:59,960 --> 0:31:04,131
我们必须在UIKit的世界

642
00:30:59,960 --> 0:31:04,131
我们必须在UIKit的世界

643
00:31:04,198 --> 0:31:06,200
来确保我们使用了基准线限制

644
00:31:06,266 --> 0:31:07,734
而不是 比如将它们居中

645
00:31:08,068 --> 0:31:11,338
因为如果这个名字变长的话

646
00:31:11,405 --> 0:31:12,573
我们有一个多行标签

647
00:31:12,639 --> 0:31:15,209
我们想要确保这个徽章

648
00:31:15,943 --> 0:31:18,712
我们能很容易地确认它

649
00:31:18,779 --> 0:31:22,816
我们可以切换至尺寸检查器

650
00:31:23,150 --> 0:31:25,185
我们在Xcode 11全面更新了

651
00:31:25,252 --> 0:31:27,921
让它更像是Interface Builder

652
00:31:27,988 --> 0:31:30,390
这样你的鼠标滑过它们时

653
00:31:30,757 --> 0:31:32,392
你可以使用这里的

654
00:31:32,759 --> 0:31:34,828
来过滤到一个特定的边缘

655
00:31:35,162 --> 0:31:36,663
我们可以简单地确认

656
00:31:37,097 --> 0:31:39,967
这个徽章实际上使用了它旁边标签的

657
00:31:40,033 --> 0:31:41,268
第一个基准线限制

658
00:31:41,602 --> 0:31:46,940
那么 这就是我们完全想要的

659
00:31:48,041 --> 0:31:50,677
好的 那么 这些是

660
00:31:51,078 --> 0:31:53,247
我们切换至SwiftUI

661
00:31:55,315 --> 0:31:59,052
就像我们看到的 我们现在看到的是

662
00:31:59,586 --> 0:32:02,356
看着左侧的导航栏

663
00:31:59,586 --> 0:32:02,356
看着左侧的导航栏

664
00:32:02,422 --> 0:32:04,191
你能看到个人档案视图

665
00:32:04,525 --> 0:32:07,528
我们很好地明白了

666
00:32:08,996 --> 0:32:10,497
我们看到它使用了一个垂直堆栈

667
00:32:10,564 --> 0:32:13,166
我们在画布区域

668
00:32:13,500 --> 0:32:15,836
你就能在右侧检查器获取

669
00:32:16,603 --> 0:32:19,806
切回个人档案视图

670
00:32:20,541 --> 0:32:24,778
你可以看到那有很多关于

671
00:32:24,845 --> 0:32:28,348
我们已经使用Swift反射

672
00:32:28,749 --> 0:32:30,584
那么 甚至是你自己自定义的视图

673
00:32:30,651 --> 0:32:33,120
我们现在自动地在检查器中

674
00:32:33,554 --> 0:32:38,192
它比之前的功能更强大了

675
00:32:38,892 --> 0:32:40,060
我们甚至又近了一步

676
00:32:40,127 --> 0:32:41,628
你现在可以自定义这些

677
00:32:41,695 --> 0:32:43,363
出现在右侧检查器的属性了

678
00:32:43,864 --> 0:32:47,234
通过在你视图类型中实现自定义

679
00:32:47,568 --> 0:32:49,469
个人档案视图正在做它应该做的

680
00:32:49,870 --> 0:32:53,006
你能看到它在这里

681
00:32:53,073 --> 0:32:56,777
账户状态、上次登录和个人档案

682
00:32:57,911 --> 0:32:59,546
看右边的检查器

683
00:33:00,013 --> 0:33:02,649
你能看到这些都是返回的

684
00:33:02,716 --> 0:33:05,419
所以这是非常强大的功能

685
00:33:05,485 --> 0:33:08,722
让你在调试过程中

686
00:33:14,194 --> 0:33:16,396
我们再看一下检查器

687
00:33:16,997 --> 0:33:20,534
我们获取到了当前选中视图的属性

688
00:33:20,601 --> 0:33:22,503
个人档案视图和更进一步

689
00:33:22,569 --> 0:33:25,839
我们能看到当前所有的修饰符

690
00:33:25,906 --> 0:33:29,009
那么我们能看到边距和

691
00:33:32,312 --> 0:33:35,415
我们看一下视图层级中的

692
00:33:35,883 --> 0:33:40,654
就像我们之前看到的那样 底部

693
00:33:41,255 --> 0:33:43,156
那么我们选择我们看到的

694
00:33:43,223 --> 0:33:46,059
比如 这里的965字符

695
00:33:46,460 --> 0:33:49,930
我会使用一个导航的手势

696
00:33:49,997 --> 0:33:53,267
这样我们就能很好的了解

697
00:33:53,967 --> 0:33:56,937
我们能看到SwiftUI已经将

698
00:33:57,004 --> 0:33:58,639
至一个底层的UI表格视图

699
00:33:59,339 --> 0:34:02,643
它使用表格视图单元格来寄存

700
00:33:59,339 --> 0:34:02,643
它使用表格视图单元格来寄存

701
00:34:03,477 --> 0:34:05,179
我们在代码中构建过

702
00:34:05,812 --> 0:34:07,080
这是一个实现的细节

703
00:34:07,147 --> 0:34:09,416
你不应该在你的实现中依赖它

704
00:34:09,483 --> 0:34:10,817
但它非常有用

705
00:34:10,884 --> 0:34:13,786
比如 当你试着调试布局问题时

706
00:34:15,289 --> 0:34:17,491
这个被选择的文字

707
00:34:17,558 --> 0:34:19,025
我们的设计师提过

708
00:34:19,426 --> 0:34:22,963
它们应该对齐基准线

709
00:34:24,063 --> 0:34:25,699
而不是在这两个文字之间

710
00:34:25,933 --> 0:34:29,235
现在 我们已经看到

711
00:34:29,303 --> 0:34:31,672
它将它们一个接一个布局

712
00:34:32,172 --> 0:34:34,541
当我们在这里看它的实现

713
00:34:34,975 --> 0:34:37,978
你能看到它是一个扁平的水平

714
00:34:38,045 --> 0:34:40,147
它没有传递任何参数至它的

715
00:34:40,547 --> 0:34:42,181
但当我们看这个检查器时

716
00:34:42,248 --> 0:34:45,985
你能看到它其实默认偏移屏幕

717
00:34:46,152 --> 0:34:48,722
现在 我们不想要居中对齐

718
00:34:49,590 --> 0:34:52,592
所以 我们调整代码来

719
00:34:52,960 --> 0:34:54,360
我会关闭这个视图调试器

720
00:34:54,862 --> 0:34:58,665
继续调试会话和再一次激活

721
00:35:00,033 --> 0:35:01,168
对于HStack

722
00:35:01,235 --> 0:35:05,572
我会添加一个对齐参数

723
00:35:05,939 --> 0:35:11,211
我们现在能看到两个标签

724
00:35:11,512 --> 0:35:12,379
那么我们--

725
00:35:16,316 --> 0:35:21,388
我们可以看到HStack为它自己

726
00:35:21,722 --> 0:35:23,924
找到并修改它

727
00:35:23,991 --> 0:35:27,628
接下来立刻使用Xcode 11的

728
00:35:28,228 --> 0:35:30,197
这样 我会切回至幻灯片

729
00:35:31,298 --> 0:35:34,301
我们刚才看到 当你检查

730
00:35:34,902 --> 0:35:37,504
视图层级时在导航器出现了

731
00:35:37,571 --> 0:35:39,773
在画布的左侧

732
00:35:40,641 --> 0:35:42,109
以及属性和修饰符

733
00:35:42,309 --> 0:35:44,278
在检查器右侧展现了

734
00:35:45,379 --> 0:35:48,282
检查器属性会自动地查明使用

735
00:35:48,348 --> 0:35:50,784
你甚至可以自定义检查器属性

736
00:35:51,185 --> 0:35:52,786
使用自定义的可反射协议

737
00:35:52,853 --> 0:35:54,721
来在右侧的检查器展示

738
00:35:55,422 --> 0:35:57,291
当然 使用SwiftUI

739
00:35:57,357 --> 0:36:00,060
我们也为混合视图层级提供支持

740
00:35:57,357 --> 0:36:00,060
我们也为混合视图层级提供支持

741
00:36:00,494 --> 0:36:03,130
UIKit视图怎样在SwiftUI

742
00:36:04,431 --> 0:36:07,701
我们对UIKit视图也做了

743
00:36:07,935 --> 0:36:11,038
即支持了

744
00:36:12,105 --> 0:36:13,540
当你开始在你的UIKit app

745
00:36:13,607 --> 0:36:15,776
它会为你提供帮助

746
00:36:16,109 --> 0:36:17,811
我们改进了检查器

747
00:36:18,178 --> 0:36:21,315
提供了更多细节

748
00:36:21,582 --> 0:36:26,620
我们看到了语义化的

749
00:36:26,920 --> 0:36:28,155
我们也看到了语义化颜色

750
00:36:28,222 --> 0:36:30,490
当你开始适配在深色模式适配它时

751
00:36:30,991 --> 0:36:34,094
我们对检查器中的约束条件的细节

752
00:36:34,161 --> 0:36:35,963
它比之前更为强大

753
00:36:36,029 --> 0:36:39,933
当你在UIKit app中调试

754
00:36:41,235 --> 0:36:43,570
如果你想要了解更多设备状态的细节

755
00:36:44,104 --> 0:36:46,573
我在这里推荐这个演讲

756
00:36:47,040 --> 0:36:52,713
这里也有一个介绍LLDB和改善的

757
00:36:53,714 --> 0:36:56,984
这样 我们今天的演讲就要结束了

758
00:36:57,551 --> 0:36:59,786
愿你能好好享受接下来的会议

759
00:36:59,853 --> 0:37:01,455
我们盛典上见
