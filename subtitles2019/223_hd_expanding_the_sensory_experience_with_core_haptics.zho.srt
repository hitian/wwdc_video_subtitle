1
00:00:06,173 --> 0:00:10,077
（设计音频力触觉体验）

2
00:00:10,143 --> 0:00:11,011
欢迎大家参加我们的演讲

3
00:00:13,647 --> 0:00:18,018
声音一直以来都是创建真正优秀的

4
00:00:18,252 --> 0:00:21,154
无论是给游戏创建

5
00:00:21,221 --> 0:00:22,589
空气声床

6
00:00:22,656 --> 0:00:26,026
还是把用户的注意力吸引到

7
00:00:26,960 --> 0:00:28,061
力触觉的出现

8
00:00:28,128 --> 0:00:32,031
给这种体验添加了一种

9
00:00:32,366 --> 0:00:36,770
今天的演讲分为两个部分

10
00:00:37,104 --> 0:00:41,375
首先我要向大家介绍

11
00:00:41,441 --> 0:00:44,111
他们会上台来跟大家讲关于

12
00:00:44,178 --> 0:00:47,614
给app设计优秀的力触觉体验的

13
00:01:08,101 --> 0:01:10,070
我相信你们一定很熟悉那个声音

14
00:01:10,904 --> 0:01:12,906
多年来它一直是我们生活的一部分

15
00:01:13,173 --> 0:01:16,076
但在2019年

16
00:01:16,610 --> 0:01:18,045
我是Camille Moussette

17
00:01:18,111 --> 0:01:20,814
Apple设计团队的交互设计师

18
00:01:20,881 --> 0:01:24,084
我是Hugo Verweij

19
00:01:25,118 --> 0:01:29,590
这场演讲是关于

20
00:01:29,656 --> 0:01:33,093
我们的目标是激发你的灵感

21
00:01:33,727 --> 0:01:35,729
并让你们了解一些实用的想法

22
00:01:35,796 --> 0:01:38,265
关于如何设计很棒的声音和力触觉

23
00:01:38,332 --> 0:01:40,267
当声音和力触觉同时使用时

24
00:01:40,834 --> 0:01:43,103
可以把你的app带到一个新的维度

25
00:01:45,606 --> 0:01:49,109
在接下来的30分钟内

26
00:01:49,376 --> 0:01:52,479
第一件 我们将介绍什么是

27
00:01:53,814 --> 0:01:56,049
然后我们要了解三个指导原则

28
00:01:56,116 --> 0:01:58,118
用于帮助你设计那些优秀的体验

29
00:01:58,952 --> 0:02:02,556
最后我们要了解

30
00:01:58,952 --> 0:02:02,556
最后我们要了解

31
00:02:02,956 --> 0:02:06,126
让那些体验变得既优秀又引人注目

32
00:02:07,394 --> 0:02:10,797
那么什么是音频-力触觉体验？

33
00:02:10,864 --> 0:02:13,901
嗯 让我们先听一个声音

34
00:02:16,603 --> 0:02:18,605
好的 让我们把音量调低点

35
00:02:21,708 --> 0:02:23,911
如果我再把音量调低点会怎么样呢？

36
00:02:27,147 --> 0:02:30,150
哇哦 音量太低了 我听不见它了

37
00:02:30,317 --> 0:02:33,520
你知道的 我们的耳朵再也不能识别

38
00:02:33,587 --> 0:02:35,989
但如果你把手指放在音响上

39
00:02:36,056 --> 0:02:39,159
你会感觉到它在前后移动

40
00:02:40,194 --> 0:02:45,432
我们设计了一个触觉引擎

41
00:02:45,499 --> 0:02:47,167
你只能感觉到它们

42
00:02:47,968 --> 0:02:53,173
这是iPhone

43
00:02:55,375 --> 0:02:57,444
来自触觉引擎的力触觉感觉

44
00:02:57,511 --> 0:03:01,181
与来自音响的声音同步

45
00:02:57,511 --> 0:03:01,181
与来自音响的声音同步

46
00:03:02,416 --> 0:03:06,186
结果就是我们称之为

47
00:03:06,553 --> 0:03:09,790
但力触觉感觉是要被感觉到的

48
00:03:09,857 --> 0:03:14,862
因为我们要在舞台上、在屏幕上呈现

49
00:03:14,928 --> 0:03:18,198
我们需要你们的帮助

50
00:03:18,632 --> 0:03:23,203
我们会尽我们所能像这样帮助你们

51
00:03:26,306 --> 0:03:30,210
或像这样播放一个代表力触觉的声音

52
00:03:34,948 --> 0:03:38,218
我们还将可视化时间线上的这些体验

53
00:03:38,785 --> 0:03:41,121
Camille将在

54
00:03:41,188 --> 0:03:44,224
告诉你们关于它们是如何实现的

55
00:03:46,393 --> 0:03:52,065
iOS 13引入了一个新API

56
00:03:52,132 --> 0:03:54,234
它叫做Core Hapitcs

57
00:03:55,569 --> 0:04:01,241
这个新API可以让你们开发人员们

58
00:03:55,569 --> 0:04:01,241
这个新API可以让你们开发人员们

59
00:04:04,878 --> 0:04:09,249
触觉引擎可以渲染许多不同的体验

60
00:04:09,683 --> 0:04:12,819
并可以生成像这样的自定义震动

61
00:04:13,453 --> 0:04:14,321
跟这个类似

62
00:04:14,388 --> 0:04:16,290
它听起来和感觉起来就像这样：

63
00:04:20,194 --> 0:04:21,562
那么正如你所看到的

64
00:04:21,628 --> 0:04:24,932
我们使用了波形和声音来表达力触觉

65
00:04:24,998 --> 0:04:25,899
正如Hugo所说的

66
00:04:26,266 --> 0:04:30,270
你需要自己在脑海中

67
00:04:31,038 --> 0:04:33,273
这应该被感觉到 而不是听到

68
00:04:35,209 --> 0:04:38,078
我们可以播放这些连续的体验

69
00:04:38,645 --> 0:04:42,282
我们还有更短、更紧凑的声音

70
00:04:43,517 --> 0:04:47,821
是单一循环 我们把这种体验叫做

71
00:04:48,622 --> 0:04:50,991
非常短暂

72
00:04:51,358 --> 0:04:56,296
感觉像是一个撞击声、一个打击声

73
00:04:59,066 --> 0:05:00,634
非常短暂

74
00:04:59,066 --> 0:05:00,634
非常短暂

75
00:05:00,701 --> 0:05:05,305
然后我们实际上可以进一步改善它

76
00:05:05,906 --> 0:05:08,075
接着我们将使用基本形状

77
00:05:08,141 --> 0:05:10,310
来代表不同模式的力触觉

78
00:05:10,644 --> 0:05:13,313
我们的瞬时体验是一个简单的矩形

79
00:05:14,081 --> 0:05:15,315
因为我们的触觉引擎

80
00:05:15,382 --> 0:05:18,685
是专门用于力触觉的

81
00:05:18,752 --> 0:05:21,321
我们可以用不同方式调整体验

82
00:05:21,822 --> 0:05:25,325
首先我们可以调整强度或振幅

83
00:05:26,760 --> 0:05:31,331
我们还可以让它感觉更圆润或柔和

84
00:05:32,399 --> 0:05:37,337
在另一个极端

85
00:05:38,071 --> 0:05:41,341
使用触觉引擎可以实现这种体验

86
00:05:45,445 --> 0:05:46,713
最后

87
00:05:47,047 --> 0:05:50,384
这就结束了我们对于力触觉设计

88
00:05:50,450 --> 0:05:53,754
以及什么是Core Haptics API的

89
00:05:53,820 --> 0:05:56,857
我们有一个你可以调节的强度

90
00:05:56,924 --> 0:05:59,426
和另一个设计维度 力触觉锐度

91
00:05:59,493 --> 0:06:03,263
你可以控制两种类型的事件

92
00:05:59,493 --> 0:06:03,263
你可以控制两种类型的事件

93
00:06:03,330 --> 0:06:05,365
连续事件和瞬时事件

94
00:06:06,433 --> 0:06:09,903
现在让我们看一下

95
00:06:09,970 --> 0:06:12,372
我们今天要分享给你们的

96
00:06:14,107 --> 0:06:16,376
第一个是因果关系

97
00:06:17,077 --> 0:06:19,379
然后是协调

98
00:06:20,047 --> 0:06:22,382
最后是效用

99
00:06:23,317 --> 0:06:26,253
这些概念或方法

100
00:06:28,021 --> 0:06:30,724
我们在Apple的

101
00:06:30,791 --> 0:06:34,394
我们认为它们也可以给你自己的

102
00:06:34,661 --> 0:06:35,963
对于其中每一个

103
00:06:36,029 --> 0:06:39,900
我们都先了解概念

104
00:06:39,967 --> 0:06:41,034
让我们开始吧

105
00:06:42,336 --> 0:06:43,403
因果关系

106
00:06:44,204 --> 0:06:47,074
因果关系是有用的反馈

107
00:06:47,140 --> 0:06:49,409
必须明确表明是谁导致了因果关系

108
00:06:51,111 --> 0:06:54,414
假如你是一名足球运动员正在踢球

109
00:06:54,882 --> 0:06:57,417
踢球的体验是什么样的呢？

110
00:07:00,821 --> 0:07:04,324
有一个明确的关系

111
00:07:04,391 --> 0:07:06,426
在起因之间有个明确的关系

112
00:07:07,027 --> 0:07:08,662
脚碰撞球

113
00:07:08,729 --> 0:07:09,563
而结果是

114
00:07:09,630 --> 0:07:12,432
冲击的声音和冲击的感觉

115
00:07:12,966 --> 0:07:16,904
这种体验听起来和感觉到的感觉

116
00:07:16,970 --> 0:07:21,441
由相交互的对象的品质决定

117
00:07:21,508 --> 0:07:24,444
即鞋的材料和球的材料

118
00:07:26,280 --> 0:07:28,448
然后是动作的力度

119
00:07:29,116 --> 0:07:31,451
是狠狠的一脚还是温柔的一脚？

120
00:07:31,652 --> 0:07:32,886
而环境

121
00:07:33,220 --> 0:07:36,456
是体育场或足球场的声学效果

122
00:07:36,924 --> 0:07:40,460
因为我们熟悉这些东西

123
00:07:40,694 --> 0:07:45,465
如果我们使用一种完全不同的声音

124
00:07:45,766 --> 0:07:48,468
让我们尝试一下 把它推到顶部

125
00:07:51,772 --> 0:07:54,007
很奇怪 这样不行

126
00:07:54,408 --> 0:07:57,477
当为你的体验设计声音时

127
00:07:57,544 --> 0:08:00,514
考虑一下当你与一个物理对象

128
00:07:57,544 --> 0:08:00,514
考虑一下当你与一个物理对象

129
00:08:00,581 --> 0:08:04,251
感觉和声音效果

130
00:08:06,687 --> 0:08:10,490
举个例子 让我们看一下

131
00:08:11,191 --> 0:08:14,628
我们希望声音和力触觉能完美匹配

132
00:08:14,695 --> 0:08:17,497
屏幕上的动画 即挑钩

133
00:08:20,367 --> 0:08:22,035
我们从哪开始呢？

134
00:08:22,903 --> 0:08:26,507
嗯 付款时你会想到哪种声音？

135
00:08:26,940 --> 0:08:28,876
钱听起来是什么样的？

136
00:08:29,476 --> 0:08:32,846
使用Apple Pay

137
00:08:32,913 --> 0:08:36,517
当然了 我们要看一下屏幕上的

138
00:08:37,518 --> 0:08:42,523
应该产生积极的感觉

139
00:08:44,157 --> 0:08:45,759
这里有一些声音的示例

140
00:08:45,826 --> 0:08:48,529
可以用作这种确认的声音

141
00:08:51,298 --> 0:08:52,533
这是第一个

142
00:08:53,600 --> 0:08:55,002
这个声音令人愉悦

143
00:08:55,068 --> 0:08:58,539
但听起来有点太欢快、太轻佻了

144
00:08:59,039 --> 0:09:03,544
下一个声音与挑钩动画很相配

145
00:08:59,039 --> 0:09:03,544
下一个声音与挑钩动画很相配

146
00:09:05,779 --> 0:09:08,448
但我们感觉它的特征不太合适

147
00:09:08,515 --> 0:09:10,551
有点太刺耳了

148
00:09:10,951 --> 0:09:12,719
然后还有这个声音

149
00:09:12,786 --> 0:09:16,557
这是我们最后选择的声音

150
00:09:16,957 --> 0:09:20,394
这个声音不是特别严肃

151
00:09:22,162 --> 0:09:23,697
好的 我们已经选好声音了

152
00:09:24,097 --> 0:09:25,566
现在看看力触觉

153
00:09:26,567 --> 0:09:30,437
我们的第一个想法是模拟声音的波形

154
00:09:30,504 --> 0:09:33,106
因为它可以完美地匹配声音

155
00:09:33,173 --> 0:09:35,108
但在做了一些试验之后

156
00:09:35,509 --> 0:09:39,580
我们发现两次简单的轻触实际上

157
00:09:40,547 --> 0:09:43,584
我喜欢把这些看作是小作曲

158
00:09:43,650 --> 0:09:44,918
我们有两种乐器

159
00:09:44,985 --> 0:09:49,156
一种是你可以听到的

160
00:09:49,723 --> 0:09:53,427
它们不必总是播放同样的东西

161
00:09:53,493 --> 0:09:56,597
但它们必须以同样的节奏播放

162
00:09:57,197 --> 0:09:58,065
这是同时播放的效果

163
00:09:58,131 --> 0:10:01,602
请注意较低的声音是力触觉

164
00:09:58,131 --> 0:10:01,602
请注意较低的声音是力触觉

165
00:10:05,806 --> 0:10:09,610
好的 然后这就是动画的最后体验

166
00:10:09,910 --> 0:10:13,580
再一次 自己想象一下当你付款时

167
00:10:19,853 --> 0:10:24,625
接下来 让我们看第二个指导准则

168
00:10:24,992 --> 0:10:29,463
协调是关于看起来的感觉

169
00:10:29,530 --> 0:10:30,631
听起来的感觉

170
00:10:32,699 --> 0:10:34,034
在现实世界中

171
00:10:35,169 --> 0:10:39,006
音频力触觉和视觉很自然地相协调

172
00:10:39,072 --> 0:10:41,642
因为起因和结果有明确的关系

173
00:10:43,377 --> 0:10:47,648
然而在数字世界中

174
00:10:48,015 --> 0:10:52,653
新体验是在加工处理过程中

175
00:10:54,188 --> 0:10:58,292
输入和输出需要由你 开发者

176
00:10:58,358 --> 0:10:59,326
进行特别设计

177
00:10:59,760 --> 0:11:04,364
让我们从创建一个简单的可视化界面

178
00:10:59,760 --> 0:11:04,364
让我们从创建一个简单的可视化界面

179
00:11:05,499 --> 0:11:07,734
我们让一个简单的球体

180
00:11:07,801 --> 0:11:10,671
下落并碰撞屏幕底部

181
00:11:11,905 --> 0:11:14,675
接下来让我们添加音频反馈

182
00:11:20,347 --> 0:11:22,216
现在我们选择了一个声音

183
00:11:22,749 --> 0:11:27,120
响应物理影响或球体的跳动

184
00:11:27,754 --> 0:11:30,457
这个声音要简短、精确和清晰

185
00:11:30,524 --> 0:11:34,695
但我们还要根据撞击的速度调整振幅

186
00:11:35,495 --> 0:11:39,199
现在让我们做一项额外的工作

187
00:11:39,266 --> 0:11:40,701
力触觉反馈

188
00:11:44,538 --> 0:11:48,709
你们自己想象一下那种感觉

189
00:11:49,009 --> 0:11:52,246
再一次 我们尝试

190
00:11:52,312 --> 0:11:54,915
让球体撞击屏幕底部的声音

191
00:11:54,982 --> 0:11:58,151
因此我们选择了一个锐度很高的

192
00:11:58,218 --> 0:12:02,723
我们还调整了声音强度

193
00:11:58,218 --> 0:12:02,723
我们还调整了声音强度

194
00:12:03,290 --> 0:12:04,725
我们还没有完成

195
00:12:05,859 --> 0:12:08,662
因为考虑三种感觉之间的同步性

196
00:12:08,729 --> 0:12:11,732
非常重要

197
00:12:13,467 --> 0:12:15,335
这就是产生魔力的地方

198
00:12:15,402 --> 0:12:19,740
在这里你要想象一个真正的球与墙壁

199
00:12:20,407 --> 0:12:22,976
这有一个例子 我们打破了这个规则

200
00:12:23,043 --> 0:12:24,878
我们在视觉和其余的反馈之间

201
00:12:24,945 --> 0:12:26,747
引入了延迟

202
00:12:29,816 --> 0:12:30,984
很明显打破了协调

203
00:12:31,051 --> 0:12:34,755
完全想象不到是一个真正弹跳的球

204
00:12:35,155 --> 0:12:38,759
因此协调需要非常的谨慎和小心

205
00:12:39,526 --> 0:12:41,228
但如果做得好的话

206
00:12:41,628 --> 0:12:44,765
可以打造令人非常愉悦和神奇的体验

207
00:12:46,767 --> 0:12:48,268
让我们从

208
00:12:48,335 --> 0:12:51,872
交互、视觉、音频

209
00:12:51,939 --> 0:12:53,040
来看不同的协调

210
00:12:53,106 --> 0:12:55,776
从品质和整体行为方面来看

211
00:12:56,376 --> 0:12:59,980
看一下屏幕上的小绿点

212
00:13:00,047 --> 0:13:01,615
想象一下哪种音频

213
00:13:01,682 --> 0:13:04,785
哪种力触觉可以与那个绿点相匹配

214
00:13:06,286 --> 0:13:10,791
如果我们添加一种轻快的弹动

215
00:13:12,059 --> 0:13:15,796
哪种音频 哪种力触觉

216
00:13:16,029 --> 0:13:18,866
如果屏幕上有一个大对象呢？

217
00:13:18,932 --> 0:13:19,967
听起来是不是不一样？

218
00:13:20,033 --> 0:13:22,803
感觉起来是不是与一个小点不一样？

219
00:13:24,738 --> 0:13:27,040
如果我们添加不同的动态行为

220
00:13:27,107 --> 0:13:28,809
不同的能量级

221
00:13:29,142 --> 0:13:32,179
一个紧迫的、跳动的点

222
00:13:32,246 --> 0:13:34,314
确实能吸引注意力

223
00:13:34,381 --> 0:13:36,149
可能需要一种不同的声音

224
00:13:36,216 --> 0:13:39,920
最后是一种感觉平静

225
00:13:39,987 --> 0:13:41,855
代表一种不同的反馈类型

226
00:13:41,922 --> 0:13:45,058
考虑一下你尝试在你的app中

227
00:13:45,125 --> 0:13:49,263
以及不同的品质

228
00:13:49,329 --> 0:13:53,834
设计反馈是关于一致性和统一性

229
00:13:57,404 --> 0:14:01,175
我要举例说明协调准则如何帮助我们

230
00:13:57,404 --> 0:14:01,175
我要举例说明协调准则如何帮助我们

231
00:14:01,241 --> 0:14:05,512
针对Apple Watch

232
00:14:05,913 --> 0:14:08,215
我们都习惯用手机

233
00:14:08,282 --> 0:14:10,784
并习惯手机的保守氛围

234
00:14:10,851 --> 0:14:13,320
当Apple Watch

235
00:14:13,387 --> 0:14:15,856
作为第一种使用触觉引擎的设备

236
00:14:16,156 --> 0:14:19,092
它是第一种可以精确地同步

237
00:14:19,159 --> 0:14:20,861
声音和力触觉的设备

238
00:14:22,095 --> 0:14:23,630
现在对于Series 4

239
00:14:23,697 --> 0:14:28,869
给表冠的旋转添加了力触觉

240
00:14:30,571 --> 0:14:34,541
还记得Camille刚才描述过的

241
00:14:34,608 --> 0:14:37,244
我们就给表冠使用了那种力触觉

242
00:14:37,945 --> 0:14:42,883
但我们对它进行了调整

243
00:14:43,217 --> 0:14:46,553
因此力触觉感觉像是手指在触摸表冠

244
00:14:46,620 --> 0:14:48,889
而不是手腕

245
00:14:50,290 --> 0:14:54,261
对于声音

246
00:14:54,328 --> 0:14:55,829
从中获得灵感

247
00:14:56,096 --> 0:14:59,733
我们听了并记录了

248
00:14:59,800 --> 0:15:02,903
其中有一些听起来非常引人注意

249
00:14:59,800 --> 0:15:02,903
其中有一些听起来非常引人注意

250
00:15:06,640 --> 0:15:07,641
然后现实世界中还有一些

251
00:15:07,708 --> 0:15:12,112
其它的物理机械对象

252
00:15:12,179 --> 0:15:15,182
拥有类似的声音 比如自行车轮毂

253
00:15:17,117 --> 0:15:20,187
我们想找到一种声音

254
00:15:20,254 --> 0:15:21,955
来自这样一台设备

255
00:15:23,190 --> 0:15:26,927
我们在开始制作我们自己的声音之前

256
00:15:28,562 --> 0:15:29,630
然后就有了这个结果

257
00:15:29,696 --> 0:15:32,199
在你的手腕上 听起来很安静

258
00:15:32,266 --> 0:15:34,968
就像是你所期待的手表

259
00:15:42,509 --> 0:15:46,113
声音和力触觉之间的完美协调

260
00:15:46,713 --> 0:15:49,950
打造了对机械表冠的想象

261
00:15:51,385 --> 0:15:53,687
然后与这种机械的感觉相匹配

262
00:15:53,754 --> 0:15:59,927
我们的动作团队修改了动画

263
00:15:59,993 --> 0:16:01,728
能捕捉到它的声音和力触觉

264
00:15:59,993 --> 0:16:01,728
能捕捉到它的声音和力触觉

265
00:16:01,795 --> 0:16:02,963
让我们看一下

266
00:16:05,566 --> 0:16:09,970
我要再播放一遍

267
00:16:12,639 --> 0:16:15,876
结果是一种精确的机械感觉

268
00:16:15,943 --> 0:16:19,980
你所看到的与你所听到的完美协调

269
00:16:24,451 --> 0:16:28,989
接下来我们看第三个指导准则效用

270
00:16:29,189 --> 0:16:32,492
效用是仅当你可以提供明确的值

271
00:16:32,559 --> 0:16:36,997
并有利于你的app体验时添加

272
00:16:37,931 --> 0:16:39,666
使用适度

273
00:16:39,733 --> 0:16:43,003
不要仅仅因为你可以添加声音

274
00:16:43,904 --> 0:16:48,308
让我们看简单的ARKit app

275
00:16:49,276 --> 0:16:53,013
在这个app中 我们在环境中

276
00:16:53,313 --> 0:16:57,784
交互依赖于那个虚拟计时器的距离

277
00:16:57,851 --> 0:17:00,020
让我们先看一下视频

278
00:16:57,851 --> 0:17:00,020
让我们先看一下视频

279
00:17:14,067 --> 0:17:15,368
在这个app中

280
00:17:15,435 --> 0:17:17,905
我们有目的地设计了音频

281
00:17:17,971 --> 0:17:20,207
用于补充AR交互

282
00:17:20,273 --> 0:17:23,877
和用户体验的最重要的部分

283
00:17:23,944 --> 0:17:26,046
这是指靠近计时器

284
00:17:26,113 --> 0:17:30,717
或远离计时器

285
00:17:30,784 --> 0:17:34,054
三种感觉是连贯和统一的

286
00:17:34,655 --> 0:17:38,792
我们避免其它声音效果或力触觉反馈

287
00:17:38,859 --> 0:17:43,063
与app中的不同元素进行交互

288
00:17:44,431 --> 0:17:48,068
不添加声音和力触觉通常个好主意

289
00:17:48,435 --> 0:17:52,072
因此 从识别你的app中

290
00:17:52,406 --> 0:17:53,440
用于音频-力触觉反馈的可能的

291
00:17:53,507 --> 0:17:56,643
然后仅注意那些

292
00:17:56,710 --> 0:18:00,080
能改善体验或表达重要信息的元素

293
00:17:56,710 --> 0:18:00,080
能改善体验或表达重要信息的元素

294
00:18:01,014 --> 0:18:03,083
然后 你是否尝试添加更多？

295
00:18:03,383 --> 0:18:05,786
但也许不要这样做

296
00:18:05,853 --> 0:18:10,090
并减少非常重要的元素的分量

297
00:18:13,126 --> 0:18:14,928
总结一下

298
00:18:14,995 --> 0:18:18,098
这还是指导准则

299
00:18:18,332 --> 0:18:20,100
我们讲了因果关系

300
00:18:20,467 --> 0:18:23,303
讲了它如何帮助我们思考

301
00:18:23,370 --> 0:18:25,105
以及是什么导致了力触觉

302
00:18:25,672 --> 0:18:29,776
关于协调 我们讲了声音、力触觉

303
00:18:29,843 --> 0:18:33,113
如何共同打造优秀的用户体验

304
00:18:33,680 --> 0:18:34,781
以及效用

305
00:18:35,582 --> 0:18:39,152
讲了如何从使用

306
00:18:39,219 --> 0:18:43,123
来看使用体验

307
00:18:45,592 --> 0:18:49,696
接下来让我们看一些技术和使用技巧

308
00:18:49,763 --> 0:18:52,599
我们可以和这三个指导准则一起使用

309
00:18:53,066 --> 0:18:55,135
打造优秀的音频-力触觉体验

310
00:18:56,570 --> 0:19:01,141
首先简单回顾一下

311
00:18:56,570 --> 0:19:01,141
首先简单回顾一下

312
00:19:02,643 --> 0:19:05,212
我们有两个创建代码块供你使用

313
00:19:05,279 --> 0:19:07,581
第一个叫做瞬时

314
00:19:07,648 --> 0:19:12,319
它是尖锐、紧凑的力触觉体验

315
00:19:12,386 --> 0:19:14,955
感觉像是轻触或轻击

316
00:19:15,022 --> 0:19:17,958
第二个是连续的力触觉体验

317
00:19:18,025 --> 0:19:19,526
随时间延伸

318
00:19:19,593 --> 0:19:23,163
你可以指定持续时间

319
00:19:24,364 --> 0:19:27,668
对于瞬时 有两个可用的设计层面

320
00:19:27,734 --> 0:19:30,070
你可以自己控制

321
00:19:30,137 --> 0:19:33,740
分别是力触觉强度和力触觉锐度

322
00:19:33,807 --> 0:19:37,978
从而在较低的值时

323
00:19:38,045 --> 0:19:42,182
在较高的值时创建一种更精确、

324
00:19:42,850 --> 0:19:46,086
强度会如预期的那样

325
00:19:46,153 --> 0:19:47,187
改变体验的幅度

326
00:19:48,488 --> 0:19:53,193
对于连续性 有两种类似的设计层面

327
00:19:53,260 --> 0:19:55,696
分别是锐度和强度

328
00:19:56,230 --> 0:20:00,534
我们可以创建更有机的

329
00:19:56,230 --> 0:20:00,534
我们可以创建更有机的

330
00:20:00,601 --> 0:20:01,635
随时间延伸

331
00:20:01,702 --> 0:20:04,271
或一种更精确、更机械化的声音

332
00:20:04,338 --> 0:20:06,206
当锐度的值较高时

333
00:20:07,407 --> 0:20:09,610
在Core Haptics API中

334
00:20:09,676 --> 0:20:11,245
还有更多细节和功能

335
00:20:11,311 --> 0:20:14,214
请一定查看在线文档

336
00:20:15,382 --> 0:20:17,017
当设计声音时

337
00:20:17,084 --> 0:20:21,221
请记住哪些可以最好地体现

338
00:20:21,555 --> 0:20:23,090
对于尖锐的瞬时

339
00:20:23,156 --> 0:20:26,226
很可能一声尖锐的钟声就很好

340
00:20:28,395 --> 0:20:31,231
但如果我们有一个更平滑的声音

341
00:20:31,732 --> 0:20:35,235
使用那些同样的力触觉

342
00:20:38,505 --> 0:20:40,240
对于类似这样的东西来说

343
00:20:40,807 --> 0:20:45,245
一种连续的上下起伏的力触觉

344
00:20:48,782 --> 0:20:50,417
但这些不是硬性规定

345
00:20:50,484 --> 0:20:53,387
还有许多试验空间

346
00:20:53,453 --> 0:20:55,155
有时候

347
00:20:55,222 --> 0:20:58,258
你可能会发现

348
00:20:58,559 --> 0:20:59,793
其实效果更好

349
00:21:00,127 --> 0:21:03,931
Apple Watch

350
00:21:03,997 --> 0:21:05,265
听起来是这样的

351
00:21:07,868 --> 0:21:11,438
对于这样一个声音

352
00:21:11,505 --> 0:21:14,274
因为它们是完美搭配

353
00:21:17,311 --> 0:21:19,279
但我们是否可以做的更好？

354
00:21:19,913 --> 0:21:21,081
我们可以一直试验吗？

355
00:21:21,148 --> 0:21:25,285
也许把它反过来并修改时间？

356
00:21:28,956 --> 0:21:32,626
这创建了预期 通过增加力触觉

357
00:21:32,693 --> 0:21:35,395
然后快速切断它并播放声音实现

358
00:21:35,462 --> 0:21:37,564
有一个清晰的动作反应

359
00:21:37,631 --> 0:21:40,100
声音的播放作为力触觉的答案

360
00:21:41,368 --> 0:21:44,304
这对于Apple Watch

361
00:21:46,707 --> 0:21:51,211
接下来有一系列连续事件是很常见的

362
00:21:51,278 --> 0:21:53,313
用于表达体验的不同类型

363
00:21:53,814 --> 0:21:57,317
在这个例子中 我们有四种瞬时事件

364
00:21:57,818 --> 0:22:00,787
我们注意到

365
00:21:57,818 --> 0:22:00,787
我们注意到

366
00:22:00,854 --> 0:22:03,123
他们不一定感觉到第一个

367
00:22:03,190 --> 0:22:05,325
第一个是幽灵力触觉

368
00:22:07,928 --> 0:22:12,332
四次轻触的序列实际上仅报告为

369
00:22:13,300 --> 0:22:17,337
这可能是一个问题或一个机会

370
00:22:18,005 --> 0:22:22,009
我们可以使用这种幽灵效果

371
00:22:22,075 --> 0:22:23,343
作为准备效应

372
00:22:25,112 --> 0:22:26,680
让我们看一个例子

373
00:22:26,747 --> 0:22:29,383
是watchOS上的

374
00:22:29,449 --> 0:22:33,353
这是那些第三方通知的声音和力触觉

375
00:22:35,656 --> 0:22:38,292
这是一个非常重要的通知

376
00:22:38,358 --> 0:22:40,994
我们想确保用户明确地感知到了

377
00:22:41,061 --> 0:22:42,362
并确认了

378
00:22:42,796 --> 0:22:44,831
在这个例子中

379
00:22:44,898 --> 0:22:49,636
我们使用了幽灵效果或准备效应

380
00:22:49,703 --> 0:22:51,305
用于唤醒皮肤

381
00:22:51,371 --> 0:22:54,374
并确保它已经完全准备好

382
00:22:54,441 --> 0:22:55,375
感觉即将到来的力触觉

383
00:22:56,210 --> 0:22:58,378
让我们听一下和感觉一下

384
00:23:03,383 --> 0:23:04,384
在这个例子中

385
00:23:04,451 --> 0:23:07,487
我们有明确地呈现和识别

386
00:23:07,554 --> 0:23:09,389
我们的主要通知体验

387
00:23:11,024 --> 0:23:15,963
接下来我们还可以在非常类似的

388
00:23:17,631 --> 0:23:21,401
这是watchOS上

389
00:23:21,802 --> 0:23:23,403
听起来是这样的

390
00:23:28,442 --> 0:23:31,211
通过我们的协调指导准则

391
00:23:31,278 --> 0:23:33,947
我们最终得到了一个非常好的力触觉

392
00:23:34,014 --> 0:23:36,283
与那个声音完美配对

393
00:23:36,350 --> 0:23:40,420
我们有一系列的双击

394
00:23:45,459 --> 0:23:48,028
如果我们看右侧导航提示

395
00:23:48,095 --> 0:23:51,431
声音类似 但稍微有些不同

396
00:23:54,968 --> 0:23:59,039
我们可以注意到左右导航之间

397
00:23:59,106 --> 0:24:00,140
在音频上的些微不同

398
00:23:59,106 --> 0:24:00,140
在音频上的些微不同

399
00:24:00,207 --> 0:24:04,444
如果我们继续并遵守我们的协调准则

400
00:24:04,778 --> 0:24:07,314
通过力触觉 我们最终将得到

401
00:24:07,381 --> 0:24:09,449
模式完全相同的左右导航体验

402
00:24:10,617 --> 0:24:11,985
在这个例子中

403
00:24:12,753 --> 0:24:14,488
我们想添加力触觉

404
00:24:14,555 --> 0:24:17,457
我们加倍了双击的力触觉

405
00:24:17,524 --> 0:24:20,460
然后我们在左右导航之间创建了

406
00:24:21,428 --> 0:24:26,099
让我们听一下并感觉一下这种体验

407
00:24:29,837 --> 0:24:33,006
再一次 左右导航之间形成了差异

408
00:24:33,073 --> 0:24:35,475
是一种非常类似的音频体验

409
00:24:37,845 --> 0:24:42,482
目前为止 有许多工具可以用于

410
00:24:42,783 --> 0:24:45,252
我们想再给你们展示一个例子

411
00:24:45,319 --> 0:24:47,020
来阐述我们的观点

412
00:24:47,087 --> 0:24:50,224
这是Messages的

413
00:24:54,795 --> 0:24:55,863
声音和力触觉

414
00:24:55,929 --> 0:24:58,398
与动画完美同步

415
00:24:58,465 --> 0:25:01,068
这是一个特别场合的一个

416
00:24:58,465 --> 0:25:01,068
这是一个特别场合的一个

417
00:25:01,134 --> 0:25:03,504
让我们再看一次

418
00:25:08,742 --> 0:25:10,344
如果你还没有尝试过

419
00:25:10,410 --> 0:25:13,547
我鼓励你们在你自己的

420
00:25:13,614 --> 0:25:15,516
自己体验一下力触觉

421
00:25:17,818 --> 0:25:20,220
除了我们分享的指导准则外

422
00:25:20,287 --> 0:25:23,524
还有几点要考虑

423
00:25:24,958 --> 0:25:31,331
当声音、力触觉和视觉相协调时

424
00:25:31,398 --> 0:25:32,399
你是动画设计师吗？

425
00:25:33,000 --> 0:25:35,235
与声音或交互设计师一起合作

426
00:25:35,302 --> 0:25:36,937
反之亦然

427
00:25:37,004 --> 0:25:39,540
这是打造统一体验的最佳方式

428
00:25:41,375 --> 0:25:45,546
想象一下第一次使用自己的app时

429
00:25:46,747 --> 0:25:50,450
你希望它听起来或感觉起来怎么样？

430
00:25:50,517 --> 0:25:53,320
然后想象又使用了许多许多次

431
00:25:53,954 --> 0:25:57,191
你听到或感觉到这些东西是否仍然

432
00:25:57,824 --> 0:25:59,560
或者你觉得不堪重负了？

433
00:26:00,661 --> 0:26:04,898
请体验它

434
00:26:04,965 --> 0:26:06,533
或没用的东西

435
00:26:07,734 --> 0:26:09,803
并且不要害怕试验

436
00:26:09,870 --> 0:26:12,639
请试一试 原型

437
00:26:12,706 --> 0:26:15,609
我们已经看到你们通过尝试新东西

438
00:26:15,676 --> 0:26:17,578
而偶然得到的一些很棒的东西

439
00:26:18,946 --> 0:26:22,316
我们期待看到、听到和感觉到

440
00:26:22,382 --> 0:26:24,585
你在自己的app中所实现的效果

441
00:26:25,652 --> 0:26:28,589
请参看这个URL获取更多信息

442
00:26:37,164 --> 0:26:38,265
好的

443
00:26:38,332 --> 0:26:39,600
谢谢Hugo和Camille

444
00:26:40,300 --> 0:26:43,837
现在关于如何给app设计

445
00:26:43,904 --> 0:26:45,339
我们有个更好的想法

446
00:26:45,405 --> 0:26:47,908
现在让我们了解一下如何使用

447
00:26:47,975 --> 0:26:50,344
以及如何在代码中实现它们

448
00:26:50,410 --> 0:26:51,378
为此

449
00:26:51,445 --> 0:26:53,347
Michael和Doug

450
00:26:53,413 --> 0:26:57,050
如何利用新的

451
00:26:57,117 --> 0:26:57,951
开始

452
00:26:58,018 --> 0:27:00,354
我要介绍Michael上台来

453
00:26:58,018 --> 0:27:00,354
我要介绍Michael上台来

454
00:27:06,860 --> 0:27:08,161
晚上好

455
00:27:08,228 --> 0:27:11,064
我是Michael Diu

456
00:27:11,131 --> 0:27:14,067
我很期待与你们分享

457
00:27:14,134 --> 0:27:16,336
iOS 13中

458
00:27:16,803 --> 0:27:18,639
让我们看一下进度安排

459
00:27:20,073 --> 0:27:23,243
首先我们要了解可以在哪里使用

460
00:27:23,310 --> 0:27:27,648
它如何与其它音频和力触觉API

461
00:27:29,416 --> 0:27:32,953
我们要讲API中的两组类

462
00:27:33,020 --> 0:27:35,989
以及我们用于描述力触觉

463
00:27:36,056 --> 0:27:40,661
基本层面和描述符

464
00:27:41,695 --> 0:27:43,530
我们要讲

465
00:27:43,597 --> 0:27:45,666
开始播放那些内容的基本知识

466
00:27:47,467 --> 0:27:51,238
然后我们要介绍动态参数

467
00:27:51,305 --> 0:27:52,739
动态参数

468
00:27:52,806 --> 0:27:57,477
是你在播放时间自定义力触觉模式的

469
00:27:57,544 --> 0:28:01,682
从而响应你的用户或app的行为

470
00:27:57,544 --> 0:28:01,682
从而响应你的用户或app的行为

471
00:28:02,816 --> 0:28:08,455
我们要探索一种表达、存储和共享

472
00:28:08,522 --> 0:28:10,090
你的音频-力触觉内容的新方式

473
00:28:10,157 --> 0:28:15,696
一种新的文件格式 我们把它叫做

474
00:28:16,530 --> 0:28:17,698
让我们开始吧

475
00:28:22,769 --> 0:28:25,339
首先什么是

476
00:28:26,206 --> 0:28:31,111
我们可以把它看作是

477
00:28:31,178 --> 0:28:32,145
或iPhone的

478
00:28:32,846 --> 0:28:34,448
合成器

479
00:28:35,849 --> 0:28:39,887
我们可以继续使用其它音频和力触觉

480
00:28:39,953 --> 0:28:41,788
比如

481
00:28:41,855 --> 0:28:46,727
和UIKit的UIFeedbackGenerator

482
00:28:47,995 --> 0:28:51,732
你可能在想 我可以在哪些

483
00:28:53,600 --> 0:28:57,037
仅使用一个API和一种文件格式

484
00:28:57,104 --> 0:28:58,672
我们就可以访问

485
00:28:58,739 --> 0:29:02,676
许许多多配备触觉引擎的

486
00:28:58,739 --> 0:29:02,676
许许多多配备触觉引擎的

487
00:29:02,743 --> 0:29:05,245
从iPhone 8开始

488
00:29:05,746 --> 0:29:07,614
我们会替你实现

489
00:29:07,681 --> 0:29:10,250
让你的力触觉模式

490
00:29:10,317 --> 0:29:12,186
在所有这些产品上拥有相同的感觉

491
00:29:12,252 --> 0:29:15,522
到这样的程度以至于你只需要使用

492
00:29:15,589 --> 0:29:18,759
就可以建立app原型并发布app

493
00:29:20,827 --> 0:29:27,134
并且这些iPhone没有配备任何

494
00:29:27,201 --> 0:29:29,870
它们都配备了

495
00:29:29,937 --> 0:29:34,474
为你提供独一无二的能量组合

496
00:29:34,541 --> 0:29:36,243
表达范围很广

497
00:29:36,310 --> 0:29:40,781
无与伦比的精确度以及控制和细节

498
00:29:42,516 --> 0:29:47,287
接下来我要讲你们可能已经开始使用

499
00:29:47,354 --> 0:29:51,792
在iPhone上采用力触觉

500
00:29:53,794 --> 0:29:57,798
Core Haptics

501
00:29:59,466 --> 0:30:00,467
在绝大多数情况下

502
00:29:59,466 --> 0:30:00,467
在绝大多数情况下

503
00:30:00,534 --> 0:30:03,003
你都希望继续使用

504
00:30:03,070 --> 0:30:07,808
特别是用于UIKit控制

505
00:30:08,242 --> 0:30:09,676
通过那个API

506
00:30:09,743 --> 0:30:12,613
你可以表明你的事件的设计意图

507
00:30:12,679 --> 0:30:16,583
无论是选择、影响或通知

508
00:30:16,650 --> 0:30:19,152
你可以让其他人 让Apple

509
00:30:19,219 --> 0:30:22,289
来开发一个用于表达它的词汇

510
00:30:22,356 --> 0:30:26,960
混合正确的形态

511
00:30:27,027 --> 0:30:28,862
从而表达那个信息

512
00:30:29,663 --> 0:30:32,633
我们也在iOS 13中

513
00:30:32,699 --> 0:30:35,836
请查看相关文档获取更多详情

514
00:30:37,604 --> 0:30:40,807
相对而言 当你想设计自己的

515
00:30:40,874 --> 0:30:44,845
Core Haptics

516
00:30:45,379 --> 0:30:47,981
通过它 你可以开发你自己的模式

517
00:30:48,048 --> 0:30:52,519
并且你可以更准确地控制播放时间

518
00:30:52,586 --> 0:30:57,991
从而可以与其它API同步

519
00:30:58,058 --> 0:31:00,861
或来自

520
00:30:58,058 --> 0:31:00,861
或来自

521
00:31:01,795 --> 0:31:05,866
你还拥有一组更丰富的

522
00:31:06,166 --> 0:31:09,703
UIKit是建立在

523
00:31:09,770 --> 0:31:15,576
因此两组API

524
00:31:15,642 --> 0:31:21,982
设计你自己的力触觉模式

525
00:31:22,049 --> 0:31:25,652
但它可以让你实现一些

526
00:31:25,719 --> 0:31:30,257
并可以让你的app与众不同

527
00:31:30,324 --> 0:31:31,892
因此这是一件值得考虑的事

528
00:31:32,292 --> 0:31:35,896
接下来我要稍微讲一下音频功能

529
00:31:37,831 --> 0:31:41,201
Core Haptics

530
00:31:41,268 --> 0:31:48,141
可以让你与力触觉同步 紧密同步

531
00:31:48,475 --> 0:31:51,912
播放短的、合成的或自定义的

532
00:31:52,713 --> 0:31:54,815
这种音频力触觉的二重性

533
00:31:54,882 --> 0:31:58,185
对于许多Apple自己的

534
00:31:58,252 --> 0:32:00,921
比如iPhone 7中的

535
00:31:58,252 --> 0:32:00,921
比如iPhone 7中的

536
00:32:02,155 --> 0:32:04,925
Series 4 Watch中的

537
00:32:04,992 --> 0:32:06,426
和UIDatePicker

538
00:32:06,493 --> 0:32:08,629
你看到的那些

539
00:32:08,695 --> 0:32:11,932
用于选择日期、时间、警告

540
00:32:12,466 --> 0:32:14,801
你可能并没有意识到

541
00:32:14,868 --> 0:32:18,071
你甚至可能都没有注意到

542
00:32:18,138 --> 0:32:21,575
但如果你一旦把音频隐藏起来

543
00:32:21,642 --> 0:32:25,779
你就会意识到

544
00:32:25,846 --> 0:32:30,317
因此现在你可以使用Core Haptics

545
00:32:30,384 --> 0:32:33,220
我想讲一下app的一些分类

546
00:32:33,287 --> 0:32:35,489
特别是其中有一大类

547
00:32:35,556 --> 0:32:37,858
你可能会考虑使用

548
00:32:37,925 --> 0:32:38,959
即游戏

549
00:32:40,894 --> 0:32:43,096
想象一下我们正在赛道上

550
00:32:43,163 --> 0:32:45,966
我们即将进入加速模式 想象一下

551
00:32:50,437 --> 0:32:53,373
当你提交那个暴力消息时

552
00:32:53,440 --> 0:32:57,110
考虑一下在你的app中使用同步的

553
00:32:57,177 --> 0:33:00,981
从而产生那些震撼心灵的

554
00:32:57,177 --> 0:33:00,981
从而产生那些震撼心灵的

555
00:33:01,615 --> 0:33:07,754
另一种不错的方式是模拟物理接触

556
00:33:07,821 --> 0:33:10,958
从而让你的app感觉更逼真

557
00:33:11,191 --> 0:33:13,093
想象一下网球游戏

558
00:33:13,160 --> 0:33:15,495
你可能会有音频和力触觉成分

559
00:33:15,562 --> 0:33:19,533
音频的音高 力触觉的强度

560
00:33:19,600 --> 0:33:22,102
都会潜在地表达挥球速度有多快

561
00:33:22,169 --> 0:33:25,105
或表达球落在球拍上的位置

562
00:33:25,172 --> 0:33:26,473
并且你甚至可以控制

563
00:33:26,540 --> 0:33:29,643
在击中球之后

564
00:33:29,710 --> 0:33:31,011
球拍上的弦能产生多长时间的共鸣

565
00:33:32,880 --> 0:33:35,716
考虑使用Core Haptics

566
00:33:35,782 --> 0:33:38,018
是增强现实app

567
00:33:39,753 --> 0:33:41,755
如果你正在开发这个空间

568
00:33:41,822 --> 0:33:46,226
你已经很熟悉与3D音频相配对的

569
00:33:46,293 --> 0:33:50,697
它们共同发挥作用

570
00:33:50,764 --> 0:33:54,735
我们可以达到复现的下一个层级

571
00:33:54,801 --> 0:34:01,041
通过考虑自定义力触觉反馈会如何

572
00:33:54,801 --> 0:34:01,041
通过考虑自定义力触觉反馈会如何

573
00:34:02,743 --> 0:34:07,748
或如何响应app、设备

574
00:34:07,814 --> 0:34:14,788
比如移动设备或移动用户群

575
00:34:16,924 --> 0:34:18,025
作为启发

576
00:34:18,091 --> 0:34:21,460
今年我们通过使用力触觉

577
00:34:21,527 --> 0:34:24,965
改进了Swish示例代码

578
00:34:25,032 --> 0:34:29,069
根据你向后拉动投石器的速度

579
00:34:29,303 --> 0:34:31,871
以及向后拉动手机的速度

580
00:34:31,938 --> 0:34:35,576
你会感觉到当你向后拉动它时

581
00:34:35,641 --> 0:34:39,079
以及当你释放它时所产生的

582
00:34:39,713 --> 0:34:41,648
我想给你们展示一段相关视频

583
00:34:41,715 --> 0:34:45,219
我要使用音频来表现

584
00:34:45,284 --> 0:34:46,587
你感觉到的那个力触觉

585
00:34:46,652 --> 0:34:48,455
听起来是这样的

586
00:34:52,159 --> 0:34:54,928
现在我们要同时使用它们

587
00:34:54,995 --> 0:34:59,099
视觉和力触觉 没有常规的音频

588
00:35:03,704 --> 0:35:06,640
这是我们如何

589
00:35:06,707 --> 0:35:10,043
同时同步使用力触觉、声音和视觉

590
00:35:10,110 --> 0:35:13,814
来改善我们的AR体验的一个例子

591
00:35:13,881 --> 0:35:17,518
还有一些类别的app、游戏和AR

592
00:35:17,584 --> 0:35:20,654
已经准备好使用力触觉

593
00:35:20,721 --> 0:35:22,556
及与之相对应的声音来进行

594
00:35:22,623 --> 0:35:25,259
我确定你一定会想到很多很多

595
00:35:28,595 --> 0:35:33,433
现在让我们看一下如何使用

596
00:35:33,500 --> 0:35:34,434
表达我们的内容

597
00:35:37,437 --> 0:35:40,007
在Core Haptics中

598
00:35:40,073 --> 0:35:45,445
分别是表示内容的类

599
00:35:46,980 --> 0:35:50,150
让我们先看一下内容类

600
00:35:51,852 --> 0:35:56,356
Core Haptics中

601
00:35:56,423 --> 0:35:58,158
叫做CHHapticEvent

602
00:35:58,792 --> 0:36:02,829
每个事件都有类型和时间

603
00:35:58,792 --> 0:36:02,829
每个事件都有类型和时间

604
00:36:02,896 --> 0:36:07,167
视情况需要

605
00:36:08,368 --> 0:36:13,173
这些事件可以相互覆盖

606
00:36:13,540 --> 0:36:17,177
所有事件都属于一种模式

607
00:36:18,178 --> 0:36:22,683
接下来我要讲一下

608
00:36:24,151 --> 0:36:27,187
第一种类型叫做

609
00:36:27,554 --> 0:36:30,791
我把HapticTransient

610
00:36:30,858 --> 0:36:32,359
它是一个敲击动作

611
00:36:32,426 --> 0:36:35,028
它是瞬时的和短暂的

612
00:36:35,095 --> 0:36:38,198
然后我们有两个连续类型

613
00:36:38,765 --> 0:36:41,969
分别是HapticContinuous

614
00:36:42,035 --> 0:36:46,306
我认为 比如说 就像是弹奏弦乐器

615
00:36:46,373 --> 0:36:49,376
比瞬时要长一些

616
00:36:49,443 --> 0:36:52,045
它可以是 比如说 用作背景纹理

617
00:36:52,112 --> 0:36:54,815
你可以使用许多调节旋钮

618
00:36:54,882 --> 0:36:57,784
比如调节它的共振

619
00:36:58,485 --> 0:37:01,855
最后我们有

620
00:36:58,485 --> 0:37:01,855
最后我们有

621
00:37:01,922 --> 0:37:04,925
AudioCustom

622
00:37:04,992 --> 0:37:10,230
你可以在这里提供你自己的音频

623
00:37:11,131 --> 0:37:12,733
用于与力触觉同步播放

624
00:37:13,600 --> 0:37:18,238
接下来让我们讲几个可选参数

625
00:37:21,108 --> 0:37:25,112
第一个EventParameter

626
00:37:25,179 --> 0:37:28,515
它有一个音频模拟 音频音量

627
00:37:28,582 --> 0:37:30,651
你很可能已经很熟悉它了

628
00:37:31,451 --> 0:37:35,589
通过这个参数 从没有输出开始

629
00:37:35,656 --> 0:37:38,926
随着你把旋钮从零一直调到一

630
00:37:38,992 --> 0:37:41,261
你将得到系统的最大输出

631
00:37:42,496 --> 0:37:45,799
我们的下一个参数叫做

632
00:37:45,866 --> 0:37:48,902
HapticSharpness

633
00:37:48,969 --> 0:37:53,273
没有相对应的物理模拟

634
00:37:55,509 --> 0:37:57,244
在这个世界中

635
00:37:57,311 --> 0:37:58,879
我希望你

636
00:37:58,946 --> 0:38:02,015
不要想象是在有感知的空间中前进

637
00:37:58,946 --> 0:38:02,015
不要想象是在有感知的空间中前进

638
00:38:02,082 --> 0:38:07,287
从值为零时的一种

639
00:38:07,788 --> 0:38:11,291
一直到值为一时的

640
00:38:11,692 --> 0:38:14,294
为了更进一步

641
00:38:14,928 --> 0:38:18,298
我要使用来自

642
00:38:19,233 --> 0:38:21,468
锁屏上的手电筒按钮

643
00:38:21,535 --> 0:38:25,305
是一个锐度很高的力触觉

644
00:38:27,374 --> 0:38:30,777
而app切换器 那个向上滑动

645
00:38:30,844 --> 0:38:35,315
是一个更圆润、锐度较低的力触觉

646
00:38:37,351 --> 0:38:38,519
至于原因

647
00:38:38,585 --> 0:38:43,891
为什么这两种体验是尖锐和不尖锐的

648
00:38:43,957 --> 0:38:48,629
我推荐你参加我们的

649
00:38:49,930 --> 0:38:53,333
EventParameters

650
00:38:53,400 --> 0:38:57,571
比如应用到音频上的类型

651
00:38:57,638 --> 0:38:58,805
对于力触觉

652
00:38:58,872 --> 0:39:02,109
我们还可以让你修改共振等等

653
00:38:58,872 --> 0:39:02,109
我们还可以让你修改共振等等

654
00:39:02,176 --> 0:39:07,347
但这两个：强度和锐度就足够

655
00:39:09,416 --> 0:39:12,886
要开发那个动态范围

656
00:39:12,953 --> 0:39:16,356
和精确的强度和锐度的感觉

657
00:39:16,857 --> 0:39:19,993
我们有一段示例代码Palette

658
00:39:20,060 --> 0:39:24,598
可以让你自己尝试一下这些体验

659
00:39:24,665 --> 0:39:25,699
随着你的移动

660
00:39:25,766 --> 0:39:28,635
随着你轻触或拖动手指

661
00:39:28,702 --> 0:39:33,473
你可以访问锐度轴以及强度轴

662
00:39:33,540 --> 0:39:36,443
随着你的操作

663
00:39:36,510 --> 0:39:37,711
将实施相应的持续

664
00:39:38,045 --> 0:39:39,379
或瞬时的力触觉

665
00:39:39,680 --> 0:39:43,383
这将帮助你获得那种直观体验

666
00:39:46,987 --> 0:39:52,125
这是对于我们可以在哪里使用

667
00:39:52,192 --> 0:39:55,028
以及如何指定我们的内容的介绍

668
00:39:55,095 --> 0:39:58,765
现在我要邀请Doug Scott上台来

669
00:39:58,832 --> 0:40:03,003
他会帮助我们了解

670
00:39:58,832 --> 0:40:03,003
他会帮助我们了解

671
00:40:03,270 --> 0:40:04,605
了解那些模式

672
00:40:04,671 --> 0:40:07,474
并把Core Haptics

673
00:40:07,541 --> 0:40:09,209
请大家欢迎Doug

674
00:40:11,879 --> 0:40:12,846
谢谢Michael

675
00:40:13,647 --> 0:40:14,681
大家晚上好

676
00:40:14,748 --> 0:40:19,653
今天能来到这里 我感到非常激动

677
00:40:19,720 --> 0:40:21,421
我要与大家分享如何把

678
00:40:23,223 --> 0:40:25,993
在演示和深入查看代码之前

679
00:40:26,059 --> 0:40:29,263
让我们了解一下

680
00:40:29,329 --> 0:40:31,431
你的app要遵循的基本步骤

681
00:40:33,934 --> 0:40:36,737
第一个步骤是创建内容

682
00:40:36,803 --> 0:40:38,772
因为这可以在任何时候实现

683
00:40:38,839 --> 0:40:41,341
在你需要使用它之前实现

684
00:40:41,408 --> 0:40:42,809
在这个例子中

685
00:40:42,876 --> 0:40:46,046
我们在一个力触觉模式中加载了一个

686
00:40:46,113 --> 0:40:48,815
字典可能是我们存储在app中

687
00:40:48,882 --> 0:40:50,450
作为资源的一部分

688
00:40:51,251 --> 0:40:52,686
我们之后将了解到

689
00:40:52,753 --> 0:40:54,521
我们也可以在播放模式之前

690
00:40:54,588 --> 0:40:56,223
创建模式

691
00:40:56,290 --> 0:40:58,325
如果它们需要发生交互变化

692
00:40:58,392 --> 0:41:01,461
以响应app中的变化的话

693
00:40:58,392 --> 0:41:01,461
以响应app中的变化的话

694
00:41:02,963 --> 0:41:06,466
下一个步骤是

695
00:41:06,867 --> 0:41:07,701
这应该是只要你的app

696
00:41:07,768 --> 0:41:11,471
就应该创建力触觉引擎的实例

697
00:41:13,607 --> 0:41:16,977
接下来你要为力触觉模式创建一个

698
00:41:17,044 --> 0:41:20,047
每个播放器都关联一个模式

699
00:41:20,113 --> 0:41:22,482
和一个特定的力触觉引擎

700
00:41:24,718 --> 0:41:25,886
启动力触觉引擎

701
00:41:25,953 --> 0:41:29,323
告诉系统初始化音频和力触觉硬件

702
00:41:29,389 --> 0:41:32,492
准备请求播放模式

703
00:41:34,795 --> 0:41:37,564
当你的app想要播放模式时

704
00:41:37,631 --> 0:41:39,266
就启动播放器

705
00:41:39,333 --> 0:41:41,301
这可以通过两种方式实现

706
00:41:41,368 --> 0:41:44,771
第一种 我们可以叫做立即方式

707
00:41:44,838 --> 0:41:48,041
在最快的时刻 以最小的延迟

708
00:41:48,108 --> 0:41:51,445
告诉系统你希望播放这个模式

709
00:41:51,512 --> 0:41:53,313
第二种是预定方式

710
00:41:53,380 --> 0:41:55,983
你上交一个绝对时间戳

711
00:41:56,049 --> 0:41:58,785
告诉系统你想让这个事件

712
00:41:58,852 --> 0:41:59,853
与某些其它系统同步

713
00:41:59,920 --> 0:42:05,526
比如另一个音频播放器或游戏事件

714
00:41:59,920 --> 0:42:05,526
比如另一个音频播放器或游戏事件

715
00:42:09,329 --> 0:42:11,965
如果你想了解模式何时完成播放

716
00:42:12,032 --> 0:42:14,935
你可以在播放器完成时

717
00:42:15,002 --> 0:42:17,538
让力触觉引擎通过回调通知你

718
00:42:18,872 --> 0:42:21,975
在这里 引擎回调app

719
00:42:22,643 --> 0:42:25,479
而app现在可以选择

720
00:42:25,546 --> 0:42:28,549
或你可以打开下一个力触觉模式

721
00:42:29,950 --> 0:42:31,418
这就是基本步骤

722
00:42:31,485 --> 0:42:35,556
现在让我们看一个例子

723
00:42:37,424 --> 0:42:40,928
在此之前 我们要告诉你一个秘密

724
00:42:41,495 --> 0:42:45,499
演示API的使用会生成触觉反馈

725
00:42:45,566 --> 0:42:48,335
呈现一个独特的问题

726
00:42:48,402 --> 0:42:50,304
你们在观众席中感觉不到

727
00:42:50,737 --> 0:42:53,540
我们的处理方式是给输出中的每一个

728
00:42:53,607 --> 0:42:55,642
都添加一个音频当量

729
00:42:55,709 --> 0:42:58,579
那会让你听到力触觉的效果

730
00:43:01,849 --> 0:43:04,551
这个app使用了

731
00:43:04,618 --> 0:43:08,255
在屏幕上移动球以响应加速度计

732
00:43:10,023 --> 0:43:12,326
当球撞击屏幕边缘时

733
00:43:12,392 --> 0:43:15,195
生成力触觉和音频反馈

734
00:43:15,262 --> 0:43:17,464
用户有一种感觉到球撞击墙壁的感觉

735
00:43:17,531 --> 0:43:20,000
并且也能听到撞击的声音

736
00:43:20,067 --> 0:43:21,935
球撞击边缘的力度越大

737
00:43:22,002 --> 0:43:25,606
力触觉的强度越大 音频的音量越大

738
00:43:27,241 --> 0:43:30,244
好的 让我们看一下这个示例的代码

739
00:43:30,310 --> 0:43:32,412
看看如何把

740
00:43:32,479 --> 0:43:33,847
集成到你的app中

741
00:43:33,914 --> 0:43:39,620
我们要了解如何使用EventParameters

742
00:43:39,953 --> 0:43:40,988
这个例子

743
00:43:41,054 --> 0:43:43,991
所有代码都是从网站上的示例代码中

744
00:43:44,057 --> 0:43:47,628
但我们稍微修改了一下

745
00:43:49,229 --> 0:43:51,899
首先我们导入了

746
00:43:51,965 --> 0:43:55,636
以及我们需要在app中使用的

747
00:43:58,372 --> 0:44:00,874
已声明

748
00:43:58,372 --> 0:44:00,874
已声明

749
00:44:00,941 --> 0:44:02,142
是视图控制器的一个成员变量

750
00:44:02,209 --> 0:44:04,278
因为我们希望能完全控制它

751
00:44:04,344 --> 0:44:07,681
让它存在于在app的

752
00:44:09,149 --> 0:44:11,285
正如在之前的流程图中所讨论的那样

753
00:44:11,351 --> 0:44:14,788
在我们使用力触觉引擎之前

754
00:44:14,855 --> 0:44:18,659
在这里 当视图加载完成后

755
00:44:21,228 --> 0:44:22,062
在helper方法中

756
00:44:22,129 --> 0:44:25,699
我们先创建力触觉引擎的实例

757
00:44:25,766 --> 0:44:27,668
并检查可能会发生的错误

758
00:44:27,935 --> 0:44:30,003
引擎被分配给我们的成员变量

759
00:44:30,070 --> 0:44:31,672
从而我们可以随时使用它

760
00:44:33,440 --> 0:44:35,843
这是可选的 但非常有用

761
00:44:35,909 --> 0:44:40,347
可以给引擎的已停止处理器属性

762
00:44:40,414 --> 0:44:43,217
如果引擎由于某些操作而停止

763
00:44:43,283 --> 0:44:46,720
将调用这个闭包

764
00:44:46,787 --> 0:44:48,589
有些原因可能会导致这种情况

765
00:44:48,655 --> 0:44:53,694
比如音频会话中断或app被挂起

766
00:44:55,095 --> 0:44:57,798
我们通过启动力触觉引擎

767
00:44:57,865 --> 0:44:59,733
并检查可能发生的错误

768
00:45:00,334 --> 0:45:03,036
引擎将继续运行直到app

769
00:45:03,103 --> 0:45:05,706
或某个可能的外在动作停止它

770
00:45:06,840 --> 0:45:08,742
请注意 app追踪

771
00:45:08,809 --> 0:45:11,712
引擎是否需要被重启

772
00:45:12,246 --> 0:45:14,481
一般来说 当屏幕上有任意可见视图

773
00:45:14,548 --> 0:45:18,552
且视图包含力触觉交互时

774
00:45:18,619 --> 0:45:20,721
你可能会一直保持引擎运行

775
00:45:25,425 --> 0:45:28,629
这是app中简单物理引擎

776
00:45:28,695 --> 0:45:31,798
告诉我们球与墙壁发生碰撞的地方

777
00:45:31,865 --> 0:45:35,502
在这个例子中 我们想生成我们的

778
00:45:35,569 --> 0:45:38,272
用于交互性地追踪球的速度

779
00:45:38,338 --> 0:45:40,174
因此在需要模式播放器及其模式时

780
00:45:40,240 --> 0:45:43,177
就创建它们

781
00:45:44,978 --> 0:45:47,981
这个方法用于创建要播放的模式

782
00:45:48,048 --> 0:45:50,551
响应球的碰撞

783
00:45:50,617 --> 0:45:53,387
在这里我们要创建两个事件的模式

784
00:45:53,453 --> 0:45:55,756
一个是力触觉 一个是音频

785
00:45:57,224 --> 0:46:00,427
我们创建HapticTransient

786
00:45:57,224 --> 0:46:00,427
我们创建HapticTransient

787
00:46:00,494 --> 0:46:02,763
用于生成有效的感觉

788
00:46:05,399 --> 0:46:06,934
我们要赋予它两个

789
00:46:07,000 --> 0:46:09,503
这将根据球的速度配置事件的

790
00:46:09,570 --> 0:46:13,774
你已经听到过了

791
00:46:16,243 --> 0:46:18,011
然后我们创建音频事件

792
00:46:18,078 --> 0:46:20,781
音频类型是连续音频

793
00:46:21,582 --> 0:46:25,385
使用一组EventParameters

794
00:46:25,452 --> 0:46:28,322
也根据球的速度进行计算

795
00:46:28,388 --> 0:46:30,057
这里的持续参数

796
00:46:30,123 --> 0:46:32,993
可以保证事件的强度

797
00:46:33,060 --> 0:46:34,928
将一直缩减到零

798
00:46:34,995 --> 0:46:38,799
而不是在整个事件长度中一直持续

799
00:46:40,701 --> 0:46:43,270
我们创建一个包含这两个事件的模式

800
00:46:43,337 --> 0:46:44,805
并在时间上同步

801
00:46:46,874 --> 0:46:49,843
最后我们创建这个模式的模式播放器

802
00:46:49,910 --> 0:46:53,013
并把它返回到这个层中

803
00:46:53,080 --> 0:46:55,816
返回到响应碰撞的方法中

804
00:46:56,383 --> 0:46:59,419
最后一步是

805
00:46:59,486 --> 0:47:02,322
启动模式播放器

806
00:46:59,486 --> 0:47:02,322
启动模式播放器

807
00:47:02,389 --> 0:47:04,992
那表明以最小延迟

808
00:47:05,058 --> 0:47:06,827
尽快播放它

809
00:47:07,995 --> 0:47:11,832
请注意app并没有一直持有

810
00:47:12,232 --> 0:47:14,902
它的模式保证了连续播放

811
00:47:14,968 --> 0:47:16,270
直到完成

812
00:47:16,336 --> 0:47:19,840
因此app可以轻松地启动它

813
00:47:21,909 --> 0:47:24,144
这是使用在app的代码内

814
00:47:24,211 --> 0:47:26,480
以编程方式创建的模式

815
00:47:26,547 --> 0:47:27,848
播放内容的基本步骤

816
00:47:28,782 --> 0:47:31,718
因为这个app是持续交互的

817
00:47:31,785 --> 0:47:33,520
我们不会停止力触觉引擎

818
00:47:33,587 --> 0:47:36,857
除非游戏屏幕已经不再可见了

819
00:47:39,126 --> 0:47:40,894
现在让我们花点时间谈一谈

820
00:47:40,961 --> 0:47:43,897
Core Haptics的

821
00:47:43,964 --> 0:47:45,732
动态参数

822
00:47:47,501 --> 0:47:48,569
动态参数

823
00:47:48,969 --> 0:47:53,106
可以让你增加或减少现有的

824
00:47:53,173 --> 0:47:57,878
对于它所播放的模式中

825
00:47:59,546 --> 0:48:03,617
动态参数按照你所提供的时间戳

826
00:47:59,546 --> 0:48:03,617
动态参数按照你所提供的时间戳

827
00:48:03,684 --> 0:48:07,221
你可以同时调整多个不同的参数

828
00:48:07,287 --> 0:48:10,891
或使用任意的时间关系

829
00:48:12,192 --> 0:48:15,429
当你创建你自己的模式时

830
00:48:15,495 --> 0:48:19,900
或在播放时把动态参数实时

831
00:48:21,101 --> 0:48:23,604
这就可以让你使用单一模式

832
00:48:23,670 --> 0:48:28,242
来产生无限数量的力触觉和音频变量

833
00:48:28,308 --> 0:48:30,911
通过动态地调整模式实现

834
00:48:32,946 --> 0:48:35,048
让我们看一个例子

835
00:48:35,115 --> 0:48:36,483
在底部的这个图表中

836
00:48:36,550 --> 0:48:37,751
我们有一个力触觉模式

837
00:48:37,818 --> 0:48:41,355
使用了全部力触觉

838
00:48:41,421 --> 0:48:43,323
并都设置为它们的最大值

839
00:48:43,390 --> 0:48:45,759
上半部分是

840
00:48:45,826 --> 0:48:47,928
下半部分是

841
00:48:48,962 --> 0:48:52,833
我们想暂时缩减所有游戏的

842
00:48:52,900 --> 0:48:56,937
比如 如果某个角色在游戏中说话了

843
00:48:59,206 --> 0:49:03,544
我要发送一个强度的动态参数

844
00:48:59,206 --> 0:49:03,544
我要发送一个强度的动态参数

845
00:49:03,610 --> 0:49:06,747
需要0.5秒生效

846
00:49:06,813 --> 0:49:09,416
你可以看到它在那时

847
00:49:09,483 --> 0:49:10,884
把事件的强度减少到了

848
00:49:10,951 --> 0:49:13,954
未修改之前的三分之一

849
00:49:17,424 --> 0:49:21,962
最后让我们看看创建模式的

850
00:49:23,530 --> 0:49:26,967
即AHAP

851
00:49:28,836 --> 0:49:31,538
Apple力触觉音频模式

852
00:49:31,605 --> 0:49:35,075
是以基于文本的格式

853
00:49:35,142 --> 0:49:36,977
描述Core Haptics Pattern

854
00:49:37,344 --> 0:49:40,247
它是从嵌套的键值对中创建的

855
00:49:40,314 --> 0:49:45,085
一旦你开始处理

856
00:49:45,152 --> 0:49:47,988
你一定会对它非常熟悉

857
00:49:49,423 --> 0:49:50,257
它是广泛建立的

858
00:49:50,324 --> 0:49:53,427
JSON文件格式的模式

859
00:49:53,493 --> 0:49:57,598
意思是你已经有大量不同的框架

860
00:49:57,664 --> 0:49:59,633
可以读写并编辑这些AHAP了

861
00:49:59,700 --> 0:50:03,003
包括比如

862
00:49:59,700 --> 0:50:03,003
包括比如

863
00:50:05,405 --> 0:50:08,876
AHAP使共享和编辑力触觉模式

864
00:50:08,942 --> 0:50:13,013
因为它是一种所有开发人员

865
00:50:14,982 --> 0:50:17,651
从外部AHAP文件中

866
00:50:17,718 --> 0:50:22,022
可以让你把内容与app代码分离开

867
00:50:25,092 --> 0:50:26,960
使用滑动平台的魔力

868
00:50:27,027 --> 0:50:30,030
我们可以在这里创建一个简单的

869
00:50:31,732 --> 0:50:34,034
从版本号字符串开始

870
00:50:34,101 --> 0:50:36,403
那表明了这个模式

871
00:50:36,470 --> 0:50:38,038
可以在哪个版本的系统上使用

872
00:50:40,240 --> 0:50:42,576
接下来我们给模式添加键

873
00:50:42,643 --> 0:50:45,045
那是一个字典数组

874
00:50:47,514 --> 0:50:50,584
我们向模式数组中添加第一个

875
00:50:50,651 --> 0:50:54,121
这个事件有两个必需键值对

876
00:50:54,188 --> 0:50:57,057
以秒为单位的时间表明相对于

877
00:50:57,658 --> 0:51:01,061
事件应该何时发生

878
00:50:57,658 --> 0:51:01,061
事件应该何时发生

879
00:51:01,361 --> 0:51:05,065
这是一个HapticTransient事件

880
00:51:07,434 --> 0:51:12,039
对于这个事件 我们要添加事件参数

881
00:51:12,105 --> 0:51:15,075
这些存储在它们自己的字典数组中

882
00:51:16,243 --> 0:51:19,713
我们要添加一个EventParameter

883
00:51:19,780 --> 0:51:22,082
并添加另一个EventParameter

884
00:51:25,118 --> 0:51:27,855
我们可以以同样的方式添加

885
00:51:27,921 --> 0:51:30,991
第二个事件的开始时间比第一个事件

886
00:51:31,058 --> 0:51:33,727
并且是

887
00:51:33,794 --> 0:51:35,028
对于

888
00:51:35,095 --> 0:51:38,098
我们使用我们在第一个事件中

889
00:51:40,000 --> 0:51:43,437
HapticContinuous类型

890
00:51:43,504 --> 0:51:47,875
除时间和事件类型外

891
00:51:47,941 --> 0:51:51,111
这个持续时间值总是以秒为单位

892
00:51:53,447 --> 0:51:57,417
这是我们刚刚所创建的模式的

893
00:51:57,484 --> 0:51:59,686
你可以看到两种时间类型

894
00:51:59,753 --> 0:52:02,923
最开始的

895
00:51:59,753 --> 0:52:02,923
最开始的

896
00:52:02,990 --> 0:52:04,358
以及稍后的Continuous

897
00:52:04,424 --> 0:52:06,360
以及它们相对的时间和持续时间

898
00:52:06,426 --> 0:52:10,130
以及它们的强度和锐度参数值

899
00:52:12,366 --> 0:52:14,368
这是对AHAP的快速介绍

900
00:52:14,434 --> 0:52:18,105
这个图表是AHAP文件结构的概述

901
00:52:18,172 --> 0:52:22,142
一个模式包含一个事件字典的数组

902
00:52:22,843 --> 0:52:25,312
可选的动态参数

903
00:52:25,379 --> 0:52:27,714
以及对参数曲线的选择性使用

904
00:52:27,781 --> 0:52:30,651
参数曲线是动态参数的一个扩展

905
00:52:30,717 --> 0:52:35,622
你可以从网站上获得更多信息

906
00:52:36,190 --> 0:52:39,126
你可以在我们的演讲页面上

907
00:52:39,193 --> 0:52:41,161
找到AHAP规范的完整链接

908
00:52:43,897 --> 0:52:45,098
同时 在我们的演讲页面上

909
00:52:45,165 --> 0:52:48,802
你可以找到一段代码示例

910
00:52:48,869 --> 0:52:51,205
由AHAP文件描述的模式

911
00:52:51,271 --> 0:52:54,508
这个力触觉示例app

912
00:52:54,575 --> 0:52:58,779
特别使用Core Haptics API

913
00:52:58,846 --> 0:53:01,181
敏锐度、动态范围和音频力触觉同步

914
00:52:58,846 --> 0:53:01,181
敏锐度、动态范围和音频力触觉同步

915
00:53:02,616 --> 0:53:04,818
非常感谢大家 现在我要把舞台

916
00:53:04,885 --> 0:53:06,787
交还给我的同事Michael

917
00:53:13,961 --> 0:53:15,262
谢谢Doug

918
00:53:15,329 --> 0:53:18,165
虽然我们今天讲了许多内容

919
00:53:18,232 --> 0:53:22,202
但还有更多关于

920
00:53:23,036 --> 0:53:26,206
请查看在线引用文档获取更多详情

921
00:53:27,274 --> 0:53:30,844
一旦你准备好并开始尝试

922
00:53:30,911 --> 0:53:32,079
指定内容并播放内容

923
00:53:32,145 --> 0:53:35,215
你很可能会思考

924
00:53:35,282 --> 0:53:37,651
这些相连接的力触觉音频模式的

925
00:53:39,152 --> 0:53:43,090
你会思考 这些准则

926
00:53:43,156 --> 0:53:45,058
是否能迁到力触觉设计中？

927
00:53:45,125 --> 0:53:48,195
我应该注意哪些常见的陷阱？

928
00:53:48,262 --> 0:53:52,866
好消息是我们的音频和力触觉

929
00:53:52,933 --> 0:53:54,601
数年来一直在做这项工作

930
00:53:54,668 --> 0:53:57,504
他们已经在最新的人机界面指南

931
00:53:57,571 --> 0:54:01,241
提供了一些关于力触觉的建议和指导

932
00:53:57,571 --> 0:54:01,241
提供了一些关于力触觉的建议和指导

933
00:54:01,308 --> 0:54:06,246
并在今年的WWDC的这场演讲中

934
00:54:06,747 --> 0:54:08,248
请参看

935
00:54:09,583 --> 0:54:11,018
让我们快速回顾一下

936
00:54:11,084 --> 0:54:13,887
今天我们讲了力触觉可以从哪些方面

937
00:54:13,954 --> 0:54:16,356
达到复现的下一层级

938
00:54:16,423 --> 0:54:19,259
并让你的app在更轻松地进行交互

939
00:54:20,160 --> 0:54:25,566
同时具有同步的和互补的

940
00:54:25,632 --> 0:54:28,635
是一种特别有效的组合

941
00:54:28,702 --> 0:54:32,372
但还没有API可以让你这样做

942
00:54:33,073 --> 0:54:37,077
通过iOS 13

943
00:54:37,144 --> 0:54:40,280
可以创建这些丰富的多模式的体验

944
00:54:40,814 --> 0:54:45,285
我们有用于描述力触觉和音频事件的

945
00:54:46,119 --> 0:54:48,288
还有一个文件格式AHAP

946
00:54:48,956 --> 0:54:52,726
我们有一种新的平台

947
00:54:52,793 --> 0:54:56,296
用于低延迟和实时调整

948
00:54:57,965 --> 0:55:02,302
我们结合了示例代码、示例模式、

949
00:54:57,965 --> 0:55:02,302
我们结合了示例代码、示例模式、

950
00:55:02,369 --> 0:55:05,539
设计指南和Apple的支持

951
00:55:05,606 --> 0:55:08,742
最后你得到了非常好的观众

952
00:55:08,809 --> 0:55:10,110
非常好的硬件

953
00:55:10,177 --> 0:55:12,913
你可以感觉到你想要的那种力触觉

954
00:55:12,980 --> 0:55:16,517
安装巨大的触觉引擎

955
00:55:16,583 --> 0:55:18,619
可以给你提供最强大、

956
00:55:18,685 --> 0:55:22,322
最有表现力的、最精准的力触觉硬件

957
00:55:23,590 --> 0:55:27,361
请大家参加我们在周四和周五

958
00:55:27,427 --> 0:55:31,098
你可以在演讲上

959
00:55:31,164 --> 0:55:32,332
查看我们今天所演示的这些

960
00:55:33,133 --> 0:55:35,836
并讨论你对于你的app的想法

961
00:55:35,903 --> 0:55:40,407
你还可以从我们的演讲页面上

962
00:55:40,474 --> 0:55:42,342
找到全部指导和引用

963
00:55:43,544 --> 0:55:48,115
我知道你一定会通过在app中

964
00:55:48,182 --> 0:55:49,116
获得很多乐趣

965
00:55:49,183 --> 0:55:51,952
我们几乎已经迫不及待地要看到

966
00:55:52,019 --> 0:55:53,620
谢谢大家 晚安
