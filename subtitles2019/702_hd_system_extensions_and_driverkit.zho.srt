1
00:00:00,506 --> 0:00:05,500
[音乐]

2
00:00:09,516 --> 0:00:12,616
[掌声]	

3
00:00:13,116 --> 0:00:14,076
&gt;&gt; 我是 Joe

4
00:00:14,076 --> 0:00:15,666
稍后我的同事

5
00:00:15,666 --> 0:00:17,276
Simon 和 Scott 也会加入

6
00:00:17,696 --> 0:00:19,766
我们来自 Core OS 组

7
00:00:19,766 --> 0:00:21,246
我们想告诉你关于

8
00:00:21,296 --> 0:00:22,816
macOS 10.15 Catalina 中

9
00:00:22,816 --> 0:00:26,046
内核扩展的一些新开发

10
00:00:28,276 --> 0:00:31,266
内核扩展或 Kext

11
00:00:31,266 --> 0:00:32,896
这项技术从一开始

12
00:00:32,896 --> 0:00:34,786
就是 macOS 的一部分

13
00:00:36,046 --> 0:00:37,796
使用 kexts

14
00:00:37,846 --> 0:00:39,846
你可以构建功能强大且创新的 App

15
00:00:40,246 --> 0:00:43,846
以扩展操作系统的内置功能

16
00:00:44,406 --> 0:00:47,386
这种扩展系统的能力

17
00:00:47,836 --> 0:00:51,246
是使 Mac 成为 Mac 的重要部分

18
00:00:51,806 --> 0:00:54,866
但是内核扩展

19
00:00:54,866 --> 0:00:55,926
存在一些问题

20
00:00:57,326 --> 0:00:59,166
它们很难开发

21
00:00:59,166 --> 0:01:02,406
而且调试时

22
00:00:59,166 --> 0:01:02,406
而且调试时

23
00:01:02,456 --> 0:01:04,846
它们可能对机器的安全性

24
00:01:04,846 --> 0:01:07,086
和隐私性造成风险

25
00:01:07,086 --> 0:01:08,676
并且它们可能对系统的可靠性构成风险

26
00:01:09,756 --> 0:01:11,356
是时候升级了

27
00:01:12,816 --> 0:01:15,076
macOS Catalina 引入了

28
00:01:15,076 --> 0:01:17,066
两项新技术

29
00:01:17,066 --> 0:01:18,916
名为系统扩展和 DriverKit

30
00:01:20,106 --> 0:01:22,566
使用它们 你的 App 可以

31
00:01:22,736 --> 0:01:24,486
扩展操作系统

32
00:01:24,486 --> 0:01:26,656
比以往任何时候都

33
00:01:26,656 --> 0:01:29,436
更可靠 更安全

34
00:01:29,706 --> 0:01:30,536
更容易开发

35
00:01:31,056 --> 0:01:34,936
这就是我们今天要谈的内容

36
00:01:35,466 --> 0:01:37,136
首先我会介绍这些技术

37
00:01:37,136 --> 0:01:40,196
并向你们展示它们是如何避免

38
00:01:40,196 --> 0:01:42,676
内核扩展问题的

39
00:01:43,896 --> 0:01:46,166
然后 Simon 将向我们

40
00:01:46,166 --> 0:01:49,366
展示如何使用 DriverKit 构建驱动扩展

41
00:01:51,056 --> 0:01:53,176
Scott 将向我们展示如何

42
00:01:53,236 --> 0:01:55,526
编写和调试一个简单的 USB 驱动器

43
00:01:57,016 --> 0:01:58,346
然后我会告诉你们

44
00:01:58,346 --> 0:02:02,166
如何在 App 中包含系统扩展

45
00:01:58,346 --> 0:02:02,166
如何在 App 中包含系统扩展

46
00:02:02,166 --> 0:02:04,576
我们开始吧

47
00:02:04,656 --> 0:02:07,466
系统扩展是我们

48
00:02:07,466 --> 0:02:08,895
在 macOS Catalina 中的

49
00:02:08,946 --> 0:02:09,425
第一项新技术

50
00:02:10,126 --> 0:02:14,326
系统扩展是你 App 的一部分

51
00:02:14,326 --> 0:02:18,176
它以类似于内核扩展的方式

52
00:02:18,176 --> 0:02:20,176
扩展操作系统的功能

53
00:02:20,176 --> 0:02:22,456
但运行在内核之外的用户空间中

54
00:02:24,376 --> 0:02:26,256
在 Catalina 中 可以构建

55
00:02:26,256 --> 0:02:28,266
三种系统扩展

56
00:02:28,956 --> 0:02:30,656
它们是网络扩展

57
00:02:31,246 --> 0:02:34,936
驱动程序和端点安全程序扩展

58
00:02:36,826 --> 0:02:40,956
网络扩展是网络内核扩展的替代

59
00:02:42,616 --> 0:02:44,316
它们可以过滤和重新路由

60
00:02:44,316 --> 0:02:47,330
网络流量或连接到 VPN

61
00:02:48,516 --> 0:02:50,026
有关网络扩展的更多信息

62
00:02:50,026 --> 0:02:51,866
周五上午

63
00:02:51,866 --> 0:02:53,726
有一个专门针对它们的会议

64
00:02:56,596 --> 0:02:59,446
端点安全扩展替代的是

65
00:02:59,446 --> 0:03:03,066
可以使用 KAUTH 接口

66
00:02:59,446 --> 0:03:03,066
可以使用 KAUTH 接口

67
00:03:03,066 --> 0:03:05,346
拦截和监视与安全

68
00:03:05,346 --> 0:03:06,636
相关事件的 Kext

69
00:03:07,616 --> 0:03:08,836
你可以通过这种方式

70
00:03:08,836 --> 0:03:10,866
构建的一些 App

71
00:03:10,866 --> 0:03:13,306
进行端点检测和响应以及数据丢失保护

72
00:03:14,406 --> 0:03:17,456
如果你对端点安全扩展感兴趣

73
00:03:17,456 --> 0:03:18,956
请访问安全实验室

74
00:03:19,476 --> 0:03:20,966
现在有一个正在进行中

75
00:03:20,966 --> 0:03:22,566
并在这次演讲后继续

76
00:03:23,056 --> 0:03:24,696
还有一个是在周四下午

77
00:03:25,276 --> 0:03:29,796
第三种类型的扩展是

78
00:03:29,796 --> 0:03:31,826
驱动扩展

79
00:03:31,826 --> 0:03:33,526
它可以替代使用 IOKit 

80
00:03:33,526 --> 0:03:34,856
的设备驱动 Kext 

81
00:03:35,576 --> 0:03:38,326
在 Catalina 中你可以控制

82
00:03:38,446 --> 0:03:41,396
USB 串口 网络接口

83
00:03:41,526 --> 0:03:43,206
和人机接口设备

84
00:03:45,056 --> 0:03:47,146
驱动扩展是

85
00:03:47,186 --> 0:03:49,196
用 DriverKit 构建的

86
00:03:49,196 --> 0:03:51,146
这是我们在 Catalina 中的第二项技术

87
00:03:52,566 --> 0:03:56,636
DriverKit 是一个新的 SDK 

88
00:03:56,636 --> 0:03:59,896
包含所有基于 IOKit 的新框架

89
00:03:59,976 --> 0:04:01,726
但经过了更新和变革

90
00:03:59,976 --> 0:04:01,726
但经过了更新和变革

91
00:04:03,106 --> 0:04:04,566
旨在使用内核之外的

92
00:04:04,566 --> 0:04:07,836
用户空间构建驱动扩展

93
00:04:08,446 --> 0:04:11,386
现在我们已经遇到了这些新技术

94
00:04:11,386 --> 0:04:15,056
让我们看看它们是如何避免

95
00:04:15,056 --> 0:04:17,396
内核扩展的问题的

96
00:04:19,036 --> 0:04:20,826
在这两个定义中

97
00:04:20,826 --> 0:04:23,046
我都用了一个短语

98
00:04:23,046 --> 0:04:24,946
在内核之外的用户空间

99
00:04:26,016 --> 0:04:27,046
为什么这很重要？

100
00:04:28,386 --> 0:04:30,136
内核是一个非常苛刻

101
00:04:30,136 --> 0:04:32,806
且难以编程的环境

102
00:04:33,286 --> 0:04:36,816
内核管理着机器上

103
00:04:36,926 --> 0:04:38,146
发生的一切

104
00:04:38,146 --> 0:04:40,946
所以它永远不能停止运行

105
00:04:40,946 --> 0:04:43,016
永远不能等任何事情发生

106
00:04:43,016 --> 0:04:45,386
绝不能崩溃

107
00:04:46,776 --> 0:04:49,216
内核中的代码必须快速

108
00:04:49,216 --> 0:04:53,186
必须是可预测的

109
00:04:53,186 --> 0:04:56,706
必须节约使用内存等资源

110
00:04:56,706 --> 0:04:58,116
而且本质上不能有漏洞

111
00:04:59,316 --> 0:05:00,796
要编写满足

112
00:04:59,316 --> 0:05:00,796
要编写满足

113
00:05:00,856 --> 0:05:02,526
所有这些限制的代码

114
00:05:02,576 --> 0:05:03,256
非常困难

115
00:05:05,236 --> 0:05:07,326
系统扩展在内核外的

116
00:05:07,326 --> 0:05:09,516
用户空间中运行

117
00:05:09,516 --> 0:05:11,246
这意味着它们运行在

118
00:05:11,246 --> 0:05:13,046
舒适的现代编程环境中

119
00:05:14,516 --> 0:05:16,596
这使得它们比 Kext 

120
00:05:16,596 --> 0:05:19,606
更容易开发

121
00:05:19,606 --> 0:05:21,816
因为内核代码对何时

122
00:05:21,816 --> 0:05:23,556
以及如何在线程之间

123
00:05:23,556 --> 0:05:25,186
分配内存或同步有限制

124
00:05:26,326 --> 0:05:27,736
这意味着它

125
00:05:27,736 --> 0:05:29,526
不能使用大多数系统框架

126
00:05:29,526 --> 0:05:31,106
比如 Foundation

127
00:05:31,106 --> 0:05:32,656
因为它们不是为在这种环境中运行而设计的

128
00:05:33,946 --> 0:05:35,416
Kext 开发中唯一支持的

129
00:05:35,416 --> 0:05:38,526
语言是 C 和 C++

130
00:05:39,906 --> 0:05:41,536
而另一方面 系统扩展

131
00:05:41,536 --> 0:05:43,456
没有这样的限制

132
00:05:44,006 --> 0:05:45,206
这意味着它们可以

133
00:05:45,566 --> 0:05:49,506
使用 macOS SDK 中的任何框架结构

134
00:05:50,026 --> 0:05:51,496
并且可以用包括

135
00:05:51,496 --> 0:05:53,056
Swift 在内的任何语言编写

136
00:05:54,516 --> 0:05:58,446
[掌声]

137
00:05:58,946 --> 0:06:00,266
但有一个例外

138
00:05:58,946 --> 0:06:00,266
但有一个例外

139
00:06:00,926 --> 0:06:02,706
驱动扩展由于

140
00:06:02,706 --> 0:06:04,046
与硬件关系密切

141
00:06:04,076 --> 0:06:06,866
仍然存在一些限制

142
00:06:08,026 --> 0:06:09,386
它们必须使用 

143
00:06:09,386 --> 0:06:11,526
DriverKit 框架并运行在

144
00:06:11,526 --> 0:06:13,476
并在定制的 Runtime 中运行

145
00:06:13,576 --> 0:06:16,026
从而将它们与系统的其余部分隔开

146
00:06:16,216 --> 0:06:18,356
驱动扩展必须

147
00:06:18,356 --> 0:06:20,126
用 C 或 C++ 编写

148
00:06:20,206 --> 0:06:22,736
而默认为 C++17

149
00:06:23,516 --> 0:06:27,586
[掌声]

150
00:06:28,086 --> 0:06:29,436
系统扩展也比

151
00:06:29,436 --> 0:06:31,796
内核扩展更容易调试

152
00:06:32,716 --> 0:06:34,326
将调试器附加到内核

153
00:06:34,326 --> 0:06:36,296
会使内核和整个机器

154
00:06:36,296 --> 0:06:39,166
包括调试器停止运行

155
00:06:40,126 --> 0:06:41,456
这意味着你通常

156
00:06:41,456 --> 0:06:43,616
需要第二台机器进行调试

157
00:06:43,616 --> 0:06:44,886
你可能需要

158
00:06:44,886 --> 0:06:47,286
特殊的线缆或网络配置来连接机器

159
00:06:47,816 --> 0:06:53,376
构建 测试和调试 Kext 的周期可能很慢

160
00:06:53,496 --> 0:06:55,146
因为 Kext 中的任何崩溃

161
00:06:55,146 --> 0:06:56,556
都意味着整个系统

162
00:06:56,556 --> 0:06:57,006
必须重新启动

163
00:06:57,656 --> 0:07:01,646
内核调试器的支持有限

164
00:06:57,656 --> 0:07:01,646
内核调试器的支持有限

165
00:07:01,976 --> 0:07:02,956
它无法执行

166
00:07:02,956 --> 0:07:04,646
诸如计算表达式或

167
00:07:04,646 --> 0:07:05,906
打印对象值之类的操作

168
00:07:06,346 --> 0:07:09,686
另一方面 系统扩展

169
00:07:09,686 --> 0:07:13,946
在调试的同时可以保持

170
00:07:14,196 --> 0:07:15,396
内核继续运行

171
00:07:16,966 --> 0:07:18,526
如果扩展程序崩溃

172
00:07:18,526 --> 0:07:19,706
无需重新启动

173
00:07:20,836 --> 0:07:22,796
你可以在一台具有

174
00:07:23,016 --> 0:07:25,966
完全调试支持的机器上构建 测试和调试所有内容

175
00:07:26,556 --> 0:07:30,246
但是与内核扩展相比

176
00:07:30,246 --> 0:07:32,246
系统扩展的最大改进

177
00:07:32,246 --> 0:07:37,316
是在安全性 私密性和可靠性方面

178
00:07:37,936 --> 0:07:42,436
内核有许多工作

179
00:07:42,436 --> 0:07:44,196
但最重要的一项是

180
00:07:44,196 --> 0:07:46,746
定义和执行

181
00:07:46,746 --> 0:07:48,276
系统安全策略的规则

182
00:07:49,266 --> 0:07:51,186
内核将 App 彼此分开

183
00:07:51,186 --> 0:07:53,836
并将 App 与对硬件的直接访问分开

184
00:07:54,606 --> 0:07:56,126
然后它允许它们

185
00:07:56,126 --> 0:07:57,816
遵循安全策略的规则

186
00:07:58,036 --> 0:08:00,706
共享数据和系统服务

187
00:07:58,036 --> 0:08:00,706
共享数据和系统服务

188
00:08:01,226 --> 0:08:04,436
加载内核扩展时

189
00:08:04,846 --> 0:08:06,786
它将成为内核的一部分

190
00:08:07,896 --> 0:08:10,186
它可以访问机器上的所有内容

191
00:08:11,066 --> 0:08:13,186
这就是 Kext 强大的原因

192
00:08:13,686 --> 0:08:16,566
但它也可能是种危险

193
00:08:16,716 --> 0:08:18,886
因为内核扩展是

194
00:08:18,886 --> 0:08:22,936
制定安全规则的内核的一部分

195
00:08:22,936 --> 0:08:23,686
所以它在规则之上

196
00:08:24,256 --> 0:08:27,576
如果 Kext 有一个漏洞

197
00:08:27,576 --> 0:08:30,396
允许它被入侵

198
00:08:30,396 --> 0:08:34,576
它就可以接管整个机器

199
00:08:34,576 --> 0:08:36,556
做开发人员和用户从未想过

200
00:08:36,556 --> 0:08:37,176
要做的事情

201
00:08:37,916 --> 0:08:40,486
没有任何安全规则可以约束它

202
00:08:41,626 --> 0:08:43,166
这意味着 Kext 中的

203
00:08:43,166 --> 0:08:45,996
任何漏洞都可能是一个关键性的安全问题

204
00:08:46,546 --> 0:08:51,406
Kext 中的任何漏洞都可能十分危险

205
00:08:52,416 --> 0:08:55,226
发生了什么?

206
00:08:55,226 --> 0:08:56,166
我的幻灯片呢?

207
00:08:57,376 --> 0:09:01,066
Kext 中的任何漏洞都可能

208
00:08:57,376 --> 0:09:01,066
Kext 中的任何漏洞都可能

209
00:09:01,066 --> 0:09:02,746
是一个关键的可靠性问题

210
00:09:03,516 --> 0:09:05,596
[掌声]

211
00:09:06,096 --> 0:09:08,116
因为内核不仅会崩溃

212
00:09:08,116 --> 0:09:09,956
还会发生致命错误

213
00:09:09,956 --> 0:09:11,236
并且整个机器都必须重启

214
00:09:11,916 --> 0:09:13,846
如果你是 Kext 开发人员

215
00:09:13,846 --> 0:09:15,476
你肯定会看到很多这个对话框

216
00:09:15,976 --> 0:09:19,186
不幸的是我们的用户也会看到

217
00:09:19,726 --> 0:09:22,166
让我们看看情况如何随着

218
00:09:22,166 --> 0:09:23,876
系统扩展而变化

219
00:09:25,136 --> 0:09:27,776
系统扩展在用户空间中运行

220
00:09:28,386 --> 0:09:30,406
与其他 App 一样

221
00:09:30,406 --> 0:09:32,796
它必须遵守系统安全策略的规则

222
00:09:33,746 --> 0:09:35,476
和其他 App 不一样的是

223
00:09:35,476 --> 0:09:37,166
系统扩展被授予

224
00:09:37,166 --> 0:09:39,106
执行特殊任务的特权

225
00:09:40,126 --> 0:09:42,726
比如 它可以直接访问

226
00:09:42,726 --> 0:09:44,786
相关的硬件设备

227
00:09:44,786 --> 0:09:46,706
或使用特殊的 API 

228
00:09:46,706 --> 0:09:48,256
与内核直接通信

229
00:09:49,706 --> 0:09:51,356
如果系统扩展崩溃

230
00:09:52,016 --> 0:09:53,636
系统和 App 的其余部分

231
00:09:53,636 --> 0:09:58,736
不受影响并继续运行

232
00:09:58,966 --> 0:10:00,906
基于所有这些原因

233
00:09:58,966 --> 0:10:00,906
基于所有这些原因

234
00:10:00,906 --> 0:10:02,916
我们认为系统扩展是

235
00:10:02,916 --> 0:10:04,976
Mac 平台向前迈出的一大步

236
00:10:05,566 --> 0:10:09,906
事实上我们认为它的改进效果十分显著

237
00:10:09,906 --> 0:10:11,426
我们建议你立刻采用

238
00:10:12,016 --> 0:10:14,726
正如 Sebastian 昨天

239
00:10:14,726 --> 0:10:17,006
在 Platforms State of the Union 中所说

240
00:10:17,006 --> 0:10:20,196
我们已经开始弃用内核扩展的进程

241
00:10:20,926 --> 0:10:23,256
macOS 10.15 Catalina 将是

242
00:10:23,256 --> 0:10:25,446
最后一个完全

243
00:10:25,446 --> 0:10:27,416
支持内核扩展的版本

244
00:10:28,516 --> 0:10:32,036
[掌声]

245
00:10:32,536 --> 0:10:33,946
具体来说

246
00:10:33,946 --> 0:10:35,876
对于系统扩展所支持的功能

247
00:10:35,876 --> 0:10:37,296
和 DriverKit

248
00:10:37,296 --> 0:10:39,036
支持的设备系列

249
00:10:39,646 --> 0:10:41,246
使用内核扩展来执行

250
00:10:41,246 --> 0:10:43,506
相同的工作现在已被弃用

251
00:10:44,336 --> 0:10:46,026
未来的 macOS 版本

252
00:10:46,026 --> 0:10:48,846
将不会加载这些种类的内核扩展

253
00:10:49,416 --> 0:10:53,326
在未来的版本中

254
00:10:53,326 --> 0:10:55,196
我们将向 DriverKit 添加

255
00:10:55,446 --> 0:10:56,776
更多种类的系统扩展

256
00:10:56,776 --> 0:10:57,406
和更多的设备系列

257
00:10:58,576 --> 0:11:00,536
反过来这些类型的

258
00:10:58,576 --> 0:11:00,536
反过来这些类型的

259
00:11:00,536 --> 0:11:02,976
内核扩展也将被弃用

260
00:11:07,046 --> 0:11:10,356
所以这是对系统扩展的简要介绍

261
00:11:11,726 --> 0:11:13,566
它们通过在用户空间中运行

262
00:11:13,566 --> 0:11:15,406
来避免内核编程的困难

263
00:11:15,406 --> 0:11:17,336
这使得你的 App 能够

264
00:11:17,336 --> 0:11:19,266
以更易于开发和

265
00:11:19,266 --> 0:11:22,176
调试的方式扩展系统

266
00:11:22,866 --> 0:11:25,856
从而保护用户数据的

267
00:11:25,856 --> 0:11:28,766
安全性和可靠性

268
00:11:29,246 --> 0:11:32,666
现在我想把它交给 Simon

269
00:11:32,666 --> 0:11:34,136
他将向你展示如何使用新的

270
00:11:34,136 --> 0:11:35,696
DriverKit Runtime

271
00:11:35,956 --> 0:11:37,606
构建驱动扩展

272
00:11:38,516 --> 0:11:44,546
[掌声]

273
00:11:45,046 --> 0:11:46,986
谢谢 Joe

274
00:11:47,696 --> 0:11:50,006
正如 Joe 刚才所说

275
00:11:50,006 --> 0:11:51,276
驱动扩展是一种

276
00:11:51,276 --> 0:11:53,296
新型的系统扩展

277
00:11:53,296 --> 0:11:55,236
它控制硬件设备并使其服务

278
00:11:55,236 --> 0:11:57,386
在整个 OS 中可用

279
00:11:58,726 --> 0:11:59,676
我们将这些新的

280
00:11:59,676 --> 0:12:01,346
驱动扩展称为 Dext

281
00:11:59,676 --> 0:12:01,346
驱动扩展称为 Dext

282
00:12:02,726 --> 0:12:03,726
我们的目标是

283
00:12:03,726 --> 0:12:05,046
尽可能简化

284
00:12:05,046 --> 0:12:08,496
从内核扩展到驱动扩展的过渡

285
00:12:10,306 --> 0:12:11,286
为了向你展示

286
00:12:11,286 --> 0:12:12,826
驱动扩展是如何工作的

287
00:12:12,826 --> 0:12:14,356
以及如何构建自己的扩展或从 Kext 过渡

288
00:12:14,356 --> 0:12:17,000
我们将讨论四件事

289
00:12:19,736 --> 0:12:21,466
我们将讨论它们的

290
00:12:21,806 --> 0:12:22,126
生命周期

291
00:12:22,976 --> 0:12:25,000
它们如何匹配和启动

292
00:12:31,266 --> 0:12:32,766
以及它们如何与 Kext 竞争

293
00:12:33,246 --> 0:12:34,616
我们将讨论如何

294
00:12:34,616 --> 0:12:36,856
使用新的 DriverKit SDK 构建它们

295
00:12:36,856 --> 0:12:39,596
我们将讨论一些安全特性

296
00:12:39,596 --> 0:12:41,656
比如权限

297
00:12:42,206 --> 0:12:44,486
最后我们来讨论有关

298
00:12:44,486 --> 0:12:45,816
兼容性问题

299
00:12:45,816 --> 0:12:47,146
如何将 App 部署到 macOS Catalina

300
00:12:47,726 --> 0:12:49,546
和 Mojave 上

301
00:12:55,596 --> 0:12:56,276
首先让我们来讨论

302
00:12:56,276 --> 0:12:57,526
Kext 的生命周期

303
00:13:02,066 --> 0:13:04,396
我们看看当具有驱动扩展的设备出现时

304
00:13:04,396 --> 0:13:05,626
发生的过程

305
00:13:06,566 --> 0:13:07,956
我们从 IOKit 匹配开始

306
00:13:07,956 --> 0:13:09,596
创建一个代表

307
00:13:09,596 --> 0:13:10,746
你服务的内核服务

308
00:13:11,406 --> 0:13:12,386
这是 Apple 编写的

309
00:13:13,076 --> 0:13:17,856
然后我们启动一个托管驱动的进程

310
00:13:17,856 --> 0:13:19,236
并对你的 DriverKit 类

311
00:13:19,236 --> 0:13:20,266
进行实例化

312
00:13:20,876 --> 0:13:23,936
并且该进程同时也包含

313
00:13:23,936 --> 0:13:26,896
其使用的任何服务的代理对象

314
00:13:27,116 --> 0:13:28,096
比如它的提供者

315
00:13:29,446 --> 0:13:32,636
此设备正在使用 USB 设备或设备

316
00:13:33,136 --> 0:13:34,776
这个设备使用 USB 设备

317
00:13:34,776 --> 0:13:36,846
所以它有一个用于调用的代理对象

318
00:13:36,846 --> 0:13:38,706
代表内核设备

319
00:13:39,246 --> 0:13:41,796
这意味着 DriverKit

320
00:13:42,306 --> 0:13:43,866
驱动程序与

321
00:13:43,866 --> 0:13:45,876
内核扩展一样

322
00:13:45,876 --> 0:13:47,286
可以竞争内核驱动的匹配

323
00:13:47,956 --> 0:13:50,126
你可以使用像 IOReg 等工具

324
00:13:50,496 --> 0:13:52,186
在注册表中查看它们

325
00:13:52,186 --> 0:13:54,286
并且可以将 IOKit 框架 API

326
00:13:54,966 --> 0:13:56,986
与它们一起使用

327
00:13:57,186 --> 0:13:58,966
由于 DriverKit 驱动程序

328
00:13:58,966 --> 0:14:00,566
与内核相互分离

329
00:13:58,966 --> 0:14:00,566
与内核相互分离

330
00:14:00,566 --> 0:14:02,606
因此另一个设备将

331
00:14:02,606 --> 0:14:03,946
拥有自己的进程

332
00:14:03,946 --> 0:14:08,256
和另一个驱动实例

333
00:14:08,416 --> 0:14:11,326
在 macOS Catalina 中 Apple 已经

334
00:14:11,326 --> 0:14:14,256
开始将自己的几个驱动迁移到驱动扩展中

335
00:14:15,566 --> 0:14:16,886
在这里你可以看到

336
00:14:16,886 --> 0:14:18,526
一个托管 USB 网络设备的进程

337
00:14:18,526 --> 0:14:21,006
该设备在注册表中

338
00:14:21,006 --> 0:14:22,736
作为普通以太网设备

339
00:14:22,736 --> 0:14:26,896
对 OS 的其余部分可见

340
00:14:26,896 --> 0:14:27,966
你还可以在注册表中

341
00:14:27,966 --> 0:14:31,936
看到托管 HID 和串行驱动程序的其他进程

342
00:14:31,936 --> 0:14:35,806
现在我们将讨论如何

343
00:14:35,806 --> 0:14:36,896
使用 DriverKit SDK

344
00:14:36,896 --> 0:14:40,006
构建驱动扩展

345
00:14:42,056 --> 0:14:44,756
我们想让构建驱动扩展

346
00:14:44,756 --> 0:14:46,136
对于目前正在构建 Kext 的人来说

347
00:14:46,136 --> 0:14:47,866
是一个简单的过渡

348
00:14:48,276 --> 0:14:50,396
所以我们从你熟悉的 

349
00:14:50,396 --> 0:14:52,406
IOKit C++ API 开始

350
00:14:53,556 --> 0:14:55,206
DriverKit API 是 IOKit API

351
00:14:55,206 --> 0:14:57,816
在用户空间的扩展

352
00:14:58,366 --> 0:14:59,436
我们将它们收集到一个

353
00:14:59,436 --> 0:15:01,496
新的 DriverKit SDK 中

354
00:14:59,436 --> 0:15:01,496
新的 DriverKit SDK 中

355
00:15:01,496 --> 0:15:04,916
它独立于 macOS SDK

356
00:15:05,166 --> 0:15:07,456
此 SDK 有一个用于可靠性

357
00:15:07,646 --> 0:15:09,186
和安全性的有限 API 外表

358
00:15:09,186 --> 0:15:12,036
并且没有对文件系统

359
00:15:12,036 --> 0:15:15,536
网络或模拟消息的直接访问

360
00:15:16,166 --> 0:15:19,306
这使得 Apple 能够根据

361
00:15:19,306 --> 0:15:21,066
正在运行的驱动程序

362
00:15:21,066 --> 0:15:24,666
调整用户空间进程

363
00:15:24,666 --> 0:15:25,726
并赋予其更高的优先级

364
00:15:25,726 --> 0:15:26,306
和更强的功能

365
00:15:27,026 --> 0:15:30,006
让我们来谈谈

366
00:15:30,006 --> 0:15:31,536
DriverKit SDK 中的一些类

367
00:15:32,326 --> 0:15:35,686
首先 IOService 类

368
00:15:35,686 --> 0:15:37,146
存在于 DriverKit 中

369
00:15:37,146 --> 0:15:40,736
与 IOKit 类非常相似

370
00:15:40,916 --> 0:15:42,706
还有 IOMemoryDescriptor

371
00:15:42,706 --> 0:15:45,356
和 IOBufferMemoryDescriptor 类

372
00:15:45,356 --> 0:15:49,556
与 IOKit 非常相似

373
00:15:49,656 --> 0:15:52,286
IOKit 中的 IOWorkLoop 

374
00:15:50,886 --> 0:15:52,286
和 EventSource 类

375
00:15:52,286 --> 0:15:53,376
也有对应的替代

376
00:15:54,176 --> 0:15:57,546
最后还有一个名为

377
00:15:57,546 --> 0:15:59,746
OSAction 的新类

378
00:15:59,746 --> 0:16:01,316
表示 C 函数指针

379
00:15:59,746 --> 0:16:01,316
表示 C 函数指针

380
00:16:04,716 --> 0:16:06,246
那让我们来看看

381
00:16:06,246 --> 0:16:11,396
仔细看看其中的一些类

382
00:16:11,466 --> 0:16:13,196
IOService 类具有 IOKit 的

383
00:16:13,196 --> 0:16:14,876
生命周期 API

384
00:16:14,876 --> 0:16:16,186
如开始 暂停和终止

385
00:16:17,596 --> 0:16:22,096
对于同步

386
00:16:22,256 --> 0:16:23,846
每个 IOService 都有一个

387
00:16:23,846 --> 0:16:26,366
默认的 DispatchQueue 

388
00:16:26,366 --> 0:16:27,816
所有的方法都在一个队列上调用

389
00:16:27,816 --> 0:16:28,856
包括中断 定时器

390
00:16:28,856 --> 0:16:33,246
以及完成 IODispatchQueue 是基于

391
00:16:33,246 --> 0:16:36,286
Grand Central Dispatch 代码之上的

392
00:16:36,286 --> 0:16:38,846
是针对在受限 DriverKit 环境中运行

393
00:16:38,846 --> 0:16:39,406
而优化的特殊版本

394
00:16:40,876 --> 0:16:42,556
驱动可以控制其他队列

395
00:16:42,556 --> 0:16:44,746
并知道调用哪些方法

396
00:16:44,746 --> 0:16:47,086
在哪些队列上进行高级使用

397
00:16:47,656 --> 0:16:52,336
事件 API 类似于

398
00:16:52,336 --> 0:16:53,776
IOKit 中的 IOWorkLoop 模型

399
00:16:53,776 --> 0:17:00,136
但现在基于 Grand Central Dispatch API

400
00:16:53,776 --> 0:17:00,136
但现在基于 Grand Central Dispatch API

401
00:17:00,336 --> 0:17:01,876
其中包含用于中断和计时器的

402
00:17:01,876 --> 0:17:02,936
队列和调度源

403
00:17:04,256 --> 0:17:09,056
块 API 替代了 IOCommandGate

404
00:17:09,056 --> 0:17:10,866
GCD 提供了易于使用的同步参数

405
00:17:10,866 --> 0:17:13,736
这些参数你可能非常熟悉

406
00:17:15,056 --> 0:17:16,146
还有一个

407
00:17:16,146 --> 0:17:18,006
IOSharedDataQueueDispatchSource 类

408
00:17:18,006 --> 0:17:19,806
它提供了一个

409
00:17:19,806 --> 0:17:23,425
共享内存缓冲区

410
00:17:23,425 --> 0:17:24,476
用于快速低开销的消息传递

411
00:17:24,776 --> 0:17:28,556
我们将讨论的最后一个类

412
00:17:28,556 --> 0:17:31,636
是 OSAction 

413
00:17:31,636 --> 0:17:32,906
它封装了

414
00:17:32,906 --> 0:17:34,986
IOKit API 的回调

415
00:17:35,576 --> 0:17:38,196
它们总是异步的

416
00:17:38,196 --> 0:17:39,686
并且私有地保存回调

417
00:17:39,686 --> 0:17:40,566
客户端的状态

418
00:17:41,236 --> 0:17:43,806
它们允许以

419
00:17:43,806 --> 0:17:45,086
任意方式定义回调参数

420
00:17:45,086 --> 0:17:48,166
和在编译和运行时中的类型检查

421
00:17:48,806 --> 0:17:51,036
所以 DriverKit 中

422
00:17:51,036 --> 0:17:52,136
有一些类

423
00:17:52,366 --> 0:17:53,396
让我们看看

424
00:17:53,396 --> 0:17:55,046
如何定义这些与

425
00:17:55,046 --> 0:17:56,726
IOKit 略有不同的类

426
00:17:58,576 --> 0:17:59,996
DriverKit 接口使用

427
00:17:59,996 --> 0:18:04,876
扩展名为 .iig 的新文件类型进行描述

428
00:17:59,996 --> 0:18:04,876
扩展名为 .iig 的新文件类型进行描述

429
00:18:04,876 --> 0:18:06,396
并且它们由名为

430
00:18:06,396 --> 0:18:08,000
IIG 的工具处理

431
00:18:09,116 --> 0:18:11,376
IIG 文件是一个

432
00:18:11,376 --> 0:18:12,976
编译的类定义

433
00:18:12,976 --> 0:18:15,086
可以导入常见类型

434
00:18:15,086 --> 0:18:18,596
和结构的的 C 和 C++ 头文件

435
00:18:19,166 --> 0:18:21,796
但是它的类和方法的定义中

436
00:18:21,796 --> 0:18:23,006
确实有额外的属性

437
00:18:23,006 --> 0:18:25,016
允许使用它

438
00:18:25,016 --> 0:18:27,396
用于从单独的

439
00:18:27,396 --> 0:18:29,046
地址空间调用

440
00:18:29,516 --> 0:18:35,346
在这里你可以看到一个基本的类定义

441
00:18:35,346 --> 0:18:37,356
它看起来很普通

442
00:18:37,356 --> 0:18:39,296
但是有一些额外的属性

443
00:18:39,296 --> 0:18:40,706
比如类中的 KERNEL

444
00:18:40,706 --> 0:18:41,696
这意味着类是在内核中定义的

445
00:18:42,856 --> 0:18:44,146
以及一些方法声明中的 LOCAL

446
00:18:44,146 --> 0:18:45,846
这意味着

447
00:18:45,846 --> 0:18:47,576
方法是在用户驱动中实现的

448
00:18:47,576 --> 0:18:51,646
今天 macOS Catalina 开发人员预览版中

449
00:18:51,646 --> 0:18:54,006
提供的一些系列包括

450
00:18:54,006 --> 0:18:56,266
是用于创建网络接口的

451
00:18:56,266 --> 0:18:58,836
NetworkingDriverKit

452
00:19:00,276 --> 0:19:01,936
用于创建 HID 设备的  

453
00:19:01,936 --> 0:19:02,606
HIDDriverKit

454
00:19:04,836 --> 0:19:07,336
用于为操作系统提供 USB 

455
00:19:07,476 --> 0:19:09,306
串行设备的 USBSerialDriverKit

456
00:19:09,306 --> 0:19:12,756
以及用于在驱动程序中

457
00:19:12,786 --> 0:19:14,486
使用 USB 设备提供程序的

458
00:19:14,486 --> 0:19:15,166
USBDriverKit

459
00:19:17,326 --> 0:19:18,226
Scott 一会儿

460
00:19:18,226 --> 0:19:20,016
会演示 USBDriverKit

461
00:19:20,536 --> 0:19:22,506
对 USB 设备的支持

462
00:19:22,506 --> 0:19:26,456
现在我们将讨论

463
00:19:26,456 --> 0:19:28,376
开发驱动扩展的

464
00:19:28,596 --> 0:19:30,186
一些安全性方面

465
00:19:30,866 --> 0:19:34,196
你的驱动扩展

466
00:19:34,276 --> 0:19:37,636
需要获得一些类型的授权

467
00:19:38,976 --> 0:19:40,346
有些授权是所有驱动扩展

468
00:19:40,346 --> 0:19:42,886
都必须获得的

469
00:19:42,886 --> 0:19:44,466
还有一种被称为

470
00:19:44,466 --> 0:19:45,886
传输授权

471
00:19:46,626 --> 0:19:48,376
是特定于某类设备的

472
00:19:48,926 --> 0:19:53,206
还有一个系列的授权

473
00:19:53,206 --> 0:19:56,086
是向操作系统提供服务所需的权限

474
00:19:56,786 --> 0:19:58,256
Joe 稍后将在本次会议中

475
00:19:58,296 --> 0:19:59,716
讨论代码签名

476
00:19:59,716 --> 0:20:01,976
和获取这些授权的批准过程

477
00:19:59,716 --> 0:20:01,976
和获取这些授权的批准过程

478
00:20:02,716 --> 0:20:07,466
现在我们将快速了解部署

479
00:20:07,466 --> 0:20:10,276
适用于所有 macOS 版本的产品

480
00:20:11,866 --> 0:20:15,806
为 macOS Catalina 和较早的版本

481
00:20:15,806 --> 0:20:17,756
部署产品需要

482
00:20:17,756 --> 0:20:21,806
为旧版本安装内核扩展

483
00:20:21,806 --> 0:20:23,476
但要在 macOS Catalina 上

484
00:20:23,476 --> 0:20:25,366
使用系统扩展框架并

485
00:20:25,366 --> 0:20:26,356
提供驱动扩展

486
00:20:27,026 --> 0:20:29,876
现在 Scott 将演示

487
00:20:29,876 --> 0:20:33,096
如何使用新的 USBDriverKit 框架

488
00:20:34,096 --> 0:20:41,936
谢谢 Scott [掌声]

489
00:20:42,436 --> 0:20:43,366
&gt;&gt; 谢谢 Simon

490
00:20:43,686 --> 0:20:45,116
那么今天我将向你展示如何

491
00:20:45,116 --> 0:20:47,396
构建一个简单的 USB 驱动

492
00:20:47,396 --> 0:20:48,356
该驱动使用新的

493
00:20:48,356 --> 0:20:50,156
USBDriverKit 框架

494
00:20:50,156 --> 0:20:52,016
从中断端点读取数据

495
00:20:52,316 --> 0:20:53,786
我们将简要介绍

496
00:20:53,786 --> 0:20:55,396
如何使用 DriverKit 模板

497
00:20:55,396 --> 0:20:56,626
在 Xcode 中创建一个新项目

498
00:20:57,376 --> 0:20:58,636
之后我们将看一个

499
00:20:58,636 --> 0:21:00,916
内核类和 DriverKit 类的对比

500
00:20:58,636 --> 0:21:00,916
内核类和 DriverKit 类的对比

501
00:21:01,786 --> 0:21:02,816
然后接下来我将

502
00:21:02,816 --> 0:21:04,966
详细介绍 DriverKit 中的实现

503
00:21:05,326 --> 0:21:06,566
最后我将简要

504
00:21:09,326 --> 0:21:10,676
使用 LLDB 调试 Dext 

505
00:21:10,676 --> 0:21:15,776
使用 Xcode 创建一个新的 DriverKit 项目

506
00:21:15,776 --> 0:21:17,556
非常简单

507
00:21:17,556 --> 0:21:18,746
只要在 Xcode 的

508
00:21:18,746 --> 0:21:20,836
新项目工作流程中选择合适的模板

509
00:21:21,516 --> 0:21:23,126
完成后 Xcode 将

510
00:21:23,126 --> 0:21:24,316
自动生成一些文件以帮助

511
00:21:24,316 --> 0:21:28,906
你开始生成的项目包括

512
00:21:28,906 --> 0:21:29,956
成功构建所需的

513
00:21:29,956 --> 0:21:30,896
标准文件

514
00:21:30,896 --> 0:21:33,316
与内核扩展一样

515
00:21:33,416 --> 0:21:36,616
该项目包括 C++ 实现 权限和

516
00:21:36,616 --> 0:21:37,666
info.pist

517
00:21:38,866 --> 0:21:41,076
除此之外 Xcode 

518
00:21:41,076 --> 0:21:43,106
还生成了 Simon 之前提到的 

519
00:21:43,106 --> 0:21:44,286
IIG 文件

520
00:21:45,106 --> 0:21:46,206
这个文件包括含

521
00:21:46,256 --> 0:21:47,806
驱动的类定义

522
00:21:49,026 --> 0:21:49,996
因此让我们看一下

523
00:21:49,996 --> 0:21:53,146
MyUserUSBInterfaceDriver 的类定义

524
00:21:53,686 --> 0:21:56,916
你可以看到它看起来

525
00:21:56,916 --> 0:21:58,486
与内核驱动非常相似

526
00:21:59,116 --> 0:22:01,016
例如相同的公共

527
00:21:59,116 --> 0:22:01,016
例如相同的公共

528
00:22:01,016 --> 0:22:02,476
IOKit 生命周期方法

529
00:22:02,476 --> 0:22:03,786
Start 和 Stop 现有的 DriverKit

530
00:22:03,786 --> 0:22:04,786
首字母将被大写

531
00:22:05,976 --> 0:22:07,866
尽管如此还是有一些

532
00:22:07,866 --> 0:22:08,966
细微但重要的区别

533
00:22:10,746 --> 0:22:12,346
首先 DriverKit 类

534
00:22:12,346 --> 0:22:13,766
需要一个带有

535
00:22:13,766 --> 0:22:14,936
附加属性的不同回调

536
00:22:15,416 --> 0:22:17,246
此属性指示

537
00:22:17,306 --> 0:22:18,346
此方法符合

538
00:22:18,346 --> 0:22:20,276
IOUSBHostPipe 对象定义的

539
00:22:20,276 --> 0:22:21,766
回调类型

540
00:22:21,766 --> 0:22:23,986
并强制执行编译时类型检查

541
00:22:24,816 --> 0:22:26,486
第二 DriverKit 类中

542
00:22:26,486 --> 0:22:28,996
没有声明实例变量

543
00:22:29,816 --> 0:22:31,786
这是因为在初始化期间

544
00:22:31,786 --> 0:22:33,296
必须由驱动

545
00:22:33,296 --> 0:22:35,086
分配所有实例变量

546
00:22:35,636 --> 0:22:36,836
让我们来看看

547
00:22:36,836 --> 0:22:37,466
MyUserUSBInterfaceDriver

548
00:22:37,466 --> 0:22:39,556
是如何完成的

549
00:22:41,116 --> 0:22:42,876
首先你需要

550
00:22:42,876 --> 0:22:44,446
声明一个结构来保存

551
00:22:44,446 --> 0:22:45,166
所有实例变量

552
00:22:45,926 --> 0:22:47,046
以前属于内核类的

553
00:22:47,046 --> 0:22:48,496
所有实例变量都应该是

554
00:22:48,496 --> 0:22:50,796
此结构的一部分

555
00:22:51,656 --> 0:22:53,096
对于这个类我们有指向

556
00:22:53,096 --> 0:22:55,726
与 Kext 相同的 USB 内核类型的指针

557
00:22:56,326 --> 0:22:58,296
例如执行 IO 的

558
00:22:58,296 --> 0:23:01,226
IOUSBHostInterface 提供者

559
00:22:58,296 --> 0:23:01,226
IOUSBHostInterface 提供者

560
00:23:01,226 --> 0:23:02,396
和 IOUSBHostPipe 对象

561
00:23:02,396 --> 0:23:05,086
还有一个 OSAction 对象

562
00:23:05,086 --> 0:23:08,196
用于封装异步 IO 的回调

563
00:23:08,776 --> 0:23:10,646
然后你只需在

564
00:23:10,646 --> 0:23:12,576
初始化例程期间分配结构

565
00:23:13,126 --> 0:23:16,536
这是 MyUserUSBInterfaceDriver 

566
00:23:16,536 --> 0:23:18,516
的初始化例程

567
00:23:19,016 --> 0:23:21,136
它以与 Kext 相同的方式 

568
00:23:21,136 --> 0:23:22,246
对父类调用 init

569
00:23:22,596 --> 0:23:24,486
然后它分配了实例变量结构

570
00:23:25,826 --> 0:23:27,546
应该注意的是

571
00:23:27,546 --> 0:23:29,116
父类定义了一个实例变量成员

572
00:23:29,646 --> 0:23:31,156
该成员必须赋值为

573
00:23:31,156 --> 0:23:32,706
分配的结果

574
00:23:33,726 --> 0:23:35,436
接下来我们将看一下

575
00:23:35,436 --> 0:23:37,206
Start 的实现

576
00:23:38,136 --> 0:23:40,216
Start 的这一部分

577
00:23:40,216 --> 0:23:43,256
负责调用父类并验证提供者

578
00:23:44,476 --> 0:23:45,756
这里的内容

579
00:23:45,756 --> 0:23:47,466
与内核实现略有不同

580
00:23:49,596 --> 0:23:50,946
你可以看到定义

581
00:23:50,946 --> 0:23:52,156
包含在宏 IMPL 中

582
00:23:52,156 --> 0:23:53,986
并且该宏需要

583
00:23:53,986 --> 0:23:55,706
支持用户进程

584
00:23:55,706 --> 0:23:58,556
和内核代理对象之间的 IPC 通信

585
00:23:59,736 --> 0:24:01,616
而且你也可以看到

586
00:23:59,736 --> 0:24:01,616
而且你也可以看到

587
00:24:01,616 --> 0:24:03,586
调用父类的 Start

588
00:24:04,036 --> 0:24:06,266
采取了不同的形式

589
00:24:07,236 --> 0:24:09,806
接下来使用 USBDriverKit API

590
00:24:09,806 --> 0:24:11,596
打开 IOUSB 主机接口

591
00:24:11,596 --> 0:24:16,666
并分配管道对象

592
00:24:18,826 --> 0:24:19,806
然后分配一个

593
00:24:19,806 --> 0:24:20,976
用于 IO 的内存描述

594
00:24:22,096 --> 0:24:23,286
这应该是一个

595
00:24:23,286 --> 0:24:24,606
相当熟悉的范例

596
00:24:24,606 --> 0:24:26,000
基本上与 Kext 中的相同

597
00:24:30,096 --> 0:24:31,196
在这种情况下

598
00:24:31,296 --> 0:24:32,926
我们正在执行异步 IO

599
00:24:32,926 --> 0:24:34,766
所以我们需要分配一个 OSAction 对象

600
00:24:34,856 --> 0:24:35,926
来封装回调

601
00:24:37,566 --> 0:24:38,636
然后最后剩下的

602
00:24:38,636 --> 0:24:40,136
就是将 IO 排入队列

603
00:24:41,756 --> 0:24:43,576
此时假设

604
00:24:43,576 --> 0:24:45,846
设置成功 则会

605
00:24:45,846 --> 0:24:47,136
进行异步读取完成后我们

606
00:24:47,136 --> 0:24:48,736
将调用 ReadComplete 

607
00:24:49,026 --> 0:24:50,406
此驱动的 ReadComplete 方法

608
00:24:50,406 --> 0:24:53,866
将打印传输的字节数和状态

609
00:24:54,116 --> 0:24:55,916
如果成功的话 它会重新排列 IO 队列

610
00:24:56,356 --> 0:24:58,456
接下来我们来看看

611
00:24:58,456 --> 0:25:01,536
运行中的驱动

612
00:24:58,456 --> 0:25:01,536
运行中的驱动

613
00:25:02,246 --> 0:25:04,026
因此在本演示中

614
00:25:04,026 --> 0:25:05,186
你将看到我已添加到

615
00:25:05,186 --> 0:25:07,516
MyUserUSBInterfaceDriver

616
00:25:07,516 --> 0:25:11,646
的一些日志记录用来打印生命周期方法

617
00:25:15,426 --> 0:25:17,966
我还添加了一个无限循环

618
00:25:18,556 --> 0:25:20,536
我们将使用 LDB 进行调试

619
00:25:20,536 --> 0:25:23,856
然后我还制造了一个崩溃

620
00:25:23,856 --> 0:25:27,946
我们可以看到现在如何

621
00:25:27,986 --> 0:25:29,236
使用新的 DriverKit 框架

622
00:25:29,236 --> 0:25:30,326
进行恢复

623
00:25:30,956 --> 0:25:32,676
因此如果我插入设备

624
00:25:32,676 --> 0:25:34,396
你可以看到初始化开始运行

625
00:25:34,396 --> 0:25:35,416
就像在 Kext 一样

626
00:25:35,726 --> 0:25:39,176
当数据向设备转移时

627
00:25:39,246 --> 0:25:41,236
ReadComplete 被调用

628
00:25:41,236 --> 0:25:46,396
使用 PS 我们可以看到

629
00:25:46,956 --> 0:25:47,926
驱动正在运行

630
00:25:48,826 --> 0:25:50,506
现在我们已经到达了

631
00:25:50,506 --> 0:25:51,506
我添加的无限循环

632
00:25:51,506 --> 0:25:53,326
我们可以用 LDB 看看

633
00:25:53,326 --> 0:25:54,976
在驱动中发生了什么

634
00:26:02,356 --> 0:26:03,616
从前面

635
00:26:03,616 --> 0:26:06,086
我们看到 PID 是 2572

636
00:26:06,086 --> 0:26:07,586
我们需要连接到那个进程

637
00:26:15,116 --> 0:26:16,456
我们需要找到运行 

638
00:26:16,456 --> 0:26:17,906
ReadComplete 方法的线程

639
00:26:19,386 --> 0:26:22,286
可以看到是线程 2

640
00:26:24,436 --> 0:26:26,656
这里我们遇到了

641
00:26:26,656 --> 0:26:27,436
一个无限循环

642
00:26:27,496 --> 0:26:28,356
因为我们在用户空间运行

643
00:26:28,356 --> 0:26:30,976
我们可以修改我们的循环变量

644
00:26:36,306 --> 0:26:37,726
在我继续之前

645
00:26:37,726 --> 0:26:39,316
如果你仔细观察

646
00:26:39,836 --> 0:26:41,506
你会发现肯定有一个

647
00:26:41,506 --> 0:26:43,346
空指针引用

648
00:26:43,346 --> 0:26:44,276
会使驱动崩溃

649
00:26:44,796 --> 0:26:48,206
你可以看到它已经崩溃了

650
00:26:49,646 --> 0:26:51,146
但是在不影响系统其他部分的情况下

651
00:26:51,576 --> 0:26:53,036
它会立即重启

652
00:26:53,956 --> 0:26:55,716
然后在拔下设备时

653
00:26:55,716 --> 0:26:57,156
你可以看到你的 Stop 和 Free 方法

654
00:26:57,156 --> 0:26:58,206
将正常运行

655
00:27:01,516 --> 0:27:04,086
[掌声]

656
00:27:04,586 --> 0:27:08,826
所以 [掌声]

657
00:27:09,326 --> 0:27:10,476
-- 使用新的

658
00:27:10,476 --> 0:27:12,626
DriverKit 框架构建

659
00:27:12,826 --> 0:27:14,236
和调试新驱动程序是多么容易

660
00:27:14,426 --> 0:27:16,046
现在我将把这里交给 Joe

661
00:27:16,516 --> 0:27:17,936
来讨论如何在

662
00:27:17,936 --> 0:27:19,056
你的 App 中提供系统扩展

663
00:27:21,546 --> 0:27:22,586
&gt;&gt; 谢谢 Scott

664
00:27:23,886 --> 0:27:24,946
现在我们已经了解如何

665
00:27:24,946 --> 0:27:26,526
构建驱动扩展

666
00:27:26,526 --> 0:27:27,986
我想告诉你们如何在

667
00:27:27,986 --> 0:27:30,176
App 中部署驱动

668
00:27:30,176 --> 0:27:32,326
或其他类型的系统扩展

669
00:27:33,816 --> 0:27:35,476
我们将讨论扩展与

670
00:27:35,476 --> 0:27:36,926
App 之间的关系

671
00:27:38,486 --> 0:27:39,976
以及如何构建

672
00:27:39,976 --> 0:27:41,196
和打包扩展包

673
00:27:42,056 --> 0:27:43,406
我们将讨论

674
00:27:43,446 --> 0:27:45,886
代码签名和权限

675
00:27:45,886 --> 0:27:48,056
以及如何安装 更新和卸载

676
00:27:48,056 --> 0:27:49,066
系统扩展

677
00:27:49,666 --> 0:27:55,436
系统扩展始终是 App 的一部分

678
00:27:56,196 --> 0:27:58,326
这是设计的基本原则

679
00:27:58,926 --> 0:28:02,056
没有独立的系统扩展

680
00:27:58,926 --> 0:28:02,056
没有独立的系统扩展

681
00:28:03,586 --> 0:28:05,426
这是因为用户

682
00:28:05,426 --> 0:28:06,326
考虑的是 App

683
00:28:06,806 --> 0:28:09,056
他们购买 App

684
00:28:09,056 --> 0:28:11,196
安装并运行 App

685
00:28:12,116 --> 0:28:14,066
你的系统扩展应该是

686
00:28:14,066 --> 0:28:16,206
你的 App 的实施细节

687
00:28:17,566 --> 0:28:18,986
该 App 是用户

688
00:28:19,616 --> 0:28:22,166
与你的扩展程序进行交互和控制的方式

689
00:28:22,736 --> 0:28:25,986
一旦你将系统扩展

690
00:28:25,986 --> 0:28:28,226
打包到一个 App 中

691
00:28:28,226 --> 0:28:29,666
你就可以使用

692
00:28:29,666 --> 0:28:32,816
开发人员 ID 或

693
00:28:32,816 --> 0:28:34,366
通过 Mac App Store 

694
00:28:34,366 --> 0:28:35,646
直接将 App 分发给用户

695
00:28:35,646 --> 0:28:36,386
这是内核扩展不可能实现的

696
00:28:37,516 --> 0:28:41,256
[掌声]

697
00:28:41,756 --> 0:28:42,716
由于你的 App

698
00:28:42,716 --> 0:28:44,266
与其扩展之间

699
00:28:44,266 --> 0:28:46,556
存在密切关系

700
00:28:46,556 --> 0:28:48,646
因此用户可以识别

701
00:28:48,646 --> 0:28:52,116
你的系统扩展与 App 有关

702
00:28:52,336 --> 0:28:55,476
你应该使用扩展中的 info.plist 中的

703
00:28:55,476 --> 0:28:57,386
CFBundleDisplayName 键

704
00:28:57,386 --> 0:28:59,456
为其提供良好的本地化名称

705
00:28:59,456 --> 0:29:00,686
并为其提供

706
00:28:59,456 --> 0:29:00,686
并为其提供

707
00:29:00,686 --> 0:29:02,496
App 主图标相关的自定义图标

708
00:29:03,246 --> 0:29:04,696
这样如果扩展

709
00:29:04,696 --> 0:29:06,106
将在用户界面中显示

710
00:29:06,106 --> 0:29:08,156
用户会将其识别为

711
00:29:08,156 --> 0:29:10,330
他们使用的 App 的一部分

712
00:29:13,096 --> 0:29:14,826
你还应该在

713
00:29:14,826 --> 0:29:16,466
扩展的 info.pList 中

714
00:29:16,466 --> 0:29:18,926
包含一个用法说明字符串

715
00:29:18,926 --> 0:29:20,536
该字符串解释了

716
00:29:20,536 --> 0:29:22,956
扩展的功能和用途

717
00:29:22,956 --> 0:29:23,866
以及用户运行它的原因

718
00:29:24,626 --> 0:29:26,076
可以将其看作

719
00:29:26,076 --> 0:29:27,516
类似于日历或

720
00:29:27,516 --> 0:29:31,816
相机访问所需的使用情况

721
00:29:33,336 --> 0:29:35,896
对于驱动扩展

722
00:29:35,896 --> 0:29:38,256
请使用 OSBundleUsageDescription 键

723
00:29:38,526 --> 0:29:41,616
对于其他类型的系统扩展

724
00:29:41,616 --> 0:29:43,896
使用 NSSystemExtensionUsageDescription

725
00:29:45,056 --> 0:29:46,656
请记住为你的 App

726
00:29:46,656 --> 0:29:48,206
支持的所有语言本地化这些字符串

727
00:29:48,206 --> 0:29:49,846
和所有其他字符串

728
00:29:50,416 --> 0:29:54,546
系统扩展本身

729
00:29:54,586 --> 0:29:56,466
是 App 的一个独立子包

730
00:29:56,466 --> 0:29:58,176
包含自己的可执行文件

731
00:29:58,176 --> 0:30:00,906
和 info.plist 

732
00:29:58,176 --> 0:30:00,906
和 info.plist 

733
00:30:01,986 --> 0:30:03,436
下面是一个示例 App

734
00:30:03,436 --> 0:30:05,206
的内部视图

735
00:30:05,206 --> 0:30:06,906
它在其 Contents/Library/SystemExtensions 目录下

736
00:30:07,006 --> 0:30:09,176
展示了一个系统扩展

737
00:30:11,606 --> 0:30:14,066
驱动扩展捆绑包

738
00:30:14,066 --> 0:30:16,286
使用 .dext 文件名后缀

739
00:30:16,286 --> 0:30:17,866
和包类型 DEXT

740
00:30:18,806 --> 0:30:21,066
它们在 info.plist 中使用 OSBundle 键

741
00:30:21,066 --> 0:30:24,026
和内核扩展包类似

742
00:30:25,516 --> 0:30:27,036
驱动扩展包

743
00:30:27,036 --> 0:30:30,016
应该是扁平的 没有 Contents 文件夹

744
00:30:30,016 --> 0:30:32,756
类似于 iOS App

745
00:30:34,156 --> 0:30:35,976
其他类型的

746
00:30:35,976 --> 0:30:38,186
系统扩展包使用 .system

747
00:30:38,186 --> 0:30:40,216
扩展名文件名后缀

748
00:30:40,216 --> 0:30:43,576
和 CFBundlePackageType SYSX

749
00:30:44,386 --> 0:30:45,846
代表 System Extension

750
00:30:46,476 --> 0:30:50,496
在 Xcode 中系统扩展

751
00:30:50,496 --> 0:30:51,606
是一个单独的 Target

752
00:30:52,206 --> 0:30:56,046
Xcode 内置了用于

753
00:30:56,046 --> 0:30:59,806
网络扩展和驱动套件驱动的模版

754
00:31:01,986 --> 0:31:03,606
当你创建这样的 Target 时

755
00:31:03,606 --> 0:31:05,026
Xcode 会询问你是否

756
00:31:05,026 --> 0:31:06,686
要将其嵌入已经

757
00:31:06,686 --> 0:31:08,186
属于项目的 App 中

758
00:31:08,806 --> 0:31:11,016
如果这样做

759
00:31:11,016 --> 0:31:13,056
它将创建一个 Copy Files 面板

760
00:31:13,056 --> 0:31:14,706
将扩展构建产品复制到

761
00:31:14,706 --> 0:31:15,566
你的 App 中

762
00:31:16,166 --> 0:31:20,946
一旦构建了系统扩展

763
00:31:20,946 --> 0:31:23,346
就可以使用与 App 签名

764
00:31:23,346 --> 0:31:25,336
相同的证书对其进行签名

765
00:31:25,776 --> 0:31:27,486
不再需要特殊的

766
00:31:27,486 --> 0:31:29,936
Kext 证书

767
00:31:29,936 --> 0:31:31,346
即 Kext 特定的签名证书了

768
00:31:32,516 --> 0:31:36,146
[掌声]

769
00:31:36,646 --> 0:31:39,056
通常用于签署系统扩展

770
00:31:39,056 --> 0:31:40,526
和主 App 的团队 ID

771
00:31:40,526 --> 0:31:41,936
必须匹配

772
00:31:42,266 --> 0:31:43,486
这是一项安全措施

773
00:31:44,206 --> 0:31:45,976
但是可能

774
00:31:45,976 --> 0:31:47,676
你正在构建的扩展

775
00:31:47,676 --> 0:31:49,786
将被打包到其他开发人员的 App 中

776
00:31:50,036 --> 0:31:52,026
例如 有许多产品中

777
00:31:52,276 --> 0:31:54,596
都包含的常见 USB 

778
00:31:54,596 --> 0:31:56,956
串行接口芯片的驱动扩展

779
00:31:57,676 --> 0:31:59,206
如果是这样

780
00:31:59,246 --> 0:32:00,356
你可以在系统扩展上使用授权

781
00:31:59,246 --> 0:32:00,356
你可以在系统扩展上使用授权

782
00:32:00,356 --> 0:32:02,166
以允许它打包在

783
00:32:02,166 --> 0:32:04,866
不同的开发人员的 App 中

784
00:32:08,196 --> 0:32:09,436
如果你使用

785
00:32:09,436 --> 0:32:11,546
开发人员 ID 对系统扩展进行签名

786
00:32:11,546 --> 0:32:13,296
则必须先对进行真实性检验

787
00:32:13,296 --> 0:32:15,386
才能在用户系统上运行

788
00:32:16,416 --> 0:32:19,236
有关真实性检验的更多信息

789
00:32:19,236 --> 0:32:21,986
请观看去年的会议

790
00:32:21,986 --> 0:32:23,606
或今天下午晚些时候来

791
00:32:23,606 --> 0:32:24,296
真实性检验实验室

792
00:32:26,976 --> 0:32:29,136
系统扩展使用权限

793
00:32:29,136 --> 0:32:32,846
向操作系统描述其功能

794
00:32:32,846 --> 0:32:35,026
它是什么类型的扩展

795
00:32:35,026 --> 0:32:36,366
以及它可以做什么

796
00:32:37,236 --> 0:32:39,506
例如 DriverKit 驱动扩展

797
00:32:39,506 --> 0:32:41,626
使用了 Simon 展示的

798
00:32:41,626 --> 0:32:44,000
交通和家庭权限

799
00:32:49,686 --> 0:32:53,256
com.apple.developer.system-extension.install 权限

800
00:32:55,256 --> 0:32:56,866
有关权限的

801
00:32:56,866 --> 0:32:58,706
更多信息以及请求

802
00:32:58,706 --> 0:33:00,146
开发团队使用它们

803
00:32:58,706 --> 0:33:00,146
开发团队使用它们

804
00:33:00,146 --> 0:33:05,096
请访问 developer.apple.com/system-extensions

805
00:33:05,636 --> 0:33:09,106
在 Catalina 的开发者种子中

806
00:33:09,106 --> 0:33:12,276
进行本地开发时

807
00:33:12,926 --> 0:33:14,386
你可以关闭系统完整性保护

808
00:33:14,386 --> 0:33:16,346
以在测试时禁用

809
00:33:16,346 --> 0:33:17,766
某些代码签名

810
00:33:17,766 --> 0:33:19,796
和权限检查

811
00:33:21,046 --> 0:33:22,316
请记得在

812
00:33:22,316 --> 0:33:23,836
完成测试后再次打开

813
00:33:23,836 --> 0:33:24,806
系统完整性保护

814
00:33:25,446 --> 0:33:28,856
现在你已经使用系统扩展 

815
00:33:29,216 --> 0:33:30,786
构建了 App

816
00:33:31,556 --> 0:33:33,466
如何在用户的系统上

817
00:33:33,466 --> 0:33:35,066
安装扩展

818
00:33:35,796 --> 0:33:38,836
不需要安装器或包

819
00:33:39,316 --> 0:33:41,236
你的系统扩展

820
00:33:41,476 --> 0:33:43,546
保留在你的 App 包中

821
00:33:43,676 --> 0:33:45,316
你的 App 使用新的

822
00:33:45,316 --> 0:33:47,426
系统扩展框架

823
00:33:47,426 --> 0:33:50,076
并创建激活请求

824
00:33:50,076 --> 0:33:51,136
以请求扩展

825
00:33:51,136 --> 0:33:52,866
可供系统使用

826
00:33:52,866 --> 0:33:55,206
系统管理员

827
00:33:55,206 --> 0:33:58,586
将批准请求

828
00:33:59,026 --> 0:34:00,876
大多数 App 应该在

829
00:33:59,026 --> 0:34:00,876
大多数 App 应该在

830
00:34:00,876 --> 0:34:02,746
App 启动期间创建 activationRequest

831
00:34:02,746 --> 0:34:05,636
以便立即提供扩展

832
00:34:06,306 --> 0:34:08,266
如果你的扩展

833
00:34:08,466 --> 0:34:10,716
已被激活并获得批准

834
00:34:10,716 --> 0:34:12,206
则 activationRequest 将

835
00:34:12,206 --> 0:34:13,335
快速返回 success

836
00:34:14,235 --> 0:34:16,106
但是你可能希望

837
00:34:16,106 --> 0:34:17,746
在 App 生命周期的

838
00:34:17,746 --> 0:34:18,706
不同时刻

839
00:34:18,706 --> 0:34:20,676
激活你的系统扩展

840
00:34:20,676 --> 0:34:22,346
例如在用户同意许可协议

841
00:34:22,346 --> 0:34:24,166
或进行 App 内购买后

842
00:34:24,266 --> 0:34:26,156
如果需要的话

843
00:34:28,956 --> 0:34:30,476
一旦你的扩展被激活

844
00:34:30,476 --> 0:34:32,306
系统将管理它的生命周期

845
00:34:32,306 --> 0:34:35,936
并在需要时启动它

846
00:34:36,676 --> 0:34:38,376
例如当连接到匹配的硬件设备时

847
00:34:38,376 --> 0:34:41,366
驱动扩展将启动

848
00:34:45,126 --> 0:34:47,116
要更新系统扩展名

849
00:34:47,806 --> 0:34:49,166
请更新 App 包

850
00:34:50,206 --> 0:34:52,406
用户可以安装他们

851
00:34:52,406 --> 0:34:53,496
从你的网站下载的新版本

852
00:34:53,496 --> 0:34:56,156
你的自动更新器可以

853
00:34:56,156 --> 0:34:57,616
立即更新 App 包

854
00:34:58,156 --> 0:34:59,846
或者如果你在

855
00:34:59,846 --> 0:35:01,156
App Store 上发布了一个新版本

856
00:34:59,846 --> 0:35:01,156
App Store 上发布了一个新版本

857
00:35:01,156 --> 0:35:02,096
它将为用户更新

858
00:35:02,716 --> 0:35:06,226
下次运行 App 

859
00:35:06,226 --> 0:35:07,746
并提交激活请求时

860
00:35:08,406 --> 0:35:09,766
系统将注意到

861
00:35:09,766 --> 0:35:11,906
扩展的版本已经更改

862
00:35:12,336 --> 0:35:13,816
它将要求你的

863
00:35:13,816 --> 0:35:15,826
激活请求代理按照

864
00:35:15,826 --> 0:35:17,686
你自己的版本号规则

865
00:35:17,686 --> 0:35:19,426
比较版本号

866
00:35:20,756 --> 0:35:22,146
如果你的代理

867
00:35:22,146 --> 0:35:24,456
确定这是一次升级

868
00:35:24,456 --> 0:35:25,936
系统将停止旧版本的系统扩展

869
00:35:25,936 --> 0:35:27,986
并启动新版本

870
00:35:28,616 --> 0:35:32,546
如果用户希望卸载你的 App

871
00:35:32,546 --> 0:35:35,126
当他们将其移到

872
00:35:35,126 --> 0:35:36,716
废纸篓中时

873
00:35:36,716 --> 0:35:38,276
它的所有扩展也将

874
00:35:38,276 --> 0:35:39,606
自动停用

875
00:35:40,686 --> 0:35:42,226
如果你希望使用

876
00:35:42,286 --> 0:35:44,766
也有一个 deactivationRequest API 

877
00:35:44,766 --> 0:35:46,296
但不需要专用的

878
00:35:46,296 --> 0:35:47,086
扩展卸载程序

879
00:35:53,536 --> 0:35:56,146
因此今天我们引入了系统扩展

880
00:35:56,146 --> 0:35:58,276
它是内核扩展的替代

881
00:35:58,276 --> 0:35:59,746
使你的 App 

882
00:35:59,746 --> 0:36:04,426
能够以比以往更安全

883
00:35:59,746 --> 0:36:04,426
能够以比以往更安全

884
00:36:04,426 --> 0:36:07,736
更易于开发的方式扩展系统

885
00:36:09,256 --> 0:36:11,406
我们看到了如何使用 DriverKit

886
00:36:11,406 --> 0:36:14,256
SDK 和框架

887
00:36:14,256 --> 0:36:16,986
这是一个重大的 IOKit 更新

888
00:36:16,986 --> 0:36:17,796
来构建驱动程序

889
00:36:18,386 --> 0:36:21,306
我们看到了如何在一台机器上

890
00:36:21,306 --> 0:36:23,696
编写并调试

891
00:36:23,696 --> 0:36:24,456
示例的 USB 驱动

892
00:36:25,786 --> 0:36:27,156
最后我们讨论了

893
00:36:27,156 --> 0:36:30,036
如何在 App 中包含系统扩展

894
00:36:32,776 --> 0:36:34,626
如果你有任何问题

895
00:36:34,626 --> 0:36:36,446
我们很乐意在 Core OS 实验室

896
00:36:36,446 --> 0:36:37,726
为你解答

897
00:36:37,946 --> 0:36:39,576
今天晚些时候还有周四早上

898
00:36:39,576 --> 0:36:40,486
都有实验室

899
00:36:41,946 --> 0:36:43,066
你可能还想访问

900
00:36:43,066 --> 0:36:45,466
正在进行的安全实验室

901
00:36:45,466 --> 0:36:46,796
或者周四下午

902
00:36:46,796 --> 0:36:48,456
和周五上午访问网络实验室

903
00:36:48,996 --> 0:36:51,726
非常感谢

904
00:36:51,726 --> 0:36:52,756
请继续观看接下来的 WWDC

905
00:36:53,516 --> 0:36:58,506
[掌声]
