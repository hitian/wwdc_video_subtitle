1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:08,180 --> 0:00:10,181
[ Applause ]

3
00:00:10,346 --> 0:00:10,866
&gt;&gt; Good morning!

4
00:00:14,596 --> 0:00:16,276
Welcome to In-App Purchases and

5
00:00:16,276 --> 0:00:17,376
Using Server-to-Server

6
00:00:17,376 --> 0:00:18,286
Notifications.

7
00:00:18,836 --> 0:00:20,386
My name is Dana DuBois, and I'm

8
00:00:20,386 --> 0:00:21,296
an App Store engineering

9
00:00:21,296 --> 0:00:21,766
manager.

10
00:00:22,216 --> 0:00:24,806
We'll talk about a number of

11
00:00:24,806 --> 0:00:25,466
things today.

12
00:00:26,116 --> 0:00:27,086
First I'm going to start off

13
00:00:27,086 --> 0:00:29,846
about what's new in StoreKit.

14
00:00:29,876 --> 0:00:31,246
What have we changed since we

15
00:00:31,246 --> 0:00:32,036
were here last year?

16
00:00:32,036 --> 0:00:34,436
Then I'm going to hand it off to

17
00:00:34,436 --> 0:00:35,896
my colleague Tori, and she's

18
00:00:35,896 --> 0:00:36,956
going to give you everything you

19
00:00:36,956 --> 0:00:37,976
need to know about

20
00:00:37,976 --> 0:00:39,716
Server-to-Server Notifications,

21
00:00:40,016 --> 0:00:40,906
and how you can make sure you

22
00:00:40,906 --> 0:00:43,376
have the latest information

23
00:00:43,586 --> 0:00:44,866
about your subscription

24
00:00:44,866 --> 0:00:46,786
customers on your backend.

25
00:00:47,296 --> 0:00:50,166
Next up, Manjeet is going to

26
00:00:50,166 --> 0:00:51,626
walk through the different

27
00:00:51,626 --> 0:00:52,836
billing events during the

28
00:00:52,836 --> 0:00:53,996
subscription lifecycle.

29
00:00:55,256 --> 0:00:56,896
And then, finally, he's going to

30
00:00:56,896 --> 0:00:57,726
walk you through what you need

31
00:00:57,726 --> 0:00:59,366
to know to reduce involuntary

32
00:00:59,366 --> 0:01:00,906
churn, and keep your

33
00:00:59,366 --> 0:01:00,906
churn, and keep your

34
00:01:00,976 --> 0:01:02,816
subscription customers in your

35
00:01:02,816 --> 0:01:03,466
service.

36
00:01:03,996 --> 0:01:05,616
So, first.

37
00:01:05,616 --> 0:01:08,506
What's new in StoreKit?

38
00:01:09,936 --> 0:01:11,756
Well, this spring we introduced

39
00:01:11,756 --> 0:01:12,866
subscription offers.

40
00:01:14,196 --> 0:01:16,266
Subscription offers is a feature

41
00:01:16,806 --> 0:01:19,676
that we introduced that gives

42
00:01:19,676 --> 0:01:22,296
you a tool to retain existing

43
00:01:22,296 --> 0:01:25,156
subscribers as well as win back

44
00:01:25,156 --> 0:01:26,966
subscribers who used to be in

45
00:01:26,966 --> 0:01:27,696
the service.

46
00:01:29,056 --> 0:01:31,516
You can achieve this by having

47
00:01:31,516 --> 0:01:35,226
up to 10 different active offers

48
00:01:35,346 --> 0:01:37,716
per subscription, that will give

49
00:01:37,716 --> 0:01:39,866
you a discount or free service

50
00:01:39,866 --> 0:01:40,626
that you can give to your

51
00:01:40,626 --> 0:01:41,356
customers.

52
00:01:41,736 --> 0:01:45,186
Your app decides what to present

53
00:01:45,186 --> 0:01:46,156
and to whom.

54
00:01:46,626 --> 0:01:47,816
It's completely up to you.

55
00:01:48,626 --> 0:01:49,926
This is such a great feature,

56
00:01:49,926 --> 0:01:51,406
and such a big feature, that we

57
00:01:51,406 --> 0:01:52,496
actually have a dedicated

58
00:01:52,496 --> 0:01:54,036
session to that later today,

59
00:01:54,176 --> 0:01:56,076
right here at 2 o'clock.

60
00:01:56,076 --> 0:01:57,696
If you have subscriptions in

61
00:01:57,696 --> 0:01:59,706
your service, I highly recommend

62
00:01:59,706 --> 0:02:01,006
you check that out.

63
00:01:59,706 --> 0:02:01,006
you check that out.

64
00:02:02,836 --> 0:02:03,946
So, what else is new in

65
00:02:03,946 --> 0:02:04,456
StoreKit?

66
00:02:04,456 --> 0:02:06,326
Well, this summer, we're

67
00:02:06,326 --> 0:02:07,936
announcing that we've introduced

68
00:02:07,936 --> 0:02:08,936
the SKStorefront.

69
00:02:09,826 --> 0:02:11,906
SKStorefront is how we're

70
00:02:11,906 --> 0:02:13,806
actually exposing to you, the

71
00:02:13,806 --> 0:02:15,986
developer, the storefront that

72
00:02:15,986 --> 0:02:17,566
the user has set their App Store

73
00:02:18,416 --> 0:02:18,496
to.

74
00:02:20,836 --> 0:02:22,646
This allows you to present the

75
00:02:22,716 --> 0:02:24,786
right content to your customers.

76
00:02:25,146 --> 0:02:26,256
What do you want to merchandise

77
00:02:26,256 --> 0:02:27,646
to your customers all around the

78
00:02:27,646 --> 0:02:27,966
world?

79
00:02:27,966 --> 0:02:29,796
You can use the SKStorefront to

80
00:02:29,796 --> 0:02:33,026
get specific territory for that

81
00:02:33,026 --> 0:02:34,376
customer on their device.

82
00:02:35,116 --> 0:02:36,686
This is the same way that the

83
00:02:36,686 --> 0:02:39,176
App Store exposes content.

84
00:02:39,456 --> 0:02:41,956
And, this API gives you the

85
00:02:41,956 --> 0:02:43,696
storefront that the App Store is

86
00:02:43,696 --> 0:02:44,696
currently set to.

87
00:02:45,216 --> 0:02:47,756
One thing to keep in mind is

88
00:02:47,756 --> 0:02:49,136
that this API returns a

89
00:02:49,136 --> 0:02:52,466
device-specific cached value for

90
00:02:52,466 --> 0:02:53,296
that storefront.

91
00:02:53,856 --> 0:02:55,536
And, it can change over time, so

92
00:02:55,536 --> 0:02:56,496
there's some stuff you need to

93
00:02:56,496 --> 0:02:57,886
think about while you're

94
00:02:57,886 --> 0:02:58,726
interfacing with the

95
00:02:58,726 --> 0:02:59,516
SKStorefront.

96
00:03:00,376 --> 0:03:01,456
So, let's get into the code, and

97
00:03:01,456 --> 0:03:01,976
see how this will all work.

98
00:03:06,096 --> 0:03:07,936
So, if you're interfacing with

99
00:03:07,936 --> 0:03:09,416
StoreKit today, you're already

100
00:03:09,866 --> 0:03:10,806
have a delegate on the

101
00:03:10,806 --> 0:03:11,986
SKPaymentQueue.

102
00:03:12,596 --> 0:03:14,376
We've added on that, the ability

103
00:03:14,376 --> 0:03:17,276
to get a parameter that returns

104
00:03:17,386 --> 0:03:19,116
the current cached value for the

105
00:03:19,116 --> 0:03:19,706
storefront.

106
00:03:20,056 --> 0:03:21,556
Just .storefront, and that'll

107
00:03:21,606 --> 0:03:22,356
give you the value.

108
00:03:23,166 --> 0:03:24,746
Because it can change, and

109
00:03:24,746 --> 0:03:26,036
because it's device-specific, it

110
00:03:26,036 --> 0:03:27,976
is possible, though unlikely,

111
00:03:28,176 --> 0:03:28,966
that it will be nil.

112
00:03:28,966 --> 0:03:30,286
So, you need to check for that

113
00:03:30,286 --> 0:03:31,636
in your app, and make sure you

114
00:03:31,636 --> 0:03:34,316
do the right thing.

115
00:03:34,536 --> 0:03:35,906
Once you have that storefront,

116
00:03:36,466 --> 0:03:38,366
right on that API, is a country

117
00:03:38,366 --> 0:03:38,746
code.

118
00:03:38,996 --> 0:03:40,256
And, that's a 3-letter,

119
00:03:40,426 --> 0:03:42,386
ISO-standard value for

120
00:03:42,386 --> 0:03:43,966
territories and countries all

121
00:03:43,966 --> 0:03:44,606
around the world.

122
00:03:44,606 --> 0:03:46,226
And, that'll tell you exactly

123
00:03:46,226 --> 0:03:47,666
what the App Store is set to on

124
00:03:47,666 --> 0:03:48,366
that device.

125
00:03:49,076 --> 0:03:49,706
And, that's really it.

126
00:03:49,706 --> 0:03:51,896
That'll allow you then to take

127
00:03:51,896 --> 0:03:53,406
that country code, and

128
00:03:53,706 --> 0:03:55,556
merchandise the right content to

129
00:03:55,556 --> 0:03:56,486
your customers.

130
00:03:57,146 --> 0:03:58,496
But, as I said, it can change

131
00:03:58,496 --> 0:03:59,286
over time.

132
00:03:59,706 --> 0:04:01,176
So, let's go a little deeper

133
00:03:59,706 --> 0:04:01,176
So, let's go a little deeper

134
00:04:01,176 --> 0:04:02,026
into the code, and see what else

135
00:04:02,026 --> 0:04:02,806
you need to think about.

136
00:04:03,306 --> 0:04:06,916
Here we have an example of some

137
00:04:06,916 --> 0:04:09,346
code where you're taking your

138
00:04:09,346 --> 0:04:11,376
product identifiers that you

139
00:04:11,376 --> 0:04:13,506
fetch from your backend, passing

140
00:04:13,506 --> 0:04:14,316
it in and then trying to

141
00:04:14,316 --> 0:04:16,656
determine if you should fetch

142
00:04:16,656 --> 0:04:18,995
the metadata, do an SKProduct

143
00:04:18,995 --> 0:04:20,495
request to determine if you

144
00:04:20,495 --> 0:04:22,125
should show that content or not.

145
00:04:22,866 --> 0:04:25,466
So, what the developer has done

146
00:04:25,466 --> 0:04:27,856
there is, fetch that metadata

147
00:04:27,856 --> 0:04:30,016
from their backend, and did a

148
00:04:30,016 --> 0:04:32,326
call to say, hey, is this

149
00:04:32,326 --> 0:04:34,506
storefront valid for that code?

150
00:04:34,596 --> 0:04:36,046
And then, you can see here,

151
00:04:36,046 --> 0:04:37,286
right before you fetch product

152
00:04:37,286 --> 0:04:39,656
info, you would call shouldShow.

153
00:04:40,156 --> 0:04:42,556
If that returns true, add that

154
00:04:42,556 --> 0:04:44,686
identifier to the list of things

155
00:04:44,686 --> 0:04:45,296
you're going to make an

156
00:04:45,296 --> 0:04:46,586
SKProduct request on.

157
00:04:46,706 --> 0:04:48,476
You should do that before you

158
00:04:48,476 --> 0:04:49,876
make the SKProduct request,

159
00:04:49,876 --> 0:04:50,986
because if you're not going to

160
00:04:50,986 --> 0:04:52,736
merchandise that product, it's

161
00:04:52,736 --> 0:04:54,176
more efficient not to actually

162
00:04:54,176 --> 0:04:56,286
fetch the product-- the product

163
00:04:56,286 --> 0:04:56,836
metadata.

164
00:04:56,836 --> 0:05:01,216
But, as I said before, it can

165
00:04:56,836 --> 0:05:01,216
But, as I said before, it can

166
00:05:01,216 --> 0:05:02,356
change over time.

167
00:05:02,486 --> 0:05:04,676
The users could actually switch

168
00:05:04,676 --> 0:05:06,856
accounts, or even-- it's even

169
00:05:06,856 --> 0:05:08,186
possible within the same account

170
00:05:08,186 --> 0:05:09,436
to go into the App Store and

171
00:05:09,436 --> 0:05:10,946
browse different storefronts.

172
00:05:10,946 --> 0:05:12,456
Developers will do this a lot

173
00:05:12,456 --> 0:05:13,736
when they actually want to see

174
00:05:13,736 --> 0:05:15,306
their app in different

175
00:05:15,306 --> 0:05:16,546
territories around the world,

176
00:05:16,546 --> 0:05:17,396
see what it looks like.

177
00:05:17,396 --> 0:05:18,176
See how it's doing.

178
00:05:18,176 --> 0:05:19,316
There's ways of doing that in

179
00:05:19,316 --> 0:05:19,746
the App Store.

180
00:05:20,046 --> 0:05:21,066
So, we want to make sure you

181
00:05:21,066 --> 0:05:22,746
have the latest information in

182
00:05:22,746 --> 0:05:23,476
your running app.

183
00:05:23,766 --> 0:05:26,066
So, on the SKPayment transaction

184
00:05:26,066 --> 0:05:27,756
observer, we added a new

185
00:05:27,996 --> 0:05:30,296
paymentQueueDidChange event that

186
00:05:30,296 --> 0:05:32,166
you can listen for, right inside

187
00:05:32,166 --> 0:05:32,766
your app.

188
00:05:33,286 --> 0:05:34,386
That passes in the payment

189
00:05:34,386 --> 0:05:34,726
queue.

190
00:05:35,176 --> 0:05:36,196
When you get that, you go

191
00:05:36,196 --> 0:05:37,666
queue.storefront, and get the

192
00:05:37,666 --> 0:05:38,786
new value for what that

193
00:05:38,786 --> 0:05:39,576
storefront is.

194
00:05:40,056 --> 0:05:41,806
And, again, it's a new

195
00:05:41,806 --> 0:05:42,336
storefront.

196
00:05:42,336 --> 0:05:43,606
So, you want to reload all the

197
00:05:43,606 --> 0:05:46,236
content specific to that new

198
00:05:46,236 --> 0:05:46,736
store front.

199
00:05:46,736 --> 0:05:47,466
You might actually have

200
00:05:47,526 --> 0:05:48,666
different content that you want

201
00:05:48,666 --> 0:05:49,926
to merchandise based on where

202
00:05:49,926 --> 0:05:50,976
that user is in the world.

203
00:05:54,096 --> 0:05:55,776
So, again, call shouldShow.

204
00:05:56,066 --> 0:05:57,796
Determine if you should, and

205
00:05:57,796 --> 0:05:59,316
fetch product information for

206
00:05:59,316 --> 0:05:59,383
it.

207
00:06:00,146 --> 0:06:02,466
So, what happens when you're

208
00:06:02,466 --> 0:06:03,436
doing a purchase?

209
00:06:04,376 --> 0:06:05,306
You've merchandised some

210
00:06:05,306 --> 0:06:07,346
content, the user's about to go

211
00:06:07,346 --> 0:06:08,916
buy it, and normally everything

212
00:06:08,916 --> 0:06:09,576
will go fine.

213
00:06:09,576 --> 0:06:11,286
But, if the user is actually in

214
00:06:11,286 --> 0:06:12,646
a different storefront from what

215
00:06:12,646 --> 0:06:14,076
their device was set to, it is

216
00:06:14,126 --> 0:06:16,366
possible that the payment queue

217
00:06:16,616 --> 0:06:18,336
will change storefronts in the

218
00:06:18,336 --> 0:06:19,476
middle of that transaction.

219
00:06:20,276 --> 0:06:21,146
So, we've given you a

220
00:06:21,146 --> 0:06:22,546
paymentQueue delegate that

221
00:06:22,716 --> 0:06:24,396
allows you to listen to

222
00:06:24,396 --> 0:06:27,006
paymentQueue: shouldContinue: in

223
00:06:27,086 --> 0:06:27,826
newStorefront.

224
00:06:27,926 --> 0:06:29,236
This is your chance to

225
00:06:29,236 --> 0:06:31,406
double-check, should I allow

226
00:06:31,406 --> 0:06:32,636
this purchase to happen in this

227
00:06:32,636 --> 0:06:33,346
new storefront?

228
00:06:33,946 --> 0:06:35,256
And, again use that same

229
00:06:35,496 --> 0:06:37,156
shouldShow functionality, where

230
00:06:37,156 --> 0:06:38,506
you've listed all your product

231
00:06:38,506 --> 0:06:40,426
identifiers, and you know all

232
00:06:40,426 --> 0:06:41,436
the territories that those

233
00:06:41,436 --> 0:06:42,686
products are available in.

234
00:06:43,126 --> 0:06:45,506
Just-- if it returns true, allow

235
00:06:45,506 --> 0:06:46,436
the payment to continue.

236
00:06:47,346 --> 0:06:48,936
To make sure that it's the best

237
00:06:48,936 --> 0:06:51,756
user experience, we want this to

238
00:06:51,756 --> 0:06:53,606
return fast, so you shouldn't

239
00:06:53,606 --> 0:06:55,356
make a server-side call in the

240
00:06:55,356 --> 0:06:56,596
middle of paymentQueue:

241
00:06:56,596 --> 0:06:58,066
shouldContinue: newStorefront.

242
00:06:58,686 --> 0:06:59,876
You should have this information

243
00:06:59,876 --> 0:07:01,556
cached on your device, what's

244
00:06:59,876 --> 0:07:01,556
cached on your device, what's

245
00:07:01,556 --> 0:07:03,276
available in the territories,

246
00:07:03,536 --> 0:07:04,836
ready to go when the payment's

247
00:07:04,836 --> 0:07:05,316
happening.

248
00:07:05,666 --> 0:07:07,196
That way, you can return real

249
00:07:07,196 --> 0:07:08,876
quick, the user can continue

250
00:07:08,876 --> 0:07:10,646
their purchase, or, if you're

251
00:07:10,646 --> 0:07:12,616
returning no, you can actually

252
00:07:13,096 --> 0:07:14,866
inform the user why it's not

253
00:07:14,866 --> 0:07:16,076
valid in the new storefront.

254
00:07:17,296 --> 0:07:19,336
So, as I said, maybe it's not

255
00:07:19,336 --> 0:07:20,616
available in the new territory.

256
00:07:21,186 --> 0:07:23,036
So, what do you do then?

257
00:07:23,286 --> 0:07:25,476
Well, when that happens, in your

258
00:07:25,476 --> 0:07:26,156
paymentQueue:

259
00:07:26,156 --> 0:07:27,726
updatedTransactions delegate

260
00:07:27,726 --> 0:07:29,556
call, we'll return an

261
00:07:29,556 --> 0:07:31,696
SKStoreProductNotAvailable

262
00:07:31,696 --> 0:07:31,996
error.

263
00:07:32,536 --> 0:07:34,416
This will inform you that you've

264
00:07:34,416 --> 0:07:35,846
just told us that you shouldn't

265
00:07:35,846 --> 0:07:37,306
allow this transaction to happen

266
00:07:37,306 --> 0:07:38,156
in that new storefront.

267
00:07:38,336 --> 0:07:39,816
And, here's your chance to

268
00:07:40,036 --> 0:07:41,116
present a dialog.

269
00:07:41,476 --> 0:07:43,906
Or, merchandise some other piece

270
00:07:43,906 --> 0:07:44,836
of content that might be

271
00:07:44,836 --> 0:07:45,626
equivalent in the new

272
00:07:45,626 --> 0:07:46,196
storefront.

273
00:07:46,716 --> 0:07:48,446
Show an alert, update the UI, do

274
00:07:48,446 --> 0:07:50,336
what you need to do right then

275
00:07:51,056 --> 0:07:52,476
and there.

276
00:07:52,676 --> 0:07:54,306
So, that's SKStorefront.

277
00:07:54,806 --> 0:07:57,496
What else are we introducing?

278
00:07:58,276 --> 0:08:03,676
Well, in iOS 11, 11.2 and tvOS

279
00:07:58,276 --> 0:08:03,676
Well, in iOS 11, 11.2 and tvOS

280
00:08:03,676 --> 0:08:07,026
11.2, and macOS 10.13.2, we

281
00:08:07,026 --> 0:08:08,566
introduced app pre-orders.

282
00:08:09,826 --> 0:08:11,286
This has been a great feature

283
00:08:11,286 --> 0:08:13,156
that developers have used all,

284
00:08:13,396 --> 0:08:14,756
you know, around the world, to

285
00:08:14,756 --> 0:08:16,116
actually get interest in their

286
00:08:16,116 --> 0:08:17,386
apps before they're available in

287
00:08:17,386 --> 0:08:17,866
the store.

288
00:08:18,636 --> 0:08:19,676
And, we're excited to announce

289
00:08:19,676 --> 0:08:20,716
that we're introducing that with

290
00:08:20,716 --> 0:08:22,896
watchOS 6.0 this year, so you

291
00:08:22,896 --> 0:08:24,636
can market your apps right to

292
00:08:24,636 --> 0:08:26,336
the Watch, and gain interest

293
00:08:26,336 --> 0:08:28,566
ahead of time, like having them

294
00:08:28,566 --> 0:08:29,816
be available for pre-order.

295
00:08:29,816 --> 0:08:32,025
But, we're also doing one more

296
00:08:32,025 --> 0:08:32,836
thing this year.

297
00:08:33,356 --> 0:08:34,826
And, coming soon, we're actually

298
00:08:34,956 --> 0:08:36,476
going to signal inside the app

299
00:08:36,476 --> 0:08:38,676
receipt, if the app was

300
00:08:38,726 --> 0:08:39,996
purchased as a pre-order.

301
00:08:40,275 --> 0:08:41,996
So, you'll know which of your

302
00:08:41,996 --> 0:08:43,866
customers have actually

303
00:08:44,056 --> 0:08:44,966
pre-ordered the app.

304
00:08:45,566 --> 0:08:46,866
And, you can use that to, you

305
00:08:47,666 --> 0:08:49,586
know, give them great messages,

306
00:08:49,586 --> 0:08:50,386
saying thank you for

307
00:08:50,386 --> 0:08:51,446
pre-ordering my app.

308
00:08:51,446 --> 0:08:52,636
Or, if you want to unlock some

309
00:08:52,636 --> 0:08:54,426
additional content as a thank

310
00:08:54,426 --> 0:08:55,276
you to some of your best

311
00:08:55,276 --> 0:08:56,776
customers, you can use that

312
00:08:56,776 --> 0:08:57,286
information.

313
00:08:57,286 --> 0:08:58,186
That'll be available in the

314
00:08:58,186 --> 0:08:58,606
receipt.

315
00:08:58,906 --> 0:08:59,946
And, the great thing about the

316
00:08:59,946 --> 0:09:01,146
receipt is that this will go

317
00:08:59,946 --> 0:09:01,146
receipt is that this will go

318
00:09:01,336 --> 0:09:04,796
back to iOS 11, 12, all the way

319
00:09:04,796 --> 0:09:05,176
back in time.

320
00:09:05,176 --> 0:09:05,976
It's available in the receipt.

321
00:09:08,066 --> 0:09:10,066
[ Applause ]

322
00:09:10,116 --> 0:09:10,966
So, those are some of the things

323
00:09:10,966 --> 0:09:12,376
that have changed with StoreKit,

324
00:09:12,376 --> 0:09:13,496
and in-app purchases since we

325
00:09:13,496 --> 0:09:14,236
were here last year.

326
00:09:15,006 --> 0:09:16,646
Next up, I'm excited to hand it

327
00:09:16,646 --> 0:09:18,036
off to my colleague Tori, and

328
00:09:18,036 --> 0:09:19,056
she's going to talk all about

329
00:09:19,056 --> 0:09:20,616
Server-to-Server Notifications.

330
00:09:20,826 --> 0:09:20,946
Tori?

331
00:09:21,516 --> 0:09:27,500
[ Applause ]

332
00:09:30,236 --> 0:09:31,506
&gt;&gt; Hi everyone.

333
00:09:31,556 --> 0:09:33,166
My name's Tori, and I'm very

334
00:09:33,166 --> 0:09:34,866
excited to be here today to talk

335
00:09:34,866 --> 0:09:36,036
to you about Server-to-Server

336
00:09:36,036 --> 0:09:36,886
Notifications.

337
00:09:38,136 --> 0:09:39,396
We have several new features

338
00:09:39,396 --> 0:09:40,426
that we want to bring to the

339
00:09:40,426 --> 0:09:41,706
server-to-server notification,

340
00:09:41,706 --> 0:09:43,336
and I want to do an in-depth

341
00:09:43,456 --> 0:09:45,286
talk with you on how you can use

342
00:09:45,286 --> 0:09:46,796
these to effectively monitor

343
00:09:46,796 --> 0:09:47,906
your subscription events.

344
00:09:48,546 --> 0:09:50,286
But, before we get into all

345
00:09:50,286 --> 0:09:52,316
that, let's first take a look at

346
00:09:52,316 --> 0:09:53,356
what Server-to-Server

347
00:09:53,356 --> 0:09:55,096
Notifications are, and how you

348
00:09:55,096 --> 0:09:56,626
can set up your servers to

349
00:09:56,666 --> 0:09:56,936
receive them.

350
00:10:01,596 --> 0:10:02,516
So, Server-to-Server

351
00:10:02,516 --> 0:10:05,276
Notifications are an HTTP POST

352
00:10:05,276 --> 0:10:07,126
we send from our server to

353
00:10:07,226 --> 0:10:08,816
yours, with a JSON body.

354
00:10:09,506 --> 0:10:10,746
You might recognize these by

355
00:10:10,746 --> 0:10:11,676
their previous name,

356
00:10:11,886 --> 0:10:13,596
statusUpdateNotifications.

357
00:10:14,356 --> 0:10:15,976
Server-to-server notifications

358
00:10:16,076 --> 0:10:17,856
are incredibly useful for

359
00:10:17,856 --> 0:10:19,476
getting of-the-moment updates on

360
00:10:19,476 --> 0:10:21,156
your subscription events, and

361
00:10:21,156 --> 0:10:22,656
for using them so win back

362
00:10:22,656 --> 0:10:24,316
customers in cases like

363
00:10:24,316 --> 0:10:25,226
subscription offers.

364
00:10:26,436 --> 0:10:27,526
Once you've determined which

365
00:10:27,526 --> 0:10:28,976
endpoint you want to receive

366
00:10:29,006 --> 0:10:29,676
your Server-to-Server

367
00:10:29,676 --> 0:10:31,686
Notifications at, all you have

368
00:10:31,746 --> 0:10:34,016
to do is return a 200 response

369
00:10:34,366 --> 0:10:36,426
from that endpoint to indicate a

370
00:10:36,426 --> 0:10:38,146
successfully received message.

371
00:10:39,116 --> 0:10:41,206
However, should you not return a

372
00:10:41,206 --> 0:10:43,736
200 response, we will retry up

373
00:10:43,906 --> 0:10:45,716
to three times to resend the

374
00:10:45,716 --> 0:10:46,616
notification to you.

375
00:10:46,616 --> 0:10:49,916
Once you have determined this

376
00:10:49,916 --> 0:10:51,766
endpoint, you first have to set

377
00:10:51,766 --> 0:10:52,956
it up in App Store Connect.

378
00:10:53,456 --> 0:10:54,826
You can find this place on your

379
00:10:54,826 --> 0:10:57,156
app's App Information page, in

380
00:10:57,156 --> 0:10:58,286
the Subscription Status URL

381
00:10:58,286 --> 0:10:58,656
section.

382
00:11:03,086 --> 0:11:04,496
In addition to setting up your

383
00:11:04,496 --> 0:11:05,646
endpoint in App Store Connect,

384
00:11:06,186 --> 0:11:07,336
there are certain security

385
00:11:07,336 --> 0:11:08,426
requirements which the

386
00:11:08,426 --> 0:11:10,406
connection must adhere to in

387
00:11:10,406 --> 0:11:11,726
order for you to successfully

388
00:11:11,726 --> 0:11:13,176
receive these notifications.

389
00:11:13,826 --> 0:11:15,726
Basically, this all sums up to,

390
00:11:16,086 --> 0:11:17,086
the connection must be App

391
00:11:17,286 --> 0:11:19,576
Transport Security, or ATS,

392
00:11:20,186 --> 0:11:20,726
compliant.

393
00:11:21,486 --> 0:11:22,686
Now, this means a few things.

394
00:11:23,516 --> 0:11:25,516
First, the certificate must be

395
00:11:25,516 --> 0:11:27,156
issued by a trusted certificate

396
00:11:27,156 --> 0:11:27,636
authority.

397
00:11:29,196 --> 0:11:30,606
The Transport Layer Security

398
00:11:30,606 --> 0:11:33,386
version, or TLS version, must be

399
00:11:33,386 --> 0:11:34,426
TLS 1.2.

400
00:11:35,516 --> 0:11:37,056
You must use one of the provided

401
00:11:37,126 --> 0:11:39,166
symmetric ciphers, and the

402
00:11:39,166 --> 0:11:41,116
certificate must be signed and

403
00:11:41,116 --> 0:11:42,886
hashed using an algorithm which

404
00:11:42,886 --> 0:11:45,096
is SHA-256 or greater.

405
00:11:46,556 --> 0:11:47,496
I hope with all this

406
00:11:47,496 --> 0:11:48,666
information, you have a better

407
00:11:48,666 --> 0:11:49,636
understanding of what

408
00:11:49,736 --> 0:11:51,126
Server-to-Server Notifications

409
00:11:51,126 --> 0:11:52,816
are, and how you can set them

410
00:11:52,816 --> 0:11:53,106
up.

411
00:11:53,896 --> 0:11:54,576
Should you need more

412
00:11:54,576 --> 0:11:56,026
information, you can look up the

413
00:11:56,026 --> 0:11:56,996
documentation for

414
00:11:56,996 --> 0:11:59,136
statusUpdateNotifications on

415
00:11:59,136 --> 0:11:59,966
developer.apple.com.

416
00:12:05,136 --> 0:12:06,486
So, now that we've looked into

417
00:12:06,486 --> 0:12:07,376
what Server-to-Server

418
00:12:07,376 --> 0:12:08,796
Notifications are, and how you

419
00:12:08,796 --> 0:12:10,376
can receive them, I'm very

420
00:12:10,376 --> 0:12:11,636
excited to talk to you about the

421
00:12:11,636 --> 0:12:12,836
new features and new

422
00:12:12,836 --> 0:12:14,366
notification types we are

423
00:12:14,366 --> 0:12:15,616
bringing to Server-to-Server

424
00:12:15,616 --> 0:12:16,426
Notifications.

425
00:12:17,566 --> 0:12:19,156
So, as we were thinking about

426
00:12:19,156 --> 0:12:20,356
some new features we could add

427
00:12:20,356 --> 0:12:21,936
to the notification, we were

428
00:12:21,936 --> 0:12:23,316
taking a look at the receipt

429
00:12:23,316 --> 0:12:24,496
fields currently in the

430
00:12:24,496 --> 0:12:26,596
notification, latest receipt,

431
00:12:26,776 --> 0:12:27,916
and latest receipt info.

432
00:12:28,726 --> 0:12:30,546
We noticed that these receipts,

433
00:12:30,766 --> 0:12:32,186
while useful, only give you

434
00:12:32,186 --> 0:12:34,056
information about the latest

435
00:12:34,056 --> 0:12:34,806
in-app purchase.

436
00:12:35,446 --> 0:12:36,736
So, we were thinking how much

437
00:12:36,736 --> 0:12:38,446
more useful it would be if we

438
00:12:38,446 --> 0:12:39,516
could give you your entire

439
00:12:39,586 --> 0:12:41,186
subscription history when we

440
00:12:41,236 --> 0:12:42,726
send you the server-to-server

441
00:12:42,726 --> 0:12:43,466
notification.

442
00:12:44,156 --> 0:12:46,136
For this reason, we are bringing

443
00:12:46,136 --> 0:12:47,686
the unified receipt to the

444
00:12:47,686 --> 0:12:48,976
server-to-server notification.

445
00:12:49,516 --> 0:12:52,500
[ Applause ]

446
00:12:56,376 --> 0:12:58,356
So, as a review, the unified

447
00:12:58,356 --> 0:12:59,866
receipt contains the history of

448
00:12:59,916 --> 0:13:01,426
subscription purchases for your

449
00:12:59,916 --> 0:13:01,426
subscription purchases for your

450
00:13:01,426 --> 0:13:02,066
subscription.

451
00:13:02,646 --> 0:13:04,146
Previously, this incredibly

452
00:13:04,146 --> 0:13:06,246
valuable information could only

453
00:13:06,246 --> 0:13:07,266
be obtained through hitting

454
00:13:07,266 --> 0:13:08,166
verifyReceipt.

455
00:13:09,336 --> 0:13:10,796
The two receipt fields in the

456
00:13:10,796 --> 0:13:12,306
notification right now, latest

457
00:13:12,306 --> 0:13:13,956
receipt, and latest receipt info

458
00:13:14,276 --> 0:13:16,026
provide an encoded and decoded

459
00:13:16,026 --> 0:13:17,406
transactional receipt about the

460
00:13:17,456 --> 0:13:18,456
latest in-app purchase.

461
00:13:19,266 --> 0:13:20,466
Starting in the fall, you'll

462
00:13:20,466 --> 0:13:22,266
begin to see one new field in

463
00:13:22,266 --> 0:13:22,986
the server-to-server

464
00:13:22,986 --> 0:13:23,756
notification.

465
00:13:24,586 --> 0:13:25,826
We have decided to call this

466
00:13:26,166 --> 0:13:27,846
unified receipt, and it will

467
00:13:27,846 --> 0:13:29,646
contain almost exactly what you

468
00:13:29,646 --> 0:13:31,016
expect to get from verified

469
00:13:31,016 --> 0:13:31,376
receipt.

470
00:13:31,966 --> 0:13:35,316
With the addition of unified

471
00:13:35,316 --> 0:13:36,506
receipt to the server-to-server

472
00:13:36,506 --> 0:13:38,476
notification, in most cases,

473
00:13:38,476 --> 0:13:39,866
this will make latest receipt

474
00:13:40,036 --> 0:13:41,586
and latest receipt info no

475
00:13:41,586 --> 0:13:42,846
longer needed.

476
00:13:43,496 --> 0:13:46,126
However, there is one important

477
00:13:46,126 --> 0:13:47,656
caveat we must call out here.

478
00:13:48,166 --> 0:13:49,196
This receipt that we are

479
00:13:49,196 --> 0:13:51,346
generating for you is not tied

480
00:13:51,496 --> 0:13:53,256
to a specific install of an app

481
00:13:53,706 --> 0:13:55,586
on a device, like the receipts

482
00:13:55,586 --> 0:13:57,196
you are used to receiving as the

483
00:13:57,196 --> 0:13:57,926
result of a buy.

484
00:13:58,646 --> 0:14:00,496
For this reason, the receipt

485
00:13:58,646 --> 0:14:00,496
For this reason, the receipt

486
00:14:00,496 --> 0:14:02,006
should always be stored on your

487
00:14:02,006 --> 0:14:04,716
server, and never locally on a

488
00:14:04,716 --> 0:14:05,086
device.

489
00:14:05,906 --> 0:14:09,356
So, with that out of the way,

490
00:14:09,446 --> 0:14:10,586
let's take a look at what you

491
00:14:10,586 --> 0:14:11,726
can expect to find in the

492
00:14:11,726 --> 0:14:13,056
unified receipt in the

493
00:14:13,056 --> 0:14:14,496
server-to-server notification.

494
00:14:15,426 --> 0:14:16,736
The first field you will find in

495
00:14:16,836 --> 0:14:18,206
this JSON object is the latest

496
00:14:18,206 --> 0:14:18,596
receipt.

497
00:14:19,136 --> 0:14:20,566
This is an encoded unified

498
00:14:20,566 --> 0:14:21,656
receipt, which we have just

499
00:14:21,656 --> 0:14:23,226
generated for you, and you can

500
00:14:23,226 --> 0:14:25,496
use this to hit verified receipt

501
00:14:25,496 --> 0:14:26,786
later, if you should need it.

502
00:14:27,866 --> 0:14:29,226
You will also find the latest

503
00:14:29,226 --> 0:14:29,936
receipt info.

504
00:14:30,676 --> 0:14:32,036
This contains an array of

505
00:14:32,086 --> 0:14:33,616
subscription purchases for your

506
00:14:33,616 --> 0:14:35,466
subscription, with metadata

507
00:14:35,466 --> 0:14:36,826
about them to help you track

508
00:14:36,926 --> 0:14:37,976
what has been going on with your

509
00:14:37,976 --> 0:14:38,506
subscriber.

510
00:14:39,706 --> 0:14:40,976
You will also find the pending

511
00:14:40,976 --> 0:14:41,666
renewal info.

512
00:14:42,146 --> 0:14:43,766
This contains information about

513
00:14:43,766 --> 0:14:45,106
the upcoming renewal for your

514
00:14:45,106 --> 0:14:46,976
subscription, such as if the

515
00:14:46,976 --> 0:14:48,336
customer is in a price increase

516
00:14:48,336 --> 0:14:49,776
flow, or they have entered a

517
00:14:49,776 --> 0:14:50,846
billing retry period.

518
00:14:50,846 --> 0:14:53,296
We will also include the status

519
00:14:53,296 --> 0:14:54,556
of the receipt, and the

520
00:14:54,556 --> 0:14:55,626
environment the receipt was

521
00:14:55,626 --> 0:14:57,756
produced in, either sandbox, or

522
00:14:57,756 --> 0:14:58,266
production.

523
00:14:59,416 --> 0:15:00,906
We chose to name the fields this

524
00:14:59,416 --> 0:15:00,906
We chose to name the fields this

525
00:15:00,906 --> 0:15:02,236
way because this mirrors what

526
00:15:02,236 --> 0:15:03,476
you expect to receive from

527
00:15:03,476 --> 0:15:04,276
verify receipt.

528
00:15:04,766 --> 0:15:06,526
So, hopefully you can reuse your

529
00:15:06,526 --> 0:15:08,106
parsing logic there to make the

530
00:15:08,106 --> 0:15:10,116
transition easier here.

531
00:15:11,666 --> 0:15:14,196
However, latest receipt info

532
00:15:14,196 --> 0:15:15,956
will be limited to the 100

533
00:15:15,956 --> 0:15:17,296
latest in-app purchases.

534
00:15:17,836 --> 0:15:18,936
So, should you need more

535
00:15:18,936 --> 0:15:20,366
information that this, you can

536
00:15:20,366 --> 0:15:22,286
always hit verify receipt with

537
00:15:22,286 --> 0:15:24,006
the provided encoded receipt.

538
00:15:25,436 --> 0:15:26,256
So, let's look at the

539
00:15:26,256 --> 0:15:27,626
notification types we currently

540
00:15:27,626 --> 0:15:27,886
have.

541
00:15:28,446 --> 0:15:29,466
There are currently four

542
00:15:29,466 --> 0:15:30,686
existing notification types.

543
00:15:30,776 --> 0:15:32,516
INITIAL BUY, INTERACTIVE

544
00:15:32,516 --> 0:15:34,046
RENEWAL, DID CHANGE RENEWAL

545
00:15:34,046 --> 0:15:35,596
PREFERENCES, and CANCEL.

546
00:15:35,906 --> 0:15:37,346
And, we are adding four more.

547
00:15:38,386 --> 0:15:40,326
DID CHANGE RENEWAL STATUS, DID

548
00:15:40,326 --> 0:15:43,196
FAIL TO RENEW, DID RECOVER, and

549
00:15:43,196 --> 0:15:43,976
PRICE INCREASE CONSENT.

550
00:15:44,516 --> 0:15:49,500
[ Applause ]

551
00:15:52,226 --> 0:15:53,546
Now, let's take a quick look at

552
00:15:53,546 --> 0:15:54,406
each of those four new

553
00:15:54,406 --> 0:15:55,656
notification types, so we can

554
00:15:55,656 --> 0:15:57,186
get an idea of why they are

555
00:15:57,286 --> 0:15:57,526
sent.

556
00:15:59,016 --> 0:16:00,796
First, let's look at DID CHANGE

557
00:15:59,016 --> 0:16:00,796
First, let's look at DID CHANGE

558
00:16:00,796 --> 0:16:01,506
RENEWAL STATUS.

559
00:16:01,956 --> 0:16:03,056
This is sent when the user

560
00:16:03,056 --> 0:16:05,106
toggles auto-renew on or off.

561
00:16:05,776 --> 0:16:06,986
You should actually be receiving

562
00:16:06,986 --> 0:16:08,606
this notification right now, so

563
00:16:08,606 --> 0:16:09,436
make sure that you're looking

564
00:16:09,436 --> 0:16:10,506
for it if you are currently

565
00:16:10,506 --> 0:16:11,516
using our Server-to-Server

566
00:16:11,516 --> 0:16:12,256
Notifications.

567
00:16:12,866 --> 0:16:14,626
We will soon be adding a

568
00:16:14,626 --> 0:16:15,906
notification type called DID

569
00:16:15,906 --> 0:16:16,396
FAIL TO RENEW.

570
00:16:16,396 --> 0:16:18,696
We will send this to you when a

571
00:16:18,696 --> 0:16:20,436
subscription fails auto-renew at

572
00:16:20,436 --> 0:16:21,876
the first attempt to renew in a

573
00:16:21,876 --> 0:16:22,766
subscription period.

574
00:16:22,766 --> 0:16:24,866
You will start to see this

575
00:16:24,866 --> 0:16:26,206
notification in the fall.

576
00:16:26,816 --> 0:16:29,656
Hand-in-hand with DID FAIL TO

577
00:16:29,656 --> 0:16:31,006
RENEW comes DID RECOVER.

578
00:16:31,686 --> 0:16:33,206
DID RECOVER will be sent when we

579
00:16:33,206 --> 0:16:34,616
recover billing of your

580
00:16:34,616 --> 0:16:36,386
subscription during the billing

581
00:16:36,386 --> 0:16:37,326
retry period.

582
00:16:37,896 --> 0:16:39,546
This will also start to appear

583
00:16:39,546 --> 0:16:40,036
in the fall.

584
00:16:40,576 --> 0:16:42,156
Should you receive DID RECOVER,

585
00:16:42,406 --> 0:16:43,366
you should have recently

586
00:16:43,366 --> 0:16:44,906
received DID FAIL TO RENEW.

587
00:16:44,996 --> 0:16:46,416
And, you can know that billing

588
00:16:46,416 --> 0:16:47,746
of your subscription was

589
00:16:47,776 --> 0:16:48,726
successfully recovered.

590
00:16:49,656 --> 0:16:50,906
If you are currently using our

591
00:16:50,986 --> 0:16:52,366
Server-to-Server Notifications,

592
00:16:52,836 --> 0:16:54,016
you may notice that we will be

593
00:16:54,066 --> 0:16:55,536
sending DID RECOVER when we

594
00:16:55,536 --> 0:16:57,116
currently send our renewal

595
00:16:57,116 --> 0:16:58,066
notification type.

596
00:16:58,596 --> 0:17:01,516
The plan is for DID RECOVER to

597
00:16:58,596 --> 0:17:01,516
The plan is for DID RECOVER to

598
00:17:01,516 --> 0:17:03,326
eventually replace RENEWAL as it

599
00:17:03,436 --> 0:17:05,326
is a bit more aptly named, but

600
00:17:05,326 --> 0:17:06,576
for a period, when we start

601
00:17:06,576 --> 0:17:07,826
sending DID RECOVER, we will

602
00:17:07,876 --> 0:17:09,856
send you both DID RECOVER and

603
00:17:09,856 --> 0:17:11,536
RENEWAL to give you time to

604
00:17:11,536 --> 0:17:14,726
adjust to the change.

605
00:17:14,726 --> 0:17:16,116
Finally, we're adding a fourth

606
00:17:16,116 --> 0:17:17,646
notification type, PRICE

607
00:17:17,646 --> 0:17:18,435
INCREASE CONSENT.

608
00:17:19,195 --> 0:17:20,796
PRICE INCREASE CONSENT will be

609
00:17:20,796 --> 0:17:22,556
sent to you when we detect that

610
00:17:22,556 --> 0:17:24,116
one of your subscribers has

611
00:17:24,116 --> 0:17:25,566
entered a price increase flow,

612
00:17:25,976 --> 0:17:27,476
which requires their consent in

613
00:17:27,476 --> 0:17:28,656
order for them to continue

614
00:17:28,656 --> 0:17:29,786
renewing their subscription.

615
00:17:30,696 --> 0:17:32,296
With this notification, comes a

616
00:17:32,296 --> 0:17:33,946
new field in the JSON payload,

617
00:17:34,276 --> 0:17:35,656
price increase effective date.

618
00:17:36,356 --> 0:17:37,966
This is the date by which the

619
00:17:37,966 --> 0:17:39,606
customer must agree to the price

620
00:17:39,606 --> 0:17:40,946
increase in order for them to

621
00:17:40,946 --> 0:17:41,786
continue renewing.

622
00:17:42,426 --> 0:17:43,856
You may also expect to see this

623
00:17:43,856 --> 0:17:44,976
notification in the fall.

624
00:17:49,656 --> 0:17:50,886
So now that we've taken a look

625
00:17:51,066 --> 0:17:52,336
into what's new in

626
00:17:52,376 --> 0:17:53,786
Server-to-Server Notifications,

627
00:17:54,216 --> 0:17:55,506
I'm really excited to talk to

628
00:17:55,506 --> 0:17:56,946
you about how you can handle all

629
00:17:56,946 --> 0:17:58,336
eight of our notification types

630
00:17:58,396 --> 0:18:00,216
so you are getting the most out

631
00:17:58,396 --> 0:18:00,216
so you are getting the most out

632
00:18:00,216 --> 0:18:01,816
of each notification when you

633
00:18:01,816 --> 0:18:02,286
receive it.

634
00:18:03,606 --> 0:18:05,796
So, first, let's take a quick

635
00:18:05,856 --> 0:18:07,046
overview of our existing

636
00:18:07,046 --> 0:18:07,926
notification types.

637
00:18:08,626 --> 0:18:10,486
INITIAL BUY, INTERACTIVE

638
00:18:10,486 --> 0:18:14,216
RENEWAL, DID CHANGE RENEWAL

639
00:18:14,216 --> 0:18:15,846
PREFERENCES, and CANCEL.

640
00:18:16,996 --> 0:18:18,136
We're going to take a moment to

641
00:18:18,136 --> 0:18:19,776
take a deep-dive into each of

642
00:18:19,776 --> 0:18:21,446
these notification types, but

643
00:18:21,446 --> 0:18:23,466
before we do that, I want you to

644
00:18:23,466 --> 0:18:26,646
notice one trend up here on this

645
00:18:26,646 --> 0:18:26,896
chart.

646
00:18:27,706 --> 0:18:30,096
You'll notice that in the JSON

647
00:18:30,096 --> 0:18:31,456
payload, we're asking you to

648
00:18:31,456 --> 0:18:32,356
look for the original

649
00:18:32,356 --> 0:18:33,926
transaction id for each

650
00:18:33,926 --> 0:18:34,826
notification type.

651
00:18:35,636 --> 0:18:37,046
This is because the original

652
00:18:37,046 --> 0:18:38,746
transaction id is considered a

653
00:18:38,746 --> 0:18:40,316
unique identifier for your

654
00:18:40,316 --> 0:18:40,946
subscription.

655
00:18:41,336 --> 0:18:42,916
And, keeping track of this will

656
00:18:42,916 --> 0:18:44,566
help you to link subsequent

657
00:18:44,566 --> 0:18:45,986
events back to the initial

658
00:18:45,986 --> 0:18:47,366
purchase of your subscription.

659
00:18:47,966 --> 0:18:50,856
Now, let's imagine for a moment

660
00:18:50,856 --> 0:18:51,906
that you have a potential

661
00:18:51,906 --> 0:18:52,516
subscriber.

662
00:18:53,096 --> 0:18:54,666
Let's call him John, and he is

663
00:18:54,736 --> 0:18:56,226
interested in purchasing your

664
00:18:56,226 --> 0:18:56,846
subscription.

665
00:18:57,796 --> 0:18:58,906
Let's take a walk through

666
00:18:58,906 --> 0:19:00,226
decisions that John makes

667
00:18:58,906 --> 0:19:00,226
decisions that John makes

668
00:19:00,506 --> 0:19:02,236
concerning his subscription, and

669
00:19:02,236 --> 0:19:03,396
what notifications you will

670
00:19:03,396 --> 0:19:03,966
receive along the way.

671
00:19:09,536 --> 0:19:11,296
So, the first notification type

672
00:19:11,426 --> 0:19:12,776
you can expect to receive for a

673
00:19:12,776 --> 0:19:14,326
subscription is the INITIAL BUY.

674
00:19:15,156 --> 0:19:16,836
When John first purchases his

675
00:19:16,836 --> 0:19:18,116
subscription, we will send you

676
00:19:18,116 --> 0:19:19,446
an INITIAL BUY notification.

677
00:19:20,016 --> 0:19:21,106
Upon receiving this

678
00:19:21,106 --> 0:19:23,796
notification, you can update the

679
00:19:23,996 --> 0:19:25,246
customer status to something

680
00:19:25,246 --> 0:19:27,136
like "active" or "subscribed" on

681
00:19:27,136 --> 0:19:29,026
your server, and provide service

682
00:19:29,026 --> 0:19:29,826
for the newly purchased

683
00:19:29,826 --> 0:19:30,386
subscription.

684
00:19:31,426 --> 0:19:33,336
In this notification type, there

685
00:19:33,336 --> 0:19:34,646
are four fields that I want you

686
00:19:34,646 --> 0:19:36,266
to look for in the JSON payload.

687
00:19:37,216 --> 0:19:38,366
The first of these is the

688
00:19:38,366 --> 0:19:39,116
purchase date.

689
00:19:39,676 --> 0:19:40,746
This is in milliseconds

690
00:19:40,946 --> 0:19:41,956
since epoch, and it will

691
00:19:41,956 --> 0:19:43,676
tell you the exact date and time

692
00:19:43,856 --> 0:19:45,206
that your customer has purchased

693
00:19:45,206 --> 0:19:45,906
your subscription.

694
00:19:46,946 --> 0:19:48,046
You should next look for the

695
00:19:48,046 --> 0:19:49,366
original transaction id.

696
00:19:49,796 --> 0:19:51,626
As I mentioned, this is a unique

697
00:19:51,626 --> 0:19:52,836
identifier for your

698
00:19:52,836 --> 0:19:54,556
subscription, and keeping track

699
00:19:54,556 --> 0:19:56,086
of this now will let you link

700
00:19:56,196 --> 0:19:57,926
subsequent notifications back to

701
00:19:57,926 --> 0:20:00,166
this initial buy.

702
00:19:57,926 --> 0:20:00,166
this initial buy.

703
00:20:00,416 --> 0:20:01,536
You should also check for the

704
00:20:01,536 --> 0:20:02,976
web order line item id.

705
00:20:03,686 --> 0:20:05,256
This is considered a unique

706
00:20:05,256 --> 0:20:06,926
identifier for each subscription

707
00:20:06,926 --> 0:20:08,596
period and should you need to

708
00:20:08,596 --> 0:20:10,036
hit verify receipt after

709
00:20:10,036 --> 0:20:11,616
receiving this notification, it

710
00:20:11,616 --> 0:20:13,536
will link this notification to

711
00:20:13,536 --> 0:20:15,246
an entry in the verifyReceipt

712
00:20:15,246 --> 0:20:15,436
array.

713
00:20:16,856 --> 0:20:18,536
Finally, you should look for the

714
00:20:18,606 --> 0:20:19,306
product id.

715
00:20:19,916 --> 0:20:21,516
The product id will tell you

716
00:20:21,516 --> 0:20:23,466
exactly which product your new

717
00:20:23,466 --> 0:20:25,636
customer has subscribed to.

718
00:20:26,416 --> 0:20:28,246
So, after John has been using

719
00:20:28,246 --> 0:20:30,056
his subscription for a while, he

720
00:20:30,056 --> 0:20:31,566
decides that he wants to upgrade

721
00:20:31,566 --> 0:20:33,066
his service to a higher tier.

722
00:20:33,956 --> 0:20:35,436
We consider this a renewal in

723
00:20:35,436 --> 0:20:37,136
the foreground, so we will send

724
00:20:37,136 --> 0:20:38,436
you an INTERACTIVE RENEWAL

725
00:20:38,436 --> 0:20:40,166
notification type.

726
00:20:40,756 --> 0:20:43,656
Because an upgrade gives the

727
00:20:43,656 --> 0:20:45,656
customer access to the higher

728
00:20:45,746 --> 0:20:47,396
tier immediately, we will also

729
00:20:47,396 --> 0:20:49,146
send you a CANCEL notification

730
00:20:49,146 --> 0:20:50,206
type for the lower tier

731
00:20:50,206 --> 0:20:51,606
subscription, which we have

732
00:20:51,606 --> 0:20:52,096
canceled.

733
00:20:53,116 --> 0:20:54,936
However, should a customer

734
00:20:54,936 --> 0:20:56,706
resubscribe after churn, you

735
00:20:56,706 --> 0:20:58,646
will receive only an INTERACTIVE

736
00:20:58,646 --> 0:21:00,056
RENEWAL notification type.

737
00:20:58,646 --> 0:21:00,056
RENEWAL notification type.

738
00:21:00,686 --> 0:21:03,406
In this notification, there are

739
00:21:03,406 --> 0:21:04,926
four more fields you should look

740
00:21:04,926 --> 0:21:06,346
for in the JSON payload.

741
00:21:09,206 --> 0:21:10,416
The first of these will be the

742
00:21:10,416 --> 0:21:11,106
purchase date.

743
00:21:11,496 --> 0:21:12,906
This will tell you the exact

744
00:21:13,016 --> 0:21:14,756
date and time that your customer

745
00:21:15,176 --> 0:21:16,346
either resubscribed to this

746
00:21:16,346 --> 0:21:17,806
subscription or upgraded their

747
00:21:17,806 --> 0:21:18,236
service.

748
00:21:19,486 --> 0:21:20,826
You should again be checking for

749
00:21:20,826 --> 0:21:23,016
the original transaction id to

750
00:21:23,016 --> 0:21:24,266
link this back to the original

751
00:21:24,266 --> 0:21:27,596
subscription, as well as the web

752
00:21:27,596 --> 0:21:28,796
order line item id.

753
00:21:29,436 --> 0:21:30,976
This is the unique identifier

754
00:21:30,976 --> 0:21:32,146
for each subscription period,

755
00:21:32,146 --> 0:21:33,436
and it will help you to link

756
00:21:33,436 --> 0:21:35,576
this notification to an entry in

757
00:21:35,576 --> 0:21:36,666
the verifyReceipt array.

758
00:21:38,266 --> 0:21:40,066
Finally, check for the product

759
00:21:40,066 --> 0:21:40,266
id.

760
00:21:40,806 --> 0:21:42,146
This will tell you the exact

761
00:21:42,146 --> 0:21:43,826
product that your customer has

762
00:21:43,826 --> 0:21:45,466
re-subscribed to or upgraded

763
00:21:45,466 --> 0:21:46,096
their service to.

764
00:21:46,096 --> 0:21:48,766
A little later down the line,

765
00:21:49,056 --> 0:21:51,216
John decides to downgrade his

766
00:21:51,246 --> 0:21:52,926
subscription to a more basic

767
00:21:52,926 --> 0:21:53,216
tier.

768
00:21:53,846 --> 0:21:55,736
In this case, we send you a DID

769
00:21:55,736 --> 0:21:57,276
CHANGE RENEWAL PREFERENCES

770
00:21:57,276 --> 0:21:58,216
notification type.

771
00:21:59,036 --> 0:22:00,056
Upon receiving this

772
00:21:59,036 --> 0:22:00,056
Upon receiving this

773
00:22:00,056 --> 0:22:01,756
notification, you can update the

774
00:22:01,756 --> 0:22:03,256
customer's subscription status

775
00:22:03,356 --> 0:22:05,186
on your server to a more basic

776
00:22:05,186 --> 0:22:05,366
tier.

777
00:22:05,366 --> 0:22:08,016
In this notification type, there

778
00:22:08,016 --> 0:22:09,766
are two fields that I want you

779
00:22:09,766 --> 0:22:11,846
to look out for.

780
00:22:12,046 --> 0:22:13,416
The first of these is the auto

781
00:22:13,416 --> 0:22:14,506
renew product id.

782
00:22:15,136 --> 0:22:16,766
Because a subscription downgrade

783
00:22:16,766 --> 0:22:18,166
does not take place until the

784
00:22:18,166 --> 0:22:19,846
end of the subscription period,

785
00:22:20,376 --> 0:22:22,096
this will tell you exactly which

786
00:22:22,096 --> 0:22:23,446
product your customer will

787
00:22:23,446 --> 0:22:24,976
auto-renew at when it comes time

788
00:22:24,976 --> 0:22:25,556
for renewal.

789
00:22:26,136 --> 0:22:28,906
You should again be checking for

790
00:22:28,906 --> 0:22:30,946
the original transaction id to

791
00:22:30,946 --> 0:22:32,156
link this notification back to

792
00:22:32,156 --> 0:22:32,976
the original subscription.

793
00:22:38,086 --> 0:22:39,616
Now, unfortunately, a little

794
00:22:39,616 --> 0:22:41,216
later, John gets on the phone

795
00:22:41,216 --> 0:22:42,526
with customer support and

796
00:22:42,526 --> 0:22:43,826
decides to cancel his

797
00:22:43,826 --> 0:22:44,416
subscription.

798
00:22:45,456 --> 0:22:46,896
In this case, we will send you a

799
00:22:46,896 --> 0:22:48,586
CANCEL notification type.

800
00:22:49,566 --> 0:22:51,036
As I mentioned earlier, when a

801
00:22:51,036 --> 0:22:52,216
customer upgrades their

802
00:22:52,216 --> 0:22:53,686
subscription, you will also

803
00:22:53,686 --> 0:22:55,236
receive a CANCEL plus an

804
00:22:55,236 --> 0:22:56,816
INTERACTIVE RENEWAL, where the

805
00:22:56,816 --> 0:22:58,756
CANCEL signifies the lower tier

806
00:22:58,756 --> 0:23:00,376
subscription which was canceled.

807
00:22:58,756 --> 0:23:00,376
subscription which was canceled.

808
00:23:01,656 --> 0:23:03,046
In this notification type, I

809
00:23:03,046 --> 0:23:04,026
want you to look for three

810
00:23:04,026 --> 0:23:04,346
fields.

811
00:23:05,376 --> 0:23:07,236
First, you should look for the

812
00:23:07,236 --> 0:23:08,126
cancellation date.

813
00:23:08,446 --> 0:23:09,506
This will tell you the exact

814
00:23:09,596 --> 0:23:11,176
date and time that your customer

815
00:23:11,176 --> 0:23:12,426
decided to cancel their

816
00:23:12,426 --> 0:23:13,006
subscription.

817
00:23:14,246 --> 0:23:15,436
You should still be looking for

818
00:23:15,436 --> 0:23:17,066
the original transaction id to

819
00:23:17,066 --> 0:23:18,216
link this back to the original

820
00:23:18,216 --> 0:23:21,126
subscription purchase, as well

821
00:23:21,126 --> 0:23:22,356
as the product id, to know

822
00:23:22,356 --> 0:23:24,046
exactly which product your

823
00:23:24,046 --> 0:23:24,976
customer has canceled.

824
00:23:30,516 --> 0:23:31,916
So, now that we've looked at all

825
00:23:31,916 --> 0:23:33,166
of our existing notification

826
00:23:33,166 --> 0:23:34,466
types, let's give the same

827
00:23:34,466 --> 0:23:36,566
treatment to the four new

828
00:23:36,566 --> 0:23:38,036
notification types that I

829
00:23:38,036 --> 0:23:38,956
introduced earlier.

830
00:23:40,036 --> 0:23:43,266
These are DID CHANGE RENEWAL

831
00:23:43,266 --> 0:23:45,726
STATUS, DID FAIL TO RENEW, DID

832
00:23:45,726 --> 0:23:47,666
RECOVER, and PRICE INCREASE

833
00:23:47,666 --> 0:23:48,096
CONSENT.

834
00:23:49,426 --> 0:23:50,906
In these notification types, you

835
00:23:51,026 --> 0:23:52,316
still want to be looking for the

836
00:23:52,316 --> 0:23:54,556
original transaction id in each

837
00:23:54,606 --> 0:23:55,696
of the JSON payloads.

838
00:23:56,716 --> 0:23:58,296
As I mentioned earlier, this is

839
00:23:58,296 --> 0:23:59,586
because it is a unique

840
00:23:59,586 --> 0:24:01,146
identifier for your subscription

841
00:23:59,586 --> 0:24:01,146
identifier for your subscription

842
00:24:01,146 --> 0:24:03,106
and will help you to link all of

843
00:24:03,106 --> 0:24:04,486
your notifications together.

844
00:24:05,896 --> 0:24:07,396
Now, let's revisit John.

845
00:24:08,746 --> 0:24:10,166
One day he is scrolling through

846
00:24:10,166 --> 0:24:11,686
his managed subscriptions page,

847
00:24:11,886 --> 0:24:13,506
and decides to turn auto-renew

848
00:24:13,506 --> 0:24:15,126
back on for your subscription.

849
00:24:15,926 --> 0:24:17,596
In this case, we will send you a

850
00:24:17,596 --> 0:24:19,136
DID CHANGE RENEWAL STATUS

851
00:24:19,426 --> 0:24:20,296
notification type.

852
00:24:21,256 --> 0:24:22,366
You will also receive this

853
00:24:22,366 --> 0:24:24,146
notification if a customer

854
00:24:24,146 --> 0:24:25,986
decides to turn auto-renew off.

855
00:24:27,206 --> 0:24:28,116
Upon receiving this

856
00:24:28,116 --> 0:24:30,456
notification, you can update the

857
00:24:30,456 --> 0:24:32,196
customer subscription status on

858
00:24:32,196 --> 0:24:34,476
your end to reflect the changes.

859
00:24:35,766 --> 0:24:37,186
You can optionally deploy

860
00:24:37,186 --> 0:24:39,086
retention strategies to keep the

861
00:24:39,086 --> 0:24:40,396
customer, if you see that they

862
00:24:40,396 --> 0:24:41,556
have turned auto-renew off.

863
00:24:43,176 --> 0:24:44,586
In this notification type, there

864
00:24:44,586 --> 0:24:46,096
are four more fields that you

865
00:24:46,096 --> 0:24:47,376
should look for and mark down.

866
00:24:48,416 --> 0:24:49,736
The first of these is the auto

867
00:24:49,736 --> 0:24:51,066
renew status change date.

868
00:24:51,516 --> 0:24:52,896
This tells you the exact date

869
00:24:52,896 --> 0:24:54,376
and time that your customer's

870
00:24:54,376 --> 0:24:55,606
auto-renew status changed.

871
00:24:57,126 --> 0:24:58,316
You should check for auto-renew

872
00:24:58,406 --> 0:24:58,816
status.

873
00:24:59,386 --> 0:25:00,896
This will tell you the direction

874
00:24:59,386 --> 0:25:00,896
This will tell you the direction

875
00:25:00,946 --> 0:25:02,106
of the auto-renew toggle.

876
00:25:02,736 --> 0:25:04,076
Should you see the auto renew

877
00:25:04,076 --> 0:25:06,476
status has a value of true, you

878
00:25:06,476 --> 0:25:07,866
can know that your customer has

879
00:25:07,866 --> 0:25:10,436
turned auto-renew back on, and

880
00:25:10,436 --> 0:25:12,446
intends to continue buying your

881
00:25:12,446 --> 0:25:12,976
subscription.

882
00:25:13,576 --> 0:25:15,986
You should again be checking for

883
00:25:15,986 --> 0:25:17,846
the original transaction id, to

884
00:25:17,846 --> 0:25:19,136
link this back to the original

885
00:25:19,206 --> 0:25:21,736
subscription purchase, as well

886
00:25:21,736 --> 0:25:23,166
as the product id, to see

887
00:25:23,166 --> 0:25:24,396
exactly which product your

888
00:25:24,436 --> 0:25:26,076
customer has turned auto-renew

889
00:25:26,126 --> 0:25:26,976
on or off for.

890
00:25:31,416 --> 0:25:33,376
As we are trying to bill John

891
00:25:33,376 --> 0:25:34,546
for his subscription during the

892
00:25:34,546 --> 0:25:36,126
auto-renew period, we

893
00:25:36,126 --> 0:25:37,566
unfortunately encounter a

894
00:25:37,566 --> 0:25:38,196
billing error.

895
00:25:38,726 --> 0:25:40,176
In this case, we will send you a

896
00:25:40,176 --> 0:25:41,856
DID FAIL TO RENEW on our first

897
00:25:41,856 --> 0:25:43,506
attempt to renew for that

898
00:25:43,506 --> 0:25:44,406
subscription period.

899
00:25:45,326 --> 0:25:46,276
Upon receiving this

900
00:25:46,276 --> 0:25:48,256
notification, you can optionally

901
00:25:48,256 --> 0:25:50,066
choose to suspend service for

902
00:25:50,066 --> 0:25:50,716
your customer.

903
00:25:51,856 --> 0:25:53,446
You can also update the customer

904
00:25:53,446 --> 0:25:54,796
subscription status to something

905
00:25:54,796 --> 0:25:56,236
like "active" or "billing

906
00:25:56,236 --> 0:25:58,126
re-try," depending on the value

907
00:25:58,126 --> 0:25:59,296
of the fields you see in the

908
00:25:59,296 --> 0:25:59,926
JSON payload.

909
00:26:00,686 --> 0:26:01,666
So now, let's take a look at

910
00:26:01,666 --> 0:26:01,966
that.

911
00:26:02,696 --> 0:26:03,656
The first field you should be

912
00:26:03,656 --> 0:26:05,366
looking for here is is in

913
00:26:05,366 --> 0:26:06,746
billing retry period.

914
00:26:07,346 --> 0:26:09,556
This has a value of 0 or 1, and

915
00:26:09,556 --> 0:26:11,196
will tell you if we are actively

916
00:26:11,196 --> 0:26:12,546
trying to recover billing of

917
00:26:12,546 --> 0:26:13,666
this subscription for you.

918
00:26:14,466 --> 0:26:15,676
Should you see that this field

919
00:26:15,676 --> 0:26:17,696
has a value of 1, you can know

920
00:26:17,696 --> 0:26:19,156
that we are trying to recover

921
00:26:19,156 --> 0:26:20,676
billing of your subscription in

922
00:26:20,676 --> 0:26:21,926
the billing re-try period.

923
00:26:23,436 --> 0:26:24,866
You should still be checking for

924
00:26:24,866 --> 0:26:26,936
the original transaction id to

925
00:26:26,936 --> 0:26:28,096
link this back to the original

926
00:26:28,096 --> 0:26:30,606
subscription, as well as the

927
00:26:30,606 --> 0:26:31,446
expires date.

928
00:26:31,856 --> 0:26:33,266
This will tell you the exact

929
00:26:33,386 --> 0:26:35,476
date and time that we attempted

930
00:26:35,476 --> 0:26:37,496
to auto-renew your subscription,

931
00:26:37,636 --> 0:26:39,956
and it failed.

932
00:26:40,146 --> 0:26:41,736
Fortunately, during the billing

933
00:26:41,736 --> 0:26:44,166
re-try period, the billing issue

934
00:26:44,166 --> 0:26:45,686
with John's subscription was

935
00:26:45,686 --> 0:26:46,956
resolved, and we are able to

936
00:26:46,956 --> 0:26:47,976
recover billing of his

937
00:26:47,976 --> 0:26:48,566
subscription.

938
00:26:49,116 --> 0:26:50,956
In this case, we send you a DID

939
00:26:50,996 --> 0:26:52,606
RECOVER notification type.

940
00:26:52,606 --> 0:26:55,906
As a reminder, DID RECOVER is

941
00:26:55,906 --> 0:26:57,356
replacing our RENEWAL

942
00:26:57,356 --> 0:26:58,746
notification type, which we

943
00:26:58,746 --> 0:27:00,276
currently send at this time.

944
00:26:58,746 --> 0:27:00,276
currently send at this time.

945
00:27:01,656 --> 0:27:03,266
Upon receiving this notification

946
00:27:03,266 --> 0:27:05,006
type, you can restore service

947
00:27:05,206 --> 0:27:06,396
for the recovered subscription,

948
00:27:06,396 --> 0:27:08,496
and update your customer's

949
00:27:08,496 --> 0:27:09,896
status to something like

950
00:27:09,896 --> 0:27:11,246
"active" or "subscribed," or

951
00:27:11,246 --> 0:27:12,986
whatever you use to denote an

952
00:27:13,056 --> 0:27:13,906
active subscriber.

953
00:27:15,036 --> 0:27:16,706
In this notification type, there

954
00:27:16,706 --> 0:27:17,906
are a few more fields that I

955
00:27:17,906 --> 0:27:18,846
want you to look for in the

956
00:27:18,886 --> 0:27:19,256
payload.

957
00:27:20,656 --> 0:27:21,646
You should first check for the

958
00:27:21,696 --> 0:27:22,416
purchase date.

959
00:27:22,416 --> 0:27:24,276
This will tell you exactly when

960
00:27:24,396 --> 0:27:25,926
we were able to recover billing

961
00:27:25,926 --> 0:27:26,826
of this subscription.

962
00:27:28,176 --> 0:27:29,626
You should again check for the

963
00:27:29,626 --> 0:27:32,106
original transaction id, as this

964
00:27:32,106 --> 0:27:33,876
will tell you exactly which

965
00:27:33,876 --> 0:27:35,146
subscription we recovered

966
00:27:35,146 --> 0:27:36,976
billing for, as it is the unique

967
00:27:36,976 --> 0:27:38,616
identifier for the subscription.

968
00:27:40,106 --> 0:27:41,826
Finally, look for the expires

969
00:27:41,856 --> 0:27:42,196
date.

970
00:27:42,576 --> 0:27:44,086
This will tell you the date and

971
00:27:44,126 --> 0:27:45,906
time that this new subscription

972
00:27:45,906 --> 0:27:47,106
period will expire.

973
00:27:47,466 --> 0:27:48,326
And, you can expect us to

974
00:27:48,326 --> 0:27:48,976
attempt to auto-renew again.

975
00:27:54,016 --> 0:27:56,126
Now, let's suppose that you, the

976
00:27:56,126 --> 0:27:57,946
developer, decide to increase

977
00:27:57,976 --> 0:27:59,296
the price of your subscription.

978
00:28:00,036 --> 0:28:01,076
When we check for a price

979
00:28:01,076 --> 0:28:03,006
increase for a subscription, 7

980
00:28:03,006 --> 0:28:04,066
days before a weekly

981
00:28:04,066 --> 0:28:05,856
subscription renewal, 10 days

982
00:28:05,896 --> 0:28:07,076
before a monthly subscription

983
00:28:07,076 --> 0:28:09,126
renewal, and 30 days before an

984
00:28:09,126 --> 0:28:10,936
annual subscription renewal, and

985
00:28:10,936 --> 0:28:12,166
we see that you wish to raise

986
00:28:12,166 --> 0:28:14,006
the price, we will send you a

987
00:28:14,106 --> 0:28:15,306
PRICE INCREASE CONSENT

988
00:28:15,626 --> 0:28:17,606
notification for your customer.

989
00:28:18,786 --> 0:28:19,766
Upon receiving this

990
00:28:19,766 --> 0:28:21,446
notification, you can update the

991
00:28:21,446 --> 0:28:23,146
user status on your end to

992
00:28:23,146 --> 0:28:24,466
something like "price increase."

993
00:28:25,316 --> 0:28:27,056
And, optionally, you can deploy

994
00:28:27,056 --> 0:28:28,656
in-app messaging to prompt your

995
00:28:28,656 --> 0:28:30,166
customer to consent to the price

996
00:28:30,166 --> 0:28:30,556
increase.

997
00:28:31,726 --> 0:28:34,116
Note that we will also email and

998
00:28:34,116 --> 0:28:35,526
send push notifications to the

999
00:28:35,526 --> 0:28:36,926
customer to prompt them to

1000
00:28:36,926 --> 0:28:38,176
consent to this price increase.

1001
00:28:38,816 --> 0:28:41,596
In this notification type, there

1002
00:28:41,596 --> 0:28:42,576
are a few more fields that I

1003
00:28:42,576 --> 0:28:43,266
want you to look for.

1004
00:28:44,196 --> 0:28:45,296
First, you should look for the

1005
00:28:45,336 --> 0:28:46,516
price consent status.

1006
00:28:46,896 --> 0:28:47,936
This will tell you if your

1007
00:28:47,936 --> 0:28:50,046
customer has already consented

1008
00:28:50,046 --> 0:28:51,186
to your price increase.

1009
00:28:51,846 --> 0:28:53,636
However, because we are sending

1010
00:28:53,636 --> 0:28:55,816
this notification to you, almost

1011
00:28:55,816 --> 0:28:57,546
as soon as we detect the price

1012
00:28:57,546 --> 0:28:59,246
increase, you should expect in

1013
00:28:59,246 --> 0:29:00,816
most cases that this value will

1014
00:28:59,246 --> 0:29:00,816
most cases that this value will

1015
00:29:00,816 --> 0:29:02,766
be 0, or that the customer has

1016
00:29:02,766 --> 0:29:03,586
not yet consented.

1017
00:29:03,586 --> 0:29:06,606
You should again be checking for

1018
00:29:06,656 --> 0:29:08,866
the original transaction id to

1019
00:29:08,866 --> 0:29:10,716
link this notification back to

1020
00:29:10,716 --> 0:29:11,776
the original subscription.

1021
00:29:12,796 --> 0:29:14,336
Finally, I want you to look for

1022
00:29:14,336 --> 0:29:15,226
the expires date.

1023
00:29:15,746 --> 0:29:17,286
This will tell you the date and

1024
00:29:17,356 --> 0:29:18,666
time that this subscription

1025
00:29:18,666 --> 0:29:19,866
period will expire.

1026
00:29:20,406 --> 0:29:22,346
And, by that time, your customer

1027
00:29:22,516 --> 0:29:24,316
will have had to consented to

1028
00:29:24,316 --> 0:29:24,976
the price increase.

1029
00:29:29,536 --> 0:29:31,136
So, now that we've taken a look

1030
00:29:31,136 --> 0:29:32,036
at what's new to

1031
00:29:32,036 --> 0:29:33,446
Server-to-Server Notifications,

1032
00:29:33,676 --> 0:29:34,956
and what you can do to handle

1033
00:29:34,956 --> 0:29:36,526
these notifications, when you

1034
00:29:36,526 --> 0:29:38,286
receive them, I'm going to

1035
00:29:38,286 --> 0:29:40,396
invite Manjeet Chawla onstage to

1036
00:29:40,396 --> 0:29:41,856
talk to you about subscription

1037
00:29:41,856 --> 0:29:42,976
lifecycle, and reducing churn.

1038
00:29:43,516 --> 0:29:49,500
[ Applause ]

1039
00:29:54,946 --> 0:29:55,406
&gt;&gt; Good morning.

1040
00:29:56,056 --> 0:29:57,836
My name is Manjeet Chawla, and

1041
00:29:57,836 --> 0:29:59,246
I'm on the App Store commerce

1042
00:29:59,356 --> 0:29:59,516
scene.

1043
00:30:00,626 --> 0:30:02,146
I'm really excited to be here

1044
00:30:02,146 --> 0:30:03,756
today, and talk to you guys

1045
00:30:03,846 --> 0:30:06,586
about how you can use the new

1046
00:30:06,586 --> 0:30:08,476
and improved Server-to-Server

1047
00:30:08,476 --> 0:30:11,046
Notifications to identify

1048
00:30:11,046 --> 0:30:13,416
billing events through a

1049
00:30:13,576 --> 0:30:16,236
subscription lifecycle that may

1050
00:30:16,236 --> 0:30:17,666
impact your customer's

1051
00:30:17,666 --> 0:30:18,596
subscription status.

1052
00:30:20,156 --> 0:30:21,866
So, what does the lifecycle of a

1053
00:30:21,866 --> 0:30:25,146
subscription look like?

1054
00:30:25,416 --> 0:30:27,616
Now, you may start acquiring new

1055
00:30:27,616 --> 0:30:29,306
customers by offering them a

1056
00:30:29,306 --> 0:30:31,396
free trial, or an introductory

1057
00:30:31,396 --> 0:30:33,536
price to attract them to your

1058
00:30:33,536 --> 0:30:35,526
service, and let the users try

1059
00:30:35,526 --> 0:30:36,656
your service before paying the

1060
00:30:36,656 --> 0:30:36,976
full price.

1061
00:30:40,646 --> 0:30:42,806
Next, you keep them engaged to

1062
00:30:42,806 --> 0:30:44,516
your service by providing them

1063
00:30:44,516 --> 0:30:45,996
constant updates to your

1064
00:30:45,996 --> 0:30:46,466
content.

1065
00:30:46,996 --> 0:30:51,626
And, finally, you try to retain

1066
00:30:51,626 --> 0:30:54,496
them as active subscribers by

1067
00:30:54,496 --> 0:30:54,976
minimizing churn.

1068
00:30:59,166 --> 0:31:01,426
Now, we all know that during

1069
00:30:59,166 --> 0:31:01,426
Now, we all know that during

1070
00:31:01,426 --> 0:31:03,476
this lifecycle, there's a number

1071
00:31:03,476 --> 0:31:05,116
of different billing events that

1072
00:31:05,116 --> 0:31:06,416
can occur for most of your

1073
00:31:06,416 --> 0:31:07,116
subscribers.

1074
00:31:07,716 --> 0:31:11,236
And, today, you're probably

1075
00:31:11,236 --> 0:31:12,586
calling the verifyReceipt

1076
00:31:12,586 --> 0:31:14,396
endpoint for all your

1077
00:31:14,396 --> 0:31:16,996
subscribers to get these billing

1078
00:31:16,996 --> 0:31:17,716
event changes.

1079
00:31:18,336 --> 0:31:20,716
Now, we know that this is not

1080
00:31:20,716 --> 0:31:22,566
efficient, and can be costly

1081
00:31:22,566 --> 0:31:25,256
over time, as your subscription

1082
00:31:25,256 --> 0:31:26,016
business grows.

1083
00:31:26,506 --> 0:31:28,696
But, the improvements that we

1084
00:31:28,696 --> 0:31:30,746
saw earlier to Server-to-Server

1085
00:31:30,746 --> 0:31:32,456
Notifications, you no longer

1086
00:31:32,456 --> 0:31:35,256
have to rely on the receipts to

1087
00:31:35,256 --> 0:31:36,906
reflect these billing event

1088
00:31:36,906 --> 0:31:37,336
changes.

1089
00:31:38,566 --> 0:31:40,076
So, let's talk more about how

1090
00:31:40,076 --> 0:31:41,356
you can use the new

1091
00:31:41,356 --> 0:31:42,936
Server-to-Server Notifications

1092
00:31:43,456 --> 0:31:45,146
to detect these billing events,

1093
00:31:45,906 --> 0:31:47,226
and build the best subscription

1094
00:31:47,226 --> 0:31:48,736
experience for your customers.

1095
00:31:49,286 --> 0:31:53,136
So, let's start with the initial

1096
00:31:53,136 --> 0:31:54,476
purchase of a subscription.

1097
00:31:55,256 --> 0:31:56,886
Now, we all know that this

1098
00:31:57,186 --> 0:31:59,386
initial purchase unlocks content

1099
00:31:59,976 --> 0:32:03,886
over a set period of time.

1100
00:31:59,976 --> 0:32:03,886
over a set period of time.

1101
00:32:04,076 --> 0:32:05,236
When the customer purchases

1102
00:32:05,236 --> 0:32:06,976
their subscription in your app,

1103
00:32:07,646 --> 0:32:09,336
you will receive a transaction

1104
00:32:09,336 --> 0:32:11,396
through StoreKit on the device,

1105
00:32:12,366 --> 0:32:13,916
and a receipt associated to that

1106
00:32:13,916 --> 0:32:14,496
transaction.

1107
00:32:15,096 --> 0:32:19,056
At the same time, you'll receive

1108
00:32:20,076 --> 0:32:21,916
a new notification called

1109
00:32:21,916 --> 0:32:23,956
INITIAL BUY for this newly

1110
00:32:23,956 --> 0:32:25,046
purchased subscription.

1111
00:32:25,696 --> 0:32:27,916
Using this notification, you can

1112
00:32:27,916 --> 0:32:30,146
identify a newly purchased

1113
00:32:30,176 --> 0:32:31,576
subscriber that has never

1114
00:32:31,576 --> 0:32:32,666
purchased your subscription

1115
00:32:32,666 --> 0:32:33,066
before.

1116
00:32:35,816 --> 0:32:37,976
Now, you hang onto that initial

1117
00:32:37,976 --> 0:32:40,276
buy notification JSON, and at

1118
00:32:40,276 --> 0:32:41,926
the same time, you send your

1119
00:32:41,926 --> 0:32:44,336
receipt from the device to your

1120
00:32:44,336 --> 0:32:46,056
server over a secure connection.

1121
00:32:46,376 --> 0:32:47,756
And then, to the verifyReceipt

1122
00:32:47,756 --> 0:32:49,266
endpoint to validate the

1123
00:32:49,266 --> 0:32:49,976
contents of the receipt.

1124
00:32:54,046 --> 0:32:55,296
In the response that you get

1125
00:32:55,296 --> 0:32:57,146
back from the App Store, you

1126
00:32:57,146 --> 0:32:59,426
then check for the contents of

1127
00:32:59,426 --> 0:33:01,836
the JSON, and you update your

1128
00:32:59,426 --> 0:33:01,836
the JSON, and you update your

1129
00:33:01,836 --> 0:33:04,246
user database by looking for

1130
00:33:04,246 --> 0:33:05,896
information for the latest

1131
00:33:05,896 --> 0:33:07,966
purchase that the user made.

1132
00:33:09,116 --> 0:33:11,316
Finally, that notification that

1133
00:33:11,316 --> 0:33:13,166
you stored previously, you can

1134
00:33:13,166 --> 0:33:15,256
link the response that you got

1135
00:33:15,366 --> 0:33:16,856
from the App Store through this

1136
00:33:16,856 --> 0:33:19,176
verifyReceipt, and link that to

1137
00:33:19,176 --> 0:33:21,506
the initial buy notification by

1138
00:33:21,506 --> 0:33:23,466
using original transaction id,

1139
00:33:23,896 --> 0:33:24,976
and the web order line item id.

1140
00:33:31,126 --> 0:33:32,706
Now, when the subscription is

1141
00:33:32,706 --> 0:33:34,846
ready for renewal, the App Store

1142
00:33:34,846 --> 0:33:36,126
will automatically renew the

1143
00:33:36,126 --> 0:33:37,436
subscription for you in the

1144
00:33:37,436 --> 0:33:37,976
background.

1145
00:33:39,086 --> 0:33:40,336
And, the next time the user

1146
00:33:40,336 --> 0:33:41,666
launches their app on the

1147
00:33:41,666 --> 0:33:44,216
device, you'll receive a new

1148
00:33:44,216 --> 0:33:45,646
transaction, and a receipt

1149
00:33:46,036 --> 0:33:47,636
associated to that transaction.

1150
00:33:48,236 --> 0:33:52,916
You, again, base64-encode that

1151
00:33:52,916 --> 0:33:55,146
receipt, and send that securely

1152
00:33:55,146 --> 0:33:56,106
to your server.

1153
00:33:56,636 --> 0:33:59,736
And, let's say your user is

1154
00:33:59,736 --> 0:34:01,426
consuming their service on a

1155
00:33:59,736 --> 0:34:01,426
consuming their service on a

1156
00:34:01,426 --> 0:34:02,546
different platform, and you

1157
00:34:02,546 --> 0:34:04,376
don't want to rely on the user

1158
00:34:04,376 --> 0:34:06,386
launching the app to detect this

1159
00:34:06,386 --> 0:34:06,816
renewal.

1160
00:34:07,416 --> 0:34:09,746
You can also use the receipt

1161
00:34:09,746 --> 0:34:11,266
data that you stored previously

1162
00:34:11,266 --> 0:34:13,266
from the initial purchase, and

1163
00:34:13,295 --> 0:34:13,976
send that to your server.

1164
00:34:20,096 --> 0:34:21,585
Next, you send that to the

1165
00:34:21,585 --> 0:34:23,376
verifyReceipt endpoint, and

1166
00:34:23,376 --> 0:34:24,606
check for the renewal

1167
00:34:24,606 --> 0:34:26,076
transaction in the JSON

1168
00:34:26,076 --> 0:34:26,525
response.

1169
00:34:27,156 --> 0:34:29,846
In the response, you can

1170
00:34:29,846 --> 0:34:31,806
validate the latest renewal for

1171
00:34:31,806 --> 0:34:33,525
that user, and you update the

1172
00:34:33,525 --> 0:34:35,536
latest expires date, based on

1173
00:34:35,536 --> 0:34:36,545
that subscription.

1174
00:34:37,096 --> 0:34:40,916
And, finally, you keep service

1175
00:34:40,916 --> 0:34:42,266
on for the customer as the

1176
00:34:42,266 --> 0:34:43,396
subscription successfully

1177
00:34:43,565 --> 0:34:43,896
renewed.

1178
00:34:44,446 --> 0:34:47,626
Note that for this event, there

1179
00:34:47,626 --> 0:34:48,786
is no server-to-server

1180
00:34:48,786 --> 0:34:49,426
notification.

1181
00:34:49,856 --> 0:34:51,326
So you have to call

1182
00:34:51,326 --> 0:34:53,726
verifyReceipt based on the

1183
00:34:53,726 --> 0:34:55,025
information that you have from

1184
00:34:55,025 --> 0:34:57,566
the initial purchase to check

1185
00:34:57,626 --> 0:34:58,726
for the renewal transaction.

1186
00:35:01,796 --> 0:35:03,256
Now, let's say that the customer

1187
00:35:03,256 --> 0:35:04,916
has been loving your service,

1188
00:35:04,916 --> 0:35:07,176
and they enjoy their basic

1189
00:35:07,436 --> 0:35:08,776
subscription service, and they

1190
00:35:08,776 --> 0:35:10,976
decide to upgrade your service

1191
00:35:11,016 --> 0:35:12,556
to your premium product, maybe a

1192
00:35:12,556 --> 0:35:15,766
higher tier of service.

1193
00:35:15,916 --> 0:35:17,636
Now, for this upgrade, you'll

1194
00:35:17,636 --> 0:35:19,736
receive a CANCEL notification

1195
00:35:20,156 --> 0:35:21,366
from the App Store on your

1196
00:35:21,366 --> 0:35:21,786
server.

1197
00:35:22,326 --> 0:35:27,146
And, in the content of the JSON,

1198
00:35:27,596 --> 0:35:28,746
there will be a cancellation

1199
00:35:28,746 --> 0:35:31,226
date notifying you that the App

1200
00:35:31,226 --> 0:35:33,146
Store has canceled the previous

1201
00:35:33,146 --> 0:35:34,396
subscription for the user.

1202
00:35:34,866 --> 0:35:39,536
Followed by the CANCEL, you'll

1203
00:35:39,536 --> 0:35:41,336
also receive an INTERACTIVE

1204
00:35:41,336 --> 0:35:42,656
RENEWAL notification on your

1205
00:35:42,656 --> 0:35:43,046
server.

1206
00:35:43,546 --> 0:35:47,316
Use this notification to update

1207
00:35:47,316 --> 0:35:50,156
your users' database with the

1208
00:35:50,396 --> 0:35:51,426
date of the upgrade.

1209
00:35:51,726 --> 0:35:53,096
So, now you know that this user

1210
00:35:53,096 --> 0:35:55,596
has upgraded their subscription

1211
00:35:55,836 --> 0:35:57,526
to a higher tier service, or a

1212
00:35:57,526 --> 0:35:57,976
premium product.

1213
00:36:02,636 --> 0:36:04,946
And, finally, you unlock the

1214
00:36:04,946 --> 0:36:06,786
premium content for the user in

1215
00:36:06,786 --> 0:36:06,976
the app.

1216
00:36:11,806 --> 0:36:15,016
Now, at some point, the customer

1217
00:36:15,016 --> 0:36:16,856
decides that this content isn't

1218
00:36:16,856 --> 0:36:18,546
right for them, and they want to

1219
00:36:18,546 --> 0:36:19,636
cancel their subscription.

1220
00:36:20,656 --> 0:36:22,056
They do this by turning off

1221
00:36:22,336 --> 0:36:24,536
auto-renew inside Manage

1222
00:36:24,576 --> 0:36:27,206
Subscription settings on the

1223
00:36:28,256 --> 0:36:28,416
device.

1224
00:36:28,566 --> 0:36:31,246
Now, today, you might be relying

1225
00:36:31,326 --> 0:36:33,886
on the receipt to reflect the

1226
00:36:33,886 --> 0:36:34,966
latest renewal status.

1227
00:36:36,136 --> 0:36:37,446
You may even be calling

1228
00:36:37,446 --> 0:36:39,006
verifyReceipt for all your

1229
00:36:39,006 --> 0:36:40,656
customers, just to get the

1230
00:36:40,656 --> 0:36:42,376
renewal status of their latest

1231
00:36:42,376 --> 0:36:42,916
subscription.

1232
00:36:43,486 --> 0:36:46,696
Now, we talked about this

1233
00:36:46,696 --> 0:36:47,236
earlier.

1234
00:36:47,576 --> 0:36:49,066
Tori mentioned the new

1235
00:36:49,066 --> 0:36:51,476
notification, by using that you

1236
00:36:51,476 --> 0:36:53,296
no longer have to rely on

1237
00:36:53,296 --> 0:36:55,106
verifyReceipt for that renewal

1238
00:36:55,166 --> 0:36:55,866
status change.

1239
00:36:56,426 --> 0:36:59,496
And now, you get the DID CHANGE

1240
00:36:59,496 --> 0:37:01,936
RENEWAL STATUS notification any

1241
00:36:59,496 --> 0:37:01,936
RENEWAL STATUS notification any

1242
00:37:01,936 --> 0:37:03,896
time a user turns off or on

1243
00:37:04,166 --> 0:37:05,826
their auto-renew status from the

1244
00:37:05,826 --> 0:37:06,966
Manage Subscriptions settings.

1245
00:37:12,106 --> 0:37:14,396
You use this event to update the

1246
00:37:14,396 --> 0:37:16,196
renewal status of the

1247
00:37:16,196 --> 0:37:17,766
subscription to false, because

1248
00:37:17,766 --> 0:37:19,246
in this case the user turned off

1249
00:37:19,386 --> 0:37:19,946
auto-renew.

1250
00:37:20,486 --> 0:37:22,876
And, you update their

1251
00:37:22,876 --> 0:37:24,566
subscription status.

1252
00:37:25,476 --> 0:37:27,886
Now, let's say that you don't

1253
00:37:27,886 --> 0:37:29,676
receive any other notifications

1254
00:37:29,676 --> 0:37:31,836
for this user until the end of

1255
00:37:31,836 --> 0:37:32,806
their subscription period.

1256
00:37:34,196 --> 0:37:36,366
You can safely assume that their

1257
00:37:36,616 --> 0:37:38,036
subscription has now churned at

1258
00:37:38,586 --> 0:37:39,676
the end of their current

1259
00:37:39,676 --> 0:37:41,046
subscription period.

1260
00:37:43,016 --> 0:37:44,246
So, you can update the

1261
00:37:44,246 --> 0:37:45,846
subscription status for your

1262
00:37:45,846 --> 0:37:51,516
user as "inactive" or "churned."

1263
00:37:51,676 --> 0:37:54,396
Now, over time, as your

1264
00:37:54,396 --> 0:37:56,526
subscribers will churn out, you

1265
00:37:56,526 --> 0:37:58,166
want to try and win them back by

1266
00:37:58,166 --> 0:38:00,266
giving them an attractive offer,

1267
00:37:58,166 --> 0:38:00,266
giving them an attractive offer,

1268
00:38:00,616 --> 0:38:02,586
either a discounted price, or

1269
00:38:02,586 --> 0:38:06,146
maybe even a free trial.

1270
00:38:06,266 --> 0:38:07,336
We launched a new feature

1271
00:38:07,336 --> 0:38:09,186
recently called Subscription

1272
00:38:09,186 --> 0:38:11,226
Offers that allows you to give

1273
00:38:11,386 --> 0:38:13,386
that discounted price, or a free

1274
00:38:13,386 --> 0:38:15,506
trial, to keep existing

1275
00:38:15,506 --> 0:38:16,936
subscribers, or win back

1276
00:38:17,466 --> 0:38:18,966
previously churned subscribers.

1277
00:38:20,306 --> 0:38:21,236
We have a session on

1278
00:38:21,236 --> 0:38:22,706
Subscription Offers later today,

1279
00:38:22,816 --> 0:38:23,886
where my colleagues will go

1280
00:38:23,886 --> 0:38:25,626
through best practices in

1281
00:38:25,626 --> 0:38:26,646
implementing subscription

1282
00:38:26,646 --> 0:38:27,006
offers.

1283
00:38:27,596 --> 0:38:29,366
And, the different use cases on

1284
00:38:29,366 --> 0:38:30,616
how you can use subscription

1285
00:38:30,616 --> 0:38:31,756
offers to improve your retention

1286
00:38:31,756 --> 0:38:31,976
numbers.

1287
00:38:37,066 --> 0:38:37,986
Now, let's take a look at a

1288
00:38:37,986 --> 0:38:39,026
slightly different case, where

1289
00:38:39,026 --> 0:38:40,496
the user had no intention to

1290
00:38:40,496 --> 0:38:42,336
cancel your subscription, but

1291
00:38:42,336 --> 0:38:44,766
the App Store was unable to

1292
00:38:44,766 --> 0:38:46,096
recover or renew the

1293
00:38:46,096 --> 0:38:47,216
subscription on the user's

1294
00:38:47,246 --> 0:38:47,536
behalf.

1295
00:38:48,966 --> 0:38:50,356
Maybe the user's credit card was

1296
00:38:50,356 --> 0:38:52,176
invalid, or maybe they did not

1297
00:38:52,176 --> 0:38:53,636
have sufficient funds in their

1298
00:38:53,636 --> 0:38:54,026
account.

1299
00:38:54,606 --> 0:38:58,246
For this event, the App Store

1300
00:38:58,246 --> 0:39:00,346
will now send you a DID FAIL TO

1301
00:38:58,246 --> 0:39:00,346
will now send you a DID FAIL TO

1302
00:39:00,346 --> 0:39:01,326
RENEW notification.

1303
00:39:02,366 --> 0:39:04,736
Using this notification, you

1304
00:39:04,736 --> 0:39:05,886
know that the user's

1305
00:39:05,886 --> 0:39:07,966
subscription failed to renew due

1306
00:39:08,126 --> 0:39:09,126
to a billing issue.

1307
00:39:10,226 --> 0:39:11,446
And, you can update your

1308
00:39:11,646 --> 0:39:13,026
subscription status for that

1309
00:39:13,026 --> 0:39:15,056
customer to "inactive" or

1310
00:39:15,916 --> 0:39:16,046
"churned."

1311
00:39:17,616 --> 0:39:20,106
You use this notification to

1312
00:39:20,106 --> 0:39:21,676
show them a message inside the

1313
00:39:21,676 --> 0:39:22,916
app, letting them know that

1314
00:39:22,916 --> 0:39:23,976
their subscription has expired.

1315
00:39:28,256 --> 0:39:30,186
Now, for billing-related issues,

1316
00:39:31,116 --> 0:39:32,486
the App Store automatically

1317
00:39:32,486 --> 0:39:34,886
makes several attempts to renew

1318
00:39:34,886 --> 0:39:36,206
the user's subscription over

1319
00:39:36,206 --> 0:39:36,506
time.

1320
00:39:37,626 --> 0:39:39,546
If an attempt succeeds, and if

1321
00:39:39,546 --> 0:39:40,856
you're able to charge the

1322
00:39:40,856 --> 0:39:42,446
customer for that subscription,

1323
00:39:43,656 --> 0:39:45,266
you'll now receive a DID RECOVER

1324
00:39:45,266 --> 0:39:45,976
notification.

1325
00:39:46,626 --> 0:39:48,996
So, using this notification, you

1326
00:39:48,996 --> 0:39:50,446
update the user database for

1327
00:39:50,446 --> 0:39:52,896
that customer to "subscribed,"

1328
00:39:54,086 --> 0:39:55,826
and you note the new expires

1329
00:39:55,896 --> 0:39:57,966
date for that newly renewed

1330
00:40:00,606 --> 0:40:00,946
subscription.

1331
00:40:01,126 --> 0:40:02,566
And, you re-enable service for

1332
00:40:02,566 --> 0:40:02,976
that customer.

1333
00:40:08,096 --> 0:40:09,426
So, now we saw in the last

1334
00:40:09,426 --> 0:40:11,066
example, that the App Store

1335
00:40:11,066 --> 0:40:13,276
makes several attempts to renew

1336
00:40:13,276 --> 0:40:14,766
subscriptions over a period of

1337
00:40:14,766 --> 0:40:15,046
time.

1338
00:40:15,966 --> 0:40:17,626
Now, this happens automatically

1339
00:40:18,266 --> 0:40:21,576
for you, but how can you as a

1340
00:40:21,576 --> 0:40:24,176
developer respond to these

1341
00:40:24,286 --> 0:40:26,486
attempts, and what can you do on

1342
00:40:26,486 --> 0:40:27,846
your end to reduce involuntary

1343
00:40:27,846 --> 0:40:27,976
churn?

1344
00:40:32,566 --> 0:40:34,026
Last year, in Engineering

1345
00:40:34,026 --> 0:40:36,006
Subscriptions, we talked about

1346
00:40:36,006 --> 0:40:37,696
our extended billing re-try

1347
00:40:37,696 --> 0:40:39,636
logic that attempts to renew the

1348
00:40:39,636 --> 0:40:42,686
subscription over a period of

1349
00:40:44,156 --> 0:40:44,266
time.

1350
00:40:44,486 --> 0:40:45,816
This is deployed when a

1351
00:40:45,816 --> 0:40:47,456
subscription fails to renew due

1352
00:40:47,456 --> 0:40:48,256
to a billing issue.

1353
00:40:48,786 --> 0:40:52,836
And, since launch, we have been

1354
00:40:52,836 --> 0:40:54,506
making constant updates and

1355
00:40:54,506 --> 0:40:56,496
tuning to our strategies to

1356
00:40:56,496 --> 0:40:57,806
optimize recoveries.

1357
00:40:59,156 --> 0:41:01,276
We're also looking at advanced

1358
00:40:59,156 --> 0:41:01,276
We're also looking at advanced

1359
00:41:01,276 --> 0:41:03,066
machine learning models to

1360
00:41:03,066 --> 0:41:04,666
improve how we recover

1361
00:41:04,666 --> 0:41:06,176
subscriptions across the

1362
00:41:06,176 --> 0:41:06,636
platform.

1363
00:41:06,636 --> 0:41:10,876
Now, as we look at performance

1364
00:41:10,966 --> 0:41:13,456
since launch, you can see that

1365
00:41:13,456 --> 0:41:15,676
we're recovering more than 77%

1366
00:41:15,676 --> 0:41:18,176
of subscriptions that failed due

1367
00:41:18,176 --> 0:41:19,486
to a billing issue.

1368
00:41:20,046 --> 0:41:22,416
And, by recovering these

1369
00:41:22,416 --> 0:41:24,276
subscriptions, we have been able

1370
00:41:24,276 --> 0:41:25,566
to reduce the overall

1371
00:41:25,566 --> 0:41:27,336
involuntary churn to less than

1372
00:41:27,336 --> 0:41:28,966
2% across the platform.

1373
00:41:29,516 --> 0:41:36,656
[ Applause ]

1374
00:41:37,156 --> 0:41:39,116
And, with all these updates and

1375
00:41:39,116 --> 0:41:40,556
improvements that we've made to

1376
00:41:40,556 --> 0:41:41,946
our billing re-try strategies,

1377
00:41:42,596 --> 0:41:45,406
we have been able to recover

1378
00:41:45,406 --> 0:41:47,316
over 46 million of your

1379
00:41:47,426 --> 0:41:47,976
subscriptions.

1380
00:41:48,516 --> 0:41:54,326
[ Applause ]

1381
00:41:54,826 --> 0:41:56,246
Now, these subscriptions would

1382
00:41:56,246 --> 0:41:58,276
have churned otherwise, and

1383
00:41:58,276 --> 0:42:00,086
users had no intention to cancel

1384
00:41:58,276 --> 0:42:00,086
users had no intention to cancel

1385
00:42:00,086 --> 0:42:00,796
their service.

1386
00:42:01,006 --> 0:42:02,956
Users were renewing and enjoying

1387
00:42:02,956 --> 0:42:04,236
their service, and they did not

1388
00:42:04,236 --> 0:42:04,946
want to cancel their

1389
00:42:04,946 --> 0:42:05,446
subscription.

1390
00:42:06,336 --> 0:42:07,836
And, we see across the platform

1391
00:42:07,966 --> 0:42:09,466
that more than half of these

1392
00:42:09,466 --> 0:42:13,776
subscriptions are still active.

1393
00:42:13,966 --> 0:42:15,536
Now, as we look at how we are

1394
00:42:15,536 --> 0:42:17,016
recovering these subscriptions

1395
00:42:17,016 --> 0:42:19,996
over time, over the period of 60

1396
00:42:20,956 --> 0:42:22,046
days, you can see that we

1397
00:42:22,046 --> 0:42:24,206
recover more than 77% of

1398
00:42:24,206 --> 0:42:25,256
subscriptions that failed due to

1399
00:42:25,256 --> 0:42:26,296
a billing issue over the period

1400
00:42:26,296 --> 0:42:26,976
of 60 days.

1401
00:42:31,056 --> 0:42:32,606
And, more than 80% of these

1402
00:42:32,606 --> 0:42:34,416
recoveries happen in the first

1403
00:42:34,696 --> 0:42:36,226
16 days.

1404
00:42:37,916 --> 0:42:39,906
So, what happens when we recover

1405
00:42:40,266 --> 0:42:40,976
these subscriptions?

1406
00:42:43,286 --> 0:42:45,476
First, you reenable service, as

1407
00:42:45,476 --> 0:42:46,806
Tori mentioned earlier, with the

1408
00:42:46,806 --> 0:42:47,876
new notifications.

1409
00:42:48,216 --> 0:42:49,626
You may re-enable service for

1410
00:42:49,626 --> 0:42:51,246
the customers next time that

1411
00:42:51,246 --> 0:42:52,856
they try to access their

1412
00:42:53,466 --> 0:42:53,646
service.

1413
00:42:54,696 --> 0:42:56,726
We start a new billing cycle for

1414
00:42:56,726 --> 0:42:58,556
that subscription from the date

1415
00:42:58,556 --> 0:42:58,976
of recovery.

1416
00:43:02,506 --> 0:43:04,336
And, the days of paid service

1417
00:43:04,336 --> 0:43:05,236
that the customers were

1418
00:43:05,236 --> 0:43:07,026
accumulating toward that higher

1419
00:43:07,026 --> 0:43:09,666
revenue share, 85/15, resumes

1420
00:43:09,706 --> 0:43:11,036
from that day of recovery.

1421
00:43:12,736 --> 0:43:15,736
So, if you were offering service

1422
00:43:16,256 --> 0:43:17,766
to customers during this period

1423
00:43:17,826 --> 0:43:19,926
from the day they started

1424
00:43:20,146 --> 0:43:21,866
billing re-try to the day of

1425
00:43:21,866 --> 0:43:23,686
recovery, you're probably

1426
00:43:23,686 --> 0:43:25,406
missing out on revenue for those

1427
00:43:25,406 --> 0:43:25,766
days.

1428
00:43:26,316 --> 0:43:30,326
How can we improve that?

1429
00:43:31,996 --> 0:43:34,056
So, this fall, I'm excited to

1430
00:43:34,056 --> 0:43:35,096
announce that we're launching a

1431
00:43:35,096 --> 0:43:37,226
new feature that will allow you

1432
00:43:37,416 --> 0:43:38,756
to offer a grace period, a

1433
00:43:38,756 --> 0:43:40,336
billing grace period, that

1434
00:43:40,336 --> 0:43:42,086
allows additional time for

1435
00:43:42,086 --> 0:43:44,906
customers while they're enjoying

1436
00:43:44,906 --> 0:43:46,246
their service, they have access

1437
00:43:46,316 --> 0:43:47,316
to that paid content.

1438
00:43:48,416 --> 0:43:49,346
And, it allows you, the

1439
00:43:49,346 --> 0:43:50,976
developer to get additional

1440
00:43:50,976 --> 0:43:52,496
revenue for any service that you

1441
00:43:52,496 --> 0:43:53,966
provide during those days.

1442
00:43:54,516 --> 0:44:00,716
[ Applause ]

1443
00:43:54,516 --> 0:44:00,716
[ Applause ]

1444
00:44:01,216 --> 0:44:02,236
Now, this creates a better

1445
00:44:02,236 --> 0:44:03,866
experience for all your

1446
00:44:03,866 --> 0:44:05,366
customers, who recovered

1447
00:44:05,366 --> 0:44:07,516
naturally over a period of time,

1448
00:44:08,216 --> 0:44:09,346
because they never expressed an

1449
00:44:09,346 --> 0:44:10,126
intent to cancel.

1450
00:44:11,466 --> 0:44:13,056
This also recovers customers who

1451
00:44:13,056 --> 0:44:14,976
maybe had a temporary credit

1452
00:44:14,976 --> 0:44:16,606
card hold on their account.

1453
00:44:19,826 --> 0:44:21,066
Now, let's take a look at how

1454
00:44:21,066 --> 0:44:22,436
you can implement this feature.

1455
00:44:23,116 --> 0:44:24,336
Well, it's really easy.

1456
00:44:24,756 --> 0:44:26,896
It takes three simple steps to

1457
00:44:26,896 --> 0:44:29,006
implement a billing grace

1458
00:44:29,556 --> 0:44:29,756
period.

1459
00:44:29,866 --> 0:44:32,386
First, you opt-in via App Store

1460
00:44:32,386 --> 0:44:34,536
Connect to offer pre-configured

1461
00:44:34,536 --> 0:44:36,516
durations for grace period.

1462
00:44:37,696 --> 0:44:39,086
Now, based on the recovery data

1463
00:44:39,086 --> 0:44:41,126
that we saw earlier, we're going

1464
00:44:41,126 --> 0:44:43,506
to start with 6 days for weekly

1465
00:44:43,506 --> 0:44:45,996
subscriptions, and 16 days for

1466
00:44:45,996 --> 0:44:47,006
all other durations.

1467
00:44:49,956 --> 0:44:52,136
Next, you look for a new field

1468
00:44:52,436 --> 0:44:54,046
in the verifyReceipt response,

1469
00:44:54,426 --> 0:44:55,636
or in the notification.

1470
00:44:56,056 --> 0:44:58,176
This will allow you to know the

1471
00:44:58,176 --> 0:44:59,786
latest expiry date for your

1472
00:44:59,786 --> 0:44:59,976
service.

1473
00:45:04,046 --> 0:45:05,956
And, you keep service on for

1474
00:45:05,956 --> 0:45:06,976
customers during the period.

1475
00:45:13,146 --> 0:45:14,476
Now, you may be thinking, as a

1476
00:45:15,496 --> 0:45:17,826
developer, why should you opt-in

1477
00:45:18,086 --> 0:45:19,576
to offer a billing grace period?

1478
00:45:22,396 --> 0:45:23,346
Well, there's a number of

1479
00:45:23,346 --> 0:45:23,886
benefits.

1480
00:45:24,156 --> 0:45:26,306
First, your customers never

1481
00:45:26,306 --> 0:45:27,336
intended to cancel your

1482
00:45:27,336 --> 0:45:29,716
subscription, so they enjoy

1483
00:45:29,716 --> 0:45:31,556
accessing your service without

1484
00:45:31,556 --> 0:45:32,306
any interruptions.

1485
00:45:37,076 --> 0:45:37,806
This also allows you, or your

1486
00:45:37,806 --> 0:45:39,466
customers to maintain their

1487
00:45:39,466 --> 0:45:41,256
existing billing cycle, as we

1488
00:45:41,256 --> 0:45:42,356
recover their subscription

1489
00:45:42,356 --> 0:45:43,696
during this billing grace

1490
00:45:43,696 --> 0:45:43,986
period.

1491
00:45:44,506 --> 0:45:47,776
And it enables you, the

1492
00:45:47,776 --> 0:45:51,566
developer, to earn additional

1493
00:45:51,566 --> 0:45:53,476
revenue for the service that you

1494
00:45:53,476 --> 0:45:54,526
provide during this billing

1495
00:45:54,526 --> 0:45:54,976
grace period.

1496
00:46:00,056 --> 0:46:01,916
And, as we saw earlier, it

1497
00:46:01,916 --> 0:46:03,656
allows customers to accumulate

1498
00:46:03,966 --> 0:46:06,746
those 85/15 higher revenue share

1499
00:46:06,866 --> 0:46:08,626
days of paid service at a faster

1500
00:46:09,206 --> 0:46:09,306
rate.

1501
00:46:10,756 --> 0:46:12,786
I highly encourage you to look

1502
00:46:12,786 --> 0:46:14,176
into grace period for your

1503
00:46:14,176 --> 0:46:15,856
subscriptions when we launch

1504
00:46:15,936 --> 0:46:19,306
this later this fall.

1505
00:46:19,516 --> 0:46:21,676
Now, in addition to offering a

1506
00:46:21,676 --> 0:46:22,766
grace period, what are some of

1507
00:46:22,766 --> 0:46:24,056
the other things that you can do

1508
00:46:24,356 --> 0:46:26,566
to reduce overall involuntary

1509
00:46:26,566 --> 0:46:28,116
churn, and improve recoveries?

1510
00:46:29,516 --> 0:46:31,466
Here we see an example, where

1511
00:46:31,936 --> 0:46:33,646
inside the app, by showing

1512
00:46:33,646 --> 0:46:35,596
contextual messaging to your

1513
00:46:35,596 --> 0:46:37,916
customers who are in the billing

1514
00:46:37,916 --> 0:46:39,616
re-try state, you can let them

1515
00:46:39,616 --> 0:46:40,926
know that their subscription has

1516
00:46:40,926 --> 0:46:41,826
failed to renew due to a billing

1517
00:46:41,826 --> 0:46:41,916
issue.

1518
00:46:48,446 --> 0:46:49,716
And, if you were offering a

1519
00:46:49,716 --> 0:46:51,396
grace period, you can focus your

1520
00:46:51,396 --> 0:46:54,116
messaging on any grace period

1521
00:46:54,116 --> 0:46:55,206
service that you are providing

1522
00:46:55,206 --> 0:46:55,996
to your customers.

1523
00:46:56,666 --> 0:46:58,486
Now, you can be creative with

1524
00:46:58,646 --> 0:47:00,646
how you devise this messaging.

1525
00:46:58,646 --> 0:47:00,646
how you devise this messaging.

1526
00:47:01,326 --> 0:47:02,726
It can be towards the end of the

1527
00:47:02,726 --> 0:47:03,276
grace period.

1528
00:47:03,276 --> 0:47:04,746
Maybe you are providing premium

1529
00:47:04,746 --> 0:47:06,076
content, and they will lose

1530
00:47:06,106 --> 0:47:07,386
content at the end of that grace

1531
00:47:07,426 --> 0:47:07,636
period.

1532
00:47:07,636 --> 0:47:10,616
So, highlighting the premium

1533
00:47:10,616 --> 0:47:11,886
content that they're going to

1534
00:47:11,886 --> 0:47:13,506
lose at the end of the grace

1535
00:47:13,506 --> 0:47:15,326
period will help you recover

1536
00:47:15,326 --> 0:47:16,276
those subscriptions.

1537
00:47:19,476 --> 0:47:21,946
Here we see an app, Foodvisor,

1538
00:47:22,336 --> 0:47:23,886
showing a message to customers

1539
00:47:24,076 --> 0:47:26,386
in billing re-try, and showing

1540
00:47:26,386 --> 0:47:28,146
them the remaining duration for

1541
00:47:28,146 --> 0:47:32,336
the premium content.

1542
00:47:32,416 --> 0:47:34,936
Now, within this message, you

1543
00:47:34,936 --> 0:47:37,246
can also embed a deep link to

1544
00:47:37,246 --> 0:47:39,246
the payment details page, where

1545
00:47:39,246 --> 0:47:40,806
the customers can then go and

1546
00:47:40,806 --> 0:47:41,976
resolve any billing issues.

1547
00:47:46,206 --> 0:47:48,086
As you can see, we've recently

1548
00:47:48,086 --> 0:47:50,476
updated this Payment Details

1549
00:47:50,566 --> 0:47:52,476
page to allow a customer to have

1550
00:47:52,606 --> 0:47:53,996
up to 10 different payment

1551
00:47:53,996 --> 0:47:55,806
methods on account.

1552
00:47:56,356 --> 0:47:59,006
Now, in addition to providing

1553
00:47:59,146 --> 0:48:00,576
easier payment management

1554
00:47:59,146 --> 0:48:00,576
easier payment management

1555
00:48:00,576 --> 0:48:02,926
options to customers, this also

1556
00:48:02,926 --> 0:48:06,256
helps the App Store to reduce

1557
00:48:06,256 --> 0:48:08,976
overall involuntary churn by

1558
00:48:08,976 --> 0:48:10,226
charging alternate payment

1559
00:48:10,226 --> 0:48:10,976
methods on file.

1560
00:48:18,236 --> 0:48:19,796
Now, we covered a lot of topics

1561
00:48:19,826 --> 0:48:20,996
today in this session.

1562
00:48:22,026 --> 0:48:23,806
But, just to summarize, we

1563
00:48:24,436 --> 0:48:25,916
talked about Subscription

1564
00:48:25,916 --> 0:48:28,086
Offers, our new feature that we

1565
00:48:28,316 --> 0:48:30,616
launched recently that allows

1566
00:48:30,616 --> 0:48:32,746
you to reduce voluntary churn by

1567
00:48:32,746 --> 0:48:35,666
giving customers a discounted

1568
00:48:35,666 --> 0:48:37,756
price, or a free trial to retain

1569
00:48:37,756 --> 0:48:38,456
their subscription.

1570
00:48:39,396 --> 0:48:41,406
Dana walked us through the code

1571
00:48:41,406 --> 0:48:43,116
to implement a new API called

1572
00:48:43,116 --> 0:48:45,226
SKStorefront which you can use

1573
00:48:45,226 --> 0:48:47,106
to display the right content to

1574
00:48:47,106 --> 0:48:49,326
your customers around the world.

1575
00:48:52,256 --> 0:48:53,776
We talked about some receipt

1576
00:48:53,776 --> 0:48:55,356
changes that are coming soon,

1577
00:48:55,586 --> 0:48:57,566
that allow you to reward your

1578
00:48:57,566 --> 0:48:58,916
loyal customers who pre-ordered

1579
00:48:58,916 --> 0:49:00,496
the app, maybe by giving them a

1580
00:48:58,916 --> 0:49:00,496
the app, maybe by giving them a

1581
00:49:00,496 --> 0:49:02,346
starting balance of a game.

1582
00:49:02,866 --> 0:49:04,406
And, if you haven't already done

1583
00:49:04,686 --> 0:49:06,456
this, check out the

1584
00:49:06,456 --> 0:49:08,006
Server-to-Server Notifications,

1585
00:49:08,986 --> 0:49:10,596
and add that URL in App Store

1586
00:49:10,596 --> 0:49:12,756
Connect to get notified for the

1587
00:49:12,756 --> 0:49:13,896
billing events from the App

1588
00:49:13,896 --> 0:49:14,166
Store.

1589
00:49:15,646 --> 0:49:17,096
We talked about grace period,

1590
00:49:17,156 --> 0:49:18,376
and how you can provide a

1591
00:49:18,376 --> 0:49:20,456
billing grace period to improve

1592
00:49:20,616 --> 0:49:22,826
recoveries for customers that

1593
00:49:22,826 --> 0:49:23,966
their subscriptions failed to

1594
00:49:23,966 --> 0:49:25,006
renew because of a billing

1595
00:49:25,006 --> 0:49:25,746
issue.

1596
00:49:28,356 --> 0:49:29,596
And, we talked about contextual

1597
00:49:29,596 --> 0:49:31,356
messaging, that you can display

1598
00:49:31,356 --> 0:49:33,286
inside the app to recover more

1599
00:49:33,406 --> 0:49:34,256
of your subscriptions.

1600
00:49:34,866 --> 0:49:37,576
For more information on this

1601
00:49:37,616 --> 0:49:39,736
session, and the video for this

1602
00:49:39,736 --> 0:49:42,566
session, look up Session 302.

1603
00:49:42,986 --> 0:49:44,816
And, later this afternoon, my

1604
00:49:44,816 --> 0:49:46,276
colleagues will talk about

1605
00:49:46,276 --> 0:49:47,506
subscription offers best

1606
00:49:47,506 --> 0:49:48,246
practices.

1607
00:49:48,246 --> 0:49:49,306
They'll tell you how to

1608
00:49:49,306 --> 0:49:50,696
implement subscription offers,

1609
00:49:50,696 --> 0:49:52,566
and the different use cases for

1610
00:49:52,566 --> 0:49:54,246
using subscription offers to

1611
00:49:54,246 --> 0:49:55,826
reduce voluntary churn.

1612
00:49:56,356 --> 0:49:58,546
And, we'll be around in the lab

1613
00:49:59,016 --> 0:50:00,696
to answer any questions you may

1614
00:49:59,016 --> 0:50:00,696
to answer any questions you may

1615
00:50:00,696 --> 0:50:01,976
have about these features.

1616
00:50:04,576 --> 0:50:06,086
Thank you and have a great rest

1617
00:50:06,166 --> 0:50:06,966
of your afternoon.

1618
00:50:07,516 --> 0:50:10,506
[ Applause ]
