1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:07,516 --> 0:00:12,626
[掌声]

3
00:00:13,126 --> 0:00:13,556
&gt;&gt; 大家好

4
00:00:13,936 --> 0:00:18,066
欢迎 过去一年

5
00:00:18,066 --> 0:00:20,246
我和我的团队一直在重新构想

6
00:00:20,406 --> 0:00:22,826
Apple TV 的用户体验

7
00:00:23,846 --> 0:00:25,986
我们一直在尝试

8
00:00:26,136 --> 0:00:28,456
并探索如何将乐趣

9
00:00:28,866 --> 0:00:30,336
重新融入浏览之中

10
00:00:32,176 --> 0:00:33,916
今天 我们将与你们分享

11
00:00:33,916 --> 0:00:36,496
如何主宰客厅

12
00:00:36,496 --> 0:00:38,606
如何更贴心地

13
00:00:38,606 --> 0:00:41,666
使用户与他们喜爱的内容

14
00:00:41,666 --> 0:00:42,686
实现交互

15
00:00:45,336 --> 0:00:47,336
我叫 Tommy Payne

16
00:00:47,966 --> 0:00:48,866
我的朋友叫我 T.Payne

17
00:00:48,866 --> 0:00:51,436
我是 Apple 的设计师

18
00:00:53,066 --> 0:00:55,196
我在澳大利亚长大

19
00:00:55,196 --> 0:00:57,496
一个离世界上其他国家都很远的地方

20
00:00:57,496 --> 0:00:59,496
我一直在寻找能够

21
00:00:59,496 --> 0:01:00,446
与其他国家联系的方式

22
00:00:59,496 --> 0:01:00,446
与其他国家联系的方式

23
00:01:00,446 --> 0:01:02,426
我感兴趣也好奇于

24
00:01:02,426 --> 0:01:03,686
其他的文化 其他人

25
00:01:03,686 --> 0:01:06,136
其他的地方与环境

26
00:01:07,176 --> 0:01:12,456
所以我希望电视和电影

27
00:01:12,696 --> 0:01:14,006
能够建立起联系的桥梁

28
00:01:15,116 --> 0:01:16,406
从学校回到家

29
00:01:16,406 --> 0:01:18,736
我会扑通一下倒在沙发上

30
00:01:18,896 --> 0:01:19,906
然后打开电视

31
00:01:20,786 --> 0:01:22,056
不停的搜索频道

32
00:01:22,146 --> 0:01:25,936
来回搜索

33
00:01:25,936 --> 0:01:27,496
直到我感兴趣的东西出现

34
00:01:27,896 --> 0:01:30,186
如果它确实很棒 我会非常着迷

35
00:01:30,186 --> 0:01:31,866
我会全神贯注

36
00:01:31,866 --> 0:01:34,066
沉浸在故事中

37
00:01:36,576 --> 0:01:40,866
你脑海中出现了一部电影或电视节目

38
00:01:40,866 --> 0:01:42,896
你与它有着一种联系

39
00:01:44,126 --> 0:01:46,336
想象一下它给带来的感觉

40
00:01:46,886 --> 0:01:50,496
当你沉浸在那部剧中的时候

41
00:01:50,496 --> 0:01:55,656
时间和空间仿佛消失了

42
00:01:56,096 --> 0:01:58,676
现在 记住那个感觉

43
00:01:58,676 --> 0:01:59,346
我们继续

44
00:01:59,596 --> 0:02:01,186
我要讲的不是代码

45
00:01:59,596 --> 0:02:01,186
我要讲的不是代码

46
00:02:01,186 --> 0:02:03,066
但是我的朋友一会儿会讲到

47
00:02:03,386 --> 0:02:07,896
我要讲的是发现的乐趣

48
00:02:09,186 --> 0:02:11,926
我们如何使用户

49
00:02:11,926 --> 0:02:14,446
更快地找到他们想要的

50
00:02:14,446 --> 0:02:16,546
并且除掉进入的障碍

51
00:02:18,116 --> 0:02:20,566
现在的电视

52
00:02:20,956 --> 0:02:22,316
有点啰嗦

53
00:02:22,946 --> 0:02:24,436
很多很多很多行的内容

54
00:02:24,436 --> 0:02:26,286
呈现在用户面前

55
00:02:26,286 --> 0:02:27,366
用户要来回滚动

56
00:02:28,246 --> 0:02:31,186
你们中有谁曾花 5 分钟

57
00:02:32,106 --> 0:02:34,556
10 分钟甚至 20 分钟

58
00:02:34,756 --> 0:02:36,936
只为了找点东西看呢

59
00:02:37,516 --> 0:02:40,566
这种体验很常见 也很令人沮丧

60
00:02:40,566 --> 0:02:45,276
在这个过程中

61
00:02:45,276 --> 0:02:48,716
我们会失去选择的能力而变得犹豫不决

62
00:02:51,156 --> 0:02:53,626
所以 这就是问题所在

63
00:02:54,736 --> 0:02:56,486
现在 我们来说一下解决的方法

64
00:02:58,876 --> 0:03:01,816
我们有意将 Apple TV

65
00:02:58,876 --> 0:03:01,816
我们有意将 Apple TV

66
00:03:02,056 --> 0:03:07,666
设计成内容优先的体验

67
00:03:08,346 --> 0:03:10,006
所有的这些都意味着

68
00:03:10,146 --> 0:03:11,956
一定有东西呈现 有东西放映

69
00:03:12,066 --> 0:03:13,266
当你进入到 App 的时候

70
00:03:13,266 --> 0:03:15,546
感受到它是充满活力的

71
00:03:16,526 --> 0:03:20,156
所以我会给你讲解

72
00:03:20,156 --> 0:03:22,576
如何通过一些最佳操作

73
00:03:22,576 --> 0:03:24,646
实现内容优先的用户体验

74
00:03:24,646 --> 0:03:26,426
我还会用一些例子

75
00:03:26,426 --> 0:03:28,346
例如顶部展区

76
00:03:28,386 --> 0:03:31,906
以及一些我们自己的 TV App 的例子

77
00:03:35,756 --> 0:03:37,986
首先 我会移除

78
00:03:38,136 --> 0:03:40,426
进入的障碍

79
00:03:40,426 --> 0:03:43,456
消除用户与内容间的所有障碍

80
00:03:44,396 --> 0:03:47,066
这个原则使顶部展区

81
00:03:47,376 --> 0:03:50,826
变得具有互动性和浸入感

82
00:03:51,906 --> 0:03:52,876
我们来看一看

83
00:04:13,086 --> 0:04:15,506
我们启动 Apple TV

84
00:04:15,506 --> 0:04:18,656
会看到 5 秒种的海报图片

85
00:04:18,966 --> 0:04:21,946
接下来会有一个预告片

86
00:04:21,946 --> 0:04:25,796
很重要的是 我们要注意到

87
00:04:25,796 --> 0:04:27,666
在这个预告片中

88
00:04:27,666 --> 0:04:30,366
我们不会给用户太多的声音

89
00:04:30,366 --> 0:04:32,816
在你刚刚进入的时候

90
00:04:32,816 --> 0:04:34,186
出现太多的声音和动画

91
00:04:34,186 --> 0:04:35,656
是很糟糕的体验

92
00:04:36,586 --> 0:04:39,156
但是 用户在稍后

93
00:04:39,156 --> 0:04:41,306
可以自己将声音调出来

94
00:04:42,076 --> 0:04:46,396
内容占据了所有像素

95
00:04:46,876 --> 0:04:48,406
它铺满了整个屏幕

96
00:04:48,856 --> 0:04:53,996
接下来 我们想要确保

97
00:04:54,376 --> 0:04:55,686
因为用户正在观看

98
00:04:55,686 --> 0:04:57,886
一些他们很容易得到交互的东西

99
00:04:59,116 --> 0:05:01,296
这时任何远位置的点击或滑动鼠标

100
00:04:59,116 --> 0:05:01,296
这时任何远位置的点击或滑动鼠标

101
00:05:01,296 --> 0:05:04,026
都会增加用户的认知负荷

102
00:05:04,546 --> 0:05:06,436
因此我们想缩减步骤

103
00:05:06,436 --> 0:05:08,176
让他们更容易地

104
00:05:08,176 --> 0:05:09,906
完成操作

105
00:05:11,256 --> 0:05:15,506
在顶部展区

106
00:05:15,506 --> 0:05:17,846
我们将一个视觉提示放在

107
00:05:17,846 --> 0:05:20,456
屏幕最上层 来提示用户

108
00:05:20,526 --> 0:05:22,406
滑动这里可以就进入

109
00:05:22,406 --> 0:05:22,996
全屏模式

110
00:05:23,606 --> 0:05:25,376
我们看一下它的动态效果

111
00:05:26,236 --> 0:05:27,976
用户把拇指放在

112
00:05:27,976 --> 0:05:30,326
遥控器上然后滑动

113
00:05:30,746 --> 0:05:33,876
这时候程序坞消失了

114
00:05:34,236 --> 0:05:36,146
剩下的只有

115
00:05:36,146 --> 0:05:39,916
全屏播放的预告片

116
00:05:41,096 --> 0:05:43,226
所以用户还是处在浏览模式

117
00:05:43,226 --> 0:05:45,766
但是会看到播放的影片

118
00:05:45,766 --> 0:05:47,076
这会让用户觉得

119
00:05:47,076 --> 0:05:49,036
他们沉浸在观影中 这很酷

120
00:05:50,506 --> 0:05:53,096
我们在所有的地方

121
00:05:53,096 --> 0:05:55,506
都尽力提高交互效果

122
00:05:55,506 --> 0:05:56,686
这对用户来说是很棒的事情

123
00:05:57,006 --> 0:05:58,406
所以我们从 TV App 里面

124
00:05:58,406 --> 0:06:00,376
借用了这个交互方式

125
00:05:58,406 --> 0:06:00,376
借用了这个交互方式

126
00:06:00,586 --> 0:06:02,536
我们用这种方式来调用和隐藏菜单 

127
00:06:02,536 --> 0:06:05,086
在播放影片的过程中

128
00:06:05,356 --> 0:06:07,636
通过利用这个

129
00:06:07,776 --> 0:06:09,036
用户已经熟悉的知识

130
00:06:09,036 --> 0:06:11,176
我们可以很容易完成这件事

131
00:06:11,176 --> 0:06:12,296
因为用户不需要

132
00:06:12,296 --> 0:06:15,726
再去学习接受一个新的东西

133
00:06:16,376 --> 0:06:19,276
现在用户已经得到了互动性

134
00:06:19,276 --> 0:06:21,746
他们就想要 App 

135
00:06:22,656 --> 0:06:25,246
和体验更加敏捷

136
00:06:25,606 --> 0:06:27,686
对于减少认知负荷来说

137
00:06:27,686 --> 0:06:33,636
速度和节奏是很重要的因素

138
00:06:31,566 --> 0:06:35,056
尝试清除掉你的 App 中

139
00:06:33,766 --> 0:06:35,056
所有的延迟和滞后

140
00:06:35,396 --> 0:06:37,636
这样一来 它会变得生动

141
00:06:37,636 --> 0:06:38,996
并且流畅

142
00:06:41,896 --> 0:06:43,736
我们也想要避免

143
00:06:43,736 --> 0:06:45,576
给用户带来过度刺激

144
00:06:46,186 --> 0:06:49,356
隐藏式的 杂乱的 分散注意力的界面

145
00:06:49,356 --> 0:06:53,616
会扰乱用户的操作

146
00:06:53,876 --> 0:06:55,546
想象一下 如果你

147
00:06:55,546 --> 0:06:59,416
站在一个房间里

148
00:06:59,416 --> 0:07:01,596
有 11 个人同时大声地和你说话

149
00:06:59,416 --> 0:07:01,596
有 11 个人同时大声地和你说话

150
00:07:03,146 --> 0:07:05,486
你没有办法听清楚任何一个人说的话 

151
00:07:10,656 --> 0:07:15,106
如果 TV App 的界面也是这样

152
00:07:15,106 --> 0:07:17,886
那么用户就没有办法全神贯注

153
00:07:18,836 --> 0:07:20,956
使用太多的动画

154
00:07:20,956 --> 0:07:22,806
图标 图像和文本风格

155
00:07:24,006 --> 0:07:26,046
会分散人的注意力

156
00:07:26,976 --> 0:07:28,736
我们不想让任何人

157
00:07:28,786 --> 0:07:30,886
发生这种无法集中的情况

158
00:07:31,126 --> 0:07:34,666
我们希望他们能够集中精力并且放松

159
00:07:38,496 --> 0:07:39,916
现在 我们使用户处于

160
00:07:39,916 --> 0:07:41,826
一种放松的状态

161
00:07:41,826 --> 0:07:44,036
我们可以思考如何使

162
00:07:44,036 --> 0:07:46,466
UI 内容类型变得多样化

163
00:07:47,046 --> 0:07:48,586
这指的是

164
00:07:48,586 --> 0:07:50,196
播放的形状和纵横比

165
00:07:50,476 --> 0:07:52,066
不时打破网格的束缚

166
00:07:53,186 --> 0:07:55,436
在我们的 TV App 中 我们已经实现了

167
00:07:55,436 --> 0:07:57,766
通过在标准的 16x9

168
00:07:57,966 --> 0:08:00,126
模式里分布一个

169
00:07:57,966 --> 0:08:00,126
模式里分布一个

170
00:08:00,126 --> 0:08:03,676
不同类型的模块

171
00:08:03,676 --> 0:08:05,386
现在 我们可以做的更多

172
00:08:06,146 --> 0:08:08,356
首先 它给我们 供应商

173
00:08:08,356 --> 0:08:10,846
一个地方来

174
00:08:10,846 --> 0:08:12,336
强调重要的部分

175
00:08:12,336 --> 0:08:14,466
或者强调一些

176
00:08:14,466 --> 0:08:17,226
十分有意义的

177
00:08:17,786 --> 0:08:20,806
对于观看者来说

178
00:08:20,806 --> 0:08:23,556
它给提供了一段放松眼睛的时间

179
00:08:24,366 --> 0:08:25,776
当他们在不停的浏览

180
00:08:25,776 --> 0:08:28,046
这些密集的网格 

181
00:08:28,046 --> 0:08:30,206
创建这样的东西可以让用户

182
00:08:30,246 --> 0:08:31,586
得到片刻的休息

183
00:08:31,696 --> 0:08:37,806
我们想要将画布简化为

184
00:08:37,806 --> 0:08:40,166
简单互不干扰的因素

185
00:08:41,066 --> 0:08:43,256
这就意味着我们要设置等级

186
00:08:45,176 --> 0:08:47,626
在顶部展区的设计中

187
00:08:47,626 --> 0:08:49,866
内容是最重要的

188
00:08:50,136 --> 0:08:51,766
所以它占满了整个屏幕

189
00:08:52,206 --> 0:08:54,556
我们有一个程序坞

190
00:08:54,556 --> 0:08:56,116
和一个选择列表

191
00:08:56,116 --> 0:08:57,666
在它下面的三分之一处 

192
00:08:57,726 --> 0:08:59,246
它们就没有那么重要

193
00:08:59,246 --> 0:09:01,376
通过调整优先顺序

194
00:08:59,246 --> 0:09:01,376
通过调整优先顺序

195
00:09:02,396 --> 0:09:04,616
有利于用户的操作

196
00:09:05,956 --> 0:09:08,686
帮助带领用户

197
00:09:08,806 --> 0:09:10,286
完成整个体验

198
00:09:14,426 --> 0:09:16,916
接下来是元数据 它是有用的

199
00:09:17,156 --> 0:09:19,836
但是重要性处于第二位 这属于内容优先的

200
00:09:19,976 --> 0:09:21,706
内容优先的顶部展区

201
00:09:22,156 --> 0:09:23,886
因为我们想让用户一开始

202
00:09:23,886 --> 0:09:27,526
就对他们观看的内容感到兴奋

203
00:09:27,526 --> 0:09:31,406
然后我们再提示他们还有更多的信息

204
00:09:32,626 --> 0:09:33,706
我们来看一下

205
00:09:55,416 --> 0:09:58,376
这个人沉浸在

206
00:09:58,376 --> 0:10:00,576
全屏的顶部展区体验中

207
00:09:58,376 --> 0:10:00,576
全屏的顶部展区体验中

208
00:10:00,576 --> 0:10:02,516
他将拇指

209
00:10:02,516 --> 0:10:04,226
放在遥控器或者点击

210
00:10:04,676 --> 0:10:07,686
它将会调出元数据

211
00:10:08,046 --> 0:10:09,766
给予用户权力来控制

212
00:10:09,766 --> 0:10:14,266
调出这些额外信息的方法和时间

213
00:10:14,266 --> 0:10:16,236
那么影片播放和观看整个影片

214
00:10:16,236 --> 0:10:18,616
就变得简单了

215
00:10:19,156 --> 0:10:22,026
除此之外 元数据

216
00:10:22,026 --> 0:10:23,906
可以促使人们发生转变

217
00:10:23,906 --> 0:10:26,236
从浏览模式

218
00:10:26,236 --> 0:10:28,286
变为购买或者 

219
00:10:28,286 --> 0:10:29,906
从浏览变为订阅

220
00:10:32,656 --> 0:10:34,906
分页点能够显示

221
00:10:34,906 --> 0:10:36,806
你正在浏览某个组的

222
00:10:36,806 --> 0:10:38,896
一个项目

223
00:10:39,816 --> 0:10:43,356
它们也能够显示

224
00:10:43,416 --> 0:10:44,926
浏览的时长

225
00:10:46,406 --> 0:10:48,566
我们将分页点

226
00:10:48,566 --> 0:10:50,206
设计的很小

227
00:10:50,346 --> 0:10:51,786
放在屏幕靠下的位置

228
00:10:51,786 --> 0:10:52,626
看起来有点像面包屑

229
00:10:53,026 --> 0:10:55,246
我们用 Apple TV 的系统材料

230
00:10:55,246 --> 0:10:57,546
来确保它们可以与

231
00:10:57,546 --> 0:10:59,506
所有下层的图像

232
00:10:59,506 --> 0:11:00,606
之间有反差

233
00:10:59,506 --> 0:11:00,606
之间有反差

234
00:11:01,156 --> 0:11:02,346
我们相信这也可以给

235
00:11:02,346 --> 0:11:07,416
你的 App 带来功能补充

236
00:11:08,076 --> 0:11:09,956
V 形箭头代表了滑动的方向

237
00:11:09,996 --> 0:11:12,176
向上 向下 向左 向右

238
00:11:12,176 --> 0:11:16,176
但是它们还有其他的功能

239
00:11:16,246 --> 0:11:20,106
它们还能表示内容在屏幕后

240
00:11:21,366 --> 0:11:23,696
它和分页点

241
00:11:24,026 --> 0:11:25,806
能够给用户带来空间感

242
00:11:25,846 --> 0:11:28,986
还能帮助用户停留在 UI 界面

243
00:11:29,776 --> 0:11:31,676
UI 界面这些小的组成部分

244
00:11:32,006 --> 0:11:34,256
是非常重要的工具

245
00:11:34,256 --> 0:11:36,286
因为它们能避免用户犯错

246
00:11:36,286 --> 0:11:37,906
打消他们的疑问

247
00:11:37,906 --> 0:11:39,586
例如这个可以点击吗

248
00:11:39,586 --> 0:11:41,686
怎样从这里退出

249
00:11:41,686 --> 0:11:45,356
我一会儿还能回到这个页面吗

250
00:11:45,596 --> 0:11:47,446
所有类似的问题

251
00:11:48,006 --> 0:11:50,696
都可能摧毁用户的体验

252
00:11:51,466 --> 0:11:56,026
所以通过顶部展区的设计

253
00:11:56,026 --> 0:11:58,446
我们增强了浏览中

254
00:11:59,116 --> 0:12:00,706
最棒的部分

255
00:11:59,116 --> 0:12:00,706
最棒的部分

256
00:12:01,736 --> 0:12:04,276
我们使用无边框的内容

257
00:12:04,276 --> 0:12:07,506
占满可利用的整个屏幕

258
00:12:07,506 --> 0:12:09,766
我们有熟悉的导航队列

259
00:12:09,766 --> 0:12:12,456
功能强大的元数据

260
00:12:12,456 --> 0:12:14,006
和简洁的手势

261
00:12:18,036 --> 0:12:19,596
但是最棒的还是

262
00:12:19,646 --> 0:12:22,236
它有一种熟悉感

263
00:12:23,166 --> 0:12:24,836
感觉就像小时候

264
00:12:24,836 --> 0:12:25,846
在搜索频道一样

265
00:12:26,436 --> 0:12:29,406
我可以来回搜索

266
00:12:29,406 --> 0:12:31,776
直到有东西吸引我

267
00:12:38,106 --> 0:12:40,276
所以如果你可以应用一些

268
00:12:40,276 --> 0:12:41,916
技巧和原则在你的设计中

269
00:12:41,916 --> 0:12:44,536
它会使你的 App 

270
00:12:44,536 --> 0:12:47,206
变得十分人性化

271
00:12:48,516 --> 0:12:53,036
在 Apple 我们坚信

272
00:12:53,146 --> 0:12:56,326
内容优先的强大力量

273
00:12:57,496 --> 0:13:00,246
它对于用户来说是最佳方案

274
00:12:57,496 --> 0:13:00,246
它对于用户来说是最佳方案

275
00:13:00,376 --> 0:13:03,996
总的来说

276
00:13:03,996 --> 0:13:06,086
我们设计了这个工具来传递内容

277
00:13:06,086 --> 0:13:13,646
它可以产生巨大的影响

278
00:13:14,116 --> 0:13:18,816
总之 电视有它的无可替代的功能

279
00:13:19,966 --> 0:13:23,746
它可以改变我们的看法

280
00:13:23,746 --> 0:13:27,936
它可以给我们带来

281
00:13:27,936 --> 0:13:29,916
一个不一样的世界

282
00:13:30,966 --> 0:13:34,506
它还可以使我们

283
00:13:34,506 --> 0:13:36,946
了解更多伟大的想法

284
00:13:37,816 --> 0:13:42,556
这就是我们的目标 不是吗

285
00:13:42,786 --> 0:13:45,426
让用户与故事产生连接

286
00:13:45,426 --> 0:13:47,296
这足以改变他们

287
00:13:48,286 --> 0:13:50,576
所以作为研发者或设计者

288
00:13:50,576 --> 0:13:52,196
我们的任务不是让用户

289
00:13:52,196 --> 0:13:53,986
焦虑地等待 不是这样

290
00:13:53,986 --> 0:13:56,476
而是打开一扇门

291
00:13:56,706 --> 0:13:59,986
让用户进来 让内容发光

292
00:14:01,366 --> 0:14:05,176
因为如果我们做到了

293
00:14:05,176 --> 0:14:07,886
用户就更有可能使用和浏览

294
00:14:08,726 --> 0:14:14,206
观看并且感到享受

295
00:14:15,496 --> 0:14:20,116
这将实现

296
00:14:20,116 --> 0:14:24,606
用户与产品的持续的情感链接

297
00:14:26,356 --> 0:14:28,956
下面 Caleb 将会告诉你们

298
00:14:28,956 --> 0:14:30,936
如何在你自己的

299
00:14:30,936 --> 0:14:32,726
App 里利用

300
00:14:32,726 --> 0:14:34,126
内容优先的体验

301
00:14:34,866 --> 0:14:35,236
Caleb

302
00:14:36,516 --> 0:14:42,136
[掌声]

303
00:14:42,636 --> 0:14:43,166
&gt;&gt; 谢谢 Tommy

304
00:14:43,326 --> 0:14:45,556
我叫 Caleb

305
00:14:45,556 --> 0:14:47,096
我是一名软件工程师

306
00:14:47,166 --> 0:14:48,026
来自 Apple TV 的团队

307
00:14:49,186 --> 0:14:50,666
今天我非常开心

308
00:14:50,666 --> 0:14:51,826
可以与你们分享一些

309
00:14:51,826 --> 0:14:53,856
我们在 tvOS 13 的顶部展区中

310
00:14:53,856 --> 0:14:56,026
进行的改善

311
00:15:00,016 --> 0:15:02,066
当用户打开 Apple TV 时

312
00:15:02,066 --> 0:15:04,086
顶部展区首先映入眼帘

313
00:15:04,676 --> 0:15:06,866
顶部展区使用户更容易

314
00:15:06,866 --> 0:15:08,706
在 App 中进行内容浏览

315
00:15:09,486 --> 0:15:11,896
还能实现便捷的交互

316
00:15:11,896 --> 0:15:14,196
他们能够直接跳转到影片播放

317
00:15:17,936 --> 0:15:19,806
今年 我们想要更新顶部展区

318
00:15:19,806 --> 0:15:21,806
使它能够利用

319
00:15:22,116 --> 0:15:24,796
你家里最大的屏幕

320
00:15:25,516 --> 0:15:27,316
并且提供

321
00:15:27,316 --> 0:15:28,826
吸引人的浏览体验

322
00:15:29,346 --> 0:15:30,336
正如 Tommy 刚刚提到的那样

323
00:15:31,676 --> 0:15:33,096
我非常开心与你们分享

324
00:15:33,096 --> 0:15:34,696
今年在 tvOS 13 中

325
00:15:34,696 --> 0:15:37,256
我们利用分页滚动视图实现了它

326
00:15:37,876 --> 0:15:42,436
相比于顶部展区来说

327
00:15:42,436 --> 0:15:43,946
分页滚动视图有两个重要的优势

328
00:15:44,866 --> 0:15:46,336
首先它具有浸入感

329
00:15:47,176 --> 0:15:48,926
全屏的图像或者视频

330
00:15:48,926 --> 0:15:51,116
可以从你的 App 播放器上

331
00:15:51,156 --> 0:15:52,856
投屏在家里的 Apple TV 上

332
00:15:55,436 --> 0:15:56,796
当你滑动进入全屏模式时

333
00:15:56,796 --> 0:15:58,666
我们的 UI 可以帮你解决

334
00:15:58,666 --> 0:16:02,716
所以你只需靠着观看

335
00:15:58,666 --> 0:16:02,716
所以你只需靠着观看

336
00:16:05,936 --> 0:16:07,786
分页滚动视图还具有互动性

337
00:16:08,456 --> 0:16:10,546
在 App 之间滑动

338
00:16:10,546 --> 0:16:12,656
或是在不同项目间滑动

339
00:16:12,656 --> 0:16:13,166
感觉就像是频道搜索一样

340
00:16:15,076 --> 0:16:17,316
当你选择一个项目之后

341
00:16:17,376 --> 0:16:18,676
你可以看到丰富的元数据

342
00:16:18,676 --> 0:16:19,686
在这里 屏幕的底部

343
00:16:19,686 --> 0:16:22,156
我们认为这是一个 Apple TV 好办法

344
00:16:22,156 --> 0:16:23,426
可以将

345
00:16:23,426 --> 0:16:24,806
你 App 中的精彩内容

346
00:16:24,806 --> 0:16:28,036
展示在家中的 Apple TV 的屏幕上

347
00:16:28,646 --> 0:16:32,736
我知道内容各不相同

348
00:16:32,736 --> 0:16:35,486
一个 UI 风格也许不能

349
00:16:35,486 --> 0:16:37,366
满足所有人的需求

350
00:16:38,486 --> 0:16:40,946
所以我们在我们的 API 中

351
00:16:40,946 --> 0:16:42,606
为你提供了两种不同的形式

352
00:16:44,066 --> 0:16:47,056
第一个是动态分页滚动视图

353
00:16:51,176 --> 0:16:53,266
它主要将重点放在

354
00:16:53,266 --> 0:16:56,106
App 中的全屏视频图像内容上

355
00:16:56,106 --> 0:16:58,136
只提供

356
00:16:58,136 --> 0:17:00,316
很少的 UI 信息

357
00:16:58,136 --> 0:17:00,316
很少的 UI 信息

358
00:17:00,316 --> 0:17:01,156
供用户进行自定义

359
00:17:02,306 --> 0:17:04,356
一开始在左上角

360
00:17:05,076 --> 0:17:07,455
有名称和文本名称

361
00:17:08,736 --> 0:17:10,435
这些可以告诉正在浏览

362
00:17:10,435 --> 0:17:11,976
顶部展区内容的人

363
00:17:11,976 --> 0:17:13,906
他们正在看的内容是什么

364
00:17:13,906 --> 0:17:14,356
和你们为什么要展示它

365
00:17:14,935 --> 0:17:17,465
你可以将文本名称

366
00:17:17,465 --> 0:17:18,996
看作类似于下拉展示列表

367
00:17:19,816 --> 0:17:21,066
在顶部展区的项目之间它

368
00:17:21,306 --> 0:17:23,165
添加了一个逻辑分组

369
00:17:23,876 --> 0:17:28,156
接下来是播放按钮

370
00:17:28,156 --> 0:17:29,236
和更多信息按钮

371
00:17:30,366 --> 0:17:31,476
这些按钮可以帮助

372
00:17:31,476 --> 0:17:33,066
正在浏览你的内容的人直接

373
00:17:33,066 --> 0:17:38,086
跳转到你的 App 中的这个项目

374
00:17:38,086 --> 0:17:40,346
或者直接开始播放

375
00:17:40,946 --> 0:17:42,966
或者了解更多的信息

376
00:17:45,056 --> 0:17:46,626
我们提供的第二种风格叫做

377
00:17:47,106 --> 0:17:48,846
细节分页滚动视图

378
00:17:49,426 --> 0:17:53,616
它长这样子

379
00:17:53,776 --> 0:17:54,796
你们可以看到一些熟悉的 UI 内容

380
00:17:54,796 --> 0:17:57,286
左上角是

381
00:17:57,286 --> 0:17:59,376
标题和文本名称 

382
00:17:59,376 --> 0:18:00,606
左下角是播放按钮和

383
00:17:59,376 --> 0:18:00,606
左下角是播放按钮和

384
00:18:00,606 --> 0:18:01,546
更多信息按钮

385
00:18:02,266 --> 0:18:03,856
但是 我们的 API 也可以提供

386
00:18:03,856 --> 0:18:05,486
丰富的元数据

387
00:18:05,486 --> 0:18:06,396
就是这个被强调的地方

388
00:18:07,346 --> 0:18:10,426
一些区域 例如概要 类型 时长

389
00:18:11,376 --> 0:18:14,626
或者是一些媒体选项

390
00:18:14,626 --> 0:18:16,206
都显示着

391
00:18:16,426 --> 0:18:17,716
与这个内容相关的信息

392
00:18:17,716 --> 0:18:19,556
和在电视上播放内容的时间

393
00:18:19,556 --> 0:18:23,626
它支持 4K HDR 

394
00:18:23,626 --> 0:18:25,796
还有或许对于听觉障碍的人很重要的

395
00:18:25,796 --> 0:18:27,376
它支持隐藏字幕和

396
00:18:27,376 --> 0:18:28,396
口述影像

397
00:18:28,806 --> 0:18:32,856
在最右边

398
00:18:32,856 --> 0:18:34,346
有一列命名的属性

399
00:18:35,366 --> 0:18:36,726
这是关键值数据

400
00:18:36,726 --> 0:18:38,626
关于你的 App 是被完全控制的

401
00:18:38,626 --> 0:18:41,396
在这个例子中 我们看到许多的

402
00:18:41,396 --> 0:18:42,936
特邀演员的名字

403
00:18:42,936 --> 0:18:44,506
出现在演员部分

404
00:18:44,506 --> 0:18:46,296
和许多电影导演出现在

405
00:18:46,296 --> 0:18:47,266
导演部分

406
00:18:48,146 --> 0:18:49,146
很重要的是

407
00:18:49,146 --> 0:18:50,606
要记住当你填充

408
00:18:50,606 --> 0:18:53,246
这些区域的时候 

409
00:18:53,306 --> 0:18:54,806
要本地化和复数化

410
00:18:54,806 --> 0:18:56,146
你想要播放的内容的数量

411
00:18:56,786 --> 0:19:00,076
这就是全新的分页滚动视图

412
00:18:56,786 --> 0:19:00,076
这就是全新的分页滚动视图

413
00:19:00,666 --> 0:19:03,616
当你使用它时

414
00:19:03,616 --> 0:19:05,206
有一些非常棒的地方

415
00:19:05,206 --> 0:19:06,626
希望你们能记住

416
00:19:08,956 --> 0:19:10,726
分页滚动视图的最佳功能是

417
00:19:10,726 --> 0:19:11,816
内容发现

418
00:19:12,716 --> 0:19:13,826
有一些好的例子

419
00:19:13,826 --> 0:19:16,586
比如一部故事片

420
00:19:16,586 --> 0:19:18,706
一季电视节目

421
00:19:18,706 --> 0:19:20,646
或是一些个性化的推荐

422
00:19:20,646 --> 0:19:21,596
对于签约的用户

423
00:19:22,136 --> 0:19:27,276
它会定期更新

424
00:19:27,636 --> 0:19:28,956
用户可以借此机会

425
00:19:28,956 --> 0:19:30,736
将顶部展区展示的内容

426
00:19:30,736 --> 0:19:33,976
拖拽到你的 App 里

427
00:19:34,236 --> 0:19:37,906
因此它需要是新鲜且充满活力的

428
00:19:40,426 --> 0:19:42,456
就像 Tommy 说的

429
00:19:42,456 --> 0:19:43,526
我们不希望提供太多的选择

430
00:19:43,526 --> 0:19:44,276
让他们有压迫感

431
00:19:45,126 --> 0:19:46,706
顶部展区有太多的项目

432
00:19:46,866 --> 0:19:48,166
只会增添噪音 变得更加杂乱

433
00:19:48,726 --> 0:19:49,716
所以我们想出了一个合适的数字

434
00:19:49,716 --> 0:19:50,756
需要记住

435
00:19:50,756 --> 0:19:55,376
是 5 个到 10 个之间

436
00:19:55,586 --> 0:19:56,936
下一个 图像

437
00:19:58,066 --> 0:19:59,796
就像我说的 顶部展区

438
00:19:59,796 --> 0:20:01,616
分页滚动视图的内容是全屏的

439
00:19:59,796 --> 0:20:01,616
分页滚动视图的内容是全屏的

440
00:20:02,306 --> 0:20:04,336
所以你的图像需要是 

441
00:20:04,336 --> 0:20:06,126
1920 乘 1080 分辨率的 

442
00:20:06,126 --> 0:20:11,386
它们应该占满整个内容的边框

443
00:20:11,866 --> 0:20:13,066
我们的 API 可以让你

444
00:20:13,066 --> 0:20:15,156
设置图像为

445
00:20:15,156 --> 0:20:17,856
1080p 设备上播放的 1x 分辨率 

446
00:20:17,956 --> 0:20:20,146
或是 4K 设备上播放的 2x 分辨率

447
00:20:20,606 --> 0:20:22,906
这对你来说是一个很不错的方法

448
00:20:22,906 --> 0:20:24,726
帮助我们优化你的内容

449
00:20:24,806 --> 0:20:27,736
以便在顶部展区实现最佳的用户体验

450
00:20:28,256 --> 0:20:31,996
现在讲一下安全区域

451
00:20:33,276 --> 0:20:34,446
tvOS 上标准的安全区域

452
00:20:34,446 --> 0:20:36,406
是这样的

453
00:20:36,476 --> 0:20:39,196
有 90 个填充点在

454
00:20:39,196 --> 0:20:40,176
屏幕的前缘和后缘

455
00:20:40,176 --> 0:20:42,176
有 60 个填充点在

456
00:20:42,176 --> 0:20:44,586
上缘和下缘

457
00:20:45,076 --> 0:20:46,586
请记住 你的内容

458
00:20:46,586 --> 0:20:48,086
是允许超过安全区域的

459
00:20:48,086 --> 0:20:50,456
但是基于设备或电视设定

460
00:20:50,456 --> 0:20:52,506
用户看不到超出的部分

461
00:20:52,506 --> 0:20:54,166
也无法与超出的部分进行交互

462
00:20:54,226 --> 0:20:58,076
对于分页滚动视图

463
00:20:58,076 --> 0:21:00,326
当你将图片放入分页滚动视图

464
00:20:58,076 --> 0:21:00,326
当你将图片放入分页滚动视图

465
00:21:00,326 --> 0:21:01,726
记住它们可能会在

466
00:21:01,726 --> 0:21:03,836
系统 UI 下显示 就像 V 形箭头

467
00:21:03,956 --> 0:21:06,426
细节 UI 在最下面

468
00:21:06,426 --> 0:21:08,606
或者是在 App 网格

469
00:21:09,356 --> 0:21:10,556
所以 如果在你的图片中

470
00:21:10,556 --> 0:21:12,586
有标题 要确保

471
00:21:12,586 --> 0:21:13,536
它们不会与系统用户界面冲突

472
00:21:13,536 --> 0:21:14,856
还要确保它们不会很难

473
00:21:14,856 --> 0:21:15,826
找到和使用

474
00:21:16,396 --> 0:21:20,826
最后是视频

475
00:21:21,856 --> 0:21:23,656
就像 Tommy 展示的那样

476
00:21:23,656 --> 0:21:25,286
你可以为你的内容播放视频或是预告片

477
00:21:25,286 --> 0:21:27,346
在顶部展区分页滚动视图里面

478
00:21:28,056 --> 0:21:30,816
这些视频需要是 1080p 高清的

479
00:21:31,856 --> 0:21:34,466
如果可能的话 你应该

480
00:21:34,466 --> 0:21:36,776
用 HTTP Live Streaming 或是 HLS 

481
00:21:36,776 --> 0:21:38,666
传送给我们

482
00:21:39,916 --> 0:21:41,296
这是另一个方法

483
00:21:41,296 --> 0:21:43,166
帮助我们优化你的内容

484
00:21:43,296 --> 0:21:45,276
来实现顶部展区的最佳用户体验

485
00:21:46,056 --> 0:21:47,166
这些视频需要能够快速载入

486
00:21:47,166 --> 0:21:48,866
我们应该优化它们

487
00:21:48,866 --> 0:21:51,246
在用户现有的带宽的基础上

488
00:21:54,576 --> 0:21:56,266
就像我刚才所得那样

489
00:21:56,356 --> 0:21:57,456
分页滚动视图是一个很好的地方

490
00:21:57,456 --> 0:21:59,206
来预览你们的内容

491
00:21:59,796 --> 0:22:01,056
我们不希望你们提供

492
00:21:59,796 --> 0:22:01,056
我们不希望你们提供

493
00:22:01,056 --> 0:22:02,816
完整长度的影片

494
00:22:03,116 --> 0:22:03,966
在分页滚动视图里面 

495
00:22:05,656 --> 0:22:07,156
所以我们认为

496
00:22:07,156 --> 0:22:08,666
你们预告片合适的时长

497
00:22:08,666 --> 0:22:10,236
大概是 2 到 5 分钟

498
00:22:10,796 --> 0:22:14,296
并且我们鼓励

499
00:22:14,296 --> 0:22:15,966
在视频中加入声音

500
00:22:16,076 --> 0:22:17,536
我们会确保声音只在

501
00:22:17,536 --> 0:22:19,376
合适的时间播放

502
00:22:19,956 --> 0:22:22,426
也就是说在用户执行了某个特定操作后

503
00:22:26,036 --> 0:22:27,926
因此现在我们拥有四个 UI 风格

504
00:22:27,926 --> 0:22:30,166
在顶部展区供你选择

505
00:22:30,296 --> 0:22:32,986
首先是动态分页滚动视图

506
00:22:34,696 --> 0:22:38,166
细节分页滚动视图 

507
00:22:38,646 --> 0:22:41,886
切分部分和插入内容

508
00:22:42,396 --> 0:22:45,466
记住如果你的内容

509
00:22:45,536 --> 0:22:47,356
在分页滚动视图不能播放 

510
00:22:47,356 --> 0:22:49,096
如果你没有全屏的图像或是视频

511
00:22:49,096 --> 0:22:50,946
那也没关系

512
00:22:51,436 --> 0:22:53,016
我们依然鼓励你们使用

513
00:22:53,016 --> 0:22:54,306
切分部分和插入内容

514
00:22:54,306 --> 0:22:55,576
的风格来提供

515
00:22:55,576 --> 0:22:57,486
轻松容易的内容浏览体验

516
00:22:57,766 --> 0:23:00,546
在顶部展区中

517
00:22:57,766 --> 0:23:00,546
在顶部展区中

518
00:23:02,656 --> 0:23:04,006
这就是 UI 的大概情况

519
00:23:04,006 --> 0:23:06,086
和一点它的工作说明

520
00:23:07,046 --> 0:23:08,396
下面我们来谈一谈

521
00:23:08,396 --> 0:23:09,026
如何建立一个 UI

522
00:23:10,016 --> 0:23:12,246
你将要利用顶部展区扩展来完成

523
00:23:13,426 --> 0:23:14,566
今年 我们有一个全新的

524
00:23:14,566 --> 0:23:16,246
扩展和 API

525
00:23:16,246 --> 0:23:19,566
这让使用顶部展区比以前更容易

526
00:23:19,746 --> 0:23:22,416
首先 添加一个新的

527
00:23:22,416 --> 0:23:24,186
顶部展区扩展标签 

528
00:23:24,186 --> 0:23:25,986
在你的 App 的 Xcode 中

529
00:23:25,986 --> 0:23:28,756
它将会允许你访问

530
00:23:28,886 --> 0:23:31,056
分页滚动视图和

531
00:23:31,056 --> 0:23:31,626
我们新的 API

532
00:23:33,046 --> 0:23:34,376
下面我们来简要讨论一下

533
00:23:34,376 --> 0:23:36,136
三个主要的部分

534
00:23:37,456 --> 0:23:38,866
首先是

535
00:23:38,866 --> 0:23:40,616
TVTopShelfContentProvider

536
00:23:41,636 --> 0:23:43,156
这个是你扩展的

537
00:23:43,156 --> 0:23:45,096
根对象 它负责

538
00:23:45,096 --> 0:23:46,486
响应系统对于

539
00:23:46,486 --> 0:23:47,396
顶部展区数据的请求

540
00:23:47,996 --> 0:23:50,776
我们全新的 API 

541
00:23:50,776 --> 0:23:51,786
使返回内容和异步响应

542
00:23:51,786 --> 0:23:54,296
变得非常容易

543
00:23:55,696 --> 0:23:58,396
接下来是电视顶部展区内容

544
00:23:59,186 --> 0:24:00,796
这是一个协议 

545
00:23:59,186 --> 0:24:00,796
这是一个协议 

546
00:24:00,796 --> 0:24:02,316
你不会与它进行太多的直接交互

547
00:24:02,796 --> 0:24:03,986
我们为你提供了三个具体的类

548
00:24:03,986 --> 0:24:05,796
与三个主要的 UI 风格

549
00:24:05,796 --> 0:24:07,256
一一对应

550
00:24:08,096 --> 0:24:10,936
分页滚动视图 切分部分和插入

551
00:24:12,206 --> 0:24:13,516
每一个类都有它自己的特点

552
00:24:13,576 --> 0:24:16,506
能够与其他的用户界面形式区分

553
00:24:17,076 --> 0:24:19,536
最后是

554
00:24:19,586 --> 0:24:20,686
TVTopShelfItem

555
00:24:22,026 --> 0:24:23,406
与内容分类相似

556
00:24:23,546 --> 0:24:24,826
针对每一个内容风格

557
00:24:24,826 --> 0:24:26,246
我们分了不同的类 

558
00:24:26,386 --> 0:24:28,706
对于不同的 UI 风格 它们具有不同的性能

559
00:24:29,976 --> 0:24:32,186
分页滚动视图 项目集合

560
00:24:32,186 --> 0:24:33,196
展示切分部分内容的切分部分项目

561
00:24:33,196 --> 0:24:35,546
和内容项目

562
00:24:35,546 --> 0:24:36,846
具有足够的性能来

563
00:24:36,846 --> 0:24:38,106
展示插入内容

564
00:24:38,606 --> 0:24:41,056
所以现在我们不讲更多的代码

565
00:24:41,056 --> 0:24:42,726
如果我们可以做一个演示才更有趣 

566
00:24:42,726 --> 0:24:44,566
来看一看它们都是如何工作的

567
00:24:44,736 --> 0:24:45,586
所以我要邀请我的同事 Felipe

568
00:24:45,586 --> 0:24:48,726
上台帮我一下

569
00:24:48,996 --> 0:24:49,316
Felipe

570
00:24:51,516 --> 0:24:54,500
[掌声]

571
00:24:59,416 --> 0:25:01,116
正像我说的

572
00:24:59,416 --> 0:25:01,116
正像我说的

573
00:25:01,216 --> 0:25:02,466
第一步是给我们项目

574
00:25:02,466 --> 0:25:04,636
在 Xcode 添加一个新的顶部展区扩展标签

575
00:25:05,476 --> 0:25:07,036
所以首先我们添加一个新的标签

576
00:25:08,036 --> 0:25:09,576
在 tvOS 标签中

577
00:25:09,576 --> 0:25:11,846
我们选择电视顶部展区扩展

578
00:25:12,286 --> 0:25:16,266
我们给它起个名字

579
00:25:16,266 --> 0:25:17,586
还要确保 App 弹出窗口中的嵌入标签 

580
00:25:17,586 --> 0:25:19,236
被设置为正确值

581
00:25:19,856 --> 0:25:22,296
这样一来 我们已经有一个

582
00:25:22,296 --> 0:25:23,296
扩展在我们的项目里

583
00:25:23,296 --> 0:25:24,566
还包括一些支持文件 

584
00:25:24,566 --> 0:25:26,496
所以我们现在跳过这个

585
00:25:26,496 --> 0:25:27,426
直接进入我们的 ContentProvider

586
00:25:27,486 --> 0:25:30,726
它就是这样子的

587
00:25:30,726 --> 0:25:31,746
当你添加一个新的顶部展区扩展

588
00:25:31,746 --> 0:25:32,846
在你的项目里

589
00:25:33,996 --> 0:25:35,466
在 ContentProvider 级

590
00:25:35,556 --> 0:25:38,696
子级 TVTopShelfContentProvider

591
00:25:38,696 --> 0:25:40,516
并执行 loadTopShelfContent

592
00:25:40,926 --> 0:25:42,036
它需要使用 completionHandler

593
00:25:42,606 --> 0:25:44,566
现在我们通过 nil 调用它

594
00:25:44,566 --> 0:25:45,886
它的意思是

595
00:25:45,886 --> 0:25:47,476
现在我们没有要展示的东西

596
00:25:47,476 --> 0:25:48,836
下面我们来替换它 

597
00:25:48,836 --> 0:25:49,406
用一些实际的内容

598
00:25:54,556 --> 0:25:56,326
这里 我们有一些

599
00:25:56,326 --> 0:25:57,606
来自 MoviesClient 的故事片

600
00:25:57,606 --> 0:25:59,506
它异步响应了

601
00:25:59,566 --> 0:26:01,426
一个电影回应的结果

602
00:25:59,566 --> 0:26:01,426
一个电影回应的结果

603
00:26:01,586 --> 0:26:04,126
或一个错误的结果

604
00:26:04,796 --> 0:26:05,766
我们分别来填写一下

605
00:26:05,766 --> 0:26:08,356
以 success 为开头的实际案例

606
00:26:08,886 --> 0:26:10,676
这里 我们通过

607
00:26:10,676 --> 0:26:12,436
一个真实模型对象调用 completionHandler

608
00:26:13,066 --> 0:26:15,136
如果是错误的结果的话 

609
00:26:15,136 --> 0:26:15,766
我们仍然想要通过

610
00:26:15,766 --> 0:26:17,106
nil 来调用 completionHandler 

611
00:26:17,106 --> 0:26:18,236
来说明

612
00:26:18,236 --> 0:26:19,896
现在我们不想对这个系统再进行更多操作

613
00:26:21,036 --> 0:26:23,216
很好 我们来添加一些扩展

614
00:26:23,216 --> 0:26:24,486
给我们的模型

615
00:26:24,486 --> 0:26:26,086
我们一起来填写丰富的

616
00:26:26,086 --> 0:26:26,706
顶部展区内容

617
00:26:27,206 --> 0:26:31,146
这里我们有两个扩展

618
00:26:31,146 --> 0:26:32,996
一个放在电影对象上

619
00:26:32,996 --> 0:26:34,836
它知道如何返回顶部展区

620
00:26:35,026 --> 0:26:35,886
的切分项目

621
00:26:36,836 --> 0:26:38,256
另外一个在 MoviesResponse

622
00:26:38,346 --> 0:26:39,606
它知道如何选取所有的项目

623
00:26:39,606 --> 0:26:41,226
和怎样把它们塞进

624
00:26:41,226 --> 0:26:42,356
切分内容对象里

625
00:26:42,866 --> 0:26:43,966
在这 它有一个名称叫做

626
00:26:43,996 --> 0:26:45,996
故事片和一些项目

627
00:26:46,516 --> 0:26:49,376
我们的项目分类有点无聊

628
00:26:49,506 --> 0:26:50,746
我们现在只有一个名称

629
00:26:50,986 --> 0:26:52,176
让我们添加一些性能

630
00:26:52,176 --> 0:26:55,016
从图片开始

631
00:26:55,576 --> 0:26:58,356
正如我所说 我们的 API 可以帮助你

632
00:26:58,356 --> 0:27:02,426
制定图像的屏幕比例为 1x 和 2x

633
00:26:58,356 --> 0:27:02,426
制定图像的屏幕比例为 1x 和 2x

634
00:27:02,426 --> 0:27:03,766
我们现在正在做

635
00:27:03,766 --> 0:27:04,946
并且我们将图像的形状

636
00:27:04,946 --> 0:27:06,886
设置为 HDTV 这就是说我们

637
00:27:06,886 --> 0:27:08,656
想要一个 16 乘 9 比例的图像

638
00:27:08,656 --> 0:27:09,606
呈现在切分的顶部展区中

639
00:27:10,106 --> 0:27:13,416
现在我们需要处理用户操作

640
00:27:13,416 --> 0:27:14,276
当用户与我们顶部展区的项目

641
00:27:14,276 --> 0:27:15,736
交互时会发生什么呢

642
00:27:16,496 --> 0:27:17,786
从 displayAction 开始说起

643
00:27:18,356 --> 0:27:19,146
这个发生在

644
00:27:19,146 --> 0:27:20,706
当用户选择你的项目时 

645
00:27:20,706 --> 0:27:21,856
它在顶部展区被选中

646
00:27:22,376 --> 0:27:24,166
playAction 会发生

647
00:27:24,166 --> 0:27:27,196
当用户按了 Siri Remote 上的播放按钮

648
00:27:27,196 --> 0:27:28,166
这个项目被选中

649
00:27:28,166 --> 0:27:29,966
它会被传送到你的 App

650
00:27:29,966 --> 0:27:32,296
通过开放网址处理程序

651
00:27:32,296 --> 0:27:34,006
很重要的是

652
00:27:34,006 --> 0:27:35,526
你以最快的速度

653
00:27:35,526 --> 0:27:36,896
把它们直接拿到内容中来

654
00:27:38,386 --> 0:27:38,936
就是这样

655
00:27:39,316 --> 0:27:40,726
我们运行一下看看是什么样

656
00:27:49,066 --> 0:27:50,086
太棒了

657
00:27:50,936 --> 0:27:52,526
如果你今天有一个扩展

658
00:27:52,526 --> 0:27:54,356
需要使用顶部展区 

659
00:27:54,356 --> 0:27:55,276
它可能就长这样

660
00:27:55,916 --> 0:27:56,826
我们有分区名称

661
00:27:56,826 --> 0:27:58,686
如果我们选中周围 我们可以看到

662
00:27:58,686 --> 0:28:01,046
每个项目的名称被隐藏了

663
00:27:58,686 --> 0:28:01,046
每个项目的名称被隐藏了

664
00:28:01,596 --> 0:28:03,006
但是我们很想要使用

665
00:28:03,006 --> 0:28:05,416
全新的浸入式的浏览体验

666
00:28:05,416 --> 0:28:06,156
在顶部展区中

667
00:28:06,156 --> 0:28:08,136
所以让我们回到 Xcode 

668
00:28:08,136 --> 0:28:09,116
看看我们必须要做哪些改变

669
00:28:11,396 --> 0:28:12,756
首先我们要做的事

670
00:28:12,756 --> 0:28:14,136
改变 makeTopShelfItem 功能

671
00:28:14,136 --> 0:28:17,976
来返回电视顶部展区分页滚动视图项目

672
00:28:25,516 --> 0:28:26,986
编译器立刻就会

673
00:28:26,986 --> 0:28:28,646
告诉我们图像的

674
00:28:28,646 --> 0:28:30,026
形状不再有效

675
00:28:30,106 --> 0:28:31,216
所以让我们去掉线条

676
00:28:31,646 --> 0:28:33,636
现在我们只需要增加两个性能

677
00:28:33,636 --> 0:28:35,066
来填写剩下的

678
00:28:35,066 --> 0:28:36,646
分页滚动视图内容

679
00:28:37,836 --> 0:28:39,886
第一个还是文本名称

680
00:28:40,096 --> 0:28:41,276
还是这样 分组头

681
00:28:41,276 --> 0:28:42,086
告诉用户我们

682
00:28:42,086 --> 0:28:42,576
正在看什么

683
00:28:43,776 --> 0:28:46,166
previewVideoURL

684
00:28:46,166 --> 0:28:47,646
这是你的图像内容播放结束后

685
00:28:47,646 --> 0:28:49,026
要播放的东西

686
00:28:49,536 --> 0:28:53,706
最后 我们需要更新

687
00:28:53,706 --> 0:28:55,256
makeTopShelfContent 功能

688
00:28:55,256 --> 0:28:57,846
返回一个 TVTopShelfCarouselContent

689
00:28:57,846 --> 0:28:58,906
来匹配我们的分页滚动视图项目

690
00:28:59,536 --> 0:29:02,126
这里 我们正在请求

691
00:28:59,536 --> 0:29:02,126
这里 我们正在请求

692
00:29:02,186 --> 0:29:03,616
动态形式的分页滚动视图

693
00:29:07,276 --> 0:29:07,976
好的 我们再运行一次

694
00:29:19,666 --> 0:29:22,396
太棒了 它看起来真棒

695
00:29:22,796 --> 0:29:24,676
我们从一个小的

696
00:29:24,756 --> 0:29:27,366
静态的插入框变为

697
00:29:27,366 --> 0:29:28,546
一个大的全屏的播放内容

698
00:29:28,546 --> 0:29:29,586
的视频预览

699
00:29:30,486 --> 0:29:31,726
当 Felipe 向上滑动进入 

700
00:29:31,726 --> 0:29:33,206
全屏模式 我们的

701
00:29:33,206 --> 0:29:34,906
UI 可以避开

702
00:29:34,906 --> 0:29:36,566
他能在不同的项目间滑动

703
00:29:36,566 --> 0:29:37,826
去看我们顶部展区中的其他内容

704
00:29:38,676 --> 0:29:40,146
当他点按菜单 

705
00:29:40,146 --> 0:29:42,196
我们可以回到上面的网格

706
00:29:42,196 --> 0:29:42,896
就是刚才所在的位置

707
00:29:44,276 --> 0:29:44,876
现在 我们回到我们的项目

708
00:29:44,876 --> 0:29:46,566
再做一个改变

709
00:29:47,526 --> 0:29:48,456
我们想要利用

710
00:29:48,456 --> 0:29:51,596
顶部展区 API 提供的全部的元数据

711
00:29:52,016 --> 0:29:53,026
所以我们添加一些新的属性

712
00:29:53,026 --> 0:29:54,566
到我们的项目类

713
00:29:55,046 --> 0:29:57,466
就像我提到的

714
00:29:57,466 --> 0:29:59,506
例如 概要 类型 

715
00:30:00,056 --> 0:30:01,906
媒体选项这些字段

716
00:30:02,046 --> 0:30:03,446
这只是描述了更多的内容

717
00:30:03,446 --> 0:30:04,836
关于我们正在为我们的用户

718
00:30:04,836 --> 0:30:06,006
寻找的项目

719
00:30:07,416 --> 0:30:09,016
最后 让我们更新

720
00:30:09,016 --> 0:30:10,636
我们的内容对象来

721
00:30:10,636 --> 0:30:12,376
返回一个细节的分页滚动视图

722
00:30:12,926 --> 0:30:15,756
我们再运行一次

723
00:30:20,636 --> 0:30:21,866
所以你会发现我们只是

724
00:30:21,866 --> 0:30:23,836
改变了一些类 

725
00:30:23,836 --> 0:30:25,296
增添了一些性能

726
00:30:25,296 --> 0:30:26,706
就使切分的内容变为

727
00:30:26,706 --> 0:30:29,306
这个动态的 浸入式的体验

728
00:30:30,266 --> 0:30:31,266
当 Felipe 向上滑动进入

729
00:30:31,266 --> 0:30:32,176
全屏模式时 你会发现

730
00:30:32,176 --> 0:30:33,036
我们没有立刻呈现

731
00:30:33,036 --> 0:30:34,336
元数据 UI

732
00:30:34,386 --> 0:30:35,206
我们不想让用户有压迫感

733
00:30:35,206 --> 0:30:37,266
一次给他们过多的信息

734
00:30:37,576 --> 0:30:39,346
所以如果需要它会出现

735
00:30:39,346 --> 0:30:41,406
当他轻敲或者点击 Siri Remote 时

736
00:30:42,756 --> 0:30:43,566
在这里 你会看到所有的信息

737
00:30:43,566 --> 0:30:45,566
就是我们刚刚填写的

738
00:30:45,566 --> 0:30:46,936
就是这样

739
00:30:47,176 --> 0:30:49,296
这就是在你的 App 里使用顶部展区

740
00:30:49,296 --> 0:30:50,846
所需的所有步骤

741
00:30:51,056 --> 0:30:51,516
谢谢 Felipe

742
00:30:52,516 --> 0:30:57,696
[掌声]

743
00:30:58,196 --> 0:31:00,206
所以你会发现如此的简单

744
00:30:58,196 --> 0:31:00,206
所以你会发现如此的简单

745
00:31:01,516 --> 0:31:03,376
就可以在 Apple TV 的顶部展区里

746
00:31:03,376 --> 0:31:06,316
提供一个很棒的浏览体验

747
00:31:07,436 --> 0:31:10,266
你们看到了分页滚动页面

748
00:31:10,266 --> 0:31:11,876
以及它如何使一个静态插入的

749
00:31:11,876 --> 0:31:15,046
顶部展区内容变为

750
00:31:15,046 --> 0:31:18,196
大的 令人兴奋的 充满吸引力的体验

751
00:31:19,186 --> 0:31:20,966
你看到了全新的扩展和 API

752
00:31:20,966 --> 0:31:22,556
它们让应用这些

753
00:31:22,556 --> 0:31:24,146
变得比以往更加容易

754
00:31:25,066 --> 0:31:26,406
我们已经迫不及待想看看

755
00:31:26,406 --> 0:31:29,016
你们能够利用 tvOS 13 里的顶部展区做些什么

756
00:31:30,116 --> 0:31:31,076
现在 我将舞台交给 Dale

757
00:31:31,076 --> 0:31:32,636
让他来谈一谈如何将

758
00:31:32,636 --> 0:31:34,546
内容优先的设计理念

759
00:31:34,866 --> 0:31:36,426
融入你的 App

760
00:31:37,376 --> 0:31:37,576
Dale

761
00:31:38,516 --> 0:31:40,986
[掌声]

762
00:31:41,486 --> 0:31:42,656
&gt;&gt; 谢谢 Caleb

763
00:31:46,596 --> 0:31:48,016
我叫 Dale Taylor 

764
00:31:48,016 --> 0:31:49,336
我是 tvOS 团队中的一名工程师

765
00:31:49,506 --> 0:31:50,946
今天首先我要

766
00:31:50,946 --> 0:31:51,996
聊一下用户描述文件

767
00:31:51,996 --> 0:31:53,756
以及你们如何使用它们

768
00:31:53,756 --> 0:31:55,016
给用户展示

769
00:31:55,016 --> 0:31:57,446
他们想要的内容

770
00:31:58,876 --> 0:32:01,606
在 tvOS 13 里 

771
00:31:58,876 --> 0:32:01,606
在 tvOS 13 里 

772
00:32:01,606 --> 0:32:03,086
我们给 TV 安装了控制中心

773
00:32:03,306 --> 0:32:04,806
它可以使用户快速进入

774
00:32:04,806 --> 0:32:06,666
常用操作

775
00:32:06,666 --> 0:32:08,656
例如 睡眠 搜索和正在播放

776
00:32:09,026 --> 0:32:10,266
另外 我们在最上面的位置

777
00:32:10,266 --> 0:32:11,446
添加了快速切换用户

778
00:32:12,366 --> 0:32:14,026
它给用户提供了一个快捷的方式

779
00:32:14,026 --> 0:32:15,456
快速切换到

780
00:32:15,456 --> 0:32:16,496
个性化内容和推荐

781
00:32:16,496 --> 0:32:19,186
在保留文本的情况下

782
00:32:19,976 --> 0:32:22,536
我们为研发者开启了这个

783
00:32:22,536 --> 0:32:23,756
因此你们可以在你的 App 里

784
00:32:23,756 --> 0:32:24,926
使用多用户

785
00:32:25,296 --> 0:32:26,766
让我给你们展示一下这个长什么样

786
00:32:27,036 --> 0:32:27,966
首先我会举个例子

787
00:32:29,636 --> 0:32:31,916
有多少人曾经坐下想看电视的时候

788
00:32:31,916 --> 0:32:33,966
只能看到

789
00:32:33,966 --> 0:32:35,246
这样的东西

790
00:32:35,786 --> 0:32:37,856
我们想让它变成过去式

791
00:32:38,586 --> 0:32:39,906
尽管我们非常开心地看到

792
00:32:39,906 --> 0:32:41,226
你们的 App 提供了很棒的

793
00:32:41,226 --> 0:32:43,496
个性化推荐 

794
00:32:43,496 --> 0:32:45,586
但是这样的屏幕并没有提供

795
00:32:45,626 --> 0:32:46,596
一个内容优先的体验

796
00:32:47,066 --> 0:32:48,516
这特别糟糕

797
00:32:48,516 --> 0:32:50,896
因为在 tvOS 13 里 

798
00:32:50,896 --> 0:32:51,856
Apple TV 已经知道你是谁

799
00:32:52,206 --> 0:32:53,956
所以为什么它还是会这样问

800
00:32:54,956 --> 0:32:55,906
我们来看一下我们可以做些什么

801
00:32:55,906 --> 0:32:56,606
来帮助你们

802
00:32:57,196 --> 0:33:00,346
我们在 tvOS 13 中有全新的 API 和电视服务

803
00:32:57,196 --> 0:33:00,346
我们在 tvOS 13 中有全新的 API 和电视服务

804
00:33:00,346 --> 0:33:03,376
即 TVUserManager 来帮助你们

805
00:33:03,376 --> 0:33:04,746
基于配置文件的 App

806
00:33:04,806 --> 0:33:05,896
融入多用户使用功能

807
00:33:06,666 --> 0:33:07,776
我们为你们做了一些事情

808
00:33:08,566 --> 0:33:10,456
我们为你们提供了一个标识符

809
00:33:10,456 --> 0:33:11,866
代表目前 TV 上的用户

810
00:33:11,866 --> 0:33:13,626
我们还会让你们知道

811
00:33:13,626 --> 0:33:14,806
什么时候标识符会发生变化

812
00:33:15,536 --> 0:33:16,806
这很重要因为有了控制中心

813
00:33:16,806 --> 0:33:18,476
甚至是当你的 App 处在前景的时候

814
00:33:18,526 --> 0:33:19,996
它也会发生

815
00:33:20,856 --> 0:33:22,596
我们还会给你们提供一些系统 UI

816
00:33:22,596 --> 0:33:24,376
来帮助使用你们 App 的用户

817
00:33:24,446 --> 0:33:26,266
建立我们的用户标识符

818
00:33:26,616 --> 0:33:27,916
和你们的 App 配置文件之间的映射

819
00:33:29,546 --> 0:33:30,586
所以你们要怎样做才能

820
00:33:30,586 --> 0:33:31,916
与 TVUserManager 结合呢

821
00:33:33,326 --> 0:33:35,306
最重要的 

822
00:33:35,306 --> 0:33:36,776
你们要负责建立

823
00:33:36,776 --> 0:33:38,516
用户标识符和配置文件之间的映射

824
00:33:38,516 --> 0:33:39,666
在你们的 App 中

825
00:33:39,666 --> 0:33:40,956
总的来说

826
00:33:40,956 --> 0:33:41,776
你们想要将它储存在用户默认中

827
00:33:41,776 --> 0:33:43,416
使每个用户标识符

828
00:33:43,416 --> 0:33:45,016
与一个配置文件建立映射

829
00:33:45,626 --> 0:33:46,886
最完美的是

830
00:33:46,886 --> 0:33:48,406
多个用户标识符

831
00:33:48,406 --> 0:33:49,686
与一个配置文件建立映射

832
00:33:50,296 --> 0:33:52,306
这就意味着你可以

833
00:33:52,306 --> 0:33:54,036
在一个电视上使用多用户

834
00:33:54,036 --> 0:33:55,256
它们可以分享同一个配置文件

835
00:33:55,256 --> 0:33:56,996
在 App 里

836
00:33:56,996 --> 0:33:58,426
这些用户标识符标识符都是不同的

837
00:33:58,426 --> 0:34:00,066
对于每一个研发团队

838
00:33:58,426 --> 0:34:00,066
对于每一个研发团队

839
00:34:00,436 --> 0:34:02,216
所以如果你有多个 App 或是

840
00:34:02,216 --> 0:34:03,786
扩展在一个套装软件中 

841
00:34:03,786 --> 0:34:05,166
你们都可以分享同一个偏好

842
00:34:06,576 --> 0:34:07,566
你们还要负责

843
00:34:07,566 --> 0:34:09,926
倾听目前用户标识符的改变

844
00:34:09,926 --> 0:34:11,735
我稍后会展示一些很好实例

845
00:34:11,735 --> 0:34:14,835
学习如何处理它

846
00:34:15,085 --> 0:34:16,346
根据你们不同的 App

847
00:34:16,346 --> 0:34:17,636
可以采用不同的方法 你们必须

848
00:34:17,636 --> 0:34:19,146
采用对于你们 App 的工作流有帮助的方式

849
00:34:19,146 --> 0:34:20,676
来呈现系统 UI

850
00:34:21,295 --> 0:34:22,956
但是每个人的 App 都有所不同

851
00:34:23,025 --> 0:34:24,626
所以我们来看一个例子

852
00:34:25,656 --> 0:34:27,295
想象你们的 App 搭建了一个

853
00:34:27,295 --> 0:34:28,706
配置文件选取器 

854
00:34:28,706 --> 0:34:29,956
就像刚刚它启动时我给你们展示的那样

855
00:34:31,176 --> 0:34:33,826
你们需要这样做 

856
00:34:33,826 --> 0:34:35,235
在你们搭建你们的配置文件选取器之前

857
00:34:35,235 --> 0:34:36,606
你们要检查你的 App

858
00:34:36,606 --> 0:34:38,166
是否有一个配置文件 

859
00:34:38,166 --> 0:34:39,426
与当前的用户标识符相关联

860
00:34:39,755 --> 0:34:41,496
如果有的话 

861
00:34:41,496 --> 0:34:43,406
你绝对可以给用户提供最佳的体验

862
00:34:44,485 --> 0:34:45,936
你只需要让他们看电视

863
00:34:46,516 --> 0:34:48,036
你不需要问他们任何问题

864
00:34:48,176 --> 0:34:49,746
你不需要向他们展示任何选择屏幕

865
00:34:49,746 --> 0:34:51,166
你可以直接将他们带到

866
00:34:51,166 --> 0:34:51,716
他们的内容所在之处

867
00:34:52,275 --> 0:34:54,646
如果你没有为当前的用户标识符

868
00:34:54,646 --> 0:34:55,585
储存的配置文件

869
00:34:55,585 --> 0:34:57,296
那么现在你就要

870
00:34:57,296 --> 0:34:58,446
为你的 App 建立一个配置文件选择器

871
00:34:59,226 --> 0:35:00,326
当用户作出选择

872
00:34:59,226 --> 0:35:00,326
当用户作出选择

873
00:35:00,326 --> 0:35:02,006
你可以询问他们

874
00:35:02,046 --> 0:35:03,276
对于当前用户的这个对话来说

875
00:35:03,276 --> 0:35:05,176
这是否是正确的配置文件

876
00:35:06,236 --> 0:35:07,866
这个 UI 将会

877
00:35:07,986 --> 0:35:09,566
询问使用你的 App 的用户

878
00:35:09,566 --> 0:35:10,566
是否他们想要关联

879
00:35:10,566 --> 0:35:12,146
当前的用户标识符和 

880
00:35:12,146 --> 0:35:13,416
已经选择的配置文件

881
00:35:14,146 --> 0:35:15,626
如果他们同意 那么你储存结果

882
00:35:15,626 --> 0:35:16,966
他们将不会被

883
00:35:16,966 --> 0:35:18,046
再次询问

884
00:35:18,146 --> 0:35:19,176
因此当他们再次打开 App 时

885
00:35:19,526 --> 0:35:20,636
他们能够获得

886
00:35:20,636 --> 0:35:21,426
最佳的用户体验

887
00:35:22,276 --> 0:35:23,936
所以你怎样才能将这个 UI 放在屏幕上

888
00:35:24,736 --> 0:35:25,106
很简单

889
00:35:25,106 --> 0:35:26,556
你可以使用

890
00:35:26,556 --> 0:35:27,386
shouldStorePreference

891
00:35:27,386 --> 0:35:28,106
ForCurrentUser

892
00:35:29,356 --> 0:35:31,096
你也可以让用户

893
00:35:31,096 --> 0:35:32,516
在偏好设置面板之后

894
00:35:32,556 --> 0:35:33,676
修改这些映射

895
00:35:34,316 --> 0:35:35,236
你可以用

896
00:35:35,336 --> 0:35:36,706
presentProfilePreferencePanel 显示

897
00:35:37,006 --> 0:35:38,446
这个 UI 是这样的

898
00:35:39,406 --> 0:35:40,586
在这个对话中 

899
00:35:40,586 --> 0:35:42,176
你在用户标识符和配置文件之间

900
00:35:42,176 --> 0:35:44,346
提供了一个当前的映射

901
00:35:44,346 --> 0:35:45,716
我们会帮你将改变复原

902
00:35:46,296 --> 0:35:47,806
对于这个 UI

903
00:35:47,806 --> 0:35:49,426
和确认对话来说

904
00:35:49,426 --> 0:35:51,676
你提供了一个用户名和用户

905
00:35:51,676 --> 0:35:53,206
标识符 我们将会在 UI

906
00:35:53,206 --> 0:35:56,126
提供真实用户名

907
00:35:56,406 --> 0:35:57,816
所以就像我刚刚提到的

908
00:35:57,816 --> 0:35:58,556
你们的 App 应该可以

909
00:35:58,556 --> 0:36:00,536
在当前的用户标识符下处理更新 

910
00:35:58,556 --> 0:36:00,536
在当前的用户标识符下处理更新 

911
00:36:01,576 --> 0:36:02,606
你们要注意

912
00:36:02,606 --> 0:36:03,886
当前用户标识符的变化

913
00:36:03,886 --> 0:36:04,976
通过 currentUserIdentifier

914
00:36:04,976 --> 0:36:06,146
DidChangeNotification

915
00:36:06,936 --> 0:36:08,486
当这发生时

916
00:36:08,486 --> 0:36:09,586
你们有责任通过给当前的配置文件

917
00:36:09,586 --> 0:36:11,486
设置用户标识符

918
00:36:11,486 --> 0:36:13,126
让我们知道新的映射

919
00:36:13,516 --> 0:36:15,886
由于可能同时有几个不同的用户标识符

920
00:36:15,886 --> 0:36:17,256
都指向同一个配置文件

921
00:36:17,256 --> 0:36:18,816
你要在这设置

922
00:36:18,816 --> 0:36:19,406
不同的值

923
00:36:19,896 --> 0:36:22,716
所以在用户标识符发生改变的时候

924
00:36:22,976 --> 0:36:24,706
除此以外呢

925
00:36:24,786 --> 0:36:25,736
我们有一些很好的操作

926
00:36:25,736 --> 0:36:27,416
推荐给你们

927
00:36:27,416 --> 0:36:29,576
来处理你的 App 中的配置文件

928
00:36:30,506 --> 0:36:31,686
如果你必须要改变配置文件

929
00:36:31,686 --> 0:36:33,346
而且之前的配置文件一直保持活动

930
00:36:33,346 --> 0:36:35,506
保存它

931
00:36:35,566 --> 0:36:36,666
因为谁也不想丢失

932
00:36:36,666 --> 0:36:37,166
他们正在做的事情

933
00:36:37,986 --> 0:36:39,786
你还要确保

934
00:36:39,786 --> 0:36:41,426
改变是有意义的

935
00:36:41,426 --> 0:36:43,046
所以你应该展示

936
00:36:43,046 --> 0:36:43,926
像个性化推荐这样的东西

937
00:36:43,926 --> 0:36:46,536
并且让改变更加明确

938
00:36:46,906 --> 0:36:48,296
所以让它有一个流畅的过渡

939
00:36:48,296 --> 0:36:50,146
这可以让

940
00:36:50,146 --> 0:36:52,346
用户清楚的知道改变是成功的

941
00:36:55,276 --> 0:36:57,216
那么关于现在的 tvOS 上的用户配置文件

942
00:36:57,216 --> 0:36:58,426
我们要了解什么呢

943
00:36:58,946 --> 0:36:59,916
我们要了解如果你有一个

944
00:36:59,916 --> 0:37:01,616
基于用户配置文件的 App

945
00:36:59,916 --> 0:37:01,616
基于用户配置文件的 App

946
00:37:01,616 --> 0:37:03,026
你可以使用多用户的功能

947
00:37:03,026 --> 0:37:04,666
让用户得到更好的个性化体验

948
00:37:05,256 --> 0:37:07,886
你可以使用 TVUserManager

949
00:37:07,886 --> 0:37:08,886
开启一个内容优先的用户体验

950
00:37:08,956 --> 0:37:10,516
在这里

951
00:37:10,516 --> 0:37:12,116
用户可以跳过没用的对话

952
00:37:12,356 --> 0:37:13,716
直接观看电视

953
00:37:15,266 --> 0:37:16,146
既然我们已经聊过了

954
00:37:16,146 --> 0:37:17,516
你们初次开启的体验

955
00:37:18,006 --> 0:37:19,366
那我们来聊一下接下来你们

956
00:37:19,366 --> 0:37:20,756
在 App 中会看到的东西 导航栏

957
00:37:28,936 --> 0:37:30,366
在新的 TV App 中

958
00:37:30,366 --> 0:37:31,456
我们有一个全新的导航栏

959
00:37:31,776 --> 0:37:33,346
它让导航变得更加容易

960
00:37:33,636 --> 0:37:34,956
它真的可以让内容

961
00:37:34,956 --> 0:37:35,916
大放异彩

962
00:37:37,816 --> 0:37:39,386
因为它会随着

963
00:37:39,386 --> 0:37:40,446
内容上下移动

964
00:37:40,546 --> 0:37:41,986
而不是在失去选中时直接消失

965
00:37:41,986 --> 0:37:44,066
这是一个很好的办法

966
00:37:44,066 --> 0:37:45,326
来强化层次结构

967
00:37:45,326 --> 0:37:45,876
对使用 App 的用户来说

968
00:37:45,876 --> 0:37:48,286
我非常高兴地宣布在 tvOS 13 里

969
00:37:48,286 --> 0:37:50,936
你们都能得到这个全新形式的导航栏

970
00:37:54,716 --> 0:37:55,796
所以你们要怎样做

971
00:37:55,796 --> 0:37:56,796
来使用这个全新的导航栏呢

972
00:37:57,226 --> 0:37:59,026
大部分情况下什么都不用做

973
00:37:59,026 --> 0:38:00,066
有时候你想要修改它的动作

974
00:37:59,026 --> 0:38:00,066
有时候你想要修改它的动作

975
00:38:00,066 --> 0:38:01,296
你要这样做

976
00:38:02,036 --> 0:38:03,286
如果你想要导航栏

977
00:38:03,286 --> 0:38:04,666
在屏幕上随着内容滚动

978
00:38:04,666 --> 0:38:05,996
你可以设置

979
00:38:05,996 --> 0:38:07,076
tabBarObservedScrollView 性能

980
00:38:07,076 --> 0:38:08,686
在你的视图控制器上

981
00:38:08,686 --> 0:38:10,266
它嵌入在你的导航栏控制器上

982
00:38:10,986 --> 0:38:11,926
通常我们推荐

983
00:38:11,926 --> 0:38:13,136
这种风格的集合视图 

984
00:38:13,136 --> 0:38:14,066
全部都是可浏览内容

985
00:38:14,306 --> 0:38:15,566
事实上 UI 集合视图控制器

986
00:38:15,566 --> 0:38:17,266
可以帮你自动完成

987
00:38:17,766 --> 0:38:19,526
如果你想让导航栏

988
00:38:19,526 --> 0:38:20,546
固定在屏幕顶端

989
00:38:20,546 --> 0:38:21,746
你可以将这个性能

990
00:38:21,746 --> 0:38:22,636
设置为 nil

991
00:38:23,716 --> 0:38:25,586
无论哪种情况

992
00:38:25,586 --> 0:38:26,936
你都要注意安全区域

993
00:38:27,256 --> 0:38:28,596
如果是滚动视图 

994
00:38:28,596 --> 0:38:30,186
你可以直接得到

995
00:38:30,186 --> 0:38:30,596
只需通过设置

996
00:38:30,596 --> 0:38:32,026
contentInsetAdjustmentBehavior

997
00:38:32,026 --> 0:38:33,116
来修改

998
00:38:33,316 --> 0:38:34,446
如果你在做自己的布局

999
00:38:34,446 --> 0:38:35,106
你可以使用你的

1000
00:38:35,106 --> 0:38:38,186
safeAreaLayoutGuide 来帮你

1001
00:38:38,296 --> 0:38:40,096
我们也添加了一些新的 API 用户界面导航栏

1002
00:38:40,096 --> 0:38:41,756
你可以显示

1003
00:38:41,756 --> 0:38:42,726
你的品牌在你的 App 上

1004
00:38:43,286 --> 0:38:44,846
我们添加了一个新的区域

1005
00:38:44,846 --> 0:38:46,536
在导航栏的两边 

1006
00:38:46,536 --> 0:38:47,316
你们可以放置自己的标志

1007
00:38:47,316 --> 0:38:48,806
它会随着导航栏一起

1008
00:38:48,806 --> 0:38:51,296
向上滚动

1009
00:38:51,296 --> 0:38:52,416
或是在屏幕上消失

1010
00:38:52,586 --> 0:38:53,856
你们可以访问两个新的视图

1011
00:38:53,856 --> 0:38:55,346
在你们 UITabBar 的性能中

1012
00:38:55,346 --> 0:38:57,466
它们是 leadingAccessoryView

1013
00:38:57,466 --> 0:38:58,626
和 trailingAccessoryView

1014
00:38:59,386 --> 0:39:00,396
你们不应该把按钮放在

1015
00:38:59,386 --> 0:39:00,396
你们不应该把按钮放在

1016
00:39:00,396 --> 0:39:01,386
可选中的项目上

1017
00:39:01,386 --> 0:39:02,276
在这些自定义辅助视图中

1018
00:39:02,576 --> 0:39:04,796
它们的确是是为静态内容设计的

1019
00:39:05,106 --> 0:39:06,436
另外 如果你需要

1020
00:39:06,436 --> 0:39:07,486
继续自定义自己的导航栏

1021
00:39:07,486 --> 0:39:08,666
来匹配你的品牌

1022
00:39:09,186 --> 0:39:09,996
你可以使用

1023
00:39:09,996 --> 0:39:11,306
standardAppearance 性能

1024
00:39:11,576 --> 0:39:12,566
要了解更多的

1025
00:39:12,566 --> 0:39:13,676
standardAppearance 的内容 请查看

1026
00:39:13,676 --> 0:39:15,756
为 iOS 13 现代化你的 UI

1027
00:39:15,946 --> 0:39:19,706
今天我们关于 tvOS 上的导航栏

1028
00:39:19,706 --> 0:39:20,796
了解到了什么

1029
00:39:21,416 --> 0:39:22,876
在 tvOS 13 上将有一个全新的导航栏

1030
00:39:22,876 --> 0:39:24,756
它能够非常容易地

1031
00:39:24,756 --> 0:39:26,446
结合你的 App

1032
00:39:26,686 --> 0:39:28,476
我们也将它变得更加灵活

1033
00:39:28,846 --> 0:39:29,936
所以你会感到非常便捷

1034
00:39:29,936 --> 0:39:31,276
使用标准控件

1035
00:39:31,276 --> 0:39:32,846
但是你不需要

1036
00:39:32,956 --> 0:39:34,136
牺牲任何功能

1037
00:39:34,136 --> 0:39:34,956
就可以展示你的品牌

1038
00:39:35,826 --> 0:39:37,446
现在我们看到了

1039
00:39:37,446 --> 0:39:39,086
UITabBar 是如何

1040
00:39:39,086 --> 0:39:40,146
在你的 App 中实现高级导航的

1041
00:39:40,386 --> 0:39:42,206
我们来讨论一下浏览

1042
00:39:43,506 --> 0:39:44,566
我们有一些新的工具

1043
00:39:44,566 --> 0:39:46,206
你们可以使用它们创造全屏浏览体验

1044
00:39:47,736 --> 0:39:50,236
Tommy 刚刚提到

1045
00:39:50,236 --> 0:39:54,946
创造一个便捷高效的浏览体验的重要性

1046
00:39:54,946 --> 0:40:00,206
比以往更快沉浸在吸引人的故事中

1047
00:39:54,946 --> 0:40:00,206
比以往更快沉浸在吸引人的故事中

1048
00:40:00,606 --> 0:40:03,976
进入和退出菜单的时候没有任何困难

1049
00:40:04,676 --> 0:40:05,866
我们创造的这种体验可以

1050
00:40:05,866 --> 0:40:07,256
使用大部分电视的

1051
00:40:07,316 --> 0:40:09,226
巨大屏幕

1052
00:40:09,226 --> 0:40:10,596
在你的客厅里

1053
00:40:10,596 --> 0:40:11,206
创造最佳的观影体验

1054
00:40:12,026 --> 0:40:13,536
并且使用起来就像

1055
00:40:13,536 --> 0:40:14,666
水平滑动一样简单

1056
00:40:14,996 --> 0:40:17,156
在 tvOS 13 中 

1057
00:40:17,156 --> 0:40:18,756
我们带来了全新的 API  帮助你们

1058
00:40:18,756 --> 0:40:20,456
创造这样的一种体验

1059
00:40:21,436 --> 0:40:22,616
我们使用新的

1060
00:40:22,616 --> 0:40:23,386
TVCollectionView

1061
00:40:23,386 --> 0:40:25,016
TV UIKit 中的 FullScreenLayout

1062
00:40:26,156 --> 0:40:27,696
这个设计是为了帮助你们

1063
00:40:27,696 --> 0:40:28,986
创造一个集合视图 

1064
00:40:28,986 --> 0:40:30,656
实现屏幕无边缘化 

1065
00:40:30,656 --> 0:40:32,406
在你的房子里实现最大程度的大屏播放

1066
00:40:33,376 --> 0:40:34,356
默认情况下

1067
00:40:34,396 --> 0:40:35,796
对于已经使用过 tvOS 的人来说

1068
00:40:35,796 --> 0:40:37,506
它看起来很熟悉

1069
00:40:37,506 --> 0:40:38,266
但是它自定义功能更加强大

1070
00:40:38,346 --> 0:40:39,966
所以你可以更容易地调整它

1071
00:40:39,966 --> 0:40:40,746
来实现你们

1072
00:40:40,746 --> 0:40:42,126
工程团队和设计团队的目标

1073
00:40:42,476 --> 0:40:44,076
事实上 自定义程度很高的是

1074
00:40:44,076 --> 0:40:45,596
刚刚 Caleb 给你们展示的顶部展区

1075
00:40:45,596 --> 0:40:47,136
甚至使用了

1076
00:40:47,136 --> 0:40:48,346
完全一样的布局

1077
00:40:49,466 --> 0:40:50,636
为了适应这个布局

1078
00:40:50,636 --> 0:40:51,466
我们给你们提供了

1079
00:40:51,466 --> 0:40:53,456
TVCollectionView FullScreenCell

1080
00:40:53,456 --> 0:40:54,146
当你们有一个新的单元格子类时

1081
00:40:55,616 --> 0:40:57,156
你们要知道它有两个视图

1082
00:40:57,156 --> 0:40:58,476
隐藏的背景视图

1083
00:40:58,476 --> 0:41:00,366
和隐藏的内容视图

1084
00:40:58,476 --> 0:41:00,366
和隐藏的内容视图

1085
00:41:00,836 --> 0:41:02,536
当你创建了一个新的自定义单元格

1086
00:41:02,876 --> 0:41:04,786
你们将内容填充在这些视图里

1087
00:41:04,786 --> 0:41:06,216
通常来说 你们要添加一个不透明图像

1088
00:41:06,216 --> 0:41:07,606
到隐藏的背景视图里

1089
00:41:07,606 --> 0:41:09,676
添加用户界面信息

1090
00:41:09,676 --> 0:41:10,376
到隐藏的内容视图里

1091
00:41:11,866 --> 0:41:12,976
由于这个新的集合视图布局

1092
00:41:12,976 --> 0:41:13,916
的设计是为了使用

1093
00:41:13,916 --> 0:41:15,276
整个屏幕

1094
00:41:16,236 --> 0:41:18,156
单元格和它的次级使用也要

1095
00:41:18,156 --> 0:41:19,506
也要充满整个

1096
00:41:19,506 --> 0:41:22,326
1920 乘 1080 分辨率的屏幕

1097
00:41:22,326 --> 0:41:23,546
在我告诉你们如何

1098
00:41:23,546 --> 0:41:24,576
自定义整个全屏布局之前

1099
00:41:24,576 --> 0:41:26,356
我要邀请 Felipe 回到舞台

1100
00:41:26,356 --> 0:41:28,056
给你们展示一下非常容易

1101
00:41:28,056 --> 0:41:29,026
就可以创造一个

1102
00:41:29,026 --> 0:41:30,176
全屏浏览体验 只需通过

1103
00:41:30,176 --> 0:41:31,656
TVCollectionView FullScreenLayout

1104
00:41:36,508 --> 0:41:38,508
[掌声]

1105
00:41:42,916 --> 0:41:44,066
首先我们来看一个

1106
00:41:44,066 --> 0:41:45,236
现有的 App 它有一些照片

1107
00:41:45,316 --> 0:41:46,796
是流式布局的

1108
00:41:47,166 --> 0:41:48,986
这是一个很好的开始

1109
00:41:48,986 --> 0:41:51,256
但实际上它没有优化我们的 TV

1110
00:41:51,616 --> 0:41:52,646
既然我们已经看过了所有的

1111
00:41:52,646 --> 0:41:53,546
TVCollectionView

1112
00:41:53,546 --> 0:41:55,296
FullScreenLayout 让我们回到

1113
00:41:55,296 --> 0:41:58,616
Xcode 并尝试使用它

1114
00:41:58,616 --> 0:42:00,276
首先我们创建一个新的

1115
00:41:58,616 --> 0:42:00,276
首先我们创建一个新的

1116
00:42:00,276 --> 0:42:01,286
fullScreenLayout

1117
00:42:01,286 --> 0:42:04,396
我们可以在我们的集合视图里

1118
00:42:04,396 --> 0:42:05,516
设置这个布局

1119
00:42:05,516 --> 0:42:05,976
来替换以前的

1120
00:42:10,856 --> 0:42:12,296
为了适应我们的布局

1121
00:42:12,296 --> 0:42:12,886
我们需要一个单元格

1122
00:42:12,886 --> 0:42:14,406
我们已经创建了一个

1123
00:42:14,406 --> 0:42:15,896
我们可以用它来

1124
00:42:15,896 --> 0:42:17,216
通过我们的集合视图注册

1125
00:42:17,956 --> 0:42:21,036
现在我们回到这个单元格的例子

1126
00:42:21,036 --> 0:42:23,586
在我们为 indexPath 建立的单元格里 

1127
00:42:24,226 --> 0:42:26,536
现在我们已经安装了我们的视图控制器

1128
00:42:26,536 --> 0:42:28,106
我们可以去到单元格

1129
00:42:28,106 --> 0:42:29,486
向里面添加一些内容

1130
00:42:29,796 --> 0:42:31,876
我们已经有了一个 imageView 

1131
00:42:31,876 --> 0:42:32,506
和一个 titleLabel

1132
00:42:32,506 --> 0:42:34,356
可以开始添加图像视图

1133
00:42:34,356 --> 0:42:35,836
到隐藏的背景视图里

1134
00:42:36,396 --> 0:42:40,256
并且也可以添加名称标签

1135
00:42:40,256 --> 0:42:41,126
到隐藏的内容视图里

1136
00:42:42,266 --> 0:42:43,606
我们可以把它设置成大号字体

1137
00:42:43,606 --> 0:42:44,836
这样更容易看清楚屏幕

1138
00:42:44,836 --> 0:42:47,006
现在我们已经完成了所有的安装

1139
00:42:47,046 --> 0:42:48,666
我们现在来试一试

1140
00:42:56,966 --> 0:42:57,906
它好了很多

1141
00:42:57,906 --> 0:42:59,076
它真的能够填满整个屏幕

1142
00:42:59,076 --> 0:43:00,196
当你在浏览的时候 

1143
00:42:59,076 --> 0:43:00,196
当你在浏览的时候 

1144
00:43:00,196 --> 0:43:01,646
你可以看到图像更细节的部分

1145
00:43:02,126 --> 0:43:04,166
但是很棒的是

1146
00:43:04,166 --> 0:43:05,036
如果你点击 Siri Remote

1147
00:43:05,036 --> 0:43:06,576
它就会充满整个屏幕

1148
00:43:07,126 --> 0:43:08,566
做起来很容易

1149
00:43:08,786 --> 0:43:09,666
我们现在回到视图控制器

1150
00:43:09,666 --> 0:43:13,516
来做一下

1151
00:43:14,076 --> 0:43:15,576
如果我们在 indexPath

1152
00:43:15,576 --> 0:43:17,716
添加 didSelectItem 那么我们可以处理

1153
00:43:17,746 --> 0:43:18,496
选择操作

1154
00:43:19,016 --> 0:43:20,136
如果这样的话

1155
00:43:20,136 --> 0:43:21,316
我们可以将隐藏的数量设置为零

1156
00:43:21,646 --> 0:43:23,236
我们可以激活它使它看起来更流畅

1157
00:43:24,796 --> 0:43:25,826
现在我们继续

1158
00:43:25,826 --> 0:43:27,946
再试一次 看看是否能成功

1159
00:43:33,596 --> 0:43:35,616
你们可以看到 当 Felipe 点击时

1160
00:43:35,616 --> 0:43:36,986
它就从边缘到边缘填满了屏幕

1161
00:43:36,986 --> 0:43:38,696
正是我们所期待的那样

1162
00:43:39,046 --> 0:43:40,326
但是看起来我们好像忘记了

1163
00:43:40,326 --> 0:43:41,066
隐藏文本

1164
00:43:42,146 --> 0:43:43,536
没关系 这很容易解决

1165
00:43:43,536 --> 0:43:44,576
我们回到单元格

1166
00:43:44,576 --> 0:43:45,096
现在来修复一下它

1167
00:43:46,706 --> 0:43:49,076
如果我们覆盖应用

1168
00:43:49,076 --> 0:43:50,776
我们可以得到修改后的布局属性

1169
00:43:51,716 --> 0:43:53,136
这种情况下 我们想要一个 titleLabel

1170
00:43:53,136 --> 0:43:55,276
有一个为零的阿尔法值

1171
00:43:55,276 --> 0:43:57,856
当隐藏的数目为零的时候

1172
00:43:57,856 --> 0:43:59,646
所以我们只需将不透明度设置成

1173
00:43:59,996 --> 0:44:01,406
和隐藏的数目一样

1174
00:43:59,996 --> 0:44:01,406
和隐藏的数目一样

1175
00:44:01,906 --> 0:44:04,896
我们再试一次

1176
00:44:04,896 --> 0:44:05,436
看看是什么样的

1177
00:44:12,456 --> 0:44:13,556
这次好多了

1178
00:44:13,996 --> 0:44:14,766
这种体验

1179
00:44:14,766 --> 0:44:16,466
就是我们想要在 TV 上创造的

1180
00:44:16,736 --> 0:44:17,956
它很容易实现交互

1181
00:44:17,956 --> 0:44:20,226
在这样全屏的情况下

1182
00:44:20,226 --> 0:44:21,996
你也很容易被内容吸引

1183
00:44:22,536 --> 0:44:23,606
谢谢 Felipe

1184
00:44:24,516 --> 0:44:26,656
[掌声]

1185
00:44:27,156 --> 0:44:30,696
现在我们回头看看细节

1186
00:44:31,236 --> 0:44:31,686
你记得刚刚的

1187
00:44:31,686 --> 0:44:33,086
TVCollectionViewFullScreenCell

1188
00:44:33,086 --> 0:44:34,226
它有两个子功能

1189
00:44:34,226 --> 0:44:35,986
隐藏的背景 

1190
00:44:35,986 --> 0:44:36,806
和隐藏的内容视图

1191
00:44:37,646 --> 0:44:38,986
为了理解这两个

1192
00:44:38,986 --> 0:44:40,596
视图是如何一起工作的

1193
00:44:40,596 --> 0:44:41,446
你需要了解

1194
00:44:41,446 --> 0:44:42,586
布局的两个原则

1195
00:44:42,966 --> 0:44:44,636
隐藏和视差

1196
00:44:44,806 --> 0:44:45,916
我们先讲一下隐藏

1197
00:44:47,136 --> 0:44:48,946
视图和单元格

1198
00:44:48,946 --> 0:44:50,176
一个放在另一个上层

1199
00:44:50,176 --> 0:44:52,046
充满整个屏幕

1200
00:44:52,416 --> 0:44:53,166
你可以看到

1201
00:44:53,166 --> 0:44:55,296
这儿的隐藏的背景视图 

1202
00:44:55,296 --> 0:44:56,256
和顶端的内容视图

1203
00:44:56,916 --> 0:44:58,166
当像这样从边缘到边缘运行时

1204
00:44:58,166 --> 0:45:01,316
隐藏的单元格中的布局所指的数目

1205
00:44:58,166 --> 0:45:01,316
隐藏的单元格中的布局所指的数目

1206
00:45:01,316 --> 0:45:02,016
设置为零

1207
00:45:03,146 --> 0:45:04,546
但是当我们

1208
00:45:04,546 --> 0:45:05,996
像这样从侧面浏览插入的其他地方时 

1209
00:45:05,996 --> 0:45:07,806
隐藏的数目是一

1210
00:45:08,416 --> 0:45:11,316
你可以控制

1211
00:45:11,316 --> 0:45:12,556
隐藏的插入的数量 

1212
00:45:12,556 --> 0:45:13,826
利用布局中隐藏的插入性能

1213
00:45:15,116 --> 0:45:16,306
同样的信息

1214
00:45:16,306 --> 0:45:17,486
也反映在

1215
00:45:17,486 --> 0:45:18,836
内容抽取性能

1216
00:45:18,836 --> 0:45:20,186
它来自布局属性

1217
00:45:20,826 --> 0:45:23,186
所以这就是隐藏

1218
00:45:23,186 --> 0:45:24,396
下面我们来讨论一下视差

1219
00:45:25,156 --> 0:45:26,456
视差可以创建深度

1220
00:45:26,456 --> 0:45:28,476
通过移动不同速率的层

1221
00:45:28,926 --> 0:45:30,736
我们已经在 tvOS 实现了所有的这些

1222
00:45:30,736 --> 0:45:32,366
我来解释一下它是怎么应用

1223
00:45:32,366 --> 0:45:33,686
在我们的布局上的

1224
00:45:34,776 --> 0:45:37,046
布局有一个视差因子性能

1225
00:45:37,246 --> 0:45:39,006
它显示了减慢

1226
00:45:39,006 --> 0:45:40,396
隐藏背景视图的程度 

1227
00:45:40,396 --> 0:45:42,366
隐藏背景视图与隐藏内容视图的相关性最强

1228
00:45:43,376 --> 0:45:45,426
同样的信息被下达给

1229
00:45:45,426 --> 0:45:46,506
单元格

1230
00:45:46,506 --> 0:45:47,546
通过布局属性和 

1231
00:45:47,546 --> 0:45:48,866
视差偏移属性

1232
00:45:49,506 --> 0:45:50,746
这指的是

1233
00:45:50,746 --> 0:45:51,926
在所有时间点

1234
00:45:51,926 --> 0:45:53,296
从隐藏背景的中心到

1235
00:45:53,296 --> 0:45:54,356
隐藏内容视图的距离

1236
00:45:55,246 --> 0:45:56,576
通过不同的移动速率

1237
00:45:56,576 --> 0:45:57,826
和一个部分透明的

1238
00:45:57,826 --> 0:45:59,816
隐藏内容视图 你可以看到

1239
00:45:59,816 --> 0:46:02,346
我们怎样模拟深度感

1240
00:45:59,816 --> 0:46:02,346
我们怎样模拟深度感

1241
00:46:05,156 --> 0:46:06,706
最后 我们与掩码结合

1242
00:46:06,706 --> 0:46:08,466
我们可以得到擦除效果

1243
00:46:08,466 --> 0:46:10,026
就像你们在 Felipe 的演示中看到的那样

1244
00:46:10,736 --> 0:46:14,316
作为提示 我们已经完成了

1245
00:46:14,316 --> 0:46:15,156
TVCollectionView 

1246
00:46:15,156 --> 0:46:15,876
FullScreenLayout 中的

1247
00:46:15,876 --> 0:46:17,476
繁重的工作 但是

1248
00:46:17,506 --> 0:46:18,686
这个概览应该可以帮助

1249
00:46:18,686 --> 0:46:19,656
理解一些参数

1250
00:46:19,656 --> 0:46:20,806
这些参数可以用来帮助你们

1251
00:46:21,066 --> 0:46:22,706
达到你们想要的效果

1252
00:46:23,256 --> 0:46:26,056
由于有许多的像素

1253
00:46:26,056 --> 0:46:27,136
在全屏布局中不断移动

1254
00:46:27,136 --> 0:46:28,656
就像这样 我们有一些

1255
00:46:28,656 --> 0:46:30,126
很好的操作推荐给你们

1256
00:46:30,126 --> 0:46:31,106
来充分利用

1257
00:46:31,106 --> 0:46:31,766
TVCollectionView

1258
00:46:31,766 --> 0:46:32,436
FullScreenLayout

1259
00:46:32,956 --> 0:46:35,766
你们应该避免播放任何

1260
00:46:35,766 --> 0:46:37,096
动画或者视频

1261
00:46:37,096 --> 0:46:38,116
直到单元格到达中心

1262
00:46:38,836 --> 0:46:40,056
一次播放多个视频

1263
00:46:40,056 --> 0:46:41,186
不仅会使用户分散注意力

1264
00:46:41,186 --> 0:46:44,106
还可能造成掉帧

1265
00:46:44,686 --> 0:46:46,786
你应该看看

1266
00:46:46,786 --> 0:46:48,106
你使用了多少屏外传入

1267
00:46:48,376 --> 0:46:49,656
这就意味着要避免使用过多的

1268
00:46:49,656 --> 0:46:51,566
视觉效果或是 

1269
00:46:51,566 --> 0:46:52,736
组合不透明动画

1270
00:46:53,126 --> 0:46:54,356
事实上 大部分

1271
00:46:54,356 --> 0:46:56,276
你们使用的东西

1272
00:46:56,276 --> 0:46:57,396
可以用来帮助你们在 App 的

1273
00:46:57,396 --> 0:47:00,876
当你左右滑动时 你可以在这应用

1274
00:46:57,396 --> 0:47:00,876
当你左右滑动时 你可以在这应用

1275
00:47:01,106 --> 0:47:02,086
你还应该注意你的

1276
00:47:02,086 --> 0:47:02,996
内存使用量

1277
00:47:03,306 --> 0:47:04,506
你工作时可能会

1278
00:47:04,506 --> 0:47:06,686
在布局中处理许多大型照片 就像这样

1279
00:47:06,976 --> 0:47:08,536
所以你应该确保

1280
00:47:08,536 --> 0:47:09,886
它们的尺寸适合展示

1281
00:47:09,886 --> 0:47:11,646
当你不再使用它们的时候

1282
00:47:11,646 --> 0:47:13,476
应该将它们从内存中释放出来

1283
00:47:17,136 --> 0:47:19,016
如果你是一个 TVMLKit 开发人员

1284
00:47:19,016 --> 0:47:20,136
我们没有忘记你们

1285
00:47:20,666 --> 0:47:21,836
你们可以使用所有这些东西

1286
00:47:21,836 --> 0:47:23,066
创建 TVBrowserViewController

1287
00:47:23,736 --> 0:47:25,086
我们还连接了一个样本 App

1288
00:47:25,086 --> 0:47:26,536
向你们展示一下

1289
00:47:26,536 --> 0:47:27,866
构建一个展区

1290
00:47:27,866 --> 0:47:29,576
和全屏浏览器间的流畅连接 

1291
00:47:29,576 --> 0:47:30,726
是十分容易的

1292
00:47:32,476 --> 0:47:33,906
今天我们带你们走了一段旅程

1293
00:47:33,906 --> 0:47:35,676
从用户

1294
00:47:35,676 --> 0:47:37,126
初次打开你的 App 开始 

1295
00:47:37,126 --> 0:47:38,546
家里的屏幕和顶部展区

1296
00:47:39,476 --> 0:47:40,466
这是一个

1297
00:47:40,466 --> 0:47:41,736
吸引用户的目光的好方法

1298
00:47:41,736 --> 0:47:42,126
并且让他们使用你的 App

1299
00:47:43,256 --> 0:47:44,856
接下来我们了解了

1300
00:47:44,856 --> 0:47:46,696
初次启动的体验 

1301
00:47:47,256 --> 0:47:48,796
你们了解到可以利用

1302
00:47:48,796 --> 0:47:50,416
多用户功能给用户

1303
00:47:50,416 --> 0:47:51,646
立刻带来个性化的内容

1304
00:47:51,646 --> 0:47:53,946
不需要其他的对话

1305
00:47:55,296 --> 0:47:57,686
最后 我们了解了

1306
00:47:57,686 --> 0:47:59,096
如何使浏览变得简单省事

1307
00:47:59,096 --> 0:48:00,906
用我们全新的导航栏

1308
00:47:59,096 --> 0:48:00,906
用我们全新的导航栏

1309
00:48:00,906 --> 0:48:01,736
和全屏布局就可以实现

1310
00:48:02,826 --> 0:48:04,236
所有的这些结合在一起

1311
00:48:04,236 --> 0:48:05,756
构成了功能强大的客厅

1312
00:48:06,126 --> 0:48:07,636
我们希望你们可以使用

1313
00:48:07,636 --> 0:48:09,036
今天我们在这展示的工具和原则

1314
00:48:09,036 --> 0:48:12,376
并在你们自己的 App 中应用它们

1315
00:48:12,376 --> 0:48:14,106
因此每一个 tvOS 的用户

1316
00:48:14,106 --> 0:48:14,746
都可以获得享受的体验

1317
00:48:16,196 --> 0:48:17,556
你可以在这里看到更多关于

1318
00:48:17,556 --> 0:48:19,216
我们今天讨论的信息

1319
00:48:19,216 --> 0:48:20,856
或是在周三或周五拜访我们的实验室

1320
00:48:23,006 --> 0:48:23,726
谢谢大家

1321
00:48:24,516 --> 0:48:29,500
[掌声]
