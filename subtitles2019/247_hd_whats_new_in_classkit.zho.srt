1
00:00:06,406 --> 0:00:07,241
（ClassKit新功能）

2
00:00:07,307 --> 0:00:09,142
大家好 欢迎来到

3
00:00:09,676 --> 0:00:10,878
我是John Calhoun

4
00:00:11,278 --> 0:00:13,747
我是ClassKit和Schoolwork

5
00:00:14,381 --> 0:00:15,215
（ClassKit介绍

6
00:00:15,282 --> 0:00:16,650
如果你刚接触ClassKit

7
00:00:17,050 --> 0:00:20,087
我就先简单做一个介绍

8
00:00:20,888 --> 0:00:23,156
你应该关注的是

9
00:00:23,223 --> 0:00:26,193
还有你可能会用到的一些

10
00:00:26,460 --> 0:00:27,561
最佳编程实践的简要讨论

11
00:00:29,396 --> 0:00:31,064
让我们从介绍ClassKit开始

12
00:00:31,865 --> 0:00:32,698
（ClassKit是什么）

13
00:00:32,766 --> 0:00:36,436
ClassKit是Apple

14
00:00:37,771 --> 0:00:40,507
它是Apple教育生态系统

15
00:00:41,108 --> 0:00:44,244
所以如果你的app面向的也是教育

16
00:00:44,311 --> 0:00:46,780
那么你应该要

17
00:00:46,847 --> 0:00:47,948
以及它能为你的app做些什么

18
00:00:50,384 --> 0:00:53,086
ClassKit的目的在于

19
00:00:53,153 --> 0:00:54,655
与老师分享学生的进度

20
00:00:55,122 --> 0:00:57,524
我等下会详细说到这是什么意思

21
00:00:59,593 --> 0:01:01,562
由于学生的数据十分重要

22
00:00:59,593 --> 0:01:01,562
由于学生的数据十分重要

23
00:01:02,129 --> 0:01:04,697
ClassKit能够确保

24
00:01:04,998 --> 0:01:07,334
并且只能被特定用户访问

25
00:01:07,801 --> 0:01:09,703
比如得到授权能够

26
00:01:09,970 --> 0:01:11,071
访问该数据的教师

27
00:01:11,805 --> 0:01:13,173
让我们看一个例子

28
00:01:14,208 --> 0:01:17,177
我以一个虚构的app为例

29
00:01:17,978 --> 0:01:20,981
假设这款app是教用户写代码的

30
00:01:21,815 --> 0:01:24,117
它包含了许多的学生信息

31
00:01:25,252 --> 0:01:27,554
里面有练习和测验

32
00:01:27,621 --> 0:01:30,457
来帮助检查学生

33
00:01:31,158 --> 0:01:32,926
这已经包含了活动的概念了

34
00:01:33,293 --> 0:01:35,929
如果能将学生的进度

35
00:01:36,563 --> 0:01:38,498
简而言之 用ClassKit正好

36
00:01:41,235 --> 0:01:42,669
这是使用这款app的学生

37
00:01:42,736 --> 0:01:43,937
（教育情景）

38
00:01:44,271 --> 0:01:46,974
该app想将学生的进度

39
00:01:47,040 --> 0:01:50,477
与老师分享

40
00:01:52,179 --> 0:01:54,481
这就是ClassKit的功能

41
00:01:55,282 --> 0:01:56,917
ClassKit确保学生数据

42
00:01:57,451 --> 0:01:59,620
在设备中储存 然后发送至云端

43
00:01:59,686 --> 0:02:01,822
之后安全地在云端储存

44
00:01:59,686 --> 0:02:01,822
之后安全地在云端储存

45
00:02:02,823 --> 0:02:06,059
ClassKit同时确保这些数据

46
00:02:06,126 --> 0:02:08,195
仅被有权限的用户访问

47
00:02:08,262 --> 0:02:09,663
比如说学生的老师

48
00:02:10,731 --> 0:02:13,133
那么这些老师和学生

49
00:02:13,467 --> 0:02:16,003
如何在一款启用了ClassKit

50
00:02:17,871 --> 0:02:20,908
Apple为iOS提供了一款

51
00:02:22,342 --> 0:02:23,710
这是iPad的免费app

52
00:02:24,278 --> 0:02:26,180
它自ClassKit首次亮相以来

53
00:02:26,513 --> 0:02:27,548
现在你可以下载

54
00:02:28,982 --> 0:02:31,718
不仅美国学校使用

55
00:02:31,785 --> 0:02:32,986
其他国家的学校也在用

56
00:02:33,720 --> 0:02:35,622
老师使用Schoolwork

57
00:02:35,923 --> 0:02:39,626
名为讲义的作业 学生

58
00:02:41,228 --> 0:02:44,565
当你的app响应讲义活动

59
00:02:44,631 --> 0:02:45,832
记录进度时

60
00:02:46,300 --> 0:02:50,437
Schoolwork里的老师

61
00:02:51,605 --> 0:02:54,908
我们简单看看Schoolwork

62
00:02:56,610 --> 0:02:58,946
你第一次作为开发者

63
00:02:59,012 --> 0:03:00,280
你会看到这样的界面

64
00:02:59,012 --> 0:03:00,280
你会看到这样的界面

65
00:03:01,114 --> 0:03:03,450
Schoolwork需要

66
00:03:03,851 --> 0:03:06,153
这是学校使用的

67
00:03:06,220 --> 0:03:08,455
好将这些ID发给老师和学生

68
00:03:09,122 --> 0:03:11,725
因为我们都不怎么用

69
00:03:12,125 --> 0:03:14,361
在iOS里有个很有用的开关

70
00:03:14,661 --> 0:03:16,864
在开发者部分的设置里

71
00:03:19,099 --> 0:03:21,068
你需要安装开发者版本的iOS

72
00:03:21,668 --> 0:03:24,705
这会在设置中添加开发者选项

73
00:03:26,507 --> 0:03:28,675
其中一个设置

74
00:03:30,277 --> 0:03:32,412
这里你可以模拟用户角色

75
00:03:32,479 --> 0:03:33,580
不管是教师权限

76
00:03:34,047 --> 0:03:35,749
还是学生权限用户

77
00:03:36,517 --> 0:03:37,684
一开始这是关闭的

78
00:03:39,152 --> 0:03:41,889
但如果你先选择老师

79
00:03:42,189 --> 0:03:45,325
你就可以创建讲义并将其发送给学生

80
00:03:46,260 --> 0:03:50,264
我们回到设置

81
00:03:51,298 --> 0:03:53,133
你再回到Schoolwork

82
00:03:53,600 --> 0:03:55,435
就是学生角色了

83
00:03:55,502 --> 0:03:56,970
你可以完成刚刚

84
00:03:57,037 --> 0:03:59,206
老师发给你的讲义

85
00:04:00,073 --> 0:04:01,208
如果你还跟得上的话

86
00:04:01,275 --> 0:04:03,343
可以再切换回教师角色

87
00:04:03,677 --> 0:04:06,113
就能够检查学生的进度了

88
00:04:07,481 --> 0:04:09,683
若你从没用过Schoolwork

89
00:04:10,017 --> 0:04:12,085
这就是讲义的样子

90
00:04:12,619 --> 0:04:13,921
卡片顶部的

91
00:04:13,987 --> 0:04:16,723
讲义收件人是老师选择的

92
00:04:16,990 --> 0:04:19,125
讲义的标题和说明

93
00:04:19,192 --> 0:04:21,995
就在收件人下面 也是老师创建的

94
00:04:23,564 --> 0:04:24,498
但是活动

95
00:04:24,998 --> 0:04:27,467
你看到的这个图标

96
00:04:27,935 --> 0:04:30,637
可能是启用ClassKit的

97
00:04:31,538 --> 0:04:33,073
那么我们如何从代码

98
00:04:33,440 --> 0:04:35,108
从app中获取 再发送给讲义呢

99
00:04:36,443 --> 0:04:37,644
通过ClassKit

100
00:04:39,313 --> 0:04:43,050
WWDC 2018有一场演讲

101
00:04:43,317 --> 0:04:45,619
专门是讲ClassKit

102
00:04:46,119 --> 0:04:47,154
简而言之

103
00:04:47,221 --> 0:04:50,924
我会为你介绍ClassKit中

104
00:04:51,959 --> 0:04:53,193
就是CLSContext

105
00:04:54,161 --> 0:04:56,964
如果你对ClassKit

106
00:04:57,030 --> 0:04:59,099
那起码要理解CLSContext

107
00:04:59,166 --> 0:05:01,602
这会让你知道你的app

108
00:04:59,166 --> 0:05:01,602
这会让你知道你的app

109
00:05:01,668 --> 0:05:04,171
在Schoolwork是否清楚

110
00:05:04,905 --> 0:05:06,807
都是因为CLSContext

111
00:05:07,307 --> 0:05:09,710
你的app才能显示它支持的活动

112
00:05:10,511 --> 0:05:11,778
如果你的app是教写代码的

113
00:05:12,079 --> 0:05:14,047
那么每节课都可能是单独的活动

114
00:05:14,381 --> 0:05:17,951
所以每节课都有一个

115
00:05:19,386 --> 0:05:20,754
当学生使用app时

116
00:05:21,188 --> 0:05:22,756
这些一样的CLSContext

117
00:05:23,156 --> 0:05:25,959
就会提供挂起进度数据的脚手架

118
00:05:26,793 --> 0:05:27,895
在这个例子中

119
00:05:27,961 --> 0:05:30,831
我刚刚说到我们

120
00:05:31,331 --> 0:05:33,033
或者app中有一场测试

121
00:05:33,100 --> 0:05:36,003
我们就可以将测验成绩

122
00:05:37,971 --> 0:05:39,072
正如我讲到的

123
00:05:39,339 --> 0:05:42,376
你的app可以创建和活动数量

124
00:05:42,709 --> 0:05:44,645
一样多的CLSContext

125
00:05:45,045 --> 0:05:46,146
多少都可以

126
00:05:47,080 --> 0:05:49,650
ClassKit将其组织在一个

127
00:05:49,716 --> 0:05:51,351
父子关系的树形结构中

128
00:05:53,720 --> 0:05:56,423
我们来看看到底什么是上下文树

129
00:05:57,391 --> 0:05:59,193
它以CLSContext开始

130
00:05:59,459 --> 0:06:00,727
如果你的app没有创建的话

131
00:05:59,459 --> 0:06:00,727
如果你的app没有创建的话

132
00:06:01,195 --> 0:06:02,629
这是主要app上下文

133
00:06:03,397 --> 0:06:06,433
主要app上下文是在你需要时

134
00:06:06,500 --> 0:06:07,501
由ClassKit创建的

135
00:06:07,868 --> 0:06:10,838
该上下文是

136
00:06:11,104 --> 0:06:13,740
的来源 是上下文树的子项

137
00:06:14,641 --> 0:06:15,943
是树的根节点

138
00:06:17,444 --> 0:06:19,980
所以在app中使用

139
00:06:20,280 --> 0:06:23,217
你需要从ClassKit

140
00:06:23,984 --> 0:06:27,020
只需调用CLSDataStore

141
00:06:27,521 --> 0:06:28,455
如图所示

142
00:06:29,056 --> 0:06:31,859
在我们继续创建上下文

143
00:06:31,925 --> 0:06:33,894
把它们添加到主app上下文之前

144
00:06:34,428 --> 0:06:35,796
我们需要回过头看看

145
00:06:36,330 --> 0:06:40,033
我们app想要呈现的

146
00:06:40,100 --> 0:06:41,301
（app活动）

147
00:06:42,002 --> 0:06:45,339
我还是用刚刚

148
00:06:46,073 --> 0:06:47,074
在我们的例子中

149
00:06:47,140 --> 0:06:49,543
假设有三个主要部分

150
00:06:50,110 --> 0:06:53,447
介绍部分 变量和数据类型部分

151
00:06:53,947 --> 0:06:55,349
还有就是条件

152
00:06:56,517 --> 0:06:59,486
我们将每个部分都看成是活动

153
00:06:59,753 --> 0:07:03,457
如果老师想将其中一部分作为讲义

154
00:06:59,753 --> 0:07:03,457
如果老师想将其中一部分作为讲义

155
00:07:04,358 --> 0:07:07,594
这些部分都较大 对于单个讲义而言

156
00:07:07,895 --> 0:07:09,830
它的范围可能太大了

157
00:07:11,164 --> 0:07:12,699
但是细看我们的app

158
00:07:12,766 --> 0:07:15,869
每个部分app里都有独立的课程

159
00:07:16,937 --> 0:07:19,606
课程更小 更易于接受

160
00:07:20,440 --> 0:07:23,777
展示这些比活动更合理

161
00:07:24,978 --> 0:07:26,680
因为部分相当宽泛

162
00:07:27,181 --> 0:07:30,050
我就假设老师不会分配一整个部分

163
00:07:30,517 --> 0:07:32,619
所以我就不考虑它们了

164
00:07:33,387 --> 0:07:34,922
我们就留下这七个课程

165
00:07:36,323 --> 0:07:38,091
在我们的app里

166
00:07:38,358 --> 0:07:40,227
有一些课程后面还有测试

167
00:07:40,294 --> 0:07:42,296
来检验学生对课程的理解情况

168
00:07:43,030 --> 0:07:45,766
这是我们的app可以提供的

169
00:07:45,832 --> 0:07:47,768
是给老师的有用进度数据

170
00:07:48,135 --> 0:07:50,537
比如 测试中学生的分数

171
00:07:51,638 --> 0:07:52,573
那么这是什么意思呢

172
00:07:53,240 --> 0:07:56,343
我们用ClassKit的树结构

173
00:07:56,844 --> 0:07:58,846
测验可以作为

174
00:07:58,912 --> 0:08:00,180
对应课程的子项活动

175
00:07:58,912 --> 0:08:00,180
对应课程的子项活动

176
00:08:01,081 --> 0:08:04,651
现在这里的每个项目都有意义

177
00:08:04,985 --> 0:08:06,753
是可追踪的进度活动

178
00:08:07,287 --> 0:08:08,288
不会过于宽泛

179
00:08:08,755 --> 0:08:12,259
现在我们来看看app

180
00:08:12,659 --> 0:08:13,927
如何展示这些活动

181
00:08:15,729 --> 0:08:19,566
所以我现在用树排列的方式

182
00:08:20,033 --> 0:08:22,069
树的顶端

183
00:08:22,336 --> 0:08:24,972
就是由ClassKit提供的

184
00:08:25,639 --> 0:08:28,976
主要app上下文的下面

185
00:08:29,877 --> 0:08:31,712
也就是我们刚才说的七个课程

186
00:08:32,479 --> 0:08:34,347
或者是带有测试的课程

187
00:08:34,414 --> 0:08:37,618
这个作为上下文的子项代表了测试

188
00:08:38,585 --> 0:08:42,089
代表app创建的

189
00:08:42,556 --> 0:08:45,592
是CLSContext

190
00:08:46,760 --> 0:08:50,531
标识符是你希望分配给

191
00:08:51,231 --> 0:08:53,100
对老师和学生不可见

192
00:08:53,166 --> 0:08:55,536
所以你可以用任何你任何

193
00:08:55,969 --> 0:08:57,070
在该例中

194
00:08:57,137 --> 0:08:59,806
我的命名就相当紧凑但也具有描述性

195
00:09:01,608 --> 0:09:04,244
CLSContext也有标题属性

196
00:09:04,578 --> 0:09:06,547
这对老师和学生是可见的

197
00:09:06,613 --> 0:09:07,881
待会儿会看到

198
00:09:08,515 --> 0:09:10,884
我只展示上下文树的标题部分

199
00:09:10,951 --> 0:09:13,320
因为整个树占屏幕控件

200
00:09:13,387 --> 0:09:14,688
太大了 会看不见

201
00:09:16,423 --> 0:09:17,925
让我们回到标识符

202
00:09:18,292 --> 0:09:19,226
从软件的角度看

203
00:09:19,293 --> 0:09:21,528
我们专门处理标识符属性

204
00:09:22,529 --> 0:09:26,934
将具有给定标识符的CLSContext

205
00:09:27,601 --> 0:09:30,137
它就会有一个隐含的标识符路径

206
00:09:31,305 --> 0:09:34,174
ClassKit API通常

207
00:09:34,241 --> 0:09:36,677
所以要简单解释一下

208
00:09:37,411 --> 0:09:39,680
标识符路径是一个字符串数组

209
00:09:40,214 --> 0:09:42,916
是CLSContext的

210
00:09:43,317 --> 0:09:47,087
从上下文树的底部

211
00:09:47,988 --> 0:09:50,290
我从主app上下文的任一子项开始

212
00:09:50,357 --> 0:09:51,525
并获取标识符

213
00:09:51,992 --> 0:09:55,796
从树上往下走的时候

214
00:09:55,863 --> 0:09:58,866
直到到达预期CLSContext

215
00:09:59,633 --> 0:10:02,736
你现在就有通往该

216
00:09:59,633 --> 0:10:02,736
你现在就有通往该

217
00:10:04,605 --> 0:10:06,240
我只举了一个简单的例子

218
00:10:06,540 --> 0:10:08,675
因为CLSContext

219
00:10:10,143 --> 0:10:13,313
标识符路径是4下划线结构

220
00:10:13,680 --> 0:10:15,182
和4下划线测试

221
00:10:15,249 --> 0:10:17,885
它就指这一个CLSContext

222
00:10:18,218 --> 0:10:20,721
并且是此测验上下文的标识符路径

223
00:10:22,022 --> 0:10:24,024
现在将其在app中进行测试

224
00:10:24,358 --> 0:10:27,694
并考虑我们想要支持的活动及其等级

225
00:10:28,161 --> 0:10:31,565
我们就得到了这个

226
00:10:32,432 --> 0:10:35,836
如果你想查看创建

227
00:10:36,403 --> 0:10:38,972
请点击此次演讲相关资源

228
00:10:39,773 --> 0:10:41,775
回到演讲的内容

229
00:10:42,209 --> 0:10:45,112
我们再次回到Schoolwork

230
00:10:45,179 --> 0:10:48,549
将对于CLSContext的讨论

231
00:10:50,217 --> 0:10:53,120
在设置中你可以选择教师角色

232
00:10:53,654 --> 0:10:56,023
选择教师并启动

233
00:10:57,291 --> 0:11:00,394
在界面右上角有一个加号按钮

234
00:10:57,291 --> 0:11:00,394
在界面右上角有一个加号按钮

235
00:11:00,727 --> 0:11:02,763
允许老师创建新讲义

236
00:11:03,964 --> 0:11:05,098
点击该按钮

237
00:11:05,832 --> 0:11:07,000
出现该界面

238
00:11:07,434 --> 0:11:09,169
允许创建新讲义

239
00:11:10,571 --> 0:11:11,805
正如我前面所说

240
00:11:11,872 --> 0:11:14,441
老师可以决定将讲义发给谁

241
00:11:14,942 --> 0:11:17,211
还可以创建讲义标题和介绍

242
00:11:18,011 --> 0:11:19,379
但是更有趣的是

243
00:11:19,446 --> 0:11:20,747
这个蓝色的加号按钮

244
00:11:21,515 --> 0:11:23,250
标签是添加活动

245
00:11:24,184 --> 0:11:26,420
点击该按钮 出现活动列表

246
00:11:27,321 --> 0:11:30,924
你可以选择添加不同文件类型

247
00:11:30,991 --> 0:11:32,960
但我们应该注意最上面的选项

248
00:11:33,594 --> 0:11:34,428
app

249
00:11:34,962 --> 0:11:39,132
点击该按钮会出现app活动列表

250
00:11:39,499 --> 0:11:41,568
列表第二项就是我们的app

251
00:11:42,769 --> 0:11:45,472
我们的app出现了

252
00:11:45,539 --> 0:11:47,674
说明我们已经

253
00:11:49,643 --> 0:11:52,880
右边的V形按钮告诉老师

254
00:11:52,946 --> 0:11:54,281
可以查看该app的活动

255
00:11:55,616 --> 0:11:56,950
点击该按钮

256
00:11:57,451 --> 0:11:58,886
你认为教师界面会出现什么

257
00:11:59,520 --> 0:12:00,654
是我们主要app上下文

258
00:11:59,520 --> 0:12:00,654
是我们主要app上下文

259
00:12:01,021 --> 0:12:04,525
第一个下行分支的

260
00:12:05,392 --> 0:12:08,729
当然我们展示的

261
00:12:08,795 --> 0:12:09,930
不是标识符

262
00:12:10,464 --> 0:12:11,865
这样才是可读的

263
00:12:13,767 --> 0:12:16,303
你可能注意到后五项都有V形按钮

264
00:12:17,404 --> 0:12:20,240
这些都是包含测试的

265
00:12:20,307 --> 0:12:21,542
CLSContext

266
00:12:22,643 --> 0:12:23,677
例如

267
00:12:24,578 --> 0:12:26,747
如果老师点击第三项

268
00:12:27,181 --> 0:12:28,315
什么是变量

269
00:12:29,750 --> 0:12:30,617
这就是测试

270
00:12:31,318 --> 0:12:34,721
但是假设老师正在创建

271
00:12:35,155 --> 0:12:37,291
该课程还尚未提到变量

272
00:12:37,591 --> 0:12:40,561
老师就可以点击此按钮

273
00:12:41,395 --> 0:12:43,964
老师再点击右上角选择按钮

274
00:12:44,731 --> 0:12:46,567
选择什么是Swift活动

275
00:12:47,201 --> 0:12:49,203
这样你就可以将活动加入讲义

276
00:12:50,537 --> 0:12:53,240
我们再回到讲义编辑视图

277
00:12:53,574 --> 0:12:57,044
老师就可以点击右上角的发送

278
00:12:57,110 --> 0:12:59,379
将讲义发送给学生

279
00:13:00,714 --> 0:13:01,915
正如我们所见

280
00:13:02,216 --> 0:13:05,652
带有活动的讲义卡片就会出现在

281
00:13:05,719 --> 0:13:06,820
每一个人的Schoolwork中

282
00:13:07,921 --> 0:13:09,423
ClassKit还有很多

283
00:13:09,489 --> 0:13:12,192
比如如果学生点击活动

284
00:13:12,259 --> 0:13:13,260
并启动app会怎样

285
00:13:13,594 --> 0:13:15,329
以及如何报告进度数据

286
00:13:15,629 --> 0:13:17,631
但这都不是我们

287
00:13:18,699 --> 0:13:20,901
如果你想了解更多关于这些的信息

288
00:13:20,968 --> 0:13:23,537
我建议你查看其他与此相关的演讲

289
00:13:23,604 --> 0:13:26,607
WWDC 2018的

290
00:13:28,408 --> 0:13:31,178
刚刚介绍了ClassKit的背景

291
00:13:31,245 --> 0:13:32,880
现在我们来讲讲新功能

292
00:13:34,214 --> 0:13:35,716
我要介绍的功能

293
00:13:35,782 --> 0:13:38,986
在iOS 12.2的

294
00:13:39,520 --> 0:13:41,188
所以现在已经是可用的了

295
00:13:42,189 --> 0:13:44,424
我们添加了新的

296
00:13:44,992 --> 0:13:48,028
添加了一个新功能

297
00:13:48,529 --> 0:13:50,297
以及添加了新的进度值

298
00:13:51,265 --> 0:13:54,468
我首先说说上下文提供程序扩展

299
00:13:55,235 --> 0:13:56,970
它的名字已经解释了它的功能

300
00:13:57,404 --> 0:13:59,907
这是一个app的新扩展

301
00:13:59,973 --> 0:14:02,676
可以用来创建

302
00:13:59,973 --> 0:14:02,676
可以用来创建

303
00:14:03,243 --> 0:14:04,378
来提供上下文

304
00:14:05,512 --> 0:14:07,247
我在解释它如何工作之前

305
00:14:07,514 --> 0:14:10,184
我想先告诉你如何创建该扩展

306
00:14:10,817 --> 0:14:12,186
这是Xcode

307
00:14:12,686 --> 0:14:15,522
如果您转到文件菜单

308
00:14:15,956 --> 0:14:18,792
对于iOS app扩展模板

309
00:14:18,859 --> 0:14:19,927
（内容提供程序扩展模板）

310
00:14:19,993 --> 0:14:23,330
ClassKit上下文提供程序

311
00:14:24,097 --> 0:14:25,866
当你将该目标加入你的app

312
00:14:25,933 --> 0:14:27,701
它就会新建文件

313
00:14:28,535 --> 0:14:31,471
现在我来说说内容提供程序扩展模板

314
00:14:31,538 --> 0:14:34,007
我会像你展示可能用到的样板代码

315
00:14:34,374 --> 0:14:37,044
之后向你展示

316
00:14:39,146 --> 0:14:42,950
我刚刚说到内容提供程序扩展模板

317
00:14:43,250 --> 0:14:45,052
实际上只是一个单一类

318
00:14:45,686 --> 0:14:48,689
CLSContextProvider

319
00:14:48,989 --> 0:14:51,458
你必须只用一个函数覆盖

320
00:14:52,492 --> 0:14:55,495
完成上下文的

321
00:14:56,430 --> 0:14:59,132
ClassKit会调用你的扩展

322
00:14:59,766 --> 0:15:03,103
在实现调用时 扩展会添加最小更新

323
00:14:59,766 --> 0:15:03,103
在实现调用时 扩展会添加最小更新

324
00:15:03,170 --> 0:15:05,739
或是提供正在传输的

325
00:15:06,240 --> 0:15:08,709
CLSContext子项

326
00:15:09,576 --> 0:15:11,879
你在该函数中不会回到子项

327
00:15:12,212 --> 0:15:14,848
你的扩展只会添加或更新

328
00:15:14,915 --> 0:15:18,852
上下文树中的特定部分并保存更改

329
00:15:20,454 --> 0:15:21,855
原因是

330
00:15:22,289 --> 0:15:25,325
你在该函数中的代码应该尽可能高校

331
00:15:27,528 --> 0:15:29,296
我现在回到我们刚才的例子

332
00:15:29,363 --> 0:15:31,231
来告诉你这是怎么工作的

333
00:15:32,065 --> 0:15:33,667
你的扩展被调用

334
00:15:33,934 --> 0:15:36,803
上下文完成

335
00:15:37,237 --> 0:15:40,741
传输的CLSContext

336
00:15:41,675 --> 0:15:43,610
代码怎么知道

337
00:15:43,944 --> 0:15:47,948
最简单的方法是看

338
00:15:48,482 --> 0:15:50,784
只有主要app上下文没有

339
00:15:51,652 --> 0:15:54,755
所以你的合同是更新你的上下文树

340
00:15:54,821 --> 0:15:57,558
让其提供至少第一层 也就是

341
00:15:57,824 --> 0:16:01,528
主要app上下文的

342
00:15:57,824 --> 0:16:01,528
主要app上下文的

343
00:16:02,496 --> 0:16:03,764
回想我们的例子

344
00:16:04,097 --> 0:16:07,768
在CLSContext

345
00:16:07,835 --> 0:16:10,204
Swift是什么 变量是什么等等

346
00:16:10,571 --> 0:16:12,406
就是顶层的七个课程

347
00:16:13,040 --> 0:16:16,877
我们一直用它们的标识符来指代它们

348
00:16:19,379 --> 0:16:20,781
如果这些子项

349
00:16:21,415 --> 0:16:23,417
在你的上下文树中都存在了

350
00:16:23,684 --> 0:16:26,587
也不需要修改

351
00:16:27,120 --> 0:16:31,391
你就可以直接调用完成

352
00:16:32,226 --> 0:16:35,629
但扩展允许你创建树的这一部分

353
00:16:35,929 --> 0:16:39,499
教师可能从没有看过

354
00:16:39,766 --> 0:16:41,902
或者他们就从来

355
00:16:42,769 --> 0:16:45,839
我想补充一点

356
00:16:45,906 --> 0:16:47,574
app中的上下文树的更多部分

357
00:16:48,108 --> 0:16:50,377
其实它可以填充整个上下文树

358
00:16:50,644 --> 0:16:52,012
只要它够快

359
00:16:52,846 --> 0:16:54,548
待会你就知道这为什么很重要了

360
00:16:54,982 --> 0:16:56,149
在这个例子中

361
00:16:56,216 --> 0:16:57,417
还是使用最低限度

362
00:16:57,684 --> 0:17:00,654
并且假设我们只创建传入的

363
00:16:57,684 --> 0:17:00,654
并且假设我们只创建传入的

364
00:17:00,721 --> 0:17:02,589
CLSContext的直接子项

365
00:17:03,257 --> 0:17:05,858
我们创建这七个子项

366
00:17:06,226 --> 0:17:08,127
上下文树应该就是这样的

367
00:17:09,896 --> 0:17:11,231
我再举一个例子

368
00:17:11,531 --> 0:17:13,200
能让你们更加清晰地理解运作过程

369
00:17:13,901 --> 0:17:16,136
现在扩展被再次调用

370
00:17:16,803 --> 0:17:21,508
但是这次CLSContext

371
00:17:21,808 --> 0:17:24,211
是传递给

372
00:17:25,646 --> 0:17:28,882
而代码会添加或更新

373
00:17:28,949 --> 0:17:32,753
至少是3下划线数据类型的直接子项

374
00:17:33,954 --> 0:17:36,290
你可能还记得 这是一个测试

375
00:17:36,590 --> 0:17:38,158
所以 我们把它添加到这里

376
00:17:39,092 --> 0:17:40,394
（上下文提供程序扩展目的）

377
00:17:40,460 --> 0:17:43,330
那么上下文提供程序扩展

378
00:17:44,064 --> 0:17:45,832
我已经总结出来了

379
00:17:45,899 --> 0:17:50,604
它让你的app能够

380
00:17:50,938 --> 0:17:52,873
宣传你的app活动

381
00:17:53,473 --> 0:17:56,443
这样老师其实并不需要

382
00:17:57,678 --> 0:18:01,081
当然老师还是需要下载该app

383
00:17:57,678 --> 0:18:01,081
当然老师还是需要下载该app

384
00:18:01,448 --> 0:18:04,618
但是下载行为可以让

385
00:18:04,685 --> 0:18:06,353
在iOS上注册

386
00:18:06,420 --> 0:18:09,223
比如ClassKit

387
00:18:09,590 --> 0:18:11,592
将了解可用活动

388
00:18:15,495 --> 0:18:18,365
你的app可能支持一系列活动

389
00:18:18,632 --> 0:18:20,767
可能会有很宽或者是很长的树

390
00:18:21,535 --> 0:18:23,637
在你启动app时创建一整个树

391
00:18:23,704 --> 0:18:25,239
可能会导致性能问题

392
00:18:25,305 --> 0:18:28,909
因此 此扩展旨在允许

393
00:18:28,976 --> 0:18:31,478
发放CLSContext

394
00:18:32,713 --> 0:18:35,282
有一些ClassKit在

395
00:18:35,349 --> 0:18:37,818
需要用户交互

396
00:18:38,685 --> 0:18:41,622
很遗憾 该扩展在这些情况下

397
00:18:41,688 --> 0:18:42,656
并不适用

398
00:18:43,023 --> 0:18:46,260
该扩展是在你的app

399
00:18:48,495 --> 0:18:52,332
最后 我想告诉你

400
00:18:52,399 --> 0:18:54,134
如何使用老师工作流程

401
00:18:54,868 --> 0:18:56,537
回忆一下我之前的例子

402
00:18:56,904 --> 0:18:58,539
老师要创建一个讲义

403
00:18:58,605 --> 0:19:00,908
并浏览可用活动

404
00:18:58,605 --> 0:19:00,908
并浏览可用活动

405
00:19:01,642 --> 0:19:03,777
如果你的app有

406
00:19:04,111 --> 0:19:07,147
老师在进入Schoolwork

407
00:19:07,214 --> 0:19:08,215
它就能被调用

408
00:19:08,582 --> 0:19:11,251
你的扩展应该已使用主

409
00:19:11,518 --> 0:19:14,855
所以你的app可以作为

410
00:19:15,722 --> 0:19:19,426
在老师开始进一步浏览

411
00:19:20,694 --> 0:19:23,730
你可以重复调用扩展

412
00:19:23,797 --> 0:19:25,999
让你的CLSContext树更长

413
00:19:27,034 --> 0:19:31,171
因为你的树或多或少是实时创建

414
00:19:31,605 --> 0:19:33,340
但是必须在老师浏览时创建完成

415
00:19:33,841 --> 0:19:36,577
这就是为什么你的扩展代码

416
00:19:36,643 --> 0:19:41,081
要快速创建和保存

417
00:19:42,216 --> 0:19:45,319
现在你看到这些东西

418
00:19:45,586 --> 0:19:49,056
扩展 你的app为活动和

419
00:19:50,424 --> 0:19:52,059
ClassKit的另一个新功能

420
00:19:52,426 --> 0:19:55,429
是一个让你可以标记

421
00:19:55,729 --> 0:19:59,366
这让学生更加容易告诉老师

422
00:19:59,433 --> 0:20:01,702
分配的活动已完成

423
00:19:59,433 --> 0:20:01,702
分配的活动已完成

424
00:20:03,036 --> 0:20:05,172
为了更好的理解为什么

425
00:20:05,706 --> 0:20:09,376
我要再次打开Schoolwork

426
00:20:10,110 --> 0:20:13,113
我们看到了老师是如何进行分配活动

427
00:20:13,580 --> 0:20:15,148
那么接收终端又是什么样的呢

428
00:20:15,816 --> 0:20:18,051
这是我刚刚展示的讲义卡

429
00:20:18,385 --> 0:20:20,220
而这时学生会在

430
00:20:21,154 --> 0:20:22,356
当他们点击

431
00:20:25,025 --> 0:20:27,127
他们就可以看到带有活动的讲义

432
00:20:27,528 --> 0:20:29,162
在这个例子中只有一个活动

433
00:20:29,530 --> 0:20:31,865
点击活动会将其添加至app中

434
00:20:32,299 --> 0:20:34,301
但他们完成活动后

435
00:20:34,368 --> 0:20:37,137
学生依旧需要

436
00:20:37,671 --> 0:20:39,139
点击完成按钮

437
00:20:40,274 --> 0:20:43,076
如果你的app采用的是

438
00:20:43,377 --> 0:20:45,179
就不需要最后一步了

439
00:20:46,280 --> 0:20:49,116
在你的app中

440
00:20:49,183 --> 0:20:50,817
来标记完成

441
00:20:52,386 --> 0:20:54,888
CLSDataStore

442
00:20:55,289 --> 0:20:58,792
叫completeAllAssignedActivities

443
00:20:59,793 --> 0:21:01,094
该路径当然是

444
00:20:59,793 --> 0:21:01,094
该路径当然是

445
00:21:01,161 --> 0:21:03,697
CLSContext或者是学生

446
00:21:04,064 --> 0:21:05,899
所完成的活动的标识符路径

447
00:21:06,700 --> 0:21:09,269
例如 学生刚刚完成了

448
00:21:09,336 --> 0:21:11,471
这个app中的变量练习

449
00:21:12,239 --> 0:21:16,176
我们可以通过

450
00:21:16,243 --> 0:21:18,011
调用completeAllAssignedActivities

451
00:21:18,378 --> 0:21:20,981
2下划线变量 2下划线测试

452
00:21:21,915 --> 0:21:24,284
下次学生再返回

453
00:21:25,252 --> 0:21:26,987
它就会指示该活动完成

454
00:21:27,554 --> 0:21:30,057
而且分配讲义的老师

455
00:21:30,123 --> 0:21:33,093
也会看到学生活动已标记为完成

456
00:21:33,894 --> 0:21:35,629
如果你的app采用了这项新调用

457
00:21:35,896 --> 0:21:37,965
学生的工作流程会更顺畅

458
00:21:39,900 --> 0:21:42,936
最后 ClassKit和

459
00:21:43,003 --> 0:21:44,838
都添加了新的活动类型

460
00:21:45,172 --> 0:21:46,773
正确/错误类型

461
00:21:46,840 --> 0:21:48,008
（正确/错误类型）

462
00:21:48,408 --> 0:21:49,676
在ClassKit介绍中

463
00:21:49,743 --> 0:21:52,379
我没有讲到CLS活动类型

464
00:21:52,946 --> 0:21:55,148
但是为了介绍新功能

465
00:21:55,215 --> 0:21:58,018
我说到了每一个

466
00:21:58,085 --> 0:22:01,722
都可以以CLS

467
00:21:58,085 --> 0:22:01,722
都可以以CLS

468
00:22:02,289 --> 0:22:07,327
而且CLS活动可以包含

469
00:22:08,929 --> 0:22:13,300
CLSActivityItem

470
00:22:13,767 --> 0:22:18,038
我想特别提到一个

471
00:22:20,007 --> 0:22:21,408
CLSBinaryItem

472
00:22:21,675 --> 0:22:24,344
只能在一半情况下展示进度

473
00:22:24,411 --> 0:22:25,846
我将它们展示出来了

474
00:22:26,647 --> 0:22:29,383
可能你想报告的进度就只是

475
00:22:29,449 --> 0:22:30,584
学生过没过而已

476
00:22:30,651 --> 0:22:33,921
CLSBinaryItem

477
00:22:34,521 --> 0:22:38,759
此外你也可以展示真或假 是或否

478
00:22:39,826 --> 0:22:42,362
但我们从一些开发者那里听到说

479
00:22:42,429 --> 0:22:43,797
我们确实一些二元的东西

480
00:22:45,532 --> 0:22:48,869
所以ClassKit定义了

481
00:22:48,936 --> 0:22:51,271
来描述这种新类型的二元活动

482
00:22:52,072 --> 0:22:54,641
想想在我们的app中的测试

483
00:22:55,209 --> 0:22:56,610
它由十个问题组成

484
00:22:56,944 --> 0:23:01,014
我们不会对主要活动项

485
00:22:56,944 --> 0:23:01,014
我们不会对主要活动项

486
00:23:01,315 --> 0:23:03,650
因为我们想把分数表示为数量

487
00:23:03,717 --> 0:23:07,454
比如说老师可以看到学生得了70分

488
00:23:08,922 --> 0:23:12,726
作为奖励 我们的app可以

489
00:23:12,793 --> 0:23:14,761
比如说每一个问题

490
00:23:15,162 --> 0:23:17,331
都可以看到是正确还是错误

491
00:23:17,397 --> 0:23:20,067
这样老师就能看到学生哪题答错

492
00:23:20,434 --> 0:23:21,702
哪题答对

493
00:23:22,236 --> 0:23:25,372
我只是举了一个这种类型

494
00:23:26,807 --> 0:23:28,108
最后

495
00:23:28,475 --> 0:23:31,378
我们来讲讲ClassKit

496
00:23:31,445 --> 0:23:32,613
（最佳实践）

497
00:23:33,747 --> 0:23:37,651
我刚说到你可以在

498
00:23:37,718 --> 0:23:41,255
一个CLSContext的

499
00:23:42,055 --> 0:23:45,092
乍一听 这个错误好像很难做

500
00:23:45,659 --> 0:23:47,194
但是想想这样的情景

501
00:23:47,895 --> 0:23:49,796
你第一次启动你的app

502
00:23:50,097 --> 0:23:53,033
尽职尽责地创建了一个

503
00:23:53,100 --> 0:23:55,335
为了创建app活动

504
00:23:56,003 --> 0:23:58,172
这是原始树的一部分

505
00:23:59,706 --> 0:24:01,074
第二次启动app时

506
00:23:59,706 --> 0:24:01,074
第二次启动app时

507
00:24:01,575 --> 0:24:04,845
不应该再创建一次

508
00:24:06,346 --> 0:24:08,448
这将添加具有与现有

509
00:24:08,515 --> 0:24:11,718
标识符路径冲突的

510
00:24:12,252 --> 0:24:15,856
在添加之前记住要检查

511
00:24:15,923 --> 0:24:17,524
CLSContext在树中

512
00:24:19,293 --> 0:24:22,162
检查CLSContext

513
00:24:22,229 --> 0:24:23,630
有几种方法

514
00:24:24,031 --> 0:24:29,036
一是调用CLSDataStore功能上下文

515
00:24:29,570 --> 0:24:31,205
当完成模块被调用

516
00:24:31,572 --> 0:24:33,540
请注意 该调用是异步的

517
00:24:33,974 --> 0:24:36,577
返回的CLSContext空数组

518
00:24:36,877 --> 0:24:40,247
将指示该路径的上下文尚不存在

519
00:24:40,314 --> 0:24:42,583
所以可以创建

520
00:24:43,283 --> 0:24:46,153
第二种方法是

521
00:24:46,520 --> 0:24:49,623
子项

522
00:24:50,224 --> 0:24:51,592
这也是异步的

523
00:24:51,658 --> 0:24:53,093
和前面的例子一样

524
00:24:53,393 --> 0:24:56,763
如果没有上下文经过完成模块

525
00:24:56,830 --> 0:24:59,967
那么你的app就可以

526
00:25:00,734 --> 0:25:03,070
在你的app中有很多地方

527
00:25:03,136 --> 0:25:05,138
需要进行这样的检查

528
00:25:06,006 --> 0:25:09,142
如果你采用的是新的

529
00:25:09,476 --> 0:25:12,045
你就添加了更多的矢量

530
00:25:12,112 --> 0:25:15,983
是否CLSContext

531
00:25:17,451 --> 0:25:20,420
所以这可能是很棒的解决方案

532
00:25:20,754 --> 0:25:23,724
就是实现CLSDataStore

533
00:25:23,790 --> 0:25:26,894
createContext forIdentifier

534
00:25:26,960 --> 0:25:28,228
和parentIdentifierPath

535
00:25:29,062 --> 0:25:30,797
如果你将其中一类

536
00:25:30,864 --> 0:25:32,466
CLSDataStore代理

537
00:25:32,900 --> 0:25:34,701
那么当你调用任何一项

538
00:25:34,768 --> 0:25:38,105
如CLSDataStore上下文

539
00:25:38,672 --> 0:25:40,774
代理函数就会在上下文

540
00:25:41,074 --> 0:25:43,110
从未被创建的情况下才会被调用

541
00:25:44,044 --> 0:25:46,513
实现委托就容易了

542
00:25:46,780 --> 0:25:49,516
所有上下文都会创建到

543
00:25:50,784 --> 0:25:52,986
以我的经验

544
00:25:53,053 --> 0:25:56,290
创建CLSContext实际操作

545
00:25:56,356 --> 0:25:57,925
所以这里的代码我没有写

546
00:25:58,692 --> 0:26:01,061
如果你是第一次

547
00:25:58,692 --> 0:26:01,061
如果你是第一次

548
00:26:01,495 --> 0:26:04,598
可以从2018年WWDC的

549
00:26:04,865 --> 0:26:08,001
以及示范代码开始上手

550
00:26:09,736 --> 0:26:13,440
这是一个你app中可能存在的

551
00:26:13,907 --> 0:26:15,909
该函数叫

552
00:26:16,376 --> 0:26:20,380
可以调用以使特定的

553
00:26:20,948 --> 0:26:22,950
我们只将它传入标识符路径

554
00:26:24,084 --> 0:26:26,553
该函数调用

555
00:26:26,620 --> 0:26:29,890
以查找与传入的

556
00:26:30,591 --> 0:26:33,360
再次强调 因为我们在

557
00:26:33,427 --> 0:26:35,495
设置了

558
00:26:35,896 --> 0:26:39,733
我们可以肯定 如果从未创建

559
00:26:40,067 --> 0:26:43,971
那么它就在委托函数中

560
00:26:44,037 --> 0:26:45,472
因此应从查询中

561
00:26:47,040 --> 0:26:49,042
我们让上下文返回至活动

562
00:26:49,476 --> 0:26:51,979
创建新活动并开始该活动

563
00:26:52,613 --> 0:26:55,549
这一系列调用表明我们希望

564
00:26:55,616 --> 0:26:59,052
以特定CLSContext的

565
00:27:00,187 --> 0:27:03,290
最后我们调用

566
00:27:03,357 --> 0:27:05,659
来发起我们刚刚完成的调用

567
00:27:06,693 --> 0:27:09,763
同样的 你就可以创建许多

568
00:27:10,130 --> 0:27:13,166
但是上下文创建代码

569
00:27:13,467 --> 0:27:15,702
在你的CLSDataStore

570
00:27:17,237 --> 0:27:18,739
如果你是ClassKit新手

571
00:27:18,805 --> 0:27:22,176
我希望这个介绍

572
00:27:22,442 --> 0:27:25,245
如果你认为老师和学生

573
00:27:25,312 --> 0:27:27,281
能在教育领域使用你的app

574
00:27:27,648 --> 0:27:30,150
那么你应该

575
00:27:31,051 --> 0:27:32,986
如果你对ClassKit

576
00:27:33,053 --> 0:27:36,490
我希望你能利用

577
00:27:36,857 --> 0:27:39,026
因为这些都是像你们这样的

578
00:27:39,092 --> 0:27:40,527
开发者反馈的结果

579
00:27:40,928 --> 0:27:41,828
（何去何从）

580
00:27:42,095 --> 0:27:44,464
请查看该演讲的附带链接

581
00:27:45,365 --> 0:27:49,703
你可以找到示例代码 文档和

582
00:27:49,770 --> 0:27:51,672
ClassKit演讲链接

583
00:27:52,472 --> 0:27:53,540
谢谢
