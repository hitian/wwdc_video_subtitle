1
00:00:01,516 --> 0:00:04,500
[ Music ]

2
00:00:09,516 --> 0:00:12,026
[ Applause ]

3
00:00:12,526 --> 0:00:13,886
&gt;&gt; Good afternoon, everyone, and

4
00:00:14,056 --> 0:00:15,106
thanks for joining us today.

5
00:00:16,065 --> 0:00:17,416
I'm Garrett, and I work on the

6
00:00:17,416 --> 0:00:18,656
Trust and Execution Team here at

7
00:00:18,656 --> 0:00:20,236
Apple and today we're here to

8
00:00:20,236 --> 0:00:21,756
talk All About Notarization.

9
00:00:22,276 --> 0:00:25,066
Here's a quick agenda for the

10
00:00:25,066 --> 0:00:25,346
talk.

11
00:00:25,346 --> 0:00:26,516
We're going to start with a

12
00:00:26,516 --> 0:00:27,656
brief overview of what

13
00:00:27,656 --> 0:00:29,046
notarization is and some of the

14
00:00:29,046 --> 0:00:30,006
benefits that it provides.

15
00:00:30,986 --> 0:00:31,776
Then we're going to talk about

16
00:00:31,776 --> 0:00:33,076
the application requirements to

17
00:00:33,076 --> 0:00:34,466
get your software notarized.

18
00:00:35,336 --> 0:00:36,256
And then finally we'll run

19
00:00:36,256 --> 0:00:38,156
through the workflows and tools

20
00:00:38,226 --> 0:00:40,086
you'll need to use to notarize

21
00:00:40,086 --> 0:00:40,656
your software.

22
00:00:40,656 --> 0:00:44,666
So let's get started.

23
00:00:45,196 --> 0:00:46,746
What exactly is notarization?

24
00:00:47,666 --> 0:00:50,136
Well, it's a process that we

25
00:00:50,136 --> 0:00:52,356
introduced last year at WWDC to

26
00:00:52,746 --> 0:00:54,106
help identify and block

27
00:00:54,366 --> 0:00:56,086
malicious software prior to

28
00:00:56,086 --> 0:00:56,666
distribution.

29
00:00:57,326 --> 0:00:59,346
Now it's an extension of the

30
00:00:59,346 --> 0:01:00,906
Developer ID Program, which

31
00:00:59,346 --> 0:01:00,906
Developer ID Program, which

32
00:01:00,906 --> 0:01:01,676
means that you don't need to

33
00:01:01,676 --> 0:01:02,936
register for anything different

34
00:01:03,586 --> 0:01:04,796
or use different certificates

35
00:01:05,786 --> 0:01:07,236
which also means that you stay

36
00:01:07,236 --> 0:01:08,986
in control of signing and

37
00:01:08,986 --> 0:01:10,366
distribution of your software

38
00:01:10,696 --> 0:01:11,736
just like you did before

39
00:01:11,736 --> 0:01:12,886
notarization was introduced.

40
00:01:15,606 --> 0:01:17,396
The key to this is the Notary

41
00:01:17,396 --> 0:01:19,826
Service which performs automated

42
00:01:19,826 --> 0:01:22,136
security checks on Developer ID

43
00:01:22,136 --> 0:01:22,966
signed content.

44
00:01:23,546 --> 0:01:25,816
So let's run through a little

45
00:01:25,816 --> 0:01:26,926
bit about what the workflow

46
00:01:26,926 --> 0:01:28,426
looks like when you need to

47
00:01:28,426 --> 0:01:29,646
start notarizing your software

48
00:01:29,646 --> 0:01:30,306
for the first time.

49
00:01:32,216 --> 0:01:33,816
Here's a diagram that talks a

50
00:01:33,816 --> 0:01:34,706
little bit about what the

51
00:01:34,706 --> 0:01:35,696
development workflow can look

52
00:01:35,696 --> 0:01:37,636
like and local development

53
00:01:37,866 --> 0:01:39,266
remains completely unchanged.

54
00:01:39,966 --> 0:01:41,366
You build and sign at your desk

55
00:01:41,576 --> 0:01:42,656
using your Apple Developer

56
00:01:42,656 --> 0:01:44,526
Certificates until you have a

57
00:01:44,526 --> 0:01:45,236
release candidate.

58
00:01:45,776 --> 0:01:48,816
At that point you sign the

59
00:01:48,816 --> 0:01:50,196
software with your Developer ID

60
00:01:50,196 --> 0:01:52,166
Certificate, and you can send a

61
00:01:52,166 --> 0:01:53,486
copy of it to the Apple Notary

62
00:01:53,486 --> 0:01:55,536
Service for notarization.

63
00:01:56,726 --> 0:01:58,376
When notarization is complete

64
00:01:58,506 --> 0:02:00,346
and successful, the Notary

65
00:01:58,506 --> 0:02:00,346
and successful, the Notary

66
00:02:00,346 --> 0:02:02,076
Service can send back a ticket

67
00:02:02,846 --> 0:02:03,726
which you staple to your

68
00:02:03,726 --> 0:02:05,696
software prior to distribution

69
00:02:06,266 --> 0:02:09,045
and once it's stapled, the

70
00:02:09,045 --> 0:02:09,806
software is ready for

71
00:02:09,806 --> 0:02:11,396
distribution just like you did

72
00:02:11,396 --> 0:02:11,746
before.

73
00:02:14,066 --> 0:02:15,746
Now it's worth calling out that

74
00:02:16,046 --> 0:02:17,256
this workflow didn't change at

75
00:02:17,256 --> 0:02:18,326
all from last year, so this is

76
00:02:18,326 --> 0:02:19,296
just a bit of a refresher.

77
00:02:19,946 --> 0:02:22,816
Now what we didn't talk about

78
00:02:22,816 --> 0:02:24,446
last year was what happens when

79
00:02:24,446 --> 0:02:25,776
someone downloads your software

80
00:02:25,776 --> 0:02:26,996
and uses it for the first time.

81
00:02:28,426 --> 0:02:29,406
So when a user downloads your

82
00:02:29,406 --> 0:02:30,426
stapled software and

83
00:02:31,006 --> 0:02:32,096
double-click it to launch it,

84
00:02:32,556 --> 0:02:33,986
the gatekeeper will perform a

85
00:02:33,986 --> 0:02:34,716
verification.

86
00:02:35,966 --> 0:02:37,616
It'll check the local ticket and

87
00:02:37,616 --> 0:02:38,706
it will also reach out to the

88
00:02:38,706 --> 0:02:41,066
Notary Service via CloudKit to

89
00:02:41,066 --> 0:02:42,006
check for a ticket also.

90
00:02:42,886 --> 0:02:44,246
As long as the ticket checks out

91
00:02:44,246 --> 0:02:45,456
and the ticket matches the

92
00:02:45,456 --> 0:02:47,586
content of your app, gatekeeper

93
00:02:47,586 --> 0:02:48,696
will allow the application and

94
00:02:49,096 --> 0:02:50,076
the user will see the normal

95
00:02:50,076 --> 0:02:50,876
first launch prompt.

96
00:02:52,096 --> 0:02:53,746
Now I want to remind everyone

97
00:02:54,296 --> 0:02:56,466
that notarization is not an app

98
00:02:56,466 --> 0:02:56,746
review.

99
00:02:57,706 --> 0:02:59,186
The Notary Service performs a

100
00:02:59,186 --> 0:03:00,386
set of automated security

101
00:02:59,186 --> 0:03:00,386
set of automated security

102
00:03:01,246 --> 0:03:01,366
checks.

103
00:03:03,016 --> 0:03:05,866
Now last year we made a goal to

104
00:03:05,866 --> 0:03:07,276
get most responses back from the

105
00:03:07,276 --> 0:03:08,586
Notary Service within an hour

106
00:03:10,026 --> 0:03:11,026
and it actually turns out that

107
00:03:11,026 --> 0:03:13,616
over the last year 99% of

108
00:03:13,616 --> 0:03:15,306
submissions have had an answer

109
00:03:15,306 --> 0:03:17,376
back within 15 minutes.

110
00:03:18,636 --> 0:03:20,486
Also, the status of the Notary

111
00:03:20,486 --> 0:03:22,046
Service is now on Apple's public

112
00:03:22,046 --> 0:03:22,816
status page.

113
00:03:23,326 --> 0:03:24,626
So you can easily check to see

114
00:03:24,626 --> 0:03:25,936
if there any service problems

115
00:03:26,246 --> 0:03:27,686
that would cause problems.

116
00:03:28,246 --> 0:03:31,456
Now what are the benefits to

117
00:03:31,456 --> 0:03:32,066
notarization?

118
00:03:32,866 --> 0:03:34,566
Well, there are many of them.

119
00:03:34,666 --> 0:03:35,786
So I'm just going to highlight a

120
00:03:35,786 --> 0:03:37,476
few of them today.

121
00:03:37,586 --> 0:03:39,236
First the Notary Service can

122
00:03:39,236 --> 0:03:40,636
help prevent you from

123
00:03:40,636 --> 0:03:41,566
inadvertently shipping a

124
00:03:41,566 --> 0:03:42,566
malicious dependency.

125
00:03:44,476 --> 0:03:47,366
Second, apps with a hardened

126
00:03:47,496 --> 0:03:49,476
runtime are more secure by

127
00:03:49,476 --> 0:03:50,986
default, and we'll talk a little

128
00:03:50,986 --> 0:03:51,726
more about that later.

129
00:03:52,256 --> 0:03:53,636
That can help prevent your app

130
00:03:53,636 --> 0:03:55,166
from being abused by attackers.

131
00:03:59,106 --> 0:04:00,906
Third, users are more likely to

132
00:03:59,106 --> 0:04:00,906
Third, users are more likely to

133
00:04:00,906 --> 0:04:02,456
download and try new software

134
00:04:02,786 --> 0:04:04,066
knowing that Apple has scanned

135
00:04:04,066 --> 0:04:05,526
it for known security issues.

136
00:04:06,076 --> 0:04:10,666
And finally, notarization also

137
00:04:10,666 --> 0:04:11,806
provides an audit trail of

138
00:04:11,806 --> 0:04:13,096
software notarized by your

139
00:04:13,096 --> 0:04:14,706
developer ID account that you

140
00:04:14,706 --> 0:04:15,896
can use to check the submission

141
00:04:15,896 --> 0:04:17,245
history and ensure that software

142
00:04:17,245 --> 0:04:18,026
hasn't been released that you

143
00:04:18,026 --> 0:04:20,315
didn't intend to release from

144
00:04:20,315 --> 0:04:20,886
your account.

145
00:04:21,625 --> 0:04:23,386
So that's a little bit of an

146
00:04:23,386 --> 0:04:24,556
overview of notarization.

147
00:04:24,926 --> 0:04:26,096
Now let's bring up Robert to

148
00:04:26,096 --> 0:04:27,116
talk about the application

149
00:04:27,116 --> 0:04:28,456
requirements to notarize your

150
00:04:28,456 --> 0:04:28,936
software.

151
00:04:29,966 --> 0:04:30,976
Robert.

152
00:04:32,516 --> 0:04:36,500
[ Applause ]

153
00:04:38,326 --> 0:04:40,016
&gt;&gt; So to start I want to say

154
00:04:40,016 --> 0:04:41,846
that for any of the software

155
00:04:41,846 --> 0:04:43,536
that you previously distributed

156
00:04:43,666 --> 0:04:44,716
it doesn't have to meet any new

157
00:04:44,716 --> 0:04:45,246
requirements.

158
00:04:45,246 --> 0:04:47,876
You can submit your existing

159
00:04:47,926 --> 0:04:48,896
distributed software for

160
00:04:48,896 --> 0:04:50,766
notarization as is without

161
00:04:50,766 --> 0:04:53,256
change, but for new software you

162
00:04:53,256 --> 0:04:54,646
need to make sure that it meets

163
00:04:54,646 --> 0:04:56,186
a few security requirements.

164
00:04:56,246 --> 0:04:57,736
In particular, it has to be

165
00:04:57,736 --> 0:04:59,286
completely and correctly signed

166
00:04:59,696 --> 0:05:00,616
and it needs to adopt the

167
00:04:59,696 --> 0:05:00,616
and it needs to adopt the

168
00:05:00,616 --> 0:05:02,486
hardened runtime.

169
00:05:02,486 --> 0:05:03,686
And by new software I mean

170
00:05:03,686 --> 0:05:05,816
software signed on or after June

171
00:05:05,856 --> 0:05:07,696
1st of 2019.

172
00:05:08,806 --> 0:05:10,436
So we're going to go into detail

173
00:05:10,436 --> 0:05:11,916
on what we mean by both of those

174
00:05:11,916 --> 0:05:13,336
things, but the correct signing

175
00:05:13,336 --> 0:05:15,276
and the hardened runtime.

176
00:05:15,606 --> 0:05:19,716
So first when you, to completely

177
00:05:19,716 --> 0:05:20,836
sign everything you need to sign

178
00:05:20,836 --> 0:05:21,236
everything.

179
00:05:21,236 --> 0:05:22,556
That means bundles, Macho-Os,

180
00:05:22,586 --> 0:05:24,496
installer packages wherever they

181
00:05:24,496 --> 0:05:26,546
are or whether you have Mach-Os

182
00:05:26,546 --> 0:05:28,086
in your installer packages,

183
00:05:28,086 --> 0:05:29,576
installer packages in your

184
00:05:30,036 --> 0:05:31,456
bundles, anywhere that they're

185
00:05:31,456 --> 0:05:33,306
found in any place within your

186
00:05:33,306 --> 0:05:34,876
product they need to be signed,

187
00:05:34,906 --> 0:05:36,516
they need to be signed

188
00:05:36,516 --> 0:05:36,856
correctly.

189
00:05:38,166 --> 0:05:39,936
So to sign correctly that means

190
00:05:40,026 --> 0:05:42,756
you have to sign bundles,

191
00:05:42,756 --> 0:05:45,346
Macho-Os and code, and I'll talk

192
00:05:45,346 --> 0:05:46,456
more about code in a second,

193
00:05:46,456 --> 0:05:49,646
with your developer ID

194
00:05:49,646 --> 0:05:51,206
application certificate and be

195
00:05:51,206 --> 0:05:52,286
sure to include a secure

196
00:05:52,286 --> 0:05:52,876
timestamp.

197
00:05:54,176 --> 0:05:56,056
For executables they need to opt

198
00:05:56,056 --> 0:05:57,526
into the hardened runtime.

199
00:05:57,526 --> 0:05:58,836
You don't need to opt into the

200
00:05:58,836 --> 0:06:00,196
hardened runtime for dylibs or

201
00:05:58,836 --> 0:06:00,196
hardened runtime for dylibs or

202
00:06:00,196 --> 0:06:01,556
frameworks or bundles just for

203
00:06:01,556 --> 0:06:02,196
executables.

204
00:06:03,546 --> 0:06:05,386
For installer packages you need

205
00:06:05,386 --> 0:06:07,516
to sign them with your Developer

206
00:06:07,516 --> 0:06:09,316
ID Installer Certificate and

207
00:06:09,316 --> 0:06:10,726
this is different from your

208
00:06:10,726 --> 0:06:11,856
Developer ID Application

209
00:06:11,856 --> 0:06:12,906
Certificate so be careful.

210
00:06:14,236 --> 0:06:16,036
Also, if you choose to sign your

211
00:06:16,036 --> 0:06:17,926
disk images to avoid gatekeeper

212
00:06:17,926 --> 0:06:20,306
path randomization, those must

213
00:06:20,306 --> 0:06:21,686
be signed with your Developer ID

214
00:06:21,686 --> 0:06:23,086
Application Certificate and

215
00:06:23,086 --> 0:06:24,346
include a secure timestamp.

216
00:06:24,886 --> 0:06:27,926
So if you're using Xcode for

217
00:06:27,926 --> 0:06:29,266
building your package, your

218
00:06:29,266 --> 0:06:29,986
software, this is easy.

219
00:06:29,986 --> 0:06:32,796
If you turn on automatic code

220
00:06:32,796 --> 0:06:34,396
signing, Xcode does all of this

221
00:06:34,396 --> 0:06:36,436
for you, but you have to be

222
00:06:36,436 --> 0:06:37,016
careful.

223
00:06:37,016 --> 0:06:39,586
If you use script build phases

224
00:06:39,586 --> 0:06:41,666
or copy build phases, those

225
00:06:41,776 --> 0:06:43,486
might be introducing new code

226
00:06:43,486 --> 0:06:46,656
into your software that Xcode

227
00:06:46,656 --> 0:06:48,026
doesn't know about and then you

228
00:06:48,026 --> 0:06:49,206
have to make sure that those get

229
00:06:49,496 --> 0:06:50,596
correctly signed.

230
00:06:51,206 --> 0:06:55,176
So I mentioned code files.

231
00:06:55,576 --> 0:06:57,936
So when we introduced code

232
00:06:57,936 --> 0:06:59,856
signing a number of years ago,

233
00:06:59,856 --> 0:07:01,476
we documented in the technote

234
00:06:59,856 --> 0:07:01,476
we documented in the technote

235
00:07:01,476 --> 0:07:02,946
that these things called code

236
00:07:02,946 --> 0:07:03,396
places.

237
00:07:03,706 --> 0:07:05,336
So any files found in any of

238
00:07:05,336 --> 0:07:06,706
these places within their bundle

239
00:07:06,706 --> 0:07:08,126
are considered code by the code

240
00:07:08,126 --> 0:07:09,576
signing infrastructure and that

241
00:07:09,576 --> 0:07:10,646
means they need to have an

242
00:07:10,646 --> 0:07:11,726
attached signature.

243
00:07:12,246 --> 0:07:15,726
Mach-Os are the best for this.

244
00:07:15,726 --> 0:07:16,966
You can embed the signature

245
00:07:16,966 --> 0:07:18,726
inside of any Mach-Os that you

246
00:07:18,726 --> 0:07:19,906
put in these places as well as

247
00:07:19,906 --> 0:07:21,536
for bundles, but if you put

248
00:07:21,536 --> 0:07:23,416
other types of files such as

249
00:07:23,666 --> 0:07:27,536
JPEGs or raw binary files, those

250
00:07:27,536 --> 0:07:30,116
have to be signed as well, but

251
00:07:30,116 --> 0:07:31,486
they don't get attached

252
00:07:31,486 --> 0:07:32,826
signature instead the signature

253
00:07:32,826 --> 0:07:34,806
ends up as an extended

254
00:07:34,806 --> 0:07:35,386
attribute.

255
00:07:35,826 --> 0:07:36,706
And that means that you have to

256
00:07:36,706 --> 0:07:37,886
be careful when you're packaging

257
00:07:37,886 --> 0:07:39,056
up your code to make sure that

258
00:07:39,056 --> 0:07:40,756
that extended attribute stays

259
00:07:40,756 --> 0:07:41,326
within those.

260
00:07:41,786 --> 0:07:43,316
To avoid having to be too

261
00:07:43,316 --> 0:07:44,686
careful with that we recommend

262
00:07:44,686 --> 0:07:46,236
that you put anything that isn't

263
00:07:46,236 --> 0:07:47,786
a Macho-O or a bundle containing

264
00:07:47,786 --> 0:07:49,406
a Macho-O in a place other than

265
00:07:49,406 --> 0:07:50,986
any of these places when you're

266
00:07:50,986 --> 0:07:51,946
structuring your app.

267
00:07:52,646 --> 0:07:55,676
So to get singing right when

268
00:07:55,676 --> 0:07:56,976
you're doing it outside of

269
00:07:56,976 --> 0:07:58,976
Xcode, we recommend what we call

270
00:07:58,976 --> 0:08:00,206
inside-out code signing.

271
00:07:58,976 --> 0:08:00,206
inside-out code signing.

272
00:08:00,486 --> 0:08:02,016
That means you sign the most

273
00:08:02,016 --> 0:08:05,096
deeply nested bundle or piece of

274
00:08:05,096 --> 0:08:07,826
code within your app first.

275
00:08:08,366 --> 0:08:10,216
In this case, it would be the

276
00:08:10,216 --> 0:08:11,876
updater.app inside of the

277
00:08:11,876 --> 0:08:13,596
Sparkle framework inside of the

278
00:08:13,596 --> 0:08:17,116
Watching Grass Grow app and then

279
00:08:17,116 --> 0:08:18,656
you move up a level and sign

280
00:08:18,656 --> 0:08:20,686
each of the things individually.

281
00:08:20,926 --> 0:08:21,966
Note that when you sign the

282
00:08:21,966 --> 0:08:24,046
Sparkle framework by itself or

283
00:08:24,046 --> 0:08:25,456
the Sparkle framework that grabs

284
00:08:25,456 --> 0:08:27,356
the Sparkle main executable as

285
00:08:27,356 --> 0:08:28,696
well as signing the updater.app

286
00:08:28,696 --> 0:08:29,086
together.

287
00:08:29,086 --> 0:08:31,696
And note you need to go

288
00:08:31,856 --> 0:08:32,966
individually to watch Grass

289
00:08:32,966 --> 0:08:35,846
Grow, savergrowgrass.dylib and

290
00:08:35,846 --> 0:08:36,976
Watching Grass Grow Helper.

291
00:08:38,015 --> 0:08:39,515
And finally, after you've signed

292
00:08:39,515 --> 0:08:40,756
all of those you sign everything

293
00:08:40,756 --> 0:08:42,446
together at the top bundle and

294
00:08:42,446 --> 0:08:44,285
again this will sign the main

295
00:08:44,285 --> 0:08:45,846
executable your bundle as

296
00:08:45,846 --> 0:08:47,786
indicated by your Info.plist.

297
00:08:48,996 --> 0:08:51,326
Some of you use the -- Deep Flag

298
00:08:51,326 --> 0:08:52,626
in your custom workflows, but

299
00:08:52,626 --> 0:08:54,406
you need to be careful.

300
00:08:54,586 --> 0:08:56,626
The -- Deep Flag only looks for

301
00:08:56,626 --> 0:08:58,716
code in code places and in this

302
00:08:58,716 --> 0:09:02,226
case the Grow Grass dylib the

303
00:08:58,716 --> 0:09:02,226
case the Grow Grass dylib the

304
00:09:02,226 --> 0:09:04,076
Watching Grass Grow Saver and

305
00:09:04,076 --> 0:09:06,356
the updater.app wouldn't be

306
00:09:06,356 --> 0:09:07,326
found as code.

307
00:09:07,326 --> 0:09:08,176
They would be signed in as

308
00:09:08,176 --> 0:09:09,876
resources, but they wouldn't be

309
00:09:09,876 --> 0:09:10,986
signed as code and, therefore,

310
00:09:10,986 --> 0:09:12,566
they would be rejected by the

311
00:09:12,566 --> 0:09:13,846
notarization unless you took the

312
00:09:13,846 --> 0:09:15,266
extra steps to do the inside out

313
00:09:15,266 --> 0:09:15,576
signing.

314
00:09:16,756 --> 0:09:19,856
And see Technote 2206 for more

315
00:09:19,856 --> 0:09:20,976
information on inside out

316
00:09:20,976 --> 0:09:24,036
signing and code places after

317
00:09:24,186 --> 0:09:24,686
the talk.

318
00:09:26,226 --> 0:09:27,796
So once you've completely and

319
00:09:27,796 --> 0:09:29,296
correctly signed your bundle,

320
00:09:29,296 --> 0:09:30,996
your software, you have to make

321
00:09:30,996 --> 0:09:32,046
sure that you don't invalidate

322
00:09:32,046 --> 0:09:32,676
your signature.

323
00:09:32,886 --> 0:09:33,786
That means you should never be

324
00:09:33,786 --> 0:09:35,396
changing files in your bundle

325
00:09:35,396 --> 0:09:36,856
except during installation or

326
00:09:36,856 --> 0:09:38,856
update and when you update make

327
00:09:38,856 --> 0:09:40,586
sure what is the result of that

328
00:09:40,586 --> 0:09:42,526
update is correctly signed and

329
00:09:42,606 --> 0:09:44,556
notarized on your customer

330
00:09:44,556 --> 0:09:44,916
system.

331
00:09:44,916 --> 0:09:48,356
So now we're going to dig deeper

332
00:09:48,356 --> 0:09:49,306
into the hardened runtime.

333
00:09:49,306 --> 0:09:50,476
We introduced the hardened

334
00:09:50,476 --> 0:09:53,696
runtime last year at WWDC and

335
00:09:53,696 --> 0:09:55,166
now we're going to give a bit

336
00:09:55,166 --> 0:09:57,076
more detail to discuss its

337
00:09:57,126 --> 0:09:59,316
benefits and configuration.

338
00:09:59,776 --> 0:10:03,346
So the hardened runtime extends

339
00:09:59,776 --> 0:10:03,346
So the hardened runtime extends

340
00:10:03,346 --> 0:10:04,676
many of the system integrity

341
00:10:04,676 --> 0:10:06,526
protections that we have on

342
00:10:06,526 --> 0:10:08,286
macOS to your app.

343
00:10:08,696 --> 0:10:10,376
This means Runtime Code Signing

344
00:10:10,376 --> 0:10:12,296
Enforcement, library validation,

345
00:10:12,646 --> 0:10:13,906
DYLD environment variable

346
00:10:13,906 --> 0:10:15,226
protection and debugging

347
00:10:15,226 --> 0:10:15,716
protection.

348
00:10:16,146 --> 0:10:17,126
Note that all of these

349
00:10:17,206 --> 0:10:19,056
protections are owned by default

350
00:10:19,056 --> 0:10:21,266
and not configurable on iOS but

351
00:10:21,266 --> 0:10:22,896
on a macOS that are configurable

352
00:10:22,896 --> 0:10:24,216
via entitlements that any

353
00:10:24,216 --> 0:10:25,656
developer can set.

354
00:10:26,106 --> 0:10:29,306
So if you're using Xcode,

355
00:10:29,306 --> 0:10:30,896
adopting the hardened runtime is

356
00:10:30,926 --> 0:10:31,276
easy.

357
00:10:31,466 --> 0:10:32,376
Just go to the signing and

358
00:10:32,376 --> 0:10:34,096
capabilities tab and make sure

359
00:10:34,096 --> 0:10:36,356
that the runtime capability is

360
00:10:36,386 --> 0:10:38,026
present on your target.

361
00:10:40,226 --> 0:10:41,886
Then you can select which

362
00:10:41,886 --> 0:10:42,866
entitlements you need to

363
00:10:42,866 --> 0:10:44,566
configure the hardened runtime

364
00:10:44,566 --> 0:10:46,226
on your project using the

365
00:10:46,226 --> 0:10:47,146
checkboxes provided.

366
00:10:47,856 --> 0:10:51,166
If you're using a custom

367
00:10:51,166 --> 0:10:52,836
workflow outside Xcode, you can

368
00:10:52,836 --> 0:10:54,126
use the codesign command to

369
00:10:54,126 --> 0:10:55,576
adopt the hardened runtime and

370
00:10:55,576 --> 0:10:57,426
to do that use the option

371
00:10:57,426 --> 0:11:00,416
runtime command to codesign and

372
00:10:57,426 --> 0:11:00,416
runtime command to codesign and

373
00:11:00,416 --> 0:11:02,176
make sure you use the timestamp

374
00:11:02,176 --> 0:11:03,906
option as well to ensure that

375
00:11:03,906 --> 0:11:06,126
there is a secure timestamp on

376
00:11:06,126 --> 0:11:06,876
your application.

377
00:11:07,466 --> 0:11:11,076
To verify that you have adopted

378
00:11:11,076 --> 0:11:12,316
the hardened runtime correctly

379
00:11:12,616 --> 0:11:14,136
use the display option to

380
00:11:14,136 --> 0:11:15,526
codesign with the verbosity

381
00:11:15,526 --> 0:11:17,636
level of 2 and look for the

382
00:11:17,636 --> 0:11:19,366
runtime word in the flag

383
00:11:19,366 --> 0:11:19,836
section.

384
00:11:20,466 --> 0:11:21,566
Also note that the hardened

385
00:11:21,596 --> 0:11:22,346
runtime is versioned.

386
00:11:22,796 --> 0:11:24,076
When you sign with the hardened

387
00:11:24,076 --> 0:11:26,046
runtime, we record what version

388
00:11:26,136 --> 0:11:27,706
you were signing with so that

389
00:11:27,706 --> 0:11:29,496
when, if we were to add

390
00:11:29,496 --> 0:11:30,476
additional protections to

391
00:11:30,476 --> 0:11:31,656
hardened runtime in the future,

392
00:11:31,866 --> 0:11:33,366
we'll ensure that only the ones

393
00:11:33,366 --> 0:11:34,456
that your app has been tested

394
00:11:34,456 --> 0:11:35,636
with get applied on future

395
00:11:35,636 --> 0:11:35,976
systems.

396
00:11:39,386 --> 0:11:41,036
So what is Runtime Code Signing

397
00:11:41,036 --> 0:11:41,556
Enforcement?

398
00:11:42,186 --> 0:11:43,546
It prevents creation of

399
00:11:43,546 --> 0:11:44,906
executable memory without an

400
00:11:44,906 --> 0:11:47,056
associated code signature within

401
00:11:47,056 --> 0:11:51,016
your process and it does this by

402
00:11:51,016 --> 0:11:52,556
ensuring first that all bytes

403
00:11:52,556 --> 0:11:54,196
mapped into your process match

404
00:11:54,196 --> 0:11:55,666
their associated code signature

405
00:11:55,666 --> 0:11:57,146
when they're read from disk and

406
00:11:57,146 --> 0:11:58,266
this includes not just

407
00:11:58,266 --> 0:11:59,256
executable regions of your

408
00:11:59,256 --> 0:12:00,976
Mach-O but also the

409
00:11:59,256 --> 0:12:00,976
Mach-O but also the

410
00:12:00,976 --> 0:12:02,436
non-executable mappings like

411
00:12:02,436 --> 0:12:03,476
your read-only sections.

412
00:12:05,476 --> 0:12:07,316
And we prevent execution for

413
00:12:07,316 --> 0:12:08,866
modified memory that doesn't

414
00:12:08,866 --> 0:12:09,786
match its signature.

415
00:12:10,456 --> 0:12:12,886
So by verifying that the memory

416
00:12:12,976 --> 0:12:14,496
is, the memory that we're

417
00:12:14,496 --> 0:12:15,866
reading from disk is correct as

418
00:12:15,866 --> 0:12:17,176
it's coming in and making sure

419
00:12:17,176 --> 0:12:18,186
that we can't change it we

420
00:12:18,186 --> 0:12:19,436
ensure the integrity of your

421
00:12:19,436 --> 0:12:20,386
process as it's running.

422
00:12:22,546 --> 0:12:24,116
Now one of the challenges that

423
00:12:24,116 --> 0:12:25,336
can come up with working with

424
00:12:25,336 --> 0:12:26,546
the Runtime Code Signing

425
00:12:26,546 --> 0:12:28,446
Enforcement is if your code uses

426
00:12:28,446 --> 0:12:31,066
JIT to make non-native code run

427
00:12:31,066 --> 0:12:31,896
fast within your app.

428
00:12:32,526 --> 0:12:33,986
To do this we recommend that you

429
00:12:33,986 --> 0:12:35,486
use the allow JIT entitlement

430
00:12:35,886 --> 0:12:37,946
and then use the MAP-JIT flat

431
00:12:37,946 --> 0:12:39,306
when allocating your

432
00:12:39,306 --> 0:12:40,926
Read/Write/Execute memory that

433
00:12:40,926 --> 0:12:42,976
you're compiling the code into.

434
00:12:43,276 --> 0:12:45,096
This allows us to keep the rest

435
00:12:45,096 --> 0:12:46,266
of the protections on all of

436
00:12:46,266 --> 0:12:47,586
your other memory within the

437
00:12:47,586 --> 0:12:49,486
system while giving you this

438
00:12:49,486 --> 0:12:51,506
scratch space memory to do what

439
00:12:51,506 --> 0:12:52,996
you need with respect to JIT.

440
00:12:54,026 --> 0:12:57,586
If you can't adopt the MAP-JIT

441
00:12:57,586 --> 0:12:58,686
flag because you don't have

442
00:12:58,776 --> 0:13:01,036
source code access to your JIT

443
00:12:58,776 --> 0:13:01,036
source code access to your JIT

444
00:13:01,036 --> 0:13:01,506
engine.

445
00:13:01,756 --> 0:13:02,256
You can use the

446
00:13:02,256 --> 0:13:03,836
allow-unsigned-executive-memory

447
00:13:03,836 --> 0:13:04,466
entitlement.

448
00:13:04,936 --> 0:13:06,906
This will lower the security

449
00:13:06,906 --> 0:13:09,126
predictions provided by Runtime

450
00:13:09,126 --> 0:13:11,796
Code Signing Enforcement to just

451
00:13:11,796 --> 0:13:13,396
verifying that for every piece

452
00:13:13,396 --> 0:13:14,556
of memory that does have a code

453
00:13:14,556 --> 0:13:16,686
signature associated all of the

454
00:13:16,686 --> 0:13:17,976
bytes that you read from disk

455
00:13:18,216 --> 0:13:20,586
are, in fact, match that, but it

456
00:13:20,586 --> 0:13:23,366
allows modification to any of

457
00:13:23,366 --> 0:13:25,256
your memory inside your process

458
00:13:25,426 --> 0:13:27,976
and allows the creation of

459
00:13:28,476 --> 0:13:29,886
unsigned executable regions.

460
00:13:32,606 --> 0:13:33,446
Another thing that we've seen

461
00:13:33,446 --> 0:13:34,636
some developers having

462
00:13:34,636 --> 0:13:36,746
challenges with is if they

463
00:13:36,746 --> 0:13:39,086
attempt to patch some system

464
00:13:39,086 --> 0:13:40,066
frameworks that they've loaded

465
00:13:40,066 --> 0:13:42,366
in after they have adopted the

466
00:13:42,366 --> 0:13:43,106
hardened runtime.

467
00:13:43,866 --> 0:13:45,656
We don't recommend that you do

468
00:13:45,656 --> 0:13:46,776
this and you should see whether

469
00:13:46,776 --> 0:13:47,666
any of the hardened runtime

470
00:13:47,736 --> 0:13:49,396
features actually make the,

471
00:13:49,686 --> 0:13:50,856
solve the reasons why you're

472
00:13:50,856 --> 0:13:51,846
doing this.

473
00:13:51,966 --> 0:13:53,336
But if you need to the

474
00:13:53,336 --> 0:13:54,916
allow-unsigned-executable-memory

475
00:13:54,916 --> 0:13:56,676
entitlement will do what you

476
00:13:56,676 --> 0:13:58,166
need to allow you to modify

477
00:13:58,166 --> 0:13:59,646
those memory pages that you've

478
00:13:59,646 --> 0:14:00,636
mapped in.

479
00:13:59,646 --> 0:14:00,636
mapped in.

480
00:14:01,606 --> 0:14:04,046
So another thing that we've seen

481
00:14:04,046 --> 0:14:05,616
come up with respect to Runtime

482
00:14:05,616 --> 0:14:07,986
Code Signing Enforcement is some

483
00:14:07,986 --> 0:14:09,796
people have seen crashes while

484
00:14:09,796 --> 0:14:11,486
they're updating their app.

485
00:14:11,916 --> 0:14:13,806
This is because code signatures

486
00:14:13,806 --> 0:14:16,066
are latched to files on first

487
00:14:16,066 --> 0:14:17,966
use in the kernel and that means

488
00:14:17,966 --> 0:14:20,206
if you modify a file that has

489
00:14:20,206 --> 0:14:23,006
been run and was signed, then it

490
00:14:23,006 --> 0:14:23,986
will no longer match the

491
00:14:23,986 --> 0:14:25,076
signature that's sitting in the

492
00:14:25,076 --> 0:14:26,506
kernel and you'll see a code

493
00:14:26,506 --> 0:14:27,816
signature violation.

494
00:14:28,626 --> 0:14:30,216
What we recommend instead is

495
00:14:30,216 --> 0:14:31,916
that instead of modifying

496
00:14:31,916 --> 0:14:33,146
existing files on disk you

497
00:14:33,146 --> 0:14:35,626
always create a new file with

498
00:14:35,656 --> 0:14:37,306
the updated changes and move the

499
00:14:37,306 --> 0:14:38,376
old file out of the way.

500
00:14:38,696 --> 0:14:40,326
This will ensure that the new

501
00:14:40,326 --> 0:14:42,056
file on its first use gets its

502
00:14:42,056 --> 0:14:44,366
code signature without causing

503
00:14:44,366 --> 0:14:45,476
the code signature violations

504
00:14:45,476 --> 0:14:45,976
that you're seeing.

505
00:14:48,746 --> 0:14:49,796
So next we'll talk about library

506
00:14:49,796 --> 0:14:50,226
validation.

507
00:14:52,746 --> 0:14:54,156
So library validation protects

508
00:14:54,156 --> 0:14:55,586
your app from code injection and

509
00:14:55,586 --> 0:14:57,746
dylib hijacking by making sure

510
00:14:57,746 --> 0:14:59,376
that your app only loads

511
00:14:59,376 --> 0:15:01,146
codesigned by your team or

512
00:14:59,376 --> 0:15:01,146
codesigned by your team or

513
00:15:01,146 --> 0:15:01,806
signed by Apple.

514
00:15:01,806 --> 0:15:03,626
And some of you might ask, why

515
00:15:03,626 --> 0:15:05,436
does it need to load codesigned

516
00:15:05,436 --> 0:15:05,896
by Apple?

517
00:15:06,036 --> 0:15:07,326
Well, remember that all the

518
00:15:07,326 --> 0:15:08,906
frameworks and libraries that

519
00:15:08,906 --> 0:15:09,676
you're loading from the

520
00:15:09,676 --> 0:15:10,806
operating system are Apple

521
00:15:10,806 --> 0:15:11,156
signed.

522
00:15:11,156 --> 0:15:12,486
So you have to be able to call

523
00:15:12,486 --> 0:15:14,616
those and load them into your

524
00:15:14,616 --> 0:15:15,076
process.

525
00:15:16,166 --> 0:15:17,956
Note that library validation

526
00:15:18,056 --> 0:15:19,746
prevents the loading of unsigned

527
00:15:19,746 --> 0:15:21,106
and adhoc signed code.

528
00:15:21,706 --> 0:15:23,086
So be careful during your

529
00:15:23,086 --> 0:15:23,946
development process.

530
00:15:23,946 --> 0:15:25,396
Make sure that you use Apple

531
00:15:25,396 --> 0:15:26,716
development certificates rather

532
00:15:26,716 --> 0:15:28,416
than turning off code signing or

533
00:15:28,646 --> 0:15:30,416
just using adhoc signing.

534
00:15:33,946 --> 0:15:35,926
So library validation can cause

535
00:15:35,926 --> 0:15:38,806
challenges for apps that have an

536
00:15:39,066 --> 0:15:40,256
in process plug-in or an

537
00:15:40,256 --> 0:15:40,856
ecosystem.

538
00:15:41,536 --> 0:15:42,606
We recommend that you consider

539
00:15:42,606 --> 0:15:44,546
moving to an out of process

540
00:15:44,546 --> 0:15:46,056
plug-in model so that you don't

541
00:15:46,306 --> 0:15:48,036
have to load unknown third-party

542
00:15:48,036 --> 0:15:50,746
code into your app but if you

543
00:15:50,746 --> 0:15:52,266
can't, you can use the

544
00:15:52,266 --> 0:15:53,466
disable-library-validation

545
00:15:53,466 --> 0:15:55,206
entitlement and this will allow

546
00:15:55,206 --> 0:15:56,896
loading of unsigned and adhoc

547
00:15:56,896 --> 0:15:57,746
sign plug-ins.

548
00:15:57,926 --> 0:15:59,336
And note you can take this by

549
00:15:59,336 --> 0:16:01,756
itself without taking any of the

550
00:15:59,336 --> 0:16:01,756
itself without taking any of the

551
00:16:01,996 --> 0:16:02,986
runtime code and sort

552
00:16:02,986 --> 0:16:04,796
enforcement related entitlements

553
00:16:05,036 --> 0:16:05,486
by having

554
00:16:05,486 --> 0:16:06,936
disable-library-validation on

555
00:16:07,176 --> 0:16:08,606
when the system sees that you're

556
00:16:08,606 --> 0:16:10,906
loading a adhoc signed or an

557
00:16:10,906 --> 0:16:12,446
unsigned plug-in, it will lower

558
00:16:12,446 --> 0:16:14,726
the security of your process to

559
00:16:14,726 --> 0:16:15,966
allow that because you've said

560
00:16:15,966 --> 0:16:17,686
you want to load unsigned

561
00:16:17,686 --> 0:16:18,666
plug-ins.

562
00:16:20,096 --> 0:16:22,536
So next is DYLD environment

563
00:16:22,536 --> 0:16:23,306
variable protection.

564
00:16:23,816 --> 0:16:26,256
DYLD environment variables can

565
00:16:26,256 --> 0:16:27,826
be very useful during your

566
00:16:27,826 --> 0:16:29,976
development process to load

567
00:16:29,976 --> 0:16:31,716
debug libraries into your app

568
00:16:31,806 --> 0:16:34,756
while you're testing or to use

569
00:16:34,756 --> 0:16:35,746
libraries that are, or

570
00:16:35,816 --> 0:16:36,856
frameworks that you're building

571
00:16:36,856 --> 0:16:38,176
that are in development but

572
00:16:38,176 --> 0:16:39,386
aren't quite ready to be built

573
00:16:39,386 --> 0:16:40,536
into your app just to test them,

574
00:16:40,956 --> 0:16:42,626
but they can be dangerous

575
00:16:42,676 --> 0:16:43,766
because everything that you can

576
00:16:43,766 --> 0:16:44,626
do during your building and

577
00:16:44,626 --> 0:16:46,316
testing process an attacker can

578
00:16:46,316 --> 0:16:48,996
do on a customer system to take

579
00:16:48,996 --> 0:16:51,176
advantage of privileges or data

580
00:16:51,176 --> 0:16:52,256
that's available to your app.

581
00:16:53,466 --> 0:16:54,656
So because of this the hardened

582
00:16:54,656 --> 0:16:56,276
runtime blocks these variables

583
00:16:56,276 --> 0:16:57,736
by default when you ship with

584
00:16:57,736 --> 0:16:57,826
it.

585
00:16:58,656 --> 0:17:00,026
If you need to use DYLD

586
00:16:58,656 --> 0:17:00,026
If you need to use DYLD

587
00:17:00,026 --> 0:17:01,916
environment variables during

588
00:17:01,916 --> 0:17:03,806
your debugging process, you can

589
00:17:03,806 --> 0:17:04,776
use the get-task-allow

590
00:17:04,776 --> 0:17:06,256
entitlement on your debug build

591
00:17:06,586 --> 0:17:07,866
and note that Xcode

592
00:17:07,866 --> 0:17:09,236
automatically puts this on for

593
00:17:09,236 --> 0:17:10,906
you when you build for debug and

594
00:17:10,906 --> 0:17:11,796
takes it off for you

595
00:17:11,796 --> 0:17:14,236
automatically when you build for

596
00:17:14,236 --> 0:17:14,656
release.

597
00:17:15,296 --> 0:17:16,945
Note though that if you're using

598
00:17:16,945 --> 0:17:18,906
a custom workflow, the notary

599
00:17:18,945 --> 0:17:20,336
service in most cases doesn't

600
00:17:20,425 --> 0:17:21,596
accept binaries with the

601
00:17:21,596 --> 0:17:22,776
get-task-allow entitlement.

602
00:17:22,776 --> 0:17:23,705
So make sure you take this

603
00:17:23,705 --> 0:17:25,806
entitlement off before you ship

604
00:17:25,965 --> 0:17:27,876
your release build to the Notary

605
00:17:27,876 --> 0:17:28,266
Service.

606
00:17:30,246 --> 0:17:33,626
So in a few cases, we have seen

607
00:17:33,626 --> 0:17:37,066
developers needed to use the

608
00:17:37,066 --> 0:17:39,326
DYLD environment variables when

609
00:17:39,326 --> 0:17:40,696
they ship their app to customers

610
00:17:41,406 --> 0:17:42,886
and, again, we don't recommend

611
00:17:42,886 --> 0:17:43,376
you do this.

612
00:17:43,376 --> 0:17:45,936
This can be very dangerous for

613
00:17:45,936 --> 0:17:47,136
taking advantage of your app on

614
00:17:47,136 --> 0:17:48,716
customer systems, but if you

615
00:17:48,716 --> 0:17:50,256
need to there is an entitlement

616
00:17:50,306 --> 0:17:50,556
to

617
00:17:50,556 --> 0:17:52,926
allow-DYLD-environment-variables

618
00:17:52,926 --> 0:17:54,076
which will allow these to be

619
00:17:54,076 --> 0:17:55,276
used and is accepted by the

620
00:17:55,276 --> 0:17:55,926
Notary Service.

621
00:17:56,386 --> 0:17:59,506
Next is debugging protection.

622
00:18:00,036 --> 0:18:03,916
So we all know that debuggers

623
00:18:03,916 --> 0:18:05,956
allow developers to inspect the

624
00:18:05,956 --> 0:18:07,596
state of registers and memory

625
00:18:07,916 --> 0:18:09,466
and modify process memory.

626
00:18:09,906 --> 0:18:11,606
That means they allow hackers to

627
00:18:12,476 --> 0:18:14,266
steal sensitive user data and

628
00:18:14,266 --> 0:18:15,306
inject malicious code.

629
00:18:16,006 --> 0:18:17,146
So by default the hardened

630
00:18:17,196 --> 0:18:19,096
runtime doesn't allow debugging

631
00:18:19,096 --> 0:18:21,746
of hardened processes, but if

632
00:18:21,746 --> 0:18:24,186
you need to use the debugger

633
00:18:24,186 --> 0:18:25,666
during your development flow,

634
00:18:25,666 --> 0:18:26,986
again, the get-task-allow

635
00:18:26,986 --> 0:18:28,646
entitlement is what you need.

636
00:18:28,646 --> 0:18:30,216
Along with DYLD environment

637
00:18:30,216 --> 0:18:31,376
variables the get-task-allow

638
00:18:31,376 --> 0:18:33,496
entitlements allows your app to

639
00:18:33,496 --> 0:18:34,036
be debugged.

640
00:18:35,226 --> 0:18:37,456
But be careful if you do all of

641
00:18:37,456 --> 0:18:38,856
your testing with the debugger

642
00:18:38,856 --> 0:18:39,426
attached.

643
00:18:39,426 --> 0:18:40,996
This will mask some of the other

644
00:18:41,086 --> 0:18:42,536
hardened runtime related issues

645
00:18:42,536 --> 0:18:43,556
that you could run into

646
00:18:43,556 --> 0:18:45,126
especially around Runtime Code

647
00:18:45,126 --> 0:18:45,866
Signing Enforcement.

648
00:18:46,066 --> 0:18:47,426
Basically, once the debugger

649
00:18:47,426 --> 0:18:49,936
attaches, we can't force code

650
00:18:49,936 --> 0:18:51,036
signing enforcement anymore

651
00:18:51,656 --> 0:18:53,266
because debuggers like setting a

652
00:18:53,266 --> 0:18:54,886
breakpoint automatically change

653
00:18:54,886 --> 0:18:57,086
your data within your process

654
00:18:57,086 --> 0:18:58,256
and they would just crash

655
00:18:58,256 --> 0:18:59,616
immediately if we continue to

656
00:18:59,616 --> 0:19:00,146
enforce that.

657
00:18:59,616 --> 0:19:00,146
enforce that.

658
00:19:00,606 --> 0:19:01,956
So make sure you test a release

659
00:19:01,956 --> 0:19:03,376
build to see what other effects

660
00:19:03,666 --> 0:19:04,626
the Runtime Code Signing

661
00:19:04,626 --> 0:19:07,216
Enforcement might have and then

662
00:19:07,216 --> 0:19:08,806
if you need to make a debug

663
00:19:08,806 --> 0:19:10,676
build without get-test-allow

664
00:19:10,676 --> 0:19:12,176
through Xcode, you can use the

665
00:19:12,176 --> 0:19:13,716
CODE-SIGN-IN-INJECT-BASE-

666
00:19:13,716 --> 0:19:15,476
ENTITLEMENTS=NO option in your

667
00:19:15,476 --> 0:19:17,186
Xcode project to get all of your

668
00:19:17,186 --> 0:19:18,336
debug settings except

669
00:19:18,336 --> 0:19:18,856
get-task-allow.

670
00:19:21,216 --> 0:19:23,526
So this can be a challenge also

671
00:19:23,526 --> 0:19:26,006
in the plug-in ecosystem because

672
00:19:26,456 --> 0:19:27,926
plug-in developers need to debug

673
00:19:27,926 --> 0:19:29,696
their plug-ins within the app

674
00:19:29,806 --> 0:19:30,716
that they're going to load.

675
00:19:31,436 --> 0:19:32,426
So, again, we recommend

676
00:19:32,586 --> 0:19:34,046
considering out of process

677
00:19:34,046 --> 0:19:36,576
plug-in model or consider

678
00:19:36,576 --> 0:19:38,656
shipping a debug version to,

679
00:19:39,186 --> 0:19:40,486
yeah, debug version of your app

680
00:19:40,486 --> 0:19:41,886
to register plug-in developers

681
00:19:42,096 --> 0:19:44,126
so that they have the power to

682
00:19:44,126 --> 0:19:45,416
debug, but you don't ship that

683
00:19:45,416 --> 0:19:48,166
to all of your customers, but if

684
00:19:48,166 --> 0:19:50,776
absolutely necessary, the Notary

685
00:19:50,776 --> 0:19:51,826
Service will accept the

686
00:19:51,826 --> 0:19:53,446
combination of get-task-allow

687
00:19:53,446 --> 0:19:54,626
entitlement and the

688
00:19:54,626 --> 0:19:55,976
disable-library-validation

689
00:19:55,976 --> 0:19:57,186
entitlement to allow this

690
00:19:57,186 --> 0:19:57,616
workflow.

691
00:20:00,816 --> 0:20:02,396
So we'll talk briefly about

692
00:20:02,396 --> 0:20:03,706
protected resource access.

693
00:20:05,036 --> 0:20:07,286
So we all know that your

694
00:20:07,286 --> 0:20:08,406
customers use their Macs to

695
00:20:08,406 --> 0:20:10,946
store tons of information about

696
00:20:10,946 --> 0:20:13,526
their lives and the Macs have

697
00:20:13,526 --> 0:20:15,526
access to sensors that are

698
00:20:15,526 --> 0:20:16,846
security sensitive.

699
00:20:17,746 --> 0:20:19,136
In order to or once you've

700
00:20:19,166 --> 0:20:20,376
adopted the hardened runtime,

701
00:20:20,696 --> 0:20:21,936
your app needs to declare its

702
00:20:21,936 --> 0:20:23,626
intent to access any of these

703
00:20:23,626 --> 0:20:24,626
protected resources.

704
00:20:25,696 --> 0:20:27,696
So we mentioned all of last

705
00:20:27,696 --> 0:20:30,516
year, but if you need to access

706
00:20:30,516 --> 0:20:32,616
any of these resources you need

707
00:20:32,616 --> 0:20:34,416
to take the entitlement on your

708
00:20:34,416 --> 0:20:37,716
main bundle and then declare the

709
00:20:37,716 --> 0:20:39,786
usage string that is associated

710
00:20:39,786 --> 0:20:41,016
with the entitlement so that

711
00:20:41,016 --> 0:20:43,016
when your app attempts to access

712
00:20:43,016 --> 0:20:44,786
one of these resources, the

713
00:20:44,786 --> 0:20:46,086
system can provide a dialogue

714
00:20:46,086 --> 0:20:47,586
saying, oh, this is why I need

715
00:20:47,636 --> 0:20:49,396
to have access to this resource

716
00:20:49,396 --> 0:20:50,586
so that you can collect the

717
00:20:50,586 --> 0:20:51,396
user's consent.

718
00:20:52,656 --> 0:20:54,826
So some recommendations a

719
00:20:54,826 --> 0:20:55,836
summary of this section.

720
00:20:55,956 --> 0:20:57,566
Take only the entitlements you

721
00:20:57,566 --> 0:20:57,856
need.

722
00:20:57,986 --> 0:20:59,786
The entitlements turn off

723
00:20:59,786 --> 0:21:00,996
security provided by the

724
00:20:59,786 --> 0:21:00,996
security provided by the

725
00:21:00,996 --> 0:21:02,566
hardened runtime and they can be

726
00:21:02,566 --> 0:21:04,176
inspected by anyone looking at

727
00:21:04,176 --> 0:21:05,936
your app to try to see what

728
00:21:06,256 --> 0:21:07,476
kinds of things they can do with

729
00:21:07,476 --> 0:21:09,006
it once it's shipped to

730
00:21:09,006 --> 0:21:09,526
customers.

731
00:21:09,746 --> 0:21:11,106
So be careful, take only what

732
00:21:11,106 --> 0:21:12,596
you need, put the entitlements

733
00:21:12,596 --> 0:21:14,186
only on the processes that need

734
00:21:14,186 --> 0:21:14,416
them.

735
00:21:14,416 --> 0:21:17,066
If you have multiple processes,

736
00:21:17,066 --> 0:21:18,526
multiple executables within your

737
00:21:18,526 --> 0:21:20,276
app, it's unlikely that all of

738
00:21:20,276 --> 0:21:21,536
them need the same protections.

739
00:21:21,536 --> 0:21:22,656
You probably aren't doing JIT in

740
00:21:22,656 --> 0:21:23,446
every process.

741
00:21:23,446 --> 0:21:24,276
You probably aren't loading

742
00:21:24,276 --> 0:21:25,536
plug-ins into every process.

743
00:21:25,806 --> 0:21:27,306
So take only the ones you need

744
00:21:27,306 --> 0:21:28,806
in the processes that need them

745
00:21:29,726 --> 0:21:31,306
and when you're declaring

746
00:21:31,306 --> 0:21:32,866
resource access make sure that

747
00:21:32,866 --> 0:21:34,266
those entitlements are only on

748
00:21:34,266 --> 0:21:35,696
the main bundle of your app.

749
00:21:36,046 --> 0:21:38,686
Those getting inherited by any

750
00:21:38,686 --> 0:21:41,206
other executables within your

751
00:21:41,206 --> 0:21:42,516
bundles, they don't need to be

752
00:21:42,596 --> 0:21:43,346
all around.

753
00:21:43,416 --> 0:21:44,276
Just on the main bundle.

754
00:21:44,716 --> 0:21:46,496
Now I'm going to hand it back to

755
00:21:46,496 --> 0:21:48,686
Garrett to go over what you need

756
00:21:48,686 --> 0:21:50,426
to do to actually submit for

757
00:21:50,426 --> 0:21:50,976
notarization.

758
00:21:51,516 --> 0:21:57,206
[ Applause ]

759
00:21:57,706 --> 0:21:58,196
&gt;&gt; Thanks, Robert.

760
00:21:59,036 --> 0:22:00,066
So now you know everything to

761
00:21:59,036 --> 0:22:00,066
So now you know everything to

762
00:22:00,066 --> 0:22:00,886
think about while you're

763
00:22:00,886 --> 0:22:02,046
building and designing your

764
00:22:02,046 --> 0:22:03,486
application to get it ready to

765
00:22:03,486 --> 0:22:05,516
be notarized, but how do you

766
00:22:05,516 --> 0:22:06,856
actually submit it to the Notary

767
00:22:06,856 --> 0:22:07,376
Service?

768
00:22:08,356 --> 0:22:11,276
Well, let's talk a little about

769
00:22:11,276 --> 0:22:12,846
the notarization workflow and

770
00:22:12,846 --> 0:22:13,926
regardless of whether you're

771
00:22:13,926 --> 0:22:15,166
using Xcode or have a

772
00:22:15,166 --> 0:22:17,276
custom-built workflow, the rough

773
00:22:17,406 --> 0:22:18,786
workflow is about the same.

774
00:22:19,866 --> 0:22:20,776
You submit the app for

775
00:22:20,776 --> 0:22:22,886
notarization, you check the

776
00:22:23,116 --> 0:22:25,036
status of the Notary Service.

777
00:22:25,336 --> 0:22:26,836
Once notarization is complete,

778
00:22:27,256 --> 0:22:28,936
you can staple a ticket and then

779
00:22:28,936 --> 0:22:29,846
when you're done you might want

780
00:22:29,846 --> 0:22:31,276
to verify that the stapling and

781
00:22:31,276 --> 0:22:32,606
notarization were successful.

782
00:22:32,606 --> 0:22:35,516
Before we talk a little bit more

783
00:22:35,516 --> 0:22:36,946
about this we should talk about

784
00:22:37,176 --> 0:22:39,636
what and when to submit and at a

785
00:22:39,636 --> 0:22:40,926
minimum you should be submitting

786
00:22:40,926 --> 0:22:41,776
all the software that you

787
00:22:41,776 --> 0:22:45,286
distribute, but really it's okay

788
00:22:45,286 --> 0:22:46,616
to upload more regularly so

789
00:22:46,616 --> 0:22:47,806
anything that runs outside of a

790
00:22:47,806 --> 0:22:49,586
developer's machine feel free to

791
00:22:49,586 --> 0:22:50,676
upload as a Notary Service.

792
00:22:51,076 --> 0:22:52,056
You probably don't need to

793
00:22:52,056 --> 0:22:54,126
upload every CI build though and

794
00:22:56,456 --> 0:22:58,266
anyone on the team can submit

795
00:22:58,266 --> 0:22:59,766
process submit software for

796
00:22:59,766 --> 0:23:00,386
notarization.

797
00:22:59,766 --> 0:23:00,386
notarization.

798
00:23:00,926 --> 0:23:02,546
This has changed from last year

799
00:23:02,876 --> 0:23:03,966
when it used to be restricted to

800
00:23:03,966 --> 0:23:04,706
certain roles.

801
00:23:07,076 --> 0:23:08,606
So now you're ready to submit to

802
00:23:08,606 --> 0:23:09,366
the Notary Service.

803
00:23:09,646 --> 0:23:11,596
Well, if you use Xcode, it's

804
00:23:11,596 --> 0:23:12,896
quite easy and it's built into

805
00:23:12,896 --> 0:23:13,966
the archive and distribution

806
00:23:13,966 --> 0:23:14,356
workflow.

807
00:23:14,946 --> 0:23:16,136
So once you build an archive,

808
00:23:16,176 --> 0:23:17,306
you can open up the Xcode

809
00:23:17,306 --> 0:23:18,486
organizer like you see here and

810
00:23:19,306 --> 0:23:20,506
you can select distribute app

811
00:23:20,566 --> 0:23:21,536
just like you did before with

812
00:23:21,536 --> 0:23:22,236
Developer ID.

813
00:23:23,566 --> 0:23:27,246
Select Developer ID and then use

814
00:23:27,246 --> 0:23:28,536
the upload option to submit a

815
00:23:28,536 --> 0:23:29,836
copy to the Notary Service.

816
00:23:30,346 --> 0:23:33,306
You'll see a progress bar during

817
00:23:33,306 --> 0:23:35,626
the upload and after everything

818
00:23:35,626 --> 0:23:37,126
is complete, you'll get dropped

819
00:23:37,126 --> 0:23:38,586
back into the organizer and

820
00:23:38,586 --> 0:23:39,956
you'll notice that the status

821
00:23:40,086 --> 0:23:41,566
has changed to processing.

822
00:23:42,186 --> 0:23:46,216
Once the Notary Service is

823
00:23:46,216 --> 0:23:48,386
complete, you're going to push

824
00:23:48,386 --> 0:23:51,056
notification to Xcode and when

825
00:23:51,056 --> 0:23:52,306
you come back to the organizer,

826
00:23:52,656 --> 0:23:53,706
you'll note that the status is

827
00:23:53,706 --> 0:23:55,856
changed to ready distribute and

828
00:23:55,856 --> 0:23:57,446
in the lower right corner, the

829
00:23:57,446 --> 0:23:59,426
export notarized app is now

830
00:23:59,426 --> 0:23:59,826
available.

831
00:24:01,276 --> 0:24:02,586
When you click export notarized

832
00:24:02,586 --> 0:24:04,216
app, Xcode will take care of

833
00:24:04,216 --> 0:24:06,496
stapling the app for you and

834
00:24:06,496 --> 0:24:07,796
what you get is completely ready

835
00:24:07,796 --> 0:24:08,496
for distribution.

836
00:24:09,926 --> 0:24:10,766
Now we'll talk a little more

837
00:24:10,766 --> 0:24:12,026
about how you can verify that

838
00:24:12,026 --> 0:24:13,696
yourself later because that's a

839
00:24:13,696 --> 0:24:15,086
shared workflow between custom

840
00:24:15,086 --> 0:24:16,476
workflows and Xcode.

841
00:24:17,766 --> 0:24:20,636
Now, if you don't use Xcode,

842
00:24:21,266 --> 0:24:23,496
submitting with custom workflows

843
00:24:23,556 --> 0:24:24,316
is equally easy.

844
00:24:24,956 --> 0:24:25,586
The first thing you need to

845
00:24:25,586 --> 0:24:27,176
think about is what you want to

846
00:24:27,176 --> 0:24:28,296
submit to the Notary Service.

847
00:24:29,266 --> 0:24:31,146
Now the Notary Service accepts 3

848
00:24:31,146 --> 0:24:33,466
main formats; disk images,

849
00:24:33,726 --> 0:24:35,656
installer packages and zip

850
00:24:35,656 --> 0:24:36,266
archives.

851
00:24:36,946 --> 0:24:38,466
So if your build output is

852
00:24:38,466 --> 0:24:39,996
anything but one of these 3,

853
00:24:40,526 --> 0:24:41,706
you'll need to convert it to one

854
00:24:41,706 --> 0:24:42,956
of these 3 formats before you

855
00:24:42,956 --> 0:24:44,136
send it to the Notary Service.

856
00:24:44,666 --> 0:24:47,676
And remember that when you're

857
00:24:47,676 --> 0:24:49,196
creating a zip archive it's

858
00:24:49,196 --> 0:24:51,026
important to include macOS

859
00:24:51,026 --> 0:24:52,896
specific metadata like extended

860
00:24:52,896 --> 0:24:53,536
attributes.

861
00:24:54,126 --> 0:24:55,136
If you don't know what tools to

862
00:24:55,136 --> 0:24:56,456
use, there is support in ditto

863
00:24:56,456 --> 0:24:57,636
and Archive Utility built into

864
00:24:57,636 --> 0:24:58,476
the operating system.

865
00:25:01,776 --> 0:25:03,726
Now one other thing to think

866
00:25:03,726 --> 0:25:05,496
about is if you actually have a

867
00:25:05,496 --> 0:25:07,266
custom installer and custom

868
00:25:07,266 --> 0:25:08,356
installers can be a little bit

869
00:25:08,356 --> 0:25:10,116
trickier if they pull down

870
00:25:10,116 --> 0:25:11,386
content from the Internet as

871
00:25:11,386 --> 0:25:13,556
part of their installation or if

872
00:25:13,556 --> 0:25:14,806
you use custom packaging

873
00:25:14,856 --> 0:25:15,436
formats.

874
00:25:16,366 --> 0:25:17,366
And if you have a custom

875
00:25:17,366 --> 0:25:18,956
installer that does one of these

876
00:25:18,956 --> 0:25:20,716
things, you may need to perform

877
00:25:20,806 --> 0:25:23,436
2-step notarization where you

878
00:25:23,436 --> 0:25:24,916
actually take all the content as

879
00:25:24,916 --> 0:25:26,376
it's going to arrive on disk,

880
00:25:26,716 --> 0:25:28,136
submit that for notarization

881
00:25:28,136 --> 0:25:29,286
using one of the 3 supported

882
00:25:29,286 --> 0:25:31,836
formats, staple it up and then

883
00:25:31,836 --> 0:25:33,166
you submit your custom installer

884
00:25:33,166 --> 0:25:33,736
app separately.

885
00:25:34,346 --> 0:25:37,206
So now that you know what you

886
00:25:37,206 --> 0:25:38,066
want to submit to the Notary

887
00:25:38,066 --> 0:25:40,026
Service, how do you actually do

888
00:25:40,386 --> 0:25:40,453
it?

889
00:25:40,516 --> 0:25:42,606
Well, Xcode 10 and newer

890
00:25:43,106 --> 0:25:44,336
contains a command line tool

891
00:25:44,336 --> 0:25:45,646
called altool that's generally

892
00:25:45,646 --> 0:25:46,566
used for interacting with the

893
00:25:46,566 --> 0:25:47,336
Notary Service.

894
00:25:47,906 --> 0:25:49,066
If you do have multiple versions

895
00:25:49,066 --> 0:25:50,026
of Xcode, you'll want to use

896
00:25:50,026 --> 0:25:51,186
Xcode select to make sure that

897
00:25:51,186 --> 0:25:52,506
you've selected Xcode 10 or

898
00:25:52,506 --> 0:25:54,546
later and then you can use

899
00:25:54,726 --> 0:25:56,666
altool with the notarize-app

900
00:25:57,106 --> 0:25:57,506
command.

901
00:25:58,496 --> 0:25:59,806
With that you'll need to pass in

902
00:25:59,806 --> 0:26:02,146
the primary bundle ID along with

903
00:25:59,806 --> 0:26:02,146
the primary bundle ID along with

904
00:26:02,496 --> 0:26:03,656
the file that you want upload.

905
00:26:04,726 --> 0:26:05,916
You will need to authenticate

906
00:26:05,916 --> 0:26:08,056
with your Apple ID, but if you

907
00:26:08,056 --> 0:26:09,096
look at the main page you'll see

908
00:26:09,096 --> 0:26:10,046
the options for using the

909
00:26:10,046 --> 0:26:11,256
keychain or environment

910
00:26:11,256 --> 0:26:12,476
variables so you don't need to

911
00:26:12,476 --> 0:26:13,446
always type in your password.

912
00:26:14,006 --> 0:26:16,736
When notarization upload is

913
00:26:16,736 --> 0:26:18,236
complete, you'll get a

914
00:26:18,236 --> 0:26:19,186
RequestUUID.

915
00:26:20,066 --> 0:26:21,906
This is a UUID that represents

916
00:26:22,096 --> 0:26:24,206
your submission, which you can

917
00:26:24,206 --> 0:26:26,526
turn around and use with the

918
00:26:26,526 --> 0:26:28,636
notarization-info command also

919
00:26:28,636 --> 0:26:30,576
as part of altool to check on

920
00:26:30,576 --> 0:26:32,886
the status of processing and

921
00:26:32,886 --> 0:26:34,006
this is how you can find out

922
00:26:34,286 --> 0:26:35,686
when your notarization is

923
00:26:35,686 --> 0:26:38,346
complete and what the status

924
00:26:38,346 --> 0:26:38,646
was.

925
00:26:39,766 --> 0:26:40,656
Here's an example of a

926
00:26:40,656 --> 0:26:43,566
successful notarization and one

927
00:26:43,566 --> 0:26:44,916
important thing in here is the

928
00:26:44,916 --> 0:26:46,026
log file URL.

929
00:26:46,676 --> 0:26:47,446
Regardless of whether

930
00:26:47,446 --> 0:26:49,166
notarization was successful or

931
00:26:49,166 --> 0:26:51,116
had issues you can take a look

932
00:26:51,116 --> 0:26:52,556
inside of the log file URL to

933
00:26:52,556 --> 0:26:53,416
learn a little bit more.

934
00:26:53,416 --> 0:26:56,676
Now the log file URLs are not

935
00:26:56,676 --> 0:26:57,376
long-lived.

936
00:26:58,286 --> 0:26:59,656
They only work for about a day.

937
00:27:00,266 --> 0:27:01,446
So really you probably want to

938
00:27:01,446 --> 0:27:02,636
pass around a new UID and

939
00:27:03,076 --> 0:27:04,456
whatever you call notarization

940
00:27:04,456 --> 0:27:06,286
info you'll get a new log file

941
00:27:06,286 --> 0:27:06,526
URL.

942
00:27:09,786 --> 0:27:11,646
Here's an example JSON log from

943
00:27:11,646 --> 0:27:12,806
a successful processing.

944
00:27:13,726 --> 0:27:15,386
Notice that the status was

945
00:27:15,386 --> 0:27:15,896
accepted.

946
00:27:16,906 --> 0:27:18,906
Now if this had failed, the

947
00:27:18,906 --> 0:27:19,796
thing that you really want to

948
00:27:19,796 --> 0:27:21,596
look at here is the issues

949
00:27:21,656 --> 0:27:21,856
array.

950
00:27:22,786 --> 0:27:23,686
And in a successful

951
00:27:23,686 --> 0:27:24,486
notarization, this will

952
00:27:24,486 --> 0:27:25,286
generally be empty.

953
00:27:26,186 --> 0:27:27,906
But if something failed, there

954
00:27:27,906 --> 0:27:29,566
will be object in here and each

955
00:27:29,566 --> 0:27:31,116
one represents some failure

956
00:27:31,316 --> 0:27:32,166
during notarization.

957
00:27:32,166 --> 0:27:33,976
It will indicate things like

958
00:27:34,176 --> 0:27:35,236
which binary may not have

959
00:27:35,236 --> 0:27:37,586
adopted the hardened runtime or

960
00:27:37,886 --> 0:27:38,916
if something wasn't signed

961
00:27:38,916 --> 0:27:39,396
properly.

962
00:27:40,356 --> 0:27:41,696
So this will be the key if

963
00:27:41,696 --> 0:27:42,576
anything was rejected.

964
00:27:43,086 --> 0:27:45,866
If it was successful, you'll

965
00:27:45,866 --> 0:27:47,166
probably want to look in the

966
00:27:47,166 --> 0:27:49,176
ticket contents especially if

967
00:27:49,176 --> 0:27:50,166
you do anything interesting

968
00:27:50,166 --> 0:27:51,316
around how you package your

969
00:27:51,316 --> 0:27:51,806
software.

970
00:27:52,656 --> 0:27:54,136
The ticket content should list

971
00:27:54,136 --> 0:27:55,936
every binary that was discovered

972
00:27:55,936 --> 0:27:57,816
by the Notary Service and,

973
00:27:57,816 --> 0:27:59,116
therefore, every binary whose

974
00:27:59,116 --> 0:28:00,816
information is included in the

975
00:27:59,116 --> 0:28:00,816
information is included in the

976
00:28:00,816 --> 0:28:01,826
ticket that you'll staple.

977
00:28:02,826 --> 0:28:03,906
So if you notice that anything

978
00:28:03,906 --> 0:28:04,836
is missing in the ticket

979
00:28:04,836 --> 0:28:07,386
contents, you may need to try to

980
00:28:07,576 --> 0:28:08,896
figure out what went wrong and

981
00:28:08,896 --> 0:28:09,436
try it again.

982
00:28:10,476 --> 0:28:12,896
Now regardless of whether you

983
00:28:12,896 --> 0:28:14,966
use Xcode or altool when the

984
00:28:14,966 --> 0:28:16,006
Notary Service is done

985
00:28:16,006 --> 0:28:18,166
processing a submission, you'll

986
00:28:18,166 --> 0:28:18,716
get an email.

987
00:28:19,536 --> 0:28:20,746
Here's an example of a success

988
00:28:20,746 --> 0:28:22,646
email indicating that this

989
00:28:22,646 --> 0:28:24,286
software is ready for stapling.

990
00:28:24,876 --> 0:28:27,586
Which brings us to the next

991
00:28:28,336 --> 0:28:28,466
step.

992
00:28:30,046 --> 0:28:32,106
Stapling uses a tool also built

993
00:28:32,106 --> 0:28:33,946
into Xcode 10 and newer called

994
00:28:34,176 --> 0:28:34,606
Stapler.

995
00:28:35,416 --> 0:28:36,506
Here you can see an example

996
00:28:36,506 --> 0:28:38,116
invocation of stapler with a

997
00:28:38,116 --> 0:28:40,536
staple command that can be used

998
00:28:40,536 --> 0:28:42,626
to staple directly to a package

999
00:28:42,896 --> 0:28:43,726
or a disk image.

1000
00:28:44,206 --> 0:28:46,496
Now note that you can't staple

1001
00:28:46,496 --> 0:28:48,156
directly to zip files so you'll

1002
00:28:48,156 --> 0:28:49,636
need to unpack the zip file,

1003
00:28:50,026 --> 0:28:51,376
staple the contents of the zip

1004
00:28:51,376 --> 0:28:53,126
file and then you can package it

1005
00:28:53,126 --> 0:28:54,156
back up for distribution.

1006
00:28:54,756 --> 0:28:59,226
And note that stapling of

1007
00:28:59,356 --> 0:29:01,856
command line tools and libraries

1008
00:28:59,356 --> 0:29:01,856
command line tools and libraries

1009
00:29:01,916 --> 0:29:03,966
is not supported right now even

1010
00:29:03,966 --> 0:29:05,386
though these items still can and

1011
00:29:05,386 --> 0:29:06,336
should be notarized.

1012
00:29:10,336 --> 0:29:12,326
Now, after you staple the next

1013
00:29:12,326 --> 0:29:13,326
step is to verify that

1014
00:29:13,326 --> 0:29:14,226
everything was successfully

1015
00:29:14,226 --> 0:29:16,586
notarized and this step varies a

1016
00:29:16,586 --> 0:29:17,756
little bit based on what you

1017
00:29:17,756 --> 0:29:19,546
want to verify, but the first

1018
00:29:19,546 --> 0:29:20,086
thing is simple.

1019
00:29:20,086 --> 0:29:21,226
If you really just want to check

1020
00:29:21,226 --> 0:29:22,506
that something has been stapled,

1021
00:29:23,136 --> 0:29:24,176
you can use the Stapler tool

1022
00:29:24,176 --> 0:29:24,496
again.

1023
00:29:25,106 --> 0:29:26,706
Here you can see the stapler

1024
00:29:26,706 --> 0:29:28,546
tool with the validate command

1025
00:29:29,046 --> 0:29:30,096
to check that an item has been

1026
00:29:30,286 --> 0:29:33,566
properly stapled, but what about

1027
00:29:33,566 --> 0:29:34,326
if you want to verify

1028
00:29:34,326 --> 0:29:36,146
notarization on something that

1029
00:29:36,596 --> 0:29:38,636
you didn't put up for stapling

1030
00:29:38,816 --> 0:29:39,736
or that you didn't staple

1031
00:29:39,736 --> 0:29:40,146
yourself?

1032
00:29:40,706 --> 0:29:41,376
Well, then you will want to

1033
00:29:41,376 --> 0:29:43,586
generally use the SPCTL command,

1034
00:29:44,026 --> 0:29:45,716
which is a tool built into macOS

1035
00:29:46,616 --> 0:29:47,766
that runs gatekeeper

1036
00:29:47,766 --> 0:29:48,396
assessments.

1037
00:29:48,936 --> 0:29:51,696
And this does vary slightly

1038
00:29:51,696 --> 0:29:53,246
based on what you want to check

1039
00:29:53,246 --> 0:29:55,006
for notarization, but if you

1040
00:29:55,006 --> 0:29:56,416
want to check an application

1041
00:29:56,416 --> 0:29:58,856
bundle, you can use the SPCTL

1042
00:29:58,856 --> 0:30:01,466
command with the assess option

1043
00:29:58,856 --> 0:30:01,466
command with the assess option

1044
00:30:02,316 --> 0:30:04,666
and the verbose output and path

1045
00:30:04,826 --> 0:30:06,026
to the app to the application.

1046
00:30:07,296 --> 0:30:08,786
The source will tell you whether

1047
00:30:08,786 --> 0:30:09,756
or not it was notarized.

1048
00:30:10,656 --> 0:30:11,956
Notarized Developer ID means

1049
00:30:11,956 --> 0:30:12,786
that it was successfully

1050
00:30:12,786 --> 0:30:13,986
notarized and if it shows

1051
00:30:13,986 --> 0:30:15,706
anything else, that mean that it

1052
00:30:15,706 --> 0:30:16,566
wasn't notarized.

1053
00:30:17,036 --> 0:30:20,086
If instead you want to check an

1054
00:30:20,086 --> 0:30:21,046
installer package for

1055
00:30:21,046 --> 0:30:24,616
notarization, you can use the

1056
00:30:24,616 --> 0:30:26,446
SPCTL command just like before

1057
00:30:26,446 --> 0:30:27,806
but with the additional type

1058
00:30:27,866 --> 0:30:29,666
option and passing that it's an

1059
00:30:29,666 --> 0:30:30,176
install.

1060
00:30:31,446 --> 0:30:32,436
Again, this will show you the

1061
00:30:32,436 --> 0:30:33,976
source and if it was

1062
00:30:33,976 --> 0:30:35,066
successfully notarized, you'll

1063
00:30:35,066 --> 0:30:37,186
see notarized developer ID.

1064
00:30:39,856 --> 0:30:42,586
Next what if you want to check

1065
00:30:42,586 --> 0:30:44,766
notarization on a signed disk

1066
00:30:44,766 --> 0:30:45,186
image?

1067
00:30:46,796 --> 0:30:48,206
Well, you can use a fairly

1068
00:30:48,206 --> 0:30:49,766
similar command except now you

1069
00:30:49,766 --> 0:30:52,186
want to use the type open and

1070
00:30:52,186 --> 0:30:53,846
you need to pass in the context

1071
00:30:54,346 --> 0:30:55,596
that's listed here on the slide.

1072
00:30:56,726 --> 0:30:57,866
That will show you the same

1073
00:30:57,866 --> 0:31:00,366
output as before and if it says

1074
00:30:57,866 --> 0:31:00,366
output as before and if it says

1075
00:31:00,366 --> 0:31:01,586
notarized Developer ID,

1076
00:31:01,946 --> 0:31:03,146
notarization was successful for

1077
00:31:03,146 --> 0:31:03,966
that signed disk image.

1078
00:31:05,546 --> 0:31:06,246
If you want to check

1079
00:31:06,246 --> 0:31:08,006
notarization status of anything

1080
00:31:08,006 --> 0:31:09,736
else, you'll need to fall back

1081
00:31:09,736 --> 0:31:11,766
to using the codesign command.

1082
00:31:13,456 --> 0:31:14,726
Here's an example of using the

1083
00:31:14,726 --> 0:31:17,126
codesign command with the verify

1084
00:31:17,126 --> 0:31:21,316
function verbose output testing

1085
00:31:21,316 --> 0:31:22,706
a very specific requirement

1086
00:31:23,226 --> 0:31:25,306
notarized and then a path to the

1087
00:31:25,306 --> 0:31:26,376
binary or the thing that you're

1088
00:31:26,376 --> 0:31:29,086
trying to check and the third

1089
00:31:29,086 --> 0:31:30,126
line of the output will say

1090
00:31:30,126 --> 0:31:31,896
explicit requirements satisfied

1091
00:31:32,276 --> 0:31:33,206
indicating that the test

1092
00:31:33,206 --> 0:31:34,506
requirement you passed in on the

1093
00:31:34,506 --> 0:31:35,976
command line was successfully

1094
00:31:35,976 --> 0:31:37,586
satisfied, which in this case

1095
00:31:37,586 --> 0:31:39,406
means the binary was notarized.

1096
00:31:40,536 --> 0:31:42,366
If it says that the explicit

1097
00:31:42,366 --> 0:31:44,126
requirement failed, that means

1098
00:31:44,126 --> 0:31:45,386
the binary wasn't successfully

1099
00:31:45,386 --> 0:31:45,936
notarized.

1100
00:31:49,136 --> 0:31:50,056
So that's everything about

1101
00:31:50,266 --> 0:31:51,366
verifying notarization.

1102
00:31:51,816 --> 0:31:53,176
I want to jump back and hit on

1103
00:31:53,176 --> 0:31:55,586
one other usage of altool that I

1104
00:31:55,586 --> 0:31:56,636
mentioned very early in the

1105
00:31:56,636 --> 0:31:57,226
presentation.

1106
00:31:58,636 --> 0:32:00,386
Altool is also able to give you

1107
00:31:58,636 --> 0:32:00,386
Altool is also able to give you

1108
00:32:00,386 --> 0:32:02,506
a notarization history using the

1109
00:32:02,506 --> 0:32:04,646
notarization history command of

1110
00:32:04,646 --> 0:32:06,006
all of the software that's been

1111
00:32:06,006 --> 0:32:07,706
submitted for notarization on

1112
00:32:07,706 --> 0:32:08,226
your account.

1113
00:32:09,406 --> 0:32:10,446
Here you can see an example of

1114
00:32:10,446 --> 0:32:12,146
the command and an example of

1115
00:32:12,146 --> 0:32:12,576
the output.

1116
00:32:13,156 --> 0:32:14,546
It also accepts pagination so

1117
00:32:14,546 --> 0:32:15,776
that you can paginate through

1118
00:32:15,776 --> 0:32:16,716
all of the submissions that have

1119
00:32:16,716 --> 0:32:16,976
been made.

1120
00:32:20,046 --> 0:32:21,056
I know that that was a lot of

1121
00:32:21,056 --> 0:32:22,386
information to digest in one

1122
00:32:22,806 --> 0:32:26,316
short talk, but there's a few

1123
00:32:26,316 --> 0:32:27,346
important things that I really

1124
00:32:27,346 --> 0:32:28,356
want you to take away from this

1125
00:32:28,356 --> 0:32:28,856
conversation.

1126
00:32:29,776 --> 0:32:31,916
First, it's really important to

1127
00:32:31,916 --> 0:32:33,896
sign your software properly

1128
00:32:34,286 --> 0:32:35,786
using inside-out code signing.

1129
00:32:36,576 --> 0:32:37,846
This is important not just so

1130
00:32:37,846 --> 0:32:39,286
that gatekeeper can verify your

1131
00:32:39,286 --> 0:32:40,326
software hasn't been tempered

1132
00:32:40,326 --> 0:32:42,746
with but also for notarization.

1133
00:32:45,816 --> 0:32:48,036
Second, don't take hardened

1134
00:32:48,036 --> 0:32:49,576
runtime entitlements that you

1135
00:32:49,576 --> 0:32:50,126
don't need.

1136
00:32:50,866 --> 0:32:52,266
Think about the benefit that the

1137
00:32:52,266 --> 0:32:53,336
hardened runtime provides to

1138
00:32:53,336 --> 0:32:55,206
your app and your users and

1139
00:32:55,206 --> 0:32:56,546
remember that every entitlement

1140
00:32:56,546 --> 0:32:58,476
you take reduces the security of

1141
00:32:58,476 --> 0:32:59,246
your application.

1142
00:32:59,746 --> 0:33:01,216
So only take those that you

1143
00:32:59,746 --> 0:33:01,216
So only take those that you

1144
00:33:01,766 --> 0:33:01,866
need.

1145
00:33:03,646 --> 0:33:05,996
Finally notarize and staple all

1146
00:33:05,996 --> 0:33:07,166
the software that you distribute

1147
00:33:07,566 --> 0:33:09,386
so that it passes gatekeeper in

1148
00:33:09,386 --> 0:33:10,146
macOS Catalina.

1149
00:33:13,516 --> 0:33:15,296
Thanks for attending, and if

1150
00:33:15,296 --> 0:33:16,086
you're interested in talking

1151
00:33:16,086 --> 0:33:17,536
more about notarization, please

1152
00:33:17,536 --> 0:33:18,796
come to the notarization lab

1153
00:33:18,796 --> 0:33:19,596
that's going to be following

1154
00:33:19,596 --> 0:33:20,736
this session immediately at 4

1155
00:33:20,736 --> 0:33:21,096
o'clock.

1156
00:33:21,586 --> 0:33:23,076
Also, there are a couple of

1157
00:33:23,076 --> 0:33:24,666
other labs running throughout

1158
00:33:24,666 --> 0:33:25,856
the week where we can talk more

1159
00:33:25,856 --> 0:33:27,496
about security, notarization and

1160
00:33:27,496 --> 0:33:27,726
signing.

1161
00:33:28,516 --> 0:33:28,976
So thank you.

1162
00:33:29,516 --> 0:33:36,500
[ Applause ]
