1
00:00:00,506 --> 0:00:05,516
[ Music ]

2
00:00:06,231 --> 0:00:08,231
[ Applause ]

3
00:00:08,446 --> 0:00:10,006
&gt;&gt; My name is Janum Trivedi, and

4
00:00:10,006 --> 0:00:11,466
I'm an engineer on the UIKit

5
00:00:11,496 --> 0:00:12,466
frameworks team.

6
00:00:13,696 --> 0:00:15,666
First, let's talk about

7
00:00:15,666 --> 0:00:17,276
architecting your app for

8
00:00:17,276 --> 0:00:18,236
multiple windows.

9
00:00:18,916 --> 0:00:20,786
On iOS 13, supporting multiple

10
00:00:20,786 --> 0:00:22,776
windows is a fantastic way to

11
00:00:22,776 --> 0:00:24,016
make your existing apps more

12
00:00:24,016 --> 0:00:26,006
useful and allow your users to

13
00:00:26,006 --> 0:00:26,976
be substantially more

14
00:00:26,976 --> 0:00:27,556
productive.

15
00:00:30,056 --> 0:00:31,576
We'll be going over three

16
00:00:31,576 --> 0:00:32,746
primary topics today.

17
00:00:33,496 --> 0:00:34,666
We'll get started by doing a

18
00:00:34,666 --> 0:00:36,436
quick overview of the changes to

19
00:00:36,436 --> 0:00:38,176
the application life cycle that

20
00:00:38,226 --> 0:00:39,856
will allow multiple windows on

21
00:00:39,856 --> 0:00:41,236
iOS 13 to be possible.

22
00:00:42,456 --> 0:00:44,856
Then, we'll dive deeper into the

23
00:00:44,856 --> 0:00:47,206
new UIScene delegate and we'll

24
00:00:47,206 --> 0:00:48,436
talk about what kind of work you

25
00:00:48,436 --> 0:00:49,896
should be doing there.

26
00:00:50,486 --> 0:00:52,816
Finally, we'll go over some best

27
00:00:52,816 --> 0:00:54,386
practices in ArchitectureKit so

28
00:00:54,386 --> 0:00:55,346
you and your team can take

29
00:00:55,346 --> 0:00:56,926
advantage of to make sure you

30
00:00:56,926 --> 0:00:57,906
provide your users with a

31
00:00:57,906 --> 0:00:59,506
consistent, seamless

32
00:00:59,506 --> 0:01:01,236
multitasking experience.

33
00:00:59,506 --> 0:01:01,236
multitasking experience.

34
00:01:01,796 --> 0:01:06,356
Now, to get started, let's talk

35
00:01:06,356 --> 0:01:07,866
about some of the roles and

36
00:01:07,866 --> 0:01:09,046
responsibilities of the App

37
00:01:09,106 --> 0:01:10,976
Delegate in iOS 12 and before.

38
00:01:10,976 --> 0:01:13,876
The App Delegate had two primary

39
00:01:13,876 --> 0:01:14,166
roles.

40
00:01:14,166 --> 0:01:15,436
The first was to notify your

41
00:01:15,436 --> 0:01:17,266
application of process level

42
00:01:17,266 --> 0:01:17,716
events.

43
00:01:18,046 --> 0:01:19,286
So, the system would notify your

44
00:01:19,286 --> 0:01:20,476
App Delegate when your process

45
00:01:20,476 --> 0:01:22,056
was launching or was about to

46
00:01:22,056 --> 0:01:22,656
terminate.

47
00:01:23,256 --> 0:01:24,976
But it also had the second role,

48
00:01:25,326 --> 0:01:26,846
which was letting your

49
00:01:26,846 --> 0:01:29,066
application know the state of

50
00:01:29,066 --> 0:01:29,566
its UI.

51
00:01:31,266 --> 0:01:33,446
So, via some methods like did

52
00:01:33,446 --> 0:01:34,776
enter foreground and will resign

53
00:01:34,776 --> 0:01:36,616
active, the system will let you

54
00:01:36,616 --> 0:01:37,846
know your UI state.

55
00:01:38,446 --> 0:01:41,586
And this is totally fine in iOS

56
00:01:41,586 --> 0:01:42,666
12 and before, because

57
00:01:42,906 --> 0:01:44,686
applications had one process and

58
00:01:44,686 --> 0:01:46,666
also just one user interface

59
00:01:46,666 --> 0:01:48,366
instance to match it.

60
00:01:48,936 --> 0:01:51,096
So, today your App Delegate

61
00:01:51,096 --> 0:01:52,086
probably looks a little bit

62
00:01:52,086 --> 0:01:53,976
something like this, except

63
00:01:53,976 --> 0:01:55,406
maybe not quite this short.

64
00:01:55,406 --> 0:01:59,156
So, in your did finish launching

65
00:01:59,156 --> 0:02:00,376
with options, you do a couple

66
00:01:59,156 --> 0:02:00,376
with options, you do a couple

67
00:02:00,376 --> 0:02:00,716
things.

68
00:02:00,716 --> 0:02:02,706
First you do some one-time

69
00:02:02,706 --> 0:02:04,536
non-UI global setup, like

70
00:02:04,596 --> 0:02:05,856
connecting to a database or

71
00:02:05,856 --> 0:02:06,716
initializing your data

72
00:02:06,716 --> 0:02:07,376
structures.

73
00:02:07,996 --> 0:02:09,886
And immediately after that, you

74
00:02:09,886 --> 0:02:11,136
set up your user interface.

75
00:02:11,676 --> 0:02:14,756
And again, this is totally valid

76
00:02:14,756 --> 0:02:17,006
in 12 and before, but iOS 13's

77
00:02:17,006 --> 0:02:18,156
pattern is invalid.

78
00:02:18,956 --> 0:02:21,186
Why? Because applications now

79
00:02:21,466 --> 0:02:23,176
still just share one process but

80
00:02:23,176 --> 0:02:25,026
may have multiple user interface

81
00:02:25,026 --> 0:02:27,576
instances or scene sessions.

82
00:02:28,116 --> 0:02:32,406
That means the responsibility of

83
00:02:32,406 --> 0:02:33,596
the App Delegate needs to change

84
00:02:33,596 --> 0:02:33,846
a bit.

85
00:02:34,386 --> 0:02:35,496
It's still responsible for

86
00:02:35,496 --> 0:02:37,106
process events and life cycle,

87
00:02:37,486 --> 0:02:38,796
but it's no longer responsible

88
00:02:38,796 --> 0:02:40,166
for anything related to your UI

89
00:02:40,166 --> 0:02:40,756
lifecycle.

90
00:02:41,386 --> 0:02:43,186
Instead, that'll all be handled

91
00:02:43,456 --> 0:02:45,156
by your UIScene Delegate.

92
00:02:46,146 --> 0:02:47,436
Well, what does that mean for

93
00:02:47,436 --> 0:02:47,716
you?

94
00:02:48,346 --> 0:02:50,436
Any UI setup or teardown work

95
00:02:50,436 --> 0:02:51,536
that you used to do in your App

96
00:02:51,536 --> 0:02:53,716
Delegate now needs to migrate to

97
00:02:53,716 --> 0:02:55,166
the corresponding methods in

98
00:02:55,166 --> 0:02:56,076
your Scene Delegate.

99
00:02:56,596 --> 0:02:59,986
In fact, on iOS 13, if your

100
00:02:59,986 --> 0:03:02,006
application adopts the new scene

101
00:02:59,986 --> 0:03:02,006
application adopts the new scene

102
00:03:02,006 --> 0:03:03,876
lifecycle, UIKit will stop

103
00:03:03,876 --> 0:03:05,276
calling the old App Delegate

104
00:03:05,276 --> 0:03:06,976
methods that relate to UI state.

105
00:03:07,686 --> 0:03:09,266
Instead, we'll call the new

106
00:03:09,696 --> 0:03:11,806
Scene Delegate methods, and it's

107
00:03:11,806 --> 0:03:12,936
pretty simple since there's a

108
00:03:13,406 --> 0:03:14,976
1-to-1 mapping for most of

109
00:03:14,976 --> 0:03:15,316
these.

110
00:03:16,246 --> 0:03:18,346
But don't worry - if you want to

111
00:03:18,346 --> 0:03:19,696
adopt multiple windows support

112
00:03:19,696 --> 0:03:21,146
on iOS 13, that doesn't mean you

113
00:03:21,146 --> 0:03:22,626
need to drop support for 12 and

114
00:03:22,626 --> 0:03:23,066
before.

115
00:03:23,776 --> 0:03:25,366
If you're back deploying, you

116
00:03:25,366 --> 0:03:26,676
can simply keep both sets of

117
00:03:26,676 --> 0:03:28,356
these methods and UIKit will

118
00:03:28,356 --> 0:03:30,586
call the correct set at runtime.

119
00:03:31,106 --> 0:03:35,086
Now, before we dive into the

120
00:03:35,086 --> 0:03:36,886
exact delegate methods, there's

121
00:03:36,886 --> 0:03:37,876
one more additional

122
00:03:37,876 --> 0:03:39,276
responsibility that the App

123
00:03:39,366 --> 0:03:40,206
Delegate gets.

124
00:03:40,466 --> 0:03:41,756
And that is the system will now

125
00:03:41,756 --> 0:03:43,436
notify your App Delegate when a

126
00:03:43,436 --> 0:03:44,886
new Scene Session is being

127
00:03:44,886 --> 0:03:46,736
created, or an existing Scene

128
00:03:46,736 --> 0:03:48,176
Session is being discarded.

129
00:03:48,176 --> 0:03:51,276
Let's make this lifecycle a

130
00:03:51,326 --> 0:03:52,786
little bit more concrete.

131
00:03:53,196 --> 0:03:54,316
Say I've been working on this

132
00:03:54,316 --> 0:03:55,806
little blue app right here and I

133
00:03:55,806 --> 0:03:56,876
want to launch it for the first

134
00:03:56,876 --> 0:03:57,246
time.

135
00:03:57,456 --> 0:03:58,556
Let's go through the call stack.

136
00:03:59,606 --> 0:04:01,826
First, your App Delegate's going

137
00:03:59,606 --> 0:04:01,826
First, your App Delegate's going

138
00:04:01,826 --> 0:04:02,996
to get the same did finish

139
00:04:02,996 --> 0:04:04,016
launching with options call.

140
00:04:04,246 --> 0:04:05,536
Again, it's still fine to do

141
00:04:05,536 --> 0:04:07,716
your one-time non-UI setup here.

142
00:04:08,276 --> 0:04:10,906
Then immediately after that, the

143
00:04:10,906 --> 0:04:12,346
system's going to create a scene

144
00:04:12,346 --> 0:04:12,936
session.

145
00:04:13,906 --> 0:04:15,306
But before it creates the actual

146
00:04:15,306 --> 0:04:16,875
UI Scene, it's going to ask our

147
00:04:16,875 --> 0:04:18,836
application for UIScene

148
00:04:18,836 --> 0:04:19,685
configuration.

149
00:04:20,226 --> 0:04:21,946
This configuration specifies

150
00:04:22,156 --> 0:04:24,086
what scene delegate, what story

151
00:04:24,086 --> 0:04:25,606
board, and if you specified,

152
00:04:25,606 --> 0:04:27,106
what scene subclass you want to

153
00:04:27,106 --> 0:04:28,116
create the scene with.

154
00:04:29,366 --> 0:04:31,376
It's worth noting that you can

155
00:04:31,376 --> 0:04:33,026
define these scene

156
00:04:33,026 --> 0:04:34,046
configurations either

157
00:04:34,046 --> 0:04:36,136
dynamically in code or

158
00:04:36,136 --> 0:04:37,956
preferably statically in your

159
00:04:37,956 --> 0:04:38,986
info.plist.

160
00:04:40,326 --> 0:04:41,536
This also gives you an

161
00:04:41,536 --> 0:04:42,886
opportunity to select the right

162
00:04:42,886 --> 0:04:43,726
configuration.

163
00:04:44,116 --> 0:04:45,266
You may have a main scene

164
00:04:45,266 --> 0:04:47,086
configuration, and you may have

165
00:04:47,086 --> 0:04:48,046
an accessory scene.

166
00:04:48,466 --> 0:04:49,306
So, you should look at the

167
00:04:49,306 --> 0:04:50,466
options parameter that's

168
00:04:50,466 --> 0:04:52,536
provided here, to use that as

169
00:04:52,536 --> 0:04:53,896
the context to pick the right

170
00:04:54,196 --> 0:04:55,386
scene configuration.

171
00:04:55,886 --> 0:05:00,536
Once you've defined these, for

172
00:04:55,886 --> 0:05:00,536
Once you've defined these, for

173
00:05:00,536 --> 0:05:02,476
example in your info.plist, it's

174
00:05:02,476 --> 0:05:02,946
really simple.

175
00:05:02,946 --> 0:05:04,136
You just refer to it by name,

176
00:05:04,486 --> 0:05:06,436
making sure you pass in the role

177
00:05:06,436 --> 0:05:08,196
of the incoming sessions role.

178
00:05:10,536 --> 0:05:11,096
Great.

179
00:05:11,956 --> 0:05:12,886
Now our app is launched.

180
00:05:13,146 --> 0:05:14,626
We have a scene session.

181
00:05:14,856 --> 0:05:16,026
But we don't see any UI, and

182
00:05:16,026 --> 0:05:17,606
that's where our scene delegates

183
00:05:18,406 --> 0:05:20,116
did connect to scene session

184
00:05:20,116 --> 0:05:21,066
comes in.

185
00:05:22,036 --> 0:05:23,406
Let's look at what kind of work

186
00:05:23,406 --> 0:05:23,966
we should do here.

187
00:05:23,966 --> 0:05:25,046
This is where you set up your UI

188
00:05:25,046 --> 0:05:27,676
window with the new designated

189
00:05:27,756 --> 0:05:29,516
UI window initializer.

190
00:05:29,806 --> 0:05:31,126
We'll notice that we pass in the

191
00:05:31,126 --> 0:05:32,286
window scene provided.

192
00:05:32,976 --> 0:05:35,426
But importantly, we need to also

193
00:05:35,426 --> 0:05:37,636
check for any relevant user

194
00:05:37,636 --> 0:05:40,626
activities or state restoration

195
00:05:40,626 --> 0:05:42,216
activities to configure our

196
00:05:42,216 --> 0:05:42,806
window with.

197
00:05:43,376 --> 0:05:44,856
We'll talk about that more in a

198
00:05:44,856 --> 0:05:45,500
second.

199
00:05:47,046 --> 0:05:48,746
Yay, now we see our app.

200
00:05:49,376 --> 0:05:50,856
So, what happens when one of our

201
00:05:50,856 --> 0:05:52,316
users actually swipes up to go

202
00:05:52,316 --> 0:05:52,996
back home?

203
00:05:54,426 --> 0:05:57,226
Well, the old familiar will

204
00:05:57,226 --> 0:05:58,746
resign active and did enter

205
00:05:58,746 --> 0:06:00,576
background methods get called on

206
00:05:58,746 --> 0:06:00,576
background methods get called on

207
00:06:00,576 --> 0:06:01,306
your scene delegate.

208
00:06:01,956 --> 0:06:02,736
But, now there's something

209
00:06:02,736 --> 0:06:03,266
interesting.

210
00:06:03,826 --> 0:06:05,586
At some point in time after,

211
00:06:05,816 --> 0:06:07,456
your scene may be disconnected.

212
00:06:07,736 --> 0:06:08,896
Well, what does that mean?

213
00:06:09,116 --> 0:06:10,276
Well, in order to reclaim

214
00:06:10,276 --> 0:06:13,036
resources, the system may at

215
00:06:13,036 --> 0:06:14,356
some point after your scene

216
00:06:14,356 --> 0:06:15,826
enters the background, release

217
00:06:15,826 --> 0:06:16,786
that scene from memory.

218
00:06:17,096 --> 0:06:18,616
That also means your scene

219
00:06:18,616 --> 0:06:20,096
delegate will be released from

220
00:06:20,386 --> 0:06:21,716
memory and any window

221
00:06:21,716 --> 0:06:23,206
hierarchies or view hierarchies

222
00:06:23,436 --> 0:06:24,686
held by your scene delegate will

223
00:06:24,686 --> 0:06:25,986
be released as well.

224
00:06:27,236 --> 0:06:29,126
This gives you an opportunity to

225
00:06:29,126 --> 0:06:31,016
deallocate and release any large

226
00:06:31,016 --> 0:06:32,256
resources in memory that were

227
00:06:32,256 --> 0:06:33,676
retained by somewhere else in

228
00:06:33,676 --> 0:06:35,696
your application that related to

229
00:06:35,696 --> 0:06:36,406
this scene.

230
00:06:37,276 --> 0:06:38,916
But it's important to not use

231
00:06:38,916 --> 0:06:40,336
this to actually delete any

232
00:06:40,336 --> 0:06:41,976
user data or state permanently,

233
00:06:42,226 --> 0:06:43,926
as the scene may reconnect and

234
00:06:43,926 --> 0:06:44,726
return later.

235
00:06:48,236 --> 0:06:49,966
But then let's talk about what

236
00:06:49,966 --> 0:06:51,996
actually happens when our user

237
00:06:51,996 --> 0:06:53,966
actually swipes up on a scene

238
00:06:53,966 --> 0:06:55,436
session on switch and explicitly

239
00:06:55,436 --> 0:06:57,526
wants to destroy it?

240
00:06:57,746 --> 0:06:59,326
Well, the system will call our

241
00:06:59,326 --> 0:07:01,716
App Delegates didDiscardSceneSessions.

242
00:06:59,326 --> 0:07:01,716
App Delegates didDiscardSceneSessions.

243
00:07:04,016 --> 0:07:05,236
This finally gives us an

244
00:07:05,236 --> 0:07:06,556
opportunity to actually

245
00:07:06,556 --> 0:07:08,106
permanently delegate any user

246
00:07:08,106 --> 0:07:09,296
state or data associated with

247
00:07:09,296 --> 0:07:11,326
the scene such as an unsaved

248
00:07:11,326 --> 0:07:13,306
draft in a text editing app.

249
00:07:14,086 --> 0:07:16,176
Now, it's also possible that one

250
00:07:16,176 --> 0:07:17,856
of your users removed one or

251
00:07:17,856 --> 0:07:19,356
more UIScenes from the switcher

252
00:07:19,356 --> 0:07:21,176
by swiping up while your actual

253
00:07:21,176 --> 0:07:22,446
app process was not running.

254
00:07:23,316 --> 0:07:24,586
If your process was not running,

255
00:07:24,586 --> 0:07:25,746
the system will keep track of

256
00:07:25,746 --> 0:07:27,536
the discarded sessions and call

257
00:07:27,536 --> 0:07:28,516
this shortly after your

258
00:07:28,516 --> 0:07:29,796
application's next launch.

259
00:07:34,726 --> 0:07:36,136
Now, let's talk about some

260
00:07:36,136 --> 0:07:37,616
architecture patters that you

261
00:07:37,616 --> 0:07:38,816
can consider integrating into

262
00:07:38,816 --> 0:07:39,346
your apps.

263
00:07:39,886 --> 0:07:43,556
We'll start by talking about

264
00:07:43,556 --> 0:07:44,476
state restoration.

265
00:07:45,786 --> 0:07:48,086
In iOS 13, state restoration is

266
00:07:48,086 --> 0:07:49,536
no longer a nicety.

267
00:07:50,136 --> 0:07:52,216
It is crucial for your

268
00:07:52,216 --> 0:07:53,416
application to implement

269
00:07:53,416 --> 0:07:55,206
scene-based state restoration.

270
00:07:55,926 --> 0:07:57,126
Let's go over why that is.

271
00:07:58,426 --> 0:07:59,286
Here's our app switcher.

272
00:07:59,406 --> 0:08:01,286
I have a document app and I'm

273
00:07:59,406 --> 0:08:01,286
I have a document app and I'm

274
00:08:01,286 --> 0:08:02,356
planning a road trip and I have

275
00:08:02,436 --> 0:08:03,416
four different sessions of

276
00:08:03,416 --> 0:08:04,526
different documents open right

277
00:08:04,526 --> 0:08:04,756
now.

278
00:08:05,716 --> 0:08:07,006
But I'm really focusing on

279
00:08:07,236 --> 0:08:08,506
packing list and agenda.

280
00:08:09,556 --> 0:08:12,176
At some point, these other two

281
00:08:12,176 --> 0:08:13,226
backgrounded road trip and

282
00:08:13,226 --> 0:08:14,486
attendee scenes, have been

283
00:08:14,486 --> 0:08:16,116
disconnected and released by the

284
00:08:16,116 --> 0:08:16,616
system.

285
00:08:17,466 --> 0:08:18,896
If I don't implement state

286
00:08:18,896 --> 0:08:20,886
restoration here, when I go back

287
00:08:20,886 --> 0:08:21,896
to the road trip, I'm not going

288
00:08:21,896 --> 0:08:23,546
to return to the state that I

289
00:08:23,546 --> 0:08:24,256
was previously in.

290
00:08:24,256 --> 0:08:25,056
I'm not going to scene the

291
00:08:25,056 --> 0:08:26,336
document that I was editing.

292
00:08:27,136 --> 0:08:28,176
Instead, I'll just start over,

293
00:08:28,176 --> 0:08:29,296
like it's a brand-new window,

294
00:08:29,296 --> 0:08:31,166
and that's not a great user

295
00:08:31,166 --> 0:08:31,776
experience.

296
00:08:33,196 --> 0:08:34,275
Well, how can we resolve this?

297
00:08:34,946 --> 0:08:36,645
iOS 13 has a brand-new

298
00:08:37,346 --> 0:08:39,515
scene-based state restoration

299
00:08:39,515 --> 0:08:39,806
API.

300
00:08:40,155 --> 0:08:41,576
And it's super simple.

301
00:08:42,816 --> 0:08:45,396
It works by not any more

302
00:08:45,396 --> 0:08:47,486
encoding view hierarchies, but

303
00:08:47,606 --> 0:08:49,496
instead just encoding the state

304
00:08:49,496 --> 0:08:51,276
which will allow you to recreate

305
00:08:51,506 --> 0:08:51,996
your window.

306
00:08:54,356 --> 0:08:56,236
This is all based on NSUser

307
00:08:56,236 --> 0:08:56,946
activity as well.

308
00:08:56,946 --> 0:08:57,856
So, if your application

309
00:08:57,856 --> 0:08:59,376
leverages powerful technologies

310
00:08:59,376 --> 0:09:00,696
like spotlight search or

311
00:08:59,376 --> 0:09:00,696
like spotlight search or

312
00:09:00,696 --> 0:09:02,336
handoff, you can use these same

313
00:09:02,336 --> 0:09:03,686
activities to encode the state

314
00:09:03,686 --> 0:09:04,136
of your app.

315
00:09:04,796 --> 0:09:06,076
It's also worth noting that in

316
00:09:06,076 --> 0:09:08,196
iOS 13, the state restoration

317
00:09:08,196 --> 0:09:09,646
archive that you give back to

318
00:09:09,646 --> 0:09:11,656
the system will match the same

319
00:09:11,656 --> 0:09:13,236
data protection class of the

320
00:09:13,236 --> 0:09:14,336
rest of your application.

321
00:09:17,756 --> 0:09:19,966
What does this look like in

322
00:09:20,796 --> 0:09:20,906
code?

323
00:09:20,906 --> 0:09:22,156
Well, in our scene delegate, we

324
00:09:22,156 --> 0:09:23,356
implement state restoration

325
00:09:23,356 --> 0:09:25,796
activity for scene and then I

326
00:09:25,796 --> 0:09:29,346
call a method that finds the

327
00:09:29,346 --> 0:09:31,506
most active relevant user

328
00:09:31,506 --> 0:09:33,086
activity form in the current

329
00:09:33,086 --> 0:09:33,496
window.

330
00:09:34,046 --> 0:09:35,526
Then we return that.

331
00:09:36,276 --> 0:09:38,366
After some time, when that scene

332
00:09:38,366 --> 0:09:39,496
re-enters the foreground and

333
00:09:39,496 --> 0:09:41,746
becomes connected, we check if

334
00:09:41,746 --> 0:09:43,176
the session contains a state

335
00:09:43,176 --> 0:09:44,286
restoration activity.

336
00:09:44,896 --> 0:09:46,596
If it does, we use that

337
00:09:46,596 --> 0:09:47,076
activity.

338
00:09:47,586 --> 0:09:48,656
If not, we can create a

339
00:09:48,656 --> 0:09:50,446
brand-new window without any

340
00:09:50,446 --> 0:09:50,776
state.

341
00:09:51,886 --> 0:09:53,546
This means that no matter what,

342
00:09:54,026 --> 0:09:55,396
our users will never notice when

343
00:09:55,396 --> 0:09:57,026
scenes get disconnected in the

344
00:09:57,026 --> 0:09:58,236
background because they

345
00:09:58,236 --> 0:09:58,626
shouldn't.

346
00:10:00,856 --> 0:10:03,156
Finally, let's talk about one

347
00:10:03,156 --> 0:10:05,346
more important issue that you

348
00:10:05,346 --> 0:10:06,816
may run into when adopting

349
00:10:06,816 --> 0:10:08,026
support for multiple windows.

350
00:10:08,196 --> 0:10:09,756
And that is how to best keep

351
00:10:09,756 --> 0:10:11,496
application scenes in sync.

352
00:10:11,496 --> 0:10:13,656
Let me make this more concrete.

353
00:10:13,796 --> 0:10:15,256
I've been working on a new chat

354
00:10:15,256 --> 0:10:17,396
application right here, and as

355
00:10:17,396 --> 0:10:18,866
we see, I just recently added

356
00:10:18,866 --> 0:10:20,456
support for multiple windows on

357
00:10:20,456 --> 0:10:21,236
iOS 13.

358
00:10:22,636 --> 0:10:23,666
And I have a chat with my

359
00:10:23,666 --> 0:10:25,786
friend, Giovanni, who will join

360
00:10:25,786 --> 0:10:27,086
me on stage in a couple minutes,

361
00:10:27,736 --> 0:10:28,896
and notice that we're viewing

362
00:10:28,896 --> 0:10:30,046
the same conversation in two

363
00:10:30,046 --> 0:10:31,076
different view controllers and

364
00:10:31,076 --> 0:10:32,536
two different scenes at the same

365
00:10:32,536 --> 0:10:32,886
time.

366
00:10:34,036 --> 0:10:35,276
So, let's say I want to send

367
00:10:35,276 --> 0:10:36,826
Giovanni a message and let him

368
00:10:36,826 --> 0:10:37,846
know I'm ready for lunch.

369
00:10:39,056 --> 0:10:40,866
Oh, only one of our scenes

370
00:10:40,866 --> 0:10:41,376
updated.

371
00:10:42,176 --> 0:10:43,706
So, why is that?

372
00:10:44,876 --> 0:10:46,816
Well, it turns out that on iOS,

373
00:10:46,816 --> 0:10:47,976
a lot of apps are structured in

374
00:10:47,976 --> 0:10:49,486
this kind of way in which view

375
00:10:49,486 --> 0:10:51,026
controllers receive an event,

376
00:10:51,446 --> 0:10:52,766
maybe via button tap, me

377
00:10:52,766 --> 0:10:53,846
pressing the send button.

378
00:10:54,426 --> 0:10:56,086
And then the view controller

379
00:10:56,086 --> 0:10:57,786
itself updates its own UI.

380
00:10:58,716 --> 0:11:00,166
After that, our view controller

381
00:10:58,716 --> 0:11:00,166
After that, our view controller

382
00:11:00,166 --> 0:11:01,826
notifies our model or model

383
00:11:01,826 --> 0:11:02,436
controller.

384
00:11:02,436 --> 0:11:05,266
And this is mostly okay when we

385
00:11:05,266 --> 0:11:07,046
just are talking about one user

386
00:11:07,046 --> 0:11:07,856
interface instance.

387
00:11:08,466 --> 0:11:10,146
But now if we introduce a second

388
00:11:10,796 --> 0:11:11,816
view controller in a different

389
00:11:11,816 --> 0:11:13,166
scene that's showing the same

390
00:11:13,166 --> 0:11:15,296
data, at no point is this new

391
00:11:15,296 --> 0:11:16,666
view controller being notified

392
00:11:16,906 --> 0:11:18,596
to update itself with this new

393
00:11:18,596 --> 0:11:18,916
data.

394
00:11:19,816 --> 0:11:20,446
That's an issue.

395
00:11:20,966 --> 0:11:24,556
Well, we can resolve this.

396
00:11:24,606 --> 0:11:25,976
Architecturally, now if our view

397
00:11:25,976 --> 0:11:27,186
controllers, upon receiving an

398
00:11:27,186 --> 0:11:29,536
event, immediately and only

399
00:11:29,536 --> 0:11:31,356
notify our model controller,

400
00:11:31,736 --> 0:11:32,986
then we can have our model

401
00:11:32,986 --> 0:11:35,416
controller actually notify any

402
00:11:35,416 --> 0:11:36,686
relevant subscribers or view

403
00:11:36,686 --> 0:11:37,946
controllers, telling them that

404
00:11:37,946 --> 0:11:39,196
they should update with this new

405
00:11:39,836 --> 0:11:39,996
data.

406
00:11:41,416 --> 0:11:42,536
There are a number of ways that

407
00:11:42,536 --> 0:11:43,196
we can do this.

408
00:11:43,196 --> 0:11:44,146
We can use delegates,

409
00:11:44,146 --> 0:11:45,046
notifications.

410
00:11:45,376 --> 0:11:46,696
We can even use the fantastic

411
00:11:46,696 --> 0:11:48,086
new Swift Combine framework

412
00:11:48,086 --> 0:11:48,836
released this year.

413
00:11:49,716 --> 0:11:51,116
But let's go over a lightweight

414
00:11:51,116 --> 0:11:52,526
Swift example that you can

415
00:11:52,526 --> 0:11:53,646
consider integrating into your

416
00:11:53,646 --> 0:11:54,096
apps.

417
00:11:54,666 --> 0:11:55,976
Here's the current method that

418
00:11:55,976 --> 0:11:57,356
gets called when I press the

419
00:11:57,566 --> 0:11:58,786
return button on sending a

420
00:11:58,786 --> 0:11:59,336
message.

421
00:11:59,936 --> 0:12:01,076
We create a message model

422
00:11:59,936 --> 0:12:01,076
We create a message model

423
00:12:01,076 --> 0:12:01,426
object.

424
00:12:02,056 --> 0:12:03,306
My view controller updates its

425
00:12:03,306 --> 0:12:03,866
own views.

426
00:12:04,446 --> 0:12:07,096
And then we notify our model

427
00:12:07,096 --> 0:12:08,746
controller to persist this.

428
00:12:09,286 --> 0:12:11,056
And the first thing we need to

429
00:12:11,056 --> 0:12:11,916
do is this view controller

430
00:12:12,236 --> 0:12:13,756
should not be mutating its own

431
00:12:13,816 --> 0:12:14,406
view state.

432
00:12:14,886 --> 0:12:16,086
Instead, we're just going to get

433
00:12:16,086 --> 0:12:16,646
rid of that code.

434
00:12:16,746 --> 0:12:18,196
We'll add that back later in a

435
00:12:18,656 --> 0:12:18,836
second.

436
00:12:20,846 --> 0:12:22,706
Now, let's look at what that

437
00:12:22,706 --> 0:12:24,836
model controller add method is

438
00:12:24,836 --> 0:12:25,446
actually doing.

439
00:12:25,446 --> 0:12:26,576
It's pretty simple.

440
00:12:27,206 --> 0:12:28,406
All we're doing is persisting

441
00:12:28,406 --> 0:12:29,176
that new message.

442
00:12:30,096 --> 0:12:31,286
But we actually want the model

443
00:12:31,286 --> 0:12:33,556
controller to now notify if any

444
00:12:33,556 --> 0:12:34,526
other view controllers or

445
00:12:34,526 --> 0:12:35,826
connected scenes that there has

446
00:12:35,826 --> 0:12:36,476
been an update.

447
00:12:39,496 --> 0:12:40,456
How are we going to send this

448
00:12:40,456 --> 0:12:41,186
update down?

449
00:12:41,636 --> 0:12:43,936
We want a structured way to

450
00:12:43,936 --> 0:12:46,276
package this event such that

451
00:12:46,276 --> 0:12:49,366
it's strongly typed and it's

452
00:12:49,616 --> 0:12:51,166
easily debuggable and testable.

453
00:12:51,446 --> 0:12:52,576
So, let's go ahead and actually

454
00:12:52,576 --> 0:12:54,116
create a new type and we'll call

455
00:12:54,116 --> 0:12:55,206
it update event.

456
00:12:55,206 --> 0:12:56,516
It's a Swift enum with

457
00:12:56,516 --> 0:12:57,536
associated values.

458
00:12:58,066 --> 0:12:59,736
So, we'll add a new message

459
00:12:59,736 --> 0:13:00,026
type.

460
00:12:59,736 --> 0:13:00,026
type.

461
00:13:00,676 --> 0:13:02,276
This is the object that our

462
00:13:02,276 --> 0:13:03,506
model controller is going to

463
00:13:03,506 --> 0:13:04,836
create on receiving a new

464
00:13:04,836 --> 0:13:06,626
message and will then send down

465
00:13:06,626 --> 0:13:07,876
to any relevant view controllers

466
00:13:07,876 --> 0:13:08,456
or scenes.

467
00:13:09,656 --> 0:13:10,896
Because we want to post this,

468
00:13:10,896 --> 0:13:12,496
we'll use NSNotification center

469
00:13:12,716 --> 0:13:14,076
as the backing store for this.

470
00:13:14,076 --> 0:13:15,826
So, we'll add this handy post

471
00:13:15,826 --> 0:13:17,636
method that lets us in one line

472
00:13:17,846 --> 0:13:19,286
create a new update event and

473
00:13:19,286 --> 0:13:20,896
then post it to any subscribers.

474
00:13:21,456 --> 0:13:24,186
The implementation is fairly

475
00:13:24,186 --> 0:13:25,166
straightforward.

476
00:13:25,236 --> 0:13:27,006
We just post a notification to

477
00:13:27,006 --> 0:13:28,486
the new message notification

478
00:13:28,486 --> 0:13:29,646
name channel.

479
00:13:30,126 --> 0:13:31,376
But the trick here is that we're

480
00:13:31,376 --> 0:13:32,696
including the update event

481
00:13:32,926 --> 0:13:34,826
object itself in the

482
00:13:34,826 --> 0:13:35,766
notifications object.

483
00:13:35,766 --> 0:13:37,096
This will come in handy, as

484
00:13:37,096 --> 0:13:41,446
we'll see in a second.

485
00:13:41,576 --> 0:13:42,956
Now, when our model controller

486
00:13:42,956 --> 0:13:44,166
is notified that a new message

487
00:13:44,166 --> 0:13:45,926
was added, after we persist it,

488
00:13:46,196 --> 0:13:47,166
we can just create this new

489
00:13:47,166 --> 0:13:49,066
event and call post.

490
00:13:51,546 --> 0:13:53,466
Then, if we look at how we have

491
00:13:53,496 --> 0:13:54,696
to change our view controllers,

492
00:13:55,436 --> 0:13:57,396
we observe this new event.

493
00:13:57,676 --> 0:13:58,976
In this case, the new message

494
00:13:58,976 --> 0:13:59,836
notification name.

495
00:14:00,286 --> 0:14:01,716
And then we create a handler

496
00:14:01,716 --> 0:14:03,366
method that we get the

497
00:14:03,366 --> 0:14:06,066
notification from in the arguments.

498
00:14:06,816 --> 0:14:08,126
And remember, when we pass the

499
00:14:08,126 --> 0:14:09,646
update event as the

500
00:14:09,646 --> 0:14:12,426
notifications object, we can now

501
00:14:12,546 --> 0:14:14,076
pull that event right back out

502
00:14:14,076 --> 0:14:15,426
from the notification.

503
00:14:15,946 --> 0:14:18,736
Then, we can easily switch on

504
00:14:18,736 --> 0:14:20,506
the kind of case of the event

505
00:14:21,796 --> 0:14:22,886
and because we created an

506
00:14:22,886 --> 0:14:25,166
associated enum, we can pull the

507
00:14:25,666 --> 0:14:26,726
message out.

508
00:14:26,986 --> 0:14:28,616
Now, we can update our user

509
00:14:28,616 --> 0:14:29,326
interface here.

510
00:14:32,536 --> 0:14:33,736
So, let's see what happens when

511
00:14:33,736 --> 0:14:34,896
I send Giovanni that same

512
00:14:34,896 --> 0:14:36,786
message after implementing this

513
00:14:36,786 --> 0:14:37,496
new architecture.

514
00:14:38,196 --> 0:14:39,696
Hey! All of our scenes update.

515
00:14:41,516 --> 0:14:45,876
[ Applause ]

516
00:14:46,376 --> 0:14:47,866
So, we've gone over a lot today.

517
00:14:48,076 --> 0:14:48,976
We've gone over some of the

518
00:14:48,976 --> 0:14:50,886
differences in the app versus

519
00:14:50,886 --> 0:14:51,736
scene delegate and the

520
00:14:51,736 --> 0:14:53,296
differences in responsibilities.

521
00:14:53,696 --> 0:14:54,806
We've also gone over some of the

522
00:14:54,806 --> 0:14:57,586
major scene delegate methods and

523
00:14:57,586 --> 0:14:58,836
what kind of work you should do

524
00:14:58,836 --> 0:14:59,066
there.

525
00:15:00,156 --> 0:15:01,306
We also talked about why state

526
00:15:01,306 --> 0:15:02,736
restoration is so crucial for

527
00:15:02,736 --> 0:15:04,616
you to use on iOS 13 and how you

528
00:15:04,616 --> 0:15:06,726
can leverage the new scene-based

529
00:15:06,896 --> 0:15:07,926
API to do so.

530
00:15:08,606 --> 0:15:11,166
Finally, we talked about some

531
00:15:11,166 --> 0:15:12,596
high-level patterns for creating

532
00:15:12,596 --> 0:15:14,066
a one-way data flow such that we

533
00:15:14,066 --> 0:15:15,296
can keep all of our scenes in

534
00:15:15,296 --> 0:15:16,456
sync while they share the same

535
00:15:16,456 --> 0:15:16,776
data.

536
00:15:17,376 --> 0:15:17,716
Thank you.

537
00:15:19,508 --> 0:15:21,508
[ Applause ]
