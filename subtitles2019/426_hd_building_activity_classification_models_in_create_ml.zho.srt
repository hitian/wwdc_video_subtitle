1
00:00:07,516 --> 0:00:11,576
[掌声]

2
00:00:12,076 --> 0:00:15,196
&gt;&gt; 我是来自 Core ML 组的 Yuxin

3
00:00:15,566 --> 0:00:18,176
今天 我非常激动地

4
00:00:18,176 --> 0:00:20,476
向大家介绍

5
00:00:20,476 --> 0:00:22,996
今年 Create ML 中的全新模型

6
00:00:22,996 --> 0:00:23,856
行为分类

7
00:00:27,596 --> 0:00:30,966
我们每天都通过设备

8
00:00:30,966 --> 0:00:34,226
进行很多行为

9
00:00:34,496 --> 0:00:36,836
比如玩游戏 做运动

10
00:00:37,626 --> 0:00:39,856
我们的移动设备

11
00:00:40,106 --> 0:00:42,156
也都配备了

12
00:00:42,286 --> 0:00:43,246
大量传感器

13
00:00:44,366 --> 0:00:45,606
例如 对于运动来说

14
00:00:47,166 --> 0:00:49,916
加速度计和陀螺仪

15
00:00:49,916 --> 0:00:51,056
都很常用

16
00:00:52,026 --> 0:00:54,146
它们有助于

17
00:00:54,496 --> 0:00:56,146
检测设备的

18
00:00:56,196 --> 0:00:59,456
三维加速度 旋转速度

19
00:00:59,456 --> 0:01:00,516
或设备方向

20
00:00:59,456 --> 0:01:00,516
或设备方向

21
00:01:01,796 --> 0:01:06,346
我们可以利用这些传感器数据来表示行为

22
00:01:08,166 --> 0:01:11,146
例如 如果你在慢跑

23
00:01:12,066 --> 0:01:14,196
数据就和站着不动时

24
00:01:14,196 --> 0:01:16,906
有很大差异

25
00:01:18,276 --> 0:01:21,556
同样地 如果你做出不同手势

26
00:01:21,636 --> 0:01:24,886
玩不同游戏

27
00:01:24,886 --> 0:01:26,296
或者进行不同的体育运动

28
00:01:26,366 --> 0:01:29,866
你的行为数据也可能

29
00:01:29,866 --> 0:01:32,646
有足够大的差异 以供识别

30
00:01:34,546 --> 0:01:38,436
那么 什么是行为分类

31
00:01:39,306 --> 0:01:43,096
它是一项任务

32
00:01:43,096 --> 0:01:45,706
能够识别

33
00:01:45,706 --> 0:01:49,026
对设备执行的

34
00:01:49,026 --> 0:01:50,586
预定义物理操作集

35
00:01:51,416 --> 0:01:53,606
如果你有不同的行为需要识别

36
00:01:53,676 --> 0:01:55,746
或者你的 App

37
00:01:55,746 --> 0:02:00,006
可能有不同的需求

38
00:01:55,746 --> 0:02:00,006
可能有不同的需求

39
00:02:00,006 --> 0:02:00,706
这时该怎么办呢

40
00:02:00,706 --> 0:02:04,896
我们十分希望

41
00:02:05,036 --> 0:02:07,086
你能够根据自己的目的

42
00:02:07,086 --> 0:02:09,526
定制自己的模型

43
00:02:10,735 --> 0:02:13,396
于是我们在今年

44
00:02:13,436 --> 0:02:15,966
向你们介绍

45
00:02:15,966 --> 0:02:19,506
Create ML 中的行为分类

46
00:02:19,726 --> 0:02:22,126
不如我们先举个例子

47
00:02:25,436 --> 0:02:28,426
我很喜欢

48
00:02:28,536 --> 0:02:31,436
和家人朋友玩极限飞盘

49
00:02:32,716 --> 0:02:36,056
在游戏过后

50
00:02:36,056 --> 0:02:38,916
我也很想看看

51
00:02:38,916 --> 0:02:41,486
我的表现有多好

52
00:02:41,956 --> 0:02:43,646
比如投掷技术的

53
00:02:43,646 --> 0:02:46,596
种类和数量

54
00:02:47,076 --> 0:02:49,106
所以我训练了一个飞盘运动分类器

55
00:02:49,106 --> 0:02:51,426
来识别我的动作

56
00:02:52,206 --> 0:02:54,026
并用在我的 Apple Watch 上

57
00:02:54,636 --> 0:02:56,886
我觉得这行得通

58
00:02:57,246 --> 0:02:58,656
我们先来看一个现场演示

59
00:03:00,386 --> 0:03:02,856
这是我的 iPhone 屏幕

60
00:03:02,976 --> 0:03:06,786
它已与我的 Apple Watch 配对

61
00:03:07,816 --> 0:03:10,396
模型会在我的 Apple Watch 上运行

62
00:03:11,926 --> 0:03:14,396
这儿有一个开始按钮

63
00:03:15,886 --> 0:03:18,076
一旦我按下开始按钮

64
00:03:18,076 --> 0:03:19,486
我的 Apple Watch 就会开始

65
00:03:19,826 --> 0:03:21,076
传输传感器数据

66
00:03:22,116 --> 0:03:23,846
然后我的模型

67
00:03:23,846 --> 0:03:25,676
就会进行连续预测

68
00:03:27,236 --> 0:03:30,516
我们开始吧

69
00:03:30,636 --> 0:03:32,826
现在它让我

70
00:03:32,826 --> 0:03:36,336
做出一个飞盘动作

71
00:03:36,336 --> 0:03:39,306
这意味着它预测了一个无行为类

72
00:03:39,306 --> 0:03:39,806
显然目前是正确的

73
00:03:40,476 --> 0:03:43,906
我先试试简单的动作

74
00:03:46,786 --> 0:03:48,696
正手

75
00:03:49,516 --> 0:03:53,266
[掌声]

76
00:03:53,766 --> 0:03:57,866
接下来 反手

77
00:03:58,516 --> 0:04:01,306
[掌声]

78
00:03:58,516 --> 0:04:01,306
[掌声]

79
00:04:01,806 --> 0:04:03,566
这是我最喜欢的动作

80
00:04:04,046 --> 0:04:04,976
“鸡翅膀”

81
00:04:05,516 --> 0:04:10,026
[掌声]

82
00:04:10,526 --> 0:04:13,476
我还有一个更漂亮的秘密武器

83
00:04:13,476 --> 0:04:15,956
要给你们展示 “保龄球”

84
00:04:16,261 --> 0:04:18,261
[掌声]

85
00:04:18,505 --> 0:04:20,946
它叫做 “保龄球手”

86
00:04:20,946 --> 0:04:21,805
因为我像是在打保龄球

87
00:04:21,805 --> 0:04:24,846
我再试一次 “保龄球手”

88
00:04:28,936 --> 0:04:30,696
它只是机器学习模型啦

89
00:04:31,776 --> 0:04:36,746
现在 我按下停止按钮

90
00:04:36,746 --> 0:04:40,516
然后看看我的结果

91
00:04:41,726 --> 0:04:44,466
在我看来还不错

92
00:04:45,586 --> 0:04:48,496
对于特定的类别 比如 “保龄球手” 

93
00:04:48,496 --> 0:04:51,626
我知道我可以回头收集更多的数据

94
00:04:52,546 --> 0:04:54,176
所以我对这些数据很满意

95
00:04:54,526 --> 0:04:58,396
今天我锻炼得不错

96
00:04:58,576 --> 0:05:04,056
现在 我们说回上一话题

97
00:04:58,576 --> 0:05:04,056
现在 我们说回上一话题

98
00:05:04,306 --> 0:05:07,896
我知道作为开发者的你

99
00:05:07,896 --> 0:05:10,916
会有很多其他更有创意的想法要探索

100
00:05:13,526 --> 0:05:17,156
现在我们看一看

101
00:05:17,156 --> 0:05:19,656
如何在 Create ML 中真正设置模型

102
00:05:23,056 --> 0:05:26,856
只需要三步

103
00:05:26,856 --> 0:05:29,536
首先 为自己的行为收集一些数据

104
00:05:30,046 --> 0:05:35,306
使用 Create ML 训练模型

105
00:05:35,556 --> 0:05:39,926
最后 将模型部署到你的 App 中

106
00:05:41,516 --> 0:05:44,086
我们先来获得一些数据

107
00:05:46,396 --> 0:05:48,756
访问传感器数据最简单的方法

108
00:05:48,756 --> 0:05:51,066
是使用 Core Motion

109
00:05:52,526 --> 0:05:54,586
更多有关它的信息

110
00:05:54,586 --> 0:05:56,836
请参考我们之前的会议

111
00:05:57,106 --> 0:06:00,056
以及 Apple 开发者文档

112
00:05:57,106 --> 0:06:00,056
以及 Apple 开发者文档

113
00:06:00,566 --> 0:06:04,216
但从高层次的角度来看

114
00:06:04,666 --> 0:06:06,586
你的 App 可以轻松访问

115
00:06:06,586 --> 0:06:08,686
一系列传感器

116
00:06:09,036 --> 0:06:10,426
也就是 Core Motion Framework

117
00:06:10,836 --> 0:06:13,736
你还可以操控

118
00:06:13,736 --> 0:06:17,106
开始 停止

119
00:06:17,106 --> 0:06:20,056
或设置 App 中记录的更新间隔

120
00:06:20,396 --> 0:06:24,186
你也可以使用

121
00:06:24,266 --> 0:06:26,546
完全相同的机制

122
00:06:26,546 --> 0:06:28,666
来收集你的训练数据

123
00:06:28,666 --> 0:06:34,251
以及之后的设备推断

124
00:06:34,716 --> 0:06:37,346
这就是我的数据

125
00:06:38,356 --> 0:06:40,086
这是我的“正手”记录之一

126
00:06:40,086 --> 0:06:44,136
它是 CSV 格式

127
00:06:45,716 --> 0:06:47,696
有一列时间戳

128
00:06:47,696 --> 0:06:51,026
以及其他几列

129
00:06:51,026 --> 0:06:52,996
传感器特性

130
00:06:54,306 --> 0:06:56,446
其实我在飞盘运动的例子中

131
00:06:56,446 --> 0:06:58,676
还使用了加速度

132
00:06:58,936 --> 0:07:00,796
和旋转速度

133
00:06:58,936 --> 0:07:00,796
和旋转速度

134
00:07:01,346 --> 0:07:03,386
但是为了简单起见

135
00:07:03,386 --> 0:07:04,946
这里只展示了三列

136
00:07:06,686 --> 0:07:08,826
如果想要

137
00:07:08,826 --> 0:07:10,886
进一步研究数据

138
00:07:10,886 --> 0:07:12,686
行为模式

139
00:07:12,686 --> 0:07:15,326
看起来可能会是这样

140
00:07:16,416 --> 0:07:20,046
我的 “正手” 记录

141
00:07:20,046 --> 0:07:22,406
在同一类上有三个来回动作

142
00:07:24,346 --> 0:07:27,346
之后 在训练中

143
00:07:27,346 --> 0:07:29,046
深度学习模型

144
00:07:29,046 --> 0:07:31,576
会使用一个滑动窗口

145
00:07:31,616 --> 0:07:33,496
在时间序列数据间移动

146
00:07:34,656 --> 0:07:36,366
通过这种方式

147
00:07:36,366 --> 0:07:39,526
它可以提取行为的

148
00:07:39,526 --> 0:07:41,646
空间和时间模式

149
00:07:43,696 --> 0:07:45,586
现在我们已经准备好了文件

150
00:07:46,376 --> 0:07:48,006
你只需在这样的数据源层次结构中

151
00:07:48,006 --> 0:07:50,526
组织数据

152
00:07:50,596 --> 0:07:53,626
其中每个文件夹的名称

153
00:07:53,626 --> 0:07:54,566
都是一个标签名称

154
00:07:54,566 --> 0:07:57,396
这个文件夹下的所有文件

155
00:07:57,396 --> 0:07:59,836
都属于同一个行为

156
00:08:00,896 --> 0:08:03,346
支持的格式有 CSV JSON

157
00:08:03,866 --> 0:08:04,776
和文本格式

158
00:08:05,736 --> 0:08:07,116
你可以选择其中之一

159
00:08:07,196 --> 0:08:11,646
也可以按照喜好混合搭配

160
00:08:13,736 --> 0:08:15,136
数据准备好了

161
00:08:15,946 --> 0:08:20,506
现在我们开始训练

162
00:08:20,566 --> 0:08:24,216
只需从 Create ML App 的模板中

163
00:08:24,216 --> 0:08:27,566
选择 Activity Classifier

164
00:08:27,776 --> 0:08:30,016
这是一个标准的信息界面

165
00:08:30,016 --> 0:08:33,265
你可以将你的训练数据

166
00:08:33,265 --> 0:08:36,576
拖放到这个窗口中

167
00:08:37,356 --> 0:08:39,076
在 Activity 中

168
00:08:39,126 --> 0:08:41,866
你可以预览记录里有多少文件

169
00:08:41,936 --> 0:08:43,946
和多少样例

170
00:08:45,516 --> 0:08:47,646
Activity 上的

171
00:08:47,726 --> 0:08:50,326
一个特殊步骤是

172
00:08:50,326 --> 0:08:52,436
你需要告诉 Create ML

173
00:08:52,526 --> 0:08:54,506
你想尝试的传感器特性是什么

174
00:08:55,926 --> 0:08:59,276
只需从这个列表中选择一个或多个

175
00:09:00,746 --> 0:09:02,366
所有这些传感器特性

176
00:09:02,856 --> 0:09:04,666
都来自你的文件

177
00:09:04,666 --> 0:09:08,666
即 CSV 文件的标题

178
00:09:11,626 --> 0:09:14,236
你还可以选择

179
00:09:14,236 --> 0:09:15,796
根据行为的快慢

180
00:09:16,736 --> 0:09:18,756
来调整参数

181
00:09:18,816 --> 0:09:23,166
比如预测窗口尺寸

182
00:09:23,806 --> 0:09:27,116
对于飞盘运动的例子

183
00:09:27,236 --> 0:09:28,706
实际上我用了两秒窗口

184
00:09:28,786 --> 0:09:31,096
也就是 100 个样本

185
00:09:31,096 --> 0:09:34,896
我将在这里输入 100

186
00:09:34,896 --> 0:09:37,126
因为我的数据

187
00:09:37,126 --> 0:09:39,616
最初是以 50 hz 的频率采样的

188
00:09:42,516 --> 0:09:44,756
现在我们按下 “训练” 按钮

189
00:09:44,756 --> 0:09:49,066
可以从这里开始训练

190
00:09:49,526 --> 0:09:52,146
我相信你们在这一周内

191
00:09:52,146 --> 0:09:54,596
已经多次看到了整个过程

192
00:09:54,856 --> 0:09:57,256
所以我会略过这部分内容

193
00:09:57,516 --> 0:09:59,576
因为从这里开始的

194
00:09:59,576 --> 0:10:01,716
整个工作流程

195
00:09:59,576 --> 0:10:01,716
整个工作流程

196
00:10:01,896 --> 0:10:03,216
与 Create ML 中的其他模型完全相同

197
00:10:06,366 --> 0:10:07,896
如果你对准确性还满意

198
00:10:07,896 --> 0:10:10,406
那么就可以

199
00:10:10,586 --> 0:10:13,056
继续尝试一些新的数据

200
00:10:13,056 --> 0:10:15,446
来评估这个模型的性能

201
00:10:19,046 --> 0:10:21,646
这是一个标准测试标签

202
00:10:22,296 --> 0:10:24,426
和刚才一样

203
00:10:24,576 --> 0:10:26,276
提供测试数据

204
00:10:29,906 --> 0:10:32,506
在评估之后

205
00:10:32,506 --> 0:10:34,666
你会看到

206
00:10:34,666 --> 0:10:37,876
一张包含每个类别

207
00:10:37,876 --> 0:10:39,396
查准率和查全率的表

208
00:10:42,236 --> 0:10:44,306
对于我的飞盘运动的例子

209
00:10:44,516 --> 0:10:47,336
你可以在这里看到

210
00:10:47,466 --> 0:10:49,416
“保龄球手”和“锤击”这些特定的类别

211
00:10:49,416 --> 0:10:50,496
不是那么完美

212
00:10:51,666 --> 0:10:53,206
这可能意味着

213
00:10:53,206 --> 0:10:55,026
我需要再为这两类

214
00:10:55,026 --> 0:10:55,986
收集更多的数据

215
00:10:55,986 --> 0:10:58,976
然后再次迭代

216
00:10:58,976 --> 0:11:01,086
就可以提高性能

217
00:10:58,976 --> 0:11:01,086
就可以提高性能

218
00:11:03,196 --> 0:11:05,556
最终我们就

219
00:11:05,556 --> 0:11:08,676
得到了一个训练模型

220
00:11:08,676 --> 0:11:10,596
你可以选择保存模型

221
00:11:10,596 --> 0:11:12,846
并将它部署到我们的 App 中

222
00:11:13,926 --> 0:11:16,276
或者你可以在 Mac 上

223
00:11:16,616 --> 0:11:19,706
直接在 Create ML App 中

224
00:11:19,706 --> 0:11:20,736
进行批量预测

225
00:11:22,596 --> 0:11:24,296
只需在窗口中

226
00:11:24,586 --> 0:11:27,256
添加一些新的未显示和未标记的数据

227
00:11:27,256 --> 0:11:30,746
你就会看到

228
00:11:30,886 --> 0:11:33,356
即时的预测结果

229
00:11:33,356 --> 0:11:36,256
包括标签名称 置信度

230
00:11:36,896 --> 0:11:38,806
以及行为数据的预览

231
00:11:38,806 --> 0:11:43,766
以便更好地了解你的行为

232
00:11:46,106 --> 0:11:48,906
最后 这是我的 Core ML 模型

233
00:11:50,316 --> 0:11:53,856
我的飞盘运动例子

234
00:11:54,096 --> 0:11:55,866
是一个神经网络分类器

235
00:11:56,396 --> 0:11:59,496
它只有 1.1 MB

236
00:11:59,496 --> 0:12:01,906
体量非常小

237
00:11:59,496 --> 0:12:01,906
体量非常小

238
00:12:01,906 --> 0:12:03,466
对于移动设备来说非常简单

239
00:12:06,306 --> 0:12:09,246
此外 你还可以看到

240
00:12:09,446 --> 0:12:11,766
你在训练中使用的

241
00:12:11,766 --> 0:12:13,936
所有传感器特性的

242
00:12:13,936 --> 0:12:16,596
完整列表

243
00:12:16,596 --> 0:12:17,836
以及预测窗口大小

244
00:12:18,506 --> 0:12:21,156
之后 关于你的设备推断

245
00:12:21,156 --> 0:12:23,386
你只需使用

246
00:12:23,386 --> 0:12:26,036
相同的数据

247
00:12:26,036 --> 0:12:27,386
相同的大小来保持一致

248
00:12:29,546 --> 0:12:31,896
这就是 Create ML App

249
00:12:32,446 --> 0:12:34,206
我们在 macOS 中也有这个框架

250
00:12:35,546 --> 0:12:37,516
你可以使用

251
00:12:37,516 --> 0:12:40,056
Xcode Playground 

252
00:12:40,056 --> 0:12:44,256
Swift Script 或者命令行工具

253
00:12:44,756 --> 0:12:46,916
来自动化整个过程

254
00:12:47,416 --> 0:12:48,036
就像这样

255
00:12:51,196 --> 0:12:53,156
Activity 上的

256
00:12:53,156 --> 0:12:56,046
一个特殊步骤是

257
00:12:56,046 --> 0:12:57,996
需要指定 selectedSensors

258
00:12:59,136 --> 0:13:01,356
除此之外

259
00:12:59,136 --> 0:13:01,356
除此之外

260
00:13:01,426 --> 0:13:03,616
工作流程的其余部分

261
00:13:03,726 --> 0:13:05,706
与我们拥有的其他模型一样

262
00:13:06,776 --> 0:13:06,896
都是标准统一的

263
00:13:07,246 --> 0:13:09,806
训练评估和模型保存

264
00:13:09,806 --> 0:13:13,656
只是针对每个模型的一行代码

265
00:13:17,526 --> 0:13:19,476
这就是我们如何查看

266
00:13:19,476 --> 0:13:22,246
Create ML 中的行为分类器

267
00:13:23,416 --> 0:13:25,676
除此之外

268
00:13:25,676 --> 0:13:27,656
我还想分享一些

269
00:13:27,756 --> 0:13:28,486
这个模型的更优实践

270
00:13:32,436 --> 0:13:34,316
理解你的行为

271
00:13:35,486 --> 0:13:38,086
使用相关的传感器

272
00:13:38,086 --> 0:13:40,666
比如加速度计和陀螺仪

273
00:13:40,666 --> 0:13:44,046
都是非常常见的基于运动的任务

274
00:13:46,526 --> 0:13:49,206
这有助于收集一些

275
00:13:49,206 --> 0:13:51,526
无行为类

276
00:13:51,876 --> 0:13:54,206
或其他类数据

277
00:13:55,276 --> 0:13:57,466
这对运行时的性能

278
00:13:57,466 --> 0:13:59,046
特别有帮助

279
00:14:03,016 --> 0:14:06,816
提供类别均衡的数据

280
00:14:07,626 --> 0:14:09,886
对于 Activity 而言

281
00:14:09,886 --> 0:14:11,866
还涉及到每个类别记录文件的数量

282
00:14:11,866 --> 0:14:14,986
和记录长度

283
00:14:16,036 --> 0:14:21,196
最后 Core Motion 既提供

284
00:14:21,396 --> 0:14:23,446
原始传感器数据

285
00:14:23,446 --> 0:14:26,096
也提供处理过的设备运动数据

286
00:14:27,566 --> 0:14:29,926
设备运动

287
00:14:29,926 --> 0:14:32,486
是 Core Motion 框架下的一种传感器融合

288
00:14:32,486 --> 0:14:34,756
它还提供了归一化

289
00:14:34,926 --> 0:14:37,906
时间对齐

290
00:14:38,106 --> 0:14:39,506
和偏差消除

291
00:14:40,506 --> 0:14:42,496
有时候 这对于处理数据

292
00:14:42,496 --> 0:14:46,086
是很有帮助的

293
00:14:48,076 --> 0:14:48,946
这就是 Activity

294
00:14:49,516 --> 0:14:54,500
[掌声]
