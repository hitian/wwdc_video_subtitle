1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:12,666 --> 0:00:13,676
&gt;&gt; Hey [applause].

3
00:00:14,926 --> 0:00:16,065
Good afternoon.

4
00:00:16,946 --> 0:00:18,136
Good afternoon, everyone.

5
00:00:19,396 --> 0:00:21,976
My name is Roger Pantos and our

6
00:00:22,206 --> 0:00:24,566
HLS session this year is all

7
00:00:24,566 --> 0:00:26,816
focused on Low-Latency.

8
00:00:27,546 --> 0:00:32,006
So, first of all, what is this

9
00:00:32,006 --> 0:00:33,416
latency thing we're talking

10
00:00:33,416 --> 0:00:35,026
about when we say low-latency?

11
00:00:36,606 --> 0:00:39,796
Well, in this context, it refers

12
00:00:39,796 --> 0:00:41,786
to the amount of time from when

13
00:00:41,906 --> 0:00:43,256
a camera records a frame of

14
00:00:43,256 --> 0:00:44,856
video or hits your production

15
00:00:44,856 --> 0:00:45,546
backend.

16
00:00:46,036 --> 0:00:48,296
And when your user, sees that

17
00:00:48,296 --> 0:00:50,926
frame at home watching on their

18
00:00:50,926 --> 0:00:52,426
iPad or Apple TV.

19
00:00:53,386 --> 0:00:56,476
And shortening that duration,

20
00:00:56,476 --> 0:00:59,856
keeping that small is crucial to

21
00:00:59,856 --> 0:01:01,196
certain types of content.

22
00:00:59,856 --> 0:01:01,196
certain types of content.

23
00:01:02,646 --> 0:01:04,666
Now, the one we're probably most

24
00:01:04,666 --> 0:01:07,146
familiar with are live sports.

25
00:01:07,946 --> 0:01:09,796
But it's also important for

26
00:01:09,796 --> 0:01:12,116
late-breaking news, for things

27
00:01:12,116 --> 0:01:15,466
like live streaming of games,

28
00:01:16,066 --> 0:01:17,936
and even for things like the

29
00:01:17,936 --> 0:01:18,736
Oscars.

30
00:01:19,106 --> 0:01:21,366
Really anything where there's a

31
00:01:21,366 --> 0:01:23,456
lot of people watching the same

32
00:01:23,456 --> 0:01:25,296
video at the same time.

33
00:01:25,706 --> 0:01:27,166
And usually, there's a social

34
00:01:27,166 --> 0:01:28,076
component to it.

35
00:01:28,816 --> 0:01:31,926
So, how low does that latency

36
00:01:31,926 --> 0:01:33,886
have to be to provide a good

37
00:01:33,886 --> 0:01:35,036
user experience?

38
00:01:36,556 --> 0:01:39,606
Well, the gold standard today is

39
00:01:39,966 --> 0:01:42,956
around two to eight seconds.

40
00:01:43,436 --> 0:01:45,156
And that's what's provided by

41
00:01:45,516 --> 0:01:47,556
the current suite of television

42
00:01:47,556 --> 0:01:49,186
broadcasters, cable satellite

43
00:01:49,186 --> 0:01:49,736
television.

44
00:01:50,646 --> 0:01:51,956
And so, when we design

45
00:01:51,956 --> 0:01:54,186
Low-Latency HLS, we set

46
00:01:54,186 --> 0:01:57,406
ourselves a target of one to two

47
00:01:57,406 --> 0:02:00,366
seconds delay from live at scale

48
00:01:57,406 --> 0:02:00,366
seconds delay from live at scale

49
00:02:00,366 --> 0:02:01,776
over the public internet with

50
00:02:01,776 --> 0:02:03,016
any kind of reasonable round

51
00:02:03,016 --> 0:02:03,496
trip time.

52
00:02:04,766 --> 0:02:06,676
Now, we did that without

53
00:02:06,676 --> 0:02:09,786
sacrificing anything, any of the

54
00:02:09,786 --> 0:02:12,386
features that make HLS so

55
00:02:12,386 --> 0:02:12,906
compelling.

56
00:02:13,556 --> 0:02:16,366
So we still adapt the quality to

57
00:02:16,366 --> 0:02:18,216
match the user's network speed.

58
00:02:18,696 --> 0:02:20,106
We still allow you to protect

59
00:02:20,106 --> 0:02:20,786
your content.

60
00:02:21,036 --> 0:02:23,176
We still allow you to insert ads

61
00:02:23,476 --> 0:02:25,876
and provide program boundary and

62
00:02:25,876 --> 0:02:28,386
other metadata.

63
00:02:28,386 --> 0:02:31,246
We still enable you to scale

64
00:02:31,566 --> 0:02:33,606
your broadcasts to hundreds of

65
00:02:33,606 --> 0:02:36,106
thousands of users using

66
00:02:36,106 --> 0:02:39,546
commodity CDNs cost effectively.

67
00:02:39,546 --> 0:02:43,726
And we're making sure that these

68
00:02:43,726 --> 0:02:45,076
streams are backward compatible.

69
00:02:45,766 --> 0:02:47,866
So you can still see them at

70
00:02:47,866 --> 0:02:49,656
regular latency on older

71
00:02:49,656 --> 0:02:50,306
clients.

72
00:02:51,526 --> 0:02:54,436
So, how do we do all that?

73
00:02:54,946 --> 0:02:58,586
Well, to understand that, first,

74
00:02:58,586 --> 0:03:01,876
we have to go back to regular

75
00:02:58,586 --> 0:03:01,876
we have to go back to regular

76
00:03:01,876 --> 0:03:03,436
HLS and see where we're starting

77
00:03:03,436 --> 0:03:03,766
from.

78
00:03:05,906 --> 0:03:09,336
So, first of all, from its

79
00:03:09,336 --> 0:03:11,836
inception, HLS was designed to

80
00:03:11,836 --> 0:03:14,076
be a simple and robust protocol.

81
00:03:14,496 --> 0:03:15,686
And that has been great.

82
00:03:16,466 --> 0:03:19,246
And in fact, if your content

83
00:03:19,246 --> 0:03:21,706
doesn't fall within the bounds

84
00:03:21,706 --> 0:03:23,476
of those, you know, types of

85
00:03:23,476 --> 0:03:24,636
content we talked about earlier,

86
00:03:24,856 --> 0:03:26,496
you should keep using regular

87
00:03:26,496 --> 0:03:27,466
HLS and it's going to work great

88
00:03:27,466 --> 0:03:27,876
for you.

89
00:03:28,856 --> 0:03:31,436
But that simplicity comes at a

90
00:03:31,436 --> 0:03:32,006
cost.

91
00:03:32,256 --> 0:03:33,676
When you're watching sports, for

92
00:03:33,676 --> 0:03:35,806
instance, the manifestation of

93
00:03:35,806 --> 0:03:37,826
that cost is often that you hear

94
00:03:37,826 --> 0:03:39,196
about the goal through your

95
00:03:39,196 --> 0:03:41,296
apartment wall before you see it

96
00:03:41,296 --> 0:03:42,306
on your Apple TV.

97
00:03:43,956 --> 0:03:45,016
So why is that?

98
00:03:45,886 --> 0:03:47,946
Well, to understand that, let's

99
00:03:47,946 --> 0:03:49,176
take a look at what has to

100
00:03:49,176 --> 0:03:52,686
happen with regular HLS in order

101
00:03:52,686 --> 0:03:55,406
to get a particular frame from

102
00:03:55,406 --> 0:03:57,626
your production backend to user

103
00:03:57,626 --> 0:03:57,996
at home.

104
00:03:58,896 --> 0:04:00,056
We start with the frame.

105
00:03:58,896 --> 0:04:00,056
We start with the frame.

106
00:04:00,336 --> 0:04:01,356
And the first thing we need to

107
00:04:01,356 --> 0:04:03,716
do is encode it and put it into

108
00:04:03,716 --> 0:04:04,306
a segment.

109
00:04:04,756 --> 0:04:06,176
Now, we recommend 6-second

110
00:04:06,176 --> 0:04:06,776
segments.

111
00:04:07,176 --> 0:04:09,226
But that does mean that because

112
00:04:09,226 --> 0:04:11,246
we're encoding in real time, its

113
00:04:11,246 --> 0:04:12,816
six seconds before you even have

114
00:04:12,816 --> 0:04:14,016
anything that you can put on

115
00:04:14,106 --> 0:04:14,586
your CDN.

116
00:04:15,806 --> 0:04:17,196
After we've got that segment,

117
00:04:17,196 --> 0:04:18,866
the client has to discover that

118
00:04:18,995 --> 0:04:21,286
it exists.

119
00:04:21,286 --> 0:04:23,546
HLS today uses the polling

120
00:04:23,546 --> 0:04:24,816
mechanism, which means that

121
00:04:24,816 --> 0:04:26,116
every now and then the client

122
00:04:26,406 --> 0:04:27,616
checks in with the server for

123
00:04:27,616 --> 0:04:29,016
latest copy of the playlist to

124
00:04:29,016 --> 0:04:29,976
see if there's anything new.

125
00:04:31,106 --> 0:04:33,166
Now in the best case, the client

126
00:04:33,166 --> 0:04:36,016
might say, check in right after

127
00:04:36,016 --> 0:04:37,946
the server has put the latest

128
00:04:37,946 --> 0:04:39,216
segment into the playlist.

129
00:04:39,406 --> 0:04:41,316
That's great, but often we don't

130
00:04:41,316 --> 0:04:42,576
fall into that best case.

131
00:04:42,576 --> 0:04:44,676
And in fact, in some cases, it

132
00:04:44,676 --> 0:04:45,886
can be almost another six

133
00:04:45,886 --> 0:04:47,806
seconds before the client even

134
00:04:47,806 --> 0:04:49,316
finds out that there's a new

135
00:04:49,316 --> 0:04:50,026
segment there.

136
00:04:51,576 --> 0:04:54,206
After it does, and gets the new

137
00:04:54,206 --> 0:04:55,986
playlist back, it then has to

138
00:04:55,986 --> 0:04:57,026
turn around and make another

139
00:04:57,026 --> 0:04:58,616
request to actually get the

140
00:04:58,616 --> 0:04:59,536
segment itself.

141
00:04:59,536 --> 0:05:01,806
And remember that each of these

142
00:04:59,536 --> 0:05:01,806
And remember that each of these

143
00:05:01,806 --> 0:05:03,716
requests takes a round trip time

144
00:05:03,716 --> 0:05:04,316
on the network.

145
00:05:04,996 --> 0:05:06,066
And on some networks,

146
00:05:06,066 --> 0:05:07,996
particularly cellular, this can

147
00:05:07,996 --> 0:05:08,656
be in the hundreds of

148
00:05:08,656 --> 0:05:09,286
milliseconds.

149
00:05:09,326 --> 0:05:11,496
It's not insignificant.

150
00:05:12,366 --> 0:05:14,046
So anyway, after it does all

151
00:05:14,046 --> 0:05:15,946
that, then the segment can start

152
00:05:15,946 --> 0:05:17,006
flowing to the client.

153
00:05:17,816 --> 0:05:19,646
Then once it gets enough, it can

154
00:05:19,646 --> 0:05:20,846
present that frame of video.

155
00:05:21,406 --> 0:05:22,626
Now, in this example, we're

156
00:05:22,626 --> 0:05:24,496
already up in the 12-second

157
00:05:24,496 --> 0:05:24,956
region.

158
00:05:25,496 --> 0:05:27,176
But if you're delivering your

159
00:05:27,176 --> 0:05:30,116
content over a CDN, and almost

160
00:05:30,116 --> 0:05:32,946
all of us do, then it can get

161
00:05:32,946 --> 0:05:34,586
even further away from live.

162
00:05:35,736 --> 0:05:37,536
And the reason for that is

163
00:05:37,536 --> 0:05:40,986
because of the way that regular

164
00:05:41,076 --> 0:05:42,516
HLS interacts with CDNs.

165
00:05:42,516 --> 0:05:44,096
And let's take a look at that.

166
00:05:45,346 --> 0:05:48,176
So imagine that you've got your

167
00:05:48,776 --> 0:05:49,366
HLS Stream.

168
00:05:49,366 --> 0:05:50,246
You're authoring it to your

169
00:05:50,246 --> 0:05:51,606
origin on the right.

170
00:05:51,836 --> 0:05:53,746
In a particular time, it's

171
00:05:53,746 --> 0:05:54,926
placed a playlist up there.

172
00:05:54,926 --> 0:05:56,566
It has three segments in it.

173
00:05:56,916 --> 0:05:58,006
Now, the first client that

174
00:05:58,006 --> 0:05:59,476
checks in wants to find the

175
00:05:59,476 --> 0:06:00,676
latest greatest media.

176
00:05:59,476 --> 0:06:00,676
latest greatest media.

177
00:06:01,546 --> 0:06:03,696
If the CDN edge server that it's

178
00:06:03,696 --> 0:06:06,186
talking to hasn't cached any of

179
00:06:06,186 --> 0:06:07,876
that stuff yet, he's actually in

180
00:06:07,876 --> 0:06:09,156
good shape because he's going to

181
00:06:09,216 --> 0:06:10,336
ask for a playlist.

182
00:06:10,716 --> 0:06:11,856
The CDN is going to get it from

183
00:06:11,856 --> 0:06:13,296
the origin, get the latest

184
00:06:13,296 --> 0:06:14,316
versions, sent it right to the

185
00:06:14,316 --> 0:06:14,626
client.

186
00:06:14,666 --> 0:06:15,796
Client 1 is in good shape.

187
00:06:16,456 --> 0:06:18,886
The problem comes about a second

188
00:06:18,886 --> 0:06:21,356
or two later when on the origin,

189
00:06:21,916 --> 0:06:23,926
we get a new segment in town and

190
00:06:23,926 --> 0:06:26,226
the playlist is updated with now

191
00:06:26,226 --> 0:06:28,356
containing segments 1 through 4.

192
00:06:29,356 --> 0:06:31,096
What happens after that?

193
00:06:31,096 --> 0:06:32,766
When client 2 comes in and wants

194
00:06:32,766 --> 0:06:34,216
to find out again, "OK, what's

195
00:06:34,216 --> 0:06:35,236
the latest content?"

196
00:06:36,016 --> 0:06:37,496
Well, the playlist he's going to

197
00:06:37,496 --> 0:06:39,176
get back from that edge is the

198
00:06:39,176 --> 0:06:41,786
cached playlist that has only

199
00:06:41,786 --> 0:06:42,776
segments 1 through 3.

200
00:06:42,776 --> 0:06:45,756
He can't even discover segment 4

201
00:06:46,036 --> 0:06:48,596
because the CDN has served him a

202
00:06:48,596 --> 0:06:50,226
cached version of that playlist.

203
00:06:51,576 --> 0:06:54,246
Now, why does the CDN do that?

204
00:06:54,246 --> 0:06:57,066
Why it can just serve at the

205
00:06:57,066 --> 0:06:58,206
most recent version?

206
00:06:58,946 --> 0:07:00,906
Well, the problem is that the

207
00:06:58,946 --> 0:07:00,906
Well, the problem is that the

208
00:07:01,036 --> 0:07:03,606
CDN has no way of learning that

209
00:07:03,606 --> 0:07:04,946
that playlist has been updated

210
00:07:04,946 --> 0:07:05,646
on the origin.

211
00:07:06,506 --> 0:07:08,306
And if it were to go in and

212
00:07:08,306 --> 0:07:10,046
check with the origin, every

213
00:07:10,046 --> 0:07:12,276
time, some random client came in

214
00:07:12,276 --> 0:07:13,086
and said, "Hey, what's the

215
00:07:13,086 --> 0:07:13,906
latest playlist?"

216
00:07:14,156 --> 0:07:15,686
It would melt down the origin.

217
00:07:16,576 --> 0:07:18,956
So CDNs have to cache for a

218
00:07:18,956 --> 0:07:19,686
period of time.

219
00:07:19,686 --> 0:07:20,776
It's called the time to live.

220
00:07:21,946 --> 0:07:24,396
And the longer that time to live

221
00:07:24,396 --> 0:07:26,916
is, the longer client is

222
00:07:26,916 --> 0:07:27,476
checking in.

223
00:07:27,476 --> 0:07:28,866
We'll see that outdated version

224
00:07:28,866 --> 0:07:30,176
of the playlist and that

225
00:07:30,216 --> 0:07:32,336
stretches our delay from live by

226
00:07:32,336 --> 0:07:33,096
that much more.

227
00:07:34,806 --> 0:07:38,836
So, all these problems can be

228
00:07:38,836 --> 0:07:39,386
fixed.

229
00:07:40,766 --> 0:07:43,256
But in deciding how we want to

230
00:07:43,256 --> 0:07:45,926
approach that fix, there are a

231
00:07:45,986 --> 0:07:47,976
few more factors that we need to

232
00:07:47,976 --> 0:07:48,486
consider.

233
00:07:49,766 --> 0:07:53,336
The first is that HTTP is still

234
00:07:53,596 --> 0:07:55,986
the best way to deliver the same

235
00:07:55,986 --> 0:07:58,826
media to hundreds of thousands

236
00:07:58,826 --> 0:08:01,256
people over the internet at the

237
00:07:58,826 --> 0:08:01,256
people over the internet at the

238
00:08:01,256 --> 0:08:02,006
same time.

239
00:08:02,476 --> 0:08:04,156
So we should stick with HTTP.

240
00:08:04,786 --> 0:08:08,256
But doing that means that we are

241
00:08:08,256 --> 0:08:10,566
stuck with the HTTP delivery

242
00:08:10,566 --> 0:08:10,926
model.

243
00:08:11,266 --> 0:08:14,086
And that is of distributing

244
00:08:14,086 --> 0:08:15,796
discrete segments, discrete

245
00:08:16,096 --> 0:08:18,746
chunks of resources to clients.

246
00:08:19,236 --> 0:08:21,596
And if it's going to take us six

247
00:08:21,596 --> 0:08:23,206
seconds to produce that chunk,

248
00:08:23,846 --> 0:08:25,016
then we've already missed our

249
00:08:25,016 --> 0:08:25,686
deadlines.

250
00:08:26,306 --> 0:08:27,276
If we're going to hit that

251
00:08:27,276 --> 0:08:29,356
deadline of only a second away

252
00:08:29,356 --> 0:08:32,155
from live, then the things we're

253
00:08:32,155 --> 0:08:33,816
distributing over HTTP have to

254
00:08:33,816 --> 0:08:36,336
shrink to become in some cases

255
00:08:36,566 --> 0:08:37,216
much shorter.

256
00:08:38,176 --> 0:08:40,046
The next thing we have to sort

257
00:08:40,046 --> 0:08:42,446
of grapple with is that now and

258
00:08:42,446 --> 0:08:44,996
for the foreseeable future CDNs

259
00:08:45,146 --> 0:08:47,156
are essential to helping us

260
00:08:47,156 --> 0:08:49,716
scale to global sized audiences.

261
00:08:50,706 --> 0:08:53,526
But CDNs, at the end of the day,

262
00:08:53,886 --> 0:08:55,786
are essentially HTTP proxy

263
00:08:55,786 --> 0:08:57,316
caches and they're going to do

264
00:08:57,316 --> 0:08:58,156
what caches do.

265
00:08:58,786 --> 0:09:00,256
And we have to work with that

266
00:08:58,786 --> 0:09:00,256
And we have to work with that

267
00:09:00,796 --> 0:09:02,426
not against it.

268
00:09:02,916 --> 0:09:06,046
The final thing is that when

269
00:09:06,346 --> 0:09:07,806
we're playing so close to the

270
00:09:07,806 --> 0:09:09,656
live edge, we can only buffer a

271
00:09:09,656 --> 0:09:10,906
tiny little amount ahead because

272
00:09:10,906 --> 0:09:11,776
that's all we've got.

273
00:09:12,766 --> 0:09:14,776
And so, if we have to do

274
00:09:14,776 --> 0:09:16,706
something like switch to a

275
00:09:16,706 --> 0:09:18,606
different bit rate, then we've

276
00:09:18,606 --> 0:09:20,556
only got like we don't have 10

277
00:09:20,556 --> 0:09:21,896
seconds to do that before we

278
00:09:21,896 --> 0:09:22,396
stall.

279
00:09:22,766 --> 0:09:24,806
We might only have less than a

280
00:09:24,806 --> 0:09:25,296
second.

281
00:09:25,706 --> 0:09:27,086
And so, we have to make sure

282
00:09:27,376 --> 0:09:29,356
that the mechanics of switching

283
00:09:29,356 --> 0:09:30,916
are as efficient as they can be

284
00:09:31,206 --> 0:09:32,306
because we have this very short

285
00:09:32,306 --> 0:09:32,576
runway.

286
00:09:33,866 --> 0:09:39,256
So, we looked at the entire HLS

287
00:09:39,696 --> 0:09:42,466
delivery model, soup to nuts.

288
00:09:43,056 --> 0:09:46,236
And we identified five big

289
00:09:46,546 --> 0:09:49,086
changes that we needed to make

290
00:09:49,406 --> 0:09:52,206
to hit this target of one to two

291
00:09:52,206 --> 0:09:54,006
seconds of delay from live.

292
00:09:55,086 --> 0:09:56,206
The first thing we're going to

293
00:09:56,206 --> 0:09:59,436
talk about is that we need a way

294
00:09:59,686 --> 0:10:02,596
to get that media on to the

295
00:09:59,686 --> 0:10:02,596
to get that media on to the

296
00:10:02,596 --> 0:10:05,936
server shorter than that six

297
00:10:06,456 --> 0:10:08,456
seconds.

298
00:10:10,076 --> 0:10:11,016
And we call that reducing

299
00:10:11,016 --> 0:10:11,536
publishing latency.

300
00:10:11,536 --> 0:10:12,946
So the way we're going to do it,

301
00:10:12,946 --> 0:10:13,826
is we're going to allow the

302
00:10:13,826 --> 0:10:15,366
server to publish small parts of

303
00:10:15,366 --> 0:10:17,236
the main segment before the main

304
00:10:17,236 --> 0:10:18,356
segment itself is ready.

305
00:10:18,956 --> 0:10:20,426
So we can deliver those smaller

306
00:10:20,426 --> 0:10:21,206
parts early.

307
00:10:22,136 --> 0:10:24,266
The second thing we're doing is

308
00:10:24,326 --> 0:10:26,876
we're optimizing how clients

309
00:10:26,906 --> 0:10:28,856
discover segments, so that they

310
00:10:28,856 --> 0:10:29,876
can do it more quickly.

311
00:10:30,056 --> 0:10:32,096
And the way we're doing that is

312
00:10:32,096 --> 0:10:35,006
we're changing how the client

313
00:10:35,136 --> 0:10:36,386
updates its playlist.

314
00:10:37,236 --> 0:10:38,876
We're allowing it to ask for a

315
00:10:38,876 --> 0:10:40,896
particular playlist update in

316
00:10:40,896 --> 0:10:42,516
advance before it's actually

317
00:10:42,516 --> 0:10:43,336
ready on the server.

318
00:10:43,996 --> 0:10:45,896
The server will then hold on to

319
00:10:45,896 --> 0:10:47,376
that request keeping an eye on

320
00:10:47,376 --> 0:10:49,466
the playlist until it updates

321
00:10:49,706 --> 0:10:50,686
with that next segment.

322
00:10:50,906 --> 0:10:52,536
At that point, you will

323
00:10:52,536 --> 0:10:53,906
immediately send the playlist

324
00:10:54,326 --> 0:10:55,756
back to the client.

325
00:10:57,066 --> 0:10:58,376
The client will find out about

326
00:10:58,376 --> 0:11:01,016
it in less than round trip time.

327
00:10:58,376 --> 0:11:01,016
it in less than round trip time.

328
00:11:01,756 --> 0:11:04,086
And in this model, each

329
00:11:04,086 --> 0:11:05,696
individual playlist update

330
00:11:05,936 --> 0:11:07,466
actually has a different URL.

331
00:11:08,376 --> 0:11:09,966
And this provides a second

332
00:11:09,966 --> 0:11:13,536
advantage, which is that it

333
00:11:13,536 --> 0:11:15,456
makes caching of these playlist

334
00:11:15,456 --> 0:11:16,856
updates much more efficient

335
00:11:17,576 --> 0:11:19,476
because with a different URL for

336
00:11:19,476 --> 0:11:21,556
every update, every update looks

337
00:11:21,556 --> 0:11:23,586
like a separate cache entity.

338
00:11:24,426 --> 0:11:26,756
So what happens now is when

339
00:11:26,756 --> 0:11:28,386
client 1 wants a particular

340
00:11:28,386 --> 0:11:28,796
update.

341
00:11:29,146 --> 0:11:30,436
It'll ask for it.

342
00:11:30,476 --> 0:11:31,626
The CDN says, "I've never heard

343
00:11:31,626 --> 0:11:31,936
of that."

344
00:11:31,936 --> 0:11:32,926
I'm going to go right over the

345
00:11:32,926 --> 0:11:34,456
origin, the origin is going to

346
00:11:34,456 --> 0:11:35,096
say, "Well, that's because I

347
00:11:35,096 --> 0:11:35,826
haven't built it yet."

348
00:11:36,136 --> 0:11:37,246
So now, it chugs away.

349
00:11:37,576 --> 0:11:39,476
Once it has it update, it hands

350
00:11:39,476 --> 0:11:40,526
it to the CDN which hands it

351
00:11:40,526 --> 0:11:41,336
right to the client.

352
00:11:42,306 --> 0:11:44,116
Next client comes in, he says,

353
00:11:44,116 --> 0:11:45,096
"I want the same update."

354
00:11:45,706 --> 0:11:47,096
The CDN identifies that

355
00:11:47,166 --> 0:11:49,076
positively using the URL and

356
00:11:49,076 --> 0:11:49,736
says, "Here you go."

357
00:11:49,916 --> 0:11:51,656
Every subsequent client who

358
00:11:51,656 --> 0:11:53,876
asked for that update will get

359
00:11:53,876 --> 0:11:55,356
it served immediately out of the

360
00:11:55,356 --> 0:11:56,266
CDN cache.

361
00:11:56,946 --> 0:11:59,976
But the next time, the first

362
00:11:59,976 --> 0:12:01,576
client or any other client wants

363
00:11:59,976 --> 0:12:01,576
client or any other client wants

364
00:12:01,576 --> 0:12:04,596
the update after that, the URL

365
00:12:04,596 --> 0:12:06,306
that sends the CDN is a

366
00:12:06,306 --> 0:12:07,106
different one.

367
00:12:07,586 --> 0:12:09,326
And so, this the CDN immediately

368
00:12:09,326 --> 0:12:10,846
knows he doesn't have it cache.

369
00:12:10,846 --> 0:12:11,906
He doesn't hand out something

370
00:12:11,906 --> 0:12:12,396
stale.

371
00:12:12,726 --> 0:12:14,016
Instead, he goes right back to

372
00:12:14,016 --> 0:12:14,416
the origin.

373
00:12:14,416 --> 0:12:15,086
The origin says, "Well, I

374
00:12:15,086 --> 0:12:16,376
haven't built that yet."

375
00:12:16,376 --> 0:12:19,106
And then, once it is built, it

376
00:12:19,106 --> 0:12:21,036
hands it back to the CDN and is

377
00:12:21,036 --> 0:12:23,666
sent over to client.

378
00:12:25,376 --> 0:12:29,876
So, these new playlist update

379
00:12:29,876 --> 0:12:32,686
requests are inherently cache

380
00:12:32,756 --> 0:12:33,276
busting.

381
00:12:33,746 --> 0:12:35,156
And that makes caching work

382
00:12:35,206 --> 0:12:37,416
better overall on the CDN.

383
00:12:38,896 --> 0:12:40,936
Now, the third thing we're doing

384
00:12:41,696 --> 0:12:44,656
is we're eliminating that extra

385
00:12:44,656 --> 0:12:45,246
round trip.

386
00:12:45,566 --> 0:12:46,976
After you discover a segment to

387
00:12:46,976 --> 0:12:47,926
go off and actually get the

388
00:12:47,926 --> 0:12:48,776
segment itself.

389
00:12:49,486 --> 0:12:50,816
And the way we're doing that is

390
00:12:50,816 --> 0:12:51,576
to use Push.

391
00:12:52,446 --> 0:12:54,416
So, when the client asks for the

392
00:12:54,416 --> 0:12:56,786
next playlist update, it's going

393
00:12:56,786 --> 0:12:57,656
to tell the server.

394
00:12:57,886 --> 0:13:00,296
And by the way, when you get

395
00:12:57,886 --> 0:13:00,296
And by the way, when you get

396
00:13:00,296 --> 0:13:01,566
that playlist update that has

397
00:13:01,566 --> 0:13:02,536
the next segment that I don't

398
00:13:02,536 --> 0:13:05,106
know about then I want you to--

399
00:13:05,346 --> 0:13:06,406
when you return me that

400
00:13:06,466 --> 0:13:07,896
playlist, I want you to Push

401
00:13:07,896 --> 0:13:09,056
that segment to me right away.

402
00:13:09,056 --> 0:13:11,056
And that way, I don't have to

403
00:13:11,296 --> 0:13:12,466
turn around and make a second

404
00:13:12,466 --> 0:13:13,506
round trip.

405
00:13:14,956 --> 0:13:17,566
The fourth thing we're doing is

406
00:13:17,566 --> 0:13:20,016
we are addressing the cost of

407
00:13:20,016 --> 0:13:21,986
transferring playlists, over and

408
00:13:21,986 --> 0:13:22,576
over again.

409
00:13:23,026 --> 0:13:24,196
And the basic approach we're

410
00:13:24,196 --> 0:13:26,366
taking is using Delta updates.

411
00:13:26,986 --> 0:13:29,106
So the way that works is the

412
00:13:29,106 --> 0:13:30,876
first time a client asks for a

413
00:13:30,876 --> 0:13:32,596
particular media playlist, it

414
00:13:32,596 --> 0:13:33,586
gets the whole thing back.

415
00:13:34,296 --> 0:13:36,706
After that though, it has the

416
00:13:36,706 --> 0:13:38,076
vast majority of the playlist.

417
00:13:38,306 --> 0:13:40,256
It's only really interested in

418
00:13:40,256 --> 0:13:42,006
knowing about the part of the

419
00:13:42,006 --> 0:13:43,356
end that's changed.

420
00:13:43,806 --> 0:13:47,266
And so, after that, the next

421
00:13:47,266 --> 0:13:48,416
time and it asked one it says,

422
00:13:48,736 --> 0:13:49,976
"I want a playlist update that's

423
00:13:49,976 --> 0:13:50,796
a Delta update."

424
00:13:51,246 --> 0:13:53,356
And the thing that comes back is

425
00:13:53,356 --> 0:13:54,856
a much smaller chunk of data

426
00:13:55,226 --> 0:13:56,986
that only contains the stuff

427
00:13:57,266 --> 0:13:58,516
that has changed most recently

428
00:13:58,516 --> 0:13:59,776
at the live digital playlist.

429
00:13:59,776 --> 0:14:01,576
And these updates will often fit

430
00:13:59,776 --> 0:14:01,576
And these updates will often fit

431
00:14:01,626 --> 0:14:03,506
into a single packet, a single

432
00:14:03,506 --> 0:14:04,316
empty unit of data.

433
00:14:04,586 --> 0:14:05,866
So they're much, much more

434
00:14:05,866 --> 0:14:07,496
efficient for every subsequent

435
00:14:07,496 --> 0:14:07,806
update.

436
00:14:08,366 --> 0:14:12,336
Now, the fifth change is that

437
00:14:12,576 --> 0:14:13,916
since we now know that these

438
00:14:13,916 --> 0:14:15,556
playlist updates are pretty up

439
00:14:15,556 --> 0:14:17,486
to date, we can have them carry

440
00:14:17,486 --> 0:14:19,736
some information with them that

441
00:14:19,736 --> 0:14:21,366
helps us switch to other bit

442
00:14:21,366 --> 0:14:22,456
rate tiers faster.

443
00:14:23,746 --> 0:14:25,096
So in other words, imagine we

444
00:14:25,096 --> 0:14:26,506
have to bit rates on our CDN

445
00:14:26,506 --> 0:14:28,406
here, and the clients playing

446
00:14:28,406 --> 0:14:29,036
the first one.

447
00:14:30,266 --> 0:14:32,676
When it asks for an update and

448
00:14:32,676 --> 0:14:34,546
it receives that most recent

449
00:14:34,546 --> 0:14:36,426
version of the one megabit

450
00:14:36,426 --> 0:14:38,296
playlist, it can carry other

451
00:14:38,296 --> 0:14:40,556
information such that if it

452
00:14:40,556 --> 0:14:41,966
decides it needs to switch the

453
00:14:41,966 --> 0:14:43,716
two megabit one, it can go

454
00:14:43,716 --> 0:14:45,226
directly to the most recent

455
00:14:45,226 --> 0:14:46,736
version of the two megabit

456
00:14:46,736 --> 0:14:47,206
playlist.

457
00:14:47,466 --> 0:14:49,056
And this may make switching bit

458
00:14:49,056 --> 0:14:50,376
rates more efficient.

459
00:14:51,556 --> 0:14:56,196
So five changes, we're reducing

460
00:14:56,196 --> 0:14:57,446
the publishing latency, putting

461
00:14:57,446 --> 0:14:59,686
our media on the CDN, optimizing

462
00:14:59,686 --> 0:15:01,456
segment discovery, we're

463
00:14:59,686 --> 0:15:01,456
segment discovery, we're

464
00:15:01,456 --> 0:15:03,516
eliminating round trips, we're

465
00:15:03,516 --> 0:15:04,746
reducing the overhead of

466
00:15:04,746 --> 0:15:07,066
transferring playlist, and we're

467
00:15:07,066 --> 0:15:08,246
making it possible switch to

468
00:15:08,246 --> 0:15:08,886
yours quickly.

469
00:15:09,646 --> 0:15:10,816
Now, let's take a look into the

470
00:15:10,816 --> 0:15:14,166
details of all of those.

471
00:15:14,796 --> 0:15:16,936
So, to make all of the stuff

472
00:15:16,936 --> 0:15:21,106
work, the client needs a way to

473
00:15:21,106 --> 0:15:23,836
tell the server that it wants to

474
00:15:23,836 --> 0:15:25,296
make use of these new features

475
00:15:25,296 --> 0:15:27,186
like playlists Delta updates or

476
00:15:27,186 --> 0:15:28,316
blocking playlist reload.

477
00:15:28,896 --> 0:15:32,666
And the way it does that is

478
00:15:32,666 --> 0:15:34,986
using something we call the HLS

479
00:15:35,046 --> 0:15:36,816
Origin API.

480
00:15:37,756 --> 0:15:39,356
The way that works is that the

481
00:15:39,356 --> 0:15:40,556
services themselves are

482
00:15:40,556 --> 0:15:42,596
advertised by the server using a

483
00:15:42,596 --> 0:15:44,386
new tag, the server control tag.

484
00:15:45,346 --> 0:15:46,876
When the client discovers that

485
00:15:46,876 --> 0:15:48,616
they're available, it makes use

486
00:15:48,616 --> 0:15:50,566
of them by sending the server a

487
00:15:50,566 --> 0:15:52,566
small number of directives that

488
00:15:52,566 --> 0:15:55,036
are carried as query parameters

489
00:15:55,226 --> 0:15:56,576
in the get request for the

490
00:15:56,576 --> 0:15:57,296
playlist.

491
00:15:58,266 --> 0:15:59,636
So it looks something like this.

492
00:16:00,886 --> 0:16:05,246
Now, this is the first time that

493
00:16:05,246 --> 0:16:06,836
we've specified query parameters

494
00:16:06,836 --> 0:16:08,236
as part of the HLS.

495
00:16:08,996 --> 0:16:11,786
And so, we are going forward

496
00:16:11,786 --> 0:16:14,076
reserving all query parameters

497
00:16:14,076 --> 0:16:15,916
that start with underscore HLS

498
00:16:16,206 --> 0:16:18,666
on playlist URLs for the use of

499
00:16:18,666 --> 0:16:19,246
the protocol.

500
00:16:20,256 --> 0:16:21,996
Another thing we're doing is

501
00:16:21,996 --> 0:16:23,726
we're making sure that for all

502
00:16:23,726 --> 0:16:26,196
the clients that those query

503
00:16:26,196 --> 0:16:27,266
parameters appear in a

504
00:16:27,266 --> 0:16:29,306
deterministic order in the URL

505
00:16:29,766 --> 0:16:31,766
so that the CDNs don't end up

506
00:16:31,806 --> 0:16:33,836
caching multiple copies of what

507
00:16:33,836 --> 0:16:35,366
are effectively the same

508
00:16:35,366 --> 0:16:35,936
request.

509
00:16:36,856 --> 0:16:39,686
So, now let's go through each of

510
00:16:39,686 --> 0:16:41,676
those five changes a little bit

511
00:16:41,676 --> 0:16:42,566
more detail.

512
00:16:44,116 --> 0:16:46,396
The first is to address this

513
00:16:46,396 --> 0:16:47,896
notion-- is to address the

514
00:16:47,896 --> 0:16:49,426
reduction of publishing latency.

515
00:16:49,426 --> 0:16:50,816
And so, we're introducing a

516
00:16:50,816 --> 0:16:53,786
notion of a partial segment to

517
00:16:53,836 --> 0:16:54,366
HLS.

518
00:16:54,666 --> 0:16:56,216
And we call these things Parts

519
00:16:56,216 --> 0:16:56,636
for short.

520
00:16:57,916 --> 0:16:59,816
So, a partial segment is

521
00:16:59,816 --> 0:17:01,346
essentially just a subset of the

522
00:16:59,816 --> 0:17:01,346
essentially just a subset of the

523
00:17:01,346 --> 0:17:03,456
regular segment containing a

524
00:17:03,456 --> 0:17:05,616
subset of the media within that

525
00:17:05,886 --> 0:17:06,675
parent segment.

526
00:17:07,866 --> 0:17:11,486
And CMAF already has a name for

527
00:17:11,486 --> 0:17:12,736
this kind of thing.

528
00:17:12,736 --> 0:17:14,516
They call them a CMAF chunk for

529
00:17:14,665 --> 0:17:15,675
FMP4 content.

530
00:17:16,086 --> 0:17:18,445
And so, you can use CMAF chunks

531
00:17:18,445 --> 0:17:20,396
as your partial segments in HLS.

532
00:17:20,796 --> 0:17:22,715
You can also use little bits of

533
00:17:22,715 --> 0:17:24,826
transport stream or any other of

534
00:17:24,876 --> 0:17:27,066
the defined HLS segment formats

535
00:17:27,286 --> 0:17:28,486
for your partial segments.

536
00:17:30,276 --> 0:17:31,786
The main thing about them is

537
00:17:31,786 --> 0:17:32,526
that they're short.

538
00:17:33,106 --> 0:17:34,596
They can be less than a full GOP

539
00:17:34,596 --> 0:17:35,116
for instance.

540
00:17:35,116 --> 0:17:36,856
So that means you can have half

541
00:17:36,856 --> 0:17:38,536
second partial segments and

542
00:17:38,536 --> 0:17:40,306
still keep your two-second GOPs.

543
00:17:42,816 --> 0:17:44,266
Every time you create a new

544
00:17:44,266 --> 0:17:46,176
partial segment, it is added to

545
00:17:46,176 --> 0:17:46,786
the playlist.

546
00:17:47,286 --> 0:17:48,926
And that means that if you've

547
00:17:48,926 --> 0:17:50,586
got half second partial segments

548
00:17:50,586 --> 0:17:52,976
for example, then you can

549
00:17:52,976 --> 0:17:55,586
publish content to your CDN

550
00:17:56,186 --> 0:17:57,796
about half a second after it

551
00:17:57,796 --> 0:17:59,036
hits your production backend.

552
00:17:59,276 --> 0:18:00,716
That's how far it reduces your

553
00:17:59,276 --> 0:18:00,716
That's how far it reduces your

554
00:18:00,716 --> 0:18:01,676
publishing latency.

555
00:18:03,796 --> 0:18:05,306
Partial segments are added to

556
00:18:05,306 --> 0:18:07,586
the playlist in parallel to the

557
00:18:07,586 --> 0:18:10,696
regular segments stream but they

558
00:18:10,696 --> 0:18:12,016
don't stay there for very long.

559
00:18:12,636 --> 0:18:15,616
And that's because partial

560
00:18:15,616 --> 0:18:18,576
segments are primarily useful

561
00:18:19,006 --> 0:18:20,266
when you're playing at the live

562
00:18:20,266 --> 0:18:20,666
edge.

563
00:18:20,726 --> 0:18:22,496
They allow clients to discover

564
00:18:22,496 --> 0:18:23,986
media just as soon as it

565
00:18:23,986 --> 0:18:24,836
arrives.

566
00:18:25,416 --> 0:18:27,526
And they fine-grained

567
00:18:27,526 --> 0:18:29,756
addressability of those partial

568
00:18:29,756 --> 0:18:31,736
segments allows clients who are

569
00:18:31,736 --> 0:18:33,616
joining those streams to join

570
00:18:33,616 --> 0:18:35,346
them closer to live and perhaps

571
00:18:35,396 --> 0:18:36,976
the largest segment boundary.

572
00:18:37,856 --> 0:18:41,076
But after the partial segments

573
00:18:41,076 --> 0:18:42,556
drift further away from the live

574
00:18:42,556 --> 0:18:44,036
edge and their parent segments

575
00:18:44,036 --> 0:18:44,916
are well established in the

576
00:18:44,916 --> 0:18:46,426
playlist, the clients are

577
00:18:46,426 --> 0:18:48,366
actually better off loading the

578
00:18:48,366 --> 0:18:49,656
parent segments than the partial

579
00:18:49,656 --> 0:18:50,126
segments.

580
00:18:50,126 --> 0:18:51,856
And so the partial segments are

581
00:18:51,856 --> 0:18:53,036
removed from the playlist.

582
00:18:53,406 --> 0:18:55,176
And this helps keep our playlist

583
00:18:55,456 --> 0:18:55,936
compact.

584
00:18:57,026 --> 0:18:59,846
So, the way it works is, as you

585
00:18:59,846 --> 0:19:01,166
produce your segment, you're

586
00:18:59,846 --> 0:19:01,166
produce your segment, you're

587
00:19:01,166 --> 0:19:02,456
producing partial segments in

588
00:19:02,456 --> 0:19:02,976
parallel.

589
00:19:03,576 --> 0:19:05,176
After a while, as those partial

590
00:19:05,176 --> 0:19:07,126
segments become further or far

591
00:19:07,126 --> 0:19:08,346
enough away from the live edge,

592
00:19:08,636 --> 0:19:10,046
they are removed and they're

593
00:19:10,046 --> 0:19:11,726
replaced by new partial segments

594
00:19:12,016 --> 0:19:12,886
at the live edge.

595
00:19:13,526 --> 0:19:14,516
Let's take a look at how that

596
00:19:14,516 --> 0:19:16,246
looks in an actual HLS playlist.

597
00:19:16,246 --> 0:19:19,636
So, I got a couple things up

598
00:19:19,636 --> 0:19:20,076
here.

599
00:19:20,436 --> 0:19:22,306
The first thing I want you to

600
00:19:22,306 --> 0:19:24,606
notice is that just like regular

601
00:19:24,606 --> 0:19:26,036
playlists have a target duration

602
00:19:26,036 --> 0:19:27,766
which says this is how long our

603
00:19:27,766 --> 0:19:28,656
segment can be.

604
00:19:29,556 --> 0:19:30,696
Parts have the same kind of

605
00:19:30,696 --> 0:19:31,996
thing it's called a part target

606
00:19:31,996 --> 0:19:32,526
duration.

607
00:19:32,786 --> 0:19:34,146
And so this is saying to you

608
00:19:34,146 --> 0:19:35,586
that the Parts in this playlist,

609
00:19:35,586 --> 0:19:36,646
the partial segments have a

610
00:19:36,646 --> 0:19:38,486
maximum duration of five, of

611
00:19:38,586 --> 0:19:39,316
half second.

612
00:19:39,446 --> 0:19:40,836
The next thing though is we have

613
00:19:40,836 --> 0:19:41,786
a regular segment here.

614
00:19:41,786 --> 0:19:43,496
It's a 6-second segment43.

615
00:19:44,796 --> 0:19:46,646
Half a second after we put

616
00:19:46,646 --> 0:19:48,776
segment43 into the playlist, we

617
00:19:48,776 --> 0:19:50,506
can put-- we can add the first

618
00:19:50,506 --> 0:19:52,916
part of segment44.

619
00:19:53,226 --> 0:19:55,376
And we do this using a new tag

620
00:19:55,376 --> 0:19:56,416
called the part tag.

621
00:19:57,096 --> 0:19:59,026
And so, what you can see is that

622
00:19:59,236 --> 0:20:00,936
each part tag has URI.

623
00:19:59,236 --> 0:20:00,936
each part tag has URI.

624
00:20:01,506 --> 0:20:02,856
So the segment get-- the Partial

625
00:20:02,856 --> 0:20:04,136
Segment has its own URI

626
00:20:04,646 --> 0:20:07,776
segment44.1 is half a second

627
00:20:07,776 --> 0:20:08,166
long.

628
00:20:08,556 --> 0:20:09,966
And it's independent, which

629
00:20:09,966 --> 0:20:11,096
means it has own URI.

630
00:20:12,296 --> 0:20:14,376
Half a second after that, we can

631
00:20:14,376 --> 0:20:16,176
add the next partial segment of

632
00:20:16,176 --> 0:20:18,386
segment44 to the playlist and so

633
00:20:18,386 --> 0:20:19,136
on and so forth.

634
00:20:19,136 --> 0:20:20,436
This is a 6-second playlist.

635
00:20:20,436 --> 0:20:21,776
So there's going to be 12 parts.

636
00:20:22,456 --> 0:20:25,086
Once we get to the final part of

637
00:20:25,086 --> 0:20:27,576
segment44, we actually have the

638
00:20:27,576 --> 0:20:29,686
entire parents segment as well.

639
00:20:30,006 --> 0:20:32,116
And so, we can publish the final

640
00:20:32,116 --> 0:20:34,276
part of segment44 and the

641
00:20:34,276 --> 0:20:35,596
parents segment at the same

642
00:20:35,596 --> 0:20:35,986
time.

643
00:20:36,296 --> 0:20:37,506
And so, then half a second after

644
00:20:37,506 --> 0:20:39,046
that sort of the cycle repeats

645
00:20:39,306 --> 0:20:41,106
and we get segment45.

646
00:20:41,806 --> 0:20:44,886
And then, after a while, those

647
00:20:44,946 --> 0:20:46,396
partial segments in the middle

648
00:20:46,586 --> 0:20:47,856
are far enough away from the

649
00:20:47,856 --> 0:20:49,086
leading edge of the playlist

650
00:20:49,476 --> 0:20:50,706
that they can be removed.

651
00:20:51,036 --> 0:20:53,596
And now, we just have segment43,

652
00:20:53,596 --> 0:20:55,646
segment44 and then the parts of

653
00:20:55,646 --> 0:20:57,696
segment45 and beyond.

654
00:20:58,846 --> 0:21:00,086
So that's how we use partial

655
00:20:58,846 --> 0:21:00,086
So that's how we use partial

656
00:21:00,086 --> 0:21:01,226
segments to lower your

657
00:21:01,226 --> 0:21:02,186
publishing latency.

658
00:21:02,936 --> 0:21:05,126
Now, let's look at optimizing

659
00:21:05,126 --> 0:21:06,416
how we discover segments.

660
00:21:06,956 --> 0:21:10,466
And we do that using what we

661
00:21:10,466 --> 0:21:11,956
call blocking playlist reload.

662
00:21:12,396 --> 0:21:14,496
The way this works is the server

663
00:21:14,496 --> 0:21:16,436
advertises it has the ability to

664
00:21:16,436 --> 0:21:18,416
handle blocking playlist reload

665
00:21:18,806 --> 0:21:21,026
by putting a can block reload

666
00:21:21,026 --> 0:21:22,506
attribute into the server

667
00:21:22,506 --> 0:21:23,266
control tag.

668
00:21:24,306 --> 0:21:26,016
When the client sees this, it

669
00:21:26,016 --> 0:21:27,326
knows that it can ask for its

670
00:21:27,326 --> 0:21:29,516
next playlist update in advance

671
00:21:29,516 --> 0:21:30,626
of when it's actually ready.

672
00:21:30,666 --> 0:21:32,486
So we advertise the request cost

673
00:21:32,486 --> 0:21:32,826
that way.

674
00:21:33,426 --> 0:21:35,906
At that point, the server

675
00:21:35,906 --> 0:21:37,656
receives a request, realizes

676
00:21:37,656 --> 0:21:38,786
that it doesn't have a playlist

677
00:21:38,786 --> 0:21:40,516
update that's been requested yet

678
00:21:40,766 --> 0:21:42,246
and so it holds on to it until

679
00:21:43,176 --> 0:21:44,216
it does.

680
00:21:44,436 --> 0:21:47,016
So, how does the client specify

681
00:21:47,016 --> 0:21:49,566
to the server which updated

682
00:21:49,566 --> 0:21:51,736
wants, that it wants a

683
00:21:51,736 --> 0:21:53,116
particular playlist update with

684
00:21:53,116 --> 0:21:54,096
a particular segment in it.

685
00:21:54,896 --> 0:21:56,846
Well, it uses a feature of HLS

686
00:21:57,096 --> 0:21:58,086
called the media sequence

687
00:21:58,086 --> 0:21:58,366
number.

688
00:21:58,956 --> 0:22:02,056
Now, every segment in an HLS

689
00:21:58,956 --> 0:22:02,056
Now, every segment in an HLS

690
00:22:02,146 --> 0:22:04,086
playlist has a unique sequence

691
00:22:04,086 --> 0:22:04,396
number.

692
00:22:05,186 --> 0:22:06,586
The sequence number of the first

693
00:22:06,586 --> 0:22:08,336
segment of the playlist is the

694
00:22:08,336 --> 0:22:09,946
value of that media sequence

695
00:22:09,946 --> 0:22:10,226
tag.

696
00:22:10,226 --> 0:22:11,246
You see at the top there.

697
00:22:11,816 --> 0:22:13,426
So it's 1800 in this case.

698
00:22:14,426 --> 0:22:15,766
The media sequence number of the

699
00:22:15,766 --> 0:22:17,676
next segment is just that plus

700
00:22:17,676 --> 0:22:18,036
one.

701
00:22:18,786 --> 0:22:20,826
And that's true even if the next

702
00:22:20,826 --> 0:22:22,456
segment is separated from the

703
00:22:22,456 --> 0:22:24,716
others by a discontinuity tag or

704
00:22:24,716 --> 0:22:26,366
a key rotation or anything else.

705
00:22:26,676 --> 0:22:27,826
Sequence numbers just keep

706
00:22:27,826 --> 0:22:28,636
counting forward.

707
00:22:29,856 --> 0:22:32,316
And that means that if we have

708
00:22:32,316 --> 0:22:33,386
this playlist.

709
00:22:33,846 --> 0:22:37,386
Then, we know the next time it's

710
00:22:37,386 --> 0:22:39,336
updated, what the sequence

711
00:22:39,336 --> 0:22:40,986
number of that next segments

712
00:22:40,986 --> 0:22:41,666
going to be.

713
00:22:42,826 --> 0:22:44,796
So, to get the next update that

714
00:22:44,796 --> 0:22:47,856
contains the segment, you know,

715
00:22:47,856 --> 0:22:49,766
the next segment of interest, we

716
00:22:49,766 --> 0:22:51,016
can tell the server, "Hey,

717
00:22:51,506 --> 0:22:53,316
please, go get me a playlist

718
00:22:53,316 --> 0:22:54,676
update and I want the one that

719
00:22:54,676 --> 0:22:56,736
contains media sequence number

720
00:22:56,976 --> 0:22:58,006
1803."

721
00:22:58,776 --> 0:23:00,536
So this is how that looks.

722
00:22:58,776 --> 0:23:00,536
So this is how that looks.

723
00:23:00,836 --> 0:23:03,746
So we've got a get request here

724
00:23:03,746 --> 0:23:04,606
for a playlist.

725
00:23:04,606 --> 0:23:05,946
You can see it's requesting live

726
00:23:05,946 --> 0:23:06,576
on m3U8.

727
00:23:06,576 --> 0:23:08,796
And we have a query parameter

728
00:23:09,176 --> 0:23:11,006
underscore HLS underscore

729
00:23:11,086 --> 0:23:12,956
msn=1803.

730
00:23:12,956 --> 0:23:14,106
That's how the client tells the

731
00:23:14,106 --> 0:23:16,156
server, I want this particular

732
00:23:16,156 --> 0:23:17,346
playlist update, the one that

733
00:23:17,346 --> 0:23:18,656
contains this media sequence

734
00:23:18,656 --> 0:23:18,906
number.

735
00:23:19,296 --> 0:23:21,436
After it receives it, as soon as

736
00:23:21,436 --> 0:23:22,626
it receives it, it'll

737
00:23:22,626 --> 0:23:24,186
immediately send the next update

738
00:23:24,186 --> 0:23:25,606
request for 1804.

739
00:23:26,426 --> 0:23:28,536
And those to a CDN look like

740
00:23:28,536 --> 0:23:30,206
completely different URLs even

741
00:23:30,206 --> 0:23:31,636
though only one query parameter

742
00:23:31,636 --> 0:23:33,516
is different by one value to a

743
00:23:33,516 --> 0:23:35,586
CDN, it's a completely different

744
00:23:35,586 --> 0:23:36,456
cache entity.

745
00:23:36,886 --> 0:23:39,186
And so, that gives us our cache

746
00:23:39,716 --> 0:23:39,936
busting.

747
00:23:40,036 --> 0:23:41,906
Now, this works with partial

748
00:23:41,906 --> 0:23:42,766
segments as well.

749
00:23:43,276 --> 0:23:44,906
And this is how it looks in this

750
00:23:44,906 --> 0:23:45,376
case.

751
00:23:45,726 --> 0:23:47,876
So we have a second example and

752
00:23:47,876 --> 0:23:50,266
the second example says that, "I

753
00:23:50,266 --> 0:23:52,036
want the playlist update that

754
00:23:52,036 --> 0:23:55,046
contains the first part of the

755
00:23:55,046 --> 0:23:57,476
media sequence number 1803.

756
00:23:58,106 --> 0:24:00,486
Now, there's one more thing

757
00:23:58,106 --> 0:24:00,486
Now, there's one more thing

758
00:24:00,486 --> 0:24:02,466
going on here and that's this

759
00:24:02,676 --> 0:24:03,916
Push query parameter.

760
00:24:04,086 --> 0:24:05,506
What's that about?

761
00:24:05,896 --> 0:24:08,556
Well, remember that another

762
00:24:08,556 --> 0:24:12,006
thing we want to do is eliminate

763
00:24:12,036 --> 0:24:13,736
these extra round trip times for

764
00:24:13,736 --> 0:24:14,336
segments.

765
00:24:14,816 --> 0:24:16,756
And so to do that, we're making

766
00:24:16,756 --> 0:24:17,546
use of Push.

767
00:24:18,336 --> 0:24:20,366
And to do that, we're using

768
00:24:20,366 --> 0:24:20,926
HTTP/2.

769
00:24:22,786 --> 0:24:24,736
Now, some of you may not be

770
00:24:25,036 --> 0:24:26,986
intimately familiar with HTTP/2.

771
00:24:26,986 --> 0:24:28,056
So let me give you a quick

772
00:24:28,056 --> 0:24:28,576
refresher.

773
00:24:30,006 --> 0:24:32,446
HTTP/2 is a successor to our old

774
00:24:32,446 --> 0:24:33,556
buddy HTTP/1.

775
00:24:33,646 --> 0:24:35,936
And it was standardized by the

776
00:24:35,936 --> 0:24:37,686
IATF about four years ago.

777
00:24:38,396 --> 0:24:40,296
Since then, it has been widely

778
00:24:40,296 --> 0:24:42,326
adopted by web servers, clients

779
00:24:42,326 --> 0:24:43,236
and CDNs.

780
00:24:43,776 --> 0:24:47,316
It is required for Low-Latency

781
00:24:47,316 --> 0:24:49,576
HLS because it gives us several

782
00:24:49,576 --> 0:24:51,746
features that allow us to crank

783
00:24:51,966 --> 0:24:53,626
up the efficiency of the

784
00:24:53,626 --> 0:24:54,786
protocol exchange.

785
00:24:55,286 --> 0:24:57,236
The most notable is Push.

786
00:24:57,936 --> 0:24:58,936
So how does Push work?

787
00:25:00,026 --> 0:25:03,706
Well, HTTP/2 works the same way

788
00:25:03,706 --> 0:25:05,606
as HTTP/1 in the sense that the

789
00:25:05,606 --> 0:25:07,066
client when it wants a resource

790
00:25:07,066 --> 0:25:08,286
will send a get request to the

791
00:25:08,286 --> 0:25:08,726
server.

792
00:25:09,266 --> 0:25:12,156
What's new with HTTP/2 is that

793
00:25:12,156 --> 0:25:13,216
when the server sees that

794
00:25:13,216 --> 0:25:14,606
request, it can say to itself,

795
00:25:15,016 --> 0:25:16,276
"Oh, I see you want this

796
00:25:16,276 --> 0:25:16,686
resource.

797
00:25:16,716 --> 0:25:17,616
I bet you want this other

798
00:25:17,616 --> 0:25:18,516
resource as well."

799
00:25:19,076 --> 0:25:20,736
And so, when it sends you the

800
00:25:20,736 --> 0:25:22,566
resource you've asked for, at

801
00:25:22,566 --> 0:25:23,686
the same time it can

802
00:25:23,686 --> 0:25:26,046
unilaterally start sending you

803
00:25:26,236 --> 0:25:27,776
that secondary resource that you

804
00:25:27,776 --> 0:25:28,766
don't know you want yet.

805
00:25:29,436 --> 0:25:31,366
In that way, if it guesses right

806
00:25:31,796 --> 0:25:32,986
then you don't have to turn

807
00:25:32,986 --> 0:25:34,186
around and make a second request

808
00:25:34,186 --> 0:25:35,296
for it because it's already on

809
00:25:35,296 --> 0:25:35,956
its way to you.

810
00:25:37,216 --> 0:25:39,866
So, we're making use of this in

811
00:25:39,936 --> 0:25:41,716
the latency HLS with Segment

812
00:25:41,716 --> 0:25:42,066
Push.

813
00:25:43,276 --> 0:25:46,426
So when a client asks for a

814
00:25:46,426 --> 0:25:48,336
particular playlist update, the

815
00:25:48,336 --> 0:25:49,586
one that contains the next

816
00:25:49,586 --> 0:25:51,526
segment x, it can tell the

817
00:25:51,526 --> 0:25:53,506
server, "Oh, and by the way,

818
00:25:53,766 --> 0:25:54,926
when you give me that playlist

819
00:25:54,926 --> 0:25:56,466
update, start pushing me segment

820
00:25:56,466 --> 0:25:57,056
x as well."

821
00:25:57,996 --> 0:26:00,216
And so that allows us to

822
00:25:57,996 --> 0:26:00,216
And so that allows us to

823
00:26:00,386 --> 0:26:02,536
eliminate that extra round trip

824
00:26:02,936 --> 0:26:06,196
of asking for the segment.

825
00:26:06,356 --> 0:26:09,766
So let's take a look at all

826
00:26:09,766 --> 0:26:10,916
three of these first

827
00:26:10,916 --> 0:26:14,426
optimizations and see how they

828
00:26:14,426 --> 0:26:16,536
influence the flow in comparison

829
00:26:16,536 --> 0:26:17,186
to regular HLS.

830
00:26:17,186 --> 0:26:18,976
So, let's put that over there.

831
00:26:19,306 --> 0:26:21,366
And let's take a look at what

832
00:26:21,366 --> 0:26:22,546
the new flow looks like with a

833
00:26:22,546 --> 0:26:24,036
low-latency client talking to a

834
00:26:24,036 --> 0:26:25,136
low-latency server.

835
00:26:25,796 --> 0:26:27,426
First of all, the client will

836
00:26:27,426 --> 0:26:29,036
make a playlist request in

837
00:26:29,036 --> 0:26:29,556
advance.

838
00:26:29,556 --> 0:26:30,756
So we'll have it lined up there.

839
00:26:31,116 --> 0:26:32,156
Server holds on to it.

840
00:26:32,516 --> 0:26:34,866
The server in the meantime is

841
00:26:34,866 --> 0:26:36,286
producing that first partial

842
00:26:36,286 --> 0:26:36,706
segment.

843
00:26:37,606 --> 0:26:39,216
And let's say in this example

844
00:26:39,216 --> 0:26:40,696
that the partial segment is one

845
00:26:40,696 --> 0:26:41,336
second long.

846
00:26:41,336 --> 0:26:42,626
So after a second of doing its

847
00:26:42,626 --> 0:26:44,646
encoding thing, at that point,

848
00:26:44,646 --> 0:26:46,046
it can add that partial segment

849
00:26:46,046 --> 0:26:48,316
to the playlist and unblock that

850
00:26:48,316 --> 0:26:50,596
playlist request, at the same

851
00:26:50,596 --> 0:26:53,096
time, pushing that first partial

852
00:26:53,096 --> 0:26:53,976
second to the client.

853
00:26:54,766 --> 0:26:56,866
The client can then display that

854
00:26:56,866 --> 0:26:58,766
as soon as it gets enough of it.

855
00:26:58,766 --> 0:27:00,886
And at the same time, line up

856
00:26:58,766 --> 0:27:00,886
And at the same time, line up

857
00:27:00,886 --> 0:27:02,136
the next playlist request on the

858
00:27:02,136 --> 0:27:03,756
server so it can find out about

859
00:27:03,756 --> 0:27:06,206
the next segment that appears as

860
00:27:06,206 --> 0:27:06,966
quickly as possible.

861
00:27:08,026 --> 0:27:10,546
Even with partial segments as

862
00:27:10,546 --> 0:27:12,546
long as the second, you can see

863
00:27:12,746 --> 0:27:15,436
how this dramatically reduces

864
00:27:15,436 --> 0:27:18,006
the amount of time it takes for

865
00:27:18,006 --> 0:27:20,306
a given frame of media to travel

866
00:27:20,626 --> 0:27:23,556
from the server all the way to

867
00:27:24,216 --> 0:27:24,526
the client.

868
00:27:24,836 --> 0:27:26,456
Now, the last couple of changes

869
00:27:26,456 --> 0:27:29,066
are essentially optimizations to

870
00:27:29,066 --> 0:27:30,056
this basic flow.

871
00:27:30,776 --> 0:27:33,576
The first one is about reducing

872
00:27:33,576 --> 0:27:35,506
this overhead of transferring

873
00:27:35,506 --> 0:27:36,876
the playlist over and over

874
00:27:36,876 --> 0:27:37,206
again.

875
00:27:37,656 --> 0:27:39,196
Now, why is that important?

876
00:27:40,166 --> 0:27:42,286
Well, if this playlist you're

877
00:27:42,566 --> 0:27:44,346
transferring has like three

878
00:27:44,346 --> 0:27:46,216
hours or even five hours of

879
00:27:46,216 --> 0:27:47,886
worth of segments in it and

880
00:27:47,886 --> 0:27:49,726
you're transferring it like

881
00:27:49,916 --> 0:27:51,626
three to four times a second

882
00:27:52,216 --> 0:27:53,796
that can become significant,

883
00:27:53,796 --> 0:27:54,566
even with gzip.

884
00:27:56,006 --> 0:27:58,836
And so instead, we're adding

885
00:27:58,836 --> 0:28:00,276
Delta playlist updates.

886
00:27:58,836 --> 0:28:00,276
Delta playlist updates.

887
00:28:01,596 --> 0:28:04,076
And so, the way that works is

888
00:28:04,076 --> 0:28:05,596
that, again, the server

889
00:28:05,596 --> 0:28:07,186
announces the client that it can

890
00:28:07,186 --> 0:28:08,876
has the ability to provide Delta

891
00:28:08,876 --> 0:28:09,396
updates.

892
00:28:09,606 --> 0:28:10,806
And it does that with a

893
00:28:10,806 --> 0:28:12,936
CAN-SKIP-UNTIL attribute that

894
00:28:12,936 --> 0:28:15,046
tells the client if you ask for

895
00:28:15,046 --> 0:28:16,296
a Delta update, it's going to

896
00:28:16,296 --> 0:28:17,596
skip all the segments until a

897
00:28:17,596 --> 0:28:18,956
certain number of seconds away

898
00:28:18,956 --> 0:28:19,896
from the live edge.

899
00:28:20,636 --> 0:28:22,536
If the client sees that and it

900
00:28:22,536 --> 0:28:24,176
knows the last time it updated

901
00:28:24,176 --> 0:28:25,626
the playlist and so it figures,

902
00:28:25,846 --> 0:28:27,136
it can make do with a Delta

903
00:28:27,136 --> 0:28:28,366
update and not miss any

904
00:28:28,366 --> 0:28:29,116
information.

905
00:28:29,646 --> 0:28:31,066
Then it can make an explicit

906
00:28:31,066 --> 0:28:32,896
request the next time it updates

907
00:28:32,896 --> 0:28:34,346
a playlist for a Delta update.

908
00:28:35,486 --> 0:28:39,036
And that update carries just the

909
00:28:39,366 --> 0:28:42,906
last few segments in the

910
00:28:42,906 --> 0:28:43,896
playlist, the ones that are

911
00:28:43,896 --> 0:28:45,236
closest to the live edge.

912
00:28:46,106 --> 0:28:47,746
And it skips the earlier part of

913
00:28:47,746 --> 0:28:48,606
the playlist that the client

914
00:28:48,606 --> 0:28:50,006
already has.

915
00:28:52,736 --> 0:28:54,096
So here's an example.

916
00:28:55,106 --> 0:28:57,326
In this case, you can see that

917
00:28:57,606 --> 0:28:59,906
the client is asking for a Delta

918
00:28:59,906 --> 0:29:01,766
update by specifying the

919
00:28:59,906 --> 0:29:01,766
update by specifying the

920
00:29:01,766 --> 0:29:02,726
underscore HLS underscore

921
00:29:02,726 --> 0:29:05,966
skip=YES query parameter, when

922
00:29:05,966 --> 0:29:07,916
it makes its play playlist get

923
00:29:07,916 --> 0:29:08,486
request.

924
00:29:08,936 --> 0:29:11,526
In the playlist that comes back,

925
00:29:12,456 --> 0:29:13,176
you'll see that there's a

926
00:29:13,176 --> 0:29:15,716
CAN-SKIP-UNTIL, which tells the

927
00:29:15,716 --> 0:29:17,166
client that when it asks for a

928
00:29:17,166 --> 0:29:19,066
Delta update that the Delta

929
00:29:19,066 --> 0:29:20,126
update will skip everything

930
00:29:20,126 --> 0:29:22,016
until the last 36 seconds before

931
00:29:22,016 --> 0:29:22,866
the live edge.

932
00:29:24,006 --> 0:29:26,006
And then the last new tag here

933
00:29:26,306 --> 0:29:27,396
is this skip tag.

934
00:29:28,006 --> 0:29:29,156
And the way you can think of the

935
00:29:29,156 --> 0:29:32,786
skip tag is it is a stand in for

936
00:29:32,996 --> 0:29:36,596
1700 xm segment, xm segment tags

937
00:29:36,856 --> 0:29:37,796
that would have been there in a

938
00:29:37,796 --> 0:29:39,466
full playlist update.

939
00:29:40,476 --> 0:29:42,546
So that's Delta updates and

940
00:29:42,546 --> 0:29:45,066
allows us to really minimize the

941
00:29:45,066 --> 0:29:47,036
number or the amount of network

942
00:29:47,036 --> 0:29:48,356
traffic it takes to constantly

943
00:29:48,356 --> 0:29:49,756
refresh the playlist without

944
00:29:49,756 --> 0:29:51,226
losing any of the generality and

945
00:29:51,226 --> 0:29:53,116
power that HLS Playlist give

946
00:29:53,116 --> 0:29:53,316
you.

947
00:29:53,966 --> 0:29:55,776
So now, let's look at the last

948
00:29:55,776 --> 0:29:57,396
change and this is the one that

949
00:29:57,696 --> 0:30:00,166
helps us switch bit rate tiers

950
00:29:57,696 --> 0:30:00,166
helps us switch bit rate tiers

951
00:30:00,376 --> 0:30:01,156
more rapidly.

952
00:30:02,046 --> 0:30:02,866
They're called Rendition

953
00:30:02,866 --> 0:30:03,576
Reports.

954
00:30:04,086 --> 0:30:06,816
And the idea is that, when your

955
00:30:06,816 --> 0:30:08,866
client loads the most up to date

956
00:30:08,996 --> 0:30:10,906
version of a particular playlist

957
00:30:11,006 --> 0:30:12,986
for a particular bit rate that

958
00:30:13,046 --> 0:30:15,256
update can carry an up to date

959
00:30:15,256 --> 0:30:17,456
kind of a peek into other

960
00:30:17,456 --> 0:30:19,366
renditions that the client might

961
00:30:19,366 --> 0:30:20,646
decide or interesting to switch

962
00:30:20,646 --> 0:30:23,416
to in the next second or two.

963
00:30:23,656 --> 0:30:25,806
Specifically, the Rendition

964
00:30:25,806 --> 0:30:27,186
Reports carry the last media

965
00:30:27,186 --> 0:30:29,056
sequence number in that pure

966
00:30:29,056 --> 0:30:30,956
playlist in its last partial

967
00:30:30,956 --> 0:30:31,616
segment number.

968
00:30:31,896 --> 0:30:33,016
And that gives the client what

969
00:30:33,016 --> 0:30:34,956
it needs to compose the URL to

970
00:30:34,956 --> 0:30:36,216
get that latest playlist.

971
00:30:36,626 --> 0:30:38,776
So it looks like this.

972
00:30:39,776 --> 0:30:41,746
In this example, we have the

973
00:30:41,826 --> 0:30:44,436
client asking for an update of

974
00:30:44,436 --> 0:30:45,766
the one-megabit playlist.

975
00:30:46,366 --> 0:30:47,686
And when it's doing that, it's

976
00:30:47,686 --> 0:30:49,626
using the HLS report query

977
00:30:49,626 --> 0:30:52,106
parameter to ask for a peek into

978
00:30:52,106 --> 0:30:53,416
the two-megabit playlist that's

979
00:30:53,416 --> 0:30:54,346
on the same server.

980
00:30:54,916 --> 0:30:57,496
When it gets its playlist back,

981
00:30:57,916 --> 0:30:59,126
the playlist will contain a

982
00:30:59,126 --> 0:31:00,466
rendition report tag.

983
00:30:59,126 --> 0:31:00,466
rendition report tag.

984
00:31:00,946 --> 0:31:02,846
And that has a variety of

985
00:31:02,846 --> 0:31:04,526
information about that other

986
00:31:04,526 --> 0:31:05,086
rendition.

987
00:31:05,646 --> 0:31:10,006
So, if we put all these changes

988
00:31:10,006 --> 0:31:13,666
together, the question is, how

989
00:31:13,666 --> 0:31:14,486
well do they work.

990
00:31:14,996 --> 0:31:17,006
Do you guys want to see a demo?

991
00:31:18,046 --> 0:31:18,126
&gt;&gt; Yeah.

992
00:31:18,326 --> 0:31:22,796
&gt;&gt; Let's do it.

993
00:31:22,796 --> 0:31:24,636
You know, when we were putting

994
00:31:24,636 --> 0:31:27,056
the session together, we were

995
00:31:27,056 --> 0:31:29,086
like, "Yeah, we could do a live

996
00:31:29,086 --> 0:31:30,336
demo or we could do a Live

997
00:31:30,336 --> 0:31:31,526
Stream from Cupertino."

998
00:31:32,086 --> 0:31:34,306
But wouldn't it be more

999
00:31:34,396 --> 0:31:36,356
demonstrative to do a live demo

1000
00:31:36,356 --> 0:31:37,396
from somewhere a little bit

1001
00:31:37,436 --> 0:31:38,236
further away?

1002
00:31:38,956 --> 0:31:42,356
Maybe somewhere 7,000 miles

1003
00:31:42,356 --> 0:31:44,776
away, 12,000 kilometers

1004
00:31:44,776 --> 0:31:46,216
somewhere like Sydney,

1005
00:31:46,216 --> 0:31:46,976
Australia?

1006
00:31:47,516 --> 0:31:50,056
[ Applause and Cheering ]

1007
00:31:50,556 --> 0:31:53,596
But wait, do we know anyone in

1008
00:31:53,596 --> 0:31:54,036
Sydney?

1009
00:31:55,466 --> 0:31:56,596
Matt. We know Matt.

1010
00:31:57,436 --> 0:32:01,416
Let's call Matt.

1011
00:31:57,436 --> 0:32:01,416
Let's call Matt.

1012
00:32:02,156 --> 0:32:03,246
OK. Let's see.

1013
00:32:03,686 --> 0:32:04,836
Geez, I hope Matt is awake.

1014
00:32:13,046 --> 0:32:14,586
&gt;&gt; Good day, Roger.

1015
00:32:15,356 --> 0:32:16,076
&gt;&gt; Hey, Matt.

1016
00:32:16,076 --> 0:32:16,496
How are you?

1017
00:32:17,456 --> 0:32:18,506
&gt;&gt; I'm well, thank you.

1018
00:32:18,746 --> 0:32:21,636
&gt;&gt; Great. Hey, say, I am here at

1019
00:32:21,636 --> 0:32:24,156
WWDC and I want to show these

1020
00:32:24,156 --> 0:32:26,046
folks Low-Latency HLS.

1021
00:32:26,596 --> 0:32:27,736
Do you still have that Stream

1022
00:32:27,736 --> 0:32:28,076
running?

1023
00:32:28,966 --> 0:32:29,816
&gt;&gt; I sure do.

1024
00:32:29,866 --> 0:32:31,076
&gt;&gt; Oh, fantastic.

1025
00:32:31,846 --> 0:32:35,056
OK. Let's tune in.

1026
00:32:35,056 --> 0:32:36,026
See what we got here.

1027
00:32:36,496 --> 0:32:38,356
I'm got my Apple TV.

1028
00:32:38,526 --> 0:32:39,626
OK. There we go.

1029
00:32:40,356 --> 0:32:42,106
OK. Hey, fantastic I'm at Apple

1030
00:32:42,106 --> 0:32:42,776
TV.

1031
00:32:43,556 --> 0:32:43,946
All right.

1032
00:32:44,116 --> 0:32:45,176
So let's bring up our app.

1033
00:32:45,296 --> 0:32:47,076
We got our Sydney Stream here.

1034
00:32:47,076 --> 0:32:48,166
And let's tune in and see what

1035
00:32:48,166 --> 0:32:49,246
we got.

1036
00:32:54,046 --> 0:32:55,636
Sydney is not happening.

1037
00:32:56,566 --> 0:32:57,976
Let's see if we try that again.

1038
00:33:04,476 --> 0:33:06,946
OK. Let me try the Cupertino

1039
00:33:06,946 --> 0:33:08,356
Stream just to see if there's

1040
00:33:08,356 --> 0:33:09,866
someone-- oh, there's Simon.

1041
00:33:09,866 --> 0:33:10,916
Simon is in Cupertino.

1042
00:33:11,456 --> 0:33:14,586
So that's-- [laughter] we got

1043
00:33:14,586 --> 0:33:15,486
Simon going.

1044
00:33:16,876 --> 0:33:18,026
All right.

1045
00:33:18,186 --> 0:33:20,466
Let's try this one more time.

1046
00:33:20,466 --> 0:33:25,836
Are we-- Oops, come on, how do I

1047
00:33:25,966 --> 0:33:27,076
manage this thing?

1048
00:33:28,796 --> 0:33:29,876
Matt, you're still there right--

1049
00:33:29,876 --> 0:33:30,676
Whoa, there you are.

1050
00:33:30,776 --> 0:33:31,596
&gt;&gt; Yeah. I'm still here.

1051
00:33:31,596 --> 0:33:31,866
Hello.

1052
00:33:31,866 --> 0:33:32,916
&gt;&gt; OK, great.

1053
00:33:35,336 --> 0:33:36,646
But, hey, you know, what is that

1054
00:33:36,646 --> 0:33:37,986
the Sydney GPO behind you?

1055
00:33:39,006 --> 0:33:40,256
&gt;&gt; It sure is.

1056
00:33:40,696 --> 0:33:41,586
&gt;&gt; Oh man, come on.

1057
00:33:42,376 --> 0:33:44,016
We're not sorry-- I got to try

1058
00:33:44,016 --> 0:33:44,456
this again.

1059
00:33:52,556 --> 0:33:54,786
My Stream is not behaving the

1060
00:33:54,786 --> 0:33:57,166
way I want my Stream to be

1061
00:33:58,036 --> 0:33:58,186
today.

1062
00:33:58,356 --> 0:33:59,676
Yeah. Simon is still there.

1063
00:34:00,636 --> 0:34:05,576
Oh man. And there's-- OK,

1064
00:34:05,576 --> 0:34:06,816
there's-- Yeah, there is Matt.

1065
00:34:07,406 --> 0:34:10,045
And am I hitting play, pause?

1066
00:34:10,556 --> 0:34:14,246
Well, you know what, maybe we're

1067
00:34:14,246 --> 0:34:16,946
going to have to end up calling

1068
00:34:17,146 --> 0:34:19,246
Simon instead, which is kind of

1069
00:34:19,246 --> 0:34:20,696
a bummer because I really wanted

1070
00:34:20,696 --> 0:34:23,976
to show you guys the Stream.

1071
00:34:24,045 --> 0:34:24,516
Let's see.

1072
00:34:25,255 --> 0:34:25,966
Hold our breath.

1073
00:34:25,966 --> 0:34:26,525
Are we good?

1074
00:34:27,416 --> 0:34:28,386
Did you guys have to restart

1075
00:34:28,386 --> 0:34:28,766
Stream?

1076
00:34:29,815 --> 0:34:30,795
&gt;&gt; The network went away for a

1077
00:34:30,835 --> 0:34:31,025
bit.

1078
00:34:31,216 --> 0:34:32,176
&gt;&gt; The network went away.

1079
00:34:33,076 --> 0:34:33,536
That's great.

1080
00:34:40,366 --> 0:34:40,766
All right.

1081
00:34:40,976 --> 0:34:42,806
We're having-- Let me just see

1082
00:34:42,896 --> 0:34:45,156
if maybe we're not plugged in

1083
00:34:45,156 --> 0:34:45,426
right.

1084
00:34:48,196 --> 0:34:49,565
These live demos just killing

1085
00:34:49,565 --> 0:34:49,656
me.

1086
00:35:01,256 --> 0:35:02,936
Double tap this and this is

1087
00:35:04,156 --> 0:35:06,616
going to try to get rid of this

1088
00:35:06,616 --> 0:35:06,906
guy.

1089
00:35:07,306 --> 0:35:08,266
Yeah, I don't know if this going

1090
00:35:08,266 --> 0:35:08,886
to help me but let's give a

1091
00:35:08,886 --> 0:35:08,976
shot.

1092
00:35:16,206 --> 0:35:18,606
Oh, man. All right.

1093
00:35:18,686 --> 0:35:20,026
I think we're going to try this

1094
00:35:20,026 --> 0:35:22,846
one more time and then we are

1095
00:35:23,566 --> 0:35:24,226
going to back up.

1096
00:35:24,226 --> 0:35:25,496
All right.

1097
00:35:26,356 --> 0:35:27,056
Sorry, Matt.

1098
00:35:27,056 --> 0:35:28,326
We're having trouble with the

1099
00:35:28,326 --> 0:35:29,146
Stream over here.

1100
00:35:29,146 --> 0:35:33,396
So let me-- Thanks for showing

1101
00:35:33,396 --> 0:35:34,676
up and we're able to see you for

1102
00:35:34,676 --> 0:35:36,166
a little bit but I'm going to

1103
00:35:36,166 --> 0:35:37,856
have to go to Cupertino.

1104
00:35:37,856 --> 0:35:38,086
&gt;&gt; All right.

1105
00:35:38,086 --> 0:35:38,796
No problem.

1106
00:35:38,796 --> 0:35:39,176
&gt;&gt; All right.

1107
00:35:39,756 --> 0:35:41,006
Well, that's really a bummer but

1108
00:35:41,006 --> 0:35:42,696
let's call Simon anyway.

1109
00:35:42,916 --> 0:35:43,796
This is why you have backups, I

1110
00:35:43,796 --> 0:35:43,956
guess.

1111
00:35:49,926 --> 0:35:50,886
Hey, Simon, are you there?

1112
00:35:51,576 --> 0:35:52,726
&gt;&gt; Yeah, I'm here Roger.

1113
00:35:52,726 --> 0:35:53,656
How are you?

1114
00:35:53,656 --> 0:35:54,936
&gt;&gt; Good. Simon is also

1115
00:35:54,936 --> 0:35:55,506
Australian.

1116
00:35:55,506 --> 0:35:56,666
I realized that's not-- that's

1117
00:35:56,666 --> 0:35:57,926
kind of cool comfort but there

1118
00:35:57,926 --> 0:35:58,066
he is.

1119
00:35:58,066 --> 0:35:58,776
&gt;&gt; You got Australians

1120
00:35:58,776 --> 0:35:59,286
everywhere.

1121
00:36:00,776 --> 0:36:04,026
&gt;&gt; So Simon, I wanted to show

1122
00:36:04,026 --> 0:36:05,686
the folks here a Low-Latency HLS

1123
00:36:05,686 --> 0:36:06,166
Stream.

1124
00:36:06,586 --> 0:36:07,916
&gt;&gt; Oh you bet.

1125
00:36:08,116 --> 0:36:09,316
&gt;&gt; So why don't we do this.

1126
00:36:09,316 --> 0:36:11,186
I'll have you raise your hand

1127
00:36:11,506 --> 0:36:13,356
and people hear you said-- if

1128
00:36:13,356 --> 0:36:14,776
you said when you do it, they'll

1129
00:36:14,776 --> 0:36:16,126
hear you over the audio.

1130
00:36:16,126 --> 0:36:17,066
And then they'll see you on the

1131
00:36:17,066 --> 0:36:17,346
Stream.

1132
00:36:17,346 --> 0:36:17,846
Now, they'll give you-- a give

1133
00:36:17,906 --> 0:36:19,486
them a sense of what the video

1134
00:36:19,486 --> 0:36:20,186
latency is.

1135
00:36:20,186 --> 0:36:21,036
So, I want you to raise your

1136
00:36:21,036 --> 0:36:21,546
hand.

1137
00:36:21,546 --> 0:36:23,636
&gt;&gt; OK. You bet.

1138
00:36:23,836 --> 0:36:24,786
&gt;&gt; OK. Raise your hand.

1139
00:36:24,836 --> 0:36:27,026
&gt;&gt; Hey, everybody.

1140
00:36:27,806 --> 0:36:28,796
I'm raising my hand.

1141
00:36:28,866 --> 0:36:30,216
&gt;&gt; OK. Good.

1142
00:36:30,216 --> 0:36:31,376
Keep that hand up.

1143
00:36:31,746 --> 0:36:34,246
And-- oh you put it down.

1144
00:36:34,566 --> 0:36:37,326
OK. Now, give me three fingers.

1145
00:36:38,276 --> 0:36:39,366
&gt;&gt; Three fingers.

1146
00:36:40,156 --> 0:36:41,626
&gt;&gt; There we are.

1147
00:36:41,626 --> 0:36:44,136
So that's a-- they are about,

1148
00:36:44,966 --> 0:36:45,936
you know, [applause] HLS Stream

1149
00:36:45,936 --> 0:36:47,406
less than two seconds latency.

1150
00:36:47,476 --> 0:36:49,386
Thank you very much for helping

1151
00:36:49,386 --> 0:36:50,236
us out today, Simon.

1152
00:36:50,836 --> 0:36:51,316
&gt;&gt; You bet.

1153
00:36:51,316 --> 0:36:52,856
I hope you all enjoy the rest of

1154
00:36:52,856 --> 0:36:53,646
WWDC.

1155
00:36:54,156 --> 0:36:55,776
&gt;&gt; Thank you.

1156
00:36:56,126 --> 0:37:00,116
Alright. So that is Low-Latency

1157
00:36:56,126 --> 0:37:00,116
Alright. So that is Low-Latency

1158
00:37:00,116 --> 0:37:00,616
HLS.

1159
00:37:01,086 --> 0:37:02,286
So at this point, some of you

1160
00:37:02,286 --> 0:37:04,226
are probably wondering, how can

1161
00:37:04,226 --> 0:37:05,356
I give me some of that HLS

1162
00:37:05,356 --> 0:37:06,606
Low-Latency stuff?

1163
00:37:07,736 --> 0:37:10,266
And so, first of all, a lot of

1164
00:37:10,266 --> 0:37:12,246
your application developers and

1165
00:37:12,246 --> 0:37:13,686
so let's talk about that first.

1166
00:37:14,696 --> 0:37:17,376
The good news is by default, you

1167
00:37:17,376 --> 0:37:18,606
don't have to do anything if

1168
00:37:18,606 --> 0:37:19,726
you're using an AV Player to

1169
00:37:19,806 --> 0:37:21,106
play your Streams and you stand

1170
00:37:21,106 --> 0:37:22,176
up Low-Latency Stream, you'll

1171
00:37:22,176 --> 0:37:22,886
get it by default.

1172
00:37:24,366 --> 0:37:25,756
We do have a couple of new API's

1173
00:37:25,936 --> 0:37:26,506
however.

1174
00:37:26,886 --> 0:37:29,026
One that tells you how far

1175
00:37:29,026 --> 0:37:30,196
you're currently set from the

1176
00:37:30,196 --> 0:37:32,096
live edge and the other which is

1177
00:37:32,096 --> 0:37:34,186
a recommendation based on things

1178
00:37:34,186 --> 0:37:35,556
like round trip time we're

1179
00:37:35,556 --> 0:37:36,026
observing.

1180
00:37:36,316 --> 0:37:37,356
And so, you can use those

1181
00:37:37,356 --> 0:37:38,516
together to configure.

1182
00:37:38,786 --> 0:37:39,736
For instance, you see here a

1183
00:37:39,736 --> 0:37:41,026
little bit too close in your

1184
00:37:41,026 --> 0:37:42,246
risk of stalling, you can back

1185
00:37:42,246 --> 0:37:42,906
it off a little bit.

1186
00:37:42,906 --> 0:37:45,046
Maybe we should have done that

1187
00:37:45,046 --> 0:37:45,296
here.

1188
00:37:45,296 --> 0:37:47,296
The second is a way to allow you

1189
00:37:47,296 --> 0:37:48,516
to maintain the play head

1190
00:37:48,516 --> 0:37:50,166
position relative to the live

1191
00:37:50,166 --> 0:37:50,496
edge.

1192
00:37:50,496 --> 0:37:51,316
And the reason this is

1193
00:37:51,316 --> 0:37:53,206
interesting is because that

1194
00:37:53,316 --> 0:37:54,686
today if you're playing the Live

1195
00:37:54,686 --> 0:37:55,446
Stream and you go through a

1196
00:37:55,446 --> 0:37:56,306
tunnel or whatever and you

1197
00:37:56,306 --> 0:37:57,796
buffer for 10 seconds, when you

1198
00:37:57,796 --> 0:37:59,506
resume, you resume at the point

1199
00:37:59,506 --> 0:38:00,866
you stopped, which means you

1200
00:37:59,506 --> 0:38:00,866
you stopped, which means you

1201
00:38:00,866 --> 0:38:01,826
don't miss anything.

1202
00:38:01,826 --> 0:38:03,006
But every time you're buffering

1203
00:38:03,006 --> 0:38:05,136
a little bit further behind, and

1204
00:38:05,136 --> 0:38:06,656
so if you set automatically

1205
00:38:06,656 --> 0:38:08,326
preserves time offset from live

1206
00:38:08,326 --> 0:38:10,366
to yes, then every time after we

1207
00:38:10,366 --> 0:38:11,606
will buffer we will not

1208
00:38:11,606 --> 0:38:13,526
automatically jump ahead to that

1209
00:38:13,526 --> 0:38:14,616
same place from live.

1210
00:38:14,616 --> 0:38:15,966
And so, that keeps you at live.

1211
00:38:16,376 --> 0:38:17,926
The next thing to think about is

1212
00:38:17,926 --> 0:38:20,796
configuring your CDN.

1213
00:38:21,026 --> 0:38:22,796
We really wanted to avoid

1214
00:38:24,266 --> 0:38:26,756
placing exotic video specific

1215
00:38:26,756 --> 0:38:28,206
requirements on our CDNs because

1216
00:38:28,206 --> 0:38:29,546
we want them to be able to focus

1217
00:38:29,546 --> 0:38:31,076
on being great CDNs.

1218
00:38:31,596 --> 0:38:32,476
And so we kept things

1219
00:38:32,476 --> 0:38:33,176
straightforward.

1220
00:38:33,996 --> 0:38:35,286
You need to use industry

1221
00:38:35,286 --> 0:38:37,436
standard HTTP/2 to deliver your

1222
00:38:37,436 --> 0:38:38,646
HLS segments and playlists.

1223
00:38:38,646 --> 0:38:40,006
That includes supporting Push

1224
00:38:40,096 --> 0:38:41,156
and the standard priority

1225
00:38:41,156 --> 0:38:41,786
controls.

1226
00:38:43,006 --> 0:38:44,516
You should be putting a complete

1227
00:38:44,516 --> 0:38:46,236
ladder of tiers on each server.

1228
00:38:46,346 --> 0:38:47,536
You can still have multiple

1229
00:38:47,536 --> 0:38:48,836
redundant servers, but each one

1230
00:38:48,836 --> 0:38:50,326
should have a complete ladder so

1231
00:38:50,326 --> 0:38:51,826
we can minimize connection setup

1232
00:38:51,866 --> 0:38:52,226
time.

1233
00:38:53,226 --> 0:38:55,356
And you have to set up your CDN

1234
00:38:55,356 --> 0:38:56,546
so the aggregates duplicate

1235
00:38:56,546 --> 0:38:57,246
requests.

1236
00:38:57,246 --> 0:38:58,616
If Fred asked for a particular

1237
00:38:58,616 --> 0:39:00,416
playlist and it goes off to the

1238
00:38:58,616 --> 0:39:00,416
playlist and it goes off to the

1239
00:39:00,416 --> 0:39:01,876
origin to get it, and then Bob

1240
00:39:01,876 --> 0:39:03,466
asks for the same thing, rather

1241
00:39:03,466 --> 0:39:04,656
than sending the same request

1242
00:39:04,656 --> 0:39:06,026
through the CDN, you should park

1243
00:39:06,026 --> 0:39:07,706
it next to Fred's and wait for

1244
00:39:07,706 --> 0:39:09,106
that first response to come back

1245
00:39:09,376 --> 0:39:10,496
and then deliver them together.

1246
00:39:11,096 --> 0:39:12,266
Different CDNs call that

1247
00:39:12,266 --> 0:39:13,796
different things, Apache Traffic

1248
00:39:13,796 --> 0:39:14,816
Server calls it Reader while

1249
00:39:14,816 --> 0:39:15,296
writer.

1250
00:39:15,626 --> 0:39:18,076
Others might call it early

1251
00:39:18,076 --> 0:39:19,066
published or something like

1252
00:39:19,066 --> 0:39:19,316
that.

1253
00:39:19,366 --> 0:39:20,616
The main thing is to find that

1254
00:39:20,616 --> 0:39:23,146
and set it up.

1255
00:39:23,266 --> 0:39:25,006
Now, the main work here is

1256
00:39:25,006 --> 0:39:26,026
implementing your origin,

1257
00:39:26,026 --> 0:39:27,186
changing your packagers who

1258
00:39:27,186 --> 0:39:28,816
admit partial segments and

1259
00:39:28,816 --> 0:39:30,116
implementing the origin API.

1260
00:39:30,336 --> 0:39:32,226
To help you with that, we've

1261
00:39:32,226 --> 0:39:34,146
published a spec for Low-Latency

1262
00:39:34,146 --> 0:39:34,396
HLS.

1263
00:39:34,396 --> 0:39:35,976
It's available on the website.

1264
00:39:35,976 --> 0:39:38,746
There's a link to it through the

1265
00:39:38,746 --> 0:39:39,896
session page on the app.

1266
00:39:40,606 --> 0:39:41,936
It's currently structured as the

1267
00:39:41,936 --> 0:39:42,786
separate draft.

1268
00:39:42,786 --> 0:39:44,176
We plan to roll the rules into

1269
00:39:44,176 --> 0:39:45,766
the course back later this year.

1270
00:39:46,466 --> 0:39:47,676
It includes something new, which

1271
00:39:47,676 --> 0:39:49,026
is a Server Configuration

1272
00:39:49,026 --> 0:39:49,576
Profile.

1273
00:39:49,856 --> 0:39:51,796
And that has a set of attributes

1274
00:39:51,796 --> 0:39:53,076
of the server delivery chain

1275
00:39:53,076 --> 0:39:54,396
that required to engage

1276
00:39:54,426 --> 0:39:55,776
Low-Latency mode in the client.

1277
00:39:56,076 --> 0:39:57,476
The client will check these if

1278
00:39:57,476 --> 0:39:58,836
it doesn't see all the met,

1279
00:39:59,136 --> 0:40:00,236
it'll fall back to regular

1280
00:39:59,136 --> 0:40:00,236
it'll fall back to regular

1281
00:40:00,236 --> 0:40:00,766
latency.

1282
00:40:02,136 --> 0:40:04,576
Also, we're giving you a

1283
00:40:04,576 --> 0:40:06,376
reference implementation for

1284
00:40:06,606 --> 0:40:08,446
producing and Streaming

1285
00:40:08,616 --> 0:40:10,186
Low-Latency HLS Streams.

1286
00:40:10,986 --> 0:40:12,566
It's called a Low-Latency HLS

1287
00:40:12,616 --> 0:40:13,856
Beta Tools package.

1288
00:40:14,636 --> 0:40:16,226
And it has tools that will

1289
00:40:16,226 --> 0:40:17,756
generate a playlist either a

1290
00:40:17,866 --> 0:40:19,696
programmatic bit bop or from the

1291
00:40:19,696 --> 0:40:21,546
camera and package it into a

1292
00:40:21,546 --> 0:40:22,736
Low-Latency Stream.

1293
00:40:23,456 --> 0:40:25,066
It includes a front end to

1294
00:40:25,066 --> 0:40:26,896
Apache that implements the

1295
00:40:26,896 --> 0:40:28,876
origin API, including Blocking

1296
00:40:28,876 --> 0:40:30,536
Playlist Reload, Delta Updates,

1297
00:40:30,536 --> 0:40:31,566
Rendition Reports.

1298
00:40:31,976 --> 0:40:33,406
And you can use that either to

1299
00:40:33,406 --> 0:40:34,796
experiment with Low-Latency with

1300
00:40:34,796 --> 0:40:36,366
your app and also to compare it

1301
00:40:36,666 --> 0:40:37,676
against your backend

1302
00:40:37,676 --> 0:40:38,826
implementation when you build

1303
00:40:38,826 --> 0:40:39,076
that.

1304
00:40:40,316 --> 0:40:42,146
So that's what you need as

1305
00:40:42,146 --> 0:40:43,936
developers to get up and running

1306
00:40:43,936 --> 0:40:44,566
on this thing.

1307
00:40:44,566 --> 0:40:45,776
Let's talk about the roadmap to

1308
00:40:45,776 --> 0:40:46,296
users.

1309
00:40:46,946 --> 0:40:48,926
We recognize that Low-Latency

1310
00:40:48,926 --> 0:40:50,556
HLS is a major change.

1311
00:40:51,186 --> 0:40:54,606
And so, we are allowing you to

1312
00:40:54,606 --> 0:40:55,956
spend a bit of time getting to

1313
00:40:55,956 --> 0:40:58,456
know it and to we-- and to stand

1314
00:40:58,456 --> 0:41:00,216
up your implementations against

1315
00:40:58,456 --> 0:41:00,216
up your implementations against

1316
00:41:00,216 --> 0:41:01,246
our clients at scale.

1317
00:41:02,026 --> 0:41:03,606
So the short answer for what

1318
00:41:03,606 --> 0:41:04,996
that means is you need an app

1319
00:41:04,996 --> 0:41:06,286
entitlement for Low-Latency

1320
00:41:06,286 --> 0:41:06,576
mode.

1321
00:41:06,876 --> 0:41:08,026
This allows you to build your

1322
00:41:08,026 --> 0:41:09,756
app, test your Streams and even

1323
00:41:09,756 --> 0:41:11,206
deploy them and up to 10,000

1324
00:41:11,206 --> 0:41:12,646
beta users via TestFlight.

1325
00:41:13,056 --> 0:41:14,546
And then once you're confident

1326
00:41:14,806 --> 0:41:15,846
that things are working and the

1327
00:41:15,846 --> 0:41:17,596
beta period ends, you'll be able

1328
00:41:17,596 --> 0:41:18,696
to submit your apps to the

1329
00:41:18,696 --> 0:41:19,046
store.

1330
00:41:19,586 --> 0:41:22,026
So, in summary, go take a look

1331
00:41:22,026 --> 0:41:23,936
at the spec. Try it out in the

1332
00:41:23,936 --> 0:41:26,316
beta and start building your

1333
00:41:26,316 --> 0:41:27,856
back ends to support Low-Latency

1334
00:41:27,856 --> 0:41:28,596
Live Streams.

1335
00:41:29,146 --> 0:41:31,256
To help you with that, today or

1336
00:41:31,256 --> 0:41:32,616
this week rather, we have a

1337
00:41:32,616 --> 0:41:34,186
couple of HLS labs.

1338
00:41:34,646 --> 0:41:35,806
I'll be there along with a

1339
00:41:35,806 --> 0:41:37,616
number of other folks on my team

1340
00:41:37,616 --> 0:41:38,736
and we're happy to answer all

1341
00:41:38,736 --> 0:41:40,206
your questions about Low-Latency

1342
00:41:40,206 --> 0:41:42,356
HLS and any other HLS questions.

1343
00:41:42,646 --> 0:41:43,926
The first one is on Thursday

1344
00:41:43,926 --> 0:41:44,916
from 4 to 6.

1345
00:41:45,156 --> 0:41:47,056
The second is on Friday from 11

1346
00:41:47,376 --> 0:41:48,596
to 1, I think.

1347
00:41:49,166 --> 0:41:51,136
And so with that, thank you very

1348
00:41:51,136 --> 0:41:52,086
much for attending.

1349
00:41:52,086 --> 0:41:53,396
And I hope everyone has a great

1350
00:41:53,396 --> 0:41:53,676
show.

1351
00:41:54,516 --> 0:41:58,500
[ Applause ]
