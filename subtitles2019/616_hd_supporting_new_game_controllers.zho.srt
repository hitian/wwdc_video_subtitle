1
00:00:00,506 --> 0:00:06,076
[音乐]

2
00:00:06,576 --> 0:00:08,306
&gt;&gt; 大家好 我叫 James Kelly

3
00:00:08,306 --> 0:00:09,656
我是 Apple 公司

4
00:00:09,656 --> 0:00:10,746
游戏科技团队的

5
00:00:10,746 --> 0:00:12,146
一名软件工程师

6
00:00:12,936 --> 0:00:14,506
在这个视频中

7
00:00:14,506 --> 0:00:15,866
我们会讲到今年

8
00:00:15,866 --> 0:00:17,136
Game Controller 框架的

9
00:00:17,136 --> 0:00:18,576
新性能和变化

10
00:00:19,006 --> 0:00:20,366
以此来帮助大家

11
00:00:20,366 --> 0:00:21,706
采用新的可支持的 Game Controller

12
00:00:24,066 --> 0:00:25,126
Game Controller 框架

13
00:00:25,126 --> 0:00:26,506
让你可以更容易地

14
00:00:26,506 --> 0:00:28,356
为你在 iOS tvOS 和 macOS 上的游戏

15
00:00:28,616 --> 0:00:31,726
增加针对 MFi Game Controller 的支持

16
00:00:32,786 --> 0:00:33,856
通过普通的 API

17
00:00:33,856 --> 0:00:35,166
摘取控制器硬件

18
00:00:35,916 --> 0:00:37,026
Game Controller 框架

19
00:00:37,376 --> 0:00:38,676
让你可以在不用担心

20
00:00:39,206 --> 0:00:40,166
如何映像控制器数据的情况下

21
00:00:40,166 --> 0:00:41,966
一次性写好你的代码

22
00:00:43,986 --> 0:00:45,806
今年 我们很激动地介绍

23
00:00:45,806 --> 0:00:47,456
对于一些很好的控制器的

24
00:00:47,456 --> 0:00:48,746
新的支持

25
00:00:49,416 --> 0:00:51,096
首先是微软的

26
00:00:51,096 --> 0:00:53,536
可以使用蓝牙的无线 Xbox

27
00:00:54,066 --> 0:00:56,526
它现在可以无缝嵌入

28
00:00:56,526 --> 0:00:58,036
任何可以使用 Game Controller 框架的游戏

29
00:00:58,436 --> 0:01:00,156
这还不是全部

30
00:00:58,436 --> 0:01:00,156
这还不是全部

31
00:01:00,996 --> 0:01:02,606
Game Controller 框架

32
00:01:02,606 --> 0:01:04,416
现在也可以支持

33
00:01:04,416 --> 0:01:05,436
索尼的 DualShock 4 控制器

34
00:01:05,826 --> 0:01:07,856
通过 Game Controller 框架

35
00:01:07,896 --> 0:01:10,716
它可以与任何支持控制器的游戏兼容

36
00:01:13,406 --> 0:01:14,766
很多开发者

37
00:01:14,766 --> 0:01:16,136
在控制器的支持下

38
00:01:16,136 --> 0:01:17,026
已经创造了很多的好游戏

39
00:01:18,076 --> 0:01:20,446
雷曼大冒险 晶体管

40
00:01:21,146 --> 0:01:23,276
傲气雄鹰 阿尔托的冒险

41
00:01:23,276 --> 0:01:24,426
就是一些

42
00:01:24,426 --> 0:01:26,276
很好的例子 

43
00:01:26,276 --> 0:01:27,546
在 App Store 里的游戏很少

44
00:01:27,546 --> 0:01:28,396
能支持控制器

45
00:01:29,316 --> 0:01:30,286
通过使用 Game Controller 框架

46
00:01:30,286 --> 0:01:31,476
游戏将自动在 iOS 13 

47
00:01:31,476 --> 0:01:32,966
tvOS 13 和 

48
00:01:32,966 --> 0:01:34,126
macOS Catalina 中

49
00:01:34,126 --> 0:01:37,486
支持 Xbox 无线控制器

50
00:01:37,796 --> 0:01:39,056
和 DualShock 4 控制器

51
00:01:40,826 --> 0:01:42,276
在这个视频中

52
00:01:42,276 --> 0:01:43,526
我们还会讨论如何通过

53
00:01:43,526 --> 0:01:44,876
Game Controller 框架

54
00:01:44,876 --> 0:01:46,096
为新的控制器寻找一个参考

55
00:01:46,096 --> 0:01:48,166
如何访问输入参数

56
00:01:48,166 --> 0:01:49,406
一些支持 MFi

57
00:01:49,406 --> 0:01:51,746
Xbox 无线控制器和 DualShock 4 

58
00:01:51,746 --> 0:01:53,716
的 UI 最佳操作

59
00:01:53,716 --> 0:01:55,236
还有一些关于如何

60
00:01:55,236 --> 0:01:57,156
更新你们在 macOS 上之前通过 

61
00:01:57,156 --> 0:01:58,626
如 IOKit 等更低版本的框架

62
00:01:58,626 --> 0:02:01,606
来支持游戏控制器的一些游戏的建议

63
00:01:58,626 --> 0:02:01,606
来支持游戏控制器的一些游戏的建议

64
00:02:02,716 --> 0:02:04,546
首先 让我们来谈谈

65
00:02:04,546 --> 0:02:05,556
支持这些新的控制器后

66
00:02:05,556 --> 0:02:07,616
Game Controller 框架的变化

67
00:02:08,086 --> 0:02:11,706
友情提醒

68
00:02:11,706 --> 0:02:12,776
已经使用 Game Controller 框架的

69
00:02:12,776 --> 0:02:13,996
游戏会免费获得支持

70
00:02:13,996 --> 0:02:15,936
这意味着如果你的游戏

71
00:02:15,936 --> 0:02:17,536
支持 MFi 控制器

72
00:02:17,536 --> 0:02:19,106
它也会自动支持

73
00:02:19,166 --> 0:02:21,486
Xbox 无线控制器和 DualShock 4

74
00:02:22,016 --> 0:02:24,576
我们可以通过

75
00:02:24,576 --> 0:02:26,586
GCController 的 GCExtendedGamepad 文件

76
00:02:26,736 --> 0:02:28,716
来获得控制器的输入值

77
00:02:31,146 --> 0:02:32,366
如果你们是第一次使用

78
00:02:32,366 --> 0:02:33,446
Game Controller 框架

79
00:02:33,606 --> 0:02:34,856
我们来简单谈谈

80
00:02:34,856 --> 0:02:35,866
如何检测一个控制器

81
00:02:36,846 --> 0:02:38,356
每个控制器都由

82
00:02:38,356 --> 0:02:40,566
一个名为 GCController 的类所代表

83
00:02:41,206 --> 0:02:42,426
这对于 MFi Xbox 无线控制器

84
00:02:42,426 --> 0:02:45,246
DualShock 4 控制器等所有游戏控制器

85
00:02:45,486 --> 0:02:47,166
都是相同的类

86
00:02:47,166 --> 0:02:48,506
串口遥控器也是一样

87
00:02:48,506 --> 0:02:50,316
它们都是 GCController 的例子

88
00:02:52,366 --> 0:02:54,566
你要做的第一件事就是列一个

89
00:02:54,566 --> 0:02:55,586
现有的连接的控制器名单

90
00:02:56,326 --> 0:02:58,516
为了做到这个 你需要使用

91
00:02:58,636 --> 0:03:00,036
GCController 的 controllers 类方法

92
00:02:58,636 --> 0:03:00,036
GCController 的 controllers 类方法

93
00:03:01,006 --> 0:03:02,376
它会回传一个

94
00:03:02,376 --> 0:03:03,766
代表了所有连接的

95
00:03:04,146 --> 0:03:05,936
控制器的 GCController 实例的阵列

96
00:03:06,476 --> 0:03:08,226
如果没有连接任何控制器

97
00:03:08,226 --> 0:03:09,216
这个阵列将是空的

98
00:03:10,216 --> 0:03:11,656
你应该酌情

99
00:03:11,656 --> 0:03:12,996
在你启动自己的 App 并装配控制器时

100
00:03:12,996 --> 0:03:14,106
检查这个阵列

101
00:03:17,576 --> 0:03:18,836
在你的 App 运行时

102
00:03:18,836 --> 0:03:21,056
连接或断开控制器是很正常的

103
00:03:21,596 --> 0:03:23,386
比如说 玩家在打开你的游戏后

104
00:03:23,386 --> 0:03:24,326
可能会打开他们的控制器

105
00:03:24,326 --> 0:03:26,716
他们的控制器可能会没电

106
00:03:26,716 --> 0:03:28,546
或者他们的控制器

107
00:03:28,546 --> 0:03:29,776
有可能超出范围了

108
00:03:31,226 --> 0:03:32,596
为了告知这些情况

109
00:03:32,946 --> 0:03:34,996
为 GCControllerDidConnect Notification

110
00:03:34,996 --> 0:03:37,146
和 GCControllerDiddisconnect Notification

111
00:03:37,146 --> 0:03:39,636
添加观察器

112
00:03:40,406 --> 0:03:41,856
你的 App 

113
00:03:41,856 --> 0:03:43,626
用选项方法来完成启动

114
00:03:43,626 --> 0:03:44,736
是一个很好的办法

115
00:03:46,606 --> 0:03:48,306
现在你们试图

116
00:03:48,306 --> 0:03:49,406
抓住一个连接的控制器的例子

117
00:03:49,406 --> 0:03:50,886
我们来讨论一下

118
00:03:50,886 --> 0:03:52,316
它可能拥有的按钮和其他输入

119
00:03:52,316 --> 0:03:53,916
以及如何访问它们

120
00:03:56,076 --> 0:03:57,856
首先 让我们简要概述一下

121
00:03:57,856 --> 0:03:59,176
在控制器上有哪些可用的输入端

122
00:04:00,186 --> 0:04:02,356
控制器有两个扳机

123
00:04:02,356 --> 0:04:04,556
一个方向柄 

124
00:04:04,556 --> 0:04:08,896
两个手摇杆 一个菜单按钮

125
00:04:08,896 --> 0:04:11,746
四个功能按钮

126
00:04:11,746 --> 0:04:14,226
一个可程序化的 4-LED 条 

127
00:04:14,226 --> 0:04:14,746
两个侧肩按钮

128
00:04:18,336 --> 0:04:19,776
我们先以四个功能按钮为例

129
00:04:19,776 --> 0:04:21,565
仔细看看

130
00:04:22,276 --> 0:04:24,426
实体钮如何映射到 API

131
00:04:25,586 --> 0:04:27,156
我们现在看到的表格

132
00:04:27,156 --> 0:04:28,436
列举了在控制器的 extendedGamepad 文件上的

133
00:04:28,786 --> 0:04:31,526
四个功能按钮的属性

134
00:04:32,456 --> 0:04:33,956
MFi 控制器上的功能键

135
00:04:33,956 --> 0:04:35,436
和 Xbox 无线控制器一样

136
00:04:35,436 --> 0:04:38,306
可能会直接

137
00:04:38,306 --> 0:04:39,596
映射到这个 API 上

138
00:04:42,196 --> 0:04:43,706
请注意关于 DualShock 4 控制器

139
00:04:43,706 --> 0:04:45,246
有些细节需要考虑

140
00:04:45,246 --> 0:04:47,226
因为它们使用图标

141
00:04:47,276 --> 0:04:48,826
而不是字母

142
00:04:48,826 --> 0:04:49,666
来代表它们的功能按钮

143
00:04:50,656 --> 0:04:51,766
为了防止

144
00:04:51,766 --> 0:04:53,476
将输入端映射到 API 上时

145
00:04:53,476 --> 0:04:55,786
会有歧义 我们使用

146
00:04:55,786 --> 0:04:58,206
位置等量来解决这些映射

147
00:04:59,716 --> 0:05:01,546
比如说

148
00:04:59,716 --> 0:05:01,546
比如说

149
00:05:01,546 --> 0:05:03,266
如果我们把功能键当成

150
00:05:03,266 --> 0:05:04,576
在控制器右侧

151
00:05:04,576 --> 0:05:06,726
被排列成钻石形状的四个按钮

152
00:05:06,726 --> 0:05:08,246
那么底部的十字按钮

153
00:05:08,246 --> 0:05:09,736
就和 MFi 控制器底部的 A 按钮

154
00:05:09,736 --> 0:05:12,056
在位置上是等量的

155
00:05:12,476 --> 0:05:14,556
所以它会映射到按钮 A 的属性

156
00:05:15,076 --> 0:05:18,286
这个带圆圈的功能按钮

157
00:05:18,286 --> 0:05:20,186
则映射到按钮 B

158
00:05:20,186 --> 0:05:21,636
诸如此类

159
00:05:24,286 --> 0:05:26,066
接下来 我们来谈谈

160
00:05:26,066 --> 0:05:27,976
可点击的手摇杆或者 L3 R3

161
00:05:30,906 --> 0:05:31,846
我们在 iOS 12.1 tvOS 12.1 

162
00:05:31,846 --> 0:05:33,146
和 macOS Mojave 10.14.1 的

163
00:05:33,146 --> 0:05:35,936
Game Controller 框架中

164
00:05:35,936 --> 0:05:39,596
为这些输入增加了支持

165
00:05:40,496 --> 0:05:41,926
尽管 Xbox 无线控制器和

166
00:05:41,926 --> 0:05:43,676
DualShock 4 控制器

167
00:05:43,676 --> 0:05:44,636
都有可点击的手摇杆

168
00:05:45,046 --> 0:05:46,656
MFi 控制器的某些种类

169
00:05:46,656 --> 0:05:48,516
中的控制器可能不能点击

170
00:05:49,186 --> 0:05:50,466
让我们通过一个代码

171
00:05:50,466 --> 0:05:51,676
来看看如何解决这个问题

172
00:05:53,346 --> 0:05:54,236
比如说我们想要

173
00:05:54,236 --> 0:05:55,926
在玩家按 L3 的时候

174
00:05:55,926 --> 0:05:57,296
让玩家的人物蹲下

175
00:05:57,296 --> 0:05:59,786
如果我们支持老版的

176
00:05:59,786 --> 0:06:02,606
iOS tvOS 或 macOS

177
00:05:59,786 --> 0:06:02,606
iOS tvOS 或 macOS

178
00:06:03,086 --> 0:06:04,446
我们首先应该检查

179
00:06:04,446 --> 0:06:05,396
我们是否有可以使用的

180
00:06:05,396 --> 0:06:07,376
可点击的手摇杆的 API

181
00:06:09,926 --> 0:06:11,436
即使我们这样做了

182
00:06:11,436 --> 0:06:12,346
我们映射的特定的控制器

183
00:06:12,346 --> 0:06:14,216
可能也不一定有

184
00:06:14,216 --> 0:06:15,306
可点击的手摇杆

185
00:06:16,176 --> 0:06:17,856
所以 我们要检查看看是否

186
00:06:17,856 --> 0:06:19,086
左摇杆按钮是新的

187
00:06:19,636 --> 0:06:21,406
如果是的话

188
00:06:21,406 --> 0:06:22,616
我们要保证我们准备

189
00:06:22,616 --> 0:06:24,566
映射到 L3 的用户交互

190
00:06:24,566 --> 0:06:25,856
在这个例子中 也就是让游戏人物蹲下

191
00:06:26,386 --> 0:06:28,056
可以通过一些其他方式实现

192
00:06:31,486 --> 0:06:32,506
如果我们要

193
00:06:32,506 --> 0:06:33,866
与一个我们已知的带可点击手摇杆

194
00:06:33,866 --> 0:06:35,256
的控制器工作时

195
00:06:35,256 --> 0:06:36,856
我们只需要将性能

196
00:06:36,856 --> 0:06:38,626
指定到 L3 的按压柄

197
00:06:38,946 --> 0:06:40,136
当玩家点击

198
00:06:40,136 --> 0:06:41,936
左侧的手摇杆时

199
00:06:41,936 --> 0:06:43,576
游戏会触发玩家角色下蹲

200
00:06:46,476 --> 0:06:47,706
如果我们的游戏

201
00:06:47,706 --> 0:06:50,226
在没有这个 API 的 

202
00:06:50,226 --> 0:06:52,176
iOS tvOS 或 macOS 版本上运行 

203
00:06:52,176 --> 0:06:52,956
我们还是需要编写一个代码

204
00:06:52,956 --> 0:06:54,906
为游戏角色下蹲创建一个可替换路径

205
00:06:57,856 --> 0:06:59,336
接下来 我们来谈谈

206
00:06:59,336 --> 0:07:00,846
加入到 API 的支持

207
00:06:59,336 --> 0:07:00,846
加入到 API 的支持

208
00:07:00,846 --> 0:07:02,516
Xbox 无线控制器和  DualShock 4 控制器的

209
00:07:02,516 --> 0:07:03,786
一些新的按钮

210
00:07:03,786 --> 0:07:05,466
这就是我们所称的

211
00:07:05,646 --> 0:07:06,806
辅助按钮

212
00:07:07,546 --> 0:07:08,636
这些按钮

213
00:07:08,636 --> 0:07:10,306
通常出现在控制器的中间

214
00:07:12,526 --> 0:07:13,966
首先 我们有菜单按钮

215
00:07:14,546 --> 0:07:15,606
它应该用于暂停

216
00:07:15,606 --> 0:07:16,766
游戏并弹出

217
00:07:16,766 --> 0:07:17,806
游戏中的暂停菜单

218
00:07:18,476 --> 0:07:19,986
所有支持的控制器

219
00:07:19,986 --> 0:07:20,516
都有这个按钮

220
00:07:22,186 --> 0:07:23,646
现在让我们来看看选项按钮

221
00:07:24,336 --> 0:07:25,646
这是一个通用按钮

222
00:07:25,896 --> 0:07:26,956
但是你应该避免使用它

223
00:07:26,956 --> 0:07:28,546
用于时间先决的活动

224
00:07:28,546 --> 0:07:30,286
它一般位于旁侧

225
00:07:31,296 --> 0:07:32,386
需要注意的 不是所有

226
00:07:32,386 --> 0:07:33,116
控制器都有这个按钮

227
00:07:36,316 --> 0:07:37,596
我们来看看这些新的 API

228
00:07:37,596 --> 0:07:39,566
是如何映射到现有的 MFi 

229
00:07:39,566 --> 0:07:43,086
控制器上的中间的菜单按钮

230
00:07:43,086 --> 0:07:44,266
直接映射到 GCExtendedGamepad 的

231
00:07:44,266 --> 0:07:46,506
按钮菜单属性

232
00:07:48,236 --> 0:07:49,876
在这个例子中需要注意的是

233
00:07:49,906 --> 0:07:52,056
这个 MFi 控制器没有一个选项按钮

234
00:07:52,396 --> 0:07:53,966
所以 GCExtendedGamepad 的

235
00:07:54,056 --> 0:07:55,836
按钮选项属性是新的

236
00:07:57,496 --> 0:07:59,786
接着就是 Xbox 无线控制器

237
00:07:59,856 --> 0:08:02,606
如果一个控制器

238
00:07:59,856 --> 0:08:02,606
如果一个控制器

239
00:08:02,646 --> 0:08:04,506
有很多辅助按钮

240
00:08:04,506 --> 0:08:05,796
我们限定这些按钮

241
00:08:05,796 --> 0:08:06,856
映射为使用位置等量

242
00:08:08,426 --> 0:08:10,176
右辅助按钮

243
00:08:10,176 --> 0:08:11,756
在这个例子中也就是

244
00:08:11,756 --> 0:08:13,606
Xbox 无线控制器的菜单按钮

245
00:08:13,606 --> 0:08:14,956
直接映射到按钮菜单性能

246
00:08:14,956 --> 0:08:18,326
而左辅助按钮

247
00:08:18,326 --> 0:08:21,276
或 Xbox 无线控制器的视图按钮

248
00:08:21,276 --> 0:08:23,796
映射到按钮的选项属性

249
00:08:25,786 --> 0:08:27,626
在控制器中间的

250
00:08:27,626 --> 0:08:29,896
Xbox 按钮则被保留为系统使用

251
00:08:32,395 --> 0:08:33,856
相同的方法也可以

252
00:08:33,966 --> 0:08:35,006
运用于 DualShock 4

253
00:08:36,486 --> 0:08:38,096
我们还是可以使用

254
00:08:38,096 --> 0:08:40,155
位置等量来限定按钮的映射

255
00:08:41,905 --> 0:08:43,366
右辅助按钮或者

256
00:08:43,366 --> 0:08:45,046
DualShock 4 的选项按钮

257
00:08:45,396 --> 0:08:46,526
映射到按钮菜单属性

258
00:08:46,526 --> 0:08:49,376
左辅助按钮

259
00:08:49,376 --> 0:08:51,276
DualShock 4 的分享按钮

260
00:08:51,276 --> 0:08:53,276
映射到

261
00:08:53,276 --> 0:08:54,486
按钮选项属性

262
00:08:54,986 --> 0:08:57,566
控制器中间的

263
00:08:57,566 --> 0:08:59,286
PS 按钮同样也被保留了

264
00:09:03,276 --> 0:09:04,676
请注意我们已经弃用了

265
00:09:04,676 --> 0:09:05,876
contollerPausedHandler

266
00:09:06,716 --> 0:09:07,976
你现在应该使用

267
00:09:07,976 --> 0:09:09,576
buttonMenu API

268
00:09:10,346 --> 0:09:11,696
我们来通过一个代码例子

269
00:09:11,696 --> 0:09:12,986
来看看如何处理这个

270
00:09:17,036 --> 0:09:18,256
比如我们想在玩家按下菜单按钮时

271
00:09:18,256 --> 0:09:21,156
暂停或者开始这个游戏

272
00:09:21,766 --> 0:09:23,426
如果我们支持

273
00:09:23,426 --> 0:09:26,136
更旧版本的 iOS tvOS 或 macOS

274
00:09:26,426 --> 0:09:27,576
我们应该先检查

275
00:09:27,576 --> 0:09:29,536
我们是否有新的菜单按钮 API

276
00:09:31,226 --> 0:09:33,076
如果有的话 我们先在

277
00:09:33,076 --> 0:09:35,056
extendedGamepad 上的按钮菜单

278
00:09:35,056 --> 0:09:37,306
注册一个 PressedChangedHandler 属性

279
00:09:39,566 --> 0:09:41,046
在这个处理器中

280
00:09:41,046 --> 0:09:41,816
我们切换暂停菜单

281
00:09:42,386 --> 0:09:43,746
一般来说 当玩家想要

282
00:09:43,746 --> 0:09:45,316
暂停游戏 他们都想立刻暂停

283
00:09:45,316 --> 0:09:47,066
所以我们需要保证

284
00:09:47,066 --> 0:09:47,886
在按下按钮的时候

285
00:09:47,886 --> 0:09:49,946
而不是放开按钮的时候

286
00:09:49,946 --> 0:09:50,906
就能触发这个行为

287
00:09:53,686 --> 0:09:55,426
如果新的 API 不可行

288
00:09:55,826 --> 0:09:56,736
我们还是应该

289
00:09:56,736 --> 0:09:58,046
将我们的功能注册于

290
00:09:58,046 --> 0:09:59,226
旧的 controllerPausedHandler

291
00:09:59,546 --> 0:10:01,026
当菜单按钮被按下时

292
00:09:59,546 --> 0:10:01,026
当菜单按钮被按下时

293
00:10:01,026 --> 0:10:02,196
它们就会被触发

294
00:10:02,196 --> 0:10:06,076
那就是菜单按钮

295
00:10:07,496 --> 0:10:08,736
现在我们现在来看看

296
00:10:08,736 --> 0:10:09,076
选项按钮选项按钮

297
00:10:09,816 --> 0:10:11,456
我们还是需要记住

298
00:10:11,456 --> 0:10:12,926
不是所有的控制器都有这个按钮

299
00:10:13,756 --> 0:10:16,036
我们再通过另一个代码的例子

300
00:10:16,036 --> 0:10:16,626
来看如何处理这个

301
00:10:18,656 --> 0:10:20,076
我们想要在玩家按下选项按钮时

302
00:10:20,076 --> 0:10:21,726
能够触发一个

303
00:10:21,726 --> 0:10:23,556
在游戏中的设定菜单

304
00:10:24,016 --> 0:10:26,026
如果我们支持

305
00:10:26,026 --> 0:10:28,476
更老版本的 iOS tvOS 或 macOS

306
00:10:28,906 --> 0:10:30,186
我们首先应该看一下

307
00:10:30,186 --> 0:10:31,616
我们是否有新的选项按钮

308
00:10:33,496 --> 0:10:34,926
即使我们有

309
00:10:34,926 --> 0:10:36,176
我们映射的控制器

310
00:10:36,176 --> 0:10:37,576
也不一定有一个

311
00:10:37,576 --> 0:10:37,986
实体选项按钮

312
00:10:39,026 --> 0:10:40,056
所以我们检查一下

313
00:10:40,056 --> 0:10:41,076
看看选项按钮是否是新的

314
00:10:41,546 --> 0:10:43,386
如果是的话

315
00:10:43,386 --> 0:10:44,506
我们需要保证设定菜单

316
00:10:44,506 --> 0:10:46,256
通过其他方法是可访问的

317
00:10:46,496 --> 0:10:48,616
比如说 我们可以将其

318
00:10:48,616 --> 0:10:49,906
列为暂停菜单中的一个项目

319
00:10:51,736 --> 0:10:53,196
如果控制器有一个

320
00:10:53,196 --> 0:10:54,616
选项按钮 我们可以将

321
00:10:54,616 --> 0:10:56,256
我们的行为指定至

322
00:10:56,396 --> 0:10:57,146
buttonOptions.pressedHandler

323
00:10:57,936 --> 0:10:59,056
当一个玩家点击

324
00:10:59,056 --> 0:11:00,446
选项按钮时

325
00:10:59,056 --> 0:11:00,446
选项按钮时

326
00:11:00,446 --> 0:11:01,656
游戏会切换设定菜单

327
00:11:04,236 --> 0:11:06,076
如果新的 API 是不可行的

328
00:11:06,406 --> 0:11:07,436
我们还是需要保证

329
00:11:07,576 --> 0:11:09,946
有可以到达设定菜单的可替换路径

330
00:11:10,436 --> 0:11:12,326
我们刚刚快速看了一下

331
00:11:12,326 --> 0:11:13,676
今年加入 Game Controller 框架

332
00:11:13,676 --> 0:11:14,826
可以支持新增的

333
00:11:15,036 --> 0:11:16,106
Xbox 无线控制器和 DualShock 4 控制器的

334
00:11:16,106 --> 0:11:18,486
新的 API

335
00:11:20,666 --> 0:11:22,276
现在 让我们来谈谈

336
00:11:22,276 --> 0:11:23,876
处理不同的控制器的

337
00:11:23,876 --> 0:11:25,086
的 UI 最佳操作

338
00:11:25,086 --> 0:11:26,426
这样你的用户可以

339
00:11:26,426 --> 0:11:27,896
最大程度地最好地体验你的游戏

340
00:11:30,496 --> 0:11:31,166
因为 Game Controller 框架

341
00:11:31,166 --> 0:11:32,416
被扩展为

342
00:11:32,416 --> 0:11:33,866
不仅仅是支持 MFi 控制器

343
00:11:33,866 --> 0:11:36,176
因此需要考虑一个新的问题

344
00:11:36,776 --> 0:11:38,616
按钮和其他输入

345
00:11:38,616 --> 0:11:40,066
可能在控制器间

346
00:11:40,116 --> 0:11:40,996
在视觉上是不协调的

347
00:11:41,736 --> 0:11:43,426
在这个例子中

348
00:11:43,426 --> 0:11:45,346
提示符中的 B 按钮只匹配 MFi 控制器

349
00:11:45,346 --> 0:11:48,806
Xbox 无线控制器的 B按钮是红色的

350
00:11:48,976 --> 0:11:52,616
DualShock 4 则是一个圆形按钮

351
00:11:54,306 --> 0:11:55,346
我们仔细看看

352
00:11:55,346 --> 0:11:57,086
如何处理这个问题

353
00:11:57,836 --> 0:11:58,816
如果你让你的玩家

354
00:11:58,816 --> 0:12:01,356
接触你游戏的基础结构

355
00:11:58,816 --> 0:12:01,356
接触你游戏的基础结构

356
00:12:01,356 --> 0:12:02,486
你想要展示一个

357
00:12:02,486 --> 0:12:04,006
游戏中的提示符来告诉他们如何限制

358
00:12:04,006 --> 0:12:05,876
在这个例子中

359
00:12:05,876 --> 0:12:07,336
你的限制功能会映射到

360
00:12:07,336 --> 0:12:09,926
GCExtendedGamepad 的按钮 B 属性

361
00:12:11,406 --> 0:12:13,026
对于 MFi 控制器来说

362
00:12:13,026 --> 0:12:14,976
我们正如之前做的那样

363
00:12:15,076 --> 0:12:15,906
展示我们的 MFi B 按钮素材

364
00:12:16,216 --> 0:12:18,876
对于 Xbox 无线控制器来说

365
00:12:18,876 --> 0:12:20,356
我们需要

366
00:12:20,356 --> 0:12:22,066
微调素材

367
00:12:22,066 --> 0:12:23,196
在这个例子中

368
00:12:23,196 --> 0:12:23,766
就是把 B 按钮变红

369
00:12:25,256 --> 0:12:26,736
最后 当 DualShock 4 是

370
00:12:26,736 --> 0:12:28,396
现用的控制器时

371
00:12:28,396 --> 0:12:29,336
我们会展示一个圆形按钮

372
00:12:30,036 --> 0:12:31,126
现在 不管玩家在

373
00:12:31,126 --> 0:12:32,466
使用哪个控制器

374
00:12:32,656 --> 0:12:34,136
他们都可以很容易地理解

375
00:12:34,136 --> 0:12:34,926
你游戏中的提示符

376
00:12:35,676 --> 0:12:38,376
我们通过一个代码示例来看看如何实现这个

377
00:12:41,346 --> 0:12:42,736
在这里我们有一个名为

378
00:12:42,736 --> 0:12:45,576
getBlockButtonAsset 的简单功能

379
00:12:45,576 --> 0:12:46,566
它会将合适的艺术素材

380
00:12:46,566 --> 0:12:47,846
返回至 block 按钮

381
00:12:49,216 --> 0:12:50,806
首先 我们切换

382
00:12:50,806 --> 0:12:53,026
控制器的产品种类

383
00:12:53,026 --> 0:12:54,676
这是 GCController 新增加的

384
00:12:54,676 --> 0:12:57,456
决定这是哪种类型的控制器的新性能

385
00:12:57,536 --> 0:12:59,936
如果这是一个 Xbox 无线控制器

386
00:12:59,936 --> 0:13:01,766
我们会返回

387
00:12:59,936 --> 0:13:01,766
我们会返回

388
00:13:01,766 --> 0:13:03,156
红色 B 按钮素材

389
00:13:03,616 --> 0:13:05,666
如果这是一个 DualShock 4

390
00:13:05,666 --> 0:13:07,456
游戏控制器  我们将返回

391
00:13:07,596 --> 0:13:08,566
红色的圆形按钮素材

392
00:13:09,696 --> 0:13:11,106
最后 默认情况下

393
00:13:11,556 --> 0:13:14,026
推翻 MFi 绿色 B 按钮素材

394
00:13:14,886 --> 0:13:16,346
通过这种方式 你的游戏将支持

395
00:13:16,346 --> 0:13:17,566
当前可用的各种

396
00:13:17,566 --> 0:13:18,896
MFi控制器

397
00:13:19,146 --> 0:13:20,446
并在未来添加新的

398
00:13:20,446 --> 0:13:21,816
支持的控制器时可以

399
00:13:21,816 --> 0:13:23,416
很好地回到一个可感测的素材

400
00:13:24,356 --> 0:13:26,286
让我们回到前面的 block 示例

401
00:13:27,176 --> 0:13:29,516
你们可以在游戏教程和提示中

402
00:13:29,516 --> 0:13:31,556
使用通用符号 而不是

403
00:13:31,556 --> 0:13:32,826
为每种类型的控制器

404
00:13:32,826 --> 0:13:34,246
创建独特的图片素材

405
00:13:36,226 --> 0:13:37,706
通过提供一个

406
00:13:37,916 --> 0:13:39,126
不依赖于其他任何内容

407
00:13:39,126 --> 0:13:39,926
只依赖于位置等量的通用提示符

408
00:13:39,926 --> 0:13:42,336
不管连接的是哪种控制器 

409
00:13:42,336 --> 0:13:43,966
你可以放心

410
00:13:43,966 --> 0:13:45,576
你的玩家将能够轻松理解

411
00:13:45,966 --> 0:13:48,046
你的游戏内的引导教学

412
00:13:48,786 --> 0:13:50,726
在这个例子中 很明显

413
00:13:50,726 --> 0:13:52,696
玩家应该按右侧的功能按钮

414
00:13:54,966 --> 0:13:57,246
最后一点需要注意的是

415
00:13:57,246 --> 0:13:58,506
即使玩家是独自玩游戏

416
00:13:58,506 --> 0:14:00,016
他也可能同时有多个控制器

417
00:13:58,506 --> 0:14:00,016
他也可能同时有多个控制器

418
00:14:00,406 --> 0:14:01,446
连接到他们的设备上

419
00:14:02,316 --> 0:14:03,566
在这种情况下

420
00:14:03,666 --> 0:14:04,726
你应该支持

421
00:14:04,726 --> 0:14:06,216
所有连接的控制器

422
00:14:06,216 --> 0:14:07,886
因为玩家可能随时在它们之间切换

423
00:14:08,816 --> 0:14:09,656
这意味着你需要

424
00:14:09,656 --> 0:14:10,936
识别来自所有连接的控制器的输入

425
00:14:10,936 --> 0:14:12,746
不论是

426
00:14:12,746 --> 0:14:14,186
将它们分别拖拽到每一帧中

427
00:14:14,186 --> 0:14:15,606
或者为它们中的每一个

428
00:14:15,606 --> 0:14:16,146
注册输入处理器

429
00:14:17,226 --> 0:14:18,396
你还应该更新

430
00:14:18,396 --> 0:14:20,216
游戏内的引导教程和视觉效果

431
00:14:20,216 --> 0:14:21,966
以匹配最近使用的控制器

432
00:14:22,326 --> 0:14:25,426
例如 如果玩家

433
00:14:25,426 --> 0:14:26,656
正在使用他们的 MFi 控制器

434
00:14:26,926 --> 0:14:29,406
显示适当的 MFi 图片素材

435
00:14:30,856 --> 0:14:32,356
如果玩家在他们连接的

436
00:14:32,356 --> 0:14:33,526
DualShock 4 上按下了输入端

437
00:14:33,526 --> 0:14:35,926
所有游戏中的图像

438
00:14:35,926 --> 0:14:37,356
将自动调整

439
00:14:37,356 --> 0:14:39,176
使用 DualShock 4 图片素材

440
00:14:40,246 --> 0:14:41,396
通过动态调整你的图像

441
00:14:41,396 --> 0:14:43,966
来适应最近使用的控制器 

442
00:14:43,966 --> 0:14:45,036
你会为你的玩家

443
00:14:45,036 --> 0:14:46,176
提供一个直接的和改善的

444
00:14:46,176 --> 0:14:47,426
控制器操作的体验

445
00:14:49,566 --> 0:14:50,786
对于那些

446
00:14:50,786 --> 0:14:52,086
之前已经将在 macOS

447
00:14:52,086 --> 0:14:53,536
上的游戏控制器支持

448
00:14:53,536 --> 0:14:54,526
放在 Game Controller 框架之外的人来说

449
00:14:54,526 --> 0:14:56,386
我们对于你们的游戏

450
00:14:56,386 --> 0:14:57,096
有些新的指导

451
00:14:58,976 --> 0:15:01,026
当你采取 Game Controller 框架时

452
00:14:58,976 --> 0:15:01,026
当你采取 Game Controller 框架时

453
00:15:01,026 --> 0:15:02,896
控制器就会启动

454
00:15:02,896 --> 0:15:05,036
你应该在 macOS 上

455
00:15:05,036 --> 0:15:06,326
使用它支持 Mfi Xbox 无线和

456
00:15:06,326 --> 0:15:07,886
DualShock 4 控制器

457
00:15:08,476 --> 0:15:10,716
我们抽象化了在不同控制器间不一样的

458
00:15:10,716 --> 0:15:11,906
硬件的复杂性

459
00:15:11,906 --> 0:15:13,936
我们为你们的 App

460
00:15:13,936 --> 0:15:15,196
在 iOS tvOS 和 macOS 中

461
00:15:15,246 --> 0:15:17,886
提供了一致性

462
00:15:18,946 --> 0:15:20,256
这也可以帮助你们的 App

463
00:15:20,256 --> 0:15:23,766
保持与现有或未来 OS 更新后的兼容性

464
00:15:24,196 --> 0:15:26,886
对于那些

465
00:15:26,886 --> 0:15:28,286
之前通过更低等级的

466
00:15:28,286 --> 0:15:29,576
如 IOKit 的 API 

467
00:15:29,576 --> 0:15:31,896
硬代码支持的控制器

468
00:15:31,896 --> 0:15:33,306
我们强烈建议

469
00:15:33,306 --> 0:15:34,686
你们将执行

470
00:15:34,686 --> 0:15:35,666
转移到 Game Controller 框架中

471
00:15:36,786 --> 0:15:38,086
因为新的控制器会出现在

472
00:15:38,086 --> 0:15:39,426
IOKit 和 Game Controller 框架中

473
00:15:39,426 --> 0:15:41,156
你应该丢弃你的 IOKit 执行

474
00:15:41,156 --> 0:15:44,226
来保证没有冲突

475
00:15:45,496 --> 0:15:46,856
这会允许你

476
00:15:46,856 --> 0:15:48,496
对一个单一的界面

477
00:15:48,496 --> 0:15:49,716
进行编码 并免费接收

478
00:15:49,716 --> 0:15:50,036
新的游戏控制器支持

479
00:15:53,746 --> 0:15:55,016
让我们来总结一下在这个

480
00:15:55,016 --> 0:15:56,046
视频中讨论的内容

481
00:15:57,776 --> 0:15:59,006
Game Controller 框架

482
00:15:59,006 --> 0:16:00,196
通过一个共同的 API

483
00:15:59,006 --> 0:16:00,196
通过一个共同的 API

484
00:16:00,196 --> 0:16:01,586
提取硬件

485
00:16:01,586 --> 0:16:03,356
让你只需要编写一次代码

486
00:16:03,356 --> 0:16:04,336
而不需要担心不同控制器间

487
00:16:04,336 --> 0:16:06,286
低版本的差异

488
00:16:07,256 --> 0:16:09,446
这个的好处是可以让你的游戏

489
00:16:09,446 --> 0:16:10,726
自动支持新加入的

490
00:16:10,726 --> 0:16:12,096
如 Xbox 无线控制器和 DualShock 4 控制器

491
00:16:12,096 --> 0:16:14,506
等游戏控制器

492
00:16:15,816 --> 0:16:17,706
然而 为了给你的玩家

493
00:16:17,706 --> 0:16:18,926
提供最好的用户体验

494
00:16:18,926 --> 0:16:20,716
你应该改变你游戏的 UI

495
00:16:20,716 --> 0:16:22,216
和屏幕上的

496
00:16:22,216 --> 0:16:24,316
对有效的控制器的指示器

497
00:16:25,576 --> 0:16:27,396
最后 通过将现有的控制器支持

498
00:16:27,396 --> 0:16:29,096
从低版本的 API 转移到

499
00:16:29,096 --> 0:16:31,066
Game Controller 框架

500
00:16:31,066 --> 0:16:32,436
来保证你的 

501
00:16:32,436 --> 0:16:34,546
macOS App 与未来的 OS 更新是兼容的

502
00:16:35,966 --> 0:16:37,136
更多关于

503
00:16:37,136 --> 0:16:38,616
今年游戏控制器的更新

504
00:16:38,616 --> 0:16:40,296
可以在 Apple 开发人员网站上找到

505
00:16:43,106 --> 0:16:44,236
这就是今年

506
00:16:44,236 --> 0:16:44,946
游戏控制器的更新

507
00:16:45,296 --> 0:16:46,346
谢谢观看

508
00:16:46,886 --> 0:16:49,386
我们希望这些信息能对你们有帮助

509
00:16:49,386 --> 0:16:50,486
你们可以用这些内容

510
00:16:50,486 --> 0:16:51,936
创造一些支持游戏控制器的好游戏
