1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:13,166 --> 0:00:13,866
下午好

3
00:00:14,016 --> 0:00:15,216
[掌声]

4
00:00:15,216 --> 0:00:16,826
欢迎来到会议 225

5
00:00:17,536 --> 0:00:18,696
我叫 Brad Ford

6
00:00:18,966 --> 0:00:20,736
我在摄像头软件团队工作

7
00:00:21,396 --> 0:00:22,906
感谢你们

8
00:00:22,906 --> 0:00:23,946
一直坚持到最后

9
00:00:24,016 --> 0:00:25,216
我知道这是很漫长的一天

10
00:00:25,706 --> 0:00:26,826
我们非常感谢你们

11
00:00:26,826 --> 0:00:28,126
能和我们一直待到这个深夜秀

12
00:00:28,126 --> 0:00:30,026
作为一个五点的会议

13
00:00:30,296 --> 0:00:31,226
这个真的很不错

14
00:00:32,726 --> 0:00:33,806
我们今天会介绍

15
00:00:33,806 --> 0:00:35,196
两个 iOS Camera Stack

16
00:00:35,196 --> 0:00:36,416
新的增加功能

17
00:00:36,566 --> 0:00:37,896
我会用最开始的 40 分钟左右

18
00:00:37,896 --> 0:00:40,466
介绍多摄像头摄制

19
00:00:40,786 --> 0:00:42,726
然后我会邀请 Jacob 和 David

20
00:00:42,726 --> 0:00:45,026
上来谈一谈语义分割

21
00:00:46,016 --> 0:00:47,936
首先 多摄像头摄制

22
00:00:47,936 --> 0:00:50,706
或者用我们内部的方式称呼它

23
00:00:51,306 --> 0:00:53,086
多摄像头

24
00:00:54,096 --> 0:00:56,556
多摄像头是我们

25
00:00:56,596 --> 0:00:58,176
最常被需求的第三方性能

26
00:00:58,176 --> 0:01:00,446
我们在实验室每年都能听到这个需求

27
00:00:58,176 --> 0:01:00,446
我们在实验室每年都能听到这个需求

28
00:01:00,446 --> 0:01:02,086
所以我们现在谈论的是

29
00:01:02,086 --> 0:01:04,056
同时摄制在多摄像头和

30
00:01:04,056 --> 0:01:07,746
麦克风的

31
00:01:08,026 --> 0:01:10,866
视频 音频 

32
00:01:10,866 --> 0:01:12,886
元数据 深度和照片

33
00:01:13,436 --> 0:01:16,386
然而 第三方

34
00:01:16,386 --> 0:01:17,756
并不是从中获益的唯一一方

35
00:01:18,366 --> 0:01:20,616
我们也有很多

36
00:01:20,616 --> 0:01:21,766
从甲方获得的重复的需求

37
00:01:21,836 --> 0:01:24,116
也是针对多摄像头摄制的

38
00:01:24,616 --> 0:01:26,296
其中最重要的是 ARKit

39
00:01:26,656 --> 0:01:28,166
如果你听了主旨演讲

40
00:01:28,716 --> 0:01:31,136
你听到了关于 ARKit 3 的介绍

41
00:01:31,786 --> 0:01:34,076
这些 API 使用前置摄像头

42
00:01:34,166 --> 0:01:36,366
用于脸部和姿势追踪

43
00:01:36,366 --> 0:01:37,856
后置摄像头则用于

44
00:01:37,856 --> 0:01:39,636
环境追踪

45
00:01:39,636 --> 0:01:40,886
这让它们可以

46
00:01:40,886 --> 0:01:42,466
根据你在看的地方

47
00:01:42,466 --> 0:01:44,686
知道如何在场景中放置虚拟的角色

48
00:01:45,076 --> 0:01:46,976
所以在 AVFoundation 首次出现之后

49
00:01:46,976 --> 0:01:49,146
我们在 Mac 上支持

50
00:01:49,146 --> 0:01:51,366
多摄像头

51
00:01:51,366 --> 0:01:52,486
Lion 系统也同样支持

52
00:01:53,326 --> 0:01:55,646
但是在 iOS 上 AVFoundation 还是

53
00:01:55,646 --> 0:01:57,436
限制客户

54
00:01:57,486 --> 0:01:58,486
一次使用一个活跃的摄像头

55
00:01:59,106 --> 0:02:00,926
这不是因为我们吝啬

56
00:01:59,106 --> 0:02:00,926
这不是因为我们吝啬

57
00:02:01,116 --> 0:02:02,576
我们对此有我们的理由

58
00:02:02,956 --> 0:02:05,006
第一个理由就是硬件限制

59
00:02:05,556 --> 0:02:06,996
我讲的是

60
00:02:07,046 --> 0:02:08,386
摄像头分享电源轨

61
00:02:08,846 --> 0:02:10,746
它不能同时

62
00:02:10,746 --> 0:02:12,266
全径地位两个摄像头

63
00:02:12,266 --> 0:02:14,316
提供电量

64
00:02:14,316 --> 0:02:17,226
第二个原因就是

65
00:02:17,226 --> 0:02:19,296
我们想要提供一个可靠的 API

66
00:02:19,976 --> 0:02:21,596
这个 API 可以

67
00:02:21,596 --> 0:02:24,216
在同时运行

68
00:02:24,216 --> 0:02:25,536
多个摄像头时

69
00:02:25,596 --> 0:02:27,276
不让手机损坏

70
00:02:27,276 --> 0:02:28,346
所以我们想要确保

71
00:02:28,346 --> 0:02:29,426
我们为你提供了

72
00:02:29,426 --> 0:02:31,266
可以帮助你处理硬件

73
00:02:31,266 --> 0:02:32,816
热量以及带宽限制等

74
00:02:32,816 --> 0:02:35,556
真的存在于我们现实生活中的东西

75
00:02:36,606 --> 0:02:38,836
好了 在 iOS 13 中的一个好消息

76
00:02:38,836 --> 0:02:40,976
我们终于可以支持多摄像头摄制

77
00:02:41,316 --> 0:02:42,686
我们在所有最近的硬件上

78
00:02:42,686 --> 0:02:47,076
都可以实现这一点 

79
00:02:47,396 --> 0:02:48,946
iPhone XS XS Max XR 和新的 iPad Pro

80
00:02:49,326 --> 0:02:51,146
在所有这些平台上

81
00:02:51,146 --> 0:02:51,996
之前提到的硬件限制

82
00:02:51,996 --> 0:02:53,366
都已经被解决了

83
00:02:53,566 --> 0:02:57,616
谢天谢地 让我们直接来看看有趣的事情

84
00:02:57,766 --> 0:02:59,916
我们为了构建 MultiCamSessions

85
00:02:59,916 --> 0:03:01,786
有一套新的 API

86
00:02:59,916 --> 0:03:01,786
有一套新的 API

87
00:03:03,126 --> 0:03:04,716
如果你之前为摄像头摄制

88
00:03:04,716 --> 0:03:06,056
使用了 AVFoundation

89
00:03:06,056 --> 0:03:07,546
你可能知道我们有

90
00:03:07,546 --> 0:03:09,396
四个主要的类 分别是

91
00:03:09,856 --> 0:03:13,246
inputs outsputs session 以及 connections

92
00:03:13,776 --> 0:03:17,716
AVCaptureSession 是我们的中心

93
00:03:17,876 --> 0:03:19,506
就是它负责排列数据

94
00:03:20,046 --> 0:03:21,116
你通过它来

95
00:03:21,116 --> 0:03:22,216
启动或停止运行

96
00:03:23,766 --> 0:03:25,356
你将其加入一个或

97
00:03:25,356 --> 0:03:27,136
更多的输入 AVCaptureInputs

98
00:03:27,536 --> 0:03:28,276
其中一个就是

99
00:03:28,276 --> 0:03:30,436
AVCaptureDeviceInput

100
00:03:30,436 --> 0:03:32,556
它对于一个摄像头或一个麦克风

101
00:03:32,556 --> 0:03:33,126
是一个包装器

102
00:03:34,626 --> 0:03:35,846
你还需要增加一个或更多的

103
00:03:35,846 --> 0:03:38,346
AVCaptureOutputs 来获取数据

104
00:03:38,776 --> 0:03:40,846
不然的话 那些发生器没有地方来放置它

105
00:03:40,846 --> 0:03:43,586
然后这个会话将自动代表你

106
00:03:43,586 --> 0:03:44,866
在与媒体类型兼容的

107
00:03:45,116 --> 0:03:48,266
输入和输出之间创建联系

108
00:03:49,046 --> 0:03:51,146
所以请注意 我在这里展示给你的是传统的

109
00:03:51,146 --> 0:03:53,496
AVCaptureSession 

110
00:03:53,496 --> 0:03:55,886
它在 iOS 上只允许

111
00:03:55,886 --> 0:03:56,296
一个会话一个摄像头输入

112
00:03:58,006 --> 0:04:00,316
现在在 iOS 13 中我们引入了

113
00:03:58,006 --> 0:04:00,316
现在在 iOS 13 中我们引入了

114
00:04:00,316 --> 0:04:02,106
一个名为 AVCaptureMultiCamSession 的

115
00:04:02,106 --> 0:04:04,686
AVCaptureSession 的子类

116
00:04:04,876 --> 0:04:08,316
这可以让你做多重输入和输出

117
00:04:09,056 --> 0:04:13,146
AVCaptureSession 不是弃用了

118
00:04:13,146 --> 0:04:14,506
它不会离去

119
00:04:14,796 --> 0:04:16,435
实际上 现存的 AVCaptureSession

120
00:04:16,435 --> 0:04:17,736
在你运行单一的

121
00:04:17,736 --> 0:04:18,856
摄像头摄制时

122
00:04:18,856 --> 0:04:20,416
它仍然是优先的类

123
00:04:20,886 --> 0:04:22,026
这样做的原因是因为

124
00:04:22,136 --> 0:04:24,166
MultiCamSession 作为一个

125
00:04:24,256 --> 0:04:26,646
电源工具 拥有一些限制

126
00:04:26,806 --> 0:04:28,096
这些我一会再说

127
00:04:29,566 --> 0:04:30,366
好的

128
00:04:30,366 --> 0:04:31,686
让我给你们讲述一个

129
00:04:31,686 --> 0:04:33,596
关于我们的新的

130
00:04:33,596 --> 0:04:34,236
AVCaptureMultiCamSession 的

131
00:04:34,236 --> 0:04:35,546
主要的例子

132
00:04:36,076 --> 0:04:37,406
如果说你们想要为 MultiCamSession

133
00:04:37,406 --> 0:04:38,656
增加两个设备 

134
00:04:38,656 --> 0:04:40,756
一个是针对前置摄像头

135
00:04:40,756 --> 0:04:42,966
一个针对后置摄像头 

136
00:04:42,966 --> 0:04:45,266
同时对 VideoDataOutputs 运行两个

137
00:04:45,266 --> 0:04:46,496
一个从后置摄像头接收画面

138
00:04:46,496 --> 0:04:47,856
一个从前置摄像头接收画面

139
00:04:49,096 --> 0:04:50,876
然后如果你想要

140
00:04:50,986 --> 0:04:52,316
做一个实时预览

141
00:04:52,316 --> 0:04:53,336
你可以分别增加

142
00:04:53,336 --> 0:04:54,656
VideoPreviewLayers

143
00:04:54,706 --> 0:04:55,836
一个是为了前置一个是为了后置

144
00:04:57,066 --> 0:04:58,166
你不需要再那里停止

145
00:04:59,106 --> 0:05:02,606
你可以进行同时的 MetadataOutputs

146
00:04:59,106 --> 0:05:02,606
你可以进行同时的 MetadataOutputs

147
00:05:02,836 --> 0:05:04,636
如果你想要同时进行

148
00:05:04,636 --> 0:05:07,786
扫条形码或面部识别

149
00:05:08,776 --> 0:05:10,076
你可以进行多重 MovieFileOutputs

150
00:05:10,076 --> 0:05:11,576
如果你想要

151
00:05:11,576 --> 0:05:13,216
分别记录前置和后置

152
00:05:13,726 --> 0:05:14,976
如果你想要不同的摄像头

153
00:05:15,166 --> 0:05:17,086
进行实时照片摄制

154
00:05:17,296 --> 0:05:19,726
你可以增加多个 PhotoOutputs

155
00:05:20,126 --> 0:05:21,426
正如你所见

156
00:05:21,426 --> 0:05:22,426
因为有很多箭头

157
00:05:22,426 --> 0:05:24,376
从很多输入

158
00:05:24,416 --> 0:05:25,616
到很多输出 这些图表

159
00:05:25,616 --> 0:05:26,386
看起来很复杂

160
00:05:27,376 --> 0:05:29,116
这些小箭头被称为

161
00:05:29,116 --> 0:05:30,756
AVCaptureConnections

162
00:05:30,756 --> 0:05:32,246
它们从一个输入到一个输出

163
00:05:32,246 --> 0:05:33,346
定义数据流

164
00:05:33,956 --> 0:05:35,236
让我放大一下

165
00:05:35,236 --> 0:05:37,226
看看设备输入

166
00:05:37,226 --> 0:05:38,336
以此来阐明连接的剖析

167
00:05:39,816 --> 0:05:41,756
摄制输入拥有

168
00:05:41,926 --> 0:05:45,026
AVCaptureInput 端口

169
00:05:45,026 --> 0:05:46,426
我喜欢将其视为

170
00:05:46,426 --> 0:05:47,646
小的插座

171
00:05:48,396 --> 0:05:50,746
你可以在每一个媒体类型

172
00:05:50,746 --> 0:05:52,496
拥有一个输入可以生成的出口

173
00:05:53,436 --> 0:05:54,736
如果没有东西插入这个端口

174
00:05:54,736 --> 0:05:56,646
那就没有数据从那个端口流出

175
00:05:56,716 --> 0:05:58,336
就像一个插座一样

176
00:05:58,426 --> 0:06:00,296
你需要插入一些东西来获得电量

177
00:05:58,426 --> 0:06:00,296
你需要插入一些东西来获得电量

178
00:06:00,806 --> 0:06:02,256
现在 为了寻找

179
00:06:02,256 --> 0:06:03,646
对于一个特定的输入来说

180
00:06:03,646 --> 0:06:05,506
什么是可行的端口

181
00:06:05,506 --> 0:06:07,616
你可以查询输入的端口的属性

182
00:06:07,616 --> 0:06:09,286
它将会告诉你

183
00:06:09,286 --> 0:06:11,056
我有 AVCaptureInput 端口的阵列

184
00:06:11,396 --> 0:06:13,186
对于双摄像头

185
00:06:13,186 --> 0:06:14,516
这些就是你会找到的端口

186
00:06:14,516 --> 0:06:16,246
一个用于视频一个用于深度

187
00:06:16,816 --> 0:06:18,726
一个用于如条形码扫描和脸部扫描等

188
00:06:18,726 --> 0:06:20,596
元数据对象

189
00:06:20,596 --> 0:06:22,496
一个用于可以连接至

190
00:06:22,496 --> 0:06:24,216
MovieFileOutput 的元数据项目

191
00:06:25,466 --> 0:06:26,706
当你使用

192
00:06:26,706 --> 0:06:28,296
AVCaptureSessions addInput 方法

193
00:06:28,296 --> 0:06:30,026
来为会话增加一个输入

194
00:06:30,026 --> 0:06:33,276
或 addOutput 来为会话增加一个输出

195
00:06:33,276 --> 0:06:37,186
会话都会寻找可兼容的媒体类型

196
00:06:37,186 --> 0:06:38,986
同时如果可以的话

197
00:06:38,986 --> 0:06:40,136
暗中形成给连接

198
00:06:40,856 --> 0:06:42,876
所以这里 我们有一个 VideoDataOutput

199
00:06:43,126 --> 0:06:45,976
VideoDataOutputs 接收视频 接受视频

200
00:06:45,976 --> 0:06:49,266
我们有一个可以生成视频的插头

201
00:06:49,466 --> 0:06:51,436
所以这个连接就自动形成了

202
00:06:52,066 --> 0:06:54,036
这是你们中大部分人

203
00:06:54,446 --> 0:06:55,686
如果之前与我们的类工作过

204
00:06:55,686 --> 0:06:56,826
是如何适应与 

205
00:06:56,826 --> 0:06:58,106
AVCaptureSession 工作的

206
00:06:58,786 --> 0:07:00,916
MultiCamSession 是一个不一样的东西

207
00:06:58,786 --> 0:07:00,916
MultiCamSession 是一个不一样的东西

208
00:07:01,696 --> 0:07:03,666
这是因为输入和输出

209
00:07:03,666 --> 0:07:05,676
你有多个

210
00:07:05,676 --> 0:07:07,286
拥有多重输出的输入

211
00:07:07,286 --> 0:07:08,306
你可能想要保证

212
00:07:08,306 --> 0:07:09,346
连接是从 A 至 A 

213
00:07:09,346 --> 0:07:11,936
或者从 B 至 B

214
00:07:11,936 --> 0:07:13,176
同时也不会干涉

215
00:07:13,176 --> 0:07:14,216
你不打算让它们做的任务

216
00:07:14,686 --> 0:07:16,346
当构建一个 MultiCamSession 时

217
00:07:16,346 --> 0:07:18,446
我们劝你

218
00:07:18,446 --> 0:07:20,796
不要使用隐式连接生成

219
00:07:21,016 --> 0:07:24,646
而是使用这些特殊的增加器

220
00:07:24,836 --> 0:07:27,516
addInputWithNoConnections

221
00:07:27,516 --> 0:07:29,486
或者 addOutputWithNoConnections

222
00:07:30,096 --> 0:07:34,796
还有类似的你可以用于 VideoPreviewLayer

223
00:07:34,796 --> 0:07:36,816
那就是

224
00:07:37,146 --> 0:07:38,916
setSessionWithNoConnections

225
00:07:39,326 --> 0:07:41,256
当你使用这些的时候

226
00:07:41,256 --> 0:07:43,126
它基本上会告诉会话

227
00:07:43,126 --> 0:07:44,726
这是那些输入 这是那些输出

228
00:07:44,806 --> 0:07:46,686
现在你了解它们了

229
00:07:46,686 --> 0:07:47,456
但是不要去触碰它们

230
00:07:47,666 --> 0:07:49,296
我之后将要按我想的手动

231
00:07:49,296 --> 0:07:50,876
安装连接

232
00:07:51,126 --> 0:07:53,126
你这样做的方法是

233
00:07:53,126 --> 0:07:54,786
通过告诉它 

234
00:07:54,786 --> 0:07:56,686
我想要你连接这个端口

235
00:07:56,686 --> 0:07:58,326
或者连入这个输出

236
00:07:58,326 --> 0:07:59,926
来创建 AVCaptureConnection

237
00:08:00,256 --> 0:08:01,376
然后你可以告诉会话

238
00:08:01,586 --> 0:08:03,866
请增加这连接 现在可以了

239
00:08:03,866 --> 0:08:06,316
这个非常冗长

240
00:08:06,626 --> 0:08:08,766
比起口头上说说也许展示一下更好

241
00:08:08,766 --> 0:08:10,336
所以我要有请 Nik Gallo  

242
00:08:10,856 --> 0:08:12,036
他也来自于 Camera Software 团队

243
00:08:12,036 --> 0:08:14,306
他将为我们展示 AVMultiCamPiP

244
00:08:14,306 --> 0:08:17,056
Nik [掌声]

245
00:08:17,096 --> 0:08:17,596
&gt;&gt; 谢谢你 Brad

246
00:08:18,626 --> 0:08:20,106
AVMultiCampPiP 是一个

247
00:08:20,106 --> 0:08:21,116
同时展示前置和后置摄像头流的

248
00:08:21,176 --> 0:08:22,866
一个 App

249
00:08:23,136 --> 0:08:24,306
在这里 我们有两个视频预览

250
00:08:24,306 --> 0:08:25,556
一个显示了前置摄像头

251
00:08:25,556 --> 0:08:27,596
一个显示了后摄像头

252
00:08:27,596 --> 0:08:28,696
当我点击两次屏幕

253
00:08:28,696 --> 0:08:30,346
我可以交替

254
00:08:30,346 --> 0:08:31,926
哪个摄像头是全屏的

255
00:08:31,926 --> 0:08:33,000
哪一个出现在 Pip

256
00:08:39,515 --> 0:08:42,736
[掌声]

257
00:08:43,236 --> 0:08:44,035
好了

258
00:08:44,035 --> 0:08:46,396
现在 我可以看到

259
00:08:46,396 --> 0:08:47,796
Brad 在 Apple Park 直播

260
00:08:47,796 --> 0:08:50,076
在我问他几个问题之前

261
00:08:50,076 --> 0:08:51,766
我会按下底部的

262
00:08:51,766 --> 0:08:53,046
记录按钮

263
00:08:53,346 --> 0:08:54,626
然后就可以之后再看这个对话了

264
00:08:55,636 --> 0:08:56,066
你好 Brad

265
00:08:56,606 --> 0:08:58,286
跟我说说在 Apple Park 发生了什么吧

266
00:08:58,886 --> 0:09:01,146
&gt;&gt; Nik 现在在 Apple Park 非常的混乱

267
00:08:58,886 --> 0:09:01,146
&gt;&gt; Nik 现在在 Apple Park 非常的混乱

268
00:09:01,236 --> 0:09:02,406
你可以看到在倒影池前

269
00:09:02,406 --> 0:09:03,686
正在举办

270
00:09:03,686 --> 0:09:05,086
各种类型的活动

271
00:09:05,466 --> 0:09:06,726
我可以听到水流的声音

272
00:09:07,076 --> 0:09:08,036
这听起来感觉

273
00:09:08,036 --> 0:09:09,146
我随时都会被淋湿

274
00:09:09,676 --> 0:09:11,466
我还可以听到我身后的野生动物声音

275
00:09:11,576 --> 0:09:12,816
好像是鸭子还是什么

276
00:09:13,256 --> 0:09:15,116
我现在真的有点担心我的人生安全

277
00:09:15,456 --> 0:09:16,316
&gt;&gt; 好的 Brad 这看起来

278
00:09:16,316 --> 0:09:18,066
真的很可怕 希望你在那一切安全

279
00:09:18,306 --> 0:09:19,106
&gt;&gt; 好的 谢谢

280
00:09:19,486 --> 0:09:19,776
&gt;&gt; 明白了

281
00:09:20,856 --> 0:09:22,646
现在我们完成了记录影片

282
00:09:22,736 --> 0:09:23,536
我们来看看

283
00:09:23,536 --> 0:09:23,956
刚刚录下的视频

284
00:09:27,256 --> 0:09:28,536
现在我们有这个影片了

285
00:09:29,256 --> 0:09:30,726
正如你所见

286
00:09:30,726 --> 0:09:33,196
我可以在两个摄像头间交替

287
00:09:33,446 --> 0:09:36,196
它可以像我们使用这个 App 时一样交替

288
00:09:36,196 --> 0:09:38,906
这就是 AVMultiCamPiP 把舞台交还给 Brad

289
00:09:39,516 --> 0:09:43,736
[掌声]

290
00:09:44,236 --> 0:09:45,626
&gt;&gt; 谢谢 Nik 很棒的展示

291
00:09:47,316 --> 0:09:48,466
好的 让我们看一看

292
00:09:48,466 --> 0:09:49,706
在 AVMultiCamPiP 的底层

293
00:09:49,806 --> 0:09:51,056
发生了什么

294
00:09:51,676 --> 0:09:53,266
我们有两个设备输入

295
00:09:53,266 --> 0:09:54,876
一个是对前置摄像头

296
00:09:54,876 --> 0:09:57,696
一个是对后置摄像头

297
00:09:57,696 --> 0:09:59,866
正如我之前所提到的它们没有连接

298
00:10:00,106 --> 0:10:00,776
我们还有分别针对两个摄像头的

299
00:10:00,776 --> 0:10:02,496
两个 VideoDataOutputs 

300
00:10:02,856 --> 0:10:04,516
还有两个 VideoPreviewLayers

301
00:10:04,986 --> 0:10:06,446
现在把它们放在屏幕上

302
00:10:06,676 --> 0:10:07,926
现在只需要

303
00:10:07,926 --> 0:10:10,616
得到这些 VideoPreviewLayers

304
00:10:10,616 --> 0:10:12,036
然后命令它们使它们

305
00:10:12,036 --> 0:10:13,096
一个在另一个之上

306
00:10:13,096 --> 0:10:14,056
一个尺寸更小

307
00:10:14,056 --> 0:10:15,766
当 Nik 双按它们的时候

308
00:10:15,766 --> 0:10:17,906
我们简单地将它们复位

309
00:10:17,906 --> 0:10:18,976
同时反转 Z 排序

310
00:10:19,046 --> 0:10:20,836
现在在 Metal Shader Compositor

311
00:10:20,836 --> 0:10:22,176
代码中有些

312
00:10:22,386 --> 0:10:23,416
神奇的事情发生了

313
00:10:23,796 --> 0:10:25,116
它使用了那两个 VideoDataOutputs

314
00:10:25,116 --> 0:10:27,506
同时将它们合成

315
00:10:27,506 --> 0:10:29,756
所以更小的 Pip

316
00:10:29,756 --> 0:10:31,586
被安排在一个画面中

317
00:10:31,586 --> 0:10:32,736
它将它们合成在

318
00:10:32,736 --> 0:10:34,396
一个视频缓冲中

319
00:10:34,396 --> 0:10:36,126
然后把它们发送至一个 AVAssetWriter

320
00:10:36,366 --> 0:10:38,166
在这里 它们被记录至

321
00:10:38,166 --> 0:10:39,166
一个影片中的一个视频轨道

322
00:10:39,896 --> 0:10:42,296
这个样例代码现在是可用的

323
00:10:42,676 --> 0:10:43,996
它与这个会话相连

324
00:10:43,996 --> 0:10:45,006
你可以看一看

325
00:10:45,006 --> 0:10:47,176
然后开始你自己的多摄像头摄制

326
00:10:47,626 --> 0:10:51,236
好的 是时候来谈一谈限制了

327
00:10:51,366 --> 0:10:53,846
虽然 AVMultiCamSession 是一个

328
00:10:53,846 --> 0:10:55,556
电源工具

329
00:10:55,556 --> 0:10:56,136
但它不是万能的

330
00:10:56,496 --> 0:10:58,866
让我来告诉你它不能做的

331
00:11:00,316 --> 0:11:02,016
首先 你不能假装

332
00:11:02,116 --> 0:11:04,246
一个摄像头是两个摄像头

333
00:11:04,866 --> 0:11:07,556
AVCaptureDeviceInput API

334
00:11:07,556 --> 0:11:09,216
会让你创建多个实例

335
00:11:09,216 --> 0:11:11,076
比如说为

336
00:11:11,076 --> 0:11:12,776
后置摄像头 如果你想的话

337
00:11:12,776 --> 0:11:13,126
你可以做十个

338
00:11:13,526 --> 0:11:16,046
但是如果你想要 把所有的实例都

339
00:11:16,046 --> 0:11:17,346
增加到一个 MultiCamSession

340
00:11:17,346 --> 0:11:19,916
它会说 啊嗷 这将引发异常

341
00:11:20,786 --> 0:11:22,716
所以每次会话

342
00:11:22,716 --> 0:11:24,036
在每个摄像头中只有一个输入

343
00:11:25,156 --> 0:11:26,326
还有 你不允许

344
00:11:26,396 --> 0:11:29,646
复制一个摄像头至相同类型的两个输出

345
00:11:30,246 --> 0:11:32,936
比如说用一个摄像头

346
00:11:32,936 --> 0:11:34,336
将它的信号分成

347
00:11:34,336 --> 0:11:35,316
两个 VideoDataOutputs

348
00:11:35,846 --> 0:11:37,656
你当然也可以

349
00:11:37,656 --> 0:11:39,546
增加多个摄像头

350
00:11:39,546 --> 0:11:41,336
将它们分别连接一个 VideoDataOutput

351
00:11:41,336 --> 0:11:42,976
但是你不能让它从一个分散到很多个

352
00:11:47,076 --> 0:11:48,806
你也不允许

353
00:11:48,806 --> 0:11:50,146
反过来这样做

354
00:11:50,256 --> 0:11:53,026
iOS 上的 AVCaptureOutputs 

355
00:11:53,026 --> 0:11:54,286
并不支持媒体混合

356
00:11:54,776 --> 0:11:56,916
所以所有的数据输出

357
00:11:56,916 --> 0:11:57,896
只能有一个单一的输入

358
00:11:58,546 --> 0:11:59,736
比如说 你不能

359
00:11:59,786 --> 0:12:01,436
试着把两个摄像头源

360
00:11:59,786 --> 0:12:01,436
试着把两个摄像头源

361
00:12:01,436 --> 0:12:03,926
挤入一个单一的数据输出

362
00:12:03,926 --> 0:12:04,986
它不知道如何

363
00:12:04,986 --> 0:12:05,996
处理第二个视频

364
00:12:05,996 --> 0:12:07,406
因为它不知道如何混合它们

365
00:12:08,066 --> 0:12:09,996
你当然可以使用

366
00:12:09,996 --> 0:12:11,926
分别的 VideoDataOutputs

367
00:12:12,016 --> 0:12:13,436
然后在你自己的代码中

368
00:12:13,436 --> 0:12:14,906
合成这些缓冲

369
00:12:14,906 --> 0:12:16,436
比如我们在 MultiCamPiP 中使用的

370
00:12:16,436 --> 0:12:17,186
Metal Shader Composite

371
00:12:17,856 --> 0:12:19,066
你可以根据你的喜好来做这些

372
00:12:19,496 --> 0:12:20,686
但是关于会话构建

373
00:12:20,686 --> 0:12:22,416
不要试着将多个摄像头

374
00:12:22,416 --> 0:12:24,236
挤入一个单一的输出

375
00:12:25,726 --> 0:12:27,486
好的 简单说说预设

376
00:12:28,666 --> 0:12:30,226
传统的 AVCaptureSession

377
00:12:30,296 --> 0:12:31,906
拥有会话预设的概念

378
00:12:31,906 --> 0:12:34,446
它决定了整个会话的

379
00:12:34,446 --> 0:12:36,456
服务的一般质量

380
00:12:36,726 --> 0:12:39,086
它应用至那个会话中的

381
00:12:39,086 --> 0:12:40,376
所有输入和输出

382
00:12:40,656 --> 0:12:42,216
比如说

383
00:12:42,216 --> 0:12:45,146
当你把会话预设为高

384
00:12:45,146 --> 0:12:46,706
会话设定设备的

385
00:12:46,706 --> 0:12:49,186
分辨率和帧率以及所有的输出

386
00:12:49,266 --> 0:12:50,686
所以它们在

387
00:12:50,686 --> 0:12:52,396
传送一个高质量的

388
00:12:52,596 --> 0:12:53,866
视频体验

389
00:12:53,866 --> 0:12:54,926
比如说 1080p30

390
00:12:58,046 --> 0:13:00,306
预设是 MultiCamSession 的一个问题

391
00:12:58,046 --> 0:13:00,306
预设是 MultiCamSession 的一个问题

392
00:13:01,116 --> 0:13:03,576
再次想想看起来像这样的事情

393
00:13:04,306 --> 0:13:06,906
MultiCamSession 设定是

394
00:13:06,906 --> 0:13:08,196
混合式的

395
00:13:08,266 --> 0:13:09,296
它们是异构型的

396
00:13:09,636 --> 0:13:10,846
对于整个事情都拥有高质量

397
00:13:10,846 --> 0:13:12,146
意味着什么呢

398
00:13:12,486 --> 0:13:13,616
你可能想要

399
00:13:13,616 --> 0:13:15,186
在不同分支的图表中

400
00:13:15,186 --> 0:13:16,666
拥有不同质量的服务

401
00:13:17,086 --> 0:13:18,606
比如说 在前置摄像头

402
00:13:18,606 --> 0:13:19,596
你可能只是想要一个

403
00:13:19,596 --> 0:13:21,436
低分辨率的预览

404
00:13:21,436 --> 0:13:24,296
比如 640x480

405
00:13:24,296 --> 0:13:25,846
同时还有一些高质量的

406
00:13:26,096 --> 0:13:27,996
比如说 在后置摄像头

407
00:13:27,996 --> 0:13:29,196
是 1080p60

408
00:13:29,626 --> 0:13:30,886
好的 很明显

409
00:13:30,976 --> 0:13:32,446
我们没有为所有这些混合的情况

410
00:13:32,446 --> 0:13:33,146
设定预设

411
00:13:34,136 --> 0:13:35,236
我们决定让事情在

412
00:13:35,236 --> 0:13:37,156
MultiCamSession 保持简单

413
00:13:37,636 --> 0:13:39,166
它不支持多重预设

414
00:13:39,276 --> 0:13:41,716
它支持一个

415
00:13:41,716 --> 0:13:43,676
且只有一个预设 也就是输入优先

416
00:13:44,106 --> 0:13:45,316
所以这意味着

417
00:13:45,316 --> 0:13:46,906
它不干涉输入和输出

418
00:13:47,256 --> 0:13:49,086
当你增加它们时

419
00:13:49,086 --> 0:13:51,126
你必须自己设定活跃的格式

420
00:13:51,636 --> 0:13:56,406
好的 来到 Cost Functions

421
00:13:57,136 --> 0:13:58,126
我在最开始提到了

422
00:13:58,126 --> 0:13:59,506
我们用时间处理了这个

423
00:13:59,576 --> 0:14:01,086
多摄像头支持

424
00:13:59,576 --> 0:14:01,086
多摄像头支持

425
00:14:01,086 --> 0:14:02,306
因为我们想要传递一个

426
00:14:02,306 --> 0:14:04,596
可靠的 API

427
00:14:04,596 --> 0:14:06,306
它可以帮你

428
00:14:06,356 --> 0:14:08,146
在你运行多个摄像头时

429
00:14:08,146 --> 0:14:09,456
对你遇到的消耗负责

430
00:14:09,456 --> 0:14:11,956
同时实质上点亮手机上的每个块

431
00:14:16,076 --> 0:14:17,456
这很老套但是也很真实

432
00:14:18,276 --> 0:14:20,006
天下没有免费的午餐

433
00:14:20,256 --> 0:14:22,226
所以这一部分

434
00:14:22,226 --> 0:14:23,366
我将成为你们的老爸

435
00:14:23,366 --> 0:14:25,936
然后给你们来一个父亲的谈话

436
00:14:27,156 --> 0:14:28,736
在父亲的谈话中

437
00:14:28,736 --> 0:14:30,866
我会解释信用卡是如何工作的

438
00:14:30,866 --> 0:14:31,956
以及你如何需要对你的钱负责

439
00:14:31,956 --> 0:14:33,386
同时按你的方法生活

440
00:14:33,386 --> 0:14:36,626
诸如此类的事情

441
00:14:37,766 --> 0:14:39,026
事实就是

442
00:14:39,026 --> 0:14:40,886
我们在 iOS 上有

443
00:14:40,886 --> 0:14:41,686
限制的硬件带宽

444
00:14:41,796 --> 0:14:43,696
尽管我们有多个摄像头

445
00:14:43,696 --> 0:14:44,976
所以我们有多个传感器 

446
00:14:44,976 --> 0:14:48,466
我们只有一个 ISP

447
00:14:48,466 --> 0:14:49,836
也就是图片信号处理器

448
00:14:50,646 --> 0:14:52,646
所以所有的这些传感器

449
00:14:52,646 --> 0:14:55,036
所有这些通过传感器的像素

450
00:14:55,036 --> 0:14:56,326
都需要被一个单独的 ISP

451
00:14:56,356 --> 0:14:57,916
所处理

452
00:14:57,916 --> 0:15:02,576
在特定的频率下 它由每个小时运行

453
00:14:57,916 --> 0:15:02,576
在特定的频率下 它由每个小时运行

454
00:15:02,576 --> 0:15:03,416
像素所限制

455
00:15:04,346 --> 0:15:06,946
所以对于你一次

456
00:15:07,036 --> 0:15:08,276
可以运行的像素数

457
00:15:08,276 --> 0:15:08,906
也是有限制器的

458
00:15:09,756 --> 0:15:10,596
HardwareCosts 的贡献者

459
00:15:10,596 --> 0:15:12,316
正如你所期待的

460
00:15:12,316 --> 0:15:14,046
是视频分辨率

461
00:15:14,566 --> 0:15:15,826
高的分辨率意味着

462
00:15:15,826 --> 0:15:17,126
更多的像素塞满在这里

463
00:15:17,896 --> 0:15:19,086
最大的帧率

464
00:15:19,496 --> 0:15:20,576
如果你更快地

465
00:15:20,576 --> 0:15:22,376
传递这些像素

466
00:15:22,376 --> 0:15:23,836
每个小时也会有更多的像素

467
00:15:23,876 --> 0:15:26,346
然后是第三个

468
00:15:26,346 --> 0:15:27,536
你可能听过也可能没听过

469
00:15:27,536 --> 0:15:28,596
它的名称是 Sensor Binning

470
00:15:29,716 --> 0:15:31,866
Sensor Binning 指的是

471
00:15:31,866 --> 0:15:33,456
将相邻像素中的

472
00:15:33,456 --> 0:15:35,426
信息结合在一起来降低带宽

473
00:15:35,996 --> 0:15:36,936
比如说

474
00:15:36,936 --> 0:15:39,186
如果我们这里有一个图像

475
00:15:39,186 --> 0:15:41,066
我们进行一个 2x2 的合并

476
00:15:41,066 --> 0:15:43,176
它在正方形中有 4 个像素

477
00:15:43,176 --> 0:15:45,406
然后将它们加成一个

478
00:15:45,406 --> 0:15:47,506
这样我们可以在尺寸上减小四倍

479
00:15:48,046 --> 0:15:49,786
这让你减少了噪点

480
00:15:50,366 --> 0:15:52,116
同时也减小了带宽

481
00:15:52,596 --> 0:15:55,276
它在每个像素给了你 4 倍的强度

482
00:15:55,766 --> 0:15:57,706
关于 Sensor Binning 有很多很好的东西

483
00:15:58,146 --> 0:15:59,676
缺点就是

484
00:15:59,676 --> 0:16:01,796
在图像质量上会有一些降低

485
00:15:59,676 --> 0:16:01,796
在图像质量上会有一些降低

486
00:16:02,106 --> 0:16:03,566
所以对角线可能

487
00:16:03,566 --> 0:16:04,556
有点像楼梯

488
00:16:05,196 --> 0:16:07,666
但是它们最补偿的质量就是

489
00:16:07,666 --> 0:16:09,906
合并像素的格式是很低功率的

490
00:16:09,906 --> 0:16:12,696
实际上 无论你什么时候

491
00:16:12,696 --> 0:16:14,256
与摄像头一起使用 ARKit

492
00:16:14,256 --> 0:16:16,306
你使用的都是一个合并像素的格式

493
00:16:16,306 --> 0:16:17,776
因为 ARKit 只有在

494
00:16:17,776 --> 0:16:19,246
为了你喜欢的做的那些

495
00:16:19,246 --> 0:16:20,736
有意思的 AR 效果节省能源时

496
00:16:20,736 --> 0:16:21,156
才会使用合并像素格式

497
00:16:22,526 --> 0:16:24,736
好的 我们如何说明这些消耗

498
00:16:24,736 --> 0:16:26,406
或者说我们如何报告这些消耗呢

499
00:16:26,996 --> 0:16:28,486
在你配置你的会话时

500
00:16:28,486 --> 0:16:30,726
MultiCamSession 会结算你的 HardwareCost

501
00:16:31,246 --> 0:16:32,296
所以每次你改变一些东西时

502
00:16:32,296 --> 0:16:34,246
都会有所记录

503
00:16:34,526 --> 0:16:36,106
就好像填满购物车

504
00:16:36,106 --> 0:16:38,146
或者说去网上购物

505
00:16:38,146 --> 0:16:39,536
在你付款之前

506
00:16:39,536 --> 0:16:40,696
将所有东西都放入购物车

507
00:16:40,696 --> 0:16:41,746
你知道你什么时候

508
00:16:41,746 --> 0:16:43,906
会接近你预算的极限

509
00:16:43,976 --> 0:16:45,376
然后你就可以尝试了

510
00:16:45,376 --> 0:16:47,246
把新的事物放进来

511
00:16:47,246 --> 0:16:48,336
或者将旧的东西拿出去

512
00:16:48,586 --> 0:16:49,806
你在支付之前

513
00:16:49,806 --> 0:16:50,416
就能看到花费

514
00:16:50,966 --> 0:16:51,976
MultiCamSession

515
00:16:51,976 --> 0:16:52,876
也是一样的

516
00:16:53,436 --> 0:16:55,326
我们有一个名为

517
00:16:55,976 --> 0:16:56,856
HardwareCost 的新属性

518
00:16:57,146 --> 0:16:58,926
当你制作一个全新的会话时

519
00:16:58,966 --> 0:17:00,666
HardwareCost 起始数值是零

520
00:16:58,966 --> 0:17:00,666
HardwareCost 起始数值是零

521
00:17:01,736 --> 0:17:03,656
随着你增加更多的性能

522
00:17:03,656 --> 0:17:05,786
更多的输入 更多的输出 它也会随之增加

523
00:17:05,826 --> 0:17:07,876
只要在 1.0 之下

524
00:17:07,876 --> 0:17:09,016
一切都是很好的

525
00:17:09,536 --> 0:17:11,526
一切在 1.0 之下都是可以运行的

526
00:17:12,766 --> 0:17:14,556
一旦到达了 1.0 或者更大

527
00:17:14,556 --> 0:17:15,906
你就麻烦了

528
00:17:15,906 --> 0:17:17,576
这是因为 

529
00:17:17,576 --> 0:17:19,276
ISP 带宽限制很难

530
00:17:19,685 --> 0:17:21,965
它不是像你可以

531
00:17:22,086 --> 0:17:23,526
传递每个其他的画面

532
00:17:24,296 --> 0:17:25,986
不是的 这是一个孤注一掷的提议

533
00:17:26,276 --> 0:17:28,016
你要么就成功 要么就失败

534
00:17:28,425 --> 0:17:30,016
所以如果超过了 1.0

535
00:17:30,016 --> 0:17:31,356
而且你试着运行

536
00:17:31,356 --> 0:17:32,836
AVCaptureMultiCamSession

537
00:17:33,076 --> 0:17:35,936
它会说 啊嗷 它会通知你

538
00:17:36,246 --> 0:17:38,096
运行时间错误

539
00:17:38,096 --> 0:17:39,776
这指出了它必须停下的原因

540
00:17:39,776 --> 0:17:40,976
那就是因为硬件消耗过剩

541
00:17:45,046 --> 0:17:47,246
现在你可能在想 我如何才能减少消耗呢

542
00:17:47,996 --> 0:17:49,206
最明显的方法就是

543
00:17:49,206 --> 0:17:51,166
选择一个更低的分辨率

544
00:17:51,856 --> 0:17:54,246
如果你想要保持相同的分辨率

545
00:17:54,246 --> 0:17:56,356
还有一个方法就是

546
00:17:56,356 --> 0:17:57,616
如果在相同的分辨率下

547
00:17:57,616 --> 0:17:58,686
有一个合并像素格式

548
00:17:58,686 --> 0:18:00,756
选择那一个 这个质量可能会更低

549
00:17:58,686 --> 0:18:00,756
选择那一个 这个质量可能会更低

550
00:18:00,936 --> 0:18:02,416
但是能源上也低的多

551
00:18:02,876 --> 0:18:05,576
接下来 

552
00:18:05,576 --> 0:18:06,796
你可能认为帧率会有所帮助

553
00:18:06,796 --> 0:18:08,946
但其实并不是

554
00:18:10,016 --> 0:18:13,306
原因就是 AVCaptureDevice 允许你

555
00:18:13,306 --> 0:18:14,846
开始允许你

556
00:18:14,846 --> 0:18:17,666
在飞行状态下改变帧率

557
00:18:17,666 --> 0:18:18,196
是从 iOS 4 开始的

558
00:18:18,826 --> 0:18:21,106
所以如果你有一个 120 fps 格式

559
00:18:21,826 --> 0:18:24,116
然后你说

560
00:18:24,116 --> 0:18:26,646
将活跃格式设定为 60

561
00:18:26,646 --> 0:18:28,866
你还是需要消耗120 而不是 60

562
00:18:29,066 --> 0:18:30,136
因为在你运行的任何时候

563
00:18:30,136 --> 0:18:33,016
你都可以将帧率提高至 120

564
00:18:33,266 --> 0:18:34,816
我们必须考虑到最坏的情况

565
00:18:35,876 --> 0:18:37,506
但是好消息就是

566
00:18:37,616 --> 0:18:39,056
我们不会在

567
00:18:39,146 --> 0:18:40,236
AVCaptureDeviceInput

568
00:18:40,236 --> 0:18:41,506
提供覆盖属性

569
00:18:42,326 --> 0:18:45,426
通过这样设定

570
00:18:45,426 --> 0:18:47,166
你可以通过保证

571
00:18:47,166 --> 0:18:49,236
你不会比某个特定帧率高

572
00:18:49,346 --> 0:18:51,096
将一个高帧率

573
00:18:51,096 --> 0:18:52,976
转化为一个低帧率

574
00:18:56,166 --> 0:18:58,046
现在 在我们的 API 上

575
00:18:58,046 --> 0:18:59,786
有一点疑惑

576
00:18:59,846 --> 0:19:01,796
我们讨论帧率时并不将其作为速率

577
00:18:59,846 --> 0:19:01,796
我们讨论帧率时并不将其作为速率

578
00:19:01,826 --> 0:19:03,276
而是作为持续时间

579
00:19:03,586 --> 0:19:06,326
所以为了设定一个帧率

580
00:19:06,326 --> 0:19:07,576
你将一个移交给持续时间

581
00:19:07,736 --> 0:19:08,986
这和帧率是一样的

582
00:19:09,396 --> 0:19:10,906
所以如果你想要一个 60 fps 的

583
00:19:10,906 --> 0:19:12,736
格式并将它做成一个

584
00:19:12,736 --> 0:19:13,196
30 fps 的格式

585
00:19:13,776 --> 0:19:16,056
你将 CMTime 设定为

586
00:19:16,056 --> 0:19:17,546
1 至 30

587
00:19:17,546 --> 0:19:18,146
这也是一个持续时间

588
00:19:18,536 --> 0:19:20,196
然后将 deviceInputs

589
00:19:20,496 --> 0:19:22,646
videoMinFrameDurationOverride

590
00:19:22,896 --> 0:19:24,076
设定为 30 fps

591
00:19:24,466 --> 0:19:26,606
恭喜 你刚刚将 60 fps 的格式

592
00:19:26,606 --> 0:19:28,326
改为了 30 fps 格式

593
00:19:28,326 --> 0:19:32,416
你只需要消耗 30 的硬件消耗

594
00:19:32,596 --> 0:19:34,216
我还需要提到一个

595
00:19:34,216 --> 0:19:36,606
在 AVMultiCamPiP App 中的

596
00:19:36,606 --> 0:19:38,676
一个很棒的功能

597
00:19:38,676 --> 0:19:40,496
它可以展示如何迭代低降低你的消耗

598
00:19:40,826 --> 0:19:42,046
这是一个递推的功能

599
00:19:42,186 --> 0:19:43,236
它会选择对它

600
00:19:43,236 --> 0:19:44,946
最重要的事情

601
00:19:45,186 --> 0:19:46,736
同时对不那么重要的事情

602
00:19:46,736 --> 0:19:48,096
进行节流

603
00:19:48,096 --> 0:19:49,056
直到它在 HardwareCost 之下

604
00:19:50,006 --> 0:19:52,046
接下来就是系统压力消耗

605
00:19:52,046 --> 0:19:53,866
这是我们报告的

606
00:19:53,866 --> 0:19:55,186
第二大贡献者

607
00:19:55,576 --> 0:19:58,466
你们应该早有所闻

608
00:19:58,466 --> 0:20:00,326
手机在小的 片段的 热的

609
00:19:58,466 --> 0:20:00,326
手机在小的 片段的 热的

610
00:20:00,576 --> 0:20:01,846
挑战性的包中

611
00:20:01,846 --> 0:20:03,236
是功能强大的电脑

612
00:20:03,936 --> 0:20:06,546
在 iOS 11 中

613
00:20:06,746 --> 0:20:08,916
我们引入了摄像头系统压力状态

614
00:20:09,566 --> 0:20:10,596
这可以帮你

615
00:20:10,596 --> 0:20:11,996
监控摄像头现在的状态

616
00:20:13,246 --> 0:20:14,846
摄像头系统压力

617
00:20:14,926 --> 0:20:17,136
包括系统温度

618
00:20:17,286 --> 0:20:19,286
也就是所有的 OS 热量

619
00:20:20,596 --> 0:20:21,866
峰值功率要求

620
00:20:21,866 --> 0:20:23,406
这个和电池有关

621
00:20:23,786 --> 0:20:25,586
它现在有多少电量

622
00:20:26,196 --> 0:20:27,936
它增加电压的速度

623
00:20:27,936 --> 0:20:29,416
是否快到可以

624
00:20:29,416 --> 0:20:31,916
满足无论你现在想做什么的需求

625
00:20:33,236 --> 0:20:35,496
还有红外检测器温度

626
00:20:36,206 --> 0:20:37,636
支持 TrueDepth Camera 的设备上

627
00:20:37,636 --> 0:20:39,066
我们有一个红外线摄像头

628
00:20:39,066 --> 0:20:41,136
也有一个 RGB 摄像头

629
00:20:41,326 --> 0:20:42,866
好的 这个会生成自己的热度

630
00:20:42,956 --> 0:20:43,886
这就是对系统压力状态的

631
00:20:43,886 --> 0:20:45,876
一部分贡献

632
00:20:46,416 --> 0:20:49,656
我们有五个状态

633
00:20:50,156 --> 0:20:51,896
从标称一直到关机

634
00:20:52,526 --> 0:20:53,596
当系统压力状态是标称时

635
00:20:53,596 --> 0:20:55,586
你的状态是良好的

636
00:20:55,786 --> 0:20:56,676
你可以想做什么就做什么

637
00:20:57,176 --> 0:20:58,756
当状态是一般时

638
00:20:58,756 --> 0:21:00,086
你可以基本完成你想做的

639
00:20:58,756 --> 0:21:00,086
你可以基本完成你想做的

640
00:21:00,536 --> 0:21:01,976
但是如果是严重状态

641
00:21:01,976 --> 0:21:03,106
你会陷入一个

642
00:21:03,106 --> 0:21:05,356
系统开始放慢速度的境况

643
00:21:05,356 --> 0:21:06,656
这意味着对于 GPU 

644
00:21:06,656 --> 0:21:07,976
你们有着更少的时间间隔

645
00:21:08,196 --> 0:21:10,526
你们的质量

646
00:21:10,526 --> 0:21:11,236
可能会被打折扣

647
00:21:11,736 --> 0:21:12,956
在非常严重状态

648
00:21:12,956 --> 0:21:14,336
你们将会有很大的节流

649
00:21:14,586 --> 0:21:18,036
在关机状态

650
00:21:18,036 --> 0:21:21,046
因为担心伤害硬件 我们将不再能运行摄像头

651
00:21:21,356 --> 0:21:23,226
所以在关机状态

652
00:21:23,226 --> 0:21:25,846
我们会自动中断你的会话 停止它 告诉你

653
00:21:25,846 --> 0:21:28,286
你因为一个系统压力状态而被中断了

654
00:21:28,706 --> 0:21:30,346
然后我们就等待设备

655
00:21:30,346 --> 0:21:33,546
一直回到标称状态 然后才能继续运行摄像头

656
00:21:34,956 --> 0:21:37,376
这就是所有的 iOS 11

657
00:21:37,866 --> 0:21:40,276
现在 在 iOS 13 中

658
00:21:40,276 --> 0:21:41,636
我们给你提供一个

659
00:21:41,636 --> 0:21:44,316
在前方负责系统压力消耗的方法 好吗

660
00:21:44,846 --> 0:21:46,116
我们不会告诉你

661
00:21:46,116 --> 0:21:47,276
现在发生了什么

662
00:21:47,796 --> 0:21:49,066
如果你在玩部落冲突之后

663
00:21:49,066 --> 0:21:50,586
开启摄像头

664
00:21:50,616 --> 0:21:52,476
那这个可能会被影响

665
00:21:53,296 --> 0:21:54,446
我们现在有一个方法

666
00:21:54,446 --> 0:21:56,426
可以告诉你就系统压力而言

667
00:21:56,426 --> 0:21:57,616
摄像头消耗是什么

668
00:21:57,946 --> 0:21:58,996
不依赖于

669
00:21:58,996 --> 0:21:59,586
所有其他的因素

670
00:22:00,156 --> 0:22:02,286
对于这个消耗的贡献者

671
00:22:02,286 --> 0:22:03,516
和对硬件的贡献者是一样的

672
00:22:03,516 --> 0:22:05,686
与其他很多一起

673
00:22:06,086 --> 0:22:07,816
比如视频图像稳定

674
00:22:07,816 --> 0:22:10,966
或者光学图像稳定

675
00:22:10,966 --> 0:22:12,556
所有这些都消耗能量

676
00:22:12,956 --> 0:22:14,446
我们有个 Smart HDR 性能等等

677
00:22:14,446 --> 0:22:16,516
所有这些列在这的

678
00:22:16,516 --> 0:22:18,976
都是对全部 系统压力消耗的贡献者

679
00:22:21,236 --> 0:22:23,196
MultiCamSession 可以在最前面

680
00:22:23,196 --> 0:22:24,466
结算分数

681
00:22:24,466 --> 0:22:27,136
就像它对硬件做的那样

682
00:22:27,136 --> 0:22:29,266
它只会解释它了解的因素

683
00:22:29,536 --> 0:22:30,786
如果你想同时

684
00:22:30,786 --> 0:22:32,476
做一些不合情理的 GPU 运行

685
00:22:32,476 --> 0:22:34,956
分数不会将其包含

686
00:22:35,016 --> 0:22:36,296
它只会包含

687
00:22:36,296 --> 0:22:39,256
你对摄像头的操作

688
00:22:39,256 --> 0:22:40,076
这是你如何使用它的方法

689
00:22:41,356 --> 0:22:42,256
通过查询 systemPressureCost

690
00:22:42,256 --> 0:22:44,416
你可以找到

691
00:22:44,416 --> 0:22:48,456
你在一个相对静止的系统中

692
00:22:48,646 --> 0:22:49,656
可以运行多长时间

693
00:22:50,106 --> 0:22:52,216
如果是少于 1.0

694
00:22:52,216 --> 0:22:53,306
你可以一直运行

695
00:22:53,446 --> 0:22:54,286
你是一个冷静的顾客

696
00:22:55,086 --> 0:22:56,846
如果在 1.0 和 2.0 之间

697
00:22:56,846 --> 0:22:58,756
你可以运行最多 15 分钟

698
00:22:58,756 --> 0:23:01,186
2.0 到 3。0 之间 最多 10 分钟

699
00:22:58,756 --> 0:23:01,186
2.0 到 3。0 之间 最多 10 分钟

700
00:23:01,746 --> 0:23:03,696
高于 3.0 

701
00:23:03,696 --> 0:23:05,316
你可能只能运行一小会

702
00:23:05,316 --> 0:23:07,436
实际上 即便你超过了 3

703
00:23:07,436 --> 0:23:09,456
我们会让你运行摄像头 

704
00:23:09,926 --> 0:23:10,946
但是你需要明白

705
00:23:10,946 --> 0:23:13,006
它不会一直保持冷静

706
00:23:13,086 --> 0:23:14,466
它一旦到达

707
00:23:14,466 --> 0:23:16,266
非常严重或者关机等级

708
00:23:16,266 --> 0:23:17,726
你的会话将被中断

709
00:23:17,996 --> 0:23:19,446
所以我们会保存硬件

710
00:23:19,446 --> 0:23:21,176
即便你不想 但是这非常棒

711
00:23:21,176 --> 0:23:22,916
如果你能在运行的 30 秒内

712
00:23:23,346 --> 0:23:25,016
使用非常高的系统压力消耗

713
00:23:25,016 --> 0:23:26,346
得到你需要的做的

714
00:23:26,576 --> 0:23:29,486
无论用什么方法都去做

715
00:23:31,076 --> 0:23:32,276
现在你如何在运行的时候

716
00:23:32,276 --> 0:23:33,836
降低你的系统压力呢

717
00:23:34,006 --> 0:23:35,166
我讲的不是

718
00:23:35,166 --> 0:23:36,196
当你在设定你的会话的时候

719
00:23:36,196 --> 0:23:37,676
我讲的是一旦你

720
00:23:37,986 --> 0:23:39,666
开始运行而且你注意到

721
00:23:39,666 --> 0:23:41,756
你开始在系统压力中有所升高

722
00:23:41,986 --> 0:23:43,176
最快和最简单的方法

723
00:23:43,176 --> 0:23:45,506
就是迅速地降低帧率

724
00:23:45,656 --> 0:23:47,466
这会缓解系统压力

725
00:23:47,966 --> 0:23:49,066
同时 如果你做的事是我们不知道的

726
00:23:49,066 --> 0:23:52,706
比如说 繁重的 GPU 或 CPU 工作

727
00:23:52,706 --> 0:23:53,696
你可以减慢它的速度

728
00:23:54,326 --> 0:23:57,946
作为最后的一个手段

729
00:23:58,186 --> 0:23:59,266
你可能试着停用

730
00:23:59,266 --> 0:24:00,326
你使用的一个或更多的摄像头

731
00:23:59,266 --> 0:24:00,326
你使用的一个或更多的摄像头

732
00:24:00,646 --> 0:24:03,496
AVMultiCamSession 有一个

733
00:24:03,886 --> 0:24:06,156
有序的小性能

734
00:24:06,156 --> 0:24:08,196
在运行的时候

735
00:24:08,196 --> 0:24:09,686
你可以在不影响其他预览的情况下

736
00:24:09,686 --> 0:24:10,706
停用一个摄像头

737
00:24:10,786 --> 0:24:12,166
我们不会把所有都关闭

738
00:24:12,556 --> 0:24:14,536
比如说 你在运行前置和后置摄像头

739
00:24:14,626 --> 0:24:15,836
你注意到你已经超预算了

740
00:24:15,836 --> 0:24:17,386
你很快就要到达非常严重等级了

741
00:24:17,386 --> 0:24:19,426
你可以选择

742
00:24:19,426 --> 0:24:20,646
关闭前置摄像头

743
00:24:20,806 --> 0:24:22,306
后置摄像头还会继续预览

744
00:24:22,306 --> 0:24:23,356
它不会失去它的焦点

745
00:24:23,356 --> 0:24:24,646
曝光 或者白平衡

746
00:24:25,186 --> 0:24:27,536
当你通过设定

747
00:24:27,646 --> 0:24:30,756
摄像头的输入端口

748
00:24:30,756 --> 0:24:32,186
enabled 为 false

749
00:24:32,186 --> 0:24:34,496
来关闭摄像头上的最后一个活跃的输入端口

750
00:24:34,496 --> 0:24:36,876
我们将停止

751
00:24:36,876 --> 0:24:38,336
那个摄像头流

752
00:24:38,336 --> 0:24:39,806
同时保存很多能量

753
00:24:39,806 --> 0:24:41,626
并给系统一个机会冷却

754
00:24:42,956 --> 0:24:45,456
好的 我刚刚讲到了两个

755
00:24:45,456 --> 0:24:46,736
非常重要的消耗

756
00:24:46,736 --> 0:24:47,616
硬件和系统压力

757
00:24:48,376 --> 0:24:49,706
还有其他

758
00:24:49,706 --> 0:24:50,516
我们没有报告的消耗

759
00:24:50,516 --> 0:24:52,986
我不想哄骗你去相信这里

760
00:24:52,986 --> 0:24:54,306
没有其他东西在工作

761
00:24:54,346 --> 0:24:55,256
当然有其他的消耗了

762
00:24:55,256 --> 0:24:56,826
比如说内存

763
00:24:57,306 --> 0:24:58,906
但是在 iOS 13

764
00:24:58,906 --> 0:25:00,966
我们人工地限制了

765
00:24:58,906 --> 0:25:00,966
我们人工地限制了

766
00:25:00,966 --> 0:25:02,596
我们允许你们运行的设备组合

767
00:25:02,596 --> 0:25:04,856
这些是我们相信

768
00:25:04,856 --> 0:25:06,496
你会运行的

769
00:25:06,496 --> 0:25:07,756
这不会让你陷入麻烦

770
00:25:09,136 --> 0:25:11,326
所以支持设备组合

771
00:25:11,326 --> 0:25:13,056
是有限的

772
00:25:13,366 --> 0:25:14,386
现在 我要列出

773
00:25:14,386 --> 0:25:16,346
在 iPhone XS 上被支持的组合

774
00:25:16,776 --> 0:25:17,846
这个看起来就像一个视力检查表

775
00:25:17,846 --> 0:25:19,156
我不指望你们能记住

776
00:25:19,156 --> 0:25:20,336
你们可以之后暂停视频

777
00:25:20,666 --> 0:25:22,426
但是有六个支持的配置

778
00:25:22,426 --> 0:25:23,756
有个简单的规则要记住就是

779
00:25:23,756 --> 0:25:25,216
你可以同时运行

780
00:25:25,216 --> 0:25:26,976
两个实体摄像头

781
00:25:27,516 --> 0:25:28,466
你可能会疑问

782
00:25:28,706 --> 0:25:30,946
Brad 配置一号 怎么样

783
00:25:30,946 --> 0:25:32,346
那里只有一个复选框

784
00:25:32,766 --> 0:25:34,206
这是因为双镜头

785
00:25:34,426 --> 0:25:35,566
双镜头是一个

786
00:25:35,566 --> 0:25:37,146
软件摄像头

787
00:25:37,146 --> 0:25:39,076
由广角和长焦镜头构成

788
00:25:39,076 --> 0:25:40,586
这是两个实体摄像头

789
00:25:41,976 --> 0:25:43,936
你如何找出多摄像头是否被支持呢

790
00:25:44,276 --> 0:25:45,616
正如我说的

791
00:25:45,616 --> 0:25:46,526
它只有在更新的硬件上才会被支持

792
00:25:46,936 --> 0:25:48,466
所以你需要确认

793
00:25:48,466 --> 0:25:50,016
MultiCamSession 是否会让你

794
00:25:50,016 --> 0:25:51,766
运行多个摄像头

795
00:25:51,766 --> 0:25:52,646
或者不在你有的那个设备上运行

796
00:25:53,206 --> 0:25:54,366
有一个名为 isMultiCamSupported 的类方法

797
00:25:54,366 --> 0:25:56,026
你可以快速地决定

798
00:25:56,026 --> 0:25:58,086
是还是否

799
00:25:58,226 --> 0:26:00,106
进一步的

800
00:25:58,226 --> 0:26:00,106
进一步的

801
00:26:00,106 --> 0:26:01,426
当你要决定

802
00:26:01,426 --> 0:26:03,256
我是否允许一起运行这些设备的组合

803
00:26:03,676 --> 0:26:04,406
你可以创建一个

804
00:26:04,406 --> 0:26:06,266
AVCaptureDeviceDiscoverySession

805
00:26:06,596 --> 0:26:08,216
与你感兴趣的设备一起

806
00:26:08,216 --> 0:26:10,066
然后就要求它的新性能

807
00:26:10,436 --> 0:26:12,676
supportedMultiCamDeviceSets

808
00:26:12,676 --> 0:26:14,456
这将引进一个

809
00:26:14,456 --> 0:26:16,706
告诉你哪个你可以一起使用的

810
00:26:16,706 --> 0:26:18,186
无序的集合的阵列

811
00:26:19,236 --> 0:26:21,216
接下来就是

812
00:26:21,216 --> 0:26:23,336
我们人工地限制

813
00:26:23,496 --> 0:26:24,846
你允许运行的格式的方法

814
00:26:25,546 --> 0:26:27,416
支持的格式

815
00:26:27,536 --> 0:26:28,996
上一个是我在 iPhone XS 上检查的

816
00:26:29,566 --> 0:26:31,386
那里在后置摄像头上

817
00:26:31,386 --> 0:26:32,006
有超过 40 的格式

818
00:26:32,006 --> 0:26:33,466
所以有很多可以选择

819
00:26:33,626 --> 0:26:35,016
但是我们限制了

820
00:26:35,016 --> 0:26:36,276
可以与 MultiCamSession 运行的

821
00:26:36,276 --> 0:26:37,956
实际的视频格式

822
00:26:37,956 --> 0:26:39,146
因为这些是我们可以

823
00:26:39,146 --> 0:26:41,226
同时在一个终端设备

824
00:26:41,526 --> 0:26:42,706
运行的

825
00:26:43,196 --> 0:26:44,096
再一次 这个有点像视力表

826
00:26:44,096 --> 0:26:45,066
但是我将要

827
00:26:45,066 --> 0:26:46,346
把你们的注意力转向群组

828
00:26:46,966 --> 0:26:48,506
第一个群组是

829
00:26:48,556 --> 0:26:49,136
合并像素格式

830
00:26:49,346 --> 0:26:50,386
记得低功率吗

831
00:26:50,386 --> 0:26:51,666
是的 它们是我们的朋友

832
00:26:51,936 --> 0:26:53,036
在传感器 你会获得

833
00:26:53,386 --> 0:26:54,496
2x2 的合并像素

834
00:26:54,496 --> 0:26:55,786
所以你的能耗

835
00:26:55,786 --> 0:26:56,196
是很低的

836
00:26:57,016 --> 0:26:59,166
所有这些最高到 60 fps 都是可行的

837
00:26:59,296 --> 0:27:01,336
你的选择从 640x480

838
00:26:59,296 --> 0:27:01,336
你的选择从 640x480

839
00:27:01,336 --> 0:27:03,896
一直到 1920x1440

840
00:27:04,006 --> 0:27:08,296
下一个群组就是在 30 的 1920x1080

841
00:27:08,296 --> 0:27:10,076
这是一个没有合并像素的格式

842
00:27:10,416 --> 0:27:11,746
如果你在常规传统会话中

843
00:27:11,746 --> 0:27:12,806
选择了高预设

844
00:27:12,806 --> 0:27:15,396
你得到的将和它一样

845
00:27:15,996 --> 0:27:18,066
这个对于 MultiCam 是可行的

846
00:27:18,406 --> 0:27:21,606
最后一个是 1920x1440

847
00:27:21,606 --> 0:27:22,766
在 30 fps 是不合并的

848
00:27:23,256 --> 0:27:24,616
这个对于照片格式来说

849
00:27:24,616 --> 0:27:25,666
是一个很好的替换

850
00:27:26,206 --> 0:27:28,726
我们在终端摄像头上

851
00:27:28,726 --> 0:27:29,886
不支持 12 兆像素

852
00:27:30,216 --> 0:27:31,706
它对于手机

853
00:27:31,756 --> 0:27:32,566
会有一些不好的影响

854
00:27:33,026 --> 0:27:34,316
但是我们允许你

855
00:27:34,316 --> 0:27:36,696
在 30 fps 时像素是 1920x1440

856
00:27:36,756 --> 0:27:38,316
请注意它还会让你

857
00:27:38,316 --> 0:27:40,556
使用 1200 万像素

858
00:27:40,926 --> 0:27:43,416
如果你想要

859
00:27:43,886 --> 0:27:45,236
同时用多个摄像头进行拍摄

860
00:27:45,436 --> 0:27:47,256
这是一个很好的代理技术

861
00:27:47,826 --> 0:27:51,026
现在 你要如何确认

862
00:27:51,026 --> 0:27:52,446
一个格式是否支持多摄像头呢

863
00:27:52,636 --> 0:27:53,446
你只需要问即可

864
00:27:53,836 --> 0:27:55,336
所以在格式中迭代时

865
00:27:55,336 --> 0:27:57,196
你可以声明 isMultiCamSupported

866
00:27:57,196 --> 0:27:58,636
如果是的话

867
00:27:58,636 --> 0:27:59,036
你可以使用它

868
00:27:59,606 --> 0:28:01,326
在这个代码中

869
00:27:59,606 --> 0:28:01,326
在这个代码中

870
00:28:01,326 --> 0:28:02,736
我在一个设备中迭代格式

871
00:28:03,026 --> 0:28:04,916
选择下一个

872
00:28:04,916 --> 0:28:06,996
分辨率最低的并且支持多摄像头的

873
00:28:06,996 --> 0:28:09,466
然后将其设定为我的活跃格式

874
00:28:09,466 --> 0:28:12,666
最后一个我们人工限制

875
00:28:12,666 --> 0:28:15,256
就是因为我们需要报告消耗

876
00:28:15,256 --> 0:28:17,836
那些消耗是由

877
00:28:17,836 --> 0:28:20,676
MultiCamSession 报告的

878
00:28:20,676 --> 0:28:22,386
我们明确地

879
00:28:22,536 --> 0:28:24,966
在一个 App 中不支持

880
00:28:24,966 --> 0:28:26,636
拥有多摄像头的 iOS 多会话

881
00:28:26,756 --> 0:28:28,036
我们同样在多个 App 中

882
00:28:28,246 --> 0:28:29,786
不能支持

883
00:28:29,786 --> 0:28:31,186
多个摄像头

884
00:28:31,476 --> 0:28:33,496
请注意在 iOS 上的支持

885
00:28:33,496 --> 0:28:35,806
还是一次只限制于一个会话

886
00:28:36,136 --> 0:28:37,276
不过当然了

887
00:28:37,276 --> 0:28:40,296
你可以一次运行多个摄像头

888
00:28:40,296 --> 0:28:42,986
父亲谈话到此结束好吗

889
00:28:43,066 --> 0:28:45,546
写好的代码 十一点前回家

890
00:28:45,826 --> 0:28:47,246
如果你的计划改变了 打我电话

891
00:28:47,626 --> 0:28:51,376
好的 我们现在继续回到一些有趣的事情

892
00:28:52,656 --> 0:28:53,606
同步的数据流

893
00:28:54,126 --> 0:28:57,066
我只讲了一点点

894
00:28:57,066 --> 0:28:58,156
关于软件摄像头的事

895
00:28:59,036 --> 0:29:00,386
双摄像头是一个

896
00:28:59,036 --> 0:29:00,386
双摄像头是一个

897
00:29:00,386 --> 0:29:02,156
在 iPhone 7 Plus 被导入

898
00:29:02,566 --> 0:29:03,616
它现在也在

899
00:29:03,616 --> 0:29:05,626
iPhone XS 和 XS Max 上展示

900
00:29:05,626 --> 0:29:07,616
TrueDepth 摄像头

901
00:29:07,616 --> 0:29:08,846
是另一个类型的软件摄像头

902
00:29:08,846 --> 0:29:10,546
因为它由一个红外摄像头

903
00:29:10,546 --> 0:29:12,266
和一个 RGB 摄像头组成

904
00:29:12,266 --> 0:29:15,086
通过得到它们两个之间的视差

905
00:29:15,186 --> 0:29:17,026
它可以得到一个深度

906
00:29:18,296 --> 0:29:20,316
现在 我们还没有给

907
00:29:20,546 --> 0:29:22,326
特殊类型的摄像头命名

908
00:29:22,886 --> 0:29:23,896
但是我们现在要这样做了

909
00:29:24,016 --> 0:29:25,486
在 iOS 13 中

910
00:29:25,486 --> 0:29:26,556
我们将其称为虚拟摄像头

911
00:29:27,116 --> 0:29:29,566
DualCam 就是其中之一

912
00:29:29,566 --> 0:29:31,016
它会在某时展示一个视频流

913
00:29:31,016 --> 0:29:33,686
然后会根据

914
00:29:33,686 --> 0:29:36,226
你的放大系数来切换

915
00:29:36,406 --> 0:29:38,586
如果你放大 2 倍

916
00:29:38,586 --> 0:29:40,146
它会转到长焦镜头

917
00:29:40,146 --> 0:29:41,576
而不是广角镜头

918
00:29:42,036 --> 0:29:43,626
它与深度一起还有一些奇招

919
00:29:43,976 --> 0:29:45,786
因为它有两个图像

920
00:29:45,816 --> 0:29:47,036
可以用来生成

921
00:29:47,036 --> 0:29:48,026
它们之间的视差

922
00:29:48,576 --> 0:29:49,296
但是从你的角度来说

923
00:29:49,296 --> 0:29:50,266
你一次还是只能

924
00:29:50,266 --> 0:29:53,846
得到一个流

925
00:29:54,046 --> 0:29:55,766
因为我们现在有了一个名称

926
00:29:55,766 --> 0:29:57,536
它们也是你可以查询的

927
00:29:57,536 --> 0:29:58,406
在 API 上的属性

928
00:29:58,486 --> 0:29:59,516
在你看你的摄像头设备时

929
00:29:59,516 --> 0:30:01,036
你可以以编程方式

930
00:29:59,516 --> 0:30:01,036
你可以以编程方式

931
00:30:01,426 --> 0:30:02,996
去了解这个是否

932
00:30:02,996 --> 0:30:03,846
是一个虚拟设备

933
00:30:04,236 --> 0:30:05,856
如果是的话 你可以询问它

934
00:30:05,936 --> 0:30:07,666
你的实体设备是什么呢

935
00:30:08,146 --> 0:30:10,096
在 API 中我们称其为

936
00:30:10,256 --> 0:30:11,626
constituentDevices

937
00:30:13,556 --> 0:30:15,256
同步的流都是关于

938
00:30:15,256 --> 0:30:17,216
使用一个虚拟设备的

939
00:30:17,216 --> 0:30:20,096
构成的设备

940
00:30:20,096 --> 0:30:21,996
然后同时运行它们

941
00:30:22,326 --> 0:30:23,436
换句话说

942
00:30:23,436 --> 0:30:24,916
首次我们会允许你

943
00:30:24,916 --> 0:30:26,856
同时从广角和长焦镜头

944
00:30:26,856 --> 0:30:30,456
流同步的视频

945
00:30:30,626 --> 0:30:31,506
你继续在虚拟设备上

946
00:30:31,506 --> 0:30:32,726
设定属性

947
00:30:32,726 --> 0:30:34,796
而不是在组成设备上

948
00:30:35,326 --> 0:30:38,626
这是一些适当的规则

949
00:30:39,426 --> 0:30:40,826
当你运行虚拟设备时

950
00:30:41,186 --> 0:30:43,116
组成设备不允许

951
00:30:43,116 --> 0:30:44,246
随意运行

952
00:30:45,116 --> 0:30:46,446
它们拥有相同的

953
00:30:46,446 --> 0:30:47,186
活跃的分辨率

954
00:30:47,186 --> 0:30:48,486
它们有相同的帧率

955
00:30:49,066 --> 0:30:50,836
在硬件方面

956
00:30:50,836 --> 0:30:51,866
它们是同步的

957
00:30:52,196 --> 0:30:55,616
这意味着它们在读出

958
00:30:55,656 --> 0:30:57,226
传感器用同步的方式

959
00:30:57,226 --> 0:30:58,786
读出那些帧率

960
00:30:58,786 --> 0:31:01,056
所以这个读出的

961
00:31:01,056 --> 0:31:03,376
中线的钟表时间

962
00:30:58,786 --> 0:31:01,056
所以这个读出的

963
00:31:01,056 --> 0:31:03,376
中线的钟表时间

964
00:31:03,376 --> 0:31:04,756
是相同的

965
00:31:05,706 --> 0:31:07,216
所以 这意味着

966
00:31:07,346 --> 0:31:08,306
它们在画面中间匹配

967
00:31:08,596 --> 0:31:10,496
这也意味着曝光

968
00:31:10,706 --> 0:31:12,536
白平衡和焦点是串接的

969
00:31:12,536 --> 0:31:14,046
这样非常好

970
00:31:14,046 --> 0:31:15,346
这让它看上去

971
00:31:15,346 --> 0:31:16,446
感觉像是相同的摄像头

972
00:31:16,646 --> 0:31:17,696
它只是碰巧在

973
00:31:17,696 --> 0:31:19,136
两个不同的视野

974
00:31:21,836 --> 0:31:24,756
事实胜于雄辩

975
00:31:24,756 --> 0:31:25,786
让我们来展示一下

976
00:31:26,006 --> 0:31:27,986
这个是 AVDualCam

977
00:31:28,546 --> 0:31:29,826
好的

978
00:31:31,276 --> 0:31:33,656
AVDualCam 通过向你展示

979
00:31:34,076 --> 0:31:36,306
两个同时运行的摄像头

980
00:31:36,306 --> 0:31:37,926
让你知道

981
00:31:37,926 --> 0:31:39,446
虚拟摄像头看到的

982
00:31:39,656 --> 0:31:42,106
它通过向你展示

983
00:31:42,106 --> 0:31:44,086
这些摄像头不同的视角来实现这点

984
00:31:44,916 --> 0:31:47,346
好的 现在我有

985
00:31:47,346 --> 0:31:49,276
在双摄像头中同时运行的

986
00:31:49,276 --> 0:31:51,496
广角和长焦构成流

987
00:31:51,856 --> 0:31:53,136
左侧是广角

988
00:31:53,476 --> 0:31:54,876
右侧是长焦

989
00:31:55,656 --> 0:31:56,406
不相信我吗

990
00:31:56,406 --> 0:31:58,686
这里 我将把我的手指放在一侧

991
00:31:58,686 --> 0:32:01,596
啊 我将把我的手指放在另一侧

992
00:31:58,686 --> 0:32:01,596
啊 我将把我的手指放在另一侧

993
00:32:01,596 --> 0:32:02,976
看见了吗 它们是不同的摄像头

994
00:32:03,516 --> 0:32:05,606
[掌声]

995
00:32:06,106 --> 0:32:07,736
我只需要拉近或推远广角镜头

996
00:32:07,736 --> 0:32:08,966
所以它可以和长焦镜头

997
00:32:08,966 --> 0:32:09,956
有相同的视野

998
00:32:10,636 --> 0:32:12,516
但是你可以发现

999
00:32:12,516 --> 0:32:13,986
它们运行的非常同步

1000
00:32:13,986 --> 0:32:15,506
这里没有分裂

1001
00:32:15,506 --> 0:32:16,676
在垂直遮没中也没有

1002
00:32:16,676 --> 0:32:17,526
奇怪的地方

1003
00:32:18,146 --> 0:32:20,196
它们的曝光和焦点

1004
00:32:20,196 --> 0:32:21,376
同时改变

1005
00:32:22,556 --> 0:32:23,396
更有趣的事会发生

1006
00:32:23,396 --> 0:32:24,506
如果我们将并排的视图

1007
00:32:24,506 --> 0:32:27,706
改成分别的视图

1008
00:32:28,246 --> 0:32:29,916
现在 这个有点难观察

1009
00:32:30,306 --> 0:32:33,136
但是我在

1010
00:32:33,136 --> 0:32:35,166
左边展示广角镜头

1011
00:32:35,166 --> 0:32:35,496
在右边展示长焦镜头

1012
00:32:35,676 --> 0:32:36,866
我只向你们展示

1013
00:32:36,866 --> 0:32:37,376
每个画面的一半

1014
00:32:38,506 --> 0:32:40,676
现在如果我点三下

1015
00:32:40,756 --> 0:32:43,566
会出现 距离米数 

1016
00:32:43,566 --> 0:32:45,846
这让我可以改变

1017
00:32:45,936 --> 0:32:47,616
两个图像的深度衔接平面

1018
00:32:48,246 --> 0:32:50,426
这个 App 知道

1019
00:32:50,426 --> 0:32:52,336
如何互相注册两个图像

1020
00:32:52,596 --> 0:32:54,456
所以 这个可以让我

1021
00:32:54,516 --> 0:32:56,256
玩弄在深度相交的平面

1022
00:32:56,256 --> 0:32:57,416
这有点像你眼睛看到的

1023
00:32:57,976 --> 0:32:59,296
当你很近地聚焦在某件东西上

1024
00:32:59,336 --> 0:33:01,186
或者拉远

1025
00:32:59,336 --> 0:33:01,186
或者拉远

1026
00:33:01,186 --> 0:33:03,126
你可能会改变平面的深度相交

1027
00:33:03,516 --> 0:33:05,126
比如说 贴近我的手

1028
00:33:05,126 --> 0:33:07,706
我可以找到

1029
00:33:07,706 --> 0:33:10,476
深度相交的很好的地方

1030
00:33:10,676 --> 0:33:12,686
开始吧 现在我有一个完整的手了

1031
00:33:13,256 --> 0:33:15,526
但是我后面的车则不一样了

1032
00:33:15,526 --> 0:33:20,556
所以我可以继续拉远 好的

1033
00:33:20,556 --> 0:33:22,766
但是这个对后面的车又不对了

1034
00:33:23,536 --> 0:33:26,116
现在我可以把那个也拉回来

1035
00:33:26,196 --> 0:33:28,696
这就是双摄像头流

1036
00:33:28,696 --> 0:33:30,876
双摄像头的同步

1037
00:33:31,516 --> 0:33:36,500
[掌声]

1038
00:33:39,256 --> 0:33:40,536
这里有个图展示了

1039
00:33:40,706 --> 0:33:42,166
AVDualCam 的图表

1040
00:33:43,296 --> 0:33:44,936
它没有分别使用设备输入

1041
00:33:44,936 --> 0:33:46,216
而是只有一个

1042
00:33:46,786 --> 0:33:47,856
所以它对双摄像头

1043
00:33:47,856 --> 0:33:49,036
使用单一的设备输入

1044
00:33:49,366 --> 0:33:51,076
但是它用同步的方式

1045
00:33:51,076 --> 0:33:53,456
获得广角和长焦画面

1046
00:33:53,906 --> 0:33:55,426
应用于两个 VideoDataOutputs

1047
00:33:56,286 --> 0:33:57,346
你会注意到这里有一个

1048
00:33:57,526 --> 0:33:59,426
小的对象

1049
00:33:59,426 --> 0:34:00,166
在底部有个名为

1050
00:33:59,426 --> 0:34:00,166
在底部有个名为

1051
00:34:00,166 --> 0:34:02,046
AVCaptureDataOutputSynchronizer 的方块

1052
00:34:02,286 --> 0:34:03,266
我不想迷惑你

1053
00:34:03,626 --> 0:34:04,816
这个并不会执行

1054
00:34:04,816 --> 0:34:06,586
我谈到的硬件同步

1055
00:34:06,876 --> 0:34:08,795
如果你想要的话

1056
00:34:08,835 --> 0:34:10,466
它只是一个在会话底部的对象

1057
00:34:10,466 --> 0:34:12,426
这会让你在一个单一的回调中

1058
00:34:12,656 --> 0:34:14,335
同时可以得到

1059
00:34:14,396 --> 0:34:16,266
多个回调

1060
00:34:16,266 --> 0:34:17,666
你可以不必获得

1061
00:34:17,666 --> 0:34:18,835
针对广角和长焦的

1062
00:34:18,835 --> 0:34:19,846
单独的 VideoDataOutput 回调

1063
00:34:19,846 --> 0:34:21,176
你可以启动

1064
00:34:21,176 --> 0:34:22,646
在底部的 DataOutputSynchronizer

1065
00:34:22,646 --> 0:34:24,216
通过一个单一的回调

1066
00:34:24,216 --> 0:34:26,295
同时得到两个画面

1067
00:34:26,295 --> 0:34:27,746
这样非常的便利

1068
00:34:28,366 --> 0:34:30,545
在它下面有

1069
00:34:30,545 --> 0:34:31,976
Metal Shader Filter / Compositor

1070
00:34:31,976 --> 0:34:33,025
这会很魔幻

1071
00:34:33,576 --> 0:34:34,916
正如我说的

1072
00:34:34,916 --> 0:34:36,196
它知道如何将这些画面混合在一起

1073
00:34:36,416 --> 0:34:38,005
它会决定如何

1074
00:34:38,005 --> 0:34:39,126
把这些画面

1075
00:34:39,126 --> 0:34:40,286
放置在预览的正确位置

1076
00:34:40,466 --> 0:34:42,436
它还可以将它们

1077
00:34:42,436 --> 0:34:44,016
发送给一个 AVAssetWriter

1078
00:34:44,016 --> 0:34:45,166
来保存一个视频轨道

1079
00:34:46,206 --> 0:34:48,335
现在回调我之前的图标

1080
00:34:50,286 --> 0:34:51,686
我展示给你们一个

1081
00:34:51,716 --> 0:34:53,166
AVCaptureDeviceInput 的特写视图

1082
00:34:53,426 --> 0:34:55,016
特别是双摄像头

1083
00:34:55,815 --> 0:34:57,045
双摄像头输入的端口属性

1084
00:34:57,045 --> 0:35:00,466
展示了你刚刚看到的端口

1085
00:34:57,045 --> 0:35:00,466
展示了你刚刚看到的端口

1086
00:35:01,526 --> 0:35:03,016
有人在那里看到了

1087
00:35:03,016 --> 0:35:03,236
两个视频端口吗

1088
00:35:03,316 --> 0:35:06,116
我没有看到两个视频端口

1089
00:35:06,146 --> 0:35:07,636
那我们如何从

1090
00:35:07,636 --> 0:35:10,446
我们看到的那些输入端口得到

1091
00:35:10,446 --> 0:35:11,226
广角和长焦呢

1092
00:35:11,526 --> 0:35:13,166
一个视频端口会

1093
00:35:13,166 --> 0:35:14,726
给我们两个镜头吗 不

1094
00:35:14,726 --> 0:35:16,336
它不会给我们广角或长焦

1095
00:35:16,446 --> 0:35:18,236
它给我们的是

1096
00:35:18,236 --> 0:35:19,946
双摄像头根据

1097
00:35:19,946 --> 0:35:22,056
放大系数决定的

1098
00:35:22,056 --> 0:35:24,626
这不会帮助我们

1099
00:35:24,626 --> 0:35:26,506
同时得到构成的流

1100
00:35:26,506 --> 0:35:27,946
那我们怎么做呢

1101
00:35:28,676 --> 0:35:29,806
我来告诉你

1102
00:35:30,396 --> 0:35:31,096
但是这是一个秘密

1103
00:35:31,096 --> 0:35:33,716
所以你要保证别告诉别人 好吗

1104
00:35:34,516 --> 0:35:38,286
虚拟设备拥有秘密的端口 好吗

1105
00:35:39,576 --> 0:35:42,606
这些秘密的端口

1106
00:35:42,636 --> 0:35:44,126
之前对于你们来说是未知的

1107
00:35:44,126 --> 0:35:44,616
现在可以用了

1108
00:35:44,616 --> 0:35:45,546
但是你不用把他们拿出

1109
00:35:45,546 --> 0:35:46,716
端口阵列

1110
00:35:47,126 --> 0:35:49,776
通过了解该问什么

1111
00:35:49,776 --> 0:35:50,416
你就可以得到它们

1112
00:35:51,106 --> 0:35:53,086
所以 你可以不用

1113
00:35:53,086 --> 0:35:54,836
只是得到包括不能

1114
00:35:54,836 --> 0:35:56,396
与单一摄像头会话使用的端口的

1115
00:35:56,396 --> 0:35:58,126
可达到的端口类型的阵列

1116
00:35:58,126 --> 0:36:01,286
你可以通过名称寻找它们

1117
00:35:58,126 --> 0:36:01,286
你可以通过名称寻找它们

1118
00:36:01,786 --> 0:36:03,566
在这里我们有 dualCameraInput

1119
00:36:03,626 --> 0:36:05,986
我在寻找

1120
00:36:05,986 --> 0:36:07,516
拥有源设备类型广角镜头

1121
00:36:07,796 --> 0:36:09,746
和源设备类型

1122
00:36:09,746 --> 0:36:12,876
长焦镜头 可以了 啊哈

1123
00:36:13,066 --> 0:36:14,546
这些就是我知道的秘密端口

1124
00:36:14,546 --> 0:36:17,456
我现在将把它们展示给你们 一旦你得到这些输入端口

1125
00:36:17,856 --> 0:36:18,836
你可以用你在

1126
00:36:18,836 --> 0:36:20,426
自己的手动连接创作中

1127
00:36:20,426 --> 0:36:22,406
相同的方法来

1128
00:36:22,476 --> 0:36:23,386
安装至一个连接

1129
00:36:24,006 --> 0:36:25,576
然后你就可以从

1130
00:36:25,576 --> 0:36:27,526
广角或广角或者两个镜头同时视频流

1131
00:36:29,106 --> 0:36:30,966
现在在 AVDualCam 展示中

1132
00:36:30,966 --> 0:36:32,146
我可以用正确的视角

1133
00:36:32,196 --> 0:36:34,526
改变广角和

1134
00:36:34,526 --> 0:36:36,106
长焦镜头

1135
00:36:36,106 --> 0:36:37,056
深度会合平面

1136
00:36:37,056 --> 0:36:38,956
你会看到那不是

1137
00:36:38,956 --> 0:36:40,276
完全的移动或震动

1138
00:36:40,276 --> 0:36:41,556
它只是按照我想要的

1139
00:36:41,646 --> 0:36:42,786
在平面旁移动

1140
00:36:42,786 --> 0:36:45,116
它只是在平面的基线旁

1141
00:36:45,256 --> 0:36:46,686
我可以这样做

1142
00:36:46,686 --> 0:36:48,336
因为 AVFoundation 给我们提供了

1143
00:36:48,926 --> 0:36:50,216
一些单应性帮助

1144
00:36:50,696 --> 0:36:51,616
如果你不熟悉

1145
00:36:51,616 --> 0:36:52,546
单应性这个词

1146
00:36:52,546 --> 0:36:54,466
它和相同的平面上的

1147
00:36:54,466 --> 0:36:55,146
两个图像相关联

1148
00:36:55,886 --> 0:36:57,486
它们是电脑视角的基础

1149
00:36:57,806 --> 0:36:59,996
它们对于如图像校正

1150
00:36:59,996 --> 0:37:02,946
图像配准等任务是很普遍的

1151
00:36:59,996 --> 0:37:02,946
图像配准等任务是很普遍的

1152
00:37:03,546 --> 0:37:05,906
现在摄像头的内联函数

1153
00:37:05,906 --> 0:37:06,876
对于 iOS 来说不是新鲜事

1154
00:37:06,876 --> 0:37:08,606
我们在 iOS 11 上引入它们

1155
00:37:09,436 --> 0:37:10,886
它们展示在 3x3 矩阵中

1156
00:37:10,886 --> 0:37:12,486
矩阵描绘了一个摄像头的

1157
00:37:12,486 --> 0:37:13,946
几何属性

1158
00:37:14,046 --> 0:37:16,616
也就是在这能看到的它的焦距

1159
00:37:16,986 --> 0:37:19,386
它的光心

1160
00:37:20,196 --> 0:37:22,706
使用针孔照摄像头

1161
00:37:22,706 --> 0:37:24,156
你可以看到它在哪里进入了针孔

1162
00:37:24,156 --> 0:37:25,736
然后击中传感器

1163
00:37:25,736 --> 0:37:27,146
也就是光学传感器

1164
00:37:27,146 --> 0:37:28,736
两者之间的距离

1165
00:37:28,736 --> 0:37:30,266
就是焦距

1166
00:37:31,696 --> 0:37:33,206
现在你可以通过输入

1167
00:37:33,206 --> 0:37:35,296
AVCaptureConnection 

1168
00:37:35,856 --> 0:37:36,476
并且声明你想选择加入

1169
00:37:36,476 --> 0:37:38,156
内部传送

1170
00:37:38,396 --> 0:37:40,346
来接受逐帧内联函数

1171
00:37:40,776 --> 0:37:42,296
一旦你这样做了

1172
00:37:42,356 --> 0:37:43,886
那么每一个你接受的

1173
00:37:43,886 --> 0:37:45,536
VideoDataOutput 缓冲都会

1174
00:37:45,536 --> 0:37:46,326
拥有这个附件

1175
00:37:46,746 --> 0:37:48,546
CameraIntrinsicMatrix

1176
00:37:48,546 --> 0:37:50,686
还是一个包含

1177
00:37:51,006 --> 0:37:53,626
浮点型矩阵 3x3 的 NS 数据

1178
00:37:53,626 --> 0:37:54,286
这是一个 SIMDI 类型

1179
00:37:54,936 --> 0:37:56,006
当你得到广角画面

1180
00:37:56,006 --> 0:37:59,076
它有针对广角镜头的矩阵

1181
00:37:59,386 --> 0:38:01,046
当你得到长焦画面

1182
00:37:59,386 --> 0:38:01,046
当你得到长焦画面

1183
00:38:01,046 --> 0:38:04,966
它有针对长焦镜头的矩阵

1184
00:38:04,966 --> 0:38:06,636
现在 在新的 iOS 13 中

1185
00:38:06,636 --> 0:38:09,026
我们在设备层面提供了

1186
00:38:09,026 --> 0:38:09,306
摄像头外参数

1187
00:38:09,776 --> 0:38:12,556
外参数是一个转置矩阵

1188
00:38:12,636 --> 0:38:14,146
和一个平移向量

1189
00:38:14,296 --> 0:38:18,426
一起填进一个矩阵

1190
00:38:18,866 --> 0:38:20,156
这些和参考摄像头相比都描述了

1191
00:38:20,186 --> 0:38:23,656
摄像头的姿势

1192
00:38:23,696 --> 0:38:24,686
这会帮助你

1193
00:38:24,686 --> 0:38:25,756
如果你想要叙述两个摄像头在哪里

1194
00:38:25,756 --> 0:38:28,516
包括它们的俯仰

1195
00:38:28,516 --> 0:38:29,446
以及它们的焦段

1196
00:38:29,886 --> 0:38:32,906
所以 AVDualCam 使用外参数

1197
00:38:33,226 --> 0:38:34,886
来了解如何在彼此之间

1198
00:38:34,886 --> 0:38:36,986
相对校准广角和

1199
00:38:36,986 --> 0:38:38,116
长焦镜头画面

1200
00:38:38,116 --> 0:38:38,996
这样它们就可以

1201
00:38:38,996 --> 0:38:40,006
进行整齐的视角转换

1202
00:38:40,096 --> 0:38:43,486
这是一个非常非常简短的

1203
00:38:43,486 --> 0:38:46,126
关于内参数和外参数复习

1204
00:38:46,426 --> 0:38:47,636
我在两年前

1205
00:38:47,896 --> 0:38:49,686
在演讲 507 中

1206
00:38:49,686 --> 0:38:51,856
用非常乏味的细节介绍过它们

1207
00:38:52,216 --> 0:38:53,406
如果你很喜欢

1208
00:38:53,406 --> 0:38:54,436
双关语的话

1209
00:38:54,436 --> 0:38:55,936
你可以去复习一下那个演讲

1210
00:38:56,071 --> 0:38:58,071
[笑声]

1211
00:38:58,126 --> 0:39:00,706
好的 最后一个关于多摄像头摄制的话题就是

1212
00:38:58,126 --> 0:39:00,706
好的 最后一个关于多摄像头摄制的话题就是

1213
00:39:00,706 --> 0:39:03,366
多麦克风摄制

1214
00:39:03,916 --> 0:39:05,276
好的

1215
00:39:05,506 --> 0:39:06,666
让我们复习一下

1216
00:39:06,666 --> 0:39:09,286
麦克风摄制的初始行为

1217
00:39:09,286 --> 0:39:10,946
如果它们使用一个传统的

1218
00:39:10,946 --> 0:39:11,736
AVCaptureSession 的话

1219
00:39:13,696 --> 0:39:16,036
麦克风跟随摄像头

1220
00:39:16,456 --> 0:39:17,636
这就和我说的一样简单

1221
00:39:17,906 --> 0:39:19,696
所以如果你有一个

1222
00:39:19,696 --> 0:39:21,236
接入你会话的前置摄像头和一个麦克风

1223
00:39:21,486 --> 0:39:24,456
它会自动选择

1224
00:39:24,496 --> 0:39:25,966
和前置摄像头

1225
00:39:25,966 --> 0:39:27,516
方向一样的麦克风

1226
00:39:28,036 --> 0:39:28,846
后置摄像头也是如此

1227
00:39:29,066 --> 0:39:30,766
它会制作一个很好的

1228
00:39:30,766 --> 0:39:32,836
心形线曲线图

1229
00:39:32,836 --> 0:39:34,206
这样它可以拒绝你不需要的那边的音频

1230
00:39:34,756 --> 0:39:35,936
这样 你就可以跟随你的主题

1231
00:39:36,016 --> 0:39:37,576
使用前置或者后置

1232
00:39:37,886 --> 0:39:40,256
如果你有一个纯音频会话

1233
00:39:40,256 --> 0:39:41,836
我们不太确定指导这个音频的方向

1234
00:39:41,836 --> 0:39:42,656
所以我们会给你一个

1235
00:39:42,656 --> 0:39:43,896
全方向的领域

1236
00:39:44,036 --> 0:39:46,416
作为一个功率特性

1237
00:39:46,416 --> 0:39:47,876
你可以将它们全部停用 你只需要说

1238
00:39:48,186 --> 0:39:49,586
别动 AVCaptureSession

1239
00:39:49,646 --> 0:39:51,296
我想要使用我自己的 AV 音频会话

1240
00:39:51,296 --> 0:39:53,716
以及配置我自己的音频

1241
00:39:53,926 --> 0:39:56,966
我们会尊重这个意愿的

1242
00:39:57,236 --> 0:39:58,526
现在我将告诉你们

1243
00:39:58,526 --> 0:39:59,776
另外一个小秘密

1244
00:40:02,636 --> 0:40:04,406
并没有前置麦克风这个东西

1245
00:40:04,406 --> 0:40:06,376
我刚刚是骗你们的

1246
00:40:07,386 --> 0:40:10,096
实际上 iPhone 拥有

1247
00:40:10,096 --> 0:40:11,456
麦克风阵列

1248
00:40:11,526 --> 0:40:12,756
根据不同的设备

1249
00:40:12,756 --> 0:40:13,916
有不同的数量

1250
00:40:14,316 --> 0:40:15,386
最近的 iPhone 

1251
00:40:15,466 --> 0:40:16,016
正好有四个

1252
00:40:16,016 --> 0:40:17,096
iPad 有五个

1253
00:40:17,576 --> 0:40:18,416
它们位于

1254
00:40:18,416 --> 0:40:20,056
不同的关键位置

1255
00:40:20,486 --> 0:40:21,876
在最近的 iPhone 中

1256
00:40:21,876 --> 0:40:23,166
有两个麦克风

1257
00:40:23,166 --> 0:40:26,226
位于底部 在上端 有两个在两侧

1258
00:40:26,716 --> 0:40:28,436
它们都是全方向的麦克风

1259
00:40:28,976 --> 0:40:30,166
现在 上端的麦克风

1260
00:40:30,166 --> 0:40:31,586
会有些声音的隔离

1261
00:40:31,586 --> 0:40:33,056
因为设备的机身

1262
00:40:33,056 --> 0:40:34,266
在它们中间

1263
00:40:34,266 --> 0:40:35,136
这就起到了一个挡板的作用

1264
00:40:35,136 --> 0:40:37,096
但是它还是没有

1265
00:40:37,096 --> 0:40:38,386
给你想要的很好的

1266
00:40:38,416 --> 0:40:39,536
方向性模式

1267
00:40:39,536 --> 0:40:41,826
所以你要做些什么

1268
00:40:41,826 --> 0:40:43,316
可以得到一些接近

1269
00:40:43,316 --> 0:40:44,406
前置或后置麦克风的东西

1270
00:40:45,596 --> 0:40:46,506
你做的被称为

1271
00:40:46,506 --> 0:40:48,066
麦克风波束形成

1272
00:40:48,556 --> 0:40:50,536
它可以加工原始音频信号

1273
00:40:50,536 --> 0:40:52,376
从而让它们变得

1274
00:40:52,376 --> 0:40:53,526
具有方向性

1275
00:40:53,646 --> 0:40:54,866
这就是核心音频

1276
00:40:54,866 --> 0:40:56,126
在我们这边所做的

1277
00:40:56,756 --> 0:40:58,896
在这里 我们有两个蓝点

1278
00:40:58,896 --> 0:41:00,326
它代表了一个 iPhone 上

1279
00:40:58,896 --> 0:41:00,326
它代表了一个 iPhone 上

1280
00:41:00,326 --> 0:41:02,256
两边的两个麦克风

1281
00:41:02,586 --> 0:41:04,606
圆圈大概是

1282
00:41:04,606 --> 0:41:06,166
它们听到的音频模型

1283
00:41:06,166 --> 0:41:07,416
请记住

1284
00:41:07,416 --> 0:41:08,506
它们都是全方向的麦克风

1285
00:41:08,746 --> 0:41:10,176
如果我们采用这两个信号

1286
00:41:10,176 --> 0:41:11,596
我们只是简单地扣掉它们

1287
00:41:11,876 --> 0:41:13,096
我们最后得到了一个像 8 的图形

1288
00:41:13,096 --> 0:41:14,496
这很酷

1289
00:41:14,496 --> 0:41:16,116
这不是我们想要的 但是很酷

1290
00:41:17,246 --> 0:41:20,756
如果我们想要进一步塑造它 

1291
00:41:20,756 --> 0:41:22,296
我可以在扣除它们之前就

1292
00:41:22,296 --> 0:41:23,366
增加一些增益

1293
00:41:23,516 --> 0:41:24,726
现在看起来就像

1294
00:41:24,726 --> 0:41:25,686
吃豆人幽灵

1295
00:41:26,016 --> 0:41:27,826
这样很好 我们在我们不想要的侧端旁边

1296
00:41:27,826 --> 0:41:28,806
得到了拒绝

1297
00:41:29,226 --> 0:41:30,626
但不幸的是

1298
00:41:30,626 --> 0:41:31,666
我们也减弱了信号

1299
00:41:31,666 --> 0:41:33,596
所以这个比我们想的声音要小

1300
00:41:34,876 --> 0:41:37,926
但是 如果在完成这些之后

1301
00:41:37,926 --> 0:41:39,526
我们对那个信号应用了一些增益

1302
00:41:39,776 --> 0:41:41,406
我们会得到一个很好的 很大的吃豆人幽灵

1303
00:41:41,516 --> 0:41:42,636
现在 我们得到了我们想要的

1304
00:41:42,636 --> 0:41:44,006
这个漂亮的心形曲线图

1305
00:41:44,246 --> 0:41:46,796
它拒绝了我们不想要的

1306
00:41:46,796 --> 0:41:47,796
一侧的摄像头

1307
00:41:48,556 --> 0:41:50,526
现在 它已经

1308
00:41:50,526 --> 0:41:51,116
过于简单化了

1309
00:41:51,396 --> 0:41:52,516
有很多过滤

1310
00:41:52,516 --> 0:41:53,826
来确保白噪音

1311
00:41:53,826 --> 0:41:54,586
没有上升

1312
00:41:55,126 --> 0:41:56,766
但是本质上来说这就是在发生的事情

1313
00:41:57,196 --> 0:41:58,676
到目前为止

1314
00:41:58,676 --> 0:42:00,006
每一次只有一个麦克风波束形成

1315
00:41:58,676 --> 0:42:00,006
每一次只有一个麦克风波束形成

1316
00:42:00,006 --> 0:42:00,986
可以被支持

1317
00:42:01,376 --> 0:42:02,946
但是在核心音频中的

1318
00:42:02,946 --> 0:42:04,396
好的东西为这个多摄像头特征

1319
00:42:04,396 --> 0:42:06,006
做了一些很好的工作

1320
00:42:06,366 --> 0:42:09,496
对于 iOS 13 来说

1321
00:42:09,736 --> 0:42:11,996
我们现在支持多个同时的波束形成

1322
00:42:13,516 --> 0:42:17,116
[掌声]

1323
00:42:17,616 --> 0:42:18,966
所以回到 AVCaptureSession

1324
00:42:18,966 --> 0:42:21,466
当你得到一个麦克风设备输入时

1325
00:42:21,466 --> 0:42:22,976
你找到了它的音频端口

1326
00:42:22,976 --> 0:42:25,886
这个端口可以

1327
00:42:26,656 --> 0:42:28,006
在很多地方

1328
00:42:28,006 --> 0:42:29,496
根据会话找到的

1329
00:42:29,496 --> 0:42:30,976
那个摄像头

1330
00:42:30,976 --> 0:42:31,926
它可以在前置 后置或全方位

1331
00:42:32,726 --> 0:42:33,446
当你使用 MultiCamSession 时

1332
00:42:33,446 --> 0:42:37,406
行为是很严格的

1333
00:42:38,166 --> 0:42:39,506
第一个端口

1334
00:42:39,506 --> 0:42:40,706
你找到的第一个音频端口

1335
00:42:40,706 --> 0:42:41,776
一般都是全方位的

1336
00:42:42,336 --> 0:42:43,946
然后你就会找到

1337
00:42:43,996 --> 0:42:45,266
我提到的获得专用的后置波束

1338
00:42:45,266 --> 0:42:47,376
或前置波束的

1339
00:42:47,456 --> 0:42:49,186
秘密端口

1340
00:42:50,086 --> 0:42:53,026
你实现这个的方法就是

1341
00:42:53,486 --> 0:42:56,976
使用那些相同设备输入端口的读取器

1342
00:42:56,976 --> 0:42:58,456
这一次

1343
00:42:58,456 --> 0:43:00,486
则是通过指定你感兴趣的位置

1344
00:42:58,456 --> 0:43:00,486
则是通过指定你感兴趣的位置

1345
00:43:01,016 --> 0:43:02,666
所以你可以要求前面的位置

1346
00:43:02,736 --> 0:43:04,136
或者是后面的位置

1347
00:43:04,306 --> 0:43:05,356
这会给你

1348
00:43:05,356 --> 0:43:06,276
你感兴趣的端口

1349
00:43:06,416 --> 0:43:07,596
你会得到一个很好的

1350
00:43:07,596 --> 0:43:09,000
后置或前置波束形成

1351
00:43:10,416 --> 0:43:11,456
这是前置的

1352
00:43:12,786 --> 0:43:15,736
这是后置的

1353
00:43:15,736 --> 0:43:16,426
现在回到我们之前与 Nik 的

1354
00:43:16,426 --> 0:43:18,956
MultiCamPiP 展示

1355
00:43:18,956 --> 0:43:21,276
我们向你们展示

1356
00:43:21,276 --> 0:43:23,276
图表的技术先进地方的时候

1357
00:43:23,276 --> 0:43:24,106
针对的是视频部分

1358
00:43:24,106 --> 0:43:25,656
现在我将回到那里

1359
00:43:25,656 --> 0:43:27,176
并告诉你们音频部分的情况

1360
00:43:28,166 --> 0:43:31,646
我们一直都是

1361
00:43:31,646 --> 0:43:33,726
运行有两个波束形成的单一设备输入

1362
00:43:34,186 --> 0:43:35,456
一个针对后置

1363
00:43:35,456 --> 0:43:36,166
一个针对前置

1364
00:43:36,626 --> 0:43:37,786
所以我们将它们运行至

1365
00:43:37,786 --> 0:43:39,326
两个不同的音频数据输出

1366
00:43:39,656 --> 0:43:41,096
这个幻灯片里应该说的是

1367
00:43:41,096 --> 0:43:41,556
音频数据输出

1368
00:43:42,066 --> 0:43:43,616
然后在运行的时候

1369
00:43:44,006 --> 0:43:44,806
在它们两者间选择

1370
00:43:44,886 --> 0:43:46,856
所以根据两者中间

1371
00:43:46,856 --> 0:43:48,496
哪个更大

1372
00:43:48,496 --> 0:43:50,826
我们可以在后置或前置转换

1373
00:43:50,826 --> 0:43:52,526
同时给你我们想要的波束形成

1374
00:43:54,296 --> 0:43:55,466
还有一些关于多摄像头摄制的

1375
00:43:55,466 --> 0:43:57,606
规则需要知道

1376
00:43:58,046 --> 0:44:00,156
波束形成只能与嵌入麦克风工作

1377
00:43:58,046 --> 0:44:00,156
波束形成只能与嵌入麦克风工作

1378
00:44:00,156 --> 0:44:01,606
如果你有一些

1379
00:44:01,676 --> 0:44:03,416
外部的 USB 你不需要知道

1380
00:44:03,416 --> 0:44:04,516
我们不知道如何

1381
00:44:04,516 --> 0:44:05,406
让波束形成与其共同运行

1382
00:44:06,036 --> 0:44:07,626
如果你恰好插入了一些其它东西

1383
00:44:07,626 --> 0:44:08,906
包括 AirPod 等

1384
00:44:08,906 --> 0:44:12,886
我们当然可以摄制音频

1385
00:44:13,196 --> 0:44:14,626
但是我们不知道如何波束形成

1386
00:44:14,626 --> 0:44:15,766
我们会将麦克风

1387
00:44:15,766 --> 0:44:17,336
在所有你连接的

1388
00:44:17,336 --> 0:44:18,726
输入中输送

1389
00:44:18,956 --> 0:44:20,776
所以 保证你没有失去信号

1390
00:44:20,906 --> 0:44:24,926
这就是今天

1391
00:44:24,926 --> 0:44:28,396
关于多摄像头摄制部分的演讲

1392
00:44:28,466 --> 0:44:29,586
我们来做一个快速的总结

1393
00:44:31,156 --> 0:44:33,666
多摄像头摄制会话

1394
00:44:33,666 --> 0:44:37,656
是 iOS 上同时运行多个摄像头的新方法

1395
00:44:38,686 --> 0:44:39,716
这是一个电源工具

1396
00:44:39,716 --> 0:44:41,466
但是它也有一些限制 了解它们

1397
00:44:42,916 --> 0:44:44,476
在你编程的时候

1398
00:44:44,476 --> 0:44:46,576
你需要深思熟虑地

1399
00:44:46,576 --> 0:44:47,636
处理硬件和系统压力消耗

1400
00:44:47,946 --> 0:44:50,316
如果你想要进行

1401
00:44:50,316 --> 0:44:51,726
同步的流

1402
00:44:51,726 --> 0:44:52,936
使用拥有构成的设备端口的

1403
00:44:52,976 --> 0:44:54,306
虚拟设备

1404
00:44:54,466 --> 0:44:56,436
最后 如果你想要进行多麦克风摄制

1405
00:44:56,436 --> 0:44:58,116
你要知道

1406
00:44:58,116 --> 0:44:59,506
你可以使用前置或后置波束形成

1407
00:44:59,506 --> 0:45:04,976
或者全方位 谢谢

1408
00:44:59,506 --> 0:45:04,976
或者全方位 谢谢

1409
00:45:05,516 --> 0:45:11,576
[掌声]

1410
00:45:12,076 --> 0:45:13,516
&gt;&gt; 嗨 我是 Jacob

1411
00:45:13,666 --> 0:45:14,946
我在这里要讲的是

1412
00:45:14,946 --> 0:45:16,296
语义分割抠像

1413
00:45:16,626 --> 0:45:18,386
首先 我要讲一下

1414
00:45:18,386 --> 0:45:20,126
这些新型的抠像

1415
00:45:20,126 --> 0:45:21,326
然后 David 会告诉你

1416
00:45:21,326 --> 0:45:23,126
如何利用 Core Image

1417
00:45:23,126 --> 0:45:25,186
来处理这些新抠像

1418
00:45:25,956 --> 0:45:28,736
记得吗 iOS 12 中

1419
00:45:28,736 --> 0:45:30,136
我们引入了人像效果抠像

1420
00:45:30,306 --> 0:45:32,276
所以这是一个

1421
00:45:32,276 --> 0:45:34,366
明确地为肖像提供效果

1422
00:45:34,616 --> 0:45:35,416
而设计的抠像

1423
00:45:35,926 --> 0:45:37,736
所以我们在内部

1424
00:45:37,736 --> 0:45:38,946
使用它来渲染好看的

1425
00:45:38,946 --> 0:45:41,576
人像模式照片和人像灯光照片

1426
00:45:41,576 --> 0:45:44,936
所以在仔细观察

1427
00:45:44,936 --> 0:45:47,206
人像效果抠像的时候

1428
00:45:47,206 --> 0:45:49,276
你可以清楚地看到它

1429
00:45:49,276 --> 0:45:50,516
是如何从背景中勾勒出

1430
00:45:50,516 --> 0:45:52,256
前景主体的

1431
00:45:52,646 --> 0:45:53,846
这里展示的

1432
00:45:53,846 --> 0:45:56,566
是一个很漂亮的黑白抠像

1433
00:45:56,866 --> 0:45:58,346
数值 1 表示前景

1434
00:45:58,556 --> 0:46:01,666
数值 0 表示背景

1435
00:45:58,556 --> 0:46:01,666
数值 0 表示背景

1436
00:46:02,676 --> 0:46:05,026
在 iOS 13 中 我们在

1437
00:46:05,026 --> 0:46:06,086
语义分割抠像上

1438
00:46:06,086 --> 0:46:07,076
更进一步

1439
00:46:08,376 --> 0:46:10,000
所以我们要介绍头发抠像 

1440
00:46:13,046 --> 0:46:15,046
皮肤抠像和牙齿抠像

1441
00:46:15,046 --> 0:46:19,876
所以 仔细观察一下

1442
00:46:20,046 --> 0:46:21,416
头发抠像 例如

1443
00:46:21,416 --> 0:46:23,446
你可以看到这是如何漂亮地

1444
00:46:23,696 --> 0:46:25,896
从非头发区域

1445
00:46:25,896 --> 0:46:26,806
分离头发区域的

1446
00:46:27,146 --> 0:46:29,026
所以我们在背景中

1447
00:46:29,026 --> 0:46:30,016
得到了很好的头发细节

1448
00:46:30,206 --> 0:46:31,536
我们在非头发区域

1449
00:46:31,536 --> 0:46:34,000
和头发区域之间得到了很大的分离

1450
00:46:35,446 --> 0:46:36,866
类似地 对于皮肤区域

1451
00:46:36,866 --> 0:46:38,386
我们现在有 alpha 值

1452
00:46:38,386 --> 0:46:40,256
来表示皮肤类型中

1453
00:46:40,626 --> 0:46:42,576
有多少像素

1454
00:46:42,576 --> 0:46:44,626
例如 alpha 值为 .7

1455
00:46:44,626 --> 0:46:45,936
表示一个像素是

1456
00:46:46,266 --> 0:46:48,286
皮肤类型的 70%

1457
00:46:49,096 --> 0:46:50,756
所以我们希望这三种

1458
00:46:50,886 --> 0:46:52,166
新类型的抠像

1459
00:46:52,166 --> 0:46:53,556
将给你的创作自由

1460
00:46:53,556 --> 0:46:55,976
去渲染一些很酷的

1461
00:46:55,976 --> 0:46:58,000
效果和美丽的照片

1462
00:46:59,856 --> 0:47:01,796
有几件事需要注意

1463
00:46:59,856 --> 0:47:01,796
有几件事需要注意

1464
00:47:01,856 --> 0:47:04,126
抠像只有原始图像的一半尺寸

1465
00:47:04,516 --> 0:47:05,976
这意味着它们是原始图像

1466
00:47:05,976 --> 0:47:07,306
尺寸大小的一半

1467
00:47:07,306 --> 0:47:08,716
这意味着四分之一的分辨率

1468
00:47:09,826 --> 0:47:11,436
另一件要记住的事是

1469
00:47:11,436 --> 0:47:12,886
这些分割的

1470
00:47:12,886 --> 0:47:13,936
抠像物体实际上是可以重叠的

1471
00:47:14,086 --> 0:47:16,116
所以这对于人像效果抠像

1472
00:47:16,116 --> 0:47:17,926
和皮肤抠像来说是特别真实的

1473
00:47:17,926 --> 0:47:19,466
因为它们会有内在的重叠

1474
00:47:21,296 --> 0:47:24,426
所以这些抠像并不是免费的

1475
00:47:24,426 --> 0:47:25,806
所以我们充分利用了

1476
00:47:25,806 --> 0:47:27,216
机器学习谱图理论的

1477
00:47:27,216 --> 0:47:28,476
Apple 神经引擎

1478
00:47:28,946 --> 0:47:30,286
和一些底层的东西

1479
00:47:30,286 --> 0:47:32,486
我们要做的就是获取

1480
00:47:32,486 --> 0:47:33,446
原始尺寸的图像

1481
00:47:33,516 --> 0:47:35,066
我们通过 Apple 神经引擎输入

1482
00:47:35,346 --> 0:47:38,046
结合原始尺寸的图像 我们渲染这些

1483
00:47:38,046 --> 0:47:41,096
高分辨率 高质量

1484
00:47:41,096 --> 0:47:42,936
高一致性的分割抠像

1485
00:47:43,316 --> 0:47:44,196
然后就可以将它们

1486
00:47:44,196 --> 0:47:45,406
嵌入到已知的

1487
00:47:45,446 --> 0:47:47,136
HEIF 或 JPEG 文件中

1488
00:47:47,136 --> 0:47:48,116
以及 iOS 11 中

1489
00:47:48,116 --> 0:47:50,396
已知的原始尺寸图像和深度

1490
00:47:51,046 --> 0:47:54,446
因此 有两种不同的方法

1491
00:47:54,446 --> 0:47:57,116
来生成这些抠像的新类型

1492
00:47:57,116 --> 0:47:58,686
一个是它们嵌入到

1493
00:47:58,686 --> 0:48:00,116
旧的人像模式摄制中

1494
00:47:58,686 --> 0:48:00,116
旧的人像模式摄制中

1495
00:48:00,376 --> 0:48:01,926
你可以从这些文件中获取它们

1496
00:48:02,336 --> 0:48:03,716
或者更好的是你可以编写

1497
00:48:03,716 --> 0:48:05,276
自己的摄制 App

1498
00:48:05,276 --> 0:48:06,466
并在摄制时选择加入这些抠像

1499
00:48:06,466 --> 0:48:08,406
如果你的文件中

1500
00:48:08,406 --> 0:48:10,366
有分割抠像

1501
00:48:10,366 --> 0:48:12,886
你可以通过 Core Image和 Image IO 来处理

1502
00:48:13,246 --> 0:48:15,506
David 会详细讲一下

1503
00:48:15,636 --> 0:48:17,256
但首先 我将向你们介绍

1504
00:48:17,256 --> 0:48:19,330
如何使用 AVFoundation API 进行摄制

1505
00:48:23,096 --> 0:48:24,416
这里我们要

1506
00:48:24,416 --> 0:48:25,436
经历四个阶段 这四个阶段

1507
00:48:25,506 --> 0:48:26,536
与扩展有关

1508
00:48:26,596 --> 0:48:28,096
首先是设置

1509
00:48:28,136 --> 0:48:29,316
AVCapturePhotoOutput

1510
00:48:29,766 --> 0:48:31,206
第二是当摄制请求

1511
00:48:31,206 --> 0:48:34,046
在你的 App 生命周期的任意点

1512
00:48:34,096 --> 0:48:35,346
被启动时

1513
00:48:35,596 --> 0:48:36,866
然后是两个回调

1514
00:48:36,936 --> 0:48:38,276
一个是当设置

1515
00:48:38,276 --> 0:48:39,616
为你的摄制解析时

1516
00:48:39,986 --> 0:48:41,446
最后一个是

1517
00:48:41,526 --> 0:48:43,086
照片处理完成时

1518
00:48:43,456 --> 0:48:45,356
所以 关于这个问题的详细信息

1519
00:48:45,566 --> 0:48:47,706
请参考 Brad 2017 年

1520
00:48:47,706 --> 0:48:49,000
关于这个话题的演讲

1521
00:48:51,476 --> 0:48:53,306
好的 让我们来看看

1522
00:48:53,306 --> 0:48:54,856
如何设置 AVCapturePhotoOutput

1523
00:48:54,856 --> 0:48:58,256
这通常发生在设置或配置会话时

1524
00:48:58,256 --> 0:49:00,356
至此

1525
00:48:58,256 --> 0:49:00,356
至此

1526
00:49:00,386 --> 0:49:02,186
你已经完成了初始配置的会话

1527
00:49:02,186 --> 0:49:03,306
你已经设置了你的预置

1528
00:49:03,306 --> 0:49:06,916
你已经添加了设备输入添加 AVCapturePhotoOutput

1529
00:49:07,306 --> 0:49:08,796
此时你告诉 API

1530
00:49:08,796 --> 0:49:10,956
在 App 生命周期的

1531
00:49:10,956 --> 0:49:11,946
任何时刻你想要的

1532
00:49:11,946 --> 0:49:14,706
分割抠像的父集是什么

1533
00:49:15,936 --> 0:49:17,056
当你真正想要

1534
00:49:17,056 --> 0:49:18,376
启动摄制请求时

1535
00:49:18,376 --> 0:49:20,526
你需要指定 AVCapturePhotoSettings

1536
00:49:20,946 --> 0:49:22,816
这就是你告诉API的地方

1537
00:49:22,816 --> 0:49:24,646
这就是我在这个特殊摄制中

1538
00:49:24,646 --> 0:49:25,716
真正想要的

1539
00:49:25,766 --> 0:49:27,656
这里你可以指定

1540
00:49:28,006 --> 0:49:29,366
所有你已经激活的

1541
00:49:29,756 --> 0:49:31,376
或者可以指定一个子集

1542
00:49:31,476 --> 0:49:32,016
比如头发或皮肤

1543
00:49:33,266 --> 0:49:35,416
现在 启动摄制请求

1544
00:49:35,596 --> 0:49:37,556
你给它 AVCapturePhotoSettings

1545
00:49:37,556 --> 0:49:38,566
你在你想要拥有回调的地方

1546
00:49:38,596 --> 0:49:40,136
给它委派

1547
00:49:41,166 --> 0:49:43,106
所以时间过去了

1548
00:49:43,636 --> 0:49:48,066
之后你将得到一个针对回调的摄制

1549
00:49:48,136 --> 0:49:50,956
如果你请求某些事

1550
00:49:51,436 --> 0:49:52,486
这就是 API 会告诉你的

1551
00:49:52,486 --> 0:49:53,316
但是这些不是

1552
00:49:53,316 --> 0:49:54,106
你将得到的

1553
00:49:54,536 --> 0:49:55,876
这对于人像特效抠像

1554
00:49:55,966 --> 0:49:56,936
和语义分割抠像

1555
00:49:56,936 --> 0:49:58,036
非常重要

1556
00:49:58,096 --> 0:49:59,336
因为如果画面中没有人

1557
00:49:59,336 --> 0:50:01,476
你实际上不会得到一个抠像

1558
00:49:59,336 --> 0:50:01,476
你实际上不会得到一个抠像

1559
00:50:01,856 --> 0:50:03,376
因此 你需要检查

1560
00:50:03,376 --> 0:50:05,896
语音分割抠像的尺寸

1561
00:50:05,896 --> 0:50:07,236
在这种情况下是零

1562
00:50:10,456 --> 0:50:11,486
更多的时间流逝了

1563
00:50:11,866 --> 0:50:13,216
照片处理完毕

1564
00:50:13,656 --> 0:50:15,736
这就是你得到

1565
00:50:15,736 --> 0:50:18,546
AV 语义分割抠像的时候了

1566
00:50:18,546 --> 0:50:20,096
在这种情况下这就是变量抠像

1567
00:50:20,546 --> 0:50:22,696
这个新类有相同

1568
00:50:23,106 --> 0:50:24,776
类型的方法和属性

1569
00:50:24,776 --> 0:50:26,216
正如你在肖像效果抠像中所知道的

1570
00:50:26,276 --> 0:50:27,606
这意味着

1571
00:50:27,606 --> 0:50:28,546
你可以根据 EXIF 数据

1572
00:50:28,546 --> 0:50:30,646
你可以得到你的 CVPixelBuffer 参考

1573
00:50:30,646 --> 0:50:32,446
或者你可以获得一个字典

1574
00:50:32,446 --> 0:50:36,516
表示的简单文件 IO

1575
00:50:36,726 --> 0:50:39,416
因此 要了解如何制作

1576
00:50:39,416 --> 0:50:41,126
这些图片的完整步骤

1577
00:50:41,126 --> 0:50:43,846
请参考 AVCam 示例 App

1578
00:50:43,846 --> 0:50:45,426
它已经更新了

1579
00:50:45,426 --> 0:50:46,686
语义分割抠像

1580
00:50:46,686 --> 0:50:49,476
并将带你经历所有这些不同的步骤

1581
00:50:51,656 --> 0:50:52,876
我将把时间交给 David

1582
00:50:52,876 --> 0:51:00,546
他将讨论 Core Image [掌声]

1583
00:50:52,876 --> 0:51:00,546
他将讨论 Core Image [掌声]

1584
00:51:01,046 --> 0:51:02,366
&gt;&gt; 好的 非常感谢

1585
00:51:02,366 --> 0:51:03,366
现在 我们已经学习了

1586
00:51:03,366 --> 0:51:05,156
如何使用语义分割抠像

1587
00:51:05,156 --> 0:51:06,596
来摄制图像 我们将

1588
00:51:06,596 --> 0:51:08,166
从中获得一些乐趣 并学习如何

1589
00:51:08,166 --> 0:51:10,356
利用 Core Image 来应用

1590
00:51:10,356 --> 0:51:11,666
一些有趣的效果

1591
00:51:11,826 --> 0:51:14,396
接下来我要做一个演示

1592
00:51:14,396 --> 0:51:15,586
但我要提醒你

1593
00:51:15,656 --> 0:51:17,286
这幅图里有小丑

1594
00:51:17,616 --> 0:51:19,636
所以 如果你有小丑恐惧症

1595
00:51:19,966 --> 0:51:21,616
或者对小丑的非理性恐惧

1596
00:51:22,026 --> 0:51:23,796
请转移你的视线

1597
00:51:24,246 --> 0:51:25,136
好的 这里我们有一张

1598
00:51:25,136 --> 0:51:28,246
设备上用人像模式摄制的图像

1599
00:51:28,736 --> 0:51:30,306
在这个 App 中

1600
00:51:30,306 --> 0:51:32,496
我们可以很容易地看到

1601
00:51:32,796 --> 0:51:33,996
这个文件中

1602
00:51:33,996 --> 0:51:35,376
所有不同的

1603
00:51:35,376 --> 0:51:36,966
语义分割抠像

1604
00:51:37,616 --> 0:51:39,976
我们可以使用传统的

1605
00:51:40,416 --> 0:51:42,276
人像效果抠像

1606
00:51:42,636 --> 0:51:44,496
或者我们也可以

1607
00:51:45,476 --> 0:51:46,036
看到皮肤抠像

1608
00:51:46,036 --> 0:51:47,446
或者我们可以看到

1609
00:51:47,446 --> 0:51:49,246
头发抠像或牙齿抠像

1610
00:51:49,726 --> 0:51:51,356
也可以使用

1611
00:51:51,356 --> 0:51:52,636
核心图像将这些

1612
00:51:52,636 --> 0:51:54,376
各种各样的抠像组合成其他的

1613
00:51:54,376 --> 0:51:55,946
抠像 比如我使用

1614
00:51:55,946 --> 0:51:57,986
逻辑操作合成的

1615
00:51:57,986 --> 0:52:00,566
这个抠像

1616
00:51:57,986 --> 0:52:00,566
这个抠像

1617
00:52:00,566 --> 0:52:01,446
只有眼睛和嘴巴

1618
00:52:02,016 --> 0:52:03,676
如果我们回到主图像

1619
00:52:03,676 --> 0:52:04,896
我们看到

1620
00:52:04,896 --> 0:52:06,946
我在 Apple Park 的照片

1621
00:52:07,236 --> 0:52:08,386
你可以用人像效果抠像

1622
00:52:08,386 --> 0:52:10,336
做的一件很棒的事情

1623
00:52:10,336 --> 0:52:12,476
那就是你可以

1624
00:52:12,476 --> 0:52:14,596
很简单地添加一个背景

1625
00:52:14,596 --> 0:52:16,266
你可以看到 我们可以

1626
00:52:16,376 --> 0:52:18,486
把我放在马戏团的帐篷里

1627
00:52:18,836 --> 0:52:20,386
虽然那看起来确实像

1628
00:52:20,386 --> 0:52:23,376
一个马戏团的帐篷 但我看起来有点违和

1629
00:52:23,716 --> 0:52:25,986
现在我们可以使用一些有趣的效果

1630
00:52:26,056 --> 0:52:28,026
比如 我们可以让它

1631
00:52:28,056 --> 0:52:29,606
看起来像我化了小丑妆

1632
00:52:30,306 --> 0:52:31,376
或者如果我们想更进一步

1633
00:52:31,376 --> 0:52:34,996
我们可以给自己一些绿色的头发

1634
00:52:35,336 --> 0:52:36,616
最后 我们可以用一些

1635
00:52:36,616 --> 0:52:37,896
其他的抠像

1636
00:52:37,896 --> 0:52:38,796
来给自己化妆

1637
00:52:40,126 --> 0:52:42,486
这就是我今天要讲的

1638
00:52:42,486 --> 0:52:43,786
我们如何在你的 App 中

1639
00:52:43,786 --> 0:52:45,626
实现这些有趣的效果

1640
00:52:46,516 --> 0:52:51,546
[掌声]

1641
00:52:52,046 --> 0:52:54,346
好了 现在大部分关于小丑的

1642
00:52:54,856 --> 0:52:55,826
引用都没有了

1643
00:52:55,826 --> 0:52:58,666
所以回看是安全的

1644
00:52:58,666 --> 0:52:59,426
好的 我们今天将讨论

1645
00:52:59,426 --> 0:53:00,836
三件事

1646
00:52:59,426 --> 0:53:00,836
三件事

1647
00:53:00,836 --> 0:53:02,666
首先是如何使用

1648
00:53:02,736 --> 0:53:05,036
核心图像创建抠图图像

1649
00:53:05,036 --> 0:53:06,336
如何对这些图像应用滤镜

1650
00:53:06,336 --> 0:53:08,326
最后是

1651
00:53:08,326 --> 0:53:09,596
如何将它们保存到文件中

1652
00:53:10,076 --> 0:53:11,526
首先 让我们讨论

1653
00:53:11,526 --> 0:53:14,106
使用核心图像创建抠像图像

1654
00:53:14,346 --> 0:53:15,216
有两种方法

1655
00:53:15,516 --> 0:53:16,786
其一是可以使用

1656
00:53:16,786 --> 0:53:19,016
AVCapturePhoto API

1657
00:53:19,016 --> 0:53:20,516
创建抠像图像

1658
00:53:20,996 --> 0:53:22,596
然后 从这里 

1659
00:53:22,836 --> 0:53:24,426
你可以创建一个核心图像

1660
00:53:24,906 --> 0:53:26,396
这个的代码很简单

1661
00:53:26,396 --> 0:53:28,016
我们要做的是使用

1662
00:53:28,016 --> 0:53:29,866
semanticSegmentationMatte API

1663
00:53:30,266 --> 0:53:31,626
精确地指定

1664
00:53:31,626 --> 0:53:33,766
我们要做的是头发 皮肤 还是牙齿

1665
00:53:34,356 --> 0:53:35,846
返回一个

1666
00:53:35,846 --> 0:53:38,066
AVSemanticSegementMatteObject

1667
00:53:38,666 --> 0:53:40,256
从这里 创建一个CIImage

1668
00:53:40,256 --> 0:53:41,976
很简单 我们可以

1669
00:53:41,976 --> 0:53:43,936
从对象实例化一个

1670
00:53:43,936 --> 0:53:44,586
CIImage

1671
00:53:45,796 --> 0:53:46,936
=创建抠像图像的

1672
00:53:46,936 --> 0:53:47,916
另一种常见方法

1673
00:53:48,036 --> 0:53:50,006
是从 HEIF 或 JPEG 文件

1674
00:53:50,006 --> 0:53:51,536
加载图像

1675
00:53:52,146 --> 0:53:54,426
这些文件有一个你熟悉的

1676
00:53:54,486 --> 0:53:55,866
主映像 一个典型的

1677
00:53:56,106 --> 0:53:56,936
RGB 图像

1678
00:53:57,206 --> 0:53:58,856
但它们也有辅助

1679
00:53:58,856 --> 0:54:00,416
图像 比如人像效果

1680
00:53:58,856 --> 0:54:00,416
图像 比如人像效果

1681
00:54:00,416 --> 0:54:02,076
抠像 以及

1682
00:54:02,346 --> 0:54:04,416
我们正在讨论的新抠像

1683
00:54:04,416 --> 0:54:06,246
皮肤分割抠像

1684
00:54:06,246 --> 0:54:08,116
头发抠像和牙齿抠像

1685
00:54:09,166 --> 0:54:10,606
其代码非常简单

1686
00:54:10,986 --> 0:54:12,506
从 HEIF 文件创建

1687
00:54:12,506 --> 0:54:14,936
CIImage 的传统代码是仅仅

1688
00:54:14,936 --> 0:54:17,216
声明 CIImage 并指定一个 URL

1689
00:54:17,856 --> 0:54:19,466
要创建这些辅助

1690
00:54:19,466 --> 0:54:21,126
图像 你所要做的就是

1691
00:54:21,126 --> 0:54:23,086
执行相同的调用并提供

1692
00:54:23,086 --> 0:54:25,036
一个选项字典 指定

1693
00:54:25,206 --> 0:54:27,096
要返回哪个抠像图像

1694
00:54:27,536 --> 0:54:29,336
所以我们可以指定

1695
00:54:29,476 --> 0:54:31,376
辅助分割头发抠像细节

1696
00:54:31,946 --> 0:54:33,286
或者如果我们愿意 我们可以得到

1697
00:54:33,286 --> 0:54:36,216
其他语义分段的抠像

1698
00:54:37,446 --> 0:54:40,326
非常简单 只有几行代码

1699
00:54:41,296 --> 0:54:42,906
我们接下来要做的是

1700
00:54:42,906 --> 0:54:44,146
讨论你如何将效果应用到

1701
00:54:44,146 --> 0:54:45,586
这些图像上

1702
00:54:46,106 --> 0:54:47,806
我展示了一些效果

1703
00:54:47,806 --> 0:54:48,986
我将会详细讨论

1704
00:54:48,986 --> 0:54:49,906
其中一个

1705
00:54:50,316 --> 0:54:52,076
我们要做的是从一个

1706
00:54:52,076 --> 0:54:53,566
基本的 RGB 图像开始

1707
00:54:53,566 --> 0:54:55,356
然后我们要对它

1708
00:54:55,356 --> 0:54:56,606
应用一些效果

1709
00:54:56,606 --> 0:55:01,086
假设我们想做洗掉的小丑白妆

1710
00:54:56,606 --> 0:55:01,086
假设我们想做洗掉的小丑白妆

1711
00:55:01,906 --> 0:55:03,726
我要对它做一些调整

1712
00:55:04,176 --> 0:55:05,256
然而 这些调整

1713
00:55:05,256 --> 0:55:06,636
适用于整个图像

1714
00:55:06,636 --> 0:55:08,286
所以我们希望这些只局限于

1715
00:55:08,286 --> 0:55:09,316
皮肤区域

1716
00:55:09,876 --> 0:55:11,626
所以 我们要使用皮肤抠像

1717
00:55:12,176 --> 0:55:13,436
然后我们要把这三幅图

1718
00:55:13,436 --> 0:55:14,806
结合起来得到

1719
00:55:14,806 --> 0:55:15,676
我们想要的结果

1720
00:55:17,006 --> 0:55:18,426
我来给大家介绍一下它的代码

1721
00:55:18,426 --> 0:55:19,906
因为它实际上很简单

1722
00:55:21,156 --> 0:55:22,436
但首先 我想谈谈

1723
00:55:22,466 --> 0:55:23,656
我们对核心图像的

1724
00:55:23,656 --> 0:55:25,196
首要特性要求

1725
00:55:25,196 --> 0:55:26,436
这是为了让人们更容易地

1726
00:55:26,436 --> 0:55:29,006
发现和使用我们现有的 200 多个

1727
00:55:29,056 --> 0:55:30,286
内置滤镜

1728
00:55:30,746 --> 0:55:32,116
这就是新的头

1729
00:55:32,576 --> 0:55:34,856
名为 CoreImage.CIFilterBuiltins

1730
00:55:35,116 --> 0:55:36,766
这些允许你使用所有

1731
00:55:36,766 --> 0:55:38,006
内置的滤镜而不需要

1732
00:55:38,006 --> 0:55:39,736
记住滤镜的名字

1733
00:55:39,736 --> 0:55:40,976
或输入的名字

1734
00:55:41,516 --> 0:55:45,686
[掌声]

1735
00:55:46,186 --> 0:55:47,016
所以 [笑] 真的很棒

1736
00:55:47,606 --> 0:55:48,946
让我展示一些

1737
00:55:48,946 --> 0:55:49,956
使用这个新头的代码

1738
00:55:50,626 --> 0:55:51,476
我们要做的第一件事

1739
00:55:51,476 --> 0:55:52,866
是创建基础图像

1740
00:55:52,936 --> 0:55:53,706
我们只需要调用

1741
00:55:53,706 --> 0:55:55,086
带有 URL 内容的图像

1742
00:55:55,146 --> 0:55:56,906
这将产生

1743
00:55:56,906 --> 0:55:58,256
传统的 RGB 图像

1744
00:55:59,076 --> 0:56:00,196
现在 我们要开始

1745
00:55:59,076 --> 0:56:00,196
现在 我们要开始

1746
00:56:00,196 --> 0:56:01,276
应用一些效果

1747
00:56:01,276 --> 0:56:02,386
首先我想要

1748
00:56:02,386 --> 0:56:03,976
把它转换成灰度图

1749
00:56:04,246 --> 0:56:05,606
我要用一个叫

1750
00:56:05,606 --> 0:56:06,916
maximum component 的滤镜

1751
00:56:07,626 --> 0:56:09,006
我要给这个滤镜

1752
00:56:09,006 --> 0:56:10,476
一个基础图像的

1753
00:56:10,476 --> 0:56:11,116
输入图像

1754
00:56:11,676 --> 0:56:12,846
然后我要求

1755
00:56:12,846 --> 0:56:14,736
那个滤镜输出

1756
00:56:14,736 --> 0:56:16,246
它会产生一个

1757
00:56:16,366 --> 0:56:17,316
像这样的灰度图像

1758
00:56:18,396 --> 0:56:19,616
这看起来不够鲜艳

1759
00:56:19,616 --> 0:56:21,336
不像小丑妆

1760
00:56:21,636 --> 0:56:23,296
我们要再应用一个附加滤镜

1761
00:56:23,296 --> 0:56:25,666
我们要声明使用 gamma adjustment 滤镜

1762
00:56:26,156 --> 0:56:27,806
这个的输入将是

1763
00:56:27,806 --> 0:56:29,576
之前滤镜的输出

1764
00:56:29,656 --> 0:56:31,286
然后我们要指定

1765
00:56:31,566 --> 0:56:33,036
伽马函数的幂

1766
00:56:33,036 --> 0:56:36,206
然后请求输出图像

1767
00:56:36,896 --> 0:56:38,356
你会注意到现在

1768
00:56:38,356 --> 0:56:40,616
很容易指定

1769
00:56:40,616 --> 0:56:41,406
伽马滤镜的幂

1770
00:56:41,406 --> 0:56:42,986
它是一个浮点型数

1771
00:56:42,986 --> 0:56:44,446
而不需要记住使用 NS 数字

1772
00:56:46,946 --> 0:56:48,286
这是我们效果的第一部分

1773
00:56:48,936 --> 0:56:52,046
接下来我们要做的

1774
00:56:52,736 --> 0:56:55,676
是得到皮肤分割抠像

1775
00:56:56,176 --> 0:56:57,236
正如我之前描述的

1776
00:56:57,316 --> 0:56:59,936
我们将从一个 URL 开始指定

1777
00:56:59,936 --> 0:57:01,646
我们想要的皮肤抠像

1778
00:56:59,936 --> 0:57:01,646
我们想要的皮肤抠像

1779
00:57:02,056 --> 0:57:03,446
然而 当我们得到这张图片时

1780
00:57:03,896 --> 0:57:06,616
你会注意到它比另一张小

1781
00:57:06,616 --> 0:57:07,616
如前所述

1782
00:57:07,616 --> 0:57:08,766
默认情况下这些是一半尺寸

1783
00:57:10,666 --> 0:57:11,996
我们需要把它放大以匹配

1784
00:57:11,996 --> 0:57:13,796
主图像的尺寸

1785
00:57:14,096 --> 0:57:15,076
我们要创建一个

1786
00:57:15,076 --> 0:57:16,566
CGAffineTransform

1787
00:57:16,566 --> 0:57:19,046
它可以把抠图尺寸缩放到基本图像尺寸

1788
00:57:19,466 --> 0:57:21,106
然后我们要

1789
00:57:21,106 --> 0:57:22,306
对图像进行变换

1790
00:57:22,426 --> 0:57:23,626
这就产生了一个新的图像

1791
00:57:23,736 --> 0:57:26,626
正如你所期望的 它匹配了正确的尺寸

1792
00:57:28,116 --> 0:57:29,366
下一步我们要做的是

1793
00:57:29,646 --> 0:57:31,486
把这两个结合起来

1794
00:57:32,436 --> 0:57:35,626
我们将使用 blendWithMask 滤镜 这很棒

1795
00:57:35,686 --> 0:57:36,596
在我刚展示的例子中

1796
00:57:36,596 --> 0:57:37,836
我们一直在用这个

1797
00:57:38,836 --> 0:57:39,866
我们将背景图像

1798
00:57:39,866 --> 0:57:41,316
指定为基本

1799
00:57:41,356 --> 0:57:43,676
RGB 图像 它看起来就像这样

1800
00:57:44,516 --> 0:57:45,726
接下来 我们将指定

1801
00:57:45,726 --> 0:57:47,406
输入图像

1802
00:57:47,406 --> 0:57:49,026
这将是前景图像 它是

1803
00:57:49,026 --> 0:57:51,626
应用了白色化妆的图像

1804
00:57:51,686 --> 0:57:53,326
最后我们要指定一个

1805
00:57:53,326 --> 0:57:56,606
蒙版图像

1806
00:57:56,836 --> 0:57:59,396
也就是我之前展示的图像

1807
00:58:00,156 --> 0:58:01,656
根据这三个输入

1808
00:58:01,656 --> 0:58:03,576
你可以向混合滤镜请求它的输出

1809
00:58:04,046 --> 0:58:06,956
结果是这样的 现在 正如你所看到的

1810
00:58:06,956 --> 0:58:07,796
这只是一个起点

1811
00:58:07,796 --> 0:58:08,826
你可以将各种有趣的

1812
00:58:08,826 --> 0:58:10,936
效果组合在一起

1813
00:58:11,056 --> 0:58:11,856
从而在你的 App 中

1814
00:58:11,856 --> 0:58:12,356
产生很棒的效果

1815
00:58:14,916 --> 0:58:16,296
一旦应用了这些效果

1816
00:58:16,296 --> 0:58:17,326
你就需要保存它们

1817
00:58:18,026 --> 0:58:19,826
最典型的情况是

1818
00:58:19,826 --> 0:58:21,946
你希望将它们保存为 HEIF 或 JPEG

1819
00:58:21,946 --> 0:58:23,376
文件 这也支持保存

1820
00:58:23,646 --> 0:58:25,306
辅助图像

1821
00:58:26,136 --> 0:58:28,906
因此 除了主图像 你还可以存储

1822
00:58:29,046 --> 0:58:30,906
语义分割抠像

1823
00:58:30,906 --> 0:58:32,606
以便你的 App

1824
00:58:32,606 --> 0:58:34,356
或其他 App 可以应用

1825
00:58:34,356 --> 0:58:35,266
附加的效果

1826
00:58:37,166 --> 0:58:38,476
其代码非常简单

1827
00:58:38,686 --> 0:58:40,676
使用这个核心图像 API

1828
00:58:40,676 --> 0:58:43,006
writeHEIFRepresentation

1829
00:58:43,166 --> 0:58:45,046
通常你指定主图像

1830
00:58:45,046 --> 0:58:48,146
和你想要保存它的 URL

1831
00:58:48,616 --> 0:58:51,326
然后是你想要保存的像素格式

1832
00:58:51,686 --> 0:58:53,576
以及你想要保存的颜色空间

1833
00:58:54,126 --> 0:58:55,076
今天我想强调的是

1834
00:58:55,076 --> 0:58:57,066
另一组选项

1835
00:58:57,066 --> 0:58:59,226
你可以在保存图像时提供

1836
00:58:59,796 --> 0:59:01,446
因此 例如 你可以指定

1837
00:58:59,796 --> 0:59:01,446
因此 例如 你可以指定

1838
00:59:01,446 --> 0:59:03,656
关键的语义分割皮肤抠像

1839
00:59:03,836 --> 0:59:06,456
并指定皮肤图像

1840
00:59:06,456 --> 0:59:08,286
头发图像或牙齿图像

1841
00:59:08,596 --> 0:59:09,936
所有这四幅图像

1842
00:59:09,936 --> 0:59:11,436
都将保存到生成的

1843
00:59:11,966 --> 0:59:13,146
HEIF 或 JPEG 文件中

1844
00:59:14,386 --> 0:59:15,586
现在有另一种获得

1845
00:59:15,636 --> 0:59:17,816
这个结果的方法

1846
00:59:17,816 --> 0:59:19,266
如果你想 你可以保存一个

1847
00:59:19,266 --> 0:59:21,526
主图像并指定

1848
00:59:21,526 --> 0:59:22,636
分割抠像作为

1849
00:59:22,636 --> 0:59:25,346
AVSemanticSegmentationMatte 对象

1850
00:59:25,556 --> 0:59:27,356
同样 这个 API 非常简单

1851
00:59:27,656 --> 0:59:30,416
你可以指定 URL 主图像

1852
00:59:30,416 --> 0:59:33,206
像素格式和颜色空间

1853
00:59:33,786 --> 0:59:35,026
在本例中如果你想要

1854
00:59:35,026 --> 0:59:36,386
指定这些对象

1855
00:59:36,386 --> 0:59:38,676
保存在文件中 你只需声明

1856
00:59:38,676 --> 0:59:40,096
AVSemanticSegmentationMattes

1857
00:59:40,096 --> 0:59:41,886
然后提供一个抠像阵列

1858
00:59:44,296 --> 0:59:46,576
所以 这就是使用核心图像

1859
00:59:46,576 --> 0:59:47,676
和这些抠像所能做的

1860
00:59:47,676 --> 0:59:48,876
我今天讲的是

1861
00:59:49,086 --> 0:59:52,096
如何为抠像创建图像

1862
00:59:52,296 --> 0:59:54,336
如何应用滤镜 以及如何保存它们

1863
00:59:54,666 --> 0:59:55,946
不过 我要提一下

1864
00:59:56,136 --> 0:59:57,656
我向你们展示的示例 App

1865
00:59:57,656 --> 0:59:59,696
是作为一个照片 App 插件编写的

1866
01:00:00,116 --> 1:00:01,136
如果你想了解

1867
01:00:01,136 --> 1:00:02,236
在你的 App 中怎么做

1868
01:00:02,236 --> 1:00:04,066
才能让你

1869
01:00:04,066 --> 1:00:05,476
保存这些图片不仅为 HEIF 格式

1870
01:00:05,546 --> 1:00:07,126
还在用户的照片库中

1871
01:00:07,126 --> 1:00:09,496
我建议你查看

1872
01:00:09,496 --> 1:00:11,226
那些早期的演讲

1873
01:00:11,476 --> 1:00:12,746
尤其是从 2014 年的 WWDC

1874
01:00:12,746 --> 1:00:16,946
关于照片框架的介绍

1875
01:00:17,556 --> 1:00:19,416
好的 非常感谢大家

1876
01:00:19,416 --> 1:00:20,506
我非常期待看到

1877
01:00:20,506 --> 1:00:21,656
你们使用这些出色的特性

1878
01:00:21,656 --> 1:00:25,500
谢谢 [掌声]
