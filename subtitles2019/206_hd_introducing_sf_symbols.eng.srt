1
00:00:01,516 --> 0:00:04,500
[ Music ]

2
00:00:08,516 --> 0:00:12,106
[ Applause and Cheers ]

3
00:00:12,606 --> 0:00:12,976
&gt;&gt; All right.

4
00:00:14,086 --> 0:00:14,806
Let's do this.

5
00:00:16,896 --> 0:00:18,636
Hi, I'm Paolo, and later on,

6
00:00:18,636 --> 0:00:20,256
I'll be joined by my colleague,

7
00:00:20,356 --> 0:00:21,346
Tom here on stage.

8
00:00:21,676 --> 0:00:23,636
And we are here today to

9
00:00:23,636 --> 0:00:27,476
introduce you to SF symbols.

10
00:00:27,606 --> 0:00:28,886
Symbols play a very important

11
00:00:28,886 --> 0:00:30,296
role in interfaces.

12
00:00:30,796 --> 0:00:31,966
They are effective at

13
00:00:31,966 --> 0:00:33,136
communicating meaning.

14
00:00:34,156 --> 0:00:35,866
They can indicate which items

15
00:00:35,866 --> 0:00:36,556
you have selected.

16
00:00:37,336 --> 0:00:39,216
They can be used to visually

17
00:00:39,216 --> 0:00:40,476
differentiate one type of

18
00:00:40,476 --> 0:00:42,266
content from another, and

19
00:00:42,956 --> 0:00:44,496
symbols appears in -- appear in

20
00:00:44,496 --> 0:00:45,576
various contexts throughout the

21
00:00:45,576 --> 0:00:45,826
system.

22
00:00:50,696 --> 0:00:52,396
This creates a sense of

23
00:00:52,396 --> 0:00:55,046
familiarity throughout the user

24
00:00:55,046 --> 0:00:55,576
interface.

25
00:00:56,786 --> 0:00:57,866
Symbols are used in a variety of

26
00:00:57,866 --> 0:00:59,966
ways, and designing symbols

27
00:00:59,966 --> 0:01:01,916
comes with an inherent

28
00:00:59,966 --> 0:01:01,916
comes with an inherent

29
00:01:01,916 --> 0:01:03,936
challenge, which is pairing them

30
00:01:03,936 --> 0:01:06,696
nicely with the other essential

31
00:01:06,696 --> 0:01:08,686
element of any UI, which is

32
00:01:09,556 --> 0:01:09,726
text.

33
00:01:10,616 --> 0:01:12,286
Text is used in a variety of

34
00:01:12,336 --> 0:01:13,326
point sizes in the UI, and so

35
00:01:13,326 --> 0:01:14,976
are symbols.

36
00:01:19,456 --> 0:01:21,876
We use symbols a lot, and so do

37
00:01:21,876 --> 0:01:22,206
you.

38
00:01:23,296 --> 0:01:24,976
We want to make your job easier.

39
00:01:27,086 --> 0:01:30,116
Now in iOS 13, we redesigned all

40
00:01:30,116 --> 0:01:30,736
our symbols.

41
00:01:31,936 --> 0:01:33,186
You'll notice how the symbols

42
00:01:33,186 --> 0:01:34,906
have a rounder look, and how

43
00:01:34,906 --> 0:01:36,676
generally they are a bit heavier

44
00:01:36,676 --> 0:01:38,436
in weight, making them more

45
00:01:38,436 --> 0:01:38,716
visible.

46
00:01:38,716 --> 0:01:40,996
They're also designed to

47
00:01:41,166 --> 0:01:43,296
perfectly match and align with

48
00:01:43,296 --> 0:01:43,966
text.

49
00:01:47,126 --> 0:01:49,206
And while we took great care in

50
00:01:49,206 --> 0:01:51,136
redesigning all the symbols in

51
00:01:51,136 --> 0:01:52,566
the system that you may already

52
00:01:52,566 --> 0:01:54,796
be familiar with, we are

53
00:01:54,796 --> 0:01:56,586
thrilled to announce that we've

54
00:01:56,586 --> 0:01:58,606
extended this list, and designed

55
00:01:58,606 --> 0:02:03,166
many more, which we call SF

56
00:01:58,606 --> 0:02:03,166
many more, which we call SF

57
00:02:03,366 --> 0:02:03,806
symbols.

58
00:02:04,296 --> 0:02:07,206
They are a platform-consistent,

59
00:02:07,526 --> 0:02:09,816
high-quality set designed by

60
00:02:09,816 --> 0:02:11,766
Apple for you to use in your

61
00:02:12,736 --> 0:02:12,836
apps.

62
00:02:14,776 --> 0:02:17,456
They come in vector form, which

63
00:02:17,456 --> 0:02:19,506
means they are scalable, and

64
00:02:19,506 --> 0:02:22,236
will render great at small and

65
00:02:22,236 --> 0:02:22,956
large point sizes.

66
00:02:25,936 --> 0:02:27,926
They come in weights that match

67
00:02:27,926 --> 0:02:29,776
our family of system fonts, San

68
00:02:29,776 --> 0:02:33,266
Francisco -- all the weights.

69
00:02:39,676 --> 0:02:42,396
And there's over 1,000 to choose

70
00:02:42,446 --> 0:02:42,706
from.

71
00:02:43,356 --> 0:02:46,066
If these are still not enough,

72
00:02:46,416 --> 0:02:48,706
you can even customize them and

73
00:02:48,706 --> 0:02:49,596
create your own.

74
00:02:49,596 --> 0:02:52,426
Let's look at them in more

75
00:02:52,426 --> 0:02:52,806
detail.

76
00:02:53,826 --> 0:02:55,136
They're designed to work with

77
00:02:55,136 --> 0:02:55,596
text.

78
00:02:56,036 --> 0:02:57,776
They're specified in typographic

79
00:02:57,876 --> 0:03:00,106
points, like text.

80
00:02:57,876 --> 0:03:00,106
points, like text.

81
00:03:02,256 --> 0:03:03,806
When symbols appear next to

82
00:03:03,806 --> 0:03:05,636
text, they all sit nicely on the

83
00:03:05,636 --> 0:03:06,586
same baseline.

84
00:03:08,796 --> 0:03:10,416
When symbols and text are

85
00:03:10,416 --> 0:03:12,366
positioned vertically, there are

86
00:03:12,366 --> 0:03:14,726
two most common cases -- whether

87
00:03:14,726 --> 0:03:17,216
the text supports the symbol, or

88
00:03:18,596 --> 0:03:20,796
the symbol supports the text.

89
00:03:21,596 --> 0:03:23,136
Horizontal alignment ensures

90
00:03:23,136 --> 0:03:25,086
that everything looks great, and

91
00:03:26,996 --> 0:03:28,686
this is possible thanks to their

92
00:03:28,686 --> 0:03:29,316
margins,

93
00:03:31,616 --> 0:03:32,676
which are not necessarily the

94
00:03:32,766 --> 0:03:34,586
same, as you can see in the

95
00:03:35,076 --> 0:03:37,326
bottom-right blue rectangle.

96
00:03:37,746 --> 0:03:40,906
Margins are invisible, but

97
00:03:40,906 --> 0:03:42,266
they're always considered when

98
00:03:42,266 --> 0:03:43,746
laying out elements on the

99
00:03:43,746 --> 0:03:44,026
screen.

100
00:03:44,586 --> 0:03:47,266
Let's look at weights.

101
00:03:47,766 --> 0:03:50,336
SF symbols have been carefully

102
00:03:50,336 --> 0:03:52,886
drawn to look great at different

103
00:03:52,886 --> 0:03:54,686
weights, from ultra-light to

104
00:03:54,686 --> 0:03:56,336
black, just like our system

105
00:03:56,336 --> 0:03:56,656
fonts.

106
00:03:57,846 --> 0:03:59,346
Every weight has been drawn

107
00:03:59,346 --> 0:04:00,686
manually, and special

108
00:03:59,346 --> 0:04:00,686
manually, and special

109
00:04:00,686 --> 0:04:02,256
consideration went into each

110
00:04:02,316 --> 0:04:02,696
design.

111
00:04:03,456 --> 0:04:04,456
Thinner weights have a

112
00:04:04,456 --> 0:04:06,206
distinctive, beautiful elegance,

113
00:04:07,336 --> 0:04:09,876
while the heavier ones strive to

114
00:04:09,876 --> 0:04:11,716
maintain detail and visibility.

115
00:04:11,716 --> 0:04:16,836
There is a need for using

116
00:04:16,836 --> 0:04:19,356
symbols at different sizes when

117
00:04:19,356 --> 0:04:21,456
they are next to text, even if

118
00:04:21,456 --> 0:04:23,976
the text size doesn't change.

119
00:04:25,336 --> 0:04:26,756
This is something that many of

120
00:04:26,756 --> 0:04:29,386
us already do, depending on the

121
00:04:29,386 --> 0:04:31,406
amount of emphasis that the

122
00:04:31,406 --> 0:04:33,856
symbol may need, and how much

123
00:04:33,976 --> 0:04:34,886
space is available.

124
00:04:36,216 --> 0:04:38,386
So with iOS 13, we turned this

125
00:04:38,386 --> 0:04:39,286
into a system.

126
00:04:40,756 --> 0:04:44,156
We call these scales -- small,

127
00:04:44,636 --> 0:04:46,186
medium, and large.

128
00:04:46,796 --> 0:04:49,806
It's important to notice here

129
00:04:49,806 --> 0:04:51,216
that the point size of the

130
00:04:51,216 --> 0:04:52,446
symbol is still the same.

131
00:04:52,886 --> 0:04:54,026
It's just the scale that

132
00:04:54,026 --> 0:04:54,436
changes.

133
00:04:56,016 --> 0:04:56,966
Each scale remains

134
00:04:56,966 --> 0:04:58,336
weight-matched with the text,

135
00:04:59,056 --> 0:05:00,476
and, mind you, it's not just

136
00:04:59,056 --> 0:05:00,476
and, mind you, it's not just

137
00:05:00,476 --> 0:05:02,906
linearly-scaled, the stroke

138
00:05:02,906 --> 0:05:04,266
thickness is adjusted to the

139
00:05:04,266 --> 0:05:07,066
weight of the text, and the

140
00:05:07,276 --> 0:05:08,896
other great benefit is that

141
00:05:08,896 --> 0:05:10,746
using scales means that

142
00:05:10,746 --> 0:05:13,346
automatically they're optically

143
00:05:13,346 --> 0:05:15,056
vertically-centered to the cap

144
00:05:15,056 --> 0:05:15,436
height.

145
00:05:17,266 --> 0:05:19,736
This way, vertical layout

146
00:05:20,866 --> 0:05:22,386
between symbols and text is

147
00:05:22,386 --> 0:05:25,106
automatic for all three scales.

148
00:05:27,156 --> 0:05:28,986
So where are these scales used,

149
00:05:28,986 --> 0:05:30,346
and when should you use a

150
00:05:30,376 --> 0:05:31,176
particular scale?

151
00:05:32,086 --> 0:05:33,716
Well, here are 3 UI examples.

152
00:05:34,686 --> 0:05:37,896
They all use 17-point text, but

153
00:05:37,896 --> 0:05:40,326
the container for each of these

154
00:05:40,326 --> 0:05:43,466
symbols have different heights.

155
00:05:44,046 --> 0:05:47,606
So the text is the same size in

156
00:05:47,606 --> 0:05:49,206
all 3, and the symbols are as

157
00:05:49,206 --> 0:05:51,276
well, but the symbols use a

158
00:05:51,336 --> 0:05:53,376
different scale in order to best

159
00:05:53,506 --> 0:05:54,206
fit their space.

160
00:05:54,846 --> 0:05:58,136
And in some places, like

161
00:05:58,136 --> 0:06:00,066
toolbars, your kit will do the

162
00:05:58,136 --> 0:06:00,066
toolbars, your kit will do the

163
00:06:00,066 --> 0:06:01,716
right thing, and will pick the

164
00:06:01,716 --> 0:06:03,146
correct scale for the control

165
00:06:03,556 --> 0:06:03,976
automatically.

166
00:06:07,376 --> 0:06:09,376
So when we put all this together

167
00:06:09,656 --> 0:06:11,746
-- resizing, scaling, and weight

168
00:06:11,746 --> 0:06:13,506
-- it means you can use them

169
00:06:13,506 --> 0:06:14,586
with dynamic type, and

170
00:06:14,876 --> 0:06:16,056
everything just works.

171
00:06:16,566 --> 0:06:20,346
And of course, symbols can be

172
00:06:20,346 --> 0:06:21,126
localized, too.

173
00:06:21,656 --> 0:06:23,006
Here's an example of the Voice

174
00:06:23,006 --> 0:06:25,206
Memos app, running in English,

175
00:06:25,726 --> 0:06:28,166
and running in Arabic.

176
00:06:28,346 --> 0:06:30,136
Notice how the time control

177
00:06:30,506 --> 0:06:31,846
reflect the numeral system of

178
00:06:31,846 --> 0:06:32,676
the locale.

179
00:06:33,246 --> 0:06:36,296
If you're wondering how to make

180
00:06:36,296 --> 0:06:37,616
sense of all these symbols,

181
00:06:37,986 --> 0:06:39,496
well, each symbol has a unique

182
00:06:39,496 --> 0:06:39,836
name,

183
00:06:43,206 --> 0:06:44,806
and most symbols come in

184
00:06:44,806 --> 0:06:47,546
variants that can be outlined or

185
00:06:47,546 --> 0:06:47,846
filled.

186
00:06:48,476 --> 0:06:52,126
They can be enclosed in a circle

187
00:06:52,606 --> 0:06:55,556
or a square, and may come with a

188
00:06:55,556 --> 0:06:56,976
standardized system of badges.

189
00:07:00,086 --> 0:07:01,626
And we made it convenient for

190
00:07:01,626 --> 0:07:02,726
you to use these symbols.

191
00:07:04,086 --> 0:07:06,006
First, they are included in the

192
00:07:06,006 --> 0:07:07,366
San Francisco fonts available

193
00:07:07,426 --> 0:07:08,766
for download, so you can use

194
00:07:08,766 --> 0:07:09,976
them in your design prompts.

195
00:07:11,196 --> 0:07:12,446
The scales are accessible by

196
00:07:12,446 --> 0:07:13,626
open Type Features.

197
00:07:14,296 --> 0:07:16,246
The default scale is medium, and

198
00:07:16,246 --> 0:07:17,796
small and large can be selected

199
00:07:17,796 --> 0:07:20,156
through the Typography panel, or

200
00:07:20,686 --> 0:07:22,386
application-specific UI.

201
00:07:24,016 --> 0:07:25,436
And as a reminder, these fonts

202
00:07:25,436 --> 0:07:27,006
are for design only, not for

203
00:07:27,006 --> 0:07:27,556
deployment.

204
00:07:28,066 --> 0:07:31,296
So how do you use these symbols?

205
00:07:31,546 --> 0:07:33,196
How do you access them and get

206
00:07:33,196 --> 0:07:34,076
them into your designs?

207
00:07:35,186 --> 0:07:37,356
Well, to help you with that, we

208
00:07:37,426 --> 0:07:39,536
created a new app, which is

209
00:07:39,586 --> 0:07:42,116
called SF Symbols, and this is

210
00:07:42,116 --> 0:07:43,406
what it looks like.

211
00:07:44,066 --> 0:07:45,396
It will let you browse symbols,

212
00:07:45,396 --> 0:07:48,906
either in a collection view or

213
00:07:48,906 --> 0:07:49,946
in a table view.

214
00:07:51,356 --> 0:07:52,696
It will let you search them by

215
00:07:52,696 --> 0:07:56,476
name, and preview them in

216
00:07:56,916 --> 0:07:59,346
different weights that the fonts

217
00:07:59,346 --> 0:07:59,686
come in.

218
00:08:03,876 --> 0:08:05,706
You can download the SF Symbols

219
00:08:05,706 --> 0:08:07,136
app with the new fonts from

220
00:08:07,136 --> 0:08:10,126
developer.apple.com/design, and

221
00:08:10,936 --> 0:08:12,826
speaking of design, design

222
00:08:12,826 --> 0:08:14,446
resources -- the new design

223
00:08:14,446 --> 0:08:17,416
resources on developer.apple.com

224
00:08:17,416 --> 0:08:18,516
also use symbols.

225
00:08:19,206 --> 0:08:21,366
They reference them by name, and

226
00:08:24,996 --> 0:08:27,406
some of the system icons are now

227
00:08:27,466 --> 0:08:28,186
symbols, too.

228
00:08:28,186 --> 0:08:29,616
So if you were using some of

229
00:08:29,616 --> 0:08:31,476
these, they will automatically

230
00:08:31,766 --> 0:08:32,716
use the new designs.

231
00:08:33,405 --> 0:08:37,035
Now that we've seen how to

232
00:08:37,035 --> 0:08:38,246
discover the symbols available

233
00:08:38,246 --> 0:08:39,676
to you, let's look at a real

234
00:08:39,676 --> 0:08:40,236
example.

235
00:08:40,655 --> 0:08:43,926
Here's a spec that you might

236
00:08:43,926 --> 0:08:45,016
have put together for your app.

237
00:08:46,476 --> 0:08:47,966
You can see how before maybe you

238
00:08:47,966 --> 0:08:50,866
had to do something like this --

239
00:08:51,016 --> 0:08:52,166
specify your images, the

240
00:08:52,616 --> 0:08:54,756
rectangular bounds, and explicit

241
00:08:54,756 --> 0:08:57,986
pad and insets, and now, symbols

242
00:08:58,076 --> 0:08:59,536
greatly simplify the paradigm.

243
00:09:00,236 --> 0:09:01,696
You just have to specify a name,

244
00:09:01,696 --> 0:09:03,136
its point size, and alignment,

245
00:09:04,286 --> 0:09:06,416
maybe its weight and scale if

246
00:09:06,416 --> 0:09:06,956
appropriate.

247
00:09:09,756 --> 0:09:11,006
So I'm working on this app with

248
00:09:11,036 --> 0:09:13,076
Tom, and here the symbol in the

249
00:09:13,076 --> 0:09:14,536
second row is a bit too generic.

250
00:09:14,536 --> 0:09:16,606
It's a list of beverages, so I

251
00:09:16,606 --> 0:09:17,706
want to replace it with

252
00:09:17,706 --> 0:09:18,686
something more appropriate,

253
00:09:18,686 --> 0:09:20,106
something that conveys that

254
00:09:20,106 --> 0:09:21,516
these are tasty, hot beverages.

255
00:09:22,636 --> 0:09:23,966
So I think I'm going to change

256
00:09:23,966 --> 0:09:25,586
it, and I want to go for a

257
00:09:26,286 --> 0:09:27,306
teacup.

258
00:09:28,956 --> 0:09:30,206
That teacup looks great.

259
00:09:30,856 --> 0:09:32,776
I'm sure Tom will love it, but

260
00:09:33,256 --> 0:09:34,866
it's not included in the set of

261
00:09:34,866 --> 0:09:36,836
symbols that we provide.

262
00:09:38,046 --> 0:09:39,986
Well, the SF Symbols app lets

263
00:09:39,986 --> 0:09:41,686
you customize and create your

264
00:09:41,686 --> 0:09:42,286
own symbols.

265
00:09:43,756 --> 0:09:45,596
In order for you to do that, you

266
00:09:45,596 --> 0:09:47,096
need to start by exporting the

267
00:09:47,096 --> 0:09:50,236
symbol from the app, and symbols

268
00:09:50,236 --> 0:09:52,106
can be exported through their

269
00:09:52,106 --> 0:09:52,586
template.

270
00:09:54,676 --> 0:09:56,136
This is what a template looks

271
00:09:56,136 --> 0:09:56,306
like.

272
00:09:57,516 --> 0:09:59,056
It has all the weights, and all

273
00:09:59,056 --> 0:10:00,166
the scales for the symbol.

274
00:09:59,056 --> 0:10:00,166
the scales for the symbol.

275
00:10:00,696 --> 0:10:04,766
The template is in SVG format,

276
00:10:05,636 --> 0:10:07,416
which means it can be edited by

277
00:10:07,416 --> 0:10:08,506
most design tools.

278
00:10:09,056 --> 0:10:12,776
It's specially constructed to be

279
00:10:12,776 --> 0:10:14,366
navigable and usable through any

280
00:10:14,366 --> 0:10:17,476
of the design stage, and the

281
00:10:17,696 --> 0:10:19,856
very same template is also

282
00:10:19,856 --> 0:10:21,886
directly used by Xcode as a

283
00:10:21,966 --> 0:10:22,936
source artifact.

284
00:10:24,026 --> 0:10:25,316
No more tens of hundreds of

285
00:10:25,406 --> 0:10:26,496
files floating around.

286
00:10:27,916 --> 0:10:29,156
So let's look at how we did our

287
00:10:29,266 --> 0:10:29,586
teacup.

288
00:10:30,056 --> 0:10:32,926
First, we went to the SF Symbols

289
00:10:32,926 --> 0:10:34,806
app, and we looked for a good

290
00:10:34,806 --> 0:10:35,606
starting point.

291
00:10:36,306 --> 0:10:37,806
Our teacup is enclosed in a

292
00:10:37,836 --> 0:10:39,336
circle, so I think the circle is

293
00:10:39,336 --> 0:10:40,346
a great starting point.

294
00:10:40,996 --> 0:10:42,826
And so, I searched for circle,

295
00:10:43,306 --> 0:10:44,766
and it's there.

296
00:10:44,826 --> 0:10:46,706
So I can select it and export

297
00:10:46,706 --> 0:10:48,176
its template from the File menu.

298
00:10:48,786 --> 0:10:52,506
I can save it, and now it's

299
00:10:52,506 --> 0:10:53,496
ready to be customized.

300
00:10:54,146 --> 0:10:56,726
I can open it in my editor and

301
00:10:57,176 --> 0:10:59,716
notice here how the layers have

302
00:10:59,826 --> 0:11:00,536
unique names.

303
00:10:59,826 --> 0:11:00,536
unique names.

304
00:11:01,306 --> 0:11:02,576
These names are important.

305
00:11:02,666 --> 0:11:04,516
They help identify each

306
00:11:04,516 --> 0:11:05,736
individual configuration of the

307
00:11:05,736 --> 0:11:06,946
symbol, the weight, and their

308
00:11:06,946 --> 0:11:09,026
scale, so you've got to be

309
00:11:09,026 --> 0:11:10,386
careful when you're drawing to

310
00:11:10,456 --> 0:11:12,366
make sure that your outlines are

311
00:11:12,366 --> 0:11:14,016
actually inside the appropriate

312
00:11:14,066 --> 0:11:14,416
layer.

313
00:11:14,416 --> 0:11:17,256
So I start my customization

314
00:11:17,256 --> 0:11:19,676
work, and I put my teacup inside

315
00:11:19,796 --> 0:11:21,426
the regular at the medium scale.

316
00:11:22,246 --> 0:11:24,156
I make sure that it's centered,

317
00:11:24,156 --> 0:11:27,756
and optically balanced, and then

318
00:11:27,756 --> 0:11:30,526
I scale it down, just for stroke

319
00:11:30,526 --> 0:11:33,676
thicknesses, and I put it in the

320
00:11:33,676 --> 0:11:34,966
small regular scale.

321
00:11:35,016 --> 0:11:37,166
And then I repeat the process,

322
00:11:37,386 --> 0:11:39,076
and I scale it up just for

323
00:11:39,076 --> 0:11:40,826
thickness, center it, make sure

324
00:11:40,826 --> 0:11:43,006
it's looking good for a large

325
00:11:43,156 --> 0:11:45,046
regular scale, and so forth

326
00:11:45,176 --> 0:11:47,216
until the template is complete.

327
00:11:48,416 --> 0:11:50,466
At this point, I'm ready to

328
00:11:50,466 --> 0:11:53,246
export the SVG from the design

329
00:11:54,256 --> 0:11:54,366
tool.

330
00:11:54,556 --> 0:11:56,166
I can hand it off to Tom, and

331
00:11:56,236 --> 0:11:57,836
I'm sure he'll take great care

332
00:11:58,346 --> 0:11:59,356
of it.

333
00:11:59,356 --> 0:12:01,186
In fact, he doesn't have to do

334
00:11:59,356 --> 0:12:01,186
In fact, he doesn't have to do

335
00:12:01,186 --> 0:12:01,626
much.

336
00:12:01,836 --> 0:12:03,546
It's ready to be dropped in

337
00:12:03,546 --> 0:12:04,456
Xcode as-is.

338
00:12:10,516 --> 0:12:12,056
So if you want -- don't want to

339
00:12:12,056 --> 0:12:14,086
provide all the weights for your

340
00:12:14,086 --> 0:12:16,536
symbol, you have to provide

341
00:12:16,656 --> 0:12:18,716
regular at medium scale at

342
00:12:19,456 --> 0:12:22,026
least, then the scales for

343
00:12:22,026 --> 0:12:22,526
regular.

344
00:12:24,006 --> 0:12:26,046
Then same bold for the bold text

345
00:12:26,356 --> 0:12:28,986
feature, and if you want to

346
00:12:28,986 --> 0:12:30,586
support all dynamic-type styles,

347
00:12:30,886 --> 0:12:33,346
then include medium and bold as

348
00:12:34,716 --> 0:12:34,836
well.

349
00:12:35,486 --> 0:12:36,846
Of course, you should take into

350
00:12:36,846 --> 0:12:38,376
consideration the typographic

351
00:12:38,376 --> 0:12:39,166
palette of your app.

352
00:12:39,586 --> 0:12:41,856
You may need thinner or heavier

353
00:12:41,856 --> 0:12:42,156
weights.

354
00:12:43,026 --> 0:12:47,156
So to recap, we got to know a

355
00:12:47,156 --> 0:12:49,116
new library of symbols that

356
00:12:49,116 --> 0:12:50,016
match San Francisco.

357
00:12:51,036 --> 0:12:53,806
They are vector-based and come

358
00:12:53,806 --> 0:12:55,316
in different weights and scales.

359
00:12:56,506 --> 0:12:58,366
You can browse them through the

360
00:12:58,366 --> 0:12:59,106
SF Symbols app.

361
00:13:00,626 --> 0:13:01,966
We saw how to use them in your

362
00:13:01,966 --> 0:13:03,806
specs, referenced them by name,

363
00:13:03,966 --> 0:13:05,056
and how to specify their

364
00:13:05,106 --> 0:13:07,796
positioning, and finally, you

365
00:13:07,796 --> 0:13:09,606
can customize symbols using the

366
00:13:09,606 --> 0:13:11,546
SVG template exported from the

367
00:13:11,546 --> 0:13:12,076
SF Symbols app.

368
00:13:14,116 --> 0:13:15,376
Now, I'd like to invite Tom to

369
00:13:15,376 --> 0:13:16,826
the stage, so he can tell you

370
00:13:16,856 --> 0:13:18,206
all about how to use these

371
00:13:18,206 --> 0:13:18,886
symbols in code.

372
00:13:19,516 --> 0:13:21,546
[ Applause ]

373
00:13:22,046 --> 0:13:22,346
&gt;&gt; Thank you, Paolo.

374
00:13:23,516 --> 0:13:26,156
[ Applause ]

375
00:13:26,656 --> 0:13:28,856
Well, I'm really excited, and

376
00:13:28,986 --> 0:13:30,396
the first thing I would want to

377
00:13:30,396 --> 0:13:32,736
do is see if I can use one of

378
00:13:32,736 --> 0:13:34,226
these symbols in my own apps.

379
00:13:34,756 --> 0:13:36,386
And I have this simple slideshow

380
00:13:36,386 --> 0:13:38,596
app, and it has some UI that

381
00:13:38,706 --> 0:13:39,956
allows you to change the speed.

382
00:13:40,406 --> 0:13:42,236
But I'm really not very happy

383
00:13:42,316 --> 0:13:43,296
with these images.

384
00:13:43,716 --> 0:13:45,276
They're very basic, so let's see

385
00:13:45,436 --> 0:13:46,526
-- they're a good candidate for

386
00:13:46,866 --> 0:13:48,136
changing, and let's see what it

387
00:13:48,136 --> 0:13:50,616
does if we have a symbol in the

388
00:13:50,616 --> 0:13:51,136
Symbols app.

389
00:13:51,136 --> 0:13:53,856
So let's fire up SF Symbols, and

390
00:13:53,856 --> 0:13:55,506
search for tortoise, because

391
00:13:56,096 --> 0:13:58,056
maybe we can use the classic

392
00:13:58,056 --> 0:13:59,006
[inaudible] style tortoise and

393
00:13:59,006 --> 0:13:59,226
hare.

394
00:14:00,416 --> 0:14:01,686
Turns out, there is one, so I

395
00:14:01,686 --> 0:14:02,266
can use this.

396
00:14:02,266 --> 0:14:02,746
That's great.

397
00:14:04,086 --> 0:14:05,056
And the hare is there, too.

398
00:14:05,316 --> 0:14:07,576
Perfect. Now, how do I use them?

399
00:14:07,916 --> 0:14:08,686
It's very simple.

400
00:14:08,686 --> 0:14:10,316
We're introducing new API called

401
00:14:10,316 --> 0:14:12,266
UIImage(systemName that works

402
00:14:12,316 --> 0:14:14,406
very similar to the existing

403
00:14:14,536 --> 0:14:15,376
APIs.

404
00:14:15,836 --> 0:14:18,016
You just pass in the name you

405
00:14:18,016 --> 0:14:19,376
copy from the SF Symbols app,

406
00:14:19,376 --> 0:14:20,546
and that's it.

407
00:14:20,546 --> 0:14:22,706
If we build and run -- wow, bam,

408
00:14:23,516 --> 0:14:25,526
that looks amazing, and it was

409
00:14:25,886 --> 0:14:26,896
just two lines of code.

410
00:14:27,146 --> 0:14:30,426
Perfect. Now, Paolo sent me a

411
00:14:30,536 --> 0:14:31,496
spec, because we're working

412
00:14:31,496 --> 0:14:33,106
together on this app, and he

413
00:14:33,106 --> 0:14:34,556
really has to stop putting hot

414
00:14:34,596 --> 0:14:35,616
Belgian chocolate there, because

415
00:14:35,676 --> 0:14:36,726
now I really feel like hot

416
00:14:36,786 --> 0:14:37,436
Belgian chocolate.

417
00:14:38,306 --> 0:14:40,316
But he gave me this spec, and it

418
00:14:40,316 --> 0:14:41,326
looks very different than the

419
00:14:41,326 --> 0:14:43,846
one that I got before.

420
00:14:43,846 --> 0:14:44,656
It's -- there's less

421
00:14:44,656 --> 0:14:45,206
information.

422
00:14:45,206 --> 0:14:45,706
I like that.

423
00:14:45,736 --> 0:14:47,356
That's less work for me, but

424
00:14:47,356 --> 0:14:49,816
let's focus on this image,

425
00:14:49,816 --> 0:14:50,926
because there's a new teacup

426
00:14:51,716 --> 0:14:51,896
there.

427
00:14:52,026 --> 0:14:53,566
He also gave me a file,

428
00:14:53,966 --> 0:14:55,946
teacup.svg file that I need to

429
00:14:55,946 --> 0:14:57,446
import into my asset catalog.

430
00:14:57,446 --> 0:15:00,576
Well, it's definitely a teacup.

431
00:14:57,446 --> 0:15:00,576
Well, it's definitely a teacup.

432
00:15:00,696 --> 0:15:01,426
There's a lot of them.

433
00:15:01,426 --> 0:15:02,686
He really put some effort into

434
00:15:02,686 --> 0:15:04,226
it, and that's what I like about

435
00:15:04,266 --> 0:15:04,676
Paolo.

436
00:15:04,746 --> 0:15:06,336
He has, like, great attention to

437
00:15:06,336 --> 0:15:06,816
detail.

438
00:15:09,056 --> 0:15:10,516
So now, my image is there, and I

439
00:15:10,516 --> 0:15:12,366
can just use UIImage(named to

440
00:15:12,366 --> 0:15:13,226
get to my teacup.

441
00:15:13,226 --> 0:15:15,186
If we run this, I get this.

442
00:15:15,606 --> 0:15:17,256
This is a real nice and sharp

443
00:15:17,316 --> 0:15:18,916
teacup, exactly what I wanted,

444
00:15:20,106 --> 0:15:21,146
but I'm not sure if you have

445
00:15:21,146 --> 0:15:22,386
noticed, when I imported the

446
00:15:22,386 --> 0:15:26,106
file, there are now two teacups

447
00:15:26,106 --> 0:15:27,146
in my asset catalog.

448
00:15:27,476 --> 0:15:29,516
It turns out you can now have

449
00:15:29,826 --> 0:15:31,256
two images with the same name,

450
00:15:31,376 --> 0:15:32,946
but they are -- have a different

451
00:15:33,156 --> 0:15:33,386
type.

452
00:15:34,216 --> 0:15:35,686
So let's step back for a moment

453
00:15:35,686 --> 0:15:36,976
and explain what's happening.

454
00:15:36,976 --> 0:15:37,986
We're going to use envelope,

455
00:15:38,076 --> 0:15:39,336
because the teacup is not a good

456
00:15:39,336 --> 0:15:39,776
example.

457
00:15:41,276 --> 0:15:43,106
Up until now, UIImage(named was

458
00:15:43,396 --> 0:15:44,246
pretty straightforward.

459
00:15:44,286 --> 0:15:45,486
You have an image in your asset

460
00:15:45,486 --> 0:15:47,216
catalog, and you can get it out

461
00:15:47,296 --> 0:15:47,876
using the API.

462
00:15:48,996 --> 0:15:50,266
Now, with symbols, it becomes

463
00:15:50,266 --> 0:15:51,106
more complicated.

464
00:15:52,336 --> 0:15:53,676
You can actually have an image

465
00:15:53,676 --> 0:15:54,856
with the same name, and there

466
00:15:54,916 --> 0:15:56,196
might be three versions of it.

467
00:15:56,196 --> 0:15:57,916
You might have a system symbol

468
00:15:57,916 --> 0:15:58,566
with this name.

469
00:15:58,566 --> 0:16:00,126
You might have a custom symbol

470
00:15:58,566 --> 0:16:00,126
You might have a custom symbol

471
00:16:00,126 --> 0:16:01,386
with the name, and your old

472
00:16:01,546 --> 0:16:03,826
non-symbol image might still be

473
00:16:05,016 --> 0:16:05,206
there.

474
00:16:05,326 --> 0:16:07,556
For system images, there's no

475
00:16:07,556 --> 0:16:07,936
problem.

476
00:16:09,006 --> 0:16:10,136
They're in a separate name

477
00:16:10,136 --> 0:16:10,926
space, because there's a

478
00:16:10,926 --> 0:16:12,076
separate API for them.

479
00:16:12,076 --> 0:16:13,236
And so they are -- there's no

480
00:16:13,236 --> 0:16:13,876
conflict there.

481
00:16:14,346 --> 0:16:15,966
It also means you can never get

482
00:16:15,966 --> 0:16:17,546
a custom symbol using this API,

483
00:16:17,546 --> 0:16:19,446
and you can never get a system

484
00:16:19,446 --> 0:16:21,566
symbol using the UIImage(named

485
00:16:21,616 --> 0:16:21,796
API.

486
00:16:21,796 --> 0:16:23,096
They are totally separate.

487
00:16:23,566 --> 0:16:25,996
For custom symbols, it's a

488
00:16:25,996 --> 0:16:28,676
little bit different.

489
00:16:28,776 --> 0:16:30,526
We prioritize things now, so

490
00:16:30,526 --> 0:16:32,376
we'll first look for a symbol

491
00:16:32,376 --> 0:16:32,796
image.

492
00:16:32,896 --> 0:16:34,126
And if we can find one, we will

493
00:16:34,126 --> 0:16:35,806
return that, and otherwise,

494
00:16:35,836 --> 0:16:37,006
we'll look for a non-symbol

495
00:16:37,006 --> 0:16:38,286
image, and then you get that

496
00:16:38,286 --> 0:16:38,486
back.

497
00:16:39,096 --> 0:16:39,906
Now, you might say, "Well,

498
00:16:39,906 --> 0:16:41,126
that's really annoying, because

499
00:16:41,306 --> 0:16:42,616
what if I want both?"

500
00:16:43,056 --> 0:16:44,066
But there's a good story for

501
00:16:44,066 --> 0:16:44,366
this.

502
00:16:45,706 --> 0:16:48,006
With the same line of code, I

503
00:16:48,076 --> 0:16:50,256
can run my app on iOS 12 or

504
00:16:50,256 --> 0:16:51,546
earlier, and I get the old

505
00:16:51,546 --> 0:16:53,916
image, the bitmap image in this

506
00:16:54,426 --> 0:16:54,546
case.

507
00:16:55,156 --> 0:16:57,656
And if I run my app on iOS 13 or

508
00:16:57,656 --> 0:16:59,046
later, I get the symbol image.

509
00:16:59,046 --> 0:17:00,546
So I don't have to write any

510
00:16:59,046 --> 0:17:00,546
So I don't have to write any

511
00:17:00,606 --> 0:17:01,986
version-checking code to get a

512
00:17:01,986 --> 0:17:02,986
different image for the

513
00:17:02,986 --> 0:17:03,696
different OSs.

514
00:17:04,366 --> 0:17:06,816
Just provide 2 images with the

515
00:17:06,886 --> 0:17:08,496
same name, and it works out of

516
00:17:08,496 --> 0:17:08,915
the box.

517
00:17:10,016 --> 0:17:11,945
If you do want to use the old

518
00:17:11,945 --> 0:17:13,665
image on iOS 13 or later, you

519
00:17:13,665 --> 0:17:15,665
have to duplicate or rename it.

520
00:17:19,076 --> 0:17:20,925
So let's -- going back to our

521
00:17:20,986 --> 0:17:23,236
slides, and one other thing that

522
00:17:23,236 --> 0:17:25,695
we have is the configuration on

523
00:17:25,695 --> 0:17:26,356
this teacup.

524
00:17:26,646 --> 0:17:27,816
It should be large.

525
00:17:28,836 --> 0:17:29,536
How do we do this?

526
00:17:29,536 --> 0:17:31,646
We create a new type that we

527
00:17:31,646 --> 0:17:33,286
introduced, SymbolConfiguration,

528
00:17:33,836 --> 0:17:35,376
and we create one with a large

529
00:17:35,376 --> 0:17:35,726
scale.

530
00:17:36,376 --> 0:17:38,536
The other configuration

531
00:17:38,536 --> 0:17:39,496
properties that are on the

532
00:17:39,496 --> 0:17:41,326
object are unspecified.

533
00:17:41,496 --> 0:17:42,836
We only have a large scale here,

534
00:17:42,836 --> 0:17:44,356
and then we can use the

535
00:17:44,356 --> 0:17:46,136
imageView to display our image.

536
00:17:46,376 --> 0:17:47,336
There's a new property on

537
00:17:47,336 --> 0:17:48,286
UIImageView called

538
00:17:48,416 --> 0:17:49,866
preferredSymbolConfiguration

539
00:17:50,426 --> 0:17:51,556
that will tell the imageView to

540
00:17:51,556 --> 0:17:53,246
use this configuration to render

541
00:17:53,616 --> 0:17:54,446
a symbol image.

542
00:17:54,676 --> 0:17:56,256
It will have no effect on

543
00:17:56,256 --> 0:17:57,296
non-symbol images.

544
00:17:57,836 --> 0:18:01,266
If we run this, what a

545
00:17:57,836 --> 0:18:01,266
If we run this, what a

546
00:18:01,516 --> 0:18:02,946
difference a scale makes.

547
00:18:06,456 --> 0:18:07,736
Now, you can also use this

548
00:18:07,736 --> 0:18:11,436
configuration to change the size

549
00:18:11,486 --> 0:18:12,056
of a symbol.

550
00:18:12,516 --> 0:18:14,206
You specify a point size, and

551
00:18:14,206 --> 0:18:15,776
optionally, a weight or a scale.

552
00:18:16,386 --> 0:18:19,356
Now, an important point here is

553
00:18:19,356 --> 0:18:22,056
that symbol point sizes are not

554
00:18:22,236 --> 0:18:23,126
screen point sizes.

555
00:18:23,686 --> 0:18:26,686
Symbol point sizes are expressed

556
00:18:26,686 --> 0:18:27,916
as font point sizes.

557
00:18:27,916 --> 0:18:29,336
They're typographical in nature.

558
00:18:30,086 --> 0:18:31,446
The screen point sizes describe

559
00:18:31,446 --> 0:18:32,736
the dimension of the image, the

560
00:18:32,736 --> 0:18:35,966
width and the height.

561
00:18:36,216 --> 0:18:37,636
Now, a picture says 1,000 words,

562
00:18:37,756 --> 0:18:39,626
so let's see that and visualize

563
00:18:39,686 --> 0:18:39,916
this.

564
00:18:39,916 --> 0:18:41,396
Like, we have this -- our circle

565
00:18:41,456 --> 0:18:42,646
symbol next to the "Favorite"

566
00:18:42,646 --> 0:18:44,156
text, and they are both

567
00:18:44,556 --> 0:18:45,996
specified using the system font

568
00:18:46,056 --> 0:18:47,196
at 28 points.

569
00:18:47,966 --> 0:18:49,396
Now, you might expect this image

570
00:18:49,396 --> 0:18:51,256
to be 28 x 28 points.

571
00:18:51,366 --> 0:18:53,226
Well, it turns out, it isn't,

572
00:18:53,366 --> 0:18:54,806
and these values are the actual

573
00:18:54,856 --> 0:18:56,366
correct values for this symbol

574
00:18:56,366 --> 0:18:57,376
at this configuration.

575
00:18:57,646 --> 0:18:59,156
And the image is not even

576
00:18:59,236 --> 0:19:03,186
square, and it's a circle.

577
00:18:59,236 --> 0:19:03,186
square, and it's a circle.

578
00:19:03,336 --> 0:19:04,806
So for symbols, you have to let

579
00:19:04,856 --> 0:19:07,376
go of describing the image using

580
00:19:07,376 --> 0:19:07,936
a dimension.

581
00:19:07,936 --> 0:19:10,016
You have to use the symbol

582
00:19:10,066 --> 0:19:11,396
points, and you can think of it

583
00:19:11,396 --> 0:19:12,356
as a piece of text.

584
00:19:12,356 --> 0:19:13,326
Because if you have a piece of

585
00:19:13,386 --> 0:19:15,026
text, you describe it using the

586
00:19:15,026 --> 0:19:16,966
font point size, and not using

587
00:19:16,966 --> 0:19:17,646
its dimensions.

588
00:19:18,276 --> 0:19:22,216
It's the same.

589
00:19:22,426 --> 0:19:23,616
Another way to configure a

590
00:19:23,686 --> 0:19:25,296
symbol is using a text style,

591
00:19:25,296 --> 0:19:27,536
and that means that the symbol

592
00:19:27,536 --> 0:19:28,836
will behave according to the

593
00:19:28,836 --> 0:19:30,096
dynamic text style rules.

594
00:19:30,096 --> 0:19:31,486
It will behave the same as a

595
00:19:31,486 --> 0:19:32,936
piece of text with the text

596
00:19:32,936 --> 0:19:33,206
style.

597
00:19:34,106 --> 0:19:35,816
So it matches great with text

598
00:19:36,166 --> 0:19:36,676
styles.

599
00:19:37,506 --> 0:19:39,596
And imageView will automatically

600
00:19:39,646 --> 0:19:41,646
change the size of the image,

601
00:19:41,646 --> 0:19:43,646
and look up the right size at

602
00:19:43,646 --> 0:19:45,026
run time, depending on the

603
00:19:45,066 --> 0:19:46,366
preferred content size category

604
00:19:46,426 --> 0:19:46,946
of the app.

605
00:19:47,446 --> 0:19:50,506
You can see this in practice.

606
00:19:50,546 --> 0:19:52,236
Like, the text is nice and

607
00:19:52,236 --> 0:19:53,746
large, and the symbols scaled

608
00:19:53,806 --> 0:19:54,326
accordingly.

609
00:19:54,326 --> 0:19:55,846
And they have the nice -- the

610
00:19:55,846 --> 0:19:56,306
same weight.

611
00:19:59,176 --> 0:20:00,796
So images can change size

612
00:19:59,176 --> 0:20:00,796
So images can change size

613
00:20:00,796 --> 0:20:01,756
dynamically, and we have to talk

614
00:20:01,756 --> 0:20:02,896
about this, because you usually

615
00:20:02,896 --> 0:20:04,706
want to constrain an image by

616
00:20:04,706 --> 0:20:05,256
width and height.

617
00:20:06,186 --> 0:20:08,826
And since a symbol renders

618
00:20:09,126 --> 0:20:11,106
always -- it's a vector.

619
00:20:12,136 --> 0:20:13,706
You could be inclined to always

620
00:20:13,756 --> 0:20:14,816
specify this width and height,

621
00:20:14,946 --> 0:20:16,046
but it's actually not a good

622
00:20:16,046 --> 0:20:16,396
idea.

623
00:20:17,056 --> 0:20:18,586
First of all, it's not really

624
00:20:18,586 --> 0:20:18,876
correct.

625
00:20:19,516 --> 0:20:21,126
You can see on the screenshot

626
00:20:21,126 --> 0:20:23,046
that the symbol is described as

627
00:20:23,046 --> 0:20:24,776
a 17-point symbol, which is

628
00:20:24,776 --> 0:20:27,456
really small, but it still

629
00:20:27,456 --> 0:20:28,996
renders as a very large image,

630
00:20:29,666 --> 0:20:30,806
because the width and height are

631
00:20:30,806 --> 0:20:31,046
there.

632
00:20:31,806 --> 0:20:32,836
But you can also see that it's

633
00:20:32,836 --> 0:20:34,496
not entirely correctly centered.

634
00:20:34,496 --> 0:20:35,486
Like, it's a little bit off to

635
00:20:35,486 --> 0:20:36,546
the left, and a little bit off

636
00:20:36,546 --> 0:20:37,436
to the top.

637
00:20:37,576 --> 0:20:40,856
And secondly, it's not

638
00:20:40,856 --> 0:20:41,916
performance -- this is not the

639
00:20:41,916 --> 0:20:43,776
most performance way to display

640
00:20:43,776 --> 0:20:44,626
a symbol image.

641
00:20:45,636 --> 0:20:49,676
So what you want to do is not

642
00:20:49,706 --> 0:20:50,936
constrain the symbol image at

643
00:20:50,936 --> 0:20:52,336
all, and have it be its natural

644
00:20:52,336 --> 0:20:52,696
size.

645
00:20:53,416 --> 0:20:57,526
In this case, we changed the

646
00:20:57,526 --> 0:20:59,736
size of the symbol to 500 points

647
00:20:59,796 --> 0:21:00,756
to match the size that we had

648
00:20:59,796 --> 0:21:00,756
to match the size that we had

649
00:21:00,756 --> 0:21:02,496
before, and it looks a lot

650
00:21:02,496 --> 0:21:04,006
better, because it -- the

651
00:21:04,166 --> 0:21:06,596
centering is better than before,

652
00:21:07,336 --> 0:21:08,846
and the size is more correct.

653
00:21:10,356 --> 0:21:11,626
This will also be more

654
00:21:11,626 --> 0:21:12,296
performance.

655
00:21:16,076 --> 0:21:17,806
So if you do need a fixed size,

656
00:21:18,136 --> 0:21:19,256
set the point size, but

657
00:21:19,256 --> 0:21:21,616
otherwise have the symbol react

658
00:21:21,776 --> 0:21:23,606
to the symbol configuration,

659
00:21:23,606 --> 0:21:25,336
because even a large symbol

660
00:21:25,336 --> 0:21:26,616
configuration or a small-scale

661
00:21:26,616 --> 0:21:27,756
configuration may make a big

662
00:21:27,756 --> 0:21:29,446
difference for the size of the

663
00:21:29,446 --> 0:21:30,096
same symbol.

664
00:21:30,726 --> 0:21:35,456
Now, there's a lot of

665
00:21:35,516 --> 0:21:38,426
configurations here, and we've

666
00:21:38,426 --> 0:21:39,916
established that symbols are --

667
00:21:39,916 --> 0:21:41,106
Paolo mentioned before that

668
00:21:41,176 --> 0:21:42,646
symbols are really made to work

669
00:21:42,646 --> 0:21:44,406
with San Francisco, our system

670
00:21:44,436 --> 0:21:45,966
font, but they work with any

671
00:21:45,966 --> 0:21:46,286
font.

672
00:21:46,486 --> 0:21:48,646
So you can use this API,

673
00:21:49,826 --> 0:21:51,406
SymbolConfiguration(font, to

674
00:21:51,406 --> 0:21:52,526
create a configuration that

675
00:21:52,586 --> 0:21:53,806
matches the font you give it,

676
00:21:54,606 --> 0:21:56,056
and it works with system fonts.

677
00:21:56,526 --> 0:21:58,396
It works with dynamic type

678
00:21:58,396 --> 0:21:59,626
fonts, but it also works with

679
00:21:59,626 --> 0:22:00,346
custom fonts.

680
00:21:59,626 --> 0:22:00,346
custom fonts.

681
00:22:00,686 --> 0:22:02,616
And especially for custom fonts,

682
00:22:02,996 --> 0:22:04,046
it will create a more

683
00:22:04,046 --> 0:22:06,716
high-fidelity configuration than

684
00:22:06,716 --> 0:22:07,896
the one you can create manually

685
00:22:07,896 --> 0:22:09,346
by copying the values from the

686
00:22:09,346 --> 0:22:10,716
font into your configuration.

687
00:22:11,446 --> 0:22:12,756
So it's better to use this for

688
00:22:13,176 --> 0:22:13,926
custom fonts.

689
00:22:14,326 --> 0:22:16,416
And when you already have a

690
00:22:16,416 --> 0:22:17,796
piece of text or a label that

691
00:22:17,796 --> 0:22:19,266
has a font configured, this is

692
00:22:19,356 --> 0:22:20,246
an easy way to create a

693
00:22:20,246 --> 0:22:21,736
configuration that matches that

694
00:22:22,216 --> 0:22:22,726
font.

695
00:22:26,766 --> 0:22:27,656
And the last thing about

696
00:22:27,696 --> 0:22:29,386
configurations is that they are

697
00:22:29,386 --> 0:22:29,896
immutable.

698
00:22:29,896 --> 0:22:30,826
You can't change them.

699
00:22:30,876 --> 0:22:32,266
So what if you do want to change

700
00:22:32,266 --> 0:22:32,406
them?

701
00:22:32,796 --> 0:22:33,826
Well, you have to combine them.

702
00:22:34,576 --> 0:22:35,346
There's a method called

703
00:22:35,396 --> 0:22:37,396
applying, and it applies the

704
00:22:37,446 --> 0:22:38,866
specified configuration to the

705
00:22:38,866 --> 0:22:40,656
one that you're calling it on.

706
00:22:40,656 --> 0:22:42,746
So we'll take the configuration

707
00:22:43,386 --> 0:22:44,416
you're calling it on, and then

708
00:22:44,416 --> 0:22:46,896
take all the specified values in

709
00:22:46,896 --> 0:22:47,986
the other configuration, and

710
00:22:47,986 --> 0:22:50,506
override, or set them on the

711
00:22:50,506 --> 0:22:51,236
base configuration.

712
00:22:51,236 --> 0:22:52,396
And you get a new configuration

713
00:22:52,396 --> 0:22:54,066
that you can use somewhere else.

714
00:22:54,486 --> 0:22:56,166
But they are immutable, and the

715
00:22:56,196 --> 0:22:57,546
configuration themselves won't

716
00:22:57,546 --> 0:22:57,976
change.

717
00:23:00,096 --> 0:23:01,526
Now, let's talk about layout.

718
00:23:03,166 --> 0:23:04,756
We have this simple comments

719
00:23:04,756 --> 0:23:06,676
section in our app, and we want

720
00:23:06,676 --> 0:23:08,476
to expand a little bit for our

721
00:23:08,696 --> 0:23:11,406
next version, and also start

722
00:23:11,406 --> 0:23:12,236
using symbols here.

723
00:23:12,426 --> 0:23:13,446
And we have this avatar

724
00:23:13,446 --> 0:23:14,266
placeholder.

725
00:23:14,266 --> 0:23:15,676
I'm going to focus on just one

726
00:23:15,676 --> 0:23:18,086
row, and Paolo suggested

727
00:23:18,206 --> 0:23:19,606
switching to a new symbol.

728
00:23:19,606 --> 0:23:20,386
So let's try that.

729
00:23:21,636 --> 0:23:25,696
That looks a lot better.

730
00:23:25,876 --> 0:23:27,396
So normally, if you would align

731
00:23:27,396 --> 0:23:28,746
images with a piece of text, you

732
00:23:28,746 --> 0:23:30,166
would use center alignment --

733
00:23:30,856 --> 0:23:32,716
vertical center alignment, and

734
00:23:32,796 --> 0:23:34,036
in most cases, that would look

735
00:23:34,036 --> 0:23:35,696
like you would expect, and it

736
00:23:35,696 --> 0:23:36,566
would be the easiest.

737
00:23:36,656 --> 0:23:37,696
Now, for symbols, there's

738
00:23:37,696 --> 0:23:39,176
actually no difference.

739
00:23:39,446 --> 0:23:40,826
You can still use vertical

740
00:23:40,896 --> 0:23:42,026
center alignments, and it's

741
00:23:42,026 --> 0:23:42,816
actually preferred.

742
00:23:44,756 --> 0:23:46,466
UIKit will actually take the

743
00:23:46,466 --> 0:23:48,376
typographic information in the

744
00:23:48,436 --> 0:23:50,546
symbol and use it to properly

745
00:23:50,546 --> 0:23:52,606
visually align the symbol versus

746
00:23:52,806 --> 0:23:53,746
the piece of text, and that

747
00:23:53,746 --> 0:23:55,706
might actually happen that the

748
00:23:55,706 --> 0:23:59,136
frames of the two elements are

749
00:23:59,136 --> 0:24:00,096
not matching up together.

750
00:23:59,136 --> 0:24:00,096
not matching up together.

751
00:24:00,096 --> 0:24:01,786
So the center is optically and

752
00:24:01,786 --> 0:24:05,066
not absolute, but you don't have

753
00:24:05,066 --> 0:24:05,656
to do anything.

754
00:24:05,816 --> 0:24:07,476
The system does it for you.

755
00:24:09,536 --> 0:24:11,156
There's, of course, also cases

756
00:24:11,156 --> 0:24:13,436
where labels have more than one

757
00:24:13,436 --> 0:24:15,516
line, and vertical centering

758
00:24:15,516 --> 0:24:16,496
works great here, too.

759
00:24:17,306 --> 0:24:18,416
Same for symbols, we'll still

760
00:24:18,416 --> 0:24:19,326
use the typographical

761
00:24:19,326 --> 0:24:20,836
information to properly align

762
00:24:20,836 --> 0:24:22,746
for the center of the label.

763
00:24:23,446 --> 0:24:24,996
This is great for disclosure

764
00:24:24,996 --> 0:24:26,206
indicators, for example.

765
00:24:27,346 --> 0:24:29,236
And looking back at our view,

766
00:24:29,936 --> 0:24:31,256
the disclosure indicator sits at

767
00:24:31,256 --> 0:24:32,366
the right place where I want it,

768
00:24:32,366 --> 0:24:35,196
but I actually want that avatar

769
00:24:35,196 --> 0:24:36,646
placeholder to be next to my

770
00:24:36,646 --> 0:24:37,226
first line.

771
00:24:37,316 --> 0:24:39,806
So let's move it.

772
00:24:39,806 --> 0:24:42,076
In this case, you can use

773
00:24:42,166 --> 0:24:44,106
baseline alignment, and up until

774
00:24:44,106 --> 0:24:45,686
now, it would be a bit hard to

775
00:24:45,686 --> 0:24:46,386
make this happen.

776
00:24:46,756 --> 0:24:48,046
You could do edge alignment,

777
00:24:48,046 --> 0:24:48,956
because you know the text and

778
00:24:48,956 --> 0:24:50,686
the label would be there, or you

779
00:24:50,686 --> 0:24:52,146
could do baseline alignment, but

780
00:24:52,146 --> 0:24:53,716
have to calculate offsets, so it

781
00:24:53,716 --> 0:24:54,336
would be weird.

782
00:24:54,676 --> 0:24:55,746
And in this case, for symbols,

783
00:24:55,746 --> 0:24:58,016
we can just baseline align, and

784
00:24:58,016 --> 0:24:58,976
that's it.

785
00:25:02,066 --> 0:25:02,426
Thank you.

786
00:25:03,516 --> 0:25:07,956
[ Applause ]

787
00:25:08,456 --> 0:25:09,576
And you can actually inspect

788
00:25:09,576 --> 0:25:11,926
this baseline because we

789
00:25:12,156 --> 0:25:14,716
introduced a new property on UI

790
00:25:14,716 --> 0:25:15,396
Image called

791
00:25:15,986 --> 0:25:17,566
baselineOffsetFromBottom, and it

792
00:25:17,566 --> 0:25:19,686
expresses, like it says, the

793
00:25:19,686 --> 0:25:21,526
offset to the baseline from the

794
00:25:21,526 --> 0:25:22,706
bottom of the image.

795
00:25:23,416 --> 0:25:25,186
And it's an optional CG float.

796
00:25:25,706 --> 0:25:27,236
Why? Because not all images have

797
00:25:27,296 --> 0:25:27,906
baselines.

798
00:25:28,046 --> 0:25:29,116
Symbols come with one by

799
00:25:29,166 --> 0:25:31,966
default, but other images don't

800
00:25:31,966 --> 0:25:32,326
have one.

801
00:25:32,906 --> 0:25:34,356
So you have to check if the

802
00:25:34,386 --> 0:25:36,356
image has a baseline in order to

803
00:25:36,356 --> 0:25:37,406
see if you can use it.

804
00:25:38,666 --> 0:25:39,486
In Objective-C, there's a

805
00:25:39,486 --> 0:25:40,336
separate method for it,

806
00:25:40,706 --> 0:25:41,456
because they don't have

807
00:25:41,826 --> 0:25:42,206
optionals.

808
00:25:44,826 --> 0:25:46,456
Now, these baselines might be --

809
00:25:46,576 --> 0:25:47,846
have unexpected values.

810
00:25:47,846 --> 0:25:49,576
In this case, we have two symbol

811
00:25:49,576 --> 0:25:49,966
images.

812
00:25:50,536 --> 0:25:51,356
They're right next to a piece of

813
00:25:51,416 --> 0:25:51,646
text.

814
00:25:51,886 --> 0:25:53,056
They have the same size, and

815
00:25:53,056 --> 0:25:54,286
they share the same baseline.

816
00:25:54,426 --> 0:25:56,136
But if we visualize their

817
00:25:56,136 --> 0:25:57,476
bounds, you can see that the

818
00:25:57,476 --> 0:25:58,836
chevron is sitting high above

819
00:25:58,836 --> 0:26:01,556
the baseline, and the cloud sits

820
00:25:58,836 --> 0:26:01,556
the baseline, and the cloud sits

821
00:26:01,556 --> 0:26:02,426
over the baseline.

822
00:26:03,316 --> 0:26:05,276
And looking at their values, you

823
00:26:05,276 --> 0:26:07,226
can see that expressing the

824
00:26:07,226 --> 0:26:08,456
offset from the bottom means

825
00:26:08,456 --> 0:26:10,046
that going up is a positive

826
00:26:10,046 --> 0:26:11,726
offset and going down is a

827
00:26:11,726 --> 0:26:13,266
negative offset.

828
00:26:14,326 --> 0:26:16,726
It also means that it's valid

829
00:26:16,726 --> 0:26:18,046
for an image to have a baseline

830
00:26:18,046 --> 0:26:19,516
that is outside of its bounds,

831
00:26:20,056 --> 0:26:21,036
in this case, the chevron.

832
00:26:21,886 --> 0:26:23,516
And if you have a baseline value

833
00:26:23,516 --> 0:26:24,636
of zero, it doesn't mean that

834
00:26:24,636 --> 0:26:25,766
you don't have a baseline.

835
00:26:25,896 --> 0:26:27,066
It means that the baseline is

836
00:26:27,066 --> 0:26:28,266
the same as the bottom of the

837
00:26:28,266 --> 0:26:28,686
image.

838
00:26:29,236 --> 0:26:30,566
It's a bit surprising, but it

839
00:26:30,566 --> 0:26:30,976
works.

840
00:26:33,196 --> 0:26:35,646
Now, the good thing is, we also

841
00:26:35,646 --> 0:26:38,366
added API to add baselines to

842
00:26:38,366 --> 0:26:38,876
images.

843
00:26:39,386 --> 0:26:41,076
You would use

844
00:26:41,116 --> 0:26:42,716
withBaselineOffsetFromBottom,

845
00:26:42,716 --> 0:26:43,936
and you would get a new image

846
00:26:44,006 --> 0:26:45,446
that has a baseline configured

847
00:26:45,446 --> 0:26:46,886
like you asked for.

848
00:26:47,146 --> 0:26:48,516
Again, this is an offset in

849
00:26:48,516 --> 0:26:50,626
screen points from the bottom of

850
00:26:50,626 --> 0:26:51,116
the image.

851
00:26:52,006 --> 0:26:53,196
Now, the nice thing is, the

852
00:26:53,196 --> 0:26:54,596
image will start behaving like a

853
00:26:54,666 --> 0:26:54,966
symbol.

854
00:26:54,966 --> 0:26:56,036
It's not a symbol, but will

855
00:26:56,036 --> 0:26:58,096
behave like a symbol, because it

856
00:26:58,096 --> 0:26:59,496
has some typographical

857
00:26:59,496 --> 0:27:00,136
information.

858
00:26:59,496 --> 0:27:00,136
information.

859
00:27:00,726 --> 0:27:02,156
And so, you can use the same

860
00:27:02,156 --> 0:27:04,216
layout for symbol images as for

861
00:27:04,216 --> 0:27:05,146
regular images.

862
00:27:05,506 --> 0:27:06,796
You don't have to check does

863
00:27:06,796 --> 0:27:07,876
this image have a baseline?

864
00:27:07,876 --> 0:27:09,926
Then I use this layout, or the

865
00:27:09,926 --> 0:27:11,456
other way around, and this makes

866
00:27:11,456 --> 0:27:12,496
that a lot easier.

867
00:27:12,816 --> 0:27:15,216
And looking at our example, we

868
00:27:15,216 --> 0:27:17,486
now have actual avatars, and

869
00:27:17,806 --> 0:27:20,176
some rows without avatars, and

870
00:27:20,236 --> 0:27:21,046
it looks much better.

871
00:27:21,046 --> 0:27:22,836
And I only had to do baseline

872
00:27:22,836 --> 0:27:24,486
alignment for this first line.

873
00:27:24,676 --> 0:27:26,026
It's really easy.

874
00:27:27,816 --> 0:27:29,516
I also want to touch briefly on

875
00:27:29,516 --> 0:27:30,566
horizontal alignments.

876
00:27:30,696 --> 0:27:32,096
You can see that the images are

877
00:27:32,516 --> 0:27:34,116
horizontally aligned on the same

878
00:27:34,116 --> 0:27:36,696
column, and you do this by

879
00:27:36,696 --> 0:27:38,246
specifying an offset that you

880
00:27:38,246 --> 0:27:40,146
want to align to, and then

881
00:27:40,196 --> 0:27:41,386
center the images on that

882
00:27:41,386 --> 0:27:41,696
offset.

883
00:27:41,696 --> 0:27:42,786
It's pretty easy.

884
00:27:43,106 --> 0:27:44,736
And then you can go from that

885
00:27:44,736 --> 0:27:46,766
offset to the text, or from the

886
00:27:46,766 --> 0:27:47,496
edge to the text.

887
00:27:47,496 --> 0:27:49,896
So you should actually center

888
00:27:49,896 --> 0:27:51,796
align, even horizontally, the

889
00:27:51,796 --> 0:27:53,986
images instead of applying a

890
00:27:53,986 --> 0:27:55,856
leading or a trailing constraint

891
00:27:55,856 --> 0:27:56,026
there.

892
00:27:59,976 --> 0:28:02,416
Now, let's go back to our spec.

893
00:27:59,976 --> 0:28:02,416
Now, let's go back to our spec.

894
00:28:02,416 --> 0:28:04,356
What I wanted to say is that,

895
00:28:04,356 --> 0:28:06,076
like, by default, it's probably

896
00:28:06,076 --> 0:28:07,366
a good idea to start with center

897
00:28:07,366 --> 0:28:09,126
alignment, both horizontally and

898
00:28:09,126 --> 0:28:09,576
vertically.

899
00:28:10,216 --> 0:28:11,356
In most cases, that's what you

900
00:28:11,356 --> 0:28:12,726
want, and the system will handle

901
00:28:12,726 --> 0:28:13,506
everything for you.

902
00:28:13,506 --> 0:28:14,676
It will use typographical

903
00:28:14,676 --> 0:28:16,486
information if it's available,

904
00:28:16,656 --> 0:28:18,166
and otherwise, it will use the

905
00:28:18,166 --> 0:28:19,526
old-style just centering.

906
00:28:19,726 --> 0:28:22,816
And in this case, Paolo

907
00:28:22,816 --> 0:28:24,966
specified baseline alignment,

908
00:28:24,966 --> 0:28:26,256
because the second line -- the

909
00:28:26,256 --> 0:28:27,526
second item has two lines.

910
00:28:27,576 --> 0:28:28,396
So we'd need to use the

911
00:28:28,396 --> 0:28:28,966
baseline.

912
00:28:29,516 --> 0:28:30,736
Then we can fall back to

913
00:28:30,736 --> 0:28:32,116
baseline alignment, but that's

914
00:28:32,116 --> 0:28:33,036
also very easy.

915
00:28:33,556 --> 0:28:35,876
And this spec also properly

916
00:28:35,876 --> 0:28:38,726
specifies horizontal alignment

917
00:28:38,766 --> 0:28:39,506
of the images.

918
00:28:40,646 --> 0:28:42,176
It makes the spec a lot easier

919
00:28:42,176 --> 0:28:43,206
to read.

920
00:28:44,576 --> 0:28:46,826
Now, let's go back to buttons.

921
00:28:47,836 --> 0:28:48,686
Buttons -- there's a lot of

922
00:28:48,686 --> 0:28:49,436
buttons in UIKit.

923
00:28:50,566 --> 0:28:51,776
We have two types of buttons,

924
00:28:52,156 --> 0:28:53,786
system buttons and regular

925
00:28:53,786 --> 0:28:54,066
buttons.

926
00:28:54,066 --> 0:28:55,066
Let's start with the system

927
00:28:55,066 --> 0:28:55,526
buttons.

928
00:28:58,186 --> 0:28:59,466
First of all, all buttons in

929
00:28:59,466 --> 0:29:01,736
UIKit come with a preset symbol

930
00:28:59,466 --> 0:29:01,736
UIKit come with a preset symbol

931
00:29:01,736 --> 0:29:04,006
configuration, and for system

932
00:29:04,006 --> 0:29:05,736
buttons, it's body large.

933
00:29:06,066 --> 0:29:07,836
That means that it reacts to

934
00:29:07,836 --> 0:29:09,326
dynamic type changes, has a body

935
00:29:09,326 --> 0:29:11,136
text style, and a large scale.

936
00:29:11,136 --> 0:29:13,886
Now, wouldn't it be great if you

937
00:29:13,886 --> 0:29:15,376
could create system buttons,

938
00:29:16,106 --> 0:29:17,556
like the info button in the

939
00:29:17,556 --> 0:29:19,086
available Wi-Fi networks list,

940
00:29:19,766 --> 0:29:21,086
but to create your own system

941
00:29:21,086 --> 0:29:22,366
buttons that looked exactly the

942
00:29:22,366 --> 0:29:23,426
same, with your own symbol

943
00:29:23,426 --> 0:29:23,706
image?

944
00:29:23,706 --> 0:29:25,056
Well, we thought it was a good

945
00:29:25,056 --> 0:29:26,736
idea, and we added some, an

946
00:29:26,736 --> 0:29:28,706
initializer on UIButton that

947
00:29:28,706 --> 0:29:29,856
allows you to create a system

948
00:29:29,856 --> 0:29:31,586
button with any symbol image.

949
00:29:31,826 --> 0:29:35,606
And it will behave like an --

950
00:29:35,676 --> 0:29:36,676
like a regular symbol image.

951
00:29:37,516 --> 0:29:41,466
[ Applause ]

952
00:29:41,966 --> 0:29:43,676
Now, let's go to regular

953
00:29:43,676 --> 0:29:44,106
buttons.

954
00:29:44,256 --> 0:29:45,956
In this case, I have a pop-over,

955
00:29:45,956 --> 0:29:49,796
and they're used as actions in

956
00:29:49,796 --> 0:29:50,596
this view.

957
00:29:50,906 --> 0:29:53,216
And symbols really shine here.

958
00:29:53,216 --> 0:29:54,616
They're really in their place.

959
00:29:55,886 --> 0:29:57,296
A regular button comes with a

960
00:29:57,296 --> 0:29:59,476
medium-scale preset.

961
00:30:00,796 --> 0:30:02,586
Now, having said -- talking

962
00:30:02,586 --> 0:30:03,996
about these preset scales, what

963
00:30:03,996 --> 0:30:05,026
if you want to change them?

964
00:30:05,026 --> 0:30:06,636
Well, there's similar API on

965
00:30:06,636 --> 0:30:08,716
UIButton, as on UIImageView,

966
00:30:08,716 --> 0:30:08,926
called

967
00:30:09,016 --> 0:30:10,986
PreferredSymbolConfiguration

968
00:30:11,036 --> 0:30:11,546
forState.

969
00:30:12,176 --> 0:30:13,596
That works exactly like the

970
00:30:13,596 --> 0:30:14,986
other content accessors on

971
00:30:14,986 --> 0:30:15,516
UIButton.

972
00:30:15,516 --> 0:30:17,176
You can set a configuration for

973
00:30:17,176 --> 0:30:18,016
certain states.

974
00:30:18,436 --> 0:30:19,586
And it gives you maximum

975
00:30:19,586 --> 0:30:21,536
flexibility because you can set

976
00:30:21,536 --> 0:30:22,366
an image, you can set a

977
00:30:22,366 --> 0:30:23,526
configuration, or you can set

978
00:30:23,526 --> 0:30:24,866
both, and it will work

979
00:30:24,926 --> 0:30:25,376
perfectly.

980
00:30:26,466 --> 0:30:27,916
Another button example is this

981
00:30:27,916 --> 0:30:28,146
one.

982
00:30:28,676 --> 0:30:30,636
It kind of shows what we mean

983
00:30:30,636 --> 0:30:32,696
with symbols and text really

984
00:30:32,696 --> 0:30:34,266
shine together, but it doesn't

985
00:30:34,266 --> 0:30:35,476
mean that they're always close

986
00:30:35,516 --> 0:30:35,876
together.

987
00:30:36,046 --> 0:30:37,546
These two buttons really belong

988
00:30:37,546 --> 0:30:39,406
together, and they're configured

989
00:30:39,406 --> 0:30:41,756
in the same way, both the left

990
00:30:41,756 --> 0:30:42,896
button and the right button.

991
00:30:43,406 --> 0:30:44,206
The preferred symbol

992
00:30:44,206 --> 0:30:45,816
configuration is matched with

993
00:30:45,816 --> 0:30:47,296
the font of that right button,

994
00:30:47,296 --> 0:30:48,416
and the only difference between

995
00:30:48,416 --> 0:30:50,416
the two is that the left one has

996
00:30:50,416 --> 0:30:52,196
a symbol, and the right one has

997
00:30:52,196 --> 0:30:52,816
a piece of text.

998
00:30:53,776 --> 0:30:54,866
And you can see that they share

999
00:30:54,866 --> 0:30:57,496
the same baseline, and because

1000
00:30:57,496 --> 0:30:58,686
their configuration is exactly

1001
00:30:58,686 --> 0:31:00,246
the same, they also share the

1002
00:30:58,686 --> 0:31:00,246
the same, they also share the

1003
00:31:00,246 --> 0:31:01,486
same metrics, and it makes

1004
00:31:01,546 --> 0:31:02,556
layout a lot easier.

1005
00:31:06,116 --> 0:31:07,396
And to round off our button

1006
00:31:07,396 --> 0:31:08,716
story -- I mentioned there's a

1007
00:31:08,716 --> 0:31:09,696
lot of buttons in UIKit.

1008
00:31:10,046 --> 0:31:11,576
We'll go to bar buttons.

1009
00:31:12,386 --> 0:31:14,616
We have updated all the artwork

1010
00:31:14,616 --> 0:31:16,046
in UIKit to use symbols.

1011
00:31:16,046 --> 0:31:17,486
It not only applies to bar

1012
00:31:17,486 --> 0:31:20,136
buttons, but everywhere, and bar

1013
00:31:20,346 --> 0:31:22,176
buttons feel right in place with

1014
00:31:22,176 --> 0:31:22,866
the new artwork.

1015
00:31:23,226 --> 0:31:25,906
Now, if you do back-deploy to

1016
00:31:26,506 --> 0:31:27,886
older systems, you have to keep

1017
00:31:27,886 --> 0:31:28,866
in mind that if you create

1018
00:31:28,866 --> 0:31:30,756
custom artwork, on older

1019
00:31:30,756 --> 0:31:32,186
systems, you still get the

1020
00:31:32,186 --> 0:31:34,626
previous, thinner artwork than

1021
00:31:34,906 --> 0:31:36,226
the new, updated artwork.

1022
00:31:36,226 --> 0:31:37,586
So keep that in mind if you

1023
00:31:37,586 --> 0:31:40,176
create assets for your

1024
00:31:40,296 --> 0:31:40,986
back-deployment.

1025
00:31:42,616 --> 0:31:45,806
You can use symbols in bar

1026
00:31:46,356 --> 0:31:47,316
buttons with images.

1027
00:31:47,426 --> 0:31:48,866
We have existing API for this,

1028
00:31:49,306 --> 0:31:51,046
and you just put a symbol in

1029
00:31:51,046 --> 0:31:51,256
there.

1030
00:31:51,256 --> 0:31:52,556
And it will feel right in place

1031
00:31:52,596 --> 0:31:53,926
with the system buttons.

1032
00:31:54,046 --> 0:31:54,936
You don't have to do anything

1033
00:31:54,936 --> 0:31:55,176
here.

1034
00:31:56,086 --> 0:31:59,776
That's all you have to do.

1035
00:31:59,776 --> 0:32:01,156
And again, like regular buttons,

1036
00:31:59,776 --> 0:32:01,156
And again, like regular buttons,

1037
00:32:01,156 --> 0:32:03,036
bar buttons come with the preset

1038
00:32:03,076 --> 0:32:03,806
configuration.

1039
00:32:04,446 --> 0:32:05,996
And in any non-compact size

1040
00:32:05,996 --> 0:32:07,786
class, like in portrait mode on

1041
00:32:07,786 --> 0:32:10,276
your phone, the configuration

1042
00:32:10,276 --> 0:32:11,026
will be large.

1043
00:32:11,736 --> 0:32:15,096
If you then rotate your phone,

1044
00:32:15,096 --> 0:32:16,576
and end up in a compact size

1045
00:32:16,636 --> 0:32:17,656
class, we will change that

1046
00:32:17,656 --> 0:32:19,126
configuration on the button to

1047
00:32:19,126 --> 0:32:19,766
be medium.

1048
00:32:20,236 --> 0:32:21,456
And this will call the symbol to

1049
00:32:21,816 --> 0:32:23,836
slightly be smaller, and to fit

1050
00:32:23,836 --> 0:32:25,256
perfectly in the more compact

1051
00:32:25,296 --> 0:32:25,696
bars.

1052
00:32:26,506 --> 0:32:27,696
It also means that you don't

1053
00:32:27,696 --> 0:32:29,016
have to provide a secondary

1054
00:32:29,016 --> 0:32:30,856
image anymore, because the

1055
00:32:30,856 --> 0:32:31,736
system does all the work.

1056
00:32:31,736 --> 0:32:34,076
It will scale using the built-in

1057
00:32:34,116 --> 0:32:34,736
symbol scales.

1058
00:32:35,516 --> 0:32:39,596
[ Applause ]

1059
00:32:40,096 --> 0:32:41,906
And on the iPad, we're -- we

1060
00:32:41,906 --> 0:32:43,766
always have a large, because of

1061
00:32:43,766 --> 0:32:45,046
the things I mentioned before.

1062
00:32:45,626 --> 0:32:49,376
Now, another thing about symbols

1063
00:32:49,546 --> 0:32:51,086
is rendering modes.

1064
00:32:51,816 --> 0:32:53,156
Any regular image has, like,

1065
00:32:54,186 --> 0:32:56,356
color data built into it, but

1066
00:32:56,356 --> 0:32:57,586
for a symbol, it's different.

1067
00:32:57,586 --> 0:32:58,766
It has an intrinsic mode.

1068
00:32:59,236 --> 0:33:00,066
It doesn't have an intrinsic

1069
00:32:59,236 --> 0:33:00,066
It doesn't have an intrinsic

1070
00:33:00,066 --> 0:33:00,326
color.

1071
00:33:00,326 --> 0:33:02,096
So we use the tint color to

1072
00:33:02,096 --> 0:33:06,146
render the symbol, and if we

1073
00:33:06,146 --> 0:33:07,206
don't have a tint color, we'll

1074
00:33:07,206 --> 0:33:07,716
use black.

1075
00:33:08,026 --> 0:33:09,056
But don't rely on that black,

1076
00:33:09,056 --> 0:33:10,416
because it don't want -- work

1077
00:33:10,496 --> 0:33:12,646
nice with dark mode, and it

1078
00:33:12,706 --> 0:33:14,136
might be subject to change.

1079
00:33:14,666 --> 0:33:16,896
How does this work?

1080
00:33:17,696 --> 0:33:20,186
The rendering mode on any image

1081
00:33:20,186 --> 0:33:22,656
is automatic, and up until now,

1082
00:33:22,856 --> 0:33:23,866
for any image, that would

1083
00:33:24,046 --> 0:33:25,486
usually resolve to always

1084
00:33:25,486 --> 0:33:25,946
original.

1085
00:33:26,526 --> 0:33:30,826
Now, in -- with symbols, that

1086
00:33:30,826 --> 0:33:31,216
changes.

1087
00:33:31,726 --> 0:33:33,346
Non-symbol images still usually

1088
00:33:33,346 --> 0:33:35,176
resolve to always original, but

1089
00:33:35,176 --> 0:33:36,986
symbol images will resolve to

1090
00:33:36,986 --> 0:33:37,746
always template.

1091
00:33:37,906 --> 0:33:39,166
And that means that we'll use

1092
00:33:39,166 --> 0:33:40,976
the tint color to give them a

1093
00:33:41,016 --> 0:33:43,106
color, and that's all there is

1094
00:33:43,146 --> 0:33:43,356
to it.

1095
00:33:43,936 --> 0:33:44,856
You can change the rendering

1096
00:33:44,856 --> 0:33:46,816
mode on an image with the

1097
00:33:46,816 --> 0:33:47,686
existing API.

1098
00:33:48,756 --> 0:33:50,206
Now, I've covered the basic

1099
00:33:50,206 --> 0:33:52,086
UIKit controls, but sometimes,

1100
00:33:52,086 --> 0:33:53,716
you do want to draw an image in

1101
00:33:53,716 --> 0:33:54,596
a graphic context.

1102
00:33:55,136 --> 0:33:56,476
And you would probably use

1103
00:33:56,766 --> 0:33:57,316
draw(in Rect.

1104
00:33:58,716 --> 0:34:00,446
Now, for symbols, like I

1105
00:33:58,716 --> 0:34:00,446
Now, for symbols, like I

1106
00:34:00,446 --> 0:34:01,696
mentioned before, that's

1107
00:34:01,696 --> 0:34:02,706
probably not a good idea,

1108
00:34:02,706 --> 0:34:03,666
because they want to be their

1109
00:34:03,666 --> 0:34:04,406
natural size.

1110
00:34:04,486 --> 0:34:05,866
So it's better to use draw(at

1111
00:34:06,356 --> 0:34:08,045
and have the image decide how

1112
00:34:08,045 --> 0:34:09,005
large it wants to be.

1113
00:34:10,186 --> 0:34:11,016
But we have a problem.

1114
00:34:11,016 --> 0:34:12,335
We have this image, but it's too

1115
00:34:12,335 --> 0:34:12,726
small.

1116
00:34:13,775 --> 0:34:15,516
By default, images come with an

1117
00:34:15,556 --> 0:34:16,946
unspecified configuration.

1118
00:34:16,946 --> 0:34:18,896
Nothing is specified, and if

1119
00:34:18,896 --> 0:34:20,166
we're just -- if you have to

1120
00:34:20,166 --> 0:34:21,696
render it, and we don't find a

1121
00:34:21,696 --> 0:34:23,496
specific value, we'll fall back

1122
00:34:23,496 --> 0:34:24,636
to the system defaults.

1123
00:34:24,766 --> 0:34:26,356
And in this case, that ends up

1124
00:34:26,436 --> 0:34:27,726
with a pretty small image.

1125
00:34:28,306 --> 0:34:31,646
Now, I can create a

1126
00:34:31,646 --> 0:34:32,956
configuration to make it larger

1127
00:34:33,505 --> 0:34:36,266
-- 34 points, and a bold weight,

1128
00:34:36,505 --> 0:34:37,786
and then use new API

1129
00:34:38,416 --> 0:34:40,326
withConfiguration to apply that

1130
00:34:40,386 --> 0:34:41,755
configuration to the image, and

1131
00:34:42,416 --> 0:34:43,746
get a new image with that

1132
00:34:43,746 --> 0:34:44,916
configuration built in.

1133
00:34:45,565 --> 0:34:46,996
Which results in this larger,

1134
00:34:47,156 --> 0:34:48,906
slightly more bold teacup, which

1135
00:34:48,906 --> 0:34:49,976
is exactly what I wanted.

1136
00:34:54,476 --> 0:34:56,436
Going back to our pop-over,

1137
00:34:57,005 --> 0:34:59,856
Paolo also asked me to change

1138
00:35:00,296 --> 0:35:01,676
the text here, because symbols

1139
00:35:02,036 --> 0:35:02,896
feel at home in text.

1140
00:35:03,586 --> 0:35:05,636
Can we replace some words with

1141
00:35:05,756 --> 0:35:06,216
symbols?

1142
00:35:07,056 --> 0:35:10,036
Well, we can, but symbols are

1143
00:35:10,036 --> 0:35:11,926
typographic in nature, but they

1144
00:35:11,926 --> 0:35:12,756
are still images.

1145
00:35:12,806 --> 0:35:14,236
So we have to use an attributed

1146
00:35:14,236 --> 0:35:16,756
string with an NSTextAttachment.

1147
00:35:18,196 --> 0:35:19,206
Now, this code will look

1148
00:35:19,206 --> 0:35:20,856
familiar, but we have a new

1149
00:35:20,996 --> 0:35:22,506
piece of API,

1150
00:35:22,506 --> 0:35:24,426
NSTextAttachment(image that will

1151
00:35:24,426 --> 0:35:25,956
create a text attachment with

1152
00:35:25,956 --> 0:35:27,136
the image attached.

1153
00:35:28,306 --> 0:35:31,036
Now, this text attachment is a

1154
00:35:31,036 --> 0:35:32,206
bit smarter than the regular

1155
00:35:32,206 --> 0:35:32,416
one.

1156
00:35:32,996 --> 0:35:35,656
It knows about symbols, and it

1157
00:35:35,656 --> 0:35:37,316
will actually inspect the string

1158
00:35:37,316 --> 0:35:40,116
around the symbol to complete

1159
00:35:40,116 --> 0:35:41,686
the configuration of that symbol

1160
00:35:42,396 --> 0:35:43,286
as much as it can.

1161
00:35:43,286 --> 0:35:44,566
It will look at the font size.

1162
00:35:44,566 --> 0:35:45,696
It will look at the font weight,

1163
00:35:45,696 --> 0:35:46,626
but it will also look at the

1164
00:35:46,656 --> 0:35:48,546
color, and then the completed

1165
00:35:48,546 --> 0:35:49,446
image will be drawn.

1166
00:35:53,516 --> 0:35:57,176
[ Applause ]

1167
00:35:57,676 --> 0:36:00,036
The old API, or the existing API

1168
00:35:57,676 --> 0:36:00,036
The old API, or the existing API

1169
00:36:00,426 --> 0:36:01,646
creating a text attachment and

1170
00:36:01,646 --> 0:36:02,606
then assigning the image still

1171
00:36:02,606 --> 0:36:03,576
works, but it won't get the

1172
00:36:03,576 --> 0:36:04,326
matching behavior.

1173
00:36:04,886 --> 0:36:06,326
And of course, you can also use

1174
00:36:06,326 --> 0:36:07,636
this new API with any regular

1175
00:36:07,636 --> 0:36:08,016
image.

1176
00:36:09,396 --> 0:36:11,296
Paolo also wanted some color

1177
00:36:11,296 --> 0:36:11,526
here.

1178
00:36:12,666 --> 0:36:13,816
Looks better.

1179
00:36:16,176 --> 0:36:18,926
Yeah. And we created some new

1180
00:36:18,926 --> 0:36:19,526
API to do this.

1181
00:36:20,686 --> 0:36:22,216
You can tint an image now.

1182
00:36:22,836 --> 0:36:25,246
So withTintColor applies a color

1183
00:36:25,246 --> 0:36:26,906
to the image, and it does so

1184
00:36:26,906 --> 0:36:27,846
very efficiently.

1185
00:36:28,116 --> 0:36:30,066
It will only render the color

1186
00:36:30,126 --> 0:36:31,526
when it needs to, and then it

1187
00:36:31,526 --> 0:36:32,696
will look at the most efficient

1188
00:36:32,696 --> 0:36:33,526
way to do this.

1189
00:36:34,386 --> 0:36:35,386
And before, you would probably

1190
00:36:35,386 --> 0:36:37,066
have to rasterize an image, and

1191
00:36:37,066 --> 0:36:38,446
render into a graphics context,

1192
00:36:38,446 --> 0:36:39,436
and then apply a color.

1193
00:36:39,766 --> 0:36:40,436
You don't have to do that

1194
00:36:40,436 --> 0:36:40,796
anymore.

1195
00:36:41,296 --> 0:36:43,276
This takes care of this.

1196
00:36:44,516 --> 0:36:48,546
[ Applause ]

1197
00:36:49,046 --> 0:36:50,376
And it's especially important

1198
00:36:50,376 --> 0:36:51,496
for symbols, because they don't

1199
00:36:51,496 --> 0:36:52,766
have an intrinsic color, and

1200
00:36:52,766 --> 0:36:53,706
this will give them a color.

1201
00:36:54,196 --> 0:36:55,496
Now, symbols also have a

1202
00:36:55,496 --> 0:36:56,376
different rendering mode.

1203
00:36:56,376 --> 0:36:57,666
So if you really want that color

1204
00:36:57,726 --> 0:36:59,726
to pop out, you have to change

1205
00:36:59,726 --> 0:37:00,656
the rendering mode, and you can

1206
00:36:59,726 --> 0:37:00,656
the rendering mode, and you can

1207
00:37:00,656 --> 0:37:01,926
do it in one go with this

1208
00:37:01,976 --> 0:37:02,946
optional parameter.

1209
00:37:03,586 --> 0:37:07,556
Now, these two APIs are not in

1210
00:37:07,556 --> 0:37:09,096
the first beta, but they will

1211
00:37:09,096 --> 0:37:09,506
come soon.

1212
00:37:13,226 --> 0:37:16,076
So we've seen a lot of API, and

1213
00:37:16,786 --> 0:37:18,356
we think we provided you with a

1214
00:37:18,356 --> 0:37:20,216
great tool set to make your apps

1215
00:37:20,506 --> 0:37:22,206
really shine in iOS 13.

1216
00:37:22,726 --> 0:37:25,076
But there's a few tips.

1217
00:37:25,736 --> 0:37:28,416
Prefer horizontal and vertical

1218
00:37:28,466 --> 0:37:30,106
centering over edge alignment.

1219
00:37:30,786 --> 0:37:31,926
It's a bit of a mental shift,

1220
00:37:32,176 --> 0:37:33,906
but once you figure it out, it

1221
00:37:33,906 --> 0:37:34,606
really works out.

1222
00:37:36,016 --> 0:37:37,476
And try to build your layouts

1223
00:37:37,476 --> 0:37:40,316
from the smallest element up to

1224
00:37:40,316 --> 0:37:41,126
the largest element.

1225
00:37:41,126 --> 0:37:42,256
It's pretty easy to start with

1226
00:37:42,256 --> 0:37:43,866
something small and then use it

1227
00:37:43,866 --> 0:37:44,786
as a building block to make

1228
00:37:44,826 --> 0:37:45,476
something larger.

1229
00:37:45,556 --> 0:37:47,946
And be flexible.

1230
00:37:48,026 --> 0:37:49,576
Image sizes can change.

1231
00:37:50,396 --> 0:37:52,516
Allow your image views to be the

1232
00:37:52,516 --> 0:37:54,646
size of their image but be aware

1233
00:37:54,646 --> 0:37:55,486
of the fact that they can

1234
00:37:55,486 --> 0:37:55,946
change.

1235
00:37:56,526 --> 0:37:58,686
It can be at run time, or it can

1236
00:37:58,686 --> 0:38:01,606
be over app launches, or even

1237
00:37:58,686 --> 0:38:01,606
be over app launches, or even

1238
00:38:01,606 --> 0:38:02,966
over system updates.

1239
00:38:05,116 --> 0:38:06,946
Caching images usually doesn't

1240
00:38:06,946 --> 0:38:07,156
help.

1241
00:38:08,436 --> 0:38:09,816
It's a great source of bugs, and

1242
00:38:09,816 --> 0:38:11,306
the system already does its best

1243
00:38:11,356 --> 0:38:13,006
to provide the best performance

1244
00:38:13,166 --> 0:38:13,936
that it can.

1245
00:38:14,016 --> 0:38:16,186
And caching really gives you an

1246
00:38:16,186 --> 0:38:17,736
override, so there's no need to

1247
00:38:17,736 --> 0:38:18,086
do that.

1248
00:38:19,756 --> 0:38:22,026
And finally, rasterizing is, in

1249
00:38:22,026 --> 0:38:25,886
most cases, the worst solution,

1250
00:38:25,886 --> 0:38:27,586
or the least-optimal solution to

1251
00:38:27,586 --> 0:38:28,366
fix the problem.

1252
00:38:28,426 --> 0:38:32,386
So save your CPU cycles for

1253
00:38:32,386 --> 0:38:34,616
something useful, and let the

1254
00:38:34,616 --> 0:38:36,496
system rasterize an image.

1255
00:38:36,816 --> 0:38:38,316
So try to avoid rasterizing

1256
00:38:38,316 --> 0:38:40,486
images, especially symbol

1257
00:38:40,486 --> 0:38:40,946
images.

1258
00:38:43,556 --> 0:38:45,096
The accessibility and

1259
00:38:45,096 --> 0:38:46,206
localization sessions this

1260
00:38:46,206 --> 0:38:47,896
morning were -- are very

1261
00:38:48,066 --> 0:38:49,146
interesting to check out,

1262
00:38:49,146 --> 0:38:51,046
because symbols make adaptation

1263
00:38:51,046 --> 0:38:52,636
in those areas a lot simpler.

1264
00:38:52,636 --> 0:38:55,026
And there's the Implementing

1265
00:38:55,026 --> 0:38:56,376
Dark Mode tomorrow, where

1266
00:38:56,376 --> 0:38:57,576
symbols also really shine

1267
00:38:57,616 --> 0:39:00,576
because of dark tint color.

1268
00:38:57,616 --> 0:39:00,576
because of dark tint color.

1269
00:39:01,676 --> 0:39:04,886
There are two labs you might be

1270
00:39:04,886 --> 0:39:05,486
interested in.

1271
00:39:05,486 --> 0:39:07,766
There's a text and SF symbols

1272
00:39:07,766 --> 0:39:09,796
lab, and fonts lab on Thursday,

1273
00:39:10,136 --> 0:39:11,446
and there's a design lab on

1274
00:39:11,446 --> 0:39:12,306
Friday afternoon.

1275
00:39:12,826 --> 0:39:15,256
And of course, you're welcome at

1276
00:39:15,256 --> 0:39:16,306
any of the UIKit labs.

1277
00:39:17,126 --> 0:39:18,266
Thank you so much for listening

1278
00:39:18,266 --> 0:39:19,576
and enjoy the rest of your WWDC.

1279
00:39:20,516 --> 0:39:26,500
[ Applause ]
