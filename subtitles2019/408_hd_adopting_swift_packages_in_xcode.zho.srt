1
00:00:01,176 --> 0:00:04,500
[音乐]

2
00:00:07,516 --> 0:00:13,686
[掌声]

3
00:00:14,186 --> 0:00:14,836
&gt;&gt; 下午好

4
00:00:15,616 --> 0:00:17,356
我叫 Anders 我在 Xcode 工作

5
00:00:18,376 --> 0:00:19,696
在这次会议中

6
00:00:19,696 --> 0:00:20,806
我和我的同事 Balraj

7
00:00:20,806 --> 0:00:22,246
将谈一谈如何从 Xcode 项目

8
00:00:22,316 --> 0:00:23,946
使用 Swift 包

9
00:00:26,106 --> 0:00:27,526
Swift 包管理器

10
00:00:27,576 --> 0:00:29,396
是 Open Source Swift 工具链的一部分

11
00:00:29,656 --> 0:00:31,536
它在 Swift 3 中被引入

12
00:00:32,296 --> 0:00:34,286
之后 有很多 Swift 包

13
00:00:34,336 --> 0:00:35,486
被创建出来

14
00:00:36,686 --> 0:00:38,506
同时 也有很多

15
00:00:38,506 --> 0:00:40,216
Open Source 函数库

16
00:00:40,216 --> 0:00:41,736
被写入其他包管理器

17
00:00:41,736 --> 0:00:43,956
被改编得与 Swift 包管理器相兼容

18
00:00:44,426 --> 0:00:48,126
Swift 包让你可以

19
00:00:48,126 --> 0:00:49,546
管理你依赖的版本

20
00:00:49,546 --> 0:00:51,496
保证你依赖的包更新时

21
00:00:51,496 --> 0:00:53,176
你在不需要

22
00:00:53,176 --> 0:00:54,596
将代码受制于

23
00:00:54,596 --> 0:00:56,116
源分解改变的情况下

24
00:00:56,116 --> 0:00:57,706
修复 Bug

25
00:00:59,066 --> 0:01:00,466
Swift 包对于你自己来说也是一个很好的方法

26
00:00:59,066 --> 0:01:00,466
Swift 包对于你自己来说也是一个很好的方法

27
00:01:00,466 --> 0:01:03,736
可以在你自己的 App 中分享代码

28
00:01:04,105 --> 0:01:05,146
不管是在一个小团队内

29
00:01:05,146 --> 0:01:07,556
一个大组织内

30
00:01:07,556 --> 0:01:10,486
或者在你自己开发的 App 间

31
00:01:12,966 --> 0:01:15,736
现在在 Xcode 11 中

32
00:01:15,736 --> 0:01:17,356
你可以直接从 Xcode 项目

33
00:01:17,356 --> 0:01:18,456
获取访问 Swift 包的权限

34
00:01:20,516 --> 0:01:22,666
[掌声]

35
00:01:23,166 --> 0:01:27,336
我们也很激动 在这次会议中

36
00:01:27,336 --> 0:01:28,816
我们将首先谈谈

37
00:01:28,816 --> 0:01:30,336
如何使用一个包

38
00:01:30,336 --> 0:01:31,846
以及如何通过使用一个包

39
00:01:31,846 --> 0:01:32,376
扩展 App 的功能

40
00:01:32,806 --> 0:01:34,066
然后我们将谈一点

41
00:01:34,066 --> 0:01:35,486
关于包中到底有什么

42
00:01:35,486 --> 0:01:37,016
它们如何构建

43
00:01:37,016 --> 0:01:38,636
数据储存中有什么

44
00:01:38,636 --> 0:01:39,756
在文档形式的包中

45
00:01:40,846 --> 0:01:41,856
当我们谈论包解析时

46
00:01:41,856 --> 0:01:43,846
就是关于 Xcode 如何

47
00:01:43,846 --> 0:01:45,296
取得包的正确版本

48
00:01:45,296 --> 0:01:46,626
并将其嵌入你的 App 中

49
00:01:46,666 --> 0:01:48,396
然后我们将谈一点

50
00:01:48,396 --> 0:01:49,586
关于如何更新包的事情

51
00:01:49,586 --> 0:01:50,806
当包的一个更新版发布时

52
00:01:50,806 --> 0:01:52,146
会发生什么

53
00:01:52,146 --> 0:01:53,656
你又该如何

54
00:01:53,656 --> 0:01:55,706
利用这一点

55
00:01:55,706 --> 0:01:57,176
我们还将谈论

56
00:01:57,176 --> 0:01:59,376
解决在你更新包时

57
00:01:59,376 --> 0:02:01,446
可能发生的

58
00:01:59,376 --> 0:02:01,446
可能发生的

59
00:02:01,446 --> 0:02:02,036
任何版本的冲突

60
00:02:03,396 --> 0:02:04,796
所以让我们

61
00:02:04,796 --> 0:02:06,786
从扩展 NAP 功能

62
00:02:06,786 --> 0:02:07,976
来利用包开始

63
00:02:18,126 --> 0:02:19,226
在这里 我们有一个小的 iPhone App

64
00:02:19,226 --> 0:02:22,486
简单地展示了

65
00:02:22,486 --> 0:02:24,146
在我工作的附近的

66
00:02:24,146 --> 0:02:27,046
咖啡厅的午餐菜单

67
00:02:27,046 --> 0:02:29,346
我们看到这里有两个入口

68
00:02:29,346 --> 0:02:30,906
这是一个 SwiftUI App

69
00:02:30,906 --> 0:02:32,196
我不需要运行我的 App

70
00:02:32,196 --> 0:02:33,826
就可以看到预览和 Xcode

71
00:02:35,676 --> 0:02:37,196
所以我们可以看到

72
00:02:37,256 --> 0:02:39,856
两个不同地方的午餐菜单出现了

73
00:02:39,966 --> 0:02:41,576
在这个 App 真实的版本中

74
00:02:41,686 --> 0:02:43,256
我们可以在网络上提取这个数据

75
00:02:44,056 --> 0:02:45,616
但是在这个演示 App 上

76
00:02:45,616 --> 0:02:48,136
我只是在我的源中将其作为本地文件

77
00:02:48,176 --> 0:02:50,456
所以你也可以说这个菜单是本地采购的

78
00:02:51,286 --> 0:02:53,286
[笑声]

79
00:02:53,556 --> 0:02:55,996
所以这两个 JSON 文件

80
00:02:55,996 --> 0:02:57,226
出现得很好

81
00:02:57,326 --> 0:02:59,596
但是这里的这个咖啡馆

82
00:02:59,596 --> 0:03:00,856
更加现代和高档

83
00:02:59,596 --> 0:03:00,856
更加现代和高档

84
00:03:00,856 --> 0:03:02,376
所以他们有一个 YAML 菜单 对吗

85
00:03:02,376 --> 0:03:04,346
我们不能解析它

86
00:03:04,346 --> 0:03:05,246
我们不再看这个了

87
00:03:05,756 --> 0:03:08,616
我们来看一看加载这个数据的源代码

88
00:03:09,246 --> 0:03:10,636
我们看到在这里我们处理 JSON

89
00:03:10,636 --> 0:03:11,926
但是不处理 YAML

90
00:03:12,146 --> 0:03:14,126
幸运的是 

91
00:03:14,126 --> 0:03:16,326
我知道一个函数库可以很好地解析 YAML

92
00:03:16,506 --> 0:03:18,066
它也有一个很好的 Swift 界面

93
00:03:18,316 --> 0:03:20,126
被称为 Yams

94
00:03:20,126 --> 0:03:21,456
我将使用它

95
00:03:22,666 --> 0:03:24,786
为了使用它我下拉了文件菜单

96
00:03:25,056 --> 0:03:27,286
我来到这个新的 Swift 包子菜单

97
00:03:27,286 --> 0:03:30,366
添加包依赖

98
00:03:30,366 --> 0:03:31,606
现在这个子菜单

99
00:03:31,606 --> 0:03:33,226
有很多其他菜单命令

100
00:03:33,226 --> 0:03:34,836
一旦包出现在你的 App 中 它们就可以处理

101
00:03:35,736 --> 0:03:37,696
但是你说到包依赖

102
00:03:38,246 --> 0:03:40,226
在这里 我看到

103
00:03:40,276 --> 0:03:42,006
因为我为 Xcode 的偏好

104
00:03:42,006 --> 0:03:44,136
添加了我的 GitHub 账号到 Swift

105
00:03:44,136 --> 0:03:45,406
我在那个账户中

106
00:03:45,406 --> 0:03:47,146
看到了所有的包仓储

107
00:03:47,546 --> 0:03:48,676
我还可以看到其他

108
00:03:48,676 --> 0:03:50,006
我标星的仓储

109
00:03:51,086 --> 0:03:52,566
在这个例子中 我将 Yams 标星

110
00:03:53,246 --> 0:03:55,376
但是我还可以

111
00:03:55,376 --> 0:03:57,286
如果有针对一个包的 URL 我可以将其输入这里

112
00:03:58,506 --> 0:04:00,146
在这个例子中 我将

113
00:03:58,506 --> 0:04:00,146
在这个例子中 我将

114
00:04:00,146 --> 0:04:01,696
点击说明链接

115
00:04:01,736 --> 0:04:04,056
然后来到 Yams 项目的主页

116
00:04:04,056 --> 0:04:07,826
这个看起来不错 我将看一眼 API

117
00:04:07,826 --> 0:04:10,606
这看起来是我需要的

118
00:04:11,126 --> 0:04:11,956
现在 当然了

119
00:04:11,956 --> 0:04:13,626
当你使用一个 Open Source 函数库时

120
00:04:13,626 --> 0:04:14,716
你将把其他人的代码

121
00:04:14,716 --> 0:04:15,656
代入你的 App

122
00:04:15,736 --> 0:04:17,586
所以有很多你需要仔细处理的事情

123
00:04:17,586 --> 0:04:18,636
你要保证你信任

124
00:04:18,676 --> 0:04:19,815
那个包的源

125
00:04:20,546 --> 0:04:21,536
你想要保证

126
00:04:21,536 --> 0:04:22,686
你明确知道函数库在做什么

127
00:04:22,686 --> 0:04:24,526
所以你不会有任何惊讶

128
00:04:24,966 --> 0:04:26,206
你还想要保证

129
00:04:26,206 --> 0:04:27,966
这个 Open Source 函数库的许可证

130
00:04:27,966 --> 0:04:30,126
与你的 App 的许可证是兼容的

131
00:04:31,226 --> 0:04:32,516
这些我都完成了

132
00:04:32,566 --> 0:04:34,086
我将要回到 Xcode

133
00:04:34,086 --> 0:04:36,016
在这里我将要点击下一步

134
00:04:36,016 --> 0:04:37,126
我们将添加一个引用

135
00:04:37,126 --> 0:04:38,956
一个在 Yams 上的依赖

136
00:04:40,396 --> 0:04:42,796
现在 Xcode 向我展示了可用的版本

137
00:04:42,926 --> 0:04:44,486
它自动将我设定为

138
00:04:44,556 --> 0:04:46,966
使用包的最新版本

139
00:04:46,966 --> 0:04:49,206
在之后我们将更多地谈到

140
00:04:49,206 --> 0:04:50,766
关于这个选项的细节

141
00:04:51,566 --> 0:04:52,856
但是通常来说

142
00:04:52,856 --> 0:04:54,246
这里的默认选项往往是你想要的那个

143
00:04:54,246 --> 0:04:57,486
它使用了版本 2.0.0

144
00:04:57,486 --> 0:04:59,636
一直到 但是不包括

145
00:04:59,636 --> 0:05:00,586
下一个主要的版本

146
00:04:59,636 --> 0:05:00,586
下一个主要的版本

147
00:05:00,746 --> 0:05:02,746
我将要点击下一步

148
00:05:04,136 --> 0:05:05,156
现在 Xcode 在提取

149
00:05:05,156 --> 0:05:06,956
Yams 包的内容

150
00:05:07,476 --> 0:05:11,466
它为我预选了单一的产品

151
00:05:11,466 --> 0:05:13,116
有些包可能会有超过一个产品

152
00:05:13,116 --> 0:05:14,226
这个例子中就只有一个

153
00:05:14,226 --> 0:05:14,896
这是一个函数库

154
00:05:15,356 --> 0:05:16,556
和包的名字一样

155
00:05:17,136 --> 0:05:18,106
如果在你的项目中

156
00:05:18,106 --> 0:05:19,366
有超过一个的 App

157
00:05:19,366 --> 0:05:20,476
你可以选择你想要超链接的地方

158
00:05:20,476 --> 0:05:21,666
在这个例子中

159
00:05:21,666 --> 0:05:23,186
就只是这个一个 所以我将把它链接至午餐 App

160
00:05:23,766 --> 0:05:25,566
我点击完成

161
00:05:27,026 --> 0:05:28,176
现在我们看到这里有一些东西

162
00:05:28,296 --> 0:05:30,126
在我的项目编辑器中

163
00:05:30,126 --> 0:05:32,526
Xcode 为 Yams 包依赖

164
00:05:32,656 --> 0:05:36,206
添加了对新的 Swift 包标签的引用

165
00:05:37,706 --> 0:05:38,926
我们还可以看到 Yams 包

166
00:05:38,926 --> 0:05:43,576
在 Swift 包依赖部分下方出现

167
00:05:45,356 --> 0:05:47,916
我们不会现在就去看那个包

168
00:05:47,916 --> 0:05:48,986
我们晚一点再来看

169
00:05:48,986 --> 0:05:50,086
我们接下来要做的

170
00:05:50,086 --> 0:05:52,246
就是再次回到食物菜单

171
00:05:52,346 --> 0:05:54,496
现在 我们将要在我们的代码内利用它

172
00:05:54,496 --> 0:05:57,056
所以我将在这里输入 “import Yams”

173
00:05:57,186 --> 0:05:58,306
我们可以看到我们有针对输入名字的

174
00:05:58,306 --> 0:06:00,046
代码完成

175
00:05:58,306 --> 0:06:00,046
代码完成

176
00:06:00,316 --> 0:06:02,356
我还可以按住 Command 键点击

177
00:06:02,356 --> 0:06:04,316
这个输入陈述

178
00:06:04,316 --> 0:06:05,886
我可以跳至定义

179
00:06:05,886 --> 0:06:07,046
这里我们可以看到

180
00:06:07,046 --> 0:06:09,766
对 Yams 项目的界面文档的

181
00:06:09,766 --> 0:06:11,496
渲染版本

182
00:06:12,706 --> 0:06:13,736
所有这些都来自于

183
00:06:13,736 --> 0:06:14,936
包含在包中的

184
00:06:14,936 --> 0:06:16,686
源的文档评论

185
00:06:16,686 --> 0:06:19,306
所以我回到我的代码

186
00:06:19,306 --> 0:06:22,436
我将在这里加入另一个例子

187
00:06:22,646 --> 0:06:25,226
case "yaml"

188
00:06:26,516 --> 0:06:30,956
我将输入 YAMLDecoder

189
00:06:30,956 --> 0:06:33,246
我有对于所有的函数库方法的

190
00:06:33,246 --> 0:06:34,356
代码完成

191
00:06:34,356 --> 0:06:35,696
我还有快速帮助

192
00:06:35,746 --> 0:06:36,716
因为包将其包含在内

193
00:06:36,716 --> 0:06:38,656
根据你得到支撑的质量

194
00:06:38,656 --> 0:06:40,516
这个看上去和感觉上就像是

195
00:06:40,516 --> 0:06:42,466
嵌入 API

196
00:06:42,946 --> 0:06:44,856
我将使用这个方法

197
00:06:45,236 --> 0:06:46,836
我将使用

198
00:06:47,266 --> 0:06:49,036
JSON 例子中相同的最初的参数

199
00:06:49,766 --> 0:06:51,126
现在这个 API 似乎获取了字符串

200
00:06:51,126 --> 0:06:52,256
而不是数据

201
00:06:52,406 --> 0:06:53,486
所以我将使用这个

202
00:06:53,836 --> 0:06:54,786
我不需要第三个参数

203
00:06:54,786 --> 0:06:57,476
因为我将只使用默认数值

204
00:06:58,426 --> 0:07:01,236
所以现在我再次重新回到列表视图

205
00:06:58,426 --> 0:07:01,236
所以现在我再次重新回到列表视图

206
00:07:01,866 --> 0:07:02,936
因为这是一个很大的变化

207
00:07:02,936 --> 0:07:04,406
导入一个新的模块

208
00:07:04,406 --> 0:07:05,846
我将点击继续

209
00:07:05,846 --> 0:07:08,306
Xcode 将在后台重新构建 App

210
00:07:08,306 --> 0:07:10,006
我将在这里看一下预览

211
00:07:10,616 --> 0:07:11,866
现在我们可以发现

212
00:07:11,866 --> 0:07:13,976
我也可以看到在 YAML 数据文件的内容

213
00:07:14,516 --> 0:07:20,056
[掌声]

214
00:07:20,556 --> 0:07:21,666
好的 现在我要把这个

215
00:07:21,696 --> 0:07:22,886
指派到我的仓储

216
00:07:24,356 --> 0:07:26,786
我们可以看到我们期望的东西

217
00:07:26,786 --> 0:07:28,406
我们看到了源变化

218
00:07:28,406 --> 0:07:29,346
让我把它变得更大一点

219
00:07:30,186 --> 0:07:31,356
我们可以看到我做的源变化

220
00:07:31,356 --> 0:07:32,736
当然这也是

221
00:07:32,736 --> 0:07:33,416
指派表单的一部分

222
00:07:33,786 --> 0:07:34,906
我们也看到项目文件改变了

223
00:07:34,906 --> 0:07:35,826
因为我为 Yams 包

224
00:07:35,826 --> 0:07:37,896
添加了引用

225
00:07:38,286 --> 0:07:39,756
我们还在这里看到了另外一件事

226
00:07:39,756 --> 0:07:42,236
那就是 Xcode 创建了一个

227
00:07:42,236 --> 0:07:44,146
名为 SwiftPM 的目录

228
00:07:44,146 --> 0:07:45,376
这是针对 Swift 包管理器的

229
00:07:45,806 --> 0:07:46,926
在共享的数据之下

230
00:07:46,926 --> 0:07:48,146
在工作空间之下

231
00:07:48,146 --> 0:07:49,266
你想要将其记录

232
00:07:49,266 --> 0:07:50,786
因为我们之后

233
00:07:50,786 --> 0:07:52,736
会讨论在这里面究竟有什么

234
00:07:52,866 --> 0:07:54,756
但是 Xcode 存储了

235
00:07:54,756 --> 0:07:56,536
解决的包版本的信息

236
00:07:56,536 --> 0:07:58,156
你还想要检查

237
00:07:58,156 --> 0:07:59,646
这样你团队中的人

238
00:07:59,676 --> 0:08:00,466
就可以得到相同的版本

239
00:07:59,676 --> 0:08:00,466
就可以得到相同的版本

240
00:08:00,996 --> 0:08:05,456
好的 现在我们检查然后输入

241
00:08:05,456 --> 0:08:09,126
Use YAML Menus

242
00:08:10,506 --> 0:08:14,976
好的 现在让我们回到幻灯片

243
00:08:18,686 --> 0:08:20,096
好的 我们已经快速地看了一下

244
00:08:20,096 --> 0:08:21,536
如何从一个项目中

245
00:08:21,536 --> 0:08:22,416
使用一个开源包

246
00:08:22,466 --> 0:08:23,386
我们再仔细看看

247
00:08:23,386 --> 0:08:24,986
YAML 包中有什么

248
00:08:26,206 --> 0:08:30,006
这个包是一个

249
00:08:30,006 --> 0:08:33,076
包含 Swift 包清单的目录

250
00:08:33,515 --> 0:08:35,436
这个清单是一个名为 Package.swift 的

251
00:08:35,436 --> 0:08:37,436
文件 它将那个目录

252
00:08:37,436 --> 0:08:39,366
定义为 Swift 包

253
00:08:39,706 --> 0:08:42,556
它还包含了源

254
00:08:42,556 --> 0:08:43,856
当然了 为了保证这些源能够

255
00:08:43,856 --> 0:08:44,896
继续运行良好

256
00:08:44,896 --> 0:08:45,896
还包含了单元测试

257
00:08:47,366 --> 0:08:48,666
在源之下是针对

258
00:08:48,666 --> 0:08:51,396
包中每个分别的目标的子目录

259
00:08:51,396 --> 0:08:52,406
这些是包中

260
00:08:52,406 --> 0:08:53,896
分别的可构建的成分

261
00:08:55,176 --> 0:08:56,396
相似地 在测试目录之下

262
00:08:56,396 --> 0:08:59,586
还有针对每个测试程序组的子目录

263
00:09:01,496 --> 0:09:02,916
所以 让我们仔细看看

264
00:09:03,036 --> 0:09:04,836
在目标目录之一中有什么

265
00:09:05,486 --> 0:09:07,296
每个目标都可能有

266
00:09:07,406 --> 0:09:11,776
C 语言或者 Swift 的实施

267
00:09:11,776 --> 0:09:13,636
在 YAML 的例子中

268
00:09:13,636 --> 0:09:15,976
还有一个核心的 CYaml 解析

269
00:09:15,976 --> 0:09:16,916
是由 C 语言写成的

270
00:09:17,716 --> 0:09:18,756
它可以包含

271
00:09:18,956 --> 0:09:20,316
Objective-C++ 文件

272
00:09:21,036 --> 0:09:22,256
在分别的目标中

273
00:09:22,256 --> 0:09:24,516
还有一个 Swift 界面

274
00:09:24,516 --> 0:09:25,986
除此之外

275
00:09:25,986 --> 0:09:27,556
它会调用 CYaml 代码

276
00:09:28,416 --> 0:09:30,976
然后这些单元测试被写入在 Swift 中

277
00:09:34,306 --> 0:09:35,636
如果我们看到

278
00:09:35,636 --> 0:09:38,516
Swift 包清单的内容

279
00:09:38,516 --> 0:09:40,796
这里的第一行是

280
00:09:40,796 --> 0:09:43,756
包需要的工具版本的声明

281
00:09:43,756 --> 0:09:45,456
这说明了可以解析这个包的

282
00:09:45,456 --> 0:09:46,726
最低版本

283
00:09:46,726 --> 0:09:47,766
可以清楚显示

284
00:09:48,966 --> 0:09:52,596
包描述 API

285
00:09:52,596 --> 0:09:54,346
是一个由包管理器的包描述函数库

286
00:09:54,346 --> 0:09:56,946
提供的宣告型 API

287
00:09:57,366 --> 0:09:59,296
通过导入它

288
00:09:59,296 --> 0:10:00,746
这个文档剩下的内容

289
00:09:59,296 --> 0:10:00,746
这个文档剩下的内容

290
00:10:00,806 --> 0:10:04,436
可以宣告包的特点

291
00:10:05,806 --> 0:10:07,986
这包含了包的名称

292
00:10:09,426 --> 0:10:10,816
它还包含了

293
00:10:10,816 --> 0:10:12,076
列出了包向客户出售的

294
00:10:12,076 --> 0:10:13,616
产品名单

295
00:10:14,316 --> 0:10:15,936
所以包可以控制

296
00:10:15,986 --> 0:10:17,606
哪个代码的部分

297
00:10:17,606 --> 0:10:18,936
可以直接由客户导入

298
00:10:18,936 --> 0:10:20,096
在这个例子中

299
00:10:20,096 --> 0:10:22,516
有一个函数库的名字和包一样

300
00:10:22,516 --> 0:10:24,456
叫作 Yams

301
00:10:25,166 --> 0:10:26,616
之后我们会谈到

302
00:10:26,616 --> 0:10:27,716
目标部分

303
00:10:27,996 --> 0:10:30,016
它基本上说明

304
00:10:30,016 --> 0:10:32,356
这个函数库

305
00:10:32,356 --> 0:10:34,956
为客户发布了 Yams 目标

306
00:10:36,976 --> 0:10:38,736
目标部分列出了

307
00:10:38,736 --> 0:10:40,856
包中的个别的可构建的部分

308
00:10:41,106 --> 0:10:42,566
正如我们在这里看到的

309
00:10:42,566 --> 0:10:43,726
在源文件夹和目标之间

310
00:10:43,726 --> 0:10:47,486
有一个一一对应的匹配

311
00:10:48,096 --> 0:10:49,396
每个源文件夹

312
00:10:49,396 --> 0:10:50,676
都可以拥有针对有组织的目标的

313
00:10:50,676 --> 0:10:51,916
子文件夹

314
00:10:51,916 --> 0:10:54,316
但是源下的最高等级是

315
00:10:54,596 --> 0:10:55,936
一个包一个文件夹 一个目标一个文件夹

316
00:10:58,146 --> 0:10:59,866
在这个例子中

317
00:10:59,866 --> 0:11:01,786
我们可以看到 CYaml 目标没有依赖的被列出来

318
00:10:59,866 --> 0:11:01,786
我们可以看到 CYaml 目标没有依赖的被列出来

319
00:11:02,226 --> 0:11:04,706
而 Yams 目标则

320
00:11:04,706 --> 0:11:06,626
依赖于 CYaml 目标

321
00:11:06,886 --> 0:11:08,606
这意味着当产品

322
00:11:08,866 --> 0:11:10,466
涉及到 Yams 

323
00:11:10,466 --> 0:11:12,516
它将反过来间接地引进 CYaml

324
00:11:13,306 --> 0:11:15,076
这里有一个针对单元测试的

325
00:11:15,076 --> 0:11:17,146
测试目标

326
00:11:17,496 --> 0:11:19,636
这个代码不会链接给客户

327
00:11:20,036 --> 0:11:21,766
但是有必要确保

328
00:11:21,766 --> 0:11:23,596
你的函数库正常运行

329
00:11:24,316 --> 0:11:26,506
在这个例子中 Yams 包清单

330
00:11:26,876 --> 0:11:28,726
同样也列举了

331
00:11:28,796 --> 0:11:30,106
一些与代码相兼容的

332
00:11:30,106 --> 0:11:31,226
更旧的 Swift 版本

333
00:11:31,766 --> 0:11:33,716
这也有其他你可以

334
00:11:33,716 --> 0:11:34,756
在这个声明性语言中

335
00:11:34,756 --> 0:11:36,476
指定的特点

336
00:11:36,476 --> 0:11:39,326
这些我们之后会谈到

337
00:11:39,926 --> 0:11:42,526
当你构建和运行你的 App 时

338
00:11:42,526 --> 0:11:44,416
这个是如何

339
00:11:44,416 --> 0:11:45,286
链接到你的 App 的呢

340
00:11:45,316 --> 0:11:47,456
你的项目由源文件构成

341
00:11:47,786 --> 0:11:48,786
这个可以是 Swift

342
00:11:48,786 --> 0:11:49,896
也可以是其他语言

343
00:11:50,836 --> 0:11:52,156
你依赖的包

344
00:11:52,156 --> 0:11:53,436
它们也同样是源文件

345
00:11:54,116 --> 0:11:55,776
Xcode 做的就是

346
00:11:55,776 --> 0:11:56,966
拿下所有的这些的源文件

347
00:11:56,966 --> 0:11:59,276
遵守它们

348
00:11:59,456 --> 0:12:00,846
尤其是以

349
00:11:59,456 --> 0:12:00,846
尤其是以

350
00:12:00,846 --> 0:12:02,286
与你项目中的 App 代码

351
00:12:02,286 --> 0:12:05,126
相兼容的方式遵守包代码

352
00:12:05,746 --> 0:12:08,176
所以这个包含体系结构平台等

353
00:12:08,906 --> 0:12:09,936
如果需要的话

354
00:12:09,936 --> 0:12:12,246
它会根据你的 App 的需求

355
00:12:12,306 --> 0:12:13,306
重新编译多次

356
00:12:13,996 --> 0:12:16,356
然后将其链入

357
00:12:16,356 --> 0:12:18,596
然后把所有这些都融合在 App 中

358
00:12:19,716 --> 0:12:21,606
包函数库在默认情况下是静止的

359
00:12:22,036 --> 0:12:23,146
所以所有的代码

360
00:12:23,146 --> 0:12:23,526
都链接在了一起

361
00:12:24,836 --> 0:12:26,696
在你项目中

362
00:12:26,696 --> 0:12:28,756
使用相同包的多种 App

363
00:12:28,756 --> 0:12:30,256
也重复这个过程

364
00:12:30,256 --> 0:12:32,086
如果你有一个 iOS App

365
00:12:32,086 --> 0:12:33,586
和 watchOS App 它们使用

366
00:12:33,586 --> 0:12:34,076
相同的包

367
00:12:34,316 --> 0:12:35,436
Xcode 可能会

368
00:12:35,436 --> 0:12:37,976
根据需要为每个 App 构建代码

369
00:12:41,526 --> 0:12:43,076
现在 我们看到了一个

370
00:12:43,076 --> 0:12:44,766
项目可以依赖于包的例子

371
00:12:45,306 --> 0:12:47,376
我们也看到了这个在

372
00:12:47,506 --> 0:12:51,016
目标编辑器中的包依赖部分展示

373
00:12:51,556 --> 0:12:54,246
但是一个包同样可以依赖于其他包

374
00:12:54,456 --> 0:12:55,616
它也可以通过

375
00:12:55,616 --> 0:12:56,556
包清单完成

376
00:12:57,596 --> 0:12:58,926
所以 Yams 曾经没有的

377
00:12:58,926 --> 0:13:00,506
包清单的一个部分是

378
00:12:58,926 --> 0:13:00,506
包清单的一个部分是

379
00:13:00,506 --> 0:13:02,466
依赖部分

380
00:13:02,466 --> 0:13:03,516
之所以没有是因为

381
00:13:03,516 --> 0:13:05,176
它实际上并不依赖于其他包

382
00:13:05,696 --> 0:13:07,296
但是你有的一些包可能需要

383
00:13:07,416 --> 0:13:08,606
所以包依赖图表

384
00:13:08,606 --> 0:13:10,966
可以包含直接和间接依赖

385
00:13:14,846 --> 0:13:16,356
之前我提到了

386
00:13:16,356 --> 0:13:18,096
你可以用包管理器

387
00:13:18,246 --> 0:13:19,886
来管理你的版本了

388
00:13:20,296 --> 0:13:21,346
这里使用的是

389
00:13:21,346 --> 0:13:22,136
Semantic Versioning

390
00:13:22,136 --> 0:13:23,896
这是一个广泛运用的策略

391
00:13:23,896 --> 0:13:25,576
它将语义指派到

392
00:13:25,626 --> 0:13:26,596
三部分版本的

393
00:13:26,596 --> 0:13:27,976
每一个成分

394
00:13:31,076 --> 0:13:32,426
在这个例子中 比如说

395
00:13:32,486 --> 0:13:35,816
当 API 发生了破坏性的变化时

396
00:13:35,816 --> 0:13:37,796
主要的版本都会增加

397
00:13:38,476 --> 0:13:39,686
所以这是会让

398
00:13:39,686 --> 0:13:41,936
客户进行改变的事情

399
00:13:41,936 --> 0:13:43,466
比如说 如果你重命名一个方法

400
00:13:43,466 --> 0:13:45,806
或者移除一个方法

401
00:13:45,806 --> 0:13:47,046
或者如果一个包

402
00:13:47,046 --> 0:13:49,006
做出了一个语义变化

403
00:13:49,006 --> 0:13:52,016
让现有的客户必须去适应

404
00:13:53,046 --> 0:13:54,456
这就是为什么

405
00:13:54,456 --> 0:13:56,076
限制的初始版本

406
00:13:56,076 --> 0:13:57,406
一直上到但是却不包括

407
00:13:57,406 --> 0:13:58,846
下一个主要版本的数字

408
00:14:01,346 --> 0:14:02,636
一个包较小版本的数字

409
00:14:02,636 --> 0:14:04,566
在功能不破坏现有客户的

410
00:14:04,616 --> 0:14:07,886
情况下添加时会被增加

411
00:14:08,146 --> 0:14:09,916
比如说 这个可以添加一个方法

412
00:14:12,046 --> 0:14:14,056
最后 补丁版本是

413
00:14:14,056 --> 0:14:15,786
没有语义变化

414
00:14:15,786 --> 0:14:17,026
语言意义变化时

415
00:14:17,116 --> 0:14:18,996
Bug 被修复

416
00:14:19,506 --> 0:14:22,236
包可以很安全地

417
00:14:22,236 --> 0:14:25,856
更新至 Bug 修复

418
00:14:25,856 --> 0:14:27,586
在不改变 App 语义时

419
00:14:27,586 --> 0:14:28,836
将 Bug 修复嵌入

420
00:14:31,446 --> 0:14:33,246
好的 我们已经看了如何使用包

421
00:14:33,296 --> 0:14:35,476
我们也仔细看了那些包

422
00:14:35,476 --> 0:14:36,766
现在我要邀请我的同事

423
00:14:36,766 --> 0:14:38,096
Balraj 来到台上

424
00:14:38,096 --> 0:14:39,976
从细节上讲述一下包解析

425
00:14:40,516 --> 0:14:45,846
[掌声]

426
00:14:46,346 --> 0:14:47,096
&gt;&gt; 谢谢 Anders

427
00:14:47,996 --> 0:14:49,116
包解析是 Xcode

428
00:14:49,116 --> 0:14:51,116
选择在你的工作空间

429
00:14:51,116 --> 0:14:52,126
应该使用哪个版本的包时

430
00:14:52,126 --> 0:14:54,766
经历的过程

431
00:14:55,226 --> 0:14:56,486
我们将更仔细地

432
00:14:56,486 --> 0:14:58,116
看一看它是如何

433
00:14:58,116 --> 0:15:02,616
在早前 Anders 展示的午餐项目中工作的

434
00:14:58,116 --> 0:15:02,616
在早前 Anders 展示的午餐项目中工作的

435
00:15:05,336 --> 0:15:07,286
所以在 Swift 包标签的

436
00:15:07,286 --> 0:15:09,126
项目编辑器中

437
00:15:09,126 --> 0:15:10,966
我们可以看到

438
00:15:11,006 --> 0:15:12,516
我们的午餐项目对 Yams 的依赖

439
00:15:12,816 --> 0:15:15,776
使用版本 Rule 2.0.0 - Next Major

440
00:15:16,306 --> 0:15:18,366
也就是 Yams 从 2 开始往后的版本

441
00:15:18,366 --> 0:15:21,366
但是不包括 3

442
00:15:21,706 --> 0:15:24,436
在项目导航器的

443
00:15:24,436 --> 0:15:25,516
Swift 包依赖部分

444
00:15:25,516 --> 0:15:27,306
我们可以看到

445
00:15:27,306 --> 0:15:29,156
2.0.0 版本的 Yams

446
00:15:30,446 --> 0:15:31,866
我们再仔细看看这个

447
00:15:34,086 --> 0:15:35,886
午餐项目选择 2.0.0 版本的 Yams

448
00:15:35,886 --> 0:15:38,886
因为它的版本要求 2.0.0 直到

449
00:15:38,886 --> 0:15:39,856
下个主要版本

450
00:15:40,886 --> 0:15:43,266
如果版本 2.1.0 存在

451
00:15:43,266 --> 0:15:44,206
Xcode 会选择它

452
00:15:44,206 --> 0:15:46,676
因为 2.1.0 是适合

453
00:15:46,676 --> 0:15:48,876
我们版本要求的最新版本

454
00:15:49,886 --> 0:15:52,316
然而 如果版本 3.0.0 存在

455
00:15:52,316 --> 0:15:53,696
Xcode 不会选择它

456
00:15:53,696 --> 0:15:55,596
因为它不适合

457
00:15:55,596 --> 0:15:57,396
我们指定的限制

458
00:15:58,746 --> 0:16:00,686
在这个例子中

459
00:15:58,746 --> 0:16:00,686
在这个例子中

460
00:16:00,686 --> 0:16:01,876
2.1.0 和 3.0.0 都是假设的案例

461
00:16:02,066 --> 0:16:03,986
在接下来的演示中

462
00:16:03,986 --> 0:16:05,706
你还会看到 Yams 继续

463
00:16:05,706 --> 0:16:06,976
在版本 2.0.0 中解析

464
00:16:08,416 --> 0:16:10,226
在这个例子中

465
00:16:10,226 --> 0:16:11,516
还有一个有一个版本的包

466
00:16:11,566 --> 0:16:12,086
可以用来选择

467
00:16:12,686 --> 0:16:14,136
让我们看些更有意思的例子

468
00:16:14,136 --> 0:16:15,936
在这里 包解析

469
00:16:15,936 --> 0:16:17,976
可以变得更加的复杂

470
00:16:20,396 --> 0:16:22,746
这就是我们今天要讲的午餐 App

471
00:16:23,596 --> 0:16:25,316
它有一个很基本的 UI

472
00:16:25,316 --> 0:16:27,026
正如我们刚刚所说

473
00:16:27,026 --> 0:16:28,146
它只使用一个包

474
00:16:29,596 --> 0:16:31,736
我的团队 全力以赴地

475
00:16:31,736 --> 0:16:33,496
为我们的 App 添加了更多的包

476
00:16:33,496 --> 0:16:35,216
它们用这些包

477
00:16:35,216 --> 0:16:37,036
在我们团队所有的 App 中

478
00:16:37,036 --> 0:16:38,966
展示相同的设计主题

479
00:16:39,046 --> 0:16:41,386
当我们回到午餐 App

480
00:16:41,386 --> 0:16:43,116
在几周之后

481
00:16:43,386 --> 0:16:46,616
我们可以看到

482
00:16:46,616 --> 0:16:47,976
UI 已经更新了

483
00:16:47,976 --> 0:16:49,886
在我们的工作空间内

484
00:16:49,886 --> 0:16:50,676
还有三个附加的包

485
00:16:51,806 --> 0:16:53,436
这三个包是

486
00:16:53,436 --> 0:16:56,326
DesignFont DesignTheme 和 DesignColor

487
00:16:57,316 --> 0:17:00,006
它们都在它们分别的版本中解析

488
00:16:57,316 --> 0:17:00,006
它们都在它们分别的版本中解析

489
00:17:00,586 --> 0:17:03,696
所以 Xcode 在选择这些

490
00:17:03,696 --> 0:17:05,376
包的版本方面

491
00:17:05,376 --> 0:17:06,465
为我们做了很多工作

492
00:17:06,776 --> 0:17:08,626
但我想要知道

493
00:17:08,685 --> 0:17:10,935
为什么这些包解析这些版本

494
00:17:11,336 --> 0:17:14,976
为了这样做 我回到项目编辑器

495
00:17:18,656 --> 0:17:19,915
这是 Swift 包依赖部分

496
00:17:19,915 --> 0:17:21,685
我们可以看到

497
00:17:21,826 --> 0:17:23,185
在 DesignTheme 上的新依赖

498
00:17:23,185 --> 0:17:26,476
伴随着版本 Rule 1.0.0 - Next Major

499
00:17:28,415 --> 0:17:31,316
Xcode 在这个例子中

500
00:17:31,316 --> 0:17:32,866
在 Version 1.0.0 选择了 DesignTheme

501
00:17:33,086 --> 0:17:35,976
因为它从 1.0.0 一直解析到下一个主要版本

502
00:17:39,216 --> 0:17:40,386
所以我们可以看到

503
00:17:40,386 --> 0:17:42,316
在 Yams 上的依赖还是一样的

504
00:17:43,056 --> 0:17:46,536
你可能会想 在这个例子中

505
00:17:46,536 --> 0:17:47,976
DesignFont 和 DesignColor 在哪呢

506
00:17:48,206 --> 0:17:49,126
我们看向项目编辑器

507
00:17:49,126 --> 0:17:51,516
但是却没有在里面找到它们

508
00:17:51,986 --> 0:17:53,586
好的 这个的原因是

509
00:17:53,586 --> 0:17:55,746
项目编辑器

510
00:17:55,746 --> 0:17:57,256
向我们展示了

511
00:17:57,256 --> 0:18:00,386
午餐 App 和它的直接包之间的直接依赖

512
00:17:57,256 --> 0:18:00,386
午餐 App 和它的直接包之间的直接依赖

513
00:18:02,016 --> 0:18:04,556
为了看我们包的依赖

514
00:18:04,556 --> 0:18:08,686
我们想要去看一下 DesignTheme 包

515
00:18:09,066 --> 0:18:10,456
这是因为它是最新的

516
00:18:10,456 --> 0:18:11,986
加入到我们的工作空间的包

517
00:18:12,296 --> 0:18:14,626
假设它们不是来自 Yams 也很安全

518
00:18:15,296 --> 0:18:16,956
为了这样做

519
00:18:16,956 --> 0:18:18,356
我们回到高级的 Xcode 视图

520
00:18:18,696 --> 0:18:21,376
在 Swift 包依赖部分下来看

521
00:18:21,676 --> 0:18:23,256
我们可以看到我们的

522
00:18:23,256 --> 0:18:23,856
包 DesignTheme

523
00:18:24,396 --> 0:18:26,806
我们显露了包

524
00:18:26,846 --> 0:18:28,826
然后看到了包内所有可用的内容

525
00:18:28,826 --> 0:18:30,476
在这个例子中

526
00:18:30,476 --> 0:18:32,506
我们想要看一下 Package.swift 清单文档

527
00:18:33,246 --> 0:18:36,366
因为在这里我们会看到

528
00:18:36,366 --> 0:18:37,696
所有关于这个包的

529
00:18:37,696 --> 0:18:39,326
依赖信息

530
00:18:40,446 --> 0:18:41,426
所以我们来看这个文件

531
00:18:41,426 --> 0:18:43,086
在依赖阵列

532
00:18:43,336 --> 0:18:44,896
我们看到了 DesignFont

533
00:18:44,896 --> 0:18:46,396
和 DesignColor 

534
00:18:46,396 --> 0:18:47,086
还有它们的版本要求

535
00:18:50,036 --> 0:18:52,076
DesignFont 根据我们之前看到的

536
00:18:52,076 --> 0:18:54,006
进行解析

537
00:18:54,006 --> 0:18:54,916
从 1.0.0 一直到之后的主要版本

538
00:18:55,446 --> 0:18:56,846
所以 Xcode 会选择

539
00:18:56,846 --> 0:18:59,976
版本 1.2.0 因为它是包的最新版本

540
00:19:03,176 --> 0:19:05,806
DesignColor 的解析则有一点不同

541
00:19:06,136 --> 0:19:08,166
它使用的是 1.0.0 版本

542
00:19:08,246 --> 0:19:10,536
一直到下一个次版本

543
00:19:10,536 --> 0:19:13,316
这意味着从 1.0.0 到设计颜色的版本

544
00:19:13,876 --> 0:19:15,946
然后一直到但是不包括 1.1.0 

545
00:19:16,556 --> 0:19:18,416
这通常用于当包想要

546
00:19:18,486 --> 0:19:19,746
比它们在更新的时候

547
00:19:19,746 --> 0:19:21,106
获得的新版本

548
00:19:21,106 --> 0:19:22,746
更加保守一些

549
00:19:23,256 --> 0:19:25,776
所以 Xcode 选择了

550
00:19:25,776 --> 0:19:28,176
DesignColor 包的

551
00:19:28,176 --> 0:19:28,716
1.0.1 版本

552
00:19:29,646 --> 0:19:31,036
所以这是添加的包

553
00:19:31,036 --> 0:19:32,136
以及为什么它们

554
00:19:32,176 --> 0:19:37,516
要在这个版本解析的全视图

555
00:19:37,786 --> 0:19:39,296
你会记住 Anders 在之前的展示中

556
00:19:39,296 --> 0:19:42,546
的最后一步就是导入 Yams

557
00:19:42,546 --> 0:19:43,506
然后使用它的 API

558
00:19:43,906 --> 0:19:45,306
让我们来看看它是如何运行

559
00:19:45,426 --> 0:19:46,976
以及它如何与包解析相关联

560
00:19:50,046 --> 0:19:52,976
我们所有的包都是有相同名字的生产函数库

561
00:19:55,046 --> 0:19:56,686
我们可以看到午餐 App

562
00:19:56,686 --> 0:19:57,626
从 DesignTheme 导入内容

563
00:19:57,626 --> 0:20:00,376
也从 Yams 导入内容

564
00:19:57,626 --> 0:20:00,376
也从 Yams 导入内容

565
00:20:00,976 --> 0:20:04,656
DesignTheme 函数库同样也从

566
00:20:04,656 --> 0:20:05,966
DesignFont 和 DesignColor 导入内容

567
00:20:08,116 --> 0:20:09,426
如果我们完整地看这个图表

568
00:20:09,426 --> 0:20:11,316
我们可以看到

569
00:20:11,316 --> 0:20:12,356
它与包解析的工作过程

570
00:20:12,356 --> 0:20:13,336
是很相似的

571
00:20:13,686 --> 0:20:15,076
这是有意的

572
00:20:15,556 --> 0:20:16,786
当我们在我们的包上

573
00:20:16,786 --> 0:20:19,726
添加直接的依赖时

574
00:20:19,726 --> 0:20:21,226
我们也不再导入它们的内容

575
00:20:21,226 --> 0:20:22,786
同时实际上在我们的 App 中

576
00:20:22,786 --> 0:20:24,106
使用 API

577
00:20:24,446 --> 0:20:27,026
但是如果我想要

578
00:20:27,026 --> 0:20:28,536
从一个子依赖中

579
00:20:28,536 --> 0:20:30,576
导入内容到我的项目怎么办呢

580
00:20:31,766 --> 0:20:33,616
让我们谈谈如何这样做

581
00:20:36,046 --> 0:20:38,606
我们有依赖于 DesignTheme 的午餐项目

582
00:20:39,376 --> 0:20:42,096
DesignTheme 依赖于 DesignFont 包

583
00:20:42,886 --> 0:20:44,496
DesignFont 包

584
00:20:44,496 --> 0:20:46,186
生成了一个有相同名称的函数库

585
00:20:46,976 --> 0:20:48,686
在这个环境中

586
00:20:48,686 --> 0:20:50,226
我们不想立刻从

587
00:20:50,406 --> 0:20:52,186
DesignFont 导入内容到午餐 App

588
00:20:52,516 --> 0:20:56,126
因为如果 DesignTheme 失去了对

589
00:20:56,126 --> 0:20:57,526
DesignFont 和 Update 的依赖

590
00:20:57,526 --> 0:20:59,336
Xcode 也会失去

591
00:20:59,336 --> 0:21:00,446
对 DesignFont 的引用

592
00:20:59,336 --> 0:21:00,446
对 DesignFont 的引用

593
00:21:00,446 --> 0:21:02,986
所以现在 我们不能

594
00:21:02,986 --> 0:21:04,106
使用 DesignFont 函数库

595
00:21:05,136 --> 0:21:07,036
所以这样做的一个更好办法

596
00:21:07,036 --> 0:21:10,126
我们回到例子的开头

597
00:21:10,126 --> 0:21:11,696
就是创建一个

598
00:21:11,696 --> 0:21:13,246
在午餐项目和 DesignFont 包之间的

599
00:21:13,246 --> 0:21:15,666
直接包依赖

600
00:21:16,106 --> 0:21:18,276
然后我们可以从 DesignFont

601
00:21:18,276 --> 0:21:19,696
导入内容至午餐

602
00:21:20,086 --> 0:21:21,776
因为如果 DesignTheme 在更新中

603
00:21:21,776 --> 0:21:24,006
失去了对 DesignFont 的依赖

604
00:21:24,006 --> 0:21:26,276
我们还是会保持

605
00:21:26,276 --> 0:21:28,976
对 Xcode 内的函数库的引用

606
00:21:32,176 --> 0:21:33,916
这就是 Xcode 如何

607
00:21:33,916 --> 0:21:35,556
选择你的包的不同版本

608
00:21:36,286 --> 0:21:40,456
我们来看看你如何开始

609
00:21:40,456 --> 0:21:41,656
获得这些包的新版本

610
00:21:41,916 --> 0:21:43,976
它提供了 API 提升和 Bug 修复

611
00:21:46,106 --> 0:21:49,756
某天 我与维护 DesignFont 团队

612
00:21:49,756 --> 0:21:51,036
共进午餐

613
00:21:51,336 --> 0:21:52,936
他们告诉了我一个

614
00:21:52,936 --> 0:21:54,216
DesignFont 包的新版本

615
00:21:54,216 --> 0:21:55,556
它有一些小的 Bug 修复

616
00:21:55,556 --> 0:21:58,206
版本 1.2.1

617
00:21:58,206 --> 0:22:01,276
当我回去的时候

618
00:21:58,206 --> 0:22:01,276
当我回去的时候

619
00:22:01,276 --> 0:22:03,966
我发现 DesignFont 在使用版本 1.2.0

620
00:22:04,086 --> 0:22:06,066
午餐项目在版本 1.2.0

621
00:22:06,066 --> 0:22:07,716
使用 DesignFont

622
00:22:09,216 --> 0:22:11,016
所以我想要更新这个包

623
00:22:11,446 --> 0:22:15,806
为了实现这一点 我点击了文件 Swift 包

624
00:22:16,066 --> 0:22:17,066
在这里 关于 Swift 包

625
00:22:17,066 --> 0:22:19,146
我有很多选项

626
00:22:19,786 --> 0:22:21,966
在这个例子中

627
00:22:21,966 --> 0:22:23,336
我想要更新至最新的包版本

628
00:22:24,836 --> 0:22:26,706
所以继续然后点击这个

629
00:22:26,706 --> 0:22:27,986
更新运作开始了

630
00:22:29,176 --> 0:22:30,856
我们现在使用

631
00:22:30,856 --> 0:22:32,296
DesignFont 版本 1.2.1

632
00:22:32,886 --> 0:22:35,876
那么更新的包版本

633
00:22:35,876 --> 0:22:36,776
到底都做些什么呢

634
00:22:37,016 --> 0:22:38,936
在更新运作中会发生什么呢

635
00:22:42,086 --> 0:22:43,686
有一个文档名为

636
00:22:43,686 --> 0:22:44,956
Package.resolved

637
00:22:44,956 --> 0:22:45,596
对于这个是很重要的

638
00:22:46,876 --> 0:22:48,906
Package.resolved 记录了

639
00:22:48,906 --> 0:22:50,006
你的工作空间内的

640
00:22:50,006 --> 0:22:51,676
所有包的版本信息

641
00:22:52,176 --> 0:22:53,296
当你完成更新

642
00:22:53,296 --> 0:22:55,446
这个文档被更新了

643
00:22:55,496 --> 0:22:56,976
那么 Xcode

644
00:22:56,976 --> 0:22:58,976
会为你拉下新的版本

645
00:23:03,046 --> 0:23:04,536
这些文档存在于

646
00:23:04,536 --> 0:23:06,426
xcsharedata

647
00:23:06,426 --> 0:23:08,526
它一般由你的团队和源控制共享

648
00:23:08,956 --> 0:23:10,156
所以需要注意的一个很重要的事情

649
00:23:10,156 --> 0:23:11,286
就是我们运行的更新行为

650
00:23:11,286 --> 0:23:14,116
是一个本地行为

651
00:23:14,576 --> 0:23:15,876
为了在我的团队

652
00:23:15,876 --> 0:23:18,576
分享这个更新

653
00:23:18,576 --> 0:23:20,106
我必须指派和将我的变化

654
00:23:20,106 --> 0:23:20,906
放至 Package.resolved 文件

655
00:23:23,066 --> 0:23:24,366
如果你想要

656
00:23:24,366 --> 0:23:25,586
自己寻找所有的东西

657
00:23:25,586 --> 0:23:27,346
这个在 Xcode 项目文件中

658
00:23:27,846 --> 0:23:29,296
但是请注意你不需要

659
00:23:29,296 --> 0:23:32,026
自己编辑 Package.resolved 文件

660
00:23:32,456 --> 0:23:34,596
Xcode 会为你做一切的事情

661
00:23:38,066 --> 0:23:40,156
正如我之前说的

662
00:23:40,156 --> 0:23:41,996
我们并没有与我们的团队分享这个更新

663
00:23:42,216 --> 0:23:43,236
所以让我们来这样做吧

664
00:23:43,656 --> 0:23:45,176
我们可以通过来到

665
00:23:45,296 --> 0:23:46,576
源控制菜单和点击提交

666
00:23:46,576 --> 0:23:47,936
在 Xcode 中完成这些

667
00:23:51,226 --> 0:23:53,946
在这里面我们可以看到 

668
00:23:53,946 --> 0:23:55,636
对 Package.resolved 文档做出的所有变化

669
00:23:55,636 --> 0:23:57,606
以及它是如何从我们之前使用的

670
00:23:58,096 --> 0:23:59,396
版本 1.2.0 更新到

671
00:24:00,036 --> 0:24:02,146
新版的 1.2.1 的

672
00:24:02,876 --> 0:24:04,386
因为我想要推送

673
00:24:04,386 --> 0:24:05,536
我继续然后点击了

674
00:24:05,856 --> 0:24:07,146
左下侧的复选框 推送至 remote 端

675
00:24:07,576 --> 0:24:09,136
然后我就可以指派和

676
00:24:09,136 --> 0:24:09,696
推送我的变化了

677
00:24:10,276 --> 0:24:11,926
我们成功地

678
00:24:11,926 --> 0:24:13,756
在我们的团队中分享了这个更新

679
00:24:14,956 --> 0:24:16,136
这些都没有回答问题

680
00:24:16,136 --> 0:24:17,646
为什么我们需要一个

681
00:24:17,646 --> 0:24:19,376
Package.resolved 文件

682
00:24:20,396 --> 0:24:22,476
这个文件存在是

683
00:24:22,476 --> 0:24:23,676
为了保证

684
00:24:23,876 --> 0:24:25,316
我团队的人

685
00:24:25,536 --> 0:24:27,186
在相同的指令中使用午餐项目

686
00:24:27,186 --> 0:24:28,636
他们都能获得

687
00:24:28,636 --> 0:24:30,276
相同版本的 DesignFont

688
00:24:30,976 --> 0:24:31,856
如果这个文件

689
00:24:31,856 --> 0:24:33,476
这个 Package.resolved 文件

690
00:24:33,476 --> 0:24:35,996
并不存在 

691
00:24:35,996 --> 0:24:37,516
最终的情形可能是

692
00:24:37,516 --> 0:24:39,966
你团队的多个人

693
00:24:39,966 --> 0:24:41,746
都使用项目的相同版本

694
00:24:41,746 --> 0:24:44,456
但是和你使用的包的版本

695
00:24:44,456 --> 0:24:45,956
却不一致

696
00:24:48,326 --> 0:24:49,476
所以在这里有个非常重要的事情

697
00:24:49,476 --> 0:24:50,906
需要注意的就是

698
00:24:50,906 --> 0:24:52,166
检查你的 Package.resolved 文件

699
00:24:52,606 --> 0:24:54,146
不然 你可能最后会

700
00:24:54,196 --> 0:24:55,796
在你的团队中使用

701
00:24:55,796 --> 0:24:57,326
不一致版本的包

702
00:24:57,606 --> 0:24:58,666
所以检查这个文件

703
00:24:58,666 --> 0:24:59,776
是非常重要的

704
00:25:02,046 --> 0:25:03,756
然后要确保去注意

705
00:25:03,756 --> 0:25:05,136
你的包的新版本

706
00:25:05,996 --> 0:25:08,716
然后就是有意地更新

707
00:25:09,016 --> 0:25:10,676
不然的话 

708
00:25:10,676 --> 0:25:12,526
你可能会错过你的包提供给你的

709
00:25:12,526 --> 0:25:14,806
一些关键的 Bug 修复以及 API 提升

710
00:25:16,276 --> 0:25:18,106
这就是如何更新包

711
00:25:18,806 --> 0:25:20,166
我们再仔细通过

712
00:25:20,166 --> 0:25:21,706
更先进的例子

713
00:25:21,706 --> 0:25:22,856
来看一下如何解决包冲突

714
00:25:23,086 --> 0:25:24,376
这将我们今天

715
00:25:24,376 --> 0:25:25,976
谈到的很多不同话题都带到了一起

716
00:25:29,046 --> 0:25:31,296
所以我启动了这个项目

717
00:25:31,296 --> 0:25:33,496
来改变午餐 App 中

718
00:25:33,496 --> 0:25:35,826
价格的字体

719
00:25:37,236 --> 0:25:39,096
我想要使用的系统字体

720
00:25:39,096 --> 0:25:41,206
在版本 2.0.0 的 DesignFont 中

721
00:25:41,206 --> 0:25:42,656
是可行的 

722
00:25:42,656 --> 0:25:43,836
这使我们团队

723
00:25:43,836 --> 0:25:46,226
拥有的 App 

724
00:25:46,356 --> 0:25:49,066
可以使用一致的版本的字体

725
00:25:49,686 --> 0:25:50,686
所以让我们这样做吧

726
00:25:51,456 --> 0:25:52,926
为了使用 DesignFont 包 

727
00:25:53,346 --> 0:25:55,326
我们需要在午餐和 DesignFont 间

728
00:25:55,326 --> 0:25:57,846
创建一个直接的依赖

729
00:25:58,646 --> 0:26:00,356
因为版本 2.0.0 的 DesignFont

730
00:25:58,646 --> 0:26:00,356
因为版本 2.0.0 的 DesignFont

731
00:26:00,356 --> 0:26:02,006
发布了这个新的字体

732
00:26:02,006 --> 0:26:04,976
我们想要明确地使用那个版本

733
00:26:07,076 --> 0:26:08,576
所以我们来到 Xcode

734
00:26:08,576 --> 0:26:09,776
然后完成了添加包的工作流程

735
00:26:10,436 --> 0:26:13,696
我们在收藏账户中点击 DesignFont

736
00:26:13,996 --> 0:26:14,756
然后是继续

737
00:26:15,156 --> 0:26:16,456
我们选择到下一个主要的版本

738
00:26:16,456 --> 0:26:17,936
因为我们想要

739
00:26:17,936 --> 0:26:20,016
通向任何更新

740
00:26:20,016 --> 0:26:21,686
或者 DesignFont 发布的新版本

741
00:26:21,686 --> 0:26:23,776
然后我们点击继续

742
00:26:24,606 --> 0:26:26,036
在这里 我们遇到了一个

743
00:26:26,036 --> 0:26:28,186
包解析错误

744
00:26:28,186 --> 0:26:29,726
因为 DesignFont 从 2.0.0 到

745
00:26:29,726 --> 0:26:31,976
下一个主要的版本需要新的依赖需求

746
00:26:35,826 --> 0:26:37,266
所以让我们看看

747
00:26:37,266 --> 0:26:39,116
这里在发生什么

748
00:26:39,116 --> 0:26:41,906
同时对其进行调试 调试包解析时

749
00:26:41,906 --> 0:26:43,206
有件需要记住的非常重要的事情

750
00:26:43,206 --> 0:26:45,046
那就是要

751
00:26:45,046 --> 0:26:46,256
看全景图

752
00:26:47,486 --> 0:26:49,716
我们想要考虑到

753
00:26:49,716 --> 0:26:51,096
影响到我们包的所有需求

754
00:26:51,096 --> 0:26:52,856
而不是仅仅

755
00:26:52,856 --> 0:26:53,976
限制于我们刚刚添加的

756
00:26:56,046 --> 0:26:57,546
所以我们退回一步

757
00:26:57,546 --> 0:26:58,656
来看看这个之前是怎么工作的

758
00:26:59,226 --> 0:27:00,756
午餐 App 在版本 1.0.0 的 DesignTheme

759
00:26:59,226 --> 0:27:00,756
午餐 App 在版本 1.0.0 的 DesignTheme

760
00:27:00,756 --> 0:27:02,466
有一个很好的依赖

761
00:27:02,946 --> 0:27:04,316
而 DesignTheme 在 1.2.1 版本

762
00:27:04,316 --> 0:27:06,056
直接依赖于 DesignFont 

763
00:27:06,056 --> 0:27:08,616
使用版本需求 1.0.0

764
00:27:08,616 --> 0:27:10,976
直到下一个主要版本

765
00:27:14,286 --> 0:27:16,276
然后 当我们添加

766
00:27:16,276 --> 0:27:17,656
午餐 App 和 DesignFont 之间的

767
00:27:17,706 --> 0:27:19,486
直接依赖关系从 2.0.0 直到

768
00:27:19,486 --> 0:27:21,306
下一个主要版本时 我们遇到了

769
00:27:21,306 --> 0:27:22,746
包解析冲突

770
00:27:24,336 --> 0:27:26,726
你将注意到 DesignTheme

771
00:27:26,726 --> 0:27:29,016
对 DesignFont 1.0.0 的要求

772
00:27:29,016 --> 0:27:30,316
直到 但不包括 2.0.0

773
00:27:30,596 --> 0:27:31,956
午餐 App 对 DesignFont 2 的要求

774
00:27:31,956 --> 0:27:34,086
高至 3.0.0

775
00:27:34,086 --> 0:27:36,026
但是又不包括 3.0.0 版本

776
00:27:36,026 --> 0:27:37,706
不能选择一个

777
00:27:37,786 --> 0:27:38,916
同时符合这两个要求的版本

778
00:27:39,996 --> 0:27:42,546
因此 在将 SwiftPM 嵌入到

779
00:27:42,546 --> 0:27:44,286
Xcode 中 你只能在工作空间中

780
00:27:44,416 --> 0:27:46,626
有一个包的版本

781
00:27:47,646 --> 0:27:48,926
这就解释了

782
00:27:48,926 --> 0:27:50,366
为什么我们在这里看到了

783
00:27:50,366 --> 0:27:51,126
包解析错误

784
00:27:51,716 --> 0:27:54,016
Xcode 不可能选择一个

785
00:27:54,016 --> 0:27:56,776
同时满足两个需求的版本

786
00:27:58,026 --> 0:27:59,526
解决这个问题需要

787
00:27:59,566 --> 0:28:00,786
具体问题具体分析

788
00:27:59,566 --> 0:28:00,786
具体问题具体分析

789
00:28:01,326 --> 0:28:02,626
但通常 当我遇到

790
00:28:02,626 --> 0:28:03,926
这样的包解析错误时

791
00:28:03,966 --> 0:28:05,466
我希望查看

792
00:28:05,466 --> 0:28:07,716
可用的包的更新的版本

793
00:28:08,196 --> 0:28:09,476
然后我就查看这些

794
00:28:09,476 --> 0:28:11,776
新版本是否

795
00:28:11,776 --> 0:28:12,976
为它们的子依赖提供了任何更新

796
00:28:15,046 --> 0:28:16,026
在这个例子中 我注意到

797
00:28:16,026 --> 0:28:17,066
有一个 我们还没有

798
00:28:17,066 --> 0:28:19,966
真正研究过 DesignTheme 的版本 2.0.0

799
00:28:20,596 --> 0:28:23,006
所以让我们去 GitHub 看看

800
00:28:23,006 --> 0:28:25,726
我们的 DesignTheme 主题的版本需求

801
00:28:27,356 --> 0:28:29,106
当我们转到 GitHub 时

802
00:28:29,106 --> 0:28:30,386
我们可以查看 Swift 包清单的

803
00:28:30,386 --> 0:28:31,636
依赖关系阵列

804
00:28:32,036 --> 0:28:34,916
这里 我们看到 DesignFont 的版本需求

805
00:28:35,076 --> 0:28:37,336
已经从 1.0.0 更新到下一个主要版本

806
00:28:37,336 --> 0:28:40,116
变成了 2.0.0 更新到下一个主要版本

807
00:28:41,066 --> 0:28:42,266
这与我们

808
00:28:42,266 --> 0:28:43,696
试图在午餐 App 和 DesignFont 之间

809
00:28:43,696 --> 0:28:45,506
添加的版本需求相匹配

810
00:28:45,976 --> 0:28:47,966
因此 如果我们可以

811
00:28:48,526 --> 0:28:49,446
更新 DesignTheme 的版本需求

812
00:28:49,446 --> 0:28:51,166
使其在版本 2.0.0 中得到解决

813
00:28:51,166 --> 0:28:53,116
那么现在我们

814
00:28:53,116 --> 0:28:55,036
就可以心满意足地

815
00:28:55,036 --> 0:28:56,706
在午餐 App 和 DesignFont 之间添加

816
00:28:56,706 --> 0:28:57,336
一个直接依赖关系

817
00:28:58,746 --> 0:29:00,366
我们来开始这样做

818
00:28:58,746 --> 0:29:00,366
我们来开始这样做

819
00:29:00,366 --> 0:29:02,426
更新一下 DesignTheme 的主要版本

820
00:29:03,206 --> 0:29:04,736
以前 午餐 App 使用的是 DesignTheme

821
00:29:05,026 --> 0:29:07,676
从 1.0.0 到下一个主要版本

822
00:29:07,916 --> 0:29:09,136
我们想要改变它

823
00:29:09,136 --> 0:29:11,766
使它现在使用 2.0.0 到下一个主要版本

824
00:29:14,286 --> 0:29:15,376
回到 Xcode

825
00:29:15,466 --> 0:29:17,346
现在 我们只需

826
00:29:17,346 --> 0:29:20,036
单击项目编辑器中的

827
00:29:20,236 --> 0:29:21,046
DesignTheme 包

828
00:29:21,046 --> 0:29:24,076
然后 我们回到编辑版本规则表

829
00:29:24,536 --> 0:29:27,166
在这里 我们之前指定了 1.0.0

830
00:29:27,166 --> 0:29:27,936
直到下一个主要版本

831
00:29:28,586 --> 0:29:30,126
但现在我们想把它变成

832
00:29:30,276 --> 0:29:32,266
2.0.0 到下一个主要版本

833
00:29:33,346 --> 0:29:35,986
我们只要把 1.0.0 换成 2.0.0

834
00:29:36,236 --> 0:29:40,476
然后点击完成 现在 更新操作发生了

835
00:29:40,746 --> 0:29:43,266
我们可以看到 

836
00:29:43,266 --> 0:29:45,086
DesignTheme 在版本 2.0.0 中 

837
00:29:45,086 --> 0:29:45,856
DesignFont 在版本 2.0.0 中

838
00:29:49,056 --> 0:29:50,626
但这里发生了一件重要的事情

839
00:29:50,926 --> 0:29:52,246
当我们从一个主版本

840
00:29:52,246 --> 0:29:55,806
更新到另一个主版本时 我们会遇到构建失败

841
00:29:56,146 --> 0:29:57,746
这是因为当

842
00:29:57,746 --> 0:29:59,006
从一个包的一个主要版本

843
00:29:59,006 --> 0:30:01,016
切换到另一个主要版本时

844
00:29:59,006 --> 0:30:01,016
切换到另一个主要版本时

845
00:30:01,016 --> 0:30:01,916
可能会发生 API 更改

846
00:30:02,156 --> 0:30:03,696
这可能会潜在地

847
00:30:03,696 --> 0:30:05,496
破坏项目内部的更改

848
00:30:07,316 --> 0:30:09,076
这意味着当你

849
00:30:09,076 --> 0:30:10,036
从一个主要版本更新到

850
00:30:10,036 --> 0:30:11,566
另一个主要版本时 你应该准备

851
00:30:11,686 --> 0:30:14,086
更改一些 API 或者改变

852
00:30:14,086 --> 0:30:16,956
API 在新版本中的包中运行的任何方式

853
00:30:19,326 --> 0:30:21,306
这可以是非常小的改变

854
00:30:21,306 --> 0:30:22,716
也可以是更复杂的改变

855
00:30:23,336 --> 0:30:24,776
在这种情况下 我们已经为你

856
00:30:24,776 --> 0:30:26,756
做了所有的工作 让你在包上花费更多的时间

857
00:30:27,006 --> 0:30:28,466
因此 当我们回到午餐 App 时

858
00:30:28,466 --> 0:30:30,696
我们的构建错误得到了解决

859
00:30:30,696 --> 0:30:32,206
我们成功地使用了版本 2.0.0 的

860
00:30:32,206 --> 0:30:33,906
DesignTheme

861
00:30:36,046 --> 0:30:37,316
所以我们的构建现在成功了

862
00:30:37,666 --> 0:30:38,886
我们想在午餐 App 和 DesignFont 之间

863
00:30:38,886 --> 0:30:41,396
添加一个直接依赖关系

864
00:30:41,986 --> 0:30:43,286
因为现在我们

865
00:30:43,546 --> 0:30:45,766
处于 DesignTheme 的版本 2.0.0

866
00:30:45,766 --> 0:30:47,596
我们可以添加我们想要的版本需求

867
00:30:50,056 --> 0:30:51,456
回到 Xcode 我们

868
00:30:51,456 --> 0:30:53,036
来看看添加包工作流

869
00:30:53,476 --> 0:30:54,966
我们选择 DesignFont

870
00:30:55,266 --> 0:30:57,116
我们选择 2.0.0 到下一个主版本

871
00:30:58,026 --> 0:30:59,216
现在 我们可以将

872
00:30:59,216 --> 0:31:01,096
DesignFont 库与我们的 App 链接起来

873
00:30:59,216 --> 0:31:01,096
DesignFont 库与我们的 App 链接起来

874
00:31:01,606 --> 0:31:02,856
现在在项目编辑器中

875
00:31:02,856 --> 0:31:04,416
我们可以看到

876
00:31:04,416 --> 0:31:05,936
我们成功地使用了 DesignFont

877
00:31:05,936 --> 0:31:06,926
从 2.0.0 到下一个主版本

878
00:31:10,176 --> 0:31:11,576
现在我们已经完成了这一步

879
00:31:11,576 --> 0:31:13,146
我们现在可以导入 DesignFont

880
00:31:13,146 --> 0:31:17,146
内部的内容 成功地使用它的函数库

881
00:31:17,146 --> 0:31:20,816
然后 通过一些小小的代码更改

882
00:31:20,816 --> 0:31:21,976
来更新价格的字体

883
00:31:25,046 --> 0:31:26,116
现在我们已经成功地

884
00:31:26,116 --> 0:31:27,896
做到了这一点 并解决了包冲突

885
00:31:28,506 --> 0:31:29,486
我们已经更新了包的

886
00:31:29,486 --> 0:31:31,236
版本 并且我们成功地

887
00:31:31,236 --> 0:31:32,756
讨论了如何在 Xcode 中

888
00:31:32,756 --> 0:31:33,956
调试包解析

889
00:31:37,146 --> 0:31:38,716
所以我们今天讨论了

890
00:31:38,756 --> 0:31:39,016
很多事情

891
00:31:40,086 --> 0:31:41,116
我们讨论了如何

892
00:31:41,116 --> 0:31:42,826
开始在项目中

893
00:31:42,826 --> 0:31:44,356
开源包并快速开始

894
00:31:44,386 --> 0:31:45,986
使用它的 API

895
00:31:47,496 --> 0:31:48,856
我们进一步了解了什么

896
00:31:48,856 --> 0:31:53,726
是包 以及 Package.swift 清单是如何打包的

897
00:31:55,146 --> 0:31:56,966
我们讨论了 Xcode

898
00:31:56,966 --> 0:31:58,766
如何选择在项目中要使用的

899
00:31:58,796 --> 0:32:00,066
包的版本

900
00:31:58,796 --> 0:32:00,066
包的版本

901
00:32:01,636 --> 0:32:02,756
然后 我们讨论了

902
00:32:02,756 --> 0:32:03,776
如何保持这些版本的

903
00:32:03,776 --> 0:32:05,596
更新并且不断获得

904
00:32:05,596 --> 0:32:06,736
包的新更新

905
00:32:08,256 --> 0:32:09,386
然后 我们看了一个

906
00:32:09,386 --> 0:32:11,226
关于如何解决包冲突的

907
00:32:11,226 --> 0:32:12,916
最新例子

908
00:32:12,916 --> 0:32:14,326
它教会了我们如何调试包

909
00:32:14,556 --> 0:32:15,976
以及如何更新包的版本

910
00:32:18,136 --> 0:32:19,916
今天在 GitHub 上

911
00:32:20,046 --> 0:32:22,086
已经有很多包可用了

912
00:32:22,996 --> 0:32:24,366
我们建议你

913
00:32:24,366 --> 0:32:25,736
仔细查看这些包

914
00:32:25,736 --> 0:32:27,076
看看可以在哪里将它们

915
00:32:27,076 --> 0:32:28,976
合并到现有的 App 中

916
00:32:31,096 --> 0:32:33,376
但我们还没说完 明天 我的同事

917
00:32:33,376 --> 0:32:34,706
Ankit 和 Boris

918
00:32:35,106 --> 0:32:36,276
将做一个演讲 

919
00:32:36,276 --> 0:32:37,446
讨论如何创建 Swift 包

920
00:32:37,996 --> 0:32:39,466
这个演讲将更详细地介绍

921
00:32:39,466 --> 0:32:41,966
包是什么 

922
00:32:42,016 --> 0:32:45,206
如何编辑包

923
00:32:45,206 --> 0:32:48,666
SwiftPM 开源工具等等

924
00:32:49,606 --> 0:32:50,746
这个演讲会帮助你

925
00:32:50,746 --> 0:32:52,316
在包如何在 Xcode 中工作方面

926
00:32:52,446 --> 0:32:53,786
成为一个专家

927
00:32:53,786 --> 0:32:56,156
你不会想错过的

928
00:32:56,336 --> 0:32:58,216
如果你对于 SwiftPM 团队

929
00:32:58,216 --> 0:33:00,506
有更多的疑问

930
00:32:58,216 --> 0:33:00,506
有更多的疑问

931
00:33:00,716 --> 0:33:01,956
我们会在这个会议之后的

932
00:33:01,956 --> 0:33:03,646
Swift 公开时间实验室等你们

933
00:33:04,186 --> 0:33:05,276
还有就是

934
00:33:05,276 --> 0:33:06,296
这个星期还有两个会议

935
00:33:06,296 --> 0:33:08,316
一个是周四十二点

936
00:33:08,316 --> 0:33:09,716
在 Swift 包实验室

937
00:33:09,716 --> 0:33:11,096
另一个是周五十二点

938
00:33:11,096 --> 0:33:11,976
有着相同的名称的会议

939
00:33:12,976 --> 0:33:13,816
谢谢你们今天的光临

940
00:33:13,816 --> 0:33:14,596
希望你们能够

941
00:33:14,596 --> 0:33:15,896
度过愉快的一周 谢谢

942
00:33:16,516 --> 0:33:20,500
[掌声]
