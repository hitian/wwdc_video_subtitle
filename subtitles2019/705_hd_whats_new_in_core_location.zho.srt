1
00:00:00,506 --> 0:00:05,500
[音乐]

2
00:00:11,076 --> 0:00:14,866
&gt;&gt; 大家好 [掌声]

3
00:00:14,866 --> 0:00:16,376
欢迎来到 What's New in Core Location

4
00:00:16,826 --> 0:00:18,366
我叫 Adam Driscoll

5
00:00:18,366 --> 0:00:20,106
我是 Core Location 团队的一名工程师

6
00:00:20,966 --> 0:00:22,526
很高兴为大家介绍

7
00:00:22,526 --> 0:00:23,416
我们在 iOS 13 里

8
00:00:23,416 --> 0:00:25,986
对 Core Location 作出的一些改进

9
00:00:27,276 --> 0:00:28,836
所以 我想这可能是我们所有

10
00:00:28,836 --> 0:00:30,066
开发者的初衷

11
00:00:30,176 --> 0:00:31,396
我们希望让我们的用户高兴

12
00:00:32,165 --> 0:00:35,586
现在我们通过 App 来实现

13
00:00:35,586 --> 0:00:36,706
然后 既然你们今天在这里

14
00:00:36,706 --> 0:00:37,976
听我的演讲

15
00:00:37,976 --> 0:00:39,726
我认为用户的位置

16
00:00:39,726 --> 0:00:40,926
是你的 App 中能让用户高兴的

17
00:00:40,926 --> 0:00:42,936
重要因素 所以 你将会想要

18
00:00:43,466 --> 0:00:45,506
使用 Core Location

19
00:00:47,676 --> 0:00:48,966
可能你已经知道

20
00:00:48,966 --> 0:00:50,426
你的 App 将需要

21
00:00:50,466 --> 0:00:51,476
得到用户的授权

22
00:00:51,476 --> 0:00:53,846
以通过 Core Location 访问他们的位置

23
00:00:53,846 --> 0:00:54,896
所以更细节一些来看

24
00:00:56,036 --> 0:00:57,836
你将需要通过我们的授权弹出系统

25
00:00:57,896 --> 0:01:00,166
发出请求

26
00:00:57,896 --> 0:01:00,166
发出请求

27
00:01:00,166 --> 0:01:01,526
以及响应用户的选择

28
00:01:01,526 --> 0:01:03,836
然后用我们其余的 API

29
00:01:03,836 --> 0:01:05,306
来完成这项工作

30
00:01:05,986 --> 0:01:08,026
好了 这是我们今天在这里

31
00:01:08,026 --> 0:01:09,966
要讨论的内容 因为在 iOS 13 里

32
00:01:10,016 --> 0:01:12,266
我们的授权系统和

33
00:01:12,266 --> 0:01:13,486
它呈现的选项有所变化

34
00:01:13,486 --> 0:01:16,736
我们在地理区域部分的 API

35
00:01:16,816 --> 0:01:18,146
也是如此

36
00:01:20,106 --> 0:01:22,576
我们将具体谈到始终授权

37
00:01:23,046 --> 0:01:26,066
现在它的工作方式有所不同

38
00:01:26,066 --> 0:01:27,396
使用期间授权

39
00:01:27,396 --> 0:01:29,736
现在可以做到更多

40
00:01:29,956 --> 0:01:31,976
暂时授权是全新的功能

41
00:01:31,976 --> 0:01:33,936
我们希望你和你的用户会喜欢它

42
00:01:35,126 --> 0:01:36,196
然后 我会请我的同事

43
00:01:36,196 --> 0:01:38,356
Andrea 上台向你们介绍

44
00:01:38,356 --> 0:01:39,736
这些功能的 App

45
00:01:39,806 --> 0:01:42,216
具体来说 是在地理测距的情景下

46
00:01:43,406 --> 0:01:45,466
好了 让我们从看看我刚才

47
00:01:45,466 --> 0:01:47,336
使用的弹窗开始

48
00:01:49,536 --> 0:01:51,156
你可能在 Platforms State of the Union 演讲里

49
00:01:51,156 --> 0:01:52,196
听到过它

50
00:01:53,886 --> 0:01:56,456
在 iOS 13 中 每一个新用户的

51
00:01:56,586 --> 0:01:58,736
授权交互都会从这个弹窗开始

52
00:01:59,366 --> 0:02:01,986
我想调出一个

53
00:01:59,366 --> 0:02:01,986
我想调出一个

54
00:02:01,986 --> 0:02:03,006
我们今天不会过多讨论的选项

55
00:02:03,006 --> 0:02:04,006
它在底部

56
00:02:04,006 --> 0:02:05,116
不允许

57
00:02:06,096 --> 0:02:07,556
如果用户选择了不允许

58
00:02:07,556 --> 0:02:08,425
那么你的 App 将不能

59
00:02:08,425 --> 0:02:09,716
访问他们的位置

60
00:02:09,716 --> 0:02:11,116
这个弹窗将不再出现

61
00:02:11,856 --> 0:02:13,436
所以 你可能已经

62
00:02:13,436 --> 0:02:14,816
在思考这个问题

63
00:02:14,816 --> 0:02:15,946
但当你显示这个弹窗的时候 

64
00:02:16,046 --> 0:02:17,626
当你发出请求将这个

65
00:02:17,626 --> 0:02:19,336
弹窗呈现给你的用户的时候 要保持谨慎 

66
00:02:20,026 --> 0:02:21,356
要在用户非常了解

67
00:02:21,356 --> 0:02:22,706
为什么你需要

68
00:02:22,706 --> 0:02:24,496
访问他们的位置的时候 以及最可能倾向于

69
00:02:24,496 --> 0:02:26,586
同意授权的时候 再这样做

70
00:02:27,966 --> 0:02:29,126
好了 我们现在的安排

71
00:02:29,126 --> 0:02:30,276
是要讨论始终授权

72
00:02:30,276 --> 0:02:31,986
这个弹窗里没有

73
00:02:31,986 --> 0:02:34,546
允许始终授权的选项

74
00:02:35,006 --> 0:02:36,006
所以 这是个迷吗

75
00:02:37,056 --> 0:02:38,556
如果我们看看你的 App

76
00:02:38,556 --> 0:02:40,516
是如何要求显示这个弹窗的

77
00:02:40,516 --> 0:02:42,506
我想这个迷将被解开

78
00:02:43,386 --> 0:02:45,026
所以 首先 你将需要

79
00:02:45,026 --> 0:02:46,536
一个 CLLocationManager()

80
00:02:46,536 --> 0:02:47,816
它需要一点时间

81
00:02:47,966 --> 0:02:50,056
所以 如果你的 App 比较简单

82
00:02:50,096 --> 0:02:51,096
在 App Delegate 中

83
00:02:51,096 --> 0:02:52,296
将它设置为实例变量

84
00:02:52,296 --> 0:02:55,426
是处理它的好方法

85
00:02:55,696 --> 0:02:57,006
然后 你的 App 可以调用

86
00:02:57,006 --> 0:02:57,926
这两种方法中的一种

87
00:02:57,926 --> 0:02:58,796
要么发出在使用期间授权请求

88
00:02:58,796 --> 0:03:01,086
要么发出始终授权请求

89
00:02:58,796 --> 0:03:01,086
要么发出始终授权请求

90
00:03:01,866 --> 0:03:03,966
在这个介绍里 我们假设

91
00:03:04,266 --> 0:03:05,766
它发出了始终授权请求

92
00:03:07,116 --> 0:03:08,836
在 iOS 12 里 这将导致

93
00:03:08,836 --> 0:03:10,026
在弹窗中

94
00:03:10,026 --> 0:03:11,476
将使用期间授权以及

95
00:03:11,476 --> 0:03:13,086
始终授权这两个选项都提供给用户

96
00:03:13,086 --> 0:03:14,666
但是现在 在 iOS 13 里

97
00:03:14,716 --> 0:03:16,736
它只提供一个选项

98
00:03:16,736 --> 0:03:18,206
没有始终授权的选项

99
00:03:19,466 --> 0:03:21,866
但是 Core Location 记得

100
00:03:21,866 --> 0:03:24,536
你的 App 的请求 所以

101
00:03:24,536 --> 0:03:25,386
如果你需要始终授权

102
00:03:25,386 --> 0:03:26,646
而你的用户同意的

103
00:03:26,646 --> 0:03:27,876
是这里提供的

104
00:03:28,186 --> 0:03:29,426
最长久正面的选项

105
00:03:29,426 --> 0:03:30,726
使用期间授权

106
00:03:32,216 --> 0:03:33,626
那么这就是你将得到的

107
00:03:33,626 --> 0:03:34,786
Apple 将接收在使用期间授权

108
00:03:34,786 --> 0:03:36,176
但它也会进入

109
00:03:36,176 --> 0:03:38,816
我们所说的 临时始终授权

110
00:03:39,426 --> 0:03:42,000
好了 让我们看看它将如何展开

111
00:03:45,156 --> 0:03:46,836
所以 在这条时间线顶部

112
00:03:46,836 --> 0:03:48,056
蓝色部分是用户将会看到的

113
00:03:48,056 --> 0:03:51,346
下方绿色部分

114
00:03:51,346 --> 0:03:52,636
是你的 App 将会看到的

115
00:03:52,896 --> 0:03:53,786
因为在临时授权下

116
00:03:53,786 --> 0:03:56,716
这两者事实上是不同的

117
00:03:57,616 --> 0:03:59,466
所以 你的 App 请求始终授权

118
00:03:59,466 --> 0:04:03,126
接着用户进行了

119
00:03:59,466 --> 0:04:03,126
接着用户进行了

120
00:04:03,126 --> 0:04:04,266
使用期间授权

121
00:04:04,866 --> 0:04:07,636
现在 如果用户打开设置

122
00:04:07,636 --> 0:04:09,176
他们将看到

123
00:04:09,176 --> 0:04:10,916
你的 App 拥有使用期间授权

124
00:04:12,196 --> 0:04:13,876
但是 Core Location 回调了

125
00:04:13,876 --> 0:04:15,166
你的 Delegate 然后告知它

126
00:04:15,166 --> 0:04:16,616
接收到了始终授权

127
00:04:17,716 --> 0:04:18,935
所以 我们希望这能

128
00:04:18,935 --> 0:04:20,076
将你的 App 需要在这个情景中做什么

129
00:04:20,076 --> 0:04:21,576
变得非常简单和明确

130
00:04:22,416 --> 0:04:23,936
这需要用到它的始终授权的支持

131
00:04:24,156 --> 0:04:25,796
它需要做

132
00:04:25,796 --> 0:04:28,356
那些需要始终授权来做到的事

133
00:04:28,586 --> 0:04:29,616
在我们在后面讲到

134
00:04:29,616 --> 0:04:31,536
在使用期间授权的时候

135
00:04:31,536 --> 0:04:33,056
我们会对它有更多了解

136
00:04:33,176 --> 0:04:35,746
例如 它可能会

137
00:04:35,746 --> 0:04:38,136
设置一些地理围栏

138
00:04:38,386 --> 0:04:41,046
然后开始基于用户的位置

139
00:04:41,046 --> 0:04:42,286
在后台为用户

140
00:04:42,286 --> 0:04:43,226
执行自动化行为

141
00:04:45,216 --> 0:04:47,376
好了 如果它这样做了 那么

142
00:04:47,376 --> 0:04:48,666
Core Location 将为那些

143
00:04:48,666 --> 0:04:52,186
地理围栏进行监测 

144
00:04:52,186 --> 0:04:53,586
在某个时候用户将进入或者

145
00:04:53,586 --> 0:04:55,896
退出某个地理围栏 然后一个事件将被生成

146
00:04:57,526 --> 0:04:58,766
一般来说 这个事件将被

147
00:04:58,766 --> 0:05:00,416
传递给你的 

148
00:04:58,766 --> 0:05:00,416
传递给你的 

149
00:05:00,416 --> 0:05:02,316
位置管理 Delegate 但是

150
00:05:02,316 --> 0:05:03,786
因为你的授权是临时的

151
00:05:03,846 --> 0:05:06,346
所以 Core Location 

152
00:05:06,346 --> 0:05:08,016
将保持一段时间

153
00:05:08,016 --> 0:05:09,436
等到一个合适的时候询问你的用户

154
00:05:09,726 --> 0:05:10,966
他们是否想要将你的 App

155
00:05:11,006 --> 0:05:12,086
升级成为始终授权

156
00:05:12,626 --> 0:05:17,946
那个弹窗看起来像这样

157
00:05:17,996 --> 0:05:19,036
我们终于在底部

158
00:05:19,036 --> 0:05:21,276
看到一个允许始终授权的按钮

159
00:05:21,976 --> 0:05:23,756
所以你的 App 会认为它在这段时间里

160
00:05:23,756 --> 0:05:24,976
一直拥有始终授权

161
00:05:24,976 --> 0:05:27,126
用户则认为

162
00:05:27,126 --> 0:05:28,996
它一直拥有使用期间授权

163
00:05:29,846 --> 0:05:30,716
这个弹窗代表着

164
00:05:30,716 --> 0:05:32,416
我们如何让大家回到一起

165
00:05:32,416 --> 0:05:33,726
统一观点

166
00:05:34,246 --> 0:05:38,596
现在 如果这个弹窗

167
00:05:38,596 --> 0:05:39,616
在你的用户不理解为什么

168
00:05:39,616 --> 0:05:41,106
你的 App 需要

169
00:05:41,226 --> 0:05:42,616
访问他们的位置时出现

170
00:05:43,366 --> 0:05:44,456
或者 他们不希望你的 App

171
00:05:44,456 --> 0:05:45,786
可以在后台访问他们的位置

172
00:05:45,786 --> 0:05:47,566
那么这个时候 

173
00:05:47,566 --> 0:05:48,636
他们可以回复 希望继续给你的 App

174
00:05:48,636 --> 0:05:50,736
在使用期间的授权

175
00:05:53,126 --> 0:05:54,646
但是 如果你和你的用户

176
00:05:54,646 --> 0:05:55,756
想法一致 他们喜欢

177
00:05:55,756 --> 0:05:57,606
他们看到的 他们也可以

178
00:05:58,026 --> 0:06:01,486
在这里给你的 App 始终授权

179
00:05:58,026 --> 0:06:01,486
在这里给你的 App 始终授权

180
00:06:01,696 --> 0:06:04,296
无论如何 这个临时授权阶段结束了

181
00:06:05,326 --> 0:06:06,646
如果你的 App 最终获得了始终授权

182
00:06:06,646 --> 0:06:08,026
那么它也将

183
00:06:08,026 --> 0:06:10,626
接收到开始这项进程的事件

184
00:06:11,746 --> 0:06:12,866
如果以在使用期间授权结束

185
00:06:12,866 --> 0:06:16,526
那么它将不会接收到事件

186
00:06:16,526 --> 0:06:19,186
好了 我们来讨论一下细节

187
00:06:19,296 --> 0:06:20,476
首先记住 当你的 App 

188
00:06:20,476 --> 0:06:22,216
在临时始终授权期间

189
00:06:22,216 --> 0:06:24,396
Core Location 将

190
00:06:24,396 --> 0:06:26,036
保持监测并生成一些

191
00:06:26,036 --> 0:06:26,826
你的 App 会有兴趣的事件

192
00:06:26,826 --> 0:06:28,366
但不会将它们传递给

193
00:06:28,366 --> 0:06:30,096
你的 App 除非

194
00:06:30,186 --> 0:06:31,976
这与它实际所有的

195
00:06:31,976 --> 0:06:34,696
在使用期间授权是相一致的

196
00:06:36,456 --> 0:06:38,736
第二 这个能让用户

197
00:06:38,736 --> 0:06:40,006
对你的 App 进行始终授权的

198
00:06:40,006 --> 0:06:42,006
弹窗会在晚些时候弹出

199
00:06:42,636 --> 0:06:47,886
第三 你只能启动这个过程一次

200
00:06:50,536 --> 0:06:52,216
但是 你能 像这个例子一样

201
00:06:52,216 --> 0:06:56,326
在一开始就请求始终授权

202
00:06:56,326 --> 0:06:59,046
或者 你可以先请求

203
00:06:59,046 --> 0:07:00,866
在使用过程中授权

204
00:06:59,046 --> 0:07:00,866
在使用过程中授权

205
00:07:00,866 --> 0:07:02,136
然后在之后的某个时间

206
00:07:02,176 --> 0:07:03,666
可能是当用户与

207
00:07:03,666 --> 0:07:04,946
你的 App 的一种特性进行交互

208
00:07:04,946 --> 0:07:06,416
而这种特性需要支持的时候 

209
00:07:06,416 --> 0:07:09,586
将请求始终授权当做一个升级

210
00:07:10,116 --> 0:07:13,376
所以 Core Location 是用来

211
00:07:13,376 --> 0:07:14,906
监测和接收

212
00:07:14,956 --> 0:07:16,056
你的 App 感兴趣的事件

213
00:07:16,566 --> 0:07:17,706
我们来谈谈他们什么时候

214
00:07:17,706 --> 0:07:18,706
将被传递到你的 App 

215
00:07:18,706 --> 0:07:19,346
以及在什么时候会被删除

216
00:07:20,006 --> 0:07:22,576
首先 就像我们看到的 

217
00:07:22,576 --> 0:07:24,096
如果你的 App 最终获得了始终授权

218
00:07:24,096 --> 0:07:25,596
而不是在使用期间授权

219
00:07:26,106 --> 0:07:28,416
那么它将会被传递

220
00:07:28,926 --> 0:07:31,446
但是如果用户还尚未作出选择

221
00:07:31,446 --> 0:07:32,986
它们也不会被传递

222
00:07:34,366 --> 0:07:36,036
现在 Core Location 要等待一个时机

223
00:07:36,086 --> 0:07:37,506
当我们认为用户

224
00:07:37,506 --> 0:07:39,426
不是很忙 可以最大程度的

225
00:07:39,466 --> 0:07:40,466
理解正在发生什么

226
00:07:40,466 --> 0:07:41,916
而不是给出

227
00:07:41,916 --> 0:07:44,326
不要烦我的类似回复时

228
00:07:45,676 --> 0:07:47,736
所以 在这段时间 如果

229
00:07:47,736 --> 0:07:48,726
在这个基础上生成了更多事件

230
00:07:48,726 --> 0:07:49,786
如果你在监测请求

231
00:07:49,786 --> 0:07:51,546
那么这些事件将

232
00:07:51,546 --> 0:07:53,766
取代前一个出现的事件

233
00:07:53,766 --> 0:07:55,656
这个前序事件将被删除

234
00:07:56,866 --> 0:08:00,466
然后最终 Core Location 将删除

235
00:07:56,866 --> 0:08:00,466
然后最终 Core Location 将删除

236
00:08:00,466 --> 0:08:02,536
太过老旧的事件

237
00:08:03,246 --> 0:08:05,316
这是因为 它可能和你的用例不再相关

238
00:08:05,316 --> 0:08:06,646
它也肯定不在

239
00:08:06,646 --> 0:08:07,996
用户的思维里

240
00:08:07,996 --> 0:08:09,336
不在用户的脑子里了

241
00:08:09,336 --> 0:08:10,766
所以它们对于帮助用户

242
00:08:10,766 --> 0:08:12,106
了解发生了什么没有帮助

243
00:08:12,886 --> 0:08:16,226
最后 要明确的是 这个过程

244
00:08:16,226 --> 0:08:18,146
会导致很多用例在开始的时候

245
00:08:18,146 --> 0:08:19,476
就被删除事件

246
00:08:19,476 --> 0:08:24,856
但我们认为这非常重要

247
00:08:24,896 --> 0:08:26,296
请为此做准备

248
00:08:26,356 --> 0:08:30,016
因为你才刚刚了解用户

249
00:08:30,156 --> 0:08:31,436
请求始终授权

250
00:08:31,436 --> 0:08:33,000
是需要很多信任的

251
00:08:35,666 --> 0:08:37,106
好了 现在我想

252
00:08:37,206 --> 0:08:38,356
在不同的平台上

253
00:08:38,356 --> 0:08:39,466
讨论始终授权的

254
00:08:39,466 --> 0:08:41,106
实用性和处理方法

255
00:08:42,876 --> 0:08:44,906
所以 tvOS 仅支持使用期间授权

256
00:08:44,906 --> 0:08:48,586
watchOS 真的只需要

257
00:08:48,586 --> 0:08:50,766
使用期间授权

258
00:08:52,106 --> 0:08:53,586
这是因为在 watchOS 里

259
00:08:53,586 --> 0:08:54,816
接入后台运行时间

260
00:08:54,816 --> 0:08:56,256
是受到严格约束的

261
00:08:56,316 --> 0:08:58,016
我们大部分的 API 都

262
00:08:58,016 --> 0:08:59,176
不提供启动行为

263
00:09:01,006 --> 0:09:02,486
此外 类似表盘的上下文

264
00:09:02,486 --> 0:09:03,816
一直处于有效使用中

265
00:09:03,816 --> 0:09:06,256
所以 如果你在致力于做

266
00:09:06,256 --> 0:09:07,406
一个复杂功能 你的 App

267
00:09:07,406 --> 0:09:11,566
可能不需要始终授权

268
00:09:12,306 --> 0:09:14,146
不需要始终授权

269
00:09:15,026 --> 0:09:17,376
类似的 macOS 本身

270
00:09:17,376 --> 0:09:18,736
不支持始终授权

271
00:09:18,736 --> 0:09:21,386
但会自动弹出弹窗

272
00:09:21,386 --> 0:09:23,476
所以你将不需要请求授权

273
00:09:26,066 --> 0:09:27,946
这意味着对于

274
00:09:27,946 --> 0:09:29,926
在 Mac 上的 iPad App

275
00:09:29,926 --> 0:09:30,996
在使用期间授权

276
00:09:30,996 --> 0:09:32,586
和始终授权的作用是相同的

277
00:09:33,876 --> 0:09:35,766
你的 UIKit 代码可以也需要

278
00:09:35,766 --> 0:09:37,296
从它在 iOS 上的使用角度

279
00:09:37,296 --> 0:09:38,326
使用合理的请求

280
00:09:38,326 --> 0:09:44,106
当它在 Mac 上运行的时候

281
00:09:44,316 --> 0:09:46,056
好了 所以 这是始终授权

282
00:09:46,666 --> 0:09:47,886
现在 我们已经

283
00:09:47,886 --> 0:09:49,706
提及了几次关于

284
00:09:49,706 --> 0:09:51,306
什么时候你的 App 

285
00:09:51,306 --> 0:09:53,006
需要用到始终授权

286
00:09:53,616 --> 0:09:55,686
让我们来看看在使用期间授权

287
00:09:55,686 --> 0:09:56,976
然后我想我们将会明白

288
00:10:00,716 --> 0:10:02,186
我想我已经暗示过了

289
00:10:02,246 --> 0:10:05,746
但你可能已经在猜测 如果你的 App

290
00:10:05,936 --> 0:10:07,506
请求在使用期间授权

291
00:10:07,506 --> 0:10:08,846
预先请求

292
00:10:08,846 --> 0:10:10,166
在使用期间授权

293
00:10:10,306 --> 0:10:11,426
用户在这个弹窗里进行授权

294
00:10:11,426 --> 0:10:12,756
然后你的 App 将接收

295
00:10:12,756 --> 0:10:13,446
使用期间授权

296
00:10:13,446 --> 0:10:14,476
没有临时时间

297
00:10:14,476 --> 0:10:19,606
也没有后续弹窗的

298
00:10:19,606 --> 0:10:20,736
它保留了在以后

299
00:10:20,736 --> 0:10:21,766
可能在你引入了一个

300
00:10:21,766 --> 0:10:22,896
确实需要始终授权的新功能时

301
00:10:22,896 --> 0:10:25,506
你请求始终授权的机会

302
00:10:26,256 --> 0:10:29,156
那么在你推出一个厉害的新功能

303
00:10:29,156 --> 0:10:30,846
请求始终授权来支持之前

304
00:10:30,846 --> 0:10:33,046
你能做到什么

305
00:10:35,316 --> 0:10:38,326
在 iOS 12 或者更早的版本里

306
00:10:38,376 --> 0:10:40,426
这张表格可以提供答案

307
00:10:41,756 --> 0:10:43,316
就像你看到的 一个获得

308
00:10:43,316 --> 0:10:45,196
在使用期间授权的 App 可以获得

309
00:10:45,196 --> 0:10:47,536
位置更新 它能地理测距

310
00:10:47,586 --> 0:10:51,546
它甚至能在前台启动位置更新后

311
00:10:51,546 --> 0:10:53,046
通过使用蓝色的

312
00:10:53,046 --> 0:10:55,426
后台使用指示器

313
00:10:55,426 --> 0:10:57,726
在后台的持续获得

314
00:10:58,196 --> 0:10:59,536
位置更新

315
00:11:00,146 --> 0:11:03,926
它不能在后台直接开始位置更新

316
00:11:03,926 --> 0:11:07,276
它也不能使用任何一个

317
00:11:07,276 --> 0:11:08,376
有可能在后台启动的时候

318
00:11:08,376 --> 0:11:10,536
携带位置相关的信息的

319
00:11:10,536 --> 0:11:11,736
监测 API

320
00:11:12,526 --> 0:11:14,586
所以 在这里 什么是持续性的功能

321
00:11:15,836 --> 0:11:16,696
你将注意到

322
00:11:17,386 --> 0:11:18,666
在表格的顶端处的服务

323
00:11:18,666 --> 0:11:21,636
仅仅在使用期间授权下工作

324
00:11:24,156 --> 0:11:25,416
而底端的服务

325
00:11:26,736 --> 0:11:28,106
能够在你的 App 

326
00:11:28,136 --> 0:11:29,166
不在使用期间

327
00:11:29,166 --> 0:11:32,046
仍能传递位置相关的信息

328
00:11:34,576 --> 0:11:35,866
所以 在 iOS 12 里 

329
00:11:35,866 --> 0:11:37,246
只拥有在使用期间授权的 App

330
00:11:37,246 --> 0:11:38,506
无法使用它们

331
00:11:38,506 --> 0:11:41,146
但是 如果底部的这些服务

332
00:11:41,146 --> 0:11:42,326
可以在

333
00:11:42,326 --> 0:11:43,216
一个除非在使用期间

334
00:11:43,216 --> 0:11:44,486
否则不会传递相关信息

335
00:11:44,486 --> 0:11:45,956
的模式里使用呢

336
00:11:46,936 --> 0:11:47,756
在这个例子中

337
00:11:47,756 --> 0:11:48,986
他们是和在使用期间授权相配的

338
00:11:48,986 --> 0:11:50,816
我们可以不用

339
00:11:50,816 --> 0:11:52,536
想太多关于

340
00:11:52,536 --> 0:11:55,426
你的 App 被允许使用什么服务

341
00:11:55,426 --> 0:11:56,656
而开始更多的思考

342
00:11:56,656 --> 0:11:58,896
它是否在使用期间

343
00:11:59,506 --> 0:12:02,716
这是我们在 iOS 13 里做的事

344
00:11:59,506 --> 0:12:02,716
这是我们在 iOS 13 里做的事

345
00:12:03,606 --> 0:12:04,866
现在这里每一个绿色的对勾

346
00:12:04,866 --> 0:12:07,556
都代表着对

347
00:12:07,626 --> 0:12:09,236
我们所有 API 的完全访问权限

348
00:12:09,236 --> 0:12:10,446
包括重要位置变更监测

349
00:12:10,446 --> 0:12:12,696
区域监测

350
00:12:13,266 --> 0:12:14,636
访问监测

351
00:12:15,946 --> 0:12:17,486
如果你的 App 在使用中

352
00:12:17,486 --> 0:12:18,466
它将接收到重要位置变更

353
00:12:18,466 --> 0:12:20,296
进入区域

354
00:12:20,296 --> 0:12:23,196
离开访问事件

355
00:12:23,196 --> 0:12:25,286
如果它不在使用中 它将不会收到

356
00:12:27,136 --> 0:12:29,646
所以 在 iOS 12 系统下 如果你知道

357
00:12:30,026 --> 0:12:31,466
你的 App 需要进行区域监测

358
00:12:31,466 --> 0:12:33,376
你可能会停下来思考

359
00:12:33,376 --> 0:12:35,066
你需要什么样的授权

360
00:12:36,476 --> 0:12:38,766
但是现在 在 iOS 13 里 你需要想得更深一些

361
00:12:40,356 --> 0:12:41,416
无论你需要做什么

362
00:12:41,416 --> 0:12:42,906
你的用户会知道你在做什么吗

363
00:12:43,826 --> 0:12:45,966
用户是否会直接参与进来

364
00:12:47,456 --> 0:12:49,286
简单来说 如果它将或可以

365
00:12:49,286 --> 0:12:50,676
在那个时候处在使用期间

366
00:12:50,676 --> 0:12:53,016
那么使用期间授权就

367
00:12:53,056 --> 0:12:58,756
能够满足你的 App 的需求

368
00:12:58,756 --> 0:13:00,796
所以 你的 App 什么时候会在使用期间呢

369
00:12:58,756 --> 0:13:00,796
所以 你的 App 什么时候会在使用期间呢

370
00:13:01,106 --> 0:13:04,256
好了 在这条时间线上的某个点

371
00:13:04,256 --> 0:13:05,186
你的 App 将进入前台

372
00:13:05,186 --> 0:13:07,756
从那儿开始

373
00:13:07,826 --> 0:13:09,006
直到它进入后台

374
00:13:09,006 --> 0:13:12,516
它将被认为是处在使用期间

375
00:13:12,516 --> 0:13:14,046
事实上这里有几秒钟的时间

376
00:13:14,436 --> 0:13:15,726
所以 这是一个宽限期

377
00:13:15,776 --> 0:13:16,986
这是为了能够 

378
00:13:16,986 --> 0:13:19,316
正好在用户退出 App 之前 

379
00:13:19,316 --> 0:13:21,606
发生需要地理位置的事件时

380
00:13:21,606 --> 0:13:22,926
能够支持你的 App 

381
00:13:22,926 --> 0:13:24,776
但这个时间非常短

382
00:13:24,776 --> 0:13:29,106
所以请不要过于的依赖它

383
00:13:29,446 --> 0:13:30,926
然后你的 App 将会保持

384
00:13:30,956 --> 0:13:32,296
不在使用期间 直到下一次

385
00:13:32,376 --> 0:13:33,506
进入前台 然后

386
00:13:33,506 --> 0:13:34,006
重复这个过程

387
00:13:39,176 --> 0:13:42,656
好的 所以 如果你想要在 Xcode 里

388
00:13:42,706 --> 0:13:44,956
你的 App 支持的后台模式

389
00:13:44,956 --> 0:13:46,976
列表中添加位置更新

390
00:13:47,766 --> 0:13:49,026
那么你同样可以进入这个场景

391
00:13:49,026 --> 0:13:51,236
当你的 App 

392
00:13:51,236 --> 0:13:52,786
进入前台然后

393
00:13:53,996 --> 0:13:55,646
处在使用中

394
00:13:55,646 --> 0:13:57,166
你开始更新你的位置

395
00:13:57,166 --> 0:13:58,566
然后 你在位置管理中

396
00:13:58,566 --> 0:14:00,316
将 allowBackgroundLocationUpdates 

397
00:13:58,566 --> 0:14:00,316
将 allowBackgroundLocationUpdates 

398
00:14:00,316 --> 0:14:01,726
的属性设为真

399
00:14:02,886 --> 0:14:03,956
然后当你的 App 进入

400
00:14:03,956 --> 0:14:05,886
后台 那个蓝色的 

401
00:14:05,886 --> 0:14:08,386
后台指示器将显示

402
00:14:08,386 --> 0:14:10,256
然后你的 App 在这段时间内

403
00:14:10,256 --> 0:14:11,396
将在后台继续

404
00:14:11,396 --> 0:14:12,986
保持处在使用中 直到它

405
00:14:12,986 --> 0:14:14,336
再一次进入前台

406
00:14:16,636 --> 0:14:17,856
然后 在某个时刻你将

407
00:14:17,856 --> 0:14:18,976
allowBackgroudLocationUpdates 属性

408
00:14:18,976 --> 0:14:20,196
设为假

409
00:14:20,196 --> 0:14:21,326
这就能回到

410
00:14:21,326 --> 0:14:22,776
常规行为 当下次你的 App 

411
00:14:22,776 --> 0:14:24,566
离开前台时

412
00:14:24,656 --> 0:14:27,000
它将不再在使用状态

413
00:14:31,516 --> 0:14:32,966
好了 那么复杂功能呢

414
00:14:33,576 --> 0:14:36,106
在现有表盘上的复杂功能

415
00:14:36,106 --> 0:14:37,336
事实上一直在使用中

416
00:14:37,886 --> 0:14:42,176
注意 就像是

417
00:14:42,176 --> 0:14:43,676
后台使用指示器的

418
00:14:43,676 --> 0:14:46,036
宽限时间一样 这是深绿色

419
00:14:46,036 --> 0:14:48,826
你的 App 被认为

420
00:14:48,826 --> 0:14:51,756
不足以在这个状态下请求授权

421
00:14:51,956 --> 0:14:55,766
或者做除了接收位置信息之外的任何事

422
00:14:56,666 --> 0:14:58,066
所以 如果你在做一个

423
00:14:58,066 --> 0:14:59,326
复杂功能 你的 App 可能

424
00:14:59,326 --> 0:15:00,516
不需要始终授权

425
00:14:59,326 --> 0:15:00,516
不需要始终授权

426
00:15:00,516 --> 0:15:02,266
但是你将需要

427
00:15:02,266 --> 0:15:03,466
向你的 App 上下文

428
00:15:03,466 --> 0:15:05,000
寻求授权

429
00:15:07,076 --> 0:15:08,896
还有一个例子 我想要

430
00:15:08,896 --> 0:15:10,116
提醒大家注意

431
00:15:10,116 --> 0:15:11,896
因为这种方式可以

432
00:15:12,026 --> 0:15:13,246
提供很多附加功能

433
00:15:13,246 --> 0:15:15,036
给使用期间授权

434
00:15:15,036 --> 0:15:17,336
你可以直接让用户参与进来

435
00:15:17,676 --> 0:15:19,636
所以 如果你可以这样做 那么

436
00:15:19,636 --> 0:15:21,206
你可以通过 UNLocationNotificationTrigger

437
00:15:21,256 --> 0:15:23,256
创建一个本地通知

438
00:15:23,256 --> 0:15:27,000
标记一个兴趣区域

439
00:15:28,346 --> 0:15:30,216
然后 当用户进入那个区域

440
00:15:30,216 --> 0:15:32,496
那个通知将会成为相关内容

441
00:15:32,496 --> 0:15:34,246
然后向他们显示出来

442
00:15:35,786 --> 0:15:37,066
注意 在这个时候

443
00:15:37,066 --> 0:15:38,106
到了这个时候 你的 App

444
00:15:38,106 --> 0:15:39,396
还没有接收到任何

445
00:15:39,396 --> 0:15:40,556
关于位置 用户地点的信息

446
00:15:40,556 --> 0:15:43,086
这个通知显示或不显示

447
00:15:43,086 --> 0:15:46,346
你都不会被告知

448
00:15:47,626 --> 0:15:49,146
但是 在这个时候 如果

449
00:15:49,146 --> 0:15:51,006
点击了那个通知

450
00:15:51,006 --> 0:15:52,656
然后启动了你的 App

451
00:15:52,656 --> 0:15:54,896
那么你的 App 会在前台

452
00:15:55,026 --> 0:15:56,376
这是在使用中的一般情况

453
00:15:56,616 --> 0:15:57,776
就在使用场景里

454
00:15:57,776 --> 0:16:01,446
在你需要的地方

455
00:15:57,776 --> 0:16:01,446
在你需要的地方

456
00:16:02,026 --> 0:16:03,416
好了 所以记住 所有的

457
00:16:03,416 --> 0:16:05,246
Core Location API 服务 现在都

458
00:16:05,246 --> 0:16:07,076
对所有客户开放

459
00:16:07,076 --> 0:16:09,086
至少在一些情境下开放

460
00:16:09,086 --> 0:16:10,606
你可以通过使用本地通知

461
00:16:10,676 --> 0:16:12,366
或者蓝色的后台使用指示器 

462
00:16:12,366 --> 0:16:14,416
视情况而定 去获得

463
00:16:14,416 --> 0:16:15,596
或者停留在这些情境下

464
00:16:15,596 --> 0:16:19,226
这意味着

465
00:16:19,226 --> 0:16:20,076
现在 你需要

466
00:16:20,076 --> 0:16:21,546
始终授权的情况仅限于

467
00:16:21,546 --> 0:16:23,236
那些用户不能或不想

468
00:16:23,236 --> 0:16:24,966
在你的 App 之前

469
00:16:25,036 --> 0:16:27,000
参与自动化功能

470
00:16:29,526 --> 0:16:30,556
我们希望这会帮助你

471
00:16:30,556 --> 0:16:31,916
将授权故事变得

472
00:16:31,916 --> 0:16:35,206
对其他情况下的用户更友好

473
00:16:39,126 --> 0:16:41,186
好了 还有另一种方式

474
00:16:41,386 --> 0:16:42,436
可以做暂时授权

475
00:16:42,436 --> 0:16:43,786
在使用期间授权

476
00:16:43,786 --> 0:16:45,506
冷却的时候

477
00:16:45,646 --> 0:16:47,086
这时我们允许暂时授权

478
00:16:48,026 --> 0:16:49,456
所以 这就是这个弹窗里的

479
00:16:49,456 --> 0:16:50,606
中间按钮的功能

480
00:16:55,456 --> 0:16:56,746
让我们来看看

481
00:16:56,746 --> 0:16:59,026
你的 App 可以处于的

482
00:16:59,026 --> 0:17:00,056
所有授权情况

483
00:16:59,026 --> 0:17:00,056
所有授权情况

484
00:17:00,056 --> 0:17:01,226
以及一些你能

485
00:17:01,356 --> 0:17:02,626
在 VR 弹窗系统之间做的转换

486
00:17:02,626 --> 0:17:04,616
然后我们能够发现

487
00:17:04,616 --> 0:17:06,406
这个暂时的授权会适用在

488
00:17:06,406 --> 0:17:07,836
哪些情况

489
00:17:08,506 --> 0:17:11,996
从它在 iOS 12 里的

490
00:17:11,996 --> 0:17:13,455
运行的方法开始 当你的 App

491
00:17:13,715 --> 0:17:15,486
第一次进入前台

492
00:17:15,486 --> 0:17:17,965
它的状态是 .notDetermined

493
00:17:17,965 --> 0:17:18,705
这意味着它不能进行访问

494
00:17:18,705 --> 0:17:20,455
顺便说一句

495
00:17:20,455 --> 0:17:21,806
状态越长久将越靠近两侧

496
00:17:21,806 --> 0:17:24,086
授权越高级将

497
00:17:24,165 --> 0:17:25,465
越靠近顶部

498
00:17:25,465 --> 0:17:27,306
所以 .notDetermined 在底部

499
00:17:27,526 --> 0:17:29,216
你的 App 不能访问位置

500
00:17:29,446 --> 0:17:32,446
用户的位置 但是它不是被拒绝的

501
00:17:33,246 --> 0:17:34,206
它是没有被决定的

502
00:17:35,796 --> 0:17:36,836
所以 事实上 在一个

503
00:17:36,836 --> 0:17:38,066
没有被决定的状态下 你的 App 可以

504
00:17:38,066 --> 0:17:39,566
请求一个授权弹窗

505
00:17:40,276 --> 0:17:41,366
当它这样做

506
00:17:41,366 --> 0:17:42,806
它可能会被拒绝 然后它将

507
00:17:42,806 --> 0:17:44,206
不能再次弹出

508
00:17:44,516 --> 0:17:45,926
但是用户也可以

509
00:17:45,926 --> 0:17:49,596
进行使用期间授权

510
00:17:50,086 --> 0:17:52,136
如果你这时

511
00:17:52,136 --> 0:17:53,226
请求一个始终授权

512
00:17:53,226 --> 0:17:56,096
你可以获得一个始终授权 或者你可以

513
00:17:56,096 --> 0:17:57,076
直接在最开始的时候

514
00:17:57,076 --> 0:17:58,166
请求始终授权

515
00:17:59,316 --> 0:18:00,776
所以 那是 iOS 12

516
00:17:59,316 --> 0:18:00,776
所以 那是 iOS 12

517
00:18:01,886 --> 0:18:06,746
现在 在 iOS 13 中 我们已经看到

518
00:18:07,686 --> 0:18:09,336
在通往始终授权的路上

519
00:18:09,336 --> 0:18:11,306
多了一个暂时的状态

520
00:18:11,506 --> 0:18:12,726
叫做临时始终授权

521
00:18:12,726 --> 0:18:14,356
它的功能和

522
00:18:14,356 --> 0:18:15,826
始终授权很类似

523
00:18:16,526 --> 0:18:17,956
但是通过它 过渡回到

524
00:18:18,136 --> 0:18:19,396
在使用期间授权

525
00:18:19,396 --> 0:18:20,126
也是可能的

526
00:18:20,126 --> 0:18:23,916
暂时授权的

527
00:18:23,916 --> 0:18:24,926
工作原理非常相似

528
00:18:25,736 --> 0:18:27,586
这是一个表现得很像

529
00:18:27,856 --> 0:18:29,166
在使用期间授权的临时状态

530
00:18:29,166 --> 0:18:30,866
但会回到

531
00:18:30,866 --> 0:18:32,576
尚未决定的状态

532
00:18:33,186 --> 0:18:35,536
只要你的 App 

533
00:18:35,536 --> 0:18:37,000
退出使用

534
00:18:42,336 --> 0:18:43,886
好了 所以暂时的 这个在使用期间授权

535
00:18:43,886 --> 0:18:45,906
是暂时的

536
00:18:46,666 --> 0:18:50,726
然而在其他方面 它和在使用期间授权的

537
00:18:50,726 --> 0:18:51,916
作用类似

538
00:18:52,056 --> 0:18:54,126
所以 你的位置管理 Delegate

539
00:18:54,126 --> 0:18:55,096
在将授权修改为

540
00:18:55,096 --> 0:18:56,626
在使用期间授权时

541
00:18:56,626 --> 0:18:58,996
将会接收一个回调函数

542
00:18:58,996 --> 0:19:01,986
然后 在之后又会收到回到此前状态

543
00:18:58,996 --> 0:19:01,986
然后 在之后又会收到回到此前状态

544
00:19:02,506 --> 0:19:05,226
但重点是 这发生之后

545
00:19:05,376 --> 0:19:07,036
你的 App 可以也应该

546
00:19:07,036 --> 0:19:08,416
在它下一次需要的时候

547
00:19:08,416 --> 0:19:09,416
再次请求授权

548
00:19:14,936 --> 0:19:18,036
要记住的主要事情是暂时的

549
00:19:18,036 --> 0:19:18,776
使用期间授权

550
00:19:18,776 --> 0:19:20,566
是和你的 App 在什么时候使用

551
00:19:20,566 --> 0:19:22,586
联系紧密的

552
00:19:23,236 --> 0:19:24,836
同时 因为你可以再次请求它

553
00:19:24,836 --> 0:19:26,376
它将与你的 App 流中

554
00:19:26,416 --> 0:19:27,766
确实需要访问位置的部分

555
00:19:27,766 --> 0:19:29,596
紧密相连

556
00:19:31,066 --> 0:19:32,986
所以 让我们从这个角度

557
00:19:33,186 --> 0:19:35,426
看看这个绿色使用图表

558
00:19:36,006 --> 0:19:38,916
所以 这里是最基本的例子

559
00:19:39,076 --> 0:19:40,006
但是我们将让它更基础

560
00:19:40,006 --> 0:19:41,446
通过将第二个使用区域

561
00:19:41,446 --> 0:19:43,686
拖到与第一个相连

562
00:19:45,316 --> 0:19:46,356
现在 当你的 App 

563
00:19:46,436 --> 0:19:48,546
在前台处于使用中 

564
00:19:48,546 --> 0:19:50,966
我们假设用户以某种交互方式

565
00:19:51,326 --> 0:19:52,426
让你知道你的 App

566
00:19:52,426 --> 0:19:52,976
将需要获得授权

567
00:19:53,446 --> 0:19:55,576
所以你在那个时间点

568
00:19:55,606 --> 0:19:56,086
请求授权

569
00:19:56,576 --> 0:19:58,986
用户进行了授权 

570
00:19:58,986 --> 0:20:00,406
仅允许一次

571
00:19:58,986 --> 0:20:00,406
仅允许一次

572
00:20:00,406 --> 0:20:01,996
用户进行了一个暂时的在使用期间授权

573
00:20:03,326 --> 0:20:04,516
这种情况下 你的 App 将

574
00:20:04,516 --> 0:20:05,776
获得在使用期间授权

575
00:20:06,296 --> 0:20:07,296
在剩余的所有前台时间内持续

576
00:20:07,296 --> 0:20:09,226
穿过那段

577
00:20:09,226 --> 0:20:10,506
短暂的进入后台的时间

578
00:20:10,906 --> 0:20:11,776
然后通过下一个

579
00:20:11,776 --> 0:20:13,436
前台时段直到

580
00:20:13,436 --> 0:20:14,756
它在最后完全的

581
00:20:14,756 --> 0:20:16,500
进入后台运行

582
00:20:21,486 --> 0:20:22,306
好了 那么如果

583
00:20:22,306 --> 0:20:23,976
中间的间隔再大一些

584
00:20:23,976 --> 0:20:24,996
你的 App 不在使用状态了

585
00:20:25,026 --> 0:20:26,846
会发生什么呢

586
00:20:28,186 --> 0:20:30,456
用户进行交互

587
00:20:31,236 --> 0:20:32,816
你请求授权

588
00:20:32,816 --> 0:20:34,986
你收到了暂时的

589
00:20:34,986 --> 0:20:36,656
使用期间授权 但是当你

590
00:20:36,656 --> 0:20:38,616
进入后台时 它将失效

591
00:20:39,146 --> 0:20:42,006
所以 你可能在想

592
00:20:42,006 --> 0:20:44,116
好了 我该在

593
00:20:44,316 --> 0:20:45,836
第二个使用阶段的什么时候

594
00:20:45,886 --> 0:20:47,556
申请授权呢

595
00:20:47,776 --> 0:20:48,606
我应该在进入前台时

596
00:20:48,606 --> 0:20:49,396
立刻申请吗

597
00:20:50,916 --> 0:20:51,696
不 你不需要

598
00:20:51,696 --> 0:20:53,586
你需要记住

599
00:20:53,746 --> 0:20:54,946
是什么在一开始

600
00:20:54,946 --> 0:20:56,546
促使你请求授权的

601
00:20:57,586 --> 0:20:58,836
例如 可能用户希望

602
00:20:58,836 --> 0:21:00,456
你能按他们的实时位置

603
00:20:58,836 --> 0:21:00,456
你能按他们的实时位置

604
00:21:00,456 --> 0:21:01,366
更新视图

605
00:21:01,366 --> 0:21:02,946
或者为他们发送的消息

606
00:21:02,946 --> 0:21:03,886
添加地理位置

607
00:21:04,476 --> 0:21:08,146
如果他们在第二个使用阶段

608
00:21:08,216 --> 0:21:09,576
再一次这样做 然后 

609
00:21:09,576 --> 0:21:11,176
你应该为了支持这些要求

610
00:21:11,176 --> 0:21:12,726
而请求授权

611
00:21:12,896 --> 0:21:14,446
如果他们不需要 就不要请求授权

612
00:21:15,306 --> 0:21:17,196
关键在于 如果用户

613
00:21:17,196 --> 0:21:18,866
不希望你在上一次后继续

614
00:21:18,866 --> 0:21:20,106
使用他们的位置

615
00:21:20,106 --> 0:21:21,926
那么不要在你进入前台的时候

616
00:21:21,926 --> 0:21:22,706
就立刻请求授权

617
00:21:24,956 --> 0:21:28,716
好了 但是有时候 可能你在

618
00:21:28,716 --> 0:21:31,366
追踪用户的跑步情况 或者 

619
00:21:31,366 --> 0:21:32,716
帮助他们导航 那么用户将

620
00:21:32,716 --> 0:21:34,456
希望你继续访问

621
00:21:34,456 --> 0:21:37,646
他们的位置

622
00:21:37,756 --> 0:21:40,556
即便在后台运行期间

623
00:21:41,176 --> 0:21:41,766
好了 在那个例子中

624
00:21:41,766 --> 0:21:43,106
我们可能处在这种情况下

625
00:21:43,106 --> 0:21:46,086
在开始运行之后

626
00:21:46,136 --> 0:21:48,126
你请求授权以记录它

627
00:21:48,126 --> 0:21:49,816
然后你接收到

628
00:21:49,816 --> 0:21:50,816
暂时的使用期间授权

629
00:21:50,816 --> 0:21:53,616
你将开始更新位置

630
00:21:53,616 --> 0:21:54,406
你将 allowBackgroundLocationUpdates

631
00:21:54,406 --> 0:21:56,126
设置为真

632
00:21:56,696 --> 0:21:57,956
所以 当你的 App 进入后台

633
00:21:57,956 --> 0:22:01,446
那个蓝色的后台使用指示器会出现

634
00:21:57,956 --> 0:22:01,446
那个蓝色的后台使用指示器会出现

635
00:22:01,446 --> 0:22:03,116
你的 App 将持续保持使用

636
00:22:03,116 --> 0:22:04,576
因此将继续

637
00:22:04,576 --> 0:22:06,816
不被打扰的在后台期间

638
00:22:06,866 --> 0:22:08,246
拥有在使用期间授权

639
00:22:09,876 --> 0:22:11,166
然后 当再次回到

640
00:22:11,216 --> 0:22:13,146
前台使用期间 

641
00:22:13,146 --> 0:22:14,666
结束跑步或者导航

642
00:22:14,736 --> 0:22:16,206
再一次设置 

643
00:22:16,206 --> 0:22:17,886
allowBackgroundLocationUpdates 为假

644
00:22:17,886 --> 0:22:19,276
我们就能回到一般情况

645
00:22:19,876 --> 0:22:22,846
好了 我想提出一个

646
00:22:22,846 --> 0:22:24,376
在你进入前台时立刻

647
00:22:24,376 --> 0:22:26,486
请求授权的一个有效用例

648
00:22:26,486 --> 0:22:28,326
那就是 如果用户

649
00:22:28,326 --> 0:22:29,806
希望你的 App 永久拥有授权

650
00:22:29,806 --> 0:22:31,306
永久的跟随他们的位置一起

651
00:22:31,396 --> 0:22:32,506
更新地图

652
00:22:32,506 --> 0:22:34,096
但是只能在

653
00:22:34,096 --> 0:22:35,296
他们直接要求的情况下

654
00:22:36,256 --> 0:22:37,276
在那些例子中

655
00:22:37,276 --> 0:22:38,376
当你进入前台 请求授权

656
00:22:38,376 --> 0:22:40,046
但是你不对

657
00:22:40,046 --> 0:22:41,126
allowBackgroundLcoationUpdates 进行设置

658
00:22:41,126 --> 0:22:42,876
那么你不会得到

659
00:22:42,876 --> 0:22:44,256
后台使用指示器

660
00:22:44,256 --> 0:22:45,276
你的授权

661
00:22:45,276 --> 0:22:46,686
将在你进入后台的时候失效

662
00:22:47,206 --> 0:22:49,766
然后你再次

663
00:22:49,816 --> 0:22:51,336
到达前台 重复

664
00:22:52,966 --> 0:22:55,596
现在 认真的问你自己

665
00:22:55,596 --> 0:22:56,726
用户是不是真的

666
00:22:56,726 --> 0:22:57,266
希望你这样做

667
00:22:57,336 --> 0:22:58,006
有可能会希望

668
00:22:58,536 --> 0:22:59,986
在这种情况下 你可能

669
00:22:59,986 --> 0:23:02,156
早晚会获得永久的

670
00:22:59,986 --> 0:23:02,156
早晚会获得永久的

671
00:23:02,156 --> 0:23:03,936
使用期间授权

672
00:23:03,936 --> 0:23:05,496
但也可以

673
00:23:05,496 --> 0:23:07,276
在一段时间内继续这样询问

674
00:23:07,276 --> 0:23:08,436
在用户确认

675
00:23:08,436 --> 0:23:10,586
他们是否希望授权之前

676
00:23:15,136 --> 0:23:16,686
好了 所以我们已经看到了

677
00:23:16,686 --> 0:23:18,106
使用期间授权现在可以处理

678
00:23:18,106 --> 0:23:19,576
一些类似区域监测的功能

679
00:23:19,576 --> 0:23:23,356
这个暂时的授权

680
00:23:23,356 --> 0:23:25,836
甚至可以根据具体情况

681
00:23:25,836 --> 0:23:27,686
来提供支持

682
00:23:27,686 --> 0:23:28,866
我答应过向你们介绍一些

683
00:23:28,896 --> 0:23:29,766
修改过的地理测距 API

684
00:23:30,546 --> 0:23:31,656
所以现在我想有请我的同事

685
00:23:31,656 --> 0:23:33,086
Andre Guzzo 上台来

686
00:23:33,086 --> 0:23:34,976
向你们介绍它 Andre

687
00:23:35,516 --> 0:23:41,176
[掌声]

688
00:23:41,676 --> 0:23:42,426
&gt;&gt; 大家好

689
00:23:42,726 --> 0:23:44,406
我叫 Andre Guzzo

690
00:23:44,596 --> 0:23:46,376
我是 Core Location 团队里的

691
00:23:46,376 --> 0:23:49,286
一名工程师

692
00:23:49,286 --> 0:23:50,706
今天在这里我要向你们

693
00:23:50,706 --> 0:23:51,496
介绍地理测距

694
00:23:52,396 --> 0:23:54,886
我们将看到在 iOS 13 里

695
00:23:54,886 --> 0:23:57,776
API 发生了什么变化

696
00:23:57,776 --> 0:24:01,466
我将向你介绍一个简单的

697
00:24:01,516 --> 0:24:03,256
关于如何使用地理测距以及

698
00:24:03,256 --> 0:24:04,786
在不需要始终授权的情况下

699
00:24:04,786 --> 0:24:08,796
向你的用户提供极佳的位置体验的例子

700
00:24:10,576 --> 0:24:12,796
让我们从回顾

701
00:24:12,796 --> 0:24:13,746
什么是地理测距开始

702
00:24:13,746 --> 0:24:14,896
什么是地理测距

703
00:24:15,596 --> 0:24:18,456
我们在 iOS 7 里介绍它为

704
00:24:18,456 --> 0:24:19,626
区域监测 API 的扩展

705
00:24:19,626 --> 0:24:23,476
一种向你的用户

706
00:24:23,476 --> 0:24:25,476
提供的新维度下的

707
00:24:25,476 --> 0:24:28,016
位置感知的体验

708
00:24:30,146 --> 0:24:31,056
这是区域监测 API 的一部分

709
00:24:31,056 --> 0:24:33,626
因为你希望通过

710
00:24:34,656 --> 0:24:37,596
使用区域监测来启动测距

711
00:24:37,756 --> 0:24:40,066
由于地理测距的简介中要求 

712
00:24:40,066 --> 0:24:41,376
拥有始终授权

713
00:24:41,376 --> 0:24:43,276
你希望确定 

714
00:24:43,276 --> 0:24:45,886
在你开始测距之前 你所在的位置

715
00:24:47,156 --> 0:24:48,976
是可见的

716
00:24:48,976 --> 0:24:52,746
这样不浪费资源

717
00:24:52,746 --> 0:24:55,226
现在在 iOS 13 里  

718
00:24:55,226 --> 0:24:57,186
在使用期间授权可以作为替代

719
00:24:57,736 --> 0:25:02,046
所以 就像我说的 我们将

720
00:24:57,736 --> 0:25:02,046
所以 就像我说的 我们将

721
00:25:02,046 --> 0:25:03,706
地理测距作为区域监测的

722
00:25:03,706 --> 0:25:04,666
扩展进行的介绍

723
00:25:04,786 --> 0:25:06,566
所以 为了展示

724
00:25:06,566 --> 0:25:08,776
一个被信标

725
00:25:08,776 --> 0:25:11,336
定义的区域 我们

726
00:25:11,336 --> 0:25:14,616
将 CLRegion 对象扩展成为

727
00:25:14,616 --> 0:25:16,486
CLBeaconRegion

728
00:25:16,486 --> 0:25:17,866
在其他所有属性中

729
00:25:17,866 --> 0:25:19,646
我们包括了

730
00:25:19,646 --> 0:25:22,586
真正定义信标的属性 

731
00:25:22,586 --> 0:25:23,836
他们是 uuid major 和 minor

732
00:25:25,786 --> 0:25:28,246
你可以在 iOS 12 以及之前发布的版本中

733
00:25:28,246 --> 0:25:30,616
将这个数据的类型传递给

734
00:25:30,616 --> 0:25:35,346
地理测距 API

735
00:25:35,346 --> 0:25:36,836
但是 让我们关注这个

736
00:25:36,836 --> 0:25:39,216
它准确的定义了一个信标

737
00:25:39,466 --> 0:25:42,476
你可能在多个信标上发现了相同的配置

738
00:25:42,476 --> 0:25:43,706
但是它会看起来像

739
00:25:43,706 --> 0:25:44,686
一个更大的信标

740
00:25:45,456 --> 0:25:47,866
所以 当我通过所有的元素

741
00:25:47,866 --> 0:25:49,756
来定义一个区域时

742
00:25:49,756 --> 0:25:50,356
事实上我在用

743
00:25:50,356 --> 0:25:51,956
符合条件的信标

744
00:25:51,956 --> 0:25:54,686
来定义一个区域

745
00:25:54,686 --> 0:25:56,346
但是在地理测距的例子中

746
00:25:56,346 --> 0:25:58,836
我们可以忽略 minor 和 major 的数值

747
00:25:58,836 --> 0:26:01,616
这等同于使用一个通配符

748
00:25:58,836 --> 0:26:01,616
这等同于使用一个通配符

749
00:26:01,746 --> 0:26:03,996
所以 我可以忽略 minor 数值

750
00:26:03,996 --> 0:26:05,976
现在我的区域被

751
00:26:05,976 --> 0:26:09,786
拥有同样的 uuid 和 major 数值的信标所定义

752
00:26:09,786 --> 0:26:12,246
同样的 我也可以忽略 major

753
00:26:12,246 --> 0:26:14,326
现在我将我的区域扩展到

754
00:26:14,326 --> 0:26:15,616
包括所有

755
00:26:15,616 --> 0:26:17,876
拥有同样的 uuid 的信标

756
00:26:17,876 --> 0:26:20,706
但是不同的 major 和 minor 数值

757
00:26:21,736 --> 0:26:24,076
这是为什么在 iOS 13 中

758
00:26:24,076 --> 0:26:29,776
我们为了呈现筛选条件

759
00:26:29,776 --> 0:26:32,596
而引入了 IdentityConstraint

760
00:26:32,596 --> 0:26:35,806
它告诉我什么是

761
00:26:35,806 --> 0:26:37,266
我感兴趣的信标

762
00:26:37,266 --> 0:26:38,436
定义我的区域

763
00:26:39,626 --> 0:26:42,506
现在 当你创建你的地理区域时

764
00:26:42,506 --> 0:26:44,536
你将使用这个

765
00:26:44,536 --> 0:26:46,556
IdentityConstraint 这个数据类型

766
00:26:47,106 --> 0:26:49,056
你之后将

767
00:26:49,056 --> 0:26:51,876
创建这个数据类型的实例

768
00:26:51,876 --> 0:26:57,116
因为访问新的区域监测 API 时

769
00:26:57,116 --> 0:26:58,556
需要这个数据类型

770
00:27:02,176 --> 0:27:04,386
我们现在通过

771
00:27:04,386 --> 0:27:07,186
举简单的例子来看看这是如何运行的

772
00:27:09,796 --> 0:27:10,876
想象我们需要

773
00:27:10,876 --> 0:27:13,946
创建一个在参观博物馆时

774
00:27:13,946 --> 0:27:15,186
可以使用的 App

775
00:27:16,246 --> 0:27:18,616
我们希望向参观者

776
00:27:18,616 --> 0:27:20,206
提供他们面前的

777
00:27:20,206 --> 0:27:21,556
作品的细节

778
00:27:22,746 --> 0:27:24,966
无需让用户

779
00:27:24,966 --> 0:27:26,756
打出一些长串的名字

780
00:27:26,756 --> 0:27:28,156
或者浏览目录

781
00:27:29,336 --> 0:27:30,956
为了达到这一点 我们将

782
00:27:30,956 --> 0:27:32,806
在展厅里

783
00:27:32,806 --> 0:27:34,756
设置我们的信标

784
00:27:35,846 --> 0:27:37,646
我们将在所有

785
00:27:37,646 --> 0:27:38,956
在博物馆里部署的信标中

786
00:27:38,956 --> 0:27:40,886
使用相同的 UUID 值

787
00:27:42,106 --> 0:27:45,516
我们将为每一个展厅

788
00:27:45,516 --> 0:27:48,366
设置一个特定的 major 值

789
00:27:48,366 --> 0:27:50,106
为每一个在展厅内特定的作品

790
00:27:50,186 --> 0:27:51,106
设置一个 minor 值

791
00:27:51,986 --> 0:27:53,986
然后 我们将需要能够

792
00:27:53,986 --> 0:27:56,176
判断参观者是否

793
00:27:56,176 --> 0:27:57,756
在其中一个展厅

794
00:27:57,756 --> 0:27:59,066
我们不希望在参观者

795
00:27:59,066 --> 0:28:00,076
在咖啡厅做其他事情的时候

796
00:27:59,066 --> 0:28:00,076
在咖啡厅做其他事情的时候

797
00:28:00,076 --> 0:28:02,726
进行测距

798
00:28:02,896 --> 0:28:03,956
我们希望在我们知道

799
00:28:03,956 --> 0:28:06,556
他在某一个展厅 

800
00:28:06,556 --> 0:28:07,726
参与参观时

801
00:28:07,726 --> 0:28:08,816
再对信标进行测距

802
00:28:08,816 --> 0:28:11,176
在那个时候 我们需要决定

803
00:28:11,176 --> 0:28:12,566
什么是距离参观者

804
00:28:12,566 --> 0:28:15,336
最近的作品

805
00:28:15,336 --> 0:28:17,026
然后提供它的详细信息

806
00:28:19,276 --> 0:28:22,506
最终 所有这些都需要

807
00:28:22,506 --> 0:28:25,176
我们的 App 在使用期间

808
00:28:25,736 --> 0:28:28,626
我们能有把握的假设

809
00:28:28,626 --> 0:28:30,416
因为这是参观者在博物馆里的向导

810
00:28:30,416 --> 0:28:31,496
参观者将已经

811
00:28:31,496 --> 0:28:33,396
在使用我们的 App 了

812
00:28:33,396 --> 0:28:35,476
但是如果我们想要

813
00:28:35,476 --> 0:28:37,616
提醒参观者注意我们的 App

814
00:28:37,616 --> 0:28:39,266
我们可以使用一个本地通知

815
00:28:39,626 --> 0:28:44,076
当参观者亲身到达了博物馆时

816
00:28:44,076 --> 0:28:45,366
进行触发

817
00:28:45,366 --> 0:28:47,156
这样他可以选择

818
00:28:47,426 --> 0:28:50,436
点击 启动我们的 App

819
00:28:52,526 --> 0:28:54,676
所以 让我们看看我们的 App 会是什么样子

820
00:28:55,016 --> 0:28:56,826
这张图呈现了

821
00:28:56,826 --> 0:28:59,466
我们的 App 在使用期间的状态

822
00:29:00,486 --> 0:29:01,876
我们将监控

823
00:29:01,876 --> 0:29:03,626
被信标定义的区域 然后

824
00:29:03,786 --> 0:29:06,126
做出进入和退出事件的反应

825
00:29:06,126 --> 0:29:07,906
当我们在测距时

826
00:29:07,906 --> 0:29:09,766
我们将接收到

827
00:29:09,766 --> 0:29:11,546
临近的信标的更新

828
00:29:12,006 --> 0:29:17,026
让我们关注第一阶段

829
00:29:17,026 --> 0:29:19,116
我们如何定义

830
00:29:19,116 --> 0:29:20,386
信标定义的区域

831
00:29:20,996 --> 0:29:22,196
就像我说的 我们将

832
00:29:22,196 --> 0:29:23,906
在所有的展厅布置信标

833
00:29:23,906 --> 0:29:25,806
我们将在所有的信标上

834
00:29:25,806 --> 0:29:27,256
使用相同的 UUID值

835
00:29:27,256 --> 0:29:29,316
对于所有的展厅使用相同的 Major 值

836
00:29:29,716 --> 0:29:31,626
对特定的对象使用

837
00:29:31,626 --> 0:29:32,636
相同的 Minor 值

838
00:29:33,656 --> 0:29:35,356
由于我们对

839
00:29:35,356 --> 0:29:36,756
参观者什么时候进入

840
00:29:36,756 --> 0:29:38,956
任何一间展厅有兴趣

841
00:29:38,956 --> 0:29:40,936
我们将不考虑 Major 和 Minor

842
00:29:40,936 --> 0:29:42,866
在创建区域时

843
00:29:42,866 --> 0:29:46,816
仅考虑 UUID

844
00:29:47,026 --> 0:29:49,426
我们来看看这在程序里是什么样子

845
00:29:49,426 --> 0:29:52,506
首先 我们需要保证

846
00:29:52,506 --> 0:29:54,566
我们有使用期间授权

847
00:29:56,006 --> 0:29:58,546
然后我们将通过仅提供 UUID

848
00:29:58,546 --> 0:30:02,106
来建立我们的信标约束

849
00:29:58,546 --> 0:30:02,106
来建立我们的信标约束

850
00:30:03,586 --> 0:30:05,656
我们可以将约束作为参数

851
00:30:05,736 --> 0:30:07,616
来给我们的地理测距

852
00:30:07,616 --> 0:30:09,596
创建一个新 API

853
00:30:09,596 --> 0:30:11,000
我们可以开始监测

854
00:30:14,106 --> 0:30:15,636
在这个时候 我们可以明确

855
00:30:15,636 --> 0:30:17,276
什么时候参观者是在展厅内

856
00:30:17,276 --> 0:30:20,476
什么时候在展厅外

857
00:30:20,896 --> 0:30:22,946
所以我们只需要

858
00:30:22,946 --> 0:30:25,176
响应状态变化

859
00:30:25,306 --> 0:30:27,536
当参观者进入其中一个展厅时

860
00:30:27,536 --> 0:30:29,126
我们开始测距

861
00:30:29,126 --> 0:30:32,406
当他离开其中一个展厅时

862
00:30:32,406 --> 0:30:34,796
要停止测距

863
00:30:35,296 --> 0:30:39,176
我们可以通过定义代理的方法

864
00:30:39,176 --> 0:30:42,796
达到这个效果

865
00:30:42,796 --> 0:30:44,746
在代理方法中 我们将依据状态

866
00:30:44,746 --> 0:30:46,166
做出反应

867
00:30:46,166 --> 0:30:48,416
如果我们在里面 我们将开始测距

868
00:30:48,416 --> 0:30:50,576
如果我们在外面 我们将停止测距

869
00:30:51,076 --> 0:30:52,936
就像你看到的 我们可以提供

870
00:30:52,936 --> 0:30:55,066
我们刚才介绍的信标约束

871
00:30:55,156 --> 0:30:57,066
使你能在区域内

872
00:30:57,066 --> 0:30:59,000
进行查找

873
00:31:00,046 --> 0:31:01,016
注意在你第一次启动监测的时候

874
00:31:01,016 --> 0:31:02,846
这个代理方法将被调用

875
00:31:02,846 --> 0:31:04,876
为了了解你的

876
00:31:04,876 --> 0:31:06,146
初始状态 

877
00:31:06,146 --> 0:31:10,186
所以如果参观者已经在

878
00:31:10,186 --> 0:31:11,246
其中一个展厅里

879
00:31:11,246 --> 0:31:13,876
启动你的 App 

880
00:31:13,876 --> 0:31:15,836
你的代理将被调用

881
00:31:15,836 --> 0:31:16,606
状态是在展厅内

882
00:31:16,606 --> 0:31:18,606
所以你将获得信息

883
00:31:21,656 --> 0:31:23,406
好了 现在我们知道

884
00:31:23,406 --> 0:31:25,636
如何对进入和退出展厅

885
00:31:25,636 --> 0:31:27,386
进行响应

886
00:31:27,386 --> 0:31:28,806
我们来看看当我们

887
00:31:28,806 --> 0:31:30,396
在里面 要去弄清

888
00:31:30,396 --> 0:31:32,736
究竟哪一个作品离参观者最近

889
00:31:34,846 --> 0:31:36,416
我们希望提供

890
00:31:36,416 --> 0:31:38,156
参观者面前的

891
00:31:38,156 --> 0:31:39,426
作品的信息

892
00:31:40,056 --> 0:31:41,526
我们想知道

893
00:31:41,526 --> 0:31:44,076
如果参观者进入了展厅

894
00:31:44,076 --> 0:31:47,666
什么是离他最近的作品

895
00:31:47,666 --> 0:31:49,796
我们只需要定义我们的代理方法

896
00:31:49,796 --> 0:31:51,276
它将临时的调用

897
00:31:51,686 --> 0:31:53,506
你临近的信标的

898
00:31:53,506 --> 0:31:56,316
更新状态

899
00:31:56,316 --> 0:31:57,466
你将接收到一个

900
00:31:57,466 --> 0:32:00,256
按照接近程度排列的清单

901
00:31:57,466 --> 0:32:00,256
按照接近程度排列的清单

902
00:32:00,256 --> 0:32:03,256
所以 这样能非常简单的

903
00:32:03,256 --> 0:32:05,146
知道哪一个信标最近

904
00:32:05,146 --> 0:32:06,026
然后进行响应

905
00:32:08,776 --> 0:32:11,006
所以 我们看到了当我们的 App 在运行中时

906
00:32:11,006 --> 0:32:13,196
我们需要做什么

907
00:32:13,196 --> 0:32:16,506
但就像我说的

908
00:32:16,506 --> 0:32:17,976
我们可能希望在参观者一到博物馆时

909
00:32:17,976 --> 0:32:18,946
就吸引到他

910
00:32:18,946 --> 0:32:20,386
最可能的情况是 他们在一天前

911
00:32:20,386 --> 0:32:22,746
或者几天前就下载了我们的 App

912
00:32:23,796 --> 0:32:25,516
所以我们可能想要在

913
00:32:25,606 --> 0:32:27,196
当他到达博物馆内部时 提醒他

914
00:32:27,196 --> 0:32:28,396
启动我们的 App

915
00:32:28,926 --> 0:32:30,646
我们将为了这个用到 

916
00:32:30,646 --> 0:32:33,056
用户的本地通知

917
00:32:33,156 --> 0:32:34,856
它将被位置触发

918
00:32:38,176 --> 0:32:39,586
所以 我们将需要

919
00:32:39,586 --> 0:32:41,366
通过提供我们的博物馆的

920
00:32:41,366 --> 0:32:42,856
地理坐标来创建一个

921
00:32:42,856 --> 0:32:44,316
真正的地理区域

922
00:32:46,646 --> 0:32:49,316
然后 事实上我声明了

923
00:32:49,316 --> 0:32:51,066
我只对到达感兴趣

924
00:32:51,066 --> 0:32:53,506
你可能希望

925
00:32:53,506 --> 0:32:55,076
也为离开的情况

926
00:32:55,076 --> 0:32:58,016
做出反应 你也可以创建通知

927
00:32:58,346 --> 0:32:59,936
然后我们使用 

928
00:32:59,936 --> 0:33:04,066
用户通知 API 来注册我们的本地通知

929
00:32:59,936 --> 0:33:04,066
用户通知 API 来注册我们的本地通知

930
00:33:08,286 --> 0:33:09,386
好了 所以这就是全部

931
00:33:10,696 --> 0:33:13,036
我们对什么是区域测距

932
00:33:13,036 --> 0:33:14,206
进行了简单回顾

933
00:33:14,206 --> 0:33:16,196
我们看到了在 iOS 13 里

934
00:33:16,246 --> 0:33:19,156
地理测距 API 进行了何种改变

935
00:33:19,156 --> 0:33:21,306
以及一个关于

936
00:33:21,306 --> 0:33:23,106
如何在仅有在使用期间授权的情况下

937
00:33:23,106 --> 0:33:25,066
通过使用地理测距来

938
00:33:25,066 --> 0:33:27,756
提供一个极佳的位置感知体验

939
00:33:28,266 --> 0:33:29,936
现在 交还给我的同事 Adam

940
00:33:29,936 --> 0:33:31,626
做最后的总结

941
00:33:32,516 --> 0:33:39,256
[掌声]

942
00:33:39,756 --> 0:33:40,566
&gt;&gt; 谢谢 Andre

943
00:33:41,026 --> 0:33:44,776
所以 什么是我们需要思考的三件事

944
00:33:45,596 --> 0:33:49,946
第一件事是 位置授权已经发生了变化

945
00:33:50,296 --> 0:33:51,466
它在以一些新的方式工作

946
00:33:51,586 --> 0:33:52,696
我们希望它能真正的 

947
00:33:52,696 --> 0:33:54,136
适用你的 App 

948
00:33:54,136 --> 0:33:55,156
以及通过

949
00:33:55,156 --> 0:33:58,986
让用户知道他们的隐私

950
00:33:58,986 --> 0:33:59,966
是被小心保护的

951
00:34:00,116 --> 0:34:02,476
来提高用户与你的 App 进行交互的信心

952
00:34:04,126 --> 0:34:05,056
这意味着我们希望你能够

953
00:34:05,056 --> 0:34:07,356
测试你的 App

954
00:34:08,065 --> 0:34:09,545
尝试仅依靠进行

955
00:34:09,545 --> 0:34:11,206
暂时授权

956
00:34:11,286 --> 0:34:12,835
暂时的使用期间授权

957
00:34:12,976 --> 0:34:15,326
它管用吗 它令人气恼吗

958
00:34:16,005 --> 0:34:17,295
你能为提高你的

959
00:34:17,576 --> 0:34:19,376
用户体验做什么

960
00:34:19,376 --> 0:34:20,306
让他们不需要在

961
00:34:20,306 --> 0:34:22,606
做好准备之前

962
00:34:22,916 --> 0:34:24,126
决定授权或者拒绝始终授权

963
00:34:24,126 --> 0:34:25,976
对他们位置的访问

964
00:34:26,516 --> 0:34:29,446
然后 本着测试的精神

965
00:34:29,485 --> 0:34:32,116
测距有了一个新的

966
00:34:32,116 --> 0:34:33,896
能帮助你使

967
00:34:34,206 --> 0:34:35,795
位置相关的体验

968
00:34:35,795 --> 0:34:37,516
变得非常好的方法

969
00:34:37,516 --> 0:34:40,496
我们今天提到了

970
00:34:40,596 --> 0:34:42,456
一个例子 它非常有助于

971
00:34:42,456 --> 0:34:45,396
研究新的测距 API

972
00:34:45,716 --> 0:34:48,000
例子很简单 正好是你需要知道的

973
00:34:51,106 --> 0:34:52,946
好了 如果你有任何问题

974
00:34:52,946 --> 0:34:54,186
我们在这周会有两个实验室

975
00:34:54,255 --> 0:34:57,466
其中一个在一个小时左右之后

976
00:34:57,466 --> 0:34:58,426
我不知道具体的时间

977
00:34:58,426 --> 0:35:01,076
有一个是今天上午 11 点到 1 点

978
00:34:58,426 --> 0:35:01,076
有一个是今天上午 11 点到 1 点

979
00:35:01,076 --> 0:35:03,000
另一个是明天下午的 1 点到 3 点

980
00:35:04,476 --> 0:35:05,666
你已经在主题演讲

981
00:35:05,666 --> 0:35:06,816
以及 Platforms State of Union 演讲中

982
00:35:06,816 --> 0:35:08,686
听过了暂时授权

983
00:35:08,686 --> 0:35:10,326
这是第三次

984
00:35:10,376 --> 0:35:11,356
所以 如果你想听

985
00:35:11,356 --> 0:35:12,326
第四次 他们将

986
00:35:12,326 --> 0:35:13,716
在下午两点

987
00:35:13,716 --> 0:35:16,166
Designing for Privacy 中讲到

988
00:35:16,316 --> 0:35:17,606
在本周剩下的时间里

989
00:35:17,606 --> 0:35:19,186
几个有关地图的分享

990
00:35:19,186 --> 0:35:21,906
室内和室外都有

991
00:35:21,906 --> 0:35:23,106
和 Core Location 很搭配

992
00:35:23,106 --> 0:35:25,926
本场会议就不再赘述了

993
00:35:26,306 --> 0:35:27,846
最重要的事是

994
00:35:27,876 --> 0:35:29,156
在 WWDC19 享受

995
00:35:29,156 --> 0:35:32,176
本周剩下的时间

996
00:35:32,176 --> 0:35:33,976
我们期待在实验室见到你

997
00:35:34,516 --> 0:35:39,500
[掌声]
