1
00:00:06,039 --> 0:00:09,843
介绍PencilKit

2
00:00:13,881 --> 0:00:14,748
下午好

3
00:00:14,815 --> 0:00:16,783
欢迎来到

4
00:00:17,351 --> 0:00:18,919
我是Will Thimbleby

5
00:00:20,120 --> 0:00:23,490
我想来聊一聊这个美妙的小物件

6
00:00:24,091 --> 0:00:25,492
这是Apple Pencil

7
00:00:25,859 --> 0:00:30,464
它能完全转变你在iPad上的

8
00:00:33,367 --> 0:00:37,871
事实上

9
00:00:39,106 --> 0:00:43,210
从学龄前儿童

10
00:00:43,277 --> 0:00:45,979
从你的待办清单到美术

11
00:00:46,847 --> 0:00:48,815
Pencil是一切的开始

12
00:00:51,084 --> 0:00:54,288
它可在美妙的

13
00:00:55,756 --> 0:01:00,861
以及iPad产品线下的所有设备

14
00:00:55,756 --> 0:01:00,861
以及iPad产品线下的所有设备

15
00:01:02,930 --> 0:01:06,266
它很适合用来修正图片

16
00:01:06,667 --> 0:01:11,805
标注 涂鸦 事实上

17
00:01:15,542 --> 0:01:20,180
在iOS 13

18
00:01:21,114 --> 0:01:23,951
我们加入了一个漂亮的新工具调色板

19
00:01:25,419 --> 0:01:28,622
我们向你介绍

20
00:01:29,256 --> 0:01:31,525
为你的app

21
00:01:32,926 --> 0:01:35,162
我们也会介绍随处标记

22
00:01:35,229 --> 0:01:37,397
来让用户能为你的app内容

23
00:01:37,464 --> 0:01:39,633
做注释和标记

24
00:01:40,167 --> 0:01:42,603
甚至如果你的app

25
00:01:43,337 --> 0:01:46,173
我们来了解一下Pencil

26
00:01:46,874 --> 0:01:49,910
PencilKit如何协助你

27
00:01:50,143 --> 0:01:52,246
最后 随处标记中会介绍

28
00:01:52,312 --> 0:01:56,583
你应该如何为用户提供内容

29
00:01:58,385 --> 0:02:00,554
一个好的Pencil体验

30
00:01:58,385 --> 0:02:00,554
一个好的Pencil体验

31
00:02:02,022 --> 0:02:05,526
一个好的Pencil体验

32
00:02:05,592 --> 0:02:07,528
Apple Pencil

33
00:02:09,896 --> 0:02:11,732
那意味着全面利用

34
00:02:12,032 --> 0:02:14,401
Apple Pencil

35
00:02:15,269 --> 0:02:16,803
它让你触碰到一个像素

36
00:02:17,137 --> 0:02:20,607
它每秒能为你提供240次信息

37
00:02:21,608 --> 0:02:26,446
它是独特地表达 为你提供了力度

38
00:02:26,613 --> 0:02:30,017
让你为你的app创建真正

39
00:02:30,384 --> 0:02:31,785
让你的app更有活力

40
00:02:33,120 --> 0:02:37,424
最后 第二代Apple Pencil

41
00:02:37,925 --> 0:02:40,527
用户可以在你的app中

42
00:02:40,994 --> 0:02:42,729
不用放下Pencil就能切换模式

43
00:02:44,965 --> 0:02:47,434
现在有三种不同类型的Pencil

44
00:02:47,901 --> 0:02:49,503
第一代Apple Pencil

45
00:02:49,770 --> 0:02:52,239
第二代

46
00:02:53,440 --> 0:02:55,576
它们有略微不同的功能

47
00:02:55,642 --> 0:02:58,512
它们都具备很棒的精准度

48
00:02:59,646 --> 0:03:02,549
它们都有相同水平的坐标和高度定位

49
00:02:59,646 --> 0:03:02,549
它们都有相同水平的坐标和高度定位

50
00:03:02,616 --> 0:03:04,384
允许你创建富有表现力的标记

51
00:03:05,752 --> 0:03:09,556
第一代Pencil具有压力感应

52
00:03:10,324 --> 0:03:13,760
第二代Pencil加入了手势识别

53
00:03:16,597 --> 0:03:19,733
我会深入的介绍一些

54
00:03:19,800 --> 0:03:21,602
所支持的更复杂的细节

55
00:03:22,936 --> 0:03:24,204
如果你刚开始

56
00:03:24,271 --> 0:03:26,373
你想要创建一个自定义的绘画体验

57
00:03:26,740 --> 0:03:30,410
我会非常建议你查看

58
00:03:30,477 --> 0:03:32,279
使用iOS的触控输入

59
00:03:35,148 --> 0:03:37,851
了解一支Pencil如何工作

60
00:03:39,720 --> 0:03:41,822
的关键是清楚它是什么

61
00:03:43,123 --> 0:03:45,492
因此 我会给你介绍一下

62
00:03:45,659 --> 0:03:47,461
Pencil背后的功能

63
00:03:49,429 --> 0:03:52,900
Pencil在屏幕上创建了

64
00:03:53,367 --> 0:03:55,602
它是240赫兹

65
00:03:56,703 --> 0:03:58,305
你知道的 它的水平坐标

66
00:03:58,372 --> 0:04:01,975
就是它和iPad的垂直角度坐标

67
00:03:58,372 --> 0:04:01,975
就是它和iPad的垂直角度坐标

68
00:04:06,313 --> 0:04:08,482
它的高度坐标或倾斜度

69
00:04:09,183 --> 0:04:11,785
是你握着Pencil时的梯度

70
00:04:12,653 --> 0:04:14,821
你可能不知道它是如何做到的

71
00:04:15,656 --> 0:04:18,225
Pencil在iPad的表面

72
00:04:18,291 --> 0:04:19,593
产生了第二个隐藏的触点

73
00:04:20,127 --> 0:04:25,065
使用三角学来计算水平和垂直坐标

74
00:04:27,968 --> 0:04:31,705
最后 Pencil

75
00:04:32,005 --> 0:04:35,442
来探测压力和通过

76
00:04:37,978 --> 0:04:39,813
这样会导致几个后果

77
00:04:40,881 --> 0:04:44,985
首先 如果一只手指或屏幕边缘

78
00:04:45,319 --> 0:04:47,254
的第二个触点被检测到时

79
00:04:47,821 --> 0:04:50,457
水平和垂直的值将会被估量

80
00:04:52,659 --> 0:04:56,964
Pencil和iPad似成直角时

81
00:04:58,098 --> 0:05:02,402
最后 通过一个不同的机制

82
00:04:58,098 --> 0:05:02,402
最后 通过一个不同的机制

83
00:05:02,769 --> 0:05:04,938
会在触碰位置信息产生延时

84
00:05:06,139 --> 0:05:10,077
处理Pencil的这些复杂的方面

85
00:05:10,143 --> 0:05:12,779
是创建一个良好的Pencil

86
00:05:15,949 --> 0:05:18,018
当我从屏幕的边缘描画时

87
00:05:19,152 --> 0:05:21,588
我会获取到估量的水平和垂直的坐标

88
00:05:24,258 --> 0:05:26,493
当我继续向屏幕中央画画时

89
00:05:27,094 --> 0:05:29,630
第二个触点在屏幕的表面产生了

90
00:05:30,697 --> 0:05:32,032
你获取了正确的值

91
00:05:32,599 --> 0:05:34,902
现在 你应该返回重新修正这些值

92
00:05:35,736 --> 0:05:37,704
修正之前估计的值

93
00:05:37,771 --> 0:05:39,306
而不是让它像这样留在这

94
00:05:45,145 --> 0:05:46,680
第二 当你画画时

95
00:05:48,115 --> 0:05:52,386
Pencil后面的一个被

96
00:05:55,088 --> 0:05:58,125
你应该不断监听压力的更新

97
00:05:58,492 --> 0:06:00,227
这样你就能绘制正确的值

98
00:05:58,492 --> 0:06:00,227
这样你就能绘制正确的值

99
00:06:01,895 --> 0:06:06,366
当Pencil在iPad表面

100
00:06:07,501 --> 0:06:09,303
笔画的一个区域

101
00:06:09,937 --> 0:06:12,306
还在等待最后的压力值

102
00:06:12,739 --> 0:06:16,043
甚至在触碰结束后

103
00:06:19,746 --> 0:06:21,148
现在 其中的一个方面

104
00:06:22,316 --> 0:06:26,520
意味着在最后笔画获取到最后值之前

105
00:06:27,354 --> 0:06:30,924
用户就能开始画下一条线

106
00:06:33,327 --> 0:06:37,998
我推荐一次只使用一个串行队列

107
00:06:38,932 --> 0:06:42,870
时间很短 用户不会察觉到

108
00:06:43,403 --> 0:06:45,138
但你想要正确地处理数据

109
00:06:48,175 --> 0:06:51,912
另一个让Pencil

110
00:06:53,614 --> 0:06:54,915
使用实体的笔时

111
00:06:54,982 --> 0:06:58,552
笔会和描绘的部分产生实际的接触

112
00:07:00,254 --> 0:07:01,922
在一个电子设备上时

113
00:07:02,523 --> 0:07:06,260
操作时通常

114
00:07:06,326 --> 0:07:07,895
和屏幕上的线会有一个间隙

115
00:07:09,296 --> 0:07:12,733
保持间隙尽可能的小

116
00:07:13,033 --> 0:07:15,936
的感觉是一个重要的点

117
00:07:21,542 --> 0:07:24,545
在Apple

118
00:07:24,745 --> 0:07:27,481
我们有机器人在不断的测试

119
00:07:28,715 --> 0:07:31,285
这是我们的一个测试

120
00:07:31,818 --> 0:07:33,687
每秒800帧率的高速截图

121
00:07:34,087 --> 0:07:35,856
你能看到笔和线之间的距离

122
00:07:35,923 --> 0:07:38,225
非常的小

123
00:07:40,394 --> 0:07:42,062
我来实时向你展示

124
00:07:44,264 --> 0:07:45,132
看到了吗？

125
00:07:45,265 --> 0:07:46,266
再来一次

126
00:07:50,237 --> 0:07:53,607
那么 一些减少延时的几个小窍门

127
00:07:54,641 --> 0:07:56,677
首先 你需要在Metal中渲染

128
00:07:57,778 --> 0:08:00,214
你的每帧只有几毫秒

129
00:07:57,778 --> 0:08:00,214
你的每帧只有几毫秒

130
00:08:00,280 --> 0:08:03,417
以及 你需要逐帧不断地重复

131
00:08:03,884 --> 0:08:05,152
来减少延时

132
00:08:06,887 --> 0:08:10,257
在iOS 13 我们很大幅度

133
00:08:10,624 --> 0:08:14,661
你应该使用预测触碰来

134
00:08:17,598 --> 0:08:20,200
最后 如果你在创建

135
00:08:20,767 --> 0:08:22,769
为了实现最低的延时

136
00:08:23,303 --> 0:08:26,507
你应该避免使用

137
00:08:26,840 --> 0:08:29,276
也要避免使用比如模糊效果的

138
00:08:29,676 --> 0:08:33,212
UI特效视图

139
00:08:34,581 --> 0:08:37,451
以及常常被忽视的一点是

140
00:08:37,518 --> 0:08:39,886
默认的导航栏

141
00:08:40,287 --> 0:08:45,058
事实上 主界面可视性会为渲染

142
00:08:46,059 --> 0:08:49,730
Pencil轻触手势

143
00:08:50,397 --> 0:08:53,600
这是让用户不用放下Pencil

144
00:08:54,434 --> 0:08:56,537
就能切换模式最好的方式

145
00:09:00,107 --> 0:09:03,143
为了实现 你需要使用

146
00:09:04,711 --> 0:09:06,113
将你自己设置委托

147
00:09:06,747 --> 0:09:08,982
当用户轻触时

148
00:09:10,350 --> 0:09:14,755
当你这么做时 你应该尊重

149
00:09:15,389 --> 0:09:18,091
这是用户能在设置中选择的

150
00:09:18,926 --> 0:09:22,262
如果可以 你应该要遵循它

151
00:09:23,430 --> 0:09:25,365
如果你的app无法遵循

152
00:09:26,633 --> 0:09:29,870
Pencil轻触应该被用来切换

153
00:09:33,440 --> 0:09:35,042
那么 到目前为止

154
00:09:35,409 --> 0:09:39,079
创建一个好的Pencil体验

155
00:09:39,746 --> 0:09:43,450
我们提供了一些很棒的API和硬件

156
00:09:44,751 --> 0:09:47,821
你在世界上创建了

157
00:09:48,655 --> 0:09:51,325
我高亮了一些更好的支持

158
00:09:51,391 --> 0:09:52,860
的更复杂的部分

159
00:09:53,560 --> 0:09:57,064
如果你还没有认为这些是改进部分

160
00:09:57,831 --> 0:10:00,501
但对你们中刚刚开始的人

161
00:09:57,831 --> 0:10:00,501
但对你们中刚刚开始的人

162
00:10:03,070 --> 0:10:05,639
我们想要为你分担一部分工作

163
00:10:06,807 --> 0:10:11,111
所以 我很高兴来为大家

164
00:10:19,887 --> 0:10:23,857
PencilKit是我们在

165
00:10:24,758 --> 0:10:28,729
我们在Notes使用它来提供

166
00:10:29,363 --> 0:10:32,633
我们在Pages使用它来

167
00:10:33,100 --> 0:10:36,270
我们在随处标记中使用它来

168
00:10:36,336 --> 0:10:38,205
以及你app内容的PDF

169
00:10:39,139 --> 0:10:42,376
我们有几次为一些开发者

170
00:10:42,643 --> 0:10:46,480
在他们的app增加了功能

171
00:10:48,682 --> 0:10:52,019
在你的app中添加它只需三行代码

172
00:10:55,455 --> 0:10:57,291
这里 我们创建了一个画布

173
00:10:57,824 --> 0:11:00,194
在你的视图层级中添加它

174
00:10:57,824 --> 0:11:00,194
在你的视图层级中添加它

175
00:11:01,962 --> 0:11:06,900
就这样 你就获得了整个操作系统

176
00:11:07,234 --> 0:11:09,136
相同的业内领先的低延时

177
00:11:09,536 --> 0:11:13,707
我们用几个小时完善的

178
00:11:14,708 --> 0:11:17,978
以及一样美妙的UI和调色板工具

179
00:11:19,713 --> 0:11:21,348
只需更多的几行代码

180
00:11:21,415 --> 0:11:24,818
你就能创建更全面的功能 比如

181
00:11:25,819 --> 0:11:27,154
我现在来向你展示

182
00:11:30,524 --> 0:11:32,693
这是我们的示例app

183
00:11:32,960 --> 0:11:36,129
它是一个小小的画图app

184
00:11:36,196 --> 0:11:38,732
它里面有一些我之前画的缩略图

185
00:11:39,433 --> 0:11:43,070
为了给你一个PencilKit

186
00:11:44,204 --> 0:11:45,339
我想你展示其中的一些

187
00:11:45,405 --> 0:11:46,807
这是我之前做的一些笔记

188
00:11:46,874 --> 0:11:49,743
我们来滚动浏览这些美丽的笔记

189
00:11:52,412 --> 0:11:55,382
这里有一张我朋友Andy画的

190
00:11:56,950 --> 0:12:01,321
让我有机会介绍PencilKit

191
00:11:56,950 --> 0:12:01,321
让我有机会介绍PencilKit

192
00:12:02,122 --> 0:12:03,690
如果我拉下控制中心

193
00:12:04,958 --> 0:12:06,493
我能切换至深色

194
00:12:07,494 --> 0:12:12,332
这朵花在深色模式中和在

195
00:12:15,135 --> 0:12:17,571
当我返回

196
00:12:18,005 --> 0:12:20,274
你能看到笔记非常清晰

197
00:12:22,376 --> 0:12:23,577
但我很幸运

198
00:12:23,877 --> 0:12:25,779
我做到了每个工程师都想要实现的

199
00:12:25,846 --> 0:12:28,348
梦想 就是在舞台上画画

200
00:12:31,385 --> 0:12:34,454
那么 我切回至浅色模式

201
00:12:35,989 --> 0:12:39,226
我来继续完成我之前画的一个图标

202
00:12:41,762 --> 0:12:44,631
在底部 你能看到我们新设计

203
00:12:45,599 --> 0:12:46,600
用一只手指

204
00:12:46,667 --> 0:12:49,269
我就能在屏幕中拖动它至

205
00:12:51,939 --> 0:12:53,874
现在 我将它留在屏幕底部

206
00:12:54,374 --> 0:12:57,544
为了完成它 我来使用尺子和记号笔

207
00:12:58,946 --> 0:13:00,781
这样 我能轻点这个尺子来使用它

208
00:12:58,946 --> 0:13:00,781
这样 我能轻点这个尺子来使用它

209
00:13:01,181 --> 0:13:03,717
使用两只手指来为尺子确定位置

210
00:13:04,985 --> 0:13:09,456
我能使用尺子来画一条直线

211
00:13:10,557 --> 0:13:11,792
我来这么做

212
00:13:15,295 --> 0:13:17,331
我再来添加一些颜色

213
00:13:26,373 --> 0:13:28,108
轻点尺子来让它消失

214
00:13:28,909 --> 0:13:30,677
我在底部添加一些颜色

215
00:13:32,746 --> 0:13:35,582
现在 PencilKit能做的

216
00:13:36,283 --> 0:13:39,520
它开始将位图和矢量

217
00:13:40,187 --> 0:13:41,355
物件和像素整合在一起

218
00:13:42,489 --> 0:13:44,525
你能再这里看到橡皮擦

219
00:13:45,192 --> 0:13:47,427
我将在Apple Pencil

220
00:13:47,494 --> 0:13:49,396
双击手势来改变橡皮擦

221
00:13:51,865 --> 0:13:53,600
就像这样 我切换了模式

222
00:13:54,368 --> 0:13:57,604
这是一个像素橡皮擦

223
00:13:58,372 --> 0:14:00,440
裁剪了这个图标的其他部分

224
00:13:58,372 --> 0:14:00,440
裁剪了这个图标的其他部分

225
00:14:12,219 --> 0:14:15,455
现在 如果我点击橡皮擦

226
00:14:15,889 --> 0:14:18,559
使用物件橡皮擦

227
00:14:19,259 --> 0:14:22,062
我也能删除我裁剪的位

228
00:14:26,133 --> 0:14:29,336
像这样

229
00:14:30,737 --> 0:14:31,638
来画图

230
00:14:31,972 --> 0:14:32,906
我再向你展示一遍

231
00:14:33,173 --> 0:14:35,042
我轻点 我得到了像素橡皮擦

232
00:14:38,278 --> 0:14:39,413
我将它切断

233
00:14:39,580 --> 0:14:43,483
这一次 我会使用套索工具

234
00:14:48,088 --> 0:14:52,993
我能将它移动到我想的地方

235
00:14:54,595 --> 0:14:58,699
现在 我完成了我的创作

236
00:14:58,765 --> 0:15:01,902
幸运的是 我们示例app

237
00:14:58,765 --> 0:15:01,902
幸运的是 我们示例app

238
00:15:02,703 --> 0:15:05,272
在右上方 我点击签名

239
00:15:06,106 --> 0:15:08,809
你会注意到 当我这么做的时候

240
00:15:09,376 --> 0:15:11,445
我们这里有一个自定义的选择器

241
00:15:11,512 --> 0:15:13,580
它让我选择一个黑色或蓝色的墨水

242
00:15:14,681 --> 0:15:16,884
现在 我选择黑色

243
00:15:18,585 --> 0:15:20,320
来加上我的签名

244
00:15:22,122 --> 0:15:25,792
现在完成了

245
00:15:28,095 --> 0:15:30,464
看吧 这是一个放置它的好地方

246
00:15:30,564 --> 0:15:31,765
我认为我可以为它装框了

247
00:15:33,767 --> 0:15:34,635
非常酷

248
00:15:36,503 --> 0:15:37,337
好的

249
00:15:43,710 --> 0:15:46,446
我们来讲一下

250
00:15:48,048 --> 0:15:50,350
你会用到的最主要的物件是

251
00:15:50,684 --> 0:15:52,953
它为你的app提供了

252
00:15:55,622 --> 0:15:58,392
PKDrawing是数据模型

253
00:15:59,259 --> 0:16:01,361
它捕获了所有的这些美丽的线条

254
00:15:59,259 --> 0:16:01,361
它捕获了所有的这些美丽的线条

255
00:16:03,230 --> 0:16:07,868
PKToolPicker提供了

256
00:16:09,803 --> 0:16:13,540
PKTools是提供这些墨水

257
00:16:14,007 --> 0:16:16,743
和你画布上的交互的工具集

258
00:16:21,215 --> 0:16:25,586
PKCanvasView是一个

259
00:16:26,453 --> 0:16:28,188
它让你选择用户

260
00:16:28,455 --> 0:16:31,358
通过设置工具 用户交互行为

261
00:16:31,859 --> 0:16:33,961
它允许你通过它获取数据模型

262
00:16:35,128 --> 0:16:38,031
使用绘图属性来为它设置数据模型

263
00:16:40,834 --> 0:16:43,270
PKDrawing是

264
00:16:43,737 --> 0:16:46,940
它是macOS上的

265
00:16:48,876 --> 0:16:53,547
它有一个数据形式 它允许你

266
00:16:55,082 --> 0:16:57,184
你能使用这些绘图数据来制作图片

267
00:16:57,384 --> 0:16:59,152
用于分享或缩略图

268
00:17:01,688 --> 0:17:04,724
我们来看看示例app是如何制作

269
00:17:07,461 --> 0:17:10,631
因为这些值都有类型

270
00:17:10,897 --> 0:17:13,367
我们在一个后台的队列中安全的

271
00:17:15,836 --> 0:17:19,839
因为我们想要在app的浅色

272
00:17:19,906 --> 0:17:21,441
都能制作这些缩略图

273
00:17:22,309 --> 0:17:25,378
我们可以使用UITraitCollections的

274
00:17:29,249 --> 0:17:31,718
我们使用图画来制作这张图片

275
00:17:32,719 --> 0:17:36,657
接下来 最后 我们在主线程中设置

276
00:17:39,893 --> 0:17:42,362
现在我想邀请Jenny

277
00:17:43,130 --> 0:17:45,332
她将会为大家介绍关于工具

278
00:17:46,200 --> 0:17:49,403
以及PencilKit能实现的

279
00:17:58,278 --> 0:18:01,248
谢谢Will

280
00:17:58,278 --> 0:18:01,248
谢谢Will

281
00:18:01,315 --> 0:18:03,584
我们来通过

282
00:18:03,917 --> 0:18:07,154
一些很棒的工具来继续介绍

283
00:18:08,322 --> 0:18:11,558
这些工具在全新的

284
00:18:11,792 --> 0:18:12,759
它是动态的

285
00:18:13,026 --> 0:18:14,228
它悬浮在所有物件的上方

286
00:18:14,294 --> 0:18:16,530
我能将它从一边拖到另一边

287
00:18:16,597 --> 0:18:20,501
或甚至让它在底部成为

288
00:18:22,736 --> 0:18:25,839
Will之前提到过

289
00:18:26,273 --> 0:18:29,843
为了创建这些工具 它们是

290
00:18:30,177 --> 0:18:32,346
你可以从这三种类型中制定一个

291
00:18:32,479 --> 0:18:36,783
笔 记号笔或铅笔

292
00:18:40,087 --> 0:18:43,790
这些工具都是超级动态

293
00:18:43,991 --> 0:18:47,094
你甚至可以通过一条单独的线

294
00:18:47,528 --> 0:18:51,832
基于不同Pencil属性 如压力

295
00:18:52,366 --> 0:18:56,270
或速度来让宽度

296
00:18:58,805 --> 0:19:04,344
你可以在canvasView

297
00:18:58,805 --> 0:19:04,344
你可以在canvasView

298
00:19:04,745 --> 0:19:07,881
如果你设置canvasView为

299
00:19:08,448 --> 0:19:11,818
底层会在canvasView上

300
00:19:12,419 --> 0:19:16,823
不过 如果你有签名面板

301
00:19:17,457 --> 0:19:19,726
你可以自己在你的app设置

302
00:19:20,694 --> 0:19:23,564
至于PKInkingTool

303
00:19:23,997 --> 0:19:28,802
笔 记号笔 铅笔 颜色或宽度

304
00:19:31,038 --> 0:19:35,309
对于宽度的值

305
00:19:35,876 --> 0:19:39,513
不过 就像我们之前看到的

306
00:19:39,580 --> 0:19:42,149
它基于不同的笔的属性会改变

307
00:19:42,683 --> 0:19:45,719
因此 还不如让这个宽度基于一个

308
00:19:46,019 --> 0:19:49,456
平均用户笔的特征来表示一个基准值

309
00:19:50,490 --> 0:19:54,761
你也可以查询每个墨水类型

310
00:19:57,197 --> 0:19:59,666
你可以看到我在这里使用了笔的工具

311
00:20:00,234 --> 0:20:04,638
当我越垂直地握着这支笔

312
00:20:04,938 --> 0:20:08,709
但当我越水平地握着这支笔

313
00:20:09,643 --> 0:20:12,012
当我在选择器工具中改变粗细

314
00:20:12,546 --> 0:20:14,481
粗细的程度相应的变化了

315
00:20:18,185 --> 0:20:20,454
我们也有一个PKEraser工具

316
00:20:20,521 --> 0:20:23,957
你可以用它来指定一个矢量或位图

317
00:20:24,992 --> 0:20:28,996
矢量会与物件对应

318
00:20:29,830 --> 0:20:31,331
我们已经很努力地

319
00:20:31,431 --> 0:20:34,568
统一矢量和位图的两个世界

320
00:20:35,068 --> 0:20:37,838
矢量是物件 位图是像素

321
00:20:38,472 --> 0:20:41,708
我们也切断这些线条

322
00:20:41,775 --> 0:20:43,777
或之后再移除这些物件

323
00:20:44,077 --> 0:20:47,347
而不只是消除屏幕上的像素

324
00:20:50,918 --> 0:20:54,121
我们也有负责

325
00:20:55,389 --> 0:20:59,126
使用套索工具 你就能选择你需要

326
00:20:59,626 --> 0:21:03,230
接下来 你能四处拖动它们

327
00:20:59,626 --> 0:21:03,230
接下来 你能四处拖动它们

328
00:21:03,497 --> 0:21:06,400
或甚至拖拽它们到不同的app中

329
00:21:08,635 --> 0:21:12,472
iOS 13的新功能

330
00:21:13,941 --> 0:21:18,478
值得注意的是尺子不是一个工具

331
00:21:18,545 --> 0:21:21,481
而是一个你在画布中切换的属性

332
00:21:21,849 --> 0:21:23,984
展示或隐藏尺子

333
00:21:25,519 --> 0:21:29,790
你能拖动它来以它为基准

334
00:21:30,057 --> 0:21:32,226
或以它为蒙版

335
00:21:32,292 --> 0:21:35,896
这里是水和草

336
00:21:38,398 --> 0:21:40,834
现在 我们浏览了解了一些

337
00:21:40,968 --> 0:21:45,172
我们看看PKToolPicker

338
00:21:47,441 --> 0:21:51,578
一个需要注意的重要事情是

339
00:21:52,112 --> 0:21:54,781
取而代之 它是一个展示或

340
00:21:54,848 --> 0:21:56,783
它从画布视图分离出来

341
00:21:57,684 --> 0:22:01,054
它漂浮在任何物件之上

342
00:21:57,684 --> 0:22:01,054
它漂浮在任何物件之上

343
00:22:01,288 --> 0:22:03,056
它和键盘非常类似

344
00:22:03,123 --> 0:22:06,293
它的可见性基于第一个响应器

345
00:22:06,860 --> 0:22:09,897
所以 我们来通过一些代码了解

346
00:22:10,931 --> 0:22:14,234
首先 我们为窗口请求共享

347
00:22:16,069 --> 0:22:18,372
我们添加一个画布视图

348
00:22:18,672 --> 0:22:21,642
这样 无论你怎样在选择器工具

349
00:22:22,176 --> 0:22:24,878
你也会在画布视图中改变工具

350
00:22:28,015 --> 0:22:31,018
选择器工具也有一个响应器列表

351
00:22:31,485 --> 0:22:33,387
如果你的物件成为了第一个响应器

352
00:22:33,554 --> 0:22:35,923
以及它在列表中的可见性为真

353
00:22:36,390 --> 0:22:37,724
调色板就会出现

354
00:22:38,325 --> 0:22:39,726
如果setVisible为假

355
00:22:39,927 --> 0:22:42,796
它会从列表中移除它

356
00:22:44,198 --> 0:22:47,401
接下来 当画布视图成

357
00:22:47,467 --> 0:22:48,602
我们想要调色盘出现

358
00:22:48,669 --> 0:22:50,170
我们将setVisible设为真

359
00:22:52,206 --> 0:22:53,807
最后

360
00:22:53,874 --> 0:22:56,510
becomeFirstResponder

361
00:22:58,011 --> 0:22:59,880
你可以在我们的示例app中看到

362
00:22:59,980 --> 0:23:02,716
只要我们将画布视图设为

363
00:22:59,980 --> 0:23:02,716
只要我们将画布视图设为

364
00:23:03,016 --> 0:23:04,418
调色盘就为可见

365
00:23:05,619 --> 0:23:07,020
然而 在我们的示例app中

366
00:23:07,087 --> 0:23:09,489
我们也有一个签名面板

367
00:23:09,556 --> 0:23:13,360
我们只想为你提供蓝色或黑色的墨水

368
00:23:13,794 --> 0:23:15,596
我们不想让调色板出现

369
00:23:16,396 --> 0:23:19,833
为了处理这件事

370
00:23:19,900 --> 0:23:23,070
这个签名的画布视图设为

371
00:23:23,437 --> 0:23:25,973
接下来 它会让选择器工具消失

372
00:23:28,375 --> 0:23:30,511
当你让签名视图控制器消失时

373
00:23:30,577 --> 0:23:33,647
在底层 你会自动地不再是

374
00:23:34,081 --> 0:23:36,617
接下来 调色板工具就会再次出现

375
00:23:38,385 --> 0:23:40,454
另一件你要留意的事情是

376
00:23:40,521 --> 0:23:42,422
这个由基于响应器的可见性

377
00:23:42,589 --> 0:23:45,292
是你的app可能已经存在的物件

378
00:23:45,359 --> 0:23:46,760
它是第一响应器

379
00:23:47,127 --> 0:23:49,596
看吧 比如

380
00:23:49,997 --> 0:23:53,867
甚至当你的编辑菜单出现时

381
00:23:54,468 --> 0:23:58,138
为了做到 你会简单地为

382
00:23:58,705 --> 0:24:00,307
这样调色盘就会保持可见

383
00:23:58,705 --> 0:24:00,307
这样调色盘就会保持可见

384
00:24:02,209 --> 0:24:05,312
另一件你想要考虑的是选择器工具

385
00:24:05,512 --> 0:24:08,982
是常规或小尺寸的类

386
00:24:09,783 --> 0:24:13,887
你会发现在常规尺寸类型中

387
00:24:13,954 --> 0:24:15,355
你可以四处移动它

388
00:24:16,089 --> 0:24:17,958
然而 在小尺寸的类型中

389
00:24:18,025 --> 0:24:20,527
它是固定的和底部的程序坞

390
00:24:21,161 --> 0:24:23,964
所以 在你的app中代表着什么呢

391
00:24:25,732 --> 0:24:28,368
假使你有一个全尺寸的app

392
00:24:28,702 --> 0:24:30,704
无边框 边到边设计的图片

393
00:24:31,205 --> 0:24:34,341
它在常规尺寸类型中遮挡了

394
00:24:34,608 --> 0:24:37,744
但你可以移动选择器工具

395
00:24:39,112 --> 0:24:41,481
然而 在小尺寸类型中

396
00:24:42,182 --> 0:24:45,786
实际上遮挡了这张图片

397
00:24:46,620 --> 0:24:49,456
你会需要在小尺寸类型中

398
00:24:49,523 --> 0:24:53,594
确保调整你的视图框架或滚动视图

399
00:24:53,961 --> 0:24:56,663
来解决选择器工具的遮挡问题

400
00:24:58,432 --> 0:25:02,202
你可以通过监听选择器工具的

401
00:24:58,432 --> 0:25:02,202
你可以通过监听选择器工具的

402
00:25:02,269 --> 0:25:06,540
使用观测器方法

403
00:25:06,807 --> 0:25:10,477
无论你从移动它从浮动到进坞

404
00:25:10,878 --> 0:25:13,447
这样 你就能在你的视图

405
00:25:13,514 --> 0:25:16,250
通过观测边框尺寸

406
00:25:19,419 --> 0:25:21,555
另一件需要为

407
00:25:21,622 --> 0:25:23,991
你的重做和撤销按钮

408
00:25:25,592 --> 0:25:28,028
你在常规类型的类中会注意到

409
00:25:28,929 --> 0:25:32,132
重做或撤销按钮处于调色盘的内部t

410
00:25:32,199 --> 0:25:33,500
提供给你

411
00:25:34,101 --> 0:25:37,437
然而 在这个小型类中

412
00:25:37,738 --> 0:25:40,073
那么 你需要保证为这些小型类

413
00:25:40,140 --> 0:25:42,809
展示你自己重做和撤销按钮

414
00:25:45,612 --> 0:25:47,147
现在 我们了解了

415
00:25:47,214 --> 0:25:50,350
你如何在屏幕上获取了一个基本的

416
00:25:50,817 --> 0:25:53,954
我们来了解更多的一些

417
00:25:54,021 --> 0:25:56,056
PencilKit的高级行为

418
00:25:56,356 --> 0:25:58,859
从一些画布视图的代理开始

419
00:26:00,360 --> 0:26:03,797
你可能想要基于用户是否在画图

420
00:26:04,364 --> 0:26:07,467
你可以通过监听笔或触碰事件

421
00:26:07,734 --> 0:26:11,939
这样你就能获取

422
00:26:13,240 --> 0:26:18,178
当笔或手离开屏幕或 你会得到一个

423
00:26:18,579 --> 0:26:22,182
然而 在这个时机

424
00:26:22,616 --> 0:26:26,453
因为就像Will提到过它不会更新

425
00:26:26,887 --> 0:26:30,624
你会获得最后的

426
00:26:31,124 --> 0:26:35,229
只有在这个时机 你才会

427
00:26:35,662 --> 0:26:38,732
此刻 你能在画布中查询到绘制

428
00:26:39,233 --> 0:26:43,704
更新你的模型物件 制作缩略图

429
00:26:45,239 --> 0:26:49,042
你也想要加载在你的画布视图中

430
00:26:49,843 --> 0:26:52,112
你可以通过调用

431
00:26:52,379 --> 0:26:56,083
在这个时机 你会开始

432
00:26:57,351 --> 0:27:00,287
不过 在这些砖块加载完成之后

433
00:26:57,351 --> 0:27:00,287
不过 在这些砖块加载完成之后

434
00:27:00,354 --> 0:27:03,790
你才会获取到一个

435
00:27:04,424 --> 0:27:09,062
你也会在滚动或缩放之后获得回调

436
00:27:10,464 --> 0:27:15,469
说到滚动 你不

437
00:27:15,936 --> 0:27:17,738
你也可以用你的手指画画

438
00:27:18,205 --> 0:27:21,008
因为PKCanvasView

439
00:27:21,408 --> 0:27:24,511
那意味着一只手指也能画图

440
00:27:31,418 --> 0:27:32,886
两只手指滚动操作

441
00:27:35,522 --> 0:27:38,559
它通过allowsFingerDrawing

442
00:27:38,625 --> 0:27:39,793
在画布视图触发

443
00:27:40,627 --> 0:27:45,265
当它被设为真 一只手指和笔画画

444
00:27:45,666 --> 0:27:48,702
现在 这是在画布视图的默认行为

445
00:27:48,769 --> 0:27:50,204
如果这不是你想要的

446
00:27:50,671 --> 0:27:52,940
你可以将这个属性设为假

447
00:27:53,273 --> 0:27:58,245
不管哪种方式 只有笔会画画

448
00:27:58,712 --> 0:28:03,183
但你应该记住iPhone的上下文

449
00:27:58,712 --> 0:28:03,183
但你应该记住iPhone的上下文

450
00:28:05,419 --> 0:28:07,988
如果你的app中有一些更复杂的

451
00:28:08,055 --> 0:28:11,358
我们也为你暴露了

452
00:28:11,859 --> 0:28:14,862
你能通过使用它来设置手势识别

453
00:28:14,928 --> 0:28:16,797
或失败的请求

454
00:28:17,364 --> 0:28:20,834
WWDC 2017中

455
00:28:21,134 --> 0:28:24,371
iOS上现代用户交互

456
00:28:26,740 --> 0:28:30,911
就像Will提到的

457
00:28:30,978 --> 0:28:33,280
比如截屏和标注中

458
00:28:33,747 --> 0:28:36,817
在这些上下文中

459
00:28:37,284 --> 0:28:39,553
你能通过设置不透明度为false

460
00:28:39,853 --> 0:28:42,356
和设置背景颜色为透明

461
00:28:42,823 --> 0:28:44,825
轻易地在你的app中实现

462
00:28:47,895 --> 0:28:50,597
在iOS 13

463
00:28:50,664 --> 0:28:53,500
它是用一种完全不同的途径

464
00:28:53,767 --> 0:28:55,502
查看你内容很美妙的方式

465
00:28:55,936 --> 0:28:58,639
你的PencilKit的画布

466
00:28:58,872 --> 0:29:03,043
它的颜色会动态调整保持清晰

467
00:28:58,872 --> 0:29:03,043
它的颜色会动态调整保持清晰

468
00:29:03,477 --> 0:29:05,612
你可以看到我最初用黑色的墨水

469
00:29:05,679 --> 0:29:07,915
在一个白色的背景上写的笔记

470
00:29:08,215 --> 0:29:12,586
但在深色模式中 它在一个黑色

471
00:29:13,053 --> 0:29:15,822
我的笔记不仅依然保持清晰

472
00:29:15,889 --> 0:29:17,958
它们看上去也很酷

473
00:29:18,859 --> 0:29:20,994
默认情况下 你的画布在深色模式下

474
00:29:21,328 --> 0:29:24,765
也会动态调整它们的颜色

475
00:29:25,933 --> 0:29:27,868
不过 如果这不是你想要的

476
00:29:29,736 --> 0:29:33,640
你可以设置overrideUserInterfaceStyle

477
00:29:34,141 --> 0:29:35,843
你会特别地想要这么做

478
00:29:36,143 --> 0:29:38,612
如果你标记的内容不改变

479
00:29:38,679 --> 0:29:41,849
比如你在一张图片或一个PDF

480
00:29:44,685 --> 0:29:46,987
现在 我们了解了

481
00:29:47,054 --> 0:29:51,158
你也看到了如何在你的app

482
00:29:51,725 --> 0:29:53,327
我们来看一下随处标记

483
00:29:53,594 --> 0:29:56,196
这是一个新的功能 它让你的app

484
00:29:56,597 --> 0:29:58,866
传递被标记的内容

485
00:29:59,600 --> 0:30:02,736
它通过截屏的一个新的API

486
00:29:59,600 --> 0:30:02,736
它通过截屏的一个新的API

487
00:30:03,036 --> 0:30:06,940
为你提供了完整的内容

488
00:30:07,241 --> 0:30:09,610
无论你为你的app截了一张图

489
00:30:11,912 --> 0:30:13,947
你能在Safari中发现这个功能

490
00:30:14,314 --> 0:30:16,183
现在 我打开apple.com

491
00:30:16,717 --> 0:30:18,118
我使用Pencil的手势

492
00:30:18,185 --> 0:30:21,154
从角落拖过来

493
00:30:21,622 --> 0:30:23,624
接着 我又了我喜欢的这个截屏

494
00:30:23,690 --> 0:30:25,692
但是我不能看见页面的其他部分

495
00:30:26,026 --> 0:30:28,428
所以 我点击上面的全页面部分

496
00:30:28,962 --> 0:30:33,700
现在我有了可滚动的完整的网页

497
00:30:35,669 --> 0:30:36,503
好的

498
00:30:41,575 --> 0:30:45,245
你也能看到我们的示例app中

499
00:30:45,712 --> 0:30:47,748
再一次 使用新的截屏手势

500
00:30:48,515 --> 0:30:53,220
我会点击全页面部分

501
00:30:56,223 --> 0:30:59,393
你也能在Maps中发现它有趣

502
00:31:00,160 --> 0:31:03,697
使用新的截屏手势

503
00:31:03,997 --> 0:31:07,067
但你看到我的截图被铬合金

504
00:31:07,701 --> 0:31:10,337
当我点击上面的全页面部分

505
00:31:10,871 --> 0:31:13,807
我能看到我的地图没有

506
00:31:13,874 --> 0:31:16,310
我能看到道路和下面的餐厅

507
00:31:18,545 --> 0:31:21,381
你只用在你的app中加入几行代码

508
00:31:21,448 --> 0:31:23,617
就能实现这个功能

509
00:31:24,251 --> 0:31:26,486
你开始会为自己在UIWindowScene

510
00:31:26,553 --> 0:31:30,123
设置UIScreenshotService

511
00:31:30,824 --> 0:31:33,660
UIWindowScene是今年UIKit

512
00:31:33,727 --> 0:31:35,329
你可以在

513
00:31:35,395 --> 0:31:38,198
介绍iPad的多窗口演讲中

514
00:31:39,299 --> 0:31:41,001
在你会为自己设置代理后

515
00:31:41,068 --> 0:31:45,105
你会传递全部的内容

516
00:31:45,772 --> 0:31:48,108
你可能已经为一些行为比如分享

517
00:31:48,175 --> 0:31:50,410
生成过这些信息

518
00:31:50,811 --> 0:31:55,048
但若你没有 WWDC 2017

519
00:31:55,382 --> 0:31:58,018
iOS上的PDFKit的介绍

520
00:31:58,685 --> 0:32:00,521
那么 当你拿到了PDF数据

521
00:31:58,685 --> 0:32:00,521
那么 当你拿到了PDF数据

522
00:32:00,854 --> 0:32:03,524
你会实现代理方法

523
00:32:03,590 --> 0:32:06,026
generatePDFRepresentation

524
00:32:06,627 --> 0:32:09,796
你会传递PDF数据和

525
00:32:10,097 --> 0:32:12,399
其他两个元数据到完成处理程序

526
00:32:13,000 --> 0:32:16,537
它会帮组我们保证当你从屏幕

527
00:32:16,870 --> 0:32:19,106
我们有一个平滑的过渡

528
00:32:20,741 --> 0:32:23,911
元数据的第一个数据是

529
00:32:24,211 --> 0:32:26,713
它在一些使用场景

530
00:32:26,947 --> 0:32:30,317
比如我在第七张幻灯片截了一张图

531
00:32:30,484 --> 0:32:34,922
当我切回全页面部分时

532
00:32:37,925 --> 0:32:41,762
元数据的第二个数据是

533
00:32:42,162 --> 0:32:44,464
它在一些使用场景

534
00:32:44,831 --> 0:32:47,201
这里 我有这个长的滚动页面

535
00:32:48,001 --> 0:32:49,303
我将要滚动到底部

536
00:32:49,369 --> 0:32:52,639
因为我对新的iPad Pro非常

537
00:32:53,073 --> 0:32:55,209
我在底部这里截一张图

538
00:32:57,544 --> 0:33:00,647
现在 当我点击上面的全面屏部分

539
00:32:57,544 --> 0:33:00,647
现在 当我点击上面的全面屏部分

540
00:33:01,081 --> 0:33:03,483
它实际上带我进入了截屏时

541
00:33:03,884 --> 0:33:08,088
一样大小的相同的页面

542
00:33:10,224 --> 0:33:12,426
值得注意的是这个RECT

543
00:33:12,826 --> 0:33:15,329
是我们在PDF中期待的坐标

544
00:33:15,729 --> 0:33:17,064
那么 这意味着什么

545
00:33:17,731 --> 0:33:21,134
视图坐标的原始点实际上

546
00:33:21,602 --> 0:33:24,938
然而 在PDF坐标系中

547
00:33:25,239 --> 0:33:28,809
所以 你会需要保证

548
00:33:28,876 --> 0:33:31,678
将RECT以合理的坐标空间

549
00:33:34,214 --> 0:33:38,352
那么 我们向你展示了这些

550
00:33:38,652 --> 0:33:42,556
你可以创建你自己强大的自定义

551
00:33:42,923 --> 0:33:45,826
但它可能需要一些体力活

552
00:33:45,893 --> 0:33:49,630
在快速异步渲染的同时

553
00:33:49,763 --> 0:33:53,300
你会需要监听估量的接触点

554
00:33:54,201 --> 0:33:57,070
但使用新的PencilKit

555
00:33:57,371 --> 0:33:59,373
我们为你提供了极其简单的方法

556
00:33:59,439 --> 0:34:01,475
来将绘图功能集成至你的app中

557
00:33:59,439 --> 0:34:01,475
来将绘图功能集成至你的app中

558
00:34:01,842 --> 0:34:05,312
你会在所有的iOS上获得

559
00:34:05,379 --> 0:34:07,548
低延时的体验

560
00:34:08,649 --> 0:34:13,020
最后 你也可以使用UIKit的

561
00:34:13,487 --> 0:34:17,424
比如UIPencil交互来处理

562
00:34:17,791 --> 0:34:20,226
或新的UIScreenshotService API

563
00:34:20,293 --> 0:34:23,463
这样你就可以发送完整的内容

564
00:34:24,864 --> 0:34:27,967
了解更多内容

565
00:34:29,335 --> 0:34:33,507
现在 开始创建一些酷炫的

566
00:34:33,706 --> 0:34:36,677
我们祝你有个愉快的
