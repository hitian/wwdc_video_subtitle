1
00:00:06,039 --> 0:00:09,910
（watchOS上的

2
00:00:12,679 --> 0:00:14,781
你们好 欢迎大家

3
00:00:15,782 --> 0:00:16,950
我是Matthew Koonce

4
00:00:17,284 --> 0:00:19,653
我是watchOS架构团队的

5
00:00:20,654 --> 0:00:22,389
我非常激动今天有机会

6
00:00:22,656 --> 0:00:25,325
能与我的朋友和同事

7
00:00:25,959 --> 0:00:27,928
聊聊如何使用

8
00:00:28,395 --> 0:00:32,031
上创建一些令人叫绝的用户体验

9
00:00:34,368 --> 0:00:37,271
从功能简单的watchOS 1起

10
00:00:38,105 --> 0:00:40,407
Apple Watch

11
00:00:40,941 --> 0:00:43,110
已经有了显著的进步

12
00:00:44,444 --> 0:00:48,015
过去的几年 我们一直在添加

13
00:00:48,382 --> 0:00:51,785
你们也一直在提升app的使用体验

14
00:00:53,554 --> 0:00:55,122
但那只是开始

15
00:00:56,156 --> 0:00:57,491
因为在watchOS 6上

16
00:00:58,225 --> 0:01:00,694
我们将整个平台提升到了一个新高度

17
00:00:58,225 --> 0:01:00,694
我们将整个平台提升到了一个新高度

18
00:01:01,628 --> 0:01:02,863
对于独立app

19
00:01:03,430 --> 0:01:07,100
我们解耦了iOS和

20
00:01:08,035 --> 0:01:09,136
这一次 你将可以

21
00:01:09,570 --> 0:01:11,872
通过新的App Store直接在

22
00:01:12,172 --> 0:01:13,941
Apple Watch上

23
00:01:14,575 --> 0:01:17,578
我们也增加了对新的API的支持

24
00:01:18,212 --> 0:01:20,013
以及延长了会话运行时长

25
00:01:22,382 --> 0:01:24,718
但是我们也研发了一个特别酷的功能

26
00:01:25,452 --> 0:01:29,623
那就是watchOS的

27
00:01:35,596 --> 0:01:38,165
SwiftUI有强大的

28
00:01:39,032 --> 0:01:41,535
且已被集成至Xcode的

29
00:01:42,469 --> 0:01:45,205
你现在可以很容易就能创建各种视图

30
00:01:46,340 --> 0:01:47,474
在watchOS上

31
00:01:48,108 --> 0:01:50,310
我们有一个全新的UI框架

32
00:01:51,011 --> 0:01:54,147
同时我们也有很多酷炫的API

33
00:01:54,314 --> 0:01:57,851
你可以用这些新功能创建

34
00:01:58,051 --> 0:01:59,319
你之前无法想象的世界

35
00:02:01,255 --> 0:02:02,089
比如

36
00:02:03,290 --> 0:02:04,124
在这个列表上

37
00:02:04,725 --> 0:02:07,261
我们现在支持滑动删除

38
00:02:07,828 --> 0:02:09,162
和拖拽重新排序

39
00:02:10,396 --> 0:02:12,799
你也可以在watch上使用

40
00:02:13,033 --> 0:02:14,635
SwiftUI强大的

41
00:02:14,801 --> 0:02:18,071
可中断的自定义动画特效

42
00:02:20,340 --> 0:02:23,043
现在SwiftUI已经完全

43
00:02:24,077 --> 0:02:26,713
也就是说

44
00:02:27,214 --> 0:02:28,482
WatchKit接口控制器

45
00:02:28,549 --> 0:02:31,084
可以共存

46
00:02:32,219 --> 0:02:34,054
以及 我们甚至支持

47
00:02:34,121 --> 0:02:36,957
将WatchKit提供的视图对象

48
00:02:37,024 --> 0:02:39,259
直接嵌入至你的

49
00:02:39,326 --> 0:02:41,295
比如这个新设计的

50
00:02:44,131 --> 0:02:46,466
事实上

51
00:02:46,533 --> 0:02:49,336
UI框架的集成提供了强大的支持

52
00:02:50,204 --> 0:02:52,339
我们将有一个关于

53
00:02:52,406 --> 0:02:54,074
我非常推荐你们参加

54
00:02:55,776 --> 0:03:00,214
SwiftUI已被

55
00:02:55,776 --> 0:03:00,214
SwiftUI已被

56
00:03:01,281 --> 0:03:05,452
即你可以在watchOS 6上

57
00:03:06,220 --> 0:03:08,288
我们添加的其他酷炫的功能

58
00:03:08,989 --> 0:03:10,624
无论你是在使用一个流式音频app

59
00:03:10,991 --> 0:03:13,026
或是最近加扩展了的运行时间功能

60
00:03:13,360 --> 0:03:16,163
或是你在为这个平台

61
00:03:18,765 --> 0:03:21,502
现在 我们终于有了一个可以在

62
00:03:22,035 --> 0:03:24,438
所有的设备上运行的UI框架

63
00:03:25,305 --> 0:03:28,141
无论你的开发环境是38毫米的

64
00:03:28,675 --> 0:03:31,678
或是65英寸的电视

65
00:03:32,079 --> 0:03:33,747
所有一切都能用SwiftUI完成

66
00:03:35,115 --> 0:03:37,084
但Apple Watch

67
00:03:38,151 --> 0:03:40,654
在创建app时

68
00:03:43,056 --> 0:03:44,591
为Apple Watch

69
00:03:44,658 --> 0:03:47,861
更像是在为你的iOS app

70
00:03:49,062 --> 0:03:52,299
它是你app功能集合的精髓

71
00:03:53,967 --> 0:03:55,802
Apple Watch

72
00:03:55,869 --> 0:03:59,039
它让我们更容易获取到重要的信息

73
00:04:01,208 --> 0:04:03,744
当你在iOS app

74
00:04:03,810 --> 0:04:05,612
或是在杂货店排队时

75
00:04:06,180 --> 0:04:09,183
使用Apple Watch

76
00:04:10,217 --> 0:04:11,685
用户一眼就可以看到信息

77
00:04:12,619 --> 0:04:14,154
轻点几下就能快速回复

78
00:04:16,156 --> 0:04:18,892
所以 你可能会开始为

79
00:04:19,560 --> 0:04:22,129
Apple Watch创建app

80
00:04:23,130 --> 0:04:25,065
但它更像是创建了

81
00:04:25,499 --> 0:04:27,367
一种联系整个系统里

82
00:04:27,434 --> 0:04:28,902
各种不同触碰功能的体验

83
00:04:30,170 --> 0:04:32,472
无论你是在使用Siri相关的功能

84
00:04:33,540 --> 0:04:35,209
在表盘上创建一条动态的提示

85
00:04:35,342 --> 0:04:38,245
来实时查看信息

86
00:04:39,012 --> 0:04:40,447
或是使用complication

87
00:04:42,683 --> 0:04:45,252
对于Apple Watch来说

88
00:04:45,752 --> 0:04:48,255
如何定义这种体验则更为重要

89
00:04:49,690 --> 0:04:51,525
这种体验需要

90
00:04:51,925 --> 0:04:54,294
结合上下文 准时

91
00:04:55,229 --> 0:04:58,432
在正确的时间给予用户正确的信息

92
00:05:00,934 --> 0:05:02,202
以及在手表的屏幕上

93
00:05:03,136 --> 0:05:05,038
简单易懂

94
00:05:05,806 --> 0:05:06,974
设计精巧

95
00:05:08,942 --> 0:05:11,411
它应该精简交互步骤

96
00:05:12,112 --> 0:05:14,481
只需轻点几下就能帮助用户完成任务

97
00:05:16,750 --> 0:05:19,186
那我们则需要先了解SwiftUI

98
00:05:20,854 --> 0:05:23,457
使用SwiftUI

99
00:05:23,524 --> 0:05:25,626
创建你一直想要的上述的用户体验

100
00:05:27,694 --> 0:05:29,963
今天我们就来聊聊在watchOS

101
00:05:30,030 --> 0:05:31,932
上使用SwiftUI的几个方法

102
00:05:33,133 --> 0:05:36,937
首先 我们来看下

103
00:05:38,772 --> 0:05:42,309
在app中创建一则高度交互的通知

104
00:05:44,111 --> 0:05:46,146
以及 利用数码表冠的高级特征

105
00:05:46,680 --> 0:05:48,248
来提升用户的感官感受

106
00:05:49,983 --> 0:05:51,652
首先我们来看一个app

107
00:05:52,386 --> 0:05:54,555
这是Josh和我一起研发的

108
00:06:02,196 --> 0:06:04,331
请看Xcode

109
00:06:04,565 --> 0:06:06,867
Josh和我一同开发的app

110
00:06:07,634 --> 0:06:10,971
这是一个抽认卡app

111
00:06:12,506 --> 0:06:15,375
现在我打开的是接口控制器

112
00:06:16,376 --> 0:06:20,214
如果你之前使用过WatchKit

113
00:06:20,480 --> 0:06:23,784
这是另一个接口控制器

114
00:06:25,018 --> 0:06:30,357
首先这个接口控制器

115
00:06:31,024 --> 0:06:34,461
是由SwiftUI提供的

116
00:06:35,896 --> 0:06:39,766
现在 因为它是接口控制器类型

117
00:06:39,833 --> 0:06:42,035
这个接口控制器可以

118
00:06:42,703 --> 0:06:44,838
和其他接口控制器一同使用

119
00:06:46,340 --> 0:06:49,009
比如 我在故事板建立的这个

120
00:06:49,343 --> 0:06:51,712
app初始化接口控制器

121
00:06:52,279 --> 0:06:55,315
让这个接口控制器成为

122
00:06:56,750 --> 0:06:59,786
但是 又比如 如果我想

123
00:07:00,621 --> 0:07:03,924
文章视图 我可以在这里将

124
00:07:03,991 --> 0:07:07,594
我的接口控制器放在其他

125
00:07:08,028 --> 0:07:12,165
给WatchKit和

126
00:07:13,867 --> 0:07:16,203
我也可以使用相同的

127
00:07:16,270 --> 0:07:19,439
来推送API

128
00:07:20,240 --> 0:07:23,911
或者我可以使用

129
00:07:24,878 --> 0:07:28,448
给一个接口控制器一个目的地

130
00:07:29,082 --> 0:07:31,685
接着从SwiftUI

131
00:07:33,654 --> 0:07:36,023
那么 我们现在来看这段代码

132
00:07:37,057 --> 0:07:40,594
你可能留意到和使用

133
00:07:41,395 --> 0:07:42,796
这里没有IB渠道

134
00:07:44,131 --> 0:07:46,934
那是因为我们使用了

135
00:07:47,634 --> 0:07:50,470
我们整个app的接口控制器的视图

136
00:07:50,804 --> 0:07:52,706
都由SwiftUI来定义

137
00:07:53,473 --> 0:07:54,575
非常酷

138
00:07:56,543 --> 0:07:58,278
另一个新的不同是

139
00:07:58,579 --> 0:08:00,280
主体属性的使用

140
00:07:58,579 --> 0:08:00,280
主体属性的使用

141
00:08:00,347 --> 0:08:04,318
这是WK托管控制器

142
00:08:04,751 --> 0:08:05,853
我们在这里覆盖重写

143
00:08:07,354 --> 0:08:09,923
我们可以指定这个body属性

144
00:08:09,990 --> 0:08:13,260
让我们希望的SwiftUI视图

145
00:08:14,094 --> 0:08:16,029
既然如此 这是我们的主题列表

146
00:08:16,964 --> 0:08:19,900
这是我的不同抽认卡的

147
00:08:20,334 --> 0:08:22,703
在右侧 你能看到它的预览图

148
00:08:24,371 --> 0:08:26,406
接下来 我么来聊一下主题列表

149
00:08:29,176 --> 0:08:33,413
如名所见 主题列表就是一个列表

150
00:08:34,414 --> 0:08:36,850
这个列表表明 对每个模块…

151
00:08:37,017 --> 0:08:38,585
不好意思 对我的模块的每个主题

152
00:08:39,352 --> 0:08:40,921
我创建了一个导航按钮

153
00:08:41,154 --> 0:08:43,090
它会跳转到另一个

154
00:08:43,323 --> 0:08:45,158
这就是抽认卡列表

155
00:08:46,426 --> 0:08:48,061
它创建主题单元格

156
00:08:49,196 --> 0:08:52,199
我使用这个列表行面板颜色修改器

157
00:08:52,866 --> 0:08:55,302
每个单元格的颜色就是由它确定的

158
00:08:56,870 --> 0:08:58,438
下面的主题单元格

159
00:08:59,006 --> 0:09:00,541
你能看到 代码非常简洁

160
00:08:59,006 --> 0:09:00,541
你能看到 代码非常简洁

161
00:09:02,075 --> 0:09:04,845
这里 只用了我主题的标题

162
00:09:06,013 --> 0:09:08,916
字体选择

163
00:09:09,249 --> 0:09:10,884
这个字体在

164
00:09:12,819 --> 0:09:14,922
好的 另外一件需要说明的事

165
00:09:15,522 --> 0:09:17,658
是上面的app对象绑定的使用

166
00:09:18,592 --> 0:09:21,195
使用app对象绑定

167
00:09:21,461 --> 0:09:24,331
这个模块是这个视图的数据来源

168
00:09:26,333 --> 0:09:29,970
只要这个模块数据有变动

169
00:09:31,505 --> 0:09:34,374
现在 了解了数据如何

170
00:09:34,441 --> 0:09:36,210
是非常重要的一个话题

171
00:09:36,877 --> 0:09:40,247
在SwiftUI中的数据流演讲中

172
00:09:40,314 --> 0:09:41,715
我非常推荐你们参加

173
00:09:42,616 --> 0:09:44,251
现在 我们需要知道

174
00:09:44,318 --> 0:09:47,254
这就是我如何让我的模块

175
00:09:49,056 --> 0:09:50,390
现在点击这个按钮

176
00:09:51,091 --> 0:09:52,359
让我们来模拟器上使用这个app

177
00:09:53,861 --> 0:09:57,965
这个app可以用了

178
00:09:59,333 --> 0:10:02,436
如你所见 默认情况下

179
00:09:59,333 --> 0:10:02,436
如你所见 默认情况下

180
00:10:03,237 --> 0:10:04,438
关于这个列表

181
00:10:04,738 --> 0:10:06,440
我们在后台做了非常酷的东西

182
00:10:06,507 --> 0:10:10,511
比如随着列表的滚动 动画效果很赞

183
00:10:10,844 --> 0:10:12,246
折叠这些单元格

184
00:10:12,312 --> 0:10:14,548
这些内容就像从你的手腕流了出去

185
00:10:16,917 --> 0:10:20,354
关于这个列表 我还有一些事情要做

186
00:10:20,854 --> 0:10:21,955
那我们现在开始吧

187
00:10:23,223 --> 0:10:24,525
首先

188
00:10:24,591 --> 0:10:27,094
我想在每个主题单元格

189
00:10:27,461 --> 0:10:28,562
添加一个标签

190
00:10:29,496 --> 0:10:32,833
来展示我的每个主题下有几张卡片

191
00:10:33,834 --> 0:10:35,035
这样我一看就能知道

192
00:10:35,102 --> 0:10:36,703
还有多少内容我需要学习

193
00:10:38,305 --> 0:10:39,540
现在我们来实现这个功能吧

194
00:10:39,606 --> 0:10:41,308
我需要一个VStack

195
00:10:42,075 --> 0:10:44,578
Xcode的编辑器

196
00:10:46,013 --> 0:10:49,516
只需按Command 点击文本

197
00:10:50,851 --> 0:10:53,520
选择“嵌入VStack”选项

198
00:10:55,756 --> 0:10:56,890
代码就被添加了

199
00:10:57,658 --> 0:10:59,092
在文本下面

200
00:10:59,693 --> 0:11:02,329
我能添加卡片的数量

201
00:10:59,693 --> 0:11:02,329
我能添加卡片的数量

202
00:11:03,096 --> 0:11:04,698
你能看到浏览图马上就更新了

203
00:11:05,666 --> 0:11:09,269
现在你能看到

204
00:11:10,070 --> 0:11:12,406
但我想要领先对齐

205
00:11:13,407 --> 0:11:14,942
同样 我们可以用编辑器来实现

206
00:11:16,410 --> 0:11:19,246
选择VStack

207
00:11:19,313 --> 0:11:20,914
选择检查器

208
00:11:21,782 --> 0:11:24,117
这个视窗展示了不同类型的修饰符

209
00:11:24,184 --> 0:11:25,886
这样我就可以修改VStack

210
00:11:26,854 --> 0:11:29,590
选择领先对齐选项

211
00:11:31,191 --> 0:11:33,093
浏览图就又更新了

212
00:11:33,160 --> 0:11:34,361
很快我们就完成了

213
00:11:36,230 --> 0:11:39,366
现在 我们在SwiftUI

214
00:11:39,933 --> 0:11:42,870
因为默认情况下

215
00:11:43,670 --> 0:11:47,374
如我的项目中有一个国际化语言文件

216
00:11:47,841 --> 0:11:50,410
默认情况下 整个app的

217
00:11:50,944 --> 0:11:53,847
这样就能默认支持从右到左的语言

218
00:11:55,949 --> 0:11:58,418
在这里 我还想再添加其它一些东西

219
00:11:58,485 --> 0:12:01,555
我想添加一个符号

220
00:11:58,485 --> 0:12:01,555
我想添加一个符号

221
00:12:02,389 --> 0:12:05,659
我想要它出现在我的文字的一侧

222
00:12:07,160 --> 0:12:08,695
我可以用HStack

223
00:12:10,030 --> 0:12:11,732
所以 我们再次使用编辑器

224
00:12:12,132 --> 0:12:13,500
按Command键

225
00:12:14,101 --> 0:12:16,236
选择“嵌入HStack”选项

226
00:12:17,704 --> 0:12:21,108
接着我就能插入符号了

227
00:12:22,242 --> 0:12:25,245
现在 它看着有点小

228
00:12:26,280 --> 0:12:29,550
所以 再一次使用我们熟悉的检查器

229
00:12:29,716 --> 0:12:32,486
按Command键 同时点击文本

230
00:12:33,187 --> 0:12:36,089
现在有很多不同的上下文定义的选项

231
00:12:37,057 --> 0:12:40,360
在字体中选择标题字体

232
00:12:41,328 --> 0:12:43,463
这些选择器让一切都变得简单操作

233
00:12:43,530 --> 0:12:45,899
比如添加和修改这段代码

234
00:12:45,966 --> 0:12:48,902
因为它在我的代码库里

235
00:12:48,969 --> 0:12:51,705
不会改变我的故事版的POS文件

236
00:12:51,772 --> 0:12:54,441
实际上 它教会我如何写

237
00:12:56,743 --> 0:12:59,746
短短几行SwiftUI代码

238
00:12:59,813 --> 0:13:01,114
让这些单元格变得更完美了

239
00:12:59,813 --> 0:13:01,114
让这些单元格变得更完美了

240
00:13:01,181 --> 0:13:05,152
整个过程我们都能实时

241
00:13:06,220 --> 0:13:07,788
我构建和运行这个app的需要

242
00:13:09,189 --> 0:13:11,925
此次在Apple Watch上的

243
00:13:12,926 --> 0:13:16,129
比如说 我们终于可以

244
00:13:16,530 --> 0:13:19,233
我不必在设备上来回检查

245
00:13:21,401 --> 0:13:24,137
好的 在SwiftUI上

246
00:13:24,404 --> 0:13:28,075
特别是

247
00:13:29,243 --> 0:13:30,944
这是一个完全新的

248
00:13:31,345 --> 0:13:32,980
滚动样式设计

249
00:13:34,214 --> 0:13:36,483
我们来实现它

250
00:13:36,550 --> 0:13:37,651
增加一点高度

251
00:13:39,753 --> 0:13:41,221
回到检查器

252
00:13:43,390 --> 0:13:44,525
找到高度

253
00:13:45,325 --> 0:13:46,693
我将高度设为100

254
00:13:48,095 --> 0:13:49,196
预览图更新了

255
00:13:50,030 --> 0:13:51,365
现在回到我的列表

256
00:13:52,032 --> 0:13:55,169
这个全新设计的滚动风格

257
00:13:56,103 --> 0:13:58,105
一行SwiftUI代码就能实现

258
00:13:58,238 --> 0:14:01,308
我们完全改变了列表滚动的方式

259
00:13:58,238 --> 0:14:01,308
我们完全改变了列表滚动的方式

260
00:14:02,543 --> 0:14:04,144
如果我现在在预览图中滚动它

261
00:14:05,045 --> 0:14:07,381
你能看到每个卡片

262
00:14:07,447 --> 0:14:08,615
现在都在屏幕中间居中了

263
00:14:09,716 --> 0:14:11,818
这为我们的用户带来了全新的体验

264
00:14:11,885 --> 0:14:13,320
当它们滚动内容时

265
00:14:13,987 --> 0:14:16,790
它能让用户集中注意到

266
00:14:17,758 --> 0:14:21,295
现在 我决定为Pop Quiz

267
00:14:21,361 --> 0:14:23,630
因为列表上只有不多的元素

268
00:14:24,264 --> 0:14:26,867
使用一个框架来让它们变大

269
00:14:27,568 --> 0:14:30,337
这就是Carousel

270
00:14:31,405 --> 0:14:33,240
如果你的每个单元格里

271
00:14:33,307 --> 0:14:36,410
使用Carousel列表样式

272
00:14:36,977 --> 0:14:38,612
因为它能让我们的用户

273
00:14:39,079 --> 0:14:41,248
能专注 而且更容易选中目标

274
00:14:43,750 --> 0:14:45,118
好 接下来

275
00:14:45,886 --> 0:14:49,723
在列表上 我们也新增了

276
00:14:49,957 --> 0:14:52,092
都是Apple Watch

277
00:14:53,894 --> 0:14:56,096
第一个是通过拖拽来重新排序

278
00:14:57,231 --> 0:15:00,000
现在 使用一个修饰符就能简单完成

279
00:15:01,168 --> 0:15:02,870
你可以添加onMove

280
00:15:03,170 --> 0:15:05,272
传给onMove的闭包

281
00:15:05,506 --> 0:15:07,708
告诉它如何更新你的数据库

282
00:15:08,475 --> 0:15:11,245
你只需从一个元素移动到另一个

283
00:15:12,946 --> 0:15:15,549
添加删除

284
00:15:15,782 --> 0:15:16,683
通过滑动就能删除

285
00:15:17,451 --> 0:15:19,520
传统的委托代理

286
00:15:19,586 --> 0:15:21,188
使用SwiftUI

287
00:15:21,555 --> 0:15:23,156
只需要一行代码就能创建滑动的动作

288
00:15:24,658 --> 0:15:27,327
现在 我滑动这个列表

289
00:15:28,662 --> 0:15:30,531
动画特效真酷

290
00:15:31,231 --> 0:15:34,635
创建这些有趣好玩的单元格的代码

291
00:15:35,235 --> 0:15:36,336
都在这 就在预览视图的旁边

292
00:15:36,937 --> 0:15:38,539
我找到了一个我想删除的单元格

293
00:15:39,072 --> 0:15:41,642
我在预览视图中只需向右滑就能删除

294
00:15:42,476 --> 0:15:44,378
就是这么简单和强大

295
00:15:53,987 --> 0:15:54,821
好

296
00:15:55,088 --> 0:15:58,859
这就是如何在我们的主题列表中

297
00:15:59,293 --> 0:16:01,128
以及创建之前不可能

298
00:15:59,293 --> 0:16:01,128
以及创建之前不可能

299
00:16:01,195 --> 0:16:03,497
实现的交互体验

300
00:16:04,965 --> 0:16:07,534
但这只是SwiftUI

301
00:16:07,668 --> 0:16:09,303
的冰山一角

302
00:16:10,704 --> 0:16:13,774
想要知道如何将

303
00:16:14,441 --> 0:16:16,443
欢迎Josh Weinberg

304
00:16:23,684 --> 0:16:24,551
谢谢 Matthew

305
00:16:25,519 --> 0:16:26,353
那么...

306
00:16:26,920 --> 0:16:30,357
Matthew已经聊了

307
00:16:30,424 --> 0:16:34,328
在Apple Watch上

308
00:16:34,795 --> 0:16:36,163
不过 就像我们之前说的

309
00:16:36,496 --> 0:16:39,266
Apple Watch上的

310
00:16:39,533 --> 0:16:42,236
在各种app上

311
00:16:43,604 --> 0:16:45,706
如何提升Apple Watch上

312
00:16:45,772 --> 0:16:48,976
首先 我想要谈谈交互式通知

313
00:16:49,877 --> 0:16:52,312
现在Apple Watch上的

314
00:16:52,613 --> 0:16:54,414
是向用户提供

315
00:16:54,481 --> 0:16:58,185
实时和上下文信息首要功能

316
00:16:59,486 --> 0:17:03,090
Apple交互式通知

317
00:16:59,486 --> 0:17:03,090
Apple交互式通知

318
00:17:03,557 --> 0:17:05,459
第一个是短看

319
00:17:06,260 --> 0:17:08,862
现在 一个短看被注册了

320
00:17:08,929 --> 0:17:12,299
它直接展示了通知的有效信息

321
00:17:13,000 --> 0:17:15,736
它同时也自动展示了app的图标

322
00:17:16,837 --> 0:17:19,540
短看出现一段时间之后

323
00:17:19,906 --> 0:17:22,542
它会自动转变成长看

324
00:17:23,544 --> 0:17:25,646
长看是一个滚动的界面

325
00:17:25,712 --> 0:17:28,214
它允许你客制化操作主体

326
00:17:28,715 --> 0:17:31,118
和控制下面的通知动作

327
00:17:32,119 --> 0:17:34,721
你现在看到的是Yelp的

328
00:17:34,788 --> 0:17:38,125
他们利用通知

329
00:17:38,425 --> 0:17:40,027
创建了一个完整的预定流程

330
00:17:41,295 --> 0:17:43,597
我们如何扩展Pop Quiz呢

331
00:17:43,730 --> 0:17:45,432
为了和它的名字相符

332
00:17:45,966 --> 0:17:47,334
我们来创建一则通知

333
00:17:47,401 --> 0:17:50,304
它能将一张抽认卡直接在主体中展示

334
00:17:50,604 --> 0:17:52,306
来保证我不间断学习

335
00:17:55,142 --> 0:17:55,976
那么...

336
00:17:56,944 --> 0:17:59,880
我想从通知控制器开始

337
00:18:00,814 --> 0:18:02,916
通知控制器由

338
00:18:03,116 --> 0:18:05,452
我们创建项目时的模版提供

339
00:18:05,686 --> 0:18:08,822
只要勾选了“包含通知”

340
00:18:10,424 --> 0:18:13,493
和接口控制器非常类似 它...

341
00:18:14,228 --> 0:18:16,263
很新 是SwiftUI的一部分

342
00:18:16,330 --> 0:18:20,567
但它继承自WK用户接口控制器

343
00:18:21,268 --> 0:18:23,904
所以这个新的用户通知托管控制器

344
00:18:24,204 --> 0:18:26,573
为交互式通知提供了入口点

345
00:18:26,640 --> 0:18:28,809
以及允许我们提供

346
00:18:30,277 --> 0:18:32,746
如果你之前使用过 你会非常熟悉

347
00:18:32,813 --> 0:18:34,648
和来自用户通知框架中的

348
00:18:34,715 --> 0:18:36,450
didReceive方法一样

349
00:18:37,518 --> 0:18:40,888
didReceive方法

350
00:18:40,954 --> 0:18:42,089
取出信息

351
00:18:42,789 --> 0:18:44,958
存到我们的接口控制器里

352
00:18:45,592 --> 0:18:47,694
它同时也提供了通知的主体下方

353
00:18:47,761 --> 0:18:50,063
的通知动作

354
00:18:51,231 --> 0:18:53,166
和接口控制器一样

355
00:18:53,233 --> 0:18:55,002
我们也有相同的主体属性

356
00:18:55,702 --> 0:18:58,572
唯一不同的是

357
00:18:59,106 --> 0:19:03,010
主体属性会被自动作废和重新检验

358
00:18:59,106 --> 0:19:03,010
主体属性会被自动作废和重新检验

359
00:19:03,076 --> 0:19:05,779
这样你的通知视图就完全更新了

360
00:19:07,514 --> 0:19:10,951
我们来查看这则通知的样子

361
00:19:12,052 --> 0:19:13,253
现在 我们在预览视图中

362
00:19:13,687 --> 0:19:15,789
看到通知出现了

363
00:19:16,056 --> 0:19:19,026
但它对我的学习并不是非常有帮助

364
00:19:19,626 --> 0:19:21,695
在底部 是抽认卡的视图

365
00:19:21,762 --> 0:19:24,431
它同时展示了问题和答案

366
00:19:25,666 --> 0:19:27,901
为了做得更好一些

367
00:19:28,268 --> 0:19:29,770
我想要钉住这个视图

368
00:19:29,837 --> 0:19:32,039
使用画布左下角的钉按钮

369
00:19:32,873 --> 0:19:34,875
接着我们回到抽认卡视图

370
00:19:35,642 --> 0:19:38,278
现在我们就能看到我创建的抽认卡了

371
00:19:38,478 --> 0:19:41,381
以及完成之后它在上下文的样子

372
00:19:43,083 --> 0:19:45,018
我已经创建了一些视图了

373
00:19:45,085 --> 0:19:48,222
我可以将它们放到我的抽认卡里

374
00:19:49,056 --> 0:19:51,992
第一件我想做的事是用Side

375
00:19:52,392 --> 0:19:54,461
来取代Text

376
00:19:54,995 --> 0:19:57,331
一张抽认卡有两面

377
00:19:57,464 --> 0:19:59,132
所以我们将两面都用Side环绕

378
00:19:59,233 --> 0:20:02,536
现在我们看到抽认卡被

379
00:19:59,233 --> 0:20:02,536
现在我们看到抽认卡被

380
00:20:02,603 --> 0:20:04,371
所有我添加的内容

381
00:20:04,438 --> 0:20:06,306
都是我所希望的默认样式

382
00:20:07,307 --> 0:20:09,877
但我现在还是能同时看到两面

383
00:20:09,943 --> 0:20:11,879
这样还是不能很好的辅助我学习

384
00:20:12,713 --> 0:20:16,617
我想要用一个我自定义的容器

385
00:20:16,884 --> 0:20:18,151
我称它为翻转视图

386
00:20:18,919 --> 0:20:20,521
翻转视图提供了

387
00:20:20,754 --> 0:20:23,624
所有的变换和互动体验

388
00:20:23,690 --> 0:20:25,192
我们马上就会看到

389
00:20:25,592 --> 0:20:28,328
所有的这些源代码我都会在会议后

390
00:20:28,428 --> 0:20:29,930
开源为式例代码

391
00:20:31,031 --> 0:20:34,234
我们在模拟器试运行下

392
00:20:34,635 --> 0:20:37,671
我们可以用Xcode的通知方案

393
00:20:37,738 --> 0:20:40,274
来创建和运行项目

394
00:20:41,041 --> 0:20:43,110
我们看到短看出现了

395
00:20:43,210 --> 0:20:45,212
我们直接过渡到长看

396
00:20:45,279 --> 0:20:48,315
它看上去和预览视图中的一模一样

397
00:20:48,515 --> 0:20:50,350
下面的通知动作

398
00:20:50,784 --> 0:20:53,587
如我们所期待的一样通知的交互顺畅

399
00:20:53,654 --> 0:20:55,355
我可以点击抽认卡翻转它

400
00:20:55,789 --> 0:20:58,892
甚至直接在通知主体中拖拽它

401
00:21:02,596 --> 0:21:06,533
这只是一个非常简单的问题

402
00:21:10,404 --> 0:21:14,675
我们用了创建这个app

403
00:21:14,875 --> 0:21:16,610
相同的手段来用通知

404
00:21:16,910 --> 0:21:19,413
创建更加丰富好玩的

405
00:21:19,479 --> 0:21:20,547
用户交互体验

406
00:21:22,182 --> 0:21:24,585
最后 关于Apple Watch

407
00:21:24,651 --> 0:21:25,819
我要聊的是

408
00:21:26,253 --> 0:21:27,621
数码表冠

409
00:21:28,355 --> 0:21:31,358
现在 你已经可以

410
00:21:31,425 --> 0:21:35,829
在WatchKit app使用

411
00:21:36,830 --> 0:21:41,702
这个API允许你在表冠中做一些

412
00:21:41,835 --> 0:21:42,703
数码表冠

413
00:21:42,836 --> 0:21:46,440
但我们想要你们创建

414
00:21:46,507 --> 0:21:48,976
一样的用户界面

415
00:21:50,577 --> 0:21:55,215
在Apple Watch Series 4

416
00:21:55,749 --> 0:22:00,854
触觉和数码表冠在屏幕上

417
00:21:55,749 --> 0:22:00,854
触觉和数码表冠在屏幕上

418
00:22:01,455 --> 0:22:04,591
它为每个元素提供了优异的

419
00:22:04,658 --> 0:22:07,761
让内容可以更加适配数码表冠

420
00:22:07,828 --> 0:22:08,962
它比以往更加强大和优异

421
00:22:10,330 --> 0:22:14,568
我们已经在我们自己的app中

422
00:22:14,968 --> 0:22:17,905
比如 在锻炼时 我们有这样的列表

423
00:22:17,971 --> 0:22:20,607
当你滚动这些元素时

424
00:22:21,241 --> 0:22:24,077
或着当你自定义一个时钟时

425
00:22:24,144 --> 0:22:26,413
它能提供一个触觉回馈

426
00:22:27,381 --> 0:22:30,184
SwiftUI提供了系统组件

427
00:22:30,250 --> 0:22:32,186
所有的这些都可以直接用

428
00:22:32,553 --> 0:22:36,623
比如列表、选择器和滚动视图

429
00:22:38,125 --> 0:22:40,394
但当你要创建一个更客制化的内容时

430
00:22:41,128 --> 0:22:43,931
SwiftUI的一些新的修饰符

431
00:22:43,997 --> 0:22:45,699
会帮你实现你的愿景

432
00:22:46,767 --> 0:22:48,902
我要聊的第一类自定义界面

433
00:22:48,969 --> 0:22:51,104
称为自由滚动界面

434
00:22:51,839 --> 0:22:53,273
在自由滚动界面中

435
00:22:53,640 --> 0:22:57,010
你不必在你的内容中创建具体的停顿

436
00:22:57,411 --> 0:23:00,480
相反 你可以随着数码表冠

437
00:22:57,411 --> 0:23:00,480
相反 你可以随着数码表冠

438
00:23:00,581 --> 0:23:01,949
在序列中随时停下来

439
00:23:03,584 --> 0:23:04,885
实现像这样的效果

440
00:23:04,985 --> 0:23:07,888
你需要使用由SwiftUI提供的

441
00:23:08,088 --> 0:23:09,323
新数码表冠旋转修饰符

442
00:23:09,990 --> 0:23:13,460
它非常简单 只需3个参数

443
00:23:14,194 --> 0:23:16,763
第一个我们需要知道的是绑定

444
00:23:17,664 --> 0:23:20,868
像其他SwiftUI组件一样

445
00:23:20,934 --> 0:23:22,803
它提供了数据来源

446
00:23:23,337 --> 0:23:25,806
让这个修饰符与系统产生关联

447
00:23:26,607 --> 0:23:28,408
在自由滚动列表中

448
00:23:28,942 --> 0:23:32,312
我们想要绑定我们正在移动的

449
00:23:33,413 --> 0:23:35,315
我们也需要告诉数码表冠

450
00:23:35,649 --> 0:23:38,385
from和through的值

451
00:23:38,785 --> 0:23:42,523
它限定了数码表冠移动时

452
00:23:44,157 --> 0:23:47,094
我们来看下实际操作

453
00:23:47,160 --> 0:23:50,163
当我们移动这个代表数码表冠

454
00:23:50,797 --> 0:23:55,235
在数码表冠的序列中橡胶传送行为

455
00:23:55,302 --> 0:23:57,437
的限制下

456
00:23:57,538 --> 0:23:59,706
会得到线性反馈和很赞的触觉反馈

457
00:24:01,642 --> 0:24:04,411
下一次 当你想要创建更客制化的

458
00:24:04,478 --> 0:24:07,648
比如 在最新的计算器app里

459
00:24:07,714 --> 0:24:09,983
的这个选择器

460
00:24:10,617 --> 0:24:12,920
这里 我们不再滚动内容

461
00:24:12,986 --> 0:24:15,589
相反 我们在两个元素中选择

462
00:24:15,656 --> 0:24:18,158
使用数码表冠来移动到另一个

463
00:24:19,660 --> 0:24:22,629
同样使用完全相同的数码表冠

464
00:24:22,696 --> 0:24:24,998
这些参数也一样

465
00:24:25,699 --> 0:24:27,234
现在 这些参数…

466
00:24:27,501 --> 0:24:31,271
我们不去查看可滚动的列表

467
00:24:31,338 --> 0:24:32,906
我们在人数之间选择

468
00:24:33,407 --> 0:24:35,042
从1到15

469
00:24:35,943 --> 0:24:38,512
这里的新参数是by

470
00:24:38,645 --> 0:24:41,148
by参数允许我们定义序列

471
00:24:41,515 --> 0:24:44,251
的运行幅度

472
00:24:44,318 --> 0:24:47,221
为你提供触感反馈和下落表现

473
00:24:48,622 --> 0:24:51,725
为了查看效果 我们现在来看

474
00:24:51,792 --> 0:24:54,695
当我们从某个元素移动到另一个时

475
00:24:55,662 --> 0:24:56,730
非常简单

476
00:24:58,665 --> 0:25:01,368
最后 当你想要创建更加客制化的

477
00:24:58,665 --> 0:25:01,368
最后 当你想要创建更加客制化的

478
00:25:01,435 --> 0:25:04,137
比如 闹钟中的界面

479
00:25:04,771 --> 0:25:08,008
数码表冠正在控制一个视图

480
00:25:08,075 --> 0:25:09,576
围绕着圆旋转

481
00:25:09,643 --> 0:25:12,179
它不被序列所限制

482
00:25:13,347 --> 0:25:16,683
现在 我们回到

483
00:25:17,217 --> 0:25:19,520
这个修饰符使用的参数也一样

484
00:25:19,586 --> 0:25:20,954
我们之前聊过

485
00:25:21,622 --> 0:25:23,924
但我想介绍新的两个参数

486
00:25:24,558 --> 0:25:25,993
第一个是灵敏度

487
00:25:26,860 --> 0:25:30,831
灵敏度允许我们定义

488
00:25:30,898 --> 0:25:33,767
来从某个元素移动到另一个

489
00:25:34,434 --> 0:25:36,770
最后一个是连续参数

490
00:25:37,204 --> 0:25:39,439
这个参数允许我们定义

491
00:25:39,506 --> 0:25:43,510
不再想要数码表冠在序列中停下

492
00:25:45,379 --> 0:25:49,550
实际操作中

493
00:25:49,616 --> 0:25:53,654
交互流程非常好

494
00:25:54,454 --> 0:25:55,956
序列不再有限制

495
00:25:58,192 --> 0:26:00,994
最后 让数码表冠获得输入

496
00:25:58,192 --> 0:26:00,994
最后 让数码表冠获得输入

497
00:26:01,461 --> 0:26:04,331
我们需要告诉系统如何获取

498
00:26:04,865 --> 0:26:07,334
为了实现这个功能

499
00:26:08,235 --> 0:26:10,537
如果你用过我们提供的其他UI框架

500
00:26:10,604 --> 0:26:12,940
你会非常熟悉可焦距性

501
00:26:13,407 --> 0:26:16,210
这和UIKit里的UI聚焦引擎

502
00:26:16,476 --> 0:26:19,680
或第一响应者非常像

503
00:26:20,848 --> 0:26:23,317
只需添加可焦距修饰符

504
00:26:23,784 --> 0:26:26,653
我们就能使用数码表冠

505
00:26:26,887 --> 0:26:30,724
轻点这个小按钮

506
00:26:33,260 --> 0:26:35,495
想要了解更多关于可焦距性

507
00:26:35,562 --> 0:26:38,098
可以参加

508
00:26:40,334 --> 0:26:41,935
我们如何利用它的优势

509
00:26:42,336 --> 0:26:45,572
以及在Pop Quiz创建一些

510
00:26:45,873 --> 0:26:46,974
我们回到示例

511
00:26:51,111 --> 0:26:55,649
Matthew已经展示了一个

512
00:26:55,716 --> 0:26:57,751
在这个app的入口点…

513
00:26:57,818 --> 0:27:00,120
或app入口的主题列表

514
00:26:57,818 --> 0:27:00,120
或app入口的主题列表

515
00:27:01,288 --> 0:27:04,358
但我想要创建一个非常酷的列表

516
00:27:04,691 --> 0:27:08,695
现在 我们在一个可滚动的视图上

517
00:27:08,996 --> 0:27:11,765
可以在预览视图中看到

518
00:27:12,232 --> 0:27:14,902
但如果我们有一个…不是更好吗

519
00:27:15,302 --> 0:27:18,839
非常酷 如果完全使用数码表冠来

520
00:27:20,274 --> 0:27:24,811
我首先要用ZStack

521
00:27:25,779 --> 0:27:29,483
现在 我们看到

522
00:27:29,550 --> 0:27:31,385
它们都重叠在一起了

523
00:27:31,685 --> 0:27:33,954
但我可以保证它们还在那

524
00:27:35,355 --> 0:27:38,992
接下来 因为我们要使用数码表冠

525
00:27:39,059 --> 0:27:41,695
我们需要使用可焦距修饰符

526
00:27:42,262 --> 0:27:45,199
和数码表冠的旋转修饰符

527
00:27:46,366 --> 0:27:49,536
现在 这里有很多参数

528
00:27:49,603 --> 0:27:50,938
完全一样的参数

529
00:27:51,004 --> 0:27:52,673
我们来一个个看

530
00:27:53,540 --> 0:27:56,577
首先 我们需要

531
00:27:56,643 --> 0:27:59,513
更新数据的数据源

532
00:28:00,414 --> 0:28:02,516
为了能够实现目标

533
00:28:03,383 --> 0:28:05,352
这个自定义的交互会在两者间移动

534
00:28:05,419 --> 0:28:07,921
我想要提供当前的序列号

535
00:28:09,489 --> 0:28:13,227
接下来我们给状态提供绑定

536
00:28:13,794 --> 0:28:15,295
回到数码表冠的旋转

537
00:28:15,696 --> 0:28:18,398
这里 我想使用绑定的动画版本

538
00:28:18,465 --> 0:28:20,534
这样数码表冠就会更新

539
00:28:20,601 --> 0:28:23,437
会已动画特效的形式更新这个视图

540
00:28:24,771 --> 0:28:27,608
接下来我们需要确认我们开始的位置

541
00:28:28,342 --> 0:28:30,777
以及我们在序列中到达的位置

542
00:28:31,078 --> 0:28:33,447
这是序列中倒数第二张卡

543
00:28:33,514 --> 0:28:35,249
来确认我们到达的位置

544
00:28:36,583 --> 0:28:39,353
接下来 我们需要确认by参数的值

545
00:28:39,419 --> 0:28:42,222
来规定每张卡之间的跨度

546
00:28:42,823 --> 0:28:44,525
和精度

547
00:28:44,658 --> 0:28:47,227
在这里 我想使用低精度

548
00:28:47,294 --> 0:28:49,429
这样每张卡都能得到一些重量

549
00:28:49,496 --> 0:28:51,798
这样我能找到我想要看的那张卡

550
00:28:53,567 --> 0:28:57,004
最后 为了得到我们想要的效果

551
00:28:57,838 --> 0:29:00,641
我已经写了这张卡片的转换修饰符

552
00:28:57,838 --> 0:29:00,641
我已经写了这张卡片的转换修饰符

553
00:29:00,707 --> 0:29:03,744
这个自定义视图的调节器

554
00:29:04,444 --> 0:29:07,714
它可以实现3D效果

555
00:29:07,881 --> 0:29:11,485
和允许卡片随着当前序列号更新

556
00:29:12,085 --> 0:29:14,621
我们传给修饰符当前的序列号值

557
00:29:14,688 --> 0:29:17,624
所以每当视图重绘时 它都会更新

558
00:29:19,159 --> 0:29:19,993
就是这样

559
00:29:21,061 --> 0:29:23,730
现在我们构建一下

560
00:29:25,732 --> 0:29:28,335
在模拟器里出现了 我们看到了

561
00:29:28,402 --> 0:29:30,003
的一样的视图

562
00:29:31,305 --> 0:29:32,639
我们来浏览这个列表

563
00:29:32,873 --> 0:29:34,107
选择我们要看的那个

564
00:29:34,541 --> 0:29:38,011
现在我们可以使用数码表冠

565
00:29:38,078 --> 0:29:39,112
滚动浏览这个界面

566
00:29:40,180 --> 0:29:41,982
就是这样

567
00:29:42,683 --> 0:29:44,651
如果有人知道这个问题的答案

568
00:29:44,718 --> 0:29:46,887
请告诉我 我真的很想知道答案

569
00:29:54,895 --> 0:29:55,929
很酷

570
00:29:56,430 --> 0:29:59,833
我们已经知道

571
00:29:59,900 --> 0:30:01,268
创建良好的用户体验

572
00:29:59,900 --> 0:30:01,268
创建良好的用户体验

573
00:30:01,635 --> 0:30:03,370
以及利用

574
00:30:03,437 --> 0:30:05,539
各种功能来实现我们的目标

575
00:30:06,473 --> 0:30:08,175
但不仅仅只是这些

576
00:30:08,342 --> 0:30:13,113
现在你能在我们所有的平台

577
00:30:13,480 --> 0:30:15,516
你能运用你学到的概念

578
00:30:15,582 --> 0:30:17,684
创建属于你自己的

579
00:30:18,151 --> 0:30:22,155
直接用于Apple Watch上

580
00:30:23,056 --> 0:30:26,393
我们很期待看到

581
00:30:26,460 --> 0:30:28,462
一直渴望创建的界面

582
00:30:29,530 --> 0:30:33,734
今年的演讲议程中

583
00:30:34,067 --> 0:30:36,537
想要知道如何创建这些3D特效

584
00:30:36,603 --> 0:30:39,506
你可以参加 用SwiftUI

585
00:30:40,073 --> 0:30:41,842
祝你在接下来的会议中过得愉快
