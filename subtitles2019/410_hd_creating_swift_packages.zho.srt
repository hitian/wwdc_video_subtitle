1
00:00:00,516 --> 0:00:04,500
[音乐]

2
00:00:12,516 --> 0:00:17,006
[掌声]

3
00:00:17,506 --> 0:00:19,196
&gt;&gt; 大家好 我叫 Boris 

4
00:00:19,196 --> 0:00:20,536
是 Xcode 团队的一名成员

5
00:00:20,826 --> 0:00:22,946
欢迎来到创建 Swift 包的会议

6
00:00:23,656 --> 0:00:25,096
你们可能已经听说过 Xcode 

7
00:00:25,416 --> 0:00:27,036
对包的支持

8
00:00:27,036 --> 0:00:29,506
但今天你们将学习

9
00:00:29,576 --> 0:00:31,096
如何创建自己的包

10
00:00:35,316 --> 0:00:37,576
我们今天将主要讨论

11
00:00:37,576 --> 0:00:38,206
五件事情

12
00:00:38,906 --> 0:00:40,386
我们会了解

13
00:00:40,386 --> 0:00:41,516
如何创建自己的本地包

14
00:00:42,576 --> 0:00:44,826
然后了解如何发布它

15
00:00:46,306 --> 0:00:47,476
我们也要告诉你们一些

16
00:00:47,476 --> 0:00:49,356
关于包 Manifest API 的更多信息

17
00:00:49,356 --> 0:00:52,056
以及如何编辑包

18
00:00:52,856 --> 0:00:54,966
最后

19
00:00:54,966 --> 0:00:56,766
我将告诉你们

20
00:00:56,766 --> 0:00:57,496
有关 Swift 包管理器开源项目的信息

21
00:00:57,996 --> 0:01:02,286
我们已经举办过另一场关于包的会议

22
00:00:57,996 --> 0:01:02,286
我们已经举办过另一场关于包的会议

23
00:01:03,766 --> 0:01:05,796
那次会议叫做 Adopting Swift Packages

24
00:01:06,886 --> 0:01:08,896
你们也应该看看那次会议

25
00:01:09,076 --> 0:01:11,186
因为那里有相关信息

26
00:01:11,186 --> 0:01:15,036
例如如何解决包解析冲突

27
00:01:15,036 --> 0:01:18,686
会议内容还包括

28
00:01:19,016 --> 0:01:20,686
包基础知识介绍

29
00:01:20,686 --> 0:01:23,746
提供给初次接触的人

30
00:01:27,236 --> 0:01:29,036
包是与你的团队

31
00:01:29,036 --> 0:01:31,576
一起在工作区

32
00:01:31,576 --> 0:01:33,876
或与更大的开源社区

33
00:01:33,936 --> 0:01:35,746
共享代码的好方法

34
00:01:39,256 --> 0:01:42,976
我们先来看看如何创建自己的本地包

35
00:01:43,636 --> 0:01:46,896
你可以将本地包看作

36
00:01:46,896 --> 0:01:49,366
工作空间中的子项目

37
00:01:49,616 --> 0:01:53,236
它们本质上与平台无关

38
00:01:53,236 --> 0:01:55,496
因此你可以直接

39
00:01:55,496 --> 0:01:57,056
在 Apple 的所有平台上

40
00:01:57,056 --> 0:01:59,000
使用你的代码

41
00:02:00,316 --> 0:02:03,606
它们非常适合重构出可重复使用的代码

42
00:02:04,536 --> 0:02:07,636
它们没有版本化

43
00:02:07,636 --> 0:02:10,406
但是一旦你准备好了

44
00:02:09,006 --> 0:02:10,406
只需几步即可发布它们

45
00:02:10,916 --> 0:02:14,086
我们来演示一下

46
00:02:14,086 --> 0:02:16,926
如何创建自己的本地包

47
00:02:17,166 --> 0:02:18,436
在这个演示中

48
00:02:18,436 --> 0:02:19,776
我们将使用一个 App

49
00:02:19,776 --> 0:02:22,186
显示我工作地点附近几家咖啡馆的午餐菜单

50
00:02:22,526 --> 0:02:26,166
我们有 iOS 和 WatchOS 两种版本的 App

51
00:02:26,366 --> 0:02:30,016
现在这里有这个数据模型

52
00:02:30,086 --> 0:02:32,856
通过 Target Membership 在两个平台之间共享

53
00:02:33,686 --> 0:02:36,266
随着我们不断开发我们的 App

54
00:02:36,416 --> 0:02:38,746
这种方式变得有些麻烦

55
00:02:38,846 --> 0:02:41,516
所以我想把它重构成一个本地包

56
00:02:42,106 --> 0:02:44,696
第一步就是

57
00:02:44,696 --> 0:02:47,136
我们转到 File->New->Swift Package

58
00:02:47,646 --> 0:02:52,206
把这个包命名为 FoodNStuff

59
00:02:52,206 --> 0:02:57,966
我们将它添加到现有项目并添加到根管理组中

60
00:02:58,396 --> 0:03:00,436
然后单击 Create

61
00:02:58,396 --> 0:03:00,436
然后单击 Create

62
00:03:01,236 --> 0:03:04,776
现在 Xcode 为我们创建了包的基本结构

63
00:03:04,926 --> 0:03:06,666
包括 Readme

64
00:03:06,666 --> 0:03:10,366
Package.swift Manifest 文件以及

65
00:03:12,656 --> 0:03:15,646
我们从 App 中

66
00:03:15,646 --> 0:03:17,476
找到数据模型代码

67
00:03:17,996 --> 0:03:19,386
然后将其拖入包中

68
00:03:19,546 --> 0:03:21,016
现在我们要将此代码关联到

69
00:03:21,016 --> 0:03:21,786
我们的 App

70
00:03:22,296 --> 0:03:25,886
让我们快速浏览 Manifest 文件

71
00:03:26,366 --> 0:03:27,646
它描述了如何构建包

72
00:03:27,826 --> 0:03:30,606
还有一个名为 Products 的部分

73
00:03:30,606 --> 0:03:31,116
在这儿我们定义了一个库

74
00:03:31,846 --> 0:03:33,736
我们可以把这个库和 App 关联起来

75
00:03:33,966 --> 0:03:36,186
我们将在之后的演讲中

76
00:03:36,186 --> 0:03:37,346
详细介绍

77
00:03:37,346 --> 0:03:38,466
Manifest 文件和 Products 部分

78
00:03:38,816 --> 0:03:43,056
但是现在 我们打开项目编辑器

79
00:03:43,056 --> 0:03:45,996
打开 Targets 中的 iOS App

80
00:03:45,996 --> 0:03:48,626
然后进入 Frameworks, Libraries and Embedded Content 部分

81
00:03:48,946 --> 0:03:51,236
我们点击这里的 + 号

82
00:03:51,236 --> 0:03:53,756
然后从列表中选择 FoodNStuff

83
00:03:54,886 --> 0:03:57,976
我们希望为 watchOS App 执行相同的步骤

84
00:03:58,566 --> 0:03:59,736
所以我们找到对应的 Target

85
00:04:00,396 --> 0:04:01,476
转入同一部分

86
00:04:01,696 --> 0:04:03,766
再次点击 + 号

87
00:04:03,766 --> 0:04:05,736
并将其与我们的 App 相关联

88
00:04:07,276 --> 0:04:11,216
包中还含有一个或多个模块

89
00:04:11,366 --> 0:04:15,186
所以 我们必须将这些模块导入我们的 App

90
00:04:15,186 --> 0:04:16,406
这个例子中 我们只有一个模块

91
00:04:17,136 --> 0:04:19,666
我们进入 iOS App 的代码

92
00:04:20,896 --> 0:04:22,186
在此处导入模块

93
00:04:23,396 --> 0:04:26,066
我们也会为我们的 watchOS App 做同样的事情

94
00:04:29,726 --> 0:04:32,076
现在 由于我们对工作区

95
00:04:32,156 --> 0:04:33,496
进行了一些较大的更改

96
00:04:33,496 --> 0:04:34,586
因此预览暂停了

97
00:04:34,946 --> 0:04:37,686
那么让我们按下

98
00:04:38,306 --> 0:04:43,496
现在我们的 App 就可以正常运行了

99
00:04:44,206 --> 0:04:45,726
因此 只需几步

100
00:04:45,726 --> 0:04:48,086
我们就可以将可重用的代码

101
00:04:48,086 --> 0:04:49,476
在自己的本地包中完成重构

102
00:04:50,386 --> 0:04:51,676
你可能还注意到

103
00:04:51,896 --> 0:04:55,036
我们没有必要明确配置任何有关平台的内容

104
00:04:55,636 --> 0:04:58,566
这是因为包本质上是平台无关的

105
00:04:59,176 --> 0:05:01,386
因此 它们可以依客户的需求而建立

106
00:04:59,176 --> 0:05:01,386
因此 它们可以依客户的需求而建立

107
00:05:01,566 --> 0:05:03,526
在这种情况下

108
00:05:03,526 --> 0:05:05,276
我们计划同时构建 iOS 和 watchOS App

109
00:05:05,846 --> 0:05:09,316
因此 包被构建了两次

110
00:05:09,316 --> 0:05:10,166
一次用于 iOS 一次用于 watchOS

111
00:05:10,546 --> 0:05:12,826
并且这一切都由 Xcode 自动处理

112
00:05:13,286 --> 0:05:17,666
最后 这为包的发布打好了基础

113
00:05:17,846 --> 0:05:18,936
但在发布包之前

114
00:05:18,936 --> 0:05:20,426
让我们回到幻灯片

115
00:05:20,426 --> 0:05:22,000
了解更多相关信息

116
00:05:28,556 --> 0:05:30,186
你们刚刚了解了本地包

117
00:05:30,536 --> 0:05:33,796
现在让我们来看看如何发布一个包

118
00:05:33,796 --> 0:05:35,446
以便与广大受众分享

119
00:05:36,116 --> 0:05:38,766
在我们看发布包的具体步骤之前

120
00:05:38,976 --> 0:05:40,456
我们必须了解版本控制

121
00:05:41,956 --> 0:05:43,126
更具体地说

122
00:05:43,126 --> 0:05:45,456
是管理 Swift 包的语义化版本控制

123
00:05:46,806 --> 0:05:48,996
它为了确保你可以在

124
00:05:49,346 --> 0:05:50,696
不影响其他内容的情况下

125
00:05:50,696 --> 0:05:52,256
修复依赖项的漏洞

126
00:05:52,866 --> 0:05:55,286
Swift 包遵循语义化版本控制

127
00:05:56,166 --> 0:05:57,546
这是一种广泛的标准

128
00:05:57,616 --> 0:05:58,976
它为版本号

129
00:05:58,976 --> 0:06:00,306
每个部分

130
00:05:58,976 --> 0:06:00,306
每个部分

131
00:06:00,306 --> 0:06:01,756
赋予特定的语义含义

132
00:06:02,296 --> 0:06:06,456
主版本号象征着对 API 的突破性更改

133
00:06:07,106 --> 0:06:09,526
它需要更新现有客户端

134
00:06:09,916 --> 0:06:11,716
例如 

135
00:06:11,816 --> 0:06:13,146
重命名现有类型

136
00:06:13,756 --> 0:06:16,436
移除一个方法或更改方法签名

137
00:06:16,976 --> 0:06:18,406
但这也可能包括

138
00:06:18,406 --> 0:06:20,196
任何不向后兼容的漏洞修复

139
00:06:20,246 --> 0:06:23,316
或对现有 API 主要行为的更改

140
00:06:24,476 --> 0:06:26,096
更新次版本号

141
00:06:26,096 --> 0:06:28,706
是以向后兼容的方式添加功能

142
00:06:28,876 --> 0:06:33,186
例如 添加一个新的方法或类型

143
00:06:33,636 --> 0:06:35,076
在你进行

144
00:06:35,076 --> 0:06:36,036
向后兼容的漏洞修复时

145
00:06:36,036 --> 0:06:37,146
请递增修订号

146
00:06:37,886 --> 0:06:40,836
这使客户在对包进行漏洞修复时

147
00:06:40,836 --> 0:06:45,256
不会产生任何维护负担

148
00:06:45,396 --> 0:06:48,696
主要版本号 0 是一个特殊情况

149
00:06:48,696 --> 0:06:49,596
你可以在开发初期使用

150
00:06:50,486 --> 0:06:53,636
此时对次版本和修订版本的更改也可能会破坏API

151
00:06:54,456 --> 0:06:56,926
这简化了初始的开发过程

152
00:06:56,926 --> 0:07:00,416
但在人们开始使用你的包时

153
00:06:56,926 --> 0:07:00,416
但在人们开始使用你的包时

154
00:07:00,896 --> 0:07:03,826
在发布包一段时间后

155
00:07:03,826 --> 0:07:07,076
你的客户将期望有稳定的 API 

156
00:07:07,076 --> 0:07:11,696
因此在发布最终版之前

157
00:07:12,186 --> 0:07:13,896
你可以使用预发行版本

158
00:07:13,896 --> 0:07:14,936
请求客户测试 API

159
00:07:18,616 --> 0:07:21,846
你可以通过在版本规则中添加预发布标识符

160
00:07:21,846 --> 0:07:23,686
来选择预发布版本

161
00:07:24,176 --> 0:07:26,436
在这个例子中

162
00:07:26,766 --> 0:07:28,326
我使用的标识符为 beta.1

163
00:07:31,276 --> 0:07:34,516
请注意 这种情况下你可以解析预发布版本

164
00:07:34,726 --> 0:07:36,056
但你仍然会得到更新

165
00:07:36,256 --> 0:07:38,366
例如 这里的版本是 beta.6

166
00:07:39,036 --> 0:07:42,166
一旦稳定版本 5 发布

167
00:07:42,166 --> 0:07:43,356
包解析将自动选择稳定版

168
00:07:43,936 --> 0:07:44,736
但是你应该

169
00:07:44,736 --> 0:07:46,236
在完成测试后

170
00:07:46,236 --> 0:07:47,096
删除预发布标识符

171
00:07:47,626 --> 0:07:50,606
我们来看看

172
00:07:50,656 --> 0:07:51,956
下一个演示中

173
00:07:51,956 --> 0:07:53,000
发布包的具体步骤

174
00:07:59,416 --> 0:08:02,416
让我们回到第一个演示结束地方

175
00:07:59,416 --> 0:08:02,416
让我们回到第一个演示结束地方

176
00:08:02,986 --> 0:08:10,856
首先 我将把包拖出项目

177
00:08:11,346 --> 0:08:14,146
在拖动时按住 option 键

178
00:08:14,146 --> 0:08:14,556
就会创建一份拷贝

179
00:08:15,386 --> 0:08:17,866
关闭项目

180
00:08:17,866 --> 0:08:19,546
在 Finder 中打开它 

181
00:08:19,546 --> 0:08:20,606
然后连按 Package.swift 文件

182
00:08:21,646 --> 0:08:25,086
这样就可以独立打开包

183
00:08:25,086 --> 0:08:25,706
和打开项目的方式一样

184
00:08:26,766 --> 0:08:30,016
如果我们查看运行目标

185
00:08:30,016 --> 0:08:32,086
可以看到菜单中也有 macOS 和 tvOS

186
00:08:32,086 --> 0:08:35,436
虽然我们之前的开发仅针对 iOS 和 watchOS

187
00:08:36,535 --> 0:08:39,686
这再次强调了包本质上是与平台无关的

188
00:08:40,006 --> 0:08:41,296
无需特殊配置

189
00:08:41,296 --> 0:08:45,106
即可在 Xcode 中为

190
00:08:46,116 --> 0:08:47,436
现在 既然你正在发布这个包

191
00:08:47,436 --> 0:08:49,426
那么让我们补充一下 Readme 文件

192
00:08:49,926 --> 0:08:54,226
假设这个包提供了

193
00:08:55,036 --> 0:08:59,726
用于表示食物菜单

194
00:08:59,726 --> 0:09:08,316
并从 JSON 中加载的

195
00:08:59,726 --> 0:09:08,316
并从 JSON 中加载的

196
00:09:08,316 --> 0:09:08,856
数据模型

197
00:09:08,976 --> 0:09:11,786
现在 对于真正的包

198
00:09:11,786 --> 0:09:15,526
你希望在 Readme 文件中包含更多信息

199
00:09:15,936 --> 0:09:17,676
例如使用方法 平台限制等

200
00:09:17,716 --> 0:09:22,166
如果你使用了特定平台的 API（如 UIKit）

201
00:09:22,166 --> 0:09:23,446
还需要包含许可协议的信息

202
00:09:23,806 --> 0:09:26,236
但由于这只是一个演示 现在就足够了

203
00:09:27,556 --> 0:09:31,136
你要做的另一件事是添加测试用例

204
00:09:31,136 --> 0:09:32,546
Xcode 已经为我们

205
00:09:32,546 --> 0:09:35,526
创建了一个示例测试用例

206
00:09:35,526 --> 0:09:36,746
但我们想在这里实际测试

207
00:09:36,746 --> 0:09:36,956
我们的数据模型

208
00:09:37,476 --> 0:09:44,086
让我们创建一个 FoodItem

209
00:09:44,326 --> 0:09:48,096
名称为 chick'n

210
00:09:48,096 --> 0:09:49,006
价格为 42 美元

211
00:09:49,676 --> 0:09:52,896
我们设置条件

212
00:09:52,896 --> 0:09:55,816
物品的价格就是 42 美元

213
00:09:56,476 --> 0:09:57,736
现在 如果我们按下 Command + U

214
00:09:58,826 --> 0:10:00,976
我们的包就会构建并进行测试

215
00:09:58,826 --> 0:10:00,976
我们的包就会构建并进行测试

216
00:10:00,976 --> 0:10:02,986
就像在项目中运行一样

217
00:10:03,286 --> 0:10:05,396
测试已经通过

218
00:10:05,396 --> 0:10:05,706
因此我们可以继续

219
00:10:06,506 --> 0:10:09,016
我们首先为我们的包创建一个仓库

220
00:10:09,176 --> 0:10:10,636
为此 我们可以打开

221
00:10:10,636 --> 0:10:12,396
Source Control 菜单

222
00:10:12,396 --> 0:10:14,776
并选择 Create Repositories 选项

223
00:10:15,576 --> 0:10:17,456
Xcode 已经为我们选中了包

224
00:10:17,456 --> 0:10:19,346
所以我们只需点按 Create 即可

225
00:10:20,056 --> 0:10:21,806
这将在本地创建一个仓库

226
00:10:21,806 --> 0:10:24,286
并提交我们当前的状态

227
00:10:25,266 --> 0:10:27,446
但我们还需要 GitHub 中的仓库

228
00:10:27,716 --> 0:10:30,406
我们也可以在 Xcode 中创建它

229
00:10:31,186 --> 0:10:32,646
切换到源码管理导航栏

230
00:10:33,346 --> 0:10:34,646
在仓库中打开上下文菜单

231
00:10:34,646 --> 0:10:37,116
然后选择 Create Remote 选项

232
00:10:37,576 --> 0:10:42,026
由于我已经在 Xcode 偏好设置中

233
00:10:42,026 --> 0:10:44,936
因此会在此处自动预选

234
00:10:45,116 --> 0:10:46,786
仓库名称可以更改

235
00:10:46,786 --> 0:10:48,116
但我们保持默认

236
00:10:48,376 --> 0:10:50,556
同时也暂时略去可选描述

237
00:10:50,836 --> 0:10:53,876
我们将可见性设置为私密

238
00:10:53,876 --> 0:10:56,716
因为我想暂时与我的团队分享这个包

239
00:10:56,716 --> 0:10:57,086
而不是面向大众

240
00:10:57,626 --> 0:10:59,626
我们点按 Create

241
00:11:01,216 --> 0:11:03,076
Xcode 一步完成了

242
00:11:03,226 --> 0:11:06,076
在 GitHub 上创建仓库

243
00:11:06,286 --> 0:11:10,106
并当前状态推送到 Github 上的任务

244
00:11:10,326 --> 0:11:11,446
现在我们已经发布了我们的包

245
00:11:11,446 --> 0:11:14,516
但我们还想发布我们的第一个版本

246
00:11:14,896 --> 0:11:16,436
为此 返回上下文菜单

247
00:11:16,436 --> 0:11:19,406
并选择 Tag Master 选项

248
00:11:19,956 --> 0:11:23,326
我们想要发布 1.0.0 版本

249
00:11:23,326 --> 0:11:25,936
暂时不填消息文本框

250
00:11:26,486 --> 0:11:29,466
这会在本地创建一个标记

251
00:11:29,466 --> 0:11:30,886
所以我们仍然需要将它推送到 GitHub

252
00:11:31,256 --> 0:11:32,566
我们要返回

253
00:11:32,566 --> 0:11:34,276
Source Control 菜单

254
00:11:34,276 --> 0:11:35,016
选择 Push 选项

255
00:11:35,606 --> 0:11:38,636
要选中 include tags 复选框

256
00:11:38,636 --> 0:11:39,976
以便它们被推送

257
00:11:39,976 --> 0:11:41,946
然后点按 Push

258
00:11:47,636 --> 0:11:49,026
现在我们已经在 GitHub 上

259
00:11:49,026 --> 0:11:50,626
发布了我们的包

260
00:11:50,626 --> 0:11:52,516
让我们来看看

261
00:11:52,516 --> 0:11:55,906
从上下文菜单中选择 View in GitHub 选项

262
00:11:57,276 --> 0:11:59,356
仓库会在此处打开

263
00:12:00,696 --> 0:12:02,046
演示到这可以结束了

264
00:12:02,626 --> 0:12:04,016
但作为最后一步

265
00:12:04,016 --> 0:12:05,216
我想将包的远程版本

266
00:12:05,216 --> 0:12:06,646
重新集成到我们的

267
00:12:06,646 --> 0:12:07,366
之前的午餐 App 中

268
00:12:07,786 --> 0:12:08,656
因此 我点按 Clone or download 按钮

269
00:12:08,686 --> 0:12:11,416
并从此处复制网址

270
00:12:11,846 --> 0:12:15,916
关闭 Safari Xcode 以及 Finder

271
00:12:16,946 --> 0:12:20,556
然后我们回到 Xcode 的欢迎窗口

272
00:12:20,556 --> 0:12:22,136
再次打开 Lunch 项目

273
00:12:24,196 --> 0:12:26,726
在这里 我们打开 File 菜单和

274
00:12:26,726 --> 0:12:28,756
这个新的 Swift Packages 子菜单

275
00:12:30,316 --> 0:12:34,186
此菜单包含几个用于处理包的选项

276
00:12:35,916 --> 0:12:38,266
但我想添加一个包依赖项

277
00:12:38,826 --> 0:12:42,396
我们在这里粘贴网址

278
00:12:47,216 --> 0:12:49,946
Xcode 为我们推荐的

279
00:12:49,946 --> 0:12:51,836
默认版本规则

280
00:12:51,836 --> 0:12:53,496
包括我们刚刚发布的

281
00:12:53,496 --> 0:12:53,996
1.0.0 版本

282
00:12:54,226 --> 0:12:55,236
所以 我们可以点击这里的 Next

283
00:12:55,796 --> 0:13:02,776
包解析完成 现在我们看到了产品的选择

284
00:12:55,796 --> 0:13:02,776
包解析完成 现在我们看到了产品的选择

285
00:13:02,776 --> 0:13:05,596
我们希望将库产品与我们的 iOS App 相关联

286
00:13:06,436 --> 0:13:07,656
所以 我们在这里点按 Finish

287
00:13:08,266 --> 0:13:13,426
现在我实际上忘了做一件事

288
00:13:13,476 --> 0:13:16,406
就是删除我们之前的本地包

289
00:13:16,726 --> 0:13:19,176
所以 我现在把它移到废纸篓里

290
00:13:20,136 --> 0:13:22,466
那么此时就正在获取远程版本

291
00:13:23,006 --> 0:13:28,696
我们来看看项目导航栏中的

292
00:13:28,696 --> 0:13:29,746
Swift Package Dependencies 部分

293
00:13:30,256 --> 0:13:32,276
这显示了所有的包依赖项

294
00:13:38,776 --> 0:13:40,676
好了 因为我们

295
00:13:40,676 --> 0:13:42,506
在之前的流程中

296
00:13:42,506 --> 0:13:44,226
关联了产品

297
00:13:44,306 --> 0:13:45,366
所以它已经与我们的 iOS App 相关联

298
00:13:45,846 --> 0:13:48,516
但我们还必须

299
00:13:49,086 --> 0:13:50,076
将它添加到 watchOS App 中

300
00:13:50,516 --> 0:13:51,746
我们需要回到

301
00:13:51,746 --> 0:13:53,736
Frameworks, Libraries and Embedded Content 部分

302
00:13:54,756 --> 0:13:57,236
点按此处的 + 号

303
00:13:57,236 --> 0:13:58,016
然后选择包产品

304
00:13:58,456 --> 0:14:02,726
现在可以回到预览了

305
00:13:58,456 --> 0:14:02,726
现在可以回到预览了

306
00:14:04,086 --> 0:14:04,656
恢复预览

307
00:14:05,296 --> 0:14:09,126
我们可以看到它

308
00:14:09,126 --> 0:14:09,646
像之前一样正常运行

309
00:14:10,596 --> 0:14:12,036
因此 只需几步

310
00:14:12,036 --> 0:14:13,956
我们就可以发布一个包

311
00:14:14,566 --> 0:14:15,756
我们回到幻灯片

312
00:14:21,386 --> 0:14:23,846
接下来 

313
00:14:23,846 --> 0:14:25,066
我想邀请我的同事 Ankit 上台

314
00:14:25,066 --> 0:14:26,686
向你们介绍一下

315
00:14:26,686 --> 0:14:29,000
包 Manifest API 的更多信息

316
00:14:32,366 --> 0:14:33,116
&gt;&gt; 多谢 Boris

317
00:14:33,626 --> 0:14:35,346
Boris 向你们展示了

318
00:14:35,346 --> 0:14:36,916
如何在 Xcode 项目中

319
00:14:36,916 --> 0:14:38,656
使用本地包

320
00:14:38,656 --> 0:14:40,306
以及如何发布它

321
00:14:40,306 --> 0:14:41,376
以与更广泛的受众分享

322
00:14:41,996 --> 0:14:43,476
在本节中

323
00:14:43,476 --> 0:14:44,866
我们将更多的了解

324
00:14:44,866 --> 0:14:46,856
包的 Manifest API

325
00:14:46,856 --> 0:14:47,406
用它来对包进行配置

326
00:14:48,026 --> 0:14:51,516
Swift 包目录中

327
00:14:51,516 --> 0:14:52,766
包含 Package.swift

328
00:14:52,816 --> 0:14:53,796
Manifest 文件

329
00:14:54,946 --> 0:14:56,296
Manifest 的第一行

330
00:14:56,566 --> 0:14:58,356
始终是 Swift Tools 的版本

331
00:14:59,236 --> 0:15:00,436
这是构建包

332
00:14:59,236 --> 0:15:00,436
这是构建包

333
00:15:00,436 --> 0:15:02,366
所需 Swift 编译器的

334
00:15:02,366 --> 0:15:03,346
最低版本

335
00:15:04,066 --> 0:15:05,556
我们将在后面的演讲中

336
00:15:05,556 --> 0:15:07,586
详细说明

337
00:15:07,796 --> 0:15:08,616
之后是导入

338
00:15:08,616 --> 0:15:10,256
PacakageDescription 的语句

339
00:15:10,886 --> 0:15:12,326
这是 Xcode 提供的库

340
00:15:12,326 --> 0:15:14,526
其中包含

341
00:15:14,526 --> 0:15:16,296
使用 Manifest 文件的 API

342
00:15:17,916 --> 0:15:19,766
在这之后是

343
00:15:19,766 --> 0:15:20,926
包的初始化语句

344
00:15:21,566 --> 0:15:23,216
一条包初始化语句

345
00:15:23,216 --> 0:15:25,396
可以配置整个包

346
00:15:26,206 --> 0:15:27,546
在本例中

347
00:15:27,546 --> 0:15:29,296
现在只有包的名称

348
00:15:29,296 --> 0:15:29,806
所以我需要添加 Target

349
00:15:30,326 --> 0:15:33,306
Swift 包具有

350
00:15:33,306 --> 0:15:34,136
关于 Target 的标准布局

351
00:15:35,146 --> 0:15:36,766
库 Target 位于

352
00:15:36,766 --> 0:15:38,666
名为 Sources 的目录下

353
00:15:38,766 --> 0:15:41,256
每个 Target 应具有自己的子目录

354
00:15:41,836 --> 0:15:43,966
它们需要在

355
00:15:43,966 --> 0:15:45,316
包初始化语句的 Target 部分

356
00:15:45,316 --> 0:15:45,986
进行声明

357
00:15:47,006 --> 0:15:48,306
标准布局非常强大

358
00:15:48,306 --> 0:15:49,926
因为你无需

359
00:15:49,926 --> 0:15:51,416
在 Manifest 中

360
00:15:51,416 --> 0:15:52,696
单独列出源文件

361
00:15:53,426 --> 0:15:54,446
你只需将它们放在正确的目录中

362
00:15:54,446 --> 0:15:56,036
Xcode 就会

363
00:15:56,036 --> 0:15:57,126
自动添加它们

364
00:15:58,566 --> 0:15:59,636
如果我想添加另一个 Target

365
00:15:59,636 --> 0:16:01,466
我可以创建一个

366
00:15:59,636 --> 0:16:01,466
我可以创建一个

367
00:16:01,466 --> 0:16:03,476
新的子目录

368
00:16:03,476 --> 0:16:04,876
然后在 Manifest 中声明 Target

369
00:16:05,416 --> 0:16:08,806
测试 Target 位于

370
00:16:08,806 --> 0:16:10,806
名为 Tests 的目录下

371
00:16:10,806 --> 0:16:12,366
它们也有自己的子目录

372
00:16:12,926 --> 0:16:15,496
它们在声明时使用的是

373
00:16:15,496 --> 0:16:18,116
testTarget API

374
00:16:18,116 --> 0:16:19,516
并且由于测试 Target

375
00:16:19,516 --> 0:16:20,916
通常是测试另一个 Target

376
00:16:20,916 --> 0:16:22,316
因此你需要声明

377
00:16:22,316 --> 0:16:23,686
对被测 Target 的依赖

378
00:16:24,866 --> 0:16:25,756
这是使用

379
00:16:25,756 --> 0:16:27,616
testTarget API 的 dependencies 参数

380
00:16:27,616 --> 0:16:28,456
来完成的

381
00:16:29,176 --> 0:16:32,936
作为最后一步

382
00:16:32,936 --> 0:16:34,506
我们需要为包

383
00:16:34,506 --> 0:16:34,926
声明产品

384
00:16:35,576 --> 0:16:36,696
产品用于

385
00:16:36,786 --> 0:16:38,616
从包中导出 Target

386
00:16:38,616 --> 0:16:39,656
以便其他包可以使用它们

387
00:16:40,486 --> 0:16:42,066
在本例中

388
00:16:42,066 --> 0:16:43,716
有一个库产品

389
00:16:43,796 --> 0:16:44,786
导出的是一个库 Target

390
00:16:45,376 --> 0:16:49,386
我们刚刚看到了

391
00:16:49,386 --> 0:16:50,366
一个基本的 Swift 包是如何配置的

392
00:16:50,996 --> 0:16:52,236
现在让我们看看

393
00:16:52,286 --> 0:16:53,586
如何在现有的 Xcode 项目中

394
00:16:53,946 --> 0:16:55,326
添加对 Swift 包的支持

395
00:16:55,326 --> 0:16:59,416
我有一个

396
00:16:59,416 --> 0:17:01,016
名为 Menu Downloader 的项目

397
00:16:59,416 --> 0:17:01,016
名为 Menu Downloader 的项目

398
00:17:01,016 --> 0:17:02,516
我一直把它与其他包管理器一起使用

399
00:17:02,546 --> 0:17:04,016
如 CocoPods 和 Carthage

400
00:17:04,636 --> 0:17:08,705
这个项目有一个 Swift Target

401
00:17:08,705 --> 0:17:11,786
一些遗留 C 代码

402
00:17:11,786 --> 0:17:13,856
Xcode 项目文件和一个

403
00:17:13,856 --> 0:17:16,386
CoCoPods 包管理器使用的

404
00:17:17,175 --> 0:17:19,616
首先需要做的是

405
00:17:19,715 --> 0:17:21,286
添加 package.swift

406
00:17:21,286 --> 0:17:23,536
Manifest 文件

407
00:17:23,665 --> 0:17:25,996
为配置 Target 做准备

408
00:17:26,056 --> 0:17:27,586
从遗留的 C 代码开始

409
00:17:27,986 --> 0:17:30,656
我们首先给它一个名称

410
00:17:30,656 --> 0:17:31,336
然后给它一个自定义路径

411
00:17:31,336 --> 0:17:33,906
这么做的原因是

412
00:17:33,946 --> 0:17:35,536
这个 Target 没有放在

413
00:17:35,536 --> 0:17:36,456
标准的 Sources 目录下

414
00:17:37,796 --> 0:17:39,636
我还发现

415
00:17:39,636 --> 0:17:41,276
C 代码中有一个宏

416
00:17:41,276 --> 0:17:43,366
如果被定义

417
00:17:43,366 --> 0:17:43,906
就会下载一个秘密午餐菜单

418
00:17:44,716 --> 0:17:46,856
所以我使用了

419
00:17:47,426 --> 0:17:49,726
cSettings API 定义它

420
00:17:49,976 --> 0:17:51,836
我们可以以用类似的方式

421
00:17:51,906 --> 0:17:53,326
配置 Swift Target

422
00:17:53,326 --> 0:17:55,636
先自定义路径

423
00:17:55,636 --> 0:18:00,796
然后声明对遗留 C Target 的依赖

424
00:17:55,636 --> 0:18:00,796
然后声明对遗留 C Target 的依赖

425
00:18:00,906 --> 0:18:02,236
这个包有两个产品

426
00:18:03,026 --> 0:18:04,986
第一个产品导出 Swift Target

427
00:18:04,986 --> 0:18:07,946
第二个产品导出 C Target

428
00:18:07,946 --> 0:18:10,266
我们需要单独导出 C Target

429
00:18:10,266 --> 0:18:12,446
因为我们的一些用户

430
00:18:12,446 --> 0:18:14,856
可能直接使用 C Target

431
00:18:14,856 --> 0:18:16,736
在这种情况下

432
00:18:16,736 --> 0:18:19,000
他们不需要 Swift 桥接

433
00:18:20,286 --> 0:18:23,146
它还被标记为 dynamic

434
00:18:23,146 --> 0:18:25,036
因为我知道一些用户

435
00:18:25,066 --> 0:18:28,986
有时会加载这个库

436
00:18:29,196 --> 0:18:30,266
现在 让我们看看

437
00:18:30,266 --> 0:18:33,000
如何在包中配置包依赖关系

438
00:18:34,496 --> 0:18:36,576
包依赖关系在一个

439
00:18:36,576 --> 0:18:39,176
名为 dependencies 的部分中配置

440
00:18:39,176 --> 0:18:42,386
它有两个参数

441
00:18:42,386 --> 0:18:44,446
源 URL 和版本要求

442
00:18:45,366 --> 0:18:47,466
在本例中

443
00:18:47,466 --> 0:18:48,576
我使用的是 upToNextMajor 版本要求

444
00:18:49,296 --> 0:18:51,126
根据语义化版本控制

445
00:18:51,126 --> 0:18:52,886
这意味着我的包

446
00:18:52,886 --> 0:18:54,946
需要的 Yams

447
00:18:54,946 --> 0:18:56,376
是从主要版本 2 开始

448
00:18:56,376 --> 0:18:58,456
然后直到下一个主要版本 3

449
00:18:59,676 --> 0:19:00,816
upToNextMajor

450
00:18:59,676 --> 0:19:00,816
upToNextMajor

451
00:19:00,816 --> 0:19:02,096
是一种比较推荐的

452
00:19:02,226 --> 0:19:03,216
版本要求声明方式

453
00:19:04,206 --> 0:19:06,226
这是因为它

454
00:19:06,226 --> 0:19:08,366
允许你为下一个主要版本

455
00:19:08,366 --> 0:19:10,346
指定最低版本

456
00:19:10,896 --> 0:19:12,236
它足够灵活

457
00:19:12,236 --> 0:19:14,226
可以避免解析时的

458
00:19:14,226 --> 0:19:15,466
潜在冲突

459
00:19:16,276 --> 0:19:19,926
这个参数也可以直接写作 from

460
00:19:21,036 --> 0:19:24,106
还有一些其他类型的版本要求

461
00:19:24,856 --> 0:19:27,516
我们已经看到了 from 和 upToNextMajor

462
00:19:28,786 --> 0:19:30,446
还有 upToNextMinor

463
00:19:30,446 --> 0:19:33,876
它允许你基于次版本号

464
00:19:33,876 --> 0:19:35,016
声明版本要求

465
00:19:36,006 --> 0:19:37,656
如果你想对所采取的更改保守一些

466
00:19:37,656 --> 0:19:40,126
这种版本声明十分有用

467
00:19:41,416 --> 0:19:43,466
其次我们有 exact 的版本要求

468
00:19:43,986 --> 0:19:45,276
这允许我们

469
00:19:45,276 --> 0:19:47,246
将依赖固定到特定版本上

470
00:19:48,086 --> 0:19:49,606
我们不建议使用这种方式

471
00:19:49,606 --> 0:19:50,846
除非你真的需要使用

472
00:19:51,456 --> 0:19:55,016
因为它很可能会导致

473
00:19:55,016 --> 0:19:55,083
包中发生冲突

474
00:19:56,636 --> 0:19:57,756
还有一些

475
00:19:57,756 --> 0:19:59,236
非基于版本的要求

476
00:19:59,776 --> 0:20:02,276
有基于分支的依赖关系

477
00:19:59,776 --> 0:20:02,276
有基于分支的依赖关系

478
00:20:02,416 --> 0:20:03,756
如果你想要开发多个包

479
00:20:03,756 --> 0:20:05,546
并且希望保持它们同步

480
00:20:05,546 --> 0:20:08,326
这将非常有用

481
00:20:08,506 --> 0:20:09,596
并且有基于修订的要求

482
00:20:09,596 --> 0:20:11,306
这有助于

483
00:20:11,406 --> 0:20:12,546
将我们的依赖固定到

484
00:20:12,656 --> 0:20:13,816
特定的修订版

485
00:20:14,976 --> 0:20:18,176
请注意 已发布的包中不允许

486
00:20:18,176 --> 0:20:19,276
使用基于分支

487
00:20:19,276 --> 0:20:19,746
和基于修订的要求

488
00:20:20,696 --> 0:20:22,126
在发布包之前

489
00:20:22,126 --> 0:20:23,306
必须删除所有基于分支

490
00:20:23,726 --> 0:20:25,136
和修订的要求

491
00:20:25,626 --> 0:20:28,376
现在 在选择我们的包依赖之后

492
00:20:28,376 --> 0:20:30,776
我们需要声明

493
00:20:30,776 --> 0:20:33,536
其中一个或多个产品的依赖

494
00:20:34,266 --> 0:20:36,026
在本例里

495
00:20:36,026 --> 0:20:39,616
我在 Swift Target 中

496
00:20:39,616 --> 0:20:42,566
声明对 Yams 产品的依赖

497
00:20:42,696 --> 0:20:44,406
现在让我们回到 Swift Tools 版本

498
00:20:45,436 --> 0:20:46,976
正如我之前提到的

499
00:20:46,976 --> 0:20:48,556
Swift Tools 版本

500
00:20:48,556 --> 0:20:50,046
始终是 Manifest 的第一行

501
00:20:51,106 --> 0:20:52,936
与所有其他 API 一样

502
00:20:52,936 --> 0:20:54,866
PackageDescription API 也

503
00:20:54,866 --> 0:20:56,566
随着时间的推移而发展

504
00:20:56,566 --> 0:20:58,216
你得到的库版本

505
00:20:58,426 --> 0:21:00,136
取决于 Tools 版本

506
00:20:58,426 --> 0:21:00,136
取决于 Tools 版本

507
00:21:01,376 --> 0:21:03,176
它还参与了

508
00:21:03,176 --> 0:21:04,576
依赖关系解析过程

509
00:21:05,336 --> 0:21:07,416
Xcode 确保所有

510
00:21:07,416 --> 0:21:09,306
包依赖项的 Tools 版本

511
00:21:09,306 --> 0:21:15,556
始终与包的 Tools 版本兼容

512
00:21:15,676 --> 0:21:17,776
最后 它声明了

513
00:21:17,776 --> 0:21:20,896
构建包所需的

514
00:21:20,896 --> 0:21:21,166
最低版本 Swift 编译器

515
00:21:22,386 --> 0:21:25,896
这对于生成良好的诊断非常有用

516
00:21:25,896 --> 0:21:27,126
以防有人试图将你的包

517
00:21:27,126 --> 0:21:30,246
与较旧的不兼容版本的 Xcode 一起使用

518
00:21:30,766 --> 0:21:34,706
正如 Boris 之前提到的

519
00:21:35,646 --> 0:21:38,086
Swift 包总是与平台无关

520
00:21:39,126 --> 0:21:40,196
如果你的包

521
00:21:40,196 --> 0:21:42,016
支持多个平台

522
00:21:42,016 --> 0:21:43,976
并且你有一些特定于平台的代码

523
00:21:43,976 --> 0:21:45,206
我们可以使用

524
00:21:45,206 --> 0:21:46,106
Swift 的条件组合功能

525
00:21:46,726 --> 0:21:48,696
对于支持平台的可用性

526
00:21:48,696 --> 0:21:50,936
Xcode 为每个平台

527
00:21:50,936 --> 0:21:53,526
都分配了默认的部署 Target

528
00:21:54,046 --> 0:21:56,336
你可以在包初始化的

529
00:21:56,336 --> 0:21:58,726
platform 部分中

530
00:21:58,726 --> 0:21:59,956
自定义部署 Target

531
00:22:01,216 --> 0:22:04,276
请注意这不会限制

532
00:22:04,276 --> 0:22:05,116
此程序包可以构建的平台

533
00:22:05,576 --> 0:22:07,286
它只为你列出的平台

534
00:22:07,286 --> 0:22:08,026
进行自定义设置

535
00:22:08,696 --> 0:22:11,876
在本例中

536
00:22:11,876 --> 0:22:15,256
我将 macOS 自定义为 10.15

537
00:22:16,306 --> 0:22:17,566
如果你当前的 Tools 版本

538
00:22:17,846 --> 0:22:19,336
没有所需的

539
00:22:19,336 --> 0:22:21,626
部署 Target API

540
00:22:21,626 --> 0:22:22,606
你则可以使用基于字符串的形式

541
00:22:23,266 --> 0:22:26,926
我们刚刚提到了很多关于 API 的东西

542
00:22:27,766 --> 0:22:29,786
所有包 Manifest API

543
00:22:29,786 --> 0:22:31,976
都有对应的文档

544
00:22:31,976 --> 0:22:34,446
你可以在模块界面中查看

545
00:22:35,776 --> 0:22:36,796
按住 Command 键

546
00:22:36,796 --> 0:22:38,686
在任何 Manifest 文件中

547
00:22:38,686 --> 0:22:40,056
点按导入 PackageDescription 的语句

548
00:22:40,056 --> 0:22:42,376
来访问模块界面

549
00:22:43,706 --> 0:22:45,896
知道了这些

550
00:22:45,896 --> 0:22:47,316
让我们再次欢迎 Boris

551
00:22:47,316 --> 0:22:47,756
讨论如何编辑 Swift 包

552
00:22:48,236 --> 0:22:48,536
谢谢大家

553
00:22:49,516 --> 0:22:55,266
[掌声]

554
00:22:55,766 --> 0:22:56,386
&gt;&gt; 多谢 Ankit

555
00:22:56,796 --> 0:23:00,036
在你发布包后

556
00:22:56,796 --> 0:23:00,036
在你发布包后

557
00:23:00,036 --> 0:23:02,656
过一段时间

558
00:23:02,656 --> 0:23:06,146
为了与你的团队或开源社区共享

559
00:23:06,146 --> 0:23:09,046
你可能需要在 App 的上下文中修改它

560
00:23:09,046 --> 0:23:10,706
那么 我们来谈谈编辑包

561
00:23:11,636 --> 0:23:13,576
在前面的演示中

562
00:23:13,576 --> 0:23:14,536
我在编辑了一些包

563
00:23:15,036 --> 0:23:16,806
其中一个是本地包

564
00:23:17,116 --> 0:23:19,526
它是作为工作空间的一部分构建的

565
00:23:19,876 --> 0:23:22,516
另一个是双击 package.swift 

566
00:23:22,516 --> 0:23:23,476
独立打开的

567
00:23:23,816 --> 0:23:25,146
两者都是一直可编辑的

568
00:23:25,746 --> 0:23:27,286
但是其中的包依赖项

569
00:23:27,286 --> 0:23:29,466
被锁定无法编辑

570
00:23:29,466 --> 0:23:31,446
因为它们由 Xcode 自动管理

571
00:23:31,976 --> 0:23:34,626
如果你看看之前的 App

572
00:23:34,626 --> 0:23:38,476
我们依赖 GitHub 上的 FoodNStuff 包

573
00:23:38,886 --> 0:23:41,066
如果我们现在将独立的包

574
00:23:41,066 --> 0:23:43,646
作为本地包

575
00:23:43,646 --> 0:23:45,566
添加到我们的项目中

576
00:23:45,566 --> 0:23:46,926
它将覆盖现有依赖项

577
00:23:46,926 --> 0:23:49,246
而无需进行删除

578
00:23:50,496 --> 0:23:53,486
它的覆盖基于路径的最后一部分

579
00:23:53,846 --> 0:23:55,116
因此 由于这两者都具有相同的最后一部分

580
00:23:55,116 --> 0:23:57,086
因此本地包

581
00:23:57,086 --> 0:23:58,506
将覆盖远程依赖

582
00:23:58,936 --> 0:24:02,056
由于本地包始终可编辑

583
00:23:58,936 --> 0:24:02,056
由于本地包始终可编辑

584
00:24:02,056 --> 0:24:04,916
因此你可以以这种方式

585
00:24:04,916 --> 0:24:06,666
同时编辑 App 和包

586
00:24:07,246 --> 0:24:13,816
我们来演示如何编辑包

587
00:24:14,236 --> 0:24:15,886
再次 我们回到

588
00:24:15,886 --> 0:24:17,266
我们之前的演示中停下的地方

589
00:24:18,606 --> 0:24:22,196
如果你还记得

590
00:24:22,196 --> 0:24:23,406
Swift Package Dependencies 部分

591
00:24:23,406 --> 0:24:26,886
显示了我们添加的包依赖

592
00:24:27,836 --> 0:24:30,796
由于之前我们已经对独立包完成了检查

593
00:24:30,796 --> 0:24:32,306
我们可以将它

594
00:24:32,306 --> 0:24:33,766
拖到我们的项目中

595
00:24:37,356 --> 0:24:38,806
现在 Swift Package Dependencies 部分消失了

596
00:24:39,286 --> 0:24:41,586
因为我们不再使用远程依赖项

597
00:24:41,586 --> 0:24:43,316
我们正在使用本地包

598
00:24:47,876 --> 0:24:50,356
我们的用户要求

599
00:24:50,356 --> 0:24:51,666
我们为午餐 App 提供新功能

600
00:24:52,326 --> 0:24:53,866
他们想看看

601
00:24:53,926 --> 0:24:54,456
他们能吃哪些菜

602
00:24:54,636 --> 0:24:56,346
所以 我们要明确标记

603
00:24:56,696 --> 0:24:58,536
哪种菜是素食者能吃的 哪种不是

604
00:24:59,136 --> 0:25:00,756
值得庆幸的是

605
00:24:59,136 --> 0:25:00,756
值得庆幸的是

606
00:25:00,756 --> 0:25:02,296
我们的数据模型已包含该信息

607
00:25:04,676 --> 0:25:06,646
不是我们的数据模型

608
00:25:06,786 --> 0:25:07,636
而是我们的潜在数据

609
00:25:07,856 --> 0:25:09,256
我们必须更改数据模型

610
00:25:09,256 --> 0:25:10,426
来真正显示信息

611
00:25:11,066 --> 0:25:12,576
进入包目录

612
00:25:13,976 --> 0:25:15,476
打开 FoodItem 类型

613
00:25:16,806 --> 0:25:18,056
我将在这里添加一个新属性

614
00:25:22,956 --> 0:25:25,786
名为 vegetarian

615
00:25:25,786 --> 0:25:27,336
类型是 Bool

616
00:25:27,336 --> 0:25:28,436
拷贝这部分

617
00:25:28,436 --> 0:25:30,826
将它作为参数

618
00:25:30,826 --> 0:25:31,606
添加到初始化中

619
00:25:31,936 --> 0:25:34,666
最后我们在初始化中

620
00:25:34,666 --> 0:25:39,526
设置属性参数

621
00:25:40,136 --> 0:25:41,376
所以现在我们在数据模型中

622
00:25:41,376 --> 0:25:43,666
有关于是否是素食的信息

623
00:25:44,366 --> 0:25:46,576
让我们在 UI 中添加一些内容

624
00:25:46,576 --> 0:25:48,116
以便向用户显示信息

625
00:25:49,286 --> 0:25:51,216
转到我们的 iOS App 的代码

626
00:25:51,216 --> 0:25:54,046
让我们隐藏项目导航栏

627
00:25:54,166 --> 0:25:55,166
获得更多的空间

628
00:25:55,166 --> 0:25:57,886
并恢复预览

629
00:25:57,886 --> 0:25:58,946
以便我们看到

630
00:25:58,946 --> 0:25:59,076
正在处理的内容

631
00:25:59,666 --> 0:26:02,086
我们可以使用跳转栏

632
00:25:59,666 --> 0:26:02,086
我们可以使用跳转栏

633
00:26:02,086 --> 0:26:03,566
来转到 FoodItemRowView 类型

634
00:26:04,086 --> 0:26:09,586
如果我们在编辑器中转到我们的 UI 代码

635
00:26:09,586 --> 0:26:11,386
我们会看到高亮显示的

636
00:26:11,386 --> 0:26:14,676
表示每个表视图单元格

637
00:26:15,366 --> 0:26:20,736
所以 我已经准备了一个片段

638
00:26:20,866 --> 0:26:23,716
可以为食物添加标签

639
00:26:23,716 --> 0:26:26,146
包含食物名称

640
00:26:26,146 --> 0:26:28,536
并添加是否是素食的表情符号

641
00:26:29,016 --> 0:26:31,626
在文本字段中

642
00:26:31,836 --> 0:26:33,036
使用该标签

643
00:26:33,476 --> 0:26:37,996
让我们恢复预览

644
00:26:38,486 --> 0:26:42,066
然后可以看到

645
00:26:42,066 --> 0:26:44,176
现在每道菜都清楚标明

646
00:26:44,176 --> 0:26:45,276
它是不是素食

647
00:26:45,956 --> 0:26:47,526
因此 通过这些步骤

648
00:26:47,526 --> 0:26:49,636
你可以同时编辑你的 App 和包

649
00:26:50,146 --> 0:26:52,416
我们回到幻灯片

650
00:26:58,396 --> 0:27:00,466
这种覆盖机制

651
00:26:58,396 --> 0:27:00,466
这种覆盖机制

652
00:27:00,526 --> 0:27:01,836
也可用于修改他人的包

653
00:27:01,836 --> 0:27:03,986
如果你需要修复漏洞

654
00:27:03,986 --> 0:27:05,646
或者修改

655
00:27:05,646 --> 0:27:07,146
包中的漏洞

656
00:27:08,976 --> 0:27:10,696
总结一下

657
00:27:10,696 --> 0:27:12,106
我们来看看

658
00:27:12,156 --> 0:27:13,766
Swift 包管理器的开源项目

659
00:27:13,766 --> 0:27:15,136
我们将其简称为 Swift PM

660
00:27:15,796 --> 0:27:18,896
Swift PM 已经推出了几年

661
00:27:18,896 --> 0:27:20,576
Xcode 对 Swift 包的支持

662
00:27:20,576 --> 0:27:23,006
也建立在它之上

663
00:27:23,276 --> 0:27:24,676
Swift 是一种跨平台语言

664
00:27:24,676 --> 0:27:26,496
Swift PM 则是

665
00:27:26,496 --> 0:27:28,186
是一个用于 Swift 包的

666
00:27:28,186 --> 0:27:28,956
跨平台构建系统

667
00:27:29,526 --> 0:27:31,476
你可以使用它

668
00:27:31,626 --> 0:27:35,436
在客户端和服务器端 App 之间共享代码

669
00:27:35,686 --> 0:27:37,226
Swift PM 由

670
00:27:37,226 --> 0:27:38,736
Swift 命令下的

671
00:27:38,736 --> 0:27:39,606
四个命令行工具组成

672
00:27:39,886 --> 0:27:41,596
有 swift build

673
00:27:41,596 --> 0:27:42,116
用于构建一个包

674
00:27:42,556 --> 0:27:44,256
有 swift run

675
00:27:44,256 --> 0:27:44,776
用于运行可执行结果

676
00:27:45,036 --> 0:27:46,496
有 swift test 用于运行测试

677
00:27:47,146 --> 0:27:48,846
以及最后的 swift package

678
00:27:48,846 --> 0:27:50,196
用于在包上执行各种

679
00:27:50,196 --> 0:27:51,686
非构建操作

680
00:27:52,546 --> 0:27:54,166
这些命令行工具

681
00:27:54,166 --> 0:27:57,326
可用于为 macOS 和 Linux 构建包

682
00:27:58,836 --> 0:28:03,156
要了解有关 Swift PM 命令行工具的更多信息

683
00:27:58,836 --> 0:28:03,156
要了解有关 Swift PM 命令行工具的更多信息

684
00:28:03,156 --> 0:28:05,446
及其未来发展的想法

685
00:28:05,446 --> 0:28:06,646
你可以查看 WWDC 2018 中的

686
00:28:06,646 --> 0:28:09,896
Getting to Know Swift Package Manager 会议

687
00:28:10,906 --> 0:28:14,726
当然 你也可以使用 xcodebuild

688
00:28:14,726 --> 0:28:16,196
在命令行或者 CI 上构建包

689
00:28:16,966 --> 0:28:18,476
这也是一种在命令行上

690
00:28:18,476 --> 0:28:20,706
为 iOS watchOS 和 tvOS

691
00:28:20,706 --> 0:28:21,956
构建包的方法

692
00:28:22,426 --> 0:28:25,216
Xcode 中的 Swift 包支持构建在

693
00:28:25,216 --> 0:28:26,436
libSwiftPM 库之上

694
00:28:26,436 --> 0:28:29,996
libSwiftPM 库是开源项目的一部分

695
00:28:30,946 --> 0:28:32,416
libSwiftPM 可用于

696
00:28:32,416 --> 0:28:33,856
支持 Swift 包和

697
00:28:33,856 --> 0:28:35,366
其他 ID 开发人员工具

698
00:28:36,166 --> 0:28:37,406
我们很高兴与社区合作 

699
00:28:37,406 --> 0:28:39,116
建立稳定的 API

700
00:28:39,856 --> 0:28:42,946
一个例子是 SourceKit-LSP

701
00:28:42,946 --> 0:28:44,856
它是为

702
00:28:44,856 --> 0:28:46,266
Swift 和 C 语言

703
00:28:46,266 --> 0:28:48,336
实现语言服务器协议

704
00:28:48,336 --> 0:28:50,616
简称 LSP

705
00:28:51,466 --> 0:28:53,886
LSP 定义了

706
00:28:53,886 --> 0:28:55,926
编辑器或 IDE 与

707
00:28:59,286 --> 0:29:01,026
例如自动补全 跳转到定义

708
00:28:59,286 --> 0:29:01,026
例如自动补全 跳转到定义

709
00:29:01,026 --> 0:29:02,846
或查找引用等语言功能

710
00:29:03,416 --> 0:29:05,666
使用 SourceKit-LSP

711
00:29:05,666 --> 0:29:08,616
支持语言服务器协议的编辑器 IDE

712
00:29:08,616 --> 0:29:10,186
就可以为 Swift 包提供这些功能

713
00:29:10,396 --> 0:29:11,776
这是建立在

714
00:29:11,776 --> 0:29:13,206
开源 libSwiftPM 之上的

715
00:29:13,686 --> 0:29:16,986
Swift 包管理器是

716
00:29:16,986 --> 0:29:18,966
更大的 Swift 开源项目的一部分

717
00:29:19,316 --> 0:29:20,946
Swift.org 网站是一个

718
00:29:20,946 --> 0:29:23,696
了解社区和发展过程的好地方

719
00:29:24,896 --> 0:29:26,416
包管理器遵循

720
00:29:26,416 --> 0:29:28,486
Swift 发展过程

721
00:29:28,486 --> 0:29:30,146
就像 Swift 项目的其余部分一样

722
00:29:30,436 --> 0:29:31,706
任何人都可以开发

723
00:29:31,706 --> 0:29:33,646
并最终提交功能

724
00:29:33,646 --> 0:29:34,446
或重大更改

725
00:29:35,846 --> 0:29:37,356
在花时间提交修改之前

726
00:29:37,356 --> 0:29:39,086
请先查看

727
00:29:39,086 --> 0:29:40,466
论坛的包管理器部分

728
00:29:40,466 --> 0:29:42,226
和其他开发者进行交流

729
00:29:42,426 --> 0:29:44,836
并找到提供可行意见或反馈的人

730
00:29:45,256 --> 0:29:49,046
Swift 包目前仅支持

731
00:29:49,046 --> 0:29:50,566
源代码和单元测试

732
00:29:51,596 --> 0:29:53,986
我们期待与社区合作

733
00:29:53,986 --> 0:29:55,686
增加对图像 文本文件

734
00:29:55,686 --> 0:30:00,216
或其他数据文件等资源的支持

735
00:29:55,686 --> 0:30:00,216
或其他数据文件等资源的支持

736
00:30:00,396 --> 0:30:01,736
我们已经有了

737
00:30:01,736 --> 0:30:02,836
对包资源的提案

738
00:30:02,976 --> 0:30:04,336
你可以关注这个功能的发展

739
00:30:04,336 --> 0:30:06,766
并参与功能改进

740
00:30:09,936 --> 0:30:11,526
同样在 Swift.org 上

741
00:30:11,526 --> 0:30:13,636
我们会定期更新工具

742
00:30:13,636 --> 0:30:14,986
以便你自己

743
00:30:14,986 --> 0:30:15,836
尝试最新的更新

744
00:30:16,836 --> 0:30:18,016
对开源项目的更改

745
00:30:18,016 --> 0:30:19,886
也将成为 Xcode 

746
00:30:19,886 --> 0:30:21,326
未来版本的一部分

747
00:30:21,936 --> 0:30:25,886
最后

748
00:30:25,936 --> 0:30:28,076
Apple 平台和 Xcode 

749
00:30:28,076 --> 0:30:28,736
现在已提供对包的支持

750
00:30:29,776 --> 0:30:31,196
你可以在项目中查找

751
00:30:31,196 --> 0:30:33,536
可重用的代码

752
00:30:33,536 --> 0:30:34,346
并将其重构到 Swift 包中

753
00:30:35,216 --> 0:30:36,426
我们对 Swift 包

754
00:30:36,426 --> 0:30:38,436
生态系统不断扩大感到兴奋

755
00:30:39,016 --> 0:30:41,536
如果你对

756
00:30:41,536 --> 0:30:43,736
使用或创建包有任何疑问

757
00:30:43,736 --> 0:30:46,326
我们即将推出两个实验室

758
00:30:46,636 --> 0:30:48,436
一个是在今天 12 点

759
00:30:48,436 --> 0:30:50,346
另一个是明天同一时间

760
00:30:50,856 --> 0:30:53,256
非常感谢你们的到来

761
00:30:53,306 --> 0:30:54,416
享受这周剩下的美好时光吧

762
00:30:55,516 --> 0:30:59,506
[掌声]
