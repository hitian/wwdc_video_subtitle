1
00:00:01,516 --> 0:00:04,500
[音乐]

2
00:00:08,516 --> 0:00:12,106
[掌声和欢呼声]

3
00:00:12,606 --> 0:00:12,976
&gt;&gt; 好的

4
00:00:14,086 --> 0:00:14,806
我们开始吧

5
00:00:16,896 --> 0:00:18,636
大家好 我是 Paolo 

6
00:00:18,636 --> 0:00:20,256
之后我的同事 Tom 

7
00:00:20,356 --> 0:00:21,346
也会上台

8
00:00:21,676 --> 0:00:23,636
我们今天将为大家

9
00:00:23,636 --> 0:00:27,476
介绍 SF Symbols

10
00:00:27,606 --> 0:00:28,886
标志在界面上

11
00:00:28,886 --> 0:00:30,296
有着很重要的作用

12
00:00:30,796 --> 0:00:31,966
它们可以有效地

13
00:00:31,966 --> 0:00:33,136
传递意义

14
00:00:34,156 --> 0:00:35,866
它们可以显示

15
00:00:35,866 --> 0:00:36,556
你选择的项目

16
00:00:37,336 --> 0:00:39,216
也可以在视觉上

17
00:00:39,216 --> 0:00:40,476
区分不同类型

18
00:00:40,476 --> 0:00:42,266
的内容

19
00:00:42,956 --> 0:00:44,496
标志通过系统

20
00:00:44,496 --> 0:00:45,826
出现在不同的情景中

21
00:00:50,696 --> 0:00:52,396
这在用户界面中

22
00:00:52,396 --> 0:00:55,576
创造了一种熟悉感

23
00:00:56,786 --> 0:00:57,866
标志的使用方法有很多种

24
00:00:57,866 --> 0:00:59,966
设计标志有一种

25
00:00:59,966 --> 0:01:01,916
固有的挑战

26
00:00:59,966 --> 0:01:01,916
固有的挑战

27
00:01:01,916 --> 0:01:03,936
与 UI 其它的

28
00:01:03,936 --> 0:01:06,696
必须的元素

29
00:01:06,696 --> 0:01:09,726
相匹配 那就是文本

30
00:01:10,616 --> 0:01:12,286
文本在 UI 的运用中

31
00:01:12,336 --> 0:01:13,326
有不同的磅值

32
00:01:13,326 --> 0:01:14,976
标志也是如此

33
00:01:19,456 --> 0:01:21,876
我们经常使用标志

34
00:01:21,876 --> 0:01:22,206
你们也是

35
00:01:23,296 --> 0:01:24,976
我们想要让你们的工作更简单

36
00:01:27,086 --> 0:01:30,116
在 iOS 13 系统中 我们重新设计了

37
00:01:30,116 --> 0:01:30,736
我们的标志

38
00:01:31,936 --> 0:01:33,186
你们会注意到这些标志

39
00:01:33,186 --> 0:01:34,906
看起来更丰满

40
00:01:34,906 --> 0:01:36,676
在粗细方面

41
00:01:36,676 --> 0:01:38,716
也显得更粗 看起来更明显

42
00:01:38,716 --> 0:01:40,996
我们也将其设计得

43
00:01:41,166 --> 0:01:43,966
与文字完美融合

44
00:01:47,126 --> 0:01:49,206
虽然我们花费大量精力

45
00:01:49,206 --> 0:01:51,136
重新设计这些

46
00:01:51,136 --> 0:01:52,566
系统中你们已经熟悉的

47
00:01:52,566 --> 0:01:54,796
标志 我们还是很激动地

48
00:01:54,796 --> 0:01:56,586
宣布我们已经

49
00:01:56,586 --> 0:01:58,606
拓展了这个名单

50
00:01:58,606 --> 0:02:03,166
并设计了更多

51
00:01:58,606 --> 0:02:03,166
并设计了更多

52
00:02:03,366 --> 0:02:03,806
我们称之为 SF Symbols

53
00:02:04,296 --> 0:02:07,206
它们是由 Apple 开发的

54
00:02:07,526 --> 0:02:09,816
可以在你们的 App 中

55
00:02:09,816 --> 0:02:11,766
使用的与平台兼容 高质量的

56
00:02:12,736 --> 0:02:12,836
一个设置

57
00:02:14,776 --> 0:02:17,456
它们是以矢量形式出现的

58
00:02:17,456 --> 0:02:19,506
这意味着它们可缩放

59
00:02:19,506 --> 0:02:22,236
不论磅值大小都

60
00:02:22,236 --> 0:02:22,956
展示良好

61
00:02:25,936 --> 0:02:27,926
它们的粗细也

62
00:02:27,926 --> 0:02:29,776
适合我们的系统字体 San Francisco 中

63
00:02:29,776 --> 0:02:33,266
所有的粗度

64
00:02:39,676 --> 0:02:42,706
这里面有超过 1000 种可以选择

65
00:02:43,356 --> 0:02:46,066
如果这些还不够

66
00:02:46,416 --> 0:02:48,706
你甚至可以自定义

67
00:02:48,706 --> 0:02:49,596
并创造你自己的标志

68
00:02:49,596 --> 0:02:52,426
我们来详细地

69
00:02:52,426 --> 0:02:52,806
了解一下

70
00:02:53,826 --> 0:02:55,596
它们被设计成与文本匹配

71
00:02:56,036 --> 0:02:57,776
它们的排版大小和文本一样

72
00:02:57,876 --> 0:03:00,106
是指定好的

73
00:02:57,876 --> 0:03:00,106
是指定好的

74
00:03:02,256 --> 0:03:03,806
当标志出现在文本旁时

75
00:03:03,806 --> 0:03:05,636
它们都完美的出现在同一

76
00:03:05,636 --> 0:03:06,586
基线上

77
00:03:08,796 --> 0:03:10,416
当标志和文本

78
00:03:10,416 --> 0:03:12,366
垂直排列时 

79
00:03:12,366 --> 0:03:14,726
有两个最常见的情形

80
00:03:14,726 --> 0:03:17,216
文本支撑标志

81
00:03:18,596 --> 0:03:20,796
或者标志支撑文本

82
00:03:21,596 --> 0:03:23,136
平行排列让

83
00:03:23,136 --> 0:03:25,086
一切看起来都比较好

84
00:03:26,996 --> 0:03:29,316
这也可能是因为它的留白

85
00:03:31,616 --> 0:03:32,676
它们并不一定是相同的

86
00:03:32,766 --> 0:03:34,586
正如你们在右下角

87
00:03:35,076 --> 0:03:37,326
蓝色长方形所看到的

88
00:03:37,746 --> 0:03:40,906
留白是不可见的

89
00:03:40,906 --> 0:03:42,266
在屏幕上展示元素时

90
00:03:42,266 --> 0:03:44,026
却经常会考虑到它们

91
00:03:44,586 --> 0:03:47,266
我们来看看粗细

92
00:03:47,766 --> 0:03:50,336
SF Symbols 很仔细地

93
00:03:50,336 --> 0:03:52,886
让其在不同粗度下

94
00:03:52,886 --> 0:03:54,686
都显得很美观 不论是超细

95
00:03:54,686 --> 0:03:56,336
还是黑体 就像我们的

96
00:03:56,336 --> 0:03:56,656
系统字体一样

97
00:03:57,846 --> 0:03:59,346
每个粗度都是手动

98
00:03:59,346 --> 0:04:00,686
画成的 而且

99
00:03:59,346 --> 0:04:00,686
画成的 而且

100
00:04:00,686 --> 0:04:02,696
每一个设计都加入了特殊的考量

101
00:04:03,456 --> 0:04:04,456
较细的粗度有一种

102
00:04:04,456 --> 0:04:06,206
独特而美丽的优雅感

103
00:04:07,336 --> 0:04:09,876
而粗的更加能彰显

104
00:04:09,876 --> 0:04:11,716
细节和清晰度

105
00:04:11,716 --> 0:04:16,836
当它们与文本相邻时

106
00:04:16,836 --> 0:04:19,356
即使文本的大小不变

107
00:04:19,356 --> 0:04:21,456
我们也需要使用

108
00:04:21,456 --> 0:04:23,976
不同大小的标志

109
00:04:25,336 --> 0:04:26,756
这是我们中很多人

110
00:04:26,756 --> 0:04:29,386
根据标志可能需要

111
00:04:29,386 --> 0:04:31,406
强调的部分

112
00:04:31,406 --> 0:04:33,856
以及可用的空间

113
00:04:33,976 --> 0:04:34,886
已经做过的工作

114
00:04:36,216 --> 0:04:38,386
在 iOS 13 中 我们将其

115
00:04:38,386 --> 0:04:39,286
转换成了一个系统

116
00:04:40,756 --> 0:04:44,156
我们用缩放大小来调用它们 --

117
00:04:44,636 --> 0:04:46,186
小 中 大

118
00:04:46,796 --> 0:04:49,806
值得注意的是

119
00:04:49,806 --> 0:04:51,216
标志的尺寸

120
00:04:51,216 --> 0:04:52,446
还是一样的

121
00:04:52,886 --> 0:04:54,436
变化的只是缩放比例

122
00:04:56,016 --> 0:04:56,966
每一个缩放

123
00:04:56,966 --> 0:04:58,336
都与文本的粗细是相匹配的

124
00:04:59,056 --> 0:05:00,476
提醒大家一句

125
00:04:59,056 --> 0:05:00,476
提醒大家一句

126
00:05:00,476 --> 0:05:02,906
这不仅仅是线性缩放

127
00:05:02,906 --> 0:05:04,266
笔画的粗细

128
00:05:04,266 --> 0:05:07,066
根据文本的粗细而进行调整

129
00:05:07,276 --> 0:05:08,896
其他好处就是

130
00:05:08,896 --> 0:05:10,746
使用缩放意味着

131
00:05:10,746 --> 0:05:13,346
它们会自动

132
00:05:13,346 --> 0:05:15,056
与大写字母的高度

133
00:05:15,056 --> 0:05:15,436
垂直对齐

134
00:05:17,266 --> 0:05:19,736
因此 标志和文本中间

135
00:05:20,866 --> 0:05:22,386
垂直的布局

136
00:05:22,386 --> 0:05:25,106
对于三种缩放大小来说都是自动的

137
00:05:27,156 --> 0:05:28,986
那么这些缩放应该在哪里使用

138
00:05:28,986 --> 0:05:30,346
你又应该在何时

139
00:05:30,376 --> 0:05:31,176
使用一个特定的缩放大小呢

140
00:05:32,086 --> 0:05:33,716
这里有三个 UI 的例子

141
00:05:34,686 --> 0:05:37,896
它们都是 17 磅值的文本

142
00:05:37,896 --> 0:05:40,326
但是这些标志的边框

143
00:05:40,326 --> 0:05:43,466
拥有不同的高度

144
00:05:44,046 --> 0:05:47,606
所以文本在这三个例子中

145
00:05:47,606 --> 0:05:49,206
都是一样的 标志也是如此

146
00:05:49,206 --> 0:05:51,276
但是标志使用了一个不同的

147
00:05:51,336 --> 0:05:53,376
缩放比例 为了

148
00:05:53,506 --> 0:05:54,206
来最好地适配空间

149
00:05:54,846 --> 0:05:58,136
在某些如

150
00:05:58,136 --> 0:06:00,066
工具栏的地方 你的工具包

151
00:05:58,136 --> 0:06:00,066
工具栏的地方 你的工具包

152
00:06:00,066 --> 0:06:01,716
会做出正确的事情

153
00:06:01,716 --> 0:06:03,146
同时也会自动地为控制

154
00:06:03,556 --> 0:06:03,976
选择正确的缩放比例

155
00:06:07,376 --> 0:06:09,376
当我们把这些都放在一起的时候

156
00:06:09,656 --> 0:06:11,746
-- 改变大小 缩放和粗细

157
00:06:11,746 --> 0:06:13,506
-- 这意味着你可以通过

158
00:06:13,506 --> 0:06:14,586
动态类型来使用它们

159
00:06:14,876 --> 0:06:16,056
一切都运行得很好

160
00:06:16,566 --> 0:06:20,346
当然 标志也可以

161
00:06:20,346 --> 0:06:21,126
本地化

162
00:06:21,656 --> 0:06:23,006
这是一个语音备忘录的 App

163
00:06:23,006 --> 0:06:25,206
用英文运行

164
00:06:25,726 --> 0:06:28,166
也用阿拉伯语运行

165
00:06:28,346 --> 0:06:30,136
请注意时间控制

166
00:06:30,506 --> 0:06:31,846
是如何反应

167
00:06:31,846 --> 0:06:32,676
当地的数字系统的

168
00:06:33,246 --> 0:06:36,296
如果你在想如何

169
00:06:36,296 --> 0:06:37,616
理解这些标志的意思

170
00:06:37,986 --> 0:06:39,496
每个标志都有一个

171
00:06:39,496 --> 0:06:39,836
独特的名称

172
00:06:43,206 --> 0:06:44,806
大部分标志

173
00:06:44,806 --> 0:06:47,546
可以改变轮廓

174
00:06:47,546 --> 0:06:47,846
或填充

175
00:06:48,476 --> 0:06:52,126
它们可以被圆圈

176
00:06:52,606 --> 0:06:55,556
或正方形所包围 也可能

177
00:06:55,556 --> 0:06:56,976
会有标准化的标记系统

178
00:07:00,086 --> 0:07:01,626
我们让你们可以更方便地

179
00:07:01,626 --> 0:07:02,726
使用这些标志

180
00:07:04,086 --> 0:07:06,006
首先 它们被包含在

181
00:07:06,006 --> 0:07:07,366
San Francisco 字体中

182
00:07:07,426 --> 0:07:08,766
而且可以下载 所以你们可以

183
00:07:08,766 --> 0:07:09,976
在你们的设计提示符中使用

184
00:07:11,196 --> 0:07:12,446
这些缩放大小可以在

185
00:07:12,446 --> 0:07:13,626
打开类型这个功能中打开

186
00:07:14,296 --> 0:07:16,246
默认的缩放大小是中等

187
00:07:16,246 --> 0:07:17,796
小和大都可以通过

188
00:07:17,796 --> 0:07:20,156
排版面板或者

189
00:07:20,686 --> 0:07:22,386
App 特定的 UI 来选择

190
00:07:24,016 --> 0:07:25,436
做个提醒

191
00:07:25,436 --> 0:07:27,006
这些字体只能用于设计

192
00:07:27,006 --> 0:07:27,556
不能用于部署

193
00:07:28,066 --> 0:07:31,296
那你们如何使用这些标志呢

194
00:07:31,546 --> 0:07:33,196
你如何访问它们

195
00:07:33,196 --> 0:07:34,076
并将其运用到自己的设计中呢

196
00:07:35,186 --> 0:07:37,356
为了帮助你们

197
00:07:37,426 --> 0:07:39,536
我们开发了一个名字叫做

198
00:07:39,586 --> 0:07:42,116
SF Symbols 的新 App

199
00:07:42,116 --> 0:07:43,406
这就是它的样子

200
00:07:44,066 --> 0:07:45,396
它会通过集合视图的形式

201
00:07:45,396 --> 0:07:48,906
或是表格视图的形式

202
00:07:48,906 --> 0:07:49,946
让你浏览标志

203
00:07:51,356 --> 0:07:52,696
你可以通过名称搜索

204
00:07:52,696 --> 0:07:56,476
也可以预览字体中

205
00:07:56,916 --> 0:07:59,686
不同的粗度

206
00:08:03,876 --> 0:08:05,706
你可以从 developer.apple.com/design

207
00:08:05,706 --> 0:08:07,136
下载带有新字体的 

208
00:08:07,136 --> 0:08:10,126
SF Symbols App

209
00:08:10,936 --> 0:08:12,826
说到设计

210
00:08:12,826 --> 0:08:14,446
设计资源 -- 在 developer.apple.com 中

211
00:08:14,446 --> 0:08:17,416
新的设计资源

212
00:08:17,416 --> 0:08:18,516
同样使用标志

213
00:08:19,206 --> 0:08:21,366
它们通过名称来引用

214
00:08:24,996 --> 0:08:27,406
一些系统图标现在

215
00:08:27,466 --> 0:08:28,186
也是标志

216
00:08:28,186 --> 0:08:29,616
如果你要使用这些

217
00:08:29,616 --> 0:08:31,476
它们会自动

218
00:08:31,766 --> 0:08:32,716
使用新设计

219
00:08:33,405 --> 0:08:37,035
现在我们已经了解了

220
00:08:37,035 --> 0:08:38,246
如何寻找有效的标志

221
00:08:38,246 --> 0:08:40,236
让我们来看一个真实的例子

222
00:08:40,655 --> 0:08:43,926
这是一个你可能需要

223
00:08:43,926 --> 0:08:45,016
为你的 App 装配的一个规范

224
00:08:46,476 --> 0:08:47,966
你可以看到在这之前

225
00:08:47,966 --> 0:08:50,866
你也许需要这样做 -- 

226
00:08:51,016 --> 0:08:52,166
明确规定你的图像

227
00:08:52,616 --> 0:08:54,756
矩形的范围 明确的

228
00:08:54,756 --> 0:08:57,986
填充和插入 现在 

229
00:08:58,076 --> 0:08:59,536
标志明显地简化了范式

230
00:09:00,236 --> 0:09:01,696
你只需要指定一个名称

231
00:09:01,696 --> 0:09:03,136
它的磅值和对齐

232
00:09:04,286 --> 0:09:06,416
如果合适的话 

233
00:09:06,416 --> 0:09:06,956
也可以是其粗细和缩放大小

234
00:09:09,756 --> 0:09:11,006
我和 Tom 一起在研发这个 App

235
00:09:11,036 --> 0:09:13,076
第二行的标志

236
00:09:13,076 --> 0:09:14,536
有点太普通了

237
00:09:14,536 --> 0:09:16,606
这是一个饮料的清单

238
00:09:16,606 --> 0:09:17,706
所以我想把它换成

239
00:09:17,706 --> 0:09:18,686
更合适的标志

240
00:09:18,686 --> 0:09:20,106
让其可以表达

241
00:09:20,106 --> 0:09:21,516
这些是可口的热饮

242
00:09:22,636 --> 0:09:23,966
所以我要把它给换了

243
00:09:23,966 --> 0:09:27,306
我想把它换成茶杯

244
00:09:28,956 --> 0:09:30,206
这个茶杯看起来很好

245
00:09:30,856 --> 0:09:32,776
我相信 Tom 也会喜欢的

246
00:09:33,256 --> 0:09:34,866
这并没有包含在

247
00:09:34,866 --> 0:09:36,836
我们提供的标志中

248
00:09:38,046 --> 0:09:39,986
SF Symbols App 让你可以

249
00:09:39,986 --> 0:09:41,686
自定义并创建

250
00:09:41,686 --> 0:09:42,286
你自己的标志

251
00:09:43,756 --> 0:09:45,596
为了实现这一点

252
00:09:45,596 --> 0:09:47,096
你需要从 App 中

253
00:09:47,096 --> 0:09:50,236
输出标志 

254
00:09:50,236 --> 0:09:52,586
标志也可以通过模板来输出

255
00:09:54,676 --> 0:09:56,306
这就是模板的样子

256
00:09:57,516 --> 0:09:59,056
这拥有标志所有的粗度和 

257
00:09:59,056 --> 0:10:00,166
所有的大小

258
00:09:59,056 --> 0:10:00,166
所有的大小

259
00:10:00,696 --> 0:10:04,766
这个模板是 SVG 格式的

260
00:10:05,636 --> 0:10:07,416
这意味着它可以被

261
00:10:07,416 --> 0:10:08,506
大多数设计工具所编辑

262
00:10:09,056 --> 0:10:12,776
它被专门设计成

263
00:10:12,776 --> 0:10:14,366
在任何设计阶段

264
00:10:14,366 --> 0:10:17,476
都有导向性且可使用

265
00:10:17,696 --> 0:10:19,856
相同的模板也同样

266
00:10:19,856 --> 0:10:21,886
作为源构件

267
00:10:21,966 --> 0:10:22,936
直接运用在 Xcode 中

268
00:10:24,026 --> 0:10:25,316
再也不会有成千上万的

269
00:10:25,406 --> 0:10:26,496
文件四处浮动

270
00:10:27,916 --> 0:10:29,156
那接下来就让我们看看我们是如何制作

271
00:10:29,266 --> 0:10:29,586
茶杯标志的

272
00:10:30,056 --> 0:10:32,926
首先 我们来到 SF Symbols App

273
00:10:32,926 --> 0:10:35,606
我们先寻找一个好的起点

274
00:10:36,306 --> 0:10:37,806
我们的茶杯被一个圆圈

275
00:10:37,836 --> 0:10:39,336
所包围 所以我觉得

276
00:10:39,336 --> 0:10:40,346
圆圈是一个很好的起点

277
00:10:40,996 --> 0:10:42,826
所以我检索圆圈

278
00:10:43,306 --> 0:10:44,766
找到了

279
00:10:44,826 --> 0:10:46,706
我可以选择它

280
00:10:46,706 --> 0:10:48,176
并从文件菜单导出样式

281
00:10:48,786 --> 0:10:52,506
我可以保存它

282
00:10:52,506 --> 0:10:53,496
现在就可以自定义了

283
00:10:54,146 --> 0:10:56,726
在我的编辑器中打开

284
00:10:57,176 --> 0:10:59,716
请注意这些图层都有

285
00:10:59,826 --> 0:11:00,536
不同的名称

286
00:10:59,826 --> 0:11:00,536
不同的名称

287
00:11:01,306 --> 0:11:02,576
这些名称很重要

288
00:11:02,666 --> 0:11:04,516
它们可以识别

289
00:11:04,516 --> 0:11:05,736
标志的每个个性化配置

290
00:11:05,736 --> 0:11:06,946
粗细 缩放大小

291
00:11:06,946 --> 0:11:09,026
所以在你画画

292
00:11:09,026 --> 0:11:10,386
来保证你的轮廓

293
00:11:10,456 --> 0:11:12,366
是在合适的那一层时

294
00:11:12,366 --> 0:11:14,416
需要非常仔细

295
00:11:14,416 --> 0:11:17,256
现在我要开始我的自定义工作了

296
00:11:17,256 --> 0:11:19,676
我把茶杯标志

297
00:11:19,796 --> 0:11:21,426
放在中等大小的常规层

298
00:11:22,246 --> 0:11:24,156
我要保证它居中

299
00:11:24,156 --> 0:11:27,756
同时光学上是平衡的

300
00:11:27,756 --> 0:11:30,526
然后我把它缩小

301
00:11:30,526 --> 0:11:33,676
为了笔画粗细

302
00:11:33,676 --> 0:11:34,966
我将它设为小的常规大小

303
00:11:35,016 --> 0:11:37,166
接着我重复这个过程

304
00:11:37,386 --> 0:11:39,076
我放大它的粗度

305
00:11:39,076 --> 0:11:40,826
将其居中 保证它

306
00:11:40,826 --> 0:11:43,006
在大的常规大小中也很好看

307
00:11:43,156 --> 0:11:45,046
然后继续直到

308
00:11:45,176 --> 0:11:47,216
这个样式完成

309
00:11:48,416 --> 0:11:50,466
现在 我已经准备好

310
00:11:50,466 --> 0:11:54,366
将 SVG 从设计工具中导出

311
00:11:54,556 --> 0:11:56,166
我可以把接下来的事情交给 Tom

312
00:11:56,236 --> 0:11:59,356
我相信他会很好地完成

313
00:11:59,356 --> 0:12:01,626
实际上 他不需要做太多

314
00:11:59,356 --> 0:12:01,626
实际上 他不需要做太多

315
00:12:01,836 --> 0:12:03,546
它已经准备好按照原本的样子

316
00:12:03,546 --> 0:12:04,456
被拖入 Xcode

317
00:12:10,516 --> 0:12:12,056
所以如果你不想要

318
00:12:12,056 --> 0:12:14,086
为你的标志提供

319
00:12:14,086 --> 0:12:16,536
所有的粗度 你至少得

320
00:12:16,656 --> 0:12:18,716
在中等大小中提供常规号

321
00:12:19,456 --> 0:12:22,526
然后是常规号的大小

322
00:12:24,006 --> 0:12:26,046
然后是针对粗体文本相同的粗体

323
00:12:26,356 --> 0:12:28,986
如果你想要支撑

324
00:12:28,986 --> 0:12:30,586
所有的动态类型

325
00:12:30,886 --> 0:12:34,836
那也可以包含中等和粗体

326
00:12:35,486 --> 0:12:36,846
当然 如果你想要

327
00:12:36,846 --> 0:12:38,376
考虑你 App 的

328
00:12:38,376 --> 0:12:39,166
排版调色

329
00:12:39,586 --> 0:12:42,156
你可能会需要更细或更粗的粗度

330
00:12:43,026 --> 0:12:47,156
简要概述一下 

331
00:12:47,156 --> 0:12:49,116
我们需要了解一个

332
00:12:49,116 --> 0:12:50,016
与 San Francisco 匹配的新标志库

333
00:12:51,036 --> 0:12:53,806
它们是矢量图

334
00:12:53,806 --> 0:12:55,316
拥有不同的粗度和大小

335
00:12:56,506 --> 0:12:58,366
你可以通过 SF Symbols App

336
00:12:58,366 --> 0:12:59,106
浏览它们

337
00:13:00,626 --> 0:13:01,966
我们看过了如何在

338
00:13:01,966 --> 0:13:03,806
你们的规格中使用它们 如何通过名字检索

339
00:13:03,966 --> 0:13:05,056
如何指定它们的

340
00:13:05,106 --> 0:13:07,796
位置 最后就是

341
00:13:07,796 --> 0:13:09,606
你们可以使用从 SF Symbols App 导出的

342
00:13:09,606 --> 0:13:11,546
SVG 样板来

343
00:13:11,546 --> 0:13:12,076
自定义标志

344
00:13:14,116 --> 0:13:15,376
现在 我想邀请 Tom

345
00:13:15,376 --> 0:13:16,826
来到台上 他会告诉你们

346
00:13:16,856 --> 0:13:18,206
如何在代码中

347
00:13:18,206 --> 0:13:18,886
使用这些标志

348
00:13:19,516 --> 0:13:21,546
[掌声]

349
00:13:22,046 --> 0:13:22,346
&gt;&gt; 谢谢 Paolo

350
00:13:23,516 --> 0:13:26,156
[掌声]

351
00:13:26,656 --> 0:13:28,856
我真的很激动

352
00:13:28,986 --> 0:13:30,396
我想做的第一件事就是

353
00:13:30,396 --> 0:13:32,736
看看能否在我自己的 App 中

354
00:13:32,736 --> 0:13:34,226
使用这些标志

355
00:13:34,756 --> 0:13:36,386
这是一个简单的幻灯片 App

356
00:13:36,386 --> 0:13:38,596
它有一些 UI 

357
00:13:38,706 --> 0:13:39,956
可以让你改变速度

358
00:13:40,406 --> 0:13:42,236
但我真的不太喜欢

359
00:13:42,316 --> 0:13:43,296
这些图片

360
00:13:43,716 --> 0:13:45,276
它们非常基础 我们来看一看

361
00:13:45,436 --> 0:13:46,526
它们很适合被替换

362
00:13:46,866 --> 0:13:48,136
我们来看一下如果在

363
00:13:48,136 --> 0:13:50,616
Symbols App 中

364
00:13:50,616 --> 0:13:51,136
找一个标志会怎么样

365
00:13:51,136 --> 0:13:53,856
首先启动 SF Symbols

366
00:13:53,856 --> 0:13:55,506
搜索乌龟

367
00:13:56,096 --> 0:13:58,056
因为我们可以使用这个

368
00:13:58,056 --> 0:13:59,226
典型的乌龟和兔子

369
00:14:00,416 --> 0:14:01,686
出来了 这里有一个

370
00:14:01,686 --> 0:14:02,266
我可以用这个

371
00:14:02,266 --> 0:14:02,746
这很不错

372
00:14:04,086 --> 0:14:05,056
兔子也在这

373
00:14:05,316 --> 0:14:07,576
完美 接下来 我要如何使用它们呢

374
00:14:07,916 --> 0:14:08,686
非常简单

375
00:14:08,686 --> 0:14:10,316
我们要介绍一个名为 UIImage(systemName 的

376
00:14:10,316 --> 0:14:12,266
新的 API 

377
00:14:12,316 --> 0:14:15,376
它和现有的 API 非常相似

378
00:14:15,836 --> 0:14:18,016
你只需要放入

379
00:14:18,016 --> 0:14:19,376
你从 SF Symbols App 复制的名称

380
00:14:19,376 --> 0:14:20,546
这样就可以了

381
00:14:20,546 --> 0:14:22,706
如果我们构建并运行 -- 哇 砰

382
00:14:23,516 --> 0:14:25,526
看起来非常好

383
00:14:25,886 --> 0:14:26,896
这只是两行代码

384
00:14:27,146 --> 0:14:30,426
完美 Paolo 发给了我一个规范

385
00:14:30,536 --> 0:14:31,496
因为我们一起在开发

386
00:14:31,496 --> 0:14:33,106
这个 App

387
00:14:33,106 --> 0:14:34,556
他真的不能再把

388
00:14:34,596 --> 0:14:35,616
热比利时巧克力放在那了

389
00:14:35,676 --> 0:14:36,726
因为我现在感觉自己就是

390
00:14:36,786 --> 0:14:37,436
热比利时巧克力

391
00:14:38,306 --> 0:14:40,316
但是他给了我这个规范

392
00:14:40,316 --> 0:14:41,326
这看起来和之前的

393
00:14:41,326 --> 0:14:43,846
不太一样

394
00:14:43,846 --> 0:14:45,206
这里信息更少

395
00:14:45,206 --> 0:14:45,706
我喜欢这个

396
00:14:45,736 --> 0:14:47,356
这减轻了我的工作量

397
00:14:47,356 --> 0:14:49,816
不过让我们集中注意力在图片上

398
00:14:49,816 --> 0:14:51,896
因为这里有一个新的茶杯

399
00:14:52,026 --> 0:14:53,566
他还给了我一个文件

400
00:14:53,966 --> 0:14:55,946
我需要把这个 teacup.svg 文件

401
00:14:55,946 --> 0:14:57,446
导入到我的资源目录

402
00:14:57,446 --> 0:15:00,576
这当然是一个茶杯

403
00:14:57,446 --> 0:15:00,576
这当然是一个茶杯

404
00:15:00,696 --> 0:15:01,426
还有很多

405
00:15:01,426 --> 0:15:02,686
他真的花了很多精力

406
00:15:02,686 --> 0:15:04,676
这就是我喜欢 Paolo 的原因

407
00:15:04,746 --> 0:15:06,816
他非常注意细节

408
00:15:09,056 --> 0:15:10,516
现在我们可以看到我的图片在这里

409
00:15:10,516 --> 0:15:12,366
我只需要使用 UIImage(named

410
00:15:12,366 --> 0:15:13,226
来获得我的茶杯标志

411
00:15:13,226 --> 0:15:15,186
如果我们运行这个 得到的是这个

412
00:15:15,606 --> 0:15:17,256
这真是一个又好看又清楚的茶杯

413
00:15:17,316 --> 0:15:18,916
这就是我想要的

414
00:15:20,106 --> 0:15:21,146
但是我不知道你们是否注意到

415
00:15:21,146 --> 0:15:22,386
当我导入这个文件时

416
00:15:22,386 --> 0:15:26,106
在我的资源目录中

417
00:15:26,106 --> 0:15:27,146
有两个茶杯

418
00:15:27,476 --> 0:15:29,516
你可以有两张

419
00:15:29,826 --> 0:15:31,256
有着相同名称的图片

420
00:15:31,376 --> 0:15:33,386
但是它们的类型不同

421
00:15:34,216 --> 0:15:35,686
让我们回头看一看

422
00:15:35,686 --> 0:15:36,976
解释一下正在发生的事

423
00:15:36,976 --> 0:15:37,986
我们要使用信封

424
00:15:38,076 --> 0:15:39,776
因为茶杯不是一个很好的例子

425
00:15:41,276 --> 0:15:43,106
到现在为止 UIImage(named

426
00:15:43,396 --> 0:15:44,246
还是很简单的

427
00:15:44,286 --> 0:15:45,486
在资源库中有一个图像

428
00:15:45,486 --> 0:15:47,216
你可以使用 API

429
00:15:47,296 --> 0:15:47,876
将其导出

430
00:15:48,996 --> 0:15:50,266
而标志的情况

431
00:15:50,266 --> 0:15:51,106
相对于复杂一些

432
00:15:52,336 --> 0:15:53,676
事实上你可以拥有一个

433
00:15:53,676 --> 0:15:54,856
有相同名称的图片

434
00:15:54,916 --> 0:15:56,196
但是它可能有三个版本

435
00:15:56,196 --> 0:15:57,916
你可能会有一个

436
00:15:57,916 --> 0:15:58,566
有这个名称的系统标志

437
00:15:58,566 --> 0:16:00,126
还有一个有这个名称的

438
00:15:58,566 --> 0:16:00,126
还有一个有这个名称的

439
00:16:00,126 --> 0:16:01,386
自定义标志

440
00:16:01,546 --> 0:16:03,826
你之前的非标志图片也

441
00:16:05,016 --> 0:16:05,206
依然存在

442
00:16:05,326 --> 0:16:07,556
对于系统图片来说

443
00:16:07,556 --> 0:16:07,936
这一点问题都没有

444
00:16:09,006 --> 0:16:10,136
因为它们有单独的 API

445
00:16:10,136 --> 0:16:10,926
所以它们在不同的

446
00:16:10,926 --> 0:16:12,076
名称空间内

447
00:16:12,076 --> 0:16:13,236
所以它们之间

448
00:16:13,236 --> 0:16:13,876
没有冲突

449
00:16:14,346 --> 0:16:15,966
这也意味着使用这个 API

450
00:16:15,966 --> 0:16:17,546
不能获得一个自定义标志

451
00:16:17,546 --> 0:16:19,446
你也不能使用 UIImage(named API

452
00:16:19,446 --> 0:16:21,566
来获得一个

453
00:16:21,616 --> 0:16:21,796
系统标志

454
00:16:21,796 --> 0:16:23,096
它们是完全分开的

455
00:16:23,566 --> 0:16:25,996
对于自定义标志

456
00:16:25,996 --> 0:16:28,676
这是不同的

457
00:16:28,776 --> 0:16:30,526
我们可以加载优先级

458
00:16:30,526 --> 0:16:32,376
所以我们会先寻找一个

459
00:16:32,376 --> 0:16:32,796
标志图片

460
00:16:32,896 --> 0:16:34,126
如果我们找到了一个

461
00:16:34,126 --> 0:16:35,806
我们就会返回另一个

462
00:16:35,836 --> 0:16:37,006
不然我们就会寻找非标志图像

463
00:16:37,006 --> 0:16:38,286
然后你们就会得到

464
00:16:38,286 --> 0:16:38,486
那个图像

465
00:16:39,096 --> 0:16:39,906
现在 你可能会说

466
00:16:39,906 --> 0:16:41,126
这真麻烦

467
00:16:41,306 --> 0:16:42,616
如果我两个都想要怎么办

468
00:16:43,056 --> 0:16:44,366
好消息就是

469
00:16:45,706 --> 0:16:48,006
运用相同的代码

470
00:16:48,076 --> 0:16:50,256
我可以在 iOS 12 或者早期系统

471
00:16:50,256 --> 0:16:51,546
运行我的 App

472
00:16:51,546 --> 0:16:53,916
我将获得旧的图像 在这个例子中

473
00:16:54,426 --> 0:16:54,546
就是点阵图

474
00:16:55,156 --> 0:16:57,656
如果我在 iOS 13 或以上的系统运行我的 App

475
00:16:57,656 --> 0:16:59,046
我将获得标志图像

476
00:16:59,046 --> 0:17:00,546
所以我不需要编写

477
00:16:59,046 --> 0:17:00,546
所以我不需要编写

478
00:17:00,606 --> 0:17:01,986
任何版本检测代码

479
00:17:01,986 --> 0:17:02,986
来为不同的 OS 系统

480
00:17:02,986 --> 0:17:03,696
获取不同的图像

481
00:17:04,366 --> 0:17:06,816
只需要提供相同名称的两个图像

482
00:17:06,886 --> 0:17:08,915
它就可以立刻使用

483
00:17:10,016 --> 0:17:11,945
如果你想要在 iOS 13 或以上的系统

484
00:17:11,945 --> 0:17:13,665
使用老的图片

485
00:17:13,665 --> 0:17:15,665
你需要复制或重命名

486
00:17:19,076 --> 0:17:20,925
让我们回到我们的幻灯片

487
00:17:20,986 --> 0:17:23,236
我们还需要说的一件事

488
00:17:23,236 --> 0:17:26,356
就是这个茶杯的配置

489
00:17:26,646 --> 0:17:27,816
它应该是大的

490
00:17:28,836 --> 0:17:29,536
如何做到呢

491
00:17:29,536 --> 0:17:31,646
我们创建了一个引进的新的类型

492
00:17:31,646 --> 0:17:33,286
SymbolConfiguration

493
00:17:33,836 --> 0:17:35,376
我们将它创建为

494
00:17:35,376 --> 0:17:35,726
大尺寸的

495
00:17:36,376 --> 0:17:38,536
其它对象上的

496
00:17:38,536 --> 0:17:39,496
配置属性是

497
00:17:39,496 --> 0:17:41,326
未指定的

498
00:17:41,496 --> 0:17:42,836
这里只有大缩放比例

499
00:17:42,836 --> 0:17:44,356
然后我们可以使用

500
00:17:44,356 --> 0:17:46,136
imageView 来展示我们的图像

501
00:17:46,376 --> 0:17:47,336
在 UIImageView 上

502
00:17:47,336 --> 0:17:48,286
有一个名为 preferredSymbolConfiguration

503
00:17:48,416 --> 0:17:49,866
新的 UIImageView

504
00:17:50,426 --> 0:17:51,556
它将指示 imageView 

505
00:17:51,556 --> 0:17:53,246
使用这些配置

506
00:17:53,616 --> 0:17:54,446
来呈现一个标志图像

507
00:17:54,676 --> 0:17:56,256
它对于非标志图像

508
00:17:56,256 --> 0:17:57,296
是没有影响的

509
00:17:57,836 --> 0:18:01,266
如果我们运行这个

510
00:17:57,836 --> 0:18:01,266
如果我们运行这个

511
00:18:01,516 --> 0:18:02,946
看看缩放大小的变化带来的改变

512
00:18:06,456 --> 0:18:07,736
现在 你还可以使用

513
00:18:07,736 --> 0:18:11,436
这个配置来改变

514
00:18:11,486 --> 0:18:12,056
标志的尺大小

515
00:18:12,516 --> 0:18:14,206
你指定一个磅值

516
00:18:14,206 --> 0:18:15,776
也可以是粗度或缩放大小

517
00:18:16,386 --> 0:18:19,356
重要的一点是

518
00:18:19,356 --> 0:18:22,056
标志的磅值

519
00:18:22,236 --> 0:18:23,126
不是屏幕的磅值

520
00:18:23,686 --> 0:18:26,686
标志的磅值是

521
00:18:26,686 --> 0:18:27,916
字体的大小

522
00:18:27,916 --> 0:18:29,336
它们本身是排版的

523
00:18:30,086 --> 0:18:31,446
屏幕磅值可以描述

524
00:18:31,446 --> 0:18:32,736
图片的尺寸

525
00:18:32,736 --> 0:18:35,966
它的宽度和高度

526
00:18:36,216 --> 0:18:37,636
一图抵千言

527
00:18:37,756 --> 0:18:39,916
我们来直观地看一下

528
00:18:39,916 --> 0:18:41,396
比如说 在 “Favorite” 文本旁的

529
00:18:41,456 --> 0:18:44,156
圆形标志

530
00:18:44,556 --> 0:18:45,996
它们都被指定使用

531
00:18:46,056 --> 0:18:47,196
28 磅值的系统字体

532
00:18:47,966 --> 0:18:49,396
你可能会希望这个图片是

533
00:18:49,396 --> 0:18:51,256
28 x 28 的尺寸

534
00:18:51,366 --> 0:18:53,226
但结果并不是

535
00:18:53,366 --> 0:18:54,806
这些数值

536
00:18:54,856 --> 0:18:56,366
才是这个标志

537
00:18:56,366 --> 0:18:57,376
在这个配置下的正确数值

538
00:18:57,646 --> 0:18:59,156
图片不是方形的

539
00:18:59,236 --> 0:19:03,186
而是圆形的

540
00:18:59,236 --> 0:19:03,186
而是圆形的

541
00:19:03,336 --> 0:19:04,806
你需要放弃

542
00:19:04,856 --> 0:19:07,376
使用尺寸来

543
00:19:07,376 --> 0:19:07,936
描述标志

544
00:19:07,936 --> 0:19:10,016
你必须使用

545
00:19:10,066 --> 0:19:11,396
标志的磅值

546
00:19:11,396 --> 0:19:12,356
而且你可以将其视为一个文本

547
00:19:12,356 --> 0:19:13,326
因为如果你有一个文本

548
00:19:13,386 --> 0:19:15,026
你会使用字体大小来

549
00:19:15,026 --> 0:19:17,646
描述它 而不是使用尺寸

550
00:19:18,276 --> 0:19:22,216
这也是一样

551
00:19:22,426 --> 0:19:23,616
另外一个配置标志的

552
00:19:23,686 --> 0:19:25,296
方法就是使用文本风格

553
00:19:25,296 --> 0:19:27,536
这就意味着

554
00:19:27,536 --> 0:19:28,836
标志会根据

555
00:19:28,836 --> 0:19:30,096
动态文本风格规则运转

556
00:19:30,096 --> 0:19:31,486
它会和拥有文本风格的

557
00:19:31,486 --> 0:19:33,206
文本一样运转

558
00:19:34,106 --> 0:19:35,816
它与文本风格匹配得

559
00:19:36,166 --> 0:19:36,676
非常好

560
00:19:37,506 --> 0:19:39,596
imageView 会自动地

561
00:19:39,646 --> 0:19:41,646
改变图像的尺寸

562
00:19:41,646 --> 0:19:43,646
还会在运行的时候

563
00:19:43,646 --> 0:19:45,026
根据 App 的

564
00:19:45,066 --> 0:19:46,366
偏好内容尺寸目录

565
00:19:46,426 --> 0:19:46,946
来查找正确的尺寸

566
00:19:47,446 --> 0:19:50,506
在实际操作中你会看到

567
00:19:50,546 --> 0:19:52,236
比如这个文本很好看

568
00:19:52,236 --> 0:19:53,746
字体也很大 那么标志也

569
00:19:53,806 --> 0:19:54,326
随之缩放

570
00:19:54,326 --> 0:19:55,846
它们拥有非常好看的

571
00:19:55,846 --> 0:19:56,306
相同的粗度

572
00:19:59,176 --> 0:20:00,796
所以图片可以

573
00:19:59,176 --> 0:20:00,796
所以图片可以

574
00:20:00,796 --> 0:20:01,756
动态地改变大小 我们必须要谈到这个

575
00:20:01,756 --> 0:20:02,896
因为你一般都会想要

576
00:20:02,896 --> 0:20:04,706
通过宽度和高度

577
00:20:04,706 --> 0:20:05,256
压缩一个图片

578
00:20:06,186 --> 0:20:08,826
因为一个标志总是会渲染 -- 

579
00:20:09,126 --> 0:20:11,106
它是一个矢量

580
00:20:12,136 --> 0:20:13,706
你可能会想要

581
00:20:13,756 --> 0:20:14,816
指定它的宽度和高度

582
00:20:14,946 --> 0:20:16,396
但这并不是一个好主意

583
00:20:17,056 --> 0:20:18,876
首先 这不是正确的

584
00:20:19,516 --> 0:20:21,126
你可以看到在屏幕快照上

585
00:20:21,126 --> 0:20:23,046
标志被描述为

586
00:20:23,046 --> 0:20:24,776
17 磅值的标志

587
00:20:24,776 --> 0:20:27,456
这可以说是非常小

588
00:20:27,456 --> 0:20:28,996
但它还是被视为一个大的图片

589
00:20:29,666 --> 0:20:30,806
因为宽度和高度

590
00:20:30,806 --> 0:20:31,046
在那摆着

591
00:20:31,806 --> 0:20:32,836
但是你也可以看到

592
00:20:32,836 --> 0:20:34,496
它不是完全居中的

593
00:20:34,496 --> 0:20:37,436
它有点偏左 也有点居上

594
00:20:37,576 --> 0:20:40,856
第二 这不是性能 --

595
00:20:40,856 --> 0:20:41,916
这不是展示一个

596
00:20:41,916 --> 0:20:43,776
标志图像

597
00:20:43,776 --> 0:20:44,626
最具性能的方法

598
00:20:45,636 --> 0:20:49,676
所以你要做的

599
00:20:49,706 --> 0:20:50,936
是不压缩标志图像

600
00:20:50,936 --> 0:20:52,336
并让它保留

601
00:20:52,336 --> 0:20:52,696
原始的大小

602
00:20:53,416 --> 0:20:57,526
在这个例子中 我们把

603
00:20:57,526 --> 0:20:59,736
标志的大小改成了 500 磅

604
00:20:59,796 --> 0:21:00,756
以此来匹配

605
00:20:59,796 --> 0:21:00,756
以此来匹配

606
00:21:00,756 --> 0:21:02,496
我们之前的尺寸

607
00:21:02,496 --> 0:21:04,006
这样看起来好多了

608
00:21:04,166 --> 0:21:06,596
因为它的居中比之前要好

609
00:21:07,336 --> 0:21:08,846
尺寸也正确

610
00:21:10,356 --> 0:21:12,296
性能也更多

611
00:21:16,076 --> 0:21:17,806
如果你需要一个固定的尺寸

612
00:21:18,136 --> 0:21:19,256
设置磅值大小

613
00:21:19,256 --> 0:21:21,616
但是让标志对标志配置

614
00:21:21,776 --> 0:21:23,606
作出反应

615
00:21:23,606 --> 0:21:25,336
因为即便是大的

616
00:21:25,336 --> 0:21:26,616
标志配置或小型的

617
00:21:26,616 --> 0:21:27,756
配置都可能对

618
00:21:27,756 --> 0:21:29,446
相同标志的尺寸

619
00:21:29,446 --> 0:21:30,096
带来巨大的改变

620
00:21:30,726 --> 0:21:35,456
现在 这里有很多配置

621
00:21:35,516 --> 0:21:38,426
我们设定了

622
00:21:38,426 --> 0:21:39,916
这些标志 -- 

623
00:21:39,916 --> 0:21:41,106
Paolo 之前提到了

624
00:21:41,176 --> 0:21:42,646
这些标志可以

625
00:21:42,646 --> 0:21:44,406
与 San Francisco 即我们的系统字体 

626
00:21:44,436 --> 0:21:46,286
兼容 不过它们可以与任何字体兼容

627
00:21:46,486 --> 0:21:48,646
所以你可以使用这个 API

628
00:21:49,826 --> 0:21:51,406
SymbolConfiguration(font

629
00:21:51,406 --> 0:21:52,526
来创造一个可以

630
00:21:52,586 --> 0:21:53,806
与你提供的字体相匹配

631
00:21:54,606 --> 0:21:56,056
并与系统字体兼容的配置

632
00:21:56,526 --> 0:21:58,396
它可以使用动态类型

633
00:21:58,396 --> 0:21:59,626
字体 也可以使用

634
00:21:59,626 --> 0:22:00,346
自定义字体

635
00:21:59,626 --> 0:22:00,346
自定义字体

636
00:22:00,686 --> 0:22:02,616
尤其是对于自定义字体来说

637
00:22:02,996 --> 0:22:04,046
它会创造一个

638
00:22:04,046 --> 0:22:06,716
比你通过手动复制

639
00:22:06,716 --> 0:22:07,896
字体的数值

640
00:22:07,896 --> 0:22:09,346
到你的配置中

641
00:22:09,346 --> 0:22:10,716
要更保真的配置

642
00:22:11,446 --> 0:22:12,756
所以最好使用

643
00:22:13,176 --> 0:22:13,926
自定义字体

644
00:22:14,326 --> 0:22:16,416
当你已经有了一个文本

645
00:22:16,416 --> 0:22:19,266
或者一个配置好字体的标签

646
00:22:19,356 --> 0:22:20,246
那就很容易

647
00:22:20,246 --> 0:22:22,726
创造一个与字体相配的配置

648
00:22:26,766 --> 0:22:27,656
关于配置的最后一件事

649
00:22:27,696 --> 0:22:29,896
就是它们是不变的

650
00:22:29,896 --> 0:22:30,826
你不能改变它们

651
00:22:30,876 --> 0:22:32,266
如果你想要改变它们

652
00:22:32,266 --> 0:22:32,406
怎么办呢

653
00:22:32,796 --> 0:22:33,826
那你就得把它们结合起来

654
00:22:34,576 --> 0:22:35,346
有一个方法叫

655
00:22:35,396 --> 0:22:37,396
应用 它可以把

656
00:22:37,446 --> 0:22:38,866
指定的配置应用至

657
00:22:38,866 --> 0:22:40,656
你调用的配置上

658
00:22:40,656 --> 0:22:42,746
我们会采用这个

659
00:22:43,386 --> 0:22:44,416
你请求的配置

660
00:22:44,416 --> 0:22:46,896
然后把所有特定的数值

661
00:22:46,896 --> 0:22:47,986
运用到其他配置中

662
00:22:47,986 --> 0:22:50,506
然后覆盖 或者在基本配置中

663
00:22:50,506 --> 0:22:51,236
设定它们

664
00:22:51,236 --> 0:22:52,396
你会得到一个

665
00:22:52,396 --> 0:22:54,066
可以在其他地方使用的新的配置

666
00:22:54,486 --> 0:22:56,166
但是它们是不可改变的

667
00:22:56,196 --> 0:22:57,976
配置本身也不变

668
00:23:00,096 --> 0:23:01,526
接下来让我们谈谈布局

669
00:23:03,166 --> 0:23:04,756
在我们的 App 中有一个

670
00:23:04,756 --> 0:23:06,676
简单的评论部分

671
00:23:06,676 --> 0:23:08,476
我们想要在下一个版本中

672
00:23:08,696 --> 0:23:11,406
扩展这个部分

673
00:23:11,406 --> 0:23:12,236
同时也开始用标志

674
00:23:12,426 --> 0:23:13,446
我们在这里有头像的

675
00:23:13,446 --> 0:23:14,266
占位符

676
00:23:14,266 --> 0:23:15,676
我现在要把注意力集中在

677
00:23:15,676 --> 0:23:18,086
一行上 Paolo 建议

678
00:23:18,206 --> 0:23:19,606
换成一个新的标志

679
00:23:19,606 --> 0:23:20,386
那么让我们试试看

680
00:23:21,636 --> 0:23:25,696
这看起来好多了

681
00:23:25,876 --> 0:23:27,396
一般来说 如果你想把图片

682
00:23:27,396 --> 0:23:28,746
与文本对齐

683
00:23:28,746 --> 0:23:30,166
你可以使用居中对齐

684
00:23:30,856 --> 0:23:32,716
垂直居中对齐

685
00:23:32,796 --> 0:23:34,036
在大部分情况下

686
00:23:34,036 --> 0:23:35,696
它都会变成你预期的样子

687
00:23:35,696 --> 0:23:36,566
这是最简单不过的了

688
00:23:36,656 --> 0:23:37,696
标志其实

689
00:23:37,696 --> 0:23:39,176
也是如此

690
00:23:39,446 --> 0:23:40,826
你还是可以使用

691
00:23:40,896 --> 0:23:42,026
垂直居中对齐

692
00:23:42,026 --> 0:23:42,816
这实际上是首选的

693
00:23:44,756 --> 0:23:46,466
UIKit 其实也把

694
00:23:46,466 --> 0:23:48,376
排版信息运用到

695
00:23:48,436 --> 0:23:50,546
标志中同时使用它让

696
00:23:50,546 --> 0:23:52,606
标志和文本在

697
00:23:52,806 --> 0:23:53,746
视觉上对齐

698
00:23:53,746 --> 0:23:55,706
有时候两个元素的

699
00:23:55,706 --> 0:24:00,096
框架可能并不会相匹配

700
00:23:55,706 --> 0:24:00,096
框架可能并不会相匹配

701
00:24:00,096 --> 0:24:01,786
所以这个居中是视觉上的

702
00:24:01,786 --> 0:24:05,066
而不是绝对的 但是你

703
00:24:05,066 --> 0:24:05,656
不需要做任何事

704
00:24:05,816 --> 0:24:07,476
系统会帮助你

705
00:24:09,536 --> 0:24:11,156
当然了 标签

706
00:24:11,156 --> 0:24:13,436
可能有时候会不止一行

707
00:24:13,436 --> 0:24:15,516
这时候垂直居中

708
00:24:15,516 --> 0:24:16,496
也能起到很好的作用

709
00:24:17,306 --> 0:24:18,416
标志也是一样

710
00:24:18,416 --> 0:24:19,326
我们还是会使用排版信息

711
00:24:19,326 --> 0:24:20,836
来适当地对齐

712
00:24:20,836 --> 0:24:22,746
标签的中间

713
00:24:23,446 --> 0:24:24,996
对于公开指示器

714
00:24:24,996 --> 0:24:26,206
来说也很好

715
00:24:27,346 --> 0:24:29,236
我们重新来看看这个画面

716
00:24:29,936 --> 0:24:31,256
指示器就在

717
00:24:31,256 --> 0:24:32,366
我所希望的地方

718
00:24:32,366 --> 0:24:35,196
但我其实想要

719
00:24:35,196 --> 0:24:37,226
头像占位符靠近我的第一行

720
00:24:37,316 --> 0:24:39,806
所以我们来移动一下

721
00:24:39,806 --> 0:24:42,076
在这个情况下 你可以使用

722
00:24:42,166 --> 0:24:44,106
基线对齐 到现在为止

723
00:24:44,106 --> 0:24:45,686
这可能有点

724
00:24:45,686 --> 0:24:46,386
难以实现

725
00:24:46,756 --> 0:24:48,046
你也可以选择边缘对齐

726
00:24:48,046 --> 0:24:48,956
因为你知道文本和标签

727
00:24:48,956 --> 0:24:50,686
会出现在那里

728
00:24:50,686 --> 0:24:52,146
或者你也可以选择基线对齐

729
00:24:52,146 --> 0:24:53,716
不过你必须算一算它的偏移

730
00:24:53,716 --> 0:24:54,336
所以这也很奇怪

731
00:24:54,676 --> 0:24:55,746
在这种情况下 针对标志

732
00:24:55,746 --> 0:24:58,016
我们只需要基线对齐

733
00:24:58,016 --> 0:24:58,976
就可以了

734
00:25:02,066 --> 0:25:02,426
谢谢

735
00:25:03,516 --> 0:25:07,956
[掌声]

736
00:25:08,456 --> 0:25:09,576
实际上你可以检测

737
00:25:09,576 --> 0:25:11,926
基线 因为我们

738
00:25:12,156 --> 0:25:14,716
在 UI Image 中引用了一个

739
00:25:14,716 --> 0:25:15,396
名为 baselineOffsetFromBottom 的

740
00:25:15,986 --> 0:25:17,566
新性能 它会展示

741
00:25:17,566 --> 0:25:19,686
正如它所说的

742
00:25:19,686 --> 0:25:21,526
从图像底部到基线的

743
00:25:21,526 --> 0:25:22,706
偏移量数

744
00:25:23,416 --> 0:25:25,186
这是一个可选的 CG 浮动

745
00:25:25,706 --> 0:25:27,236
为什么呢 因为不是所有的图像

746
00:25:27,296 --> 0:25:27,906
都有基线

747
00:25:28,046 --> 0:25:29,116
标志在默认情况下有基线

748
00:25:29,166 --> 0:25:32,326
但是其他的图像并没有

749
00:25:32,906 --> 0:25:34,356
所以你需要检查

750
00:25:34,386 --> 0:25:36,356
图像是否拥有基线

751
00:25:36,356 --> 0:25:37,406
来看你能不能使用它

752
00:25:38,666 --> 0:25:39,486
在 Objective-C 中

753
00:25:39,486 --> 0:25:40,336
针对这个有另外的方法

754
00:25:40,706 --> 0:25:42,206
因为它们并不是可选的

755
00:25:44,826 --> 0:25:46,456
这些基线可能

756
00:25:46,576 --> 0:25:47,846
有意想不到的值

757
00:25:47,846 --> 0:25:49,576
在这种情况下 我们有两个

758
00:25:49,576 --> 0:25:49,966
标志图像

759
00:25:50,536 --> 0:25:51,646
它们与文本相邻

760
00:25:51,886 --> 0:25:53,056
它们大小相同

761
00:25:53,056 --> 0:25:54,286
拥有相同的基线

762
00:25:54,426 --> 0:25:56,136
但如果我们展示出

763
00:25:56,136 --> 0:25:57,476
它们的范围

764
00:25:57,476 --> 0:25:58,836
我们会看到这个 v 形图案

765
00:25:58,836 --> 0:26:01,556
比基线要高很多 而云朵则

766
00:25:58,836 --> 0:26:01,556
比基线要高很多 而云朵则

767
00:26:01,556 --> 0:26:02,426
正坐在基线上

768
00:26:03,316 --> 0:26:05,276
如果我们看一眼它们的数值

769
00:26:05,276 --> 0:26:07,226
就会发现与底部的

770
00:26:07,226 --> 0:26:08,456
偏移量意味着

771
00:26:08,456 --> 0:26:10,046
向上是正数偏移量

772
00:26:10,046 --> 0:26:11,726
向下则是

773
00:26:11,726 --> 0:26:13,266
负数偏移量

774
00:26:14,326 --> 0:26:16,726
这也意味着

775
00:26:16,726 --> 0:26:18,046
它对于一个

776
00:26:18,046 --> 0:26:19,516
基线在其范围外的图像是有效的

777
00:26:20,056 --> 0:26:21,036
比如这个例子中的 v 型图像 

778
00:26:21,886 --> 0:26:23,516
如果你有一个

779
00:26:23,516 --> 0:26:24,636
基线数值为零 

780
00:26:24,636 --> 0:26:25,766
这并不代表你没有基线

781
00:26:25,896 --> 0:26:27,066
这代表基线

782
00:26:27,066 --> 0:26:28,266
和图像的底部

783
00:26:28,266 --> 0:26:28,686
是持平的

784
00:26:29,236 --> 0:26:30,566
这听起来很让人吃惊

785
00:26:30,566 --> 0:26:30,976
但却有效

786
00:26:33,196 --> 0:26:35,646
好消息是我们也

787
00:26:35,646 --> 0:26:38,366
增加了 API 可以为图像

788
00:26:38,366 --> 0:26:38,876
增加基线

789
00:26:39,386 --> 0:26:41,076
你可以使用

790
00:26:41,116 --> 0:26:42,716
withBaselineOffsetFromBottom

791
00:26:42,716 --> 0:26:43,936
然后你就可以得到一个

792
00:26:44,006 --> 0:26:45,446
你请求的

793
00:26:45,446 --> 0:26:46,886
有基线配置的新的图像

794
00:26:47,146 --> 0:26:48,516
再次 这是屏幕中的

795
00:26:48,516 --> 0:26:51,116
离图像底部的偏移量

796
00:26:52,006 --> 0:26:53,196
好消息就是

797
00:26:53,196 --> 0:26:54,966
图像会和标志一样表现

798
00:26:54,966 --> 0:26:56,036
这不是一个标志

799
00:26:56,036 --> 0:26:58,096
但却会表现得像一个标志

800
00:26:58,096 --> 0:26:59,496
因为它拥有一些

801
00:26:59,496 --> 0:27:00,136
排版信息

802
00:26:59,496 --> 0:27:00,136
排版信息

803
00:27:00,726 --> 0:27:02,156
所以你可以为标志图像

804
00:27:02,156 --> 0:27:05,146
使用和普通图像一样的布局

805
00:27:05,506 --> 0:27:06,796
你不需要检查

806
00:27:06,796 --> 0:27:07,876
这个图像是否有基线

807
00:27:07,876 --> 0:27:09,926
然后我使用这个布局

808
00:27:09,926 --> 0:27:11,456
或者另外一个

809
00:27:11,456 --> 0:27:12,496
这一切都更简单了

810
00:27:12,816 --> 0:27:15,216
看看我们的例子

811
00:27:15,216 --> 0:27:17,486
现在我们可以展示真实的头像

812
00:27:17,806 --> 0:27:20,176
有些行则没有头像

813
00:27:20,236 --> 0:27:21,046
这看起来好多了

814
00:27:21,046 --> 0:27:22,836
我只需要将

815
00:27:22,836 --> 0:27:24,486
第一行基线对齐

816
00:27:24,676 --> 0:27:26,026
这真的很简单

817
00:27:27,816 --> 0:27:29,516
我也想简单谈谈

818
00:27:29,516 --> 0:27:30,566
平行对齐问题

819
00:27:30,696 --> 0:27:32,096
你可以看到

820
00:27:32,516 --> 0:27:34,116
图像在相同的纵列中

821
00:27:34,116 --> 0:27:36,696
是平行对齐的

822
00:27:36,696 --> 0:27:38,246
你可以通过指定一个

823
00:27:38,246 --> 0:27:40,146
你想对齐的偏移量

824
00:27:40,196 --> 0:27:41,386
然后把图像放在偏移量中间

825
00:27:41,386 --> 0:27:41,696
来实现这一点

826
00:27:41,696 --> 0:27:42,786
这很简单

827
00:27:43,106 --> 0:27:44,736
然后你可以从偏移量到

828
00:27:44,736 --> 0:27:46,766
文本 或者从

829
00:27:46,766 --> 0:27:47,496
边缘到文本

830
00:27:47,496 --> 0:27:49,896
你实际上应该

831
00:27:49,896 --> 0:27:51,796
居中对齐 甚至平行对齐图像

832
00:27:51,796 --> 0:27:53,986
而不是应用

833
00:27:53,986 --> 0:27:56,026
前置或后续的限制

834
00:27:59,976 --> 0:28:02,416
现在让我们回头看看我们的规范

835
00:27:59,976 --> 0:28:02,416
现在让我们回头看看我们的规范

836
00:28:02,416 --> 0:28:04,356
在这里我想说的是

837
00:28:04,356 --> 0:28:06,076
在默认条件下

838
00:28:06,076 --> 0:28:07,366
初始情况选择中心对齐

839
00:28:07,366 --> 0:28:09,126
不论是平行还是垂直

840
00:28:09,126 --> 0:28:09,576
都是个好主意

841
00:28:10,216 --> 0:28:11,356
在大部分情况中

842
00:28:11,356 --> 0:28:12,726
这就是你想要的

843
00:28:12,726 --> 0:28:13,506
系统也会为你处理一切事情

844
00:28:13,506 --> 0:28:14,676
如果可行的话

845
00:28:14,676 --> 0:28:16,486
它会使用排版信息

846
00:28:16,656 --> 0:28:18,166
不然它就会使用

847
00:28:18,166 --> 0:28:19,526
旧式的对齐方式

848
00:28:19,726 --> 0:28:22,816
在这种情况下

849
00:28:22,816 --> 0:28:24,966
Paolo 指定了基线对齐

850
00:28:24,966 --> 0:28:26,256
因为第二行 -- 

851
00:28:26,256 --> 0:28:27,526
第二个项目有两行

852
00:28:27,576 --> 0:28:28,396
所以我们需要

853
00:28:28,396 --> 0:28:28,966
使用基线

854
00:28:29,516 --> 0:28:30,736
然后我们可以回到

855
00:28:30,736 --> 0:28:32,116
基线对齐 但是

856
00:28:32,116 --> 0:28:33,036
这也非常简单

857
00:28:33,556 --> 0:28:35,876
这个规范也恰当地

858
00:28:35,876 --> 0:28:38,726
指定了图像的

859
00:28:38,766 --> 0:28:39,506
平行对齐

860
00:28:40,646 --> 0:28:42,176
这使得规范

861
00:28:42,176 --> 0:28:43,206
易于阅读

862
00:28:44,576 --> 0:28:46,826
现在让我们来看一下按钮

863
00:28:47,836 --> 0:28:48,686
按钮 --- 在 UIKit 中

864
00:28:48,686 --> 0:28:49,436
有很多按钮

865
00:28:50,566 --> 0:28:51,776
我们有两种类型的按钮

866
00:28:52,156 --> 0:28:53,786
系统按钮和

867
00:28:53,786 --> 0:28:54,066
常规按钮

868
00:28:54,066 --> 0:28:55,526
让我们先从系统按钮开始

869
00:28:58,186 --> 0:28:59,466
首先 UIKit 里的所有

870
00:28:59,466 --> 0:29:01,736
按钮都有一个预设的

871
00:28:59,466 --> 0:29:01,736
按钮都有一个预设的

872
00:29:01,736 --> 0:29:04,006
标志配置 对于系统按钮来说

873
00:29:04,006 --> 0:29:05,736
它的主体是大号的

874
00:29:06,066 --> 0:29:07,836
这意味着它会

875
00:29:07,836 --> 0:29:09,326
根据动态类型的变化进行反应

876
00:29:09,326 --> 0:29:11,136
有着正文文本风格 和大的尺寸

877
00:29:11,136 --> 0:29:13,886
你们不觉得如果你不仅可以创造

878
00:29:13,886 --> 0:29:15,376
在 Wi-Fi 网络列表的

879
00:29:16,106 --> 0:29:17,556
信息按钮

880
00:29:17,556 --> 0:29:19,086
还可以使用你自己的标志图像

881
00:29:19,766 --> 0:29:21,086
创建和长相它一样的

882
00:29:21,086 --> 0:29:22,366
属于你自己的系统按钮

883
00:29:22,366 --> 0:29:23,426
是一件非常好的

884
00:29:23,426 --> 0:29:23,706
事情吗

885
00:29:23,706 --> 0:29:25,056
我们认为这是一个很好的主意

886
00:29:25,056 --> 0:29:26,736
我们增加了一些

887
00:29:26,736 --> 0:29:28,706
在 UIButton 的初始化程序

888
00:29:28,706 --> 0:29:29,856
让你可以创建一个

889
00:29:29,856 --> 0:29:31,586
拥有标志图像的系统按钮

890
00:29:31,826 --> 0:29:35,606
它会表现得像一个 --

891
00:29:35,676 --> 0:29:36,676
像一个常规的标志图像

892
00:29:37,516 --> 0:29:41,466
[掌声]

893
00:29:41,966 --> 0:29:43,676
现在 让我们来看看

894
00:29:43,676 --> 0:29:44,106
常规按钮

895
00:29:44,256 --> 0:29:45,956
在这个例子中 我有个弹出式窗口

896
00:29:45,956 --> 0:29:49,796
它们在这个视图中

897
00:29:49,796 --> 0:29:50,596
作为行动使用

898
00:29:50,906 --> 0:29:53,216
这些标志在这真的大放异彩

899
00:29:53,216 --> 0:29:54,616
他们都在恰当的位置

900
00:29:55,886 --> 0:29:57,296
一个常规的按钮

901
00:29:57,296 --> 0:29:59,476
一般会有一个中等大小的预设

902
00:30:00,796 --> 0:30:02,586
现在我们已经说过 --

903
00:30:02,586 --> 0:30:03,996
关于这些预设大小的事情

904
00:30:03,996 --> 0:30:05,026
如果你想改变它们怎么办呢

905
00:30:05,026 --> 0:30:06,636
在 UIButton 上

906
00:30:06,636 --> 0:30:08,716
有和在 UIImageView 上相似的 API

907
00:30:08,716 --> 0:30:08,926
它的名字是

908
00:30:09,016 --> 0:30:11,546
PreferredSymbolConfiguration forState

909
00:30:12,176 --> 0:30:13,596
它和 UIButton

910
00:30:13,596 --> 0:30:14,986
上的其他内容访问器

911
00:30:14,986 --> 0:30:15,516
工作原理一样

912
00:30:15,516 --> 0:30:17,176
你可以为配置设定为

913
00:30:17,176 --> 0:30:18,016
某些状态

914
00:30:18,436 --> 0:30:19,586
它会给你最大化的弹性

915
00:30:19,586 --> 0:30:21,536
因为你可以设置

916
00:30:21,536 --> 0:30:22,366
一个图像 你可以设置

917
00:30:22,366 --> 0:30:23,526
一个配置 或两者都设置

918
00:30:23,526 --> 0:30:25,376
它也会运行得很好

919
00:30:26,466 --> 0:30:28,146
另一个按钮的例子就是这个

920
00:30:28,676 --> 0:30:30,636
它某种程度上展现了

921
00:30:30,636 --> 0:30:32,696
我们所认为的

922
00:30:32,696 --> 0:30:34,266
标志与文本完美融合

923
00:30:34,266 --> 0:30:35,876
这并不意味着它们经常紧挨着

924
00:30:36,046 --> 0:30:37,546
这两个按钮应该在一起

925
00:30:37,546 --> 0:30:39,406
它们的配置

926
00:30:39,406 --> 0:30:41,756
是相同的 不论是左边的按钮

927
00:30:41,756 --> 0:30:42,896
还是右边的按钮

928
00:30:43,406 --> 0:30:44,206
优先加载的标志配置

929
00:30:44,206 --> 0:30:45,816
与右边按钮的字体

930
00:30:45,816 --> 0:30:47,296
是相配的

931
00:30:47,296 --> 0:30:48,416
两者唯一的区别是

932
00:30:48,416 --> 0:30:50,416
左边的按钮有一个标志

933
00:30:50,416 --> 0:30:52,196
右边的按钮

934
00:30:52,196 --> 0:30:52,816
有一个文本

935
00:30:53,776 --> 0:30:54,866
你可以看到它们的

936
00:30:54,866 --> 0:30:57,496
基线是一样的

937
00:30:57,496 --> 0:30:58,686
因为它们的配置是完全相同的

938
00:30:58,686 --> 0:31:00,246
它们也有相同的

939
00:30:58,686 --> 0:31:00,246
它们也有相同的

940
00:31:00,246 --> 0:31:01,486
度量标准

941
00:31:01,546 --> 0:31:02,556
这让布局更加简单

942
00:31:06,116 --> 0:31:07,396
为了完成我们的

943
00:31:07,396 --> 0:31:08,716
按钮工作 -- 我提到过

944
00:31:08,716 --> 0:31:09,696
在 UIKit 上有很多按钮

945
00:31:10,046 --> 0:31:11,576
我们可以看看状态栏按钮

946
00:31:12,386 --> 0:31:14,616
我们更新了

947
00:31:14,616 --> 0:31:16,046
UIKit 中的原图以使用标志

948
00:31:16,046 --> 0:31:17,486
它不仅可以运用在

949
00:31:17,486 --> 0:31:20,136
状态栏按钮中 还可以运用在任何地方

950
00:31:20,346 --> 0:31:22,176
状态栏按钮与这些新的原图

951
00:31:22,176 --> 0:31:22,866
完美契合

952
00:31:23,226 --> 0:31:25,906
现在 如果你要退回到

953
00:31:26,506 --> 0:31:27,886
之前的系统

954
00:31:27,886 --> 0:31:28,866
你需要记住

955
00:31:28,866 --> 0:31:30,756
如果你在旧系统中

956
00:31:30,756 --> 0:31:32,186
创建了自定义原图

957
00:31:32,186 --> 0:31:34,626
与新的更新的原图相比

958
00:31:34,906 --> 0:31:36,226
你会得到之前的更细的原图

959
00:31:36,226 --> 0:31:37,586
所以请记住

960
00:31:37,586 --> 0:31:40,176
如果你为旧的版本

961
00:31:40,296 --> 0:31:40,986
创建了素材

962
00:31:42,616 --> 0:31:45,806
你可以使用带图像的

963
00:31:46,356 --> 0:31:47,316
状态栏按钮的标志

964
00:31:47,426 --> 0:31:48,866
针对此我们有现成的 API

965
00:31:49,306 --> 0:31:51,046
你只需要放一个标志

966
00:31:51,046 --> 0:31:51,256
在那就行

967
00:31:51,256 --> 0:31:52,556
它将与系统按钮

968
00:31:52,596 --> 0:31:53,926
完美契合

969
00:31:54,046 --> 0:31:55,176
你不需要做任何事

970
00:31:56,086 --> 0:31:59,776
这就是所有你需要做的事情

971
00:31:59,776 --> 0:32:01,156
再一次 像常规按钮一样

972
00:31:59,776 --> 0:32:01,156
再一次 像常规按钮一样

973
00:32:01,156 --> 0:32:03,036
状态栏按钮也有

974
00:32:03,076 --> 0:32:03,806
预设好的配置

975
00:32:04,446 --> 0:32:05,996
在任何不压缩的尺寸类中

976
00:32:05,996 --> 0:32:07,786
比如你手机中的

977
00:32:07,786 --> 0:32:10,276
人像模式 

978
00:32:10,276 --> 0:32:11,026
配置都会很大

979
00:32:11,736 --> 0:32:15,096
如果你旋转你的手机

980
00:32:15,096 --> 0:32:16,576
最后到了一个压缩尺寸类

981
00:32:16,636 --> 0:32:17,656
我们会把按钮上的配置

982
00:32:17,656 --> 0:32:19,766
改成中等

983
00:32:20,236 --> 0:32:21,456
这会将标志调用得

984
00:32:21,816 --> 0:32:23,836
更小 也可以

985
00:32:23,836 --> 0:32:25,256
完美地契合更压缩的

986
00:32:25,296 --> 0:32:25,696
状态栏

987
00:32:26,506 --> 0:32:27,696
这也意味着

988
00:32:27,696 --> 0:32:29,016
你不再需要提供一个

989
00:32:29,016 --> 0:32:30,856
二级图片

990
00:32:30,856 --> 0:32:31,736
因为系统会帮你完成一切工作

991
00:32:31,736 --> 0:32:34,076
它会缩放来使用

992
00:32:34,116 --> 0:32:34,736
内置的标志缩放比例

993
00:32:35,516 --> 0:32:39,596
[掌声]

994
00:32:40,096 --> 0:32:41,906
在 iPad 上 我们 -- 

995
00:32:41,906 --> 0:32:43,766
因为我之前提到过的事情

996
00:32:43,766 --> 0:32:45,046
我们经常会有一个大尺寸的

997
00:32:45,626 --> 0:32:49,376
现在关于标志的另一个东西

998
00:32:49,546 --> 0:32:51,086
就是渲染模式

999
00:32:51,816 --> 0:32:53,156
任何常规图像

1000
00:32:54,186 --> 0:32:56,356
都有比如颜色数据的导入

1001
00:32:56,356 --> 0:32:57,586
但是对于标志来说 这是不一样的

1002
00:32:57,586 --> 0:32:58,766
它有一个固有的模式

1003
00:32:59,236 --> 0:33:00,326
它没有一个固有的颜色

1004
00:32:59,236 --> 0:33:00,326
它没有一个固有的颜色

1005
00:33:00,326 --> 0:33:02,096
我们使用 tintColor

1006
00:33:02,096 --> 0:33:06,146
来渲染标志

1007
00:33:06,146 --> 0:33:07,206
如果我们没有 tintColor

1008
00:33:07,206 --> 0:33:07,716
那就使用黑色

1009
00:33:08,026 --> 0:33:09,056
但是不要依赖于黑色

1010
00:33:09,056 --> 0:33:10,416
因为它不想 -- 

1011
00:33:10,496 --> 0:33:12,646
与深色模式融合得很好

1012
00:33:12,706 --> 0:33:14,136
它可能有改变的倾向

1013
00:33:14,666 --> 0:33:16,896
它如何运行呢

1014
00:33:17,696 --> 0:33:20,186
任何图像的渲染模式

1015
00:33:20,186 --> 0:33:22,656
都是自动的 到现在为止

1016
00:33:22,856 --> 0:33:23,866
对任何图像来说

1017
00:33:24,046 --> 0:33:25,486
它们都经常偏向

1018
00:33:25,486 --> 0:33:25,946
始终绘制原始状态

1019
00:33:26,526 --> 0:33:30,826
现在 对标志来说

1020
00:33:30,826 --> 0:33:31,216
情况不同了

1021
00:33:31,726 --> 0:33:33,346
非标志图像

1022
00:33:33,346 --> 0:33:35,176
还是倾向始终绘制原始状态

1023
00:33:35,176 --> 0:33:36,986
标志图像则会偏向

1024
00:33:36,986 --> 0:33:37,746
始终根据 tintColor 绘制图像

1025
00:33:37,906 --> 0:33:39,166
这意味着我们会

1026
00:33:39,166 --> 0:33:40,976
使用 tintColor 来为他们上色

1027
00:33:41,016 --> 0:33:43,356
事情就是如此

1028
00:33:43,936 --> 0:33:44,856
你可以通过现有的 API

1029
00:33:44,856 --> 0:33:46,816
来改变一个图片的

1030
00:33:46,816 --> 0:33:47,686
渲染模式

1031
00:33:48,756 --> 0:33:50,206
我们已经讲到了

1032
00:33:50,206 --> 0:33:52,086
基本的 UIKit 控制

1033
00:33:52,086 --> 0:33:53,716
但有时候你可能会想

1034
00:33:53,716 --> 0:33:54,596
在一个图形环境中绘制图像

1035
00:33:55,136 --> 0:33:56,476
这个时候你可能会用到

1036
00:33:56,766 --> 0:33:57,316
draw(in Rect

1037
00:33:58,716 --> 0:34:00,446
那么 对于标志来说

1038
00:33:58,716 --> 0:34:00,446
那么 对于标志来说

1039
00:34:00,446 --> 0:34:01,696
正如我之前提到的

1040
00:34:01,696 --> 0:34:02,706
这可能不是一个好主意

1041
00:34:02,706 --> 0:34:03,666
因为它们想要保留

1042
00:34:03,666 --> 0:34:04,406
原始的尺寸

1043
00:34:04,486 --> 0:34:05,866
所以这里最好使用 draw(at

1044
00:34:06,356 --> 0:34:08,045
让图像决定

1045
00:34:08,045 --> 0:34:09,005
它想要多大的尺寸

1046
00:34:10,186 --> 0:34:11,016
但是我们有一个问题

1047
00:34:11,016 --> 0:34:12,335
我们有一张这样的图片

1048
00:34:12,335 --> 0:34:12,726
但是它太小了

1049
00:34:13,775 --> 0:34:15,516
在默认状态下 图片有一个

1050
00:34:15,556 --> 0:34:16,946
未指定的配置

1051
00:34:16,946 --> 0:34:18,896
我们没有指定任何东西

1052
00:34:18,896 --> 0:34:20,166
如果我们只是 -- 如果你们必须

1053
00:34:20,166 --> 0:34:21,696
渲染 而我们没有找到

1054
00:34:21,696 --> 0:34:23,496
一个特定的数值

1055
00:34:23,496 --> 0:34:24,636
我们会回到系统初始状态

1056
00:34:24,766 --> 0:34:26,356
在这种情况下

1057
00:34:26,436 --> 0:34:27,726
它最终会是一个非常小的图片

1058
00:34:28,306 --> 0:34:31,646
现在我可以创建

1059
00:34:31,646 --> 0:34:32,956
一个配置让它变得更大

1060
00:34:33,505 --> 0:34:36,266
- 34 磅 粗体

1061
00:34:36,505 --> 0:34:37,786
然后使用新的 API

1062
00:34:38,416 --> 0:34:40,326
withConfiguration 将

1063
00:34:40,386 --> 0:34:41,755
配置运用在图片上

1064
00:34:42,416 --> 0:34:43,746
然后我们可以获得一个

1065
00:34:43,746 --> 0:34:44,916
嵌入该配置的新图片

1066
00:34:45,565 --> 0:34:46,996
我们创造出了这个

1067
00:34:47,156 --> 0:34:48,906
更大更粗的茶杯

1068
00:34:48,906 --> 0:34:49,976
这就是我想要的

1069
00:34:54,476 --> 0:34:56,436
再回到我们的弹出式窗口

1070
00:34:57,005 --> 0:34:59,856
Paolo 也让我们

1071
00:35:00,296 --> 0:35:01,676
改变那里的文本

1072
00:35:02,036 --> 0:35:02,896
因为标志在文本中很契合

1073
00:35:03,586 --> 0:35:05,636
我们可以用一些词语来替换

1074
00:35:05,756 --> 0:35:06,216
标志吗

1075
00:35:07,056 --> 0:35:10,036
答案是肯定的

1076
00:35:10,036 --> 0:35:11,926
标志本质上是排好版的

1077
00:35:11,926 --> 0:35:12,756
但它们仍然是图片

1078
00:35:12,806 --> 0:35:14,236
所以我们需要使用

1079
00:35:14,236 --> 0:35:16,756
拥有 NSTextAttachment 的属性字符串

1080
00:35:18,196 --> 0:35:19,206
现在 这个代码看起来

1081
00:35:19,206 --> 0:35:20,856
有点熟悉了 但是我们

1082
00:35:20,996 --> 0:35:22,506
有一个新的 API

1083
00:35:22,506 --> 0:35:24,426
那就是 NSTextAttachment(image

1084
00:35:24,426 --> 0:35:25,956
它会通过附加的图片

1085
00:35:25,956 --> 0:35:27,136
创造一个文本附件

1086
00:35:28,306 --> 0:35:31,036
现在这个文本附件

1087
00:35:31,036 --> 0:35:32,416
比常规的要更加智能

1088
00:35:32,996 --> 0:35:35,656
它了解标志

1089
00:35:35,656 --> 0:35:37,316
也会检查标志周围的字符串

1090
00:35:37,316 --> 0:35:40,116
来尽力完成

1091
00:35:40,116 --> 0:35:43,286
标志的配置

1092
00:35:43,286 --> 0:35:44,566
它会查看字体大小

1093
00:35:44,566 --> 0:35:45,696
粗细程度

1094
00:35:45,696 --> 0:35:46,626
但是同时还有颜色

1095
00:35:46,656 --> 0:35:48,546
然后一个完整的图片就

1096
00:35:48,546 --> 0:35:49,446
绘制完成了

1097
00:35:53,516 --> 0:35:57,176
[掌声]

1098
00:35:57,676 --> 0:36:00,036
旧的 API 或者现有的 API

1099
00:35:57,676 --> 0:36:00,036
旧的 API 或者现有的 API

1100
00:36:00,426 --> 0:36:01,646
创建文本附件

1101
00:36:01,646 --> 0:36:02,606
然后指派的图片

1102
00:36:02,606 --> 0:36:03,576
还是可以运行

1103
00:36:03,576 --> 0:36:04,326
但是不会获得相匹配的行为

1104
00:36:04,886 --> 0:36:06,326
当然了 你也可以

1105
00:36:06,326 --> 0:36:07,636
使用拥有常规图形的

1106
00:36:07,636 --> 0:36:08,016
新的 API

1107
00:36:09,396 --> 0:36:11,526
Paolo 在这里还想要一些颜色

1108
00:36:12,666 --> 0:36:13,816
看起来更好了

1109
00:36:16,176 --> 0:36:18,926
是的 我们又创造了一些新的

1110
00:36:18,926 --> 0:36:19,526
API 去实现它

1111
00:36:20,686 --> 0:36:22,216
你现在可以给一张图片着色了

1112
00:36:22,836 --> 0:36:25,246
所以 withTintColor 给图片

1113
00:36:25,246 --> 0:36:26,906
应用一种颜色 它使用起来

1114
00:36:26,906 --> 0:36:27,846
非常高效

1115
00:36:28,116 --> 0:36:30,066
它只有在需要的时候

1116
00:36:30,126 --> 0:36:31,526
才渲染颜色 然后它

1117
00:36:31,526 --> 0:36:32,696
会寻找最有效的方法

1118
00:36:32,696 --> 0:36:33,526
来做到这点

1119
00:36:34,386 --> 0:36:35,386
在此之前 你可能

1120
00:36:35,386 --> 0:36:37,066
必须对图像进行栅格化 并且

1121
00:36:37,066 --> 0:36:38,446
并将它渲染到图形上下文中

1122
00:36:38,446 --> 0:36:39,436
然后再应用颜色

1123
00:36:39,766 --> 0:36:40,436
你再也不需要

1124
00:36:40,436 --> 0:36:40,796
这么做了

1125
00:36:41,296 --> 0:36:43,276
这样就搞定了

1126
00:36:44,516 --> 0:36:48,546
[掌声]

1127
00:36:49,046 --> 0:36:50,376
这对于标志来说

1128
00:36:50,376 --> 0:36:51,496
格外重要 因为它们没有

1129
00:36:51,496 --> 0:36:52,766
一个固定的颜色 

1130
00:36:52,766 --> 0:36:53,706
这就给了它们一个颜色

1131
00:36:54,196 --> 0:36:55,496
现在 标志也有了

1132
00:36:55,496 --> 0:36:56,376
不同的渲染模式

1133
00:36:56,376 --> 0:36:57,666
所以如果你真的想要让那种颜色

1134
00:36:57,726 --> 0:36:59,726
弹出 你必须改变

1135
00:36:59,726 --> 0:37:00,656
渲染模式 你可以

1136
00:36:59,726 --> 0:37:00,656
渲染模式 你可以

1137
00:37:00,656 --> 0:37:01,926
使用这个可选参数

1138
00:37:01,976 --> 0:37:02,946
一次性完成

1139
00:37:03,586 --> 0:37:07,556
现在 这两个 API 还没有包含在

1140
00:37:07,556 --> 0:37:09,096
第一个 beta 版里  但是它们

1141
00:37:09,096 --> 0:37:09,506
很快就会被包含

1142
00:37:13,226 --> 0:37:16,076
所以我们已经看过了很多 API

1143
00:37:16,786 --> 0:37:18,356
我们认为我们提供了一个

1144
00:37:18,356 --> 0:37:20,216
很棒的工具组可以让你们的 App

1145
00:37:20,506 --> 0:37:22,206
在 iOS 13 中大放异彩

1146
00:37:22,726 --> 0:37:25,076
但是 这里有几个建议

1147
00:37:25,736 --> 0:37:28,416
与边缘对齐相比

1148
00:37:28,466 --> 0:37:30,106
应更倾向于水平和垂直居中

1149
00:37:30,786 --> 0:37:31,926
它是一个思路上的转变

1150
00:37:32,176 --> 0:37:33,906
但是一旦你弄明白了

1151
00:37:33,906 --> 0:37:34,606
它就会真的奏效

1152
00:37:36,016 --> 0:37:37,476
试着从最小元素到

1153
00:37:37,476 --> 0:37:40,316
最大元素

1154
00:37:40,316 --> 0:37:41,126
构建你的布局

1155
00:37:41,126 --> 0:37:42,256
从一些小东西开始

1156
00:37:42,256 --> 0:37:43,866
然后把它们当成一块积木

1157
00:37:43,866 --> 0:37:44,786
去做成更大的东西

1158
00:37:44,826 --> 0:37:45,476
这是非常容易

1159
00:37:45,556 --> 0:37:47,946
并且灵活的

1160
00:37:48,026 --> 0:37:49,576
图像大小可以改变

1161
00:37:50,396 --> 0:37:52,516
这就允许你的图像视图

1162
00:37:52,516 --> 0:37:54,646
和他们的图像尺寸相同  但是注意

1163
00:37:54,646 --> 0:37:55,946
它们是可以更改的

1164
00:37:56,526 --> 0:37:58,686
它可能发生在运行时 或者

1165
00:37:58,686 --> 0:38:01,606
App 启动时 又甚至

1166
00:37:58,686 --> 0:38:01,606
App 启动时 又甚至

1167
00:38:01,606 --> 0:38:02,966
是系统更新时

1168
00:38:05,116 --> 0:38:06,946
缓存图像通常

1169
00:38:06,946 --> 0:38:07,156
没有什么用

1170
00:38:08,436 --> 0:38:09,816
它是 Bug 的一大来源

1171
00:38:09,816 --> 0:38:11,306
系统已经竭尽所能地

1172
00:38:11,356 --> 0:38:13,936
提供了最好的性能

1173
00:38:14,016 --> 0:38:16,186
并且缓存真的会

1174
00:38:16,186 --> 0:38:18,086
覆盖 所以没必要那样做

1175
00:38:19,756 --> 0:38:22,026
最后 栅格化

1176
00:38:22,026 --> 0:38:25,886
在大多数情况下 是最坏的解决方案

1177
00:38:25,886 --> 0:38:27,586
起码不是修复问题的

1178
00:38:27,586 --> 0:38:28,366
最佳解决方案

1179
00:38:28,426 --> 0:38:32,386
所以节省你的 CPU 资源

1180
00:38:32,386 --> 0:38:34,616
来做些有用的事情   

1181
00:38:34,616 --> 0:38:36,496
让系统栅格化图像吧

1182
00:38:36,816 --> 0:38:38,316
尽量避免栅格化

1183
00:38:38,316 --> 0:38:40,486
图像 特别是

1184
00:38:40,486 --> 0:38:40,946
标志图像

1185
00:38:43,556 --> 0:38:45,096
今天上午的

1186
00:38:45,096 --> 0:38:46,206
可访问性和本地化会议

1187
00:38:46,206 --> 0:38:49,146
非常有趣

1188
00:38:49,146 --> 0:38:51,046
因为标志使这些领域的适配

1189
00:38:51,046 --> 0:38:52,636
变得简单得多

1190
00:38:52,636 --> 0:38:55,026
明天将会推出

1191
00:38:55,026 --> 0:38:56,376
深色模式 该模式下

1192
00:38:56,376 --> 0:38:57,576
标志会因为暗色调

1193
00:38:57,616 --> 0:39:00,576
而非常闪耀

1194
00:38:57,616 --> 0:39:00,576
而非常闪耀

1195
00:39:01,676 --> 0:39:04,886
这还有两个实验室你可能

1196
00:39:04,886 --> 0:39:05,486
会感兴趣

1197
00:39:05,486 --> 0:39:07,766
在周四有文本和 SF symbols 实验室

1198
00:39:07,766 --> 0:39:09,796
以及字体实验室

1199
00:39:10,136 --> 0:39:11,446
在周五下午

1200
00:39:11,446 --> 0:39:12,306
还有一个设计实验室

1201
00:39:12,826 --> 0:39:15,256
当然 任何 UIKit 实验室都

1202
00:39:15,256 --> 0:39:16,306
欢迎你们

1203
00:39:17,126 --> 0:39:18,266
非常感谢你的聆听

1204
00:39:18,266 --> 0:39:19,576
享受接下来的 WWDC 大会吧

1205
00:39:20,516 --> 0:39:26,500
[掌声]
