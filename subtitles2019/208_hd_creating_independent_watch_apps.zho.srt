1
00:00:06,406 --> 0:00:09,943
（如何创建独立的

2
00:00:15,749 --> 0:00:16,583
大家好

3
00:00:17,050 --> 0:00:19,887
我是Neil Desai

4
00:00:19,953 --> 0:00:22,155
今天很开心向大家介绍

5
00:00:22,222 --> 0:00:25,158
如何创建独立的Watch app

6
00:00:26,560 --> 0:00:29,930
现在 越来越多的人出门

7
00:00:29,997 --> 0:00:31,865
只带Apple Watch

8
00:00:31,932 --> 0:00:36,136
用户喜欢Apple Watch

9
00:00:36,970 --> 0:00:39,973
不管是带着Watch去运动

10
00:00:40,307 --> 0:00:43,310
出差 或者就是接一个电话

11
00:00:45,479 --> 0:00:49,449
Apple Watch都能帮你

12
00:00:49,516 --> 0:00:51,618
或者是app相连

13
00:00:52,986 --> 0:00:57,491
现在我们享受着

14
00:00:57,991 --> 0:01:00,694
用户将它们的iPhone当做备胎

15
00:00:57,991 --> 0:01:00,694
用户将它们的iPhone当做备胎

16
00:01:02,663 --> 0:01:04,364
所以我们想让

17
00:01:04,431 --> 0:01:07,901
也达到用户对

18
00:01:07,968 --> 0:01:10,838
为此 我们引入了一个全新的概念

19
00:01:10,904 --> 0:01:14,408
叫做独立Watch app

20
00:01:15,042 --> 0:01:18,412
所以现在你的iPhone app

21
00:01:18,478 --> 0:01:19,680
（独立WATCH APP）

22
00:01:20,681 --> 0:01:23,750
许多app现在或多或少

23
00:01:23,817 --> 0:01:26,587
Outcast就是一款

24
00:01:26,653 --> 0:01:30,691
我从手腕上就可以直接控制整个体验

25
00:01:31,525 --> 0:01:34,494
CARROT天气是

26
00:01:34,561 --> 0:01:38,332
我经常用它来查看天气

27
00:01:39,066 --> 0:01:44,538
我出国旅游时也经常会用

28
00:01:45,038 --> 0:01:47,875
但是 这些app

29
00:01:48,976 --> 0:01:52,346
现在既然我们说

30
00:01:52,679 --> 0:01:54,314
那么史上第一次

31
00:01:54,948 --> 0:01:59,686
你可开发为Watch

32
00:02:01,154 --> 0:02:01,989
谢谢

33
00:02:06,260 --> 0:02:08,495
为了让你的app独立起来

34
00:02:08,562 --> 0:02:10,997
我来为你们介绍

35
00:02:11,064 --> 0:02:12,032
推出的新功能

36
00:02:12,099 --> 0:02:16,436
比如直接向设备发送推送通知

37
00:02:16,703 --> 0:02:21,275
以及使登录更加容易

38
00:02:21,775 --> 0:02:23,243
但是首先我想谈谈

39
00:02:23,310 --> 0:02:25,679
到底怎么安装这些app

40
00:02:27,481 --> 0:02:29,082
现在 在Watch iOS 5中

41
00:02:29,149 --> 0:02:31,919
Watch app是

42
00:02:31,985 --> 0:02:34,388
所以我们将两种版本

43
00:02:35,489 --> 0:02:38,725
之后由iPhone来处理

44
00:02:38,792 --> 0:02:40,961
所以安装要从iPhone

45
00:02:43,197 --> 0:02:44,031
而且…

46
00:02:44,097 --> 0:02:48,435
我们在iOS 13和watchOS 6中

47
00:02:48,502 --> 0:02:51,605
所以现在App Store服务器

48
00:02:51,672 --> 0:02:55,475
无论在何时何地

49
00:02:55,542 --> 0:02:59,279
而且它将应用于商店中的所有app

50
00:03:00,614 --> 0:03:01,849
（安装）

51
00:03:01,915 --> 0:03:02,749
所以

52
00:03:03,617 --> 0:03:07,521
这意味着iOS app

53
00:03:07,588 --> 0:03:11,625
有些人可能会很高兴听到下面一点

54
00:03:11,692 --> 0:03:14,461
iOS app蜂窝下载限制了

55
00:03:15,462 --> 0:03:17,164
然后 谢谢

56
00:03:20,300 --> 0:03:24,538
我们可以通过用bitcode

57
00:03:24,605 --> 0:03:26,073
所有的app来实现这一操作

58
00:03:26,139 --> 0:03:29,743
将iOS app

59
00:03:30,644 --> 0:03:34,047
也就是说每个设备可以

60
00:03:34,114 --> 0:03:37,751
所以iPhone有iPhone app

61
00:03:40,487 --> 0:03:41,355
因此

62
00:03:41,421 --> 0:03:44,491
我们可以直接将app下载到设备中

63
00:03:44,558 --> 0:03:47,461
我们也第一次将

64
00:03:47,528 --> 0:03:48,562
资源和变体细化

65
00:03:49,196 --> 0:03:51,732
所以如果你的用户

66
00:03:52,032 --> 0:03:55,369
我们就可以安装特定适用于

67
00:03:55,435 --> 0:03:56,503
该设备的变体

68
00:03:56,570 --> 0:03:59,439
和体系结构大小 而不是其他

69
00:03:59,706 --> 0:04:02,843
资源也是同样的道理

70
00:03:59,706 --> 0:04:02,843
资源也是同样的道理

71
00:04:02,910 --> 0:04:05,445
所以如果你已经将资源目录

72
00:04:05,512 --> 0:04:06,346
配置为

73
00:04:07,247 --> 0:04:10,551
将特定资源用于特定设备

74
00:04:10,617 --> 0:04:13,921
那么我们就能将

75
00:04:14,988 --> 0:04:17,591
说得简单一点就是

76
00:04:17,658 --> 0:04:19,125
下载会更小

77
00:04:19,192 --> 0:04:21,562
Watch app的

78
00:04:21,995 --> 0:04:26,099
如果你是因为Swift 5和

79
00:04:26,166 --> 0:04:29,670
那么现在Swift dylibs

80
00:04:29,736 --> 0:04:32,339
所以下载还会变得更小

81
00:04:33,540 --> 0:04:36,243
所以 这就是我么安装app的方式

82
00:04:36,310 --> 0:04:38,745
现在我们来说说

83
00:04:40,414 --> 0:04:43,550
在iOS App Store里

84
00:04:43,817 --> 0:04:46,086
但是现在新的watchOS 6中

85
00:04:46,153 --> 0:04:49,022
我们要向你介绍专为Apple Watch

86
00:04:50,190 --> 0:04:52,726
这是一个功能齐全的

87
00:04:53,227 --> 0:04:55,562
有完整的功能部分

88
00:04:55,629 --> 0:04:59,333
完整的产品详情页面 搜索 编辑

89
00:04:59,399 --> 0:05:00,434
而且我得说

90
00:04:59,399 --> 0:05:00,434
而且我得说

91
00:05:00,501 --> 0:05:02,636
你甚至可以直接

92
00:05:02,703 --> 0:05:05,105
操作起来真的很酷

93
00:05:05,172 --> 0:05:06,607
我真的很喜欢

94
00:05:07,174 --> 0:05:10,077
现在我们来说说不同类型的app

95
00:05:10,143 --> 0:05:13,780
以及它们在新的

96
00:05:14,648 --> 0:05:16,183
（依存APP)

97
00:05:16,250 --> 0:05:18,852
所以 现在商店里的所有app

98
00:05:18,919 --> 0:05:21,255
我们都叫做依存app

99
00:05:21,321 --> 0:05:24,591
因为Watch app在系统上

100
00:05:24,658 --> 0:05:25,626
而存在的

101
00:05:27,828 --> 0:05:30,063
所以如果我在Watch

102
00:05:30,130 --> 0:05:32,466
App Store里

103
00:05:32,533 --> 0:05:36,837
系统会自动将iPhone版本

104
00:05:38,005 --> 0:05:40,807
如果iPhone app

105
00:05:40,874 --> 0:05:43,410
那么watchOS app

106
00:05:43,477 --> 0:05:45,846
因为系统认为Watch app

107
00:05:45,913 --> 0:05:47,915
是依存于iPhone app的

108
00:05:49,416 --> 0:05:50,250
（独立APP）

109
00:05:50,317 --> 0:05:52,019
现在 不像依存app

110
00:05:52,085 --> 0:05:55,422
独立app的意思是

111
00:05:55,489 --> 0:05:58,458
也就是说你

112
00:05:58,525 --> 0:05:59,960
也可以启动Watch app

113
00:06:02,429 --> 0:06:05,632
也就是说Watch app

114
00:06:05,699 --> 0:06:10,704
如果你同时下载了

115
00:06:10,771 --> 0:06:13,574
那么用户可以

116
00:06:13,640 --> 0:06:15,275
而Watch app依旧存在

117
00:06:18,312 --> 0:06:21,048
有些人可能开始紧张

118
00:06:21,114 --> 0:06:22,182
可能开始思考

119
00:06:22,249 --> 0:06:24,785
那我在商店里已经上架的app

120
00:06:24,852 --> 0:06:27,588
那么我告诉你

121
00:06:27,654 --> 0:06:28,689
独立watchOS app

122
00:06:28,755 --> 0:06:32,092
完全兼容旧版OS

123
00:06:32,726 --> 0:06:35,028
而那些新的Watch app

124
00:06:35,329 --> 0:06:36,163
谢谢

125
00:06:38,632 --> 0:06:42,903
新的Watch app会由

126
00:06:44,705 --> 0:06:45,639
（企业分发）

127
00:06:45,706 --> 0:06:48,942
如果你想在企业内部分发app

128
00:06:49,009 --> 0:06:51,745
很高兴告诉你

129
00:06:51,812 --> 0:06:54,748
来创建我们刚刚提到的不同变体

130
00:06:54,815 --> 0:06:57,417
来将你的iPhone

131
00:06:58,051 --> 0:07:00,454
而且当你使用Xcode完成流程时

132
00:06:58,051 --> 0:07:00,454
而且当你使用Xcode完成流程时

133
00:07:00,521 --> 0:07:02,923
在生成的清单plist中

134
00:07:02,990 --> 0:07:05,959
会添加一个新的平台标识符密钥

135
00:07:06,026 --> 0:07:09,496
用于告知系统安装内容以及安装位置

136
00:07:11,632 --> 0:07:15,169
现在我们了解了

137
00:07:15,602 --> 0:07:19,273
现在就来说说

138
00:07:19,339 --> 0:07:20,874
（创建独立Watch App）

139
00:07:21,308 --> 0:07:22,142
（演示）

140
00:07:22,209 --> 0:07:25,112
现在我们进入Xcode

141
00:07:25,179 --> 0:07:26,980
我来告诉你们 将现有app

142
00:07:27,047 --> 0:07:29,883
转化为独立app有多简单

143
00:07:37,024 --> 0:07:37,858
酷

144
00:07:37,925 --> 0:07:39,626
现在我们进入Xcode

145
00:07:39,693 --> 0:07:43,263
这是一款很棒的Watch app

146
00:07:43,730 --> 0:07:44,665
这是

147
00:07:44,731 --> 0:07:47,701
我基本上已经完成了所有

148
00:07:47,768 --> 0:07:51,038
因为这真的是一款在Watch上的

149
00:07:53,340 --> 0:07:55,042
所以我们来创建和运行这款app

150
00:07:55,108 --> 0:07:57,911
并且看看手机模拟器和手表模拟器

151
00:07:57,978 --> 0:08:01,682
与我们想的调试流程是不是一样的

152
00:07:57,978 --> 0:08:01,682
与我们想的调试流程是不是一样的

153
00:08:05,018 --> 0:08:07,521
现在我们运行Watch app

154
00:08:07,588 --> 0:08:09,957
我可以马上启动调试会话

155
00:08:10,224 --> 0:08:13,093
但是我们先让系统

156
00:08:13,861 --> 0:08:15,629
所以我们先停止调试会话

157
00:08:17,564 --> 0:08:21,602
现在在WatchKit扩展的

158
00:08:22,035 --> 0:08:24,671
我们可以看到在部署目标下方

159
00:08:24,738 --> 0:08:28,041
叫支持在未安装iOS app的

160
00:08:28,642 --> 0:08:29,776
所以我来看看它

161
00:08:30,277 --> 0:08:31,812
然后我再进行创建和运行

162
00:08:31,879 --> 0:08:36,283
这样 通过该复选框

163
00:08:36,350 --> 0:08:37,518
我刚刚做得挺快的

164
00:08:37,583 --> 0:08:40,721
所以现在我来

165
00:08:42,089 --> 0:08:44,591
让我们关闭iPhone模拟器

166
00:08:45,325 --> 0:08:46,493
因为该app是独立的

167
00:08:46,560 --> 0:08:48,662
我们就不再需要

168
00:08:48,996 --> 0:08:50,631
所以我再创建

169
00:08:50,998 --> 0:08:53,934
现在 我只创建和运行了手表模拟器

170
00:08:54,001 --> 0:08:57,271
而且调试过程也更快

171
00:09:01,575 --> 0:09:02,409
好

172
00:09:03,911 --> 0:09:07,114
好 现在让我们来建立一款

173
00:09:07,181 --> 0:09:08,148
只在手表上的app

174
00:09:08,882 --> 0:09:10,484
所以我先关闭这个项目

175
00:09:11,251 --> 0:09:15,322
为了创建新app

176
00:09:18,192 --> 0:09:20,527
在watchOS下面

177
00:09:20,594 --> 0:09:23,197
还有带Watch app的

178
00:09:23,263 --> 0:09:25,799
现在我想创建

179
00:09:27,000 --> 0:09:28,268
所以我们选这个

180
00:09:34,074 --> 0:09:34,908
好

181
00:09:35,175 --> 0:09:37,211
然后 我们使用SwiftUI

182
00:09:37,611 --> 0:09:39,713
这很酷 有很多好东西

183
00:09:40,781 --> 0:09:43,116
我们再创立一个并发

184
00:09:44,084 --> 0:09:46,153
之后我再保存到桌面

185
00:09:50,324 --> 0:09:51,325
好

186
00:09:52,893 --> 0:09:54,428
现在我们来创建和运行该app

187
00:09:54,895 --> 0:09:58,866
再次强调 就像我们刚刚

188
00:09:58,932 --> 0:10:00,534
我们不需要iPhone模拟器

189
00:09:58,932 --> 0:10:00,534
我们不需要iPhone模拟器

190
00:10:00,601 --> 0:10:03,570
我们就创建和

191
00:10:03,637 --> 0:10:05,405
直接运用手表模拟器

192
00:10:06,373 --> 0:10:07,207
好

193
00:10:12,646 --> 0:10:14,615
（演示）

194
00:10:14,681 --> 0:10:15,516
谢谢

195
00:10:17,751 --> 0:10:19,186
（XCODE中的APP）

196
00:10:19,253 --> 0:10:23,357
我们刚刚谈到了如何迁移现有app

197
00:10:23,423 --> 0:10:25,425
并将它做成

198
00:10:25,993 --> 0:10:28,729
我们也可以创建

199
00:10:28,795 --> 0:10:29,630
我们也说了

200
00:10:29,696 --> 0:10:32,366
模拟器体验如何大大改善

201
00:10:32,766 --> 0:10:35,302
与模拟器体验一样

202
00:10:35,369 --> 0:10:36,737
我们接下来就谈谈调试

203
00:10:37,371 --> 0:10:40,007
watchOS 6中的调试过程

204
00:10:40,073 --> 0:10:42,709
对于模拟器来说 现在快了十倍

205
00:10:42,776 --> 0:10:44,044
（调试）

206
00:10:44,111 --> 0:10:44,978
谢谢

207
00:10:46,580 --> 0:10:48,982
设备调试速度提高了一倍

208
00:10:49,049 --> 0:10:50,517
今年我们也做了许多努力

209
00:10:50,584 --> 0:10:53,387
让它比以往更加可靠

210
00:10:55,088 --> 0:10:58,292
调试依旧通过iPhone代理

211
00:10:58,358 --> 0:11:00,928
但是我想给你一个小小的专业提示

212
00:10:58,358 --> 0:11:00,928
但是我想给你一个小小的专业提示

213
00:11:00,994 --> 0:11:03,997
如果你的手机和手表

214
00:11:04,064 --> 0:11:06,867
那么系统会选择更快的线路

215
00:11:06,934 --> 0:11:09,369
你就可以看到调试过程会更快

216
00:11:10,537 --> 0:11:13,507
现在我们来深入探讨

217
00:11:14,074 --> 0:11:15,776
如何让app独立起来的不同方面

218
00:11:17,377 --> 0:11:20,447
为此我们要讲到三点

219
00:11:20,981 --> 0:11:23,283
我们会说到如何通过身份验证

220
00:11:23,350 --> 0:11:26,086
获取用户数据 或者直接从用户处

221
00:11:26,420 --> 0:11:27,888
获取用户私有数据

222
00:11:29,056 --> 0:11:31,925
之后是如何将信息传输至设备

223
00:11:32,392 --> 0:11:35,195
最后我们会讲到如何连接

224
00:11:35,262 --> 0:11:37,364
和收集自己的app数据

225
00:11:38,398 --> 0:11:40,667
首先来谈谈身份验证

226
00:11:41,535 --> 0:11:44,137
（登录和注册）

227
00:11:44,204 --> 0:11:46,773
处理身份验证的主要方式

228
00:11:46,840 --> 0:11:48,842
就是注册和登录

229
00:11:48,909 --> 0:11:50,410
现在在watchOS 6中

230
00:11:50,477 --> 0:11:53,480
你可以直接在手表上建立注册验证

231
00:11:54,381 --> 0:11:59,319
你可以使用WK警报操作API

232
00:12:00,554 --> 0:12:01,855
以及在watchOS 6

233
00:12:01,922 --> 0:12:04,625
和我们其他的Apple平台上

234
00:12:04,691 --> 0:12:06,860
现在都支持使用Apple登录

235
00:12:08,495 --> 0:12:11,665
然后我们会谈谈如何创建自己的

236
00:12:12,399 --> 0:12:14,401
自定义密码登录

237
00:12:15,402 --> 0:12:17,271
我们先来说说使用Apple登录

238
00:12:17,337 --> 0:12:18,906
（使用Apple登录）

239
00:12:18,972 --> 0:12:21,041
使用Apple登录是一项简单安全

240
00:12:21,108 --> 0:12:24,311
以及私密的方法从用户处获取信息

241
00:12:25,279 --> 0:12:27,781
用户不需要填写表格

242
00:12:27,848 --> 0:12:30,050
不用想新的密码

243
00:12:30,384 --> 0:12:31,818
他们可以就

244
00:12:32,319 --> 0:12:36,423
选择一个邮件地址 然后继续登录

245
00:12:39,526 --> 0:12:43,030
而且每个账户都内置

246
00:12:43,564 --> 0:12:46,800
用户也不需要进行邮件验证

247
00:12:47,935 --> 0:12:50,404
我们也支持在所有设备上登录

248
00:12:50,470 --> 0:12:55,242
此外还有适用于任何其他类型设备的

249
00:12:57,711 --> 0:12:59,313
所以通过Apple登录

250
00:12:59,379 --> 0:13:01,882
确保并使用了现在

251
00:12:59,379 --> 0:13:01,882
确保并使用了现在

252
00:13:01,949 --> 0:13:04,151
使用的身份验证服务框架

253
00:13:06,119 --> 0:13:08,789
如果你有任何特定的UI想要创建

254
00:13:08,856 --> 0:13:11,658
现在可以使用

255
00:13:11,725 --> 0:13:13,927
并将其嵌入你的app中

256
00:13:13,994 --> 0:13:16,897
这样 你的用户点击按钮

257
00:13:16,964 --> 0:13:18,765
你就可以收到ID活动

258
00:13:18,832 --> 0:13:21,635
然后你就可以使用身份验证服务框架

259
00:13:21,702 --> 0:13:24,037
来显示相应的系统UI

260
00:13:25,506 --> 0:13:27,241
这周还有其他很棒的演讲

261
00:13:27,307 --> 0:13:29,543
如果你想了解更多关于

262
00:13:29,610 --> 0:13:31,078
我强烈建议你去听听

263
00:13:32,779 --> 0:13:36,450
好了 要在WatchKit扩展的

264
00:13:36,517 --> 0:13:38,085
Xcode中启用Apple登录

265
00:13:38,151 --> 0:13:39,686
只需添加一项新功能

266
00:13:39,753 --> 0:13:42,055
并启用通过Apple登录授权

267
00:13:42,523 --> 0:13:44,358
上手就是这么轻松

268
00:13:45,225 --> 0:13:47,160
（文本字段）

269
00:13:47,227 --> 0:13:50,197
现在你有了自己的自定义密码登录

270
00:13:50,264 --> 0:13:53,667
现在我要向你介绍今年

271
00:13:54,935 --> 0:13:59,673
这样你就可以在SwiftUI或

272
00:14:01,842 --> 0:14:05,212
你就可以创建一个像这样的UI

273
00:14:05,279 --> 0:14:07,414
我们只需要用户名和密码

274
00:14:07,481 --> 0:14:09,249
我们使用占位符文本

275
00:14:09,316 --> 0:14:12,186
来指导用户要输入什么

276
00:14:14,087 --> 0:14:16,490
如果为该特定文本字段设置了

277
00:14:16,557 --> 0:14:18,225
适当的文本内容类型

278
00:14:18,292 --> 0:14:21,195
然后被调出的系统文本输入控制器

279
00:14:21,261 --> 0:14:24,231
会自动改变成适当的文本类型

280
00:14:27,301 --> 0:14:30,571
所以 对于这个流程

281
00:14:31,371 --> 0:14:34,441
然后系统文本输入控制器就会被调出

282
00:14:34,775 --> 0:14:39,680
用户就可以通过语音

283
00:14:39,746 --> 0:14:43,217
现在有了一个新的选项

284
00:14:43,483 --> 0:14:45,152
如果用户点击这一选项

285
00:14:46,220 --> 0:14:47,588
Apple Watch就会说

286
00:14:47,654 --> 0:14:51,692
“在你的iOS或者iPad OS

287
00:14:51,758 --> 0:14:54,595
然后你会在

288
00:14:54,661 --> 0:14:56,430
收到通知

289
00:14:56,496 --> 0:14:59,266
如果它们是用相同的

290
00:14:59,933 --> 0:15:02,736
如果你曾经使用过

291
00:14:59,933 --> 0:15:02,736
如果你曾经使用过

292
00:15:02,803 --> 0:15:04,638
那么这个流程你就很熟悉了

293
00:15:06,306 --> 0:15:07,674
当用户点击输入

294
00:15:07,741 --> 0:15:11,411
他们就可以轻松地将文本

295
00:15:12,079 --> 0:15:15,516
再次强调 文本内容类型

296
00:15:15,582 --> 0:15:18,485
在这里会有自动填充建议

297
00:15:18,819 --> 0:15:22,756
然后用户可以

298
00:15:22,823 --> 0:15:27,361
或者是首选密码管理器中

299
00:15:29,763 --> 0:15:30,831
（iOS的密码自动填充建议）

300
00:15:30,898 --> 0:15:31,732
现在

301
00:15:32,499 --> 0:15:35,569
如果你想让系统置顶你的

302
00:15:35,636 --> 0:15:37,171
密码自动填充建议

303
00:15:37,471 --> 0:15:38,605
那么

304
00:15:38,672 --> 0:15:41,208
你要保证设置正确的文本内容类型

305
00:15:41,542 --> 0:15:45,345
并将关联域名添加到

306
00:15:45,812 --> 0:15:50,651
关联域名是将你的app

307
00:15:50,918 --> 0:15:53,453
这样系统就知道

308
00:15:53,520 --> 0:15:58,192
用户的iCloud钥匙串中

309
00:15:58,258 --> 0:16:01,595
可以置顶并显示在iOS键盘的顶部

310
00:15:58,258 --> 0:16:01,595
可以置顶并显示在iOS键盘的顶部

311
00:16:04,498 --> 0:16:07,467
一旦用户选择自动填充建议

312
00:16:07,534 --> 0:16:09,937
系统就会尽力

313
00:16:10,003 --> 0:16:13,507
同时填写用户名和密码

314
00:16:15,275 --> 0:16:16,577
对于基于密码的登录

315
00:16:16,643 --> 0:16:19,847
有时候你可能会需要支持一次性密码

316
00:16:20,180 --> 0:16:22,516
如果你设置了正确的文本内容类型

317
00:16:23,417 --> 0:16:26,186
一次性密码就会自动填充

318
00:16:26,253 --> 0:16:29,690
如果你是通过iMessage

319
00:16:29,957 --> 0:16:33,694
然后系统文本输入控制器

320
00:16:33,760 --> 0:16:35,429
用户就可以选择

321
00:16:35,495 --> 0:16:38,398
之后继续进行身份验证

322
00:16:39,833 --> 0:16:42,903
（文本字段）

323
00:16:45,005 --> 0:16:46,373
再次强调 对于文本字段

324
00:16:46,440 --> 0:16:50,978
你可以在SwiftUI

325
00:16:51,044 --> 0:16:53,313
保证你设置了关联域名

326
00:16:53,380 --> 0:16:56,183
来置顶适当的自动填充建议

327
00:16:57,117 --> 0:16:59,753
运用连续性键盘测试流程

328
00:16:59,820 --> 0:17:02,322
如果需要的话

329
00:16:59,820 --> 0:17:02,322
如果需要的话

330
00:17:03,824 --> 0:17:07,560
我们有时要用到的另一种用户信息

331
00:17:07,627 --> 0:17:09,663
就是私密用户信息

332
00:17:10,130 --> 0:17:12,766
我们想要通过不同的可用框架

333
00:17:12,833 --> 0:17:14,601
来向用户询问这些信息

334
00:17:14,667 --> 0:17:15,569
（隐私管理）

335
00:17:15,636 --> 0:17:16,904
在watchOS中

336
00:17:16,970 --> 0:17:20,140
我们已经支持直接访问日历

337
00:17:20,207 --> 0:17:21,708
联系人 手势

338
00:17:21,775 --> 0:17:25,712
甚至一切其他类型的信息 如定位

339
00:17:26,012 --> 0:17:27,915
现在在watchOS 6中

340
00:17:28,315 --> 0:17:32,486
我们现在支持直接在

341
00:17:34,755 --> 0:17:35,589
谢谢

342
00:17:37,057 --> 0:17:41,295
现在用户可以选择

343
00:17:41,361 --> 0:17:43,597
或只是允许特定请求

344
00:17:47,067 --> 0:17:49,203
这就是我们如何在独立app中

345
00:17:49,269 --> 0:17:50,838
获取用户信息

346
00:17:51,138 --> 0:17:54,474
现在我们来谈谈如何

347
00:17:54,775 --> 0:17:55,909
当然

348
00:17:55,976 --> 0:17:58,612
传输信息的最好方式

349
00:17:59,112 --> 0:18:00,581
就是推送通知

350
00:17:59,112 --> 0:18:00,581
就是推送通知

351
00:18:00,948 --> 0:18:02,649
现在在watchOS 6中

352
00:18:02,950 --> 0:18:06,353
手表首次成为独立推送目标

353
00:18:06,787 --> 0:18:07,754
（推送通知）

354
00:18:07,821 --> 0:18:08,655
谢谢

355
00:18:10,757 --> 0:18:12,059
也就是说

356
00:18:12,426 --> 0:18:16,530
你可以将用户可见通知和后台通知

357
00:18:16,597 --> 0:18:18,365
直接发送至Apple Watch

358
00:18:18,799 --> 0:18:21,835
而这是基于用户通知框架

359
00:18:21,902 --> 0:18:24,238
我们用的是和其他Apple设备

360
00:18:24,304 --> 0:18:26,206
一样的基础设施

361
00:18:27,107 --> 0:18:27,941
（通知）

362
00:18:28,008 --> 0:18:30,043
总的来说

363
00:18:30,577 --> 0:18:34,047
你的服务器会直接

364
00:18:34,114 --> 0:18:35,482
有效负载

365
00:18:35,549 --> 0:18:38,452
APNS是Apple通知推送服务

366
00:18:38,785 --> 0:18:40,921
然后 APNS会将有效负载

367
00:18:40,988 --> 0:18:42,723
发送至适当设备

368
00:18:43,524 --> 0:18:44,424
在watchOS中

369
00:18:44,491 --> 0:18:47,928
有效负载和其他平台是一样的

370
00:18:48,495 --> 0:18:51,899
而在在APNS请求标题上

371
00:18:51,965 --> 0:18:53,000
（APNS请求标题）

372
00:18:53,066 --> 0:18:55,869
新密钥是APNS推送类型

373
00:18:57,304 --> 0:19:00,274
它也支持所有Apple平台

374
00:18:57,304 --> 0:19:00,274
它也支持所有Apple平台

375
00:19:00,340 --> 0:19:01,875
以及所有OS

376
00:19:03,143 --> 0:19:07,648
你可以将该密钥设置为提醒或是后台

377
00:19:07,714 --> 0:19:09,449
我觉得它的使用方式就是

378
00:19:09,516 --> 0:19:12,052
如果用户会看到该通知

379
00:19:12,119 --> 0:19:15,889
他们要被提醒

380
00:19:15,956 --> 0:19:18,425
如果你只需发送后台提醒

381
00:19:18,492 --> 0:19:21,995
只是想在有新内容可用时

382
00:19:22,062 --> 0:19:26,066
在设备中唤醒app

383
00:19:27,601 --> 0:19:28,902
（推送通知）

384
00:19:28,969 --> 0:19:31,405
对于注册和推送

385
00:19:32,306 --> 0:19:33,140
对于注册而言

386
00:19:33,207 --> 0:19:35,209
我们会获得WatchKit令牌

387
00:19:35,876 --> 0:19:39,413
就像过去发送通知一样

388
00:19:39,479 --> 0:19:42,382
你的提醒通知

389
00:19:42,449 --> 0:19:44,084
方式与以前一样

390
00:19:44,151 --> 0:19:47,187
将用户通知与WatchKit结合

391
00:19:48,222 --> 0:19:49,556
而后台通知

392
00:19:49,623 --> 0:19:52,526
则会推送只WK扩展代理

393
00:19:53,627 --> 0:19:55,495
如果你加密了任何有效负载

394
00:19:55,562 --> 0:19:58,632
由于我们现在

395
00:19:58,699 --> 0:20:00,267
通知服务扩展

396
00:19:58,699 --> 0:20:00,267
通知服务扩展

397
00:20:00,901 --> 0:20:03,937
所以你可以直接在设备上

398
00:20:04,004 --> 0:20:05,639
之后向用户展示

399
00:20:07,708 --> 0:20:08,842
在Xcode项目中

400
00:20:08,909 --> 0:20:12,112
在目标编辑器中启用推送通知

401
00:20:12,179 --> 0:20:16,383
如果你选择了WatchKit扩展

402
00:20:16,450 --> 0:20:19,386
并启用推送通知权利

403
00:20:20,487 --> 0:20:23,023
如果你想要支持后台通知

404
00:20:23,090 --> 0:20:24,758
你可以启用后台模式

405
00:20:25,492 --> 0:20:28,929
然后启用远程通知复选框

406
00:20:30,531 --> 0:20:32,266
我们来看看代码

407
00:20:33,600 --> 0:20:38,071
现在我们在扩展代理中

408
00:20:38,138 --> 0:20:41,775
我们注册通知要做的第一件事就是

409
00:20:41,842 --> 0:20:44,211
征求用户许可

410
00:20:44,278 --> 0:20:48,115
所以如果我们在

411
00:20:48,916 --> 0:20:51,185
用户选择了授予访问权限

412
00:20:51,451 --> 0:20:54,488
那我们就可以WK共享扩展上

413
00:20:54,555 --> 0:20:56,423
调用远程注册通知

414
00:20:57,858 --> 0:20:59,159
之后

415
00:20:59,726 --> 0:21:04,198
如果我们完成了远程通知调用注册

416
00:20:59,726 --> 0:21:04,198
如果我们完成了远程通知调用注册

417
00:21:04,264 --> 0:21:06,033
那么我们就可以获取设备令牌

418
00:21:06,099 --> 0:21:10,070
并将该通知转发给

419
00:21:10,137 --> 0:21:11,371
或者是我们自己的服务器

420
00:21:12,439 --> 0:21:14,541
当然 我们也希望确保

421
00:21:14,608 --> 0:21:17,110
实施无法注册远程通知

422
00:21:17,177 --> 0:21:18,579
以防故障发生

423
00:21:22,249 --> 0:21:24,084
对于后台通知而言

424
00:21:24,151 --> 0:21:27,588
它们会推送收到远程通知

425
00:21:27,654 --> 0:21:30,457
以及获取完成处理程序

426
00:21:30,724 --> 0:21:32,059
所以 当你收到该通知

427
00:21:32,125 --> 0:21:34,228
你就可以开始处理后台通知

428
00:21:34,494 --> 0:21:36,263
然后只需使用适当的后台获取结果

429
00:21:36,330 --> 0:21:39,166
调用完成处理程序

430
00:21:40,501 --> 0:21:42,669
（细节）

431
00:21:42,736 --> 0:21:47,307
再次提醒

432
00:21:47,374 --> 0:21:50,544
需要APNS推送类型

433
00:21:50,611 --> 0:21:52,646
并且它支持所有平台

434
00:21:52,713 --> 0:21:56,283
所以你要将通知推送至

435
00:21:56,350 --> 0:21:58,685
只需确保添加APNS推送类型

436
00:22:00,654 --> 0:22:04,191
并且APNS请求标题上的

437
00:22:04,258 --> 0:22:07,060
是你的WatchKit

438
00:22:07,361 --> 0:22:10,297
而不是WatchKit扩展

439
00:22:11,665 --> 0:22:15,435
如果你有多个app 比如

440
00:22:15,869 --> 0:22:19,740
你想同时向两个设备发送通知

441
00:22:20,073 --> 0:22:21,375
当你这么做时

442
00:22:21,675 --> 0:22:25,379
系统会在同步推送通知时

443
00:22:25,445 --> 0:22:27,314
适当删除重复通知

444
00:22:28,949 --> 0:22:29,783
（WATCHOS中的并发推送）

445
00:22:29,850 --> 0:22:32,286
还有另一种向设备推送通知的好方法

446
00:22:32,352 --> 0:22:34,154
那就是并发推送

447
00:22:35,022 --> 0:22:38,525
并发推送是更新你的app的好方法

448
00:22:38,592 --> 0:22:42,996
如果活动表盘已启用并发功能的话

449
00:22:45,399 --> 0:22:46,967
而这是通过PushKit完成的

450
00:22:47,034 --> 0:22:49,603
现在在watchOS上也可使用

451
00:22:49,970 --> 0:22:53,273
并且你可以使用PushKit

452
00:22:54,308 --> 0:22:58,779
,如果你用的是过去

453
00:22:58,846 --> 0:23:01,548
我们建议你现在直接将并发推送

454
00:22:58,846 --> 0:23:01,548
我们建议你现在直接将并发推送

455
00:23:01,615 --> 0:23:03,317
发至Watch

456
00:23:05,052 --> 0:23:06,320
在代码中

457
00:23:07,354 --> 0:23:09,756
我们可以通过设置PK推送注册表

458
00:23:09,823 --> 0:23:13,260
来注册并发推送 设置代理

459
00:23:13,327 --> 0:23:16,697
之后指定所需推送类型

460
00:23:18,999 --> 0:23:22,135
完成之后我们就要获取设备令牌

461
00:23:22,202 --> 0:23:24,771
只需转发至我们的服务器

462
00:23:25,539 --> 0:23:28,075
然后处理任何可能发生的失效

463
00:23:29,910 --> 0:23:32,412
之后我们发送推送

464
00:23:32,880 --> 0:23:36,517
然后运用适当的PushKit方法

465
00:23:36,583 --> 0:23:38,785
处理接受并发推送

466
00:23:39,052 --> 0:23:41,722
然后重新加载并发时间表

467
00:23:44,124 --> 0:23:45,192
好了

468
00:23:45,259 --> 0:23:47,628
这就是我们向设备推送信息的方法

469
00:23:48,328 --> 0:23:51,632
我们接下来讲讲如何收集信息

470
00:23:51,698 --> 0:23:53,100
以及处理连接性问题

471
00:23:54,301 --> 0:23:55,135
（联网）

472
00:23:55,202 --> 0:23:57,137
一般来说 在联网方面

473
00:23:57,938 --> 0:23:59,473
我们会用URL会话

474
00:23:59,540 --> 0:24:02,576
这在watchOS上

475
00:23:59,540 --> 0:24:02,576
这在watchOS上

476
00:24:03,277 --> 0:24:04,111
至于

477
00:24:04,912 --> 0:24:06,313
至于CloudKit

478
00:24:06,380 --> 0:24:09,383
我们也用CloudKit

479
00:24:10,083 --> 0:24:11,618
（URL会话）

480
00:24:11,685 --> 0:24:13,987
如果你在使用手表连接

481
00:24:14,054 --> 0:24:17,291
并且要依赖iPhone app

482
00:24:17,357 --> 0:24:21,094
那么你就要将所有的

483
00:24:21,161 --> 0:24:22,930
迁移至NSURL会话

484
00:24:24,398 --> 0:24:25,666
再次强调 对于手表来说

485
00:24:26,166 --> 0:24:28,769
用户基本上使用

486
00:24:28,836 --> 0:24:31,705
都会很短 然后他们就会放下手腕

487
00:24:31,772 --> 0:24:34,174
因此 务必使用后台会话

488
00:24:34,241 --> 0:24:38,111
确保URL会话能够正确完成

489
00:24:39,746 --> 0:24:40,647
（手表连接）

490
00:24:40,714 --> 0:24:43,517
所以 手表连接功能依旧是可用的

491
00:24:44,518 --> 0:24:46,920
你依旧可将其用于任何伴随app的

492
00:24:46,987 --> 0:24:48,589
特定互动

493
00:24:48,655 --> 0:24:51,625
但只在需要的时候使用

494
00:24:53,393 --> 0:24:56,129
现在有一项为伴随app

495
00:24:56,196 --> 0:24:59,233
它会让你知道该app

496
00:25:02,302 --> 0:25:04,037
在CloudKit中

497
00:25:04,805 --> 0:25:07,407
如果你已经在使用

498
00:25:07,474 --> 0:25:11,211
我们现在在watchOS上

499
00:25:12,112 --> 0:25:15,816
它与CloudKit

500
00:25:15,883 --> 0:25:19,720
因此 如果你不想管理自己的

501
00:25:19,786 --> 0:25:22,589
你就可以运用CloudKit

502
00:25:23,690 --> 0:25:25,626
在网上有一个很棒的演讲

503
00:25:25,692 --> 0:25:27,761
如果你想了解更多

504
00:25:27,828 --> 0:25:30,097
及其最佳运用的信息 请参阅该演讲

505
00:25:31,398 --> 0:25:33,267
对于CK订阅

506
00:25:34,034 --> 0:25:36,737
它是订阅在任何其他设备上发生的

507
00:25:36,803 --> 0:25:39,273
数据库更改的好方法

508
00:25:39,339 --> 0:25:40,307
（CK订阅）

509
00:25:40,374 --> 0:25:42,876
之后你会收到后台通知推送

510
00:25:42,943 --> 0:25:45,379
它们会告诉你什么时候更新app

511
00:25:45,646 --> 0:25:48,048
然后你就可以检索只在app

512
00:25:48,115 --> 0:25:50,951
和CloudKit容器之间的更改

513
00:25:52,853 --> 0:25:57,824
进一步说 如果你的用户

514
00:25:57,891 --> 0:25:59,626
他们更改了数据库

515
00:25:59,693 --> 0:26:03,063
该项更改就会

516
00:25:59,693 --> 0:26:03,063
该项更改就会

517
00:26:03,363 --> 0:26:06,700
CloudKit就会知道

518
00:26:07,434 --> 0:26:12,339
CloudKit就会告诉APNS

519
00:26:12,406 --> 0:26:15,342
发送发送后台通知

520
00:26:15,409 --> 0:26:16,877
在这个例子中

521
00:26:19,646 --> 0:26:21,148
之后 如果Watch app

522
00:26:21,215 --> 0:26:23,684
如果用户对Watch app

523
00:26:23,750 --> 0:26:25,752
该循环就会自动重复

524
00:26:26,186 --> 0:26:31,358
如何发送通知在任何其他设备上

525
00:26:31,425 --> 0:26:33,427
都遵循一样的规则

526
00:26:34,528 --> 0:26:38,765
想要进行CloudKit订阅

527
00:26:38,832 --> 0:26:42,035
然后将发送内容可用

528
00:26:42,102 --> 0:26:43,136
设为真

529
00:26:43,837 --> 0:26:46,006
然后CloudKit就会向

530
00:26:46,073 --> 0:26:48,942
相同的回调代理发送通知

531
00:26:49,009 --> 0:26:50,978
你就会收到远程通知

532
00:26:51,044 --> 0:26:52,412
这样 你就可以处理并检索

533
00:26:52,479 --> 0:26:55,649
只在你的app和

534
00:26:55,716 --> 0:26:57,050
发生的更改

535
00:26:59,720 --> 0:27:01,655
好了 这就是我们说到的

536
00:26:59,720 --> 0:27:01,655
好了 这就是我们说到的

537
00:27:01,722 --> 0:27:05,058
如何创建独立的Watch app

538
00:27:05,125 --> 0:27:06,860
如何获取用户信息

539
00:27:07,461 --> 0:27:11,331
以及如何向设备推送信息

540
00:27:11,665 --> 0:27:15,502
最后是如何获取自己的app数据的

541
00:27:16,637 --> 0:27:17,804
（总结）

542
00:27:19,072 --> 0:27:23,644
用户喜欢Apple Watch

543
00:27:23,710 --> 0:27:27,381
现在也有许多可供使用的系统和

544
00:27:27,447 --> 0:27:28,815
开发者功能

545
00:27:28,882 --> 0:27:33,153
所以务必使你的Watch app

546
00:27:33,220 --> 0:27:37,057
因为现在用户可能比以往更加希望

547
00:27:37,124 --> 0:27:39,126
Watch app能够独立

548
00:27:39,960 --> 0:27:40,794
（更多信息）

549
00:27:40,861 --> 0:27:43,730
网上还有更多关于演讲

550
00:27:43,997 --> 0:27:46,266
以及实验室的详细信息

551
00:27:46,600 --> 0:27:50,971
再次感谢大家光临

552
00:27:51,271 --> 0:27:52,206
谢谢
