1
00:00:06,039 --> 0:00:13,046
（iPad多窗口介绍）

2
00:00:13,847 --> 0:00:14,848
谢谢

3
00:00:14,915 --> 0:00:18,318
下午好

4
00:00:18,385 --> 0:00:20,087
我来自iOS System UI团队

5
00:00:20,587 --> 0:00:24,658
今天 我同Steve Holt

6
00:00:24,725 --> 0:00:27,327
一起来介绍一下iPad的多窗口

7
00:00:28,629 --> 0:00:29,530
我们来聊下什么呢？

8
00:00:30,097 --> 0:00:32,131
在iOS 12以及之前的版本

9
00:00:32,533 --> 0:00:34,001
如果你上滑切换器

10
00:00:34,067 --> 0:00:35,836
你会看到一些小巧的格子

11
00:00:36,336 --> 0:00:38,472
点击其中一个

12
00:00:39,740 --> 0:00:40,707
在iOS 13…

13
00:00:41,542 --> 0:00:44,645
也是类似的

14
00:00:45,012 --> 0:00:46,380
它们由窗口取代了…

15
00:00:47,247 --> 0:00:49,283
如你所见

16
00:00:50,851 --> 0:00:52,519
这就是我们今天要聊的内容

17
00:00:53,153 --> 0:00:54,922
来讲一下它能为你的app带来什么

18
00:00:55,422 --> 0:00:56,456
因为今天只是介绍

19
00:00:56,523 --> 0:00:58,292
所以我只简单概述一下

20
00:00:59,059 --> 0:01:00,594
我们先从设计问题讲起

21
00:00:59,059 --> 0:01:00,594
我们先从设计问题讲起

22
00:01:01,328 --> 0:01:03,830
你可能会想多窗口

23
00:01:03,897 --> 0:01:06,166
在你的app有什么用？

24
00:01:07,067 --> 0:01:10,103
我们来从app的生命周期为入口

25
00:01:10,604 --> 0:01:12,639
来聊一下多窗口视图是怎样对

26
00:01:12,906 --> 0:01:16,043
app编程模型

27
00:01:16,109 --> 0:01:17,578
我会介绍如何制作窗口

28
00:01:18,712 --> 0:01:19,980
从那里讲起 到拖拽

29
00:01:20,547 --> 0:01:21,815
这是你们大多数人制作窗口的方法

30
00:01:22,449 --> 0:01:26,386
为了让你的app具有多窗口功能

31
00:01:27,120 --> 0:01:30,624
接下来 James会说明

32
00:01:30,691 --> 0:01:33,026
你想知道或需要

33
00:01:35,295 --> 0:01:36,296
那么我们开始吧

34
00:01:36,363 --> 0:01:38,298
我们来聊一下设计问题

35
00:01:38,866 --> 0:01:39,900
以及…

36
00:01:40,234 --> 0:01:44,638
首先 我们来讲一下

37
00:01:45,973 --> 0:01:48,976
这其实是两个问题

38
00:01:49,042 --> 0:01:53,380
第一 我的app

39
00:01:53,747 --> 0:01:54,581
可以支持多窗口吗？

40
00:01:55,082 --> 0:01:56,717
如果可以 接下来…

41
00:01:57,584 --> 0:01:58,819
那窗口是什么样子的呢？

42
00:01:59,086 --> 0:02:00,053
它们是怎么工作的

43
00:01:59,086 --> 0:02:00,053
它们是怎么工作的

44
00:02:01,188 --> 0:02:03,190
用户能习惯它们吗？

45
00:02:04,291 --> 0:02:08,061
我们会用Apple内置的

46
00:02:08,729 --> 0:02:10,764
以及告诉你如何在你的app中实现

47
00:02:11,098 --> 0:02:12,466
那可能是你想知道的

48
00:02:14,001 --> 0:02:15,135
我们来看一下Safari

49
00:02:15,869 --> 0:02:19,406
Safari是多任务app的

50
00:02:19,740 --> 0:02:21,475
如图所示

51
00:02:22,509 --> 0:02:24,845
这是iOS 12上

52
00:02:25,312 --> 0:02:27,814
它已经支持了分屏视图

53
00:02:28,782 --> 0:02:30,250
在iOS 13上 它是这个样子

54
00:02:30,317 --> 0:02:32,419
在iPadOS 它是这样的

55
00:02:33,120 --> 0:02:34,821
并没有太大的区别

56
00:02:35,722 --> 0:02:38,325
它是如此重要 甚至当我们还不能

57
00:02:38,392 --> 0:02:39,626
在整个操作系统上实现时

58
00:02:39,693 --> 0:02:41,562
我们在Safari上先实现了

59
00:02:44,765 --> 0:02:46,967
总体来说

60
00:02:47,334 --> 0:02:48,902
我们要了解的

61
00:02:51,038 --> 0:02:53,040
第一件事是

62
00:02:53,106 --> 0:02:55,976
在Safari上窗口类型只有一种

63
00:02:56,043 --> 0:02:58,245
每个窗口都是一样的

64
00:02:58,312 --> 0:02:59,847
它们在界面上相互克隆对方

65
00:03:00,214 --> 0:03:02,282
每个窗口都包含app的所有功能

66
00:03:03,217 --> 0:03:05,185
这在iPad上很重要

67
00:03:05,586 --> 0:03:06,587
因为

68
00:03:06,854 --> 0:03:10,891
用户需要能够在每个窗口使用

69
00:03:11,525 --> 0:03:13,460
当用户觉得有多窗口的必要时

70
00:03:13,760 --> 0:03:14,862
它们也能够创建

71
00:03:15,495 --> 0:03:18,532
如果你的app需要多个窗口

72
00:03:18,599 --> 0:03:20,701
那是一定有问题

73
00:03:21,602 --> 0:03:24,137
虽然你不一定要确保

74
00:03:24,204 --> 0:03:25,739
每个窗口都一模一样

75
00:03:25,806 --> 0:03:28,275
但是你要让第一个用户创建的

76
00:03:28,575 --> 0:03:30,511
第一窗口具备所有功能

77
00:03:32,579 --> 0:03:34,281
所以 如上所述

78
00:03:35,115 --> 0:03:36,016
它们都是一样的

79
00:03:36,083 --> 0:03:37,851
在大多数Apple的app中

80
00:03:37,918 --> 0:03:38,819
你会发现我们是这样做的

81
00:03:39,152 --> 0:03:41,455
那不是一件坏事

82
00:03:41,522 --> 0:03:42,890
对你来说 它既是容易

83
00:03:42,956 --> 0:03:44,424
也是对的事情

84
00:03:44,491 --> 0:03:45,559
我们来看个例子

85
00:03:46,460 --> 0:03:47,294
在我开始之前

86
00:03:47,361 --> 0:03:49,596
需要说明的是

87
00:03:50,464 --> 0:03:52,266
系统支持

88
00:03:52,332 --> 0:03:53,400
在Safari中的操作更棒了

89
00:03:53,800 --> 0:03:56,069
现在你可以拖动一个窗口到一边

90
00:03:56,503 --> 0:03:59,339
只专注于一个窗口的内容

91
00:03:59,406 --> 0:04:00,474
很酷

92
00:03:59,406 --> 0:04:00,474
很酷

93
00:04:03,944 --> 0:04:05,879
下面我们来看文档类型的app

94
00:04:09,783 --> 0:04:11,051
现在 我们看到的是Pages

95
00:04:11,985 --> 0:04:13,887
用户在使用任何文档类型的app时

96
00:04:14,154 --> 0:04:15,923
都有想要同时

97
00:04:16,190 --> 0:04:20,494
查看多个窗口的需求

98
00:04:21,028 --> 0:04:22,362
所以你一定要支持多窗口

99
00:04:23,397 --> 0:04:24,364
这里 你可能会

100
00:04:24,698 --> 0:04:26,300
觉得有点惊讶

101
00:04:26,366 --> 0:04:27,501
如果你看这些窗口的左上角

102
00:04:28,235 --> 0:04:30,971
都有一个“文档”按钮

103
00:04:31,972 --> 0:04:33,941
每个窗口都其实相当于

104
00:04:34,341 --> 0:04:36,376
你可以返回到上一个文档

105
00:04:36,443 --> 0:04:37,444
查看另一个

106
00:04:37,811 --> 0:04:39,446
其实是和Safari一样的

107
00:04:39,847 --> 0:04:41,615
只有一种类型的窗口页面和文档页面

108
00:04:44,318 --> 0:04:47,154
在每个文档里都不是必须的

109
00:04:47,221 --> 0:04:49,323
我觉得并不是每个文档相关的app

110
00:04:49,890 --> 0:04:52,492
但在这里 其实是有用的

111
00:04:52,559 --> 0:04:54,695
但我们接下来看到的例子不是这样的

112
00:04:57,497 --> 0:04:59,499
Maps也是

113
00:05:00,200 --> 0:05:01,335
只有一种类型窗口

114
00:05:01,602 --> 0:05:03,871
这里我提及它的理由是

115
00:05:04,171 --> 0:05:06,907
因为它表明了我需要让我的app

116
00:05:06,974 --> 0:05:09,710
支持多窗口的其他理由

117
00:05:10,177 --> 0:05:11,545
首先

118
00:05:12,513 --> 0:05:15,749
这并不是一个典型的例子

119
00:05:16,149 --> 0:05:17,184
因为它就像

120
00:05:17,251 --> 0:05:19,720
你打开Maps 查找了一些信息

121
00:05:20,220 --> 0:05:21,188
它就是这样工作的

122
00:05:22,689 --> 0:05:23,757
但不是这样的

123
00:05:23,824 --> 0:05:26,527
假如你在计划晚上的活动

124
00:05:26,593 --> 0:05:28,762
你可能会先去吃晚饭

125
00:05:28,829 --> 0:05:29,830
然后去看一场演出表演

126
00:05:30,264 --> 0:05:34,234
如果两件事能在不同的窗口做

127
00:05:34,301 --> 0:05:35,269
岂不是很好

128
00:05:35,669 --> 0:05:37,738
你能在不干扰相互两件事的状态

129
00:05:38,105 --> 0:05:40,073
的同时思考或改变它们

130
00:05:41,575 --> 0:05:43,777
那似乎是针对于Maps的

131
00:05:43,844 --> 0:05:45,445
但我们要实现多窗口的原因

132
00:05:45,512 --> 0:05:47,681
是因为我们在很多场合都需要这么做

133
00:05:48,148 --> 0:05:51,785
所以 我们并不能保证在所有情况下

134
00:05:51,852 --> 0:05:53,020
有用与否

135
00:05:53,487 --> 0:05:54,888
但我们保证多数场合是需要的

136
00:05:55,389 --> 0:05:59,026
所以 我们会用更多的例子来说明

137
00:05:59,092 --> 0:06:01,662
但你也要想想自己的app使用场景

138
00:05:59,092 --> 0:06:01,662
但你也要想想自己的app使用场景

139
00:06:03,430 --> 0:06:05,032
你知道的

140
00:06:05,098 --> 0:06:07,768
因为使用系统的多窗口设计时

141
00:06:08,235 --> 0:06:10,604
当你想要选中它们中的一个

142
00:06:10,671 --> 0:06:11,939
比如我想要去晚餐地点

143
00:06:12,005 --> 0:06:14,174
我能重新安排我的空间

144
00:06:14,241 --> 0:06:17,144
我能比只在一个app里

145
00:06:18,245 --> 0:06:19,746
做到更多的事情

146
00:06:21,381 --> 0:06:22,883
Mail是我们将要看到的

147
00:06:23,383 --> 0:06:25,886
不同类型的窗口的app

148
00:06:27,321 --> 0:06:28,822
Craig在Keynote演讲

149
00:06:28,889 --> 0:06:30,224
但当你回复一则信息时

150
00:06:30,691 --> 0:06:33,126
如同往常一样 模态框出现了

151
00:06:33,694 --> 0:06:34,595
但你可以把它挪到一边

152
00:06:35,495 --> 0:06:38,832
接下来 你甚至可能想要使用

153
00:06:39,233 --> 0:06:40,501
像待办清单一样的

154
00:06:41,034 --> 0:06:45,072
待办层级列表

155
00:06:46,340 --> 0:06:47,307
所以这种情况下

156
00:06:48,442 --> 0:06:50,210
请再看一下窗口上方

157
00:06:50,277 --> 0:06:52,379
有一个蓝色箭头的“发送”按钮

158
00:06:52,446 --> 0:06:53,447
还有一个“取消”按钮

159
00:06:53,947 --> 0:06:55,983
但你无法在此处返回上一级

160
00:06:56,316 --> 0:06:59,553
来查看你的邮箱里的其他内容

161
00:06:59,820 --> 0:07:01,021
这是窗口的特殊设计

162
00:06:59,820 --> 0:07:01,021
这是窗口的特殊设计

163
00:07:03,190 --> 0:07:05,792
接下来 当你

164
00:07:07,261 --> 0:07:09,429
点击其中任意按钮 你就能关闭窗口

165
00:07:09,863 --> 0:07:12,599
我觉得Craig已经在

166
00:07:12,666 --> 0:07:13,834
所以我来展示一下退出的效果

167
00:07:14,334 --> 0:07:16,937
如果你想退出右侧视图

168
00:07:17,471 --> 0:07:20,040
只想查看他们其中的一个

169
00:07:20,307 --> 0:07:23,911
你也能在自己的app中

170
00:07:24,178 --> 0:07:26,647
我会在随后的会议中讨论

171
00:07:30,417 --> 0:07:33,520
Messages

172
00:07:33,787 --> 0:07:35,656
但不是像待办清单窗口的那种

173
00:07:35,722 --> 0:07:39,026
它并不像是一种事务或

174
00:07:39,760 --> 0:07:42,763
这里 当你单独为一个对话

175
00:07:42,829 --> 0:07:44,865
这只属于这个对话

176
00:07:44,932 --> 0:07:46,700
的特定窗口

177
00:07:46,767 --> 0:07:48,535
当你想要关闭时

178
00:07:48,602 --> 0:07:49,603
你能在最上方看到“完成”按钮

179
00:07:51,505 --> 0:07:53,407
这更像是一个管理工具

180
00:07:54,441 --> 0:07:56,076
但是非常好用

181
00:07:58,111 --> 0:08:01,081
接下来 我们回到为什么我的app

182
00:07:58,111 --> 0:08:01,081
接下来 我们回到为什么我的app

183
00:08:01,148 --> 0:08:02,249
需要支持多窗口的视图的问题

184
00:08:02,649 --> 0:08:05,152
在Messages里

185
00:08:05,219 --> 0:08:09,556
我发现在和某个人在一个窗口聊天时

186
00:08:09,623 --> 0:08:12,059
如果我能查看另外一个聊天记录

187
00:08:12,726 --> 0:08:14,428
发送给我正在聊天的人

188
00:08:14,728 --> 0:08:16,663
当我和别人聊天时

189
00:08:16,730 --> 0:08:18,899
我不必退出当前聊天的界面

190
00:08:18,966 --> 0:08:20,000
我一直都在同个窗口

191
00:08:20,467 --> 0:08:23,904
所以 我觉得可以概括为

192
00:08:23,971 --> 0:08:25,639
能够简化处理多项事情

193
00:08:26,039 --> 0:08:28,509
当你在一个窗口处理一件事的时候

194
00:08:31,712 --> 0:08:35,883
最后一个示例Apple app

195
00:08:37,150 --> 0:08:40,120
有趣的是Calendar已经支持

196
00:08:40,187 --> 0:08:41,621
拖拽事件了

197
00:08:43,524 --> 0:08:45,092
但为它适配多窗口之后

198
00:08:45,158 --> 0:08:49,062
你可以在Calendar

199
00:08:49,463 --> 0:08:52,199
你可以把任务从一周拖到另外一周

200
00:08:53,133 --> 0:08:57,337
在Calendar里并不需要

201
00:08:57,604 --> 0:08:59,439
这就是它已有的拖拽功能

202
00:09:00,207 --> 0:09:01,975
所以如果你的app支持拖拽功能

203
00:09:03,210 --> 0:09:04,478
和多窗口视图

204
00:09:04,545 --> 0:09:07,247
你也能拥有这种两种功能

205
00:09:07,314 --> 0:09:08,749
一并工作的超能力

206
00:09:10,450 --> 0:09:13,253
所以 就像我说的 非常厉害

207
00:09:13,320 --> 0:09:15,289
具有这个功能的app

208
00:09:15,856 --> 0:09:20,761
都能做很多有用高效的事情

209
00:09:20,827 --> 0:09:23,664
虽然我不能为所有app

210
00:09:23,730 --> 0:09:25,799
你可以自己想一想 但这些示例也许

211
00:09:26,366 --> 0:09:30,370
能概括一些你的用户的使用场景

212
00:09:33,073 --> 0:09:35,976
在开始下一个话题之前

213
00:09:36,376 --> 0:09:38,812
我们今年对比过Mac和iPad

214
00:09:39,179 --> 0:09:41,682
Mac的app都有窗口

215
00:09:42,115 --> 0:09:44,084
如果没有这个API

216
00:09:44,151 --> 0:09:45,619
这是一类怪异的Mac app

217
00:09:45,686 --> 0:09:47,221
但现在你能做到了 我们来看一下

218
00:09:48,188 --> 0:09:50,991
（创建窗口应该如何设计交互？）

219
00:09:51,058 --> 0:09:54,194
我们已经讲过了窗口

220
00:09:54,728 --> 0:09:56,964
现在 我们还是以设计的视角来看看

221
00:09:57,231 --> 0:10:00,267
你可以在你的app使用怎样的交互

222
00:09:57,231 --> 0:10:00,267
你可以在你的app使用怎样的交互

223
00:10:00,334 --> 0:10:02,069
来让用户创建新的窗口

224
00:10:04,538 --> 0:10:07,074
我们首先来看看系统提供了

225
00:10:07,140 --> 0:10:08,675
哪些功能

226
00:10:08,742 --> 0:10:12,179
然后根据已有的功能

227
00:10:12,246 --> 0:10:13,514
想一下用户的使用场景

228
00:10:14,414 --> 0:10:15,516
对于初次使用app的用户

229
00:10:15,949 --> 0:10:17,317
Craig已经展示过

230
00:10:18,585 --> 0:10:19,853
在App Expose里

231
00:10:20,120 --> 0:10:22,589
右上角一直都有一个小按钮

232
00:10:22,856 --> 0:10:24,791
那个小按钮就是用来创建新窗口的

233
00:10:25,626 --> 0:10:27,127
这就是系统提供的一个功能

234
00:10:27,628 --> 0:10:28,962
如果你想要为你的app支持多窗口

235
00:10:29,696 --> 0:10:30,631
这样你就能创建了

236
00:10:32,900 --> 0:10:34,735
还有另外一个所有app都可以

237
00:10:35,269 --> 0:10:36,703
实现的方案

238
00:10:37,171 --> 0:10:39,806
但这是一切的基础

239
00:10:40,741 --> 0:10:42,676
如果你已经打开你的app

240
00:10:43,110 --> 0:10:46,246
然后拖拽这个app的图标

241
00:10:47,614 --> 0:10:49,950
这很明显是在说

242
00:10:50,017 --> 0:10:51,752
我想要在这里创建一个新的窗口

243
00:10:52,352 --> 0:10:53,554
还有其他意思吗？

244
00:10:55,222 --> 0:10:57,124
现在我们已经拥有可以实现

245
00:10:57,191 --> 0:10:58,158
那就开动吧

246
00:10:59,059 --> 0:11:01,361
但有个问题

247
00:10:59,059 --> 0:11:01,361
但有个问题

248
00:11:01,428 --> 0:11:03,263
现在 当一个用户选择了其他选项

249
00:11:03,330 --> 0:11:04,965
比如Safari中的一个标签页

250
00:11:05,265 --> 0:11:06,767
他们拖拽这个标签页到一边

251
00:11:07,367 --> 0:11:08,869
他们觉得这样也行

252
00:11:09,837 --> 0:11:11,939
但系统并不能自动实现

253
00:11:12,606 --> 0:11:16,310
不过通过API来配置并不会很繁琐

254
00:11:16,376 --> 0:11:18,645
但是你要自己来实现这个功能

255
00:11:19,246 --> 0:11:22,282
所有拖拽动作都能延伸出这个功能

256
00:11:22,950 --> 0:11:25,085
只要用户能取出一个组件

257
00:11:25,719 --> 0:11:29,389
它就能形成一个任意类型的新窗口

258
00:11:30,457 --> 0:11:31,892
用户会觉得这样做是可行的

259
00:11:31,959 --> 0:11:32,993
所以你要支持这个功能

260
00:11:34,394 --> 0:11:37,531
一种常见的使用场景是使用

261
00:11:38,398 --> 0:11:40,200
在Mail app里面

262
00:11:41,735 --> 0:11:44,905
左边有个表单视图

263
00:11:44,972 --> 0:11:46,306
里面的每个单元格都表示一则消息

264
00:11:46,707 --> 0:11:48,775
只要一点击每个单元格

265
00:11:49,443 --> 0:11:52,079
所以当把单元格拖出表单视图时

266
00:11:52,980 --> 0:11:55,249
用户想要看到的是

267
00:11:58,051 --> 0:11:59,820
这就是拖拽的全部讲解了

268
00:11:59,887 --> 0:12:00,721
（用户直接创建行为）

269
00:11:59,887 --> 0:12:00,721
（用户直接创建行为）

270
00:12:01,722 --> 0:12:04,024
你也可以直接创建新窗口

271
00:12:04,892 --> 0:12:08,662
比如在Safari

272
00:12:09,229 --> 0:12:12,065
你可能想要支持 按住一个链接

273
00:12:12,833 --> 0:12:14,501
就有一个提示框弹出

274
00:12:14,868 --> 0:12:18,071
提示框里有个按钮

275
00:12:18,872 --> 0:12:20,541
这是在Safari里面的效果

276
00:12:21,074 --> 0:12:23,110
如字面意思一样 说在新窗口打开

277
00:12:24,611 --> 0:12:27,314
所以在UIKit的API里面

278
00:12:27,381 --> 0:12:30,384
只要你调用它

279
00:12:30,684 --> 0:12:31,718
它就能打开一个新窗口

280
00:12:32,920 --> 0:12:35,189
你可以用它来做很多事情

281
00:12:35,255 --> 0:12:37,090
比如创建一个声音识别的功能

282
00:12:37,157 --> 0:12:39,593
当我打喷嚏的时候

283
00:12:39,660 --> 0:12:42,062
它就会创建一个新的喷嚏窗口

284
00:12:42,529 --> 0:12:43,931
来分析我的喷嚏

285
00:12:43,997 --> 0:12:45,532
就像Shazam或其他类似的

286
00:12:47,267 --> 0:12:49,603
你也能做到 但会有点奇怪

287
00:12:51,772 --> 0:12:52,639
所以你最好不要那么做

288
00:12:52,706 --> 0:12:55,409
这听上去很有趣 但你知道的

289
00:12:57,511 --> 0:12:59,947
就像我们之前说的那样

290
00:13:00,447 --> 0:13:02,850
用户不应该被强制使用多窗口功能

291
00:13:02,916 --> 0:13:05,085
他们应该自己选择创建与否

292
00:13:05,552 --> 0:13:07,955
所以当用户有创建的新窗口

293
00:13:08,021 --> 0:13:09,923
的需要时 你就需要提供比如

294
00:13:10,324 --> 0:13:11,592
“在新窗口中打开”的功能

295
00:13:12,192 --> 0:13:14,561
但是这只是设计层面的构想

296
00:13:14,628 --> 0:13:17,397
所以你需要在你自己的app里实现

297
00:13:19,666 --> 0:13:22,369
关于设计 我们今天

298
00:13:22,436 --> 0:13:23,470
就聊到这里

299
00:13:23,537 --> 0:13:26,673
接下来我们来讲一下如何实现

300
00:13:27,207 --> 0:13:29,176
有请Steve Holt

301
00:13:32,279 --> 0:13:33,981
（UIScene生命周期的实现）

302
00:13:35,382 --> 0:13:36,517
谢谢大家

303
00:13:38,585 --> 0:13:39,419
谢谢Ken

304
00:13:40,187 --> 0:13:42,623
我是Steve Holt

305
00:13:43,223 --> 0:13:44,491
你今天幸运地看到了

306
00:13:44,558 --> 0:13:46,026
如何将这个新功能引入到app中的

307
00:13:46,426 --> 0:13:48,829
一些优秀的示例

308
00:13:49,496 --> 0:13:50,764
你可能在想

309
00:13:51,465 --> 0:13:53,767
你是如何在app中实现的？

310
00:13:55,235 --> 0:13:57,037
我们现在就来了解一下

311
00:13:58,505 --> 0:14:01,041
总体上来说

312
00:13:58,505 --> 0:14:01,041
总体上来说

313
00:14:01,441 --> 0:14:04,278
实现这个功能 你需要了解两个类

314
00:14:04,344 --> 0:14:05,345
（UIWindowScen和

315
00:14:05,412 --> 0:14:07,981
就是UIWindowScene

316
00:14:10,584 --> 0:14:13,887
现在 你可能很熟悉UIKit里

317
00:14:14,321 --> 0:14:17,257
你有一个屏幕

318
00:14:17,324 --> 0:14:18,325
取决于你的app

319
00:14:18,959 --> 0:14:21,228
接着 你的视图以及视图控制器

320
00:14:21,295 --> 0:14:22,529
都在窗口里面

321
00:14:23,797 --> 0:14:25,332
UIWindowScene介于

322
00:14:25,799 --> 0:14:28,268
屏幕和窗口之间

323
00:14:29,503 --> 0:14:33,207
你可以将你的窗口

324
00:14:33,874 --> 0:14:36,143
而无需从现有基础上

325
00:14:36,210 --> 0:14:37,845
强制改变你当前app

326
00:14:37,911 --> 0:14:39,513
和用户界面太多

327
00:14:43,417 --> 0:14:45,586
简单来说 一个视图

328
00:14:45,652 --> 0:14:47,154
包含了用户界面

329
00:14:47,955 --> 0:14:50,490
当你需要时 你可以向系统索取

330
00:14:51,291 --> 0:14:54,661
在你的用户界面 当用户使用拖拽

331
00:14:55,128 --> 0:14:58,332
或其他方式

332
00:14:58,398 --> 0:15:00,000
请求打开一个新窗口时

333
00:15:00,767 --> 0:15:04,204
系统会问你是否想要将UI

334
00:15:05,472 --> 0:15:06,507
接下来

335
00:15:06,974 --> 0:15:09,076
如果这个窗口应该返回至后台

336
00:15:09,643 --> 0:15:11,478
不需要有交互的必要时

337
00:15:12,746 --> 0:15:15,916
系统就会判断它是否

338
00:15:16,250 --> 0:15:18,252
只需要悬挂在那儿

339
00:15:18,318 --> 0:15:19,887
我们可以销毁这个窗口了

340
00:15:21,088 --> 0:15:24,391
当我们销毁这个场景时

341
00:15:25,826 --> 0:15:29,162
用户还是觉得那里有什么

342
00:15:29,229 --> 0:15:31,231
你的app还在转换器右侧

343
00:15:31,298 --> 0:15:32,566
之前的位置

344
00:15:33,734 --> 0:15:34,701
你需要

345
00:15:35,402 --> 0:15:38,138
不依靠某个特定的用户界面

346
00:15:39,173 --> 0:15:43,810
就能懂得转换器

347
00:15:43,877 --> 0:15:45,546
在你的app被悬挂时里面有什么

348
00:15:47,047 --> 0:15:48,549
这是SceneSession

349
00:15:48,615 --> 0:15:49,783
（从会话中连接和断开视图）

350
00:15:50,551 --> 0:15:53,687
SceneSession表示用户

351
00:15:53,754 --> 0:15:57,491
在app的最后操作的用户界面状态

352
00:15:59,159 --> 0:16:00,527
现在 他们定义了一个系统角色

353
00:15:59,159 --> 0:16:00,527
现在 他们定义了一个系统角色

354
00:16:00,861 --> 0:16:03,697
这可能是一个标准的app用户界面

355
00:16:03,764 --> 0:16:07,100
你可能是在真实的设备上运作

356
00:16:07,601 --> 0:16:09,136
或是外部的连接设备

357
00:16:11,171 --> 0:16:13,040
每次

358
00:16:13,640 --> 0:16:15,709
当一个新的窗口在系统上创建时

359
00:16:16,109 --> 0:16:18,579
你的app被app代理告知

360
00:16:19,146 --> 0:16:21,014
有一则新会话被创建了

361
00:16:21,982 --> 0:16:24,351
只要用户通过我们的API的交互

362
00:16:24,718 --> 0:16:27,187
或向上滑动销毁空间

363
00:16:27,621 --> 0:16:31,458
销毁了其中一个

364
00:16:31,925 --> 0:16:35,028
你就会收到会话被摧毁的通知

365
00:16:36,263 --> 0:16:40,434
你的app的生命周期中的

366
00:16:40,501 --> 0:16:42,636
UI窗口从先前的侧栏

367
00:16:42,936 --> 0:16:44,605
连接和断开

368
00:16:46,507 --> 0:16:49,009
现在 你app的生命周期中有

369
00:16:49,309 --> 0:16:50,511
你可能感兴趣的有趣的现象

370
00:16:53,280 --> 0:16:56,216
我们用一个图标来分析一下

371
00:16:57,784 --> 0:16:59,486
在这个app中

372
00:16:59,920 --> 0:17:02,456
有3则会话

373
00:16:59,920 --> 0:17:02,456
有3则会话

374
00:17:02,523 --> 0:17:04,858
分别代表了3个不同的系统空间

375
00:17:05,992 --> 0:17:08,194
现在 它们是断开的状态

376
00:17:08,262 --> 0:17:09,530
它们都低于后台线

377
00:17:10,230 --> 0:17:14,201
所以 我的app的状态处于后台

378
00:17:15,736 --> 0:17:19,439
现在 如果你想激活其中的一个空间

379
00:17:22,910 --> 0:17:24,310
app被连接的那个

380
00:17:25,112 --> 0:17:26,646
窗口状态线上升了

381
00:17:26,713 --> 0:17:28,182
上升到了前台活跃状态

382
00:17:29,650 --> 0:17:31,418
当我把窗口送回后台

383
00:17:32,853 --> 0:17:35,689
对应窗口的状态下降了

384
00:17:37,057 --> 0:17:39,760
如果我切换至其他两个会话

385
00:17:40,661 --> 0:17:44,831
我的app就会保持

386
00:17:44,898 --> 0:17:47,868
来说明我的app的整体状态

387
00:17:47,935 --> 0:17:48,969
没有改变

388
00:17:52,739 --> 0:17:56,143
至于你app的类

389
00:17:57,311 --> 0:18:01,582
我们习惯将用户界面、系统、

390
00:17:57,311 --> 0:18:01,582
我们习惯将用户界面、系统、

391
00:18:02,316 --> 0:18:04,751
ApplicationDelegate

392
00:18:04,818 --> 0:18:05,853
和app对象结合在一起

393
00:18:06,486 --> 0:18:08,155
这样的运作方式不在那么适用了

394
00:18:09,456 --> 0:18:10,824
所以 我们把它分开

395
00:18:12,559 --> 0:18:15,896
你的app仍然代表系统的状态

396
00:18:15,963 --> 0:18:17,698
作为一个系统过程

397
00:18:18,532 --> 0:18:21,168
ApplicationDelegate

398
00:18:21,235 --> 0:18:24,838
委派关于进程、事物等消息

399
00:18:24,905 --> 0:18:29,843
以及打开和终止app的进程

400
00:18:30,544 --> 0:18:33,881
但现在 你的窗口已经包括了

401
00:18:34,648 --> 0:18:36,517
有关于状态栏的问题吗

402
00:18:37,150 --> 0:18:38,519
你问现在的窗口

403
00:18:40,487 --> 0:18:42,589
接着你的

404
00:18:43,390 --> 0:18:45,692
在一个特殊的上下文中打开链接

405
00:18:48,061 --> 0:18:49,296
离开后台

406
00:18:49,363 --> 0:18:50,731
回到前台 等等

407
00:18:51,398 --> 0:18:54,368
当然 SceneSession

408
00:18:56,737 --> 0:18:59,706
现在 你可能觉得

409
00:19:00,941 --> 0:19:04,011
如果你的app现在有如下代码

410
00:19:04,945 --> 0:19:06,613
你要做出很大改变了

411
00:19:06,680 --> 0:19:08,815
你要将你的实现方法

412
00:19:10,117 --> 0:19:10,984
转变成这些方法

413
00:19:12,953 --> 0:19:13,954
对于其他大多数内容

414
00:19:14,755 --> 0:19:16,456
我们尽可能保持和之前一致

415
00:19:17,624 --> 0:19:19,393
app在启动时

416
00:19:19,459 --> 0:19:21,628
会话是willConnectTo

417
00:19:23,030 --> 0:19:25,232
EnterForeground

418
00:19:25,299 --> 0:19:27,868
它只是在窗口上而不是app里

419
00:19:28,502 --> 0:19:29,469
等等

420
00:19:32,206 --> 0:19:35,342
这里 有个状态重置的小问题

421
00:19:35,909 --> 0:19:37,211
它非常重要

422
00:19:38,045 --> 0:19:42,049
你的用户能查看转换器的状态

423
00:19:42,382 --> 0:19:43,951
进入一个特殊的空间

424
00:19:44,518 --> 0:19:48,222
得到他们想要的信息之后离开

425
00:19:49,790 --> 0:19:50,958
为了协助你完成

426
00:19:51,992 --> 0:19:55,929
我们从Handoff那里

427
00:19:57,097 --> 0:20:00,767
我们现在将stateRestoration

428
00:19:57,097 --> 0:20:00,767
我们现在将stateRestoration

429
00:20:01,869 --> 0:20:03,437
你可以放入任何你想要的信息

430
00:20:04,538 --> 0:20:07,140
在生命周期的许多节点上

431
00:20:07,841 --> 0:20:12,379
它会从SceneDelegate

432
00:20:13,680 --> 0:20:15,782
接着 当你的窗口复原时

433
00:20:16,049 --> 0:20:20,654
会马上将它传给连接代理的回调函数

434
00:20:22,256 --> 0:20:27,127
这时 这个特殊的会话将

435
00:20:27,995 --> 0:20:29,830
你能直接在会话中

436
00:20:29,897 --> 0:20:31,198
获取

437
00:20:31,932 --> 0:20:33,901
这样你就能从后台状态恢复过来

438
00:20:34,234 --> 0:20:35,936
需要更新一个新的窗口

439
00:20:36,270 --> 0:20:38,605
你能找到你想要改变数据的那个

440
00:20:40,908 --> 0:20:43,677
我们来看一个快速演示

441
00:20:43,744 --> 0:20:44,645
（演示 实现多窗口支持）

442
00:20:44,711 --> 0:20:47,781
来看一下

443
00:20:48,415 --> 0:20:49,283
之后是什么样子

444
00:20:56,089 --> 0:20:57,357
那么…

445
00:20:59,092 --> 0:21:02,930
我这里有个我好朋友

446
00:20:59,092 --> 0:21:02,930
我这里有个我好朋友

447
00:21:02,996 --> 0:21:04,698
我们组的同事John Ham

448
00:21:05,399 --> 0:21:08,669
他的这个app

449
00:21:09,036 --> 0:21:10,571
是我的最爱之一

450
00:21:11,238 --> 0:21:13,807
几秒钟之后 模拟器出来就能看到了

451
00:21:14,074 --> 0:21:15,008
它真的很酷

452
00:21:16,710 --> 0:21:18,078
它启动之后 你将会看到

453
00:21:19,046 --> 0:21:22,649
这是一个很酷的相册集app

454
00:21:22,716 --> 0:21:25,919
运用了集合视图和流式布局

455
00:21:27,921 --> 0:21:30,224
但我会用它来讲很重要的一点

456
00:21:30,290 --> 0:21:32,993
它真的很赞

457
00:21:33,660 --> 0:21:34,494
接下来

458
00:21:35,562 --> 0:21:38,532
我们会从一个它的一个实例入手

459
00:21:39,399 --> 0:21:42,069
来讲多窗口的实现

460
00:21:44,338 --> 0:21:46,406
因为当我使用这个app时

461
00:21:46,473 --> 0:21:47,908
我很想要

462
00:21:48,909 --> 0:21:51,678
能够同时查看多张图片

463
00:21:54,581 --> 0:21:55,682
我们再等一小会儿

464
00:21:55,749 --> 0:21:56,950
等模拟器加载完成

465
00:21:57,351 --> 0:21:58,819
好了

466
00:22:01,989 --> 0:22:03,190
我们启动app

467
00:22:05,125 --> 0:22:07,794
你看 这是一个超棒的app

468
00:22:08,395 --> 0:22:11,265
我能进入查看所有的照片

469
00:22:11,832 --> 0:22:12,900
然后返回

470
00:22:14,334 --> 0:22:15,269
现在…

471
00:22:16,103 --> 0:22:18,405
我打开它

472
00:22:18,472 --> 0:22:19,339
但在这里不行

473
00:22:19,806 --> 0:22:22,209
这是因为这个app没有多窗口视图

474
00:22:23,877 --> 0:22:26,613
所以 实现的第一步

475
00:22:28,715 --> 0:22:30,350
先进入Xcode

476
00:22:32,486 --> 0:22:33,620
在General标签这里

477
00:22:34,855 --> 0:22:37,858
找到这个新的复选框

478
00:22:39,426 --> 0:22:41,261
你猜一下我点这里会发生什么

479
00:22:44,164 --> 0:22:46,033
我们刚才略微改动了一下

480
00:22:47,234 --> 0:22:48,435
如果我们进到里面

481
00:22:49,570 --> 0:22:51,872
这里多了新的一栏

482
00:22:52,539 --> 0:22:54,208
app视图清单

483
00:22:55,142 --> 0:22:56,410
它将告知系统

484
00:22:57,444 --> 0:23:01,548
这个app支持新的生命周期界面

485
00:22:57,444 --> 0:23:01,548
这个app支持新的生命周期界面

486
00:23:02,249 --> 0:23:04,685
我们静态申明了

487
00:23:05,619 --> 0:23:09,223
我们想要使用的一类用户界面

488
00:23:10,157 --> 0:23:11,225
现在

489
00:23:11,792 --> 0:23:14,761
我提前为你打包了

490
00:23:15,295 --> 0:23:16,363
所以我们不用它

491
00:23:18,899 --> 0:23:20,067
现在我们使用

492
00:23:22,336 --> 0:23:23,370
这个

493
00:23:24,371 --> 0:23:26,173
我们完成了

494
00:23:26,240 --> 0:23:28,809
它已经在我们

495
00:23:29,309 --> 0:23:33,614
我们有一个非常基本的

496
00:23:34,147 --> 0:23:34,982
在这里

497
00:23:35,048 --> 0:23:36,283
所有的这些都是在声明

498
00:23:36,984 --> 0:23:39,987
一个窗口 它是非常基础的类

499
00:23:41,822 --> 0:23:42,890
我们构建一下 让它跑起来

500
00:23:49,396 --> 0:23:51,031
和刚开始展示的一样

501
00:23:51,932 --> 0:23:53,033
很好

502
00:23:55,035 --> 0:23:56,069
不过现在

503
00:24:02,709 --> 0:24:04,578
我来看一下是否

504
00:24:04,645 --> 0:24:08,815
我向上拖动它

505
00:24:08,882 --> 0:24:10,150
创建一个新的窗口

506
00:24:10,217 --> 0:24:12,152
就是info.plist

507
00:24:13,353 --> 0:24:14,421
不过 不幸的是

508
00:24:15,289 --> 0:24:17,424
如果我们返回到主界面

509
00:24:19,793 --> 0:24:21,295
这个app终止运行了

510
00:24:21,962 --> 0:24:22,930
接着再启动它

511
00:24:26,400 --> 0:24:29,536
它并没有返回到正常的状态

512
00:24:29,603 --> 0:24:31,738
你看这里才是

513
00:24:37,644 --> 0:24:38,846
为了修复这个问题

514
00:24:40,247 --> 0:24:41,615
我们需要做一些事情

515
00:24:42,583 --> 0:24:43,584
是可以做到的

516
00:24:45,552 --> 0:24:47,955
现在 为了在这里实现

517
00:24:48,355 --> 0:24:53,460
我们需要恢复我们已有的

518
00:24:56,697 --> 0:24:59,166
窗口会给视图从新的

519
00:24:59,666 --> 0:25:00,701
委托回调

520
00:24:59,666 --> 0:25:00,701
委托回调

521
00:25:02,336 --> 0:25:05,239
我们进一步看一下实现方法

522
00:25:06,139 --> 0:25:07,975
我们在app的实例中设置过它

523
00:25:08,308 --> 0:25:10,143
这并不是我们想要的了

524
00:25:14,915 --> 0:25:16,483
我们设置它为本地的

525
00:25:17,117 --> 0:25:19,152
窗口视图

526
00:25:23,323 --> 0:25:25,025
接着 在窗口消失之前清除状态

527
00:25:26,593 --> 0:25:30,931
现在 我们返回了用户的活动状态

528
00:25:32,132 --> 0:25:33,166
来试一下

529
00:25:36,670 --> 0:25:37,871
你看这里

530
00:25:37,938 --> 0:25:42,075
我们并没有完全实现

531
00:25:43,410 --> 0:25:45,345
在我们窗口连接前我们还需做一件事

532
00:25:51,618 --> 0:25:53,420
当窗口连接到

533
00:25:53,954 --> 0:25:55,956
我们得到了选项

534
00:25:56,623 --> 0:25:58,525
现在 在我使用的这个模版里

535
00:25:58,892 --> 0:26:01,528
我们已经通过在Handoff

536
00:25:58,892 --> 0:26:01,528
我们已经通过在Handoff

537
00:26:01,595 --> 0:26:05,199
和其他系统设置

538
00:26:05,265 --> 0:26:06,400
那寻找用户的活动

539
00:26:08,368 --> 0:26:10,604
我们想要得到这些用户活动

540
00:26:10,671 --> 0:26:12,673
因为这是用户实际操作的

541
00:26:13,974 --> 0:26:14,875
不过…

542
00:26:19,680 --> 0:26:22,816
stateRestorationActivity

543
00:26:23,383 --> 0:26:25,085
所以当你的活动不存在时

544
00:26:25,619 --> 0:26:27,120
我们会使用

545
00:26:28,222 --> 0:26:30,457
现在 我们建立并运行时

546
00:26:32,759 --> 0:26:35,395
我们修复了

547
00:26:37,965 --> 0:26:42,236
所以 这就是如何在你的app中

548
00:26:42,803 --> 0:26:43,737
非常简单

549
00:26:43,804 --> 0:26:46,540
你能使用你app中大多数原有的

550
00:26:46,607 --> 0:26:48,141
将它移动到窗口场景

551
00:26:48,775 --> 0:26:50,177
就可以了

552
00:26:51,478 --> 0:26:53,680
现在 Ken提到过的

553
00:26:53,747 --> 0:26:54,715
（APP生命周期的变动）

554
00:26:54,781 --> 0:26:58,552
拖拽物件最好的交互方法

555
00:26:59,319 --> 0:27:00,387
是使用拖拽功能

556
00:26:59,319 --> 0:27:00,387
是使用拖拽功能

557
00:27:02,222 --> 0:27:05,893
以及其他几种方法实现

558
00:27:06,326 --> 0:27:08,428
如果你使用

559
00:27:09,463 --> 0:27:11,598
声明的通用链接

560
00:27:11,999 --> 0:27:14,368
或文件目录的路径

561
00:27:14,735 --> 0:27:15,569
这是有效的

562
00:27:16,537 --> 0:27:18,172
但如果你想做一些更客制化的事情

563
00:27:19,706 --> 0:27:21,742
你也可以使用

564
00:27:22,409 --> 0:27:26,013
你可以在你已有的DragItem

565
00:27:26,413 --> 0:27:27,981
加入它

566
00:27:29,183 --> 0:27:31,084
就像拖动其他任意的app图标

567
00:27:31,852 --> 0:27:33,687
当你从系统中拖动它时

568
00:27:34,221 --> 0:27:37,591
你能得到点击物件和

569
00:27:40,494 --> 0:27:43,964
下面有请我的同事James

570
00:27:44,031 --> 0:27:45,132
（下个步骤）

571
00:27:46,266 --> 0:27:47,234
谢谢

572
00:27:52,506 --> 0:27:53,540
谢谢Steve

573
00:27:55,943 --> 0:27:57,244
总结一下这次演讲

574
00:27:57,311 --> 0:27:59,279
我还要讲三件事

575
00:28:00,013 --> 0:28:03,984
第一件是更深入了解

576
00:28:04,051 --> 0:28:04,952
（完善APP的下个步骤）

577
00:28:05,018 --> 0:28:07,087
接下来 我们来学习一些

578
00:28:07,154 --> 0:28:09,690
当你复制你app的用户界面时

579
00:28:09,756 --> 0:28:12,192
你可能见过的常见问题的一些用例

580
00:28:13,093 --> 0:28:16,763
最后 我会简短讨论一下我们为

581
00:28:16,830 --> 0:28:20,133
app添加UI支持

582
00:28:21,301 --> 0:28:24,371
所以我们来以

583
00:28:26,273 --> 0:28:28,208
回到我们早些时候的示意图

584
00:28:28,909 --> 0:28:32,846
在App Switcher里

585
00:28:33,247 --> 0:28:34,948
用户会这么想

586
00:28:35,015 --> 0:28:35,883
四个窗口

587
00:28:36,717 --> 0:28:38,585
但我鼓励你以开发人员的角度

588
00:28:38,652 --> 0:28:41,355
来想一下这些视图以及视图会话

589
00:28:42,656 --> 0:28:46,126
该区别很重要 因为

590
00:28:46,193 --> 0:28:47,861
用户在App Switcher看到的窗口

591
00:28:48,195 --> 0:28:49,863
一直都是缩略图

592
00:28:50,330 --> 0:28:53,433
这些视图不会在你的app中加载

593
00:28:56,837 --> 0:28:58,172
它们按需出现和消失

594
00:28:58,705 --> 0:29:00,741
但是会话一直都是可用的

595
00:28:58,705 --> 0:29:00,741
但是会话一直都是可用的

596
00:29:01,375 --> 0:29:02,409
因为这样的设计

597
00:29:02,476 --> 0:29:06,113
我们使用会话

598
00:29:08,115 --> 0:29:10,250
今年 我们出了一些可以用于

599
00:29:10,317 --> 0:29:12,085
多任务处理的API

600
00:29:12,486 --> 0:29:15,489
因为它们允许你以代码的方式

601
00:29:16,290 --> 0:29:18,659
在App Switcher

602
00:29:19,259 --> 0:29:22,095
或着当它们展现的文档过期时

603
00:29:22,429 --> 0:29:24,965
使用手势关闭它们

604
00:29:26,433 --> 0:29:28,502
来看一下你应该如何使用它们

605
00:29:29,002 --> 0:29:29,937
我们来看一些示例代码

606
00:29:31,572 --> 0:29:35,175
第一个是

607
00:29:35,909 --> 0:29:39,346
它能让你将app中

608
00:29:39,413 --> 0:29:41,114
已有或新的窗口移到前台

609
00:29:41,949 --> 0:29:43,884
这个例子中 我会打开一个文档

610
00:29:44,551 --> 0:29:47,554
我先检查这个文档是否

611
00:29:47,621 --> 0:29:48,689
在我的app里已有了窗口

612
00:29:48,989 --> 0:29:51,491
如果有 我将它传给这个API

613
00:29:51,558 --> 0:29:52,593
它就会被带到前台

614
00:29:53,460 --> 0:29:54,828
但如果这个文档还没被打开过

615
00:29:55,195 --> 0:29:57,297
我可以根据上下文创建一个

616
00:29:57,598 --> 0:29:59,967
NSUserActivity

617
00:30:00,367 --> 0:30:02,402
传nil给它 创建一个新的窗口

618
00:30:06,206 --> 0:30:09,076
下一个是

619
00:30:09,776 --> 0:30:11,979
当一个事件改变了

620
00:30:12,045 --> 0:30:15,315
你会在你想要收到

621
00:30:15,782 --> 0:30:17,351
或是Calendar app中

622
00:30:17,417 --> 0:30:18,785
使用这个API

623
00:30:19,620 --> 0:30:20,754
当你调用这个方法时

624
00:30:20,821 --> 0:30:23,657
UIKit将会在未来某些节点

625
00:30:23,991 --> 0:30:25,959
它会在后台连接到你的窗口

626
00:30:26,560 --> 0:30:28,195
你就能有机会改变UI

627
00:30:28,462 --> 0:30:29,830
生成一个新的缩略图

628
00:30:30,430 --> 0:30:33,300
它之后会被保存至

629
00:30:33,967 --> 0:30:36,904
你能使用它来更新

630
00:30:36,970 --> 0:30:38,071
Steve已经说明过了

631
00:30:40,574 --> 0:30:43,744
最后是

632
00:30:44,344 --> 0:30:45,646
你可以使用它来关闭一个视图

633
00:30:46,613 --> 0:30:48,615
最酷的地方在于它和

634
00:30:48,682 --> 0:30:50,817
视图…这个选项对象

635
00:30:50,884 --> 0:30:52,986
你可以为窗口关闭时

636
00:30:53,453 --> 0:30:54,988
选择一个语言动画效果

637
00:30:55,989 --> 0:30:57,958
你能在Mail的相关窗口看到

638
00:30:58,392 --> 0:30:59,793
当用户发送了一则消息

639
00:31:00,093 --> 0:31:01,762
这则消息向上跳出了屏幕

640
00:31:02,329 --> 0:31:03,864
当用户保存它为草稿时

641
00:31:04,131 --> 0:31:06,700
它会向下滑动提醒用户已被保存

642
00:31:07,935 --> 0:31:09,937
你可以在你自己的视图和app中

643
00:31:10,003 --> 0:31:10,938
使用类似的动画效果

644
00:31:12,840 --> 0:31:15,843
现在 窗口管理并不是

645
00:31:16,710 --> 0:31:18,612
我们同时也为它加入了

646
00:31:19,012 --> 0:31:21,315
在NSUserActivity里的

647
00:31:22,349 --> 0:31:23,450
我们为考虑过许多app

648
00:31:23,517 --> 0:31:26,920
这是保存状态的最简单的方式

649
00:31:27,354 --> 0:31:30,257
特别是你已经使用了类似

650
00:31:31,725 --> 0:31:33,927
我们也同时发现很多app

651
00:31:33,994 --> 0:31:35,762
已有的状态修复逻辑

652
00:31:35,829 --> 0:31:39,032
你可能并不想用

653
00:31:39,766 --> 0:31:42,402
针对这种情况 我们有一个

654
00:31:43,437 --> 0:31:46,673
现在 所有的这些

655
00:31:47,407 --> 0:31:50,077
你能很简单地在你的数据库加入它

656
00:31:50,143 --> 0:31:53,847
或在你app中

657
00:31:54,648 --> 0:31:57,451
它会成为相同视图的标识符

658
00:31:57,851 --> 0:31:59,319
每次当你的app启动时

659
00:31:59,386 --> 0:32:01,688
甚至是备份和设备里的

660
00:31:59,386 --> 0:32:01,688
甚至是备份和设备里的

661
00:32:04,024 --> 0:32:06,426
最后 这里有一个

662
00:32:06,493 --> 0:32:08,595
用来存储小体积的数据

663
00:32:08,929 --> 0:32:11,465
比如每个视图的自定义设置

664
00:32:12,232 --> 0:32:15,302
当一个侧边栏出现时

665
00:32:15,369 --> 0:32:17,604
你可能想要使用它

666
00:32:18,372 --> 0:32:20,340
从这里查找东西很棒

667
00:32:20,407 --> 0:32:24,044
你能找到你在用户默认设置值

668
00:32:24,478 --> 0:32:27,147
因为这些值你可能并不想要

669
00:32:27,214 --> 0:32:28,148
你整个app

670
00:32:30,317 --> 0:32:33,353
所以 这些就是

671
00:32:34,188 --> 0:32:35,289
下面我要讲的是

672
00:32:35,355 --> 0:32:36,456
当你使用Xcode

673
00:32:36,523 --> 0:32:38,992
构建并运行app之后

674
00:32:39,059 --> 0:32:40,294
你下一步要做什么

675
00:32:40,694 --> 0:32:42,362
当然是调试排除故障了

676
00:32:42,429 --> 0:32:43,497
（排除故障技巧）

677
00:32:43,797 --> 0:32:44,631
现在…

678
00:32:45,465 --> 0:32:47,935
你app中的很多代码都非常

679
00:32:48,001 --> 0:32:51,271
我们尽了最大的努力设计了框架

680
00:32:51,839 --> 0:32:55,042
不过 我们不能预测

681
00:32:55,108 --> 0:32:56,176
和内容

682
00:32:57,177 --> 0:32:59,213
但我们列举了一些

683
00:32:59,279 --> 0:33:00,647
我们希望你能思考一下

684
00:32:59,279 --> 0:33:00,647
我们希望你能思考一下

685
00:33:00,714 --> 0:33:01,949
你过去写过的代码

686
00:33:02,749 --> 0:33:04,585
适配这个新的生命周期

687
00:33:04,651 --> 0:33:06,787
特别是实现多窗口的功能

688
00:33:06,854 --> 0:33:08,922
可能改变了你的

689
00:33:08,989 --> 0:33:10,657
之前你构建app的想法

690
00:33:11,892 --> 0:33:13,927
现在不止一个用户界面了

691
00:33:13,994 --> 0:33:16,864
也许不再只有一个

692
00:33:16,930 --> 0:33:17,965
（每个APP都有它自身的挑战

693
00:33:18,031 --> 0:33:18,932
（测试 测试 测试 更多测试）

694
00:33:18,999 --> 0:33:22,002
当然 如果你能自动化测试

695
00:33:22,769 --> 0:33:24,771
虽然有些错误测试未必能测出来

696
00:33:24,838 --> 0:33:26,874
甚至是你的用户也不能

697
00:33:27,508 --> 0:33:29,877
因为你对自己app的

698
00:33:29,943 --> 0:33:30,944
整体构建的改变

699
00:33:31,378 --> 0:33:33,380
所以在你的用户发现问题之前

700
00:33:33,447 --> 0:33:35,849
最好的测试方法就是

701
00:33:36,383 --> 0:33:37,217
玩你的app

702
00:33:37,284 --> 0:33:39,119
你一次可以复刻两份

703
00:33:39,686 --> 0:33:40,888
这是一个检测错误的好方法

704
00:33:40,954 --> 0:33:43,924
你能马上看到一些

705
00:33:45,926 --> 0:33:48,462
现在 我准备了几个案例

706
00:33:49,129 --> 0:33:50,864
来重点讲一下你看到的经典错误

707
00:33:50,931 --> 0:33:51,832
（关注多窗口视图）

708
00:33:51,899 --> 0:33:53,800
这两者的都有特定的主题

709
00:33:54,101 --> 0:33:55,502
主题就是状态

710
00:33:56,036 --> 0:33:57,538
特别是分享状态

711
00:33:58,605 --> 0:34:00,541
现在 我猜你们一定

712
00:33:58,605 --> 0:34:00,541
现在 我猜你们一定

713
00:34:00,607 --> 0:34:03,076
在app中使用过其中的一个类

714
00:34:03,143 --> 0:34:06,380
因为它们很常见

715
00:34:07,447 --> 0:34:10,117
因为单例的属性

716
00:34:10,817 --> 0:34:13,786
你能在你的app中使用模型对象

717
00:34:13,853 --> 0:34:16,255
获取到UI设备的单例

718
00:34:16,322 --> 0:34:19,359
读取一些你正在运行的设备的配置

719
00:34:19,426 --> 0:34:20,527
这非常有用

720
00:34:21,228 --> 0:34:23,429
但这个方案也能解决问题

721
00:34:23,964 --> 0:34:26,733
因为它松散的连接着视图层和数据

722
00:34:27,100 --> 0:34:30,337
你可能会丢失你app中流动的一些

723
00:34:30,704 --> 0:34:32,005
正在被访问的数据

724
00:34:33,005 --> 0:34:35,576
但像我说的那样

725
00:34:35,641 --> 0:34:36,610
因为它们真的很便利

726
00:34:37,110 --> 0:34:39,213
事实上 我希望你们能自己

727
00:34:39,279 --> 0:34:40,681
依据情况写一些单例

728
00:34:41,648 --> 0:34:44,318
你可能使用一些并不典型的单例

729
00:34:44,585 --> 0:34:45,819
比如 一个全局变量

730
00:34:46,687 --> 0:34:50,224
或是配套元件上附带的一个单例

731
00:34:51,123 --> 0:34:53,460
或是你使用的文件系统

732
00:34:53,527 --> 0:34:57,130
它本身就是你app分享的

733
00:34:58,131 --> 0:35:00,901
这里 我并不是要告诉你如何摆脱

734
00:34:58,131 --> 0:35:00,901
这里 我并不是要告诉你如何摆脱

735
00:35:00,968 --> 0:35:02,269
或分享状态是不好的

736
00:35:02,669 --> 0:35:05,739
但我鼓励你思考你如何分享它

737
00:35:06,106 --> 0:35:07,374
或着你是否该分享它

738
00:35:08,175 --> 0:35:10,811
将你的数据分享出来有很多其他优势

739
00:35:10,878 --> 0:35:12,813
比如在单元测试中更省时

740
00:35:15,382 --> 0:35:16,583
下面我们进入到案例学习中

741
00:35:17,317 --> 0:35:19,486
第一个是状态修复

742
00:35:19,553 --> 0:35:20,654
（案例学习

743
00:35:20,721 --> 0:35:22,389
我想在介绍之前

744
00:35:22,923 --> 0:35:24,591
先展示一下这个示例app

745
00:35:25,392 --> 0:35:27,594
这是一个小型的便签编辑器

746
00:35:27,661 --> 0:35:29,229
你可以在里面输入一些文字

747
00:35:29,296 --> 0:35:30,898
当你退出重启后 内容不会消失

748
00:35:31,398 --> 0:35:33,333
我遵循了这个演示的几个步骤

749
00:35:33,400 --> 0:35:35,903
来支持多窗口视图

750
00:35:35,969 --> 0:35:36,904
效果很好

751
00:35:37,871 --> 0:35:41,074
但当我退出并重启app时

752
00:35:41,542 --> 0:35:44,444
我app的两个窗口的内容

753
00:35:44,511 --> 0:35:45,946
这不是我想要的

754
00:35:47,047 --> 0:35:48,682
所以我看了一下我的数据集

755
00:35:49,116 --> 0:35:51,218
问题非常简单

756
00:35:51,752 --> 0:35:55,589
我将这个文字文件保存在

757
00:35:56,323 --> 0:35:57,891
但我的路径只有一个

758
00:35:58,458 --> 0:36:01,662
所以我app的每个窗口保存的文件

759
00:35:58,458 --> 0:36:01,662
所以我app的每个窗口保存的文件

760
00:36:01,728 --> 0:36:03,730
都被对方重写了

761
00:36:04,598 --> 0:36:07,267
现在 UIKit并不能

762
00:36:07,334 --> 0:36:08,635
因为这是我自己app的代码

763
00:36:09,236 --> 0:36:11,238
所以我要完成两件事

764
00:36:11,872 --> 0:36:14,274
我需要为正确的窗口

765
00:36:14,341 --> 0:36:16,777
和会话视图关联持续存在的识别器

766
00:36:17,611 --> 0:36:20,514
接着更新我的逻辑

767
00:36:20,581 --> 0:36:21,548
而不是只有一份

768
00:36:23,150 --> 0:36:24,251
现在如果你保持这种惯例

769
00:36:24,718 --> 0:36:26,286
来做状态修复

770
00:36:26,553 --> 0:36:28,589
还有一件我想说的是

771
00:36:28,655 --> 0:36:30,090
清除数据

772
00:36:31,491 --> 0:36:34,428
当UIKit为你管理

773
00:36:34,862 --> 0:36:36,530
当你移除它时

774
00:36:37,064 --> 0:36:38,332
它会留意去哪里写入它

775
00:36:39,199 --> 0:36:41,134
不过当你接受到大文件

776
00:36:41,668 --> 0:36:43,670
和你的app的生命周期绑在一起时

777
00:36:44,071 --> 0:36:46,974
你接下来会想使用

778
00:36:47,040 --> 0:36:48,509
didDiscardSceneSessions API

779
00:36:49,743 --> 0:36:52,079
它被称为

780
00:36:52,946 --> 0:36:55,782
它是用来移除

781
00:36:55,849 --> 0:36:57,784
多余数据的好工具

782
00:36:58,685 --> 0:37:00,754
一个文档类型的app

783
00:36:58,685 --> 0:37:00,754
一个文档类型的app

784
00:37:00,821 --> 0:37:02,122
你不会想要删除

785
00:37:02,189 --> 0:37:03,657
文件系统里的文档

786
00:37:04,525 --> 0:37:08,262
但是配置和偏好是不需要的

787
00:37:09,329 --> 0:37:12,633
在你的app窗口中

788
00:37:12,699 --> 0:37:14,568
当用户向上滑动

789
00:37:14,902 --> 0:37:16,103
这个方法会被立刻调用

790
00:37:16,570 --> 0:37:19,806
否则 在你下一次启动时

791
00:37:20,107 --> 0:37:21,508
你将会收到多个窗口视图

792
00:37:23,777 --> 0:37:24,611
（案例学习

793
00:37:24,945 --> 0:37:27,614
下一个用户案例 我们来看一下

794
00:37:27,681 --> 0:37:30,017
是app中

795
00:37:30,083 --> 0:37:31,218
另一个非常常见的类

796
00:37:32,319 --> 0:37:33,820
UserDefaults

797
00:37:34,454 --> 0:37:36,123
这就是我在这里展示的原因

798
00:37:37,157 --> 0:37:39,626
在我app里

799
00:37:40,394 --> 0:37:41,595
当我打开它

800
00:37:41,662 --> 0:37:43,597
在屏幕底端会出现字数统计

801
00:37:44,865 --> 0:37:45,832
但不幸的是

802
00:37:45,899 --> 0:37:47,534
当我的设置视图控制器出现时

803
00:37:47,601 --> 0:37:49,636
它才会出现

804
00:37:50,404 --> 0:37:52,806
它没有在所有窗口出现

805
00:37:52,873 --> 0:37:55,175
我想要它成为我app的全局变量

806
00:37:56,610 --> 0:37:58,278
当我想它是如何发生的时候

807
00:37:58,345 --> 0:37:59,646
问题同样变得非常简单

808
00:38:00,047 --> 0:38:02,983
我有一个设置视图控制器

809
00:38:04,484 --> 0:38:05,786
只要设置有变化

810
00:38:05,853 --> 0:38:06,854
我告诉代理

811
00:38:06,920 --> 0:38:09,256
就是文字编辑视图控制器后面的

812
00:38:09,590 --> 0:38:10,824
更新了UI

813
00:38:11,625 --> 0:38:13,527
这是一个非常独立的进程

814
00:38:13,594 --> 0:38:16,630
我app的第二个窗口

815
00:38:16,697 --> 0:38:18,498
不会接收到改动的消息

816
00:38:19,967 --> 0:38:21,502
有几种结局方法

817
00:38:21,568 --> 0:38:24,271
最优雅的方法是键值监听

818
00:38:25,706 --> 0:38:27,140
两部可以实现

819
00:38:28,475 --> 0:38:32,446
第一步是通过一个扩展定义一个

820
00:38:33,046 --> 0:38:36,016
我能得到一个键的路径

821
00:38:36,817 --> 0:38:38,352
这是我的isInfoButton

822
00:38:38,852 --> 0:38:41,355
不是 是isInforBarHidden

823
00:38:41,421 --> 0:38:44,324
我利用已有的get和set方法

824
00:38:44,391 --> 0:38:45,459
UserDefaults

825
00:38:46,593 --> 0:38:48,629
接下来 我回到我注册过监听

826
00:38:48,695 --> 0:38:51,732
UserDefaults的

827
00:38:52,332 --> 0:38:54,935
它使用了我在扩展中

828
00:38:55,302 --> 0:38:57,804
只要当值改变时

829
00:38:57,871 --> 0:39:00,140
改变处理器就会开始工作

830
00:38:57,871 --> 0:39:00,140
改变处理器就会开始工作

831
00:39:02,042 --> 0:39:05,012
重要的是我也向这个注册器

832
00:39:05,612 --> 0:39:06,847
传了选项的初始值

833
00:39:07,581 --> 0:39:08,882
这非常酷

834
00:39:08,949 --> 0:39:11,885
只要我创建它

835
00:39:12,319 --> 0:39:15,255
这意味着我无需再重复这段代码

836
00:39:15,789 --> 0:39:18,692
当我的视图加载完成后

837
00:39:19,059 --> 0:39:20,794
我无需调用这个方法

838
00:39:21,228 --> 0:39:22,462
关于展示的正确与否

839
00:39:22,529 --> 0:39:24,131
只有一条真理/b&gt;

840
00:39:25,032 --> 0:39:27,100
这是确保你app的界面

841
00:39:27,167 --> 0:39:28,001
是否连贯的好方法

842
00:39:30,337 --> 0:39:31,772
现在 一切都很完美

843
00:39:35,209 --> 0:39:36,710
希望我们能给予你

844
00:39:36,777 --> 0:39:38,779
一些app上面的灵感

845
00:39:39,913 --> 0:39:43,217
如果你的app已经做得很好了

846
00:39:43,283 --> 0:39:45,819
你也许已经使用了这些方法

847
00:39:47,254 --> 0:39:48,689
说到最佳实践

848
00:39:49,122 --> 0:39:52,025
我想要聊一下UIApplication

849
00:39:53,527 --> 0:39:54,661
Steve提到过

850
00:39:54,728 --> 0:39:57,764
我们给用户界面状态划分了不同职责

851
00:39:58,198 --> 0:40:00,767
通过UIApplicationDelegateand

852
00:39:58,198 --> 0:40:00,767
通过UIApplicationDelegateand

853
00:40:01,802 --> 0:40:05,272
我们也划分了

854
00:40:06,473 --> 0:40:09,176
现在你能在app中拥有多个窗口

855
00:40:09,243 --> 0:40:10,544
同时可见

856
00:40:10,844 --> 0:40:13,080
其中一个能使用浅色状态内容

857
00:40:13,514 --> 0:40:15,015
其中一个能使用深色状态内容

858
00:40:15,549 --> 0:40:16,917
只返回一个结果

859
00:40:16,984 --> 0:40:19,486
对我们来说不合理

860
00:40:20,153 --> 0:40:21,288
因此

861
00:40:21,355 --> 0:40:23,657
我们不建议在UIApplication

862
00:40:23,724 --> 0:40:25,559
窗口视图有一些新的可以尝试

863
00:40:27,160 --> 0:40:29,229
我们鼓励你使用这些新的属性

864
00:40:29,496 --> 0:40:32,432
甚至是今年没有打算

865
00:40:32,866 --> 0:40:35,536
因为它会引导你进入正确的构思

866
00:40:38,438 --> 0:40:39,406
我们今天讲了很多

867
00:40:39,873 --> 0:40:41,108
所以我来简短做个总结

868
00:40:42,142 --> 0:40:44,945
最开始 Ken带大家使用了

869
00:40:45,345 --> 0:40:47,014
我们今年加入的很多强大

870
00:40:47,080 --> 0:40:48,649
的新功能 重新构思了ApP

871
00:40:48,715 --> 0:40:50,117
（总结 多任务处理的新功能合集）

872
00:40:50,184 --> 0:40:52,953
我觉得用户真的会想要

873
00:40:53,020 --> 0:40:54,421
因为它们有用且方便

874
00:40:54,488 --> 0:40:55,355
（用户会期待这些交互行为）

875
00:40:55,422 --> 0:40:57,524
因此我鼓励你采用它们

876
00:40:58,125 --> 0:40:59,159
（在已有或新APP中简单集成）

877
00:40:59,226 --> 0:41:02,496
我们创建这个API来让

878
00:40:59,226 --> 0:41:02,496
我们创建这个API来让

879
00:41:02,829 --> 0:41:06,567
我们为新的app推荐的最佳实践

880
00:41:06,633 --> 0:41:09,736
事实上 它将成为

881
00:41:09,803 --> 0:41:11,271
使用UI视图生命周期

882
00:41:11,905 --> 0:41:13,140
（多数问题的解决办法很简单）

883
00:41:13,941 --> 0:41:15,142
我也想鼓励你

884
00:41:15,209 --> 0:41:17,678
因为当你在为新的生命周期做适配时

885
00:41:17,744 --> 0:41:19,746
会遇到一些问题

886
00:41:19,813 --> 0:41:21,849
问题的解决方案可能很简单

887
00:41:21,915 --> 0:41:26,320
包括在之前的WWDC

888
00:41:26,920 --> 0:41:28,021
（使用UIWindownScene来代替

889
00:41:28,322 --> 0:41:30,324
最后 我想鼓励你们移除

890
00:41:30,390 --> 0:41:34,027
现在已不太适用的UIApplication

891
00:41:34,494 --> 0:41:37,564
当你升级到iOS 13时

892
00:41:37,631 --> 0:41:38,699
所有这些都可使用

893
00:41:39,199 --> 0:41:41,869
你不必因为多窗口的优势而一定

894
00:41:43,570 --> 0:41:45,539
这周我们还有几次

895
00:41:45,606 --> 0:41:47,674
关于多任务处理进阶的演讲

896
00:41:48,642 --> 0:41:50,377
以及这周的一些实验室活动

897
00:41:51,078 --> 0:41:53,981
包括了周四的多任务处理的内容

898
00:41:54,047 --> 0:41:56,016
（更多信息请访问

899
00:41:56,083 --> 0:41:57,551
谢谢大家今天的聆听

900
00:41:57,618 --> 0:41:58,919
祝大家度过愉快的一周
