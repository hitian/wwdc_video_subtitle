1
00:00:06,173 --> 0:00:07,207
（Core Haptics介绍）

2
00:00:07,274 --> 0:00:09,776
我是Michael Diu

3
00:00:10,043 --> 0:00:11,512
我将和你一起来

4
00:00:11,578 --> 0:00:15,015
关于触觉的一些进阶功能

5
00:00:15,682 --> 0:00:17,084
我们来看下议程

6
00:00:19,052 --> 0:00:22,256
首先 我们来讲一下

7
00:00:22,322 --> 0:00:26,059
它是如何与其他音频和触觉

8
00:00:26,126 --> 0:00:27,427
（使用Core Haptics

9
00:00:27,494 --> 0:00:28,328
（展示内容）

10
00:00:28,395 --> 0:00:31,932
我们来看一下API里面的两组类

11
00:00:31,999 --> 0:00:35,936
我们为描述触觉和音频内容

12
00:00:36,003 --> 0:00:39,072
使用的基本范围和描述符

13
00:00:40,674 --> 0:00:42,643
我们以基本的方法来

14
00:00:42,709 --> 0:00:44,611
说明其内容

15
00:00:44,678 --> 0:00:45,779
（触觉初体验）

16
00:00:46,413 --> 0:00:50,184
接下来 我们来介绍动态参数

17
00:00:50,250 --> 0:00:52,386
你可以在你的app中

18
00:00:52,452 --> 0:00:56,456
触觉反馈形式来给予用户使用

19
00:00:56,523 --> 0:01:00,427
你app时的反馈

20
00:00:56,523 --> 0:01:00,427
你app时的反馈

21
00:01:00,494 --> 0:01:01,695
（动态参数）

22
00:01:01,762 --> 0:01:06,533
以及 我们会探讨一种表现 存储

23
00:01:06,600 --> 0:01:09,036
和分享你的音频触觉内容的新方式

24
00:01:09,102 --> 0:01:14,041
我们称之为Apple触觉音频样式

25
00:01:14,107 --> 0:01:15,475
（Apple触觉

26
00:01:15,542 --> 0:01:16,443
所以我们开始吧

27
00:01:21,014 --> 0:01:21,849
（使用Core Haptics

28
00:01:21,915 --> 0:01:23,917
首先 什么是

29
00:01:23,984 --> 0:01:25,085
（什么是

30
00:01:25,152 --> 0:01:30,057
我们认为它是iPhone上的

31
00:01:30,123 --> 0:01:31,158
音频和触觉渲染API

32
00:01:31,825 --> 0:01:33,026
或音响合成器

33
00:01:34,828 --> 0:01:38,832
我们和Core Haptics

34
00:01:38,899 --> 0:01:43,237
音频、触觉和反馈的API

35
00:01:43,303 --> 0:01:45,506
比如AVAudioPlayer、

36
00:01:46,974 --> 0:01:47,875
你可能在想

37
00:01:48,775 --> 0:01:50,344
“哪种型号的iPhone

38
00:01:50,944 --> 0:01:52,479
（设备支持）

39
00:01:52,546 --> 0:01:55,782
从iPhone 8开始

40
00:01:56,083 --> 0:01:59,219
所有的设备都支持触觉驱动

41
00:01:59,520 --> 0:02:03,991
只需一个API和一种文件格式

42
00:01:59,520 --> 0:02:03,991
只需一个API和一种文件格式

43
00:02:04,758 --> 0:02:05,792
同其他产品一样

44
00:02:06,660 --> 0:02:07,828
我们将你的触觉模式

45
00:02:07,895 --> 0:02:11,131
都统一了

46
00:02:11,198 --> 0:02:15,402
这样 你只需创作原型和发布了

47
00:02:15,469 --> 0:02:17,271
一个产品

48
00:02:19,806 --> 0:02:20,641
以及

49
00:02:21,475 --> 0:02:25,946
这些iPhone不仅适配了旧的

50
00:02:26,213 --> 0:02:28,882
它们都具备Apple设计的

51
00:02:28,949 --> 0:02:35,222
它能给你带来结合了多种特质

52
00:02:35,289 --> 0:02:39,760
以及细节设计

53
00:02:41,461 --> 0:02:43,830
接下来 我们来聊聊

54
00:02:43,897 --> 0:02:47,234
你们中已经在iPhone

55
00:02:47,534 --> 0:02:50,370
来集成了触觉功能的人

56
00:02:51,638 --> 0:02:52,706
（上下文中的

57
00:02:52,773 --> 0:02:56,844
现在 Core Haptics

58
00:02:57,377 --> 0:02:58,378
（选择正确的

59
00:02:58,445 --> 0:02:59,413
在多数情况

60
00:02:59,479 --> 0:03:01,949
你想要继续使用

61
00:02:59,479 --> 0:03:01,949
你想要继续使用

62
00:03:02,015 --> 0:03:06,587
特别是添加触觉来控制UIKit

63
00:03:07,187 --> 0:03:08,422
使用这个API

64
00:03:08,689 --> 0:03:11,625
你为你的事件指派了设计意图

65
00:03:11,692 --> 0:03:15,562
无论是一个选择 撞击或一则通知

66
00:03:15,629 --> 0:03:17,931
你让别人 Apple

67
00:03:18,198 --> 0:03:21,268
担心开发一个词汇来表达

68
00:03:21,335 --> 0:03:25,939
和混合正确的形式

69
00:03:26,006 --> 0:03:27,574
来传达消息

70
00:03:28,609 --> 0:03:31,612
现在 iOS 13上

71
00:03:31,678 --> 0:03:34,681
你可以查看文档来了解更多信息

72
00:03:36,550 --> 0:03:39,820
相比之下

73
00:03:39,887 --> 0:03:43,757
当你向要自己设计

74
00:03:44,391 --> 0:03:46,760
使用它 你就能自己设计样式

75
00:03:47,027 --> 0:03:51,498
你能自己控制很多使用时候的细节

76
00:03:51,565 --> 0:03:56,937
你可以与其他API一同使用

77
00:03:57,004 --> 0:03:59,840
或AVAudioEngine

78
00:04:00,741 --> 0:04:04,311
你有非常丰富的播放和控制设置

79
00:04:05,145 --> 0:04:08,649
现在 UIKit的底层包括

80
00:04:08,715 --> 0:04:14,054
所以 API之间的使用性能是

81
00:04:14,621 --> 0:04:15,455
现在...

82
00:04:16,990 --> 0:04:20,928
设计你自己的

83
00:04:20,994 --> 0:04:24,598
但是 当考虑到它允许你实现的效果

84
00:04:24,665 --> 0:04:28,969
以及让你的app变得与众不同

85
00:04:29,303 --> 0:04:30,671
这是值得去做的

86
00:04:31,305 --> 0:04:35,042
接下来 我来讲一下音效的性能

87
00:04:35,409 --> 0:04:36,743
（触觉和音效之间的关系）

88
00:04:36,810 --> 0:04:40,180
Core Haptics

89
00:04:40,247 --> 0:04:43,183
它和触碰行为结合一起

90
00:04:43,250 --> 0:04:48,589
允许你同步播放短的

91
00:04:48,655 --> 0:04:50,490
合成的或客制化波形音效

92
00:04:51,658 --> 0:04:54,561
这类音效触觉结合

93
00:04:54,628 --> 0:04:57,164
触觉体验是至关重要的

94
00:04:57,231 --> 0:04:59,800
比如iPhone 7的

95
00:05:01,101 --> 0:05:03,270
Series 4 Watch的

96
00:05:04,204 --> 0:05:05,439
和UIDatePicker

97
00:05:05,506 --> 0:05:08,775
当你选择日期、时间和闹钟时

98
00:05:08,842 --> 0:05:10,744
滚动的轮子

99
00:05:11,445 --> 0:05:13,280
你可能并没有意识到

100
00:05:13,847 --> 0:05:17,017
你可能甚至没有注意到

101
00:05:17,084 --> 0:05:20,521
不过 如果你关闭了音效

102
00:05:20,587 --> 0:05:24,591
你会意识到使用过程中

103
00:05:24,858 --> 0:05:25,692
所以现在...

104
00:05:26,126 --> 0:05:29,263
你可以在自己的app中使用

105
00:05:29,329 --> 0:05:32,199
我想来聊一下某些类型的app

106
00:05:32,266 --> 0:05:34,434
一类会大量使用到

107
00:05:34,501 --> 0:05:36,570
Core Haptics的app

108
00:05:36,937 --> 0:05:38,005
那就是游戏了

109
00:05:38,639 --> 0:05:39,840
（游戏app）

110
00:05:39,907 --> 0:05:43,577
想象我们在赛跑

111
00:05:43,844 --> 0:05:44,678
我们来想象一下

112
00:05:49,416 --> 0:05:52,386
当你在app中想要表现

113
00:05:52,452 --> 0:05:56,089
爆炸和隆隆响的效果时

114
00:05:56,156 --> 0:05:59,326
可以同时使用触觉和音效来传达

115
00:06:00,594 --> 0:06:01,428
另一个非常好的app

116
00:06:02,196 --> 0:06:06,700
是模仿我们身体接触

117
00:06:06,767 --> 0:06:09,503
来让你的app更具真实感

118
00:06:10,204 --> 0:06:11,405
思考一个网球游戏

119
00:06:12,139 --> 0:06:15,275
你可以用到声音和触觉组件

120
00:06:15,876 --> 0:06:18,512
声音的大小 触摸的强度

121
00:06:18,579 --> 0:06:21,081
和你的摆幅的速度成正比

122
00:06:21,148 --> 0:06:24,051
或是球在球拍中的位置

123
00:06:24,117 --> 0:06:28,622
你甚至可以控制撞击后

124
00:06:28,689 --> 0:06:29,923
球拍的弦共振声的长度

125
00:06:31,892 --> 0:06:34,695
另一种使用

126
00:06:34,761 --> 0:06:36,730
是增强现实类的app

127
00:06:37,664 --> 0:06:38,699
（Core Haptics

128
00:06:38,765 --> 0:06:40,701
如果你在这个领域从事工作

129
00:06:40,767 --> 0:06:45,205
你应该清楚高视觉保真

130
00:06:45,272 --> 0:06:46,106
和

131
00:06:47,241 --> 0:06:49,676
3D音效一起带来的身临其境的好处

132
00:06:49,743 --> 0:06:53,380
现在 我们能更一步实现

133
00:06:53,780 --> 0:06:59,887
依据用户的肢体动作来自定义

134
00:07:01,722 --> 0:07:06,760
或是对app的反应 设备

135
00:07:06,827 --> 0:07:10,030
比如 移动你的设备或四处移动

136
00:07:11,398 --> 0:07:13,367
你的所有用户

137
00:07:15,903 --> 0:07:17,004
作为一个灵感

138
00:07:17,070 --> 0:07:20,207
今年 我们增强了

139
00:07:20,541 --> 0:07:27,181
通过使用触觉来调节拉弹弓的速度

140
00:07:28,282 --> 0:07:30,450
你拉回手机的速度

141
00:07:30,951 --> 0:07:34,555
拉回时你会感受到紧张感

142
00:07:34,621 --> 0:07:37,658
当你释放时会感受到满意的转换

143
00:07:38,725 --> 0:07:40,460
我想给你们展示一段视频

144
00:07:40,994 --> 0:07:44,131
我将会使用音效来体现触觉感受

145
00:07:44,198 --> 0:07:45,265
那就是你将会感受到的

146
00:07:45,599 --> 0:07:47,367
它们听起来是这样的

147
00:07:51,104 --> 0:07:53,640
现在 我们来看整个过程

148
00:07:53,941 --> 0:07:55,576
视觉和触觉...

149
00:07:56,543 --> 0:07:57,678
不是一般的音效

150
00:08:02,683 --> 0:08:07,154
这就是我们同时使用触觉

151
00:08:08,021 --> 0:08:09,022
声音和视觉

152
00:08:09,089 --> 0:08:12,793
来增强AR体验的一个例子

153
00:08:12,860 --> 0:08:15,195
还有更多的一些app

154
00:08:15,262 --> 0:08:19,032
游戏和AR通过使用触觉感官

155
00:08:19,099 --> 0:08:21,168
和音效做出有创意的探索

156
00:08:21,635 --> 0:08:24,271
我知道你也能想到很多

157
00:08:27,574 --> 0:08:32,212
现在 我们来看

158
00:08:32,479 --> 0:08:33,447
来表达我们的内容

159
00:08:36,416 --> 0:08:38,986
Core Haptics

160
00:08:39,052 --> 0:08:44,191
它们中一种用来展现你的内容

161
00:08:44,258 --> 0:08:45,893
（内容类 播放类）

162
00:08:45,959 --> 0:08:48,862
我们先来看一下内容类

163
00:08:49,463 --> 0:08:50,731
（事件、参数和模式）

164
00:08:50,797 --> 0:08:55,435
Core Haptics中

165
00:08:55,502 --> 0:08:57,204
被称为CHHapticEvent

166
00:08:57,771 --> 0:09:01,775
现在 每个事件都有

167
00:08:57,771 --> 0:09:01,775
现在 每个事件都有

168
00:09:01,842 --> 0:09:05,879
根据不同的需要

169
00:09:07,281 --> 0:09:11,351
这些事件可以部分重叠

170
00:09:12,452 --> 0:09:16,156
所有的事件都归为一类模式

171
00:09:17,224 --> 0:09:21,195
接下来 我想要谈谈我们的

172
00:09:23,163 --> 0:09:26,099
第一类称为

173
00:09:26,533 --> 0:09:29,903
我觉得

174
00:09:29,970 --> 0:09:33,674
它是一个击打动作

175
00:09:34,074 --> 0:09:36,777
我们还有两种连续的类型

176
00:09:36,844 --> 0:09:37,678
（事件类型）

177
00:09:37,744 --> 0:09:40,747
是HapticContinuous类

178
00:09:41,048 --> 0:09:45,118
这个 我觉得 像是拉动弦乐器的弓

179
00:09:45,385 --> 0:09:48,355
它不是短暂的

180
00:09:48,422 --> 0:09:50,991
它能被用作 比如 背景纹理

181
00:09:51,058 --> 0:09:53,861
它有你能操作的更多控件

182
00:09:53,927 --> 0:09:56,496
比如 控制它的共振声

183
00:09:57,497 --> 0:10:00,767
最后

184
00:09:57,497 --> 0:10:00,767
最后

185
00:10:00,834 --> 0:10:03,871
我之前提到过

186
00:10:03,937 --> 0:10:06,673
你能和触觉感知

187
00:10:07,007 --> 0:10:09,176
一起同步回放

188
00:10:10,077 --> 0:10:11,378
你自己的音效

189
00:10:12,613 --> 0:10:16,683
接下来 我们来讲一下它们的

190
00:10:18,151 --> 0:10:20,020
（我们的第一个事件参数）

191
00:10:20,087 --> 0:10:23,590
我们的第一个事件参数叫做

192
00:10:24,157 --> 0:10:27,528
它有一个模拟音频和音频音量

193
00:10:27,594 --> 0:10:29,363
你可能已经非常熟悉了

194
00:10:30,430 --> 0:10:34,601
现在 你从没有输出

195
00:10:34,668 --> 0:10:37,838
当你把滑块从0调到1

196
00:10:37,905 --> 0:10:40,174
变成了系统输出最大值

197
00:10:41,475 --> 0:10:44,745
我们下一个参数是

198
00:10:44,811 --> 0:10:47,848
HapticSharpness

199
00:10:47,915 --> 0:10:52,252
它既没有实体的类比物

200
00:10:52,319 --> 0:10:54,421
（HapticsSHARPNESS）

201
00:10:54,488 --> 0:10:55,322
在这个...

202
00:10:55,956 --> 0:10:57,858
世界 我希望你不要

203
00:10:57,925 --> 0:11:00,794
向知觉空间前进

204
00:10:57,925 --> 0:11:00,794
向知觉空间前进

205
00:11:01,128 --> 0:11:01,962
从一开始...

206
00:11:02,229 --> 0:11:05,699
一个非常圆和自然的0

207
00:11:06,767 --> 0:11:10,170
到最后更加简洁和清晰的1

208
00:11:10,637 --> 0:11:13,207
为了解释得更加清楚

209
00:11:13,907 --> 0:11:16,677
我要使用iOS 12上的一些例子

210
00:11:18,178 --> 0:11:20,447
锁屏上的闪光灯

211
00:11:20,514 --> 0:11:24,351
是一个非常高级别的触觉感受

212
00:11:26,353 --> 0:11:27,254
以及...

213
00:11:27,321 --> 0:11:32,793
App Switcher

214
00:11:32,860 --> 0:11:34,261
低级别的触觉感知

215
00:11:36,330 --> 0:11:37,497
为什么如此设计呢

216
00:11:37,564 --> 0:11:42,870
为什么会有两种类型的体验

217
00:11:42,936 --> 0:11:47,474
我会在音频触觉设计的演讲上告诉你

218
00:11:48,909 --> 0:11:52,980
现在 我们有几个多类型的事件参数

219
00:11:53,046 --> 0:11:56,517
音效的pitch和pan

220
00:11:56,583 --> 0:11:57,784
对于触觉来说

221
00:11:57,851 --> 0:12:01,088
我们能让你改变这些共振等等

222
00:11:57,851 --> 0:12:01,088
我们能让你改变这些共振等等

223
00:12:01,154 --> 0:12:02,055
是这两个...

224
00:12:02,923 --> 0:12:06,426
就足够我们使用了

225
00:12:08,395 --> 0:12:13,000
现在 为了研究如何控制

226
00:12:13,066 --> 0:12:15,135
的动态范围和精度

227
00:12:15,869 --> 0:12:17,404
我们有一段示例代码

228
00:12:18,172 --> 0:12:20,774
调色板 它能允许你

229
00:12:21,942 --> 0:12:23,577
自己尝试体验这种感觉

230
00:12:23,644 --> 0:12:27,147
当你移动 点击或是拖动手指

231
00:12:27,681 --> 0:12:32,486
你会接触到强度的轴和清晰度的轴

232
00:12:32,553 --> 0:12:34,454
当你操作时 它会提供相应的

233
00:12:34,521 --> 0:12:37,991
持续或短暂的触碰体验

234
00:12:38,659 --> 0:12:41,828
这会帮你找到直觉

235
00:12:44,298 --> 0:12:45,933
（触觉初体验）

236
00:12:45,999 --> 0:12:51,104
以上是Core Haptics

237
00:12:51,171 --> 0:12:53,740
以及如何展示我们的内容

238
00:12:54,041 --> 0:12:57,711
有请我们Core Haptics

239
00:12:57,778 --> 0:12:59,379
来为我们介绍

240
00:13:00,047 --> 0:13:01,815
播放Core Haptics

241
00:13:02,249 --> 0:13:03,550
播放相应的模式

242
00:13:03,617 --> 0:13:06,453
和将Core Haptics

243
00:13:06,520 --> 0:13:07,588
请欢迎Doug

244
00:13:10,891 --> 0:13:11,859
谢谢Michael

245
00:13:12,693 --> 0:13:13,660
大家晚上好

246
00:13:13,727 --> 0:13:18,599
我非常高兴能在这里和大家交流集成

247
00:13:18,665 --> 0:13:20,200
到你的app中

248
00:13:22,202 --> 0:13:24,972
在我展示演示和示例代码之前

249
00:13:25,038 --> 0:13:28,242
我们来回顾一下

250
00:13:28,308 --> 0:13:30,210
使用触觉感知模式的几个步骤

251
00:13:32,946 --> 0:13:35,716
第一步是创建内容

252
00:13:35,782 --> 0:13:37,718
因为它能在任何节点创建

253
00:13:37,784 --> 0:13:39,953
在你需要使用它之前创建

254
00:13:40,354 --> 0:13:45,058
在这个例子中 我们在触觉模式中

255
00:13:45,125 --> 0:13:46,426
这个词典是我们

256
00:13:46,493 --> 0:13:49,429
在app里存储的资源的一部分

257
00:13:50,197 --> 0:13:51,665
我们之后会看到

258
00:13:51,732 --> 0:13:55,169
模式也能在它们播放之前被创建

259
00:13:55,235 --> 0:13:58,572
如果在你的app中它们需要

260
00:13:58,639 --> 0:13:59,806
非常多的互动来回应改变

261
00:13:59,873 --> 0:14:01,875
（播放一个触觉模式：推荐的模式）

262
00:13:59,873 --> 0:14:01,875
（播放一个触觉模式：推荐的模式）

263
00:14:01,942 --> 0:14:05,245
下一步就是创建一个触觉引擎的实例

264
00:14:05,846 --> 0:14:06,680
这需要在你的app知道

265
00:14:06,747 --> 0:14:10,617
它会使用触觉功能之前完成

266
00:14:12,553 --> 0:14:15,656
接下来 你为你的触觉模式

267
00:14:15,989 --> 0:14:18,992
每个播放器都与一个模式关联在一起

268
00:14:19,059 --> 0:14:20,928
和一个特别的触觉引擎

269
00:14:23,697 --> 0:14:24,865
启动触觉引擎

270
00:14:24,932 --> 0:14:28,302
告知系统来初始化音效和触觉硬件

271
00:14:28,368 --> 0:14:31,605
做好播放模式的准备

272
00:14:33,774 --> 0:14:36,543
在你app要开始播放模式的瞬间

273
00:14:36,610 --> 0:14:37,911
你启动了播放器

274
00:14:38,345 --> 0:14:40,280
这可以用两种模式完成

275
00:14:40,347 --> 0:14:43,750
第一种 是快速模式

276
00:14:43,817 --> 0:14:46,420
告诉系统我想要这个模式在

277
00:14:46,486 --> 0:14:49,823
最短延时内立刻播放

278
00:14:50,524 --> 0:14:54,995
第二种 是预定模式

279
00:14:55,062 --> 0:14:57,731
告诉系统你想要

280
00:14:57,798 --> 0:15:00,667
和一些其他的系统 比如

281
00:14:57,798 --> 0:15:00,667
和一些其他的系统 比如

282
00:15:00,734 --> 0:15:04,471
或是游戏事件和图形事件一起

283
00:15:08,275 --> 0:15:10,944
如果你想要知道你的模式

284
00:15:11,011 --> 0:15:13,881
你能让触觉引擎通过回调函数通知你

285
00:15:13,947 --> 0:15:16,149
当你的播放器都播放完成时

286
00:15:17,885 --> 0:15:20,587
这里 引擎向app发送请求

287
00:15:21,588 --> 0:15:24,458
app现在选择停止触觉引擎

288
00:15:24,525 --> 0:15:27,361
或继续使用下一个触觉引擎

289
00:15:28,929 --> 0:15:30,397
这些是基本的步骤

290
00:15:30,464 --> 0:15:34,334
现在 我们来看一个

291
00:15:36,370 --> 0:15:39,806
在这之前 我来向你们秘密展示

292
00:15:40,474 --> 0:15:44,478
一个使用了集成触觉反馈的API的

293
00:15:44,545 --> 0:15:46,880
一个特殊的问题

294
00:15:47,381 --> 0:15:48,982
观众们可能感受不到

295
00:15:49,750 --> 0:15:52,553
我们处理它的方式是为每一个

296
00:15:52,619 --> 0:15:54,588
触觉事件的输出添加一个音效同等物

297
00:15:54,655 --> 0:15:57,491
这样你就会听到触碰后的音效了

298
00:15:57,558 --> 0:15:58,392
（演示）

299
00:16:00,827 --> 0:16:03,564
这个app使用了一个

300
00:16:03,630 --> 0:16:07,067
通过加速传感器在屏幕中移动球

301
00:16:09,002 --> 0:16:11,305
它集成了触感和音效反馈

302
00:16:11,371 --> 0:16:13,740
当球触碰到屏幕边缘时

303
00:16:14,141 --> 0:16:16,476
用户会有撞击

304
00:16:16,543 --> 0:16:18,979
到游戏墙的边缘的感觉

305
00:16:19,046 --> 0:16:20,914
球撞击边缘越重

306
00:16:20,981 --> 0:16:23,984
触觉的强度则更大

307
00:16:26,253 --> 0:16:27,354
好的

308
00:16:27,421 --> 0:16:30,224
我们来看一下这个示例代码如何将

309
00:16:30,290 --> 0:16:32,593
集成至app的

310
00:16:32,893 --> 0:16:35,529
我们来看事件参数是如何被用来

311
00:16:35,596 --> 0:16:38,131
改变触觉和音效的

312
00:16:38,932 --> 0:16:40,667
这个例子 所有的代码

313
00:16:40,734 --> 0:16:42,936
是从网上下载的示例代码

314
00:16:43,003 --> 0:16:46,173
但它已被编辑过 只展示重要的部分

315
00:16:46,240 --> 0:16:47,241
（使用Core Haptics API）

316
00:16:48,242 --> 0:16:50,911
首先 我们导入

317
00:16:50,978 --> 0:16:53,914
和其他我们app需要的模块

318
00:16:57,384 --> 0:17:01,121
CHHapticEngine被声明为

319
00:16:57,384 --> 0:17:01,121
CHHapticEngine被声明为

320
00:17:01,188 --> 0:17:03,223
因为我们想要控制它的生命周期

321
00:17:03,290 --> 0:17:05,992
让它在app的整个生命周期都存在

322
00:17:08,127 --> 0:17:10,263
就像我们之前在流程图讨论过的

323
00:17:10,329 --> 0:17:13,767
我们在使用触觉引擎之前就设置好它

324
00:17:13,834 --> 0:17:17,704
这里 我们调用一个视图

325
00:17:20,174 --> 0:17:21,942
在这个协助方法里 我们开始

326
00:17:22,009 --> 0:17:24,678
通过创建一个触觉引擎的实例

327
00:17:24,744 --> 0:17:26,413
来检查可能存在的错误

328
00:17:26,914 --> 0:17:29,016
这个引擎被分配到我们的成员变量

329
00:17:29,082 --> 0:17:30,517
所以我们能一直保留它

330
00:17:32,419 --> 0:17:36,523
它是可选的 但是分配一个闭包

331
00:17:36,590 --> 0:17:39,159
给引擎的stoppedHandler属性

332
00:17:39,426 --> 0:17:42,196
如果引擎因为app本身之外的

333
00:17:42,262 --> 0:17:45,699
行为停止运作了

334
00:17:45,766 --> 0:17:47,601
可能的原因有

335
00:17:47,668 --> 0:17:51,839
音效会话中断或app被终止运行了

336
00:17:54,074 --> 0:17:56,810
我们启用触觉引擎来完成这个方法

337
00:17:56,877 --> 0:17:58,679
以及检查可能存在的错误

338
00:17:59,346 --> 0:18:00,848
这个引擎会持续运作

339
00:17:59,346 --> 0:18:00,848
这个引擎会持续运作

340
00:18:00,914 --> 0:18:04,751
直到app或外部行为让它停止

341
00:18:05,819 --> 0:18:07,721
请留意app会持续关注

342
00:18:07,788 --> 0:18:10,457
引擎是否需要重启

343
00:18:11,225 --> 0:18:14,628
通常 只要屏幕有可见的视图

344
00:18:14,695 --> 0:18:17,531
就会有触觉交互行为

345
00:18:17,598 --> 0:18:19,666
你可能会让引擎一直保持运行

346
00:18:24,404 --> 0:18:26,073
这里是简单的物理引擎

347
00:18:26,139 --> 0:18:27,608
在app中的位置

348
00:18:27,674 --> 0:18:30,477
它让我们知道球碰到了墙

349
00:18:30,811 --> 0:18:34,214
在这个例子中 我们想要

350
00:18:34,548 --> 0:18:37,251
来和球的速度产生交互行为

351
00:18:37,317 --> 0:18:41,355
所以模式播放器和它的模式

352
00:18:43,924 --> 0:18:46,393
这个方法负责创建

353
00:18:46,460 --> 0:18:48,996
响应播放球的碰撞模式

354
00:18:49,563 --> 0:18:52,332
在这里 我们会创建一个

355
00:18:52,399 --> 0:18:54,568
一个触觉和一个音效

356
00:18:56,203 --> 0:18:59,406
我们创建一个hapticTransient

357
00:18:59,473 --> 0:19:01,842
来处理有效的感觉

358
00:18:59,473 --> 0:19:01,842
来处理有效的感觉

359
00:19:04,344 --> 0:19:05,913
我们给它两个事件色参数

360
00:19:05,979 --> 0:19:08,482
来配置事件的强度和清晰度

361
00:19:08,549 --> 0:19:12,753
你已经知道的 基于球的速度

362
00:19:15,222 --> 0:19:19,159
接下来 我们创建

363
00:19:20,561 --> 0:19:23,030
和一系列音量的事件参数

364
00:19:23,096 --> 0:19:27,000
包络衰减也被用来计算球的速度

365
00:19:27,367 --> 0:19:29,670
持续参数让我们

366
00:19:29,736 --> 0:19:33,707
不用持续关注事件的长度

367
00:19:33,974 --> 0:19:37,144
就知道这个事件的强度将会衰减为0

368
00:19:39,680 --> 0:19:42,282
我们创建了一个包括了两个

369
00:19:42,349 --> 0:19:43,851
实时同步的事件

370
00:19:45,886 --> 0:19:48,822
最后 我们为模式创建了模式播放器

371
00:19:48,889 --> 0:19:49,723
然后返回它

372
00:19:50,991 --> 0:19:51,992
给这一层

373
00:19:52,059 --> 0:19:54,428
回到响应碰撞的方法

374
00:19:55,362 --> 0:19:56,530
最后一步是

375
00:19:56,597 --> 0:20:01,268
在atTime CHHapticTimeImmediate

376
00:19:56,597 --> 0:20:01,268
在atTime CHHapticTimeImmediate

377
00:20:01,335 --> 0:20:05,405
它表示以最小延时立刻播放

378
00:20:06,907 --> 0:20:10,511
请注意 这个app并不拥有这个

379
00:20:11,211 --> 0:20:15,249
它的模式会被一直播放直到结束

380
00:20:15,315 --> 0:20:18,385
所以app能简单地关掉并忘记它

381
00:20:20,888 --> 0:20:24,024
这就是使用模式播放内容

382
00:20:24,091 --> 0:20:26,894
它在你app的代码中

383
00:20:27,761 --> 0:20:30,664
因为这个app是不间断交互的

384
00:20:30,731 --> 0:20:32,432
直到游戏屏幕不再可见之前

385
00:20:32,499 --> 0:20:35,169
我们不会停止触觉引擎

386
00:20:38,105 --> 0:20:41,642
现在 我们来讲一下Core Haptics

387
00:20:41,708 --> 0:20:44,311
动态参数

388
00:20:46,480 --> 0:20:50,083
在模式播放时 动态参数

389
00:20:50,150 --> 0:20:54,788
能让你增加或减少已有事件

390
00:20:54,855 --> 0:20:56,723
活跃的和将要到来的事件的参数的值

391
00:20:56,790 --> 0:20:58,458
（动态参数）

392
00:20:58,525 --> 0:21:02,062
动态参数在你提供的时间戳生效

393
00:20:58,525 --> 0:21:02,062
动态参数在你提供的时间戳生效

394
00:21:02,663 --> 0:21:06,166
你能在任意时间点

395
00:21:06,233 --> 0:21:09,169
同时调整多个不同的参数

396
00:21:11,171 --> 0:21:14,374
在你创建模式时

397
00:21:14,441 --> 0:21:18,445
或在播放时实时将它们传给播放器

398
00:21:20,080 --> 0:21:22,583
通过动态修改模式

399
00:21:22,649 --> 0:21:27,254
你可以使用一个模式就能

400
00:21:27,321 --> 0:21:29,723
创建出无数个触觉和音效变量

401
00:21:31,925 --> 0:21:33,694
我们来看一个例子

402
00:21:34,094 --> 0:21:36,763
在这张示意图底部

403
00:21:36,830 --> 0:21:40,367
所有的触觉事件强度都被

404
00:21:40,434 --> 0:21:42,069
设置为它们的最大值

405
00:21:42,436 --> 0:21:46,940
前一半是HapticTransients

406
00:21:47,941 --> 0:21:51,778
我们想要暂时减小游戏中所有的

407
00:21:51,845 --> 0:21:55,449
比如 游戏中的角色在讲话

408
00:21:55,516 --> 0:21:58,085
（动态参数和事件参数交互）

409
00:21:58,151 --> 0:22:02,556
我传给强度一个值为0.3动态参数

410
00:21:58,151 --> 0:22:02,556
我传给强度一个值为0.3动态参数

411
00:22:02,623 --> 0:22:05,359
需要0.5秒生效

412
00:22:05,759 --> 0:22:09,863
你能看到它在那个

413
00:22:09,930 --> 0:22:12,599
至原来的1/3

414
00:22:14,568 --> 0:22:16,403
（Apple触觉音效模式(AHAP)

415
00:22:16,470 --> 0:22:20,307
最后 我们来了解一下

416
00:22:22,509 --> 0:22:25,412
所以 到底什么是AHAP？

417
00:22:25,479 --> 0:22:27,714
（什么是AHAP？）

418
00:22:27,781 --> 0:22:31,752
Apple 触觉音效模式是一个

419
00:22:31,818 --> 0:22:35,956
基于文字样式的描述

420
00:22:36,290 --> 0:22:41,295
它创建于嵌套的键值对

421
00:22:41,562 --> 0:22:44,064
当你开始使用

422
00:22:44,131 --> 0:22:46,466
你会非常容易上手

423
00:22:48,402 --> 0:22:49,269
它是广泛使用的JSON文件格式

424
00:22:49,336 --> 0:22:52,406
的一个模式

425
00:22:52,472 --> 0:22:53,340
意味着

426
00:22:54,007 --> 0:22:56,577
你已经有很多不同的

427
00:22:56,643 --> 0:22:58,612
的框架

428
00:22:58,679 --> 0:23:01,882
包括比如Swift可编辑的框架

429
00:22:58,679 --> 0:23:01,882
包括比如Swift可编辑的框架

430
00:23:04,384 --> 0:23:07,855
AHAP让分享和编辑触觉模式

431
00:23:07,921 --> 0:23:11,225
因为它是所有开发者都认可的格式

432
00:23:13,927 --> 0:23:16,630
从外部的AHAP文件加载

433
00:23:16,697 --> 0:23:21,001
允许你从app的代码中分离

434
00:23:22,469 --> 0:23:24,037
（创建一个AHAP文件）

435
00:23:24,104 --> 0:23:25,939
通过使用幻灯片组的魔力

436
00:23:26,006 --> 0:23:28,876
我们在这里创建一个

437
00:23:30,744 --> 0:23:33,013
我们从一个版本字符串开始

438
00:23:33,080 --> 0:23:35,415
它包含了这个模式设计的

439
00:23:35,482 --> 0:23:37,184
系统的版本

440
00:23:39,219 --> 0:23:43,924
接下来 我们需要为我们的模式

441
00:23:46,493 --> 0:23:49,263
我们为模式数组加入我们第一个

442
00:23:49,630 --> 0:23:53,066
这个事件需要两个键值对

443
00:23:53,133 --> 0:23:55,602
模式启动

444
00:23:56,670 --> 0:23:59,840
和事件类型

445
00:24:00,340 --> 0:24:04,211
这是一个短暂的触觉事件

446
00:24:06,413 --> 0:24:07,347
对于这个事件

447
00:24:07,414 --> 0:24:10,751
我们加入了能影响这个事件的

448
00:24:11,151 --> 0:24:14,154
它们被存在了它们自己的字典数组中

449
00:24:15,222 --> 0:24:18,692
我们添加了一个事件参数来控制

450
00:24:18,759 --> 0:24:20,894
另一个参数来控制它的清晰度

451
00:24:24,097 --> 0:24:26,466
我们能按上述方法创建第二个事件

452
00:24:26,867 --> 0:24:30,003
这一个在第一个事件启动后0.5

453
00:24:30,070 --> 0:24:32,239
它的类型是

454
00:24:32,773 --> 0:24:34,007
至于事件类型

455
00:24:34,074 --> 0:24:36,810
我们使用和第一个事件相同的参数

456
00:24:38,979 --> 0:24:42,416
HapticContinuous和

457
00:24:42,482 --> 0:24:46,854
除了时间和事件类型

458
00:24:46,920 --> 0:24:49,957
事件持续时间的值需要精确到秒

459
00:24:52,426 --> 0:24:56,063
这里 是一个我们创建的模式的视图

460
00:24:56,496 --> 0:25:01,935
可以看到两种不同类型的事件最开始

461
00:24:56,496 --> 0:25:01,935
可以看到两种不同类型的事件最开始

462
00:25:02,002 --> 0:25:05,305
和之后相关的时机和时长

463
00:25:05,372 --> 0:25:08,442
以及它们的强度和清晰度参数值

464
00:25:08,509 --> 0:25:09,676
（创建一个AHAP文件）

465
00:25:09,743 --> 0:25:11,278
（AHAP结构概括）

466
00:25:11,345 --> 0:25:13,380
这是一个AHAP快速的讲解

467
00:25:13,447 --> 0:25:16,884
这是一个AHAP文件结构的示意图

468
00:25:17,150 --> 0:25:20,787
一个单一的模式

469
00:25:21,822 --> 0:25:26,693
可选的动态参数和

470
00:25:26,760 --> 0:25:29,630
是动态参数的一个扩展

471
00:25:29,696 --> 0:25:31,231
你可以从我们的网站上阅读

472
00:25:31,698 --> 0:25:34,201
它的更多信息

473
00:25:35,169 --> 0:25:38,172
你能在我们演讲页面

474
00:25:38,238 --> 0:25:39,740
找到AHAP说明的连接

475
00:25:41,909 --> 0:25:42,809
（Haptics示例

476
00:25:42,876 --> 0:25:45,612
同时 在我们的演讲页面

477
00:25:45,679 --> 0:25:47,381
它展示了如何创建 加载和

478
00:25:47,447 --> 0:25:50,184
播放被AHAP文件描述的模式

479
00:25:50,250 --> 0:25:53,520
这个触觉示例app包含了

480
00:25:53,587 --> 0:25:57,758
一系列使用

481
00:25:57,824 --> 0:26:00,360
它的精巧 动态范围和音效触觉同步

482
00:25:57,824 --> 0:26:00,360
它的精巧 动态范围和音效触觉同步

483
00:26:01,662 --> 0:26:03,830
非常感谢 现在我们将舞台交给

484
00:26:03,897 --> 0:26:05,299
我的同事Michael

485
00:26:12,940 --> 0:26:13,841
谢谢Doug

486
00:26:14,308 --> 0:26:16,977
那么 虽然我们今天讲了很多

487
00:26:17,244 --> 0:26:21,014
但Core Haptics

488
00:26:22,049 --> 0:26:24,685
你可以通过在线文档查阅更多细节

489
00:26:24,751 --> 0:26:26,153
（Core Haptics：

490
00:26:26,220 --> 0:26:29,823
当你构建允许基本的说明内容

491
00:26:29,890 --> 0:26:31,058
以及播放内容

492
00:26:31,124 --> 0:26:34,261
你可能会思考这些连接触觉和

493
00:26:34,328 --> 0:26:36,496
音频模式的设计原则

494
00:26:38,131 --> 0:26:42,169
你也会思考触觉设计中

495
00:26:42,236 --> 0:26:44,004
的声音设计的规则和指导

496
00:26:44,071 --> 0:26:46,540
有哪些坑是我需要留意避开的？

497
00:26:47,274 --> 0:26:50,177
有个好消息是我们的音效

498
00:26:50,644 --> 0:26:53,313
和触觉设计团队已经为此工作

499
00:26:53,614 --> 0:26:56,483
它们在更新的

500
00:26:56,550 --> 0:27:00,187
为触觉设计方案

501
00:26:56,550 --> 0:27:00,187
为触觉设计方案

502
00:27:00,254 --> 0:27:05,058
在今年的WWDC上

503
00:27:05,626 --> 0:27:06,460
你可以来看看

504
00:27:06,527 --> 0:27:08,228
（利用更新的触觉HIG）

505
00:27:08,529 --> 0:27:09,463
所以 我们来总结一下

506
00:27:10,030 --> 0:27:11,131
今天 我们谈到了

507
00:27:11,198 --> 0:27:14,968
触觉提升了你的app的沉浸式体验

508
00:27:15,335 --> 0:27:18,205
让交互变得更加便捷

509
00:27:18,272 --> 0:27:19,106
（总结）

510
00:27:19,173 --> 0:27:22,276
同步问候音频

511
00:27:22,576 --> 0:27:24,011
和触觉感受

512
00:27:24,611 --> 0:27:27,080
是一个非常有效的结合

513
00:27:27,681 --> 0:27:31,385
不过 现在还没有

514
00:27:32,019 --> 0:27:36,089
在iOS 13上

515
00:27:36,156 --> 0:27:39,426
来创建丰富多彩的多媒体体验

516
00:27:39,826 --> 0:27:44,131
我们有了词汇来描述触觉和音效事件

517
00:27:45,132 --> 0:27:47,067
和文件格式AHAP

518
00:27:47,968 --> 0:27:51,738
我们有了新的高性能API

519
00:27:51,805 --> 0:27:55,342
它为低延时和实时调制而设计

520
00:27:56,944 --> 0:28:00,747
我们将示例代码 示例模式

521
00:27:56,944 --> 0:28:00,747
我们将示例代码 示例模式

522
00:28:01,381 --> 0:28:03,817
设计指导和Apple的

523
00:28:04,585 --> 0:28:07,721
最后 你有了很棒的观众

524
00:28:07,788 --> 0:28:09,089
优质的硬件

525
00:28:09,156 --> 0:28:11,725
你能感受到和你预期一样的触觉感受

526
00:28:11,992 --> 0:28:17,364
一个功能强大的触觉引擎能

527
00:28:17,664 --> 0:28:21,335
生动的和精准可用的硬件

528
00:28:22,536 --> 0:28:26,373
所以 请来参加周四和周五的

529
00:28:26,440 --> 0:28:30,110
你可以查看我们今天展示过的

530
00:28:30,177 --> 0:28:31,211
触觉示例代码

531
00:28:32,112 --> 0:28:34,781
来聊一下你app的想法

532
00:28:34,848 --> 0:28:36,650
你也能在我们演讲的页面找到

533
00:28:37,618 --> 0:28:40,721
指导和说明意见

534
00:28:42,523 --> 0:28:44,458
我知道你将使用

535
00:28:44,525 --> 0:28:48,061
创建有趣好玩的内容

536
00:28:48,128 --> 0:28:50,731
我们期待着你的作品

537
00:28:51,431 --> 0:28:52,566
谢谢大家 晚安
