1
00:00:01,176 --> 0:00:04,500
[ Music ]

2
00:00:10,516 --> 0:00:14,996
[ Applause ]

3
00:00:15,496 --> 0:00:16,876
&gt;&gt; Good afternoon, ladies and

4
00:00:16,876 --> 0:00:17,416
gentlemen.

5
00:00:18,106 --> 0:00:19,306
Welcome to the Filesystem

6
00:00:19,306 --> 0:00:19,746
session.

7
00:00:20,666 --> 0:00:22,556
In this session, we're going to

8
00:00:22,556 --> 0:00:24,696
cover several topics related to

9
00:00:24,696 --> 0:00:25,676
the filesystems.

10
00:00:25,866 --> 0:00:27,946
First, we're going to have a

11
00:00:27,946 --> 0:00:30,306
look at the role a filesystem

12
00:00:30,376 --> 0:00:33,106
plays in protecting system

13
00:00:33,106 --> 0:00:34,616
software on macOS.

14
00:00:36,336 --> 0:00:38,876
We're going to describe how

15
00:00:38,876 --> 0:00:41,366
volume replication works in

16
00:00:41,416 --> 0:00:41,766
APFS.

17
00:00:42,636 --> 0:00:45,426
And finally, we are going to

18
00:00:45,946 --> 0:00:47,936
talk about the new and very

19
00:00:47,936 --> 0:00:49,566
exciting feature coming to the

20
00:00:49,566 --> 0:00:52,736
devices running iOS and iPadOS,

21
00:00:53,376 --> 0:00:55,516
the access to the external files

22
00:00:55,916 --> 0:00:57,326
on the external media.

23
00:00:57,846 --> 0:01:03,146
But before we start, let's rehab

24
00:00:57,846 --> 0:01:03,146
But before we start, let's rehab

25
00:01:03,706 --> 0:01:06,166
what happened to APFS recently.

26
00:01:06,536 --> 0:01:09,426
APFS has been the default

27
00:01:09,546 --> 0:01:12,556
filesystem it -- on iOS and tvOS

28
00:01:12,556 --> 0:01:17,766
since 10.3 and on macOS since

29
00:01:17,846 --> 0:01:18,736
High Sierra.

30
00:01:22,576 --> 0:01:24,316
One of the features which APFS

31
00:01:24,316 --> 0:01:28,126
introduced is a built-in volume

32
00:01:28,126 --> 0:01:28,546
manager.

33
00:01:30,436 --> 0:01:32,506
The concept of a volume is not

34
00:01:32,506 --> 0:01:33,836
new to APFS.

35
00:01:34,326 --> 0:01:36,626
They existed in HFS Plus.

36
00:01:37,876 --> 0:01:41,206
The HFS Plus volume is a

37
00:01:41,206 --> 0:01:43,706
one-to-one map to -- on this

38
00:01:43,836 --> 0:01:44,336
partition.

39
00:01:45,006 --> 0:01:48,136
And it occupies contiguous range

40
00:01:48,136 --> 0:01:49,426
of blocks on disk.

41
00:01:50,756 --> 0:01:52,236
Because of this one-to-one

42
00:01:52,236 --> 0:01:55,736
mapping to partition and HFS

43
00:01:55,736 --> 0:01:57,666
Plus volumes cannot be added

44
00:01:58,146 --> 0:01:58,756
easily.

45
00:01:59,106 --> 0:02:02,266
In order to add a new volume to

46
00:01:59,106 --> 0:02:02,266
In order to add a new volume to

47
00:02:02,266 --> 0:02:05,576
partitioned disk, you need first

48
00:02:05,576 --> 0:02:08,156
to shrink the existing volume.

49
00:02:08,395 --> 0:02:10,526
And then you can add a new

50
00:02:11,636 --> 0:02:12,346
volume.

51
00:02:12,346 --> 0:02:14,386
APFS volumes are a lot more

52
00:02:14,386 --> 0:02:17,496
flexible because they share

53
00:02:17,816 --> 0:02:19,466
their own disk partition space

54
00:02:20,256 --> 0:02:21,506
with their siblings.

55
00:02:22,816 --> 0:02:26,486
And that flexibility allows

56
00:02:27,406 --> 0:02:30,686
higher levels of a system to

57
00:02:31,766 --> 0:02:33,386
implement features which would

58
00:02:33,386 --> 0:02:35,546
not otherwise be possible to

59
00:02:35,546 --> 0:02:37,776
implement with the old-style

60
00:02:37,776 --> 0:02:38,316
volumes.

61
00:02:39,876 --> 0:02:41,966
One of us -- one of the features

62
00:02:42,006 --> 0:02:44,426
which we'll implement is

63
00:02:44,816 --> 0:02:47,236
protecting system software from

64
00:02:47,466 --> 0:02:49,806
malicious or accidental updates.

65
00:02:52,716 --> 0:02:54,626
You may remember back in the

66
00:02:54,816 --> 0:02:57,376
macOS El Capitan days, we

67
00:02:57,376 --> 0:03:00,846
introduced the concept of system

68
00:02:57,376 --> 0:03:00,846
introduced the concept of system

69
00:03:00,846 --> 0:03:01,966
integrity protection.

70
00:03:03,596 --> 0:03:08,126
It was used to control access to

71
00:03:08,436 --> 0:03:10,926
a part of the directory

72
00:03:11,006 --> 0:03:11,656
hierarchy.

73
00:03:12,816 --> 0:03:14,556
Some directories would be write

74
00:03:14,836 --> 0:03:16,716
protected, while changes would

75
00:03:16,716 --> 0:03:18,566
be allowed in the other parts of

76
00:03:18,566 --> 0:03:19,816
the filesystems.

77
00:03:20,466 --> 0:03:23,036
This year, we're taking this one

78
00:03:23,036 --> 0:03:23,616
step further.

79
00:03:23,616 --> 0:03:27,406
We're making entire root

80
00:03:27,586 --> 0:03:29,306
filesystem read-only.

81
00:03:30,516 --> 0:03:35,936
[ Cheering and Applause ]

82
00:03:36,436 --> 0:03:38,796
Obviously, a system where you

83
00:03:38,846 --> 0:03:41,176
cannot install new software or

84
00:03:41,176 --> 0:03:43,906
where user cannot save the data

85
00:03:43,906 --> 0:03:45,536
is not particularly useful.

86
00:03:47,996 --> 0:03:49,346
In order to understand how we

87
00:03:49,346 --> 0:03:50,666
can reconcile those two

88
00:03:50,666 --> 0:03:53,516
conflicting goals, read-only and

89
00:03:53,516 --> 0:03:54,916
writeable at the same time,

90
00:03:55,606 --> 0:03:57,186
let's look at what's happening

91
00:03:57,276 --> 0:03:59,026
when we upgrade from macOS

92
00:03:59,266 --> 0:04:01,166
Mojave to macOS Catalina.

93
00:03:59,266 --> 0:04:01,166
Mojave to macOS Catalina.

94
00:04:01,706 --> 0:04:06,196
A typical container on macOS

95
00:04:06,196 --> 0:04:08,596
Mojave will have one main

96
00:04:08,596 --> 0:04:11,906
volume, and few service volumes.

97
00:04:11,906 --> 0:04:13,996
For example, VM.

98
00:04:14,406 --> 0:04:17,146
The main volume is used to store

99
00:04:17,146 --> 0:04:19,946
both user's data and system

100
00:04:19,946 --> 0:04:20,736
software.

101
00:04:22,436 --> 0:04:24,436
When we start upgrade--

102
00:04:30,126 --> 0:04:32,036
When we start the upgrade to

103
00:04:32,426 --> 0:04:36,566
macOS Catalina, we first change

104
00:04:36,566 --> 0:04:38,596
the role of the main volume and

105
00:04:38,596 --> 0:04:40,286
mark it as data volume.

106
00:04:41,776 --> 0:04:44,956
We then can prune some parts of

107
00:04:44,956 --> 0:04:46,806
the directive hierarchy which

108
00:04:46,806 --> 0:04:48,946
contains only system software.

109
00:04:50,426 --> 0:04:53,986
Once this is done, we can move

110
00:04:54,206 --> 0:04:56,216
to the next stage where we

111
00:04:56,216 --> 0:04:58,696
create a new empty volume, which

112
00:04:58,696 --> 0:05:01,186
will be used only to store

113
00:04:58,696 --> 0:05:01,186
will be used only to store

114
00:05:01,186 --> 0:05:02,456
system software.

115
00:05:02,666 --> 0:05:05,396
We'll populate that volume with

116
00:05:05,396 --> 0:05:06,406
the system content.

117
00:05:06,986 --> 0:05:09,026
And once this process is done,

118
00:05:09,836 --> 0:05:10,976
we can declare victory on the

119
00:05:10,976 --> 0:05:11,706
protection front.

120
00:05:12,056 --> 0:05:13,056
We are read-only.

121
00:05:13,056 --> 0:05:13,696
We're protected.

122
00:05:14,016 --> 0:05:16,976
It's good, but it's not enough.

123
00:05:19,256 --> 0:05:21,846
We still need to somehow tie the

124
00:05:21,846 --> 0:05:24,866
new system content with the user

125
00:05:24,866 --> 0:05:25,406
content.

126
00:05:25,866 --> 0:05:27,896
And for that, we introduce the

127
00:05:27,896 --> 0:05:29,286
concept of a volume group.

128
00:05:30,046 --> 0:05:32,626
A volume group is one data

129
00:05:32,626 --> 0:05:34,846
volume and one system volume.

130
00:05:35,196 --> 0:05:36,586
And they treat it as it as a

131
00:05:36,586 --> 0:05:37,616
single entity.

132
00:05:38,746 --> 0:05:42,046
The UI present it as a single

133
00:05:42,046 --> 0:05:42,496
disk.

134
00:05:43,126 --> 0:05:45,036
They share encryption state.

135
00:05:45,796 --> 0:05:48,016
If your volumes are encrypted,

136
00:05:48,016 --> 0:05:50,086
then the same password can be

137
00:05:50,086 --> 0:05:51,766
used to unlock both volumes.

138
00:05:52,566 --> 0:05:55,516
Almost everything looks as a

139
00:05:55,516 --> 0:05:58,726
single unified entity.

140
00:05:59,936 --> 0:06:01,556
There is one thing which is

141
00:05:59,936 --> 0:06:01,556
There is one thing which is

142
00:06:01,556 --> 0:06:01,946
missing.

143
00:06:02,186 --> 0:06:04,326
We still need to somehow provide

144
00:06:04,326 --> 0:06:05,816
an illusion of a single

145
00:06:05,946 --> 0:06:07,066
directory hierarchy.

146
00:06:08,026 --> 0:06:10,916
Traditionally, it was done by

147
00:06:11,406 --> 0:06:14,666
mounting filesystems on top of

148
00:06:14,666 --> 0:06:16,056
directories in the root

149
00:06:16,056 --> 0:06:16,866
filesystem.

150
00:06:18,226 --> 0:06:20,266
With a number of crossing

151
00:06:20,266 --> 0:06:21,636
points, which we need to

152
00:06:21,636 --> 0:06:24,946
introduce, and the number of

153
00:06:25,026 --> 0:06:26,246
volumes which are required in

154
00:06:26,246 --> 0:06:28,176
the filesystem, that approach

155
00:06:28,246 --> 0:06:29,426
becomes rather expensive.

156
00:06:29,916 --> 0:06:32,296
So to deal with this, we

157
00:06:32,296 --> 0:06:34,426
introduced a new concept called

158
00:06:34,426 --> 0:06:34,926
Firmlink.

159
00:06:35,416 --> 0:06:39,316
The Firmlink is a new filesystem

160
00:06:39,316 --> 0:06:39,616
object.

161
00:06:40,776 --> 0:06:42,316
It's similar to Symlink.

162
00:06:42,876 --> 0:06:46,136
But unlike Symlink, Firmlink

163
00:06:46,526 --> 0:06:50,426
support backwards and forwards

164
00:06:51,046 --> 0:06:53,326
path reversals, which is

165
00:06:53,936 --> 0:06:55,956
consistent in its

166
00:06:56,126 --> 0:06:57,246
representation.

167
00:06:58,036 --> 0:07:00,326
And that consistency is rather

168
00:06:58,036 --> 0:07:00,326
And that consistency is rather

169
00:07:00,326 --> 0:07:00,886
important.

170
00:07:00,926 --> 0:07:02,476
If you ever had to deal with an

171
00:07:02,476 --> 0:07:04,966
application, which absolutely

172
00:07:04,966 --> 0:07:06,936
insists it has to live in a

173
00:07:06,936 --> 0:07:08,416
particular directory, for

174
00:07:08,416 --> 0:07:09,686
example, such as applications.

175
00:07:10,096 --> 0:07:12,066
You know that you have to be

176
00:07:12,096 --> 0:07:15,096
able to walk both from the top

177
00:07:15,096 --> 0:07:16,676
of a filesystem from the road

178
00:07:16,676 --> 0:07:18,586
down to the leaves and backwards

179
00:07:18,586 --> 0:07:21,186
and get the same path.

180
00:07:21,736 --> 0:07:22,976
We can do that with Firmlinks.

181
00:07:29,216 --> 0:07:34,116
The Firmlinks are a traversal

182
00:07:34,116 --> 0:07:36,436
point from a directory on the

183
00:07:36,436 --> 0:07:40,036
system volume to a directory on

184
00:07:40,036 --> 0:07:40,866
the data volume.

185
00:07:42,246 --> 0:07:43,876
They only have one-to-one

186
00:07:43,876 --> 0:07:44,326
mapping.

187
00:07:44,326 --> 0:07:44,916
One source.

188
00:07:45,036 --> 0:07:45,716
One target.

189
00:07:47,066 --> 0:07:48,896
You cannot use a Firmlink to

190
00:07:48,896 --> 0:07:50,656
cross a boundary of a volume

191
00:07:50,656 --> 0:07:50,976
group.

192
00:07:54,256 --> 0:07:56,116
The Firmlinks are rather

193
00:07:56,116 --> 0:07:57,666
transparent to the user and the

194
00:07:57,666 --> 0:07:58,336
application.

195
00:07:58,726 --> 0:08:00,436
They are created by the install

196
00:07:58,726 --> 0:08:00,436
They are created by the install

197
00:08:00,436 --> 0:08:01,426
at the installation time.

198
00:08:01,946 --> 0:08:03,666
And they are not supposed to be

199
00:08:03,756 --> 0:08:03,976
noticed.

200
00:08:08,256 --> 0:08:10,246
Once we get this new tool, we

201
00:08:10,246 --> 0:08:13,066
can use it to stitch up volumes

202
00:08:13,066 --> 0:08:13,426
together.

203
00:08:13,426 --> 0:08:16,296
The installer will create entry

204
00:08:16,296 --> 0:08:16,976
on the system volume.

205
00:08:22,426 --> 0:08:24,446
And point them to the

206
00:08:24,446 --> 0:08:26,576
corresponding volumes on the

207
00:08:26,926 --> 0:08:27,976
data volume.

208
00:08:31,576 --> 0:08:34,346
And once it's done, we have a

209
00:08:34,346 --> 0:08:36,976
unified directory hierarchy.

210
00:08:37,686 --> 0:08:40,155
We can reboot, mount root as

211
00:08:40,155 --> 0:08:42,006
read-only, and enjoy the

212
00:08:42,006 --> 0:08:42,976
protection which it gives us.

213
00:08:49,686 --> 0:08:50,726
Life is good.

214
00:08:51,446 --> 0:08:52,496
Everything's protected.

215
00:08:53,066 --> 0:08:53,986
Everything's running.

216
00:08:54,726 --> 0:08:56,556
But you still have to remember

217
00:08:58,026 --> 0:09:00,016
that the volumes are split

218
00:08:58,026 --> 0:09:00,016
that the volumes are split

219
00:09:00,016 --> 0:09:01,356
during the install process.

220
00:09:01,726 --> 0:09:03,446
There is no way to avoid it.

221
00:09:03,786 --> 0:09:04,516
It will happen.

222
00:09:05,116 --> 0:09:09,626
In the developer's preview, we

223
00:09:09,626 --> 0:09:12,166
elected to leave the root

224
00:09:12,296 --> 0:09:14,606
filesystem writeable to make it

225
00:09:14,606 --> 0:09:16,006
easier for you to test your

226
00:09:16,006 --> 0:09:16,736
application.

227
00:09:17,596 --> 0:09:19,026
If you want to mimic your

228
00:09:19,026 --> 0:09:21,796
behavior, which will be

229
00:09:22,966 --> 0:09:24,636
implemented in the future, you

230
00:09:24,636 --> 0:09:26,586
can create a special file in the

231
00:09:26,586 --> 0:09:30,026
root directory and on reboot,

232
00:09:30,026 --> 0:09:31,666
your volumes will be mounted

233
00:09:31,666 --> 0:09:32,256
read-only.

234
00:09:33,506 --> 0:09:35,066
That will change in the next

235
00:09:35,066 --> 0:09:37,786
build over next seed.

236
00:09:42,256 --> 0:09:45,496
In the release build, you would

237
00:09:45,496 --> 0:09:48,196
still be able to mount root

238
00:09:48,196 --> 0:09:51,516
filesystem as read-write if you

239
00:09:51,516 --> 0:09:52,886
disable system integrity

240
00:09:52,886 --> 0:09:53,426
protection.

241
00:09:54,896 --> 0:09:57,196
But this is not a persistent

242
00:09:57,196 --> 0:09:57,616
change.

243
00:09:58,016 --> 0:10:00,566
On the reboot, it will revert

244
00:09:58,016 --> 0:10:00,566
On the reboot, it will revert

245
00:10:00,566 --> 0:10:03,296
back to read-only state.

246
00:10:03,866 --> 0:10:06,216
You can remount it read-only,

247
00:10:06,216 --> 0:10:07,806
read-write again.

248
00:10:08,886 --> 0:10:10,116
And again, it will revert to the

249
00:10:10,116 --> 0:10:11,686
same state on reboot.

250
00:10:13,306 --> 0:10:14,906
As you can imagine, this is

251
00:10:14,906 --> 0:10:17,366
rather big change in the way

252
00:10:17,516 --> 0:10:20,016
macOS shapes and installs.

253
00:10:20,886 --> 0:10:23,066
And it could catch some

254
00:10:23,066 --> 0:10:23,986
applications.

255
00:10:24,816 --> 0:10:25,806
If, for example, your

256
00:10:25,806 --> 0:10:27,946
application uses a complex

257
00:10:27,946 --> 0:10:30,536
layout on the filesystem or

258
00:10:30,736 --> 0:10:32,666
comes with the installer

259
00:10:32,666 --> 0:10:35,576
package, make sure it works on

260
00:10:35,576 --> 0:10:38,606
the new read-only root

261
00:10:38,606 --> 0:10:38,976
partition.

262
00:10:42,046 --> 0:10:43,376
If you're writing a backup

263
00:10:43,376 --> 0:10:47,246
utility, which cares about inode

264
00:10:47,246 --> 0:10:49,996
numbers, filesystem IDs, and the

265
00:10:49,996 --> 0:10:52,286
like, make sure that you test

266
00:10:52,286 --> 0:10:53,896
it, because the assumptions you

267
00:10:53,896 --> 0:10:56,406
may had previously may not be

268
00:10:56,406 --> 0:10:56,836
true.

269
00:10:57,276 --> 0:10:59,796
So the bottom line is test,

270
00:10:59,976 --> 0:11:01,006
test, test.

271
00:10:59,976 --> 0:11:01,006
test, test.

272
00:11:01,946 --> 0:11:03,846
And next, I will hand over to

273
00:11:03,846 --> 0:11:05,856
Jon Becker to talk about volume

274
00:11:05,856 --> 0:11:06,426
replication.

275
00:11:08,516 --> 0:11:12,500
[ Applause ]

276
00:11:16,166 --> 0:11:16,976
&gt;&gt; Thank you, Max.

277
00:11:19,046 --> 0:11:19,576
Good afternoon.

278
00:11:20,436 --> 0:11:21,556
My name is Jon, and I'm going to

279
00:11:21,556 --> 0:11:22,646
be talking about volume

280
00:11:22,646 --> 0:11:24,326
replication with APFS.

281
00:11:24,836 --> 0:11:26,306
So let's dive right in.

282
00:11:26,796 --> 0:11:28,276
What is volume replication?

283
00:11:29,296 --> 0:11:31,256
Well, the basic idea is pretty

284
00:11:31,256 --> 0:11:31,606
simple.

285
00:11:31,606 --> 0:11:33,766
We'd want to copy one volume to

286
00:11:33,766 --> 0:11:34,296
another volume.

287
00:11:35,366 --> 0:11:36,026
Sounds simple.

288
00:11:36,936 --> 0:11:39,536
But the important aspect of this

289
00:11:39,806 --> 0:11:41,286
is that we want the fidelity of

290
00:11:41,286 --> 0:11:42,446
this copy to be as high as

291
00:11:42,486 --> 0:11:42,966
possible.

292
00:11:43,756 --> 0:11:45,946
In general, it's not sufficient

293
00:11:45,946 --> 0:11:47,586
to just be doing file-by-file

294
00:11:47,586 --> 0:11:48,016
copies.

295
00:11:48,306 --> 0:11:51,516
We want to be copying all volume

296
00:11:51,516 --> 0:11:52,046
content.

297
00:11:52,456 --> 0:11:55,136
All data, all metadata, volume

298
00:11:55,136 --> 0:11:56,036
attributes.

299
00:11:56,326 --> 0:11:58,056
If the source volume contains a

300
00:11:58,056 --> 0:12:00,126
bootable OS, we want to be

301
00:11:58,056 --> 0:12:00,126
bootable OS, we want to be

302
00:12:00,126 --> 0:12:01,666
copying the metadata that makes

303
00:12:01,666 --> 0:12:03,356
that volume bootable so that the

304
00:12:03,396 --> 0:12:05,746
target of our copy will also be

305
00:12:05,746 --> 0:12:06,086
bootable.

306
00:12:06,086 --> 0:12:08,156
Now I'm going to be talking

307
00:12:08,156 --> 0:12:10,586
about replication in the context

308
00:12:10,586 --> 0:12:12,346
of the Apple Software Restore

309
00:12:12,346 --> 0:12:14,186
command line utility, or ASR.

310
00:12:14,186 --> 0:12:16,756
ASR has been around for a very

311
00:12:16,756 --> 0:12:17,486
long time.

312
00:12:17,486 --> 0:12:18,856
Many of you may be familiar with

313
00:12:19,276 --> 0:12:19,406
it.

314
00:12:19,406 --> 0:12:20,906
And its primary function is to

315
00:12:20,906 --> 0:12:22,266
do volume replication.

316
00:12:23,646 --> 0:12:25,206
Now, with ASR, it's very common

317
00:12:25,206 --> 0:12:26,606
for the source of our

318
00:12:26,606 --> 0:12:29,096
replication to be a disk image.

319
00:12:29,096 --> 0:12:30,986
And in that context, we often

320
00:12:30,986 --> 0:12:33,216
refer to the procedure of doing

321
00:12:33,216 --> 0:12:34,786
this replication to occur -- to

322
00:12:34,786 --> 0:12:37,656
a target volume as restoring,

323
00:12:38,056 --> 0:12:39,186
hence the name Apple Software

324
00:12:39,216 --> 0:12:39,786
Restore.

325
00:12:40,156 --> 0:12:41,966
But you'll hear me use the terms

326
00:12:42,026 --> 0:12:44,026
restoring and replicating pretty

327
00:12:44,026 --> 0:12:45,036
much interchangeably.

328
00:12:46,696 --> 0:12:50,796
So who wants this?

329
00:12:50,796 --> 0:12:52,336
Who needs this functionality?

330
00:12:53,576 --> 0:12:56,186
Well, if you are in education or

331
00:12:56,186 --> 0:12:58,436
Enterprise IT, if you do things

332
00:12:58,436 --> 0:13:00,866
like set up large labs with lots

333
00:12:58,436 --> 0:13:00,866
like set up large labs with lots

334
00:13:00,866 --> 0:13:02,636
of machines, or if you write

335
00:13:02,636 --> 0:13:04,156
backup utilities, then

336
00:13:04,156 --> 0:13:06,166
replication is a function that

337
00:13:06,206 --> 0:13:08,526
you probably need or want to use

338
00:13:08,526 --> 0:13:09,576
with some regularity.

339
00:13:10,296 --> 0:13:12,816
As we'll see, some of the new

340
00:13:12,816 --> 0:13:14,496
features of APFS present a

341
00:13:14,526 --> 0:13:15,756
challenge for how we can do

342
00:13:15,756 --> 0:13:16,396
replication.

343
00:13:17,536 --> 0:13:19,406
On the other hand, as well also

344
00:13:19,406 --> 0:13:21,486
see, these new features also

345
00:13:21,486 --> 0:13:23,586
present an opportunity to make

346
00:13:23,586 --> 0:13:25,596
replication a more powerful and

347
00:13:25,596 --> 0:13:26,656
flexible operation.

348
00:13:27,706 --> 0:13:29,416
So I want to back up for just a

349
00:13:29,416 --> 0:13:32,096
second and talk about how

350
00:13:32,096 --> 0:13:33,446
replication has looked in the

351
00:13:33,446 --> 0:13:35,066
past prior to APFS.

352
00:13:35,566 --> 0:13:37,596
Now as Max demonstrated before,

353
00:13:38,136 --> 0:13:40,886
with previous filesystems, like

354
00:13:41,636 --> 0:13:43,656
HFS Plus, the filesystem, or I

355
00:13:43,656 --> 0:13:45,176
should say the volume, is in a

356
00:13:45,176 --> 0:13:46,706
one-to-one relationship with the

357
00:13:46,706 --> 0:13:48,056
partition that contains it.

358
00:13:48,536 --> 0:13:49,896
And what that means is that the

359
00:13:49,896 --> 0:13:52,076
volume is backed by a contiguous

360
00:13:52,126 --> 0:13:52,936
block device.

361
00:13:53,496 --> 0:13:55,886
So replicating can really

362
00:13:55,886 --> 0:13:58,366
involve just doing a block copy

363
00:13:58,846 --> 0:14:00,256
of the entire partition.

364
00:13:58,846 --> 0:14:00,256
of the entire partition.

365
00:14:00,896 --> 0:14:04,476
Of course, if we're copying the

366
00:14:04,476 --> 0:14:06,986
entire block device, we are

367
00:14:06,986 --> 0:14:08,416
copying all of the filesystem

368
00:14:08,416 --> 0:14:09,556
information in that volume.

369
00:14:09,556 --> 0:14:11,386
Now there may be some

370
00:14:11,386 --> 0:14:12,866
complications like as in this

371
00:14:12,866 --> 0:14:13,436
diagram.

372
00:14:13,766 --> 0:14:15,256
We have the source and target

373
00:14:15,256 --> 0:14:16,466
partition not being the same

374
00:14:16,466 --> 0:14:16,826
size.

375
00:14:17,066 --> 0:14:18,066
But there are ways that we can

376
00:14:18,066 --> 0:14:18,686
fix that up.

377
00:14:18,686 --> 0:14:20,856
And so by and large, block

378
00:14:20,856 --> 0:14:23,546
copying is a very effective and

379
00:14:23,546 --> 0:14:25,006
relatively simple way of doing

380
00:14:25,006 --> 0:14:25,656
replication.

381
00:14:26,636 --> 0:14:30,236
But of course, with APFS, there

382
00:14:30,236 --> 0:14:31,256
are some new features that

383
00:14:31,256 --> 0:14:31,976
complicate this picture.

384
00:14:34,416 --> 0:14:36,626
So APFS, as Max told you, has

385
00:14:36,726 --> 0:14:38,156
some features, like volume

386
00:14:38,156 --> 0:14:39,336
management and space sharing.

387
00:14:39,336 --> 0:14:42,886
And as we can see, if we take a

388
00:14:42,886 --> 0:14:44,766
look at Volume 1 in the diagram

389
00:14:44,766 --> 0:14:46,556
here, it's spread out around its

390
00:14:46,556 --> 0:14:47,536
container partition.

391
00:14:47,836 --> 0:14:49,326
And so it is not a contiguous

392
00:14:49,326 --> 0:14:49,966
block device.

393
00:14:51,166 --> 0:14:52,536
And it may be -- its data may be

394
00:14:52,536 --> 0:14:56,216
interspersed with the data for

395
00:14:56,216 --> 0:14:57,306
another volume in the same

396
00:14:57,306 --> 0:14:59,036
container, like Volume 2 in this

397
00:14:59,036 --> 0:14:59,396
example.

398
00:15:00,616 --> 0:15:02,076
Furthermore, we of course care

399
00:15:02,076 --> 0:15:03,496
about security and privacy.

400
00:15:04,116 --> 0:15:05,096
And so we have to think about

401
00:15:05,096 --> 0:15:05,736
encryption.

402
00:15:06,556 --> 0:15:08,356
Now with APFS, encryption is

403
00:15:08,356 --> 0:15:10,016
done at the filesystem level.

404
00:15:10,526 --> 0:15:12,996
And what's more, on Macs that

405
00:15:12,996 --> 0:15:15,736
have the T2 security chip for

406
00:15:16,286 --> 0:15:18,276
internal storage devices, that

407
00:15:18,276 --> 0:15:19,686
encryption is on all the time.

408
00:15:20,396 --> 0:15:22,316
And it is tied directly to the

409
00:15:22,316 --> 0:15:23,926
hardware, meaning that it is

410
00:15:23,926 --> 0:15:26,516
specific to that storage device

411
00:15:26,556 --> 0:15:27,316
in that Mac.

412
00:15:28,106 --> 0:15:29,366
And so if we would try to copy

413
00:15:29,366 --> 0:15:31,346
the blocks for that volume and

414
00:15:31,346 --> 0:15:32,236
take them somewhere else, they

415
00:15:32,236 --> 0:15:33,176
won't be decryptable.

416
00:15:34,206 --> 0:15:36,166
So the upshot here is block

417
00:15:36,166 --> 0:15:37,456
copies are really not a possible

418
00:15:37,456 --> 0:15:39,486
way to do replication with APFS

419
00:15:39,486 --> 0:15:39,986
volumes.

420
00:15:40,566 --> 0:15:44,136
So how do we reconcile this with

421
00:15:44,136 --> 0:15:46,906
the needs that we have?

422
00:15:47,106 --> 0:15:48,846
Well, new with macOS Catalina

423
00:15:48,946 --> 0:15:51,116
we're introducing APFS volume

424
00:15:51,116 --> 0:15:52,846
replication with ASR.

425
00:15:53,576 --> 0:15:55,176
ASR and APFS.

426
00:15:56,176 --> 0:15:57,086
Yeah, thank you.

427
00:15:57,086 --> 0:15:58,756
ASR and APFS are tightly

428
00:15:58,756 --> 0:15:59,336
integrated.

429
00:15:59,566 --> 0:16:02,296
And ASR can have APFS generate a

430
00:15:59,566 --> 0:16:02,296
And ASR can have APFS generate a

431
00:16:02,296 --> 0:16:03,966
stream from the source volume.

432
00:16:03,966 --> 0:16:05,336
And that stream then gets

433
00:16:05,336 --> 0:16:06,506
written to the target volume.

434
00:16:07,066 --> 0:16:10,266
Now because APFS is generating

435
00:16:10,266 --> 0:16:11,636
this stream, it knows where it

436
00:16:11,636 --> 0:16:13,126
needs to read the parts of the

437
00:16:13,126 --> 0:16:13,856
source volume.

438
00:16:15,276 --> 0:16:16,626
And so it's not a problem that

439
00:16:16,626 --> 0:16:17,646
that source volume is not a

440
00:16:17,646 --> 0:16:18,976
contiguous block device.

441
00:16:22,376 --> 0:16:24,276
As far as encryption goes, if

442
00:16:24,276 --> 0:16:25,376
the source of volume is

443
00:16:25,376 --> 0:16:28,606
encrypted, then it will be --

444
00:16:28,756 --> 0:16:30,366
the data from it will be

445
00:16:30,366 --> 0:16:32,106
decrypted on the fly as the

446
00:16:32,106 --> 0:16:33,116
stream is generated.

447
00:16:33,776 --> 0:16:34,996
And of course, if the source

448
00:16:34,996 --> 0:16:35,786
volume is protected by

449
00:16:35,786 --> 0:16:37,516
FileVault, then it does need to

450
00:16:37,516 --> 0:16:39,276
be unlocked by user action prior

451
00:16:39,276 --> 0:16:40,366
to this replication taking

452
00:16:40,366 --> 0:16:40,766
place.

453
00:16:41,536 --> 0:16:43,726
If the target volume is itself

454
00:16:43,726 --> 0:16:45,976
encrypted then the data is in --

455
00:16:45,976 --> 0:16:47,776
or the data is encrypted as it

456
00:16:47,776 --> 0:16:49,066
is written from the stream to

457
00:16:49,066 --> 0:16:49,926
the target volume.

458
00:16:50,356 --> 0:16:52,616
And so in this case, that data

459
00:16:52,616 --> 0:16:54,286
is encrypted from the get go by

460
00:16:54,286 --> 0:16:55,476
the time it hits the target

461
00:16:55,476 --> 0:16:55,836
volume.

462
00:16:56,546 --> 0:16:59,606
Okay? One other nice feature of

463
00:16:59,606 --> 0:17:01,766
this replication is that as the

464
00:16:59,606 --> 0:17:01,766
this replication is that as the

465
00:17:01,766 --> 0:17:03,466
stream is generated, the volume

466
00:17:03,466 --> 0:17:05,636
data is defragmented on the fly.

467
00:17:05,636 --> 0:17:07,705
The metadata is compacted, and

468
00:17:07,705 --> 0:17:09,486
so the resulting stream, and

469
00:17:09,486 --> 0:17:10,935
therefore, the resulting target

470
00:17:10,935 --> 0:17:11,915
volume, are very nicely

471
00:17:11,915 --> 0:17:12,465
optimized.

472
00:17:12,766 --> 0:17:17,066
This can be a great way to do --

473
00:17:17,066 --> 0:17:18,896
to master images, for example.

474
00:17:19,856 --> 0:17:20,986
If you're mastering an image,

475
00:17:21,266 --> 0:17:22,445
and your final step is to do a

476
00:17:22,445 --> 0:17:24,126
replication operation, then your

477
00:17:24,126 --> 0:17:25,435
image volume will be very nicely

478
00:17:25,435 --> 0:17:25,976
optimized.

479
00:17:30,076 --> 0:17:31,436
So when we do restores,

480
00:17:32,736 --> 0:17:34,596
replication, however you want to

481
00:17:34,596 --> 0:17:36,036
say it, there are a number of

482
00:17:36,036 --> 0:17:37,376
options that we can use.

483
00:17:37,696 --> 0:17:39,016
I just want to call out a couple

484
00:17:39,086 --> 0:17:39,676
of them.

485
00:17:39,826 --> 0:17:41,306
The first one is really very

486
00:17:41,306 --> 0:17:43,246
much like restores as we're used

487
00:17:43,246 --> 0:17:43,456
to.

488
00:17:43,916 --> 0:17:46,076
We can specify a source volume.

489
00:17:46,306 --> 0:17:48,276
You can specify a target volume.

490
00:17:48,866 --> 0:17:50,546
And the idea is that the target

491
00:17:50,546 --> 0:17:52,396
volume will be completely erased

492
00:17:52,396 --> 0:17:53,206
and replaced.

493
00:17:53,436 --> 0:17:55,086
Or its contents replaced by the

494
00:17:55,086 --> 0:17:56,166
contents of the source volume.

495
00:17:56,396 --> 0:17:58,456
Now in this case, we will have

496
00:17:58,456 --> 0:18:00,646
Volume 2 be our target volume.

497
00:17:58,456 --> 0:18:00,646
Volume 2 be our target volume.

498
00:18:00,646 --> 0:18:01,696
And so our restore would look

499
00:18:01,696 --> 0:18:02,526
something like this.

500
00:18:02,716 --> 0:18:03,806
You would see a sample command

501
00:18:03,806 --> 0:18:04,446
line right here.

502
00:18:05,526 --> 0:18:08,056
And the result is Volume 2's

503
00:18:08,056 --> 0:18:09,546
contents are erased, replaced by

504
00:18:09,966 --> 0:18:11,016
the contents of the source

505
00:18:11,016 --> 0:18:11,316
volume.

506
00:18:11,316 --> 0:18:12,306
So the restored volume and

507
00:18:12,306 --> 0:18:14,526
source volume are the same.

508
00:18:14,526 --> 0:18:15,666
Notice, by the way, that in this

509
00:18:15,666 --> 0:18:17,666
example, the target container

510
00:18:17,666 --> 0:18:18,986
also has another volume in it.

511
00:18:19,076 --> 0:18:20,836
And that volume is left alone.

512
00:18:20,836 --> 0:18:21,976
Its contents are preserved.

513
00:18:22,206 --> 0:18:23,926
It does not form in any way a

514
00:18:24,016 --> 0:18:25,176
part of the replication

515
00:18:25,176 --> 0:18:25,726
operation.

516
00:18:26,766 --> 0:18:28,566
But there's another option that

517
00:18:28,566 --> 0:18:30,816
we have, which is instead of

518
00:18:30,876 --> 0:18:32,346
having to specify a target

519
00:18:32,346 --> 0:18:35,366
volume and erase that, we can

520
00:18:35,366 --> 0:18:37,796
instead generate a brand-new

521
00:18:37,796 --> 0:18:39,416
volume to be the target on the

522
00:18:39,416 --> 0:18:39,736
fly.

523
00:18:40,146 --> 0:18:42,596
And we do this by specifying the

524
00:18:42,596 --> 0:18:44,516
entire container as the target.

525
00:18:44,956 --> 0:18:46,646
And this tells ASR that what we

526
00:18:46,646 --> 0:18:48,446
really want is to generate a

527
00:18:48,446 --> 0:18:49,856
brand-new volume and restore to

528
00:18:49,856 --> 0:18:50,356
that.

529
00:18:50,416 --> 0:18:51,346
You can see another sample

530
00:18:51,346 --> 0:18:51,866
command line.

531
00:18:51,866 --> 0:18:53,706
And the result is a new volume

532
00:18:53,706 --> 0:18:55,766
is created and restored to.

533
00:18:56,026 --> 0:18:57,306
So in this case, Volume 1 and

534
00:18:57,306 --> 0:18:57,976
Volume 2 are both left alone.

535
00:19:02,186 --> 0:19:03,836
Now I want to step away for just

536
00:19:03,836 --> 0:19:05,386
a second from replication.

537
00:19:06,116 --> 0:19:07,696
And I want to talk about

538
00:19:08,086 --> 0:19:09,726
snapshots in APFS.

539
00:19:10,176 --> 0:19:12,016
So a snapshot is just a

540
00:19:12,056 --> 0:19:13,706
point-in-time capture of all

541
00:19:13,706 --> 0:19:14,496
volume state.

542
00:19:15,256 --> 0:19:16,466
So for example, we may have a

543
00:19:16,466 --> 0:19:17,886
volume with a number of files on

544
00:19:17,886 --> 0:19:17,986
it.

545
00:19:18,266 --> 0:19:19,986
We can take a snapshot of that

546
00:19:19,986 --> 0:19:20,416
volume.

547
00:19:21,126 --> 0:19:24,366
And the result is a capture, a

548
00:19:24,366 --> 0:19:25,706
freeze frame, of what that

549
00:19:25,706 --> 0:19:27,226
volume looks like at the time

550
00:19:27,226 --> 0:19:28,366
that the snapshot is taken.

551
00:19:28,676 --> 0:19:30,146
If we make subsequent changes to

552
00:19:30,146 --> 0:19:31,666
the volume, like for example,

553
00:19:31,756 --> 0:19:33,696
deleting a file or adding some

554
00:19:33,696 --> 0:19:36,576
new files, the snapshot is still

555
00:19:36,576 --> 0:19:38,796
encompassing all of the state

556
00:19:38,796 --> 0:19:40,196
that existed at the time it was

557
00:19:40,196 --> 0:19:40,686
created.

558
00:19:41,816 --> 0:19:43,456
So in this case, if we look at

559
00:19:43,456 --> 0:19:45,276
the live volume, it appears that

560
00:19:45,276 --> 0:19:46,806
that file that was deleted is

561
00:19:46,806 --> 0:19:47,466
not there.

562
00:19:47,796 --> 0:19:49,016
But in some sense, it is still

563
00:19:49,016 --> 0:19:50,336
there because it's part of that

564
00:19:50,336 --> 0:19:50,886
snapshot.

565
00:19:52,016 --> 0:19:53,276
So you might wonder, "Well, what

566
00:19:53,276 --> 0:19:53,996
does this have to do with

567
00:19:53,996 --> 0:19:54,656
replication?"

568
00:19:55,416 --> 0:19:57,156
Well, once again, new with macOS

569
00:19:57,156 --> 0:19:59,386
Catalina, we can now do

570
00:20:00,486 --> 0:20:02,796
restores, replication of

571
00:20:02,796 --> 0:20:03,466
snapshots.

572
00:20:04,596 --> 0:20:05,976
So to understand what that means

573
00:20:05,976 --> 0:20:06,043
--

574
00:20:06,043 --> 0:20:07,096
[ Applause ]

575
00:20:07,096 --> 0:20:07,346
Thank you.

576
00:20:09,056 --> 0:20:10,236
To understand what that means,

577
00:20:10,236 --> 0:20:11,846
consider this volume here on the

578
00:20:11,846 --> 0:20:12,236
left.

579
00:20:12,236 --> 0:20:14,116
It has two snapshots in it, Snap

580
00:20:14,116 --> 0:20:14,876
1 and Snap 2.

581
00:20:15,436 --> 0:20:16,596
They contain some files in

582
00:20:16,596 --> 0:20:17,826
common, the yellow ones, some

583
00:20:17,826 --> 0:20:19,926
files that are in one snapshot

584
00:20:19,926 --> 0:20:21,066
and not the other, some files

585
00:20:21,066 --> 0:20:22,066
that are in the other and not

586
00:20:22,066 --> 0:20:23,446
the one, and a file that's not

587
00:20:23,446 --> 0:20:24,286
an either snapshot.

588
00:20:24,886 --> 0:20:30,416
I can restore this volume to a

589
00:20:30,416 --> 0:20:32,176
target volume over here on the

590
00:20:32,276 --> 0:20:32,646
right.

591
00:20:32,646 --> 0:20:33,626
It's currently empty.

592
00:20:34,376 --> 0:20:35,536
And the idea there, of course,

593
00:20:35,536 --> 0:20:37,326
is that at the end of that

594
00:20:37,326 --> 0:20:39,086
restore, the target volume looks

595
00:20:39,086 --> 0:20:39,836
like the source volume.

596
00:20:40,036 --> 0:20:42,456
But instead of restoring the

597
00:20:42,456 --> 0:20:44,356
sort -- the live version of the

598
00:20:44,356 --> 0:20:45,526
source volume the way it

599
00:20:45,526 --> 0:20:47,006
currently looks, I can instead

600
00:20:47,006 --> 0:20:48,236
restore a snapshot.

601
00:20:48,526 --> 0:20:49,716
So if, for example, I want to

602
00:20:49,716 --> 0:20:53,296
restore Snap 1, I can specify

603
00:20:53,456 --> 0:20:54,486
that's the snapshot I want to

604
00:20:54,486 --> 0:20:54,946
restore.

605
00:20:55,966 --> 0:20:58,436
And the result is that my target

606
00:20:58,436 --> 0:20:59,996
now looks like Snap 1.

607
00:21:00,726 --> 0:21:02,546
And notice in particular that

608
00:21:02,546 --> 0:21:03,836
those two files, which were

609
00:21:03,836 --> 0:21:05,646
deleted from the source volume,

610
00:21:05,646 --> 0:21:07,026
have come back to life in the

611
00:21:07,026 --> 0:21:07,676
target volume.

612
00:21:10,216 --> 0:21:12,336
Having done that, maybe I want

613
00:21:12,336 --> 0:21:13,556
to add some new files to my

614
00:21:13,556 --> 0:21:14,326
target volume.

615
00:21:14,696 --> 0:21:17,306
But then, maybe now I want to

616
00:21:17,306 --> 0:21:19,756
restore Snap 2 to that target

617
00:21:19,756 --> 0:21:20,056
volume.

618
00:21:20,586 --> 0:21:23,366
And of course, again, the idea

619
00:21:23,366 --> 0:21:24,306
is that at the end of that

620
00:21:24,306 --> 0:21:25,596
operation, the live target

621
00:21:25,596 --> 0:21:27,366
volume should look like Snap 2

622
00:21:27,366 --> 0:21:28,246
from the source volume.

623
00:21:29,276 --> 0:21:31,756
But notice that both the source

624
00:21:31,756 --> 0:21:33,206
volume and the target volume

625
00:21:33,386 --> 0:21:35,216
already have Snap 1 on them.

626
00:21:35,456 --> 0:21:37,726
Wouldn't it be great, if instead

627
00:21:37,726 --> 0:21:39,436
of having to copy all of Snap 2,

628
00:21:39,436 --> 0:21:40,636
I could just copy the things

629
00:21:40,636 --> 0:21:42,336
that are different between Snap

630
00:21:42,336 --> 0:21:43,096
1 and Snap 2?

631
00:21:44,036 --> 0:21:44,836
Well, indeed I can.

632
00:21:45,076 --> 0:21:46,456
We call that difference between

633
00:21:46,456 --> 0:21:48,296
two snapshots a snapshot delta.

634
00:21:49,076 --> 0:21:51,646
And the idea is when I restore a

635
00:21:51,646 --> 0:21:53,906
snapshot delta, I'm specifying

636
00:21:53,906 --> 0:21:55,016
the two snapshots whose

637
00:21:55,016 --> 0:21:57,466
difference I want to take.

638
00:21:57,676 --> 0:21:58,806
I perform the restore.

639
00:21:59,486 --> 0:22:00,506
And of course at the end, the

640
00:21:59,486 --> 0:22:00,506
And of course at the end, the

641
00:22:00,506 --> 0:22:02,146
live target volume looks like

642
00:22:02,886 --> 0:22:04,296
Snap 2 from the source.

643
00:22:04,556 --> 0:22:05,716
But there's three things that I

644
00:22:05,716 --> 0:22:07,796
want you to notice about this

645
00:22:07,796 --> 0:22:08,386
target volume.

646
00:22:08,386 --> 0:22:10,986
Number one, all of those files

647
00:22:10,986 --> 0:22:11,926
which were not part of the

648
00:22:11,926 --> 0:22:13,306
snapshot on the target have been

649
00:22:13,306 --> 0:22:13,826
discarded.

650
00:22:15,156 --> 0:22:17,286
Number two, the files which were

651
00:22:17,286 --> 0:22:20,416
in Snap 1 but not in Snap 2 have

652
00:22:20,456 --> 0:22:22,306
been discarded from the live

653
00:22:22,306 --> 0:22:23,146
target volume.

654
00:22:23,146 --> 0:22:24,556
They, of course, still exist in

655
00:22:24,556 --> 0:22:25,946
Snap 1 on the target volume.

656
00:22:26,966 --> 0:22:28,416
And number three, the only

657
00:22:28,416 --> 0:22:30,026
things that we needed to copy

658
00:22:30,566 --> 0:22:31,656
were those files that were part

659
00:22:31,656 --> 0:22:33,536
of Snap 2 and not part of Snap

660
00:22:33,536 --> 0:22:33,836
1.

661
00:22:35,246 --> 0:22:37,096
Okay? Now this is a really

662
00:22:37,096 --> 0:22:38,026
powerful feature.

663
00:22:38,026 --> 0:22:39,746
It's a great way to do

664
00:22:39,746 --> 0:22:40,856
incremental releases.

665
00:22:41,046 --> 0:22:42,846
Imagine that you are updating a

666
00:22:42,846 --> 0:22:44,446
lab filled with 100 machines.

667
00:22:44,446 --> 0:22:45,856
You can save a lot of time, a

668
00:22:45,856 --> 0:22:47,566
lot of network bandwidth, if

669
00:22:47,566 --> 0:22:48,636
you're only copying the

670
00:22:48,636 --> 0:22:49,816
difference between a couple of

671
00:22:49,816 --> 0:22:51,696
snapshots on your source image.

672
00:22:55,146 --> 0:22:56,076
So that's what I had to say

673
00:22:56,076 --> 0:22:57,146
about replication.

674
00:22:57,326 --> 0:22:58,496
Take home points here.

675
00:22:59,126 --> 0:23:02,556
A more sophisticated filesystem

676
00:22:59,126 --> 0:23:02,556
A more sophisticated filesystem

677
00:23:02,556 --> 0:23:03,776
requires more sophisticated

678
00:23:03,776 --> 0:23:04,646
mechanisms for doing

679
00:23:04,646 --> 0:23:04,976
replication.

680
00:23:10,046 --> 0:23:11,066
APFS volume replication is

681
00:23:11,066 --> 0:23:12,986
really best done using ASR

682
00:23:12,986 --> 0:23:14,636
because it provides the highest

683
00:23:14,736 --> 0:23:15,986
fidelity of copies.

684
00:23:16,346 --> 0:23:17,616
And it handles the encryption as

685
00:23:17,616 --> 0:23:18,146
necessary.

686
00:23:18,596 --> 0:23:20,746
And finally, we can now restore

687
00:23:20,746 --> 0:23:22,686
snapshots in snapshot deltas

688
00:23:22,736 --> 0:23:23,506
using ASR.

689
00:23:24,196 --> 0:23:25,586
And with that, I'm going to turn

690
00:23:25,586 --> 0:23:26,716
it over to Bill, who will talk

691
00:23:26,716 --> 0:23:28,166
about external file access for

692
00:23:28,166 --> 0:23:28,606
iOS.

693
00:23:28,666 --> 0:23:28,976
Thank you.

694
00:23:29,516 --> 0:23:34,376
[ Applause ]

695
00:23:34,876 --> 0:23:35,396
&gt;&gt; Thank you, John.

696
00:23:36,006 --> 0:23:37,046
Good afternoon.

697
00:23:37,856 --> 0:23:40,196
You may recall two years ago, we

698
00:23:40,196 --> 0:23:42,276
introduced Files app and a new

699
00:23:42,276 --> 0:23:43,316
file provider, API.

700
00:23:44,396 --> 0:23:45,726
Together, they offer an

701
00:23:45,726 --> 0:23:47,106
excellent experience for

702
00:23:47,106 --> 0:23:48,376
Cloud-based documents.

703
00:23:49,576 --> 0:23:51,146
This year, we thought we could

704
00:23:51,146 --> 0:23:51,516
do more.

705
00:23:52,706 --> 0:23:54,186
So this year, we're happy to

706
00:23:54,186 --> 0:23:57,296
announce support on iOS for

707
00:23:57,296 --> 0:23:59,916
accessing files on network

708
00:23:59,916 --> 0:24:03,106
shares and on USB storage.

709
00:23:59,916 --> 0:24:03,106
shares and on USB storage.

710
00:24:04,516 --> 0:24:08,500
[ Cheering and Applause ]

711
00:24:10,926 --> 0:24:13,546
For USB storage, we support

712
00:24:13,546 --> 0:24:15,936
everything from compact flash

713
00:24:16,216 --> 0:24:19,766
and CF and cards and sticks, up

714
00:24:19,866 --> 0:24:21,466
through USB raid boxes.

715
00:24:22,906 --> 0:24:23,726
We support a number of

716
00:24:23,726 --> 0:24:24,616
filesystems.

717
00:24:25,026 --> 0:24:27,576
We support unencrypted APFS,

718
00:24:28,766 --> 0:24:32,356
unencrypted HFS Plus, and we

719
00:24:32,356 --> 0:24:34,976
support FAT and ExFAT.

720
00:24:35,516 --> 0:24:39,086
[ Applause ]

721
00:24:39,586 --> 0:24:41,926
This feature is available on all

722
00:24:41,926 --> 0:24:44,126
iOS and iPadOS devices.

723
00:24:44,976 --> 0:24:47,296
It's available on iPad Pro with

724
00:24:47,296 --> 0:24:47,936
USB-C.

725
00:24:48,726 --> 0:24:50,586
And for lightning devices, it's

726
00:24:50,586 --> 0:24:51,856
available with the appropriate

727
00:24:51,956 --> 0:24:52,666
adapters.

728
00:24:56,746 --> 0:24:59,156
Moving on for network shares, we

729
00:24:59,156 --> 0:25:02,416
support connecting to SMB 3.0

730
00:24:59,156 --> 0:25:02,416
support connecting to SMB 3.0

731
00:25:02,416 --> 0:25:02,966
servers.

732
00:25:05,476 --> 0:25:06,886
We support connecting over

733
00:25:06,886 --> 0:25:09,916
Wi-Fi, over cellular, and over

734
00:25:09,916 --> 0:25:10,346
Ethernet.

735
00:25:11,426 --> 0:25:12,616
There are a lot of exciting

736
00:25:12,616 --> 0:25:13,346
features here.

737
00:25:13,346 --> 0:25:15,266
But one that we wanted to call

738
00:25:15,266 --> 0:25:18,186
out is for our iOS devices,

739
00:25:18,186 --> 0:25:19,306
iPadOS devices.

740
00:25:19,626 --> 0:25:21,786
We're supporting search using

741
00:25:21,786 --> 0:25:23,166
the Windows Search Protocol.

742
00:25:24,446 --> 0:25:26,156
So all these devices can search

743
00:25:26,156 --> 0:25:27,766
your SMB server if it supports

744
00:25:28,536 --> 0:25:29,636
the WSP protocol.

745
00:25:30,896 --> 0:25:32,926
We're also really excited to

746
00:25:32,926 --> 0:25:34,266
announce that that that includes

747
00:25:34,546 --> 0:25:36,196
the SMB server and macOS

748
00:25:36,196 --> 0:25:36,636
Catalina.

749
00:25:41,526 --> 0:25:43,186
Before going on, I wanted to

750
00:25:43,186 --> 0:25:44,486
talk a moment about security.

751
00:25:45,296 --> 0:25:47,126
Security is a feature users have

752
00:25:47,126 --> 0:25:48,966
come to expect from iOS.

753
00:25:49,856 --> 0:25:51,956
Two of the tools we have used to

754
00:25:51,956 --> 0:25:54,366
help deliver this security are

755
00:25:54,706 --> 0:25:56,806
process separation and privilege

756
00:25:56,806 --> 0:25:57,436
separation.

757
00:25:57,986 --> 0:26:00,196
In developing this feature,

758
00:25:57,986 --> 0:26:00,196
In developing this feature,

759
00:26:00,296 --> 0:26:01,446
we've kept this in mind and

760
00:26:01,446 --> 0:26:02,636
incorporated them from the

761
00:26:02,636 --> 0:26:03,206
ground up.

762
00:26:04,446 --> 0:26:06,756
So for all of our volumes and

763
00:26:06,756 --> 0:26:08,306
shares, the filesystem

764
00:26:08,306 --> 0:26:10,586
manipulations happen not on the

765
00:26:10,636 --> 0:26:12,466
kernel but in a dedicated

766
00:26:12,496 --> 0:26:13,456
process space.

767
00:26:14,226 --> 0:26:16,906
This separation helps us deliver

768
00:26:17,126 --> 0:26:19,116
the security iOS users have come

769
00:26:19,116 --> 0:26:19,746
to expect.

770
00:26:22,616 --> 0:26:23,976
Now, let's see it in an action.

771
00:26:27,196 --> 0:26:28,976
All right, I have an iPad.

772
00:26:35,206 --> 0:26:37,166
And I don't know if -- you

773
00:26:37,166 --> 0:26:37,936
probably can't see it.

774
00:26:37,936 --> 0:26:38,896
But I have a USB stick

775
00:26:38,896 --> 0:26:39,326
connected.

776
00:26:40,546 --> 0:26:41,566
And I have mail.

777
00:26:42,266 --> 0:26:46,356
And in files, on the left, you

778
00:26:46,356 --> 0:26:48,066
can see the locations.

779
00:26:48,676 --> 0:26:49,786
iCloud Drive.

780
00:26:50,316 --> 0:26:51,676
If we had a third-party Cloud

781
00:26:51,676 --> 0:26:52,756
provider, they would be listed

782
00:26:52,756 --> 0:26:53,486
there as well.

783
00:26:53,486 --> 0:26:56,546
And we see a destination for our

784
00:26:56,546 --> 0:26:57,336
USB device.

785
00:26:57,926 --> 0:27:01,316
When we select it, we see our

786
00:26:57,926 --> 0:27:01,316
When we select it, we see our

787
00:27:01,506 --> 0:27:04,146
photos, our documents, all the

788
00:27:04,146 --> 0:27:05,906
files and directories on there.

789
00:27:06,516 --> 0:27:10,866
And we can manipulate them just

790
00:27:10,866 --> 0:27:13,006
like any other file in Files

791
00:27:13,006 --> 0:27:13,246
app.

792
00:27:13,246 --> 0:27:16,516
So to copy one, you just select

793
00:27:16,516 --> 0:27:18,846
it, get it ready for drag and

794
00:27:18,846 --> 0:27:21,316
drop, pick your destination,

795
00:27:21,986 --> 0:27:23,966
drag it, and drop it.

796
00:27:24,436 --> 0:27:25,356
And you can see it's already in

797
00:27:25,356 --> 0:27:25,916
the folder now.

798
00:27:28,826 --> 0:27:30,016
Another thing we like to do with

799
00:27:30,016 --> 0:27:33,266
devices is let's copy photos

800
00:27:33,766 --> 0:27:35,016
onto them.

801
00:27:35,226 --> 0:27:37,136
Photos, I have a picture a

802
00:27:37,136 --> 0:27:38,196
friend took in India of

803
00:27:38,236 --> 0:27:38,726
tomatoes.

804
00:27:40,366 --> 0:27:43,146
Let's save it to the USB.

805
00:27:43,406 --> 0:27:44,986
To do that, we just select the

806
00:27:44,986 --> 0:27:50,156
document, go to Share, go down

807
00:27:50,156 --> 0:27:52,196
the list to save to Files.

808
00:27:53,056 --> 0:27:55,106
You can see, as a destination,

809
00:27:55,106 --> 0:27:56,836
we have the USB stick listed.

810
00:27:57,436 --> 0:27:59,226
We just select it.

811
00:27:59,226 --> 0:27:59,986
It already is.

812
00:28:00,036 --> 0:28:00,806
We hit save.

813
00:28:01,496 --> 0:28:02,856
And it's copied.

814
00:28:03,516 --> 0:28:08,666
[ Cheering and Applause ]

815
00:28:09,166 --> 0:28:10,906
I expect many of you are

816
00:28:10,906 --> 0:28:12,176
application developers.

817
00:28:12,226 --> 0:28:13,216
And you're wondering how your

818
00:28:13,216 --> 0:28:14,646
application can take advantage

819
00:28:14,646 --> 0:28:15,026
of this.

820
00:28:15,946 --> 0:28:17,776
This feature is available to any

821
00:28:17,776 --> 0:28:19,556
and all applications linked on

822
00:28:19,616 --> 0:28:21,266
or after iOS 13.

823
00:28:22,326 --> 0:28:23,706
So rebuild your application.

824
00:28:24,116 --> 0:28:25,166
And you can take advantage.

825
00:28:26,626 --> 0:28:28,636
To see that in action, let's

826
00:28:28,636 --> 0:28:29,356
look at Numbers.

827
00:28:29,986 --> 0:28:32,926
When I open up Numbers, it's

828
00:28:32,926 --> 0:28:34,146
start -- it's starting with my

829
00:28:34,146 --> 0:28:34,796
iCloud Drive.

830
00:28:35,966 --> 0:28:37,136
The USB is listed as a

831
00:28:37,136 --> 0:28:37,736
destination.

832
00:28:38,396 --> 0:28:39,976
We select it.

833
00:28:43,166 --> 0:28:44,446
And there, we can see all of our

834
00:28:44,446 --> 0:28:45,066
documents.

835
00:28:45,146 --> 0:28:47,846
We can see our photos dimmed

836
00:28:48,056 --> 0:28:48,966
because they're not Numbers

837
00:28:48,966 --> 0:28:49,596
documents.

838
00:28:49,876 --> 0:28:51,586
And then we see that we've had

839
00:28:51,896 --> 0:28:53,836
two Numbers documents on this

840
00:28:53,836 --> 0:28:54,126
drive.

841
00:28:55,266 --> 0:28:56,806
Let's open one of them.

842
00:28:56,806 --> 0:28:59,186
It's a loan comparison comparing

843
00:28:59,186 --> 0:29:00,616
two different loan amounts and

844
00:28:59,186 --> 0:29:00,616
two different loan amounts and

845
00:29:00,616 --> 0:29:01,656
two different interest rates.

846
00:29:02,836 --> 0:29:03,976
Just for comparison, let's see

847
00:29:03,976 --> 0:29:04,546
what happens if we raise the

848
00:29:04,546 --> 0:29:04,966
interest rate.

849
00:29:09,156 --> 0:29:09,246
No. Oh.

850
00:29:10,016 --> 0:29:11,056
[ Laughter ]

851
00:29:11,056 --> 0:29:11,976
Set it to 20, not 200.

852
00:29:18,046 --> 0:29:21,856
Oh, no. Well, that's crazy.

853
00:29:22,508 --> 0:29:24,508
[ Laughter ]

854
00:29:27,056 --> 0:29:28,926
And you can see on the -- see

855
00:29:28,926 --> 0:29:30,676
live the interest rate amounts

856
00:29:30,676 --> 0:29:30,956
changing.

857
00:29:38,396 --> 0:29:40,456
So what does this mean for you

858
00:29:41,446 --> 0:29:42,246
as developers?

859
00:29:43,306 --> 0:29:46,546
As I said, it's available if

860
00:29:46,546 --> 0:29:47,966
you're linked on or after iOS

861
00:29:47,966 --> 0:29:48,526
13.

862
00:29:48,686 --> 0:29:50,466
So rebuild your application and

863
00:29:50,466 --> 0:29:50,586
test.

864
00:29:55,346 --> 0:29:56,726
We're adding five different

865
00:29:56,726 --> 0:29:58,956
filesystem types to iOS.

866
00:29:59,836 --> 0:30:01,636
These filesystems act slightly

867
00:29:59,836 --> 0:30:01,636
These filesystems act slightly

868
00:30:01,636 --> 0:30:03,876
differently than APFS on the

869
00:30:03,876 --> 0:30:05,216
internal flash storage.

870
00:30:07,216 --> 0:30:09,836
One difference is iOS has always

871
00:30:09,836 --> 0:30:11,896
had case-sensitive filesystems.

872
00:30:12,796 --> 0:30:14,076
FAT and ExFAT are

873
00:30:14,366 --> 0:30:15,636
case-insensitive.

874
00:30:16,716 --> 0:30:18,816
And HFS and APFS can be

875
00:30:18,816 --> 0:30:19,996
configured either way.

876
00:30:21,636 --> 0:30:24,056
The Clone System call may not

877
00:30:24,056 --> 0:30:24,876
always be available.

878
00:30:26,246 --> 0:30:28,206
So as these differences are --

879
00:30:28,326 --> 0:30:29,386
if these are differences are

880
00:30:29,386 --> 0:30:30,926
important to you or as they are,

881
00:30:31,646 --> 0:30:32,896
please pay attention to volume

882
00:30:32,896 --> 0:30:33,676
capabilities.

883
00:30:34,656 --> 0:30:37,106
There are two different APIs or

884
00:30:37,106 --> 0:30:38,426
a couple of APIs that can get

885
00:30:38,426 --> 0:30:38,966
them for you.

886
00:30:39,746 --> 0:30:41,826
One I wanted to call out are the

887
00:30:41,826 --> 0:30:44,406
resourceValues in NSURL.

888
00:30:45,576 --> 0:30:47,726
These can give you parameters

889
00:30:47,726 --> 0:30:48,676
for the filesystem you're

890
00:30:48,676 --> 0:30:48,976
working with.

891
00:30:52,296 --> 0:30:53,756
Another important point is file

892
00:30:54,176 --> 0:30:58,006
movement may take time.

893
00:30:58,186 --> 0:31:00,006
So please put your temporary

894
00:30:58,186 --> 0:31:00,006
So please put your temporary

895
00:31:00,006 --> 0:31:02,066
files near your working files.

896
00:31:02,696 --> 0:31:05,226
If you don't, right, this is

897
00:31:05,226 --> 0:31:05,676
helpful.

898
00:31:06,586 --> 0:31:09,706
Because Save-Save uses a rename

899
00:31:09,946 --> 0:31:12,136
at the very end so that a user

900
00:31:12,136 --> 0:31:13,496
always sees a good file.

901
00:31:13,666 --> 0:31:15,456
They either see the document

902
00:31:15,456 --> 0:31:17,216
that they started with, or they

903
00:31:17,276 --> 0:31:18,046
see the new save.

904
00:31:19,356 --> 0:31:20,586
For this to work, we need that

905
00:31:20,586 --> 0:31:21,146
rename.

906
00:31:21,496 --> 0:31:22,466
And that only works if they're

907
00:31:22,466 --> 0:31:23,936
both on the same filesystem.

908
00:31:25,466 --> 0:31:26,806
Also, if you're not careful

909
00:31:26,806 --> 0:31:28,036
about your temporary files, they

910
00:31:28,036 --> 0:31:29,986
may end up in your container on

911
00:31:29,986 --> 0:31:31,116
the internal storage.

912
00:31:31,766 --> 0:31:32,686
And that's going to lead to a

913
00:31:32,686 --> 0:31:33,976
lot of unnecessary IO.

914
00:31:38,016 --> 0:31:39,416
File Manager can help you with

915
00:31:39,416 --> 0:31:39,786
this.

916
00:31:40,286 --> 0:31:42,796
If you ask for a URL for the

917
00:31:42,796 --> 0:31:44,496
itemReplacementDirectory

918
00:31:44,766 --> 0:31:46,456
appropriate for your documents,

919
00:31:46,706 --> 0:31:48,106
it will give you a temporary

920
00:31:48,106 --> 0:31:49,286
directory on the same

921
00:31:49,286 --> 0:31:49,976
filesystem.

922
00:31:55,406 --> 0:31:56,856
Another thing is that external

923
00:31:56,856 --> 0:31:58,016
devices can go away.

924
00:31:59,416 --> 0:32:01,206
A network can go out of range.

925
00:31:59,416 --> 0:32:01,206
A network can go out of range.

926
00:32:02,226 --> 0:32:03,876
A file server can go down.

927
00:32:04,486 --> 0:32:05,826
A CAT can disconnect a cable.

928
00:32:07,236 --> 0:32:08,556
These things can happen.

929
00:32:08,916 --> 0:32:10,106
And your application needs to be

930
00:32:10,106 --> 0:32:12,126
robust in face of it.

931
00:32:12,666 --> 0:32:13,886
One thing I especially wanted to

932
00:32:13,886 --> 0:32:16,056
point out is mmap can be

933
00:32:16,056 --> 0:32:16,656
dangerous.

934
00:32:17,366 --> 0:32:18,666
It can be really powerful.

935
00:32:18,986 --> 0:32:20,826
But if the file goes away, the

936
00:32:20,826 --> 0:32:22,096
only way the kernel can tell you

937
00:32:22,096 --> 0:32:23,666
that is with a BUS error.

938
00:32:25,536 --> 0:32:28,586
So one thing, if you're using

939
00:32:28,646 --> 0:32:31,066
NSData, there is a hint you can

940
00:32:31,066 --> 0:32:33,606
give NSData and say mmap this

941
00:32:33,636 --> 0:32:34,966
data from a file if it's safe.

942
00:32:40,086 --> 0:32:41,346
The last point is that external

943
00:32:41,346 --> 0:32:42,796
devices, all of them, have

944
00:32:42,886 --> 0:32:44,626
higher latencies than APFS on

945
00:32:44,666 --> 0:32:46,376
the internal flash storage.

946
00:32:47,566 --> 0:32:50,236
So if you're doing sizable IO,

947
00:32:50,236 --> 0:32:53,226
please keep multiple operations

948
00:32:53,396 --> 0:32:53,976
in-flight at once.

949
00:32:58,336 --> 0:33:00,206
So to summarize today's talk,

950
00:32:58,336 --> 0:33:00,206
So to summarize today's talk,

951
00:33:01,696 --> 0:33:03,116
Max talked to us about how we're

952
00:33:03,116 --> 0:33:06,086
making the root volume read-only

953
00:33:06,456 --> 0:33:07,376
for enhanced security.

954
00:33:08,046 --> 0:33:12,296
John talked to us about ASR and

955
00:33:12,296 --> 0:33:14,246
how you can use ASR to replicate

956
00:33:14,246 --> 0:33:16,016
volumes, including snapshot

957
00:33:16,016 --> 0:33:16,506
deltas.

958
00:33:17,106 --> 0:33:19,926
And I talked to you about how

959
00:33:19,926 --> 0:33:20,846
we're adding support for

960
00:33:20,846 --> 0:33:22,856
external files to iOS and iPadOS

961
00:33:22,856 --> 0:33:25,206
and how that will let you access

962
00:33:25,546 --> 0:33:27,856
files on USB storage and network

963
00:33:27,856 --> 0:33:28,316
shares.

964
00:33:30,346 --> 0:33:32,356
For more information, we have a

965
00:33:32,356 --> 0:33:34,126
lab after this session.

966
00:33:34,726 --> 0:33:37,286
And tomorrow, there's a talk,

967
00:33:38,906 --> 0:33:40,656
Combine and Advances in

968
00:33:40,696 --> 0:33:41,866
Foundation, where they're going

969
00:33:41,866 --> 0:33:43,456
to talk more about what you can

970
00:33:43,456 --> 0:33:45,396
do with Foundation on external

971
00:33:45,396 --> 0:33:45,736
media.

972
00:33:45,876 --> 0:33:48,046
And there's also a video

973
00:33:48,046 --> 0:33:50,926
session, What's New in File

974
00:33:50,926 --> 0:33:52,606
Management and Quick Look, that

975
00:33:52,746 --> 0:33:53,996
will talk more about the UI

976
00:33:53,996 --> 0:33:55,756
document aspects of this talk.

977
00:33:57,126 --> 0:33:57,406
Thank you.

978
00:33:58,516 --> 0:34:04,500
[ Applause ]
