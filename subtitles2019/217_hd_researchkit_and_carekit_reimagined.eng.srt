1
00:00:00,506 --> 0:00:05,500
[ Music ]

2
00:00:10,516 --> 0:00:16,566
[ Cheering and Applause ]

3
00:00:17,066 --> 0:00:19,106
&gt;&gt; Hello, everyone, and welcome

4
00:00:19,276 --> 0:00:21,476
to the session ResearchKit and

5
00:00:21,476 --> 0:00:22,986
CareKit reimagined.

6
00:00:23,686 --> 0:00:24,576
My name is Srinath.

7
00:00:24,866 --> 0:00:26,386
And I'm an engineer on the Help

8
00:00:26,466 --> 0:00:26,806
Team.

9
00:00:27,406 --> 0:00:28,776
Now, we have a lot of topics

10
00:00:28,906 --> 0:00:29,916
that we want to cover today.

11
00:00:30,396 --> 0:00:32,496
So let's jump right into it by

12
00:00:32,555 --> 0:00:34,456
looking at the overall flow for

13
00:00:34,456 --> 0:00:35,266
today's session.

14
00:00:36,436 --> 0:00:37,966
As always, we'll get started

15
00:00:38,186 --> 0:00:39,296
with community updates.

16
00:00:39,896 --> 0:00:41,746
We'll then talk about updates we

17
00:00:41,746 --> 0:00:42,846
have made to the ResearchKit

18
00:00:42,846 --> 0:00:43,376
framework.

19
00:00:44,016 --> 0:00:45,446
And then we have some really

20
00:00:45,446 --> 0:00:47,076
exciting news that we want to

21
00:00:47,076 --> 0:00:47,736
share about the CareKit

22
00:00:47,736 --> 0:00:47,976
framework.

23
00:00:51,096 --> 0:00:53,026
Jumping into community updates,

24
00:00:53,276 --> 0:00:55,256
we wanted to highlight some apps

25
00:00:55,596 --> 0:00:56,846
that have been released or

26
00:00:56,876 --> 0:00:59,026
updated in the past year that

27
00:00:59,156 --> 0:01:00,616
leverage the ResearchKit and

28
00:00:59,156 --> 0:01:00,616
leverage the ResearchKit and

29
00:01:00,616 --> 0:01:01,466
CareKit frameworks.

30
00:01:02,276 --> 0:01:04,046
One such example is the

31
00:01:04,046 --> 0:01:05,536
FocalView app, which was

32
00:01:05,536 --> 0:01:06,916
released by Novartis.

33
00:01:07,136 --> 0:01:08,826
And it focuses on running

34
00:01:08,856 --> 0:01:11,036
ophthalmic clinical trials on a

35
00:01:11,036 --> 0:01:12,076
digital platform.

36
00:01:13,226 --> 0:01:15,276
The other notable example is the

37
00:01:15,276 --> 0:01:16,956
FDA MyStudies app.

38
00:01:18,026 --> 0:01:19,396
Now, this app is the

39
00:01:19,396 --> 0:01:21,116
patient-facing part of a

40
00:01:21,116 --> 0:01:23,206
compliant platform that can be

41
00:01:23,206 --> 0:01:25,806
used for clinical trials or

42
00:01:25,806 --> 0:01:27,386
real-world evidence studies.

43
00:01:28,086 --> 0:01:30,476
The FDA went on to Open Source

44
00:01:30,646 --> 0:01:32,216
the MyStudies app for other

45
00:01:32,216 --> 0:01:34,236
organizations to rebrand,

46
00:01:34,436 --> 0:01:35,606
publish, and use.

47
00:01:37,006 --> 0:01:38,486
Now this year, apart from

48
00:01:38,486 --> 0:01:40,676
talking about apps, we also

49
00:01:40,676 --> 0:01:41,706
wanted to talk about

50
00:01:42,316 --> 0:01:43,096
publications.

51
00:01:43,806 --> 0:01:45,746
Now for context, the ResearchKit

52
00:01:45,746 --> 0:01:47,236
and CareKit frameworks were

53
00:01:47,236 --> 0:01:48,576
announced roughly three to four

54
00:01:48,576 --> 0:01:48,976
years back.

55
00:01:49,516 --> 0:01:50,736
And we have reached a point

56
00:01:50,836 --> 0:01:52,446
where we are starting to see an

57
00:01:52,516 --> 0:01:54,736
influx of publications coming

58
00:01:54,736 --> 0:01:56,266
from studies that have been

59
00:01:56,266 --> 0:01:57,596
running for the past few years.

60
00:01:58,946 --> 0:02:00,536
Most of these publications talk

61
00:01:58,946 --> 0:02:00,536
Most of these publications talk

62
00:02:00,536 --> 0:02:02,416
about how successful a

63
00:02:02,416 --> 0:02:04,496
mobile-based study design has

64
00:02:04,496 --> 0:02:05,786
been towards things like

65
00:02:06,026 --> 0:02:08,056
participant enrollment, the

66
00:02:08,056 --> 0:02:09,856
ability to recruit diverse

67
00:02:09,856 --> 0:02:11,276
participants from both a

68
00:02:11,276 --> 0:02:12,846
geographic and demographic

69
00:02:12,846 --> 0:02:15,036
standpoint, as well as the

70
00:02:15,126 --> 0:02:17,106
overall reduction in

71
00:02:17,166 --> 0:02:19,216
per-participant cost as more

72
00:02:19,216 --> 0:02:20,866
participants continue to enroll.

73
00:02:21,916 --> 0:02:23,436
Now let's take a look at a few

74
00:02:23,436 --> 0:02:24,496
of these publications.

75
00:02:25,176 --> 0:02:28,816
The Pride Study talks about how

76
00:02:28,816 --> 0:02:30,366
successful they were in

77
00:02:30,366 --> 0:02:32,826
recruiting and engaging with a

78
00:02:32,826 --> 0:02:35,406
large number of underrepresented

79
00:02:35,786 --> 0:02:37,536
participants for clinical

80
00:02:37,536 --> 0:02:37,976
research.

81
00:02:43,076 --> 0:02:44,356
The Healthy Pregnancy study

82
00:02:44,696 --> 0:02:46,736
talks about low attrition rates

83
00:02:47,136 --> 0:02:49,026
and how they were able to get

84
00:02:49,026 --> 0:02:50,536
their participants to fill out

85
00:02:50,796 --> 0:02:52,226
mobile-based surveys and

86
00:02:52,226 --> 0:02:53,776
questionnaires at a regular

87
00:02:53,776 --> 0:02:53,956
cadence.

88
00:02:59,116 --> 0:03:00,456
The Personal Touch publication

89
00:02:59,116 --> 0:03:00,456
The Personal Touch publication

90
00:03:00,616 --> 0:03:02,226
is interesting, because this

91
00:03:02,256 --> 0:03:04,276
publication went out in May

92
00:03:04,276 --> 0:03:05,216
2019.

93
00:03:05,576 --> 0:03:06,826
And we got to know about it

94
00:03:06,826 --> 0:03:08,966
roughly a week back when one of

95
00:03:08,966 --> 0:03:10,456
the authors submitted a poll

96
00:03:10,456 --> 0:03:12,656
request on GitHub to contribute

97
00:03:12,686 --> 0:03:14,096
some of the active tasks that

98
00:03:14,096 --> 0:03:15,736
they had built to support this

99
00:03:15,736 --> 0:03:17,516
publication back into the

100
00:03:17,516 --> 0:03:18,816
framework so that the rest of

101
00:03:18,816 --> 0:03:19,816
the community can leverage that

102
00:03:19,816 --> 0:03:19,976
as well.

103
00:03:23,046 --> 0:03:24,926
And on that note, all of our

104
00:03:24,926 --> 0:03:25,656
health frameworks --

105
00:03:26,046 --> 0:03:27,826
ResearchKit, CareKit, and

106
00:03:27,826 --> 0:03:29,796
HealthKit -- were introduced to

107
00:03:29,796 --> 0:03:31,956
empower the developers to create

108
00:03:31,956 --> 0:03:33,786
some amazing research and care

109
00:03:33,786 --> 0:03:34,186
apps.

110
00:03:35,146 --> 0:03:36,566
On top of that, we also have

111
00:03:36,566 --> 0:03:38,046
some really powerful devices

112
00:03:38,286 --> 0:03:40,326
that have sensors, starting with

113
00:03:40,326 --> 0:03:42,386
accelerometer and gyroscope, all

114
00:03:42,386 --> 0:03:43,726
the way to electrodes that

115
00:03:43,726 --> 0:03:45,766
allows your users to take an EKG

116
00:03:45,766 --> 0:03:45,946
reading.

117
00:03:50,046 --> 0:03:51,936
And be continued to be amazed by

118
00:03:51,936 --> 0:03:53,666
the work that our community of

119
00:03:53,756 --> 0:03:55,826
developers, researchers, and

120
00:03:55,826 --> 0:03:57,736
health professionals are able to

121
00:03:57,736 --> 0:03:59,546
accomplish by leveraging our

122
00:03:59,606 --> 0:04:00,916
products and platforms.

123
00:03:59,606 --> 0:04:00,916
products and platforms.

124
00:04:02,506 --> 0:04:04,726
But every year, we still receive

125
00:04:04,826 --> 0:04:07,306
a lot of emails asking about a

126
00:04:07,306 --> 0:04:08,556
variety of questions, like,

127
00:04:08,786 --> 0:04:10,046
"What is ResearchKit and

128
00:04:10,046 --> 0:04:10,486
CareKit?

129
00:04:10,746 --> 0:04:12,746
Or how do I create a research or

130
00:04:12,746 --> 0:04:13,276
a care app?"

131
00:04:13,276 --> 0:04:15,606
And we also received proposals

132
00:04:15,876 --> 0:04:18,386
from research institutions for

133
00:04:18,505 --> 0:04:21,016
device grant requests, which is

134
00:04:21,016 --> 0:04:22,816
why this year, we are currently

135
00:04:22,816 --> 0:04:23,726
working on a couple of

136
00:04:23,726 --> 0:04:24,396
initiatives.

137
00:04:24,806 --> 0:04:26,216
And right now, I just want to

138
00:04:26,216 --> 0:04:28,296
give a brief preview about these

139
00:04:28,296 --> 0:04:28,926
initiatives.

140
00:04:29,556 --> 0:04:32,056
The first one is an

141
00:04:32,116 --> 0:04:33,986
investigator's support program

142
00:04:34,126 --> 0:04:35,086
that we are piloting.

143
00:04:35,646 --> 0:04:37,126
We are currently developing this

144
00:04:37,196 --> 0:04:37,656
program.

145
00:04:37,956 --> 0:04:39,766
And this will be live later this

146
00:04:39,766 --> 0:04:40,086
year.

147
00:04:40,626 --> 0:04:42,266
Now, this will be a Limited

148
00:04:42,266 --> 0:04:44,276
Apple Watch Grant Program that

149
00:04:44,276 --> 0:04:46,536
will have a very simple and easy

150
00:04:46,536 --> 0:04:48,236
proposal submission process.

151
00:04:49,216 --> 0:04:51,976
We will prioritize studies that

152
00:04:51,976 --> 0:04:54,496
advance science and help people

153
00:04:54,686 --> 0:04:57,226
to lead healthier lives by

154
00:04:57,316 --> 0:04:59,076
uniquely leveraging our

155
00:04:59,076 --> 0:04:59,876
ecosystem.

156
00:05:00,416 --> 0:05:03,346
The second initiative that we

157
00:05:03,346 --> 0:05:05,836
want to preview right now is a

158
00:05:05,836 --> 0:05:07,176
redesigned website.

159
00:05:07,986 --> 0:05:09,676
Now, this website will contain

160
00:05:09,676 --> 0:05:11,696
clear information for everyone

161
00:05:11,696 --> 0:05:13,386
who wants to learn more about

162
00:05:13,386 --> 0:05:14,616
the ResearchKit and CareKit

163
00:05:14,616 --> 0:05:15,196
frameworks.

164
00:05:15,856 --> 0:05:17,736
You will also be able to gather

165
00:05:17,736 --> 0:05:19,596
insights from other researchers

166
00:05:19,596 --> 0:05:21,026
and developers who are

167
00:05:21,066 --> 0:05:22,646
leveraging these frameworks to

168
00:05:22,646 --> 0:05:24,696
build some amazing research and

169
00:05:24,696 --> 0:05:25,266
care apps.

170
00:05:25,776 --> 0:05:27,316
This website will also have a

171
00:05:27,316 --> 0:05:29,226
lot more information about the

172
00:05:29,226 --> 0:05:30,836
investigator support program.

173
00:05:31,506 --> 0:05:33,396
And both the website and the

174
00:05:33,396 --> 0:05:34,776
investigator support program

175
00:05:34,776 --> 0:05:37,066
itself will be live in Fall of

176
00:05:37,066 --> 0:05:38,106
2019.

177
00:05:38,306 --> 0:05:39,886
And we are really excited about

178
00:05:39,886 --> 0:05:40,166
this.

179
00:05:41,106 --> 0:05:43,706
And now, let's switch gears and

180
00:05:43,706 --> 0:05:45,126
talk about updates that we have

181
00:05:45,126 --> 0:05:46,236
made to the ResearchKit

182
00:05:46,306 --> 0:05:46,736
framework.

183
00:05:46,736 --> 0:05:48,576
We want to cover two main

184
00:05:48,576 --> 0:05:51,566
topics, UI updates, and active

185
00:05:51,606 --> 0:05:52,186
tasks.

186
00:05:53,436 --> 0:05:54,736
Let's get started with UI

187
00:05:54,736 --> 0:05:55,176
updates.

188
00:05:56,066 --> 0:05:58,536
This year, our main focus has

189
00:05:58,536 --> 0:06:00,406
been around refining the user

190
00:05:58,536 --> 0:06:00,406
been around refining the user

191
00:06:00,406 --> 0:06:02,886
experience, around answering

192
00:06:02,886 --> 0:06:03,896
survey questionnaires.

193
00:06:04,286 --> 0:06:05,706
Because we realized that some of

194
00:06:05,746 --> 0:06:07,006
the validated medical

195
00:06:07,036 --> 0:06:08,756
questionnaires and onboarding

196
00:06:08,806 --> 0:06:09,976
flows can be extremely long.

197
00:06:13,046 --> 0:06:14,236
So you can see here that we have

198
00:06:14,396 --> 0:06:16,586
updated the card styling for you

199
00:06:16,586 --> 0:06:18,496
to provide more contextual

200
00:06:18,496 --> 0:06:19,796
information to your users.

201
00:06:20,686 --> 0:06:22,726
This includes an intra step

202
00:06:22,996 --> 0:06:25,846
progress indicator, as well as a

203
00:06:25,846 --> 0:06:26,656
Learn More button.

204
00:06:27,296 --> 0:06:29,156
Now this button can be used for

205
00:06:29,156 --> 0:06:31,306
situations where your questions

206
00:06:31,306 --> 0:06:33,066
or answer choices contain

207
00:06:33,266 --> 0:06:35,056
terminologies but just not quite

208
00:06:35,056 --> 0:06:36,086
self-explanatory.

209
00:06:36,606 --> 0:06:38,196
So in this example, if your

210
00:06:38,196 --> 0:06:40,146
users are unaware of what

211
00:06:40,146 --> 0:06:42,326
narcolepsy actually means, they

212
00:06:42,326 --> 0:06:43,776
can simply tap on the Learn More

213
00:06:43,776 --> 0:06:45,866
button to pull up a sheet that

214
00:06:45,866 --> 0:06:47,786
gives them a lot of information

215
00:06:47,856 --> 0:06:49,176
about the question and the

216
00:06:49,176 --> 0:06:50,356
answer choices themselves.

217
00:06:51,066 --> 0:06:53,936
Now you'll notice that we have

218
00:06:53,936 --> 0:06:55,636
added a Top Content Image view.

219
00:06:56,136 --> 0:06:57,696
And this styling will now be

220
00:06:57,736 --> 0:06:58,986
consistent throughout

221
00:06:58,986 --> 0:07:01,316
ResearchKit, so all of our steps

222
00:06:58,986 --> 0:07:01,316
ResearchKit, so all of our steps

223
00:07:01,556 --> 0:07:03,536
now have the ability to display

224
00:07:03,586 --> 0:07:05,536
rich media content via the Top

225
00:07:05,536 --> 0:07:06,556
Content image view.

226
00:07:07,096 --> 0:07:09,506
And if you scroll further down,

227
00:07:09,506 --> 0:07:11,176
we have added a new object of

228
00:07:11,246 --> 0:07:12,926
type body items, which can be

229
00:07:12,926 --> 0:07:15,446
used to compose lists that will

230
00:07:15,446 --> 0:07:17,216
be automatically formatted for

231
00:07:17,216 --> 0:07:17,506
you.

232
00:07:17,506 --> 0:07:20,566
And now let's take a look at how

233
00:07:20,566 --> 0:07:21,926
you can incorporate these

234
00:07:21,926 --> 0:07:22,966
changes into your existing apps.

235
00:07:26,276 --> 0:07:27,396
So the first thing that you want

236
00:07:27,396 --> 0:07:28,946
to do is create an instance of

237
00:07:29,036 --> 0:07:31,036
ORK learnMoreStep with a unique

238
00:07:31,036 --> 0:07:31,766
identifier.

239
00:07:32,336 --> 0:07:35,316
All of our steps now have this

240
00:07:35,316 --> 0:07:36,376
image property, which will

241
00:07:36,376 --> 0:07:38,426
display as the top content image

242
00:07:38,426 --> 0:07:38,656
view.

243
00:07:39,276 --> 0:07:40,686
You can also customize other

244
00:07:40,686 --> 0:07:43,406
properties, like title and text.

245
00:07:44,696 --> 0:07:46,106
The other thing that you need to

246
00:07:46,106 --> 0:07:48,096
do is create an instance of

247
00:07:48,206 --> 0:07:49,416
ORKBodyItem.

248
00:07:49,816 --> 0:07:50,946
And it accepts the following

249
00:07:50,946 --> 0:07:52,566
parameters, like text, detailed

250
00:07:52,566 --> 0:07:53,546
text, and a style.

251
00:07:53,976 --> 0:07:55,216
You can choose between bullet

252
00:07:55,256 --> 0:07:57,016
point images and just plain

253
00:07:57,796 --> 0:07:58,246
text.

254
00:07:58,246 --> 0:08:00,626
Now all of our steps accept an

255
00:07:58,246 --> 0:08:00,626
Now all of our steps accept an

256
00:08:00,686 --> 0:08:01,966
array of body items.

257
00:08:02,376 --> 0:08:04,126
So let's assign this body item

258
00:08:04,126 --> 0:08:05,506
to the learnMoreStep.

259
00:08:06,536 --> 0:08:07,436
The next thing that you would

260
00:08:07,436 --> 0:08:09,426
want to do is create an instance

261
00:08:09,706 --> 0:08:12,396
of learnMoreItem and bypassing

262
00:08:12,396 --> 0:08:12,856
in the step.

263
00:08:13,546 --> 0:08:15,436
So this is the object that

264
00:08:15,436 --> 0:08:16,896
essentially creates the Detail

265
00:08:16,896 --> 0:08:18,746
Disclosure button on the screen.

266
00:08:19,466 --> 0:08:21,096
We also have another initializer

267
00:08:21,096 --> 0:08:21,906
which accepts text.

268
00:08:22,386 --> 0:08:23,926
So that one will be displayed as

269
00:08:23,926 --> 0:08:24,936
a hyperlink in your step.

270
00:08:27,156 --> 0:08:28,906
We have also added another

271
00:08:28,906 --> 0:08:31,886
initializer to ORK form items in

272
00:08:31,886 --> 0:08:33,546
order to help you customize the

273
00:08:33,606 --> 0:08:35,436
section headers, which allows

274
00:08:35,486 --> 0:08:37,466
you to group multiple form items

275
00:08:37,525 --> 0:08:38,736
under the same section.

276
00:08:39,285 --> 0:08:41,086
Now this accepts properties like

277
00:08:41,086 --> 0:08:43,366
sectionTitle, detailText, the

278
00:08:43,366 --> 0:08:45,066
learnMoreItem, and the toggle to

279
00:08:45,066 --> 0:08:47,006
indicate whether or not you want

280
00:08:47,006 --> 0:08:48,256
to display the intra step

281
00:08:48,306 --> 0:08:49,276
progress indicator.

282
00:08:50,636 --> 0:08:51,426
And now that you have

283
00:08:51,426 --> 0:08:52,836
incorporated these changes into

284
00:08:52,836 --> 0:08:55,586
your apps, your users can make

285
00:08:55,676 --> 0:08:57,416
an informed decision before

286
00:08:57,416 --> 0:08:58,976
answering any of your questions.

287
00:09:02,326 --> 0:09:04,136
Now let's move on to active

288
00:09:04,136 --> 0:09:04,306
tasks.

289
00:09:05,176 --> 0:09:06,946
Now similar to last year, this

290
00:09:06,946 --> 0:09:08,946
year, we will be focusing on our

291
00:09:08,946 --> 0:09:10,626
three main areas of health --

292
00:09:11,126 --> 0:09:14,626
vision, hearing, and speech.

293
00:09:15,956 --> 0:09:17,156
Now when it comes to measuring

294
00:09:17,156 --> 0:09:19,386
visual health, there are two key

295
00:09:19,386 --> 0:09:21,046
metrics that are considered as

296
00:09:21,086 --> 0:09:23,906
the gold standard, visual acuity

297
00:09:24,436 --> 0:09:25,796
and contrast sensitivity.

298
00:09:27,096 --> 0:09:28,996
Visual acuity is essentially

299
00:09:28,996 --> 0:09:31,796
your ability to distinguish and

300
00:09:31,796 --> 0:09:33,366
identify an object along with

301
00:09:33,366 --> 0:09:33,976
its features.

302
00:09:37,266 --> 0:09:39,456
It comes in two stimulis.

303
00:09:39,696 --> 0:09:41,636
One is the Landolt C, and the

304
00:09:41,636 --> 0:09:43,606
other one is a Snellen or

305
00:09:43,606 --> 0:09:44,196
Tumbling E.

306
00:09:44,716 --> 0:09:46,806
Now our first active task in the

307
00:09:46,806 --> 0:09:48,706
visual acuity space is a

308
00:09:48,706 --> 0:09:50,726
contribution by Novartis from

309
00:09:50,726 --> 0:09:51,566
their FocalView app.

310
00:09:52,506 --> 0:09:54,596
Now, this app essentially

311
00:09:54,596 --> 0:09:56,636
requests the user to align the

312
00:09:56,636 --> 0:09:58,326
outer dial with the opening in

313
00:09:58,326 --> 0:09:59,026
the letter C.

314
00:10:00,536 --> 0:10:01,976
Now the Landolt C stimuli

315
00:10:02,366 --> 0:10:04,276
remains in fixed contrast but

316
00:10:04,276 --> 0:10:06,216
keeps decreasing in size and

317
00:10:06,216 --> 0:10:08,186
pops up in random orientations.

318
00:10:09,026 --> 0:10:10,936
Once a user completes this task,

319
00:10:10,936 --> 0:10:12,846
the developer will receive a

320
00:10:12,846 --> 0:10:14,606
visual acuity rating score for

321
00:10:14,606 --> 0:10:14,976
that user.

322
00:10:18,046 --> 0:10:19,596
To incorporate this in your app,

323
00:10:19,596 --> 0:10:21,026
you create an instance of

324
00:10:21,136 --> 0:10:23,466
ORKLandoltCStep with a unique

325
00:10:23,466 --> 0:10:24,186
identifier.

326
00:10:24,986 --> 0:10:26,876
You then set the testType to be

327
00:10:26,876 --> 0:10:27,466
acuity.

328
00:10:28,306 --> 0:10:29,986
And then as always, you can

329
00:10:29,986 --> 0:10:31,516
create an ordered task by

330
00:10:31,516 --> 0:10:32,926
passing in an array of steps,

331
00:10:33,516 --> 0:10:35,096
then pass the task to create a

332
00:10:35,096 --> 0:10:36,256
TaskViewController, which you

333
00:10:36,256 --> 0:10:36,976
can present within your app.

334
00:10:42,106 --> 0:10:43,946
Our second active task in the

335
00:10:43,946 --> 0:10:46,576
visual acuity space leverages

336
00:10:46,776 --> 0:10:49,386
Tumbling E as the stimuli.

337
00:10:50,276 --> 0:10:51,676
Now as part of this task, the

338
00:10:51,676 --> 0:10:53,296
user will be expected to swipe

339
00:10:53,456 --> 0:10:55,276
into the direction of the arms

340
00:10:55,336 --> 0:10:56,246
of the letter E.

341
00:10:57,196 --> 0:10:58,566
Now similar to Landolt C, the

342
00:10:58,566 --> 0:11:00,966
Tumbling E will remain fixed in

343
00:10:58,566 --> 0:11:00,966
Tumbling E will remain fixed in

344
00:11:00,966 --> 0:11:03,196
contrast, will decrease in size,

345
00:11:03,256 --> 0:11:04,206
and pop up in random

346
00:11:04,206 --> 0:11:04,926
orientation.

347
00:11:05,546 --> 0:11:06,946
But the interesting piece here

348
00:11:07,296 --> 0:11:08,856
is that the testing distance,

349
00:11:09,056 --> 0:11:10,226
along with the size of the

350
00:11:10,226 --> 0:11:12,016
stimuli, is controlled by the

351
00:11:12,066 --> 0:11:12,956
TrueDepth camera.

352
00:11:13,506 --> 0:11:16,086
And once the user completes this

353
00:11:16,086 --> 0:11:18,006
task, you will receive a lot

354
00:11:18,006 --> 0:11:20,306
more value, where MAR stands for

355
00:11:20,306 --> 0:11:22,326
Minimum Angle of Resolution.

356
00:11:24,216 --> 0:11:25,536
To incorporate this in your app,

357
00:11:25,856 --> 0:11:27,236
you create an instance of

358
00:11:27,236 --> 0:11:29,986
ORKTumblingEStep with a unique

359
00:11:29,986 --> 0:11:30,676
identifier.

360
00:11:31,246 --> 0:11:33,146
You can also specify the minimum

361
00:11:33,146 --> 0:11:34,716
and maximum viewing distance

362
00:11:35,036 --> 0:11:36,746
that is specific to your trial.

363
00:11:37,286 --> 0:11:40,086
And same as always, you create

364
00:11:40,086 --> 0:11:41,906
an OrderedTask, pass that to the

365
00:11:41,906 --> 0:11:44,046
ViewController, and present it.

366
00:11:45,396 --> 0:11:47,916
Now let's move on to our next

367
00:11:47,916 --> 0:11:49,846
big category ambition, contrast

368
00:11:49,846 --> 0:11:50,506
sensitivity.

369
00:11:51,046 --> 0:11:52,756
This essentially refers to your

370
00:11:52,756 --> 0:11:54,666
ability to distinguish an object

371
00:11:54,666 --> 0:11:55,726
from its background.

372
00:11:56,466 --> 0:11:58,586
And it comes in -- so two

373
00:11:58,586 --> 0:12:00,986
stimuli is most commonly used to

374
00:11:58,586 --> 0:12:00,986
stimuli is most commonly used to

375
00:12:01,016 --> 0:12:02,446
test for this particular

376
00:12:02,696 --> 0:12:04,116
contrast sensitivity feature.

377
00:12:04,746 --> 0:12:06,906
One is Landolt C, and the other

378
00:12:06,906 --> 0:12:07,926
one is a Gabor Patch.

379
00:12:11,136 --> 0:12:12,206
The first active task in

380
00:12:12,206 --> 0:12:13,826
contrast sensitivity is once

381
00:12:13,826 --> 0:12:15,506
again a contribution by Novartis

382
00:12:15,506 --> 0:12:17,386
from their FocalView app.

383
00:12:17,596 --> 0:12:19,226
Now, this is very much in line

384
00:12:19,226 --> 0:12:20,496
with the visual acuity task.

385
00:12:20,826 --> 0:12:22,446
But the key difference here is

386
00:12:22,446 --> 0:12:24,816
that the Landolt C remains fixed

387
00:12:24,816 --> 0:12:27,286
in size but keeps decreasing in

388
00:12:27,286 --> 0:12:28,756
contrast as it is being

389
00:12:28,756 --> 0:12:29,846
presented in random

390
00:12:29,846 --> 0:12:30,616
orientations.

391
00:12:31,606 --> 0:12:32,986
And once the user completes this

392
00:12:33,036 --> 0:12:34,646
task, you will receive the

393
00:12:34,646 --> 0:12:35,776
visual acuity rating score for

394
00:12:35,776 --> 0:12:35,976
the user.

395
00:12:39,136 --> 0:12:40,806
Adding this to your app is

396
00:12:40,876 --> 0:12:42,596
exactly the same as the visual

397
00:12:42,706 --> 0:12:43,266
acuity task.

398
00:12:43,616 --> 0:12:45,136
The only key difference is that

399
00:12:45,136 --> 0:12:46,116
you're going to toggle the test

400
00:12:46,116 --> 0:12:46,976
type to be contrast sensitivity.

401
00:12:51,066 --> 0:12:52,706
As part of our next task, we

402
00:12:52,706 --> 0:12:54,616
will try to generate the

403
00:12:54,646 --> 0:12:56,496
contrast sensitivity function

404
00:12:56,496 --> 0:12:58,186
for a user by presenting them

405
00:12:58,186 --> 0:12:59,686
with the stimuli known as the

406
00:12:59,686 --> 0:13:00,436
Gabor Patch.

407
00:12:59,686 --> 0:13:00,436
Gabor Patch.

408
00:13:00,966 --> 0:13:02,206
And this is what it looks like.

409
00:13:03,026 --> 0:13:04,136
So you'll notice that there are

410
00:13:04,186 --> 0:13:06,356
certain lines on the stimuli

411
00:13:06,356 --> 0:13:08,796
that is leaning to the right,

412
00:13:09,406 --> 0:13:10,746
especially the top tilt.

413
00:13:11,606 --> 0:13:12,976
And in the other stimuli, you

414
00:13:12,976 --> 0:13:14,576
will notice that the top tilt,

415
00:13:14,786 --> 0:13:16,696
or the upward tilt, is leaning

416
00:13:16,696 --> 0:13:17,216
to the left.

417
00:13:17,756 --> 0:13:19,726
Now, your users will be expected

418
00:13:19,726 --> 0:13:22,036
to recognize that leaning of the

419
00:13:22,036 --> 0:13:23,906
tilt and select the appropriate

420
00:13:23,906 --> 0:13:24,976
direction as part of the task.

421
00:13:29,046 --> 0:13:31,416
Now, the Gabor Patch stimuli is

422
00:13:31,416 --> 0:13:33,646
generated programmatically using

423
00:13:33,646 --> 0:13:35,626
an adaptive algorithm that

424
00:13:35,626 --> 0:13:37,326
varies the spatial frequency.

425
00:13:38,796 --> 0:13:40,166
Now the Gabor Patch will be

426
00:13:40,166 --> 0:13:41,396
displayed with random

427
00:13:41,396 --> 0:13:43,106
orientations and different

428
00:13:43,106 --> 0:13:44,966
positions within the screen.

429
00:13:45,976 --> 0:13:47,716
And once again, the testing

430
00:13:47,716 --> 0:13:49,096
distance and the size of the

431
00:13:49,096 --> 0:13:51,166
stimuli itself is controlled

432
00:13:51,246 --> 0:13:52,996
real time by the TrueDepth

433
00:13:52,996 --> 0:13:53,416
camera.

434
00:13:54,886 --> 0:13:56,176
Once the user completes this

435
00:13:56,216 --> 0:13:58,436
task, the developer will be able

436
00:13:58,436 --> 0:14:00,606
to use the results to generate a

437
00:13:58,436 --> 0:14:00,606
to use the results to generate a

438
00:14:00,696 --> 0:14:02,236
sensitivity vs spatial

439
00:14:02,236 --> 0:14:03,976
frequency curve for the user.

440
00:14:07,056 --> 0:14:08,476
To incorporate this in your app,

441
00:14:08,476 --> 0:14:09,926
you create an instance of

442
00:14:09,996 --> 0:14:12,306
ORKCSFStep with a unique

443
00:14:12,306 --> 0:14:13,176
identifier.

444
00:14:13,996 --> 0:14:15,236
Once again, you can set the

445
00:14:15,236 --> 0:14:16,676
minimum and maximum viewing

446
00:14:16,676 --> 0:14:18,156
distance that is specific to

447
00:14:18,156 --> 0:14:18,816
your trial.

448
00:14:20,146 --> 0:14:21,956
You create an OrderedTask, pass

449
00:14:22,026 --> 0:14:23,546
that to the TaskViewController,

450
00:14:23,546 --> 0:14:24,776
and simply present it within

451
00:14:24,776 --> 0:14:24,976
your app.

452
00:14:29,046 --> 0:14:30,466
Now the contrast sensitivity

453
00:14:30,556 --> 0:14:32,126
function and the Tumbling E

454
00:14:32,126 --> 0:14:34,056
active task that leverage the

455
00:14:34,096 --> 0:14:35,286
TrueDepth camera will be

456
00:14:35,286 --> 0:14:37,626
available soon via an Apple

457
00:14:37,626 --> 0:14:38,936
sample code license on

458
00:14:38,936 --> 0:14:40,446
developer.apple.com.

459
00:14:41,566 --> 0:14:43,066
Now let's move on to our next

460
00:14:43,066 --> 0:14:44,506
category, hearing.

461
00:14:45,306 --> 0:14:47,516
So last year, we announced three

462
00:14:47,516 --> 0:14:49,726
new active tasks that focus on

463
00:14:49,726 --> 0:14:50,306
hearing health.

464
00:14:50,306 --> 0:14:51,966
We had to tone audiometry,

465
00:14:52,086 --> 0:14:53,986
speech and noise, and SPL meter.

466
00:14:54,926 --> 0:14:56,116
This year, we are making

467
00:14:56,116 --> 0:14:58,096
across-the-board enhancements to

468
00:14:58,096 --> 0:14:58,866
the algorithms.

469
00:14:59,366 --> 0:15:01,066
And what's even better is that

470
00:14:59,366 --> 0:15:01,066
And what's even better is that

471
00:15:01,066 --> 0:15:02,786
you can now write the results of

472
00:15:02,786 --> 0:15:04,996
these active tasks directly into

473
00:15:04,996 --> 0:15:05,456
HealthKit.

474
00:15:06,426 --> 0:15:07,796
To learn more about these new

475
00:15:07,796 --> 0:15:09,636
data types, I would recommend

476
00:15:09,636 --> 0:15:10,816
you to check out the HealthKit

477
00:15:10,816 --> 0:15:12,296
session that's happening today

478
00:15:12,296 --> 0:15:12,976
at 2:00 p.m.

479
00:15:16,356 --> 0:15:17,916
Now let's move on to speech.

480
00:15:18,486 --> 0:15:19,986
Last year, we introduced a

481
00:15:19,986 --> 0:15:21,546
speech recognition active task.

482
00:15:21,996 --> 0:15:23,926
When a user completes this task,

483
00:15:24,306 --> 0:15:25,756
you will receive a bunch of

484
00:15:26,006 --> 0:15:27,926
information, including the raw

485
00:15:27,926 --> 0:15:29,876
audio file, the transcript, as

486
00:15:29,876 --> 0:15:31,456
well as an SFTranscription

487
00:15:31,456 --> 0:15:33,146
object rendered by the speech

488
00:15:33,146 --> 0:15:34,126
recognition framework.

489
00:15:34,646 --> 0:15:35,606
Well, this year, the Speech

490
00:15:35,606 --> 0:15:37,766
Recognition team has added more

491
00:15:37,766 --> 0:15:38,856
capabilities to the SF

492
00:15:38,856 --> 0:15:39,916
transcription object.

493
00:15:39,916 --> 0:15:41,576
So you will be able to extract

494
00:15:41,576 --> 0:15:43,046
information like speaking rate

495
00:15:43,046 --> 0:15:44,416
and average pause duration.

496
00:15:44,676 --> 0:15:46,276
And on top of that, there's also

497
00:15:46,276 --> 0:15:47,796
a new object called

498
00:15:47,796 --> 0:15:49,146
SFVoiceAnalytics.

499
00:15:49,376 --> 0:15:50,846
And to learn more about these,

500
00:15:51,206 --> 0:15:52,376
please check out the session

501
00:15:52,376 --> 0:15:54,366
titled "Advances in Speech

502
00:15:54,366 --> 0:15:54,996
Recognition."

503
00:15:55,536 --> 0:15:58,806
And those were our overall

504
00:15:58,806 --> 0:16:00,386
updates and additions to our

505
00:15:58,806 --> 0:16:00,386
updates and additions to our

506
00:16:00,476 --> 0:16:02,976
expanding library of active

507
00:16:03,016 --> 0:16:03,396
tasks.

508
00:16:04,666 --> 0:16:05,926
Now, you might have noticed that

509
00:16:05,926 --> 0:16:07,706
some of these tasks leverage

510
00:16:08,026 --> 0:16:09,746
some system frameworks under the

511
00:16:09,746 --> 0:16:10,076
hood.

512
00:16:11,246 --> 0:16:12,996
And we want to remind you that

513
00:16:12,996 --> 0:16:14,356
there are a lot of other

514
00:16:14,476 --> 0:16:16,426
powerful iOS system frameworks

515
00:16:16,496 --> 0:16:17,726
as part of our SDK.

516
00:16:18,506 --> 0:16:19,846
And we would highly encourage

517
00:16:19,846 --> 0:16:21,866
developers to leverage the true

518
00:16:21,866 --> 0:16:23,976
potential of these frameworks as

519
00:16:23,976 --> 0:16:25,576
you're thinking about adding new

520
00:16:25,576 --> 0:16:27,886
active tasks into ResearchKit or

521
00:16:27,926 --> 0:16:29,126
even if you are considering

522
00:16:29,156 --> 0:16:31,116
adding novel experiences that

523
00:16:31,186 --> 0:16:31,926
focus on health.

524
00:16:34,516 --> 0:16:36,896
And with that, let's move on to

525
00:16:36,896 --> 0:16:38,066
updates for CareKit.

526
00:16:39,306 --> 0:16:40,746
Now, the CareKit framework was

527
00:16:40,746 --> 0:16:43,946
introduced back in 2016 as an

528
00:16:44,006 --> 0:16:45,256
Open Source framework.

529
00:16:45,826 --> 0:16:47,616
And we wanted to enable the

530
00:16:47,616 --> 0:16:49,826
developers to perform three main

531
00:16:49,826 --> 0:16:52,076
things -- the ability to be able

532
00:16:52,076 --> 0:16:53,636
to easily digitize a

533
00:16:53,636 --> 0:16:56,046
prescription, the ability to

534
00:16:56,046 --> 0:16:57,556
provide meaningful data and

535
00:16:57,556 --> 0:16:59,316
trends to the user, and to allow

536
00:16:59,316 --> 0:17:00,986
your users to easily connect

537
00:16:59,316 --> 0:17:00,986
your users to easily connect

538
00:17:01,246 --> 0:17:02,276
with their care providers.

539
00:17:03,556 --> 0:17:05,016
And over the past few years,

540
00:17:05,016 --> 0:17:06,826
we've been making incremental

541
00:17:06,826 --> 0:17:07,976
updates to the framework.

542
00:17:08,675 --> 0:17:11,465
And this year, I'm really

543
00:17:11,465 --> 0:17:14,296
excited to announce CareKit 2.0.

544
00:17:15,146 --> 0:17:16,925
And this is what it looks like.

545
00:17:17,786 --> 0:17:19,086
Now you'll see that we have

546
00:17:19,086 --> 0:17:21,766
completely revamped the UI for

547
00:17:21,766 --> 0:17:22,336
the framework.

548
00:17:23,646 --> 0:17:26,226
But what's even better is that

549
00:17:26,226 --> 0:17:27,465
we have fundamentally

550
00:17:27,536 --> 0:17:29,336
rearchitected and rewritten the

551
00:17:29,366 --> 0:17:31,646
framework purely using Swift.

552
00:17:32,616 --> 0:17:34,196
Now, that means that CareKit,

553
00:17:34,316 --> 0:17:35,856
under the hood, can leverage

554
00:17:35,856 --> 0:17:37,346
some of the most powerful Swift

555
00:17:37,346 --> 0:17:39,316
language features, including the

556
00:17:39,316 --> 0:17:40,886
newly announced combined

557
00:17:40,886 --> 0:17:41,396
framework.

558
00:17:42,886 --> 0:17:44,016
Now let's dive into some

559
00:17:44,016 --> 0:17:44,526
details.

560
00:17:45,376 --> 0:17:47,036
The CareKit framework now

561
00:17:47,036 --> 0:17:48,506
comprises of two other

562
00:17:48,506 --> 0:17:49,736
frameworks under the hood --

563
00:17:50,636 --> 0:17:52,966
CareKit UI and CareKit Store.

564
00:17:54,296 --> 0:17:56,986
CareKit UI is a separate project

565
00:17:57,126 --> 0:17:58,586
inside the CareKit repository

566
00:17:58,906 --> 0:18:00,316
that you can independently

567
00:17:58,906 --> 0:18:00,316
that you can independently

568
00:18:00,316 --> 0:18:02,896
compile and expose as a separate

569
00:18:02,976 --> 0:18:03,446
framework.

570
00:18:04,756 --> 0:18:06,966
CareKit UI is all about

571
00:18:07,136 --> 0:18:09,796
pre-packaged sub classes of UI

572
00:18:09,796 --> 0:18:10,166
views.

573
00:18:10,696 --> 0:18:12,446
So what that essentially means

574
00:18:12,506 --> 0:18:14,606
is that every single view that

575
00:18:14,606 --> 0:18:16,096
you see on the screen is

576
00:18:16,096 --> 0:18:18,056
available for you to leverage in

577
00:18:18,056 --> 0:18:20,066
your app using CareKit UI.

578
00:18:20,946 --> 0:18:22,346
And we have categorized them

579
00:18:22,606 --> 0:18:24,506
into three categories or

580
00:18:24,506 --> 0:18:25,196
components.

581
00:18:25,646 --> 0:18:27,876
We call them tasks, charts, and

582
00:18:27,876 --> 0:18:28,396
contacts.

583
00:18:29,076 --> 0:18:30,606
And these are used to reflect

584
00:18:31,026 --> 0:18:33,006
the functionality that each view

585
00:18:33,006 --> 0:18:35,966
is supposed to serve.

586
00:18:36,186 --> 0:18:37,726
Now, as I mentioned, all of the

587
00:18:37,726 --> 0:18:40,216
views in CareKit UI are just

588
00:18:40,516 --> 0:18:41,896
naive UI views and are

589
00:18:41,896 --> 0:18:43,426
essentially sub classes of UI

590
00:18:43,426 --> 0:18:43,706
views.

591
00:18:44,706 --> 0:18:45,966
So I want to start off by

592
00:18:45,966 --> 0:18:47,466
talking about all the views that

593
00:18:47,466 --> 0:18:48,726
are available in tasks.

594
00:18:48,936 --> 0:18:50,116
And there are five of them that

595
00:18:50,116 --> 0:18:50,976
we want to highlight today.

596
00:18:53,436 --> 0:18:55,076
Now here, you can see that we

597
00:18:55,076 --> 0:18:55,876
have a view.

598
00:18:56,036 --> 0:18:57,836
And since it is just a subclass

599
00:18:57,836 --> 0:18:59,356
of a UI view, you can constrain

600
00:18:59,356 --> 0:19:01,166
it anywhere within your app by

601
00:18:59,356 --> 0:19:01,166
it anywhere within your app by

602
00:19:01,166 --> 0:19:02,256
adding it as a sub view.

603
00:19:03,226 --> 0:19:05,276
Now to create this view, all you

604
00:19:05,276 --> 0:19:07,176
have to do is import CareKit UI,

605
00:19:07,826 --> 0:19:09,046
create an instance of

606
00:19:09,136 --> 0:19:12,196
OCKSimpleTaskView, and set some

607
00:19:12,196 --> 0:19:13,276
of the parameters that are

608
00:19:13,276 --> 0:19:14,596
available on this object.

609
00:19:15,686 --> 0:19:16,586
It's that easy.

610
00:19:17,166 --> 0:19:19,316
And now let's take a look at the

611
00:19:19,316 --> 0:19:21,386
remaining four UIs that we said

612
00:19:21,386 --> 0:19:22,496
are available inside the task's

613
00:19:22,496 --> 0:19:22,796
component.

614
00:19:26,206 --> 0:19:27,526
The next one that we want to

615
00:19:27,526 --> 0:19:29,946
cover is the

616
00:19:29,946 --> 0:19:31,926
OCKInstructionsTaskView.

617
00:19:32,406 --> 0:19:33,766
So when you create an object of

618
00:19:33,806 --> 0:19:35,456
this type, you will get a view

619
00:19:35,456 --> 0:19:36,716
that looks somewhat like this.

620
00:19:37,026 --> 0:19:38,896
And all you have to do is add

621
00:19:38,896 --> 0:19:41,036
one additional parameter to set

622
00:19:41,136 --> 0:19:42,006
the right values.

623
00:19:43,436 --> 0:19:45,826
Along those same lines, the next

624
00:19:45,826 --> 0:19:47,026
view that we want to talk about

625
00:19:47,646 --> 0:19:51,086
is the OCKGridTaskView, which

626
00:19:51,086 --> 0:19:52,326
looks somewhat like this.

627
00:19:52,946 --> 0:19:54,376
Now this view is interesting

628
00:19:54,376 --> 0:19:55,976
because all the check marks and

629
00:19:55,976 --> 0:19:57,016
the buttons that you're seeing

630
00:19:57,016 --> 0:19:58,566
here, this is standard for a

631
00:19:58,566 --> 0:19:59,406
medication view.

632
00:19:59,706 --> 0:20:01,096
And as part of this view, we are

633
00:19:59,706 --> 0:20:01,096
And as part of this view, we are

634
00:20:01,096 --> 0:20:02,826
essentially exposing the

635
00:20:02,826 --> 0:20:04,376
collectionView to you directly.

636
00:20:04,736 --> 0:20:05,836
So you could choose to set

637
00:20:05,836 --> 0:20:07,766
yourself up as the delegate and

638
00:20:07,976 --> 0:20:10,136
pass in whatever view you want

639
00:20:10,136 --> 0:20:11,256
into the collectionView.

640
00:20:11,446 --> 0:20:13,416
So you can choose to use an OCK

641
00:20:13,416 --> 0:20:13,886
button.

642
00:20:13,986 --> 0:20:15,326
Or you can even provide any

643
00:20:15,326 --> 0:20:16,006
custom UI.

644
00:20:16,006 --> 0:20:17,886
It is extremely customizable as

645
00:20:17,886 --> 0:20:17,976
well.

646
00:20:20,526 --> 0:20:23,666
Our next view type is an

647
00:20:23,716 --> 0:20:26,186
OCKChecklistTaskView, which

648
00:20:26,186 --> 0:20:27,306
looks somewhat like this.

649
00:20:28,326 --> 0:20:30,036
And all the buttons that you see

650
00:20:30,036 --> 0:20:31,766
on screen are now composed

651
00:20:31,806 --> 0:20:32,886
inside a Stack View.

652
00:20:33,326 --> 0:20:34,626
So by simply calling an

653
00:20:34,626 --> 0:20:36,126
appendItem method, you'll be

654
00:20:36,126 --> 0:20:38,056
able to add a new role into your

655
00:20:38,096 --> 0:20:39,476
checklist as a new item.

656
00:20:40,016 --> 0:20:43,076
Our final view type under the

657
00:20:43,076 --> 0:20:45,186
tasks component is an

658
00:20:45,186 --> 0:20:46,956
OCKSimpleLogTaskView.

659
00:20:47,626 --> 0:20:48,776
It looks somewhat like this.

660
00:20:48,776 --> 0:20:50,676
And it can be used for logging

661
00:20:50,876 --> 0:20:52,676
random events like a headache or

662
00:20:52,676 --> 0:20:53,206
nausea.

663
00:20:53,446 --> 0:20:55,396
And every time the user taps on

664
00:20:55,396 --> 0:20:56,836
the log button, we will show

665
00:20:56,836 --> 0:20:58,246
them a timestamp of when they

666
00:20:58,306 --> 0:20:59,436
logged their last event.

667
00:21:00,106 --> 0:21:01,476
And the timestamps are once

668
00:21:01,476 --> 0:21:02,826
again composed inside the stack

669
00:21:02,896 --> 0:21:03,126
view.

670
00:21:03,416 --> 0:21:04,566
So by simply calling the

671
00:21:04,566 --> 0:21:05,836
appendItem method, you'll be

672
00:21:05,836 --> 0:21:07,946
able to append more logs based

673
00:21:07,946 --> 0:21:10,366
on the action that is generated

674
00:21:10,366 --> 0:21:12,796
by the button.

675
00:21:12,876 --> 0:21:14,316
Now, let's move on to our next

676
00:21:14,316 --> 0:21:15,836
component, charts.

677
00:21:16,646 --> 0:21:19,366
So to create a chart in CareKit

678
00:21:19,366 --> 0:21:21,466
UI, you simply import CareKit

679
00:21:21,466 --> 0:21:21,876
UI.

680
00:21:22,096 --> 0:21:23,666
You create an instance of

681
00:21:23,666 --> 0:21:26,556
OCKCartesianChartCardView and

682
00:21:26,556 --> 0:21:27,396
specify a type.

683
00:21:27,926 --> 0:21:29,146
You can then go on to set the

684
00:21:29,146 --> 0:21:30,766
title, the text, and even the

685
00:21:30,766 --> 0:21:31,956
values as part of the data

686
00:21:31,956 --> 0:21:32,376
series.

687
00:21:32,946 --> 0:21:34,766
And by simply toggling the type,

688
00:21:35,836 --> 0:21:37,526
you'll be able to easily switch

689
00:21:37,526 --> 0:21:38,566
between the different chart

690
00:21:38,596 --> 0:21:40,476
types for that exact same set of

691
00:21:40,506 --> 0:21:40,976
data points.

692
00:21:43,176 --> 0:21:44,936
And our final component which we

693
00:21:44,936 --> 0:21:47,796
want to cover today is contacts.

694
00:21:48,476 --> 0:21:50,286
So you can create an instance of

695
00:21:50,286 --> 0:21:52,006
OCKContactCardView and just

696
00:21:52,006 --> 0:21:53,516
populate it with content.

697
00:21:53,826 --> 0:21:55,176
And we will ensure that all the

698
00:21:55,176 --> 0:21:56,486
constraints are applied in the

699
00:21:56,586 --> 0:21:56,956
right way.

700
00:22:00,286 --> 0:22:01,766
So those were our overall

701
00:22:01,766 --> 0:22:02,846
updates for CareKit UI.

702
00:22:02,846 --> 0:22:05,646
Our real intention here is to

703
00:22:05,646 --> 0:22:07,456
continue to add more views to

704
00:22:07,456 --> 0:22:09,126
each of these components and

705
00:22:09,126 --> 0:22:10,736
also expand the library of

706
00:22:10,736 --> 0:22:11,856
components that we have.

707
00:22:12,876 --> 0:22:14,136
We think that this can be an

708
00:22:14,136 --> 0:22:15,646
extremely powerful tool for

709
00:22:15,646 --> 0:22:18,186
users and makes the CareKit 2.0

710
00:22:18,186 --> 0:22:20,176
framework highly customizable,

711
00:22:20,416 --> 0:22:22,126
because we just give you all the

712
00:22:22,126 --> 0:22:24,066
new sorts of views with all the

713
00:22:24,066 --> 0:22:24,976
constraints taken care of.

714
00:22:28,086 --> 0:22:29,486
Now let's talk about CareKit

715
00:22:29,486 --> 0:22:29,906
Store.

716
00:22:30,686 --> 0:22:31,886
CareKit Store, similar to

717
00:22:31,886 --> 0:22:34,376
CareKit UI, is its own project

718
00:22:34,466 --> 0:22:35,656
inside the CareKit framework.

719
00:22:36,916 --> 0:22:38,796
So you can compile it and export

720
00:22:38,796 --> 0:22:40,546
it as a standalone framework

721
00:22:40,546 --> 0:22:41,766
into your app and use it in a

722
00:22:41,766 --> 0:22:43,196
completely unrelated manner.

723
00:22:43,866 --> 0:22:45,576
CareKit Store is essentially a

724
00:22:45,576 --> 0:22:47,306
wrapper on top of Core Data that

725
00:22:47,366 --> 0:22:49,826
allows you to persist Care Plans

726
00:22:49,946 --> 0:22:52,736
and react to them locally on

727
00:22:52,736 --> 0:22:53,736
device within your app

728
00:22:53,796 --> 0:22:54,366
containers.

729
00:22:55,256 --> 0:22:56,456
And since it's a database

730
00:22:56,456 --> 0:22:58,916
essentially, we have given you a

731
00:22:58,966 --> 0:23:00,046
cookie cutter scheme.

732
00:22:58,966 --> 0:23:00,046
cookie cutter scheme.

733
00:23:00,226 --> 0:23:01,716
And let's take a look at what

734
00:23:01,716 --> 0:23:02,316
that looks like.

735
00:23:02,866 --> 0:23:05,786
So the most fundamental entity

736
00:23:05,786 --> 0:23:08,866
for any Care app is the patient.

737
00:23:09,746 --> 0:23:11,806
Now let's take a look at how you

738
00:23:11,806 --> 0:23:13,386
initialize a CareKit Store,

739
00:23:14,646 --> 0:23:16,306
create a patient object, and

740
00:23:16,306 --> 0:23:17,726
ingest that into the CareKit

741
00:23:17,726 --> 0:23:18,026
Store.

742
00:23:19,656 --> 0:23:21,626
So you start off by importing

743
00:23:21,756 --> 0:23:23,376
CareKitStore as a standalone

744
00:23:23,416 --> 0:23:23,886
framework.

745
00:23:24,646 --> 0:23:26,086
You then create an instance of

746
00:23:26,086 --> 0:23:27,646
OCKStore with a unique

747
00:23:27,646 --> 0:23:29,606
identifier to create the Core

748
00:23:29,606 --> 0:23:32,206
Data database within your app

749
00:23:32,796 --> 0:23:33,000
container.

750
00:23:33,616 --> 0:23:34,816
You then go on to create a

751
00:23:34,816 --> 0:23:36,756
patient object by using one of

752
00:23:36,756 --> 0:23:37,946
our convenience initializers

753
00:23:37,946 --> 0:23:39,016
that accepts some basic

754
00:23:39,066 --> 0:23:39,676
parameters.

755
00:23:41,066 --> 0:23:42,286
You can then call the

756
00:23:42,326 --> 0:23:44,076
addPatientMethod on the Store,

757
00:23:44,376 --> 0:23:46,816
which asynchronously accepts the

758
00:23:46,816 --> 0:23:48,836
object and ingests it into the

759
00:23:48,836 --> 0:23:49,386
database.

760
00:23:50,306 --> 0:23:52,056
And once that is complete, you

761
00:23:52,056 --> 0:23:53,716
will get a completion callback.

762
00:23:54,316 --> 0:23:55,966
And this will return a Swift

763
00:23:55,966 --> 0:23:56,866
result type that you can switch

764
00:23:56,866 --> 0:23:56,976
on.

765
00:24:00,346 --> 0:24:02,506
Now our second key entity in our

766
00:24:02,506 --> 0:24:04,826
Care Plan is the Care Plan

767
00:24:04,826 --> 0:24:05,336
itself.

768
00:24:05,846 --> 0:24:07,426
And every patient can have

769
00:24:07,426 --> 0:24:09,306
multiple Care Plans associated

770
00:24:09,406 --> 0:24:09,896
with them.

771
00:24:10,756 --> 0:24:12,496
So now let's take a look at how

772
00:24:12,496 --> 0:24:14,596
you can create a new Care Plan

773
00:24:14,936 --> 0:24:16,046
and associate it with a

774
00:24:16,046 --> 0:24:16,976
particular patient.

775
00:24:20,186 --> 0:24:21,686
So as always, you create a

776
00:24:21,686 --> 0:24:22,706
reference to the store.

777
00:24:22,706 --> 0:24:24,386
Now one thing to note here is

778
00:24:24,386 --> 0:24:25,416
that if you provide an

779
00:24:25,456 --> 0:24:26,726
identifier that is already

780
00:24:26,726 --> 0:24:28,776
available, we will just take an

781
00:24:28,776 --> 0:24:30,096
existing store with that

782
00:24:30,096 --> 0:24:30,916
identifier and return that to

783
00:24:30,916 --> 0:24:30,983
you.

784
00:24:34,046 --> 0:24:35,986
So then, if you don't have a

785
00:24:35,986 --> 0:24:37,316
reference to the patient object,

786
00:24:37,316 --> 0:24:38,446
the first thing that you need to

787
00:24:38,446 --> 0:24:40,656
do is query the patient object

788
00:24:40,656 --> 0:24:41,216
from the Store.

789
00:24:42,226 --> 0:24:43,786
And once that query completes

790
00:24:43,826 --> 0:24:45,386
asynchronously, you get a

791
00:24:45,386 --> 0:24:45,946
callback.

792
00:24:45,946 --> 0:24:47,416
And inside the callback, you can

793
00:24:47,416 --> 0:24:49,356
go on to create a Care Plan by

794
00:24:49,356 --> 0:24:50,636
providing it parameters like

795
00:24:50,636 --> 0:24:52,466
identifier, the name for the

796
00:24:52,466 --> 0:24:54,306
Care Plan, and most importantly,

797
00:24:54,306 --> 0:24:55,076
the patient ID.

798
00:24:55,606 --> 0:24:57,086
Doing this will essentially help

799
00:24:57,156 --> 0:24:59,156
create the association between

800
00:24:59,156 --> 0:25:00,656
the patient -- the Care Plan and

801
00:24:59,156 --> 0:25:00,656
the patient -- the Care Plan and

802
00:25:00,656 --> 0:25:01,446
the patient itself.

803
00:25:01,946 --> 0:25:03,116
And then you can call the

804
00:25:03,116 --> 0:25:05,136
addCarePlan method to ingest

805
00:25:05,176 --> 0:25:06,426
this new Care Plan into your

806
00:25:06,426 --> 0:25:06,886
database.

807
00:25:07,316 --> 0:25:11,246
Now every Care Plan can have an

808
00:25:11,386 --> 0:25:13,136
array of contacts associated

809
00:25:13,136 --> 0:25:13,516
with them.

810
00:25:13,886 --> 0:25:15,736
Now, these could be contacts for

811
00:25:15,736 --> 0:25:17,466
the primary care providers who

812
00:25:17,466 --> 0:25:18,636
are associated with this

813
00:25:18,636 --> 0:25:20,226
particular Care Plan.

814
00:25:21,076 --> 0:25:22,966
Now, the other thing that's

815
00:25:23,356 --> 0:25:25,196
interesting here is the notion

816
00:25:25,196 --> 0:25:25,526
of tasks.

817
00:25:26,376 --> 0:25:27,866
Now task entities are

818
00:25:27,866 --> 0:25:29,976
essentially action items that

819
00:25:29,976 --> 0:25:32,566
your users are requested to

820
00:25:32,566 --> 0:25:34,756
perform on a daily basis as part

821
00:25:34,756 --> 0:25:35,716
of their Care Plan.

822
00:25:36,266 --> 0:25:38,526
And every task has an associated

823
00:25:38,526 --> 0:25:40,006
schedule object with it.

824
00:25:40,416 --> 0:25:42,336
Now the schedule dictates when

825
00:25:42,336 --> 0:25:44,136
the user is expected to perform

826
00:25:44,136 --> 0:25:45,956
a particular task.

827
00:25:46,386 --> 0:25:48,536
So now let's take a look at how

828
00:25:48,536 --> 0:25:50,596
you can prescribe a particular

829
00:25:50,596 --> 0:25:52,566
medication to your user and

830
00:25:52,566 --> 0:25:53,806
ingest that into your Care

831
00:25:53,806 --> 0:25:53,926
Store.

832
00:25:58,046 --> 0:25:59,596
So here, we are creating a

833
00:25:59,596 --> 0:26:01,076
schedule where you need to take

834
00:25:59,596 --> 0:26:01,076
schedule where you need to take

835
00:26:01,076 --> 0:26:02,866
your medication every day at

836
00:26:02,916 --> 0:26:05,116
7:00 a.m. We are creating

837
00:26:05,116 --> 0:26:06,806
another schedule element that

838
00:26:06,806 --> 0:26:08,176
expects you to take the same

839
00:26:08,176 --> 0:26:10,326
medication every other day at

840
00:26:10,386 --> 0:26:12,126
12:00 p.m. So we are calling the

841
00:26:12,176 --> 0:26:14,296
former one as breakfast dose and

842
00:26:14,296 --> 0:26:16,036
the latter one as the lunch

843
00:26:16,036 --> 0:26:16,306
dose.

844
00:26:17,156 --> 0:26:18,506
And you can simply compose

845
00:26:18,506 --> 0:26:20,116
multiple schedules together to

846
00:26:20,116 --> 0:26:21,586
create one unified schedule

847
00:26:22,056 --> 0:26:24,066
which you can then pass on to

848
00:26:24,066 --> 0:26:24,316
the task.

849
00:26:25,876 --> 0:26:28,386
So the OCKTaskObject accepts

850
00:26:28,386 --> 0:26:30,026
parameters like identifier.

851
00:26:30,246 --> 0:26:31,896
The title here is a Doxylamine

852
00:26:31,896 --> 0:26:33,886
medication, and you can give it

853
00:26:33,886 --> 0:26:34,806
the schedule object.

854
00:26:34,886 --> 0:26:38,056
And you can directly add this

855
00:26:38,086 --> 0:26:41,826
task into your CareKit Store.

856
00:26:42,036 --> 0:26:43,546
Now, every time your user

857
00:26:43,546 --> 0:26:45,966
completes a particular task, we

858
00:26:45,966 --> 0:26:47,716
generate an outcome.

859
00:26:48,336 --> 0:26:49,826
And every outcome has an

860
00:26:49,866 --> 0:26:51,766
associated value with it.

861
00:26:52,776 --> 0:26:54,476
Now let's take a look at how you

862
00:26:54,476 --> 0:26:56,746
can query all the outcomes in

863
00:26:56,746 --> 0:26:58,266
your database to create

864
00:26:58,266 --> 0:27:00,516
meaningful data and trends that

865
00:26:58,266 --> 0:27:00,516
meaningful data and trends that

866
00:27:00,516 --> 0:27:01,976
you can surface to your users.

867
00:27:06,316 --> 0:27:07,606
So here we are creating a

868
00:27:07,606 --> 0:27:09,366
blanket query that will query

869
00:27:09,366 --> 0:27:10,886
all elements in your database

870
00:27:10,946 --> 0:27:12,046
for the past seven days.

871
00:27:13,116 --> 0:27:14,646
We are then calling the

872
00:27:14,646 --> 0:27:16,626
fetchInsights method on the

873
00:27:16,626 --> 0:27:17,046
task.

874
00:27:17,376 --> 0:27:18,806
And we are passing it the

875
00:27:18,806 --> 0:27:20,746
identifier for the particular

876
00:27:20,796 --> 0:27:22,686
tasks whose event you are

877
00:27:22,686 --> 0:27:23,346
interested in.

878
00:27:23,686 --> 0:27:24,826
So in this case, I'm only

879
00:27:24,826 --> 0:27:26,426
interested in events generated

880
00:27:26,426 --> 0:27:27,926
for the doxylamine medication

881
00:27:27,926 --> 0:27:28,256
task.

882
00:27:29,196 --> 0:27:32,136
Now, this API has two blocks

883
00:27:32,206 --> 0:27:33,196
that are very interesting.

884
00:27:33,736 --> 0:27:35,146
The first one is the daily

885
00:27:35,146 --> 0:27:36,706
aggregator block which can be

886
00:27:36,706 --> 0:27:38,256
called multiple times.

887
00:27:38,606 --> 0:27:40,546
And every time, you get an array

888
00:27:40,546 --> 0:27:42,416
of events for that particular

889
00:27:42,416 --> 0:27:42,766
day.

890
00:27:42,946 --> 0:27:44,456
And you can use this to compute

891
00:27:44,456 --> 0:27:45,476
higher-order metrics.

892
00:27:47,006 --> 0:27:49,336
And then you get the completion

893
00:27:49,336 --> 0:27:50,566
block, which is called only

894
00:27:50,566 --> 0:27:50,916
once.

895
00:27:51,146 --> 0:27:52,886
And it gives you an array of

896
00:27:52,886 --> 0:27:54,946
computed values that you can use

897
00:27:54,946 --> 0:27:56,096
for further analysis or simply

898
00:27:56,156 --> 0:27:56,976
for charting.

899
00:28:00,416 --> 0:28:02,286
Now, every single entity in the

900
00:28:02,286 --> 0:28:03,866
CareKit Store can have an

901
00:28:03,866 --> 0:28:06,236
associated note object with it.

902
00:28:06,756 --> 0:28:08,376
Now note objects are essentially

903
00:28:08,376 --> 0:28:09,126
metadata.

904
00:28:09,456 --> 0:28:11,256
So for example, if the care

905
00:28:11,256 --> 0:28:13,346
provider decided to update the

906
00:28:13,346 --> 0:28:14,796
Care Plan for some reason, and

907
00:28:14,796 --> 0:28:16,226
they wanted to provide you with

908
00:28:16,356 --> 0:28:18,116
free form text, you will be able

909
00:28:18,116 --> 0:28:19,726
to add that to the note object.

910
00:28:21,076 --> 0:28:22,446
And the other interesting thing

911
00:28:22,786 --> 0:28:25,296
is that some of our key entities

912
00:28:25,526 --> 0:28:26,656
are now versionable.

913
00:28:27,576 --> 0:28:30,156
So when you update a medication

914
00:28:30,156 --> 0:28:31,556
task, or when you update a

915
00:28:31,556 --> 0:28:33,056
schedule, we will persist that

916
00:28:33,206 --> 0:28:34,736
in the CareKit Store and you can

917
00:28:34,736 --> 0:28:36,306
go back and forth between them.

918
00:28:36,886 --> 0:28:40,706
So those were our quick updates

919
00:28:40,736 --> 0:28:41,586
for the CareKit Store.

920
00:28:41,836 --> 0:28:43,016
There are a lot more powerful

921
00:28:43,016 --> 0:28:44,616
API's that are available in the

922
00:28:44,616 --> 0:28:45,736
CareKit Store framework.

923
00:28:45,886 --> 0:28:47,016
And we would recommend you to

924
00:28:47,016 --> 0:28:47,626
check them out.

925
00:28:48,646 --> 0:28:50,316
So now let's turn our focus to

926
00:28:50,626 --> 0:28:52,086
the CareKit framework itself.

927
00:28:52,806 --> 0:28:54,886
CareKit is all about bringing

928
00:28:55,006 --> 0:28:57,196
synchronization all the way from

929
00:28:57,196 --> 0:28:58,856
the UI level to the underlying

930
00:28:58,856 --> 0:28:59,356
database.

931
00:29:00,126 --> 0:29:01,686
And the way we accomplish this

932
00:29:02,036 --> 0:29:03,966
is by using a synchronizer

933
00:29:03,966 --> 0:29:04,446
object.

934
00:29:05,046 --> 0:29:07,786
Now this object makes heavy use

935
00:29:07,836 --> 0:29:09,516
of the combined framework under

936
00:29:09,516 --> 0:29:11,716
the hood to propagate events

937
00:29:11,716 --> 0:29:13,636
between the UI layer and the

938
00:29:13,636 --> 0:29:14,546
data store layer.

939
00:29:15,926 --> 0:29:17,536
Now, another key functionality

940
00:29:17,536 --> 0:29:20,056
of CareKit is its modularity and

941
00:29:20,056 --> 0:29:21,016
customizability.

942
00:29:21,656 --> 0:29:23,276
So what I mean by that is that

943
00:29:23,516 --> 0:29:25,606
the database here can either be

944
00:29:25,606 --> 0:29:27,526
a CareKit Store, or it can be

945
00:29:27,726 --> 0:29:29,646
any database of your preference,

946
00:29:29,986 --> 0:29:31,796
as long as it conforms to our

947
00:29:31,826 --> 0:29:33,846
OCKStore protocol, which will

948
00:29:33,846 --> 0:29:35,186
enable the synchronizer to

949
00:29:35,226 --> 0:29:36,656
interact with it seamlessly.

950
00:29:37,606 --> 0:29:39,566
And the UI elements that you see

951
00:29:39,566 --> 0:29:41,086
here can either come from

952
00:29:41,086 --> 0:29:41,576
CareKit UI.

953
00:29:41,576 --> 0:29:43,506
Or they could be even your

954
00:29:43,506 --> 0:29:45,716
custom UI views, as long as you

955
00:29:45,746 --> 0:29:47,896
tell us how to bind the views to

956
00:29:47,896 --> 0:29:48,876
a particular object.

957
00:29:50,166 --> 0:29:52,316
So now let's take a look at what

958
00:29:52,316 --> 0:29:54,426
happens when a user interacts

959
00:29:54,456 --> 0:29:55,596
with the UI element on the

960
00:29:55,596 --> 0:29:56,026
screen.

961
00:29:56,456 --> 0:29:58,186
So for this example, let's focus

962
00:29:58,186 --> 0:29:59,796
on the doxylamine medication on

963
00:29:59,796 --> 0:30:00,696
the top-left corner.

964
00:29:59,796 --> 0:30:00,696
the top-left corner.

965
00:30:01,726 --> 0:30:03,186
When the user taps on this

966
00:30:03,226 --> 0:30:05,356
button, an event is propagated

967
00:30:05,446 --> 0:30:06,286
to the synchronizer.

968
00:30:07,396 --> 0:30:09,016
The synchronizer then forwards

969
00:30:09,016 --> 0:30:10,106
the information to the

970
00:30:10,106 --> 0:30:11,206
underlying data store.

971
00:30:11,936 --> 0:30:13,526
And once the database

972
00:30:13,706 --> 0:30:15,916
acknowledges successful receipt

973
00:30:16,746 --> 0:30:19,716
of this object, the synchronizer

974
00:30:20,036 --> 0:30:21,146
takes up the role of a

975
00:30:21,146 --> 0:30:21,566
publisher.

976
00:30:22,296 --> 0:30:24,196
And it propagates the stream to

977
00:30:24,196 --> 0:30:25,776
all the UI elements that are

978
00:30:25,776 --> 0:30:27,886
subscribed to that particular

979
00:30:27,996 --> 0:30:28,516
stream.

980
00:30:28,976 --> 0:30:30,606
And in this example, there are

981
00:30:30,606 --> 0:30:31,976
only three cards that are

982
00:30:32,056 --> 0:30:34,126
subscribed to updates from the

983
00:30:34,126 --> 0:30:35,066
medication task.

984
00:30:36,026 --> 0:30:37,276
And once the stream reaches

985
00:30:37,326 --> 0:30:38,576
them, they will be able to

986
00:30:38,616 --> 0:30:39,976
independently update themselves.

987
00:30:41,796 --> 0:30:44,576
This is really exciting because

988
00:30:44,576 --> 0:30:46,516
the UI views are acting

989
00:30:46,556 --> 0:30:48,116
independently of each other.

990
00:30:48,336 --> 0:30:50,136
And they're also updating in an

991
00:30:50,176 --> 0:30:51,996
asynchronous manner, which can

992
00:30:51,996 --> 0:30:53,236
lead to some really powerful

993
00:30:53,236 --> 0:30:54,976
experiences in your care app.

994
00:30:58,256 --> 0:30:59,916
Now, let's take a look at how

995
00:30:59,916 --> 0:31:01,976
you can incorporate CareKit in

996
00:30:59,916 --> 0:31:01,976
you can incorporate CareKit in

997
00:31:01,976 --> 0:31:04,086
your app end-to-end in code.

998
00:31:04,866 --> 0:31:06,336
So the first thing you do is you

999
00:31:06,336 --> 0:31:07,246
import CareKit.

1000
00:31:07,246 --> 0:31:09,366
And doing so will automatically

1001
00:31:09,366 --> 0:31:11,166
import the CareKit UI and

1002
00:31:11,166 --> 0:31:12,306
CareKit Store frameworks.

1003
00:31:13,486 --> 0:31:15,106
Next, as always, you create an

1004
00:31:15,106 --> 0:31:16,636
instance of OKCStore.

1005
00:31:17,096 --> 0:31:19,906
And then you go on to create an

1006
00:31:19,906 --> 0:31:20,576
instance of

1007
00:31:20,576 --> 0:31:23,106
OCKSynchronizedStoreManager and

1008
00:31:23,166 --> 0:31:24,056
pass it the store.

1009
00:31:24,546 --> 0:31:26,026
This will allow the synchronizer

1010
00:31:26,056 --> 0:31:27,526
to wrap itself around the

1011
00:31:27,526 --> 0:31:28,146
database.

1012
00:31:29,586 --> 0:31:31,596
And finally, you can choose to

1013
00:31:31,596 --> 0:31:33,556
use one of our prepackaged

1014
00:31:33,826 --> 0:31:35,176
standalone view controllers.

1015
00:31:35,786 --> 0:31:36,986
In this example, we are

1016
00:31:37,176 --> 0:31:39,496
showcasing the OCKTaskListView

1017
00:31:39,496 --> 0:31:41,296
controller and it accepts the

1018
00:31:41,296 --> 0:31:43,026
storeManager assets parameter.

1019
00:31:44,316 --> 0:31:46,146
Doing this will essentially

1020
00:31:46,396 --> 0:31:48,146
establish pipelines all the way

1021
00:31:48,146 --> 0:31:49,156
from the UI layer to the

1022
00:31:49,156 --> 0:31:50,916
underlying database, and all you

1023
00:31:50,916 --> 0:31:52,366
have to do after that is present

1024
00:31:52,366 --> 0:31:53,706
the view controller, and

1025
00:31:53,706 --> 0:31:55,006
depending on what data you

1026
00:31:55,006 --> 0:31:56,456
provide to the store, you'll be

1027
00:31:56,456 --> 0:31:57,776
able to see a UI that looks

1028
00:31:57,776 --> 0:31:58,546
somewhat like this.

1029
00:32:00,006 --> 0:32:01,796
And similarly, you can also

1030
00:32:01,796 --> 0:32:03,226
leverage some of our other

1031
00:32:03,306 --> 0:32:05,166
prepackaged view controllers to

1032
00:32:05,166 --> 0:32:07,756
build out views for trends and

1033
00:32:07,756 --> 0:32:08,316
contacts.

1034
00:32:09,366 --> 0:32:11,056
So as you can see here, CareKit

1035
00:32:11,746 --> 0:32:14,586
2.0 makes it really easy to use

1036
00:32:14,866 --> 0:32:15,536
the framework.

1037
00:32:16,616 --> 0:32:19,306
But that's not all it's all

1038
00:32:19,306 --> 0:32:19,656
about.

1039
00:32:20,216 --> 0:32:22,406
So, right now, I want to call

1040
00:32:22,406 --> 0:32:24,536
Erik onstage for a demo where we

1041
00:32:24,536 --> 0:32:26,246
will showcase how you can build

1042
00:32:26,526 --> 0:32:28,846
a custom care app using CareKit

1043
00:32:28,846 --> 0:32:29,316
2.0.

1044
00:32:30,516 --> 0:32:32,786
[ Cheering and Applause ]

1045
00:32:33,286 --> 0:32:33,976
&gt;&gt; All right.

1046
00:32:34,016 --> 0:32:35,436
[ Cheering and Applause ]

1047
00:32:35,436 --> 0:32:37,436
Great. Thank you, Srinath.

1048
00:32:38,586 --> 0:32:39,526
Good afternoon, everybody.

1049
00:32:39,526 --> 0:32:40,256
My name is Erik.

1050
00:32:40,726 --> 0:32:41,986
I'm an engineer on the CareKit

1051
00:32:42,036 --> 0:32:42,276
team.

1052
00:32:42,816 --> 0:32:44,006
And today I have the privilege

1053
00:32:44,006 --> 0:32:45,026
of walking y'all through a

1054
00:32:45,026 --> 0:32:46,606
sample app that's going to

1055
00:32:46,606 --> 0:32:47,606
demonstrate some of the amazing

1056
00:32:47,606 --> 0:32:49,436
new features and capabilities of

1057
00:32:49,436 --> 0:32:51,296
CareKit 2.0.

1058
00:32:51,296 --> 0:32:52,006
The app that we're going to

1059
00:32:52,006 --> 0:32:53,926
build to that -- together today

1060
00:32:53,926 --> 0:32:55,496
is going to be built completely

1061
00:32:55,526 --> 0:32:56,186
from scratch.

1062
00:32:56,516 --> 0:32:57,406
And it's going to be for an

1063
00:32:57,406 --> 0:33:00,356
imaginary patient, an expecting

1064
00:32:57,406 --> 0:33:00,356
imaginary patient, an expecting

1065
00:33:00,356 --> 0:33:01,746
mother who is experiencing

1066
00:33:01,886 --> 0:33:03,656
severe symptoms of morning

1067
00:33:03,656 --> 0:33:05,126
sickness, namely nausea.

1068
00:33:05,646 --> 0:33:06,426
So the app that we're going to

1069
00:33:06,426 --> 0:33:07,776
make for her is going to allow

1070
00:33:07,776 --> 0:33:08,956
her to track her medications.

1071
00:33:08,956 --> 0:33:11,316
It's going to allow her to leave

1072
00:33:11,316 --> 0:33:13,136
a log when she feels nauseous.

1073
00:33:13,956 --> 0:33:14,756
And we're going to display

1074
00:33:14,756 --> 0:33:16,346
charts to her that allow her to

1075
00:33:16,346 --> 0:33:18,006
understand the correlation

1076
00:33:18,416 --> 0:33:19,736
between her adherence and her

1077
00:33:19,736 --> 0:33:20,256
symptoms.

1078
00:33:20,976 --> 0:33:22,166
Finally, we're going to give her

1079
00:33:22,546 --> 0:33:24,806
quick access to her contacts so

1080
00:33:24,806 --> 0:33:26,076
that she can get directions to

1081
00:33:26,076 --> 0:33:27,576
the office or make a call to her

1082
00:33:27,576 --> 0:33:28,916
doctor if she has an emergency.

1083
00:33:29,506 --> 0:33:31,726
Now, when we make a CareKit app,

1084
00:33:32,216 --> 0:33:33,946
there's two major steps that we

1085
00:33:33,946 --> 0:33:34,636
have to walk through.

1086
00:33:35,146 --> 0:33:36,306
The first is that we need to

1087
00:33:36,306 --> 0:33:37,116
create the Store.

1088
00:33:37,206 --> 0:33:38,466
And we need to populate it with

1089
00:33:38,466 --> 0:33:38,636
data.

1090
00:33:38,636 --> 0:33:39,706
So that's going to be the first

1091
00:33:39,706 --> 0:33:40,276
thing we tackle.

1092
00:33:40,276 --> 0:33:42,176
And then after that, we need to

1093
00:33:42,266 --> 0:33:44,226
create the UI and tell CareKit

1094
00:33:44,366 --> 0:33:45,426
how we want the data to be

1095
00:33:45,426 --> 0:33:45,836
displayed.

1096
00:33:46,146 --> 0:33:47,056
So we're going to hit that in

1097
00:33:47,056 --> 0:33:47,716
the second half.

1098
00:33:48,766 --> 0:33:49,386
Let's jump in.

1099
00:33:51,466 --> 0:33:51,646
Whoops.

1100
00:33:57,476 --> 0:33:58,686
All right.

1101
00:33:59,396 --> 0:34:00,656
So you can see here, we've got

1102
00:33:59,396 --> 0:34:00,656
So you can see here, we've got

1103
00:34:00,656 --> 0:34:01,216
an empty app.

1104
00:34:01,216 --> 0:34:02,206
This is going to be our starting

1105
00:34:02,206 --> 0:34:02,476
point.

1106
00:34:03,256 --> 0:34:04,376
Now when you're using CareKit,

1107
00:34:04,816 --> 0:34:05,846
the first thing you need to do

1108
00:34:05,846 --> 0:34:06,436
is import it.

1109
00:34:06,546 --> 0:34:08,275
If you don't do this, you're not

1110
00:34:08,275 --> 0:34:10,076
going to get far.

1111
00:34:10,076 --> 0:34:10,315
[Chuckles]

1112
00:34:10,315 --> 0:34:11,656
Once it's imported, the next

1113
00:34:11,656 --> 0:34:12,746
thing we need to do is create

1114
00:34:12,746 --> 0:34:13,206
the Store.

1115
00:34:13,346 --> 0:34:14,606
More precisely, the

1116
00:34:14,606 --> 0:34:16,275
SynchronizedStoreManager that's

1117
00:34:16,275 --> 0:34:17,585
going to perform synchronization

1118
00:34:17,636 --> 0:34:17,916
for us.

1119
00:34:18,726 --> 0:34:20,505
Now when we do this, we're going

1120
00:34:20,505 --> 0:34:22,016
to start off by creating the

1121
00:34:22,056 --> 0:34:22,335
OCKStore.

1122
00:34:23,016 --> 0:34:23,866
And then we're going to pass

1123
00:34:23,916 --> 0:34:24,926
that into the

1124
00:34:24,926 --> 0:34:26,106
SynchronizedStoreManager.

1125
00:34:27,065 --> 0:34:27,896
I want to pause here for a

1126
00:34:27,896 --> 0:34:28,946
second and highlight something

1127
00:34:28,946 --> 0:34:30,146
really important about CareKit

1128
00:34:30,206 --> 0:34:30,676
2.0.

1129
00:34:32,036 --> 0:34:33,446
Here, we're using the OCKStore,

1130
00:34:33,446 --> 0:34:34,476
which is our wrapper on top of

1131
00:34:34,516 --> 0:34:34,966
Core Data.

1132
00:34:35,366 --> 0:34:36,966
But the

1133
00:34:36,966 --> 0:34:38,676
OCKSynchronizedStoreManager can

1134
00:34:38,676 --> 0:34:40,886
interface with any object that

1135
00:34:40,886 --> 0:34:42,286
implements our OCKStore

1136
00:34:42,286 --> 0:34:42,795
protocol.

1137
00:34:43,525 --> 0:34:44,766
That means it would be possible

1138
00:34:44,766 --> 0:34:47,386
for you to wrap a web server, a

1139
00:34:47,386 --> 0:34:49,456
third-party database, or even a

1140
00:34:49,505 --> 0:34:51,406
simple JSON file, and use that

1141
00:34:51,406 --> 0:34:52,126
as your database.

1142
00:34:52,126 --> 0:34:55,016
For our purposes today, we're

1143
00:34:55,016 --> 0:34:56,255
going to stick with Core Data.

1144
00:34:57,666 --> 0:34:58,856
The next thing we need to do is

1145
00:34:58,896 --> 0:35:00,136
populate some data in the Store.

1146
00:34:58,896 --> 0:35:00,136
populate some data in the Store.

1147
00:35:00,136 --> 0:35:00,956
So we're just going to write a

1148
00:35:00,956 --> 0:35:02,256
handy extension to take care of

1149
00:35:02,256 --> 0:35:02,726
that for us.

1150
00:35:03,586 --> 0:35:04,716
In a real situation, you may

1151
00:35:04,716 --> 0:35:05,986
pull it down from a web server

1152
00:35:05,986 --> 0:35:06,876
or load it in from your app

1153
00:35:06,936 --> 0:35:07,246
bundle.

1154
00:35:07,786 --> 0:35:08,676
But today, we're just going to

1155
00:35:08,676 --> 0:35:09,446
code it up right in here.

1156
00:35:09,446 --> 0:35:12,266
Now we're going to create two

1157
00:35:12,266 --> 0:35:13,886
tasks, one to take a medication

1158
00:35:14,156 --> 0:35:15,936
and one to check -- or one to

1159
00:35:15,936 --> 0:35:16,656
log when you're feeling

1160
00:35:16,656 --> 0:35:16,986
nauseous.

1161
00:35:17,816 --> 0:35:18,766
So to do that, we're going to

1162
00:35:18,766 --> 0:35:19,596
need to create a schedule.

1163
00:35:23,086 --> 0:35:23,916
We're creating a couple of

1164
00:35:23,916 --> 0:35:24,036
dates.

1165
00:35:24,036 --> 0:35:24,586
Don't worry too much about

1166
00:35:24,586 --> 0:35:24,786
these.

1167
00:35:24,786 --> 0:35:26,166
The important part is down here

1168
00:35:26,166 --> 0:35:26,776
where we're creating the

1169
00:35:26,776 --> 0:35:27,176
schedule.

1170
00:35:27,246 --> 0:35:28,706
And we create that schedule by

1171
00:35:28,706 --> 0:35:29,656
composing elements.

1172
00:35:30,416 --> 0:35:31,556
We've got a breakfast element

1173
00:35:31,616 --> 0:35:32,716
that repeats every day.

1174
00:35:32,896 --> 0:35:33,686
So every day, we're going to

1175
00:35:33,686 --> 0:35:35,096
take our medication at

1176
00:35:35,096 --> 0:35:35,476
breakfast.

1177
00:35:35,876 --> 0:35:37,296
Another one every day at lunch.

1178
00:35:37,696 --> 0:35:39,176
And a third one every other day

1179
00:35:39,176 --> 0:35:39,446
at dinner.

1180
00:35:40,006 --> 0:35:41,136
You probably wouldn't actually

1181
00:35:41,136 --> 0:35:42,516
schedule medication like this.

1182
00:35:42,956 --> 0:35:44,336
But CareKit lets us make some

1183
00:35:44,336 --> 0:35:45,556
really flexible scheduling.

1184
00:35:45,556 --> 0:35:46,456
And we just wanted to show that

1185
00:35:46,456 --> 0:35:47,686
off a little bit.

1186
00:35:48,416 --> 0:35:50,356
With the schedule in hand, we

1187
00:35:50,356 --> 0:35:51,466
can now create our task.

1188
00:35:52,916 --> 0:35:55,056
To do that, we need to specify a

1189
00:35:55,056 --> 0:35:56,046
unique identifier.

1190
00:35:56,046 --> 0:35:57,246
We're going to use doxylamine.

1191
00:35:57,356 --> 0:35:58,556
This is a common medication

1192
00:35:58,556 --> 0:36:00,086
prescribed for nausea.

1193
00:35:58,556 --> 0:36:00,086
prescribed for nausea.

1194
00:36:01,506 --> 0:36:02,846
And we'll tack on the schedule,

1195
00:36:02,846 --> 0:36:03,376
of course.

1196
00:36:03,776 --> 0:36:04,546
And we'll provide some

1197
00:36:04,546 --> 0:36:05,486
instruction so that our

1198
00:36:05,486 --> 0:36:07,126
imaginary patient knows exactly

1199
00:36:07,126 --> 0:36:07,576
what to do.

1200
00:36:10,066 --> 0:36:11,326
Let's create one more task, this

1201
00:36:11,326 --> 0:36:11,986
one for nausea.

1202
00:36:12,576 --> 0:36:13,816
So in this case, we're going to

1203
00:36:13,816 --> 0:36:15,236
create a more simple schedule.

1204
00:36:15,646 --> 0:36:17,116
This schedule is going to run

1205
00:36:17,116 --> 0:36:19,106
every day, all day.

1206
00:36:19,106 --> 0:36:20,146
Because there is not any

1207
00:36:20,206 --> 0:36:21,636
particular time that you might

1208
00:36:21,696 --> 0:36:22,686
feel nauseous, we want you to be

1209
00:36:22,686 --> 0:36:25,406
able to log any time.

1210
00:36:25,566 --> 0:36:26,706
Finally, we'll create the task

1211
00:36:26,746 --> 0:36:28,036
for it very much the same way as

1212
00:36:28,036 --> 0:36:28,636
we did before.

1213
00:36:29,206 --> 0:36:30,456
The key difference here is that

1214
00:36:30,456 --> 0:36:32,466
we're saying that this task's

1215
00:36:32,586 --> 0:36:34,046
impact adherence property is

1216
00:36:34,116 --> 0:36:34,486
false.

1217
00:36:35,406 --> 0:36:36,606
You'll note at the top of most

1218
00:36:36,606 --> 0:36:38,866
CareKit apps, you'll see a bunch

1219
00:36:38,866 --> 0:36:40,126
of -- like a weekly calendar

1220
00:36:40,176 --> 0:36:41,256
with some completion rings in

1221
00:36:41,256 --> 0:36:41,346
it.

1222
00:36:42,416 --> 0:36:43,846
By setting this flag false,

1223
00:36:43,926 --> 0:36:46,296
we'll exclude this nausea task

1224
00:36:46,686 --> 0:36:49,026
from impacting those completion

1225
00:36:49,616 --> 0:36:49,766
rings.

1226
00:36:52,276 --> 0:36:53,366
Now that we have our two task

1227
00:36:53,366 --> 0:36:54,436
objects, we need to add them

1228
00:36:54,436 --> 0:36:55,046
into the Store.

1229
00:36:55,946 --> 0:36:56,706
Pretty straightforward.

1230
00:36:57,436 --> 0:36:58,626
And we've made it this far.

1231
00:36:58,626 --> 0:37:00,456
So we've got our medication

1232
00:36:58,626 --> 0:37:00,456
So we've got our medication

1233
00:37:00,456 --> 0:37:01,436
task, and we've got our nausea

1234
00:37:01,436 --> 0:37:01,786
task.

1235
00:37:02,286 --> 0:37:03,466
We also want to add in a couple

1236
00:37:03,496 --> 0:37:05,056
of contacts so that our patient

1237
00:37:05,056 --> 0:37:05,996
has somebody that they can

1238
00:37:05,996 --> 0:37:09,606
contact if they need help.

1239
00:37:09,796 --> 0:37:11,146
Contacts are created very much

1240
00:37:11,146 --> 0:37:12,256
the same way as other CareKit

1241
00:37:12,256 --> 0:37:12,516
entities.

1242
00:37:12,516 --> 0:37:14,066
You have to give them a unique

1243
00:37:14,066 --> 0:37:14,596
identifier.

1244
00:37:14,956 --> 0:37:16,066
And you can set a number of

1245
00:37:16,066 --> 0:37:16,746
properties on them.

1246
00:37:16,866 --> 0:37:18,326
In this case, we'll set an

1247
00:37:18,326 --> 0:37:20,446
image, a title, and a role.

1248
00:37:20,446 --> 0:37:23,036
And then we can also provide

1249
00:37:24,436 --> 0:37:26,046
contact information for them.

1250
00:37:26,946 --> 0:37:27,906
Here, we'll give them an email

1251
00:37:27,906 --> 0:37:30,546
address, a phone number, and a

1252
00:37:32,076 --> 0:37:32,236
message.

1253
00:37:32,376 --> 0:37:33,486
Finally, we're going to tack on

1254
00:37:33,486 --> 0:37:33,956
an address.

1255
00:37:34,096 --> 0:37:35,536
And this address will allow our

1256
00:37:35,586 --> 0:37:37,566
patient to get directions from

1257
00:37:37,566 --> 0:37:38,626
Maps if they need to get into

1258
00:37:38,626 --> 0:37:39,016
the office.

1259
00:37:40,066 --> 0:37:43,296
We'll add one more contact, very

1260
00:37:43,296 --> 0:37:44,586
much the same way as the first.

1261
00:37:45,726 --> 0:37:47,416
Finally, we're going to add both

1262
00:37:47,476 --> 0:37:50,596
contacts into the Store.

1263
00:37:51,526 --> 0:37:53,266
All right, so we've got our two

1264
00:37:53,266 --> 0:37:54,056
tasks in the Store.

1265
00:37:54,056 --> 0:37:55,216
We've got our two contacts in

1266
00:37:55,216 --> 0:37:55,596
the Store.

1267
00:37:56,346 --> 0:37:57,836
That brings us to the end of the

1268
00:37:57,836 --> 0:37:58,496
first step.

1269
00:37:58,726 --> 0:37:59,696
We've made it through creating a

1270
00:37:59,696 --> 0:37:59,976
Store.

1271
00:37:59,976 --> 0:38:01,066
And we've made it through adding

1272
00:37:59,976 --> 0:38:01,066
And we've made it through adding

1273
00:38:01,326 --> 0:38:02,296
our data into the Store.

1274
00:38:02,896 --> 0:38:04,996
That means the second step is to

1275
00:38:04,996 --> 0:38:05,886
generate the UI.

1276
00:38:05,886 --> 0:38:07,796
We have to write the code to

1277
00:38:07,796 --> 0:38:09,126
tell CareKit how we would like

1278
00:38:09,166 --> 0:38:09,786
this displayed.

1279
00:38:10,326 --> 0:38:12,116
And the way that we're going to

1280
00:38:12,116 --> 0:38:13,926
do that is to write a

1281
00:38:13,926 --> 0:38:14,546
ViewController.

1282
00:38:15,146 --> 0:38:17,816
So here, we're creating our

1283
00:38:17,916 --> 0:38:18,776
careViewController.

1284
00:38:18,846 --> 0:38:19,676
We're going to go into this in

1285
00:38:19,676 --> 0:38:20,286
just a second.

1286
00:38:20,706 --> 0:38:21,746
But you'll note that I'm passing

1287
00:38:21,746 --> 0:38:22,596
in the storeManager.

1288
00:38:22,596 --> 0:38:24,106
This is going to be used for

1289
00:38:24,106 --> 0:38:24,916
synchronization.

1290
00:38:26,456 --> 0:38:27,806
Finally, we'll set this

1291
00:38:28,166 --> 0:38:29,516
ViewController as our root view,

1292
00:38:29,516 --> 0:38:30,526
so that when we run the app,

1293
00:38:31,326 --> 0:38:31,996
this is where we're going to

1294
00:38:31,996 --> 0:38:32,216
start.

1295
00:38:32,966 --> 0:38:34,606
Let's jump in here and see what

1296
00:38:34,606 --> 0:38:35,606
we have.

1297
00:38:36,476 --> 0:38:37,916
This is presently an empty

1298
00:38:37,916 --> 0:38:38,226
class.

1299
00:38:38,676 --> 0:38:40,836
You can see that inherits from

1300
00:38:40,836 --> 0:38:42,516
OCKDailyPageViewController.

1301
00:38:43,106 --> 0:38:44,106
If you're creating a CareKit

1302
00:38:44,106 --> 0:38:45,726
app, and you want some serious

1303
00:38:45,786 --> 0:38:46,866
customization power,

1304
00:38:47,496 --> 0:38:49,536
OCKDailyPageViewController is a

1305
00:38:49,656 --> 0:38:51,066
really good starting point.

1306
00:38:52,026 --> 0:38:52,896
When you inherit from this

1307
00:38:52,946 --> 0:38:53,976
class, what you're going to get

1308
00:38:55,336 --> 0:38:56,916
is a viewController that has the

1309
00:38:56,916 --> 0:38:58,386
calendar up at the top with the

1310
00:38:58,386 --> 0:38:59,216
completion rings in it.

1311
00:38:59,216 --> 0:39:00,946
And the user will be able to

1312
00:38:59,216 --> 0:39:00,946
And the user will be able to

1313
00:39:00,946 --> 0:39:02,396
page through that and select the

1314
00:39:02,396 --> 0:39:03,056
date that they like.

1315
00:39:03,456 --> 0:39:04,916
And down below that, you'll have

1316
00:39:04,916 --> 0:39:06,306
a second pageViewController.

1317
00:39:06,896 --> 0:39:09,096
And each time, the user changes

1318
00:39:09,136 --> 0:39:10,676
the date either by swiping or

1319
00:39:10,676 --> 0:39:12,076
tapping, you're going to get a

1320
00:39:12,076 --> 0:39:12,330
callback.

1321
00:39:14,216 --> 0:39:15,846
This callback, as a matter of

1322
00:39:16,526 --> 0:39:16,736
fact.

1323
00:39:16,736 --> 0:39:18,286
And inside of this function,

1324
00:39:18,956 --> 0:39:20,286
you're going to receive these

1325
00:39:20,346 --> 0:39:21,126
two parameters, a

1326
00:39:21,126 --> 0:39:22,906
listViewController and the date.

1327
00:39:23,746 --> 0:39:24,906
The date is the date that the

1328
00:39:24,906 --> 0:39:26,086
user has just selected.

1329
00:39:26,426 --> 0:39:28,776
And the listViewController is an

1330
00:39:28,856 --> 0:39:29,936
empty page of content.

1331
00:39:29,936 --> 0:39:32,076
And as the developer, your job

1332
00:39:32,076 --> 0:39:33,766
is to fill in the content that

1333
00:39:33,766 --> 0:39:34,986
you'd like the user to see for

1334
00:39:34,986 --> 0:39:35,816
the date they selected.

1335
00:39:35,816 --> 0:39:37,566
And doing that is very

1336
00:39:37,566 --> 0:39:37,966
straightforward.

1337
00:39:41,056 --> 0:39:42,776
Here, we're creating an

1338
00:39:43,106 --> 0:39:44,766
OCKChecklistTaskViewController.

1339
00:39:45,366 --> 0:39:47,436
And we can append that onto the

1340
00:39:47,436 --> 0:39:48,176
listViewController.

1341
00:39:48,176 --> 0:39:49,126
That will add it into the

1342
00:39:49,126 --> 0:39:50,366
content for the selected day.

1343
00:39:51,596 --> 0:39:52,856
So let's take a quick look at

1344
00:39:52,856 --> 0:39:54,356
this class, the

1345
00:39:54,406 --> 0:39:56,136
OCKChecklistTaskViewController.

1346
00:39:56,656 --> 0:39:57,756
Now you'll note from Srinath's

1347
00:39:57,796 --> 0:39:59,406
just -- talk just a moment ago

1348
00:39:59,406 --> 0:40:01,616
that there's CareKit UI and

1349
00:39:59,406 --> 0:40:01,616
that there's CareKit UI and

1350
00:40:01,616 --> 0:40:02,106
CareKit.

1351
00:40:02,486 --> 0:40:03,856
And in CareKit UI, we had the

1352
00:40:03,896 --> 0:40:05,396
tasks views.

1353
00:40:05,986 --> 0:40:07,026
And there were four or five of

1354
00:40:07,026 --> 0:40:07,116
them.

1355
00:40:07,526 --> 0:40:09,476
Well, in CareKit, there's

1356
00:40:09,536 --> 0:40:09,966
parity.

1357
00:40:10,396 --> 0:40:11,316
And there's a matching view

1358
00:40:11,316 --> 0:40:12,446
controller for each of those.

1359
00:40:13,426 --> 0:40:15,246
The key difference is that the

1360
00:40:15,246 --> 0:40:17,626
views in CareKit UI are naive

1361
00:40:18,056 --> 0:40:19,616
and not synchronized, whereas

1362
00:40:19,616 --> 0:40:21,256
the view controllers in CareKit

1363
00:40:21,706 --> 0:40:23,046
will update automatically.

1364
00:40:24,186 --> 0:40:25,296
When we instantiate this, we

1365
00:40:25,296 --> 0:40:26,326
need to pass it the Store.

1366
00:40:26,636 --> 0:40:27,506
And we need to tell it which

1367
00:40:27,506 --> 0:40:28,746
task we'd like it to display the

1368
00:40:28,746 --> 0:40:28,976
data for.

1369
00:40:30,116 --> 0:40:31,076
Finally, we give it an event

1370
00:40:31,126 --> 0:40:32,396
query that specifies that it

1371
00:40:32,396 --> 0:40:33,486
should only show the events for

1372
00:40:33,486 --> 0:40:33,776
today.

1373
00:40:35,296 --> 0:40:36,516
So this is our medication card.

1374
00:40:36,516 --> 0:40:38,996
It's going to ask the patient to

1375
00:40:38,996 --> 0:40:40,236
take their doxylamine.

1376
00:40:41,016 --> 0:40:41,866
We'll add one more.

1377
00:40:43,146 --> 0:40:44,706
SimpleLogTaskViewController

1378
00:40:44,736 --> 0:40:46,036
takes the exact same arguments.

1379
00:40:46,146 --> 0:40:47,356
And this one is going to ask the

1380
00:40:47,356 --> 0:40:48,626
user to log when they're feeling

1381
00:40:48,626 --> 0:40:48,986
nauseous.

1382
00:40:50,356 --> 0:40:51,256
We've written a lot of code.

1383
00:40:51,256 --> 0:40:53,316
But we're finally ready to run

1384
00:40:53,316 --> 0:40:54,216
the app and see what it looks

1385
00:40:54,216 --> 0:40:54,306
like.

1386
00:41:00,206 --> 0:41:00,986
All right, so we're up and

1387
00:41:00,986 --> 0:41:01,276
running.

1388
00:41:01,666 --> 0:41:03,186
This is what we have so far.

1389
00:41:03,516 --> 0:41:04,666
You can see we've got both of

1390
00:41:04,666 --> 0:41:05,976
the tasks that we've added.

1391
00:41:06,876 --> 0:41:08,206
The user can swipe through the

1392
00:41:08,206 --> 0:41:09,176
dates on the calendar.

1393
00:41:10,736 --> 0:41:11,896
They can get back to today like

1394
00:41:11,896 --> 0:41:12,076
this.

1395
00:41:13,116 --> 0:41:15,326
You'll also note that on some

1396
00:41:15,326 --> 0:41:16,316
days, we have two events.

1397
00:41:16,456 --> 0:41:17,526
On other days, we have three

1398
00:41:17,526 --> 0:41:17,786
events.

1399
00:41:17,956 --> 0:41:18,846
That's due to the way that we

1400
00:41:18,846 --> 0:41:19,736
scheduled our task.

1401
00:41:20,936 --> 0:41:22,226
And when the user checks off a

1402
00:41:22,226 --> 0:41:24,476
task, the completion rings fill

1403
00:41:24,476 --> 0:41:25,206
up automatically.

1404
00:41:26,166 --> 0:41:28,616
This synchronization between the

1405
00:41:28,616 --> 0:41:30,666
tasks, the TaskViewController,

1406
00:41:30,916 --> 0:41:32,146
and the CalendarViewController

1407
00:41:32,146 --> 0:41:33,996
up at the top happens

1408
00:41:33,996 --> 0:41:35,236
automatically through the Store

1409
00:41:35,236 --> 0:41:35,796
synchronizer.

1410
00:41:36,986 --> 0:41:38,106
You'll also note that when we

1411
00:41:38,106 --> 0:41:40,326
log nausea events, they don't

1412
00:41:40,326 --> 0:41:41,626
show up in the completion ring

1413
00:41:41,906 --> 0:41:43,176
because we explicitly marked

1414
00:41:43,226 --> 0:41:45,226
those impacts adherence equals

1415
00:41:45,266 --> 0:41:47,266
false when we created our task.

1416
00:41:48,496 --> 0:41:50,126
Now before we move on, I want to

1417
00:41:50,126 --> 0:41:52,096
hit on two places where we can

1418
00:41:52,096 --> 0:41:53,476
really easily customize our

1419
00:41:53,476 --> 0:41:54,006
CareKit app.

1420
00:41:54,246 --> 0:41:55,236
And I think you guys will really

1421
00:41:55,236 --> 0:41:55,636
like these.

1422
00:41:56,926 --> 0:41:59,446
The first one, if we have --

1423
00:41:59,626 --> 0:42:01,846
hope back to our app delegate is

1424
00:41:59,626 --> 0:42:01,846
hope back to our app delegate is

1425
00:42:03,396 --> 0:42:05,156
that we can set a tint color on

1426
00:42:05,156 --> 0:42:05,556
the window.

1427
00:42:06,196 --> 0:42:07,166
And this tint color will

1428
00:42:07,166 --> 0:42:08,316
propagate down through our

1429
00:42:08,316 --> 0:42:08,976
entire app.

1430
00:42:09,326 --> 0:42:10,546
And it's a really easy way to

1431
00:42:10,546 --> 0:42:11,966
apply styling or to brand your

1432
00:42:12,686 --> 0:42:12,766
app.

1433
00:42:16,056 --> 0:42:17,626
The second one is to switch out

1434
00:42:17,666 --> 0:42:19,456
the kind of task view that we're

1435
00:42:19,456 --> 0:42:19,826
using.

1436
00:42:20,596 --> 0:42:21,446
So you remember that there were

1437
00:42:21,446 --> 0:42:22,516
a number of different views for

1438
00:42:22,516 --> 0:42:23,686
tasks in CareKit UI.

1439
00:42:24,846 --> 0:42:26,446
And we can switch to a different

1440
00:42:26,926 --> 0:42:29,536
one simply by switching the

1441
00:42:29,536 --> 0:42:30,476
ViewController we're using.

1442
00:42:30,596 --> 0:42:31,356
They all have the same

1443
00:42:31,356 --> 0:42:32,026
initializers.

1444
00:42:33,876 --> 0:42:35,556
We'll rerun our app and take a

1445
00:42:35,556 --> 0:42:36,546
look at how this changes it.

1446
00:42:37,576 --> 0:42:37,956
Awesome.

1447
00:42:38,276 --> 0:42:39,316
So you can see the color is

1448
00:42:39,316 --> 0:42:39,846
different now.

1449
00:42:40,196 --> 0:42:42,196
And we also have an entirely

1450
00:42:43,216 --> 0:42:45,526
different task card to look at.

1451
00:42:46,066 --> 0:42:46,886
Now, what's really interesting

1452
00:42:46,886 --> 0:42:49,106
about this card is that it shows

1453
00:42:49,106 --> 0:42:49,996
the time that the user is

1454
00:42:49,996 --> 0:42:50,766
supposed to take their

1455
00:42:50,766 --> 0:42:51,346
medication.

1456
00:42:51,876 --> 0:42:53,086
But when we check one of these

1457
00:42:53,086 --> 0:42:55,306
off, the time that it displays

1458
00:42:56,226 --> 0:42:58,366
changes to the moment that the

1459
00:42:58,366 --> 0:42:59,316
user tapped the button.

1460
00:42:59,546 --> 0:43:00,806
This is really useful because it

1461
00:42:59,546 --> 0:43:00,806
This is really useful because it

1462
00:43:00,806 --> 0:43:02,026
allows our patient to see the

1463
00:43:02,026 --> 0:43:03,366
last time that she's taken her

1464
00:43:03,366 --> 0:43:03,966
medication.

1465
00:43:08,096 --> 0:43:08,316
All right.

1466
00:43:08,316 --> 0:43:09,486
I think we're ready to move on

1467
00:43:09,486 --> 0:43:10,636
to creating some charts now.

1468
00:43:11,066 --> 0:43:12,676
I think what we'll do is try to

1469
00:43:12,676 --> 0:43:13,796
put a chart right in between the

1470
00:43:13,836 --> 0:43:14,696
two cards that we have.

1471
00:43:14,766 --> 0:43:15,876
Maybe we'll make it a bar chart.

1472
00:43:15,876 --> 0:43:17,526
And we'll say that it will show

1473
00:43:18,206 --> 0:43:19,866
the number of times our patient

1474
00:43:19,866 --> 0:43:20,796
is taking their medication

1475
00:43:20,796 --> 0:43:21,496
versus the number of times that

1476
00:43:21,496 --> 0:43:21,976
she's felt nauseous.

1477
00:43:25,716 --> 0:43:27,286
So we'll drop down right here

1478
00:43:27,286 --> 0:43:28,276
between the two cards that we've

1479
00:43:28,336 --> 0:43:28,906
created already.

1480
00:43:29,436 --> 0:43:30,096
And we're going to need to

1481
00:43:30,096 --> 0:43:33,026
create two data series, one for

1482
00:43:33,026 --> 0:43:34,386
the medication, and one for the

1483
00:43:34,386 --> 0:43:34,646
nausea.

1484
00:43:34,646 --> 0:43:35,346
So we're going to start with the

1485
00:43:35,346 --> 0:43:35,806
nausea one.

1486
00:43:36,456 --> 0:43:37,656
When we create this data series,

1487
00:43:38,326 --> 0:43:38,936
we have to give it the

1488
00:43:38,936 --> 0:43:39,586
identifier.

1489
00:43:39,586 --> 0:43:40,876
This is a task whose data we'd

1490
00:43:40,876 --> 0:43:41,536
like to display.

1491
00:43:41,746 --> 0:43:43,066
We can give it a legend title, a

1492
00:43:43,066 --> 0:43:44,786
pair of colors to plot in, and a

1493
00:43:44,786 --> 0:43:46,206
marker size, which in this case

1494
00:43:46,206 --> 0:43:47,216
will dictate the width of the

1495
00:43:47,216 --> 0:43:47,736
bar chart.

1496
00:43:48,506 --> 0:43:49,616
And an event aggregator.

1497
00:43:49,916 --> 0:43:51,716
The event aggregator determines

1498
00:43:51,876 --> 0:43:53,066
the y-axis value.

1499
00:43:53,266 --> 0:43:54,446
And in this case, we're simply

1500
00:43:54,446 --> 0:43:55,826
going to count the number of

1501
00:43:55,826 --> 0:43:57,136
times that our patient has felt

1502
00:43:57,136 --> 0:43:57,536
nauseous.

1503
00:43:58,546 --> 0:43:59,856
We'll do this once more, this

1504
00:43:59,856 --> 0:44:01,236
time for our medication.

1505
00:43:59,856 --> 0:44:01,236
time for our medication.

1506
00:44:02,146 --> 0:44:03,086
And it's going to be very much

1507
00:44:03,086 --> 0:44:03,466
the same.

1508
00:44:04,776 --> 0:44:06,536
With both of these in hand, we

1509
00:44:06,536 --> 0:44:07,246
can create an

1510
00:44:07,276 --> 0:44:09,666
OCKCartesianChartViewController.

1511
00:44:10,236 --> 0:44:12,356
The initializer takes the

1512
00:44:12,356 --> 0:44:13,006
storeManager.

1513
00:44:13,006 --> 0:44:14,136
Again, this is to provide that

1514
00:44:14,186 --> 0:44:15,296
synchronization that makes

1515
00:44:15,346 --> 0:44:16,246
CareKit so great.

1516
00:44:16,846 --> 0:44:18,186
And we also pass in a data

1517
00:44:18,186 --> 0:44:20,586
series, one for each series that

1518
00:44:20,586 --> 0:44:21,406
we'd like displayed on the

1519
00:44:21,436 --> 0:44:21,666
chart.

1520
00:44:22,626 --> 0:44:23,896
We also pass in the date that

1521
00:44:23,896 --> 0:44:25,236
we'd like the data displayed for

1522
00:44:25,966 --> 0:44:26,786
and the plot type.

1523
00:44:27,066 --> 0:44:27,946
Here, we're going to use the bar

1524
00:44:27,946 --> 0:44:28,186
chart.

1525
00:44:28,186 --> 0:44:29,726
But you could just as easily use

1526
00:44:29,726 --> 0:44:31,146
the scatter plot or the line

1527
00:44:31,146 --> 0:44:31,436
plot.

1528
00:44:32,656 --> 0:44:33,966
Finally, before we run our app

1529
00:44:33,966 --> 0:44:35,546
again, we're going to set a

1530
00:44:35,546 --> 0:44:38,146
couple of labels so that our

1531
00:44:38,146 --> 0:44:39,946
patient can understand the data

1532
00:44:39,946 --> 0:44:40,846
that we're displaying to her.

1533
00:44:41,236 --> 0:44:43,246
Let's run it one more time and

1534
00:44:43,246 --> 0:44:43,976
take a look at our chart.

1535
00:44:47,376 --> 0:44:47,666
Awesome.

1536
00:44:47,666 --> 0:44:48,806
So you can see down here we've

1537
00:44:48,806 --> 0:44:49,386
got our chart.

1538
00:44:49,576 --> 0:44:50,686
It's got data shown on it.

1539
00:44:51,076 --> 0:44:52,166
But what's really fantastic

1540
00:44:52,166 --> 0:44:53,486
about this chart is that it

1541
00:44:53,556 --> 0:44:55,526
updates in real time with

1542
00:44:55,596 --> 0:44:57,786
beautiful animations as we check

1543
00:44:57,786 --> 0:44:58,236
off data.

1544
00:44:59,806 --> 0:45:01,486
Perhaps on the first day, our

1545
00:44:59,806 --> 0:45:01,486
Perhaps on the first day, our

1546
00:45:01,486 --> 0:45:03,046
user didn't take her medication.

1547
00:45:04,276 --> 0:45:05,376
And she felt really sick.

1548
00:45:06,456 --> 0:45:08,796
On the second day, she started

1549
00:45:08,796 --> 0:45:09,246
to take it.

1550
00:45:09,886 --> 0:45:12,986
So she felt a little bit better.

1551
00:45:13,186 --> 0:45:15,556
And on the third day, she took

1552
00:45:15,556 --> 0:45:16,496
all of her medication.

1553
00:45:16,496 --> 0:45:18,226
And today, she also took all of

1554
00:45:18,226 --> 0:45:19,276
it and doesn't feel sick at all.

1555
00:45:20,216 --> 0:45:21,146
So you can see we're already

1556
00:45:21,146 --> 0:45:22,196
getting a pretty good patient

1557
00:45:22,196 --> 0:45:22,736
experience.

1558
00:45:22,786 --> 0:45:24,256
But there's another feature that

1559
00:45:24,256 --> 0:45:25,686
we can take advantage of that I

1560
00:45:25,686 --> 0:45:26,726
think you guys will really like.

1561
00:45:27,736 --> 0:45:29,176
CareKit now has the ability to

1562
00:45:29,176 --> 0:45:31,906
add arbitrary content anywhere

1563
00:45:31,906 --> 0:45:33,036
in this listViewController.

1564
00:45:33,036 --> 0:45:33,846
Let me show you how we can do

1565
00:45:33,846 --> 0:45:33,976
that.

1566
00:45:37,046 --> 0:45:38,316
So up at the very top, I think

1567
00:45:38,316 --> 0:45:39,316
we'd like to add a banner.

1568
00:45:40,746 --> 0:45:41,636
And we're going to do that by

1569
00:45:41,636 --> 0:45:42,646
creating this tipView.

1570
00:45:42,646 --> 0:45:45,556
We'll set some text on the

1571
00:45:45,556 --> 0:45:46,056
tipView.

1572
00:45:46,056 --> 0:45:47,256
And we'll also attach an image

1573
00:45:47,256 --> 0:45:47,566
to it.

1574
00:45:48,246 --> 0:45:49,546
But what's really important here

1575
00:45:50,116 --> 0:45:52,336
is that we simply append it as a

1576
00:45:52,336 --> 0:45:52,606
view.

1577
00:45:53,756 --> 0:45:55,386
Now what I want you to note is

1578
00:45:55,386 --> 0:45:57,236
that this tipView is not part of

1579
00:45:57,286 --> 0:45:57,716
CareKit.

1580
00:45:58,276 --> 0:46:01,416
We created it just for this

1581
00:45:58,276 --> 0:46:01,416
We created it just for this

1582
00:46:01,416 --> 0:46:01,706
demo.

1583
00:46:02,026 --> 0:46:03,676
And it could just as easily be a

1584
00:46:03,676 --> 0:46:04,836
view that came from your

1585
00:46:04,836 --> 0:46:05,736
application or a third-party

1586
00:46:05,736 --> 0:46:05,976
library.

1587
00:46:11,046 --> 0:46:12,466
When we run our app now, you'll

1588
00:46:12,466 --> 0:46:13,546
see that we get this beautiful

1589
00:46:13,546 --> 0:46:14,676
banner up at the top that

1590
00:46:14,676 --> 0:46:16,156
encourages our patient to learn

1591
00:46:16,156 --> 0:46:17,236
more about the relationship

1592
00:46:17,276 --> 0:46:18,676
between exercise and healthy

1593
00:46:18,676 --> 0:46:19,206
pregnancy.

1594
00:46:19,206 --> 0:46:21,016
[Chuckles]

1595
00:46:21,516 --> 0:46:25,576
[ Cheering and Applause ]

1596
00:46:26,076 --> 0:46:27,286
You can imagine that there is a

1597
00:46:27,366 --> 0:46:29,276
plethora of ways that this could

1598
00:46:29,276 --> 0:46:29,696
be used.

1599
00:46:30,086 --> 0:46:31,296
You could populate this data

1600
00:46:31,676 --> 0:46:33,476
based on what's already in your

1601
00:46:33,476 --> 0:46:34,846
patient's Care Plan Store.

1602
00:46:35,156 --> 0:46:36,216
You could pull it down from a

1603
00:46:36,216 --> 0:46:36,606
server.

1604
00:46:37,016 --> 0:46:38,296
Or you could set it based on the

1605
00:46:38,296 --> 0:46:38,606
date.

1606
00:46:39,066 --> 0:46:40,176
The possibilities are really

1607
00:46:40,176 --> 0:46:40,696
endless here.

1608
00:46:41,766 --> 0:46:42,726
Now the last thing that I want

1609
00:46:42,726 --> 0:46:44,076
to do before we wrap up our demo

1610
00:46:44,526 --> 0:46:46,426
is give our user quick access to

1611
00:46:46,506 --> 0:46:47,246
her contacts.

1612
00:46:47,606 --> 0:46:48,596
And I think what we'll do is

1613
00:46:48,596 --> 0:46:50,096
just add a Care Team button up

1614
00:46:50,096 --> 0:46:52,456
here that shows a modal

1615
00:46:52,496 --> 0:46:53,656
presentation with all her

1616
00:46:53,656 --> 0:46:54,646
contacts in it.

1617
00:46:54,646 --> 0:46:56,186
And CareKit makes that really

1618
00:46:56,186 --> 0:46:56,376
easy.

1619
00:46:57,036 --> 0:46:59,576
Up at the top, we're going to

1620
00:46:59,576 --> 0:47:02,366
create our UI Bar Button item.

1621
00:46:59,576 --> 0:47:02,366
create our UI Bar Button item.

1622
00:47:02,606 --> 0:47:03,926
And we're going to set it to

1623
00:47:03,926 --> 0:47:06,276
call this function here, in

1624
00:47:06,276 --> 0:47:08,116
which we're going to create an

1625
00:47:08,226 --> 0:47:09,286
instance of the

1626
00:47:09,286 --> 0:47:10,746
OCKContactsListViewController.

1627
00:47:11,286 --> 0:47:12,386
This is a really handy class

1628
00:47:12,386 --> 0:47:13,276
that we provide for you.

1629
00:47:13,696 --> 0:47:14,866
All you need to do is pass it a

1630
00:47:14,866 --> 0:47:15,816
Store manager.

1631
00:47:15,816 --> 0:47:17,666
And it will automatically query

1632
00:47:17,666 --> 0:47:18,996
all the contacts in your Store

1633
00:47:19,096 --> 0:47:19,976
and display them for you.

1634
00:47:24,426 --> 0:47:26,386
Run our app one last time to see

1635
00:47:26,386 --> 0:47:27,066
what it looks like.

1636
00:47:28,296 --> 0:47:28,716
There we go.

1637
00:47:28,876 --> 0:47:30,896
So we'll tap on this and out

1638
00:47:30,926 --> 0:47:31,726
come our contacts.

1639
00:47:32,386 --> 0:47:33,296
Now, if our patient needs

1640
00:47:33,346 --> 0:47:34,526
directions into the office,

1641
00:47:35,026 --> 0:47:37,416
she's just a tap away from Maps.

1642
00:47:38,246 --> 0:47:40,286
It looks like it's about 4.9

1643
00:47:40,286 --> 0:47:40,636
miles.

1644
00:47:41,916 --> 0:47:42,706
That's not too shabby.

1645
00:47:43,196 --> 0:47:43,586
All right.

1646
00:47:44,196 --> 0:47:45,516
So we've got our contacts in

1647
00:47:45,516 --> 0:47:45,616
there.

1648
00:47:45,616 --> 0:47:47,256
And our app is looking pretty

1649
00:47:47,256 --> 0:47:47,526
good.

1650
00:47:48,256 --> 0:47:49,686
I think I'd like to wind down

1651
00:47:49,686 --> 0:47:50,436
the demo right here.

1652
00:47:50,436 --> 0:47:51,586
Let's call this complete.

1653
00:47:52,366 --> 0:47:53,346
But before we go back to

1654
00:47:53,396 --> 0:47:54,576
Srinath, I want to just reflect

1655
00:47:54,576 --> 0:47:55,846
for a moment on what we've done.

1656
00:47:57,186 --> 0:47:59,046
In what accounts for about 15

1657
00:47:59,046 --> 0:48:00,416
minutes and more or less 200

1658
00:47:59,046 --> 0:48:00,416
minutes and more or less 200

1659
00:48:00,416 --> 0:48:01,806
lines of code, we've been able

1660
00:48:01,806 --> 0:48:03,906
to complete a beautiful patient

1661
00:48:03,906 --> 0:48:05,616
care application with gorgeous

1662
00:48:05,616 --> 0:48:06,256
animations.

1663
00:48:07,366 --> 0:48:08,956
But what's most important about

1664
00:48:08,956 --> 0:48:10,576
this application is that it's

1665
00:48:10,576 --> 0:48:11,836
extremely modular.

1666
00:48:12,466 --> 0:48:13,616
None of the views know about

1667
00:48:13,616 --> 0:48:14,016
each other.

1668
00:48:15,026 --> 0:48:16,156
All of the viewControllers are

1669
00:48:16,156 --> 0:48:17,186
completely decoupled.

1670
00:48:17,926 --> 0:48:19,296
No delegates are set that tie

1671
00:48:19,336 --> 0:48:19,966
things together.

1672
00:48:20,626 --> 0:48:22,606
This app can be very easily

1673
00:48:22,696 --> 0:48:25,206
updated and changed as the needs

1674
00:48:25,206 --> 0:48:26,546
of our users evolve.

1675
00:48:27,196 --> 0:48:30,836
We think the possibility for

1676
00:48:30,836 --> 0:48:32,386
CareKit 2.0 is boundless.

1677
00:48:32,716 --> 0:48:34,676
And we are really excited to see

1678
00:48:34,676 --> 0:48:36,236
all the amazing things that our

1679
00:48:36,236 --> 0:48:37,336
developers are going to do with

1680
00:48:37,336 --> 0:48:37,416
it.

1681
00:48:38,816 --> 0:48:39,016
All right.

1682
00:48:39,016 --> 0:48:39,756
Back to you, Srinath.

1683
00:48:41,516 --> 0:48:46,546
[ Cheering and Applause ]

1684
00:48:47,046 --> 0:48:47,856
&gt;&gt; Wow, thank you, Erik, for

1685
00:48:47,856 --> 0:48:48,856
that great demo.

1686
00:48:48,856 --> 0:48:49,306
[Chuckles]

1687
00:48:49,306 --> 0:48:52,836
So now to just summarize the

1688
00:48:52,836 --> 0:48:56,426
whole session, CareKit is just a

1689
00:48:56,426 --> 0:48:58,006
fundamental rewrite and

1690
00:48:58,006 --> 0:48:59,596
rearchitecture of the framework.

1691
00:48:59,896 --> 0:49:01,226
It still holds on to its core

1692
00:48:59,896 --> 0:49:01,226
It still holds on to its core

1693
00:49:01,226 --> 0:49:01,646
values.

1694
00:49:01,686 --> 0:49:03,686
But now it makes it extremely

1695
00:49:03,686 --> 0:49:06,046
powerful to use, to build like

1696
00:49:06,196 --> 0:49:07,456
really amazing Care app

1697
00:49:07,456 --> 0:49:09,136
experiences for your user.

1698
00:49:09,136 --> 0:49:12,526
So we spoke about ResearchKit,

1699
00:49:12,586 --> 0:49:14,386
where we talked about UI updates

1700
00:49:14,386 --> 0:49:15,426
that we've made throughout the

1701
00:49:15,426 --> 0:49:17,376
framework, as well as new

1702
00:49:17,376 --> 0:49:19,366
additions to our existing

1703
00:49:19,366 --> 0:49:21,016
library of active tasks.

1704
00:49:21,826 --> 0:49:23,696
And finally, we also touched

1705
00:49:23,696 --> 0:49:25,286
upon all the updates from our

1706
00:49:25,286 --> 0:49:27,796
community, including our two key

1707
00:49:27,796 --> 0:49:29,546
initiatives -- the investigator

1708
00:49:29,546 --> 0:49:30,596
support program, and our

1709
00:49:30,636 --> 0:49:31,766
redesigned website that's coming

1710
00:49:31,766 --> 0:49:31,976
this fall.

1711
00:49:35,266 --> 0:49:37,056
And as always, ResearchKit and

1712
00:49:37,056 --> 0:49:38,706
CareKit are Open Source

1713
00:49:38,706 --> 0:49:39,206
frameworks.

1714
00:49:39,246 --> 0:49:40,666
That's available right now on

1715
00:49:40,666 --> 0:49:40,976
GitHub.

1716
00:49:44,336 --> 0:49:45,716
Now over the next few months,

1717
00:49:45,856 --> 0:49:47,106
we're going to be working really

1718
00:49:47,106 --> 0:49:48,806
hard to add a lot more

1719
00:49:48,806 --> 0:49:49,746
capabilities to these

1720
00:49:49,786 --> 0:49:50,286
frameworks.

1721
00:49:50,746 --> 0:49:52,126
We'll be adding support for Dark

1722
00:49:52,126 --> 0:49:52,436
Mode.

1723
00:49:52,576 --> 0:49:54,006
We'll be adding accessibility,

1724
00:49:54,006 --> 0:49:55,556
localization, as well as more

1725
00:49:55,556 --> 0:49:57,106
documentation support as well.

1726
00:49:57,766 --> 0:49:59,606
And we would highly encourage

1727
00:49:59,656 --> 0:50:00,676
all the developers in our

1728
00:49:59,656 --> 0:50:00,676
all the developers in our

1729
00:50:00,676 --> 0:50:02,626
community to provide us with

1730
00:50:02,726 --> 0:50:05,036
feedback as well as contribute

1731
00:50:05,246 --> 0:50:07,166
as we continue to evolve and

1732
00:50:07,166 --> 0:50:08,906
expand our amazing frameworks.

1733
00:50:10,696 --> 0:50:12,206
For more information about the

1734
00:50:12,206 --> 0:50:13,976
session, please visit this link.

1735
00:50:14,576 --> 0:50:15,926
We are also holding a

1736
00:50:15,926 --> 0:50:17,316
ResearchKit and CareKit lab

1737
00:50:17,366 --> 0:50:19,126
tomorrow at noon where all of us

1738
00:50:19,126 --> 0:50:20,886
will be there to answer any

1739
00:50:20,886 --> 0:50:21,846
questions that you have.

1740
00:50:22,446 --> 0:50:25,616
And with that, thank you all for

1741
00:50:25,616 --> 0:50:26,016
coming.

1742
00:50:26,236 --> 0:50:28,746
And have a great WWDC.

1743
00:50:29,508 --> 0:50:31,508
[ Cheering and Applause ]
