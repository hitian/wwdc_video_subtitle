1
00:00:01,516 --> 0:00:05,516
[音乐]

2
00:00:06,296 --> 0:00:08,296
[掌声]

3
00:00:08,576 --> 0:00:09,146
&gt;&gt; 早上好

4
00:00:14,046 --> 0:00:18,106
Xcode 有很多新功能和改进

5
00:00:19,026 --> 0:00:20,896
这些工具所做的一切是为了

6
00:00:20,896 --> 0:00:22,016
协助你进行

7
00:00:22,016 --> 0:00:26,156
产品构思 产品开发和优质产品交付

8
00:00:26,766 --> 0:00:29,796
我们希望这些工具能让你更有效率

9
00:00:29,796 --> 0:00:31,576
因而你能花更多的时间去设想和

10
00:00:31,576 --> 0:00:32,986
实现下一个伟大的事情

11
00:00:33,786 --> 0:00:37,066
所以今年我们将重点放在

12
00:00:37,066 --> 0:00:41,016
提高你使用这些工具的效率和速度上

13
00:00:41,116 --> 0:00:42,536
我们重新考虑了这些工具的基本工作流

14
00:00:44,346 --> 0:00:44,846
让我们来看看

15
00:00:45,306 --> 0:00:49,816
我们首先简要回顾一下 Xcode 10

16
00:00:50,666 --> 0:00:52,126
现在在 Xcode 10 中

17
00:00:52,126 --> 0:00:54,366
有三种主要的编辑器模式

18
00:00:54,566 --> 0:00:56,496
标准模式 助手模式和版本模式

19
00:00:56,496 --> 0:00:57,686
它们位于工具栏的上方

20
00:00:57,896 --> 0:01:00,256
因为它们适用于整个窗口的内容

21
00:00:57,896 --> 0:01:00,256
因为它们适用于整个窗口的内容

22
00:01:00,816 --> 0:01:03,216
对于目前的版本编辑器

23
00:01:03,216 --> 0:01:04,446
它有自己的三种模式

24
00:01:04,736 --> 0:01:06,876
比较模式 作者模式和日志模式

25
00:01:07,476 --> 0:01:10,396
你有很多可供使用的功能

26
00:01:10,756 --> 0:01:13,526
你只需要选择你最感兴趣的功能

27
00:01:14,156 --> 0:01:17,526
有很多反馈说希望增加灵活性

28
00:01:18,036 --> 0:01:20,636
所以我们做了一些改进

29
00:01:22,086 --> 0:01:25,966
首先我们把源代码管理日志信息

30
00:01:25,966 --> 0:01:27,346
移动至检查器中

31
00:01:27,706 --> 0:01:30,776
现在它可以随时用于任何文件

32
00:01:30,876 --> 0:01:32,526
因此你可以在需要时将源代码管理日志信息打开

33
00:01:32,526 --> 0:01:36,046
而不会打乱主编辑器区域的内容

34
00:01:36,606 --> 0:01:39,306
接下来 我们想让你

35
00:01:39,346 --> 0:01:41,346
独立地更改每个编辑器窗格模式

36
00:01:41,346 --> 0:01:45,406
因为我们知道不同的文件类型

37
00:01:45,406 --> 0:01:47,006
譬如源代码和故事板

38
00:01:47,436 --> 0:01:48,836
具有非常不同的工作流

39
00:01:49,886 --> 0:01:53,886
因此 我们将助手和作者从主工具栏

40
00:01:54,516 --> 0:01:56,286
移到每个编辑器窗格中

41
00:01:56,866 --> 0:01:59,226
现在你可以为每个编辑器选择正确的模式

42
00:01:59,766 --> 0:02:03,566
如今很多人使用助手来拆分

43
00:01:59,766 --> 0:02:03,566
如今很多人使用助手来拆分

44
00:02:03,566 --> 0:02:05,836
Xcode 窗口中的多个编辑器

45
00:02:06,646 --> 0:02:08,656
在 Xcode 11 中

46
00:02:08,656 --> 0:02:11,196
你可以随时随地创建拆分

47
00:02:12,306 --> 0:02:17,916
你可以在同一个窗口内进行水平和垂直拆分

48
00:02:18,466 --> 0:02:22,406
今年增加了很多灵活性

49
00:02:22,406 --> 0:02:23,916
这确实比以往任何时候都更容易按照你

50
00:02:23,916 --> 0:02:25,946
想要的方式工作

51
00:02:26,486 --> 0:02:30,846
没有比演示更好的方法了

52
00:02:30,846 --> 0:02:33,146
Brendan 现在将为你展示

53
00:02:34,516 --> 0:02:38,366
[掌声]

54
00:02:38,866 --> 0:02:39,406
&gt;&gt; 谢谢 Ken

55
00:02:42,206 --> 0:02:45,796
今年我们对 Xcode 进行了一些改进

56
00:02:45,796 --> 0:02:47,246
以便你可以更好地控制工作空间

57
00:02:48,516 --> 0:02:54,036
最明显的变化之一是编辑器拆分和助手

58
00:02:54,796 --> 0:02:57,276
现在让我从助手

59
00:02:57,576 --> 0:03:00,876
及其新的配套模式 SwiftUI 画布开始

60
00:02:57,576 --> 0:03:00,876
及其新的配套模式 SwiftUI 画布开始

61
00:03:01,246 --> 0:03:03,296
每个编辑器右上角都有一个选项菜单

62
00:03:04,346 --> 0:03:07,636
这是你控制编辑器行为的地方

63
00:03:07,636 --> 0:03:09,366
我将这个设置为 Editor in Canvas

64
00:03:09,366 --> 0:03:11,556
这意味着

65
00:03:11,586 --> 0:03:13,686
如果存在 SwiftUI 预览

66
00:03:13,686 --> 0:03:16,016
Xcode 将显示它

67
00:03:16,066 --> 0:03:17,366
在这种情况下是没有预览的

68
00:03:17,616 --> 0:03:18,876
所以没什么可看的

69
00:03:19,646 --> 0:03:22,956
但是如果我切换到一个有预览的文件

70
00:03:22,956 --> 0:03:24,496
画布就会出现

71
00:03:24,686 --> 0:03:25,616
Xcode 也会呈现我的 UI 预览

72
00:03:26,266 --> 0:03:28,816
现在助手以同样的方式工作

73
00:03:29,686 --> 0:03:32,186
如果我使用选项菜单切换到助手

74
00:03:32,216 --> 0:03:38,406
Xcode 将显示该文件的生成界面

75
00:03:38,596 --> 0:03:42,216
但如果我切换到一个没有助手的文件

76
00:03:42,216 --> 0:03:44,156
比如这个项目 它就会消失

77
00:03:45,236 --> 0:03:46,376
既不浪费空间

78
00:03:46,376 --> 0:03:50,256
也不需要在切换文件时手动切换模式

79
00:03:50,896 --> 0:03:52,936
好的

80
00:03:53,126 --> 0:03:55,176
当然 当我切换回源文件时

81
00:03:55,416 --> 0:03:57,776
它会记住我所处的状态

82
00:03:57,776 --> 0:03:58,666
助手就会回来

83
00:03:59,856 --> 0:04:04,086
所以这是关于助手和 SwiftUI 的情况

84
00:03:59,856 --> 0:04:04,086
所以这是关于助手和 SwiftUI 的情况

85
00:04:04,086 --> 0:04:05,056
接下来我们来聊聊编辑器拆分

86
00:04:05,326 --> 0:04:08,386
首先 它不再需要助手

87
00:04:08,386 --> 0:04:10,986
因此我们暂时先不谈它

88
00:04:11,206 --> 0:04:13,146
我可以通过几种不同的方式来拆分这个窗口

89
00:04:13,146 --> 0:04:16,505
我将从添加编辑器按钮开始

90
00:04:16,505 --> 0:04:17,826
这个按钮在这个角落里

91
00:04:17,826 --> 0:04:18,565
在选项菜单的旁边

92
00:04:19,375 --> 0:04:21,745
当我单击它时 会有两个独立的编辑器

93
00:04:22,166 --> 0:04:24,266
这些编辑器有自己本身的状态

94
00:04:24,326 --> 0:04:29,486
因此如果我愿意的话

95
00:04:26,046 --> 0:04:27,306
我可以为每个编辑器单独打开代码覆盖

96
00:04:27,306 --> 0:04:29,486
或者作者等模式

97
00:04:30,566 --> 0:04:32,176
新编辑器处于活动状态

98
00:04:32,866 --> 0:04:34,446
如果要将另一个文件加载到其中

99
00:04:34,886 --> 0:04:36,826
我所要做的就是单击该文件

100
00:04:36,826 --> 0:04:37,566
好的

101
00:04:39,396 --> 0:04:41,346
所以我现在有两个编辑器

102
00:04:41,346 --> 0:04:42,826
两个文件

103
00:04:42,826 --> 0:04:43,116
让我们添加第三个

104
00:04:43,116 --> 0:04:45,626
我要拆分左侧的编辑器

105
00:04:45,626 --> 0:04:47,196
因此我将使用左侧编辑器中的

106
00:04:47,196 --> 0:04:49,036
添加编辑器按钮

107
00:04:49,036 --> 0:04:50,516
我将按住 option 键

108
00:04:50,516 --> 0:04:53,886
以便可以将其反方向拆分

109
00:04:54,336 --> 0:04:56,326
图标旋转以显示将要发生的事情

110
00:04:57,616 --> 0:04:58,506
在底部我有一个编辑器

111
00:04:58,506 --> 0:04:59,966
并且它是活跃的

112
00:05:00,436 --> 0:05:04,596
再次点击

113
00:05:04,596 --> 0:05:05,356
我已经加载了该文件

114
00:05:06,816 --> 0:05:08,726
有时候我想用另一种方法来进行操作

115
00:05:08,726 --> 0:05:10,076
有时候我想点击一个文件

116
00:05:10,076 --> 0:05:11,716
并告诉 Xcode 把它放在哪里

117
00:05:12,466 --> 0:05:14,226
为此我要使用目标选择器

118
00:05:14,716 --> 0:05:16,006
我只需按住 option 按钮和 shift 按钮

119
00:05:16,896 --> 0:05:18,016
单击我想要的文件

120
00:05:18,016 --> 0:05:19,666
然后目标选择器会出现

121
00:05:20,386 --> 0:05:22,476
现在我可以点击返回

122
00:05:22,476 --> 0:05:23,606
并在活动的编辑器中打开它

123
00:05:24,596 --> 0:05:26,506
或者我可以用箭头键或者鼠标

124
00:05:26,506 --> 0:05:29,366
插入一个新编辑器

125
00:05:29,366 --> 0:05:31,506
在这个编辑器中打开它

126
00:05:31,636 --> 0:05:33,476
在那里再放一个编辑器

127
00:05:33,476 --> 0:05:34,066
随便我想怎么操作都可以

128
00:05:34,066 --> 0:05:37,156
我也可以使用标准键盘快捷指令来进行操作

129
00:05:37,156 --> 0:05:39,576
比如说切换标签 把它放到这里

130
00:05:39,576 --> 0:05:41,476
或者切换窗口

131
00:05:42,236 --> 0:05:43,216
把它放到这里

132
00:05:44,216 --> 0:05:46,186
这里有很多灵活性和自主功能

133
00:05:46,816 --> 0:05:49,666
所以我打算把这个放在 Globe Scene 的下面

134
00:05:50,146 --> 0:05:50,946
只需按回车即可

135
00:05:52,266 --> 0:05:53,706
现在我有一组想要使用的文件

136
00:05:53,706 --> 0:05:55,186
一个我喜欢的布局

137
00:05:55,186 --> 0:05:57,056
一切都已经设置好

138
00:05:57,496 --> 0:06:01,106
但是如果我想暂时只关注其中一个文件

139
00:05:57,496 --> 0:06:01,106
但是如果我想暂时只关注其中一个文件

140
00:06:01,106 --> 0:06:03,086
这种情况下应该怎么办呢

141
00:06:03,836 --> 0:06:05,226
这就是新焦点模式的用途

142
00:06:05,226 --> 0:06:08,096
每个编辑器在关闭按钮旁边的角落

143
00:06:08,096 --> 0:06:09,936
都有一个按钮

144
00:06:09,936 --> 0:06:12,446
如果我点击它

145
00:06:12,446 --> 0:06:15,126
我可以放大这个编辑器来接管整个窗口

146
00:06:15,126 --> 0:06:17,036
现在让我用它来放大

147
00:06:17,036 --> 0:06:18,846
并讨论源代码编辑器中的新功能

148
00:06:19,446 --> 0:06:24,006
源代码编辑器中我最喜欢的新功能之一

149
00:06:24,006 --> 0:06:27,716
当然就是选项菜单中的小地图

150
00:06:24,006 --> 0:06:27,716
现在我打开小地图

151
00:06:30,336 --> 0:06:31,766
把它放大一点

152
00:06:31,766 --> 0:06:32,736
这样你们就能看清楚

153
00:06:33,706 --> 0:06:37,846
小地图是你代码的鸟瞰图

154
00:06:37,846 --> 0:06:39,186
它显示代码的轮廓

155
00:06:39,186 --> 0:06:40,876
并且显示语法高亮

156
00:06:41,926 --> 0:06:44,036
它是用来导航的

157
00:06:44,106 --> 0:06:46,496
小地图会告诉你所在的位置

158
00:06:46,496 --> 0:06:47,376
当你在不同的部分上悬停时

159
00:06:47,376 --> 0:06:49,356
它会告诉你它是什么

160
00:06:49,356 --> 0:06:50,966
所以你知道你要去哪里

161
00:06:51,946 --> 0:06:54,666
它还显示了一些重要的标记

162
00:06:54,666 --> 0:06:56,106
比如文件中哪些地方有变化

163
00:06:56,106 --> 0:06:58,616
或者断点在哪里

164
00:06:58,616 --> 0:07:00,566
下面这里看到的标记

165
00:06:58,616 --> 0:07:00,566
下面这里看到的标记

166
00:07:00,566 --> 0:07:02,676
是我用来组织代码的

167
00:07:02,676 --> 0:07:04,436
如果我点击其中一个

168
00:07:04,436 --> 0:07:06,746
你可以看到我们在小地图中渲染了这些标记

169
00:07:06,746 --> 0:07:07,996
源编辑器也是一样的

170
00:07:08,266 --> 0:07:12,166
包括分隔线来帮助你在滚动时锚定

171
00:07:12,936 --> 0:07:15,646
小地图还显示瞬态信息

172
00:07:15,896 --> 0:07:17,986
所以如果我找到了

173
00:07:20,356 --> 0:07:25,096
例如小地图显示了我文件中的所有匹配项

174
00:07:25,166 --> 0:07:26,326
它会隐去一些其他的信息

175
00:07:26,326 --> 0:07:27,606
这样就能突出显示

176
00:07:27,606 --> 0:07:28,986
你就能准确地看到你在哪里

177
00:07:29,696 --> 0:07:31,696
以及你当前匹配项的上下文

178
00:07:35,186 --> 0:07:36,376
好吧 这就是小地图

179
00:07:37,076 --> 0:07:38,426
在源代码方面

180
00:07:38,906 --> 0:07:39,996
我们做了一些改进

181
00:07:40,056 --> 0:07:42,236
比如新的语法高亮选项

182
00:07:42,776 --> 0:07:45,326
像你在这里看到的这些定义

183
00:07:45,326 --> 0:07:47,776
我们添加了新主题

184
00:07:47,776 --> 0:07:50,796
包括浅色和深色的高对比度主题

185
00:07:54,716 --> 0:07:57,366
我们还提供了文档

186
00:07:57,366 --> 0:07:58,566
极大地提高了可读性

187
00:07:59,686 --> 0:08:00,936
我们重新设计了它的样式

188
00:07:59,686 --> 0:08:00,936
我们重新设计了它的样式

189
00:08:00,936 --> 0:08:02,396
使它读起来更像文档

190
00:08:02,936 --> 0:08:06,846
Xcode 现在能更准确地解析文档结构

191
00:08:06,846 --> 0:08:08,966
从而使它更容易维护

192
00:08:09,446 --> 0:08:10,516
让我举一个例子

193
00:08:10,516 --> 0:08:13,656
我这里有一个完全记录的函数

194
00:08:14,436 --> 0:08:18,446
但是如果我为此添加一个新参数

195
00:08:18,446 --> 0:08:20,106
我将把它作为双精度值

196
00:08:20,576 --> 0:08:23,626
我赋予它一个值

197
00:08:23,626 --> 0:08:25,286
然后下面用参数

198
00:08:25,286 --> 0:08:26,856
这样就不会有问题了

199
00:08:27,696 --> 0:08:30,366
现在我可以使用弹出式操作

200
00:08:30,366 --> 0:08:34,196
以及添加文档来填充代码中的空白

201
00:08:34,785 --> 0:08:38,126
最重要的是

202
00:08:38,596 --> 0:08:39,785
它还可以与多个游标一起工作

203
00:08:39,785 --> 0:08:40,966
所以如果你有一堆空白需要填充

204
00:08:40,966 --> 0:08:41,496
那么就非常容易了

205
00:08:41,525 --> 0:08:46,606
好的 我得到了我的文档

206
00:08:47,036 --> 0:08:48,656
现在让我们假设

207
00:08:48,656 --> 0:08:51,866
你的受众非常广泛

208
00:08:51,866 --> 0:08:53,986
你刚刚在你的代码中犯了一个错误

209
00:08:54,086 --> 0:08:55,746
然后你使用代码补全

210
00:08:55,746 --> 0:08:59,826
以及添加文档传播了这个错误

211
00:09:00,646 --> 0:09:03,476
编辑范围内的所有内容

212
00:09:03,986 --> 0:09:06,136
现在可以非常快速地清理你的错误

213
00:09:06,136 --> 0:09:08,046
你的签名

214
00:09:08,046 --> 0:09:09,596
你的代码

215
00:09:09,596 --> 0:09:12,466
现在甚至文档都可以一次性修复

216
00:09:13,516 --> 0:09:17,376
[掌声]

217
00:09:17,876 --> 0:09:20,946
好的 关于源代码编辑器

218
00:09:20,946 --> 0:09:23,026
我想向你展示并且最让我兴奋的最后一点

219
00:09:23,026 --> 0:09:24,236
是变更指示符的增强功能

220
00:09:24,796 --> 0:09:26,036
在我文件的底部

221
00:09:26,036 --> 0:09:27,786
有一个我之前做的改动

222
00:09:28,426 --> 0:09:29,646
变更指示符总是会显示一个提示

223
00:09:29,646 --> 0:09:33,536
提醒你前面所做的更改

224
00:09:33,636 --> 0:09:35,256
提醒你文件中的哪些行已经更改

225
00:09:35,666 --> 0:09:36,746
如果你将鼠标悬停在变更指示符上

226
00:09:35,666 --> 0:09:36,746
它将显示这些更改在这行中的什么位置

227
00:09:39,476 --> 0:09:43,826
但现在你可以单击变更指示符

228
00:09:44,106 --> 0:09:45,756
然后会出现一个新的显示更改命令

229
00:09:45,756 --> 0:09:47,436
该命令会在你的文件中显示行内差异

230
00:09:47,976 --> 0:09:49,216
如果你再次将鼠标悬停在指示符上

231
00:09:49,216 --> 0:09:50,246
则可以确切地看到

232
00:09:50,246 --> 0:09:51,996
它从更改后的内容发生了变化

233
00:09:52,536 --> 0:09:53,836
并且它处于实时状态

234
00:09:53,876 --> 0:09:55,236
因此你所做的任何更新

235
00:09:55,236 --> 0:09:57,656
都会立即反映在差异中

236
00:09:57,886 --> 0:09:58,806
所以这就是我想要在第一个编辑器中

237
00:09:58,806 --> 0:10:00,056
显示的所有内容

238
00:09:58,806 --> 0:10:00,056
显示的所有内容

239
00:10:00,056 --> 0:10:02,706
让我再次回到大局

240
00:10:02,706 --> 0:10:03,996
我只需再次单击 Focus 按钮

241
00:10:05,046 --> 0:10:06,776
我的布局回到了原来的位置

242
00:10:07,726 --> 0:10:09,206
在我结束之前的最后一件事

243
00:10:09,206 --> 0:10:11,836
我想在这里对我的更改

244
00:10:11,836 --> 0:10:13,486
进行快速的代码浏览

245
00:10:13,866 --> 0:10:16,066
我要点击 Code Review 按钮

246
00:10:16,066 --> 0:10:18,696
它会把活动的编辑器放大到全屏

247
00:10:18,696 --> 0:10:19,996
这样我就能专注于手头的任务

248
00:10:19,996 --> 0:10:22,006
就像焦点模式一样

249
00:10:22,476 --> 0:10:24,736
当我完成后 再次点击

250
00:10:24,736 --> 0:10:25,516
我的布局又回来了

251
00:10:26,336 --> 0:10:28,966
这就是快速浏览

252
00:10:29,106 --> 0:10:31,546
Xcode 11 中的工作流更改

253
00:10:32,116 --> 0:10:32,826
回到 Ken 这

254
00:10:33,516 --> 0:10:38,776
[掌声]

255
00:10:39,276 --> 0:10:39,756
&gt;&gt; 谢谢 Brendan

256
00:10:40,546 --> 0:10:42,286
顺便说一下 我喜欢那个新的小地图

257
00:10:42,286 --> 0:10:44,666
今年还有很多其他很出色的

258
00:10:44,666 --> 0:10:46,196
源代码编辑器特性

259
00:10:46,866 --> 0:10:48,686
比如拼写检查

260
00:10:48,686 --> 0:10:51,196
嵌套代码折叠和行内差异等等

261
00:10:51,676 --> 0:10:54,646
但是我们在过去一年中特别关注的

262
00:10:55,136 --> 0:10:56,676
一个领域是代码补全

263
00:10:56,676 --> 0:10:58,666
以及在更多地方为你提供更好的结果

264
00:11:00,166 --> 0:11:04,936
现在有了编译器控制语句的代码补全

265
00:11:05,256 --> 0:11:07,336
它能够实现前所未有的可靠操作

266
00:11:07,336 --> 0:11:11,026
并且能在更多方面实现操作

267
00:11:11,096 --> 0:11:13,636
比如当你进行数组和枚举的待处理时

268
00:11:14,216 --> 0:11:14,936
好的 [掌声]

269
00:11:17,836 --> 0:11:20,996
现在有了函数重载的代码补全

270
00:11:20,996 --> 0:11:23,056
这些只是我们在 Xcode 11 中改进的

271
00:11:23,056 --> 0:11:26,156
众多补全中的一部分

272
00:11:27,476 --> 0:11:30,546
现在让我们看看源代码编辑器和工作流

273
00:11:31,126 --> 0:11:37,266
今年对 Swift 包管理器来说是一个大年 

274
00:11:38,196 --> 0:11:41,366
自从我们推出了大量可用的包以来

275
00:11:41,366 --> 0:11:44,046
Swift 包管理器一直在蓬勃发展

276
00:11:44,046 --> 0:11:45,546
所有这些包都可以让你

277
00:11:45,546 --> 0:11:47,536
在社区的成果的基础上工作

278
00:11:48,536 --> 0:11:51,496
这些包是分解你自己代码的好方法

279
00:11:51,496 --> 0:11:53,656
可以将其分解为更小并且更可测试的部分

280
00:11:54,956 --> 0:11:58,866
今年我们已经完全整合了 Swift 包管理器和 Xcode

281
00:11:59,266 --> 0:12:02,976
你可以使用包为所有平台构建 App

282
00:11:59,266 --> 0:12:02,976
你可以使用包为所有平台构建 App

283
00:12:03,516 --> 0:12:10,686
[掌声]

284
00:12:11,186 --> 0:12:15,016
包在整个 Xcode 中获得一流的集成

285
00:12:15,546 --> 0:12:19,376
从源代码控制集成到调试再到测试

286
00:12:19,846 --> 0:12:23,286
直到你通过包所做的所有事情

287
00:12:23,286 --> 0:12:24,786
它的工作原理和你以前做项目时一样

288
00:12:25,486 --> 0:12:29,076
Xcode 使发现和使用包变得很容易

289
00:12:29,076 --> 0:12:32,586
创建包和与世界共享也一样容易

290
00:12:33,176 --> 0:12:38,036
与多个服务的集成整合意味着

291
00:12:38,036 --> 0:12:40,356
你只需单击几下鼠标就可以完成

292
00:12:40,356 --> 0:12:42,016
一些非常棒的代码

293
00:12:42,846 --> 0:12:45,646
我们真心认为你会喜欢使用 Swift 包

294
00:12:46,696 --> 0:12:47,726
Patrick 将在这里向你展示

295
00:12:47,726 --> 0:12:50,466
如何开始使用 Xcode 中的 Swift 包

296
00:12:51,516 --> 0:12:57,126
[掌声]

297
00:12:57,626 --> 0:12:58,796
&gt;&gt; 谢谢 Ken

298
00:12:59,166 --> 0:13:00,366
今天我非常激动地

299
00:12:59,166 --> 0:13:00,366
今天我非常激动地

300
00:13:00,366 --> 0:13:02,576
向大家展示 Xcode 11 中的所有 Swift 包

301
00:13:02,826 --> 0:13:05,776
我将开发我们的旅行 App

302
00:13:05,776 --> 0:13:07,636
其中包括一个旅行计划功能

303
00:13:08,686 --> 0:13:10,486
这个功能现在没有任何天气信息

304
00:13:10,486 --> 0:13:12,046
而天气信息对于任何旅行都是非常重要的

305
00:13:12,736 --> 0:13:14,916
我不想为了在我的 App 中得到这些信息

306
00:13:14,916 --> 0:13:16,606
而做些无用功

307
00:13:16,796 --> 0:13:18,706
幸运的是 我的同事 Rhonda 告诉我

308
00:13:18,706 --> 0:13:20,926
我可以用一个包来做这件事

309
00:13:21,516 --> 0:13:22,546
所以让我们把它添加到我们的项目中

310
00:13:23,836 --> 0:13:26,916
我首先导航到项目编辑器

311
00:13:27,776 --> 0:13:31,666
我将导航到这个项目

312
00:13:30,086 --> 0:13:31,666
在那里我将看到一个新的 Swift 包选项卡

313
00:13:32,696 --> 0:13:34,176
这个选项卡将显示

314
00:13:34,176 --> 0:13:36,006
当前我的项目依赖的所有包

315
00:13:37,226 --> 0:13:38,856
要添加第一个

316
00:13:38,856 --> 0:13:39,396
我将点击 + 按钮

317
00:13:40,036 --> 0:13:42,486
因为我已经登录了我的 GitHub 账户

318
00:13:42,486 --> 0:13:43,836
我可以看到我所有的个人包

319
00:13:43,986 --> 0:13:45,456
组织包

320
00:13:45,456 --> 0:13:46,606
以及位于顶部我收藏的代码仓库

321
00:13:48,136 --> 0:13:50,006
这就是我所说的天气预测包

322
00:13:51,116 --> 0:13:52,936
所以如果我点击 Next

323
00:13:52,936 --> 0:13:56,196
Xcode 会在这里提示我输入我的版本信息

324
00:13:56,196 --> 0:14:00,106
Xcode 会自动填写最新的版本以供使用

325
00:13:56,196 --> 0:14:00,106
Xcode 会自动填写最新的版本以供使用

326
00:14:00,206 --> 0:14:01,416
这就是我想要的

327
00:14:01,416 --> 0:14:02,816
因为我想立即获得最新的代码

328
00:14:04,256 --> 0:14:06,036
当我单击 Next 时

329
00:14:06,036 --> 0:14:07,246
Xcode 将解析我的包

330
00:14:07,246 --> 0:14:08,826
可能具有的任何依赖项

331
00:14:08,826 --> 0:14:10,066
但是因为它是一个非常简单的包

332
00:14:10,096 --> 0:14:10,806
它没有任何依赖项

333
00:14:10,806 --> 0:14:12,146
所以 Xcode 将立即解析

334
00:14:13,426 --> 0:14:17,586
最后我需要选择将我的包产品

335
00:14:17,636 --> 0:14:18,776
链接到哪个 Target

336
00:14:18,776 --> 0:14:21,526
我将在这里选择我的 App Target 完成

337
00:14:22,276 --> 0:14:23,186
所以就是这样

338
00:14:23,336 --> 0:14:26,126
要在项目中设置包

339
00:14:26,126 --> 0:14:27,376
我所要做的就是将它添加到这个 Dependencies 部分

340
00:14:28,516 --> 0:14:33,786
[掌声]

341
00:14:34,286 --> 0:14:35,066
在项目导航器中

342
00:14:35,066 --> 0:14:37,426
我现在有一个 Swift Package Dependencies 项

343
00:14:37,586 --> 0:14:40,206
在这里我可以浏览这个包的所有源代码

344
00:14:40,206 --> 0:14:41,256
就像它是我项目的一部分一样

345
00:14:41,316 --> 0:14:41,926
因为它确实是

346
00:14:43,886 --> 0:14:46,966
太好了我知道哪里需要这个功能

347
00:14:46,966 --> 0:14:49,526
我要把它放在我的 WeatherFetcher.swift 文件中

348
00:14:49,666 --> 0:14:50,766
这个文件目前并没有做很多事情

349
00:14:51,836 --> 0:14:53,826
现在我已经把它配置好了

350
00:14:53,826 --> 0:14:56,316
我可以快速导入预测模块

351
00:14:56,886 --> 0:15:06,456
首先我将使用传入的区域创建一个 Forecast 对象

352
00:14:56,886 --> 0:15:06,456
首先我将使用传入的区域创建一个 Forecast 对象

353
00:15:07,826 --> 0:15:08,896
但我只是在 GitHub 上抓取了这个包

354
00:15:08,896 --> 0:15:10,706
我本身对 API 不是很熟悉

355
00:15:10,706 --> 0:15:13,956
我可以在网上看一下

356
00:15:14,016 --> 0:15:15,246
但是由于 Xcode 中的功能

357
00:15:15,276 --> 0:15:18,506
我可以快速跳转到它的定义

358
00:15:18,506 --> 0:15:19,876
并立即开始浏览它的源代码

359
00:15:21,426 --> 0:15:22,726
向下滚动一点

360
00:15:22,796 --> 0:15:25,596
这个 Observation 方法就像我要用的方法一样

361
00:15:26,396 --> 0:15:29,386
但是我不熟悉这种 Observation 结构

362
00:15:29,866 --> 0:15:32,736
所以我想要深入了解更多关于它的内容

363
00:15:33,426 --> 0:15:36,276
为了展示 Xcode 11 中的一些新搜索功能

364
00:15:36,276 --> 0:15:38,486
我将通过快捷键 Command-Shift-F

365
00:15:38,486 --> 0:15:40,306
来使用查询导航器

366
00:15:40,926 --> 0:15:44,166
我将在这里导航到 Forecast 包

367
00:15:44,166 --> 0:15:46,396
将我的搜索范围缩小到 Forecast 包中

368
00:15:47,446 --> 0:15:49,356
我将搜索 observation

369
00:15:49,826 --> 0:15:51,416
并且只会得到该包的结果

370
00:15:51,966 --> 0:15:53,736
它看起来是在这里定义的

371
00:15:54,896 --> 0:15:58,616
这个枚举类型对我来说有不同的选项

372
00:15:58,616 --> 0:16:01,426
比如从这个 API 返回的指标

373
00:15:58,616 --> 0:16:01,426
比如从这个 API 返回的指标

374
00:16:01,426 --> 0:16:03,466
比如高温 低温 降水等等

375
00:16:03,466 --> 0:16:05,016
我的方法只需要高温和低温

376
00:16:05,016 --> 0:16:07,156
所以我会使用它们

377
00:16:07,386 --> 0:16:09,216
我将使用快捷键 Command-Shift-J

378
00:16:09,216 --> 0:16:10,096
跳转回项目导航器

379
00:16:10,096 --> 0:16:13,156
并导航回到 WeatherFetcher 这里

380
00:16:13,156 --> 0:16:14,136
然后我将开始实现这个方法

381
00:16:15,086 --> 0:16:17,106
我将使用我的 Observation 对象

382
00:16:17,836 --> 0:16:19,976
我将传入传输给这个方法的日期

383
00:16:20,926 --> 0:16:22,276
就像我之前说的那样

384
00:16:22,276 --> 0:16:25,586
我想要高温和低温

385
00:16:26,656 --> 0:16:29,966
我会很快填充调用语句

386
00:16:29,966 --> 0:16:31,396
从结果中获取高温度和低温度

387
00:16:31,396 --> 0:16:35,556
然后以低温和高温为参数调用 completion

388
00:16:35,556 --> 0:16:39,286
我将以非常相似的方式填充 condition 方法

389
00:16:39,506 --> 0:16:43,286
只从结果中获取条件

390
00:16:43,396 --> 0:16:44,996
太棒了

391
00:16:44,996 --> 0:16:46,846
所以现在当我在模拟器中构建

392
00:16:46,846 --> 0:16:47,746
运行和查看结果时

393
00:16:47,746 --> 0:16:49,436
我应该能够浏览 Plan 选项卡

394
00:16:50,306 --> 0:16:53,356
并且查看我在旧金山旅行中的一些天气信息

395
00:16:53,626 --> 0:16:54,546
看起来我得到了

396
00:16:54,546 --> 0:16:56,796
高温 低温和预期的天气

397
00:16:57,336 --> 0:16:58,926
我旅行快结束的时候好像要下雨了

398
00:16:58,926 --> 0:17:00,456
所以我应该带件夹克

399
00:16:58,926 --> 0:17:00,456
所以我应该带件夹克

400
00:17:01,426 --> 0:17:05,336
在我的项目中配置一个 Swift 包依赖项

401
00:17:05,336 --> 0:17:06,896
并且立即开始使用它非常简单

402
00:17:07,816 --> 0:17:08,376
这就是天气部分

403
00:17:08,685 --> 0:17:09,356
让我们在回到 Ken 这里

404
00:17:10,516 --> 0:17:13,306
[掌声]

405
00:17:13,806 --> 0:17:14,415
&gt;&gt; 非常感谢 Patrick

406
00:17:15,016 --> 0:17:17,000
[掌声]

407
00:17:19,185 --> 0:17:22,465
目前所有新的包集成

408
00:17:22,465 --> 0:17:23,806
都建立在 Xcode 源代码控制支持之上

409
00:17:24,185 --> 0:17:26,675
今年我们将通过更多功能来完善它

410
00:17:26,675 --> 0:17:31,296
从 Git Stash 开始

411
00:17:31,296 --> 0:17:32,296
它可以让你保存一组更改

412
00:17:33,516 --> 0:17:38,206
[掌声]

413
00:17:38,706 --> 0:17:40,936
你可以在源代码控制菜单这

414
00:17:40,936 --> 0:17:44,006
快速地保存当前工作更改集

415
00:17:45,516 --> 0:17:48,386
当你要查看这些更改并弹出存储时

416
00:17:48,386 --> 0:17:50,676
你可以从源代码控制导航器中进行操作

417
00:17:51,676 --> 0:17:53,206
我们还在此处集成了

418
00:17:53,476 --> 0:17:55,316
源代码管理历史记录视图中的

419
00:17:55,316 --> 0:17:57,326
Cherry-Pick 功能

420
00:17:57,326 --> 0:17:58,256
只要在注释上显示上下文菜单

421
00:17:58,256 --> 0:17:59,816
并选择 Cherry-Pick 功能

422
00:17:59,816 --> 0:18:03,176
因此 分支之间移动更改变得非常容易

423
00:17:59,816 --> 0:18:03,176
你现在可以随时通过新的历史检查器

424
00:17:59,816 --> 0:18:03,176
因此 分支之间移动更改变得非常容易

425
00:17:59,816 --> 0:18:03,176
你现在可以随时通过新的历史检查器

426
00:18:04,116 --> 0:18:05,236
就像我之前提到的

427
00:18:05,236 --> 0:18:11,626
获取任何文件的源代码控制历史记录

428
00:18:11,626 --> 0:18:13,656
顺便说一下

429
00:18:13,656 --> 0:18:15,426
这对非技术文件也很有用

430
00:18:16,516 --> 0:18:23,896
[掌声]

431
00:18:24,396 --> 0:18:27,336
昨天你看到了许多新的操作系统功能介绍

432
00:18:27,726 --> 0:18:30,636
你可以从今天开始就采用这些功能

433
00:18:32,386 --> 0:18:34,416
一旦你将 iPad App 带到 Mac 上

434
00:18:35,276 --> 0:18:38,526
你就可以在故事板设备栏中

435
00:18:38,526 --> 0:18:40,196
使用新的 Mac 设备开始自定义它

436
00:18:41,396 --> 0:18:43,196
让你的 App 在 Mac 上感觉就像

437
00:18:43,196 --> 0:18:44,596
在家里一样快捷 简单

438
00:18:44,596 --> 0:18:49,176
对于新的 iOS 深色模式

439
00:18:49,496 --> 0:18:51,696
该系统为你完成了大量工作

440
00:18:52,476 --> 0:18:53,886
同样使用设备栏

441
00:18:53,886 --> 0:18:55,526
你可以快速在浅色和深色模式之间切换

442
00:18:55,526 --> 0:18:58,916
确保你的 App 看起来很棒

443
00:18:59,506 --> 0:19:03,636
现在所有新的 SF 符号都完全集成

444
00:18:59,506 --> 0:19:03,636
现在所有新的 SF 符号都完全集成

445
00:19:03,966 --> 0:19:06,886
你需要的选项就在检查器中

446
00:19:06,886 --> 0:19:08,456
比如包含符号大小

447
00:19:08,686 --> 0:19:10,126
追踪系统字体大小

448
00:19:11,026 --> 0:19:14,156
然后当你想要浏览所有符号时

449
00:19:14,156 --> 0:19:16,376
你可以在重新设计的库中执行此操作

450
00:19:16,376 --> 0:19:18,006
然后将它们拖到故事板中

451
00:19:18,586 --> 0:19:21,536
现在对于你自己的资源

452
00:19:21,766 --> 0:19:24,056
如颜色和图像

453
00:19:24,536 --> 0:19:26,176
Asset Catalogs 等等

454
00:19:26,176 --> 0:19:27,626
它们起着非常重要的作用

455
00:19:28,086 --> 0:19:29,786
它们可以让你根据设备类型和明暗情况

456
00:19:29,786 --> 0:19:32,216
而有所改变

457
00:19:33,286 --> 0:19:35,256
最好的一点是

458
00:19:35,256 --> 0:19:38,356
你不需要编写任何代码就可以做到这一点

459
00:19:38,686 --> 0:19:41,726
在 Xcode 11 和 iOS 13 中

460
00:19:41,726 --> 0:19:43,576
你可以创建自己的自定义符号

461
00:19:43,816 --> 0:19:47,456
它们具有新 SF 符号的所有优点

462
00:19:48,346 --> 0:19:49,796
因此符号允许你

463
00:19:49,796 --> 0:19:52,666
指定图案的各种大小和权重

464
00:19:53,296 --> 0:19:55,226
然后在运行时

465
00:19:55,396 --> 0:19:57,016
系统会根据用户的字体大小

466
00:19:57,256 --> 0:20:00,556
可访问性设置

467
00:19:57,256 --> 0:20:00,556
可访问性设置

468
00:20:00,556 --> 0:20:02,756
甚至是用户界面中的位置

469
00:20:02,756 --> 0:20:04,356
选择正确的变体

470
00:20:05,086 --> 0:20:06,386
所以这是一种创建动态图案的

471
00:20:06,386 --> 0:20:08,236
非常强大的新方法

472
00:20:09,976 --> 0:20:11,856
在 Xcode 11 中

473
00:20:11,856 --> 0:20:13,866
你现在也可以进行资源本地化

474
00:20:16,256 --> 0:20:17,356
你只需选择一个资源

475
00:20:17,356 --> 0:20:19,256
单击本地化按钮和属性检查器

476
00:20:19,256 --> 0:20:21,396
并选择要自定义的本地化

477
00:20:22,516 --> 0:20:25,036
[掌声]

478
00:20:25,536 --> 0:20:26,616
非常重要的东西

479
00:20:29,046 --> 0:20:32,346
在这里向你展示最新设计工具的是 Lisa

480
00:20:33,416 --> 0:20:33,936
&gt;&gt; 非常感谢 Ken

481
00:20:35,546 --> 0:20:36,696
大家好

482
00:20:37,006 --> 0:20:39,086
今天我很高兴向大家展示

483
00:20:39,176 --> 0:20:41,366
如何使用 iOS 13 的新功能

484
00:20:41,366 --> 0:20:44,256
深色模式和 SF symbols

485
00:20:45,126 --> 0:20:48,746
让我们来看看我们旅游 App 的登录视图

486
00:20:51,396 --> 0:20:53,796
这里的两个图像

487
00:20:53,796 --> 0:20:56,426
电子邮件和密码现在使用的是自定义图像

488
00:20:56,906 --> 0:20:58,676
我想改为使用 SF 符号

489
00:20:58,676 --> 0:21:02,406
这样它们看起来很棒

490
00:20:58,676 --> 0:21:02,406
这样它们看起来很棒

491
00:21:02,406 --> 0:21:04,366
并且可以使用动态类型

492
00:21:05,176 --> 0:21:06,996
我早些浏览库时

493
00:21:06,996 --> 0:21:09,616
有两张图片我很喜欢

494
00:21:10,086 --> 0:21:11,686
一个叫做 envelope

495
00:21:11,686 --> 0:21:12,286
另一个叫 lock

496
00:21:12,846 --> 0:21:15,006
所以让我们改用它们

497
00:21:15,556 --> 0:21:19,956
首先 要点击电子邮件图标

498
00:21:19,956 --> 0:21:20,696
然后打开检查器

499
00:21:21,716 --> 0:21:24,966
在 Xcode 11 中

500
00:21:24,966 --> 0:21:27,666
在我们这里的图像图标中

501
00:21:27,666 --> 0:21:30,606
我不仅能看到图像名称

502
00:21:30,606 --> 0:21:33,796
而且在我选择使用它们之前

503
00:21:33,796 --> 0:21:37,476
我能看到它们的外观

504
00:21:38,066 --> 0:21:38,486
所以我 [掌声]

505
00:21:39,276 --> 0:21:40,116
是的 我也很喜欢

506
00:21:41,146 --> 0:21:42,876
所以我打算输入 envelope

507
00:21:43,636 --> 0:21:47,116
现在它将显示一个具有不同外观的信封列表

508
00:21:47,656 --> 0:21:51,716
选择 envelope.fill 看起来不错

509
00:21:52,946 --> 0:21:56,406
对于符号配置

510
00:21:56,526 --> 0:21:58,536
我想设置为字体

511
00:21:58,536 --> 0:21:59,816
以便它们可以使用动态类型

512
00:22:00,456 --> 0:22:03,096
我也可以改变字体大小

513
00:22:03,816 --> 0:22:05,176
让我们换一个更大的

514
00:22:05,446 --> 0:22:06,046
标题一

515
00:22:06,636 --> 0:22:11,986
接下来，我想对密码图标执行相同操作

516
00:22:12,706 --> 0:22:15,656
我将键入 lock

517
00:22:15,656 --> 0:22:18,426
并选择 lock.fill 与此风格相匹配

518
00:22:19,576 --> 0:22:22,566
同样我将把配置设置为字体

519
00:22:23,126 --> 0:22:28,416
接下来我想看看我的视图在深色模式下的样子

520
00:22:29,646 --> 0:22:31,836
在设备栏里有一个开关

521
00:22:31,836 --> 0:22:33,986
我可以把它从亮调到暗

522
00:22:34,146 --> 0:22:35,946
我们来操作一下

523
00:22:36,386 --> 0:22:39,666
现在你可以看到视图已经更新

524
00:22:40,776 --> 0:22:43,076
然而这张照片看起来不太对劲

525
00:22:43,856 --> 0:22:46,086
我手提箱的提手不见了

526
00:22:46,776 --> 0:22:48,056
我们来看看发生了什么

527
00:22:48,976 --> 0:22:51,146
我切换回来

528
00:22:51,146 --> 0:22:52,336
哦 我明白了

529
00:22:52,716 --> 0:22:53,736
把手是黑色的

530
00:22:54,266 --> 0:22:57,026
所以它在黑暗的背景下显示不出来

531
00:22:57,976 --> 0:22:59,986
为了解决这个问题

532
00:23:00,016 --> 0:23:01,776
我想深色模式中的这个图像

533
00:23:01,846 --> 0:23:03,406
提供一个新的图像变体

534
00:23:04,186 --> 0:23:06,376
幸运的是 有一个伟大的设计师叫 At

535
00:23:07,136 --> 0:23:10,736
他已经为我创造了一张在黑暗中使用的图像

536
00:23:11,286 --> 0:23:12,406
让我们换用它

537
00:23:12,406 --> 0:23:15,166
我要选择图像

538
00:23:15,166 --> 0:23:18,036
我要选择图像

539
00:23:18,766 --> 0:23:21,696
它会将此图像打开成暗色

540
00:23:22,416 --> 0:23:25,016
首先让我们启用深色模式

541
00:23:25,696 --> 0:23:32,486
然后我可以拖动 At 创建的图像

542
00:23:32,746 --> 0:23:35,006
让我们切换到故事板

543
00:23:36,346 --> 0:23:38,496
现在你可以看到在浅色模式下

544
00:23:38,616 --> 0:23:42,306
它仍然按预期使用原始图像

545
00:23:42,306 --> 0:23:43,186
但当我把它改成深色

546
00:23:43,826 --> 0:23:45,516
现在新图片已经开始使用了

547
00:23:45,516 --> 0:23:46,816
看起来不错

548
00:23:47,516 --> 0:23:52,056
[掌声]

549
00:23:52,556 --> 0:23:54,996
但 At 是一个完美主义者

550
00:23:54,996 --> 0:23:56,276
他认为这两个蓝色按钮

551
00:23:56,336 --> 0:23:57,716
虽然它们在浅色模式下看起来还不错

552
00:23:57,716 --> 0:23:59,626
但在它们不如 At 所想的那样

553
00:23:59,626 --> 0:24:01,536
在深色模式下凸显出来

554
00:23:59,626 --> 0:24:01,536
在深色模式下凸显出来

555
00:24:02,226 --> 0:24:06,026
因此他希望我改为使用不同颜色的橙色

556
00:24:06,906 --> 0:24:08,166
让我们弄清楚如何做到这一点

557
00:24:08,166 --> 0:24:10,566
我要选择按钮

558
00:24:11,476 --> 0:24:13,816
现在 我可以看到

559
00:24:13,816 --> 0:24:15,396
色调颜色设置为

560
00:24:15,396 --> 0:24:16,726
Button color 的自定义颜色

561
00:24:17,706 --> 0:24:20,026
所以要在浅色模式下使用亮色

562
00:24:20,026 --> 0:24:24,106
我想继续使用蓝色按钮

563
00:24:24,106 --> 0:24:25,826
但实际上在深色模式下

564
00:24:25,826 --> 0:24:30,306
我想改变为使用橙色

565
00:24:30,306 --> 0:24:32,456
这就像我对图像所做的一样简单

566
00:24:32,456 --> 0:24:37,036
我将打开检查器启用深色外观

567
00:24:37,756 --> 0:24:39,366
对于深色的外观

568
00:24:39,496 --> 0:24:41,556
我将使用橙色

569
00:24:42,576 --> 0:24:44,186
我们换回来吧

570
00:24:45,296 --> 0:24:47,866
我发现这两个橙色的按钮凸显得更多了

571
00:24:47,916 --> 0:24:50,116
现在看起来好多了

572
00:24:50,636 --> 0:24:55,016
接下来我想看看我的视图在运行时的样子

573
00:24:55,016 --> 0:24:58,566
我要在模拟器中构建并运行

574
00:25:04,416 --> 0:25:07,046
在 Xcode 11 中

575
00:25:07,046 --> 0:25:09,646
有一个称为环境覆盖的新功能

576
00:25:10,686 --> 0:25:12,976
它位于调试栏中

577
00:25:13,886 --> 0:25:16,286
当我点击它时

578
00:25:16,286 --> 0:25:18,286
它会显示一个弹出窗口

579
00:25:18,366 --> 0:25:19,846
我可以改变不同的设置

580
00:25:19,886 --> 0:25:22,486
如系统设置和可访问性设置

581
00:25:23,476 --> 0:25:29,526
因此可以将界面样式从浅改为深

582
00:25:29,776 --> 0:25:31,376
以查看我的视图是如何更新的

583
00:25:31,376 --> 0:25:36,766
我可以设置不同的可访问性设置

584
00:25:36,766 --> 0:25:39,846
例如粗体文本

585
00:25:40,456 --> 0:25:43,776
通过这个覆盖

586
00:25:43,776 --> 0:25:47,736
它允许我在运行时用这些不同的设置

587
00:25:48,086 --> 0:25:52,066
而不需要实际更改模拟器或设备上的设置

588
00:25:52,066 --> 0:25:53,546
我可以 --

589
00:25:54,516 --> 0:25:57,876
[掌声]

590
00:25:58,376 --> 0:26:01,526
我还可以通过拖动这里的滑块

591
00:25:58,376 --> 0:26:01,526
我还可以通过拖动这里的滑块

592
00:26:01,666 --> 0:26:03,646
来更改动态类型大小

593
00:26:03,726 --> 0:26:06,976
你可以看到视图是如何更新的

594
00:26:07,516 --> 0:26:11,976
[掌声]

595
00:26:12,476 --> 0:26:14,696
记得前面

596
00:26:14,696 --> 0:26:16,436
我说这两个图像的 SF 符号

597
00:26:16,936 --> 0:26:19,296
我用字体进行配置

598
00:26:19,876 --> 0:26:24,436
现在 当我拖动设置不同的动态类型时

599
00:26:24,436 --> 0:26:28,386
它们会像文本一样做出反应

600
00:26:28,536 --> 0:26:30,836
通过非常简单的编辑

601
00:26:30,836 --> 0:26:33,546
我认为我的视图在 iOS 13 中看起来很棒

602
00:26:33,546 --> 0:26:36,406
我希望这可以使你的 App 看起来也很棒

603
00:26:36,876 --> 0:26:38,576
谢谢 Ken 请你继续 [掌声]

604
00:26:39,806 --> 0:26:40,426
&gt;&gt; 非常感谢 Lisa

605
00:26:41,856 --> 0:26:44,396
这些新的深色 iOS App 看起来棒极了

606
00:26:44,846 --> 0:26:47,486
你的用户在他们的设备上遇到的一些场景

607
00:26:47,486 --> 0:26:51,666
比如网络或温度条件

608
00:26:52,336 --> 0:26:54,396
这些真的很难复制

609
00:26:55,046 --> 0:26:56,606
这使得它们很难调试

610
00:26:56,646 --> 0:26:59,226
在 Xcode 11 中

611
00:26:59,276 --> 0:27:02,996
你可以改变设备的行为方式

612
00:26:59,276 --> 0:27:02,996
你可以改变设备的行为方式

613
00:27:02,996 --> 0:27:05,676
改变网络吞吐量

614
00:27:05,676 --> 0:27:07,156
或者改变设备的热状态

615
00:27:07,276 --> 0:27:12,006
在设备窗口中有一个新的 Device Condition 部分

616
00:27:12,516 --> 0:27:15,576
你可以打开网络连接调节器

617
00:27:15,576 --> 0:27:17,166
并模拟真实的网络场景

618
00:27:17,256 --> 0:27:20,806
或者你可以打开热状态调节器

619
00:27:21,616 --> 0:27:22,696
改变你设备的热状态

620
00:27:22,696 --> 0:27:26,076
让它表现得比实际温度更高

621
00:27:26,626 --> 0:27:29,776
一旦你打开其中一个状态

622
00:27:29,776 --> 0:27:32,036
你就会在你的设备上看到一个指示器

623
00:27:32,036 --> 0:27:33,736
你可以点击那个指示器来查看

624
00:27:33,736 --> 0:27:35,556
到底哪个状态在运行

625
00:27:36,426 --> 0:27:38,236
你可以在这里停止它

626
00:27:38,706 --> 0:27:40,036
或者当你从 Xcode 断开连接时

627
00:27:40,036 --> 0:27:42,376
它会自动为你停止

628
00:27:43,126 --> 0:27:44,426
这是确保你的 App

629
00:27:44,426 --> 0:27:47,936
在所有情况下都运行良好的好方法

630
00:27:51,066 --> 0:27:53,186
随着测试计划的推出

631
00:27:53,226 --> 0:27:56,696
Xcode 11 今年将继续改进测试

632
00:27:57,736 --> 0:27:59,766
现在测试计划允许你

633
00:27:59,766 --> 0:28:02,226
定义一组可以跨 Schema 共享的测试

634
00:27:59,766 --> 0:28:02,226
定义一组可以跨 Schema 共享的测试

635
00:28:03,006 --> 0:28:06,336
测试计划可以有任意数量的配置

636
00:28:06,336 --> 0:28:08,156
这些配置允许你指定想要传递什么参数

637
00:28:08,156 --> 0:28:11,456
或想要传递什么环境变量

638
00:28:11,456 --> 0:28:13,616
甚至想要打开什么杀毒软件

639
00:28:14,506 --> 0:28:16,486
当你运行该测试计划时

640
00:28:16,486 --> 0:28:19,496
它将以所有不同的配置运行所有的测试

641
00:28:20,316 --> 0:28:22,546
因此例如 你可以制定一个测试计划

642
00:28:22,546 --> 0:28:25,736
其中包含你的 App 支持的每种语言的配置

643
00:28:26,356 --> 0:28:28,106
当你运行该测试计划时

644
00:28:28,106 --> 0:28:31,696
它将以所有不同语言运行所有测试

645
00:28:31,696 --> 0:28:33,486
所有测试只需一个操作

646
00:28:34,036 --> 0:28:35,926
当然还有测试计划

647
00:28:35,926 --> 0:28:37,186
它们与 Xcode 的服务器配合得很好

648
00:28:37,186 --> 0:28:40,806
你可以在多个设备和模拟器上运行测试

649
00:28:40,856 --> 0:28:43,486
所有这些都是并行的

650
00:28:43,486 --> 0:28:45,776
而且现在的配置比以往任何时候都多

651
00:28:46,356 --> 0:28:48,466
毫无疑问

652
00:28:48,516 --> 0:28:52,676
测试对 Mac 上的 iPad App

653
00:28:52,736 --> 0:28:54,446
以及 SwiftUI 开发的 App 都非常好用

654
00:28:55,316 --> 0:28:59,046
这便是测试

655
00:29:00,036 --> 0:29:04,666
今年模拟器有一些很棒的改进

656
00:29:06,146 --> 0:29:09,446
有新的独立 watchOS App

657
00:29:09,446 --> 0:29:11,716
你可以直接部署到 watch 模拟器

658
00:29:12,306 --> 0:29:13,976
不需要 iPhone 模拟器

659
00:29:14,516 --> 0:29:19,306
[掌声]

660
00:29:19,806 --> 0:29:21,466
但今年最大的新闻是

661
00:29:21,466 --> 0:29:24,856
模拟器是建立在 Metal 技术之上的

662
00:29:25,081 --> 0:29:27,276
[掌声] 是的

663
00:29:28,161 --> 0:29:30,161
[掌声]

664
00:29:30,306 --> 0:29:33,696
这意味着用 Metal 技术构建的 App

665
00:29:33,696 --> 0:29:35,916
现在可以在模拟器中运行

666
00:29:35,916 --> 0:29:37,806
它们有惊人的图形性能

667
00:29:37,806 --> 0:29:39,276
所有在 Metal 之上构建的东西

668
00:29:39,276 --> 0:29:41,556
比如 UIKit

669
00:29:41,556 --> 0:29:42,746
也会变得更快

670
00:29:44,246 --> 0:29:47,656
你会看到每秒 60 帧的画面

671
00:29:47,716 --> 0:29:50,796
CPU 的使用减少了 90%

672
00:29:50,886 --> 0:29:55,486
这对电池寿命非常好[掌声]

673
00:29:55,486 --> 0:29:59,726
是的 [掌声]

674
00:30:00,226 --> 0:30:01,446
我们并没有止步于此

675
00:30:02,456 --> 0:30:06,816
模拟器 Warm Boots 现在也快了两倍

676
00:30:07,516 --> 0:30:10,756
[掌声]

677
00:30:11,256 --> 0:30:12,776
模拟器有了很大的改进

678
00:30:15,286 --> 0:30:18,296
去年我们引入了 OS Signposts 和自定义工具

679
00:30:18,296 --> 0:30:19,936
这样你就可以通过这些工具

680
00:30:19,936 --> 0:30:22,526
将自己的数据显示出来

681
00:30:23,256 --> 0:30:27,276
今年我们将引入层次结构

682
00:30:27,276 --> 0:30:30,396
使你更容易地探索和关联数据

683
00:30:31,486 --> 0:30:33,076
但是当你使用 OS Signposts 时

684
00:30:33,486 --> 0:30:35,756
你所记录的每个类别

685
00:30:35,756 --> 0:30:37,556
现在都将得到自己的踪迹 像这样

686
00:30:39,136 --> 0:30:41,466
然后你可以锁定该踪迹

687
00:30:41,566 --> 0:30:43,026
并轻松地将其与另一个踪迹关联起来

688
00:30:43,026 --> 0:30:44,716
比如 CPU 使用

689
00:30:46,236 --> 0:30:49,956
我们还为 SwiftUI 引入了一个新模板

690
00:30:49,956 --> 0:30:52,656
让你深入了解在新的 body 方法中

691
00:30:52,656 --> 0:30:55,306
构建用户界面所花费的时间

692
00:30:56,556 --> 0:30:58,506
我们从头开始完全重写了

693
00:30:58,506 --> 0:31:01,356
Metal 系统跟踪模板

694
00:30:58,506 --> 0:31:01,356
Metal 系统跟踪模板

695
00:31:02,666 --> 0:31:05,406
它利用了新的层级轨道

696
00:31:05,406 --> 0:31:09,996
速度显著加快 达到 10 倍

697
00:31:10,666 --> 0:31:16,216
现在我们不能在今天结束之前

698
00:31:16,216 --> 0:31:20,436
不进行 SwiftUI 的讨论

699
00:31:20,436 --> 0:31:23,946
SwiftUI 是构建用户界面的新方法

700
00:31:25,296 --> 0:31:27,376
SwiftUI 实现了

701
00:31:27,376 --> 0:31:31,296
从编辑到运行到调试的无缝切换

702
00:31:32,266 --> 0:31:34,806
新的预览显示了你真实的 UI

703
00:31:34,806 --> 0:31:40,126
它们将这三件事变成了一个活动

704
00:31:41,396 --> 0:31:45,646
编辑 这就是 UI 开发的未来

705
00:31:46,226 --> 0:31:51,406
因此从新的预览模式到行内编辑器

706
00:31:51,406 --> 0:31:53,956
我们重新考虑了如何构建 UI 代码

707
00:31:54,546 --> 0:31:55,886
我们这样做的目的

708
00:31:55,886 --> 0:31:57,586
是为了提高效率和直接操作

709
00:31:57,586 --> 0:32:01,866
这样你就可以编写更多的代码

710
00:31:57,586 --> 0:32:01,866
这样你就可以编写更多的代码

711
00:32:01,866 --> 0:32:02,926
而不需要输入任何字符

712
00:32:03,576 --> 0:32:07,686
这是一种全新的文档体验

713
00:32:07,896 --> 0:32:11,026
这将使你快速地编写代码

714
00:32:11,576 --> 0:32:13,366
有很棒的新教程

715
00:32:13,996 --> 0:32:18,386
在帮助你编写代码的同时指导和教授你

716
00:32:19,046 --> 0:32:23,306
现在你不需要创建新项目来开始预览

717
00:32:23,306 --> 0:32:27,636
你可以在现有 App 中使用它们

718
00:32:27,636 --> 0:32:31,026
只需实现新的 UIViewRepresentable 协议

719
00:32:31,026 --> 0:32:32,396
并回传你自己的一个视图

720
00:32:32,396 --> 0:32:33,836
这真的很容易

721
00:32:35,166 --> 0:32:36,576
因此无论你是 iOS

722
00:32:36,576 --> 0:32:40,016
macOS watchOS 还是 tvOS App

723
00:32:40,166 --> 0:32:41,896
都可以立即开始使用

724
00:32:41,896 --> 0:32:45,906
这就是 Xcode 11

725
00:32:46,366 --> 0:32:47,306
非常感谢

726
00:32:47,756 --> 0:32:48,786
祝大家会议愉快

727
00:32:49,516 --> 0:32:56,500
[掌声]
