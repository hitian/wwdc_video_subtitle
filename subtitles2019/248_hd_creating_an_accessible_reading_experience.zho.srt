1
00:00:05,906 --> 0:00:06,907
（创建一个良好的辅助阅读体验）

2
00:00:06,974 --> 0:00:07,808
大家好

3
00:00:07,875 --> 0:00:11,311
欢迎大家参加

4
00:00:11,645 --> 0:00:12,846
我是Darren Minifie

5
00:00:12,913 --> 0:00:15,782
我是Accessibility

6
00:00:17,384 --> 0:00:21,188
一个优秀的app的特质之一是

7
00:00:21,555 --> 0:00:24,324
它涉及到布局设计和字体

8
00:00:24,391 --> 0:00:26,460
特别是那些以长篇阅读

9
00:00:26,527 --> 0:00:29,563
为主要功能的app

10
00:00:30,497 --> 0:00:32,299
实现一个自定义的文字布局

11
00:00:32,366 --> 0:00:34,535
你经常需要使用一些低水平的技术

12
00:00:34,601 --> 0:00:36,537
比如Core Text

13
00:00:37,504 --> 0:00:40,340
本次演讲 你将会了解

14
00:00:40,407 --> 0:00:41,675
来为旁白创建一个

15
00:00:41,742 --> 0:00:44,178
良好的辅助阅读体验

16
00:00:45,445 --> 0:00:47,080
（阅读内容协议

17
00:00:47,147 --> 0:00:50,050
首先 我们来聊一下阅读内容协议

18
00:00:50,317 --> 0:00:53,453
使用本协议

19
00:00:53,887 --> 0:00:56,356
下面 我们来讲一下自动翻页

20
00:00:56,690 --> 0:00:59,793
在你的app中

21
00:01:00,661 --> 0:01:02,963
最后 我们将会讨论

22
00:01:03,030 --> 0:01:06,066
来自定义旁白朗诵你的内容的方式

23
00:01:08,802 --> 0:01:10,971
本次演讲

24
00:01:11,038 --> 0:01:12,673
来介绍你需要知道的技术

25
00:01:14,174 --> 0:01:16,310
这是一个基于页面设计的简单app

26
00:01:16,376 --> 0:01:20,147
每个页面都包含一张图片

27
00:01:20,214 --> 0:01:21,648
和一些详细的文字

28
00:01:23,317 --> 0:01:24,852
为了让你的app更易被获取

29
00:01:24,918 --> 0:01:26,887
你需要先使用旁白进行试听

30
00:01:28,355 --> 0:01:29,389
最方便的方法是

31
00:01:29,456 --> 0:01:32,092
在你的辅助捷径中加入旁白

32
00:01:32,359 --> 0:01:34,428
先打开设置

33
00:01:35,028 --> 0:01:36,597
点击访问

34
00:01:36,997 --> 0:01:39,299
向下滚动至访问捷径

35
00:01:39,766 --> 0:01:41,268
然后点击旁白

36
00:01:42,035 --> 0:01:43,837
现在 根据设备的不同

37
00:01:43,904 --> 0:01:46,473
你需要点击主画面按钮

38
00:01:46,540 --> 0:01:48,775
来快速启用和禁用旁白

39
00:01:50,911 --> 0:01:53,680
我们来看一下旁白

40
00:01:54,915 --> 0:01:56,016
旁白开启

41
00:01:58,185 --> 0:02:00,153
当我用手在屏幕上拖动时

42
00:01:58,185 --> 0:02:00,153
当我用手在屏幕上拖动时

43
00:02:00,220 --> 0:02:01,788
旁白有一个音效反馈

44
00:02:01,855 --> 0:02:04,124
告诉我这里没有内容

45
00:02:04,525 --> 0:02:08,294
要让我们的文本阅读辅助

46
00:02:09,729 --> 0:02:11,532
我们要做的第一件事是

47
00:02:11,598 --> 0:02:15,002
使用

48
00:02:15,269 --> 0:02:17,704
这个协议包含4个核心的方法

49
00:02:19,306 --> 0:02:21,408
AccessibilityLineNumber(forpoint

50
00:02:21,475 --> 0:02:24,645
索要返回触摸点的所在行数

51
00:02:25,445 --> 0:02:27,347
AccessibilityContent(forLineNumber

52
00:02:27,414 --> 0:02:29,616
以及accessibilityFrame(forLineNumber

53
00:02:29,683 --> 0:02:33,520
分别索要返回某行的

54
00:02:34,454 --> 0:02:36,857
最后 accessibilityPageContent

55
00:02:36,924 --> 0:02:39,927
向你索要返回

56
00:02:41,795 --> 0:02:44,965
现在我们来看一下

57
00:02:45,032 --> 0:02:46,166
UIAccessibilityReadingContent协议

58
00:02:47,201 --> 0:02:48,402
示例app的每个页面

59
00:02:48,468 --> 0:02:51,438
都是SessionItemView

60
00:02:52,706 --> 0:02:54,741
这个视图有4个子视图

61
00:02:54,808 --> 0:02:56,476
一个图像视图

62
00:02:56,543 --> 0:02:57,544
一个标题标签

63
00:02:57,611 --> 0:02:58,812
一个标识符标签

64
00:02:58,879 --> 0:03:00,214
以及一个会话详情视图

65
00:02:58,879 --> 0:03:00,214
以及一个会话详情视图

66
00:03:02,182 --> 0:03:04,551
我们额外声明了一个layout枚举

67
00:03:04,618 --> 0:03:07,454
这会帮助我们

68
00:03:10,023 --> 0:03:11,258
第一件我们要做的事情是

69
00:03:11,325 --> 0:03:13,927
通过在页面视图的初始化配置

70
00:03:14,328 --> 0:03:17,331
isAccessibilityElement为true

71
00:03:17,397 --> 0:03:19,233
将我们的页面视图

72
00:03:21,969 --> 0:03:25,205
接下来 我们开始实现

73
00:03:25,706 --> 0:03:28,542
第一个函数是

74
00:03:29,643 --> 0:03:33,647
首先 我们使用过去的行数

75
00:03:34,648 --> 0:03:37,751
如果最终的视图是

76
00:03:37,818 --> 0:03:41,421
我们会映射到相应的layout枚举值

77
00:03:41,688 --> 0:03:43,524
最后 我们返回rawValue

78
00:03:43,590 --> 0:03:46,460
这是旁白能理解的描述

79
00:03:49,129 --> 0:03:52,366
接着 实现

80
00:03:52,699 --> 0:03:56,003
首先 初始化一个layout枚举实例

81
00:03:56,470 --> 0:03:58,205
使用switch函数将值

82
00:03:58,272 --> 0:04:00,641
映射到相应的我们已知的子视图

83
00:03:58,272 --> 0:04:00,641
映射到相应的我们已知的子视图

84
00:04:01,008 --> 0:04:03,310
最后我们返回accessibilityLabel

85
00:04:03,377 --> 0:04:05,512
就是返回子视图的文字

86
00:04:08,348 --> 0:04:11,118
accessibilityFrame(forLineNumber

87
00:04:11,185 --> 0:04:12,286
方法的实现非常简单

88
00:04:13,253 --> 0:04:16,255
首先 使用我们已知的rawValue

89
00:04:16,322 --> 0:04:18,091
初始化一个layout枚举实例

90
00:04:18,591 --> 0:04:20,459
使用switch函数将值

91
00:04:20,527 --> 0:04:23,063
映射到相应的我们已知的子视图

92
00:04:23,564 --> 0:04:25,766
最后 我们返回accessibilityFrame

93
00:04:25,832 --> 0:04:28,268
它表示了一行的宽和高

94
00:04:30,804 --> 0:04:34,074
最后 我们来实现

95
00:04:34,141 --> 0:04:36,610
我们从我们已知的子视图

96
00:04:36,677 --> 0:04:38,645
然后已单个字符串的形式返回

97
00:04:41,882 --> 0:04:44,017
完成了阅读内容协议

98
00:04:44,084 --> 0:04:46,587
我们来看下如何

99
00:04:47,855 --> 0:04:49,289
可获取的拖放

100
00:04:49,690 --> 0:04:51,325
演讲241

101
00:04:51,959 --> 0:04:53,460
拖放是一个强大的API

102
00:04:53,527 --> 0:04:55,696
它允许app分享和交互数据

103
00:04:55,963 --> 0:04:58,699
这一次 我在屏幕中拖动我的手指

104
00:04:58,765 --> 0:05:02,302
旁白朗诵并

105
00:04:58,765 --> 0:05:02,302
旁白朗诵并

106
00:05:04,805 --> 0:05:07,574
下面 我们来讲一下自动翻页

107
00:05:08,308 --> 0:05:10,711
当旁白的

108
00:05:10,777 --> 0:05:12,980
旁白将会从头到尾

109
00:05:13,046 --> 0:05:15,315
朗诵所有的文字内容

110
00:05:15,616 --> 0:05:18,585
旁白这是就可能需要

111
00:05:19,419 --> 0:05:21,455
实现自动翻页的方法

112
00:05:21,522 --> 0:05:24,324
你需要知道两个

113
00:05:24,658 --> 0:05:28,095
首先 你应该在你的页面视图使用

114
00:05:28,161 --> 0:05:29,329
causesPageTurn辅助特征方法

115
00:05:30,130 --> 0:05:33,667
第二 你应该实现

116
00:05:33,734 --> 0:05:37,070
旁白就能

117
00:05:37,971 --> 0:05:39,273
我们来看一下如何

118
00:05:39,339 --> 0:05:41,675
在我们的app实现自动翻页的功能

119
00:05:43,310 --> 0:05:47,080
首先 我们需要实现

120
00:05:47,514 --> 0:05:51,385
我们在页面视图的初始化函数中

121
00:05:53,520 --> 0:05:56,657
接下来 我们实现

122
00:05:57,124 --> 0:05:59,359
我们根据

123
00:05:59,426 --> 0:06:00,961
对应到switch的

124
00:05:59,426 --> 0:06:00,961
对应到switch的

125
00:06:01,828 --> 0:06:04,164
如果direction的值是

126
00:06:04,231 --> 0:06:06,834
我们让代理返回到前一页

127
00:06:07,234 --> 0:06:08,335
如果成功的话

128
00:06:08,402 --> 0:06:11,772
我们会向旁白发送一则

129
00:06:13,874 --> 0:06:17,110
如果direction的值

130
00:06:17,177 --> 0:06:19,580
我们让代理翻到下一页

131
00:06:19,646 --> 0:06:20,781
如果成功的话

132
00:06:20,848 --> 0:06:23,984
我们会向旁白发送一则

133
00:06:27,354 --> 0:06:31,225
我们来看一下app

134
00:06:32,359 --> 0:06:35,162
可获取的拖放 演讲241

135
00:06:35,229 --> 0:06:36,763
拖拽是一个强大的API

136
00:06:36,830 --> 0:06:38,999
它允许app之间分享和交流数据

137
00:06:39,066 --> 0:06:41,401
不论你决定如何在app实现

138
00:06:41,468 --> 0:06:44,371
有一个帮有需要的用户操作的方法

139
00:06:44,438 --> 0:06:47,841
学习我们为iOS设计的

140
00:06:49,409 --> 0:06:50,744
AVSpeechSynthesizer

141
00:06:50,811 --> 0:06:52,012
让iOS说话

142
00:06:52,079 --> 0:06:53,747
演讲236

143
00:06:55,082 --> 0:06:57,551
我们最后一个主题是自定义演讲

144
00:06:57,851 --> 0:07:01,421
你可能需要控制app内

145
00:06:57,851 --> 0:07:01,421
你可能需要控制app内

146
00:07:01,788 --> 0:07:04,124
你需要使用2个阅读内容协议

147
00:07:04,191 --> 0:07:06,026
的替代方法来实现

148
00:07:06,360 --> 0:07:09,196
这些方法会返回

149
00:07:09,263 --> 0:07:10,764
而不是简单的字符

150
00:07:11,398 --> 0:07:14,168
通过支持合适的辅助属性

151
00:07:14,234 --> 0:07:15,836
你能对旁白朗读你的内容

152
00:07:15,903 --> 0:07:18,238
的方式进行各种细节控制

153
00:07:19,873 --> 0:07:22,843
比如 你可能需要用另一种语言

154
00:07:22,910 --> 0:07:24,444
来朗诵某个段落

155
00:07:24,778 --> 0:07:28,482
这时 你就需要使用

156
00:07:28,549 --> 0:07:31,051
和相应语言的识别

157
00:07:31,718 --> 0:07:34,221
这时 旁白会使用最适合

158
00:07:34,288 --> 0:07:35,656
的语言来朗诵你的文字

159
00:07:37,491 --> 0:07:38,692
巴黎凯旋门

160
00:07:40,260 --> 0:07:42,663
更进一步 你可能想更深入了解如何

161
00:07:42,729 --> 0:07:45,232
控制旁白朗诵你的内容

162
00:07:45,599 --> 0:07:46,500
我们来看下实现步骤

163
00:07:46,567 --> 0:07:49,903
你可以使用IPA和

164
00:07:49,970 --> 0:07:54,141
accessibilitySpeechIPANotation

165
00:07:54,975 --> 0:07:56,610
约塞米蒂国家公园

166
00:07:59,179 --> 0:08:02,883
所以 想要用旁白

167
00:07:59,179 --> 0:08:02,883
所以 想要用旁白

168
00:08:02,950 --> 0:08:05,719
你的文字内容需要让用户可以获取

169
00:08:05,786 --> 0:08:10,057
你需要遵循

170
00:08:10,624 --> 0:08:13,260
接下来 是自动翻页功能

171
00:08:13,327 --> 0:08:15,696
这样旁白就能

172
00:08:15,762 --> 0:08:17,197
朗诵你app的所有内容了

173
00:08:18,098 --> 0:08:22,069
最后 为了控制旁白

174
00:08:22,135 --> 0:08:24,938
你可以考虑使用

175
00:08:25,005 --> 0:08:27,341
NS属性的strings版本

176
00:08:27,407 --> 0:08:30,244
并支持最合适的

177
00:08:31,712 --> 0:08:36,015
想要了解这个话题的更多内容

178
00:08:37,384 --> 0:08:38,652
谢谢你的观看
