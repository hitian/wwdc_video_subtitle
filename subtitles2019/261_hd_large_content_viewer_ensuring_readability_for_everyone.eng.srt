1
00:00:00,506 --> 0:00:05,926
[ Music ]

2
00:00:06,426 --> 0:00:08,396
&gt;&gt; Hello. My name is Sommer

3
00:00:08,396 --> 0:00:09,996
Panage and I'm an engineering

4
00:00:09,996 --> 0:00:11,696
manager on the Accessibility

5
00:00:11,696 --> 0:00:12,976
team here at Apple.

6
00:00:12,976 --> 0:00:15,486
I'll be talking about the Large

7
00:00:15,486 --> 0:00:16,286
Content Viewer.

8
00:00:16,566 --> 0:00:18,426
A feature that helps people who

9
00:00:18,426 --> 0:00:20,106
prefer larger text sizes.

10
00:00:20,836 --> 0:00:22,456
In this talk, you'll learn how

11
00:00:22,456 --> 0:00:24,616
to ensure that all parts of your

12
00:00:24,616 --> 0:00:26,666
app are readable for everyone.

13
00:00:28,216 --> 0:00:30,146
We'll first cover what the Large

14
00:00:30,146 --> 0:00:32,286
Content Viewer is and why it's

15
00:00:32,286 --> 0:00:32,856
important.

16
00:00:33,626 --> 0:00:35,476
Next, we'll look at some API

17
00:00:35,916 --> 0:00:37,226
that will allow you to support

18
00:00:37,226 --> 0:00:38,016
it in your app.

19
00:00:38,876 --> 0:00:41,266
Finally, we'll cover examples of

20
00:00:41,266 --> 0:00:42,826
some situations you might

21
00:00:42,826 --> 0:00:44,956
encounter in your app and how to

22
00:00:44,956 --> 0:00:46,916
handle them.

23
00:00:47,176 --> 0:00:48,556
So let's start with some

24
00:00:48,556 --> 0:00:49,186
background.

25
00:00:51,136 --> 0:00:52,906
Before we talk about the Large

26
00:00:52,906 --> 0:00:55,046
Content Viewer, let's review a

27
00:00:55,046 --> 0:00:57,206
related topic, Dynamic Type.

28
00:00:58,166 --> 0:01:00,366
Dynamic Type is a feature that

29
00:00:58,166 --> 0:01:00,366
Dynamic Type is a feature that

30
00:01:00,366 --> 0:01:02,236
allows you to customize the size

31
00:01:02,236 --> 0:01:03,506
of text for the system.

32
00:01:04,096 --> 0:01:05,946
You can make it smaller if you

33
00:01:05,946 --> 0:01:07,336
want to fit more content on

34
00:01:07,336 --> 0:01:09,486
screen, or you can make it

35
00:01:09,486 --> 0:01:10,866
larger and more readable.

36
00:01:11,246 --> 0:01:13,226
By default, you can choose

37
00:01:13,226 --> 0:01:14,876
between seven different sizes.

38
00:01:16,116 --> 0:01:17,666
But if you go into your

39
00:01:17,666 --> 0:01:19,676
Accessibility settings, you can

40
00:01:19,676 --> 0:01:21,696
enable larger sizes and then you

41
00:01:21,696 --> 0:01:23,246
get five additional sizes.

42
00:01:24,026 --> 0:01:26,026
This is important because many

43
00:01:26,026 --> 0:01:27,426
people aren't just using this

44
00:01:27,426 --> 0:01:28,976
feature because they prefer a

45
00:01:28,976 --> 0:01:29,996
different text size.

46
00:01:30,546 --> 0:01:31,806
They're doing it because they

47
00:01:31,806 --> 0:01:34,046
need a larger text size in order

48
00:01:34,046 --> 0:01:37,226
to be able to read the text.

49
00:01:37,746 --> 0:01:39,216
So let's take a look at how

50
00:01:39,216 --> 0:01:40,716
Dynamic Type changes the

51
00:01:40,716 --> 0:01:42,796
behavior of iOS.

52
00:01:43,016 --> 0:01:44,636
Here's how the phone app looks

53
00:01:44,736 --> 0:01:46,286
at the default text size.

54
00:01:47,886 --> 0:01:49,906
Now, if I change my text size to

55
00:01:49,906 --> 0:01:51,586
one of the Accessibility sizes,

56
00:01:51,886 --> 0:01:53,376
the text gets much bigger.

57
00:01:54,006 --> 0:01:55,816
However, you might have noticed

58
00:01:55,896 --> 0:01:57,606
that part of the text on screen

59
00:01:57,746 --> 0:01:58,846
is not getting bigger.

60
00:02:00,346 --> 0:02:02,776
For example, look at the button

61
00:02:02,926 --> 0:02:04,536
in the bottom left.

62
00:02:04,536 --> 0:02:06,046
If the customer has set their

63
00:02:06,046 --> 0:02:08,175
size to be large like we see in

64
00:02:08,175 --> 0:02:10,045
the content area, then they

65
00:02:10,045 --> 0:02:11,946
likely wouldn't see the text

66
00:02:12,066 --> 0:02:13,326
that we see in the tab bar

67
00:02:13,426 --> 0:02:14,596
because it's still small.

68
00:02:15,466 --> 0:02:17,216
You might not be able to make up

69
00:02:17,216 --> 0:02:18,536
the icon above it either in

70
00:02:18,536 --> 0:02:18,926
fact.

71
00:02:19,606 --> 0:02:21,526
However, we don't want to grow

72
00:02:21,526 --> 0:02:22,946
the tab bar because that would

73
00:02:22,946 --> 0:02:24,286
leave very little room for the

74
00:02:24,286 --> 0:02:26,376
main content that you see, in

75
00:02:26,376 --> 0:02:27,876
this case your contact list.

76
00:02:28,396 --> 0:02:30,856
So instead, if you're using

77
00:02:30,886 --> 0:02:32,856
larger text sizes, we allow you

78
00:02:32,856 --> 0:02:34,536
to long press on that button to

79
00:02:34,536 --> 0:02:35,626
see a larger version.

80
00:02:36,096 --> 0:02:38,256
Here's how that looks.

81
00:02:38,746 --> 0:02:40,226
You can now drag your finger

82
00:02:40,226 --> 0:02:41,646
along the bottom bar to see

83
00:02:41,646 --> 0:02:42,916
what's on each of those buttons.

84
00:02:43,456 --> 0:02:44,716
When you finally drag your

85
00:02:44,716 --> 0:02:46,216
finger onto the button that you

86
00:02:46,216 --> 0:02:48,366
want to tap, you can just let go

87
00:02:48,626 --> 0:02:50,126
and the Apple act as though you

88
00:02:50,126 --> 0:02:50,926
tapped the button.

89
00:02:51,616 --> 0:02:53,366
This feature is what we call the

90
00:02:53,366 --> 0:02:54,576
Large Content Viewer.

91
00:02:55,196 --> 0:02:57,046
It allows people with low vision

92
00:02:57,246 --> 0:02:59,396
to use tab bars or any other UI

93
00:02:59,626 --> 0:03:00,666
that has to stay small.

94
00:02:59,626 --> 0:03:00,666
that has to stay small.

95
00:03:01,566 --> 0:03:02,986
It's important for your app to

96
00:03:02,986 --> 0:03:04,596
show the Large Content Viewer

97
00:03:04,596 --> 0:03:05,466
when appropriate.

98
00:03:06,206 --> 0:03:07,906
If you're using standard UIKit

99
00:03:07,906 --> 0:03:09,446
bars, you already showed the

100
00:03:09,446 --> 0:03:10,386
Large Content Viewer.

101
00:03:10,956 --> 0:03:12,226
You might just not have noticed

102
00:03:12,226 --> 0:03:13,736
it before because it's only

103
00:03:13,736 --> 0:03:15,316
enabled for the Accessibility

104
00:03:15,316 --> 0:03:16,296
text sizes.

105
00:03:16,866 --> 0:03:18,896
But if you've got a custom bar

106
00:03:19,276 --> 0:03:21,256
or some other custom UI that has

107
00:03:21,256 --> 0:03:22,926
to stay small, you'll need to

108
00:03:22,926 --> 0:03:24,846
implement some API so that your

109
00:03:24,846 --> 0:03:26,686
UI works just as well as the

110
00:03:26,686 --> 0:03:28,326
standard UIKit controls.

111
00:03:28,796 --> 0:03:30,596
Remember, this is only for the

112
00:03:30,596 --> 0:03:32,636
case when your custom UI cannot

113
00:03:32,636 --> 0:03:33,346
grow in size.

114
00:03:34,736 --> 0:03:36,876
Scaling with dynamic type is

115
00:03:36,926 --> 0:03:38,586
always preferred to showing the

116
00:03:38,586 --> 0:03:39,616
Large Content Viewer.

117
00:03:40,186 --> 0:03:44,116
But sometimes, our bars simply

118
00:03:44,116 --> 0:03:44,736
can't scale.

119
00:03:45,036 --> 0:03:46,956
So let's look at how you can

120
00:03:46,956 --> 0:03:48,846
support the Large Content Viewer

121
00:03:48,846 --> 0:03:51,226
in your app.

122
00:03:51,446 --> 0:03:53,446
Earlier, I said that you already

123
00:03:53,446 --> 0:03:54,806
showed the Large Content Viewer

124
00:03:54,916 --> 0:03:56,576
if you're using standard UIKit

125
00:03:56,576 --> 0:03:57,096
bars.

126
00:03:57,886 --> 0:03:59,406
But you might still need to do

127
00:03:59,406 --> 0:04:00,796
something to make sure that it

128
00:03:59,406 --> 0:04:00,796
something to make sure that it

129
00:04:00,796 --> 0:04:01,506
looks good.

130
00:04:02,736 --> 0:04:04,166
If your bar items use PDF

131
00:04:04,166 --> 0:04:06,606
images, make sure that you check

132
00:04:06,706 --> 0:04:09,406
the Preserve Vector checkbox in

133
00:04:09,406 --> 0:04:11,306
the asset catalog as seen here.

134
00:04:12,106 --> 0:04:13,466
That will ensure that your

135
00:04:13,466 --> 0:04:15,326
images scale smoothly to larger

136
00:04:15,326 --> 0:04:15,836
sizes.

137
00:04:16,435 --> 0:04:19,305
If your image button doesn't

138
00:04:19,305 --> 0:04:21,555
have vector data, for example if

139
00:04:21,555 --> 0:04:24,246
you're using a PNG, then by

140
00:04:24,246 --> 0:04:25,716
default that image will look

141
00:04:25,766 --> 0:04:27,236
blurry when it's shown in the

142
00:04:27,236 --> 0:04:27,616
viewer.

143
00:04:28,316 --> 0:04:29,686
To fix that, you'll need to

144
00:04:29,686 --> 0:04:31,646
provide a larger version of the

145
00:04:31,646 --> 0:04:32,116
image.

146
00:04:33,366 --> 0:04:35,756
Use the large content size image

147
00:04:35,756 --> 0:04:38,346
property on UI bar item to do

148
00:04:38,346 --> 0:04:38,616
that.

149
00:04:39,286 --> 0:04:41,006
If you need to adjust the

150
00:04:41,006 --> 0:04:42,876
positioning, for example, if

151
00:04:42,876 --> 0:04:44,216
your image doesn't look centered

152
00:04:44,216 --> 0:04:45,466
in the viewer the way you wanted

153
00:04:45,466 --> 0:04:47,616
to, then you can adjust the

154
00:04:47,616 --> 0:04:49,546
large content size image in

155
00:04:50,386 --> 0:04:50,506
sets.

156
00:04:51,416 --> 0:04:53,516
So what do you need to do if you

157
00:04:53,516 --> 0:04:54,276
have custom UI?

158
00:04:55,166 --> 0:04:57,626
Well, before iOS 13, you

159
00:04:57,626 --> 0:04:59,186
basically had to make your own

160
00:04:59,186 --> 0:05:00,276
Large Content Viewer from

161
00:04:59,186 --> 0:05:00,276
Large Content Viewer from

162
00:05:00,276 --> 0:05:00,876
scratch.

163
00:05:01,416 --> 0:05:03,586
But now, we've added API that

164
00:05:03,586 --> 0:05:05,346
allows you to show the same UI

165
00:05:05,446 --> 0:05:06,906
that's shown for standard UIKit

166
00:05:06,906 --> 0:05:07,396
bars.

167
00:05:08,016 --> 0:05:09,556
So let's say you have a custom

168
00:05:09,556 --> 0:05:12,076
tab bar, first you'll need to

169
00:05:12,076 --> 0:05:13,766
specify the buttons in your tab

170
00:05:13,766 --> 0:05:15,776
bar as items to be shown in the

171
00:05:15,776 --> 0:05:16,126
viewer.

172
00:05:17,046 --> 0:05:18,936
Then the Large Content Viewer

173
00:05:18,936 --> 0:05:21,256
needs a title and/or an image

174
00:05:21,256 --> 0:05:22,436
for each of those buttons.

175
00:05:22,776 --> 0:05:24,706
If you happened to be using

176
00:05:24,706 --> 0:05:26,516
standard UIKit classes for those

177
00:05:26,516 --> 0:05:27,746
buttons, you'll get those for

178
00:05:27,746 --> 0:05:28,086
free.

179
00:05:29,126 --> 0:05:31,006
Finally, you'll need to set up a

180
00:05:31,006 --> 0:05:32,316
gesture interaction on the

181
00:05:32,316 --> 0:05:33,596
custom tab bar itself.

182
00:05:35,196 --> 0:05:38,276
The new UILargeContentViewerItem

183
00:05:38,276 --> 0:05:40,746
protocol specifies the info that

184
00:05:40,746 --> 0:05:42,426
the Large Content Viewer needs

185
00:05:42,506 --> 0:05:44,026
in order to show your content.

186
00:05:45,306 --> 0:05:47,006
This showsLargeContentViewer

187
00:05:47,006 --> 0:05:49,186
property is what you'll use to

188
00:05:49,186 --> 0:05:50,726
mark your tab bar buttons.

189
00:05:51,136 --> 0:05:53,496
Set it to true on any views that

190
00:05:53,496 --> 0:05:54,566
should present the viewer.

191
00:05:55,686 --> 0:05:57,206
Then you can specify a

192
00:05:57,206 --> 0:05:59,456
largeContentTitle and a

193
00:05:59,456 --> 0:06:00,626
largeContentImage.

194
00:05:59,456 --> 0:06:00,626
largeContentImage.

195
00:06:00,926 --> 0:06:02,576
You can specify either of those

196
00:06:02,876 --> 0:06:03,616
or both of them.

197
00:06:04,486 --> 0:06:07,226
If you want to reuse a PDF image

198
00:06:07,226 --> 0:06:09,026
from a small button, you can set

199
00:06:09,026 --> 0:06:10,976
the scalesLargeContentImage

200
00:06:10,976 --> 0:06:11,966
property to true.

201
00:06:12,656 --> 0:06:14,546
But just as we saw earlier with

202
00:06:14,546 --> 0:06:16,626
UI bar item, make sure that you

203
00:06:16,626 --> 0:06:18,626
preserve the vector data for

204
00:06:18,626 --> 0:06:19,186
your image.

205
00:06:19,696 --> 0:06:21,566
And lastly, if you want to

206
00:06:21,566 --> 0:06:23,096
center your image, you can use

207
00:06:23,096 --> 0:06:25,116
the largeContentImageInsets.

208
00:06:27,216 --> 0:06:29,226
UIView already implements this

209
00:06:29,226 --> 0:06:31,256
protocol and it also provides

210
00:06:31,256 --> 0:06:31,756
setters.

211
00:06:31,996 --> 0:06:34,116
So in many cases, you can just

212
00:06:34,116 --> 0:06:35,656
set the properties rather than

213
00:06:35,656 --> 0:06:37,396
having to subclass and override.

214
00:06:38,296 --> 0:06:39,966
Also, as we mentioned earlier,

215
00:06:40,306 --> 0:06:42,256
certain UIKit classes like UI

216
00:06:42,256 --> 0:06:44,376
button and UI label, return

217
00:06:44,376 --> 0:06:46,226
default values for their title

218
00:06:46,386 --> 0:06:47,126
and image.

219
00:06:47,636 --> 0:06:50,416
So that's how you annotate the

220
00:06:50,416 --> 0:06:51,586
buttons in your tab bar.

221
00:06:52,496 --> 0:06:54,166
Next, you'll need to add a

222
00:06:54,166 --> 0:06:55,696
gesture interaction to the tab

223
00:06:55,696 --> 0:06:56,446
bar itself.

224
00:06:56,806 --> 0:06:58,756
To add the interaction, you'll

225
00:06:58,756 --> 0:07:00,716
use the same addInteraction

226
00:06:58,756 --> 0:07:00,716
use the same addInteraction

227
00:07:00,846 --> 0:07:02,456
method that's used for adding,

228
00:07:02,526 --> 0:07:03,556
drag and drop support.

229
00:07:03,856 --> 0:07:06,906
Here's how the interaction for

230
00:07:06,906 --> 0:07:08,526
the Large Content Viewer works.

231
00:07:08,846 --> 0:07:10,806
It's got a few properties on it.

232
00:07:11,276 --> 0:07:12,896
In the simple case, you can

233
00:07:12,896 --> 0:07:14,356
create an instance of this

234
00:07:14,356 --> 0:07:15,936
interaction with no arguments

235
00:07:16,156 --> 0:07:17,746
and you don't need to touch any

236
00:07:17,746 --> 0:07:18,896
of the other properties here.

237
00:07:19,416 --> 0:07:21,426
But if your app has other

238
00:07:21,426 --> 0:07:23,206
gesture recognizers, you may

239
00:07:23,206 --> 0:07:24,706
need to customize the behavior.

240
00:07:25,866 --> 0:07:27,676
You can provide a delegate to

241
00:07:27,676 --> 0:07:29,436
get fine-grained control over

242
00:07:29,436 --> 0:07:30,306
how it works.

243
00:07:31,156 --> 0:07:32,396
You can also use the

244
00:07:32,396 --> 0:07:34,516
gestureRecognizer property if

245
00:07:34,516 --> 0:07:36,246
you need to set up relationships

246
00:07:36,246 --> 0:07:37,776
with your app's other gesture

247
00:07:37,776 --> 0:07:38,546
recognizers.

248
00:07:39,206 --> 0:07:41,806
Finally, to find out whether the

249
00:07:41,806 --> 0:07:43,606
Large Content Viewer is enabled,

250
00:07:43,936 --> 0:07:45,456
you can check the isEnabled

251
00:07:45,456 --> 0:07:46,006
property.

252
00:07:46,536 --> 0:07:48,096
And of course, you can listen

253
00:07:48,096 --> 0:07:49,796
for the notification to see when

254
00:07:49,796 --> 0:07:50,536
that changes.

255
00:07:52,356 --> 0:07:53,836
There are a few ways to

256
00:07:53,836 --> 0:07:55,666
customize the behavior using the

257
00:07:55,666 --> 0:07:56,136
delegate.

258
00:07:57,836 --> 0:08:00,026
First, you can specify what

259
00:07:57,836 --> 0:08:00,026
First, you can specify what

260
00:08:00,026 --> 0:08:01,616
happens when the user lifts

261
00:08:01,616 --> 0:08:02,946
their finger from an item in

262
00:08:02,946 --> 0:08:03,756
your custom view.

263
00:08:04,146 --> 0:08:06,206
It should act as though the user

264
00:08:06,206 --> 0:08:07,176
tapped on that item.

265
00:08:07,826 --> 0:08:08,956
If you don't implement this

266
00:08:08,956 --> 0:08:10,436
method and you're using a

267
00:08:10,436 --> 0:08:12,326
standard UI control like UI

268
00:08:12,326 --> 0:08:14,376
button, by default it will get

269
00:08:14,376 --> 0:08:16,306
sent a touchup inside event.

270
00:08:16,926 --> 0:08:18,556
But if you got something more

271
00:08:18,556 --> 0:08:21,086
custom there, for example a view

272
00:08:21,086 --> 0:08:22,376
with its own tap gesture

273
00:08:22,376 --> 0:08:24,136
recognizer, you can implement

274
00:08:24,136 --> 0:08:25,396
this method to provide the

275
00:08:25,396 --> 0:08:26,376
behavior you need.

276
00:08:27,206 --> 0:08:29,316
Next, there's an option to

277
00:08:29,316 --> 0:08:31,026
provide the item at a particular

278
00:08:31,026 --> 0:08:31,426
point.

279
00:08:31,946 --> 0:08:33,706
By default, the item will be

280
00:08:33,706 --> 0:08:35,366
found by calling point inside

281
00:08:35,366 --> 0:08:37,236
with event recursively on your

282
00:08:37,236 --> 0:08:38,106
view hierarchy.

283
00:08:38,765 --> 0:08:40,836
But that might not work if you

284
00:08:40,876 --> 0:08:42,496
aren't using views for example.

285
00:08:42,986 --> 0:08:45,356
So, this method lets you return

286
00:08:45,356 --> 0:08:47,136
which item should be shown in

287
00:08:47,136 --> 0:08:48,386
the viewer for a particular

288
00:08:48,386 --> 0:08:48,816
point.

289
00:08:50,016 --> 0:08:52,346
Finally, you can decide which

290
00:08:52,346 --> 0:08:53,836
viewController should house the

291
00:08:53,836 --> 0:08:54,916
Large Content Viewer.

292
00:08:55,456 --> 0:08:57,446
By default, UIKit will try to

293
00:08:57,446 --> 0:08:58,956
pick a viewController that

294
00:08:58,956 --> 0:09:00,596
contains the view that you added

295
00:08:58,956 --> 0:09:00,596
contains the view that you added

296
00:09:00,596 --> 0:09:01,556
the interaction to.

297
00:09:02,406 --> 0:09:03,796
But if that default choice

298
00:09:03,796 --> 0:09:05,166
doesn't work well for your app,

299
00:09:05,326 --> 0:09:06,536
you can specify one here.

300
00:09:08,556 --> 0:09:10,236
So, we've covered the API.

301
00:09:11,026 --> 0:09:12,616
Now let's look at some examples

302
00:09:12,616 --> 0:09:14,206
showing how to use it.

303
00:09:15,776 --> 0:09:17,696
First, let's look at a simple

304
00:09:17,696 --> 0:09:18,136
case.

305
00:09:18,616 --> 0:09:20,446
You've got a custom bar but

306
00:09:20,446 --> 0:09:22,606
inside you've got standard UIKit

307
00:09:22,606 --> 0:09:23,056
views.

308
00:09:23,426 --> 0:09:25,546
Here we've got a bar with a UI

309
00:09:25,546 --> 0:09:27,096
button and a UI label.

310
00:09:28,816 --> 0:09:30,446
Because we're using standard

311
00:09:30,446 --> 0:09:32,856
views, all we need to do is up

312
00:09:32,856 --> 0:09:35,006
to the button and the label in

313
00:09:35,316 --> 0:09:35,786
using the

314
00:09:35,786 --> 0:09:37,226
showsLargeContentViewer

315
00:09:37,226 --> 0:09:37,786
property.

316
00:09:38,166 --> 0:09:39,876
There's no need to specify a

317
00:09:39,876 --> 0:09:42,076
title or an image since those

318
00:09:42,076 --> 0:09:43,596
can be inferred from the views

319
00:09:43,596 --> 0:09:44,406
of the properties.

320
00:09:45,336 --> 0:09:47,166
Finally, we can add the gesture

321
00:09:47,166 --> 0:09:48,646
interaction to the custom bar

322
00:09:48,906 --> 0:09:50,446
with no need to modify any

323
00:09:50,446 --> 0:09:50,956
properties.

324
00:09:51,296 --> 0:09:52,296
That's it.

325
00:09:53,556 --> 0:09:55,246
If your custom bar uses

326
00:09:55,246 --> 0:09:56,806
something else for its buttons,

327
00:09:57,106 --> 0:09:58,496
then you'll need some of the

328
00:09:58,496 --> 0:09:59,076
other API.

329
00:09:59,826 --> 0:10:01,696
Let's say each of your buttons

330
00:09:59,826 --> 0:10:01,696
Let's say each of your buttons

331
00:10:01,696 --> 0:10:03,836
is an instance of a MyButton

332
00:10:03,836 --> 0:10:04,786
custom class.

333
00:10:05,326 --> 0:10:08,406
You can override the UI Large

334
00:10:08,406 --> 0:10:10,086
Content Viewer item properties

335
00:10:10,176 --> 0:10:11,806
on your buttons to return the

336
00:10:11,806 --> 0:10:12,366
right info.

337
00:10:13,136 --> 0:10:15,166
Here we're returning true for

338
00:10:15,166 --> 0:10:17,596
showsLargeContentViewer and

339
00:10:17,736 --> 0:10:19,236
we're returning our text as the

340
00:10:19,236 --> 0:10:19,606
title.

341
00:10:21,116 --> 0:10:23,226
If you have an image with vector

342
00:10:23,226 --> 0:10:25,466
data for each button, then you

343
00:10:25,466 --> 0:10:27,186
can use the exact same image for

344
00:10:27,186 --> 0:10:28,406
the Large Content Viewer.

345
00:10:29,266 --> 0:10:31,006
Just make sure to return true

346
00:10:31,006 --> 0:10:33,406
for scalesLargeContentImage so

347
00:10:33,406 --> 0:10:34,696
that it grows to the correct

348
00:10:34,696 --> 0:10:35,226
size.

349
00:10:36,656 --> 0:10:38,666
Finally, let's look at an

350
00:10:38,666 --> 0:10:40,436
example when you need to deal

351
00:10:40,436 --> 0:10:42,036
with another gesture recognizer.

352
00:10:42,036 --> 0:10:44,436
A classic example from one of

353
00:10:44,436 --> 0:10:46,126
Apple's apps is in Safari.

354
00:10:46,866 --> 0:10:48,366
When you tap on the Back button,

355
00:10:48,596 --> 0:10:50,326
it goes to the previous page.

356
00:10:50,826 --> 0:10:52,356
But when you long press on it,

357
00:10:52,716 --> 0:10:54,156
it brings you to page with your

358
00:10:54,156 --> 0:10:55,396
past browsing history.

359
00:10:56,166 --> 0:10:57,956
The Large Content Viewer also

360
00:10:57,956 --> 0:10:59,436
uses a long press gesture.

361
00:11:00,056 --> 0:11:02,666
So how do you get those to work

362
00:11:03,936 --> 0:11:04,136
together?

363
00:11:04,436 --> 0:11:06,276
You should absolutely allow both

364
00:11:06,276 --> 0:11:06,936
things to work.

365
00:11:07,546 --> 0:11:09,436
In other words, let the Large

366
00:11:09,436 --> 0:11:11,266
Content Viewer show so that

367
00:11:11,266 --> 0:11:12,426
people can see what's on the

368
00:11:12,426 --> 0:11:12,876
button.

369
00:11:13,486 --> 0:11:15,216
But once they've had a chance to

370
00:11:15,216 --> 0:11:17,006
read it, do the thing you would

371
00:11:17,006 --> 0:11:18,586
normally do on long press.

372
00:11:19,606 --> 0:11:21,386
To do that, first, let's

373
00:11:21,386 --> 0:11:22,786
increase our existing

374
00:11:22,846 --> 0:11:24,866
longPressRecognizer's duration.

375
00:11:25,466 --> 0:11:26,916
That way we'll give people some

376
00:11:26,916 --> 0:11:28,576
extra time to show the viewer

377
00:11:28,576 --> 0:11:30,616
first before we do the other

378
00:11:30,616 --> 0:11:31,106
action.

379
00:11:31,766 --> 0:11:34,036
You should also make sure you

380
00:11:34,036 --> 0:11:35,586
update the duration if people's

381
00:11:35,586 --> 0:11:36,566
setting change.

382
00:11:37,116 --> 0:11:39,026
If they start or stop using one

383
00:11:39,026 --> 0:11:40,766
of the Accessibility text sizes,

384
00:11:41,076 --> 0:11:43,056
the duration should also update.

385
00:11:44,306 --> 0:11:45,676
Next, let's set a

386
00:11:45,676 --> 0:11:47,926
UIGestureRecognizer delegate on

387
00:11:47,926 --> 0:11:48,706
the existing

388
00:11:48,766 --> 0:11:49,886
longPressRecognizer.

389
00:11:51,366 --> 0:11:53,406
Now, in your delegate callbacks,

390
00:11:53,766 --> 0:11:55,386
you can make sure that both of

391
00:11:55,386 --> 0:11:55,966
your existing

392
00:11:55,966 --> 0:11:58,106
longPressRecognizer and the

393
00:11:58,106 --> 0:11:59,576
gestureRecognizer from the Large

394
00:11:59,576 --> 0:12:01,316
Content Viewer can recognize at

395
00:11:59,576 --> 0:12:01,316
Content Viewer can recognize at

396
00:12:01,316 --> 0:12:02,216
the same time.

397
00:12:02,466 --> 0:12:04,446
That way, neither one of them

398
00:12:04,526 --> 0:12:05,766
will prevent the other from

399
00:12:05,766 --> 0:12:06,156
working.

400
00:12:07,456 --> 0:12:09,476
Here, we can see the behavior

401
00:12:09,476 --> 0:12:10,976
with our Large Content Viewer

402
00:12:11,036 --> 0:12:11,866
implementation.

403
00:12:12,606 --> 0:12:14,576
If I lift my finger while the

404
00:12:14,576 --> 0:12:16,156
Large Content Viewer is visible,

405
00:12:16,286 --> 0:12:17,806
I go back as expected.

406
00:12:18,336 --> 0:12:19,936
However, if I long press for the

407
00:12:19,936 --> 0:12:21,676
longer duration, I can still get

408
00:12:21,676 --> 0:12:22,746
to that browsing history.

409
00:12:23,286 --> 0:12:25,836
So that's how your app can

410
00:12:25,836 --> 0:12:27,306
accommodate people who prefer

411
00:12:27,306 --> 0:12:29,426
larger text sizes even for UI

412
00:12:29,656 --> 0:12:30,886
that needs to stay small.

413
00:12:30,886 --> 0:12:33,176
Note that you should only use

414
00:12:33,176 --> 0:12:35,066
the Large Content Viewer for UI

415
00:12:35,236 --> 0:12:36,136
that can't scale.

416
00:12:36,836 --> 0:12:38,436
Scaling for Dynamic Type is

417
00:12:38,436 --> 0:12:39,846
always the preferred option.

418
00:12:40,146 --> 0:12:41,936
So if you can do that, don't use

419
00:12:41,936 --> 0:12:42,386
this as API.

420
00:12:43,396 --> 0:12:45,696
Finally, if your custom view has

421
00:12:45,696 --> 0:12:47,516
other interactions, make sure

422
00:12:47,656 --> 0:12:48,676
that those are all still

423
00:12:48,676 --> 0:12:50,656
possible for people who use the

424
00:12:50,656 --> 0:12:51,606
Large Content Viewer.

425
00:12:52,206 --> 0:12:54,026
That way, everyone can use all

426
00:12:54,026 --> 0:12:55,516
of your app's great features.

427
00:12:55,966 --> 0:12:56,836
That's it for now.

428
00:12:57,156 --> 0:12:57,966
Thanks for watching.
