1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:11,176 --> 0:00:13,196
&gt;&gt; 大家下午好

3
00:00:13,306 --> 0:00:16,335
欢迎来到我们的讲演

4
00:00:16,335 --> 0:00:17,236
Working with USD（使用 USD）

5
00:00:17,926 --> 0:00:19,186
很高兴来到这儿

6
00:00:19,926 --> 0:00:21,386
我叫 Denis Kovacs

7
00:00:21,386 --> 0:00:23,486
一会 Chloe Moore 会加入讲演

8
00:00:24,436 --> 0:00:26,316
去年 我们介绍了 

9
00:00:26,316 --> 0:00:27,536
iOS 上的 AR Quick Look

10
00:00:27,976 --> 0:00:30,266
这是在设备上

11
00:00:30,266 --> 0:00:32,906
探索 AR 中 3D 内容的最简单方法

12
00:00:35,476 --> 0:00:37,806
比如 你可以查看

13
00:00:37,806 --> 0:00:39,476
你想购买的产品的模型

14
00:00:40,066 --> 0:00:41,026
你可以把它放在 

15
00:00:41,026 --> 0:00:42,676
自己所处的地方

16
00:00:42,676 --> 0:00:43,486
感受它的真实大小

17
00:00:44,666 --> 0:00:45,966
当你移动设备时 

18
00:00:46,256 --> 0:00:47,976
模型牢牢锁定在你周围

19
00:00:51,966 --> 0:00:53,316
你可以感受到   

20
00:00:53,316 --> 0:00:54,686
在自己家里

21
00:00:55,106 --> 0:00:56,566
实物看起来是什么样子的

22
00:00:56,896 --> 0:00:58,586
因为模型的制作

23
00:00:58,586 --> 0:01:00,056
是依据你所处地的照明情况的

24
00:00:58,586 --> 0:01:00,056
是依据你所处地的照明情况的

25
00:01:01,106 --> 0:01:02,346
发光材料 

26
00:01:02,346 --> 0:01:03,416
比如 这盏灯上的抛光铬

27
00:01:03,916 --> 0:01:05,226
甚至可以反射你的环境

28
00:01:08,776 --> 0:01:10,706
AR 就是很好玩

29
00:01:11,576 --> 0:01:13,246
它真的非常直观

30
00:01:13,246 --> 0:01:15,066
可以用来探索 3D 内容

31
00:01:15,066 --> 0:01:15,976
并与之互动

32
00:01:21,286 --> 0:01:22,566
在这些所有的 AR 体验背后 

33
00:01:22,566 --> 0:01:24,586
是一个文件格式 USDZ

34
00:01:24,586 --> 0:01:27,976
我们去年将其引入平台

35
00:01:30,306 --> 0:01:32,556
USDZ 支持已经

36
00:01:32,556 --> 0:01:34,026
和我们的 App 和框架融为一体

37
00:01:34,026 --> 0:01:36,096
所以你可以通过

38
00:01:36,096 --> 0:01:37,316
信息和邮箱 

39
00:01:37,316 --> 0:01:39,776
把你的 AR 体验分享给朋友

40
00:01:39,776 --> 0:01:41,766
你可以在 AR 里体验交互新闻

41
00:01:41,766 --> 0:01:44,336
新闻内容焕然一新

42
00:01:44,336 --> 0:01:45,676
你或许还可以用一种全新的方式体验 web

43
00:01:45,676 --> 0:01:47,636
通过 Safari

44
00:01:47,636 --> 0:01:48,986
直接将它们带入 AR 

45
00:01:50,246 --> 0:01:53,226
你可以借用 USDZ 

46
00:01:53,226 --> 0:01:54,456
搭建自己的 App

47
00:01:59,236 --> 0:02:02,496
USDZ 背后的技术是 USD

48
00:01:59,236 --> 0:02:02,496
USDZ 背后的技术是 USD

49
00:02:02,496 --> 0:02:05,596
这就是我们这次讲演的主题

50
00:02:09,096 --> 0:02:11,816
这是我们今天的议程

51
00:02:12,386 --> 0:02:14,256
首先 我们要看一下 USD 是什么

52
00:02:14,256 --> 0:02:16,776
然后我们会讨论一些工作流

53
00:02:16,776 --> 0:02:18,186
这些工作流

54
00:02:18,236 --> 0:02:20,426
和创建 转化 USDZ 有关

55
00:02:20,576 --> 0:02:22,066
最后 我们会帮你形成 

56
00:02:22,066 --> 0:02:24,496
使用 USD 的思维直觉

57
00:02:25,556 --> 0:02:26,966
我们开始会介绍一些要素

58
00:02:27,036 --> 0:02:28,716
它们对于大部分 3D 文件格式来说都很常见

59
00:02:29,496 --> 0:02:30,636
最后我们会介绍

60
00:02:30,636 --> 0:02:33,906
USD 一些独有的功能

61
00:02:34,176 --> 0:02:34,976
首先 什么是 USD

62
00:02:38,206 --> 0:02:40,786
USD 的全称是 Universal Scene Description

63
00:02:42,086 --> 0:02:44,496
它是一个 3D 文件格式

64
00:02:44,726 --> 0:02:46,856
通过 Python 绑定支持 C++ 库

65
00:02:46,856 --> 0:02:49,666
是由 Pixar 开发的 

66
00:02:50,616 --> 0:02:53,516
这个库可以读写 

67
00:02:54,236 --> 0:02:55,606
USD 文件

68
00:02:55,786 --> 0:02:58,846
它有一个非常好用的创作引擎 

69
00:02:58,916 --> 0:02:59,476
当然远不止这些

70
00:03:00,186 --> 0:03:02,416
这个库的重点是速度 

71
00:03:02,416 --> 0:03:06,406
可扩展性 以及合作

72
00:03:07,196 --> 0:03:08,546
这是 USD 的三个扩展文件

73
00:03:08,836 --> 0:03:10,766
一个是纯文字版本 USDA 

74
00:03:10,766 --> 0:03:12,546
它的设计初衷

75
00:03:12,976 --> 0:03:16,496
是让读写

76
00:03:16,856 --> 0:03:19,156
尽可能简单

77
00:03:20,006 --> 0:03:22,656
第二个是二进制版本 USDC

78
00:03:22,746 --> 0:03:25,456
优点是尽可能高效读写

79
00:03:26,176 --> 0:03:28,566
第三个是 USD

80
00:03:28,566 --> 0:03:30,716
它既可以是纯文本也可以是二进制

81
00:03:31,336 --> 0:03:33,856
你可以在这些文件格式中

82
00:03:33,856 --> 0:03:34,976
来回转换

83
00:03:38,386 --> 0:03:40,656
这个是 USDZ 

84
00:03:41,636 --> 0:03:45,126
我们先来仔细讲解一下这个格式

85
00:03:45,246 --> 0:03:47,216
什么是 USDZ

86
00:03:47,216 --> 0:03:49,456
USDZ 是 USD 的分发格式

87
00:03:50,216 --> 0:03:51,766
它包含一个 3D 场景的所有数据

88
00:03:51,766 --> 0:03:55,366
打包在单个压缩文件中

89
00:03:56,666 --> 0:03:58,406
它是为共享而优化的

90
00:03:58,406 --> 0:04:00,476
是 AR Quick Look 的基础

91
00:03:58,406 --> 0:04:00,476
是 AR Quick Look 的基础

92
00:04:00,986 --> 0:04:04,216
iOS macOS 和 tvOS 

93
00:04:04,216 --> 0:04:04,496
都支持 USDZ

94
00:04:04,496 --> 0:04:08,966
如果剖析一下 USDZ 文件

95
00:04:09,286 --> 0:04:10,336
就可以看到  

96
00:04:10,336 --> 0:04:13,176
它是一个未压缩 zip 存档

97
00:04:13,176 --> 0:04:15,076
为了最有效的内存映射

98
00:04:15,076 --> 0:04:17,696
内含的所有文件

99
00:04:18,315 --> 0:04:20,565
都对齐 64 位边界

100
00:04:21,966 --> 0:04:23,906
这是 USDZ 存档

101
00:04:23,906 --> 0:04:28,296
包含的两种文件类型场景描述

102
00:04:28,626 --> 0:04:33,316
以 USDA USD 或 USDC 甚至 USDZ 格式归档

103
00:04:33,316 --> 0:04:34,916
所以你有嵌套存档

104
00:04:35,016 --> 0:04:37,866
以及一套纹理

105
00:04:38,266 --> 0:04:40,906
目前是 PNG 或 JPEG 格式

106
00:04:46,826 --> 0:04:49,036
我们粗略比较一下

107
00:04:49,366 --> 0:04:52,726
目前那些文件格式

108
00:04:52,926 --> 0:04:54,416
基础的 最基础的格式是 obj

109
00:04:54,416 --> 0:04:58,206
包含一个简单的 3D 模型

110
00:04:59,346 --> 0:05:00,926
材料支持有限

111
00:04:59,346 --> 0:05:00,926
材料支持有限

112
00:05:00,926 --> 0:05:03,066
没有动画

113
00:05:03,626 --> 0:05:06,806
这些是一批与之不同的 

114
00:05:06,876 --> 0:05:09,226
更现代的文件格式

115
00:05:09,736 --> 0:05:11,056
它们通常包含多个模型  

116
00:05:11,056 --> 0:05:15,056
可以布局在一个场景图中

117
00:05:15,056 --> 0:05:16,546
它们支持不同的

118
00:05:17,066 --> 0:05:20,176
材料描述和动画

119
00:05:22,376 --> 0:05:25,026
USD支持所有的这些

120
00:05:25,666 --> 0:05:27,646
但是它的附加优点是 可扩展

121
00:05:27,646 --> 0:05:29,556
Pixar 为更大的电影场景 

122
00:05:29,556 --> 0:05:31,176
发明了这个格式

123
00:05:31,956 --> 0:05:33,566
它还支持多人合作

124
00:05:33,626 --> 0:05:35,396
让很多美术师 

125
00:05:35,396 --> 0:05:37,196
在一个场景一起工作

126
00:05:37,196 --> 0:05:39,266
同时又不会干扰彼此工作

127
00:05:44,186 --> 0:05:46,926
USDZ 是一个存档包 

128
00:05:47,676 --> 0:05:49,556
也承袭了大部分这些功能

129
00:05:53,296 --> 0:05:56,106
接下来 我们看一下工作流

130
00:05:56,686 --> 0:05:59,466
我们可以把这些分为两类

131
00:05:59,466 --> 0:06:02,196
转换已有素材 

132
00:05:59,466 --> 0:06:02,196
转换已有素材 

133
00:06:02,196 --> 0:06:04,636
和创建新素材

134
00:06:05,206 --> 0:06:08,966
我们先从转换已有素材开始

135
00:06:13,486 --> 0:06:16,046
想象一下你有这个的素材   

136
00:06:16,116 --> 0:06:18,526
是一些其他的格式

137
00:06:18,526 --> 0:06:20,316
可能是 FBX 或 gltf

138
00:06:20,316 --> 0:06:22,416
想要将它们

139
00:06:22,416 --> 0:06:24,886
转换为USDZ 

140
00:06:24,886 --> 0:06:28,546
应用到 App 或 AR Quick Look 上去

141
00:06:31,216 --> 0:06:33,016
今天我们介绍了一个 

142
00:06:33,016 --> 0:06:34,506
新命令行工具

143
00:06:34,506 --> 0:06:35,386
叫作 USDZconvert 

144
00:06:36,106 --> 0:06:37,996
它超越了去年的 Xcode converter

145
00:06:37,996 --> 0:06:41,566
让你可以转换

146
00:06:41,566 --> 0:06:43,646
更多的文件格式 

147
00:06:43,716 --> 0:06:46,676
比如 FBX 和 gltf

148
00:06:47,086 --> 0:06:48,886
它还可以执行素材验证

149
00:06:49,546 --> 0:06:50,606
所以你可以确信

150
00:06:50,606 --> 0:06:52,086
生成的 USDZ 文件

151
00:06:52,086 --> 0:06:52,906
没有问题

152
00:06:53,696 --> 0:06:56,746
而且它搭建在 Python 上

153
00:06:56,776 --> 0:06:57,756
所以不受平台限制

154
00:06:58,506 --> 0:06:59,486
在 macOS 的其他平台上  

155
00:06:59,486 --> 0:07:02,306
将这个转换器

156
00:06:59,486 --> 0:07:02,306
将这个转换器

157
00:07:02,306 --> 0:07:05,176
和你的现有内容流程相结合

158
00:07:05,456 --> 0:07:06,956
就会比较简单

159
00:07:11,216 --> 0:07:12,656
这里有几个样本案例

160
00:07:13,016 --> 0:07:14,686
比如说你有一个 gltf 文件

161
00:07:14,686 --> 0:07:16,386
你可以用 USDZconvert 

162
00:07:16,386 --> 0:07:18,796
把这个文件转换为 USDZ 格式

163
00:07:18,796 --> 0:07:21,496
你可以看到 

164
00:07:21,556 --> 0:07:22,976
它之后执行了素材验证

165
00:07:26,736 --> 0:07:28,006
如果你想知道 

166
00:07:28,006 --> 0:07:29,586
所有的命令行选项

167
00:07:29,636 --> 0:07:30,466
你可以使用这个 -h

168
00:07:31,116 --> 0:07:38,416
你也可以直接从命令行

169
00:07:38,416 --> 0:07:39,276
提供丰富的材料描述

170
00:07:39,276 --> 0:07:41,056
尤其对于 obj 这种   

171
00:07:41,056 --> 0:07:42,356
没有丰富材料定义的文件格式

172
00:07:42,646 --> 0:07:45,096
这就非常方便

173
00:07:47,556 --> 0:07:50,366
Usdzconvert只是其中一部分 

174
00:07:50,366 --> 0:07:52,806
我们对开发者提供了更大的包

175
00:07:53,496 --> 0:07:55,286
这个包还包括

176
00:07:55,376 --> 0:07:57,186
为 macOS 预编译的二进制 USD 库

177
00:07:57,186 --> 0:07:59,626
还有一些其他东西

178
00:07:59,836 --> 0:08:05,056
比如 USD 命令行工具

179
00:07:59,836 --> 0:08:05,056
比如 USD 命令行工具

180
00:08:05,266 --> 0:08:08,696
比如 Usdcat 

181
00:08:09,156 --> 0:08:10,656
它可以将你的 USDZ 文件

182
00:08:10,656 --> 0:08:14,946
输出为纯文本

183
00:08:15,106 --> 0:08:17,416
Usdtree 可以用来查看

184
00:08:17,416 --> 0:08:19,786
模型层次的高级结构

185
00:08:20,896 --> 0:08:25,616
USDchecker 是 USDZ 素材的验证器

186
00:08:26,196 --> 0:08:29,726
我们还有一个小脚本

187
00:08:29,726 --> 0:08:31,266
叫作 固定容量

188
00:08:31,776 --> 0:08:33,086
去年 如果你提供透明材料的模型

189
00:08:33,086 --> 0:08:34,525
给 AR Quick Look 

190
00:08:34,576 --> 0:08:36,446
那些材料在 iOS 13 里

191
00:08:36,446 --> 0:08:38,746
是看起来是不透明的

192
00:08:38,946 --> 0:08:43,576
用脚本来解决这个问题

193
00:08:43,726 --> 0:08:45,576
为了演示一下这些

194
00:08:45,576 --> 0:08:47,776
我想邀请 Chloe 到台上来

195
00:08:48,516 --> 0:08:53,746
[掌声]

196
00:08:54,246 --> 0:08:54,996
&gt;&gt; 谢谢你 Denis

197
00:08:55,976 --> 0:08:57,706
正如之前所见

198
00:08:57,706 --> 0:09:00,056
我们提供了预编译的 USD Python 库

199
00:08:57,706 --> 0:09:00,056
我们提供了预编译的 USD Python 库

200
00:09:00,056 --> 0:09:02,466
可以在这里下载

201
00:09:03,606 --> 0:09:05,916
我已经下载并解压了

202
00:09:07,266 --> 0:09:08,976
USD 文件夹包括

203
00:09:08,976 --> 0:09:10,886
预编译的 USD Python 库

204
00:09:11,206 --> 0:09:12,876
和一系列命令行工具

205
00:09:12,876 --> 0:09:15,246
比如 Pixar 提供的

206
00:09:15,246 --> 0:09:16,906
USDtree 和 USDcat 

207
00:09:18,296 --> 0:09:20,586
USDZconvert 文件夹包含

208
00:09:20,586 --> 0:09:22,566
USDZconvert 工具

209
00:09:22,566 --> 0:09:23,326
和解决不透明的工具

210
00:09:24,536 --> 0:09:26,276
我们还提供了 USD 命令

211
00:09:26,536 --> 0:09:28,746
它可以为你设置一些环境变量

212
00:09:28,746 --> 0:09:31,316
当你双击时 它打开了一个

213
00:09:31,316 --> 0:09:31,976
终端窗口

214
00:09:36,176 --> 0:09:38,226
我们先从 USDZconvert 开始

215
00:09:39,026 --> 0:09:40,816
如果你只是单纯运行 USDZconvert

216
00:09:40,816 --> 0:09:43,476
它就输出我们的参数

217
00:09:44,966 --> 0:09:46,596
现在想象你有某个 gltf 文件

218
00:09:46,596 --> 0:09:47,736
需要转换

219
00:10:03,346 --> 0:10:05,956
你可以用你的文件名 简单地运行 USDZconvert

220
00:10:06,316 --> 0:10:09,926
现在 我们来看一下生成素材

221
00:10:11,256 --> 0:10:13,216
生成到文件

222
00:10:13,216 --> 0:10:15,416
包含所有的材料和动画

223
00:10:18,936 --> 0:10:21,996
这儿我们也可以看到 

224
00:10:21,996 --> 0:10:23,976
USDZconvert 执行了附加的素材验证

225
00:10:27,566 --> 0:10:29,116
接下来 比如说 

226
00:10:29,116 --> 0:10:31,326
你有某个没有材料的 obj 文件

227
00:10:31,896 --> 0:10:32,976
就像这个四面体模型

228
00:10:36,706 --> 0:10:38,316
你可以用附加参数

229
00:10:38,536 --> 0:10:40,056
简单地添加材料 

230
00:10:40,056 --> 0:10:40,966
比如 常量颜色

231
00:10:45,246 --> 0:10:46,966
这里你可以看到 材料被应用了

232
00:10:51,796 --> 0:10:53,496
要看你模型的高级结构 

233
00:10:53,496 --> 0:10:56,546
你可以使用 USDtree

234
00:10:58,096 --> 0:11:01,276
这里是材料和网格

235
00:10:58,096 --> 0:11:01,276
这里是材料和网格

236
00:11:05,236 --> 0:11:06,836
要看模型的

237
00:11:06,836 --> 0:11:08,186
纯文本文本形式

238
00:11:08,606 --> 0:11:09,666
你可以使用 USDcat

239
00:11:17,356 --> 0:11:18,666
还有另一种通用情况

240
00:11:19,656 --> 0:11:25,476
这儿有个 obj 文件

241
00:11:25,696 --> 0:11:27,976
还有很多材料纹理

242
00:11:34,016 --> 0:11:35,776
把纹理分配给材料很简单

243
00:11:35,856 --> 0:11:37,896
就像分配常量一样

244
00:11:43,756 --> 0:11:47,446
USDZ 文件是一个未压缩的 zip 存档

245
00:11:47,936 --> 0:11:49,396
所以查看其内容的快捷方法是

246
00:11:49,396 --> 0:11:51,196
用 zip info

247
00:11:51,486 --> 0:11:55,916
这里我们可以看到一个 USDZ 存档 

248
00:11:55,976 --> 0:11:59,116
包含 USDZ 文件和以上所有的纹理

249
00:12:03,536 --> 0:12:05,176
这里你可以看到所有的材料纹理 

250
00:12:05,176 --> 0:12:06,586
应用到模型上

251
00:12:07,186 --> 0:12:10,866
所以 总的来说 用 USDZconvert 

252
00:12:10,866 --> 0:12:13,596
将已有素材转换为 USDZ

253
00:12:13,636 --> 0:12:14,776
会很简单

254
00:12:15,606 --> 0:12:17,826
还有一套其他的工具 

255
00:12:17,826 --> 0:12:19,466
它们会帮你检查 

256
00:12:19,466 --> 0:12:21,306
生成素材

257
00:12:22,406 --> 0:12:23,196
又轮到你了 Denis

258
00:12:24,516 --> 0:12:28,196
[掌声]

259
00:12:28,696 --> 0:12:29,976
谢谢你 Chloe

260
00:12:35,636 --> 0:12:39,056
刚才就是转换部分

261
00:12:39,506 --> 0:12:41,046
现在我们来看一下 

262
00:12:41,046 --> 0:12:42,976
如何从头开始创建 USDZ 文件

263
00:12:46,516 --> 0:12:48,616
当然可以用你最爱的创作工具

264
00:12:48,616 --> 0:12:50,646
创建你的素材

265
00:12:50,966 --> 0:12:53,416
它有可能会导出了一个格式   

266
00:12:53,416 --> 0:12:55,536
比如 FBX

267
00:12:55,536 --> 0:12:57,476
你可以接着用

268
00:12:57,476 --> 0:12:59,366
我们刚才看到的 USDZconvert

269
00:12:59,366 --> 0:13:00,983
将其转换为 USDZ 

270
00:12:59,366 --> 0:13:00,983
将其转换为 USDZ 

271
00:13:04,046 --> 0:13:05,936
但是有越来越多的

272
00:13:05,996 --> 0:13:07,406
内容创作 App 

273
00:13:07,546 --> 0:13:09,506
支持直接导出 USD

274
00:13:10,756 --> 0:13:13,946
这使得结合内容创建步骤和 USD 流程

275
00:13:13,946 --> 0:13:15,806
变得更加容易

276
00:13:16,536 --> 0:13:19,536
转换步骤本来很复杂  

277
00:13:19,536 --> 0:13:20,706
因为有一些潜在的翻译过程

278
00:13:20,706 --> 0:13:22,476
但是现在实现起来

279
00:13:22,526 --> 0:13:24,506
变得简单多了

280
00:13:27,026 --> 0:13:29,356
这里有两个内容创作工具 

281
00:13:29,356 --> 0:13:32,626
支持 USD 导出

282
00:13:33,776 --> 0:13:35,116
这个是 Adobe 的 Substance Painter

283
00:13:35,116 --> 0:13:38,076
它是个很好的工具 

284
00:13:38,076 --> 0:13:39,916
可以为你的 3D 对象

285
00:13:39,916 --> 0:13:40,856
创作逼真的材料

286
00:13:41,426 --> 0:13:45,646
它支持 USD 和 USDZ 导出

287
00:13:46,186 --> 0:13:49,836
这个是 Autodesk Maya 

288
00:13:49,836 --> 0:13:52,436
最重要的 3D 模型和动画工具之一

289
00:13:52,986 --> 0:13:57,716
它支持 USD 和 USDZ 输出

290
00:13:57,956 --> 0:14:01,516
只需一个由 Pixar 编写并负责的插件

291
00:13:57,956 --> 0:14:01,516
只需一个由 Pixar 编写并负责的插件

292
00:14:02,126 --> 0:14:05,826
正如我们所见

293
00:14:05,896 --> 0:14:08,496
很多这些 App

294
00:14:08,496 --> 0:14:11,556
甚至支持直接导出 USDZ

295
00:14:11,776 --> 0:14:13,816
进一步简化了 USDZ 创作步骤

296
00:14:14,406 --> 0:14:18,836
因为有 USD 的 Python 绑定  

297
00:14:18,836 --> 0:14:20,786
你也可以创建

298
00:14:20,786 --> 0:14:23,616
自定义 Python 流程

299
00:14:23,686 --> 0:14:25,956
为你的内容定做流程

300
00:14:27,366 --> 0:14:29,996
接下来 我们要让从 SceneKit 

301
00:14:29,996 --> 0:14:32,466
导出 USDZ 变得很简单

302
00:14:33,336 --> 0:14:35,176
你要做的只是 

303
00:14:35,176 --> 0:14:37,466
像以前一样创建或下载 SCNScene 

304
00:14:37,996 --> 0:14:39,216
当你准备好   

305
00:14:39,216 --> 0:14:41,976
导出 USDZ 时

306
00:14:41,976 --> 0:14:45,516
你只需一个 API 调用

307
00:14:45,516 --> 0:14:46,976
写入 并确保文件扩展是 USDZ

308
00:14:51,816 --> 0:14:54,496
实际上 我们也已经将 USDZ 导出

309
00:14:54,496 --> 0:14:56,946
结合到 Xcode 的 

310
00:14:56,946 --> 0:14:57,776
SceneKit Editor 中

311
00:14:58,556 --> 0:15:00,606
所以你可以通过命令直接导出 

312
00:14:58,556 --> 0:15:00,606
所以你可以通过命令直接导出 

313
00:15:00,866 --> 0:15:02,826
也可以通过一个

314
00:15:02,826 --> 0:15:03,846
用户界面来实现

315
00:15:04,626 --> 0:15:07,956
这就是工作流部分

316
00:15:09,486 --> 0:15:13,966
现在我们看一下 USD 的功能

317
00:15:14,666 --> 0:15:16,226
在介绍中 

318
00:15:16,226 --> 0:15:18,446
我们已经提到

319
00:15:18,446 --> 0:15:19,316
有一个很大的功能集

320
00:15:19,786 --> 0:15:21,766
这次讲演时间有限 

321
00:15:21,766 --> 0:15:22,976
甚至都不可能提到所有的功能

322
00:15:26,536 --> 0:15:28,606
但是这里有几个重点概念

323
00:15:28,876 --> 0:15:32,846
比较好理解

324
00:15:32,996 --> 0:15:34,806
所以先讲解这些

325
00:15:40,056 --> 0:15:41,306
我们会介绍四个概念

326
00:15:41,306 --> 0:15:43,636
文件结构 场景图

327
00:15:44,806 --> 0:15:48,976
网格数据 和材料

328
00:15:49,546 --> 0:15:53,506
USD 的一个主要区别特征是  

329
00:15:53,506 --> 0:15:54,726
它的纯文本格式

330
00:15:54,726 --> 0:15:57,676
是可读取 可理解的

331
00:15:59,006 --> 0:16:00,296
所以格式就没有那么神秘 

332
00:15:59,006 --> 0:16:00,296
所以格式就没有那么神秘 

333
00:16:00,296 --> 0:16:02,566
更加透明

334
00:16:03,376 --> 0:16:05,236
发生错误时 你可以更快确定 

335
00:16:05,236 --> 0:16:07,466
哪儿错了 为什么错了

336
00:16:11,936 --> 0:16:13,676
我首先介绍一下文件结构

337
00:16:17,676 --> 0:16:22,556
它是 USDA 文件的一个片段

338
00:16:23,446 --> 0:16:24,996
首先你会注意到 

339
00:16:25,426 --> 0:16:28,376
它包含的这些嵌套容器

340
00:16:29,096 --> 0:16:30,616
在 USD 中 它们被称为 Prim

341
00:16:33,156 --> 0:16:35,586
这些 Prim 包含属性

342
00:16:35,956 --> 0:16:37,516
属性存储着真实数据

343
00:16:38,136 --> 0:16:42,126
这里有一套元数据

344
00:16:42,586 --> 0:16:45,906
关联到到文件级 

345
00:16:45,906 --> 0:16:48,746
Prim 级 或属性级

346
00:16:49,266 --> 0:16:51,526
因为是嵌套结构

347
00:16:52,156 --> 0:16:54,216
所以可以通过对象路径

348
00:16:54,646 --> 0:16:55,596
访问每个对象

349
00:16:56,416 --> 0:16:59,566
在这种情况下 

350
00:16:59,566 --> 0:17:01,606
“cube”这个 Prim 被嵌套在一个简单网格下 

351
00:16:59,566 --> 0:17:01,606
“cube”这个 Prim 被嵌套在一个简单网格下 

352
00:17:01,646 --> 0:17:03,916
所以它的路径变成了 /simpleMesh/cube

353
00:17:06,396 --> 0:17:09,256
你也可以用点标记

354
00:17:09,685 --> 0:17:10,596
来为它附加属性

355
00:17:14,996 --> 0:17:16,376
我们已经看过了基本的文件结构

356
00:17:16,376 --> 0:17:17,915
接下来我们来看一下 

357
00:17:17,915 --> 0:17:20,146
如何使用它来存储场景数据

358
00:17:20,806 --> 0:17:25,175
场景图定义对象层级

359
00:17:26,195 --> 0:17:29,186
改变父类会影响它的子类

360
00:17:29,836 --> 0:17:31,876
在这个例子中 我们有一个立方体 

361
00:17:31,876 --> 0:17:35,096
立方体是球体的父对象

362
00:17:35,206 --> 0:17:38,146
如果你移动立方体 球体也会跟着移动

363
00:17:38,726 --> 0:17:43,866
如果你移动球体 立方体不动

364
00:17:44,476 --> 0:17:47,396
通过 USD 的嵌套 Prim 结构 

365
00:17:47,516 --> 0:17:48,996
场景图变得易于存储 

366
00:17:48,996 --> 0:17:51,886
你可以看到外层父 Prim 

367
00:17:51,936 --> 0:17:54,526
和两个子 Prim 

368
00:17:54,526 --> 0:17:56,166
立方体和球体

369
00:17:56,736 --> 0:18:00,496
你也可以看到 

370
00:17:56,736 --> 0:18:00,496
你也可以看到 

371
00:18:00,496 --> 0:18:02,726
这里有其他的 Prim 

372
00:18:02,726 --> 0:18:04,706
比如 材料 或者

373
00:18:05,016 --> 0:18:05,976
并不属于场景图的动画

374
00:18:09,516 --> 0:18:11,026
这就是场景图部分

375
00:18:11,926 --> 0:18:16,496
现在我们来看一下网格数据

376
00:18:16,496 --> 0:18:19,216
网格数据大致分为两类

377
00:18:19,826 --> 0:18:21,206
第一类是网格属性 比如 

378
00:18:21,206 --> 0:18:23,756
位置 法线 和纹理坐标

379
00:18:25,366 --> 0:18:28,046
第二类是网格连接 比如

380
00:18:28,416 --> 0:18:30,836
每面的顶点数

381
00:18:31,186 --> 0:18:36,866
或者哪些顶点索引属于这面

382
00:18:37,076 --> 0:18:38,616
来看一个

383
00:18:38,616 --> 0:18:40,076
四面体的简单例子

384
00:18:40,736 --> 0:18:42,556
我们以一组点开始

385
00:18:42,756 --> 0:18:44,116
四面体的四个点

386
00:18:44,816 --> 0:18:48,936
每个面包含三个顶点 

387
00:18:48,936 --> 0:18:51,076
所以有四个三角

388
00:18:51,636 --> 0:18:54,666
每个面我们也存储了

389
00:18:54,666 --> 0:18:56,416
顶点索引

390
00:18:56,896 --> 0:19:01,236
接下来存储法线

391
00:18:56,896 --> 0:19:01,236
接下来存储法线

392
00:19:01,326 --> 0:19:02,486
在这种情况下 我们选择

393
00:19:02,486 --> 0:19:03,756
存储每个面的法线

394
00:19:04,506 --> 0:19:07,186
所以是四条法线

395
00:19:08,066 --> 0:19:11,006
每个面的属性 用 USD 的语言来说 

396
00:19:11,006 --> 0:19:12,666
就是统一

397
00:19:12,666 --> 0:19:15,336
所以元数据设置为“uniform”

398
00:19:17,796 --> 0:19:19,876
存储文本坐标也是这样的

399
00:19:20,546 --> 0:19:21,856
它们被分为 

400
00:19:21,856 --> 0:19:25,286
索引 网格属性 

401
00:19:25,286 --> 0:19:26,716
索引是每面的 每个顶点的 

402
00:19:27,106 --> 0:19:30,326
用 USD 的语言来说是

403
00:19:30,326 --> 0:19:36,466
“faceVarying”

404
00:19:36,626 --> 0:19:38,146
最后我们要确保这个四面体

405
00:19:38,146 --> 0:19:40,306
是一个多边形

406
00:19:40,306 --> 0:19:42,776
而不是一个细分曲面

407
00:19:43,276 --> 0:19:46,496
我们一会会回到这一点上

408
00:19:46,726 --> 0:19:47,616
现在我们已经看过了场景图

409
00:19:47,616 --> 0:19:49,026
网格数据

410
00:19:49,026 --> 0:19:50,966
接下来看一下材料是如何被定义的

411
00:19:54,966 --> 0:19:57,346
USD 的材料定义很丰富

412
00:19:57,766 --> 0:20:00,886
用于输出电影画质的素材

413
00:19:57,766 --> 0:20:00,886
用于输出电影画质的素材

414
00:20:01,586 --> 0:20:02,606
对于真实的实时渲染

415
00:20:02,606 --> 0:20:04,236
有一个更小的子集 

416
00:20:04,236 --> 0:20:06,376
叫作 UsdPreviewSurface

417
00:20:07,156 --> 0:20:08,626
这是个基于实物材料的描述

418
00:20:08,626 --> 0:20:10,706
支持两个数据流

419
00:20:10,706 --> 0:20:12,646
金属粗糙度

420
00:20:13,176 --> 0:20:14,246
和镜面粗糙度

421
00:20:14,246 --> 0:20:15,736
这里我们会集中介绍

422
00:20:15,736 --> 0:20:16,696
金属粗糙度

423
00:20:17,306 --> 0:20:20,406
举个例子

424
00:20:20,406 --> 0:20:21,546
我们刚才在 Chloe 的演示中

425
00:20:21,546 --> 0:20:24,906
看到的留声机

426
00:20:25,006 --> 0:20:26,576
我们先指定常量白色

427
00:20:27,106 --> 0:20:32,866
接着 我们设置法线 

428
00:20:32,866 --> 0:20:36,626
最后遮蔽贴图 展现细节

429
00:20:40,916 --> 0:20:43,386
接下来 

430
00:20:43,956 --> 0:20:45,606
我们提高它的金属度

431
00:20:45,816 --> 0:20:46,446
它就会变得亮闪闪

432
00:20:47,776 --> 0:20:51,576
我们再加一个粗糙度贴图 

433
00:20:51,576 --> 0:20:57,476
让对象的一些部分变暗

434
00:20:57,626 --> 0:21:00,966
最后我们设置漫射色

435
00:20:57,626 --> 0:21:00,966
最后我们设置漫射色

436
00:21:00,966 --> 0:21:04,536
和金属纹理

437
00:21:04,866 --> 0:21:07,316
通过这五种纹理 

438
00:21:07,316 --> 0:21:09,006
这个网格最终变得

439
00:21:09,006 --> 0:21:10,496
美观 逼真

440
00:21:11,146 --> 0:21:13,886
我们来看一下 在 USD 中 

441
00:21:14,336 --> 0:21:16,596
它是如何被描述的

442
00:21:16,596 --> 0:21:18,736
USD 用的是着色节点图  

443
00:21:19,076 --> 0:21:21,146
有分离的着色节点

444
00:21:21,386 --> 0:21:26,016
彼此相关

445
00:21:26,216 --> 0:21:28,536
UsdPreviewSurface 有一个非常简单的

446
00:21:28,586 --> 0:21:30,256
着色节点图结构

447
00:21:30,256 --> 0:21:32,936
只有 4 种节点类型

448
00:21:34,246 --> 0:21:35,626
主着色节点

449
00:21:35,626 --> 0:21:37,416
定义所有的 PBR 属性

450
00:21:37,416 --> 0:21:38,606
刚才我们已经看到了其中五个

451
00:21:39,936 --> 0:21:41,526
纹理采样器告诉你

452
00:21:41,526 --> 0:21:44,996
要用哪个纹理  

453
00:21:44,996 --> 0:21:47,256
网格属性读取器

454
00:21:47,516 --> 0:21:51,036
负责纹理坐标之类的属性

455
00:21:51,766 --> 0:21:53,686
还有 UV 转换节点

456
00:21:53,686 --> 0:21:57,956
让你可以改变或者旋转纹理坐标

457
00:21:58,456 --> 0:22:01,766
我们来看一个最简单的例子

458
00:21:58,456 --> 0:22:01,766
我们来看一个最简单的例子

459
00:22:01,766 --> 0:22:03,866
几个常量的例子

460
00:22:04,226 --> 0:22:05,916
网格属性的常量

461
00:22:09,156 --> 0:22:12,736
这里 你可以看到  

462
00:22:12,736 --> 0:22:15,096
主着色节点的表面输出

463
00:22:15,096 --> 0:22:17,146
和材料表面输出是相连的

464
00:22:18,376 --> 0:22:20,306
在 USD 中看起来是这样的

465
00:22:20,306 --> 0:22:22,846
我们有外嵌套材料 Prim

466
00:22:23,396 --> 0:22:26,886
里面包含主着色节点 Prim 

467
00:22:26,886 --> 0:22:31,206
着色节点输出和

468
00:22:31,206 --> 0:22:33,416
材料的输出是相连的

469
00:22:33,416 --> 0:22:37,296
用的是我们已经看过的对象路径

470
00:22:38,776 --> 0:22:40,256
接下来 我们看一个

471
00:22:40,256 --> 0:22:41,686
稍复杂一点的纹理的例子   

472
00:22:42,096 --> 0:22:44,766
这个纹理被指定给

473
00:22:44,766 --> 0:22:46,006
diffuseColor 通道

474
00:22:46,516 --> 0:22:50,426
我们需要一个网格属性读取器 

475
00:22:50,466 --> 0:22:51,226
来处理纹理坐标

476
00:22:51,226 --> 0:22:52,896
也就是前面这个红色节点

477
00:22:52,896 --> 0:22:57,276
我们想要应用的纹理样本

478
00:22:57,276 --> 0:23:00,166
这是个橘色的  

479
00:22:57,276 --> 0:23:00,166
这是个橘色的  

480
00:23:01,046 --> 0:23:03,636
包含 diffuseColor 属性的

481
00:23:03,676 --> 0:23:05,106
主 PBR 着色节点

482
00:23:09,176 --> 0:23:11,126
在 USD 中看起来是这样的

483
00:23:11,126 --> 0:23:13,936
我们再次有了外层的材料 Prim 

484
00:23:13,936 --> 0:23:18,496
和三个着色节点

485
00:23:19,016 --> 0:23:22,766
输出和下一个着色节点的

486
00:23:22,766 --> 0:23:24,296
一些输入相连

487
00:23:24,856 --> 0:23:31,406
好 这就是 USD 的重点部分

488
00:23:31,456 --> 0:23:33,416
我们刚才介绍的这些概念

489
00:23:33,416 --> 0:23:36,476
都在“samples”文件夹里

490
00:23:36,476 --> 0:23:38,376
我们用很少的样本脚本  这样你就可以

491
00:23:38,376 --> 0:23:40,416
创建了场景图 网格数据 

492
00:23:40,416 --> 0:23:43,926
材料 和网格组

493
00:23:43,956 --> 0:23:45,556
所以你可以分配

494
00:23:45,556 --> 0:23:46,726
多个材料到单一网格

495
00:23:46,726 --> 0:23:49,336
甚至是动画

496
00:23:49,376 --> 0:23:51,176
用于变换动画

497
00:23:51,176 --> 0:23:52,866
蒙皮和骨骼动画的动画

498
00:23:57,826 --> 0:23:59,376
我们已经介绍了 USD 的基本结构

499
00:23:59,376 --> 0:24:01,046
我们现在来看一下

500
00:23:59,376 --> 0:24:01,046
我们现在来看一下

501
00:24:01,046 --> 0:24:05,116
它区别于其他格式的主要优点

502
00:24:06,976 --> 0:24:08,726
可扩展性 复杂场景 

503
00:24:09,246 --> 0:24:11,426
静物构图 多人合作

504
00:24:17,616 --> 0:24:19,796
对于可扩展性 

505
00:24:19,796 --> 0:24:21,676
我们会介绍细分曲面

506
00:24:23,216 --> 0:24:25,046
合作方面

507
00:24:25,046 --> 0:24:26,546
我们会介绍创作引擎

508
00:24:27,126 --> 0:24:30,136
我们从细分曲面开始

509
00:24:32,146 --> 0:24:33,676
细分曲面在表现曲面这方面

510
00:24:33,676 --> 0:24:36,466
并不高效

511
00:24:37,506 --> 0:24:40,026
相反 

512
00:24:40,026 --> 0:24:41,416
多边形表面描述

513
00:24:41,416 --> 0:24:44,806
才趋近真正的曲面

514
00:24:44,996 --> 0:24:47,396
这个趋近基于一些假设  

515
00:24:47,396 --> 0:24:49,606
比如 什么算是比较趋近

516
00:24:49,606 --> 0:24:51,566
你想要成品和实物

517
00:24:51,566 --> 0:24:55,186
有多么相似

518
00:24:55,856 --> 0:24:58,336
与此相反

519
00:24:58,336 --> 0:25:00,296
细分曲面描述真实的表面

520
00:24:58,336 --> 0:25:00,296
细分曲面描述真实的表面

521
00:25:00,756 --> 0:25:04,306
所以你可以做一个动态细分  

522
00:25:04,306 --> 0:25:06,636
比如根据到相机的距离 

523
00:25:06,966 --> 0:25:08,856
用小的多边形

524
00:25:09,516 --> 0:25:12,836
找到一个比较趋近真实物体的形状

525
00:25:14,996 --> 0:25:16,666
细分曲面

526
00:25:16,666 --> 0:25:18,466
同样适合动画内容

527
00:25:19,066 --> 0:25:22,486
我们在过去的年里 

528
00:25:22,486 --> 0:25:24,596
一直使用细分曲面

529
00:25:24,596 --> 0:25:28,076
比如 用它做 

530
00:25:28,076 --> 0:25:30,316
动话表情或拟我表情

531
00:25:30,956 --> 0:25:36,276
在左手边你可以看到 

532
00:25:36,276 --> 0:25:38,016
用细分控制网格做出的

533
00:25:38,016 --> 0:25:40,106
多边形表面是什么样子的

534
00:25:40,836 --> 0:25:41,956
可以看出来 线条很美 

535
00:25:41,956 --> 0:25:44,756
从内存占用角度来说

536
00:25:44,756 --> 0:25:46,266
这个表现堪称出色

537
00:25:47,356 --> 0:25:49,356
右手边是

538
00:25:49,416 --> 0:25:51,026
最后的细分表面

539
00:25:51,026 --> 0:25:54,316
可以看到很漂亮的细节

540
00:25:56,036 --> 0:25:57,486
细分曲面的

541
00:25:57,486 --> 0:26:01,586
工业标准是 OpenSubdiv 

542
00:25:57,486 --> 0:26:01,586
工业标准是 OpenSubdiv 

543
00:26:01,586 --> 0:26:02,506
也是 Pixar 开发的

544
00:26:03,396 --> 0:26:04,816
为提供最适合我们平台的

545
00:26:04,816 --> 0:26:07,106
金属着色器 

546
00:26:07,106 --> 0:26:11,646
我们和一直和 Pixar 密切合作

547
00:26:11,996 --> 0:26:17,116
所以 GPU 发展得非常快

548
00:26:17,216 --> 0:26:19,846
OpenSubdiv 是 Scenekit 里

549
00:26:19,846 --> 0:26:21,866
细分曲面的基础

550
00:26:22,136 --> 0:26:29,086
当然  USD 能很好地支持细分曲面

551
00:26:29,456 --> 0:26:31,126
也适用于 OpenSubdiv

552
00:26:32,156 --> 0:26:35,686
实际上  USD 既可以描述多边形网格数据

553
00:26:35,686 --> 0:26:38,066
也可以描述细分曲面数据

554
00:26:39,096 --> 0:26:41,786
它还可以特定于细分

555
00:26:41,786 --> 0:26:43,646
支持细分特定属性

556
00:26:43,936 --> 0:26:46,686
比如折痕或角

557
00:26:50,146 --> 0:26:51,726
细分曲面这部分就结束了

558
00:26:51,726 --> 0:26:53,726
它可以出色有效地

559
00:26:53,766 --> 0:26:57,176
存储高质量表面

560
00:26:57,416 --> 0:27:01,726
现在我们来看一下创作引擎

561
00:26:57,416 --> 0:27:01,726
现在我们来看一下创作引擎

562
00:27:06,096 --> 0:27:07,926
创作引擎一个

563
00:27:08,096 --> 0:27:10,206
非常有用的创作工具

564
00:27:10,206 --> 0:27:13,006
可以让美术师们有效合作

565
00:27:13,786 --> 0:27:15,736
我们来看一个

566
00:27:15,736 --> 0:27:18,046
引用的例子

567
00:27:18,536 --> 0:27:21,826
我们再次拿出这个场景图

568
00:27:22,306 --> 0:27:26,526
父节点下有两个子对象

569
00:27:27,246 --> 0:27:28,856
只要那两个对象是不同的 

570
00:27:28,856 --> 0:27:30,676
这就是一个

571
00:27:30,756 --> 0:27:31,866
有效的展示

572
00:27:32,406 --> 0:27:36,836
但是如果你的场景图中 

573
00:27:36,836 --> 0:27:39,416
有一个对象的多个副本

574
00:27:39,416 --> 0:27:40,166
怎么办

575
00:27:41,066 --> 0:27:43,516
那么这个嵌套场景图结构 

576
00:27:43,516 --> 0:27:45,236
会变得没有效率

577
00:27:45,236 --> 0:27:47,776
因为它会存储重复数据

578
00:27:52,916 --> 0:27:56,066
大多数文件格式  

579
00:27:56,126 --> 0:27:58,446
都会分离重复数据

580
00:27:58,446 --> 0:28:01,746
而存储引用

581
00:27:58,446 --> 0:28:01,746
而存储引用

582
00:28:01,746 --> 0:28:02,696
并且也使用支持集

583
00:28:03,686 --> 0:28:04,986
但是不止如此

584
00:28:06,196 --> 0:28:10,166
它还在这个

585
00:28:10,516 --> 0:28:12,906
嵌套场景图 Prim 结构中

586
00:28:12,906 --> 0:28:15,586
创建虚拟对象

587
00:28:15,616 --> 0:28:19,676
每个虚拟对象

588
00:28:19,676 --> 0:28:23,276
都有自己独立的对象路径

589
00:28:23,276 --> 0:28:25,916
你就可以进入并重写它的内容

590
00:28:25,916 --> 0:28:29,226
它的一些属性

591
00:28:29,516 --> 0:28:31,576
比如 在这种情况下  

592
00:28:32,356 --> 0:28:34,706
我重写第二个球体的

593
00:28:35,326 --> 0:28:38,786
材料颜色为黄色

594
00:28:38,786 --> 0:28:40,616
又不会改变第一个球体的材料

595
00:28:44,496 --> 0:28:46,626
你还可以把整个子树 

596
00:28:46,626 --> 0:28:49,256
从你的场景图中去除

597
00:28:49,826 --> 0:28:51,886
USD 将所有这些编辑 

598
00:28:51,886 --> 0:28:56,246
存储为对原始数据的有效重写 

599
00:28:56,886 --> 0:29:00,126
现在我们看一下 

600
00:28:56,886 --> 0:29:00,126
现在我们看一下 

601
00:29:00,126 --> 0:29:01,476
这对美术师工作流有什么影响

602
00:29:01,956 --> 0:29:04,976
这是 macOS Catalina 里的 访达

603
00:29:06,156 --> 0:29:09,676
你可以看到这里

604
00:29:09,676 --> 0:29:13,696
macOS 可以快速查看渲染场景的 USD 文件

605
00:29:13,986 --> 0:29:16,816
现在假设我是一个布局美术师

606
00:29:16,816 --> 0:29:19,866
将所有的这些对象

607
00:29:19,866 --> 0:29:22,446
布局到场景中

608
00:29:22,916 --> 0:29:26,756
同时还有一个美术师

609
00:29:26,756 --> 0:29:28,346
负责渲染

610
00:29:28,346 --> 0:29:30,136
其中一些对象

611
00:29:30,176 --> 0:29:32,036
比如 这个椅子

612
00:29:32,566 --> 0:29:35,206
这个美术师用这个椅子

613
00:29:35,206 --> 0:29:39,096
替换了之前的那个

614
00:29:40,506 --> 0:29:43,596
现在 如果你回到布局文件  

615
00:29:43,596 --> 0:29:46,776
你可以看到

616
00:29:46,776 --> 0:29:49,206
这些对象已经自动被替换

617
00:29:49,206 --> 0:29:51,026
文件没有改变 

618
00:29:51,026 --> 0:29:51,816
只是带入了引用 

619
00:29:52,256 --> 0:29:55,626
实际上 我可以自己编辑

620
00:29:56,186 --> 0:30:00,626
比如 在不影响 

621
00:29:56,186 --> 0:30:00,626
比如 在不影响 

622
00:30:00,906 --> 0:30:02,456
其他美术师的文件的同时

623
00:30:02,456 --> 0:30:03,626
改变颜色

624
00:30:04,226 --> 0:30:07,656
这就分离了

625
00:30:07,656 --> 0:30:08,846
我们的工作流

626
00:30:12,636 --> 0:30:15,046
这就是对 USD 支持的  

627
00:30:15,366 --> 0:30:17,916
所有新美术师工作流的

628
00:30:17,916 --> 0:30:19,616
简单讲解

629
00:30:23,616 --> 0:30:26,336
在“samples”文件夹里  

630
00:30:26,336 --> 0:30:28,346
我们还有两个例子

631
00:30:28,346 --> 0:30:31,096
比这些 USD 功能更高级

632
00:30:32,396 --> 0:30:34,036
折痕的细分曲面

633
00:30:34,096 --> 0:30:37,446
和重写引用

634
00:30:46,046 --> 0:30:48,166
总结一下 我们已经

635
00:30:48,166 --> 0:30:49,536
大致介绍了场景描述

636
00:30:49,746 --> 0:30:51,496
它是一个文件类型 

637
00:30:51,496 --> 0:30:54,716
一个有用的库 用来编辑

638
00:30:54,716 --> 0:30:56,966
所有展现 3D 内容的方式

639
00:30:58,516 --> 0:31:00,256
我们介绍了用来创建素材

640
00:30:58,516 --> 0:31:00,256
我们介绍了用来创建素材

641
00:31:00,256 --> 0:31:03,236
和将其转换为 USDZ 的工作流

642
00:31:03,236 --> 0:31:06,006
我们介绍了一个新的工具 usdzconvert 

643
00:31:06,006 --> 0:31:08,246
它可以将 .obj .gltf .fbx 和其他文件格式

644
00:31:08,246 --> 0:31:11,546
转换为 USDZ

645
00:31:11,546 --> 0:31:14,936
你可以从我们的网站  

646
00:31:14,936 --> 0:31:16,966
下载这些 Python USDX 工具

647
00:31:16,966 --> 0:31:19,156
包括 usdzconvert

648
00:31:19,156 --> 0:31:21,136
一个预编译的 USD 库

649
00:31:21,266 --> 0:31:21,976
和一些样本脚本

650
00:31:27,846 --> 0:31:29,626
如果你想要了解更多信息 

651
00:31:29,626 --> 0:31:31,486
请查看讲演页面 

652
00:31:32,356 --> 0:31:34,106
明天下午 3 点我们还会有一个

653
00:31:34,106 --> 0:31:37,496
USD 和 USDZ 的实验室 

654
00:31:37,496 --> 0:31:39,156
你还可以看一下

655
00:31:39,156 --> 0:31:43,976
周五上午 9 点的《Advances in AR Quick Look》

656
00:31:44,176 --> 0:31:50,500
谢谢 [掌声]
