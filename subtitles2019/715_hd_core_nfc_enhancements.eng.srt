1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:10,516 --> 0:00:14,756
[ Cheering and Applause ]

3
00:00:15,256 --> 0:00:16,806
&gt;&gt; Hi. Welcome to Core NFC

4
00:00:16,806 --> 0:00:17,446
Enhancements.

5
00:00:17,926 --> 0:00:19,526
I hope everyone's had a great

6
00:00:19,526 --> 0:00:20,586
WWDC this year.

7
00:00:20,586 --> 0:00:21,736
And I hope everyone had a great

8
00:00:21,736 --> 0:00:22,856
time at the bash yesterday.

9
00:00:23,696 --> 0:00:24,566
My name is Gordon.

10
00:00:24,566 --> 0:00:25,876
I'm a member of the NFC Software

11
00:00:25,876 --> 0:00:26,626
team here at Apple.

12
00:00:26,716 --> 0:00:27,796
A little bit later, we'll bring

13
00:00:27,796 --> 0:00:28,786
up another team member,

14
00:00:28,786 --> 0:00:29,236
Lawrence.

15
00:00:29,876 --> 0:00:30,976
But let's talk NFC.

16
00:00:34,146 --> 0:00:35,966
So two years ago, we introduced

17
00:00:35,966 --> 0:00:37,666
the Core NFC framework to enable

18
00:00:37,756 --> 0:00:39,256
NDEF Tag reading within your

19
00:00:39,256 --> 0:00:40,046
applications.

20
00:00:40,086 --> 0:00:41,986
And last year, we introduced

21
00:00:42,426 --> 0:00:43,796
background tag scanning to

22
00:00:43,796 --> 0:00:45,276
support the automatic discovery

23
00:00:45,276 --> 0:00:46,726
of NDEF Tags and application

24
00:00:46,726 --> 0:00:47,046
launching.

25
00:00:48,036 --> 0:00:49,356
Now, however, since -- ever

26
00:00:49,356 --> 0:00:50,636
since we've launched the Core

27
00:00:50,636 --> 0:00:52,266
NFC Framework, developers have

28
00:00:52,266 --> 0:00:53,636
been asking for one specific

29
00:00:53,636 --> 0:00:53,726
thing.

30
00:00:53,726 --> 0:00:55,576
And here at Apple, we've

31
00:00:55,576 --> 0:00:56,636
listened to your requests.

32
00:00:56,636 --> 0:00:58,536
And this year, we are super

33
00:00:58,536 --> 0:01:00,046
excited to announce support for

34
00:00:58,536 --> 0:01:00,046
excited to announce support for

35
00:01:00,046 --> 0:01:02,096
both NDEF Tag writing and native

36
00:01:02,176 --> 0:01:02,846
tag access.

37
00:01:03,016 --> 0:01:04,105
[ Cheering and Applause ]

38
00:01:04,105 --> 0:01:04,936
So yep, thank you.

39
00:01:04,936 --> 0:01:05,016
[Chuckles]

40
00:01:05,516 --> 0:01:07,606
[ Applause ]

41
00:01:08,106 --> 0:01:08,806
So not only will your

42
00:01:08,806 --> 0:01:10,096
applications be able to read and

43
00:01:10,096 --> 0:01:11,886
write NDEF-formatted tags, but

44
00:01:11,886 --> 0:01:13,116
you'll be able to interact with

45
00:01:13,176 --> 0:01:14,286
tags using their native

46
00:01:14,386 --> 0:01:14,906
protocols.

47
00:01:15,196 --> 0:01:17,076
And this has a huge impact on

48
00:01:17,076 --> 0:01:18,196
the kinds of things you can do

49
00:01:18,196 --> 0:01:19,176
with NFC within your

50
00:01:19,176 --> 0:01:19,776
applications.

51
00:01:20,826 --> 0:01:21,846
For example, you can read

52
00:01:22,046 --> 0:01:23,956
passports, contact with smart

53
00:01:23,956 --> 0:01:25,706
cards, and interact with

54
00:01:25,706 --> 0:01:26,666
NFC-enabled hardware.

55
00:01:26,836 --> 0:01:28,326
And all this is available on

56
00:01:28,326 --> 0:01:28,976
iPhone 7 and later phones.

57
00:01:32,116 --> 0:01:33,736
So after we review the API

58
00:01:33,736 --> 0:01:34,956
changes, we'll take a look at

59
00:01:34,956 --> 0:01:36,366
how to write an NDEF tag within

60
00:01:36,366 --> 0:01:36,976
your applications.

61
00:01:39,376 --> 0:01:40,586
Then we'll dive into using

62
00:01:40,586 --> 0:01:40,976
native tag access.

63
00:01:44,056 --> 0:01:45,166
And finally, end up with a demo

64
00:01:45,256 --> 0:01:46,656
showing all of this in action.

65
00:01:49,376 --> 0:01:50,546
So let's take a look at the new

66
00:01:50,546 --> 0:01:50,976
API changes.

67
00:01:54,176 --> 0:01:56,496
As a quick review, the general

68
00:01:56,496 --> 0:01:57,786
structure of the Core NFC

69
00:01:57,786 --> 0:01:59,306
Framework remains the same as it

70
00:01:59,306 --> 0:01:59,846
does today.

71
00:01:59,846 --> 0:02:01,586
Your applications will retrieve

72
00:01:59,846 --> 0:02:01,586
Your applications will retrieve

73
00:02:01,586 --> 0:02:02,916
a reader session object from the

74
00:02:02,966 --> 0:02:03,316
Framework.

75
00:02:03,316 --> 0:02:05,096
And when that session becomes

76
00:02:05,096 --> 0:02:06,716
active, you're free to go ahead

77
00:02:06,716 --> 0:02:07,976
and perform NFC operations.

78
00:02:11,326 --> 0:02:12,456
The tag-reading action sheet

79
00:02:12,456 --> 0:02:13,806
will still be shown on-screen

80
00:02:13,806 --> 0:02:14,826
anytime a reader session is

81
00:02:14,826 --> 0:02:14,976
active.

82
00:02:18,346 --> 0:02:19,446
And the new tag writing and

83
00:02:19,446 --> 0:02:20,786
native tag access features are

84
00:02:20,786 --> 0:02:22,206
available to your applications.

85
00:02:22,786 --> 0:02:23,866
However, the background tag

86
00:02:23,926 --> 0:02:25,566
scanning feature still requires

87
00:02:25,676 --> 0:02:26,676
NDEF formatted tags and is

88
00:02:26,676 --> 0:02:26,976
read-only.

89
00:02:31,056 --> 0:02:32,706
Also, the existing 60-second

90
00:02:32,706 --> 0:02:34,446
maximum scan time still exists

91
00:02:34,446 --> 0:02:34,976
for each reader session.

92
00:02:38,046 --> 0:02:38,706
So what is new?

93
00:02:39,656 --> 0:02:40,866
So this year, there's a new NFC

94
00:02:40,916 --> 0:02:42,726
tag-reader session which will

95
00:02:42,726 --> 0:02:44,336
allow your applications to scan

96
00:02:44,386 --> 0:02:46,246
for and connect to tags based on

97
00:02:46,246 --> 0:02:47,486
their underlying technologies.

98
00:02:47,486 --> 0:02:50,406
It will also allow you to stop

99
00:02:50,406 --> 0:02:51,946
and restart the polling cycle to

100
00:02:51,946 --> 0:02:53,146
discover new tags or to

101
00:02:53,146 --> 0:02:53,976
reconnect if needed.

102
00:02:57,416 --> 0:02:59,896
Also, the NFCNDEFReaderSession

103
00:02:59,896 --> 0:03:01,386
has been modified to also

104
00:02:59,896 --> 0:03:01,386
has been modified to also

105
00:03:01,386 --> 0:03:02,216
support tag writing.

106
00:03:03,086 --> 0:03:04,426
Now, both of these sessions will

107
00:03:04,426 --> 0:03:06,416
provide your applications with

108
00:03:06,516 --> 0:03:08,596
NFC tag objects, allowing you to

109
00:03:08,596 --> 0:03:10,256
use a new tag-based interface

110
00:03:10,256 --> 0:03:10,976
when interacting with tags.

111
00:03:14,196 --> 0:03:15,466
So here's a quick look at the

112
00:03:15,466 --> 0:03:16,866
new tag protocols in Core NFC.

113
00:03:17,446 --> 0:03:18,616
As you can see, there are

114
00:03:18,616 --> 0:03:19,746
protocols for all the major

115
00:03:19,746 --> 0:03:20,156
types.

116
00:03:20,836 --> 0:03:26,136
NDEF, ISO7816, MIFARE, ISO15693,

117
00:03:26,136 --> 0:03:26,566
and FeliCa.

118
00:03:26,566 --> 0:03:28,386
Now, if you're not familiar with

119
00:03:28,386 --> 0:03:29,346
all the various NFC

120
00:03:29,346 --> 0:03:31,026
technologies, I would suggest

121
00:03:31,026 --> 0:03:31,966
focusing first on NDEF.

122
00:03:36,056 --> 0:03:36,886
So let's go over the basic steps

123
00:03:36,886 --> 0:03:38,016
of how to use these new features

124
00:03:38,016 --> 0:03:38,436
in Core NFC.

125
00:03:39,776 --> 0:03:40,786
First, you'll need to enable the

126
00:03:40,786 --> 0:03:42,216
entitlement in Xcode, just as

127
00:03:42,216 --> 0:03:42,956
you do today.

128
00:03:45,106 --> 0:03:46,456
So here's an example of an

129
00:03:46,456 --> 0:03:47,776
application enabling the NFC

130
00:03:47,806 --> 0:03:48,636
capabilities.

131
00:03:48,946 --> 0:03:50,176
There are no special permissions

132
00:03:50,176 --> 0:03:51,136
required to do this.

133
00:03:51,136 --> 0:03:54,356
And as you can see here, there

134
00:03:54,356 --> 0:03:55,706
are two different capabilities,

135
00:03:55,876 --> 0:03:57,456
one for NDEF, and one for native

136
00:03:57,456 --> 0:03:57,976
tag access.

137
00:04:02,046 --> 0:04:04,046
So next, you'll need to decide

138
00:04:04,166 --> 0:04:05,356
what your application requires,

139
00:04:05,546 --> 0:04:07,066
NDEF or native access, and use

140
00:04:07,066 --> 0:04:07,976
the appropriate reader session.

141
00:04:10,296 --> 0:04:11,586
You'll need to implement the new

142
00:04:11,586 --> 0:04:13,036
protocol delegate callbacks to

143
00:04:13,036 --> 0:04:13,966
receive the new tag objects.

144
00:04:17,266 --> 0:04:18,305
Once you have the tag object,

145
00:04:18,305 --> 0:04:19,375
you use the reader session to go

146
00:04:19,375 --> 0:04:19,976
ahead and connect to the tag.

147
00:04:23,106 --> 0:04:24,556
At that point, you're free to go

148
00:04:24,556 --> 0:04:25,606
ahead and perform all your

149
00:04:25,606 --> 0:04:26,726
interactions using the tag

150
00:04:26,726 --> 0:04:26,976
object.

151
00:04:30,106 --> 0:04:31,976
And finally, when you're done,

152
00:04:32,466 --> 0:04:33,726
invalidate the session and

153
00:04:33,726 --> 0:04:34,976
release your tag.

154
00:04:38,046 --> 0:04:38,316
All right.

155
00:04:38,316 --> 0:04:39,706
So as I mentioned, if you're new

156
00:04:40,026 --> 0:04:42,006
to NFC, start first with the NFC

157
00:04:42,096 --> 0:04:44,066
Data Exchange Format, or NDEF.

158
00:04:44,586 --> 0:04:46,356
It is the easiest way to add NFC

159
00:04:46,386 --> 0:04:47,296
capabilities to your

160
00:04:47,296 --> 0:04:47,966
applications.

161
00:04:48,896 --> 0:04:50,056
The new tag running support

162
00:04:50,056 --> 0:04:51,496
allows for quick implementation

163
00:04:51,496 --> 0:04:52,896
and prototyping using any --

164
00:04:52,986 --> 0:04:55,006
NDEF-formatted tag regardless of

165
00:04:55,006 --> 0:04:55,376
its type.

166
00:04:55,376 --> 0:04:58,166
As an example, an NDEF tag can

167
00:04:58,166 --> 0:04:59,536
be used in the same manner as a

168
00:04:59,536 --> 0:05:01,346
QR code and can easily be

169
00:04:59,536 --> 0:05:01,346
QR code and can easily be

170
00:05:01,346 --> 0:05:02,686
integrated into many existing

171
00:05:02,686 --> 0:05:03,256
use cases.

172
00:05:04,416 --> 0:05:05,686
To extend that even further,

173
00:05:06,066 --> 0:05:07,196
using the new tag-writing

174
00:05:07,326 --> 0:05:09,246
support in NFC, you can create

175
00:05:09,246 --> 0:05:11,206
NFC tags that are compatible

176
00:05:11,206 --> 0:05:12,396
with background tag scanning

177
00:05:12,396 --> 0:05:13,386
directly from iOS.

178
00:05:13,786 --> 0:05:14,946
So let's take a look.

179
00:05:15,016 --> 0:05:16,146
[ Applause ]

180
00:05:16,146 --> 0:05:16,796
Yeah. Thank you.

181
00:05:17,241 --> 0:05:19,241
[ Applause ]

182
00:05:19,466 --> 0:05:20,676
Let's take a closer look at just

183
00:05:20,676 --> 0:05:21,776
how simple it is to write an

184
00:05:21,816 --> 0:05:22,606
NDEF tag within your

185
00:05:22,606 --> 0:05:23,146
application.

186
00:05:24,596 --> 0:05:25,946
So as I noted, you'll need to

187
00:05:25,946 --> 0:05:27,576
use the NFCNDEFReaderSession for

188
00:05:27,576 --> 0:05:27,776
this.

189
00:05:28,446 --> 0:05:29,456
And you'll need to implement the

190
00:05:29,456 --> 0:05:31,196
new didDetect tags callback

191
00:05:31,196 --> 0:05:32,846
method to receive the NDEF tag

192
00:05:32,846 --> 0:05:33,326
objects.

193
00:05:33,676 --> 0:05:35,486
This will allow your application

194
00:05:35,486 --> 0:05:36,956
to do various things, such as

195
00:05:36,986 --> 0:05:38,066
query the NDEF-related

196
00:05:38,066 --> 0:05:39,206
information about the tag,

197
00:05:39,826 --> 0:05:41,506
including its maximum capacity,

198
00:05:42,466 --> 0:05:43,596
and determine whether the tag is

199
00:05:43,596 --> 0:05:44,206
writeable or not.

200
00:05:45,596 --> 0:05:46,636
You'll be able to read the NDEF

201
00:05:46,636 --> 0:05:48,746
message, write the NDEF message.

202
00:05:49,016 --> 0:05:50,696
And if the tag supports it, even

203
00:05:50,696 --> 0:05:51,776
lock the tag so that it can no

204
00:05:51,776 --> 0:05:52,766
longer be rewritten.

205
00:05:53,926 --> 0:05:54,946
So let's take a look at some

206
00:05:55,616 --> 0:05:55,726
code.

207
00:05:56,816 --> 0:05:58,936
To start writing an NDEF tag, we

208
00:05:58,936 --> 0:05:59,656
instantiate our

209
00:05:59,936 --> 0:06:01,036
NFCNDEFReaderSession.

210
00:05:59,936 --> 0:06:01,036
NFCNDEFReaderSession.

211
00:06:01,736 --> 0:06:02,926
We provided our new delegate.

212
00:06:02,926 --> 0:06:04,526
And we set the

213
00:06:04,526 --> 0:06:05,436
invalidateAfterFirstRead

214
00:06:05,436 --> 0:06:05,976
parameter to false.

215
00:06:12,046 --> 0:06:12,996
Next, when a tag is discovered,

216
00:06:13,126 --> 0:06:14,056
we receive it in our new

217
00:06:14,056 --> 0:06:14,976
Delegate callback method here.

218
00:06:19,466 --> 0:06:21,126
Once we have a tag, we then send

219
00:06:21,126 --> 0:06:21,986
it to the reader session's

220
00:06:22,026 --> 0:06:23,096
Connect method to go ahead and

221
00:06:23,096 --> 0:06:23,846
connect to the tag.

222
00:06:24,686 --> 0:06:25,886
Now at this point, your tag will

223
00:06:25,886 --> 0:06:27,286
remain connected until you

224
00:06:27,356 --> 0:06:28,316
either connect to a different

225
00:06:28,316 --> 0:06:31,066
tag, restart polling, or

226
00:06:31,066 --> 0:06:31,976
invalidate your session.

227
00:06:37,076 --> 0:06:37,986
So the next step here, after

228
00:06:37,986 --> 0:06:39,286
we've connected to the tag, we

229
00:06:39,286 --> 0:06:40,616
go ahead and query the NDEF

230
00:06:40,616 --> 0:06:41,256
information.

231
00:06:42,116 --> 0:06:43,316
If the tag returns a read-write

232
00:06:43,316 --> 0:06:44,786
status, then we're free to go

233
00:06:44,786 --> 0:06:45,706
ahead and write a new message to

234
00:06:45,706 --> 0:06:45,936
the tag.

235
00:06:50,096 --> 0:06:51,336
So the next step here.

236
00:06:51,336 --> 0:06:52,976
We create an NFC NDEF message

237
00:06:52,976 --> 0:06:54,916
with our payload and then send

238
00:06:54,916 --> 0:06:56,396
it to the tag's writeNDEF method

239
00:06:56,396 --> 0:06:56,956
to update the tag.

240
00:07:02,116 --> 0:07:03,516
Finally, when we're all done, we

241
00:07:03,516 --> 0:07:04,636
call the invalidate method.

242
00:07:05,256 --> 0:07:06,556
This will terminate all NFC

243
00:07:06,556 --> 0:07:07,976
operations and end our session.

244
00:07:07,976 --> 0:07:10,086
And that's it.

245
00:07:10,156 --> 0:07:10,766
Pretty simple, right?

246
00:07:10,766 --> 0:07:12,256
This is all it takes to write an

247
00:07:12,286 --> 0:07:13,246
NDEF tag within your app.

248
00:07:13,246 --> 0:07:15,596
Now there might be some use

249
00:07:15,636 --> 0:07:16,756
cases where you need to interact

250
00:07:16,756 --> 0:07:18,196
with tags that are not NDEF

251
00:07:18,196 --> 0:07:18,586
formatted.

252
00:07:18,586 --> 0:07:19,886
And for that, we'll need to go

253
00:07:19,886 --> 0:07:21,116
ahead and use native tag access.

254
00:07:21,116 --> 0:07:21,786
So let's dive into that.

255
00:07:28,046 --> 0:07:30,046
We'll start first with ISO7816.

256
00:07:30,516 --> 0:07:33,096
The ISO7816 interface is used in

257
00:07:33,306 --> 0:07:35,086
Type A and Type B NFC tags.

258
00:07:35,086 --> 0:07:37,636
And it's used in a variety of

259
00:07:37,636 --> 0:07:39,616
different use cases, including

260
00:07:39,616 --> 0:07:41,086
electronic IDs such as

261
00:07:41,116 --> 0:07:43,936
passports, access, contact with

262
00:07:43,936 --> 0:07:46,156
smart cards, payments, and

263
00:07:46,156 --> 0:07:46,966
transit systems.

264
00:07:47,996 --> 0:07:50,266
Tags that support 7816 utilize

265
00:07:50,266 --> 0:07:51,976
the Application Protocol Data

266
00:07:51,976 --> 0:07:52,916
Unit interface.

267
00:07:53,596 --> 0:07:54,926
This is commonly referred to as

268
00:07:54,926 --> 0:07:55,166
APDU.

269
00:07:55,166 --> 0:07:57,156
And your applications will be

270
00:07:57,156 --> 0:07:58,856
able to send and receive APDU

271
00:07:58,856 --> 0:08:00,726
commands using the 7816 tag

272
00:07:58,856 --> 0:08:00,726
commands using the 7816 tag

273
00:08:00,726 --> 0:08:00,976
objects.

274
00:08:04,046 --> 0:08:04,586
Now there are a few special

275
00:08:04,586 --> 0:08:05,836
requirements for interacting

276
00:08:05,836 --> 0:08:07,316
with 7816 tags.

277
00:08:07,316 --> 0:08:07,986
So let's go over those first

278
00:08:07,986 --> 0:08:08,966
before we look at some code.

279
00:08:13,336 --> 0:08:15,136
First, your application will

280
00:08:15,136 --> 0:08:16,356
need to add an entry into its

281
00:08:16,356 --> 0:08:18,186
info.plist file that declares

282
00:08:18,266 --> 0:08:19,946
the specific application

283
00:08:19,976 --> 0:08:21,566
identifiers, or AIDs, which your

284
00:08:21,896 --> 0:08:22,926
application intends to use.

285
00:08:27,096 --> 0:08:27,976
Next, once Core NFC has

286
00:08:27,976 --> 0:08:29,766
discovered a tag, it will first

287
00:08:29,766 --> 0:08:30,816
check to see if that tag

288
00:08:30,816 --> 0:08:32,576
supports an AID listed in your

289
00:08:32,576 --> 0:08:34,046
application's info.plist file.

290
00:08:34,946 --> 0:08:36,486
It does this by trying to select

291
00:08:36,486 --> 0:08:38,506
each AID in turn until it finds

292
00:08:38,506 --> 0:08:38,905
a match.

293
00:08:39,976 --> 0:08:41,116
At that point, the Delegate

294
00:08:41,116 --> 0:08:42,866
callback will be invoked, and

295
00:08:42,866 --> 0:08:44,326
you will receive the tag object

296
00:08:44,326 --> 0:08:46,006
with that AID preselected.

297
00:08:46,986 --> 0:08:48,206
However, at this point, you're

298
00:08:48,206 --> 0:08:49,536
free to go ahead and select any

299
00:08:49,536 --> 0:08:50,546
other AID listed in your

300
00:08:50,546 --> 0:08:50,966
info.plist file.

301
00:08:59,046 --> 0:08:59,786
Now, we're excited about these

302
00:08:59,786 --> 0:09:00,816
new features in Core NFC.

303
00:08:59,786 --> 0:09:00,816
new features in Core NFC.

304
00:09:00,816 --> 0:09:02,416
However, for the time being,

305
00:09:02,416 --> 0:09:03,656
reading payment cards will not

306
00:09:03,656 --> 0:09:03,976
be supported.

307
00:09:07,356 --> 0:09:08,646
So here's an example of an

308
00:09:08,646 --> 0:09:10,056
application info.plist file

309
00:09:10,056 --> 0:09:10,886
listing the AIDs it intends to

310
00:09:10,886 --> 0:09:10,976
use.

311
00:09:14,046 --> 0:09:14,686
Here, you can see the

312
00:09:14,686 --> 0:09:15,806
application is listing the AID

313
00:09:15,806 --> 0:09:16,976
for NDEF operations.

314
00:09:24,086 --> 0:09:24,786
So now, we'll take a look at the

315
00:09:24,786 --> 0:09:26,666
actual 7816 tag object.

316
00:09:27,676 --> 0:09:29,066
The protocol has properties that

317
00:09:29,066 --> 0:09:31,016
are specific to the 7816

318
00:09:31,016 --> 0:09:31,606
technology.

319
00:09:32,826 --> 0:09:33,946
You can see the attributes here

320
00:09:33,946 --> 0:09:35,336
include the unique identifier

321
00:09:35,336 --> 0:09:36,606
and the historical bytes.

322
00:09:37,846 --> 0:09:38,946
So is anyone excited about the

323
00:09:38,946 --> 0:09:39,986
unique ID here?

324
00:09:39,986 --> 0:09:41,266
This is the second-most popular

325
00:09:41,576 --> 0:09:42,366
request that we get.

326
00:09:43,356 --> 0:09:44,746
There's also a sendCommand

327
00:09:44,746 --> 0:09:46,206
method for transmitting any form

328
00:09:46,206 --> 0:09:47,706
of APDU to the tag and receiving

329
00:09:47,706 --> 0:09:47,976
the response.

330
00:09:52,336 --> 0:09:54,316
So to start scanning the 7816

331
00:09:54,316 --> 0:09:55,626
tags, as I mentioned, the first

332
00:09:55,626 --> 0:09:56,796
thing that we'll need to do is

333
00:09:56,796 --> 0:09:58,016
implement a Delegate object

334
00:09:58,096 --> 0:09:59,196
which conforms to the

335
00:09:59,296 --> 0:10:00,646
NFCTagReaderSession Delegate

336
00:09:59,296 --> 0:10:00,646
NFCTagReaderSession Delegate

337
00:10:00,686 --> 0:10:01,276
protocol.

338
00:10:01,276 --> 0:10:02,706
There are only three required

339
00:10:02,706 --> 0:10:03,886
methods, and you can see them up

340
00:10:03,886 --> 0:10:03,976
here.

341
00:10:09,106 --> 0:10:11,106
So to start scanning for 7816

342
00:10:11,106 --> 0:10:13,096
tags, we instantiate our

343
00:10:13,336 --> 0:10:14,686
NFCTagReaderSession object,

344
00:10:15,386 --> 0:10:17,136
provide it our delegate, and set

345
00:10:17,136 --> 0:10:19,216
the polling option to ISO14443.

346
00:10:19,216 --> 0:10:21,106
This is the underlying NFC

347
00:10:21,106 --> 0:10:22,796
technology for Type A and Type B

348
00:10:22,796 --> 0:10:22,936
tags.

349
00:10:27,226 --> 0:10:29,046
Next, when Core NFC discovers a

350
00:10:29,046 --> 0:10:30,596
tag that has a matching AID, we

351
00:10:30,596 --> 0:10:31,766
receive it in our Delegate

352
00:10:31,766 --> 0:10:31,976
callback.

353
00:10:36,256 --> 0:10:37,806
And once we're assured that we

354
00:10:37,806 --> 0:10:39,976
have a 7816 tag, we use the

355
00:10:39,976 --> 0:10:41,146
reader's session.connect method

356
00:10:41,146 --> 0:10:41,886
to go ahead and connect to the

357
00:10:41,886 --> 0:10:41,976
tag.

358
00:10:46,366 --> 0:10:47,376
And finally, after we're

359
00:10:47,376 --> 0:10:49,236
connected, we create an APDU

360
00:10:49,236 --> 0:10:51,026
using the helper class and use

361
00:10:51,026 --> 0:10:52,176
the same command method of the

362
00:10:52,176 --> 0:10:53,276
tag to transmit the APDU and

363
00:10:53,276 --> 0:10:53,966
receive its response.

364
00:10:58,516 --> 0:10:59,786
Now during the transaction, we

365
00:10:59,786 --> 0:11:01,356
may find an application-related

366
00:10:59,786 --> 0:11:01,356
may find an application-related

367
00:11:01,356 --> 0:11:02,306
error has occurred, and we

368
00:11:02,306 --> 0:11:03,126
should not continue.

369
00:11:04,016 --> 0:11:05,246
As an example, imagine we're

370
00:11:05,246 --> 0:11:06,276
trying to read a passport.

371
00:11:06,276 --> 0:11:07,786
And it turns out we don't have

372
00:11:07,786 --> 0:11:09,146
the proper credentials, or we've

373
00:11:09,146 --> 0:11:11,106
calculated the password

374
00:11:11,106 --> 0:11:11,636
incorrectly.

375
00:11:11,996 --> 0:11:13,416
In a scenario like this, we

376
00:11:13,416 --> 0:11:14,446
would really like to indicate

377
00:11:14,446 --> 0:11:15,426
this error to the user.

378
00:11:16,446 --> 0:11:17,706
Calling the Invalidate method

379
00:11:17,856 --> 0:11:19,746
with an error message will

380
00:11:19,746 --> 0:11:21,256
invalidate the session, and an

381
00:11:21,256 --> 0:11:22,546
error symbol, along with the

382
00:11:22,546 --> 0:11:23,676
supplied error message, will be

383
00:11:23,676 --> 0:11:24,926
shown on the action sheet UI

384
00:11:25,226 --> 0:11:25,976
rather than a checkmark.

385
00:11:30,046 --> 0:11:30,746
So here's an example of what

386
00:11:30,746 --> 0:11:31,766
this error indication looks

387
00:11:31,766 --> 0:11:31,946
like.

388
00:11:32,176 --> 0:11:33,066
We'll see this later in the

389
00:11:33,066 --> 0:11:33,416
demo.

390
00:11:34,426 --> 0:11:35,436
But this is pretty great, right?

391
00:11:35,506 --> 0:11:36,996
This is the third-most requested

392
00:11:36,996 --> 0:11:38,326
feature we get.

393
00:11:39,516 --> 0:11:43,606
[ Applause ]

394
00:11:44,106 --> 0:11:44,996
And just for reference, here's

395
00:11:44,996 --> 0:11:45,926
the existing success indication.

396
00:11:50,256 --> 0:11:51,866
So that was 7816.

397
00:11:52,076 --> 0:11:53,026
Let's move on to our second

398
00:11:53,026 --> 0:11:54,006
technology, MIFARE.

399
00:11:54,926 --> 0:11:56,416
MIFARE is the technology similar

400
00:11:56,416 --> 0:11:57,496
to 7816.

401
00:11:57,496 --> 0:11:58,936
And it's based on NFC Type A

402
00:11:58,936 --> 0:11:59,336
tags.

403
00:12:00,726 --> 0:12:01,836
MIFARE is a technology defined

404
00:12:01,836 --> 0:12:03,456
by NXP and is used heavily in

405
00:12:03,456 --> 0:12:04,536
ticketing and badging systems

406
00:12:04,536 --> 0:12:04,936
throughout the world.

407
00:12:09,096 --> 0:12:10,776
So the NFC MIFARE tag protocol

408
00:12:11,016 --> 0:12:12,236
has properties similar to that

409
00:12:12,236 --> 0:12:13,426
of 7816.

410
00:12:14,006 --> 0:12:15,426
In addition, there's another

411
00:12:15,426 --> 0:12:16,746
property of the MIFARE family.

412
00:12:17,266 --> 0:12:18,556
This will indicate the specific

413
00:12:18,556 --> 0:12:20,166
MIFARE tag type that has been

414
00:12:20,166 --> 0:12:20,646
discovered.

415
00:12:21,436 --> 0:12:22,796
It can be MIFARE Ultralight,

416
00:12:22,796 --> 0:12:24,586
MIFARE Plus, or DESFire.

417
00:12:24,636 --> 0:12:26,566
At this time, MIFARE Classic

418
00:12:26,566 --> 0:12:27,516
tags are not supported.

419
00:12:28,836 --> 0:12:30,386
There's also a method here for

420
00:12:30,456 --> 0:12:31,826
sending any MIFARE command.

421
00:12:32,766 --> 0:12:33,556
In addition, there's a

422
00:12:33,556 --> 0:12:34,966
convenience method for sending

423
00:12:34,966 --> 0:12:37,806
7816 APDUs for those tags, such

424
00:12:37,806 --> 0:12:38,606
as DESFire and Plus, which will

425
00:12:38,606 --> 0:12:38,976
support them.

426
00:12:42,046 --> 0:12:42,536
So now, let's see this in

427
00:12:42,536 --> 0:12:42,836
action.

428
00:12:45,126 --> 0:12:46,236
Just start scanning for a MIFARE

429
00:12:46,236 --> 0:12:47,026
tag.

430
00:12:47,026 --> 0:12:48,266
We again instantiate our tag

431
00:12:48,266 --> 0:12:48,896
reader session.

432
00:12:49,486 --> 0:12:51,006
Again, we set our polling option

433
00:12:51,006 --> 0:12:52,266
to ISO14443.

434
00:12:52,266 --> 0:12:55,686
And we set the Delegate and Call

435
00:12:55,686 --> 0:12:55,976
Begin.

436
00:12:59,266 --> 0:13:00,826
Please note that a MIFARE tag

437
00:12:59,266 --> 0:13:00,826
Please note that a MIFARE tag

438
00:13:00,826 --> 0:13:03,216
that supports a 7816 interface

439
00:13:03,216 --> 0:13:04,756
and contains an AID listing the

440
00:13:04,756 --> 0:13:06,206
applications info.plist file

441
00:13:06,726 --> 0:13:07,876
will instead be returned as a

442
00:13:07,926 --> 0:13:10,526
7816 object and not a MIFARE

443
00:13:10,526 --> 0:13:10,916
object.

444
00:13:14,046 --> 0:13:14,646
So at this point, when our

445
00:13:14,646 --> 0:13:15,436
callback gets invoked, we

446
00:13:15,436 --> 0:13:16,376
specifically check to make sure

447
00:13:16,376 --> 0:13:17,776
that we have a MIFARE tag object

448
00:13:17,776 --> 0:13:17,976
returned.

449
00:13:22,156 --> 0:13:23,506
Once we're sure we have one, we

450
00:13:23,506 --> 0:13:24,266
send it to the reader's

451
00:13:24,266 --> 0:13:25,516
session.connect method and

452
00:13:25,516 --> 0:13:26,206
connect to the tag.

453
00:13:26,966 --> 0:13:30,486
And then use the tag to send a

454
00:13:30,486 --> 0:13:30,976
MIFARE command.

455
00:13:36,256 --> 0:13:37,396
Okay, so that's two of the four

456
00:13:37,396 --> 0:13:37,966
technologies.

457
00:13:38,126 --> 0:13:39,876
So let's look at ISO15693.

458
00:13:39,916 --> 0:13:43,036
This is also known as type five

459
00:13:43,036 --> 0:13:44,006
or vicinity tags.

460
00:13:44,006 --> 0:13:45,486
And these are commonly used in

461
00:13:45,486 --> 0:13:46,426
retail, industrial, and even

462
00:13:46,426 --> 0:13:46,976
medical applications.

463
00:13:51,046 --> 0:13:52,816
So once again, this protocol has

464
00:13:52,816 --> 0:13:54,426
properties specific to the

465
00:13:54,426 --> 0:13:56,056
ISO15693 technology.

466
00:13:56,836 --> 0:13:57,966
Here, we also have the unique

467
00:13:57,966 --> 0:13:59,516
identifier, as well as the

468
00:13:59,516 --> 0:14:00,786
manufacture code and the serial

469
00:13:59,516 --> 0:14:00,786
manufacture code and the serial

470
00:14:00,786 --> 0:14:00,976
number.

471
00:14:06,046 --> 0:14:08,096
And the command set for 15693,

472
00:14:08,096 --> 0:14:09,006
if you have not seen it, is

473
00:14:09,006 --> 0:14:09,576
quite large.

474
00:14:10,296 --> 0:14:11,836
And the protocol has convenience

475
00:14:11,836 --> 0:14:12,956
methods for some of the common

476
00:14:12,956 --> 0:14:13,666
operations.

477
00:14:13,666 --> 0:14:15,076
You can see them listed up here.

478
00:14:15,826 --> 0:14:16,976
They cover reading and writing

479
00:14:17,036 --> 0:14:18,466
single or multiple blocks,

480
00:14:19,246 --> 0:14:21,746
locking blocks, select, and

481
00:14:21,746 --> 0:14:22,346
reset.

482
00:14:23,216 --> 0:14:24,606
Again, there's also a method for

483
00:14:24,606 --> 0:14:26,186
sending any custom command.

484
00:14:26,646 --> 0:14:27,876
You can construct any command

485
00:14:27,876 --> 0:14:29,586
according to the ISO15693

486
00:14:29,626 --> 0:14:31,426
specification and use that

487
00:14:31,426 --> 0:14:32,666
method to send it.

488
00:14:33,596 --> 0:14:34,846
You can go ahead and refer to

489
00:14:34,846 --> 0:14:35,536
the specification for more

490
00:14:35,536 --> 0:14:35,956
details.

491
00:14:40,116 --> 0:14:41,186
So to start scanning for

492
00:14:41,186 --> 0:14:43,106
vicinity tags, which should now

493
00:14:43,106 --> 0:14:44,216
be looking very familiar to

494
00:14:44,216 --> 0:14:46,606
everyone, we create our

495
00:14:46,606 --> 0:14:48,806
NFCTagReaderSession, provide it

496
00:14:48,806 --> 0:14:49,306
our delegate.

497
00:14:49,306 --> 0:14:51,006
But this time, we changed the

498
00:14:51,006 --> 0:14:52,926
polling option to ISO15693.

499
00:14:58,046 --> 0:15:00,536
When Core NFC discovers a 15693

500
00:14:58,046 --> 0:15:00,536
When Core NFC discovers a 15693

501
00:15:00,536 --> 0:15:01,646
tag, again, we receive the tag

502
00:15:01,646 --> 0:15:02,976
in our callback.

503
00:15:06,206 --> 0:15:07,426
We again verify that we have the

504
00:15:07,426 --> 0:15:08,856
proper tag type and then connect

505
00:15:08,856 --> 0:15:09,786
to it using the sessions.connect

506
00:15:09,786 --> 0:15:09,976
method.

507
00:15:14,106 --> 0:15:15,766
And once connected, we use the

508
00:15:15,766 --> 0:15:16,796
tag to issue a readSingleBlock

509
00:15:16,796 --> 0:15:16,976
command.

510
00:15:23,046 --> 0:15:23,576
So finally, we're on to our

511
00:15:23,576 --> 0:15:25,006
fourth and final technology,

512
00:15:25,006 --> 0:15:25,666
FeliCa.

513
00:15:26,056 --> 0:15:27,496
FeliCa is a format defined by

514
00:15:27,576 --> 0:15:28,816
Sony, and it's used heavily in

515
00:15:28,816 --> 0:15:29,656
transit and payment systems

516
00:15:29,656 --> 0:15:29,976
around Japan.

517
00:15:33,116 --> 0:15:35,156
Now the FeliCa usage also has

518
00:15:35,156 --> 0:15:36,326
some additional requirements.

519
00:15:37,106 --> 0:15:40,526
Similar to 7816, your

520
00:15:40,526 --> 0:15:41,726
application will need to add an

521
00:15:41,726 --> 0:15:43,466
entry into the info.plist file

522
00:15:44,036 --> 0:15:45,326
that declares the specific

523
00:15:45,326 --> 0:15:46,496
FeliCa system codes your

524
00:15:46,496 --> 0:15:47,976
application intends to use.

525
00:15:48,766 --> 0:15:49,996
And for security and privacy

526
00:15:49,996 --> 0:15:51,176
reasons, we're asking that these

527
00:15:51,226 --> 0:15:52,816
be discreet FeliCa system codes

528
00:15:52,816 --> 0:15:53,976
and not wildcard entries.

529
00:15:57,046 --> 0:15:59,486
Again, similar to 7816, when

530
00:15:59,486 --> 0:16:01,136
Core NFC discovers a FeliCa tag,

531
00:15:59,486 --> 0:16:01,136
Core NFC discovers a FeliCa tag,

532
00:16:01,716 --> 0:16:02,896
we'll first validate -- detect

533
00:16:02,896 --> 0:16:04,546
that that tag contains a system

534
00:16:04,546 --> 0:16:06,426
code listed in your info.plist

535
00:16:06,426 --> 0:16:06,676
file.

536
00:16:07,636 --> 0:16:08,636
If it does, you'll receive the

537
00:16:08,636 --> 0:16:09,796
tag and the Delegate callback.

538
00:16:09,826 --> 0:16:11,616
If it does not, the callback

539
00:16:11,616 --> 0:16:12,646
does not get invoked, and your

540
00:16:12,646 --> 0:16:13,796
application does not get

541
00:16:13,796 --> 0:16:14,796
notified about the presence of

542
00:16:14,796 --> 0:16:14,976
the tag.

543
00:16:18,256 --> 0:16:19,626
So here's an example of an

544
00:16:19,626 --> 0:16:21,406
info.plist file registering for

545
00:16:21,476 --> 0:16:24,466
FeliCa system code reserved for

546
00:16:24,466 --> 0:16:24,976
NDEF operations.

547
00:16:32,376 --> 0:16:33,476
Again, taking a look at the

548
00:16:33,476 --> 0:16:35,176
FeliCa tag protocol here, we see

549
00:16:35,236 --> 0:16:36,866
properties specific to FeliCa.

550
00:16:37,146 --> 0:16:38,826
We have the manufacturer ID, or

551
00:16:38,826 --> 0:16:40,466
IDM, and the current selected

552
00:16:40,466 --> 0:16:41,256
system code.

553
00:16:42,096 --> 0:16:42,936
Also, there's a

554
00:16:42,936 --> 0:16:44,206
sendFeliCaCommand method for

555
00:16:44,206 --> 0:16:45,656
sending any FeliCa command to

556
00:16:45,656 --> 0:16:45,976
the tag.

557
00:16:49,046 --> 0:16:49,836
And this protocol also has

558
00:16:49,906 --> 0:16:51,236
convenience methods for some of

559
00:16:51,236 --> 0:16:52,846
the common FeliCa operations.

560
00:16:52,846 --> 0:16:55,226
You can go ahead and refer to

561
00:16:55,226 --> 0:16:56,316
Sony's FeliCa command

562
00:16:56,316 --> 0:16:57,936
specification for more details.

563
00:17:01,046 --> 0:17:02,646
So continuing what should now be

564
00:17:02,646 --> 0:17:05,066
a very familiar usage model, we

565
00:17:05,066 --> 0:17:05,806
instantiated an

566
00:17:05,806 --> 0:17:07,886
NFCTagReaderSession, provide it

567
00:17:07,886 --> 0:17:09,435
our delegate, and this time,

568
00:17:09,435 --> 0:17:10,465
changed the polling option to

569
00:17:10,465 --> 0:17:12,636
ISO18092, which is the NFC

570
00:17:12,636 --> 0:17:13,976
technology for FeliCa.

571
00:17:18,046 --> 0:17:19,096
So once Core NFC has discovered

572
00:17:19,096 --> 0:17:20,165
a tag and found a matching

573
00:17:20,165 --> 0:17:21,606
system code, we again receive

574
00:17:21,606 --> 0:17:22,626
the tag object in our same

575
00:17:22,626 --> 0:17:22,976
delegate.

576
00:17:25,156 --> 0:17:26,316
We ensure that we have the

577
00:17:26,316 --> 0:17:27,286
proper tag type we were

578
00:17:27,286 --> 0:17:28,516
expecting and then connect to

579
00:17:28,516 --> 0:17:28,976
the tag.

580
00:17:34,066 --> 0:17:36,036
And then finally, we use the tag

581
00:17:36,096 --> 0:17:37,196
to send a requestResponse

582
00:17:37,196 --> 0:17:37,536
command.

583
00:17:38,326 --> 0:17:39,976
So we've now covered NDEF tag

584
00:17:39,976 --> 0:17:41,346
writing and interacting with

585
00:17:41,346 --> 0:17:42,446
tags using all four of the

586
00:17:42,446 --> 0:17:42,976
native technologies.

587
00:17:46,096 --> 0:17:47,216
So at this point, I'm going to

588
00:17:47,216 --> 0:17:48,616
bring Lawrence onstage and show

589
00:17:48,616 --> 0:17:49,976
us a demo of all of this in

590
00:17:49,976 --> 0:17:50,296
action.

591
00:17:51,516 --> 0:17:56,596
[ Applause ]

592
00:17:57,096 --> 0:17:58,976
&gt;&gt; All right, thank you, Gordon.

593
00:17:59,516 --> 0:18:00,546
Hello, everyone.

594
00:17:59,516 --> 0:18:00,546
Hello, everyone.

595
00:18:01,486 --> 0:18:01,956
Welcome.

596
00:18:04,666 --> 0:18:06,386
To demonstrate how Core NFC

597
00:18:06,456 --> 0:18:07,706
Framework can be used in a

598
00:18:07,706 --> 0:18:10,006
real-life example, let me take

599
00:18:10,006 --> 0:18:12,136
you through a quick journey of

600
00:18:12,186 --> 0:18:13,926
my imaginary fishmonger.

601
00:18:16,216 --> 0:18:17,916
As a tech savvy fishmonger, I

602
00:18:18,476 --> 0:18:20,536
have heard that the NFC

603
00:18:20,536 --> 0:18:22,686
technologies can improve

604
00:18:22,686 --> 0:18:24,876
customer engagement and also be

605
00:18:24,876 --> 0:18:26,386
used in inventory management.

606
00:18:27,526 --> 0:18:28,996
After listening on this great

607
00:18:28,996 --> 0:18:31,116
presentation, I have decided to

608
00:18:31,116 --> 0:18:33,676
create two applications to help

609
00:18:33,676 --> 0:18:35,726
my business, The Great Fish

610
00:18:35,726 --> 0:18:35,976
Company.

611
00:18:38,066 --> 0:18:39,546
I'm going to use NFC in two

612
00:18:39,546 --> 0:18:40,026
ways.

613
00:18:41,356 --> 0:18:44,186
First, I'm going to create NFC

614
00:18:44,186 --> 0:18:45,786
NDEF tags to describe my

615
00:18:45,786 --> 0:18:46,186
product.

616
00:18:47,376 --> 0:18:48,896
And second, I'm going to create

617
00:18:48,896 --> 0:18:50,666
coupon tags using MIFARE

618
00:18:50,666 --> 0:18:52,636
Ultralight tags, which is also

619
00:18:52,636 --> 0:18:54,846
known as NFC Type II tags.

620
00:19:01,046 --> 0:19:02,696
Here is an overview of how we

621
00:19:02,696 --> 0:19:03,826
deliver our products.

622
00:19:04,446 --> 0:19:06,656
After we catch our fish, we

623
00:19:06,656 --> 0:19:09,776
integrate NFC NDEF tag to

624
00:19:10,126 --> 0:19:11,016
describe the catch.

625
00:19:12,186 --> 0:19:14,186
The message contains the fish

626
00:19:14,446 --> 0:19:16,426
they have catch, the fish name,

627
00:19:16,786 --> 0:19:17,396
and the price.

628
00:19:18,466 --> 0:19:20,196
The tag is then attached to the

629
00:19:20,196 --> 0:19:21,786
product packaging and eventually

630
00:19:21,786 --> 0:19:23,466
gets delivered to our customers.

631
00:19:24,386 --> 0:19:25,376
The first application that I'm

632
00:19:25,376 --> 0:19:26,626
going to create is called the

633
00:19:26,626 --> 0:19:28,086
Fish Tag Creator.

634
00:19:28,086 --> 0:19:29,976
This is what it looks like here.

635
00:19:33,046 --> 0:19:33,776
Once I've entered all the

636
00:19:33,776 --> 0:19:36,266
information into my app, I can

637
00:19:36,266 --> 0:19:37,896
click on the Write to Tag button

638
00:19:38,766 --> 0:19:39,846
to write to the NDEF tag.

639
00:19:41,006 --> 0:19:42,586
The Fish Tag Creator application

640
00:19:42,766 --> 0:19:45,296
also allows me to create NFC

641
00:19:45,296 --> 0:19:48,116
coupon codes to promote my

642
00:19:48,696 --> 0:19:48,896
business.

643
00:19:49,016 --> 0:19:51,086
I use a MIFARE Ultralight tag to

644
00:19:51,086 --> 0:19:52,376
store the special coupon code

645
00:19:52,696 --> 0:19:54,036
and send it to my customers.

646
00:19:54,586 --> 0:19:57,316
Here, I can select one of the

647
00:19:57,316 --> 0:19:59,196
three possible coupon values to

648
00:19:59,196 --> 0:19:59,356
write.

649
00:20:00,386 --> 0:20:01,336
The second application that I

650
00:20:01,336 --> 0:20:03,226
create is called a Fish Tag

651
00:20:03,336 --> 0:20:03,676
Reader.

652
00:20:05,086 --> 0:20:05,966
My customer will be able to

653
00:20:05,966 --> 0:20:07,186
download this app from the App

654
00:20:07,186 --> 0:20:09,696
Store to read the NDEF fish tag

655
00:20:09,776 --> 0:20:11,616
that come with their purchase.

656
00:20:12,186 --> 0:20:15,426
In the first panel, we have the

657
00:20:15,486 --> 0:20:18,076
Click Scan button to scan the

658
00:20:18,076 --> 0:20:19,116
fish tag that comes with the

659
00:20:19,116 --> 0:20:19,446
fish.

660
00:20:20,056 --> 0:20:22,216
The app would then display the

661
00:20:22,266 --> 0:20:23,626
information stored it on the

662
00:20:23,626 --> 0:20:23,886
tag.

663
00:20:24,596 --> 0:20:26,206
In the second panel, we can

664
00:20:26,206 --> 0:20:27,776
click on the Scan Coupon button

665
00:20:28,176 --> 0:20:29,586
to read our MIFARE Ultralight

666
00:20:29,666 --> 0:20:31,066
fish tag -- coupon tags.

667
00:20:32,246 --> 0:20:33,846
Customer can redeem this coupon

668
00:20:33,906 --> 0:20:34,896
in their future purchase.

669
00:20:35,366 --> 0:20:37,436
Now let's take a look at both of

670
00:20:37,436 --> 0:20:37,976
these apps in actions.

671
00:20:45,076 --> 0:20:45,346
All right.

672
00:20:45,346 --> 0:20:48,296
I have basically put the -- the

673
00:20:48,296 --> 0:20:50,426
Fish Tag Reader app right --

674
00:20:50,426 --> 0:20:53,356
creator app right now.

675
00:20:53,586 --> 0:20:56,016
Today I brought with me a

676
00:20:56,016 --> 0:20:57,736
creative rainbow salmon with me.

677
00:20:58,516 --> 0:21:01,546
[ Chuckling ]

678
00:20:58,516 --> 0:21:01,546
[ Chuckling ]

679
00:21:02,046 --> 0:21:03,426
Let me first select today's

680
00:21:03,426 --> 0:21:05,906
dates and the fish name, which

681
00:21:05,906 --> 0:21:06,556
is Creative Salmon.

682
00:21:07,776 --> 0:21:09,166
Okay, this one is definitely the

683
00:21:09,166 --> 0:21:09,926
large size, right?

684
00:21:10,516 --> 0:21:12,616
[ Multiple Voices ]

685
00:21:13,116 --> 0:21:14,926
So now I click on the Write to

686
00:21:14,926 --> 0:21:16,146
Tag button.

687
00:21:16,756 --> 0:21:18,296
The action sheet will be shown.

688
00:21:18,386 --> 0:21:19,626
And now, at this point, I can

689
00:21:19,676 --> 0:21:20,976
hold my phone near the NDEF tag.

690
00:21:25,046 --> 0:21:25,606
Bingo.

691
00:21:28,046 --> 0:21:30,266
Now let me next then create a

692
00:21:30,266 --> 0:21:31,466
coupon tag for your audience

693
00:21:31,466 --> 0:21:31,636
here.

694
00:21:32,276 --> 0:21:34,556
I'm going to select Create

695
00:21:34,556 --> 0:21:34,976
Coupon button.

696
00:21:38,046 --> 0:21:39,326
I'm going to choose a 50% off

697
00:21:39,746 --> 0:21:41,256
since, you know, this is a

698
00:21:41,256 --> 0:21:42,836
special WWDC promotion, right?

699
00:21:43,516 --> 0:21:45,546
[ Cheering and Applause ]

700
00:21:46,046 --> 0:21:47,316
All right, so let's click on the

701
00:21:47,316 --> 0:21:47,856
button.

702
00:21:48,466 --> 0:21:49,606
The action sheet again will be

703
00:21:49,606 --> 0:21:50,376
shown on the screen.

704
00:21:50,686 --> 0:21:52,376
And now, I can hold my iPhone

705
00:21:52,836 --> 0:21:53,886
near the coupon tag.

706
00:21:56,276 --> 0:21:56,526
Voila!

707
00:22:00,216 --> 0:22:01,876
Okay, so now let's switch over

708
00:22:01,876 --> 0:22:05,406
to the NFC Tag Readers app to

709
00:22:05,406 --> 0:22:05,976
retest all my NFC tags.

710
00:22:10,076 --> 0:22:11,236
Here, I have the app open.

711
00:22:12,626 --> 0:22:13,796
I'm going to press on the Scan

712
00:22:13,796 --> 0:22:15,666
Tag button and read my NDEF fish

713
00:22:15,666 --> 0:22:15,876
tag.

714
00:22:22,046 --> 0:22:23,096
The description of the product

715
00:22:23,096 --> 0:22:24,556
is now displayed on the screen.

716
00:22:25,616 --> 0:22:26,636
Wow, that's cool.

717
00:22:27,256 --> 0:22:29,936
Alright. Now let me try to scan

718
00:22:30,536 --> 0:22:31,796
the coupon tag.

719
00:22:32,536 --> 0:22:34,326
This is done by selecting the

720
00:22:34,326 --> 0:22:36,266
second panel and clicking on the

721
00:22:36,266 --> 0:22:36,976
Scan Coupon button.

722
00:22:44,486 --> 0:22:45,256
All right, yeah.

723
00:22:45,256 --> 0:22:47,016
This is the fish 50% off coupon.

724
00:22:48,576 --> 0:22:50,236
Okay, so now let me try to read

725
00:22:50,236 --> 0:22:50,976
the second coupon again.

726
00:22:56,346 --> 0:22:57,636
Okay, this is not a valid

727
00:22:57,636 --> 0:22:58,006
coupon.

728
00:22:58,516 --> 0:23:00,726
So after seeing both of these

729
00:22:58,516 --> 0:23:00,726
So after seeing both of these

730
00:23:00,726 --> 0:23:02,606
are running in actions, let me

731
00:23:02,606 --> 0:23:04,006
switch over to the source code

732
00:23:04,006 --> 0:23:04,626
and take a look at how this is

733
00:23:04,626 --> 0:23:04,976
implemented.

734
00:23:12,106 --> 0:23:12,916
All right, let's walk through

735
00:23:12,916 --> 0:23:14,976
the Fish Tag Creative Offers.

736
00:23:21,046 --> 0:23:22,806
Here, I'll set the NDEF and

737
00:23:22,866 --> 0:23:25,026
native tag capabilities in my

738
00:23:25,026 --> 0:23:25,856
entitlement file.

739
00:23:26,776 --> 0:23:27,776
This is because I'm going to use

740
00:23:28,026 --> 0:23:29,796
both the NDEF and tag readings

741
00:23:30,306 --> 0:23:31,436
-- reader session in my

742
00:23:31,436 --> 0:23:31,976
application.

743
00:23:38,176 --> 0:23:39,596
Now let's take a look at the

744
00:23:40,506 --> 0:23:42,606
Main View controller to see how

745
00:23:42,606 --> 0:23:43,246
they NDEF writer is being

746
00:23:43,246 --> 0:23:43,966
implemented.

747
00:23:54,396 --> 0:23:54,976
In the --

748
00:23:58,066 --> 0:23:58,806
Sorry, one second here.

749
00:24:04,046 --> 0:24:05,026
In the Write Tag Action

750
00:24:05,026 --> 0:24:07,186
function, we have to instantiate

751
00:24:07,186 --> 0:24:09,236
an NFCNDEFReaderSession.

752
00:24:10,816 --> 0:24:13,636
We set the alert message and

753
00:24:13,636 --> 0:24:14,826
call the Begin Method to start a

754
00:24:14,826 --> 0:24:14,976
session.

755
00:24:23,136 --> 0:24:25,566
When an NDEF tag is found, it is

756
00:24:25,566 --> 0:24:27,006
going to be sent to the Delegate

757
00:24:27,006 --> 0:24:27,386
function.

758
00:24:28,056 --> 0:24:32,866
We connect to the tag and call

759
00:24:33,666 --> 0:24:34,906
queryNDEFStatus.

760
00:24:35,596 --> 0:24:39,306
If the tag is writeable and has

761
00:24:39,306 --> 0:24:41,906
sufficient storage, we call the

762
00:24:41,946 --> 0:24:44,036
writeNDEF function to write to

763
00:24:44,896 --> 0:24:46,106
the tag.

764
00:24:46,266 --> 0:24:47,666
Finally, we call the

765
00:24:47,666 --> 0:24:48,506
invalidateFunction to end the

766
00:24:48,506 --> 0:24:48,936
session.

767
00:24:52,046 --> 0:24:52,756
Now let's take a look how a

768
00:24:52,756 --> 0:24:53,806
coupon is created.

769
00:25:01,046 --> 0:25:02,986
Here, we have the createCoupon

770
00:25:02,986 --> 0:25:03,726
action function.

771
00:25:05,006 --> 0:25:06,156
We instantiate a

772
00:25:06,436 --> 0:25:07,726
TagReaderSession object.

773
00:25:09,106 --> 0:25:12,316
We call the setAlert message and

774
00:25:12,316 --> 0:25:13,826
call beginFunction to start a

775
00:25:13,826 --> 0:25:13,976
session.

776
00:25:23,136 --> 0:25:24,226
Here, we are looking

777
00:25:24,226 --> 0:25:25,596
specifically for a MIFARE

778
00:25:25,596 --> 0:25:27,166
Ultralight coupon tag in the

779
00:25:27,166 --> 0:25:27,896
Delegate function.

780
00:25:29,456 --> 0:25:31,776
When a tag is actually found, we

781
00:25:31,776 --> 0:25:33,666
connect to it and start the

782
00:25:33,666 --> 0:25:33,976
write operation.

783
00:25:42,156 --> 0:25:44,376
To write to the tag, we

784
00:25:44,756 --> 0:25:46,746
basically create a coupon code

785
00:25:47,696 --> 0:25:49,846
and then call sendMIFARE command

786
00:25:49,846 --> 0:25:52,566
to start a write operation.

787
00:25:52,686 --> 0:25:54,076
When all write operations are

788
00:25:54,076 --> 0:25:57,606
completed, we invalidate the

789
00:25:57,606 --> 0:25:57,956
session.

790
00:26:02,286 --> 0:26:03,626
We have used both NDEF and

791
00:26:04,206 --> 0:26:05,526
native tag reader session to

792
00:26:05,526 --> 0:26:06,956
create NFC tags.

793
00:26:08,106 --> 0:26:09,676
Now let's take a look together

794
00:26:09,676 --> 0:26:11,896
with the Fish Tag Reader app.

795
00:26:21,076 --> 0:26:22,676
The NFCTagReaderSession has

796
00:26:23,036 --> 0:26:24,446
convenience methods to perform

797
00:26:24,446 --> 0:26:24,976
NDEF operations.

798
00:26:27,256 --> 0:26:28,636
This is what we use here.

799
00:26:29,826 --> 0:26:31,876
However, it's required us to add

800
00:26:31,876 --> 0:26:36,316
the 7816 AID and Type F system

801
00:26:36,316 --> 0:26:38,736
code into the -- for the NDEF in

802
00:26:38,736 --> 0:26:40,046
our info.plist file, which is

803
00:26:40,736 --> 0:26:40,976
shown here.

804
00:26:50,416 --> 0:26:51,976
Now in the Scan View controller

805
00:26:52,476 --> 0:26:57,696
--

806
00:26:58,196 --> 0:27:01,866
We have the scan tag action

807
00:26:58,196 --> 0:27:01,866
We have the scan tag action

808
00:27:01,946 --> 0:27:02,346
function.

809
00:27:02,346 --> 0:27:04,306
Here, we create a

810
00:27:04,306 --> 0:27:07,406
TagReaderSession, set the alert

811
00:27:07,406 --> 0:27:10,786
message, and call begins to

812
00:27:10,786 --> 0:27:12,906
start the -- write the Reader

813
00:27:12,906 --> 0:27:13,556
action function.

814
00:27:21,196 --> 0:27:23,336
When an NFC tag is found, it is

815
00:27:23,396 --> 0:27:24,426
then delivered to our Delegate

816
00:27:24,426 --> 0:27:24,956
callback.

817
00:27:28,386 --> 0:27:30,886
We connect to the tag and

818
00:27:30,936 --> 0:27:31,976
perform NDEF status query.

819
00:27:35,126 --> 0:27:37,746
If the tag is readable, we call

820
00:27:37,746 --> 0:27:38,856
readNDEF method.

821
00:27:47,076 --> 0:27:48,436
Now let's -- finally, we

822
00:27:48,436 --> 0:27:49,946
actually invalidate the session

823
00:27:49,946 --> 0:27:50,926
by calling Invalidate.

824
00:27:57,336 --> 0:27:58,316
Now let's take a look how we

825
00:27:58,316 --> 0:27:58,966
read a coupon tag.

826
00:28:07,066 --> 0:28:08,616
Here, we have a ScanCoupon

827
00:28:08,616 --> 0:28:09,336
action function.

828
00:28:09,886 --> 0:28:11,436
And just like before, we

829
00:28:11,436 --> 0:28:12,576
instantiate a

830
00:28:13,146 --> 0:28:14,206
NFCTagReaderSession object.

831
00:28:14,816 --> 0:28:17,116
We set the alert message.

832
00:28:18,176 --> 0:28:19,166
And we start a session by

833
00:28:19,166 --> 0:28:19,976
calling the Begin.

834
00:28:27,066 --> 0:28:28,896
When a tag is found, we check to

835
00:28:28,946 --> 0:28:30,516
see if it's a MIFARE Ultralight

836
00:28:30,516 --> 0:28:30,816
tag.

837
00:28:32,216 --> 0:28:34,896
If it is, we connect to the tag.

838
00:28:43,046 --> 0:28:44,846
To read from the tag, we call

839
00:28:44,846 --> 0:28:45,976
the sendMIFARE command.

840
00:28:48,236 --> 0:28:49,726
We then validate the queue

841
00:28:49,726 --> 0:28:49,956
point.

842
00:28:52,176 --> 0:28:54,416
At the end, we call the

843
00:28:54,416 --> 0:28:56,636
Invalidate method to end the

844
00:28:56,636 --> 0:28:56,976
session.

845
00:29:00,046 --> 0:29:02,336
If the coupon is invalid, we

846
00:29:02,336 --> 0:29:03,656
call invalidateErrorMessage

847
00:29:03,766 --> 0:29:03,976
instead.

848
00:29:09,426 --> 0:29:10,726
Now that's everything that you

849
00:29:10,726 --> 0:29:12,446
need in order to create a great

850
00:29:12,446 --> 0:29:13,936
app using the Core NFC

851
00:29:14,006 --> 0:29:14,336
Framework.

852
00:29:14,986 --> 0:29:15,896
Back to Gordon.

853
00:29:16,516 --> 0:29:20,500
[ Applause ]

854
00:29:24,156 --> 0:29:24,786
&gt;&gt; Thank you, Lawrence.

855
00:29:28,096 --> 0:29:29,536
So we hope the new tag writing

856
00:29:29,536 --> 0:29:31,116
and native access allows you to

857
00:29:31,116 --> 0:29:32,516
add awesome new features to your

858
00:29:32,516 --> 0:29:33,186
applications.

859
00:29:33,736 --> 0:29:34,786
As we've seen, it's pretty

860
00:29:34,786 --> 0:29:35,836
straightforward and pretty

861
00:29:35,836 --> 0:29:36,146
simple.

862
00:29:36,716 --> 0:29:37,986
Let's do a quick review of what

863
00:29:37,986 --> 0:29:38,906
we've gone over today.

864
00:29:39,576 --> 0:29:41,126
First, decide which type of

865
00:29:41,126 --> 0:29:42,186
reader session your application

866
00:29:42,186 --> 0:29:42,786
has required.

867
00:29:43,306 --> 0:29:44,826
NDEF, native access, or even

868
00:29:44,826 --> 0:29:44,976
both.

869
00:29:49,046 --> 0:29:49,996
Implement the newDelegate

870
00:29:49,996 --> 0:29:50,766
methods to receive the new tag

871
00:29:50,766 --> 0:29:50,976
objects.

872
00:29:53,056 --> 0:29:54,716
Once you have those tag objects,

873
00:29:54,836 --> 0:29:56,016
go ahead and perform all your

874
00:29:56,016 --> 0:29:56,766
reads and writes using those

875
00:29:56,766 --> 0:29:56,976
objects.

876
00:29:59,076 --> 0:30:00,256
And when you're all done,

877
00:29:59,076 --> 0:30:00,256
And when you're all done,

878
00:30:00,256 --> 0:30:01,956
indicate the proper success or

879
00:30:01,956 --> 0:30:02,986
error indication using the

880
00:30:02,986 --> 0:30:03,976
appropriate Invalidation call.

881
00:30:06,116 --> 0:30:06,826
And that's it.

882
00:30:10,046 --> 0:30:11,486
So all the sample code that we

883
00:30:11,486 --> 0:30:12,306
have gone through today is

884
00:30:12,306 --> 0:30:13,686
available to you online now,

885
00:30:14,576 --> 0:30:16,096
along with other information.

886
00:30:16,686 --> 0:30:18,686
iOS 13 is available now along

887
00:30:18,726 --> 0:30:19,526
with Xcode 11.

888
00:30:19,856 --> 0:30:20,666
Everybody should go ahead

889
00:30:20,666 --> 0:30:22,046
download that and use Core NFC

890
00:30:22,096 --> 0:30:23,226
to start doing awesome, new

891
00:30:23,226 --> 0:30:23,496
things.

892
00:30:25,146 --> 0:30:26,316
And if anybody has questions,

893
00:30:26,316 --> 0:30:27,706
the Core NFC Lab is immediately

894
00:30:27,706 --> 0:30:29,106
following this session over in

895
00:30:29,106 --> 0:30:29,466
the labs.

896
00:30:29,466 --> 0:30:31,636
So come talk to us and say

897
00:30:31,636 --> 0:30:31,966
hello.

898
00:30:32,516 --> 0:30:36,500
[ Cheering and Applause ]
