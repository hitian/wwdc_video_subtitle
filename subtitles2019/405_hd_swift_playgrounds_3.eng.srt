1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:09,516 --> 0:00:17,616
[ Applause and Cheering ]

3
00:00:18,116 --> 0:00:19,866
&gt;&gt; Hello, everyone, and welcome

4
00:00:19,866 --> 0:00:21,276
to our session on Swift

5
00:00:21,276 --> 0:00:22,266
Playgrounds 3.

6
00:00:23,186 --> 0:00:24,606
My name is Grace Kendall.

7
00:00:25,026 --> 0:00:26,276
&gt;&gt; My name Joy Forbes.

8
00:00:26,406 --> 0:00:27,936
&gt;&gt; And my name is Jonathan Penn.

9
00:00:28,036 --> 0:00:29,346
We're all engineers working on

10
00:00:29,346 --> 0:00:30,896
Swift Playgrounds and we are so

11
00:00:30,896 --> 0:00:32,165
excited to talk about the new

12
00:00:32,226 --> 0:00:33,956
features that you can use to

13
00:00:33,956 --> 0:00:36,046
build ideas right on iPad with

14
00:00:36,046 --> 0:00:36,416
Swift.

15
00:00:36,756 --> 0:00:38,046
And we'll demonstrate some

16
00:00:38,046 --> 0:00:39,196
techniques that you can use to

17
00:00:39,196 --> 0:00:40,636
build even more engaging

18
00:00:40,686 --> 0:00:41,696
Playground experiences.

19
00:00:43,416 --> 0:00:44,576
&gt;&gt; Swift Playgrounds is an app

20
00:00:44,876 --> 0:00:46,486
that you can write Swift code in

21
00:00:46,486 --> 0:00:47,966
as well as learn from content

22
00:00:47,966 --> 0:00:49,236
that other authors have made.

23
00:00:50,466 --> 0:00:51,896
The code that you write is real

24
00:00:52,006 --> 0:00:54,056
Swift and it's compiled and run

25
00:00:54,266 --> 0:00:55,736
all on the iPad by the app.

26
00:00:57,826 --> 0:00:58,976
&gt;&gt; Playgrounds you've created or

27
00:00:58,976 --> 0:01:00,566
downloaded show up in your list

28
00:00:58,976 --> 0:01:00,566
downloaded show up in your list

29
00:01:00,566 --> 0:01:02,056
of documents as shown here.

30
00:01:03,436 --> 0:01:04,786
And the more Playground section

31
00:01:04,786 --> 0:01:06,416
at the bottom shows other

32
00:01:06,476 --> 0:01:07,466
Playgrounds that are similar to

33
00:01:07,466 --> 0:01:08,806
the content you already have.

34
00:01:09,526 --> 0:01:11,056
If you tap the See All button,

35
00:01:12,226 --> 0:01:13,316
you'll see all the content

36
00:01:13,316 --> 0:01:14,866
available for download from

37
00:01:15,046 --> 0:01:16,976
Apple and the other feeds that

38
00:01:16,976 --> 0:01:17,806
you're subscribed to.

39
00:01:18,456 --> 0:01:19,706
You can also browse featured

40
00:01:19,706 --> 0:01:21,366
subscriptions in the From Other

41
00:01:21,416 --> 0:01:22,836
Publishers section at the

42
00:01:22,836 --> 0:01:23,116
bottom.

43
00:01:24,916 --> 0:01:26,466
&gt;&gt; Apple has published six new

44
00:01:26,466 --> 0:01:27,896
pieces of content in Swift

45
00:01:27,936 --> 0:01:28,746
Playgrounds 3.

46
00:01:30,046 --> 0:01:31,436
The Learn to Code family has

47
00:01:31,436 --> 0:01:32,756
expanded with Lights, Camera,

48
00:01:32,846 --> 0:01:34,786
Code, Assemble Your Camera, and

49
00:01:34,786 --> 0:01:35,616
Flashy Photos.

50
00:01:36,226 --> 0:01:37,626
These and the starting point

51
00:01:37,626 --> 0:01:39,776
Camera Create introduce the

52
00:01:39,836 --> 0:01:40,966
concept of building with

53
00:01:40,966 --> 0:01:42,496
components to create things like

54
00:01:42,586 --> 0:01:43,876
cameras and photo editors.

55
00:01:45,396 --> 0:01:46,806
This Sonic Workshop challenge

56
00:01:46,896 --> 0:01:48,476
and Sonic Create starting point

57
00:01:48,696 --> 0:01:50,516
use touch events on iPad to

58
00:01:50,516 --> 0:01:52,426
compose music and create visual

59
00:01:52,486 --> 0:01:53,056
soundscapes.

60
00:01:55,226 --> 0:01:56,416
&gt;&gt; Today, we'll be reviewing

61
00:01:56,416 --> 0:01:57,476
some of the exciting new

62
00:01:57,476 --> 0:01:59,266
features in Swift Playgrounds 3.

63
00:02:00,016 --> 0:02:01,016
I'll be going through the

64
00:02:01,016 --> 0:02:02,206
breadth of development that you

65
00:02:02,206 --> 0:02:04,346
can do just on iPad, and then

66
00:02:04,346 --> 0:02:05,566
Joy will talk about some of the

67
00:02:05,566 --> 0:02:06,936
new features available to

68
00:02:06,936 --> 0:02:08,036
authors on the Mac.

69
00:02:08,686 --> 0:02:10,045
But first, Jonathan is going to

70
00:02:10,045 --> 0:02:11,776
show us a demo that exemplifies

71
00:02:11,816 --> 0:02:13,756
the power of Swift Playgrounds 3

72
00:02:13,866 --> 0:02:14,656
for developers.

73
00:02:15,006 --> 0:02:15,406
Jonathan?

74
00:02:16,106 --> 0:02:16,646
&gt;&gt; Thank you, Grace.

75
00:02:17,516 --> 0:02:23,286
[ Applause and Cheering ]

76
00:02:23,786 --> 0:02:24,936
I would like to demonstrate how

77
00:02:24,936 --> 0:02:26,536
powerful this tool can be as a

78
00:02:26,536 --> 0:02:28,606
scratchpad for ideas with a

79
00:02:28,606 --> 0:02:29,716
little bit of fun.

80
00:02:30,116 --> 0:02:31,556
These devices are quite nifty.

81
00:02:31,966 --> 0:02:33,596
I am personally very excited

82
00:02:33,596 --> 0:02:34,986
about the sensors that it has

83
00:02:34,986 --> 0:02:36,236
like the accelerometer.

84
00:02:36,666 --> 0:02:39,076
I'm a big fun of games that use

85
00:02:39,116 --> 0:02:40,786
the accelerometer to do cool

86
00:02:40,786 --> 0:02:42,186
things and bring a sense of

87
00:02:42,326 --> 0:02:44,136
physicality to what's going on,

88
00:02:44,136 --> 0:02:44,766
on the screen.

89
00:02:45,566 --> 0:02:48,116
So, I'm going to show some steps

90
00:02:48,116 --> 0:02:50,096
that I took to build an infinite

91
00:02:50,216 --> 0:02:52,316
scrolling marble obstacle course

92
00:02:52,776 --> 0:02:55,776
from scratch on an iPad all in

93
00:02:55,776 --> 0:02:56,396
Swift Playgrounds.

94
00:02:56,806 --> 0:02:57,956
If you've ever played one of

95
00:02:57,956 --> 0:02:59,166
those tiny puzzle games where

96
00:02:59,166 --> 0:03:00,326
you've got a roll around a

97
00:02:59,166 --> 0:03:00,326
you've got a roll around a

98
00:03:00,326 --> 0:03:01,626
marble and not fall into any

99
00:03:01,626 --> 0:03:02,886
holes, it's just something like

100
00:03:02,886 --> 0:03:03,026
that.

101
00:03:04,086 --> 0:03:05,346
We need a few things to make

102
00:03:05,346 --> 0:03:07,376
this work like a marble that

103
00:03:07,376 --> 0:03:09,946
response to the tilting motion

104
00:03:09,946 --> 0:03:10,666
of an iPad.

105
00:03:11,966 --> 0:03:13,096
We'll need a procedurally

106
00:03:13,096 --> 0:03:14,476
generated map of holes that the

107
00:03:14,476 --> 0:03:16,216
player guides the marble pass.

108
00:03:16,756 --> 0:03:17,946
And to keep things simple, the

109
00:03:17,946 --> 0:03:19,356
goal is just to get as far as

110
00:03:19,356 --> 0:03:20,896
possible, as fast as possible

111
00:03:20,926 --> 0:03:23,196
without falling into a hole and

112
00:03:23,196 --> 0:03:23,866
out of the course.

113
00:03:25,596 --> 0:03:26,336
There's a bunch involved in

114
00:03:26,336 --> 0:03:27,276
building something like this.

115
00:03:27,276 --> 0:03:29,016
I'm going to focus on a few

116
00:03:29,016 --> 0:03:31,156
steps in the process using, of

117
00:03:31,156 --> 0:03:34,486
course, Swift Playgrounds to

118
00:03:34,486 --> 0:03:36,086
read the raw accelerometer data,

119
00:03:36,196 --> 0:03:37,536
experimenting with the in line

120
00:03:37,536 --> 0:03:39,346
results to do that, using the

121
00:03:39,346 --> 0:03:40,586
live view to learn about the

122
00:03:40,586 --> 0:03:42,116
SpriteKit game in physics

123
00:03:42,156 --> 0:03:44,596
engine, experiment with how to

124
00:03:44,596 --> 0:03:46,176
do this procedural hole

125
00:03:46,176 --> 0:03:47,606
generation placement throughout

126
00:03:47,606 --> 0:03:49,996
the course, and then, we'll add

127
00:03:49,996 --> 0:03:51,156
it all up and take a look at the

128
00:03:51,156 --> 0:03:51,756
full prototype.

129
00:03:52,456 --> 0:03:53,846
Let's get started.

130
00:03:57,356 --> 0:03:57,746
All right.

131
00:03:58,206 --> 0:04:00,246
Let's begin with a blank page.

132
00:03:58,206 --> 0:04:00,246
Let's begin with a blank page.

133
00:04:00,706 --> 0:04:01,986
Every page in a Swift

134
00:04:02,096 --> 0:04:03,746
Playgrounds document is its own

135
00:04:03,796 --> 0:04:05,216
execution entry point.

136
00:04:05,366 --> 0:04:06,636
It's a main .SWF file.

137
00:04:06,946 --> 0:04:08,936
I love to use separate pages.

138
00:04:09,196 --> 0:04:10,386
It's like a journal of my

139
00:04:10,386 --> 0:04:12,146
travels as I'm trying to either

140
00:04:12,316 --> 0:04:13,946
solve a problem or learn a new

141
00:04:13,946 --> 0:04:15,486
API, just figuring something

142
00:04:15,486 --> 0:04:15,686
out.

143
00:04:16,206 --> 0:04:17,926
I'll start with one subsystem or

144
00:04:18,245 --> 0:04:19,236
working on a function or

145
00:04:19,236 --> 0:04:20,836
something over here, and then

146
00:04:20,836 --> 0:04:22,065
move to a new page.

147
00:04:22,065 --> 0:04:23,456
It's a completely blank slate

148
00:04:23,526 --> 0:04:24,546
where I can work on the next

149
00:04:24,546 --> 0:04:27,026
idea leaving behind a trail that

150
00:04:27,026 --> 0:04:28,206
I can return to further

151
00:04:28,206 --> 0:04:29,096
experimentation.

152
00:04:29,666 --> 0:04:31,396
Now, our chief mechanic is the

153
00:04:31,396 --> 0:04:32,886
tilting motion of the iPad.

154
00:04:32,886 --> 0:04:34,666
So, we should probably start by

155
00:04:34,666 --> 0:04:35,966
importing CoreMotion.

156
00:04:37,166 --> 0:04:39,206
We'll create a CMMotionManager.

157
00:04:39,486 --> 0:04:41,006
Now, I'm using the Tab key of

158
00:04:41,006 --> 0:04:43,176
the hardware keyboard to select

159
00:04:43,436 --> 0:04:45,346
the different options in this

160
00:04:45,346 --> 0:04:47,026
shortcuts bar at the bottom for

161
00:04:47,026 --> 0:04:47,706
code completion.

162
00:04:47,926 --> 0:04:50,006
And then I'm pressing the Return

163
00:04:50,006 --> 0:04:51,406
key to select it.

164
00:04:51,816 --> 0:04:53,306
We'll tell the manager to start

165
00:04:53,306 --> 0:04:54,206
up by saying

166
00:04:54,206 --> 0:04:55,676
startAccelerometerUpdates.

167
00:04:57,076 --> 0:04:59,036
Now, I don't know about you but

168
00:04:59,036 --> 0:05:00,946
I never remember which of the

169
00:04:59,036 --> 0:05:00,946
I never remember which of the

170
00:05:00,946 --> 0:05:03,186
xyz coordinates of the

171
00:05:03,186 --> 0:05:05,206
accelerometer corresponds to how

172
00:05:05,206 --> 0:05:07,016
the iPad is supposed to move in

173
00:05:07,016 --> 0:05:07,806
this orientation.

174
00:05:07,806 --> 0:05:09,336
It's always confusing to me.

175
00:05:09,666 --> 0:05:11,286
But hey, let's figure it out

176
00:05:11,286 --> 0:05:11,806
right here.

177
00:05:12,886 --> 0:05:14,946
We need to wait a brief moment

178
00:05:14,946 --> 0:05:15,846
before we can start.

179
00:05:16,196 --> 0:05:17,486
The accelerometer has to take

180
00:05:17,536 --> 0:05:18,386
time to spin up.

181
00:05:18,986 --> 0:05:21,136
We'll worry about reading this

182
00:05:21,256 --> 0:05:22,476
thing regularly later.

183
00:05:22,476 --> 0:05:24,446
Right now, we just want to get

184
00:05:24,446 --> 0:05:25,956
an experiment going to see if we

185
00:05:25,956 --> 0:05:27,406
get a value out of this thing.

186
00:05:27,666 --> 0:05:30,776
So, I will tell the manager that

187
00:05:30,776 --> 0:05:32,236
I want the accelerometer data,

188
00:05:32,236 --> 0:05:34,296
the acceleration property, and

189
00:05:34,296 --> 0:05:35,026
the x-coordinate.

190
00:05:35,476 --> 0:05:36,986
By putting it on its own line,

191
00:05:37,356 --> 0:05:39,096
this line gets logged, the

192
00:05:39,096 --> 0:05:40,656
expression gets logged and turns

193
00:05:40,656 --> 0:05:42,186
into an inline result on the

194
00:05:42,186 --> 0:05:43,006
right-hand side.

195
00:05:43,056 --> 0:05:44,426
We can see this here when I tap

196
00:05:44,426 --> 0:05:45,026
around my code.

197
00:05:46,556 --> 0:05:47,826
All four lines get an inline

198
00:05:47,826 --> 0:05:48,216
result.

199
00:05:48,216 --> 0:05:49,386
I'm going to tap on the last

200
00:05:49,436 --> 0:05:50,996
icon here for the last line.

201
00:05:51,346 --> 0:05:53,426
Hey, we see a value, negative

202
00:05:53,426 --> 0:05:54,956
0.78.

203
00:05:55,476 --> 0:05:57,126
That means something.

204
00:05:57,516 --> 0:05:58,486
Well, let me try this here.

205
00:05:58,486 --> 0:05:59,716
I'll tilt the iPad and try

206
00:05:59,716 --> 0:06:00,816
running it again and see what

207
00:05:59,716 --> 0:06:00,816
running it again and see what

208
00:06:00,816 --> 0:06:02,316
value comes out now.

209
00:06:03,436 --> 0:06:06,916
It says, hey, negative 0.061.

210
00:06:07,246 --> 0:06:08,766
That's a different number.

211
00:06:09,266 --> 0:06:10,766
So somewhere in here, we're

212
00:06:10,766 --> 0:06:12,126
getting some sort of reaction

213
00:06:12,126 --> 0:06:13,216
that I think is related to the

214
00:06:13,216 --> 0:06:14,116
movement of the iPad.

215
00:06:14,186 --> 0:06:14,946
This is a start.

216
00:06:15,416 --> 0:06:16,576
But I'd really like to have some

217
00:06:16,576 --> 0:06:18,436
sort of real time feedback to

218
00:06:18,436 --> 0:06:20,276
give me an idea of what's going

219
00:06:20,276 --> 0:06:20,566
on.

220
00:06:21,136 --> 0:06:22,446
So let's fast forward to the

221
00:06:22,446 --> 0:06:24,166
next page where I've prepared an

222
00:06:24,166 --> 0:06:27,686
example to try out.

223
00:06:27,956 --> 0:06:29,226
Usually, when you run a

224
00:06:29,226 --> 0:06:30,966
Playground page, as the program

225
00:06:30,966 --> 0:06:32,556
counter reaches the very end,

226
00:06:32,846 --> 0:06:33,906
execution stops.

227
00:06:34,186 --> 0:06:35,216
You can restart whenever you

228
00:06:35,216 --> 0:06:36,366
want by just tapping around my

229
00:06:36,366 --> 0:06:36,716
code.

230
00:06:36,996 --> 0:06:38,386
And that's useful in many cases.

231
00:06:38,606 --> 0:06:39,966
But in this case, I would like

232
00:06:40,026 --> 0:06:41,766
the execution to continue so I

233
00:06:41,766 --> 0:06:43,426
can gather values over time.

234
00:06:43,686 --> 0:06:45,236
And because of that, I'm using

235
00:06:45,236 --> 0:06:46,796
the Playground Support API to

236
00:06:47,016 --> 0:06:48,726
tell the current page that I

237
00:06:48,726 --> 0:06:50,406
need indefinite execution.

238
00:06:51,406 --> 0:06:52,816
We create the CMMotionManager

239
00:06:52,816 --> 0:06:54,336
just like before, we tell the

240
00:06:54,336 --> 0:06:55,416
accelerometer to start.

241
00:06:56,046 --> 0:06:57,006
And here, I wrote a simple

242
00:06:57,006 --> 0:06:58,466
function, just to helper

243
00:06:58,466 --> 0:07:00,616
function called repeatEvery that

244
00:06:58,466 --> 0:07:00,616
function called repeatEvery that

245
00:07:00,616 --> 0:07:02,866
takes a trailing closure, calls

246
00:07:02,866 --> 0:07:04,246
the closure immediately, and

247
00:07:04,246 --> 0:07:06,056
then schedules calling it again

248
00:07:06,056 --> 0:07:07,436
after the given time interval

249
00:07:07,686 --> 0:07:09,376
but using the asyncAfter method

250
00:07:09,376 --> 0:07:10,676
on the name dispatch queue.

251
00:07:11,146 --> 0:07:12,616
It's crude a way of repeating

252
00:07:12,616 --> 0:07:13,206
things, I know.

253
00:07:13,296 --> 0:07:14,906
But, you know what, we're just

254
00:07:14,906 --> 0:07:16,226
experimenting and it works

255
00:07:16,226 --> 0:07:16,546
great.

256
00:07:16,546 --> 0:07:17,916
I can reuse this wherever I need

257
00:07:17,916 --> 0:07:18,796
to on this page.

258
00:07:19,286 --> 0:07:20,366
And I'm using it right here.

259
00:07:21,116 --> 0:07:22,456
Every half a second, this

260
00:07:22,456 --> 0:07:24,116
trailing closure gets called and

261
00:07:24,116 --> 0:07:25,476
as soon as the accelerometer

262
00:07:25,476 --> 0:07:28,076
data is not nil, we log the

263
00:07:28,076 --> 0:07:29,876
x-coordinate using that

264
00:07:29,876 --> 0:07:31,146
expression on this line.

265
00:07:31,576 --> 0:07:32,626
Let's take a look and see what

266
00:07:32,626 --> 0:07:33,926
happens when I tap around my own

267
00:07:33,926 --> 0:07:34,176
code.

268
00:07:34,566 --> 0:07:36,256
All right, we have things

269
00:07:36,576 --> 0:07:37,376
happening on the screen.

270
00:07:37,376 --> 0:07:38,576
Let me tap on the inline result

271
00:07:38,576 --> 0:07:39,456
and look what happens here.

272
00:07:40,206 --> 0:07:41,896
A graph representation is

273
00:07:41,946 --> 0:07:43,216
automatically selected for us

274
00:07:43,256 --> 0:07:44,636
because this is a sequence of

275
00:07:44,636 --> 0:07:45,946
simple numeric values.

276
00:07:46,216 --> 0:07:47,076
I'm going to pick this up and

277
00:07:47,076 --> 0:07:47,736
move it around.

278
00:07:48,406 --> 0:07:50,746
Whoa, we have things, stuff.

279
00:07:50,986 --> 0:07:51,356
All right.

280
00:07:51,356 --> 0:07:52,406
I'm going to try to get a

281
00:07:52,406 --> 0:07:53,056
baseline here.

282
00:07:53,056 --> 0:07:55,206
I'm going to hold it flat and

283
00:07:55,206 --> 0:07:56,136
then I'm going to tilt it

284
00:07:56,776 --> 0:07:57,426
upright.

285
00:07:58,426 --> 0:08:00,016
I will tilt it down.

286
00:07:58,426 --> 0:08:00,016
I will tilt it down.

287
00:08:00,016 --> 0:08:02,656
OK. I think we've kind of

288
00:08:02,656 --> 0:08:03,556
figured this out.

289
00:08:03,556 --> 0:08:05,546
The x-coordinate of the

290
00:08:05,546 --> 0:08:06,976
accelerometer corresponds to

291
00:08:06,976 --> 0:08:09,496
movement along this axis of the

292
00:08:09,496 --> 0:08:10,966
iPad in this orientation.

293
00:08:11,136 --> 0:08:11,906
All right, there we go.

294
00:08:12,176 --> 0:08:13,346
I could do the same thing to

295
00:08:13,386 --> 0:08:15,536
figure out how y and z work as

296
00:08:15,536 --> 0:08:15,956
well.

297
00:08:16,206 --> 0:08:17,066
This is quite useful.

298
00:08:17,986 --> 0:08:19,626
Now, this repeatEvery function

299
00:08:19,626 --> 0:08:20,886
[applause].

300
00:08:20,886 --> 0:08:21,106
Thank you.

301
00:08:23,526 --> 0:08:25,166
This repeatEvery function is

302
00:08:25,166 --> 0:08:25,436
nice.

303
00:08:25,436 --> 0:08:27,456
It's is crude of course but it's

304
00:08:27,496 --> 0:08:27,896
terse.

305
00:08:28,136 --> 0:08:28,756
It's clear.

306
00:08:28,756 --> 0:08:29,926
And I'm going to use it other

307
00:08:29,926 --> 0:08:31,226
places until I figure out how to

308
00:08:31,226 --> 0:08:32,006
do it the right way.

309
00:08:32,006 --> 0:08:32,556
That's fine.

310
00:08:33,176 --> 0:08:35,775
Well, because I created this as

311
00:08:35,775 --> 0:08:37,385
a blank playground in Swift

312
00:08:37,466 --> 0:08:39,395
Playgrounds 3, I have access to

313
00:08:39,395 --> 0:08:40,666
the new tabbed editing

314
00:08:40,666 --> 0:08:41,366
experience.

315
00:08:41,686 --> 0:08:42,206
Let me show you.

316
00:08:42,876 --> 0:08:43,966
I'm going to tap on the File

317
00:08:43,966 --> 0:08:45,526
icon up in the Navigation bar,

318
00:08:45,526 --> 0:08:47,176
and then I'm going to tap on the

319
00:08:47,176 --> 0:08:48,216
Utilities Module.

320
00:08:48,516 --> 0:08:49,986
This brings up the user module

321
00:08:49,986 --> 0:08:50,926
and source file picker.

322
00:08:50,926 --> 0:08:51,856
And you can see I've already

323
00:08:51,856 --> 0:08:53,106
done a lot of things in here as

324
00:08:53,106 --> 0:08:54,446
I was working on this idea.

325
00:08:54,826 --> 0:08:56,146
Well, in the Utilities Module,

326
00:08:56,146 --> 0:08:57,136
I'm going to put that function

327
00:08:57,136 --> 0:08:59,196
in here, make a Timing.swift

328
00:08:59,196 --> 0:08:59,576
file.

329
00:09:01,116 --> 0:09:03,106
I'll tap on the Tab for the main

330
00:09:03,106 --> 0:09:04,406
file of the page to go back.

331
00:09:04,906 --> 0:09:06,286
I will tap on the repeatEvery

332
00:09:06,286 --> 0:09:07,506
function to select it.

333
00:09:07,996 --> 0:09:09,726
If I tap and hold, I can pick it

334
00:09:09,726 --> 0:09:09,866
up.

335
00:09:10,416 --> 0:09:12,066
And with my other hand, I will

336
00:09:12,066 --> 0:09:14,226
tap on the Timing Tab, and then

337
00:09:14,226 --> 0:09:16,136
let go to drop this piece of

338
00:09:16,186 --> 0:09:18,596
code as a copy in its place in

339
00:09:18,596 --> 0:09:19,136
this file.

340
00:09:20,206 --> 0:09:21,376
Because this is a new file,

341
00:09:21,746 --> 0:09:22,996
Swift has no idea what time

342
00:09:22,996 --> 0:09:24,126
interval or dispatch queue you

343
00:09:24,126 --> 0:09:25,536
are, I'm going to have to tell

344
00:09:25,536 --> 0:09:27,636
it by importing foundation so it

345
00:09:27,636 --> 0:09:28,486
knows what to do with those

346
00:09:28,486 --> 0:09:28,996
symbols.

347
00:09:29,846 --> 0:09:31,036
And because I want to use this

348
00:09:31,036 --> 0:09:32,356
function everywhere on every

349
00:09:32,356 --> 0:09:34,306
page and possibly even in other

350
00:09:34,306 --> 0:09:36,126
modules, I need to mark this

351
00:09:36,126 --> 0:09:37,736
function as public so it's

352
00:09:37,736 --> 0:09:38,026
visible.

353
00:09:38,786 --> 0:09:40,316
Now, I can go back to the main

354
00:09:40,316 --> 0:09:41,786
file, tap to select the

355
00:09:41,786 --> 0:09:44,796
function, delete it, and if I

356
00:09:44,796 --> 0:09:46,966
did it right, everything should

357
00:09:46,966 --> 0:09:47,366
work.

358
00:09:47,366 --> 0:09:48,496
All right, there we go.

359
00:09:48,776 --> 0:09:51,486
Yay. Now, I can open as many

360
00:09:51,486 --> 0:09:52,746
files as I need to, to

361
00:09:52,746 --> 0:09:54,186
experiment on different ideas.

362
00:09:54,186 --> 0:09:55,896
Like, let's try this one here,

363
00:09:56,086 --> 0:09:56,816
Math.swift.

364
00:09:57,076 --> 0:09:58,096
I threw a bunch of bits and

365
00:09:58,096 --> 0:09:59,016
pieces in here as I was going

366
00:09:59,016 --> 0:09:59,976
just to help me experiment.

367
00:10:00,796 --> 0:10:02,366
These are math helper functions

368
00:10:02,366 --> 0:10:04,126
and a few extensions on system

369
00:10:04,126 --> 0:10:06,076
types that made writing the code

370
00:10:06,076 --> 0:10:07,436
more fluent at the point that I

371
00:10:07,436 --> 0:10:09,316
was using it, just part of the

372
00:10:09,346 --> 0:10:09,706
process.

373
00:10:10,816 --> 0:10:14,346
I can tap and drag to reorder

374
00:10:14,346 --> 0:10:16,726
the tabs, tap the Close button

375
00:10:16,726 --> 0:10:17,276
to close them.

376
00:10:17,496 --> 0:10:18,586
And all of this code is

377
00:10:18,586 --> 0:10:20,576
available for use anywhere in

378
00:10:20,576 --> 0:10:21,166
this document.

379
00:10:21,606 --> 0:10:22,256
Quite convenient.

380
00:10:23,006 --> 0:10:25,336
Now, let's fast forward a bit

381
00:10:25,336 --> 0:10:26,406
more in this story.

382
00:10:26,606 --> 0:10:27,626
I've been poking around a bit

383
00:10:27,626 --> 0:10:28,876
with SpriteKit, refreshing my

384
00:10:28,876 --> 0:10:29,976
memory about how it works.

385
00:10:30,196 --> 0:10:32,356
Let's see how far I've gotten on

386
00:10:32,356 --> 0:10:33,206
the next page.

387
00:10:33,766 --> 0:10:35,206
I needed to bring up the

388
00:10:35,206 --> 0:10:36,906
documentation for SpriteKit.

389
00:10:36,906 --> 0:10:38,556
So I did that by tapping on the

390
00:10:38,556 --> 0:10:39,916
Tools Menu icon in the

391
00:10:39,916 --> 0:10:41,206
Navigation Bar and choosing

392
00:10:41,206 --> 0:10:42,006
Documentation.

393
00:10:42,616 --> 0:10:44,536
I searched for it by tapping on

394
00:10:44,536 --> 0:10:46,306
the magnifying glass and search

395
00:10:46,346 --> 0:10:47,216
for SpriteKit.

396
00:10:47,476 --> 0:10:48,886
By reading through this, I was

397
00:10:48,886 --> 0:10:50,296
able to refresh my memory of how

398
00:10:50,296 --> 0:10:52,346
this works, built up this body

399
00:10:52,346 --> 0:10:54,096
of code on the left-hand side of

400
00:10:54,096 --> 0:10:54,676
the screen.

401
00:10:55,046 --> 0:10:56,286
I learned about SpriteKit's

402
00:10:56,346 --> 0:10:58,826
scenes and nodes, that SpriteKit

403
00:10:58,826 --> 0:11:01,496
uses to layout everything in the

404
00:10:58,826 --> 0:11:01,496
uses to layout everything in the

405
00:11:01,496 --> 0:11:02,746
game and render it on the

406
00:11:02,746 --> 0:11:03,186
screen.

407
00:11:03,476 --> 0:11:04,476
I learned about the physics

408
00:11:04,476 --> 0:11:05,756
engine and how you can apply

409
00:11:05,756 --> 0:11:07,316
forces to nodes so that the

410
00:11:07,316 --> 0:11:09,396
physics mechanism starts working

411
00:11:09,396 --> 0:11:09,966
over time.

412
00:11:10,356 --> 0:11:11,746
And I learned about the game

413
00:11:11,746 --> 0:11:13,666
loop when SpriteKit calls my

414
00:11:13,666 --> 0:11:15,796
code back on every frame so that

415
00:11:15,796 --> 0:11:17,186
I can affect changes in the

416
00:11:17,186 --> 0:11:17,646
environment.

417
00:11:17,956 --> 0:11:18,846
That last point is very

418
00:11:18,846 --> 0:11:19,276
important.

419
00:11:19,776 --> 0:11:22,416
Let me close the side panel and

420
00:11:22,416 --> 0:11:24,156
open up the Execution Controls

421
00:11:24,156 --> 0:11:25,006
Menu at the bottom.

422
00:11:25,536 --> 0:11:27,656
Because SpriteKit calls me back

423
00:11:27,656 --> 0:11:28,856
on every frame, I have to be

424
00:11:28,906 --> 0:11:30,296
quick, and I'm going to turn off

425
00:11:30,346 --> 0:11:31,196
the inline result.

426
00:11:31,546 --> 0:11:32,706
As we've seen, they're quite

427
00:11:32,706 --> 0:11:34,866
useful in many cases, but the

428
00:11:34,866 --> 0:11:36,206
logging of those expressions

429
00:11:36,456 --> 0:11:37,276
takes time.

430
00:11:37,586 --> 0:11:38,916
I don't want to slow SpriteKit

431
00:11:38,916 --> 0:11:40,326
down in this case, and I don't

432
00:11:40,326 --> 0:11:40,966
even need them.

433
00:11:41,206 --> 0:11:43,036
Because as you'll see, when I

434
00:11:43,036 --> 0:11:45,456
tap run my code, SpriteKit I set

435
00:11:45,456 --> 0:11:46,746
it up as the live view.

436
00:11:46,746 --> 0:11:48,246
SpriteKit itself is giving me

437
00:11:48,246 --> 0:11:49,526
the feedback that I needed while

438
00:11:49,526 --> 0:11:50,626
working on this part.

439
00:11:51,136 --> 0:11:53,866
And here you go, we have a

440
00:11:54,006 --> 0:11:55,876
circle shape thingy moving

441
00:11:55,876 --> 0:11:57,186
around in response to tilting

442
00:11:57,186 --> 0:11:57,576
the iPad.

443
00:11:57,576 --> 0:11:57,926
All right.

444
00:11:58,346 --> 0:11:59,526
Now, this is an important part

445
00:11:59,526 --> 0:12:00,396
of the story because--

446
00:11:59,526 --> 0:12:00,396
of the story because--

447
00:12:01,436 --> 0:12:04,486
[applause] thank you-- once you

448
00:12:04,486 --> 0:12:05,656
get something like this going,

449
00:12:05,656 --> 0:12:06,636
once you've got this kind of

450
00:12:06,636 --> 0:12:07,706
physical stuff happening on the

451
00:12:07,706 --> 0:12:08,936
screen, you've got to take this

452
00:12:08,936 --> 0:12:10,036
out and do user testing, right?

453
00:12:10,506 --> 0:12:11,686
So I took this to my kids.

454
00:12:12,096 --> 0:12:13,166
And as I started to tell them,

455
00:12:13,166 --> 0:12:13,776
hey, do you want to see

456
00:12:13,776 --> 0:12:15,186
something cool, they interrupted

457
00:12:15,186 --> 0:12:16,486
me, grab the iPad out of my

458
00:12:16,486 --> 0:12:17,676
hands and started looking at it,

459
00:12:17,976 --> 0:12:19,276
and tilting it around to watch

460
00:12:19,276 --> 0:12:20,516
it bounce around the screen.

461
00:12:20,516 --> 0:12:21,636
And they were amused.

462
00:12:21,786 --> 0:12:22,856
They said, "This is nice,

463
00:12:22,856 --> 0:12:23,176
father.

464
00:12:23,176 --> 0:12:23,816
This is very nice."

465
00:12:24,016 --> 0:12:25,976
[Laughter]

466
00:12:25,976 --> 0:12:26,836
But it's missing something.

467
00:12:27,636 --> 0:12:28,726
You see, there are not enough

468
00:12:28,726 --> 0:12:29,686
marbles on the screen.

469
00:12:30,226 --> 0:12:32,066
We need more marbles, lots and

470
00:12:32,066 --> 0:12:33,006
lots of marbles.

471
00:12:34,446 --> 0:12:35,526
They have a future in project

472
00:12:35,526 --> 0:12:37,286
management, all right

473
00:12:37,286 --> 0:12:38,946
[laughter].

474
00:12:38,946 --> 0:12:40,216
This had nothing to do with my

475
00:12:40,216 --> 0:12:42,176
ultimate goal but it did sound

476
00:12:42,176 --> 0:12:42,746
kind of cool.

477
00:12:42,746 --> 0:12:43,766
We should get more marbles.

478
00:12:43,936 --> 0:12:45,266
So I added the tap, just to

479
00:12:45,266 --> 0:12:46,396
recognize and I sat down with

480
00:12:46,396 --> 0:12:46,526
them.

481
00:12:46,526 --> 0:12:47,326
We did this together.

482
00:12:47,326 --> 0:12:48,756
And so, every time you tap now

483
00:12:48,756 --> 0:12:50,516
on the screen, we insert a new

484
00:12:50,516 --> 0:12:52,346
SpriteKit node into the scene

485
00:12:52,506 --> 0:12:54,246
and add it to the physics engine

486
00:12:54,246 --> 0:12:55,666
so that it will participate in

487
00:12:55,666 --> 0:12:56,816
all the fun forces going on

488
00:12:56,816 --> 0:12:56,956
here.

489
00:12:57,256 --> 0:12:58,456
Now, this is usually how it

490
00:12:58,456 --> 0:12:58,646
went.

491
00:12:58,736 --> 0:13:00,616
The younger the child, the more

492
00:12:58,736 --> 0:13:00,616
The younger the child, the more

493
00:13:00,616 --> 0:13:02,156
furiously they would tap to try

494
00:13:02,156 --> 0:13:03,276
to fill this thing up as fast as

495
00:13:03,276 --> 0:13:04,246
they could and they wanted to

496
00:13:04,246 --> 0:13:04,986
see if it would crash.

497
00:13:05,336 --> 0:13:05,766
It didn't.

498
00:13:06,076 --> 0:13:07,186
And then they would just make

499
00:13:07,186 --> 0:13:08,636
this thing go and slosh it

500
00:13:08,636 --> 0:13:08,926
around.

501
00:13:08,926 --> 0:13:10,546
And I'm not going to lie, I find

502
00:13:10,546 --> 0:13:12,946
this absolutely mesmerizing.

503
00:13:12,946 --> 0:13:13,976
I can look at this all--

504
00:13:14,516 --> 0:13:18,986
[Sound Effect]

505
00:13:19,486 --> 0:13:20,196
I'll do that later.

506
00:13:21,016 --> 0:13:26,666
[ Laughter and Applause ]

507
00:13:27,166 --> 0:13:28,266
I would recommend you do it too.

508
00:13:28,266 --> 0:13:28,896
It's very relaxing.

509
00:13:29,286 --> 0:13:31,486
So anyway, we have SpriteKit now

510
00:13:31,716 --> 0:13:33,446
doing something in response to

511
00:13:33,446 --> 0:13:35,426
the accelerometer that's on the

512
00:13:35,426 --> 0:13:36,496
iPad as you tilt it around.

513
00:13:36,496 --> 0:13:37,156
This is close.

514
00:13:37,156 --> 0:13:38,596
We're getting a feel for how

515
00:13:38,596 --> 0:13:39,696
this game could work, and it's

516
00:13:39,696 --> 0:13:40,676
getting more and more exciting.

517
00:13:41,486 --> 0:13:42,966
But now, I need to figure out

518
00:13:42,966 --> 0:13:44,536
how to do this procedural whole

519
00:13:44,536 --> 0:13:45,056
generation.

520
00:13:45,056 --> 0:13:46,866
Now remember, this is a trench

521
00:13:46,866 --> 0:13:48,366
that has the holes laid out that

522
00:13:48,366 --> 0:13:49,336
the marble is supposed to go

523
00:13:49,336 --> 0:13:50,386
pass and avoid them.

524
00:13:50,686 --> 0:13:52,536
And we probably want to remember

525
00:13:52,536 --> 0:13:54,096
the holes that we put down.

526
00:13:54,096 --> 0:13:55,466
So if the user happens to scroll

527
00:13:55,466 --> 0:13:57,756
backwards for some reason, they

528
00:13:57,756 --> 0:13:59,036
can revisit the holes they saw

529
00:13:59,036 --> 0:13:59,466
before.

530
00:14:00,536 --> 0:14:01,786
So let's jump ahead to see an

531
00:14:01,786 --> 0:14:02,896
experiment that I was working

532
00:14:02,896 --> 0:14:03,056
on.

533
00:14:03,636 --> 0:14:05,236
Now, while building this page, I

534
00:14:05,236 --> 0:14:07,066
decided to go into my game

535
00:14:07,146 --> 0:14:12,446
module and create a MapStruct.

536
00:14:12,546 --> 0:14:15,206
This goal of this type was just

537
00:14:15,206 --> 0:14:17,316
to calculate and remember where

538
00:14:17,316 --> 0:14:18,946
the holes go as you're

539
00:14:18,946 --> 0:14:20,156
proceeding through the course.

540
00:14:20,346 --> 0:14:21,816
It basically breaks up the map

541
00:14:21,906 --> 0:14:23,756
into a grid of columns and then

542
00:14:23,756 --> 0:14:24,946
places the holes inside there.

543
00:14:25,236 --> 0:14:25,966
It's really simple.

544
00:14:26,236 --> 0:14:27,546
This could easily be swapped out

545
00:14:27,546 --> 0:14:28,566
for something more intricate or

546
00:14:28,566 --> 0:14:29,566
complicated if I want.

547
00:14:29,806 --> 0:14:31,006
Eh, it works for now.

548
00:14:31,926 --> 0:14:33,576
And also in the Game Engine

549
00:14:33,576 --> 0:14:36,736
Module, I created a MapNode that

550
00:14:36,736 --> 0:14:38,576
receives a map and knows how to

551
00:14:38,576 --> 0:14:40,456
layout the whole nodes at

552
00:14:40,456 --> 0:14:41,656
different points along the

553
00:14:41,656 --> 0:14:41,956
course.

554
00:14:42,096 --> 0:14:43,476
All you have to do is pass it a

555
00:14:43,476 --> 0:14:45,206
rectangle that represents where

556
00:14:45,206 --> 0:14:47,506
the camera is and the viewport

557
00:14:47,706 --> 0:14:49,146
of the-- that the user sees.

558
00:14:49,406 --> 0:14:51,306
As soon as you do that, it will

559
00:14:51,306 --> 0:14:52,846
render the holes in that spot

560
00:14:52,846 --> 0:14:54,326
reusing nodes if it needs to.

561
00:14:54,326 --> 0:14:55,536
It kind of acts like UI table

562
00:14:55,536 --> 0:14:56,416
view, stuff like that.

563
00:14:57,046 --> 0:14:58,436
So, let me run the code here and

564
00:14:58,436 --> 0:14:59,406
we'll see how this works.

565
00:15:00,026 --> 0:15:01,186
We get some inline results on

566
00:15:01,186 --> 0:15:02,156
the right-hand side, and I'm

567
00:15:02,156 --> 0:15:04,006
going to tap to view this

568
00:15:04,006 --> 0:15:04,506
preview.

569
00:15:04,676 --> 0:15:05,996
I wrote this preview method on

570
00:15:05,996 --> 0:15:07,836
the MathNode myself because I

571
00:15:08,116 --> 0:15:10,906
wanted to generate an SKView,

572
00:15:10,906 --> 0:15:12,926
the UIView subclass that shows

573
00:15:12,926 --> 0:15:13,816
SpriteKit scenes.

574
00:15:14,036 --> 0:15:15,066
I wanted to generate it and put

575
00:15:15,066 --> 0:15:16,296
it here so it can just show up

576
00:15:16,296 --> 0:15:17,606
as a static inline result.

577
00:15:17,606 --> 0:15:18,936
I didn't have to build any extra

578
00:15:18,936 --> 0:15:19,796
plumbing to show this up.

579
00:15:19,796 --> 0:15:21,426
It's just right there ready to

580
00:15:21,426 --> 0:15:21,626
go.

581
00:15:21,996 --> 0:15:23,826
And now, we see if the whole

582
00:15:23,826 --> 0:15:25,326
diameter is 20 points wide and

583
00:15:25,796 --> 0:15:26,766
we're at this point in the

584
00:15:26,766 --> 0:15:28,166
course, this is the map density

585
00:15:28,166 --> 0:15:28,446
you'll get.

586
00:15:28,446 --> 0:15:30,346
I can experiment with this

587
00:15:30,346 --> 0:15:32,146
density anyway I want and tweak

588
00:15:32,146 --> 0:15:33,446
the values here, jump into the

589
00:15:33,446 --> 0:15:34,886
other files and tweak those two.

590
00:15:35,156 --> 0:15:36,356
And the inline results gave me

591
00:15:36,356 --> 0:15:37,766
the feedback that I needed at

592
00:15:37,766 --> 0:15:38,236
this point.

593
00:15:40,276 --> 0:15:40,916
Now, we're ready.

594
00:15:41,046 --> 0:15:43,096
Let's skip ahead even further to

595
00:15:43,096 --> 0:15:45,646
the final point where we see the

596
00:15:45,646 --> 0:15:46,026
game.

597
00:15:46,316 --> 0:15:47,996
Now before I start, I have to

598
00:15:47,996 --> 0:15:49,226
turn off the inline results

599
00:15:49,226 --> 0:15:49,696
again.

600
00:15:49,856 --> 0:15:51,396
As before, we're doing a lot of

601
00:15:51,396 --> 0:15:52,246
work on every frame.

602
00:15:52,326 --> 0:15:53,886
And we don't need the expression

603
00:15:53,886 --> 0:15:54,896
logging and we don't want it to

604
00:15:54,896 --> 0:15:55,486
slow us down.

605
00:15:56,256 --> 0:15:57,296
I'll tap around my code, and

606
00:15:58,576 --> 0:15:59,826
there it is.

607
00:16:00,346 --> 0:16:02,366
We have a marble looking thing

608
00:16:02,366 --> 0:16:04,616
on top of a wall looking thing

609
00:16:05,216 --> 0:16:06,016
with parallax.

610
00:16:06,106 --> 0:16:07,376
Look at this, lovely stuff.

611
00:16:07,866 --> 0:16:09,196
Now, when I was working on this

612
00:16:09,196 --> 0:16:11,426
idea, Joy reminded me that

613
00:16:11,626 --> 0:16:12,986
there's a bunch of textures that

614
00:16:12,986 --> 0:16:14,596
I can grab out of the templates

615
00:16:14,676 --> 0:16:16,246
that you can download right in

616
00:16:16,246 --> 0:16:17,266
the app just, you know, grab

617
00:16:17,266 --> 0:16:18,346
those resources and have fun

618
00:16:18,346 --> 0:16:18,616
with them.

619
00:16:18,986 --> 0:16:20,406
So I pulled up the sensor create

620
00:16:20,406 --> 0:16:22,416
template, used the asset picker,

621
00:16:22,766 --> 0:16:23,496
pulled out some of these

622
00:16:23,496 --> 0:16:24,896
textures and dropped them in my

623
00:16:24,896 --> 0:16:25,066
app.

624
00:16:25,066 --> 0:16:25,656
And here they are.

625
00:16:26,156 --> 0:16:29,066
I even went over to a-- an image

626
00:16:29,066 --> 0:16:31,096
editing app to find-- there we

627
00:16:31,096 --> 0:16:32,776
go, make some fuzzy looking hole

628
00:16:32,776 --> 0:16:33,356
shape things.

629
00:16:33,446 --> 0:16:34,396
Oh, that's all right.

630
00:16:35,116 --> 0:16:36,086
It's amazing what radial

631
00:16:36,086 --> 0:16:36,886
gradients can do.

632
00:16:36,886 --> 0:16:37,616
It's so cool.

633
00:16:38,106 --> 0:16:39,186
Here, let me tap in the middle

634
00:16:39,186 --> 0:16:40,676
and make this full screen by

635
00:16:40,676 --> 0:16:42,796
dragging the midpoint all the

636
00:16:42,796 --> 0:16:43,676
way over to the left.

637
00:16:44,146 --> 0:16:45,276
And I'm going to try this again.

638
00:16:45,526 --> 0:16:47,026
I added the tap recognizer to

639
00:16:47,026 --> 0:16:49,316
start over if the game ends.

640
00:16:49,386 --> 0:16:50,896
And let's see how far I get.

641
00:16:51,266 --> 0:16:54,236
The faster you go, the faster it

642
00:16:54,236 --> 0:16:55,946
increases the score to add a

643
00:16:55,946 --> 0:16:57,546
little bit of recklessness to

644
00:16:57,546 --> 0:16:57,976
the fun here.

645
00:16:58,226 --> 0:16:58,876
Whoa, OK.

646
00:17:01,146 --> 0:17:01,946
It's really hard to do this in

647
00:17:01,946 --> 0:17:03,466
front of a crowd [laughs].

648
00:17:04,455 --> 0:17:06,156
But, hey, you know what, all of

649
00:17:06,156 --> 0:17:07,816
what you've seen here, each step

650
00:17:07,816 --> 0:17:08,965
leading up to this point was

651
00:17:08,965 --> 0:17:11,586
done entirely on this iPad.

652
00:17:12,205 --> 0:17:13,286
This was a lot of fun.

653
00:17:13,536 --> 0:17:15,076
My family had a great kick out

654
00:17:15,076 --> 0:17:15,286
of it.

655
00:17:15,806 --> 0:17:17,336
I learned more about SpriteKit.

656
00:17:17,336 --> 0:17:18,746
I had a chance to use the new

657
00:17:18,746 --> 0:17:20,205
user module and source file

658
00:17:20,205 --> 0:17:21,945
support in the app to break up

659
00:17:21,945 --> 0:17:23,306
what I was doing into different

660
00:17:23,306 --> 0:17:23,596
pieces.

661
00:17:23,886 --> 0:17:25,195
It was a fantastic experience.

662
00:17:25,876 --> 0:17:27,366
Swift Playgrounds on iPad is a

663
00:17:27,366 --> 0:17:29,376
great scratchpad to try out your

664
00:17:29,376 --> 0:17:32,136
ideas, maybe even look and use

665
00:17:32,136 --> 0:17:33,636
our APIs and see how they work,

666
00:17:34,306 --> 0:17:35,836
or even increase the stress in

667
00:17:35,836 --> 0:17:36,856
your life by building speed

668
00:17:36,856 --> 0:17:37,886
running games to play with your

669
00:17:37,886 --> 0:17:38,226
friends.

670
00:17:38,966 --> 0:17:40,526
And now, I would like to invite

671
00:17:40,806 --> 0:17:42,716
Grace back up to the stage so

672
00:17:42,716 --> 0:17:44,126
that she can talk about how this

673
00:17:44,126 --> 0:17:45,866
stuff works and do a deep dive

674
00:17:45,866 --> 0:17:47,306
into how you can use these new

675
00:17:47,306 --> 0:17:49,016
features to make the most of

676
00:17:49,016 --> 0:17:50,186
Swift Playgrounds 3.

677
00:17:50,666 --> 0:17:50,896
Thank you.

678
00:17:51,516 --> 0:17:59,046
[ Applause and Cheering ]

679
00:17:59,546 --> 0:18:00,536
&gt;&gt; Thanks, Jonathan.

680
00:17:59,546 --> 0:18:00,536
&gt;&gt; Thanks, Jonathan.

681
00:18:02,216 --> 0:18:03,796
So, if you're already familiar

682
00:18:03,796 --> 0:18:05,136
with Swift Playgrounds, you

683
00:18:05,136 --> 0:18:06,386
might have noticed a couple of

684
00:18:06,386 --> 0:18:07,786
new things in Jonathan's demo.

685
00:18:08,216 --> 0:18:11,156
Let's go through those now.

686
00:18:11,396 --> 0:18:13,356
Most notably is the addition of

687
00:18:13,356 --> 0:18:14,866
Modules, which allow you to

688
00:18:14,866 --> 0:18:16,616
separate your code into multiple

689
00:18:16,696 --> 0:18:17,416
Swift files.

690
00:18:19,146 --> 0:18:20,506
Modules are represented as

691
00:18:20,536 --> 0:18:22,056
directories of Swift code that

692
00:18:22,056 --> 0:18:23,816
can be used by any page in a

693
00:18:23,816 --> 0:18:23,986
book.

694
00:18:24,436 --> 0:18:25,326
And you don't need to worry

695
00:18:25,326 --> 0:18:27,286
about setting targets or making

696
00:18:27,286 --> 0:18:30,046
new build settings.

697
00:18:30,166 --> 0:18:32,046
Users can add modules to books

698
00:18:32,046 --> 0:18:33,656
as well as Swift files to any

699
00:18:33,656 --> 0:18:34,116
module.

700
00:18:35,426 --> 0:18:36,726
Be aware though that if you

701
00:18:36,726 --> 0:18:38,416
reset a document, all of the

702
00:18:38,416 --> 0:18:40,156
user edits are reset as well.

703
00:18:40,396 --> 0:18:42,276
And this does include any added

704
00:18:42,276 --> 0:18:43,416
files or modules.

705
00:18:46,566 --> 0:18:48,286
So with the opportunity for all

706
00:18:48,286 --> 0:18:50,096
of these new files, let's go

707
00:18:50,096 --> 0:18:51,166
through the structure of a

708
00:18:51,266 --> 0:18:51,786
Playground.

709
00:18:52,396 --> 0:18:53,436
I'll be using the shapes

710
00:18:53,436 --> 0:18:54,656
template as an example.

711
00:18:56,436 --> 0:18:58,556
Each book has a set of pages,

712
00:19:00,026 --> 0:19:01,676
and each book can also have

713
00:19:01,676 --> 0:19:02,696
multiple modules.

714
00:19:03,426 --> 0:19:06,176
Each of these modules in turn

715
00:19:06,226 --> 0:19:07,936
can have multiple source files.

716
00:19:09,866 --> 0:19:11,646
So, let's quickly talk about the

717
00:19:11,806 --> 0:19:13,556
access levels between all of

718
00:19:13,556 --> 0:19:14,786
these different Swift files.

719
00:19:16,736 --> 0:19:19,246
Code in pages is not shared to

720
00:19:19,246 --> 0:19:20,516
other pages within a book.

721
00:19:21,136 --> 0:19:22,726
That is to say, the code on the

722
00:19:22,726 --> 0:19:24,726
Canvas page is not shared with

723
00:19:24,776 --> 0:19:26,306
the code on the Create page.

724
00:19:27,606 --> 0:19:29,326
However, every module is

725
00:19:29,386 --> 0:19:31,336
automatically imported into each

726
00:19:31,336 --> 0:19:31,916
page.

727
00:19:32,386 --> 0:19:33,626
This means that the code in your

728
00:19:33,626 --> 0:19:35,606
modules is accessible on every

729
00:19:35,636 --> 0:19:37,196
page as long as that code is

730
00:19:37,196 --> 0:19:40,996
marked as public.

731
00:19:41,096 --> 0:19:42,656
Files within the same module

732
00:19:42,656 --> 0:19:43,916
have access to each other

733
00:19:43,916 --> 0:19:45,566
without needing to mark code as

734
00:19:45,566 --> 0:19:45,896
public.

735
00:19:46,486 --> 0:19:47,956
However, if code is marked as

736
00:19:48,026 --> 0:19:49,526
private, it won't be visible to

737
00:19:49,526 --> 0:19:52,166
other files in other modules or

738
00:19:52,166 --> 0:19:52,666
pages.

739
00:19:52,886 --> 0:19:54,096
It'll just be private to that

740
00:19:54,096 --> 0:19:54,446
file.

741
00:19:57,036 --> 0:19:58,976
Code between modules is not

742
00:19:58,976 --> 0:20:00,046
shared by default.

743
00:19:58,976 --> 0:20:00,046
shared by default.

744
00:20:01,146 --> 0:20:03,226
But let's say I have some code

745
00:20:03,226 --> 0:20:04,786
in my Graphics Module that I

746
00:20:04,786 --> 0:20:05,806
want to reference in my

747
00:20:05,806 --> 0:20:07,736
Calculus.swift file which is in

748
00:20:07,736 --> 0:20:08,756
my Math Module.

749
00:20:09,656 --> 0:20:11,046
All I have to do is make sure

750
00:20:11,046 --> 0:20:12,396
the Graphics code is marked as

751
00:20:12,446 --> 0:20:14,206
public, and then import the

752
00:20:14,206 --> 0:20:15,586
Graphics Module into my

753
00:20:15,586 --> 0:20:19,786
Calculus.swift file.

754
00:20:19,996 --> 0:20:21,526
With modules, you'll still have

755
00:20:21,526 --> 0:20:23,176
access to inline results and

756
00:20:23,176 --> 0:20:24,376
step through execution.

757
00:20:24,526 --> 0:20:25,956
So you can watch the path that

758
00:20:25,956 --> 0:20:27,506
your code takes between all of

759
00:20:27,506 --> 0:20:28,056
your files.

760
00:20:28,936 --> 0:20:30,086
As the app steps through your

761
00:20:30,086 --> 0:20:31,866
code, it automatically switches

762
00:20:31,916 --> 0:20:33,166
between the files where your

763
00:20:33,166 --> 0:20:34,166
code is executing.

764
00:20:36,156 --> 0:20:37,706
You can also turn off inline

765
00:20:37,706 --> 0:20:39,066
results which can speed up

766
00:20:39,066 --> 0:20:40,366
execution as we saw in

767
00:20:40,366 --> 0:20:41,216
Jonathan's demo.

768
00:20:42,156 --> 0:20:43,736
You can find this control within

769
00:20:43,736 --> 0:20:45,636
the Execution Control Menu along

770
00:20:45,636 --> 0:20:47,106
with Step Through My Code and

771
00:20:47,106 --> 0:20:47,806
Step Slowly.

772
00:20:50,596 --> 0:20:52,726
The new Issues popover can show

773
00:20:52,726 --> 0:20:54,116
you errors throughout all of

774
00:20:54,116 --> 0:20:55,736
your files in a document and

775
00:20:55,736 --> 0:20:57,066
allow you to easily navigate

776
00:20:57,096 --> 0:20:58,326
between them.

777
00:20:59,136 --> 0:21:00,926
If you tap on any of the errors,

778
00:20:59,136 --> 0:21:00,926
If you tap on any of the errors,

779
00:21:01,336 --> 0:21:02,486
it'll take you right to the

780
00:21:02,486 --> 0:21:04,336
corresponding line, both for

781
00:21:04,336 --> 0:21:07,726
builds and for runtime errors.

782
00:21:09,676 --> 0:21:11,606
Swift Playgrounds support Swift

783
00:21:11,606 --> 0:21:14,186
5 and the iOS 12.2 SDK.

784
00:21:15,026 --> 0:21:15,766
This lets you play with

785
00:21:15,766 --> 0:21:18,046
frameworks like Core ML 2 and

786
00:21:18,046 --> 0:21:20,526
ARKit 2, developing for iOS

787
00:21:21,016 --> 0:21:23,086
right on iOS.

788
00:21:24,236 --> 0:21:26,256
So now, all from a blank

789
00:21:26,326 --> 0:21:28,936
Playground, you can add pages

790
00:21:28,936 --> 0:21:30,156
through the Table of Contents

791
00:21:30,206 --> 0:21:34,706
popover, add modules, and add

792
00:21:34,866 --> 0:21:36,446
Swift source files to those

793
00:21:36,446 --> 0:21:38,836
modules all without ever leaving

794
00:21:39,616 --> 0:21:39,826
the app.

795
00:21:41,236 --> 0:21:43,646
So there are also lots of ways

796
00:21:43,686 --> 0:21:45,616
to customize your content, like

797
00:21:45,676 --> 0:21:47,416
setting module modes, adding

798
00:21:47,416 --> 0:21:49,266
localizable code comments, and

799
00:21:49,266 --> 0:21:50,676
changing what files the user

800
00:21:50,676 --> 0:21:51,956
sees when they open your

801
00:21:51,956 --> 0:21:52,426
document.

802
00:21:53,046 --> 0:21:54,366
So I'd next like to invite my

803
00:21:54,366 --> 0:21:55,896
colleague Joy to the stage to

804
00:21:55,896 --> 0:21:56,406
tell you how.

805
00:21:57,516 --> 0:22:01,366
[ Applause and Cheering ]

806
00:21:57,516 --> 0:22:01,366
[ Applause and Cheering ]

807
00:22:01,866 --> 0:22:02,426
&gt;&gt; Thanks, Grace.

808
00:22:06,306 --> 0:22:07,606
Next, let's talk about all the

809
00:22:07,606 --> 0:22:09,016
new features authors can

810
00:22:09,016 --> 0:22:10,796
customize in Xcode whether

811
00:22:10,796 --> 0:22:11,766
you're sharing your Playground

812
00:22:11,766 --> 0:22:12,996
directly or through a

813
00:22:13,046 --> 0:22:13,716
subscription.

814
00:22:15,386 --> 0:22:16,496
When I'm teaching, it's

815
00:22:16,496 --> 0:22:17,916
important for the tools I give

816
00:22:17,916 --> 0:22:19,376
my students to be leveled

817
00:22:19,376 --> 0:22:20,916
appropriately and as user

818
00:22:20,986 --> 0:22:22,106
friendly as possible.

819
00:22:23,586 --> 0:22:24,546
In order to create the right

820
00:22:24,546 --> 0:22:26,286
tool for your audience at any

821
00:22:26,286 --> 0:22:28,006
level, there's several features

822
00:22:28,006 --> 0:22:29,586
you can take advantage of in

823
00:22:29,586 --> 0:22:31,696
Swift Playgrounds 3 to highlight

824
00:22:31,696 --> 0:22:32,796
the most important parts of your

825
00:22:32,826 --> 0:22:34,286
Playground and remove

826
00:22:34,286 --> 0:22:35,686
unnecessary complexity.

827
00:22:36,546 --> 0:22:37,876
All these new features can help

828
00:22:37,916 --> 0:22:39,716
you create more engaging content

829
00:22:40,056 --> 0:22:41,036
and give your learners a

830
00:22:41,166 --> 0:22:42,746
friendly experience in a real

831
00:22:42,746 --> 0:22:43,556
developer tool.

832
00:22:45,376 --> 0:22:46,236
First, let's dive into the

833
00:22:46,236 --> 0:22:46,936
Module Modes.

834
00:22:47,416 --> 0:22:48,576
Now, you've heard a lot about

835
00:22:48,576 --> 0:22:50,196
Module Modes in the app from

836
00:22:50,196 --> 0:22:51,316
both Jonathan and Grace.

837
00:22:52,286 --> 0:22:54,116
As an author, you can decide

838
00:22:54,116 --> 0:22:55,496
what Module Mode is right for

839
00:22:55,496 --> 0:22:55,956
your book.

840
00:22:57,066 --> 0:22:58,186
Because all modules are an

841
00:22:58,186 --> 0:23:00,166
exciting new feature, not all

842
00:22:58,186 --> 0:23:00,166
exciting new feature, not all

843
00:23:00,166 --> 0:23:01,386
books will benefit from the use

844
00:23:01,386 --> 0:23:01,926
of modules.

845
00:23:02,526 --> 0:23:03,896
And for that purpose, we have

846
00:23:03,896 --> 0:23:06,066
three module modes: None,

847
00:23:06,166 --> 0:23:07,096
Limited, and Full.

848
00:23:07,656 --> 0:23:08,996
The Module Mode you choose will

849
00:23:08,996 --> 0:23:10,236
change the nature of your book

850
00:23:10,356 --> 0:23:12,086
fundamentally, and should be

851
00:23:12,086 --> 0:23:13,436
considered the foundation of

852
00:23:13,436 --> 0:23:14,486
your user experience.

853
00:23:16,046 --> 0:23:17,376
Let's start with the module

854
00:23:17,476 --> 0:23:18,706
called None.

855
00:23:19,736 --> 0:23:21,536
This mode gives your students

856
00:23:21,586 --> 0:23:22,756
the original Playground

857
00:23:22,756 --> 0:23:24,846
experience, not allowing any

858
00:23:24,916 --> 0:23:26,136
access to user modules.

859
00:23:26,926 --> 0:23:28,466
This mode relies completely on

860
00:23:28,466 --> 0:23:30,106
pages and chapters to advance

861
00:23:30,106 --> 0:23:30,946
the story and code.

862
00:23:31,556 --> 0:23:33,326
And each page works completely

863
00:23:33,326 --> 0:23:35,406
independently so no user code is

864
00:23:35,406 --> 0:23:37,706
shared between pages in any way.

865
00:23:39,316 --> 0:23:41,316
In the Module Mode None, all of

866
00:23:41,316 --> 0:23:42,466
the code in your book will go

867
00:23:42,466 --> 0:23:43,536
into the Modules folder.

868
00:23:44,626 --> 0:23:46,246
This will create private modules

869
00:23:46,606 --> 0:23:47,846
that can be referenced in your

870
00:23:47,886 --> 0:23:49,806
Playground book but not editable

871
00:23:49,806 --> 0:23:50,586
by your students.

872
00:23:51,666 --> 0:23:53,006
You can use private modules in

873
00:23:53,006 --> 0:23:53,976
any of the three modes.

874
00:23:54,406 --> 0:23:55,436
However, the difference in the

875
00:23:55,436 --> 0:23:57,356
Module Mode None is that all of

876
00:23:57,356 --> 0:23:59,226
your code will go into private

877
00:23:59,796 --> 0:24:00,006
modules.

878
00:23:59,796 --> 0:24:00,006
modules.

879
00:24:01,046 --> 0:24:03,036
As you build your book, keep in

880
00:24:03,036 --> 0:24:04,416
mind that pages and chapters are

881
00:24:04,416 --> 0:24:06,046
intended to be experienced

882
00:24:06,046 --> 0:24:06,606
linearly.

883
00:24:07,406 --> 0:24:08,926
As the author, you should think

884
00:24:08,926 --> 0:24:10,276
about what the goal is for each

885
00:24:10,276 --> 0:24:11,716
page, and have each page

886
00:24:11,816 --> 0:24:13,336
culminate in something new, you

887
00:24:13,336 --> 0:24:15,256
can do or see in the live view.

888
00:24:16,246 --> 0:24:17,176
This will give your learners a

889
00:24:17,326 --> 0:24:19,106
tight feedback loop ensuring

890
00:24:19,106 --> 0:24:20,436
they know they've completed the

891
00:24:20,436 --> 0:24:22,076
task and they're ready to move

892
00:24:22,076 --> 0:24:22,376
on.

893
00:24:24,346 --> 0:24:26,096
To see examples in our library

894
00:24:26,096 --> 0:24:28,446
of Module Mode-- of this Module

895
00:24:28,446 --> 0:24:30,006
Mode books, you can check out

896
00:24:30,006 --> 0:24:31,596
Learn to Code 1, Learn to Code

897
00:24:31,676 --> 0:24:33,666
2, Lights, Camera, Code, and a

898
00:24:33,666 --> 0:24:37,676
variety of our challenges.

899
00:24:37,676 --> 0:24:39,146
Now, Limited Mode is your first

900
00:24:39,266 --> 0:24:40,806
foray into user modules and

901
00:24:40,806 --> 0:24:41,466
shared files.

902
00:24:42,356 --> 0:24:43,926
Limited Mode allows for a single

903
00:24:43,926 --> 0:24:44,656
user module.

904
00:24:45,036 --> 0:24:46,376
And unlike private modules.

905
00:24:46,886 --> 0:24:48,616
user modules are completely

906
00:24:48,616 --> 0:24:50,696
editable by your students.

907
00:24:51,916 --> 0:24:53,606
The shared files in a user

908
00:24:53,606 --> 0:24:54,926
module persist throughout the

909
00:24:54,966 --> 0:24:56,496
book and they're placed to build

910
00:24:56,496 --> 0:24:57,246
up code over time.

911
00:24:58,546 --> 0:25:00,156
With access to a single module,

912
00:24:58,546 --> 0:25:00,156
With access to a single module,

913
00:25:00,546 --> 0:25:01,706
your students can learn how to

914
00:25:01,706 --> 0:25:04,186
manage multiple files and bugs

915
00:25:04,256 --> 0:25:05,566
coming from files they don't

916
00:25:05,566 --> 0:25:08,586
necessarily have open.

917
00:25:08,806 --> 0:25:10,606
Within your one module, you can

918
00:25:10,606 --> 0:25:12,266
provide as many shared files as

919
00:25:12,266 --> 0:25:14,586
you want and your learners can

920
00:25:14,586 --> 0:25:16,446
edit, create, or delete any of

921
00:25:16,446 --> 0:25:17,516
the shared files within their

922
00:25:17,516 --> 0:25:18,266
user module.

923
00:25:20,356 --> 0:25:21,806
As the author, you can also use

924
00:25:21,856 --> 0:25:24,916
private modules to include API

925
00:25:25,076 --> 0:25:26,616
you don't want to be editable by

926
00:25:26,616 --> 0:25:28,096
your students in the modules

927
00:25:28,096 --> 0:25:28,576
directory.

928
00:25:29,156 --> 0:25:31,986
As you saw in Jonathan's demo,

929
00:25:32,286 --> 0:25:34,196
he did several math functions to

930
00:25:34,266 --> 0:25:35,846
a single Math.swift file.

931
00:25:36,846 --> 0:25:38,336
Adding new shared files is a

932
00:25:38,546 --> 0:25:40,076
great learning opportunity to

933
00:25:40,076 --> 0:25:41,616
teach how to organize code in

934
00:25:41,616 --> 0:25:42,416
logical ways.

935
00:25:43,616 --> 0:25:44,806
You can teach your students to

936
00:25:44,806 --> 0:25:46,526
move code into a shared file

937
00:25:46,526 --> 0:25:47,676
they'll build up over several

938
00:25:47,676 --> 0:25:49,976
pages, or move aside code

939
00:25:49,976 --> 0:25:51,146
they'll change in frequently.

940
00:25:52,916 --> 0:25:54,676
To see examples in our library

941
00:25:54,676 --> 0:25:56,306
of Limited Mode books, you can

942
00:25:56,306 --> 0:25:57,526
check out Blu's Adventure,

943
00:25:57,686 --> 0:25:59,516
Assemble Your Camera, Flashy

944
00:25:59,516 --> 0:26:00,886
Photos, and a variety of the

945
00:25:59,516 --> 0:26:00,886
Photos, and a variety of the

946
00:26:00,936 --> 0:26:02,276
challenges, some of which you

947
00:26:02,276 --> 0:26:02,716
see here.

948
00:26:03,396 --> 0:26:06,346
And if you want all the bells

949
00:26:06,346 --> 0:26:07,736
and whistles, you have Full

950
00:26:07,736 --> 0:26:08,476
Module Mode.

951
00:26:09,326 --> 0:26:10,696
This mode gives you all the

952
00:26:10,696 --> 0:26:12,166
tools available, including

953
00:26:12,166 --> 0:26:14,476
making multiple modules, and new

954
00:26:14,476 --> 0:26:15,806
files within those modules.

955
00:26:16,436 --> 0:26:18,926
This mode is perfect for

956
00:26:18,926 --> 0:26:20,356
teaching code architecture and

957
00:26:20,356 --> 0:26:21,106
organization.

958
00:26:21,706 --> 0:26:23,826
In Full Module Mode, you cannot

959
00:26:23,826 --> 0:26:25,046
only teach how to manage

960
00:26:25,046 --> 0:26:26,666
multiple files, but multiple

961
00:26:26,666 --> 0:26:28,546
modules, and importing those

962
00:26:28,546 --> 0:26:29,906
modules into each other when

963
00:26:29,906 --> 0:26:30,546
necessary.

964
00:26:32,516 --> 0:26:34,516
In Full Module Mode, you can

965
00:26:34,516 --> 0:26:36,296
still use private modules and as

966
00:26:36,296 --> 0:26:38,206
many prebuilt user modules as

967
00:26:38,246 --> 0:26:38,536
you want.

968
00:26:39,846 --> 0:26:41,396
Full Module Mode also gives your

969
00:26:41,606 --> 0:26:43,676
students the freedom to extend

970
00:26:43,676 --> 0:26:45,916
those user modules and make user

971
00:26:45,916 --> 0:26:46,996
modules of their own.

972
00:26:48,376 --> 0:26:49,296
When you're authoring for

973
00:26:49,296 --> 0:26:50,896
modules, you should consider

974
00:26:51,076 --> 0:26:51,856
when you might want to use a

975
00:26:51,856 --> 0:26:53,786
private module versus a user

976
00:26:53,786 --> 0:26:54,196
module.

977
00:26:54,826 --> 0:26:57,416
By putting all the code into a

978
00:26:57,416 --> 0:26:59,356
user module, your students can

979
00:26:59,356 --> 0:27:01,076
go beyond simply just playing in

980
00:26:59,356 --> 0:27:01,076
go beyond simply just playing in

981
00:27:01,076 --> 0:27:02,896
your Playground to seeing how

982
00:27:02,896 --> 0:27:03,356
it's built.

983
00:27:04,316 --> 0:27:05,756
It also gives them complete

984
00:27:05,756 --> 0:27:07,456
control to tinker and remix,

985
00:27:08,256 --> 0:27:09,676
giving your students a chance to

986
00:27:09,676 --> 0:27:12,826
go beyond just being a student

987
00:27:12,826 --> 0:27:14,556
to getting that much closer to

988
00:27:14,716 --> 0:27:15,886
becoming app developers

989
00:27:15,886 --> 0:27:16,576
themselves.

990
00:27:18,896 --> 0:27:20,436
To see examples in our library

991
00:27:20,436 --> 0:27:22,236
of Full Module Mode books, check

992
00:27:22,236 --> 0:27:23,486
out any of the starting points.

993
00:27:24,556 --> 0:27:26,816
And to specify which module mode

994
00:27:26,816 --> 0:27:27,806
you want your book to full

995
00:27:27,806 --> 0:27:29,486
under, you must edit the key

996
00:27:29,956 --> 0:27:31,816
UserModuleMode in the book level

997
00:27:31,816 --> 0:27:32,256
Manifest.

998
00:27:34,966 --> 0:27:36,936
Another customization you can do

999
00:27:37,146 --> 0:27:39,256
when using modules in Limited

1000
00:27:39,256 --> 0:27:41,506
and Full Mode is auto-opening

1001
00:27:41,686 --> 0:27:43,606
and activating files on a page

1002
00:27:43,636 --> 0:27:44,596
by page basis.

1003
00:27:46,676 --> 0:27:47,736
Now, that you can expose

1004
00:27:47,736 --> 0:27:49,356
multiple files in a tabbed

1005
00:27:49,356 --> 0:27:51,266
editor experience, you can

1006
00:27:51,366 --> 0:27:52,786
specify which files will be

1007
00:27:52,786 --> 0:27:54,516
opened and which one will be

1008
00:27:54,716 --> 0:27:55,636
active when you arrive on a

1009
00:27:55,636 --> 0:27:56,076
page.

1010
00:27:56,746 --> 0:27:59,846
To add open files means that

1011
00:27:59,846 --> 0:28:01,326
main.swift will be the active

1012
00:27:59,846 --> 0:28:01,326
main.swift will be the active

1013
00:28:01,326 --> 0:28:02,856
file, but there may be other

1014
00:28:02,856 --> 0:28:04,566
files open as tabs in the

1015
00:28:04,566 --> 0:28:04,856
editor.

1016
00:28:05,836 --> 0:28:07,206
Providing the user with open

1017
00:28:07,206 --> 0:28:08,476
shared files when they arrive on

1018
00:28:08,476 --> 0:28:10,306
a page will help them know which

1019
00:28:10,306 --> 0:28:12,236
files they'll be editing or need

1020
00:28:12,236 --> 0:28:13,916
to reference without having to

1021
00:28:13,916 --> 0:28:15,586
locate those files themselves in

1022
00:28:15,586 --> 0:28:16,676
the files' popover.

1023
00:28:19,146 --> 0:28:20,706
You can specify which files will

1024
00:28:20,756 --> 0:28:23,356
be opened on a per page basis in

1025
00:28:23,356 --> 0:28:24,386
the page of a Manifest.

1026
00:28:26,396 --> 0:28:28,356
In the Manifest, used the key

1027
00:28:28,476 --> 0:28:30,496
UserModuleSourceFilesToOpen

1028
00:28:31,746 --> 0:28:33,086
followed by an array of shared

1029
00:28:33,126 --> 0:28:33,506
files.

1030
00:28:34,346 --> 0:28:35,776
The value of each item should be

1031
00:28:35,776 --> 0:28:37,276
the relative path to a shared

1032
00:28:37,276 --> 0:28:37,616
file.

1033
00:28:38,236 --> 0:28:41,706
In any case that you opened

1034
00:28:41,706 --> 0:28:43,686
files, the default action is for

1035
00:28:43,686 --> 0:28:45,896
main.swift to be the front most

1036
00:28:45,896 --> 0:28:47,326
file or the active file.

1037
00:28:48,746 --> 0:28:50,086
However, if one of the shared

1038
00:28:50,086 --> 0:28:51,486
files is going to be the first

1039
00:28:51,486 --> 0:28:52,736
or most prominent place your

1040
00:28:52,736 --> 0:28:54,506
user will be working, you can

1041
00:28:54,506 --> 0:28:56,266
set this file to be active when

1042
00:28:56,266 --> 0:28:57,276
they arrive on a page.

1043
00:28:59,116 --> 0:29:00,486
To declare a shared file to be

1044
00:28:59,116 --> 0:29:00,486
To declare a shared file to be

1045
00:29:00,676 --> 0:29:02,156
active, use the key

1046
00:29:02,596 --> 0:29:04,696
UserModuleSourceFileToActivate

1047
00:29:04,956 --> 0:29:05,956
again in the page level

1048
00:29:05,956 --> 0:29:06,396
Manifest.

1049
00:29:07,436 --> 0:29:08,616
The value of this key is the

1050
00:29:08,616 --> 0:29:10,416
path to a single shared file.

1051
00:29:11,946 --> 0:29:13,976
Now, Code Completion is

1052
00:29:13,976 --> 0:29:14,926
something you've always been

1053
00:29:14,926 --> 0:29:16,166
able to do in main files.

1054
00:29:16,916 --> 0:29:18,156
Now, in Swift Playgrounds, let's

1055
00:29:18,196 --> 0:29:20,496
see how Code Completion has been

1056
00:29:20,496 --> 0:29:22,706
extended to shared files.

1057
00:29:24,176 --> 0:29:25,686
Code Completion Directives

1058
00:29:25,736 --> 0:29:27,646
determine what API is exposed in

1059
00:29:27,646 --> 0:29:28,366
the Shortcut bar.

1060
00:29:29,256 --> 0:29:30,246
The Shortcut bar can be a

1061
00:29:30,246 --> 0:29:31,636
helpful tool to keep your

1062
00:29:31,636 --> 0:29:33,506
learners on track, minimize the

1063
00:29:33,576 --> 0:29:34,976
time they have to type, and

1064
00:29:34,976 --> 0:29:36,216
ensure they always know what to

1065
00:29:36,216 --> 0:29:36,516
do next.

1066
00:29:37,806 --> 0:29:39,426
In the introductory content, you

1067
00:29:39,426 --> 0:29:40,526
want to lower the barrier to

1068
00:29:40,586 --> 0:29:42,206
entry by enabling your students

1069
00:29:42,206 --> 0:29:43,406
to tap through most of their

1070
00:29:43,486 --> 0:29:43,736
code.

1071
00:29:44,586 --> 0:29:45,876
In more advanced content, you

1072
00:29:46,076 --> 0:29:47,786
want to expose API at the right

1073
00:29:47,786 --> 0:29:47,926
times.

1074
00:29:49,906 --> 0:29:51,916
As the author, you can control

1075
00:29:51,996 --> 0:29:53,376
what appears in the Shortcut bar

1076
00:29:53,606 --> 0:29:56,046
on a page by page basis in both

1077
00:29:56,096 --> 0:29:57,336
main and shared files.

1078
00:29:57,716 --> 0:30:00,706
In order to manage these

1079
00:29:57,716 --> 0:30:00,706
In order to manage these

1080
00:30:00,776 --> 0:30:02,566
completions, Swift Playgrounds

1081
00:30:02,566 --> 0:30:04,636
now offers two places you can

1082
00:30:04,636 --> 0:30:05,846
provide Code Completion

1083
00:30:05,846 --> 0:30:06,366
Directives.

1084
00:30:07,856 --> 0:30:09,006
Let's start in a place you might

1085
00:30:09,006 --> 0:30:10,396
be familiar with in the

1086
00:30:10,396 --> 0:30:12,876
main.swift file.

1087
00:30:14,066 --> 0:30:15,406
Now, this is just the start of

1088
00:30:15,406 --> 0:30:16,916
what you'll see if you don't

1089
00:30:16,916 --> 0:30:18,066
have any Code Completion

1090
00:30:18,066 --> 0:30:19,906
Directives in the new content,

1091
00:30:19,906 --> 0:30:20,736
Assemble Your Camera.

1092
00:30:22,346 --> 0:30:23,776
To ensure you have full control

1093
00:30:23,776 --> 0:30:24,686
over what appears in the

1094
00:30:24,686 --> 0:30:26,626
Shortcut bar, you want to start

1095
00:30:26,626 --> 0:30:28,006
with a directive, everything,

1096
00:30:28,006 --> 0:30:28,336
hide.

1097
00:30:29,086 --> 0:30:30,516
Just as it sounds, this will

1098
00:30:30,516 --> 0:30:31,496
hide everything from the

1099
00:30:31,496 --> 0:30:33,346
Shortcut bar giving you a blank

1100
00:30:33,446 --> 0:30:34,966
slate to work from.

1101
00:30:35,896 --> 0:30:37,566
To start building suggestions

1102
00:30:37,636 --> 0:30:39,396
back into the Shortcut bar, you

1103
00:30:39,396 --> 0:30:40,846
can use currentmodule, show.

1104
00:30:41,386 --> 0:30:42,996
This is a special keyword that

1105
00:30:43,096 --> 0:30:45,076
you can use to ensure everything

1106
00:30:45,076 --> 0:30:46,786
you or your students create on

1107
00:30:46,786 --> 0:30:48,706
the main file is shown.

1108
00:30:50,076 --> 0:30:51,686
The directive module show,

1109
00:30:52,116 --> 0:30:53,626
followed by comma separated list

1110
00:30:53,626 --> 0:30:55,466
of modules will show everything

1111
00:30:55,466 --> 0:30:57,066
marked as public in those user

1112
00:30:57,066 --> 0:30:59,356
module files, as well as any new

1113
00:30:59,356 --> 0:31:00,536
code a user may write while

1114
00:30:59,356 --> 0:31:00,536
code a user may write while

1115
00:31:00,616 --> 0:31:01,486
playing in your Playground.

1116
00:31:02,886 --> 0:31:04,126
This is the same directive you

1117
00:31:04,126 --> 0:31:05,246
would have used to expose a

1118
00:31:05,246 --> 0:31:06,596
library like UIKit.

1119
00:31:07,666 --> 0:31:08,756
For more information about the

1120
00:31:08,756 --> 0:31:10,236
various directives, please check

1121
00:31:10,236 --> 0:31:11,866
out the documentation for Swift

1122
00:31:12,666 --> 0:31:12,936
Playgrounds.

1123
00:31:14,476 --> 0:31:16,056
And newly added in Swift

1124
00:31:16,056 --> 0:31:18,226
Playgrounds 3 is how to add Code

1125
00:31:18,226 --> 0:31:19,446
Completion Directives in a

1126
00:31:19,446 --> 0:31:21,976
shared file in the page of a

1127
00:31:21,976 --> 0:31:22,486
Manifest.

1128
00:31:23,896 --> 0:31:25,196
This means that just like how

1129
00:31:25,196 --> 0:31:26,906
you can scaffold what API is

1130
00:31:26,906 --> 0:31:28,616
exposed in the main files as

1131
00:31:28,616 --> 0:31:29,586
your students move through your

1132
00:31:29,586 --> 0:31:31,526
book, you can do this in shared

1133
00:31:31,526 --> 0:31:33,346
files as well, ensuring you

1134
00:31:33,346 --> 0:31:34,696
won't overload your learners at

1135
00:31:34,696 --> 0:31:35,776
the start of their journey.

1136
00:31:36,426 --> 0:31:39,936
To do this, you'll use the key

1137
00:31:40,236 --> 0:31:40,976
UserModule

1138
00:31:40,976 --> 0:31:42,326
CodeCompletionDirectives

1139
00:31:43,086 --> 0:31:44,326
followed by an array of Code

1140
00:31:44,326 --> 0:31:46,106
Completion Directives similar to

1141
00:31:46,196 --> 0:31:47,376
how you would make them in the

1142
00:31:47,376 --> 0:31:47,946
main file.

1143
00:31:50,186 --> 0:31:51,696
Again, if using everything hide,

1144
00:31:51,946 --> 0:31:53,116
you want to use currentmodule

1145
00:31:53,116 --> 0:31:55,656
show and module show, to show

1146
00:31:55,656 --> 0:31:57,386
everything created on the main

1147
00:31:57,446 --> 0:31:59,466
and shared file.

1148
00:31:59,706 --> 0:32:01,026
Additionally, you can add

1149
00:31:59,706 --> 0:32:01,026
Additionally, you can add

1150
00:32:01,116 --> 0:32:02,786
keywords like public and private

1151
00:32:02,786 --> 0:32:05,296
as identifiers to show these to

1152
00:32:05,456 --> 0:32:06,696
your students as they start new

1153
00:32:06,696 --> 0:32:07,776
functions, classes, and structs

1154
00:32:08,086 --> 0:32:08,846
in a shared file.

1155
00:32:10,076 --> 0:32:13,056
Next, let's talk about making

1156
00:32:13,056 --> 0:32:14,186
Cutscenes in Swift.

1157
00:32:16,686 --> 0:32:17,636
Several of the books in the

1158
00:32:17,696 --> 0:32:19,236
Swift Playground's library use

1159
00:32:19,336 --> 0:32:20,636
Cutscenes to introduce a new

1160
00:32:20,716 --> 0:32:22,816
skill, engage the user, or

1161
00:32:22,816 --> 0:32:23,836
summarize a concept.

1162
00:32:25,266 --> 0:32:27,006
What was previously only done in

1163
00:32:27,186 --> 0:32:29,536
HTML, you can now also write in

1164
00:32:29,576 --> 0:32:30,046
Swift.

1165
00:32:32,516 --> 0:32:36,226
[ Applause and Cheering ]

1166
00:32:36,726 --> 0:32:38,406
This offers loads of benefits to

1167
00:32:38,466 --> 0:32:39,316
you as a developer.

1168
00:32:40,226 --> 0:32:41,576
You can leverage frameworks like

1169
00:32:41,726 --> 0:32:42,926
SpriteKit, UIKit, and

1170
00:32:42,926 --> 0:32:43,676
CoreAnimation.

1171
00:32:44,776 --> 0:32:45,966
By using Swift, you don't have

1172
00:32:45,966 --> 0:32:47,106
to switch tools to create

1173
00:32:47,106 --> 0:32:50,366
Cutscenes which means you can

1174
00:32:50,366 --> 0:32:52,216
use the Interface Builder for

1175
00:32:52,216 --> 0:32:53,736
storyboards and auto layout.

1176
00:32:55,276 --> 0:32:56,526
And you can localize your

1177
00:32:56,526 --> 0:32:58,266
Cutscenes using the same tooling

1178
00:32:58,266 --> 0:32:59,356
you use to localize your

1179
00:32:59,426 --> 0:32:59,786
content.

1180
00:33:02,396 --> 0:33:03,916
Using Swift, you'll now add

1181
00:33:03,916 --> 0:33:05,466
Cutscenes to your book similar

1182
00:33:05,466 --> 0:33:06,806
to how you would a new page.

1183
00:33:08,286 --> 0:33:09,676
In the Pages folder, you'll

1184
00:33:09,676 --> 0:33:11,076
still need a folder ending in

1185
00:33:11,246 --> 0:33:13,146
.cutscenepage, only now you'll

1186
00:33:13,146 --> 0:33:15,006
need both a .swift file and a

1187
00:33:15,006 --> 0:33:15,366
Manifest.

1188
00:33:16,436 --> 0:33:17,956
The .swift file you include

1189
00:33:18,036 --> 0:33:19,586
behaves like a liveview.swift

1190
00:33:19,586 --> 0:33:21,436
file and should run and present

1191
00:33:21,476 --> 0:33:22,856
a live view.

1192
00:33:24,316 --> 0:33:25,776
In order for your Cutscene to

1193
00:33:25,776 --> 0:33:27,116
appear in the Table of Contents,

1194
00:33:27,526 --> 0:33:28,746
you add it to the chapter level

1195
00:33:28,746 --> 0:33:31,186
Manifest, just like you would a

1196
00:33:31,266 --> 0:33:32,626
new page.

1197
00:33:33,456 --> 0:33:35,996
Now, finally, I'm excited to

1198
00:33:35,996 --> 0:33:37,926
introduce you to Localized Code

1199
00:33:37,976 --> 0:33:38,396
Comments.

1200
00:33:40,546 --> 0:33:41,696
If you're distributing your

1201
00:33:41,776 --> 0:33:42,976
Playground book to multiple

1202
00:33:42,976 --> 0:33:44,936
locales, you can now localize

1203
00:33:45,066 --> 0:33:47,416
code comments and strings in any

1204
00:33:47,416 --> 0:33:48,676
main or shared files.

1205
00:33:49,466 --> 0:33:50,576
This means that your book will

1206
00:33:50,576 --> 0:33:52,346
be fully localized to your

1207
00:33:52,346 --> 0:33:52,676
students.

1208
00:33:54,516 --> 0:34:00,106
[ Applause ]

1209
00:33:54,516 --> 0:34:00,106
[ Applause ]

1210
00:34:00,606 --> 0:34:02,226
For code comments, you can have

1211
00:34:02,276 --> 0:34:04,416
a single or multiline comment in

1212
00:34:04,416 --> 0:34:05,556
a localizable-zone.

1213
00:34:06,016 --> 0:34:07,836
Each localizable-zone should

1214
00:34:07,836 --> 0:34:09,206
have a unique identifier.

1215
00:34:10,746 --> 0:34:11,966
You can also use inline

1216
00:34:11,966 --> 0:34:13,846
localizable-zones to make string

1217
00:34:13,846 --> 0:34:15,005
literals localizable.

1218
00:34:15,576 --> 0:34:18,045
The output of your Localized

1219
00:34:18,076 --> 0:34:19,716
Code Comments will be stored in

1220
00:34:19,716 --> 0:34:22,166
the LocalizableCode.strings file

1221
00:34:22,326 --> 0:34:23,596
in the book level Private

1222
00:34:23,596 --> 0:34:24,436
Resources folder.

1223
00:34:25,676 --> 0:34:27,656
That's a taste for all the

1224
00:34:27,656 --> 0:34:29,126
powerful new features in Swift

1225
00:34:29,126 --> 0:34:30,416
Playgrounds 3 for authors.

1226
00:34:31,085 --> 0:34:32,146
Next, let's see all these new

1227
00:34:32,146 --> 0:34:34,016
author and app features come

1228
00:34:34,016 --> 0:34:35,356
together with the demo from

1229
00:34:35,356 --> 0:34:35,616
Grace.

1230
00:34:37,516 --> 0:34:43,815
[ Applause ]

1231
00:34:44,315 --> 0:34:45,706
&gt;&gt; So with all of these new

1232
00:34:45,706 --> 0:34:47,246
features, I really wanted to

1233
00:34:47,246 --> 0:34:48,775
show off that you can create

1234
00:34:48,775 --> 0:34:50,946
something super robust and fun

1235
00:34:50,946 --> 0:34:52,376
for Swift Playgrounds on the

1236
00:34:52,585 --> 0:34:52,856
iPad.

1237
00:34:53,716 --> 0:34:55,666
So as you all know, the general

1238
00:34:55,666 --> 0:34:57,176
workflow for creating an app

1239
00:34:57,176 --> 0:34:58,926
that incorporates the iOS camera

1240
00:34:58,926 --> 0:35:01,146
on iPad is to start with a blank

1241
00:34:58,926 --> 0:35:01,146
on iPad is to start with a blank

1242
00:35:01,146 --> 0:35:03,136
app in Xcode on the Mac, write

1243
00:35:03,186 --> 0:35:05,246
some code, run it on your iPad,

1244
00:35:05,366 --> 0:35:06,716
see if it worked, and then

1245
00:35:06,716 --> 0:35:08,306
iterate back and forth between

1246
00:35:08,306 --> 0:35:09,136
your two devices.

1247
00:35:09,916 --> 0:35:11,386
But, you can iterate much more

1248
00:35:11,436 --> 0:35:12,766
quickly if you're writing the

1249
00:35:12,766 --> 0:35:14,676
code right on the iPad itself

1250
00:35:14,676 --> 0:35:15,466
with Swift Playgrounds.

1251
00:35:16,346 --> 0:35:18,146
So I wanted to use the Vision

1252
00:35:18,146 --> 0:35:19,656
framework which does use the

1253
00:35:19,656 --> 0:35:21,796
camera along with Core ML to do

1254
00:35:21,796 --> 0:35:23,086
object detection and live

1255
00:35:23,256 --> 0:35:23,836
capture.

1256
00:35:24,256 --> 0:35:25,376
So, Swift Playgrounds was

1257
00:35:25,376 --> 0:35:26,856
actually a great place for me to

1258
00:35:26,856 --> 0:35:27,946
build this app.

1259
00:35:29,136 --> 0:35:30,726
So there is a concept in

1260
00:35:30,726 --> 0:35:32,486
American Sign Language of name

1261
00:35:32,486 --> 0:35:34,596
signs which are special signs to

1262
00:35:34,596 --> 0:35:35,976
uniquely identify a person.

1263
00:35:35,976 --> 0:35:39,116
When I was little, my mom gave

1264
00:35:39,116 --> 0:35:41,006
me the name sign of this which

1265
00:35:41,006 --> 0:35:42,616
is the letter G and a smile.

1266
00:35:43,086 --> 0:35:45,186
But that is me on the left not

1267
00:35:45,186 --> 0:35:45,536
smiling.

1268
00:35:45,536 --> 0:35:46,546
So maybe it should have been

1269
00:35:46,636 --> 0:35:47,786
more like this.

1270
00:35:47,936 --> 0:35:50,666
So working off of this idea, I

1271
00:35:50,666 --> 0:35:52,216
created a piece of content that

1272
00:35:52,216 --> 0:35:54,046
incorporates some doodling and

1273
00:35:54,046 --> 0:35:55,636
some sign language recognition

1274
00:35:55,886 --> 0:35:56,686
which I want to show you now.

1275
00:36:03,856 --> 0:36:04,626
All right.

1276
00:36:04,906 --> 0:36:06,406
So, here's my piece of content

1277
00:36:06,826 --> 0:36:08,386
packaged up into a book that I

1278
00:36:08,386 --> 0:36:09,616
call Sign Me Up.

1279
00:36:10,026 --> 0:36:11,516
So what I wanted to do was make

1280
00:36:11,566 --> 0:36:13,586
something to let Jonathan, Joy

1281
00:36:13,586 --> 0:36:15,286
and I create a unique face

1282
00:36:15,376 --> 0:36:17,046
painting for ourselves and then

1283
00:36:17,046 --> 0:36:18,776
trigger those drawings with sign

1284
00:36:18,776 --> 0:36:19,156
language.

1285
00:36:20,016 --> 0:36:21,836
So, I'm doing touch recognition

1286
00:36:21,836 --> 0:36:23,926
to draw on live video output and

1287
00:36:23,966 --> 0:36:24,996
then I'm using the Vision

1288
00:36:24,996 --> 0:36:26,176
framework to track those

1289
00:36:26,176 --> 0:36:27,606
drawings to detected faces.

1290
00:36:27,606 --> 0:36:30,086
And then I'm using Core ML to do

1291
00:36:30,086 --> 0:36:31,426
object recognition and live

1292
00:36:31,486 --> 0:36:33,266
capture to rotate between those

1293
00:36:33,266 --> 0:36:34,776
drawings based on what's being

1294
00:36:35,766 --> 0:36:35,886
signed.

1295
00:36:37,196 --> 0:36:39,556
So I created my book and I put

1296
00:36:39,556 --> 0:36:41,226
it in Limited Mode so I can hide

1297
00:36:41,226 --> 0:36:42,586
away some of the implementation

1298
00:36:42,586 --> 0:36:43,146
details.

1299
00:36:43,566 --> 0:36:44,806
I really just want my users to

1300
00:36:44,806 --> 0:36:46,006
focus on a few of the Swift

1301
00:36:46,006 --> 0:36:47,646
files I've created in my user

1302
00:36:47,646 --> 0:36:48,056
module.

1303
00:36:48,636 --> 0:36:51,766
On the Mac, I trained a Core ML

1304
00:36:51,996 --> 0:36:54,296
model to recognize three signs.

1305
00:36:54,576 --> 0:36:58,646
So G, Y and N, then I imported

1306
00:36:58,646 --> 0:37:01,296
the model to my iPad into this

1307
00:36:58,646 --> 0:37:01,296
the model to my iPad into this

1308
00:37:01,296 --> 0:37:01,646
Playground.

1309
00:37:02,746 --> 0:37:05,026
So G is for Grace, and my

1310
00:37:05,026 --> 0:37:07,636
co-presenters Jonathan and Joy,

1311
00:37:07,746 --> 0:37:09,086
both have the same first two

1312
00:37:09,086 --> 0:37:10,946
letters of their names so I

1313
00:37:10,946 --> 0:37:11,916
settled for the third.

1314
00:37:11,916 --> 0:37:14,576
So Y for joy, and N for

1315
00:37:14,576 --> 0:37:15,176
Jonathan.

1316
00:37:15,916 --> 0:37:17,066
So I'd like to invite them both

1317
00:37:17,106 --> 0:37:18,356
back up now to demonstrate.

1318
00:37:22,516 --> 0:37:30,196
[ Applause ]

1319
00:37:30,696 --> 0:37:33,566
Alright. So on the first page, I

1320
00:37:33,566 --> 0:37:35,186
added some pros instructing the

1321
00:37:35,186 --> 0:37:35,986
user what to do.

1322
00:37:35,986 --> 0:37:38,246
And when Joy taps in the Source

1323
00:37:38,246 --> 0:37:39,976
Editor, you'll see that I've

1324
00:37:39,976 --> 0:37:40,916
added a code completion

1325
00:37:40,916 --> 0:37:42,246
directive to suggest the

1326
00:37:42,246 --> 0:37:43,446
setColors function.

1327
00:37:44,766 --> 0:37:46,266
Just by tapping, she can fill

1328
00:37:46,266 --> 0:37:47,786
this function out by selecting

1329
00:37:47,786 --> 0:37:49,976
color literal placeholders in

1330
00:37:49,976 --> 0:37:50,996
the Code Completion bar.

1331
00:37:51,636 --> 0:37:53,206
The quick editor for this makes

1332
00:37:53,206 --> 0:37:54,776
it super easy to see different

1333
00:37:54,776 --> 0:37:55,766
UI colors this way.

1334
00:37:57,236 --> 0:37:58,846
The setColors function sets some

1335
00:37:58,846 --> 0:38:00,096
of the different drawing colors

1336
00:37:58,846 --> 0:38:00,096
of the different drawing colors

1337
00:38:00,096 --> 0:38:01,286
that will be available once she

1338
00:38:01,286 --> 0:38:01,946
runs the code.

1339
00:38:02,186 --> 0:38:03,126
So let's go ahead and do that

1340
00:38:03,126 --> 0:38:03,336
now.

1341
00:38:06,446 --> 0:38:06,596
Awesome.

1342
00:38:07,096 --> 0:38:08,456
And let's expand the live view

1343
00:38:08,456 --> 0:38:09,616
to full screen to get a better

1344
00:38:09,616 --> 0:38:10,246
perspective.

1345
00:38:11,756 --> 0:38:12,846
So she'll cycle through in the

1346
00:38:12,846 --> 0:38:14,526
bottom, left-hand corner to set

1347
00:38:14,526 --> 0:38:16,856
Y for Joy, and then can tap

1348
00:38:16,906 --> 0:38:18,016
through in the right hand color

1349
00:38:18,016 --> 0:38:19,266
to pick the color to draw with.

1350
00:38:20,076 --> 0:38:21,566
And then she can do some face

1351
00:38:21,566 --> 0:38:21,936
painting.

1352
00:38:24,356 --> 0:38:25,746
So what she draws is tracking to

1353
00:38:25,746 --> 0:38:26,946
her face using the Vision

1354
00:38:26,946 --> 0:38:28,466
framework which can return a

1355
00:38:28,466 --> 0:38:30,236
bounding box of a face and some

1356
00:38:30,236 --> 0:38:31,036
facial landmarks.

1357
00:38:31,126 --> 0:38:33,206
So I'm using the left pupil to

1358
00:38:33,206 --> 0:38:34,586
map all of these points to their

1359
00:38:34,586 --> 0:38:35,496
correct locations.

1360
00:38:36,406 --> 0:38:37,706
Once she's satisfied, she'll tap

1361
00:38:37,786 --> 0:38:39,686
Done and give Jonathan a turn.

1362
00:38:40,756 --> 0:38:42,666
So these drawings are then

1363
00:38:42,666 --> 0:38:44,336
represented as a set of colors

1364
00:38:44,336 --> 0:38:46,096
and x, y distances to the left

1365
00:38:46,156 --> 0:38:47,456
pupil and are then mapped to a

1366
00:38:47,456 --> 0:38:47,746
letter.

1367
00:38:48,456 --> 0:38:50,116
This information is then saved

1368
00:38:50,116 --> 0:38:51,256
to the Playground key value

1369
00:38:51,256 --> 0:38:52,416
store of this Playground.

1370
00:38:53,106 --> 0:38:54,296
And all of this code for the

1371
00:38:54,296 --> 0:38:56,216
mapping is in the FaceView.swift

1372
00:38:56,216 --> 0:38:57,906
file and is available for the

1373
00:38:57,906 --> 0:39:00,266
user to peruse without messing

1374
00:38:57,906 --> 0:39:00,266
user to peruse without messing

1375
00:39:00,266 --> 0:39:01,876
up any of the cleanliness of my

1376
00:39:01,876 --> 0:39:02,496
main page.

1377
00:39:02,496 --> 0:39:04,306
So it looks like Jonathan's

1378
00:39:04,306 --> 0:39:04,516
done.

1379
00:39:04,516 --> 0:39:05,866
I'll follow suit.

1380
00:39:16,986 --> 0:39:17,396
Cool.

1381
00:39:18,516 --> 0:39:22,046
[Applause]

1382
00:39:22,546 --> 0:39:23,846
Awesome. So let's go to the next

1383
00:39:23,846 --> 0:39:25,566
page now which instructs us to

1384
00:39:25,566 --> 0:39:28,226
run the code and see what

1385
00:39:28,796 --> 0:39:29,016
happens.

1386
00:39:29,166 --> 0:39:30,516
And let's bring the live view to

1387
00:39:30,516 --> 0:39:31,496
full screen again to get a

1388
00:39:31,496 --> 0:39:32,176
better perspective.

1389
00:39:33,206 --> 0:39:34,796
So, so far, nothing is happening

1390
00:39:34,796 --> 0:39:36,306
except for our face detection.

1391
00:39:36,596 --> 0:39:38,596
But try signing the letter Y.

1392
00:39:40,236 --> 0:39:41,966
Awesome. So Swift Playgrounds is

1393
00:39:41,966 --> 0:39:44,016
recognizing-- [applause] Yeah.

1394
00:39:48,796 --> 0:39:50,396
Swift Playgrounds recognizes

1395
00:39:50,396 --> 0:39:51,916
that Joy is signing Y and is

1396
00:39:51,956 --> 0:39:53,456
projecting her drawing onto her

1397
00:39:53,516 --> 0:39:53,796
face.

1398
00:39:54,416 --> 0:39:55,176
So let's see if we try a

1399
00:39:55,176 --> 0:39:55,716
different letter.

1400
00:39:55,716 --> 0:39:56,486
Let's try G.

1401
00:39:57,956 --> 0:39:58,976
&gt;&gt; Oh, I don't know.

1402
00:39:59,046 --> 0:39:59,726
&gt;&gt; Rotate a little bit.

1403
00:40:01,626 --> 0:40:03,156
Oh, we're getting there.

1404
00:40:03,156 --> 0:40:03,976
Maybe N for Jonathan.

1405
00:40:04,756 --> 0:40:05,846
There we go.

1406
00:40:06,106 --> 0:40:07,326
Cool, cool.

1407
00:40:07,576 --> 0:40:08,876
And it can even switch between

1408
00:40:08,876 --> 0:40:09,406
faces.

1409
00:40:11,786 --> 0:40:12,946
Perfect. You've never looked

1410
00:40:12,946 --> 0:40:13,796
better [laughs].

1411
00:40:14,516 --> 0:40:18,096
[ Applause ]

1412
00:40:18,596 --> 0:40:20,246
So, all of this code was written

1413
00:40:20,246 --> 0:40:21,886
entirely in Swift Playgrounds

1414
00:40:21,886 --> 0:40:23,376
and is running on this iPad.

1415
00:40:23,786 --> 0:40:24,986
And you can customize it for

1416
00:40:24,986 --> 0:40:26,596
your students, your friends or

1417
00:40:26,596 --> 0:40:28,076
fellow developers on the Mac

1418
00:40:28,386 --> 0:40:30,266
making for unique and really fun

1419
00:40:30,346 --> 0:40:31,506
piece of content that makes

1420
00:40:31,506 --> 0:40:32,646
Swift Playgrounds accessible.

1421
00:40:39,036 --> 0:40:40,856
So both Jonathan and my

1422
00:40:40,926 --> 0:40:42,026
Playgrounds are available for

1423
00:40:42,026 --> 0:40:43,266
download online in a

1424
00:40:43,266 --> 0:40:44,116
subscription at

1425
00:40:44,216 --> 0:40:44,926
wwdcswiftplaygrounds

1426
00:40:44,926 --> 0:40:48,196
2019.github.io.

1427
00:40:49,056 --> 0:40:50,146
&gt;&gt; And for more information,

1428
00:40:50,146 --> 0:40:50,906
please check out our

1429
00:40:50,906 --> 0:40:51,866
documentation

1430
00:40:52,056 --> 0:40:53,956
developer.apple.com.

1431
00:40:54,386 --> 0:40:56,026
And please come to the labs

1432
00:40:56,026 --> 0:40:57,576
tomorrow morning, bright and

1433
00:40:57,576 --> 0:40:59,066
early at 9:00 a.m. We're going

1434
00:40:59,066 --> 0:41:00,046
to be there and we'd love to

1435
00:40:59,066 --> 0:41:00,046
to be there and we'd love to

1436
00:41:00,046 --> 0:41:01,136
talk with you.

1437
00:41:01,696 --> 0:41:03,086
&gt;&gt; Thank you all for coming and

1438
00:41:03,086 --> 0:41:03,886
have a great rest of your

1439
00:41:03,886 --> 0:41:04,346
conference.

1440
00:41:05,516 --> 0:41:09,500
[ Applause and Cheering ]
