1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:10,516 --> 0:00:17,556
[ Applause ]

3
00:00:18,056 --> 0:00:19,276
&gt;&gt; Good morning, everyone.

4
00:00:19,686 --> 0:00:21,916
Welcome to Session 203

5
00:00:22,246 --> 0:00:23,886
Introducing Desktop-class

6
00:00:23,926 --> 0:00:25,466
Browsing on iPad.

7
00:00:26,086 --> 0:00:28,246
My name is Charles Ying, and I'm

8
00:00:28,246 --> 0:00:30,816
joined today by Wenson Hsieh and

9
00:00:30,816 --> 0:00:32,676
Beth Dakin from the Safari

10
00:00:32,676 --> 0:00:33,376
WebKit teams.

11
00:00:35,166 --> 0:00:37,246
We are so thrilled to tell you

12
00:00:37,246 --> 0:00:39,566
about desktop-class browsing, a

13
00:00:39,566 --> 0:00:42,326
major new advancement to the web

14
00:00:42,326 --> 0:00:43,786
platform on iPad.

15
00:00:45,196 --> 0:00:46,276
As you heard in the keynote,

16
00:00:46,686 --> 0:00:49,076
Safari on iPadOS is now a

17
00:00:49,076 --> 0:00:50,296
desktop-class browser.

18
00:00:51,616 --> 0:00:52,616
Now, what does that mean?

19
00:00:53,956 --> 0:00:55,486
It means getting more done with

20
00:00:55,486 --> 0:00:56,016
Safari.

21
00:00:56,816 --> 0:00:59,016
You can now use Safari for all

22
00:00:59,016 --> 0:01:00,866
the great things you want to do

23
00:00:59,016 --> 0:01:00,866
the great things you want to do

24
00:01:00,866 --> 0:01:02,916
on the web.

25
00:01:03,156 --> 0:01:04,376
Safari is the new download

26
00:01:04,376 --> 0:01:07,006
manager, so you can download and

27
00:01:07,006 --> 0:01:09,896
upload files while using other

28
00:01:09,896 --> 0:01:12,866
tabs and even other apps.

29
00:01:14,586 --> 0:01:16,696
Safari's new controls for

30
00:01:16,696 --> 0:01:18,776
full-page zoom, hiding the

31
00:01:18,776 --> 0:01:20,596
toolbar when you need more space

32
00:01:20,656 --> 0:01:22,926
to work and per-site preferences

33
00:01:22,926 --> 0:01:25,266
to tailor Safari to your

34
00:01:25,266 --> 0:01:25,706
workflow.

35
00:01:27,426 --> 0:01:29,946
And Safari now has all the

36
00:01:29,946 --> 0:01:31,926
keyboard shortcuts you expect

37
00:01:32,146 --> 0:01:34,146
from a desktop browser to get

38
00:01:34,146 --> 0:01:35,886
things done fast and stay

39
00:01:35,886 --> 0:01:37,526
focused on what you're doing.

40
00:01:37,526 --> 0:01:41,296
But at the heart of it all is

41
00:01:41,296 --> 0:01:42,506
browsing desktop websites.

42
00:01:47,616 --> 0:01:49,176
We've been working on web

43
00:01:49,176 --> 0:01:51,116
browsers for a long time.

44
00:01:52,176 --> 0:01:53,416
When the original iPhone was

45
00:01:53,416 --> 0:01:55,636
first introduced, all websites

46
00:01:55,636 --> 0:01:57,546
were big and made for mouse

47
00:01:57,546 --> 0:01:57,856
input.

48
00:01:59,606 --> 0:02:01,086
iPhone made these websites work

49
00:01:59,606 --> 0:02:01,086
iPhone made these websites work

50
00:02:01,606 --> 0:02:04,196
out of the box without requiring

51
00:02:04,196 --> 0:02:06,296
them to change to work with a

52
00:02:06,296 --> 0:02:08,455
small screen and Multi-Touch.

53
00:02:09,916 --> 0:02:11,576
iPhone would scale websites to

54
00:02:11,626 --> 0:02:14,206
fit and boost text sizes so you

55
00:02:14,206 --> 0:02:14,726
could read them.

56
00:02:16,246 --> 0:02:18,836
Then you used new web APIs to

57
00:02:19,196 --> 0:02:21,296
make your websites take full

58
00:02:21,296 --> 0:02:22,696
advantage of iPhone's

59
00:02:22,696 --> 0:02:23,256
capabilities.

60
00:02:23,256 --> 0:02:26,926
And the results were fantastic.

61
00:02:27,676 --> 0:02:30,576
Some of you used responsive

62
00:02:30,576 --> 0:02:32,116
design techniques to make your

63
00:02:32,116 --> 0:02:34,246
websites flexible on screens of

64
00:02:34,246 --> 0:02:34,916
any size.

65
00:02:35,936 --> 0:02:38,676
Those websites look great on

66
00:02:39,396 --> 0:02:40,276
iPad today.

67
00:02:41,066 --> 0:02:43,776
But it was also common to have

68
00:02:43,776 --> 0:02:44,906
two different versions of the

69
00:02:44,906 --> 0:02:48,386
site, one for big screens and

70
00:02:48,386 --> 0:02:49,386
one for small screens.

71
00:02:49,386 --> 0:02:53,086
iPad used the mobile user agent

72
00:02:53,606 --> 0:02:54,966
which meant it got small screen

73
00:02:54,966 --> 0:02:55,416
websites.

74
00:02:56,906 --> 0:03:01,116
So new in iPadOS, iPad will now

75
00:02:56,906 --> 0:03:01,116
So new in iPadOS, iPad will now

76
00:03:01,116 --> 0:03:02,496
present itself to websites as a

77
00:03:02,856 --> 0:03:02,976
Mac.

78
00:03:05,576 --> 0:03:07,656
This is not just user agent

79
00:03:07,656 --> 0:03:09,676
change, but a set of deep

80
00:03:10,506 --> 0:03:13,116
fundamental changes to WebKit

81
00:03:13,666 --> 0:03:15,386
that add up to a great new

82
00:03:15,386 --> 0:03:15,976
experience.

83
00:03:16,776 --> 0:03:17,826
Let me walk you through two of

84
00:03:17,826 --> 0:03:18,466
these changes.

85
00:03:20,226 --> 0:03:21,766
Some desktop websites are

86
00:03:21,766 --> 0:03:23,236
designed to show lots of

87
00:03:23,236 --> 0:03:25,096
information on a large screen.

88
00:03:26,656 --> 0:03:28,206
These websites were zoomed in on

89
00:03:28,206 --> 0:03:29,896
big iPads, and you couldn't see

90
00:03:29,896 --> 0:03:31,156
as much information as the

91
00:03:31,156 --> 0:03:31,796
desktop browser.

92
00:03:32,996 --> 0:03:34,536
WebKit used a viewport to lay

93
00:03:34,536 --> 0:03:36,396
out websites that was the same

94
00:03:36,396 --> 0:03:38,626
on every iPad size, the iPad

95
00:03:38,626 --> 0:03:40,616
mini all the way up to the

96
00:03:40,616 --> 0:03:43,116
largest iPad Pro.

97
00:03:43,336 --> 0:03:47,136
So new in iPadOS, viewports will

98
00:03:47,136 --> 0:03:49,436
now match iPad screen size.

99
00:03:50,496 --> 0:03:52,036
Now websites can use all the

100
00:03:52,036 --> 0:03:53,626
space available on bigger iPads.

101
00:03:54,536 --> 0:03:56,456
With smaller iPads, we'll scale

102
00:03:56,456 --> 0:03:59,236
websites to fit everything on

103
00:03:59,236 --> 0:04:01,626
screen and boost text sizes for

104
00:03:59,236 --> 0:04:01,626
screen and boost text sizes for

105
00:04:01,626 --> 0:04:03,886
comfortable reading just like

106
00:04:03,886 --> 0:04:04,086
iPhone.

107
00:04:05,356 --> 0:04:06,746
You can now see more of the

108
00:04:06,746 --> 0:04:08,616
website at once just like a

109
00:04:08,616 --> 0:04:10,706
desktop computer, make it easier

110
00:04:10,706 --> 0:04:11,706
to get things done.

111
00:04:12,356 --> 0:04:14,886
Some desktop websites are

112
00:04:14,886 --> 0:04:16,636
designed for mouse input.

113
00:04:17,826 --> 0:04:21,206
New in iOS 13, iPad optimizes

114
00:04:21,346 --> 0:04:23,286
how touch input adapts to mouse

115
00:04:23,286 --> 0:04:23,576
input.

116
00:04:24,256 --> 0:04:25,986
So websites like this one using

117
00:04:25,986 --> 0:04:28,576
mouse hover now work out of the

118
00:04:28,576 --> 0:04:28,846
box.

119
00:04:29,676 --> 0:04:32,566
And for web apps that want full

120
00:04:32,566 --> 0:04:35,446
control, you can now use Pointer

121
00:04:35,446 --> 0:04:35,746
Events.

122
00:04:37,206 --> 0:04:38,786
This is just a taste of the

123
00:04:38,786 --> 0:04:42,026
dozens of web APIs and features

124
00:04:42,316 --> 0:04:46,056
new in iPadOS that you can take

125
00:04:46,056 --> 0:04:47,946
advantage of in your web apps.

126
00:04:49,006 --> 0:04:50,526
You'll hear more about them from

127
00:04:50,526 --> 0:04:51,676
Beth later on.

128
00:04:53,716 --> 0:04:55,256
All of this adds up to a

129
00:04:55,256 --> 0:04:56,556
powerful browsing experience

130
00:04:56,936 --> 0:04:58,606
that you expect from your iPad,

131
00:04:59,236 --> 0:05:00,896
and that's desktop-class

132
00:04:59,236 --> 0:05:00,896
and that's desktop-class

133
00:05:00,896 --> 0:05:04,986
browsing, new in iPadOS.

134
00:05:05,136 --> 0:05:05,476
Now --

135
00:05:06,516 --> 0:05:08,896
[ Applause ]

136
00:05:09,396 --> 0:05:11,336
Now, we want to show you how

137
00:05:11,336 --> 0:05:13,276
your apps and websites can take

138
00:05:13,406 --> 0:05:15,036
full advantage of these new

139
00:05:15,036 --> 0:05:15,626
capabilities.

140
00:05:16,696 --> 0:05:18,346
For app developers, we'll show

141
00:05:18,346 --> 0:05:19,826
you how to use desktop-class

142
00:05:19,826 --> 0:05:21,496
browsing in your app.

143
00:05:22,526 --> 0:05:24,136
And for web developers, we'll

144
00:05:24,136 --> 0:05:24,846
show you how to make your

145
00:05:24,846 --> 0:05:27,266
websites work even better on

146
00:05:27,266 --> 0:05:27,496
iPad.

147
00:05:28,896 --> 0:05:31,156
We'll start with apps.

148
00:05:33,576 --> 0:05:36,266
There are four common ways apps

149
00:05:36,266 --> 0:05:38,276
use web views; following links

150
00:05:38,276 --> 0:05:39,976
to web content and browsing

151
00:05:39,976 --> 0:05:42,596
within your app; web browsers,

152
00:05:42,936 --> 0:05:44,466
where browsing is the primary

153
00:05:44,466 --> 0:05:46,806
focus of your app; hybrid apps,

154
00:05:47,256 --> 0:05:48,646
where web technologies are a

155
00:05:48,646 --> 0:05:49,546
part of your app's user

156
00:05:49,546 --> 0:05:51,606
interface and authenticating

157
00:05:51,606 --> 0:05:53,076
users with a third-party

158
00:05:53,076 --> 0:05:54,076
services using OAuth.

159
00:05:55,326 --> 0:05:56,736
First up, link following.

160
00:05:57,376 --> 0:06:00,656
The best way to follow links and

161
00:05:57,376 --> 0:06:00,656
The best way to follow links and

162
00:06:00,656 --> 0:06:02,556
stay within your app is to use

163
00:06:02,556 --> 0:06:03,626
Safari View Controller.

164
00:06:04,496 --> 0:06:06,096
Just like Safari, Safari View

165
00:06:06,096 --> 0:06:07,456
Controller has great features,

166
00:06:07,736 --> 0:06:10,116
including Autofill and Reader.

167
00:06:10,936 --> 0:06:12,416
So I'm happy to say that if

168
00:06:12,416 --> 0:06:13,436
you're using Safari View

169
00:06:13,436 --> 0:06:14,656
Controller, you get

170
00:06:14,656 --> 0:06:16,696
desktop-class browsing for free.

171
00:06:17,456 --> 0:06:18,736
There's nothing for you to do.

172
00:06:19,806 --> 0:06:21,156
Safari and Safari View

173
00:06:21,156 --> 0:06:22,886
Controller automatically choose

174
00:06:22,886 --> 0:06:24,686
a browsing mode to give you the

175
00:06:24,686 --> 0:06:26,006
best experience for your

176
00:06:26,006 --> 0:06:26,566
situation.

177
00:06:27,606 --> 0:06:28,246
Let me explain.

178
00:06:28,896 --> 0:06:32,666
iPad is the perfect device for

179
00:06:32,666 --> 0:06:33,526
browsing the internet.

180
00:06:34,136 --> 0:06:35,456
It's like holding the web in

181
00:06:35,456 --> 0:06:35,916
your hands.

182
00:06:36,666 --> 0:06:37,496
And depending on what you're

183
00:06:37,496 --> 0:06:39,736
doing, iPad can be used in many

184
00:06:39,736 --> 0:06:41,146
different ways.

185
00:06:42,096 --> 0:06:44,046
For example, some desktop

186
00:06:44,046 --> 0:06:45,806
websites are pretty small on

187
00:06:45,806 --> 0:06:47,986
iPad mini and are more

188
00:06:47,986 --> 0:06:49,266
comfortable to read with a

189
00:06:49,266 --> 0:06:50,596
mobile browsing experience.

190
00:06:50,596 --> 0:06:53,516
When you look at a desktop

191
00:06:53,516 --> 0:06:55,866
website in narrow Split View or

192
00:06:55,866 --> 0:06:57,576
Slide Over, the same thing is

193
00:06:57,576 --> 0:06:57,806
true.

194
00:06:58,496 --> 0:07:01,226
In these cases for narrow

195
00:06:58,496 --> 0:07:01,226
In these cases for narrow

196
00:07:01,226 --> 0:07:03,706
windows, iPad mini mobile

197
00:07:03,706 --> 0:07:04,716
browsing can be better.

198
00:07:06,216 --> 0:07:06,936
Safari and Safari View

199
00:07:06,936 --> 0:07:08,246
Controller will automatically

200
00:07:08,246 --> 0:07:09,726
choose a browsing mode to give

201
00:07:09,926 --> 0:07:11,076
you the best experience.

202
00:07:11,646 --> 0:07:15,856
Safari View Controller takes

203
00:07:15,856 --> 0:07:17,286
care of everything you need to

204
00:07:17,286 --> 0:07:18,406
follow links within your app.

205
00:07:19,396 --> 0:07:20,396
What if your app is a web

206
00:07:20,396 --> 0:07:20,866
browser?

207
00:07:21,636 --> 0:07:22,386
Here's what you do.

208
00:07:23,556 --> 0:07:25,666
First, build your app with iOS

209
00:07:25,666 --> 0:07:28,276
13 SDK to turn on desktop-class

210
00:07:28,306 --> 0:07:28,696
browsing.

211
00:07:29,656 --> 0:07:31,806
Then look at how you're setting

212
00:07:31,806 --> 0:07:32,406
the user agent.

213
00:07:32,406 --> 0:07:35,106
If using the custom user agent

214
00:07:35,106 --> 0:07:37,556
property, we recommend instead

215
00:07:37,656 --> 0:07:39,886
to use WKWebView configurations

216
00:07:40,246 --> 0:07:41,916
applicationNameForUserAgent

217
00:07:41,916 --> 0:07:42,256
property.

218
00:07:43,346 --> 0:07:44,596
When you provide an application

219
00:07:44,596 --> 0:07:46,216
name, WebKit does the right

220
00:07:46,216 --> 0:07:47,536
thing to fill in the rest of the

221
00:07:47,536 --> 0:07:49,216
user agent for you.

222
00:07:51,056 --> 0:07:54,046
WKWebView also is the new

223
00:07:54,046 --> 0:07:55,596
WKWebpagePreferences API for

224
00:07:56,036 --> 0:07:57,726
setting a preferred content

225
00:07:57,726 --> 0:07:58,296
browsing mode.

226
00:07:59,646 --> 0:08:00,846
There are three modes;

227
00:07:59,646 --> 0:08:00,846
There are three modes;

228
00:08:01,376 --> 0:08:03,086
recommended, which does what

229
00:08:03,086 --> 0:08:05,496
Safari does; mobile; and desktop

230
00:08:05,496 --> 0:08:05,756
modes.

231
00:08:06,866 --> 0:08:08,686
In most cases, Safari's

232
00:08:08,686 --> 0:08:10,226
recommended mode is what you

233
00:08:10,226 --> 0:08:10,506
want.

234
00:08:11,166 --> 0:08:15,726
Your web browser might also want

235
00:08:15,726 --> 0:08:17,046
to let users switch between

236
00:08:17,046 --> 0:08:19,286
mobile and desktop modes or have

237
00:08:19,286 --> 0:08:20,416
per-site preferences.

238
00:08:21,126 --> 0:08:24,056
For these cases, WebKit has a

239
00:08:24,056 --> 0:08:26,706
new WKNavigationDelegate API to

240
00:08:27,686 --> 0:08:29,386
specify a content mode

241
00:08:29,386 --> 0:08:31,226
preference at navigation time.

242
00:08:34,956 --> 0:08:36,885
You'll see a demo from Wenson of

243
00:08:36,885 --> 0:08:40,076
these new APIs in a bit.

244
00:08:40,296 --> 0:08:42,116
In addition to web browsers, web

245
00:08:42,116 --> 0:08:43,515
technologies can be used to

246
00:08:43,515 --> 0:08:44,976
build parts of your app's

247
00:08:44,976 --> 0:08:46,346
content or user interface.

248
00:08:48,116 --> 0:08:49,776
If your app uses WKWebView this

249
00:08:49,776 --> 0:08:52,316
way, build your app with iOS 13

250
00:08:52,316 --> 0:08:53,856
SDK to turn on desktop-class

251
00:08:53,856 --> 0:08:54,266
browsing.

252
00:08:55,416 --> 0:08:57,336
Then test your app's use of

253
00:08:57,336 --> 0:08:57,936
WKWebView.

254
00:08:59,426 --> 0:09:00,556
In most cases, you're done.

255
00:08:59,426 --> 0:09:00,556
In most cases, you're done.

256
00:09:00,556 --> 0:09:02,466
But in the rare case that you

257
00:09:02,466 --> 0:09:03,806
need to opt out of viewport

258
00:09:03,806 --> 0:09:05,016
sizing, you can set the

259
00:09:05,016 --> 0:09:07,356
preferred content mode to

260
00:09:08,096 --> 0:09:08,256
mobile.

261
00:09:08,416 --> 0:09:10,396
Overall, it's pretty easy.

262
00:09:10,956 --> 0:09:12,526
WKWebView does most of the work

263
00:09:12,526 --> 0:09:12,846
for you.

264
00:09:19,746 --> 0:09:22,416
Oops. Finally, web views are

265
00:09:22,416 --> 0:09:24,006
used to authenticate users with

266
00:09:24,006 --> 0:09:25,146
a third-party service using

267
00:09:25,146 --> 0:09:25,486
OAuth.

268
00:09:26,376 --> 0:09:27,756
If you're doing this,

269
00:09:27,756 --> 0:09:29,426
ASWebAuthenticationSession is

270
00:09:29,426 --> 0:09:30,556
the best way to authenticate.

271
00:09:31,906 --> 0:09:32,986
New in iPadOS,

272
00:09:33,486 --> 0:09:35,566
ASWebAuthenticationSession now

273
00:09:35,566 --> 0:09:37,726
presents a form sheet on iPad to

274
00:09:37,726 --> 0:09:38,616
show the authentication

275
00:09:38,616 --> 0:09:40,486
interface while staying within

276
00:09:40,486 --> 0:09:41,386
the context of your app.

277
00:09:42,316 --> 0:09:43,626
Given this new presentation,

278
00:09:44,236 --> 0:09:45,876
ASWebAuthenticationSession loads

279
00:09:45,876 --> 0:09:47,326
websites using a mobile content

280
00:09:47,326 --> 0:09:47,546
mode.

281
00:09:48,216 --> 0:09:48,896
Just like Safari View

282
00:09:48,896 --> 0:09:50,496
Controller, there's nothing for

283
00:09:50,496 --> 0:09:53,896
you to do if you're using this

284
00:09:53,896 --> 0:09:53,986
API.

285
00:09:54,166 --> 0:09:56,476
To recap, Safari View Controller

286
00:09:56,476 --> 0:09:58,196
and ASWebAuthenticationSession

287
00:09:58,536 --> 0:09:59,846
do the heavy lifting for you.

288
00:10:01,106 --> 0:10:03,256
And if using WKWebView, you have

289
00:10:03,256 --> 0:10:04,376
all the tools you need.

290
00:10:05,676 --> 0:10:06,566
And now I'd like to invite

291
00:10:06,566 --> 0:10:08,326
Wenson to the stage to show you

292
00:10:08,326 --> 0:10:09,596
a demo of how this works.

293
00:10:10,166 --> 0:10:10,666
That's it.

294
00:10:11,516 --> 0:10:16,500
[ Applause ]

295
00:10:20,476 --> 0:10:21,786
&gt;&gt; Thank you, Charles.

296
00:10:22,996 --> 0:10:24,816
So when I'm not busy working on

297
00:10:24,816 --> 0:10:26,606
a web browser, I like to take my

298
00:10:26,606 --> 0:10:28,126
mind off of things every now and

299
00:10:28,126 --> 0:10:29,886
then by writing more web

300
00:10:29,886 --> 0:10:30,426
browsers.

301
00:10:31,306 --> 0:10:33,146
So today, I'd like to introduce

302
00:10:33,476 --> 0:10:34,276
Shiny Browser.

303
00:10:34,976 --> 0:10:38,116
It's a WKWebView-based browser

304
00:10:38,116 --> 0:10:39,726
that I've written, and here it

305
00:10:39,726 --> 0:10:40,936
is on Google Docs.

306
00:10:41,976 --> 0:10:43,156
So sometimes I need to

307
00:10:43,156 --> 0:10:44,406
collaborate with my friends

308
00:10:44,566 --> 0:10:45,646
using Google Docs.

309
00:10:46,386 --> 0:10:47,816
For that, I'd like to be able to

310
00:10:47,816 --> 0:10:50,386
use my browser, but as you can

311
00:10:50,386 --> 0:10:52,016
see here, it just tells me to

312
00:10:52,016 --> 0:10:52,846
download the app.

313
00:10:53,666 --> 0:10:55,256
I'll bet that if I had requested

314
00:10:55,466 --> 0:10:56,656
a desktop version of this

315
00:10:56,656 --> 0:10:58,336
website, it would give me full

316
00:10:58,336 --> 0:10:58,936
access.

317
00:10:59,676 --> 0:11:00,716
So as I just learned from

318
00:10:59,676 --> 0:11:00,716
So as I just learned from

319
00:11:00,716 --> 0:11:03,196
Charles a moment ago, WKWebView

320
00:11:03,196 --> 0:11:05,416
in iOS 13 should request the

321
00:11:05,416 --> 0:11:07,566
desktop version by default on my

322
00:11:07,566 --> 0:11:08,326
iPad Pro.

323
00:11:08,916 --> 0:11:10,216
So I'm going to recompile my

324
00:11:10,216 --> 0:11:12,476
browser against the iOS 13 SDK,

325
00:11:12,476 --> 0:11:14,146
and that should give me the

326
00:11:14,146 --> 0:11:15,006
desktop website.

327
00:11:15,766 --> 0:11:16,816
So I'm going to switch over to

328
00:11:16,816 --> 0:11:18,966
Xcode here, and I'm just going

329
00:11:18,966 --> 0:11:20,046
to hit Command-R to run.

330
00:11:20,046 --> 0:11:22,106
That's going to compile my app,

331
00:11:22,586 --> 0:11:24,016
and we should see the desktop

332
00:11:24,016 --> 0:11:24,516
website.

333
00:11:26,716 --> 0:11:28,196
Okay, well.

334
00:11:28,306 --> 0:11:29,366
Unfortunately, we're still

335
00:11:29,366 --> 0:11:30,326
getting the mobile version.

336
00:11:31,306 --> 0:11:32,276
Let's see if we can try to debug

337
00:11:32,276 --> 0:11:32,856
this together.

338
00:11:33,636 --> 0:11:35,096
Now, let's take a step back.

339
00:11:35,526 --> 0:11:37,226
Google Docs thinks I'm a mobile

340
00:11:37,226 --> 0:11:37,656
browser.

341
00:11:38,396 --> 0:11:39,916
It's probably using the user

342
00:11:39,916 --> 0:11:41,116
agent string to make that

343
00:11:41,116 --> 0:11:41,836
determination.

344
00:11:43,286 --> 0:11:44,546
What I'm going to do is connect

345
00:11:44,546 --> 0:11:45,706
to the web view using Web

346
00:11:45,706 --> 0:11:48,026
Inspector and print out the user

347
00:11:48,026 --> 0:11:48,556
agent string.

348
00:11:49,526 --> 0:11:50,926
Maybe that'll give me a hint as

349
00:11:50,926 --> 0:11:51,666
to what's going on.

350
00:11:52,626 --> 0:11:55,496
So now I'm going to launch

351
00:11:55,496 --> 0:11:58,626
Safari, go to Develop menu and

352
00:11:58,626 --> 0:11:59,726
target Shiny Browser here.

353
00:12:00,136 --> 0:12:02,566
So I'm going to switch over to

354
00:12:02,566 --> 0:12:04,776
Console tab, and I'm just going

355
00:12:04,776 --> 0:12:07,396
to type navigator.userAgent and

356
00:12:07,396 --> 0:12:07,956
hit Enter.

357
00:12:09,176 --> 0:12:10,406
So let's zoom in on this user

358
00:12:10,406 --> 0:12:10,726
agent.

359
00:12:12,056 --> 0:12:12,956
There's a couple of interesting

360
00:12:12,956 --> 0:12:14,106
things I want to point out here.

361
00:12:15,066 --> 0:12:16,406
First of all, the word iPad

362
00:12:16,406 --> 0:12:17,426
appears in the user agent

363
00:12:17,426 --> 0:12:19,386
string, so clearly it's not

364
00:12:19,386 --> 0:12:20,186
desktop-class.

365
00:12:20,826 --> 0:12:22,266
But what's more, there's this

366
00:12:22,266 --> 0:12:24,066
Version/1.0 ShinyBrowser/1.0

367
00:12:24,066 --> 0:12:24,156
here.

368
00:12:24,216 --> 0:12:25,166
It's kind of mysterious.

369
00:12:25,786 --> 0:12:26,826
Where is this coming from?

370
00:12:28,116 --> 0:12:29,886
Well, I like to know myself, so

371
00:12:29,886 --> 0:12:32,266
I'm going to copy and paste into

372
00:12:32,266 --> 0:12:33,616
the search field in Xcode.

373
00:12:33,616 --> 0:12:34,936
So I'm going to Command-F to

374
00:12:34,936 --> 0:12:38,266
find and just paste.

375
00:12:38,456 --> 0:12:40,606
Okay, well as it turns out, I

376
00:12:40,606 --> 0:12:42,496
had code to override the entire

377
00:12:42,496 --> 0:12:44,096
user agent string using the

378
00:12:44,096 --> 0:12:45,776
custom user agent property of

379
00:12:45,776 --> 0:12:46,516
WKWebView.

380
00:12:47,956 --> 0:12:49,006
I must have copied and pasted

381
00:12:49,006 --> 0:12:50,076
this from the internet at some

382
00:12:50,076 --> 0:12:52,066
point and forgot about it since.

383
00:12:52,866 --> 0:12:53,676
Maybe it was a reasonable

384
00:12:53,676 --> 0:12:56,566
solution at the time, but as

385
00:12:56,566 --> 0:12:57,646
I've just learned from Charles,

386
00:12:57,806 --> 0:12:59,106
there's an alternative.

387
00:12:59,866 --> 0:13:01,276
What I can use instead is the

388
00:12:59,866 --> 0:13:01,276
What I can use instead is the

389
00:13:01,306 --> 0:13:02,776
application name for user agent

390
00:13:02,776 --> 0:13:04,016
property on WKWebView

391
00:13:04,016 --> 0:13:04,756
configuration.

392
00:13:05,406 --> 0:13:07,516
So let's change this to use that

393
00:13:07,516 --> 0:13:07,996
instead.

394
00:13:08,826 --> 0:13:09,866
First thing I'm going to do is

395
00:13:09,996 --> 0:13:11,476
remove this custom user agent

396
00:13:11,476 --> 0:13:13,556
code and go up here where I'm

397
00:13:13,556 --> 0:13:14,376
creating my web view.

398
00:13:15,496 --> 0:13:19,206
So what I'm going to do here is

399
00:13:19,206 --> 0:13:20,346
first create a WKWebView

400
00:13:20,346 --> 0:13:22,206
configuration and then set the

401
00:13:22,206 --> 0:13:23,726
application name for user agent

402
00:13:24,256 --> 0:13:25,916
to what I want, Version/1.0

403
00:13:25,916 --> 0:13:26,786
ShinyBrowser/1.0.

404
00:13:27,196 --> 0:13:28,566
And finally, I'm going to create

405
00:13:28,566 --> 0:13:29,686
my web view using this

406
00:13:29,686 --> 0:13:30,376
configuration.

407
00:13:30,496 --> 0:13:32,156
So that was a very small tweak.

408
00:13:32,156 --> 0:13:34,086
I'm going to recompile my app

409
00:13:34,576 --> 0:13:39,446
and see what I get this time.

410
00:13:39,446 --> 0:13:40,906
All right, so as you can see,

411
00:13:40,906 --> 0:13:41,966
we're now getting the full

412
00:13:41,966 --> 0:13:43,556
version of Google Docs, and I

413
00:13:43,556 --> 0:13:44,776
can finally collaborate with my

414
00:13:44,776 --> 0:13:45,276
friends.

415
00:13:45,646 --> 0:13:46,856
That was pretty easy.

416
00:13:47,416 --> 0:13:48,436
But now let's take it one step

417
00:13:48,506 --> 0:13:48,816
further.

418
00:13:49,746 --> 0:13:50,686
One of the features that my

419
00:13:50,686 --> 0:13:51,986
users have been requesting for a

420
00:13:51,986 --> 0:13:54,166
while is the ability to switch

421
00:13:54,196 --> 0:13:55,766
between the desktop and mobile

422
00:13:55,766 --> 0:13:56,996
versions of a web page.

423
00:13:57,766 --> 0:14:00,316
With the new API in iOS 13, it's

424
00:13:57,766 --> 0:14:00,316
With the new API in iOS 13, it's

425
00:14:00,316 --> 0:14:02,306
now fairly easy to implement, so

426
00:14:02,306 --> 0:14:03,026
let me show you how.

427
00:14:03,946 --> 0:14:05,576
First of all, notice I have this

428
00:14:05,636 --> 0:14:06,806
button in the top right-hand

429
00:14:06,806 --> 0:14:09,016
corner that contains some extra

430
00:14:09,016 --> 0:14:10,566
options like Add To Favorites

431
00:14:10,566 --> 0:14:10,956
and Share.

432
00:14:11,666 --> 0:14:12,706
What I'm going to do is I'm

433
00:14:12,706 --> 0:14:14,426
going to add a third option here

434
00:14:14,826 --> 0:14:16,286
to allow the user to change

435
00:14:16,506 --> 0:14:17,516
content modes.

436
00:14:18,036 --> 0:14:19,156
So that's going to either say

437
00:14:19,156 --> 0:14:20,766
Request Mobile Website or

438
00:14:20,766 --> 0:14:22,216
Request Desktop Website.

439
00:14:23,606 --> 0:14:25,196
Okay. So let's jump into Xcode

440
00:14:26,296 --> 0:14:27,006
and implement that.

441
00:14:27,006 --> 0:14:30,136
I'm going to go down here, add

442
00:14:30,136 --> 0:14:31,156
this helper function that

443
00:14:31,156 --> 0:14:33,206
presents a list of

444
00:14:33,206 --> 0:14:34,306
UIAlertActions.

445
00:14:34,926 --> 0:14:36,196
So far, as you can see, I've

446
00:14:36,196 --> 0:14:38,016
have Add to Favorites and Share.

447
00:14:38,756 --> 0:14:39,936
What I want to do is add a third

448
00:14:39,936 --> 0:14:40,476
action here.

449
00:14:40,836 --> 0:14:42,356
But before I do that, I'm going

450
00:14:42,356 --> 0:14:43,506
to make a new helper function.

451
00:14:43,506 --> 0:14:45,726
It's going to help me create the

452
00:14:45,726 --> 0:14:46,626
UIAlertAction.

453
00:14:47,066 --> 0:14:48,466
And of course, I'm just going to

454
00:14:48,466 --> 0:14:50,476
use it up here.

455
00:14:50,476 --> 0:14:51,736
Okay. So that should get my

456
00:14:51,736 --> 0:14:52,156
action.

457
00:14:52,696 --> 0:14:53,826
And now I want to draw your

458
00:14:53,826 --> 0:14:55,056
attention over to this

459
00:14:55,096 --> 0:14:56,366
currentContentMode instance

460
00:14:56,366 --> 0:14:56,796
variable.

461
00:14:57,526 --> 0:14:58,396
So what am I doing here?

462
00:14:58,816 --> 0:14:59,906
Well, I'm checking if the

463
00:14:59,906 --> 0:15:01,156
current content mode is equal to

464
00:14:59,906 --> 0:15:01,156
current content mode is equal to

465
00:15:01,156 --> 0:15:01,616
desktop.

466
00:15:02,246 --> 0:15:03,576
And if it's equal to desktop, I

467
00:15:03,886 --> 0:15:06,446
want the string to say "request

468
00:15:07,076 --> 0:15:09,616
mobile website" and vice versa.

469
00:15:09,616 --> 0:15:11,836
Okay, so that should make sense,

470
00:15:11,886 --> 0:15:13,176
but the question is "How do we

471
00:15:13,176 --> 0:15:14,196
keep track of

472
00:15:14,196 --> 0:15:15,006
currentContentMode?"

473
00:15:15,176 --> 0:15:16,126
How we know what it is?

474
00:15:17,046 --> 0:15:18,986
Well, I'm going to scroll down

475
00:15:18,986 --> 0:15:21,076
here where I've implemented my

476
00:15:21,076 --> 0:15:23,456
WKNavigation delegate, namely

477
00:15:23,456 --> 0:15:24,926
the didCommit navigation method,

478
00:15:25,646 --> 0:15:26,796
and what I'm going to do here is

479
00:15:27,346 --> 0:15:29,666
use a new API in iOS 13.

480
00:15:30,406 --> 0:15:32,716
So in iOS 13, the WKNavigation

481
00:15:32,966 --> 0:15:34,026
has a new property called

482
00:15:34,026 --> 0:15:35,366
effectiveContentMode.

483
00:15:36,046 --> 0:15:37,306
This is only ever going to be

484
00:15:37,516 --> 0:15:39,596
mobile or desktop and is perfect

485
00:15:39,596 --> 0:15:40,396
for my use case.

486
00:15:41,266 --> 0:15:42,496
What I can do is set

487
00:15:42,496 --> 0:15:43,976
currentContentMode equal to the

488
00:15:43,976 --> 0:15:45,446
navigation's effective content

489
00:15:45,446 --> 0:15:46,746
mode when I commit a navigation,

490
00:15:47,256 --> 0:15:48,076
and that should help me keep

491
00:15:48,076 --> 0:15:49,566
track of what content is

492
00:15:49,566 --> 0:15:50,386
currently being loaded.

493
00:15:51,436 --> 0:15:52,746
So now, I should be showing the

494
00:15:52,746 --> 0:15:53,226
right string.

495
00:15:54,556 --> 0:15:55,366
But I want to draw your

496
00:15:55,366 --> 0:15:56,626
attention back to this action

497
00:15:56,626 --> 0:15:56,986
handler.

498
00:15:58,146 --> 0:15:59,306
We still need a way to say,

499
00:15:59,456 --> 0:16:00,886
"Let's prefer to load mobile or

500
00:15:59,456 --> 0:16:00,886
"Let's prefer to load mobile or

501
00:16:00,886 --> 0:16:02,456
desktop content for given host

502
00:16:02,456 --> 0:16:02,636
name."

503
00:16:03,476 --> 0:16:04,896
To do this, what we're going to

504
00:16:04,896 --> 0:16:07,226
do is save a dictionary of host

505
00:16:07,226 --> 0:16:10,346
names to content modes, be it

506
00:16:10,346 --> 0:16:12,216
mobile or desktop, whatever the

507
00:16:12,216 --> 0:16:13,396
user is tapping.

508
00:16:14,776 --> 0:16:15,936
So I'm going to implement the

509
00:16:15,936 --> 0:16:18,366
action handler now, and what I'm

510
00:16:18,366 --> 0:16:20,086
going to do here is simply get

511
00:16:20,086 --> 0:16:22,356
the host name and set that in

512
00:16:22,356 --> 0:16:23,536
the dictionary to either mobile

513
00:16:23,536 --> 0:16:24,156
or desktop.

514
00:16:24,826 --> 0:16:25,776
Then I'm going to tell the web

515
00:16:25,776 --> 0:16:26,436
view to reload.

516
00:16:27,406 --> 0:16:28,616
Okay, so this is where we

517
00:16:28,616 --> 0:16:29,246
properly are,

518
00:16:29,406 --> 0:16:30,866
contentModeToRequestForHost

519
00:16:30,996 --> 0:16:31,506
dictionary.

520
00:16:31,506 --> 0:16:32,716
But of course, we still have to

521
00:16:32,716 --> 0:16:33,336
use it somewhere.

522
00:16:34,036 --> 0:16:35,116
So I'm going to scroll down here

523
00:16:35,336 --> 0:16:36,446
back where I have the navigation

524
00:16:36,446 --> 0:16:38,526
delegate, and I'm going to add a

525
00:16:38,526 --> 0:16:39,146
new method.

526
00:16:40,216 --> 0:16:41,726
I'm going to implement, decide

527
00:16:41,726 --> 0:16:43,576
policy for navigationAction.

528
00:16:44,296 --> 0:16:45,586
This is very similar to the

529
00:16:45,786 --> 0:16:47,236
version you might be familiar

530
00:16:47,236 --> 0:16:49,376
with, except, in iOS 13, this

531
00:16:49,376 --> 0:16:50,786
one now contains web page

532
00:16:50,836 --> 0:16:52,186
preferences as a parameter.

533
00:16:52,186 --> 0:16:53,666
So this preferences right here.

534
00:16:54,196 --> 0:16:55,326
So what I can do with these

535
00:16:55,326 --> 0:16:57,166
preferences is set the preferred

536
00:16:57,166 --> 0:16:58,566
content mode equal to the

537
00:16:58,566 --> 0:16:59,836
content mode I would get by

538
00:16:59,836 --> 0:17:01,156
looking it up in my dictionary.

539
00:16:59,836 --> 0:17:01,156
looking it up in my dictionary.

540
00:17:01,506 --> 0:17:03,166
And just as a refresher, this

541
00:17:03,166 --> 0:17:04,376
contentModeToRequestForHost

542
00:17:04,376 --> 0:17:06,266
dictionary is the same one that

543
00:17:06,266 --> 0:17:07,685
we populated up here in the

544
00:17:07,685 --> 0:17:09,925
action handler just a moment

545
00:17:09,925 --> 0:17:10,116
ago.

546
00:17:11,215 --> 0:17:13,496
Okay. Finally, last but not

547
00:17:13,496 --> 0:17:14,935
least, we have to remember to

548
00:17:15,286 --> 0:17:15,886
actually call our

549
00:17:15,886 --> 0:17:17,136
decisionHandler with these new

550
00:17:17,136 --> 0:17:18,756
preferences, and I should be

551
00:17:18,756 --> 0:17:19,146
good to go.

552
00:17:19,445 --> 0:17:20,866
So I'm going to recompile my

553
00:17:20,866 --> 0:17:22,866
app, and let's see how our

554
00:17:22,866 --> 0:17:23,586
feature works.

555
00:17:24,226 --> 0:17:26,556
I'm also going to switch it up

556
00:17:26,556 --> 0:17:26,935
this time.

557
00:17:27,435 --> 0:17:29,426
Instead of Google Docs, let's go

558
00:17:29,426 --> 0:17:30,456
to an image gallery.

559
00:17:31,476 --> 0:17:33,066
So this is the desktop version

560
00:17:33,066 --> 0:17:34,256
of Shiny Pics.

561
00:17:35,256 --> 0:17:36,646
And what I'm going to do here is

562
00:17:37,146 --> 0:17:39,436
use the Extras menu to request

563
00:17:39,436 --> 0:17:40,216
the mobile website.

564
00:17:41,776 --> 0:17:43,916
So this is what the mobile

565
00:17:43,916 --> 0:17:45,826
website looks like, the version

566
00:17:45,826 --> 0:17:46,676
of Shiny Pics.

567
00:17:47,646 --> 0:17:49,446
And, I mean, I can tell it's

568
00:17:49,446 --> 0:17:50,406
kind of the mobile version of

569
00:17:50,406 --> 0:17:51,486
the website, because it really

570
00:17:51,486 --> 0:17:52,556
looks like a page that was

571
00:17:52,556 --> 0:17:54,926
optimized for a phone, not so

572
00:17:54,926 --> 0:17:55,916
much my iPad Pro.

573
00:17:56,796 --> 0:17:58,186
I think on my iPad Pro, I

574
00:17:58,186 --> 0:17:59,216
actually prefer the desktop

575
00:17:59,256 --> 0:18:00,376
version of Shiny Pics.

576
00:17:59,256 --> 0:18:00,376
version of Shiny Pics.

577
00:18:01,006 --> 0:18:02,506
So I'm going to just tap Request

578
00:18:02,506 --> 0:18:04,486
Desktop Website, and I'm back to

579
00:18:04,486 --> 0:18:05,986
the desktop version of Shiny

580
00:18:05,986 --> 0:18:06,346
Pics.

581
00:18:07,286 --> 0:18:09,536
Okay, so to recap, I first

582
00:18:09,536 --> 0:18:10,806
ensured that my browser can load

583
00:18:10,806 --> 0:18:13,486
desktop content, and then I used

584
00:18:13,486 --> 0:18:15,536
new API to implement a Request

585
00:18:15,536 --> 0:18:16,806
Mobile or Desktop Website

586
00:18:16,856 --> 0:18:17,246
feature.

587
00:18:18,136 --> 0:18:19,916
But so far, we've only shown

588
00:18:19,916 --> 0:18:21,476
some new tools for you app

589
00:18:21,476 --> 0:18:22,576
developers in the crowd.

590
00:18:23,466 --> 0:18:25,406
Of course, we have news for web

591
00:18:25,406 --> 0:18:26,456
developers as well.

592
00:18:27,006 --> 0:18:28,076
And to tell you more about it,

593
00:18:28,556 --> 0:18:30,126
I'd like to invite Beth to the

594
00:18:30,126 --> 0:18:30,576
stage.

595
00:18:31,516 --> 0:18:35,406
[ Applause ]

596
00:18:35,906 --> 0:18:36,856
&gt;&gt; Thank you, Wenson.

597
00:18:37,416 --> 0:18:38,606
That was great.

598
00:18:39,706 --> 0:18:42,496
So what does all of this mean

599
00:18:42,586 --> 0:18:43,576
for web developers?

600
00:18:44,346 --> 0:18:45,666
If you have a responsive

601
00:18:45,666 --> 0:18:47,726
website, probably very little is

602
00:18:47,726 --> 0:18:48,326
different now.

603
00:18:48,626 --> 0:18:50,216
But we do have some new tools

604
00:18:50,216 --> 0:18:52,126
that you can use to maintain and

605
00:18:52,126 --> 0:18:53,586
improve your responsive website.

606
00:18:54,946 --> 0:18:56,836
I also have some best practices

607
00:18:56,836 --> 0:18:58,346
to share for web development on

608
00:18:58,496 --> 0:19:00,146
iPad so that whether your site

609
00:18:58,496 --> 0:19:00,146
iPad so that whether your site

610
00:19:00,146 --> 0:19:02,016
is currently responsive or a

611
00:19:02,016 --> 0:19:03,436
big-screen website designed for

612
00:19:03,436 --> 0:19:05,396
desktop computers, you can make

613
00:19:05,396 --> 0:19:07,126
it a truly great experience on

614
00:19:08,066 --> 0:19:08,266
iPad.

615
00:19:08,996 --> 0:19:10,896
There are six new features I'd

616
00:19:10,896 --> 0:19:11,796
like to discuss.

617
00:19:12,376 --> 0:19:13,336
Some of these are purely

618
00:19:13,336 --> 0:19:14,896
developer features like pointer

619
00:19:14,896 --> 0:19:16,546
events, and some are more like

620
00:19:16,816 --> 0:19:18,266
new end user features that have

621
00:19:18,266 --> 0:19:19,766
developer implications like

622
00:19:19,766 --> 0:19:20,956
accelerated scrolling.

623
00:19:21,746 --> 0:19:23,556
Let's start with Pointer events.

624
00:19:24,926 --> 0:19:26,496
One of the biggest problems of

625
00:19:26,496 --> 0:19:28,196
loading desktop content on an

626
00:19:28,456 --> 0:19:30,596
iPad is reconciling mouse and

627
00:19:30,596 --> 0:19:31,286
touch input.

628
00:19:32,856 --> 0:19:34,406
Sometimes websites are written

629
00:19:34,406 --> 0:19:36,006
so that the small-screen version

630
00:19:36,236 --> 0:19:38,136
uses only touch events, and the

631
00:19:38,136 --> 0:19:39,756
big-screen version uses only

632
00:19:39,756 --> 0:19:40,446
mouse events.

633
00:19:41,086 --> 0:19:42,716
Our goal is to keep websites

634
00:19:42,716 --> 0:19:44,636
using only mouse events working

635
00:19:44,636 --> 0:19:46,576
as much as possible on iPad even

636
00:19:46,576 --> 0:19:47,766
though of course there's no

637
00:19:47,766 --> 0:19:47,996
mouse.

638
00:19:48,916 --> 0:19:51,136
So when a user taps, WebKit will

639
00:19:51,136 --> 0:19:52,686
send the mouse-down, mouse-up

640
00:19:52,686 --> 0:19:53,606
and click event for

641
00:19:53,606 --> 0:19:55,116
compatibility just like always.

642
00:19:55,806 --> 0:19:57,406
Most hover events get dispatched

643
00:19:57,406 --> 0:19:58,786
at that time too, and I'll dig

644
00:19:58,786 --> 0:19:59,716
into that more later.

645
00:20:01,386 --> 0:20:02,516
However, mouse move really

646
00:20:02,516 --> 0:20:04,286
doesn't make sense on iPad.

647
00:20:04,566 --> 0:20:06,326
The closest analogy is moving

648
00:20:06,326 --> 0:20:07,706
your finger on the screen, but

649
00:20:07,706 --> 0:20:08,796
that's how you scroll.

650
00:20:09,406 --> 0:20:12,116
So we did try to send mouse-move

651
00:20:12,116 --> 0:20:13,356
events at the same time that we

652
00:20:13,356 --> 0:20:15,096
send touch move, but it actually

653
00:20:15,096 --> 0:20:16,476
caused many more problems than

654
00:20:16,476 --> 0:20:18,486
it solved, so we decided not to

655
00:20:18,486 --> 0:20:18,996
do that.

656
00:20:18,996 --> 0:20:20,246
It conflicted with scrolling.

657
00:20:21,106 --> 0:20:23,046
If you need something like mouse

658
00:20:23,076 --> 0:20:24,506
move, then we have a great

659
00:20:24,506 --> 0:20:25,686
solution, and that's pointer

660
00:20:25,686 --> 0:20:26,156
events.

661
00:20:27,556 --> 0:20:28,696
We added support for pointer

662
00:20:28,696 --> 0:20:31,166
events in WebKit in iOS 13 and

663
00:20:31,256 --> 0:20:32,176
macOS Catalina.

664
00:20:32,846 --> 0:20:33,936
This is a web standard that

665
00:20:33,936 --> 0:20:35,556
provides a layer of abstraction

666
00:20:35,556 --> 0:20:37,276
between user input and your

667
00:20:37,276 --> 0:20:39,466
website, so the same API can be

668
00:20:39,466 --> 0:20:41,096
used for input that comes from a

669
00:20:41,096 --> 0:20:42,886
mouse, from touch, or from a

670
00:20:42,886 --> 0:20:43,356
pencil.

671
00:20:45,176 --> 0:20:46,246
Pointer Events are easy to

672
00:20:46,246 --> 0:20:46,656
adopt.

673
00:20:46,656 --> 0:20:48,136
If you have existing code to

674
00:20:48,136 --> 0:20:49,486
support mouse events on a

675
00:20:49,486 --> 0:20:50,976
desktop that looks like this,

676
00:20:51,406 --> 0:20:52,416
the code to support Pointer

677
00:20:52,416 --> 0:20:53,746
Events is really similar.

678
00:20:54,636 --> 0:20:55,596
Just the event name is

679
00:20:55,626 --> 0:20:55,946
different.

680
00:20:56,346 --> 0:20:57,976
But let me expand the context to

681
00:20:57,976 --> 0:20:59,596
show how I'll really use this.

682
00:20:59,596 --> 0:21:01,886
I'll actually use feature

683
00:20:59,596 --> 0:21:01,886
I'll actually use feature

684
00:21:01,886 --> 0:21:03,166
detection to determine if

685
00:21:03,216 --> 0:21:04,426
pointer events are supported.

686
00:21:04,426 --> 0:21:06,076
I'll keep the mouse-event

687
00:21:06,076 --> 0:21:07,696
listener in order to accommodate

688
00:21:07,696 --> 0:21:09,416
older clients only when pointer

689
00:21:09,416 --> 0:21:10,536
events aren't available.

690
00:21:11,756 --> 0:21:13,286
The PointerEvent object actually

691
00:21:13,286 --> 0:21:15,006
inherits from mouse event, so I

692
00:21:15,006 --> 0:21:16,206
literally don't have to change

693
00:21:16,206 --> 0:21:17,156
anything about my

694
00:21:17,286 --> 0:21:18,636
updateInteraction function to

695
00:21:18,636 --> 0:21:20,486
get this to work unless I want

696
00:21:20,486 --> 0:21:21,916
to take advantage of additional

697
00:21:21,966 --> 0:21:23,736
parameters on PointerEvent that

698
00:21:23,736 --> 0:21:25,096
are specific to mouse or pencil

699
00:21:25,096 --> 0:21:26,836
input, which is huge.

700
00:21:26,836 --> 0:21:28,946
It really is this easy to adopt

701
00:21:29,006 --> 0:21:30,456
pointer events.

702
00:21:31,456 --> 0:21:33,196
Pointer events can coexist with

703
00:21:33,196 --> 0:21:34,566
mouse and touch events.

704
00:21:34,606 --> 0:21:35,366
But be careful when

705
00:21:35,416 --> 0:21:37,026
intermingling event types that

706
00:21:37,026 --> 0:21:38,976
map to the same user action like

707
00:21:38,976 --> 0:21:39,266
here.

708
00:21:39,916 --> 0:21:41,416
There's no else clause, so both

709
00:21:41,416 --> 0:21:42,196
of these events will be

710
00:21:42,196 --> 0:21:44,156
registered, and my function will

711
00:21:44,156 --> 0:21:45,846
be called twice every time the

712
00:21:45,916 --> 0:21:47,296
pointer moves, which might mess

713
00:21:47,296 --> 0:21:48,266
up some of my state.

714
00:21:49,616 --> 0:21:51,526
Also, you don't need to register

715
00:21:51,526 --> 0:21:53,126
all three types of events if you

716
00:21:53,126 --> 0:21:54,766
want to distinguish between

717
00:21:54,766 --> 0:21:56,326
mouse and touch interaction on

718
00:21:56,326 --> 0:21:57,676
devices that support both,

719
00:21:58,096 --> 0:21:59,306
because pointer events allow you

720
00:21:59,306 --> 0:22:00,196
to know the difference.

721
00:21:59,306 --> 0:22:00,196
to know the difference.

722
00:22:01,576 --> 0:22:03,286
If you want to cancel default

723
00:22:03,286 --> 0:22:04,616
web browser behaviors like

724
00:22:04,686 --> 0:22:06,556
scrolling, then on Mac you'll

725
00:22:06,556 --> 0:22:08,246
use preventDefault just like you

726
00:22:08,246 --> 0:22:09,386
would for mouse events.

727
00:22:09,976 --> 0:22:12,836
On iOS, preventDefault won't

728
00:22:12,836 --> 0:22:14,896
lock all browser behaviors, so

729
00:22:14,896 --> 0:22:16,256
you should also use the

730
00:22:16,256 --> 0:22:18,086
touch-action CSS property.

731
00:22:18,086 --> 0:22:19,866
Touch-action is actually really

732
00:22:19,866 --> 0:22:20,486
awesome.

733
00:22:20,876 --> 0:22:22,046
It's easier than writing

734
00:22:22,046 --> 0:22:23,496
JavaScript and it allows you to

735
00:22:23,496 --> 0:22:25,136
make more granular decisions

736
00:22:25,136 --> 0:22:26,036
than preventDefault.

737
00:22:26,636 --> 0:22:28,636
Here I am using it to block all

738
00:22:28,636 --> 0:22:29,816
browser behaviors with the none

739
00:22:29,816 --> 0:22:31,566
value, but I could use it to,

740
00:22:31,566 --> 0:22:33,216
for example, prevent scrolling

741
00:22:33,356 --> 0:22:34,506
but still allow zooming.

742
00:22:35,436 --> 0:22:37,466
Touch-action also enables more

743
00:22:37,466 --> 0:22:38,786
efficient user interactions,

744
00:22:39,016 --> 0:22:40,576
because it's declarative, so

745
00:22:40,576 --> 0:22:42,446
using touch-action and pointer

746
00:22:42,446 --> 0:22:43,896
events on your website may

747
00:22:43,896 --> 0:22:45,146
actually be a performance

748
00:22:45,146 --> 0:22:45,506
improvement.

749
00:22:47,236 --> 0:22:49,716
So we have compatibility mouse

750
00:22:49,716 --> 0:22:51,366
events to keep desktop sites

751
00:22:51,366 --> 0:22:53,336
working, but that's a stopgap on

752
00:22:53,566 --> 0:22:54,896
the iOS, and the solution is

753
00:22:54,896 --> 0:22:55,466
pointer events.

754
00:22:56,076 --> 0:22:57,026
They're easy to adopt.

755
00:22:57,336 --> 0:22:58,576
They let you do everything you

756
00:22:58,576 --> 0:23:00,166
can do today with mouse or touch

757
00:22:58,576 --> 0:23:00,166
can do today with mouse or touch

758
00:23:00,166 --> 0:23:02,216
events, and they ensure quick

759
00:23:02,216 --> 0:23:03,636
responsive user interactions.

760
00:23:04,386 --> 0:23:05,866
This is a great solution to all

761
00:23:05,866 --> 0:23:07,506
of the problems that we face

762
00:23:07,506 --> 0:23:09,006
reconciling mouse and touch

763
00:23:09,006 --> 0:23:09,336
input.

764
00:23:11,276 --> 0:23:13,226
As I mentioned, WebKit also

765
00:23:13,226 --> 0:23:14,516
sends hover events for the sake

766
00:23:14,516 --> 0:23:15,376
of compatibility.

767
00:23:15,956 --> 0:23:17,706
Hover is tricky on touch screen

768
00:23:17,706 --> 0:23:19,386
since the hardware just doesn't

769
00:23:19,386 --> 0:23:20,496
support it.

770
00:23:20,586 --> 0:23:21,746
We've changed the way that mouse

771
00:23:21,746 --> 0:23:24,066
hover detection works in iOS 13

772
00:23:24,326 --> 0:23:26,846
to keep desktop sites that rely

773
00:23:26,846 --> 0:23:29,116
on it working well.

774
00:23:30,596 --> 0:23:32,306
If you tap on an element in a

775
00:23:32,306 --> 0:23:34,246
web page, the response to hover

776
00:23:34,486 --> 0:23:36,246
will perform that hover, and if

777
00:23:36,246 --> 0:23:37,786
a meaningful change has happened

778
00:23:37,786 --> 0:23:39,876
in a web page as a result of the

779
00:23:39,876 --> 0:23:41,196
hover, will stop there.

780
00:23:42,426 --> 0:23:44,426
The user can tap a second time

781
00:23:44,426 --> 0:23:47,416
if they wanted to click.

782
00:23:47,586 --> 0:23:50,286
In iOS 13, WebKit detects many

783
00:23:50,286 --> 0:23:52,046
more changes as meaningful than

784
00:23:52,216 --> 0:23:52,796
ever before.

785
00:23:53,206 --> 0:23:54,816
This adds critical functionality

786
00:23:54,816 --> 0:23:56,626
to many desktop websites that

787
00:23:56,626 --> 0:23:58,596
rely on hover for essential

788
00:23:58,596 --> 0:24:00,466
parts of the web page like this

789
00:23:58,596 --> 0:24:00,466
parts of the web page like this

790
00:24:00,466 --> 0:24:01,676
web page which uses it for

791
00:24:01,676 --> 0:24:02,086
menus.

792
00:24:02,836 --> 0:24:05,186
We're finding that this is

793
00:24:05,186 --> 0:24:06,626
working really well, but

794
00:24:06,626 --> 0:24:07,656
fundamentally this is a

795
00:24:07,656 --> 0:24:08,746
heuristic where the browser

796
00:24:08,746 --> 0:24:10,246
engine is trying to interpret

797
00:24:10,246 --> 0:24:11,716
design intent, so it won't

798
00:24:11,916 --> 0:24:12,966
always be perfect.

799
00:24:13,796 --> 0:24:15,116
We have some best practices to

800
00:24:15,116 --> 0:24:16,686
keep in mind when you're using

801
00:24:16,686 --> 0:24:17,096
hover.

802
00:24:18,486 --> 0:24:20,156
First, you should always provide

803
00:24:20,246 --> 0:24:22,576
another way to access meaningful

804
00:24:22,576 --> 0:24:24,346
content just in case WebKit

805
00:24:24,346 --> 0:24:25,186
misses something.

806
00:24:25,606 --> 0:24:26,406
This is important for

807
00:24:26,476 --> 0:24:27,536
accessibility too.

808
00:24:27,816 --> 0:24:29,286
Wenson will dig into this later

809
00:24:29,346 --> 0:24:31,226
with the demo.

810
00:24:31,636 --> 0:24:33,216
You should also avoid forcing

811
00:24:33,216 --> 0:24:35,026
the user to tap twice for the

812
00:24:35,026 --> 0:24:36,486
most common interactions.

813
00:24:37,346 --> 0:24:38,866
Remember, if WebKit detects that

814
00:24:38,866 --> 0:24:40,556
a meaningful change happened on

815
00:24:40,556 --> 0:24:42,106
hover, that means that the user

816
00:24:42,106 --> 0:24:43,876
has to tap a second time if they

817
00:24:43,876 --> 0:24:44,956
actually wanted to click.

818
00:24:45,416 --> 0:24:46,766
So if you have an element on

819
00:24:46,766 --> 0:24:48,576
your page where you think users

820
00:24:48,576 --> 0:24:50,066
will far more often want to

821
00:24:50,066 --> 0:24:51,406
perform that click than they

822
00:24:51,406 --> 0:24:53,266
will want to see or interact

823
00:24:53,266 --> 0:24:55,136
with the hover content, then

824
00:24:55,136 --> 0:24:56,776
consider making some changes to

825
00:24:56,776 --> 0:24:58,706
avoid that two-tap speed bump

826
00:24:58,746 --> 0:25:00,146
that you get from using hover on

827
00:24:58,746 --> 0:25:00,146
that you get from using hover on

828
00:25:00,146 --> 0:25:01,056
clickable elements.

829
00:25:02,556 --> 0:25:04,526
Speaking of efficiency, keep

830
00:25:04,526 --> 0:25:05,476
hover snappy.

831
00:25:05,766 --> 0:25:07,556
If you start timers in response

832
00:25:07,556 --> 0:25:09,366
to hover, WebKit will wait for

833
00:25:09,366 --> 0:25:11,176
those timers to fire in case

834
00:25:11,176 --> 0:25:12,936
meaningful content is added to

835
00:25:12,936 --> 0:25:14,536
the web page on a delay.

836
00:25:15,196 --> 0:25:16,706
In a worst-case scenario,

837
00:25:17,366 --> 0:25:19,386
something starts the timer, but

838
00:25:19,386 --> 0:25:21,116
then nothing meaningful happens,

839
00:25:21,286 --> 0:25:22,766
so WebKit automatically performs

840
00:25:22,766 --> 0:25:23,176
the click.

841
00:25:23,506 --> 0:25:24,676
But in the meantime, waited

842
00:25:24,676 --> 0:25:26,296
several 100 milliseconds longer

843
00:25:26,296 --> 0:25:27,676
than usual, and the tap feels

844
00:25:27,676 --> 0:25:28,606
slow to the user.

845
00:25:29,236 --> 0:25:32,596
We believe that we've made mouse

846
00:25:32,596 --> 0:25:34,086
hover detection better than ever

847
00:25:34,086 --> 0:25:34,866
on iOS.

848
00:25:35,186 --> 0:25:36,616
Still, we suggest that you use

849
00:25:36,616 --> 0:25:38,036
it only as progressive

850
00:25:38,036 --> 0:25:39,476
enhancement and make sure your

851
00:25:39,526 --> 0:25:41,006
site works great even without

852
00:25:41,006 --> 0:25:41,326
hover.

853
00:25:41,856 --> 0:25:45,666
WebKit on iOS has always had

854
00:25:45,666 --> 0:25:47,136
hardware accelerated scrolling

855
00:25:47,136 --> 0:25:48,676
for the mainframe, but I'm

856
00:25:48,676 --> 0:25:50,616
delighted to say that WebKit now

857
00:25:50,616 --> 0:25:51,806
has hardware accelerated

858
00:25:51,806 --> 0:25:53,636
scrolling everywhere, meaning

859
00:25:53,636 --> 0:25:55,136
that subframes and overflow

860
00:25:55,136 --> 0:25:57,286
scroll regions now have buttery

861
00:25:57,286 --> 0:25:59,096
smooth fast scrolling out of the

862
00:25:59,096 --> 0:26:00,616
box just like the mainframe.

863
00:25:59,096 --> 0:26:00,616
box just like the mainframe.

864
00:26:01,516 --> 0:26:06,836
[ Applause ]

865
00:26:07,336 --> 0:26:07,916
That's right.

866
00:26:07,916 --> 0:26:09,346
Even subframes.

867
00:26:09,616 --> 0:26:11,676
On older versions of iOS, WebKit

868
00:26:11,676 --> 0:26:13,336
would force subframes to be the

869
00:26:13,336 --> 0:26:15,266
full size of their contents, so

870
00:26:15,266 --> 0:26:16,526
they didn't actually scroll

871
00:26:16,526 --> 0:26:18,106
individually and could end up

872
00:26:18,106 --> 0:26:19,516
being much larger than you

873
00:26:19,516 --> 0:26:21,336
defined them to be in your code.

874
00:26:21,766 --> 0:26:23,706
Now on iPad, frames will be the

875
00:26:23,776 --> 0:26:25,356
size that you specify, and

876
00:26:25,546 --> 0:26:27,126
they'll be able to scroll just

877
00:26:27,126 --> 0:26:28,566
like you expect from a desktop

878
00:26:28,566 --> 0:26:29,026
browser.

879
00:26:30,216 --> 0:26:32,286
This has been such a commonly

880
00:26:32,286 --> 0:26:34,076
requested feature that there

881
00:26:34,076 --> 0:26:35,706
were two popular ways to work

882
00:26:35,706 --> 0:26:37,476
around the fact that WebKit did

883
00:26:37,476 --> 0:26:38,856
not have support for this by

884
00:26:38,856 --> 0:26:39,286
default.

885
00:26:39,636 --> 0:26:42,056
First, we added a CSS property

886
00:26:42,306 --> 0:26:43,836
-webkit-overflow-scrolling:

887
00:26:43,906 --> 0:26:45,926
touch; that developers could opt

888
00:26:45,926 --> 0:26:47,506
into when fast scrolling made

889
00:26:47,506 --> 0:26:48,246
sense for them.

890
00:26:49,076 --> 0:26:51,056
We never made this the default,

891
00:26:51,056 --> 0:26:51,896
because it creates a CSS

892
00:26:51,896 --> 0:26:54,406
stacking context which affects

893
00:26:54,406 --> 0:26:55,896
the front to back layering of

894
00:26:55,896 --> 0:26:57,176
elements on your page.

895
00:26:57,586 --> 0:26:59,696
And second, some of you built or

896
00:26:59,696 --> 0:27:01,806
used JavaScript libraries that

897
00:26:59,696 --> 0:27:01,806
used JavaScript libraries that

898
00:27:01,806 --> 0:27:03,366
would use touch events to

899
00:27:03,366 --> 0:27:04,736
emulate fast scrolling.

900
00:27:05,406 --> 0:27:06,866
Neither of those techniques is

901
00:27:06,866 --> 0:27:07,526
needed now.

902
00:27:07,726 --> 0:27:09,236
And in fact, WebKit overflow

903
00:27:09,236 --> 0:27:13,166
scrolling touch a no-op on iPad.

904
00:27:13,376 --> 0:27:15,606
So you should test how hardware

905
00:27:15,606 --> 0:27:17,386
accelerated scrolling everywhere

906
00:27:17,386 --> 0:27:19,266
affects your content, and if you

907
00:27:19,266 --> 0:27:20,546
were using a technique to work

908
00:27:20,546 --> 0:27:21,836
around the absence of this

909
00:27:21,836 --> 0:27:23,526
feature in the past, you may not

910
00:27:23,526 --> 0:27:24,186
need it anymore.

911
00:27:24,416 --> 0:27:27,746
Next, I want to tell you about

912
00:27:27,746 --> 0:27:29,576
our new automatic viewport and

913
00:27:29,576 --> 0:27:31,046
text sizing behaviors.

914
00:27:31,776 --> 0:27:34,246
We developed our new automatic

915
00:27:34,246 --> 0:27:35,816
behaviors because web pages

916
00:27:35,816 --> 0:27:37,766
should fit with legible text on

917
00:27:38,626 --> 0:27:38,746
iPad.

918
00:27:39,076 --> 0:27:40,636
To elaborate, websites that

919
00:27:40,636 --> 0:27:42,036
weren't necessarily built for

920
00:27:42,256 --> 0:27:44,136
iPad should display to fit on

921
00:27:44,326 --> 0:27:45,656
iPad, meaning that they

922
00:27:45,656 --> 0:27:47,286
shouldn't scroll horizontally

923
00:27:47,286 --> 0:27:48,756
unless they were designed to do

924
00:27:48,756 --> 0:27:51,586
so, and all text should be

925
00:27:51,586 --> 0:27:53,506
comfortably legible for most

926
00:27:53,506 --> 0:27:54,656
people without additional

927
00:27:54,656 --> 0:27:55,076
zooming.

928
00:27:56,536 --> 0:27:58,396
We need automatic behaviors to

929
00:27:58,396 --> 0:27:59,906
achieve these goals, because

930
00:27:59,936 --> 0:28:01,466
some desktop websites are built

931
00:27:59,936 --> 0:28:01,466
some desktop websites are built

932
00:28:01,466 --> 0:28:02,956
in a fixed width that is wider

933
00:28:02,956 --> 0:28:03,866
than an iPad.

934
00:28:05,566 --> 0:28:07,056
We found that a number of sites

935
00:28:07,056 --> 0:28:08,506
that are very wide like this one

936
00:28:08,806 --> 0:28:10,966
also declare incorrectly to be

937
00:28:10,966 --> 0:28:12,416
responsive in the viewport meta

938
00:28:12,476 --> 0:28:13,796
tag, which is kind of

939
00:28:13,796 --> 0:28:14,296
unfortunate.

940
00:28:14,296 --> 0:28:16,136
Let me step back and explain

941
00:28:16,136 --> 0:28:17,666
what I mean by that.

942
00:28:18,296 --> 0:28:19,686
The viewport meta tag was

943
00:28:19,686 --> 0:28:21,306
originally created to address

944
00:28:21,516 --> 0:28:22,886
problems that can result from

945
00:28:22,886 --> 0:28:24,666
displaying content that was

946
00:28:24,786 --> 0:28:26,286
built for a desktop computer on

947
00:28:26,286 --> 0:28:27,036
a small screen.

948
00:28:27,436 --> 0:28:28,846
So it's perfect for this, right?

949
00:28:29,706 --> 0:28:31,476
Well, this particular viewport

950
00:28:31,476 --> 0:28:33,016
value is meant as a promise to

951
00:28:33,016 --> 0:28:34,416
the browser engine that the

952
00:28:34,416 --> 0:28:35,446
website was designed

953
00:28:35,446 --> 0:28:37,006
responsively, meaning that it

954
00:28:37,006 --> 0:28:39,256
will adaptively reflow as the

955
00:28:39,256 --> 0:28:40,446
window size changes.

956
00:28:41,426 --> 0:28:43,326
In previous versions of iOS, we

957
00:28:43,326 --> 0:28:44,416
would typically take this

958
00:28:44,416 --> 0:28:46,276
promise at face value, and we

959
00:28:46,276 --> 0:28:47,776
wouldn't apply any automatic

960
00:28:47,776 --> 0:28:49,786
viewport adjustments on websites

961
00:28:49,786 --> 0:28:51,336
with a meta tag of width equals

962
00:28:51,336 --> 0:28:52,816
device width and initial scale

963
00:28:52,816 --> 0:28:53,436
equals 1.

964
00:28:54,856 --> 0:28:56,546
But that led to a bad experience

965
00:28:56,546 --> 0:28:58,016
on many desktop websites on

966
00:28:58,216 --> 0:28:58,526
iPad.

967
00:28:59,166 --> 0:29:00,546
This site should be able to fit,

968
00:28:59,166 --> 0:29:00,546
This site should be able to fit,

969
00:29:00,546 --> 0:29:01,136
but it didn't.

970
00:29:01,696 --> 0:29:05,906
So new in iPadOS, WebKit will

971
00:29:05,906 --> 0:29:07,496
ignore the meta tag if it

972
00:29:07,496 --> 0:29:09,316
promises to be responsive but

973
00:29:09,316 --> 0:29:10,646
then actually lays out to the

974
00:29:10,646 --> 0:29:11,886
width that is greater than the

975
00:29:11,886 --> 0:29:12,466
device width.

976
00:29:13,256 --> 0:29:14,446
We found that this results in a

977
00:29:14,446 --> 0:29:16,086
much better experience overall.

978
00:29:17,466 --> 0:29:18,836
If your website is designed to

979
00:29:18,836 --> 0:29:20,646
scroll horizontally and is

980
00:29:20,646 --> 0:29:22,236
incorrectly being scaled down,

981
00:29:22,466 --> 0:29:23,496
you have an easy fix.

982
00:29:24,686 --> 0:29:25,836
You just need to add one more

983
00:29:25,836 --> 0:29:27,376
value to your viewport meta tag,

984
00:29:27,716 --> 0:29:28,966
shrink-to-fit=no.

985
00:29:29,436 --> 0:29:30,806
This is not a new value.

986
00:29:31,016 --> 0:29:33,076
We added this in iOS 9 because

987
00:29:33,076 --> 0:29:34,556
we ran into the same problem

988
00:29:34,556 --> 0:29:35,876
with websites in Split View or

989
00:29:35,876 --> 0:29:36,566
Slide Over.

990
00:29:37,136 --> 0:29:38,976
So shrink-to-fit=no will now

991
00:29:38,976 --> 0:29:40,996
prevent automatic shrinking for

992
00:29:41,136 --> 0:29:43,066
websites in Split View, Slide

993
00:29:43,066 --> 0:29:44,816
Over and for wide desktop

994
00:29:44,816 --> 0:29:45,266
websites.

995
00:29:47,136 --> 0:29:48,436
You may have noticed that even

996
00:29:48,436 --> 0:29:50,016
though the boxes on this website

997
00:29:50,426 --> 0:29:51,576
shrank down to fit in the

998
00:29:51,576 --> 0:29:53,166
viewport, the text in the header

999
00:29:53,166 --> 0:29:54,866
actually got bigger, and that's

1000
00:29:55,056 --> 0:29:56,256
because we'll automatically

1001
00:29:56,256 --> 0:29:57,636
adjust the text size on web

1002
00:29:57,636 --> 0:29:59,796
pages that have been shrunk down

1003
00:29:59,796 --> 0:30:01,546
in this manner in order to keep

1004
00:29:59,796 --> 0:30:01,546
in this manner in order to keep

1005
00:30:01,606 --> 0:30:02,826
the text legible.

1006
00:30:04,116 --> 0:30:05,616
If you want to control the

1007
00:30:05,616 --> 0:30:07,426
viewport and text size on your

1008
00:30:07,426 --> 0:30:09,596
website, the very best thing you

1009
00:30:09,596 --> 0:30:11,126
can do is to adopt responsive

1010
00:30:11,126 --> 0:30:12,596
design and ensure that your

1011
00:30:12,596 --> 0:30:14,676
content adaptively lays out to

1012
00:30:14,676 --> 0:30:15,846
fit any window size.

1013
00:30:16,476 --> 0:30:17,866
Responsive design is a dense

1014
00:30:17,866 --> 0:30:19,456
topic, so I won't attempt to

1015
00:30:19,456 --> 0:30:21,156
give a tutorial here, but there

1016
00:30:21,156 --> 0:30:22,636
are lots of great ones online.

1017
00:30:23,246 --> 0:30:26,526
So in summary, WebKit has new

1018
00:30:26,526 --> 0:30:27,706
viewport and text sizing

1019
00:30:27,706 --> 0:30:29,576
behaviors that make web pages

1020
00:30:29,656 --> 0:30:30,816
fit with legible text.

1021
00:30:31,696 --> 0:30:32,886
The best way to control this

1022
00:30:32,886 --> 0:30:34,476
from your end is to adopt

1023
00:30:34,476 --> 0:30:36,296
responsive design, and if you

1024
00:30:36,296 --> 0:30:37,426
have a website that is meant to

1025
00:30:37,426 --> 0:30:39,176
scroll horizontally, then you

1026
00:30:39,176 --> 0:30:40,586
can get everything right with

1027
00:30:40,586 --> 0:30:41,316
the viewport meta tag.

1028
00:30:41,316 --> 0:30:45,336
Next, I want to tell you about

1029
00:30:45,336 --> 0:30:46,966
the visual viewport API.

1030
00:30:48,076 --> 0:30:49,336
To do that, I first want to make

1031
00:30:49,336 --> 0:30:51,096
a distinction between the visual

1032
00:30:51,096 --> 0:30:52,246
viewport and the layout

1033
00:30:52,306 --> 0:30:52,766
viewport.

1034
00:30:53,386 --> 0:30:54,646
We were just talking about our

1035
00:30:54,646 --> 0:30:56,436
automatic viewport sizing

1036
00:30:56,436 --> 0:30:58,326
behaviors and the viewport meta

1037
00:30:58,406 --> 0:30:58,706
tag.

1038
00:30:59,056 --> 0:31:00,366
Those are used to define the

1039
00:30:59,056 --> 0:31:00,366
Those are used to define the

1040
00:31:00,366 --> 0:31:01,986
layout viewport along with the

1041
00:31:01,986 --> 0:31:03,136
screen and window size.

1042
00:31:04,626 --> 0:31:06,126
The window size can change when

1043
00:31:06,126 --> 0:31:08,036
the user enters or adjusts split

1044
00:31:08,036 --> 0:31:08,456
screen.

1045
00:31:08,826 --> 0:31:10,646
Responsively designed websites

1046
00:31:10,646 --> 0:31:12,486
will react to that change using

1047
00:31:12,486 --> 0:31:14,276
media queries or perhaps by

1048
00:31:14,276 --> 0:31:15,526
listening to the resize event

1049
00:31:15,526 --> 0:31:16,276
and JavaScript.

1050
00:31:16,986 --> 0:31:18,766
Max and min with media queries

1051
00:31:18,926 --> 0:31:20,136
will be assessed whenever the

1052
00:31:20,136 --> 0:31:22,106
layout viewport changes, and the

1053
00:31:22,106 --> 0:31:23,476
resize event will fire then as

1054
00:31:23,476 --> 0:31:23,716
well.

1055
00:31:24,066 --> 0:31:25,526
So if the user rotates the

1056
00:31:25,526 --> 0:31:27,366
device, the layout viewport

1057
00:31:27,366 --> 0:31:29,056
changes again, and your content

1058
00:31:29,056 --> 0:31:30,066
can react to it with one of

1059
00:31:30,066 --> 0:31:30,706
these techniques.

1060
00:31:32,286 --> 0:31:33,376
But then there's the keyboard.

1061
00:31:34,136 --> 0:31:35,146
The keyboard presents us an

1062
00:31:35,146 --> 0:31:37,016
overlay, so it doesn't change

1063
00:31:37,016 --> 0:31:38,856
the layout viewport, and media

1064
00:31:38,856 --> 0:31:40,186
queries and the resize event

1065
00:31:40,276 --> 0:31:40,896
don't react.

1066
00:31:40,896 --> 0:31:43,816
So if the user taps on the name

1067
00:31:43,816 --> 0:31:46,576
field here, the keyboard comes

1068
00:31:46,576 --> 0:31:46,876
up.

1069
00:31:46,876 --> 0:31:48,526
And clearly, that's affected

1070
00:31:48,526 --> 0:31:49,976
what's visually onscreen.

1071
00:31:50,376 --> 0:31:51,446
That's what defined by the

1072
00:31:51,446 --> 0:31:52,436
visual viewport.

1073
00:31:53,376 --> 0:31:54,966
The layout viewport here is the

1074
00:31:54,966 --> 0:31:57,086
normal window size, and the

1075
00:31:57,086 --> 0:31:58,826
visual viewport is the section

1076
00:31:58,896 --> 0:32:00,286
that is currently visible and

1077
00:31:58,896 --> 0:32:00,286
that is currently visible and

1078
00:32:00,356 --> 0:32:01,216
unobscured.

1079
00:32:02,206 --> 0:32:03,476
We've heard for a long time that

1080
00:32:03,476 --> 0:32:04,806
developers want to react to

1081
00:32:04,856 --> 0:32:06,676
changes in the visual viewport.

1082
00:32:07,186 --> 0:32:08,526
In this sample web page, for

1083
00:32:08,526 --> 0:32:10,326
example, the Donate button is

1084
00:32:10,326 --> 0:32:11,756
now obscured, and the site would

1085
00:32:11,756 --> 0:32:13,206
be more useable if it always

1086
00:32:13,206 --> 0:32:13,996
stayed onscreen.

1087
00:32:14,926 --> 0:32:16,996
In iOS 13, we can finally

1088
00:32:16,996 --> 0:32:18,936
address this problem with a W3C

1089
00:32:18,936 --> 0:32:20,756
standard visual viewport API.

1090
00:32:21,536 --> 0:32:24,686
You can use this API to monitor

1091
00:32:24,686 --> 0:32:25,946
the resize of the visual

1092
00:32:25,946 --> 0:32:26,396
viewport.

1093
00:32:26,776 --> 0:32:27,956
This event will fire when the

1094
00:32:27,956 --> 0:32:29,736
keyboard goes on or off-screen.

1095
00:32:29,736 --> 0:32:31,866
And it will also fire in Safari

1096
00:32:32,076 --> 0:32:33,226
as the smart search field

1097
00:32:33,226 --> 0:32:34,606
collapses while scrolling.

1098
00:32:34,606 --> 0:32:38,196
Now I can keep the Donate button

1099
00:32:38,196 --> 0:32:38,686
visible.

1100
00:32:38,686 --> 0:32:42,626
We think the visual viewport API

1101
00:32:42,906 --> 0:32:44,276
is a great tool for taking

1102
00:32:44,276 --> 0:32:45,946
advantage of the big iPad

1103
00:32:45,946 --> 0:32:46,376
screen.

1104
00:32:46,946 --> 0:32:49,786
Let's talk about streaming

1105
00:32:49,786 --> 0:32:50,206
video.

1106
00:32:50,796 --> 0:32:52,496
Those of you who offer streaming

1107
00:32:52,496 --> 0:32:54,106
premium video content in web

1108
00:32:54,136 --> 0:32:56,496
browsers probably already know

1109
00:32:56,826 --> 0:32:59,716
that HTTP Live Streaming or HLS

1110
00:33:00,056 --> 0:33:03,736
is the best way to do it.

1111
00:33:03,736 --> 0:33:05,976
HLS is available on iPhone, iPad

1112
00:33:05,976 --> 0:33:06,456
and Mac.

1113
00:33:06,456 --> 0:33:08,526
It's an easy solution to a hard

1114
00:33:08,526 --> 0:33:10,036
problem, because it does all of

1115
00:33:10,036 --> 0:33:11,056
the heavy lifting for you.

1116
00:33:11,606 --> 0:33:13,396
It works well with CDNs, and you

1117
00:33:13,396 --> 0:33:14,416
get things like AirPlay

1118
00:33:14,416 --> 0:33:15,536
integration for free.

1119
00:33:16,746 --> 0:33:18,476
However, some desktop content

1120
00:33:18,476 --> 0:33:20,116
uses Media Source Extensions or

1121
00:33:20,346 --> 0:33:21,076
MSE instead.

1122
00:33:22,136 --> 0:33:24,256
MSE is an API that enables video

1123
00:33:24,256 --> 0:33:26,356
providers to have explicit

1124
00:33:26,356 --> 0:33:27,616
control of the data that is

1125
00:33:27,616 --> 0:33:28,476
served to the user.

1126
00:33:28,566 --> 0:33:30,306
For example, you can manually

1127
00:33:30,306 --> 0:33:31,976
upgrade or downgrade video

1128
00:33:31,976 --> 0:33:33,496
quality in response to bandwidth

1129
00:33:33,496 --> 0:33:34,016
changes.

1130
00:33:34,766 --> 0:33:36,076
If you have existing content

1131
00:33:36,076 --> 0:33:38,116
that uses MSE, I have great news

1132
00:33:38,116 --> 0:33:38,406
for you.

1133
00:33:39,336 --> 0:33:40,946
MSE is available for desktop

1134
00:33:40,946 --> 0:33:42,896
sites on iPad for the first time

1135
00:33:42,936 --> 0:33:43,686
in iPadOS.

1136
00:33:44,816 --> 0:33:46,496
If you have an existing engine

1137
00:33:46,796 --> 0:33:48,776
that uses MSE for your desktop

1138
00:33:48,776 --> 0:33:50,976
site, it just works on iPad.

1139
00:33:50,976 --> 0:33:52,116
And if you use a JavaScript

1140
00:33:52,116 --> 0:33:53,836
library that implements an MSE

1141
00:33:53,836 --> 0:33:57,136
engine, that will work too.

1142
00:33:57,366 --> 0:33:59,056
With both HLS and MSE as

1143
00:33:59,056 --> 0:34:00,966
options, streaming video is more

1144
00:33:59,056 --> 0:34:00,966
options, streaming video is more

1145
00:34:00,966 --> 0:34:03,166
powerful than ever in Safari on

1146
00:34:03,666 --> 0:34:03,806
iPad.

1147
00:34:04,736 --> 0:34:06,476
These new features should help

1148
00:34:06,476 --> 0:34:08,196
you make your web content sing

1149
00:34:08,196 --> 0:34:08,866
on iPad.

1150
00:34:09,126 --> 0:34:10,235
I talked about some best

1151
00:34:10,235 --> 0:34:12,255
practices along the way, but I

1152
00:34:12,255 --> 0:34:13,426
have a few more to share.

1153
00:34:13,996 --> 0:34:16,926
Best practices help us zoom out.

1154
00:34:17,206 --> 0:34:18,396
They guide this platform

1155
00:34:18,396 --> 0:34:19,926
transition, but they take us

1156
00:34:19,926 --> 0:34:21,456
into the future as our platforms

1157
00:34:21,726 --> 0:34:23,126
continue to grow and evolve.

1158
00:34:24,815 --> 0:34:26,996
First and most importantly, we

1159
00:34:26,996 --> 0:34:28,065
believe that you should build

1160
00:34:28,226 --> 0:34:30,456
one responsive website instead

1161
00:34:30,456 --> 0:34:32,446
of building parallel desktop and

1162
00:34:32,446 --> 0:34:33,216
mobile sites.

1163
00:34:34,076 --> 0:34:35,516
I know this is easier said than

1164
00:34:35,516 --> 0:34:37,166
done, but we really believe in

1165
00:34:37,166 --> 0:34:38,466
using this suite of responsive

1166
00:34:38,466 --> 0:34:40,406
design techniques to build a

1167
00:34:40,406 --> 0:34:41,226
single site.

1168
00:34:41,926 --> 0:34:42,806
And you should use feature

1169
00:34:42,806 --> 0:34:44,766
detection instead of user agent

1170
00:34:44,766 --> 0:34:45,186
sniffing.

1171
00:34:45,186 --> 0:34:47,835
In the past, some developers

1172
00:34:47,835 --> 0:34:49,446
have wanted to know the user

1173
00:34:49,446 --> 0:34:51,206
agent to specifically identify

1174
00:34:51,206 --> 0:34:53,456
iPad, but our new desktop user

1175
00:34:53,456 --> 0:34:55,346
agent on iPad will prevent you

1176
00:34:55,346 --> 0:34:55,976
from doing this.

1177
00:34:55,976 --> 0:34:57,966
I want to convince you that you

1178
00:34:57,966 --> 0:34:59,336
don't need to know your content

1179
00:34:59,336 --> 0:35:00,256
is on an iPad.

1180
00:34:59,336 --> 0:35:00,256
is on an iPad.

1181
00:35:00,496 --> 0:35:01,706
You just need to use feature

1182
00:35:01,706 --> 0:35:02,296
detection.

1183
00:35:03,766 --> 0:35:05,306
And the reason is that iPad is a

1184
00:35:05,306 --> 0:35:05,986
chameleon.

1185
00:35:06,446 --> 0:35:07,726
With all of the new content mode

1186
00:35:07,726 --> 0:35:09,446
APIs that Charles told you

1187
00:35:09,446 --> 0:35:11,046
about, your website could be in

1188
00:35:11,046 --> 0:35:12,766
app that is in desktop mode or

1189
00:35:12,766 --> 0:35:13,536
in mobile mode.

1190
00:35:14,506 --> 0:35:15,686
Your web content could be in a

1191
00:35:15,686 --> 0:35:17,616
Split View on either the mobile

1192
00:35:17,616 --> 0:35:19,306
side or the desktop side.

1193
00:35:19,686 --> 0:35:21,046
So knowing that your content is

1194
00:35:21,046 --> 0:35:23,376
on an iPad specifically is not

1195
00:35:23,376 --> 0:35:24,496
really that useful.

1196
00:35:25,476 --> 0:35:26,636
And the confusion with user

1197
00:35:26,636 --> 0:35:28,546
agent doesn't end with iPad.

1198
00:35:28,546 --> 0:35:29,636
Anything is possible.

1199
00:35:29,636 --> 0:35:31,636
We now have UIKit apps running

1200
00:35:31,636 --> 0:35:34,246
on the Mac.

1201
00:35:34,506 --> 0:35:36,406
Really, if you step back, we

1202
00:35:36,406 --> 0:35:38,636
have web content on Apple Watch,

1203
00:35:38,816 --> 0:35:41,286
on iPhone, on iPad and all of

1204
00:35:41,286 --> 0:35:42,646
the different content modes and

1205
00:35:42,646 --> 0:35:44,166
configurations we already

1206
00:35:44,236 --> 0:35:46,596
covered, web content and UIKit

1207
00:35:46,596 --> 0:35:48,606
apps on Mac, web content on

1208
00:35:48,696 --> 0:35:49,756
AppKit apps on Mac.

1209
00:35:50,516 --> 0:35:51,686
Targeting each one of these

1210
00:35:51,686 --> 0:35:53,266
configurations and handing it

1211
00:35:53,556 --> 0:35:55,236
big-screen site or small-screen

1212
00:35:55,236 --> 0:35:57,256
site is going to be so much more

1213
00:35:57,256 --> 0:35:59,166
limiting, more fragile and less

1214
00:35:59,256 --> 0:36:01,086
future proof than using feature

1215
00:35:59,256 --> 0:36:01,086
future proof than using feature

1216
00:36:01,086 --> 0:36:02,506
detection to see what each

1217
00:36:02,636 --> 0:36:04,246
configuration is capable of.

1218
00:36:05,646 --> 0:36:07,046
We're going to stand up here and

1219
00:36:07,046 --> 0:36:08,546
tell you that responsive design

1220
00:36:08,756 --> 0:36:10,376
is best practices for whatever

1221
00:36:10,376 --> 0:36:12,136
the hot new product is year

1222
00:36:12,136 --> 0:36:13,796
after year after year until

1223
00:36:13,796 --> 0:36:15,296
finally we don't have to because

1224
00:36:15,296 --> 0:36:15,976
it's the norm.

1225
00:36:17,066 --> 0:36:18,656
Server-delivered content that's

1226
00:36:18,746 --> 0:36:20,826
agnostic to who asked for it but

1227
00:36:20,826 --> 0:36:22,656
adapted with responsive design

1228
00:36:22,986 --> 0:36:25,436
is awesome on every device.

1229
00:36:26,626 --> 0:36:28,806
And this device landscape has

1230
00:36:28,806 --> 0:36:29,786
not been shrinking.

1231
00:36:32,716 --> 0:36:34,156
We know this takes a lot of

1232
00:36:34,156 --> 0:36:35,836
work, but we also know it's

1233
00:36:35,836 --> 0:36:36,926
worth it.

1234
00:36:38,756 --> 0:36:40,116
When we say iPad has

1235
00:36:40,116 --> 0:36:42,056
desktop-class browsing, we mean

1236
00:36:42,056 --> 0:36:43,986
modern desktop-class browsing,

1237
00:36:43,986 --> 0:36:45,426
and that means no plug-ins.

1238
00:36:45,886 --> 0:36:47,376
We've never had plug-ins on iOS,

1239
00:36:47,636 --> 0:36:49,226
and we don't intend to add them

1240
00:36:49,226 --> 0:36:49,496
now.

1241
00:36:50,076 --> 0:36:51,616
Even on Mac, if you go out of

1242
00:36:51,616 --> 0:36:53,416
your way to install Flash, it's

1243
00:36:53,416 --> 0:36:55,126
still off by default, and we're

1244
00:36:55,126 --> 0:36:56,436
dropping support for it in

1245
00:36:56,436 --> 0:36:58,686
Safari altogether in 2020.

1246
00:36:59,566 --> 0:37:01,266
So if you still haven't migrated

1247
00:36:59,566 --> 0:37:01,266
So if you still haven't migrated

1248
00:37:01,506 --> 0:37:03,806
your old video or games or

1249
00:37:03,806 --> 0:37:05,766
restaurant menus to standard web

1250
00:37:05,766 --> 0:37:08,176
technologies, now is the time to

1251
00:37:08,176 --> 0:37:09,486
say goodbye to Flash.

1252
00:37:09,486 --> 0:37:13,066
Safari on iPad is desktop-class,

1253
00:37:13,886 --> 0:37:15,386
but iPad is still a mobile

1254
00:37:15,386 --> 0:37:16,596
device, which means that we

1255
00:37:16,596 --> 0:37:18,466
expect it to be used on the go,

1256
00:37:18,606 --> 0:37:19,816
often in public places.

1257
00:37:20,606 --> 0:37:22,416
Therefore, WebKit will prevent

1258
00:37:22,416 --> 0:37:23,556
audio from playing

1259
00:37:23,616 --> 0:37:24,406
automatically.

1260
00:37:24,926 --> 0:37:26,216
We have found some desktop

1261
00:37:26,216 --> 0:37:27,696
websites that assume that

1262
00:37:27,696 --> 0:37:29,456
automatic playback will happen,

1263
00:37:29,676 --> 0:37:31,226
but it's best not to assume.

1264
00:37:31,926 --> 0:37:34,086
The standard media API allows

1265
00:37:34,086 --> 0:37:35,476
you to know the truths of what

1266
00:37:35,476 --> 0:37:37,106
actually happened, because the

1267
00:37:37,186 --> 0:37:38,386
play function has a promise.

1268
00:37:39,106 --> 0:37:40,506
You should catch that promise in

1269
00:37:40,506 --> 0:37:42,016
case playback was rejected.

1270
00:37:42,646 --> 0:37:43,876
But you should also consider

1271
00:37:43,876 --> 0:37:45,526
designing your website so that

1272
00:37:45,526 --> 0:37:47,756
all users on all devices can

1273
00:37:47,756 --> 0:37:49,166
decide for themselves when they

1274
00:37:49,166 --> 0:37:49,896
want audio.

1275
00:37:51,306 --> 0:37:53,146
Next, think beyond the mouse and

1276
00:37:53,146 --> 0:37:54,826
hardware keyboard when designing

1277
00:37:54,826 --> 0:37:56,066
user interaction flows.

1278
00:37:56,566 --> 0:37:58,006
Specifically, consider using

1279
00:37:58,006 --> 0:38:00,006
pointer events, and avoid using

1280
00:37:58,006 --> 0:38:00,006
pointer events, and avoid using

1281
00:38:00,006 --> 0:38:01,486
mouse hover for anything other

1282
00:38:01,486 --> 0:38:02,766
than decorative auxiliary

1283
00:38:02,766 --> 0:38:03,276
changes.

1284
00:38:05,106 --> 0:38:07,516
And finally, use built-in APIs.

1285
00:38:07,926 --> 0:38:09,626
This is a broad topic, but I do

1286
00:38:09,626 --> 0:38:11,096
have a specific example.

1287
00:38:11,446 --> 0:38:13,306
We found many desktop websites

1288
00:38:13,566 --> 0:38:15,116
that will use mouse events in

1289
00:38:15,116 --> 0:38:16,786
order to customize text

1290
00:38:16,786 --> 0:38:18,896
selection or text input.

1291
00:38:19,326 --> 0:38:20,346
But there's a better tool for

1292
00:38:20,346 --> 0:38:20,816
the job.

1293
00:38:21,126 --> 0:38:22,666
Selection change events and

1294
00:38:22,666 --> 0:38:23,936
input events are designed for

1295
00:38:23,936 --> 0:38:25,016
this exact purpose.

1296
00:38:25,786 --> 0:38:26,826
You'll always get the better

1297
00:38:26,826 --> 0:38:28,936
behavior on every platform if

1298
00:38:28,936 --> 0:38:30,696
you utilize built-in APIs

1299
00:38:30,756 --> 0:38:32,356
instead of reverse engineering

1300
00:38:32,356 --> 0:38:34,036
them with basic interaction

1301
00:38:34,036 --> 0:38:34,396
events.

1302
00:38:35,106 --> 0:38:37,506
So that's a lot.

1303
00:38:38,216 --> 0:38:39,696
To help you digest all of this

1304
00:38:39,696 --> 0:38:41,346
information, I'd like to invite

1305
00:38:41,346 --> 0:38:43,206
Wenson back to the stage so that

1306
00:38:43,206 --> 0:38:44,386
he can show you some of these

1307
00:38:44,386 --> 0:38:46,166
new features and best practices

1308
00:38:46,246 --> 0:38:46,856
in action.

1309
00:38:48,146 --> 0:38:48,606
Wenson.

1310
00:38:49,516 --> 0:38:54,500
[ Applause ]

1311
00:38:57,456 --> 0:38:58,176
&gt;&gt; All right.

1312
00:38:58,596 --> 0:38:59,926
Thanks, Beth.

1313
00:39:00,556 --> 0:39:02,096
So you'll never be able to

1314
00:39:02,096 --> 0:39:03,566
guess, but when I'm not working

1315
00:39:03,566 --> 0:39:05,696
on web browsers in my spare time

1316
00:39:06,016 --> 0:39:08,146
and not-so-spare time, I also

1317
00:39:08,146 --> 0:39:09,156
like to work on web

1318
00:39:09,156 --> 0:39:09,906
applications.

1319
00:39:10,836 --> 0:39:11,836
Today, I'd like to share one

1320
00:39:11,836 --> 0:39:13,036
I've been working on recently

1321
00:39:13,726 --> 0:39:15,296
called Shiny Sketch.

1322
00:39:15,876 --> 0:39:19,336
Now, I've only ever tested this

1323
00:39:19,336 --> 0:39:21,186
against desktop browsers, so

1324
00:39:21,186 --> 0:39:22,396
it'll be interesting to see how

1325
00:39:22,396 --> 0:39:23,756
it behaves on my iPad.

1326
00:39:24,576 --> 0:39:25,996
But first, let me give you a

1327
00:39:25,996 --> 0:39:27,036
quick tour on my Mac.

1328
00:39:27,796 --> 0:39:29,646
And as I do, I'll point out some

1329
00:39:29,646 --> 0:39:31,236
potential areas that we may need

1330
00:39:31,236 --> 0:39:32,866
to adjust in order to make it

1331
00:39:32,866 --> 0:39:34,896
look and feel great on iPad.

1332
00:39:35,956 --> 0:39:37,036
Okay, so here's what it looks

1333
00:39:37,036 --> 0:39:37,966
like on macOS.

1334
00:39:38,646 --> 0:39:40,606
And first, this website has a

1335
00:39:40,606 --> 0:39:42,216
fixed four-column layout.

1336
00:39:42,846 --> 0:39:44,306
What that means is as I make my

1337
00:39:44,306 --> 0:39:45,966
window smaller, I just get

1338
00:39:45,966 --> 0:39:48,436
horizontal scrolling, okay?

1339
00:39:48,436 --> 0:39:49,286
So that's one thing to keep in

1340
00:39:49,286 --> 0:39:49,636
mind.

1341
00:39:50,916 --> 0:39:52,836
The next is that in order to

1342
00:39:52,836 --> 0:39:54,136
access the Edit or Delete

1343
00:39:54,136 --> 0:39:55,966
controls, I have to hover over

1344
00:39:55,966 --> 0:39:56,516
each drawing.

1345
00:39:57,456 --> 0:39:58,526
Of course, the Edit and Delete

1346
00:39:58,526 --> 0:39:59,986
controls are really critical

1347
00:39:59,986 --> 0:40:01,946
part of my web application.

1348
00:39:59,986 --> 0:40:01,946
part of my web application.

1349
00:40:03,276 --> 0:40:04,496
And lastly, I'm going to go in

1350
00:40:04,496 --> 0:40:06,526
and try to scribble on one of

1351
00:40:06,526 --> 0:40:07,216
these drawings.

1352
00:40:07,826 --> 0:40:10,546
So I'm able to use my trackpad

1353
00:40:11,086 --> 0:40:13,076
to draw here, but the code that

1354
00:40:13,076 --> 0:40:14,796
I'm currently using to implement

1355
00:40:14,796 --> 0:40:16,416
this only listens for mouse

1356
00:40:16,416 --> 0:40:16,826
events.

1357
00:40:17,176 --> 0:40:18,886
I'm probably going to need to

1358
00:40:19,136 --> 0:40:20,846
adjust that for compatibility

1359
00:40:20,846 --> 0:40:21,346
with iPad.

1360
00:40:22,346 --> 0:40:23,336
Okay, so that's Mac.

1361
00:40:24,336 --> 0:40:25,366
What does it look like on iPad?

1362
00:40:25,366 --> 0:40:26,836
Let me show you.

1363
00:40:27,326 --> 0:40:29,326
I happen to have the same page

1364
00:40:29,326 --> 0:40:30,416
open in Safari.

1365
00:40:31,046 --> 0:40:33,666
And the first thing I notice is

1366
00:40:33,666 --> 0:40:34,766
that the four-column layout

1367
00:40:35,056 --> 0:40:36,436
works great in landscape mode.

1368
00:40:37,396 --> 0:40:39,996
However, once I rotate into

1369
00:40:39,996 --> 0:40:41,586
portrait mode, let's see what

1370
00:40:41,586 --> 0:40:42,036
happens.

1371
00:40:42,726 --> 0:40:45,556
So I still get a four-column

1372
00:40:45,556 --> 0:40:45,956
layout.

1373
00:40:46,456 --> 0:40:49,756
I bet if I made my website

1374
00:40:49,756 --> 0:40:51,426
responsive, I could avoid this

1375
00:40:51,426 --> 0:40:51,806
scaling.

1376
00:40:52,876 --> 0:40:54,286
What I'm going to do now is

1377
00:40:54,286 --> 0:40:56,176
return to my Mac and see if I

1378
00:40:56,176 --> 0:40:58,656
can figure out what's triggering

1379
00:40:58,916 --> 0:41:01,626
this horizontal scrolling in my

1380
00:40:58,916 --> 0:41:01,626
this horizontal scrolling in my

1381
00:41:01,626 --> 0:41:02,016
browser.

1382
00:41:03,426 --> 0:41:04,696
Okay, so first things first.

1383
00:41:05,136 --> 0:41:06,536
I'm going to resize the window

1384
00:41:06,536 --> 0:41:07,936
so I do get horizontal scrolling

1385
00:41:08,596 --> 0:41:09,076
like this.

1386
00:41:09,076 --> 0:41:11,306
And then I'm going to go to the

1387
00:41:11,306 --> 0:41:12,046
Develop menu.

1388
00:41:12,046 --> 0:41:16,256
So I'm going to go down to Start

1389
00:41:16,256 --> 0:41:18,606
Element Selection, and that

1390
00:41:18,606 --> 0:41:19,906
allows me to see how big each

1391
00:41:19,906 --> 0:41:20,506
element is.

1392
00:41:20,936 --> 0:41:23,326
As an example, right here, this

1393
00:41:23,326 --> 0:41:25,516
Edit button is 72 by 48 pixels.

1394
00:41:26,096 --> 0:41:28,066
Okay, so I'm just going to start

1395
00:41:28,066 --> 0:41:29,136
at the top of the page and try

1396
00:41:29,136 --> 0:41:30,616
to find a really wide element.

1397
00:41:32,056 --> 0:41:35,056
So this Shiny Sketch page banner

1398
00:41:35,056 --> 0:41:37,806
or title is about 760 pixels.

1399
00:41:38,666 --> 0:41:40,526
If I look at the window width

1400
00:41:40,526 --> 0:41:42,966
itself using this ruler, it's

1401
00:41:42,966 --> 0:41:45,166
also about 760 pixels, so this

1402
00:41:45,166 --> 0:41:46,206
is pretty well proportioned.

1403
00:41:47,566 --> 0:41:48,496
I'm going to move my cursor

1404
00:41:48,496 --> 0:41:52,076
down, and as you might have

1405
00:41:52,076 --> 0:41:53,916
guessed, the gallery section is

1406
00:41:53,916 --> 0:41:55,656
a whopping 1,300 pixels.

1407
00:41:56,246 --> 0:41:57,246
So I'm pretty sure this is

1408
00:41:57,246 --> 0:41:58,416
what's triggering the horizontal

1409
00:41:58,416 --> 0:41:59,676
scrolling in my web app.

1410
00:41:59,676 --> 0:42:01,866
But I want to find out more it,

1411
00:41:59,676 --> 0:42:01,866
But I want to find out more it,

1412
00:42:01,866 --> 0:42:02,816
so I'm just going to click.

1413
00:42:03,106 --> 0:42:04,036
That's going to open Web

1414
00:42:04,036 --> 0:42:06,416
Inspector where I can see more

1415
00:42:06,416 --> 0:42:07,216
about the gallery.

1416
00:42:08,286 --> 0:42:09,366
So in the Styles sidebar, there

1417
00:42:09,366 --> 0:42:11,436
is indeed a hard-coded width of

1418
00:42:11,526 --> 0:42:12,696
1,300 pixels.

1419
00:42:13,496 --> 0:42:14,096
Why is this here?

1420
00:42:14,926 --> 0:42:16,416
Well, when I added this, I think

1421
00:42:16,416 --> 0:42:17,626
I was trying to make my website

1422
00:42:17,966 --> 0:42:19,396
look good on really large

1423
00:42:19,396 --> 0:42:20,956
displays, really wide displays.

1424
00:42:21,266 --> 0:42:22,786
I didn't think that anyone would

1425
00:42:22,786 --> 0:42:24,716
actually load my web page with a

1426
00:42:24,716 --> 0:42:26,336
display of less than 1,300

1427
00:42:26,336 --> 0:42:26,926
pixels width.

1428
00:42:28,456 --> 0:42:29,246
Maybe it was a reasonable

1429
00:42:29,246 --> 0:42:30,366
assumption to make at the time,

1430
00:42:30,886 --> 0:42:32,606
but now I think I can do better.

1431
00:42:33,496 --> 0:42:35,646
So what I'm going to do now is

1432
00:42:35,886 --> 0:42:37,116
switch over and try to fix it.

1433
00:42:37,956 --> 0:42:38,806
I'm going to make my website

1434
00:42:38,806 --> 0:42:39,296
responsive.

1435
00:42:40,426 --> 0:42:42,786
By the way, the entire web

1436
00:42:42,786 --> 0:42:44,166
application is just three files,

1437
00:42:44,516 --> 0:42:46,776
an HTML file, CSS file, and a

1438
00:42:46,776 --> 0:42:47,386
JavaScript file.

1439
00:42:47,386 --> 0:42:48,636
So I'm going to start in the

1440
00:42:48,636 --> 0:42:50,836
HTML file where I'm going to add

1441
00:42:50,836 --> 0:42:52,506
a meta viewport tag.

1442
00:42:53,276 --> 0:42:54,876
So there's two important

1443
00:42:54,876 --> 0:42:55,546
components to this

1444
00:42:55,776 --> 0:42:57,296
width=device-width and

1445
00:42:57,296 --> 0:42:58,796
initial-scale=1.0.

1446
00:42:59,316 --> 0:43:00,366
This lets the browser know that

1447
00:42:59,316 --> 0:43:00,366
This lets the browser know that

1448
00:43:00,366 --> 0:43:01,746
the page is responsive at any

1449
00:43:01,746 --> 0:43:02,326
device width.

1450
00:43:02,326 --> 0:43:04,136
So that's important, but now

1451
00:43:04,136 --> 0:43:05,116
let's actually make it

1452
00:43:05,116 --> 0:43:06,786
responsive at any device width.

1453
00:43:07,386 --> 0:43:09,266
So let's go to our CSS file.

1454
00:43:09,796 --> 0:43:11,286
And remember that 1,300 pixel

1455
00:43:11,286 --> 0:43:12,216
rule we saw earlier?

1456
00:43:12,216 --> 0:43:13,666
I'm going to search for that.

1457
00:43:15,076 --> 0:43:17,756
So here we go, width: 1300px.

1458
00:43:17,756 --> 0:43:19,636
It is indeed on the gallery.

1459
00:43:20,446 --> 0:43:21,866
And what I'm going to do is just

1460
00:43:21,866 --> 0:43:22,876
change this to a max-width.

1461
00:43:23,846 --> 0:43:25,086
What that means is that if my

1462
00:43:25,086 --> 0:43:26,416
window is less than 1,300

1463
00:43:26,416 --> 0:43:28,066
pixels, the drawings under my

1464
00:43:28,066 --> 0:43:29,196
gallery should be able to

1465
00:43:29,196 --> 0:43:29,586
reflow.

1466
00:43:30,226 --> 0:43:31,506
They're able to reflow, because

1467
00:43:31,756 --> 0:43:33,186
I conveniently set them as

1468
00:43:33,186 --> 0:43:34,206
display: inline-block.

1469
00:43:35,006 --> 0:43:38,416
Okay. So those were a couple of

1470
00:43:38,416 --> 0:43:39,166
small changes.

1471
00:43:39,526 --> 0:43:40,876
Let's see how it now behaves.

1472
00:43:41,056 --> 0:43:44,846
All right, so it's now a

1473
00:43:44,846 --> 0:43:46,026
three-column layout in portrait

1474
00:43:46,026 --> 0:43:47,666
mode, but if I rotate back into

1475
00:43:47,666 --> 0:43:50,746
landscape mode, it becomes four

1476
00:43:50,746 --> 0:43:51,196
columns.

1477
00:43:51,486 --> 0:43:52,496
That's because landscape mode is

1478
00:43:52,496 --> 0:43:53,726
wide enough to accommodate for

1479
00:43:53,726 --> 0:43:54,626
the four-column layout.

1480
00:43:55,926 --> 0:43:57,186
Either way, there's no more

1481
00:43:57,186 --> 0:43:58,576
scaling, and that's great.

1482
00:43:59,636 --> 0:44:01,656
Okay, so next let's talk about

1483
00:43:59,636 --> 0:44:01,656
Okay, so next let's talk about

1484
00:44:01,656 --> 0:44:02,016
drawing.

1485
00:44:02,776 --> 0:44:04,036
As Beth mentioned, there's no

1486
00:44:04,036 --> 0:44:06,116
mouse move on iPad, but luckily,

1487
00:44:06,386 --> 0:44:08,066
I can adopt pointer events, and

1488
00:44:08,066 --> 0:44:09,956
the touch-action CSS property to

1489
00:44:09,956 --> 0:44:10,426
make it work.

1490
00:44:11,426 --> 0:44:14,826
So let's return to the CSS file.

1491
00:44:15,056 --> 0:44:16,386
So over here, I'm going to add

1492
00:44:16,386 --> 0:44:18,426
touch-action none, or

1493
00:44:18,426 --> 0:44:19,456
specifically, I'm going to add

1494
00:44:19,456 --> 0:44:20,526
it to the .drawable-canvas

1495
00:44:20,776 --> 0:44:21,716
which, as its name might

1496
00:44:21,716 --> 0:44:23,366
suggest, is the element that I'm

1497
00:44:23,366 --> 0:44:24,466
going to be dragging my finger

1498
00:44:24,466 --> 0:44:25,366
over as I draw.

1499
00:44:26,156 --> 0:44:27,876
Of course, it's important that

1500
00:44:27,876 --> 0:44:30,376
as I drag my finger over, it

1501
00:44:30,376 --> 0:44:31,036
doesn't scroll.

1502
00:44:32,006 --> 0:44:32,916
That's why touch-action is

1503
00:44:32,916 --> 0:44:33,406
important.

1504
00:44:34,516 --> 0:44:36,196
Okay, next I'm going to go over

1505
00:44:36,196 --> 0:44:38,286
to the JavaScript file where I'm

1506
00:44:38,286 --> 0:44:40,816
going to look for mousemove.

1507
00:44:41,376 --> 0:44:44,216
Okay, so this is the code that

1508
00:44:44,216 --> 0:44:45,716
I'm currently using to listen

1509
00:44:45,716 --> 0:44:48,026
for mouse events so I can draw

1510
00:44:48,026 --> 0:44:48,476
on my Mac.

1511
00:44:49,696 --> 0:44:50,686
I'm going to adjust this a

1512
00:44:50,686 --> 0:44:51,726
little bit.

1513
00:44:52,336 --> 0:44:55,716
So instead, what I'm going to do

1514
00:44:55,966 --> 0:44:57,016
is check if pointer events are

1515
00:44:57,016 --> 0:44:57,456
supported.

1516
00:44:58,236 --> 0:44:59,506
If they are, I'm going to

1517
00:44:59,506 --> 0:45:00,946
register pointer event listeners

1518
00:44:59,506 --> 0:45:00,946
register pointer event listeners

1519
00:45:00,946 --> 0:45:01,546
instead.

1520
00:45:02,556 --> 0:45:03,716
Otherwise, I'll fall back to the

1521
00:45:03,716 --> 0:45:04,736
mouse events that I'm currently

1522
00:45:04,736 --> 0:45:05,076
using.

1523
00:45:06,366 --> 0:45:09,296
Okay, so let's see these changes

1524
00:45:09,346 --> 0:45:10,016
in action though.

1525
00:45:10,586 --> 0:45:14,956
Let's give our canine friend

1526
00:45:14,956 --> 0:45:15,856
Sona [phonetic] here a little

1527
00:45:15,856 --> 0:45:15,976
hat.

1528
00:45:22,336 --> 0:45:24,316
Well, it's not best drawn, but

1529
00:45:24,316 --> 0:45:25,816
as you can see, I can clearly

1530
00:45:25,996 --> 0:45:28,136
able to draw now.

1531
00:45:28,376 --> 0:45:31,036
Okay, so one last minor detail.

1532
00:45:32,436 --> 0:45:33,886
As Beth mentioned, iPad is

1533
00:45:33,886 --> 0:45:36,116
compatible with mouse hover, but

1534
00:45:36,116 --> 0:45:37,486
it's not immediately clear to me

1535
00:45:37,736 --> 0:45:38,996
that the way to edit or delete,

1536
00:45:38,996 --> 0:45:42,016
or drawings rather, is to first

1537
00:45:42,296 --> 0:45:43,996
tap on each drawing in order to

1538
00:45:43,996 --> 0:45:46,736
show the controls and then tap

1539
00:45:46,736 --> 0:45:47,876
on the controls themselves.

1540
00:45:47,876 --> 0:45:49,636
It means that any meaningful

1541
00:45:49,636 --> 0:45:51,466
interaction with my app is going

1542
00:45:51,466 --> 0:45:53,926
to require two taps on iPad.

1543
00:45:53,926 --> 0:45:57,426
Let's make it easy to edit and

1544
00:45:57,426 --> 0:45:58,636
delete with a single tap.

1545
00:45:59,476 --> 0:46:00,866
What I'm going to do is add a

1546
00:45:59,476 --> 0:46:00,866
What I'm going to do is add a

1547
00:46:00,866 --> 0:46:01,786
Delete button that's always

1548
00:46:01,786 --> 0:46:03,506
visible and just make tapping on

1549
00:46:03,506 --> 0:46:05,426
each drawing immediately go into

1550
00:46:05,426 --> 0:46:06,086
editing mode.

1551
00:46:07,126 --> 0:46:07,686
So let's do that.

1552
00:46:09,026 --> 0:46:10,546
First, I'm going to go over to

1553
00:46:10,546 --> 0:46:12,406
the HTML file where I'm going to

1554
00:46:12,406 --> 0:46:13,296
add a bit of markup.

1555
00:46:13,816 --> 0:46:15,806
It's a very simple button that

1556
00:46:15,806 --> 0:46:16,486
I'm going to add here.

1557
00:46:17,256 --> 0:46:18,386
But note that I'm putting the

1558
00:46:18,386 --> 0:46:19,566
class static-control here.

1559
00:46:20,406 --> 0:46:21,346
It's going to become important

1560
00:46:21,666 --> 0:46:22,656
very soon, because I'm going to

1561
00:46:22,656 --> 0:46:25,736
head over to the CSS file where

1562
00:46:25,736 --> 0:46:27,046
I'm going to add a media query.

1563
00:46:27,046 --> 0:46:31,446
So what I'm doing here is I'm

1564
00:46:31,446 --> 0:46:32,676
checking if hover is supported

1565
00:46:32,766 --> 0:46:34,356
by using this media query, and

1566
00:46:34,356 --> 0:46:35,646
if it is supported, we don't

1567
00:46:35,646 --> 0:46:36,386
actually need that

1568
00:46:36,386 --> 0:46:37,666
static-control, that static

1569
00:46:37,666 --> 0:46:38,696
Delete button that I just added.

1570
00:46:39,396 --> 0:46:41,596
So I can just set display: none

1571
00:46:41,836 --> 0:46:44,546
on that, and it should hide it.

1572
00:46:44,806 --> 0:46:46,016
Lastly, there's a small change

1573
00:46:46,016 --> 0:46:46,896
we have to make to our

1574
00:46:46,896 --> 0:46:47,546
JavaScript file.

1575
00:46:48,556 --> 0:46:49,696
So now I'm going to look for

1576
00:46:49,696 --> 0:46:52,326
mouseenter, and this is a code

1577
00:46:52,326 --> 0:46:54,016
I'm using to show or hide the

1578
00:46:54,016 --> 0:46:55,906
hover controls when the user's

1579
00:46:55,906 --> 0:46:57,296
mouse enters or leaves each

1580
00:46:57,296 --> 0:46:57,606
drawing.

1581
00:46:58,436 --> 0:46:59,596
We don't need to do this if

1582
00:46:59,596 --> 0:47:00,486
hover is not supported.

1583
00:46:59,596 --> 0:47:00,486
hover is not supported.

1584
00:47:01,316 --> 0:47:02,426
So what I'm going to do is add a

1585
00:47:02,426 --> 0:47:03,316
bit of logic up here.

1586
00:47:04,196 --> 0:47:05,266
It's going to use the same media

1587
00:47:05,266 --> 0:47:07,026
query as I did in the CSS file

1588
00:47:07,186 --> 0:47:09,096
to check if hover exists, and if

1589
00:47:09,096 --> 0:47:11,286
hover is not supported, I'm

1590
00:47:11,286 --> 0:47:12,986
going to instead add a click

1591
00:47:12,986 --> 0:47:14,366
event listener to the drawing

1592
00:47:14,366 --> 0:47:15,806
itself and allow it to

1593
00:47:15,806 --> 0:47:17,756
immediately start drawing mode.

1594
00:47:18,866 --> 0:47:21,126
Then this early return ensures

1595
00:47:21,126 --> 0:47:22,356
that I don't add the event

1596
00:47:22,356 --> 0:47:24,336
listeners I don't need in the

1597
00:47:24,336 --> 0:47:25,276
case where hover is not

1598
00:47:25,276 --> 0:47:25,636
supported.

1599
00:47:26,906 --> 0:47:28,176
Okay, so that was a lot of

1600
00:47:28,176 --> 0:47:28,596
changes.

1601
00:47:29,286 --> 0:47:30,226
But let's see it in action now.

1602
00:47:30,226 --> 0:47:33,556
All right, first thing I notice

1603
00:47:33,556 --> 0:47:35,636
is that Delete buttons are now

1604
00:47:35,636 --> 0:47:36,826
always visible and ready to be

1605
00:47:36,826 --> 0:47:37,066
tapped.

1606
00:47:38,566 --> 0:47:39,456
But if I tap on each of the

1607
00:47:39,456 --> 0:47:41,746
drawings, I'm able to edit them

1608
00:47:41,966 --> 0:47:42,606
immediately.

1609
00:47:43,886 --> 0:47:45,396
So it's one tap to do anything

1610
00:47:45,396 --> 0:47:46,506
in my app.

1611
00:47:48,626 --> 0:47:50,226
Okay, so with a few simple

1612
00:47:50,226 --> 0:47:52,166
steps, I've made my desktop web

1613
00:47:52,166 --> 0:47:54,306
app work great on iPad, and I

1614
00:47:54,306 --> 0:47:56,276
think you web developers out

1615
00:47:56,276 --> 0:47:57,266
there can as well.

1616
00:47:58,396 --> 0:47:59,406
I'd like to now hand it off to

1617
00:47:59,406 --> 0:48:01,176
Charles to summarize what we've

1618
00:47:59,406 --> 0:48:01,176
Charles to summarize what we've

1619
00:48:01,176 --> 0:48:02,686
covered today, and I'll see you

1620
00:48:02,686 --> 0:48:03,306
at the labs.

1621
00:48:04,516 --> 0:48:12,896
[ Applause ]

1622
00:48:13,396 --> 0:48:14,986
&gt;&gt; Thanks, Wenson.

1623
00:48:14,986 --> 0:48:18,296
Your web app looks awesome.

1624
00:48:18,296 --> 0:48:21,066
In summary, iPad has made major

1625
00:48:21,066 --> 0:48:23,326
new advancements to make today's

1626
00:48:23,326 --> 0:48:25,406
desktop websites work great out

1627
00:48:25,406 --> 0:48:26,236
of the box.

1628
00:48:26,916 --> 0:48:28,866
We want you to take advantage of

1629
00:48:28,866 --> 0:48:31,016
these new features to make your

1630
00:48:31,246 --> 0:48:33,816
app or website even better on

1631
00:48:33,816 --> 0:48:35,736
iPad just like you did for

1632
00:48:35,736 --> 0:48:35,936
iPhone.

1633
00:48:39,156 --> 0:48:41,756
For our web developers, consider

1634
00:48:41,756 --> 0:48:43,736
building one responsive website

1635
00:48:44,206 --> 0:48:46,036
using the techniques we talked

1636
00:48:46,736 --> 0:48:47,846
about today.

1637
00:48:48,046 --> 0:48:50,306
For app developers, let Safari

1638
00:48:50,306 --> 0:48:51,326
View Controller and

1639
00:48:51,326 --> 0:48:53,126
ASWebAuthenticationSession do

1640
00:48:53,126 --> 0:48:55,076
the heavy lifting for you.

1641
00:48:55,636 --> 0:48:58,036
If using WKWebView, please test

1642
00:48:58,036 --> 0:48:58,406
your app.

1643
00:48:59,926 --> 0:49:01,746
And please file bugs and send us

1644
00:48:59,926 --> 0:49:01,746
And please file bugs and send us

1645
00:49:01,746 --> 0:49:02,216
your feedback.

1646
00:49:02,706 --> 0:49:05,316
We'd love to hear from you.

1647
00:49:05,536 --> 0:49:06,536
For more information about our

1648
00:49:06,536 --> 0:49:08,386
other exciting authentication

1649
00:49:08,526 --> 0:49:10,346
and web platform features, you

1650
00:49:10,346 --> 0:49:11,516
should definitely check out

1651
00:49:11,796 --> 0:49:13,856
Session 504, What's New in

1652
00:49:13,856 --> 0:49:15,696
Authentication, Safari, and

1653
00:49:15,696 --> 0:49:17,976
WebKit on Thursday at 11:00 am.

1654
00:49:18,916 --> 0:49:20,556
There are also two labs related

1655
00:49:20,556 --> 0:49:23,016
to the session today at 1:00 pm

1656
00:49:23,466 --> 0:49:25,066
and Thursday at 12:00 pm.

1657
00:49:25,826 --> 0:49:27,536
Please come to talk and learn

1658
00:49:27,536 --> 0:49:28,986
more about what you heard today.

1659
00:49:30,206 --> 0:49:31,846
Thank you and have a wonderful

1660
00:49:32,056 --> 0:49:32,976
WWDC.

1661
00:49:33,516 --> 0:49:38,500
[ Applause ]
