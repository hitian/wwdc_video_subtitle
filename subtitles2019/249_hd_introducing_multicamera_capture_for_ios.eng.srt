1
00:00:01,516 --> 0:00:04,500
[ Music ]

2
00:00:10,646 --> 0:00:13,176
&gt;&gt; Multi-camera capture or as we

3
00:00:13,176 --> 0:00:14,506
like to call it internally,

4
00:00:15,106 --> 0:00:16,886
MultiCam.

5
00:00:17,896 --> 0:00:20,356
MultiCam is our single most

6
00:00:20,396 --> 0:00:21,976
requested third-party feature.

7
00:00:21,976 --> 0:00:23,766
We hear it year after year in

8
00:00:23,766 --> 0:00:24,246
the labs.

9
00:00:24,246 --> 0:00:25,876
So what we're talking about here

10
00:00:25,876 --> 0:00:27,846
is the ability to simultaneously

11
00:00:27,846 --> 0:00:31,536
capture video, audio, metadata,

12
00:00:31,816 --> 0:00:34,666
depth and photos from multiple

13
00:00:34,666 --> 0:00:35,786
cameras and microphones

14
00:00:35,786 --> 0:00:36,686
simultaneously.

15
00:00:37,236 --> 0:00:40,186
Third parties aren't the only

16
00:00:40,186 --> 0:00:41,306
ones who benefit from this

17
00:00:41,306 --> 0:00:41,556
though.

18
00:00:42,166 --> 0:00:44,416
We've had many and repeated

19
00:00:44,416 --> 0:00:45,566
requests from first-party

20
00:00:45,596 --> 0:00:47,426
clients as well for MultiCam

21
00:00:47,466 --> 0:00:47,916
capture.

22
00:00:48,416 --> 0:00:50,096
Chief among them is ARKit.

23
00:00:50,456 --> 0:00:51,966
And if you heard the keynote,

24
00:00:52,516 --> 0:00:53,736
you heard about the introduction

25
00:00:53,736 --> 0:00:54,936
of ARKit 3.

26
00:00:55,576 --> 0:00:57,876
These APIs use front camera for

27
00:00:57,966 --> 0:01:00,166
face and pose tracking while

28
00:00:57,966 --> 0:01:00,166
face and pose tracking while

29
00:01:00,166 --> 0:01:01,656
also using the back camera for

30
00:01:01,656 --> 0:01:03,416
world tracking which helps them

31
00:01:03,416 --> 0:01:04,686
know where to place virtual

32
00:01:04,686 --> 0:01:06,266
characters in the scene by

33
00:01:06,266 --> 0:01:07,296
knowing what you're gazing at.

34
00:01:08,876 --> 0:01:10,776
So we've supported MultiCam on

35
00:01:10,776 --> 0:01:12,936
the Mac since the very first

36
00:01:12,936 --> 0:01:15,166
appearance of AVFoundation way

37
00:01:15,166 --> 0:01:16,276
the heck back in Lion.

38
00:01:17,126 --> 0:01:19,446
But on iOS, AVFoundation still

39
00:01:19,446 --> 0:01:21,226
limits clients to one active

40
00:01:21,286 --> 0:01:22,286
camera at a time.

41
00:01:22,906 --> 0:01:24,716
And it's not because we're mean.

42
00:01:24,916 --> 0:01:26,356
There were good reasons for it.

43
00:01:26,756 --> 0:01:27,996
The first reason is hardware

44
00:01:27,996 --> 0:01:28,796
limitations.

45
00:01:29,346 --> 0:01:30,796
I'm talking about cameras

46
00:01:30,846 --> 0:01:33,296
sharing power rails and not

47
00:01:33,566 --> 0:01:34,896
physically being able to provide

48
00:01:34,896 --> 0:01:36,256
enough power to power two

49
00:01:36,296 --> 0:01:37,726
cameras simultaneously full

50
00:01:37,726 --> 0:01:38,096
bore.

51
00:01:38,816 --> 0:01:41,016
And the second reason was our

52
00:01:41,016 --> 0:01:42,766
desire to ship a responsible

53
00:01:42,766 --> 0:01:44,896
API, one that would help you not

54
00:01:45,016 --> 0:01:47,516
burn the phone down when doing

55
00:01:47,516 --> 0:01:49,126
all of this processing power

56
00:01:49,126 --> 0:01:50,186
with multiple cameras

57
00:01:50,186 --> 0:01:51,076
simultaneously.

58
00:01:51,076 --> 0:01:52,146
So we wanted to make sure that

59
00:01:52,146 --> 0:01:53,226
we delivered something to you

60
00:01:53,226 --> 0:01:55,056
that would help you deal with

61
00:01:55,056 --> 0:01:56,606
the hardware, thermal and

62
00:01:56,606 --> 0:01:58,336
bandwidth constraints that are a

63
00:01:58,336 --> 0:01:59,356
reality in our world.

64
00:02:00,406 --> 0:02:02,136
All right, so great news in iOS

65
00:02:02,176 --> 0:02:03,686
13, we do finally support

66
00:02:03,686 --> 0:02:05,696
MultiCam capture, and we do it

67
00:02:05,696 --> 0:02:07,596
on all recent hardware, iPhone

68
00:02:07,666 --> 0:02:12,166
XS, XS Max, XR and the new iPad

69
00:02:12,236 --> 0:02:12,656
Pro.

70
00:02:13,116 --> 0:02:14,936
On all of these platforms, the

71
00:02:14,936 --> 0:02:15,796
aforementioned hardware

72
00:02:15,796 --> 0:02:17,156
limitations have been solved

73
00:02:17,356 --> 0:02:17,786
thankfully.

74
00:02:19,176 --> 0:02:20,616
So let's dive right in to the

75
00:02:20,726 --> 0:02:21,416
fun stuff.

76
00:02:21,566 --> 0:02:23,716
We've got a new set of APIs for

77
00:02:23,716 --> 0:02:25,586
building MultiCam sessions.

78
00:02:26,926 --> 0:02:28,516
Now, if you've used AVFoundation

79
00:02:28,516 --> 0:02:29,856
before for camera capture, you

80
00:02:29,856 --> 0:02:31,336
know that we have four main

81
00:02:31,336 --> 0:02:33,196
groups of classes: inputs,

82
00:02:33,646 --> 0:02:36,346
outputs, the session and

83
00:02:36,346 --> 0:02:37,046
connections.

84
00:02:37,576 --> 0:02:40,456
The AVCaptureSession is the

85
00:02:40,456 --> 0:02:41,516
center of our world.

86
00:02:41,666 --> 0:02:43,046
It's the thing that marshals

87
00:02:43,046 --> 0:02:43,296
data.

88
00:02:43,846 --> 0:02:44,916
It's the thing that you tell to

89
00:02:44,916 --> 0:02:46,016
start or stop running.

90
00:02:47,556 --> 0:02:49,146
You add to it one or more

91
00:02:49,146 --> 0:02:50,936
inputs, AVCapture inputs.

92
00:02:51,326 --> 0:02:52,076
One such is the

93
00:02:52,076 --> 0:02:54,236
AVCaptureDeviceInput which is a

94
00:02:54,236 --> 0:02:56,356
wrapper for either a camera or a

95
00:02:56,356 --> 0:02:56,916
microphone.

96
00:02:58,416 --> 0:02:59,646
You also need to add one or more

97
00:02:59,646 --> 0:03:01,846
AVCapture outputs to receive the

98
00:02:59,646 --> 0:03:01,846
AVCapture outputs to receive the

99
00:03:01,846 --> 0:03:02,146
data.

100
00:03:02,566 --> 0:03:03,956
Otherwise, those producers have

101
00:03:03,956 --> 0:03:04,616
nowhere to put it.

102
00:03:05,686 --> 0:03:06,396
And then the session

103
00:03:06,396 --> 0:03:07,386
automatically creates

104
00:03:07,386 --> 0:03:08,666
connections on your behalf

105
00:03:08,906 --> 0:03:10,626
between inputs and outputs that

106
00:03:10,626 --> 0:03:12,066
have compatible media types.

107
00:03:12,846 --> 0:03:13,796
So note what I'm showing you

108
00:03:13,796 --> 0:03:14,946
here is the traditional

109
00:03:14,946 --> 0:03:17,296
AVCaptureSession, which on iOS

110
00:03:17,296 --> 0:03:19,686
only allows one camera input per

111
00:03:19,686 --> 0:03:20,096
session.

112
00:03:21,796 --> 0:03:24,116
New in iOS 13, we're introducing

113
00:03:24,116 --> 0:03:25,906
a subclass of AVCaptureSession

114
00:03:25,906 --> 0:03:28,476
called AVCaptureMultiCamSession.

115
00:03:28,856 --> 0:03:31,276
So this lets you do multiple ins

116
00:03:31,336 --> 0:03:32,106
and outs.

117
00:03:32,996 --> 0:03:36,076
AVCaptureSession is not

118
00:03:36,266 --> 0:03:36,946
deprecated.

119
00:03:36,946 --> 0:03:38,306
It's not going away.

120
00:03:38,596 --> 0:03:40,226
In fact, the existing

121
00:03:40,226 --> 0:03:41,586
AVCaptureSession is still the

122
00:03:41,586 --> 0:03:42,656
preferred class when you're

123
00:03:42,656 --> 0:03:44,216
doing single-cam capture.

124
00:03:44,686 --> 0:03:45,826
The reason for that is that

125
00:03:45,936 --> 0:03:48,066
MultiCamSession, while being a

126
00:03:48,066 --> 0:03:50,436
power tool has some limitations,

127
00:03:50,606 --> 0:03:51,896
and I'll address those later.

128
00:03:53,366 --> 0:03:54,926
All right, so let me give you an

129
00:03:54,926 --> 0:03:56,256
example of a bread-and-butter

130
00:03:56,256 --> 0:03:58,036
use case for our new

131
00:03:58,036 --> 0:03:59,346
AVCaptureMultiCamSession.

132
00:03:59,866 --> 0:04:01,206
Let's say you want to add two

133
00:03:59,866 --> 0:04:01,206
Let's say you want to add two

134
00:04:01,206 --> 0:04:02,456
devices, one for the front and

135
00:04:02,456 --> 0:04:04,546
one for the back camera to a

136
00:04:04,546 --> 0:04:07,056
MultiCamSession and do two video

137
00:04:07,056 --> 0:04:09,296
data outputs simultaneously, one

138
00:04:09,296 --> 0:04:10,516
receiving frames from the back

139
00:04:10,576 --> 0:04:11,646
camera, one from the front.

140
00:04:12,886 --> 0:04:14,666
And then let's say if you want

141
00:04:14,776 --> 0:04:16,106
to do a real-time preview, you

142
00:04:16,106 --> 0:04:17,136
can add separate

143
00:04:17,136 --> 0:04:18,456
VideoPreviewLayers, one for the

144
00:04:18,505 --> 0:04:19,636
front, one for the back.

145
00:04:20,866 --> 0:04:21,956
You needn't stop there though.

146
00:04:22,896 --> 0:04:27,116
You can do simultaneous metadata

147
00:04:27,116 --> 0:04:28,616
outputs if you want to do

148
00:04:28,616 --> 0:04:30,766
simultaneous barcode scanning or

149
00:04:30,766 --> 0:04:31,586
face detection.

150
00:04:32,576 --> 0:04:34,516
You could do multiple movie file

151
00:04:34,516 --> 0:04:35,736
outputs if you want to record

152
00:04:35,736 --> 0:04:36,756
one for the front and one for

153
00:04:36,756 --> 0:04:37,016
the back.

154
00:04:37,526 --> 0:04:39,286
You could add multiple photo

155
00:04:39,286 --> 0:04:40,886
outputs if you want to do

156
00:04:41,096 --> 0:04:42,706
real-time capture of photos from

157
00:04:42,706 --> 0:04:43,516
different cameras.

158
00:04:43,926 --> 0:04:45,226
So as you can see, these graphs

159
00:04:45,226 --> 0:04:46,216
are starting to look pretty

160
00:04:46,216 --> 0:04:48,196
complicated with a lot of arrows

161
00:04:48,196 --> 0:04:49,596
going from a lot inputs to a lot

162
00:04:49,596 --> 0:04:50,186
of outputs.

163
00:04:51,176 --> 0:04:52,916
Those little arrows are called

164
00:04:52,916 --> 0:04:54,556
AVCaptureConnections, and they

165
00:04:54,556 --> 0:04:56,046
define the flow of data from an

166
00:04:56,046 --> 0:04:57,136
input to an output.

167
00:04:57,756 --> 0:04:59,036
Let me zoom in for a moment on

168
00:04:59,036 --> 0:05:01,016
the device input to illustrate

169
00:04:59,036 --> 0:05:01,016
the device input to illustrate

170
00:05:01,016 --> 0:05:02,136
the anatomy of a connection.

171
00:05:03,616 --> 0:05:06,746
Capture inputs have AVCapture

172
00:05:06,746 --> 0:05:09,116
input ports, which I like to

173
00:05:09,116 --> 0:05:10,916
think of as little electrical

174
00:05:10,916 --> 0:05:11,476
outlets.

175
00:05:12,196 --> 0:05:14,546
You have one outlet per media

176
00:05:14,546 --> 0:05:16,296
type that the input can produce.

177
00:05:17,226 --> 0:05:18,536
If nothing is plugged into the

178
00:05:18,536 --> 0:05:20,446
port, no data flows from that

179
00:05:20,506 --> 0:05:21,776
port, just like an electrical

180
00:05:21,776 --> 0:05:22,136
outlet.

181
00:05:22,226 --> 0:05:23,276
You have to plug something in to

182
00:05:23,276 --> 0:05:24,096
get the electricity.

183
00:05:24,606 --> 0:05:26,056
Now, to find out what ports are

184
00:05:26,056 --> 0:05:27,446
available for our particular

185
00:05:27,446 --> 0:05:29,776
input, you can query that input

186
00:05:30,086 --> 0:05:31,786
ports property, and it will tell

187
00:05:31,786 --> 0:05:33,626
you "I have this array of

188
00:05:33,626 --> 0:05:34,856
AVCapture input ports."

189
00:05:35,196 --> 0:05:36,986
So for the dual camera, these

190
00:05:36,986 --> 0:05:37,916
are the ports that you would

191
00:05:37,916 --> 0:05:39,766
find, one for video, one for

192
00:05:39,766 --> 0:05:42,096
depth, one for metadata objects

193
00:05:42,146 --> 0:05:43,436
such as barcode scanning and

194
00:05:43,436 --> 0:05:46,016
faces and one for metadata items

195
00:05:46,106 --> 0:05:47,156
which can be hooked up to a

196
00:05:47,156 --> 0:05:48,016
movie file output.

197
00:05:49,596 --> 0:05:50,506
Now, whenever you use

198
00:05:50,506 --> 0:05:52,096
AVCaptureSession's add input

199
00:05:52,096 --> 0:05:53,816
method to add an input to the

200
00:05:53,816 --> 0:05:57,076
session or add output to add an

201
00:05:57,076 --> 0:05:59,076
output to the session, the

202
00:05:59,076 --> 0:06:00,976
session will look for compatible

203
00:05:59,076 --> 0:06:00,976
session will look for compatible

204
00:06:00,976 --> 0:06:02,786
media types and implicitly form

205
00:06:02,786 --> 0:06:03,936
connections if it can.

206
00:06:04,646 --> 0:06:05,546
So here we had a

207
00:06:05,546 --> 0:06:06,666
VideoDataOutput.

208
00:06:06,916 --> 0:06:08,976
VideoDataOutputs receive video,

209
00:06:08,976 --> 0:06:10,836
accept video, and we had an

210
00:06:10,836 --> 0:06:12,586
electrical plug that can produce

211
00:06:12,586 --> 0:06:14,186
video, and so the connection was

212
00:06:14,186 --> 0:06:15,226
made automatically.

213
00:06:15,866 --> 0:06:17,836
That is how most of you are

214
00:06:18,246 --> 0:06:19,476
accustomed to working with

215
00:06:19,476 --> 0:06:20,626
AVCaptureSession if you've

216
00:06:20,626 --> 0:06:21,906
worked with our classes before.

217
00:06:22,586 --> 0:06:24,306
MultiCamSession is a different

218
00:06:24,306 --> 0:06:24,716
beast.

219
00:06:25,496 --> 0:06:27,466
That is because inputs and

220
00:06:27,466 --> 0:06:29,476
outputs, you have multiple

221
00:06:29,476 --> 0:06:30,656
inputs out now with multiple

222
00:06:30,656 --> 0:06:31,076
outputs.

223
00:06:31,076 --> 0:06:32,106
You probably want to make sure

224
00:06:32,106 --> 0:06:33,146
that the connections are

225
00:06:33,146 --> 0:06:35,736
happening from A to A and B to B

226
00:06:35,736 --> 0:06:36,976
and not crossing where you

227
00:06:36,976 --> 0:06:38,006
didn't intend them to.

228
00:06:38,486 --> 0:06:40,136
So when building a

229
00:06:40,136 --> 0:06:42,246
MultiCamSession, we urge you not

230
00:06:42,246 --> 0:06:43,996
to use implicit connection

231
00:06:44,146 --> 0:06:46,806
forming but instead use these

232
00:06:46,806 --> 0:06:48,866
special purpose adders,

233
00:06:48,866 --> 0:06:51,546
addInputWithNoConnections or

234
00:06:51,546 --> 0:06:53,286
addOutputWithNoConnections.

235
00:06:53,886 --> 0:06:57,966
And there are likewise ones that

236
00:06:57,966 --> 0:06:59,376
you can use for video preview

237
00:06:59,376 --> 0:07:00,616
layer, which are

238
00:06:59,376 --> 0:07:00,616
layer, which are

239
00:07:00,936 --> 0:07:02,716
setSessionWithNoConnections.

240
00:07:03,116 --> 0:07:05,056
When you use these, it basically

241
00:07:05,056 --> 0:07:06,926
just tells the session "Here are

242
00:07:06,926 --> 0:07:08,016
these inputs, here are these

243
00:07:08,016 --> 0:07:08,526
outputs.

244
00:07:08,596 --> 0:07:10,296
You now know about them, but

245
00:07:10,296 --> 0:07:11,256
keep your hands off them.

246
00:07:11,466 --> 0:07:13,096
I'm going to add connections as

247
00:07:13,096 --> 0:07:14,676
I want to later on manually."

248
00:07:15,506 --> 0:07:16,926
The way you do that is you

249
00:07:16,926 --> 0:07:18,586
create the AVCaptureConnection

250
00:07:18,586 --> 0:07:20,486
yourself by telling it "I want

251
00:07:20,486 --> 0:07:22,126
you to connect this port or

252
00:07:22,126 --> 0:07:24,356
ports to this output," and then

253
00:07:24,356 --> 0:07:25,636
you tell the session, "Please

254
00:07:25,636 --> 0:07:27,096
add this connection," and now

255
00:07:27,096 --> 0:07:27,666
you're ready to go.

256
00:07:27,666 --> 0:07:30,116
That was very wordy.

257
00:07:30,426 --> 0:07:32,266
It's better shown than talked

258
00:07:32,266 --> 0:07:33,396
about, so I'd like to bring up

259
00:07:33,426 --> 0:07:35,466
Nik Gelo, also from the Camera

260
00:07:35,466 --> 0:07:37,396
Software group to demonstrate

261
00:07:37,396 --> 0:07:38,256
AVMultiCamPIP.

262
00:07:38,806 --> 0:07:38,976
Nick?

263
00:07:40,896 --> 0:07:41,386
&gt;&gt; Thanks, Brad.

264
00:07:42,426 --> 0:07:43,896
AVMultiCamPIP is an app that

265
00:07:43,896 --> 0:07:44,916
demonstrates streaming from the

266
00:07:44,976 --> 0:07:45,826
front and back camera

267
00:07:45,826 --> 0:07:46,656
simultaneously.

268
00:07:46,936 --> 0:07:48,786
Here we have two video previews,

269
00:07:48,786 --> 0:07:49,916
one displaying the front camera

270
00:07:50,186 --> 0:07:51,056
and one displaying the back

271
00:07:51,056 --> 0:07:51,376
camera.

272
00:07:51,376 --> 0:07:52,496
And when I double-tap the

273
00:07:52,496 --> 0:07:54,146
screen, I can swap which camera

274
00:07:54,146 --> 0:07:55,726
appears full-screen and which

275
00:07:55,726 --> 0:07:56,716
camera appears PIP.

276
00:08:03,516 --> 0:08:07,326
[ Applause ]

277
00:08:07,826 --> 0:08:10,186
Now, we can see here that Brad

278
00:08:10,186 --> 0:08:11,586
is live at Apple Park.

279
00:08:11,586 --> 0:08:13,866
And before I ask him a few

280
00:08:13,866 --> 0:08:15,566
questions, I will press the

281
00:08:15,566 --> 0:08:16,846
Record button here at the bottom

282
00:08:17,146 --> 0:08:18,426
to watch his conversation later.

283
00:08:19,436 --> 0:08:19,866
Hey, Brad.

284
00:08:20,406 --> 0:08:21,576
So tell me, how's it going over

285
00:08:21,576 --> 0:08:22,086
at Apple Park?

286
00:08:22,686 --> 0:08:24,416
&gt;&gt; Nik, it's pandemonium here at

287
00:08:24,416 --> 0:08:24,946
Apple Park.

288
00:08:25,036 --> 0:08:26,196
As you can see in front of the

289
00:08:26,196 --> 0:08:27,486
reflecting pool, there's all

290
00:08:27,486 --> 0:08:28,886
kinds of activity happening.

291
00:08:29,266 --> 0:08:30,516
I hear a rushing of water.

292
00:08:30,896 --> 0:08:31,826
Sounds like I'm about to be

293
00:08:31,826 --> 0:08:32,946
drenched at any moment.

294
00:08:33,476 --> 0:08:35,256
I hear wild animals behind me

295
00:08:35,376 --> 0:08:36,616
like ducks or something.

296
00:08:37,056 --> 0:08:38,726
I honestly fear for my life

297
00:08:38,726 --> 0:08:38,895
here.

298
00:08:39,256 --> 0:08:40,106
&gt;&gt; Well, Brad, that seems

299
00:08:40,106 --> 0:08:40,956
absolutely terrifying.

300
00:08:40,956 --> 0:08:41,866
Hope you stay safe out there.

301
00:08:42,096 --> 0:08:42,895
&gt;&gt; Okay, thanks.

302
00:08:43,285 --> 0:08:43,576
&gt;&gt; Got it.

303
00:08:44,646 --> 0:08:45,666
&gt;&gt; So now that we finished

304
00:08:45,666 --> 0:08:47,076
recording the movie, let's take

305
00:08:47,076 --> 0:08:48,266
a look at what we just recorded.

306
00:08:48,266 --> 0:08:51,646
Here we have the movie.

307
00:08:51,646 --> 0:08:54,516
As you can see, when I swap

308
00:08:54,516 --> 0:08:56,996
between the two cameras, it

309
00:08:57,206 --> 0:08:59,156
swaps just like we did when

310
00:08:59,376 --> 0:08:59,996
using the app.

311
00:08:59,996 --> 0:09:02,196
And that's AVMultiCamPIP.

312
00:08:59,996 --> 0:09:02,196
And that's AVMultiCamPIP.

313
00:09:02,566 --> 0:09:02,976
Back to Brad.

314
00:09:03,516 --> 0:09:07,536
[ Applause ]

315
00:09:08,036 --> 0:09:08,516
&gt;&gt; Thanks, Nik.

316
00:09:08,836 --> 0:09:09,366
Awesome demo.

317
00:09:09,366 --> 0:09:12,216
All right, so let's look at

318
00:09:12,216 --> 0:09:13,536
what's happening under the hood

319
00:09:13,606 --> 0:09:14,856
in AVMultiCamPIP.

320
00:09:15,476 --> 0:09:17,056
So we have two device inputs,

321
00:09:17,056 --> 0:09:18,646
one for the front camera, one

322
00:09:18,646 --> 0:09:21,486
for the back camera added with

323
00:09:21,486 --> 0:09:23,276
no connections as I mentioned

324
00:09:23,276 --> 0:09:23,666
before.

325
00:09:23,906 --> 0:09:25,076
We also have two video data

326
00:09:25,076 --> 0:09:27,246
outputs, one for each and two

327
00:09:27,246 --> 0:09:28,306
VideoPreviewLayers.

328
00:09:28,786 --> 0:09:30,236
Now, to place them onscreen,

329
00:09:30,466 --> 0:09:31,726
it's just a matter of taking

330
00:09:31,726 --> 0:09:34,416
those VideoPreviewLayers and

331
00:09:34,416 --> 0:09:35,896
ordering them so that one is top

332
00:09:35,896 --> 0:09:37,296
of the other and one is sized

333
00:09:37,296 --> 0:09:37,846
smaller.

334
00:09:37,846 --> 0:09:39,796
And when Nik double-tapped them,

335
00:09:40,056 --> 0:09:42,166
we simply reposition them and

336
00:09:42,166 --> 0:09:43,226
reverse the Z ordering.

337
00:09:43,696 --> 0:09:44,626
Now, there is some magic

338
00:09:44,626 --> 0:09:45,976
happening in the Metal Shader

339
00:09:46,176 --> 0:09:47,216
Compositor code.

340
00:09:47,596 --> 0:09:48,906
There it's taking those two

341
00:09:48,906 --> 0:09:51,306
VideoDataOutputs and compositing

342
00:09:51,306 --> 0:09:53,556
them so that the smaller PIP is

343
00:09:53,556 --> 0:09:55,516
arranged within one frame, so

344
00:09:55,516 --> 0:09:56,526
it's compositing them to a

345
00:09:56,526 --> 0:09:58,186
single video buffer and then

346
00:09:58,186 --> 0:09:59,916
sending them to an AVAssetWriter

347
00:10:00,166 --> 0:10:01,966
where they are recorded to one

348
00:10:01,966 --> 0:10:02,956
video track in a movie.

349
00:10:03,686 --> 0:10:05,296
This sample code is available

350
00:10:05,546 --> 0:10:06,086
right now.

351
00:10:06,476 --> 0:10:07,416
It's associated with the

352
00:10:07,416 --> 0:10:07,796
session.

353
00:10:07,796 --> 0:10:08,806
You can take a look and start

354
00:10:08,806 --> 0:10:10,366
doing your own MultiCam

355
00:10:10,366 --> 0:10:10,976
captures.

356
00:10:11,426 --> 0:10:14,276
All right, time to talk about

357
00:10:14,276 --> 0:10:15,036
limitations.

358
00:10:15,166 --> 0:10:17,646
While AVMultiCamSession is a

359
00:10:17,646 --> 0:10:19,356
power tool, it doesn't do

360
00:10:19,356 --> 0:10:21,166
everything, and let me tell you

361
00:10:21,546 --> 0:10:22,666
what it does not do.

362
00:10:24,116 --> 0:10:25,806
First up, you cannot pretend

363
00:10:25,916 --> 0:10:28,046
that one camera is two cameras.

364
00:10:28,666 --> 0:10:31,356
AVCaptureDeviceInput API will

365
00:10:31,356 --> 0:10:33,016
let you create multiple

366
00:10:33,016 --> 0:10:34,876
instances for, say, the back

367
00:10:34,876 --> 0:10:35,276
camera.

368
00:10:35,586 --> 0:10:36,656
You could make 10 of them if you

369
00:10:36,656 --> 0:10:36,926
want.

370
00:10:37,326 --> 0:10:38,926
But if you try to add all those

371
00:10:38,926 --> 0:10:39,846
instances to one

372
00:10:39,846 --> 0:10:41,126
MultiCamSession, it'll say

373
00:10:41,156 --> 0:10:43,216
"Uh-uh," and it will throw an

374
00:10:43,216 --> 0:10:43,706
exception.

375
00:10:44,586 --> 0:10:46,516
Please, only one input per

376
00:10:46,516 --> 0:10:47,826
camera in a session.

377
00:10:48,956 --> 0:10:50,126
Also, you're not allowed to

378
00:10:50,196 --> 0:10:52,716
clone a camera to two outputs of

379
00:10:52,716 --> 0:10:55,716
the same type such as taking one

380
00:10:55,926 --> 0:10:57,786
camera and splitting its signal

381
00:10:57,786 --> 0:10:59,106
to two video data outputs.

382
00:10:59,646 --> 0:11:01,446
You can, of course, add multiple

383
00:10:59,646 --> 0:11:01,446
You can, of course, add multiple

384
00:11:01,446 --> 0:11:03,346
cameras and connect them to a

385
00:11:03,346 --> 0:11:05,136
VideoDataOutput each, but you

386
00:11:05,136 --> 0:11:06,976
cannot fan out from one to many.

387
00:11:10,566 --> 0:11:12,016
You're also not allowed -- the

388
00:11:12,016 --> 0:11:13,946
opposite holds true as well.

389
00:11:14,016 --> 0:11:16,826
AVCapture outputs on iOS do not

390
00:11:16,826 --> 0:11:18,086
support media mixing.

391
00:11:18,576 --> 0:11:20,706
So all the data outputs only can

392
00:11:20,706 --> 0:11:21,696
take a single input.

393
00:11:22,346 --> 0:11:23,586
You can't, for instance, try to

394
00:11:23,586 --> 0:11:25,236
jam two camera sources into a

395
00:11:25,236 --> 0:11:27,726
single data output.

396
00:11:27,726 --> 0:11:28,786
It wouldn't know what to do with

397
00:11:28,786 --> 0:11:29,796
the second video since it

398
00:11:29,796 --> 0:11:31,206
doesn't know how to mix them.

399
00:11:31,866 --> 0:11:33,706
You can, of course, use separate

400
00:11:33,706 --> 0:11:35,726
video data outputs and then

401
00:11:35,816 --> 0:11:37,236
composite those buffers in your

402
00:11:37,236 --> 0:11:38,696
own code, such as the Metal

403
00:11:38,696 --> 0:11:40,086
Shader Compositer that we used

404
00:11:40,086 --> 0:11:40,976
in MultiCamPIP.

405
00:11:41,656 --> 0:11:42,646
You can do that however you

406
00:11:42,646 --> 0:11:44,156
like, but as far as session

407
00:11:44,156 --> 0:11:45,636
building is concerned, do not

408
00:11:45,636 --> 0:11:47,356
try to jam multiple cameras into

409
00:11:47,356 --> 0:11:48,036
a single output.

410
00:11:49,526 --> 0:11:51,286
All right, a word about presets.

411
00:11:52,466 --> 0:11:54,026
The traditional AVCaptureSession

412
00:11:54,096 --> 0:11:55,706
has this concept of a session

413
00:11:55,706 --> 0:11:58,246
preset, which dictates a common

414
00:11:58,246 --> 0:11:59,846
quality of service for the whole

415
00:11:59,846 --> 0:12:00,256
session.

416
00:11:59,846 --> 0:12:00,256
session.

417
00:12:00,526 --> 0:12:02,886
And it applies to all inputs and

418
00:12:02,886 --> 0:12:04,166
outputs within that session.

419
00:12:04,456 --> 0:12:06,006
For instance, when you set the

420
00:12:06,006 --> 0:12:08,946
sessionPreset to high, the

421
00:12:08,946 --> 0:12:10,496
session configures the device's

422
00:12:10,496 --> 0:12:12,986
resolution and frame rate and

423
00:12:13,066 --> 0:12:14,486
all of the outputs so that they

424
00:12:14,486 --> 0:12:16,186
are delivering a high-quality

425
00:12:16,396 --> 0:12:17,666
video experience such as

426
00:12:17,666 --> 0:12:18,726
1080p30.

427
00:12:21,496 --> 0:12:23,126
Presets are a problem for

428
00:12:23,126 --> 0:12:24,096
MultiCamSession.

429
00:12:24,916 --> 0:12:26,556
Think again about something that

430
00:12:26,556 --> 0:12:27,376
looks like this.

431
00:12:28,106 --> 0:12:30,696
MultiCamSession configurations

432
00:12:30,696 --> 0:12:32,226
are hybrid; they're

433
00:12:32,226 --> 0:12:33,096
heterogeneous.

434
00:12:33,426 --> 0:12:34,646
What does it mean to have high

435
00:12:34,646 --> 0:12:35,936
quality for the whole thing?

436
00:12:36,286 --> 0:12:37,416
You might want to do different

437
00:12:37,416 --> 0:12:38,986
qualities of service on

438
00:12:38,986 --> 0:12:40,466
different branches of the graph.

439
00:12:40,886 --> 0:12:42,406
For instance, on the front

440
00:12:42,406 --> 0:12:43,736
camera you might want to just do

441
00:12:43,976 --> 0:12:45,366
a low-resolution preview such as

442
00:12:45,366 --> 0:12:48,096
640 by 480, while also

443
00:12:48,096 --> 0:12:49,646
simultaneously doing something

444
00:12:49,896 --> 0:12:51,786
really high-quality, 1080p60,

445
00:12:51,786 --> 0:12:52,986
for instance, on the back.

446
00:12:53,426 --> 0:12:54,676
Well, obviously, we don't have

447
00:12:54,776 --> 0:12:56,236
presets for all of these hybrid

448
00:12:56,236 --> 0:12:56,946
situations.

449
00:12:57,936 --> 0:12:59,036
We've decided to keep things

450
00:12:59,036 --> 0:13:00,956
simple in MultiCamSession.

451
00:12:59,036 --> 0:13:00,956
simple in MultiCamSession.

452
00:13:01,426 --> 0:13:02,956
It does not support presets.

453
00:13:03,076 --> 0:13:05,516
It supports one and one preset

454
00:13:05,516 --> 0:13:07,486
only which is input priority.

455
00:13:07,486 --> 0:13:09,116
So that means it leaves the

456
00:13:09,116 --> 0:13:11,206
inputs and outputs alone when

457
00:13:11,206 --> 0:13:12,406
you add them.

458
00:13:12,436 --> 0:13:13,826
You must configure the active

459
00:13:13,886 --> 0:13:14,926
format yourself.

460
00:13:17,576 --> 0:13:18,246
All right.

461
00:13:18,846 --> 0:13:20,206
On to the cost functions.

462
00:13:20,936 --> 0:13:21,926
I mentioned at the beginning

463
00:13:21,926 --> 0:13:23,306
that we took our time with this

464
00:13:23,376 --> 0:13:24,886
MultiCam support, because we

465
00:13:24,886 --> 0:13:26,106
wanted to deliver a very

466
00:13:26,106 --> 0:13:28,396
responsible API, one that could

467
00:13:28,396 --> 0:13:30,106
help you account for the various

468
00:13:30,146 --> 0:13:31,936
costs that you incur when

469
00:13:31,936 --> 0:13:33,246
running multiple cameras and

470
00:13:33,246 --> 0:13:34,946
lighting up virtually every

471
00:13:34,946 --> 0:13:35,756
block on the phone.

472
00:13:39,256 --> 0:13:41,236
So this is trite but true.

473
00:13:42,076 --> 0:13:43,396
There is no such thing as a free

474
00:13:43,396 --> 0:13:43,806
lunch.

475
00:13:44,046 --> 0:13:46,016
And so this is the part of the

476
00:13:46,016 --> 0:13:47,166
session where I become your

477
00:13:47,166 --> 0:13:48,836
father, and I'm going to give

478
00:13:48,836 --> 0:13:49,716
you the dad talk.

479
00:13:50,956 --> 0:13:52,536
In the dad talk, I will explain

480
00:13:52,536 --> 0:13:54,656
how credit cards work and how

481
00:13:54,656 --> 0:13:55,756
you need to be responsible with

482
00:13:55,756 --> 0:13:57,186
your money and live within your

483
00:13:57,186 --> 0:14:00,426
means and, like, such things.

484
00:13:57,186 --> 0:14:00,426
means and, like, such things.

485
00:14:01,566 --> 0:14:02,826
So it's a fact of life that we

486
00:14:02,826 --> 0:14:04,676
have limited hardware bandwidth

487
00:14:04,676 --> 0:14:05,496
on iOS.

488
00:14:06,176 --> 0:14:07,486
And though we have multiple

489
00:14:07,486 --> 0:14:08,776
cameras, so we have multiple

490
00:14:08,776 --> 0:14:12,446
sensors, we only have one ISP or

491
00:14:12,446 --> 0:14:13,636
image signal processor.

492
00:14:14,446 --> 0:14:18,626
So all the pixels going through

493
00:14:18,626 --> 0:14:20,166
those sensors need to be

494
00:14:20,166 --> 0:14:22,086
processed by a single ISP, and

495
00:14:22,516 --> 0:14:24,986
it is limited by how many pixels

496
00:14:25,036 --> 0:14:26,686
it can run per clock at a given

497
00:14:26,686 --> 0:14:27,206
frequency.

498
00:14:28,136 --> 0:14:30,746
So there are limiters to the

499
00:14:30,836 --> 0:14:32,076
number of pixels that you can

500
00:14:32,076 --> 0:14:32,706
run at a time.

501
00:14:33,556 --> 0:14:34,756
The contributors to the hardware

502
00:14:34,756 --> 0:14:36,576
cost are, as you would expect,

503
00:14:36,756 --> 0:14:37,836
video resolution.

504
00:14:38,366 --> 0:14:39,626
Higher resolution means more

505
00:14:39,626 --> 0:14:40,926
pixels to cram through there.

506
00:14:41,696 --> 0:14:42,886
The max frame rate.

507
00:14:43,296 --> 0:14:44,366
If you're delivering those

508
00:14:44,366 --> 0:14:46,176
pixels faster, it's got to do

509
00:14:46,176 --> 0:14:47,636
more pixels per clock as well.

510
00:14:47,676 --> 0:14:50,136
And then a third one which you

511
00:14:50,136 --> 0:14:51,336
may or may not have heard of is

512
00:14:51,336 --> 0:14:52,386
called sensor binning.

513
00:14:53,516 --> 0:14:55,666
Sensor binning refers to a way

514
00:14:55,666 --> 0:14:57,246
to combine information in

515
00:14:57,246 --> 0:14:58,726
adjacent pixels to reduce

516
00:14:58,726 --> 0:14:59,226
bandwidth.

517
00:14:59,796 --> 0:15:00,736
So, for instance, if we have an

518
00:14:59,796 --> 0:15:00,736
So, for instance, if we have an

519
00:15:00,736 --> 0:15:02,986
image here, and we do a 2 by 2

520
00:15:02,986 --> 0:15:04,866
binning, it's going to take 4

521
00:15:04,866 --> 0:15:06,976
pixels in squares and sum them

522
00:15:07,016 --> 0:15:09,206
into one so that we get a

523
00:15:09,206 --> 0:15:11,306
reduction in size by 4x.

524
00:15:11,836 --> 0:15:13,056
It gives you a reduction in

525
00:15:13,056 --> 0:15:13,586
noise.

526
00:15:14,166 --> 0:15:15,436
It gives you a reduction in

527
00:15:15,436 --> 0:15:15,916
bandwidth.

528
00:15:16,396 --> 0:15:18,586
It gives you 4x intensity per

529
00:15:18,586 --> 0:15:19,076
pixel.

530
00:15:19,566 --> 0:15:20,376
So there are a lot of great

531
00:15:20,416 --> 0:15:21,506
things about sensor binning.

532
00:15:21,936 --> 0:15:23,476
The downside is that you get a

533
00:15:23,476 --> 0:15:25,056
little reduction in image

534
00:15:25,056 --> 0:15:25,586
quality.

535
00:15:25,906 --> 0:15:27,366
So diagonal lines might look a

536
00:15:27,366 --> 0:15:28,346
little stair-stepped.

537
00:15:28,986 --> 0:15:31,466
But their most redeeming quality

538
00:15:31,466 --> 0:15:33,036
is that bin formats are super

539
00:15:33,036 --> 0:15:33,706
low power.

540
00:15:34,596 --> 0:15:36,496
In fact, whenever you use ARKit

541
00:15:36,496 --> 0:15:38,046
with a camera, you are using a

542
00:15:38,046 --> 0:15:39,736
binned format, because ARKIT

543
00:15:39,736 --> 0:15:41,466
uses binned formats exclusively

544
00:15:41,466 --> 0:15:42,976
to save on that power for all

545
00:15:42,976 --> 0:15:44,416
the interesting AR things that

546
00:15:44,416 --> 0:15:44,946
you'd like to do.

547
00:15:46,326 --> 0:15:46,656
All right.

548
00:15:47,026 --> 0:15:48,616
How do we account for cost, or

549
00:15:48,616 --> 0:15:50,226
how do we report those costs?

550
00:15:50,786 --> 0:15:52,286
MultiCamSession tallies up your

551
00:15:52,286 --> 0:15:53,996
hardware cost as you configure

552
00:15:53,996 --> 0:15:54,526
your session.

553
00:15:55,046 --> 0:15:56,096
So each time you change

554
00:15:56,096 --> 0:15:58,046
something, it keeps track of it

555
00:15:58,316 --> 0:15:59,906
just like filling up a shopping

556
00:15:59,906 --> 0:16:02,376
cart or going to an online store

557
00:15:59,906 --> 0:16:02,376
cart or going to an online store

558
00:16:02,376 --> 0:16:03,776
and putting things into the cart

559
00:16:03,776 --> 0:16:04,716
before you pay for them.

560
00:16:05,086 --> 0:16:05,786
You know when you're getting

561
00:16:05,786 --> 0:16:07,296
close to your limit on your

562
00:16:07,296 --> 0:16:08,886
budget, and you can kind of try

563
00:16:08,886 --> 0:16:10,546
things out and then put new

564
00:16:10,546 --> 0:16:11,876
things in or move old things

565
00:16:11,876 --> 0:16:12,136
out.

566
00:16:12,386 --> 0:16:13,756
You see the cost before you have

567
00:16:13,796 --> 0:16:14,216
to pay.

568
00:16:14,766 --> 0:16:15,776
It's the same with

569
00:16:15,776 --> 0:16:16,666
MultiCamSession.

570
00:16:17,236 --> 0:16:19,126
We have a new property called

571
00:16:19,776 --> 0:16:20,656
hardwareCost.

572
00:16:21,326 --> 0:16:22,726
And this hardwareCost starts at

573
00:16:22,766 --> 0:16:23,986
zero when you make a brand-new

574
00:16:23,986 --> 0:16:24,466
session.

575
00:16:25,536 --> 0:16:27,456
And it increments as you add

576
00:16:27,456 --> 0:16:29,076
more features, more inputs, more

577
00:16:29,076 --> 0:16:29,586
outputs.

578
00:16:30,446 --> 0:16:31,676
And you're fine as long as you

579
00:16:31,676 --> 0:16:32,816
stay under 1.0.

580
00:16:33,326 --> 0:16:35,326
Anything under 1.0 is runnable.

581
00:16:36,566 --> 0:16:38,356
The minute you hit 1.0 or

582
00:16:38,356 --> 0:16:39,706
greater, you're in trouble.

583
00:16:39,706 --> 0:16:41,376
And that's because the ISP

584
00:16:41,376 --> 0:16:43,066
bandwidth limit is hard.

585
00:16:43,486 --> 0:16:45,766
It's not like you can, you know,

586
00:16:45,886 --> 0:16:47,316
deliver every other frame.

587
00:16:47,896 --> 0:16:49,346
No, this is an all or nothing

588
00:16:49,346 --> 0:16:49,786
proposal.

589
00:16:50,076 --> 0:16:51,466
You have to either make it or

590
00:16:51,466 --> 0:16:51,816
you don't.

591
00:16:52,226 --> 0:16:53,816
So if you're over 1.0 and you

592
00:16:53,816 --> 0:16:55,156
try to run the

593
00:16:55,156 --> 0:16:57,046
AVCaptureMultiCamSession, it'll

594
00:16:57,046 --> 0:16:57,666
say "Uh-uh."

595
00:16:58,126 --> 0:17:00,256
It'll give you a notification of

596
00:16:58,126 --> 0:17:00,256
It'll give you a notification of

597
00:17:00,256 --> 0:17:02,356
a runtime error indicating that

598
00:17:02,356 --> 0:17:03,726
the reason it had to stop is

599
00:17:03,726 --> 0:17:04,806
because of a hardware cost

600
00:17:04,806 --> 0:17:04,955
overage.

601
00:17:08,356 --> 0:17:09,556
Now you're probably wondering,

602
00:17:09,556 --> 0:17:11,046
"How do I reduce that cost?"

603
00:17:11,796 --> 0:17:13,006
The most obvious way you can do

604
00:17:13,006 --> 0:17:14,376
it is to pick a lower

605
00:17:14,376 --> 0:17:14,955
resolution.

606
00:17:15,665 --> 0:17:17,256
Another way you can do it is if

607
00:17:17,256 --> 0:17:18,046
you want to keep the same

608
00:17:18,046 --> 0:17:20,455
resolution, if there is a binned

609
00:17:20,496 --> 0:17:21,965
format at the same resolution,

610
00:17:21,965 --> 0:17:22,925
pick that one instead.

611
00:17:23,276 --> 0:17:24,656
It's a little bit lower quality

612
00:17:24,736 --> 0:17:26,205
but way lower in power.

613
00:17:26,675 --> 0:17:29,376
Next, you would think that

614
00:17:29,376 --> 0:17:30,596
lowering the frame rate would

615
00:17:30,596 --> 0:17:32,736
help, but it doesn't.

616
00:17:33,806 --> 0:17:34,746
The reason is that

617
00:17:34,746 --> 0:17:37,096
AVCaptureDevice allows you and

618
00:17:37,096 --> 0:17:38,646
has allowed you since, I think,

619
00:17:38,646 --> 0:17:41,466
iOS 4 to change the frame rate

620
00:17:41,466 --> 0:17:41,996
on the fly.

621
00:17:42,626 --> 0:17:44,906
So if you have a 120 FPS format

622
00:17:45,626 --> 0:17:47,916
and you say, "Set the active

623
00:17:47,916 --> 0:17:50,436
format to 60," you still have to

624
00:17:50,436 --> 0:17:52,656
pay the cost for a 120, not 60,

625
00:17:52,866 --> 0:17:53,936
because at any point while

626
00:17:53,936 --> 0:17:54,886
you're running, you could

627
00:17:54,886 --> 0:17:55,956
increase the frame rate up to

628
00:17:55,956 --> 0:17:56,806
120.

629
00:17:57,066 --> 0:17:58,616
We must assume the worst case.

630
00:17:59,666 --> 0:18:01,306
But good news.

631
00:17:59,666 --> 0:18:01,306
But good news.

632
00:18:01,416 --> 0:18:02,856
We're now offering an override

633
00:18:02,946 --> 0:18:04,036
property on the

634
00:18:04,036 --> 0:18:05,306
AVCaptureDeviceInput.

635
00:18:06,116 --> 0:18:09,216
By setting it, you can turn a

636
00:18:09,216 --> 0:18:10,966
high frame-rate format into a

637
00:18:10,966 --> 0:18:13,036
lower frame-rate format by

638
00:18:13,146 --> 0:18:14,896
promising that you will go no

639
00:18:14,896 --> 0:18:16,516
higher than a particular frame

640
00:18:16,736 --> 0:18:16,926
rate.

641
00:18:19,966 --> 0:18:21,836
Now, this is a point of

642
00:18:21,836 --> 0:18:23,596
confusion in our APIs.

643
00:18:23,646 --> 0:18:24,956
We don't talk about frame rates

644
00:18:24,956 --> 0:18:25,596
as rates.

645
00:18:25,626 --> 0:18:27,086
We talk about them as durations.

646
00:18:27,386 --> 0:18:30,116
So to set a frame rate, you set

647
00:18:30,116 --> 0:18:31,376
1 over the duration.

648
00:18:31,536 --> 0:18:32,546
That's the same as the frame

649
00:18:32,546 --> 0:18:32,786
rate.

650
00:18:33,186 --> 0:18:34,706
So if you want to take a 60 FPS

651
00:18:34,706 --> 0:18:36,536
format and make it into a 30 FPS

652
00:18:36,536 --> 0:18:39,106
format, you do that by making a

653
00:18:39,186 --> 0:18:41,256
CMTime with 1 over 30, which is

654
00:18:41,256 --> 0:18:43,096
the duration and then set that

655
00:18:43,096 --> 0:18:43,996
deviceInput.

656
00:18:44,296 --> 0:18:47,126
videoMinFramDurationOverride to

657
00:18:47,216 --> 0:18:47,886
thirtyFPS.

658
00:18:48,256 --> 0:18:49,566
Congratulations, you've just

659
00:18:49,566 --> 0:18:51,436
turned a 60 FPS format into a 30

660
00:18:51,436 --> 0:18:52,816
FPS format, and you only pay the

661
00:18:52,816 --> 0:18:56,216
hardware cost for 30.

662
00:18:56,396 --> 0:18:58,016
I should also mention that there

663
00:18:58,016 --> 0:19:00,396
is a great function in the

664
00:18:58,016 --> 0:19:00,396
is a great function in the

665
00:19:00,396 --> 0:19:02,476
AVMultiCamPIP app that shows how

666
00:19:02,476 --> 0:19:04,296
to iteratively reduce your cost.

667
00:19:04,616 --> 0:19:05,846
It's a recursive function that

668
00:19:05,986 --> 0:19:07,036
kind of picks things that are

669
00:19:07,036 --> 0:19:08,736
most important to it, and it

670
00:19:08,976 --> 0:19:10,536
throttles down things that are

671
00:19:10,536 --> 0:19:11,886
less important until it gets

672
00:19:11,886 --> 0:19:12,846
under the hardware cost.

673
00:19:13,806 --> 0:19:15,546
Now, next up is system pressure

674
00:19:15,546 --> 0:19:15,846
cost.

675
00:19:15,846 --> 0:19:17,666
This is the second big

676
00:19:17,666 --> 0:19:18,986
contributor that we report.

677
00:19:19,376 --> 0:19:22,266
As you're well aware, phones are

678
00:19:22,266 --> 0:19:24,126
extremely powerful computers in

679
00:19:24,366 --> 0:19:25,636
little bitty thermally

680
00:19:25,636 --> 0:19:27,036
challenged packages.

681
00:19:27,736 --> 0:19:30,336
And in iOS 11, we introduced

682
00:19:30,536 --> 0:19:32,716
camera system pressure states.

683
00:19:33,366 --> 0:19:34,396
These help you monitor the

684
00:19:34,396 --> 0:19:35,826
camera's current situation.

685
00:19:37,046 --> 0:19:38,636
Camera system pressure consists

686
00:19:38,726 --> 0:19:41,566
of system temperature, that is

687
00:19:41,666 --> 0:19:45,046
overall OS thermals, peak power

688
00:19:45,046 --> 0:19:46,576
demands, and that has to do with

689
00:19:46,576 --> 0:19:47,206
the battery.

690
00:19:47,586 --> 0:19:48,636
How much charge does it

691
00:19:48,636 --> 0:19:49,386
currently have?

692
00:19:49,996 --> 0:19:51,736
Is it able to ramp up its

693
00:19:51,736 --> 0:19:53,206
voltage fast enough to meet the

694
00:19:53,206 --> 0:19:55,016
demands of running whatever you

695
00:19:55,016 --> 0:19:56,036
want to do right now?

696
00:19:57,026 --> 0:19:58,786
And the infrared projector

697
00:19:58,786 --> 0:19:59,296
temperature.

698
00:19:59,996 --> 0:20:01,376
On devices that support

699
00:19:59,996 --> 0:20:01,376
On devices that support

700
00:20:01,376 --> 0:20:02,856
TrueDepth camera, we have an

701
00:20:02,856 --> 0:20:04,136
infrared camera as well as an

702
00:20:04,136 --> 0:20:04,936
RGB camera.

703
00:20:05,126 --> 0:20:06,386
Well, that generates its own

704
00:20:06,456 --> 0:20:07,686
heat, and so that's part of the

705
00:20:07,686 --> 0:20:09,166
contribution to system pressure

706
00:20:09,166 --> 0:20:09,676
states.

707
00:20:10,216 --> 0:20:14,586
We have five of them, nominal

708
00:20:14,586 --> 0:20:15,686
all the way up to shutdown.

709
00:20:16,316 --> 0:20:17,396
When the system pressure state

710
00:20:17,396 --> 0:20:19,106
is nominal, you're in great

711
00:20:19,106 --> 0:20:19,386
shape.

712
00:20:19,586 --> 0:20:20,476
You can do whatever you want.

713
00:20:20,976 --> 0:20:22,546
When it's fair, you can still

714
00:20:22,546 --> 0:20:23,886
almost do whatever you want.

715
00:20:24,336 --> 0:20:25,776
But at serious, you start

716
00:20:25,776 --> 0:20:26,896
getting into a situation where

717
00:20:26,896 --> 0:20:28,136
the system's going to throttle

718
00:20:28,886 --> 0:20:29,916
back, meaning you have fewer

719
00:20:29,916 --> 0:20:31,776
cycles for the GPU.

720
00:20:31,996 --> 0:20:34,316
Your quality might be

721
00:20:34,316 --> 0:20:35,036
compromised.

722
00:20:35,546 --> 0:20:36,986
And at critical, you are getting

723
00:20:36,986 --> 0:20:38,126
a whole lot of throttling.

724
00:20:38,386 --> 0:20:41,816
At shutdown, we cannot run the

725
00:20:41,816 --> 0:20:44,066
camera any longer for fear of

726
00:20:44,066 --> 0:20:44,846
hurting the hardware.

727
00:20:45,156 --> 0:20:47,026
So at shutdown, we automatically

728
00:20:47,026 --> 0:20:48,516
interrupt your session, stop it,

729
00:20:48,966 --> 0:20:50,086
tell you that you're interrupted

730
00:20:50,156 --> 0:20:51,736
because of a system pressure

731
00:20:51,736 --> 0:20:53,786
state, and then we wait for the

732
00:20:53,786 --> 0:20:55,096
device to go all the way back to

733
00:20:55,096 --> 0:20:56,596
nominal before we'll let you run

734
00:20:56,596 --> 0:20:57,346
the camera again.

735
00:20:58,756 --> 0:21:01,176
That was all iOS 11.

736
00:20:58,756 --> 0:21:01,176
That was all iOS 11.

737
00:21:01,666 --> 0:21:04,076
Now, in iOS 13, we're offering

738
00:21:04,076 --> 0:21:05,426
you a way to account for the

739
00:21:05,426 --> 0:21:07,366
system pressure cost upfront,

740
00:21:07,766 --> 0:21:08,196
okay?

741
00:21:08,646 --> 0:21:09,906
Instead of just telling you

742
00:21:09,906 --> 0:21:11,056
what's happening right now,

743
00:21:11,586 --> 0:21:12,866
which may be influenced by the

744
00:21:12,866 --> 0:21:14,386
fact that you played Clash of

745
00:21:14,416 --> 0:21:16,266
Clans before you restarted the

746
00:21:17,086 --> 0:21:18,246
camera, we now have a way to

747
00:21:18,246 --> 0:21:20,226
tell you what the camera cost as

748
00:21:20,226 --> 0:21:21,416
far as system pressure is,

749
00:21:21,736 --> 0:21:22,786
independent of all other

750
00:21:22,786 --> 0:21:23,376
factors.

751
00:21:23,686 --> 0:21:26,076
So the contributors to this cost

752
00:21:26,076 --> 0:21:27,316
are the same as the ones for

753
00:21:27,316 --> 0:21:28,896
hardware along with a lot of

754
00:21:28,896 --> 0:21:31,616
other ones, such as video image

755
00:21:31,616 --> 0:21:34,056
stabilization or optical image

756
00:21:34,056 --> 0:21:34,756
stabilization.

757
00:21:34,756 --> 0:21:36,356
All of those cost power.

758
00:21:36,756 --> 0:21:38,246
We have a Smart HDR feature,

759
00:21:38,246 --> 0:21:40,316
etc. All of those things listed

760
00:21:40,316 --> 0:21:42,046
here are contributors to overall

761
00:21:42,046 --> 0:21:43,286
system pressure cost.

762
00:21:45,016 --> 0:21:46,986
MultiCamSession can tally that

763
00:21:46,986 --> 0:21:48,476
score upfront just like it does

764
00:21:48,476 --> 0:21:51,186
for hardware, and it will only

765
00:21:51,186 --> 0:21:52,406
account for the factors that it

766
00:21:52,406 --> 0:21:53,076
knows about.

767
00:21:53,336 --> 0:21:54,586
So if you're going to be doing

768
00:21:54,586 --> 0:21:56,276
some wild GPU processing at the

769
00:21:56,276 --> 0:21:58,056
same time, the score won't

770
00:21:58,056 --> 0:21:58,756
include that.

771
00:21:58,886 --> 0:22:00,086
It'll just include what you're

772
00:21:58,886 --> 0:22:00,086
It'll just include what you're

773
00:22:00,086 --> 0:22:03,036
doing with the camera.

774
00:22:03,036 --> 0:22:03,876
Here's how you use it.

775
00:22:05,146 --> 0:22:06,746
By querying the system pressure

776
00:22:06,746 --> 0:22:09,386
cost, you can find out how long

777
00:22:09,386 --> 0:22:11,546
you would be runnable in an

778
00:22:11,546 --> 0:22:13,446
otherwise quiescent system.

779
00:22:13,906 --> 0:22:16,006
So if it's less than 1.0, you

780
00:22:16,006 --> 0:22:17,106
can run indefinitely.

781
00:22:17,236 --> 0:22:18,086
You're a cool customer.

782
00:22:18,886 --> 0:22:20,636
If it's between 1 and 2, you

783
00:22:20,636 --> 0:22:22,096
should be runnable for up to 15

784
00:22:22,096 --> 0:22:24,526
minutes, 2 to 3 up to 10

785
00:22:24,526 --> 0:22:27,216
minutes, and higher than 3, you

786
00:22:27,216 --> 0:22:28,586
may be able to run for a short

787
00:22:28,586 --> 0:22:29,116
little bit.

788
00:22:29,116 --> 0:22:31,236
And, in fact, we will let you

789
00:22:31,236 --> 0:22:32,576
run the camera, even if you're

790
00:22:32,576 --> 0:22:34,216
over 3, but you have to

791
00:22:34,216 --> 0:22:35,396
understand that it's not going

792
00:22:35,396 --> 0:22:36,806
to stay cool very long.

793
00:22:37,166 --> 0:22:38,266
And once it gets up to a

794
00:22:38,266 --> 0:22:40,066
critical or shutdown level, your

795
00:22:40,066 --> 0:22:41,516
session will become interrupted.

796
00:22:41,786 --> 0:22:43,246
So we'll save the hardware even

797
00:22:43,246 --> 0:22:43,896
if you don't want to.

798
00:22:43,896 --> 0:22:44,966
But, hey, it's great.

799
00:22:44,966 --> 0:22:46,716
If you can get what you need to

800
00:22:47,146 --> 0:22:48,816
get done in 30 seconds of

801
00:22:48,816 --> 0:22:50,146
running at a very, very high

802
00:22:50,366 --> 0:22:51,896
system pressure cost, by all

803
00:22:51,896 --> 0:22:53,286
means, do that.

804
00:22:54,876 --> 0:22:56,076
Now, how do you reduce your

805
00:22:56,076 --> 0:22:57,696
system pressure while running?

806
00:22:57,826 --> 0:22:58,966
I'm not talking about while

807
00:22:58,966 --> 0:22:59,996
you're configuring your session.

808
00:22:59,996 --> 0:23:01,476
I'm talking about once you're

809
00:22:59,996 --> 0:23:01,476
I'm talking about once you're

810
00:23:01,786 --> 0:23:03,466
already running and you notice

811
00:23:03,466 --> 0:23:04,656
that you're starting to elevate

812
00:23:04,656 --> 0:23:05,546
in system pressure.

813
00:23:05,776 --> 0:23:06,976
The quickest and easiest way to

814
00:23:06,976 --> 0:23:08,036
do it is to lower the frame

815
00:23:08,036 --> 0:23:08,226
rate.

816
00:23:08,666 --> 0:23:10,536
Immediately, that will relive

817
00:23:10,536 --> 0:23:11,266
system pressure.

818
00:23:11,756 --> 0:23:12,856
Also, if you're doing things

819
00:23:12,856 --> 0:23:14,126
that we don't know about, such

820
00:23:14,126 --> 0:23:16,506
as heavy GPU or CPU work, you

821
00:23:16,506 --> 0:23:17,486
can throttle that back.

822
00:23:18,136 --> 0:23:21,746
As a last resort, you might try

823
00:23:21,986 --> 0:23:23,056
disabling one or more of the

824
00:23:23,056 --> 0:23:24,126
cameras that you're using.

825
00:23:25,026 --> 0:23:27,296
AVMultiCamSession has a neat

826
00:23:27,676 --> 0:23:29,956
little feature that, while

827
00:23:29,956 --> 0:23:31,986
running, you can disable one of

828
00:23:31,986 --> 0:23:33,476
the cameras without affecting

829
00:23:33,476 --> 0:23:34,506
preview on the other.

830
00:23:34,586 --> 0:23:35,966
We don't shut everything down.

831
00:23:36,356 --> 0:23:37,256
So if, for instance, you're

832
00:23:37,256 --> 0:23:38,036
running with the front and the

833
00:23:38,036 --> 0:23:39,436
back, you notice that you're way

834
00:23:39,436 --> 0:23:40,916
over budget, and you're soon

835
00:23:40,916 --> 0:23:42,816
going to go critical, you could

836
00:23:42,816 --> 0:23:44,006
choose to shut down the front

837
00:23:44,006 --> 0:23:44,446
camera.

838
00:23:44,606 --> 0:23:45,646
The back camera will keep

839
00:23:45,646 --> 0:23:46,106
previewing.

840
00:23:46,106 --> 0:23:47,146
It won't lose its focus,

841
00:23:47,146 --> 0:23:48,436
exposure, white balance.

842
00:23:48,976 --> 0:23:51,336
And when you shut down the last

843
00:23:51,436 --> 0:23:54,556
active input port on the camera

844
00:23:54,556 --> 0:23:55,986
that you want to disable by

845
00:23:55,986 --> 0:23:58,296
setting its input port's enabled

846
00:23:58,296 --> 0:24:00,676
property to false, we will stop

847
00:23:58,296 --> 0:24:00,676
property to false, we will stop

848
00:24:00,676 --> 0:24:02,136
that camera streaming and save a

849
00:24:02,136 --> 0:24:03,596
ton of power and give that

850
00:24:03,596 --> 0:24:04,896
system a chance to cool off.

851
00:24:05,216 --> 0:24:07,876
All right, so I've just talked

852
00:24:07,876 --> 0:24:10,066
about two very important costs,

853
00:24:10,066 --> 0:24:11,416
hardware and system pressure.

854
00:24:12,176 --> 0:24:13,506
There are other costs that we

855
00:24:13,506 --> 0:24:14,316
are not reporting.

856
00:24:14,316 --> 0:24:15,996
I didn't want to trick you into

857
00:24:15,996 --> 0:24:16,786
believing that there aren't

858
00:24:16,786 --> 0:24:18,106
other things at work here.

859
00:24:18,136 --> 0:24:19,046
There are, of course, other

860
00:24:19,046 --> 0:24:20,626
costs such as memory.

861
00:24:21,096 --> 0:24:22,706
But in iOS 13, we are

862
00:24:22,706 --> 0:24:24,766
artificially limiting the device

863
00:24:24,766 --> 0:24:26,386
combinations that we will allow

864
00:24:26,386 --> 0:24:28,656
you to run, the ones that we are

865
00:24:28,656 --> 0:24:30,586
confident will run and that will

866
00:24:30,586 --> 0:24:31,556
not get you into trouble.

867
00:24:32,936 --> 0:24:35,126
So we have a limited number of

868
00:24:35,126 --> 0:24:36,856
supported device combinations.

869
00:24:37,166 --> 0:24:38,186
Here I'm listing the ones that

870
00:24:38,186 --> 0:24:40,146
are supported on iPhone XS.

871
00:24:40,576 --> 0:24:41,646
This is kind of an eye chart.

872
00:24:41,646 --> 0:24:42,766
I don't expect you to remember

873
00:24:42,766 --> 0:24:42,956
this.

874
00:24:42,956 --> 0:24:44,136
You can pause the video later.

875
00:24:44,456 --> 0:24:45,596
But there are six supported

876
00:24:45,596 --> 0:24:47,096
configs, and the simple rule to

877
00:24:47,096 --> 0:24:48,696
remember is that you're allowed

878
00:24:48,696 --> 0:24:50,386
to run two physical cameras at a

879
00:24:50,386 --> 0:24:50,776
time.

880
00:24:51,316 --> 0:24:52,256
You might be questioning, like,

881
00:24:52,506 --> 0:24:54,356
Brad, what about config number

882
00:24:54,356 --> 0:24:54,746
one there?

883
00:24:54,746 --> 0:24:56,146
There's only one checkbox.

884
00:24:56,556 --> 0:24:57,546
That's because it's the dual

885
00:24:57,546 --> 0:24:59,356
camera, and the dual camera is a

886
00:24:59,356 --> 0:25:00,936
software camera that's actually

887
00:24:59,356 --> 0:25:00,936
software camera that's actually

888
00:25:00,936 --> 0:25:02,306
comprised of the wide and the

889
00:25:02,306 --> 0:25:03,916
telephoto, so it is two physical

890
00:25:03,916 --> 0:25:04,376
cameras.

891
00:25:05,766 --> 0:25:07,096
How do you find out if MultiCam

892
00:25:07,096 --> 0:25:07,736
is supported?

893
00:25:08,076 --> 0:25:09,416
Like I said, it's only supported

894
00:25:09,416 --> 0:25:11,786
on newer hardware, so you need

895
00:25:11,786 --> 0:25:13,266
to check if MultiCamSession will

896
00:25:13,266 --> 0:25:14,966
let you run multiple cameras or

897
00:25:14,966 --> 0:25:16,446
not on the device that you have.

898
00:25:17,006 --> 0:25:18,106
There's a class method called

899
00:25:18,106 --> 0:25:19,826
isMultiCamSupported, which you

900
00:25:19,826 --> 0:25:21,886
can right away decide yes or no.

901
00:25:22,056 --> 0:25:23,906
And then further when you want

902
00:25:23,906 --> 0:25:25,216
to decide am I allowed to run

903
00:25:25,216 --> 0:25:26,556
this combination of devices

904
00:25:26,556 --> 0:25:28,206
together, you can create an

905
00:25:28,206 --> 0:25:30,056
AVCaptureDevice.DiscoverySession

906
00:25:30,396 --> 0:25:31,426
with the devices that you're

907
00:25:31,426 --> 0:25:32,796
interested in and then ask it

908
00:25:32,856 --> 0:25:33,866
for its new property

909
00:25:34,236 --> 0:25:36,466
supportedMultiCamDeviceSets.

910
00:25:36,686 --> 0:25:38,256
And this will produce an array

911
00:25:38,256 --> 0:25:40,506
of unordered sets that tell you

912
00:25:40,506 --> 0:25:41,646
which ones you're allowed to use

913
00:25:41,646 --> 0:25:41,986
together.

914
00:25:43,036 --> 0:25:45,016
Next up is a way that we are

915
00:25:45,016 --> 0:25:47,136
artificially limiting the

916
00:25:47,286 --> 0:25:48,376
formats that you're allowed to

917
00:25:48,376 --> 0:25:48,646
run.

918
00:25:49,346 --> 0:25:51,216
The supported formats last I

919
00:25:51,336 --> 0:25:52,796
checked on in iPhone XS, there

920
00:25:53,366 --> 0:25:55,176
were more than 40 formats on the

921
00:25:55,176 --> 0:25:55,806
back camera.

922
00:25:55,806 --> 0:25:57,016
So there are tons to choose

923
00:25:57,016 --> 0:25:57,256
from.

924
00:25:57,416 --> 0:25:58,816
But we are limiting the actual

925
00:25:58,816 --> 0:26:00,076
video formats allowed to run

926
00:25:58,816 --> 0:26:00,076
video formats allowed to run

927
00:26:00,076 --> 0:26:01,756
with MultiCamSession, because

928
00:26:01,756 --> 0:26:02,886
these are the ones that we can

929
00:26:02,886 --> 0:26:05,026
comfortable run simultaneously

930
00:26:05,326 --> 0:26:06,506
on end devices.

931
00:26:06,986 --> 0:26:07,896
So again, this is a bit of an

932
00:26:07,896 --> 0:26:08,856
eye chart, but I'm going to draw

933
00:26:08,856 --> 0:26:10,146
your attention to groups.

934
00:26:10,766 --> 0:26:12,296
First group is the binned

935
00:26:12,356 --> 0:26:12,936
formats.

936
00:26:13,146 --> 0:26:14,186
Remember? Low power.

937
00:26:14,186 --> 0:26:15,466
Yay, these are our friends.

938
00:26:15,726 --> 0:26:16,836
At the sensor, you're getting

939
00:26:17,186 --> 0:26:18,596
that 2 by 2 binning, so you're

940
00:26:18,596 --> 0:26:19,986
getting very low power.

941
00:26:20,816 --> 0:26:22,146
All of these are available up to

942
00:26:22,146 --> 0:26:22,966
60 FPS.

943
00:26:23,096 --> 0:26:24,656
You've got choices from 640 by

944
00:26:24,656 --> 0:26:27,026
480 all the way up to 1920 by

945
00:26:27,026 --> 0:26:27,696
1440.

946
00:26:27,806 --> 0:26:31,536
Next group is the 1920 by 1080

947
00:26:31,536 --> 0:26:32,096
at 30.

948
00:26:32,096 --> 0:26:34,366
This an unbinned format, and

949
00:26:34,366 --> 0:26:35,636
this is the same as the one you

950
00:26:35,636 --> 0:26:36,876
would get if you chose the high

951
00:26:36,876 --> 0:26:38,806
preset on a regular traditional

952
00:26:38,806 --> 0:26:39,186
session.

953
00:26:39,786 --> 0:26:40,976
This one is available for

954
00:26:40,976 --> 0:26:41,856
MultiCam use.

955
00:26:42,206 --> 0:26:45,416
The final one is 1920 by 1440

956
00:26:45,416 --> 0:26:46,556
unbinned at 30 FPS.

957
00:26:47,046 --> 0:26:48,416
This is kind of a good stand-in

958
00:26:48,416 --> 0:26:49,466
for the photo format.

959
00:26:49,996 --> 0:26:52,526
We do not support 12 megapixel

960
00:26:52,526 --> 0:26:53,686
on N cameras.

961
00:26:54,006 --> 0:26:55,506
That would certainly do bad

962
00:26:55,556 --> 0:26:57,576
things to the phone, but we do

963
00:26:57,576 --> 0:27:00,076
allow you to do 1920 by 1440 at

964
00:26:57,576 --> 0:27:00,076
allow you to do 1920 by 1440 at

965
00:27:00,076 --> 0:27:00,496
30 FPS.

966
00:27:00,556 --> 0:27:02,116
And notice, it still allows you

967
00:27:02,116 --> 0:27:03,446
to do 12 megapixel

968
00:27:03,446 --> 0:27:04,756
high-resolution stills.

969
00:27:04,756 --> 0:27:07,216
So this is a very good proxy for

970
00:27:07,676 --> 0:27:09,026
when you want to do photography

971
00:27:09,226 --> 0:27:10,266
with multiple cameras

972
00:27:10,266 --> 0:27:11,046
simultaneously.

973
00:27:11,626 --> 0:27:14,826
Now, how do you find out if a

974
00:27:14,826 --> 0:27:16,246
format supports MultiCam?

975
00:27:16,426 --> 0:27:17,246
You just ask it.

976
00:27:17,636 --> 0:27:18,626
So while iterating through the

977
00:27:18,626 --> 0:27:19,866
formats, you can say, "Is

978
00:27:19,866 --> 0:27:20,906
MultiCam supported?"

979
00:27:20,906 --> 0:27:22,426
And if it is, you're allowed to

980
00:27:22,426 --> 0:27:22,856
use it.

981
00:27:23,406 --> 0:27:25,116
In this code here, I'm iterating

982
00:27:25,116 --> 0:27:26,536
through the formats on a device

983
00:27:26,816 --> 0:27:28,706
and picking the next lowest one

984
00:27:28,706 --> 0:27:30,796
in resolution that supports

985
00:27:30,796 --> 0:27:32,456
MultiCam and then setting it as

986
00:27:32,456 --> 0:27:33,866
my active format.

987
00:27:34,916 --> 0:27:35,926
The last way that we're

988
00:27:35,926 --> 0:27:37,296
artificially limiting is,

989
00:27:37,906 --> 0:27:40,696
because we need to report costs,

990
00:27:40,956 --> 0:27:42,476
and those costs are reported by

991
00:27:42,556 --> 0:27:44,466
the MultiCamSession, we're

992
00:27:44,466 --> 0:27:46,176
specifically not supporting on

993
00:27:46,336 --> 0:27:48,766
iOS multiple sessions with

994
00:27:48,766 --> 0:27:50,726
multiple cameras in an app, and

995
00:27:50,726 --> 0:27:51,796
we're also not supporting

996
00:27:52,046 --> 0:27:53,586
multiple cameras in multiple

997
00:27:53,586 --> 0:27:54,986
apps simultaneously.

998
00:27:55,276 --> 0:27:57,286
Just be aware that the support

999
00:27:57,286 --> 0:27:58,736
on iOS is still limited to one

1000
00:27:58,736 --> 0:28:00,536
session at a time, but of course

1001
00:27:58,736 --> 0:28:00,536
session at a time, but of course

1002
00:28:00,536 --> 0:28:02,786
you can run multiple cameras at

1003
00:28:03,716 --> 0:28:04,086
a time.

1004
00:28:04,086 --> 0:28:05,886
Thus concludes the dad talk.

1005
00:28:06,606 --> 0:28:07,636
Okay, write good code.

1006
00:28:08,296 --> 0:28:09,286
Be home by 11.

1007
00:28:09,626 --> 0:28:11,046
If your plans change, call me.

1008
00:28:11,426 --> 0:28:12,346
All right.

1009
00:28:12,746 --> 0:28:14,776
All right, now back to the fun

1010
00:28:14,776 --> 0:28:15,176
stuff.

1011
00:28:16,456 --> 0:28:17,396
Synchronized streaming.

1012
00:28:17,926 --> 0:28:20,866
I talked a little bit about

1013
00:28:20,866 --> 0:28:21,956
software cameras.

1014
00:28:22,836 --> 0:28:24,186
Dual camera for one was

1015
00:28:24,186 --> 0:28:26,506
introduced on iPhone 7 Plus, and

1016
00:28:26,506 --> 0:28:27,676
it's now present on the iPhone

1017
00:28:27,676 --> 0:28:29,416
XS and XS Max as well.

1018
00:28:29,416 --> 0:28:31,406
And the TrueDepth camera is also

1019
00:28:31,406 --> 0:28:32,636
another kind of software camera,

1020
00:28:32,636 --> 0:28:34,346
because it's comprised of an

1021
00:28:34,346 --> 0:28:36,066
infrared camera and an RGB

1022
00:28:36,066 --> 0:28:38,896
camera that is able to do depth

1023
00:28:38,976 --> 0:28:40,316
by taking the disparity between

1024
00:28:40,316 --> 0:28:40,846
those two.

1025
00:28:42,096 --> 0:28:44,126
Now, we've never given these

1026
00:28:44,346 --> 0:28:46,226
special types of cameras a name,

1027
00:28:46,676 --> 0:28:47,696
but we're doing that now.

1028
00:28:47,806 --> 0:28:49,286
In iOS 13, we're calling them

1029
00:28:49,286 --> 0:28:50,356
virtual cameras.

1030
00:28:50,916 --> 0:28:53,366
DualCam is one of them.

1031
00:28:53,366 --> 0:28:54,996
It presents one video stream at

1032
00:28:55,206 --> 0:28:57,486
a time, and it switches between

1033
00:28:57,486 --> 0:29:00,026
them based on your zoom factor.

1034
00:28:57,486 --> 0:29:00,026
them based on your zoom factor.

1035
00:29:00,206 --> 0:29:02,376
So as you get closer to 2x, it

1036
00:29:02,376 --> 0:29:03,946
switches over to the telephoto

1037
00:29:03,946 --> 0:29:04,986
camera instead of the wide

1038
00:29:04,986 --> 0:29:05,376
camera.

1039
00:29:05,836 --> 0:29:07,426
It also can do neat tricks with

1040
00:29:07,776 --> 0:29:09,576
depth, because it has two images

1041
00:29:09,616 --> 0:29:10,836
that it can use to generate

1042
00:29:10,836 --> 0:29:11,826
disparity between them.

1043
00:29:12,366 --> 0:29:13,096
But still, from your

1044
00:29:13,096 --> 0:29:14,066
perspective, you've only been

1045
00:29:14,066 --> 0:29:16,706
able to get one stream at a

1046
00:29:17,516 --> 0:29:17,636
time.

1047
00:29:17,836 --> 0:29:19,566
Because we have a name now, they

1048
00:29:19,566 --> 0:29:21,336
are also a property in the API

1049
00:29:21,336 --> 0:29:22,206
which you can query.

1050
00:29:22,286 --> 0:29:23,316
So as you're looking at your

1051
00:29:23,316 --> 0:29:24,596
camera devices, you can find

1052
00:29:24,596 --> 0:29:26,576
out, programmatically, is this

1053
00:29:26,576 --> 0:29:27,646
one a virtual device?

1054
00:29:28,026 --> 0:29:29,676
And if it is, you can ask it,

1055
00:29:29,726 --> 0:29:30,866
"Well, what are your physical

1056
00:29:30,866 --> 0:29:31,466
devices?"

1057
00:29:31,936 --> 0:29:33,896
And in the API, we call this its

1058
00:29:34,056 --> 0:29:35,426
constituentDevices.

1059
00:29:37,356 --> 0:29:39,046
Synchronized streaming is all

1060
00:29:39,046 --> 0:29:40,346
about taking those

1061
00:29:40,346 --> 0:29:43,196
constituentDevices of a virtual

1062
00:29:43,196 --> 0:29:44,466
device and running them

1063
00:29:44,966 --> 0:29:45,796
synchronized.

1064
00:29:46,126 --> 0:29:47,236
In other words, for the first

1065
00:29:47,236 --> 0:29:48,716
time, we're allowing you to

1066
00:29:48,716 --> 0:29:50,646
stream synchronized video from

1067
00:29:50,646 --> 0:29:52,126
the wide and the tele at the

1068
00:29:52,126 --> 0:29:54,256
same time.

1069
00:29:54,416 --> 0:29:55,306
You continue to set the

1070
00:29:55,306 --> 0:29:56,526
properties on the virtual

1071
00:29:56,526 --> 0:29:57,336
device, not on the

1072
00:29:57,336 --> 0:29:58,596
constituentDevices.

1073
00:30:00,296 --> 0:30:01,926
And there are some rules in

1074
00:30:01,926 --> 0:30:02,426
place.

1075
00:30:03,226 --> 0:30:04,626
When you run the virtual device,

1076
00:30:04,986 --> 0:30:06,916
the constituentDevices aren't

1077
00:30:06,916 --> 0:30:08,046
allowed to run willy-nilly.

1078
00:30:08,906 --> 0:30:10,236
They have the same active

1079
00:30:10,236 --> 0:30:10,986
resolution.

1080
00:30:10,986 --> 0:30:12,276
They have the same frame rate.

1081
00:30:12,866 --> 0:30:14,636
And at a hardware level, they

1082
00:30:14,636 --> 0:30:15,666
are synchronized.

1083
00:30:15,996 --> 0:30:19,156
That means the sensor's reading

1084
00:30:19,156 --> 0:30:21,536
out those frames in a

1085
00:30:21,536 --> 0:30:23,276
synchronized fashion so that the

1086
00:30:23,276 --> 0:30:26,686
middle line of the readout is

1087
00:30:26,746 --> 0:30:28,556
exactly at the same clock time.

1088
00:30:29,496 --> 0:30:31,276
So that means that they match at

1089
00:30:31,276 --> 0:30:32,106
the frame centers.

1090
00:30:32,396 --> 0:30:34,276
It also means that the exposure,

1091
00:30:34,506 --> 0:30:36,326
white balance and focus happen

1092
00:30:36,326 --> 0:30:37,846
in tandem, which is really nice.

1093
00:30:37,846 --> 0:30:39,146
It makes it look like virtually

1094
00:30:39,146 --> 0:30:40,676
it is the same camera, just

1095
00:30:40,676 --> 0:30:41,846
happens to be at two different

1096
00:30:42,246 --> 0:30:42,926
fields of view.

1097
00:30:45,636 --> 0:30:47,786
This is best shown rather than

1098
00:30:47,786 --> 0:30:49,306
talked about, so let's do a

1099
00:30:49,306 --> 0:30:49,586
demo.

1100
00:30:49,796 --> 0:30:51,786
This one's called AVDualCam.

1101
00:30:52,346 --> 0:30:53,626
There we are.

1102
00:30:55,076 --> 0:30:57,456
Okay, AVDualCam lets you see

1103
00:30:57,876 --> 0:31:00,096
what a virtual camera sees by

1104
00:30:57,876 --> 0:31:00,096
what a virtual camera sees by

1105
00:31:00,096 --> 0:31:01,716
showing you a display of the two

1106
00:31:01,716 --> 0:31:03,236
cameras running synchronized.

1107
00:31:03,546 --> 0:31:05,906
And it does this by showing you

1108
00:31:05,906 --> 0:31:07,316
several different views of those

1109
00:31:07,316 --> 0:31:07,896
cameras.

1110
00:31:08,716 --> 0:31:11,136
Okay, here I've got the wide and

1111
00:31:11,136 --> 0:31:13,066
the tele constituent streams of

1112
00:31:13,066 --> 0:31:14,606
the dual camera running

1113
00:31:14,606 --> 0:31:15,296
synchronized.

1114
00:31:15,656 --> 0:31:17,556
On the left is the wide, and on

1115
00:31:17,556 --> 0:31:18,676
the right is the tele.

1116
00:31:19,456 --> 0:31:20,206
Don't believe me?

1117
00:31:20,206 --> 0:31:21,836
Here, I'm going to put my finger

1118
00:31:21,836 --> 0:31:22,476
over one side.

1119
00:31:23,076 --> 0:31:24,966
I'm going to put my finger over

1120
00:31:24,966 --> 0:31:25,396
the other side.

1121
00:31:25,396 --> 0:31:26,926
See? They're different cameras.

1122
00:31:29,596 --> 0:31:31,526
All I've done with the wide is

1123
00:31:31,526 --> 0:31:32,766
zoom it so it's at the same

1124
00:31:32,766 --> 0:31:33,756
field of view as the tele.

1125
00:31:34,436 --> 0:31:36,316
But you can notice that they're

1126
00:31:36,316 --> 0:31:37,766
running perfectly synchronized.

1127
00:31:37,766 --> 0:31:39,306
There's no tearing.

1128
00:31:39,306 --> 0:31:40,466
There's no weirdness in the

1129
00:31:40,466 --> 0:31:41,316
vertical blanking.

1130
00:31:41,946 --> 0:31:43,996
Their exposures and focuses

1131
00:31:43,996 --> 0:31:45,176
change at the same time.

1132
00:31:46,356 --> 0:31:47,196
Now we can have a little bit

1133
00:31:47,196 --> 0:31:48,306
more fun if we change from the

1134
00:31:48,306 --> 0:31:51,266
side-by-side view to the Split

1135
00:31:51,266 --> 0:31:51,506
View.

1136
00:31:52,036 --> 0:31:53,296
Now, this a little bit hard to

1137
00:31:53,296 --> 0:31:56,836
see, but I'm showing the wide on

1138
00:31:56,836 --> 0:31:59,066
the left and the tele on the

1139
00:31:59,066 --> 0:31:59,296
right.

1140
00:31:59,476 --> 0:32:00,666
So I'm only showing you half of

1141
00:31:59,476 --> 0:32:00,666
So I'm only showing you half of

1142
00:32:00,666 --> 0:32:01,176
each frame.

1143
00:32:02,306 --> 0:32:04,476
Now, if I triple-tap, I bring up

1144
00:32:04,476 --> 0:32:05,506
a distanceometer [phonetic]

1145
00:32:06,266 --> 0:32:08,686
which lets me change the plane

1146
00:32:09,176 --> 0:32:10,796
of depth convergence for the two

1147
00:32:10,796 --> 0:32:11,406
images.

1148
00:32:12,046 --> 0:32:14,216
This app knows how to register

1149
00:32:14,216 --> 0:32:15,736
the two images relative to one

1150
00:32:15,736 --> 0:32:18,146
another, so it lets me play with

1151
00:32:18,146 --> 0:32:19,526
the plane at which the depth

1152
00:32:19,526 --> 0:32:20,586
converges, kind of like with

1153
00:32:20,586 --> 0:32:22,666
your eyes when you focus on

1154
00:32:22,666 --> 0:32:24,316
something up close or far away,

1155
00:32:24,606 --> 0:32:25,586
you're kind of changing that

1156
00:32:25,626 --> 0:32:26,916
depth plane of convergence.

1157
00:32:27,316 --> 0:32:28,916
So, for instance, up close with

1158
00:32:28,916 --> 0:32:31,506
my hand, I can find the place

1159
00:32:31,506 --> 0:32:33,686
where the depth converges

1160
00:32:33,686 --> 0:32:34,276
nicely.

1161
00:32:34,476 --> 0:32:34,956
There we go.

1162
00:32:34,956 --> 0:32:36,476
Now I've got one hand.

1163
00:32:37,066 --> 0:32:38,786
But that's not right for the car

1164
00:32:38,786 --> 0:32:40,266
behind me so I can keep going

1165
00:32:40,926 --> 0:32:42,536
further away.

1166
00:32:43,846 --> 0:32:44,356
There we go.

1167
00:32:44,356 --> 0:32:45,776
And that's not right for the car

1168
00:32:45,776 --> 0:32:46,566
behind it.

1169
00:32:47,336 --> 0:32:49,706
So now I can pull that guy back

1170
00:32:49,706 --> 0:32:49,916
too.

1171
00:32:49,996 --> 0:32:52,966
And that's dual camera streaming

1172
00:32:52,966 --> 0:32:54,146
synchronized from the dual

1173
00:32:54,146 --> 0:32:54,676
cameras.

1174
00:32:55,516 --> 0:33:00,500
[ Applause ]

1175
00:32:55,516 --> 0:33:00,500
[ Applause ]

1176
00:33:03,046 --> 0:33:04,336
Here's a diagram showing

1177
00:33:04,426 --> 0:33:05,966
AVDualCam's graph.

1178
00:33:07,096 --> 0:33:08,736
Instead of using separate device

1179
00:33:08,736 --> 0:33:10,016
inputs, it just has one.

1180
00:33:10,586 --> 0:33:11,646
So it's using a single device

1181
00:33:11,646 --> 0:33:13,266
input for the dual camera, but

1182
00:33:13,266 --> 0:33:14,876
it's sourcing wide and tele

1183
00:33:14,876 --> 0:33:17,256
frames in a synchronized fashion

1184
00:33:17,706 --> 0:33:19,226
to two VideoDataOutputs.

1185
00:33:20,076 --> 0:33:21,316
You'll notice that there is a

1186
00:33:21,316 --> 0:33:23,226
little object, little pill at

1187
00:33:23,226 --> 0:33:23,966
the bottom called the

1188
00:33:23,966 --> 0:33:25,836
AVCaptureOutputSynchronizer.

1189
00:33:26,086 --> 0:33:27,066
I don't want to confuse you.

1190
00:33:27,426 --> 0:33:28,606
That thing is not doing the

1191
00:33:28,606 --> 0:33:29,836
hardware synchronization that I

1192
00:33:29,836 --> 0:33:30,386
talked about.

1193
00:33:30,676 --> 0:33:32,596
It's just an object that sits at

1194
00:33:32,636 --> 0:33:34,266
the bottom of a session, if you

1195
00:33:34,266 --> 0:33:36,226
desire, which lets you get

1196
00:33:36,456 --> 0:33:38,136
multiple callbacks for the same

1197
00:33:38,186 --> 0:33:40,066
time in a single callback.

1198
00:33:40,066 --> 0:33:41,826
So instead of getting a separate

1199
00:33:41,826 --> 0:33:43,196
VideoDataOutput callback for the

1200
00:33:43,196 --> 0:33:44,946
wide and the tele, you can slap

1201
00:33:44,946 --> 0:33:46,436
a DataOutputSynchronizer at the

1202
00:33:46,436 --> 0:33:48,016
bottom and get both frames for

1203
00:33:48,016 --> 0:33:49,586
the same time through a single

1204
00:33:49,586 --> 0:33:50,076
callback.

1205
00:33:50,076 --> 0:33:51,546
So it's very handy that way.

1206
00:33:52,166 --> 0:33:54,346
Now, below it, there's a Metal

1207
00:33:54,346 --> 0:33:56,006
Shader Filter Compositor that's

1208
00:33:56,006 --> 0:33:56,826
doing some magic.

1209
00:33:57,366 --> 0:33:58,706
Like I said, it's knowing how to

1210
00:33:58,706 --> 0:34:00,696
blend those frames together, and

1211
00:33:58,706 --> 0:34:00,696
blend those frames together, and

1212
00:34:00,696 --> 0:34:02,066
it decides where to render those

1213
00:34:02,066 --> 0:34:03,346
frames to the correct places in

1214
00:34:03,346 --> 0:34:04,986
the preview, and it also can

1215
00:34:04,986 --> 0:34:06,366
send them off to an

1216
00:34:06,366 --> 0:34:07,836
AVAssetWriter to record into a

1217
00:34:07,836 --> 0:34:08,985
video track.

1218
00:34:10,016 --> 0:34:12,136
Now, recall my earlier diagram.

1219
00:34:14,085 --> 0:34:15,485
I showed you a close-up view of

1220
00:34:15,516 --> 0:34:16,966
the AVCaptureDeviceInput,

1221
00:34:17,226 --> 0:34:18,536
specifically the dual camera

1222
00:34:18,536 --> 0:34:18,746
one.

1223
00:34:19,606 --> 0:34:20,835
The ports property of the dual

1224
00:34:20,835 --> 0:34:23,735
camera input exposes which ports

1225
00:34:23,735 --> 0:34:24,266
you see there.

1226
00:34:25,326 --> 0:34:26,815
Anybody see two video ports

1227
00:34:26,815 --> 0:34:27,036
there?

1228
00:34:28,686 --> 0:34:29,906
I don't see two video ports.

1229
00:34:29,906 --> 0:34:31,436
So how do we get both wide and

1230
00:34:31,436 --> 0:34:34,235
tele out of those input ports

1231
00:34:34,235 --> 0:34:35,016
that we see here?

1232
00:34:35,326 --> 0:34:36,956
Is that one video port somehow

1233
00:34:36,956 --> 0:34:37,716
giving us two?

1234
00:34:38,196 --> 0:34:39,806
No, it's not giving us wide or

1235
00:34:39,806 --> 0:34:40,146
tele.

1236
00:34:40,146 --> 0:34:42,025
It's giving us whatever the dual

1237
00:34:42,025 --> 0:34:43,735
camera decides is right for the

1238
00:34:43,735 --> 0:34:45,846
given zoom factor.

1239
00:34:45,846 --> 0:34:48,426
That's not going to help us get

1240
00:34:48,426 --> 0:34:49,716
both constituent streams at the

1241
00:34:49,716 --> 0:34:51,746
same time, so how do we do that?

1242
00:34:52,456 --> 0:34:54,466
Well, I'll tell you, but it's a

1243
00:34:54,466 --> 0:34:55,795
secret, so you have to promise

1244
00:34:55,795 --> 0:34:57,546
not to tell anybody, okay?

1245
00:34:58,316 --> 0:35:00,696
Virtual devices have secret

1246
00:34:58,316 --> 0:35:00,696
Virtual devices have secret

1247
00:35:00,766 --> 0:35:02,086
ports, okay?

1248
00:35:03,366 --> 0:35:06,396
The secret ports, previously

1249
00:35:06,426 --> 0:35:07,926
unbeknownst to you, are now

1250
00:35:07,926 --> 0:35:09,006
available, but you don't get

1251
00:35:09,006 --> 0:35:10,516
them out of the port's array,

1252
00:35:10,926 --> 0:35:13,586
you get them by knowing what to

1253
00:35:13,586 --> 0:35:14,216
ask for.

1254
00:35:14,906 --> 0:35:16,886
So instead of just getting an

1255
00:35:16,886 --> 0:35:18,636
array of every conceivable type

1256
00:35:18,636 --> 0:35:20,106
of port, including ports that

1257
00:35:20,106 --> 0:35:21,926
are not allowed to be used with

1258
00:35:21,926 --> 0:35:24,176
single-cam session, you can ask

1259
00:35:24,176 --> 0:35:25,086
for them by name.

1260
00:35:25,586 --> 0:35:26,396
So here we have the

1261
00:35:26,396 --> 0:35:28,376
dualCameraInput, and I'm asking

1262
00:35:28,416 --> 0:35:30,046
for its ports with

1263
00:35:30,246 --> 0:35:32,576
sourceDeviceType WideAngleCamera

1264
00:35:33,056 --> 0:35:34,096
and source device type

1265
00:35:34,396 --> 0:35:35,336
TelephotoCamera.

1266
00:35:36,026 --> 0:35:37,176
It goes "Aha, those are the

1267
00:35:37,176 --> 0:35:38,336
secret ports that I know about.

1268
00:35:38,336 --> 0:35:39,086
I'll give them to you now."

1269
00:35:39,506 --> 0:35:40,766
Once you've got those input

1270
00:35:40,766 --> 0:35:42,636
ports, you can hook them up to a

1271
00:35:42,636 --> 0:35:44,216
connection the same way that you

1272
00:35:44,216 --> 0:35:46,206
would when doing your own manual

1273
00:35:46,236 --> 0:35:47,186
connection creation.

1274
00:35:47,806 --> 0:35:49,376
Then you're streaming from

1275
00:35:49,376 --> 0:35:51,066
either the wide or the tele or

1276
00:35:51,066 --> 0:35:51,326
both.

1277
00:35:52,906 --> 0:35:54,626
Now, in the AVDualCam demo, I

1278
00:35:54,626 --> 0:35:55,946
was able to change the depth

1279
00:35:55,996 --> 0:35:58,316
convergence plane of the wide

1280
00:35:58,316 --> 0:35:59,906
and tele cameras with the

1281
00:35:59,906 --> 0:36:00,856
correct perspective.

1282
00:35:59,906 --> 0:36:00,856
correct perspective.

1283
00:36:00,856 --> 0:36:02,676
And you saw that it wasn't kind

1284
00:36:02,676 --> 0:36:04,066
of moving and shaking all over.

1285
00:36:04,066 --> 0:36:05,356
It was just moving along the

1286
00:36:05,446 --> 0:36:06,826
plane that I wanted it to, was

1287
00:36:06,826 --> 0:36:08,366
just along the plane of the

1288
00:36:08,366 --> 0:36:08,916
baseline.

1289
00:36:09,576 --> 0:36:10,476
And I was able to do that

1290
00:36:10,476 --> 0:36:12,136
because AVFoundation offers us

1291
00:36:12,726 --> 0:36:14,016
some homography aids.

1292
00:36:14,486 --> 0:36:15,416
Homography is, if you're

1293
00:36:15,416 --> 0:36:16,346
unfamiliar with the term, it

1294
00:36:16,346 --> 0:36:18,266
just relates two images on the

1295
00:36:18,266 --> 0:36:18,926
same plane.

1296
00:36:19,676 --> 0:36:20,956
They are the basis for computer

1297
00:36:20,956 --> 0:36:21,286
vision.

1298
00:36:21,606 --> 0:36:23,796
They are common for such tasks

1299
00:36:23,796 --> 0:36:26,076
as image rectification, image

1300
00:36:26,076 --> 0:36:26,736
registration.

1301
00:36:27,346 --> 0:36:29,696
Now, camera intrinsics are not

1302
00:36:29,696 --> 0:36:30,676
new to iOS.

1303
00:36:30,676 --> 0:36:32,406
We introduced those in iOS 11.

1304
00:36:33,236 --> 0:36:34,676
They're presented as a 3 by 3

1305
00:36:34,676 --> 0:36:36,286
matrix that describes the

1306
00:36:36,286 --> 0:36:37,956
geometric properties of a

1307
00:36:37,956 --> 0:36:40,416
camera, namely its focal length

1308
00:36:40,786 --> 0:36:43,186
and its optical center seen here

1309
00:36:43,996 --> 0:36:46,506
using the pinhole camera where

1310
00:36:46,506 --> 0:36:47,956
you can see where it enters

1311
00:36:47,956 --> 0:36:49,536
through the pinhole and hits the

1312
00:36:49,536 --> 0:36:50,936
sensor and that being the

1313
00:36:50,936 --> 0:36:52,536
optical sensor and the distance

1314
00:36:52,536 --> 0:36:53,766
between the two being the focal

1315
00:36:53,766 --> 0:36:54,066
length.

1316
00:36:55,486 --> 0:36:56,996
Now, you can opt in to receive

1317
00:36:56,996 --> 0:36:59,096
per-frame intrinsics by

1318
00:36:59,646 --> 0:37:00,276
messaging the

1319
00:36:59,646 --> 0:37:00,276
messaging the

1320
00:37:00,276 --> 0:37:01,946
AVCaptureConnection and saying

1321
00:37:02,196 --> 0:37:03,626
you want to opt in for intrinsic

1322
00:37:03,666 --> 0:37:04,146
delivery.

1323
00:37:04,576 --> 0:37:06,096
Once you've done that, then

1324
00:37:06,156 --> 0:37:07,676
every video data output buffer

1325
00:37:07,676 --> 0:37:09,336
that you receive has this

1326
00:37:09,336 --> 0:37:10,126
attachment on it,

1327
00:37:10,546 --> 0:37:12,346
CameraIntrinsicMatrix, which

1328
00:37:12,346 --> 0:37:14,486
again is an NSData wrapping a

1329
00:37:14,816 --> 0:37:17,426
matrix float 3 by 3 which is a

1330
00:37:17,426 --> 0:37:18,086
simd type.

1331
00:37:18,726 --> 0:37:20,126
You'll get when you get the wide

1332
00:37:20,126 --> 0:37:22,136
frame, it has the matrix for the

1333
00:37:22,136 --> 0:37:22,866
wide camera.

1334
00:37:23,176 --> 0:37:24,846
When you get the tele frame, it

1335
00:37:24,846 --> 0:37:26,416
has the matrix for the tele

1336
00:37:28,416 --> 0:37:28,756
camera.

1337
00:37:28,756 --> 0:37:30,436
Now, new in iOS 13, we offer

1338
00:37:30,436 --> 0:37:32,826
camera extrinsics at the device

1339
00:37:32,826 --> 0:37:33,156
level.

1340
00:37:33,576 --> 0:37:36,356
Extrinsics are a rotation matrix

1341
00:37:36,436 --> 0:37:37,946
and a translation vector that

1342
00:37:38,086 --> 0:37:41,386
are kind of crammed into one

1343
00:37:41,386 --> 0:37:42,226
matrix together.

1344
00:37:42,666 --> 0:37:43,956
And those describe the camera's

1345
00:37:43,986 --> 0:37:46,156
pose compared to a reference

1346
00:37:47,196 --> 0:37:47,456
camera.

1347
00:37:47,486 --> 0:37:48,476
This helps you if you want to

1348
00:37:48,476 --> 0:37:49,556
kind of relate where the two

1349
00:37:49,556 --> 0:37:52,316
cameras are, both their tilt and

1350
00:37:52,316 --> 0:37:53,236
how far away they are.

1351
00:37:53,686 --> 0:37:56,706
So AVDualCam uses the extrinsics

1352
00:37:57,016 --> 0:37:58,686
to know how to align the wide

1353
00:37:58,686 --> 0:38:00,786
and the tele camera frames with

1354
00:37:58,686 --> 0:38:00,786
and the tele camera frames with

1355
00:38:00,786 --> 0:38:01,916
respect to one another so it's

1356
00:38:01,916 --> 0:38:02,796
able to do those neat

1357
00:38:02,796 --> 0:38:03,816
perspective shifts.

1358
00:38:04,066 --> 0:38:07,216
That was a very, very brief

1359
00:38:07,246 --> 0:38:08,956
refresher on intrinsics and

1360
00:38:09,096 --> 0:38:09,926
extrinsics.

1361
00:38:10,216 --> 0:38:11,436
So I've described them in

1362
00:38:11,696 --> 0:38:13,486
absolutely excruciating detail

1363
00:38:13,486 --> 0:38:16,196
two years ago in Session 507, so

1364
00:38:16,196 --> 0:38:17,206
I'd invite you to review that

1365
00:38:17,206 --> 0:38:18,226
session if you have a very

1366
00:38:18,226 --> 0:38:19,726
strong stomach for puns.

1367
00:38:21,916 --> 0:38:24,496
Okay, the last topic of MultiCam

1368
00:38:24,496 --> 0:38:27,166
capture is multi-mic capture.

1369
00:38:27,716 --> 0:38:30,176
All right, let's review the

1370
00:38:30,176 --> 0:38:33,086
default behaviors of microphone

1371
00:38:33,086 --> 0:38:34,746
capture when using a traditional

1372
00:38:34,746 --> 0:38:35,536
AVCaptureSession.

1373
00:38:37,496 --> 0:38:39,836
The mic follows the camera.

1374
00:38:40,256 --> 0:38:41,326
That's as simple as I can put

1375
00:38:41,326 --> 0:38:41,426
it.

1376
00:38:41,696 --> 0:38:43,486
So if you have a front-facing

1377
00:38:43,486 --> 0:38:45,046
camera attached to your session

1378
00:38:45,286 --> 0:38:48,256
and a mic, it will automatically

1379
00:38:48,296 --> 0:38:49,816
choose the mic that's pointed in

1380
00:38:49,816 --> 0:38:50,936
the same direction as the front

1381
00:38:50,936 --> 0:38:51,306
camera.

1382
00:38:51,836 --> 0:38:52,636
Same goes for the back.

1383
00:38:52,866 --> 0:38:54,556
And it'll make a nice cardioid

1384
00:38:54,556 --> 0:38:56,636
pattern so that it rejects audio

1385
00:38:56,636 --> 0:38:57,686
out the side that you don't

1386
00:38:57,686 --> 0:38:58,006
want.

1387
00:38:58,556 --> 0:38:59,736
That way you're able to follow

1388
00:38:59,816 --> 0:39:01,056
your subject, be it back or

1389
00:38:59,816 --> 0:39:01,056
your subject, be it back or

1390
00:39:01,056 --> 0:39:01,366
front.

1391
00:39:01,666 --> 0:39:02,996
If you have an audio-only

1392
00:39:02,996 --> 0:39:04,056
session, we're not really sure

1393
00:39:04,056 --> 0:39:05,256
what direction to direct the

1394
00:39:05,256 --> 0:39:06,456
audio, so we just give you an

1395
00:39:06,456 --> 0:39:07,686
omnidirectional field.

1396
00:39:08,076 --> 0:39:10,216
And as a power feature, you can

1397
00:39:10,216 --> 0:39:11,666
disable all of that by saying,

1398
00:39:11,986 --> 0:39:13,656
"Hands off AVCaptureSession, I

1399
00:39:13,656 --> 0:39:14,666
want to use my own

1400
00:39:14,666 --> 0:39:16,546
AVAudioSession and configure my

1401
00:39:16,546 --> 0:39:18,306
audio on my own," and we'll

1402
00:39:18,306 --> 0:39:19,326
honor that.

1403
00:39:20,696 --> 0:39:22,326
So now comes the time for

1404
00:39:22,326 --> 0:39:23,566
another dirty little secret.

1405
00:39:26,436 --> 0:39:27,876
There is no such thing as a

1406
00:39:27,876 --> 0:39:28,186
front mic.

1407
00:39:28,186 --> 0:39:30,176
I totally just lied to you.

1408
00:39:31,176 --> 0:39:33,896
In actuality, iPhones contain

1409
00:39:33,896 --> 0:39:35,786
arrays of microphones, and there

1410
00:39:35,786 --> 0:39:36,886
are different numbers depending

1411
00:39:36,886 --> 0:39:37,706
on the devices.

1412
00:39:38,106 --> 0:39:39,186
Recent iPhones happen to have

1413
00:39:39,266 --> 0:39:39,816
four.

1414
00:39:39,816 --> 0:39:41,736
iPads have five, and they are

1415
00:39:41,736 --> 0:39:42,576
positioned at different

1416
00:39:42,626 --> 0:39:43,846
strategic locations.

1417
00:39:44,286 --> 0:39:45,676
On recent iPhones, you happen to

1418
00:39:45,676 --> 0:39:46,966
have two that point straight out

1419
00:39:46,966 --> 0:39:47,476
the bottom.

1420
00:39:47,746 --> 0:39:48,916
And at the top, you have one

1421
00:39:48,916 --> 0:39:50,026
pointing out each side.

1422
00:39:50,516 --> 0:39:51,916
All of them are omnidirectional

1423
00:39:51,916 --> 0:39:52,236
mics.

1424
00:39:52,776 --> 0:39:53,956
Now, the top ones do get some

1425
00:39:53,956 --> 0:39:55,386
acoustic separation because

1426
00:39:55,386 --> 0:39:56,856
they've got the body of the

1427
00:39:56,856 --> 0:39:58,066
device in between them which

1428
00:39:58,066 --> 0:39:59,766
acts as a baffle, but it's still

1429
00:39:59,766 --> 0:40:00,896
not giving you a nice

1430
00:39:59,766 --> 0:40:00,896
not giving you a nice

1431
00:40:00,896 --> 0:40:02,066
directional pattern like you

1432
00:40:02,066 --> 0:40:02,536
would want.

1433
00:40:03,336 --> 0:40:05,626
So what do you do to actually

1434
00:40:05,626 --> 0:40:07,116
get something approximating a

1435
00:40:07,116 --> 0:40:08,216
front or back mic?

1436
00:40:09,396 --> 0:40:10,906
What you do is called microphone

1437
00:40:11,066 --> 0:40:11,866
beam forming.

1438
00:40:12,356 --> 0:40:14,336
And this is a way of processing

1439
00:40:14,336 --> 0:40:16,176
the raw audio signals to get

1440
00:40:16,176 --> 0:40:17,326
them to be directional.

1441
00:40:17,646 --> 0:40:18,666
And this is something that Core

1442
00:40:18,666 --> 0:40:19,946
Audio does on our behalf.

1443
00:40:20,546 --> 0:40:22,686
Here we've got two blue dots

1444
00:40:22,686 --> 0:40:24,126
which represent two microphones

1445
00:40:24,126 --> 0:40:26,536
on either side of an iPhone, and

1446
00:40:26,536 --> 0:40:28,406
the circles are roughly the

1447
00:40:28,406 --> 0:40:29,586
pattern of audio that they are

1448
00:40:29,586 --> 0:40:29,966
hearing.

1449
00:40:29,966 --> 0:40:31,216
Remember, they are both

1450
00:40:31,216 --> 0:40:32,306
omnidirectional mics.

1451
00:40:32,546 --> 0:40:34,076
If we take those two signals and

1452
00:40:34,076 --> 0:40:35,806
we just simply subtract them, we

1453
00:40:35,806 --> 0:40:36,896
wind up with a figure-eight

1454
00:40:36,896 --> 0:40:38,296
pattern, which is cool.

1455
00:40:38,296 --> 0:40:39,556
It's not what we want, but it's

1456
00:40:39,556 --> 0:40:39,916
cool.

1457
00:40:41,046 --> 0:40:42,256
If we want to further shape

1458
00:40:42,256 --> 0:40:44,556
that, we can add some gain to

1459
00:40:44,556 --> 0:40:46,086
the one that we want to keep

1460
00:40:46,086 --> 0:40:47,666
before subtracting them, and now

1461
00:40:47,666 --> 0:40:49,046
we wind up with a little Pac-Man

1462
00:40:49,046 --> 0:40:50,496
ghost, and that's good.

1463
00:40:50,496 --> 0:40:51,626
Now we've got rejection out the

1464
00:40:51,626 --> 0:40:53,276
side that we don't want, but

1465
00:40:53,276 --> 0:40:54,416
unfortunately, we've also

1466
00:40:54,416 --> 0:40:55,706
attenuated the signal, so it's

1467
00:40:55,706 --> 0:40:57,396
much quieter than we want.

1468
00:40:58,676 --> 0:41:01,726
But if after doing all that, we

1469
00:40:58,676 --> 0:41:01,726
But if after doing all that, we

1470
00:41:01,726 --> 0:41:03,316
apply some gain to that signal.

1471
00:41:03,576 --> 0:41:04,816
We get a nice, big Pac-Man

1472
00:41:04,816 --> 0:41:06,036
ghost, and now we've got that

1473
00:41:06,066 --> 0:41:07,386
beautiful cardioid pattern that

1474
00:41:07,386 --> 0:41:09,546
we want, which rejects out of

1475
00:41:09,796 --> 0:41:11,136
the side of the camera that we

1476
00:41:11,136 --> 0:41:11,586
don't want.

1477
00:41:12,356 --> 0:41:14,136
Now, this is extremely

1478
00:41:14,136 --> 0:41:14,916
oversimplified.

1479
00:41:15,196 --> 0:41:16,306
There's a lot of filtering going

1480
00:41:16,306 --> 0:41:17,626
on to ensure that white noise

1481
00:41:17,626 --> 0:41:19,646
isn't gained up, but essentially

1482
00:41:19,646 --> 0:41:20,636
that is what's happening.

1483
00:41:20,996 --> 0:41:22,476
And up to now, only one

1484
00:41:22,476 --> 0:41:23,806
microphone beam form has been

1485
00:41:23,806 --> 0:41:24,776
supported at a time.

1486
00:41:25,176 --> 0:41:26,746
But the good folks over in Core

1487
00:41:26,746 --> 0:41:28,196
Audio land did some great work

1488
00:41:28,196 --> 0:41:30,536
for this MultiCam feature, and

1489
00:41:31,106 --> 0:41:33,296
as of iOS 13, we now support

1490
00:41:33,526 --> 0:41:35,436
multiple simultaneous beam

1491
00:41:35,436 --> 0:41:35,796
forming.

1492
00:41:36,516 --> 0:41:40,916
[ Applause ]

1493
00:41:41,416 --> 0:41:42,696
So going back to the old

1494
00:41:42,696 --> 0:41:43,716
AVCaptureSession.

1495
00:41:44,326 --> 0:41:46,146
When you get a microphone device

1496
00:41:46,146 --> 0:41:47,826
input and you find its audio

1497
00:41:47,906 --> 0:41:51,306
port, that port lives many

1498
00:41:51,306 --> 0:41:51,806
lives.

1499
00:41:51,806 --> 0:41:53,296
It can be the front, back or

1500
00:41:53,296 --> 0:41:54,776
omni depending on what cameras

1501
00:41:54,776 --> 0:41:55,726
the session finds.

1502
00:41:56,526 --> 0:41:57,246
But when you're using the

1503
00:41:57,246 --> 0:42:00,326
MultiCamSession, the behavior is

1504
00:41:57,246 --> 0:42:00,326
MultiCamSession, the behavior is

1505
00:42:00,746 --> 0:42:01,206
rigid.

1506
00:42:01,966 --> 0:42:04,506
The first audio port you find is

1507
00:42:04,506 --> 0:42:06,796
always for omni, and then you

1508
00:42:06,796 --> 0:42:08,596
can find those secret ports that

1509
00:42:08,596 --> 0:42:10,336
I was talking about to get a

1510
00:42:10,336 --> 0:42:12,416
dedicated back beam or dedicated

1511
00:42:12,416 --> 0:42:12,986
front beam.

1512
00:42:13,886 --> 0:42:16,826
The way you do that is by using

1513
00:42:17,286 --> 0:42:20,776
those same device input port

1514
00:42:20,776 --> 0:42:22,876
getters, this time by specifying

1515
00:42:22,876 --> 0:42:24,136
which position you're interested

1516
00:42:24,136 --> 0:42:24,286
in.

1517
00:42:24,816 --> 0:42:26,456
So you can ask for the front

1518
00:42:26,536 --> 0:42:27,936
position or the back position,

1519
00:42:28,106 --> 0:42:29,156
and that will give you the ports

1520
00:42:29,156 --> 0:42:30,336
that you're interested in, and

1521
00:42:30,336 --> 0:42:31,666
you'll get a nice back or front

1522
00:42:31,696 --> 0:42:32,136
beam form.

1523
00:42:34,216 --> 0:42:36,876
Here is for the front, and here

1524
00:42:36,876 --> 0:42:39,536
is for the back.

1525
00:42:39,536 --> 0:42:40,216
Now, going back to the

1526
00:42:40,216 --> 0:42:42,336
MultiCamPIP demonstration we had

1527
00:42:42,336 --> 0:42:44,556
with Nik, we stuck to the video

1528
00:42:44,556 --> 0:42:46,306
side while we were showing you

1529
00:42:46,556 --> 0:42:47,896
the whizzy part of the graph.

1530
00:42:47,896 --> 0:42:49,456
Now I'm going to go back and

1531
00:42:49,456 --> 0:42:50,226
tell you what we were doing on

1532
00:42:50,226 --> 0:42:50,986
the audio side.

1533
00:42:51,966 --> 0:42:55,446
We were running all the time a

1534
00:42:55,446 --> 0:42:57,526
single device input with two

1535
00:42:57,986 --> 0:42:59,256
beam forms, one for the back and

1536
00:42:59,256 --> 0:43:00,766
one for the front, and we were

1537
00:42:59,256 --> 0:43:00,766
one for the front, and we were

1538
00:43:00,766 --> 0:43:01,936
running those to two different

1539
00:43:02,026 --> 0:43:03,116
audio data outputs.

1540
00:43:03,456 --> 0:43:04,476
This slide should say

1541
00:43:04,476 --> 0:43:05,356
AudioDataOutputs.

1542
00:43:05,866 --> 0:43:07,416
And then choosing between them

1543
00:43:07,806 --> 0:43:08,606
at runtime.

1544
00:43:08,676 --> 0:43:10,656
So depending on which is the

1545
00:43:10,656 --> 0:43:12,296
larger of the two, we would

1546
00:43:12,296 --> 0:43:14,626
switch to back or front and give

1547
00:43:14,626 --> 0:43:15,906
you the beam form that we

1548
00:43:15,906 --> 0:43:16,326
desired.

1549
00:43:18,096 --> 0:43:19,466
There are a couple rules to know

1550
00:43:19,466 --> 0:43:21,396
about multi-mic capture.

1551
00:43:21,846 --> 0:43:23,186
Beam-forming only works with

1552
00:43:23,186 --> 0:43:23,956
built-in mics.

1553
00:43:23,956 --> 0:43:24,856
If you've got something

1554
00:43:24,856 --> 0:43:26,666
external, USB, we don't know

1555
00:43:26,666 --> 0:43:27,206
what that is.

1556
00:43:27,206 --> 0:43:28,316
We don't know how to beam form

1557
00:43:28,316 --> 0:43:29,206
with it.

1558
00:43:29,816 --> 0:43:31,426
If you do happen to plug in

1559
00:43:31,426 --> 0:43:32,696
something else, including

1560
00:43:32,696 --> 0:43:36,246
AirPods, we will capture audio

1561
00:43:36,246 --> 0:43:37,836
of course, but we don't know how

1562
00:43:37,836 --> 0:43:39,336
to beam form, so we'll just pipe

1563
00:43:39,336 --> 0:43:41,076
that microphone through all of

1564
00:43:41,076 --> 0:43:41,976
the inputs that you have

1565
00:43:42,026 --> 0:43:43,456
connected, thus ensuring that

1566
00:43:43,456 --> 0:43:43,976
you don't lose the signal.

1567
00:43:47,596 --> 0:43:48,716
And that's the end of the

1568
00:43:48,716 --> 0:43:50,786
multi-camera capture part of

1569
00:43:50,786 --> 0:43:52,196
today's talk.

1570
00:43:52,256 --> 0:43:53,386
Let's do a quick summary.

1571
00:43:54,956 --> 0:43:57,466
MultiCam capture session is the

1572
00:43:57,466 --> 0:43:59,966
new way to do multiple cameras

1573
00:43:59,966 --> 0:44:01,446
simultaneously on iOS.

1574
00:43:59,966 --> 0:44:01,446
simultaneously on iOS.

1575
00:44:02,516 --> 0:44:03,906
It is a power tool, but it has

1576
00:44:03,906 --> 0:44:04,786
some limitations.

1577
00:44:04,786 --> 0:44:05,256
Know them.

1578
00:44:06,716 --> 0:44:08,276
And thoughtfully handle hardware

1579
00:44:08,276 --> 0:44:10,376
and system pressure costs as

1580
00:44:10,376 --> 0:44:11,436
you're doing your programming.

1581
00:44:11,786 --> 0:44:14,116
And if you want to do

1582
00:44:14,116 --> 0:44:15,526
synchronized streaming, use

1583
00:44:15,526 --> 0:44:16,756
those virtual devices with

1584
00:44:16,756 --> 0:44:18,106
constituent device ports.

1585
00:44:19,006 --> 0:44:20,236
And lastly, if you want to do

1586
00:44:20,236 --> 0:44:21,896
multi-mic capture, be aware that

1587
00:44:21,896 --> 0:44:23,296
you can use front or back beam

1588
00:44:23,296 --> 0:44:24,156
form or omni.

1589
00:44:24,496 --> 0:44:24,976
Thank you.

1590
00:44:25,516 --> 0:44:28,500
[ Applause ]
