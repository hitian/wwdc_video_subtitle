1
00:00:01,176 --> 0:00:05,500
[ Music ]

2
00:00:11,516 --> 0:00:16,546
[ Applause ]

3
00:00:17,046 --> 0:00:18,406
&gt;&gt; Hello, everybody.

4
00:00:18,876 --> 0:00:20,906
My name is Gokul and together

5
00:00:20,906 --> 0:00:22,846
with my colleagues Dima and

6
00:00:22,846 --> 0:00:24,916
Jonathan, we are really excited

7
00:00:24,916 --> 0:00:26,616
to tell you all about Sign In

8
00:00:26,806 --> 0:00:27,216
with Apple.

9
00:00:27,616 --> 0:00:30,196
I will start with an overview of

10
00:00:30,196 --> 0:00:31,416
the key features of Sign In with

11
00:00:31,416 --> 0:00:33,486
Apple, then Dima will talk

12
00:00:33,486 --> 0:00:34,966
through how you can integrate

13
00:00:34,966 --> 0:00:36,696
this into your native app.

14
00:00:37,276 --> 0:00:39,166
Jonathan will demo that live

15
00:00:39,476 --> 0:00:39,916
here.

16
00:00:40,436 --> 0:00:41,976
And finally, we'll discuss

17
00:00:42,076 --> 0:00:44,756
cross-platform and close out

18
00:00:44,756 --> 0:00:45,966
with some best practices.

19
00:00:49,516 --> 0:00:53,236
Sign In with Apple is fast, easy

20
00:00:53,236 --> 0:00:55,536
account setup and sign in for

21
00:00:55,536 --> 0:00:56,366
your application.

22
00:00:57,136 --> 0:01:01,206
It is secure and it's private,

23
00:00:57,136 --> 0:01:01,206
It is secure and it's private,

24
00:01:01,986 --> 0:01:04,806
both for your users and for your

25
00:01:04,806 --> 0:01:05,316
privacy.

26
00:01:05,956 --> 0:01:07,526
It's not Apple's business to

27
00:01:07,526 --> 0:01:10,056
know how you engage with your

28
00:01:10,056 --> 0:01:11,326
users in your app.

29
00:01:12,046 --> 0:01:13,386
So you can implement Sign In

30
00:01:13,386 --> 0:01:15,576
with Apple with confidence that

31
00:01:15,576 --> 0:01:17,976
Apple simply won't track any of

32
00:01:18,506 --> 0:01:18,606
that.

33
00:01:19,156 --> 0:01:21,576
Let's take a quick look at the

34
00:01:21,576 --> 0:01:23,876
experience when your user taps

35
00:01:24,436 --> 0:01:25,096
on that button.

36
00:01:26,386 --> 0:01:28,456
They see a sheet pre-filled with

37
00:01:28,456 --> 0:01:30,226
information that you request,

38
00:01:30,796 --> 0:01:33,656
like name and email.

39
00:01:34,826 --> 0:01:36,656
The user can make a choice on

40
00:01:36,656 --> 0:01:38,206
which email they want to share.

41
00:01:39,516 --> 0:01:45,556
They tap Continue and that's it.

42
00:01:45,846 --> 0:01:47,776
They are signed into your

43
00:01:47,776 --> 0:01:48,456
application.

44
00:01:48,456 --> 0:01:52,746
Your app gets a unique, stable

45
00:01:54,156 --> 0:01:58,296
ID, a name and a verified email

46
00:01:58,296 --> 0:02:00,716
address that you can reach for

47
00:01:58,296 --> 0:02:00,716
address that you can reach for

48
00:02:00,716 --> 0:02:01,116
the user.

49
00:02:01,986 --> 0:02:04,326
And best of all, this is a

50
00:02:04,326 --> 0:02:07,276
secure two-factor authenticated

51
00:02:07,276 --> 0:02:09,116
account for the user in your

52
00:02:09,216 --> 0:02:09,806
app.

53
00:02:09,806 --> 0:02:10,485
It's that easy.

54
00:02:17,046 --> 0:02:18,946
And even better, this all works

55
00:02:19,076 --> 0:02:21,326
seamlessly across all of the

56
00:02:21,326 --> 0:02:22,286
user's devices.

57
00:02:23,956 --> 0:02:26,266
On a new device, a simple tap

58
00:02:26,806 --> 0:02:28,456
gets them going with the same

59
00:02:28,456 --> 0:02:30,456
account as before in your app

60
00:02:30,936 --> 0:02:33,186
and ready to fully engage again.

61
00:02:33,576 --> 0:02:34,966
Very fast, very easy.

62
00:02:37,046 --> 0:02:38,466
So Sign In with Apple provides

63
00:02:38,616 --> 0:02:40,546
really streamlined account setup

64
00:02:40,546 --> 0:02:42,796
experience for your app.

65
00:02:42,896 --> 0:02:44,196
Notice there are no cumbersome

66
00:02:44,256 --> 0:02:45,456
forms to fill out.

67
00:02:45,456 --> 0:02:46,306
Just a simple tap.

68
00:02:47,486 --> 0:02:50,716
Users downloaded your app from

69
00:02:50,716 --> 0:02:52,706
the Store using their Apple ID

70
00:02:52,706 --> 0:02:53,526
already.

71
00:02:54,086 --> 0:02:55,406
And Sign In with Apple helps

72
00:02:55,446 --> 0:02:57,856
them engage fully with just a

73
00:02:57,856 --> 0:02:59,726
tap in your app.

74
00:03:01,396 --> 0:03:03,636
You also get a verified email

75
00:03:03,636 --> 0:03:05,456
address that you can use to

76
00:03:05,456 --> 0:03:06,586
communicate with the user.

77
00:03:07,616 --> 0:03:09,316
Now this is the email address

78
00:03:10,146 --> 0:03:12,356
that Apple uses for its

79
00:03:12,356 --> 0:03:13,066
communication.

80
00:03:13,996 --> 0:03:15,266
So no need to do these

81
00:03:15,266 --> 0:03:16,666
cumbersome round trips of

82
00:03:16,666 --> 0:03:19,176
sending email and having users

83
00:03:19,246 --> 0:03:20,036
click on links.

84
00:03:20,726 --> 0:03:22,916
Apple has already done that work

85
00:03:22,916 --> 0:03:23,266
for you.

86
00:03:24,546 --> 0:03:26,686
Sign In with Apple provides you

87
00:03:26,686 --> 0:03:28,896
instantly with an email that

88
00:03:28,896 --> 0:03:29,676
just works.

89
00:03:30,066 --> 0:03:31,346
No additional verification

90
00:03:31,346 --> 0:03:31,876
required.

91
00:03:34,236 --> 0:03:35,966
Now some users may feel less

92
00:03:35,966 --> 0:03:37,666
comfortable sharing their real

93
00:03:37,666 --> 0:03:38,406
email address.

94
00:03:39,316 --> 0:03:40,466
And you may end up with some

95
00:03:40,506 --> 0:03:42,146
fake emails that don't work.

96
00:03:43,006 --> 0:03:44,526
And Sign In with Apple helps you

97
00:03:44,526 --> 0:03:45,016
with that.

98
00:03:46,016 --> 0:03:48,436
Hide My Email option enables

99
00:03:48,486 --> 0:03:50,896
these users to share a hidden

100
00:03:50,896 --> 0:03:53,716
email address that routes to

101
00:03:53,716 --> 0:03:55,596
their verified email inbox.

102
00:03:56,586 --> 0:03:58,986
This is great.

103
00:03:59,166 --> 0:04:00,976
Now this is enabled through

104
00:03:59,166 --> 0:04:00,976
Now this is enabled through

105
00:04:00,976 --> 0:04:03,596
Apple's Private Email Relay

106
00:04:03,596 --> 0:04:06,026
system that forwards the email

107
00:04:06,746 --> 0:04:08,566
to the verified email for the

108
00:04:08,566 --> 0:04:11,386
user and it can handle replies

109
00:04:11,386 --> 0:04:11,586
too.

110
00:04:11,836 --> 0:04:12,866
So it works both ways.

111
00:04:13,596 --> 0:04:16,375
And you can use this for any

112
00:04:16,375 --> 0:04:18,016
kind of business communication

113
00:04:18,065 --> 0:04:19,856
for your app.

114
00:04:19,856 --> 0:04:21,846
Apple does not retain any

115
00:04:21,846 --> 0:04:23,796
messages once they're delivered

116
00:04:24,196 --> 0:04:25,206
to the user's inbox.

117
00:04:26,156 --> 0:04:28,936
In summary, a verified email

118
00:04:29,666 --> 0:04:31,966
that works available instantly

119
00:04:32,326 --> 0:04:32,976
to your app.

120
00:04:37,266 --> 0:04:39,836
With Sign In with Apple there

121
00:04:39,836 --> 0:04:42,156
are no new passwords to remember

122
00:04:42,546 --> 0:04:42,976
or forget.

123
00:04:45,046 --> 0:04:46,396
So it's already more secure.

124
00:04:47,456 --> 0:04:50,866
Even better, every account that

125
00:04:50,866 --> 0:04:52,966
your app receives is two-factor

126
00:04:52,966 --> 0:04:54,266
authentication protected.

127
00:04:55,186 --> 0:04:56,866
This is just the best account

128
00:04:56,896 --> 0:04:57,716
for your app.

129
00:04:58,016 --> 0:05:00,346
No password, two-factor

130
00:04:58,016 --> 0:05:00,346
No password, two-factor

131
00:05:00,346 --> 0:05:02,746
authentication, no cost to you

132
00:05:03,146 --> 0:05:04,776
and no added friction to the

133
00:05:04,776 --> 0:05:05,236
user.

134
00:05:05,786 --> 0:05:08,206
Great built-in security with

135
00:05:08,206 --> 0:05:09,686
Sign In with Apple.

136
00:05:12,046 --> 0:05:13,536
Now combatting account fraud in

137
00:05:13,626 --> 0:05:15,196
your systems is a difficult

138
00:05:15,196 --> 0:05:17,426
problem, and Apple is in a

139
00:05:17,426 --> 0:05:20,746
unique position to help.

140
00:05:20,906 --> 0:05:22,976
Sign In with Apple includes a

141
00:05:22,976 --> 0:05:25,946
new privacy-friendly way for you

142
00:05:25,946 --> 0:05:28,386
to gain confidence that the user

143
00:05:28,386 --> 0:05:30,426
on your app is indeed real.

144
00:05:31,736 --> 0:05:33,776
It combines sophisticated

145
00:05:33,776 --> 0:05:35,656
on-device intelligence with

146
00:05:36,316 --> 0:05:38,816
account information, and

147
00:05:38,876 --> 0:05:40,616
abstracts that into a single

148
00:05:40,616 --> 0:05:43,196
bit: real user or unknown.

149
00:05:43,976 --> 0:05:46,526
Real users, give them the red

150
00:05:46,526 --> 0:05:47,886
carpet treatment in your app

151
00:05:48,126 --> 0:05:48,616
they deserve.

152
00:05:49,946 --> 0:05:51,316
This is a high confidence

153
00:05:51,426 --> 0:05:51,906
indicator.

154
00:05:52,496 --> 0:05:55,846
If you receive unknown, it could

155
00:05:55,846 --> 0:05:58,306
be a user, it could be a bot.

156
00:05:59,116 --> 0:06:01,216
Treat this user like you would

157
00:05:59,116 --> 0:06:01,216
Treat this user like you would

158
00:06:01,216 --> 0:06:02,786
treat any other new account in

159
00:06:02,786 --> 0:06:04,576
your system where you don't have

160
00:06:04,866 --> 0:06:05,986
enough information to make a

161
00:06:05,986 --> 0:06:06,366
decision.

162
00:06:07,246 --> 0:06:09,226
So this is the real user

163
00:06:09,226 --> 0:06:11,406
indicator helping you fight

164
00:06:11,566 --> 0:06:12,846
account fraud.

165
00:06:15,246 --> 0:06:18,976
Finally, Sign In with Apple is

166
00:06:18,976 --> 0:06:19,836
cross-platform.

167
00:06:20,726 --> 0:06:23,546
The API is available on all

168
00:06:23,546 --> 0:06:26,366
Apple platforms: iOS, MacOS,

169
00:06:26,516 --> 0:06:27,636
WatchOS, tvOS.

170
00:06:29,306 --> 0:06:30,876
The sign-in experience is

171
00:06:30,876 --> 0:06:32,536
tailored on each platform for

172
00:06:32,536 --> 0:06:33,336
ease of use.

173
00:06:34,406 --> 0:06:36,966
The JavaScript API enables you

174
00:06:36,966 --> 0:06:38,616
to use Sign In with Apple on the

175
00:06:38,616 --> 0:06:40,726
web as well as other platforms

176
00:06:40,756 --> 0:06:42,526
like Windows or Android.

177
00:06:43,356 --> 0:06:44,316
We'll talk about this in more

178
00:06:44,316 --> 0:06:44,976
detail later.

179
00:06:45,516 --> 0:06:51,686
[ Applause ]

180
00:06:52,186 --> 0:06:53,386
Streamlined account setup,

181
00:06:53,956 --> 0:06:56,536
verified email address, built-in

182
00:06:56,536 --> 0:06:58,996
security, anti-fraud and

183
00:06:58,996 --> 0:06:59,906
cross-platform.

184
00:07:00,366 --> 0:07:02,256
That's a very quick summary of

185
00:07:02,256 --> 0:07:04,166
the key features of Sign In with

186
00:07:04,166 --> 0:07:04,516
Apple.

187
00:07:04,876 --> 0:07:06,696
Next, Dima's going to join me

188
00:07:06,696 --> 0:07:08,336
onstage to talk through how you

189
00:07:08,336 --> 0:07:09,976
can integrate this into your

190
00:07:09,976 --> 0:07:10,716
native app.

191
00:07:10,996 --> 0:07:11,216
Dima?

192
00:07:12,516 --> 0:07:14,546
[ Applause ]

193
00:07:15,046 --> 0:07:15,526
&gt;&gt; Thanks, Gokul.

194
00:07:16,416 --> 0:07:17,026
Hi, folks.

195
00:07:17,826 --> 0:07:19,146
So you've seen this great

196
00:07:19,636 --> 0:07:19,976
feature.

197
00:07:20,606 --> 0:07:21,536
What does it actually take to

198
00:07:21,536 --> 0:07:22,656
integrate into your app?

199
00:07:26,046 --> 0:07:28,006
There are four key things that

200
00:07:28,006 --> 0:07:29,056
your app needs to do to hit the

201
00:07:29,056 --> 0:07:29,616
ground running.

202
00:07:30,276 --> 0:07:31,856
First, Auto Sign In with

203
00:07:31,856 --> 0:07:32,816
Apple-branded button.

204
00:07:34,046 --> 0:07:35,846
Then configure and perform an

205
00:07:35,846 --> 0:07:36,896
authorization request.

206
00:07:38,136 --> 0:07:40,156
After the user sees the Sign In

207
00:07:40,156 --> 0:07:41,496
with Apple UI and after a quick

208
00:07:41,836 --> 0:07:43,446
FaceID check, the results of the

209
00:07:43,446 --> 0:07:44,556
authorization will be returned

210
00:07:44,556 --> 0:07:46,596
back to your app.

211
00:07:47,036 --> 0:07:48,816
At this point you need to verify

212
00:07:48,816 --> 0:07:50,036
the results with the Apple ID

213
00:07:50,036 --> 0:07:51,606
servers and create an account in

214
00:07:51,606 --> 0:07:51,976
your system.

215
00:07:54,506 --> 0:07:55,966
Last but not least, the

216
00:07:55,966 --> 0:07:57,546
credential state may change

217
00:07:57,546 --> 0:07:58,956
after it is returned to your app

218
00:07:58,956 --> 0:08:00,116
and your application needs to

219
00:07:58,956 --> 0:08:00,116
and your application needs to

220
00:08:00,116 --> 0:08:01,646
handle those state changes

221
00:08:01,646 --> 0:08:02,056
gracefully.

222
00:08:06,136 --> 0:08:08,176
First, let's look into the Sign

223
00:08:08,176 --> 0:08:10,236
In with Apple button.

224
00:08:10,266 --> 0:08:12,416
With only a couple lines of

225
00:08:12,416 --> 0:08:13,656
code, you can add an

226
00:08:13,656 --> 0:08:14,816
AuthorizationAppleIDButton to

227
00:08:14,816 --> 0:08:15,886
your app.

228
00:08:17,096 --> 0:08:20,766
Once you initialize it, add an

229
00:08:20,766 --> 0:08:21,116
action.

230
00:08:22,396 --> 0:08:24,876
And that's all you need to do.

231
00:08:25,136 --> 0:08:26,856
The button supports several

232
00:08:26,856 --> 0:08:28,026
different customizations to fit

233
00:08:28,026 --> 0:08:28,786
your app's design.

234
00:08:29,696 --> 0:08:30,946
Different visual styles and

235
00:08:30,946 --> 0:08:32,256
different labels are available.

236
00:08:32,946 --> 0:08:35,966
Apps that currently use valid

237
00:08:35,966 --> 0:08:37,216
APIs will find this very

238
00:08:37,216 --> 0:08:37,616
familiar.

239
00:08:43,356 --> 0:08:45,566
Next, once the user performs the

240
00:08:45,566 --> 0:08:48,026
action, you need to configure a

241
00:08:48,026 --> 0:08:49,386
request and perform

242
00:08:49,386 --> 0:08:49,926
authorization.

243
00:08:52,496 --> 0:08:55,196
Here's how you do it.

244
00:08:55,196 --> 0:08:56,936
With only one line of code, you

245
00:08:56,936 --> 0:08:58,196
initialize an Apple ID

246
00:08:58,196 --> 0:08:59,066
Authorization request.

247
00:09:00,426 --> 0:09:01,806
This is all your app needs to

248
00:09:01,806 --> 0:09:02,766
create an account in your

249
00:09:02,766 --> 0:09:03,186
system.

250
00:09:05,116 --> 0:09:06,776
Optionally, if your app requires

251
00:09:06,776 --> 0:09:07,586
this for the best user

252
00:09:07,586 --> 0:09:08,976
experience, you can set

253
00:09:08,976 --> 0:09:10,426
requestedScopes for full name

254
00:09:10,426 --> 0:09:10,886
and email.

255
00:09:12,376 --> 0:09:13,556
You should only request this

256
00:09:13,556 --> 0:09:14,746
information if it's truly

257
00:09:14,746 --> 0:09:16,496
required for your app and err on

258
00:09:16,496 --> 0:09:17,536
the side of minimum amount of

259
00:09:17,536 --> 0:09:18,076
information.

260
00:09:19,786 --> 0:09:21,006
Once the request is configured,

261
00:09:22,146 --> 0:09:22,646
initialize

262
00:09:22,646 --> 0:09:26,556
AuthorizationController, set the

263
00:09:26,556 --> 0:09:28,576
delegates to get the results

264
00:09:28,576 --> 0:09:30,416
back into your app.

265
00:09:30,416 --> 0:09:32,706
And last but not least, perform

266
00:09:32,706 --> 0:09:33,146
the request.

267
00:09:34,176 --> 0:09:35,366
Once you perform the request,

268
00:09:35,656 --> 0:09:36,666
this will initiate an

269
00:09:36,666 --> 0:09:37,986
authorization UI to be presented

270
00:09:37,986 --> 0:09:38,456
to the user.

271
00:09:39,156 --> 0:09:40,436
After a quick FaceID check, an

272
00:09:41,066 --> 0:09:42,306
authorization result will be

273
00:09:42,306 --> 0:09:43,146
returned to your app.

274
00:09:43,776 --> 0:09:44,736
Let's talk about handling these

275
00:09:44,736 --> 0:09:44,976
results.

276
00:09:48,046 --> 0:09:48,386
Through an

277
00:09:48,386 --> 0:09:49,446
AuthorizationController

278
00:09:49,446 --> 0:09:50,656
didCompleteWithAuthorization

279
00:09:50,656 --> 0:09:52,036
method, you will get an

280
00:09:52,036 --> 0:09:52,996
authorization object.

281
00:09:53,716 --> 0:09:54,846
This object has a credential

282
00:09:54,846 --> 0:09:56,306
property of type

283
00:09:56,306 --> 0:09:57,426
AppleIDCredential.

284
00:09:57,926 --> 0:09:58,826
You should check that this is

285
00:09:58,826 --> 0:09:59,916
actually an AppleIDCredential

286
00:09:59,916 --> 0:10:00,806
before processing that.

287
00:09:59,916 --> 0:10:00,806
before processing that.

288
00:10:01,856 --> 0:10:02,936
This object has all the

289
00:10:02,936 --> 0:10:04,156
information that is required to

290
00:10:04,156 --> 0:10:05,076
create an account in your

291
00:10:05,076 --> 0:10:05,466
system.

292
00:10:06,056 --> 0:10:09,036
If the user cancels the request

293
00:10:09,036 --> 0:10:10,556
or any other error occurs, we

294
00:10:10,786 --> 0:10:12,486
will let your app know through

295
00:10:12,486 --> 0:10:13,306
the didCompleteWithError

296
00:10:13,306 --> 0:10:13,756
callback.

297
00:10:15,106 --> 0:10:16,296
Both of these delegate callbacks

298
00:10:16,296 --> 0:10:17,676
are guaranteed to be made on

299
00:10:17,676 --> 0:10:18,756
your app's main queue.

300
00:10:21,626 --> 0:10:22,806
So let's dive deeper into the

301
00:10:22,806 --> 0:10:24,926
results that we will give to

302
00:10:24,926 --> 0:10:25,966
your app.

303
00:10:29,276 --> 0:10:30,796
First, the user identifier.

304
00:10:30,796 --> 0:10:32,916
This is a unique, stable,

305
00:10:32,916 --> 0:10:34,476
team-scoped user identifier.

306
00:10:35,396 --> 0:10:37,186
This is great.

307
00:10:37,756 --> 0:10:38,676
You can use it to retrieve

308
00:10:38,676 --> 0:10:39,946
information from your user

309
00:10:39,946 --> 0:10:41,086
systems across different

310
00:10:41,086 --> 0:10:43,366
platforms, different systems,

311
00:10:43,676 --> 0:10:44,746
the web, Android.

312
00:10:45,316 --> 0:10:46,956
It remains stable across all of

313
00:10:46,956 --> 0:10:47,046
them.

314
00:10:47,046 --> 0:10:48,506
And it is associated with your

315
00:10:48,506 --> 0:10:49,266
developer team.

316
00:10:50,486 --> 0:10:51,596
This is the key to your user.

317
00:10:52,586 --> 0:10:53,856
Next, we will return

318
00:10:53,906 --> 0:10:55,826
verification data, an identity

319
00:10:55,826 --> 0:10:57,476
token and authorization code.

320
00:10:57,916 --> 0:10:59,156
A short-lived token that you can

321
00:10:59,156 --> 0:11:01,046
use with Apple ID servers to

322
00:10:59,156 --> 0:11:01,046
use with Apple ID servers to

323
00:11:01,046 --> 0:11:02,156
exchange for a refresh token.

324
00:11:03,056 --> 0:11:04,226
If you integrate with existing

325
00:11:04,226 --> 0:11:05,906
auth systems, adapting Sign In

326
00:11:05,906 --> 0:11:07,226
with Apple will be very

327
00:11:07,286 --> 0:11:07,726
familiar.

328
00:11:10,146 --> 0:11:11,856
Optionally, we will return

329
00:11:11,986 --> 0:11:13,056
account information if you

330
00:11:13,056 --> 0:11:15,456
requested it, a name and a

331
00:11:15,456 --> 0:11:16,256
verified email.

332
00:11:16,876 --> 0:11:18,176
And since the email is verified

333
00:11:18,176 --> 0:11:19,496
by Apple, your apps no longer

334
00:11:19,496 --> 0:11:20,546
need to perform any sort of

335
00:11:20,546 --> 0:11:22,376
verification after we have shown

336
00:11:22,376 --> 0:11:22,936
it to you.

337
00:11:25,046 --> 0:11:26,486
Lastly, a real user indicator,

338
00:11:27,766 --> 0:11:28,786
as was mentioned earlier.

339
00:11:28,786 --> 0:11:30,706
Use this to streamline your

340
00:11:30,706 --> 0:11:31,596
sign-in experience.

341
00:11:35,046 --> 0:11:36,166
So now you've created an account

342
00:11:36,336 --> 0:11:36,936
in your system.

343
00:11:37,616 --> 0:11:39,386
As the user uses Apple devices

344
00:11:39,386 --> 0:11:41,006
in your app, the credential

345
00:11:41,006 --> 0:11:42,136
state may change.

346
00:11:43,006 --> 0:11:43,896
And you need to handle those

347
00:11:43,896 --> 0:11:44,696
scenarios gracefully.

348
00:11:47,026 --> 0:11:48,566
The user may stop using Apple ID

349
00:11:48,566 --> 0:11:49,066
with an app.

350
00:11:49,716 --> 0:11:51,126
They may sign out of the device.

351
00:11:51,996 --> 0:11:54,236
Events like this should be

352
00:11:54,236 --> 0:11:54,996
handled gracefully.

353
00:11:54,996 --> 0:11:56,666
To allow this, authentication

354
00:11:56,666 --> 0:11:57,926
services framework exposes a

355
00:11:58,016 --> 0:12:00,596
fast API to allow you to query

356
00:11:58,016 --> 0:12:00,596
fast API to allow you to query

357
00:12:00,596 --> 0:12:00,976
this state.

358
00:12:03,616 --> 0:12:05,046
Using the user identifier that

359
00:12:05,046 --> 0:12:06,246
was previously returned through

360
00:12:06,246 --> 0:12:08,916
an Apple ID Credential, you can

361
00:12:08,916 --> 0:12:10,796
check GetCredentialState call to

362
00:12:11,286 --> 0:12:12,366
get the state of the current

363
00:12:12,366 --> 0:12:13,056
Apple ID Credential.

364
00:12:13,856 --> 0:12:15,126
It's a very fast API call.

365
00:12:15,666 --> 0:12:17,246
It can return three things.

366
00:12:18,126 --> 0:12:19,116
We may tell you the user is

367
00:12:19,116 --> 0:12:20,326
authorized, and you should let

368
00:12:20,326 --> 0:12:21,656
them continue using your app.

369
00:12:23,216 --> 0:12:24,546
The credential may be revoked.

370
00:12:24,546 --> 0:12:28,096
You should sign the user out of

371
00:12:28,096 --> 0:12:29,836
your app on this device and

372
00:12:29,836 --> 0:12:31,836
optionally guide them to sign

373
00:12:31,836 --> 0:12:33,926
back in again.

374
00:12:34,106 --> 0:12:35,996
NotFound means that the user has

375
00:12:35,996 --> 0:12:37,006
not previously established the

376
00:12:37,006 --> 0:12:38,406
relationship through Sign In

377
00:12:38,406 --> 0:12:38,806
with Apple.

378
00:12:40,376 --> 0:12:41,616
This API is very fast.

379
00:12:42,026 --> 0:12:43,256
You should call it on your app's

380
00:12:43,256 --> 0:12:44,716
launch to make sure that you

381
00:12:44,716 --> 0:12:45,846
provide a tailored experience

382
00:12:45,846 --> 0:12:46,816
for each of these states.

383
00:12:49,126 --> 0:12:50,576
Additionally, we expose a

384
00:12:50,576 --> 0:12:51,386
notification through

385
00:12:51,386 --> 0:12:53,116
NotificationCenter to let you

386
00:12:53,116 --> 0:12:54,596
know when this credential state

387
00:12:54,726 --> 0:12:55,566
changed to revoked.

388
00:12:56,256 --> 0:12:57,826
Sign the user out on this device

389
00:12:58,326 --> 0:12:59,746
and optionally guide them to

390
00:12:59,746 --> 0:13:00,566
sign back in again.

391
00:12:59,746 --> 0:13:00,566
sign back in again.

392
00:13:03,046 --> 0:13:04,236
Now the user has established the

393
00:13:04,236 --> 0:13:05,266
relationship with your app,

394
00:13:05,406 --> 0:13:06,096
they're using the app, they

395
00:13:06,096 --> 0:13:06,836
create an account.

396
00:13:07,146 --> 0:13:08,396
Inevitably they'll get another

397
00:13:08,396 --> 0:13:09,856
device and they'll want to use

398
00:13:09,856 --> 0:13:10,496
your app again.

399
00:13:11,266 --> 0:13:12,546
Let's talk about that and how

400
00:13:12,546 --> 0:13:13,566
Sign In with Apple helps you

401
00:13:13,566 --> 0:13:13,766
there.

402
00:13:14,776 --> 0:13:15,796
When a user comes back to your

403
00:13:15,796 --> 0:13:18,616
app on a new device, they will

404
00:13:18,616 --> 0:13:19,686
get a one tap sign in

405
00:13:19,686 --> 0:13:20,296
experience.

406
00:13:21,556 --> 0:13:22,736
After a quick FaceID check,

407
00:13:23,046 --> 0:13:25,046
they're back into your app.

408
00:13:28,136 --> 0:13:29,856
In addition to that, we know you

409
00:13:29,856 --> 0:13:30,876
have existing accounts in your

410
00:13:30,876 --> 0:13:31,446
systems.

411
00:13:32,216 --> 0:13:33,866
So now we support iCloud

412
00:13:33,866 --> 0:13:35,256
Keychain passwords through the

413
00:13:35,256 --> 0:13:36,096
same API.

414
00:13:36,586 --> 0:13:37,236
You should request

415
00:13:37,236 --> 0:13:38,376
authentication with both Apple

416
00:13:38,376 --> 0:13:39,776
ID and iCloud Keychain requests.

417
00:13:40,516 --> 0:13:41,476
The user will be offered to

418
00:13:41,476 --> 0:13:42,796
continue using their existing

419
00:13:42,796 --> 0:13:44,426
credential, whichever they have.

420
00:13:45,306 --> 0:13:46,676
And if an error is returned,

421
00:13:47,116 --> 0:13:48,466
show your regular sign-in flows.

422
00:13:49,256 --> 0:13:50,966
For best user experience, your

423
00:13:51,266 --> 0:13:52,426
app should call into this

424
00:13:52,426 --> 0:13:54,686
startup function if it does not

425
00:13:54,686 --> 0:13:55,936
have an existing local account.

426
00:13:57,186 --> 0:13:58,286
So let's look at how easy it is

427
00:13:58,286 --> 0:13:58,976
to implement this.

428
00:14:03,046 --> 0:14:05,136
First, initialize a request

429
00:14:05,136 --> 0:14:07,816
array with an Apple ID

430
00:14:08,116 --> 0:14:10,476
authorization request and an

431
00:14:10,476 --> 0:14:11,626
Apple ID password request.

432
00:14:13,046 --> 0:14:13,396
That's it.

433
00:14:13,596 --> 0:14:14,686
It's that simple.

434
00:14:15,436 --> 0:14:17,826
Pass the request array and

435
00:14:17,826 --> 0:14:18,976
perform the request.

436
00:14:22,276 --> 0:14:23,516
If an existing Sign In with

437
00:14:23,516 --> 0:14:25,036
Apple connection exists, an

438
00:14:25,036 --> 0:14:26,216
AppleIDCredential will be

439
00:14:26,216 --> 0:14:27,726
returned to your app.

440
00:14:29,666 --> 0:14:31,606
If the user has a stored iCloud

441
00:14:31,606 --> 0:14:33,346
Keychain password, that

442
00:14:33,346 --> 0:14:34,526
credential will be returned to

443
00:14:34,526 --> 0:14:35,426
your app.

444
00:14:35,646 --> 0:14:36,646
You should use the credential

445
00:14:36,646 --> 0:14:38,126
that you get from this API to

446
00:14:38,126 --> 0:14:38,936
sign the user in.

447
00:14:39,516 --> 0:14:41,696
If the user has no existing

448
00:14:41,696 --> 0:14:43,526
credentials, the API will return

449
00:14:43,526 --> 0:14:44,666
an error immediately and you

450
00:14:44,666 --> 0:14:46,006
should show your standard login

451
00:14:46,006 --> 0:14:46,326
flows.

452
00:14:47,876 --> 0:14:49,316
By performing these requests on

453
00:14:49,316 --> 0:14:51,766
startup, you will prevent

454
00:14:51,766 --> 0:14:53,006
account duplication within your

455
00:14:53,006 --> 0:14:55,436
systems and streamline the user

456
00:14:55,436 --> 0:14:56,676
experience of getting back into

457
00:14:56,676 --> 0:14:57,816
your app and start to use it.

458
00:15:00,276 --> 0:15:01,706
Now I'd like to call Jonathan

459
00:15:01,706 --> 0:15:03,396
onstage to demo how easy it is

460
00:15:03,396 --> 0:15:04,596
to build this.

461
00:15:05,516 --> 0:15:08,646
[ Applause ]

462
00:15:09,146 --> 0:15:09,646
&gt;&gt; Thanks, Dima.

463
00:15:09,646 --> 0:15:10,766
Good morning, everyone.

464
00:15:11,856 --> 0:15:13,116
Sign In with Apple simplifies

465
00:15:13,116 --> 0:15:14,636
how users create an account or

466
00:15:14,636 --> 0:15:15,866
sign into an app while

467
00:15:15,866 --> 0:15:17,026
maintaining strong account

468
00:15:17,026 --> 0:15:17,486
security.

469
00:15:18,226 --> 0:15:19,696
Password autofill and automatic

470
00:15:19,696 --> 0:15:21,126
strong passwords enables you to

471
00:15:21,126 --> 0:15:22,126
do some of this already.

472
00:15:22,936 --> 0:15:24,416
Sign In with Apple improves upon

473
00:15:24,416 --> 0:15:25,656
them further and you can

474
00:15:25,656 --> 0:15:27,066
integrate with password autofill

475
00:15:27,066 --> 0:15:29,046
passwords using the same native

476
00:15:29,046 --> 0:15:30,596
API as Sign In with Apple.

477
00:15:30,596 --> 0:15:32,616
I'm going to take you through

478
00:15:32,676 --> 0:15:34,556
three topics to get your users

479
00:15:34,556 --> 0:15:36,416
signed into your app using their

480
00:15:36,416 --> 0:15:36,996
Apple ID.

481
00:15:38,196 --> 0:15:39,606
First, I'll add the Sign In with

482
00:15:39,606 --> 0:15:41,146
Apple button to a login form.

483
00:15:41,906 --> 0:15:43,146
Then I'm going to show you how

484
00:15:43,146 --> 0:15:44,576
to implement the Quick Sign In

485
00:15:44,576 --> 0:15:46,826
flow which allows users to sign

486
00:15:46,826 --> 0:15:49,366
into existing credentials using

487
00:15:49,366 --> 0:15:49,876
just one tap.

488
00:15:50,696 --> 0:15:52,306
Last, I'll show you how to check

489
00:15:52,346 --> 0:15:54,296
the credential status of a user

490
00:15:54,326 --> 0:15:56,446
identifier after app launch to

491
00:15:56,446 --> 0:15:57,836
ensure your users are properly

492
00:15:57,836 --> 0:15:58,936
signed in.

493
00:16:00,536 --> 0:16:02,916
To show you all this, I have a

494
00:16:02,916 --> 0:16:03,336
test app.

495
00:16:03,476 --> 0:16:04,106
It's called Juice.

496
00:16:05,376 --> 0:16:06,746
Here you can see a typical login

497
00:16:06,746 --> 0:16:07,876
form with the email and

498
00:16:07,876 --> 0:16:08,286
password.

499
00:16:09,566 --> 0:16:10,246
We're going to add another

500
00:16:10,246 --> 0:16:11,886
option below it, Sign In with

501
00:16:11,886 --> 0:16:12,136
Apple.

502
00:16:13,666 --> 0:16:14,366
So let's get going.

503
00:16:15,146 --> 0:16:16,496
We have one prerequisite to

504
00:16:16,496 --> 0:16:17,836
fulfill in our project settings

505
00:16:18,076 --> 0:16:19,236
and that's to add the Sign In

506
00:16:19,236 --> 0:16:20,306
with Apple capability.

507
00:16:23,376 --> 0:16:24,976
So in your project settings,

508
00:16:25,096 --> 0:16:25,796
you'll want to select your

509
00:16:25,796 --> 0:16:27,876
application and go to the Sign

510
00:16:27,876 --> 0:16:29,176
In and Capabilities section.

511
00:16:29,966 --> 0:16:31,336
I've already added the Sign In

512
00:16:31,336 --> 0:16:32,686
with Apple capability here.

513
00:16:32,686 --> 0:16:35,786
To add it in your app, go ahead

514
00:16:35,786 --> 0:16:36,916
and click on the Capability

515
00:16:36,916 --> 0:16:38,246
button and then search for Sign

516
00:16:38,246 --> 0:16:38,776
In with Apple.

517
00:16:41,046 --> 0:16:42,446
When you do this, Xcode is going

518
00:16:42,446 --> 0:16:43,766
to add the appropriate entry

519
00:16:43,766 --> 0:16:44,866
into your app's entitlement

520
00:16:44,866 --> 0:16:45,176
file.

521
00:16:46,306 --> 0:16:47,576
This will then check that you've

522
00:16:47,576 --> 0:16:49,006
added the Sign In with Apple

523
00:16:49,006 --> 0:16:51,096
capability to your Apple ID in

524
00:16:51,096 --> 0:16:51,906
the Developer Portal.

525
00:16:55,066 --> 0:16:56,296
If you haven't done so already,

526
00:16:56,446 --> 0:16:57,836
you'll want to go ahead and sign

527
00:16:57,836 --> 0:16:59,336
into the Developer Portal and

528
00:16:59,336 --> 0:17:00,336
make sure that you've added this

529
00:16:59,336 --> 0:17:00,336
make sure that you've added this

530
00:17:00,336 --> 0:17:00,906
capability.

531
00:17:06,346 --> 0:17:07,536
So while here, I'd like to

532
00:17:07,536 --> 0:17:09,175
highlight the Associated Domains

533
00:17:09,215 --> 0:17:10,626
Capability seen over here.

534
00:17:11,955 --> 0:17:13,396
This will make sure that you get

535
00:17:13,435 --> 0:17:15,576
passwords back in your

536
00:17:15,576 --> 0:17:17,215
credential and presented to the

537
00:17:17,215 --> 0:17:18,596
user when you make an

538
00:17:18,596 --> 0:17:20,476
ASAuthorizationPassword request.

539
00:17:21,016 --> 0:17:22,086
I'll show you how to add one of

540
00:17:22,086 --> 0:17:23,076
those requests later in the

541
00:17:23,076 --> 0:17:23,366
demo.

542
00:17:24,726 --> 0:17:25,836
If you want your password

543
00:17:25,836 --> 0:17:27,695
request to provide exactly the

544
00:17:27,695 --> 0:17:29,406
right credentials, refer to the

545
00:17:29,406 --> 0:17:32,176
2017 session Password Autofill

546
00:17:32,176 --> 0:17:34,306
for Apps, as well as Thursday's

547
00:17:34,306 --> 0:17:35,766
session What's New in

548
00:17:35,766 --> 0:17:36,506
Authentication.

549
00:17:37,656 --> 0:17:38,646
So I'm going to head back to

550
00:17:38,646 --> 0:17:40,556
Xcode and we're going to take a

551
00:17:40,556 --> 0:17:41,926
look at the Juice app.

552
00:17:45,046 --> 0:17:45,976
As you can see, this is just a

553
00:17:45,976 --> 0:17:48,106
simple demo app to highlight

554
00:17:48,106 --> 0:17:49,246
some of the key features of this

555
00:17:49,246 --> 0:17:49,556
API.

556
00:17:50,996 --> 0:17:52,816
Below this or label I have a

557
00:17:52,816 --> 0:17:55,176
Stack View that is called Login

558
00:17:55,176 --> 0:17:56,076
Provider Stack View.

559
00:17:57,106 --> 0:17:58,256
This is where we're going to add

560
00:17:58,256 --> 0:17:59,926
the Sign In with Apple button.

561
00:18:02,516 --> 0:18:03,836
Adding the Sign In with Apple

562
00:18:03,836 --> 0:18:05,226
button will be accomplished in

563
00:18:05,226 --> 0:18:06,046
three steps.

564
00:18:06,686 --> 0:18:08,356
First, I'll add the Sign In with

565
00:18:08,356 --> 0:18:09,606
Apple button to our Provider

566
00:18:09,606 --> 0:18:10,086
Stack View.

567
00:18:10,836 --> 0:18:12,236
Then I'm going to define a

568
00:18:12,236 --> 0:18:13,456
function that will create and

569
00:18:13,456 --> 0:18:15,126
perform the request when the

570
00:18:15,126 --> 0:18:15,776
button is tapped.

571
00:18:15,776 --> 0:18:18,146
And then last, we'll adopt the

572
00:18:18,146 --> 0:18:19,626
necessary authentication

573
00:18:19,626 --> 0:18:21,026
services protocols which will

574
00:18:21,026 --> 0:18:22,166
provide us with results.

575
00:18:23,336 --> 0:18:25,216
So let's get started by adding

576
00:18:25,216 --> 0:18:26,456
the Sign In with Apple button to

577
00:18:26,456 --> 0:18:28,376
our UI and to do that let's take

578
00:18:28,376 --> 0:18:28,726
a look at the

579
00:18:28,726 --> 0:18:30,216
LoginViewController Swift file.

580
00:18:36,046 --> 0:18:37,336
So we'll be working with the

581
00:18:37,336 --> 0:18:38,886
AuthenticationServices module,

582
00:18:38,886 --> 0:18:40,076
so we'll go ahead and import

583
00:18:40,076 --> 0:18:41,116
that here.

584
00:18:54,076 --> 0:18:56,406
So here I've defined a function

585
00:18:56,656 --> 0:18:58,296
called setupProviderLoginView,

586
00:18:58,956 --> 0:19:00,406
and it's initializing the

587
00:18:58,956 --> 0:19:00,406
and it's initializing the

588
00:19:00,406 --> 0:19:02,616
ASAuthorizationAppleIDButton.

589
00:19:03,236 --> 0:19:04,126
It's then adding the

590
00:19:04,126 --> 0:19:05,606
handleAuthorizationAppleID

591
00:19:05,606 --> 0:19:07,336
ButtonPress function that I've

592
00:19:07,336 --> 0:19:08,856
stubbed out over here as its

593
00:19:08,856 --> 0:19:09,276
action.

594
00:19:10,026 --> 0:19:12,146
And then I add the button to the

595
00:19:12,146 --> 0:19:14,056
loginProviderStackView which

596
00:19:14,056 --> 0:19:16,496
will then show it in our UI.

597
00:19:16,496 --> 0:19:18,666
Just above, I'm overriding the

598
00:19:18,666 --> 0:19:20,166
viewDidLoad function so that

599
00:19:20,166 --> 0:19:21,966
this way we'll go ahead and call

600
00:19:21,966 --> 0:19:23,536
setupProviderLoginView and that

601
00:19:23,536 --> 0:19:24,036
will get added.

602
00:19:24,616 --> 0:19:25,786
So I'll go ahead and run the

603
00:19:26,616 --> 0:19:26,686
app.

604
00:19:35,136 --> 0:19:36,566
And great, the button is now

605
00:19:36,566 --> 0:19:37,276
visible in our UI.

606
00:19:37,276 --> 0:19:39,246
But it's not really doing

607
00:19:39,246 --> 0:19:41,246
anything, so let's jump to step

608
00:19:41,246 --> 0:19:42,886
two which is define the action

609
00:19:42,886 --> 0:19:43,426
for our button.

610
00:19:54,066 --> 0:19:55,026
All right, let's talk about what

611
00:19:55,026 --> 0:19:57,646
this function is doing.

612
00:19:57,866 --> 0:19:59,606
So what we're doing is we're

613
00:19:59,606 --> 0:20:00,796
initializing an

614
00:19:59,606 --> 0:20:00,796
initializing an

615
00:20:00,796 --> 0:20:02,496
ASAuthorizationAppleID request

616
00:20:03,166 --> 0:20:05,606
using the AppleIDProvider and

617
00:20:05,606 --> 0:20:07,266
then we're setting its

618
00:20:07,266 --> 0:20:10,236
requestedScopes property to an

619
00:20:10,236 --> 0:20:11,666
array that contains the full

620
00:20:11,666 --> 0:20:13,826
name and email scope.

621
00:20:19,046 --> 0:20:19,846
This part is critical.

622
00:20:20,316 --> 0:20:21,636
The user will be asked to share

623
00:20:21,636 --> 0:20:23,286
information depending on what

624
00:20:23,286 --> 0:20:24,106
scopes you set here.

625
00:20:24,356 --> 0:20:26,456
The information is then returned

626
00:20:26,456 --> 0:20:27,816
to your Apple ID Credential --

627
00:20:27,816 --> 0:20:30,316
in your Apple ID Credential.

628
00:20:30,876 --> 0:20:32,446
You should only request what you

629
00:20:32,526 --> 0:20:33,366
actually need.

630
00:20:34,296 --> 0:20:35,466
So let's go back to our button's

631
00:20:35,466 --> 0:20:35,766
action.

632
00:20:39,046 --> 0:20:40,336
So we initialize a controller

633
00:20:41,856 --> 0:20:43,636
using the request that I've

634
00:20:43,636 --> 0:20:45,306
inserted into an array, and then

635
00:20:45,306 --> 0:20:46,426
we set the delegate and

636
00:20:46,426 --> 0:20:48,006
presentationContextProvider to

637
00:20:48,006 --> 0:20:48,296
self.

638
00:20:49,006 --> 0:20:50,446
We then call performRequest.

639
00:20:57,066 --> 0:20:57,916
So now that we've defined the

640
00:20:57,916 --> 0:20:59,016
action, let's go ahead and run

641
00:20:59,016 --> 0:20:59,326
the app.

642
00:21:03,126 --> 0:21:04,056
Tap the Sign In with Apple

643
00:21:04,056 --> 0:21:04,356
button.

644
00:21:07,256 --> 0:21:08,616
And as you can see, the UI is

645
00:21:08,616 --> 0:21:10,216
asking for the requested scopes

646
00:21:10,576 --> 0:21:12,366
which we set in our request.

647
00:21:15,316 --> 0:21:17,156
I'm going to cancel for now.

648
00:21:20,046 --> 0:21:21,096
So remember this delegate in the

649
00:21:21,096 --> 0:21:22,626
presentationContextProvider?

650
00:21:23,966 --> 0:21:25,156
We're going to have to formally

651
00:21:25,156 --> 0:21:26,666
adopt the authenticationServices

652
00:21:26,666 --> 0:21:28,276
protocol that's required for

653
00:21:29,006 --> 0:21:29,126
this.

654
00:21:29,696 --> 0:21:31,276
I stubbed it out below.

655
00:21:34,236 --> 0:21:35,936
So the ASAuthorizationController

656
00:21:35,936 --> 0:21:38,126
delegate has two functions: one

657
00:21:38,126 --> 0:21:40,076
that returns an authorization

658
00:21:40,156 --> 0:21:41,596
and one that returns an error.

659
00:21:45,056 --> 0:21:47,976
Let's go ahead and we'll define

660
00:21:51,026 --> 0:21:52,416
AuthorizationController

661
00:21:52,416 --> 0:21:53,716
didCompleteWithAuthorization.

662
00:21:54,446 --> 0:21:57,086
So what we're doing here is

663
00:21:57,086 --> 0:21:58,326
we're checking the authorization

664
00:21:58,326 --> 0:21:58,986
that comes back.

665
00:21:59,456 --> 0:22:00,966
We'll check the credential of

666
00:21:59,456 --> 0:22:00,966
We'll check the credential of

667
00:22:00,966 --> 0:22:01,666
the authorization.

668
00:22:01,666 --> 0:22:03,586
And then in the case in which

669
00:22:03,586 --> 0:22:06,096
it's an appleIdCredential, we're

670
00:22:06,096 --> 0:22:07,536
going to set a constant user

671
00:22:07,536 --> 0:22:09,876
identifier to the user property

672
00:22:09,876 --> 0:22:10,526
of the credential.

673
00:22:11,676 --> 0:22:13,726
For demo purposes, we then save

674
00:22:14,306 --> 0:22:15,696
the user identifier in the

675
00:22:15,696 --> 0:22:17,156
keychain so we can use it later.

676
00:22:17,816 --> 0:22:19,496
I'll also have the

677
00:22:19,496 --> 0:22:22,436
ResultViewController that will

678
00:22:22,556 --> 0:22:23,646
go ahead and take care of some

679
00:22:23,646 --> 0:22:25,036
of the boilerplate of handling

680
00:22:25,036 --> 0:22:26,706
some of the properties of the

681
00:22:26,706 --> 0:22:27,646
appleIdCredential.

682
00:22:35,046 --> 0:22:38,176
So just below this, just below

683
00:22:38,176 --> 0:22:39,926
what we've defined, we have the

684
00:22:39,926 --> 0:22:41,426
didCompleteWithError function

685
00:22:41,536 --> 0:22:43,546
and this will get called in the

686
00:22:43,546 --> 0:22:45,286
case in which the flow doesn't

687
00:22:45,286 --> 0:22:46,696
complete or there is no

688
00:22:46,696 --> 0:22:47,156
credentials.

689
00:22:50,326 --> 0:22:51,576
Lastly, we have one more

690
00:22:51,576 --> 0:22:52,476
protocol and it's

691
00:22:52,786 --> 0:22:54,436
ASAuthorizationController

692
00:22:54,476 --> 0:22:56,226
PresentationContextProviding.

693
00:22:57,286 --> 0:22:58,326
This defines a function

694
00:22:58,556 --> 0:22:59,636
presentationAnchor for

695
00:22:59,636 --> 0:23:00,136
controller.

696
00:22:59,636 --> 0:23:00,136
controller.

697
00:23:00,956 --> 0:23:03,096
And what this requires us to do

698
00:23:03,096 --> 0:23:04,646
is return the window in which

699
00:23:04,686 --> 0:23:05,726
we'd like Authentication

700
00:23:05,726 --> 0:23:08,246
Services to display the UI.

701
00:23:09,096 --> 0:23:10,976
So let's run the app.

702
00:23:17,046 --> 0:23:21,856
Tap the button and share email.

703
00:23:26,256 --> 0:23:27,506
And authenticate with just one

704
00:23:27,506 --> 0:23:27,806
tap.

705
00:23:32,046 --> 0:23:33,176
So the service in here seems to

706
00:23:33,176 --> 0:23:34,406
be giving me a bit of a problem,

707
00:23:34,406 --> 0:23:35,686
but I've got a backup video that

708
00:23:35,686 --> 0:23:36,956
will show you what is supposed

709
00:23:36,956 --> 0:23:37,326
to happen.

710
00:23:45,046 --> 0:23:45,616
So here we are.

711
00:23:46,686 --> 0:23:50,006
We are sharing the email and

712
00:23:50,006 --> 0:23:52,136
then the ResultViewController

713
00:23:52,136 --> 0:23:53,706
will then display the results

714
00:23:54,426 --> 0:23:55,116
right there.

715
00:23:55,286 --> 0:23:56,546
And as you can see, we have a

716
00:23:56,546 --> 0:23:58,466
user identifier, the full name

717
00:23:58,466 --> 0:23:59,436
and email address.

718
00:24:02,516 --> 0:24:08,976
[ Applause ]

719
00:24:09,476 --> 0:24:11,576
Okay, well, actually it looks

720
00:24:11,576 --> 0:24:11,976
like this has worked.

721
00:24:19,046 --> 0:24:19,976
Okay, there we go.

722
00:24:20,516 --> 0:24:27,686
[ Applause ]

723
00:24:28,186 --> 0:24:29,806
All right, so let's get back on

724
00:24:29,806 --> 0:24:30,186
topic.

725
00:24:30,676 --> 0:24:32,606
So to recap, we've added a Sign

726
00:24:32,606 --> 0:24:33,766
In with Apple button to our UI,

727
00:24:34,306 --> 0:24:36,266
we defined the button's action

728
00:24:36,606 --> 0:24:38,516
and the required functions of

729
00:24:38,516 --> 0:24:39,716
the authentication services

730
00:24:39,716 --> 0:24:41,576
protocol that return results and

731
00:24:41,576 --> 0:24:43,256
specify where UI should be

732
00:24:43,256 --> 0:24:43,546
shown.

733
00:24:46,046 --> 0:24:46,926
So now that we've covered

734
00:24:46,926 --> 0:24:48,706
account creation with the Sign

735
00:24:48,706 --> 0:24:50,246
In with Apple button, let's work

736
00:24:50,246 --> 0:24:51,436
on getting our users signed in

737
00:24:51,466 --> 0:24:51,976
quickly.

738
00:24:52,496 --> 0:24:54,306
To do this, we'll define a

739
00:24:54,306 --> 0:24:55,766
function that will display UI to

740
00:24:55,816 --> 0:24:57,566
our users in a case in which

741
00:24:57,566 --> 0:24:58,476
they have an existing

742
00:24:58,476 --> 0:24:58,866
credential.

743
00:24:59,766 --> 0:25:01,716
So this can be either an AppleID

744
00:24:59,766 --> 0:25:01,716
So this can be either an AppleID

745
00:25:01,986 --> 0:25:03,456
or an iCloud Keychain password

746
00:25:03,786 --> 0:25:05,356
using the app's authorized

747
00:25:05,356 --> 0:25:05,776
domains.

748
00:25:14,406 --> 0:25:16,296
So here I'm defining the

749
00:25:16,366 --> 0:25:18,086
performExistingAccountSetup

750
00:25:18,086 --> 0:25:19,766
Flows function.

751
00:25:19,766 --> 0:25:22,136
So here we have an array that

752
00:25:22,136 --> 0:25:23,806
contains both an Apple ID

753
00:25:23,806 --> 0:25:25,916
request and a password request

754
00:25:26,056 --> 0:25:27,876
using the respective providers.

755
00:25:28,416 --> 0:25:30,746
We then initialize an

756
00:25:30,746 --> 0:25:32,776
authorization controller using

757
00:25:32,776 --> 0:25:34,676
those requests, set the delegate

758
00:25:34,846 --> 0:25:35,086
and the

759
00:25:35,086 --> 0:25:37,406
presentationContextProvider like

760
00:25:37,406 --> 0:25:38,776
we did before, and then call

761
00:25:38,776 --> 0:25:39,576
performRequest.

762
00:25:40,696 --> 0:25:42,096
So we've added one more type of

763
00:25:42,096 --> 0:25:43,556
credential request to our

764
00:25:43,556 --> 0:25:44,796
controller and that is the

765
00:25:44,846 --> 0:25:45,686
password request.

766
00:25:46,596 --> 0:25:48,096
We will want to handle this type

767
00:25:48,096 --> 0:25:49,786
of result in our delegate, so

768
00:25:49,786 --> 0:25:50,846
let's go ahead and do that now.

769
00:26:01,296 --> 0:26:02,966
So we're setting a case for the

770
00:26:02,966 --> 0:26:04,256
ASPasswordCredential.

771
00:26:04,886 --> 0:26:07,326
So in this case, the

772
00:26:07,326 --> 0:26:10,196
ASPasswordCredential has a user

773
00:26:10,196 --> 0:26:11,386
and a password property.

774
00:26:12,216 --> 0:26:13,166
In this case, when it gets

775
00:26:13,166 --> 0:26:14,576
returned to you, you'll want to

776
00:26:14,576 --> 0:26:15,636
go ahead and authenticate

777
00:26:15,636 --> 0:26:16,906
against your servers and you

778
00:26:16,906 --> 0:26:17,976
don't even need to show any UI

779
00:26:17,976 --> 0:26:19,076
to your users.

780
00:26:19,626 --> 0:26:22,116
So there's one last step and

781
00:26:22,116 --> 0:26:23,446
that's to actually call the

782
00:26:23,446 --> 0:26:24,976
performExistingAccountSetup

783
00:26:24,976 --> 0:26:25,676
Flows function.

784
00:26:28,216 --> 0:26:29,126
I'm going to head back up to the

785
00:26:29,126 --> 0:26:29,466
class.

786
00:26:33,326 --> 0:26:34,436
I'm going to override

787
00:26:34,506 --> 0:26:35,736
viewDidAppear to call

788
00:26:35,736 --> 0:26:37,296
performExistingAccountSetup

789
00:26:37,836 --> 0:26:37,976
Flows.

790
00:26:44,216 --> 0:26:45,746
Let's run the app.

791
00:26:55,116 --> 0:26:56,916
And as you can see, the user is

792
00:26:56,916 --> 0:26:58,336
presented with existing

793
00:26:58,336 --> 0:27:00,396
credentials when we show the

794
00:26:58,336 --> 0:27:00,396
credentials when we show the

795
00:27:00,396 --> 0:27:01,686
loginViewController.

796
00:27:02,896 --> 0:27:04,096
That's our QuickSigninFlow.

797
00:27:04,946 --> 0:27:06,346
So we've just implemented the

798
00:27:06,346 --> 0:27:08,186
QuickSigninFlow, so let's move

799
00:27:08,186 --> 0:27:09,626
on to our last topic which is

800
00:27:09,686 --> 0:27:10,816
checking the credential status

801
00:27:10,816 --> 0:27:12,486
of an AppleID user identifier.

802
00:27:16,046 --> 0:27:17,116
Earlier in this demo we saved

803
00:27:17,116 --> 0:27:18,176
the user identifier to the

804
00:27:18,176 --> 0:27:19,506
keychain during account

805
00:27:19,506 --> 0:27:19,976
creation.

806
00:27:20,806 --> 0:27:22,666
Using this identifier, we can

807
00:27:22,666 --> 0:27:23,956
check the state of the sign in

808
00:27:24,236 --> 0:27:25,386
to ensure that our user is

809
00:27:25,386 --> 0:27:26,396
properly authenticated.

810
00:27:26,876 --> 0:27:27,806
We'll do this in our

811
00:27:27,806 --> 0:27:28,396
AppDelegate.

812
00:27:28,936 --> 0:27:30,576
And I head over to the

813
00:27:30,576 --> 0:27:31,386
AppDelegate file.

814
00:27:35,186 --> 0:27:36,946
And I'm going to remove this.

815
00:27:47,136 --> 0:27:49,066
So first we're checking to see

816
00:27:49,066 --> 0:27:50,636
if the keychain has the user

817
00:27:50,636 --> 0:27:51,886
identifier in it.

818
00:27:52,116 --> 0:27:53,106
If it does, we're going to

819
00:27:53,106 --> 0:27:53,946
initialize

820
00:27:53,946 --> 0:27:55,916
ASAuthorizationAppleIDProvider,

821
00:27:55,966 --> 0:27:57,056
and then using the

822
00:27:57,056 --> 0:27:58,916
AppleIDProvider we'll call

823
00:27:58,916 --> 0:28:00,366
credentials a state passing the

824
00:27:58,916 --> 0:28:00,366
credentials a state passing the

825
00:28:00,366 --> 0:28:01,246
user identifier.

826
00:28:04,046 --> 0:28:05,406
So we're going to get three

827
00:28:05,406 --> 0:28:06,186
different -- we have three

828
00:28:06,186 --> 0:28:07,206
different types of cases.

829
00:28:07,806 --> 0:28:09,976
One is authorized and in this

830
00:28:09,976 --> 0:28:11,476
case you can just assume that

831
00:28:11,596 --> 0:28:12,756
the user is properly

832
00:28:12,756 --> 0:28:15,216
authenticated and you can

833
00:28:15,216 --> 0:28:16,406
continue your normal app

834
00:28:16,406 --> 0:28:17,106
operations.

835
00:28:17,986 --> 0:28:18,786
In the case in which it's

836
00:28:18,786 --> 0:28:20,286
revoked, you want to call your

837
00:28:20,286 --> 0:28:22,716
existing sign out logic and then

838
00:28:22,716 --> 0:28:24,306
you can fall through to notFound

839
00:28:24,336 --> 0:28:25,736
case which is to show the

840
00:28:25,736 --> 0:28:26,796
LoginViewController.

841
00:28:26,886 --> 0:28:29,446
So I'm going to go ahead and run

842
00:28:29,446 --> 0:28:29,716
the app.

843
00:28:43,076 --> 0:28:44,336
And as you can see, the user

844
00:28:44,336 --> 0:28:45,606
identifier is presented in the

845
00:28:45,606 --> 0:28:47,906
ResultViewController because in

846
00:28:47,906 --> 0:28:49,516
this case the user is already

847
00:28:49,516 --> 0:28:50,056
authorized.

848
00:28:50,556 --> 0:28:51,866
The ResultViewController is the

849
00:28:51,866 --> 0:28:53,886
initial view controller in the

850
00:28:53,886 --> 0:28:54,386
storyboard.

851
00:28:54,656 --> 0:28:55,976
So that's it.

852
00:28:58,046 --> 0:28:58,846
Pretty easy, right?

853
00:28:59,516 --> 0:29:03,796
[ Applause ]

854
00:28:59,516 --> 0:29:03,796
[ Applause ]

855
00:29:04,296 --> 0:29:05,276
So I've just shown you how to

856
00:29:05,276 --> 0:29:06,466
add the Sign In with Apple

857
00:29:06,466 --> 0:29:08,146
button to your login form, how

858
00:29:08,146 --> 0:29:09,576
to implement a QuickSigninFlow

859
00:29:09,806 --> 0:29:10,896
to get users signed in with an

860
00:29:10,896 --> 0:29:12,626
existing credential, and then

861
00:29:12,946 --> 0:29:13,986
how to check the credential

862
00:29:13,986 --> 0:29:16,246
status using the user identifier

863
00:29:16,416 --> 0:29:17,456
to make sure users are

864
00:29:17,506 --> 0:29:18,786
authenticated with your app.

865
00:29:19,126 --> 0:29:20,316
With that, I'll hand it back

866
00:29:20,316 --> 0:29:21,506
over to Gokul who'll cover

867
00:29:21,506 --> 0:29:22,696
multiplatform topics.

868
00:29:22,946 --> 0:29:23,536
Gokul?

869
00:29:24,516 --> 0:29:29,666
[ Applause ]

870
00:29:30,166 --> 0:29:31,356
&gt;&gt; Thank you, Jonathan.

871
00:29:31,356 --> 0:29:33,006
We just saw Jonathan start with

872
00:29:33,006 --> 0:29:36,576
a test app, add a button, handle

873
00:29:36,576 --> 0:29:38,046
requests and responses and

874
00:29:38,106 --> 0:29:39,276
finally handle existing

875
00:29:39,276 --> 0:29:40,036
accounts.

876
00:29:40,716 --> 0:29:43,216
All easy to implement and a

877
00:29:43,276 --> 0:29:44,986
great experience for users.

878
00:29:45,146 --> 0:29:46,346
So that was a very quick demo.

879
00:29:47,296 --> 0:29:48,796
Let's talk about cross-platform.

880
00:29:49,386 --> 0:29:51,466
Cross-platform's important and

881
00:29:51,606 --> 0:29:54,606
it's enabled through a simple

882
00:29:54,726 --> 0:29:56,386
JavaScript library.

883
00:29:57,236 --> 0:29:59,216
Using this library, you can

884
00:29:59,216 --> 0:30:01,046
enable your users to sign in

885
00:29:59,216 --> 0:30:01,046
enable your users to sign in

886
00:30:01,446 --> 0:30:03,656
with Apple on any platform like

887
00:30:03,826 --> 0:30:05,256
Windows or Android.

888
00:30:05,846 --> 0:30:07,776
And clicking the familiar Sign

889
00:30:07,776 --> 0:30:10,036
In with Apple button will

890
00:30:10,036 --> 0:30:12,686
redirect to Apple where your

891
00:30:12,686 --> 0:30:15,576
user can enter the Apple ID and

892
00:30:15,576 --> 0:30:16,066
sign in.

893
00:30:17,036 --> 0:30:19,086
Once they sign in, it redirects

894
00:30:19,086 --> 0:30:19,436
back.

895
00:30:21,366 --> 0:30:23,206
Both the calls and information

896
00:30:23,206 --> 0:30:25,006
you receive back are very

897
00:30:25,006 --> 0:30:26,166
similar to the native API.

898
00:30:26,946 --> 0:30:29,426
You get the ID, the token or

899
00:30:29,426 --> 0:30:30,816
even the name or email if you

900
00:30:30,816 --> 0:30:31,236
request it.

901
00:30:32,356 --> 0:30:33,746
And once you get back the ID and

902
00:30:33,746 --> 0:30:36,526
the token, you can convert this

903
00:30:36,926 --> 0:30:41,086
to an app session in your app.

904
00:30:42,036 --> 0:30:45,236
Best of all, support for this is

905
00:30:45,236 --> 0:30:47,326
built right into Safari.

906
00:30:48,876 --> 0:30:51,736
So when your user clicks that

907
00:30:51,736 --> 0:30:54,966
button, Safari will bring up a

908
00:30:54,966 --> 0:30:56,866
native Apple Pay-like sheet.

909
00:30:57,716 --> 0:31:00,606
Your user can simply TouchID and

910
00:30:57,716 --> 0:31:00,606
Your user can simply TouchID and

911
00:31:00,606 --> 0:31:02,306
they're instantly signed in and

912
00:31:02,306 --> 0:31:04,466
using your website super-fast,

913
00:31:04,466 --> 0:31:06,116
and what a great experience.

914
00:31:06,536 --> 0:31:08,066
So it's built right into Safari.

915
00:31:09,976 --> 0:31:11,366
Integrating with a JavaScript

916
00:31:11,596 --> 0:31:13,976
library is just four easy steps.

917
00:31:17,056 --> 0:31:19,186
You start with including the

918
00:31:19,186 --> 0:31:21,916
JavaScript library in your HTML

919
00:31:21,966 --> 0:31:22,476
as shown.

920
00:31:24,256 --> 0:31:26,146
A simple div renders the button.

921
00:31:27,076 --> 0:31:28,506
You can style it with many

922
00:31:28,506 --> 0:31:30,556
parameters to customize the fit

923
00:31:30,556 --> 0:31:32,446
to your site.

924
00:31:33,176 --> 0:31:34,946
Configure it with parameters

925
00:31:35,096 --> 0:31:36,526
like whether you want name,

926
00:31:36,526 --> 0:31:39,946
email and your redirect URI.

927
00:31:42,046 --> 0:31:43,546
And finally, when the user

928
00:31:43,546 --> 0:31:45,516
completes sign in, the results

929
00:31:45,626 --> 0:31:47,896
are posted back to your redirect

930
00:31:47,896 --> 0:31:50,346
URI with form-encoded values.

931
00:31:51,346 --> 0:31:53,556
You validate the token, the auth

932
00:31:53,556 --> 0:31:55,396
code and convert it to an

933
00:31:55,396 --> 0:31:56,376
application session.

934
00:31:56,746 --> 0:31:58,806
And you decide how long you want

935
00:31:58,806 --> 0:31:59,466
the session to live.

936
00:31:59,556 --> 0:32:02,826
So that's a very quick look at

937
00:31:59,556 --> 0:32:02,826
So that's a very quick look at

938
00:32:02,826 --> 0:32:04,706
cross-platform support with

939
00:32:04,706 --> 0:32:05,946
JavaScript library.

940
00:32:08,046 --> 0:32:09,346
Finally, let's just go through

941
00:32:09,346 --> 0:32:11,346
some best practices to observe

942
00:32:11,816 --> 0:32:13,506
when integrating with Sign In

943
00:32:13,506 --> 0:32:13,926
with Apple.

944
00:32:16,146 --> 0:32:17,676
Here are some general guidelines

945
00:32:17,676 --> 0:32:18,296
to follow.

946
00:32:18,986 --> 0:32:20,166
As stated in the App Store

947
00:32:20,166 --> 0:32:22,286
guidelines, unless your app

948
00:32:22,286 --> 0:32:23,796
requires significant

949
00:32:23,866 --> 0:32:25,846
account-based features, let

950
00:32:25,846 --> 0:32:27,596
people use it without a login.

951
00:32:28,076 --> 0:32:30,186
For example, you can guide the

952
00:32:30,186 --> 0:32:32,326
user to sign in with Apple after

953
00:32:32,326 --> 0:32:33,916
they've made a purchase so you

954
00:32:34,336 --> 0:32:36,396
can tie their purchase to an

955
00:32:36,396 --> 0:32:38,606
account that they can easily get

956
00:32:39,126 --> 0:32:40,536
back to later.

957
00:32:40,536 --> 0:32:41,866
If you just need a unique

958
00:32:41,866 --> 0:32:43,746
identifier to identify the user,

959
00:32:44,316 --> 0:32:45,716
don't collect name or email.

960
00:32:46,756 --> 0:32:47,476
You don't need it.

961
00:32:48,356 --> 0:32:49,606
And if you do collect email

962
00:32:50,816 --> 0:32:52,366
through Sign In with Apple, make

963
00:32:52,366 --> 0:32:54,326
sure that you respect the user's

964
00:32:54,326 --> 0:32:54,916
choice.

965
00:32:57,156 --> 0:32:58,166
And here are some additional

966
00:32:58,166 --> 0:32:59,836
best practices to keep in mind

967
00:32:59,956 --> 0:33:01,366
when integrating with the API.

968
00:32:59,956 --> 0:33:01,366
when integrating with the API.

969
00:33:02,646 --> 0:33:04,606
When your app first starts up,

970
00:33:05,096 --> 0:33:07,026
use the API to check for

971
00:33:07,026 --> 0:33:08,146
existing accounts.

972
00:33:08,806 --> 0:33:10,826
This allows the user to quickly

973
00:33:10,826 --> 0:33:11,926
get going with an account they

974
00:33:11,926 --> 0:33:13,776
already have with your app,

975
00:33:14,306 --> 0:33:15,706
whether it's iCloud Keychain

976
00:33:16,196 --> 0:33:18,106
password or an existing Apple

977
00:33:18,106 --> 0:33:18,456
account.

978
00:33:19,086 --> 0:33:20,406
And you don't have any duplicate

979
00:33:20,406 --> 0:33:21,376
accounts in your app.

980
00:33:22,866 --> 0:33:24,896
Plan to provide the best

981
00:33:24,926 --> 0:33:27,966
experience for users that return

982
00:33:28,186 --> 0:33:29,196
real user indicator.

983
00:33:29,406 --> 0:33:32,096
If it returns unknown, treat

984
00:33:32,096 --> 0:33:33,446
them like you would any new

985
00:33:33,446 --> 0:33:34,376
account in your system.

986
00:33:34,966 --> 0:33:38,476
Use the Button API to draw the

987
00:33:38,476 --> 0:33:38,746
button.

988
00:33:40,376 --> 0:33:41,586
And when you draw the button

989
00:33:41,696 --> 0:33:43,866
with the API, wire it to the

990
00:33:43,896 --> 0:33:46,026
Apple ID Provider in your code.

991
00:33:47,466 --> 0:33:51,156
And finally, once users use Sign

992
00:33:51,156 --> 0:33:52,916
In with Apple, they will expect

993
00:33:52,916 --> 0:33:55,516
to see it on all platforms that

994
00:33:55,516 --> 0:33:56,186
your app is on.

995
00:33:56,576 --> 0:33:58,206
So implement it across all of

996
00:33:58,206 --> 0:33:58,916
your platforms.

997
00:34:00,166 --> 0:34:02,486
So that's a quick look at best

998
00:34:02,486 --> 0:34:03,226
practices.

999
00:34:03,496 --> 0:34:05,586
In summary, Sign In with Apple

1000
00:34:05,806 --> 0:34:07,906
is fast, easy account setup and

1001
00:34:07,906 --> 0:34:09,896
sign in for your app.

1002
00:34:10,286 --> 0:34:12,356
Streamlined, one-tap account

1003
00:34:12,356 --> 0:34:14,516
setup with no cumbersome forms.

1004
00:34:15,126 --> 0:34:16,735
Verified email address that

1005
00:34:16,735 --> 0:34:18,255
instantly works and you can use

1006
00:34:18,255 --> 0:34:19,505
for any communication.

1007
00:34:20,606 --> 0:34:22,556
Built-in security with no new

1008
00:34:22,556 --> 0:34:24,235
passwords and two-factor

1009
00:34:24,235 --> 0:34:25,536
authentication for every

1010
00:34:25,536 --> 0:34:25,886
account.

1011
00:34:26,886 --> 0:34:28,536
Real user indicator to help you

1012
00:34:28,536 --> 0:34:29,666
combat account fraud.

1013
00:34:29,666 --> 0:34:32,525
And cross-platform support so

1014
00:34:32,525 --> 0:34:34,646
your users can benefit from Sign

1015
00:34:34,646 --> 0:34:36,606
In with Apple on every platform

1016
00:34:36,656 --> 0:34:37,646
that your app is on.

1017
00:34:39,036 --> 0:34:41,466
Please join us at our lab at

1018
00:34:41,466 --> 0:34:43,085
10:00 where we're happy to

1019
00:34:43,085 --> 0:34:44,106
answer any questions you may

1020
00:34:44,106 --> 0:34:44,386
have.

1021
00:34:45,065 --> 0:34:46,156
There's more in the

1022
00:34:46,156 --> 0:34:47,126
authentication services

1023
00:34:47,126 --> 0:34:49,136
framework to help you help your

1024
00:34:49,136 --> 0:34:51,136
users with signing in and

1025
00:34:51,136 --> 0:34:52,286
dealing with their passwords.

1026
00:34:52,766 --> 0:34:53,775
See the What's New in

1027
00:34:53,775 --> 0:34:55,315
Authentication session tomorrow

1028
00:34:55,616 --> 0:34:56,196
to learn more.

1029
00:34:56,815 --> 0:34:58,416
And Sign In with Apple works

1030
00:34:58,536 --> 0:35:00,096
great with independent Watch

1031
00:34:58,536 --> 0:35:00,096
great with independent Watch

1032
00:35:00,096 --> 0:35:00,406
apps.

1033
00:35:00,776 --> 0:35:02,166
Please tune in to Independent

1034
00:35:02,166 --> 0:35:04,646
Watch Apps on the WWDC app to

1035
00:35:04,646 --> 0:35:05,096
learn more.

1036
00:35:06,406 --> 0:35:06,966
That's all.

1037
00:35:07,066 --> 0:35:07,926
Thank you for joining us.

1038
00:35:07,926 --> 0:35:09,196
Have a wonderful conference.

1039
00:35:09,526 --> 0:35:09,866
Thank you.

1040
00:35:10,016 --> 0:35:12,000
[ Applause ]
