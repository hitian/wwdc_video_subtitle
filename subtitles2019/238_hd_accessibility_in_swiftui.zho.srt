1
00:00:06,006 --> 0:00:09,409
SwiftUI中的辅助功能

2
00:00:09,476 --> 0:00:12,412
大家早上好 我是

3
00:00:12,479 --> 0:00:14,948
同我一起演示的是我同事

4
00:00:15,015 --> 0:00:16,750
我们都来自

5
00:00:18,452 --> 0:00:23,056
我相信大家都很兴奋 对于

6
00:00:23,390 --> 0:00:25,893
更好 更快 更易操作的app

7
00:00:26,994 --> 0:00:32,432
我对SwiftUI也很兴奋

8
00:00:32,499 --> 0:00:34,668
它的辅助能力

9
00:00:35,669 --> 0:00:40,207
今天我们向大家演示SwiftUI

10
00:00:40,274 --> 0:00:42,676
面向所有用户的app

11
00:00:45,179 --> 0:00:48,048
首先我们来快速了解一下

12
00:00:48,315 --> 0:00:51,618
什么是辅助功能

13
00:00:51,685 --> 0:00:52,719
在我们的平台

14
00:00:55,589 --> 0:01:01,728
然后我们讲述SwiftUI

15
00:00:55,589 --> 0:01:01,728
然后我们讲述SwiftUI

16
00:01:01,995 --> 0:01:02,996
更易操作

17
00:01:05,032 --> 0:01:09,136
John会完整地讲解辅助API

18
00:01:09,203 --> 0:01:10,571
就是今天的主题

19
00:01:11,104 --> 0:01:15,809
他还会带大家了解辅助树

20
00:01:15,876 --> 0:01:18,245
是SwiftUI在app中生成的

21
00:01:21,915 --> 0:01:23,717
那么首先开始介绍

22
00:01:24,852 --> 0:01:28,889
今天我们讲到辅助功能时

23
00:01:30,057 --> 0:01:35,195
各位都在app上投入了大量精力

24
00:01:35,262 --> 0:01:38,432
实用 有益 且令人愉悦

25
00:01:39,766 --> 0:01:43,804
做了这么多你一定希望

26
00:01:43,871 --> 0:01:46,907
潜在客户

27
00:01:48,008 --> 0:01:50,444
这就是辅助功能的意义

28
00:01:50,511 --> 0:01:54,314
它是为了让身患残障的客户

29
00:01:54,381 --> 0:01:56,617
享受你app的价值

30
00:01:57,684 --> 0:02:00,187
你也会收获更多开心的客户

31
00:01:57,684 --> 0:02:00,187
你也会收获更多开心的客户

32
00:02:01,555 --> 0:02:05,125
辅助功能特别有用

33
00:02:06,360 --> 0:02:11,231
在我们的各种设备上 如Mac、

34
00:02:11,798 --> 0:02:16,370
Apple的辅助技术

35
00:02:17,604 --> 0:02:22,276
它们为残障人士打通了更多可能

36
00:02:23,777 --> 0:02:27,748
这样的结果很大程度上

37
00:02:28,415 --> 0:02:30,751
没错

38
00:02:31,351 --> 0:02:34,488
但为了实现它

39
00:02:34,555 --> 0:02:35,489
更好用

40
00:02:39,393 --> 0:02:43,130
在残障人士与app交互时

41
00:02:43,197 --> 0:02:47,334
他们通常使用

42
00:02:48,068 --> 0:02:51,672
我们有太多这样的功能

43
00:02:52,306 --> 0:02:54,942
这里我们只讲其中一个旁白

44
00:02:57,077 --> 0:03:01,181
旁白是屏幕阅读器

45
00:02:57,077 --> 0:03:01,181
旁白是屏幕阅读器

46
00:03:01,615 --> 0:03:06,220
它是为了让低视力和失明的人

47
00:03:06,286 --> 0:03:08,222
不再需要看到屏幕

48
00:03:09,690 --> 0:03:12,192
它的工作就是读给你听

49
00:03:12,860 --> 0:03:15,495
旁白会带你逐个了解

50
00:03:15,762 --> 0:03:17,164
每次就一个元素

51
00:03:17,698 --> 0:03:21,635
播放相关的信息

52
00:03:21,969 --> 0:03:25,172
图片名称

53
00:03:26,440 --> 0:03:32,079
它还允许在iOS上用手势

54
00:03:32,145 --> 0:03:35,516
完成交互并触发相应动作

55
00:03:36,250 --> 0:03:39,253
现在演示的就是旁白

56
00:03:39,920 --> 0:03:43,457
旁白正读到这里

57
00:03:43,524 --> 0:03:44,625
右下角

58
00:03:46,860 --> 0:03:51,231
在这个长长的名单上

59
00:03:51,832 --> 0:03:53,534
第一个是

60
00:03:53,700 --> 0:03:56,436
我相信你们都已经

61
00:03:58,906 --> 0:04:01,275
第二 对 它很酷

62
00:03:58,906 --> 0:04:01,275
第二 对 它很酷

63
00:04:03,644 --> 0:04:05,679
第二个是全键盘访问

64
00:04:06,046 --> 0:04:09,349
这是今年全新的iOS功能

65
00:04:10,217 --> 0:04:14,388
全键盘访问让你

66
00:04:14,454 --> 0:04:15,989
只用一个键盘

67
00:04:17,690 --> 0:04:21,928
它能让你迅速灵活地

68
00:04:23,063 --> 0:04:26,500
我们相信这个功能

69
00:04:26,567 --> 0:04:28,402
不仅仅作为辅助功能

70
00:04:28,635 --> 0:04:32,573
而且能够满足对Apple

71
00:04:32,840 --> 0:04:34,842
在屏幕上移动 触发命令

72
00:04:36,243 --> 0:04:39,246
这是全键盘访问功能

73
00:04:39,813 --> 0:04:43,650
注意这个高亮的8键显示了

74
00:04:45,385 --> 0:04:49,323
这两个优秀的功能完美地

75
00:04:49,389 --> 0:04:51,158
不断在学习的东西

76
00:04:51,959 --> 0:04:56,129
辅助功能服务于所有人

77
00:04:56,763 --> 0:04:59,900
这就是为什么你多做一点

78
00:04:59,967 --> 0:05:01,435
就会有广泛的影响

79
00:04:59,967 --> 0:05:01,435
就会有广泛的影响

80
00:05:04,705 --> 0:05:09,977
我们的平台最好的一点

81
00:05:10,043 --> 0:05:13,647
大屏上显示的

82
00:05:13,714 --> 0:05:15,249
底层技术

83
00:05:15,983 --> 0:05:20,120
如果你的app能很好运行辅助功能

84
00:05:22,022 --> 0:05:25,092
所有这些功能最终都基于

85
00:05:25,158 --> 0:05:27,027
给我们平台

86
00:05:27,361 --> 0:05:30,230
信息越完整

87
00:05:31,031 --> 0:05:35,235
我们称之为

88
00:05:36,870 --> 0:05:38,972
究竟需要哪些信息呢

89
00:05:39,139 --> 0:05:43,043
就以这个计算器

90
00:05:43,277 --> 0:05:44,344
然后把它拆开

91
00:05:45,646 --> 0:05:49,049
app中的辅助功能UI

92
00:05:49,116 --> 0:05:51,585
包含多个辅助功能元素

93
00:05:52,119 --> 0:05:55,923
计算器中的每个视图

94
00:05:57,558 --> 0:06:00,627
这里的辅助功能元素

95
00:05:57,558 --> 0:06:00,627
这里的辅助功能元素

96
00:06:01,161 --> 0:06:03,363
现在我们单看其中一个

97
00:06:04,631 --> 0:06:08,168
这里有个X键在左边

98
00:06:08,235 --> 0:06:09,236
在右边

99
00:06:10,070 --> 0:06:12,472
注意它有一个标签

100
00:06:13,173 --> 0:06:16,643
所有元素都要配一个类似的标签

101
00:06:16,910 --> 0:06:18,745
知道他们正在app里做什么

102
00:06:19,947 --> 0:06:23,483
这里 计算器的开发者

103
00:06:23,550 --> 0:06:26,887
默认标签

104
00:06:28,222 --> 0:06:29,957
元素也分类型

105
00:06:30,390 --> 0:06:35,495
在iOS上的描述是trait

106
00:06:35,963 --> 0:06:37,331
类型是按键

107
00:06:38,232 --> 0:06:41,602
最后

108
00:06:42,169 --> 0:06:45,038
MacOS上为按键

109
00:06:45,472 --> 0:06:49,576
旁白用户可以使用这些动作

110
00:06:51,945 --> 0:06:53,614
再来看另外一个

111
00:06:54,181 --> 0:06:58,151
这是上方显示计算结果的地方

112
00:06:59,152 --> 0:07:02,322
开发者已经给它配了一个标签

113
00:06:59,152 --> 0:07:02,322
开发者已经给它配了一个标签

114
00:07:03,390 --> 0:07:07,828
它还显示了另一个重要信息

115
00:07:08,028 --> 0:07:10,163
就是现在显示的文本

116
00:07:11,532 --> 0:07:14,568
它没有默认动作

117
00:07:14,635 --> 0:07:15,636
这个元素互动

118
00:07:16,970 --> 0:07:21,141
默认动作不是唯一方法

119
00:07:21,208 --> 0:07:24,077
与app和其中的元素进行交互

120
00:07:24,678 --> 0:07:29,283
你可以添加自定义动作

121
00:07:29,883 --> 0:07:32,886
比如你可以给它添加

122
00:07:33,220 --> 0:07:34,621
就是清除显示

123
00:07:37,057 --> 0:07:40,427
以上就是计算器的辅助功能UI

124
00:07:41,161 --> 0:07:42,563
你的app也有

125
00:07:43,230 --> 0:07:45,566
许多辅助都是自动创建

126
00:07:45,632 --> 0:07:48,368
但你可以多做一点

127
00:07:50,437 --> 0:07:54,908
你会不断完善app的可视用户界面

128
00:07:55,676 --> 0:07:56,844
同样你也会

129
00:07:56,910 --> 0:07:58,745
完善你的辅助功能

130
00:07:58,812 --> 0:07:59,947
用户界面

131
00:08:00,948 --> 0:08:02,516
这里有三个关键点

132
00:08:02,583 --> 0:08:03,417
就是我们将要

133
00:08:03,483 --> 0:08:04,852
展示的内容

134
00:08:06,186 --> 0:08:08,155
首先你的辅助功能元素

135
00:08:08,222 --> 0:08:09,156
一定要

136
00:08:09,223 --> 0:08:10,057
易于理解

137
00:08:10,557 --> 0:08:11,658
它们要有合理的

138
00:08:11,725 --> 0:08:13,694
标签 值 和其他

139
00:08:13,760 --> 0:08:14,995
描述信息

140
00:08:15,162 --> 0:08:16,864
举个例子

141
00:08:16,930 --> 0:08:18,565
计算器更改了标签

142
00:08:18,632 --> 0:08:20,634
将X键对应乘以

143
00:08:20,701 --> 0:08:21,635
就更易于理解

144
00:08:22,135 --> 0:08:25,038
元素还应该

145
00:08:25,105 --> 0:08:25,939
可交互

146
00:08:26,406 --> 0:08:28,308
也就是说适当的默认

147
00:08:28,375 --> 0:08:30,277
动作和自定义动作

148
00:08:30,344 --> 0:08:31,512
要在需要时出现

149
00:08:32,212 --> 0:08:33,679
添加清楚的动作

150
00:08:33,746 --> 0:08:35,048
给主屏幕 如之前所说

151
00:08:35,115 --> 0:08:36,750
就是这样一个例子

152
00:08:37,985 --> 0:08:39,419
最后 元素应该

153
00:08:39,486 --> 0:08:40,687
可引导

154
00:08:41,288 --> 0:08:42,688
慎重考虑

155
00:08:42,756 --> 0:08:44,157
如何排序辅助功能

156
00:08:44,224 --> 0:08:45,792
元素并将它们按需分团

157
00:08:45,859 --> 0:08:47,694
会让你的app

158
00:08:47,761 --> 0:08:49,463
更好的使用

159
00:08:49,530 --> 0:08:50,797
辅助功能

160
00:08:51,331 --> 0:08:54,434
如果你有兴趣了解

161
00:08:54,501 --> 0:08:56,036
如何完成这些有趣的工作

162
00:08:56,103 --> 0:08:58,105
用AppKit或UIKit

163
00:08:58,172 --> 0:08:59,840
很棒的讲座给你

164
00:08:59,907 --> 0:09:00,741
本场

165
00:08:59,907 --> 0:09:00,741
本场

166
00:09:01,508 --> 0:09:03,076
今天的主题是

167
00:09:03,143 --> 0:09:06,513
SwiftUI

168
00:09:06,580 --> 0:09:09,183
在Apple我们始终深信

169
00:09:09,249 --> 0:09:11,118
辅助的重要性

170
00:09:11,185 --> 0:09:12,686
和辅助的力量

171
00:09:13,487 --> 0:09:14,721
因此我们所有人都

172
00:09:14,788 --> 0:09:15,989
十分努力地打造

173
00:09:16,056 --> 0:09:17,424
各种框架 让你们

174
00:09:17,591 --> 0:09:19,526
更轻松地使用app

175
00:09:19,593 --> 0:09:20,694
甚至自动化某些

176
00:09:20,761 --> 0:09:21,595
地方

177
00:09:22,629 --> 0:09:24,398
今天因为有高水平的

178
00:09:24,464 --> 0:09:26,400
描述性SwiftUI

179
00:09:26,466 --> 0:09:27,835
而且它能理解

180
00:09:27,901 --> 0:09:30,237
你的陈述 所以我们能

181
00:09:30,304 --> 0:09:31,839
将辅助功能自动化

182
00:09:31,905 --> 0:09:33,574
进入新的境界 用新的

183
00:09:33,640 --> 0:09:34,474
框架

184
00:09:35,209 --> 0:09:36,777
SwiftUI可以让app的

185
00:09:36,844 --> 0:09:39,379
默认设置更好用

186
00:09:39,446 --> 0:09:40,581
并为我们打下坚实的

187
00:09:40,647 --> 0:09:42,449
基础

188
00:09:42,516 --> 0:09:44,518
辅助功能 帮助你

189
00:09:44,585 --> 0:09:45,419
进步

190
00:09:47,588 --> 0:09:49,890
SwiftUI会生成

191
00:09:49,957 --> 0:09:51,458
辅助功能元素

192
00:09:51,525 --> 0:09:52,993
就像它会生成

193
00:09:53,060 --> 0:09:54,862
NSView和UIViews

194
00:09:55,762 --> 0:09:57,030
来看一个简单的

195
00:09:57,097 --> 0:09:57,965
SwiftUI代码

196
00:09:58,966 --> 0:10:00,300
它创建了一个垂直叠层

197
00:09:58,966 --> 0:10:00,300
它创建了一个垂直叠层

198
00:10:01,068 --> 0:10:03,670
这个层是一个按键

199
00:10:03,737 --> 0:10:05,372
它的前后是一些

200
00:10:05,439 --> 0:10:06,273
文本

201
00:10:08,342 --> 0:10:10,310
SwiftUI会创建三个

202
00:10:10,377 --> 0:10:11,879
辅助功能元素

203
00:10:11,945 --> 0:10:12,779
在这里

204
00:10:12,846 --> 0:10:14,314
两个文本各对应一个

205
00:10:14,381 --> 0:10:15,682
当然还有一个对应

206
00:10:15,749 --> 0:10:16,583
按键

207
00:10:17,451 --> 0:10:19,119
记住 辅助功能

208
00:10:19,186 --> 0:10:20,787
元素 在SwiftUI里

209
00:10:20,854 --> 0:10:23,590
不是UIViews

210
00:10:24,291 --> 0:10:26,493
而是SwiftUI自己的

211
00:10:26,560 --> 0:10:27,895
辅助功能元素

212
00:10:29,496 --> 0:10:31,064
我们所有人都努力确保

213
00:10:31,131 --> 0:10:32,833
SwiftUI的标准

214
00:10:32,900 --> 0:10:34,568
控件也尽可能

215
00:10:34,635 --> 0:10:36,136
默认可用

216
00:10:37,104 --> 0:10:38,038
注意 尽管这些

217
00:10:38,105 --> 0:10:41,175
元素很简单

218
00:10:41,241 --> 0:10:42,843
但包含了所有重要的

219
00:10:42,910 --> 0:10:43,877
必要信息

220
00:10:44,178 --> 0:10:45,279
它们好理解 是因为

221
00:10:45,345 --> 0:10:46,180
有标签

222
00:10:46,947 --> 0:10:48,682
可交互 是因为按键

223
00:10:48,749 --> 0:10:49,583
有动作

224
00:10:49,816 --> 0:10:51,084
可引导 是因为

225
00:10:51,151 --> 0:10:52,386
排序正确

226
00:10:54,821 --> 0:10:56,190
如我所说 SwiftUI

227
00:10:56,256 --> 0:10:58,125
有一个辅助功能API

228
00:10:58,192 --> 0:10:59,560
自定义元素

229
00:10:59,626 --> 0:11:00,460
给你

230
00:10:59,626 --> 0:11:00,460
给你

231
00:11:01,261 --> 0:11:02,729
在讲这个之前

232
00:11:02,796 --> 0:11:04,031
我想聊一聊

233
00:11:04,097 --> 0:11:05,732
一个优秀的辅助功能

234
00:11:05,799 --> 0:11:07,901
来自SwiftUI

235
00:11:07,968 --> 0:11:09,903
具体的辅助功能代码

236
00:11:12,706 --> 0:11:13,774
你有个免费的工具

237
00:11:13,841 --> 0:11:15,609
在SwiftUI 就是通知

238
00:11:15,676 --> 0:11:17,611
它让辅助功能

239
00:11:17,678 --> 0:11:19,780
比如旁白 在你的app

240
00:11:19,847 --> 0:11:20,948
对所发生的一切

241
00:11:21,014 --> 0:11:21,849
给出最新消息

242
00:11:22,583 --> 0:11:23,951
记住 辅助功能

243
00:11:24,017 --> 0:11:25,352
如我之前所讲

244
00:11:25,419 --> 0:11:26,687
都是基于

245
00:11:26,753 --> 0:11:28,589
辅助功能元素

246
00:11:28,655 --> 0:11:29,690
由app提供

247
00:11:31,291 --> 0:11:32,793
运行时 旁白会

248
00:11:32,860 --> 0:11:34,361
向app请求一个列表

249
00:11:34,428 --> 0:11:35,596
关于辅助功能元素

250
00:11:36,496 --> 0:11:37,798
例如 当用户打开

251
00:11:37,865 --> 0:11:39,933
计算器时

252
00:11:40,000 --> 0:11:41,602
给出屏幕上的元素

253
00:11:41,668 --> 0:11:42,836
计算器就会回复

254
00:11:42,903 --> 0:11:44,071
这些按键

255
00:11:44,137 --> 0:11:44,972
如前所述

256
00:11:46,006 --> 0:11:47,574
它也会发送

257
00:11:47,641 --> 0:11:49,409
元素给主显示屏

258
00:11:49,610 --> 0:11:50,878
同时它还发送一个值

259
00:11:50,944 --> 0:11:53,080
此时这个值为5

260
00:11:54,681 --> 0:11:56,250
那么想象一下如果

261
00:11:56,316 --> 0:11:57,551
信息变了呢

262
00:11:58,085 --> 0:11:59,553
假设一下

263
00:11:59,620 --> 0:12:01,154
计算器识别了

264
00:11:59,620 --> 0:12:01,154
计算器识别了

265
00:12:01,221 --> 0:12:02,656
等号键被按下

266
00:12:02,723 --> 0:12:04,258
更新这个值到

267
00:12:04,324 --> 0:12:05,158
主显示屏

268
00:12:05,626 --> 0:12:07,494
假设这个值现在为10

269
00:12:08,529 --> 0:12:10,564
旁白需要知道

270
00:12:10,631 --> 0:12:11,698
这个元素的值

271
00:12:11,765 --> 0:12:12,599
变了

272
00:12:13,233 --> 0:12:14,268
因此我们的框架

273
00:12:14,334 --> 0:12:15,636
要支持辅助功能

274
00:12:15,702 --> 0:12:16,637
通知

275
00:12:17,104 --> 0:12:18,338
这样app就能告诉旁白

276
00:12:18,505 --> 0:12:20,340
嘿 值变了哦

277
00:12:23,410 --> 0:12:25,045
整场会议我们一直在讲

278
00:12:25,112 --> 0:12:27,247
SwiftUI是如何

279
00:12:27,314 --> 0:12:28,148
被陈述驱动

280
00:12:28,916 --> 0:12:30,217
正是这些方面

281
00:12:30,284 --> 0:12:31,652
将优势带给了

282
00:12:31,718 --> 0:12:32,553
辅助功能

283
00:12:33,020 --> 0:12:34,288
因为SwiftUI能

284
00:12:34,354 --> 0:12:35,722
理解你的陈述

285
00:12:35,789 --> 0:12:38,125
并跟踪变化

286
00:12:38,192 --> 0:12:39,393
你无须再担心

287
00:12:39,459 --> 0:12:40,827
辅助功能

288
00:12:41,028 --> 0:12:41,895
通知

289
00:12:41,962 --> 0:12:43,430
甚至是自定义控件

290
00:12:44,898 --> 0:12:45,966
对 就是这样

291
00:12:49,069 --> 0:12:50,604
SwiftUI会跟踪陈述

292
00:12:50,771 --> 0:12:51,972
你正使用的

293
00:12:52,039 --> 0:12:54,575
辅助功能 并发送给你

294
00:12:54,641 --> 0:12:55,542
究竟如何

295
00:12:55,609 --> 0:12:56,443
做到？

296
00:12:57,077 --> 0:12:58,545
这里有个触发和一个

297
00:12:58,612 --> 0:13:00,113
按键 都链接到一个

298
00:12:58,612 --> 0:13:00,113
按键 都链接到一个

299
00:13:00,180 --> 0:13:01,248
单一陈述

300
00:13:01,648 --> 0:13:02,816
这是个布尔值 叫做

301
00:13:02,883 --> 0:13:03,717
Enabled

302
00:13:05,586 --> 0:13:06,720
可见这里有两个

303
00:13:06,787 --> 0:13:08,222
辅助功能元素

304
00:13:08,288 --> 0:13:09,156
被创建

305
00:13:09,223 --> 0:13:10,157
其中一个

306
00:13:10,224 --> 0:13:12,292
元素对应的是触发

307
00:13:12,359 --> 0:13:13,594
正确的标签和

308
00:13:13,660 --> 0:13:14,528
类别

309
00:13:14,595 --> 0:13:15,829
它的值一开始

310
00:13:15,896 --> 0:13:16,730
为0

311
00:13:17,097 --> 0:13:19,733
当你点击按键

312
00:13:19,800 --> 0:13:21,335
enabled的布尔值

313
00:13:21,401 --> 0:13:22,603
就会更改

314
00:13:22,803 --> 0:13:25,672
它会从0变为1

315
00:13:25,973 --> 0:13:26,874
所以我们称这个

316
00:13:26,940 --> 0:13:28,075
按键为Flip

317
00:13:28,742 --> 0:13:30,277
它会如何影响

318
00:13:30,344 --> 0:13:31,178
辅助功能？

319
00:13:31,879 --> 0:13:33,714
辅助功能的

320
00:13:33,780 --> 0:13:35,015
触发值变了

321
00:13:35,082 --> 0:13:36,550
这要让旁白

322
00:13:36,617 --> 0:13:37,484
知道

323
00:13:37,551 --> 0:13:38,652
因为当它理解到

324
00:13:38,719 --> 0:13:40,254
那个值变了

325
00:13:40,320 --> 0:13:41,154
自动发送一个

326
00:13:41,221 --> 0:13:42,422
通知给旁白

327
00:13:42,689 --> 0:13:43,524
告诉它准确的

328
00:13:43,590 --> 0:13:44,424
变化

329
00:13:44,658 --> 0:13:46,226
记住 不需要辅助功能

330
00:13:46,293 --> 0:13:47,895
具体的代码

331
00:13:48,295 --> 0:13:49,196
你无需担心

332
00:13:49,263 --> 0:13:50,531
通知是否发到了

333
00:13:50,597 --> 0:13:52,499
SwiftUI

334
00:13:52,566 --> 0:13:53,400
发送

335
00:13:56,003 --> 0:13:57,938
SwiftUI的另一个

336
00:13:58,005 --> 0:14:00,040
提升 是自定义控件

337
00:13:58,005 --> 0:14:00,040
提升 是自定义控件

338
00:14:00,908 --> 0:14:02,910
通常在设计app时

339
00:14:03,177 --> 0:14:04,444
你需要自定义

340
00:14:04,511 --> 0:14:06,380
UI的外观和感觉

341
00:14:06,647 --> 0:14:08,115
你也许需要

342
00:14:08,182 --> 0:14:09,917
独特的视觉风格 或者

343
00:14:09,983 --> 0:14:10,884
要适应公司

344
00:14:10,951 --> 0:14:11,785
主题

345
00:14:12,686 --> 0:14:13,954
如果你做过辅助功能

346
00:14:14,021 --> 0:14:15,822
在以前的工作 你就知道

347
00:14:15,889 --> 0:14:17,758
自定义控件越多

348
00:14:17,824 --> 0:14:19,393
就有越多的

349
00:14:19,459 --> 0:14:20,928
辅助功能需要

350
00:14:20,994 --> 0:14:21,828
加入

351
00:14:22,462 --> 0:14:24,765
SwiftUI的控制风格

352
00:14:24,831 --> 0:14:26,466
是让你完全掌控

353
00:14:26,533 --> 0:14:27,868
UI的外观和感觉

354
00:14:27,935 --> 0:14:29,970
同时又能拥有良好的

355
00:14:30,037 --> 0:14:31,505
即时辅助功能

356
00:14:32,306 --> 0:14:33,607
因此最终你能

357
00:14:33,674 --> 0:14:35,242
轻松的制作自定义控件

358
00:14:35,309 --> 0:14:37,277
它美丽又独特

359
00:14:37,344 --> 0:14:38,946
还随时可用

360
00:14:39,146 --> 0:14:40,547
就像系统元素一样

361
00:14:40,981 --> 0:14:43,817
这个例子 是要自定义

362
00:14:43,884 --> 0:14:45,485
按键样式 使用

363
00:14:45,552 --> 0:14:46,386
SwiftUI

364
00:14:47,421 --> 0:14:50,190
这个API显示了按键的

365
00:14:50,257 --> 0:14:51,425
样式 包括

366
00:14:51,491 --> 0:14:53,460
标签和按键状态

367
00:14:54,361 --> 0:14:55,662
于是我们需要

368
00:14:55,729 --> 0:14:57,364
告诉style如何

369
00:14:57,431 --> 0:14:58,265
绘制这个按键

370
00:14:59,099 --> 0:15:01,034
那么首先将这个

371
00:14:59,099 --> 0:15:01,034
那么首先将这个

372
00:15:01,101 --> 0:15:03,003
标签放入圆角矩形

373
00:15:03,403 --> 0:15:04,471
然后设置背景和

374
00:15:04,538 --> 0:15:05,672
前景的颜色

375
00:15:05,739 --> 0:15:06,907
代表我们是否

376
00:15:06,974 --> 0:15:07,808
按了键

377
00:15:08,475 --> 0:15:09,710
还要添加一点

378
00:15:09,776 --> 0:15:11,345
填充并设置漂亮的

379
00:15:11,411 --> 0:15:13,447
大号字体和颜色

380
00:15:14,982 --> 0:15:16,884
最终的形态

381
00:15:16,950 --> 0:15:17,784
在右边

382
00:15:18,085 --> 0:15:21,355
现在我们已经定义了

383
00:15:21,421 --> 0:15:23,123
这个漂亮的自定义绘制

384
00:15:23,190 --> 0:15:24,191
当然也要用它

385
00:15:25,225 --> 0:15:26,693
我们要创建一个

386
00:15:26,760 --> 0:15:28,495
正常的按键 然后用

387
00:15:28,562 --> 0:15:30,264
按键样式修改器函数

388
00:15:30,697 --> 0:15:31,865
设置我们想要的

389
00:15:31,932 --> 0:15:32,833
按键样式

390
00:15:33,867 --> 0:15:34,935
这会创建一个

391
00:15:35,002 --> 0:15:36,637
辅助功能元素

392
00:15:36,703 --> 0:15:37,704
你可以在顶部看到

393
00:15:37,771 --> 0:15:38,605
这里

394
00:15:38,972 --> 0:15:40,707
注意尽管有这些

395
00:15:40,774 --> 0:15:42,042
自定义的绘制

396
00:15:42,109 --> 0:15:44,711
辅助功能元素还是很值得尝试

397
00:15:44,778 --> 0:15:46,413
它有标签

398
00:15:46,480 --> 0:15:48,182
正确的类别 还有一个

399
00:15:48,248 --> 0:15:49,082
动作

400
00:15:50,350 --> 0:15:51,451
还是一样 完成这些时

401
00:15:51,518 --> 0:15:52,553
不需要编写任何的

402
00:15:52,619 --> 0:15:54,855
辅助功能具体代码

403
00:15:57,491 --> 0:16:00,127
SwiftUI还能提供更好的

404
00:15:57,491 --> 0:16:00,127
SwiftUI还能提供更好的

405
00:16:00,194 --> 0:16:02,162
更多的直观辅助功能

406
00:16:02,229 --> 0:16:03,063
给图片

407
00:16:03,430 --> 0:16:04,631
具体我要讲

408
00:16:04,698 --> 0:16:06,200
图解 还有

409
00:16:06,266 --> 0:16:07,434
字形 它们是

410
00:16:07,501 --> 0:16:08,802
UI的重要组成

411
00:16:10,437 --> 0:16:11,872
假设你的app带有

412
00:16:11,939 --> 0:16:13,841
注册功能 完成时会有

413
00:16:13,907 --> 0:16:17,811
绿色对勾 如图

414
00:16:18,011 --> 0:16:19,313
这是简单的SwiftUI

415
00:16:19,379 --> 0:16:20,514
代码 你可以用来

416
00:16:20,581 --> 0:16:21,882
创建这样的视图

417
00:16:21,949 --> 0:16:22,883
这里它只是个

418
00:16:22,950 --> 0:16:24,384
带图片的

419
00:16:25,719 --> 0:16:27,554
完成注册后

420
00:16:27,621 --> 0:16:28,989
没有视力障碍的用户会看到

421
00:16:29,056 --> 0:16:31,458
然后说 太好了

422
00:16:31,525 --> 0:16:35,095
真棒 而用户如果使用

423
00:16:35,162 --> 0:16:36,430
旁白 就会听到

424
00:16:36,964 --> 0:16:37,798
对勾字形

425
00:16:39,032 --> 0:16:40,767
这个没有什么用处

426
00:16:40,834 --> 0:16:42,569
这是开发者创建的

427
00:16:42,636 --> 0:16:43,604
图片名称

428
00:16:43,871 --> 0:16:45,906
我不知道什么是字形

429
00:16:45,973 --> 0:16:46,907
或者它意味什么

430
00:16:47,241 --> 0:16:48,976
作为旁白用户

431
00:16:49,042 --> 0:16:50,110
我完成了吗

432
00:16:50,444 --> 0:16:51,278
出问题了吗

433
00:16:52,613 --> 0:16:54,214
我不能

434
00:16:54,281 --> 0:16:55,115
理解

435
00:16:55,682 --> 0:16:57,050
原因在于

436
00:16:57,117 --> 0:16:59,119
图片的标签不明确

437
00:16:59,987 --> 0:17:01,388
这个辅助功能元素

438
00:16:59,987 --> 0:17:01,388
这个辅助功能元素

439
00:17:01,455 --> 0:17:03,590
由SwiftUI创建

440
00:17:03,657 --> 0:17:04,825
你能看到它有正确的

441
00:17:04,892 --> 0:17:06,093
类别 但没有标签

442
00:17:07,426 --> 0:17:08,829
SwiftUI要做的

443
00:17:08,896 --> 0:17:10,998
是将标签拖过来

444
00:17:11,064 --> 0:17:12,799
从图片的文件名或

445
00:17:12,866 --> 0:17:13,700
资源名上

446
00:17:14,568 --> 0:17:15,935
这并不是我们

447
00:17:16,002 --> 0:17:16,837
想依赖的

448
00:17:17,003 --> 0:17:19,940
因为这个名字是给你们

449
00:17:20,007 --> 0:17:21,642
开发者 而不是用户

450
00:17:23,310 --> 0:17:25,612
有了SwiftUI 你可以

451
00:17:25,679 --> 0:17:27,247
给图片做标签 用本地化的

452
00:17:27,314 --> 0:17:29,149
辅助功能信息

453
00:17:29,216 --> 0:17:30,684
在创建时就能用

454
00:17:30,751 --> 0:17:33,420
我们要做的是用

455
00:17:33,487 --> 0:17:35,622
基于标签的初始化器

456
00:17:35,689 --> 0:17:36,523
画图

457
00:17:37,024 --> 0:17:37,991
这样我们就不需要

458
00:17:38,058 --> 0:17:39,459
总是记得后面还要再做

459
00:17:39,693 --> 0:17:40,861
一些单独的代码

460
00:17:41,862 --> 0:17:42,696
这会创建一个

461
00:17:42,763 --> 0:17:44,164
辅助功能UI

462
00:17:44,231 --> 0:17:45,632
易于理解

463
00:17:47,000 --> 0:17:48,302
记住 这个更新过的

464
00:17:48,368 --> 0:17:49,870
辅助功能元素现在

465
00:17:49,937 --> 0:17:50,871
有了正确的标签

466
00:17:51,171 --> 0:17:52,539
当我看到这个图片

467
00:17:52,606 --> 0:17:54,074
旁白会说 注册

468
00:17:54,141 --> 0:17:54,975
完成

469
00:17:55,042 --> 0:17:59,580
另一方面 有时候

470
00:17:59,813 --> 0:18:01,181
旁白用户不需要

471
00:17:59,813 --> 0:18:01,181
旁白用户不需要

472
00:18:01,248 --> 0:18:02,382
以图片结尾

473
00:18:02,916 --> 0:18:04,184
例如这个

474
00:18:04,251 --> 0:18:05,319
对勾其实仅仅是

475
00:18:05,385 --> 0:18:06,653
一个装饰 而且你已经

476
00:18:06,720 --> 0:18:08,589
下面有文字说明

477
00:18:08,655 --> 0:18:09,489
注册完成

478
00:18:10,490 --> 0:18:11,725
SwiftUI代码

479
00:18:11,792 --> 0:18:12,726
大概是这样

480
00:18:13,060 --> 0:18:14,428
一个带图片的垂直叠层

481
00:18:14,494 --> 0:18:15,829
和两行文本

482
00:18:17,231 --> 0:18:18,432
这里的图片

483
00:18:18,498 --> 0:18:19,566
真的只是装饰

484
00:18:20,033 --> 0:18:21,335
其实你可以这样做

485
00:18:21,535 --> 0:18:23,036
通知SwiftUI 通过

486
00:18:23,103 --> 0:18:23,971
正确的初始化程序

487
00:18:25,072 --> 0:18:26,607
现在 旁白用户不会

488
00:18:26,673 --> 0:18:28,075
再看到这个图片

489
00:18:28,408 --> 0:18:29,576
这时辅助功能中

490
00:18:29,643 --> 0:18:31,044
两个元素对应文本

491
00:18:31,111 --> 0:18:33,447
但没有元素对应图片

492
00:18:34,581 --> 0:18:36,216
这样就更好操控了

493
00:18:36,283 --> 0:18:37,784
因为旁白用户

494
00:18:37,851 --> 0:18:39,453
不会再遇到无用的

495
00:18:39,653 --> 0:18:40,487
元素

496
00:18:41,822 --> 0:18:44,958
SwiftUI最后一个

497
00:18:45,025 --> 0:18:46,226
用辅助让生活

498
00:18:46,293 --> 0:18:47,494
更轻松的地方

499
00:18:47,761 --> 0:18:49,062
就是标签

500
00:18:49,630 --> 0:18:50,564
我们看到

501
00:18:50,631 --> 0:18:52,132
这个控件实际就是

502
00:18:52,199 --> 0:18:53,033
系统偏好

503
00:18:53,634 --> 0:18:55,102
目的是让你选择一个

504
00:18:55,169 --> 0:18:56,069
声音

505
00:18:56,136 --> 0:18:58,472
这个辅助功能的

506
00:18:58,539 --> 0:19:00,140
元素在右上角

507
00:18:58,539 --> 0:19:00,140
元素在右上角

508
00:19:00,407 --> 0:19:02,142
它没有标签 只有一个值

509
00:19:02,209 --> 0:19:03,043
Alex

510
00:19:03,944 --> 0:19:05,779
这个不好理解

511
00:19:05,846 --> 0:19:07,080
作为旁白用户

512
00:19:07,247 --> 0:19:08,148
因为旁白

513
00:19:08,215 --> 0:19:10,484
只会读出Alex

514
00:19:10,884 --> 0:19:13,020
谁是Alex 我为什么要

515
00:19:13,086 --> 0:19:15,222
如果我用旁白

516
00:19:15,289 --> 0:19:16,456
我得到处搜寻

517
00:19:16,523 --> 0:19:17,925
屏幕上的其他内容

518
00:19:17,991 --> 0:19:19,092
找点线索

519
00:19:19,560 --> 0:19:22,763
这是SwiftUI代码

520
00:19:22,829 --> 0:19:24,831
编写的控件

521
00:19:25,666 --> 0:19:27,501
这里是一个标准的

522
00:19:27,568 --> 0:19:29,369
SwiftUI选择器

523
00:19:29,436 --> 0:19:30,771
显示为弹窗按钮

524
00:19:32,172 --> 0:19:33,774
SwiftUI的选择器

525
00:19:33,841 --> 0:19:35,509
有内置标签可以使用

526
00:19:35,576 --> 0:19:37,010
这里我们设置了系统

527
00:19:37,077 --> 0:19:37,911
声音

528
00:19:38,445 --> 0:19:40,047
许多SwiftUI控件都有

529
00:19:40,113 --> 0:19:41,648
类似的标签 其他也很快

530
00:19:41,715 --> 0:19:42,549
会有

531
00:19:42,783 --> 0:19:44,351
现在我们来看

532
00:19:44,418 --> 0:19:47,020
这个辅助功能

533
00:19:47,087 --> 0:19:48,388
这时它有一个标签

534
00:19:48,822 --> 0:19:50,023
旁白

535
00:19:50,090 --> 0:19:52,826
读的是 Alex 系统声音

536
00:19:53,227 --> 0:19:56,864
弹窗按钮

537
00:19:56,930 --> 0:19:59,099
在更新的SwiftUI中

538
00:19:59,166 --> 0:20:01,268
你能做更多的

539
00:19:59,166 --> 0:20:01,268
你能做更多的

540
00:20:01,335 --> 0:20:02,169
事情

541
00:20:02,402 --> 0:20:03,737
如果你只想用一个

542
00:20:03,804 --> 0:20:05,372
标签显示给所有

543
00:20:05,439 --> 0:20:06,673
用户 无论他们

544
00:20:06,740 --> 0:20:07,975
是否使用辅助功能

545
00:20:09,042 --> 0:20:10,077
那么你可以

546
00:20:10,143 --> 0:20:11,545
设置这个标签为

547
00:20:11,612 --> 0:20:13,113
类似左边的内容

548
00:20:13,180 --> 0:20:15,549
如果你这样做 我们就会

549
00:20:15,616 --> 0:20:17,384
为你设置辅助

550
00:20:17,885 --> 0:20:19,219
比如一个连接

551
00:20:19,286 --> 0:20:20,587
连接左边标签

552
00:20:20,654 --> 0:20:22,556
和右边的弹窗

553
00:20:22,623 --> 0:20:23,457
按钮

554
00:20:23,790 --> 0:20:24,925
它们本身都是

555
00:20:24,992 --> 0:20:26,293
辅助功能元素

556
00:20:26,360 --> 0:20:28,495
但旁白知道

557
00:20:28,562 --> 0:20:29,663
旁白就会

558
00:20:29,730 --> 0:20:32,099
读出

559
00:20:32,165 --> 0:20:33,000
按钮

560
00:20:36,403 --> 0:20:39,506
这就是SwiftUI可以

561
00:20:39,573 --> 0:20:40,807
自动为你做的事

562
00:20:41,508 --> 0:20:42,543
这里有两点

563
00:20:42,609 --> 0:20:44,645
要强调 关于所有

564
00:20:44,711 --> 0:20:46,380
首先 它们始终保持一致

565
00:20:46,547 --> 0:20:48,882
在所有的SwiftUI平台

566
00:20:49,650 --> 0:20:51,919
第二 实现这一切

567
00:20:51,985 --> 0:20:53,086
不需要编写任何

568
00:20:53,153 --> 0:20:54,821
辅助功能代码

569
00:20:56,190 --> 0:20:57,624
即便有时候无论

570
00:20:57,691 --> 0:20:59,593
自动化辅助功能有多好

571
00:20:59,660 --> 0:21:01,695
它可能还是

572
00:20:59,660 --> 0:21:01,695
它可能还是

573
00:21:01,762 --> 0:21:02,963
因此我们提供一个

574
00:21:03,030 --> 0:21:05,399
辅助功能API给你

575
00:21:05,465 --> 0:21:06,633
现在我要将舞台交给

576
00:21:06,700 --> 0:21:08,335
John 他会讲解 更多

577
00:21:08,836 --> 0:21:09,670
John

578
00:21:17,244 --> 0:21:18,078
谢谢Michael

579
00:21:19,179 --> 0:21:20,147
我们已经展示了

580
00:21:20,214 --> 0:21:21,815
优秀的内置辅助功能

581
00:21:22,182 --> 0:21:23,283
来自SwiftUI

582
00:21:23,817 --> 0:21:25,686
它的设计是为所有人提供

583
00:21:25,752 --> 0:21:26,787
即时的

584
00:21:26,854 --> 0:21:27,688
良好体验

585
00:21:28,021 --> 0:21:29,523
但我们知道

586
00:21:29,590 --> 0:21:31,058
仅靠它并不能带来

587
00:21:31,124 --> 0:21:31,959
完整体验

588
00:21:33,026 --> 0:21:34,928
SwiftUI辅助功能API

589
00:21:35,863 --> 0:21:36,763
让你可以修改并

590
00:21:36,830 --> 0:21:38,665
最终创建更好的

591
00:21:38,732 --> 0:21:39,833
体验给所有人

592
00:21:43,370 --> 0:21:44,404
那么首先我要

593
00:21:44,471 --> 0:21:46,974
演示几个简单的

594
00:21:47,040 --> 0:21:48,075
回到之前的

595
00:21:48,141 --> 0:21:49,443
计算器

596
00:21:49,510 --> 0:21:50,344
刚才所示

597
00:21:50,844 --> 0:21:51,712
首先是

598
00:21:51,778 --> 0:21:53,780
乘号 默认是

599
00:21:54,181 --> 0:21:55,349
读出X

600
00:21:55,949 --> 0:21:58,085
要修改这个标签 我使用

601
00:21:58,151 --> 0:21:59,353
辅助功能修改器

602
00:21:59,419 --> 0:22:00,821
函数 和标签

603
00:21:59,419 --> 0:22:00,821
函数 和标签

604
00:22:00,888 --> 0:22:01,722
参数

605
00:22:02,055 --> 0:22:04,191
修改以后 这个按钮

606
00:22:04,258 --> 0:22:05,526
现在读作 乘以

607
00:22:05,592 --> 0:22:08,929
我们还想让

608
00:22:08,996 --> 0:22:10,364
旁白有特定的

609
00:22:10,430 --> 0:22:11,265
按键状态

610
00:22:11,832 --> 0:22:13,200
在视觉上 按键

611
00:22:13,267 --> 0:22:14,268
被选择后 变成白色

612
00:22:14,902 --> 0:22:18,038
辅助功能trait

613
00:22:18,105 --> 0:22:19,039
可以帮助我们

614
00:22:19,973 --> 0:22:20,807
如果你还不熟悉

615
00:22:21,041 --> 0:22:22,509
trait是为了

616
00:22:22,576 --> 0:22:23,844
描述元素

617
00:22:24,044 --> 0:22:24,878
和方法

618
00:22:26,113 --> 0:22:27,314
例如 按键会

619
00:22:27,381 --> 0:22:28,916
自动带有isButton

620
00:22:28,982 --> 0:22:30,017
默认的trait

621
00:22:31,084 --> 0:22:32,319
旁白会读出 按键

622
00:22:32,920 --> 0:22:34,454
在读取元素标签

623
00:22:34,521 --> 0:22:37,224
这里我们就要添加

624
00:22:37,291 --> 0:22:38,926
isSelected状态 使用

625
00:22:38,992 --> 0:22:40,460
辅助功能函数 并加上

626
00:22:40,527 --> 0:22:41,495
参数trait

627
00:22:42,529 --> 0:22:43,430
旁白会读出

628
00:22:43,497 --> 0:22:45,299
已选 当按键处于

629
00:22:46,033 --> 0:22:47,801
当前状态

630
00:22:48,001 --> 0:22:48,869
再来讲如何提升

631
00:22:48,936 --> 0:22:50,771
结果视图的

632
00:22:52,673 --> 0:22:54,441
将标签改为结果

633
00:22:54,842 --> 0:22:56,176
并添加辅助功能的值

634
00:22:57,010 --> 0:22:58,378
这个值可以用来

635
00:22:58,445 --> 0:23:00,581
给旁白提供

636
00:22:58,445 --> 0:23:00,581
给旁白提供

637
00:23:02,349 --> 0:23:03,283
你也许要添加

638
00:23:03,350 --> 0:23:04,918
单位或其他

639
00:23:04,985 --> 0:23:05,819
文本

640
00:23:06,520 --> 0:23:07,788
但在这里

641
00:23:07,855 --> 0:23:09,456
数字就可以

642
00:23:10,958 --> 0:23:12,526
最后要添加的是

643
00:23:12,593 --> 0:23:14,061
自定义动作 使用

644
00:23:14,127 --> 0:23:14,962
动作函数

645
00:23:16,230 --> 0:23:17,564
通过姓名参数

646
00:23:17,631 --> 0:23:19,533
创建一个自定义动作

647
00:23:19,600 --> 0:23:20,434
清除

648
00:23:21,268 --> 0:23:22,503
旁白会播放

649
00:23:22,569 --> 0:23:23,704
发生的动作

650
00:23:23,770 --> 0:23:24,738
对应的元素

651
00:23:25,873 --> 0:23:26,740
以上只是简单

652
00:23:26,807 --> 0:23:28,008
学习了如何添加

653
00:23:28,075 --> 0:23:29,176
辅助功能在SwiftUI

654
00:23:29,977 --> 0:23:31,445
辅助功能函数

655
00:23:31,512 --> 0:23:32,613
添加信息

656
00:23:32,679 --> 0:23:34,147
辅助功能动作函数

657
00:23:34,414 --> 0:23:35,516
则添加动作

658
00:23:36,216 --> 0:23:37,217
我想多讲一点

659
00:23:37,284 --> 0:23:38,752
关于何时使用这个API

660
00:23:38,819 --> 0:23:40,687
以及如何定义

661
00:23:40,754 --> 0:23:42,356
app中需要它的地方

662
00:23:42,990 --> 0:23:45,926
这就要回到客户

663
00:23:45,993 --> 0:23:49,029
需要怎样的app

664
00:23:49,296 --> 0:23:52,366
易于理解 可以交互

665
00:23:53,033 --> 0:23:54,801
并能够操控

666
00:23:56,603 --> 0:23:57,704
下面这几个问题

667
00:23:57,771 --> 0:23:58,739
帮助你评估

668
00:24:01,175 --> 0:24:02,709
显示的字符串是否提供了

669
00:24:02,776 --> 0:24:03,610
足够的信息

670
00:24:07,181 --> 0:24:08,749
自定义动作会简化

671
00:24:08,815 --> 0:24:09,650
交互吗

672
00:24:13,053 --> 0:24:13,987
能否加快引导

673
00:24:18,058 --> 0:24:19,092
下面这段视频

674
00:24:19,159 --> 0:24:20,194
旁白在app中的

675
00:24:20,260 --> 0:24:21,128
应用

676
00:24:21,195 --> 0:24:22,629
观看中请时刻谨记

677
00:24:22,696 --> 0:24:23,931
这三个问题

678
00:24:27,434 --> 0:24:29,636
这个app用来

679
00:24:29,937 --> 0:24:31,305
文本对背景

680
00:24:31,371 --> 0:24:32,206
颜色

681
00:24:32,272 --> 0:24:33,173
顶部显示的是

682
00:24:33,240 --> 0:24:35,442
当前对比度的值

683
00:24:35,509 --> 0:24:36,643
底部是两个

684
00:24:36,710 --> 0:24:37,978
区域 用于调整

685
00:24:38,045 --> 0:24:39,746
红 绿 蓝的值

686
00:24:39,813 --> 0:24:40,948
给背景颜色和

687
00:24:41,014 --> 0:24:41,849
文本颜色

688
00:24:42,683 --> 0:24:43,750
我还增加了双击手势

689
00:24:43,817 --> 0:24:45,385
在顶部视图切换

690
00:24:45,452 --> 0:24:46,286
两种颜色

691
00:24:47,588 --> 0:24:48,722
那么旁白如何

692
00:24:48,789 --> 0:24:49,623
操作呢

693
00:24:52,826 --> 0:24:54,728
11.7 1.

694
00:24:56,496 --> 0:24:58,298
11.7 1

695
00:24:59,366 --> 0:25:01,134
11.7 1

696
00:24:59,366 --> 0:25:01,134
11.7 1

697
00:25:02,903 --> 0:25:04,771
重置颜色 按键

698
00:25:05,706 --> 0:25:06,640
背景

699
00:25:07,541 --> 0:25:11,211
红色 76 30%

700
00:25:11,478 --> 0:25:12,312
可调节

701
00:25:12,779 --> 0:25:14,948
绿色 217

702
00:25:15,649 --> 0:25:17,084
85%

703
00:25:17,384 --> 0:25:18,218
可调节

704
00:25:18,785 --> 0:25:22,589
蓝色 100 39%

705
00:25:22,890 --> 0:25:23,724
可调节

706
00:25:24,358 --> 0:25:26,793
39…100%

707
00:25:30,364 --> 0:25:31,365
视频中引起我

708
00:25:31,431 --> 0:25:32,499
注意的是

709
00:25:32,566 --> 0:25:34,234
顶部的标签

710
00:25:35,969 --> 0:25:37,538
首先有一个符号

711
00:25:37,604 --> 0:25:38,438
没有读出来

712
00:25:39,106 --> 0:25:40,073
旁白一般不读

713
00:25:40,140 --> 0:25:41,275
标点 根据app的

714
00:25:41,341 --> 0:25:42,209
设置

715
00:25:42,276 --> 0:25:43,577
但在这里

716
00:25:43,911 --> 0:25:45,078
当标点代表

717
00:25:45,145 --> 0:25:46,480
比率时 我们就要

718
00:25:46,547 --> 0:25:47,548
将信息传达给

719
00:25:47,614 --> 0:25:48,448
旁白

720
00:25:49,149 --> 0:25:51,485
所以 11.7 1应读作

721
00:25:51,552 --> 0:25:52,386
1

722
00:25:53,120 --> 0:25:54,154
第二 读数字时

723
00:25:54,221 --> 0:25:55,556
没有任何上下文

724
00:25:57,090 --> 0:25:58,125
有个办法是

725
00:25:58,192 --> 0:25:59,126
给它合适的标签

726
00:25:59,193 --> 0:26:00,027
描述它的值

727
00:25:59,193 --> 0:26:00,027
描述它的值

728
00:26:00,894 --> 0:26:02,362
这里就是 对比度

729
00:26:04,798 --> 0:26:05,732
所以我们要调用

730
00:26:05,799 --> 0:26:07,467
两次辅助功能函数

731
00:26:07,534 --> 0:26:08,535
给一个对比度视图

732
00:26:09,169 --> 0:26:11,071
一次是加标签 一次是

733
00:26:11,138 --> 0:26:14,675
添加值

734
00:26:15,242 --> 0:26:16,143
另外我注意到

735
00:26:16,210 --> 0:26:17,845
这个信息的

736
00:26:17,911 --> 0:26:18,745
滑块

737
00:26:19,479 --> 0:26:20,781
滑块的值是

738
00:26:20,848 --> 0:26:22,749
百分比 但在这里

739
00:26:22,816 --> 0:26:24,318
实际是指色彩

740
00:26:24,384 --> 0:26:26,653
分量值 从0到255

741
00:26:27,487 --> 0:26:30,424
这个标签可以隐藏

742
00:26:30,490 --> 0:26:32,426
不显示在滑块上方

743
00:26:32,492 --> 0:26:33,727
而是跟随滑动

744
00:26:33,961 --> 0:26:34,828
显示

745
00:26:34,895 --> 0:26:35,863
这样就能集合

746
00:26:35,929 --> 0:26:37,664
信息给一个元素

747
00:26:39,233 --> 0:26:41,335
首先讲隐藏标签

748
00:26:42,302 --> 0:26:43,203
先调用函数

749
00:26:43,270 --> 0:26:44,805
将可见度设为

750
00:26:44,872 --> 0:26:45,706
参数

751
00:26:46,240 --> 0:26:47,908
写入.hidden来隐藏

752
00:26:47,975 --> 0:26:50,010
元素及其所有

753
00:26:53,347 --> 0:26:54,648
然后添加信息

754
00:26:54,715 --> 0:26:55,949
给滑块标签

755
00:26:56,884 --> 0:26:58,018
这个标签是

756
00:26:58,085 --> 0:26:59,820
要调整的颜色和

757
00:26:59,887 --> 0:27:04,157
0到255之间的一个值

758
00:26:59,887 --> 0:27:04,157
0到255之间的一个值

759
00:27:05,826 --> 0:27:06,760
我们还加了双击

760
00:27:06,827 --> 0:27:07,661
手势在这里

761
00:27:08,362 --> 0:27:09,530
iOS中的手势

762
00:27:09,596 --> 0:27:10,764
很难操作

763
00:27:10,831 --> 0:27:12,199
对于客户使用

764
00:27:12,266 --> 0:27:13,100
辅助功能产品

765
00:27:14,301 --> 0:27:15,536
部分产品自带

766
00:27:15,602 --> 0:27:17,471
手势菜单 以帮助

767
00:27:17,538 --> 0:27:18,605
完成较为复杂的

768
00:27:18,672 --> 0:27:19,506
手势

769
00:27:20,307 --> 0:27:21,141
其实可以更好

770
00:27:21,942 --> 0:27:23,310
最简单的就是

771
00:27:23,544 --> 0:27:24,745
创建自定义动作

772
00:27:24,811 --> 0:27:25,646
给手势

773
00:27:26,180 --> 0:27:27,314
它有两个好处

774
00:27:28,182 --> 0:27:29,650
第一 动作名称

775
00:27:29,716 --> 0:27:30,551
能够描述

776
00:27:30,617 --> 0:27:31,785
触发的任务

777
00:27:32,586 --> 0:27:33,754
第二 动作在

778
00:27:33,820 --> 0:27:35,589
iOS中随时可用

779
00:27:35,656 --> 0:27:36,590
它们存在于

780
00:27:36,657 --> 0:27:37,591
所有辅助功能中

781
00:27:41,228 --> 0:27:42,563
现在将颜色转换动作

782
00:27:42,629 --> 0:27:44,698
添加到对比度视图

783
00:27:44,765 --> 0:27:45,732
通过调用

784
00:27:45,799 --> 0:27:47,234
动作修改器

785
00:27:47,301 --> 0:27:48,135
函数

786
00:27:48,202 --> 0:27:52,372
最后 如何加快

787
00:27:52,439 --> 0:27:53,273
导航？

788
00:27:54,608 --> 0:27:55,843
这个视图可以

789
00:27:55,909 --> 0:27:57,711
分为三大块

790
00:27:58,612 --> 0:28:01,081
对比度

791
00:27:58,612 --> 0:28:01,081
对比度

792
00:28:01,148 --> 0:28:03,917
背景颜色和文本

793
00:28:03,984 --> 0:28:04,818
颜色

794
00:28:05,252 --> 0:28:06,720
它们都是组成

795
00:28:06,887 --> 0:28:08,255
isHeader的

796
00:28:08,322 --> 0:28:09,223
trait

797
00:28:09,289 --> 0:28:10,624
它被旁白用来

798
00:28:10,791 --> 0:28:11,892
快速切换

799
00:28:11,959 --> 0:28:12,926
不同的标题

800
00:28:12,993 --> 0:28:14,928
在app里

801
00:28:15,996 --> 0:28:17,364
将trait加给

802
00:28:17,431 --> 0:28:19,299
对比度视图和这两个

803
00:28:19,366 --> 0:28:20,567
文本颜色的

804
00:28:20,634 --> 0:28:21,468
选择区域

805
00:28:25,439 --> 0:28:27,174
现在看下

806
00:28:27,241 --> 0:28:28,442
首先是顶部

807
00:28:28,509 --> 0:28:29,343
视图

808
00:28:31,078 --> 0:28:33,981
对比度11.7比1

809
00:28:34,248 --> 0:28:35,082
标题

810
00:28:35,682 --> 0:28:36,950
现在既有上下文

811
00:28:37,017 --> 0:28:38,585
也有适当的描述

812
00:28:38,652 --> 0:28:40,621
关于这个值

813
00:28:40,687 --> 0:28:41,755
接下来是滑块

814
00:28:41,822 --> 0:28:42,789
调整蓝色的

815
00:28:42,856 --> 0:28:43,690
值

816
00:28:44,458 --> 0:28:46,293
重置颜色 按钮

817
00:28:47,327 --> 0:28:48,262
背景

818
00:28:48,562 --> 0:28:49,396
标题

819
00:28:50,364 --> 0:28:52,099
红色 76

820
00:28:52,332 --> 0:28:53,166
可调节

821
00:28:54,501 --> 0:28:56,470
用手指上下滑动

822
00:28:56,537 --> 0:28:57,538
调节数值

823
00:28:58,605 --> 0:29:00,874
绿色 217

824
00:28:58,605 --> 0:29:00,874
绿色 217

825
00:29:01,175 --> 0:29:02,009
可调节

826
00:29:02,543 --> 0:29:05,078
蓝色 100 可调节

827
00:29:06,547 --> 0:29:07,681
滑动 100

828
00:29:08,115 --> 0:29:11,552
140…250…255

829
00:29:15,088 --> 0:29:16,056
最后我们来使用

830
00:29:16,123 --> 0:29:17,824
旁白拨盘切换

831
00:29:17,891 --> 0:29:19,459
标题和颜色

832
00:29:19,526 --> 0:29:20,460
通过自定义动作

833
00:29:20,527 --> 0:29:21,361
之前的

834
00:29:22,095 --> 0:29:23,030
调节数值

835
00:29:23,263 --> 0:29:26,233
标题 文字

836
00:29:26,300 --> 0:29:28,235
标题 背景

837
00:29:28,502 --> 0:29:29,336
标题

838
00:29:30,037 --> 0:29:33,440
对比度13.0比1

839
00:29:33,740 --> 0:29:34,575
标题

840
00:29:35,409 --> 0:29:36,243
动作

841
00:29:37,077 --> 0:29:38,078
颜色转换

842
00:29:48,755 --> 0:29:50,290
只要动动手指

843
00:29:50,357 --> 0:29:51,525
就能大幅提升

844
00:29:51,592 --> 0:29:52,726
app辅助功能的

845
00:29:52,793 --> 0:29:53,627
体验

846
00:29:53,861 --> 0:29:55,095
这都是API的基础

847
00:29:55,162 --> 0:29:56,363
下面我要讲

848
00:29:56,430 --> 0:29:57,364
一些更为

849
00:29:57,431 --> 0:29:58,265
抽象的

850
00:29:58,799 --> 0:29:59,666
辅助功能树

851
00:30:01,201 --> 0:30:03,103
你看过了

852
00:30:03,170 --> 0:30:04,071
创建过程

853
00:30:04,571 --> 0:30:06,573
接下来我们

854
00:30:06,640 --> 0:30:08,275
元素的树结构

855
00:30:08,342 --> 0:30:09,309
以及你如何使用

856
00:30:09,376 --> 0:30:11,478
树结构 创造更好的

857
00:30:11,545 --> 0:30:12,379
体验

858
00:30:13,146 --> 0:30:14,615
首先是如何

859
00:30:17,918 --> 0:30:19,119
先看视图树

860
00:30:19,319 --> 0:30:20,420
直接由代码创建

861
00:30:21,455 --> 0:30:23,023
左边是SwiftUI代码

862
00:30:23,090 --> 0:30:23,957
表格视图

863
00:30:24,925 --> 0:30:26,860
一个标签 一个空层

864
00:30:26,927 --> 0:30:27,761
两个按钮

865
00:30:28,362 --> 0:30:29,730
横向排列在一个

866
00:30:29,796 --> 0:30:30,631
平叠层

867
00:30:31,632 --> 0:30:32,933
它直接翻译成

868
00:30:33,000 --> 0:30:33,834
右边的视图树

869
00:30:33,901 --> 0:30:35,702
平叠层是父节点

870
00:30:35,769 --> 0:30:37,571
而标签

871
00:30:37,638 --> 0:30:39,673
空层 按钮

872
00:30:39,740 --> 0:30:40,574
是子节点

873
00:30:41,808 --> 0:30:44,278
因为自带

874
00:30:44,344 --> 0:30:45,779
会创建三个辅助功能

875
00:30:45,846 --> 0:30:46,680
元素

876
00:30:46,747 --> 0:30:48,282
一个来自文本 两个来自

877
00:30:48,348 --> 0:30:49,183
按钮

878
00:30:51,051 --> 0:30:51,885
它们会成为

879
00:30:51,952 --> 0:30:53,053
子元素 构成平台的

880
00:30:53,120 --> 0:30:54,621
主视图 并传递给

881
00:30:54,688 --> 0:30:55,656
辅助功能

882
00:30:55,722 --> 0:30:56,557
产品

883
00:30:57,524 --> 0:30:59,993
这个子节点树也可能属于

884
00:31:00,060 --> 0:31:01,662
更大的辅助功能树

885
00:31:01,728 --> 0:31:03,597
通过UiKit或AppKit连接

886
00:31:03,664 --> 0:31:04,498
元素

887
00:31:04,831 --> 0:31:07,034
SwiftUI树甚至可以是

888
00:31:07,100 --> 0:31:08,268
其他平台的父节点

889
00:31:08,335 --> 0:31:10,103
元素搭桥用UI或

890
00:31:10,170 --> 0:31:11,405
NSViewRepresentable

891
00:31:12,039 --> 0:31:14,441
如果你注意到

892
00:31:14,508 --> 0:31:15,909
树的阶层

893
00:31:15,976 --> 0:31:17,044
你也许会想到

894
00:31:17,110 --> 0:31:18,512
它很快就会变得复杂

895
00:31:19,313 --> 0:31:20,480
我来告诉你如何创建

896
00:31:20,547 --> 0:31:21,515
树的阶层 从而

897
00:31:21,582 --> 0:31:23,116
改善引导体验

898
00:31:24,151 --> 0:31:26,286
依旧是

899
00:31:28,322 --> 0:31:31,091
表格本身有三个

900
00:31:31,158 --> 0:31:32,292
辅助功能元素

901
00:31:32,893 --> 0:31:33,994
旁白会

902
00:31:34,061 --> 0:31:35,829
按序切换 它会表现很好

903
00:31:35,896 --> 0:31:36,797
如果只有一个格子

904
00:31:36,864 --> 0:31:39,099
但实际情况是

905
00:31:39,166 --> 0:31:40,501
你的app会有

906
00:31:40,567 --> 0:31:41,401
几百个

907
00:31:42,102 --> 0:31:43,136
你看这个树

908
00:31:43,203 --> 0:31:44,304
有一堆元素

909
00:31:44,838 --> 0:31:46,273
但没有什么帮助

910
00:31:46,340 --> 0:31:47,241
都是重复的

911
00:31:47,307 --> 0:31:48,509
关注和

912
00:31:48,575 --> 0:31:49,409
分享按钮

913
00:31:50,010 --> 0:31:50,878
对于关注按钮

914
00:31:50,944 --> 0:31:52,479
你怎么知道是

915
00:31:52,546 --> 0:31:54,882
第五 还是第六个人

916
00:31:55,315 --> 0:31:56,283
我们只能寻找

917
00:31:56,350 --> 0:31:57,184
其他提示

918
00:31:57,918 --> 0:31:59,086
其实可以

919
00:31:59,720 --> 0:32:02,890
我们创建一个

920
00:31:59,720 --> 0:32:02,890
我们创建一个

921
00:32:02,956 --> 0:32:04,324
辅助功能元素

922
00:32:04,391 --> 0:32:05,392
级别高于视图

923
00:32:05,459 --> 0:32:06,293
树

924
00:32:07,327 --> 0:32:08,562
找到一个视图

925
00:32:08,629 --> 0:32:09,763
作为父节点

926
00:32:09,830 --> 0:32:11,698
然后在这里创建

927
00:32:11,765 --> 0:32:12,599
新元素

928
00:32:13,734 --> 0:32:15,435
这里使用

929
00:32:19,606 --> 0:32:20,674
使用辅助功能

930
00:32:20,741 --> 0:32:22,342
元素函数在HStack

931
00:32:22,543 --> 0:32:23,443
创建新元素

932
00:32:24,444 --> 0:32:26,480
.combine会整合

933
00:32:26,547 --> 0:32:28,115
子节点的辅助功能

934
00:32:28,182 --> 0:32:29,483
放入一个元素

935
00:32:30,584 --> 0:32:32,753
这里 文本视图会

936
00:32:32,819 --> 0:32:35,255
提供元素标签

937
00:32:35,322 --> 0:32:37,691
自动转换成

938
00:32:41,195 --> 0:32:42,629
旁白现在只有

939
00:32:42,696 --> 0:32:44,164
一个元素

940
00:32:44,231 --> 0:32:46,600
会读出人名和

941
00:32:46,667 --> 0:32:49,102
可用的动作

942
00:32:56,109 --> 0:32:56,944
通过这些修改

943
00:32:57,010 --> 0:32:58,378
我们减少了大量的

944
00:32:58,445 --> 0:32:59,413
树元素

945
00:33:00,147 --> 0:33:01,315
你可以逐个切换

946
00:33:01,381 --> 0:33:02,449
随你意愿

947
00:33:03,884 --> 0:33:05,285
使用按钮

948
00:33:05,485 --> 0:33:07,120
通过自定义动作

949
00:33:07,921 --> 0:33:09,590
整合相关的UI

950
00:33:09,656 --> 0:33:11,558
是简单又好用的方法

951
00:33:11,625 --> 0:33:13,627
完善app的导航

952
00:33:16,029 --> 0:33:17,097
另外一个重要的

953
00:33:17,164 --> 0:33:18,832
引导和辅助组件是

954
00:33:18,899 --> 0:33:19,733
排序

955
00:33:20,767 --> 0:33:21,802
某些情况下

956
00:33:21,869 --> 0:33:22,736
你会发现默认

957
00:33:22,803 --> 0:33:23,804
排序不能达到

958
00:33:23,871 --> 0:33:24,972
你预期的体验

959
00:33:26,073 --> 0:33:28,442
你也许注意到

960
00:33:28,509 --> 0:33:30,010
颜色重置按钮实际上是

961
00:33:30,077 --> 0:33:31,111
横向排序的第二个

962
00:33:31,178 --> 0:33:32,012
元素

963
00:33:32,946 --> 0:33:34,348
这两个元素的排列为

964
00:33:34,414 --> 0:33:36,183
ZStack 元素的排列

965
00:33:36,250 --> 0:33:37,618
默认为从后向前

966
00:33:38,919 --> 0:33:40,120
视觉上 按钮

967
00:33:40,187 --> 0:33:41,622
出现在对比度

968
00:33:41,688 --> 0:33:42,523
上方

969
00:33:42,689 --> 0:33:45,192
那么我们就要

970
00:33:45,259 --> 0:33:46,560
转换位置

971
00:33:47,661 --> 0:33:48,996
自定义排序使用

972
00:33:49,062 --> 0:33:49,897
sortPriority

973
00:33:53,400 --> 0:33:54,735
所有元素都默认

974
00:33:54,801 --> 0:33:55,736
sortPriority为0

975
00:33:56,436 --> 0:33:58,105
容器里的元素

976
00:33:58,172 --> 0:33:59,439
从低到高排列

977
00:33:59,506 --> 0:34:00,340
优先级

978
00:33:59,506 --> 0:34:00,340
优先级

979
00:34:01,208 --> 0:34:02,509
sortPriority的设置

980
00:34:02,809 --> 0:34:03,911
可调用辅助功能

981
00:34:03,977 --> 0:34:05,913
修改器函数并设置

982
00:34:05,979 --> 0:34:06,980
sortPriority参数

983
00:34:08,982 --> 0:34:12,252
给按钮的

984
00:34:12,319 --> 0:34:14,087
由于对比度的优先级为0

985
00:34:14,154 --> 0:34:15,856
扫描时 按钮排

986
00:34:15,922 --> 0:34:18,125
第一 对比度排

987
00:34:18,192 --> 0:34:19,025
第二

988
00:34:23,330 --> 0:34:26,166
辅助功能API可以

989
00:34:26,233 --> 0:34:27,266
让你的app更好

990
00:34:27,333 --> 0:34:28,168
理解

991
00:34:29,203 --> 0:34:30,571
它允许增加上下文

992
00:34:30,637 --> 0:34:32,505
通过加标签 值和线索

993
00:34:32,840 --> 0:34:33,674
用辅助功能

994
00:34:33,739 --> 0:34:34,608
函数

995
00:34:34,675 --> 0:34:38,110
辅助功能动作函数

996
00:34:38,178 --> 0:34:40,013
可以添加动作

997
00:34:40,080 --> 0:34:41,715
让你的app更有

998
00:34:42,081 --> 0:34:45,552
最后你可以用

999
00:34:45,619 --> 0:34:47,020
辅助功能元素函数

1000
00:34:47,321 --> 0:34:48,455
整合元素

1001
00:34:48,722 --> 0:34:49,690
完善导航

1002
00:34:50,357 --> 0:34:55,094
通过自带辅助功能和

1003
00:34:55,161 --> 0:34:56,330
简单地提升

1004
00:34:56,396 --> 0:34:59,766
辅助API SwiftUI让

1005
00:34:59,833 --> 0:35:00,968
app更普惠

1006
00:34:59,833 --> 0:35:00,968
app更普惠

1007
00:35:01,235 --> 0:35:02,469
更快 更简便

1008
00:35:03,604 --> 0:35:04,471
请Michael回到台上

1009
00:35:14,348 --> 0:35:16,583
好的 最后我们

1010
00:35:16,650 --> 0:35:17,851
总结一下

1011
00:35:18,752 --> 0:35:20,020
还有最后

1012
00:35:20,087 --> 0:35:20,921
一点

1013
00:35:21,188 --> 0:35:22,422
如果你将所有这些

1014
00:35:22,489 --> 0:35:23,957
放入辅助功能

1015
00:35:24,024 --> 0:35:25,559
你怎么知道app

1016
00:35:25,626 --> 0:35:26,860
一定能成功？

1017
00:35:27,794 --> 0:35:29,296
这里有两条建议

1018
00:35:29,363 --> 0:35:30,197
供你参考

1019
00:35:30,998 --> 0:35:32,666
首先 没有可代替的工具

1020
00:35:32,733 --> 0:35:34,334
使用app

1021
00:35:34,401 --> 0:35:35,536
也就是要尝试

1022
00:35:35,602 --> 0:35:37,371
真正的辅助功能

1023
00:35:37,437 --> 0:35:39,039
比如旁白 全键盘

1024
00:35:39,106 --> 0:35:40,474
访问和Voice Control

1025
00:35:41,241 --> 0:35:42,843
例如 如果你使用

1026
00:35:42,910 --> 0:35:44,511
旁白在你的app

1027
00:35:44,578 --> 0:35:45,879
你不能改善

1028
00:35:45,946 --> 0:35:47,214
声音方面

1029
00:35:47,381 --> 0:35:49,216
但你需要

1030
00:35:49,283 --> 0:35:51,084
观察屏幕

1031
00:35:51,151 --> 0:35:52,419
做些完善

1032
00:35:52,853 --> 0:35:54,021
如果你的app使用

1033
00:35:54,087 --> 0:35:55,155
Voice Control

1034
00:35:55,222 --> 0:35:56,890
你就不能改变

1035
00:35:56,957 --> 0:35:58,292
如果你的app使用

1036
00:35:58,358 --> 0:35:59,593
全键盘访问

1037
00:35:59,660 --> 0:36:00,894
你就不能改变

1038
00:35:59,660 --> 0:36:00,894
你就不能改变

1039
00:36:00,961 --> 0:36:02,829
键盘 你还有

1040
00:36:02,896 --> 0:36:05,666
其他可做的

1041
00:36:05,933 --> 0:36:07,334
第二

1042
00:36:07,401 --> 0:36:08,802
辅助功能检查器

1043
00:36:09,536 --> 0:36:10,737
这个产品由

1044
00:36:10,804 --> 0:36:12,239
Xcode完成 帮助你

1045
00:36:12,306 --> 0:36:14,074
深入了解app的

1046
00:36:14,141 --> 0:36:14,975
辅助性

1047
00:36:15,142 --> 0:36:17,277
这个辅助功能检查器

1048
00:36:17,344 --> 0:36:19,046
不能代替app测试

1049
00:36:19,112 --> 0:36:20,314
实际的辅助功能

1050
00:36:20,380 --> 0:36:22,216
但可以作为

1051
00:36:22,282 --> 0:36:24,117
强大的工具 去了解

1052
00:36:24,184 --> 0:36:26,453
辅助功能树以及解决

1053
00:36:26,520 --> 0:36:27,354
问题

1054
00:36:28,255 --> 0:36:29,122
推荐一些很棒的

1055
00:36:29,189 --> 0:36:31,458
关于检查器的讲座

1056
00:36:33,660 --> 0:36:35,495
那么 总结几点

1057
00:36:35,562 --> 0:36:36,430
今天的内容

1058
00:36:37,898 --> 0:36:39,633
我们十分努力

1059
00:36:39,800 --> 0:36:42,035
在Apple 为了打造

1060
00:36:42,102 --> 0:36:44,004
让你的app面向更多客户

1061
00:36:44,071 --> 0:36:45,305
从根本上

1062
00:36:46,473 --> 0:36:48,342
在设计SwiftUI时

1063
00:36:48,408 --> 0:36:50,010
时刻谨记辅助功能

1064
00:36:50,077 --> 0:36:50,911
从头至尾

1065
00:36:51,411 --> 0:36:53,981
今天讲到了什么是

1066
00:36:54,047 --> 0:36:55,415
优秀的辅助功能

1067
00:36:55,482 --> 0:36:56,416
界面

1068
00:36:56,483 --> 0:36:57,417
虽然讲的很深

1069
00:36:57,484 --> 0:36:58,519
但重点是

1070
00:36:58,752 --> 0:37:00,754
易于理解 可以交互

1071
00:36:58,752 --> 0:37:00,754
易于理解 可以交互

1072
00:37:01,188 --> 0:37:02,055
便于引导

1073
00:37:04,958 --> 0:37:07,294
除了基本内容

1074
00:37:07,361 --> 0:37:09,429
SwiftUI有强大的

1075
00:37:09,496 --> 0:37:11,265
辅助功能API

1076
00:37:11,331 --> 0:37:12,165
可用

1077
00:37:12,900 --> 0:37:15,169
这个API现在已经

1078
00:37:15,235 --> 0:37:17,171
统一用于所有

1079
00:37:17,237 --> 0:37:18,639
因此你只需学习

1080
00:37:18,705 --> 0:37:19,540
一次

1081
00:37:26,046 --> 0:37:28,282
两份有用的资料

1082
00:37:28,348 --> 0:37:29,716
首先我们会公开

1083
00:37:29,783 --> 0:37:31,051
本场的样本代码

1084
00:37:31,118 --> 0:37:32,519
点击屏幕上方

1085
00:37:32,586 --> 0:37:33,420
就可找到

1086
00:37:33,754 --> 0:37:35,255
第二 本场演讲过后

1087
00:37:35,322 --> 0:37:36,723
我们会举办

1088
00:37:36,790 --> 0:37:38,325
辅助功能实验室

1089
00:37:38,725 --> 0:37:40,794
来加入我们

1090
00:37:40,861 --> 0:37:41,828
聊聊SwiftUI

1091
00:37:41,895 --> 0:37:42,729
和辅助功能

1092
00:37:43,197 --> 0:37:45,098
我们期待

1093
00:37:46,600 --> 0:37:48,635
我们十分激动看到

1094
00:37:48,702 --> 0:37:50,103
辅助app的新时代

1095
00:37:50,170 --> 0:37:51,939
由你用SwiftUI创造

1096
00:37:52,506 --> 0:37:53,407
感谢观看
