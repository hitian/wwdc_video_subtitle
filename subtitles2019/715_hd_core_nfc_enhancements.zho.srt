1
00:00:06,406 --> 0:00:10,344
（关于Core NFC的改进）

2
00:00:15,415 --> 0:00:17,451
大家好 欢迎参加

3
00:00:18,185 --> 0:00:20,521
我希望今年大家都能度过一个

4
00:00:20,921 --> 0:00:23,123
我希望每个人都在昨天的盛典上

5
00:00:23,724 --> 0:00:24,591
我是Gordon

6
00:00:24,658 --> 0:00:26,660
我是Apple NFC

7
00:00:26,960 --> 0:00:29,429
稍后我们的另一位团队成员

8
00:00:30,230 --> 0:00:31,331
现在让我们谈谈NFC

9
00:00:33,033 --> 0:00:34,134
（API变更）

10
00:00:34,201 --> 0:00:35,402
两年前

11
00:00:35,469 --> 0:00:38,572
我们引入了Core NFC框架

12
00:00:38,906 --> 0:00:40,007
用于在app内

13
00:00:40,474 --> 0:00:43,644
去年我们引入了后台标签扫描

14
00:00:43,710 --> 0:00:47,047
用于支持自动发觉NDEF标签

15
00:00:48,015 --> 0:00:48,916
然而自从…

16
00:00:49,216 --> 0:00:51,285
自从我们发布了

17
00:00:51,685 --> 0:00:54,054
开发人员们一直都在请求一件事

18
00:00:54,354 --> 0:00:56,657
在这里 在Apple

19
00:00:57,090 --> 0:00:59,927
今年我们要超级激动地发布

20
00:00:59,993 --> 0:01:02,896
我们支持NDEF标签读取

21
00:00:59,993 --> 0:01:02,896
我们支持NDEF标签读取

22
00:01:03,764 --> 0:01:05,599
是的 谢谢

23
00:01:07,701 --> 0:01:11,572
app不仅可以读写

24
00:01:11,872 --> 0:01:14,808
你还可以使用标签的本地协议

25
00:01:15,642 --> 0:01:18,912
这极大地影响了你在app内

26
00:01:18,979 --> 0:01:20,013
可以使用NFC实现的功能

27
00:01:20,881 --> 0:01:22,683
比如你可以读取passports

28
00:01:23,217 --> 0:01:26,620
与智能卡通讯

29
00:01:27,387 --> 0:01:30,224
这些在iPhone 7

30
00:01:32,492 --> 0:01:34,328
在我们了解API变更之后

31
00:01:34,394 --> 0:01:37,531
我们要看一下如何在app内

32
00:01:39,700 --> 0:01:41,969
然后我们就深入了解

33
00:01:43,737 --> 0:01:46,773
最后我们做一个演示

34
00:01:49,409 --> 0:01:51,478
先让我们看一下新API变更

35
00:01:54,548 --> 0:01:55,649
快速回顾一下

36
00:01:56,149 --> 0:01:58,185
Core NFC框架的基本结构

37
00:01:58,252 --> 0:01:59,853
保持不变

38
00:02:00,420 --> 0:02:03,323
app将从框架中

39
00:02:04,191 --> 0:02:05,592
然后当会话激活后

40
00:02:05,659 --> 0:02:08,294
你就可以自由地实施NFC操作

41
00:02:11,331 --> 0:02:13,734
每次当阅读器会话被激活时

42
00:02:13,800 --> 0:02:15,569
屏幕上仍将显示标签读取动作表单

43
00:02:18,405 --> 0:02:20,574
新的标签读取和本地标签访问功能

44
00:02:20,641 --> 0:02:22,309
对你的app都可用

45
00:02:22,843 --> 0:02:24,778
然而后台标签扫描功能

46
00:02:24,845 --> 0:02:27,581
仍要求是NDEF格式的标签

47
00:02:30,617 --> 0:02:33,854
同时 现有的60秒最大扫描时间

48
00:02:33,921 --> 0:02:35,455
仍存在于每个阅读器会话中

49
00:02:37,057 --> 0:02:37,991
（阅读器会话）

50
00:02:38,058 --> 0:02:38,959
有什么新功能？

51
00:02:39,726 --> 0:02:42,029
今年有一个新NFC标签阅读器会话

52
00:02:42,429 --> 0:02:45,832
可以让app扫描并连接到标签

53
00:02:45,899 --> 0:02:47,534
基于它们的基础技术

54
00:02:49,236 --> 0:02:51,805
它还允许你停止并重启轮询周期

55
00:02:51,872 --> 0:02:54,208
从而发现新标签

56
00:02:57,411 --> 0:02:59,847
同时我们修改了

57
00:03:00,247 --> 0:03:02,216
让它也支持标签写入

58
00:03:03,083 --> 0:03:05,686
这两个会话将为app

59
00:03:06,253 --> 0:03:07,788
提供NFC标签对象

60
00:03:07,855 --> 0:03:11,725
可以让在与标签进行交互时

61
00:03:14,595 --> 0:03:17,064
这是Core NFC中的

62
00:03:17,831 --> 0:03:20,267
你可以看到它列出了所有

63
00:03:20,834 --> 0:03:26,640
NDEF、ISO7816、MIFARE、

64
00:03:27,441 --> 0:03:30,010
如果你不熟悉NFC技术

65
00:03:30,444 --> 0:03:32,546
我建议你首先了解NDEF

66
00:03:34,381 --> 0:03:35,716
（一般API用法）

67
00:03:35,782 --> 0:03:36,950
让我们回顾一下

68
00:03:37,017 --> 0:03:38,752
在Core NFC中

69
00:03:39,820 --> 0:03:41,889
首先你需要在Xcode中启动权利

70
00:03:41,955 --> 0:03:42,956
和之前一样

71
00:03:45,158 --> 0:03:48,595
这是一个启动了

72
00:03:49,096 --> 0:03:51,064
执行此操作不需要特殊权限

73
00:03:53,200 --> 0:03:55,836
你可以在这里看到有两种不同功能

74
00:03:55,903 --> 0:03:58,172
第一是NDEF

75
00:03:58,939 --> 0:04:00,440
（Xcode配置）

76
00:03:58,939 --> 0:04:00,440
（Xcode配置）

77
00:04:00,507 --> 0:04:01,775
（一般API用法）

78
00:04:02,042 --> 0:04:05,379
接下来你要决定你的app需要什么

79
00:04:05,445 --> 0:04:08,315
NDEF或本地访问

80
00:04:10,317 --> 0:04:12,920
你需要实施新协议委托回调

81
00:04:12,986 --> 0:04:14,421
来接收新标签对象

82
00:04:17,324 --> 0:04:18,291
一旦你有了标签对象

83
00:04:18,358 --> 0:04:20,726
你要使用阅读器会话连接到标签

84
00:04:23,363 --> 0:04:26,133
那时你就可以自由地使用标签对象

85
00:04:26,200 --> 0:04:27,334
实施全部交互了

86
00:04:29,770 --> 0:04:30,871
最后当你完成后

87
00:04:30,938 --> 0:04:34,441
使会话无效并释放标签

88
00:04:36,577 --> 0:04:37,611
（NDEF标签写入）

89
00:04:37,678 --> 0:04:39,079
好吧 我之前提到过

90
00:04:39,146 --> 0:04:43,984
如果你刚接触NFC 先了解一下

91
00:04:44,751 --> 0:04:47,888
它是向app中添加NFC功能

92
00:04:48,889 --> 0:04:51,425
新标签运行支持

93
00:04:51,491 --> 0:04:54,394
进行快速实施和原型设计

94
00:04:54,461 --> 0:04:55,429
无论它是什么类型

95
00:04:56,697 --> 0:04:59,333
举个例子NDEF标签可以采用

96
00:04:59,399 --> 0:05:03,270
可以轻松地集成到许多现有用例中

97
00:04:59,399 --> 0:05:03,270
可以轻松地集成到许多现有用例中

98
00:05:04,471 --> 0:05:05,672
要更进一步

99
00:05:06,073 --> 0:05:08,509
在NFC中使用新标签写入支持

100
00:05:08,575 --> 0:05:10,177
你可以直接从iOS中

101
00:05:10,611 --> 0:05:12,346
创建与后台标签扫描

102
00:05:12,412 --> 0:05:13,547
相兼容的NFC标签

103
00:05:15,048 --> 0:05:16,083
让我们看一下

104
00:05:16,149 --> 0:05:17,084
是的 谢谢

105
00:05:19,486 --> 0:05:22,256
让我们仔细看看

106
00:05:22,322 --> 0:05:23,357
在app中写入

107
00:05:24,625 --> 0:05:27,895
正如我所说过的那样 你需要使用

108
00:05:28,495 --> 0:05:31,665
并且你需要实施

109
00:05:31,732 --> 0:05:33,267
用于接收NDEF标签对象

110
00:05:34,434 --> 0:05:36,603
这将允许app做各种事

111
00:05:36,670 --> 0:05:39,206
比如查询关于标签的

112
00:05:39,840 --> 0:05:41,608
包括它的最大容量

113
00:05:42,476 --> 0:05:44,378
并决定标签是否可写入

114
00:05:45,612 --> 0:05:48,782
你还可以读取NDEF信息

115
00:05:49,416 --> 0:05:50,450
如果标签支持

116
00:05:50,517 --> 0:05:52,853
你甚至可以锁定标签

117
00:05:53,954 --> 0:05:55,055
让我们看一些代码

118
00:05:57,191 --> 0:05:58,525
要开始写入NDEF标签

119
00:05:58,892 --> 0:06:00,961
我们要实例化我们的

120
00:05:58,892 --> 0:06:00,961
我们要实例化我们的

121
00:06:01,762 --> 0:06:03,096
我们提供我们的新委托

122
00:06:04,064 --> 0:06:06,900
并且把invalidateAfterFirstRead

123
00:06:11,738 --> 0:06:13,073
接下来当发现标签后

124
00:06:13,140 --> 0:06:15,576
我们将在这里的新

125
00:06:19,479 --> 0:06:20,547
一旦我们有标签之后

126
00:06:20,614 --> 0:06:22,549
我们可以把它发送到阅读器会话的

127
00:06:22,616 --> 0:06:23,984
从而连接到标签

128
00:06:24,718 --> 0:06:26,820
此时 你的标签将保持连接

129
00:06:26,887 --> 0:06:30,257
直到你连接到不同的标签 重启轮询

130
00:06:30,891 --> 0:06:31,992
或使会话无效

131
00:06:36,897 --> 0:06:39,132
下一步是在我们连接到标签之后

132
00:06:39,199 --> 0:06:41,368
查询NDEF信息

133
00:06:42,169 --> 0:06:43,737
如果标签返回一个读写状态

134
00:06:43,804 --> 0:06:46,673
我们就可以自由地把新信息写入标签

135
00:06:50,477 --> 0:06:52,980
下一步是使用我们的有效载荷

136
00:06:53,046 --> 0:06:53,981
创建NFC NDEF信息

137
00:06:54,414 --> 0:06:57,451
并把它发送到标签的

138
00:07:02,189 --> 0:07:04,791
最后当我们都完成后

139
00:07:05,259 --> 0:07:07,961
这会终止全部NFC操作并结束会话

140
00:07:09,329 --> 0:07:10,697
就是这样 很简单 对吧？

141
00:07:11,265 --> 0:07:13,267
这是在app内写入NDEF标签

142
00:07:14,801 --> 0:07:16,703
可能有一些用例

143
00:07:16,770 --> 0:07:18,639
你需要使用非NDEF格式的标签

144
00:07:19,072 --> 0:07:21,341
为此 我们需要使用本地标签访问

145
00:07:22,009 --> 0:07:23,110
让我们具体看一下

146
00:07:25,512 --> 0:07:27,047
（本地标签读取

147
00:07:27,548 --> 0:07:30,083
让我们先看ISO7816

148
00:07:30,551 --> 0:07:35,389
ISO7816接口用于

149
00:07:36,657 --> 0:07:38,559
用于各种不同的用例

150
00:07:39,126 --> 0:07:42,930
包括电子IDS

151
00:07:43,530 --> 0:07:46,867
与智能卡通讯、付款和运输系统

152
00:07:48,001 --> 0:07:49,636
支持7816的标签

153
00:07:49,937 --> 0:07:52,906
利用app协议数据单元接口

154
00:07:53,640 --> 0:07:55,609
通常缩写为APDU

155
00:07:56,310 --> 0:07:59,379
app可以使用7816标签对象

156
00:07:59,446 --> 0:08:01,782
发送和接收APDU命令

157
00:07:59,446 --> 0:08:01,782
发送和接收APDU命令

158
00:08:03,851 --> 0:08:05,319
与7816标签进行交互

159
00:08:05,385 --> 0:08:07,187
有一些特殊要求

160
00:08:07,921 --> 0:08:09,990
在我们查看代码之前

161
00:08:13,393 --> 0:08:17,531
首先app需要向它的

162
00:08:17,598 --> 0:08:21,568
声明具体的app标识符或AIDs

163
00:08:22,002 --> 0:08:23,804
这个标识符是app打算要使用的

164
00:08:26,840 --> 0:08:28,842
接下来一旦Core NFC

165
00:08:29,343 --> 0:08:32,011
它首先会检查该标签是否支持

166
00:08:32,078 --> 0:08:34,181
你在app的info.plist

167
00:08:35,015 --> 0:08:38,986
它将轮流选择每个AID

168
00:08:40,020 --> 0:08:42,756
那时将调用Delegate回调

169
00:08:42,823 --> 0:08:45,926
并且你将收到预先选择了

170
00:08:47,027 --> 0:08:48,061
然而此时

171
00:08:48,128 --> 0:08:50,330
你可以自由地选择

172
00:08:50,697 --> 0:08:52,165
在info.plist文件中

173
00:08:58,906 --> 0:09:01,074
对于Core NFC中的

174
00:08:58,906 --> 0:09:01,074
对于Core NFC中的

175
00:09:01,141 --> 0:09:04,244
然而 我们暂时不支持读取支付卡

176
00:09:07,748 --> 0:09:09,983
这是app的info.plist

177
00:09:10,317 --> 0:09:12,085
列出了它打算使用的AIDs

178
00:09:14,054 --> 0:09:18,125
在这里你可以看到app列出了

179
00:09:18,959 --> 0:09:20,527
（ISO7816 AID列表）

180
00:09:23,830 --> 0:09:26,600
现在我们要看一下实际的

181
00:09:27,701 --> 0:09:31,538
协议有特定于7816技术的属性

182
00:09:32,873 --> 0:09:35,275
你可以看到这里的参数包含

183
00:09:35,542 --> 0:09:36,610
和历史字节

184
00:09:37,878 --> 0:09:39,780
有人对这里的唯一ID感到激动吗？

185
00:09:40,080 --> 0:09:42,382
这是我们所收到的第二个

186
00:09:43,684 --> 0:09:46,920
还有个sendCommand方法

187
00:09:46,987 --> 0:09:48,755
传输到标签并接收响应

188
00:09:52,759 --> 0:09:55,295
要开始扫描7816标签

189
00:09:55,362 --> 0:09:58,065
我们要做的第一件事是

190
00:09:58,131 --> 0:10:01,201
实施遵守NFCTagReaderSession

191
00:09:58,131 --> 0:10:01,201
实施遵守NFCTagReaderSession

192
00:10:01,735 --> 0:10:04,271
只有三个必需方法

193
00:10:09,409 --> 0:10:11,612
要开始扫描7816标签

194
00:10:12,312 --> 0:10:16,350
先实例化NFCTagReaderSession对象

195
00:10:16,950 --> 0:10:19,453
并把轮询操作

196
00:10:19,987 --> 0:10:23,257
这是A类型和B类型标签的

197
00:10:27,294 --> 0:10:30,597
接下来当Core NFC发现

198
00:10:30,664 --> 0:10:32,366
我们会在Delegate回调中

199
00:10:36,336 --> 0:10:39,173
一旦我们确信我们有7816标签

200
00:10:39,573 --> 0:10:42,342
我们就使用阅读器的session.connect

201
00:10:46,513 --> 0:10:47,948
最后当我们连接成功后

202
00:10:48,482 --> 0:10:50,717
使用helper类

203
00:10:50,784 --> 0:10:53,554
并使用与标签相同的命令方法

204
00:10:53,620 --> 0:10:54,755
并接收其响应

205
00:10:58,559 --> 0:10:59,626
在处理过程中

206
00:10:59,693 --> 0:11:02,129
我们可能会发现与app相关的报错

207
00:10:59,693 --> 0:11:02,129
我们可能会发现与app相关的报错

208
00:11:02,196 --> 0:11:03,230
我们不应该再继续

209
00:11:04,064 --> 0:11:06,300
举个例子 假如我们正在尝试

210
00:11:06,867 --> 0:11:08,769
并且看起来我们没有合适的证书

211
00:11:08,836 --> 0:11:11,605
或密码计算错误

212
00:11:12,039 --> 0:11:13,173
在这样的情境中

213
00:11:13,473 --> 0:11:15,442
我们非常希望向用户指出这个错误

214
00:11:16,510 --> 0:11:18,812
用报错信息调用

215
00:11:19,646 --> 0:11:20,948
将使会话无效

216
00:11:21,014 --> 0:11:23,517
并会在动作表单UI上显示错误符号

217
00:11:23,584 --> 0:11:26,220
而不是显示对勾

218
00:11:29,823 --> 0:11:31,959
这是出错指示的一个示例

219
00:11:32,226 --> 0:11:33,527
我们稍后再在演示中具体看一下

220
00:11:34,461 --> 0:11:35,495
但这非常棒 对吗？

221
00:11:35,562 --> 0:11:37,698
这是我们所收到的第三个

222
00:11:43,570 --> 0:11:46,507
这是一个现有的成功指示 以供参考

223
00:11:49,409 --> 0:11:50,611
（本地标签读取

224
00:11:50,677 --> 0:11:52,045
那么这就是7816

225
00:11:52,112 --> 0:11:54,014
让我们继续讲第二个技术

226
00:11:54,948 --> 0:11:57,518
MIFARE技术类似于7816

227
00:11:57,584 --> 0:11:59,453
它基于NFC A类型标签

228
00:12:00,721 --> 0:12:02,589
MIFARE是由

229
00:12:02,656 --> 0:12:05,526
在世界各地的票务和徽章系统中

230
00:12:08,896 --> 0:12:10,631
NFC MIFARE标签协议

231
00:12:11,031 --> 0:12:13,433
属性与7816相似

232
00:12:14,268 --> 0:12:16,737
此外还有另外一个

233
00:12:17,304 --> 0:12:19,773
这将指出

234
00:12:19,840 --> 0:12:20,841
所发现的特定MIFARE标签类型

235
00:12:21,475 --> 0:12:24,578
可以是MIFARE Ultraligh、

236
00:12:25,379 --> 0:12:27,681
目前不支持

237
00:12:28,949 --> 0:12:31,785
这里还有一个用于

238
00:12:32,819 --> 0:12:34,621
此外还有一个便利的方法

239
00:12:34,688 --> 0:12:38,926
用于为标签发送7816 APDU

240
00:12:39,326 --> 0:12:40,394
标签将支持它们

241
00:12:41,762 --> 0:12:43,030
现在让我们在实际操作中看一下

242
00:12:45,165 --> 0:12:46,633
要开始扫描MIFARE标签

243
00:12:47,067 --> 0:12:48,902
再一次 先实例化标签阅读器会话

244
00:12:49,536 --> 0:12:52,606
把轮询选项设置为ISO14443

245
00:12:53,540 --> 0:12:55,976
然后设置Delegate

246
00:12:59,313 --> 0:13:02,716
请注意MIFARE标签

247
00:12:59,313 --> 0:13:02,716
请注意MIFARE标签

248
00:13:03,217 --> 0:13:06,220
并包含在app的info.plist

249
00:13:06,820 --> 0:13:10,824
那会作为7816对象返回

250
00:13:13,594 --> 0:13:15,362
此时 当调用回调时

251
00:13:15,863 --> 0:13:18,932
我们要进行特别检查以确保给我们

252
00:13:22,202 --> 0:13:23,337
一旦我们确保我们有

253
00:13:23,403 --> 0:13:25,439
我们就把它发送到阅读器的

254
00:13:25,506 --> 0:13:26,540
并连接到标签

255
00:13:29,076 --> 0:13:31,578
然后我们使用标签

256
00:13:34,448 --> 0:13:35,749
（本地标签读取

257
00:13:36,283 --> 0:13:38,085
好的 这是四种技术中的两种技术

258
00:13:38,151 --> 0:13:40,220
让我们看一下ISO15693

259
00:13:41,755 --> 0:13:44,057
这也叫做类型五或邻近标签

260
00:13:44,324 --> 0:13:46,727
这些在零售、工业

261
00:13:46,793 --> 0:13:48,195
甚至是医疗app中很常用

262
00:13:51,098 --> 0:13:53,367
再一次 这个协议

263
00:13:53,433 --> 0:13:56,203
有特定

264
00:13:56,870 --> 0:13:58,805
在这里我们还有唯一标识符

265
00:13:59,072 --> 0:14:01,608
以及制造代码和序列号

266
00:13:59,072 --> 0:14:01,608
以及制造代码和序列号

267
00:14:04,511 --> 0:14:05,712
（ISO15693便利方法）

268
00:14:06,046 --> 0:14:08,048
15693的命令集

269
00:14:08,115 --> 0:14:09,716
如果你没见过的话

270
00:14:10,350 --> 0:14:13,453
协议有一些常见操作的便利方法

271
00:14:13,954 --> 0:14:15,255
你可以在这里看到它们

272
00:14:15,856 --> 0:14:18,625
包括读写单个或多个代码块、

273
00:14:19,226 --> 0:14:22,262
锁定代码块、选择和重设

274
00:14:23,263 --> 0:14:26,333
再一次 这里也有一个

275
00:14:26,667 --> 0:14:30,437
你可以按照ISO15693规范

276
00:14:30,971 --> 0:14:32,873
并使用那个方法来发送命令

277
00:14:33,974 --> 0:14:36,677
你可以参考规范获取更多信息

278
00:14:38,278 --> 0:14:39,546
（NFC标签阅读器会话）

279
00:14:40,314 --> 0:14:42,149
要开始扫描邻近标签

280
00:14:42,683 --> 0:14:44,751
现在每个人应该都很熟悉了

281
00:14:46,153 --> 0:14:49,323
我们要创建NFCTagReaderSession

282
00:14:50,057 --> 0:14:53,427
但这一次我们把轮询选项

283
00:14:57,865 --> 0:15:00,300
当Core NFC发现一个

284
00:14:57,865 --> 0:15:00,300
当Core NFC发现一个

285
00:15:00,367 --> 0:15:02,870
再一次 我们将在回调中收到标签

286
00:15:06,273 --> 0:15:08,442
我们再一次验证

287
00:15:08,509 --> 0:15:10,844
然后使用sessions.connect

288
00:15:14,515 --> 0:15:17,851
一旦连接成功 我们就使用标签

289
00:15:21,388 --> 0:15:22,623
（本地标签读取

290
00:15:22,689 --> 0:15:25,526
最后我们要讲第四种

291
00:15:26,293 --> 0:15:28,028
FeliCa是由Sony定义的

292
00:15:28,095 --> 0:15:30,864
在日本的运输和付款系统中广泛使用

293
00:15:33,700 --> 0:15:36,303
FeliCa的使用

294
00:15:38,939 --> 0:15:40,440
与7816类似

295
00:15:40,507 --> 0:15:43,577
app需要向info.plist

296
00:15:44,044 --> 0:15:47,848
声明app打算要使用的具体的

297
00:15:48,916 --> 0:15:50,384
出于安全和隐私考虑

298
00:15:50,450 --> 0:15:53,020
我们要求是谨慎的

299
00:15:53,086 --> 0:15:54,421
而不是通配符记录

300
00:15:55,489 --> 0:15:56,990
（FeliCa要求）

301
00:15:57,057 --> 0:15:58,992
类似于7816

302
00:15:59,326 --> 0:16:01,328
当Core NFC

303
00:15:59,326 --> 0:16:01,328
当Core NFC

304
00:16:01,728 --> 0:16:04,865
我们首先验证…

305
00:16:05,199 --> 0:16:06,867
在info.plist文件中

306
00:16:07,701 --> 0:16:09,870
如果包含 你将收到

307
00:16:10,470 --> 0:16:12,506
如果不包含 将不会调用回调

308
00:16:12,573 --> 0:16:15,642
并且app也不会收到

309
00:16:18,645 --> 0:16:20,714
这是info.plist文件的

310
00:16:20,781 --> 0:16:22,482
注册FeliCa系统代码…

311
00:16:23,984 --> 0:16:25,552
以执行NDEF操作

312
00:16:32,392 --> 0:16:34,895
看一下这里的FeliCa标签协议

313
00:16:34,962 --> 0:16:36,763
我们可以看到

314
00:16:37,164 --> 0:16:39,399
我们有制造商ID 或简称IDM

315
00:16:39,666 --> 0:16:41,168
以及当前所选择的系统代码

316
00:16:42,135 --> 0:16:46,273
同时还有sendFeliCaCommand方法

317
00:16:47,307 --> 0:16:48,575
（NFC FELICA

318
00:16:48,642 --> 0:16:50,878
并且这个协议还有一些便利方法

319
00:16:50,944 --> 0:16:52,779
用于执行一些常见的

320
00:16:54,348 --> 0:16:56,950
你可以参考Sony的

321
00:16:57,017 --> 0:16:57,985
获取更多信息

322
00:16:59,653 --> 0:17:01,021
（NFC标签阅读器会话）

323
00:16:59,653 --> 0:17:01,021
（NFC标签阅读器会话）

324
00:17:01,088 --> 0:17:04,124
接着是我们现在应该都很熟悉的

325
00:17:04,992 --> 0:17:06,993
实例化

326
00:17:07,528 --> 0:17:08,628
并把它提供给委托

327
00:17:08,962 --> 0:17:12,065
这一次把轮询选项

328
00:17:12,532 --> 0:17:14,268
这是Felica的NFC技术

329
00:17:17,871 --> 0:17:20,941
一旦Core NFC发现一个标签

330
00:17:21,008 --> 0:17:23,377
我们会再一次在同样的委托中

331
00:17:25,479 --> 0:17:27,848
我们确保拥有我们所期待的合适的

332
00:17:27,915 --> 0:17:29,116
然后连接到标签

333
00:17:33,754 --> 0:17:35,022
最后我们使用标签

334
00:17:35,756 --> 0:17:37,491
发送requestResponse方法

335
00:17:38,392 --> 0:17:41,728
我们现在已经讲了使用四种本地技术

336
00:17:41,795 --> 0:17:43,764
写入NDEF标签和与标签相交互

337
00:17:46,166 --> 0:17:48,335
现在我想邀请

338
00:17:48,402 --> 0:17:50,470
给我们做一个演示

339
00:17:57,110 --> 0:17:58,645
好吧 谢谢Gordon

340
00:17:59,580 --> 0:18:00,747
大家好

341
00:17:59,580 --> 0:18:00,747
大家好

342
00:18:01,548 --> 0:18:02,482
欢迎参加我们的演讲

343
00:18:04,685 --> 0:18:07,421
为了在现实示例中演示

344
00:18:07,487 --> 0:18:08,789
如何使用Core NFC框架

345
00:18:09,623 --> 0:18:13,861
让我带你想象一下鱼贩的生活

346
00:18:16,230 --> 0:18:17,798
作为一个技术精通的鱼贩

347
00:18:18,465 --> 0:18:21,368
我听说NFC技术

348
00:18:21,969 --> 0:18:26,306
可以改善客户契合度

349
00:18:27,841 --> 0:18:29,710
在听了这场很棒的演讲之后

350
00:18:30,177 --> 0:18:34,414
我决定创建两个app改善我的买卖

351
00:18:35,115 --> 0:18:36,283
即Great Fish公司

352
00:18:38,051 --> 0:18:39,920
我要以两种方式使用NFC

353
00:18:41,421 --> 0:18:43,090
首先我要创建

354
00:18:43,490 --> 0:18:46,193
NFC NDEF标签

355
00:18:47,361 --> 0:18:49,663
第二 使用

356
00:18:50,030 --> 0:18:51,598
创建优惠码标签

357
00:18:52,232 --> 0:18:55,235
这也叫做

358
00:19:00,674 --> 0:19:03,744
这是我们如何配送产品的概述

359
00:19:04,711 --> 0:19:06,046
在捕鱼后

360
00:19:06,346 --> 0:19:10,951
我们集成NFC NDEF标签

361
00:19:12,186 --> 0:19:15,355
信息包含他们所捕获的鱼

362
00:19:15,856 --> 0:19:17,291
鱼的名称和价格

363
00:19:18,492 --> 0:19:21,061
然后这个标签就被贴到产品包装上

364
00:19:21,128 --> 0:19:23,397
并最终配送给我们的客户

365
00:19:24,398 --> 0:19:28,035
我要创建的第一个app叫做

366
00:19:29,503 --> 0:19:30,804
看起来是这样的

367
00:19:32,806 --> 0:19:35,042
一旦我在app中输入全部信息

368
00:19:36,009 --> 0:19:39,813
我可以点击“写入标签”按钮

369
00:19:41,048 --> 0:19:44,418
Fish Tag Creator app

370
00:19:44,952 --> 0:19:47,421
NFC优惠码进行促销

371
00:19:49,056 --> 0:19:50,958
我使用

372
00:19:51,024 --> 0:19:54,027
存储特定的优惠码

373
00:19:55,696 --> 0:19:59,566
在这里我可以从三个可能的优惠值中

374
00:20:00,434 --> 0:20:03,804
我要创建的第二个app叫做

375
00:20:05,138 --> 0:20:07,641
我的客户可以从App Store

376
00:20:08,175 --> 0:20:11,478
并读取他们所购产品上的

377
00:20:13,614 --> 0:20:16,683
在第一个选项卡中

378
00:20:17,651 --> 0:20:19,319
可以扫描鱼随附的鱼标签

379
00:20:21,188 --> 0:20:23,857
然后app就显示它在标签中

380
00:20:24,591 --> 0:20:25,626
在第二个选项卡中

381
00:20:25,959 --> 0:20:30,130
我们可以点击“扫描优惠码”按钮

382
00:20:30,564 --> 0:20:31,532
优惠码标签

383
00:20:32,299 --> 0:20:34,935
客户可以在将来购买时兑换此优惠码

384
00:20:36,503 --> 0:20:38,939
现在让我们在实际操作中看一下

385
00:20:44,845 --> 0:20:46,446
好吧 我基本上…

386
00:20:48,148 --> 0:20:51,552
把Fish Tag Reader app

387
00:20:53,620 --> 0:20:55,155
今天我带来了一条

388
00:20:56,089 --> 0:20:57,891
创意彩虹鲑鱼

389
00:21:02,462 --> 0:21:05,365
先选择今天日期和鱼的名称

390
00:21:05,832 --> 0:21:06,834
鱼的名字叫做

391
00:21:07,835 --> 0:21:10,037
好的 这条鱼显然很大 对吧

392
00:21:13,574 --> 0:21:15,542
现在我要点击“写入标签”按钮

393
00:21:17,110 --> 0:21:18,312
将显示动作表单

394
00:21:18,579 --> 0:21:21,882
此时我可以把手机靠近NDEF标签

395
00:21:25,052 --> 0:21:25,886
宾果

396
00:21:27,955 --> 0:21:31,758
接下来我要给你们创建一个优惠标签

397
00:21:33,327 --> 0:21:35,529
我要选择“创建优惠码”按钮

398
00:21:37,764 --> 0:21:39,466
我要选择打五折

399
00:21:39,800 --> 0:21:43,003
因为 你知道的

400
00:21:45,906 --> 0:21:47,841
好吧 让我点击按钮

401
00:21:48,509 --> 0:21:50,344
屏幕上再次显示动作表单

402
00:21:50,711 --> 0:21:53,847
现在我用手机靠近优惠标签

403
00:21:55,983 --> 0:21:56,917
瞧！

404
00:21:59,920 --> 0:22:04,191
好的 现在我要切换到

405
00:21:59,920 --> 0:22:04,191
好的 现在我要切换到

406
00:22:05,292 --> 0:22:07,027
重新测试全部NFC标签

407
00:22:09,696 --> 0:22:11,198
在这里我打开了app

408
00:22:12,633 --> 0:22:14,334
我要按“扫描标签”按钮

409
00:22:14,701 --> 0:22:16,036
并读取我的NDEF鱼标签

410
00:22:22,075 --> 0:22:24,444
现在屏幕上显示了对于产品的描述

411
00:22:25,646 --> 0:22:26,780
哇哦 很酷

412
00:22:27,314 --> 0:22:31,785
好吧 现在我要试着扫描优惠码标签

413
00:22:32,586 --> 0:22:35,088
我要选择第二个选项卡

414
00:22:35,656 --> 0:22:37,824
点击“扫描优惠码”按钮

415
00:22:44,498 --> 0:22:46,934
好吧 是的 这是鱼打五折的优惠码

416
00:22:48,602 --> 0:22:51,271
好的 现在试着第二次读取优惠码

417
00:22:56,410 --> 0:22:58,011
好的 这不是一个有效的优惠码

418
00:22:59,813 --> 0:23:01,949
在实际操作中

419
00:22:59,813 --> 0:23:01,949
在实际操作中

420
00:23:02,382 --> 0:23:04,084
我要切换到源代码中

421
00:23:04,151 --> 0:23:05,786
看看这是如何实施的

422
00:23:11,859 --> 0:23:14,928
好吧 让我们先看

423
00:23:21,034 --> 0:23:24,705
在这里 我将在我的权利文件中

424
00:23:24,771 --> 0:23:26,039
设置NDEF和本地标签功能

425
00:23:26,840 --> 0:23:29,810
这是因为我要在我的app中

426
00:23:30,344 --> 0:23:31,979
阅读器会话

427
00:23:38,185 --> 0:23:39,586
现在让我们看一下

428
00:23:40,587 --> 0:23:44,892
主视图控制器

429
00:23:54,401 --> 0:23:55,302
在…

430
00:23:58,005 --> 0:23:59,139
抱歉 稍等

431
00:24:03,944 --> 0:24:05,445
在WriteTagAction

432
00:24:05,979 --> 0:24:09,183
我们要实例化

433
00:24:10,817 --> 0:24:12,119
设置警告信息

434
00:24:13,520 --> 0:24:15,656
并调用Begin方法开始会话

435
00:24:23,497 --> 0:24:24,898
当发现NDEF标签时

436
00:24:25,332 --> 0:24:27,434
会把它发送到Delegate函数

437
00:24:29,436 --> 0:24:30,704
我们连接到标签

438
00:24:32,206 --> 0:24:34,908
并调用

439
00:24:37,711 --> 0:24:40,814
如果标签可写入

440
00:24:41,215 --> 0:24:44,384
我们就调用

441
00:24:46,353 --> 0:24:49,756
最后我们调用

442
00:24:51,892 --> 0:24:53,727
现在让我们看看优惠码是如何创建的

443
00:25:01,034 --> 0:25:03,737
在这里我们有

444
00:25:05,005 --> 0:25:07,741
我们实例化

445
00:25:09,109 --> 0:25:11,178
调用setAlert信息

446
00:25:12,112 --> 0:25:14,248
并调用beginFunction

447
00:25:23,190 --> 0:25:26,727
在这里我们在

448
00:25:27,027 --> 0:25:28,128
特别查找MIFARE Ultralight

449
00:25:29,463 --> 0:25:30,831
当找到标签后

450
00:25:31,632 --> 0:25:34,668
我们连接到它并启动写入操作

451
00:25:42,142 --> 0:25:43,277
要写入标签

452
00:25:44,011 --> 0:25:46,847
我们要创建一个优惠码

453
00:25:47,714 --> 0:25:51,185
然后调用sendMIFARE命令

454
00:25:52,719 --> 0:25:54,855
当完成所有写入操作之后

455
00:25:56,723 --> 0:25:58,125
就使会话无效

456
00:26:02,329 --> 0:26:03,964
我们既使用了NDEF

457
00:26:04,231 --> 0:26:07,234
又使用了本地标签阅读器会话

458
00:26:08,101 --> 0:26:11,905
现在让我们一起看一下

459
00:26:20,814 --> 0:26:24,218
NFCTagReaderSession

460
00:26:24,284 --> 0:26:25,886
用于实施NDEF操作

461
00:26:27,621 --> 0:26:28,856
我们在这里使用了这些方法

462
00:26:29,890 --> 0:26:36,597
然而它要求我们向info.plist

463
00:26:36,663 --> 0:26:39,967
添加7816 AID

464
00:26:40,868 --> 0:26:41,835
如这里所示

465
00:26:50,410 --> 0:26:52,546
在扫描视图控制器中

466
00:26:57,918 --> 0:27:00,187
我们有ScanTag动作函数

467
00:26:57,918 --> 0:27:00,187
我们有ScanTag动作函数

468
00:27:02,089 --> 0:27:05,092
在这里我们创建一个

469
00:27:06,960 --> 0:27:08,161
设置警告信息

470
00:27:09,663 --> 0:27:11,298
和CallBegins

471
00:27:12,132 --> 0:27:13,767
从而开始写入Reader动作函数

472
00:27:21,208 --> 0:27:22,776
当找到NFC标签之后

473
00:27:23,110 --> 0:27:25,812
就把标签提交到

474
00:27:28,382 --> 0:27:29,616
我们连接到标签

475
00:27:30,751 --> 0:27:32,619
并实施NDEF状态查询

476
00:27:35,122 --> 0:27:36,590
如果标签可读取

477
00:27:37,090 --> 0:27:39,193
就调用readNDEF方法

478
00:27:46,700 --> 0:27:47,835
现在让我们…

479
00:27:47,901 --> 0:27:51,338
最后我们实际上要通过调用

480
00:27:57,377 --> 0:27:59,680
现在让我们看一下如何读取

481
00:28:06,753 --> 0:28:09,323
在这里我们有一个

482
00:28:09,957 --> 0:28:10,991
跟以前一样

483
00:28:11,325 --> 0:28:14,094
我们实例化一个

484
00:28:15,896 --> 0:28:17,130
设置警告信息

485
00:28:18,198 --> 0:28:20,133
通过调用Begin开始会话实现

486
00:28:26,807 --> 0:28:27,875
当找到标签后

487
00:28:28,442 --> 0:28:30,911
检查标签是否是

488
00:28:32,246 --> 0:28:33,213
如果是

489
00:28:34,481 --> 0:28:35,682
我们就连接到标签

490
00:28:42,756 --> 0:28:46,460
要读取标签 我们要调用

491
00:28:48,595 --> 0:28:50,097
然后验证队列点

492
00:28:52,232 --> 0:28:56,970
最后调用Invalidate

493
00:28:59,706 --> 0:29:01,175
如果优惠码无效

494
00:28:59,706 --> 0:29:01,175
如果优惠码无效

495
00:29:02,242 --> 0:29:04,912
我们就调用

496
00:29:09,416 --> 0:29:11,218
这就是使用Core NFC框架

497
00:29:11,285 --> 0:29:14,421
创建一款优秀的app所需要做的

498
00:29:14,988 --> 0:29:16,056
舞台交还给Gordon

499
00:29:24,331 --> 0:29:25,299
谢谢Lawrence

500
00:29:28,135 --> 0:29:30,604
我们希望新标签写入和本地访问

501
00:29:30,671 --> 0:29:33,106
可以让你们向你们的app中

502
00:29:33,774 --> 0:29:36,109
如我们所见

503
00:29:36,743 --> 0:29:38,979
让我们快速回顾一下

504
00:29:39,613 --> 0:29:42,683
首先确定app要求哪种类型的

505
00:29:43,350 --> 0:29:45,485
NDEF、本地访问或两者都有

506
00:29:48,789 --> 0:29:51,558
实施newDelegate方法

507
00:29:53,360 --> 0:29:54,628
一旦你拥有标签对象

508
00:29:54,895 --> 0:29:57,764
使用这些对象实施全部读写操作

509
00:29:59,266 --> 0:30:02,636
当你全部完成之后

510
00:29:59,266 --> 0:30:02,636
当你全部完成之后

511
00:30:02,970 --> 0:30:04,738
使用合适的Invalidate

512
00:30:06,473 --> 0:30:07,407
就这样

513
00:30:08,509 --> 0:30:09,977
（要获取更多信息请访问

514
00:30:10,043 --> 0:30:12,212
今天我们所讲到的全部示例代码

515
00:30:12,279 --> 0:30:13,680
全部在线可用

516
00:30:14,648 --> 0:30:16,083
并附带其它信息

517
00:30:16,750 --> 0:30:19,520
现在iOS 13和

518
00:30:19,987 --> 0:30:21,321
每个人都应该下载它们

519
00:30:21,388 --> 0:30:23,490
并使用Core NFC

520
00:30:25,192 --> 0:30:26,293
如果你有任何疑问

521
00:30:26,360 --> 0:30:29,429
本场演讲结束之后就有一场

522
00:30:31,598 --> 0:30:32,933
欢迎大家参加
