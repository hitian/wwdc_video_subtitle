1
00:00:06,640 --> 0:00:08,609
（使用Core Data

2
00:00:08,675 --> 0:00:10,010
大家好

3
00:00:14,414 --> 0:00:16,583
欢迎来到“通过Core Data

4
00:00:16,650 --> 0:00:18,919
我是Scott Perry

5
00:00:18,986 --> 0:00:22,689
今天 我们要做一次快速回顾

6
00:00:22,756 --> 0:00:24,458
重点是最佳实践

7
00:00:25,025 --> 0:00:27,094
主题有建立和运行

8
00:00:27,160 --> 0:00:29,930
设置app控制器

9
00:00:29,997 --> 0:00:33,033
以及使用多个协调器

10
00:00:33,100 --> 0:00:34,835
和相关缩放

11
00:00:35,135 --> 0:00:38,038
最后总结一些有用的测试技巧

12
00:00:39,473 --> 0:00:40,641
现在开始吧

13
00:00:40,707 --> 0:00:42,543
今年发布了一个新的样本app

14
00:00:42,609 --> 0:00:45,045
演讲202中已经演示过了

15
00:00:45,345 --> 0:00:48,048
从发布列表开始

16
00:00:49,383 --> 0:00:52,553
点击上方+ 可以添加新发布

17
00:00:53,420 --> 0:00:56,056
仔细看下细节视图

18
00:00:56,356 --> 0:00:58,458
这是类似于博客的app

19
00:00:58,525 --> 0:01:02,863
支持题目 内容 多个标签

20
00:00:58,525 --> 0:01:02,863
支持题目 内容 多个标签

21
00:01:02,930 --> 0:01:04,831
以及多媒体附件

22
00:01:04,897 --> 0:01:07,067
就像这个缩略图

23
00:01:08,235 --> 0:01:12,072
我们改一下标题 再添加一个标签

24
00:01:14,274 --> 0:01:15,142
你好

25
00:01:16,577 --> 0:01:17,444
好了

26
00:01:17,511 --> 0:01:20,681
保存 然后回到列表视图

27
00:01:22,349 --> 0:01:23,684
现在看看标签管理器

28
00:01:23,750 --> 0:01:26,253
如你所见 这里只有一个标签示例

29
00:01:26,320 --> 0:01:27,788
和三个发布

30
00:01:27,855 --> 0:01:31,024
我们再加两个 一个猫咪

31
00:01:31,091 --> 0:01:34,094
一个狗狗

32
00:01:35,229 --> 0:01:36,730
现在退出

33
00:01:36,797 --> 0:01:38,899
打开小工具栏

34
00:01:38,966 --> 0:01:41,902
选择添加1000个随机发布

35
00:01:42,503 --> 0:01:43,403
好了

36
00:01:44,471 --> 0:01:45,739
再回到标签列表

37
00:01:45,806 --> 0:01:49,910
可以看到狗狗比猫咪更受欢迎

38
00:01:50,110 --> 0:01:51,211
这是科学

39
00:01:54,581 --> 0:01:58,118
以上就是app的样子

40
00:01:58,919 --> 0:02:02,122
最明显的是post类型

41
00:01:58,919 --> 0:02:02,122
最明显的是post类型

42
00:02:02,623 --> 0:02:04,658
我们还支持多媒体附件

43
00:02:04,725 --> 0:02:05,926
就是下一个类型

44
00:02:05,993 --> 0:02:08,729
同理还需要标签类型

45
00:02:09,263 --> 0:02:11,732
但是附件可能很大

46
00:02:11,798 --> 0:02:13,834
所以要将数据分别保存

47
00:02:13,901 --> 0:02:16,803
毕竟列表视图只显示缩略图

48
00:02:16,870 --> 0:02:19,139
大件数据可以存到别的地方

49
00:02:20,541 --> 0:02:22,543
数据结构就组织好了

50
00:02:22,609 --> 0:02:26,613
它可以很直观地转换成

51
00:02:26,680 --> 0:02:28,682
用Model Editor

52
00:02:29,316 --> 0:02:32,252
这里定义了模型类型的组成

53
00:02:32,319 --> 0:02:35,155
以及它们的关系

54
00:02:35,956 --> 0:02:38,859
比如附件和对应数据的关系

55
00:02:38,926 --> 0:02:40,160
是一对一

56
00:02:40,661 --> 0:02:43,630
就是说一个附件背后

57
00:02:43,697 --> 0:02:46,166
一个图像数据也只能代表一个附件

58
00:02:47,434 --> 0:02:49,102
模型中可以告诉Core Data

59
00:02:49,169 --> 0:02:50,737
如果附件被删除

60
00:02:50,804 --> 0:02:53,407
图像数据也要自动清除

61
00:02:53,473 --> 0:02:56,176
这就是串联删除规则

62
00:02:57,644 --> 0:03:01,315
双箭头表示一对多的关系

63
00:02:57,644 --> 0:03:01,315
双箭头表示一对多的关系

64
00:03:01,381 --> 0:03:03,283
一个post可能有多个附件

65
00:03:03,350 --> 0:03:07,187
但一个附件只能属于一个post

66
00:03:07,888 --> 0:03:10,490
最后 post可能带多个标签

67
00:03:10,557 --> 0:03:12,359
标签可以加到不同的post中

68
00:03:12,426 --> 0:03:14,194
这是多对多的关系

69
00:03:17,164 --> 0:03:19,633
以上就定义了一个托管对象模型

70
00:03:19,700 --> 0:03:22,336
但我们还要了解

71
00:03:22,402 --> 0:03:24,204
在搭建app之前

72
00:03:25,072 --> 0:03:27,774
模型通过PersistentStoreCoordinator调用

73
00:03:27,841 --> 0:03:29,309
如字面意思

74
00:03:29,376 --> 0:03:32,212
它负责管理持久化存储

75
00:03:32,713 --> 0:03:35,549
通常 它是存在文件系统的数据库

76
00:03:35,616 --> 0:03:37,518
但它可以一次存储多个存储

77
00:03:37,584 --> 0:03:41,755
包括NSPersistentStore

78
00:03:43,056 --> 0:03:45,692
最后花费时间最多的类型

79
00:03:45,759 --> 0:03:47,694
是ManagedObjectContext

80
00:03:48,328 --> 0:03:49,930
Core Data使用命令模式

81
00:03:49,997 --> 0:03:51,765
说白了就是

82
00:03:51,832 --> 0:03:54,067
需要上下文完成任务

83
00:03:54,334 --> 0:03:57,237
如果请求fetch

84
00:03:57,604 --> 0:03:59,139
通过ManagedObject

85
00:03:59,206 --> 0:04:02,242
Context收到后会存为命令

86
00:03:59,206 --> 0:04:02,242
Context收到后会存为命令

87
00:04:02,943 --> 0:04:05,779
Context

88
00:04:05,846 --> 0:04:07,447
如我之前所说

89
00:04:07,514 --> 0:04:09,149
协调器需要知道模型的存在

90
00:04:09,216 --> 0:04:10,817
才能理解存储

91
00:04:11,385 --> 0:04:13,120
各个类型相互依赖

92
00:04:13,187 --> 0:04:15,522
但协调器提供的一个类型可囊括所有

93
00:04:15,589 --> 0:04:17,291
并代表整个堆栈

94
00:04:17,357 --> 0:04:19,259
叫做持久化容器

95
00:04:20,093 --> 0:04:21,495
通过持久化容器

96
00:04:21,562 --> 0:04:24,064
用几行代码就能搭建一个堆栈

97
00:04:24,131 --> 0:04:26,266
特别是当模型在bundle中时

98
00:04:28,235 --> 0:04:30,070
我们要做的是通过名字引用它

99
00:04:30,137 --> 0:04:32,673
持久化容器就会帮我们加载

100
00:04:34,608 --> 0:04:36,210
如果通过代码生成模型

101
00:04:36,276 --> 0:04:39,546
或需要带多个容器的同一模型

102
00:04:39,613 --> 0:04:42,816
这个初始化器能给我们控制权

103
00:04:44,918 --> 0:04:48,188
有了容器

104
00:04:48,255 --> 0:04:50,791
每次存储调用一次

105
00:04:50,858 --> 0:04:53,293
error参数为空则成功

106
00:04:53,493 --> 0:04:57,731
现在让我们聚焦托管对象上下文

107
00:05:00,000 --> 0:05:03,103
Context提供

108
00:05:03,170 --> 0:05:05,772
有些选项可以让它们更有用

109
00:05:05,839 --> 0:05:08,909
对某些使用案例 比如视图驱动

110
00:05:10,944 --> 0:05:13,780
第一个是查询生成

111
00:05:14,214 --> 0:05:17,351
查询生成提供存储数据的稳定视图

112
00:05:17,417 --> 0:05:19,553
可以安全且持续地访问对象

113
00:05:19,620 --> 0:05:23,524
即使被其他actor修改或删除

114
00:05:24,691 --> 0:05:25,526
为此

115
00:05:25,592 --> 0:05:28,328
设context的查询

116
00:05:28,862 --> 0:05:30,831
current是一个浮动元

117
00:05:30,898 --> 0:05:33,100
context的查询生成会固定到

118
00:05:33,166 --> 0:05:36,937
一个具体的时间点

119
00:05:38,672 --> 0:05:41,542
现在上下文在存储中

120
00:05:41,608 --> 0:05:44,344
如果要更新到最新修改怎么办？

121
00:05:44,711 --> 0:05:45,546
在以前

122
00:05:45,612 --> 0:05:48,215
要注册上下文 然后保存通知

123
00:05:48,282 --> 0:05:51,018
但上下文也可以被设置为

124
00:05:51,084 --> 0:05:54,755
在sibling保存修改后

125
00:05:56,023 --> 0:05:59,359
automaticallyMergesChangesFromParent

126
00:06:01,261 --> 0:06:04,131
现在所有堆栈类型都已经设置好

127
00:06:04,198 --> 0:06:05,732
怎么在app中使用呢？

128
00:06:06,567 --> 0:06:09,303
最重要的是记住 在使用上下文时

129
00:06:09,369 --> 0:06:12,439
所有对托管对象的存储请求和互动

130
00:06:12,506 --> 0:06:14,374
都要在上下文队列中完成

131
00:06:15,175 --> 0:06:17,978
背景上下文都单独的队列

132
00:06:18,779 --> 0:06:21,381
可以用它们执行API

133
00:06:22,015 --> 0:06:24,651
这里有个blocking不变量

134
00:06:24,718 --> 0:06:26,720
对真正的异步工作

135
00:06:26,787 --> 0:06:30,757
容器会为执行后台任务提供便利

136
00:06:30,824 --> 0:06:33,160
为你创建后台上下文

137
00:06:33,227 --> 0:06:36,396
在block返回后自动丢弃

138
00:06:39,399 --> 0:06:41,268
那么如何给app添加数据？

139
00:06:41,335 --> 0:06:43,670
如果我们只需要几个对象

140
00:06:43,737 --> 0:06:47,407
最简单的是

141
00:06:47,474 --> 0:06:50,410
由Xcode下的模型生成

142
00:06:51,178 --> 0:06:53,280
如果子类只有一个模型使用

143
00:06:53,347 --> 0:06:55,883
它就知道代表哪个实体

144
00:06:55,949 --> 0:06:58,418
所以可以带上下文使用

145
00:06:58,685 --> 0:07:00,087
带context注册后

146
00:06:58,685 --> 0:07:00,087
带context注册后

147
00:07:00,153 --> 0:07:01,321
就可以进行配置

148
00:07:01,388 --> 0:07:03,423
跟其他实例变量一样

149
00:07:04,491 --> 0:07:06,260
配置好以后

150
00:07:06,326 --> 0:07:09,429
调用context.save

151
00:07:13,200 --> 0:07:14,968
需要更多数据怎么办？

152
00:07:15,035 --> 0:07:19,206
大多app并不满足于

153
00:07:19,573 --> 0:07:21,708
好机会 因为你有服务器组件

154
00:07:21,775 --> 0:07:24,878
返回成百上千的对象

155
00:07:25,279 --> 0:07:27,681
我们可以一次存一个

156
00:07:27,748 --> 0:07:29,883
就像刚才做的那样

157
00:07:29,950 --> 0:07:31,852
但这要写很多样板代码

158
00:07:31,919 --> 0:07:33,387
更不用说大量的资源开销

159
00:07:33,453 --> 0:07:35,455
一次把所有放进内存

160
00:07:37,558 --> 0:07:39,159
批量插入

161
00:07:39,226 --> 0:07:42,462
这是今天要讲的第一个新功能

162
00:07:43,063 --> 0:07:45,732
这个代码片段有1000个对象

163
00:07:45,799 --> 0:07:48,101
都基于反序列化负载

164
00:07:48,168 --> 0:07:51,471
形式为带字符串密钥的字典数组

165
00:07:53,273 --> 0:07:54,675
这些密钥要对应

166
00:07:54,741 --> 0:07:57,344
模型中的属性名称

167
00:07:57,678 --> 0:07:58,779
也可以留一些

168
00:07:58,846 --> 0:08:01,949
如果不需要的话 比如唯一的限制

169
00:07:58,846 --> 0:08:01,949
如果不需要的话 比如唯一的限制

170
00:08:02,015 --> 0:08:04,218
如果模型已经配置默认值

171
00:08:04,284 --> 0:08:06,186
Core Data就会用它们

172
00:08:07,054 --> 0:08:08,589
这里有三个字典

173
00:08:08,655 --> 0:08:12,025
每个覆盖不同的内容和标题属性

174
00:08:13,126 --> 0:08:14,561
回到代码

175
00:08:14,628 --> 0:08:17,264
用字典数组创建批量插入请求

176
00:08:17,331 --> 0:08:19,600
以及对象模型实体

177
00:08:19,666 --> 0:08:23,136
它也可以采用托管对象子类

178
00:08:23,203 --> 0:08:25,506
通过Xcode生成

179
00:08:27,307 --> 0:08:30,744
执行请求 然后上下文会回复

180
00:08:30,811 --> 0:08:34,047
一个布尔值 告诉我们操作是否成功

181
00:08:35,482 --> 0:08:36,717
很多都免费

182
00:08:37,451 --> 0:08:39,520
你一定在想 区别是什么

183
00:08:40,020 --> 0:08:43,090
这里实际上并没有什么明确的界限

184
00:08:43,155 --> 0:08:44,658
它们大多听着都类似

185
00:08:44,725 --> 0:08:47,528
如果你用过批量更新或批量删除

186
00:08:48,729 --> 0:08:51,665
如果有唯一限制 任何现有的对象

187
00:08:51,732 --> 0:08:53,834
匹配字典的 都会从数据库中拿出

188
00:08:53,901 --> 0:08:56,203
更新为新的值

189
00:08:57,871 --> 0:09:00,674
可选的或设置为默认值的属性

190
00:08:57,871 --> 0:09:00,674
可选的或设置为默认值的属性

191
00:09:00,741 --> 0:09:03,143
也可以从字典中删除

192
00:09:03,544 --> 0:09:06,046
在用唯一限制更新对象时

193
00:09:06,113 --> 0:09:08,549
现有值不会被更改

194
00:09:10,417 --> 0:09:12,553
这对关系也适用

195
00:09:12,786 --> 0:09:15,556
批量插入不能用于设置关系

196
00:09:15,956 --> 0:09:18,258
但如果批量插入在现有对象中更新

197
00:09:18,325 --> 0:09:19,693
由于唯一限制

198
00:09:19,760 --> 0:09:22,162
现有关系不会被修改

199
00:09:22,963 --> 0:09:25,799
最后 与其他批量操作一样

200
00:09:25,866 --> 0:09:29,970
批量插入不会生成

201
00:09:30,037 --> 0:09:31,972
所以你要自己完成

202
00:09:32,606 --> 0:09:35,209
有了数据后 我们讲讲如何满足

203
00:09:35,275 --> 0:09:36,877
控制器的需求

204
00:09:37,811 --> 0:09:40,180
控制器要做的第一件事

205
00:09:40,247 --> 0:09:41,915
是抓取和显示数据

206
00:09:41,982 --> 0:09:43,584
这就来看看

207
00:09:44,618 --> 0:09:47,387
通过fetchRequest

208
00:09:47,688 --> 0:09:50,290
就像创建新对象时获取实体一样

209
00:09:50,357 --> 0:09:52,559
托管对象子类有个方法

210
00:09:52,626 --> 0:09:54,027
由Xcode生成

211
00:09:54,094 --> 0:09:56,597
提供配置好的

212
00:09:58,632 --> 0:10:02,102
添加predicate给

213
00:09:58,632 --> 0:10:02,102
添加predicate给

214
00:10:02,169 --> 0:10:05,606
这里就能通过名称抓取标签

215
00:10:07,708 --> 0:10:09,409
执行请求后

216
00:10:09,476 --> 0:10:12,613
获取结果并用来配置视图

217
00:10:14,515 --> 0:10:16,350
这也适用于不可变数据

218
00:10:16,416 --> 0:10:19,620
如果在视图打开时

219
00:10:20,120 --> 0:10:21,288
托管对象上下文

220
00:10:21,355 --> 0:10:23,957
会确保更新对象的属性

221
00:10:24,024 --> 0:10:25,425
但我们还没有深入

222
00:10:25,492 --> 0:10:27,628
观察这些修改

223
00:10:29,062 --> 0:10:29,897
如你们所知

224
00:10:29,963 --> 0:10:32,566
托管对象支持关键值观察

225
00:10:32,633 --> 0:10:34,268
一直以来都是

226
00:10:34,334 --> 0:10:36,937
但是本周宣布的组合框架

227
00:10:37,004 --> 0:10:40,040
让在Swift中使用KVO更简单

228
00:10:40,340 --> 0:10:44,645
从对象中给每个要布线的属性

229
00:10:45,212 --> 0:10:48,649
然后将数据流同步到视图的

230
00:10:49,283 --> 0:10:50,617
对于标签颜色

231
00:10:50,684 --> 0:10:53,854
要多做一步映射 对应各个类型

232
00:10:54,855 --> 0:10:56,790
这就是所有要写的代码

233
00:10:56,857 --> 0:10:59,193
这样视图内容就会自动更新

234
00:10:59,259 --> 0:11:01,662
随着底层对象的修改

235
00:10:59,259 --> 0:11:01,662
随着底层对象的修改

236
00:11:06,567 --> 0:11:09,736
联合框架很优秀

237
00:11:09,803 --> 0:11:10,704
框架的表面

238
00:11:10,771 --> 0:11:13,974
它还提供了其他更多

239
00:11:14,041 --> 0:11:17,678
欲了解更多 请观看演讲721

240
00:11:18,979 --> 0:11:21,849
你可能注意到 代码中有个小骗局

241
00:11:21,915 --> 0:11:23,250
就是细节视图

242
00:11:23,317 --> 0:11:25,619
几乎从不真正抓取对象

243
00:11:25,686 --> 0:11:26,987
显示出来

244
00:11:27,321 --> 0:11:28,422
通常这种视图

245
00:11:28,488 --> 0:11:31,558
会从配置为托管对象的母程序中推出

246
00:11:31,625 --> 0:11:35,929
因此通常我们写的代码是这样的

247
00:11:36,964 --> 0:11:38,665
细节视图的母程序

248
00:11:38,732 --> 0:11:42,703
通常是列表视图

249
00:11:43,136 --> 0:11:45,205
它也通过抓取请求获取对象

250
00:11:45,272 --> 0:11:48,041
但我们还有几个属性没有讲到

251
00:11:48,108 --> 0:11:50,711
是抓取多个对象的关键

252
00:11:52,546 --> 0:11:54,715
首先是

253
00:11:55,582 --> 0:11:57,985
它定义了结果的顺序

254
00:11:58,318 --> 0:12:00,454
这里要排序的是标签名称

255
00:11:58,318 --> 0:12:00,454
这里要排序的是标签名称

256
00:12:00,521 --> 0:12:02,523
但如果名称区别不大

257
00:12:02,589 --> 0:12:04,958
就要在数组末尾加

258
00:12:05,025 --> 0:12:06,727
区分开来

259
00:12:08,495 --> 0:12:10,764
另一个有用的选项

260
00:12:10,831 --> 0:12:14,101
当抓取请求匹配了1400万个对象

261
00:12:14,168 --> 0:12:16,203
我们不能把所有都放进内存

262
00:12:16,270 --> 0:12:17,738
在同一时间

263
00:12:18,005 --> 0:12:21,108
即使内存有个空间 当然一般没有

264
00:12:21,175 --> 0:12:22,743
也会花很多时间

265
00:12:22,976 --> 0:12:25,078
因此 设置一个

266
00:12:25,145 --> 0:12:28,749
告诉上下文

267
00:12:29,316 --> 0:12:31,952
这对app的响应影响很大

268
00:12:32,019 --> 0:12:33,954
但它只能用于交互

269
00:12:34,021 --> 0:12:35,122
NS数组结果

270
00:12:35,189 --> 0:12:38,759
Swift的数组桥接会盖过优化

271
00:12:39,993 --> 0:12:41,295
记住这一点

272
00:12:41,361 --> 0:12:43,764
就很容易能设置

273
00:12:44,965 --> 0:12:48,135
抓取所有需要的标签

274
00:12:48,202 --> 0:12:50,437
但如果其中一个变了呢

275
00:12:51,605 --> 0:12:55,242
就像细节视图中显示的对象属性

276
00:12:55,309 --> 0:12:58,779
需要保持对象跟随查询变化而变化

277
00:12:59,880 --> 0:13:04,051
好在Core Data支持即时请求

278
00:12:59,880 --> 0:13:04,051
好在Core Data支持即时请求

279
00:13:04,885 --> 0:13:08,388
这里配置的请求是

280
00:13:08,455 --> 0:13:09,790
一次50个

281
00:13:10,791 --> 0:13:12,793
这个请求连接一个context

282
00:13:12,860 --> 0:13:14,761
设置的类型是我们还没讲到的

283
00:13:14,828 --> 0:13:16,797
fetchedResultsController

284
00:13:17,364 --> 0:13:19,766
它将修改传达给

285
00:13:19,833 --> 0:13:21,802
通过代理协议 并立刻运行

286
00:13:21,869 --> 0:13:24,805
在发出执行fetch命令后

287
00:13:26,039 --> 0:13:26,974
FetchedResultsController

288
00:13:27,040 --> 0:13:29,243
你们可能都知道了

289
00:13:29,676 --> 0:13:31,545
代理协议修改报告回调

290
00:13:31,612 --> 0:13:35,282
这个方法说明修改何时发生

291
00:13:35,749 --> 0:13:39,820
这一个说明

292
00:13:40,320 --> 0:13:44,124
这一个说明每个修改的对象及其变化

293
00:13:44,191 --> 0:13:47,561
最后这个说明任务完成

294
00:13:47,628 --> 0:13:48,829
一切了如指掌

295
00:13:49,796 --> 0:13:53,767
这些方法旨在紧紧对应

296
00:13:53,834 --> 0:13:55,936
但还要写许多粘合代码

297
00:13:56,003 --> 0:13:59,773
匹配请求结果给重新绘表

298
00:13:59,840 --> 0:14:01,608
另外 新的集合视图

299
00:13:59,840 --> 0:14:01,608
另外 新的集合视图

300
00:14:01,675 --> 0:14:03,844
不支持这个修改回调

301
00:14:05,112 --> 0:14:07,714
但好消息是

302
00:14:07,781 --> 0:14:09,850
今年学会了新技能

303
00:14:10,284 --> 0:14:11,585
首先是代理方法

304
00:14:11,652 --> 0:14:14,855
发布NSDiffableDataSourceSnapshot实例

305
00:14:19,459 --> 0:14:21,762
听起来很多人都已经知道它是什么了

306
00:14:21,828 --> 0:14:24,932
要是不知道 那它是新的

307
00:14:24,998 --> 0:14:27,868
代表集合视图

308
00:14:28,268 --> 0:14:30,871
为此 设置

309
00:14:30,938 --> 0:14:32,906
为DiffableDataSource类

310
00:14:32,973 --> 0:14:34,141
这也是今年的新东西

311
00:14:34,208 --> 0:14:35,876
填入快照

312
00:14:36,643 --> 0:14:38,879
你可以在演讲220中了解更多

313
00:14:38,946 --> 0:14:40,981
但对于我们

314
00:14:41,048 --> 0:14:41,949
你只要知道

315
00:14:42,015 --> 0:14:44,351
它们可以用来更新集合视图

316
00:14:44,418 --> 0:14:45,886
只用一行代码

317
00:14:46,453 --> 0:14:49,056
这段代码放在这页幻灯片的

318
00:14:49,122 --> 0:14:50,891
本来需要很多样板代码

319
00:14:51,592 --> 0:14:52,459
这里要做的

320
00:14:52,526 --> 0:14:55,629
是将快照放入

321
00:14:55,696 --> 0:14:57,397
数据源将快照区分于

322
00:14:57,464 --> 0:14:59,399
之前的视图状态

323
00:14:59,466 --> 0:15:01,902
也就是

324
00:14:59,466 --> 0:15:01,902
也就是

325
00:15:02,202 --> 0:15:05,906
然后用计算机差异更新视图

326
00:15:09,309 --> 0:15:10,377
等了很久了

327
00:15:12,145 --> 0:15:13,447
DiffableDataSourceSnapshot

328
00:15:13,514 --> 0:15:16,350
对整个集合视图的批量控制很有用

329
00:15:16,416 --> 0:15:19,653
但是如果需要自定义

330
00:15:19,720 --> 0:15:23,223
或需要管理的是除Table和

331
00:15:23,290 --> 0:15:26,927
你可能需要另一个代理方法

332
00:15:27,361 --> 0:15:28,662
对于Snapshots

333
00:15:28,729 --> 0:15:31,865
它总结了所有对

334
00:15:31,932 --> 0:15:33,267
用一张快照

335
00:15:33,333 --> 0:15:35,469
但用的是不同类型 今年新出的

336
00:15:35,536 --> 0:15:36,937
CollectionDifference

337
00:15:37,938 --> 0:15:39,239
如字面意思

338
00:15:39,306 --> 0:15:41,542
CollectionDifference

339
00:15:41,608 --> 0:15:43,911
对比两套集合而生成

340
00:15:45,679 --> 0:15:47,648
Swift标准库里的

341
00:15:47,714 --> 0:15:50,684
在Swift Evolution Proposal 240中引入

342
00:15:50,751 --> 0:15:52,152
Foundation中也有

343
00:15:52,219 --> 0:15:54,955
演讲711中有更详细的信息

344
00:15:56,256 --> 0:15:58,292
在这里 它是个一维类型

345
00:15:58,358 --> 0:16:01,595
只在不使用section

346
00:15:58,358 --> 0:16:01,595
只在不使用section

347
00:16:01,662 --> 0:16:03,697
就像SnapshotDelegate方法

348
00:16:03,764 --> 0:16:06,834
与遗留修改报告方法相互排斥

349
00:16:06,900 --> 0:16:10,437
如果要驱动

350
00:16:10,504 --> 0:16:13,974
要用多个

351
00:16:14,775 --> 0:16:15,709
现在快速展示下

352
00:16:15,776 --> 0:16:18,745
如何驱动集合视图上的一个部分

353
00:16:18,812 --> 0:16:20,981
利用这些差异

354
00:16:21,648 --> 0:16:23,150
这是代理方法

355
00:16:23,217 --> 0:16:25,919
从最上面的批量更新开始

356
00:16:25,986 --> 0:16:28,222
遍历diff中的修改

357
00:16:29,656 --> 0:16:31,992
CollectionDifferences

358
00:16:32,059 --> 0:16:33,694
插入和删除

359
00:16:33,760 --> 0:16:35,562
这两种相反的类

360
00:16:35,629 --> 0:16:38,098
在关联中可能会互相引用

361
00:16:38,165 --> 0:16:39,867
第一个例子中

362
00:16:39,933 --> 0:16:43,003
一个插入关联一个删除

363
00:16:43,070 --> 0:16:46,173
就是说对象被删除了

364
00:16:46,240 --> 0:16:49,343
逻辑位置可能还没移走 但不要紧

365
00:16:49,409 --> 0:16:52,145
因为CollectionView

366
00:16:52,212 --> 0:16:53,714
只要有正确的原值

367
00:16:53,780 --> 0:16:57,618
和目标IndexPaths

368
00:16:58,252 --> 0:16:59,119
第二部分

369
00:16:59,186 --> 0:17:00,254
插入了一个对象

370
00:16:59,186 --> 0:17:00,254
插入了一个对象

371
00:17:00,320 --> 0:17:02,756
之前不属于

372
00:17:02,823 --> 0:17:05,025
所以让CollectionView

373
00:17:06,093 --> 0:17:10,631
最后 对所有不属于关联移动的

374
00:17:10,696 --> 0:17:12,665
通过筛选新的关联

375
00:17:12,733 --> 0:17:15,035
然后从CollectionView中

376
00:17:15,935 --> 0:17:17,171
就这样

377
00:17:17,237 --> 0:17:18,438
你看这个代码

378
00:17:18,505 --> 0:17:19,373
结构很好

379
00:17:19,439 --> 0:17:22,742
因此它可以作为函数因子的备选

380
00:17:22,809 --> 0:17:24,411
进一步减少样板代码

381
00:17:24,478 --> 0:17:28,715
因为你只要有

382
00:17:28,782 --> 0:17:30,150
我想人们一定会爱上

383
00:17:30,217 --> 0:17:31,785
这些新的代理方法

384
00:17:31,852 --> 0:17:34,054
今年 旧的方法也有了新生

385
00:17:34,421 --> 0:17:36,790
Swift UI框架

386
00:17:36,857 --> 0:17:38,825
给描述性接口

387
00:17:39,159 --> 0:17:41,461
但不被Snapshot

388
00:17:41,862 --> 0:17:46,066
这个模型类别可衍生自

389
00:17:46,700 --> 0:17:50,470
现有的控制器

390
00:17:50,737 --> 0:17:53,373
告知Fetched Result

391
00:17:53,440 --> 0:17:55,075
让我们准备更新视图

392
00:17:57,110 --> 0:17:59,580
将Fetched Result

393
00:17:59,646 --> 0:18:02,950
但如果结果本身就很难抓取呢？

394
00:17:59,646 --> 0:18:02,950
但如果结果本身就很难抓取呢？

395
00:18:03,016 --> 0:18:07,254
如果最后不能建立抓取请求呢？

396
00:18:07,321 --> 0:18:10,657
如果运行出现了问题

397
00:18:10,724 --> 0:18:12,793
在执行抓取请求的时候？

398
00:18:13,594 --> 0:18:14,595
有些时候

399
00:18:14,661 --> 0:18:16,830
控制器要求大过模型要求

400
00:18:16,897 --> 0:18:19,099
只能放弃一些模型纯度

401
00:18:19,466 --> 0:18:21,101
为了达成目标

402
00:18:21,635 --> 0:18:23,670
这就要反范式化

403
00:18:24,538 --> 0:18:29,877
WWDC 2018的

404
00:18:29,943 --> 0:18:31,011
回顾一下

405
00:18:31,078 --> 0:18:33,814
反范式化 指当我们保存数据副本

406
00:18:33,881 --> 0:18:35,749
为方便访问时

407
00:18:36,316 --> 0:18:38,051
会出现额外的负载

408
00:18:38,118 --> 0:18:39,753
维护额外的数据

409
00:18:39,820 --> 0:18:43,123
很多时候这种权衡很容易

410
00:18:43,957 --> 0:18:46,760
数据库索引就是很好的例子

411
00:18:46,827 --> 0:18:50,430
我们不再保存所有索引列的副本

412
00:18:50,497 --> 0:18:52,900
而是通过闪电般的请求

413
00:18:53,367 --> 0:18:55,135
当它们依存于这些索引时

414
00:18:56,003 --> 0:18:57,471
回到app

415
00:18:57,538 --> 0:18:59,406
反范式化还能帮助我们

416
00:18:59,473 --> 0:19:02,609
追踪每个标签下的发布数

417
00:18:59,473 --> 0:19:02,609
追踪每个标签下的发布数

418
00:19:03,777 --> 0:19:08,916
我们只要添加一个

419
00:19:08,982 --> 0:19:11,151
名字为postCount

420
00:19:12,085 --> 0:19:14,755
现在只要保证这个新属性

421
00:19:14,821 --> 0:19:17,157
在每次发布被标签时递增

422
00:19:17,224 --> 0:19:21,161
在每次发布删除标签时递减

423
00:19:21,428 --> 0:19:25,165
这个代码肯定不会有漏洞

424
00:19:26,567 --> 0:19:27,434
对吗

425
00:19:28,535 --> 0:19:31,171
不对 所以要讲讲派生属性

426
00:19:32,206 --> 0:19:36,376
派生数据是范式元数据

427
00:19:37,244 --> 0:19:38,879
不仅是为了计数

428
00:19:38,946 --> 0:19:43,183
它还有很多功能

429
00:19:43,917 --> 0:19:47,154
派生属性在托管对象模型中定义

430
00:19:47,221 --> 0:19:50,457
Xcode中的模型编辑器

431
00:19:50,524 --> 0:19:53,026
你可以用代码定义派生属性

432
00:19:53,093 --> 0:19:57,197
使用新类型

433
00:19:58,298 --> 0:20:00,701
最后 派生表达式可以指向

434
00:19:58,298 --> 0:20:00,701
最后 派生表达式可以指向

435
00:20:00,767 --> 0:20:04,204
下一层的一个实体的任何属性

436
00:20:05,305 --> 0:20:07,975
派生属性让反范式化十分简单

437
00:20:08,041 --> 0:20:12,212
现在我要展示一下如何应用它们

438
00:20:13,814 --> 0:20:16,216
这是之前那个app

439
00:20:16,683 --> 0:20:20,621
打开这个标签管理

440
00:20:20,687 --> 0:20:24,925
看到三个标签和一堆发布

441
00:20:24,992 --> 0:20:27,127
但驱动它的视图代码

442
00:20:27,194 --> 0:20:30,097
实际上遍历了关系发布

443
00:20:30,163 --> 0:20:31,465
获取计数

444
00:20:31,532 --> 0:20:33,834
这是关系中默认的

445
00:20:33,901 --> 0:20:36,837
如果有更多数据的重要性排序

446
00:20:36,904 --> 0:20:39,506
它可能会导致运行出问题

447
00:20:39,940 --> 0:20:44,244
我们要在模型中用派生属性修正

448
00:20:45,913 --> 0:20:47,080
这是模型编辑器

449
00:20:47,147 --> 0:20:49,249
我们看到的是标签类型

450
00:20:49,516 --> 0:20:56,089
我们要在这里添加

451
00:20:56,423 --> 0:20:58,258
并设为整数类

452
00:20:59,893 --> 0:21:02,462
现在看到这里的查看器

453
00:20:59,893 --> 0:21:02,462
现在看到这里的查看器

454
00:21:02,529 --> 0:21:06,133
多了一个新选项derived

455
00:21:06,200 --> 0:21:07,401
勾选它

456
00:21:07,467 --> 0:21:10,270
出现一个框 填写衍生表达式

457
00:21:10,671 --> 0:21:14,775
现在我们是将代码

458
00:21:14,842 --> 0:21:19,880
写入posts.@counts

459
00:21:20,981 --> 0:21:23,417
就可以了

460
00:21:23,483 --> 0:21:26,887
如果重建

461
00:21:27,554 --> 0:21:29,089
回到这个视图

462
00:21:29,156 --> 0:21:34,995
会看到新的实例变量

463
00:21:35,062 --> 0:21:35,896
但它不是可选的

464
00:21:35,963 --> 0:21:39,566
所以要删除更多代码 避免这种情况

465
00:21:40,434 --> 0:21:44,304
搭建并运行后 没有任何变化

466
00:21:45,572 --> 0:21:47,808
只是更快更好了

467
00:21:47,875 --> 0:21:49,710
我们不用更新所有内容

468
00:21:49,776 --> 0:21:52,312
果然 就是这样

469
00:21:55,682 --> 0:21:59,820
开发者文档中

470
00:21:59,887 --> 0:22:02,890
通常来说 它们分为四类

471
00:21:59,887 --> 0:22:02,890
通常来说 它们分为四类

472
00:22:03,490 --> 0:22:05,325
最简单的是全部复制

473
00:22:05,392 --> 0:22:07,794
就像复制附件标识符

474
00:22:07,861 --> 0:22:09,563
及其图像数据

475
00:22:10,330 --> 0:22:13,600
另一种派生是字段转换

476
00:22:13,667 --> 0:22:18,338
比如小写标签名称

477
00:22:20,507 --> 0:22:22,476
刚才的例子里 一个聚合函数

478
00:22:22,543 --> 0:22:24,578
在演示中跨过了多个关系

479
00:22:25,746 --> 0:22:29,349
最后是全局函数

480
00:22:29,416 --> 0:22:31,084
不用任何参数

481
00:22:31,151 --> 0:22:32,753
可用于 比如

482
00:22:32,819 --> 0:22:35,355
追踪对象最后更新的时间

483
00:22:35,689 --> 0:22:37,457
既然控制器都讲完了

484
00:22:37,524 --> 0:22:40,394
下面来看更高级的主题和缩放

485
00:22:40,460 --> 0:22:43,430
PersistentHistory

486
00:22:43,497 --> 0:22:47,234
处理importer

487
00:22:47,301 --> 0:22:51,205
或维护多个活跃协调器的数据一致性

488
00:22:51,271 --> 0:22:52,973
使用同一存储

489
00:22:53,841 --> 0:22:56,176
今年新的是 我们用抓取请求

490
00:22:56,243 --> 0:22:59,379
让你只查看需要的历史数据

491
00:23:00,881 --> 0:23:03,917
比如你要查看一个扩展做的修改

492
00:23:03,984 --> 0:23:06,386
或者只看影响发布的修改

493
00:23:06,453 --> 0:23:09,623
或只看某个时间段的历史

494
00:23:09,690 --> 0:23:11,425
想象将抓取请求的力量

495
00:23:11,491 --> 0:23:13,393
用到PersistentHistory

496
00:23:15,529 --> 0:23:19,633
NSPersistentHistoryTransaction

497
00:23:19,700 --> 0:23:20,868
不是模型化类型

498
00:23:20,934 --> 0:23:23,403
但它们能生成新的交叉方法

499
00:23:23,737 --> 0:23:25,873
与fetchRequests交互

500
00:23:25,939 --> 0:23:26,874
注意

501
00:23:26,940 --> 0:23:29,743
新的方法与Xcode生成的很像

502
00:23:29,810 --> 0:23:32,412
就是给托管对象子类的

503
00:23:33,313 --> 0:23:35,148
它们包括了

504
00:23:35,215 --> 0:23:37,251
对应类型

505
00:23:37,317 --> 0:23:40,220
以及产生新的预置

506
00:23:40,287 --> 0:23:42,589
返回类型实例

507
00:23:42,656 --> 0:23:46,894
NSPersistentHistoryTransaction

508
00:23:46,960 --> 0:23:48,428
在执行时

509
00:23:48,962 --> 0:23:50,664
配置fetchRequest

510
00:23:50,731 --> 0:23:52,633
跟抓取托管对象一样

511
00:23:52,699 --> 0:23:54,635
但是不再执行

512
00:23:54,701 --> 0:23:56,803
直接作用于上下文

513
00:23:56,870 --> 0:24:01,441
而是作为

514
00:23:56,870 --> 0:24:01,441
而是作为

515
00:24:02,643 --> 0:24:06,380
NSPersistentHistoryChangeRequest

516
00:24:06,446 --> 0:24:08,782
用于创建

517
00:24:08,849 --> 0:24:13,453
以及用于配置

518
00:24:14,288 --> 0:24:16,623
管理PersistentHistory

519
00:24:16,690 --> 0:24:19,126
为app增加了粒度

520
00:24:19,193 --> 0:24:23,463
但还有个问题

521
00:24:24,798 --> 0:24:28,202
这有很多方法 但都有缺陷

522
00:24:28,268 --> 0:24:30,904
我们可以对修改进行存储

523
00:24:30,971 --> 0:24:33,073
但这很难调整解决方案

524
00:24:33,140 --> 0:24:36,009
平衡徒劳无功

525
00:24:36,076 --> 0:24:38,478
和在修改被发现前出现的延迟

526
00:24:39,346 --> 0:24:42,316
文件系统监控系统 比如

527
00:24:42,382 --> 0:24:46,486
和FSEvents也有用

528
00:24:46,787 --> 0:24:48,021
它们不容易应用

529
00:24:48,088 --> 0:24:50,224
还会出现很多通知

530
00:24:50,290 --> 0:24:53,193
并不能对应存储的变化

531
00:24:53,260 --> 0:24:55,495
因此还是会做很多无用功

532
00:24:56,897 --> 0:24:58,198
虽然跟创可贴一样有用

533
00:24:58,265 --> 0:25:00,100
但它们都不是最佳解决方案

534
00:24:58,265 --> 0:25:00,100
但它们都不是最佳解决方案

535
00:25:00,167 --> 0:25:03,504
解决其他协调器修改存储时

536
00:25:05,639 --> 0:25:08,609
今年有新的通知功能

537
00:25:08,675 --> 0:25:11,712
可以当作是跨协调器保存通知

538
00:25:11,778 --> 0:25:13,614
但事件是异步传达的

539
00:25:13,680 --> 0:25:17,518
所以更像是跨协调器更改通知

540
00:25:18,118 --> 0:25:20,521
我们叫做远程修改通知

541
00:25:22,289 --> 0:25:24,358
要启用远程修改通知

542
00:25:24,424 --> 0:25:26,159
用新的

543
00:25:26,226 --> 0:25:30,531
叫做

544
00:25:32,432 --> 0:25:33,500
设置它为存储描述

545
00:25:33,567 --> 0:25:36,170
然后加载

546
00:25:36,236 --> 0:25:39,540
然后协调器就会听取

547
00:25:40,374 --> 0:25:42,176
它还告诉协调器

548
00:25:42,242 --> 0:25:44,611
它要发送远程修改通知

549
00:25:44,678 --> 0:25:47,247
在变化发生的时候

550
00:25:47,314 --> 0:25:50,684
如果要修改通知 就要用

551
00:25:50,751 --> 0:25:54,555
NSPersistentStoreRemoteChangeNotificationPostOptionKey

552
00:25:54,621 --> 0:25:56,590
给所有的协调器

553
00:25:56,657 --> 0:25:59,493
不仅是给要应用修改的协调器

554
00:25:59,560 --> 0:26:02,229
可能还要开启

555
00:25:59,560 --> 0:26:02,229
可能还要开启

556
00:26:02,296 --> 0:26:06,567
因为 虽然远程修改通知

557
00:26:06,633 --> 0:26:08,936
通过NSPersistentStoreURLkey

558
00:26:09,002 --> 0:26:11,138
在notification.UserInfo中

559
00:26:11,205 --> 0:26:12,806
但如果开启了

560
00:26:12,873 --> 0:26:16,243
它还会包括该事务创建的

561
00:26:16,710 --> 0:26:18,579
它会十分有用 特别是当结合

562
00:26:18,645 --> 0:26:20,781
新的PersistentHistory

563
00:26:20,848 --> 0:26:22,583
我们刚刚讲过的

564
00:26:23,817 --> 0:26:28,322
远程修改通知类似于推送通知

565
00:26:28,388 --> 0:26:31,425
有时候修改会让它们一起崩溃

566
00:26:31,491 --> 0:26:32,559
如果一下子很多的话

567
00:26:32,626 --> 0:26:34,761
只有最有一个修改能被传达

568
00:26:34,828 --> 0:26:36,663
如果随意启动app

569
00:26:36,730 --> 0:26:39,399
怎么知道哪个是当前的

570
00:26:39,466 --> 0:26:42,836
新方法就是

571
00:26:44,104 --> 0:26:46,507
叫做CurrentPersistentHistoryToken

572
00:26:46,573 --> 0:26:49,610
集合这些新东西在一起 就能解开

573
00:26:49,977 --> 0:26:51,612
过去的未解之谜

574
00:26:52,179 --> 0:26:54,948
我们不仅能及时更新

575
00:26:55,015 --> 0:26:57,050
PersistentHistory

576
00:26:57,117 --> 0:26:59,620
影响到工作的修改

577
00:27:00,821 --> 0:27:02,956
我想最好的讲解方法

578
00:27:03,023 --> 0:27:04,625
是做个演示

579
00:27:04,992 --> 0:27:07,628
看看app里的样子

580
00:27:09,463 --> 0:27:11,431
这是个控制器

581
00:27:11,498 --> 0:27:14,134
负责让视图上下文保持最新

582
00:27:14,201 --> 0:27:16,170
无论协调器何时改变

583
00:27:16,236 --> 0:27:19,640
storeRemoteChange

584
00:27:20,174 --> 0:27:23,644
在收到远程修改通知时调用

585
00:27:25,078 --> 0:27:28,315
打开后可以获得新的

586
00:27:28,382 --> 0:27:31,285
保存在userInfo之外

587
00:27:31,618 --> 0:27:33,820
然后抓取要更新的上下文

588
00:27:33,887 --> 0:27:35,656
进入perform block

589
00:27:38,325 --> 0:27:40,827
首先 要将

590
00:27:40,894 --> 0:27:42,863
减到需要的内容

591
00:27:43,330 --> 0:27:47,534
根据上一个历史令牌

592
00:27:47,601 --> 0:27:49,403
在这个app的例子里

593
00:27:49,469 --> 0:27:51,672
是当前的

594
00:27:52,472 --> 0:27:56,610
然后将所有事务前置 或等同于

595
00:27:56,677 --> 0:27:58,979
通知给的新历史令牌

596
00:28:02,683 --> 0:28:05,352
如果使用transaction author

597
00:28:05,419 --> 0:28:07,187
可以创建一个predicate

598
00:28:07,254 --> 0:28:09,156
允许我们查看仅限于

599
00:28:09,223 --> 0:28:12,693
其他协调器创建的事务

600
00:28:13,961 --> 0:28:16,663
然后创建

601
00:28:16,730 --> 0:28:18,699
获取事务

602
00:28:18,999 --> 0:28:22,002
设置predicate为

603
00:28:22,069 --> 0:28:23,937
对刚创建的所有predicate

604
00:28:24,004 --> 0:28:26,507
现在看到的事务就仅限于

605
00:28:26,573 --> 0:28:30,477
其他协调器编写的

606
00:28:30,544 --> 0:28:33,247
和刚包含的新的之间

607
00:28:35,315 --> 0:28:37,684
创建NSPersistentHistoryChangeRequest

608
00:28:37,751 --> 0:28:40,721
设置为刚创建的

609
00:28:41,188 --> 0:28:43,724
然后对上下文执行

610
00:28:44,925 --> 0:28:49,096
结果是一个未更新事务的列表

611
00:28:49,162 --> 0:28:50,397
对每个来说

612
00:28:50,464 --> 0:28:55,102
可以将

613
00:28:55,402 --> 0:28:57,171
传递给

614
00:28:57,237 --> 0:29:01,742
ManagedObjectContext.mergeChanges

615
00:28:57,237 --> 0:29:01,742
ManagedObjectContext.mergeChanges

616
00:29:02,242 --> 0:29:04,745
2017年引入

617
00:29:05,579 --> 0:29:07,214
所有事务处理完毕后

618
00:29:07,281 --> 0:29:11,752
视图就与最新的磁盘数据保持一致了

619
00:29:12,319 --> 0:29:16,423
这几乎是实时完成的

620
00:29:16,490 --> 0:29:17,758
速度很快

621
00:29:18,792 --> 0:29:22,729
最后 为确保下一次不会做无用功

622
00:29:22,796 --> 0:29:26,099
要记住最后处理的

623
00:29:26,834 --> 0:29:29,837
现在就能继续下一个远程修改通知了

624
00:29:31,505 --> 0:29:34,441
好了 以上就是

625
00:29:34,508 --> 0:29:36,677
和远程修改通知

626
00:29:40,214 --> 0:29:41,648
最后

627
00:29:41,715 --> 0:29:44,785
我要讲一下测试

628
00:29:45,519 --> 0:29:47,454
大家可能会运行测试

629
00:29:47,521 --> 0:29:51,225
用多种配置 比如

630
00:29:51,291 --> 0:29:54,428
我想针对Core Data

631
00:29:56,263 --> 0:29:58,665
第一是要了解运行目标

632
00:29:58,932 --> 0:30:00,300
联系人app会要测试

633
00:29:58,932 --> 0:30:00,300
联系人app会要测试

634
00:30:00,367 --> 0:30:03,003
至少几万个对象

635
00:30:03,070 --> 0:30:04,705
但对于这个运行目标

636
00:30:04,771 --> 0:30:07,741
可能实际要在桌面硬件上

637
00:30:07,808 --> 0:30:08,809
有的时候

638
00:30:09,810 --> 0:30:11,178
图库app就不同

639
00:30:11,245 --> 0:30:13,180
它的测试是要验证所有工作都正确

640
00:30:13,247 --> 0:30:15,349
因为有几百万个对象

641
00:30:15,415 --> 0:30:17,718
这样的规模下 任何对数时间的延迟

642
00:30:17,784 --> 0:30:19,419
都能卡顿app

643
00:30:19,486 --> 0:30:21,154
因此重要的是

644
00:30:21,221 --> 0:30:22,689
飞速测试

645
00:30:22,756 --> 0:30:26,827
运行所有带性能数据集的集成测试

646
00:30:28,829 --> 0:30:31,765
集成测试也要运行优化配置

647
00:30:31,832 --> 0:30:34,835
用于测试和显示其他问题

648
00:30:35,369 --> 0:30:37,371
使用Core Data的

649
00:30:37,437 --> 0:30:40,841
利用框架内置的并发调式

650
00:30:41,341 --> 0:30:43,977
Scheme Editor中开启

651
00:30:44,044 --> 0:30:47,848
设置com.apple.CoreData.ConcurrencyDebug 1

652
00:30:48,182 --> 0:30:49,850
在过程参数列表中

653
00:30:52,119 --> 0:30:54,521
在多个配置中运行测试

654
00:30:54,588 --> 0:30:55,722
会很费时

655
00:30:55,789 --> 0:30:58,959
同样 单元测试也要尽可能快

656
00:30:59,026 --> 0:31:04,865
当测试运行时间为关键时

657
00:30:59,026 --> 0:31:04,865
当测试运行时间为关键时

658
00:31:05,165 --> 0:31:09,870
这里单指

659
00:31:10,470 --> 0:31:13,407
SqLightStore

660
00:31:13,707 --> 0:31:14,675
通过它

661
00:31:14,741 --> 0:31:17,444
在创建持续化容器和加载存储之间

662
00:31:17,511 --> 0:31:18,912
可以拉取存储描述

663
00:31:18,979 --> 0:31:21,882
将URL属性设为指向

664
00:31:23,250 --> 0:31:25,719
这会创建一个极为性能化的堆栈

665
00:31:25,786 --> 0:31:28,922
但内存存储不能在协调器之间共享

666
00:31:28,989 --> 0:31:32,125
为了验证远程修改通知的工作

667
00:31:32,192 --> 0:31:33,193
刚刚完成的

668
00:31:33,260 --> 0:31:36,897
要利用命名的内存存储

669
00:31:37,364 --> 0:31:41,902
命名的内存存储 通过在

670
00:31:41,969 --> 0:31:45,873
同一进程中的任何带URL的

671
00:31:45,939 --> 0:31:48,408
会连接到共享的内存数据库

672
00:31:49,776 --> 0:31:52,646
共享一个内存存储的不同的协调器

673
00:31:52,713 --> 0:31:55,249
会给彼此分发远程修改通知

674
00:31:55,315 --> 0:31:57,551
让我们能测试所有逻辑

675
00:31:59,086 --> 0:32:01,488
最后 用sanitizer

676
00:31:59,086 --> 0:32:01,488
最后 用sanitizer

677
00:32:01,922 --> 0:32:04,424
每个至少省了一次

678
00:32:04,491 --> 0:32:05,759
我见过

679
00:32:05,826 --> 0:32:08,662
能立刻识别一个字节的缓冲溢出

680
00:32:08,729 --> 0:32:10,998
以前可能要几个月才能隔离

681
00:32:11,064 --> 0:32:14,234
同样 thread sanitizer

682
00:32:14,301 --> 0:32:18,539
能告诉你内部无法复制的线程痕迹

683
00:32:18,605 --> 0:32:22,176
最后UBSan可以

684
00:32:22,242 --> 0:32:25,846
通过识别未来可能有变化的

685
00:32:25,913 --> 0:32:29,349
今天我们讲了如何用

686
00:32:29,416 --> 0:32:33,086
如何利用新的和旧的API编写

687
00:32:33,153 --> 0:32:37,357
模型和控制器之间

688
00:32:37,424 --> 0:32:40,460
我们探索了多个协调器之间的同步

689
00:32:40,527 --> 0:32:43,630
并对此定义需求和测试代码

690
00:32:43,697 --> 0:32:45,966
我们变得更自信

691
00:32:46,867 --> 0:32:48,569
我们乐于解你的想法

692
00:32:48,635 --> 0:32:50,904
请通过反馈助手告诉我们

693
00:32:51,705 --> 0:32:54,975
更多信息请登录开发者官网

694
00:32:55,409 --> 0:32:57,811
本场演讲的网页上有今天提到过的

695
00:32:57,878 --> 0:32:59,346
其他演讲的链接

696
00:32:59,847 --> 0:33:02,482
明天的实验室见 谢谢参与
