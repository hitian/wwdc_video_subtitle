1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:06,516 --> 0:00:10,866
[ Applause ]

3
00:00:11,366 --> 0:00:11,796
&gt;&gt; Good morning.

4
00:00:12,516 --> 0:00:14,656
[ Applause ]

5
00:00:15,156 --> 0:00:16,056
My name is Josh.

6
00:00:16,175 --> 0:00:17,576
And I'm part of the Technology

7
00:00:17,576 --> 0:00:19,136
Evangelism team at Apple.

8
00:00:20,436 --> 0:00:22,246
Our team has the incredible

9
00:00:22,246 --> 0:00:23,396
honor of working with

10
00:00:23,396 --> 0:00:25,856
developers, like you, from all

11
00:00:25,856 --> 0:00:26,476
around the world.

12
00:00:27,596 --> 0:00:29,566
And our goal is to help you

13
00:00:29,686 --> 0:00:31,856
create truly great apps.

14
00:00:32,735 --> 0:00:34,396
And in these conversations with

15
00:00:34,396 --> 0:00:36,116
you, we learn so much.

16
00:00:36,996 --> 0:00:38,166
We gain an understanding of the

17
00:00:38,166 --> 0:00:39,876
processes you take; the

18
00:00:39,876 --> 0:00:40,966
challenges, goals, and

19
00:00:40,966 --> 0:00:42,566
aspirations that you have.

20
00:00:43,516 --> 0:00:44,736
We learn about the tricks and

21
00:00:44,736 --> 0:00:46,716
tools that help you out, and

22
00:00:46,716 --> 0:00:47,726
then those that hinder.

23
00:00:49,006 --> 0:00:50,546
And although every story that we

24
00:00:50,546 --> 0:00:52,286
hear is a little different,

25
00:00:53,376 --> 0:00:54,566
there's an incredible number of

26
00:00:54,566 --> 0:00:56,466
common threads no matter which

27
00:00:56,466 --> 0:00:57,586
part of the world the story

28
00:00:57,586 --> 0:00:58,116
comes from.

29
00:00:59,536 --> 0:01:01,366
Now, when you think about craft

30
00:00:59,536 --> 0:01:01,366
Now, when you think about craft

31
00:01:01,946 --> 0:01:03,106
you probably first think about

32
00:01:03,156 --> 0:01:03,766
design.

33
00:01:04,495 --> 0:01:06,446
But as developers and engineers,

34
00:01:06,686 --> 0:01:07,566
we craft, too.

35
00:01:08,616 --> 0:01:10,606
After all, craft is defined as

36
00:01:10,606 --> 0:01:12,916
skill in planning, making, and

37
00:01:12,916 --> 0:01:13,556
executing.

38
00:01:14,126 --> 0:01:15,466
It's to create or produce

39
00:01:15,516 --> 0:01:18,326
something with care, skill, or

40
00:01:18,326 --> 0:01:18,986
ingenuity.

41
00:01:20,916 --> 0:01:22,366
Codes written by hand.

42
00:01:23,476 --> 0:01:25,206
It involves incredible skill.

43
00:01:25,596 --> 0:01:27,236
And there's an ingenuity to the

44
00:01:27,236 --> 0:01:28,326
technique that we take.

45
00:01:28,556 --> 0:01:30,036
The choices that we make when

46
00:01:30,036 --> 0:01:30,716
building an app.

47
00:01:31,606 --> 0:01:33,226
And I want to talk to you today

48
00:01:33,466 --> 0:01:35,916
about that craft and care, to

49
00:01:35,916 --> 0:01:38,046
bring care into your code, into

50
00:01:38,046 --> 0:01:40,416
your storyboards and into your

51
00:01:40,416 --> 0:01:40,906
products.

52
00:01:41,596 --> 0:01:43,186
This might seem easy at first.

53
00:01:43,346 --> 0:01:44,566
But with all of the demands on

54
00:01:44,566 --> 0:01:46,276
us, as developers today, this

55
00:01:46,276 --> 0:01:48,226
can sometimes be quite hard.

56
00:01:48,996 --> 0:01:51,226
Skill with a given craft is

57
00:01:51,226 --> 0:01:52,236
something that develops over

58
00:01:52,236 --> 0:01:52,696
time.

59
00:01:53,066 --> 0:01:55,106
It takes dedication, patience,

60
00:01:55,106 --> 0:01:55,876
and focus.

61
00:01:56,466 --> 0:01:58,206
It's about learning to enjoy the

62
00:01:58,246 --> 0:02:00,356
process of getting there almost

63
00:01:58,246 --> 0:02:00,356
process of getting there almost

64
00:02:00,356 --> 0:02:01,566
as much as the destination

65
00:02:01,566 --> 0:02:02,116
itself.

66
00:02:02,666 --> 0:02:05,166
Now, part of this process is

67
00:02:05,166 --> 0:02:06,816
also about converting those

68
00:02:06,816 --> 0:02:08,376
things that might take intense

69
00:02:08,485 --> 0:02:10,126
and conscious focus at first,

70
00:02:10,526 --> 0:02:11,166
into habits.

71
00:02:13,036 --> 0:02:14,766
Similar to driving, with

72
00:02:14,766 --> 0:02:16,566
experience and practice, the

73
00:02:16,566 --> 0:02:17,706
number of things that we have to

74
00:02:17,706 --> 0:02:19,536
consciously focus on while we're

75
00:02:19,536 --> 0:02:21,476
driving reduces over time

76
00:02:21,706 --> 0:02:23,106
because we convert things to

77
00:02:23,106 --> 0:02:24,856
natural, automatic habits.

78
00:02:25,266 --> 0:02:26,726
And we can do the same thing

79
00:02:26,946 --> 0:02:28,026
with app development.

80
00:02:28,696 --> 0:02:30,456
And to do this, it means

81
00:02:30,506 --> 0:02:32,236
developing great habits, as

82
00:02:32,236 --> 0:02:33,356
opposed to poor ones.

83
00:02:34,766 --> 0:02:36,536
When it comes to building an

84
00:02:36,536 --> 0:02:38,836
app, there's a lot of details to

85
00:02:38,836 --> 0:02:40,396
pay attention to and as a

86
00:02:40,396 --> 0:02:41,996
developer, so many of these

87
00:02:41,996 --> 0:02:43,526
details that we have to care

88
00:02:43,526 --> 0:02:45,516
about, well, they're rarely

89
00:02:45,516 --> 0:02:46,916
actually directly seen by the

90
00:02:46,916 --> 0:02:48,726
customers who use our apps.

91
00:02:48,886 --> 0:02:50,636
And yet, they can be felt in

92
00:02:50,746 --> 0:02:52,856
such significant ways, impacting

93
00:02:52,856 --> 0:02:55,166
performance, reliability, and

94
00:02:55,166 --> 0:02:55,756
stability.

95
00:02:57,026 --> 0:02:58,026
And so, there's a lot of

96
00:02:58,026 --> 0:02:58,556
details.

97
00:02:58,696 --> 0:03:00,366
And there's just not enough time

98
00:02:58,696 --> 0:03:00,366
And there's just not enough time

99
00:03:00,366 --> 0:03:01,606
to focus on them all.

100
00:03:02,496 --> 0:03:03,886
So, I'd like to spend some time

101
00:03:03,886 --> 0:03:05,886
today reviewing some practices

102
00:03:05,886 --> 0:03:07,376
that can hopefully inform and

103
00:03:07,376 --> 0:03:09,366
enrich our work as developers,

104
00:03:09,766 --> 0:03:11,316
things for us to work towards

105
00:03:11,356 --> 0:03:12,896
integrating into our regular

106
00:03:12,896 --> 0:03:14,566
workflows, such that they just

107
00:03:14,566 --> 0:03:16,576
become habit and automatic.

108
00:03:17,346 --> 0:03:18,666
This will save us frustration,

109
00:03:19,326 --> 0:03:21,056
hassle, and waste of time down

110
00:03:21,056 --> 0:03:21,446
the road.

111
00:03:22,066 --> 0:03:24,026
Now, for many of you, I'm sure

112
00:03:24,026 --> 0:03:25,286
you're already doing many of

113
00:03:25,286 --> 0:03:26,066
these things.

114
00:03:26,296 --> 0:03:27,716
But perhaps there are some that

115
00:03:27,716 --> 0:03:29,306
haven't yet fully become habits

116
00:03:29,306 --> 0:03:29,716
for you.

117
00:03:30,076 --> 0:03:31,826
And maybe you'll be inspired to

118
00:03:31,826 --> 0:03:32,686
practice them more.

119
00:03:33,796 --> 0:03:35,796
So, first, let's get organized.

120
00:03:36,976 --> 0:03:38,206
In addition to being an app

121
00:03:38,246 --> 0:03:39,636
developer, I'm also a

122
00:03:39,636 --> 0:03:40,186
woodworker.

123
00:03:40,636 --> 0:03:41,966
I find that it's this great

124
00:03:41,966 --> 0:03:43,826
escape from the modern-day world

125
00:03:43,886 --> 0:03:44,256
for me.

126
00:03:44,546 --> 0:03:46,526
But one thing that's for certain

127
00:03:46,826 --> 0:03:48,636
is that beautiful, well-crafted

128
00:03:48,636 --> 0:03:50,276
furniture, is much easier to

129
00:03:50,276 --> 0:03:51,986
build in a clean shop.

130
00:03:52,806 --> 0:03:54,646
So, if your bench is cluttered

131
00:03:54,826 --> 0:03:56,626
and poorly organized, it's hard

132
00:03:56,626 --> 0:03:58,046
to find the tools and materials

133
00:03:58,046 --> 0:03:59,526
that you need as you work along.

134
00:04:00,136 --> 0:04:01,016
You constantly just have to

135
00:04:01,016 --> 0:04:02,706
shuffle things around to make

136
00:04:02,746 --> 0:04:03,696
room for the work that you're

137
00:04:03,696 --> 0:04:04,426
actually doing.

138
00:04:04,646 --> 0:04:06,256
And, in short, everything takes

139
00:04:06,256 --> 0:04:08,086
so much longer than it should,

140
00:04:08,416 --> 0:04:10,026
and more accidents and mistakes

141
00:04:10,026 --> 0:04:11,076
happen along the way.

142
00:04:11,616 --> 0:04:13,706
Our team sees a lot of Xcode

143
00:04:13,706 --> 0:04:14,666
projects each year.

144
00:04:14,826 --> 0:04:15,706
And there's definitely some

145
00:04:15,706 --> 0:04:17,176
practices that can help you make

146
00:04:17,176 --> 0:04:18,706
sure that your work space is

147
00:04:18,706 --> 0:04:20,846
clean, tidy, and in a great

148
00:04:20,875 --> 0:04:22,356
position to allow you to do your

149
00:04:22,426 --> 0:04:23,676
absolute best work.

150
00:04:24,206 --> 0:04:27,086
Xcode projects benefit from

151
00:04:27,086 --> 0:04:29,216
structure and organization using

152
00:04:29,216 --> 0:04:29,616
groups.

153
00:04:30,496 --> 0:04:31,996
This makes it so much easier at

154
00:04:31,996 --> 0:04:33,676
a glance to see the files

155
00:04:33,676 --> 0:04:35,126
involved in each section of your

156
00:04:35,126 --> 0:04:35,866
application.

157
00:04:36,116 --> 0:04:37,626
It can help you hone in quickly

158
00:04:37,676 --> 0:04:39,016
when you're trying to fix a bug.

159
00:04:40,146 --> 0:04:42,206
Groups are best used to organize

160
00:04:42,206 --> 0:04:43,996
your project functionally in a

161
00:04:43,996 --> 0:04:45,666
way that logically follows how

162
00:04:45,666 --> 0:04:47,146
someone might interact with your

163
00:04:47,146 --> 0:04:47,856
application.

164
00:04:48,496 --> 0:04:49,756
We often see projects that are

165
00:04:49,936 --> 0:04:52,046
organized by file type or maybe

166
00:04:52,046 --> 0:04:53,556
just don't use groups at all.

167
00:04:53,556 --> 0:04:55,176
And that doesn't really help

168
00:04:55,176 --> 0:04:56,426
someone out later when they're

169
00:04:56,426 --> 0:04:57,876
quickly trying to understand how

170
00:04:57,876 --> 0:04:59,476
all of these source files relate

171
00:04:59,476 --> 0:05:00,026
to each other.

172
00:04:59,476 --> 0:05:00,026
to each other.

173
00:05:01,226 --> 0:05:03,396
Furthermore, it can really help

174
00:05:03,396 --> 0:05:04,646
to make sure that your Xcode

175
00:05:04,646 --> 0:05:06,316
project structure and your file

176
00:05:06,316 --> 0:05:07,956
system structure actually match

177
00:05:07,956 --> 0:05:08,406
each other.

178
00:05:09,286 --> 0:05:11,386
Since Xcode 9, when you create a

179
00:05:11,386 --> 0:05:12,786
new group inside of your

180
00:05:12,786 --> 0:05:14,406
project, it actually also

181
00:05:14,406 --> 0:05:15,866
creates a folder on disk to

182
00:05:15,866 --> 0:05:17,276
house the files that you place

183
00:05:17,276 --> 0:05:18,366
inside of that group.

184
00:05:19,406 --> 0:05:20,626
This means when you're looking

185
00:05:20,626 --> 0:05:21,686
at your project in source

186
00:05:21,686 --> 0:05:23,546
control, or just browsing the

187
00:05:23,546 --> 0:05:25,356
file system, the structure is

188
00:05:25,356 --> 0:05:26,616
mirrored, and this will really

189
00:05:26,616 --> 0:05:28,036
help you reduce confusion and

190
00:05:28,036 --> 0:05:29,876
missteps later on.

191
00:05:30,756 --> 0:05:32,886
Storyboards are an incredibly

192
00:05:32,886 --> 0:05:34,536
powerful tool for building out

193
00:05:34,536 --> 0:05:35,886
user interfaces in a visual

194
00:05:35,886 --> 0:05:36,286
manner.

195
00:05:37,106 --> 0:05:38,676
But we do come across a lot of

196
00:05:38,676 --> 0:05:39,966
projects that build out their

197
00:05:39,966 --> 0:05:41,586
entire UI in a single

198
00:05:41,586 --> 0:05:42,216
storyboard.

199
00:05:42,586 --> 0:05:44,126
And there's no reason to do this

200
00:05:44,296 --> 0:05:45,656
thanks to storyboard references.

201
00:05:46,716 --> 0:05:48,176
Use a different storyboard file

202
00:05:48,176 --> 0:05:49,606
for each major section of your

203
00:05:49,606 --> 0:05:50,976
application and then use

204
00:05:50,976 --> 0:05:52,556
references to tie them together.

205
00:05:52,866 --> 0:05:54,196
You'll find it makes it so much

206
00:05:54,196 --> 0:05:55,896
easier to isolate individual

207
00:05:55,896 --> 0:05:56,376
changes.

208
00:05:56,636 --> 0:05:58,096
And it makes it much simpler

209
00:05:58,176 --> 0:05:59,506
when working with larger teams,

210
00:05:59,706 --> 0:06:00,916
as you can avoid the risks of

211
00:05:59,706 --> 0:06:00,916
as you can avoid the risks of

212
00:06:00,916 --> 0:06:02,826
those nasty merge conflicts and

213
00:06:02,826 --> 0:06:04,446
make resolving those that occur

214
00:06:04,446 --> 0:06:05,236
way easier.

215
00:06:06,556 --> 0:06:07,576
Just like you wouldn't put your

216
00:06:07,576 --> 0:06:09,346
entire source code in a single

217
00:06:09,346 --> 0:06:11,456
file, don't put your whole UI in

218
00:06:11,456 --> 0:06:13,336
a single storyboard either.

219
00:06:15,756 --> 0:06:18,016
Keeping your project file modern

220
00:06:18,416 --> 0:06:19,926
is a critical way to make sure

221
00:06:19,926 --> 0:06:22,276
that Xcode can help you out and

222
00:06:22,276 --> 0:06:23,556
avoids the accumulation of

223
00:06:23,556 --> 0:06:24,026
issues.

224
00:06:24,606 --> 0:06:25,956
This is one of those tasks that

225
00:06:25,956 --> 0:06:27,976
can really be a non-issue if you

226
00:06:27,976 --> 0:06:29,216
take care of it regularly.

227
00:06:29,736 --> 0:06:31,886
But it can really cause problems

228
00:06:31,886 --> 0:06:33,406
down the road if you don't keep

229
00:06:33,406 --> 0:06:33,876
up with it.

230
00:06:35,036 --> 0:06:36,766
First, when you're updating to a

231
00:06:36,766 --> 0:06:38,546
new version of Xcode, you'll be

232
00:06:38,546 --> 0:06:39,656
offered the opportunity

233
00:06:39,656 --> 0:06:41,476
sometimes to have Xcode update

234
00:06:41,556 --> 0:06:43,376
the project settings and update

235
00:06:43,376 --> 0:06:45,016
your project file to the latest

236
00:06:45,016 --> 0:06:45,446
format.

237
00:06:45,926 --> 0:06:46,816
So, unless you have some

238
00:06:46,816 --> 0:06:48,496
critical reason not to do this,

239
00:06:48,826 --> 0:06:49,946
we'd recommend that you do it

240
00:06:49,946 --> 0:06:51,866
whenever prompted, or whenever a

241
00:06:51,866 --> 0:06:53,316
warning appears in the issue

242
00:06:53,316 --> 0:06:53,886
navigator.

243
00:06:55,246 --> 0:06:56,766
Second, make sure that your

244
00:06:56,766 --> 0:06:58,766
project is using the new Xcode

245
00:06:58,766 --> 0:07:00,046
build system first released in

246
00:06:58,766 --> 0:07:00,046
build system first released in

247
00:07:00,046 --> 0:07:01,026
2017.

248
00:07:02,226 --> 0:07:03,206
It offers significant

249
00:07:03,206 --> 0:07:04,706
improvements in performance,

250
00:07:05,596 --> 0:07:07,086
dependency management, and it's

251
00:07:07,136 --> 0:07:08,556
absolutely critical to your

252
00:07:08,556 --> 0:07:10,096
adoption of Swift packages.

253
00:07:10,666 --> 0:07:13,026
Now, it's been the default build

254
00:07:13,026 --> 0:07:14,536
system since Xcode 10.

255
00:07:14,756 --> 0:07:16,036
And you can verify the build

256
00:07:16,036 --> 0:07:17,226
system that your project is

257
00:07:17,226 --> 0:07:18,796
using by looking at the project

258
00:07:18,796 --> 0:07:20,666
settings found under the file

259
00:07:20,666 --> 0:07:21,000
menu.

260
00:07:23,966 --> 0:07:25,266
Us woodworkers, we tend to hold

261
00:07:25,266 --> 0:07:27,956
onto small scraps, just in case

262
00:07:27,956 --> 0:07:30,596
we need them someday until that

263
00:07:30,596 --> 0:07:32,886
scrap bin gets so full that we

264
00:07:32,886 --> 0:07:34,126
just can't work around it

265
00:07:34,126 --> 0:07:35,496
anymore and we have to come to

266
00:07:35,496 --> 0:07:37,306
terms with the fact that these

267
00:07:37,306 --> 0:07:38,726
tiny pieces of wood that we've

268
00:07:38,726 --> 0:07:40,186
been holding onto are never

269
00:07:40,186 --> 0:07:41,336
really going to make it into a

270
00:07:41,336 --> 0:07:41,846
project.

271
00:07:42,666 --> 0:07:43,826
As developers, we have this

272
00:07:43,856 --> 0:07:45,306
tendency to hold on to scraps,

273
00:07:45,306 --> 0:07:45,626
too.

274
00:07:46,856 --> 0:07:48,626
But it's a simpler decision for

275
00:07:49,436 --> 0:07:49,526
us.

276
00:07:50,526 --> 0:07:51,556
Since you've got your project

277
00:07:51,556 --> 0:07:53,516
under source control, and you do

278
00:07:53,516 --> 0:07:54,726
have your project under source

279
00:07:54,726 --> 0:07:55,326
control, right?

280
00:07:56,576 --> 0:07:58,306
Get rid of that unneeded and

281
00:07:58,306 --> 0:07:59,056
unused code.

282
00:08:00,176 --> 0:08:02,946
Don't just comment it out just

283
00:08:02,946 --> 0:08:04,106
in case you want to pull it back

284
00:08:04,106 --> 0:08:04,576
someday.

285
00:08:04,846 --> 0:08:06,486
If you ever actually need it,

286
00:08:06,486 --> 0:08:07,586
it's going to be in the history

287
00:08:07,586 --> 0:08:08,326
for that file.

288
00:08:08,326 --> 0:08:09,826
And you can still get it back.

289
00:08:10,296 --> 0:08:14,456
Let go of those scraps.

290
00:08:14,456 --> 0:08:15,786
Another pile that we really

291
00:08:15,786 --> 0:08:16,936
don't want to have grow out of

292
00:08:16,936 --> 0:08:18,516
control are warnings.

293
00:08:18,786 --> 0:08:20,736
And to that end, establish a

294
00:08:20,736 --> 0:08:22,686
zero-warning practice for

295
00:08:22,686 --> 0:08:24,396
yourself and for your team.

296
00:08:25,236 --> 0:08:26,536
Code should never be checked in

297
00:08:26,536 --> 0:08:27,536
that contains warnings.

298
00:08:28,086 --> 0:08:29,336
And you should treat warnings as

299
00:08:29,376 --> 0:08:30,626
errors while you're writing your

300
00:08:30,626 --> 0:08:30,976
code.

301
00:08:31,166 --> 0:08:32,966
Just fix them as you go along.

302
00:08:34,246 --> 0:08:35,716
We've run into projects with

303
00:08:36,186 --> 0:08:37,525
thousands of warnings.

304
00:08:37,756 --> 0:08:39,226
And in most cases, they've just

305
00:08:39,226 --> 0:08:41,116
accumulated for so long that the

306
00:08:41,116 --> 0:08:43,096
developer gave up and just never

307
00:08:43,096 --> 0:08:44,336
had time to go fix them all.

308
00:08:45,226 --> 0:08:45,936
Furthermore, if you're

309
00:08:45,936 --> 0:08:47,406
maintaining a project like this,

310
00:08:48,246 --> 0:08:49,046
you're not going to see new

311
00:08:49,046 --> 0:08:51,046
warnings when they show up.

312
00:08:53,036 --> 0:08:54,706
So, this is getting organized.

313
00:08:54,886 --> 0:08:56,166
Keeping a clean workspace and

314
00:08:56,166 --> 0:08:57,956
project, it's critical to the

315
00:08:57,956 --> 0:09:00,376
long-term health and success of

316
00:08:57,956 --> 0:09:00,376
long-term health and success of

317
00:09:00,376 --> 0:09:00,716
your app.

318
00:09:01,546 --> 0:09:03,486
So, organize your project with

319
00:09:03,526 --> 0:09:04,016
groups.

320
00:09:04,856 --> 0:09:06,416
And have those groups mirror the

321
00:09:06,416 --> 0:09:07,416
file system structure.

322
00:09:08,176 --> 0:09:09,296
Break apart those large

323
00:09:09,296 --> 0:09:10,806
storyboards using references.

324
00:09:11,516 --> 0:09:13,056
And make sure your project file

325
00:09:13,126 --> 0:09:14,326
is up to date.

326
00:09:14,786 --> 0:09:16,386
Clean out that old and abandoned

327
00:09:16,386 --> 0:09:19,536
code and get to the root problem

328
00:09:19,536 --> 0:09:20,926
of warnings, and fix them as

329
00:09:20,926 --> 0:09:21,686
they arise.

330
00:09:21,976 --> 0:09:23,156
Doing these things will make

331
00:09:23,156 --> 0:09:24,976
your project more nimble and

332
00:09:24,976 --> 0:09:27,116
your development workflow way

333
00:09:27,116 --> 0:09:28,116
better throughout the life of

334
00:09:28,116 --> 0:09:29,286
your project.

335
00:09:31,636 --> 0:09:33,736
Speaking of source control, one

336
00:09:33,736 --> 0:09:34,596
of the things that you should

337
00:09:34,696 --> 0:09:36,876
always do when you're setting up

338
00:09:36,926 --> 0:09:38,526
your project, is enable source

339
00:09:38,526 --> 0:09:38,956
control.

340
00:09:40,516 --> 0:09:42,206
We do actually come across a lot

341
00:09:42,206 --> 0:09:43,666
of projects that don't use

342
00:09:43,666 --> 0:09:45,026
source control, especially those

343
00:09:45,026 --> 0:09:46,346
with solo developer teams.

344
00:09:47,806 --> 0:09:48,836
Conveniently, when you're

345
00:09:48,836 --> 0:09:50,606
setting up a new Xcode project,

346
00:09:51,356 --> 0:09:52,676
all it takes is to ensure that a

347
00:09:52,676 --> 0:09:55,076
check box is checked and your

348
00:09:55,076 --> 0:09:56,196
project will be under source

349
00:09:56,196 --> 0:09:57,126
control using Git.

350
00:09:58,516 --> 0:09:59,866
Now, you can always go back and

351
00:09:59,866 --> 0:10:00,776
see what changes you've made in

352
00:09:59,866 --> 0:10:00,776
see what changes you've made in

353
00:10:00,776 --> 0:10:00,976
the past,

354
00:10:02,146 --> 0:10:03,616
what's about to change, when you

355
00:10:03,616 --> 0:10:04,736
commit your current set of

356
00:10:04,736 --> 0:10:05,236
changes.

357
00:10:05,416 --> 0:10:06,996
And more easily catch any sort

358
00:10:06,996 --> 0:10:07,626
of errors.

359
00:10:08,976 --> 0:10:10,346
So, now that you've got Git

360
00:10:10,346 --> 0:10:12,086
enabled, there's a few things

361
00:10:12,146 --> 0:10:13,526
that you should keep in mind in

362
00:10:13,526 --> 0:10:15,006
order to make it more helpful

363
00:10:15,266 --> 0:10:15,946
and effective.

364
00:10:16,576 --> 0:10:19,936
First, keep your commit small.

365
00:10:20,236 --> 0:10:21,206
Check your code into your

366
00:10:21,206 --> 0:10:22,536
working branch regularly in

367
00:10:22,536 --> 0:10:23,936
small increments.

368
00:10:24,196 --> 0:10:25,356
And keep those changes as

369
00:10:25,356 --> 0:10:27,346
localized and self-contained as

370
00:10:27,376 --> 0:10:27,886
possible.

371
00:10:29,146 --> 0:10:30,176
This will give you a path to

372
00:10:30,176 --> 0:10:32,686
look back upon when later on you

373
00:10:32,686 --> 0:10:33,976
need clues or you're trying to

374
00:10:33,976 --> 0:10:34,916
sort out a regression.

375
00:10:35,676 --> 0:10:37,106
And, meanwhile, it's going to

376
00:10:37,106 --> 0:10:38,626
reduce your odds of introducing

377
00:10:38,626 --> 0:10:39,846
a regression because you're

378
00:10:39,846 --> 0:10:41,346
making those smaller changes.

379
00:10:42,946 --> 0:10:44,756
Second, write useful commit

380
00:10:44,756 --> 0:10:46,596
messages because there comes a

381
00:10:46,596 --> 0:10:48,616
day when we all ask the question

382
00:10:48,616 --> 0:10:49,836
that we wish we could answer,

383
00:10:50,166 --> 0:10:51,616
what on earth was I thinking?

384
00:10:52,906 --> 0:10:54,186
Your commit messages are your

385
00:10:54,186 --> 0:10:56,596
notes to future self when you're

386
00:10:56,596 --> 0:10:58,206
trying to recall under what

387
00:10:58,206 --> 0:10:59,906
circumstances some code changed

388
00:11:00,236 --> 0:11:01,000
and the reasons why.

389
00:11:04,726 --> 0:11:06,616
Run your source control, like

390
00:11:06,616 --> 0:11:07,936
you would for a large team.

391
00:11:07,976 --> 0:11:09,306
Even if you were a solo

392
00:11:09,306 --> 0:11:09,876
developer.

393
00:11:09,876 --> 0:11:11,796
It means maybe branching for

394
00:11:11,796 --> 0:11:13,116
bugs and new features.

395
00:11:13,366 --> 0:11:14,876
And then once you wrap those up,

396
00:11:14,876 --> 0:11:17,186
squash them together back into

397
00:11:17,186 --> 0:11:19,216
the main or dev batch, and use a

398
00:11:19,216 --> 0:11:20,556
clean and helpful commit

399
00:11:20,586 --> 0:11:21,086
message.

400
00:11:21,726 --> 0:11:23,166
Now, there are several options

401
00:11:23,166 --> 0:11:24,316
and patterns that you can follow

402
00:11:24,316 --> 0:11:25,576
for your source control.

403
00:11:25,866 --> 0:11:27,656
We recommend checking them out

404
00:11:27,656 --> 0:11:28,756
and finding the one that works

405
00:11:28,756 --> 0:11:30,296
really well for you and just

406
00:11:30,346 --> 0:11:31,556
integrating that into your

407
00:11:31,556 --> 0:11:32,606
developer workflow.

408
00:11:33,186 --> 0:11:35,136
So, that's tracking.

409
00:11:35,786 --> 0:11:37,326
Source control is absolutely

410
00:11:37,326 --> 0:11:39,686
critical to a successful, modern

411
00:11:39,786 --> 0:11:41,016
app development workflow.

412
00:11:41,266 --> 0:11:42,416
So, adopt it as part of your

413
00:11:42,416 --> 0:11:44,216
project and embrace it as part

414
00:11:44,216 --> 0:11:45,346
of your regular practice.

415
00:11:45,896 --> 0:11:47,966
Keep those commits small and

416
00:11:47,966 --> 0:11:49,476
write useful commit messages.

417
00:11:50,276 --> 0:11:52,376
And finally, utilize branches to

418
00:11:52,376 --> 0:11:53,946
help isolate and manage those

419
00:11:53,946 --> 0:11:56,376
changes, bug fixes, and feature

420
00:11:57,916 --> 0:11:58,000
work.

421
00:12:00,276 --> 0:12:02,126
Two of the greatest contributors

422
00:12:02,126 --> 0:12:04,136
to clarity and maintainability,

423
00:12:04,196 --> 0:12:06,046
in my opinion, are code comments

424
00:12:06,146 --> 0:12:07,176
and documentation.

425
00:12:08,226 --> 0:12:09,316
They're a trail of helpful

426
00:12:09,316 --> 0:12:10,846
breadcrumbs for your teammates

427
00:12:10,966 --> 0:12:11,906
or your future self.

428
00:12:13,136 --> 0:12:14,656
Some might say, "I don't need

429
00:12:14,656 --> 0:12:16,186
comments, my code is

430
00:12:16,186 --> 0:12:17,156
self-documenting."

431
00:12:18,536 --> 0:12:19,486
I don't buy this at all.

432
00:12:20,486 --> 0:12:22,546
Well-written code is clear in

433
00:12:22,546 --> 0:12:23,906
what it's doing algorithmically.

434
00:12:23,906 --> 0:12:26,196
And it's self-documenting in

435
00:12:26,196 --> 0:12:27,016
that respect.

436
00:12:27,606 --> 0:12:29,236
But it doesn't convey why.

437
00:12:29,686 --> 0:12:31,006
Why was this code written in the

438
00:12:31,006 --> 0:12:31,776
first place?

439
00:12:32,366 --> 0:12:34,096
How does this code fit into the

440
00:12:34,096 --> 0:12:35,316
larger context?

441
00:12:36,066 --> 0:12:38,056
Nor does it describe the

442
00:12:38,056 --> 0:12:39,426
rationale behind the approach

443
00:12:39,426 --> 0:12:41,066
taken when writing it.

444
00:12:42,376 --> 0:12:44,086
The best developers that I work

445
00:12:44,166 --> 0:12:46,256
with, that not only write

446
00:12:46,256 --> 0:12:48,226
incredible, clear, and concise

447
00:12:48,226 --> 0:12:49,916
code but they take the time to

448
00:12:49,916 --> 0:12:51,836
sprinkle helpful review comments

449
00:12:51,836 --> 0:12:53,686
throughout that code, to guide

450
00:12:53,726 --> 0:12:54,836
the future reader into the

451
00:12:54,836 --> 0:12:56,356
headspace of the original

452
00:12:56,356 --> 0:12:56,796
author.

453
00:12:58,226 --> 0:12:59,876
Junior developers will likely

454
00:12:59,876 --> 0:13:01,486
benefit from this process, even

455
00:12:59,876 --> 0:13:01,486
benefit from this process, even

456
00:13:01,486 --> 0:13:03,576
more because you're experience

457
00:13:03,576 --> 0:13:05,096
at the beginning of a project,

458
00:13:05,516 --> 0:13:07,436
varies so much from at the end.

459
00:13:07,676 --> 0:13:08,786
And the decisions that you make

460
00:13:08,786 --> 0:13:09,986
at the beginning of a project

461
00:13:10,196 --> 0:13:11,396
might actually be at odds with

462
00:13:11,426 --> 0:13:12,626
the decisions made at the end.

463
00:13:13,806 --> 0:13:15,076
So, what makes for a good

464
00:13:15,076 --> 0:13:15,536
comment?

465
00:13:16,246 --> 0:13:18,276
Well, a good comment assumes

466
00:13:18,276 --> 0:13:19,506
that the reader understands the

467
00:13:19,506 --> 0:13:21,136
programming language being used

468
00:13:21,776 --> 0:13:22,616
and can walk through the

469
00:13:22,616 --> 0:13:24,236
sequence and steps being taken

470
00:13:24,236 --> 0:13:24,916
in the code.

471
00:13:26,516 --> 0:13:27,866
And instead, it really focuses

472
00:13:27,866 --> 0:13:29,346
on why that code was written in

473
00:13:29,346 --> 0:13:30,166
the first place.

474
00:13:30,436 --> 0:13:32,186
What's the backing for that?

475
00:13:32,736 --> 0:13:34,326
For example, this is the kind of

476
00:13:34,326 --> 0:13:36,216
comment that just doesn't really

477
00:13:36,216 --> 0:13:37,216
add any value.

478
00:13:37,216 --> 0:13:38,786
And yet, we see it all the time.

479
00:13:39,186 --> 0:13:40,476
I'm assuming that most of you

480
00:13:40,476 --> 0:13:41,626
have written some code in Swift

481
00:13:41,626 --> 0:13:43,346
and could just figure out that

482
00:13:43,346 --> 0:13:45,116
we're creating a string constant

483
00:13:45,116 --> 0:13:46,516
here carrying that value.

484
00:13:47,326 --> 0:13:49,496
But we have no idea what id is,

485
00:13:49,856 --> 0:13:52,146
what it's used for, or why has

486
00:13:52,146 --> 0:13:54,256
this been hard coded into the

487
00:13:54,886 --> 0:13:54,966
app?

488
00:13:55,246 --> 0:13:56,366
So, with a little bit of

489
00:13:56,366 --> 0:13:57,956
commenting, we now understand

490
00:13:57,956 --> 0:13:59,396
why this value exists and where

491
00:13:59,396 --> 0:14:00,056
it came from.

492
00:13:59,396 --> 0:14:00,056
it came from.

493
00:14:00,246 --> 0:14:01,356
But we can take this one step

494
00:14:01,356 --> 0:14:03,766
further; names for constants and

495
00:14:03,766 --> 0:14:05,546
variables offer additional

496
00:14:05,546 --> 0:14:06,716
opportunities for clarity.

497
00:14:07,256 --> 0:14:08,616
So, if you find yourself using

498
00:14:08,616 --> 0:14:11,376
single letters like m or i, or

499
00:14:11,376 --> 0:14:13,816
things like id or idx, it might

500
00:14:13,816 --> 0:14:15,566
be a great opportunity to choose

501
00:14:15,566 --> 0:14:16,826
a more descriptive variable

502
00:14:16,826 --> 0:14:17,146
name.

503
00:14:18,026 --> 0:14:19,466
Autocomplete in Xcode works like

504
00:14:19,466 --> 0:14:19,886
a charm.

505
00:14:20,056 --> 0:14:20,906
So, you don't even really have

506
00:14:20,906 --> 0:14:21,966
to type anything more.

507
00:14:22,856 --> 0:14:24,126
And it will always be clear

508
00:14:24,316 --> 0:14:26,206
throughout your code base what

509
00:14:26,206 --> 0:14:27,726
particular identifier, in this

510
00:14:27,726 --> 0:14:29,636
case, is being used at any point

511
00:14:30,456 --> 0:14:31,986
in time.

512
00:14:32,786 --> 0:14:34,316
The benefits to documentation

513
00:14:34,556 --> 0:14:35,976
are very similar to that of

514
00:14:36,036 --> 0:14:36,626
comments.

515
00:14:36,866 --> 0:14:38,386
But these scale throughout your

516
00:14:38,386 --> 0:14:39,896
application and beyond.

517
00:14:41,276 --> 0:14:42,596
As you write your own apps,

518
00:14:42,906 --> 0:14:44,556
you're creating layers upon

519
00:14:44,556 --> 0:14:45,876
layers of abstraction and

520
00:14:45,876 --> 0:14:47,566
algorithms taking what would be

521
00:14:47,566 --> 0:14:49,486
large and winding passages of

522
00:14:49,486 --> 0:14:51,356
code and breaking them down into

523
00:14:51,356 --> 0:14:53,646
tidy, testable, reusable

524
00:14:53,646 --> 0:14:54,156
functions.

525
00:14:55,296 --> 0:14:56,256
But if you choose not to

526
00:14:56,256 --> 0:14:57,716
document these functions, you're

527
00:14:57,716 --> 0:14:59,206
forcing yourself to actually

528
00:14:59,256 --> 0:15:00,996
rewrite that documentation in

529
00:14:59,256 --> 0:15:00,996
rewrite that documentation in

530
00:15:00,996 --> 0:15:03,326
your mind every single time you

531
00:15:03,326 --> 0:15:04,396
go to use that function.

532
00:15:04,996 --> 0:15:06,416
Typically, by having to go and

533
00:15:06,416 --> 0:15:07,636
revisit the implementation of

534
00:15:07,636 --> 0:15:09,056
the function, look at how each

535
00:15:09,056 --> 0:15:09,976
of the parameters are being

536
00:15:09,976 --> 0:15:11,416
used, and figure out how it's

537
00:15:11,416 --> 0:15:12,806
going to transform them to

538
00:15:12,806 --> 0:15:13,626
provide a result.

539
00:15:14,356 --> 0:15:16,856
In case you aren't aware,

540
00:15:16,996 --> 0:15:18,936
generating a Dock stub in Xcode

541
00:15:19,016 --> 0:15:20,306
is incredibly easy.

542
00:15:20,516 --> 0:15:21,646
Just place your curser on the

543
00:15:21,686 --> 0:15:22,666
first line of the function

544
00:15:22,666 --> 0:15:24,436
signature, press option command

545
00:15:24,436 --> 0:15:26,406
slash and all the placeholder

546
00:15:26,406 --> 0:15:27,806
text you need will be generated

547
00:15:27,806 --> 0:15:28,526
automatically.

548
00:15:28,786 --> 0:15:31,006
Fill in the blanks and you're

549
00:15:33,356 --> 0:15:33,466
done.

550
00:15:33,676 --> 0:15:35,376
Option clicking on any usage of

551
00:15:35,376 --> 0:15:36,796
that function will now bring up

552
00:15:36,866 --> 0:15:38,446
your own documentation in the

553
00:15:38,446 --> 0:15:40,376
same contextual quick help popup

554
00:15:40,376 --> 0:15:41,346
that you've come to know and

555
00:15:41,346 --> 0:15:43,036
love for the native SDK and

556
00:15:43,216 --> 0:15:44,516
Swift standard library.

557
00:15:44,976 --> 0:15:48,516
Comments and documentation:

558
00:15:49,006 --> 0:15:50,266
They're one of these really low

559
00:15:50,266 --> 0:15:51,656
effort but incredibly high

560
00:15:51,656 --> 0:15:53,576
reward investments of your time.

561
00:15:53,846 --> 0:15:55,156
And it pays off repeatedly

562
00:15:55,156 --> 0:15:56,046
throughout the life of your

563
00:15:56,046 --> 0:15:56,556
project.

564
00:15:56,986 --> 0:15:58,546
So, aid future understanding by

565
00:15:58,546 --> 0:15:59,646
sprinkling your code with

566
00:15:59,646 --> 0:16:00,586
helpful comments.

567
00:15:59,646 --> 0:16:00,586
helpful comments.

568
00:16:01,056 --> 0:16:03,056
Bring readers into the headspace

569
00:16:03,126 --> 0:16:04,566
of the original author with

570
00:16:04,606 --> 0:16:05,316
those comments.

571
00:16:06,006 --> 0:16:07,236
Use descriptive names for your

572
00:16:07,236 --> 0:16:09,116
variables, and fully document

573
00:16:09,116 --> 0:16:10,456
your functions, properties,

574
00:16:10,546 --> 0:16:11,876
Structs and Enums.

575
00:16:12,446 --> 0:16:16,436
Next, I'm going to talk about

576
00:16:16,436 --> 0:16:18,716
testing, and specifically, unit

577
00:16:18,716 --> 0:16:19,156
testing.

578
00:16:19,746 --> 0:16:21,226
And to do that, I want to

579
00:16:21,226 --> 0:16:22,016
introduce Marshall.

580
00:16:22,896 --> 0:16:24,536
Marshall is our Swift and

581
00:16:24,536 --> 0:16:25,896
developer tools evangelist.

582
00:16:26,256 --> 0:16:27,726
He's an incredibly brilliant and

583
00:16:27,766 --> 0:16:28,446
kind fellow.

584
00:16:28,446 --> 0:16:30,306
And he also happens to be a

585
00:16:30,306 --> 0:16:32,616
walking, talking Swift-linter.

586
00:16:33,176 --> 0:16:36,106
Every time I submit my code for

587
00:16:36,106 --> 0:16:38,636
review, I brace for the tsunami

588
00:16:38,636 --> 0:16:40,096
of insightful comments and

589
00:16:40,096 --> 0:16:41,756
feedback to help me improve what

590
00:16:41,756 --> 0:16:42,966
I've written in both form and

591
00:16:42,966 --> 0:16:43,396
function.

592
00:16:43,736 --> 0:16:45,666
But the other day, Marshall

593
00:16:45,666 --> 0:16:47,346
nudged me in the right direction

594
00:16:47,346 --> 0:16:49,316
on another topic, unit testing.

595
00:16:50,516 --> 0:16:52,986
Now, I must admit, I don't

596
00:16:52,986 --> 0:16:54,606
exactly have an impeccable track

597
00:16:54,606 --> 0:16:55,806
record in writing unit tests.

598
00:16:56,626 --> 0:16:58,116
It's not that I don't appreciate

599
00:16:58,116 --> 0:16:59,506
the potential value in them or

600
00:16:59,506 --> 0:17:00,566
that I'm necessarily new to

601
00:16:59,506 --> 0:17:00,566
that I'm necessarily new to

602
00:17:00,566 --> 0:17:00,886
them.

603
00:17:01,386 --> 0:17:02,676
It's just I tend to always leave

604
00:17:02,676 --> 0:17:03,466
it to last.

605
00:17:03,646 --> 0:17:04,846
And by the time I've finished

606
00:17:04,925 --> 0:17:06,356
implementing the actual code,

607
00:17:07,016 --> 0:17:08,376
the last thing I feel like doing

608
00:17:08,376 --> 0:17:09,476
is writing a unit test.

609
00:17:10,066 --> 0:17:11,826
Nevertheless, the other day,

610
00:17:11,965 --> 0:17:13,046
while implementing the data

611
00:17:13,046 --> 0:17:14,415
model for the new lab queuing

612
00:17:14,415 --> 0:17:15,806
feature, in the DubDub app,

613
00:17:16,636 --> 0:17:17,476
Marshall piped in.

614
00:17:18,856 --> 0:17:19,955
&gt;&gt; And while you're doing that,

615
00:17:20,205 --> 0:17:21,116
you might as well add a unit

616
00:17:21,156 --> 0:17:22,465
test to make sure that the round

617
00:17:22,526 --> 0:17:23,705
trip between the Struct and the

618
00:17:23,705 --> 0:17:25,175
dictionary representation keeps

619
00:17:25,175 --> 0:17:25,425
working.

620
00:17:26,906 --> 0:17:29,326
&gt;&gt; Now, in my mind, I really

621
00:17:29,326 --> 0:17:30,196
couldn't figure out how this

622
00:17:30,196 --> 0:17:30,996
would be messed up in the

623
00:17:30,996 --> 0:17:31,416
future.

624
00:17:31,736 --> 0:17:33,176
But nevertheless, I listened to

625
00:17:33,176 --> 0:17:34,756
Marshall and I put in a simple

626
00:17:34,756 --> 0:17:35,776
round trip unit test.

627
00:17:36,886 --> 0:17:37,386
I ran it.

628
00:17:37,386 --> 0:17:39,706
And I felt this significant bit

629
00:17:40,086 --> 0:17:41,566
of satisfaction when the green

630
00:17:41,566 --> 0:17:42,796
check mark showed that the test

631
00:17:42,796 --> 0:17:43,146
passed.

632
00:17:44,576 --> 0:17:45,746
So, I submitted my changes for

633
00:17:45,746 --> 0:17:47,136
review and I didn't think about

634
00:17:47,136 --> 0:17:48,916
that test again until a couple

635
00:17:48,916 --> 0:17:51,326
of weeks later, when we wanted

636
00:17:51,326 --> 0:17:52,756
to include some additional data

637
00:17:52,756 --> 0:17:53,566
in that Struct.

638
00:17:54,626 --> 0:17:56,566
So, made the changes to the

639
00:17:56,566 --> 0:17:56,866
Struct.

640
00:17:56,866 --> 0:17:58,536
And I didn't see any issues at

641
00:17:58,536 --> 0:17:58,806
runtime.

642
00:17:58,806 --> 0:18:00,536
I'm done, right?

643
00:17:58,806 --> 0:18:00,536
I'm done, right?

644
00:18:01,566 --> 0:18:03,306
So, went to submit my changes.

645
00:18:03,846 --> 0:18:05,036
And then I remembered to run

646
00:18:05,036 --> 0:18:05,766
that unit test.

647
00:18:05,986 --> 0:18:08,046
And sure enough, I'd forgotten

648
00:18:08,046 --> 0:18:09,266
to change how the dictionary

649
00:18:09,266 --> 0:18:11,026
deserialization was working and

650
00:18:11,176 --> 0:18:11,956
the test caught it.

651
00:18:12,676 --> 0:18:13,986
The bug would have shown up much

652
00:18:13,986 --> 0:18:15,276
later, when we implementing the

653
00:18:15,276 --> 0:18:15,596
UI.

654
00:18:15,706 --> 0:18:17,046
And would have undoubtedly

655
00:18:17,046 --> 0:18:18,456
wasted a fair bit of our time,

656
00:18:18,456 --> 0:18:19,566
trying to figure out what went

657
00:18:19,566 --> 0:18:19,946
wrong.

658
00:18:21,066 --> 0:18:22,606
So, thanks, Marshall, for

659
00:18:22,606 --> 0:18:24,426
reminding me to include unit

660
00:18:24,426 --> 0:18:25,736
tests, as part of my regular

661
00:18:25,736 --> 0:18:26,256
practice.

662
00:18:27,006 --> 0:18:29,276
&gt;&gt; You're welcome, Josh [brief

663
00:18:29,276 --> 0:18:30,016
laughter].

664
00:18:30,516 --> 0:18:34,866
[ Applause ]

665
00:18:35,366 --> 0:18:36,996
&gt;&gt; So, even for sections of code

666
00:18:37,126 --> 0:18:38,816
that seem deceptively simple, as

667
00:18:39,046 --> 0:18:40,506
this particular one did to me at

668
00:18:40,506 --> 0:18:42,436
the time, it's so important to

669
00:18:42,436 --> 0:18:43,556
write those unit tests.

670
00:18:44,156 --> 0:18:45,746
With the malleability of code

671
00:18:45,916 --> 0:18:47,666
comes the potential introduction

672
00:18:47,796 --> 0:18:48,636
of regressions.

673
00:18:49,366 --> 0:18:50,546
And given that we never seem to

674
00:18:50,546 --> 0:18:52,106
have enough time to test things

675
00:18:52,106 --> 0:18:54,516
thoroughly, let's put Xcode to

676
00:18:54,516 --> 0:18:56,186
work as an extra set of eyes.

677
00:18:56,986 --> 0:18:58,876
So, make the implementation of

678
00:18:58,876 --> 0:19:00,186
unit tests a part of your

679
00:18:58,876 --> 0:19:00,186
unit tests a part of your

680
00:19:00,186 --> 0:19:01,926
regular development practice and

681
00:19:01,926 --> 0:19:03,316
run those tests before each

682
00:19:03,316 --> 0:19:03,666
commit.

683
00:19:05,046 --> 0:19:06,566
Also, unit tests are a key

684
00:19:06,566 --> 0:19:07,856
component to continuous

685
00:19:07,856 --> 0:19:08,416
integration.

686
00:19:08,566 --> 0:19:09,746
So, you can get yourself set up

687
00:19:09,776 --> 0:19:10,806
for that.

688
00:19:11,106 --> 0:19:12,336
Tests are another one of these

689
00:19:12,336 --> 0:19:13,686
hidden details that your

690
00:19:13,686 --> 0:19:15,046
customers will never actually

691
00:19:15,046 --> 0:19:15,566
see.

692
00:19:16,136 --> 0:19:17,016
But yet, could mean the

693
00:19:17,016 --> 0:19:18,546
difference between an incredible

694
00:19:18,546 --> 0:19:20,516
experience using your app or a

695
00:19:20,516 --> 0:19:22,106
very frustrating one when some

696
00:19:22,106 --> 0:19:23,216
important piece of their data

697
00:19:23,216 --> 0:19:24,006
has been corrupted.

698
00:19:26,696 --> 0:19:28,666
There's forms of analysis that

699
00:19:28,666 --> 0:19:29,866
you'll want to keep as part of

700
00:19:29,866 --> 0:19:30,886
your regular workflow.

701
00:19:31,016 --> 0:19:32,866
Now, some of these do require

702
00:19:32,866 --> 0:19:34,176
some extra time investment.

703
00:19:34,426 --> 0:19:35,956
But others can happen for you in

704
00:19:35,956 --> 0:19:37,456
the background without you even

705
00:19:37,456 --> 0:19:39,026
having to think about it.

706
00:19:40,376 --> 0:19:41,486
One tool that can be very

707
00:19:41,486 --> 0:19:42,756
helpful is the Network Link

708
00:19:42,756 --> 0:19:43,266
Conditioner.

709
00:19:43,716 --> 0:19:45,306
After all, app development tends

710
00:19:45,306 --> 0:19:46,826
to be performed in homes and

711
00:19:46,826 --> 0:19:48,346
offices with incredible network

712
00:19:48,406 --> 0:19:49,056
performance.

713
00:19:49,786 --> 0:19:51,086
But this really isn't a

714
00:19:51,086 --> 0:19:52,616
representative environment of

715
00:19:52,666 --> 0:19:53,896
where your app is likely to be

716
00:19:53,896 --> 0:19:54,526
used.

717
00:19:55,056 --> 0:19:56,656
So, by enabling the Network Link

718
00:19:56,656 --> 0:19:57,776
Conditioner, you can

719
00:19:57,776 --> 0:19:59,016
artificially constrain your

720
00:19:59,016 --> 0:20:00,126
network performance to one

721
00:19:59,016 --> 0:20:00,126
network performance to one

722
00:20:00,186 --> 0:20:01,406
similar to that of a typical

723
00:20:01,406 --> 0:20:01,976
cellular network.

724
00:20:02,176 --> 0:20:04,116
Or even a poorly performing one.

725
00:20:04,736 --> 0:20:06,106
You'd be amazed at the number of

726
00:20:06,106 --> 0:20:07,366
issues that you'll catch with

727
00:20:07,366 --> 0:20:08,786
loading and race conditions so

728
00:20:09,146 --> 0:20:10,846
that you customers don't.

729
00:20:12,276 --> 0:20:13,936
Inside of your scheme settings,

730
00:20:14,146 --> 0:20:15,656
there's also several sanitizers

731
00:20:15,656 --> 0:20:16,676
and checkers that can help

732
00:20:16,676 --> 0:20:17,946
discover various issues

733
00:20:17,996 --> 0:20:18,846
throughout your development

734
00:20:18,846 --> 0:20:19,206
cycle.

735
00:20:19,906 --> 0:20:21,646
The Address Sanitizer will watch

736
00:20:21,646 --> 0:20:22,536
for things like memory

737
00:20:22,536 --> 0:20:24,636
corruptions and buffer

738
00:20:24,636 --> 0:20:25,246
overflows.

739
00:20:26,416 --> 0:20:27,676
Memory issues are frequently the

740
00:20:27,676 --> 0:20:28,536
cause of security

741
00:20:28,536 --> 0:20:29,236
vulnerabilities.

742
00:20:29,406 --> 0:20:30,856
So, using the Address Sanitize,

743
00:20:30,856 --> 0:20:32,076
will help you make sure that you

744
00:20:32,076 --> 0:20:33,966
don't ship these is the first

745
00:20:34,736 --> 0:20:34,886
place.

746
00:20:36,116 --> 0:20:37,916
By enabling the Thread

747
00:20:37,916 --> 0:20:39,376
Sanitizer, while testing your --

748
00:20:39,376 --> 0:20:40,626
and debugging your app in the

749
00:20:40,626 --> 0:20:42,446
simulator, you can help discover

750
00:20:42,446 --> 0:20:43,376
data races.

751
00:20:44,476 --> 0:20:46,116
Data races are when you have two

752
00:20:46,276 --> 0:20:47,486
threads that are not

753
00:20:47,486 --> 0:20:49,726
synchronized and at least one of

754
00:20:49,726 --> 0:20:51,006
those two threads is attempting

755
00:20:51,006 --> 0:20:52,746
to do a write on the same piece

756
00:20:52,746 --> 0:20:53,136
of data.

757
00:20:53,806 --> 0:20:56,106
Now, these can be particularly

758
00:20:56,106 --> 0:20:58,086
nasty bugs and they can have

759
00:20:58,186 --> 0:21:00,186
programs acting unpredictably.

760
00:20:58,186 --> 0:21:00,186
programs acting unpredictably.

761
00:21:00,566 --> 0:21:01,726
Or they can even result in

762
00:21:01,726 --> 0:21:02,476
memory corruption.

763
00:21:03,066 --> 0:21:06,756
The Undefined Behavior Sanitizer

764
00:21:07,136 --> 0:21:08,496
captures bugs like dividing by

765
00:21:08,496 --> 0:21:10,416
zero, out of range casts between

766
00:21:10,416 --> 0:21:12,306
floating point types, overflows,

767
00:21:12,306 --> 0:21:13,466
and misaligned pointers.

768
00:21:13,906 --> 0:21:15,326
And when a program has undefined

769
00:21:15,326 --> 0:21:16,446
behavior, it might cause a

770
00:21:16,446 --> 0:21:17,056
crash.

771
00:21:17,536 --> 0:21:18,646
It might act in unpredictable

772
00:21:18,646 --> 0:21:21,246
ways, or it might act like it

773
00:21:21,246 --> 0:21:23,356
has no problem at all with

774
00:21:23,356 --> 0:21:24,616
different results at different

775
00:21:24,616 --> 0:21:26,296
times seemingly with no reason.

776
00:21:27,256 --> 0:21:28,816
Incredibly frustrating bugs; the

777
00:21:28,816 --> 0:21:30,246
sanitizer can help you get rid

778
00:21:30,246 --> 0:21:31,206
of them, before they can wreak

779
00:21:31,206 --> 0:21:32,226
havoc on your project.

780
00:21:33,556 --> 0:21:35,036
And finally, there's the Main

781
00:21:35,036 --> 0:21:36,656
Thread Checker which ensures

782
00:21:36,706 --> 0:21:38,326
that you're not performing

783
00:21:38,326 --> 0:21:40,886
invalid usage of appKit, UIKit,

784
00:21:41,066 --> 0:21:42,666
and other API's on background

785
00:21:42,666 --> 0:21:42,986
threads.

786
00:21:43,386 --> 0:21:44,726
For example, if you're updating

787
00:21:44,726 --> 0:21:46,166
the UI on a thread other than

788
00:21:46,166 --> 0:21:48,096
the main thread, it can cause

789
00:21:48,186 --> 0:21:49,996
missed UI updates, visual

790
00:21:49,996 --> 0:21:51,866
defects, data corruptions and

791
00:21:51,866 --> 0:21:52,356
crashes.

792
00:21:53,376 --> 0:21:54,496
Sometimes these bugs can be

793
00:21:54,566 --> 0:21:55,726
really hard to track down

794
00:21:55,726 --> 0:21:56,836
because they might only appear

795
00:21:56,836 --> 0:21:57,606
intermittently.

796
00:21:58,136 --> 0:21:59,376
Now, there's minimal performance

797
00:21:59,376 --> 0:22:00,766
impact by having this enabled.

798
00:21:59,376 --> 0:22:00,766
impact by having this enabled.

799
00:22:00,966 --> 0:22:02,226
So, we just recommend leaving it

800
00:22:02,226 --> 0:22:03,486
enabled whenever possible.

801
00:22:04,006 --> 0:22:07,836
While debugging your apps, keep

802
00:22:07,836 --> 0:22:08,976
an eye on performance and

803
00:22:08,976 --> 0:22:10,066
resource utilization.

804
00:22:10,196 --> 0:22:11,226
And make sure that your app is

805
00:22:11,276 --> 0:22:12,676
being as efficient with system

806
00:22:12,676 --> 0:22:13,916
resources as possible.

807
00:22:14,746 --> 0:22:16,366
The first step is, use the Debug

808
00:22:16,406 --> 0:22:16,916
Gauges.

809
00:22:17,676 --> 0:22:18,616
These are found in the debug

810
00:22:18,616 --> 0:22:20,296
navigator in Xcode anytime

811
00:22:20,296 --> 0:22:21,156
you've built and run your

812
00:22:21,156 --> 0:22:21,606
project.

813
00:22:22,866 --> 0:22:24,656
Here you can check out CPU,

814
00:22:24,656 --> 0:22:26,126
memory, disk, and network

815
00:22:26,126 --> 0:22:27,346
utilization throughout the

816
00:22:27,346 --> 0:22:29,596
lifecycle of your app, quickly

817
00:22:29,596 --> 0:22:31,006
understand if your app is doing

818
00:22:31,006 --> 0:22:32,106
something like connecting to

819
00:22:32,106 --> 0:22:33,396
unexpected servers over the

820
00:22:33,396 --> 0:22:33,776
network.

821
00:22:34,026 --> 0:22:35,616
Or maybe it's constantly pulling

822
00:22:35,616 --> 0:22:37,326
at an end point, and chewing up

823
00:22:37,326 --> 0:22:39,106
a ton of bandwidth and battery.

824
00:22:39,746 --> 0:22:42,486
And finally, you can take this

825
00:22:42,486 --> 0:22:44,076
even further, by clicking in the

826
00:22:44,126 --> 0:22:45,536
profile and instruments button

827
00:22:45,776 --> 0:22:46,836
which will allow you to run an

828
00:22:46,836 --> 0:22:48,786
even more in-depth analysis.

829
00:22:49,526 --> 0:22:51,106
One particular instrument that I

830
00:22:51,106 --> 0:22:53,176
use a lot is the time profiler.

831
00:22:53,406 --> 0:22:54,816
This allows you to ascertain

832
00:22:54,816 --> 0:22:56,256
which passages of your code are

833
00:22:56,256 --> 0:22:57,966
taking up the most cycles and

834
00:22:58,136 --> 0:22:59,796
has allowed us to narrow in on

835
00:23:00,346 --> 0:23:02,006
passages of work that might need

836
00:23:02,006 --> 0:23:03,316
to be made asynchronous.

837
00:23:03,676 --> 0:23:05,726
Or perhaps, I just implemented

838
00:23:05,726 --> 0:23:09,706
in an unscalable manner.

839
00:23:10,106 --> 0:23:11,386
Analysis is a really broad

840
00:23:11,386 --> 0:23:11,826
subject.

841
00:23:12,536 --> 0:23:13,356
But most of the tools I

842
00:23:13,356 --> 0:23:14,876
described here only require that

843
00:23:14,876 --> 0:23:16,096
you remember to turn them on.

844
00:23:17,086 --> 0:23:18,886
So, simulate typical and poor

845
00:23:18,886 --> 0:23:20,206
networks using that Network Link

846
00:23:20,206 --> 0:23:20,726
Conditioner.

847
00:23:21,446 --> 0:23:22,656
Use those sanitizers and

848
00:23:22,656 --> 0:23:23,566
checkers frequently.

849
00:23:23,676 --> 0:23:25,166
And just leave them enabled, if

850
00:23:25,166 --> 0:23:25,636
you can.

851
00:23:26,486 --> 0:23:27,836
Refer to those Debug Gauges

852
00:23:27,836 --> 0:23:28,486
regularly.

853
00:23:28,486 --> 0:23:29,726
And just keep an eye on the

854
00:23:29,726 --> 0:23:31,016
footprint and performance of

855
00:23:31,016 --> 0:23:31,416
your app.

856
00:23:32,386 --> 0:23:33,996
And dig deeper into issues and

857
00:23:33,996 --> 0:23:34,946
address them with great

858
00:23:34,986 --> 0:23:36,706
precision, by analyzing your

859
00:23:36,706 --> 0:23:37,796
app, using instruments.

860
00:23:38,306 --> 0:23:39,836
Turning these small efforts into

861
00:23:39,836 --> 0:23:42,366
habits will go a long way into

862
00:23:42,366 --> 0:23:43,616
improving the performance and

863
00:23:43,616 --> 0:23:45,446
reliability of your apps.

864
00:23:46,836 --> 0:23:49,206
Back when I lived in Toronto, I

865
00:23:49,866 --> 0:23:52,416
had a single car garage that I

866
00:23:52,416 --> 0:23:53,566
had converted into my

867
00:23:53,566 --> 0:23:54,336
woodworking shop.

868
00:23:55,586 --> 0:23:56,646
It was a cozy space.

869
00:23:57,526 --> 0:23:59,236
And I had it entirely to myself.

870
00:24:00,296 --> 0:24:01,706
But since moving to the Bay

871
00:24:01,706 --> 0:24:03,926
Area, I don't have a space to

872
00:24:03,926 --> 0:24:04,756
myself anymore.

873
00:24:05,076 --> 0:24:06,396
And I've been using various

874
00:24:06,396 --> 0:24:08,136
shared and community woodshops

875
00:24:08,206 --> 0:24:08,796
in the area.

876
00:24:09,526 --> 0:24:11,226
Now, doing so can be a bit

877
00:24:11,226 --> 0:24:13,526
frustrating at times because now

878
00:24:13,526 --> 0:24:14,536
I have to share the tools and

879
00:24:14,536 --> 0:24:15,616
the equipment and the space with

880
00:24:15,616 --> 0:24:16,236
others.

881
00:24:17,106 --> 0:24:18,836
But something I hadn't realized

882
00:24:18,836 --> 0:24:20,626
I would appreciate so much is

883
00:24:20,626 --> 0:24:22,156
the opportunity to bounce ideas

884
00:24:22,156 --> 0:24:23,996
off of others in the shop.

885
00:24:23,996 --> 0:24:25,336
And get their opinions on ways

886
00:24:25,396 --> 0:24:26,486
to go about doing things.

887
00:24:27,886 --> 0:24:29,526
I think with app development the

888
00:24:29,526 --> 0:24:30,906
analog here is that of code

889
00:24:30,906 --> 0:24:31,216
review.

890
00:24:32,266 --> 0:24:33,816
So, for many of the apps I've

891
00:24:33,846 --> 0:24:34,936
built over the years, I've been

892
00:24:34,936 --> 0:24:35,936
the solo developer.

893
00:24:37,156 --> 0:24:38,136
And much like having your own

894
00:24:38,136 --> 0:24:39,996
shop, it feels incredibly fast

895
00:24:39,996 --> 0:24:43,746
and nimble because only your own

896
00:24:43,746 --> 0:24:44,566
opinion matters.

897
00:24:45,396 --> 0:24:46,976
But the drawback is that you

898
00:24:46,976 --> 0:24:48,226
don't have that opportunity to

899
00:24:48,226 --> 0:24:49,766
learn from your colleagues and

900
00:24:49,816 --> 0:24:52,436
peers on better ways to use the

901
00:24:52,436 --> 0:24:54,416
language, frameworks, and SDK.

902
00:24:55,536 --> 0:24:57,066
Often, although there's lots of

903
00:24:57,066 --> 0:24:58,386
ways to approach a problem,

904
00:24:58,786 --> 0:25:00,316
there's often a better way.

905
00:24:58,786 --> 0:25:00,316
there's often a better way.

906
00:25:01,196 --> 0:25:02,496
Something that stands out in

907
00:25:02,496 --> 0:25:03,966
terms of being more concise.

908
00:25:04,476 --> 0:25:06,226
Or maybe is more -- has greater

909
00:25:06,226 --> 0:25:07,886
performance, maintainability or

910
00:25:07,886 --> 0:25:08,596
reliability.

911
00:25:09,096 --> 0:25:10,486
Because, after all, just because

912
00:25:10,486 --> 0:25:12,646
it works, doesn't mean that it's

913
00:25:12,646 --> 0:25:13,606
necessarily right.

914
00:25:14,216 --> 0:25:15,736
Or that it could somehow be

915
00:25:15,736 --> 0:25:16,746
significantly improved.

916
00:25:17,896 --> 0:25:19,796
At Apple, all teams have a

917
00:25:19,796 --> 0:25:21,226
policy where no code makes it

918
00:25:21,226 --> 0:25:22,706
into a project without code

919
00:25:22,746 --> 0:25:23,046
review.

920
00:25:23,496 --> 0:25:25,106
Our team has learned so much

921
00:25:25,106 --> 0:25:26,016
from each other through this

922
00:25:26,016 --> 0:25:26,596
process.

923
00:25:26,836 --> 0:25:27,956
And our code is way more

924
00:25:27,956 --> 0:25:29,796
consistent in its style, let

925
00:25:29,796 --> 0:25:30,936
alone the improvements in the

926
00:25:30,936 --> 0:25:31,636
reliability.

927
00:25:32,326 --> 0:25:33,856
It also ensures that our entire

928
00:25:33,966 --> 0:25:35,846
team is more familiar with a

929
00:25:35,846 --> 0:25:37,316
broader set of the code base,

930
00:25:37,536 --> 0:25:38,836
allowing the range of bugs and

931
00:25:38,836 --> 0:25:40,306
features that we can each tackle

932
00:25:40,586 --> 0:25:41,436
to be much wider.

933
00:25:42,586 --> 0:25:44,386
Now, I have this fortune of

934
00:25:44,386 --> 0:25:46,166
being on a great team of

935
00:25:46,166 --> 0:25:47,766
experienced developers, which

936
00:25:47,766 --> 0:25:48,906
makes this much simpler.

937
00:25:49,426 --> 0:25:50,646
But what if you're running a

938
00:25:50,646 --> 0:25:52,276
company on your own or are the

939
00:25:52,276 --> 0:25:54,036
sole developer on your project?

940
00:25:55,156 --> 0:25:57,236
Well, try to find a way to

941
00:25:57,236 --> 0:25:58,626
connect with fellow developers

942
00:25:58,836 --> 0:26:00,356
in your area or from around the

943
00:25:58,836 --> 0:26:00,356
in your area or from around the

944
00:26:00,356 --> 0:26:00,646
world.

945
00:26:00,876 --> 0:26:02,086
And come up with a way to do a

946
00:26:02,086 --> 0:26:04,936
code review exchange with them.

947
00:26:05,146 --> 0:26:06,536
Maybe investigate meet-ups,

948
00:26:06,676 --> 0:26:07,886
local conferences, and

949
00:26:07,886 --> 0:26:08,836
co-working spaces.

950
00:26:10,116 --> 0:26:11,156
So, now that you're going to do

951
00:26:11,156 --> 0:26:12,396
code review, as part of your

952
00:26:12,396 --> 0:26:14,146
development practice, what makes

953
00:26:14,146 --> 0:26:14,976
a great code review?

954
00:26:15,766 --> 0:26:18,376
Well, first, it means taking the

955
00:26:18,376 --> 0:26:20,266
time to understand each changed

956
00:26:20,266 --> 0:26:21,016
line of code.

957
00:26:21,396 --> 0:26:22,666
There's no point in doing a code

958
00:26:22,666 --> 0:26:23,786
review if it's just a quick

959
00:26:23,786 --> 0:26:24,206
skim.

960
00:26:26,266 --> 0:26:28,666
Second, actually build the

961
00:26:28,666 --> 0:26:29,116
project.

962
00:26:29,816 --> 0:26:32,656
Run it. Don't assume that the

963
00:26:32,716 --> 0:26:34,446
original author actually did

964
00:26:34,526 --> 0:26:34,726
this.

965
00:26:34,796 --> 0:26:36,246
Especially if the last commit

966
00:26:36,246 --> 0:26:37,716
you see in the history was a

967
00:26:37,716 --> 0:26:38,256
merge.

968
00:26:38,736 --> 0:26:42,186
Run those tests.

969
00:26:42,656 --> 0:26:44,796
First, doing so reminds you to

970
00:26:44,846 --> 0:26:46,266
check and see that there are

971
00:26:46,266 --> 0:26:47,276
actually tests.

972
00:26:47,516 --> 0:26:49,426
And that the unit tests pass.

973
00:26:50,266 --> 0:26:51,246
Remember, that just because it

974
00:26:51,306 --> 0:26:53,136
builds doesn't mean that it's

975
00:26:53,136 --> 0:26:54,326
not broken somehow.

976
00:26:54,866 --> 0:26:57,426
Read those comments and

977
00:26:57,426 --> 0:26:58,656
documentation thoroughly.

978
00:26:58,946 --> 0:27:00,196
I mean, there are comments and

979
00:26:58,946 --> 0:27:00,196
I mean, there are comments and

980
00:27:00,196 --> 0:27:01,546
documentation, right?

981
00:27:02,706 --> 0:27:03,946
And then look for spelling and

982
00:27:03,946 --> 0:27:04,926
grammatical errors.

983
00:27:07,086 --> 0:27:08,426
Similarly, look for spelling

984
00:27:08,426 --> 0:27:09,626
errors in variable names.

985
00:27:10,256 --> 0:27:12,486
So, as a Canadian, I have this

986
00:27:12,486 --> 0:27:14,206
long-standing habit of including

987
00:27:14,206 --> 0:27:16,796
"u" in words like colour, which

988
00:27:16,796 --> 0:27:18,976
drives my team absolutely nuts,

989
00:27:18,976 --> 0:27:20,376
when they go and search for

990
00:27:22,456 --> 0:27:22,596
color.

991
00:27:23,086 --> 0:27:24,626
Ensuring consistency in the code

992
00:27:24,626 --> 0:27:26,096
base helps with finding and

993
00:27:26,096 --> 0:27:27,066
using these functions and

994
00:27:27,066 --> 0:27:28,506
variables later on.

995
00:27:28,566 --> 0:27:32,186
And again, it just saves time.

996
00:27:32,406 --> 0:27:33,756
So, even though it might feel

997
00:27:33,756 --> 0:27:35,116
like this process is slowing you

998
00:27:35,116 --> 0:27:36,786
down in the short-term, it will

999
00:27:36,786 --> 0:27:38,226
undoubtedly save you time,

1000
00:27:38,456 --> 0:27:40,086
money, and customers in the

1001
00:27:40,086 --> 0:27:41,306
future through the reduction of

1002
00:27:41,306 --> 0:27:42,916
potential errors and issues in

1003
00:27:42,916 --> 0:27:43,506
the long-run.

1004
00:27:44,306 --> 0:27:46,166
And your skills, as a developer,

1005
00:27:46,316 --> 0:27:48,236
will benefit significantly, when

1006
00:27:48,236 --> 0:27:49,996
you approach similar patterns or

1007
00:27:49,996 --> 0:27:51,256
challenges in the future.

1008
00:27:54,226 --> 0:27:56,226
As developers, we're all

1009
00:27:56,226 --> 0:27:58,126
endeavoring to create small,

1010
00:27:58,216 --> 0:28:00,736
refined, reusable and testable

1011
00:27:58,216 --> 0:28:00,736
refined, reusable and testable

1012
00:28:00,736 --> 0:28:01,676
sections of code.

1013
00:28:02,496 --> 0:28:04,476
After all, we don't want to have

1014
00:28:04,476 --> 0:28:06,336
to constantly recreate the same

1015
00:28:06,336 --> 0:28:07,506
code over and over.

1016
00:28:09,256 --> 0:28:10,836
Packages and frameworks offer an

1017
00:28:10,836 --> 0:28:12,246
opportunity to maintain that

1018
00:28:12,326 --> 0:28:14,116
code in a more centralized way.

1019
00:28:14,426 --> 0:28:16,256
And offer that functionality in

1020
00:28:16,256 --> 0:28:17,216
a portable fashion.

1021
00:28:17,596 --> 0:28:18,926
Not only through your current

1022
00:28:18,926 --> 0:28:20,816
app, but through other apps that

1023
00:28:20,816 --> 0:28:21,966
might be able to leverage that

1024
00:28:21,966 --> 0:28:22,206
effort.

1025
00:28:23,426 --> 0:28:24,886
If your app includes extensions,

1026
00:28:24,986 --> 0:28:26,736
by packaging up your shared code

1027
00:28:26,736 --> 0:28:28,776
between -- in a framework, your

1028
00:28:28,776 --> 0:28:30,406
binary size will actually reduce

1029
00:28:30,406 --> 0:28:32,256
because both your main app and

1030
00:28:32,256 --> 0:28:33,396
your extensions can actually

1031
00:28:33,396 --> 0:28:34,616
share that same framework.

1032
00:28:35,286 --> 0:28:38,266
Of course, creating packages

1033
00:28:38,266 --> 0:28:39,736
also offers the opportunity to

1034
00:28:39,736 --> 0:28:40,706
share your efforts with the

1035
00:28:40,706 --> 0:28:42,156
community especially with the

1036
00:28:42,156 --> 0:28:43,556
tight integration now found in

1037
00:28:43,666 --> 0:28:44,346
Xcode 11.

1038
00:28:44,906 --> 0:28:47,936
But even more than the code that

1039
00:28:47,936 --> 0:28:49,666
lives in your app, shared

1040
00:28:49,736 --> 0:28:51,316
frameworks, packages, and

1041
00:28:51,316 --> 0:28:52,736
libraries need to be accompanied

1042
00:28:52,736 --> 0:28:54,846
by great documentation, in order

1043
00:28:54,846 --> 0:28:57,866
to be useful to others.

1044
00:28:58,296 --> 0:28:59,516
So, embrace packages and

1045
00:28:59,516 --> 0:29:01,216
frameworks as a way to break

1046
00:28:59,516 --> 0:29:01,216
frameworks as a way to break

1047
00:29:01,216 --> 0:29:02,326
apart your code base.

1048
00:29:03,476 --> 0:29:04,396
This will also allow you to

1049
00:29:04,396 --> 0:29:06,016
scale your work across multiple

1050
00:29:06,016 --> 0:29:07,356
apps you might be working on and

1051
00:29:07,356 --> 0:29:07,936
maintaining.

1052
00:29:08,716 --> 0:29:10,186
Frameworks can help you reduce

1053
00:29:10,226 --> 0:29:11,186
the binary size.

1054
00:29:11,796 --> 0:29:14,136
And then you can, of course,

1055
00:29:14,136 --> 0:29:15,036
share your efforts with the

1056
00:29:15,036 --> 0:29:15,516
community.

1057
00:29:16,386 --> 0:29:17,896
But be sure to include that

1058
00:29:17,896 --> 0:29:18,916
great documentation.

1059
00:29:21,916 --> 0:29:23,426
The last area that I want to

1060
00:29:23,426 --> 0:29:25,126
talk to you about today is

1061
00:29:25,126 --> 0:29:26,866
dependencies, and, specifically,

1062
00:29:26,956 --> 0:29:28,336
understanding the benefits and

1063
00:29:28,336 --> 0:29:29,696
risks of bringing them into your

1064
00:29:29,696 --> 0:29:30,146
project.

1065
00:29:32,096 --> 0:29:33,276
Using Swift packages,

1066
00:29:33,646 --> 0:29:35,216
frameworks, and other libraries,

1067
00:29:35,816 --> 0:29:37,166
offers many benefits.

1068
00:29:37,726 --> 0:29:39,886
But before you start to use a

1069
00:29:39,886 --> 0:29:41,946
given package, it's really

1070
00:29:41,946 --> 0:29:43,066
important to know what's inside

1071
00:29:43,066 --> 0:29:43,266
of it.

1072
00:29:43,476 --> 0:29:44,576
And what could be potentially

1073
00:29:44,576 --> 0:29:45,846
coming along for the ride.

1074
00:29:46,506 --> 0:29:49,006
Make sure that you understand

1075
00:29:49,006 --> 0:29:50,216
what your dependency is doing

1076
00:29:50,216 --> 0:29:50,676
with data.

1077
00:29:51,636 --> 0:29:53,256
Ultimately, you're responsible

1078
00:29:53,256 --> 0:29:54,446
for the contents of your app.

1079
00:29:55,406 --> 0:29:57,096
And what it's doing with user

1080
00:29:57,096 --> 0:29:57,356
data.

1081
00:29:58,286 --> 0:29:59,276
Make sure that the framework

1082
00:29:59,276 --> 0:30:00,646
isn't collecting metrics or

1083
00:29:59,276 --> 0:30:00,646
isn't collecting metrics or

1084
00:30:00,646 --> 0:30:01,706
device information that's

1085
00:30:01,706 --> 0:30:02,456
unnecessary.

1086
00:30:03,356 --> 0:30:04,356
And make sure that it's

1087
00:30:04,356 --> 0:30:05,796
definitely not sending that data

1088
00:30:05,996 --> 0:30:06,796
off device.

1089
00:30:07,306 --> 0:30:10,486
Note what other dependency, a

1090
00:30:10,486 --> 0:30:12,256
giving dependency, depends on.

1091
00:30:12,836 --> 0:30:14,066
And research into those, as

1092
00:30:14,066 --> 0:30:14,316
well.

1093
00:30:15,156 --> 0:30:16,396
After all, including a

1094
00:30:16,396 --> 0:30:18,066
dependency with dependencies now

1095
00:30:18,066 --> 0:30:20,106
means that your app is actually

1096
00:30:20,106 --> 0:30:21,876
riding on the security and

1097
00:30:21,876 --> 0:30:23,536
success of that entire chain.

1098
00:30:24,136 --> 0:30:26,486
And, finally, there's one other

1099
00:30:26,486 --> 0:30:27,206
possibility.

1100
00:30:27,616 --> 0:30:28,826
What if the framework breaks on

1101
00:30:28,826 --> 0:30:28,926
you?

1102
00:30:29,976 --> 0:30:31,636
What if it becomes unmaintained?

1103
00:30:32,306 --> 0:30:36,056
Or what if it just disappears?

1104
00:30:36,116 --> 0:30:37,246
It's really important to have a

1105
00:30:37,246 --> 0:30:38,616
plan on how you're going to deal

1106
00:30:38,616 --> 0:30:40,036
with each of these situations

1107
00:30:40,096 --> 0:30:41,866
anytime you're introducing a new

1108
00:30:41,866 --> 0:30:43,136
dependency into your project.

1109
00:30:43,456 --> 0:30:45,336
After all, your applications

1110
00:30:45,336 --> 0:30:47,106
future is now dependent on it.

1111
00:30:48,626 --> 0:30:49,946
So, are you going to be able to

1112
00:30:49,946 --> 0:30:51,256
fix the open bugs yourself?

1113
00:30:51,346 --> 0:30:52,876
Are you going to bring that

1114
00:30:52,876 --> 0:30:54,146
project in-house and maintain

1115
00:30:54,146 --> 0:30:54,246
it?

1116
00:30:54,866 --> 0:30:56,496
Or are you going to plan to have

1117
00:30:56,536 --> 0:30:58,106
to completely swap out that

1118
00:30:58,106 --> 0:30:58,996
dependency later?

1119
00:30:59,296 --> 0:31:00,616
With all of the necessary work

1120
00:30:59,296 --> 0:31:00,616
With all of the necessary work

1121
00:31:00,666 --> 0:31:02,386
that comes with that task?

1122
00:31:03,296 --> 0:31:04,276
The use of external

1123
00:31:04,276 --> 0:31:05,326
dependencies, such as Swift

1124
00:31:05,326 --> 0:31:06,716
packages, can allow you to move

1125
00:31:06,716 --> 0:31:07,816
more quickly and avoid

1126
00:31:07,886 --> 0:31:09,136
recreating tools that might

1127
00:31:09,136 --> 0:31:10,536
already exist in the community.

1128
00:31:12,006 --> 0:31:14,066
But be diligent in their use.

1129
00:31:14,966 --> 0:31:16,166
Ensure that they only do what

1130
00:31:16,166 --> 0:31:17,166
you expect them to.

1131
00:31:17,636 --> 0:31:19,836
And absolutely ensure that they

1132
00:31:19,836 --> 0:31:21,446
respect the privacy of people

1133
00:31:21,446 --> 0:31:22,386
using your apps.

1134
00:31:23,926 --> 0:31:25,056
Make sure you establish that

1135
00:31:25,056 --> 0:31:26,616
plan of what you're going to do

1136
00:31:26,616 --> 0:31:28,356
if they break or otherwise go

1137
00:31:28,356 --> 0:31:29,126
away in the future.

1138
00:31:30,116 --> 0:31:31,366
If you make answering these

1139
00:31:31,366 --> 0:31:33,506
questions a habit when adding a

1140
00:31:33,506 --> 0:31:35,006
new dependency to your project,

1141
00:31:35,566 --> 0:31:36,796
it's going to payoff in the long

1142
00:31:36,796 --> 0:31:38,416
run, and maximize the benefits

1143
00:31:38,416 --> 0:31:39,000
of using them.

1144
00:31:42,726 --> 0:31:44,146
With app development projects,

1145
00:31:44,856 --> 0:31:46,146
it can sometimes feel like the

1146
00:31:46,146 --> 0:31:48,866
last 10% of the project takes

1147
00:31:48,896 --> 0:31:51,396
just as long as the first 90% of

1148
00:31:51,396 --> 0:31:51,946
the project.

1149
00:31:52,616 --> 0:31:53,866
But I think that by trying to

1150
00:31:53,866 --> 0:31:55,376
convert some of these practices

1151
00:31:55,376 --> 0:31:57,316
and principles into habits, you

1152
00:31:57,316 --> 0:31:58,606
can help avoid that feeling.

1153
00:31:59,226 --> 0:32:01,726
So, by effectively organizing

1154
00:31:59,226 --> 0:32:01,726
So, by effectively organizing

1155
00:32:01,726 --> 0:32:03,056
your workspace, you can work

1156
00:32:03,056 --> 0:32:04,836
faster and more efficiently

1157
00:32:05,116 --> 0:32:07,036
keeping focused on the actual

1158
00:32:07,626 --> 0:32:07,726
code.

1159
00:32:08,436 --> 0:32:09,896
Through the power of source

1160
00:32:09,896 --> 0:32:11,526
control, you can track your code

1161
00:32:11,526 --> 0:32:13,446
base with precision, reduce the

1162
00:32:13,446 --> 0:32:14,996
odds of regressions, and

1163
00:32:14,996 --> 0:32:16,936
expedite the investigation of

1164
00:32:16,936 --> 0:32:17,856
bugs that might occur.

1165
00:32:19,046 --> 0:32:20,146
By writing helpful and

1166
00:32:20,146 --> 0:32:21,606
meaningful comments and

1167
00:32:21,606 --> 0:32:23,166
documentation, you can reduce

1168
00:32:23,246 --> 0:32:24,956
the cognitive burden whenever

1169
00:32:24,956 --> 0:32:26,476
you revisit code in the future

1170
00:32:26,656 --> 0:32:27,956
and every time you make use of a

1171
00:32:27,956 --> 0:32:29,576
class, Struct, or function that

1172
00:32:29,576 --> 0:32:29,966
you've built.

1173
00:32:31,356 --> 0:32:33,086
Unit tests will save you at the

1174
00:32:33,086 --> 0:32:34,856
eleventh hour, from checking

1175
00:32:34,856 --> 0:32:36,126
encode that introduces new

1176
00:32:36,126 --> 0:32:36,606
regressions.

1177
00:32:38,046 --> 0:32:39,906
Sanitizers and checkers offer

1178
00:32:39,906 --> 0:32:41,446
ongoing analysis of your code

1179
00:32:41,856 --> 0:32:43,046
and they run in the background

1180
00:32:43,046 --> 0:32:44,246
without you even having to think

1181
00:32:44,246 --> 0:32:44,646
about it.

1182
00:32:45,166 --> 0:32:46,846
Gauges and instruments ensure

1183
00:32:46,846 --> 0:32:48,046
that you are being efficient

1184
00:32:48,046 --> 0:32:49,096
with your use of system

1185
00:32:49,096 --> 0:32:50,796
resources and they'll allow you

1186
00:32:50,796 --> 0:32:52,186
to chase down performance and

1187
00:32:52,186 --> 0:32:53,506
other issues, with precision.

1188
00:32:54,656 --> 0:32:56,716
Code review is not only a chance

1189
00:32:56,716 --> 0:32:57,926
to evaluate the style and

1190
00:32:57,966 --> 0:32:59,276
function of your code, but an

1191
00:32:59,276 --> 0:33:00,836
enormous learning opportunity

1192
00:32:59,276 --> 0:33:00,836
enormous learning opportunity

1193
00:33:00,886 --> 0:33:02,426
for developing -- for evolving

1194
00:33:02,426 --> 0:33:04,266
your skills as a developer and

1195
00:33:04,266 --> 0:33:05,506
sharing them with your team and

1196
00:33:05,506 --> 0:33:06,096
the community.

1197
00:33:07,176 --> 0:33:08,386
Breaking your projects into

1198
00:33:08,386 --> 0:33:10,596
smaller and reusable packages

1199
00:33:10,596 --> 0:33:12,106
and frameworks can help scale

1200
00:33:12,106 --> 0:33:13,186
your work across multiple

1201
00:33:13,186 --> 0:33:14,866
projects and allow you to share

1202
00:33:14,866 --> 0:33:14,966
it.

1203
00:33:15,876 --> 0:33:17,006
There's also those benefits to

1204
00:33:17,006 --> 0:33:17,726
binary size.

1205
00:33:18,906 --> 0:33:20,516
And finally, the use of external

1206
00:33:20,516 --> 0:33:21,936
dependencies, such as Swift

1207
00:33:21,936 --> 0:33:23,496
packages, can help you move more

1208
00:33:23,496 --> 0:33:25,466
quickly and reuse functions that

1209
00:33:25,466 --> 0:33:26,356
might already exist in the

1210
00:33:26,356 --> 0:33:26,846
community.

1211
00:33:27,176 --> 0:33:28,916
But be diligent in their use.

1212
00:33:29,086 --> 0:33:30,946
Understand what they do with

1213
00:33:30,976 --> 0:33:31,626
user data.

1214
00:33:31,696 --> 0:33:33,256
And establish a plan in case

1215
00:33:33,256 --> 0:33:33,886
they go away.

1216
00:33:34,856 --> 0:33:36,486
Including these practices as

1217
00:33:36,486 --> 0:33:37,866
part of your work as an app

1218
00:33:37,916 --> 0:33:40,196
developer will only add a small

1219
00:33:40,196 --> 0:33:41,356
bit of time to each phase of

1220
00:33:41,356 --> 0:33:41,986
your project.

1221
00:33:41,986 --> 0:33:42,886
But it will save you an

1222
00:33:42,886 --> 0:33:44,496
incredible amount of time, over

1223
00:33:44,496 --> 0:33:45,976
the long run, ensuring your app

1224
00:33:45,976 --> 0:33:46,816
is built to last.

1225
00:33:47,676 --> 0:33:49,286
I hope that this collection of

1226
00:33:49,286 --> 0:33:50,606
ideas and suggestions I've

1227
00:33:50,606 --> 0:33:52,106
offered you today, has allowed

1228
00:33:52,106 --> 0:33:53,506
you to think about how you too

1229
00:33:53,546 --> 0:33:54,876
can further improve your craft

1230
00:33:54,876 --> 0:33:55,756
as an app developer.

1231
00:33:56,036 --> 0:33:57,516
Practices you might incorporate

1232
00:33:57,766 --> 0:33:58,596
to allow you to raise the

1233
00:33:58,596 --> 0:34:00,266
quality and durability of your

1234
00:33:58,596 --> 0:34:00,266
quality and durability of your

1235
00:34:00,266 --> 0:34:02,146
work and conscious efforts that

1236
00:34:02,146 --> 0:34:03,486
you can turn into automatic

1237
00:34:03,486 --> 0:34:05,176
habits, that allow you to direct

1238
00:34:05,176 --> 0:34:06,666
your energy to the areas of most

1239
00:34:06,666 --> 0:34:07,296
importance.

1240
00:34:07,556 --> 0:34:09,366
For the people who engage with

1241
00:34:09,406 --> 0:34:11,786
your apps will feel that care

1242
00:34:11,786 --> 0:34:13,386
and love that you've poured into

1243
00:34:13,386 --> 0:34:14,896
your work even if they can't

1244
00:34:14,896 --> 0:34:16,025
exactly say why.

1245
00:34:16,626 --> 0:34:18,826
And you can take great pride in

1246
00:34:18,826 --> 0:34:19,696
what you have crafted.

1247
00:34:21,016 --> 0:34:21,326
Thank you.

1248
00:34:22,516 --> 0:34:29,505
[ Applause ]
