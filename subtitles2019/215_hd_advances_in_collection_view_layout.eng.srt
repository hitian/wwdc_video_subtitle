1
00:00:00,506 --> 0:00:08,516
[ Music ]

2
00:00:09,516 --> 0:00:13,946
[ Applause ]

3
00:00:14,446 --> 0:00:14,886
&gt;&gt; Welcome.

4
00:00:15,346 --> 0:00:16,346
My name is Steve Breen.

5
00:00:16,346 --> 0:00:17,856
I'm engineer on the UIKit team.

6
00:00:18,446 --> 0:00:19,436
And I'm joined today by me

7
00:00:19,436 --> 0:00:20,966
colleagues, Troy Stephens from

8
00:00:20,966 --> 0:00:22,596
the AppKit team; and Dersu

9
00:00:22,596 --> 0:00:24,036
Abolfathi [phonetic] from the

10
00:00:24,036 --> 0:00:24,716
App Store team.

11
00:00:26,436 --> 0:00:27,436
So today we're going to talk a

12
00:00:27,436 --> 0:00:29,006
little bit about advances in

13
00:00:29,006 --> 0:00:30,646
CollectionView layouts.

14
00:00:30,846 --> 0:00:31,486
Now, we're going to break the

15
00:00:31,486 --> 0:00:32,926
talk down into four broad

16
00:00:32,926 --> 0:00:33,536
segments.

17
00:00:33,536 --> 0:00:34,376
First we're going to go over the

18
00:00:34,376 --> 0:00:35,316
current state-of-the-art -- how

19
00:00:35,316 --> 0:00:35,966
do we do this today?

20
00:00:35,966 --> 0:00:38,076
How do we define CollectionView

21
00:00:38,076 --> 0:00:39,456
layout in our applications?

22
00:00:40,436 --> 0:00:41,326
Then we're going to go over a

23
00:00:41,426 --> 0:00:43,216
brand new approach that we're

24
00:00:43,216 --> 0:00:44,406
bringing to all the platforms

25
00:00:44,406 --> 0:00:46,066
this year -- iOS, tvOS, and the

26
00:00:46,066 --> 0:00:46,256
Mac.

27
00:00:46,896 --> 0:00:48,326
And then we're going to go on to

28
00:00:48,326 --> 0:00:49,956
some hands-on demos so you can

29
00:00:49,956 --> 0:00:51,556
see this API in action.

30
00:00:52,276 --> 0:00:53,526
And then we'll do a tour of some

31
00:00:53,526 --> 0:00:55,136
more advanced features of how

32
00:00:55,136 --> 0:00:56,586
you can get the most out of this

33
00:00:56,586 --> 0:00:56,886
API.

34
00:01:00,236 --> 0:01:01,276
All right, we got a ton of

35
00:01:01,276 --> 0:01:01,746
content.

36
00:01:01,746 --> 0:01:03,346
So let's get started.

37
00:01:04,215 --> 0:01:04,476
All right.

38
00:01:04,476 --> 0:01:06,306
So first let's talk a bit about

39
00:01:06,306 --> 0:01:07,166
the current state of UI.

40
00:01:07,166 --> 0:01:07,876
What do we do today?

41
00:01:07,876 --> 0:01:09,596
How do we define CollectionView

42
00:01:09,596 --> 0:01:10,056
layout?

43
00:01:11,336 --> 0:01:13,176
Now, when CollectionView was

44
00:01:13,176 --> 0:01:15,206
introduced back in iOS 6, it has

45
00:01:15,206 --> 0:01:17,006
a really novel concept; it had a

46
00:01:17,006 --> 0:01:18,426
separate abstraction for

47
00:01:18,426 --> 0:01:19,256
defining layout.

48
00:01:20,156 --> 0:01:21,766
So it's really two classes

49
00:01:21,766 --> 0:01:22,906
acting in concert with each

50
00:01:22,906 --> 0:01:23,686
other, where one does a

51
00:01:23,686 --> 0:01:25,626
rendering and one is responsible

52
00:01:25,626 --> 0:01:27,056
for where things go or the

53
00:01:27,056 --> 0:01:27,966
CollectionView layout.

54
00:01:28,856 --> 0:01:30,256
Now, CollectionView layout is an

55
00:01:30,256 --> 0:01:31,166
abstract thing.

56
00:01:31,166 --> 0:01:32,676
So we have to subclass to get

57
00:01:32,676 --> 0:01:33,306
use out of it.

58
00:01:33,356 --> 0:01:35,416
And we shipped a concrete layout

59
00:01:35,416 --> 0:01:37,336
class with iOS 6 called

60
00:01:37,336 --> 0:01:38,576
CollectionView flow layout.

61
00:01:40,136 --> 0:01:41,696
Now, flow layout was really

62
00:01:41,696 --> 0:01:43,476
useful for a ton of different

63
00:01:43,476 --> 0:01:44,926
designs, especially back in the

64
00:01:44,926 --> 0:01:46,126
iOS 6 days where things were

65
00:01:46,126 --> 0:01:47,176
maybe a little bit simpler.

66
00:01:48,066 --> 0:01:49,576
And it did this because it uses

67
00:01:49,576 --> 0:01:51,306
a line-based layout system.

68
00:01:51,306 --> 0:01:53,606
Now, we covered this last year

69
00:01:54,146 --> 0:01:55,686
in a tour of UI CollectionView.

70
00:01:56,146 --> 0:01:57,826
But in summary, a line-based

71
00:01:57,826 --> 0:01:59,096
system allows you to lay out on

72
00:01:59,096 --> 0:02:00,576
the orthogonal axis, of the

73
00:01:59,096 --> 0:02:00,576
the orthogonal axis, of the

74
00:02:00,576 --> 0:02:02,386
layout axis, until you just fill

75
00:02:02,386 --> 0:02:03,496
up the amount of space you have

76
00:02:03,496 --> 0:02:04,736
available and we drop the next

77
00:02:04,736 --> 0:02:05,026
line.

78
00:02:05,726 --> 0:02:07,726
And this is really great, it

79
00:02:07,726 --> 0:02:09,116
works simple, easy to reason

80
00:02:09,116 --> 0:02:09,446
about.

81
00:02:09,485 --> 0:02:10,376
You can get it up and running

82
00:02:10,376 --> 0:02:10,826
pretty quick.

83
00:02:11,786 --> 0:02:15,736
But what about today's apps?

84
00:02:16,636 --> 0:02:18,906
So as devices got more

85
00:02:18,906 --> 0:02:20,656
heterogeneous and screen sizes

86
00:02:20,656 --> 0:02:21,756
got different, things get mother

87
00:02:21,756 --> 0:02:23,326
complex in today's apps.

88
00:02:23,326 --> 0:02:25,186
And here we see the App Store

89
00:02:25,326 --> 0:02:26,866
that we're shipping in iOS 13.

90
00:02:27,736 --> 0:02:29,236
Now, if your designer handed you

91
00:02:29,236 --> 0:02:30,766
this design today, what would

92
00:02:30,766 --> 0:02:31,116
you do?

93
00:02:31,116 --> 0:02:32,216
Well, you'd think, "All right, I

94
00:02:32,216 --> 0:02:33,346
got to choose how I'm going to

95
00:02:33,346 --> 0:02:33,986
design this thing."

96
00:02:33,986 --> 0:02:35,156
And there's a lot of options now

97
00:02:35,156 --> 0:02:35,716
more than never.

98
00:02:36,806 --> 0:02:38,106
And you might settle on

99
00:02:38,106 --> 0:02:38,656
CollectionView.

100
00:02:38,656 --> 0:02:40,426
And if you did that, you would

101
00:02:40,486 --> 0:02:42,196
think to yourself, "Well, can I

102
00:02:42,196 --> 0:02:43,406
really make flow happen here?"

103
00:02:44,256 --> 0:02:45,396
And you'd probably discard that

104
00:02:45,396 --> 0:02:45,666
right away.

105
00:02:47,196 --> 0:02:47,976
So at that point now you're

106
00:02:47,976 --> 0:02:49,486
facing a custom layout.

107
00:02:49,486 --> 0:02:51,256
And, you know, I see what you

108
00:02:51,256 --> 0:02:52,526
guys say on Twitter about custom

109
00:02:52,526 --> 0:02:52,876
layouts.

110
00:02:52,876 --> 0:02:53,996
And they can be complicated.

111
00:02:53,996 --> 0:02:55,676
So last year we talked about

112
00:02:55,766 --> 0:02:57,616
this in a tour of

113
00:02:57,616 --> 0:02:58,136
CollectionView.

114
00:02:58,716 --> 0:03:00,256
And we talked about what's

115
00:02:58,716 --> 0:03:00,256
And we talked about what's

116
00:03:00,256 --> 0:03:01,656
involved with building a custom

117
00:03:01,656 --> 0:03:02,076
layout.

118
00:03:03,476 --> 0:03:05,016
Now, there's a certain amount of

119
00:03:05,266 --> 0:03:06,536
stuff you have to provide in

120
00:03:06,536 --> 0:03:08,976
your concrete layout class, and

121
00:03:09,336 --> 0:03:10,486
we walked through those things.

122
00:03:10,756 --> 0:03:12,236
And we also walked through the

123
00:03:12,286 --> 0:03:13,566
performance considerations you

124
00:03:13,566 --> 0:03:14,776
had to think about when you're

125
00:03:14,776 --> 0:03:15,976
designing a custom layout to

126
00:03:15,976 --> 0:03:17,386
make sure it's fast if you have

127
00:03:17,386 --> 0:03:18,466
a large number of items in your

128
00:03:18,466 --> 0:03:19,046
CollectionView.

129
00:03:19,576 --> 0:03:20,716
But we didn't cover everything,

130
00:03:20,716 --> 0:03:22,286
and there's additional

131
00:03:22,286 --> 0:03:23,356
challenges if you're building

132
00:03:23,356 --> 0:03:24,296
these custom layouts.

133
00:03:25,436 --> 0:03:26,766
And there's a number of those,

134
00:03:26,766 --> 0:03:27,876
but I'll cover a couple here,

135
00:03:27,916 --> 0:03:29,286
you know, supplementaries and

136
00:03:29,286 --> 0:03:31,246
decoration views -- two of the

137
00:03:31,246 --> 0:03:33,416
view types that you can manage

138
00:03:33,416 --> 0:03:34,816
in CollectionView -- are a

139
00:03:34,816 --> 0:03:36,236
little tricky in custom layout.

140
00:03:36,236 --> 0:03:36,986
You're on your own.

141
00:03:37,566 --> 0:03:39,296
And there's also self-sizing

142
00:03:39,296 --> 0:03:40,326
challenges you have to wrestle

143
00:03:40,326 --> 0:03:40,556
with.

144
00:03:41,016 --> 0:03:42,156
And we'll get into that more

145
00:03:42,156 --> 0:03:42,336
later.

146
00:03:42,606 --> 0:03:44,186
So this year we're bringing a

147
00:03:44,186 --> 0:03:46,796
brand-new concrete layout class

148
00:03:46,796 --> 0:03:48,666
to the platforms that sits right

149
00:03:48,666 --> 0:03:50,676
alongside flow as a peer.

150
00:03:51,286 --> 0:03:53,406
And we call this compositional

151
00:03:53,406 --> 0:03:53,886
layout.

152
00:03:54,986 --> 0:03:55,706
Okay. So --

153
00:03:56,091 --> 0:03:58,091
[ Applause ]

154
00:03:58,166 --> 0:03:59,936
Haven't even seen it yet.

155
00:04:00,566 --> 0:04:02,556
So -- so what is compositional

156
00:04:02,556 --> 0:04:02,686
layout?

157
00:04:02,686 --> 0:04:03,496
What does this thing do?

158
00:04:04,606 --> 0:04:06,356
Well, just a little philosophy

159
00:04:06,356 --> 0:04:06,856
right up front.

160
00:04:06,916 --> 0:04:08,076
Hey, what is this built on?

161
00:04:08,076 --> 0:04:09,656
It has three basic tent poles

162
00:04:09,656 --> 0:04:10,606
that we built compositional

163
00:04:10,606 --> 0:04:10,976
layout on.

164
00:04:10,976 --> 0:04:12,466
First, it's composable -- the

165
00:04:12,466 --> 0:04:13,816
idea of making complex things

166
00:04:13,816 --> 0:04:14,696
from simple things.

167
00:04:15,636 --> 0:04:16,555
And it's designed to be

168
00:04:16,606 --> 0:04:17,086
flexible.

169
00:04:17,555 --> 0:04:19,866
You can write any layout with

170
00:04:19,866 --> 0:04:20,606
compositional layout.

171
00:04:20,606 --> 0:04:21,776
It's extremely flexible.

172
00:04:21,776 --> 0:04:23,496
And it's also fast by default.

173
00:04:23,496 --> 0:04:25,296
So we've taken all of the

174
00:04:25,296 --> 0:04:26,626
performance optimizations on

175
00:04:26,626 --> 0:04:27,966
ourselves in the framework so

176
00:04:27,966 --> 0:04:28,756
you don't have to think about

177
00:04:28,756 --> 0:04:28,836
it.

178
00:04:28,836 --> 0:04:30,276
Compositional layout's all about

179
00:04:30,276 --> 0:04:31,996
describing or defining what you

180
00:04:31,996 --> 0:04:32,376
want to do.

181
00:04:32,376 --> 0:04:33,766
It's a declarative kind of API.

182
00:04:36,346 --> 0:04:37,376
All right, so composing --

183
00:04:37,376 --> 0:04:38,076
you're going to hear this word a

184
00:04:38,076 --> 0:04:39,016
lot in this conference.

185
00:04:39,016 --> 0:04:40,776
So how do we do that with this

186
00:04:40,776 --> 0:04:41,776
compositional layout idea?

187
00:04:41,776 --> 0:04:43,186
Well, it's all about taking

188
00:04:43,186 --> 0:04:44,636
small bits of layout, these

189
00:04:44,636 --> 0:04:46,336
little components, and stitching

190
00:04:46,336 --> 0:04:46,896
them all together.

191
00:04:47,196 --> 0:04:48,556
So you're composing larger

192
00:04:48,556 --> 0:04:49,796
layouts from smaller bits of

193
00:04:49,796 --> 0:04:50,126
layout.

194
00:04:50,516 --> 0:04:51,766
And we've learned from the great

195
00:04:51,766 --> 0:04:52,916
lessons of flow layout where we

196
00:04:52,916 --> 0:04:54,416
bring some of those line-based

197
00:04:54,416 --> 0:04:55,526
lessons where you can lay out

198
00:04:55,526 --> 0:04:56,836
along a line.

199
00:04:56,916 --> 0:04:57,956
We may now how many items there

200
00:04:57,956 --> 0:04:58,506
are, we may not.

201
00:04:58,506 --> 0:04:59,766
But we can lay out items on a

202
00:04:59,766 --> 0:05:00,706
line in these little layout

203
00:04:59,766 --> 0:05:00,706
line in these little layout

204
00:05:00,706 --> 0:05:01,126
groups.

205
00:05:02,626 --> 0:05:03,506
And finally, as the name

206
00:05:03,506 --> 0:05:05,656
implies, you don't subclass.

207
00:05:05,656 --> 0:05:06,496
You literally just create a

208
00:05:06,496 --> 0:05:08,096
thing and compose some elements

209
00:05:08,096 --> 0:05:09,476
and then -- and then you're good

210
00:05:09,476 --> 0:05:09,706
to go.

211
00:05:09,706 --> 0:05:10,346
All right.

212
00:05:10,416 --> 0:05:13,306
So that's a lot of talk for no

213
00:05:13,406 --> 0:05:13,676
code.

214
00:05:13,676 --> 0:05:14,686
And we're all about code at a

215
00:05:14,686 --> 0:05:15,696
conference like this, right?

216
00:05:15,696 --> 0:05:17,586
So let's go look at some code.

217
00:05:18,056 --> 0:05:19,306
All right.

218
00:05:20,176 --> 0:05:22,026
So this is a hello, world

219
00:05:22,376 --> 0:05:23,156
compositional layout.

220
00:05:23,206 --> 0:05:24,676
There's five lines of code.

221
00:05:24,676 --> 0:05:27,036
Now, I'm going to switch over to

222
00:05:27,036 --> 0:05:28,666
my device over here.

223
00:05:30,026 --> 0:05:30,376
All right.

224
00:05:30,426 --> 0:05:33,446
So here we see our example app.

225
00:05:33,446 --> 0:05:34,896
And I'm going to go to the list

226
00:05:35,026 --> 0:05:35,536
example.

227
00:05:35,886 --> 0:05:36,876
Wow, that's a boring layout.

228
00:05:36,876 --> 0:05:37,756
Okay, so this looks like a

229
00:05:37,786 --> 0:05:38,496
table, right?

230
00:05:39,296 --> 0:05:39,706
Here we go.

231
00:05:40,676 --> 0:05:41,436
Not much to that.

232
00:05:41,806 --> 0:05:43,146
All right.

233
00:05:43,146 --> 0:05:46,336
So let's focus strictly on the

234
00:05:46,336 --> 0:05:47,236
code for a second.

235
00:05:47,236 --> 0:05:47,976
Let's look at this.

236
00:05:48,886 --> 0:05:49,246
All right.

237
00:05:49,246 --> 0:05:50,846
So there's a couple observations

238
00:05:50,986 --> 0:05:52,206
that will jump out right away.

239
00:05:52,206 --> 0:05:53,426
And the first observation

240
00:05:53,426 --> 0:05:54,986
because I know developers is,

241
00:05:54,986 --> 0:05:55,896
like, "Hey, Steve, I can write

242
00:05:55,936 --> 0:05:57,576
this in two lines of code with

243
00:05:57,626 --> 0:05:57,956
flow.

244
00:05:57,996 --> 0:05:59,146
What is all this nonsense?"

245
00:05:59,856 --> 0:06:01,476
And it's absolutely true, you

246
00:05:59,856 --> 0:06:01,476
And it's absolutely true, you

247
00:06:01,476 --> 0:06:02,946
probably could do something like

248
00:06:02,946 --> 0:06:03,156
that.

249
00:06:03,156 --> 0:06:05,186
But what I want you to anchor in

250
00:06:05,186 --> 0:06:05,996
your mind and think about

251
00:06:05,996 --> 0:06:07,416
throughout the presentation is

252
00:06:07,416 --> 0:06:08,996
that the amount of code as these

253
00:06:08,996 --> 0:06:10,096
layouts get more and more

254
00:06:10,096 --> 0:06:12,766
complex does not grow linear to

255
00:06:12,766 --> 0:06:14,126
the problem size, it just kind

256
00:06:14,126 --> 0:06:14,686
of tapers off.

257
00:06:14,686 --> 0:06:15,286
Because we're just going to

258
00:06:15,286 --> 0:06:16,806
compose in new things to the

259
00:06:16,806 --> 0:06:18,436
layout in very simple,

260
00:06:18,676 --> 0:06:20,526
easy-to-reason about ways to get

261
00:06:20,526 --> 0:06:21,966
very complex layouts.

262
00:06:22,626 --> 0:06:23,536
I'm super excited to show you

263
00:06:23,536 --> 0:06:23,876
this stuff.

264
00:06:24,636 --> 0:06:26,316
The second observation is I want

265
00:06:26,466 --> 0:06:27,406
you to look at the -- there's a

266
00:06:27,406 --> 0:06:28,606
natural progression here of

267
00:06:28,606 --> 0:06:29,746
these types, right?

268
00:06:29,746 --> 0:06:30,686
We got, like, you know, five

269
00:06:30,686 --> 0:06:31,076
types here.

270
00:06:31,076 --> 0:06:32,226
It's kind of -- what's up here?

271
00:06:33,246 --> 0:06:34,926
And the types I want to focus on

272
00:06:35,136 --> 0:06:36,666
first are these four types, and

273
00:06:36,666 --> 0:06:38,216
they have this natural

274
00:06:38,216 --> 0:06:39,776
abstraction where they climb

275
00:06:39,776 --> 0:06:40,306
this ladder.

276
00:06:40,536 --> 0:06:42,596
And we start with an item which

277
00:06:42,596 --> 0:06:43,716
gets folded into a group.

278
00:06:43,716 --> 0:06:45,366
And the group goes into a

279
00:06:45,366 --> 0:06:45,916
section.

280
00:06:46,366 --> 0:06:48,156
And the section goes in our

281
00:06:48,156 --> 0:06:48,606
layout.

282
00:06:49,856 --> 0:06:51,326
Now, let's look at this

283
00:06:51,326 --> 0:06:51,756
visually.

284
00:06:53,386 --> 0:06:53,596
All right.

285
00:06:53,596 --> 0:06:57,556
So here, this big rectangle is

286
00:06:57,556 --> 0:06:58,016
the layout.

287
00:06:58,016 --> 0:07:01,256
And the layout is your entire

288
00:06:58,016 --> 0:07:01,256
And the layout is your entire

289
00:07:01,256 --> 0:07:01,716
layout.

290
00:07:02,426 --> 0:07:03,676
And now we have these blinding

291
00:07:03,676 --> 0:07:05,206
white guys that represent our

292
00:07:05,426 --> 0:07:06,456
sections, right?

293
00:07:06,806 --> 0:07:08,256
And this maps directly onto the

294
00:07:08,256 --> 0:07:09,966
data sources, you know, content

295
00:07:09,966 --> 0:07:10,726
for those sections.

296
00:07:11,606 --> 0:07:12,316
And then we're going to

297
00:07:12,316 --> 0:07:14,126
represent a kind of a grid-style

298
00:07:14,126 --> 0:07:15,026
traditional layout in this

299
00:07:15,026 --> 0:07:15,766
particular example.

300
00:07:15,766 --> 0:07:17,666
We see these groups which

301
00:07:17,666 --> 0:07:19,026
represent our rows.

302
00:07:19,886 --> 0:07:20,406
All right.

303
00:07:20,486 --> 0:07:22,016
So inside that we have items.

304
00:07:22,906 --> 0:07:24,086
So this is basically just

305
00:07:24,086 --> 0:07:25,136
showing off this hierarchy we're

306
00:07:25,136 --> 0:07:26,296
going to see all throughout the

307
00:07:26,326 --> 0:07:27,706
talk, this repeating pattern of

308
00:07:27,806 --> 0:07:31,106
item, group, section, layout.

309
00:07:33,076 --> 0:07:34,256
Okay. So now I want to do a

310
00:07:34,256 --> 0:07:35,296
little bit of talking about some

311
00:07:35,296 --> 0:07:36,486
of the concepts, these core

312
00:07:36,486 --> 0:07:38,526
types in compositional layout.

313
00:07:38,636 --> 0:07:40,046
And once we get through all

314
00:07:40,046 --> 0:07:41,006
this, we can jump over to the

315
00:07:41,006 --> 0:07:42,486
demos to see how it all fits.

316
00:07:42,526 --> 0:07:45,266
So I want to start with talking

317
00:07:45,266 --> 0:07:46,316
about sizing.

318
00:07:47,236 --> 0:07:48,306
So compositional layout has

319
00:07:48,306 --> 0:07:49,906
extended sizing to make it

320
00:07:49,906 --> 0:07:51,226
really easy to reason about how

321
00:07:51,226 --> 0:07:52,876
you size things inside of a

322
00:07:52,876 --> 0:07:53,866
compositional layout.

323
00:07:54,566 --> 0:07:56,226
And everything has an explicit

324
00:07:56,226 --> 0:07:57,766
size, has a strong opinion about

325
00:07:57,766 --> 0:07:58,696
how big it is.

326
00:08:00,076 --> 0:08:01,836
Now, we're in this Euclidian 2D

327
00:08:01,836 --> 0:08:03,266
geometry plane, all right, with

328
00:08:03,336 --> 0:08:03,856
flexion view.

329
00:08:03,856 --> 0:08:05,916
And as such, a size really is

330
00:08:05,916 --> 0:08:06,756
just two properties.

331
00:08:06,756 --> 0:08:08,076
It's a width and a height

332
00:08:08,176 --> 0:08:08,646
dimension.

333
00:08:09,466 --> 0:08:11,756
And here we can see we've got a

334
00:08:11,756 --> 0:08:12,866
stripped-down version of that

335
00:08:12,896 --> 0:08:13,696
type definition.

336
00:08:13,696 --> 0:08:15,226
And it has a width and a height

337
00:08:15,226 --> 0:08:15,646
dimension.

338
00:08:15,646 --> 0:08:16,686
But notice that the width and

339
00:08:16,686 --> 0:08:17,396
the height dimensions, they're

340
00:08:17,396 --> 0:08:18,366
not -- they're not scalar

341
00:08:18,366 --> 0:08:18,676
values.

342
00:08:18,676 --> 0:08:19,506
It's not just a float or

343
00:08:19,506 --> 0:08:20,846
something, it's actually another

344
00:08:20,896 --> 0:08:22,116
type, this

345
00:08:22,166 --> 0:08:24,046
NSCollectionLayoutDimension.

346
00:08:25,136 --> 0:08:25,506
All right.

347
00:08:25,506 --> 0:08:26,156
So what's that?

348
00:08:26,956 --> 0:08:27,756
It's really simple.

349
00:08:27,896 --> 0:08:29,896
This is an axis-independent way

350
00:08:29,896 --> 0:08:31,346
to describe how big a particular

351
00:08:31,346 --> 0:08:31,966
axis is.

352
00:08:31,966 --> 0:08:32,876
And we have four different

353
00:08:32,876 --> 0:08:34,796
variations of how to define this

354
00:08:34,856 --> 0:08:35,015
thing.

355
00:08:35,775 --> 0:08:36,885
And let's walk through these in

356
00:08:36,885 --> 0:08:38,586
a kind of a visual way.

357
00:08:39,716 --> 0:08:41,395
So let's say you have an item

358
00:08:41,395 --> 0:08:42,296
and you want to describe its

359
00:08:42,296 --> 0:08:44,166
size relative to its container.

360
00:08:44,926 --> 0:08:45,906
So the outer-most container will

361
00:08:45,906 --> 0:08:46,676
be your CollectionView.

362
00:08:47,256 --> 0:08:48,376
Here we would just say, hey,

363
00:08:48,376 --> 0:08:49,976
this item's widthDimension is

364
00:08:49,976 --> 0:08:51,176
going to be a fractional width

365
00:08:51,176 --> 0:08:52,696
or 50% of the width of its

366
00:08:52,856 --> 0:08:53,246
container.

367
00:08:54,656 --> 0:08:56,846
And similarly, we can say the

368
00:08:56,846 --> 0:08:58,056
height of something is a

369
00:08:58,056 --> 0:08:59,566
fractional height of its

370
00:08:59,566 --> 0:09:01,566
container, in this case 30%.

371
00:08:59,566 --> 0:09:01,566
container, in this case 30%.

372
00:09:03,496 --> 0:09:05,266
Now, because you can specify

373
00:09:05,266 --> 0:09:07,656
things in this axis-independent

374
00:09:07,656 --> 0:09:09,616
way, we can define something as

375
00:09:09,616 --> 0:09:11,486
having a specific aspect ratio,

376
00:09:11,486 --> 0:09:12,816
in this case an aspect ratio of

377
00:09:12,816 --> 0:09:15,516
1, by defining both the width

378
00:09:15,666 --> 0:09:18,166
and the height as a dimension, a

379
00:09:18,166 --> 0:09:19,506
fraction of the width of its

380
00:09:19,506 --> 0:09:19,876
container.

381
00:09:20,526 --> 0:09:22,186
And we say it's 25% as its

382
00:09:22,186 --> 0:09:23,496
container, and the height

383
00:09:23,676 --> 0:09:24,326
mirrors this.

384
00:09:25,906 --> 0:09:26,656
Okay. So those are the

385
00:09:26,876 --> 0:09:28,186
fractional variants creating a

386
00:09:28,186 --> 0:09:28,716
dimension.

387
00:09:29,626 --> 0:09:31,006
What about point-based values?

388
00:09:31,736 --> 0:09:32,636
Well, we have two.

389
00:09:33,256 --> 0:09:34,256
First one is the simplest,

390
00:09:34,346 --> 0:09:34,876
absolute.

391
00:09:35,536 --> 0:09:36,296
You know you need this thing to

392
00:09:36,296 --> 0:09:37,246
be 200 points because your

393
00:09:37,246 --> 0:09:39,576
designer's emphatic it's got to

394
00:09:39,576 --> 0:09:40,256
be 200 points.

395
00:09:40,256 --> 0:09:42,076
That's what it is, right?

396
00:09:42,076 --> 0:09:42,796
Here we go, we've got an

397
00:09:42,986 --> 0:09:44,336
interesting concept, estimated.

398
00:09:45,376 --> 0:09:47,246
So if you don't know exactly how

399
00:09:47,246 --> 0:09:48,166
big an item is going to be --

400
00:09:48,166 --> 0:09:49,606
and we're going to talk about

401
00:09:49,736 --> 0:09:50,916
this a lot -- you can estimate

402
00:09:50,916 --> 0:09:51,056
it.

403
00:09:51,056 --> 0:09:52,206
Say it's 200 points.

404
00:09:52,566 --> 0:09:55,226
And then over time, it grows as

405
00:09:55,226 --> 0:09:56,456
the item renders and we know a

406
00:09:56,456 --> 0:09:57,566
little bit more about the

407
00:09:57,566 --> 0:09:59,436
content in that item.

408
00:10:00,506 --> 0:10:00,826
All right.

409
00:10:00,826 --> 0:10:02,986
So that's layout dimension and

410
00:10:03,176 --> 0:10:03,996
size.

411
00:10:05,146 --> 0:10:06,196
Next up let's talk a little bit

412
00:10:06,196 --> 0:10:06,666
about item.

413
00:10:06,666 --> 0:10:07,656
This is very simple.

414
00:10:07,656 --> 0:10:08,746
This is a cell or it's a

415
00:10:08,746 --> 0:10:09,406
supplementary.

416
00:10:09,406 --> 0:10:10,676
It's a thing that renders on

417
00:10:10,676 --> 0:10:11,116
screen.

418
00:10:12,296 --> 0:10:13,506
And there's more stuff here

419
00:10:13,506 --> 0:10:14,886
you'll see in the STK, but it's

420
00:10:14,886 --> 0:10:16,866
a taste of that type definition.

421
00:10:17,586 --> 0:10:18,516
We see that when we construct

422
00:10:18,516 --> 0:10:20,256
one of these things, we give it

423
00:10:20,256 --> 0:10:20,756
a size.

424
00:10:20,996 --> 0:10:22,066
Everything's got an opinion

425
00:10:22,066 --> 0:10:22,566
about size.

426
00:10:23,236 --> 0:10:25,066
All right.

427
00:10:25,066 --> 0:10:25,866
So we're going to continue up

428
00:10:25,916 --> 0:10:27,146
that abstraction hierarchy.

429
00:10:27,146 --> 0:10:28,176
We got item, and now we're in

430
00:10:28,176 --> 0:10:28,536
group.

431
00:10:28,856 --> 0:10:29,536
And what's a group?

432
00:10:29,536 --> 0:10:30,726
A group is -- it's the

433
00:10:30,726 --> 0:10:31,366
workhorse.

434
00:10:31,366 --> 0:10:33,206
This is your basic unit of

435
00:10:33,206 --> 0:10:34,156
layout that you're going to

436
00:10:34,156 --> 0:10:34,756
compose together.

437
00:10:34,756 --> 0:10:37,286
We have three forms: We have

438
00:10:37,426 --> 0:10:38,506
horizontal, vertical.

439
00:10:39,136 --> 0:10:39,976
You can think of these as, like,

440
00:10:39,976 --> 0:10:41,226
little mini flow layouts, right?

441
00:10:41,226 --> 0:10:42,696
They lay out on a line on the

442
00:10:42,696 --> 0:10:44,116
horizontal axis and vertical

443
00:10:44,116 --> 0:10:44,496
axis.

444
00:10:45,426 --> 0:10:46,806
But then remember we talked

445
00:10:46,806 --> 0:10:48,556
about before that it's flexible.

446
00:10:48,696 --> 0:10:50,426
Well, if you have something that

447
00:10:50,426 --> 0:10:51,446
doesn't lay along a the line and

448
00:10:51,446 --> 0:10:52,246
there's a lot of layouts that

449
00:10:52,246 --> 0:10:52,826
don't do that.

450
00:10:53,176 --> 0:10:54,316
We have a custom group.

451
00:10:55,096 --> 0:10:56,166
So what is this?

452
00:10:57,286 --> 0:10:58,726
That allows you to specify the

453
00:10:58,726 --> 0:11:00,876
absolute size and position of

454
00:10:58,726 --> 0:11:00,876
absolute size and position of

455
00:11:00,876 --> 0:11:02,446
items in a custom way.

456
00:11:02,446 --> 0:11:03,436
So if you have something where

457
00:11:03,436 --> 0:11:04,896
you have a pre-defined generator

458
00:11:04,896 --> 0:11:05,906
that generates layouts, you can

459
00:11:05,906 --> 0:11:06,726
use a custom group.

460
00:11:07,286 --> 0:11:08,166
Or if you're doing a radial

461
00:11:08,166 --> 0:11:09,096
layout and you want to compute

462
00:11:09,096 --> 0:11:10,286
that, you can do it with a

463
00:11:10,286 --> 0:11:10,926
custom group.

464
00:11:11,526 --> 0:11:12,896
And what's cool is you can

465
00:11:12,896 --> 0:11:14,066
compose custom groups right

466
00:11:14,066 --> 0:11:15,276
alongside vertical and

467
00:11:15,276 --> 0:11:15,786
horizontal.

468
00:11:15,786 --> 0:11:17,596
So we build up the complex from

469
00:11:17,596 --> 0:11:18,016
the simple.

470
00:11:19,696 --> 0:11:20,086
All right.

471
00:11:20,086 --> 0:11:22,156
So that's group, the workhorse.

472
00:11:23,486 --> 0:11:24,446
Next up we have

473
00:11:24,666 --> 0:11:26,276
NSCollectionLayoutSection.

474
00:11:27,166 --> 0:11:28,666
This is just as the name

475
00:11:28,666 --> 0:11:29,806
implies, this is the layout

476
00:11:29,886 --> 0:11:31,586
definition on a per-section

477
00:11:31,586 --> 0:11:32,936
basis of the CollectionView,

478
00:11:33,066 --> 0:11:34,196
maps directly onto the data

479
00:11:34,196 --> 0:11:35,866
source notion of how many items

480
00:11:36,596 --> 0:11:37,406
are in that section.

481
00:11:37,406 --> 0:11:38,886
And we can see, as promised,

482
00:11:39,466 --> 0:11:40,556
that when the initializer here

483
00:11:40,556 --> 0:11:42,146
takes in allow group.

484
00:11:42,676 --> 0:11:44,156
So we've gone from item, group,

485
00:11:44,686 --> 0:11:45,106
section.

486
00:11:45,916 --> 0:11:47,076
All right.

487
00:11:47,076 --> 0:11:49,076
Our final stop on this traversal

488
00:11:49,076 --> 0:11:51,686
of stuff, these are the two

489
00:11:51,686 --> 0:11:53,486
top-level layout classes, right?

490
00:11:53,566 --> 0:11:56,786
So for iOS and tvOS, we had UI

491
00:11:56,786 --> 0:11:57,436
CollectionView

492
00:11:57,436 --> 0:11:58,296
CompositionalLayout.

493
00:11:59,016 --> 0:12:00,856
And on the Mac we have

494
00:11:59,016 --> 0:12:00,856
And on the Mac we have

495
00:12:01,356 --> 0:12:02,646
NSViewCompositionalLayout.

496
00:12:03,806 --> 0:12:05,026
Now, what's interesting here is

497
00:12:05,116 --> 0:12:06,556
the definitions for all these

498
00:12:06,556 --> 0:12:08,366
things are the same, regardless

499
00:12:08,396 --> 0:12:08,896
of platform.

500
00:12:09,586 --> 0:12:10,236
There's just some minor

501
00:12:10,236 --> 0:12:11,316
differences in the top-level

502
00:12:11,846 --> 0:12:12,896
classes.

503
00:12:13,516 --> 0:12:13,766
All right.

504
00:12:13,766 --> 0:12:15,046
And the final thing to note

505
00:12:15,046 --> 0:12:15,866
here, and this is actually

506
00:12:15,866 --> 0:12:16,546
really interesting, which we'll

507
00:12:16,546 --> 0:12:17,296
see a little bit more in the

508
00:12:17,296 --> 0:12:19,986
demos, is the way you construct

509
00:12:19,986 --> 0:12:20,956
a compositional layout.

510
00:12:21,126 --> 0:12:22,056
There's two ways.

511
00:12:22,556 --> 0:12:24,486
And the simplest way is just

512
00:12:24,486 --> 0:12:25,696
specify a layout section's

513
00:12:25,696 --> 0:12:26,206
definition.

514
00:12:26,416 --> 0:12:27,776
So this is very similar to what

515
00:12:27,776 --> 0:12:29,296
we do with flow today, right?

516
00:12:29,296 --> 0:12:30,696
Because flow weighs out every

517
00:12:30,696 --> 0:12:31,526
section like every other

518
00:12:31,526 --> 0:12:31,926
section.

519
00:12:31,926 --> 0:12:33,206
It's homogeneous in that way.

520
00:12:34,396 --> 0:12:36,206
The compositional layout extends

521
00:12:36,256 --> 0:12:36,946
this idea.

522
00:12:37,526 --> 0:12:38,646
Because now we have this great

523
00:12:38,646 --> 0:12:39,856
definition for what a section

524
00:12:39,856 --> 0:12:42,976
is, you can specify a closure

525
00:12:43,236 --> 0:12:44,856
that will be called back and

526
00:12:44,856 --> 0:12:46,586
will ask for those definitions

527
00:12:46,586 --> 0:12:47,436
for the sections on a

528
00:12:47,516 --> 0:12:48,876
per-section basis.

529
00:12:49,236 --> 0:12:51,126
Now, this opens up a lot of

530
00:12:51,126 --> 0:12:52,306
possibilities because now your

531
00:12:52,736 --> 0:12:53,846
layouts can be completely

532
00:12:53,846 --> 0:12:55,876
distinct between sections.

533
00:12:55,976 --> 0:12:57,886
And we have a lot to show you in

534
00:12:57,886 --> 0:12:59,276
the demos of this later on.

535
00:12:59,276 --> 0:13:02,016
And hey, later on is right now.

536
00:12:59,276 --> 0:13:02,016
And hey, later on is right now.

537
00:13:02,176 --> 0:13:03,926
So enough nattling on about

538
00:13:04,006 --> 0:13:04,896
types, we're going to go see

539
00:13:04,896 --> 0:13:05,626
this in action.

540
00:13:05,626 --> 0:13:06,536
And to do that, I'm going to

541
00:13:06,536 --> 0:13:08,346
bring up my colleague, Troy

542
00:13:08,346 --> 0:13:08,896
Stephens.

543
00:13:08,896 --> 0:13:09,116
Troy?

544
00:13:10,321 --> 0:13:12,321
[ Applause ]

545
00:13:12,626 --> 0:13:13,146
&gt;&gt; Troy Stephens: Thank you,

546
00:13:13,146 --> 0:13:13,266
Steve.

547
00:13:14,776 --> 0:13:16,046
As promised, we're going to look

548
00:13:16,046 --> 0:13:16,676
at some code.

549
00:13:16,676 --> 0:13:17,816
We're going to dig right into

550
00:13:17,816 --> 0:13:19,716
the practical mechanics of how

551
00:13:19,716 --> 0:13:21,416
you can build just about any

552
00:13:21,516 --> 0:13:22,886
kind of layout you can dream up

553
00:13:23,046 --> 0:13:24,366
from these simple elements that

554
00:13:24,366 --> 0:13:25,406
Steve just described.

555
00:13:25,956 --> 0:13:27,016
So make sure to download the

556
00:13:27,016 --> 0:13:28,596
sample project for this talk if

557
00:13:28,596 --> 0:13:29,496
you haven't already.

558
00:13:29,986 --> 0:13:31,306
That way you can follow along,

559
00:13:31,486 --> 0:13:33,156
study it at your leisure, and

560
00:13:33,156 --> 0:13:35,506
most importantly, use our code

561
00:13:35,506 --> 0:13:37,246
freely in your own projects.

562
00:13:37,756 --> 0:13:38,736
Whatever kind of layout you

563
00:13:38,736 --> 0:13:39,656
might be thinking about

564
00:13:39,656 --> 0:13:41,236
implementing, there's likely to

565
00:13:41,236 --> 0:13:42,356
be an example we're going to

566
00:13:42,356 --> 0:13:43,746
look at today that is similar.

567
00:13:44,376 --> 0:13:45,916
By taking our code as a basis

568
00:13:45,916 --> 0:13:46,806
for yours, you're going to be

569
00:13:46,806 --> 0:13:48,266
that much closer to your goal

570
00:13:48,266 --> 0:13:49,056
that much more quickly.

571
00:13:49,096 --> 0:13:50,706
We're going to see that it's

572
00:13:50,796 --> 0:13:52,696
really easy to take any existing

573
00:13:52,696 --> 0:13:54,226
compositional layout description

574
00:13:54,566 --> 0:13:56,246
and incrementally refine it to

575
00:13:56,246 --> 0:13:57,666
be exactly what you want.

576
00:13:59,026 --> 0:13:59,996
Now, as we walk through our

577
00:13:59,996 --> 0:14:01,566
examples today, I want to you

578
00:13:59,996 --> 0:14:01,566
examples today, I want to you

579
00:14:01,566 --> 0:14:03,726
notice the same basic pattern at

580
00:14:03,726 --> 0:14:04,806
work in each of them.

581
00:14:05,076 --> 0:14:06,306
This is the pattern that Steve

582
00:14:06,306 --> 0:14:07,236
introduced us to.

583
00:14:07,916 --> 0:14:09,466
Every single compositional

584
00:14:09,466 --> 0:14:11,346
layout description is composed

585
00:14:11,346 --> 0:14:13,846
of the same four basic parts:

586
00:14:13,976 --> 0:14:15,896
Item, group, and section

587
00:14:15,896 --> 0:14:17,596
descriptions wrapped in the

588
00:14:17,596 --> 0:14:19,146
overall containing layout.

589
00:14:19,496 --> 0:14:20,936
So in each of the code examples

590
00:14:20,936 --> 0:14:21,606
we're going to look at, we're

591
00:14:21,606 --> 0:14:22,836
going to see that same

592
00:14:22,836 --> 0:14:24,346
four-layer nested structure.

593
00:14:24,726 --> 0:14:26,036
And in the more advanced topics,

594
00:14:26,036 --> 0:14:27,056
we're going to see how you can

595
00:14:27,056 --> 0:14:28,776
actually nest groups inside of

596
00:14:28,776 --> 0:14:30,166
other groups in order to

597
00:14:30,206 --> 0:14:32,476
construct or compose more

598
00:14:32,506 --> 0:14:34,306
complex, sophisticated layouts

599
00:14:34,476 --> 0:14:35,956
out of simple, easy to

600
00:14:35,956 --> 0:14:37,026
understand parts.

601
00:14:37,676 --> 0:14:38,686
So let's get to the code.

602
00:14:45,066 --> 0:14:46,286
And here we have -- we're going

603
00:14:46,286 --> 0:14:47,876
to start with our list example,

604
00:14:48,456 --> 0:14:49,266
which is the one that Steve

605
00:14:49,266 --> 0:14:49,646
showed us.

606
00:14:49,646 --> 0:14:51,426
So here's -- this is about the

607
00:14:51,426 --> 0:14:53,696
simplest kind of useful layout

608
00:14:53,696 --> 0:14:54,396
we can imagine.

609
00:14:54,576 --> 0:14:56,456
It's a single-column list where

610
00:14:56,456 --> 0:14:58,226
the items span the width of our

611
00:14:58,226 --> 0:14:58,956
CollectionView.

612
00:14:59,656 --> 0:15:02,316
And if I rotate the phone, we

613
00:14:59,656 --> 0:15:02,316
And if I rotate the phone, we

614
00:15:02,316 --> 0:15:03,646
can see that indeed the items

615
00:15:03,646 --> 0:15:05,206
expand to fill the available

616
00:15:05,206 --> 0:15:06,836
width while maintaining the same

617
00:15:06,836 --> 0:15:07,966
constant height.

618
00:15:08,376 --> 0:15:09,656
So how do we implement this

619
00:15:09,726 --> 0:15:11,016
using compositional layout?

620
00:15:11,566 --> 0:15:12,956
I've got our list view

621
00:15:12,956 --> 0:15:14,946
controller source file open

622
00:15:14,946 --> 0:15:15,836
here, which is the one where

623
00:15:15,836 --> 0:15:16,656
there is implemented.

624
00:15:16,686 --> 0:15:17,856
And in each of our examples

625
00:15:17,856 --> 0:15:19,476
today, we've just gone ahead and

626
00:15:19,476 --> 0:15:20,986
declared a create layout

627
00:15:20,986 --> 0:15:22,346
function that neatly

628
00:15:22,346 --> 0:15:23,936
encapsulates our description of

629
00:15:23,936 --> 0:15:25,686
our compositional layout that we

630
00:15:25,686 --> 0:15:27,456
then return back out to be

631
00:15:27,456 --> 0:15:28,676
hooked up to our CollectionView

632
00:15:28,676 --> 0:15:29,626
just like any other

633
00:15:29,746 --> 0:15:30,906
CollectionView layout would be.

634
00:15:31,836 --> 0:15:33,056
So first thing to notice here,

635
00:15:33,606 --> 0:15:35,606
we start, as I promised, by

636
00:15:35,606 --> 0:15:37,146
describing an item and itself

637
00:15:37,146 --> 0:15:37,656
size.

638
00:15:38,536 --> 0:15:39,906
We take that item description

639
00:15:40,396 --> 0:15:42,036
and we use it to describe a

640
00:15:42,036 --> 0:15:44,626
group of items.

641
00:15:45,156 --> 0:15:46,316
Next, we wrap that group in a

642
00:15:46,316 --> 0:15:46,906
section.

643
00:15:47,636 --> 0:15:49,196
And finally, we create and

644
00:15:49,196 --> 0:15:51,106
return our compositional layout.

645
00:15:51,856 --> 0:15:53,016
So there's that item, group,

646
00:15:53,016 --> 0:15:54,256
section layout structure.

647
00:15:54,596 --> 0:15:55,406
The other thing I want you to

648
00:15:55,446 --> 0:15:56,676
pay attention to here and we

649
00:15:56,676 --> 0:15:57,746
should really understand before

650
00:15:57,746 --> 0:15:59,056
we move on to the other examples

651
00:15:59,356 --> 0:16:01,056
is the way that the items are

652
00:15:59,356 --> 0:16:01,056
is the way that the items are

653
00:16:01,056 --> 0:16:01,996
given their size.

654
00:16:02,766 --> 0:16:04,336
In this case it is the group

655
00:16:04,336 --> 0:16:06,666
size that ultimately ends up

656
00:16:07,306 --> 0:16:08,466
determining the item size.

657
00:16:08,466 --> 0:16:09,446
And I'm going to explain how

658
00:16:09,446 --> 0:16:10,066
that works.

659
00:16:10,506 --> 0:16:12,296
So groups might seem a little

660
00:16:12,296 --> 0:16:13,846
superfluous in this simple list

661
00:16:13,846 --> 0:16:14,396
example.

662
00:16:14,646 --> 0:16:15,896
A group in a compositional

663
00:16:15,896 --> 0:16:17,766
layout typically represents some

664
00:16:17,766 --> 0:16:19,076
repeating structure that you're

665
00:16:19,076 --> 0:16:20,686
going to have, a column of items

666
00:16:20,966 --> 0:16:21,926
or a row of items.

667
00:16:22,196 --> 0:16:23,656
In this case it's a row, but we

668
00:16:23,656 --> 0:16:24,726
really have kind of a trivial

669
00:16:24,726 --> 0:16:26,236
case where we only have one item

670
00:16:26,236 --> 0:16:26,716
per row.

671
00:16:27,166 --> 0:16:29,296
So each item is going to get its

672
00:16:29,296 --> 0:16:29,896
own group.

673
00:16:30,266 --> 0:16:31,576
But groups are always there as a

674
00:16:31,576 --> 0:16:32,906
consistent part of the

675
00:16:32,906 --> 0:16:33,706
compositional layout

676
00:16:33,706 --> 0:16:34,626
description, and we're going to

677
00:16:34,626 --> 0:16:36,256
use them to our benefit to help

678
00:16:36,256 --> 0:16:37,326
define the item sizes.

679
00:16:38,046 --> 0:16:40,076
So Steve explained all about

680
00:16:40,076 --> 0:16:41,466
container-relevant sizing.

681
00:16:42,676 --> 0:16:43,926
Let's look first at our group

682
00:16:43,926 --> 0:16:44,866
size description.

683
00:16:45,856 --> 0:16:48,206
We've asked here for our group,

684
00:16:48,206 --> 0:16:49,836
which is our row in this case,

685
00:16:50,156 --> 0:16:52,326
to span 100% the width of its

686
00:16:52,326 --> 0:16:52,946
container.

687
00:16:53,256 --> 0:16:54,726
The group's container is its

688
00:16:54,726 --> 0:16:56,406
section, which in turn spans the

689
00:16:56,406 --> 0:16:57,656
layout or the CollectionView.

690
00:16:59,586 --> 0:17:01,036
Meanwhile, we've asked for each

691
00:16:59,586 --> 0:17:01,036
Meanwhile, we've asked for each

692
00:17:01,116 --> 0:17:03,116
group's height to be an absolute

693
00:17:03,116 --> 0:17:05,215
value of 44 points tall.

694
00:17:06,336 --> 0:17:07,185
Now, notice that this has

695
00:17:07,185 --> 0:17:09,076
basically already defined what

696
00:17:09,076 --> 0:17:10,376
our item box should be -- that's

697
00:17:10,376 --> 0:17:11,656
how we want our item sized, the

698
00:17:11,656 --> 0:17:12,626
width of the CollectionView and

699
00:17:12,626 --> 0:17:13,646
44 points high.

700
00:17:14,215 --> 0:17:15,326
So all we need to do up here

701
00:17:15,326 --> 0:17:17,346
where we specify our item size

702
00:17:17,896 --> 0:17:18,986
is to say that we'd like each

703
00:17:18,986 --> 0:17:21,396
item to be 100% the width and

704
00:17:21,396 --> 0:17:22,756
100% the height of its

705
00:17:22,756 --> 0:17:24,816
container, the item's container

706
00:17:25,076 --> 0:17:25,896
being the group.

707
00:17:26,695 --> 0:17:28,056
So that's all it takes to

708
00:17:28,056 --> 0:17:29,076
implement a list.

709
00:17:29,076 --> 0:17:30,166
But the interesting thing as we

710
00:17:30,166 --> 0:17:31,186
go along, we're going to see

711
00:17:31,186 --> 0:17:32,316
that we don't have to make a lot

712
00:17:32,316 --> 0:17:33,436
of code changes to get some

713
00:17:33,436 --> 0:17:34,536
pretty dramatically different

714
00:17:34,536 --> 0:17:35,106
layouts.

715
00:17:35,996 --> 0:17:37,006
Let's take a look at another

716
00:17:37,006 --> 0:17:40,016
example, that being I'm going to

717
00:17:40,016 --> 0:17:40,976
open up our grid here.

718
00:17:41,236 --> 0:17:43,196
And this is a five-column grid

719
00:17:43,196 --> 0:17:44,566
of edge to edge items.

720
00:17:46,036 --> 0:17:47,646
And we can see if I rotate the

721
00:17:47,646 --> 0:17:51,046
phone, that this layout is

722
00:17:51,046 --> 0:17:52,466
indeed described in such a way

723
00:17:52,466 --> 0:17:53,886
that we always get five columns

724
00:17:53,886 --> 0:17:54,376
across.

725
00:17:54,376 --> 0:17:56,496
The items always remain square,

726
00:17:56,496 --> 0:17:58,136
and they're always sized such

727
00:17:58,216 --> 0:18:00,136
that we get exactly five columns

728
00:17:58,216 --> 0:18:00,136
that we get exactly five columns

729
00:18:00,136 --> 0:18:00,506
wide.

730
00:18:03,426 --> 0:18:04,626
Now, this is an example where

731
00:18:04,626 --> 0:18:06,376
groups actually come in a bit

732
00:18:06,376 --> 0:18:07,646
more handy and it will be easier

733
00:18:07,646 --> 0:18:08,776
to understand what their

734
00:18:08,776 --> 0:18:09,496
function is.

735
00:18:10,326 --> 0:18:11,576
So opening up the grid view

736
00:18:11,576 --> 0:18:12,706
controller source file, looking

737
00:18:12,706 --> 0:18:13,806
at our same create layout

738
00:18:13,806 --> 0:18:16,056
function, again, we have that

739
00:18:16,106 --> 0:18:20,116
item, group, section layout

740
00:18:20,116 --> 0:18:20,676
structure.

741
00:18:21,496 --> 0:18:22,826
Basically looks like our list

742
00:18:22,826 --> 0:18:23,456
layout description.

743
00:18:23,456 --> 0:18:24,516
The only thing that's different

744
00:18:24,516 --> 0:18:26,466
here is the item and group sizes

745
00:18:26,466 --> 0:18:27,376
that we specified.

746
00:18:27,406 --> 0:18:28,416
So let's look at how those

747
00:18:28,416 --> 0:18:28,716
differ.

748
00:18:29,616 --> 0:18:31,876
We still want each group --

749
00:18:31,876 --> 0:18:33,216
since a group represents a row

750
00:18:33,216 --> 0:18:34,936
-- to span the entire width of

751
00:18:34,936 --> 0:18:35,786
the CollectionView.

752
00:18:35,936 --> 0:18:36,536
That's great.

753
00:18:37,446 --> 0:18:38,976
But now we don't want our items

754
00:18:38,976 --> 0:18:40,406
to be the same width of their

755
00:18:40,536 --> 0:18:41,546
group; we want to have five

756
00:18:41,546 --> 0:18:42,306
items across.

757
00:18:42,306 --> 0:18:43,406
And the way that we achieve that

758
00:18:43,406 --> 0:18:45,566
in this example is up here we

759
00:18:45,566 --> 0:18:48,396
specify the item's width to be

760
00:18:48,396 --> 0:18:50,146
20% of the width of itself

761
00:18:50,146 --> 0:18:50,636
container.

762
00:18:51,106 --> 0:18:52,216
The item's container is its

763
00:18:52,216 --> 0:18:53,916
group or row, so we're going to

764
00:18:53,916 --> 0:18:55,146
have -- we're going to be able

765
00:18:55,146 --> 0:18:57,076
to fit exactly five items across

766
00:18:57,076 --> 0:18:58,246
because of this width that we've

767
00:18:58,246 --> 0:18:58,946
specified.

768
00:18:59,906 --> 0:19:01,226
Now, as for the heights, instead

769
00:18:59,906 --> 0:19:01,226
Now, as for the heights, instead

770
00:19:01,226 --> 0:19:02,626
of an absolute point value,

771
00:19:03,606 --> 0:19:04,826
we've declared that we want the

772
00:19:04,976 --> 0:19:07,236
height of each group or row to

773
00:19:07,236 --> 0:19:10,096
be 20% of the width of the

774
00:19:10,096 --> 0:19:11,076
group's containers.

775
00:19:11,076 --> 0:19:12,236
And notice we're using this

776
00:19:12,746 --> 0:19:15,096
ability to specify fractional

777
00:19:15,096 --> 0:19:17,026
widths or heights across axes

778
00:19:17,026 --> 0:19:17,146
here.

779
00:19:17,146 --> 0:19:18,756
And this is really handy because

780
00:19:18,756 --> 0:19:20,116
it's how we make our items

781
00:19:20,116 --> 0:19:20,706
square.

782
00:19:21,076 --> 0:19:23,286
The item width and the group

783
00:19:23,666 --> 0:19:25,186
height are the same.

784
00:19:26,436 --> 0:19:27,506
And since the group's height

785
00:19:27,506 --> 0:19:28,756
sets the item's height, all we

786
00:19:28,756 --> 0:19:30,096
need to do is set our item

787
00:19:30,096 --> 0:19:32,446
height to be 100% of the group's

788
00:19:32,446 --> 0:19:32,616
height.

789
00:19:33,326 --> 0:19:35,886
So that's it, that's pretty

790
00:19:35,886 --> 0:19:37,306
simple for creating a grid.

791
00:19:37,306 --> 0:19:38,566
And we did so without really

792
00:19:38,566 --> 0:19:39,856
fundamentally different code

793
00:19:39,856 --> 0:19:41,456
than we used for implementing a

794
00:19:41,456 --> 0:19:41,856
list.

795
00:19:42,566 --> 0:19:43,726
Now, often if you get a layout

796
00:19:43,726 --> 0:19:44,626
from your designers, usually

797
00:19:44,626 --> 0:19:45,786
you'll want to have some space

798
00:19:45,786 --> 0:19:46,446
between items.

799
00:19:46,446 --> 0:19:47,766
So let's look at how to add that

800
00:19:47,766 --> 0:19:48,046
next.

801
00:19:48,936 --> 0:19:50,466
Bringing up the inset items grid

802
00:19:50,466 --> 0:19:52,136
example, we still have a

803
00:19:52,136 --> 0:19:54,086
five-column grid, but we just

804
00:19:54,086 --> 0:19:55,866
have some space now around and

805
00:19:55,866 --> 0:19:57,056
between the items.

806
00:19:59,416 --> 0:20:01,206
Let's open up our inset items

807
00:19:59,416 --> 0:20:01,206
Let's open up our inset items

808
00:20:01,206 --> 0:20:01,576
view,

809
00:20:02,376 --> 0:20:04,006
InsetItemsGridViewController to

810
00:20:04,006 --> 0:20:05,726
take a look at that.

811
00:20:06,246 --> 0:20:08,146
And here we have, if you compare

812
00:20:08,146 --> 0:20:09,296
this with the previous example,

813
00:20:09,296 --> 0:20:10,786
you'll see that there's only one

814
00:20:10,836 --> 0:20:12,516
line of code different here.

815
00:20:12,666 --> 0:20:15,006
And this is a useful observation

816
00:20:15,006 --> 0:20:16,016
because you can really think

817
00:20:16,016 --> 0:20:17,966
about this layout as being

818
00:20:17,966 --> 0:20:19,886
computed almost exactly like the

819
00:20:19,886 --> 0:20:21,616
previous edge-to-edge layout.

820
00:20:22,726 --> 0:20:25,016
Each item is allocated the same

821
00:20:25,016 --> 0:20:26,476
box that it was given before,

822
00:20:26,476 --> 0:20:28,256
the same edge-to-edge squares.

823
00:20:28,716 --> 0:20:30,046
But in this case we've decided

824
00:20:30,046 --> 0:20:32,406
that instead of sizing our items

825
00:20:32,406 --> 0:20:33,576
to take up the full square

826
00:20:33,576 --> 0:20:34,886
they're allocated, as a last

827
00:20:34,976 --> 0:20:37,156
step we're going to inset the

828
00:20:37,156 --> 0:20:39,466
item's content by five points on

829
00:20:39,466 --> 0:20:40,096
each side.

830
00:20:40,226 --> 0:20:41,706
So item content insets work

831
00:20:41,706 --> 0:20:42,686
usefully in this way.

832
00:20:42,686 --> 0:20:45,136
Sort of a last-stage subtraction

833
00:20:45,136 --> 0:20:46,376
from the layout that was already

834
00:20:46,376 --> 0:20:46,896
computed.

835
00:20:47,426 --> 0:20:48,066
So that's really cool.

836
00:20:48,066 --> 0:20:49,636
We've seen how to do lists and

837
00:20:49,636 --> 0:20:50,196
grids.

838
00:20:50,436 --> 0:20:51,896
And we've achieved our grids

839
00:20:52,216 --> 0:20:54,726
using relative item sizing.

840
00:20:55,096 --> 0:20:55,896
But there's another really

841
00:20:55,946 --> 0:20:58,306
powerful way to be able to

842
00:20:58,416 --> 0:21:00,086
grid-like layouts with rows and

843
00:20:58,416 --> 0:21:00,086
grid-like layouts with rows and

844
00:21:00,086 --> 0:21:00,596
columns.

845
00:21:01,636 --> 0:21:02,806
And I want to show you that so

846
00:21:02,806 --> 0:21:03,746
we can be familiar with it.

847
00:21:04,366 --> 0:21:05,126
So I'm going to pull up our

848
00:21:05,126 --> 0:21:06,636
two-column grid example here.

849
00:21:07,166 --> 0:21:09,956
And superficially this looks

850
00:21:09,956 --> 0:21:11,016
pretty much just like the

851
00:21:11,016 --> 0:21:12,216
five-column grid, we just have

852
00:21:12,256 --> 0:21:13,366
fewer columns, right?

853
00:21:13,366 --> 0:21:15,446
And indeed, if I rotate the

854
00:21:15,446 --> 0:21:17,056
device, it adapts: It's always

855
00:21:17,056 --> 0:21:18,936
two columns and the items expand

856
00:21:19,426 --> 0:21:20,606
to be the appropriate width.

857
00:21:21,696 --> 0:21:22,886
But this is implemented a bit

858
00:21:22,886 --> 0:21:24,426
differently and it's instructive

859
00:21:24,426 --> 0:21:25,376
to take a look at how.

860
00:21:25,926 --> 0:21:27,016
So in our

861
00:21:27,016 --> 0:21:28,876
TwoColumnViewController here,

862
00:21:29,206 --> 0:21:30,506
we're going to look at our

863
00:21:30,506 --> 0:21:31,556
createLayout function.

864
00:21:33,056 --> 0:21:34,546
And so the interesting things to

865
00:21:34,546 --> 0:21:36,146
notice here, again, we have that

866
00:21:36,146 --> 0:21:38,556
item, group, section layout

867
00:21:38,556 --> 0:21:39,096
structure.

868
00:21:39,096 --> 0:21:39,946
But the first thing to pay

869
00:21:39,946 --> 0:21:42,006
attention to that might not be

870
00:21:42,006 --> 0:21:43,776
immediately obvious is that we

871
00:21:43,776 --> 0:21:45,406
are constructing our horizontal

872
00:21:45,406 --> 0:21:47,246
group that represents each row

873
00:21:47,246 --> 0:21:48,436
in a slightly different way.

874
00:21:49,106 --> 0:21:50,516
We're using a different form of

875
00:21:50,516 --> 0:21:52,276
the initializer that takes an

876
00:21:52,276 --> 0:21:53,926
explicit count parameter.

877
00:21:54,236 --> 0:21:56,066
Here we're explicitly specifying

878
00:21:56,606 --> 0:21:58,676
that we want to have exactly two

879
00:21:58,676 --> 0:22:00,596
items per group, two items per

880
00:21:58,676 --> 0:22:00,596
items per group, two items per

881
00:22:00,636 --> 0:22:01,236
row.

882
00:22:01,816 --> 0:22:02,466
Now, this will cause

883
00:22:02,466 --> 0:22:03,576
compositional layout to

884
00:22:03,656 --> 0:22:05,356
automatically figure out what

885
00:22:05,356 --> 0:22:06,546
the item width has to be in

886
00:22:06,546 --> 0:22:07,446
order to make that happen.

887
00:22:08,406 --> 0:22:10,226
We do specify an item width here

888
00:22:10,226 --> 0:22:11,396
because we always have to.

889
00:22:11,616 --> 0:22:13,506
We say 100% of the container.

890
00:22:14,036 --> 0:22:15,366
But that value at the top ends

891
00:22:15,366 --> 0:22:16,376
up effectively getting

892
00:22:16,376 --> 0:22:17,006
overridden.

893
00:22:17,006 --> 0:22:18,106
When you ask for a certain

894
00:22:18,106 --> 0:22:19,586
number of items per group,

895
00:22:19,976 --> 0:22:21,336
compositional layout -- that

896
00:22:21,626 --> 0:22:22,616
compositional layout is going to

897
00:22:22,616 --> 0:22:24,026
take that as kind of an override

898
00:22:24,326 --> 0:22:25,136
and it's going to compute

899
00:22:25,136 --> 0:22:26,246
whatever width is actually

900
00:22:26,246 --> 0:22:27,686
necessary to fulfill our

901
00:22:27,686 --> 0:22:28,316
request.

902
00:22:28,476 --> 0:22:29,936
We're also using a different way

903
00:22:29,936 --> 0:22:31,216
of putting space around and

904
00:22:31,216 --> 0:22:32,286
between the items.

905
00:22:32,286 --> 0:22:33,446
Compositional layout offers a

906
00:22:33,446 --> 0:22:34,906
variety of ways to do this,

907
00:22:34,906 --> 0:22:36,156
which makes it a really flexible

908
00:22:36,156 --> 0:22:36,486
API.

909
00:22:37,706 --> 0:22:39,666
Instead of specifying itemInsets

910
00:22:39,666 --> 0:22:42,216
in this case, we're specifying

911
00:22:42,826 --> 0:22:44,446
contentInsets on the section.

912
00:22:45,066 --> 0:22:46,306
So here we want to have a little

913
00:22:46,306 --> 0:22:47,456
margin on the left and right

914
00:22:47,456 --> 0:22:47,616
side.

915
00:22:47,616 --> 0:22:48,956
And we only have one section, so

916
00:22:48,956 --> 0:22:50,196
this basically applies to our

917
00:22:50,196 --> 0:22:50,856
whole layout.

918
00:22:51,336 --> 0:22:53,236
So we're asking for 10 points of

919
00:22:53,236 --> 0:22:54,826
leading and 10 points of

920
00:22:54,826 --> 0:22:55,776
trailing space.

921
00:22:56,846 --> 0:22:58,266
Notice while we're on this line

922
00:22:58,266 --> 0:22:59,806
of code that compositional

923
00:22:59,806 --> 0:23:00,836
layout is structured to

924
00:22:59,806 --> 0:23:00,836
layout is structured to

925
00:23:00,836 --> 0:23:02,626
encourage you to express your

926
00:23:02,626 --> 0:23:04,166
layouts in layout

927
00:23:04,196 --> 0:23:05,556
direction-agnostic ways.

928
00:23:05,556 --> 0:23:07,776
So instead of left and right

929
00:23:07,776 --> 0:23:09,526
explicitly, we're specifying

930
00:23:09,526 --> 0:23:10,676
leading and trailing.

931
00:23:10,856 --> 0:23:12,316
And this is fantastic because

932
00:23:12,316 --> 0:23:13,726
when you run your app in a right

933
00:23:13,726 --> 0:23:15,156
to left language, you're going

934
00:23:15,156 --> 0:23:17,146
to automatically get the right

935
00:23:17,146 --> 0:23:18,206
layout adaptation.

936
00:23:19,156 --> 0:23:23,106
Here we're also using a property

937
00:23:23,106 --> 0:23:24,646
called interItemSpacing on the

938
00:23:24,646 --> 0:23:24,896
group.

939
00:23:24,896 --> 0:23:26,416
So we can ask for a group to put

940
00:23:26,416 --> 0:23:27,666
a certain amount of space

941
00:23:27,696 --> 0:23:29,256
between its items, in this case

942
00:23:29,316 --> 0:23:31,516
fixed spacing of 10 points.

943
00:23:31,806 --> 0:23:32,326
And that's it.

944
00:23:32,326 --> 0:23:34,246
Everything else is very similar

945
00:23:34,246 --> 0:23:35,506
to the previous examples.

946
00:23:35,506 --> 0:23:36,776
We're just using that ability to

947
00:23:36,776 --> 0:23:38,456
explicitly specify the number of

948
00:23:38,456 --> 0:23:39,206
items per group.

949
00:23:40,566 --> 0:23:41,586
So that's all pretty neat.

950
00:23:42,356 --> 0:23:43,606
But Steve mentioned another

951
00:23:43,696 --> 0:23:44,916
really cool capability that I

952
00:23:44,916 --> 0:23:45,876
want to dive into.

953
00:23:46,916 --> 0:23:48,326
He mentioned that it's possible

954
00:23:48,326 --> 0:23:49,886
to have a different layout for

955
00:23:49,886 --> 0:23:50,476
each section.

956
00:23:50,476 --> 0:23:51,816
So far we've only looked at one

957
00:23:51,816 --> 0:23:53,586
section layout so far, but what

958
00:23:53,586 --> 0:23:54,546
if we want to have multiple

959
00:23:54,546 --> 0:23:56,456
sections, yet have them able to

960
00:23:56,456 --> 0:23:57,496
each have their own distinct

961
00:23:57,496 --> 0:23:57,856
layout?

962
00:23:58,746 --> 0:23:59,926
So let's open up our distinct

963
00:23:59,926 --> 0:24:00,866
sections example.

964
00:23:59,926 --> 0:24:00,866
sections example.

965
00:24:02,106 --> 0:24:03,616
And here we have a layout that's

966
00:24:03,616 --> 0:24:04,876
sort of a composite of some

967
00:24:04,876 --> 0:24:05,686
others that we've done.

968
00:24:05,936 --> 0:24:07,136
So we have three sections in

969
00:24:07,136 --> 0:24:07,726
this layout.

970
00:24:08,726 --> 0:24:11,446
The first section is a simple,

971
00:24:11,446 --> 0:24:12,886
single-column list like we had

972
00:24:12,886 --> 0:24:13,326
before.

973
00:24:14,126 --> 0:24:16,006
The second is a five-column grid

974
00:24:16,006 --> 0:24:16,806
of square items.

975
00:24:16,806 --> 0:24:18,876
And the third is a three-column

976
00:24:18,876 --> 0:24:20,266
grid of rectangular items.

977
00:24:21,176 --> 0:24:22,976
So how do we implement this?

978
00:24:24,346 --> 0:24:25,076
Let's open up our

979
00:24:25,076 --> 0:24:26,616
DistinctSectionsViewController

980
00:24:26,616 --> 0:24:28,166
and look at our createLayout

981
00:24:28,166 --> 0:24:28,586
function.

982
00:24:30,126 --> 0:24:31,456
Now, at first glance this looks

983
00:24:31,456 --> 0:24:32,406
somewhat significantly

984
00:24:32,406 --> 0:24:33,946
different, but it's really just

985
00:24:33,946 --> 0:24:35,206
that the outermost component of

986
00:24:35,206 --> 0:24:36,386
it where we instantiate the

987
00:24:36,386 --> 0:24:37,486
layout, instead of coming at the

988
00:24:37,486 --> 0:24:38,196
end, it's coming at the

989
00:24:38,196 --> 0:24:38,666
beginning.

990
00:24:39,306 --> 0:24:40,166
And here's the reason why.

991
00:24:40,766 --> 0:24:42,336
So we're instantiating the

992
00:24:42,336 --> 0:24:43,596
compositional layout using an

993
00:24:43,596 --> 0:24:45,356
initializer that takes that

994
00:24:45,356 --> 0:24:47,066
section provider closure as its

995
00:24:47,066 --> 0:24:48,526
parameter that Steve mentioned.

996
00:24:49,286 --> 0:24:50,656
So section provider closure, I

997
00:24:50,656 --> 0:24:51,956
mean, this is an arbitrary block

998
00:24:51,956 --> 0:24:52,406
of code.

999
00:24:52,406 --> 0:24:54,596
So as you can imagine, you can

1000
00:24:54,596 --> 0:24:56,756
respond to this being invoked by

1001
00:24:56,756 --> 0:24:58,396
returning whatever kind of

1002
00:24:58,396 --> 0:24:59,856
layout you want for that

1003
00:24:59,856 --> 0:25:00,296
section.

1004
00:24:59,856 --> 0:25:00,296
section.

1005
00:25:01,096 --> 0:25:02,516
Your past two parameters,

1006
00:25:03,206 --> 0:25:04,376
section index that tells you

1007
00:25:04,376 --> 0:25:05,186
which section -- it's going to

1008
00:25:05,186 --> 0:25:06,606
be zero, 1 or 2 in our case.

1009
00:25:07,596 --> 0:25:08,976
And a layout environment that

1010
00:25:08,976 --> 0:25:10,106
contains various useful

1011
00:25:10,106 --> 0:25:11,326
properties you can refer to.

1012
00:25:11,326 --> 0:25:12,666
We're going to look at that in a

1013
00:25:12,666 --> 0:25:13,076
moment.

1014
00:25:14,536 --> 0:25:16,676
So -- but everything else inside

1015
00:25:16,676 --> 0:25:17,796
this closure is just the same

1016
00:25:17,796 --> 0:25:18,956
code that we wrote before.

1017
00:25:19,026 --> 0:25:20,916
We're specifying an item

1018
00:25:20,916 --> 0:25:21,446
description.

1019
00:25:22,066 --> 0:25:23,986
We're wrapping that in a group

1020
00:25:23,986 --> 0:25:24,576
description.

1021
00:25:25,056 --> 0:25:27,026
And then lastly, we specify a

1022
00:25:27,026 --> 0:25:28,256
section description, and that's

1023
00:25:28,256 --> 0:25:29,166
what we returned from the

1024
00:25:29,166 --> 0:25:30,386
section provider closure.

1025
00:25:30,996 --> 0:25:32,966
Now, compositional layout knows

1026
00:25:32,966 --> 0:25:34,156
to automatically invoke this

1027
00:25:34,156 --> 0:25:35,866
closure whenever it needs to

1028
00:25:35,866 --> 0:25:38,666
requery for a new description of

1029
00:25:38,666 --> 0:25:39,676
a particular section.

1030
00:25:40,346 --> 0:25:42,126
So the contents are pretty much

1031
00:25:42,126 --> 0:25:43,266
very similar to before.

1032
00:25:44,126 --> 0:25:45,466
The interesting thing that

1033
00:25:45,466 --> 0:25:46,516
differentiates our various

1034
00:25:46,516 --> 0:25:47,886
layouts is mainly that we have a

1035
00:25:47,886 --> 0:25:48,826
different number of columns,

1036
00:25:48,826 --> 0:25:49,116
right?

1037
00:25:49,846 --> 0:25:50,746
So we've declared this

1038
00:25:50,746 --> 0:25:52,966
SectionLayoutKind type, it's

1039
00:25:52,966 --> 0:25:53,826
declared at the top of the

1040
00:25:53,826 --> 0:25:54,376
source file.

1041
00:25:54,376 --> 0:25:55,416
Let's take a look at.

1042
00:25:55,416 --> 0:25:56,846
When we initialize it, we pass

1043
00:25:56,886 --> 0:25:58,506
in the section index that's

1044
00:25:58,506 --> 0:25:59,816
going to be zero, 1, or 2.

1045
00:26:00,626 --> 0:26:02,666
And all it does is map that to

1046
00:26:02,666 --> 0:26:04,476
an enum type that tells us the

1047
00:26:04,476 --> 0:26:05,606
SectionLayoutKind is going to be

1048
00:26:05,606 --> 0:26:08,306
either a list, or grid5, or

1049
00:26:08,306 --> 0:26:08,906
grid3.

1050
00:26:09,126 --> 0:26:11,696
And we've also added this handy

1051
00:26:11,896 --> 0:26:13,436
gettable property, columnCount,

1052
00:26:13,436 --> 0:26:14,636
where we can just ask that

1053
00:26:14,636 --> 0:26:16,636
SectionLayoutKind value how many

1054
00:26:16,636 --> 0:26:17,816
columns we should have in that

1055
00:26:17,816 --> 0:26:18,136
layout.

1056
00:26:18,646 --> 0:26:21,056
Going back to our createLayout

1057
00:26:21,056 --> 0:26:22,376
function we can see where we ask

1058
00:26:22,376 --> 0:26:24,356
for that columnCount, and we use

1059
00:26:24,356 --> 0:26:25,556
it in two different places.

1060
00:26:25,866 --> 0:26:29,436
As in our two-column grid

1061
00:26:29,436 --> 0:26:31,256
example, we're explicitly

1062
00:26:31,256 --> 0:26:32,796
passing the number of columns

1063
00:26:32,796 --> 0:26:34,836
that we want when we instantiate

1064
00:26:34,836 --> 0:26:35,826
our horizontal group.

1065
00:26:36,616 --> 0:26:38,026
So we're leaving it to

1066
00:26:38,026 --> 0:26:38,866
compositional layout to

1067
00:26:38,956 --> 0:26:40,506
automatically figure out what

1068
00:26:40,506 --> 0:26:42,006
sort of item width that implies.

1069
00:26:42,276 --> 0:26:43,676
We're also using the number of

1070
00:26:43,676 --> 0:26:45,716
columns here to determine the

1071
00:26:45,716 --> 0:26:46,936
group height or the row height

1072
00:26:46,936 --> 0:26:48,006
for the layout since we want to

1073
00:26:48,006 --> 0:26:48,416
vary it.

1074
00:26:48,416 --> 0:26:50,126
So you can do this any way that

1075
00:26:50,126 --> 0:26:50,516
you want.

1076
00:26:50,806 --> 0:26:52,816
So that's pretty neat.

1077
00:26:52,816 --> 0:26:53,856
But what if we want to be able

1078
00:26:53,856 --> 0:26:55,166
to have this layout adapt,

1079
00:26:55,736 --> 0:26:56,066
right?

1080
00:26:56,066 --> 0:26:58,596
What if we rotate the phone and

1081
00:26:59,306 --> 0:27:00,726
maybe this isn't making the best

1082
00:26:59,306 --> 0:27:00,726
maybe this isn't making the best

1083
00:27:00,726 --> 0:27:01,776
use of space?

1084
00:27:02,526 --> 0:27:03,906
Maybe we could fit more items.

1085
00:27:04,866 --> 0:27:05,976
So let's look at our adaptive

1086
00:27:05,976 --> 0:27:06,836
sections layout.

1087
00:27:07,856 --> 0:27:09,276
Now, at first glance this looks

1088
00:27:09,276 --> 0:27:10,426
exactly like the previous

1089
00:27:10,426 --> 0:27:10,926
example.

1090
00:27:11,336 --> 0:27:13,896
But when we rotate this one, we

1091
00:27:13,896 --> 0:27:15,216
can see that our first section

1092
00:27:15,216 --> 0:27:16,846
adapts to show two columns

1093
00:27:16,846 --> 0:27:18,806
across; our second shows ten

1094
00:27:18,806 --> 0:27:21,186
across; and our third shows six

1095
00:27:21,186 --> 0:27:21,766
across.

1096
00:27:22,486 --> 0:27:23,766
So how do we implement this in

1097
00:27:23,766 --> 0:27:24,176
code?

1098
00:27:24,616 --> 0:27:25,946
It's actually quite similar to

1099
00:27:25,946 --> 0:27:26,976
our previous example.

1100
00:27:28,586 --> 0:27:29,196
Opening up our

1101
00:27:29,356 --> 0:27:31,096
AdaptiveSectionsViewController

1102
00:27:31,156 --> 0:27:33,076
and looking at the createLayout

1103
00:27:33,076 --> 0:27:35,636
function, this is very similar

1104
00:27:35,636 --> 0:27:36,676
to the previous example.

1105
00:27:36,786 --> 0:27:37,576
The first thing that we'll

1106
00:27:37,576 --> 0:27:39,366
notice is different that we've

1107
00:27:39,366 --> 0:27:41,016
changed our SectionLayoutKind

1108
00:27:41,176 --> 0:27:41,376
type.

1109
00:27:42,026 --> 0:27:42,696
So we still have the

1110
00:27:42,696 --> 0:27:43,866
SectionLayoutKind.

1111
00:27:44,286 --> 0:27:45,786
But columnCount is no longer

1112
00:27:45,786 --> 0:27:47,326
just a gettable property, it's a

1113
00:27:47,406 --> 0:27:48,796
function that takes a parameter.

1114
00:27:48,796 --> 0:27:52,396
And we're passing it a width

1115
00:27:52,556 --> 0:27:54,406
that we're getting from that

1116
00:27:54,406 --> 0:27:55,286
layoutEnvironment.

1117
00:27:55,286 --> 0:27:56,746
So that layoutEnvironment type

1118
00:27:57,056 --> 0:27:58,366
contains information such as the

1119
00:27:58,406 --> 0:27:59,806
overall container width that

1120
00:28:00,056 --> 0:28:01,386
your layout has to work with,

1121
00:28:01,896 --> 0:28:04,046
and on iOS it also has trait

1122
00:28:04,046 --> 0:28:05,666
collections info inside it.

1123
00:28:05,846 --> 0:28:07,076
So you can use all of that

1124
00:28:07,076 --> 0:28:08,906
information to figure out what

1125
00:28:08,906 --> 0:28:10,116
kind of layout is appropriate

1126
00:28:10,116 --> 0:28:11,336
for the current environment.

1127
00:28:11,826 --> 0:28:13,276
Here we're just using the width.

1128
00:28:13,276 --> 0:28:16,476
And if we look at the top where

1129
00:28:16,476 --> 0:28:18,026
we declared SectionLayoutKind,

1130
00:28:18,806 --> 0:28:19,946
we can see that columnCount

1131
00:28:19,946 --> 0:28:21,416
function that's now a function,

1132
00:28:21,796 --> 0:28:23,296
and it takes a width parameter

1133
00:28:23,296 --> 0:28:24,096
that we passed in.

1134
00:28:24,096 --> 0:28:25,106
That's the width of our

1135
00:28:25,106 --> 0:28:26,266
CollectionView basically in this

1136
00:28:26,266 --> 0:28:26,616
case.

1137
00:28:26,986 --> 0:28:28,236
And we've basically implemented

1138
00:28:28,236 --> 0:28:28,926
a layout break.

1139
00:28:29,326 --> 0:28:30,906
We decided that if we have more

1140
00:28:30,906 --> 0:28:32,696
than 800 points of width to work

1141
00:28:32,696 --> 0:28:34,106
with on our device, we're going

1142
00:28:34,106 --> 0:28:35,376
to go into what we call

1143
00:28:35,376 --> 0:28:36,126
wideMode.

1144
00:28:36,566 --> 0:28:38,896
And in wideMode we simply return

1145
00:28:38,896 --> 0:28:40,336
a larger number of columns for

1146
00:28:40,336 --> 0:28:40,946
each section.

1147
00:28:41,646 --> 0:28:43,266
And that's it.

1148
00:28:43,436 --> 0:28:44,566
If we go back to our create

1149
00:28:44,566 --> 0:28:45,766
layout function, we can see that

1150
00:28:45,766 --> 0:28:47,336
after we've got that number of

1151
00:28:47,336 --> 0:28:49,646
columns, we pretty much use it

1152
00:28:49,646 --> 0:28:51,416
in very much the same way as

1153
00:28:51,446 --> 0:28:51,936
before.

1154
00:28:51,936 --> 0:28:53,506
So it's very little code change

1155
00:28:53,716 --> 0:28:55,266
to get all the way to having an

1156
00:28:55,266 --> 0:28:57,426
adaptive rotating layout.

1157
00:28:57,956 --> 0:29:00,396
So this is all very neat.

1158
00:28:57,956 --> 0:29:00,396
So this is all very neat.

1159
00:29:00,506 --> 0:29:02,006
But so far we've only really

1160
00:29:02,006 --> 0:29:03,306
talked about items.

1161
00:29:03,306 --> 0:29:05,136
We haven't even delved into what

1162
00:29:05,136 --> 0:29:07,516
you can do with supplementary

1163
00:29:07,516 --> 0:29:08,836
views and decoration views.

1164
00:29:09,056 --> 0:29:09,916
And one of the really cool

1165
00:29:09,916 --> 0:29:10,866
things I love about

1166
00:29:10,866 --> 0:29:12,776
compositional layout is that it

1167
00:29:12,776 --> 0:29:14,926
makes it easier than ever to be

1168
00:29:14,926 --> 0:29:17,046
able to go beyond just headers

1169
00:29:17,046 --> 0:29:18,136
and footers and work with

1170
00:29:18,246 --> 0:29:20,336
arbitrary supplementary views of

1171
00:29:20,336 --> 0:29:21,276
your own design.

1172
00:29:21,856 --> 0:29:24,336
So to tell us a bit more about

1173
00:29:24,336 --> 0:29:25,646
that and to take us into some of

1174
00:29:25,646 --> 0:29:26,976
the more advanced topics about

1175
00:29:26,976 --> 0:29:28,556
other cool stuff you can do with

1176
00:29:28,556 --> 0:29:29,896
compositional layout, I'd like

1177
00:29:29,896 --> 0:29:30,986
to invite my colleague Steve

1178
00:29:31,036 --> 0:29:31,866
back on stage.

1179
00:29:32,016 --> 0:29:32,496
Thank you.

1180
00:29:33,516 --> 0:29:37,876
[ Applause ]

1181
00:29:38,376 --> 0:29:39,336
&gt;&gt; Steve Breen: So now that

1182
00:29:39,336 --> 0:29:40,856
we've seen how the basics work,

1183
00:29:41,026 --> 0:29:41,896
how you get up and running with

1184
00:29:41,896 --> 0:29:42,806
compositional layout, I'm going

1185
00:29:42,806 --> 0:29:44,736
to walk through how we deal with

1186
00:29:44,856 --> 0:29:46,106
more advanced topics.

1187
00:29:46,106 --> 0:29:47,326
Because there's a ton of

1188
00:29:47,326 --> 0:29:48,936
different ways you can do custom

1189
00:29:48,936 --> 0:29:49,836
layouts with compositional

1190
00:29:49,836 --> 0:29:50,046
layout.

1191
00:29:50,806 --> 0:29:51,396
All right.

1192
00:29:51,396 --> 0:29:53,926
So first I want to talk a bit

1193
00:29:53,926 --> 0:29:55,476
about supplementary items.

1194
00:29:56,616 --> 0:29:58,126
So CollectionView manages three

1195
00:29:58,126 --> 0:30:00,086
basic view class types: Your

1196
00:29:58,126 --> 0:30:00,086
basic view class types: Your

1197
00:30:00,086 --> 0:30:01,486
cells, the things you interact

1198
00:30:01,486 --> 0:30:02,906
with to express your model

1199
00:30:02,906 --> 0:30:04,966
objects; it also represents

1200
00:30:05,136 --> 0:30:06,796
supplementary items and

1201
00:30:06,796 --> 0:30:07,736
decoration items.

1202
00:30:08,446 --> 0:30:10,236
Now, these are meant to adorn

1203
00:30:10,236 --> 0:30:11,296
other parts of your layout to

1204
00:30:11,296 --> 0:30:12,786
give you visual cues about

1205
00:30:12,926 --> 0:30:14,436
content information, like maybe

1206
00:30:14,436 --> 0:30:16,106
a badge on a cell that says,

1207
00:30:16,106 --> 0:30:17,076
"Hey, you got a comment on your

1208
00:30:17,076 --> 0:30:17,816
tweet," or whatever.

1209
00:30:18,946 --> 0:30:20,906
And we see common uses for these

1210
00:30:20,946 --> 0:30:22,886
today with these three examples

1211
00:30:22,966 --> 0:30:24,256
-- badges, and headers, and

1212
00:30:24,256 --> 0:30:24,776
footers.

1213
00:30:25,186 --> 0:30:26,766
And we have support and flow

1214
00:30:26,766 --> 0:30:27,666
[inaudible] today with sticky

1215
00:30:27,666 --> 0:30:28,406
headers and footers.

1216
00:30:28,406 --> 0:30:29,406
And they float above that

1217
00:30:29,406 --> 0:30:29,876
content.

1218
00:30:30,176 --> 0:30:32,086
But we extend this in

1219
00:30:32,086 --> 0:30:32,946
compositional layout, making

1220
00:30:32,946 --> 0:30:34,166
this a whole lot easier.

1221
00:30:34,616 --> 0:30:36,776
And we can simplify this with

1222
00:30:36,776 --> 0:30:37,836
this notion of being able to

1223
00:30:37,836 --> 0:30:41,026
anchor content onto an item or

1224
00:30:41,086 --> 0:30:42,036
group in your layout.

1225
00:30:42,036 --> 0:30:43,276
It simplifies that visual

1226
00:30:43,276 --> 0:30:44,446
relationship, how that might

1227
00:30:44,446 --> 0:30:44,536
work.

1228
00:30:44,536 --> 0:30:47,006
All right, let's look at this

1229
00:30:47,006 --> 0:30:47,496
visually.

1230
00:30:47,496 --> 0:30:50,406
So here we can see we've got

1231
00:30:50,576 --> 0:30:51,416
this new type,

1232
00:30:51,646 --> 0:30:52,876
NSCollectionLayoutAnchor.

1233
00:30:53,586 --> 0:30:54,986
And here we specify the

1234
00:30:55,186 --> 0:30:56,536
relationship between these two

1235
00:30:56,536 --> 0:30:56,896
types.

1236
00:30:56,896 --> 0:30:58,066
So our supplementary is going to

1237
00:30:58,066 --> 0:31:00,216
be anchored relative to the

1238
00:30:58,066 --> 0:31:00,216
be anchored relative to the

1239
00:31:00,216 --> 0:31:02,016
geometry of a host space, an

1240
00:31:02,016 --> 0:31:03,836
item or group in these kinds of

1241
00:31:03,836 --> 0:31:04,326
ways.

1242
00:31:04,986 --> 0:31:06,646
And it's super easy to reason

1243
00:31:06,646 --> 0:31:06,956
about.

1244
00:31:09,466 --> 0:31:11,766
Okay. So here we see we have

1245
00:31:11,766 --> 0:31:13,726
NSCollectionLayoutAnchor we

1246
00:31:13,726 --> 0:31:14,276
create right away.

1247
00:31:14,276 --> 0:31:15,376
And we specify the edges.

1248
00:31:15,376 --> 0:31:16,716
We want this item to be pinned

1249
00:31:16,716 --> 0:31:19,146
to the top trailing side of that

1250
00:31:19,146 --> 0:31:20,156
particular cell.

1251
00:31:20,836 --> 0:31:22,656
And we want it to poke outside

1252
00:31:23,076 --> 0:31:24,106
of that geometry a little bit.

1253
00:31:24,106 --> 0:31:25,056
And we see that with fractional

1254
00:31:25,056 --> 0:31:25,276
height.

1255
00:31:27,106 --> 0:31:28,836
Okay. So here we can see the

1256
00:31:28,836 --> 0:31:29,416
device.

1257
00:31:29,416 --> 0:31:30,666
So we've got these badges on

1258
00:31:30,666 --> 0:31:31,066
there, right?

1259
00:31:31,606 --> 0:31:33,096
With my wonderful design skills.

1260
00:31:33,096 --> 0:31:34,396
We've got a four-item grid with

1261
00:31:34,846 --> 0:31:36,176
those wonderful corn flower blue

1262
00:31:36,176 --> 0:31:36,696
cells.

1263
00:31:37,296 --> 0:31:38,476
And we see here that some of

1264
00:31:38,476 --> 0:31:39,436
these items have these little

1265
00:31:39,436 --> 0:31:40,246
notifiers on them, right,

1266
00:31:40,246 --> 0:31:41,146
letting them know, "Hey, you got

1267
00:31:41,146 --> 0:31:42,196
something to pay attention to

1268
00:31:42,196 --> 0:31:42,396
here."

1269
00:31:43,576 --> 0:31:45,626
And with this, they kind of poke

1270
00:31:45,626 --> 0:31:47,126
outside that geometry a little

1271
00:31:47,126 --> 0:31:47,456
bit, right?

1272
00:31:47,676 --> 0:31:48,486
They're not really inside the

1273
00:31:48,486 --> 0:31:49,676
geometry of the cell itself.

1274
00:31:50,376 --> 0:31:51,486
Let's go back to the slides real

1275
00:31:51,486 --> 0:31:52,686
quick and walk through this.

1276
00:31:53,076 --> 0:31:54,596
All right.

1277
00:31:54,596 --> 0:31:56,156
So that fractionalOffset is what

1278
00:31:56,156 --> 0:31:57,636
buys us the ability to poke

1279
00:31:57,636 --> 0:31:58,306
outside a little bit.

1280
00:31:58,306 --> 0:31:59,096
We're going to move over

1281
00:31:59,096 --> 0:32:01,406
fractionally 30% in the positive

1282
00:31:59,096 --> 0:32:01,406
fractionally 30% in the positive

1283
00:32:01,406 --> 0:32:04,016
X and then up in the minus Y 30%

1284
00:32:04,016 --> 0:32:04,436
as well.

1285
00:32:04,916 --> 0:32:06,646
And then we see we defined the

1286
00:32:06,646 --> 0:32:07,956
CollectionLayout

1287
00:32:07,956 --> 0:32:09,566
SupplementaryItem with a

1288
00:32:09,566 --> 0:32:11,156
badgeSize and elementKind.

1289
00:32:11,156 --> 0:32:12,046
So we're going to refer back to

1290
00:32:12,046 --> 0:32:12,766
the view class for

1291
00:32:12,766 --> 0:32:13,606
CollectionView with that

1292
00:32:13,666 --> 0:32:14,846
registered supplementary type.

1293
00:32:15,486 --> 0:32:17,426
And then we specify the

1294
00:32:17,426 --> 0:32:18,976
container's anchor, specifying

1295
00:32:18,976 --> 0:32:19,796
how it's going to relate.

1296
00:32:19,796 --> 0:32:21,456
So now that we have this

1297
00:32:21,496 --> 0:32:22,856
definition of our supplementary,

1298
00:32:22,856 --> 0:32:24,026
we need to associate it with

1299
00:32:24,026 --> 0:32:24,516
something.

1300
00:32:24,786 --> 0:32:26,086
And that needs to be associated

1301
00:32:26,416 --> 0:32:28,476
with an item, a cell.

1302
00:32:29,026 --> 0:32:30,226
So in this case we're going to

1303
00:32:30,226 --> 0:32:31,686
initialize it with an extended

1304
00:32:31,686 --> 0:32:33,346
variant of initializer that

1305
00:32:33,346 --> 0:32:34,456
takes an array of

1306
00:32:34,456 --> 0:32:35,566
supplementaries.

1307
00:32:35,566 --> 0:32:35,976
And that's it.

1308
00:32:39,286 --> 0:32:39,476
All right.

1309
00:32:39,476 --> 0:32:40,536
So what about headers and

1310
00:32:40,606 --> 0:32:41,146
footers?

1311
00:32:41,486 --> 0:32:43,166
So headers and footers are just

1312
00:32:43,166 --> 0:32:44,696
a tad bit different than

1313
00:32:44,696 --> 0:32:45,886
supplementaries for these items.

1314
00:32:45,886 --> 0:32:47,326
When you think about the content

1315
00:32:47,326 --> 0:32:48,776
that you want to adorn with a

1316
00:32:48,776 --> 0:32:50,566
supplementary header and footer,

1317
00:32:51,276 --> 0:32:52,226
you really don't want that

1318
00:32:52,226 --> 0:32:53,106
supplementary heard and footer

1319
00:32:53,106 --> 0:32:54,726
to occlude the content; you want

1320
00:32:54,726 --> 0:32:56,596
to extend that content area so

1321
00:32:56,596 --> 0:32:58,096
you can see the content itself.

1322
00:32:59,186 --> 0:33:00,466
So in this instance we have a

1323
00:32:59,186 --> 0:33:00,466
So in this instance we have a

1324
00:33:00,466 --> 0:33:01,666
different variation of

1325
00:33:01,666 --> 0:33:02,926
supplementary called boundary

1326
00:33:02,926 --> 0:33:03,886
supplementaries.

1327
00:33:03,946 --> 0:33:04,936
We're going to bin it to the

1328
00:33:04,936 --> 0:33:06,346
boundaries of that supplementary

1329
00:33:06,346 --> 0:33:07,426
-- of that host geometry.

1330
00:33:08,636 --> 0:33:09,706
Now, we can do these boundary

1331
00:33:09,706 --> 0:33:11,136
supplementary items for sections

1332
00:33:11,136 --> 0:33:13,316
or the entire layout, and we can

1333
00:33:13,316 --> 0:33:14,716
pin them to this whole balance,

1334
00:33:14,716 --> 0:33:16,056
which do some pretty cool stuff.

1335
00:33:16,726 --> 0:33:17,226
All right.

1336
00:33:17,226 --> 0:33:18,196
So I'm going to switch back over

1337
00:33:18,196 --> 0:33:19,226
to the device here hopefully.

1338
00:33:20,726 --> 0:33:21,856
There we go.

1339
00:33:22,106 --> 0:33:22,366
All right.

1340
00:33:22,366 --> 0:33:24,586
Let's see what this looks like.

1341
00:33:25,146 --> 0:33:26,836
So pretty straightforward

1342
00:33:26,836 --> 0:33:27,206
example.

1343
00:33:27,206 --> 0:33:29,146
Here we have a pinned section

1344
00:33:29,146 --> 0:33:30,136
headers and footers.

1345
00:33:30,616 --> 0:33:31,676
And we scroll and everything

1346
00:33:31,676 --> 0:33:33,926
looks just like we expect.

1347
00:33:34,186 --> 0:33:34,786
Look at the code.

1348
00:33:36,156 --> 0:33:37,556
All right.

1349
00:33:37,556 --> 0:33:38,416
So here's what we got.

1350
00:33:38,716 --> 0:33:40,296
So it's similar to what we say

1351
00:33:40,296 --> 0:33:41,096
just a minute ago with the

1352
00:33:41,096 --> 0:33:42,326
BoundarySupplementaryItems,

1353
00:33:42,786 --> 0:33:44,016
except now rather than that

1354
00:33:44,086 --> 0:33:45,636
container anchor, we see we have

1355
00:33:45,636 --> 0:33:46,726
alignment property.

1356
00:33:47,706 --> 0:33:49,896
And here we specify top for the

1357
00:33:49,896 --> 0:33:50,896
header and bottom for the

1358
00:33:50,896 --> 0:33:51,116
footer.

1359
00:33:51,116 --> 0:33:52,316
We want to go to the top and the

1360
00:33:52,316 --> 0:33:53,296
bottom of that section of

1361
00:33:53,296 --> 0:33:53,786
geometry.

1362
00:33:54,456 --> 0:33:55,806
And to make sure that header

1363
00:33:55,806 --> 0:33:57,566
kind of floats and stays pinned

1364
00:33:57,616 --> 0:33:58,876
to the content area where it's

1365
00:33:58,876 --> 0:34:00,616
at in the section, we just

1366
00:33:58,876 --> 0:34:00,616
at in the section, we just

1367
00:34:00,616 --> 0:34:02,046
specify PinToVisibleBounds.

1368
00:34:02,306 --> 0:34:04,526
And then we need to associate

1369
00:34:04,526 --> 0:34:05,516
the header and footer with the

1370
00:34:05,516 --> 0:34:06,466
geometry it's going to be in,

1371
00:34:06,466 --> 0:34:07,256
and that's the section.

1372
00:34:07,446 --> 0:34:08,315
We just do that with the

1373
00:34:08,315 --> 0:34:09,806
BoundarySupplementaryItems

1374
00:34:09,806 --> 0:34:10,016
array.

1375
00:34:11,016 --> 0:34:11,735
Pretty straightforward.

1376
00:34:12,886 --> 0:34:13,786
All right.

1377
00:34:13,786 --> 0:34:15,196
So by now you've played around

1378
00:34:15,196 --> 0:34:17,255
with the brand new iOS 13 card

1379
00:34:17,255 --> 0:34:18,766
presentation, this whole card

1380
00:34:19,156 --> 0:34:20,416
design language all throughout

1381
00:34:20,416 --> 0:34:20,976
the system.

1382
00:34:21,936 --> 0:34:23,666
And we see this in scrolling

1383
00:34:23,826 --> 0:34:26,156
UI's as well where all kinds of

1384
00:34:26,156 --> 0:34:27,306
content is grouped together

1385
00:34:27,366 --> 0:34:28,815
logically with cards.

1386
00:34:29,136 --> 0:34:30,556
And this is a natural fit for

1387
00:34:30,556 --> 0:34:31,426
CollectionView because we always

1388
00:34:31,426 --> 0:34:32,556
had support for notions of

1389
00:34:32,556 --> 0:34:33,536
decoration views.

1390
00:34:33,536 --> 0:34:35,545
Well, in the past you had to do

1391
00:34:35,545 --> 0:34:36,446
the math yourself.

1392
00:34:36,446 --> 0:34:37,156
Well, now we've made it a lot

1393
00:34:37,156 --> 0:34:38,735
simpler with compositional

1394
00:34:38,735 --> 0:34:39,056
layout.

1395
00:34:39,666 --> 0:34:41,166
And we support this with a

1396
00:34:41,196 --> 0:34:42,706
CollectionLayoutDecorationItem.

1397
00:34:43,025 --> 0:34:43,696
You just create it with an

1398
00:34:43,696 --> 0:34:44,976
element kind and you're done.

1399
00:34:45,746 --> 0:34:47,436
This is intended to be used to

1400
00:34:47,436 --> 0:34:49,045
have a view that's behind the

1401
00:34:49,045 --> 0:34:50,485
section content itself to give

1402
00:34:50,485 --> 0:34:51,866
you that nice visual grouping.

1403
00:34:52,646 --> 0:34:54,315
And to construct it, there's

1404
00:34:54,315 --> 0:34:55,206
just one line of code.

1405
00:34:55,206 --> 0:34:55,996
And then to add it to the

1406
00:34:55,996 --> 0:34:57,896
section, you just want to

1407
00:34:58,116 --> 0:34:59,916
specify the items and off you

1408
00:34:59,916 --> 0:35:00,116
go.

1409
00:34:59,916 --> 0:35:00,116
go.

1410
00:35:01,076 --> 0:35:01,696
Here we go.

1411
00:35:02,256 --> 0:35:02,456
All right.

1412
00:35:02,456 --> 0:35:03,816
So let's take a quick peek and

1413
00:35:03,816 --> 0:35:04,446
see what this looks like.

1414
00:35:04,876 --> 0:35:06,236
All right.

1415
00:35:06,236 --> 0:35:08,586
Pretty straightforward.

1416
00:35:08,976 --> 0:35:09,906
So there's our list with

1417
00:35:09,906 --> 0:35:11,196
multiple sections, and we have

1418
00:35:11,196 --> 0:35:13,286
our decoration views with just a

1419
00:35:13,286 --> 0:35:14,096
single line of code.

1420
00:35:14,226 --> 0:35:14,946
So pretty simple.

1421
00:35:17,756 --> 0:35:18,536
All right.

1422
00:35:18,586 --> 0:35:20,306
So here's a topic near and dear

1423
00:35:20,306 --> 0:35:21,356
to my heart: Estimated

1424
00:35:21,356 --> 0:35:22,176
cell-sizing.

1425
00:35:23,466 --> 0:35:25,436
So in iOS 13 we spent a lot of

1426
00:35:25,436 --> 0:35:26,966
time making this fast and

1427
00:35:27,016 --> 0:35:27,836
accurate.

1428
00:35:29,436 --> 0:35:30,806
And compositional layout extends

1429
00:35:30,806 --> 0:35:31,766
the notion of estimated

1430
00:35:31,766 --> 0:35:33,896
cell-sizing in very specific

1431
00:35:33,966 --> 0:35:34,406
ways.

1432
00:35:34,406 --> 0:35:35,806
It allows you to do per-axis

1433
00:35:35,806 --> 0:35:36,616
cell-sizing.

1434
00:35:36,616 --> 0:35:37,816
And this is super important.

1435
00:35:38,496 --> 0:35:39,486
Because oftentimes the view

1436
00:35:39,486 --> 0:35:40,366
hierarchy that you want to get

1437
00:35:40,366 --> 0:35:41,606
the content of when you render

1438
00:35:41,606 --> 0:35:43,086
the content, you don't want to

1439
00:35:43,086 --> 0:35:44,736
necessarily be fully constrained

1440
00:35:44,866 --> 0:35:47,086
and wild on all the axes and

1441
00:35:47,086 --> 0:35:48,546
grow on the X and grow on the Y.

1442
00:35:49,066 --> 0:35:50,286
You might know how wide the

1443
00:35:50,286 --> 0:35:51,296
thing is, for example.

1444
00:35:52,216 --> 0:35:53,716
An example of our headers and

1445
00:35:53,716 --> 0:35:55,336
footers, we might know that we

1446
00:35:55,336 --> 0:35:57,316
want it to be exactly the width

1447
00:35:57,316 --> 0:35:58,106
of the CollectionView.

1448
00:35:58,266 --> 0:35:59,546
But, you know, we want the

1449
00:35:59,546 --> 0:36:00,756
height to vary a little bit.

1450
00:35:59,546 --> 0:36:00,756
height to vary a little bit.

1451
00:36:01,386 --> 0:36:02,576
So I'm going to show an example

1452
00:36:02,576 --> 0:36:03,466
of this real quick.

1453
00:36:03,466 --> 0:36:04,376
And we've already been in this

1454
00:36:04,376 --> 0:36:04,996
code before.

1455
00:36:05,636 --> 0:36:07,796
So here we see our very familiar

1456
00:36:07,796 --> 0:36:10,206
sections, headers and footers.

1457
00:36:10,206 --> 0:36:11,216
I'm going to pull down here and

1458
00:36:11,216 --> 0:36:13,846
go to my text size widget and

1459
00:36:13,846 --> 0:36:14,566
ramp it up.

1460
00:36:15,896 --> 0:36:16,286
All right.

1461
00:36:16,286 --> 0:36:17,716
So here everything's just

1462
00:36:17,716 --> 0:36:18,326
adapted.

1463
00:36:18,456 --> 0:36:19,336
It's done the right thing,

1464
00:36:19,506 --> 0:36:19,746
right?

1465
00:36:20,096 --> 0:36:21,336
Now, how do we do this?

1466
00:36:21,406 --> 0:36:21,926
All right.

1467
00:36:21,926 --> 0:36:23,756
So here we can see that the

1468
00:36:23,756 --> 0:36:25,306
height dimension's estimated.

1469
00:36:25,656 --> 0:36:26,616
That's all we did differently

1470
00:36:26,616 --> 0:36:26,936
here, right?

1471
00:36:26,936 --> 0:36:28,226
We specified that we knew

1472
00:36:28,226 --> 0:36:29,606
exactly how wide this thing's

1473
00:36:29,606 --> 0:36:31,026
going to be, but we don't know

1474
00:36:31,026 --> 0:36:31,676
about the height.

1475
00:36:31,676 --> 0:36:32,856
We just estimate it to be 44

1476
00:36:32,856 --> 0:36:33,426
points.

1477
00:36:34,046 --> 0:36:35,316
So as the content's rendered, we

1478
00:36:35,686 --> 0:36:36,436
have a better idea.

1479
00:36:36,436 --> 0:36:37,456
We can invalidate the layout

1480
00:36:37,456 --> 0:36:38,096
automatically.

1481
00:36:38,096 --> 0:36:39,026
And this happens all

1482
00:36:39,396 --> 0:36:40,466
automatically, makes it really

1483
00:36:40,466 --> 0:36:42,046
easy to support dynamic type in

1484
00:36:42,046 --> 0:36:43,356
your applications, even with

1485
00:36:43,356 --> 0:36:44,446
supplementaries and headers and

1486
00:36:44,446 --> 0:36:44,776
footers.

1487
00:36:44,776 --> 0:36:46,336
So this is -- this is pretty

1488
00:36:46,336 --> 0:36:46,536
great.

1489
00:36:48,906 --> 0:36:49,256
All right.

1490
00:36:49,256 --> 0:36:49,926
So now we're getting to some

1491
00:36:49,926 --> 0:36:50,636
really fun stuff.

1492
00:36:50,636 --> 0:36:52,076
So what about nesting things?

1493
00:36:52,186 --> 0:36:53,386
So we talked about this notion

1494
00:36:53,386 --> 0:36:54,606
of composition early on.

1495
00:36:54,606 --> 0:36:56,066
Well, let's talk about how that

1496
00:36:56,066 --> 0:36:56,646
works.

1497
00:36:57,436 --> 0:37:00,856
So the core layout thing inside

1498
00:36:57,436 --> 0:37:00,856
So the core layout thing inside

1499
00:37:00,856 --> 0:37:01,606
of compositional layout is

1500
00:37:01,636 --> 0:37:02,226
layout group.

1501
00:37:02,766 --> 0:37:04,416
And layout group is actually a

1502
00:37:04,416 --> 0:37:05,556
subtype of

1503
00:37:05,556 --> 0:37:06,766
NSCollectionLayoutItem.

1504
00:37:07,506 --> 0:37:09,006
Now, because this is a

1505
00:37:09,086 --> 0:37:11,186
relationship, when you specify

1506
00:37:11,186 --> 0:37:12,966
the items that are in a layout

1507
00:37:12,966 --> 0:37:14,336
group, you can also have other

1508
00:37:14,336 --> 0:37:14,826
groups.

1509
00:37:14,826 --> 0:37:15,736
So you can nest these.

1510
00:37:15,736 --> 0:37:17,186
And there's no limit to this

1511
00:37:17,226 --> 0:37:18,096
particular nesting, it's

1512
00:37:18,096 --> 0:37:18,636
arbitrary.

1513
00:37:18,786 --> 0:37:21,086
And because we have this, it

1514
00:37:21,086 --> 0:37:23,356
unlocks a ton of interesting new

1515
00:37:23,486 --> 0:37:24,146
designs.

1516
00:37:25,456 --> 0:37:27,076
Okay. So in this example we see

1517
00:37:27,326 --> 0:37:29,036
a group is compromised of three

1518
00:37:29,036 --> 0:37:29,456
items.

1519
00:37:30,156 --> 0:37:32,006
And we see this big old monster

1520
00:37:32,006 --> 0:37:33,716
on the leading side and it has a

1521
00:37:33,716 --> 0:37:36,326
vertical group on the trailing

1522
00:37:36,326 --> 0:37:37,246
side, right?

1523
00:37:37,646 --> 0:37:38,676
So how would we reason about

1524
00:37:38,676 --> 0:37:39,436
this in code?

1525
00:37:43,906 --> 0:37:44,676
All right, so this is pretty

1526
00:37:44,676 --> 0:37:45,366
straightforward, right?

1527
00:37:45,366 --> 0:37:46,646
We had this horizontal group on

1528
00:37:46,646 --> 0:37:47,686
the bottom here.

1529
00:37:47,776 --> 0:37:49,546
And its subitems are the

1530
00:37:49,546 --> 0:37:52,026
leadingItem itself, right, and a

1531
00:37:52,026 --> 0:37:52,966
trailingGroup.

1532
00:37:52,966 --> 0:37:54,236
So it's very easy to reason

1533
00:37:54,236 --> 0:37:55,186
about these kinds of things.

1534
00:37:55,186 --> 0:37:56,226
We can see right away what we're

1535
00:37:56,226 --> 0:37:56,786
trying to do.

1536
00:37:56,786 --> 0:37:57,856
And we just compose in

1537
00:37:57,856 --> 0:37:59,416
additional stuff and we get

1538
00:37:59,416 --> 0:38:01,126
these great layouts.

1539
00:37:59,416 --> 0:38:01,126
these great layouts.

1540
00:38:02,056 --> 0:38:03,136
All right.

1541
00:38:03,176 --> 0:38:05,106
So nested groups are pretty

1542
00:38:05,106 --> 0:38:05,406
cool.

1543
00:38:05,406 --> 0:38:07,256
But what about -- what about

1544
00:38:07,256 --> 0:38:08,446
nesting CollectionViews?

1545
00:38:08,916 --> 0:38:10,266
All right.

1546
00:38:10,266 --> 0:38:14,296
So here we see the App Store,

1547
00:38:14,656 --> 0:38:16,756
the refresh for iOS 13.

1548
00:38:17,516 --> 0:38:18,396
And I don't know about you, but

1549
00:38:18,396 --> 0:38:19,146
when I was a third-party

1550
00:38:19,146 --> 0:38:20,116
developer, if I saw this

1551
00:38:20,606 --> 0:38:21,826
particular design handed to me,

1552
00:38:21,826 --> 0:38:22,776
I'd have a heart attack.

1553
00:38:22,846 --> 0:38:24,116
This is complicated stuff.

1554
00:38:24,116 --> 0:38:25,916
This can be challenging.

1555
00:38:25,916 --> 0:38:26,926
There's a lot of bookkeeping

1556
00:38:26,926 --> 0:38:27,496
involved.

1557
00:38:27,596 --> 0:38:28,436
And -- but it's a common

1558
00:38:28,436 --> 0:38:28,776
pattern.

1559
00:38:28,776 --> 0:38:30,376
We see it all the time in

1560
00:38:30,526 --> 0:38:32,236
today's applications.

1561
00:38:32,656 --> 0:38:34,686
And to make this perform well

1562
00:38:34,686 --> 0:38:36,196
and look great is a bit of a

1563
00:38:36,196 --> 0:38:36,656
challenge.

1564
00:38:36,656 --> 0:38:37,696
Well, compositional layout

1565
00:38:37,696 --> 0:38:39,366
solves this with one line of

1566
00:38:39,366 --> 0:38:39,456
code.

1567
00:38:40,366 --> 0:38:41,316
And I want to show you a demo of

1568
00:38:41,316 --> 0:38:41,836
this right now.

1569
00:38:42,516 --> 0:38:47,500
[ Applause ]

1570
00:38:52,306 --> 0:38:54,246
Okay. So here we have the same

1571
00:38:54,246 --> 0:38:55,366
group I had from the prior one.

1572
00:38:55,366 --> 0:38:56,146
But we notice the group's a

1573
00:38:56,146 --> 0:38:57,126
little bit squishier, right?

1574
00:38:57,126 --> 0:38:58,846
It's about 80% of the

1575
00:38:58,846 --> 0:38:59,586
container's width.

1576
00:38:59,586 --> 0:39:01,376
And this is a vertically

1577
00:38:59,586 --> 0:39:01,376
And this is a vertically

1578
00:39:01,376 --> 0:39:02,376
scrolling CollectionView.

1579
00:39:02,376 --> 0:39:03,706
It's got five sections on it.

1580
00:39:04,576 --> 0:39:05,946
But each section scrolls

1581
00:39:05,946 --> 0:39:07,456
orthogonally with that single

1582
00:39:07,456 --> 0:39:07,876
line of code.

1583
00:39:08,516 --> 0:39:15,396
[ Applause ]

1584
00:39:15,896 --> 0:39:16,066
All right.

1585
00:39:16,066 --> 0:39:17,316
And we've got a ton of different

1586
00:39:17,316 --> 0:39:18,086
variations of this.

1587
00:39:18,086 --> 0:39:18,646
And bear with me.

1588
00:39:18,646 --> 0:39:19,536
I'm going to switch around here.

1589
00:39:19,596 --> 0:39:19,836
All right.

1590
00:39:19,836 --> 0:39:21,846
So we've got five different ways

1591
00:39:21,846 --> 0:39:22,886
to do this, right, including the

1592
00:39:22,886 --> 0:39:24,206
none case, which I don't want

1593
00:39:24,206 --> 0:39:24,416
that.

1594
00:39:24,996 --> 0:39:26,626
We have two continuous cases.

1595
00:39:26,876 --> 0:39:28,576
And then we have three paging

1596
00:39:28,576 --> 0:39:29,176
cases.

1597
00:39:29,626 --> 0:39:30,406
All right.

1598
00:39:30,406 --> 0:39:31,166
So I'm going to walk through

1599
00:39:31,166 --> 0:39:34,666
each one of these in kind here.

1600
00:39:36,256 --> 0:39:37,016
All right.

1601
00:39:37,016 --> 0:39:38,396
Go to our orthogonal scrolling

1602
00:39:39,136 --> 0:39:40,756
section behaviors demo.

1603
00:39:41,396 --> 0:39:42,386
And continuous is just like

1604
00:39:42,386 --> 0:39:42,956
you'd expect it.

1605
00:39:42,956 --> 0:39:44,696
This is a very simple,

1606
00:39:44,696 --> 0:39:46,086
straightforward scroll view-like

1607
00:39:46,086 --> 0:39:46,896
behavior, you know?

1608
00:39:46,896 --> 0:39:48,236
You -- you had me at bounce,

1609
00:39:48,236 --> 0:39:48,376
right?

1610
00:39:48,376 --> 0:39:51,446
It's got that great -- gosh, I

1611
00:39:51,446 --> 0:39:52,506
could do this for hours, right?

1612
00:39:52,986 --> 0:39:54,226
All right.

1613
00:39:54,226 --> 0:39:55,466
So that's just the normal scroll

1614
00:39:55,466 --> 0:39:56,006
view behavior.

1615
00:39:56,006 --> 0:39:57,186
But we have an additional one

1616
00:39:57,186 --> 0:39:58,846
for this continuous, you know,

1617
00:39:58,846 --> 0:40:00,516
fluid kind of scrolling that we

1618
00:39:58,846 --> 0:40:00,516
fluid kind of scrolling that we

1619
00:40:00,516 --> 0:40:01,996
call continuous group-leading

1620
00:40:01,996 --> 0:40:02,316
boundary.

1621
00:40:02,316 --> 0:40:03,356
And that's a mouthful but it's

1622
00:40:03,356 --> 0:40:04,066
pretty descriptive.

1623
00:40:04,476 --> 0:40:05,696
So as we scroll and we impart

1624
00:40:05,696 --> 0:40:07,836
volume to it, we naturally come

1625
00:40:07,836 --> 0:40:09,426
to rest at that group's

1626
00:40:09,426 --> 0:40:10,976
semantic-leading boundary.

1627
00:40:11,516 --> 0:40:15,286
[ Applause ]

1628
00:40:15,786 --> 0:40:16,966
So you people that clap have

1629
00:40:17,006 --> 0:40:18,496
done targeted content offset or

1630
00:40:18,496 --> 0:40:19,716
proposed offset before and you

1631
00:40:19,716 --> 0:40:20,356
know it's a pain.

1632
00:40:20,566 --> 0:40:21,696
All right.

1633
00:40:21,696 --> 0:40:23,016
So with the addition of the

1634
00:40:23,016 --> 0:40:24,926
continuous behaviors, we have

1635
00:40:24,926 --> 0:40:26,216
some paging behaviors.

1636
00:40:26,216 --> 0:40:27,276
And this gets really cool.

1637
00:40:27,276 --> 0:40:29,316
So this is just like the normal

1638
00:40:29,316 --> 0:40:30,856
scroll view paging behavior, and

1639
00:40:30,856 --> 0:40:32,216
we named this behavior paging.

1640
00:40:33,266 --> 0:40:33,696
Pretty creative.

1641
00:40:34,386 --> 0:40:35,526
And here we can see no matter

1642
00:40:35,526 --> 0:40:36,866
how much velocity the user

1643
00:40:36,866 --> 0:40:38,716
imparts, we just get one page of

1644
00:40:38,716 --> 0:40:39,216
content.

1645
00:40:39,216 --> 0:40:40,826
And this page is defined as the

1646
00:40:40,826 --> 0:40:42,596
default scroll view behavior

1647
00:40:42,596 --> 0:40:44,206
where it's the width of the

1648
00:40:44,206 --> 0:40:44,796
CollectionView.

1649
00:40:46,776 --> 0:40:48,266
We have two more variants to

1650
00:40:48,266 --> 0:40:48,866
this, okay?

1651
00:40:48,866 --> 0:40:50,596
And as you can probably intuit,

1652
00:40:50,596 --> 0:40:52,016
we have this notion of group

1653
00:40:52,106 --> 0:40:52,636
paging.

1654
00:40:53,316 --> 0:40:54,526
So now we have the semantic

1655
00:40:54,526 --> 0:40:55,906
notion of what a group is, we

1656
00:40:55,906 --> 0:40:57,786
can make the page size be the

1657
00:40:57,786 --> 0:40:58,606
size of the group.

1658
00:40:59,646 --> 0:41:00,486
This gives you a really nice

1659
00:40:59,646 --> 0:41:00,486
This gives you a really nice

1660
00:41:00,536 --> 0:41:01,056
behavior.

1661
00:41:01,566 --> 0:41:01,696
Yeah.

1662
00:41:03,121 --> 0:41:05,121
[ Applause ]

1663
00:41:05,226 --> 0:41:06,276
Where you can automatically get

1664
00:41:06,306 --> 0:41:07,996
that no occlusion thing going

1665
00:41:07,996 --> 0:41:08,976
on, right, where your content's

1666
00:41:08,976 --> 0:41:10,116
always front and centered.

1667
00:41:10,356 --> 0:41:12,446
And then the final one is group

1668
00:41:12,446 --> 0:41:13,226
paging centered.

1669
00:41:13,226 --> 0:41:14,626
It's just like group paging, but

1670
00:41:15,426 --> 0:41:16,506
now we've centered that group

1671
00:41:16,506 --> 0:41:16,976
for you automatically.

1672
00:41:17,516 --> 0:41:20,546
[ Applause ]

1673
00:41:21,046 --> 0:41:21,836
Yeah, it's pretty cool, right?

1674
00:41:22,636 --> 0:41:23,756
And that gives you that great

1675
00:41:23,756 --> 0:41:24,716
peekaboo effect, right, where

1676
00:41:24,716 --> 0:41:25,846
you can see the content leading

1677
00:41:25,846 --> 0:41:26,666
and trailing on the side, you

1678
00:41:26,666 --> 0:41:29,666
know exactly what's going on.

1679
00:41:31,056 --> 0:41:32,576
All right, so that's a kind of

1680
00:41:32,576 --> 0:41:33,766
an advanced tour of some of the

1681
00:41:33,766 --> 0:41:34,706
additional features in

1682
00:41:34,706 --> 0:41:36,156
compositional app.

1683
00:41:36,156 --> 0:41:36,536
There's a lot more.

1684
00:41:36,536 --> 0:41:38,946
Grab the SDK and check it out.

1685
00:41:40,296 --> 0:41:44,606
So at Apple, the notion of

1686
00:41:44,606 --> 0:41:46,746
dealing with collaboration is

1687
00:41:46,746 --> 0:41:48,026
super duper important to us.

1688
00:41:48,026 --> 0:41:49,496
We have to work with other teams

1689
00:41:49,496 --> 0:41:51,326
all over the company to solve

1690
00:41:51,326 --> 0:41:51,816
problems.

1691
00:41:53,036 --> 0:41:56,526
And as a framework engineer,

1692
00:41:56,526 --> 0:41:57,846
it's super duper important for

1693
00:41:57,916 --> 0:41:59,836
us to deal all the different

1694
00:41:59,836 --> 0:42:00,776
teams in the company to make

1695
00:41:59,836 --> 0:42:00,776
teams in the company to make

1696
00:42:00,776 --> 0:42:01,986
sure we know what their needs

1697
00:42:01,986 --> 0:42:04,196
are for new framework features.

1698
00:42:05,256 --> 0:42:07,616
And one of these teams, the App

1699
00:42:07,616 --> 0:42:09,196
Store team had a new redesign

1700
00:42:09,196 --> 0:42:10,526
coming up for iOS 13.

1701
00:42:10,526 --> 0:42:11,466
They really wanted to simplify

1702
00:42:11,466 --> 0:42:12,566
their code base quite a bit.

1703
00:42:12,566 --> 0:42:14,616
So as part of that conversation,

1704
00:42:15,256 --> 0:42:16,596
we talked about compositional

1705
00:42:16,596 --> 0:42:16,836
layout.

1706
00:42:16,836 --> 0:42:18,926
And they were real excited about

1707
00:42:18,926 --> 0:42:20,206
it, went through a bunch of

1708
00:42:20,436 --> 0:42:20,846
code.

1709
00:42:20,846 --> 0:42:22,086
So for this, I'm going to bring

1710
00:42:22,086 --> 0:42:23,816
up one of our adopters from the

1711
00:42:23,816 --> 0:42:25,906
App Store team, Dersu Abolfathi.

1712
00:42:26,276 --> 0:42:26,646
Dersu?

1713
00:42:27,516 --> 0:42:32,766
[ Applause ]

1714
00:42:33,266 --> 0:42:33,766
&gt;&gt; Dersu Abolfathi: Thank you,

1715
00:42:33,766 --> 0:42:34,086
Steve.

1716
00:42:35,266 --> 0:42:36,806
The App Store is a destination

1717
00:42:36,906 --> 0:42:38,386
for millions of customers

1718
00:42:38,486 --> 0:42:39,746
looking for apps that help them

1719
00:42:39,746 --> 0:42:40,896
get the most out of their

1720
00:42:40,896 --> 0:42:41,506
devices.

1721
00:42:42,896 --> 0:42:44,076
Many of you will visit the App

1722
00:42:44,076 --> 0:42:45,976
Store on a daily basis, so the

1723
00:42:45,976 --> 0:42:47,236
content needs to be rich,

1724
00:42:48,046 --> 0:42:50,176
engaging, and dynamic.

1725
00:42:51,666 --> 0:42:53,486
CollectionView plays a key role

1726
00:42:53,486 --> 0:42:55,646
in delivering that experience.

1727
00:42:57,876 --> 0:42:59,606
So here's the App Store.

1728
00:43:00,536 --> 0:43:02,586
If you wanted to build UI like

1729
00:43:02,646 --> 0:43:05,276
this today using just flow

1730
00:43:05,276 --> 0:43:07,396
layout, you'd probably start

1731
00:43:07,396 --> 0:43:08,556
with a CollectionView that

1732
00:43:08,556 --> 0:43:09,366
scrolls in the vertical

1733
00:43:09,366 --> 0:43:09,816
direction.

1734
00:43:11,656 --> 0:43:14,046
Then for every single section

1735
00:43:14,236 --> 0:43:15,586
that scrolls on the horizontal

1736
00:43:15,586 --> 0:43:17,466
axis, you'd need an additional

1737
00:43:17,466 --> 0:43:19,846
CollectionView, which means more

1738
00:43:19,846 --> 0:43:21,526
support code to intermediate the

1739
00:43:21,526 --> 0:43:23,726
presentation and behavior of

1740
00:43:23,726 --> 0:43:24,406
each collection.

1741
00:43:27,536 --> 0:43:29,576
With compositional layout, this

1742
00:43:29,576 --> 0:43:31,596
can be done using just a single

1743
00:43:31,596 --> 0:43:32,226
CollectionView.

1744
00:43:32,226 --> 0:43:35,816
In fact, we've done just that.

1745
00:43:37,086 --> 0:43:39,386
In iOS 13, App Store has been

1746
00:43:39,386 --> 0:43:40,806
rearchitected using

1747
00:43:40,806 --> 0:43:41,736
compositional layout.

1748
00:43:42,286 --> 0:43:45,436
Each of the content types you

1749
00:43:45,436 --> 0:43:47,526
see on this page are capable of

1750
00:43:47,526 --> 0:43:49,096
vending their own layout

1751
00:43:49,096 --> 0:43:49,646
description.

1752
00:43:50,146 --> 0:43:52,016
And all those layout sections

1753
00:43:52,016 --> 0:43:53,566
come together to comprise our

1754
00:43:53,566 --> 0:43:54,906
one overall

1755
00:43:54,906 --> 0:43:56,076
CollectionViewLayout.

1756
00:43:59,646 --> 0:44:01,996
We describe this section using

1757
00:43:59,646 --> 0:44:01,996
We describe this section using

1758
00:44:01,996 --> 0:44:03,996
just a single layout item which

1759
00:44:03,996 --> 0:44:05,756
has a known height and which

1760
00:44:05,756 --> 0:44:07,856
occupies 100% of its container's

1761
00:44:07,856 --> 0:44:08,076
width.

1762
00:44:10,616 --> 0:44:12,266
That layout item sits inside of

1763
00:44:12,266 --> 0:44:14,566
a layout group, which itself

1764
00:44:14,566 --> 0:44:16,346
occupies half of its container's

1765
00:44:16,346 --> 0:44:16,556
width.

1766
00:44:17,056 --> 0:44:19,796
And these are really all the

1767
00:44:19,796 --> 0:44:21,216
basic building blocks we need to

1768
00:44:21,216 --> 0:44:22,136
get this UI working.

1769
00:44:22,696 --> 0:44:26,466
We take that layout group, stick

1770
00:44:26,466 --> 0:44:28,556
it in a layout section, and to

1771
00:44:28,556 --> 0:44:29,746
get that paging behavior we

1772
00:44:29,746 --> 0:44:31,266
want, we set our orthogonal

1773
00:44:31,266 --> 0:44:33,426
scroll behavior to group paging.

1774
00:44:34,156 --> 0:44:34,976
And we're off to the races.

1775
00:44:39,446 --> 0:44:41,676
In iOS 13 App Store is also

1776
00:44:41,676 --> 0:44:43,636
getting UI support for languages

1777
00:44:43,636 --> 0:44:45,976
that read from right to left.

1778
00:44:45,976 --> 0:44:47,256
And compositional layout helps

1779
00:44:47,256 --> 0:44:48,436
make that possible.

1780
00:44:49,016 --> 0:44:52,456
We construct our layouts using

1781
00:44:52,566 --> 0:44:53,656
all the same primitives that

1782
00:44:53,656 --> 0:44:55,376
you've seen here today, and

1783
00:44:55,376 --> 0:44:56,716
compositional layout just takes

1784
00:44:56,716 --> 0:44:57,556
care of the rest.

1785
00:44:58,056 --> 0:45:00,236
It ensures that the placement of

1786
00:44:58,056 --> 0:45:00,236
It ensures that the placement of

1787
00:45:00,236 --> 0:45:01,626
our supplementaries and our

1788
00:45:01,626 --> 0:45:03,546
cells is appropriate for our

1789
00:45:03,546 --> 0:45:04,526
right to left environment.

1790
00:45:05,186 --> 0:45:07,456
And furthermore, we don't have

1791
00:45:07,496 --> 0:45:09,326
to write a single line of code

1792
00:45:09,486 --> 0:45:10,976
to make sure that our paging

1793
00:45:10,976 --> 0:45:13,106
behavior also translates for the

1794
00:45:13,106 --> 0:45:14,496
right to left layout direction.

1795
00:45:17,496 --> 0:45:20,216
So this new API has enabled to

1796
00:45:20,216 --> 0:45:21,946
us take all of those scrollable

1797
00:45:21,946 --> 0:45:23,466
regions that we were previously

1798
00:45:23,466 --> 0:45:25,746
micromanaging and flatten them

1799
00:45:25,936 --> 0:45:27,956
into a single CollectionView at

1800
00:45:27,956 --> 0:45:28,576
the top level.

1801
00:45:28,576 --> 0:45:31,336
All the while, our code has

1802
00:45:31,336 --> 0:45:34,086
become more concise, easy to

1803
00:45:34,086 --> 0:45:36,286
reason about, as well as easier

1804
00:45:36,286 --> 0:45:37,736
to maintain going forward.

1805
00:45:40,016 --> 0:45:41,466
Compositional layout has

1806
00:45:41,526 --> 0:45:42,966
reimagined the way that we think

1807
00:45:42,966 --> 0:45:44,686
about CollectionViews in our own

1808
00:45:44,686 --> 0:45:46,546
application, and we can't wait

1809
00:45:46,546 --> 0:45:47,756
to see how it enhances the

1810
00:45:47,756 --> 0:45:49,436
experience for the apps that all

1811
00:45:49,436 --> 0:45:50,756
of you bring to the App Store.

1812
00:45:50,756 --> 0:45:51,936
Back to you, Troy.

1813
00:45:52,516 --> 0:45:57,546
[ Applause ]

1814
00:45:58,046 --> 0:45:58,556
&gt;&gt; Troy Stephens: Thank you so

1815
00:45:58,556 --> 0:45:59,206
much, Dersu.

1816
00:45:59,206 --> 0:46:00,386
Boy, that is a beautiful

1817
00:45:59,206 --> 0:46:00,386
Boy, that is a beautiful

1818
00:46:00,386 --> 0:46:00,996
redesign.

1819
00:46:01,376 --> 0:46:02,996
And we couldn't be more thrilled

1820
00:46:03,116 --> 0:46:04,406
to see compositional layout

1821
00:46:04,436 --> 0:46:05,816
already making a difference

1822
00:46:06,236 --> 0:46:07,346
simplifying the development

1823
00:46:07,346 --> 0:46:08,926
process for one of our prominent

1824
00:46:08,926 --> 0:46:10,446
user-facing apps.

1825
00:46:10,446 --> 0:46:13,046
And I'm so happy to be making

1826
00:46:13,046 --> 0:46:14,556
the same API available to

1827
00:46:14,556 --> 0:46:16,756
developers across our platforms.

1828
00:46:17,186 --> 0:46:18,516
Speaking of which, I'd like to

1829
00:46:18,516 --> 0:46:19,986
show you a real quick demo of

1830
00:46:19,986 --> 0:46:21,396
compositional layout working

1831
00:46:21,396 --> 0:46:23,866
with NSCollectionView on Mac OS.

1832
00:46:29,596 --> 0:46:31,086
So when you open the sample

1833
00:46:31,086 --> 0:46:32,316
project that you downloaded in

1834
00:46:32,316 --> 0:46:34,196
Xcode, notice that there's a

1835
00:46:34,196 --> 0:46:35,686
build scheme and target for the

1836
00:46:35,686 --> 0:46:35,866
Mac.

1837
00:46:36,196 --> 0:46:37,596
And we're going to build and run

1838
00:46:37,596 --> 0:46:37,976
that here.

1839
00:46:42,126 --> 0:46:43,656
And let's just open up all of

1840
00:46:43,656 --> 0:46:45,206
our layout examples that we

1841
00:46:45,206 --> 0:46:47,016
looked at in this talk, and

1842
00:46:47,016 --> 0:46:47,816
we'll fan them out.

1843
00:46:51,276 --> 0:46:52,046
So here we go.

1844
00:46:52,046 --> 0:46:53,096
Here they are, our various

1845
00:46:53,096 --> 0:46:54,376
compositional layout examples.

1846
00:46:54,696 --> 0:46:55,876
And these are essentially just

1847
00:46:55,876 --> 0:46:57,326
the same code that we use.

1848
00:46:57,326 --> 0:46:58,916
We're programming to the same

1849
00:46:58,916 --> 0:46:59,356
API's.

1850
00:46:59,686 --> 0:47:00,536
The only adjustments you're

1851
00:46:59,686 --> 0:47:00,536
The only adjustments you're

1852
00:47:00,536 --> 0:47:01,636
really going to see are for

1853
00:47:01,636 --> 0:47:03,816
metrics where we wanted to apply

1854
00:47:03,816 --> 0:47:05,336
more macOS-appropriate metrics

1855
00:47:05,336 --> 0:47:05,896
for things.

1856
00:47:05,896 --> 0:47:07,816
But we have orthogonal scrolling

1857
00:47:07,816 --> 0:47:08,666
working here.

1858
00:47:10,176 --> 0:47:12,786
And, of course, on the Mac we

1859
00:47:12,786 --> 0:47:13,836
expect things to behave in

1860
00:47:13,836 --> 0:47:14,636
Mac-like ways.

1861
00:47:14,636 --> 0:47:15,396
And one of the things that can

1862
00:47:15,396 --> 0:47:16,396
happen with CollectionViews on

1863
00:47:16,396 --> 0:47:17,636
the Mac is they're continually

1864
00:47:17,636 --> 0:47:19,066
resizable usually, right?

1865
00:47:19,446 --> 0:47:21,546
So we've got -- we've made sure

1866
00:47:21,546 --> 0:47:23,286
that resize is nice and fast,

1867
00:47:24,176 --> 0:47:25,296
super light-weight, these

1868
00:47:25,506 --> 0:47:27,286
layouts reevaluate very quickly.

1869
00:47:27,286 --> 0:47:29,156
And our adaptive sections layout

1870
00:47:29,246 --> 0:47:30,556
has a layout break just like

1871
00:47:30,556 --> 0:47:31,076
before.

1872
00:47:31,076 --> 0:47:32,606
And now that you know how this

1873
00:47:32,606 --> 0:47:33,886
works, you can easily add

1874
00:47:33,886 --> 0:47:35,126
additional layout breaks for

1875
00:47:35,126 --> 0:47:36,876
wider window widths and screen

1876
00:47:36,876 --> 0:47:37,546
widths if you want.

1877
00:47:38,226 --> 0:47:40,386
Of course, we have features like

1878
00:47:40,386 --> 0:47:41,496
being able to click items to

1879
00:47:41,496 --> 0:47:42,116
select them.

1880
00:47:42,626 --> 0:47:44,626
I can use the arrow keys and

1881
00:47:44,626 --> 0:47:45,656
navigate around.

1882
00:47:46,446 --> 0:47:47,756
I can hold down the shift key

1883
00:47:47,756 --> 0:47:48,736
while arrowing around to

1884
00:47:48,736 --> 0:47:49,926
accumulate a selection.

1885
00:47:50,516 --> 0:47:53,546
[ Applause ]

1886
00:47:54,046 --> 0:47:55,296
And, of course, I can drag to

1887
00:47:55,296 --> 0:47:56,026
rubber band select.

1888
00:47:56,026 --> 0:47:57,266
I can bulk select items.

1889
00:47:57,266 --> 0:47:58,986
And this works in any old

1890
00:47:58,986 --> 0:48:00,536
compositional layout, including

1891
00:47:58,986 --> 0:48:00,536
compositional layout, including

1892
00:48:00,536 --> 0:48:01,976
more advanced ones like this.

1893
00:48:02,016 --> 0:48:03,076
[ Applause ]

1894
00:48:03,076 --> 0:48:05,906
So all the stuff that users

1895
00:48:05,906 --> 0:48:07,386
would expect on the Mac.

1896
00:48:07,386 --> 0:48:08,786
And we've got all these layouts

1897
00:48:09,236 --> 0:48:09,606
running.

1898
00:48:09,896 --> 0:48:11,976
And enough of the code down

1899
00:48:11,976 --> 0:48:13,346
below, the item section and

1900
00:48:13,346 --> 0:48:15,836
group descriptions is in common

1901
00:48:15,836 --> 0:48:17,426
in terms of the API that's used.

1902
00:48:17,426 --> 0:48:18,586
You could even factor out code

1903
00:48:18,586 --> 0:48:19,816
if you want and share code

1904
00:48:19,816 --> 0:48:21,246
between your different platform

1905
00:48:21,246 --> 0:48:22,336
projects if you want to.

1906
00:48:23,396 --> 0:48:24,846
So we can see that compositional

1907
00:48:24,846 --> 0:48:26,796
layout is really here to make

1908
00:48:26,796 --> 0:48:29,686
our lives a lot easier across

1909
00:48:29,686 --> 0:48:30,896
our various platforms.

1910
00:48:31,026 --> 0:48:33,096
And it really has a lot to

1911
00:48:33,096 --> 0:48:33,766
recommend it.

1912
00:48:34,406 --> 0:48:35,806
It's available for you to start

1913
00:48:35,806 --> 0:48:39,156
using today on iOS, tvOS, and

1914
00:48:39,156 --> 0:48:39,856
macOS.

1915
00:48:39,856 --> 0:48:41,566
And it makes it incredibly easy

1916
00:48:41,836 --> 0:48:43,966
to create new custom layouts for

1917
00:48:43,966 --> 0:48:46,006
CollectionView to use by simply

1918
00:48:46,006 --> 0:48:46,816
describing it.

1919
00:48:46,816 --> 0:48:47,756
We think this is a big

1920
00:48:47,756 --> 0:48:48,546
game-changer.

1921
00:48:49,436 --> 0:48:50,386
This in turn makes

1922
00:48:50,386 --> 0:48:51,766
CollectionView an even more

1923
00:48:51,846 --> 0:48:53,636
versatile tool than ever before

1924
00:48:53,636 --> 0:48:55,816
for presenting your content in

1925
00:48:55,816 --> 0:48:57,916
arbitrary ways however you want

1926
00:48:57,916 --> 0:48:58,236
to.

1927
00:48:58,926 --> 0:49:00,176
And the ease with which you can

1928
00:48:58,926 --> 0:49:00,176
And the ease with which you can

1929
00:49:00,176 --> 0:49:02,116
describe new layouts, and adjust

1930
00:49:02,116 --> 0:49:03,066
layouts, and make different

1931
00:49:03,066 --> 0:49:04,216
changes, and try different

1932
00:49:04,216 --> 0:49:05,556
things, and iterate on them is

1933
00:49:05,606 --> 0:49:08,396
going to enable much faster

1934
00:49:08,526 --> 0:49:10,266
iteration with your designers.

1935
00:49:10,606 --> 0:49:12,016
So we think this is a really big

1936
00:49:12,016 --> 0:49:12,786
game-changer.

1937
00:49:14,256 --> 0:49:15,606
So go out, take the sample

1938
00:49:15,606 --> 0:49:17,806
project, experiment with it, try

1939
00:49:17,846 --> 0:49:19,946
changing various things, use our

1940
00:49:19,946 --> 0:49:21,746
code as a basis for yours and

1941
00:49:21,746 --> 0:49:23,606
start working on the custom

1942
00:49:23,606 --> 0:49:25,266
layouts for your next app

1943
00:49:25,266 --> 0:49:25,686
versions.

1944
00:49:25,956 --> 0:49:27,026
And we can't wait to see the

1945
00:49:27,026 --> 0:49:28,696
delightful user experiences that

1946
00:49:28,696 --> 0:49:29,986
this is going to empower you to

1947
00:49:29,986 --> 0:49:31,886
create in a fraction of the

1948
00:49:31,886 --> 0:49:32,326
time.

1949
00:49:33,356 --> 0:49:34,426
Now, if you found this talk

1950
00:49:34,426 --> 0:49:35,766
exciting, we've got another that

1951
00:49:35,766 --> 0:49:36,616
I think you're really going to

1952
00:49:36,616 --> 0:49:37,696
love, especially if you work

1953
00:49:37,696 --> 0:49:39,316
with collection views or even UI

1954
00:49:39,316 --> 0:49:40,046
table views.

1955
00:49:40,286 --> 0:49:42,486
In Advances in UI Data Sources

1956
00:49:42,806 --> 0:49:44,816
we introduce an entirely new

1957
00:49:45,006 --> 0:49:47,126
radically simpler API for

1958
00:49:47,126 --> 0:49:48,806
feeding model data to your

1959
00:49:48,806 --> 0:49:50,446
CollectionViews and your UI

1960
00:49:50,446 --> 0:49:52,016
table views while getting

1961
00:49:52,016 --> 0:49:53,266
automatic computation of

1962
00:49:53,266 --> 0:49:54,646
differences and automatic

1963
00:49:54,646 --> 0:49:55,596
animations for free.

1964
00:49:55,596 --> 0:49:56,666
It's going to create delightful

1965
00:49:56,666 --> 0:49:57,666
users experiences.

1966
00:49:57,666 --> 0:49:59,276
So make sure to check this

1967
00:49:59,276 --> 0:49:59,876
session out.

1968
00:50:01,046 --> 0:50:02,546
Thank you so much for watching.

1969
00:50:03,508 --> 0:50:05,508
[ Applause ]
