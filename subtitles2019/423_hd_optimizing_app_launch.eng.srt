1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:07,516 --> 0:00:13,046
[ Applause ]

3
00:00:13,546 --> 0:00:14,946
&gt;&gt; Hello everyone, my name is

4
00:00:14,946 --> 0:00:16,216
Spencer Lewson, and I'm an

5
00:00:16,216 --> 0:00:17,876
engineer on the Performance Team

6
00:00:18,046 --> 0:00:18,566
here at Apple.

7
00:00:19,446 --> 0:00:21,116
Today I'm very excited to tell

8
00:00:21,116 --> 0:00:22,666
you about how you can optimize

9
00:00:22,816 --> 0:00:23,786
your app's launch.

10
00:00:24,336 --> 0:00:27,196
We'll be covering these four

11
00:00:27,196 --> 0:00:28,006
main topics today.

12
00:00:28,746 --> 0:00:30,686
First, what is launch?

13
00:00:31,256 --> 0:00:32,076
What are the different types of

14
00:00:32,076 --> 0:00:33,516
launches and how do we break

15
00:00:33,516 --> 0:00:34,946
them down into their different

16
00:00:34,946 --> 0:00:35,486
subphases?

17
00:00:36,576 --> 0:00:37,906
Next, we'll be talking about how

18
00:00:37,906 --> 0:00:39,216
to properly measure your app's

19
00:00:39,216 --> 0:00:39,626
launch.

20
00:00:40,646 --> 0:00:42,356
Out in the field, iOS devices

21
00:00:42,356 --> 0:00:43,366
can be in a variety of different

22
00:00:43,436 --> 0:00:46,226
states and conditions, and these

23
00:00:46,226 --> 0:00:48,126
states and conditions can

24
00:00:48,126 --> 0:00:49,546
produce inconsistent launch

25
00:00:49,546 --> 0:00:49,886
results.

26
00:00:50,566 --> 0:00:51,656
So, it's important to understand

27
00:00:51,656 --> 0:00:53,136
these states and how to reduce

28
00:00:53,176 --> 0:00:54,236
their impact when you're taking

29
00:00:54,236 --> 0:00:54,596
measurements.

30
00:00:55,266 --> 0:00:58,826
Once you've done that, you can

31
00:00:58,826 --> 0:00:59,866
take a look at how to use

32
00:01:00,006 --> 0:01:02,106
Instruments to profile and

33
00:01:02,106 --> 0:01:03,476
understand your app to find

34
00:01:03,476 --> 0:01:04,806
opportunities to improve it.

35
00:01:06,026 --> 0:01:07,296
And finally, we'll leave you

36
00:01:07,346 --> 0:01:09,406
with some tips and some tricks on how

37
00:01:09,406 --> 0:01:10,616
to monitor your app's launch,

38
00:01:10,976 --> 0:01:12,856
both over time and in the field,

39
00:01:13,316 --> 0:01:14,806
to ensure that you consistently

40
00:01:14,806 --> 0:01:16,746
deliver a delightful experience

41
00:01:17,056 --> 0:01:17,866
to all of your users.

42
00:01:17,866 --> 0:01:21,356
So, what is that app launch I

43
00:01:21,616 --> 0:01:22,466
was talking about?

44
00:01:23,226 --> 0:01:25,626
Well, app launch is a user

45
00:01:25,626 --> 0:01:26,626
experience interruption.

46
00:01:27,966 --> 0:01:28,996
What do I mean by this?

47
00:01:29,536 --> 0:01:30,076
Let's take a look.

48
00:01:31,126 --> 0:01:34,136
Okay, ready, set, go.

49
00:01:38,186 --> 0:01:40,546
Wow, on the iPhone 6S Plus,

50
00:01:41,176 --> 0:01:43,366
launch took nearly 2.5 seconds,

51
00:01:44,176 --> 0:01:45,736
and this wasn't as delightful as

52
00:01:45,736 --> 0:01:46,946
our users expect it to be.

53
00:01:48,326 --> 0:01:49,736
You know, it's really important

54
00:01:49,736 --> 0:01:50,676
for launch to be delightful,

55
00:01:51,326 --> 0:01:52,396
because it happens a lot.

56
00:01:53,276 --> 0:01:55,746
In fact, across all iOS devices,

57
00:01:56,316 --> 0:01:58,176
it happens billions of times a

58
00:01:58,176 --> 0:01:58,436
day.

59
00:01:59,666 --> 0:02:00,336
So, we did some number

60
00:01:59,666 --> 0:02:00,336
So, we did some number

61
00:02:00,336 --> 0:02:02,286
crunching, and we figured out

62
00:02:02,286 --> 0:02:03,916
that with we save only one

63
00:02:03,916 --> 0:02:05,476
millisecond on each of those

64
00:02:05,476 --> 0:02:07,586
launches, we would save an

65
00:02:07,586 --> 0:02:12,186
astounding 162 days of launch

66
00:02:13,196 --> 0:02:15,026
time, yes, in other words,

67
00:02:16,506 --> 0:02:18,236
[applause] thank you, in other

68
00:02:18,236 --> 0:02:19,916
words, that's the amount of time

69
00:02:19,916 --> 0:02:22,356
it takes to send a rocket to

70
00:02:22,356 --> 0:02:22,886
Mars.

71
00:02:23,626 --> 0:02:26,246
But it's also important for a

72
00:02:26,246 --> 0:02:27,236
number of other reasons.

73
00:02:27,926 --> 0:02:31,626
First of all, your app's launch

74
00:02:31,706 --> 0:02:33,176
is your user, first experience

75
00:02:33,176 --> 0:02:35,216
with your app, and as such, it

76
00:02:35,216 --> 0:02:35,946
should be delightful.

77
00:02:37,236 --> 0:02:38,646
Now it's important to remember

78
00:02:38,646 --> 0:02:40,326
that as developers, we tend to

79
00:02:40,326 --> 0:02:41,796
gravitate towards newer devices.

80
00:02:42,706 --> 0:02:43,766
So, it's important to ensure

81
00:02:43,906 --> 0:02:45,126
that the experience that you see

82
00:02:45,126 --> 0:02:46,876
in your hand is the same

83
00:02:46,876 --> 0:02:48,146
experience that the customers,

84
00:02:48,626 --> 0:02:50,386
that your users, have in their

85
00:02:50,386 --> 0:02:52,506
hands on different iOS devices

86
00:02:53,016 --> 0:02:55,606
and under different conditions.

87
00:02:57,356 --> 0:02:59,726
Furthermore, launch covers a

88
00:02:59,726 --> 0:03:01,026
huge part of your code base,

89
00:02:59,726 --> 0:03:01,026
huge part of your code base,

90
00:03:01,716 --> 0:03:02,736
from primer coating, to

91
00:03:02,736 --> 0:03:04,476
initialization, to view

92
00:03:04,476 --> 0:03:05,646
creation, and more.

93
00:03:06,316 --> 0:03:08,076
And as such, if you're seen that

94
00:03:08,076 --> 0:03:09,976
your launch isn't as delightful

95
00:03:10,196 --> 0:03:11,546
as your users expected to be,

96
00:03:12,226 --> 0:03:13,436
this might be indicative that

97
00:03:13,436 --> 0:03:14,496
there's other parts of your code

98
00:03:14,496 --> 0:03:17,086
base that are delightful, as

99
00:03:17,776 --> 0:03:17,896
well.

100
00:03:18,066 --> 0:03:19,686
Finally, launch is a very

101
00:03:19,686 --> 0:03:20,726
intense time for the phone.

102
00:03:21,456 --> 0:03:23,326
Involves a lot of CPU work and a

103
00:03:23,326 --> 0:03:24,046
lot of memory work.

104
00:03:24,956 --> 0:03:25,846
So, you should try to reduce

105
00:03:25,906 --> 0:03:27,486
this as it impacts the system

106
00:03:27,486 --> 0:03:29,126
performance, and of course, your

107
00:03:29,316 --> 0:03:30,306
user's battery life.

108
00:03:30,736 --> 0:03:33,496
So, let's take a look at those

109
00:03:33,696 --> 0:03:34,886
launches I talked about before,

110
00:03:35,386 --> 0:03:38,216
there's a cold launch, a warm

111
00:03:38,216 --> 0:03:40,386
launch, and something is often

112
00:03:40,696 --> 0:03:42,056
referred to as launch, but isn't

113
00:03:42,056 --> 0:03:43,216
quite a launch, a resume.

114
00:03:45,616 --> 0:03:47,166
Cold launches occur after

115
00:03:47,166 --> 0:03:49,316
reboot, or when your app has not

116
00:03:49,316 --> 0:03:50,456
been launched for very long

117
00:03:50,456 --> 0:03:50,666
time.

118
00:03:52,116 --> 0:03:54,106
In order to launcher app, we

119
00:03:54,106 --> 0:03:55,436
need to bring it from disk into

120
00:03:55,436 --> 0:03:57,666
memory, startup system-side

121
00:03:57,666 --> 0:03:58,906
services that support your app,

122
00:03:58,906 --> 0:04:00,816
and then spawn your process.

123
00:03:58,906 --> 0:04:00,816
and then spawn your process.

124
00:04:02,266 --> 0:04:03,616
As you'd expect, this can take a

125
00:04:03,616 --> 0:04:05,886
little time, but fortunately,

126
00:04:05,916 --> 0:04:07,546
once it's happened once, you'll

127
00:04:07,546 --> 0:04:09,006
experience a warm launch.

128
00:04:09,576 --> 0:04:12,496
In this case, your app still

129
00:04:12,496 --> 0:04:14,516
needs to be spawned, but we've

130
00:04:14,516 --> 0:04:15,916
already brought your app into

131
00:04:15,916 --> 0:04:17,565
memory and started up some of

132
00:04:17,565 --> 0:04:18,896
those system-side services.

133
00:04:19,426 --> 0:04:20,255
So, this will be a little bit

134
00:04:20,255 --> 0:04:21,416
faster and a little bit more

135
00:04:21,416 --> 0:04:22,036
consistent.

136
00:04:23,676 --> 0:04:25,206
Finally, there's that resume.

137
00:04:26,256 --> 0:04:28,536
This occurs when a user reenters

138
00:04:28,536 --> 0:04:30,066
your app from either the home

139
00:04:30,066 --> 0:04:31,306
screen or the app switcher.

140
00:04:32,336 --> 0:04:33,926
As you know, the app is already

141
00:04:33,926 --> 0:04:35,546
launched at this point, so it's

142
00:04:35,546 --> 0:04:36,786
going to be very fast.

143
00:04:38,146 --> 0:04:39,066
What you need to remember from

144
00:04:39,066 --> 0:04:41,256
this is not to confuse resumes

145
00:04:41,396 --> 0:04:42,716
with launches when you're taking

146
00:04:42,716 --> 0:04:43,116
measurements.

147
00:04:43,906 --> 0:04:46,436
So, given this information,

148
00:04:46,936 --> 0:04:49,986
wouldn't it be great if launches

149
00:04:50,696 --> 0:04:56,006
were as quick and as delightful

150
00:04:56,516 --> 0:04:57,096
as resumes?

151
00:04:57,826 --> 0:05:00,676
How can we achieve that?

152
00:04:57,826 --> 0:05:00,676
How can we achieve that?

153
00:05:02,036 --> 0:05:04,146
Well, we need to hit the goal of

154
00:05:04,146 --> 0:05:05,486
rendering our first frame within

155
00:05:05,626 --> 0:05:06,906
400 milliseconds.

156
00:05:08,066 --> 0:05:09,266
That's so that we have pixels

157
00:05:09,266 --> 0:05:10,866
displayed to the user during the

158
00:05:10,866 --> 0:05:13,116
launch animation, and by the

159
00:05:13,116 --> 0:05:14,136
time that launch animation is

160
00:05:14,136 --> 0:05:15,796
complete, your app is

161
00:05:15,796 --> 0:05:17,506
interactive and responsive.

162
00:05:18,096 --> 0:05:20,346
The first step to doing that is

163
00:05:20,346 --> 0:05:21,676
understanding what is happening

164
00:05:21,676 --> 0:05:22,296
during launch.

165
00:05:22,866 --> 0:05:24,666
So, let's launch Maps.

166
00:05:26,496 --> 0:05:28,126
As you know, launch generally

167
00:05:28,126 --> 0:05:29,606
starts when the user taps your

168
00:05:29,606 --> 0:05:32,236
icon on your home screen.

169
00:05:32,406 --> 0:05:34,316
Then over the next 100 or so

170
00:05:34,316 --> 0:05:36,136
milliseconds, iOS will do the

171
00:05:36,136 --> 0:05:37,916
necessary system-side work in

172
00:05:37,916 --> 0:05:39,746
order to initialize your app.

173
00:05:40,456 --> 0:05:42,386
That leaves you as developers

174
00:05:42,786 --> 0:05:45,276
about 300 milliseconds to create

175
00:05:45,276 --> 0:05:46,846
your views, load your content,

176
00:05:46,846 --> 0:05:48,206
and generate your first frame.

177
00:05:49,716 --> 0:05:51,506
Now this frame doesn't

178
00:05:51,506 --> 0:05:52,876
necessarily need to be fully

179
00:05:52,876 --> 0:05:53,316
complete.

180
00:05:53,316 --> 0:05:55,056
It can have some placeholders

181
00:05:55,226 --> 0:05:56,456
for asynchronously loading data,

182
00:05:57,716 --> 0:05:58,996
but at this point, your app

183
00:05:58,996 --> 0:06:00,706
should be interactive and

184
00:05:58,996 --> 0:06:00,706
should be interactive and

185
00:06:00,706 --> 0:06:01,356
responsive.

186
00:06:02,536 --> 0:06:04,936
So, in the case of Maps, all the

187
00:06:04,936 --> 0:06:06,106
tiles have not yet loaded.

188
00:06:06,526 --> 0:06:07,586
You can still initiate your

189
00:06:07,586 --> 0:06:09,116
search and browse your

190
00:06:09,876 --> 0:06:10,086
favorites.

191
00:06:10,656 --> 0:06:11,986
Then over the next couple

192
00:06:11,986 --> 0:06:13,786
hundred milliseconds, you can

193
00:06:13,786 --> 0:06:15,006
display that asynchronously

194
00:06:15,006 --> 0:06:16,636
loaded data and generate your

195
00:06:16,636 --> 0:06:17,646
final frame for your user.

196
00:06:18,636 --> 0:06:19,646
Let's take a closer look at

197
00:06:19,646 --> 0:06:19,976
these phases.

198
00:06:24,156 --> 0:06:25,316
These six phases cover

199
00:06:25,316 --> 0:06:26,546
everything from system

200
00:06:26,546 --> 0:06:28,676
initialization to the app

201
00:06:28,676 --> 0:06:30,846
initialization to view creation

202
00:06:30,846 --> 0:06:32,716
and layout, and then depending

203
00:06:32,716 --> 0:06:34,576
on your app, potentially a

204
00:06:34,576 --> 0:06:36,736
asynchronous loading phase for

205
00:06:37,036 --> 0:06:37,976
your data, the extended phase.

206
00:06:42,086 --> 0:06:43,256
The first half of system

207
00:06:43,256 --> 0:06:44,666
interface is dyld.

208
00:06:44,726 --> 0:06:47,476
For those of you unfamiliar, a

209
00:06:47,476 --> 0:06:49,356
dynamic linker loads your shared

210
00:06:49,356 --> 0:06:50,536
libraries and frameworks.

211
00:06:52,156 --> 0:06:56,256
Now in 2017, we introduced dyld

212
00:06:56,296 --> 0:06:58,636
3, which added exciting

213
00:06:58,636 --> 0:07:00,026
optimizations to the system.

214
00:06:58,636 --> 0:07:00,026
optimizations to the system.

215
00:07:01,096 --> 0:07:02,026
Well, we're happy to announce

216
00:07:02,026 --> 0:07:03,906
that in iOS 13, we're bringing

217
00:07:03,906 --> 0:07:05,606
these optimizations to your

218
00:07:05,846 --> 0:07:05,966
apps.

219
00:07:07,176 --> 0:07:08,726
That means we are now caching

220
00:07:08,726 --> 0:07:10,166
your runtime dependencies, or

221
00:07:10,166 --> 0:07:11,766
warm launches, which should give

222
00:07:11,766 --> 0:07:13,106
them a significant speed

223
00:07:13,106 --> 0:07:13,486
improvement [applause].

224
00:07:13,956 --> 0:07:15,446
Thank you.

225
00:07:21,066 --> 0:07:22,566
Now with a new linker, comes

226
00:07:22,566 --> 0:07:23,606
some new recommendations.

227
00:07:24,846 --> 0:07:26,126
To take full advantage of these

228
00:07:26,126 --> 0:07:28,606
new improvements, we recommend

229
00:07:28,606 --> 0:07:30,276
that you avoid linking unused

230
00:07:30,276 --> 0:07:31,626
frameworks, as this can have

231
00:07:31,626 --> 0:07:32,786
hidden costs, which we'll show

232
00:07:32,786 --> 0:07:33,136
you later.

233
00:07:34,646 --> 0:07:37,186
We also recommend that you avoid

234
00:07:37,186 --> 0:07:39,236
dynamic library loading, such as

235
00:07:39,236 --> 0:07:42,086
DLOpen or NSbundleLoad, because

236
00:07:42,166 --> 0:07:43,666
this forfeits those wins you

237
00:07:43,666 --> 0:07:44,916
would have gotten by having

238
00:07:44,916 --> 0:07:46,516
those in your cache.

239
00:07:47,816 --> 0:07:49,216
Finally, that means that you

240
00:07:49,216 --> 0:07:51,386
should be hard linking all of

241
00:07:51,386 --> 0:07:52,786
your dependencies, as it's now

242
00:07:52,916 --> 0:07:54,676
even faster than it was before.

243
00:07:57,456 --> 0:07:58,886
The second half of system

244
00:07:58,886 --> 0:08:00,476
interface is libSystemInit.

245
00:07:58,886 --> 0:08:00,476
interface is libSystemInit.

246
00:08:01,616 --> 0:08:02,716
This is when we initialize the

247
00:08:02,716 --> 0:08:04,376
low-level system components

248
00:08:04,376 --> 0:08:05,336
within your application.

249
00:08:06,436 --> 0:08:08,106
Now this is mostly system-side

250
00:08:08,106 --> 0:08:09,556
work with a fixed cost.

251
00:08:10,336 --> 0:08:11,446
So, use developers don't need to

252
00:08:11,446 --> 0:08:11,976
focus on the section.

253
00:08:15,106 --> 0:08:16,286
Now we have static runtime

254
00:08:16,286 --> 0:08:16,956
initialization.

255
00:08:18,496 --> 0:08:19,406
This is when the system

256
00:08:19,406 --> 0:08:21,386
initializes your Objective-C and

257
00:08:21,386 --> 0:08:22,136
Swift run times.

258
00:08:23,666 --> 0:08:25,006
Now in general, your app

259
00:08:25,006 --> 0:08:26,136
shouldn't be doing any work here

260
00:08:26,706 --> 0:08:27,406
unless you have static

261
00:08:27,406 --> 0:08:29,416
initializer methods, which are

262
00:08:29,416 --> 0:08:30,816
possibly present in your code,

263
00:08:31,436 --> 0:08:33,446
or more likely, a surprise from

264
00:08:33,446 --> 0:08:35,246
the frameworks that you link.

265
00:08:36,056 --> 0:08:37,666
In general, we don't recommend

266
00:08:37,666 --> 0:08:38,626
static initialization.

267
00:08:38,626 --> 0:08:40,395
So, let's take a moment to talk

268
00:08:40,395 --> 0:08:42,186
about how to reduce its impact.

269
00:08:43,376 --> 0:08:45,016
If you own a framework which

270
00:08:45,016 --> 0:08:46,336
uses static initialization,

271
00:08:46,686 --> 0:08:48,916
consider exposing API to

272
00:08:48,916 --> 0:08:50,076
initialize your stack early.

273
00:08:50,716 --> 0:08:52,636
But if you must use static

274
00:08:52,636 --> 0:08:54,916
initialization, consider moving

275
00:08:54,916 --> 0:08:56,966
code out of class load which is

276
00:08:56,966 --> 0:08:59,366
invoked every time during launch

277
00:09:00,226 --> 0:09:01,906
to class initialize, which is

278
00:09:01,906 --> 0:09:03,646
lazily invoked the first time

279
00:09:03,646 --> 0:09:06,316
you use a method within your

280
00:09:07,936 --> 0:09:08,066
class.

281
00:09:08,246 --> 0:09:09,946
Next up is UIKit Initialization.

282
00:09:11,266 --> 0:09:12,156
This is when the system

283
00:09:12,186 --> 0:09:13,896
instantiates your UIApplication

284
00:09:13,896 --> 0:09:15,896
and your UIApplicationDelegate.

285
00:09:16,566 --> 0:09:18,646
For the most part, this is

286
00:09:18,646 --> 0:09:20,036
system-side work, setting up

287
00:09:20,036 --> 0:09:21,606
event processing and integration

288
00:09:21,606 --> 0:09:22,206
with the system.

289
00:09:23,256 --> 0:09:24,226
But you can still effect this

290
00:09:24,226 --> 0:09:26,996
phase if you subclass

291
00:09:26,996 --> 0:09:29,876
UIApplication or you do any work

292
00:09:30,056 --> 0:09:31,226
in UIApplicationDelegate

293
00:09:31,326 --> 0:09:31,926
initializers.

294
00:09:32,646 --> 0:09:35,746
Now we have application

295
00:09:35,746 --> 0:09:36,516
initialization.

296
00:09:37,436 --> 0:09:38,476
This is where the good stuff is.

297
00:09:38,896 --> 0:09:40,136
This is where you as developers

298
00:09:40,136 --> 0:09:40,996
can likely have the biggest

299
00:09:40,996 --> 0:09:42,226
impact on your app's

300
00:09:42,226 --> 0:09:42,706
launch.

301
00:09:43,246 --> 0:09:45,586
For those of you who have not

302
00:09:45,586 --> 0:09:47,826
yet adopted the new UIC in APIs

303
00:09:49,146 --> 0:09:50,326
or are targeting iOS 12 or

304
00:09:50,326 --> 0:09:53,356
earlier, Application Init works,

305
00:09:54,116 --> 0:09:55,766
again, with these delegate

306
00:09:55,766 --> 0:09:56,426
call-back methods.

307
00:09:57,186 --> 0:09:57,736
application:

308
00:09:57,736 --> 0:09:58,946
willFinishLaunchingwithOptions,

309
00:09:59,276 --> 0:09:59,966
and application:

310
00:10:00,096 --> 0:10:01,216
didFinishLaunchingwithOptions.

311
00:10:01,956 --> 0:10:04,196
As your app is displayed to the

312
00:10:04,196 --> 0:10:06,286
user, the further methods,

313
00:10:07,006 --> 0:10:08,626
applicationDidBecomeActive: will

314
00:10:08,626 --> 0:10:09,036
be invoked.

315
00:10:10,176 --> 0:10:11,356
Now it's important to know that

316
00:10:11,356 --> 0:10:13,316
if you have not UIScenes, you

317
00:10:13,316 --> 0:10:14,116
should be creating your view

318
00:10:14,116 --> 0:10:15,246
controllers and

319
00:10:15,246 --> 0:10:16,546
didFinishLaunchingwithOptions.

320
00:10:17,686 --> 0:10:19,276
That's because with UIScene,

321
00:10:19,666 --> 0:10:21,546
ApplicationInit works a little

322
00:10:22,206 --> 0:10:23,216
bit differently.

323
00:10:23,216 --> 0:10:24,276
Now you will still get

324
00:10:24,276 --> 0:10:25,456
willFinishLaunching and

325
00:10:25,456 --> 0:10:26,726
didFinishLaunchingwithOptions,

326
00:10:27,546 --> 0:10:28,736
but as your app is displayed to

327
00:10:28,736 --> 0:10:30,126
the user, you will get the

328
00:10:30,126 --> 0:10:32,436
UISceneDelegate lifecycle

329
00:10:32,436 --> 0:10:32,836
callbacks.

330
00:10:34,116 --> 0:10:35,256
Those are, of course scene:

331
00:10:35,256 --> 0:10:35,986
willConnectwithSession with

332
00:10:35,986 --> 0:10:36,426
options.

333
00:10:36,846 --> 0:10:38,586
ScenewillEnterForeground, and

334
00:10:38,586 --> 0:10:39,446
sceneDidBecomeActive.

335
00:10:40,106 --> 0:10:41,666
You should be creating your view

336
00:10:41,666 --> 0:10:43,446
controllers, and scene:

337
00:10:43,446 --> 0:10:44,866
willConnecttoSessionwithOptions.

338
00:10:46,266 --> 0:10:48,016
It's important to note that you

339
00:10:48,016 --> 0:10:49,206
should be only creating your

340
00:10:49,206 --> 0:10:50,256
view controllers, and scene:

341
00:10:50,256 --> 0:10:51,406
willConnectToSessionwithOptions,

342
00:10:51,666 --> 0:10:52,836
and that also, and

343
00:10:52,836 --> 0:10:53,956
didFinishLaunchingwithOptions.

344
00:10:54,416 --> 0:10:55,956
That the common pitfall, which,

345
00:10:55,956 --> 0:10:56,656
of course, results in

346
00:10:56,656 --> 0:10:59,176
performance losses and, likely,

347
00:10:59,476 --> 0:11:01,826
unpredictable bugs in your code

348
00:10:59,476 --> 0:11:01,826
unpredictable bugs in your code

349
00:11:04,316 --> 0:11:04,426
base.

350
00:11:04,636 --> 0:11:05,716
Regardless of whether or not

351
00:11:05,846 --> 0:11:07,256
you've adopted the new UIScene

352
00:11:07,326 --> 0:11:09,196
APIs, our advice for this phase

353
00:11:09,196 --> 0:11:09,996
is generally the same.

354
00:11:09,996 --> 0:11:12,896
You should be deferring any

355
00:11:12,896 --> 0:11:14,456
unrelated work but it's not

356
00:11:14,456 --> 0:11:15,926
necessary to commit your first

357
00:11:15,926 --> 0:11:18,446
frame, by either pushing it to

358
00:11:18,446 --> 0:11:20,846
the background queues or just

359
00:11:20,846 --> 0:11:22,346
doing it later entirely.

360
00:11:25,096 --> 0:11:27,386
If you did adopt UIScenes, you

361
00:11:27,386 --> 0:11:28,886
can do one more thing, and

362
00:11:28,886 --> 0:11:29,746
that's make sure that you're

363
00:11:29,746 --> 0:11:31,056
sharing your resources between

364
00:11:31,056 --> 0:11:31,506
your Scenes.

365
00:11:32,126 --> 0:11:33,486
This is, of course, to reduce

366
00:11:33,486 --> 0:11:35,456
the overhead of doing any work

367
00:11:35,456 --> 0:11:37,766
unnecessarily multiple times.

368
00:11:38,696 --> 0:11:40,206
To learn more about UIScenes,

369
00:11:40,636 --> 0:11:41,446
please take a look at these two

370
00:11:41,446 --> 0:11:43,366
talks from earlier this week.

371
00:11:46,126 --> 0:11:47,156
Next is the first frame render

372
00:11:47,156 --> 0:11:47,456
phase.

373
00:11:48,446 --> 0:11:49,466
Now, this is relatively

374
00:11:49,466 --> 0:11:50,066
straightforward.

375
00:11:50,506 --> 0:11:51,776
This is when we create your

376
00:11:51,776 --> 0:11:53,666
views, perform layout, and then

377
00:11:53,666 --> 0:11:54,106
draw them.

378
00:11:55,236 --> 0:11:56,486
We then take that information,

379
00:11:56,956 --> 0:11:58,166
and we commit and render your

380
00:11:58,166 --> 0:11:59,586
first frame into nice, shiny

381
00:11:59,586 --> 0:11:59,956
pixels.

382
00:12:02,446 --> 0:12:03,816
You can affect this phase by

383
00:12:03,816 --> 0:12:05,876
reducing the number of views in

384
00:12:05,876 --> 0:12:06,406
your hierarchy.

385
00:12:06,446 --> 0:12:08,466
And you can do that by

386
00:12:08,656 --> 0:12:09,946
flattening your views to use

387
00:12:09,946 --> 0:12:13,156
less or by lazily loading views

388
00:12:13,546 --> 0:12:14,556
that are not shown during

389
00:12:14,556 --> 0:12:15,026
launch.

390
00:12:15,556 --> 0:12:17,616
You should also take a look at

391
00:12:17,616 --> 0:12:18,946
your auto layout and see if you

392
00:12:18,946 --> 0:12:19,966
can reduce the number of

393
00:12:19,966 --> 0:12:21,496
constraints you're using.

394
00:12:23,516 --> 0:12:25,096
Finally, we have the extended

395
00:12:25,096 --> 0:12:25,416
phase.

396
00:12:26,106 --> 0:12:27,776
This is the app-specific period

397
00:12:27,896 --> 0:12:29,786
from your first commit until

398
00:12:29,786 --> 0:12:31,386
when you show your final frame

399
00:12:31,386 --> 0:12:31,976
to your user.

400
00:12:33,016 --> 0:12:34,146
This is when you load that

401
00:12:34,146 --> 0:12:35,266
asynchronous data we talked

402
00:12:35,266 --> 0:12:35,506
about.

403
00:12:36,316 --> 0:12:38,086
Now not every app has this

404
00:12:38,706 --> 0:12:38,826
phase.

405
00:12:39,916 --> 0:12:41,546
But if you do have this phase,

406
00:12:42,736 --> 0:12:43,956
your app should be interactive

407
00:12:44,146 --> 0:12:44,876
and responsive.

408
00:12:45,436 --> 0:12:47,936
If you do have this phase, we

409
00:12:47,936 --> 0:12:49,366
only have general advice on how

410
00:12:49,366 --> 0:12:50,956
you should approach it, and that

411
00:12:50,956 --> 0:12:52,216
is to understand what is

412
00:12:52,216 --> 0:12:54,386
happening, and you can do that

413
00:12:54,386 --> 0:12:56,626
by leveraging OS signpost APIs

414
00:12:56,956 --> 0:12:58,506
to mark out and measure the work

415
00:12:58,506 --> 0:12:59,856
that occurs in between these two

416
00:12:59,856 --> 0:13:00,336
time periods.

417
00:12:59,856 --> 0:13:00,336
time periods.

418
00:13:04,476 --> 0:13:05,956
Now that we talked about what

419
00:13:05,956 --> 0:13:07,786
launch is, let's talk about how

420
00:13:07,786 --> 0:13:08,886
to get usable measurements.

421
00:13:11,556 --> 0:13:14,236
At any given time, an iOS device

422
00:13:14,236 --> 0:13:16,006
is under a variety of different

423
00:13:16,006 --> 0:13:17,836
states and conditions, and this

424
00:13:17,836 --> 0:13:19,066
can introduce substantial

425
00:13:19,066 --> 0:13:20,226
variance into launch.

426
00:13:21,166 --> 0:13:22,506
So, when we're analyzing and

427
00:13:22,506 --> 0:13:24,356
comparing our launch results,

428
00:13:24,846 --> 0:13:26,686
it's critical to ensure that

429
00:13:26,686 --> 0:13:27,896
we're making apples-to-apples

430
00:13:27,896 --> 0:13:30,106
comparisons, because how do you

431
00:13:30,106 --> 0:13:30,826
know if you're making any

432
00:13:30,876 --> 0:13:33,396
progress if before you make any

433
00:13:33,396 --> 0:13:35,146
changes, your launch results are

434
00:13:35,146 --> 0:13:36,356
completely unpredictable?

435
00:13:36,896 --> 0:13:38,866
The first step to making them

436
00:13:38,866 --> 0:13:40,546
predictable is removing those

437
00:13:40,546 --> 0:13:42,316
sources of variance, such as

438
00:13:42,316 --> 0:13:44,286
networking interference and

439
00:13:44,286 --> 0:13:45,236
interference in background

440
00:13:45,236 --> 0:13:45,816
processes.

441
00:13:47,126 --> 0:13:48,526
Now we realize that this sounds

442
00:13:48,576 --> 0:13:50,366
counterintuitive, as this may

443
00:13:50,366 --> 0:13:51,836
result in a launch that's not

444
00:13:51,836 --> 0:13:53,366
entirely representative of

445
00:13:53,366 --> 0:13:55,506
regular usage, but we wanted to

446
00:13:55,506 --> 0:13:57,276
let you know that that's okay.

447
00:13:58,356 --> 0:13:59,456
It's more important to have

448
00:13:59,566 --> 0:14:01,286
consistent results with which

449
00:13:59,566 --> 0:14:01,286
consistent results with which

450
00:14:01,286 --> 0:14:02,416
you can evaluate progress.

451
00:14:03,216 --> 0:14:05,366
At Apple, we've been using this

452
00:14:05,366 --> 0:14:07,186
technique to successfully detect

453
00:14:07,276 --> 0:14:08,666
regressions during development

454
00:14:09,186 --> 0:14:10,326
and drive down launch times.

455
00:14:11,106 --> 0:14:11,976
We then validate these

456
00:14:11,976 --> 0:14:13,736
performance improvements by

457
00:14:14,016 --> 0:14:15,626
using telemetry collected from

458
00:14:16,156 --> 0:14:17,406
the field.

459
00:14:17,586 --> 0:14:18,816
Fortunately, we have some tips

460
00:14:18,816 --> 0:14:20,076
on setting up that clean and

461
00:14:20,076 --> 0:14:21,066
consistent environment.

462
00:14:23,176 --> 0:14:25,146
First, reboot your device.

463
00:14:26,046 --> 0:14:26,976
This will clear out any

464
00:14:26,976 --> 0:14:28,616
unnecessary state, and then let

465
00:14:28,616 --> 0:14:29,996
it settle down over the next few

466
00:14:29,996 --> 0:14:31,506
minutes to clear up any boot

467
00:14:31,506 --> 0:14:31,956
time work.

468
00:14:34,256 --> 0:14:35,076
You could also reduce your

469
00:14:35,076 --> 0:14:37,126
dependence on the network by

470
00:14:37,126 --> 0:14:38,486
either turning on airplane mode

471
00:14:39,196 --> 0:14:40,306
or marking out your network

472
00:14:40,306 --> 0:14:41,446
dependencies in code.

473
00:14:42,496 --> 0:14:44,646
Networking can introduce a fair

474
00:14:44,646 --> 0:14:45,156
amount of variance.

475
00:14:45,926 --> 0:14:48,056
Next is iCloud.

476
00:14:49,176 --> 0:14:50,746
ICloud is a great feature which

477
00:14:50,776 --> 0:14:51,926
works in the background to

478
00:14:51,926 --> 0:14:53,436
deliver a seamless experience to

479
00:14:53,436 --> 0:14:55,726
our users, but that work in the

480
00:14:55,726 --> 0:14:57,116
background can interfere with

481
00:14:57,116 --> 0:14:57,776
app launch.

482
00:14:58,246 --> 0:14:59,236
So, during your measurements,

483
00:15:00,106 --> 0:15:01,536
using unchanging iCloud account

484
00:15:01,636 --> 0:15:04,446
with unchanging data, or log out

485
00:15:04,446 --> 0:15:05,746
of iCloud entirely.

486
00:15:06,296 --> 0:15:09,906
Next be sure to use the release

487
00:15:09,906 --> 0:15:12,456
build of your application when

488
00:15:12,456 --> 0:15:13,276
you're making measurements.

489
00:15:13,946 --> 0:15:17,646
This is, of course, to reduce

490
00:15:17,646 --> 0:15:19,306
the overhead of unnecessary

491
00:15:19,306 --> 0:15:20,536
debugging code during your

492
00:15:20,536 --> 0:15:22,796
measurements and to take

493
00:15:22,796 --> 0:15:24,196
advantage of the compile time

494
00:15:24,196 --> 0:15:24,946
optimizations.

495
00:15:26,276 --> 0:15:28,196
Finally, you should be measuring

496
00:15:28,246 --> 0:15:30,216
with warm launches, which as

497
00:15:30,216 --> 0:15:31,406
mentioned before, are more

498
00:15:31,406 --> 0:15:33,216
consistent, because some of your

499
00:15:33,216 --> 0:15:34,196
app may already be in memory,

500
00:15:34,996 --> 0:15:35,946
and some of those system-side

501
00:15:35,946 --> 0:15:37,506
services may already be running.

502
00:15:37,536 --> 0:15:41,786
Now we can set up some data to

503
00:15:41,786 --> 0:15:42,196
test with.

504
00:15:43,286 --> 0:15:44,716
It's important to create a mock

505
00:15:44,806 --> 0:15:46,136
data set which is consistent,

506
00:15:46,136 --> 0:15:48,296
and you might need a couple data

507
00:15:48,296 --> 0:15:49,366
sets for different types of

508
00:15:49,366 --> 0:15:51,376
users, such as users with small

509
00:15:51,376 --> 0:15:53,236
amounts of data and users with

510
00:15:53,336 --> 0:15:55,966
large amounts of data, though,

511
00:15:55,966 --> 0:15:58,406
in the ideal situation, your app

512
00:15:58,406 --> 0:15:59,906
should be able to scale to any

513
00:15:59,906 --> 0:16:00,486
amount of data.

514
00:15:59,906 --> 0:16:00,486
amount of data.

515
00:16:01,546 --> 0:16:02,826
That's why loading only the data

516
00:16:02,826 --> 0:16:04,066
that is necessary to show your

517
00:16:04,066 --> 0:16:04,716
first frame.

518
00:16:08,076 --> 0:16:09,056
Now we're ready to pick out some

519
00:16:09,056 --> 0:16:09,526
devices.

520
00:16:10,656 --> 0:16:11,906
You should pick out a variety of

521
00:16:11,906 --> 0:16:13,126
devices that are important to

522
00:16:13,126 --> 0:16:14,636
your users and then stick to

523
00:16:14,636 --> 0:16:15,626
them force consistency.

524
00:16:16,876 --> 0:16:18,466
Be sure to include your oldest

525
00:16:18,466 --> 0:16:19,416
devices for your

526
00:16:19,416 --> 0:16:20,686
oldest-supported releases.

527
00:16:21,436 --> 0:16:22,496
This is because performance

528
00:16:22,496 --> 0:16:24,186
characteristics look different

529
00:16:24,186 --> 0:16:26,136
between older devices and newer

530
00:16:26,136 --> 0:16:28,716
devices, which have different

531
00:16:29,196 --> 0:16:31,636
amounts of RAM and CPU cores.

532
00:16:32,936 --> 0:16:33,856
This will ensure that your

533
00:16:33,856 --> 0:16:35,776
launch is delightful for all of

534
00:16:35,776 --> 0:16:37,606
your users on all of their

535
00:16:37,606 --> 0:16:38,046
devices.

536
00:16:41,046 --> 0:16:41,836
Now we're ready to take some

537
00:16:41,836 --> 0:16:42,276
measurements.

538
00:16:43,576 --> 0:16:45,076
We can leverage the new XCTest

539
00:16:45,286 --> 0:16:46,916
for app launce performance in

540
00:16:46,916 --> 0:16:47,636
Xcode 11.

541
00:16:48,686 --> 0:16:49,936
With just a few lines of code,

542
00:16:50,506 --> 0:16:51,446
Xcode will launch your app

543
00:16:51,496 --> 0:16:53,716
repeatedly and then provide

544
00:16:53,796 --> 0:16:55,226
statistical results about how it

545
00:16:55,226 --> 0:16:55,626
performs.

546
00:16:56,856 --> 0:16:58,326
We'll talk about this more

547
00:16:58,326 --> 0:16:58,626
later.

548
00:17:01,466 --> 0:17:03,026
So, now we've talked about what

549
00:17:03,026 --> 0:17:05,326
launch is and how to measure it,

550
00:17:06,306 --> 0:17:07,546
let's talk a little bit about

551
00:17:07,546 --> 0:17:09,126
how to improve it.

552
00:17:10,516 --> 0:17:11,715
When you're reviewing your app's

553
00:17:11,715 --> 0:17:13,556
launch both in code and in

554
00:17:13,556 --> 0:17:15,136
instruments, you should keep

555
00:17:15,136 --> 0:17:16,376
these three tips and tricks in

556
00:17:16,376 --> 0:17:16,756
mind.

557
00:17:18,205 --> 0:17:20,066
That is to first minimize your

558
00:17:20,066 --> 0:17:22,226
work, then prioritize your work,

559
00:17:23,006 --> 0:17:25,205
and finally, optimize your work.

560
00:17:27,016 --> 0:17:28,846
When minimizing work, you should

561
00:17:28,846 --> 0:17:30,696
be deferring anything unrelated

562
00:17:31,086 --> 0:17:32,536
to generating the first frame.

563
00:17:33,356 --> 0:17:34,746
That means deferring things like

564
00:17:34,746 --> 0:17:36,746
undisplayed views or pre-warming

565
00:17:36,746 --> 0:17:39,146
features that are not yet used.

566
00:17:41,216 --> 0:17:42,776
You should also avoid blocking

567
00:17:42,776 --> 0:17:44,666
the main thread, either with

568
00:17:44,666 --> 0:17:46,996
network I/O, file I/O, or more,

569
00:17:47,696 --> 0:17:48,836
as this will affect launch.

570
00:17:49,216 --> 0:17:50,826
Move it to a background thread.

571
00:17:51,756 --> 0:17:53,566
Finally, you should take care to

572
00:17:53,566 --> 0:17:54,906
reduce your memory usage.

573
00:17:55,426 --> 0:17:56,556
Allocating and manipulating

574
00:17:56,556 --> 0:18:00,686
memory can take time.

575
00:17:56,556 --> 0:18:00,686
memory can take time.

576
00:18:00,896 --> 0:18:02,286
Next, prioritize your work.

577
00:18:03,416 --> 0:18:04,206
This is when you should make

578
00:18:04,206 --> 0:18:05,736
sure that work is scheduled at

579
00:18:05,736 --> 0:18:06,976
the right quality of service.

580
00:18:08,296 --> 0:18:10,306
Now in iOS 13, we've made some

581
00:18:10,306 --> 0:18:11,456
exciting optimizations to the

582
00:18:11,456 --> 0:18:14,006
Scheduler to make your apps

583
00:18:14,006 --> 0:18:15,076
launch even faster.

584
00:18:15,076 --> 0:18:16,876
But that means it's more

585
00:18:16,876 --> 0:18:18,706
critical than ever to preserve

586
00:18:18,706 --> 0:18:20,816
priority issue propagate work

587
00:18:20,816 --> 0:18:21,456
across threads.

588
00:18:22,196 --> 0:18:24,456
You should take a look at

589
00:18:24,456 --> 0:18:25,536
Modernizing Grand Central

590
00:18:25,536 --> 0:18:28,236
Dispatch Usage from WW 2017,

591
00:18:28,566 --> 0:18:30,056
which goes into depth about how

592
00:18:30,056 --> 0:18:31,286
to handle concurrency correctly.

593
00:18:33,916 --> 0:18:35,396
Finally, we have optimizing

594
00:18:35,396 --> 0:18:35,566
work.

595
00:18:36,696 --> 0:18:37,966
Anything that's remaining after

596
00:18:37,966 --> 0:18:38,936
you've minimized it and

597
00:18:38,936 --> 0:18:40,236
prioritized it should be

598
00:18:40,236 --> 0:18:40,746
optimized.

599
00:18:41,366 --> 0:18:42,526
That is to say it should be

600
00:18:42,526 --> 0:18:43,976
simplified and limited.

601
00:18:44,726 --> 0:18:46,376
For example, limit the amount of

602
00:18:46,376 --> 0:18:48,016
data that you fetch only what

603
00:18:48,016 --> 0:18:50,306
you need during launch, or

604
00:18:50,306 --> 0:18:52,186
lazily compute any variables and

605
00:18:52,186 --> 0:18:53,406
results that you need.

606
00:18:55,016 --> 0:18:56,486
When you're doing this, take a

607
00:18:56,486 --> 0:18:57,556
look at your methods and

608
00:18:57,556 --> 0:18:59,056
algorithms and see if you can

609
00:18:59,056 --> 0:19:00,896
optimize them, as you could get

610
00:18:59,056 --> 0:19:00,896
optimize them, as you could get

611
00:19:00,896 --> 0:19:02,196
significant improvements by

612
00:19:02,196 --> 0:19:03,596
calculating a result differently

613
00:19:04,066 --> 0:19:05,006
or using a different data

614
00:19:05,006 --> 0:19:05,426
structure.

615
00:19:06,006 --> 0:19:08,626
And finally, you should be

616
00:19:08,626 --> 0:19:09,936
caching your resources and your

617
00:19:09,936 --> 0:19:10,616
complications.

618
00:19:11,396 --> 0:19:12,476
This is, of course, to reduce

619
00:19:12,526 --> 0:19:14,386
the CPU and memory overhead by

620
00:19:14,386 --> 0:19:15,776
doing work multiple times

621
00:19:15,946 --> 0:19:16,646
unnecessarily.

622
00:19:17,246 --> 0:19:19,416
So, I'd love to hand the stage

623
00:19:19,416 --> 0:19:20,506
over to Dan, who is going to

624
00:19:20,506 --> 0:19:22,696
give you a great demo on how to

625
00:19:22,696 --> 0:19:24,236
use the new App Launch Template

626
00:19:24,236 --> 0:19:25,496
in Xcode Instruments to

627
00:19:25,496 --> 0:19:27,306
understand and improve our app's

628
00:19:27,306 --> 0:19:27,696
launch.

629
00:19:28,516 --> 0:19:34,176
[ Applause ]

630
00:19:34,676 --> 0:19:35,436
&gt;&gt; Thank you, Spencer.

631
00:19:36,336 --> 0:19:38,326
Hi, everyone, my name is Dan

632
00:19:38,376 --> 0:19:39,786
Sawada, and I'm also one of the

633
00:19:39,786 --> 0:19:41,476
performance engineers here at

634
00:19:41,476 --> 0:19:41,686
Apple.

635
00:19:42,666 --> 0:19:44,276
Today I will be going over a

636
00:19:44,356 --> 0:19:45,676
typical workflow of

637
00:19:45,846 --> 0:19:47,616
understanding your app's launch

638
00:19:48,156 --> 0:19:49,686
and looking for opportunities to

639
00:19:49,686 --> 0:19:52,116
minimize, prioritize, and

640
00:19:52,186 --> 0:19:53,886
optimize the work, so that you

641
00:19:53,886 --> 0:19:55,166
can actually deliver a

642
00:19:55,416 --> 0:19:57,056
delightful first user

643
00:19:57,056 --> 0:19:57,596
experience.

644
00:19:58,836 --> 0:19:59,606
So, let's get started.

645
00:19:59,606 --> 0:20:02,096
The app that I'm going to be

646
00:19:59,606 --> 0:20:02,096
The app that I'm going to be

647
00:20:02,096 --> 0:20:03,626
demonstrating today is called

648
00:20:03,626 --> 0:20:04,496
Star Searcher.

649
00:20:04,856 --> 0:20:06,186
It's an example app that we

650
00:20:06,186 --> 0:20:07,946
specifically written for this

651
00:20:07,946 --> 0:20:08,366
session.

652
00:20:09,106 --> 0:20:10,856
As you can see, it's a very

653
00:20:10,856 --> 0:20:13,686
typical UI table view that lists

654
00:20:13,746 --> 0:20:14,976
all of my imaginary stars.

655
00:20:15,176 --> 0:20:17,556
If you click on the cell, or a

656
00:20:17,556 --> 0:20:19,936
star, it shows you a little

657
00:20:19,936 --> 0:20:21,436
description blurb, in addition

658
00:20:21,436 --> 0:20:22,026
to a picture.

659
00:20:23,116 --> 0:20:24,496
However, we have one problem,

660
00:20:25,496 --> 0:20:26,766
let's go ahead and launch it.

661
00:20:28,176 --> 0:20:29,676
Ready, go.

662
00:20:33,196 --> 0:20:36,766
So, that took an astounding 2.5

663
00:20:36,766 --> 0:20:38,926
seconds to launch, not sure if I

664
00:20:38,926 --> 0:20:40,546
could call that delightful.

665
00:20:40,896 --> 0:20:42,676
So, let's use Xcode and

666
00:20:43,016 --> 0:20:44,606
Instruments to see if there's

667
00:20:45,016 --> 0:20:46,786
anything we can do about this.

668
00:20:49,106 --> 0:20:51,326
So, here we have our Xcode

669
00:20:51,386 --> 0:20:52,726
project for Star Searcher.

670
00:20:53,456 --> 0:20:55,366
Now one important thing that we

671
00:20:55,366 --> 0:20:57,116
should do before we do any

672
00:20:57,666 --> 0:21:01,126
performance-related analysis is

673
00:20:57,666 --> 0:21:01,126
performance-related analysis is

674
00:21:01,956 --> 0:21:03,576
selecting the profile scheme in

675
00:21:03,576 --> 0:21:04,026
Xcode.

676
00:21:04,856 --> 0:21:08,076
This will ensure Xcode to

677
00:21:08,076 --> 0:21:09,496
recompile your app in release

678
00:21:09,496 --> 0:21:11,816
mode, so that you can take the

679
00:21:11,816 --> 0:21:13,836
advantages of compiler time

680
00:21:13,836 --> 0:21:14,646
optimizations.

681
00:21:15,716 --> 0:21:17,196
Once Xcode recompiles your app,

682
00:21:17,756 --> 0:21:19,026
it will install it on your

683
00:21:19,026 --> 0:21:21,936
device and launch Instruments.

684
00:21:22,736 --> 0:21:24,816
Now we are happy to announce

685
00:21:25,056 --> 0:21:28,416
that as of iOS 13, or Xcode 11,

686
00:21:28,796 --> 0:21:29,896
we now have the

687
00:21:29,896 --> 0:21:31,316
AppLaunchTemplate, which we can

688
00:21:31,316 --> 0:21:33,636
use specifically for triage

689
00:21:33,666 --> 0:21:35,496
purposes like this, figuring out

690
00:21:35,496 --> 0:21:36,616
what's wrong with AppLaunch.

691
00:21:37,366 --> 0:21:39,096
So, let's go ahead and

692
00:21:39,806 --> 0:21:42,256
double-click on AppLaunch.

693
00:21:42,826 --> 0:21:45,786
Now the first thing we want to

694
00:21:45,786 --> 0:21:49,496
do here is hit the record

695
00:21:49,496 --> 0:21:49,876
button.

696
00:21:52,776 --> 0:21:54,176
At this point, Instruments will

697
00:21:54,176 --> 0:21:55,516
automatically launch Star

698
00:21:55,516 --> 0:21:57,826
Searcher, our app, gather all of

699
00:21:57,826 --> 0:22:00,016
the metrics, telemetry data,

700
00:21:57,826 --> 0:22:00,016
the metrics, telemetry data,

701
00:22:00,586 --> 0:22:02,176
analyze them, and create

702
00:22:02,176 --> 0:22:03,756
visualizations for all of the

703
00:22:03,756 --> 0:22:04,776
app launch phases.

704
00:22:05,686 --> 0:22:06,816
So, with take a look.

705
00:22:07,396 --> 0:22:09,906
The first few phases marked in

706
00:22:09,906 --> 0:22:12,836
purple are the phases that occur

707
00:22:12,836 --> 0:22:14,316
before your main function is

708
00:22:14,316 --> 0:22:15,506
invoked within your app.

709
00:22:17,656 --> 0:22:19,316
Onto the green phases, these

710
00:22:19,316 --> 0:22:21,356
phases of the early phases that

711
00:22:21,356 --> 0:22:22,916
occur at the very first of your

712
00:22:22,916 --> 0:22:24,426
main function, as your app

713
00:22:24,426 --> 0:22:26,556
finishes its launch and draws

714
00:22:26,556 --> 0:22:29,746
its first frame in UI.

715
00:22:29,906 --> 0:22:31,716
Let's go ahead and expand the

716
00:22:31,716 --> 0:22:32,166
lanes.

717
00:22:32,686 --> 0:22:34,566
As we expand the lanes, you can

718
00:22:34,716 --> 0:22:36,496
see the detailed states of all

719
00:22:36,496 --> 0:22:37,956
of the threads that respond

720
00:22:37,956 --> 0:22:39,126
within your app's process.

721
00:22:40,086 --> 0:22:41,966
Obviously, the most important

722
00:22:41,966 --> 0:22:44,256
one would be the main thread, or

723
00:22:44,296 --> 0:22:46,106
also known as the UI thread,

724
00:22:46,356 --> 0:22:47,936
which is responsible for handing

725
00:22:47,936 --> 0:22:51,016
user input and drawing your UI.

726
00:22:51,786 --> 0:22:53,416
Let's go ahead and pin down the

727
00:22:53,416 --> 0:22:54,646
lanes that are relevant for our

728
00:22:54,646 --> 0:22:56,206
purpose, starting with the app

729
00:22:56,386 --> 0:22:59,356
launch phases, our main thread,

730
00:22:59,786 --> 0:23:01,436
and there's one more worker

731
00:22:59,786 --> 0:23:01,436
and there's one more worker

732
00:23:01,436 --> 0:23:02,616
thread that's doing a

733
00:23:02,826 --> 0:23:03,796
substantial amount of work

734
00:23:03,796 --> 0:23:04,546
during launch.

735
00:23:05,476 --> 0:23:08,086
So, let's go ahead and pin this

736
00:23:08,976 --> 0:23:10,136
down, too.

737
00:23:11,616 --> 0:23:13,426
Speaking of thread states --

738
00:23:13,426 --> 0:23:13,756
oops.

739
00:23:18,046 --> 0:23:18,226
Like that.

740
00:23:21,076 --> 0:23:23,596
Speaking of thread states, gray

741
00:23:23,596 --> 0:23:24,856
means it's blocked, meaning that

742
00:23:24,856 --> 0:23:26,336
the thread isn't doing any work.

743
00:23:27,856 --> 0:23:30,016
Red means it's runnable, meaning

744
00:23:30,016 --> 0:23:31,546
that there's work scheduled to

745
00:23:31,546 --> 0:23:33,666
be done, but lacking CPU

746
00:23:33,666 --> 0:23:34,326
resources.

747
00:23:35,256 --> 0:23:37,046
Orange means it's preempted,

748
00:23:37,166 --> 0:23:39,336
meaning that it was doing work

749
00:23:39,566 --> 0:23:41,376
but got interrupted in favor of

750
00:23:41,466 --> 0:23:43,366
other competing work that has a

751
00:23:43,366 --> 0:23:44,216
higher priority.

752
00:23:44,856 --> 0:23:47,046
And last but not least, blue

753
00:23:47,046 --> 0:23:48,376
means it's running, meaning that

754
00:23:48,376 --> 0:23:49,836
it's actually doing work on the

755
00:23:49,926 --> 0:23:50,676
CPU core.

756
00:23:50,676 --> 0:23:53,856
So, with that information, let's

757
00:23:53,856 --> 0:23:55,456
take a look phase by phase

758
00:23:56,106 --> 0:23:57,266
starting with the system

759
00:23:57,266 --> 0:23:58,516
interface initialization.

760
00:24:00,036 --> 0:24:01,736
As we triple-click on a phase,

761
00:24:02,706 --> 0:24:04,676
we can highlight the phase and

762
00:24:04,676 --> 0:24:06,016
get detailed information towards

763
00:24:06,016 --> 0:24:07,236
the bottom half of the screen.

764
00:24:08,026 --> 0:24:09,776
To your left, you can see the

765
00:24:09,776 --> 0:24:12,246
detailed stack trace of all the

766
00:24:12,246 --> 0:24:13,376
work that's being done during

767
00:24:13,376 --> 0:24:14,216
this time period.

768
00:24:14,926 --> 0:24:17,676
To your right, you can see a

769
00:24:17,676 --> 0:24:19,176
aggregated stack trace, which

770
00:24:19,176 --> 0:24:21,786
lists all of the symbols ordered

771
00:24:21,786 --> 0:24:23,456
by the number of CPU sample

772
00:24:23,456 --> 0:24:23,856
size.

773
00:24:24,826 --> 0:24:26,726
Now notice that this initial

774
00:24:26,726 --> 0:24:29,366
phase only took 6 milliseconds

775
00:24:29,736 --> 0:24:31,866
as it sets up its system

776
00:24:31,936 --> 0:24:32,576
interfaces.

777
00:24:33,316 --> 0:24:35,196
This is primarily due to the

778
00:24:35,196 --> 0:24:37,666
benefits of dyld3 introduction

779
00:24:37,946 --> 0:24:39,546
and third-party apps, in

780
00:24:39,546 --> 0:24:41,306
addition to other system layer

781
00:24:41,306 --> 0:24:42,086
enhancements.

782
00:24:42,996 --> 0:24:45,316
So, as developers, we can take

783
00:24:45,316 --> 0:24:46,706
advantage of all of those

784
00:24:46,706 --> 0:24:48,146
enhancements without writing a

785
00:24:48,146 --> 0:24:49,906
single line of code.

786
00:24:50,876 --> 0:24:54,386
Let's move on, but before we do

787
00:24:54,386 --> 0:24:55,986
so, there's one other thing I

788
00:24:55,986 --> 0:24:56,806
should point out here.

789
00:24:57,996 --> 0:25:00,156
Notice that while this phase

790
00:24:57,996 --> 0:25:00,156
Notice that while this phase

791
00:25:00,156 --> 0:25:02,206
only spent 6 milliseconds on the

792
00:25:02,206 --> 0:25:05,876
CPU clock for Star Searcher, it

793
00:25:05,876 --> 0:25:08,516
spent 149 milliseconds on the

794
00:25:08,516 --> 0:25:09,186
wall clock.

795
00:25:09,626 --> 0:25:11,366
This discrepancy comes from the

796
00:25:11,406 --> 0:25:13,016
overhead of the profiling

797
00:25:13,016 --> 0:25:15,376
mechanism itself, which does

798
00:25:15,376 --> 0:25:17,006
give us a lot of information and

799
00:25:17,006 --> 0:25:18,776
insight, but has a cost of its

800
00:25:18,776 --> 0:25:18,886
own.

801
00:25:19,056 --> 0:25:21,156
So, this is why it's very

802
00:25:21,156 --> 0:25:23,016
important to distinguish

803
00:25:23,176 --> 0:25:24,946
profiling with measurements,

804
00:25:25,186 --> 0:25:26,666
which I will explain more later

805
00:25:26,666 --> 0:25:26,866
on.

806
00:25:27,496 --> 0:25:30,506
On to the next phase, which is

807
00:25:30,506 --> 0:25:32,276
static runtime initialization.

808
00:25:32,856 --> 0:25:35,566
Now notice this phase took an

809
00:25:35,566 --> 0:25:38,616
astonishing 375 milliseconds.

810
00:25:39,046 --> 0:25:40,426
Now that's a little bit too

811
00:25:40,426 --> 0:25:40,866
long.

812
00:25:42,316 --> 0:25:43,126
So, let's take a look.

813
00:25:43,866 --> 0:25:45,056
Looking at the detailed stack

814
00:25:45,096 --> 0:25:47,566
trace, we see a highlighted

815
00:25:47,696 --> 0:25:50,576
symbol with a blue icon marking

816
00:25:50,686 --> 0:25:52,996
370 milliseconds' worth of work

817
00:25:53,156 --> 0:25:54,366
on the CPU.

818
00:25:54,716 --> 0:25:56,186
Now all of these highlighted

819
00:25:56,256 --> 0:25:58,336
symbols indicate code that's

820
00:25:58,376 --> 0:25:59,976
declared within our sources.

821
00:26:00,546 --> 0:26:02,796
Let's click on it.

822
00:26:08,046 --> 0:26:09,826
Now by expanding the stack

823
00:26:09,866 --> 0:26:12,426
trace, it points us to the

824
00:26:12,426 --> 0:26:14,046
SLSuperfastLogger.

825
00:26:14,456 --> 0:26:16,706
Now, if a library is calling

826
00:26:16,706 --> 0:26:18,496
itself superfast, that implies

827
00:26:18,596 --> 0:26:22,496
some fishiness, but let's take a

828
00:26:22,496 --> 0:26:22,706
look.

829
00:26:23,266 --> 0:26:26,266
So, SLSuperfastLogger is a

830
00:26:26,266 --> 0:26:27,786
external framework that we've

831
00:26:27,786 --> 0:26:29,926
imported specifically into Star

832
00:26:29,926 --> 0:26:32,506
Searcher to take the benefits of

833
00:26:32,786 --> 0:26:34,606
powerful and convenient logging.

834
00:26:35,556 --> 0:26:37,256
However, the only place we

835
00:26:37,256 --> 0:26:41,186
invoke this framework is within

836
00:26:41,186 --> 0:26:42,556
the table view controller.

837
00:26:43,016 --> 0:26:44,296
Specifically, within the

838
00:26:44,296 --> 0:26:46,146
didSelectRowAt callback.

839
00:26:47,236 --> 0:26:49,816
Now this callback is completely

840
00:26:49,816 --> 0:26:51,226
out of the launch path, because

841
00:26:51,406 --> 0:26:53,176
it's only invoked when the user

842
00:26:53,176 --> 0:26:54,026
taps on a cell.

843
00:26:54,326 --> 0:26:56,616
So, why is it doing over 300

844
00:26:56,616 --> 0:26:58,296
milliseconds' worth of work

845
00:26:58,716 --> 0:27:00,656
during early launch and even

846
00:26:58,716 --> 0:27:00,656
during early launch and even

847
00:27:00,656 --> 0:27:02,526
before our main function is

848
00:27:02,526 --> 0:27:02,976
invoked?

849
00:27:03,436 --> 0:27:04,836
Well, let's investigate.

850
00:27:08,476 --> 0:27:10,696
By searching the symbol, it

851
00:27:10,696 --> 0:27:13,336
points us to a plus-load method

852
00:27:13,376 --> 0:27:14,666
declared within the SL

853
00:27:14,756 --> 0:27:16,006
SuperfastLogger class.

854
00:27:16,796 --> 0:27:18,026
Now, this is a static

855
00:27:18,026 --> 0:27:20,816
initializer, meaning that all of

856
00:27:20,816 --> 0:27:23,296
this work would be done at very

857
00:27:23,296 --> 0:27:24,976
early in launch before a main

858
00:27:24,976 --> 0:27:26,486
function is invoked, given the

859
00:27:26,486 --> 0:27:27,886
fact that we link against it.

860
00:27:28,416 --> 0:27:30,636
Now, the take away here is that

861
00:27:30,636 --> 0:27:31,846
it's very important to

862
00:27:31,846 --> 0:27:33,686
understand the impact of your

863
00:27:33,686 --> 0:27:35,196
dependencies in the frameworks

864
00:27:35,196 --> 0:27:37,296
that you use.

865
00:27:38,016 --> 0:27:39,116
External libraries and

866
00:27:39,116 --> 0:27:40,676
frameworks may be convenient and

867
00:27:40,676 --> 0:27:42,976
may be powerful, but it may come

868
00:27:42,976 --> 0:27:44,076
with a heavy cost.

869
00:27:44,456 --> 0:27:48,316
So, if those costs justifies the

870
00:27:48,316 --> 0:27:49,796
benefits, great.

871
00:27:49,796 --> 0:27:51,606
But for our case, 300

872
00:27:51,606 --> 0:27:54,166
milliseconds during launch is a

873
00:27:54,166 --> 0:27:55,086
little bit too much for what

874
00:27:55,086 --> 0:27:55,536
it's worth.

875
00:27:56,316 --> 0:27:58,496
So, let's go ahead and pursue

876
00:27:58,496 --> 0:27:59,216
alternatives.

877
00:28:00,626 --> 0:28:02,296
In our case let's use os.log,

878
00:28:02,346 --> 0:28:03,956
which is a very lightweight and

879
00:28:03,956 --> 0:28:06,226
efficient logging mechanism that

880
00:28:06,226 --> 0:28:08,546
comes right with iOS as well as

881
00:28:08,716 --> 0:28:11,696
other Apple platforms.

882
00:28:11,696 --> 0:28:13,636
Now once we remove the

883
00:28:13,636 --> 0:28:15,076
dependency, there's one

884
00:28:15,076 --> 0:28:16,136
additional thing that we

885
00:28:16,136 --> 0:28:17,696
absolutely need to remember to

886
00:28:18,176 --> 0:28:21,976
do, which is to remove the

887
00:28:21,976 --> 0:28:23,426
actual linkage.

888
00:28:23,946 --> 0:28:26,616
Now because the cost here is

889
00:28:26,706 --> 0:28:28,476
with a static initializer, we

890
00:28:28,916 --> 0:28:31,936
need to make sure to remove the

891
00:28:31,936 --> 0:28:34,256
linkage in order for it not to

892
00:28:34,936 --> 0:28:36,766
impact us.

893
00:28:37,106 --> 0:28:39,616
So, with that, let's go back to

894
00:28:39,616 --> 0:28:40,066
our trace.

895
00:28:41,076 --> 0:28:44,706
The next phase is UIKit

896
00:28:44,706 --> 0:28:46,816
initialization, which took 28

897
00:28:46,816 --> 0:28:48,316
milliseconds on the wall clock.

898
00:28:48,746 --> 0:28:50,516
Now this is pretty much a fixed

899
00:28:50,516 --> 0:28:52,186
cost for all applications.

900
00:28:53,066 --> 0:28:57,056
So, unless you subclass UI

901
00:28:57,056 --> 0:28:58,596
application or do a custom

902
00:28:58,596 --> 0:28:59,966
initialization work in

903
00:28:59,966 --> 0:29:02,136
UIApplicationDelegate, it's

904
00:28:59,966 --> 0:29:02,136
UIApplicationDelegate, it's

905
00:29:02,136 --> 0:29:03,196
pretty much something that we

906
00:29:03,196 --> 0:29:04,446
can disregard for now.

907
00:29:04,976 --> 0:29:06,856
So, let's move on.

908
00:29:08,416 --> 0:29:11,296
The next chunk of work is your

909
00:29:11,336 --> 0:29:13,046
applications initialization,

910
00:29:13,566 --> 0:29:15,096
which is pretty much what you

911
00:29:15,096 --> 0:29:15,586
control.

912
00:29:16,146 --> 0:29:18,296
Now notice there is a big amount

913
00:29:18,296 --> 0:29:20,116
of work being done with

914
00:29:20,266 --> 0:29:21,706
didFinishLaunchingWithOptions

915
00:29:21,706 --> 0:29:25,306
callback, which took 791

916
00:29:25,306 --> 0:29:26,736
milliseconds on the wall clock.

917
00:29:27,086 --> 0:29:28,706
Now that's very long.

918
00:29:29,546 --> 0:29:32,276
Let's take a look.

919
00:29:32,536 --> 0:29:35,056
So, this phase immediately

920
00:29:35,056 --> 0:29:36,846
points us to heavy amounts of

921
00:29:36,846 --> 0:29:39,416
work in the StarDataProvider

922
00:29:39,466 --> 0:29:39,986
class.

923
00:29:41,156 --> 0:29:42,276
It says, "loading stars."

924
00:29:42,796 --> 0:29:46,396
Okay, now, notice that there's a

925
00:29:46,396 --> 0:29:48,076
huge blockage in the main

926
00:29:48,076 --> 0:29:50,776
thread, which essentially is a

927
00:29:50,776 --> 0:29:52,066
delay in our launch.

928
00:29:52,596 --> 0:29:54,166
Our main thread was blocked for

929
00:29:54,166 --> 0:29:55,896
754 milliseconds.

930
00:29:56,306 --> 0:29:58,396
Now that's not nice.

931
00:29:59,606 --> 0:30:00,266
Let's take a look.

932
00:29:59,606 --> 0:30:00,266
Let's take a look.

933
00:30:01,926 --> 0:30:03,126
So, in order to inspect the

934
00:30:03,126 --> 0:30:05,366
detailed states, we should look

935
00:30:05,366 --> 0:30:07,326
at the event list.

936
00:30:09,016 --> 0:30:11,096
By looking at the event list, we

937
00:30:11,096 --> 0:30:12,666
notice that it was blocked for

938
00:30:12,796 --> 0:30:15,756
754 milliseconds, and

939
00:30:15,796 --> 0:30:18,466
afterwards, it was unblocked, or

940
00:30:18,466 --> 0:30:20,376
made runnable, by thread

941
00:30:20,376 --> 0:30:22,576
0x12253.

942
00:30:23,396 --> 0:30:25,196
Now this corresponds to this

943
00:30:25,196 --> 0:30:27,616
worker thread that was doing a

944
00:30:27,616 --> 0:30:28,316
lot of work.

945
00:30:29,636 --> 0:30:31,106
So, there's some relationship

946
00:30:31,106 --> 0:30:31,386
here.

947
00:30:32,576 --> 0:30:34,096
Now going back to the main

948
00:30:34,096 --> 0:30:36,256
thread, notice that it's

949
00:30:36,296 --> 0:30:37,906
scheduled to do work at priority

950
00:30:37,906 --> 0:30:38,816
47.

951
00:30:39,376 --> 0:30:41,356
Forty-seven is equivalent to the

952
00:30:41,356 --> 0:30:45,066
user interactive QoS.

953
00:30:45,276 --> 0:30:47,016
Now look at all this red meeting

954
00:30:47,016 --> 0:30:49,606
there's a lot of work to do, but

955
00:30:49,646 --> 0:30:51,986
it's lacking CPU resources.

956
00:30:52,496 --> 0:30:54,196
Well, let's figure out why.

957
00:30:55,446 --> 0:30:58,476
As we click on the worker

958
00:30:58,476 --> 0:30:59,836
thread, we notice that there's a

959
00:30:59,836 --> 0:31:02,156
lot of work scheduled to do work

960
00:30:59,836 --> 0:31:02,156
lot of work scheduled to do work

961
00:31:02,156 --> 0:31:03,456
at priority 4.

962
00:31:03,966 --> 0:31:05,056
This is equivalent to the

963
00:31:05,246 --> 0:31:06,106
background QoS.

964
00:31:06,106 --> 0:31:09,116
What we're actually seeing here

965
00:31:09,116 --> 0:31:11,326
is a symptom known as priority

966
00:31:11,326 --> 0:31:13,176
inversion, where a given thread

967
00:31:13,316 --> 0:31:15,186
is being blocked by a separate

968
00:31:15,186 --> 0:31:17,406
thread that has a lower QoS, or

969
00:31:17,906 --> 0:31:19,386
priority, than itself.

970
00:31:20,176 --> 0:31:21,676
Obviously, this isn't ideal,

971
00:31:21,936 --> 0:31:23,816
because it's still aimed to

972
00:31:23,816 --> 0:31:25,286
launch more than it should.

973
00:31:25,736 --> 0:31:27,306
So, let's go ahead and try to

974
00:31:28,206 --> 0:31:29,396
fix that.

975
00:31:29,606 --> 0:31:30,346
Looking back at the

976
00:31:30,346 --> 0:31:32,096
StarDataProvider, which is at

977
00:31:32,096 --> 0:31:34,826
the core of this issue, is a

978
00:31:34,826 --> 0:31:36,576
very simple class that's

979
00:31:36,576 --> 0:31:38,016
responsible for fetching data

980
00:31:38,506 --> 0:31:40,396
for our stars from SQLite

981
00:31:40,396 --> 0:31:42,516
database, has a dedicated

982
00:31:42,516 --> 0:31:44,456
dispatch queue with a background

983
00:31:45,296 --> 0:31:47,286
QoS, and note that this is to

984
00:31:47,286 --> 0:31:48,786
ensure that data fetching

985
00:31:48,786 --> 0:31:50,946
doesn't compete with the UI.

986
00:31:50,946 --> 0:31:53,956
And there's two API being

987
00:31:53,956 --> 0:31:54,556
exposed.

988
00:31:55,246 --> 0:31:56,556
One for loading data

989
00:31:56,556 --> 0:31:58,826
asynchronously using this

990
00:31:59,056 --> 0:32:00,846
GrandCentralDispatch's async

991
00:31:59,056 --> 0:32:00,846
GrandCentralDispatch's async

992
00:32:00,886 --> 0:32:02,506
primitive and another

993
00:32:02,656 --> 0:32:04,706
synchronous API that loads the

994
00:32:05,096 --> 0:32:06,866
data in a synchronous fashion.

995
00:32:08,446 --> 0:32:10,876
Now looking at the actual call

996
00:32:10,876 --> 0:32:12,026
sites within the

997
00:32:12,026 --> 0:32:13,686
didFinishLaunchingwithOptions,

998
00:32:14,776 --> 0:32:15,916
we are leveraging the

999
00:32:16,046 --> 0:32:19,486
asynchronous API, but also

1000
00:32:19,486 --> 0:32:20,706
leveraging the dispatch

1001
00:32:20,816 --> 0:32:23,346
semaphore to ensure that we wait

1002
00:32:23,346 --> 0:32:24,506
for all of the data to be

1003
00:32:24,506 --> 0:32:26,706
fetched before we proceed on to

1004
00:32:26,706 --> 0:32:28,616
drawing the actual first frame

1005
00:32:28,966 --> 0:32:29,816
of our table view.

1006
00:32:29,816 --> 0:32:32,626
Now if we're going to be doing

1007
00:32:32,626 --> 0:32:34,846
this, we should use the correct

1008
00:32:35,246 --> 0:32:37,376
concurrency primitive, which is

1009
00:32:37,696 --> 0:32:41,736
the sync primitive in GCD.

1010
00:32:42,306 --> 0:32:44,136
Now using the correct

1011
00:32:44,276 --> 0:32:45,436
concurrency primitives,

1012
00:32:45,746 --> 0:32:47,376
GrandCentralDispatch will

1013
00:32:47,376 --> 0:32:49,186
temporarily propagate the

1014
00:32:49,246 --> 0:32:51,176
priority of the main thread to

1015
00:32:51,176 --> 0:32:52,626
the worker thread and boost it

1016
00:32:52,626 --> 0:32:55,206
up to user inactive so that it

1017
00:32:57,376 --> 0:32:57,546
matches.

1018
00:32:57,676 --> 0:32:59,986
So, at this point, I think we

1019
00:32:59,986 --> 0:33:01,916
have the potential to resolve

1020
00:32:59,986 --> 0:33:01,916
have the potential to resolve

1021
00:33:01,916 --> 0:33:03,186
the priority inversion, but

1022
00:33:03,186 --> 0:33:04,456
there's one more issue that I

1023
00:33:04,456 --> 0:33:05,066
notice here.

1024
00:33:06,326 --> 0:33:09,006
LoadStarDataSync API accepts a

1025
00:33:09,006 --> 0:33:12,226
range of rows to load the data

1026
00:33:12,226 --> 0:33:12,576
for.

1027
00:33:13,196 --> 0:33:15,016
In our case, we're loading from

1028
00:33:15,296 --> 0:33:17,776
row 0 to the very last row,

1029
00:33:17,996 --> 0:33:19,766
which is essentially everything.

1030
00:33:20,646 --> 0:33:22,946
Now when you think about it, the

1031
00:33:22,946 --> 0:33:24,666
first frame can only fit just a

1032
00:33:24,666 --> 0:33:27,746
limited number of cells that may

1033
00:33:27,746 --> 0:33:28,706
be on the screen size.

1034
00:33:29,186 --> 0:33:30,506
In the case of Star Searcher,

1035
00:33:30,986 --> 0:33:32,386
perhaps around 10 to 15,

1036
00:33:32,736 --> 0:33:33,636
depending on the device.

1037
00:33:34,186 --> 0:33:36,186
So, let's go ahead and optimize

1038
00:33:36,186 --> 0:33:38,086
that, and instead of loading

1039
00:33:38,216 --> 0:33:41,336
everything, let's just load the

1040
00:33:41,496 --> 0:33:43,646
first 20 rows, just enough to

1041
00:33:43,646 --> 0:33:44,806
draw the first frame of the

1042
00:33:44,886 --> 0:33:46,526
table view in a synchronous

1043
00:33:46,526 --> 0:33:47,006
fashion.

1044
00:33:47,846 --> 0:33:49,606
Afterwards, we should load all

1045
00:33:49,606 --> 0:33:51,316
of the rest lazily in the

1046
00:33:51,316 --> 0:33:53,156
background and only update the

1047
00:33:53,156 --> 0:33:55,126
table view when finished after

1048
00:33:55,126 --> 0:33:55,566
launch.

1049
00:33:58,136 --> 0:33:58,916
Let's move on.

1050
00:33:59,696 --> 0:34:01,686
Back to the trace, last but not

1051
00:33:59,696 --> 0:34:01,686
Back to the trace, last but not

1052
00:34:01,686 --> 0:34:02,006
least.

1053
00:34:02,396 --> 0:34:05,046
The last phase is our first

1054
00:34:05,046 --> 0:34:06,256
frame rendering.

1055
00:34:07,846 --> 0:34:11,126
Notice that this phase took 951

1056
00:34:11,126 --> 0:34:12,656
milliseconds, which is very

1057
00:34:12,656 --> 0:34:14,065
long, considering that this is

1058
00:34:14,065 --> 0:34:15,866
only responsible for doing the

1059
00:34:15,866 --> 0:34:17,556
layout work and the rendering of

1060
00:34:17,556 --> 0:34:18,186
our first frame.

1061
00:34:19,606 --> 0:34:22,656
Now let's taking a deeper dive,

1062
00:34:22,856 --> 0:34:25,755
it points us to the

1063
00:34:25,755 --> 0:34:28,206
StarTableviewController, and

1064
00:34:29,906 --> 0:34:31,896
looking at the detailed stack

1065
00:34:31,936 --> 0:34:36,916
trace, we see a lot of work and

1066
00:34:36,916 --> 0:34:39,755
a CellForRowAt callback, which

1067
00:34:39,755 --> 0:34:40,936
is responsible for doing the

1068
00:34:40,936 --> 0:34:42,485
layout work of the cells.

1069
00:34:42,485 --> 0:34:45,335
let's go ahead and expand that.

1070
00:34:46,216 --> 0:34:49,136
As we expand the stack trace, it

1071
00:34:49,176 --> 0:34:51,396
points us to a lot of

1072
00:34:51,396 --> 0:34:53,815
initialization work for the

1073
00:34:53,815 --> 0:34:56,565
StarDetailView controller which

1074
00:34:56,565 --> 0:34:58,746
took 882 milliseconds on the

1075
00:34:58,746 --> 0:34:59,386
CPU.

1076
00:34:59,466 --> 0:35:01,436
So, at this point, we've

1077
00:34:59,466 --> 0:35:01,436
So, at this point, we've

1078
00:35:01,436 --> 0:35:02,586
identified this is pretty much

1079
00:35:02,586 --> 0:35:02,976
the bottleneck here.

1080
00:35:05,046 --> 0:35:06,626
Let's take a look at our code.

1081
00:35:06,676 --> 0:35:10,856
Now looking at the table view

1082
00:35:10,856 --> 0:35:12,416
controller within the

1083
00:35:12,556 --> 0:35:15,746
CellforRowAt callback, we create

1084
00:35:15,746 --> 0:35:17,406
the cells using our custom cell,

1085
00:35:18,576 --> 0:35:20,816
and at the same time, we put in

1086
00:35:20,816 --> 0:35:22,976
a speculative optimization which

1087
00:35:22,976 --> 0:35:25,226
is to pre-warm and cache the

1088
00:35:25,226 --> 0:35:26,846
DetailViewControllers of the

1089
00:35:27,036 --> 0:35:29,516
DetailVew, as we do the layout

1090
00:35:29,516 --> 0:35:29,806
work.

1091
00:35:30,306 --> 0:35:31,686
This is with the hopes to

1092
00:35:32,046 --> 0:35:33,806
streamline the transition from a

1093
00:35:33,806 --> 0:35:35,266
table view to a detail view.

1094
00:35:35,836 --> 0:35:38,456
But as we saw in the trace, this

1095
00:35:38,846 --> 0:35:40,126
doesn't create a high cost.

1096
00:35:41,196 --> 0:35:43,156
Now stepping back a little bit,

1097
00:35:43,306 --> 0:35:44,296
when you think about it, the

1098
00:35:44,296 --> 0:35:45,816
detailed view doesn't really

1099
00:35:45,816 --> 0:35:47,356
make sense for our first frame.

1100
00:35:47,816 --> 0:35:49,126
It only makes sense when the

1101
00:35:49,126 --> 0:35:50,376
user taps on a cell.

1102
00:35:51,276 --> 0:35:53,886
So, let's go ahead and defer

1103
00:35:53,886 --> 0:35:54,336
that work.

1104
00:35:57,356 --> 0:35:58,486
Where should we defer it to?

1105
00:35:59,216 --> 0:36:01,566
Perhaps the didSelectRowAt

1106
00:35:59,216 --> 0:36:01,566
Perhaps the didSelectRowAt

1107
00:36:01,566 --> 0:36:06,606
callback, which is invoked when

1108
00:36:06,996 --> 0:36:07,966
the user taps on a cell.

1109
00:36:09,336 --> 0:36:11,156
So, at this point, we've made

1110
00:36:11,276 --> 0:36:12,526
several enhancements, or

1111
00:36:12,526 --> 0:36:14,316
optimizations, to Star Searcher.

1112
00:36:14,466 --> 0:36:15,616
So, let's go ahead and

1113
00:36:15,616 --> 0:36:15,976
re-profile it.

1114
00:36:23,086 --> 0:36:26,656
Now one thing to note here is

1115
00:36:26,656 --> 0:36:29,646
that as you make incremental

1116
00:36:29,646 --> 0:36:32,046
changes, you should consistently

1117
00:36:32,046 --> 0:36:34,076
remeasure and re-profile as you

1118
00:36:34,076 --> 0:36:35,006
make progress.

1119
00:36:35,356 --> 0:36:37,676
That way, you can actually

1120
00:36:37,746 --> 0:36:39,916
understand the exact impact of

1121
00:36:40,176 --> 0:36:41,776
your incremental change set.

1122
00:36:42,046 --> 0:36:43,416
But for the sake of his demo,

1123
00:36:43,696 --> 0:36:44,916
we've actually aggregated all

1124
00:36:44,916 --> 0:36:46,926
the changes into one for the

1125
00:36:46,926 --> 0:36:49,566
sake of time and boom.

1126
00:36:49,566 --> 0:36:51,086
There's a little UI glitch, but

1127
00:36:51,086 --> 0:36:54,016
we can immediately see that our

1128
00:36:54,406 --> 0:36:55,836
launch is under 500

1129
00:36:55,836 --> 0:36:56,456
milliseconds.

1130
00:36:57,186 --> 0:37:02,346
Now, as I said earlier, the

1131
00:36:57,186 --> 0:37:02,346
Now, as I said earlier, the

1132
00:37:02,346 --> 0:37:04,296
profiling mechanism does come

1133
00:37:04,296 --> 0:37:05,376
with a cost of its own.

1134
00:37:05,636 --> 0:37:06,896
So, to get a better

1135
00:37:06,896 --> 0:37:08,816
understanding of what our users

1136
00:37:08,816 --> 0:37:11,486
would experience, let's go ahead

1137
00:37:12,476 --> 0:37:15,656
and leverage the new XCTest APIs

1138
00:37:16,066 --> 0:37:17,626
to measure our launch

1139
00:37:17,626 --> 0:37:18,886
performance within our test.

1140
00:37:20,246 --> 0:37:21,986
With just a few lines of code,

1141
00:37:22,176 --> 0:37:23,886
we can actually integrate launch

1142
00:37:23,886 --> 0:37:25,876
performance tests, or any

1143
00:37:25,876 --> 0:37:27,136
performance tests, with an

1144
00:37:27,136 --> 0:37:27,766
XCTest.

1145
00:37:28,306 --> 0:37:31,946
Let's go ahead and kick this

1146
00:37:31,996 --> 0:37:32,446
off.

1147
00:37:33,886 --> 0:37:37,486
Now at this point, XCTest will

1148
00:37:37,486 --> 0:37:39,636
do one throwaway launch attempt,

1149
00:37:39,846 --> 0:37:41,936
which cancels out the variance

1150
00:37:42,536 --> 0:37:44,516
that would come about by cold

1151
00:37:44,516 --> 0:37:44,946
launches.

1152
00:37:45,466 --> 0:37:47,116
Afterwards, it will do the

1153
00:37:47,116 --> 0:37:48,676
specified number of iterations

1154
00:37:48,816 --> 0:37:51,326
or by default five iterations of

1155
00:37:51,436 --> 0:37:53,696
launches and measure the time it

1156
00:37:53,736 --> 0:37:54,016
took.

1157
00:37:54,856 --> 0:37:57,176
Afterwards, it will produce a

1158
00:37:57,176 --> 0:38:01,986
nice statistics of that data.

1159
00:37:57,176 --> 0:38:01,986
nice statistics of that data.

1160
00:38:02,186 --> 0:38:04,116
It's going to take a few minutes

1161
00:38:04,116 --> 0:38:06,236
for the test to complete, and

1162
00:38:06,236 --> 0:38:09,986
now we've taken the launch of

1163
00:38:10,106 --> 0:38:12,696
Star Searcher from 2.5 seconds

1164
00:38:13,066 --> 0:38:16,536
to just over 300 milliseconds.

1165
00:38:17,031 --> 0:38:19,031
[ Applause ]

1166
00:38:19,046 --> 0:38:21,346
And to wrap up the demo, I'd

1167
00:38:21,346 --> 0:38:22,136
like to show you what this

1168
00:38:22,686 --> 0:38:23,726
actually looks like on the UI.

1169
00:38:24,606 --> 0:38:26,276
So, let's make sure we kill Star

1170
00:38:26,276 --> 0:38:26,756
Searcher.

1171
00:38:27,366 --> 0:38:29,126
That was quick.

1172
00:38:30,516 --> 0:38:33,500
[ Applause ]

1173
00:38:38,056 --> 0:38:38,726
Thank you.

1174
00:38:39,056 --> 0:38:39,946
Back to you, Spencer.

1175
00:38:41,516 --> 0:38:45,376
[ Applause ]

1176
00:38:45,876 --> 0:38:47,066
&gt;&gt; Thanks, Dan, for that awesome

1177
00:38:47,066 --> 0:38:49,076
demo on how to use Xcode,

1178
00:38:49,486 --> 0:38:51,746
Instruments, AppLaunchTemplate

1179
00:38:52,006 --> 0:38:53,276
to improve our app launch

1180
00:38:53,276 --> 0:38:53,766
experience.

1181
00:38:54,526 --> 0:38:57,226
So, we realize that in your code

1182
00:38:57,226 --> 0:38:59,816
bases, you're not going to find

1183
00:38:59,816 --> 0:39:01,766
just a few couple places in your

1184
00:38:59,816 --> 0:39:01,766
just a few couple places in your

1185
00:39:01,766 --> 0:39:03,356
code that you can fix with just

1186
00:39:03,356 --> 0:39:05,236
a few lines and get such

1187
00:39:05,356 --> 0:39:06,516
substantial improvements.

1188
00:39:07,546 --> 0:39:08,386
It's more likely that you're

1189
00:39:08,386 --> 0:39:10,356
going to have to find a bunch of

1190
00:39:10,356 --> 0:39:12,396
5 to 10 milliseconds wins and

1191
00:39:12,396 --> 0:39:13,586
then stack all those together.

1192
00:39:14,816 --> 0:39:15,866
We want to let you know that

1193
00:39:15,866 --> 0:39:16,396
we've got your back.

1194
00:39:17,746 --> 0:39:20,146
We've been making a ton of iOS

1195
00:39:20,146 --> 0:39:21,636
optimizations to improve your

1196
00:39:21,636 --> 0:39:23,146
app's launch and help you reach

1197
00:39:23,146 --> 0:39:26,076
your goal with very little to no

1198
00:39:26,076 --> 0:39:27,016
adoption from your side.

1199
00:39:28,016 --> 0:39:29,556
I want to call on a few in

1200
00:39:29,556 --> 0:39:30,396
particular.

1201
00:39:30,956 --> 0:39:34,766
As mentioned before, dyld3

1202
00:39:34,856 --> 0:39:36,256
brings caching of your runtime

1203
00:39:36,256 --> 0:39:38,056
dependencies to your apps, which

1204
00:39:38,056 --> 0:39:39,276
you saw in the demo, that

1205
00:39:39,426 --> 0:39:40,976
provided a huge improvement.

1206
00:39:41,496 --> 0:39:43,606
The Scheduler has also been

1207
00:39:43,606 --> 0:39:45,626
optimized to help prioritize the

1208
00:39:45,626 --> 0:39:47,236
work that happens during launch.

1209
00:39:48,026 --> 0:39:50,126
We also put Auto Layout and

1210
00:39:50,126 --> 0:39:51,646
Objective-C under the microscope

1211
00:39:51,956 --> 0:39:52,756
and made a bunch of

1212
00:39:52,756 --> 0:39:53,736
optimizations there.

1213
00:39:54,896 --> 0:39:56,526
And then finally, we have

1214
00:39:56,526 --> 0:39:57,566
exciting changes to app

1215
00:39:57,766 --> 0:39:59,076
packaging coming later this

1216
00:39:59,076 --> 0:39:59,386
year.

1217
00:40:00,436 --> 0:40:02,216
We think that altogether these

1218
00:40:02,216 --> 0:40:03,786
changes should result in a huge

1219
00:40:03,786 --> 0:40:05,726
improvement your apps with very

1220
00:40:05,726 --> 0:40:09,176
little to no adoption.

1221
00:40:09,316 --> 0:40:10,956
So, let's wrap things up with

1222
00:40:10,956 --> 0:40:12,316
some tips and tricks on how to

1223
00:40:12,316 --> 0:40:13,266
make sure your app stays

1224
00:40:13,306 --> 0:40:14,716
delightful once you've done all

1225
00:40:14,716 --> 0:40:14,976
this work.

1226
00:40:19,076 --> 0:40:20,276
First of all, don't let

1227
00:40:20,276 --> 0:40:21,546
performance be an afterthought.

1228
00:40:22,326 --> 0:40:24,136
You should start working on it

1229
00:40:24,136 --> 0:40:25,566
and thinking about it at the

1230
00:40:25,696 --> 0:40:27,036
beginning of every bug fix, at

1231
00:40:27,736 --> 0:40:28,366
the beginning of every

1232
00:40:28,366 --> 0:40:30,316
re-factor, and the beginning of

1233
00:40:30,316 --> 0:40:30,956
every feature.

1234
00:40:32,286 --> 0:40:33,746
This is because it's incredibly

1235
00:40:33,746 --> 0:40:35,316
easy to introduce regression,

1236
00:40:35,756 --> 0:40:37,536
especially a little one like 2

1237
00:40:37,536 --> 0:40:38,216
milliseconds.

1238
00:40:39,026 --> 0:40:40,616
The problem is these little ones

1239
00:40:40,616 --> 0:40:43,026
add up to a big problem, and if

1240
00:40:43,026 --> 0:40:43,556
you don't address them

1241
00:40:43,556 --> 0:40:45,576
immediately, it becomes very

1242
00:40:45,576 --> 0:40:46,336
hard to find them all.

1243
00:40:46,336 --> 0:40:49,536
In order to do that, to detect

1244
00:40:49,536 --> 0:40:51,096
those regressions, you should be

1245
00:40:51,096 --> 0:40:52,926
plotting your app's launch over

1246
00:40:52,926 --> 0:40:54,356
time and running tests

1247
00:40:54,356 --> 0:40:54,896
regularly.

1248
00:40:55,646 --> 0:40:56,546
This will ensure that you're

1249
00:40:56,546 --> 0:40:58,016
meeting your target and that you

1250
00:40:58,016 --> 0:40:59,446
immediately know if you've

1251
00:40:59,446 --> 0:41:03,896
regressed from that target.

1252
00:40:59,446 --> 0:41:03,896
regressed from that target.

1253
00:41:03,986 --> 0:41:05,946
You should also take a look at

1254
00:41:05,946 --> 0:41:08,416
the new Xcode organizer, which

1255
00:41:08,816 --> 0:41:09,736
lets you know how your app

1256
00:41:09,776 --> 0:41:10,586
performs in the field.

1257
00:41:11,666 --> 0:41:13,366
In iOS 13, for users that have

1258
00:41:13,366 --> 0:41:15,756
opted in, power and performance

1259
00:41:15,756 --> 0:41:16,976
metrics will be gathered about

1260
00:41:16,976 --> 0:41:17,256
your app.

1261
00:41:18,296 --> 0:41:19,816
They will then be aggregated

1262
00:41:19,816 --> 0:41:21,456
over 24-hour periods and sent

1263
00:41:21,456 --> 0:41:22,886
back to your organizer where you

1264
00:41:22,886 --> 0:41:23,936
can view them in the form of

1265
00:41:23,936 --> 0:41:25,936
histograms by software version

1266
00:41:25,936 --> 0:41:26,796
and device version.

1267
00:41:28,136 --> 0:41:29,726
However, if you desire a little

1268
00:41:29,726 --> 0:41:31,026
bit more control over that data,

1269
00:41:31,916 --> 0:41:33,236
you can adopt MetricKit.

1270
00:41:34,636 --> 0:41:36,406
MetricKit allows you to specify

1271
00:41:36,616 --> 0:41:38,056
custom power and performance

1272
00:41:38,056 --> 0:41:38,386
metrics.

1273
00:41:39,886 --> 0:41:41,236
Now like the organizer, this

1274
00:41:41,236 --> 0:41:42,486
data will be gathered up and

1275
00:41:42,486 --> 0:41:44,046
aggregated over 24-hour periods

1276
00:41:44,046 --> 0:41:46,226
of time and then delivered back

1277
00:41:46,266 --> 0:41:48,586
to you through a delegate method

1278
00:41:48,586 --> 0:41:49,276
in your app.

1279
00:41:50,066 --> 0:41:51,186
From there, you're free to

1280
00:41:51,186 --> 0:41:52,686
handle the data as you see fit.

1281
00:41:53,696 --> 0:41:54,976
To learn more about this, we

1282
00:41:54,976 --> 0:41:55,846
recommend you check out

1283
00:41:55,996 --> 0:41:57,066
Improving Battery Life and

1284
00:41:57,066 --> 0:41:59,846
Performance from WW 2019.

1285
00:42:03,096 --> 0:42:05,566
So, in summary, we'd love for

1286
00:42:05,756 --> 0:42:07,736
you today to start understanding

1287
00:42:07,736 --> 0:42:09,146
your app's launch with the new

1288
00:42:09,146 --> 0:42:10,596
AppLauchTemplate in Xcode

1289
00:42:10,596 --> 0:42:11,116
Instruments.

1290
00:42:11,916 --> 0:42:12,616
See if you can find

1291
00:42:12,616 --> 0:42:14,316
opportunities to minimize,

1292
00:42:14,926 --> 0:42:16,816
prioritize, and optimize your

1293
00:42:17,536 --> 0:42:17,626
work.

1294
00:42:18,836 --> 0:42:21,036
Next, although well intended,

1295
00:42:21,276 --> 0:42:22,786
not all optimizations work out,

1296
00:42:23,586 --> 0:42:24,596
such as the pre-warming

1297
00:42:24,596 --> 0:42:26,096
DetailView controllers that Dan

1298
00:42:26,096 --> 0:42:26,936
addressed in his demo.

1299
00:42:27,936 --> 0:42:30,026
So, be sure to measure, not

1300
00:42:30,026 --> 0:42:32,596
estimate, performance whenever

1301
00:42:32,596 --> 0:42:33,406
you're making changes.

1302
00:42:34,026 --> 0:42:35,646
Again, it's very easy to

1303
00:42:35,646 --> 0:42:36,906
introduce regressions

1304
00:42:36,906 --> 0:42:37,566
unintentionally.

1305
00:42:38,956 --> 0:42:40,496
Finally, you should be tracking

1306
00:42:40,496 --> 0:42:41,916
your performance in all phases

1307
00:42:41,916 --> 0:42:42,566
of development.

1308
00:42:43,576 --> 0:42:44,696
This means utilizing the new

1309
00:42:44,696 --> 0:42:46,426
XCTest app launch measurements

1310
00:42:47,006 --> 0:42:48,826
on a variety of devices and

1311
00:42:48,826 --> 0:42:50,156
possibly integrating this with

1312
00:42:50,156 --> 0:42:52,006
continuous integration.

1313
00:42:53,176 --> 0:42:54,216
This will ensure that you're

1314
00:42:54,216 --> 0:42:55,576
consistently delivering a

1315
00:42:55,576 --> 0:42:57,356
delightful app launch to all of

1316
00:42:57,356 --> 0:42:58,996
your users on all of their

1317
00:42:58,996 --> 0:42:59,546
devices.

1318
00:43:02,206 --> 0:43:03,896
For more information, please

1319
00:43:03,896 --> 0:43:04,646
view the talks that we

1320
00:43:04,646 --> 0:43:06,806
referenced today, and have a

1321
00:43:06,806 --> 0:43:07,756
great rest of your Friday

1322
00:43:07,756 --> 0:43:08,106
afternoon.

1323
00:43:08,416 --> 0:43:08,806
Thank you.

1324
00:43:09,516 --> 0:43:12,500
[ Applause ]
