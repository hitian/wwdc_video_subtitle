1
00:00:01,516 --> 0:00:06,546
[ Music ]

2
00:00:07,046 --> 0:00:07,626
&gt;&gt; Good afternoon, ladies and

3
00:00:07,626 --> 0:00:07,966
gentlemen.

4
00:00:08,786 --> 0:00:10,206
Please welcome Vice President of

5
00:00:10,206 --> 0:00:12,366
Software Sebastien Marineau-Mes.

6
00:00:13,516 --> 0:00:23,756
[ Applause ]

7
00:00:24,256 --> 0:00:25,626
&gt;&gt; Good afternoon, everyone, and

8
00:00:25,626 --> 0:00:28,046
welcome to WWDC.

9
00:00:28,046 --> 0:00:29,536
Did we love the morning keynote?

10
00:00:30,161 --> 0:00:32,161
[ Applause ]

11
00:00:32,305 --> 0:00:32,886
There you go.

12
00:00:33,016 --> 0:00:34,556
[ Applause ]

13
00:00:34,556 --> 0:00:36,206
Now this year is one of our

14
00:00:36,256 --> 0:00:38,156
biggest for developers and we're

15
00:00:38,156 --> 0:00:39,366
really excited to show you what

16
00:00:39,366 --> 0:00:40,926
we've been working on and see

17
00:00:40,926 --> 0:00:41,816
what you think.

18
00:00:42,636 --> 0:00:44,126
This morning's keynote was just

19
00:00:44,176 --> 0:00:45,656
a taste of what's happening this

20
00:00:45,756 --> 0:00:45,986
year.

21
00:00:46,406 --> 0:00:47,836
There is so much more that we

22
00:00:47,836 --> 0:00:49,026
want to share, and this

23
00:00:49,026 --> 0:00:50,076
afternoon we're going to focus

24
00:00:50,116 --> 0:00:51,506
on the areas that matter most to

25
00:00:51,586 --> 0:00:52,956
you as developers.

26
00:00:53,516 --> 0:00:54,586
Are you ready to hear more?

27
00:00:55,016 --> 0:00:56,386
[ Applause ]

28
00:00:56,386 --> 0:00:56,626
There we go.

29
00:00:58,046 --> 0:00:59,616
Now we've taken a huge step in

30
00:00:59,616 --> 0:01:01,036
terms of developer experience

31
00:00:59,616 --> 0:01:01,036
terms of developer experience

32
00:01:01,036 --> 0:01:03,136
this year with the new SwiftUI

33
00:01:03,416 --> 0:01:05,096
framework as well as great

34
00:01:05,146 --> 0:01:07,176
interactive tools in Xcode.

35
00:01:08,316 --> 0:01:09,696
And we've really seen each of

36
00:01:09,696 --> 0:01:11,976
our platforms get even deeper at

37
00:01:11,976 --> 0:01:12,916
what they do best.

38
00:01:13,326 --> 0:01:14,366
We have powerful new pro

39
00:01:14,366 --> 0:01:16,326
capabilities for Mac, and new

40
00:01:16,326 --> 0:01:18,256
Dark Mode and rich updates --

41
00:01:18,836 --> 0:01:20,526
sorry, independence for watchOS.

42
00:01:21,546 --> 0:01:23,776
On iOS, a new Dark Mode and

43
00:01:23,776 --> 0:01:24,636
great app updates.

44
00:01:25,906 --> 0:01:27,806
And finally, on iPadOS, a

45
00:01:27,806 --> 0:01:29,476
powerful operating system that

46
00:01:29,476 --> 0:01:30,626
now stands on its own.

47
00:01:31,176 --> 0:01:33,036
Sorry, the monitors aren't

48
00:01:33,036 --> 0:01:33,576
working down here.

49
00:01:34,516 --> 0:01:36,856
[ Laughter ]

50
00:01:37,356 --> 0:01:37,746
There we go.

51
00:01:38,016 --> 0:01:38,986
One of those is working, so I

52
00:01:38,986 --> 0:01:39,866
will go over to the left.

53
00:01:40,606 --> 0:01:42,096
Now these platforms represent a

54
00:01:42,276 --> 0:01:44,246
diverse range of devices and

55
00:01:44,246 --> 0:01:45,416
building great support for them

56
00:01:45,416 --> 0:01:47,176
is easy, thanks to a choice of

57
00:01:47,176 --> 0:01:48,666
many tools and APIs like

58
00:01:49,166 --> 0:01:51,616
AutoLayout, Size Classes and

59
00:01:51,676 --> 0:01:52,076
SwiftUI.

60
00:01:53,026 --> 0:01:54,416
So no more letterbox.

61
00:01:54,416 --> 0:01:55,606
Your users get the best

62
00:01:55,606 --> 0:01:57,266
experience when your app works

63
00:01:57,386 --> 0:01:59,096
well on a wide range of device

64
00:01:59,166 --> 0:01:59,626
sizes.

65
00:02:00,166 --> 0:02:01,586
And starting next spring, it

66
00:02:01,676 --> 0:02:03,126
will be an app store requirement

67
00:02:03,126 --> 0:02:05,196
to deliver UI that adapts to

68
00:02:05,196 --> 0:02:06,126
different screen sizes.

69
00:02:06,706 --> 0:02:09,876
Now tvOS is offering cool new

70
00:02:09,876 --> 0:02:10,316
capabilities --

71
00:02:12,016 --> 0:02:14,016
[ Laughter ]

72
00:02:14,016 --> 0:02:15,566
[ Applause ]

73
00:02:15,566 --> 0:02:15,776
There we go.

74
00:02:17,516 --> 0:02:20,776
[ Applause ]

75
00:02:21,276 --> 0:02:22,646
Now tvOS is offering cool new

76
00:02:22,646 --> 0:02:24,126
capabilities for developers this

77
00:02:24,226 --> 0:02:25,946
year, including multi-user

78
00:02:26,016 --> 0:02:27,726
support for third-party apps,

79
00:02:27,856 --> 0:02:29,316
new UI elements and options,

80
00:02:29,716 --> 0:02:31,946
SwiftUI and of course support

81
00:02:31,946 --> 0:02:34,126
for Xbox and PlayStation game

82
00:02:34,126 --> 0:02:34,936
controllers.

83
00:02:35,191 --> 0:02:37,191
[ Applause ]

84
00:02:37,366 --> 0:02:39,146
Now this morning we announced an

85
00:02:39,146 --> 0:02:41,196
incredible new hardware platform

86
00:02:41,196 --> 0:02:42,336
with the new Mac Pro.

87
00:02:42,336 --> 0:02:42,976
Do we love it?

88
00:02:43,516 --> 0:02:45,546
[ Applause ]

89
00:02:46,046 --> 0:02:47,346
It is incredible, and it will

90
00:02:47,346 --> 0:02:49,036
really unlock amazing new kinds

91
00:02:49,036 --> 0:02:49,396
of apps.

92
00:02:50,846 --> 0:02:52,316
And we also built technologies

93
00:02:52,626 --> 0:02:54,436
that span all of our platforms,

94
00:02:54,436 --> 0:02:56,006
and we'll have a look at a few

95
00:02:56,006 --> 0:02:58,066
of these areas today, including

96
00:02:58,066 --> 0:03:00,646
accessibility, privacy, machine

97
00:02:58,066 --> 0:03:00,646
accessibility, privacy, machine

98
00:03:00,646 --> 0:03:02,666
learning, Siri, augmented

99
00:03:02,666 --> 0:03:04,756
reality and finally Metal.

100
00:03:06,166 --> 0:03:07,576
Now we want to focus on these

101
00:03:07,576 --> 0:03:08,986
three big areas this afternoon,

102
00:03:08,986 --> 0:03:09,926
and we're going to start with

103
00:03:09,926 --> 0:03:11,046
developer productivity.

104
00:03:11,956 --> 0:03:13,836
Now everyone in this room knows

105
00:03:13,836 --> 0:03:15,186
that great tools can

106
00:03:15,186 --> 0:03:16,366
dramatically improve your

107
00:03:16,366 --> 0:03:17,036
productivity.

108
00:03:17,596 --> 0:03:19,466
Great tools give you more time

109
00:03:19,516 --> 0:03:21,136
to be creative and they let you

110
00:03:21,136 --> 0:03:22,376
build better apps.

111
00:03:23,296 --> 0:03:24,316
And the foundation of that

112
00:03:24,316 --> 0:03:26,106
experience is the programming

113
00:03:26,106 --> 0:03:26,606
language.

114
00:03:27,256 --> 0:03:29,226
Over the last five years, Swift

115
00:03:29,226 --> 0:03:31,326
has matured and is built into

116
00:03:31,326 --> 0:03:32,706
every Apple platform.

117
00:03:33,256 --> 0:03:34,386
And Swift gives us the

118
00:03:34,386 --> 0:03:36,156
foundation for SwiftUI.

119
00:03:37,226 --> 0:03:39,446
And Xcode is so much more than a

120
00:03:39,446 --> 0:03:41,456
code debugger -- sorry, code

121
00:03:41,456 --> 0:03:42,646
editor and debugger.

122
00:03:43,176 --> 0:03:44,456
It includes everything that you

123
00:03:44,456 --> 0:03:46,736
need to build an app, including

124
00:03:47,036 --> 0:03:48,186
support for continuous

125
00:03:48,186 --> 0:03:49,486
integration and testing.

126
00:03:49,736 --> 0:03:52,166
And it gives you tools that let

127
00:03:52,166 --> 0:03:54,026
you explore new technologies

128
00:03:54,396 --> 0:03:55,906
such as machine learning and

129
00:03:55,906 --> 0:03:56,826
augmented reality.

130
00:03:57,766 --> 0:03:59,536
And finally, built on the strong

131
00:03:59,606 --> 0:04:01,416
foundation of our platforms, the

132
00:03:59,606 --> 0:04:01,416
foundation of our platforms, the

133
00:04:01,516 --> 0:04:02,826
SwiftUI framework will

134
00:04:02,826 --> 0:04:04,996
revolutionize how you build user

135
00:04:04,996 --> 0:04:05,656
interfaces.

136
00:04:05,836 --> 0:04:07,116
And together, these three

137
00:04:07,116 --> 0:04:08,716
elements deliver a whole new

138
00:04:08,716 --> 0:04:10,486
level of productivity and they

139
00:04:10,486 --> 0:04:12,546
will fundamentally transform how

140
00:04:12,546 --> 0:04:14,006
all of you build apps.

141
00:04:14,926 --> 0:04:16,755
Now, are you ready to dive right

142
00:04:16,755 --> 0:04:17,446
into SwiftUI?

143
00:04:18,036 --> 0:04:20,036
[ Applause ]

144
00:04:20,055 --> 0:04:21,786
Let's have Josh come up and tell

145
00:04:21,786 --> 0:04:22,186
us more.

146
00:04:22,266 --> 0:04:22,506
Josh?

147
00:04:23,516 --> 0:04:25,806
[ Applause ]

148
00:04:26,306 --> 0:04:27,116
&gt;&gt; Thanks, Sebastien.

149
00:04:27,916 --> 0:04:31,336
Okay, so SwiftUI, as you saw

150
00:04:31,336 --> 0:04:32,536
this morning, is a brand-new

151
00:04:32,536 --> 0:04:33,926
user interface framework built

152
00:04:34,016 --> 0:04:36,526
from the ground up in Swift for

153
00:04:36,526 --> 0:04:36,876
Swift.

154
00:04:37,756 --> 0:04:38,816
We designed it to let you write

155
00:04:38,976 --> 0:04:40,696
less code and have the code that

156
00:04:40,696 --> 0:04:42,346
you do write be better code,

157
00:04:42,886 --> 0:04:44,186
while letting you use more of

158
00:04:44,186 --> 0:04:46,046
that code across all Apple

159
00:04:46,046 --> 0:04:46,576
platforms.

160
00:04:47,646 --> 0:04:49,086
Now first of all, there's so

161
00:04:49,086 --> 0:04:50,436
much functionality built into

162
00:04:50,436 --> 0:04:52,056
each individual line that you

163
00:04:52,106 --> 0:04:53,286
write that you're just going to

164
00:04:53,286 --> 0:04:54,636
write way less code.

165
00:04:55,516 --> 0:04:56,356
So let's take the app for

166
00:04:56,466 --> 0:04:57,806
choosing macOS release names

167
00:04:57,806 --> 0:04:58,796
that we looked at this morning,

168
00:04:59,246 --> 0:05:00,026
but without the animated

169
00:04:59,246 --> 0:05:00,026
but without the animated

170
00:05:00,026 --> 0:05:00,556
transitions.

171
00:05:01,476 --> 0:05:02,376
If you've written an app with

172
00:05:02,376 --> 0:05:04,276
UIKit before, you know the types

173
00:05:04,276 --> 0:05:05,896
of pieces that you need in order

174
00:05:05,896 --> 0:05:06,786
to build this interface.

175
00:05:07,606 --> 0:05:09,476
It's not a lot of views, but

176
00:05:09,476 --> 0:05:10,686
there are many individual

177
00:05:10,686 --> 0:05:11,836
details that you need to get

178
00:05:11,836 --> 0:05:12,016
right.

179
00:05:12,886 --> 0:05:15,136
With SwiftUI, it is way less

180
00:05:15,236 --> 0:05:15,536
code.

181
00:05:16,156 --> 0:05:18,256
Fewer than 20 lines focused on

182
00:05:18,256 --> 0:05:19,706
just three key things.

183
00:05:20,666 --> 0:05:22,636
First, a few lines to define the

184
00:05:22,696 --> 0:05:23,766
structure and layout of your

185
00:05:23,766 --> 0:05:24,126
views.

186
00:05:24,766 --> 0:05:27,456
Then some image and text views

187
00:05:27,866 --> 0:05:28,836
to display your content.

188
00:05:30,346 --> 0:05:31,726
And finally, parameters and

189
00:05:31,726 --> 0:05:33,366
modifiers to adjust how it all

190
00:05:33,366 --> 0:05:33,506
looks.

191
00:05:34,636 --> 0:05:35,706
Now let' stake a look a little

192
00:05:35,706 --> 0:05:36,896
bit more closely at just a few

193
00:05:36,896 --> 0:05:37,456
of these lines.

194
00:05:38,456 --> 0:05:39,726
The scrolling list itself is

195
00:05:39,786 --> 0:05:41,536
barely any code at all.

196
00:05:41,846 --> 0:05:43,556
You just declare the list and

197
00:05:43,666 --> 0:05:45,076
then describe the model objects

198
00:05:45,076 --> 0:05:46,476
to be used in each row.

199
00:05:46,796 --> 0:05:48,146
There's no setup, there's no

200
00:05:48,146 --> 0:05:49,656
configuration and there's no

201
00:05:49,656 --> 0:05:50,116
callbacks.

202
00:05:50,116 --> 0:05:52,596
Now the image at the top is just

203
00:05:52,596 --> 0:05:53,106
as simple.

204
00:05:53,456 --> 0:05:54,896
You display an image, clip it to

205
00:05:54,896 --> 0:05:56,416
a circle and add a shadow.

206
00:05:56,416 --> 0:05:58,906
And it's not just less code.

207
00:05:59,026 --> 0:05:59,846
It's better code.

208
00:06:00,656 --> 0:06:02,716
We designed the API to make the

209
00:06:02,716 --> 0:06:04,336
obvious approach be the right

210
00:06:04,336 --> 0:06:04,846
approach.

211
00:06:05,796 --> 0:06:07,096
The right way to create this

212
00:06:07,096 --> 0:06:09,036
label is exactly the one line of

213
00:06:09,086 --> 0:06:09,986
code that you would think to

214
00:06:09,986 --> 0:06:10,186
write.

215
00:06:10,786 --> 0:06:12,506
It supports dynamic type, Dark

216
00:06:12,506 --> 0:06:13,216
Mode and more.

217
00:06:13,856 --> 0:06:15,006
In fact, even the string

218
00:06:15,006 --> 0:06:16,826
interpolation used here is fully

219
00:06:16,826 --> 0:06:17,516
localizable.

220
00:06:18,706 --> 0:06:19,906
This simplicity eliminates

221
00:06:19,906 --> 0:06:21,576
entire categories of errors.

222
00:06:22,436 --> 0:06:23,646
Looking at our list again, its

223
00:06:23,646 --> 0:06:25,476
rows update automatically if the

224
00:06:25,476 --> 0:06:27,256
model changes, ensuring that

225
00:06:27,256 --> 0:06:28,996
your UI is always up to date and

226
00:06:28,996 --> 0:06:30,276
never displaying out-of-date

227
00:06:30,276 --> 0:06:30,396
data.

228
00:06:30,526 --> 0:06:33,496
And it's easy to read too.

229
00:06:33,596 --> 0:06:34,676
The code for this image with a

230
00:06:34,676 --> 0:06:36,336
corner radius of three says

231
00:06:36,366 --> 0:06:37,226
exactly that.

232
00:06:38,296 --> 0:06:39,946
Reading SwiftUI is like having

233
00:06:39,976 --> 0:06:41,306
someone explain that interface

234
00:06:41,416 --> 0:06:41,776
to you.

235
00:06:42,556 --> 0:06:44,296
And SwiftUi's code is available

236
00:06:44,296 --> 0:06:46,626
everywhere, helping you reuse

237
00:06:46,626 --> 0:06:48,156
more of your code across all

238
00:06:48,156 --> 0:06:48,886
Apple platforms.

239
00:06:48,886 --> 0:06:50,586
Now you've long been able to

240
00:06:50,586 --> 0:06:52,116
share your model and low-level

241
00:06:52,196 --> 0:06:53,556
drawing and compositing code,

242
00:06:54,256 --> 0:06:55,596
but higher-level UI code has

243
00:06:55,596 --> 0:06:56,306
remained mostly

244
00:06:56,306 --> 0:06:57,106
platform-specific.

245
00:06:57,926 --> 0:06:59,306
With SwiftUI, we're raising that

246
00:06:59,336 --> 0:07:01,076
bar, enabling you to share far

247
00:06:59,336 --> 0:07:01,076
bar, enabling you to share far

248
00:07:01,076 --> 0:07:01,416
more.

249
00:07:02,046 --> 0:07:03,116
Now of course you're still going

250
00:07:03,116 --> 0:07:04,076
to want to tailor your

251
00:07:04,076 --> 0:07:05,776
interfaces for each individual

252
00:07:05,776 --> 0:07:07,606
platform to ensure that your app

253
00:07:07,606 --> 0:07:09,116
feels great everywhere that you

254
00:07:09,116 --> 0:07:10,436
deploy it.

255
00:07:10,556 --> 0:07:12,106
But with SwiftUI's common set of

256
00:07:12,106 --> 0:07:13,756
API patterns, you can learn

257
00:07:13,756 --> 0:07:15,636
those tools once and then apply

258
00:07:15,636 --> 0:07:17,326
them everywhere, getting you a

259
00:07:17,326 --> 0:07:18,896
native interface on each

260
00:07:18,956 --> 0:07:19,926
platform you deploy to.

261
00:07:20,946 --> 0:07:22,206
SwiftUI is designed with a

262
00:07:22,446 --> 0:07:24,086
strong set of four core

263
00:07:24,086 --> 0:07:24,566
principles.

264
00:07:25,346 --> 0:07:27,336
First, a declarative syntax

265
00:07:27,336 --> 0:07:29,146
shifts UI programming away from

266
00:07:29,296 --> 0:07:31,096
how to update the screen and

267
00:07:31,096 --> 0:07:32,556
instead lets you just focus on

268
00:07:32,556 --> 0:07:33,466
what you want to display.

269
00:07:34,566 --> 0:07:35,626
For example, let's say that you

270
00:07:35,626 --> 0:07:36,586
want to build a label with a

271
00:07:36,626 --> 0:07:38,366
headline font and a gray color.

272
00:07:39,096 --> 0:07:40,856
Describing how to get that is a

273
00:07:40,856 --> 0:07:42,816
multi-step process with many

274
00:07:42,816 --> 0:07:44,086
steps having to happen in a

275
00:07:44,156 --> 0:07:44,916
specific order.

276
00:07:45,646 --> 0:07:48,146
But describing what you want

277
00:07:48,236 --> 0:07:49,466
requires no translation.

278
00:07:50,046 --> 0:07:52,776
Text that says Done with a font

279
00:07:52,776 --> 0:07:54,186
for a headline that's colored

280
00:07:54,226 --> 0:07:54,506
gray.

281
00:07:55,316 --> 0:07:57,106
SwiftUI lets you say exactly

282
00:07:57,106 --> 0:07:58,606
that with a great new

283
00:07:58,606 --> 0:07:59,616
declarative syntax.

284
00:07:59,616 --> 0:08:01,326
And it's the minimum code

285
00:07:59,616 --> 0:08:01,326
And it's the minimum code

286
00:08:01,326 --> 0:08:03,106
necessary to describe exactly

287
00:08:03,106 --> 0:08:03,616
your idea.

288
00:08:03,616 --> 0:08:05,396
And iteration becomes

289
00:08:05,396 --> 0:08:06,846
significantly faster as well.

290
00:08:07,316 --> 0:08:08,776
If you later need to change that

291
00:08:08,826 --> 0:08:10,516
label to become a button, that's

292
00:08:10,516 --> 0:08:11,536
a one-line change.

293
00:08:12,081 --> 0:08:14,081
[ Applause ]

294
00:08:14,146 --> 0:08:15,026
I know, it's pretty great.

295
00:08:16,516 --> 0:08:19,546
[ Applause ]

296
00:08:20,046 --> 0:08:20,626
All right, so our second

297
00:08:20,626 --> 0:08:21,846
principle is that we should

298
00:08:21,846 --> 0:08:23,246
provide automatic functionality

299
00:08:23,246 --> 0:08:24,316
whenever it's possible.

300
00:08:24,816 --> 0:08:25,996
This eliminates the need for a

301
00:08:26,126 --> 0:08:27,106
huge amount of code that you

302
00:08:27,166 --> 0:08:28,456
used to have to write by hand.

303
00:08:29,316 --> 0:08:30,456
Our app for naming macOS

304
00:08:30,456 --> 0:08:32,066
releases is pretty simple, yet

305
00:08:32,066 --> 0:08:34,015
it does include a huge amount of

306
00:08:34,015 --> 0:08:35,186
automatic functionality.

307
00:08:35,885 --> 0:08:37,645
We get default handling of

308
00:08:37,706 --> 0:08:39,756
spacing and safe area insets.

309
00:08:40,186 --> 0:08:41,826
Localizability and layout

310
00:08:41,895 --> 0:08:43,116
adjustments for right-to-left

311
00:08:43,116 --> 0:08:43,676
languages.

312
00:08:44,226 --> 0:08:47,206
Dynamic type, Dark Mode and so

313
00:08:47,206 --> 0:08:48,986
much more, all from that one

314
00:08:48,986 --> 0:08:49,776
minimal description.

315
00:08:50,376 --> 0:08:51,796
It's an incredible amount of

316
00:08:51,796 --> 0:08:53,106
automatic functionality for a

317
00:08:53,216 --> 0:08:54,776
small amount of code, but there

318
00:08:54,776 --> 0:08:56,476
is one more thing that is just

319
00:08:56,716 --> 0:08:57,936
so important that it really

320
00:08:57,936 --> 0:08:59,106
deserves special attention.

321
00:09:00,036 --> 0:09:01,396
Our modern interfaces are

322
00:09:01,396 --> 0:09:02,606
interactive and they're

323
00:09:02,606 --> 0:09:03,146
animated.

324
00:09:03,506 --> 0:09:05,026
And with SwiftUI, that same

325
00:09:05,026 --> 0:09:06,936
interface declaration is also

326
00:09:06,936 --> 0:09:08,776
automatically fully animatable.

327
00:09:09,876 --> 0:09:11,106
Animations can be enabled for

328
00:09:11,106 --> 0:09:12,856
the entire hierarchy with just

329
00:09:12,926 --> 0:09:13,786
one line of code.

330
00:09:14,406 --> 0:09:15,906
There's no bookkeeping, there's

331
00:09:15,906 --> 0:09:17,486
no preparation and there's never

332
00:09:17,486 --> 0:09:18,006
any cleanup.

333
00:09:18,636 --> 0:09:19,876
If you've used Keynote Magic

334
00:09:19,876 --> 0:09:21,766
Move animations before, SwiftUI

335
00:09:21,906 --> 0:09:24,126
animations are that easy and

336
00:09:24,126 --> 0:09:25,036
even more powerful.

337
00:09:26,556 --> 0:09:27,706
And for views that are added and

338
00:09:27,706 --> 0:09:29,726
removed, you can specify how

339
00:09:29,726 --> 0:09:31,166
they transition in and out with

340
00:09:31,166 --> 0:09:34,086
just one more line of code.

341
00:09:34,306 --> 0:09:35,086
While animations are in

342
00:09:35,126 --> 0:09:36,866
progress, your app remains fully

343
00:09:36,866 --> 0:09:38,386
interactive and responsive and

344
00:09:38,386 --> 0:09:39,756
ready to handle user input at

345
00:09:39,756 --> 0:09:40,366
any time.

346
00:09:40,816 --> 0:09:41,996
And if the user ever interrupts

347
00:09:41,996 --> 0:09:43,546
one of those animations or if

348
00:09:43,546 --> 0:09:44,716
you need to move to a new

349
00:09:44,716 --> 0:09:46,846
location, SwiftUI handles all of

350
00:09:46,846 --> 0:09:47,986
that automatically too.

351
00:09:49,506 --> 0:09:51,956
Now our third principle is that

352
00:09:51,956 --> 0:09:53,906
compositional APIs are easier to

353
00:09:53,906 --> 0:09:55,676
learn and let you iterate a lot

354
00:09:55,786 --> 0:09:56,236
faster.

355
00:09:57,276 --> 0:09:58,086
We've looked at how we can

356
00:09:58,086 --> 0:09:59,526
declare an individual view like

357
00:09:59,526 --> 0:10:00,246
this text label.

358
00:09:59,526 --> 0:10:00,246
this text label.

359
00:10:00,676 --> 0:10:02,146
But declaring more complex views

360
00:10:02,146 --> 0:10:02,956
is just as easy.

361
00:10:03,176 --> 0:10:04,336
You just compose together

362
00:10:04,426 --> 0:10:05,466
multiple smaller pieces.

363
00:10:06,386 --> 0:10:07,716
Containers like horizontal and

364
00:10:07,716 --> 0:10:09,516
vertical stacks let you easily

365
00:10:09,516 --> 0:10:11,006
build powerful layouts by just

366
00:10:11,006 --> 0:10:12,476
combining together multiple

367
00:10:12,546 --> 0:10:13,256
simple pieces.

368
00:10:14,286 --> 0:10:16,196
And SwiftUI applies composition

369
00:10:16,196 --> 0:10:17,596
to view properties as well,

370
00:10:17,906 --> 0:10:19,026
using a standard modifier

371
00:10:19,026 --> 0:10:19,596
syntax.

372
00:10:20,186 --> 0:10:21,636
A common set of modifiers can be

373
00:10:21,696 --> 0:10:23,886
applied to any view, like color

374
00:10:23,886 --> 0:10:25,046
applied here to make this text

375
00:10:25,106 --> 0:10:25,416
gray.

376
00:10:26,446 --> 0:10:27,786
This compositional approach lets

377
00:10:27,786 --> 0:10:29,696
you learn a small set of views

378
00:10:29,696 --> 0:10:31,436
and modifiers and then combine

379
00:10:31,436 --> 0:10:32,536
them together to create

380
00:10:32,536 --> 0:10:33,956
progressively more powerful

381
00:10:33,956 --> 0:10:34,486
interfaces.

382
00:10:35,466 --> 0:10:37,456
And our final principle is that

383
00:10:37,456 --> 0:10:39,306
your interface should always be

384
00:10:39,306 --> 0:10:40,406
in a consistent state.

385
00:10:41,266 --> 0:10:42,556
Your UI is a reflection of your

386
00:10:42,866 --> 0:10:44,136
app's data, so the two should

387
00:10:44,136 --> 0:10:45,856
always be in synch at all times.

388
00:10:46,666 --> 0:10:48,276
With traditional APIs, this can

389
00:10:48,276 --> 0:10:49,026
be error-prone.

390
00:10:49,026 --> 0:10:51,216
But with SwiftUI, your interface

391
00:10:51,216 --> 0:10:53,096
updates automatically any time

392
00:10:53,096 --> 0:10:53,996
the data changes.

393
00:10:55,196 --> 0:10:56,696
Now there are two common places

394
00:10:56,696 --> 0:10:57,856
that your data might likely come

395
00:10:57,856 --> 0:10:58,106
from.

396
00:10:58,496 --> 0:10:59,876
Now the first are your model

397
00:10:59,876 --> 0:11:00,246
objects.

398
00:10:59,876 --> 0:11:00,246
objects.

399
00:11:00,616 --> 0:11:01,856
And you can use your existing

400
00:11:01,856 --> 0:11:03,706
model objects directly by simply

401
00:11:03,706 --> 0:11:04,746
conforming them to a new

402
00:11:04,746 --> 0:11:06,266
bindable object protocol.

403
00:11:06,776 --> 0:11:08,206
Its only requirement is that you

404
00:11:08,256 --> 0:11:09,496
specify when the data in your

405
00:11:09,496 --> 0:11:10,116
model changes.

406
00:11:10,116 --> 0:11:12,016
Now the second place is

407
00:11:12,016 --> 0:11:13,786
temporary UI state, like whether

408
00:11:13,786 --> 0:11:15,006
the view is currently in editing

409
00:11:15,006 --> 0:11:15,256
mode.

410
00:11:15,876 --> 0:11:16,816
These are declared using a

411
00:11:16,916 --> 0:11:18,806
simple state wrapper applied to

412
00:11:18,806 --> 0:11:19,956
any property on your view.

413
00:11:20,816 --> 0:11:22,406
We're all used to every property

414
00:11:22,406 --> 0:11:24,586
on every view being mutable, but

415
00:11:25,096 --> 0:11:26,156
once you start using SwiftUI,

416
00:11:26,156 --> 0:11:27,886
you're going to be shocked to

417
00:11:27,886 --> 0:11:29,616
realize how little mutable state

418
00:11:29,616 --> 0:11:31,596
your app actually needs.

419
00:11:32,356 --> 0:11:34,586
Now whenever your model or state

420
00:11:34,586 --> 0:11:36,616
changes, that UI is going to

421
00:11:36,616 --> 0:11:37,696
update automatically.

422
00:11:38,226 --> 0:11:39,456
And because it's all Swift code,

423
00:11:39,696 --> 0:11:40,696
you get this behavior while

424
00:11:40,766 --> 0:11:41,856
still being able to use your

425
00:11:41,856 --> 0:11:43,746
model objects directly within

426
00:11:43,746 --> 0:11:44,866
that interface declaration.

427
00:11:45,776 --> 0:11:46,886
You can even transform and

428
00:11:46,946 --> 0:11:48,936
format values in line with no

429
00:11:48,936 --> 0:11:50,136
additional indirection needed.

430
00:11:51,026 --> 0:11:51,976
For example, this string

431
00:11:51,976 --> 0:11:53,016
interpolation can be used to

432
00:11:53,016 --> 0:11:54,546
format a date, resulting in

433
00:11:54,706 --> 0:11:58,256
fully localized formatted text.

434
00:11:58,416 --> 0:11:59,466
All of this means that with

435
00:11:59,536 --> 0:12:01,116
Swift UI, you're going to write

436
00:11:59,536 --> 0:12:01,116
Swift UI, you're going to write

437
00:12:01,116 --> 0:12:02,566
less code and get a more

438
00:12:02,566 --> 0:12:03,216
consistent UI.

439
00:12:04,616 --> 0:12:05,666
Those are the four core

440
00:12:05,666 --> 0:12:06,666
principles of SwiftUI.

441
00:12:07,296 --> 0:12:08,946
A powerful declarative syntax

442
00:12:09,306 --> 0:12:10,506
enabling a huge amount of

443
00:12:10,506 --> 0:12:12,336
automatic functionality with a

444
00:12:12,336 --> 0:12:14,086
compositional API that ensures

445
00:12:14,086 --> 0:12:15,636
your interface is always in a

446
00:12:15,636 --> 0:12:16,536
consistent state.

447
00:12:17,806 --> 0:12:19,006
And a great new framework

448
00:12:19,086 --> 0:12:20,906
deserves incredible tools.

449
00:12:21,196 --> 0:12:22,306
And we've created a whole

450
00:12:22,306 --> 0:12:23,726
brand-new workflow within Xcode

451
00:12:23,726 --> 0:12:25,476
designed from the ground up for

452
00:12:25,476 --> 0:12:25,956
SwiftUI.

453
00:12:26,946 --> 0:12:27,966
You get the power and

454
00:12:28,006 --> 0:12:29,946
flexibility of code combined

455
00:12:30,036 --> 0:12:31,676
with the ease of use and rapid

456
00:12:31,676 --> 0:12:33,346
iteration of a UI tool.

457
00:12:34,266 --> 0:12:35,346
You always have access to both

458
00:12:35,346 --> 0:12:36,796
at all times, so you'll never

459
00:12:36,796 --> 0:12:37,876
have to choose between them

460
00:12:37,876 --> 0:12:38,086
again.

461
00:12:39,026 --> 0:12:40,346
And because the tools work on

462
00:12:40,346 --> 0:12:41,676
your actual existing source

463
00:12:41,676 --> 0:12:43,816
code, you have a truly live

464
00:12:43,876 --> 0:12:44,936
development experience.

465
00:12:45,796 --> 0:12:47,196
Now to really understand how

466
00:12:47,196 --> 0:12:48,456
amazing this workflow is, you

467
00:12:48,456 --> 0:12:49,826
just need to see it again live.

468
00:12:49,826 --> 0:12:51,516
And to show it to you now, I'll

469
00:12:51,516 --> 0:12:52,516
invite Kevin up to give you a

470
00:12:52,516 --> 0:12:52,796
demo.

471
00:12:53,516 --> 0:12:58,696
[ Applause ]

472
00:12:59,196 --> 0:12:59,816
&gt;&gt; Thanks, Josh.

473
00:13:00,666 --> 0:13:02,156
You guys ready to have some fun?

474
00:13:02,376 --> 0:13:03,446
All right, so I'm building a

475
00:13:03,446 --> 0:13:04,736
hiking app and I want to add a

476
00:13:04,856 --> 0:13:06,586
view to my table view cell that

477
00:13:06,586 --> 0:13:08,376
tells me how difficult a trail

478
00:13:08,376 --> 0:13:08,566
is.

479
00:13:08,626 --> 0:13:10,616
So we're going to start in the

480
00:13:10,616 --> 0:13:11,206
library.

481
00:13:11,206 --> 0:13:12,196
We're going to have some text.

482
00:13:12,196 --> 0:13:14,206
And as I'm dragging, Xcode is

483
00:13:14,206 --> 0:13:15,986
suggesting layouts for me.

484
00:13:16,336 --> 0:13:17,446
Now I just tell Xcode where I

485
00:13:17,446 --> 0:13:19,056
want it and Xcode figures out

486
00:13:19,116 --> 0:13:20,476
the layout for me.

487
00:13:21,336 --> 0:13:22,226
And now we can edit the

488
00:13:22,226 --> 0:13:23,226
properties of this view.

489
00:13:23,226 --> 0:13:24,556
So I'm just going to command

490
00:13:24,556 --> 0:13:26,156
click in the canvas here and get

491
00:13:26,226 --> 0:13:28,116
custom-tailored inspectors right

492
00:13:28,176 --> 0:13:28,456
here.

493
00:13:28,926 --> 0:13:30,056
Let's make this text a little

494
00:13:30,056 --> 0:13:30,616
bit smaller.

495
00:13:30,616 --> 0:13:32,256
Now watch -- watch the code

496
00:13:32,256 --> 0:13:33,296
while I do this.

497
00:13:33,476 --> 0:13:35,006
You'll see it writes the code

498
00:13:35,006 --> 0:13:35,556
for me.

499
00:13:37,136 --> 0:13:39,086
Now, we can do the same thing

500
00:13:39,086 --> 0:13:40,706
over here in the source editor

501
00:13:40,706 --> 0:13:42,656
by just editing the code.

502
00:13:42,656 --> 0:13:44,406
And you can see Xcode builds and

503
00:13:44,406 --> 0:13:45,906
runs my code and updates the

504
00:13:45,906 --> 0:13:47,236
canvas on the right.

505
00:13:48,726 --> 0:13:50,046
Now no matter where I'm working,

506
00:13:50,326 --> 0:13:52,396
I get access to all of my design

507
00:13:52,396 --> 0:13:52,616
tools.

508
00:13:53,116 --> 0:13:54,046
So I'm just going to command

509
00:13:54,046 --> 0:13:55,596
click on this V stack, going to

510
00:13:55,596 --> 0:13:56,586
open up the inspectors.

511
00:13:56,826 --> 0:13:58,326
And again I can just modify the

512
00:13:58,326 --> 0:13:59,576
properties that I want.

513
00:13:59,826 --> 0:14:02,046
It's just so fast to iterate.

514
00:13:59,826 --> 0:14:02,046
It's just so fast to iterate.

515
00:14:02,726 --> 0:14:05,116
Now, you might notice that this

516
00:14:05,116 --> 0:14:06,656
view has a couple inputs like

517
00:14:06,706 --> 0:14:08,756
this title and this difficulty.

518
00:14:08,996 --> 0:14:11,396
So how does Xcode know what data

519
00:14:11,716 --> 0:14:13,066
to show in the preview?

520
00:14:13,066 --> 0:14:13,916
This has always been one of the

521
00:14:13,916 --> 0:14:15,286
challenges with UI development:

522
00:14:15,366 --> 0:14:17,156
what data do we show during

523
00:14:17,156 --> 0:14:17,826
design time?

524
00:14:18,166 --> 0:14:19,906
And this is why we invented

525
00:14:20,046 --> 0:14:21,296
Xcode previews.

526
00:14:21,296 --> 0:14:22,346
What is a preview?

527
00:14:22,346 --> 0:14:23,106
I'll show you.

528
00:14:23,526 --> 0:14:24,676
So let me scroll down here.

529
00:14:25,866 --> 0:14:27,256
This snippet of code here -- a

530
00:14:27,336 --> 0:14:28,846
preview is just a snippet of

531
00:14:28,846 --> 0:14:30,506
code in my application that

532
00:14:30,506 --> 0:14:32,306
configures it for design time.

533
00:14:32,846 --> 0:14:34,216
Because it's in my application,

534
00:14:34,216 --> 0:14:36,236
I get access to all the code in

535
00:14:36,236 --> 0:14:36,926
my project.

536
00:14:37,056 --> 0:14:38,296
And because it's in my project,

537
00:14:38,296 --> 0:14:40,266
I can check it in and share it

538
00:14:40,266 --> 0:14:41,146
with my team members.

539
00:14:41,646 --> 0:14:42,696
And it's so easy to try

540
00:14:42,696 --> 0:14:43,526
different data.

541
00:14:43,526 --> 0:14:44,926
Now actually here Half Dome is

542
00:14:44,976 --> 0:14:45,546
pretty hard.

543
00:14:45,546 --> 0:14:46,986
So let's see what it looks like

544
00:14:46,986 --> 0:14:47,456
at hard.

545
00:14:47,456 --> 0:14:49,156
And that's because it's 16

546
00:14:49,156 --> 0:14:50,466
miles, not 6.

547
00:14:50,566 --> 0:14:51,806
And that's really compiling

548
00:14:51,896 --> 0:14:52,516
code.

549
00:14:53,806 --> 0:14:54,956
Now because this is SwiftUI

550
00:14:54,956 --> 0:14:57,276
code, I get access to all the

551
00:14:57,276 --> 0:14:58,736
modifiers that I would use for

552
00:14:58,736 --> 0:15:00,436
the rest of my UI development.

553
00:14:58,736 --> 0:15:00,436
the rest of my UI development.

554
00:15:01,056 --> 0:15:02,276
So we can see what it looks like

555
00:15:02,426 --> 0:15:03,436
in Dark Mode.

556
00:15:04,406 --> 0:15:05,886
And I also have preview-specific

557
00:15:05,886 --> 0:15:06,796
modifiers as well.

558
00:15:06,796 --> 0:15:08,636
So by default previews are the

559
00:15:08,726 --> 0:15:10,596
size of a device, but since

560
00:15:10,596 --> 0:15:11,546
we're working on a table view

561
00:15:11,546 --> 0:15:13,346
cell, let's just focus in on

562
00:15:13,466 --> 0:15:13,846
that content.

563
00:15:13,846 --> 0:15:15,746
So I'll just make that the size

564
00:15:15,986 --> 0:15:16,516
that fits.

565
00:15:17,326 --> 0:15:18,546
Okay, now here is the really

566
00:15:18,546 --> 0:15:19,496
cool thing about previews.

567
00:15:19,846 --> 0:15:21,506
You can have as many as you

568
00:15:21,506 --> 0:15:21,846
want.

569
00:15:22,546 --> 0:15:24,156
So let's add a second preview

570
00:15:24,696 --> 0:15:26,216
with completely different data.

571
00:15:26,216 --> 0:15:28,346
But let's not stop there.

572
00:15:28,936 --> 0:15:31,146
Let's command click, repeat it a

573
00:15:31,146 --> 0:15:31,886
couple of times.

574
00:15:32,526 --> 0:15:34,786
Let's enumerate over some common

575
00:15:34,836 --> 0:15:36,756
dynamic type sizes and then

576
00:15:36,756 --> 0:15:38,606
let's configure our cell to use

577
00:15:38,606 --> 0:15:39,536
that dynamic type size.

578
00:15:39,536 --> 0:15:41,106
And there at a glance I can see

579
00:15:41,106 --> 0:15:42,726
my cell with light mode, Dark

580
00:15:42,726 --> 0:15:44,186
Mode, multiple different dynamic

581
00:15:44,186 --> 0:15:44,956
type sizes all at the same time.

582
00:15:45,516 --> 0:15:55,566
[ Applause ]

583
00:15:56,066 --> 0:15:57,256
Now when I tap on this cell, I

584
00:15:57,256 --> 0:15:58,666
want to go to a detailed view.

585
00:15:59,186 --> 0:16:00,106
So let's switch over to that

586
00:15:59,186 --> 0:16:00,106
So let's switch over to that

587
00:16:00,106 --> 0:16:02,146
file now and take a look.

588
00:16:02,796 --> 0:16:04,796
Now I've learned through the

589
00:16:04,796 --> 0:16:05,966
years of hiking that you should

590
00:16:05,966 --> 0:16:08,896
never judge a trail by its name.

591
00:16:08,896 --> 0:16:10,276
So it's really important to me

592
00:16:10,276 --> 0:16:12,726
that we can configure our detail

593
00:16:12,726 --> 0:16:14,586
view to make that image really

594
00:16:14,586 --> 0:16:15,036
large.

595
00:16:15,036 --> 0:16:16,356
And I've already done that with

596
00:16:16,356 --> 0:16:18,056
some SwiftUI state here.

597
00:16:18,056 --> 0:16:19,566
So when we tap the banner, we

598
00:16:19,856 --> 0:16:21,626
want to toggle that expansion

599
00:16:21,626 --> 0:16:21,986
state.

600
00:16:22,546 --> 0:16:24,206
Now I can test that right here

601
00:16:24,206 --> 0:16:26,106
in the UI just by clicking this

602
00:16:26,196 --> 0:16:26,676
play button.

603
00:16:27,446 --> 0:16:28,666
This takes any preview that I

604
00:16:28,746 --> 0:16:30,326
have and makes it fully

605
00:16:30,326 --> 0:16:30,946
interactive.

606
00:16:31,856 --> 0:16:33,406
So I can just click and test out

607
00:16:33,986 --> 0:16:35,106
those different expansion

608
00:16:35,106 --> 0:16:35,436
states.

609
00:16:36,056 --> 0:16:38,176
Now we can really polish this up

610
00:16:38,176 --> 0:16:38,956
with an animation.

611
00:16:38,956 --> 0:16:39,866
It's so easy.

612
00:16:40,416 --> 0:16:41,726
So I can just wrap my state

613
00:16:41,726 --> 0:16:43,706
change in a whip animation

614
00:16:43,706 --> 0:16:46,896
block, and now I get a beautiful

615
00:16:46,896 --> 0:16:47,936
default animation.

616
00:16:50,516 --> 0:16:56,546
[ Applause ]

617
00:16:57,046 --> 0:16:58,346
And it's just as easy to

618
00:16:58,346 --> 0:16:59,346
customize that.

619
00:16:59,566 --> 0:17:01,126
So let's slow it down for some

620
00:16:59,566 --> 0:17:01,126
So let's slow it down for some

621
00:17:01,126 --> 0:17:03,806
dramatic effect, and now I get a

622
00:17:03,806 --> 0:17:05,136
beautiful animation opening it

623
00:17:05,136 --> 0:17:05,306
up.

624
00:17:05,955 --> 0:17:07,296
Now what's so cool about SwiftUI

625
00:17:07,406 --> 0:17:09,036
is that every animation is

626
00:17:09,066 --> 0:17:10,546
cancellable and reversible,

627
00:17:10,675 --> 0:17:11,715
leaving my application

628
00:17:11,715 --> 0:17:13,356
responsive the whole time.

629
00:17:14,766 --> 0:17:16,205
Okay, so we have a table view

630
00:17:16,236 --> 0:17:17,996
cell and we have a detail view.

631
00:17:18,175 --> 0:17:19,816
So let's put it all together.

632
00:17:19,816 --> 0:17:21,656
So I'm going to switch over to

633
00:17:21,656 --> 0:17:23,876
my last value here, which has a

634
00:17:23,876 --> 0:17:25,486
bunch of different trails and a

635
00:17:25,486 --> 0:17:25,746
list.

636
00:17:26,736 --> 0:17:27,996
So what I want to do is I

637
00:17:27,996 --> 0:17:29,066
actually want to see what this

638
00:17:29,126 --> 0:17:30,476
looks like on a real device.

639
00:17:31,166 --> 0:17:32,346
So with the click of a button --

640
00:17:32,346 --> 0:17:33,466
let's click this -- Xcode is

641
00:17:33,466 --> 0:17:34,866
going to build my project for

642
00:17:34,866 --> 0:17:35,246
the device.

643
00:17:35,246 --> 0:17:36,476
It's going to install it and

644
00:17:36,476 --> 0:17:38,066
it's going to launch my preview

645
00:17:38,066 --> 0:17:38,906
right here on the device.

646
00:17:38,906 --> 0:17:39,996
And you can see it's fully

647
00:17:39,996 --> 0:17:41,316
interactive right here.

648
00:17:41,796 --> 0:17:43,776
So first let's use that cell

649
00:17:43,776 --> 0:17:44,296
that we built.

650
00:17:44,876 --> 0:17:46,376
So I'll just change this text to

651
00:17:46,376 --> 0:17:48,596
be a trail cell.

652
00:17:49,366 --> 0:17:50,446
Now you can see we're seeing our

653
00:17:50,446 --> 0:17:51,596
trails show up there.

654
00:17:51,596 --> 0:17:53,496
And now when I tap on this, I

655
00:17:53,496 --> 0:17:54,646
want it to go to our detail view

656
00:17:54,646 --> 0:17:55,096
that we built.

657
00:17:55,396 --> 0:17:56,796
This is so easy with SwiftUI.

658
00:17:56,796 --> 0:17:58,836
It's just going to wrap this in

659
00:17:58,836 --> 0:18:00,816
a navigation button, and that

660
00:17:58,836 --> 0:18:00,816
a navigation button, and that

661
00:18:00,816 --> 0:18:02,106
tells us to go to our detailed

662
00:18:02,106 --> 0:18:02,396
view.

663
00:18:02,396 --> 0:18:03,786
And now you can see the chevron

664
00:18:03,836 --> 0:18:04,186
shows up.

665
00:18:04,186 --> 0:18:05,486
So let's check out Snow Creek

666
00:18:05,486 --> 0:18:07,026
and let's move in on that

667
00:18:07,026 --> 0:18:07,766
picture.

668
00:18:07,766 --> 0:18:10,346
And okay, snowy and difficult.

669
00:18:10,346 --> 0:18:11,536
That does not sound like a fun

670
00:18:11,536 --> 0:18:11,896
trail.

671
00:18:12,476 --> 0:18:13,546
So what I'm going to do with

672
00:18:13,546 --> 0:18:15,516
just one line of SwiftUI code is

673
00:18:15,516 --> 0:18:16,816
add swipe to delete.

674
00:18:16,816 --> 0:18:19,266
And now we can say, "We don't

675
00:18:19,266 --> 0:18:20,636
want to do that trail."

676
00:18:20,636 --> 0:18:23,476
And now lastly, let's see what

677
00:18:23,476 --> 0:18:24,756
it looks like in Dark Mode.

678
00:18:24,946 --> 0:18:27,026
Without any work, it's going to

679
00:18:27,026 --> 0:18:28,406
put my preview in Dark Mode and

680
00:18:28,406 --> 0:18:29,916
you can see it looks beautiful.

681
00:18:30,516 --> 0:18:38,696
[ Applause ]

682
00:18:39,196 --> 0:18:41,226
We can tap on our valley floor,

683
00:18:41,226 --> 0:18:41,916
zoom in.

684
00:18:42,036 --> 0:18:44,056
And that looks like a great way

685
00:18:44,106 --> 0:18:44,876
to end the week.

686
00:18:45,036 --> 0:18:46,176
So we just built an app with

687
00:18:46,176 --> 0:18:47,836
navigation, dynamic type size,

688
00:18:47,916 --> 0:18:49,386
light mode, Dark Mode, multiple

689
00:18:49,386 --> 0:18:51,126
different data and saw on the

690
00:18:51,206 --> 0:18:53,246
real device all without ever

691
00:18:53,246 --> 0:18:54,006
building and running.

692
00:18:54,346 --> 0:18:55,156
Now that's fun.

693
00:18:55,156 --> 0:18:56,746
All right, Josh, back to you.

694
00:18:57,516 --> 0:19:04,706
[ Applause ]

695
00:18:57,516 --> 0:19:04,706
[ Applause ]

696
00:19:05,206 --> 0:19:05,576
&gt;&gt; Thanks, Kevin.

697
00:19:06,206 --> 0:19:07,266
All right, this is really an

698
00:19:07,266 --> 0:19:08,626
incredible new workflow for

699
00:19:08,706 --> 0:19:09,476
fully native code.

700
00:19:10,016 --> 0:19:10,776
What you do in the tool is

701
00:19:10,776 --> 0:19:12,596
always debuggable, diffable,

702
00:19:12,796 --> 0:19:14,556
searchable, and understandable.

703
00:19:15,036 --> 0:19:16,296
And because you can always edit

704
00:19:16,296 --> 0:19:17,726
the code directly, you get

705
00:19:17,726 --> 0:19:19,226
incredible flexibility in your

706
00:19:19,226 --> 0:19:19,776
workflow.

707
00:19:20,116 --> 0:19:21,786
And SwiftUI is deeply integrated

708
00:19:21,786 --> 0:19:23,076
in all of our operating systems,

709
00:19:23,136 --> 0:19:25,046
so using it results in a fully

710
00:19:25,046 --> 0:19:26,356
native app for whichever

711
00:19:26,416 --> 0:19:27,226
platforms you target.

712
00:19:27,756 --> 0:19:28,756
You get the same performance,

713
00:19:28,996 --> 0:19:30,596
the same behavior and the same

714
00:19:30,596 --> 0:19:32,086
controls as any other native

715
00:19:32,086 --> 0:19:32,596
app.

716
00:19:33,056 --> 0:19:34,406
And you can adopt SwiftUI at

717
00:19:34,596 --> 0:19:35,296
your own pace.

718
00:19:35,846 --> 0:19:36,776
You can use it for anything,

719
00:19:36,776 --> 0:19:38,576
from just one view in your app

720
00:19:38,576 --> 0:19:39,866
all the way up to the entire

721
00:19:39,866 --> 0:19:40,546
application.

722
00:19:41,066 --> 0:19:42,416
It works seamlessly with all of

723
00:19:42,416 --> 0:19:44,146
your existing UIKit, AppKit and

724
00:19:44,146 --> 0:19:45,906
WatchKit code so you don't need

725
00:19:45,906 --> 0:19:47,116
to rewrite anything.

726
00:19:47,116 --> 0:19:48,856
And to get you up to speed

727
00:19:48,856 --> 0:19:50,346
quickly, our documentation team

728
00:19:50,346 --> 0:19:51,926
has developed a brand-new style

729
00:19:51,926 --> 0:19:53,296
of interactive documentation.

730
00:19:53,816 --> 0:19:54,616
It quickly takes you

731
00:19:54,686 --> 0:19:56,596
step-by-step from creating a new

732
00:19:56,596 --> 0:19:57,846
project all the way up to

733
00:19:57,846 --> 0:19:59,086
building a fully interactive

734
00:19:59,086 --> 0:19:59,516
interface.

735
00:20:00,036 --> 0:20:00,876
So you'll be up to speed in no

736
00:20:00,876 --> 0:20:00,976
time.

737
00:20:01,516 --> 0:20:07,946
[ Applause ]

738
00:20:08,446 --> 0:20:09,856
So that's SwiftUI and some of

739
00:20:09,856 --> 0:20:11,086
the new tools in Xcode.

740
00:20:11,526 --> 0:20:13,166
Of course, this is a huge year

741
00:20:13,166 --> 0:20:15,116
for Swift and Xcode, so there's

742
00:20:15,116 --> 0:20:16,166
even more to this story.

743
00:20:16,436 --> 0:20:17,416
And to tell you more about it,

744
00:20:17,416 --> 0:20:18,576
I'll hand things off to Matthew.

745
00:20:19,066 --> 0:20:19,296
Thanks.

746
00:20:20,516 --> 0:20:24,866
[ Applause ]

747
00:20:25,366 --> 0:20:26,016
&gt;&gt; Thank you, Josh.

748
00:20:26,806 --> 0:20:28,106
Our tools released this year

749
00:20:28,106 --> 0:20:29,526
bring together innovations in

750
00:20:29,636 --> 0:20:32,236
Swift and Xcode to deliver some

751
00:20:32,236 --> 0:20:32,966
awesome results.

752
00:20:33,876 --> 0:20:34,796
So let's start with Swift.

753
00:20:36,106 --> 0:20:38,016
Now in our fifth year, Swift has

754
00:20:38,016 --> 0:20:39,686
matured and is continuing to

755
00:20:39,686 --> 0:20:40,326
leap forward.

756
00:20:40,696 --> 0:20:42,096
Where our newest and flagship

757
00:20:42,176 --> 0:20:43,636
technologies, from machine

758
00:20:43,636 --> 0:20:45,116
learning to augmented reality

759
00:20:45,496 --> 0:20:46,906
are possible only because of

760
00:20:46,906 --> 0:20:48,896
Swift and it now being part of

761
00:20:48,896 --> 0:20:49,126
our OS.

762
00:20:50,446 --> 0:20:51,576
To achieve this, earlier this

763
00:20:51,576 --> 0:20:53,226
spring we introduced ABI

764
00:20:53,536 --> 0:20:55,356
stability which reduces the size

765
00:20:55,356 --> 0:20:56,956
of your apps by using a single

766
00:20:57,106 --> 0:20:57,946
shared Swift runtime.

767
00:20:58,516 --> 0:21:04,546
[ Applause ]

768
00:20:58,516 --> 0:21:04,546
[ Applause ]

769
00:21:05,046 --> 0:21:05,836
And we are following that up

770
00:21:05,836 --> 0:21:07,936
today with module stability

771
00:21:08,006 --> 0:21:09,146
which ensures compatibility --

772
00:21:09,196 --> 0:21:09,316
yes.

773
00:21:10,516 --> 0:21:14,046
[ Applause ]

774
00:21:14,546 --> 0:21:15,626
This completes the picture by

775
00:21:15,626 --> 0:21:17,266
ensuring compatibility for your

776
00:21:17,266 --> 0:21:18,846
binaries with the current and

777
00:21:18,846 --> 0:21:20,176
future versions of the Swift

778
00:21:20,176 --> 0:21:20,626
compiler.

779
00:21:21,656 --> 0:21:22,726
And these come alongside a

780
00:21:22,726 --> 0:21:24,066
number of other language

781
00:21:24,066 --> 0:21:26,116
features, tools editions and

782
00:21:26,116 --> 0:21:27,706
performance and code size

783
00:21:27,776 --> 0:21:29,236
improvements, all which further

784
00:21:29,236 --> 0:21:30,566
extend the potential Swift

785
00:21:30,566 --> 0:21:31,936
brings to your projects.

786
00:21:33,436 --> 0:21:35,276
So Swift is already the language

787
00:21:35,276 --> 0:21:37,106
for your apps and now more than

788
00:21:37,106 --> 0:21:38,836
ever for common code to share

789
00:21:38,836 --> 0:21:40,416
across all Apple platforms.

790
00:21:41,616 --> 0:21:42,906
In fact, sharing is the reason

791
00:21:42,906 --> 0:21:45,016
we created Swift Packages which

792
00:21:45,016 --> 0:21:46,426
are the best way to develop and

793
00:21:46,426 --> 0:21:48,346
share your own code and reuse

794
00:21:48,346 --> 0:21:49,096
code from others.

795
00:21:49,776 --> 0:21:51,436
And today we have two big

796
00:21:51,436 --> 0:21:51,776
announcements.

797
00:21:53,636 --> 0:21:54,896
GitHub will be adding support

798
00:21:54,896 --> 0:21:56,556
for Swift packages to the GitHub

799
00:21:56,556 --> 0:21:57,876
Package Registry.

800
00:21:58,516 --> 0:22:05,546
[ Applause ]

801
00:21:58,516 --> 0:22:05,546
[ Applause ]

802
00:22:06,046 --> 0:22:07,396
Which is perfect because Xcode

803
00:22:07,396 --> 0:22:08,946
now seamlessly supports Swift

804
00:22:09,066 --> 0:22:10,216
packages for apps on iOS, iPadOS

805
00:22:10,216 --> 0:22:11,876
and all of our platforms.

806
00:22:12,516 --> 0:22:19,736
[ Applause ]

807
00:22:20,236 --> 0:22:21,446
Swift packages are top-level

808
00:22:21,446 --> 0:22:23,346
items in your workspaces, always

809
00:22:23,346 --> 0:22:25,576
visible, always accessible, and

810
00:22:25,576 --> 0:22:26,556
deeply integrated.

811
00:22:27,386 --> 0:22:28,796
Packages from the community and

812
00:22:28,796 --> 0:22:30,376
those packages you create get

813
00:22:30,376 --> 0:22:32,176
instant access to all of Xcode's

814
00:22:32,176 --> 0:22:33,716
work flows for source control,

815
00:22:33,766 --> 0:22:35,836
debugging, testing, the works.

816
00:22:36,806 --> 0:22:38,176
So Swift packages built into

817
00:22:38,176 --> 0:22:40,716
Xcode, it's sharing code the way

818
00:22:40,716 --> 0:22:41,436
you've always wanted.

819
00:22:43,076 --> 0:22:44,386
Now that's just the start of our

820
00:22:44,486 --> 0:22:45,846
Xcode release this year, which

821
00:22:45,846 --> 0:22:47,726
is focused on maximizing your

822
00:22:47,726 --> 0:22:48,326
productivity.

823
00:22:48,956 --> 0:22:49,726
And we have a number of

824
00:22:49,726 --> 0:22:50,796
improvements today to share with

825
00:22:50,826 --> 0:22:53,396
you as we take Xcode up to 11.

826
00:22:54,506 --> 0:22:56,896
So let's get started with one of

827
00:22:56,896 --> 0:22:58,556
our biggest changes which is the

828
00:22:58,556 --> 0:22:59,356
Xcode Workspace.

829
00:23:00,086 --> 0:23:02,006
We are giving you full editorial

830
00:23:02,006 --> 0:23:02,526
control.

831
00:23:02,826 --> 0:23:04,106
You can now create and manage

832
00:23:04,106 --> 0:23:05,996
editors however you like.

833
00:23:06,896 --> 0:23:08,296
Whatever your preferred style

834
00:23:08,296 --> 0:23:09,716
and layout is, you can simply

835
00:23:09,716 --> 0:23:11,676
add and remove editors whenever

836
00:23:11,816 --> 0:23:13,476
and wherever you see fit.

837
00:23:14,516 --> 0:23:19,826
[ Applause ]

838
00:23:20,326 --> 0:23:22,886
And even better, your workspaces

839
00:23:22,886 --> 0:23:24,246
can now focus too.

840
00:23:24,246 --> 0:23:28,116
So you can take any editor and

841
00:23:28,166 --> 0:23:32,246
maximize it, and then when

842
00:23:32,246 --> 0:23:33,136
you're done, just put it back

843
00:23:33,136 --> 0:23:34,176
and it will go right back to

844
00:23:34,176 --> 0:23:34,936
where you started.

845
00:23:35,516 --> 0:23:40,606
[ Applause ]

846
00:23:41,106 --> 0:23:41,916
So whether you're working on the

847
00:23:41,976 --> 0:23:43,766
smallest of laptops or with the

848
00:23:43,766 --> 0:23:45,436
largest of displays, your

849
00:23:45,436 --> 0:23:47,176
workspace now works for you.

850
00:23:49,396 --> 0:23:50,886
Now the related content in our

851
00:23:50,886 --> 0:23:53,146
editors, the smart selections

852
00:23:53,146 --> 0:23:54,676
like counterparts, are also

853
00:23:54,676 --> 0:23:55,866
getting a huge boost.

854
00:23:57,246 --> 0:23:58,536
There are new options like

855
00:23:58,646 --> 0:24:01,236
previews, canvas, live views and

856
00:23:58,646 --> 0:24:01,236
previews, canvas, live views and

857
00:24:01,236 --> 0:24:01,476
more.

858
00:24:02,356 --> 0:24:03,736
You can use the related content

859
00:24:03,736 --> 0:24:05,586
in any editor in your workspace.

860
00:24:06,546 --> 0:24:07,626
And you'll like this one best of

861
00:24:07,626 --> 0:24:07,996
all.

862
00:24:08,126 --> 0:24:09,596
When there is no content, they

863
00:24:09,596 --> 0:24:11,466
automatically disappear so you

864
00:24:11,466 --> 0:24:12,706
no longer need to manager their

865
00:24:12,706 --> 0:24:13,276
visibility.

866
00:24:14,516 --> 0:24:18,686
[ Applause ]

867
00:24:19,186 --> 0:24:20,446
Now once you get your workspace

868
00:24:20,506 --> 0:24:22,146
set up, it's all about the

869
00:24:22,146 --> 0:24:23,306
editing, and I'd like to show

870
00:24:23,306 --> 0:24:24,596
you a quick demonstration of

871
00:24:24,596 --> 0:24:25,626
some of the new source editing

872
00:24:25,626 --> 0:24:26,706
features we have for you this

873
00:24:26,706 --> 0:24:26,846
year.

874
00:24:39,046 --> 0:24:39,956
To help you configure each

875
00:24:39,956 --> 0:24:41,596
editor the way you like, there's

876
00:24:41,596 --> 0:24:43,106
a new Options menu in the upper

877
00:24:43,106 --> 0:24:43,276
right.

878
00:24:44,186 --> 0:24:45,426
You can see here I can enable

879
00:24:45,426 --> 0:24:46,456
the assistants or any of the

880
00:24:46,456 --> 0:24:47,226
related content.

881
00:24:47,856 --> 0:24:49,076
I could turn on code coverage or

882
00:24:49,126 --> 0:24:50,106
source control authors.

883
00:24:50,106 --> 0:24:51,616
I'm going to turn on our newest

884
00:24:51,616 --> 0:24:52,806
feature, Mini map.

885
00:24:54,676 --> 0:24:55,646
So the mini map gives you a

886
00:24:55,646 --> 0:24:57,776
structural overview of your file

887
00:24:57,926 --> 0:24:58,726
to help you navigate.

888
00:24:59,326 --> 0:25:00,586
You can see documentations,

889
00:24:59,326 --> 0:25:00,586
You can see documentations,

890
00:25:00,586 --> 0:25:01,656
method and functions.

891
00:25:02,226 --> 0:25:03,256
It makes it really easy to move

892
00:25:03,256 --> 0:25:04,176
about the file.

893
00:25:05,216 --> 0:25:06,216
If you'd like to leave yourself

894
00:25:06,256 --> 0:25:07,476
some other landmarks, you can

895
00:25:07,476 --> 0:25:09,216
use the mark syntax to add

896
00:25:09,216 --> 0:25:10,826
labels and horizontal dividers

897
00:25:11,126 --> 0:25:12,586
that show up in your source and

898
00:25:12,586 --> 0:25:13,496
in the mini map.

899
00:25:15,516 --> 0:25:19,756
[ Applause ]

900
00:25:20,256 --> 0:25:21,536
Now if I hover over the mini

901
00:25:21,536 --> 0:25:22,806
map, you'll see the symbolic

902
00:25:22,806 --> 0:25:24,256
landmarks for the file.

903
00:25:24,996 --> 0:25:26,606
Here's a pro tip: hold down the

904
00:25:26,606 --> 0:25:28,166
command key and you'll see all

905
00:25:28,166 --> 0:25:29,646
of the landmarks for the file to

906
00:25:29,676 --> 0:25:30,846
make it really easy to navigate

907
00:25:30,846 --> 0:25:31,826
to exactly where you want to go.

908
00:25:32,516 --> 0:25:36,546
[ Applause ]

909
00:25:37,046 --> 0:25:37,836
And the mini map will show you

910
00:25:37,876 --> 0:25:39,736
issues, test failures, even

911
00:25:39,736 --> 0:25:40,836
in-file find results.

912
00:25:41,396 --> 0:25:42,386
And we've made it fully

913
00:25:42,386 --> 0:25:42,846
accessible.

914
00:25:44,366 --> 0:25:45,366
You'll find our source editor

915
00:25:45,366 --> 0:25:46,756
now pops and your code is more

916
00:25:46,756 --> 0:25:47,906
vivid as we've deepened our

917
00:25:47,906 --> 0:25:48,686
syntax coloring.

918
00:25:49,506 --> 0:25:50,236
You'll also see that we've

919
00:25:50,236 --> 0:25:51,386
increased our documentation

920
00:25:51,426 --> 0:25:53,766
support here with italics, bold

921
00:25:53,766 --> 0:25:54,686
and code voice in the

922
00:25:54,686 --> 0:25:55,416
documentation.

923
00:25:56,326 --> 0:25:57,296
You'll also see that when you

924
00:25:57,296 --> 0:25:58,646
add documentation, it

925
00:25:58,646 --> 0:25:59,906
automatically adds in missing

926
00:25:59,906 --> 0:26:00,856
parameters that you may have

927
00:25:59,906 --> 0:26:00,856
parameters that you may have

928
00:26:00,856 --> 0:26:02,546
added after you typed your

929
00:26:02,546 --> 0:26:02,976
documentation.

930
00:26:03,516 --> 0:26:09,556
[ Applause ]

931
00:26:10,056 --> 0:26:10,926
And what's even better is to

932
00:26:10,926 --> 0:26:12,056
help you keep your documentation

933
00:26:12,056 --> 0:26:12,826
and code in synch.

934
00:26:13,066 --> 0:26:14,126
You'll find Edit All and Scope

935
00:26:14,126 --> 0:26:15,676
now changes both, all at the

936
00:26:15,676 --> 0:26:15,976
same time.

937
00:26:16,516 --> 0:26:21,626
[ Applause ]

938
00:26:22,126 --> 0:26:23,206
Now we also wanted to add some

939
00:26:23,206 --> 0:26:24,336
additional help to help you keep

940
00:26:24,336 --> 0:26:25,376
track of your changes.

941
00:26:26,166 --> 0:26:27,476
If I'd like to review all of the

942
00:26:27,476 --> 0:26:29,286
changes for this file, I can

943
00:26:29,286 --> 0:26:30,596
open up the new Source Control

944
00:26:30,596 --> 0:26:32,126
History Inspector which shows me

945
00:26:32,156 --> 0:26:33,196
all the changes that have been

946
00:26:33,196 --> 0:26:34,406
made to this file, and I can

947
00:26:34,406 --> 0:26:35,626
quickly jump to any commit.

948
00:26:35,626 --> 0:26:37,066
And because it's in the

949
00:26:37,066 --> 0:26:38,336
inspector, this now works for

950
00:26:38,336 --> 0:26:39,816
any file type in your project.

951
00:26:40,866 --> 0:26:42,776
To help you review local

952
00:26:42,776 --> 0:26:44,376
changes, we've also improved the

953
00:26:44,376 --> 0:26:45,076
change bar.

954
00:26:45,846 --> 0:26:46,746
When I hover over the change

955
00:26:46,746 --> 0:26:47,836
bar, it shows me the local

956
00:26:47,836 --> 0:26:48,356
changes.

957
00:26:48,666 --> 0:26:49,756
But I can now have it show me

958
00:26:49,756 --> 0:26:51,626
the code before the change that

959
00:26:51,626 --> 0:26:52,926
I made to get a quick snippet.

960
00:26:53,516 --> 0:26:58,916
[ Applause ]

961
00:26:59,416 --> 0:27:01,176
And of course it's live, so as I

962
00:26:59,416 --> 0:27:01,176
And of course it's live, so as I

963
00:27:01,266 --> 0:27:04,226
start typing, it will update to

964
00:27:04,226 --> 0:27:04,976
keep me up-to-date.

965
00:27:05,796 --> 0:27:07,006
So those are just some of the

966
00:27:07,006 --> 0:27:08,286
many source editing features

967
00:27:08,286 --> 0:27:09,696
you'll find in Xcode 11.

968
00:27:11,516 --> 0:27:17,836
[ Applause ]

969
00:27:18,336 --> 0:27:20,106
Okay, so testing is another key

970
00:27:20,106 --> 0:27:21,046
development workflow.

971
00:27:21,536 --> 0:27:23,346
And Xcode already has great

972
00:27:23,346 --> 0:27:25,086
support for writing tests, which

973
00:27:25,086 --> 0:27:26,716
of course you all already know

974
00:27:26,976 --> 0:27:27,906
because you're writing lots of

975
00:27:27,936 --> 0:27:28,346
them, right?

976
00:27:28,346 --> 0:27:28,546
&gt;&gt; Yep.

977
00:27:28,816 --> 0:27:28,976
&gt;&gt; Yeah.

978
00:27:30,046 --> 0:27:30,686
&gt;&gt; Excellent.

979
00:27:30,686 --> 0:27:31,886
That's what we like to hear.

980
00:27:32,536 --> 0:27:33,846
Now what you may not know is

981
00:27:33,846 --> 0:27:35,356
that Xcode can do even more with

982
00:27:35,356 --> 0:27:37,016
your tests by using fantastic

983
00:27:37,016 --> 0:27:38,386
tools like runtime issues,

984
00:27:38,776 --> 0:27:40,336
sanitizers, localization

985
00:27:40,336 --> 0:27:40,846
simulation.

986
00:27:41,246 --> 0:27:42,376
And we add more of these every

987
00:27:42,376 --> 0:27:42,566
year.

988
00:27:43,486 --> 0:27:44,886
With so many options, what's

989
00:27:44,886 --> 0:27:46,296
been missing is a way to combine

990
00:27:46,296 --> 0:27:48,576
them all in one place to be used

991
00:27:48,576 --> 0:27:49,176
in parallel.

992
00:27:49,906 --> 0:27:51,466
And for that we are adding test

993
00:27:51,576 --> 0:27:51,736
plans.

994
00:27:53,486 --> 0:27:54,526
Now the power of test plans

995
00:27:54,626 --> 0:27:56,396
comes from running your tests in

996
00:27:56,396 --> 0:27:57,496
many configurations.

997
00:27:58,556 --> 0:27:59,876
With a few simple selections,

998
00:27:59,876 --> 0:28:01,656
you can instantly test for your

999
00:27:59,876 --> 0:28:01,656
you can instantly test for your

1000
00:28:01,656 --> 0:28:02,266
global audience.

1001
00:28:03,266 --> 0:28:04,386
And this configuration is also

1002
00:28:04,456 --> 0:28:05,596
perfect for capturing

1003
00:28:05,596 --> 0:28:07,266
screenshots for the App Store or

1004
00:28:07,266 --> 0:28:08,316
collecting details for your

1005
00:28:08,316 --> 0:28:09,036
localizers.

1006
00:28:10,056 --> 0:28:11,226
Yeah, it's okay to applaud for

1007
00:28:11,226 --> 0:28:11,386
that.

1008
00:28:11,386 --> 0:28:11,886
This is a big deal.

1009
00:28:12,516 --> 0:28:16,706
[ Applause ]

1010
00:28:17,206 --> 0:28:18,566
You can then see your app from

1011
00:28:18,566 --> 0:28:20,196
every angle by adding in other

1012
00:28:20,196 --> 0:28:21,796
diagnostics, tools and

1013
00:28:21,796 --> 0:28:22,356
parameters.

1014
00:28:23,356 --> 0:28:24,786
And your coverage increases even

1015
00:28:24,856 --> 0:28:25,986
further when you run your test

1016
00:28:26,086 --> 0:28:28,066
plans against many devices and

1017
00:28:28,066 --> 0:28:30,036
OS combinations to get a fully

1018
00:28:30,036 --> 0:28:31,516
comprehensive view of how your

1019
00:28:31,626 --> 0:28:32,006
app is doing.

1020
00:28:32,006 --> 0:28:34,576
Now for testing at this scale,

1021
00:28:34,616 --> 0:28:36,196
test plans work perfectly with

1022
00:28:36,196 --> 0:28:38,026
Xcode Server which can take full

1023
00:28:38,026 --> 0:28:40,366
advantage of the new Mac Pro and

1024
00:28:40,366 --> 0:28:41,226
with Xcode's new parallel

1025
00:28:41,316 --> 0:28:43,026
testing on simulators and

1026
00:28:43,026 --> 0:28:43,356
devices.

1027
00:28:44,436 --> 0:28:45,756
The result with test plans is

1028
00:28:45,756 --> 0:28:47,326
you now have one command that

1029
00:28:47,326 --> 0:28:48,906
does all of the testing for your

1030
00:28:48,906 --> 0:28:49,196
apps.

1031
00:28:49,896 --> 0:28:51,096
So this is a major advancement.

1032
00:28:52,516 --> 0:28:58,556
[ Applause ]

1033
00:28:59,056 --> 0:28:59,866
Now often when testing and

1034
00:28:59,866 --> 0:29:01,376
debugging, it's necessary to

1035
00:28:59,866 --> 0:29:01,376
debugging, it's necessary to

1036
00:29:01,376 --> 0:29:02,696
replicate user scenarios.

1037
00:29:03,106 --> 0:29:04,286
And our new Device Conditions

1038
00:29:04,676 --> 0:29:05,276
answers the call.

1039
00:29:06,296 --> 0:29:07,276
You can now set varied

1040
00:29:07,276 --> 0:29:08,426
conditions for network

1041
00:29:08,426 --> 0:29:10,046
throughput and thermal states on

1042
00:29:10,046 --> 0:29:11,656
your devices and see how your

1043
00:29:11,656 --> 0:29:12,316
apps respond.

1044
00:29:13,216 --> 0:29:14,226
Now rest assured these are

1045
00:29:14,226 --> 0:29:15,636
actually just simulations.

1046
00:29:15,816 --> 0:29:16,696
We're not actually going to make

1047
00:29:16,696 --> 0:29:17,856
your devices get super-hot here.

1048
00:29:19,006 --> 0:29:20,726
You can enable the conditions in

1049
00:29:20,726 --> 0:29:21,926
Xcode's Devices window.

1050
00:29:22,276 --> 0:29:23,376
And the devices will display

1051
00:29:23,376 --> 0:29:24,596
banners when the conditions are

1052
00:29:24,736 --> 0:29:24,946
active.

1053
00:29:25,816 --> 0:29:26,766
You can tap the banner to

1054
00:29:26,766 --> 0:29:28,976
disable the conditions and Xcode

1055
00:29:28,976 --> 0:29:30,166
will automatically terminate the

1056
00:29:30,166 --> 0:29:31,536
conditions when you disconnect

1057
00:29:31,676 --> 0:29:32,076
the devices.

1058
00:29:33,976 --> 0:29:34,976
Now for all the testing you're

1059
00:29:34,976 --> 0:29:36,576
going to be doing, we've also

1060
00:29:36,576 --> 0:29:37,776
improved our result bundles

1061
00:29:37,866 --> 0:29:39,256
which are now standalone.

1062
00:29:39,826 --> 0:29:41,066
Whether you create them in Xcode

1063
00:29:41,066 --> 0:29:42,416
or from the command line, you

1064
00:29:42,416 --> 0:29:43,786
can share them via email, attach

1065
00:29:43,786 --> 0:29:45,056
them to bugs and then just

1066
00:29:45,056 --> 0:29:46,236
double-click on them to open

1067
00:29:46,236 --> 0:29:48,246
them back in Xcode to review all

1068
00:29:48,246 --> 0:29:48,706
of the details.

1069
00:29:49,516 --> 0:29:56,176
[ Applause ]

1070
00:29:56,676 --> 0:29:57,786
Now to help you improve your

1071
00:29:57,786 --> 0:29:59,176
apps even further, we are

1072
00:29:59,176 --> 0:30:01,046
introducing two new feedback

1073
00:29:59,176 --> 0:30:01,046
introducing two new feedback

1074
00:30:01,096 --> 0:30:01,276
tools.

1075
00:30:02,246 --> 0:30:04,336
First, app performance metrics

1076
00:30:04,366 --> 0:30:06,816
for iOS and iPadOS App Store

1077
00:30:06,816 --> 0:30:06,966
apps.

1078
00:30:08,426 --> 0:30:09,766
When users opt into sharing

1079
00:30:09,766 --> 0:30:11,176
analytics, you'll received

1080
00:30:11,176 --> 0:30:13,226
anonymized metrics for battery

1081
00:30:13,226 --> 0:30:15,056
life, launch time, memory use

1082
00:30:15,316 --> 0:30:15,886
and more.

1083
00:30:16,806 --> 0:30:18,106
These metrics are aggregated and

1084
00:30:18,106 --> 0:30:19,376
displayed in the organizer

1085
00:30:19,656 --> 0:30:21,436
alongside the crash and energy

1086
00:30:21,536 --> 0:30:22,706
logs, and are a great way to

1087
00:30:22,706 --> 0:30:23,916
monitor and improve the

1088
00:30:23,916 --> 0:30:25,256
performance of your app with

1089
00:30:25,256 --> 0:30:25,726
each build.

1090
00:30:27,226 --> 0:30:28,776
These aggregated metrics, we

1091
00:30:28,776 --> 0:30:29,876
started collecting them in the

1092
00:30:29,966 --> 0:30:32,396
spring with iOS 12.2.

1093
00:30:32,506 --> 0:30:33,556
So many of your apps will

1094
00:30:33,556 --> 0:30:35,136
already have data to review.

1095
00:30:36,626 --> 0:30:37,636
Now another great source of

1096
00:30:37,636 --> 0:30:39,016
feedback is directly from your

1097
00:30:39,016 --> 0:30:40,816
users, and Test Flight will now

1098
00:30:40,816 --> 0:30:42,416
let users share what they think.

1099
00:30:43,936 --> 0:30:45,286
Test Flight apps automatically

1100
00:30:45,286 --> 0:30:46,756
enable user feedback.

1101
00:30:47,796 --> 0:30:49,316
When a user takes a screenshot

1102
00:30:49,316 --> 0:30:50,156
in your app, they will have a

1103
00:30:50,156 --> 0:30:52,066
new option to share it as beta

1104
00:30:52,066 --> 0:30:53,576
feedback, optionally adding in

1105
00:30:53,576 --> 0:30:53,976
their comments.

1106
00:30:54,516 --> 0:31:00,876
[ Applause ]

1107
00:30:54,516 --> 0:31:00,876
[ Applause ]

1108
00:31:01,376 --> 0:31:02,866
You can review all the feedback

1109
00:31:02,866 --> 0:31:04,286
on App Store Connect and

1110
00:31:04,286 --> 0:31:05,616
download all the details for

1111
00:31:05,616 --> 0:31:06,526
your bug tracking systems.

1112
00:31:08,746 --> 0:31:10,286
So all these features today are

1113
00:31:10,366 --> 0:31:12,086
just a small taste of our Xcode

1114
00:31:12,086 --> 0:31:13,326
release, which brings together

1115
00:31:13,326 --> 0:31:14,966
innovations in Swift, the SDK

1116
00:31:14,966 --> 0:31:16,756
and across all of our tools.

1117
00:31:17,546 --> 0:31:18,646
All this to help you do your

1118
00:31:18,646 --> 0:31:20,296
best work faster than ever.

1119
00:31:20,996 --> 0:31:21,976
And that is Xcode 11.

1120
00:31:22,516 --> 0:31:30,906
[ Applause ]

1121
00:31:31,406 --> 0:31:32,086
&gt;&gt; And now I'd like to invite

1122
00:31:32,156 --> 0:31:33,476
Sebastien back to tell us more

1123
00:31:33,476 --> 0:31:34,406
about Apple's platforms.

1124
00:31:34,876 --> 0:31:35,276
Sebastien?

1125
00:31:36,121 --> 0:31:38,121
[ Applause ]

1126
00:31:38,226 --> 0:31:39,096
&gt;&gt; Thank you, Matthew.

1127
00:31:39,796 --> 0:31:41,106
Wasn't that amazing?

1128
00:31:42,436 --> 0:31:43,956
Really, really great features to

1129
00:31:43,956 --> 0:31:45,896
help all of you build better

1130
00:31:45,896 --> 0:31:46,556
apps.

1131
00:31:46,906 --> 0:31:47,806
So now let's switch to our

1132
00:31:47,806 --> 0:31:48,446
platforms.

1133
00:31:48,866 --> 0:31:49,886
And of course our platforms

1134
00:31:49,886 --> 0:31:51,356
themselves are tailored to

1135
00:31:51,356 --> 0:31:53,276
provide great experiences and

1136
00:31:53,276 --> 0:31:54,536
they really reflect the unique

1137
00:31:54,536 --> 0:31:55,926
way in which each of them is

1138
00:31:55,926 --> 0:31:56,306
used.

1139
00:31:56,946 --> 0:31:58,186
So some of what we're doing this

1140
00:31:58,186 --> 0:31:59,536
year is unique to each of them,

1141
00:31:59,896 --> 0:32:00,836
and what we're going to do now

1142
00:31:59,896 --> 0:32:00,836
and what we're going to do now

1143
00:32:01,186 --> 0:32:03,366
is dive right in to macOS and

1144
00:32:03,366 --> 0:32:05,226
tell you what we're doing there.

1145
00:32:05,786 --> 0:32:09,126
macOS Catalina is a great

1146
00:32:09,126 --> 0:32:10,616
release with a rich set of

1147
00:32:10,616 --> 0:32:12,476
compelling new features such as

1148
00:32:12,536 --> 0:32:14,176
screen time and the new Music

1149
00:32:14,176 --> 0:32:14,386
app.

1150
00:32:14,386 --> 0:32:16,616
And the Mac takes another great

1151
00:32:16,716 --> 0:32:17,986
step forward with amazing

1152
00:32:18,086 --> 0:32:19,926
productivity features such as

1153
00:32:19,926 --> 0:32:20,936
Sidecar.

1154
00:32:20,936 --> 0:32:22,036
We're going to love Sidecar,

1155
00:32:22,886 --> 0:32:22,976
right?

1156
00:32:23,516 --> 0:32:26,566
[ Applause ]

1157
00:32:27,066 --> 0:32:27,216
All right.

1158
00:32:27,606 --> 0:32:28,696
Well, with an active installed

1159
00:32:28,726 --> 0:32:30,916
base of over 100 million users,

1160
00:32:31,256 --> 0:32:33,176
the Mac is a vibrant platform

1161
00:32:33,276 --> 0:32:34,636
with a rich app ecosystem.

1162
00:32:34,746 --> 0:32:37,006
And the Mac ecosystem is full of

1163
00:32:37,006 --> 0:32:38,646
powerful native apps that you

1164
00:32:38,646 --> 0:32:40,376
have created using our AppKit

1165
00:32:40,446 --> 0:32:40,856
framework.

1166
00:32:40,856 --> 0:32:42,886
And a great example of this is

1167
00:32:42,976 --> 0:32:43,876
Pixelmator Pro.

1168
00:32:44,946 --> 0:32:46,076
Now AppKit is the powerful

1169
00:32:46,186 --> 0:32:47,716
framework that enables the full

1170
00:32:47,716 --> 0:32:48,626
capabilities of the Mac.

1171
00:32:48,896 --> 0:32:50,766
But we also recognize that there

1172
00:32:50,766 --> 0:32:52,146
are a number of apps available

1173
00:32:52,146 --> 0:32:53,906
for iPad that would be great to

1174
00:32:53,986 --> 0:32:55,886
run on the Mac, but you have not

1175
00:32:55,886 --> 0:32:57,786
always had time to use AppKit to

1176
00:32:57,786 --> 0:32:58,476
bring that to the Mac.

1177
00:32:59,226 --> 0:33:01,096
And so this year we're adding an

1178
00:32:59,226 --> 0:33:01,096
And so this year we're adding an

1179
00:33:01,096 --> 0:33:02,826
additional way to create native

1180
00:33:02,826 --> 0:33:04,426
Mac apps with the technology

1181
00:33:04,426 --> 0:33:05,756
that allows you to take an

1182
00:33:05,756 --> 0:33:07,116
iPadOS app and bring it to the

1183
00:33:07,116 --> 0:33:08,696
Mac with minimal effort.

1184
00:33:09,736 --> 0:33:09,976
We --

1185
00:33:15,086 --> 0:33:16,256
Can you go back two slides?

1186
00:33:16,446 --> 0:33:16,646
Sorry.

1187
00:33:20,046 --> 0:33:21,506
One more. All right.

1188
00:33:22,466 --> 0:33:23,936
This is a huge opportunity for

1189
00:33:23,936 --> 0:33:26,086
the Mac to tap into the world's

1190
00:33:26,086 --> 0:33:27,556
largest app ecosystem.

1191
00:33:28,186 --> 0:33:29,716
There are over a million iPad

1192
00:33:29,716 --> 0:33:31,806
apps out there and we think many

1193
00:33:31,806 --> 0:33:33,386
of them would be really great on

1194
00:33:33,386 --> 0:33:34,306
the Mac as well.

1195
00:33:35,606 --> 0:33:37,176
Now to achieve this, we've

1196
00:33:37,176 --> 0:33:38,566
ported more than 40 frameworks

1197
00:33:38,566 --> 0:33:39,966
and libraries from iOS to the

1198
00:33:39,966 --> 0:33:40,176
Mac.

1199
00:33:40,346 --> 0:33:42,556
And if you're an existing iOS

1200
00:33:42,666 --> 0:33:43,876
developer that doesn't have a

1201
00:33:44,136 --> 0:33:45,376
Mac app yet, you're going to

1202
00:33:45,376 --> 0:33:47,006
love having the same APIs

1203
00:33:47,246 --> 0:33:48,946
available on both platforms.

1204
00:33:49,496 --> 0:33:50,426
In fact, we've made available

1205
00:33:50,426 --> 0:33:53,516
almost the entire iOS API set

1206
00:33:53,516 --> 0:33:54,686
with only a small number of

1207
00:33:54,686 --> 0:33:56,606
exceptions for unique mobile

1208
00:33:56,606 --> 0:33:57,066
features.

1209
00:33:58,066 --> 0:34:00,016
Now we achieved this by adapting

1210
00:33:58,066 --> 0:34:00,016
Now we achieved this by adapting

1211
00:34:00,016 --> 0:34:01,556
UI Kit as a native framework.

1212
00:34:01,896 --> 0:34:03,596
That enables iPad apps to run on

1213
00:34:03,596 --> 0:34:05,746
the Mac and feel just as fast

1214
00:34:05,746 --> 0:34:07,486
and fluid as other apps on the

1215
00:34:07,576 --> 0:34:08,065
platform.

1216
00:34:09,335 --> 0:34:10,795
And by integrating UI Kit

1217
00:34:10,795 --> 0:34:13,085
directly into macOS, many of the

1218
00:34:13,085 --> 0:34:14,835
fundamentals are automatic.

1219
00:34:15,585 --> 0:34:16,775
So many Mac desktop and

1220
00:34:16,775 --> 0:34:18,386
windowing features are added

1221
00:34:18,656 --> 0:34:20,156
without any work on your part,

1222
00:34:21,096 --> 0:34:22,335
and we adapt platform-unique

1223
00:34:22,335 --> 0:34:24,275
elements like touch controls to

1224
00:34:24,275 --> 0:34:26,326
keyboard and mouse input, saving

1225
00:34:26,326 --> 0:34:28,166
you a ton of work and giving you

1226
00:34:28,166 --> 0:34:29,376
a huge head start in your

1227
00:34:29,376 --> 0:34:29,846
development.

1228
00:34:30,505 --> 0:34:32,326
Now we've been working on this

1229
00:34:32,396 --> 0:34:33,815
technology for a number of years

1230
00:34:33,815 --> 0:34:35,065
and we're using it for our own

1231
00:34:35,065 --> 0:34:36,666
apps, which has allowed us to

1232
00:34:36,766 --> 0:34:37,826
prove out and refine the

1233
00:34:37,876 --> 0:34:39,565
technology before we make it

1234
00:34:39,565 --> 0:34:41,446
available to you in macOS

1235
00:34:41,446 --> 0:34:42,295
Catalina this year.

1236
00:34:43,376 --> 0:34:45,266
If you have an iPadOS app,

1237
00:34:45,266 --> 0:34:47,186
targeting the Mac is super easy.

1238
00:34:47,656 --> 0:34:49,346
There are basically three steps.

1239
00:34:50,525 --> 0:34:52,916
First, click the checkbox in

1240
00:34:52,916 --> 0:34:53,646
Xcode -- here we go.

1241
00:34:54,031 --> 0:34:56,031
[ Laughter ]

1242
00:34:56,045 --> 0:34:56,286
That easy.

1243
00:34:56,946 --> 0:34:58,556
In Xcode's Project Editor, and

1244
00:34:58,556 --> 0:34:59,886
turn on Mac support for your

1245
00:34:59,886 --> 0:35:00,306
project.

1246
00:34:59,886 --> 0:35:00,306
project.

1247
00:35:00,406 --> 0:35:00,786
There you go.

1248
00:35:00,876 --> 0:35:02,036
As easy as that.

1249
00:35:02,146 --> 0:35:02,916
And here's the magic.

1250
00:35:03,376 --> 0:35:04,786
That single project and target

1251
00:35:04,786 --> 0:35:06,566
builds apps for all three

1252
00:35:06,646 --> 0:35:07,176
platforms.

1253
00:35:07,736 --> 0:35:08,716
And when you make a change to

1254
00:35:08,716 --> 0:35:10,716
your source, all three apps

1255
00:35:10,716 --> 0:35:12,056
update automatically.

1256
00:35:13,446 --> 0:35:14,766
The second step is to ensure

1257
00:35:14,766 --> 0:35:16,626
that your app is great on the

1258
00:35:16,626 --> 0:35:17,296
iPad.

1259
00:35:18,196 --> 0:35:20,546
Better iPad apps make better Mac

1260
00:35:20,586 --> 0:35:21,076
apps as well.

1261
00:35:21,076 --> 0:35:23,056
So the work that you put in to

1262
00:35:23,056 --> 0:35:24,616
adopting the newest technologies

1263
00:35:24,946 --> 0:35:26,756
and optimizing for larger iPad

1264
00:35:26,806 --> 0:35:28,626
screens translates wonderfully

1265
00:35:28,626 --> 0:35:29,016
to the Mac.

1266
00:35:31,316 --> 0:35:32,816
Just following best practices

1267
00:35:33,216 --> 0:35:34,376
such as supporting external

1268
00:35:34,466 --> 0:35:36,496
keyboards will also result in

1269
00:35:36,496 --> 0:35:38,036
richer Mac experiences.

1270
00:35:39,596 --> 0:35:41,146
The third step is to take

1271
00:35:41,146 --> 0:35:42,646
advantage of specific Mac

1272
00:35:42,696 --> 0:35:43,356
capabilities.

1273
00:35:44,186 --> 0:35:45,036
And this is where you make

1274
00:35:45,036 --> 0:35:47,026
customizations that take full

1275
00:35:47,066 --> 0:35:48,166
advantage of typical

1276
00:35:49,086 --> 0:35:50,436
Mac-specific user interface

1277
00:35:50,436 --> 0:35:52,076
elements like full menus and

1278
00:35:52,076 --> 0:35:52,626
toolbars.

1279
00:35:52,626 --> 0:35:55,306
And if applicable, sidebars and

1280
00:35:55,306 --> 0:35:56,326
their special materials.

1281
00:35:56,996 --> 0:35:58,196
Now to show you how easy this

1282
00:35:58,266 --> 0:35:59,806
is, I'd like to invite Matthew

1283
00:35:59,806 --> 0:36:01,356
back onstage for a demo.

1284
00:35:59,806 --> 0:36:01,356
back onstage for a demo.

1285
00:36:01,666 --> 0:36:01,976
Matthew?

1286
00:36:02,516 --> 0:36:07,946
[ Applause ]

1287
00:36:08,446 --> 0:36:09,106
&gt;&gt; Thank you, Sebastien.

1288
00:36:10,246 --> 0:36:11,186
Here we have our travel

1289
00:36:11,186 --> 0:36:12,586
application running in the iPad

1290
00:36:12,886 --> 0:36:13,306
Simulator.

1291
00:36:13,886 --> 0:36:15,306
It's a list view of locations.

1292
00:36:15,886 --> 0:36:17,116
When I select a location, the

1293
00:36:17,116 --> 0:36:17,846
globe will rotate.

1294
00:36:18,646 --> 0:36:19,866
And we have a logging area where

1295
00:36:19,866 --> 0:36:21,006
I can start keeping track of my

1296
00:36:21,116 --> 0:36:22,246
trips in a journal.

1297
00:36:23,266 --> 0:36:24,336
Let's follow Sebastien's three

1298
00:36:24,336 --> 0:36:25,666
steps and bring this app to the

1299
00:36:25,666 --> 0:36:25,756
Mac.

1300
00:36:26,756 --> 0:36:28,416
Step one, check the box.

1301
00:36:29,436 --> 0:36:31,236
I'll quit the simulator and here

1302
00:36:31,236 --> 0:36:32,976
in the target editor I'll check

1303
00:36:32,976 --> 0:36:34,766
the box for Mac support to

1304
00:36:34,766 --> 0:36:35,216
enable it.

1305
00:36:36,756 --> 0:36:37,686
That's it.

1306
00:36:37,686 --> 0:36:38,836
I can now build and run my

1307
00:36:38,836 --> 0:36:39,616
application for the Mac.

1308
00:36:40,626 --> 0:36:41,846
By checking the box, we added

1309
00:36:41,846 --> 0:36:43,156
the Mac as a destination.

1310
00:36:43,606 --> 0:36:44,786
So just like I can pick between

1311
00:36:44,786 --> 0:36:46,286
devices and simulators for my

1312
00:36:46,286 --> 0:36:47,706
app, I can now choose the Mac.

1313
00:36:48,816 --> 0:36:49,546
And here's the Mac app.

1314
00:36:50,346 --> 0:36:52,486
List View on the left, select

1315
00:36:52,486 --> 0:36:54,536
the location and log in.

1316
00:36:55,516 --> 0:37:02,066
[ Applause ]

1317
00:36:55,516 --> 0:37:02,066
[ Applause ]

1318
00:37:02,566 --> 0:37:03,356
I know, pretty powerful

1319
00:37:03,356 --> 0:37:03,716
checkbox.

1320
00:37:03,716 --> 0:37:06,826
All right, let's move on to step

1321
00:37:06,886 --> 0:37:08,266
two, make a great iPad app.

1322
00:37:09,376 --> 0:37:10,786
I've not implemented any actions

1323
00:37:10,786 --> 0:37:12,426
from my List View, things like

1324
00:37:12,426 --> 0:37:13,776
Adding to Favorites or to Share.

1325
00:37:14,686 --> 0:37:15,636
When I implement those for the

1326
00:37:15,846 --> 0:37:16,656
iPad, they'll show up as a

1327
00:37:16,736 --> 0:37:17,896
context menu on the Mac.

1328
00:37:18,666 --> 0:37:19,326
It's a double win.

1329
00:37:20,376 --> 0:37:22,076
So I'll quit the Mac app and

1330
00:37:22,076 --> 0:37:23,606
change to my sidebar controller

1331
00:37:23,606 --> 0:37:25,246
here, and I'll just add a table

1332
00:37:25,246 --> 0:37:26,676
view delegate method that sets

1333
00:37:26,676 --> 0:37:27,796
up those menus for each item.

1334
00:37:29,216 --> 0:37:30,526
Okay. Let's move on to step

1335
00:37:30,616 --> 0:37:30,846
three.

1336
00:37:31,956 --> 0:37:33,556
I'd like the sidebar on my Mac

1337
00:37:33,556 --> 0:37:34,676
app to be vibrant.

1338
00:37:35,586 --> 0:37:36,626
Now this change doesn't happen

1339
00:37:36,666 --> 0:37:37,666
automatically because it's

1340
00:37:37,666 --> 0:37:38,926
something you should review to

1341
00:37:38,926 --> 0:37:39,886
make sure it's appropriate.

1342
00:37:40,746 --> 0:37:41,856
When you do find it's what you'd

1343
00:37:41,856 --> 0:37:43,526
like, it's a simple one-line

1344
00:37:43,526 --> 0:37:44,846
change to set the background

1345
00:37:45,046 --> 0:37:45,906
style to sidebar.

1346
00:37:47,536 --> 0:37:48,916
Okay, for our final change, I'd

1347
00:37:48,916 --> 0:37:50,356
like to add a menu bar to our

1348
00:37:50,356 --> 0:37:50,906
application.

1349
00:37:51,806 --> 0:37:53,706
So here in the storyboard I'll

1350
00:37:53,706 --> 0:37:55,646
bring up the library and I'll

1351
00:37:55,706 --> 0:37:56,376
search for a menu.

1352
00:37:57,246 --> 0:37:58,516
I'll grab a main menu and I'll

1353
00:37:58,516 --> 0:38:00,036
drag it out into my storyboard

1354
00:37:58,516 --> 0:38:00,036
drag it out into my storyboard

1355
00:38:00,716 --> 0:38:01,966
and we'll open up the file menu.

1356
00:38:03,306 --> 0:38:04,476
I'd like to add a menu command

1357
00:38:04,476 --> 0:38:06,126
in here for the login action.

1358
00:38:06,746 --> 0:38:07,626
So we'll call this Login.

1359
00:38:08,366 --> 0:38:09,416
We'll give it a key equivalent

1360
00:38:09,416 --> 0:38:10,046
of Command-L.

1361
00:38:10,856 --> 0:38:12,066
And I just now need to connect

1362
00:38:12,146 --> 0:38:14,156
the menu item up to the action

1363
00:38:14,426 --> 0:38:15,596
that I'm already using for

1364
00:38:15,596 --> 0:38:15,836
Login.

1365
00:38:16,886 --> 0:38:18,146
Okay? That's it.

1366
00:38:18,436 --> 0:38:19,726
Let's build and run our changes.

1367
00:38:20,656 --> 0:38:22,006
I'm going to go up and hide

1368
00:38:22,246 --> 0:38:23,696
Xcode for the moment so we can

1369
00:38:23,806 --> 0:38:24,906
see our application.

1370
00:38:25,936 --> 0:38:27,616
Okay, so now we have the vibrant

1371
00:38:27,666 --> 0:38:28,116
sidebar.

1372
00:38:28,656 --> 0:38:29,856
When I select an item, I can

1373
00:38:29,856 --> 0:38:32,026
bring up a context menu and up

1374
00:38:32,056 --> 0:38:34,216
here in the File menu I now have

1375
00:38:34,496 --> 0:38:35,186
the Login action.

1376
00:38:36,046 --> 0:38:37,306
So just like that, three easy

1377
00:38:37,356 --> 0:38:37,806
steps.

1378
00:38:38,516 --> 0:38:45,266
[ Applause ]

1379
00:38:45,766 --> 0:38:46,856
Three easy steps to bring our

1380
00:38:46,856 --> 0:38:48,666
app to the Mac and make a great

1381
00:38:48,666 --> 0:38:49,656
user experience for all our

1382
00:38:49,656 --> 0:38:49,996
users.

1383
00:38:50,446 --> 0:38:51,206
Back to you, Sebastien.

1384
00:38:52,041 --> 0:38:54,041
[ Applause ]

1385
00:38:54,066 --> 0:38:54,646
&gt;&gt; Thank you, Matthew.

1386
00:38:55,266 --> 0:38:56,246
That was really amazing.

1387
00:38:56,486 --> 0:38:57,706
Doesn't this make you want to go

1388
00:38:57,706 --> 0:38:58,616
and try it out?

1389
00:38:59,396 --> 0:39:01,336
Yes. All right, in fact, over

1390
00:38:59,396 --> 0:39:01,336
Yes. All right, in fact, over

1391
00:39:01,336 --> 0:39:02,786
the last few weeks we invited a

1392
00:39:02,786 --> 0:39:04,226
number of developers to take

1393
00:39:04,226 --> 0:39:05,256
this for a spin.

1394
00:39:05,456 --> 0:39:06,576
And the progress that they have

1395
00:39:06,636 --> 0:39:08,406
made in a few short weeks is

1396
00:39:08,466 --> 0:39:09,276
truly impressive.

1397
00:39:09,746 --> 0:39:11,116
Here's a sample of the iPad apps

1398
00:39:11,116 --> 0:39:12,856
that they already have running

1399
00:39:13,036 --> 0:39:13,436
on the Mac.

1400
00:39:14,606 --> 0:39:17,316
Now once you've built a Mac app,

1401
00:39:17,316 --> 0:39:18,456
the best way to distribute it to

1402
00:39:18,456 --> 0:39:19,776
your users is through the Mac

1403
00:39:19,776 --> 0:39:20,346
App Store.

1404
00:39:21,216 --> 0:39:22,736
It features the biggest catalog

1405
00:39:22,736 --> 0:39:23,686
of Mac Apps.

1406
00:39:23,846 --> 0:39:25,986
It's available in 155 countries

1407
00:39:26,146 --> 0:39:28,186
throughout the world and the Mac

1408
00:39:28,246 --> 0:39:29,486
App Store allows you to reach

1409
00:39:29,646 --> 0:39:31,206
every single Mac user.

1410
00:39:31,906 --> 0:39:34,156
Now we also built Gatekeeper to

1411
00:39:34,156 --> 0:39:35,556
give users flexibility and

1412
00:39:35,556 --> 0:39:36,726
choice on how they get their

1413
00:39:36,726 --> 0:39:38,336
apps while helping protect them

1414
00:39:38,336 --> 0:39:39,336
from malicious software.

1415
00:39:39,856 --> 0:39:41,056
And in macOS Catalina,

1416
00:39:41,526 --> 0:39:42,656
Gatekeeper will validate the

1417
00:39:42,656 --> 0:39:43,576
apps that you run from the

1418
00:39:43,576 --> 0:39:45,426
internet both at first launch

1419
00:39:45,656 --> 0:39:47,496
and periodically thereafter to

1420
00:39:47,496 --> 0:39:48,966
confirm that they're free of

1421
00:39:48,966 --> 0:39:49,596
known malware.

1422
00:39:50,556 --> 0:39:51,536
This is accomplished by

1423
00:39:51,536 --> 0:39:52,816
requiring developers to use the

1424
00:39:52,816 --> 0:39:54,556
notarization service that we

1425
00:39:54,556 --> 0:39:56,866
announced last year for both new

1426
00:39:56,866 --> 0:39:57,716
and updated apps.

1427
00:39:58,286 --> 0:40:00,336
So now you and your users can

1428
00:39:58,286 --> 0:40:00,336
So now you and your users can

1429
00:40:00,336 --> 0:40:01,816
safely get apps from both the

1430
00:40:01,816 --> 0:40:03,716
Mac App Store and the internet.

1431
00:40:04,736 --> 0:40:06,236
Notarization has already seen

1432
00:40:06,236 --> 0:40:07,076
broad adoption.

1433
00:40:07,636 --> 0:40:09,416
It's simple and fast with over

1434
00:40:09,416 --> 0:40:11,836
98% of submissions completing

1435
00:40:11,836 --> 0:40:12,936
within 15 minutes.

1436
00:40:13,956 --> 0:40:15,656
Now speaking of security, we're

1437
00:40:15,656 --> 0:40:16,836
continuing to invest in the

1438
00:40:16,896 --> 0:40:18,726
foundations of macOS and I'd

1439
00:40:18,726 --> 0:40:20,486
like to focus on three areas.

1440
00:40:21,696 --> 0:40:23,106
First, a new technology called

1441
00:40:23,106 --> 0:40:24,746
Driver Kit which allows you to

1442
00:40:24,746 --> 0:40:26,106
move your kernel extensions out

1443
00:40:26,106 --> 0:40:27,696
of the kernel and into user

1444
00:40:27,696 --> 0:40:28,056
space.

1445
00:40:28,666 --> 0:40:31,116
And by running these drivers and

1446
00:40:31,116 --> 0:40:33,336
extensions as user processes, we

1447
00:40:33,336 --> 0:40:35,256
improve the stability of macOS

1448
00:40:35,256 --> 0:40:36,156
for all of our users.

1449
00:40:37,266 --> 0:40:38,586
We identified the most common

1450
00:40:38,586 --> 0:40:39,976
use cases that have required

1451
00:40:39,976 --> 0:40:41,206
kernel extensions in the past,

1452
00:40:41,206 --> 0:40:42,756
and now we have a user space

1453
00:40:42,786 --> 0:40:45,376
alternative for over 75% of them

1454
00:40:45,626 --> 0:40:46,706
in macOS Catalina.

1455
00:40:47,616 --> 0:40:48,926
We encourage you to adopt Driver

1456
00:40:49,006 --> 0:40:50,746
Kit as future versions of macOS

1457
00:40:50,746 --> 0:40:52,676
will no longer run these types

1458
00:40:52,766 --> 0:40:53,716
of kernel extensions.

1459
00:40:54,216 --> 0:40:57,106
Next, we're improving the

1460
00:40:57,106 --> 0:40:58,886
stability of macOS by making the

1461
00:40:58,986 --> 0:41:00,736
system volume read-only.

1462
00:40:58,986 --> 0:41:00,736
system volume read-only.

1463
00:41:01,596 --> 0:41:02,426
Here's how it works.

1464
00:41:03,146 --> 0:41:04,726
Today there's a single volume

1465
00:41:04,726 --> 0:41:06,416
that includes user data, apps

1466
00:41:06,816 --> 0:41:07,836
and the operating system.

1467
00:41:08,526 --> 0:41:09,706
And to further isolate macOS

1468
00:41:09,706 --> 0:41:11,726
from changes, the Mac will now

1469
00:41:11,726 --> 0:41:13,226
be divided into two logical

1470
00:41:13,226 --> 0:41:13,616
volumes.

1471
00:41:14,576 --> 0:41:15,806
One for the operating system

1472
00:41:15,876 --> 0:41:17,746
files which will be read-only,

1473
00:41:18,006 --> 0:41:20,056
and the other for user data and

1474
00:41:20,056 --> 0:41:20,286
apps.

1475
00:41:21,051 --> 0:41:23,051
[ Applause ]

1476
00:41:23,086 --> 0:41:23,296
There you go.

1477
00:41:24,126 --> 0:41:26,126
[ Applause ]

1478
00:41:26,236 --> 0:41:27,306
This will further protect the

1479
00:41:27,306 --> 0:41:28,736
operating system from changes,

1480
00:41:29,006 --> 0:41:30,956
increase stability and set us up

1481
00:41:30,956 --> 0:41:32,266
to deliver future security

1482
00:41:32,266 --> 0:41:32,706
benefits.

1483
00:41:33,286 --> 0:41:34,716
Now some of you may have made

1484
00:41:34,716 --> 0:41:36,476
assumptions in your app or your

1485
00:41:36,476 --> 0:41:37,826
installer, and you'll want to

1486
00:41:37,826 --> 0:41:39,786
check that it works seamlessly

1487
00:41:39,786 --> 0:41:40,896
on macOS Catalina.

1488
00:41:42,286 --> 0:41:44,436
Finally, enhancements to app and

1489
00:41:44,436 --> 0:41:45,136
data protection.

1490
00:41:45,816 --> 0:41:47,816
We have spent the last few years

1491
00:41:47,816 --> 0:41:48,996
adding additional data

1492
00:41:48,996 --> 0:41:50,646
protection categories so that

1493
00:41:50,646 --> 0:41:52,186
users are in control of which

1494
00:41:52,186 --> 0:41:54,676
apps can access important files

1495
00:41:54,676 --> 0:41:57,246
like your photos or sensitive

1496
00:41:57,336 --> 0:41:59,246
sensors like your camera and

1497
00:41:59,246 --> 0:42:01,046
microphone on your Mac.

1498
00:41:59,246 --> 0:42:01,046
microphone on your Mac.

1499
00:42:01,596 --> 0:42:03,496
In macOS Catalina, we're

1500
00:42:03,496 --> 0:42:05,116
continuing this work by ensuring

1501
00:42:05,116 --> 0:42:06,736
that apps seek permission before

1502
00:42:06,736 --> 0:42:08,356
capturing input events, so

1503
00:42:08,356 --> 0:42:09,896
things like key presses or

1504
00:42:09,896 --> 0:42:10,786
screen recordings.

1505
00:42:14,046 --> 0:42:15,636
And we're also going to protect

1506
00:42:15,636 --> 0:42:17,266
user data on your Mac, so apps

1507
00:42:17,266 --> 0:42:18,546
will now have to seek permission

1508
00:42:18,786 --> 0:42:20,116
before accessing the files that

1509
00:42:20,116 --> 0:42:22,256
users keep on their desktop,

1510
00:42:22,256 --> 0:42:24,636
downloads, documents, iCloud

1511
00:42:24,636 --> 0:42:26,316
drive and external drives.

1512
00:42:27,056 --> 0:42:27,126
Yeah.

1513
00:42:28,516 --> 0:42:31,576
[ Applause ]

1514
00:42:32,076 --> 0:42:33,196
We are really excited about all

1515
00:42:33,196 --> 0:42:34,116
the enhancements that we're

1516
00:42:34,116 --> 0:42:35,476
bringing in macOS Catalina.

1517
00:42:36,296 --> 0:42:37,766
Now another platform that's got

1518
00:42:37,836 --> 0:42:39,046
some really big changes this

1519
00:42:39,076 --> 0:42:40,326
year is watchOS.

1520
00:42:40,886 --> 0:42:42,366
And to tell you more, I'd like

1521
00:42:42,366 --> 0:42:44,006
to invite Lori up on stage.

1522
00:42:44,056 --> 0:42:44,336
Lori?

1523
00:42:45,516 --> 0:42:47,666
[ Applause ]

1524
00:42:48,166 --> 0:42:48,786
&gt;&gt; Thanks, Sebastien.

1525
00:42:50,056 --> 0:42:52,056
[ Applause ]

1526
00:42:52,096 --> 0:42:53,126
This morning we introduced a

1527
00:42:53,186 --> 0:42:54,656
bunch of cool new features in

1528
00:42:54,656 --> 0:42:56,496
watchOS 6, including new health

1529
00:42:56,496 --> 0:42:57,976
apps like noise and cycle

1530
00:42:58,036 --> 0:42:59,436
tracking, activity trends,

1531
00:42:59,606 --> 0:43:00,606
audiobooks and more.

1532
00:42:59,606 --> 0:43:00,606
audiobooks and more.

1533
00:43:01,286 --> 0:43:03,236
But the real story for watchOS 6

1534
00:43:03,466 --> 0:43:04,956
is that it's now possible to

1535
00:43:04,956 --> 0:43:07,386
declare independence from the

1536
00:43:07,456 --> 0:43:08,766
phone and build fully

1537
00:43:08,766 --> 0:43:10,956
watch-focused experiences.

1538
00:43:11,516 --> 0:43:15,606
[ Applause ]

1539
00:43:16,106 --> 0:43:17,186
Thanks to cellular connectivity,

1540
00:43:17,186 --> 0:43:18,326
customers are increasingly

1541
00:43:18,326 --> 0:43:19,766
leaving their phones behind and

1542
00:43:19,766 --> 0:43:21,366
enjoying the freedom using just

1543
00:43:21,516 --> 0:43:22,516
their Apple Watch to stay

1544
00:43:22,516 --> 0:43:23,006
connected.

1545
00:43:23,566 --> 0:43:25,116
From running errands to running

1546
00:43:25,166 --> 0:43:26,596
workouts, from listening to

1547
00:43:26,596 --> 0:43:27,696
music to chatting with friends,

1548
00:43:28,146 --> 0:43:29,996
we want all users to enjoy great

1549
00:43:29,996 --> 0:43:31,566
Apple Watch experiences without

1550
00:43:31,566 --> 0:43:32,206
limitations.

1551
00:43:32,606 --> 0:43:34,206
And independent watch apps make

1552
00:43:34,296 --> 0:43:34,956
that possible.

1553
00:43:36,606 --> 0:43:38,106
We've taken a good look at the

1554
00:43:38,146 --> 0:43:39,326
challenges of developing for

1555
00:43:39,456 --> 0:43:41,016
Apple Watch and worked hard not

1556
00:43:41,116 --> 0:43:42,916
only to bring you new APIs that

1557
00:43:42,916 --> 0:43:44,066
make it possible to support

1558
00:43:44,066 --> 0:43:46,056
independent experiences, but

1559
00:43:46,056 --> 0:43:47,616
also to completely revamp the

1560
00:43:47,666 --> 0:43:48,896
experience of being an Apple

1561
00:43:48,896 --> 0:43:49,716
Watch developer.

1562
00:43:52,156 --> 0:43:53,866
What if I told you it was

1563
00:43:53,866 --> 0:43:55,786
possible to create a watch app

1564
00:43:56,026 --> 0:43:57,246
that's only a watch app?

1565
00:43:59,286 --> 0:44:00,316
If you've got an idea for a

1566
00:43:59,286 --> 0:44:00,316
If you've got an idea for a

1567
00:44:00,376 --> 0:44:01,926
great watch-only experience,

1568
00:44:02,066 --> 0:44:03,426
Xcode now makes it simple to

1569
00:44:03,426 --> 0:44:04,896
create a watch app that's just a

1570
00:44:04,896 --> 0:44:05,366
watch app.

1571
00:44:05,366 --> 0:44:07,306
So you can pursue your idea

1572
00:44:07,336 --> 0:44:08,626
without also having to build an

1573
00:44:08,776 --> 0:44:09,186
iOS app.

1574
00:44:11,506 --> 0:44:13,056
And if you already have an iOS

1575
00:44:13,176 --> 0:44:14,776
app, you can still build your

1576
00:44:14,776 --> 0:44:16,846
app to be completely independent

1577
00:44:16,846 --> 0:44:18,266
of its companion thanks to a

1578
00:44:18,266 --> 0:44:19,836
couple key changes we made in

1579
00:44:19,836 --> 0:44:21,506
watchOS 6 to support watch-only

1580
00:44:21,506 --> 0:44:24,196
apps, including making Apple

1581
00:44:24,196 --> 0:44:25,626
Watch a standalone push target.

1582
00:44:26,236 --> 0:44:27,306
You now have the option of

1583
00:44:27,356 --> 0:44:28,536
sending notifications directly

1584
00:44:28,656 --> 0:44:30,346
to the watch so you can update

1585
00:44:30,426 --> 0:44:31,866
both your users and your apps

1586
00:44:31,946 --> 0:44:33,256
data without relying on the

1587
00:44:33,346 --> 0:44:34,096
phone to mediate.

1588
00:44:35,516 --> 0:44:39,796
[ Applause ]

1589
00:44:40,296 --> 0:44:41,596
We're also supporting Cloud Kit

1590
00:44:41,636 --> 0:44:43,406
subscriptions and complication

1591
00:44:43,406 --> 0:44:44,766
pushes to help you keep your app

1592
00:44:44,766 --> 0:44:45,296
up-to-date.

1593
00:44:46,576 --> 0:44:48,056
And since asking users to sign

1594
00:44:48,056 --> 0:44:49,696
in on iPhone is not an option

1595
00:44:49,816 --> 0:44:50,716
when you don't have an iPhone

1596
00:44:50,906 --> 0:44:52,786
app, in watchOS 6 we're giving

1597
00:44:52,786 --> 0:44:54,386
you text fields so you can offer

1598
00:44:54,386 --> 0:44:55,746
account creation and sign-in

1599
00:44:55,746 --> 0:44:57,366
options directly on Apple Watch.

1600
00:45:01,046 --> 0:45:01,806
If you want to make account

1601
00:45:01,836 --> 0:45:03,376
creation really easy, you can

1602
00:45:03,376 --> 0:45:04,696
even add an Assign with Apple

1603
00:45:04,696 --> 0:45:05,986
button to your app to let your

1604
00:45:05,986 --> 0:45:07,776
users set up an account and sign

1605
00:45:07,776 --> 0:45:08,746
in with the Apple ID they

1606
00:45:08,786 --> 0:45:09,236
already have.

1607
00:45:09,976 --> 0:45:11,736
No new passwords or text entry

1608
00:45:11,736 --> 0:45:12,226
required.

1609
00:45:13,306 --> 0:45:14,536
With watchOS 6 we're also

1610
00:45:14,536 --> 0:45:15,826
addressing a common watch-only

1611
00:45:15,866 --> 0:45:17,596
use case by bringing streaming

1612
00:45:17,596 --> 0:45:18,826
audio to watchOS.

1613
00:45:19,966 --> 0:45:21,206
We introduced background audio

1614
00:45:21,256 --> 0:45:23,106
playback in watchOS 5 for local

1615
00:45:23,106 --> 0:45:23,246
files.

1616
00:45:24,226 --> 0:45:26,056
And now in watchOS 6, we've

1617
00:45:26,056 --> 0:45:27,536
brought three ways to stream

1618
00:45:27,536 --> 0:45:29,436
audio directly to Apple Watch by

1619
00:45:29,436 --> 0:45:30,636
making Network,framework,

1620
00:45:31,156 --> 0:45:33,496
NSURLsessionStreamTask and even

1621
00:45:33,496 --> 0:45:35,186
more of AVFoundation available

1622
00:45:35,186 --> 0:45:35,486
to you.

1623
00:45:36,836 --> 0:45:38,046
We also recognize that there are

1624
00:45:38,046 --> 0:45:39,616
use cases beyond audio playback,

1625
00:45:39,916 --> 0:45:41,906
workouts and navigation where

1626
00:45:41,906 --> 0:45:43,336
you need to keep your app

1627
00:45:43,516 --> 0:45:44,286
running order to complete a

1628
00:45:44,286 --> 0:45:44,436
task.

1629
00:45:45,046 --> 0:45:46,556
For example, a meditation

1630
00:45:46,556 --> 0:45:46,856
session.

1631
00:45:47,756 --> 0:45:49,406
In watchOS 6, we're introducing

1632
00:45:49,406 --> 0:45:51,406
a new extended runtime API that

1633
00:45:51,686 --> 0:45:53,416
gives more apps a way to stay

1634
00:45:53,416 --> 0:45:54,816
running even after the user

1635
00:45:54,816 --> 0:45:55,496
lowers their wrist.

1636
00:45:56,896 --> 0:45:58,546
This enables new app experiences

1637
00:45:58,546 --> 0:46:00,586
in self-care, mindfulness,

1638
00:45:58,546 --> 0:46:00,586
in self-care, mindfulness,

1639
00:46:01,076 --> 0:46:03,406
physical therapy, smart alarms

1640
00:46:03,976 --> 0:46:04,936
and health monitoring.

1641
00:46:05,866 --> 0:46:07,396
That's a lot of new APIs and

1642
00:46:07,446 --> 0:46:08,056
capabilities.

1643
00:46:08,626 --> 0:46:10,446
If only you had more options for

1644
00:46:10,506 --> 0:46:11,556
creating a compelling user

1645
00:46:11,556 --> 0:46:12,646
interface, right?

1646
00:46:13,946 --> 0:46:15,156
We know you've been asking for a

1647
00:46:15,156 --> 0:46:17,016
more advanced UI framework on

1648
00:46:17,016 --> 0:46:17,936
the watch for years.

1649
00:46:18,616 --> 0:46:20,546
And in watchOS 6 we finally have

1650
00:46:20,616 --> 0:46:21,626
one with SwiftUI.

1651
00:46:23,516 --> 0:46:27,546
[ Applause ]

1652
00:46:28,046 --> 0:46:29,286
You've already seen SwiftUI on

1653
00:46:29,626 --> 0:46:29,816
iOS.

1654
00:46:30,396 --> 0:46:31,876
That same declarative language

1655
00:46:31,876 --> 0:46:33,196
for defining beautiful user

1656
00:46:33,196 --> 0:46:34,666
interfaces is available for

1657
00:46:34,666 --> 0:46:36,506
watchOS as well, expanding

1658
00:46:36,506 --> 0:46:37,806
what's possible on the platform.

1659
00:46:38,926 --> 0:46:40,466
From lists with swipe to delete,

1660
00:46:40,866 --> 0:46:42,836
reordering and carousel filing,

1661
00:46:43,166 --> 0:46:44,826
to direct access, the digital

1662
00:46:44,826 --> 0:46:46,626
crown, it's easier than ever to

1663
00:46:46,676 --> 0:46:47,626
create a compelling watch

1664
00:46:47,626 --> 0:46:48,156
experience.

1665
00:46:50,086 --> 0:46:51,096
Let me show you how to start

1666
00:46:51,096 --> 0:46:52,876
making use of some of the new

1667
00:46:52,876 --> 0:46:54,446
independent app features with

1668
00:46:54,526 --> 0:46:54,916
SwiftUI.

1669
00:47:06,196 --> 0:47:07,826
Okay, so I've got my travel app

1670
00:47:07,826 --> 0:47:08,926
running here in the Simulator

1671
00:47:08,926 --> 0:47:09,776
and I've already started

1672
00:47:09,776 --> 0:47:11,686
updating it using SwiftUI, so

1673
00:47:11,686 --> 0:47:12,906
it's starting to look great.

1674
00:47:13,246 --> 0:47:14,446
But I still have some work to do

1675
00:47:14,446 --> 0:47:16,306
beyond layout because my Sign In

1676
00:47:16,306 --> 0:47:17,686
button currently just asks users

1677
00:47:17,716 --> 0:47:18,526
to sign in on iPhone.

1678
00:47:19,116 --> 0:47:20,256
And my users have told me that

1679
00:47:20,256 --> 0:47:21,116
is not what they want.

1680
00:47:21,116 --> 0:47:21,776
They want to be able to do

1681
00:47:21,776 --> 0:47:22,956
everything right on their wrist.

1682
00:47:23,896 --> 0:47:24,436
So I'm going to quit the

1683
00:47:24,476 --> 0:47:25,806
simulator and go over to my

1684
00:47:25,806 --> 0:47:26,576
project file.

1685
00:47:27,106 --> 0:47:28,406
And I'll move to my travel watch

1686
00:47:28,406 --> 0:47:30,436
extension target and declare

1687
00:47:30,436 --> 0:47:32,356
independence from phone by

1688
00:47:32,426 --> 0:47:33,556
checking the Supports Running

1689
00:47:33,646 --> 0:47:35,356
Without iOS App Installation

1690
00:47:35,356 --> 0:47:35,626
box.

1691
00:47:37,136 --> 0:47:38,406
Next I'm going to go to the Sign

1692
00:47:38,406 --> 0:47:39,176
In view that I've already

1693
00:47:39,176 --> 0:47:39,646
started.

1694
00:47:40,346 --> 0:47:41,406
I'll resume my previews.

1695
00:47:42,516 --> 0:47:43,786
Great. And you can see I have a

1696
00:47:43,846 --> 0:47:44,856
Sign In button here and two

1697
00:47:44,916 --> 0:47:45,556
previews.

1698
00:47:45,716 --> 0:47:47,266
The top one is for English which

1699
00:47:47,266 --> 0:47:48,806
is the language that I speak and

1700
00:47:48,806 --> 0:47:50,006
the bottom one I'm starting to

1701
00:47:50,006 --> 0:47:51,466
experiment with localizing my

1702
00:47:51,466 --> 0:47:52,666
app into Arabic which is a

1703
00:47:52,666 --> 0:47:53,566
right-to-left language.

1704
00:47:54,736 --> 0:47:55,736
So the first thing I'm going to

1705
00:47:55,736 --> 0:47:56,916
do is add a field for my

1706
00:47:56,916 --> 0:47:57,616
Username button.

1707
00:47:58,036 --> 0:48:00,936
And I'm going to bind this to my

1708
00:47:58,036 --> 0:48:00,936
And I'm going to bind this to my

1709
00:48:00,976 --> 0:48:01,126
-- oops.

1710
00:48:03,216 --> 0:48:04,726
To my username state so that the

1711
00:48:04,726 --> 0:48:06,146
field updates as the value

1712
00:48:06,146 --> 0:48:06,606
changes.

1713
00:48:07,436 --> 0:48:08,756
Notice I've set the placeholder

1714
00:48:08,756 --> 0:48:10,086
text to username so I give the

1715
00:48:10,086 --> 0:48:11,406
user a chance to figure out what

1716
00:48:11,476 --> 0:48:12,226
to do with this field.

1717
00:48:12,596 --> 0:48:13,916
And I've also set the content

1718
00:48:13,966 --> 0:48:15,506
type to username so that

1719
00:48:15,616 --> 0:48:17,016
password and username autofill

1720
00:48:17,216 --> 0:48:19,356
works when using continuity

1721
00:48:19,356 --> 0:48:19,656
keyboard.

1722
00:48:20,796 --> 0:48:21,906
Next I'm going to add a password

1723
00:48:21,966 --> 0:48:23,206
field, and for this I want to

1724
00:48:23,206 --> 0:48:24,566
use a secure field so that

1725
00:48:24,676 --> 0:48:27,166
people can't spy on me when I'm

1726
00:48:27,166 --> 0:48:27,916
typing my password.

1727
00:48:28,016 --> 0:48:28,916
And again, I'm going to bind

1728
00:48:28,916 --> 0:48:30,676
this to my password state.

1729
00:48:31,756 --> 0:48:34,286
I've got a password placeholder

1730
00:48:34,286 --> 0:48:35,646
text and again I'm using the

1731
00:48:35,706 --> 0:48:37,346
content type of Password for

1732
00:48:37,346 --> 0:48:37,966
autofill purposes.

1733
00:48:37,966 --> 0:48:39,826
So that looks great in both

1734
00:48:39,826 --> 0:48:40,676
English and Arabic.

1735
00:48:40,676 --> 0:48:41,806
And for Arabic it's pulling the

1736
00:48:41,806 --> 0:48:42,726
strings right out of my

1737
00:48:42,726 --> 0:48:43,886
localizable strings file.

1738
00:48:43,946 --> 0:48:45,256
This is not placeholder content.

1739
00:48:46,626 --> 0:48:48,676
Okay. Above this, what I want to

1740
00:48:48,676 --> 0:48:50,526
do is add a Sign In With Apple

1741
00:48:50,526 --> 0:48:51,486
button because I think that's

1742
00:48:51,486 --> 0:48:52,376
how users are really going to

1743
00:48:52,376 --> 0:48:53,036
want to sign in.

1744
00:48:54,716 --> 0:48:55,636
So now I put that right at the

1745
00:48:55,696 --> 0:48:57,356
top and then add a separator so

1746
00:48:57,356 --> 0:48:58,706
it's clear that users have an

1747
00:48:58,706 --> 0:48:59,606
option of signing in with their

1748
00:48:59,606 --> 0:49:01,926
Apple ID or creating a customer

1749
00:48:59,606 --> 0:49:01,926
Apple ID or creating a customer

1750
00:49:01,926 --> 0:49:03,066
username and password for my

1751
00:49:03,066 --> 0:49:03,196
app.

1752
00:49:03,716 --> 0:49:04,226
That looks great.

1753
00:49:05,286 --> 0:49:06,396
So the last step is to go over

1754
00:49:06,396 --> 0:49:08,826
to my hosting controller and

1755
00:49:08,826 --> 0:49:10,476
change my destination for my

1756
00:49:10,546 --> 0:49:13,466
presentation button to the Sign

1757
00:49:13,466 --> 0:49:14,526
In view that I just created

1758
00:49:14,526 --> 0:49:16,006
instead of the Sign In on iPhone

1759
00:49:16,006 --> 0:49:16,136
view.

1760
00:49:16,136 --> 0:49:19,236
So I got that going and now I

1761
00:49:19,236 --> 0:49:20,996
want to turn on Live Preview, so

1762
00:49:20,996 --> 0:49:21,696
all my buttons become

1763
00:49:21,696 --> 0:49:22,006
interactive.

1764
00:49:22,076 --> 0:49:24,726
And then when I click on my Sign

1765
00:49:24,726 --> 0:49:26,026
In button, I get my form.

1766
00:49:26,796 --> 0:49:28,426
Sign In With Apple, or sign in

1767
00:49:28,426 --> 0:49:29,416
with a username and password.

1768
00:49:29,626 --> 0:49:30,606
That looks great.

1769
00:49:31,126 --> 0:49:32,576
And that is creating a sign-in

1770
00:49:32,646 --> 0:49:33,766
form on the Apple Watch with

1771
00:49:33,766 --> 0:49:33,976
SwiftUI.

1772
00:49:34,516 --> 0:49:41,546
[ Applause ]

1773
00:49:42,046 --> 0:49:43,906
Okay. So you've got the tools to

1774
00:49:43,906 --> 0:49:45,156
build a great independent Apple

1775
00:49:45,156 --> 0:49:46,076
Watch experience.

1776
00:49:46,666 --> 0:49:47,526
How are you going to get your

1777
00:49:47,526 --> 0:49:50,146
app in front of customers with

1778
00:49:51,006 --> 0:49:52,606
the least friction possible?

1779
00:49:54,286 --> 0:49:55,246
The App Store and Apple Watch

1780
00:49:55,386 --> 0:49:56,516
will be highlighting great

1781
00:49:56,516 --> 0:49:58,026
independent apps through curated

1782
00:49:58,026 --> 0:49:59,256
collections and editorial

1783
00:49:59,306 --> 0:50:00,886
selections at the top level of

1784
00:49:59,306 --> 0:50:00,886
selections at the top level of

1785
00:50:00,886 --> 0:50:01,456
the App Store.

1786
00:50:02,196 --> 0:50:03,696
We're emphasizing independent

1787
00:50:03,696 --> 0:50:05,166
apps here so users can get the

1788
00:50:05,166 --> 0:50:06,706
instant gratification of being

1789
00:50:06,706 --> 0:50:08,176
able to download and start using

1790
00:50:08,296 --> 0:50:10,376
your awesome apps right away,

1791
00:50:10,596 --> 0:50:11,636
whether they have the phone with

1792
00:50:11,636 --> 0:50:12,926
them or not.

1793
00:50:15,046 --> 0:50:15,826
And when you dive into

1794
00:50:15,826 --> 0:50:17,016
individual product pages, you'll

1795
00:50:17,086 --> 0:50:18,336
see that this isn't just a pared

1796
00:50:18,336 --> 0:50:19,086
down experience.

1797
00:50:19,496 --> 0:50:21,046
Users will see full featured app

1798
00:50:21,226 --> 0:50:22,366
descriptions, screenshots,

1799
00:50:22,546 --> 0:50:23,546
reviews and more.

1800
00:50:25,306 --> 0:50:26,636
They can search for apps with

1801
00:50:26,636 --> 0:50:27,656
dictation or scribble.

1802
00:50:28,956 --> 0:50:30,336
And they'll be able to download

1803
00:50:30,536 --> 0:50:32,306
your apps directly to their

1804
00:50:32,306 --> 0:50:34,356
wrists, thanks to app and asset

1805
00:50:34,356 --> 0:50:35,936
thinning which make it possible

1806
00:50:35,936 --> 0:50:37,516
to deliver a small bundle with

1807
00:50:37,516 --> 0:50:39,566
only the architecture and assets

1808
00:50:39,566 --> 0:50:40,836
that makes sense for the current

1809
00:50:40,836 --> 0:50:41,276
watch.

1810
00:50:42,186 --> 0:50:43,776
If you have both an iOS and a

1811
00:50:43,776 --> 0:50:45,266
watchOS app, this will make your

1812
00:50:45,406 --> 0:50:47,556
iOS app smaller too, as we're no

1813
00:50:47,556 --> 0:50:48,666
longer downloading the watch

1814
00:50:48,756 --> 0:50:50,226
bundle to the phone and then

1815
00:50:50,226 --> 0:50:50,956
shuttling it over.

1816
00:50:52,316 --> 0:50:53,846
This is truly a whole new era

1817
00:50:53,996 --> 0:50:55,526
for Apple Watch apps to be more

1818
00:50:55,596 --> 0:50:57,476
functional, more beautiful and

1819
00:50:57,476 --> 0:50:58,686
more independent than ever.

1820
00:50:59,186 --> 0:51:00,426
We think both you and your

1821
00:50:59,186 --> 0:51:00,426
We think both you and your

1822
00:51:00,506 --> 0:51:01,646
customers are going to love

1823
00:51:01,706 --> 0:51:01,806
this.

1824
00:51:03,226 --> 0:51:04,386
And now to talk about the

1825
00:51:04,386 --> 0:51:05,546
platform that we just declared

1826
00:51:05,546 --> 0:51:07,216
independence from, I'd like to

1827
00:51:07,216 --> 0:51:08,276
welcome Cindy to the stage.

1828
00:51:09,516 --> 0:51:15,556
[ Applause ]

1829
00:51:16,056 --> 0:51:16,866
&gt;&gt; Thank you, Lori.

1830
00:51:17,086 --> 0:51:20,236
iOS 13 is a big release.

1831
00:51:21,476 --> 0:51:22,636
You saw this morning that we

1832
00:51:22,636 --> 0:51:24,186
have a ton of new features and

1833
00:51:24,486 --> 0:51:26,946
enhancements like a redesigned

1834
00:51:26,946 --> 0:51:28,506
share sheet, a Quick Type

1835
00:51:28,646 --> 0:51:30,606
keyboard and a brand-new CarPlay

1836
00:51:30,606 --> 0:51:31,066
experience.

1837
00:51:32,426 --> 0:51:34,156
In addition to all of that, we

1838
00:51:34,156 --> 0:51:35,586
took a good long look at our UI

1839
00:51:36,216 --> 0:51:38,696
and gave iOS 13 a brand new

1840
00:51:38,696 --> 0:51:38,796
look.

1841
00:51:39,956 --> 0:51:41,346
This new look includes Dark

1842
00:51:41,426 --> 0:51:44,196
Mode, cards, contextual actions

1843
00:51:44,196 --> 0:51:44,856
and symbols.

1844
00:51:46,056 --> 0:51:47,466
Let's dive into the incredibly

1845
00:51:47,576 --> 0:51:48,686
cool new Dark Mode.

1846
00:51:50,456 --> 0:51:51,596
Dark mode keeps the brightness

1847
00:51:51,676 --> 0:51:53,436
down and gets Chrome out of the

1848
00:51:53,436 --> 0:51:55,146
way so you can focus on just

1849
00:51:55,426 --> 0:51:55,956
content.

1850
00:51:56,786 --> 0:51:58,276
The entire system has been

1851
00:51:58,276 --> 0:51:59,726
really thoughtfully updated and

1852
00:51:59,726 --> 0:52:00,856
refined to look amazing.

1853
00:51:59,726 --> 0:52:00,856
refined to look amazing.

1854
00:52:00,856 --> 0:52:03,336
Your users are definitely going

1855
00:52:03,336 --> 0:52:03,876
to want this.

1856
00:52:04,406 --> 0:52:05,906
And to help you bring these same

1857
00:52:05,906 --> 0:52:08,106
refinements to your apps, we've

1858
00:52:08,106 --> 0:52:10,206
created some new APIs designed

1859
00:52:10,286 --> 0:52:11,706
specifically with Dark Mode in

1860
00:52:11,706 --> 0:52:11,976
mind.

1861
00:52:13,326 --> 0:52:15,266
But first it's semantic colors.

1862
00:52:16,626 --> 0:52:17,646
There are new colors for

1863
00:52:17,646 --> 0:52:19,586
backgrounds, fills and text.

1864
00:52:20,426 --> 0:52:21,686
And in Dark Mode, they have

1865
00:52:21,686 --> 0:52:23,686
multiple variants to give your

1866
00:52:23,686 --> 0:52:25,126
app a visual hierarchy.

1867
00:52:25,916 --> 0:52:26,806
Now what does that mean?

1868
00:52:27,626 --> 0:52:28,686
Well, when your app is

1869
00:52:28,796 --> 0:52:30,376
full-screen, its background is

1870
00:52:30,546 --> 0:52:30,966
pure black.

1871
00:52:31,896 --> 0:52:33,346
To ensure sufficient contrast,

1872
00:52:34,016 --> 0:52:36,066
UI presented above it takes on a

1873
00:52:36,156 --> 0:52:37,166
brighter color palette.

1874
00:52:38,136 --> 0:52:40,126
When multitasking on iPad, the

1875
00:52:40,216 --> 0:52:42,146
slide-over app and side-by-side

1876
00:52:42,356 --> 0:52:43,626
apps also render in these

1877
00:52:43,626 --> 0:52:44,976
lighter layer colors.

1878
00:52:46,286 --> 0:52:47,686
There is a lot of nuance to this

1879
00:52:47,786 --> 0:52:49,276
design, but you'll get it

1880
00:52:49,356 --> 0:52:50,556
automatically with semantic

1881
00:52:50,556 --> 0:52:50,786
colors.

1882
00:52:52,686 --> 0:52:54,156
And for when you need a pop,

1883
00:52:54,156 --> 0:52:55,086
there's a bright palette of

1884
00:52:55,236 --> 0:52:56,776
system colors that all have

1885
00:52:56,776 --> 0:52:58,106
variants for the increased

1886
00:52:58,106 --> 0:53:00,076
contrast accessibility mode as

1887
00:52:58,106 --> 0:53:00,076
contrast accessibility mode as

1888
00:53:00,076 --> 0:53:01,706
well variants for Dark Mode.

1889
00:53:05,046 --> 0:53:07,326
There's also a brand-new set of

1890
00:53:07,326 --> 0:53:09,276
materials and vibrant content

1891
00:53:09,366 --> 0:53:10,946
filters with varying levels of

1892
00:53:10,946 --> 0:53:12,936
transparency so you can create

1893
00:53:12,936 --> 0:53:14,576
UI that looks great over any

1894
00:53:14,636 --> 0:53:14,866
content.

1895
00:53:15,596 --> 0:53:17,116
And just like semantic colors,

1896
00:53:17,586 --> 0:53:19,116
these materials support both

1897
00:53:19,246 --> 0:53:20,936
light and dark variants.

1898
00:53:21,886 --> 0:53:23,246
And they will automatically

1899
00:53:23,426 --> 0:53:24,996
update based on changes to the

1900
00:53:25,046 --> 0:53:26,336
UI Kit trait collection.

1901
00:53:27,676 --> 0:53:29,126
Adopting semantic colors and

1902
00:53:29,126 --> 0:53:30,696
adaptive materials will help you

1903
00:53:30,696 --> 0:53:32,496
provide a unified look that

1904
00:53:32,496 --> 0:53:33,986
automatically adapts to your

1905
00:53:33,986 --> 0:53:34,416
environment.

1906
00:53:36,826 --> 0:53:38,736
Another component of iOS 13's

1907
00:53:38,736 --> 0:53:39,836
new look is cards.

1908
00:53:41,496 --> 0:53:43,196
Since the original SDK, the

1909
00:53:43,196 --> 0:53:45,286
default presentation style on

1910
00:53:45,286 --> 0:53:46,346
iPhone has covered the full

1911
00:53:46,426 --> 0:53:46,846
screen.

1912
00:53:47,696 --> 0:53:49,286
We're changing that default to a

1913
00:53:49,286 --> 0:53:50,526
much more fluid card

1914
00:53:50,576 --> 0:53:51,286
presentation.

1915
00:53:52,326 --> 0:53:54,086
Cards provide a visual stack so

1916
00:53:54,086 --> 0:53:55,416
you can see at a glance that

1917
00:53:55,416 --> 0:53:56,606
you're in a presentation.

1918
00:53:56,926 --> 0:53:58,006
And even better, they're

1919
00:53:58,006 --> 0:53:59,416
dismissible with just a single

1920
00:53:59,416 --> 0:53:59,956
downward swipe.

1921
00:54:03,196 --> 0:54:05,196
[ Applause ]

1922
00:54:05,376 --> 0:54:08,386
Yeah. Swiping.

1923
00:54:08,656 --> 0:54:10,276
We've also updated the Peek and

1924
00:54:10,276 --> 0:54:11,256
Pop experience.

1925
00:54:12,106 --> 0:54:14,196
It's now quicker and easier to

1926
00:54:14,196 --> 0:54:15,726
access contextual actions

1927
00:54:15,816 --> 0:54:16,666
throughout the system.

1928
00:54:17,306 --> 0:54:18,136
And they're backed by a

1929
00:54:18,196 --> 0:54:20,126
brand-new API designed to work

1930
00:54:20,126 --> 0:54:21,276
across all devices.

1931
00:54:21,616 --> 0:54:22,636
So not only are they better than

1932
00:54:22,636 --> 0:54:24,616
ever on iPhone, but they look

1933
00:54:24,666 --> 0:54:25,816
great on iPad as well.

1934
00:54:26,836 --> 0:54:28,036
And when you bring your iPad app

1935
00:54:28,456 --> 0:54:29,806
to macOS, they'll look great

1936
00:54:29,806 --> 0:54:29,976
there to.

1937
00:54:33,516 --> 0:54:36,506
[ Applause ]

1938
00:54:37,006 --> 0:54:38,146
Yeah. While we were going

1939
00:54:38,146 --> 0:54:39,316
through the system, making all

1940
00:54:39,316 --> 0:54:41,276
those thoughtful refinements, we

1941
00:54:41,276 --> 0:54:42,496
started thinking about symbols.

1942
00:54:44,556 --> 0:54:45,756
Most apps use symbols.

1943
00:54:46,276 --> 0:54:47,556
They are a really useful way to

1944
00:54:47,556 --> 0:54:48,626
convey information.

1945
00:54:48,626 --> 0:54:50,966
And symbols are very often used

1946
00:54:50,966 --> 0:54:51,286
with text.

1947
00:54:51,536 --> 0:54:53,176
But text has some great

1948
00:54:53,256 --> 0:54:54,856
properties that in iOS 12 our

1949
00:54:54,976 --> 0:54:55,846
symbols just didn't have.

1950
00:54:57,566 --> 0:54:59,536
So as you can see here, the text

1951
00:54:59,796 --> 0:55:01,566
is scaling nicely as the dynamic

1952
00:54:59,796 --> 0:55:01,566
is scaling nicely as the dynamic

1953
00:55:01,566 --> 0:55:03,316
type size increases, but the

1954
00:55:03,316 --> 0:55:04,436
symbols stayed the same.

1955
00:55:05,276 --> 0:55:06,666
Ideally, we'd want the symbols

1956
00:55:06,716 --> 0:55:07,996
to scale along with the text.

1957
00:55:09,906 --> 0:55:11,246
So we created SF Symbols.

1958
00:55:12,766 --> 0:55:13,916
SF Symbols have all the

1959
00:55:13,916 --> 0:55:15,646
expressiveness and behavior of a

1960
00:55:15,796 --> 0:55:17,786
font but packaged up as a UI

1961
00:55:17,996 --> 0:55:19,136
image so they're really easy to

1962
00:55:19,136 --> 0:55:19,896
use in your apps.

1963
00:55:20,616 --> 0:55:23,326
iOS 13 includes an absolutely

1964
00:55:23,596 --> 0:55:25,966
massive catalog of over 1,500 SF

1965
00:55:26,086 --> 0:55:27,076
Symbols for you to use.

1966
00:55:27,076 --> 0:55:29,136
And they're easily searchable

1967
00:55:29,266 --> 0:55:31,796
right within Xcode and using

1968
00:55:31,796 --> 0:55:33,396
standalone SF Symbols app on

1969
00:55:33,396 --> 0:55:33,636
your Mac.

1970
00:55:35,516 --> 0:55:43,106
[ Applause ]

1971
00:55:43,606 --> 0:55:45,316
Symbols. [Laughs] So now you can

1972
00:55:45,316 --> 0:55:47,206
see the symbols scale along with

1973
00:55:47,316 --> 0:55:49,576
the text for better legibility

1974
00:55:49,576 --> 0:55:51,246
and a more consistent layout at

1975
00:55:51,246 --> 0:55:51,906
larger sizes.

1976
00:55:51,906 --> 0:55:54,696
And because they behave just

1977
00:55:54,696 --> 0:55:56,286
like a font, they're available

1978
00:55:56,286 --> 0:55:57,656
in all of these weights as well.

1979
00:56:00,516 --> 0:56:03,586
[ Applause ]

1980
00:56:04,086 --> 0:56:05,206
All of this just scratches the

1981
00:56:05,286 --> 0:56:06,486
surface of what's available in

1982
00:56:06,666 --> 0:56:07,476
iOS 13.

1983
00:56:08,026 --> 0:56:09,786
There's a new share sheet API to

1984
00:56:09,786 --> 0:56:11,116
let apps have recipient

1985
00:56:11,236 --> 0:56:11,556
suggestions.

1986
00:56:11,996 --> 0:56:13,596
A new compositional layout API

1987
00:56:13,896 --> 0:56:15,066
to make collection views easier

1988
00:56:15,066 --> 0:56:15,906
to work with than ever.

1989
00:56:15,906 --> 0:56:17,976
And a screenshot enhancement so

1990
00:56:18,136 --> 0:56:19,946
apps can provide full page views

1991
00:56:19,946 --> 0:56:20,846
of long content.

1992
00:56:21,086 --> 0:56:22,046
And so much more.

1993
00:56:24,686 --> 0:56:26,916
And in addition to all of that,

1994
00:56:27,556 --> 0:56:28,866
we really wanted to bring iOS

1995
00:56:29,016 --> 0:56:29,746
forward this year.

1996
00:56:31,486 --> 0:56:32,716
So we gave it its own operating

1997
00:56:32,796 --> 0:56:34,336
system complete with major

1998
00:56:34,336 --> 0:56:36,296
enhancements to multitasking, a

1999
00:56:36,296 --> 0:56:38,086
new PencilKit framework and a

2000
00:56:38,086 --> 0:56:39,876
whole suite of productivity

2001
00:56:39,876 --> 0:56:40,336
gestures.

2002
00:56:42,416 --> 0:56:43,926
Let's start with multitasking.

2003
00:56:45,176 --> 0:56:47,586
At iPadOS, your app can be open

2004
00:56:47,586 --> 0:56:49,346
in multiple spaces at the same

2005
00:56:49,346 --> 0:56:50,946
time, as well as in the

2006
00:56:51,006 --> 0:56:52,786
slide-over stack, and display

2007
00:56:52,786 --> 0:56:54,516
different content in each space.

2008
00:56:56,466 --> 0:56:57,726
To enable this, we're

2009
00:56:57,726 --> 0:56:59,226
introducing a new UI window

2010
00:56:59,226 --> 0:57:00,066
scene API.

2011
00:56:59,226 --> 0:57:00,066
scene API.

2012
00:57:01,286 --> 0:57:02,796
Each window scene represents a

2013
00:57:02,896 --> 0:57:04,416
single instance of your app's

2014
00:57:04,416 --> 0:57:04,536
UI.

2015
00:57:06,266 --> 0:57:08,016
Prior to iPadOS, your app

2016
00:57:08,236 --> 0:57:09,656
delegate was responsible for

2017
00:57:09,656 --> 0:57:11,356
both its process and UI

2018
00:57:11,586 --> 0:57:12,236
lifecycle.

2019
00:57:13,246 --> 0:57:14,136
With window scene, we're

2020
00:57:14,136 --> 0:57:15,856
splitting out the UI portion of

2021
00:57:15,856 --> 0:57:17,706
that into a new scene delegate

2022
00:57:17,826 --> 0:57:19,416
object so it can be managed

2023
00:57:19,506 --> 0:57:20,316
independently.

2024
00:57:21,236 --> 0:57:22,516
And since they're completely

2025
00:57:22,516 --> 0:57:23,796
independent, your app can now

2026
00:57:23,796 --> 0:57:25,506
manage multiple at the same

2027
00:57:26,416 --> 0:57:26,526
time.

2028
00:57:27,056 --> 0:57:30,276
Your users can even use drag and

2029
00:57:30,276 --> 0:57:32,156
drop to allow individual items

2030
00:57:32,156 --> 0:57:33,726
from your apps such as a single

2031
00:57:33,726 --> 0:57:35,466
window or message to be opened

2032
00:57:35,466 --> 0:57:36,816
in a brand-new window scene.

2033
00:57:38,966 --> 0:57:40,866
With this new capability, it's

2034
00:57:40,866 --> 0:57:42,506
really important that your users

2035
00:57:42,656 --> 0:57:43,806
can resume whatever they were

2036
00:57:43,806 --> 0:57:46,066
doing in any scene at any time.

2037
00:57:46,926 --> 0:57:48,226
To make this easy, we've built a

2038
00:57:48,226 --> 0:57:49,836
new state restoration system

2039
00:57:49,946 --> 0:57:51,566
based on NSUserActivity.

2040
00:57:52,786 --> 0:57:54,116
You're probably already familiar

2041
00:57:54,116 --> 0:57:55,386
with this versatile API.

2042
00:57:55,936 --> 0:57:57,766
It's used for handoff, search,

2043
00:57:57,906 --> 0:58:00,636
indexing, Siri, and now for

2044
00:57:57,906 --> 0:58:00,636
indexing, Siri, and now for

2045
00:58:00,636 --> 0:58:02,386
window scene state restoration.

2046
00:58:06,326 --> 0:58:07,456
One of the things that really

2047
00:58:07,456 --> 0:58:09,886
sets -- you can clap, it's fine.

2048
00:58:10,516 --> 0:58:15,546
[ Applause ]

2049
00:58:16,046 --> 0:58:16,746
One of the things that really

2050
00:58:16,746 --> 0:58:18,286
sets iPads apart is Apple

2051
00:58:18,356 --> 0:58:18,806
Pencil.

2052
00:58:20,136 --> 0:58:21,336
We're introducing PencilKit

2053
00:58:21,486 --> 0:58:22,686
which allows you to easily add

2054
00:58:23,076 --> 0:58:24,866
smooth low-latency drawing to

2055
00:58:24,926 --> 0:58:25,706
your apps.

2056
00:58:26,696 --> 0:58:28,436
This is the same engine used in

2057
00:58:28,436 --> 0:58:30,696
Apple apps like Notes, Markup

2058
00:58:30,696 --> 0:58:31,476
and Screenshots.

2059
00:58:31,476 --> 0:58:33,106
So you get all of those same

2060
00:58:33,146 --> 0:58:34,566
features and tools right in your

2061
00:58:36,116 --> 0:58:36,226
apps.

2062
00:58:36,616 --> 0:58:38,276
You can even use the canvas and

2063
00:58:38,276 --> 0:58:39,996
palette functionality separately

2064
00:58:40,316 --> 0:58:41,476
and just pick and choose which

2065
00:58:41,516 --> 0:58:43,146
pieces make sense for your use

2066
00:58:44,226 --> 0:58:44,326
case.

2067
00:58:45,076 --> 0:58:47,046
Finally, let's talk about

2068
00:58:47,046 --> 0:58:48,396
productivity gestures.

2069
00:58:50,266 --> 0:58:51,596
We've made text selection much

2070
00:58:51,596 --> 0:58:52,026
easier.

2071
00:58:52,506 --> 0:58:53,596
You can now just drag your

2072
00:58:53,656 --> 0:58:55,336
finger along text to select it.

2073
00:58:56,286 --> 0:58:57,716
Text views and web views are

2074
00:58:57,766 --> 0:58:59,406
automatically updated with this

2075
00:58:59,406 --> 0:59:00,976
new selection gesture.

2076
00:58:59,406 --> 0:59:00,976
new selection gesture.

2077
00:59:03,006 --> 0:59:04,356
And there are new three-finger

2078
00:59:04,486 --> 0:59:05,646
gestures for undo and redo.

2079
00:59:07,056 --> 0:59:08,226
Swipe three fingers left for

2080
00:59:08,356 --> 0:59:09,666
undo and right for redo.

2081
00:59:10,436 --> 0:59:11,866
These new gestures use the

2082
00:59:11,956 --> 0:59:13,546
existing NSUndoManager so you

2083
00:59:13,546 --> 0:59:14,766
don't have to do anything at all

2084
00:59:14,766 --> 0:59:14,976
to adopt.

2085
00:59:19,046 --> 0:59:20,046
If you'd like easy text

2086
00:59:20,156 --> 0:59:21,796
selection outside of text or web

2087
00:59:21,796 --> 0:59:23,796
views, or if your app already

2088
00:59:23,796 --> 0:59:25,226
uses three-finger gestures and

2089
00:59:25,226 --> 0:59:26,906
you have a conflict, you can use

2090
00:59:26,906 --> 0:59:29,016
the UITexInteraction API to fix

2091
00:59:29,066 --> 0:59:29,756
up those issues.

2092
00:59:32,276 --> 0:59:33,466
And for scroll views, you can

2093
00:59:33,466 --> 0:59:35,156
now drag the scroll indicator to

2094
00:59:35,156 --> 0:59:36,916
jump directly to a location in

2095
00:59:36,916 --> 0:59:37,526
the scroll view.

2096
00:59:38,736 --> 0:59:40,006
To enable this behavior, just

2097
00:59:40,046 --> 0:59:41,796
turn on Show Scroll Indicators.

2098
00:59:42,396 --> 0:59:43,476
For this one it's really

2099
00:59:43,476 --> 0:59:44,676
important that your scrolling is

2100
00:59:44,766 --> 0:59:46,196
performant as we might have to

2101
00:59:46,196 --> 0:59:48,076
load all of the cells in a frame

2102
00:59:48,076 --> 0:59:50,186
at the same time.

2103
00:59:50,956 --> 0:59:52,246
We think our users are going to

2104
00:59:52,246 --> 0:59:53,796
love the powerful new things

2105
00:59:53,796 --> 0:59:56,236
iPadOS gives them, and we cannot

2106
00:59:56,236 --> 0:59:57,566
wait to see what you do with it.

2107
00:59:58,536 --> 0:59:59,756
So I'd like to welcome Sebastien

2108
00:59:59,756 --> 1:00:00,576
back to the stage.

2109
00:59:59,756 --> 1:00:00,576
back to the stage.

2110
01:00:01,516 --> 1:00:06,666
[ Applause ]

2111
01:00:07,166 --> 1:00:07,966
&gt;&gt; Thank you, Cindy.

2112
01:00:08,676 --> 1:00:10,146
Now as you've seen, each of our

2113
01:00:10,146 --> 1:00:11,546
platforms has incredible new

2114
01:00:11,616 --> 1:00:13,036
features that refine the

2115
01:00:13,036 --> 1:00:14,866
experience that each offers and

2116
01:00:14,866 --> 1:00:15,696
gives them great new

2117
01:00:15,696 --> 1:00:16,436
capabilities.

2118
01:00:16,816 --> 1:00:18,336
And across all of our platforms

2119
01:00:18,686 --> 1:00:20,226
we build a range of technologies

2120
01:00:20,226 --> 1:00:21,186
that are designed to give your

2121
01:00:21,186 --> 1:00:23,746
apps a huge head start so that

2122
01:00:23,746 --> 1:00:24,846
you can build the latest

2123
01:00:24,846 --> 1:00:26,956
technologies right into your

2124
01:00:26,956 --> 1:00:27,206
app.

2125
01:00:28,156 --> 1:00:28,936
There are a few of these that

2126
01:00:28,936 --> 1:00:29,946
we'd like to focus on this

2127
01:00:29,986 --> 1:00:31,426
afternoon and they cover a

2128
01:00:31,426 --> 1:00:32,206
pretty wide range of

2129
01:00:32,246 --> 1:00:34,096
capabilities from how we open

2130
01:00:34,096 --> 1:00:36,216
our platforms and apps to all

2131
01:00:36,216 --> 1:00:37,936
users to how we combine the

2132
01:00:37,936 --> 1:00:39,386
virtual and real-world with

2133
01:00:39,386 --> 1:00:40,296
augmented reality.

2134
01:00:40,876 --> 1:00:41,596
And so we start with

2135
01:00:41,596 --> 1:00:43,026
accessibility, and to do that

2136
01:00:43,026 --> 1:00:44,456
I'd like to welcome Eric Seymour

2137
01:00:44,676 --> 1:00:45,156
on stage.

2138
01:00:45,156 --> 1:00:45,586
Eric?

2139
01:00:46,516 --> 1:00:48,596
[ Applause ]

2140
01:00:49,096 --> 1:00:49,826
&gt;&gt; Thank you, Sebastien.

2141
01:00:52,646 --> 1:00:54,156
So we all know that technology

2142
01:00:54,246 --> 1:00:55,636
plays a powerful role in

2143
01:00:55,636 --> 1:00:55,936
people's lives.

2144
01:00:55,936 --> 1:00:59,696
But this is especially true for

2145
01:00:59,696 --> 1:01:00,936
people with disabilities.

2146
01:00:59,696 --> 1:01:00,936
people with disabilities.

2147
01:01:01,456 --> 1:01:03,126
Technology can be instrumental

2148
01:01:03,126 --> 1:01:04,456
in fostering independence,

2149
01:01:04,456 --> 1:01:06,176
employment and empowerment.

2150
01:01:06,176 --> 1:01:08,026
At Apple, we're guided by a few

2151
01:01:08,026 --> 1:01:09,866
key principles for accessibility

2152
01:01:09,866 --> 1:01:11,396
and it begins with accessibility

2153
01:01:11,396 --> 1:01:12,226
being built in.

2154
01:01:12,816 --> 1:01:14,066
People should be able to use our

2155
01:01:14,066 --> 1:01:15,926
products out of the box, and

2156
01:01:15,926 --> 1:01:17,296
that includes people of all

2157
01:01:17,296 --> 1:01:17,826
abilities.

2158
01:01:19,276 --> 1:01:20,206
Accessibility should be

2159
01:01:20,256 --> 1:01:20,986
comprehensive.

2160
01:01:21,366 --> 1:01:23,336
People should have access to the

2161
01:01:23,336 --> 1:01:25,836
whole platform, every corner of

2162
01:01:25,836 --> 1:01:26,736
the OS, every corner of your

2163
01:01:26,736 --> 1:01:27,216
apps.

2164
01:01:28,006 --> 1:01:30,176
And perhaps most important, we

2165
01:01:30,176 --> 1:01:32,216
want to surprise and delight all

2166
01:01:32,216 --> 1:01:34,036
users regardless of ability.

2167
01:01:34,136 --> 1:01:35,586
And so this is more than just

2168
01:01:35,626 --> 1:01:37,426
about fixing accessibility bugs.

2169
01:01:37,466 --> 1:01:39,276
This is about using your

2170
01:01:39,276 --> 1:01:41,016
features with accessibility and

2171
01:01:41,016 --> 1:01:42,366
striving for an experience

2172
01:01:42,366 --> 1:01:43,736
that's great, that's just as

2173
01:01:43,736 --> 1:01:44,976
inspired as your original

2174
01:01:44,976 --> 1:01:45,386
design.

2175
01:01:45,386 --> 1:01:48,366
When we think about

2176
01:01:49,176 --> 1:01:51,126
accessibility, we're really

2177
01:01:51,126 --> 1:01:53,226
talking about a broad continuum

2178
01:01:53,226 --> 1:01:53,886
of abilities.

2179
01:01:54,646 --> 1:01:56,696
Hearing, vision, physical,

2180
01:01:56,696 --> 1:01:57,726
learning.

2181
01:01:57,836 --> 1:01:59,606
And within each of these areas,

2182
01:01:59,606 --> 1:02:00,446
we're focused on different

2183
01:01:59,606 --> 1:02:00,446
we're focused on different

2184
01:02:00,446 --> 1:02:01,196
conditions.

2185
01:02:02,116 --> 1:02:03,796
So for example, for vision, we

2186
01:02:03,836 --> 1:02:05,906
of course have Voiceover, our

2187
01:02:05,906 --> 1:02:06,966
screen reader for people who

2188
01:02:06,966 --> 1:02:07,846
can't see the screen.

2189
01:02:07,846 --> 1:02:11,586
But we also have over a dozen

2190
01:02:11,586 --> 1:02:13,096
vision-related features from

2191
01:02:13,096 --> 1:02:15,116
zoom to large text.

2192
01:02:15,696 --> 1:02:17,156
And when we take this approach

2193
01:02:17,366 --> 1:02:18,866
and we apply it to that broad

2194
01:02:18,866 --> 1:02:20,846
continuum of abilities, we're

2195
01:02:20,846 --> 1:02:22,676
talking about dozens of

2196
01:02:22,676 --> 1:02:23,776
accessibility features.

2197
01:02:23,776 --> 1:02:24,956
And it really underscores the

2198
01:02:24,956 --> 1:02:28,396
notion that accessibility is for

2199
01:02:28,396 --> 1:02:29,006
everyone.

2200
01:02:30,456 --> 1:02:32,036
Probably most of you use at

2201
01:02:32,036 --> 1:02:33,706
least one accessibility feature.

2202
01:02:33,706 --> 1:02:34,666
And if you don't already,

2203
01:02:35,136 --> 1:02:36,196
there's a good chance you will

2204
01:02:36,196 --> 1:02:36,786
eventually.

2205
01:02:37,306 --> 1:02:40,836
This year we're introducing

2206
01:02:40,916 --> 1:02:42,076
several new accessibility

2207
01:02:42,076 --> 1:02:43,476
features and enhancements, and

2208
01:02:43,476 --> 1:02:44,616
today I'm going to talk about

2209
01:02:44,616 --> 1:02:46,036
two, starting with

2210
01:02:46,526 --> 1:02:47,466
discoverability.

2211
01:02:48,026 --> 1:02:49,636
In the spirit of accessibility

2212
01:02:49,636 --> 1:02:51,116
being for everyone, we wanted to

2213
01:02:51,116 --> 1:02:52,426
make it easier to find.

2214
01:02:52,986 --> 1:02:55,156
And so to that end we've added

2215
01:02:55,206 --> 1:02:56,976
accessibility to iOS Quick

2216
01:02:56,976 --> 1:02:58,646
Start, making the out-of-box

2217
01:02:58,646 --> 1:03:00,886
experience even more accessible.

2218
01:02:58,646 --> 1:03:00,886
experience even more accessible.

2219
01:03:01,686 --> 1:03:04,566
Also we've moved accessibility

2220
01:03:04,566 --> 1:03:06,726
to the top level of settings.

2221
01:03:07,516 --> 1:03:12,606
[ Applause ]

2222
01:03:13,106 --> 1:03:14,576
And we've reorganized it to make

2223
01:03:14,576 --> 1:03:15,796
things easier to find.

2224
01:03:16,236 --> 1:03:17,216
We think it's going to go a long

2225
01:03:17,216 --> 1:03:18,576
way to help people discover and

2226
01:03:18,576 --> 1:03:19,756
use these great features.

2227
01:03:19,756 --> 1:03:23,216
Now let's talk about voice

2228
01:03:23,216 --> 1:03:23,916
control, right?

2229
01:03:24,026 --> 1:03:25,256
We saw this this morning during

2230
01:03:25,256 --> 1:03:25,836
the keynote.

2231
01:03:26,196 --> 1:03:27,606
Voice control is this full voice

2232
01:03:27,606 --> 1:03:29,556
experience from macOS, iOS and

2233
01:03:29,556 --> 1:03:31,476
iPadOS and we think it's going

2234
01:03:31,476 --> 1:03:33,596
to be really helpful for people

2235
01:03:33,596 --> 1:03:34,856
with physical challenges.

2236
01:03:35,656 --> 1:03:36,596
Voice control provides

2237
01:03:36,746 --> 1:03:38,406
comprehensive platform access.

2238
01:03:38,636 --> 1:03:40,556
You can speak to items by name.

2239
01:03:40,556 --> 1:03:41,866
You can refer to items by

2240
01:03:41,866 --> 1:03:42,266
number.

2241
01:03:42,426 --> 1:03:43,846
You can even speak to regions of

2242
01:03:43,846 --> 1:03:46,306
the screen using a grid.

2243
01:03:46,916 --> 1:03:48,216
Voice control has got great text

2244
01:03:48,216 --> 1:03:48,516
editing.

2245
01:03:48,516 --> 1:03:50,016
So of course I can dictate text

2246
01:03:50,276 --> 1:03:51,986
but I can also make selections

2247
01:03:51,986 --> 1:03:53,756
and corrections using only my

2248
01:03:53,756 --> 1:03:54,206
voice.

2249
01:03:54,926 --> 1:03:56,896
And it also has awareness.

2250
01:03:57,296 --> 1:03:59,036
So effectively even when I'm

2251
01:03:59,166 --> 1:04:00,756
dictating text, it hears

2252
01:03:59,166 --> 1:04:00,756
dictating text, it hears

2253
01:04:00,756 --> 1:04:02,196
commands and it doesn't make me

2254
01:04:02,196 --> 1:04:03,166
manage that distinction.

2255
01:04:03,166 --> 1:04:05,066
I can just talk to it.

2256
01:04:05,066 --> 1:04:06,646
And using the true depth camera,

2257
01:04:06,886 --> 1:04:08,926
if I look away, it knows that it

2258
01:04:08,926 --> 1:04:09,546
can ignore me.

2259
01:04:10,976 --> 1:04:12,516
Voice control's got great spoken

2260
01:04:12,516 --> 1:04:13,506
gestures so of course I can do

2261
01:04:13,506 --> 1:04:15,036
simple things like taps and

2262
01:04:15,036 --> 1:04:15,486
swipes.

2263
01:04:15,886 --> 1:04:17,906
But I can also pre-record more

2264
01:04:17,906 --> 1:04:19,216
complex gestures that I might

2265
01:04:19,216 --> 1:04:20,596
want to use in an app or a game,

2266
01:04:20,596 --> 1:04:21,846
like this rotate gesture.

2267
01:04:23,326 --> 1:04:25,196
And of course voice control

2268
01:04:25,196 --> 1:04:27,486
speech recognition runs fully on

2269
01:04:27,486 --> 1:04:28,106
device.

2270
01:04:28,716 --> 1:04:30,576
And so now I'd like to show you

2271
01:04:30,576 --> 1:04:31,596
voice control in action.

2272
01:04:32,516 --> 1:04:37,786
[ Applause ]

2273
01:04:38,286 --> 1:04:39,476
And for this demo I'm going to

2274
01:04:39,476 --> 1:04:41,996
be talking to my iPhone.

2275
01:04:47,566 --> 1:04:48,446
Open messages.

2276
01:04:49,016 --> 1:04:53,436
Hey Chris, let's grab dinner

2277
01:04:54,506 --> 1:04:55,406
tonight.

2278
01:04:56,256 --> 1:04:57,976
I'm thinking pizza.

2279
01:04:58,086 --> 1:04:59,306
Pizza emoji.

2280
01:05:00,466 --> 1:05:03,206
Change tonight to this weekend.

2281
01:05:04,956 --> 1:05:06,286
Tap send.

2282
01:05:09,516 --> 1:05:10,476
Undo that.

2283
01:05:11,576 --> 1:05:12,486
Tap send.

2284
01:05:15,016 --> 1:05:16,136
[ Laughter ]

2285
01:05:16,136 --> 1:05:17,156
Undo that.

2286
01:05:20,376 --> 1:05:21,436
Tap send.

2287
01:05:23,516 --> 1:05:25,576
[ Applause ]

2288
01:05:26,076 --> 1:05:26,516
Open Maps.

2289
01:05:30,166 --> 1:05:31,066
Tap search field.

2290
01:05:31,786 --> 1:05:35,366
San Pedro Square.

2291
01:05:36,826 --> 1:05:37,606
Show numbers.

2292
01:05:39,196 --> 1:05:43,666
Five. Show grid continuously.

2293
01:05:44,616 --> 1:05:49,516
15. Zoom at one.

2294
01:05:49,716 --> 1:05:50,886
Repeat four times.

2295
01:05:53,516 --> 1:06:02,546
[ Applause ]

2296
01:05:53,516 --> 1:06:02,546
[ Applause ]

2297
01:06:03,046 --> 1:06:05,916
Swipe up at 27.

2298
01:06:05,916 --> 1:06:06,696
Hide grid.

2299
01:06:08,116 --> 1:06:09,106
Tap share.

2300
01:06:09,626 --> 1:06:12,266
Tap Chris Adams.

2301
01:06:13,026 --> 1:06:17,446
Lots of options around here,

2302
01:06:17,926 --> 1:06:18,106
period.

2303
01:06:18,916 --> 1:06:20,816
See you later.

2304
01:06:21,476 --> 1:06:22,406
Peace emoji.

2305
01:06:24,286 --> 1:06:26,926
Ah, look at that.

2306
01:06:27,476 --> 1:06:28,776
Undo that.

2307
01:06:30,076 --> 1:06:30,976
Peace emoji.

2308
01:06:31,706 --> 1:06:32,846
Tap send.

2309
01:06:35,516 --> 1:06:39,546
[ Laughter ]

2310
01:06:40,046 --> 1:06:40,866
Undo that.

2311
01:06:43,016 --> 1:06:43,736
Tap send.

2312
01:06:46,516 --> 1:06:53,976
[ Applause ]

2313
01:06:54,476 --> 1:06:55,906
Go home. Go to sleep.

2314
01:06:56,936 --> 1:06:59,186
Okay. So that's voice control.

2315
01:07:00,296 --> 1:07:00,616
Now --

2316
01:07:02,516 --> 1:07:05,546
[ Applause ]

2317
01:07:06,046 --> 1:07:07,306
Now we can also use voice

2318
01:07:07,306 --> 1:07:09,246
control as developers to test

2319
01:07:09,246 --> 1:07:10,856
the accessibility of our apps.

2320
01:07:11,036 --> 1:07:12,246
And so let's do that now with

2321
01:07:12,246 --> 1:07:13,276
the travel app that you saw

2322
01:07:13,276 --> 1:07:13,676
earlier.

2323
01:07:14,406 --> 1:07:17,946
Wake up. Open Travel.

2324
01:07:21,456 --> 1:07:23,006
Tap San Francisco.

2325
01:07:23,746 --> 1:07:26,526
Tap San Francisco.

2326
01:07:26,636 --> 1:07:27,666
Show names.

2327
01:07:28,956 --> 1:07:33,246
All right, here's the problem.

2328
01:07:33,576 --> 1:07:35,166
So I'm trying to tap on San

2329
01:07:35,166 --> 1:07:37,286
Francisco, this element, but it

2330
01:07:37,286 --> 1:07:38,066
doesn't have a good

2331
01:07:38,066 --> 1:07:39,516
accessibility label yet and it's

2332
01:07:39,516 --> 1:07:40,646
a really common problem.

2333
01:07:40,646 --> 1:07:41,906
It means I can't speak to this

2334
01:07:41,906 --> 1:07:43,446
element with voice control, and

2335
01:07:43,446 --> 1:07:44,966
even worse, if I couldn't see

2336
01:07:44,966 --> 1:07:46,516
the screen and Voiceover were

2337
01:07:46,516 --> 1:07:48,086
reading this to me, I'd be

2338
01:07:48,086 --> 1:07:49,496
completely out of luck, stopped

2339
01:07:49,496 --> 1:07:50,056
in my tracks.

2340
01:07:50,056 --> 1:07:51,376
I would not be able to use this

2341
01:07:51,376 --> 1:07:51,696
app.

2342
01:07:52,046 --> 1:07:55,276
So fortunately these things are

2343
01:07:55,326 --> 1:07:56,266
pretty easy to fix.

2344
01:07:56,266 --> 1:07:57,786
And so let's talk about what you

2345
01:07:57,786 --> 1:07:59,426
can do to make your apps more

2346
01:07:59,426 --> 1:07:59,966
accessible.

2347
01:08:04,046 --> 1:08:05,596
The good news is, most

2348
01:08:05,596 --> 1:08:07,166
accessibility features just

2349
01:08:07,236 --> 1:08:07,546
work.

2350
01:08:08,046 --> 1:08:09,056
But some of them, indeed the

2351
01:08:09,056 --> 1:08:10,326
most transformative features

2352
01:08:10,326 --> 1:08:11,576
like Voice Control and Switch

2353
01:08:11,576 --> 1:08:14,046
Control and Voiceover, they need

2354
01:08:14,046 --> 1:08:14,676
your support.

2355
01:08:14,676 --> 1:08:16,345
And so here's what you can do.

2356
01:08:16,345 --> 1:08:18,515
First, do what we just did.

2357
01:08:18,515 --> 1:08:19,265
Just try it.

2358
01:08:19,395 --> 1:08:21,386
Use your apps with accessibility

2359
01:08:21,386 --> 1:08:21,916
features.

2360
01:08:22,216 --> 1:08:23,426
You might actually be surprised

2361
01:08:23,426 --> 1:08:24,336
at what already works.

2362
01:08:24,406 --> 1:08:25,876
But more importantly, you're

2363
01:08:25,876 --> 1:08:27,376
going to gain valuable insight

2364
01:08:27,376 --> 1:08:30,426
into how some users actually

2365
01:08:30,426 --> 1:08:31,406
experience your app.

2366
01:08:31,406 --> 1:08:32,716
And you're probably going to

2367
01:08:32,716 --> 1:08:33,856
want to make some changes.

2368
01:08:34,725 --> 1:08:37,145
Next, use the tools.

2369
01:08:37,145 --> 1:08:38,716
Xcode's got great built-in

2370
01:08:38,716 --> 1:08:39,786
accessibility support for

2371
01:08:39,786 --> 1:08:40,426
developers.

2372
01:08:40,426 --> 1:08:41,636
You can edit accessibility

2373
01:08:41,685 --> 1:08:43,055
properties right in the Xcode

2374
01:08:43,055 --> 1:08:43,845
inspector.

2375
01:08:44,036 --> 1:08:45,156
And with new Environment

2376
01:08:45,156 --> 1:08:47,036
Overrides, you can preview

2377
01:08:47,036 --> 1:08:48,345
visual accessibility

2378
01:08:48,345 --> 1:08:49,456
accommodations during your

2379
01:08:49,456 --> 1:08:51,475
development lifecycle right in

2380
01:08:51,475 --> 1:08:52,326
your app.

2381
01:08:52,716 --> 1:08:53,636
It's really cool.

2382
01:08:54,515 --> 1:08:56,606
Finally, implement the

2383
01:08:56,606 --> 1:08:57,786
Accessibility API.

2384
01:08:57,786 --> 1:08:59,986
It's the best way to ensure an

2385
01:08:59,986 --> 1:09:01,326
accessible experience.

2386
01:08:59,986 --> 1:09:01,326
accessible experience.

2387
01:09:01,326 --> 1:09:02,606
It's the essential way.

2388
01:09:02,966 --> 1:09:04,816
Doing this well is like putting

2389
01:09:04,816 --> 1:09:06,216
out a welcome mat to your app

2390
01:09:06,506 --> 1:09:08,386
for users of all abilities.

2391
01:09:08,526 --> 1:09:09,975
It's how Voiceover and Switch

2392
01:09:09,975 --> 1:09:11,316
Control and the rest talk to

2393
01:09:11,316 --> 1:09:12,716
your app to offer an adapted

2394
01:09:12,716 --> 1:09:13,456
experience.

2395
01:09:14,196 --> 1:09:15,586
The Accessibility APIs work on

2396
01:09:15,586 --> 1:09:17,265
all platform, and while they're

2397
01:09:17,265 --> 1:09:18,796
easy to implement, they're super

2398
01:09:18,796 --> 1:09:19,326
powerful.

2399
01:09:19,326 --> 1:09:20,776
So even the most sophisticated

2400
01:09:20,776 --> 1:09:22,845
apps and experiences can be made

2401
01:09:22,845 --> 1:09:23,765
fully accessible.

2402
01:09:24,406 --> 1:09:26,916
And of course, SwiftUI has great

2403
01:09:26,916 --> 1:09:28,696
accessibility support built

2404
01:09:28,756 --> 1:09:29,196
right in.

2405
01:09:29,986 --> 1:09:31,265
And so that's our accessibility

2406
01:09:31,265 --> 1:09:32,265
update today.

2407
01:09:32,616 --> 1:09:34,416
Now another thing we care deeply

2408
01:09:34,416 --> 1:09:35,895
about at Apple is privacy.

2409
01:09:35,996 --> 1:09:37,036
And so to tell you more about

2410
01:09:37,036 --> 1:09:38,206
that, I'd like to hand things

2411
01:09:38,206 --> 1:09:39,395
over to Katie.

2412
01:09:39,395 --> 1:09:39,975
Thanks very much.

2413
01:09:40,515 --> 1:09:47,046
[ Applause ]

2414
01:09:47,546 --> 1:09:48,456
&gt;&gt; Thanks, Eric.

2415
01:09:48,616 --> 1:09:50,386
Privacy is a topic that isn't

2416
01:09:50,386 --> 1:09:51,046
going away.

2417
01:09:51,046 --> 1:09:52,805
And it's something that everyone

2418
01:09:52,805 --> 1:09:53,935
needs to pay attention to.

2419
01:09:53,935 --> 1:09:56,316
It's something you have to

2420
01:09:56,316 --> 1:09:59,096
design in from the beginning and

2421
01:09:59,096 --> 1:10:00,656
it shapes how your product

2422
01:09:59,096 --> 1:10:00,656
it shapes how your product

2423
01:10:00,706 --> 1:10:01,076
works.

2424
01:10:02,086 --> 1:10:03,276
When you're designing a new

2425
01:10:03,276 --> 1:10:05,086
feature, here are a few steps

2426
01:10:05,086 --> 1:10:07,776
that you can take to design for

2427
01:10:07,846 --> 1:10:08,426
privacy.

2428
01:10:09,866 --> 1:10:11,366
Process on the user's device.

2429
01:10:12,096 --> 1:10:14,226
Wherever you can keep user data

2430
01:10:14,226 --> 1:10:16,136
on-device, do it.

2431
01:10:16,946 --> 1:10:19,016
And this helps you to collect as

2432
01:10:19,016 --> 1:10:20,586
little data as you can.

2433
01:10:21,196 --> 1:10:22,996
If you don't have the data, it

2434
01:10:23,446 --> 1:10:25,696
can't be abused or stolen.

2435
01:10:26,366 --> 1:10:27,206
Ask first.

2436
01:10:27,416 --> 1:10:32,356
Ask permission from your user

2437
01:10:32,536 --> 1:10:34,276
for the data and how you plan to

2438
01:10:34,386 --> 1:10:34,916
use it.

2439
01:10:35,276 --> 1:10:38,066
And if you do collect data, use

2440
01:10:38,116 --> 1:10:39,236
random identifiers.

2441
01:10:39,976 --> 1:10:41,466
And scope them down from an

2442
01:10:41,686 --> 1:10:43,976
account to a device, to a

2443
01:10:44,136 --> 1:10:45,506
session where possible.

2444
01:10:46,036 --> 1:10:49,136
And encrypt to keep your users'

2445
01:10:49,136 --> 1:10:50,126
data secure.

2446
01:10:51,506 --> 1:10:53,266
Applying these principles in

2447
01:10:53,266 --> 1:10:55,356
your design process will help

2448
01:10:55,356 --> 1:10:57,746
you build great features and

2449
01:10:57,916 --> 1:10:58,626
great privacy.

2450
01:10:58,626 --> 1:11:01,676
I want to talk about two areas

2451
01:10:58,626 --> 1:11:01,676
I want to talk about two areas

2452
01:11:01,676 --> 1:11:04,026
where we've made it easier for

2453
01:11:04,026 --> 1:11:06,276
you to take these steps.

2454
01:11:06,456 --> 1:11:08,316
First, location.

2455
01:11:10,786 --> 1:11:12,876
Where you go can reveal a lot

2456
01:11:12,876 --> 1:11:13,736
about your life.

2457
01:11:14,606 --> 1:11:16,536
Where you live, where you work,

2458
01:11:17,276 --> 1:11:18,576
what doctor's office you might

2459
01:11:18,576 --> 1:11:21,166
go to, or how often you're

2460
01:11:21,166 --> 1:11:23,476
hitting the gym versus maybe the

2461
01:11:23,476 --> 1:11:23,896
bar.

2462
01:11:25,656 --> 1:11:27,356
Because of this, some users are

2463
01:11:27,486 --> 1:11:29,686
hesitant to share location with

2464
01:11:29,686 --> 1:11:30,866
you and your apps.

2465
01:11:31,846 --> 1:11:33,366
So they might miss out on some

2466
01:11:33,366 --> 1:11:34,836
of your key features.

2467
01:11:35,826 --> 1:11:37,606
So this year, we're adding a new

2468
01:11:37,606 --> 1:11:40,156
option: Allow Once.

2469
01:11:41,876 --> 1:11:43,646
This provides location access

2470
01:11:43,646 --> 1:11:45,946
for just that session and will

2471
01:11:45,946 --> 1:11:49,516
ask the user again next time.

2472
01:11:49,736 --> 1:11:51,986
But let's say your app is even

2473
01:11:51,986 --> 1:11:53,546
better with Always Allow

2474
01:11:53,546 --> 1:11:54,526
Location permission.

2475
01:11:55,456 --> 1:11:57,136
Here's how this will now work.

2476
01:11:58,506 --> 1:11:59,866
First the user needs to select

2477
01:12:00,366 --> 1:12:00,996
While In Use.

2478
01:12:02,586 --> 1:12:05,246
Then you request location while

2479
01:12:05,246 --> 1:12:06,846
your app is in the background.

2480
01:12:07,996 --> 1:12:09,296
Then the user will be presented

2481
01:12:09,296 --> 1:12:11,766
with an alert, letting them know

2482
01:12:11,766 --> 1:12:13,646
that you're requesting location

2483
01:12:13,996 --> 1:12:16,506
in the background.

2484
01:12:16,506 --> 1:12:18,276
If they change to Always Allow,

2485
01:12:19,056 --> 1:12:20,446
you'll have background location

2486
01:12:20,776 --> 1:12:22,186
access moving forward.

2487
01:12:22,816 --> 1:12:26,196
Finally, we're giving users more

2488
01:12:26,196 --> 1:12:28,236
transparency into how their

2489
01:12:28,236 --> 1:12:29,576
location is being accessed.

2490
01:12:30,876 --> 1:12:32,486
For all apps with background

2491
01:12:32,486 --> 1:12:34,556
location permission, from time

2492
01:12:34,556 --> 1:12:36,356
to time we'll show them where

2493
01:12:36,356 --> 1:12:37,866
your app accessed their

2494
01:12:37,866 --> 1:12:38,606
location.

2495
01:12:39,516 --> 1:12:47,546
[ Applause ]

2496
01:12:48,046 --> 1:12:48,726
With these changes to

2497
01:12:48,726 --> 1:12:50,256
permissions, users will feel

2498
01:12:50,256 --> 1:12:52,456
more comfortable in how they're

2499
01:12:52,546 --> 1:12:54,566
sharing location with you.

2500
01:12:55,726 --> 1:12:57,766
Now, let's talk about login.

2501
01:13:00,276 --> 1:13:01,886
We've all seen or maybe

2502
01:13:01,886 --> 1:13:03,416
implemented buttons like these.

2503
01:13:03,416 --> 1:13:05,496
And they can be really

2504
01:13:05,496 --> 1:13:07,186
convenient, but they can come at

2505
01:13:07,186 --> 1:13:09,326
the cost of your user's privacy.

2506
01:13:10,586 --> 1:13:11,826
They also might share more

2507
01:13:11,826 --> 1:13:14,116
information about your company's

2508
01:13:14,186 --> 1:13:16,236
business than you really want to

2509
01:13:16,236 --> 1:13:17,116
be disclosing.

2510
01:13:18,416 --> 1:13:20,166
So we want to offer a better

2511
01:13:20,166 --> 1:13:20,586
option.

2512
01:13:20,586 --> 1:13:23,676
And it's called Sign In With

2513
01:13:23,836 --> 1:13:23,976
Apple.

2514
01:13:24,516 --> 1:13:31,026
[ Applause ]

2515
01:13:31,526 --> 1:13:33,606
It offers fast, easy sign-in

2516
01:13:33,816 --> 1:13:35,076
without all the tracking.

2517
01:13:35,996 --> 1:13:37,936
This isn't just about privacy

2518
01:13:37,936 --> 1:13:40,756
for our users, but also for your

2519
01:13:40,756 --> 1:13:41,306
company.

2520
01:13:42,456 --> 1:13:44,036
It's not our business to know

2521
01:13:44,036 --> 1:13:45,706
how users engage with your app,

2522
01:13:46,676 --> 1:13:48,446
so Apple simply won't track

2523
01:13:49,706 --> 1:13:49,806
that.

2524
01:13:50,516 --> 1:13:56,546
[ Applause ]

2525
01:13:57,046 --> 1:13:58,546
It's easy to add a Sign In With

2526
01:13:58,546 --> 1:14:00,026
Apple button to your app with a

2527
01:13:58,546 --> 1:14:00,026
Apple button to your app with a

2528
01:14:00,126 --> 1:14:00,776
simple API.

2529
01:14:01,916 --> 1:14:03,986
Users can set up an account and

2530
01:14:04,016 --> 1:14:05,676
sign into your app with a tap

2531
01:14:06,026 --> 1:14:08,806
and a quick Face ID.

2532
01:14:09,036 --> 1:14:11,786
So why is this great for all of

2533
01:14:13,026 --> 1:14:13,093
you?

2534
01:14:13,486 --> 1:14:15,836
First off, more trust and less

2535
01:14:15,966 --> 1:14:18,006
friction equals more engaged

2536
01:14:18,006 --> 1:14:18,616
users.

2537
01:14:19,776 --> 1:14:21,246
Sign In With Apple can shorten

2538
01:14:21,246 --> 1:14:24,366
the distance between a user

2539
01:14:24,606 --> 1:14:27,686
considering your application and

2540
01:14:27,686 --> 1:14:29,466
really embracing it.

2541
01:14:31,396 --> 1:14:33,736
Second, verify email addresses.

2542
01:14:34,836 --> 1:14:36,976
Apple has already done the work

2543
01:14:37,436 --> 1:14:39,546
of verifying email addresses for

2544
01:14:39,546 --> 1:14:40,176
you.

2545
01:14:41,516 --> 1:14:47,596
[ Applause ]

2546
01:14:48,096 --> 1:14:49,046
And we're removing the incentive

2547
01:14:49,046 --> 1:14:51,686
for users to share made-up email

2548
01:14:51,796 --> 1:14:54,096
addresses by offering a private

2549
01:14:54,196 --> 1:14:55,596
email relay service.

2550
01:14:55,676 --> 1:14:59,436
So even if a user chooses to

2551
01:14:59,606 --> 1:15:01,406
hide their email address when

2552
01:14:59,606 --> 1:15:01,406
hide their email address when

2553
01:15:01,406 --> 1:15:03,006
setting up an account, your

2554
01:15:03,006 --> 1:15:04,626
email will arrive in their

2555
01:15:04,626 --> 1:15:07,886
verified account, their verified

2556
01:15:07,886 --> 1:15:08,346
inbox.

2557
01:15:08,836 --> 1:15:12,036
And then there's security.

2558
01:15:12,036 --> 1:15:14,546
With Sign Into Apple, you don't

2559
01:15:14,546 --> 1:15:15,746
need to deal with storing

2560
01:15:15,746 --> 1:15:18,796
passwords or password reset

2561
01:15:18,796 --> 1:15:19,286
issues.

2562
01:15:19,636 --> 1:15:21,796
And every single account is

2563
01:15:21,796 --> 1:15:23,836
protected with two-factor

2564
01:15:23,886 --> 1:15:24,756
authentication.

2565
01:15:27,516 --> 1:15:31,546
[ Applause ]

2566
01:15:32,046 --> 1:15:33,346
This can really improve your

2567
01:15:33,346 --> 1:15:34,146
security.

2568
01:15:35,536 --> 1:15:36,886
We've also integrated some

2569
01:15:36,976 --> 1:15:39,096
interesting innovations around

2570
01:15:40,946 --> 1:15:42,006
anti-fraud.

2571
01:15:42,206 --> 1:15:44,096
We all know that along with some

2572
01:15:44,096 --> 1:15:46,286
real users, sometimes you get

2573
01:15:46,346 --> 1:15:48,296
some not so real users.

2574
01:15:49,676 --> 1:15:51,566
Nobody wants bots or farmed

2575
01:15:51,566 --> 1:15:52,016
accounts.

2576
01:15:52,716 --> 1:15:54,326
And we work hard to filter them

2577
01:15:54,396 --> 1:15:55,706
out of our systems.

2578
01:15:56,106 --> 1:15:58,636
And we want to help you do the

2579
01:15:58,716 --> 1:15:59,066
same.

2580
01:15:59,826 --> 1:16:03,136
So we built what we call a real

2581
01:15:59,826 --> 1:16:03,136
So we built what we call a real

2582
01:16:03,216 --> 1:16:04,166
user indicator.

2583
01:16:04,166 --> 1:16:06,516
It can tell you if an incoming

2584
01:16:06,516 --> 1:16:09,676
account is a real user or if you

2585
01:16:09,676 --> 1:16:11,116
might want to do some additional

2586
01:16:11,116 --> 1:16:12,006
verification.

2587
01:16:13,286 --> 1:16:15,276
So how does this work?

2588
01:16:16,396 --> 1:16:17,926
First off, the whole system is

2589
01:16:17,926 --> 1:16:19,686
built from the ground up to

2590
01:16:19,686 --> 1:16:21,396
maintain user privacy.

2591
01:16:21,396 --> 1:16:24,326
It uses on-device intelligence

2592
01:16:24,566 --> 1:16:26,786
to determine if the originating

2593
01:16:26,786 --> 1:16:28,966
device is behaving in a normal

2594
01:16:29,906 --> 1:16:29,973
way.

2595
01:16:30,686 --> 1:16:32,206
The device generates a value

2596
01:16:32,306 --> 1:16:33,626
without sharing any specifics

2597
01:16:33,626 --> 1:16:35,026
with Apple.

2598
01:16:36,126 --> 1:16:38,156
This is combined with select

2599
01:16:38,156 --> 1:16:39,656
account information and then

2600
01:16:39,656 --> 1:16:41,646
boiled down into a single value

2601
01:16:42,166 --> 1:16:46,586
that's shared with your app at

2602
01:16:46,876 --> 1:16:48,236
account setup time.

2603
01:16:48,236 --> 1:16:49,696
Then depending on the value that

2604
01:16:49,806 --> 1:16:50,866
you receive, you can be

2605
01:16:50,866 --> 1:16:52,596
confident that your new user is

2606
01:16:52,596 --> 1:16:55,166
a real user or get a signal that

2607
01:16:55,166 --> 1:16:56,706
you might want to take a second

2608
01:16:56,706 --> 1:16:56,826
look.

2609
01:17:00,296 --> 1:17:01,916
And all of this comes with great

2610
01:17:01,916 --> 1:17:03,226
cross-platform support.

2611
01:17:03,996 --> 1:17:05,796
It's available on iOS, iPadOS,

2612
01:17:05,966 --> 1:17:12,016
macOS, watchOS, tvOS and it even

2613
01:17:12,016 --> 1:17:12,956
works on the web.

2614
01:17:14,106 --> 1:17:16,196
So it can work on Android and

2615
01:17:16,196 --> 1:17:17,306
Windows devices.

2616
01:17:18,516 --> 1:17:26,926
[ Applause ]

2617
01:17:27,426 --> 1:17:27,976
So there you go.

2618
01:17:29,286 --> 1:17:31,276
A super-fast and easy way to

2619
01:17:31,276 --> 1:17:33,836
engage new users, two-factor

2620
01:17:33,986 --> 1:17:36,236
authentication and anti-fraud

2621
01:17:36,576 --> 1:17:37,406
built in.

2622
01:17:38,286 --> 1:17:39,686
You can implement it virtually

2623
01:17:39,846 --> 1:17:42,266
anywhere, and most importantly,

2624
01:17:42,936 --> 1:17:45,066
it respects everyone's privacy.

2625
01:17:46,286 --> 1:17:48,506
So this is a solution both you

2626
01:17:48,506 --> 1:17:50,706
and your users can trust.

2627
01:17:56,046 --> 1:17:57,076
We've already had a number of

2628
01:17:57,076 --> 1:17:59,016
developers working with us and

2629
01:17:59,016 --> 1:18:01,026
we're excited to see many more

2630
01:17:59,016 --> 1:18:01,026
we're excited to see many more

2631
01:18:01,076 --> 1:18:02,096
of you adopt.

2632
01:18:02,096 --> 1:18:06,346
So that's Sign In With Apple.

2633
01:18:07,516 --> 1:18:15,696
[ Applause ]

2634
01:18:16,196 --> 1:18:18,106
As I mentioned earlier, a great

2635
01:18:18,106 --> 1:18:20,046
way to preserve user privacy is

2636
01:18:20,046 --> 1:18:21,306
to work with the users' data

2637
01:18:21,756 --> 1:18:22,376
on-device.

2638
01:18:22,376 --> 1:18:24,886
And we've built some great

2639
01:18:24,886 --> 1:18:27,146
technologies for doing just

2640
01:18:28,216 --> 1:18:28,326
that.

2641
01:18:28,486 --> 1:18:30,136
To tell you more about machine

2642
01:18:30,136 --> 1:18:31,816
learning, I'd like to hand it

2643
01:18:31,816 --> 1:18:32,676
over to Bill.

2644
01:18:34,516 --> 1:18:36,546
[ Applause ]

2645
01:18:37,046 --> 1:18:37,516
&gt;&gt; Thank you, Katie.

2646
01:18:38,516 --> 1:18:40,906
[ Applause ]

2647
01:18:41,406 --> 1:18:42,696
Machine learning is a key

2648
01:18:42,696 --> 1:18:44,356
technology for so many of the

2649
01:18:44,356 --> 1:18:46,316
experiences in your apps.

2650
01:18:46,746 --> 1:18:48,846
And at Apple, we use on-device

2651
01:18:48,946 --> 1:18:50,086
machine learning to power

2652
01:18:50,086 --> 1:18:52,046
features from stunning camera

2653
01:18:52,236 --> 1:18:54,456
and photos capabilities to AR

2654
01:18:54,456 --> 1:18:55,526
Kit and more.

2655
01:18:55,526 --> 1:18:57,756
And we can do this because of

2656
01:18:57,756 --> 1:18:58,806
our cutting-edge silicon.

2657
01:19:00,106 --> 1:19:01,926
With powerful CPUs, GPUs and

2658
01:19:01,926 --> 1:19:04,746
dedicated ML processors like the

2659
01:19:04,746 --> 1:19:06,686
Neural Engine, we can deliver

2660
01:19:06,686 --> 1:19:08,256
incredible real-time

2661
01:19:08,256 --> 1:19:09,196
experiences.

2662
01:19:10,576 --> 1:19:12,276
The Neural Engine is optimized

2663
01:19:12,366 --> 1:19:13,856
to accelerate convolutional

2664
01:19:13,856 --> 1:19:14,846
neural networks with

2665
01:19:14,846 --> 1:19:16,766
multi-precision support and a

2666
01:19:16,916 --> 1:19:18,036
Smart Compute system.

2667
01:19:19,456 --> 1:19:20,576
What does that mean?

2668
01:19:21,106 --> 1:19:24,196
It means it's an absolute beast.

2669
01:19:24,876 --> 1:19:27,496
In fact, the Neural Engine is

2670
01:19:27,646 --> 1:19:29,646
capable of up to 5 trillion

2671
01:19:29,696 --> 1:19:31,536
operations per second.

2672
01:19:31,926 --> 1:19:33,346
Best of all, we've built our

2673
01:19:33,346 --> 1:19:35,106
machine learning APIs on top of

2674
01:19:35,106 --> 1:19:37,976
this so that your apps can take

2675
01:19:38,096 --> 1:19:40,146
full advantage of this blazing

2676
01:19:40,146 --> 1:19:40,786
performance.

2677
01:19:41,796 --> 1:19:43,286
And we have some great updates,

2678
01:19:43,466 --> 1:19:45,536
starting with our out-of-the-box

2679
01:19:45,536 --> 1:19:47,746
APIs like Vision, Natural

2680
01:19:47,746 --> 1:19:49,156
Language, and Speech.

2681
01:19:50,266 --> 1:19:51,886
Today these APIs deliver rich

2682
01:19:51,946 --> 1:19:53,766
features such as face detection,

2683
01:19:54,156 --> 1:19:56,066
object tracking and named entity

2684
01:19:56,066 --> 1:19:56,696
recognition.

2685
01:19:57,316 --> 1:19:59,466
And this year, we're adding even

2686
01:19:59,466 --> 1:19:59,846
more.

2687
01:20:00,586 --> 1:20:01,446
Let's have a look at a few of

2688
01:20:01,446 --> 1:20:03,436
these, starting with image

2689
01:20:03,436 --> 1:20:05,216
saliency which gives you a

2690
01:20:05,216 --> 1:20:06,546
heatmap for an image,

2691
01:20:06,876 --> 1:20:08,496
highlighting important objects

2692
01:20:08,496 --> 1:20:10,306
and where users are likely to

2693
01:20:10,366 --> 1:20:11,316
focus their attention.

2694
01:20:12,416 --> 1:20:14,126
We use this today in photos to

2695
01:20:14,126 --> 1:20:16,016
help intelligently crop images

2696
01:20:16,016 --> 1:20:17,176
as part of the curation

2697
01:20:17,176 --> 1:20:17,796
experience.

2698
01:20:18,486 --> 1:20:20,776
We're also releasing text

2699
01:20:20,776 --> 1:20:22,606
recognition where you can search

2700
01:20:22,606 --> 1:20:24,836
text from images like posters,

2701
01:20:25,136 --> 1:20:25,976
signs and documents.

2702
01:20:26,516 --> 1:20:33,546
[ Applause ]

2703
01:20:34,046 --> 1:20:35,456
And take advantage of the

2704
01:20:35,456 --> 1:20:37,106
document camera capability we

2705
01:20:37,106 --> 1:20:37,706
use in Notes.

2706
01:20:38,686 --> 1:20:40,466
For Natural Language, you can

2707
01:20:40,466 --> 1:20:42,156
make use of word embeddings

2708
01:20:42,516 --> 1:20:44,186
which help to identify words or

2709
01:20:44,296 --> 1:20:46,246
sentences with similar meanings.

2710
01:20:47,106 --> 1:20:49,106
We use this today for search in

2711
01:20:49,176 --> 1:20:50,646
photos so that if you search for

2712
01:20:50,646 --> 1:20:52,326
an unknown term like musician,

2713
01:20:52,736 --> 1:20:54,386
we can suggest alternatives like

2714
01:20:54,386 --> 1:20:55,876
entertainer or singer.

2715
01:20:57,386 --> 1:20:59,826
And this year, our Speech API is

2716
01:20:59,826 --> 1:21:02,246
now on-device and works on

2717
01:20:59,826 --> 1:21:02,246
now on-device and works on

2718
01:21:02,246 --> 1:21:04,916
iPhone, iPad and Mac with

2719
01:21:04,986 --> 1:21:06,686
support for 10 languages.

2720
01:21:07,516 --> 1:21:12,546
[ Applause ]

2721
01:21:13,046 --> 1:21:13,946
And with features like Speech

2722
01:21:13,986 --> 1:21:15,656
Saliency, you can understand the

2723
01:21:15,656 --> 1:21:18,076
pronunciation, pitch and the

2724
01:21:18,076 --> 1:21:19,346
cadence of speech.

2725
01:21:21,086 --> 1:21:22,206
Now for those of you who want to

2726
01:21:22,206 --> 1:21:23,716
go deeper with machine learning,

2727
01:21:24,266 --> 1:21:26,346
you can make use of Core ML, our

2728
01:21:26,346 --> 1:21:28,646
on-device technology designed to

2729
01:21:28,646 --> 1:21:30,316
run machine learning models with

2730
01:21:30,416 --> 1:21:32,746
high performance and privacy.

2731
01:21:34,266 --> 1:21:36,146
Today Core ML has great support

2732
01:21:36,146 --> 1:21:37,176
for many machine learning

2733
01:21:37,176 --> 1:21:39,176
models, from neural networks to

2734
01:21:39,176 --> 1:21:40,866
boosted trees and more.

2735
01:21:41,836 --> 1:21:42,726
But as you know, the field of

2736
01:21:42,726 --> 1:21:44,416
machine learning is constantly

2737
01:21:44,416 --> 1:21:45,116
evolving.

2738
01:21:45,466 --> 1:21:46,756
And so this year we set out to

2739
01:21:46,756 --> 1:21:48,586
support the most advanced neural

2740
01:21:48,586 --> 1:21:50,536
networks by adding more layer

2741
01:21:50,536 --> 1:21:52,136
types than ever before.

2742
01:21:52,976 --> 1:21:55,066
In fact, Core ML now supports

2743
01:21:55,066 --> 1:21:57,676
over 100 model layer types.

2744
01:21:59,006 --> 1:22:00,216
This enables you to run some of

2745
01:21:59,006 --> 1:22:00,216
This enables you to run some of

2746
01:22:00,216 --> 1:22:01,906
the most cutting-edge machine

2747
01:22:01,906 --> 1:22:03,336
learning models on Apple

2748
01:22:03,376 --> 1:22:03,906
devices.

2749
01:22:04,916 --> 1:22:07,526
Models like ELMO or WaveNet or

2750
01:22:07,526 --> 1:22:08,886
some very recently published

2751
01:22:08,886 --> 1:22:11,096
ones like BERT, bringing

2752
01:22:11,096 --> 1:22:12,496
breakthrough natural language

2753
01:22:12,536 --> 1:22:14,236
processing to your apps.

2754
01:22:16,226 --> 1:22:18,126
Now running models like these in

2755
01:22:18,126 --> 1:22:19,936
your apps is only part of the

2756
01:22:19,936 --> 1:22:20,246
story.

2757
01:22:21,166 --> 1:22:22,106
There are times when you may

2758
01:22:22,106 --> 1:22:23,656
want to update the models in

2759
01:22:23,656 --> 1:22:26,006
your apps on-device based on

2760
01:22:26,006 --> 1:22:26,776
user data.

2761
01:22:27,876 --> 1:22:29,056
We do this today for features

2762
01:22:29,056 --> 1:22:31,156
like Face ID where a user's

2763
01:22:31,156 --> 1:22:32,956
appearance may be evolving over

2764
01:22:33,016 --> 1:22:33,286
time.

2765
01:22:33,906 --> 1:22:35,396
They change their hair, wear a

2766
01:22:35,396 --> 1:22:35,606
hat.

2767
01:22:36,436 --> 1:22:37,996
Or for features like our Siri

2768
01:22:37,996 --> 1:22:40,096
Watch Face where the set of

2769
01:22:40,096 --> 1:22:41,706
recommendations is constantly

2770
01:22:41,706 --> 1:22:42,956
evolving to deliver a

2771
01:22:42,956 --> 1:22:44,646
personalized experience for each

2772
01:22:44,646 --> 1:22:45,006
user.

2773
01:22:45,006 --> 1:22:48,096
To achieve these experiences, we

2774
01:22:48,096 --> 1:22:49,726
use on-device personalization.

2775
01:22:50,426 --> 1:22:51,826
And this year we're bringing

2776
01:22:51,826 --> 1:22:53,766
that capability to Core ML.

2777
01:22:55,466 --> 1:22:56,666
This means you can update the

2778
01:22:56,666 --> 1:22:59,156
Core ML models in your app with

2779
01:22:59,156 --> 1:23:01,046
data from individual users.

2780
01:22:59,156 --> 1:23:01,046
data from individual users.

2781
01:23:02,106 --> 1:23:02,956
This creates --

2782
01:23:03,516 --> 1:23:07,716
[ Applause ]

2783
01:23:08,216 --> 1:23:09,736
This creates an updated and

2784
01:23:09,786 --> 1:23:11,796
personalized model for the user.

2785
01:23:12,786 --> 1:23:14,576
With model personalization, your

2786
01:23:14,576 --> 1:23:16,196
apps can now update models in

2787
01:23:16,196 --> 1:23:17,586
the background without

2788
01:23:17,686 --> 1:23:19,086
compromising user privacy.

2789
01:23:20,886 --> 1:23:22,206
Core ML delivers the most

2790
01:23:22,206 --> 1:23:23,976
advanced platform for machine

2791
01:23:23,976 --> 1:23:25,836
learning models, and building

2792
01:23:25,836 --> 1:23:27,386
Core ML models has never been

2793
01:23:27,386 --> 1:23:30,256
easier with Create ML, our

2794
01:23:30,256 --> 1:23:31,956
framework designed to help all

2795
01:23:31,956 --> 1:23:34,036
of you build models with just a

2796
01:23:34,096 --> 1:23:35,156
few lines of code.

2797
01:23:36,086 --> 1:23:36,976
And this year we're taking

2798
01:23:36,976 --> 1:23:38,506
Create ML even further.

2799
01:23:39,036 --> 1:23:41,026
It's now a macOS app that lets

2800
01:23:41,026 --> 1:23:42,416
you build models with zero code

2801
01:23:42,416 --> 1:23:42,926
right from your Mac.

2802
01:23:45,516 --> 1:23:50,586
[ Applause ]

2803
01:23:51,086 --> 1:23:51,956
You can choose from many

2804
01:23:51,956 --> 1:23:53,746
different model templates to fit

2805
01:23:53,746 --> 1:23:54,196
your data.

2806
01:23:54,456 --> 1:23:55,936
You can build multiple models

2807
01:23:55,936 --> 1:23:57,556
with different datasets and

2808
01:23:57,556 --> 1:23:59,086
define the parameters for each

2809
01:23:59,176 --> 1:24:00,236
of them.

2810
01:23:59,176 --> 1:24:00,236
of them.

2811
01:24:00,566 --> 1:24:02,306
You get real-time feedback on

2812
01:24:02,306 --> 1:24:03,126
model training.

2813
01:24:04,116 --> 1:24:06,046
And Create ML supports transfer

2814
01:24:06,046 --> 1:24:07,756
learning for tasks like image

2815
01:24:07,756 --> 1:24:09,846
classification or text analysis.

2816
01:24:10,496 --> 1:24:12,056
This speeds up training since

2817
01:24:12,056 --> 1:24:13,646
you need very little data and

2818
01:24:13,646 --> 1:24:15,506
can leverage Apple's optimized

2819
01:24:15,506 --> 1:24:17,296
and heavily pre-trained models.

2820
01:24:18,816 --> 1:24:20,946
And you get to experiment and

2821
01:24:20,986 --> 1:24:21,916
preview the models.

2822
01:24:22,476 --> 1:24:23,626
So for example, you can get

2823
01:24:23,626 --> 1:24:25,376
predictions for images by using

2824
01:24:25,376 --> 1:24:26,976
your iPhone's camera with

2825
01:24:27,056 --> 1:24:29,826
continuity on your Mac.

2826
01:24:30,116 --> 1:24:31,786
Or you can use the microphone on

2827
01:24:31,786 --> 1:24:33,126
your Mac to test your sound

2828
01:24:33,186 --> 1:24:34,216
classification model.

2829
01:24:35,646 --> 1:24:37,486
So that's a ton of new stuff and

2830
01:24:37,486 --> 1:24:39,166
we're super excited to see what

2831
01:24:39,166 --> 1:24:40,846
you can do with all these

2832
01:24:40,846 --> 1:24:42,016
awesome new machine learning

2833
01:24:42,076 --> 1:24:42,676
capabilities.

2834
01:24:43,546 --> 1:24:45,046
In fact, we invited a few

2835
01:24:45,046 --> 1:24:46,426
developers to try out all the

2836
01:24:46,426 --> 1:24:47,776
new stuff and we've seen some

2837
01:24:47,776 --> 1:24:49,426
amazing results.

2838
01:24:50,256 --> 1:24:53,686
One in particular was so cool we

2839
01:24:53,686 --> 1:24:54,816
decided we had to share it with

2840
01:24:54,816 --> 1:24:55,096
you.

2841
01:24:55,556 --> 1:24:57,386
So please welcome Ben Harroway

2842
01:24:57,616 --> 1:24:59,366
from Lumen Digital to give you a

2843
01:24:59,366 --> 1:25:00,916
preview of his new app

2844
01:24:59,366 --> 1:25:00,916
preview of his new app

2845
01:25:00,916 --> 1:25:01,706
NoisyBook.

2846
01:25:02,516 --> 1:25:06,686
[ Applause ]

2847
01:25:07,186 --> 1:25:07,746
&gt;&gt; Thanks, Bill.

2848
01:25:08,296 --> 1:25:10,026
Hi, everyone, I'm Ben from Lumen

2849
01:25:10,026 --> 1:25:11,586
Digital and I've been working on

2850
01:25:11,586 --> 1:25:14,286
a brand-new app, NoisyBook.

2851
01:25:18,156 --> 1:25:21,116
Let me tell you a story.

2852
01:25:21,306 --> 1:25:24,856
Once upon a time, on a beautiful

2853
01:25:24,856 --> 1:25:27,536
meadow lived a boy called Jack

2854
01:25:27,946 --> 1:25:31,576
and his cow Daisy.

2855
01:25:31,756 --> 1:25:32,446
Daisy.

2856
01:25:34,016 --> 1:25:35,046
[ Cow mooing ]

2857
01:25:35,046 --> 1:25:37,006
A mysterious man gave them some

2858
01:25:37,006 --> 1:25:39,116
magic beans which grew into a

2859
01:25:39,116 --> 1:25:41,436
giant beanstalk, high into the

2860
01:25:41,436 --> 1:25:41,796
clouds.

2861
01:25:44,016 --> 1:25:45,286
[ Mystical music ]

2862
01:25:45,286 --> 1:25:46,396
Okay, I think everybody knows

2863
01:25:46,396 --> 1:25:47,266
this story.

2864
01:25:47,266 --> 1:25:48,666
Let's try something really

2865
01:25:48,666 --> 1:25:49,116
different.

2866
01:25:50,306 --> 1:25:53,086
Suddenly an exploding chicken

2867
01:25:55,126 --> 1:25:56,946
and his friend the golden tiger

2868
01:25:56,946 --> 1:26:00,516
[growling] jumped into their

2869
01:25:56,946 --> 1:26:00,516
[growling] jumped into their

2870
01:26:00,516 --> 1:26:04,406
helicopter [whirring] and flew

2871
01:26:04,406 --> 1:26:06,976
into the forest.

2872
01:26:07,016 --> 1:26:08,046
[ Crickets and bird sounds ]

2873
01:26:08,046 --> 1:26:09,376
And of course, guess what?

2874
01:26:09,886 --> 1:26:11,446
They all lived happily ever

2875
01:26:12,666 --> 1:26:12,976
after.

2876
01:26:13,016 --> 1:26:14,126
[ Music ]

2877
01:26:14,126 --> 1:26:14,193
&gt;&gt; Yay.

2878
01:26:15,086 --> 1:26:16,516
&gt;&gt; Can you make animal noises

2879
01:26:16,516 --> 1:26:19,056
you heard in the story?

2880
01:26:19,146 --> 1:26:20,136
&gt;&gt; Okay, we've had some fun.

2881
01:26:20,326 --> 1:26:22,446
Now NoisyBook wants us to repeat

2882
01:26:22,446 --> 1:26:23,666
some of the animal noises that

2883
01:26:23,666 --> 1:26:25,336
we heard during the story.

2884
01:26:25,866 --> 1:26:27,416
I think we heard a cow in this

2885
01:26:27,466 --> 1:26:28,536
story, so let's try this.

2886
01:26:29,566 --> 1:26:32,336
Moo. There he is.

2887
01:26:32,726 --> 1:26:34,076
I really cannot believe I'm

2888
01:26:34,076 --> 1:26:35,876
standing here making animal

2889
01:26:35,876 --> 1:26:37,666
noises in front of all of these

2890
01:26:37,666 --> 1:26:38,306
people.

2891
01:26:39,126 --> 1:26:41,016
Mad. But how amazing, the app

2892
01:26:41,206 --> 1:26:43,056
has used a sound classification

2893
01:26:43,056 --> 1:26:45,336
model to actually recognize that

2894
01:26:45,336 --> 1:26:46,636
noise and acknowledge it.

2895
01:26:48,326 --> 1:26:49,656
You likely also noticed

2896
01:26:50,036 --> 1:26:51,526
NoisyBook was able to work with

2897
01:26:51,566 --> 1:26:53,556
both traditional stories and

2898
01:26:53,686 --> 1:26:55,486
stories straight from our own

2899
01:26:55,486 --> 1:26:56,396
imaginations.

2900
01:26:56,766 --> 1:26:57,716
It's super powerful.

2901
01:26:58,516 --> 1:27:00,026
And thanks to the new features

2902
01:26:58,516 --> 1:27:00,026
And thanks to the new features

2903
01:27:00,026 --> 1:27:02,906
of speech, sound and Core ML in

2904
01:27:02,906 --> 1:27:06,516
iOS 13 and Create ML, this is

2905
01:27:06,516 --> 1:27:08,166
all happening entirely

2906
01:27:08,196 --> 1:27:08,766
on-device.

2907
01:27:09,766 --> 1:27:11,086
It's all happening in real time

2908
01:27:11,416 --> 1:27:12,306
and it's running through a

2909
01:27:12,306 --> 1:27:13,706
natural language model that I've

2910
01:27:13,866 --> 1:27:16,036
trained on over 90,000 lines of

2911
01:27:16,036 --> 1:27:16,206
text.

2912
01:27:17,146 --> 1:27:19,886
And thanks to these features,

2913
01:27:20,506 --> 1:27:21,716
I've been able to take an idea

2914
01:27:21,716 --> 1:27:22,866
that I've struggled with for

2915
01:27:22,866 --> 1:27:24,666
around two years and really

2916
01:27:24,666 --> 1:27:26,146
implement some of these magical

2917
01:27:26,146 --> 1:27:27,596
new features in just a couple of

2918
01:27:27,656 --> 1:27:27,936
days.

2919
01:27:29,136 --> 1:27:30,696
I'm super proud of it and I do

2920
01:27:30,696 --> 1:27:31,896
hope that you'll remember to

2921
01:27:31,896 --> 1:27:33,256
check out NoisyBook when it

2922
01:27:33,256 --> 1:27:34,896
lands on the App Store later

2923
01:27:34,896 --> 1:27:35,706
this year.

2924
01:27:35,706 --> 1:27:35,976
Thank you.

2925
01:27:36,516 --> 1:27:43,686
[ Applause ]

2926
01:27:44,186 --> 1:27:44,636
&gt;&gt; Thanks, Ben.

2927
01:27:45,366 --> 1:27:46,596
That was really cool.

2928
01:27:46,596 --> 1:27:48,556
I know my kids are going to love

2929
01:27:49,426 --> 1:27:49,493
it.

2930
01:27:50,256 --> 1:27:52,266
Now one of the biggest uses of

2931
01:27:52,266 --> 1:27:54,216
machine learning at Apple is

2932
01:27:54,296 --> 1:27:54,826
Siri.

2933
01:27:55,556 --> 1:27:57,916
Siri is by far the world's most

2934
01:27:57,916 --> 1:27:59,586
popular intelligent assistant

2935
01:27:59,976 --> 1:28:02,176
with over 500 million monthly

2936
01:27:59,976 --> 1:28:02,176
with over 500 million monthly

2937
01:28:02,176 --> 1:28:05,156
active devices, making over 15

2938
01:28:05,156 --> 1:28:06,666
billion requests.

2939
01:28:07,286 --> 1:28:09,176
These are staggering numbers.

2940
01:28:09,766 --> 1:28:11,636
And Siri works across all of

2941
01:28:11,636 --> 1:28:12,686
Apple's devices.

2942
01:28:13,396 --> 1:28:15,226
With Siri, your users can

2943
01:28:15,226 --> 1:28:17,076
interact with your apps in new

2944
01:28:17,076 --> 1:28:17,596
ways.

2945
01:28:18,166 --> 1:28:19,566
On the go, with Air Pods,

2946
01:28:20,266 --> 1:28:22,296
hands-free from across the room,

2947
01:28:22,626 --> 1:28:24,396
or even while in the car.

2948
01:28:25,046 --> 1:28:27,066
And thousands of apps are now

2949
01:28:27,116 --> 1:28:29,146
integrated with Siri through

2950
01:28:29,486 --> 1:28:30,416
Siri Shortcuts.

2951
01:28:31,466 --> 1:28:33,196
We built Siri Shortcuts to allow

2952
01:28:33,356 --> 1:28:35,136
you to expose the capabilities

2953
01:28:35,136 --> 1:28:37,196
you already have in your apps

2954
01:28:37,666 --> 1:28:39,746
with very little work and in a

2955
01:28:39,746 --> 1:28:41,936
discoverable way for your users.

2956
01:28:43,026 --> 1:28:44,186
You can make your shortcuts

2957
01:28:44,226 --> 1:28:46,016
discoverable using the Add to

2958
01:28:46,106 --> 1:28:48,016
Siri button, educating your

2959
01:28:48,016 --> 1:28:49,726
users on how they can use your

2960
01:28:49,966 --> 1:28:50,676
app with voice.

2961
01:28:51,766 --> 1:28:52,936
That matters because voice

2962
01:28:52,936 --> 1:28:54,436
functionality can otherwise be

2963
01:28:54,436 --> 1:28:55,926
really hard to discover.

2964
01:28:56,906 --> 1:28:58,396
And we've simplified setup so

2965
01:28:58,396 --> 1:29:00,216
that the user no longer needs to

2966
01:28:58,396 --> 1:29:00,216
that the user no longer needs to

2967
01:29:00,216 --> 1:29:01,326
record a phrase.

2968
01:29:01,326 --> 1:29:03,726
You suggest a phrase and they

2969
01:29:03,726 --> 1:29:05,036
add it with a tap.

2970
01:29:06,516 --> 1:29:11,556
[ Applause ]

2971
01:29:12,056 --> 1:29:12,906
And the biggest request we had

2972
01:29:12,906 --> 1:29:14,236
this year was to support

2973
01:29:14,236 --> 1:29:16,016
parameters in Shortcuts.

2974
01:29:16,586 --> 1:29:20,566
So we've made Shortcuts

2975
01:29:20,916 --> 1:29:22,906
conversational which allows

2976
01:29:22,966 --> 1:29:24,596
users to interact with your app

2977
01:29:24,966 --> 1:29:26,766
through questions in Siri.

2978
01:29:27,606 --> 1:29:28,816
So for example, if I'm choosing

2979
01:29:28,816 --> 1:29:29,986
what to cook, I could run a

2980
01:29:29,986 --> 1:29:31,936
Shortcut with Pana, my recipes

2981
01:29:31,936 --> 1:29:33,736
app, and see a list of all my

2982
01:29:33,736 --> 1:29:34,296
favorites.

2983
01:29:34,946 --> 1:29:36,476
When I choose from the list, it

2984
01:29:36,476 --> 1:29:37,966
takes me to the recipe and

2985
01:29:37,966 --> 1:29:38,746
starts playing.

2986
01:29:39,386 --> 1:29:42,306
And this year the Shortcuts app

2987
01:29:42,306 --> 1:29:45,376
is built into iOS and iPadOS,

2988
01:29:46,326 --> 1:29:47,896
which means that every user will

2989
01:29:47,896 --> 1:29:49,286
have an opportunity to try it

2990
01:29:49,286 --> 1:29:49,466
out.

2991
01:29:49,466 --> 1:29:52,566
And the app is now the home for

2992
01:29:52,566 --> 1:29:54,446
shortcuts from your apps too.

2993
01:29:55,816 --> 1:29:57,906
And by popular request, we're

2994
01:29:57,906 --> 1:29:59,976
adding support for automation.

2995
01:30:00,516 --> 1:30:05,976
[ Applause ]

2996
01:30:06,476 --> 1:30:08,146
Which allows users to set

2997
01:30:08,146 --> 1:30:09,906
specific triggers for when to

2998
01:30:09,906 --> 1:30:11,286
run any shortcut.

2999
01:30:12,106 --> 1:30:13,726
And there's plenty of options to

3000
01:30:13,726 --> 1:30:14,536
choose from.

3001
01:30:14,806 --> 1:30:16,016
You can trigger a shortcut based

3002
01:30:16,016 --> 1:30:18,056
on time of day, when you start a

3003
01:30:18,056 --> 1:30:19,646
workout on your Apple Watch,

3004
01:30:19,956 --> 1:30:21,456
when you connect to CarPlay and

3005
01:30:21,516 --> 1:30:22,346
many more.

3006
01:30:24,006 --> 1:30:26,086
And the editor now enables full

3007
01:30:26,086 --> 1:30:27,586
configuration of your app's

3008
01:30:27,616 --> 1:30:29,416
actions, including the ability

3009
01:30:29,416 --> 1:30:32,026
to pass information in or out of

3010
01:30:32,026 --> 1:30:33,936
your action through parameters.

3011
01:30:34,866 --> 1:30:36,436
With this, your app's actions

3012
01:30:36,486 --> 1:30:38,016
can be combined with actions

3013
01:30:38,016 --> 1:30:39,956
from other apps in multi-step

3014
01:30:39,956 --> 1:30:40,606
shortcuts.

3015
01:30:42,726 --> 1:30:43,836
Let's say you need to get dinner

3016
01:30:43,836 --> 1:30:44,626
for the family.

3017
01:30:44,946 --> 1:30:46,726
The kids are hungry, you need it

3018
01:30:46,726 --> 1:30:47,366
fast.

3019
01:30:47,986 --> 1:30:48,996
You could have a shortcut that

3020
01:30:48,996 --> 1:30:50,666
uses the Caviar app that lets

3021
01:30:50,666 --> 1:30:52,586
you choose a restaurant, choose

3022
01:30:53,516 --> 1:30:59,766
a meal, place the order and then

3023
01:30:59,766 --> 1:31:02,046
text the whole family with

3024
01:30:59,766 --> 1:31:02,046
text the whole family with

3025
01:31:02,046 --> 1:31:03,556
what's for dinner and when it

3026
01:31:03,556 --> 1:31:04,246
will arrive.

3027
01:31:05,246 --> 1:31:06,786
That's combining the power of

3028
01:31:06,786 --> 1:31:09,106
your apps with Siri Shortcuts to

3029
01:31:09,106 --> 1:31:11,736
make everyday tasks really easy.

3030
01:31:13,466 --> 1:31:13,976
And of course --

3031
01:31:14,516 --> 1:31:18,636
[ Applause ]

3032
01:31:19,136 --> 1:31:20,416
And of course Shortcuts work

3033
01:31:20,416 --> 1:31:23,416
across iPhone, iPad, Apple Watch

3034
01:31:23,736 --> 1:31:25,096
and HomePod too.

3035
01:31:25,616 --> 1:31:27,716
And that's our update for Siri.

3036
01:31:28,516 --> 1:31:34,546
[ Applause ]

3037
01:31:35,046 --> 1:31:35,746
Now I'd like to invite Jeff to

3038
01:31:35,746 --> 1:31:36,566
tell you about the latest

3039
01:31:36,566 --> 1:31:38,416
advances in augmented reality.

3040
01:31:38,946 --> 1:31:39,316
Thank you.

3041
01:31:40,516 --> 1:31:42,606
[ Applause ]

3042
01:31:43,106 --> 1:31:43,546
&gt;&gt; Thanks, Bill.

3043
01:31:43,546 --> 1:31:44,886
I am thrilled to be here today

3044
01:31:44,886 --> 1:31:46,246
to talk about augmented reality.

3045
01:31:47,276 --> 1:31:49,136
AR helps you visualize things

3046
01:31:49,136 --> 1:31:51,496
that are difficult, expensive or

3047
01:31:51,496 --> 1:31:53,056
impossible to do otherwise.

3048
01:31:53,686 --> 1:31:55,516
And since introducing AR Kit,

3049
01:31:55,836 --> 1:31:57,846
we've seen amazing growth in

3050
01:31:58,026 --> 1:31:58,746
applications.

3051
01:31:59,296 --> 1:32:02,296
One may think of AR as only for

3052
01:31:59,296 --> 1:32:02,296
One may think of AR as only for

3053
01:32:02,336 --> 1:32:04,736
entertainment, but we've seen

3054
01:32:04,736 --> 1:32:06,576
great applications in education,

3055
01:32:06,986 --> 1:32:09,636
enterprise, commerce and more.

3056
01:32:11,106 --> 1:32:13,026
Commerce is a particularly

3057
01:32:13,426 --> 1:32:15,546
impressive use case with Home

3058
01:32:15,546 --> 1:32:17,126
Depot, Target and Wayfair all

3059
01:32:17,126 --> 1:32:19,856
having tens of thousands of

3060
01:32:19,856 --> 1:32:21,476
products available to preview in

3061
01:32:21,476 --> 1:32:21,756
AR.

3062
01:32:21,756 --> 1:32:26,206
AR Kit hosts the USDZ file

3063
01:32:26,306 --> 1:32:28,926
format and Quick Look together,

3064
01:32:29,846 --> 1:32:31,596
make the world's first mass

3065
01:32:31,846 --> 1:32:33,436
market augmented reality

3066
01:32:33,536 --> 1:32:34,476
commerce solution.

3067
01:32:34,766 --> 1:32:37,156
In fact, Wayfair is seeing more

3068
01:32:37,156 --> 1:32:39,226
than a threefold increase in

3069
01:32:39,276 --> 1:32:41,476
purchasing when folks view their

3070
01:32:41,476 --> 1:32:43,486
products in augmented reality.

3071
01:32:45,316 --> 1:32:46,806
And we love that this is a real

3072
01:32:46,806 --> 1:32:47,566
business use case.

3073
01:32:47,566 --> 1:32:48,716
This is a great real business

3074
01:32:48,716 --> 1:32:50,536
use case for augmented reality

3075
01:32:50,536 --> 1:32:51,046
in commerce.

3076
01:32:52,476 --> 1:32:53,386
We'd like to continue this

3077
01:32:53,386 --> 1:32:55,006
momentum by announcing that

3078
01:32:55,166 --> 1:32:56,316
Apple Pay will be integrated

3079
01:32:56,316 --> 1:32:58,806
directly with AR Quick Look this

3080
01:32:58,836 --> 1:32:59,356
fall.

3081
01:32:59,606 --> 1:33:00,866
This makes it easier for

3082
01:32:59,606 --> 1:33:00,866
This makes it easier for

3083
01:33:00,946 --> 1:33:03,636
consumers to try on and buy

3084
01:33:04,276 --> 1:33:05,486
items like these glasses,

3085
01:33:05,976 --> 1:33:07,406
directly from augmented reality.

3086
01:33:07,506 --> 1:33:12,366
AR Kit for iOS and iPadOS are

3087
01:33:12,916 --> 1:33:16,896
the world's largest augmented

3088
01:33:16,896 --> 1:33:18,746
reality platform with hundreds

3089
01:33:18,746 --> 1:33:20,986
of millions of enabled devices.

3090
01:33:21,046 --> 1:33:22,946
And we've heard from many

3091
01:33:22,946 --> 1:33:24,016
developers, they love to take

3092
01:33:24,016 --> 1:33:25,196
advantage of this great

3093
01:33:25,196 --> 1:33:27,236
opportunity but may not be sure

3094
01:33:27,236 --> 1:33:27,746
where to start.

3095
01:33:28,376 --> 1:33:29,806
Or 3D can be a little bit

3096
01:33:29,806 --> 1:33:31,096
intimidating if you've never

3097
01:33:31,156 --> 1:33:31,676
used it before.

3098
01:33:31,676 --> 1:33:33,646
Well, we've been listening and

3099
01:33:33,816 --> 1:33:35,576
we're really excited to announce

3100
01:33:36,346 --> 1:33:38,376
three technologies that make it

3101
01:33:38,376 --> 1:33:40,726
much easier to develop augmented

3102
01:33:40,726 --> 1:33:41,806
reality applications.

3103
01:33:42,846 --> 1:33:45,916
AR Kit, RealityKit and Reality

3104
01:33:45,916 --> 1:33:47,816
Composer together provide the

3105
01:33:48,026 --> 1:33:50,336
frameworks and tools you need to

3106
01:33:50,336 --> 1:33:51,646
quickly and easily develop

3107
01:33:51,946 --> 1:33:53,786
augmented reality applications

3108
01:33:55,206 --> 1:33:57,136
and experiences.

3109
01:33:57,136 --> 1:33:58,526
Starting with Reality Composer,

3110
01:33:59,036 --> 1:34:00,656
you can create compelling AR

3111
01:33:59,036 --> 1:34:00,656
you can create compelling AR

3112
01:34:00,656 --> 1:34:02,456
experiences even if you've never

3113
01:34:02,456 --> 1:34:03,706
worked with 3D before.

3114
01:34:03,966 --> 1:34:05,766
It provides an intuitive, what

3115
01:34:05,766 --> 1:34:06,626
you see is what you get

3116
01:34:06,626 --> 1:34:08,856
interface that integrates

3117
01:34:09,226 --> 1:34:11,166
seamlessly with Xcode.

3118
01:34:12,336 --> 1:34:13,326
And to show you Reality

3119
01:34:13,326 --> 1:34:14,796
Composer, I'd like to invite one

3120
01:34:14,796 --> 1:34:16,276
of my colleagues, Shrudi, up to

3121
01:34:16,276 --> 1:34:16,736
the stage.

3122
01:34:17,516 --> 1:34:22,636
[ Applause ]

3123
01:34:23,136 --> 1:34:23,956
&gt;&gt; Thank you, Jeff.

3124
01:34:24,426 --> 1:34:25,206
Happy to be here.

3125
01:34:25,206 --> 1:34:27,656
I have this great travel app

3126
01:34:27,656 --> 1:34:29,376
which shows some activities

3127
01:34:29,636 --> 1:34:30,826
offered on the main island of

3128
01:34:30,826 --> 1:34:31,326
Hawaii.

3129
01:34:31,976 --> 1:34:33,696
If the user opts for helicopter

3130
01:34:33,696 --> 1:34:36,356
tours, the app shows the path of

3131
01:34:36,356 --> 1:34:37,136
the helicopter.

3132
01:34:37,136 --> 1:34:40,226
How about we use AR to provide

3133
01:34:40,226 --> 1:34:41,736
users a better sense of the

3134
01:34:41,736 --> 1:34:42,746
actual tour?

3135
01:34:42,746 --> 1:34:44,846
I can do that by adding a button

3136
01:34:44,846 --> 1:34:46,626
to the existing app to launch my

3137
01:34:46,696 --> 1:34:47,396
AR experience.

3138
01:34:47,946 --> 1:34:48,976
Let's see how to do that.

3139
01:34:49,776 --> 1:34:52,146
First, we create a button using

3140
01:34:52,146 --> 1:34:52,566
SwiftUI.

3141
01:34:53,626 --> 1:34:55,616
Followed by adding that button

3142
01:34:55,876 --> 1:34:57,016
to my existing view.

3143
01:34:58,006 --> 1:34:59,356
Then I open an empty project

3144
01:34:59,416 --> 1:35:01,286
file in Reality Composer and

3145
01:34:59,416 --> 1:35:01,286
file in Reality Composer and

3146
01:35:01,286 --> 1:35:02,946
integrate it to my Xcode project

3147
01:35:03,296 --> 1:35:05,296
by simply dragging and dropping

3148
01:35:05,296 --> 1:35:06,216
it in Xcode.

3149
01:35:06,856 --> 1:35:09,946
To load my AR scene from this

3150
01:35:09,946 --> 1:35:11,886
Reality Composer project file, I

3151
01:35:12,106 --> 1:35:14,796
import RealityKit and then

3152
01:35:14,796 --> 1:35:17,526
create a new view for AR.

3153
01:35:18,016 --> 1:35:18,886
Oops. Sorry.

3154
01:35:19,116 --> 1:35:21,746
Create a new view for AR using

3155
01:35:21,746 --> 1:35:22,186
SwiftUI.

3156
01:35:22,356 --> 1:35:25,736
And that's all the code you need

3157
01:35:26,206 --> 1:35:30,746
to add an AR experience to your

3158
01:35:31,136 --> 1:35:31,706
existing app.

3159
01:35:31,706 --> 1:35:33,166
Moving on to the fun part of

3160
01:35:33,166 --> 1:35:34,576
creating my AR scene with

3161
01:35:34,576 --> 1:35:35,496
Reality Composer.

3162
01:35:36,106 --> 1:35:37,926
I open my empty Reality project

3163
01:35:38,986 --> 1:35:40,836
and start by loading a custom

3164
01:35:40,836 --> 1:35:42,536
USTZ of the Hawaii model.

3165
01:35:47,046 --> 1:35:49,676
Sweet. Next I'd like to mark the

3166
01:35:49,676 --> 1:35:51,256
beginning of my helicopter tour.

3167
01:35:51,506 --> 1:35:53,366
For that I can use Reality

3168
01:35:53,366 --> 1:35:54,956
Composer's built-in content

3169
01:35:54,956 --> 1:35:57,536
library which offers hundreds of

3170
01:35:57,536 --> 1:35:58,996
professional-grade 3D content to

3171
01:35:58,996 --> 1:35:59,476
developers.

3172
01:35:59,476 --> 1:36:02,976
I'll use a simple sphere.

3173
01:35:59,476 --> 1:36:02,976
I'll use a simple sphere.

3174
01:36:08,046 --> 1:36:09,356
I can change the content's look,

3175
01:36:09,776 --> 1:36:11,276
by applying a different material

3176
01:36:11,276 --> 1:36:12,206
to it.

3177
01:36:14,086 --> 1:36:16,736
As you can see, placing content

3178
01:36:16,736 --> 1:36:18,306
in 3D is pretty simple and

3179
01:36:18,306 --> 1:36:20,246
intuitive with Reality Composer.

3180
01:36:21,616 --> 1:36:24,106
Let's see what else we can do

3181
01:36:24,106 --> 1:36:24,196
here.

3182
01:36:24,196 --> 1:36:25,646
How about adding a cool fading

3183
01:36:25,646 --> 1:36:26,746
effect to the scene when the

3184
01:36:26,926 --> 1:36:27,446
scene starts.

3185
01:36:27,526 --> 1:36:29,886
I can do that by opening the

3186
01:36:29,886 --> 1:36:31,986
Behaviors panel and creating a

3187
01:36:31,986 --> 1:36:34,336
custom behavior which gets

3188
01:36:34,336 --> 1:36:35,956
triggered when the scene starts.

3189
01:36:35,956 --> 1:36:39,806
I first add an action to hide

3190
01:36:39,806 --> 1:36:41,216
all the content in the scene.

3191
01:36:41,706 --> 1:36:45,666
Then the scene starts, and then

3192
01:36:45,666 --> 1:36:47,316
add another action to make all

3193
01:36:47,316 --> 1:36:49,286
the content appear after a

3194
01:36:49,286 --> 1:36:50,096
certain duration.

3195
01:36:50,096 --> 1:36:52,286
How about we preview it right

3196
01:36:52,286 --> 1:36:52,916
here?

3197
01:36:53,286 --> 1:36:58,086
Awesome. Developing AR on Mac is

3198
01:36:58,086 --> 1:37:01,116
convenient, but it poses the

3199
01:36:58,086 --> 1:37:01,116
convenient, but it poses the

3200
01:37:01,166 --> 1:37:02,626
challenge of guessing the

3201
01:37:02,626 --> 1:37:05,086
content scale and look when

3202
01:37:05,086 --> 1:37:06,176
placed in real world.

3203
01:37:06,726 --> 1:37:08,016
That's why we created Reality

3204
01:37:08,016 --> 1:37:11,956
Composer for macOS as well as

3205
01:37:11,956 --> 1:37:13,266
iPadOS and iOS to remove the

3206
01:37:13,266 --> 1:37:14,186
guesswork out of development.

3207
01:37:14,186 --> 1:37:17,226
So I'll hand this off to Jeff to

3208
01:37:17,226 --> 1:37:18,976
see what we have so far on an

3209
01:37:18,976 --> 1:37:19,176
iPad.

3210
01:37:20,866 --> 1:37:21,896
&gt;&gt; Thanks very much, Shrudi.

3211
01:37:22,426 --> 1:37:25,006
So this is Reality Composer for

3212
01:37:25,006 --> 1:37:25,386
the iPad.

3213
01:37:27,146 --> 1:37:29,236
It has the same great features

3214
01:37:29,236 --> 1:37:30,456
that you see in the Reality

3215
01:37:30,506 --> 1:37:31,256
Composer for the Mac.

3216
01:37:31,426 --> 1:37:32,376
And we can take the seen that

3217
01:37:32,376 --> 1:37:33,936
Shrudi handed off and finish it

3218
01:37:33,936 --> 1:37:34,996
out with our final artwork.

3219
01:37:35,466 --> 1:37:37,066
So we've had someone create with

3220
01:37:37,066 --> 1:37:39,736
Adobe Arrow our final file or

3221
01:37:39,736 --> 1:37:41,116
our final artwork, and we'll put

3222
01:37:41,116 --> 1:37:41,986
it into the scene.

3223
01:37:41,986 --> 1:37:43,206
So I'm going to take the proxy

3224
01:37:43,206 --> 1:37:43,996
art that Shrudi had.

3225
01:37:43,996 --> 1:37:46,176
I'm going to replace that with

3226
01:37:46,176 --> 1:37:46,846
our new artwork.

3227
01:37:46,846 --> 1:37:48,036
Let me check to see if that's

3228
01:37:48,036 --> 1:37:48,666
the right thing.

3229
01:37:48,736 --> 1:37:49,316
Fantastic.

3230
01:37:49,366 --> 1:37:51,346
That is our final helicopter.

3231
01:37:51,566 --> 1:37:52,906
And I also want to bring in the

3232
01:37:52,936 --> 1:37:54,396
animation that goes with that.

3233
01:37:54,466 --> 1:37:55,256
That's super easy.

3234
01:37:55,256 --> 1:37:56,266
If you remember, she created

3235
01:37:56,266 --> 1:37:57,826
that behavior, so we're going to

3236
01:37:57,826 --> 1:37:58,796
look at that behavior and all

3237
01:37:58,796 --> 1:37:59,646
we're going to do is add an

3238
01:37:59,646 --> 1:38:01,406
additional action.

3239
01:37:59,646 --> 1:38:01,406
additional action.

3240
01:38:03,136 --> 1:38:05,396
So we look for USDZ animation

3241
01:38:05,396 --> 1:38:06,186
which is bringing in the

3242
01:38:06,186 --> 1:38:07,046
animation that went with the

3243
01:38:07,096 --> 1:38:07,466
file.

3244
01:38:08,876 --> 1:38:09,646
Fantastic.

3245
01:38:09,796 --> 1:38:10,286
Looks good.

3246
01:38:10,286 --> 1:38:12,226
Let's preview that.

3247
01:38:12,956 --> 1:38:15,496
Great. So hide our Behaviors

3248
01:38:15,496 --> 1:38:15,966
tab.

3249
01:38:16,086 --> 1:38:17,346
That looks like what we want.

3250
01:38:19,216 --> 1:38:20,786
Perfect. Let's preview this in

3251
01:38:20,786 --> 1:38:22,326
AR, but you can do it with the

3252
01:38:22,496 --> 1:38:22,816
iPad.

3253
01:38:25,166 --> 1:38:27,356
Wow. Let's try that again.

3254
01:38:34,046 --> 1:38:34,396
Fantastic.

3255
01:38:34,396 --> 1:38:35,536
That's exactly what I wanted it

3256
01:38:35,536 --> 1:38:36,026
to look like.

3257
01:38:36,026 --> 1:38:37,276
And we can also play that.

3258
01:38:39,766 --> 1:38:40,916
Perfect. We have the animation

3259
01:38:40,916 --> 1:38:42,176
of the helicopter touring the

3260
01:38:42,176 --> 1:38:42,376
island.

3261
01:38:42,636 --> 1:38:43,636
That will look great in our

3262
01:38:43,706 --> 1:38:44,656
travel application.

3263
01:38:49,456 --> 1:38:50,526
So that's Reality Composer for

3264
01:38:50,526 --> 1:38:50,836
the iPad.

3265
01:38:51,926 --> 1:38:53,606
And you're going to love how you

3266
01:38:53,606 --> 1:38:55,736
can have the same great ease of

3267
01:38:55,736 --> 1:38:57,466
use and seamless experience

3268
01:38:57,606 --> 1:38:59,476
between macOS, iPadOS and iOS

3269
01:38:59,616 --> 1:39:00,766
with Reality Composer.

3270
01:38:59,616 --> 1:39:00,766
with Reality Composer.

3271
01:39:01,516 --> 1:39:08,576
[ Applause ]

3272
01:39:09,076 --> 1:39:09,836
Now RealityKit.

3273
01:39:10,066 --> 1:39:11,146
RealityKit is a modern

3274
01:39:11,296 --> 1:39:12,856
high-performance 3D engine

3275
01:39:12,856 --> 1:39:15,076
designed from the ground up for

3276
01:39:15,076 --> 1:39:16,606
augmented reality rendering and

3277
01:39:16,606 --> 1:39:17,176
simulation.

3278
01:39:18,056 --> 1:39:19,236
And because it's delivered as a

3279
01:39:19,376 --> 1:39:20,916
framework, it's very easy for

3280
01:39:20,916 --> 1:39:22,606
all of you to take your 2D apps

3281
01:39:22,606 --> 1:39:24,536
and extend them into 3D.

3282
01:39:25,546 --> 1:39:26,876
RealityKit uses modern

3283
01:39:26,966 --> 1:39:28,296
visibly-based rendering and

3284
01:39:28,296 --> 1:39:28,736
materials.

3285
01:39:29,536 --> 1:39:30,816
It is a data-driven rendering

3286
01:39:30,876 --> 1:39:31,996
system and a fully

3287
01:39:31,996 --> 1:39:35,456
multi-threaded renderer that's

3288
01:39:35,456 --> 1:39:37,116
highly optimized for Apple's

3289
01:39:37,116 --> 1:39:37,666
GPUs.

3290
01:39:39,466 --> 1:39:41,426
And also, really importantly,

3291
01:39:41,466 --> 1:39:43,046
we've integrated AR Kit scene

3292
01:39:43,046 --> 1:39:45,236
understanding into RealityKit.

3293
01:39:45,936 --> 1:39:48,486
Which means as AR Kit leans more

3294
01:39:48,486 --> 1:39:49,736
about the environment, it

3295
01:39:49,856 --> 1:39:50,986
synchronizes this to your

3296
01:39:50,986 --> 1:39:52,596
virtual scene automatically.

3297
01:39:52,686 --> 1:39:55,996
We saw RealityKit in action this

3298
01:39:55,996 --> 1:39:56,366
morning.

3299
01:39:57,116 --> 1:39:58,166
Let's take a closer look.

3300
01:39:59,586 --> 1:40:00,436
Let's see what's really going

3301
01:39:59,586 --> 1:40:00,436
Let's see what's really going

3302
01:40:00,436 --> 1:40:00,676
on.

3303
01:40:01,876 --> 1:40:03,996
The reality you see is based on

3304
01:40:03,996 --> 1:40:05,086
things like image-based

3305
01:40:05,086 --> 1:40:07,416
lighting, motion blur and camera

3306
01:40:07,416 --> 1:40:09,376
effects like depth of field and

3307
01:40:09,376 --> 1:40:11,076
camera noise that really blur

3308
01:40:11,076 --> 1:40:13,016
the line between what is reality

3309
01:40:13,016 --> 1:40:14,096
and what is virtual.

3310
01:40:14,876 --> 1:40:15,956
And you get these features with

3311
01:40:15,956 --> 1:40:17,736
RealityKit automatically.

3312
01:40:20,006 --> 1:40:21,546
You access RealityKit through a

3313
01:40:21,546 --> 1:40:22,906
new framework which is a native

3314
01:40:22,906 --> 1:40:23,386
Swift API.

3315
01:40:23,386 --> 1:40:25,186
It takes many advantages of the

3316
01:40:25,186 --> 1:40:26,936
key features of Swift to allow

3317
01:40:26,936 --> 1:40:28,096
you to write clear, compact

3318
01:40:28,326 --> 1:40:28,686
code.

3319
01:40:30,536 --> 1:40:31,866
Concepts Log and Rally are

3320
01:40:31,926 --> 1:40:33,766
directly integrated.

3321
01:40:33,916 --> 1:40:35,596
For example, it's easy to load

3322
01:40:35,706 --> 1:40:37,646
your AR assets and directly

3323
01:40:38,006 --> 1:40:40,326
attach them to anchors.

3324
01:40:40,996 --> 1:40:43,146
Protocol extensions provide easy

3325
01:40:43,236 --> 1:40:44,606
access to entity property which

3326
01:40:44,606 --> 1:40:46,666
allow you to quickly access

3327
01:40:46,726 --> 1:40:48,696
components such as lights or

3328
01:40:48,696 --> 1:40:50,706
shadows in this case and reduce

3329
01:40:50,706 --> 1:40:51,776
the need for runtime checks.

3330
01:40:53,296 --> 1:40:54,366
This also means that you're able

3331
01:40:54,366 --> 1:40:55,726
to work with entities in a

3332
01:40:55,726 --> 1:40:57,006
strongly-typed manner.

3333
01:40:57,446 --> 1:40:58,856
Here we're applying an angular

3334
01:40:58,966 --> 1:41:00,156
force to an entity that

3335
01:40:58,966 --> 1:41:00,156
force to an entity that

3336
01:41:00,156 --> 1:41:00,966
participates in physics.

3337
01:41:00,966 --> 1:41:03,386
And that's all the code you need

3338
01:41:03,386 --> 1:41:03,976
for this scene.

3339
01:41:08,226 --> 1:41:09,496
Last but definitely not least

3340
01:41:09,566 --> 1:41:11,836
today is a new version of our

3341
01:41:11,836 --> 1:41:13,186
augmented reality framework AR

3342
01:41:13,436 --> 1:41:14,406
Kit 3.

3343
01:41:15,666 --> 1:41:17,236
We've taken the most capable AR

3344
01:41:17,356 --> 1:41:18,686
platform in the world and made

3345
01:41:18,686 --> 1:41:20,756
it even more powerful with new

3346
01:41:20,756 --> 1:41:22,126
in-depth reverse features.

3347
01:41:24,036 --> 1:41:26,076
Since introducing AR Kit, we've

3348
01:41:26,076 --> 1:41:27,306
had many developers ask to be

3349
01:41:27,306 --> 1:41:28,346
able to use the front and back

3350
01:41:28,486 --> 1:41:29,896
cameras simultaneously.

3351
01:41:30,326 --> 1:41:32,346
Well, in AR Kit 3 you can.

3352
01:41:32,436 --> 1:41:34,776
So you can -- that's right, both

3353
01:41:34,776 --> 1:41:35,966
cameras at the same time.

3354
01:41:36,186 --> 1:41:38,186
[ Applause ]

3355
01:41:38,356 --> 1:41:39,666
This allows you to use face

3356
01:41:39,666 --> 1:41:41,406
tracking to drive your augmented

3357
01:41:41,406 --> 1:41:42,936
reality experiences directly.

3358
01:41:44,356 --> 1:41:45,416
And as Craig talked about this

3359
01:41:45,416 --> 1:41:47,176
morning, properly occluding

3360
01:41:47,176 --> 1:41:49,506
people in an AR scene is an

3361
01:41:49,606 --> 1:41:50,846
extremely tough problem.

3362
01:41:51,076 --> 1:41:52,296
You see it every time someone

3363
01:41:52,296 --> 1:41:53,226
walks in front of a virtual

3364
01:41:53,226 --> 1:41:53,586
object.

3365
01:41:55,636 --> 1:41:56,816
To solve this, we've built an

3366
01:41:56,816 --> 1:41:57,946
advanced machine-learning

3367
01:41:57,946 --> 1:41:59,726
algorithm that figures out which

3368
01:41:59,796 --> 1:42:01,606
pixels are a person, the depth

3369
01:41:59,796 --> 1:42:01,606
pixels are a person, the depth

3370
01:42:01,736 --> 1:42:03,326
of that person in the scene and

3371
01:42:03,326 --> 1:42:05,826
uses its information to allow us

3372
01:42:05,826 --> 1:42:07,806
to properly render the scene in

3373
01:42:07,806 --> 1:42:08,606
the virtual objects.

3374
01:42:09,236 --> 1:42:10,546
With people occlusion, entirely

3375
01:42:10,546 --> 1:42:12,526
new experiences like Minecraft

3376
01:42:12,526 --> 1:42:13,706
Earth Demo you saw this morning

3377
01:42:13,776 --> 1:42:15,976
are possible.

3378
01:42:16,516 --> 1:42:20,546
[ Applause ]

3379
01:42:21,046 --> 1:42:21,666
Absolutely amazing.

3380
01:42:22,366 --> 1:42:23,696
And finally, we built a system

3381
01:42:23,696 --> 1:42:24,916
that allows humans to interact

3382
01:42:25,026 --> 1:42:27,066
with virtual content.

3383
01:42:27,066 --> 1:42:28,506
AR Kit 3 is able to capture a

3384
01:42:28,566 --> 1:42:30,786
person's motion in real time

3385
01:42:31,256 --> 1:42:33,176
with just the single RGB camera

3386
01:42:33,396 --> 1:42:34,966
in an iPad or iPhone.

3387
01:42:35,906 --> 1:42:37,426
We again use a machine learned

3388
01:42:37,846 --> 1:42:39,226
algorithm to track the person,

3389
01:42:39,226 --> 1:42:42,246
building a 2D stick figure and

3390
01:42:42,586 --> 1:42:44,706
take that figure and then infer

3391
01:42:44,706 --> 1:42:47,356
a 3D motion from them or lift it

3392
01:42:47,356 --> 1:42:48,366
into 3D.

3393
01:42:49,256 --> 1:42:50,796
Both the 2D skeleton and the 3D

3394
01:42:50,796 --> 1:42:51,536
skeleton are available to

3395
01:42:51,536 --> 1:42:52,146
developers.

3396
01:42:52,656 --> 1:42:54,436
The 3D has over 90 articulated

3397
01:42:54,436 --> 1:42:55,566
joints and provides the same

3398
01:42:55,566 --> 1:42:57,946
ease of use as Face Kit.

3399
01:43:01,046 --> 1:43:01,546
So those are our new

3400
01:43:01,546 --> 1:43:02,206
technologies.

3401
01:43:02,206 --> 1:43:05,836
AR Kit 3, RealityKit, and

3402
01:43:05,836 --> 1:43:08,436
Reality Composer are tools and

3403
01:43:08,486 --> 1:43:10,226
frameworks that make it easy for

3404
01:43:10,306 --> 1:43:14,366
anyone, anyone, to build amazing

3405
01:43:14,366 --> 1:43:15,226
AR experiences.

3406
01:43:15,226 --> 1:43:18,346
And we'd like to do something

3407
01:43:18,396 --> 1:43:19,656
fun today, so we have a fun new

3408
01:43:19,726 --> 1:43:20,786
application at the conference.

3409
01:43:21,396 --> 1:43:22,146
You may have seen it,

3410
01:43:22,146 --> 1:43:22,706
SwiftStrike.

3411
01:43:23,696 --> 1:43:25,036
We're making a tabletop version

3412
01:43:25,036 --> 1:43:26,396
of this as a developer sample

3413
01:43:26,396 --> 1:43:27,116
available today.

3414
01:43:27,206 --> 1:43:30,906
It uses RealityKit, AR Kit 3 and

3415
01:43:30,906 --> 1:43:32,206
Reality Composer and provides a

3416
01:43:32,246 --> 1:43:33,606
great starting point for your

3417
01:43:33,606 --> 1:43:35,476
applications.

3418
01:43:36,516 --> 1:43:39,116
[ Music ]

3419
01:43:39,616 --> 1:43:40,976
Lots of fun.

3420
01:43:41,516 --> 1:43:44,036
[ Applause ]

3421
01:43:44,536 --> 1:43:44,976
Thank you.

3422
01:43:45,516 --> 1:43:47,546
[ Applause ]

3423
01:43:48,046 --> 1:43:49,286
And of course Metal powers a lot

3424
01:43:49,286 --> 1:43:51,176
of what we do in AR on our

3425
01:43:51,176 --> 1:43:51,686
devices.

3426
01:43:51,686 --> 1:43:52,706
And to tell you more about

3427
01:43:52,706 --> 1:43:54,216
what's new in Metal, I'd like to

3428
01:43:54,216 --> 1:43:55,576
welcome Jeremy to the stage.

3429
01:43:56,516 --> 1:43:58,836
[ Applause ]

3430
01:43:59,336 --> 1:44:01,556
&gt;&gt; Thank you, Jeff.

3431
01:43:59,336 --> 1:44:01,556
&gt;&gt; Thank you, Jeff.

3432
01:44:02,446 --> 1:44:04,096
So Metal is Apple's modern

3433
01:44:04,346 --> 1:44:06,176
high-performance GPU programming

3434
01:44:06,176 --> 1:44:08,056
API for graphics and compute.

3435
01:44:08,186 --> 1:44:09,586
It's also incredibly easy to

3436
01:44:09,586 --> 1:44:11,416
use, both for beginners and

3437
01:44:11,416 --> 1:44:12,106
experts alike.

3438
01:44:12,106 --> 1:44:14,156
And it brings stunning

3439
01:44:14,316 --> 1:44:15,356
performance increases,

3440
01:44:15,416 --> 1:44:17,226
supporting up to 100 times more

3441
01:44:17,226 --> 1:44:18,896
draw calls than OpenGL and

3442
01:44:18,896 --> 1:44:20,606
enabling a whole new generation

3443
01:44:20,656 --> 1:44:21,856
of advanced graphics

3444
01:44:21,956 --> 1:44:22,476
performance.

3445
01:44:23,696 --> 1:44:25,006
This is because Metal gives your

3446
01:44:25,186 --> 1:44:27,746
app direct control over the GPUs

3447
01:44:27,746 --> 1:44:29,516
that are at the core of Apple's

3448
01:44:29,516 --> 1:44:30,046
products.

3449
01:44:30,526 --> 1:44:33,116
And those GPUs now power over

3450
01:44:33,116 --> 1:44:35,856
1.4 billion Metal-capable system

3451
01:44:36,206 --> 1:44:38,396
from iPhones to iPads to the

3452
01:44:38,396 --> 1:44:39,786
all-new Mac Pro.

3453
01:44:40,536 --> 1:44:41,606
In fact, all of Apple's

3454
01:44:41,666 --> 1:44:42,986
platforms now run on Metal.

3455
01:44:43,546 --> 1:44:45,006
From our smooth user interface

3456
01:44:45,006 --> 1:44:47,026
to the latest 3D rendering in

3457
01:44:47,026 --> 1:44:48,856
RealityKit, to our advanced

3458
01:44:48,856 --> 1:44:50,126
camera processing pipeline,

3459
01:44:50,436 --> 1:44:51,906
we're using Metal everywhere.

3460
01:44:52,446 --> 1:44:53,196
And you can too.

3461
01:44:53,196 --> 1:44:56,006
To help you do just that, this

3462
01:44:56,006 --> 1:44:57,496
year we focused on three key

3463
01:44:57,496 --> 1:44:57,946
areas.

3464
01:44:58,496 --> 1:44:59,926
We've made Metal even easier to

3465
01:44:59,926 --> 1:45:00,446
use.

3466
01:44:59,926 --> 1:45:00,446
use.

3467
01:45:00,996 --> 1:45:02,766
We've enabled all-new levels of

3468
01:45:02,766 --> 1:45:04,986
high-performance GPU compute.

3469
01:45:05,256 --> 1:45:07,036
And we've enhanced Metal for our

3470
01:45:07,036 --> 1:45:08,286
most demanding pro app

3471
01:45:08,356 --> 1:45:10,046
developers and customers.

3472
01:45:10,986 --> 1:45:13,386
First, with Metal's incredibly

3473
01:45:13,386 --> 1:45:15,606
approachable API and GPU shading

3474
01:45:15,606 --> 1:45:17,276
language, you can get started

3475
01:45:17,276 --> 1:45:18,476
with our powerful suite of

3476
01:45:18,476 --> 1:45:19,866
developer tools for GPU

3477
01:45:19,866 --> 1:45:21,996
debugging, profiling and

3478
01:45:21,996 --> 1:45:23,156
performance optimizing.

3479
01:45:23,576 --> 1:45:25,326
And we've made those tools even

3480
01:45:25,326 --> 1:45:25,886
better.

3481
01:45:26,516 --> 1:45:28,356
We have added full Metal support

3482
01:45:28,356 --> 1:45:30,626
to the iOS Simulator in Xcode.

3483
01:45:31,041 --> 1:45:33,041
[ Applause ]

3484
01:45:33,066 --> 1:45:34,286
We're glad you're excited about

3485
01:45:34,286 --> 1:45:34,366
it.

3486
01:45:34,366 --> 1:45:35,256
We're really excited about it

3487
01:45:35,316 --> 1:45:35,546
too.

3488
01:45:35,906 --> 1:45:37,186
You can now use Metal directly

3489
01:45:37,186 --> 1:45:38,476
in the simulator and you

3490
01:45:38,476 --> 1:45:39,736
automatically get major

3491
01:45:39,736 --> 1:45:41,236
performance improvements when

3492
01:45:41,236 --> 1:45:43,726
using UI Kits, Maps and all of

3493
01:45:43,726 --> 1:45:45,216
those system frameworks built on

3494
01:45:45,216 --> 1:45:45,676
Metal.

3495
01:45:45,676 --> 1:45:46,896
And this is because the iOS

3496
01:45:46,946 --> 1:45:48,436
Simulator is now using the

3497
01:45:48,436 --> 1:45:50,216
native Metal support built right

3498
01:45:50,216 --> 1:45:50,836
into your Mac.

3499
01:45:52,506 --> 1:45:53,976
We've also added an all-new

3500
01:45:53,976 --> 1:45:55,096
Metal memory debugger.

3501
01:45:55,446 --> 1:45:56,966
You can now identify exactly how

3502
01:45:56,966 --> 1:45:58,666
much memory your app is using

3503
01:45:58,666 --> 1:46:00,656
for Metal textures, buffers and

3504
01:45:58,666 --> 1:46:00,656
for Metal textures, buffers and

3505
01:46:00,656 --> 1:46:02,436
heats and you can optimize your

3506
01:46:02,436 --> 1:46:04,196
games and apps to use every last

3507
01:46:04,196 --> 1:46:05,876
byte for even more advanced

3508
01:46:05,926 --> 1:46:06,516
graphics.

3509
01:46:07,936 --> 1:46:08,986
Now over the past few years,

3510
01:46:09,026 --> 1:46:10,336
Metal has grown to support the

3511
01:46:10,336 --> 1:46:12,006
advanced features of dozens of

3512
01:46:12,006 --> 1:46:13,566
GPUs, each with their own

3513
01:46:13,566 --> 1:46:15,806
hardware from every major GPU

3514
01:46:15,806 --> 1:46:17,566
vendor and across all of our

3515
01:46:17,566 --> 1:46:19,516
platforms and OS releases.

3516
01:46:19,746 --> 1:46:20,496
And as a developer you

3517
01:46:20,496 --> 1:46:21,726
previously had to manage all of

3518
01:46:21,726 --> 1:46:22,746
this complexity of these

3519
01:46:22,746 --> 1:46:23,916
different hardware feature sets

3520
01:46:24,066 --> 1:46:24,646
yourself.

3521
01:46:26,116 --> 1:46:26,986
Well this year we've made it

3522
01:46:26,986 --> 1:46:28,706
much simpler with just three

3523
01:46:28,706 --> 1:46:29,756
Metal GPU families.

3524
01:46:30,056 --> 1:46:31,526
A Metal common GPU family,

3525
01:46:31,746 --> 1:46:33,346
identifying the vast majority of

3526
01:46:33,586 --> 1:46:34,666
Metal features that you can use

3527
01:46:34,666 --> 1:46:36,096
across all of our platforms.

3528
01:46:36,546 --> 1:46:38,216
A second family for the advanced

3529
01:46:38,216 --> 1:46:40,706
unique features of our Apple

3530
01:46:40,706 --> 1:46:43,426
Design GPUs and our iOS, iPadOS

3531
01:46:43,426 --> 1:46:44,716
and tvOS products.

3532
01:46:44,716 --> 1:46:47,216
And a third family for the

3533
01:46:47,216 --> 1:46:48,746
powerful GPUs on our Mac

3534
01:46:48,996 --> 1:46:49,566
systems.

3535
01:46:50,326 --> 1:46:51,776
And it makes it that much easier

3536
01:46:51,776 --> 1:46:54,406
to bring your apps from iOS to

3537
01:46:54,406 --> 1:46:56,086
macOS or the other way around.

3538
01:46:57,486 --> 1:46:59,076
Now, in addition to enabling

3539
01:46:59,076 --> 1:47:00,426
immersive games and advanced

3540
01:46:59,076 --> 1:47:00,426
immersive games and advanced

3541
01:47:00,426 --> 1:47:02,046
graphics, Metal also gives your

3542
01:47:02,046 --> 1:47:03,616
app the ability to harness the

3543
01:47:03,616 --> 1:47:05,366
GPU for compute.

3544
01:47:05,986 --> 1:47:07,516
So what is GPU compute?

3545
01:47:08,116 --> 1:47:09,176
Well, GPUs were originally

3546
01:47:09,176 --> 1:47:10,586
designed to process large

3547
01:47:10,586 --> 1:47:12,106
numbers of pixels requiring the

3548
01:47:12,106 --> 1:47:13,466
execution of complex

3549
01:47:13,466 --> 1:47:15,096
mathematical computations in a

3550
01:47:15,096 --> 1:47:16,566
massively parallel fashion.

3551
01:47:16,966 --> 1:47:18,526
And it turns out we can apply

3552
01:47:18,526 --> 1:47:20,136
that computational horsepower to

3553
01:47:20,136 --> 1:47:22,556
a wide variety of tasks besides

3554
01:47:22,646 --> 1:47:23,546
traditional graphics.

3555
01:47:24,306 --> 1:47:25,676
So Metal provides all of the

3556
01:47:25,676 --> 1:47:27,086
building blocks that you need

3557
01:47:27,086 --> 1:47:28,726
for general purpose computation

3558
01:47:28,926 --> 1:47:29,976
on the GPU.

3559
01:47:30,206 --> 1:47:32,706
A familiar C++ based GPU

3560
01:47:32,706 --> 1:47:34,716
programming language, compute

3561
01:47:34,716 --> 1:47:35,966
command encoding, API and

3562
01:47:35,966 --> 1:47:38,256
runtime, a full-feature compiler

3563
01:47:38,256 --> 1:47:40,036
and debugger and a rich library

3564
01:47:40,036 --> 1:47:41,526
of shaders and kernels called

3565
01:47:41,526 --> 1:47:42,766
the Metal performance shaders.

3566
01:47:44,336 --> 1:47:45,876
This MPS library provides you

3567
01:47:45,876 --> 1:47:48,296
valuable compute functions all

3568
01:47:48,656 --> 1:47:50,306
pre-optimized for all of those

3569
01:47:50,306 --> 1:47:51,786
GPUs and all of those Apple

3570
01:47:51,786 --> 1:47:52,816
systems and it's all fully

3571
01:47:52,816 --> 1:47:54,506
integrated right into your Metal

3572
01:47:54,506 --> 1:47:54,756
code.

3573
01:47:56,436 --> 1:47:58,086
And on our Apple Design GPUs,

3574
01:47:58,236 --> 1:47:59,646
Metal also provides advanced

3575
01:47:59,726 --> 1:48:01,076
compute features like tile

3576
01:47:59,726 --> 1:48:01,076
compute features like tile

3577
01:48:01,076 --> 1:48:02,806
shading, enabling you to combine

3578
01:48:02,806 --> 1:48:04,006
your compute shaders and your

3579
01:48:04,066 --> 1:48:05,686
fragment processing into one

3580
01:48:05,856 --> 1:48:07,236
simple, highly-efficient render

3581
01:48:08,316 --> 1:48:08,426
pass.

3582
01:48:09,666 --> 1:48:12,106
And this year we're also

3583
01:48:12,106 --> 1:48:13,526
introducing Metal indirect

3584
01:48:13,526 --> 1:48:14,736
compute command encoding.

3585
01:48:14,736 --> 1:48:16,156
It allows you to build your GPU

3586
01:48:16,156 --> 1:48:17,566
compute commands right on the

3587
01:48:17,566 --> 1:48:19,486
GPU itself, unlocking all-new

3588
01:48:19,486 --> 1:48:20,456
algorithms for compute

3589
01:48:20,456 --> 1:48:22,096
efficiency and freeing the CPU

3590
01:48:22,096 --> 1:48:23,516
for other activities in your

3591
01:48:24,596 --> 1:48:24,666
app.

3592
01:48:25,306 --> 1:48:27,676
And with the Radeon Pro Vega II,

3593
01:48:27,676 --> 1:48:30,386
the new Mac Pro is a GPU compute

3594
01:48:30,386 --> 1:48:33,916
monster, capable of up to 56

3595
01:48:33,916 --> 1:48:35,786
teraflops of GPU compute all

3596
01:48:35,786 --> 1:48:38,026
made available to you via Metal.

3597
01:48:38,116 --> 1:48:39,226
Now that's a heck of a lot of

3598
01:48:39,226 --> 1:48:39,666
flops.

3599
01:48:39,666 --> 1:48:40,876
I mean, look at them all.

3600
01:48:41,486 --> 1:48:42,876
They barely fit on the screen.

3601
01:48:43,166 --> 1:48:45,166
[ Applause ]

3602
01:48:45,316 --> 1:48:45,726
That's a lot.

3603
01:48:46,016 --> 1:48:47,676
[ Applause ]

3604
01:48:47,676 --> 1:48:49,086
So what can you do with all of

3605
01:48:49,086 --> 1:48:50,616
those flops of GPU compute?

3606
01:48:51,456 --> 1:48:52,276
Well, with Metal you can use

3607
01:48:52,276 --> 1:48:53,346
them for advanced compute

3608
01:48:53,346 --> 1:48:53,996
processing.

3609
01:48:54,256 --> 1:48:55,816
For your videos, you can improve

3610
01:48:55,816 --> 1:48:57,276
the quality of your photos.

3611
01:48:57,646 --> 1:48:59,806
You can train your ML models and

3612
01:48:59,806 --> 1:49:01,526
you can use them to accelerate

3613
01:48:59,806 --> 1:49:01,526
you can use them to accelerate

3614
01:49:01,526 --> 1:49:02,956
interactive ray tracing.

3615
01:49:04,016 --> 1:49:05,096
So we have further improved

3616
01:49:05,096 --> 1:49:06,386
Metal support for ray tracing

3617
01:49:06,386 --> 1:49:08,366
this year, now enabling dynamic

3618
01:49:08,496 --> 1:49:10,036
scenes by moving the bounding

3619
01:49:10,036 --> 1:49:11,346
volume hierarchy construction

3620
01:49:11,346 --> 1:49:13,536
from the CPU to the GPU, and

3621
01:49:13,536 --> 1:49:15,206
added all-new optimized MPS

3622
01:49:15,206 --> 1:49:17,086
de-noising filters to further

3623
01:49:17,086 --> 1:49:18,146
improve image quality.

3624
01:49:18,146 --> 1:49:21,376
Now ray tracing, it uses the GPU

3625
01:49:21,376 --> 1:49:23,046
to computationally model the

3626
01:49:23,136 --> 1:49:24,746
physical properties of lights

3627
01:49:25,116 --> 1:49:27,166
and surfaces and reflections and

3628
01:49:27,166 --> 1:49:28,796
it can be so complex, people

3629
01:49:28,796 --> 1:49:30,206
actually earn PhD's in this

3630
01:49:30,266 --> 1:49:30,576
topic.

3631
01:49:31,306 --> 1:49:32,596
So to show you how you can use

3632
01:49:32,596 --> 1:49:35,396
Metal and GPU Compute for ray

3633
01:49:35,396 --> 1:49:36,886
tracing, we decided to put

3634
01:49:36,886 --> 1:49:37,966
together a pretty simple

3635
01:49:37,966 --> 1:49:38,686
example.

3636
01:49:38,776 --> 1:49:39,966
And I'd now like to invite Rav

3637
01:49:39,966 --> 1:49:41,356
to the stage to give you a quick

3638
01:49:41,386 --> 1:49:42,006
demonstration.

3639
01:49:42,496 --> 1:49:42,686
Rav?

3640
01:49:43,516 --> 1:49:48,716
[ Applause ]

3641
01:49:49,216 --> 1:49:49,926
&gt;&gt; Thank you, Jeremy.

3642
01:49:51,266 --> 1:49:53,096
So we built a prototype hybrid

3643
01:49:53,096 --> 1:49:54,666
ray tracing engine to see what

3644
01:49:54,666 --> 1:49:56,316
we could do with Metal Compute

3645
01:49:56,506 --> 1:49:58,296
on the powerful new Mac Pro.

3646
01:50:00,106 --> 1:50:03,056
Now this toy city that we built

3647
01:50:03,146 --> 1:50:04,466
looks simple, but we're using

3648
01:50:04,466 --> 1:50:06,876
Metal to process over 1 billion

3649
01:50:06,876 --> 1:50:08,876
rays per second at 4K

3650
01:50:08,876 --> 1:50:09,536
resolution.

3651
01:50:10,336 --> 1:50:11,366
Let me walk you through what

3652
01:50:11,366 --> 1:50:11,976
we're doing here.

3653
01:50:13,396 --> 1:50:15,446
So we start by using Metal draw

3654
01:50:15,446 --> 1:50:17,616
commands to render the geometry

3655
01:50:17,616 --> 1:50:18,936
and material information that

3656
01:50:18,936 --> 1:50:21,736
we're going to use later, and

3657
01:50:21,736 --> 1:50:23,086
then switch to using Metal

3658
01:50:23,126 --> 1:50:25,566
Compute and the MPS ray triangle

3659
01:50:25,566 --> 1:50:28,056
intersection APIs to do all the

3660
01:50:28,056 --> 1:50:28,756
heavy lifting.

3661
01:50:29,366 --> 1:50:30,716
This includes calculating

3662
01:50:30,806 --> 1:50:32,316
ambient light at every surface

3663
01:50:32,356 --> 1:50:33,656
point, as you can see in this

3664
01:50:33,656 --> 1:50:33,886
image.

3665
01:50:34,406 --> 1:50:36,086
But also to simulate light

3666
01:50:36,166 --> 1:50:37,836
bouncing between objects in our

3667
01:50:37,836 --> 1:50:40,466
scene at increasing ray depth to

3668
01:50:40,466 --> 1:50:44,146
generate shadows, reflections

3669
01:50:44,866 --> 1:50:46,616
and even reflections within

3670
01:50:46,616 --> 1:50:47,596
those reflections.

3671
01:50:48,256 --> 1:50:49,606
And then we end by using the

3672
01:50:49,606 --> 1:50:51,636
optimized MPS or optimize

3673
01:50:51,676 --> 1:50:53,376
compute kernels in the new MPS

3674
01:50:53,376 --> 1:50:56,556
de-noiser to produce this really

3675
01:50:56,556 --> 1:50:57,746
high-quality image.

3676
01:50:58,776 --> 1:51:00,976
So traditional CPU renderers

3677
01:50:58,776 --> 1:51:00,976
So traditional CPU renderers

3678
01:51:01,506 --> 1:51:02,916
would take over a minute to

3679
01:51:02,916 --> 1:51:04,236
generate a frame like this.

3680
01:51:04,726 --> 1:51:06,046
With Metal, we've been able to

3681
01:51:06,046 --> 1:51:07,946
reduce this to under 30

3682
01:51:07,946 --> 1:51:09,516
milliseconds, which is a

3683
01:51:09,746 --> 1:51:12,016
staggering 1,000 times faster.

3684
01:51:13,746 --> 1:51:15,376
So pro app developers -- thank

3685
01:51:15,376 --> 1:51:15,566
you.

3686
01:51:15,786 --> 1:51:16,976
We think it's pretty great too.

3687
01:51:17,516 --> 1:51:20,776
[ Applause ]

3688
01:51:21,276 --> 1:51:22,906
So pro app developers can now

3689
01:51:23,026 --> 1:51:25,446
use Metal Compute to build new

3690
01:51:25,446 --> 1:51:27,676
interactive tools to visualize

3691
01:51:27,676 --> 1:51:29,136
these physically accurate

3692
01:51:29,136 --> 1:51:30,936
lighting effects like these

3693
01:51:30,996 --> 1:51:33,856
dramatic shadows that are cast

3694
01:51:33,856 --> 1:51:36,936
by the buildings and also by

3695
01:51:36,936 --> 1:51:37,776
that fire escape.

3696
01:51:41,106 --> 1:51:42,586
Or if we pan over here to this

3697
01:51:42,586 --> 1:51:45,266
roof, the realistic way that

3698
01:51:45,376 --> 1:51:47,466
green light bounces onto this

3699
01:51:47,466 --> 1:51:48,606
neighboring building.

3700
01:51:50,646 --> 1:51:51,616
That just looks great.

3701
01:51:51,736 --> 1:51:51,956
Thank you.

3702
01:51:52,516 --> 1:51:56,696
[ Applause ]

3703
01:51:57,196 --> 1:51:58,666
Another great effect that we can

3704
01:51:58,956 --> 1:52:00,956
simulate or model is accurate

3705
01:51:58,956 --> 1:52:00,956
simulate or model is accurate

3706
01:52:00,956 --> 1:52:02,336
reflections, as you can see in

3707
01:52:02,336 --> 1:52:03,836
the windshields of this bus.

3708
01:52:04,046 --> 1:52:06,086
In fact, you can see the shadows

3709
01:52:06,176 --> 1:52:07,846
moving in that windshield or in

3710
01:52:07,846 --> 1:52:09,656
those reflections as I change

3711
01:52:09,656 --> 1:52:10,666
the position of the sun.

3712
01:52:10,786 --> 1:52:14,426
So that looks great, but

3713
01:52:14,476 --> 1:52:16,246
animating objects in a ray trace

3714
01:52:16,246 --> 1:52:17,776
scene can be very

3715
01:52:17,776 --> 1:52:19,146
computationally expensive

3716
01:52:19,426 --> 1:52:20,936
because we have to update the

3717
01:52:20,936 --> 1:52:22,536
bounding volume hierarchy that's

3718
01:52:22,686 --> 1:52:24,156
associated with the geometry.

3719
01:52:25,376 --> 1:52:27,496
Fortunately, with Metal Compute

3720
01:52:27,496 --> 1:52:29,776
and the MPS APIs, we're able to

3721
01:52:29,776 --> 1:52:32,306
move all of this work onto the

3722
01:52:32,476 --> 1:52:33,476
GPUs and achieve this great

3723
01:52:33,576 --> 1:52:34,186
animation.

3724
01:52:35,546 --> 1:52:36,636
And there go our trains.

3725
01:52:37,466 --> 1:52:40,666
So that was just an example of

3726
01:52:40,746 --> 1:52:42,476
what's possible when you use

3727
01:52:42,476 --> 1:52:44,086
Metal Compute for accelerated

3728
01:52:44,136 --> 1:52:46,646
ray tracing on the new Mac Pro.

3729
01:52:46,646 --> 1:52:47,286
It's a beast.

3730
01:52:47,396 --> 1:52:48,016
Thank you.

3731
01:52:48,186 --> 1:52:49,456
Back to you, Jeremy.

3732
01:52:50,516 --> 1:52:52,636
[ Applause ]

3733
01:52:53,136 --> 1:52:53,696
&gt;&gt; Thank you, Rav.

3734
01:52:54,456 --> 1:52:56,516
So that's what we did in just a

3735
01:52:56,516 --> 1:52:57,436
short bit of time.

3736
01:52:57,666 --> 1:52:59,416
But high-performance ray tracing

3737
01:52:59,416 --> 1:53:00,776
can be even more powerful in the

3738
01:52:59,416 --> 1:53:00,776
can be even more powerful in the

3739
01:53:00,776 --> 1:53:02,536
hands of our most expert

3740
01:53:02,776 --> 1:53:03,816
third-party developers.

3741
01:53:03,816 --> 1:53:05,876
Which is why we are so excited

3742
01:53:05,876 --> 1:53:07,496
that OTOY has announced they're

3743
01:53:07,496 --> 1:53:09,426
using Metal Compute to build

3744
01:53:09,426 --> 1:53:11,756
OctaneX, an all-new version of

3745
01:53:11,756 --> 1:53:12,946
Octane Renderer, their

3746
01:53:12,946 --> 1:53:14,606
interactive path tracing engine

3747
01:53:14,716 --> 1:53:16,376
optimized for Metal and the

3748
01:53:16,376 --> 1:53:17,186
Apple platforms.

3749
01:53:18,556 --> 1:53:20,386
And we are incredibly thrilled

3750
01:53:20,386 --> 1:53:21,766
to be working with Maxon who's

3751
01:53:21,806 --> 1:53:22,976
bringing their powerful

3752
01:53:22,976 --> 1:53:24,356
GPU-accelerated renderer

3753
01:53:24,356 --> 1:53:26,196
Redshift to the Mac with an

3754
01:53:26,316 --> 1:53:28,766
all-new version optimized for

3755
01:53:28,766 --> 1:53:30,716
Metal and the new Mac Pro.

3756
01:53:30,716 --> 1:53:33,106
So with advanced Metal Compute

3757
01:53:33,106 --> 1:53:34,916
APIs and incredibly powerful

3758
01:53:34,916 --> 1:53:37,016
hardware, we've built Metal to

3759
01:53:37,286 --> 1:53:38,526
power the most advanced

3760
01:53:38,526 --> 1:53:40,116
professional content creation

3761
01:53:40,116 --> 1:53:40,666
tools.

3762
01:53:41,256 --> 1:53:42,286
And we've been working really

3763
01:53:42,286 --> 1:53:43,886
closely with the leading app

3764
01:53:43,886 --> 1:53:45,186
developers who have all

3765
01:53:45,186 --> 1:53:46,216
announced that the upcoming

3766
01:53:46,216 --> 1:53:48,246
versions of these professional

3767
01:53:48,356 --> 1:53:50,096
content creation tools and apps

3768
01:53:50,436 --> 1:53:51,946
will be fully optimized for

3769
01:53:51,946 --> 1:53:53,726
Metal and the Apple platforms.

3770
01:53:55,116 --> 1:53:57,066
For instance, Serif has just

3771
01:53:57,066 --> 1:53:58,856
announced an all-new version of

3772
01:53:58,856 --> 1:54:00,766
Affinity Photo for Mac using

3773
01:53:58,856 --> 1:54:00,766
Affinity Photo for Mac using

3774
01:54:00,766 --> 1:54:02,726
Metal's graphics and Compute

3775
01:54:02,956 --> 1:54:04,356
APIs to hypercharge their

3776
01:54:04,356 --> 1:54:06,006
advanced photo processing engine

3777
01:54:06,406 --> 1:54:07,906
in achieving stunning

3778
01:54:08,056 --> 1:54:09,066
performance increases.

3779
01:54:09,346 --> 1:54:10,656
More than 10 times better

3780
01:54:10,656 --> 1:54:12,686
performance and jaw-dropping

3781
01:54:12,686 --> 1:54:14,436
increases of 50 times better

3782
01:54:14,436 --> 1:54:16,096
performance using Metal with

3783
01:54:16,096 --> 1:54:18,126
multiple GPUs on the new Mac

3784
01:54:18,206 --> 1:54:18,756
Pro.

3785
01:54:20,016 --> 1:54:21,346
So to enable these kinds of pro

3786
01:54:21,346 --> 1:54:22,236
apps and this kind of

3787
01:54:22,236 --> 1:54:23,716
performance, we work really

3788
01:54:23,716 --> 1:54:25,476
closely with our GPU hardware

3789
01:54:25,476 --> 1:54:26,986
and software partner teams to

3790
01:54:26,986 --> 1:54:28,536
add all-new features to Metal.

3791
01:54:28,956 --> 1:54:30,766
To support the new AMD Infinity

3792
01:54:30,766 --> 1:54:32,626
Fabric link in the new Mac Pro,

3793
01:54:32,626 --> 1:54:33,966
we added the Metal Peer Group

3794
01:54:33,966 --> 1:54:34,306
API.

3795
01:54:35,136 --> 1:54:36,206
So what does this do?

3796
01:54:36,446 --> 1:54:37,786
Well, previously sharing

3797
01:54:37,786 --> 1:54:40,076
workloads across multiple GPUs

3798
01:54:40,076 --> 1:54:41,416
would require moving large

3799
01:54:41,416 --> 1:54:43,636
amounts of data in a round trip

3800
01:54:43,636 --> 1:54:44,766
across the PCI bus.

3801
01:54:44,766 --> 1:54:46,896
But with the Metal Peer Group

3802
01:54:46,896 --> 1:54:49,506
API, apps can use multiple GPUs

3803
01:54:49,506 --> 1:54:51,286
much more efficiently, directly

3804
01:54:51,286 --> 1:54:52,836
sharing data across the Infinity

3805
01:54:52,836 --> 1:54:54,426
Fabric link and without taking

3806
01:54:54,426 --> 1:54:56,096
that long and scenic route

3807
01:54:56,276 --> 1:54:57,086
through system memory.

3808
01:54:58,536 --> 1:55:00,446
Now finally, you've seen how you

3809
01:54:58,536 --> 1:55:00,446
Now finally, you've seen how you

3810
01:55:00,446 --> 1:55:02,876
can use Metal Compute and the

3811
01:55:02,876 --> 1:55:05,726
new Mac Pro to process a whole

3812
01:55:05,726 --> 1:55:06,936
lot more pixels.

3813
01:55:06,936 --> 1:55:09,026
But we also want you to produce

3814
01:55:09,026 --> 1:55:10,406
even more beautiful pixels.

3815
01:55:10,476 --> 1:55:11,946
So we've introduced the gorgeous

3816
01:55:12,006 --> 1:55:15,376
new Pro Display XDR with all-new

3817
01:55:15,376 --> 1:55:17,706
HDR software support in macOS.

3818
01:55:18,396 --> 1:55:19,356
You can now use the AV

3819
01:55:19,356 --> 1:55:21,826
Foundation APIs to decode HDR

3820
01:55:21,826 --> 1:55:24,226
videos or you can render native

3821
01:55:24,226 --> 1:55:25,976
HDR content directly with Metal.

3822
01:55:26,626 --> 1:55:28,266
You can manage the HDR display

3823
01:55:28,266 --> 1:55:29,966
tone mapping yourself or you can

3824
01:55:29,966 --> 1:55:31,536
let the window system and our

3825
01:55:31,536 --> 1:55:33,306
advanced display system software

3826
01:55:33,546 --> 1:55:34,796
handle it all for you.

3827
01:55:34,946 --> 1:55:37,046
And with these same APIs, you

3828
01:55:37,046 --> 1:55:38,536
can also access a far greater

3829
01:55:38,536 --> 1:55:40,676
range of brightness levels on

3830
01:55:40,676 --> 1:55:41,826
many of our existing Mac

3831
01:55:41,866 --> 1:55:42,706
displays as well.

3832
01:55:43,366 --> 1:55:45,476
So that's our Metal update for

3833
01:55:45,476 --> 1:55:45,846
today.

3834
01:55:45,846 --> 1:55:47,576
It's even easier to use Metal

3835
01:55:47,576 --> 1:55:48,986
across all of our platforms with

3836
01:55:48,986 --> 1:55:50,596
Metal in the iOS Simulator and

3837
01:55:50,706 --> 1:55:52,356
simplified GPU families.

3838
01:55:52,406 --> 1:55:53,706
We have all-new features and

3839
01:55:53,756 --> 1:55:55,746
powerful hardware to unleash

3840
01:55:55,806 --> 1:55:57,356
all-new levels of GPU compute

3841
01:55:57,356 --> 1:55:57,926
performance.

3842
01:55:58,426 --> 1:55:59,856
And we built Metal to be the

3843
01:55:59,966 --> 1:56:02,076
best GPU programming API to

3844
01:55:59,966 --> 1:56:02,076
best GPU programming API to

3845
01:56:02,076 --> 1:56:03,346
drive modern professional

3846
01:56:03,446 --> 1:56:05,576
content creation tools and apps.

3847
01:56:06,276 --> 1:56:07,186
So thank you very much.

3848
01:56:07,486 --> 1:56:08,736
I'll hand it back to Sebastien

3849
01:56:08,736 --> 1:56:08,916
now.

3850
01:56:09,146 --> 1:56:09,436
Thank you.

3851
01:56:10,516 --> 1:56:13,546
[ Applause ]

3852
01:56:14,046 --> 1:56:15,436
&gt;&gt; Thank you, Jeremy.

3853
01:56:15,436 --> 1:56:16,596
Don't you love Metal?

3854
01:56:16,756 --> 1:56:17,736
Don't you love the power of

3855
01:56:17,736 --> 1:56:18,066
Metal?

3856
01:56:18,446 --> 1:56:19,506
Really, really amazing.

3857
01:56:20,226 --> 1:56:21,726
Now what you've seen this

3858
01:56:21,726 --> 1:56:23,536
afternoon is a huge amount of

3859
01:56:23,576 --> 1:56:25,236
new technology that's new for

3860
01:56:25,276 --> 1:56:26,896
all of you as developers.

3861
01:56:27,486 --> 1:56:28,936
And what we've shown covering

3862
01:56:28,936 --> 1:56:30,486
developer tools, the Apple

3863
01:56:30,596 --> 1:56:32,486
platforms and core technologies

3864
01:56:32,856 --> 1:56:34,546
is just some of the highlights.

3865
01:56:34,896 --> 1:56:36,336
We actually have so much more to

3866
01:56:36,336 --> 1:56:37,136
show you this week.

3867
01:56:37,336 --> 1:56:39,516
And so ahead of us are 109

3868
01:56:39,746 --> 1:56:40,466
different sessions.

3869
01:56:40,466 --> 1:56:42,156
And it turns out that that

3870
01:56:42,156 --> 1:56:43,476
wasn't enough to cover

3871
01:56:43,476 --> 1:56:44,106
everything.

3872
01:56:44,496 --> 1:56:45,886
So this year we added an

3873
01:56:45,886 --> 1:56:48,286
additional 27 video-only

3874
01:56:48,356 --> 1:56:48,726
sessions.

3875
01:56:50,016 --> 1:56:51,146
And when you want to dive even

3876
01:56:51,146 --> 1:56:53,346
deeper, you could sit down with

3877
01:56:53,426 --> 1:56:55,106
some of the over 1,000 Apple

3878
01:56:55,106 --> 1:56:56,746
engineers that are here at WWDC

3879
01:56:56,846 --> 1:57:00,566
in 229 different lab sessions

3880
01:56:56,846 --> 1:57:00,566
in 229 different lab sessions

3881
01:57:00,886 --> 1:57:01,676
throughout the week.

3882
01:57:03,266 --> 1:57:05,426
So get out there and prepare to

3883
01:57:05,496 --> 1:57:06,526
have your minds blown.

3884
01:57:06,526 --> 1:57:07,816
It's going to be a great week.

3885
01:57:07,816 --> 1:57:08,526
Thank you.

3886
01:57:09,516 --> 1:57:16,500
[ Applause ]
