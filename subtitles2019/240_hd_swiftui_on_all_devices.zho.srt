1
00:00:06,807 --> 0:00:09,843
（所有设备上的SwiftUI）

2
00:00:09,910 --> 0:00:13,380
好的 谢谢大家 欢迎

3
00:00:14,114 --> 0:00:15,382
很高兴在这里见到你们

4
00:00:15,449 --> 0:00:18,785
我很高兴大家对

5
00:00:19,286 --> 0:00:20,487
我是Jeff Nadeau

6
00:00:20,554 --> 0:00:23,056
我在macOS的架构团队工作

7
00:00:23,123 --> 0:00:26,026
Meghna Sapre为大家

8
00:00:27,027 --> 0:00:28,996
现在 我们希望你通过这周的演讲

9
00:00:29,062 --> 0:00:32,266
但如果你需要一个总结

10
00:00:32,633 --> 0:00:36,270
SwiftUI是在任何设备上

11
00:00:36,336 --> 0:00:38,005
（在任何设备上创建优质app

12
00:00:38,071 --> 0:00:41,742
我们今天关注的焦点是

13
00:00:42,910 --> 0:00:44,578
现在 当我们想到

14
00:00:44,645 --> 0:00:45,779
所有设备创建app

15
00:00:45,846 --> 0:00:47,714
我们会想到这些技术

16
00:00:48,015 --> 0:00:49,416
我们在Mac上使用AppKit

17
00:00:49,716 --> 0:00:51,952
在iPhone和iPad上

18
00:00:52,019 --> 0:00:55,422
使用UIKit的TVUIKit为

19
00:00:55,489 --> 0:00:57,224
接下来是 在Watch上使用

20
00:00:58,425 --> 0:01:01,628
依照每种设备的强项和性能

21
00:00:58,425 --> 0:01:01,628
依照每种设备的强项和性能

22
00:01:01,695 --> 0:01:03,297
这些UI框架是针对

23
00:01:03,363 --> 0:01:05,732
自然地 它们之间

24
00:01:06,266 --> 0:01:09,203
以前 我们无法将其中一个

25
00:01:09,269 --> 0:01:11,805
不做修改就移到其他设备上

26
00:01:13,574 --> 0:01:16,510
但是 这一次

27
00:01:16,577 --> 0:01:18,712
可以让你在任何设备上使用了

28
00:01:19,246 --> 0:01:21,548
对app开发者来说

29
00:01:21,615 --> 0:01:23,116
这是一个空前的好机会

30
00:01:24,318 --> 0:01:25,586
但是这些设备都很不一样

31
00:01:25,652 --> 0:01:27,554
我们如何使用UI框架创建一个

32
00:01:27,621 --> 0:01:28,956
就能适配所有的呢？

33
00:01:29,022 --> 0:01:30,023
（为所有平台设计）

34
00:01:30,090 --> 0:01:32,125
SwiftUI从开始就为适配

35
00:01:32,192 --> 0:01:34,628
许多不同的UI范例而创建的

36
00:01:34,895 --> 0:01:37,197
所以无论你是使用键盘和鼠标

37
00:01:37,264 --> 0:01:39,833
或是一个多点触摸设备

38
00:01:40,100 --> 0:01:42,035
甚至是Apple Watch上的

39
00:01:42,102 --> 0:01:45,372
或辅助工具比如旁白和切换控制

40
00:01:45,639 --> 0:01:48,175
SwiftUI被设计为

41
00:01:49,142 --> 0:01:50,377
它为我们的平台设计惯例

42
00:01:50,444 --> 0:01:52,913
提供了很大以及有创造性的支持

43
00:01:53,413 --> 0:01:55,649
我们邀请了不同平台的专家们

44
00:01:55,716 --> 0:01:56,583
来确保

45
00:01:57,050 --> 0:02:01,588
当你在某个设备上

46
00:01:57,050 --> 0:02:01,588
当你在某个设备上

47
00:02:01,655 --> 0:02:03,957
会非常合适

48
00:02:05,025 --> 0:02:05,959
这个系统可以允许你在

49
00:02:06,026 --> 0:02:08,794
运用你有限的知识

50
00:02:09,263 --> 0:02:11,198
每个物件都能以相同的方式

51
00:02:11,532 --> 0:02:15,536
甚至当你为了支持一些

52
00:02:15,602 --> 0:02:19,239
比如MacBook Pro的Touch Bar

53
00:02:19,306 --> 0:02:20,607
又或是Siri Remote

54
00:02:20,874 --> 0:02:23,043
用来实现的工具具有连贯性

55
00:02:23,110 --> 0:02:26,113
以及使用起来非常相似和简单

56
00:02:27,147 --> 0:02:30,918
现在 通常的设计理念中

57
00:02:30,984 --> 0:02:33,887
我们也在SwiftUI为一些元素

58
00:02:33,954 --> 0:02:35,689
做了跨平台的统一支持

59
00:02:35,756 --> 0:02:36,790
比如

60
00:02:37,291 --> 0:02:40,060
每个平台都有切换控制

61
00:02:40,127 --> 0:02:41,395
（通用元素）

62
00:02:41,461 --> 0:02:43,030
你已经获得了一些布尔状态值

63
00:02:43,096 --> 0:02:44,398
你想要切换

64
00:02:44,831 --> 0:02:48,168
以及 你有一个切换的描述标签

65
00:02:49,436 --> 0:02:50,838
所以 虽然

66
00:02:51,471 --> 0:02:54,341
这个控制在每个设备上

67
00:02:54,408 --> 0:02:57,277
它可能是一个切换键 一个复选框

68
00:02:57,578 --> 0:03:01,248
我们能提供一个单独的API

69
00:02:57,578 --> 0:03:01,248
我们能提供一个单独的API

70
00:03:03,750 --> 0:03:06,453
SwiftUI也用一套通用的

71
00:03:06,820 --> 0:03:09,756
所以当你使用一个栈

72
00:03:09,823 --> 0:03:11,992
这些工具在每个设备上使用

73
00:03:12,059 --> 0:03:13,660
那意味着你只要知道

74
00:03:13,727 --> 0:03:15,863
在一个设备上为app布局

75
00:03:15,929 --> 0:03:18,265
你就能适配所有的设备了

76
00:03:21,435 --> 0:03:24,605
我们也有一些更高端的控制

77
00:03:24,671 --> 0:03:27,107
选择器能从一个列表中

78
00:03:27,774 --> 0:03:30,577
它在不同设备上的UI设计不一

79
00:03:30,644 --> 0:03:33,013
在macOS上 它可能是

80
00:03:33,080 --> 0:03:36,083
在iOS或watchOS上

81
00:03:37,084 --> 0:03:39,019
不管它们区别多大

82
00:03:39,086 --> 0:03:41,221
你可能不会完全在

83
00:03:41,288 --> 0:03:42,589
设备之间交替使用它们

84
00:03:42,923 --> 0:03:46,293
但是你绑定的数据是一直不变的

85
00:03:47,060 --> 0:03:49,863
当你使用其中的一个控制器

86
00:03:49,930 --> 0:03:53,133
你可以很简单地在设备之间转移

87
00:03:53,867 --> 0:03:55,202
现在我们没有时间来了解

88
00:03:55,269 --> 0:03:57,738
SwiftUI上所有不同的元素

89
00:03:57,804 --> 0:03:59,740
想要了解更多信息

90
00:03:59,806 --> 0:04:01,275
你可以查阅SwiftUI基础演讲

91
00:03:59,806 --> 0:04:01,275
你可以查阅SwiftUI基础演讲

92
00:04:02,709 --> 0:04:05,913
现在 这是否意味着我能

93
00:04:05,979 --> 0:04:08,081
设计一个app就能

94
00:04:08,148 --> 0:04:09,883
在所有设备良好运行呢

95
00:04:10,784 --> 0:04:15,022
我为4k电视设计的代码

96
00:04:15,088 --> 0:04:17,891
在44毫米的表盘上顺利运行呢

97
00:04:20,093 --> 0:04:21,394
当然不能

98
00:04:21,461 --> 0:04:23,230
（当然不能）

99
00:04:23,297 --> 0:04:27,367
你知道的 一个尺寸的app

100
00:04:28,202 --> 0:04:31,371
如果我们只想要在所有设备中

101
00:04:31,438 --> 0:04:32,739
都坚持使用相同的设计方案

102
00:04:33,106 --> 0:04:36,343
我们会错过app在每个设备上

103
00:04:37,177 --> 0:04:39,880
不会有奇迹发生

104
00:04:39,947 --> 0:04:41,849
你必须为你的app在各个平台

105
00:04:41,915 --> 0:04:44,117
做出正确的设计

106
00:04:45,252 --> 0:04:47,087
现在 SwiftUI能帮你

107
00:04:47,421 --> 0:04:50,524
运用你知道的技能栈和工具集

108
00:04:50,591 --> 0:04:53,460
分散到各个设备

109
00:04:54,461 --> 0:04:56,730
你的代码也一定能有机会

110
00:04:56,797 --> 0:05:00,100
运用到多平台中

111
00:04:56,797 --> 0:05:00,100
运用到多平台中

112
00:05:01,468 --> 0:05:03,470
因此 我们认为写少量的代码

113
00:05:03,537 --> 0:05:05,873
就能运用到多处运行

114
00:05:06,406 --> 0:05:09,543
以及学习一种运用多处的方式

115
00:05:09,610 --> 0:05:11,078
（一次学习 到处应用）

116
00:05:11,144 --> 0:05:13,113
现在 我们将概念运用到实践中

117
00:05:13,447 --> 0:05:14,882
我们需要创建一个app

118
00:05:14,948 --> 0:05:15,949
（我们创建一个app）

119
00:05:16,016 --> 0:05:16,917
但

120
00:05:17,484 --> 0:05:21,455
它更像是我们创建了4个app

121
00:05:21,522 --> 0:05:22,689
（我们创建4个app）

122
00:05:22,756 --> 0:05:25,125
我们创建的app

123
00:05:25,792 --> 0:05:28,028
Landmarks的

124
00:05:28,095 --> 0:05:29,096
搜索和访问地标

125
00:05:29,162 --> 0:05:30,631
（Landmarks）

126
00:05:30,697 --> 0:05:32,032
想必大家都想看照片

127
00:05:32,099 --> 0:05:34,301
以及获取这些地方的游客信息

128
00:05:35,969 --> 0:05:39,640
我认为能获取目的地的地图和方向

129
00:05:40,941 --> 0:05:43,644
如果我们计划了一次旅行

130
00:05:44,778 --> 0:05:47,681
当我们想要在所有设备上支持

131
00:05:47,748 --> 0:05:51,251
我们要了解我们的app

132
00:05:51,318 --> 0:05:52,686
在不同平台应该如何展示

133
00:05:53,921 --> 0:05:54,888
所以 比如

134
00:05:55,422 --> 0:05:56,456
在Apple TV上

135
00:05:57,157 --> 0:05:59,793
很适合搜寻要去的景点

136
00:06:01,328 --> 0:06:02,796
因为它的屏幕很大

137
00:06:02,863 --> 0:06:05,899
你可以和家人 朋友或室友

138
00:06:05,966 --> 0:06:07,768
（为Apple TV设计的

139
00:06:07,835 --> 0:06:10,504
我们也想为我们喜欢的内容做标记

140
00:06:12,506 --> 0:06:15,042
Mac会是一个搜索的好平台

141
00:06:15,108 --> 0:06:16,677
（为Mac设计的

142
00:06:16,743 --> 0:06:18,946
这是一个对比和获取对比信息

143
00:06:19,746 --> 0:06:22,716
可能还有一些更高级的整理和

144
00:06:23,817 --> 0:06:25,619
也适合阅读细节的内容

145
00:06:26,486 --> 0:06:27,921
（为iOS设计的

146
00:06:27,988 --> 0:06:28,856
在iPhone上

147
00:06:29,289 --> 0:06:31,892
我们会很想获取每个地标的简介

148
00:06:32,759 --> 0:06:35,062
但使用图片的方式

149
00:06:35,395 --> 0:06:37,564
我们也需要获取抵达目的地的信息

150
00:06:38,966 --> 0:06:40,701
当然 iPhone也是手机

151
00:06:40,767 --> 0:06:42,903
那么 如果我们想要提前

152
00:06:42,970 --> 0:06:44,371
自然也能做到

153
00:06:46,807 --> 0:06:48,075
最后在Apple Watch上

154
00:06:48,375 --> 0:06:50,077
我们能查看我们需要知道

155
00:06:50,143 --> 0:06:51,879
的最重要的信息

156
00:06:51,945 --> 0:06:53,180
（为Apple Watch

157
00:06:53,247 --> 0:06:56,683
当有信息变动时

158
00:06:56,750 --> 0:06:58,018
它是接收重要信息的绝佳平台

159
00:07:00,287 --> 0:07:01,121
现在 最酷的

160
00:07:01,522 --> 0:07:03,290
是app的iOS版本

161
00:07:03,357 --> 0:07:05,292
你现在就能使用了

162
00:07:06,193 --> 0:07:10,097
它是教你如何使用SwiftUI

163
00:07:10,898 --> 0:07:12,432
你从最开始

164
00:07:12,499 --> 0:07:15,469
你可以按步骤创建这个app

165
00:07:15,536 --> 0:07:16,970
（学习体验）

166
00:07:17,037 --> 0:07:18,872
今天就可以下载了

167
00:07:19,139 --> 0:07:21,675
它是学习创建

168
00:07:22,109 --> 0:07:24,845
作为一个结果

169
00:07:24,912 --> 0:07:29,082
如何在Apple TV、Mac

170
00:07:30,551 --> 0:07:31,818
在开始之前

171
00:07:31,885 --> 0:07:33,820
有请我的同事Ada Turner

172
00:07:33,887 --> 0:07:36,557
来为大家介绍如何在AppleTV

173
00:07:36,957 --> 0:07:40,294
（在Apple TV上

174
00:07:43,797 --> 0:07:44,631
谢谢Jeff

175
00:07:45,132 --> 0:07:47,768
大家好 我是Ada Turner

176
00:07:47,835 --> 0:07:50,404
今天 我非常高兴能为大家

177
00:07:50,470 --> 0:07:53,006
介绍关于在Appe TV上

178
00:07:54,675 --> 0:07:56,777
为TV设计app

179
00:07:56,844 --> 0:08:01,615
意味着要考虑到Apple TV

180
00:07:56,844 --> 0:08:01,615
意味着要考虑到Apple TV

181
00:08:01,682 --> 0:08:06,119
为家里最宽大的屏幕来设计app

182
00:08:06,520 --> 0:08:10,858
幸运的是

183
00:08:10,924 --> 0:08:15,395
的技术和工具集

184
00:08:15,462 --> 0:08:18,565
使用SwiftUI

185
00:08:20,000 --> 0:08:23,403
今天 我会主要讲在宽大屏幕

186
00:08:23,470 --> 0:08:27,508
设计良好用户体验的三个关键点

187
00:08:28,308 --> 0:08:32,578
tvOS是一个10英尺的用户体验

188
00:08:33,179 --> 0:08:36,416
人们使用Siri Remote

189
00:08:36,482 --> 0:08:39,019
而不是一个触碰屏幕或一个鼠标

190
00:08:39,520 --> 0:08:42,823
有流线型的导航

191
00:08:42,890 --> 0:08:44,825
对tvOS的app尤其重要

192
00:08:44,892 --> 0:08:47,694
这样人们可以直接

193
00:08:48,629 --> 0:08:52,032
现在 什么是10英尺的

194
00:08:53,233 --> 0:08:54,201
是这个

195
00:08:55,302 --> 0:08:56,470
而不是这个

196
00:08:57,571 --> 0:09:01,775
你的app应该强调丰富沉浸式

197
00:08:57,571 --> 0:09:01,775
你的app应该强调丰富沉浸式

198
00:09:01,842 --> 0:09:06,547
比如美丽的图像或视频l

199
00:09:06,613 --> 0:09:09,149
做笔记或获取方向的任务

200
00:09:09,483 --> 0:09:10,317
（10英尺用户体验）

201
00:09:10,384 --> 0:09:14,888
从其他设备分享SwiftUI代码

202
00:09:15,455 --> 0:09:19,226
在房间长时间

203
00:09:19,526 --> 0:09:23,964
以及可能多人同时观看大屏幕时

204
00:09:24,765 --> 0:09:26,900
需要小心考虑

205
00:09:27,534 --> 0:09:30,604
哪种用户体验最好

206
00:09:32,172 --> 0:09:35,108
我们来看在TV上 我们决定

207
00:09:35,175 --> 0:09:36,610
为Landmarks支持

208
00:09:36,877 --> 0:09:39,413
以及去掉哪些功能

209
00:09:40,581 --> 0:09:44,218
最简单的方式是

210
00:09:44,284 --> 0:09:47,454
在大屏幕上看起来非常好看的照片

211
00:09:47,521 --> 0:09:48,488
（Landmarks -

212
00:09:48,555 --> 0:09:51,391
在客厅里一起挑选最爱的那个

213
00:09:51,458 --> 0:09:55,462
是我们要记住的tvOS app

214
00:09:56,630 --> 0:09:59,833
我们也包含了基本的游客信息

215
00:09:59,900 --> 0:10:02,336
比如时长信息和费用

216
00:09:59,900 --> 0:10:02,336
比如时长信息和费用

217
00:10:02,402 --> 0:10:04,638
这样人们在浏览他们要去

218
00:10:04,705 --> 0:10:07,174
就能做出正确的选择

219
00:10:08,408 --> 0:10:10,911
现在 虽然我们的数据支持它

220
00:10:10,978 --> 0:10:14,414
我们还是决定不去包含

221
00:10:14,481 --> 0:10:16,450
很长的每个地标历史具体信息

222
00:10:16,517 --> 0:10:20,320
因为在TV上展示

223
00:10:21,088 --> 0:10:22,055
我们也决定

224
00:10:22,122 --> 0:10:24,791
不包含相对高级的整理和过滤功能

225
00:10:24,858 --> 0:10:26,894
因为这样的功能

226
00:10:26,960 --> 0:10:28,629
使用更为合理

227
00:10:29,296 --> 0:10:33,667
最后 虽然我们的数据包含了

228
00:10:33,734 --> 0:10:37,104
我们决定不实现地理围栏通知功能

229
00:10:37,171 --> 0:10:41,942
因为旅行时使用tvOS app

230
00:10:44,444 --> 0:10:46,713
接下来 我们来了解一下焦点

231
00:10:48,582 --> 0:10:52,052
人们使用Siri Remote

232
00:10:52,319 --> 0:10:54,922
它已被优化 你能在app界面

233
00:10:54,988 --> 0:10:56,490
毫不费劲地滑动

234
00:10:57,090 --> 0:11:00,427
你要谨慎在你整个app的界面中

235
00:10:57,090 --> 0:11:00,427
你要谨慎在你整个app的界面中

236
00:11:00,494 --> 0:11:03,330
使用焦距来直观地导航

237
00:11:03,897 --> 0:11:07,968
幸运的是 许多SwiftUI的

238
00:11:08,035 --> 0:11:12,206
比如列表 按钮 文字域和切换键

239
00:11:12,472 --> 0:11:14,908
都能在tvOS上良好地使用

240
00:11:14,975 --> 0:11:17,878
能适应不同的外观和用户操作行为

241
00:11:17,945 --> 0:11:22,316
它在大屏幕和使用焦点交互时

242
00:11:23,450 --> 0:11:25,986
如果你实现了你自己的自定义控制

243
00:11:26,053 --> 0:11:31,425
SwiftUI提供了一个

244
00:11:31,491 --> 0:11:35,762
在你的视图获得或失去焦点时

245
00:11:35,829 --> 0:11:37,931
它允许你控制你的视图是否

246
00:11:38,398 --> 0:11:41,468
你也能使用

247
00:11:41,535 --> 0:11:45,572
onExitCommand

248
00:11:45,639 --> 0:11:49,276
当你的视图聚焦时

249
00:11:49,343 --> 0:11:50,844
在Siri Remote点击

250
00:11:51,945 --> 0:11:52,946
（流水线导航）

251
00:11:53,013 --> 0:11:53,881
谢谢

252
00:11:58,352 --> 0:12:03,257
最后 我们来深入了解一下

253
00:11:58,352 --> 0:12:03,257
最后 我们来深入了解一下

254
00:12:04,958 --> 0:12:07,794
在Mac或iPhone上的

255
00:12:07,861 --> 0:12:13,000
操作长的 垂直地可滚动的表单内容

256
00:12:13,066 --> 0:12:15,335
但在tvOS上

257
00:12:15,402 --> 0:12:19,973
人们想要一个轻松地

258
00:12:20,574 --> 0:12:24,645
使用SwiftUI简单的

259
00:12:24,711 --> 0:12:29,183
列表视图和滚动视图

260
00:12:29,249 --> 0:12:31,018
在TV上

261
00:12:31,084 --> 0:12:34,454
有垂直堆栈的水平滚动的架子

262
00:12:34,521 --> 0:12:38,592
它充分利用了TV宽频的优点

263
00:12:38,659 --> 0:12:42,129
允许人们不用在页面间切换

264
00:12:42,196 --> 0:12:44,932
就能浏览不同类别

265
00:12:46,200 --> 0:12:49,269
首先 我们来看一下

266
00:12:49,336 --> 0:12:53,407
一个SwiftUI app的

267
00:12:54,374 --> 0:12:59,213
标签视图是实现许多tvOS

268
00:12:59,580 --> 0:13:03,617
它允许你将你app内容

269
00:12:59,580 --> 0:13:03,617
它允许你将你app内容

270
00:13:03,684 --> 0:13:05,586
它们非常容易切换

271
00:13:05,652 --> 0:13:09,623
在顶层的每个视图

272
00:13:09,690 --> 0:13:12,092
允许用户知道他们在app中的位置

273
00:13:13,260 --> 0:13:17,097
导航视图允许你包含页面的内容

274
00:13:17,164 --> 0:13:21,502
不用一个标题或按钮就能

275
00:13:22,769 --> 0:13:24,304
我想简洁地说明一下

276
00:13:24,571 --> 0:13:29,510
在tvOS和iOS构建

277
00:13:30,511 --> 0:13:33,347
在iOS上

278
00:13:33,413 --> 0:13:36,383
它通常会在你app的顶层视图

279
00:13:36,950 --> 0:13:40,854
它的每个子视图

280
00:13:41,288 --> 0:13:44,758
包含你app内容的

281
00:13:45,192 --> 0:13:46,460
基于这个架构

282
00:13:46,527 --> 0:13:49,496
当人们深入了解你app的内容时

283
00:13:49,563 --> 0:13:51,532
标签栏仍保持可见

284
00:13:51,598 --> 0:13:54,735
允许人们在任何时候都可以

285
00:13:56,069 --> 0:13:57,471
这里 Photos中

286
00:13:57,838 --> 0:14:01,008
在跳转至详情页面后

287
00:13:57,838 --> 0:14:01,008
在跳转至详情页面后

288
00:14:01,708 --> 0:14:04,211
标签栏在屏幕底部一直处于可见状态

289
00:14:05,546 --> 0:14:10,484
这样用户就不用返回导航

290
00:14:12,819 --> 0:14:13,654
然而

291
00:14:14,922 --> 0:14:18,525
如果你在tvOS上使用标签视图

292
00:14:19,026 --> 0:14:21,862
你会想要让导航视图

293
00:14:21,929 --> 0:14:26,667
出现在你app的顶层视图

294
00:14:27,067 --> 0:14:30,704
的是标签视图的直接子类的标签视图

295
00:14:31,138 --> 0:14:32,239
使用这个架构

296
00:14:32,306 --> 0:14:35,042
当人们通过导航深入

297
00:14:35,576 --> 0:14:39,947
我们想要顶层栏消失

298
00:14:40,013 --> 0:14:44,518
是强调你app内容的全屏幕体验

299
00:14:44,585 --> 0:14:45,986
（tvOS和iOS的

300
00:14:46,353 --> 0:14:50,057
这是TV的Photos

301
00:14:50,123 --> 0:14:52,826
跳转到相册详情页时

302
00:14:52,893 --> 0:14:55,863
这样用户就能专注于相册的内容

303
00:14:58,765 --> 0:15:01,869
SwiftUI视图是高复合型的

304
00:14:58,765 --> 0:15:01,869
SwiftUI视图是高复合型的

305
00:15:01,935 --> 0:15:05,806
所以在tvOS上重组你app的

306
00:15:05,873 --> 0:15:07,007
导航架构非常容易

307
00:15:07,941 --> 0:15:11,378
标签视图

308
00:15:12,346 --> 0:15:13,747
导航视图

309
00:15:14,982 --> 0:15:16,250
和内容视图之间的嵌套关系

310
00:15:16,617 --> 0:15:21,121
都是你代码中

311
00:15:22,890 --> 0:15:26,326
现在 我们来实践一下

312
00:15:26,393 --> 0:15:28,362
为TV来调整

313
00:15:28,428 --> 0:15:29,396
（演示）

314
00:15:30,230 --> 0:15:34,201
首先 我们不再需要

315
00:15:40,841 --> 0:15:41,675
接下来

316
00:15:42,309 --> 0:15:44,244
我们去掉这个导航按钮和

317
00:15:45,212 --> 0:15:46,146
数据标题标签

318
00:15:48,916 --> 0:15:50,117
我们来看看是什么样子

319
00:16:05,199 --> 0:16:08,435
这是我们做出的一个优化

320
00:16:09,036 --> 0:16:14,341
这个长的垂直滚动列表

321
00:16:14,842 --> 0:16:19,680
那么 我们来用一个嵌套的

322
00:16:30,457 --> 0:16:34,461
我们在一行内使用一个类别

323
00:16:35,095 --> 0:16:36,230
来展示所有地标

324
00:16:40,167 --> 0:16:41,835
我们来仔细看一下行

325
00:16:44,171 --> 0:16:48,976
它和使用额外地一个包含了标题标签

326
00:16:49,042 --> 0:16:54,815
的HStack的VStack

327
00:16:55,682 --> 0:16:59,686
在纯文本视图内

328
00:16:59,953 --> 0:17:02,956
我使用了一个自定义视图

329
00:16:59,953 --> 0:17:02,956
我使用了一个自定义视图

330
00:17:03,023 --> 0:17:05,259
它是导航按钮的标签

331
00:17:05,626 --> 0:17:08,662
我将这个视图直接分享到

332
00:17:09,530 --> 0:17:10,664
我们来运行一下

333
00:17:22,075 --> 0:17:24,077
只改变了几行代码

334
00:17:24,377 --> 0:17:26,613
它看上去比之前好多了

335
00:17:26,680 --> 0:17:28,080
我现在有个好看的

336
00:17:28,749 --> 0:17:32,853
含有图片和垂直滚动视图的

337
00:17:32,920 --> 0:17:35,155
它充分利用了宽频的优点

338
00:17:36,256 --> 0:17:38,091
这里 我要指出的一点是

339
00:17:38,358 --> 0:17:42,129
当我们仍在地标行内

340
00:17:42,196 --> 0:17:45,365
它的外观变化了

341
00:17:45,699 --> 0:17:48,735
右侧的V形标志不见了

342
00:17:48,802 --> 0:17:50,571
背景也不一样了

343
00:17:50,938 --> 0:17:53,040
这是因为导航按钮

344
00:17:53,106 --> 0:17:55,676
不再在列表视图显示了

345
00:17:55,742 --> 0:17:58,545
它自动地适配了它的外观

346
00:17:59,446 --> 0:18:03,884
现在 当水平滚动内容

347
00:17:59,446 --> 0:18:03,884
现在 当水平滚动内容

348
00:18:03,951 --> 0:18:06,119
但它有点太过于水平了

349
00:18:06,553 --> 0:18:08,722
我们通过将主视图的

350
00:18:08,789 --> 0:18:11,992
来垂直地排列这些类别

351
00:18:19,132 --> 0:18:23,103
接下来 在行的HStack周围

352
00:18:31,879 --> 0:18:32,913
我们来运行一下

353
00:18:40,654 --> 0:18:42,990
这感觉很棒

354
00:18:43,390 --> 0:18:46,593
在不同类别和在一个类别中的

355
00:18:46,894 --> 0:18:50,163
地标之间来回浏览

356
00:18:51,398 --> 0:18:54,001
最后 我们来看一下详情页面

357
00:18:55,602 --> 0:18:59,173
这个好看的无边框地标图片

358
00:18:59,239 --> 0:19:00,707
如果没有被高密度的文字遮挡

359
00:18:59,239 --> 0:19:00,707
如果没有被高密度的文字遮挡

360
00:19:00,774 --> 0:19:03,710
会更加好看

361
00:19:04,311 --> 0:19:07,281
我们来看看如何为

362
00:19:09,082 --> 0:19:11,051
我们先看一下详情页面

363
00:19:12,119 --> 0:19:13,420
这是一个非常简单的视图

364
00:19:13,854 --> 0:19:16,990
我们有一个展示了地标图片的背景

365
00:19:17,391 --> 0:19:20,594
一个最爱按钮和一些历史详情介绍

366
00:19:21,461 --> 0:19:23,764
我们来试着展示游览详情介绍

367
00:19:24,464 --> 0:19:25,666
最后试一下

368
00:19:33,507 --> 0:19:35,509
它看上去好多了

369
00:19:35,843 --> 0:19:40,180
只展现了有着美观大字体

370
00:19:40,247 --> 0:19:42,482
我们能在房间里轻松观看阅读

371
00:19:43,417 --> 0:19:45,853
我们可以标记一些地标为最爱

372
00:19:45,919 --> 0:19:50,057
方便我们在macOS的

373
00:19:52,492 --> 0:19:54,061
现在 有请Jeff回到舞台

374
00:19:57,197 --> 0:19:58,065
谢谢Ada

375
00:19:58,799 --> 0:20:02,903
我很喜欢Ada美观的

376
00:19:58,799 --> 0:20:02,903
我很喜欢Ada美观的

377
00:20:03,270 --> 0:20:06,006
只需将她已有的一些内容重新布局

378
00:20:06,073 --> 0:20:09,076
就让我感觉像是

379
00:20:09,142 --> 0:20:11,778
我认为这充分展示了框架的强大

380
00:20:12,446 --> 0:20:14,681
那么现在我们来看看macOS

381
00:20:15,349 --> 0:20:18,285
创建一个好的Mac app需要

382
00:20:18,352 --> 0:20:20,787
如果可能的话

383
00:20:21,054 --> 0:20:23,357
但我只会介绍SwiftUI

384
00:20:23,423 --> 0:20:25,359
能帮你的几个关键部分

385
00:20:25,859 --> 0:20:28,996
高信息密度 多窗口支持

386
00:20:29,296 --> 0:20:32,766
键盘捷径和

387
00:20:34,468 --> 0:20:36,737
我们从高信息密度开始介绍

388
00:20:36,803 --> 0:20:39,239
（高信息密度）

389
00:20:39,306 --> 0:20:42,342
我们一般在Mac上会开很多窗口

390
00:20:42,409 --> 0:20:45,646
所以我们可以使用它

391
00:20:46,113 --> 0:20:48,882
如果你在一个地方有所有的信息

392
00:20:48,949 --> 0:20:50,017
那会让我们更容易做出

393
00:20:50,083 --> 0:20:52,886
好决定和更好的对比

394
00:20:54,855 --> 0:20:57,357
因为我们在Mac上有一个精确地

395
00:20:57,724 --> 0:21:01,028
我们能容忍更小的

396
00:20:57,724 --> 0:21:01,028
我们能容忍更小的

397
00:21:01,361 --> 0:21:04,331
但那并不意味着你的app看上去

398
00:21:04,398 --> 0:21:07,234
但它代表你能在一个地方

399
00:21:07,301 --> 0:21:09,169
为你的内容留出更多空间

400
00:21:11,004 --> 0:21:11,839
以及

401
00:21:12,272 --> 0:21:14,875
如果你有文字内容的话

402
00:21:14,942 --> 0:21:16,410
Mac适用于阅读大量文字内容

403
00:21:17,277 --> 0:21:20,447
所以 app会话时长

404
00:21:20,514 --> 0:21:22,816
你通常需要坐下来使用它

405
00:21:22,883 --> 0:21:24,751
一些文字内容是非常舒适的

406
00:21:27,321 --> 0:21:30,991
现在SwiftUI自动地为Mac

407
00:21:31,058 --> 0:21:33,827
调整了元素之间的合适间距和填充

408
00:21:35,128 --> 0:21:35,963
以及

409
00:21:36,363 --> 0:21:38,198
你可以使用controlSize

410
00:21:38,265 --> 0:21:40,501
在macOS系统中

411
00:21:40,567 --> 0:21:42,769
来进行小且迷你的尺寸控制

412
00:21:43,103 --> 0:21:46,106
如果你想要使用更小的控制器

413
00:21:46,373 --> 0:21:47,708
来创建一完整的检查器会很好

414
00:21:50,644 --> 0:21:52,012
接下来 多窗口

415
00:21:52,646 --> 0:21:56,350
多年以前 多窗口已经就是

416
00:21:57,251 --> 0:21:59,086
用户喜欢使用多窗口

417
00:21:59,152 --> 0:22:01,288
他们喜欢同时使用多个窗口

418
00:21:59,152 --> 0:22:01,288
他们喜欢同时使用多个窗口

419
00:22:01,355 --> 0:22:02,956
来比较内容

420
00:22:04,491 --> 0:22:08,262
将单个物件拖出来成为

421
00:22:08,328 --> 0:22:10,030
这样你就能专注于它的细节内容了

422
00:22:11,598 --> 0:22:14,368
许多用户喜欢在他们的桌面和空间

423
00:22:14,434 --> 0:22:16,537
管理他们的窗口的空间大小

424
00:22:16,603 --> 0:22:18,539
如果你支持多窗口的话

425
00:22:18,605 --> 0:22:20,174
你就能解锁这些功能

426
00:22:20,607 --> 0:22:22,442
SwiftUI让一切

427
00:22:22,509 --> 0:22:24,478
我会向你展示一个例子的一小部分

428
00:22:26,947 --> 0:22:27,881
（键盘捷径）

429
00:22:27,948 --> 0:22:29,583
接下来 键盘捷径

430
00:22:30,584 --> 0:22:33,720
键盘捷径是MacUI重要的一部分

431
00:22:33,787 --> 0:22:37,791
Mac用户 特别是高级用户喜欢

432
00:22:37,858 --> 0:22:39,459
来操纵控制一般的命令

433
00:22:39,526 --> 0:22:41,828
或只是在你的app的

434
00:22:42,863 --> 0:22:45,632
在SwiftUI中

435
00:22:45,699 --> 0:22:47,034
我来给你展示一个例子

436
00:22:48,001 --> 0:22:49,636
我们有一个标签视图

437
00:22:49,703 --> 0:22:52,673
我们有三个标签“explore”

438
00:22:53,207 --> 0:22:55,375
我们要做的是将这几个标签

439
00:22:55,442 --> 0:22:57,244
绑定至命令一 二 三

440
00:22:57,311 --> 0:22:59,479
这样我们就能快速切换它们

441
00:23:00,480 --> 0:23:02,783
现在 当我们想要在Mac上设置

442
00:23:02,850 --> 0:23:05,786
我们要去的一个地方是

443
00:23:06,320 --> 0:23:09,122
我们想要在Mac的菜单栏添加

444
00:23:09,189 --> 0:23:11,158
因为它让它们更容易被发现

445
00:23:11,225 --> 0:23:14,094
它确保了我们在这里匹配的动作行为

446
00:23:14,161 --> 0:23:17,364
也是可以用鼠标操作的

447
00:23:18,599 --> 0:23:19,766
现在你可以在代码中实现它

448
00:23:19,833 --> 0:23:22,302
我已经在Storyboard中

449
00:23:23,103 --> 0:23:24,104
接下来 我完成的是

450
00:23:24,471 --> 0:23:27,608
为这些键盘捷径的每一个都

451
00:23:27,674 --> 0:23:31,578
一条命令就是一条能通过

452
00:23:31,645 --> 0:23:34,548
发送的命令名字

453
00:23:35,048 --> 0:23:39,152
我们可以使用它们来包装选择器

454
00:23:42,256 --> 0:23:43,357
总结一下

455
00:23:43,857 --> 0:23:46,627
我们所要做的只是

456
00:23:46,693 --> 0:23:49,129
的onCommand修饰符

457
00:23:50,297 --> 0:23:53,600
当前情况下

458
00:23:53,667 --> 0:23:56,603
当命令出现时 这段代码就会执行

459
00:23:57,905 --> 0:24:00,107
在这里 我们设置了我们标签

460
00:23:57,905 --> 0:24:00,107
在这里 我们设置了我们标签

461
00:24:00,174 --> 0:24:02,109
selectedTab变量

462
00:24:02,509 --> 0:24:05,779
所以当我们使用这些命令中的一个时

463
00:24:05,846 --> 0:24:08,882
标签视图也会收到通知更新它自己

464
00:24:12,586 --> 0:24:15,455
如果你想了解关于

465
00:24:15,522 --> 0:24:17,624
和像这样的其他系统级

466
00:24:17,691 --> 0:24:19,593
你可以参加今年的

467
00:24:19,660 --> 0:24:20,594
集成SwiftUI演讲

468
00:24:22,629 --> 0:24:24,198
最后 是触控栏

469
00:24:25,265 --> 0:24:28,135
触控栏是另一个在你的Mac上

470
00:24:28,202 --> 0:24:29,169
快速执行命令的方式

471
00:24:29,636 --> 0:24:31,738
它为你的指尖

472
00:24:32,072 --> 0:24:33,674
带来了最常用的上下文行为操作

473
00:24:35,108 --> 0:24:38,145
现在SwiftUI中支持触控栏

474
00:24:39,279 --> 0:24:40,414
我会给你展示一个例子

475
00:24:40,948 --> 0:24:42,482
我们在代码中定义一个触控栏

476
00:24:42,850 --> 0:24:45,719
接下来 就像我们我们创建一个列表

477
00:24:46,119 --> 0:24:49,223
我们只需在TouchBar中

478
00:24:50,557 --> 0:24:55,896
当我们想要将它添加到一个视图时

479
00:24:56,730 --> 0:24:58,832
将它传给

480
00:24:59,466 --> 0:25:00,467
就这么简单

481
00:24:59,466 --> 0:25:00,467
就这么简单

482
00:25:01,034 --> 0:25:02,803
无论这个视图是否被选中

483
00:25:02,870 --> 0:25:05,005
或是选中视图的最近的祖先视图

484
00:25:05,072 --> 0:25:07,374
触控栏硬件上会出现这些控制

485
00:25:10,344 --> 0:25:11,712
现在 我们回到我们的示例

486
00:25:11,778 --> 0:25:15,015
我们在macOS的Landmarks

487
00:25:15,082 --> 0:25:18,852
（演示）

488
00:25:18,919 --> 0:25:20,521
好的 我们现在在Xcode中

489
00:25:21,588 --> 0:25:23,457
我们来构建运行一下macOS

490
00:25:23,524 --> 0:25:24,791
这样我们就能知道怎么开始了

491
00:25:27,628 --> 0:25:28,462
好

492
00:25:29,463 --> 0:25:31,965
我们这里有一个

493
00:25:32,399 --> 0:25:35,936
我们的左边有一个地标列表

494
00:25:37,304 --> 0:25:41,708
我们添加了一些过滤控制

495
00:25:41,775 --> 0:25:43,844
或是只选择看我们的最爱

496
00:25:45,312 --> 0:25:46,880
现在 最有条理的是

497
00:25:46,947 --> 0:25:49,349
左边的列表

498
00:25:49,416 --> 0:25:52,586
实际上是我完全从iOS上

499
00:25:52,886 --> 0:25:53,720
相当好

500
00:25:53,787 --> 0:25:56,156
它给了我开始创建这个app

501
00:25:56,490 --> 0:25:58,258
我并不需要做任何适配

502
00:25:58,325 --> 0:26:00,093
我不需要为它匹配一个新的数据源

503
00:25:58,325 --> 0:26:00,093
我不需要为它匹配一个新的数据源

504
00:26:00,160 --> 0:26:02,429
或代理协议 或其他类似的事情

505
00:26:02,496 --> 0:26:03,697
我什么都没有做就获取了这些

506
00:26:05,065 --> 0:26:08,101
但我觉得这个列表在Mac上

507
00:26:08,569 --> 0:26:11,371
我希望我可以在滚动视图中看到

508
00:26:11,438 --> 0:26:13,807
我想要在每一行获取更多的细节

509
00:26:16,276 --> 0:26:18,178
我们从这个是如何定义的

510
00:26:20,047 --> 0:26:21,215
在我们的地标清单

511
00:26:21,715 --> 0:26:24,484
我已经定义了一个

512
00:26:24,551 --> 0:26:27,087
包装这个landmarkList

513
00:26:27,154 --> 0:26:28,488
我之前介绍过

514
00:26:29,489 --> 0:26:31,625
为我们的项目实现

515
00:26:31,692 --> 0:26:34,127
因为它让我还是可以

516
00:26:34,194 --> 0:26:35,662
使用这个列表的大部分功能

517
00:26:35,729 --> 0:26:38,832
但我也可以为我的Mac

518
00:26:40,334 --> 0:26:42,336
我们继续来看它是如何被定义的

519
00:26:43,704 --> 0:26:46,740
我们有一些描述了

520
00:26:46,807 --> 0:26:48,742
配置的过滤标准

521
00:26:49,209 --> 0:26:51,345
我们有一个绑定了被选择的地标列表

522
00:26:51,411 --> 0:26:53,614
这样我们就可以查看

523
00:26:54,114 --> 0:26:57,451
我们有一些用户数据 这样我们就

524
00:26:58,819 --> 0:26:59,820
这个列表相当简单

525
00:26:59,887 --> 0:27:01,788
你之前一定见过它很多次了

526
00:26:59,887 --> 0:27:01,788
你之前一定见过它很多次了

527
00:27:01,855 --> 0:27:02,756
我们有一个列表

528
00:27:03,123 --> 0:27:06,293
我们使用forEach

529
00:27:06,760 --> 0:27:09,029
接下来 我们为每一个

530
00:27:10,497 --> 0:27:12,666
这是一个硬编码类型

531
00:27:13,033 --> 0:27:15,035
这是我们正在使用的行类型

532
00:27:15,636 --> 0:27:18,805
现在 我们可以开始做一些

533
00:27:18,872 --> 0:27:22,376
使用每一个OS交换地标

534
00:27:22,442 --> 0:27:24,378
但 我很不想用诡异的方式

535
00:27:24,444 --> 0:27:26,780
我想要创建一个可以复用的工具

536
00:27:27,748 --> 0:27:29,416
我来向你展示我接下来如何实现

537
00:27:34,454 --> 0:27:35,756
那么 我会

538
00:27:38,258 --> 0:27:39,660
重新定义这个列表

539
00:27:43,697 --> 0:27:44,765
让它成为我们将要使用的

540
00:27:44,831 --> 0:27:46,967
地标行的通用类

541
00:27:49,102 --> 0:27:49,937
接下来

542
00:27:51,205 --> 0:27:52,472
我会添加一个属性

543
00:27:56,476 --> 0:27:58,812
它是地标的一个闭包

544
00:27:59,646 --> 0:28:02,149
是我们刚才定义行的类型

545
00:27:59,646 --> 0:28:02,149
是我们刚才定义行的类型

546
00:28:04,451 --> 0:28:07,421
接下来 取代硬编码的方式

547
00:28:07,487 --> 0:28:09,256
我将委托

548
00:28:11,358 --> 0:28:13,760
行的创建到我的块中

549
00:28:16,363 --> 0:28:18,765
现在 为了在我的Mac的

550
00:28:19,132 --> 0:28:20,100
我要做的是

551
00:28:20,834 --> 0:28:24,171
在这里更新我的类定义

552
00:28:26,139 --> 0:28:28,609
添加我刚声明过的闭包

553
00:28:30,777 --> 0:28:32,846
和返回一个行类型

554
00:28:34,948 --> 0:28:38,552
幸运的是 像其他好的TV示例一样

555
00:28:38,619 --> 0:28:40,053
那么 我们就用它

556
00:28:44,024 --> 0:28:46,326
我们来看一下现在是什么样子

557
00:28:49,530 --> 0:28:50,664
现在更棒了

558
00:28:51,198 --> 0:28:53,100
我的行比之前更紧密了

559
00:28:53,166 --> 0:28:55,169
我为每一个添加了更多的信息

560
00:28:55,235 --> 0:28:57,804
我能一眼看到哪一个被标为了最爱

561
00:28:58,639 --> 0:28:59,640
非常好

562
00:29:00,307 --> 0:29:02,576
最棒的是我的列表的实践

563
00:29:02,643 --> 0:29:04,211
还是分享公用的

564
00:29:04,478 --> 0:29:09,650
所以 如果我已经有高级过滤

565
00:29:09,950 --> 0:29:11,818
或更棒的

566
00:29:11,885 --> 0:29:14,688
比如我有一些异步的数据

567
00:29:14,755 --> 0:29:15,856
或网络操作

568
00:29:15,923 --> 0:29:18,659
你知道的 我只想写一次代码

569
00:29:18,725 --> 0:29:19,660
现在 我们能做到了

570
00:29:19,960 --> 0:29:22,563
我们无需向原有的设计妥协

571
00:29:24,831 --> 0:29:26,266
接下来 我想要做的是

572
00:29:26,333 --> 0:29:29,670
双击其中的一行来打开它自己的窗口

573
00:29:30,404 --> 0:29:32,840
这非常简单 我告诉你怎么做

574
00:29:33,507 --> 0:29:36,476
首先 我们需要创建一个窗口

575
00:29:36,543 --> 0:29:37,544
在Mac上

576
00:29:37,611 --> 0:29:40,147
甚至当我们使用SwiftUI定义

577
00:29:40,214 --> 0:29:42,449
我们还是要使用AppKit来

578
00:29:45,352 --> 0:29:47,120
现在 我可以

579
00:29:47,187 --> 0:29:50,224
不过 代码也很短

580
00:29:50,858 --> 0:29:52,759
我们有一个窗口控制器

581
00:29:53,493 --> 0:29:55,395
接下来 我定义了一个

582
00:29:55,462 --> 0:29:56,864
它需要一个SwiftUI视图

583
00:29:57,631 --> 0:29:59,333
将它放入一个

584
00:29:59,833 --> 0:30:02,402
接下来 创建一个环绕

585
00:29:59,833 --> 0:30:02,402
接下来 创建一个环绕

586
00:30:03,770 --> 0:30:06,173
我也在这里写了便捷代码

587
00:30:06,240 --> 0:30:10,043
它用来追踪已有的地标所属的窗口

588
00:30:10,110 --> 0:30:12,880
如果我双击已有窗口的一行

589
00:30:12,946 --> 0:30:17,017
它会将已有的窗口挪到前面

590
00:30:20,120 --> 0:30:22,589
我们回到我们的列表来集成这个

591
00:30:23,524 --> 0:30:24,358
那么

592
00:30:26,927 --> 0:30:27,828
细节

593
00:30:29,563 --> 0:30:30,831
我们添加一个快速

594
00:30:32,032 --> 0:30:33,166
方便的方法

595
00:30:38,605 --> 0:30:39,439
分享

596
00:30:40,674 --> 0:30:43,076
为一个已有的地标展示一个窗口

597
00:30:44,244 --> 0:30:45,846
接下来 绑定到一行

598
00:30:46,313 --> 0:30:49,216
我可以只添加一个两次点击的行为

599
00:30:49,283 --> 0:30:51,518
因为我只想识别双击

600
00:30:53,086 --> 0:30:53,921
接下来

601
00:30:54,488 --> 0:30:55,622
在这个tapAction中

602
00:30:55,889 --> 0:30:58,025
我为landmark调用

603
00:31:06,800 --> 0:31:09,236
现在 当我双击我的行

604
00:31:10,704 --> 0:31:12,539
我就能单独为它们打开它们自己的

605
00:31:12,606 --> 0:31:14,975
我可以将它们放在一边

606
00:31:15,342 --> 0:31:17,277
因为这些都还是AppKit窗口

607
00:31:17,344 --> 0:31:19,746
我能使用所有内置的窗口功能

608
00:31:19,813 --> 0:31:21,982
比如我喜欢标签

609
00:31:22,049 --> 0:31:22,950
就像这样

610
00:31:23,016 --> 0:31:25,652
我毫不费力实现了 很棒

611
00:31:31,458 --> 0:31:33,327
我觉得Mac版本的app

612
00:31:33,393 --> 0:31:35,829
开始变得好看了

613
00:31:35,896 --> 0:31:37,431
回到我们的幻灯片

614
00:31:37,497 --> 0:31:38,332
（演示）

615
00:31:38,699 --> 0:31:42,202
现在 我们了解了AppleTV

616
00:31:43,303 --> 0:31:45,172
下面我们来看

617
00:31:45,506 --> 0:31:47,808
SwiftUI是第一个为

618
00:31:47,875 --> 0:31:49,109
创建app设计的完全原生的框架

619
00:31:49,176 --> 0:31:52,946
我认为它会带来更多的可能性

620
00:31:53,013 --> 0:31:55,349
以及带我们认识到这些可能性

621
00:31:55,415 --> 0:31:57,284
我想有请我的同事Meghna

622
00:31:57,351 --> 0:32:00,988
（Apple Watch上的

623
00:31:57,351 --> 0:32:00,988
（Apple Watch上的

624
00:32:01,054 --> 0:32:01,922
谢谢

625
00:32:06,793 --> 0:32:07,895
谢谢Jeff

626
00:32:08,362 --> 0:32:12,332
你已经看到了使用SwiftUI

627
00:32:12,399 --> 0:32:14,868
你一定能按照步骤创建一个

628
00:32:14,935 --> 0:32:18,438
在所有平台都体验很棒的app

629
00:32:18,939 --> 0:32:22,042
大家好 我是Meghna

630
00:32:22,109 --> 0:32:25,512
如何为你的Apple Watch app

631
00:32:27,314 --> 0:32:30,617
你的用户体验可能基于你的app

632
00:32:30,884 --> 0:32:33,654
在watchOS上的体验更是如此

633
00:32:34,955 --> 0:32:39,159
并发、Siri捷径和通知

634
00:32:39,226 --> 0:32:42,162
都用来在你的

635
00:32:42,229 --> 0:32:44,498
屏幕上展示实时信息

636
00:32:45,299 --> 0:32:49,336
Apple Watch为在正确的

637
00:32:50,103 --> 0:32:51,939
本次演讲的目的

638
00:32:52,005 --> 0:32:54,908
我会重点介绍app与通知

639
00:32:55,576 --> 0:32:56,677
（watchOS app）

640
00:32:56,743 --> 0:32:58,946
我们以SwiftUI是如何允许你

641
00:32:59,012 --> 0:33:02,516
展示元素以及布局你app的UI

642
00:32:59,012 --> 0:33:02,516
展示元素以及布局你app的UI

643
00:33:02,583 --> 0:33:04,117
这是前所未有的

644
00:33:04,184 --> 0:33:05,018
（3次或更少点击）

645
00:33:05,085 --> 0:33:06,587
首先 最重要的第一件事

646
00:33:07,321 --> 0:33:10,390
在设计Apple Watch

647
00:33:10,657 --> 0:33:14,695
使用2次或3次点击就能

648
00:33:14,761 --> 0:33:17,297
获取到最重要的信息或关键操作

649
00:33:18,098 --> 0:33:19,933
在设计用户体验时

650
00:33:20,000 --> 0:33:23,237
目标并不是缩减你iPhone上

651
00:33:23,303 --> 0:33:26,340
而是在你的手腕上

652
00:33:26,406 --> 0:33:28,041
带来最实时和相关的内容操作

653
00:33:28,809 --> 0:33:29,643
（watchOS app）

654
00:33:29,710 --> 0:33:33,280
那么 我们来深入了解一些

655
00:33:33,981 --> 0:33:36,984
如果你的内容会超出全屏的边界

656
00:33:37,251 --> 0:33:39,887
你可以使用SwiftUI的

657
00:33:41,421 --> 0:33:46,126
SwiftUI也为你带来了这个很好用的

658
00:33:46,193 --> 0:33:49,496
它让你能完全控制旋转和触感

659
00:33:49,997 --> 0:33:54,334
这个API也为数码表冠

660
00:33:54,401 --> 0:33:57,571
带来了修改界面元素的全新方式

661
00:33:57,638 --> 0:34:00,274
这是前所未有的功能

662
00:33:57,638 --> 0:34:00,274
这是前所未有的功能

663
00:34:02,309 --> 0:34:05,879
你可能也熟悉WatchKit

664
00:34:06,280 --> 0:34:09,416
SwiftUI现在提供了

665
00:34:09,483 --> 0:34:13,487
来通过水平和垂直的堆栈

666
00:34:14,588 --> 0:34:17,524
使用列表和列表部分

667
00:34:17,591 --> 0:34:20,293
展示列表信息比之前更简单了

668
00:34:21,261 --> 0:34:22,496
（可交互的通知）

669
00:34:22,563 --> 0:34:26,199
最后 了解你的用户

670
00:34:26,266 --> 0:34:27,701
在你的Apple Watch

671
00:34:28,001 --> 0:34:30,938
会帮你判断决定在屏幕展示

672
00:34:31,271 --> 0:34:34,074
使用SwiftUI提供的

673
00:34:34,141 --> 0:34:35,775
首先 你能轻易地创建一个

674
00:34:35,842 --> 0:34:38,645
展示最重要的信息的界面

675
00:34:40,112 --> 0:34:43,884
通知是更新实时消息的最好方式

676
00:34:44,318 --> 0:34:48,554
然而 如果展示了过多的

677
00:34:48,621 --> 0:34:51,024
用户可能就会直接关掉你的app

678
00:34:52,359 --> 0:34:56,196
SwiftUI为你提供了便捷

679
00:34:56,263 --> 0:34:57,698
有利的控制器

680
00:34:57,998 --> 0:35:03,270
这样用户就能在你的app中回复

681
00:34:57,998 --> 0:35:03,270
这样用户就能在你的app中回复

682
00:35:03,971 --> 0:35:07,207
让你的通知变得可操作

683
00:35:07,274 --> 0:35:10,077
你可以让用户快速回复

684
00:35:12,646 --> 0:35:15,749
你发送通知的时机和

685
00:35:15,816 --> 0:35:17,317
你发送的内容同样重要

686
00:35:17,818 --> 0:35:20,821
试着了解你的用户使用你的app时

687
00:35:21,121 --> 0:35:23,390
发送你能提供的可发送的信息

688
00:35:23,457 --> 0:35:26,660
在最合适的时机发送实时消息

689
00:35:27,027 --> 0:35:28,662
（为Apple Watch设计的

690
00:35:28,729 --> 0:35:32,633
利用全新强大的SwiftUI概念

691
00:35:32,699 --> 0:35:35,035
怎样的用户体验是优秀的

692
00:35:35,302 --> 0:35:36,937
我们来看一下添加了一些概念后的

693
00:35:37,004 --> 0:35:39,339
Landmarks app

694
00:35:41,241 --> 0:35:45,579
使用SwiftUI

695
00:35:45,646 --> 0:35:47,648
你会有一个有用的

696
00:35:48,081 --> 0:35:51,485
不过 它并不代表这会是

697
00:35:51,985 --> 0:35:54,888
我将会为你展示如何稍微调整和更新

698
00:35:55,789 --> 0:35:58,091
这样你的app在手腕上

699
00:35:58,158 --> 0:35:59,626
会有更好的用户体验

700
00:36:02,329 --> 0:36:06,533
那么 你这里看到的是

701
00:36:07,067 --> 0:36:08,368
为Watch上的

702
00:36:08,435 --> 0:36:11,305
我们自定义了详情单元格

703
00:36:13,006 --> 0:36:15,609
我们为一些上下文加入了一张图片

704
00:36:16,009 --> 0:36:17,711
我们加入了一些工具的细节

705
00:36:17,778 --> 0:36:20,581
我们也添加了一些联系功能

706
00:36:21,281 --> 0:36:23,717
其中的一些功能比如联系功能

707
00:36:23,784 --> 0:36:27,287
不需过多说明

708
00:36:27,354 --> 0:36:30,190
但它们在Apple Watch

709
00:36:32,693 --> 0:36:35,729
不过 这里还是有太多

710
00:36:36,063 --> 0:36:38,432
所以我们要做的是删减它

711
00:36:38,498 --> 0:36:40,000
只展示我们的最爱

712
00:36:40,467 --> 0:36:43,403
为了实现 我们创建一个

713
00:36:44,638 --> 0:36:46,740
虽然我们已经减少了内容

714
00:36:46,807 --> 0:36:51,278
我们也想要我们的用户能有机会看到

715
00:36:52,045 --> 0:36:54,481
添加这个按钮就能实现

716
00:36:55,115 --> 0:36:57,985
这个按钮简单地基于你当前的视图

717
00:36:58,051 --> 0:37:01,221
最爱之间切换

718
00:36:58,051 --> 0:37:01,221
最爱之间切换

719
00:37:02,055 --> 0:37:04,358
SwiftUI为你的app提供了

720
00:37:04,424 --> 0:37:06,960
选择你感兴趣的内容

721
00:37:07,027 --> 0:37:10,664
以及为你的app

722
00:37:13,300 --> 0:37:17,504
我们想要专注于我们当前滚动时

723
00:37:18,172 --> 0:37:22,476
使用SwiftUI 我们可以用

724
00:37:23,243 --> 0:37:26,947
当你单元格比较少或

725
00:37:27,214 --> 0:37:30,083
这个列表样式会非常适用

726
00:37:30,584 --> 0:37:35,956
这里 我们的单元格有联系方式

727
00:37:36,456 --> 0:37:39,059
从最爱列表里添加和移除地标

728
00:37:39,126 --> 0:37:42,162
以及一些导航功能

729
00:37:42,763 --> 0:37:44,698
（可以交互的通知）

730
00:37:44,765 --> 0:37:46,800
最后 通知

731
00:37:47,267 --> 0:37:48,702
当一个新的旅行被添加时

732
00:37:48,769 --> 0:37:51,538
我们想要在

733
00:37:51,972 --> 0:37:54,842
我们想要加入一些图片

734
00:37:54,908 --> 0:37:56,677
你是否对这个旅行感兴趣

735
00:37:56,977 --> 0:38:01,114
你也能在通知中预订它

736
00:37:56,977 --> 0:38:01,114
你也能在通知中预订它

737
00:38:02,115 --> 0:38:03,784
利用Swift的强大功能

738
00:38:04,151 --> 0:38:07,254
你不仅有文本信息

739
00:38:07,321 --> 0:38:11,525
你也有这个美丽的

740
00:38:12,326 --> 0:38:16,330
我想要向你展示我们是如何创建的

741
00:38:24,338 --> 0:38:26,673
你看到的是我为一则新的通知

742
00:38:27,608 --> 0:38:30,477
创建的一个结构体

743
00:38:31,044 --> 0:38:34,281
现在 我已经关联了

744
00:38:34,348 --> 0:38:36,049
这则通知到我的通知控制器

745
00:38:36,483 --> 0:38:39,786
这意味着你看到的主体的内容

746
00:38:39,853 --> 0:38:43,090
就是我运行这个计划之后

747
00:38:44,358 --> 0:38:47,461
这个结构体将一个地标作为一个参数

748
00:38:47,895 --> 0:38:50,631
通知将要合适地传递它

749
00:38:52,466 --> 0:38:54,735
接下来

750
00:38:56,069 --> 0:38:56,970
我们来加入一些文字

751
00:39:08,415 --> 0:39:10,050
好的 我们在这创建了

752
00:39:10,684 --> 0:39:12,419
一个包含了

753
00:39:13,253 --> 0:39:15,322
一些文本信息堆栈

754
00:39:15,789 --> 0:39:17,424
我在这使用一个堆栈的原因只是

755
00:39:17,491 --> 0:39:20,360
因为我将在这里面

756
00:39:29,603 --> 0:39:32,372
在这里 我们创建了一个结构体

757
00:39:32,439 --> 0:39:34,808
它存储了一个字符串数组

758
00:39:35,142 --> 0:39:37,077
这些字符是图片的名字

759
00:39:40,314 --> 0:39:42,850
我们有一个

760
00:39:42,916 --> 0:39:47,154
它用来追踪你当前看的是

761
00:39:49,289 --> 0:39:53,193
我创建的TourImage是一个

762
00:39:53,627 --> 0:39:55,162
它存储图片的名字

763
00:39:55,562 --> 0:39:58,632
它会在我的app里将图片排列整齐

764
00:39:59,633 --> 0:40:03,203
我们来看一下在预览中是什么样子

765
00:39:59,633 --> 0:40:03,203
我们来看一下在预览中是什么样子

766
00:40:17,451 --> 0:40:20,587
接下来 我要在这里添加的是

767
00:40:22,456 --> 0:40:24,825
每个图片的ID

768
00:40:25,192 --> 0:40:27,194
我们让它展示动画效果的方式

769
00:40:27,261 --> 0:40:30,731
我们会关注哪一个视图需要被插入

770
00:40:30,797 --> 0:40:32,666
哪一个视图需要被移除

771
00:40:39,039 --> 0:40:42,409
它现在是这样

772
00:40:42,476 --> 0:40:44,378
它现在是这样 我们继续

773
00:40:44,444 --> 0:40:48,382
在我们通知主体里添加这个

774
00:40:50,918 --> 0:40:54,688
好的 当它更新完成后

775
00:40:54,755 --> 0:40:56,023
这看上去很棒

776
00:40:56,890 --> 0:40:58,225
就像我们之前聊过的

777
00:40:58,292 --> 0:41:01,595
我们应该能够在这个结构体里支持

778
00:40:58,292 --> 0:41:01,595
我们应该能够在这个结构体里支持

779
00:41:01,995 --> 0:41:05,699
所以 我们需要计算下一张的序列号

780
00:41:06,700 --> 0:41:08,468
我们来实现它

781
00:41:10,838 --> 0:41:13,941
现在 我在这简单地计算了

782
00:41:14,308 --> 0:41:16,577
我更新了当前的序列号

783
00:41:17,678 --> 0:41:20,547
我还想将改动添加动画效果

784
00:41:23,016 --> 0:41:27,688
每次当我的当前序列号改变时

785
00:41:27,754 --> 0:41:31,091
它会展示fluidString的

786
00:41:34,194 --> 0:41:36,029
现在 我们将它创建完了

787
00:41:36,096 --> 0:41:38,699
但我们还没有将它关联到其他物件

788
00:41:41,001 --> 0:41:43,370
在我们的Zstack

789
00:41:43,437 --> 0:41:46,006
间隔一段时间后

790
00:41:46,073 --> 0:41:49,676
我们想要切换到下一张图片

791
00:41:52,279 --> 0:41:57,251
所以 我在一个视图上创建了

792
00:41:58,318 --> 0:42:00,654
展示下一张图片是一个简单

793
00:41:58,318 --> 0:42:00,654
展示下一张图片是一个简单

794
00:42:00,721 --> 0:42:05,325
它具备了一个两秒钟的定时器

795
00:42:05,893 --> 0:42:08,295
每两秒后 它会切换到下一张图片

796
00:42:11,131 --> 0:42:15,836
现在 我要添加的最后一件事是这个

797
00:42:17,137 --> 0:42:20,207
就是这里简单的命令

798
00:42:22,709 --> 0:42:25,312
好的 我们来看一下效果

799
00:42:42,696 --> 0:42:45,799
好的 我们滑动这些图片

800
00:42:46,200 --> 0:42:50,370
我们之前为通知控制器关联了一些

801
00:42:51,505 --> 0:42:52,506
如你所见

802
00:42:53,907 --> 0:42:54,741
谢谢

803
00:42:58,078 --> 0:43:00,647
如你所见 只需小小的改动

804
00:42:58,078 --> 0:43:00,647
如你所见 只需小小的改动

805
00:43:00,714 --> 0:43:04,151
我们就创建了这个美丽丰富的消息

806
00:43:04,418 --> 0:43:07,888
这是watchOS之前

807
00:43:08,455 --> 0:43:10,424
我们有请Jeff回到舞台

808
00:43:16,897 --> 0:43:18,165
好的 谢谢Meghna

809
00:43:18,699 --> 0:43:21,668
通知里的这些丰富的上下文交互行为

810
00:43:21,735 --> 0:43:24,171
非常酷

811
00:43:24,605 --> 0:43:26,740
我认为SwiftUI将会

812
00:43:26,807 --> 0:43:28,809
为watchOS带来更多的可能性

813
00:43:30,644 --> 0:43:32,579
现在 经过短暂的旅途

814
00:43:32,646 --> 0:43:37,818
我们来回顾和总结一下今天的演讲

815
00:43:39,319 --> 0:43:40,821
首先 当我们思考

816
00:43:40,888 --> 0:43:43,557
为一台设备设计一个app时

817
00:43:43,857 --> 0:43:45,792
首先是设计

818
00:43:46,193 --> 0:43:48,228
这并不意味着我有了代码

819
00:43:48,295 --> 0:43:50,397
我要试着让它在这里运行

820
00:43:50,764 --> 0:43:52,799
思考我的app应该怎样

821
00:43:52,866 --> 0:43:56,303
以及这里开始的逆向工作

822
00:43:56,370 --> 0:43:58,872
（总结）

823
00:43:58,939 --> 0:44:01,308
不过 你有时可以分享一些代码

824
00:43:58,939 --> 0:44:01,308
不过 你有时可以分享一些代码

825
00:44:01,642 --> 0:44:05,879
比如 我们虽然没有明确指出

826
00:44:05,946 --> 0:44:07,948
都是很轻松地利用了模型代码

827
00:44:08,015 --> 0:44:10,984
每个目标中都被编制了

828
00:44:12,252 --> 0:44:14,755
你也可以分享视图代码

829
00:44:14,821 --> 0:44:17,291
你只需要使用时好好判断

830
00:44:17,624 --> 0:44:21,228
SwiftUI也能帮你简单地

831
00:44:21,295 --> 0:44:24,198
重构可多次使用的小组件

832
00:44:24,264 --> 0:44:27,067
它能合理地在多个设备上使用

833
00:44:29,136 --> 0:44:29,970
最后

834
00:44:30,737 --> 0:44:33,073
我们并不单单只是编写一次

835
00:44:33,407 --> 0:44:35,542
你要好好运用自己的头脑

836
00:44:35,843 --> 0:44:39,146
当你学过一次 你就能在多个

837
00:44:39,213 --> 0:44:40,981
我觉得那才是真正厉害

838
00:44:43,250 --> 0:44:44,918
一如既往 你能在网上看到这个演讲

839
00:44:44,985 --> 0:44:48,121
你可以重看视频和获取到相关资源

840
00:44:48,589 --> 0:44:49,723
谢谢你的聆听

841
00:44:49,790 --> 0:44:52,059
我们期待你使用SwiftUI

842
00:44:52,125 --> 0:44:53,227
（WWDC19）
