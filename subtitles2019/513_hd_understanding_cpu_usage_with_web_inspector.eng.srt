1
00:00:01,176 --> 0:00:04,500
[ Music ]

2
00:00:07,296 --> 0:00:08,966
&gt;&gt; Hello, I'm Jonathan Davis,

3
00:00:08,966 --> 0:00:10,626
Web Technologies Evangelist for

4
00:00:10,626 --> 0:00:12,196
the Safari and WebKit Teams.

5
00:00:12,686 --> 0:00:14,376
Welcome to "Understanding CPU

6
00:00:14,376 --> 0:00:15,976
Usage with Web Inspector."

7
00:00:17,666 --> 0:00:19,176
We all know that battery life is

8
00:00:19,176 --> 0:00:20,676
important to users, and you

9
00:00:20,676 --> 0:00:22,516
probably instinctively know the

10
00:00:22,516 --> 0:00:23,646
web browser is one of the

11
00:00:23,646 --> 0:00:25,726
most-used apps on our devices.

12
00:00:26,236 --> 0:00:28,686
But beyond that, web content is

13
00:00:28,686 --> 0:00:30,366
also incorporated into many

14
00:00:30,366 --> 0:00:32,616
popular iOS and macOS apps.

15
00:00:33,226 --> 0:00:34,626
That means web content

16
00:00:34,626 --> 0:00:36,276
significantly affects battery

17
00:00:36,276 --> 0:00:38,376
life for users, so making it

18
00:00:38,376 --> 0:00:39,736
power-efficient has a big

19
00:00:39,736 --> 0:00:40,246
impact.

20
00:00:41,346 --> 0:00:42,736
Safari and WebKit already

21
00:00:42,736 --> 0:00:43,706
provide features to

22
00:00:43,706 --> 0:00:45,226
automatically save power for

23
00:00:45,226 --> 0:00:47,096
users when possible, such as

24
00:00:47,096 --> 0:00:48,746
throttling timers when a webpage

25
00:00:48,746 --> 0:00:49,556
is in the background.

26
00:00:50,456 --> 0:00:51,896
And with support for content

27
00:00:51,896 --> 0:00:53,716
blocker extensions, users can

28
00:00:53,716 --> 0:00:55,156
automatically block loading

29
00:00:55,156 --> 0:00:56,646
unwanted content that's often

30
00:00:56,646 --> 0:00:58,006
just junk slowing down their

31
00:00:58,006 --> 0:00:59,886
browser, or worse, tracking

32
00:00:59,886 --> 0:00:59,976
them.

33
00:01:01,896 --> 0:01:03,316
But even with the built-in

34
00:01:03,316 --> 0:01:05,025
power-saving features in Safari,

35
00:01:05,275 --> 0:01:06,766
there's a lot left in the hands

36
00:01:06,766 --> 0:01:08,616
of web developers, so it's an

37
00:01:08,616 --> 0:01:10,126
opportunity for all of us to

38
00:01:10,126 --> 0:01:11,646
improve performance and build a

39
00:01:11,646 --> 0:01:13,566
power-efficient web for users.

40
00:01:14,786 --> 0:01:16,746
The good news is that everything

41
00:01:16,746 --> 0:01:18,376
you know about good performance

42
00:01:18,376 --> 0:01:20,796
practices on the web also apply

43
00:01:20,796 --> 0:01:22,466
as best practices for saving

44
00:01:22,466 --> 0:01:22,896
power.

45
00:01:23,486 --> 0:01:24,946
So all of the things we've heard

46
00:01:24,946 --> 0:01:26,716
about improving page load time,

47
00:01:27,166 --> 0:01:29,346
optimizing JavaScript, and using

48
00:01:29,346 --> 0:01:31,476
CSS animations and transitions

49
00:01:31,886 --> 0:01:33,496
really help with battery life.

50
00:01:34,606 --> 0:01:35,756
Whether you're experienced with

51
00:01:35,756 --> 0:01:36,976
all of the best practices for

52
00:01:36,976 --> 0:01:38,606
performance on the web, or just

53
00:01:38,606 --> 0:01:40,306
starting out, I'm going to show

54
00:01:40,306 --> 0:01:42,056
you a powerful new tool in Web

55
00:01:42,056 --> 0:01:43,546
Inspector that's going to give

56
00:01:43,546 --> 0:01:45,006
you super powers for finding

57
00:01:45,006 --> 0:01:45,996
where performance can be

58
00:01:45,996 --> 0:01:47,586
improved to save battery life.

59
00:01:48,426 --> 0:01:50,406
It's called the CPU Usage

60
00:01:50,406 --> 0:01:52,676
Timeline, and it's new in Web

61
00:01:52,676 --> 0:01:54,656
Inspector in Safari 13 for

62
00:01:54,656 --> 0:01:55,316
macOS.

63
00:01:55,826 --> 0:01:57,336
It provides a window into power

64
00:01:57,336 --> 0:01:58,906
use that makes it easy to see

65
00:01:58,906 --> 0:02:00,036
the impact of behaviors that

66
00:01:58,906 --> 0:02:00,036
the impact of behaviors that

67
00:02:00,036 --> 0:02:01,926
contribute to high CPU usage.

68
00:02:03,996 --> 0:02:05,556
Today, I'm going to show you how

69
00:02:05,556 --> 0:02:07,206
to work with the new CPU Usage

70
00:02:07,206 --> 0:02:09,526
Timeline, discover power issues

71
00:02:09,526 --> 0:02:11,846
through CPU Usage, and then I'll

72
00:02:11,846 --> 0:02:13,386
briefly go over some strategies

73
00:02:13,386 --> 0:02:14,906
for improving power savings in

74
00:02:14,906 --> 0:02:16,276
your web-based projects.

75
00:02:17,276 --> 0:02:18,536
Now, before you can use the new

76
00:02:18,536 --> 0:02:20,066
timeline, you'll need to enable

77
00:02:20,066 --> 0:02:21,616
the Develop menu to access Web

78
00:02:21,616 --> 0:02:22,156
Inspector.

79
00:02:23,946 --> 0:02:25,616
Just load up Safari Preferences,

80
00:02:25,936 --> 0:02:28,496
and click on Advanced, and click

81
00:02:28,496 --> 0:02:30,316
to enable to Show Develop menu

82
00:02:30,316 --> 0:02:31,506
in menu bar option.

83
00:02:33,256 --> 0:02:35,356
Now, just load up a webpage, and

84
00:02:35,356 --> 0:02:36,546
open Web Inspector from the

85
00:02:36,546 --> 0:02:39,136
Develop menu, or use the

86
00:02:39,136 --> 0:02:40,116
keyboard shortcut

87
00:02:40,116 --> 0:02:41,016
Command-Option-I.

88
00:02:41,256 --> 0:02:44,056
I'm going to use the new CPU

89
00:02:44,056 --> 0:02:45,936
Usage Timeline to look for where

90
00:02:45,936 --> 0:02:47,386
we can improve power on

91
00:02:47,386 --> 0:02:48,196
webkit.org.

92
00:02:48,326 --> 0:02:50,356
The homepage is pretty simple,

93
00:02:50,676 --> 0:02:51,826
but it should be interesting,

94
00:02:51,906 --> 0:02:52,806
because it still has some

95
00:02:52,806 --> 0:02:54,186
dynamic things happening, like

96
00:02:54,186 --> 0:02:55,676
this subtle logo animation in

97
00:02:55,676 --> 0:02:56,256
the background.

98
00:02:58,776 --> 0:03:00,646
With Web Inspector open, click

99
00:02:58,776 --> 0:03:00,646
With Web Inspector open, click

100
00:03:00,646 --> 0:03:02,036
over to the Timelines tab.

101
00:03:05,206 --> 0:03:06,676
In the upper left is a list of

102
00:03:06,676 --> 0:03:07,716
different timelines.

103
00:03:08,056 --> 0:03:08,786
There's a bunch of other

104
00:03:08,786 --> 0:03:10,246
timelines you can use, but the

105
00:03:10,246 --> 0:03:11,886
defaults will work great to look

106
00:03:11,886 --> 0:03:13,826
for ways to improve CPU usage.

107
00:03:16,236 --> 0:03:17,656
To start a recording, you can

108
00:03:17,656 --> 0:03:19,276
click the red Record button, or

109
00:03:19,276 --> 0:03:20,606
press the Space bar, but I'm

110
00:03:20,606 --> 0:03:21,876
going to click the Reload

111
00:03:21,876 --> 0:03:23,336
button, which will automatically

112
00:03:23,336 --> 0:03:25,106
start a recording and capture

113
00:03:25,106 --> 0:03:25,986
page load, too.

114
00:03:27,536 --> 0:03:29,736
When looking at CPU usage, it's

115
00:03:29,736 --> 0:03:31,076
important to remember you'll

116
00:03:31,076 --> 0:03:32,766
want to record at least 15

117
00:03:32,766 --> 0:03:34,546
seconds in order to get useful

118
00:03:34,546 --> 0:03:35,186
measurements.

119
00:03:36,116 --> 0:03:37,616
So I'll let this recording go a

120
00:03:37,616 --> 0:03:38,886
bit beyond that to capture

121
00:03:38,886 --> 0:03:39,396
enough data.

122
00:03:41,326 --> 0:03:42,306
Now I'll scroll over the

123
00:03:42,306 --> 0:03:43,796
timeline to zoom out a bit so I

124
00:03:43,796 --> 0:03:44,536
can see everything.

125
00:03:47,106 --> 0:03:48,786
Clicking on the CPU timeline,

126
00:03:48,786 --> 0:03:50,356
you can see details about CPU

127
00:03:50,356 --> 0:03:51,466
usage of the page.

128
00:03:52,416 --> 0:03:54,136
At a glance, I can tell the page

129
00:03:54,136 --> 0:03:55,176
does a pretty good job of

130
00:03:55,176 --> 0:03:56,576
keeping energy use low.

131
00:03:57,326 --> 0:03:58,896
The quick load time helps a lot,

132
00:03:59,256 --> 0:04:01,346
and when the page becomes idle,

133
00:03:59,256 --> 0:04:01,346
and when the page becomes idle,

134
00:04:01,676 --> 0:04:03,096
the timeline shows the page is

135
00:04:03,096 --> 0:04:04,386
basically doing nothing.

136
00:04:05,016 --> 0:04:06,236
This is great, because it means

137
00:04:06,236 --> 0:04:07,976
users can stay on the page all

138
00:04:07,976 --> 0:04:10,006
day, and the CPU drops to a very

139
00:04:10,006 --> 0:04:11,856
low power state, with negligible

140
00:04:11,856 --> 0:04:13,416
battery drain caused by the web

141
00:04:13,416 --> 0:04:14,086
content.

142
00:04:16,416 --> 0:04:17,875
The main thread is where a lot

143
00:04:17,875 --> 0:04:19,196
of interesting work happens for

144
00:04:19,196 --> 0:04:20,005
web content.

145
00:04:20,596 --> 0:04:22,055
The main thread chart shows

146
00:04:22,055 --> 0:04:23,336
different categories of work

147
00:04:23,496 --> 0:04:24,486
done on the main thread,

148
00:04:24,486 --> 0:04:26,056
including JavaScript processing,

149
00:04:26,466 --> 0:04:28,796
painting, layout, and things in

150
00:04:28,796 --> 0:04:30,076
service of layout, like style

151
00:04:30,076 --> 0:04:30,846
recalculation.

152
00:04:31,806 --> 0:04:32,896
Based on this, we can see that

153
00:04:32,896 --> 0:04:34,336
most of the time working was

154
00:04:34,336 --> 0:04:35,286
spent on painting.

155
00:04:35,756 --> 0:04:37,556
In the middle of the indicator

156
00:04:37,556 --> 0:04:38,826
is the time it took for the main

157
00:04:38,826 --> 0:04:40,046
thread to complete its work.

158
00:04:40,326 --> 0:04:42,286
The entire recording was about

159
00:04:42,286 --> 0:04:43,696
20 seconds, but the main thread

160
00:04:43,696 --> 0:04:45,456
only took about 100 milliseconds

161
00:04:45,456 --> 0:04:46,306
to complete its work.

162
00:04:48,586 --> 0:04:50,146
Below the main thread chart is a

163
00:04:50,146 --> 0:04:51,906
detailed breakdown of the CPU

164
00:04:51,906 --> 0:04:53,596
usage across all of the threads

165
00:04:53,596 --> 0:04:54,886
involved in doing work for the

166
00:04:54,886 --> 0:04:55,616
web content.

167
00:04:55,816 --> 0:04:58,036
I can take a closer look at this

168
00:04:58,036 --> 0:04:59,516
by clicking and dragging in the

169
00:04:59,516 --> 0:05:01,556
timeline to select just the time

170
00:04:59,516 --> 0:05:01,556
timeline to select just the time

171
00:05:01,556 --> 0:05:02,686
range where the work is being

172
00:05:02,686 --> 0:05:02,986
done.

173
00:05:04,396 --> 0:05:06,306
And just under the CPU usage

174
00:05:06,306 --> 0:05:09,176
graph, in this strip is the main

175
00:05:09,176 --> 0:05:10,616
thread indicator, which shows

176
00:05:10,616 --> 0:05:11,826
categories of work that were

177
00:05:11,826 --> 0:05:13,106
happening on the main thread at

178
00:05:13,106 --> 0:05:14,166
different points in time.

179
00:05:14,636 --> 0:05:16,866
In this area of growing

180
00:05:16,866 --> 0:05:18,406
activity, there were some layout

181
00:05:18,406 --> 0:05:19,716
events in red, followed by

182
00:05:19,716 --> 0:05:21,446
significant painting work, just

183
00:05:21,446 --> 0:05:22,636
like in the chart above, but

184
00:05:22,636 --> 0:05:23,706
showing when it happened.

185
00:05:26,216 --> 0:05:28,306
The energy impact gauge really

186
00:05:28,306 --> 0:05:29,446
brings it all together, though.

187
00:05:29,736 --> 0:05:31,386
It provides a score based on the

188
00:05:31,386 --> 0:05:33,426
total average usage across all

189
00:05:33,426 --> 0:05:35,366
CPU cores for the selected time

190
00:05:35,366 --> 0:05:35,806
range.

191
00:05:38,016 --> 0:05:39,536
The energy impact gauge is

192
00:05:39,536 --> 0:05:41,256
interactive, and as a total

193
00:05:41,256 --> 0:05:42,786
average, will change depending

194
00:05:42,786 --> 0:05:44,086
on the time range selected.

195
00:05:44,446 --> 0:05:46,366
For the page load period, the

196
00:05:46,366 --> 0:05:47,886
gauge shows medium energy

197
00:05:47,886 --> 0:05:49,866
impact, but loading is expensive

198
00:05:49,866 --> 0:05:51,076
in terms of power, so that's

199
00:05:51,076 --> 0:05:51,706
expected.

200
00:05:52,156 --> 0:05:53,606
At least this stayed out of the

201
00:05:53,606 --> 0:05:54,236
high range.

202
00:05:54,236 --> 0:05:55,176
That would've indicated a

203
00:05:55,176 --> 0:05:57,086
problem but double-clicking the

204
00:05:57,086 --> 0:05:58,666
timeline area to select the

205
00:05:58,666 --> 0:06:00,396
entire recording shows the

206
00:05:58,666 --> 0:06:00,396
entire recording shows the

207
00:06:00,396 --> 0:06:02,276
overall average CPU is low.

208
00:06:02,906 --> 0:06:04,536
I can click and drag the

209
00:06:04,536 --> 0:06:06,386
timeline to select a slice of

210
00:06:06,386 --> 0:06:08,126
time out of the recording and

211
00:06:08,126 --> 0:06:09,566
watch the average change.

212
00:06:11,286 --> 0:06:13,416
Now, when I click to grab the

213
00:06:13,416 --> 0:06:14,876
selection, and slide it to a

214
00:06:14,876 --> 0:06:16,246
period where the page goes idle,

215
00:06:16,666 --> 0:06:18,166
the energy impact drops to low.

216
00:06:18,816 --> 0:06:19,836
That's really great.

217
00:06:20,316 --> 0:06:21,856
When the page is idle, we don't

218
00:06:21,856 --> 0:06:23,316
want to be costing the user lots

219
00:06:23,316 --> 0:06:24,676
of power for content they're not

220
00:06:24,676 --> 0:06:25,496
actively using.

221
00:06:27,266 --> 0:06:29,116
The CPU use was in the low range

222
00:06:29,116 --> 0:06:30,456
while idle, even with the

223
00:06:30,456 --> 0:06:31,866
rotating logo animation

224
00:06:31,866 --> 0:06:32,966
happening in the background.

225
00:06:33,316 --> 0:06:34,376
That's because it's using a

226
00:06:34,376 --> 0:06:36,556
simple CSS animation that makes

227
00:06:36,556 --> 0:06:38,396
it really cheap to animate, but

228
00:06:38,396 --> 0:06:40,036
it still gives the page a nice

229
00:06:40,036 --> 0:06:40,976
visual impact.

230
00:06:42,156 --> 0:06:43,606
Webkit.org is doing great so

231
00:06:43,606 --> 0:06:45,056
far, but when you're looking for

232
00:06:45,056 --> 0:06:47,076
power issues, looking at loading

233
00:06:47,076 --> 0:06:48,406
and idle are good starts.

234
00:06:49,016 --> 0:06:50,926
To cover all of the bases, we

235
00:06:50,926 --> 0:06:51,716
need to capture some

236
00:06:51,716 --> 0:06:52,726
interactivity, too.

237
00:06:54,406 --> 0:06:56,396
The WebKit Feature Status page

238
00:06:56,396 --> 0:06:57,756
is a great way to stay up to

239
00:06:57,756 --> 0:06:59,256
date on WebKit support for your

240
00:06:59,256 --> 0:07:00,506
favorite web features.

241
00:06:59,256 --> 0:07:00,506
favorite web features.

242
00:07:00,926 --> 0:07:02,266
It allows you to filter and

243
00:07:02,266 --> 0:07:03,676
search, and that's perfect for

244
00:07:03,676 --> 0:07:04,646
capturing interaction.

245
00:07:04,936 --> 0:07:07,296
I'm going to record a timeline

246
00:07:07,296 --> 0:07:08,476
and interact with the page in

247
00:07:08,476 --> 0:07:09,036
some ways.

248
00:07:09,036 --> 0:07:10,456
I'll just scroll down to the

249
00:07:10,456 --> 0:07:11,636
bottom, and then all the way

250
00:07:11,636 --> 0:07:15,766
back up to the top, and then

251
00:07:15,766 --> 0:07:17,976
I'll do a quick search, and

252
00:07:17,976 --> 0:07:19,086
click on some things here and

253
00:07:19,086 --> 0:07:19,346
there.

254
00:07:19,986 --> 0:07:22,796
And again, we should at least

255
00:07:22,796 --> 0:07:24,236
capture 15 seconds.

256
00:07:24,736 --> 0:07:26,256
Since we're on a new page, we

257
00:07:26,256 --> 0:07:27,436
should capture some period of

258
00:07:27,436 --> 0:07:28,086
idle, too.

259
00:07:29,066 --> 0:07:30,466
I'm going to let this continue

260
00:07:30,466 --> 0:07:32,186
recording to get enough idle

261
00:07:32,186 --> 0:07:32,976
time captured.

262
00:07:37,346 --> 0:07:38,556
Okay, that looks pretty good.

263
00:07:39,436 --> 0:07:40,476
Now I'm going to select the

264
00:07:40,476 --> 0:07:42,636
entire recording and scroll to

265
00:07:42,636 --> 0:07:43,966
zoom out of the timeline a bit

266
00:07:43,966 --> 0:07:45,676
so we can see everything and

267
00:07:46,556 --> 0:07:48,576
click to look at the CPU usage

268
00:07:48,576 --> 0:07:49,186
details.

269
00:07:53,756 --> 0:07:55,186
Let's start digging into these

270
00:07:55,186 --> 0:07:56,956
areas, starting with loading.

271
00:07:58,836 --> 0:08:00,526
The page managed to stay out of

272
00:07:58,836 --> 0:08:00,526
The page managed to stay out of

273
00:08:00,526 --> 0:08:01,876
the high range during the quick

274
00:08:01,876 --> 0:08:03,596
load time, so we're okay there.

275
00:08:05,206 --> 0:08:06,526
Now let's look at this range of

276
00:08:06,526 --> 0:08:07,326
interactivity.

277
00:08:08,236 --> 0:08:09,796
The energy impact stays in the

278
00:08:09,796 --> 0:08:11,406
medium range, even with all of

279
00:08:11,406 --> 0:08:12,976
these things happening, but you

280
00:08:12,976 --> 0:08:14,346
can tell from the JavaScript in

281
00:08:14,346 --> 0:08:15,986
events timeline there's a lot of

282
00:08:15,986 --> 0:08:17,446
script firing while scrolling

283
00:08:17,446 --> 0:08:18,186
and interacting.

284
00:08:18,866 --> 0:08:19,976
We definitely want to avoid

285
00:08:19,976 --> 0:08:21,646
doing any extra CPU work while

286
00:08:21,646 --> 0:08:22,996
scrolling, since it's very

287
00:08:22,996 --> 0:08:23,996
expensive to scroll.

288
00:08:24,956 --> 0:08:26,076
Let's see if we need to be doing

289
00:08:26,076 --> 0:08:27,366
that work or not.

290
00:08:28,156 --> 0:08:29,796
The Statistics and Sources

291
00:08:29,796 --> 0:08:31,086
sections tell the story.

292
00:08:31,936 --> 0:08:33,376
There were over 1200 entries

293
00:08:33,376 --> 0:08:34,895
into JavaScript for the selected

294
00:08:34,895 --> 0:08:37,405
time in the recording, 596

295
00:08:37,405 --> 0:08:38,916
request animation frame timers

296
00:08:38,916 --> 0:08:41,456
fired, and there are 647 scroll

297
00:08:41,456 --> 0:08:41,836
events.

298
00:08:42,716 --> 0:08:44,226
Now, I know that reducing timers

299
00:08:44,226 --> 0:08:45,516
and staying off of scrolling is

300
00:08:45,516 --> 0:08:46,786
better for performance, but we

301
00:08:46,786 --> 0:08:47,946
need to look at the code to know

302
00:08:47,946 --> 0:08:49,486
if it's necessary or can be

303
00:08:49,486 --> 0:08:49,946
improved.

304
00:08:50,876 --> 0:08:52,666
In the Statistics area, you can

305
00:08:52,666 --> 0:08:54,236
click on the timers or events to

306
00:08:54,236 --> 0:08:55,616
filter the sources on the right

307
00:08:55,666 --> 0:08:57,556
to the code that triggered it,

308
00:08:57,556 --> 0:08:59,106
and clicking the source takes

309
00:08:59,106 --> 0:09:00,276
you right to the code in the

310
00:08:59,106 --> 0:09:00,276
you right to the code in the

311
00:09:00,276 --> 0:09:01,286
JavaScript Debugger.

312
00:09:04,316 --> 0:09:06,236
Ah, OK, it looks like the

313
00:09:06,236 --> 0:09:07,936
request animation frame timer is

314
00:09:07,936 --> 0:09:09,776
calling updateImages, which

315
00:09:09,806 --> 0:09:11,406
iterates over all of the images,

316
00:09:11,466 --> 0:09:12,706
and checks if they are in view,

317
00:09:12,806 --> 0:09:14,076
and if so, it loads them.

318
00:09:14,676 --> 0:09:16,286
It's a pretty basic, lazy-loaded

319
00:09:16,286 --> 0:09:18,426
images pattern, but this

320
00:09:18,426 --> 0:09:19,916
dimmed-out code in the debugger

321
00:09:20,256 --> 0:09:22,076
tells us inView and loadImage

322
00:09:22,076 --> 0:09:22,966
are never called.

323
00:09:24,506 --> 0:09:25,496
Even though we scrolled the

324
00:09:25,496 --> 0:09:27,616
entire page to the bottom, and

325
00:09:27,616 --> 0:09:29,446
back up to the top, it makes

326
00:09:29,446 --> 0:09:30,666
sense, though, because there's

327
00:09:30,666 --> 0:09:32,236
basically no images on the page.

328
00:09:32,736 --> 0:09:34,386
So the lazy-loading image code

329
00:09:34,386 --> 0:09:35,636
shouldn't be firing at all on

330
00:09:35,636 --> 0:09:36,186
this page.

331
00:09:36,996 --> 0:09:38,446
Let's switch back to the code.

332
00:09:38,656 --> 0:09:40,816
The images and the event

333
00:09:40,816 --> 0:09:42,046
handlers are set up here.

334
00:09:43,346 --> 0:09:44,996
So looking at the code, it's

335
00:09:44,996 --> 0:09:46,306
just always setting up the event

336
00:09:46,306 --> 0:09:47,916
handlers for scroll and resize

337
00:09:47,916 --> 0:09:48,586
all of the time.

338
00:09:49,246 --> 0:09:50,746
To keep that from happening, we

339
00:09:50,746 --> 0:09:51,986
just need to add a conditional

340
00:09:51,986 --> 0:09:52,366
guard.

341
00:09:53,666 --> 0:09:55,206
There, let's try that.

342
00:09:58,656 --> 0:10:00,406
OK, so let's capture a timeline

343
00:09:58,656 --> 0:10:00,406
OK, so let's capture a timeline

344
00:10:00,406 --> 0:10:01,526
with the fix in place.

345
00:10:02,236 --> 0:10:03,586
I'll click back over to the

346
00:10:03,586 --> 0:10:06,246
Timelines tab, start a new

347
00:10:06,246 --> 0:10:10,336
recording, and I'll do some

348
00:10:10,336 --> 0:10:11,086
quick scrolling.

349
00:10:13,996 --> 0:10:15,216
You can already see there are no

350
00:10:15,216 --> 0:10:16,636
JavaScript entries showing up in

351
00:10:16,636 --> 0:10:17,306
the timeline.

352
00:10:17,496 --> 0:10:19,296
It's all just paint, so our

353
00:10:19,296 --> 0:10:20,566
guard is working to prevent

354
00:10:20,566 --> 0:10:21,986
extra JavaScript work while

355
00:10:21,986 --> 0:10:23,676
scrolling on a page without any

356
00:10:23,676 --> 0:10:24,726
lazy-loaded images.

357
00:10:26,316 --> 0:10:27,866
The energy impact has been

358
00:10:27,866 --> 0:10:29,356
reduced, and all of the main

359
00:10:29,356 --> 0:10:30,566
thread work is paints for

360
00:10:30,566 --> 0:10:32,276
scrolling, but we need to make

361
00:10:32,276 --> 0:10:33,586
sure that the pages that should

362
00:10:33,586 --> 0:10:35,256
be using lazy-loaded images are

363
00:10:35,256 --> 0:10:35,846
still working.

364
00:10:37,636 --> 0:10:39,036
Again, with the fix in place,

365
00:10:39,306 --> 0:10:41,156
I'll record a new timeline on a

366
00:10:41,156 --> 0:10:42,756
page with a MotionMark logo

367
00:10:42,756 --> 0:10:44,176
image at the bottom that should

368
00:10:44,176 --> 0:10:45,236
use the lazy loader.

369
00:10:47,016 --> 0:10:48,856
Perfect. The MotionMark image

370
00:10:48,856 --> 0:10:49,446
loaded in.

371
00:10:49,736 --> 0:10:51,126
I'm going to scroll to get some

372
00:10:51,126 --> 0:10:52,416
CPU measurements of the new

373
00:10:52,416 --> 0:10:54,076
behavior and click the CPU

374
00:10:54,076 --> 0:10:57,866
Timelines to see where we're at.

375
00:10:58,136 --> 0:11:00,936
So we've reduced the timer and

376
00:10:58,136 --> 0:11:00,936
So we've reduced the timer and

377
00:11:00,936 --> 0:11:02,406
events to just the pages where

378
00:11:02,406 --> 0:11:03,146
it's necessary.

379
00:11:03,476 --> 0:11:06,466
That's great, but there's still

380
00:11:06,466 --> 0:11:07,916
a lot of entries into Script

381
00:11:07,916 --> 0:11:09,276
when scrolling on pages with a

382
00:11:09,276 --> 0:11:10,436
lazy-loaded image.

383
00:11:11,286 --> 0:11:12,756
There's an API available in

384
00:11:12,756 --> 0:11:14,276
Safari that we can use to take

385
00:11:14,276 --> 0:11:15,636
this solution a step further.

386
00:11:16,176 --> 0:11:17,406
We can replace the request

387
00:11:17,406 --> 0:11:18,956
animation frame implementation

388
00:11:19,076 --> 0:11:20,486
to use Intersection Observer

389
00:11:20,486 --> 0:11:21,126
instead.

390
00:11:22,526 --> 0:11:24,016
Intersection Observer can tell

391
00:11:24,016 --> 0:11:25,446
when an element comes into view,

392
00:11:25,686 --> 0:11:27,046
so you can limit your work to

393
00:11:27,046 --> 0:11:28,196
just when it's visible.

394
00:11:28,436 --> 0:11:29,766
And as soon as it goes out of

395
00:11:29,766 --> 0:11:31,466
view, you can stop the work to

396
00:11:31,466 --> 0:11:33,026
get back to a low CPU power

397
00:11:33,026 --> 0:11:34,306
state and save power.

398
00:11:36,256 --> 0:11:37,176
So with the Intersection

399
00:11:37,176 --> 0:11:38,816
Observer implementation, let's

400
00:11:38,816 --> 0:11:40,536
record another timeline, and do

401
00:11:40,536 --> 0:11:41,776
some scrolling to see how this

402
00:11:41,776 --> 0:11:42,856
solution performs.

403
00:11:44,016 --> 0:11:45,196
And as I begin scrolling,

404
00:11:45,456 --> 0:11:46,736
there's just a single entry into

405
00:11:46,736 --> 0:11:48,526
JavaScript, and for the rest of

406
00:11:48,526 --> 0:11:49,856
the time, it's just painting

407
00:11:49,856 --> 0:11:50,516
while I scroll.

408
00:11:57,516 --> 0:11:58,686
So in the end, we went from

409
00:11:58,686 --> 0:12:02,666
16.3% down to 9-1/2% average CPU

410
00:11:58,686 --> 0:12:02,666
16.3% down to 9-1/2% average CPU

411
00:12:02,666 --> 0:12:03,956
usage with the Intersection

412
00:12:03,956 --> 0:12:04,796
Observer solution.

413
00:12:05,276 --> 0:12:06,596
Every little bit helps, and

414
00:12:06,596 --> 0:12:07,526
that's a really nice

415
00:12:07,526 --> 0:12:08,086
improvement.

416
00:12:08,516 --> 0:12:10,816
So there are lots of ways to

417
00:12:10,816 --> 0:12:12,246
save power in web content.

418
00:12:13,586 --> 0:12:15,436
Use the CPU usage timeline to

419
00:12:15,436 --> 0:12:17,076
investigate web content for ways

420
00:12:17,076 --> 0:12:18,676
to improve during interactivity

421
00:12:18,676 --> 0:12:19,966
and when the page is idle.

422
00:12:21,096 --> 0:12:23,176
Remember that reducing CPU usage

423
00:12:23,176 --> 0:12:24,906
saves energy and reduces battery

424
00:12:24,906 --> 0:12:25,906
drain for users.

425
00:12:27,586 --> 0:12:29,586
CSS animations and transitions

426
00:12:29,586 --> 0:12:31,146
can provide dynamic visuals

427
00:12:31,146 --> 0:12:34,176
without the power cost and try

428
00:12:34,176 --> 0:12:35,496
to avoid doing work while

429
00:12:35,496 --> 0:12:36,026
scrolling.

430
00:12:36,196 --> 0:12:37,546
Using the Intersection Observer

431
00:12:37,546 --> 0:12:38,426
API instead.

432
00:12:39,506 --> 0:12:41,306
Users want an engaging, dynamic

433
00:12:41,306 --> 0:12:43,056
experience with web content, but

434
00:12:43,056 --> 0:12:44,086
the best version of those

435
00:12:44,086 --> 0:12:45,916
experiences use the least amount

436
00:12:45,916 --> 0:12:47,086
of CPU possible.

437
00:12:48,386 --> 0:12:49,106
There are a lot more

438
00:12:49,106 --> 0:12:50,476
power-saving tips for web

439
00:12:50,476 --> 0:12:52,006
development on the WebKit Blog.

440
00:12:52,516 --> 0:12:53,416
Check out the links in the

441
00:12:53,416 --> 0:12:55,316
resources section associated

442
00:12:55,316 --> 0:12:56,016
with this video.

443
00:12:57,866 --> 0:12:59,196
We hope you'll try using these

444
00:12:59,196 --> 0:13:00,776
tools on your web content, and

445
00:12:59,196 --> 0:13:00,776
tools on your web content, and

446
00:13:00,776 --> 0:13:02,476
use the advice in this video as

447
00:13:02,476 --> 0:13:03,816
some starting places for your

448
00:13:03,816 --> 0:13:05,526
investigations on how to make

449
00:13:05,526 --> 0:13:06,646
your web content power

450
00:13:06,646 --> 0:13:08,496
efficient, and join us in

451
00:13:08,496 --> 0:13:10,016
helping the web become more

452
00:13:10,016 --> 0:13:11,976
powerful by using less power.
