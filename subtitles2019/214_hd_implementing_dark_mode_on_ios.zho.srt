1
00:00:06,406 --> 0:00:10,544
（iOS上实施深色模式）

2
00:00:15,549 --> 0:00:16,450
早上好

3
00:00:16,984 --> 0:00:19,553
欢迎参加

4
00:00:19,753 --> 0:00:21,455
我是Kurt 我会和Tyler

5
00:00:22,756 --> 0:00:25,459
现在 当我们在iOS 13

6
00:00:25,526 --> 0:00:27,361
我们看到UI的各个部分

7
00:00:27,427 --> 0:00:30,330
让它在新的深色外观中更好看

8
00:00:30,464 --> 0:00:32,031
这是iOS的全新设计

9
00:00:32,799 --> 0:00:34,001
现在 到你了

10
00:00:34,101 --> 0:00:36,837
我们来帮你在你的app中

11
00:00:37,437 --> 0:00:40,774
很简单 我们将会在现场演示

12
00:00:41,875 --> 0:00:45,212
它也是在一个非常灵活和强大的

13
00:00:45,612 --> 0:00:48,415
所以不论你想要你的app

14
00:00:48,749 --> 0:00:49,683
你都能实现它

15
00:00:51,051 --> 0:00:53,253
首先 我们来聊一下黑暗模式的设计

16
00:00:53,654 --> 0:00:55,155
现在 我来展示一个示例

17
00:00:56,089 --> 0:00:58,025
这是设置 一个很熟悉的

18
00:00:58,792 --> 0:01:02,062
你看到的是黑暗模式

19
00:00:58,792 --> 0:01:02,062
你看到的是黑暗模式

20
00:01:02,396 --> 0:01:03,564
运作方式也相同

21
00:01:03,830 --> 0:01:05,265
只是外观不一样

22
00:01:05,933 --> 0:01:10,070
我们知道了iOS的设计系统

23
00:01:10,804 --> 0:01:12,906
当我们实现时 我们要考虑三件事

24
00:01:14,041 --> 0:01:16,643
第一件 也是最重要的 颜色

25
00:01:17,177 --> 0:01:20,781
iOS app传统上硬编码了

26
00:01:20,914 --> 0:01:24,051
你为UI的每个部分指定了RGB值

27
00:01:25,252 --> 0:01:26,553
现在我们有了黑暗模式

28
00:01:26,620 --> 0:01:28,889
几乎所有的颜色都需要改变

29
00:01:29,289 --> 0:01:32,125
我们需要管理很多颜色

30
00:01:33,527 --> 0:01:35,796
我们使用语义颜色来解决

31
00:01:35,929 --> 0:01:39,233
这些颜色都有一个它们代表的名字

32
00:01:39,967 --> 0:01:42,469
我们这里的文字标签

33
00:01:42,769 --> 0:01:44,638
那是文字和标签的默认的颜色

34
00:01:45,772 --> 0:01:47,975
我们的背景是

35
00:01:48,041 --> 0:01:50,077
那是因为我们在一个分组表视图

36
00:01:50,577 --> 0:01:52,479
UI表视图给了我们默认设置

37
00:01:53,881 --> 0:01:56,350
最后是这个图标

38
00:01:56,850 --> 0:01:58,252
它不是纯粹的蓝色

39
00:01:58,652 --> 0:02:01,221
但它被调整来适应剩下的颜色

40
00:01:58,652 --> 0:02:01,221
但它被调整来适应剩下的颜色

41
00:02:02,055 --> 0:02:03,490
所以 当我们设置UI时

42
00:02:04,024 --> 0:02:07,361
我们为每个部分选择了一个合适

43
00:02:08,794 --> 0:02:11,765
当我们切换至浅色模式时

44
00:02:12,132 --> 0:02:13,901
但因为这些颜色是动态的

45
00:02:13,967 --> 0:02:16,503
它们在浅色和暗色模式有不同的值

46
00:02:17,538 --> 0:02:21,208
最棒的事情是

47
00:02:21,275 --> 0:02:23,110
UIKit会帮你实现

48
00:02:23,644 --> 0:02:25,512
你不需要思考你处于哪种模式

49
00:02:25,846 --> 0:02:28,348
切换模式时 你不必做任何修改

50
00:02:29,616 --> 0:02:32,419
现在 我们的设计系统提供了一个

51
00:02:32,686 --> 0:02:33,921
我来展示一些例子

52
00:02:34,588 --> 0:02:36,456
我们这有一些背景颜色

53
00:02:36,523 --> 0:02:37,758
它们被设计一起工作

54
00:02:38,592 --> 0:02:41,361
“systemBackground”

55
00:02:41,595 --> 0:02:43,163
浅色模式下是纯白色

56
00:02:43,230 --> 0:02:46,033
非常熟悉吧 在黑暗模式下纯黑色

57
00:02:47,234 --> 0:02:51,505
最上面是

58
00:02:51,905 --> 0:02:55,375
这些允许你构建你app的

59
00:02:56,343 --> 0:02:59,847
请留意黑暗模式不只是

60
00:03:00,013 --> 0:03:00,981
它更为精妙

61
00:03:02,216 --> 0:03:04,818
我们的文字也使用层次结构的方案

62
00:03:05,385 --> 0:03:07,120
有四种层级的文字颜色

63
00:03:07,387 --> 0:03:08,522
它们允许你突出

64
00:03:08,589 --> 0:03:11,058
哪些元素和其他的最相关

65
00:03:11,925 --> 0:03:15,162
比如 第一级颜色可能会被用于

66
00:03:15,696 --> 0:03:18,765
第二级颜色被用于次标题等等

67
00:03:20,701 --> 0:03:24,071
颜色的完整目录在人机界面指南里

68
00:03:24,338 --> 0:03:26,206
你能从中知道它们是什么

69
00:03:26,840 --> 0:03:30,244
我们提供了很多颜色

70
00:03:30,878 --> 0:03:32,446
你可以制作你自己的动态颜色

71
00:03:32,513 --> 0:03:34,147
我等会会向你展示如何实现

72
00:03:35,415 --> 0:03:38,719
现在 我们来看看我们设计系统的

73
00:03:39,119 --> 0:03:40,554
这是Photos的一个例子

74
00:03:41,288 --> 0:03:43,690
材质不仅仅是颜色

75
00:03:44,057 --> 0:03:47,261
模糊效果看上去像是背景上面的

76
00:03:47,394 --> 0:03:48,595
半透明的材质

77
00:03:49,396 --> 0:03:53,734
上面有一个振动穿过了模糊脱颖而出

78
00:03:54,535 --> 0:03:57,171
当然 它们在我们的图片上方

79
00:03:57,771 --> 0:04:00,207
它们能在深色和浅色模式下运行

80
00:03:57,771 --> 0:04:00,207
它们能在深色和浅色模式下运行

81
00:04:01,975 --> 0:04:03,710
设计系统的第三个部分是

82
00:04:03,944 --> 0:04:07,447
由UIKit的提供的

83
00:04:08,081 --> 0:04:11,018
它们使用了相同的颜色和材质

84
00:04:11,185 --> 0:04:13,420
所有的物件都被很好的适配了

85
00:04:15,656 --> 0:04:17,324
所以 当你为你app

86
00:04:17,423 --> 0:04:19,259
在你写代码之前

87
00:04:19,860 --> 0:04:24,097
先学习设计系统和了解如何

88
00:04:24,998 --> 0:04:27,768
接下来 弄清楚你想要自定义的内容

89
00:04:28,502 --> 0:04:30,637
iOS app各有不同

90
00:04:30,804 --> 0:04:32,673
我们不能为你提供你需要的一切

91
00:04:33,073 --> 0:04:35,409
但是我们提供给你需要的资源

92
00:04:37,311 --> 0:04:38,946
那么 现在你想好了你的设计

93
00:04:39,012 --> 0:04:41,048
我们来聊一下如何如何实现它

94
00:04:42,516 --> 0:04:45,686
当你使用iOS 13的

95
00:04:46,186 --> 0:04:48,555
你app的浅色和深色外观

96
00:04:49,122 --> 0:04:53,327
切换设备至黑暗模式

97
00:04:53,760 --> 0:04:56,530
你首先会发现你有事情要做了

98
00:04:57,130 --> 0:04:58,999
我们不能自动为你实现

99
00:04:59,499 --> 0:05:01,502
最后 让你的app在黑暗模式下

100
00:04:59,499 --> 0:05:01,502
最后 让你的app在黑暗模式下

101
00:05:01,568 --> 0:05:02,803
界面的外观好看与否

102
00:05:02,870 --> 0:05:05,272
是你自己的责任

103
00:05:06,240 --> 0:05:08,742
你需要做的第一件事是颜色

104
00:05:10,010 --> 0:05:13,480
在过去 每个UI颜色只有一个值

105
00:05:13,647 --> 0:05:14,781
它永远是一样的

106
00:05:15,549 --> 0:05:16,984
现在它们能设置为动态的

107
00:05:17,918 --> 0:05:21,121
在浅色和黑暗模式下颜色

108
00:05:22,022 --> 0:05:24,424
当你在视图上设置

109
00:05:24,491 --> 0:05:27,361
比如 一个背景颜色或文字颜色

110
00:05:27,794 --> 0:05:30,330
UIKit会自动使用正确的值

111
00:05:30,697 --> 0:05:32,666
当模式改变时会更新

112
00:05:33,467 --> 0:05:35,102
所以 你只需设置颜色一次

113
00:05:35,936 --> 0:05:39,373
如果你熟悉macOS的黑暗模式

114
00:05:39,439 --> 0:05:41,441
我们会遵循一样的模式

115
00:05:42,976 --> 0:05:45,379
所以 我们开始吧

116
00:05:45,612 --> 0:05:47,047
Tyler会向大家演示一个例子

117
00:05:55,088 --> 0:05:55,989
谢谢Kurt

118
00:05:58,725 --> 0:06:00,794
我们有一个最开始在iOS 12上

119
00:05:58,725 --> 0:06:00,794
我们有一个最开始在iOS 12上

120
00:06:00,861 --> 0:06:03,096
开发的一个简单的示例app

121
00:06:03,263 --> 0:06:05,832
我们想要向你展示在iOS 13的

122
00:06:05,899 --> 0:06:08,669
黑暗模式下我们做的修改

123
00:06:10,504 --> 0:06:12,739
这也许会给你一些

124
00:06:12,806 --> 0:06:14,308
改动的建议

125
00:06:14,908 --> 0:06:17,010
我们的app在右侧的模拟器运行

126
00:06:17,711 --> 0:06:18,579
它非常简单

127
00:06:19,046 --> 0:06:22,449
所以 我们为什么不切换到黑暗模式

128
00:06:23,350 --> 0:06:26,954
我们可以使用Xcode的

129
00:06:27,187 --> 0:06:28,589
那么 我们在Xcode中运行

130
00:06:28,956 --> 0:06:32,059
我们可以点击切换按钮

131
00:06:32,125 --> 0:06:33,460
切换至深色界面

132
00:06:33,927 --> 0:06:36,630
你可能注意到

133
00:06:36,697 --> 0:06:37,664
它转背为黑暗模式了

134
00:06:38,665 --> 0:06:40,300
现在 你可能注意到

135
00:06:40,367 --> 0:06:42,903
比如 屏幕底部的标签栏改变了

136
00:06:43,437 --> 0:06:45,839
那是因为我们使用了UIKit

137
00:06:45,906 --> 0:06:47,207
所以我们免费获得了一切

138
00:06:48,008 --> 0:06:50,811
但是我们的app颜色

139
00:06:50,878 --> 0:06:52,346
那是因为我们还有其他事情要做

140
00:06:52,880 --> 0:06:54,014
那么 我们为何不切回到

141
00:06:54,381 --> 0:06:57,317
看看我的UI是如何被创建的

142
00:06:58,785 --> 0:07:00,554
这里是我们app的主界面

143
00:06:58,785 --> 0:07:00,554
这里是我们app的主界面

144
00:07:01,355 --> 0:07:02,956
我们应该做的第一件事是看看

145
00:07:03,023 --> 0:07:04,591
为什么我们的这个白色背景

146
00:07:04,658 --> 0:07:05,726
在一切物件的后面

147
00:07:06,793 --> 0:07:09,897
我们能在Storyboard

148
00:07:10,297 --> 0:07:12,332
如果你查看右侧的属性检查器

149
00:07:12,399 --> 0:07:14,768
你能发现你在设置一个硬编码的白色

150
00:07:15,235 --> 0:07:17,070
之前它可能有效

151
00:07:17,304 --> 0:07:20,307
但我们现在想要切换至使用

152
00:07:20,374 --> 0:07:21,275
Kurt前面提到过

153
00:07:21,775 --> 0:07:24,545
那么 系统背景颜色是一个

154
00:07:25,179 --> 0:07:27,915
你能在这个新列表上找到所有的

155
00:07:28,081 --> 0:07:29,449
我们选择系统背景

156
00:07:30,217 --> 0:07:32,186
操作后什么也没有改变

157
00:07:32,252 --> 0:07:35,422
那是因为浅色模式下

158
00:07:35,989 --> 0:07:38,425
但是我们能做的是

159
00:07:38,492 --> 0:07:41,929
切换我们的预览视图来看看

160
00:07:42,396 --> 0:07:43,230
所以 如果我们这样做

161
00:07:44,164 --> 0:07:47,734
我们现在能在深色背景颜色下的样子

162
00:07:49,269 --> 0:07:51,705
但是 我们的文字不见了

163
00:07:52,873 --> 0:07:55,576
因为我们的黑色文字

164
00:07:56,276 --> 0:07:58,712
那么 我们需要来看这里

165
00:07:58,779 --> 0:08:00,380
我们从标题标签开始

166
00:07:58,779 --> 0:08:00,380
我们从标题标签开始

167
00:08:01,281 --> 0:08:02,583
我们看到右侧

168
00:08:02,649 --> 0:08:06,587
文字也被这个配置硬编码为黑色颜色

169
00:08:07,020 --> 0:08:09,790
那么 再一次 我们需要切换至

170
00:08:10,390 --> 0:08:13,861
这种情况下 我们可以选择一个

171
00:08:15,195 --> 0:08:16,897
那会在黑暗模式中显示白色

172
00:08:18,131 --> 0:08:19,800
类似地 我们选择我们的文字视图

173
00:08:20,501 --> 0:08:23,370
它也被设置为黑色了

174
00:08:26,440 --> 0:08:27,641
所以 现在我们已经做出了这些改变

175
00:08:27,708 --> 0:08:29,209
关于如何在模拟器运行

176
00:08:29,276 --> 0:08:30,944
以及物件将如何呈现

177
00:08:33,847 --> 0:08:35,649
这是在浅色模式下运行

178
00:08:36,350 --> 0:08:38,519
我们将再一次回到环境覆盖

179
00:08:38,818 --> 0:08:40,020
将它转变为深色

180
00:08:41,621 --> 0:08:43,323
现在我们看到了更多的更新

181
00:08:43,590 --> 0:08:44,892
它看上去很棒

182
00:08:45,626 --> 0:08:47,094
但如果我们要进一步优化呢？

183
00:08:47,761 --> 0:08:49,763
上面是一张星星图片

184
00:08:49,830 --> 0:08:50,797
那是我们app的标志

185
00:08:51,131 --> 0:08:54,668
我们想要在黑暗模式下

186
00:08:55,769 --> 0:08:57,337
这不难

187
00:08:57,771 --> 0:09:00,874
我们在Storyboard

188
00:08:57,771 --> 0:09:00,874
我们在Storyboard

189
00:09:01,241 --> 0:09:02,442
你会看到这是一个图片视图

190
00:09:02,509 --> 0:09:05,412
它配置了

191
00:09:05,979 --> 0:09:08,448
这张图片被作为一张模版图片来渲染

192
00:09:08,515 --> 0:09:11,151
它意味着任何出现在图片视图上的

193
00:09:11,718 --> 0:09:13,187
都会给图片着色

194
00:09:13,720 --> 0:09:16,323
那么 我们来用这个自定义的

195
00:09:16,390 --> 0:09:18,258
资产目录定义过的图标颜色来着色

196
00:09:18,725 --> 0:09:22,029
我们点击这个小箭头跳转到该颜色

197
00:09:22,663 --> 0:09:23,730
来看如何设置它

198
00:09:24,531 --> 0:09:27,167
这就是那个颜色 它是自定义的绿色

199
00:09:27,835 --> 0:09:30,304
如果我们想要为黑暗模式

200
00:09:30,604 --> 0:09:33,473
现在我们可以打开一个新的槽

201
00:09:33,540 --> 0:09:35,576
指定深色外观

202
00:09:36,643 --> 0:09:37,477
只要我们完成

203
00:09:37,744 --> 0:09:39,847
我们就能选择深色外观改变它

204
00:09:39,913 --> 0:09:43,217
一个很棒的黄色或者类似的

205
00:09:44,184 --> 0:09:47,020
现在我们有一个颜色设置来自动

206
00:09:47,087 --> 0:09:48,989
在浅色和深色两种外观中转换

207
00:09:50,023 --> 0:09:52,492
如果我保存 然后回到

208
00:09:54,428 --> 0:09:58,665
我们看到当我们在预览图中切换

209
00:09:59,266 --> 0:10:01,502
它自动更新了 很棒

210
00:09:59,266 --> 0:10:01,502
它自动更新了 很棒

211
00:10:06,974 --> 0:10:07,808
但还有更多

212
00:10:08,342 --> 0:10:10,644
如果我们想要更新背景图片呢？

213
00:10:10,744 --> 0:10:13,280
现在它是一张好看的白天热带海边

214
00:10:13,480 --> 0:10:17,184
如果我们要将它在黑暗模式中

215
00:10:17,518 --> 0:10:18,986
换成一张日落的暗色风格的图片？

216
00:10:19,686 --> 0:10:20,821
我们选择哪个图片视图

217
00:10:20,888 --> 0:10:23,323
步骤和改变颜色的方式非常相似

218
00:10:23,724 --> 0:10:25,058
这里的图片视图

219
00:10:25,125 --> 0:10:27,861
配置了我们的资产目录的标题图片

220
00:10:27,928 --> 0:10:29,963
我们点击箭头直接跳转到那

221
00:10:31,298 --> 0:10:32,399
这就是图片被设置的地方

222
00:10:33,033 --> 0:10:36,103
就像你之前看到的颜色一样

223
00:10:36,170 --> 0:10:39,273
你能为深色外观打开一个新的槽

224
00:10:39,506 --> 0:10:45,179
接着 我们要做的只是拿到日落图片

225
00:10:46,013 --> 0:10:48,148
保存 我们来运行一下

226
00:10:48,215 --> 0:10:49,950
看看现在在模拟器是什么样子

227
00:10:53,287 --> 0:10:55,489
那么 这是浅色模式 没有任何改变

228
00:10:55,556 --> 0:10:57,925
这是我们开始的地方

229
00:10:58,292 --> 0:11:01,428
但只要用环境覆盖

230
00:10:58,292 --> 0:11:01,428
但只要用环境覆盖

231
00:11:01,962 --> 0:11:06,200
现在屏幕上的所有物件都更新了

232
00:11:10,838 --> 0:11:13,240
所以你看到的最酷的事情是

233
00:11:13,774 --> 0:11:15,542
使用了所有的动态颜色

234
00:11:15,609 --> 0:11:17,845
和利用了这些动态图片

235
00:11:17,911 --> 0:11:19,847
以及在支持目录自定义了颜色

236
00:11:20,147 --> 0:11:23,517
我们不用写任何代码就能使用

237
00:11:24,051 --> 0:11:25,786
这就是利用Xcode和UIKit

238
00:11:25,853 --> 0:11:29,556
为你提供的基础设施的好处

239
00:11:30,324 --> 0:11:33,994
你也能在你app的启动

240
00:11:34,061 --> 0:11:36,763
在你的app启动时支持黑暗模式

241
00:11:38,298 --> 0:11:41,602
那么 现在我们来看一下

242
00:11:42,870 --> 0:11:44,171
如果你点击了解更多按钮

243
00:11:44,238 --> 0:11:48,742
我们在这个新的卡片样式

244
00:11:49,343 --> 0:11:51,712
我们也想在这里支持黑暗模式

245
00:11:52,412 --> 0:11:54,615
有趣的是 在下半部分

246
00:11:54,681 --> 0:11:57,451
你能看到我们利用了材料的优势

247
00:11:57,718 --> 0:12:00,220
所以 有一个模糊覆盖了背景图片

248
00:11:57,718 --> 0:12:00,220
所以 有一个模糊覆盖了背景图片

249
00:12:00,387 --> 0:12:02,856
接下来 上面有一个突显的标题

250
00:12:03,457 --> 0:12:06,193
有请Kurt回来为大家继续讲解

251
00:12:06,260 --> 0:12:08,128
如何使用这些视觉效果

252
00:12:08,395 --> 0:12:10,631
来自动更新黑暗模式

253
00:12:14,468 --> 0:12:15,369
谢谢Tyler

254
00:12:18,906 --> 0:12:21,441
那么 我来给大家展示一些

255
00:12:21,942 --> 0:12:23,243
这是一个新的模糊效果

256
00:12:24,011 --> 0:12:28,115
这是厚 正常 薄和极薄样式

257
00:12:28,382 --> 0:12:30,884
当然 这些样式能同时在浅色

258
00:12:31,618 --> 0:12:32,786
现在 我们来看如何使用它们

259
00:12:33,787 --> 0:12:36,223
在我们的app中

260
00:12:36,623 --> 0:12:38,525
我想在最上面模糊它们

261
00:12:39,159 --> 0:12:41,929
第一件我要做的是创建一个

262
00:12:42,362 --> 0:12:43,797
我们指定一个样式

263
00:12:44,097 --> 0:12:46,099
在当前状况下 我会使用系统的材料

264
00:12:46,166 --> 0:12:47,601
这是一个好的默认选择

265
00:12:48,569 --> 0:12:52,906
接下来 我们使用这个效果

266
00:12:53,874 --> 0:12:56,343
我们要保证它的尺寸和位置合适

267
00:12:56,710 --> 0:12:59,513
接着我们把这个视觉效果

268
00:13:00,714 --> 0:13:02,749
你看 它模糊了下面所有的物件

269
00:13:02,950 --> 0:13:03,784
非常简单

270
00:13:05,385 --> 0:13:08,455
现在 在模糊效果上面

271
00:13:08,822 --> 0:13:11,792
突出效果穿过了一些背景材料

272
00:13:12,659 --> 0:13:15,462
以前 只有一种突显效果

273
00:13:15,529 --> 0:13:16,830
但现在有好多种了

274
00:13:17,231 --> 0:13:18,866
这是为文字设计的四种样式

275
00:13:19,399 --> 0:13:24,471
其中三种样式是更大的覆盖区域

276
00:13:25,138 --> 0:13:26,840
当然 它们能在浅色

277
00:13:28,242 --> 0:13:29,843
那么 我们来看如何实现突显效果

278
00:13:30,677 --> 0:13:33,146
现在 突显效果始终

279
00:13:33,213 --> 0:13:35,382
和之前开始设置的方式一样

280
00:13:36,350 --> 0:13:39,620
我们来创建一个突显效果

281
00:13:40,153 --> 0:13:43,156
在当前状况下 我使用填充

282
00:13:44,258 --> 0:13:46,493
请留意 当你创建一个突显效果时

283
00:13:46,560 --> 0:13:48,495
你给了模糊效果一个参考

284
00:13:48,629 --> 0:13:50,197
两者协同工作

285
00:13:51,598 --> 0:13:54,468
为了展示突显效果 我们创建了

286
00:13:55,169 --> 0:13:57,404
接下来我们将它加到模糊效果里面

287
00:13:57,871 --> 0:13:59,173
现在 这里有一些不同

288
00:13:59,239 --> 0:14:03,877
我们不在视觉效果视图上直接添加

289
00:13:59,239 --> 0:14:03,877
我们不在视觉效果视图上直接添加

290
00:14:04,111 --> 0:14:06,180
取代的 我们穿过它的内容视图

291
00:14:07,514 --> 0:14:09,816
现在我们添加这个突显视图

292
00:14:10,317 --> 0:14:12,019
我获取到内容视图

293
00:14:12,452 --> 0:14:14,488
接下来 我添加会突显的视图

294
00:14:14,555 --> 0:14:15,756
你会看到效果

295
00:14:16,490 --> 0:14:19,726
现在的情况是 我们的视图的

296
00:14:20,194 --> 0:14:23,530
但取代了它正常的颜色

297
00:14:24,164 --> 0:14:25,866
那是因为这个突显样式的

298
00:14:26,366 --> 0:14:29,503
颜色被忽视了

299
00:14:30,404 --> 0:14:33,674
那么 再次有请Tyler来完成

300
00:14:45,252 --> 0:14:48,055
好的 我们回到了解更多的屏幕

301
00:14:48,121 --> 0:14:51,925
我们看到的这个屏幕和

302
00:14:52,125 --> 0:14:54,695
在于这一个完全是由代码创建的

303
00:14:55,495 --> 0:14:57,431
我们现在看我们的视图控制器

304
00:14:57,497 --> 0:15:00,367
你能看到所有的一切都在这个

305
00:14:57,497 --> 0:15:00,367
你能看到所有的一切都在这个

306
00:15:00,834 --> 0:15:01,902
在我们开始之前

307
00:15:01,969 --> 0:15:04,738
我们先切换到黑暗模式看一下

308
00:15:05,939 --> 0:15:08,342
我们找到环境覆盖

309
00:15:08,475 --> 0:15:10,911
切换到深色 你可能看到

310
00:15:10,978 --> 0:15:12,646
有些物件改变了

311
00:15:12,746 --> 0:15:14,948
我们的导航栏自动变了

312
00:15:15,015 --> 0:15:16,283
因为它来自UIKit

313
00:15:16,850 --> 0:15:19,820
我们动态的自定义颜色

314
00:15:19,887 --> 0:15:21,622
以及自定义图片也变了

315
00:15:21,755 --> 0:15:23,423
它和我们之前更新过的一样

316
00:15:23,490 --> 0:15:24,992
这些已经运行正确了

317
00:15:25,325 --> 0:15:27,594
但当然 你能看到我们的

318
00:15:27,895 --> 0:15:30,197
这些材料在黑暗模式下

319
00:15:30,264 --> 0:15:31,632
看上去还不太对

320
00:15:31,698 --> 0:15:32,766
所以 我们来做一些改动

321
00:15:34,034 --> 0:15:35,802
下面 我们来看一下这些是

322
00:15:36,503 --> 0:15:39,907
我们首先要在背景中

323
00:15:39,973 --> 0:15:41,575
这是白色来源的地方

324
00:15:41,842 --> 0:15:43,143
就像你在Storyboard中

325
00:15:43,377 --> 0:15:46,480
我们需要切换使用一个

326
00:15:46,747 --> 0:15:49,349
像之前做过的

327
00:15:50,817 --> 0:15:53,253
接下来 我们设置星星图片

328
00:15:53,320 --> 0:15:55,622
接下来 使用我们的资产目录颜色

329
00:15:55,689 --> 0:15:56,924
所以这里不必做修改

330
00:15:58,292 --> 0:16:00,527
这是你看到的了解更多标签

331
00:15:58,292 --> 0:16:00,527
这是你看到的了解更多标签

332
00:16:00,594 --> 0:16:02,062
屏幕的标题

333
00:16:02,129 --> 0:16:03,263
我们需要做一下改动

334
00:16:03,330 --> 0:16:06,133
因为我们在这里将黑色硬编码了

335
00:16:06,700 --> 0:16:09,169
我们切回到其他物件

336
00:16:11,538 --> 0:16:13,207
现在 我们看到的下半段

337
00:16:13,273 --> 0:16:16,677
是处于黑色中的图片视图

338
00:16:17,578 --> 0:16:18,512
就在这

339
00:16:18,946 --> 0:16:20,547
在图片视图的上层

340
00:16:20,848 --> 0:16:23,684
是一个模糊效果的视觉效果视图

341
00:16:24,518 --> 0:16:26,553
那么 那是这个薄样式的模糊

342
00:16:27,354 --> 0:16:29,990
接着 在上面

343
00:16:30,057 --> 0:16:31,658
视觉效果视图

344
00:16:32,426 --> 0:16:33,293
在这里

345
00:16:33,760 --> 0:16:37,364
最后 在内容视图的突显视图里面

346
00:16:37,431 --> 0:16:38,732
我们有标签

347
00:16:39,733 --> 0:16:42,336
所以 我们需要做出更新这些材料

348
00:16:42,636 --> 0:16:45,472
首先 切换到动态模糊效果

349
00:16:45,539 --> 0:16:48,041
这个薄效果并不是动态的

350
00:16:48,108 --> 0:16:50,177
当我们切换至黑暗模式

351
00:16:50,844 --> 0:16:54,147
所以 我们要利用iOS 13的

352
00:16:54,448 --> 0:16:55,782
全新系统材料调色板

353
00:16:56,283 --> 0:17:00,454
好选择 因为这个特殊用途的

354
00:16:56,283 --> 0:17:00,454
好选择 因为这个特殊用途的

355
00:17:00,521 --> 0:17:02,356
它看去和我们之前做过的很类似

356
00:17:03,257 --> 0:17:05,526
接着 我们也想要利用新系统突显

357
00:17:05,826 --> 0:17:08,328
效果样式更新我们的突显效果

358
00:17:08,595 --> 0:17:11,598
这些突显样式现在

359
00:17:11,698 --> 0:17:14,300
所以 我们能添加一个样式参数

360
00:17:14,701 --> 0:17:16,936
在当前情况 它是一种二级内容

361
00:17:17,003 --> 0:17:20,240
所以我们能选择二级标签样式

362
00:17:20,907 --> 0:17:24,877
做了这些改动

363
00:17:26,246 --> 0:17:27,513
我们打开展

364
00:17:28,348 --> 0:17:29,683
现在我们处于浅色模式

365
00:17:29,750 --> 0:17:31,585
和我们之前看到的几乎一样

366
00:17:32,719 --> 0:17:34,254
但我们现在切换至黑暗模式

367
00:17:35,422 --> 0:17:39,893
看吧 所有物件都更新为美观的

368
00:17:44,698 --> 0:17:47,534
这里要指出的一点是虽然我们

369
00:17:47,935 --> 0:17:48,869
这没什么错

370
00:17:49,236 --> 0:17:51,071
我们实际上并不需要写一些代码

371
00:17:51,138 --> 0:17:53,540
来显式检查我们所处的模式

372
00:17:53,740 --> 0:17:57,010
或处理浅色到黑暗模式

373
00:17:57,845 --> 0:17:59,780
这也是利用你app中的

374
00:17:59,913 --> 0:18:03,750
这些动态系统颜色和材料的优势

375
00:17:59,913 --> 0:18:03,750
这些动态系统颜色和材料的优势

376
00:18:04,418 --> 0:18:05,485
我将舞台交给Kurt

377
00:18:05,552 --> 0:18:08,288
他会向你解释

378
00:18:12,492 --> 0:18:13,327
谢谢

379
00:18:16,463 --> 0:18:19,233
那么 这里有一些你可能

380
00:18:19,833 --> 0:18:23,270
我们使用系统背景颜色

381
00:18:23,337 --> 0:18:24,271
它是黑色

382
00:18:24,705 --> 0:18:27,307
接着 我们在展示视图中

383
00:18:27,875 --> 0:18:30,811
如果你支持查看

384
00:18:31,945 --> 0:18:35,582
那是因为黑暗模式的设计

385
00:18:36,016 --> 0:18:38,318
当视图填充了整个屏幕的边缘

386
00:18:38,385 --> 0:18:39,953
我们称之为基本级别

387
00:18:40,654 --> 0:18:43,490
接下来 当内容在一个

388
00:18:43,857 --> 0:18:45,392
我们称之为进阶级别

389
00:18:46,159 --> 0:18:49,162
所以 在黑暗模式

390
00:18:49,229 --> 0:18:51,698
在进阶级别的颜色值更浅

391
00:18:51,932 --> 0:18:54,601
这帮助我们从下面的黑色背景

392
00:18:55,369 --> 0:18:57,271
但是前景颜色不会改变

393
00:18:58,205 --> 0:19:01,108
现在在iPhone上 就像你

394
00:18:58,205 --> 0:19:01,108
现在在iPhone上 就像你

395
00:19:01,875 --> 0:19:05,579
在iPad上 当app在多任务

396
00:19:05,712 --> 0:19:07,080
所以它不会填充整个屏幕

397
00:19:08,549 --> 0:19:10,851
我们已经知道实现黑暗模式的

398
00:19:12,519 --> 0:19:14,821
我们都看到物件就这样工作了

399
00:19:14,888 --> 0:19:15,856
它是自动的

400
00:19:16,190 --> 0:19:19,826
那么 我们来深入了解动态颜色

401
00:19:20,093 --> 0:19:23,197
这会帮你全面灵活的

402
00:19:24,431 --> 0:19:27,835
我们已经看到动态颜色自动地

403
00:19:28,101 --> 0:19:30,604
但是颜色如何知道它是浅色

404
00:19:31,405 --> 0:19:33,073
特征集合能帮助实现

405
00:19:33,407 --> 0:19:36,977
所以 你app的每个视图和

406
00:19:37,644 --> 0:19:41,181
它帮助确认视图的外观

407
00:19:41,782 --> 0:19:44,151
当前状况下 我们所有的视图

408
00:19:44,751 --> 0:19:48,488
风格为手机设计 在手机上运行

409
00:19:49,356 --> 0:19:52,259
用户界面的样式是黑色 因为我们

410
00:19:52,759 --> 0:19:55,863
用户界面是基本级别

411
00:19:56,797 --> 0:19:59,433
所以 如果你想要

412
00:19:59,499 --> 0:20:00,801
使用特征集合

413
00:19:59,499 --> 0:20:00,801
使用特征集合

414
00:20:00,868 --> 0:20:03,837
查看用户界面样式和其他特征

415
00:20:05,672 --> 0:20:08,742
现在 使用特征集合解决了

416
00:20:08,909 --> 0:20:12,412
所以 它是一个动态颜色和一个

417
00:20:12,646 --> 0:20:14,581
来确认最后的颜色

418
00:20:15,349 --> 0:20:16,817
通常情况下这会自动发生

419
00:20:16,884 --> 0:20:20,387
但如果你需要自己来确定颜色

420
00:20:21,221 --> 0:20:22,723
假如我们有一个动态颜色

421
00:20:23,090 --> 0:20:25,058
我们从一个视图那获取了

422
00:20:25,993 --> 0:20:27,427
如果我们想要确认那个颜色

423
00:20:27,494 --> 0:20:31,999
我们只要使用特征集合和

424
00:20:32,232 --> 0:20:35,903
它会返回一个确定的非动态的颜色

425
00:20:37,037 --> 0:20:38,839
所以 调用任何颜色都是安全的

426
00:20:38,906 --> 0:20:41,642
如果那个颜色不是动态的

427
00:20:42,976 --> 0:20:45,412
你也能自定义动态颜色

428
00:20:45,712 --> 0:20:47,648
我们在资产目录展示了如何操作

429
00:20:47,714 --> 0:20:49,316
但是你也能在代码中实现

430
00:20:50,417 --> 0:20:55,022
使用一个闭包来初始化一个颜色

431
00:20:55,789 --> 0:20:58,058
接着我们的闭包会返回另一个颜色

432
00:20:58,692 --> 0:21:01,628
所以 每次这个动态颜色

433
00:20:58,692 --> 0:21:01,628
所以 每次这个动态颜色

434
00:21:01,695 --> 0:21:04,965
那个闭包会被调用合适的特征集合

435
00:21:05,599 --> 0:21:08,035
在闭包内 你能使用特征集合

436
00:21:08,235 --> 0:21:10,137
来确定返回另一个颜色

437
00:21:10,771 --> 0:21:13,440
这个例子实现了我们刚才看到的图表

438
00:21:15,209 --> 0:21:16,143
另一个问题是

439
00:21:16,343 --> 0:21:18,312
你可能会质疑动态颜色

440
00:21:18,378 --> 0:21:20,380
能直接被用于其他颜色

441
00:21:20,814 --> 0:21:22,449
它们是如何被自动指定的？

442
00:21:23,250 --> 0:21:26,587
如果我有一个动态颜色

443
00:21:27,020 --> 0:21:28,222
它会返回一个结果

444
00:21:28,589 --> 0:21:30,557
如果我的颜色是黑色

445
00:21:31,291 --> 0:21:34,061
当我问它时

446
00:21:34,394 --> 0:21:35,329
那它是如何知道的呢？

447
00:21:36,830 --> 0:21:39,833
是这样的 在UITrait Collection里

448
00:21:40,234 --> 0:21:42,236
UIKit会为你设置它

449
00:21:43,136 --> 0:21:46,540
使用当前特征集合

450
00:21:47,307 --> 0:21:49,543
再一次 我们遵循Mac一样的样式

451
00:21:49,710 --> 0:21:52,646
这和NSAppearance.current

452
00:21:54,047 --> 0:21:56,383
现在 UIKit为你设置了

453
00:21:56,450 --> 0:21:57,551
当它调用确定的方法

454
00:21:58,051 --> 0:21:58,919
这是一个例子

455
00:21:59,386 --> 0:22:02,623
我有一个UIView的子类

456
00:21:59,386 --> 0:22:02,623
我有一个UIView的子类

457
00:22:02,723 --> 0:22:04,424
那么 这个视图会完成它所有的绘制

458
00:22:06,293 --> 0:22:07,928
在我调用这个方法之前

459
00:22:08,328 --> 0:22:10,864
UIKit会为视图特征集合设置

460
00:22:10,931 --> 0:22:12,432
当前特征集合

461
00:22:13,100 --> 0:22:16,970
在这段代码里面

462
00:22:17,304 --> 0:22:19,106
它会使用视图特征集合

463
00:22:20,307 --> 0:22:22,075
事实上 当模式改变时

464
00:22:22,142 --> 0:22:24,511
UIKit知道你重写了

465
00:22:24,811 --> 0:22:27,781
所以它会自动在你的视图

466
00:22:27,881 --> 0:22:29,883
用新的颜色再次绘制一遍

467
00:22:31,251 --> 0:22:33,654
UIKit也为你设置当前

468
00:22:33,720 --> 0:22:35,455
在它调用其他一些方法之前

469
00:22:36,223 --> 0:22:41,895
我是…视图的子类 视图控制器和

470
00:22:42,896 --> 0:22:45,933
但UIKit也在布局的时候

471
00:22:46,567 --> 0:22:49,603
所以 在你的视图子类中重写

472
00:22:49,870 --> 0:22:52,072
接着添加指定动态颜色的代码

473
00:22:52,673 --> 0:22:55,576
当模式改变时

474
00:22:55,742 --> 0:22:56,810
布局会再次改变

475
00:22:57,477 --> 0:22:59,279
这包含在视图控制器和展示控制器

476
00:22:59,346 --> 0:23:01,682
相关的调用

477
00:22:59,346 --> 0:23:01,682
相关的调用

478
00:23:03,350 --> 0:23:07,120
最后 所有的这三种物件

479
00:23:07,354 --> 0:23:08,422
获得traitCollectionDidChange

480
00:23:08,589 --> 0:23:11,792
视图会得到tintColorDidChange

481
00:23:12,259 --> 0:23:13,594
所以 这些方法的内部

482
00:23:13,660 --> 0:23:16,396
可以立刻使用动态颜色是

483
00:23:17,631 --> 0:23:19,600
现在 你要记住这些方法外的

484
00:23:20,467 --> 0:23:21,702
重要的一点

485
00:23:21,768 --> 0:23:25,873
当前的特征集合不能被保证

486
00:23:26,440 --> 0:23:30,010
所以如果你需要在这些方法外部

487
00:23:30,077 --> 0:23:31,278
你需要管理它

488
00:23:31,845 --> 0:23:33,714
这是为什么你需要这么做的一个例子

489
00:23:35,015 --> 0:23:38,519
低级别的类比如

490
00:23:38,852 --> 0:23:41,622
无法理解动态颜色

491
00:23:42,623 --> 0:23:45,759
所以现在 我们创建一个层级

492
00:23:46,426 --> 0:23:49,596
那让一个CG Color

493
00:23:50,497 --> 0:23:54,801
所以 在UIKit动态颜色调用

494
00:23:55,569 --> 0:23:58,405
现在 我们想象一下

495
00:23:58,472 --> 0:24:01,675
这意味着我们自己需要负责管理

496
00:23:58,472 --> 0:24:01,675
这意味着我们自己需要负责管理

497
00:24:02,309 --> 0:24:04,011
我们需要的第一个物件是一个

498
00:24:04,378 --> 0:24:05,612
我们会从一个视图获得它

499
00:24:06,446 --> 0:24:08,315
现在我们需要使用那个特征集合

500
00:24:08,382 --> 0:24:09,816
我会通过三种方式实现它

501
00:24:10,684 --> 0:24:12,519
第一种方式我们之前已经看到过

502
00:24:12,853 --> 0:24:16,557
使用特征集合来让颜色指定它自己

503
00:24:17,457 --> 0:24:19,693
现在如果你只有一种颜色是可以

504
00:24:19,893 --> 0:24:21,695
但是如果你有多种颜色时

505
00:24:22,029 --> 0:24:23,964
你必须每次都记得这么做

506
00:24:24,631 --> 0:24:25,866
第二种方法要简单一点

507
00:24:26,533 --> 0:24:30,003
直接在特征集合调用

508
00:24:30,804 --> 0:24:33,707
那让特征集合成为了

509
00:24:34,107 --> 0:24:36,710
接下来它在你提供的闭包中执行代码

510
00:24:37,444 --> 0:24:39,680
因为我们在那个闭包中指定了颜色

511
00:24:39,746 --> 0:24:40,981
你得到了正确的值

512
00:24:42,549 --> 0:24:46,587
最后 第三种方法

513
00:24:47,354 --> 0:24:50,090
这看上去有一点可怕

514
00:24:50,190 --> 0:24:52,659
它是轻量级的 没有其他负面影响

515
00:24:53,193 --> 0:24:55,696
它甚至可以安全地在后台的线程完成

516
00:24:55,929 --> 0:24:58,832
它只会影响你当前运行的线程

517
00:24:59,266 --> 0:25:00,868
所以它不会影响你的主线程

518
00:24:59,266 --> 0:25:00,868
所以它不会影响你的主线程

519
00:25:01,935 --> 0:25:02,903
如果你将要使用这个方法

520
00:25:02,970 --> 0:25:05,472
最好保存当前特征集合

521
00:25:05,539 --> 0:25:08,709
为了防止有其他代码使用它

522
00:25:09,476 --> 0:25:11,745
请注意

523
00:25:11,812 --> 0:25:13,080
它做了完全一样的事情

524
00:25:14,448 --> 0:25:16,283
所以 如果你做了这些事情

525
00:25:16,350 --> 0:25:17,684
你也会想知道

526
00:25:17,918 --> 0:25:20,354
当动态颜色需要再一次被指定时

527
00:25:21,121 --> 0:25:23,357
它通常发生在特征改变时

528
00:25:23,891 --> 0:25:26,760
当特征改变时

529
00:25:27,561 --> 0:25:30,364
但不是所有的特征改变都会

530
00:25:30,697 --> 0:25:33,233
如果用户界面样式由浅色变为深色

531
00:25:33,400 --> 0:25:34,902
那会显著的影响颜色

532
00:25:35,302 --> 0:25:38,805
但是当一些改变比如当你app的

533
00:25:39,106 --> 0:25:40,407
它不会影响颜色

534
00:25:41,208 --> 0:25:43,243
那么 使用这个方法最好是

535
00:25:43,544 --> 0:25:47,381
有不同的颜色外观来查看

536
00:25:48,081 --> 0:25:50,717
如果它是 接下来你需要再一次

537
00:25:52,619 --> 0:25:54,388
所以 最后 我们来聊一下图片

538
00:25:54,922 --> 0:25:58,725
如你所见 你可以在资产目录里创建

539
00:25:59,359 --> 0:26:02,029
当你使用UIImage视图

540
00:25:59,359 --> 0:26:02,029
当你使用UIImage视图

541
00:26:02,396 --> 0:26:06,567
它使用它自己的特征集合来决定

542
00:26:07,868 --> 0:26:10,103
现在UIImage视图完成了工作

543
00:26:10,571 --> 0:26:11,805
与UIColor不同

544
00:26:12,139 --> 0:26:15,042
UIImage不会关注

545
00:26:15,943 --> 0:26:18,679
所以 我们推荐大多数情况下使用

546
00:26:19,413 --> 0:26:22,149
但如果你需要自己指定颜色

547
00:26:23,250 --> 0:26:26,286
提供一张图片

548
00:26:26,486 --> 0:26:29,356
那是所有不同图片的变量集合

549
00:26:31,024 --> 0:26:35,362
接下来 询问符合一张符合特定

550
00:26:36,830 --> 0:26:38,398
你也能使用图片资产

551
00:26:38,465 --> 0:26:41,502
在运行时注册新的变量

552
00:26:41,902 --> 0:26:43,237
如果你自己绘制你的图片

553
00:26:43,303 --> 0:26:45,806
你可以为浅色和黑暗模式添加变量

554
00:26:46,440 --> 0:26:47,941
在图片视图添加它就好

555
00:26:48,141 --> 0:26:49,710
它会自动展示正确的那个

556
00:26:50,844 --> 0:26:53,747
当适配黑暗模式时 我们来聊一下

557
00:26:54,147 --> 0:26:55,048
有请Tyler

558
00:27:03,223 --> 0:27:04,191
谢谢Kurt

559
00:27:04,658 --> 0:27:05,859
我们用几分钟时间来回忆下

560
00:27:05,926 --> 0:27:08,795
特征集合时如何工作的

561
00:27:08,862 --> 0:27:12,533
因为如你所见

562
00:27:13,467 --> 0:27:15,802
最重要的事情是在你整个app

563
00:27:15,869 --> 0:27:18,605
记住特征集合中不止一个

564
00:27:19,640 --> 0:27:23,343
特征集合实际上贯穿了

565
00:27:23,844 --> 0:27:26,280
从屏幕的根级别开始

566
00:27:26,847 --> 0:27:30,317
到窗口视图

567
00:27:30,651 --> 0:27:32,085
从这里到窗口

568
00:27:33,320 --> 0:27:36,557
在这一点上 特征开始进入

569
00:27:36,757 --> 0:27:39,526
接下来 是展示页面的视图控制器

570
00:27:40,894 --> 0:27:43,530
最后 特征串联至你每一个的

571
00:27:43,597 --> 0:27:45,666
视图控制器中视图层级

572
00:27:46,633 --> 0:27:47,701
因为这个层级设计

573
00:27:47,768 --> 0:27:49,603
你可以一直使用指定的视图

574
00:27:49,670 --> 0:27:53,040
或视图管理器的特征集合

575
00:27:54,374 --> 0:27:56,043
现在 当一个特征值改变时

576
00:27:56,310 --> 0:27:58,478
你可以获得在你app中

577
00:27:58,545 --> 0:28:00,848
traitCollectionDidChange

578
00:27:58,545 --> 0:28:00,848
traitCollectionDidChange

579
00:28:00,914 --> 0:28:02,082
当它们收到改变时

580
00:28:02,950 --> 0:28:05,419
如果系统黑暗模式设置改变了 比如

581
00:28:05,786 --> 0:28:08,355
你会看到特征改变马上穿过了

582
00:28:09,523 --> 0:28:12,259
但我想深入聊一下特征改变

583
00:28:12,392 --> 0:28:15,662
因为今年我们在iOS 13

584
00:28:16,163 --> 0:28:18,432
我们来放大下半部分的示意图

585
00:28:18,498 --> 0:28:20,634
通过一个例子来了解什么改变了

586
00:28:22,503 --> 0:28:25,506
那么 我们想要添加这个视图到

587
00:28:25,572 --> 0:28:26,807
它会成为上面视图控制器中的

588
00:28:26,874 --> 0:28:28,709
视图

589
00:28:30,377 --> 0:28:32,913
首先 我们会创建这个视图

590
00:28:33,881 --> 0:28:35,582
现在 当一个视图初始化后

591
00:28:35,782 --> 0:28:38,785
它还没被添加至这个特征层级中

592
00:28:39,486 --> 0:28:42,289
所以 当视图被创建

593
00:28:42,456 --> 0:28:46,827
UIKit会预测这个视图

594
00:28:47,861 --> 0:28:51,398
基于预测的目的地

595
00:28:51,465 --> 0:28:53,700
从一开始就将视图的特征集合植入

596
00:28:54,801 --> 0:28:58,939
现在我们添加这个视图 然后

597
00:29:01,542 --> 0:29:03,744
那么 现在我们将这个视图

598
00:29:04,811 --> 0:29:07,147
我们先调用子视图

599
00:29:07,881 --> 0:29:08,916
它移动至这里

600
00:29:09,483 --> 0:29:11,218
只要视图被添加了

601
00:29:11,285 --> 0:29:14,988
它会从它父辈的特征环境

602
00:29:15,055 --> 0:29:16,757
现在它继承的是上面的视图控制器

603
00:29:17,791 --> 0:29:19,893
但是现在 因为特征集合在

604
00:29:19,960 --> 0:29:21,995
这之前被预测了

605
00:29:22,362 --> 0:29:24,464
当这个视图移动至这个

606
00:29:24,565 --> 0:29:27,534
没有一个特征发生了变化

607
00:29:28,335 --> 0:29:31,004
所以 你看到的是iOS13

608
00:29:31,605 --> 0:29:35,576
总结一下 特征现在

609
00:29:36,910 --> 0:29:38,111
视图控制器和视图都

610
00:29:38,178 --> 0:29:40,614
会收到一个完整了前面的

611
00:29:40,681 --> 0:29:42,149
特征视图 这非常有用

612
00:29:42,449 --> 0:29:45,385
只有这些原始的特征改变时

613
00:29:45,552 --> 0:29:47,588
之后才会被调用

614
00:29:48,522 --> 0:29:51,525
所以 当你更新iOS 13中

615
00:29:52,326 --> 0:29:54,628
留意下你已有的

616
00:29:54,695 --> 0:29:57,064
方法里的代码

617
00:29:57,464 --> 0:29:59,132
在一个特征改变

618
00:29:59,299 --> 0:30:01,568
你将它移入层级时

619
00:29:59,299 --> 0:30:01,568
你将它移入层级时

620
00:30:01,635 --> 0:30:02,903
它可能使用的是旧方法

621
00:30:04,238 --> 0:30:05,906
现在 为了在iOS 13中

622
00:30:05,973 --> 0:30:08,675
一些特征值的变化

623
00:30:09,109 --> 0:30:11,645
我们今年增加了一些新的调试功能

624
00:30:11,979 --> 0:30:13,747
你可以启用这个启动参数

625
00:30:13,981 --> 0:30:17,184
它会立刻告知你

626
00:30:17,484 --> 0:30:19,720
被调用的时机和变动的细节

627
00:30:19,786 --> 0:30:21,555
它非常酷 你可以尝试一下

628
00:30:22,890 --> 0:30:24,558
现在 当你更新完你的代码

629
00:30:24,825 --> 0:30:26,960
或增加了使用特征的新代码

630
00:30:27,694 --> 0:30:29,963
最好的实践就是等待布局

631
00:30:30,264 --> 0:30:33,400
从视图或视图控制器获取特征集合

632
00:30:33,634 --> 0:30:34,968
在此基础上开始工作

633
00:30:35,969 --> 0:30:38,939
在布局出现之前 特征一直处于

634
00:30:39,239 --> 0:30:42,176
如果你从这些方法中获取到了

635
00:30:42,342 --> 0:30:45,579
你可以确信它不会再被预测了

636
00:30:45,646 --> 0:30:49,082
它会反映它从父辈中继承的实际的值

637
00:30:50,584 --> 0:30:53,220
只要记住如果你在代码中使用了

638
00:30:53,487 --> 0:30:56,256
它们能在视图可见时被调用

639
00:30:56,823 --> 0:30:58,725
任何时候有物件要调用

640
00:30:58,992 --> 0:31:03,197
请确保你没有重复处理它

641
00:30:58,992 --> 0:31:03,197
请确保你没有重复处理它

642
00:31:04,731 --> 0:31:08,135
这就是你使用特征集合时

643
00:31:08,368 --> 0:31:12,072
但我们也能在我们的app中

644
00:31:12,139 --> 0:31:13,273
修改这些特征集合

645
00:31:14,474 --> 0:31:16,643
这是你可能需要这么做的一个例子

646
00:31:17,644 --> 0:31:19,913
这是我们的了解更多屏幕

647
00:31:19,980 --> 0:31:22,649
展示给你的app一直是深色的

648
00:31:22,916 --> 0:31:25,385
甚至我们app的剩余部分

649
00:31:26,119 --> 0:31:29,156
我们可以利用特征层级来实现它

650
00:31:30,591 --> 0:31:32,226
一般情况下 这个示意图展示的

651
00:31:32,926 --> 0:31:34,661
系统是浅色模式的

652
00:31:34,962 --> 0:31:37,264
所有的物件都有浅色用户界面样式

653
00:31:37,331 --> 0:31:38,398
就像你看到的这个

654
00:31:39,466 --> 0:31:41,034
但我们只想要

655
00:31:41,101 --> 0:31:43,403
在右下角的这个视图控制器

656
00:31:43,470 --> 0:31:45,272
在它那边的一切都暗下去

657
00:31:46,039 --> 0:31:50,277
我们可以通过重写

658
00:31:50,944 --> 0:31:53,580
现在视图控制器内部的物件

659
00:31:53,981 --> 0:31:56,817
甚至是你app的剩余部分

660
00:31:57,718 --> 0:31:59,219
那么 你要如何重写呢？

661
00:32:00,420 --> 0:32:04,157
我们今年在iOS 13上提供了

662
00:32:04,925 --> 0:32:07,261
这些是视图控制器和视图的新属性

663
00:32:07,327 --> 0:32:10,130
这样你就能设置你想要的

664
00:32:10,397 --> 0:32:13,734
它会给它内部和子类提供所有的

665
00:32:14,835 --> 0:32:17,704
现在 需要时 你要尽可能

666
00:32:18,138 --> 0:32:21,909
这个视图只应该

667
00:32:22,009 --> 0:32:24,111
如果你没有一个视图控制器时的

668
00:32:24,511 --> 0:32:26,914
如果你使用那个视图属性

669
00:32:26,980 --> 0:32:29,082
所以使用时请阅读文档

670
00:32:30,250 --> 0:32:33,921
最后 如果你的整个app需要一直

671
00:32:34,154 --> 0:32:37,291
你可以设置Info.plist的

672
00:32:39,326 --> 0:32:42,462
你也可以使用一些

673
00:32:43,497 --> 0:32:44,798
这会让你重写一个视图控制器或

674
00:32:44,865 --> 0:32:46,967
展示控制器的任意的特征

675
00:32:47,301 --> 0:32:49,236
关键是记住当你使用它时

676
00:32:49,303 --> 0:32:51,672
你重写的特征集合

677
00:32:51,872 --> 0:32:53,574
应该只包含

678
00:32:53,640 --> 0:32:56,243
你想重写的特定特征的值

679
00:32:56,777 --> 0:32:59,313
不要改动其他不确定的特征

680
00:32:59,546 --> 0:33:00,414
不要改动它们

681
00:32:59,546 --> 0:33:00,414
不要改动它们

682
00:33:00,614 --> 0:33:02,950
这样UIKit就会自动为这些

683
00:33:03,016 --> 0:33:05,452
特征填充通常的继承的值

684
00:33:06,486 --> 0:33:07,955
那就是你需要知道的如何在

685
00:33:08,021 --> 0:33:10,791
iOS 13中成功使用特征集合

686
00:33:12,125 --> 0:33:15,596
我们来聊一下我们今年更新的

687
00:33:15,863 --> 0:33:17,264
当你更新你的app至黑暗模式时

688
00:33:17,331 --> 0:33:19,700
你需要留意的其他事情

689
00:33:20,267 --> 0:33:22,035
我们从状态栏开始

690
00:33:23,504 --> 0:33:27,241
iOS 13之前 我们有两种

691
00:33:27,574 --> 0:33:30,277
默认样式和浅色内容

692
00:33:31,979 --> 0:33:35,415
在iOS 13上

693
00:33:35,916 --> 0:33:39,219
它几乎是取代了之前默认的位置

694
00:33:39,686 --> 0:33:43,991
我们将默认改变成一种

695
00:33:45,259 --> 0:33:48,195
现在 自动切换基于控制状态栏的

696
00:33:48,262 --> 0:33:51,231
视图控制器的用户界面样式

697
00:33:51,532 --> 0:33:55,802
一直以来 你能在视图控制器重写

698
00:33:55,869 --> 0:33:58,906
返回一个你想要的特定样式

699
00:34:00,174 --> 0:34:01,775
最后 它不会在这展示

700
00:34:01,909 --> 0:34:05,946
但请留意 我们也更新了

701
00:34:06,180 --> 0:34:08,282
来更适配这种风格

702
00:34:09,783 --> 0:34:12,553
接下来 我们来聊一下活动的指示符

703
00:34:13,187 --> 0:34:16,422
在iOS 13 我们不再

704
00:34:17,024 --> 0:34:20,027
因为它们被默默指定了

705
00:34:20,092 --> 0:34:21,495
这不再有用了

706
00:34:22,396 --> 0:34:25,098
但在其他地方

707
00:34:25,165 --> 0:34:28,001
我们引入了一些新的样式

708
00:34:29,069 --> 0:34:32,306
它们也默认使用了一个好看的

709
00:34:32,472 --> 0:34:35,375
所以不用做任何修改 它们在浅色

710
00:34:35,943 --> 0:34:38,545
但你能使用已知的颜色属性

711
00:34:38,712 --> 0:34:42,949
来设置一个自定义的 动态颜色

712
00:34:43,016 --> 0:34:45,219
如果你想要一个特定固定的外观

713
00:34:47,454 --> 0:34:50,123
接下来 这是一些你要留意的事情

714
00:34:50,357 --> 0:34:52,259
当你在app中处理文字时

715
00:34:53,360 --> 0:34:55,795
现在 默认情况 文字类比如

716
00:34:55,862 --> 0:34:59,833
UIText文本域和

717
00:35:00,567 --> 0:35:04,338
所以 如果你只在新的文本域

718
00:35:05,239 --> 0:35:08,876
你会在浅色和黑暗模式得到一个

719
00:35:09,977 --> 0:35:12,012
但如果你在app中使用属性字符串

720
00:35:12,446 --> 0:35:15,582
你在文字类中的一个设置属性文字

721
00:35:15,983 --> 0:35:18,919
或如果你自己手动绘制属性字符串

722
00:35:19,753 --> 0:35:22,789
你需要指定一个前景颜色

723
00:35:23,690 --> 0:35:27,895
没有前景颜色属性时

724
00:35:28,028 --> 0:35:30,831
实际上是会被定义为产出黑色文字

725
00:35:32,099 --> 0:35:34,334
所以 如果你在app的黑暗模式下

726
00:35:34,668 --> 0:35:36,069
你使用属性字符串

727
00:35:36,136 --> 0:35:39,072
只是为了保证 你为比如标签

728
00:35:39,406 --> 0:35:42,142
就像你在这看到的

729
00:35:42,442 --> 0:35:43,410
它真的非常简单

730
00:35:45,445 --> 0:35:49,716
现在 你们中在app中

731
00:35:50,384 --> 0:35:52,719
你需应该知道黑暗模式是可选的

732
00:35:53,487 --> 0:35:56,390
你可以通过配色方案风格属性

733
00:35:56,490 --> 0:35:58,158
或一个相同名字的元标签来实现

734
00:35:58,926 --> 0:36:02,196
接下来 你就能使用喜欢的

735
00:35:58,926 --> 0:36:02,196
接下来 你就能使用喜欢的

736
00:36:02,362 --> 0:36:05,866
来在浅色和黑暗模式中

737
00:36:07,034 --> 0:36:08,769
你可以在今年的WWDC了解到更多

738
00:36:08,836 --> 0:36:11,338
关于在网页内容中支持黑暗模式

739
00:36:11,638 --> 0:36:13,006
的视频

740
00:36:14,908 --> 0:36:17,277
对于你们中已经在tvOS的app

741
00:36:18,445 --> 0:36:20,914
这是一个好机会

742
00:36:21,348 --> 0:36:23,450
因为我们已经支持这个功能好几年了

743
00:36:24,418 --> 0:36:29,289
今年 你的tvOS 13的app

744
00:36:29,356 --> 0:36:30,657
默认支持黑暗模式了

745
00:36:31,725 --> 0:36:33,694
我们今天提到的多数新的API

746
00:36:33,794 --> 0:36:37,898
比如所有的动态颜色和图片资产

747
00:36:38,498 --> 0:36:40,934
但比如新系统材料等物件

748
00:36:41,001 --> 0:36:42,569
只在iOS上能使用

749
00:36:43,737 --> 0:36:46,940
现在 如果你已经在你的tvOS

750
00:36:47,641 --> 0:36:48,909
你可以适配你想要的

751
00:36:48,976 --> 0:36:52,112
所有的新功能和新的API

752
00:36:53,013 --> 0:36:56,083
但如果你已有的黑暗模式

753
00:36:56,149 --> 0:36:57,651
你无需重写所有功能

754
00:37:00,521 --> 0:37:03,223
今年 如果你想要将

755
00:37:03,790 --> 0:37:07,060
你可以以同样的方式

756
00:37:07,160 --> 0:37:10,764
使用所有相同的API

757
00:37:11,932 --> 0:37:14,401
现在 你的Mac app会遵循

758
00:37:14,468 --> 0:37:16,737
选择的黑暗模式设置

759
00:37:17,171 --> 0:37:18,772
非常简单 就像在iOS上一样

760
00:37:19,940 --> 0:37:23,243
但唯一的区别是你已经留意到的

761
00:37:23,877 --> 0:37:26,647
在Mac上 UIKit会自动提供

762
00:37:26,713 --> 0:37:30,484
不太一样的系统颜色的

763
00:37:30,717 --> 0:37:32,119
和一些材料的版本

764
00:37:32,486 --> 0:37:33,654
为了更好地适配它们

765
00:37:33,720 --> 0:37:36,690
你可能需要使用Mac提供的框架

766
00:37:37,624 --> 0:37:38,759
这样 你的app会变得更好

767
00:37:38,825 --> 0:37:41,995
就像在Mac上其他

768
00:37:45,132 --> 0:37:47,334
相不相信

769
00:37:47,401 --> 0:37:48,802
今天 你能在iOS 13上

770
00:37:49,102 --> 0:37:52,005
app开适配黑暗模式了

771
00:37:53,640 --> 0:37:56,109
只要你创建了iOS 13 SCK

772
00:37:56,510 --> 0:37:58,879
你的app会默认适配黑暗模式

773
00:37:59,680 --> 0:38:02,216
就像你在我们的示例中看到的

774
00:37:59,680 --> 0:38:02,216
就像你在我们的示例中看到的

775
00:38:03,750 --> 0:38:05,118
现在 我们已经减少了你利用

776
00:38:05,185 --> 0:38:07,788
这些新功能来快速让你的app

777
00:38:07,855 --> 0:38:10,524
适配黑暗模式的工作量了

778
00:38:11,124 --> 0:38:12,893
请确保你开始使用

779
00:38:12,960 --> 0:38:15,529
我们今年提供的

780
00:38:15,596 --> 0:38:17,064
所有的这些动态颜色和材料

781
00:38:17,564 --> 0:38:20,234
接下来

782
00:38:20,400 --> 0:38:22,636
自定义颜色 自定义图片等等

783
00:38:23,604 --> 0:38:25,405
最后 不要忘记好好利用UIKit

784
00:38:25,506 --> 0:38:30,210
的强大的客制化功能和灵活性

785
00:38:30,544 --> 0:38:32,913
来让你的app在黑暗模式下更好看

786
00:38:33,747 --> 0:38:36,617
我们非常期待随后看到

787
00:38:36,683 --> 0:38:38,318
你app在黑暗模式下的样子

788
00:38:40,120 --> 0:38:42,489
在我们演讲的页面 你可以

789
00:38:42,556 --> 0:38:45,158
了解更多信息和一些示例代码

790
00:38:45,592 --> 0:38:47,528
非常感谢大家
