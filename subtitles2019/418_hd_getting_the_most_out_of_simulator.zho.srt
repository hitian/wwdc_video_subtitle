1
00:00:06,640 --> 0:00:11,612
（充分利用模拟器）

2
00:00:12,679 --> 0:00:13,881
大家早上好

3
00:00:14,681 --> 0:00:17,117
欢迎参加充分利用模拟器演讲

4
00:00:17,184 --> 0:00:18,485
我叫Russ Bishop

5
00:00:18,552 --> 0:00:21,154
我是模拟器和设备团队的一名

6
00:00:21,822 --> 0:00:23,223
让我们开始讲吧

7
00:00:25,025 --> 0:00:28,128
今天我会告诉你们什么是模拟器

8
00:00:28,996 --> 0:00:31,532
然后Tracy会上台

9
00:00:32,466 --> 0:00:34,034
讲一些热门问题和回答

10
00:00:34,301 --> 0:00:36,370
以及充分利用模拟器app

11
00:00:37,504 --> 0:00:40,841
我会再返回来告诉你

12
00:00:41,208 --> 0:00:42,843
最后Katelyn会上台来

13
00:00:42,910 --> 0:00:44,845
告诉你们模拟器中的

14
00:00:46,346 --> 0:00:49,383
那么什么是模拟器？

15
00:00:49,516 --> 0:00:56,390
它是在Mac上模拟iOS、tvOS

16
00:00:57,858 --> 0:01:00,661
它是一个很好的开发工具

17
00:00:57,858 --> 0:01:00,661
它是一个很好的开发工具

18
00:01:01,295 --> 0:01:03,397
你的Mac有更多的内核、

19
00:01:03,664 --> 0:01:05,866
你可以并行运行多个设备

20
00:01:06,900 --> 0:01:09,570
它是一个很棒的工具

21
00:01:10,504 --> 0:01:12,806
那种解释可能有点儿不太令人满意

22
00:01:13,507 --> 0:01:18,045
为了从技术层面讲一下模拟器

23
00:01:18,111 --> 0:01:20,814
我们需要先谈谈什么是操作系统

24
00:01:22,416 --> 0:01:25,819
我们有Kernel管理硬件资源、

25
00:01:25,886 --> 0:01:28,222
分配内存、在各进程之间做出裁决

26
00:01:28,288 --> 0:01:29,323
非常地直截了当

27
00:01:30,457 --> 0:01:33,293
然后macOS位于它的上层

28
00:01:34,361 --> 0:01:36,330
我们发布了

29
00:01:36,597 --> 0:01:40,133
我们可能还有在它上层运行的一些

30
00:01:40,601 --> 0:01:43,904
我们有一些框架

31
00:01:45,205 --> 0:01:49,409
模拟器实质上是个独立的用户空间

32
00:01:49,877 --> 0:01:52,813
它有自己的launchd进程

33
00:01:52,880 --> 0:01:55,816
有自己的框架并运行自己的app

34
00:01:56,283 --> 0:02:01,088
这些都是完全独立的

35
00:01:56,283 --> 0:02:01,088
这些都是完全独立的

36
00:02:01,421 --> 0:02:03,090
如果我启动另一个模拟器

37
00:02:03,557 --> 0:02:06,693
那会打造另一个独立的用户空间

38
00:02:06,760 --> 0:02:09,363
它不仅与macOS用户空间相隔离

39
00:02:09,429 --> 0:02:11,565
还与其它运行中的模拟器相隔离

40
00:02:12,466 --> 0:02:15,169
从技术层面来说 模拟器是

41
00:02:15,235 --> 0:02:19,173
iOS、watchOS

42
00:02:20,307 --> 0:02:22,009
只不过是运行在

43
00:02:23,644 --> 0:02:27,047
拥有独立的launchd进程、

44
00:02:27,114 --> 0:02:30,317
独立的通知域名、独立的URL会话

45
00:02:30,684 --> 0:02:32,085
独立的引导程序

46
00:02:34,021 --> 0:02:36,890
它确实共享同样的文件系统

47
00:02:38,525 --> 0:02:40,360
自libSystem起

48
00:02:41,128 --> 0:02:43,797
一切都针对我们所模拟的平台

49
00:02:44,097 --> 0:02:46,333
因此包括 在最底层

50
00:02:46,400 --> 0:02:49,603
你知道的 libSystem

51
00:02:50,103 --> 0:02:51,104
以及其它框架

52
00:02:52,606 --> 0:02:54,875
它对那个平台使用ABI

53
00:02:56,443 --> 0:02:58,779
并且它是针对Mac的处理器

54
00:02:59,346 --> 0:03:00,547
它不是个仿真器

55
00:02:59,346 --> 0:03:00,547
它不是个仿真器

56
00:03:02,349 --> 0:03:04,151
下面讲一些细节

57
00:03:06,520 --> 0:03:08,989
模拟器的内存和CPU限制-

58
00:03:10,090 --> 0:03:13,327
倒不如说没有模拟设备的

59
00:03:13,894 --> 0:03:15,395
因此如果你的Mac有…

60
00:03:16,063 --> 0:03:19,132
如果你有一台新Mac Pro

61
00:03:19,833 --> 0:03:21,668
你的模拟器可以分配1TB的内存

62
00:03:22,302 --> 0:03:26,406
如果你在iPhone X上

63
00:03:28,909 --> 0:03:32,179
Mac还有不同数量的内核

64
00:03:32,646 --> 0:03:36,750
那可能是个恩惠 它可以帮助揭露

65
00:03:37,217 --> 0:03:38,752
但它是你需要引起注意的东西

66
00:03:40,387 --> 0:03:42,456
app沙盒不是强制的

67
00:03:43,290 --> 0:03:46,226
因此模拟器中的进程可以写在

68
00:03:46,293 --> 0:03:49,129
但再说一次 如果你在设备上尝试

69
00:03:50,864 --> 0:03:53,300
然而 绝大多数人的Mac都设置了

70
00:03:53,500 --> 0:03:56,136
不区分大小写文件系统

71
00:03:56,837 --> 0:03:58,906
但模拟器的全部进程

72
00:03:58,972 --> 0:04:02,309
却都使用区分大小写文件系统

73
00:03:58,972 --> 0:04:02,309
却都使用区分大小写文件系统

74
00:04:04,444 --> 0:04:05,746
然后 最后但却并不是最不重要的

75
00:04:05,812 --> 0:04:08,248
模拟器中支持

76
00:04:08,315 --> 0:04:10,150
然而设备却不支持它

77
00:04:10,784 --> 0:04:11,952
因此那是一个有用的工具

78
00:04:13,187 --> 0:04:15,022
那么现在我要把舞台交给Tracy

79
00:04:15,389 --> 0:04:17,791
她会上台来讲一些热门问题和回答

80
00:04:18,759 --> 0:04:19,593
Tracy？

81
00:04:24,965 --> 0:04:25,799
早上好！

82
00:04:26,366 --> 0:04:29,069
我叫Tracy

83
00:04:29,770 --> 0:04:33,473
那么你知道的我们总会收到一些提问

84
00:04:33,540 --> 0:04:36,910
讨论会或用户论坛中的反馈

85
00:04:37,344 --> 0:04:38,779
那么我们认为回顾一下

86
00:04:38,846 --> 0:04:41,281
其中某些问题的答案可能会有帮助

87
00:04:41,715 --> 0:04:43,584
那么我的目标是

88
00:04:43,650 --> 0:04:46,787
让你最少了解一件你以前

89
00:04:47,487 --> 0:04:49,623
在此之前 我想稍微谈谈

90
00:04:49,690 --> 0:04:52,559
为什么模拟器

91
00:04:53,460 --> 0:04:55,395
嗯 如果我们考虑

92
00:04:55,829 --> 0:04:59,499
兼容iOS 13的全部设备

93
00:05:00,033 --> 0:05:03,504
然后我们添加

94
00:05:03,937 --> 0:05:07,307
那么你其实正在查看

95
00:05:07,374 --> 0:05:08,742
都对客户可用

96
00:05:09,409 --> 0:05:11,178
并且还只是

97
00:05:11,245 --> 0:05:13,847
甚至不包含Watch和TV

98
00:05:14,515 --> 0:05:17,284
嗯 你的双肩包里要塞这么多的东西

99
00:05:17,951 --> 0:05:19,219
那么我们想

100
00:05:19,286 --> 0:05:21,755
“嗯 用这些老操作系统

101
00:05:22,189 --> 0:05:27,060
我确定你有使用老设备

102
00:05:27,828 --> 0:05:28,595
你可能会想

103
00:05:28,662 --> 0:05:32,299
“Tracy

104
00:05:32,733 --> 0:05:33,800
嗯 那可能是真的

105
00:05:34,268 --> 0:05:37,237
通过模拟器

106
00:05:37,671 --> 0:05:39,673
虽然你可能不会拥有

107
00:05:39,740 --> 0:05:42,376
但你可以使用每一个

108
00:05:43,043 --> 0:05:46,480
那会让模拟器变成你日常工作中的

109
00:05:47,181 --> 0:05:49,283
好的 让我们讲讲那些热门问题

110
00:05:49,883 --> 0:05:52,586
第一个问题

111
00:05:53,420 --> 0:05:54,254
是的 你可以

112
00:05:54,454 --> 0:05:56,290
你可以模拟捏合手势

113
00:05:56,356 --> 0:05:58,792
按住Option键时点击并拖动

114
00:06:02,396 --> 0:06:05,232
你可以模拟的另一个手势是拖放

115
00:06:06,200 --> 0:06:07,534
首先你要在app中

116
00:06:08,468 --> 0:06:12,072
然后点击Control键

117
00:06:12,673 --> 0:06:16,109
到你想去的任意地方

118
00:06:19,246 --> 0:06:20,414
哦 很不错

119
00:06:22,449 --> 0:06:23,417
下一个问题

120
00:06:23,650 --> 0:06:27,721
我可以修改模拟器

121
00:06:28,322 --> 0:06:29,223
是的 你可以

122
00:06:29,590 --> 0:06:31,725
那是通过硬件菜单实现的

123
00:06:32,059 --> 0:06:35,729
你可以选择想要使用哪个音频设备

124
00:06:37,397 --> 0:06:40,534
那样你可以聆听你的Apple音乐

125
00:06:42,302 --> 0:06:43,136
下一个问题

126
00:06:43,604 --> 0:06:45,305
iCloud在模拟器中能用吗？

127
00:06:45,772 --> 0:06:46,673
是的 它能用

128
00:06:47,007 --> 0:06:49,276
你可以通过设置app

129
00:06:49,610 --> 0:06:51,678
然后就可以在模拟器中

130
00:06:51,745 --> 0:06:53,881
使用所有的Calendars、

131
00:06:54,147 --> 0:06:55,849
Contacts

132
00:06:57,084 --> 0:07:00,921
你还可以通过使用调试按钮

133
00:06:57,084 --> 0:07:00,921
你还可以通过使用调试按钮

134
00:07:01,188 --> 0:07:02,422
触发iCloud同步

135
00:07:06,793 --> 0:07:09,062
哦 看 我下周有个休假 太好了

136
00:07:10,764 --> 0:07:11,598
下一个问题

137
00:07:12,099 --> 0:07:13,600
我可以使用摇晃手势吗？

138
00:07:14,501 --> 0:07:15,335
是的 你可以

139
00:07:15,903 --> 0:07:18,105
在这个例子中

140
00:07:18,572 --> 0:07:21,408
当收到摇晃动作时会指示出来

141
00:07:21,742 --> 0:07:25,279
那么你进入硬件菜单

142
00:07:28,348 --> 0:07:30,784
你还可以模拟内存警告

143
00:07:31,151 --> 0:07:32,586
通过调试菜单

144
00:07:39,359 --> 0:07:40,194
下一个问题

145
00:07:40,727 --> 0:07:44,665
我如何让老版模拟器

146
00:07:45,499 --> 0:07:48,535
这都是通过设备和模拟器面板实现的

147
00:07:49,002 --> 0:07:52,206
你可以从窗口菜单下找到它

148
00:07:53,707 --> 0:07:56,944
现在Xcode 11配备一个

149
00:07:57,010 --> 0:07:59,246
你可能会注意到

150
00:07:59,646 --> 0:08:02,950
但你总是可以按照需要

151
00:07:59,646 --> 0:08:02,950
但你总是可以按照需要

152
00:08:03,817 --> 0:08:06,653
实现方式是进入模拟器标签

153
00:08:07,855 --> 0:08:11,058
接下来我们要做的是点击

154
00:08:12,392 --> 0:08:14,895
然后选择设备类型

155
00:08:15,562 --> 0:08:18,098
以及想要使用的操作系统

156
00:08:19,299 --> 0:08:23,103
在这个例子中 对于设备类型

157
00:08:23,770 --> 0:08:27,307
Xcode 11

158
00:08:27,374 --> 0:08:28,842
一直支持到iPad Mini 2

159
00:08:30,944 --> 0:08:34,280
你要给这个模拟器命名

160
00:08:35,048 --> 0:08:37,717
现在将呈现你新创建的模拟器目标

161
00:08:39,285 --> 0:08:42,121
且你可以在新的iPad Mini

162
00:08:44,925 --> 0:08:47,060
让我们花点儿时间

163
00:08:47,561 --> 0:08:52,566
预设Watch模拟器对已自动添加

164
00:08:52,966 --> 0:08:55,736
但你可以通过点击加号按钮

165
00:08:58,405 --> 0:09:01,408
再说一次

166
00:08:58,405 --> 0:09:01,408
再说一次

167
00:09:03,076 --> 0:09:04,144
然后点击配对

168
00:09:07,648 --> 0:09:11,151
要修改活跃的配对

169
00:09:15,889 --> 0:09:18,759
你还可以下载老版模拟器

170
00:09:19,059 --> 0:09:22,462
通过进入Xcode首选项

171
00:09:22,796 --> 0:09:24,998
你可以选择你所需要的然后点击安装

172
00:09:25,299 --> 0:09:26,934
然后就会安装老版模拟器

173
00:09:27,067 --> 0:09:28,535
然后你就可以选择它们了

174
00:09:28,602 --> 0:09:31,405
根据你项目中的部署目的地设置

175
00:09:33,106 --> 0:09:36,643
你还可以通过使用硬件设备按钮

176
00:09:36,844 --> 0:09:38,011
然后就会启动老版模拟器

177
00:09:40,447 --> 0:09:43,784
这将允许你并排显示较新的操作系统

178
00:09:43,851 --> 0:09:45,652
和较老的操作系统

179
00:09:49,323 --> 0:09:53,594
你可以通过取消勾选“显示为运行

180
00:09:54,494 --> 0:09:58,031
你还可以删除模拟器目标

181
00:09:58,665 --> 0:10:00,767
并且你可以使用键盘上的删除按钮

182
00:09:58,665 --> 0:10:00,767
并且你可以使用键盘上的删除按钮

183
00:10:00,834 --> 0:10:04,137
或你可以使用情境按钮

184
00:10:04,204 --> 0:10:06,840
你还可以选择所显示的其它项

185
00:10:07,307 --> 0:10:08,642
请记住 如果你改主意了

186
00:10:08,709 --> 0:10:11,912
你总是可以通过创建模拟器目标

187
00:10:12,813 --> 0:10:14,248
好的 让我们看下一个问题

188
00:10:14,915 --> 0:10:16,783
模拟器霸占了太多屏幕空间

189
00:10:16,850 --> 0:10:18,018
我能把它们变小点儿吗？

190
00:10:19,253 --> 0:10:20,087
是的 你可以

191
00:10:20,153 --> 0:10:22,956
在模拟器上有三种可用的预设

192
00:10:23,824 --> 0:10:28,095
物理尺寸、点精确和像素精确

193
00:10:28,362 --> 0:10:29,429
这些都是什么意思呢？

194
00:10:29,830 --> 0:10:32,766
嗯 外形尺寸实际上是

195
00:10:33,133 --> 0:10:36,270
你可以举起设备放在屏幕上

196
00:10:36,670 --> 0:10:38,105
点精确是指

197
00:10:38,172 --> 0:10:40,941
一个UIKit点

198
00:10:41,441 --> 0:10:44,811
然后像素精确是指逐像素呈现

199
00:10:44,878 --> 0:10:46,380
基于你的监控器分辨率

200
00:10:47,381 --> 0:10:50,017
或有人可能了解 你总是可以拖动

201
00:10:50,217 --> 0:10:53,954
打开模拟器 然后随意调整它的尺寸

202
00:10:54,021 --> 0:10:56,223
你最大可以把它调整为

203
00:10:58,892 --> 0:10:59,760
下一个问题

204
00:11:00,394 --> 0:11:03,397
模拟器可以帮助我调试UI动画吗？

205
00:11:03,897 --> 0:11:04,765
是的 它可以

206
00:11:04,865 --> 0:11:08,435
这通过调试菜单下的慢动画实现

207
00:11:08,869 --> 0:11:11,872
一旦你切换为慢动画

208
00:11:11,939 --> 0:11:15,275
它将很慢地运行

209
00:11:17,644 --> 0:11:19,179
降低UI动画速度

210
00:11:21,915 --> 0:11:22,749
下一个问题

211
00:11:23,517 --> 0:11:25,285
Siri能在模拟器中使用吗？

212
00:11:26,620 --> 0:11:27,454
是的 它能

213
00:11:27,521 --> 0:11:30,424
只要你给模拟器提供麦克风权限

214
00:11:30,891 --> 0:11:33,994
你可以在全部模拟器平台上

215
00:11:34,561 --> 0:11:37,130
此外 你还可以从硬件菜单

216
00:11:37,197 --> 0:11:39,366
或使用键盘快捷键找到Siri

217
00:11:42,169 --> 0:11:43,036
下一个问题

218
00:11:43,604 --> 0:11:46,006
如何控制我的tvOS模拟器？

219
00:11:46,573 --> 0:11:48,675
嗯 有几种不同的实现方式

220
00:11:48,976 --> 0:11:52,412
其中一种是使用

221
00:11:52,846 --> 0:11:54,615
它位于硬件菜单下

222
00:11:54,715 --> 0:11:55,549
点击它

223
00:11:55,782 --> 0:11:58,952
要激活那个区域

224
00:11:59,286 --> 0:12:00,754
并移动游标即可

225
00:11:59,286 --> 0:12:00,754
并移动游标即可

226
00:12:03,023 --> 0:12:06,760
另一种方式是

227
00:12:06,894 --> 0:12:07,628
你给它配对

228
00:12:08,562 --> 0:12:11,098
按住遥控上的加号和菜单按钮

229
00:12:11,498 --> 0:12:13,734
一旦配对成功 你就可以

230
00:12:13,934 --> 0:12:17,771
在tvOS模拟器上的硬件

231
00:12:20,374 --> 0:12:23,110
你还可以使用游戏控制器

232
00:12:23,177 --> 0:12:25,579
对于简单的导航

233
00:12:27,915 --> 0:12:28,749
下一个问题

234
00:12:29,349 --> 0:12:33,187
我可以在iOS 13模拟器上

235
00:12:34,188 --> 0:12:35,022
是的 你可以

236
00:12:35,556 --> 0:12:39,026
必须让Xcode 10运行在

237
00:12:39,459 --> 0:12:41,595
与Xcode 11-Beta

238
00:12:41,995 --> 0:12:44,064
你要做的第一件事就是

239
00:12:44,298 --> 0:12:45,832
同时也启动一个模拟器

240
00:12:46,366 --> 0:12:49,203
那将为你提供iOS 13运行时间

241
00:12:49,803 --> 0:12:53,307
然后关闭Xcode 但保持

242
00:12:54,441 --> 0:12:57,277
然后你就会进入老版

243
00:12:58,712 --> 0:13:01,315
把它放在前台 然后你就可以

244
00:12:58,712 --> 0:13:01,315
把它放在前台 然后你就可以

245
00:13:02,149 --> 0:13:03,350
让我来演示一下如何实现

246
00:13:03,684 --> 0:13:05,485
我们正在运行Xcode 10

247
00:13:06,854 --> 0:13:08,956
我们要做的就是选择

248
00:13:09,056 --> 0:13:12,259
iOS 12.2模拟器

249
00:13:12,659 --> 0:13:13,994
在它上头运行我们的app

250
00:13:14,862 --> 0:13:17,965
然后我们要改成iOS 13模拟器

251
00:13:18,532 --> 0:13:20,067
我们要在它上头运行我们的app

252
00:13:21,935 --> 0:13:24,538
现在你可以看到

253
00:13:29,409 --> 0:13:31,144
哦 哇 得到了你们的掌声

254
00:13:33,247 --> 0:13:34,081
下一个问题

255
00:13:34,147 --> 0:13:36,350
我可以把内容复制到模拟器中吗？

256
00:13:37,050 --> 0:13:39,219
复制内容的方法有许多种

257
00:13:39,286 --> 0:13:40,687
其中一种是通过拖放

258
00:13:40,754 --> 0:13:44,525
通过拖放 你可以

259
00:13:44,858 --> 0:13:46,994
照片和视频以及URL

260
00:13:49,663 --> 0:13:52,566
在这个例子中 我可以让我的项目

261
00:13:53,033 --> 0:13:56,803
获取我的app捆绑包

262
00:13:57,504 --> 0:13:59,339
那将安装app捆绑包

263
00:14:03,544 --> 0:14:06,547
在这个例子中

264
00:14:07,714 --> 0:14:11,351
我选择全部 然后我只需要把它们

265
00:14:11,919 --> 0:14:14,021
它们将自动进入

266
00:14:15,155 --> 0:14:17,324
哦 等一下 我拖入了四个

267
00:14:17,758 --> 0:14:18,625
哦

268
00:14:18,825 --> 0:14:23,430
那是因为照片和视频文件进行了重新

269
00:14:27,134 --> 0:14:28,702
拖放URL很简单

270
00:14:28,769 --> 0:14:31,872
只需打开Safari 选中URL

271
00:14:36,877 --> 0:14:40,581
你还可以从Safari内使用

272
00:14:40,848 --> 0:14:43,383
模拟器是Safari

273
00:14:43,450 --> 0:14:44,351
选中它

274
00:14:44,651 --> 0:14:45,919
它会打开一个对话框

275
00:14:45,986 --> 0:14:47,354
你可以选择一个模拟器

276
00:14:47,421 --> 0:14:49,723
或你可以同时进入所有模拟器

277
00:14:56,530 --> 0:15:00,200
同时你可以通过共享表单共享位置

278
00:14:56,530 --> 0:15:00,200
同时你可以通过共享表单共享位置

279
00:15:00,534 --> 0:15:02,803
在Maps app

280
00:15:02,870 --> 0:15:05,172
点击模拟器 选择你的目的地

281
00:15:05,706 --> 0:15:07,908
然后它将与模拟器共享那个地理位置

282
00:15:11,845 --> 0:15:14,882
好的 提一下其它有帮助的提示

283
00:15:16,583 --> 0:15:20,254
硬件菜单下有自动旋转设备

284
00:15:20,320 --> 0:15:21,989
那么如果你切换为这个设置

285
00:15:22,222 --> 0:15:26,426
它将遵循你项目中的设置

286
00:15:29,029 --> 0:15:32,833
在模拟器中我们有一些

287
00:15:33,133 --> 0:15:36,503
其中一个就像在高速路上开车一样

288
00:15:38,872 --> 0:15:41,308
你还可以输入你自己的

289
00:15:41,675 --> 0:15:44,077
通过输入经度和纬度

290
00:15:52,519 --> 0:15:55,389
如果你想了解当来电时

291
00:15:55,455 --> 0:15:57,925
你可以使用切换通话中状态

292
00:15:59,126 --> 0:16:01,762
或你可以使用键盘快捷键

293
00:15:59,126 --> 0:16:01,762
或你可以使用键盘快捷键

294
00:16:06,033 --> 0:16:09,436
你可以用外部显示器显示不同内容

295
00:16:09,503 --> 0:16:14,274
在本例中 我们正在播放一些视频

296
00:16:14,575 --> 0:16:17,377
我们选择了一些不同的显示分辨率

297
00:16:23,984 --> 0:16:26,153
模拟器上还可以使用暗黑模式

298
00:16:26,486 --> 0:16:28,488
你可以从开发者菜单下找到它

299
00:16:28,589 --> 0:16:31,191
在设置下切换到开发者菜单

300
00:16:31,258 --> 0:16:33,460
然后点击暗黑外观

301
00:16:40,467 --> 0:16:43,770
你还可以在模拟器中修改墙纸

302
00:16:43,837 --> 0:16:46,173
你只需要把照片拖入

303
00:16:46,373 --> 0:16:47,241
然后点击照片

304
00:16:47,307 --> 0:16:48,375
使用共享表单

305
00:16:48,809 --> 0:16:51,245
那会把它放到前台

306
00:16:51,311 --> 0:16:52,613
选择它作为墙纸

307
00:16:52,946 --> 0:16:56,416
然后模拟器也会把它

308
00:16:56,483 --> 0:16:58,185
用作背景墙纸 用作锁屏墙纸

309
00:16:59,086 --> 0:17:00,954
现在你有新背景了

310
00:16:59,086 --> 0:17:00,954
现在你有新背景了

311
00:17:03,824 --> 0:17:05,559
在模拟器中还可以使用听写功能

312
00:17:05,893 --> 0:17:07,528
你可以在设置app下找到它

313
00:17:08,362 --> 0:17:12,465
在键盘下有一个启动听写

314
00:17:13,733 --> 0:17:15,301
一旦你打开它

315
00:17:16,435 --> 0:17:19,106
你会打开一个app 接受键盘输入

316
00:17:19,873 --> 0:17:22,242
使用Command-K

317
00:17:22,576 --> 0:17:25,546
你会在那儿看到麦克风

318
00:17:31,718 --> 0:17:34,388
还可以修改输入语种

319
00:17:34,454 --> 0:17:39,059
你可以进入键盘

320
00:17:39,893 --> 0:17:42,262
有许多不同的语种

321
00:17:43,864 --> 0:17:46,600
然后再说一次

322
00:17:47,601 --> 0:17:50,604
点击地球图标

323
00:17:53,941 --> 0:17:55,175
提到键盘

324
00:17:55,843 --> 0:17:58,512
模拟器中还支持新的

325
00:17:58,679 --> 0:18:03,250
只需要打开键盘 开始你的路径

326
00:17:58,679 --> 0:18:03,250
只需要打开键盘 开始你的路径

327
00:18:09,523 --> 0:18:13,293
你还可以通过使用模拟器帮助菜单

328
00:18:14,995 --> 0:18:16,129
键入你想要了解的内容

329
00:18:16,196 --> 0:18:19,566
并且搜索功能也会为你指出

330
00:18:21,034 --> 0:18:22,202
嗯 我的时间就要到了

331
00:18:22,269 --> 0:18:24,905
我希望你们学到了至少一个

332
00:18:24,972 --> 0:18:25,906
你以前不知道的与模拟器有关的信息

333
00:18:26,473 --> 0:18:27,774
现在我要把舞台交给Russ

334
00:18:27,841 --> 0:18:30,344
他会讲通过命令行运行模拟器

335
00:18:30,544 --> 0:18:31,378
谢谢

336
00:18:35,182 --> 0:18:36,049
谢谢Tracy

337
00:18:37,284 --> 0:18:41,355
让我们谈谈从命令行运行模拟器

338
00:18:43,924 --> 0:18:46,894
如果我今天要留给你一件东西

339
00:18:47,828 --> 0:18:51,164
那就是xcrun模拟器控制

340
00:18:53,400 --> 0:18:55,135
但如果我今天可以留给你两件东西

341
00:18:55,502 --> 0:18:58,338
那应该是

342
00:18:59,673 --> 0:19:01,975
模拟器控制可以提供大量帮助

343
00:18:59,673 --> 0:19:01,975
模拟器控制可以提供大量帮助

344
00:19:02,509 --> 0:19:04,278
如果你运行它但却没有命令

345
00:19:04,378 --> 0:19:06,547
它会告诉你全部可用的命令

346
00:19:07,014 --> 0:19:10,050
如果你运行帮助 然后运行命令名称

347
00:19:10,417 --> 0:19:12,719
关于那个特定命令的更多详细信息

348
00:19:14,321 --> 0:19:18,125
我要讲一些可能会对你有帮助的命令

349
00:19:18,992 --> 0:19:22,129
然后简单地谈谈其它命令

350
00:19:24,031 --> 0:19:26,600
那么第一个命令 最基本的命令

351
00:19:26,667 --> 0:19:27,534
是list命令

352
00:19:28,635 --> 0:19:32,539
这会为你提供你所拥有的设备类型、

353
00:19:32,906 --> 0:19:34,641
我缩短了这个列表

354
00:19:34,708 --> 0:19:37,044
你很可能会在你自己的机器上

355
00:19:38,846 --> 0:19:41,415
我们在这里可以看到有设备类型

356
00:19:42,115 --> 0:19:44,017
既有它们的简称

357
00:19:44,685 --> 0:19:47,354
运行时间、简称和标识符

358
00:19:48,222 --> 0:19:52,392
我的设备 它的标识符

359
00:19:54,127 --> 0:19:57,064
能接受比如设备类型

360
00:19:57,130 --> 0:20:00,601
都能接受名称 简称

361
00:19:57,130 --> 0:20:00,601
都能接受名称 简称

362
00:20:00,968 --> 0:20:03,270
当你在终端键入时可以使用简称

363
00:20:03,337 --> 0:20:04,972
从而节省敲键盘的时间

364
00:20:05,506 --> 0:20:07,975
但我强烈推荐对于自动化和脚本来说

365
00:20:08,308 --> 0:20:12,012
最好是使用完整标识符

366
00:20:13,680 --> 0:20:16,650
list命令接受一些不同的类

367
00:20:17,417 --> 0:20:18,819
其中一类是设备

368
00:20:18,952 --> 0:20:24,157
那么在这个例子中

369
00:20:24,224 --> 0:20:25,292
我只想查找设备

370
00:20:25,592 --> 0:20:26,727
我可以指定它

371
00:20:27,261 --> 0:20:29,663
并且我也可以提供一个搜索字符串

372
00:20:30,597 --> 0:20:33,467
在这个例子中 我只想查找

373
00:20:35,969 --> 0:20:38,172
list命令还有一个JSON标识

374
00:20:38,572 --> 0:20:40,974
会输出一个机器可读的JSON文件

375
00:20:41,041 --> 0:20:43,277
你可以用于进行自动化

376
00:20:47,714 --> 0:20:50,250
我要讲的下一个命令

377
00:20:51,685 --> 0:20:54,721
有人可能已经听说了我们今年

378
00:20:54,821 --> 0:20:59,159
我需要一个独立的Watch模拟器

379
00:20:59,560 --> 0:21:01,795
我要调用这个测试Watch

380
00:20:59,560 --> 0:21:01,795
我要调用这个测试Watch

381
00:21:02,930 --> 0:21:07,568
指定我想要的设备

382
00:21:08,302 --> 0:21:11,438
我想让它在

383
00:21:12,806 --> 0:21:16,176
输出的是设备的标识符

384
00:21:17,711 --> 0:21:20,380
因此我可以在环境变量中捕捉到它

385
00:21:20,447 --> 0:21:21,849
或用于编写脚本

386
00:21:22,683 --> 0:21:23,917
在这个小例子中

387
00:21:24,518 --> 0:21:26,320
我给那个值设置了新设备

388
00:21:26,520 --> 0:21:30,224
然后看 自动程序重复了

389
00:21:30,290 --> 0:21:31,291
我们所创建的设备的标识符

390
00:21:32,659 --> 0:21:36,530
绝大部分模拟器控制命令

391
00:21:37,197 --> 0:21:39,166
如果成功 值为零并退出

392
00:21:39,433 --> 0:21:41,802
如果失败 值为非零代码并退出

393
00:21:42,269 --> 0:21:44,371
报错被打印到标准报错

394
00:21:44,905 --> 0:21:48,842
然后实际的输出

395
00:21:48,909 --> 0:21:50,544
输出到标准输出

396
00:21:53,514 --> 0:21:56,884
我要讲的下一个命令

397
00:21:58,285 --> 0:22:00,621
spawn命令会暂停xspawn

398
00:21:58,285 --> 0:22:00,621
spawn命令会暂停xspawn

399
00:22:00,888 --> 0:22:03,924
它是模拟环境中的一个进程

400
00:22:04,591 --> 0:22:07,094
你可能会想“它有什么用？”

401
00:22:07,594 --> 0:22:09,396
嗯 我们把一些

402
00:22:09,630 --> 0:22:11,532
搬到了模拟器中

403
00:22:14,001 --> 0:22:15,435
在这个例子中是作为默认实用程序

404
00:22:15,502 --> 0:22:18,038
我要指定我想要模拟的设备

405
00:22:18,805 --> 0:22:20,741
在这个例子中

406
00:22:21,208 --> 0:22:22,743
因为我有一个引导模拟器

407
00:22:22,910 --> 0:22:24,878
因此我实际上不需要指定它是哪个

408
00:22:25,512 --> 0:22:29,783
我要比如默认写入

409
00:22:30,250 --> 0:22:33,287
我想把ResetDatabase键设为是

410
00:22:34,121 --> 0:22:37,824
这是一种便利的方式

411
00:22:38,225 --> 0:22:39,159
修改你app的用户默认值

412
00:22:41,061 --> 0:22:42,996
我还可以运行

413
00:22:43,130 --> 0:22:45,966
如果你以前没见过

414
00:22:46,600 --> 0:22:49,269
你可传递一Predicate参数

415
00:22:49,803 --> 0:22:51,505
嗯 你可以在模拟器上做同样的事

416
00:22:53,006 --> 0:22:54,908
在这个例子中

417
00:22:54,975 --> 0:22:58,645
senderImagePath CONTAINS

418
00:22:59,146 --> 0:23:02,249
因为我想调试与URL会话

419
00:22:59,146 --> 0:23:02,249
因为我想调试与URL会话

420
00:23:04,818 --> 0:23:07,287
然后我可以以流形式查看输出日志

421
00:23:07,955 --> 0:23:10,257
你可能会注意到

422
00:23:10,324 --> 0:23:13,093
我正在使用支持颜色的交互性终端

423
00:23:13,393 --> 0:23:14,761
它把那个信息传过来

424
00:23:14,828 --> 0:23:18,532
从而日志流会为我提供一些

425
00:23:19,032 --> 0:23:23,570
并且在这里我可以看到

426
00:23:23,637 --> 0:23:25,272
allowsCellularAccess被设为1

427
00:23:28,342 --> 0:23:29,743
提到日志

428
00:23:29,810 --> 0:23:33,480
我要讲的下一个命令是

429
00:23:35,015 --> 0:23:37,784
这是一个非常有用的命令

430
00:23:38,519 --> 0:23:42,422
diagnose命令

431
00:23:42,489 --> 0:23:45,425
还连接短暂日志和dump系统状态

432
00:23:45,692 --> 0:23:47,528
那在追踪问题时很有用

433
00:23:48,829 --> 0:23:51,565
它是在自动化系统中运行的

434
00:23:51,765 --> 0:23:53,033
如果你测试失败

435
00:23:53,667 --> 0:23:58,539
或出现某种问题

436
00:23:59,173 --> 0:24:01,808
这对于归档错误也很有帮助

437
00:23:59,173 --> 0:24:01,808
这对于归档错误也很有帮助

438
00:24:02,576 --> 0:24:04,444
因此在自动化情境中

439
00:24:04,912 --> 0:24:08,515
我要传递-l标识以跳过隐私警告

440
00:24:08,582 --> 0:24:11,885
但我强烈建议你

441
00:24:12,319 --> 0:24:14,121
并查看Apple的隐私权政策

442
00:24:14,188 --> 0:24:16,423
这会告诉你它将收集哪种类型的信息

443
00:24:16,723 --> 0:24:18,592
可能包含账户名称之类的信息

444
00:24:20,794 --> 0:24:21,929
诊断可以运行

445
00:24:21,995 --> 0:24:23,797
它会告诉我它把文件写入到了哪里

446
00:24:24,231 --> 0:24:25,933
如果我在工作中使用了这个诊断命令

447
00:24:25,999 --> 0:24:27,835
我还会得到一个弹出的

448
00:24:28,168 --> 0:24:30,003
给我显示它所产生的文件

449
00:24:31,004 --> 0:24:33,307
因此 如果你要通过新反馈助手

450
00:24:33,373 --> 0:24:34,575
在反馈中发送

451
00:24:35,275 --> 0:24:39,079
如果是模拟器的问题

452
00:24:39,646 --> 0:24:42,916
那使得查找具体哪里出错

453
00:24:43,250 --> 0:24:45,786
我强烈推荐你在你自己的工作中

454
00:24:45,853 --> 0:24:47,254
如果你要把错误发送到…

455
00:24:47,821 --> 0:24:48,889
比如 如果你在做QA

456
00:24:48,956 --> 0:24:50,157
你要把一个错误发送给软件工程师

457
00:24:50,224 --> 0:24:51,725
嘿 app-某些地方出错了

458
00:24:52,392 --> 0:24:53,527
附加一个诊断

459
00:24:53,927 --> 0:24:56,196
那将包含

460
00:24:56,997 --> 0:25:00,634
我要讲的下一个命令是

461
00:24:56,997 --> 0:25:00,634
我要讲的下一个命令是

462
00:25:02,135 --> 0:25:04,137
Launch命令启动app

463
00:25:05,272 --> 0:25:09,076
你可能会问“它和spawn命令

464
00:25:09,443 --> 0:25:12,045
嗯 launch会礼貌地询问系统

465
00:25:12,112 --> 0:25:14,882
“请问可以开启

466
00:25:15,482 --> 0:25:18,619
这等同于在主屏幕上轻触图标

467
00:25:19,486 --> 0:25:20,888
事实上 在iOS、

468
00:25:20,954 --> 0:25:23,390
只有这样

469
00:25:23,724 --> 0:25:25,826
进程才可以在屏幕上显示信息

470
00:25:26,994 --> 0:25:28,061
因此它非常重要

471
00:25:28,128 --> 0:25:30,631
如果你实际上想启动一个

472
00:25:30,998 --> 0:25:32,633
你需要使用launch命令

473
00:25:34,268 --> 0:25:36,970
我要再一次指定引导别名

474
00:25:37,037 --> 0:25:39,039
因为我只有一个引导模拟器

475
00:25:40,507 --> 0:25:43,410
我要启动我的

476
00:25:44,111 --> 0:25:45,679
传递一些参数

477
00:25:46,346 --> 0:25:47,714
如果你之前没见过的话

478
00:25:48,081 --> 0:25:51,018
用户默认允许你从命令行

479
00:25:51,552 --> 0:25:53,020
覆盖你作为参数设置的默认

480
00:25:53,820 --> 0:25:55,756
用一个单破折号作为键的前缀

481
00:25:56,423 --> 0:25:58,592
接着是键名称 然后指定值

482
00:25:58,992 --> 0:26:01,261
对于我的app的那个特定启动

483
00:25:58,992 --> 0:26:01,261
对于我的app的那个特定启动

484
00:26:01,895 --> 0:26:05,799
-MyDefaultKey将被

485
00:26:06,633 --> 0:26:09,002
Launch命令可以为我实现一些

486
00:26:09,670 --> 0:26:12,706
如果我给控制台传递-pty标识

487
00:26:13,841 --> 0:26:18,812
launch命令会把我app的

488
00:26:19,413 --> 0:26:21,415
连接到我正在使用的终端

489
00:26:22,583 --> 0:26:24,117
因此当我启动这个app时

490
00:26:24,551 --> 0:26:27,654
我会直接在我的终端中

491
00:26:28,388 --> 0:26:31,658
不仅如此 我还可以获得调试功能

492
00:26:32,192 --> 0:26:34,494
在这个例子中 我按下回车键

493
00:26:34,862 --> 0:26:36,563
它会dump一些调试状态

494
00:26:36,930 --> 0:26:39,566
因此在终端中 我可以按回车键

495
00:26:40,200 --> 0:26:42,669
从app中打印调试状态

496
00:26:43,270 --> 0:26:46,073
当你调试时

497
00:26:47,374 --> 0:26:49,710
你可能会注意到的另一件事就是

498
00:26:49,910 --> 0:26:51,645
会发送一个中断信号

499
00:26:52,346 --> 0:26:53,814
模拟器控件发现信号

500
00:26:54,515 --> 0:26:56,984
获取信号并把它传给app

501
00:26:57,551 --> 0:27:00,921
那不仅适用于类似中断信号的信号

502
00:26:57,551 --> 0:27:00,921
那不仅适用于类似中断信号的信号

503
00:27:00,988 --> 0:27:03,357
还适用于用户信号：

504
00:27:03,991 --> 0:27:06,159
还有方式可以设置你的app

505
00:27:06,226 --> 0:27:08,795
使其包含调试信息

506
00:27:10,931 --> 0:27:12,900
那么还有更多的命令…

507
00:27:14,268 --> 0:27:16,003
我没有时间一一讲到

508
00:27:16,069 --> 0:27:18,639
我只想简略地做一个概述

509
00:27:19,740 --> 0:27:22,442
Boot命令 正如

510
00:27:23,710 --> 0:27:27,381
Shutdown命令也非常明显

511
00:27:28,081 --> 0:27:30,017
但关机接受特殊别名

512
00:27:30,717 --> 0:27:33,554
如果是全部别名

513
00:27:35,055 --> 0:27:38,058
Delete 正如你所期待的那样

514
00:27:38,825 --> 0:27:42,996
但它还接受另一个便利的别名-

515
00:27:43,797 --> 0:27:46,233
那将查找全部使用了运行时间

516
00:27:46,700 --> 0:27:49,703
但却对你不再可用的模拟器

517
00:27:50,003 --> 0:27:52,172
也许是老版的Xcode

518
00:27:52,606 --> 0:27:54,308
或一个下载的模拟器运行时间

519
00:27:54,374 --> 0:27:56,210
就像Tracy给你们展示的

520
00:27:56,543 --> 0:27:58,312
那将清除全部这些模拟器

521
00:27:58,378 --> 0:27:59,780
并恢复相应的磁盘空间

522
00:28:02,182 --> 0:28:03,517
接下来是pair命令

523
00:28:03,817 --> 0:28:07,588
有pair命令 也有相关联的

524
00:28:07,654 --> 0:28:10,057
你可以从命令行设置

525
00:28:11,425 --> 0:28:14,561
Addmedia命令类似于

526
00:28:14,962 --> 0:28:17,698
把照片和媒体拖放到模拟器中

527
00:28:17,764 --> 0:28:18,899
你也可以用脚本实现

528
00:28:20,667 --> 0:28:22,870
Get app container

529
00:28:23,737 --> 0:28:25,105
如果你的app出问题了

530
00:28:25,172 --> 0:28:27,441
也许是正在写一个被损坏的文件

531
00:28:27,508 --> 0:28:29,243
或它尝试加载某些东西

532
00:28:29,309 --> 0:28:31,044
你知道的 它应该在那儿

533
00:28:31,578 --> 0:28:33,780
Get app container

534
00:28:34,314 --> 0:28:38,051
让你找到app的数据容器

535
00:28:38,452 --> 0:28:40,787
也许是你的app和你app的扩展

536
00:28:41,221 --> 0:28:43,657
然后你就可以检验实际内容

537
00:28:43,724 --> 0:28:47,127
检验来自Finder或

538
00:28:48,128 --> 0:28:50,163
Install命令 非常类似于

539
00:28:50,230 --> 0:28:52,299
Tracy刚给你展示的

540
00:28:52,366 --> 0:28:54,201
你可以从命令行安装一个app

541
00:28:55,969 --> 0:28:58,705
然后我要提到的最后一个是io命令

542
00:28:59,039 --> 0:29:01,074
Io自身有许多子命令

543
00:28:59,039 --> 0:29:01,074
Io自身有许多子命令

544
00:29:01,642 --> 0:29:04,344
很可能最重要的一个是屏幕截图

545
00:29:04,745 --> 0:29:08,048
它可以让你在模拟器中

546
00:29:09,683 --> 0:29:13,053
然后我要讲的最后一个命令是

547
00:29:15,122 --> 0:29:19,193
Clone是一个非常强大的命令

548
00:29:19,560 --> 0:29:22,229
用于自动化 用于测试 用于做实验

549
00:29:23,197 --> 0:29:26,066
Clone允许你按照你想要的方式

550
00:29:26,300 --> 0:29:28,702
安装app

551
00:29:29,369 --> 0:29:30,904
然后你可以关闭那个模拟器

552
00:29:31,004 --> 0:29:33,140
并复制多个一模一样的模拟器

553
00:29:34,007 --> 0:29:35,542
然后你可以运行那些复制的模拟器

554
00:29:36,276 --> 0:29:38,979
实施你的实验 完成后就丢弃它们

555
00:29:39,980 --> 0:29:41,415
这可以节省很多时间

556
00:29:41,882 --> 0:29:43,584
并节省大量磁盘空间

557
00:29:43,650 --> 0:29:47,387
因为clone

558
00:29:48,188 --> 0:29:50,657
如果你的游戏有价值1GB的资产

559
00:29:50,924 --> 0:29:53,327
并且你想并行运行多个测试

560
00:29:53,660 --> 0:29:56,396
你可以继续去做

561
00:29:56,930 --> 0:30:00,667
那么说得多不如做的多

562
00:29:56,930 --> 0:30:00,667
那么说得多不如做的多

563
00:30:02,736 --> 0:30:03,604
好的

564
00:30:05,372 --> 0:30:07,241
我要做的第一件事

565
00:30:07,307 --> 0:30:11,211
就是打开模拟器

566
00:30:11,445 --> 0:30:14,381
我将作为基准使用 用作对比

567
00:30:16,216 --> 0:30:17,518
我要打开那个模拟器

568
00:30:18,352 --> 0:30:20,254
你可以看到打开了模拟器app

569
00:30:20,554 --> 0:30:21,955
因此它是自动附加到模拟器上的

570
00:30:24,892 --> 0:30:28,362
我要做的第二件事就是安装app

571
00:30:28,729 --> 0:30:30,931
这里是我的app捆绑包 整装待发

572
00:30:31,298 --> 0:30:32,633
正如我之前告诉过你的那样

573
00:30:32,733 --> 0:30:34,434
我要在那个app中

574
00:30:36,837 --> 0:30:37,738
运行install、

575
00:30:38,172 --> 0:30:41,441
我们会看到它出现在主屏幕上了

576
00:30:43,610 --> 0:30:46,280
接下来我要做的是关闭这个模拟器

577
00:30:46,346 --> 0:30:48,182
在我们克隆它之前

578
00:30:54,121 --> 0:30:56,490
一旦我关掉它之后

579
00:30:57,824 --> 0:31:00,327
我就可以创建一个克隆

580
00:30:57,824 --> 0:31:00,327
我就可以创建一个克隆

581
00:31:04,665 --> 0:31:06,633
现在我要再次运行这个命令

582
00:31:06,700 --> 0:31:08,602
创建另一个克隆 clone-2

583
00:31:13,740 --> 0:31:15,876
现在我有两个克隆模拟器

584
00:31:16,043 --> 0:31:17,644
我要继续并要求它们boot

585
00:31:22,049 --> 0:31:24,618
在这里我们可以看到

586
00:31:25,319 --> 0:31:26,587
它们的启动启动速度快多了

587
00:31:26,653 --> 0:31:30,490
因为我不需要支付

588
00:31:30,824 --> 0:31:33,560
我已经在设置基础模拟器时

589
00:31:34,061 --> 0:31:35,462
因此那会非常节省时间

590
00:31:36,763 --> 0:31:39,967
然后这里是我可以进行哪些设置

591
00:31:40,801 --> 0:31:44,238
为演示准备的东西已经就位

592
00:31:44,738 --> 0:31:48,442
然后我可以在这两个模拟器中

593
00:31:50,577 --> 0:31:53,013
现在有人可能认出这段代码了

594
00:31:53,080 --> 0:31:54,715
这是Metal DeferredLighting的演示

595
00:31:55,215 --> 0:31:57,951
这是我们以前不能运行的东西

596
00:31:58,018 --> 0:32:02,122
它是Xcode 11中的新功能

597
00:31:58,018 --> 0:32:02,122
它是Xcode 11中的新功能

598
00:32:02,556 --> 0:32:05,592
为了让你们了解模拟器中的

599
00:32:06,960 --> 0:32:08,095
我要邀请Katelyn上台

600
00:32:08,729 --> 0:32:09,563
Katelyn？

601
00:32:15,369 --> 0:32:16,236
谢谢

602
00:32:17,237 --> 0:32:18,705
谢谢Russ 早上好

603
00:32:18,772 --> 0:32:22,209
我是Katelyn Hicks

604
00:32:22,743 --> 0:32:26,580
今天 我感到非常激动 我要分享

605
00:32:27,147 --> 0:32:31,084
让我们具体看看如何在模拟器中

606
00:32:33,620 --> 0:32:36,590
因为运行在macOS Catalina

607
00:32:36,924 --> 0:32:38,725
模拟器现在支持Metal了

608
00:32:39,293 --> 0:32:41,328
但那对于你的app来说

609
00:32:41,962 --> 0:32:43,764
嗯 两件事

610
00:32:44,431 --> 0:32:47,100
对于所有app来说

611
00:32:48,001 --> 0:32:49,469
模拟器完全是GPU加速的

612
00:32:49,970 --> 0:32:54,141
第二 Metal API现在可以

613
00:32:56,176 --> 0:32:59,246
让我们看看当运行在

614
00:32:59,313 --> 0:33:02,216
和Xcode 11上时

615
00:32:59,313 --> 0:33:02,216
和Xcode 11上时

616
00:33:02,783 --> 0:33:05,085
我们会快速浏览一些app

617
00:33:05,686 --> 0:33:07,521
来了解那个信息

618
00:33:07,721 --> 0:33:12,459
跨系统动画更加流畅

619
00:33:15,362 --> 0:33:17,364
这是由于Apple框架

620
00:33:17,431 --> 0:33:19,233
迁移到了Metal渲染器中

621
00:33:19,700 --> 0:33:21,869
现在可以充分利用GPU了

622
00:33:24,738 --> 0:33:27,274
因此如果你的app

623
00:33:27,641 --> 0:33:30,210
而是使用了Apple框架

624
00:33:30,277 --> 0:33:33,347
来处理UI 2D或3D图形

625
00:33:33,780 --> 0:33:37,651
你仍然可以得到GPU加速性能改善

626
00:33:39,286 --> 0:33:40,954
你的app不需要做任何必要的修改

627
00:33:41,021 --> 0:33:45,325
以通过Metal实现GPU加速

628
00:33:45,526 --> 0:33:46,894
加速是免费的

629
00:33:47,494 --> 0:33:49,296
现在我要给你演示一些例子

630
00:33:51,098 --> 0:33:55,135
左侧是运行在软件渲染器上的

631
00:33:56,036 --> 0:33:59,506
右侧是新的GPU加速的模拟器

632
00:34:00,374 --> 0:34:02,075
在这个简单的图形项目中

633
00:34:02,576 --> 0:34:04,444
我们可以了解改善的性能

634
00:34:04,511 --> 0:34:08,081
通过滚动那个使用了

635
00:34:11,652 --> 0:34:13,152
自最初的模拟器起

636
00:34:13,453 --> 0:34:17,925
iOS设备的分辨率提高了17倍

637
00:34:17,991 --> 0:34:21,428
这给底层的软件渲染器

638
00:34:22,429 --> 0:34:24,331
在这个

639
00:34:24,598 --> 0:34:28,569
我们看到软件渲染器的性能

640
00:34:28,835 --> 0:34:29,902
降到了每秒15帧

641
00:34:30,603 --> 0:34:34,141
而我们在Xcode 11

642
00:34:34,408 --> 0:34:36,577
渲染了同一个app

643
00:34:36,643 --> 0:34:39,246
我们看到的是稳定的每秒60帧

644
00:34:39,513 --> 0:34:41,782
在场景中渲染了

645
00:34:44,784 --> 0:34:46,719
对于更复杂的3D场景

646
00:34:47,087 --> 0:34:49,389
比如这个使用了

647
00:34:49,989 --> 0:34:51,891
我们看到戏剧性的性能改善

648
00:34:52,226 --> 0:34:55,295
而不需要修改

649
00:34:57,097 --> 0:35:01,835
现在已经可以并行运行

650
00:34:57,097 --> 0:35:01,835
现在已经可以并行运行

651
00:35:02,302 --> 0:35:03,704
并拥有实时性能

652
00:35:04,404 --> 0:35:07,040
在这同样使用了SceneKit的

653
00:35:07,374 --> 0:35:10,777
以前的几何图形和动画

654
00:35:11,078 --> 0:35:14,348
对于渲染单一软件的GL模拟器设备

655
00:35:14,882 --> 0:35:16,650
更不必说并行运行两个模拟器了

656
00:35:19,820 --> 0:35:21,989
对于直接使用Metal的

657
00:35:22,389 --> 0:35:24,324
现在已经可以实现Metal开发了

658
00:35:24,491 --> 0:35:26,527
并且工作负荷被完全加速了

659
00:35:26,827 --> 0:35:28,929
让我们看看

660
00:35:29,129 --> 0:35:31,331
你的体验发生了哪些变化

661
00:35:31,765 --> 0:35:34,334
那么以前你可能会看到一个黑色屏幕

662
00:35:34,735 --> 0:35:37,404
但现在

663
00:35:37,671 --> 0:35:41,508
你可以在所模拟的全部设备上

664
00:35:45,445 --> 0:35:48,649
现在你已经在操作中了解了

665
00:35:50,417 --> 0:35:52,219
如果你看到了我们的

666
00:35:52,452 --> 0:35:55,822
你就知道今年我们翻新了

667
00:35:56,190 --> 0:35:58,825
并引入了

668
00:35:59,593 --> 0:36:01,295
Metal GPU Family API

669
00:35:59,593 --> 0:36:01,295
Metal GPU Family API

670
00:36:01,595 --> 0:36:04,064
使编写跨平台代码变得更简单了

671
00:36:04,398 --> 0:36:08,468
通过把GPU功能

672
00:36:09,369 --> 0:36:12,472
与模拟器相关的三个家族分别是

673
00:36:12,573 --> 0:36:16,443
第一个是common

674
00:36:16,677 --> 0:36:18,478
包含跨平台可用的全部GPU功能

675
00:36:19,479 --> 0:36:21,081
第二个是macOS

676
00:36:21,281 --> 0:36:25,085
包含macOS GPU

677
00:36:26,320 --> 0:36:30,090
第三个是Apple

678
00:36:30,357 --> 0:36:32,993
包含iOS和tvOS GPU硬件

679
00:36:33,293 --> 0:36:35,429
因此当在模拟器中运行你的app时

680
00:36:35,562 --> 0:36:39,132
你的app可以使用来自

681
00:36:39,633 --> 0:36:43,637
也包括来自

682
00:36:44,938 --> 0:36:47,908
这个支持在全部模拟器设备上通用

683
00:36:49,443 --> 0:36:53,514
因此让我们了解一下在模拟器中

684
00:36:54,281 --> 0:36:59,186
以前 你的app在一个OpenGL ES

685
00:36:59,386 --> 0:37:03,624
并且它没有任何GPU硬件加速

686
00:36:59,386 --> 0:37:03,624
并且它没有任何GPU硬件加速

687
00:37:04,157 --> 0:37:06,994
但现在在Xcode 11

688
00:37:07,361 --> 0:37:11,632
好消息是可以在模拟器中

689
00:37:12,299 --> 0:37:15,969
并且也能使用所有使用了

690
00:37:17,137 --> 0:37:20,707
但它不仅仅是能用了

691
00:37:21,475 --> 0:37:25,279
这意味着你的iOS app

692
00:37:25,546 --> 0:37:28,015
所创建的全部命令

693
00:37:28,515 --> 0:37:32,352
都从iOS Metal迁移到了

694
00:37:33,120 --> 0:37:35,355
并且这种翻译允许你

695
00:37:35,622 --> 0:37:38,292
在你的系统上充分利用

696
00:37:39,259 --> 0:37:41,361
但这确实伴随着一些警告

697
00:37:41,895 --> 0:37:44,264
其中一个就是你看到的性能

698
00:37:44,331 --> 0:37:46,200
可能与实际设备的性能不一样

699
00:37:47,234 --> 0:37:48,769
因此你所看到的图形

700
00:37:48,836 --> 0:37:51,705
将是底层Mac GPU的性能

701
00:37:52,439 --> 0:37:56,376
并且模拟器设备

702
00:37:57,311 --> 0:38:00,214
因此如果你在速度非常快的

703
00:37:57,311 --> 0:38:00,214
因此如果你在速度非常快的

704
00:38:00,547 --> 0:38:02,516
运行一个iPhone 6s模拟器

705
00:38:03,016 --> 0:38:06,620
你所看到的性能

706
00:38:06,820 --> 0:38:08,922
成功运行app的性能不一样

707
00:38:09,489 --> 0:38:11,091
那么一如既往 请确保直接在设备上

708
00:38:11,458 --> 0:38:13,827
配置并优化你的app

709
00:38:14,061 --> 0:38:16,964
在你发布app之前

710
00:38:18,398 --> 0:38:20,033
还有一件事要考虑

711
00:38:20,133 --> 0:38:23,971
就是macOS和iOS

712
00:38:24,972 --> 0:38:29,476
iOS支持私有、共享

713
00:38:30,110 --> 0:38:33,080
而Mac支持私有和托管纹理

714
00:38:34,014 --> 0:38:38,919
然而原生macOS设备不支持

715
00:38:39,286 --> 0:38:41,188
但在模拟器中却支持它们

716
00:38:42,222 --> 0:38:45,259
关于共享存储还有一些其它特殊情况

717
00:38:45,659 --> 0:38:48,829
但首先让我们回顾一下

718
00:38:50,497 --> 0:38:54,968
当你用共享存储模式

719
00:38:55,435 --> 0:38:57,604
这意味着你的纹理

720
00:38:57,905 --> 0:39:00,140
既可以在CPU又可以在GPU上

721
00:38:57,905 --> 0:39:00,140
既可以在CPU又可以在GPU上

722
00:39:01,108 --> 0:39:05,045
因此如果你的app想在CPU上

723
00:39:05,812 --> 0:39:10,350
然后把纹理绑定到一个渲染器上

724
00:39:11,118 --> 0:39:13,887
你可以在命令缓冲器完成后

725
00:39:14,821 --> 0:39:17,591
直接在GPU上修改同样的纹理

726
00:39:18,091 --> 0:39:20,027
然后在CPU上重复那些修改

727
00:39:20,327 --> 0:39:23,197
并且你的app不需要担心

728
00:39:23,664 --> 0:39:26,800
因为在iOS上

729
00:39:28,969 --> 0:39:30,437
因此在模拟器中

730
00:39:30,904 --> 0:39:34,708
对于多样本、

731
00:39:35,409 --> 0:39:39,413
这些纹理类型必须在私有存储中创建

732
00:39:40,147 --> 0:39:44,251
然而在实际的iOS设备上

733
00:39:45,185 --> 0:39:47,521
因此你的app可能需要一个

734
00:39:48,155 --> 0:39:50,824
如果这些纹理需要CPU权限

735
00:39:51,558 --> 0:39:52,526
对于绝大多数人来说

736
00:39:53,060 --> 0:39:55,963
你可以直接在你的GPU命令中

737
00:39:56,163 --> 0:40:00,634
因此这不会影响你的app

738
00:39:56,163 --> 0:40:00,634
因此这不会影响你的app

739
00:40:00,701 --> 0:40:03,036
它们应该已经是私有纹理了

740
00:40:03,637 --> 0:40:07,574
但如果其中一个纹理

741
00:40:07,741 --> 0:40:09,843
让我们了解一下需要进行哪些修改

742
00:40:10,777 --> 0:40:13,947
那么作为一个提醒

743
00:40:14,381 --> 0:40:17,150
那个纹理将没有CPU权限

744
00:40:17,751 --> 0:40:20,921
它只能由GPU修改并由GPU读取

745
00:40:21,755 --> 0:40:24,858
因此如果你的app

746
00:40:25,158 --> 0:40:28,161
你需要一个中间共享资源来实现

747
00:40:29,196 --> 0:40:32,933
因此首先我们要创建一个共享缓冲器

748
00:40:33,800 --> 0:40:37,905
然后为了复制这个纹理创建一个

749
00:40:38,372 --> 0:40:42,776
在这种情况下你可以

750
00:40:43,243 --> 0:40:46,747
或从私有纹理复制到共享缓冲器

751
00:40:47,614 --> 0:40:50,317
让我们看一下源代码

752
00:40:51,585 --> 0:40:56,290
在这段代码示例中

753
00:40:56,456 --> 0:40:58,425
并且我们想在CPU上

754
00:41:00,894 --> 0:41:04,731
因此首先 我们要在模拟器中

755
00:41:05,365 --> 0:41:07,334
然而我们并没有处于模拟环境

756
00:41:07,401 --> 0:41:10,070
我们希望仍使用共享存储模式

757
00:41:11,905 --> 0:41:14,708
然后我们用修改了的

758
00:41:17,244 --> 0:41:19,513
然后在模拟环境中

759
00:41:19,913 --> 0:41:22,349
为了初始化这个私有纹理

760
00:41:22,716 --> 0:41:24,251
我们首先要创建一个共享缓冲器

761
00:41:24,985 --> 0:41:28,522
对于这个共享缓冲器

762
00:41:28,589 --> 0:41:30,757
使用你想在你的私有纹理中

763
00:41:31,225 --> 0:41:34,027
最后我们把共享资源

764
00:41:34,494 --> 0:41:35,729
传输到私有纹理中

765
00:41:37,030 --> 0:41:39,032
然后如果你仍在

766
00:41:39,399 --> 0:41:41,034
实际的iOS设备上运行

767
00:41:41,268 --> 0:41:43,470
我们想做与你之前所做的操作

768
00:41:43,670 --> 0:41:47,474
在CPU上初始化那个纹理

769
00:41:49,042 --> 0:41:52,646
从这一点来看

770
00:41:52,846 --> 0:41:55,349
无论你是在实际的iOS设备上运行

771
00:41:55,682 --> 0:41:56,650
或是在模拟器中运行

772
00:41:56,884 --> 0:41:59,453
你所有的GPU命令必须完全相同

773
00:42:00,654 --> 0:42:03,757
那么在模拟器中

774
00:42:04,057 --> 0:42:05,993
做一些其它修改

775
00:42:06,093 --> 0:42:07,761
我们有完整文档

776
00:42:07,995 --> 0:42:09,229
描述了那些小修改

777
00:42:09,696 --> 0:42:12,566
并且我们还有示例代码 你可以下载

778
00:42:12,799 --> 0:42:16,703
来了解如何把app搬运到模拟器中

779
00:42:18,572 --> 0:42:21,041
我希望你今天学到了

780
00:42:21,508 --> 0:42:25,879
我们首先回顾了iOS、

781
00:42:25,946 --> 0:42:27,414
在macOS Kernel上运行

782
00:42:28,182 --> 0:42:31,151
并且模拟器对于跨设备和跨运行时间

783
00:42:31,485 --> 0:42:33,453
测试app来说至关重要

784
00:42:34,288 --> 0:42:36,557
我们了解了

785
00:42:36,857 --> 0:42:40,360
以及如何通过模拟器

786
00:42:41,161 --> 0:42:43,730
最后我们了解了GPU加速

787
00:42:44,031 --> 0:42:46,400
通过模拟器中的Metal

788
00:42:46,600 --> 0:42:49,503
并且还可以在模拟器中

789
00:42:50,838 --> 0:42:54,341
如果你有其它疑问

790
00:42:54,641 --> 0:42:56,777
谢谢 希望你在本周余下的
