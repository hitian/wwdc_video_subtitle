1
00:00:00,506 --> 0:00:06,436
[音乐]

2
00:00:06,936 --> 0:00:08,616
&gt;&gt; 欢迎大家走进

3
00:00:08,616 --> 0:00:09,616
文档管理和快速查看的新功能

4
00:00:09,956 --> 0:00:11,286
我们有很多很棒的新 API

5
00:00:11,446 --> 0:00:12,946
用于管理文档和文件预览

6
00:00:12,946 --> 0:00:13,976
今天将与你们共享

7
00:00:16,046 --> 0:00:16,996
以下是我们在本次大会中

8
00:00:16,996 --> 0:00:18,166
将会讨论到的领域

9
00:00:19,076 --> 0:00:21,126
首先我们将展示

10
00:00:21,126 --> 0:00:22,366
你的 App 如何使用

11
00:00:22,366 --> 0:00:24,256
文档选择器访问目录及其内容

12
00:00:24,676 --> 0:00:27,056
我们还将展示

13
00:00:27,056 --> 0:00:28,836
你的 App 如何正确支持

14
00:00:28,836 --> 0:00:30,596
存储在外部 USB 驱动器

15
00:00:30,596 --> 0:00:31,246
或 SMB 服务器上的文件

16
00:00:32,586 --> 0:00:34,176
然后还可以查看

17
00:00:34,176 --> 0:00:35,426
你的 App 如何获取并显示

18
00:00:35,426 --> 0:00:36,086
丰富的缩略图

19
00:00:37,796 --> 0:00:39,356
另外你还将看到 

20
00:00:39,356 --> 0:00:40,616
App 如何通过快速查看

21
00:00:40,616 --> 0:00:42,676
为图像 PDF 和视频

22
00:00:42,676 --> 0:00:43,146
提供快速编辑支持

23
00:00:43,146 --> 0:00:46,586
我们可以很容易

24
00:00:46,706 --> 0:00:48,746
将你的 iOS App 移植到 macOS

25
00:00:48,746 --> 0:00:50,306
因为快速查看扩展 API

26
00:00:50,306 --> 0:00:51,306
现在是跨平台的

27
00:00:51,736 --> 0:00:54,246
最后我们将谈论

28
00:00:54,246 --> 0:00:56,656
如何在 Mac 上支持 iPad App

29
00:00:58,426 --> 0:00:59,986
那这个会议的受众是谁呢

30
00:01:00,256 --> 0:01:02,246
如果你正在编写一个新的 App 

31
00:01:02,246 --> 0:01:03,216
或者已经有了一个

32
00:01:03,216 --> 0:01:06,056
显示文档或执行文件操作的 App

33
00:01:06,056 --> 0:01:06,706
你就来对地方了

34
00:01:06,846 --> 0:01:08,726
你可以在这里学习支持

35
00:01:08,726 --> 0:01:10,226
存储在可移动驱动器

36
00:01:10,226 --> 0:01:13,416
如 USB 和 SMB 上文件的最佳实践

37
00:01:14,086 --> 0:01:15,446
可能还需要你的 App 

38
00:01:15,446 --> 0:01:16,886
以递归方式

39
00:01:16,886 --> 0:01:18,286
访问文件夹中多个文档

40
00:01:18,286 --> 0:01:20,156
并执行批处理文件操作

41
00:01:21,546 --> 0:01:22,726
如果你想了解更多

42
00:01:22,726 --> 0:01:24,096
关于显示文件缩略图的信息

43
00:01:24,096 --> 0:01:25,496
或者你想在 App 中

44
00:01:25,496 --> 0:01:26,946
提供简单的图像和视频编辑

45
00:01:26,946 --> 0:01:28,566
就请坚持看下去

46
00:01:29,766 --> 0:01:31,126
顺便说一下

47
00:01:31,126 --> 0:01:32,236
如果你还没有了解过

48
00:01:32,236 --> 0:01:34,846
你一定要看看 2018 年 WWDC 的

49
00:01:34,846 --> 0:01:38,296
《Managing Documents in Your iOS Apps》

50
00:01:38,296 --> 0:01:39,816
其中我们详细介绍了

51
00:01:40,176 --> 0:01:42,336
如何使用 UIDocumentBrowserViewController

52
00:01:42,416 --> 0:01:44,086
以及 UIDocumentPickerViewController

53
00:01:45,216 --> 0:01:46,746
还有一场会议

54
00:01:46,746 --> 0:01:48,296
如果你对在 iOS 和 macOS 上

55
00:01:48,456 --> 0:01:50,866
展示文件预览感兴趣的话

56
00:01:50,866 --> 0:01:51,896
我们强烈建议你

57
00:01:52,206 --> 0:01:54,006
看一下 2018 年 WWDC 中的

58
00:01:54,006 --> 0:01:56,286
《Quick Look Previews from the Ground Up》

59
00:01:56,786 --> 0:02:00,526
最需要的功能之一

60
00:01:56,786 --> 0:02:00,526
最需要的功能之一

61
00:02:00,526 --> 0:02:03,716
是访问整个目录及其内容

62
00:02:04,126 --> 0:02:05,616
我们真的很高兴

63
00:02:05,616 --> 0:02:06,906
你现在可以使用 iOS 13 实现了

64
00:02:07,846 --> 0:02:09,485
此外你 App 中的功能

65
00:02:09,485 --> 0:02:11,306
可能需要访问目录的内容

66
00:02:11,306 --> 0:02:13,636
以便读取 写入或创建文档

67
00:02:14,286 --> 0:02:15,626
例如图像编辑器

68
00:02:15,696 --> 0:02:16,836
需要对一批图像

69
00:02:16,836 --> 0:02:18,396
应用相同的更改

70
00:02:18,396 --> 0:02:20,216
这些图像将读取每个图像

71
00:02:20,216 --> 0:02:21,926
应用更改

72
00:02:21,926 --> 0:02:23,386
并在原始图像旁边保存新图像

73
00:02:23,826 --> 0:02:27,396
在 iOS 13 之前

74
00:02:27,396 --> 0:02:28,736
一个 App 可以通过

75
00:02:28,736 --> 0:02:30,216
UIDocumentPickerViewController

76
00:02:30,216 --> 0:02:31,886
访问其 App 之外的文件

77
00:02:32,126 --> 0:02:33,396
但是用户一次

78
00:02:33,396 --> 0:02:34,166
必须选择一个文件

79
00:02:34,956 --> 0:02:37,426
iOS 13 的新功能是 你的 App 可以提供一个

80
00:02:37,426 --> 0:02:38,976
UIDocumentPickerViewController

81
00:02:38,976 --> 0:02:40,386
让用户选择一个文件夹

82
00:02:40,606 --> 0:02:44,336
通过验证后  App 将被授予

83
00:02:44,336 --> 0:02:45,806
对目录及其所有内容的

84
00:02:45,806 --> 0:02:46,566
递归访问权限

85
00:02:47,376 --> 0:02:50,196
此外 你还可以设置

86
00:02:50,196 --> 0:02:51,976
显示在文档选取器上的默认目录

87
00:02:55,176 --> 0:02:56,526
现在我们来看一下

88
00:02:56,526 --> 0:02:57,976
如何做到这一点

89
00:02:57,976 --> 0:02:59,236
比如我们如何配置

90
00:02:59,236 --> 0:03:00,836
UIDocumentPickerViewController 

91
00:02:59,236 --> 0:03:00,836
UIDocumentPickerViewController 

92
00:03:01,496 --> 0:03:03,296
若要允许选择文件夹

93
00:03:03,596 --> 0:03:05,136
请创建用仅包含

94
00:03:05,136 --> 0:03:07,126
kUTTypeFolder 类型的

95
00:03:07,126 --> 0:03:09,076
数组初始化的实例

96
00:03:09,076 --> 0:03:10,176
然后显示该实例

97
00:03:11,586 --> 0:03:13,316
要设置 UIDocumentPickerViewController

98
00:03:13,316 --> 0:03:14,676
实例的默认目录

99
00:03:14,676 --> 0:03:16,396
请设置其 directoryURL 属性

100
00:03:16,396 --> 0:03:18,246
然后显示

101
00:03:18,286 --> 0:03:22,046
现在让我们看看这个例子

102
00:03:22,326 --> 0:03:23,406
我们将展示

103
00:03:23,406 --> 0:03:25,326
如何枚举文件夹的内容

104
00:03:25,326 --> 0:03:26,586
不过你可以使用相同的示例

105
00:03:26,586 --> 0:03:28,036
在这里使用标准的文件管理 API

106
00:03:28,036 --> 0:03:29,006
来编写文件

107
00:03:30,466 --> 0:03:34,126
另外请确保使用 URL.start/stopAccessing

108
00:03:34,126 --> 0:03:36,806
SecurityScopedResource 调用

109
00:03:36,996 --> 0:03:39,066
并使用 NSFileCoordinator API 

110
00:03:39,066 --> 0:03:40,466
进行读写操作

111
00:03:40,536 --> 0:03:41,786
如示例中所示

112
00:03:45,986 --> 0:03:48,526
在 iOS 13 中

113
00:03:48,526 --> 0:03:49,546
用户可以控制哪些 App

114
00:03:49,546 --> 0:03:50,676
可以访问哪些文件夹

115
00:03:51,276 --> 0:03:53,136
此访问权限已列出

116
00:03:53,136 --> 0:03:54,596
可以在“隐私”中的

117
00:03:54,596 --> 0:03:56,336
“文件和文件夹”部分撤消

118
00:03:57,306 --> 0:04:00,916
请注意 由于用户可以随时

119
00:03:57,306 --> 0:04:00,916
请注意 由于用户可以随时

120
00:04:00,916 --> 0:04:01,976
撤消访问权限

121
00:04:01,976 --> 0:04:03,466
因此在尝试打开文档

122
00:04:03,466 --> 0:04:04,926
或枚举文件夹时

123
00:04:04,926 --> 0:04:06,166
需确保代码正常处理错误

124
00:04:06,606 --> 0:04:10,636
在此示例中

125
00:04:10,636 --> 0:04:11,756
你可通过存储书签数据

126
00:04:11,756 --> 0:04:17,016
然后使用 URL resolvingBookmarkData 选项调用

127
00:04:17,016 --> 0:04:19,755
重新创建 URL

128
00:04:19,926 --> 0:04:21,776
从而在 App 启动时

129
00:04:21,776 --> 0:04:22,176
保持对文件夹的持久访问

130
00:04:26,676 --> 0:04:29,166
在 iOS 13 中

131
00:04:29,166 --> 0:04:30,936
我们新增了对外部 USB 驱动器

132
00:04:31,056 --> 0:04:33,016
拇指驱动器和 SMB 服务器的支持

133
00:04:34,756 --> 0:04:37,936
支持格式化为 APFS HFS +

134
00:04:38,006 --> 0:04:40,046
FAT 和 ExFAT 的驱动器

135
00:04:42,516 --> 0:04:44,306
驱动器可以插入

136
00:04:44,306 --> 0:04:45,686
iPad Pro 上的 USB-C 接口

137
00:04:45,736 --> 0:04:47,956
也可以通过 SD 卡

138
00:04:47,956 --> 0:04:48,716
读卡器附件插入

139
00:04:49,976 --> 0:04:51,526
它们会自动列在

140
00:04:51,526 --> 0:04:53,286
文件 App 的侧边栏中

141
00:04:53,436 --> 0:04:54,416
或者列在带有

142
00:04:54,416 --> 0:04:55,996
UIDocumentPickerViewController

143
00:04:56,126 --> 0:04:57,256
或文档浏览器的 App 当中

144
00:05:00,046 --> 0:05:01,886
用户还可以使用

145
00:05:01,886 --> 0:05:03,376
与查找工具相同的键盘快捷方式

146
00:05:03,376 --> 0:05:05,296
或使用侧边栏菜单

147
00:05:05,296 --> 0:05:06,996
使用“连接到服务器”操作

148
00:05:07,046 --> 0:05:08,076
连接到 SMB 服务器

149
00:05:12,126 --> 0:05:13,206
只要 App 是使用 iOS 13 SDK

150
00:05:13,206 --> 0:05:14,716
或更高版本构建的

151
00:05:14,716 --> 0:05:15,776
UIDocumentBrowserViewController API

152
00:05:15,836 --> 0:05:17,286
或 UIDocumentPickerViewController API 的

153
00:05:17,286 --> 0:05:18,786
任何客户端

154
00:05:18,786 --> 0:05:23,586
都可以直接获得相同的支持

155
00:05:24,586 --> 0:05:26,066
但是你需要

156
00:05:26,066 --> 0:05:27,286
检查几个地方

157
00:05:27,286 --> 0:05:29,536
以确保你的 App 

158
00:05:29,536 --> 0:05:30,716
对 USB 和 SMB 有很好的支持

159
00:05:32,346 --> 0:05:34,616
有一些预设现已不再适用

160
00:05:35,386 --> 0:05:36,996
文件访问

161
00:05:36,996 --> 0:05:38,386
不再位于单个卷上

162
00:05:38,386 --> 0:05:39,466
因为它们现在

163
00:05:39,466 --> 0:05:41,466
可以存储在外部卷上

164
00:05:41,466 --> 0:05:42,346
如 USB 或 SMB 服务器

165
00:05:43,396 --> 0:05:45,096
如果 USB 驱动器拔出

166
00:05:45,096 --> 0:05:47,266
或与 SMB 服务器卷的

167
00:05:47,266 --> 0:05:48,516
网络连接丢失

168
00:05:48,516 --> 0:05:50,006
卷可能会消失

169
00:05:51,276 --> 0:05:52,826
磁盘访问速度可能

170
00:05:52,826 --> 0:05:54,146
比你过去预期的速度慢

171
00:05:55,136 --> 0:05:56,186
根据网络条件

172
00:05:56,186 --> 0:05:57,706
或 USB 设备的速度

173
00:05:57,706 --> 0:05:59,396
你假定的即时操作

174
00:05:59,396 --> 0:06:00,296
现在可能需要几秒钟

175
00:05:59,396 --> 0:06:00,296
现在可能需要几秒钟

176
00:06:00,296 --> 0:06:02,546
甚至几分钟

177
00:06:03,556 --> 0:06:05,356
此外不要假设

178
00:06:05,356 --> 0:06:07,176
底层文件系统始终是

179
00:06:07,176 --> 0:06:08,926
APFS 或 HFS+

180
00:06:10,186 --> 0:06:12,163
那么这对你的 App 有何影响

181
00:06:14,456 --> 0:06:16,246
如果你需要将文件

182
00:06:16,246 --> 0:06:18,106
从一个位置移动到另一个位置

183
00:06:18,106 --> 0:06:20,866
请使用 API 中的 

184
00:06:21,066 --> 0:06:22,256
FileManager.moveItem 

185
00:06:22,256 --> 0:06:23,826
它负责处理跨卷移动文件

186
00:06:25,026 --> 0:06:26,546
过去移动和克隆操作

187
00:06:26,546 --> 0:06:28,036
一直很快

188
00:06:28,876 --> 0:06:30,336
在卷上移动时

189
00:06:30,336 --> 0:06:32,836
复制和删除操作可能会变慢

190
00:06:33,296 --> 0:06:36,176
如果使用 NSTemporaryDirectory

191
00:06:36,346 --> 0:06:37,866
保存文件的临时版本

192
00:06:37,866 --> 0:06:39,906
则应更新代码

193
00:06:39,906 --> 0:06:41,626
以根据写入文件的

194
00:06:41,626 --> 0:06:42,906
最终目标

195
00:06:42,906 --> 0:06:45,136
选择临时文件夹的位置

196
00:06:46,446 --> 0:06:48,776
你可以使用以下文件管理器

197
00:06:50,176 --> 0:06:52,156
userDomainMask properFor URL 中的

198
00:06:52,156 --> 0:06:54,336
itemReplacementDirectory 的

199
00:06:54,476 --> 0:06:56,816
文件管理器 URL 

200
00:06:56,946 --> 0:06:57,456
来执行此操作

201
00:06:58,426 --> 0:06:59,316
这将始终为你提供

202
00:06:59,316 --> 0:07:01,516
正确的临时目录来写入文件

203
00:06:59,316 --> 0:07:01,516
正确的临时目录来写入文件

204
00:07:02,076 --> 0:07:06,756
在过去 你的 App 可能会假设

205
00:07:06,756 --> 0:07:08,936
一个文件打开时永远不会消失

206
00:07:08,936 --> 0:07:10,356
这不再是真的

207
00:07:10,356 --> 0:07:12,106
因为 USB 驱动器可能被拔出

208
00:07:12,106 --> 0:07:14,296
SMB 服务器连接可能会中断

209
00:07:15,126 --> 0:07:16,516
这可能会导致

210
00:07:16,516 --> 0:07:18,276
App 在读取或写入文件内容时失败

211
00:07:19,216 --> 0:07:20,926
你的 App 应检查错误

212
00:07:20,926 --> 0:07:21,876
并正常失败

213
00:07:22,876 --> 0:07:24,446
我的一个建议是

214
00:07:24,446 --> 0:07:26,096
如果 App 无法写入文件

215
00:07:26,096 --> 0:07:28,126
它可以显示 UIDocumentPickerViewController

216
00:07:28,256 --> 0:07:32,516
让用户选择一个备用位置来保存文件

217
00:07:32,726 --> 0:07:34,186
读取或写入存储在

218
00:07:34,186 --> 0:07:35,986
USB 驱动器或远程 SMB 服务器上的

219
00:07:35,986 --> 0:07:38,496
文件可能会很慢

220
00:07:38,496 --> 0:07:39,546
因此需要确保

221
00:07:39,546 --> 0:07:41,736
在执行文件操作时 App 不会挂起

222
00:07:42,196 --> 0:07:45,286
而是始终在后台队列上

223
00:07:45,286 --> 0:07:45,526
执行文件系统操作

224
00:07:46,736 --> 0:07:47,946
我们还建议你

225
00:07:47,946 --> 0:07:50,076
添加 UI 作为活动指示器

226
00:07:50,076 --> 0:07:53,966
让用户知道正在发生什么

227
00:07:54,046 --> 0:07:55,456
并为用户提供

228
00:07:55,456 --> 0:07:56,756
取消操作的方法

229
00:07:57,876 --> 0:07:59,326
否则用户可能会觉得

230
00:07:59,326 --> 0:08:00,976
App 没有响应

231
00:07:59,326 --> 0:08:00,976
App 没有响应

232
00:08:01,426 --> 0:08:05,186
当文档存储在 USB 驱动器

233
00:08:05,186 --> 0:08:07,216
或远程 SMB 服务器上时

234
00:08:07,616 --> 0:08:09,686
LIFS 将被报告

235
00:08:09,686 --> 0:08:11,736
而非媒体格式化的文件系统

236
00:08:12,546 --> 0:08:13,606
很可能你的 App 

237
00:08:13,606 --> 0:08:15,406
不用担心底层的文件系统

238
00:08:16,046 --> 0:08:17,236
相反你应该

239
00:08:17,236 --> 0:08:18,766
检查文件系统功能

240
00:08:18,766 --> 0:08:20,396
以了解支持哪些

241
00:08:20,396 --> 0:08:20,906
文件系统操作

242
00:08:21,916 --> 0:08:23,676
LIFS 是一个

243
00:08:23,676 --> 0:08:24,986
文件系统抽象

244
00:08:24,986 --> 0:08:26,196
它不直接寻找它的存在

245
00:08:27,076 --> 0:08:28,786
要了解有关 LIFS 的更多信息

246
00:08:28,786 --> 0:08:30,076
我们建议你查看

247
00:08:30,076 --> 0:08:31,756
“文件系统中的新功能”会话

248
00:08:36,116 --> 0:08:38,176
iOS 13 中的新功能

249
00:08:38,176 --> 0:08:39,756
是在 UIDocumentBrowserViewController

250
00:08:39,756 --> 0:08:39,823
当中提供额外的

251
00:08:39,823 --> 0:08:41,395
自定义支持

252
00:08:41,556 --> 0:08:45,536
下面我们来看一下

253
00:08:45,536 --> 0:08:47,016
现在通过将

254
00:08:47,016 --> 0:08:48,486
shouldShowFileExtensions 属性设置为 true

255
00:08:48,486 --> 0:08:49,896
可以选择始终显示

256
00:08:49,896 --> 0:08:50,716
文件扩展

257
00:08:51,296 --> 0:08:54,066
现在还可以

258
00:08:54,066 --> 0:08:55,876
自定义创建文档按钮

259
00:08:55,876 --> 0:08:57,146
以通过设置

260
00:08:57,146 --> 0:08:58,356
defaultDocumentAspectRatio 属性

261
00:08:58,356 --> 0:09:00,646
来调整按钮图标的宽高比

262
00:08:58,356 --> 0:09:00,646
来调整按钮图标的宽高比

263
00:09:01,626 --> 0:09:04,906
现在可以通过设置 localizedCreate

264
00:09:04,906 --> 0:09:05,826
DocumentActionTitle 属性

265
00:09:05,826 --> 0:09:07,466
来更改标题为 Text 的按钮

266
00:09:07,916 --> 0:09:10,206
接下来 Lyn 将介绍

267
00:09:10,206 --> 0:09:11,786
快速查看的新功能

268
00:09:14,476 --> 0:09:16,076
&gt;&gt; 在你的 App 中

269
00:09:16,076 --> 0:09:17,116
获取文件缩略图

270
00:09:17,386 --> 0:09:19,976
现在可以通过设置希望通过显示

271
00:09:19,976 --> 0:09:21,166
丰富的文件缩略图

272
00:09:21,166 --> 0:09:22,886
来增强 App 外观的开发者

273
00:09:24,476 --> 0:09:26,186
你可以有这样的东西

274
00:09:26,186 --> 0:09:29,786
但是这样会更好

275
00:09:31,556 --> 0:09:33,306
快速查看缩略图是一种

276
00:09:33,306 --> 0:09:34,956
新的跨平台框架

277
00:09:34,956 --> 0:09:36,666
用于检索文件 URL 的

278
00:09:36,666 --> 0:09:37,606
缩略图图像

279
00:09:38,276 --> 0:09:40,196
这是 iOS 上的新功能

280
00:09:40,196 --> 0:09:42,106
并取代了 macOS 上

281
00:09:42,106 --> 0:09:43,856
用于 QLThumbnail 的 C API 

282
00:09:44,656 --> 0:09:45,766
它还取代了

283
00:09:45,766 --> 0:09:47,936
NSURLThumbnailDictionaryKey

284
00:09:49,216 --> 0:09:51,326
iOS 和 macOS 为多种文件类型

285
00:09:51,326 --> 0:09:52,846
提供内置支持

286
00:09:52,986 --> 0:09:56,486
如图像 PDF 文本文件和视频等

287
00:09:56,806 --> 0:09:59,246
你还可以使用缩略图扩展

288
00:09:59,246 --> 0:10:00,486
为自己的文件类型

289
00:09:59,246 --> 0:10:00,486
为自己的文件类型

290
00:10:00,486 --> 0:10:01,626
提供支持

291
00:10:04,356 --> 0:10:05,696
快速查看缩略图

292
00:10:05,696 --> 0:10:06,936
是非用户界面框架

293
00:10:07,576 --> 0:10:09,526
我们默认 

294
00:10:09,526 --> 0:10:10,086
不导入 UIKit 或 AppKit

295
00:10:10,796 --> 0:10:12,526
我们可以不使用任何方法

296
00:10:12,526 --> 0:10:14,176
获取你的 CGImages 缩略图

297
00:10:14,176 --> 0:10:16,476
但你也可以分别通过

298
00:10:16,476 --> 0:10:18,836
显式链接 UIKit 或 AppKit 

299
00:10:18,836 --> 0:10:20,746
来获取 iOS 上的 UIImages 或

300
00:10:20,746 --> 0:10:22,016
macOS 上的 NSImages

301
00:10:23,226 --> 0:10:25,286
它是异步的

302
00:10:25,286 --> 0:10:26,206
因此在检索缩略图时

303
00:10:26,206 --> 0:10:28,706
不会阻塞

304
00:10:28,706 --> 0:10:30,366
并且它支持取消

305
00:10:30,366 --> 0:10:31,366
以防你最终决定

306
00:10:31,366 --> 0:10:31,896
不需要该缩略图

307
00:10:34,996 --> 0:10:37,086
我们来从整体概述开始

308
00:10:37,536 --> 0:10:39,336
要获取缩略图

309
00:10:39,336 --> 0:10:40,266
首先要创建一个

310
00:10:40,266 --> 0:10:42,626
QLThumbnailGenerator.Request 

311
00:10:42,626 --> 0:10:43,566
然后将其传递给

312
00:10:43,566 --> 0:10:46,316
QLThumbnailGenerator

313
00:10:46,316 --> 0:10:47,736
指定是否希望

314
00:10:47,736 --> 0:10:49,406
每次有新的缩略图表示时

315
00:10:49,406 --> 0:10:51,336
或仅在你请求的

316
00:10:51,336 --> 0:10:52,156
最佳表示完成时

317
00:10:52,156 --> 0:10:54,376
收到通知

318
00:10:54,416 --> 0:10:58,366
你可以请求

319
00:10:58,366 --> 0:10:59,806
不同的缩略图表现

320
00:10:59,926 --> 0:11:01,066
这将具有不同的

321
00:10:59,926 --> 0:11:01,066
这将具有不同的

322
00:11:01,066 --> 0:11:02,636
质量和性能成本

323
00:11:04,066 --> 0:11:05,506
icon 是与该文件类型

324
00:11:05,506 --> 0:11:06,986
关联的通用图像

325
00:11:07,586 --> 0:11:08,716
这对于给定类型的

326
00:11:08,716 --> 0:11:10,016
所有文件都是相同的

327
00:11:10,436 --> 0:11:13,306
lowQualityThumbnail 是我们能够

328
00:11:13,306 --> 0:11:14,556
提供的更快的缩略图

329
00:11:14,556 --> 0:11:16,456
可能与你指定的尺寸

330
00:11:16,456 --> 0:11:18,066
不完全相同

331
00:11:19,026 --> 0:11:20,166
这通常来自缩略图的

332
00:11:20,166 --> 0:11:21,886
缓存版本

333
00:11:21,956 --> 0:11:23,636
或者可能是嵌入到

334
00:11:23,636 --> 0:11:24,776
文件本身中的缩略图

335
00:11:26,176 --> 0:11:27,956
最后一个表示类型 thumbnail

336
00:11:28,216 --> 0:11:30,836
是缩略图的完整质量版本

337
00:11:31,316 --> 0:11:32,886
与请求完全匹配

338
00:11:33,436 --> 0:11:35,676
这将花费最长的时间来生成

339
00:11:37,426 --> 0:11:38,986
为方便起见

340
00:11:38,986 --> 0:11:41,196
你还可以指定获取

341
00:11:41,196 --> 0:11:42,166
任何类型的可用缩略图

342
00:11:42,596 --> 0:11:46,426
创建 QLThumbnail 生成请求时

343
00:11:46,426 --> 0:11:48,296
你可以指定所需的大小

344
00:11:48,296 --> 0:11:51,376
比例和表示类型

345
00:11:51,866 --> 0:11:53,926
你可能只关心

346
00:11:53,926 --> 0:11:55,986
完整质量的缩略图

347
00:11:55,986 --> 0:11:58,726
或者你也可以使用图标或较低质量的版本

348
00:11:58,986 --> 0:12:00,886
最好指定适合你的

349
00:11:58,986 --> 0:12:00,886
最好指定适合你的

350
00:12:00,916 --> 0:12:02,476
所有表示类型

351
00:12:02,476 --> 0:12:04,496
因为并非所有三种类型

352
00:12:04,586 --> 0:12:06,876
都可用于给定的缩略图

353
00:12:09,786 --> 0:12:10,576
你将会得到一个

354
00:12:10,576 --> 0:12:12,386
QLThumbnailRepresentation 

355
00:12:13,096 --> 0:12:14,386
它将指定缩略图的

356
00:12:14,386 --> 0:12:16,346
类型 图标

357
00:12:16,346 --> 0:12:18,546
低质量或缩略图

358
00:12:18,546 --> 0:12:20,296
以及一个可以

359
00:12:20,296 --> 0:12:22,716
作为 CGImagecgimage 访问的图像

360
00:12:22,716 --> 0:12:24,096
或者如果在 iOS 上链接了

361
00:12:24,096 --> 0:12:26,876
UIKit 或在 macOS 上链接了 AppKit

362
00:12:26,876 --> 0:12:29,186
你可以分别获取 UIImage 或 NSImage

363
00:12:29,546 --> 0:12:32,246
要获得 QLThumbnailRepresentation

364
00:12:32,246 --> 0:12:34,396
请将缩略图请求

365
00:12:34,396 --> 0:12:37,326
传递给 QLThumbnailGenerator

366
00:12:37,676 --> 0:12:39,646
如果你只想获得

367
00:12:39,646 --> 0:12:41,696
最佳质量的缩略图

368
00:12:41,696 --> 0:12:43,296
请使用 generateBestRepresentation

369
00:12:43,916 --> 0:12:45,116
它将使用可以创建的

370
00:12:45,116 --> 0:12:46,626
最佳缩略图请求版本调用

371
00:12:46,626 --> 0:12:50,796
完成处理程序

372
00:12:50,796 --> 0:12:52,296
或者你可能更想

373
00:12:52,296 --> 0:12:54,336
通过提供 updateHandler 

374
00:12:54,336 --> 0:12:55,896
来获取增量更新

375
00:12:55,896 --> 0:12:57,396
以便生成

376
00:12:57,396 --> 0:13:00,206
灵活的可以调用的表示

377
00:12:57,396 --> 0:13:00,206
灵活的可以调用的表示

378
00:13:00,676 --> 0:13:02,566
例如你可以使用它

379
00:13:02,566 --> 0:13:04,436
来快速更新 UI

380
00:13:04,506 --> 0:13:05,946
然后提高缩略图到达时

381
00:13:05,946 --> 0:13:08,256
所显示内容的质量

382
00:13:08,826 --> 0:13:13,026
这对缩略图检索来说已经足够了

383
00:13:13,146 --> 0:13:14,486
下面我们来谈谈

384
00:13:14,486 --> 0:13:16,496
如何使用快速查看编辑图像

385
00:13:16,496 --> 0:13:17,136
PDF 和视频

386
00:13:20,146 --> 0:13:21,886
快速查看提供了 API

387
00:13:21,886 --> 0:13:23,336
用来预览 iOS 上

388
00:13:23,336 --> 0:13:24,606
各种类型文件的文档

389
00:13:25,406 --> 0:13:26,616
它还允许你通过扩展

390
00:13:26,616 --> 0:13:28,156
为自己的文档

391
00:13:28,156 --> 0:13:29,646
提供自定义预览

392
00:13:31,116 --> 0:13:33,386
现在在 iOS 13 中

393
00:13:33,386 --> 0:13:35,186
我们还添加了使用 QLPreviewController 

394
00:13:35,346 --> 0:13:38,236
支持快速编辑图像 PDF 和视频

395
00:13:38,616 --> 0:13:42,516
QLPreviewController 

396
00:13:42,516 --> 0:13:43,956
是用来预览文件的

397
00:13:44,316 --> 0:13:46,366
如果只分配一个

398
00:13:46,366 --> 0:13:47,526
QLPreviewController 实例

399
00:13:47,526 --> 0:13:50,846
并在显示前设置数据源和委托

400
00:13:50,846 --> 0:13:51,486
就可以使用了

401
00:13:52,416 --> 0:13:53,686
为了进一步了解快速查看

402
00:13:53,686 --> 0:13:55,386
和 QLPreviewController

403
00:13:55,386 --> 0:13:56,586
我们强烈建议你

404
00:13:56,586 --> 0:13:59,036
查看我们在 2018 年发表的

405
00:13:59,036 --> 0:14:01,906
有关快速查看的 WWDC 演示文稿

406
00:13:59,036 --> 0:14:01,906
有关快速查看的 WWDC 演示文稿

407
00:14:02,486 --> 0:14:05,886
对于 iOS 13 的新功能

408
00:14:05,886 --> 0:14:07,376
QLPreviewController 

409
00:14:07,376 --> 0:14:09,016
还提供对标记的支持

410
00:14:09,426 --> 0:14:11,046
标记是你在预览文档和文件

411
00:14:11,046 --> 0:14:13,376
或编辑邮件附件时

412
00:14:13,666 --> 0:14:14,916
可用的编辑工具

413
00:14:15,426 --> 0:14:21,146
这适用于图像和 PDF

414
00:14:21,336 --> 0:14:22,746
QLPreviewController 

415
00:14:22,746 --> 0:14:25,186
还支持修剪和旋转视频

416
00:14:25,596 --> 0:14:28,086
要使用这些功能

417
00:14:28,086 --> 0:14:29,406
只需启用编辑模式

418
00:14:29,806 --> 0:14:33,836
你所要做的就是为预览项

419
00:14:33,836 --> 0:14:35,216
实现可选的

420
00:14:35,686 --> 0:14:37,416
委托方法编辑模式

421
00:14:37,866 --> 0:14:43,046
默认情况下编辑已禁用

422
00:14:43,046 --> 0:14:44,646
但可以基于每个项目启用它

423
00:14:45,166 --> 0:14:46,536
此委托方法允许你

424
00:14:46,536 --> 0:14:48,516
指定是否需要编辑功能

425
00:14:48,516 --> 0:14:50,556
以及如何处理

426
00:14:50,556 --> 0:14:52,286
生成的文件

427
00:14:52,816 --> 0:14:56,146
你可以让 QLPreviewController

428
00:14:56,146 --> 0:14:57,886
使用用户编辑的版本

429
00:14:57,886 --> 0:15:00,486
覆盖原始文件

430
00:14:57,886 --> 0:15:00,486
覆盖原始文件

431
00:15:00,706 --> 0:15:03,426
为此请从预览项的编辑模式

432
00:15:03,426 --> 0:15:05,666
返回 updateContents 

433
00:15:07,556 --> 0:15:09,246
如果需要对成功保存的

434
00:15:09,246 --> 0:15:11,156
编辑做出反应

435
00:15:11,156 --> 0:15:12,796
还可以实现可选的

436
00:15:12,796 --> 0:15:15,266
didUpdateContentsof 

437
00:15:17,806 --> 0:15:18,026
previewItem 方法

438
00:15:18,116 --> 0:15:19,816
或者你可能更倾向使用

439
00:15:19,816 --> 0:15:21,556
QLPreviewController 

440
00:15:21,556 --> 0:15:23,336
来创建正在预览的

441
00:15:23,336 --> 0:15:24,716
文件编辑副本

442
00:15:24,716 --> 0:15:25,226
并自行管理它们

443
00:15:25,826 --> 0:15:28,526
要执行此操作

444
00:15:28,526 --> 0:15:30,306
请从预览项的编辑模式

445
00:15:30,846 --> 0:15:32,796
返回 createCopy 

446
00:15:32,796 --> 0:15:35,226
并实施委托方法

447
00:15:35,316 --> 0:15:36,786
在修改后的内容 URL 中

448
00:15:36,786 --> 0:15:37,906
保存预览项目的已编辑副本

449
00:15:42,316 --> 0:15:44,456
macOS 上的快速查看

450
00:15:44,456 --> 0:15:45,056
扩展 API

451
00:15:46,556 --> 0:15:47,716
我们刚刚谈到了

452
00:15:47,716 --> 0:15:49,476
获取和使用

453
00:15:49,476 --> 0:15:50,476
缩略图和文件预览

454
00:15:51,476 --> 0:15:52,466
现在让我们谈谈

455
00:15:52,466 --> 0:15:54,046
如何为你自己的文件类型

456
00:15:54,046 --> 0:15:55,316
提供缩略图和预览

457
00:15:55,646 --> 0:15:58,406
一个 App 在 iOS 上

458
00:15:58,406 --> 0:15:59,936
可以实现快速查看

459
00:15:59,936 --> 0:16:01,626
缩略图和预览扩展

460
00:15:59,936 --> 0:16:01,626
缩略图和预览扩展

461
00:16:01,626 --> 0:16:03,416
为自己的文档提供

462
00:16:03,416 --> 0:16:05,086
系统范围的缩略图和预览支持

463
00:16:05,716 --> 0:16:06,626
现在 macOS 上也提供了

464
00:16:06,626 --> 0:16:09,286
相同的快速查看扩展 API

465
00:16:11,116 --> 0:16:12,806
缩略图在整个 macOS 

466
00:16:12,806 --> 0:16:14,946
和 iOS 中使用

467
00:16:14,946 --> 0:16:16,356
允许用户快速识别文件

468
00:16:17,176 --> 0:16:18,626
例如你可以在屏幕截图中

469
00:16:18,626 --> 0:16:20,306
看到 macOS 如何

470
00:16:20,306 --> 0:16:21,246
在访达中使用它们

471
00:16:21,506 --> 0:16:23,686
macOS 可以为许多常见的

472
00:16:23,686 --> 0:16:26,176
文件类型生成缩略图

473
00:16:26,176 --> 0:16:27,276
实现缩略图扩展允许你

474
00:16:27,276 --> 0:16:28,766
也为自己的文件类型

475
00:16:28,766 --> 0:16:30,126
提供缩略图

476
00:16:30,126 --> 0:16:31,996
以便它们可以在访达

477
00:16:31,996 --> 0:16:33,826
和缩略图可能显示的

478
00:16:33,826 --> 0:16:35,386
其他位置具有丰富的表示形式

479
00:16:35,946 --> 0:16:38,546
扩展 API 取代了旧的

480
00:16:38,546 --> 0:16:40,976
基于 CF 插件的生成器系统

481
00:16:41,116 --> 0:16:42,566
如果你有快速查看生成器

482
00:16:42,566 --> 0:16:44,876
请考虑尽快迁移

483
00:16:45,206 --> 0:16:47,866
我在这里说的快速查看扩展

484
00:16:47,866 --> 0:16:49,176
是一般意义上的

485
00:16:49,176 --> 0:16:50,756
因为缩略图扩展点

486
00:16:50,756 --> 0:16:51,936
来自快速查看缩略图

487
00:16:52,566 --> 0:16:53,996
这是之前从 iOS 上的

488
00:16:53,996 --> 0:16:55,466
快速查看框架中获得的

489
00:16:56,276 --> 0:16:57,516
如果你不需要 UIKit

490
00:16:57,516 --> 0:16:58,896
可能需要考虑

491
00:16:58,896 --> 0:17:00,126
从快速查看缩略图中导入它

492
00:16:58,896 --> 0:17:00,126
从快速查看缩略图中导入它

493
00:17:00,126 --> 0:17:02,406
因为这将使扩展

494
00:17:02,406 --> 0:17:03,626
更加精简

495
00:17:06,116 --> 0:17:07,915
要创建缩略图扩展

496
00:17:07,996 --> 0:17:09,816
请使用缩略图扩展模板

497
00:17:09,816 --> 0:17:12,246
在 Xcode 项目中添加新目标

498
00:17:13,976 --> 0:17:15,586
设置扩展目标之后

499
00:17:15,586 --> 0:17:17,146
你将能实现

500
00:17:17,146 --> 0:17:21,026
QLThumbnailProvider 子类

501
00:17:21,126 --> 0:17:24,316
你可以使用 CG 上下文

502
00:17:24,316 --> 0:17:26,106
AppKit 上下文绘制缩略图

503
00:17:26,106 --> 0:17:28,415
也可以为图像提供文件 URL

504
00:17:31,116 --> 0:17:32,846
这是一个快速示例

505
00:17:32,846 --> 0:17:34,316
我们覆盖了为请求处理程序方法

506
00:17:34,316 --> 0:17:35,776
提供缩略图

507
00:17:36,206 --> 0:17:37,986
我们在 2017 年 WWDC 的

508
00:17:37,986 --> 0:17:39,466
《Building Great Document-based Apps in iOS 11》

509
00:17:39,466 --> 0:17:43,016
会议中广泛介绍了

510
00:17:43,016 --> 0:17:45,496
快速查看 API 的这一部分

511
00:17:46,016 --> 0:17:47,666
我们强烈建议你们查看一下

512
00:17:47,996 --> 0:17:50,106
简而言之你将获得一个

513
00:17:50,106 --> 0:17:52,006
QLFileThumbnailRequest 

514
00:17:52,006 --> 0:17:54,146
它将包含文件的 URL

515
00:17:54,356 --> 0:17:58,226
缩略图的最大和最小尺寸及其比例

516
00:17:58,766 --> 0:18:00,896
使用这些来创建

517
00:17:58,766 --> 0:18:00,896
使用这些来创建

518
00:18:00,896 --> 0:18:02,466
符合这些规范的缩略图

519
00:18:04,306 --> 0:18:06,216
对于每个缩略图请求

520
00:18:06,216 --> 0:18:07,846
API 希望你创建一个

521
00:18:07,846 --> 0:18:10,006
QLThumbnailReply 

522
00:18:10,006 --> 0:18:11,286
用于生成缩略图

523
00:18:11,526 --> 0:18:13,476
将 QLThumbnailReply 

524
00:18:13,476 --> 0:18:14,716
传递给上面的完成处理程序块

525
00:18:18,346 --> 0:18:21,616
要在 macOS 上调试缩略图扩展

526
00:18:21,616 --> 0:18:22,436
可使用 QLManage

527
00:18:22,466 --> 0:18:24,506
如果你以前编写过

528
00:18:24,506 --> 0:18:26,096
快速查看生成器

529
00:18:26,096 --> 0:18:27,036
你可能会认识到这个工具

530
00:18:27,036 --> 0:18:29,066
在 Xcode 中构建

531
00:18:29,066 --> 0:18:30,746
并运行扩展目标

532
00:18:30,746 --> 0:18:32,106
以便在系统中注册你的扩展

533
00:18:32,856 --> 0:18:34,606
然后使用 QLManage 生成

534
00:18:34,606 --> 0:18:36,176
文件类型的缩略图

535
00:18:36,176 --> 0:18:37,976
并附加到 Xcode 中的扩展中

536
00:18:40,096 --> 0:18:41,866
预览文件扩展

537
00:18:42,196 --> 0:18:44,266
今年新推出的 macOS 

538
00:18:44,266 --> 0:18:46,286
快速查看还允许你通过

539
00:18:46,286 --> 0:18:48,276
实现预览扩展

540
00:18:48,276 --> 0:18:50,646
为自己的文件类型提供预览

541
00:18:51,956 --> 0:18:53,406
快速查看预览扩展

542
00:18:53,406 --> 0:18:54,946
已经存在

543
00:18:54,946 --> 0:18:55,966
以支持聚焦预览

544
00:18:56,326 --> 0:18:59,306
请参阅 WWDC 2017 的

545
00:18:59,306 --> 0:19:00,846
iOS 和 macOS 

546
00:18:59,306 --> 0:19:00,846
iOS 和 macOS 

547
00:19:00,846 --> 0:19:01,456
Core Spotlight 中的新功能

548
00:19:02,406 --> 0:19:03,596
今年我们还增加了

549
00:19:03,596 --> 0:19:04,826
对文件预览的支持

550
00:19:05,236 --> 0:19:07,906
使用扩展程序

551
00:19:07,906 --> 0:19:09,136
你现在可以直接提供

552
00:19:09,136 --> 0:19:10,196
显示预览的视图

553
00:19:11,146 --> 0:19:12,236
这与旧的快速查看生成器不同

554
00:19:12,236 --> 0:19:13,686
在这些生成器中

555
00:19:13,686 --> 0:19:15,596
你提供了供系统

556
00:19:15,596 --> 0:19:16,766
显示的数据或 URL

557
00:19:17,146 --> 0:19:19,436
新的扩展 API 

558
00:19:19,436 --> 0:19:20,556
可以让你更好地

559
00:19:20,556 --> 0:19:21,846
控制预览的外观

560
00:19:22,546 --> 0:19:23,966
我们建议你从旧的

561
00:19:23,966 --> 0:19:25,336
快速查看生成器中迁移

562
00:19:25,336 --> 0:19:27,606
因为它们在将来的版本中将被弃用

563
00:19:30,436 --> 0:19:32,206
要创建预览扩展

564
00:19:32,206 --> 0:19:33,826
请在项目中添加新目标

565
00:19:33,826 --> 0:19:36,186
然后选择“Quick Look Preview Extension”模板

566
00:19:38,756 --> 0:19:41,996
该 API 与 iOS 预览扩展相同

567
00:19:41,996 --> 0:19:44,886
可以看看看 2018 年的

568
00:19:44,886 --> 0:19:46,036
《Quick Look Previews from the Ground Up》

569
00:19:46,436 --> 0:19:48,646
快速总结一下

570
00:19:48,646 --> 0:19:49,766
你需要在 Info.plist 中的 

571
00:19:49,766 --> 0:19:51,006
QLSupportedContentTypes 中

572
00:19:51,006 --> 0:19:53,826
声明支持的 UTI 列表

573
00:19:54,966 --> 0:19:57,026
这必须与要预览的

574
00:19:57,026 --> 0:19:58,706
文件的 UTI 完全匹配

575
00:19:59,216 --> 0:20:01,726
不支持通过父 UTI 进行匹配

576
00:19:59,216 --> 0:20:01,726
不支持通过父 UTI 进行匹配

577
00:20:02,136 --> 0:20:03,986
该模板将提供一个视图控制器

578
00:20:03,986 --> 0:20:05,246
你可在在其中

579
00:20:05,246 --> 0:20:06,756
准备预览的内容

580
00:20:07,216 --> 0:20:10,366
下面是视图控制器模板的

581
00:20:10,366 --> 0:20:11,466
一个快速示例

582
00:20:12,176 --> 0:20:14,156
在 URL 上执行

583
00:20:14,156 --> 0:20:16,696
preparePreviewofFile 以准备视图控制器

584
00:20:16,996 --> 0:20:19,256
准备好后 调用完成处理程序

585
00:20:20,026 --> 0:20:21,556
显示预览的 QLPreviewView 

586
00:20:21,556 --> 0:20:23,096
将显示一个旋转轮

587
00:20:23,096 --> 0:20:24,476
直到调用好

588
00:20:24,476 --> 0:20:25,406
此完成处理程序为止

589
00:20:25,816 --> 0:20:27,046
因此需要尽快

590
00:20:27,046 --> 0:20:28,166
准备好预览

591
00:20:30,276 --> 0:20:32,176
请记住你的预览可以显示在

592
00:20:32,176 --> 0:20:34,036
任何 QLPreviewView 中

593
00:20:34,726 --> 0:20:36,166
可能是预览面板

594
00:20:36,336 --> 0:20:37,636
列视图侧边栏

595
00:20:37,876 --> 0:20:39,556
聚焦搜索或 

596
00:20:39,556 --> 0:20:41,236
QLPreviewView 的任何客户端

597
00:20:45,716 --> 0:20:47,546
要进行调试请使用 Xcode

598
00:20:47,546 --> 0:20:48,486
启动扩展目标

599
00:20:48,756 --> 0:20:51,146
注意 Xcode 在默认情况下

600
00:20:51,146 --> 0:20:52,616
将使用快速查看模拟器

601
00:20:53,076 --> 0:20:54,586
这有助于

602
00:20:54,586 --> 0:20:55,966
调试 Core Spotlight 预览

603
00:20:55,966 --> 0:20:57,386
这些预览也是可扩展的

604
00:20:57,386 --> 0:20:57,966
也可以提供支持

605
00:20:58,516 --> 0:21:00,796
要调试常规文件预览

606
00:20:58,516 --> 0:21:00,796
要调试常规文件预览

607
00:21:00,796 --> 0:21:02,136
可以忽略模拟器并使用

608
00:21:02,136 --> 0:21:04,496
访达或 QLManage 调用预览

609
00:21:04,746 --> 0:21:05,976
只要预览扩展

610
00:21:05,976 --> 0:21:07,066
通过 Xcode 启动

611
00:21:07,066 --> 0:21:10,306
Xcode 就会自动附加到它

612
00:21:14,416 --> 0:21:16,036
让我们谈谈在 Mac 上

613
00:21:16,176 --> 0:21:17,936
支持 iPad App

614
00:21:17,936 --> 0:21:19,586
我们的文档处理 API 

615
00:21:19,586 --> 0:21:22,066
在 Mac 上的 iPad App 中受支持

616
00:21:22,066 --> 0:21:22,646
因此你可以将

617
00:21:22,646 --> 0:21:25,236
基于文档的 iOS App 带到 macOS

618
00:21:28,036 --> 0:21:30,316
对于 UIDocumentPickerViewController

619
00:21:30,456 --> 0:21:32,216
像在 iOS 上那样使用它

620
00:21:32,216 --> 0:21:33,946
用户会自动获得

621
00:21:33,946 --> 0:21:37,196
和体验到 macOS 特有的感觉

622
00:21:37,196 --> 0:21:38,786
具体来说

623
00:21:38,786 --> 0:21:41,066
.import 和 .open 模式显示

624
00:21:41,326 --> 0:21:43,736
NSOpenPanel

625
00:21:43,736 --> 0:21:45,306
.exportToService 和 .moveToService

626
00:21:45,306 --> 0:21:46,426
模式显示 NSSavePanel

627
00:21:48,296 --> 0:21:49,816
同样对于

628
00:21:49,816 --> 0:21:51,676
UIDocumentBrowserViewController

629
00:21:52,176 --> 0:21:53,706
用户将获得一种在 macOS 上

630
00:21:53,706 --> 0:21:54,656
基于文档的 App 的

631
00:21:54,656 --> 0:21:56,456
原生体验

632
00:21:56,826 --> 0:21:59,336
用户将在单独的窗口中

633
00:21:59,336 --> 0:22:00,716
获取 NSOpenPanel

634
00:21:59,336 --> 0:22:00,716
获取 NSOpenPanel

635
00:22:00,716 --> 0:22:01,666
就像在 TextEdit 中一样

636
00:22:02,176 --> 0:22:04,406
由于 iOS 和 macOS 上的

637
00:22:04,406 --> 0:22:06,456
接口之间存在差异

638
00:22:06,456 --> 0:22:08,926
因此存在一些小的运行时间差异

639
00:22:09,606 --> 0:22:11,016
一个很好的例子是

640
00:22:11,016 --> 0:22:12,916
UIDocumentBrowserViewControllers 导航栏

641
00:22:12,916 --> 0:22:15,996
它在 macOS 上不存在

642
00:22:16,596 --> 0:22:17,776
有关如何处理

643
00:22:17,776 --> 0:22:19,286
这些特定情况的详细信息

644
00:22:19,286 --> 0:22:20,376
请查看文档

645
00:22:21,296 --> 0:22:23,106
在某些情况下

646
00:22:23,106 --> 0:22:25,206
你可以使用新的 API

647
00:22:25,356 --> 0:22:26,736
例如菜单栏 API

648
00:22:26,806 --> 0:22:27,576
来帮助你解决这些 UI 差异

649
00:22:30,196 --> 0:22:32,226
Mac 上的 iPad App

650
00:22:32,226 --> 0:22:34,186
也可以使用快速查看功能

651
00:22:34,356 --> 0:22:36,186
呈现 QLPreviewController 

652
00:22:36,186 --> 0:22:38,216
将在 macOS 上启动 QLPreviewPanel

653
00:22:38,216 --> 0:22:41,466
以提供更原始自然的 Mac 体验

654
00:22:42,436 --> 0:22:44,316
由于 QLPreviewPanel 

655
00:22:44,316 --> 0:22:45,306
是一个单独的窗口

656
00:22:45,306 --> 0:22:46,536
因此你呈现的视图控制器

657
00:22:46,536 --> 0:22:48,656
内容将是可见的

658
00:22:48,656 --> 0:22:49,696
但它将是非常棒的

659
00:22:49,696 --> 0:22:50,596
并且不会交互

660
00:22:52,436 --> 0:22:54,376
在 Mac 上测试 iPad App

661
00:22:54,376 --> 0:22:55,406
以确保它看起来很棒

662
00:22:58,096 --> 0:22:59,716
在 Mac 上的 iPad App 中

663
00:22:59,716 --> 0:23:01,946
要注意到 QLPreviewController 的限制

664
00:22:59,716 --> 0:23:01,946
要注意到 QLPreviewController 的限制

665
00:23:01,946 --> 0:23:03,706
即嵌入 QLPreviewController 的

666
00:23:03,706 --> 0:23:05,326
视图不完全受支持

667
00:23:05,326 --> 0:23:07,336
在这种情况下

668
00:23:07,336 --> 0:23:08,896
我们将提供缩略图

669
00:23:08,896 --> 0:23:09,976
而不是实时预览

670
00:23:13,046 --> 0:23:14,076
我们今天学到了什么

671
00:23:14,926 --> 0:23:16,046
首先我们向你展示了

672
00:23:16,046 --> 0:23:18,076
如何在 App 中

673
00:23:18,076 --> 0:23:20,066
利用 iOS 13 的新功能

674
00:23:20,066 --> 0:23:21,826
例如访问目录中的多个文件

675
00:23:22,116 --> 0:23:24,356
支持 USB 驱动器

676
00:23:24,356 --> 0:23:24,866
和 SMB 服务器

677
00:23:25,806 --> 0:23:27,526
然后我们了解了如何

678
00:23:27,526 --> 0:23:29,136
使用快速查看显示

679
00:23:29,136 --> 0:23:31,196
与文件 App 相同的丰富缩略图

680
00:23:31,196 --> 0:23:33,116
为图像和视频

681
00:23:33,116 --> 0:23:34,866
提供快速查看编辑支持

682
00:23:34,906 --> 0:23:36,396
并在 Mac 上提供

683
00:23:36,396 --> 0:23:37,856
带有现代扩展 API 的

684
00:23:37,856 --> 0:23:41,386
预览和缩略图 谢谢大家
