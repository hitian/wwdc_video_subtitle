1
00:00:00,506 --> 0:00:07,486
[音乐]

2
00:00:07,986 --> 0:00:10,436
&gt;&gt; 大家好 我是 Brian Weinstein

3
00:00:10,436 --> 0:00:12,146
Safari 浏览器团队的一名工程师

4
00:00:12,546 --> 0:00:14,316
今天 我要谈谈

5
00:00:14,316 --> 0:00:16,826
Safari 浏览器扩展的新功能

6
00:00:17,336 --> 0:00:19,506
Safari 浏览器扩展

7
00:00:19,506 --> 0:00:20,646
允许你拓展 Safari 浏览器的行为

8
00:00:21,156 --> 0:00:22,436
你可以通过

9
00:00:22,436 --> 0:00:24,256
向 Web 页面添加脚本或样式表

10
00:00:24,256 --> 0:00:26,196
阻止内容以及

11
00:00:26,196 --> 0:00:28,686
添加到 Safari 浏览器的 UI

12
00:00:28,686 --> 0:00:30,056
来增强用户的浏览体验

13
00:00:31,676 --> 0:00:34,346
我们将要讨论

14
00:00:34,346 --> 0:00:35,796
如何构建和分发 Safari 浏览器扩展

15
00:00:35,796 --> 0:00:40,606
如何通知你的 Safari App 扩展

16
00:00:40,606 --> 0:00:42,146
内容拦截器（Content Blocker）有什么活动

17
00:00:42,146 --> 0:00:47,176
对于扩展中的窗口

18
00:00:47,176 --> 0:00:49,946
选项卡和页面管理的更好的支持

19
00:00:49,946 --> 0:00:51,896
Safari App 扩展弹窗的改进

20
00:00:51,896 --> 0:00:54,646
以及 Safari 浏览器扩展

21
00:00:54,646 --> 0:00:56,566
与包含此扩展的 App 之间

22
00:00:56,566 --> 0:01:00,266
交流的一些最佳实践

23
00:00:56,566 --> 0:01:00,266
交流的一些最佳实践

24
00:01:01,656 --> 0:01:03,466
我今天要关注

25
00:01:03,466 --> 0:01:04,766
两种类型的 Safari 浏览器扩展

26
00:01:04,766 --> 0:01:07,306
内容拦截器

27
00:01:08,516 --> 0:01:10,186
和 Safari App 扩展

28
00:01:10,746 --> 0:01:12,156
这两个扩展

29
00:01:12,156 --> 0:01:13,956
都与用 Xcode 构建的

30
00:01:13,956 --> 0:01:15,256
Mac App 捆绑在一起

31
00:01:16,796 --> 0:01:18,556
当你从 Mac App Store

32
00:01:18,556 --> 0:01:20,166
安装一个带有

33
00:01:20,166 --> 0:01:22,166
Safari App 扩展的 App 时

34
00:01:22,166 --> 0:01:24,286
该扩展会立即显示在 Safari 浏览器的偏好设置中

35
00:01:24,286 --> 0:01:26,316
并随时可以启用

36
00:01:28,516 --> 0:01:31,086
你也可以

37
00:01:31,086 --> 0:01:34,406
在 App 通过 Notarization 认证后

38
00:01:34,406 --> 0:01:36,076
直接在你的网站上发布它

39
00:01:36,296 --> 0:01:37,966
经过 Notarization 认证的 App 至少需要启动一次

40
00:01:37,966 --> 0:01:39,976
它们的扩展

41
00:01:39,976 --> 0:01:41,946
才能在 Safari 浏览器中显示

42
00:01:42,536 --> 0:01:44,186
我们十分欣赏你创建的

43
00:01:44,186 --> 0:01:45,966
Safari App 扩展

44
00:01:45,966 --> 0:01:46,636
和内容拦截器

45
00:01:47,136 --> 0:01:48,976
也非常感谢那些

46
00:01:48,976 --> 0:01:50,096
在 Safari 开发者论坛上

47
00:01:50,096 --> 0:01:52,536
提出改进建议

48
00:01:52,736 --> 0:01:54,316
提交 Bug 报告

49
00:01:54,316 --> 0:01:55,546
以及做出评论的人

50
00:01:58,756 --> 0:02:00,636
我们听到的

51
00:01:58,756 --> 0:02:00,636
我们听到的

52
00:02:00,636 --> 0:02:02,876
获得最多诉求的特性之一是

53
00:02:02,876 --> 0:02:04,836
希望扩展可以知道

54
00:02:04,836 --> 0:02:07,126
它们的内容拦截器何时执行操作

55
00:02:08,566 --> 0:02:10,455
内容拦截器提供了

56
00:02:10,455 --> 0:02:12,256
一个声明性规则列表

57
00:02:12,366 --> 0:02:14,646
定义了在使用 Safari 浏览器时

58
00:02:14,646 --> 0:02:16,476
要拦截或隐藏的内容

59
00:02:17,006 --> 0:02:19,146
Safari 浏览器在被打开时

60
00:02:19,146 --> 0:02:20,836
内容拦截器时就会向它

61
00:02:21,056 --> 0:02:22,056
请求规则列表

62
00:02:23,316 --> 0:02:25,766
在用户进行浏览的过程中

63
00:02:25,766 --> 0:02:27,496
当你的内容拦截器

64
00:02:27,496 --> 0:02:28,956
将一个资源标记为

65
00:02:28,956 --> 0:02:32,336
应该被拦截的内容时

66
00:02:32,336 --> 0:02:35,446
现在 在 Safari 浏览器 13 中

67
00:02:35,446 --> 0:02:37,476
Safari 浏览器会与你的内容拦截器

68
00:02:37,476 --> 0:02:39,016
将其告诉你的 Safari App 扩展

69
00:02:40,296 --> 0:02:41,996
如果你的用户

70
00:02:41,996 --> 0:02:43,976
想要查看你的统计数据

71
00:02:43,976 --> 0:02:45,716
那么他们可以打开

72
00:02:45,716 --> 0:02:48,386
相关的 Safari App 扩展

73
00:02:48,386 --> 0:02:50,256
或者他们可以选择

74
00:02:50,426 --> 0:02:52,486
只打开内容拦截器来保持最私密的体验

75
00:02:52,836 --> 0:02:54,216
让我们看看

76
00:02:54,216 --> 0:02:56,696
这有多简单

77
00:02:56,926 --> 0:02:59,006
第一步是在扩展的 Info.plist 文件中

78
00:02:59,006 --> 0:03:00,866
将内容拦截器

79
00:02:59,006 --> 0:03:00,866
将内容拦截器

80
00:03:00,866 --> 0:03:04,906
与 Safari App 扩展关联起来

81
00:03:05,616 --> 0:03:08,586
为此 你需要在 Safari App 扩展的

82
00:03:08,586 --> 0:03:10,596
Info.plist 的 NSExtension 部分中

83
00:03:10,596 --> 0:03:13,166
添加一个新条目

84
00:03:14,266 --> 0:03:17,896
Key 是

85
00:03:17,896 --> 0:03:18,956
SFSafariAssociatedContentBlockers

86
00:03:21,176 --> 0:03:23,626
它的值是

87
00:03:23,626 --> 0:03:25,076
一个内容拦截器 Bundle 的标识符数组

88
00:03:25,076 --> 0:03:27,386
Safari App 扩展希望得到

89
00:03:27,386 --> 0:03:29,526
关于其内容的通知

90
00:03:30,106 --> 0:03:32,156
一个 Safari App 扩展

91
00:03:32,156 --> 0:03:34,616
可以被多个内容拦截器通知

92
00:03:35,206 --> 0:03:37,026
需要记住的一点是

93
00:03:37,026 --> 0:03:38,906
内容拦截器

94
00:03:38,906 --> 0:03:41,016
和 Safari App 扩展

95
00:03:41,016 --> 0:03:42,426
必须包含在同一个 App 中

96
00:03:46,436 --> 0:03:48,586
在你设置好了 Info.plist 之后

97
00:03:48,586 --> 0:03:52,426
你需要在扩展的主体对象上

98
00:03:52,426 --> 0:03:54,346
实现委托方法

99
00:03:54,766 --> 0:03:56,926
该方法是 contentBlocker(

100
00:03:56,926 --> 0:03:58,876
withIdentifier

101
00:03:58,876 --> 0:04:01,746
blockedResourcesWithURLs, on page)

102
00:03:58,876 --> 0:04:01,746
blockedResourcesWithURLs, on page)

103
00:04:02,816 --> 0:04:04,696
这些通知是批量处理的

104
00:04:04,696 --> 0:04:06,526
你只会在 Safari App 扩展

105
00:04:06,716 --> 0:04:09,206
拥有它的 Info.plist 的

106
00:04:09,206 --> 0:04:12,996
网站访问部分的访问权限时

107
00:04:12,996 --> 0:04:14,796
获得 URL 的通知

108
00:04:16,305 --> 0:04:20,886
就是这样 现在 让我们继续谈谈

109
00:04:20,886 --> 0:04:22,666
对窗口 选项卡

110
00:04:22,756 --> 0:04:24,666
和页面管理所进行的改进

111
00:04:25,706 --> 0:04:27,606
第一个增强

112
00:04:27,606 --> 0:04:30,396
来自另一个热门的诉求

113
00:04:30,396 --> 0:04:32,126
它是一个可以告诉你

114
00:04:32,126 --> 0:04:33,536
页面何时执行导航的 API

115
00:04:34,076 --> 0:04:35,536
你可以将其以

116
00:04:35,536 --> 0:04:37,546
与你刚刚所听到的

117
00:04:37,546 --> 0:04:39,736
内容拦截器通知相匹配

118
00:04:39,736 --> 0:04:41,766
从而了解关于新的页面加载的

119
00:04:41,766 --> 0:04:42,766
任何通知

120
00:04:44,126 --> 0:04:46,036
第一个增强

121
00:04:46,036 --> 0:04:48,816
来自另一个热门的诉求

122
00:04:48,816 --> 0:04:50,606
它是一个可以告诉你

123
00:04:50,606 --> 0:04:51,966
页面何时执行导航的 API

124
00:04:52,726 --> 0:04:54,046
你可以将其以

125
00:04:54,046 --> 0:04:55,916
与你刚刚所听到的

126
00:04:56,086 --> 0:04:58,196
内容拦截器通知相匹配

127
00:04:58,196 --> 0:05:00,206
从而了解关于新的页面加载的

128
00:04:58,196 --> 0:05:00,206
从而了解关于新的页面加载的

129
00:05:00,206 --> 0:05:01,236
任何通知

130
00:05:01,926 --> 0:05:04,116
你也可以通过

131
00:05:04,116 --> 0:05:06,126
在加载特定页面时

132
00:05:06,126 --> 0:05:08,456
跟踪重定向链

133
00:05:08,456 --> 0:05:10,646
以便重定向到

134
00:05:10,646 --> 0:05:13,166
网站的特定版本

135
00:05:13,166 --> 0:05:14,936
或者查看 URL 参数

136
00:05:14,936 --> 0:05:16,756
从而确定你的扩展

137
00:05:16,756 --> 0:05:18,926
是否已经向用户显示了它的 UI

138
00:05:19,746 --> 0:05:21,426
即使扩展没有

139
00:05:21,426 --> 0:05:22,726
访问目标 URL 的权限

140
00:05:22,726 --> 0:05:25,066
它也会在扩展的主体对象上

141
00:05:25,066 --> 0:05:27,426
调用此方法

142
00:05:27,966 --> 0:05:30,006
在这种情况下

143
00:05:30,006 --> 0:05:30,416
URL 将为 nil

144
00:05:30,976 --> 0:05:33,286
如果用户打开了

145
00:05:33,286 --> 0:05:35,376
他们的收藏夹或历史记录

146
00:05:35,376 --> 0:05:36,026
URL 也将为 nil

147
00:05:38,556 --> 0:05:40,816
让我们在示例扩展中

148
00:05:40,816 --> 0:05:41,696
运用这些全新的 API

149
00:05:43,836 --> 0:05:47,026
在之前的 WWDC 上

150
00:05:47,026 --> 0:05:48,856
Safari App 扩展刚刚被引入

151
00:05:49,206 --> 0:05:51,176
我们创建了一个扩展

152
00:05:51,176 --> 0:05:53,386
用熊的表情符号

153
00:05:53,386 --> 0:05:54,366
替换了单词“Bear”（熊）

154
00:05:54,896 --> 0:05:57,056
今天 我想继续拓展这个扩展

155
00:05:57,056 --> 0:05:59,096
能够让熊获得

156
00:05:59,096 --> 0:06:00,556
更便捷的上网体验

157
00:05:59,096 --> 0:06:00,556
更便捷的上网体验

158
00:06:01,166 --> 0:06:03,066
到目前为止

159
00:06:03,066 --> 0:06:06,066
我已经制作了一个内容拦截器

160
00:06:06,806 --> 0:06:10,026
它可以拦截 URL 中含有蜂蜜的所有图像

161
00:06:10,026 --> 0:06:11,506
可以消除来自甜食的诱惑

162
00:06:12,386 --> 0:06:13,966
让我们将该内容拦截器

163
00:06:13,966 --> 0:06:17,166
与现有的 Safari App 扩展关联起来

164
00:06:17,646 --> 0:06:19,866
首先打开 Safari App 扩展的

165
00:06:19,866 --> 0:06:21,806
Info.plist 文件

166
00:06:22,446 --> 0:06:24,506
为了关联一个内容拦截器

167
00:06:24,706 --> 0:06:27,966
我将向 NSExtension 部分

168
00:06:27,966 --> 0:06:30,506
添加一个与 SF Safari 关联的

169
00:06:30,506 --> 0:06:31,496
内容拦截器条目

170
00:06:32,266 --> 0:06:34,666
我将打开 XML 查看器

171
00:06:35,076 --> 0:06:36,586
来粘贴源代码

172
00:06:44,686 --> 0:06:46,916
然后回到 plist 查看器

173
00:06:53,426 --> 0:06:55,476
它是一个只有一个条目的数组

174
00:06:55,916 --> 0:06:57,926
也就是我的新内容拦截器的

175
00:06:57,926 --> 0:06:58,796
Bundle 标识符

176
00:06:59,396 --> 0:07:01,426
下一步是

177
00:06:59,396 --> 0:07:01,426
下一步是

178
00:07:01,426 --> 0:07:02,976
监听内容阻止通知

179
00:07:08,896 --> 0:07:11,366
我们要做的是

180
00:07:11,816 --> 0:07:14,326
在 SFSafariPage

181
00:07:14,326 --> 0:07:15,996
和该页面上已被阻止的资源列表之间

182
00:07:15,996 --> 0:07:17,406
构建一个映射

183
00:07:18,396 --> 0:07:20,306
当我们收到内容拦截器

184
00:07:20,306 --> 0:07:21,796
阻塞资源的通知时

185
00:07:21,796 --> 0:07:24,896
我们会找到

186
00:07:24,896 --> 0:07:26,866
该页面的阻止资源列表

187
00:07:27,666 --> 0:07:30,516
并添加上刚才被告知的资源

188
00:07:31,636 --> 0:07:33,706
当页面导航时

189
00:07:33,706 --> 0:07:34,736
我们希望清除该列表

190
00:07:36,856 --> 0:07:39,936
为此 我们将重写函数

191
00:07:40,156 --> 0:07:43,276
page(_page, willNavigateTo url)

192
00:07:43,276 --> 0:07:44,816
并使用它

193
00:07:44,816 --> 0:07:46,086
清除页面的阻止资源

194
00:07:47,186 --> 0:07:49,026
我们要做的最后一件事

195
00:07:49,026 --> 0:07:50,846
是将  的标记

196
00:07:50,846 --> 0:07:52,906
设置为该页面上

197
00:07:52,906 --> 0:07:54,966
被阻止的资源的数量

198
00:07:57,236 --> 0:07:59,246
当我们被要求

199
00:07:59,246 --> 0:08:02,036
验证窗口的 toolbarItem 时

200
00:07:59,246 --> 0:08:02,036
验证窗口的 toolbarItem 时

201
00:08:02,036 --> 0:08:03,926
我们要在窗口中

202
00:08:03,926 --> 0:08:06,886
找到活动选项卡

203
00:08:07,806 --> 0:08:09,776
找到它的活动页面

204
00:08:09,776 --> 0:08:12,206
并从地图中获取该页面上被阻止的资源的数量

205
00:08:12,806 --> 0:08:14,126
让我们看看它是如何运作的

206
00:08:15,056 --> 0:08:17,926
我们将构建并运行 Animalify

207
00:08:17,926 --> 0:08:19,976
以便系统能够发现我们的扩展

208
00:08:26,016 --> 0:08:29,316
一旦我们运行了这个 App

209
00:08:29,316 --> 0:08:31,076
你就可以看到带有一个按钮的启动界面

210
00:08:31,076 --> 0:08:32,996
可以将你的用户引导到

211
00:08:32,996 --> 0:08:34,826
Safari 浏览器的扩展偏好设置

212
00:08:35,385 --> 0:08:36,666
如果你在 Xcode 中

213
00:08:36,666 --> 0:08:38,796
创建带有 Safari 浏览器扩展的 App

214
00:08:38,796 --> 0:08:41,056
你就可以免费获得

215
00:08:41,326 --> 0:08:41,986
App 内的启动界面

216
00:08:43,015 --> 0:08:44,956
让我们启动 Safari 浏览器

217
00:08:44,956 --> 0:08:46,046
它会把我带到我的主页

218
00:08:46,326 --> 0:08:48,616
bearseating.com

219
00:08:48,616 --> 0:08:50,756
这样我就可以每天都获得一些食物的灵感。

220
00:08:51,566 --> 0:08:53,136
由于我只是在

221
00:08:53,136 --> 0:08:54,736
尝试编写 Safari 浏览器扩展

222
00:08:55,036 --> 0:08:56,556
所以目前我还没有

223
00:08:56,556 --> 0:08:57,426
Apple 开发者证书

224
00:08:57,806 --> 0:08:59,666
这是没有问题的

225
00:08:59,666 --> 0:09:02,036
因为我可以通过

226
00:08:59,666 --> 0:09:02,036
因为我可以通过

227
00:09:02,036 --> 0:09:04,246
打开 Safari 的偏好设置

228
00:09:04,506 --> 0:09:06,046
进入“高级”标签页

229
00:09:07,096 --> 0:09:10,526
然后勾选“在菜单栏中显示‘开发’菜单”

230
00:09:10,526 --> 0:09:11,636
在这之后 打开“开发”菜单

231
00:09:13,446 --> 0:09:15,186
并选中“允许未签名的扩展”

232
00:09:15,186 --> 0:09:17,916
从而暂时告诉

233
00:09:17,916 --> 0:09:19,146
Safari 浏览器运行这些扩展

234
00:09:19,746 --> 0:09:22,006
让我们进入 Safari 浏览器的

235
00:09:22,006 --> 0:09:24,476
扩展偏好设置

236
00:09:24,476 --> 0:09:26,176
打开我们的内容拦截器

237
00:09:26,176 --> 0:09:28,926
和 Safari App 扩展

238
00:09:28,926 --> 0:09:30,006
然后重载 bearseating.com

239
00:09:30,816 --> 0:09:32,946
如你所见

240
00:09:32,946 --> 0:09:34,446
内容拦截器拦截了

241
00:09:34,446 --> 0:09:36,426
熊吃蜂蜜的图片

242
00:09:36,426 --> 0:09:38,056
我们的工具栏时间被标记为数字 3

243
00:09:38,056 --> 0:09:41,526
这意味着有 3 个资源被拦截

244
00:09:42,756 --> 0:09:44,526
如果我们在没有内容拦截器的情况下

245
00:09:44,526 --> 0:09:46,596
重新加载页面

246
00:09:46,596 --> 0:09:48,656
toolbarItem 的标记将被清除

247
00:09:48,656 --> 0:09:50,526
你就可以看到再次被拦截的图像

248
00:09:51,366 --> 0:09:52,646
当你再次加载内容拦截器时

249
00:09:52,646 --> 0:09:55,076
这些图像就消失了

250
00:09:55,636 --> 0:09:57,596
完成内容阻止

251
00:09:57,596 --> 0:09:59,746
和页面导航通知

252
00:09:59,746 --> 0:10:00,976
就是如此的容易

253
00:09:59,746 --> 0:10:00,976
就是如此的容易

254
00:10:05,346 --> 0:10:06,916
这些只是 Safari App 扩展

255
00:10:06,916 --> 0:10:09,336
提供的众多

256
00:10:09,336 --> 0:10:10,696
新 API 中的一部分

257
00:10:11,206 --> 0:10:12,386
让我们再看看其他的 API

258
00:10:13,896 --> 0:10:15,756
我们还添加了

259
00:10:15,756 --> 0:10:17,726
获取 SFSafariPage

260
00:10:17,726 --> 0:10:18,766
可见内容的功能

261
00:10:19,336 --> 0:10:20,886
你的扩展将需要

262
00:10:20,886 --> 0:10:23,506
访问页面的 URL

263
00:10:23,506 --> 0:10:25,656
以便从这个 API 中获取图像数据

264
00:10:27,266 --> 0:10:28,496
使用最新版本的 Safari 浏览器

265
00:10:28,496 --> 0:10:31,096
如今向用户显示

266
00:10:31,096 --> 0:10:32,986
来自 Safari 浏览器扩展包的内容

267
00:10:32,986 --> 0:10:34,646
变得更加容易

268
00:10:35,036 --> 0:10:38,766
现在 你可以从本地代码

269
00:10:38,766 --> 0:10:40,426
获得扩展的 baseURI

270
00:10:40,806 --> 0:10:42,976
无需再注入脚本

271
00:10:46,736 --> 0:10:49,156
你也可以直接将选项卡

272
00:10:49,156 --> 0:10:51,496
导航到 URL

273
00:10:51,496 --> 0:10:52,426
而不需要注入脚本

274
00:10:55,346 --> 0:10:58,276
最后 Safari 浏览器

275
00:10:58,276 --> 0:11:00,306
可以将 Safari JavaScript 对象

276
00:10:58,276 --> 0:11:00,306
可以将 Safari JavaScript 对象

277
00:11:00,456 --> 0:11:02,366
注入到任何装载了

278
00:11:02,366 --> 0:11:03,856
来自扩展的内容的帧中

279
00:11:04,366 --> 0:11:06,086
这意味着这些帧

280
00:11:06,086 --> 0:11:07,996
可以向 Safari App 扩展

281
00:11:07,996 --> 0:11:12,526
发送消息并从中接收消息

282
00:11:12,796 --> 0:11:14,826
Safari 浏览器扩展

283
00:11:14,826 --> 0:11:17,096
现在可以找到 Safari 浏览器中

284
00:11:17,096 --> 0:11:19,446
所有打开的选项卡和窗口

285
00:11:19,446 --> 0:11:20,716
而不仅仅是活动窗口和选项卡

286
00:11:22,346 --> 0:11:24,516
在这里 你可以看到

287
00:11:24,516 --> 0:11:25,606
获取 App 中所有窗口的代码

288
00:11:25,606 --> 0:11:29,916
所有选项卡

289
00:11:36,076 --> 0:11:38,076
你还可以获得

290
00:11:38,076 --> 0:11:40,856
对包含选项卡的页面

291
00:11:40,856 --> 0:11:42,336
和包含窗口的选项卡的引用

292
00:11:43,436 --> 0:11:47,226
例如 为了处理来自内容脚本的消息

293
00:11:47,336 --> 0:11:50,956
你需要更新该窗口中的 toolbarItem

294
00:11:51,486 --> 0:11:52,976
你可以获得包含选项卡的页面

295
00:11:52,976 --> 0:11:55,526
以及包含窗口的选项卡

296
00:12:00,016 --> 0:12:01,766
需要记住的一点是

297
00:12:01,766 --> 0:12:03,156
固定的选项卡将有

298
00:12:03,156 --> 0:12:05,066
一个包含 nil 的窗口

299
00:12:05,066 --> 0:12:06,716
因为它们属于所有窗口

300
00:12:06,716 --> 0:12:08,426
而不是单个父窗口

301
00:12:09,996 --> 0:12:11,926
这些就是对窗口

302
00:12:11,926 --> 0:12:14,356
选项卡和页面管理的改进

303
00:12:15,616 --> 0:12:17,846
最后一组 API 改进

304
00:12:18,096 --> 0:12:19,886
是针对 Safari App 扩展的弹窗的

305
00:12:19,886 --> 0:12:23,136
现在你可以通过编程

306
00:12:23,136 --> 0:12:25,606
显示和关闭弹窗

307
00:12:26,026 --> 0:12:28,076
你可以通过在 SFSafariToolbarItem 上

308
00:12:28,076 --> 0:12:32,736
调用 showPopover() 来显示弹窗

309
00:12:32,736 --> 0:12:33,826
你可以从显示弹窗的窗口中

310
00:12:33,826 --> 0:12:34,986
获得该 toolbarItem

311
00:12:35,786 --> 0:12:37,476
通过弹窗视图控制器

312
00:12:37,476 --> 0:12:39,676
弹窗可以被关闭

313
00:12:39,986 --> 0:12:41,606
你只需要调用

314
00:12:41,606 --> 0:12:43,366
self.dismissPopover()

315
00:12:45,376 --> 0:12:47,366
让我们来看看

316
00:12:47,366 --> 0:12:49,366
我们将如何通过添加这些新 API

317
00:12:49,366 --> 0:12:50,596
来改进我们的扩展

318
00:12:53,086 --> 0:12:55,096
利用这些全新的 API

319
00:12:55,266 --> 0:12:57,506
我想升级我的 Safari 浏览器扩展

320
00:12:58,036 --> 0:12:59,536
当我点按 toolbarItem 时

321
00:12:59,786 --> 0:13:01,696
我希望显示一个

322
00:12:59,786 --> 0:13:01,696
我希望显示一个

323
00:13:01,696 --> 0:13:02,586
带有表视图的弹窗

324
00:13:02,856 --> 0:13:04,916
每个选项卡

325
00:13:05,386 --> 0:13:06,426
将有一行和两列

326
00:13:06,986 --> 0:13:08,506
左边一列

327
00:13:08,506 --> 0:13:10,436
将是选项卡的屏幕快照

328
00:13:10,436 --> 0:13:12,316
右边一列将显示页面的标题

329
00:13:12,316 --> 0:13:13,976
以及每个域

330
00:13:13,976 --> 0:13:16,146
阻止了多少资源

331
00:13:17,576 --> 0:13:19,146
这个过程的第一步是

332
00:13:19,486 --> 0:13:21,136
在显示弹窗之前

333
00:13:21,136 --> 0:13:22,806
告诉弹窗视图控制器

334
00:13:22,806 --> 0:13:25,666
Safari 浏览器窗口的状态

335
00:13:26,186 --> 0:13:28,056
为此 我将重写

336
00:13:28,056 --> 0:13:30,096
popoverWillShow() 函数

337
00:13:30,096 --> 0:13:31,366
并让它收集此信息

338
00:13:34,236 --> 0:13:36,866
如你所见

339
00:13:36,866 --> 0:13:38,536
这个函数迭代了窗口中的所有选项卡

340
00:13:38,536 --> 0:13:40,366
并填充了 3 个数组

341
00:13:40,366 --> 0:13:42,656
一个用于被阻止的资源

342
00:13:42,656 --> 0:13:47,106
一个用于图像

343
00:13:47,106 --> 0:13:48,496
一个用于标题

344
00:13:49,906 --> 0:13:52,656
对于每个选项卡

345
00:13:52,656 --> 0:13:54,986
我们将得到

346
00:13:54,986 --> 0:14:00,306
页面可见区域的屏幕快照

347
00:13:54,986 --> 0:14:00,306
页面可见区域的屏幕快照

348
00:14:00,306 --> 0:14:02,936
页面属性中每个页面的标题

349
00:14:02,936 --> 0:14:04,446
以及每个页面的

350
00:14:04,446 --> 0:14:05,316
被阻止资源列表

351
00:14:06,436 --> 0:14:08,306
我们也开始重写

352
00:14:08,466 --> 0:14:10,326
弹窗视图控制器

353
00:14:10,326 --> 0:14:12,036
来返回视图控制器

354
00:14:12,346 --> 0:14:14,706
让我们看一下视图控制器

355
00:14:16,356 --> 0:14:19,466
设置弹窗状态

356
00:14:19,466 --> 0:14:21,206
在类中设置一些实例变量

357
00:14:21,716 --> 0:14:23,426
然后重新加载表视图

358
00:14:25,596 --> 0:14:28,106
我们要做的最后一件事是

359
00:14:28,106 --> 0:14:30,896
当用户点按其中一行时

360
00:14:30,896 --> 0:14:33,816
我们要激活该选项卡

361
00:14:33,816 --> 0:14:36,556
然后关闭弹窗

362
00:14:39,466 --> 0:14:40,986
当表视图选择发生变化时

363
00:14:40,986 --> 0:14:46,266
我们激活用户点按的选项卡

364
00:14:46,266 --> 0:14:47,266
然后关闭弹窗口

365
00:14:48,206 --> 0:14:49,436
现在 让我们再次构建

366
00:14:49,556 --> 0:14:50,966
并运行 Animalify

367
00:14:58,256 --> 0:15:00,256
我们会再次启动 Safari 浏览器

368
00:14:58,256 --> 0:15:00,256
我们会再次启动 Safari 浏览器

369
00:15:00,826 --> 0:15:02,006
来加载我们的主页

370
00:15:02,566 --> 0:15:04,346
你可以看到

371
00:15:04,346 --> 0:15:05,496
扩展不再打开

372
00:15:06,076 --> 0:15:07,666
这是因为

373
00:15:07,666 --> 0:15:09,656
每次启动 Safari 浏览器时

374
00:15:09,656 --> 0:15:10,526
都必须允许未签名的扩展

375
00:15:11,176 --> 0:15:12,726
让我们在“开发”菜单中进行设置

376
00:15:14,996 --> 0:15:17,966
然后我们打开 App

377
00:15:17,966 --> 0:15:19,346
让它引导我们找到扩展

378
00:15:20,806 --> 0:15:22,716
我们将打开扩展

379
00:15:22,716 --> 0:15:25,046
和内容拦截器

380
00:15:25,046 --> 0:15:25,556
并重新加载页面

381
00:15:25,776 --> 0:15:29,186
我们还会再打开几页

382
00:15:31,086 --> 0:15:32,176
你将注意到

383
00:15:32,176 --> 0:15:33,866
当我们在 bearseating.com 处

384
00:15:33,866 --> 0:15:36,176
更改选项卡时

385
00:15:36,176 --> 0:15:37,586
toolbarItem 的标记就会被清除

386
00:15:38,416 --> 0:15:39,526
让我们打开弹窗

387
00:15:40,776 --> 0:15:42,966
你可以在窗口中看到每个标签

388
00:15:43,496 --> 0:15:45,456
在第一行中

389
00:15:45,456 --> 0:15:47,066
你可以看到我们的内容拦截器拦截了

390
00:15:47,066 --> 0:15:49,566
来自 beardiet.com 的两个资源

391
00:15:49,566 --> 0:15:51,906
和来自 bearseating.com 的一个资源

392
00:15:52,396 --> 0:15:54,206
让我们通过点按第一行

393
00:15:54,206 --> 0:15:56,316
来激活那个选项卡

394
00:15:56,316 --> 0:15:57,776
然后我们回到了那个选项卡

395
00:15:58,166 --> 0:15:59,856
弹窗被关闭

396
00:16:00,316 --> 0:16:01,946
我们今天讨论的 API

397
00:16:01,946 --> 0:16:03,826
只是新 API 的其中一些

398
00:16:08,996 --> 0:16:10,996
最后 我想介绍一些

399
00:16:11,146 --> 0:16:15,106
关于如何在 Safari 浏览器扩展和 App 之间

400
00:16:15,106 --> 0:16:17,236
进行通信的最佳实践

401
00:16:18,716 --> 0:16:20,346
Safari 浏览器

402
00:16:20,346 --> 0:16:21,946
会在必要时启动 App 扩展

403
00:16:22,306 --> 0:16:23,746
这并不能保证

404
00:16:23,746 --> 0:16:24,456
你的 App 正在运行

405
00:16:25,706 --> 0:16:27,586
但是如果你有一个

406
00:16:27,586 --> 0:16:30,076
带有 XPC 服务的 App

407
00:16:30,276 --> 0:16:31,946
你的扩展可能希望与

408
00:16:31,946 --> 0:16:33,166
这个 XPC 服务通信

409
00:16:33,726 --> 0:16:35,836
或者你希望 Safari 浏览器扩展

410
00:16:36,166 --> 0:16:38,996
和 App 之间共享数据

411
00:16:39,586 --> 0:16:40,646
你的扩展可能支持用户

412
00:16:40,646 --> 0:16:42,326
在你的 App 中

413
00:16:42,326 --> 0:16:43,826
进行偏好设置

414
00:16:45,216 --> 0:16:47,366
为此 你需要让你的 Safari 浏览器扩展

415
00:16:47,366 --> 0:16:50,166
和 XPC 服务

416
00:16:50,166 --> 0:16:52,176
处在与你的 App 相同的 App 组中

417
00:16:52,876 --> 0:16:54,436
这将允许你的 Safari 浏览器扩展

418
00:16:54,436 --> 0:16:56,636
在同一 App 组

419
00:16:56,636 --> 0:16:58,766
查找已命名的 Mock 服务

420
00:16:59,056 --> 0:17:00,436
你可以使用

421
00:16:59,056 --> 0:17:00,436
你可以使用

422
00:17:00,436 --> 0:17:02,766
UserDefaults(suiteName:) 初始化器

423
00:17:03,006 --> 0:17:05,096
从而共享整个 App 组的数据

424
00:17:06,106 --> 0:17:08,316
然而 假设用户在 App 中

425
00:17:08,316 --> 0:17:10,165
执行了一个

426
00:17:10,356 --> 0:17:13,116
最好由 Safari App 扩展来处理的操作

427
00:17:13,636 --> 0:17:15,185
例如 你正在编写

428
00:17:15,185 --> 0:17:17,126
密码管理器

429
00:17:17,126 --> 0:17:19,726
用户需要在 App 中选择要填写的凭据

430
00:17:20,215 --> 0:17:21,656
这就不能保证

431
00:17:21,656 --> 0:17:23,396
你的扩展正在运行

432
00:17:23,396 --> 0:17:24,566
或者 Safari 浏览器正在运行

433
00:17:25,955 --> 0:17:28,435
你可以从你的 App

434
00:17:28,435 --> 0:17:30,256
调用一个 API 来向你的

435
00:17:30,256 --> 0:17:31,706
Safari App 扩展发送一条消息

436
00:17:32,396 --> 0:17:34,466
你的 App 调用

437
00:17:34,466 --> 0:17:36,866
SFSafariApplication.dispatchMessage

438
00:17:37,046 --> 0:17:39,846
(withName, toExtensionWithIdentifier)

439
00:17:40,616 --> 0:17:42,126
只有在你的扩展被激活

440
00:17:42,126 --> 0:17:43,736
并且扩展必须与

441
00:17:43,736 --> 0:17:46,156
调用 API 的代码

442
00:17:46,156 --> 0:17:48,016
位于同一个 App 包中时

443
00:17:48,016 --> 0:17:49,426
这个方法才会生效

444
00:17:51,036 --> 0:17:53,166
调用这个 API

445
00:17:53,166 --> 0:17:55,466
将向 Safari 浏览器发送一条消息

446
00:17:55,466 --> 0:17:56,286
并且在需要时启动它

447
00:17:57,696 --> 0:17:59,866
Safari 浏览器会将此消息

448
00:17:59,866 --> 0:18:02,126
转发给 Safari App 扩展

449
00:17:59,866 --> 0:18:02,126
转发给 Safari App 扩展

450
00:18:03,286 --> 0:18:05,356
你的 Safari App 扩展

451
00:18:05,356 --> 0:18:08,416
可以通过将

452
00:18:08,416 --> 0:18:10,576
来自包含扩展的 App 的消息

453
00:18:10,656 --> 0:18:12,866
实现为

454
00:18:13,116 --> 0:18:15,586
在扩展的主体对象中的用户名信息

455
00:18:15,586 --> 0:18:16,786
来监听这些消息

456
00:18:17,506 --> 0:18:19,346
让我们后退一步

457
00:18:19,346 --> 0:18:21,116
看看你的 App 和 Safari 浏览器扩展

458
00:18:21,236 --> 0:18:23,296
得以通信和共享数据

459
00:18:23,516 --> 0:18:25,216
所有可行的方法

460
00:18:27,176 --> 0:18:29,726
如果你的 App 和 Safari 浏览器扩展

461
00:18:29,726 --> 0:18:31,986
位于同一个 App 中

462
00:18:31,986 --> 0:18:33,956
你可以使用 NSXPCConnection

463
00:18:33,956 --> 0:18:35,856
在它们之间通信

464
00:18:35,856 --> 0:18:37,966
或使用用户默认值共享数据

465
00:18:38,236 --> 0:18:40,906
如果你想从 App 向

466
00:18:40,996 --> 0:18:43,136
Safari App 扩展发送消息

467
00:18:43,136 --> 0:18:45,736
可以使用

468
00:18:45,736 --> 0:18:47,806
SFSafariApplication.dispatchMessage

469
00:18:47,806 --> 0:18:50,736
来发送消息

470
00:18:50,736 --> 0:18:52,556
并监听来自包含 Safari App 扩展的

471
00:18:52,556 --> 0:18:54,816
App 处接收的消息

472
00:18:54,906 --> 0:18:56,036
从而处理消息

473
00:18:56,456 --> 0:18:59,266
你可以通过上述的方法

474
00:18:59,366 --> 0:19:01,786
在你的 App 和 Safari 浏览器扩展之间进行通信

475
00:18:59,366 --> 0:19:01,786
在你的 App 和 Safari 浏览器扩展之间进行通信

476
00:19:04,136 --> 0:19:05,486
以上就是我们

477
00:19:05,486 --> 0:19:06,556
今天要讲的内容

478
00:19:07,186 --> 0:19:08,706
我希望你们能从这段视频中

479
00:19:08,706 --> 0:19:10,106
学到几件主要的事情

480
00:19:10,106 --> 0:19:12,896
你可以通过 Mac App Store

481
00:19:12,896 --> 0:19:14,476
发布你的 Safari 浏览器扩展

482
00:19:14,476 --> 0:19:16,106
或者通过你的网站

483
00:19:16,106 --> 0:19:18,086
发布通过了 Notarization 认证的 App

484
00:19:19,246 --> 0:19:20,736
你可以将你的内容拦截器

485
00:19:20,736 --> 0:19:22,606
与 Safari App 扩展关联起来

486
00:19:22,606 --> 0:19:24,636
这样你就可以知道

487
00:19:24,636 --> 0:19:25,856
你的内容拦截器

488
00:19:25,856 --> 0:19:27,436
何时执行拦截操作

489
00:19:28,626 --> 0:19:29,936
你可以使用 App 群组

490
00:19:29,936 --> 0:19:31,886
在 Safari 浏览器扩展

491
00:19:31,886 --> 0:19:33,896
和 App 之间进行通信

492
00:19:35,206 --> 0:19:36,916
我们今天讨论的

493
00:19:36,916 --> 0:19:38,766
所有这些 API 的实现

494
00:19:38,766 --> 0:19:41,056
多亏了你的反馈和诉求

495
00:19:41,436 --> 0:19:43,346
请继续提交

496
00:19:43,346 --> 0:19:45,026
改进建议

497
00:19:45,026 --> 0:19:46,636
并在论坛上联系我们

498
00:19:46,976 --> 0:19:49,976
谢谢大家花时间观看我的演讲

499
00:19:49,976 --> 0:19:51,396
我们已经迫不及待地

500
00:19:51,396 --> 0:19:51,916
想看看你们的扩展成果了
