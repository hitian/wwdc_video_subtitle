1
00:00:08,909 --> 0:00:10,677
（ResearchKit

2
00:00:17,050 --> 0:00:17,951
大家好

3
00:00:18,385 --> 0:00:22,990
欢迎参加ResearchKit

4
00:00:23,690 --> 0:00:24,591
我是Srinath

5
00:00:24,858 --> 0:00:26,627
我是援助团队的一名软件工程师

6
00:00:27,394 --> 0:00:29,897
今天我们要讲许多方面的内容

7
00:00:30,397 --> 0:00:31,732
让我们直接来看内容

8
00:00:32,399 --> 0:00:35,269
首先看今天的整体流程

9
00:00:36,436 --> 0:00:39,173
跟以往一样

10
00:00:39,907 --> 0:00:43,277
然后我们讲一下

11
00:00:44,011 --> 0:00:46,280
然后我们有一些非常激动人心的消息

12
00:00:46,613 --> 0:00:48,782
我们想分享一下CareKit框架

13
00:00:51,485 --> 0:00:52,920
关于社区更新

14
00:00:53,353 --> 0:00:57,591
我们主要想讲一下去年发布或更新的

15
00:00:57,658 --> 0:01:01,395
利用了ResearchKit和

16
00:00:57,658 --> 0:01:01,395
利用了ResearchKit和

17
00:01:02,362 --> 0:01:05,132
其中一个例子就是

18
00:01:05,199 --> 0:01:06,867
它是由Novartis发布的

19
00:01:07,134 --> 0:01:11,872
它的主要功能是

20
00:01:13,340 --> 0:01:17,211
另一个值得一提的例子是FDA

21
00:01:18,011 --> 0:01:20,914
这个app面向患者

22
00:01:20,981 --> 0:01:25,586
它是兼容平台的一部分

23
00:01:25,652 --> 0:01:27,387
或现实证据研究

24
00:01:28,155 --> 0:01:31,725
FDA继续开放

25
00:01:31,792 --> 0:01:35,596
供其它组织重新包装、发布和使用

26
00:01:36,997 --> 0:01:39,600
今年除了讲app之外

27
00:01:40,000 --> 0:01:43,003
我们还想讲一下发布

28
00:01:43,804 --> 0:01:47,040
对于情境 ResearchKit

29
00:01:47,107 --> 0:01:48,976
已经发布了大约三到四年

30
00:01:49,610 --> 0:01:52,212
我们达到了一种地步 我们开始看到

31
00:01:52,279 --> 0:01:55,682
涌入了许多发布

32
00:01:55,749 --> 0:01:57,584
这些发布均源自过去几年

33
00:01:58,952 --> 0:02:02,089
绝大部分发布都在谈

34
00:01:58,952 --> 0:02:02,089
绝大部分发布都在谈

35
00:02:02,356 --> 0:02:05,959
基于移动设备的研究设计

36
00:02:06,026 --> 0:02:07,327
比如参与者注册

37
00:02:07,928 --> 0:02:10,663
招募不同参与者的能力

38
00:02:10,731 --> 0:02:13,500
从地理和人口的角度来看

39
00:02:13,834 --> 0:02:18,639
以及随着更多参与者的注册

40
00:02:18,705 --> 0:02:20,874
每个参与者的成本的整体降低

41
00:02:21,909 --> 0:02:24,444
现在让我们看一下其中一些发布

42
00:02:26,847 --> 0:02:30,083
Pride Study

43
00:02:30,150 --> 0:02:35,422
招募和接洽大量被忽视的参与者

44
00:02:35,789 --> 0:02:37,925
进行临床研究方面有多么成功

45
00:02:42,763 --> 0:02:44,364
Healthy Pregnancy

46
00:02:44,698 --> 0:02:46,800
讲了低消耗率

47
00:02:47,201 --> 0:02:50,537
以及如何让参与者定期填写

48
00:02:50,838 --> 0:02:54,341
基于移动设备的研究和问卷

49
00:02:58,712 --> 0:03:01,481
Personal Touch

50
00:02:58,712 --> 0:03:01,481
Personal Touch

51
00:03:01,748 --> 0:03:05,152
因为它的发布发生在2019年五月

52
00:03:05,586 --> 0:03:08,088
我们大约在一周前才开始了解它

53
00:03:08,455 --> 0:03:11,658
其中一个作者在GitHub上

54
00:03:12,025 --> 0:03:14,828
提出他们为此次发布

55
00:03:15,128 --> 0:03:18,031
所做的一些现行任务

56
00:03:18,098 --> 0:03:20,667
以便社区中的其他人也可以利用它

57
00:03:23,003 --> 0:03:24,104
关于这一点

58
00:03:24,404 --> 0:03:25,672
我们所有的健康框架…

59
00:03:26,039 --> 0:03:28,308
ResearchKit、

60
00:03:28,642 --> 0:03:31,545
都是为了让开发人员

61
00:03:31,612 --> 0:03:34,181
能够创建一些很优秀的

62
00:03:35,182 --> 0:03:38,218
另外 我们还有一些很强大的设备

63
00:03:38,285 --> 0:03:39,386
配有传感器

64
00:03:39,820 --> 0:03:42,089
从加速度计和陀螺仪

65
00:03:42,155 --> 0:03:46,627
一直到可以让你的用户

66
00:03:49,530 --> 0:03:51,365
继续下去你会震惊于…

67
00:03:51,798 --> 0:03:55,636
我们社区中的开发人员、研究人员

68
00:03:55,702 --> 0:03:58,472
和健康专家

69
00:03:58,539 --> 0:04:01,041
能够利用我们的产品和平台

70
00:03:58,539 --> 0:04:01,041
能够利用我们的产品和平台

71
00:04:02,576 --> 0:04:03,844
但每年

72
00:04:03,911 --> 0:04:08,715
我们仍收到大量邮件

73
00:04:08,782 --> 0:04:10,417
如“什么是ResearchKit

74
00:04:10,751 --> 0:04:13,153
或“我该如何创建一个

75
00:04:13,620 --> 0:04:17,624
我们还收到了来自科研机构的提案

76
00:04:18,024 --> 0:04:19,793
关于设备授权请求

77
00:04:20,793 --> 0:04:22,029
这也就是为什么今年

78
00:04:22,095 --> 0:04:24,398
我们目前正在开发一些

79
00:04:24,798 --> 0:04:28,836
现在我想让你们简单地预览

80
00:04:30,637 --> 0:04:34,074
第一个是调查员支持计划

81
00:04:34,141 --> 0:04:35,075
我们正在对它进行试验

82
00:04:35,642 --> 0:04:37,644
我们正在开发这个计划

83
00:04:37,945 --> 0:04:40,013
并将于今年下半年发布它

84
00:04:40,614 --> 0:04:43,851
这将是仅限于

85
00:04:44,151 --> 0:04:48,121
它的提案提交过程非常简单明了

86
00:04:48,188 --> 0:04:49,256
（调查员支持试验

87
00:04:49,323 --> 0:04:51,124
我们将优先考虑研究…

88
00:04:51,792 --> 0:04:56,163
通过独特地利用我们的生态系统

89
00:04:57,064 --> 0:04:59,733
研究推进科学进步

90
00:05:01,735 --> 0:05:04,671
我们想让你们预览的第二个计划

91
00:05:05,172 --> 0:05:07,107
是一个重新设计的网站

92
00:05:07,174 --> 0:05:08,008
（重新设计的网站）

93
00:05:08,075 --> 0:05:11,545
这个网站将包含关于ResearchKit

94
00:05:11,912 --> 0:05:15,182
每个想要了解这两个框架的

95
00:05:15,849 --> 0:05:19,520
你还可以获得来自利用这些框架的

96
00:05:19,586 --> 0:05:22,589
其他研究员和开发人员的深刻见解

97
00:05:22,656 --> 0:05:25,192
从而创建优秀的研究和护理app

98
00:05:25,792 --> 0:05:28,495
这个网站将包含

99
00:05:28,795 --> 0:05:30,898
关于调查员支持计划的大量信息

100
00:05:31,532 --> 0:05:35,335
网站和调查员支持计划本身

101
00:05:35,669 --> 0:05:38,238
此计划将于2019年秋季上线

102
00:05:38,305 --> 0:05:40,140
我们对此感到非常激动

103
00:05:41,742 --> 0:05:44,878
现在让我们换个话题

104
00:05:44,945 --> 0:05:46,613
谈谈我们对ResearchKit

105
00:05:47,447 --> 0:05:52,186
我们主要讲两个话题

106
00:05:53,420 --> 0:05:55,189
让我们从UI更新开始讲

107
00:05:56,190 --> 0:06:01,061
今年我们的主要重点围绕

108
00:05:56,190 --> 0:06:01,061
今年我们的主要重点围绕

109
00:06:01,628 --> 0:06:03,830
围绕回答调查问卷

110
00:06:04,298 --> 0:06:07,968
因为我们意识到

111
00:06:08,035 --> 0:06:10,370
和入职培训流程可能会非常长

112
00:06:12,940 --> 0:06:15,142
你在这里可以看到我们已更新了

113
00:06:15,209 --> 0:06:19,780
卡片样式 从而使你可以为用户

114
00:06:20,747 --> 0:06:24,184
这包含步骤内进度指示器

115
00:06:24,651 --> 0:06:26,653
以及一个了解更多按钮

116
00:06:27,354 --> 0:06:30,057
这个按钮可用于

117
00:06:30,123 --> 0:06:34,061
当提问或答案选项包含

118
00:06:34,127 --> 0:06:36,096
并不完全一目了然的术语时

119
00:06:36,697 --> 0:06:39,733
因此在这个例子中

120
00:06:39,800 --> 0:06:41,668
嗜睡症到底是什么意思

121
00:06:42,269 --> 0:06:44,204
他们只需要轻触了解更多按钮

122
00:06:44,505 --> 0:06:48,909
拉出一个表单 就可以获得

123
00:06:48,976 --> 0:06:50,344
有关提问和答案选项自身的更多信息

124
00:06:52,513 --> 0:06:55,649
现在你会注意到我们已经添加了

125
00:06:56,149 --> 0:06:59,553
该样式在ResearchKit上

126
00:07:00,254 --> 0:07:04,725
因此我们的所有步骤现在都可以

127
00:07:04,992 --> 0:07:06,460
通过顶部内容图像视图

128
00:07:08,262 --> 0:07:09,429
如果你接着向下滚动

129
00:07:09,496 --> 0:07:12,266
我们还添加了一个

130
00:07:12,566 --> 0:07:14,535
用于编写列表

131
00:07:15,235 --> 0:07:17,337
列表会自动应用格式

132
00:07:18,505 --> 0:07:22,409
现在让我们看一下如何把这些变更

133
00:07:22,476 --> 0:07:23,844
合并到你现有的app中

134
00:07:26,313 --> 0:07:28,982
你要做的第一件事就是创建一个

135
00:07:29,049 --> 0:07:31,652
带有唯一标识符的

136
00:07:33,654 --> 0:07:36,056
现在我们所有的步骤

137
00:07:36,123 --> 0:07:38,592
它将作为顶部内容图像视图显示

138
00:07:39,293 --> 0:07:43,497
你还可以自定义其它属性

139
00:07:44,798 --> 0:07:49,303
你需要做的另一件事就是

140
00:07:49,803 --> 0:07:52,906
它接受以下参数

141
00:07:52,973 --> 0:07:53,941
以及样式

142
00:07:54,007 --> 0:07:57,377
你可以在项目符号图像

143
00:07:58,245 --> 0:08:01,849
现在我们所有的步骤都接受

144
00:07:58,245 --> 0:08:01,849
现在我们所有的步骤都接受

145
00:08:02,382 --> 0:08:05,319
让我们把这个主体项分配给

146
00:08:06,520 --> 0:08:09,423
接下来你要做的就是创建

147
00:08:09,690 --> 0:08:12,860
并绕过步骤

148
00:08:13,560 --> 0:08:16,396
因此这个对象实质上是创建

149
00:08:16,463 --> 0:08:18,732
屏幕上的详情披露按钮的对象

150
00:08:19,466 --> 0:08:21,902
我们还有另一个初始化程序

151
00:08:22,402 --> 0:08:25,405
因此其中一个将作为超链接

152
00:08:27,508 --> 0:08:31,378
我们还向ORK表单项中

153
00:08:31,778 --> 0:08:34,448
以便帮助你自定义分段标题

154
00:08:34,748 --> 0:08:38,619
这会让你在同一个分段内

155
00:08:39,285 --> 0:08:43,123
这个初始化工具接受这样的属性

156
00:08:43,190 --> 0:08:44,157
learnMoreItem

157
00:08:44,224 --> 0:08:46,360
以及表明你是否希望

158
00:08:46,727 --> 0:08:49,263
显示步骤内进度指示器的切换开关

159
00:08:50,631 --> 0:08:53,400
现在你已经把这些变更

160
00:08:54,334 --> 0:08:59,306
你的用户可以在回答

161
00:09:02,342 --> 0:09:04,511
现在让我们继续讲现行任务

162
00:09:05,179 --> 0:09:06,680
与去年类似

163
00:09:06,747 --> 0:09:10,517
今年我们主要关注

164
00:09:11,185 --> 0:09:14,521
视力、听力和语音

165
00:09:15,956 --> 0:09:17,891
当测量视力健康时

166
00:09:18,525 --> 0:09:21,862
有两个关键指标被认为是金标准

167
00:09:23,063 --> 0:09:25,732
视敏度和对比敏感度

168
00:09:27,234 --> 0:09:31,371
视敏度主要是区分

169
00:09:31,672 --> 0:09:34,708
和识别物体及其特征的能力

170
00:09:37,277 --> 0:09:39,413
它有两种刺激

171
00:09:39,680 --> 0:09:40,848
一个是Landolt C

172
00:09:41,415 --> 0:09:44,184
另一个是Snellen

173
00:09:44,718 --> 0:09:48,121
现在我们在视敏度方面的第一个

174
00:09:48,522 --> 0:09:51,758
是由Novartis从他们的

175
00:09:52,492 --> 0:09:55,762
这个app请求用户

176
00:09:55,829 --> 0:09:59,032
把外刻度盘对准字母C的开口处

177
00:10:00,534 --> 0:10:01,969
Landolt C刺激

178
00:10:02,369 --> 0:10:05,739
保持固定对比度 但持续递减尺寸

179
00:10:06,106 --> 0:10:08,108
并向随机方向弹出

180
00:10:09,276 --> 0:10:10,944
一旦用户完成这个任务

181
00:10:11,011 --> 0:10:15,549
开发者将收到该用户的视敏度评分

182
00:10:17,918 --> 0:10:19,520
要向你的app中合并这个功能

183
00:10:19,586 --> 0:10:22,756
你要创建一个

184
00:10:22,823 --> 0:10:24,157
附带唯一标识符的

185
00:10:25,025 --> 0:10:27,427
然后把testType设为敏度

186
00:10:28,295 --> 0:10:29,696
然后跟以往一样

187
00:10:29,763 --> 0:10:33,033
你可以创建一个排序任务

188
00:10:33,534 --> 0:10:36,403
然后传递任务以创建

189
00:10:36,470 --> 0:10:37,971
你可以在你的app内呈现

190
00:10:42,142 --> 0:10:45,078
我们在视敏度方面的第二个现行任务

191
00:10:45,979 --> 0:10:49,283
以Tumbling E作为刺激

192
00:10:50,284 --> 0:10:51,552
现在作为这个任务的一部分

193
00:10:51,618 --> 0:10:54,388
用户要滑动到

194
00:10:54,454 --> 0:10:56,256
字母E开口一侧的方向

195
00:10:57,191 --> 0:10:58,458
类似于Landolt C

196
00:10:58,525 --> 0:11:01,595
Tumbling E

197
00:10:58,525 --> 0:11:01,595
Tumbling E

198
00:11:02,162 --> 0:11:04,865
但会递减尺寸并从随机方向弹出

199
00:11:05,532 --> 0:11:09,002
但有意思的是测试距离

200
00:11:09,069 --> 0:11:12,940
和刺激大小都由原深感摄像头控制

201
00:11:14,741 --> 0:11:16,476
一旦用户完成这个任务

202
00:11:16,777 --> 0:11:18,712
你将接收多得多的值

203
00:11:18,779 --> 0:11:22,316
其中MAR代表最小分辨角

204
00:11:24,218 --> 0:11:25,853
要向你的app中合并这个功能

205
00:11:25,919 --> 0:11:30,691
你要创建一个带有唯一标识符的

206
00:11:31,258 --> 0:11:34,728
你还要针对你的试验

207
00:11:35,028 --> 0:11:36,730
指定最小和最大观察距离

208
00:11:38,665 --> 0:11:40,901
与以往一样 你要创建一个

209
00:11:41,201 --> 0:11:43,570
把它传给

210
00:11:45,839 --> 0:11:49,109
现在让我们继续下一个大类

211
00:11:49,443 --> 0:11:50,511
对比敏感度

212
00:11:51,111 --> 0:11:53,247
这实际上是指从物体背景中

213
00:11:53,313 --> 0:11:55,649
区分出物体的能力

214
00:11:56,483 --> 0:11:58,018
并且它有…

215
00:11:58,352 --> 0:12:01,421
也有两个最常用的

216
00:11:58,352 --> 0:12:01,421
也有两个最常用的

217
00:12:01,488 --> 0:12:04,091
测试这个特定对比敏感度的刺激

218
00:12:04,825 --> 0:12:08,161
一个是Landolt C

219
00:12:09,062 --> 0:12:10,197
（对比敏感度- Landolt C

220
00:12:10,797 --> 0:12:13,367
对比敏感度的第一个现行任务

221
00:12:13,433 --> 0:12:16,803
还是由Navartis从他们的

222
00:12:17,604 --> 0:12:20,474
这与视敏度任务非常一致

223
00:12:20,841 --> 0:12:24,044
但主要不同点是Landolt C

224
00:12:24,111 --> 0:12:27,814
保持固定尺寸

225
00:12:28,148 --> 0:12:30,617
但随着在随机方向的呈现

226
00:12:31,618 --> 0:12:33,420
一旦用户完成这个任务

227
00:12:33,754 --> 0:12:36,723
你将收到该用户的视敏度评分

228
00:12:39,193 --> 0:12:40,460
要把这个功能添加到你的app中

229
00:12:40,527 --> 0:12:43,197
与视敏度任务的添加方式一样

230
00:12:43,630 --> 0:12:44,798
只有一个关键的不同点

231
00:12:44,865 --> 0:12:47,968
就是要把测试类型修改为对比敏感度

232
00:12:49,102 --> 0:12:50,337
（对比敏感度功能

233
00:12:51,038 --> 0:12:52,573
作为我们下一个任务的一部分

234
00:12:52,639 --> 0:12:54,041
我们将尝试为用户生成…

235
00:12:54,541 --> 0:12:56,510
对比敏感度功能

236
00:12:56,577 --> 0:13:00,447
通过为他们呈现一种被称为

237
00:12:56,577 --> 0:13:00,447
通过为他们呈现一种被称为

238
00:13:00,981 --> 0:13:02,216
这就是Gabor Patch刺激

239
00:13:03,016 --> 0:13:06,286
你会注意到刺激上有一些线条

240
00:13:06,353 --> 0:13:08,789
向右倾斜

241
00:13:09,423 --> 0:13:10,757
特别是顶部倾转

242
00:13:11,592 --> 0:13:12,893
在另一个刺激中

243
00:13:12,960 --> 0:13:15,929
你会注意到顶部倾转或向上的倾转

244
00:13:16,196 --> 0:13:17,231
是向左倾斜

245
00:13:17,764 --> 0:13:20,834
你的用户要识别

246
00:13:21,235 --> 0:13:22,402
倾转的倾斜方向

247
00:13:22,736 --> 0:13:25,572
并选择适当的方向作为任务的一部分

248
00:13:28,842 --> 0:13:30,911
现在Gabor Patch刺激

249
00:13:31,211 --> 0:13:35,148
由程序使用适应性算法生成

250
00:13:35,482 --> 0:13:37,317
使空间频率不同

251
00:13:38,785 --> 0:13:42,322
现在Gabor Patch

252
00:13:42,623 --> 0:13:44,791
在不同位置显示

253
00:13:45,993 --> 0:13:46,960
再一次

254
00:13:47,227 --> 0:13:50,297
测试距离和刺激尺寸

255
00:13:50,364 --> 0:13:53,333
由原深感摄像头实时控制

256
00:13:54,902 --> 0:13:56,570
一旦用户完成这个任务

257
00:13:56,904 --> 0:14:00,240
开发人员将使用结果为该用户生成

258
00:13:56,904 --> 0:14:00,240
开发人员将使用结果为该用户生成

259
00:14:00,541 --> 0:14:04,344
一条敏感度VS空间频率曲线

260
00:14:06,680 --> 0:14:08,415
要在你的app中合并这个功能

261
00:14:08,482 --> 0:14:11,518
你要创建一个

262
00:14:11,785 --> 0:14:13,120
带有唯一标识符的

263
00:14:13,987 --> 0:14:17,124
你要针对你的试验

264
00:14:17,191 --> 0:14:18,759
设置最小和最大观察距离

265
00:14:20,160 --> 0:14:21,461
你要创建OrderedTask

266
00:14:21,762 --> 0:14:23,463
把它传给

267
00:14:23,830 --> 0:14:25,566
并在你的app内呈现它

268
00:14:28,802 --> 0:14:32,873
现在对比敏感度功能

269
00:14:33,273 --> 0:14:34,942
利用了原深感摄像头

270
00:14:35,008 --> 0:14:38,745
这两个功能很快将通过

271
00:14:38,812 --> 0:14:40,447
发布到

272
00:14:41,582 --> 0:14:44,451
现在让我们继续下一个类 听力

273
00:14:45,385 --> 0:14:48,589
去年我们发布了

274
00:14:48,655 --> 0:14:50,224
关于听力健康的三个新现行任务

275
00:14:50,824 --> 0:14:53,927
我们有调测听力、语音和噪音

276
00:14:55,062 --> 0:14:57,564
今年我们全面增强了

277
00:14:57,965 --> 0:14:58,799
它们的算法

278
00:14:59,366 --> 0:15:02,703
更棒的是你现在可以直接

279
00:14:59,366 --> 0:15:02,703
更棒的是你现在可以直接

280
00:15:02,769 --> 0:15:05,439
把这些现行任务的结果

281
00:15:06,440 --> 0:15:08,642
要了解关于新数据类型的更多信息

282
00:15:08,709 --> 0:15:11,178
我建议你参加

283
00:15:11,245 --> 0:15:13,013
时间是今天下午2点

284
00:15:13,847 --> 0:15:15,048
（听力任务更新）

285
00:15:16,383 --> 0:15:17,885
现在让我们继续讲语音

286
00:15:18,552 --> 0:15:21,522
去年我们引入了一个

287
00:15:22,055 --> 0:15:23,857
当用户完成这个任务后

288
00:15:24,324 --> 0:15:26,693
你会收到一堆信息

289
00:15:27,094 --> 0:15:29,630
其中包含原生音频文件、转录

290
00:15:29,696 --> 0:15:31,932
以及一个

291
00:15:32,232 --> 0:15:34,168
由语音识别框架进行渲染

292
00:15:34,635 --> 0:15:36,703
今年语音识别团队

293
00:15:36,770 --> 0:15:39,773
向SF转录对象中添加了更多功能

294
00:15:40,240 --> 0:15:42,976
因此你可以提取信息 比如讲话频率

295
00:15:43,043 --> 0:15:44,278
和平均暂停时长

296
00:15:44,678 --> 0:15:49,183
另外还有一个叫做

297
00:15:49,483 --> 0:15:50,851
要了解更多相关信息

298
00:15:51,218 --> 0:15:54,888
请查看“语音识别的改进”演讲

299
00:15:57,157 --> 0:15:59,359
这些就是我们对现行任务扩展库的

300
00:15:59,426 --> 0:16:03,397
全部更新和添加

301
00:15:59,426 --> 0:16:03,397
全部更新和添加

302
00:16:04,665 --> 0:16:06,867
现在你可能注意到了其中有些任务

303
00:16:07,134 --> 0:16:10,003
在底层利用了一些系统框架

304
00:16:11,238 --> 0:16:12,606
我们想提醒你一下

305
00:16:12,873 --> 0:16:16,443
我们的SDK中

306
00:16:16,510 --> 0:16:17,711
有许多其它强大的iOS系统框架

307
00:16:18,579 --> 0:16:20,614
我们非常鼓励开发人员

308
00:16:20,981 --> 0:16:23,517
利用这些框架真正的潜力

309
00:16:23,784 --> 0:16:27,654
若你考虑向ResearchKit中

310
00:16:27,721 --> 0:16:30,691
或甚至考虑添加

311
00:16:30,991 --> 0:16:32,326
与健康有关的新颖体验的话

312
00:16:34,528 --> 0:16:35,495
接下来

313
00:16:35,762 --> 0:16:38,065
让我们转向CareKit的更新

314
00:16:39,299 --> 0:16:42,970
CareKit框架于2016年

315
00:16:43,604 --> 0:16:45,272
作为开源框架被重新引入

316
00:16:45,839 --> 0:16:48,442
我们希望开发人员

317
00:16:48,509 --> 0:16:50,244
执行三件主要的事情：

318
00:16:50,911 --> 0:16:54,381
轻松地把药方数字化；

319
00:16:55,449 --> 0:16:58,519
向用户提供有意义的数据和动态；

320
00:16:58,785 --> 0:17:02,189
并让用户与他们的护理机构

321
00:16:58,785 --> 0:17:02,189
并让用户与他们的护理机构

322
00:17:03,724 --> 0:17:04,958
通过过去几年的努力

323
00:17:05,025 --> 0:17:07,895
我们一直对框架进行递增更新

324
00:17:09,730 --> 0:17:10,763
今年

325
00:17:10,830 --> 0:17:14,401
我很高兴地向大家发布

326
00:17:15,169 --> 0:17:17,003
这就是CareKit 2.0

327
00:17:17,771 --> 0:17:22,342
你可以看到我们完全颠覆了

328
00:17:23,644 --> 0:17:25,811
但更好的是

329
00:17:25,878 --> 0:17:28,415
我们从根本上完全使用Swift

330
00:17:28,482 --> 0:17:31,652
重新架构和重写了框架

331
00:17:32,653 --> 0:17:35,088
那意味着CareKit在底层

332
00:17:35,355 --> 0:17:38,458
可以利用某些最强大的

333
00:17:38,525 --> 0:17:41,328
包括新发布的合并框架

334
00:17:42,896 --> 0:17:44,498
现在让我们具体看一些细节

335
00:17:45,365 --> 0:17:49,036
现在CareKit框架在底层

336
00:17:49,102 --> 0:17:50,037
由两个其它框架组成

337
00:17:50,671 --> 0:17:53,040
CareKit UI

338
00:17:54,641 --> 0:17:58,478
CareKit UI是CareKit

339
00:17:58,912 --> 0:18:03,383
你可以把它作为独立框架

340
00:17:58,912 --> 0:18:03,383
你可以把它作为独立框架

341
00:18:05,085 --> 0:18:10,157
CareKit UI就是

342
00:18:10,691 --> 0:18:12,426
那实际上意味着

343
00:18:12,492 --> 0:18:15,662
你在屏幕上所看到的每一个视图

344
00:18:15,929 --> 0:18:20,067
你都可以在你的app中

345
00:18:21,068 --> 0:18:23,804
我们把它们分成了三大类

346
00:18:24,404 --> 0:18:25,239
或三个组成部分

347
00:18:25,639 --> 0:18:28,342
我们把它们叫做任务、图表和联系人

348
00:18:29,076 --> 0:18:32,012
这些名称反映出了

349
00:18:32,079 --> 0:18:34,081
每个视图所提供的功能

350
00:18:36,250 --> 0:18:37,251
我提到过

351
00:18:37,317 --> 0:18:41,622
CareKit UI中的所有视图

352
00:18:41,688 --> 0:18:43,690
本质上是UI视图的子类

353
00:18:44,758 --> 0:18:47,394
因此我想从任务中

354
00:18:47,461 --> 0:18:48,929
所有可用的视图开始讲

355
00:18:48,996 --> 0:18:51,064
今天我们想强调其中五个

356
00:18:53,433 --> 0:18:56,003
在这里 你可以看到我们有一个视图

357
00:18:56,069 --> 0:18:58,472
因为它只是UI视图的一个子类

358
00:18:58,539 --> 0:19:00,908
你可以在你的app内的任意位置

359
00:18:58,539 --> 0:19:00,908
你可以在你的app内的任意位置

360
00:19:00,974 --> 0:19:02,176
通过把它添加为子视图实现

361
00:19:03,210 --> 0:19:04,444
要创建这个视图

362
00:19:05,045 --> 0:19:07,181
你所要做的就是

363
00:19:07,915 --> 0:19:10,984
创建OCKSimpleTaskView实例

364
00:19:11,552 --> 0:19:14,521
并设置这个对象上可用的一些参数

365
00:19:15,689 --> 0:19:16,590
就是那么简单

366
00:19:17,291 --> 0:19:20,894
现在让我们看一下我们说过的

367
00:19:20,961 --> 0:19:23,797
在这个任务的组成部分内可用的

368
00:19:26,233 --> 0:19:27,935
我们要讲的下一个…

369
00:19:29,436 --> 0:19:31,939
是OCKInstructionsTaskView

370
00:19:32,472 --> 0:19:34,341
当你创建这种类型的对象时

371
00:19:34,775 --> 0:19:36,643
你会得到一个

372
00:19:37,211 --> 0:19:40,180
你所要做的就是添加一个额外的参数

373
00:19:40,714 --> 0:19:42,015
用于查看正确的值

374
00:19:43,450 --> 0:19:44,751
顺着同一条线

375
00:19:45,419 --> 0:19:50,490
我要讲的下一个视图是

376
00:19:50,824 --> 0:19:52,326
看起来跟这个有点像

377
00:19:52,960 --> 0:19:54,428
这个视图很有意思

378
00:19:54,494 --> 0:19:57,464
因为你在这里看到的所有钩号和按钮

379
00:19:57,531 --> 0:19:59,366
都是药物视图的标准元素

380
00:19:59,800 --> 0:20:02,436
作为这个视图的一部分

381
00:19:59,800 --> 0:20:02,436
作为这个视图的一部分

382
00:20:02,703 --> 0:20:04,371
直接给你暴露了

383
00:20:04,771 --> 0:20:07,274
因此你可以选择把自己作为委托

384
00:20:07,574 --> 0:20:11,211
并传递任何你想要传递给

385
00:20:11,745 --> 0:20:13,780
因此你可以选择使用OCK按钮

386
00:20:14,081 --> 0:20:15,883
或你甚至可以提供任意自定义UI

387
00:20:16,350 --> 0:20:18,452
它的自定义程度也很高

388
00:20:20,554 --> 0:20:22,489
我们的下一个视图类型

389
00:20:23,123 --> 0:20:25,559
是OCKChecklistTaskView

390
00:20:25,993 --> 0:20:27,294
看起来跟这个有点像

391
00:20:28,328 --> 0:20:30,531
你在屏幕上看到的所有按钮

392
00:20:30,597 --> 0:20:32,900
现在都在堆栈视图中生成

393
00:20:33,333 --> 0:20:35,802
因此通过简单地调用一个

394
00:20:35,869 --> 0:20:39,373
你就可以向你的勾选列表中

395
00:20:41,608 --> 0:20:44,178
最后一个视图类型

396
00:20:44,645 --> 0:20:46,947
是OCKSimpleLogTaskView

397
00:20:47,648 --> 0:20:48,882
它看起来跟这个有点像

398
00:20:48,949 --> 0:20:53,187
它可用于记录随机事件

399
00:20:53,620 --> 0:20:56,256
每次用户轻触记录按钮时

400
00:20:56,323 --> 0:20:59,426
我们都为他们显示一个他们记录

401
00:21:00,093 --> 0:21:03,063
并且再一次

402
00:21:03,430 --> 0:21:05,465
通过简单地调用

403
00:21:05,532 --> 0:21:07,434
你可以根据由按钮生成的行动

404
00:21:07,701 --> 0:21:10,771
附加更多记录

405
00:21:12,873 --> 0:21:15,843
现在让我们转到下一个组成部分

406
00:21:17,744 --> 0:21:19,847
要在CareKit UI中

407
00:21:20,113 --> 0:21:22,015
你只需要简单地导入

408
00:21:22,082 --> 0:21:26,119
你要创建一个

409
00:21:26,420 --> 0:21:27,387
并制定一个类型

410
00:21:27,921 --> 0:21:30,157
然后你就可以继续设置标题、文本

411
00:21:30,424 --> 0:21:32,292
甚至是值 作为部分数据序列

412
00:21:33,026 --> 0:21:34,761
通过切换类型

413
00:21:35,863 --> 0:21:38,899
你可以轻松地在同一组数据点的

414
00:21:39,233 --> 0:21:41,201
不同图表类型之间切换

415
00:21:43,537 --> 0:21:45,739
我们今天要讲的最后一个组成部分

416
00:21:46,306 --> 0:21:47,341
是联系人

417
00:21:48,842 --> 0:21:51,612
你可以创建一个

418
00:21:51,912 --> 0:21:53,514
并填充内容

419
00:21:53,847 --> 0:21:55,782
我们将确保正确应用

420
00:21:56,116 --> 0:21:57,718
所有约束

421
00:22:00,287 --> 0:22:03,090
这就是我们对CareKit UI

422
00:22:03,724 --> 0:22:05,092
我们的真正目的是

423
00:22:05,425 --> 0:22:08,629
继续向每个组成部分中添加更多视图

424
00:22:08,896 --> 0:22:11,798
同时扩展我们所拥有的组件库

425
00:22:12,966 --> 0:22:15,536
我们认为这对用户来说

426
00:22:15,602 --> 0:22:20,340
CareKit 2.0

427
00:22:20,407 --> 0:22:23,343
因为我们给你提供了所有的

428
00:22:23,610 --> 0:22:25,379
并替你处理所有约束

429
00:22:27,781 --> 0:22:29,850
现在让我们谈谈

430
00:22:30,751 --> 0:22:32,753
CareKit Store与

431
00:22:33,086 --> 0:22:35,556
是它自己在CareKit

432
00:22:36,957 --> 0:22:41,195
因此你可以把它作为一个独立框架

433
00:22:41,261 --> 0:22:43,096
并以一种完全不相关的方式使用它

434
00:22:43,864 --> 0:22:47,100
CareKit Store

435
00:22:47,167 --> 0:22:52,406
允许你坚持Care Plans

436
00:22:52,472 --> 0:22:54,341
在你的app约束内做出反应

437
00:22:55,242 --> 0:22:57,110
因为它实际上是个数据库

438
00:22:57,511 --> 0:22:59,980
我们为你提供了一种

439
00:23:00,547 --> 0:23:02,249
让我们看看这种机制

440
00:23:04,117 --> 0:23:08,722
对于任何护理app来说

441
00:23:09,756 --> 0:23:13,393
现在让我们看看如何初始化

442
00:23:14,661 --> 0:23:18,065
如何创建患者对象并把患者对象

443
00:23:20,033 --> 0:23:23,837
从把CareKitStore

444
00:23:24,638 --> 0:23:28,442
然后你要创建一个带有唯一标识符

445
00:23:28,809 --> 0:23:31,578
以在你的app容器内

446
00:23:33,614 --> 0:23:35,649
然后继续创建患者对象

447
00:23:35,916 --> 0:23:38,018
通过使用其中一个便利的

448
00:23:38,085 --> 0:23:39,720
这个初始化程序接受一些基本参数

449
00:23:41,088 --> 0:23:43,991
然后你要在Store上调用

450
00:23:44,391 --> 0:23:48,495
这将异步接受对象并把它

451
00:23:48,562 --> 0:23:49,396
插入到数据库中

452
00:23:50,297 --> 0:23:51,665
一旦完成后

453
00:23:51,932 --> 0:23:53,700
你将得到一个完成回调

454
00:23:54,301 --> 0:23:57,704
这将返回一个可以打开的

455
00:24:00,340 --> 0:24:03,076
现在我们护理计划中

456
00:24:04,044 --> 0:24:05,345
是护理计划自身

457
00:24:05,846 --> 0:24:09,883
每位患者可以有多个

458
00:24:10,751 --> 0:24:14,488
现在让我们看看

459
00:24:14,922 --> 0:24:17,758
并把它与特定患者相关联

460
00:24:20,194 --> 0:24:22,629
那么跟以往一样

461
00:24:23,197 --> 0:24:24,264
有一件事要注意

462
00:24:24,331 --> 0:24:27,301
就是如果你提供已经可用的标识符

463
00:24:27,634 --> 0:24:30,604
我们将采用带有该标识符的

464
00:24:30,671 --> 0:24:31,672
并把它返回给你

465
00:24:33,841 --> 0:24:37,277
然后如果你没有对患者对象的引用

466
00:24:37,344 --> 0:24:38,645
你要做的第一件事

467
00:24:39,046 --> 0:24:41,181
就是从Store中查询患者对象

468
00:24:42,216 --> 0:24:44,751
一旦完成异步查询

469
00:24:45,018 --> 0:24:45,986
你会得到一个回调

470
00:24:46,053 --> 0:24:47,087
在回调内

471
00:24:47,154 --> 0:24:49,189
你可以继续创建护理计划

472
00:24:49,256 --> 0:24:51,792
通过给它提供参数实现

473
00:24:51,859 --> 0:24:55,062
护理计划的名称

474
00:24:55,596 --> 0:24:58,332
这样会帮助你创建患者…

475
00:24:58,699 --> 0:25:01,368
护理计划与患者自身之间的关联

476
00:24:58,699 --> 0:25:01,368
护理计划与患者自身之间的关联

477
00:25:01,935 --> 0:25:04,404
然后你可以调用

478
00:25:04,471 --> 0:25:06,840
把这个新护理计划

479
00:25:09,343 --> 0:25:13,447
每个护理计划都可以有与之相关联的

480
00:25:13,881 --> 0:25:17,384
这些可以是与这个护理计划相关联的

481
00:25:17,451 --> 0:25:19,520
私人护理机构的联系人

482
00:25:21,455 --> 0:25:24,224
这里还有另外一件有意思的事

483
00:25:24,291 --> 0:25:25,893
就是任务的概念

484
00:25:26,360 --> 0:25:29,696
现在任务实体实质上是

485
00:25:29,763 --> 0:25:34,301
用户每天请求实施的动作

486
00:25:34,368 --> 0:25:35,602
这些动作是他们的护理计划的一部分

487
00:25:36,270 --> 0:25:39,940
每个任务都有与之相关联的

488
00:25:40,407 --> 0:25:44,077
现在时间表决定用户何时

489
00:25:44,144 --> 0:25:45,212
预计实施某个特定任务

490
00:25:46,380 --> 0:25:47,915
现在让我们看一下

491
00:25:48,182 --> 0:25:52,019
如何给用户开某种特定的药物

492
00:25:52,419 --> 0:25:54,388
以及如何把它插入到你的

493
00:25:58,425 --> 0:26:00,260
那么在这里 我们创建了一个时间表

494
00:25:58,425 --> 0:26:00,260
那么在这里 我们创建了一个时间表

495
00:26:00,327 --> 0:26:03,630
表明你每天早上7:00服药

496
00:26:04,598 --> 0:26:06,300
我们创建了另一个时间表元素

497
00:26:06,633 --> 0:26:08,902
表明你要在隔天中午12:00

498
00:26:08,969 --> 0:26:11,071
服用同一种药物

499
00:26:11,471 --> 0:26:13,874
我们把前边那个时间表叫做早餐剂量

500
00:26:14,141 --> 0:26:16,276
把后边这个叫做午餐剂量

501
00:26:17,144 --> 0:26:19,980
你可以简单地把多个时间表

502
00:26:20,047 --> 0:26:24,685
创建一个统一的时间表

503
00:26:25,886 --> 0:26:27,788
那么OCKTaskObject

504
00:26:27,855 --> 0:26:30,224
接受诸如标识符这样的参数

505
00:26:30,290 --> 0:26:32,559
这里的标题是一种多西拉敏药物

506
00:26:32,860 --> 0:26:34,695
你可以给它提供时间表对象

507
00:26:35,596 --> 0:26:39,533
并且你可以直接向

508
00:26:42,035 --> 0:26:45,172
每次用户完成特定任务后

509
00:26:45,772 --> 0:26:47,608
我们都生成一个结果

510
00:26:48,342 --> 0:26:51,778
并且每个结果

511
00:26:52,846 --> 0:26:55,749
现在让我们看一下

512
00:26:55,816 --> 0:26:57,484
所有的结果

513
00:26:57,818 --> 0:27:02,256
从而创建可以呈现给用户的

514
00:26:57,818 --> 0:27:02,256
从而创建可以呈现给用户的

515
00:27:06,393 --> 0:27:08,595
那么在这里我们创建了一个综合查询

516
00:27:08,662 --> 0:27:11,965
它会查询过去七天

517
00:27:13,166 --> 0:27:16,937
然后我们在任务上调用

518
00:27:17,371 --> 0:27:21,308
并且我们给它传递特定任务的标识符

519
00:27:21,742 --> 0:27:23,277
就是包含你所感兴趣的事件的

520
00:27:23,677 --> 0:27:25,846
那么在这个例子中

521
00:27:25,913 --> 0:27:28,215
我只对为多西拉敏药物任务

522
00:27:29,183 --> 0:27:33,153
现在这个API

523
00:27:33,787 --> 0:27:36,190
第一个是每日聚合部分

524
00:27:36,256 --> 0:27:38,559
可被多次调用

525
00:27:38,625 --> 0:27:42,729
每一次你都会得到那一天的一组事件

526
00:27:42,996 --> 0:27:45,399
可以用于计算高阶度量

527
00:27:47,000 --> 0:27:49,670
然后你会得到完成部分

528
00:27:49,736 --> 0:27:51,071
只能被调用一次

529
00:27:51,138 --> 0:27:54,041
它会为你提供一组经过计算的值

530
00:27:54,107 --> 0:27:57,611
可以用于进一步分析或用于图表

531
00:28:00,414 --> 0:28:03,016
CareKit Store中的

532
00:28:03,083 --> 0:28:06,220
都可以有一个与之相关联的注释对象

533
00:28:06,787 --> 0:28:09,156
注释对象实际上就是元数据

534
00:28:09,456 --> 0:28:11,992
比如 如果护理机构

535
00:28:12,059 --> 0:28:14,628
出于某些原因决定更新护理计划

536
00:28:14,695 --> 0:28:17,164
并且他们为你提供自由文本

537
00:28:17,531 --> 0:28:19,666
你可以把那段自由文本

538
00:28:21,068 --> 0:28:22,402
另一件有意思的事

539
00:28:22,769 --> 0:28:26,607
是有些关键实体现在版本可控了

540
00:28:27,608 --> 0:28:30,577
因此当你更新药物任务时

541
00:28:30,644 --> 0:28:31,979
或当你升级时间表时

542
00:28:32,045 --> 0:28:34,114
我们会在CareKit Store中

543
00:28:34,381 --> 0:28:36,283
你可以在它们之间来回切换

544
00:28:39,019 --> 0:28:41,555
那么这就是我们对

545
00:28:41,822 --> 0:28:43,524
CareKit Store框架中

546
00:28:43,590 --> 0:28:45,692
还有许多强大的API可用

547
00:28:46,026 --> 0:28:47,594
我们建议你们了解一下

548
00:28:48,662 --> 0:28:51,999
现在让我们关注一下

549
00:28:52,833 --> 0:28:55,969
CareKit其实就是

550
00:28:56,303 --> 0:28:59,306
从UI层级到底层数据库

551
00:29:00,140 --> 0:29:04,344
我们的实现方式是

552
00:29:05,045 --> 0:29:06,346
现在这个对象

553
00:29:06,413 --> 0:29:11,585
在底层大量使用合并框架

554
00:29:11,852 --> 0:29:14,454
从而在UI层和数据存储层之间

555
00:29:15,923 --> 0:29:18,358
现在CareKit的

556
00:29:18,425 --> 0:29:21,028
是它的模块性和可定制性

557
00:29:21,662 --> 0:29:24,565
我的意思是这里的数据库

558
00:29:24,631 --> 0:29:26,500
既可以是

559
00:29:26,800 --> 0:29:29,636
还可以是你所偏好的任意数据库

560
00:29:29,970 --> 0:29:33,407
只要它遵守

561
00:29:33,473 --> 0:29:36,577
OCKStore协议

562
00:29:38,078 --> 0:29:41,882
你在这里看到的UI元素

563
00:29:42,349 --> 0:29:44,918
或甚至可以来自你的自定义UI视图

564
00:29:44,985 --> 0:29:48,789
只要你告诉我们如何把视图

565
00:29:50,224 --> 0:29:53,093
现在让我们看一下

566
00:29:53,160 --> 0:29:55,929
当用户在屏幕上与UI元素

567
00:29:56,463 --> 0:29:57,497
对于这个例子

568
00:29:57,564 --> 0:29:59,666
让我们主要关注左上角的

569
00:29:59,733 --> 0:30:00,901
多西拉敏药物

570
00:29:59,733 --> 0:30:00,901
多西拉敏药物

571
00:30:01,768 --> 0:30:03,770
当用户轻触这个按钮时

572
00:30:03,837 --> 0:30:06,206
会向同步器传播一个事件

573
00:30:07,407 --> 0:30:09,810
然后同步器把这个信息

574
00:30:09,877 --> 0:30:11,211
转发到底层的数据存储中

575
00:30:11,945 --> 0:30:13,714
一旦数据库

576
00:30:13,780 --> 0:30:18,185
确认成功接收这个对象

577
00:30:18,785 --> 0:30:21,555
同步器会充当发布器的角色

578
00:30:22,289 --> 0:30:25,559
它把数据流传播给

579
00:30:25,626 --> 0:30:28,395
订阅了那个数据流的所有UI元素

580
00:30:28,962 --> 0:30:30,030
在这个例子中

581
00:30:30,330 --> 0:30:31,698
只有三张卡

582
00:30:31,765 --> 0:30:35,102
订阅了来自药物任务的更新

583
00:30:36,036 --> 0:30:37,571
一旦数据流抵达这三张卡

584
00:30:37,638 --> 0:30:40,507
它们就可以各自进行自我更新

585
00:30:41,909 --> 0:30:45,479
这非常令人激动 因为UI视图

586
00:30:45,746 --> 0:30:48,015
相互独立

587
00:30:48,348 --> 0:30:51,218
并且它们还以一种异步方式进行更新

588
00:30:51,485 --> 0:30:54,988
那会在你的护理app内打造一种

589
00:30:58,258 --> 0:31:01,828
现在让我们看一下

590
00:30:58,258 --> 0:31:01,828
现在让我们看一下

591
00:31:01,895 --> 0:31:04,097
如何在代码中把CareKit

592
00:31:04,865 --> 0:31:07,367
那么你要做的第一件事就是

593
00:31:07,734 --> 0:31:10,971
这样做会自动导入

594
00:31:11,038 --> 0:31:12,306
和CareKit Store框架

595
00:31:13,540 --> 0:31:16,577
接下来跟以往一样

596
00:31:18,178 --> 0:31:22,883
然后继续创建

597
00:31:22,950 --> 0:31:24,051
并把它传给Store

598
00:31:24,651 --> 0:31:28,155
这将使同步器在数据库周围

599
00:31:29,590 --> 0:31:33,560
最后你可以选择使用

600
00:31:33,827 --> 0:31:35,162
其中一个独立的视图控制器

601
00:31:35,796 --> 0:31:36,630
在这个例子中

602
00:31:36,697 --> 0:31:40,067
我们展示的是

603
00:31:40,334 --> 0:31:42,970
它接受storeManager资产参数

604
00:31:44,438 --> 0:31:48,976
这样实质上会建立管线

605
00:31:49,042 --> 0:31:50,210
底层的数据库

606
00:31:50,577 --> 0:31:53,280
在此之后你所要做的就是

607
00:31:53,547 --> 0:31:56,083
根据你为Store所提供的数据

608
00:31:56,149 --> 0:31:58,585
你可以看到一个类似这个的UI

609
00:32:00,020 --> 0:32:01,021
类似地

610
00:32:01,088 --> 0:32:04,725
你还可以利用我们的一些

611
00:32:05,158 --> 0:32:08,262
从而创建动态视图和联系人视图

612
00:32:09,363 --> 0:32:10,564
你可以在这里看到

613
00:32:10,631 --> 0:32:15,536
CareKit 2.0

614
00:32:16,737 --> 0:32:19,640
但那还并不是全部

615
00:32:20,240 --> 0:32:23,877
因此我想邀请Erik上台

616
00:32:24,278 --> 0:32:29,249
我们会演示如何使用CareKit 2.0

617
00:32:33,887 --> 0:32:34,988
好的

618
00:32:35,422 --> 0:32:37,424
太棒了 谢谢Srinath

619
00:32:38,592 --> 0:32:40,260
大家下午好 我是Erik

620
00:32:40,794 --> 0:32:42,262
我是CareKit团队的

621
00:32:42,829 --> 0:32:45,699
今天我有幸能带大家

622
00:32:46,166 --> 0:32:48,302
这个app会演示

623
00:32:48,368 --> 0:32:50,404
一些很棒的新功能

624
00:32:51,305 --> 0:32:53,874
我们今天要一起创建一个app

625
00:32:54,408 --> 0:32:56,109
完全从头开始创建

626
00:32:56,643 --> 0:32:58,512
它有一个虚构的患者

627
00:32:59,646 --> 0:33:04,384
是一位怀孕的准妈妈

628
00:32:59,646 --> 0:33:04,384
是一位怀孕的准妈妈

629
00:33:04,451 --> 0:33:05,352
也就是恶心

630
00:33:05,652 --> 0:33:06,887
我们为她做的这个app

631
00:33:07,221 --> 0:33:09,022
会让她追踪她的服药情况

632
00:33:10,324 --> 0:33:13,093
并记录她何时感到恶心

633
00:33:14,094 --> 0:33:15,462
并且我们会给她显示一个图表

634
00:33:15,829 --> 0:33:17,998
让她了解

635
00:33:18,398 --> 0:33:20,267
她坚持服药和她的症状之间的相关性

636
00:33:20,968 --> 0:33:24,338
最后我们要让她快速与联系人

637
00:33:24,705 --> 0:33:27,941
从而在有突发情况时

638
00:33:28,008 --> 0:33:29,142
获得去办公室的路线

639
00:33:30,511 --> 0:33:31,945
当我们开发

640
00:33:32,246 --> 0:33:34,548
有两个重要的步骤

641
00:33:35,148 --> 0:33:37,050
第一个是我们需要创建Store

642
00:33:37,351 --> 0:33:38,585
我们需要给它填充数据

643
00:33:39,086 --> 0:33:40,354
这是我们要处理的第一件事

644
00:33:40,988 --> 0:33:42,990
之后我们需要创建UI

645
00:33:43,423 --> 0:33:45,759
并告诉CareKit

646
00:33:46,226 --> 0:33:47,694
我们将在下半场讲这个

647
00:33:48,762 --> 0:33:49,663
让我们开始吧

648
00:33:51,465 --> 0:33:52,299
哎呀

649
00:33:57,471 --> 0:33:58,372
好的

650
00:33:59,773 --> 0:34:01,241
你可以在这里看到

651
00:33:59,773 --> 0:34:01,241
你可以在这里看到

652
00:34:01,308 --> 0:34:02,743
这是我们的起点

653
00:34:03,310 --> 0:34:04,745
当你使用CareKit时

654
00:34:04,811 --> 0:34:06,680
你要做的第一件事就是导入它

655
00:34:06,747 --> 0:34:08,549
如果你不这样做 你不会成功的

656
00:34:10,317 --> 0:34:11,284
一旦成功导入

657
00:34:11,351 --> 0:34:13,387
我们要做的下一件事

658
00:34:13,453 --> 0:34:14,521
更确切地说

659
00:34:14,588 --> 0:34:16,089
是SynchronizedStoreManager

660
00:34:16,156 --> 0:34:17,891
它会替我们实施同步

661
00:34:18,824 --> 0:34:19,826
当我们创建Store时

662
00:34:20,293 --> 0:34:22,329
我们要从创建OCKStore开始

663
00:34:23,163 --> 0:34:26,166
然后我们把它传递到

664
00:34:27,100 --> 0:34:28,202
我想在这里暂停一会

665
00:34:28,268 --> 0:34:30,603
我想强调一些关于

666
00:34:32,105 --> 0:34:33,373
在这里我们使用了OCKStore

667
00:34:33,440 --> 0:34:34,975
它是核心数据的包装器

668
00:34:35,509 --> 0:34:36,543
但是…

669
00:34:36,810 --> 0:34:40,714
OCKSynchronizedStoreManager

670
00:34:40,781 --> 0:34:42,716
可以与实施我们的OCKStore

671
00:34:43,583 --> 0:34:46,286
那意味着你可以包装web服务器、

672
00:34:47,321 --> 0:34:48,589
第三方数据库

673
00:34:49,121 --> 0:34:51,992
或甚至是简单的JSON文件

674
00:34:53,994 --> 0:34:56,263
为了达成我们今天的目的

675
00:34:57,764 --> 0:35:00,067
我们要做的下一件事是

676
00:34:57,764 --> 0:35:00,067
我们要做的下一件事是

677
00:35:00,133 --> 0:35:02,836
我们只需要写一个便利的扩展

678
00:35:03,670 --> 0:35:05,906
在实际情况中 你可以

679
00:35:05,973 --> 0:35:07,174
或从app捆绑中加载数据

680
00:35:07,774 --> 0:35:09,576
但今天我们要用代码实现

681
00:35:11,545 --> 0:35:12,779
我们要创建两个任务

682
00:35:12,846 --> 0:35:14,882
一个用于获取药物 一个用于检查

683
00:35:15,582 --> 0:35:17,217
或一个用于记录何时感觉恶心

684
00:35:17,818 --> 0:35:19,853
为此 我们需要创建一个时间表

685
00:35:22,456 --> 0:35:23,590
我们要创建一些日期

686
00:35:23,657 --> 0:35:24,791
不要太担心这些

687
00:35:24,858 --> 0:35:27,127
重要的部分在下边 就是创建时间表

688
00:35:27,461 --> 0:35:29,763
我们通过把元素组合起来

689
00:35:30,430 --> 0:35:32,833
我们已经有一个每天重复的早餐元素

690
00:35:32,900 --> 0:35:35,369
那么每天 我们都要在早餐时服药

691
00:35:35,936 --> 0:35:37,204
然后在午餐时再服一次

692
00:35:37,804 --> 0:35:39,439
然后隔天的晚餐时服第三次药

693
00:35:40,274 --> 0:35:42,509
你实际上很可能不会像这样安排服药

694
00:35:42,943 --> 0:35:45,479
但CareKit允许我们实现

695
00:35:45,546 --> 0:35:47,181
我们只想稍微炫耀一下

696
00:35:48,882 --> 0:35:51,418
有了时间表 我们现在可以

697
00:35:52,986 --> 0:35:55,923
为此 我们需要指定一个唯一标识符

698
00:35:56,190 --> 0:35:57,324
我们要使用多西拉敏

699
00:35:57,391 --> 0:36:00,060
这是一种治疗恶心的常用药物

700
00:35:57,391 --> 0:36:00,060
这是一种治疗恶心的常用药物

701
00:36:01,562 --> 0:36:03,230
当然 我们会添加到时间表上

702
00:36:03,764 --> 0:36:05,199
我们会提供一些说明

703
00:36:05,265 --> 0:36:07,568
从而让虚拟患者了解具体该如何做

704
00:36:09,837 --> 0:36:11,939
让我们再创建一个任务

705
00:36:12,573 --> 0:36:15,242
在这个例子中

706
00:36:15,642 --> 0:36:19,012
这个时间表每天运行 全天运行

707
00:36:19,613 --> 0:36:22,282
因为你可能感到恶心的时间不固定

708
00:36:22,349 --> 0:36:23,884
我们希望你在任何时候

709
00:36:25,619 --> 0:36:28,555
最后我们要给它创建任务

710
00:36:29,223 --> 0:36:32,326
主要不同点是这个任务的

711
00:36:32,593 --> 0:36:34,494
影响黏附属性为假

712
00:36:35,462 --> 0:36:37,130
你会注意到 在绝大多数

713
00:36:37,197 --> 0:36:39,099
你会看到一大堆…

714
00:36:39,166 --> 0:36:41,468
比如周日历

715
00:36:42,402 --> 0:36:43,871
通过把这个标志设为假

716
00:36:43,937 --> 0:36:46,173
我们会排除这个恶心任务

717
00:36:46,707 --> 0:36:49,142
使其不影响那些表示完成的圆圈

718
00:36:52,346 --> 0:36:53,814
现在我们有两个任务对象

719
00:36:53,881 --> 0:36:55,148
我们需要把它们添加到Store中

720
00:36:55,949 --> 0:36:56,950
非常直截了当

721
00:36:57,818 --> 0:36:58,685
我们已经做了这么多了

722
00:36:58,752 --> 0:37:01,755
我们有了服药任务 有了恶心任务

723
00:36:58,752 --> 0:37:01,755
我们有了服药任务 有了恶心任务

724
00:37:02,289 --> 0:37:04,124
我们还想添加一些联系人

725
00:37:04,491 --> 0:37:07,794
从而当患者需要帮助时

726
00:37:09,796 --> 0:37:12,666
联系人的创建与其它

727
00:37:13,133 --> 0:37:14,535
你必须赋予它们一个唯一标识符

728
00:37:14,968 --> 0:37:16,803
你可以在联系人上设置许多属性

729
00:37:16,870 --> 0:37:20,374
在这例子中 我们要设置一张图片、

730
00:37:21,842 --> 0:37:23,043
然后我们还可以提供…

731
00:37:24,745 --> 0:37:26,046
联系信息

732
00:37:26,947 --> 0:37:29,149
在这里我们提供一个电子邮箱地址、

733
00:37:29,416 --> 0:37:30,450
和一个消息

734
00:37:32,386 --> 0:37:33,954
最后我们要附加一个地址

735
00:37:34,521 --> 0:37:37,891
患者可以根据这个地址

736
00:37:37,958 --> 0:37:39,026
如果他们需要去护理机构办公室的话

737
00:37:40,093 --> 0:37:41,528
我们再添加一个联系人…

738
00:37:43,096 --> 0:37:44,598
跟添加第一个联系人的方式基本相同

739
00:37:45,799 --> 0:37:48,969
最后我们要把两个联系人

740
00:37:51,538 --> 0:37:53,974
好的 Store中

741
00:37:54,041 --> 0:37:55,609
我们在Store中有两个联系人

742
00:37:56,376 --> 0:37:58,679
那把我们带到了第一步的终点

743
00:37:58,745 --> 0:37:59,913
我们创建了一个Store

744
00:37:59,980 --> 0:38:02,282
我们也在Store中添加了数据

745
00:37:59,980 --> 0:38:02,282
我们也在Store中添加了数据

746
00:38:02,983 --> 0:38:06,253
那意味着第二步是生成UI

747
00:38:06,320 --> 0:38:08,555
我们得写代码告诉CareKit

748
00:38:08,622 --> 0:38:09,823
我们希望如何显示这些

749
00:38:11,491 --> 0:38:12,626
我们的实现方式是

750
00:38:13,293 --> 0:38:14,561
写一个

751
00:38:16,930 --> 0:38:18,899
那么在这里 我们要创建我们的

752
00:38:18,966 --> 0:38:20,300
我们马上就会讲到这个

753
00:38:20,701 --> 0:38:22,536
但你要注意

754
00:38:23,237 --> 0:38:24,805
它将用于同步处理

755
00:38:26,807 --> 0:38:29,510
最后我们要把ViewController

756
00:38:29,576 --> 0:38:30,577
因此当我们运行app时

757
00:38:31,411 --> 0:38:32,713
这就是我们要开始的地方

758
00:38:32,980 --> 0:38:34,114
让我们具体看一下

759
00:38:34,181 --> 0:38:35,182
看看我们有什么

760
00:38:36,850 --> 0:38:38,218
这个目前是一个空类

761
00:38:38,685 --> 0:38:42,489
你可以看到它继承自

762
00:38:43,090 --> 0:38:44,424
如果你正在创建一个

763
00:38:44,858 --> 0:38:46,793
并且你想获得一些强大的定制能力

764
00:38:47,561 --> 0:38:50,998
OCKDailyPageViewController

765
00:38:52,099 --> 0:38:54,067
当你从这个类中继承时 你将获得…

766
00:38:55,335 --> 0:38:58,138
一个viewController

767
00:38:58,205 --> 0:38:59,373
其中含有标记完成的圆圈

768
00:39:00,207 --> 0:39:01,775
用户可以进行翻阅

769
00:39:01,842 --> 0:39:03,410
并选择他们喜欢的日期

770
00:39:03,477 --> 0:39:06,246
在它下边是第二个

771
00:39:06,980 --> 0:39:09,550
每次用户通过滑动或轻触

772
00:39:09,616 --> 0:39:11,151
修改日期后

773
00:39:11,552 --> 0:39:12,619
你都会得到一个回调

774
00:39:14,588 --> 0:39:16,023
这个回调 事实上

775
00:39:16,590 --> 0:39:18,292
在这个函数内

776
00:39:19,026 --> 0:39:21,094
你将收到这两个参数

777
00:39:21,161 --> 0:39:22,896
listViewController

778
00:39:23,864 --> 0:39:25,999
这个日期就是用户刚才所选择的日期

779
00:39:26,466 --> 0:39:30,103
listViewController

780
00:39:30,737 --> 0:39:33,707
作为开发人员 你的工作就是

781
00:39:33,774 --> 0:39:35,876
填充你希望用户看到的内容

782
00:39:37,177 --> 0:39:38,612
实现方式非常直截了当

783
00:39:41,114 --> 0:39:44,685
在这里我们要创建一个

784
00:39:45,419 --> 0:39:48,121
我们可以把它附加到

785
00:39:48,188 --> 0:39:50,457
那会把它添加到所选日期的内容中

786
00:39:51,592 --> 0:39:53,393
让我们快速看一下这个类

787
00:39:54,194 --> 0:39:56,129
OCKChecklistTaskViewController

788
00:39:56,663 --> 0:39:59,466
现在你会注意到

789
00:40:00,167 --> 0:40:02,002
有CareKit UI

790
00:40:02,569 --> 0:40:05,305
在CareKit UI中

791
00:40:05,973 --> 0:40:07,007
有四个或五个视图

792
00:40:07,541 --> 0:40:08,609
嗯 在CareKit中

793
00:40:09,343 --> 0:40:10,344
有同等数量的视图

794
00:40:10,410 --> 0:40:12,412
并且其中每个视图

795
00:40:13,480 --> 0:40:17,584
主要不同点是CareKit UI

796
00:40:18,118 --> 0:40:19,119
并且不是同步的

797
00:40:19,453 --> 0:40:23,023
而CareKit中的视图控制器

798
00:40:24,191 --> 0:40:26,260
当我们实例化这个时

799
00:40:26,727 --> 0:40:29,329
我们需要告诉它

800
00:40:30,130 --> 0:40:31,398
最后我们要提供一个事件查询

801
00:40:31,465 --> 0:40:33,767
指定它应该只显示今天的事件

802
00:40:35,369 --> 0:40:36,637
那么这就是我们的药物卡

803
00:40:37,137 --> 0:40:40,240
它会要求患者服用多西拉敏

804
00:40:41,074 --> 0:40:42,075
我们要再添加一个

805
00:40:43,143 --> 0:40:46,079
SimpleLogTaskViewController

806
00:40:46,480 --> 0:40:48,949
它会要求用户记录何时感觉恶心

807
00:40:50,350 --> 0:40:51,485
我们写了许多代码

808
00:40:52,386 --> 0:40:54,922
但我们终于已经准备好运行app

809
00:41:00,194 --> 0:41:01,261
好的 让我们运行一下

810
00:41:01,662 --> 0:41:03,197
这就是我们目前实现的东西

811
00:41:03,530 --> 0:41:05,966
你可以看到我们有添加的两个任务

812
00:41:07,000 --> 0:41:09,136
用户可以在日历上的日期之间

813
00:41:10,737 --> 0:41:12,072
他们可以像这样回到今天

814
00:41:13,140 --> 0:41:16,443
你还要注意在某些日期上

815
00:41:16,510 --> 0:41:17,911
在其它日期上 我们有三个事件

816
00:41:17,978 --> 0:41:19,713
这是由于我们给任务所安排的时间表

817
00:41:21,048 --> 0:41:22,649
当用户核对任务时

818
00:41:23,417 --> 0:41:25,152
会自动填充表示完成的圆圈

819
00:41:26,186 --> 0:41:28,021
任务之间的这种同步

820
00:41:28,589 --> 0:41:30,924
任务是指

821
00:41:30,991 --> 0:41:32,826
和顶部的

822
00:41:33,694 --> 0:41:35,796
刚好是自动发生的

823
00:41:36,997 --> 0:41:39,499
你还要注意当我们记录恶心事件时

824
00:41:39,900 --> 0:41:41,702
它们不会出现在表示完成的圆圈中

825
00:41:41,969 --> 0:41:45,672
因为当我们创建任务时

826
00:41:45,739 --> 0:41:46,840
我们已经明确地把那些影响黏附属性

827
00:41:48,842 --> 0:41:49,776
在我们继续之前

828
00:41:49,843 --> 0:41:54,248
我想指出两个可以非常简便地自定义

829
00:41:54,314 --> 0:41:55,649
我认为你们一定会非常喜欢

830
00:41:56,984 --> 0:41:59,620
第一个 如果我们…

831
00:41:59,686 --> 0:42:01,221
跳回我们的app委托…

832
00:41:59,686 --> 0:42:01,221
跳回我们的app委托…

833
00:42:03,757 --> 0:42:05,526
我们可以在窗口上设置一种着色

834
00:42:06,226 --> 0:42:08,962
这个着色将在我们的

835
00:42:09,363 --> 0:42:12,165
这样可以非常简单地应用样式

836
00:42:15,936 --> 0:42:19,840
第二个是换掉我们正在使用的那种

837
00:42:20,607 --> 0:42:22,409
因此请记住

838
00:42:22,476 --> 0:42:23,944
有许多不同的视图

839
00:42:24,878 --> 0:42:26,513
我们可以切换到一个不同的视图…

840
00:42:28,348 --> 0:42:30,584
只需要切换 我们所使用的

841
00:42:30,651 --> 0:42:32,019
它们的初始化程序都相同

842
00:42:34,288 --> 0:42:36,490
我们要重新运行一下app

843
00:42:37,591 --> 0:42:39,793
非常棒 你可以看到颜色不一样了

844
00:42:40,260 --> 0:42:45,532
还有完全不同的任务卡

845
00:42:46,066 --> 0:42:47,668
现在对于这张卡 非常有意思的是

846
00:42:48,402 --> 0:42:51,338
它显示了用户应该服用药物的时间

847
00:42:51,905 --> 0:42:53,540
但当我们核对其中一个时

848
00:42:54,107 --> 0:42:55,542
它所显示的时间…

849
00:42:56,276 --> 0:42:59,546
改为了用户轻触按钮的时间

850
00:42:59,613 --> 0:43:01,682
这非常有用 因为它允许患者

851
00:42:59,613 --> 0:43:01,682
这非常有用 因为它允许患者

852
00:43:01,748 --> 0:43:03,951
查看她最后一次服药的时间

853
00:43:08,155 --> 0:43:09,456
好的 我认为我们可以继续

854
00:43:09,523 --> 0:43:10,757
创建一些图表了

855
00:43:11,091 --> 0:43:12,059
我认为我们要做的是

856
00:43:12,125 --> 0:43:14,828
在我们的两张卡之间创建一个图表

857
00:43:14,895 --> 0:43:15,996
也许是一个条形图

858
00:43:16,296 --> 0:43:17,497
让我们假定它要显示

859
00:43:18,298 --> 0:43:20,801
患者的服药次数VS

860
00:43:20,868 --> 0:43:22,936
她感到恶心的次数

861
00:43:26,106 --> 0:43:28,909
我们把图表放在我们已经创建好的

862
00:43:29,510 --> 0:43:31,712
我们需要创建两个数据序列

863
00:43:32,713 --> 0:43:34,581
一个是服药数据序列

864
00:43:34,848 --> 0:43:35,983
我们要从创建恶心的数据序列开始

865
00:43:36,483 --> 0:43:37,684
当我们创建这个数据序列时

866
00:43:38,352 --> 0:43:39,586
我们必须给它赋予一个标识符

867
00:43:39,653 --> 0:43:41,722
我想显示这个任务的数据

868
00:43:41,788 --> 0:43:42,956
我们可以给它一个图例标题

869
00:43:43,023 --> 0:43:44,424
用于绘图的一对颜色

870
00:43:44,758 --> 0:43:46,226
以及标记大小 在这个例子中

871
00:43:46,293 --> 0:43:47,728
是指条形图的宽度

872
00:43:48,529 --> 0:43:49,630
还有事件聚合器

873
00:43:49,997 --> 0:43:53,000
事件聚合器决定y轴值

874
00:43:53,333 --> 0:43:55,102
在这个例子中 我们只计算

875
00:43:55,369 --> 0:43:57,437
患者感到恶心的次数

876
00:43:58,605 --> 0:43:59,673
我们再做一次同样的操作

877
00:43:59,740 --> 0:44:01,241
这次是服药数据序列

878
00:43:59,740 --> 0:44:01,241
这次是服药数据序列

879
00:44:02,242 --> 0:44:03,477
操作基本相同

880
00:44:04,845 --> 0:44:06,046
有了这两个数据序列

881
00:44:06,446 --> 0:44:09,583
我们就可以创建

882
00:44:11,418 --> 0:44:13,020
初始化程序获取

883
00:44:13,086 --> 0:44:15,055
再一次 这是为了提供同步

884
00:44:15,122 --> 0:44:16,356
同步是CareKit中很棒的功能

885
00:44:16,857 --> 0:44:18,692
我们还传入数据序列

886
00:44:18,759 --> 0:44:21,662
每个数据序列都是我们想在图表上

887
00:44:22,663 --> 0:44:25,232
我们还传入日期

888
00:44:25,966 --> 0:44:26,800
以及绘图类型

889
00:44:27,067 --> 0:44:28,502
在这里我们要使用条形图

890
00:44:28,569 --> 0:44:31,438
但你可以简便地使用散点图或折线图

891
00:44:32,673 --> 0:44:34,308
最后在我们再一次运行app之前

892
00:44:34,875 --> 0:44:36,443
我们要测试一些标签

893
00:44:36,944 --> 0:44:40,848
以便患者可以理解

894
00:44:42,916 --> 0:44:44,651
让我们再次运行app

895
00:44:47,387 --> 0:44:49,523
非常棒 你可以在这里看到

896
00:44:49,590 --> 0:44:50,691
图表上有数据显示

897
00:44:51,091 --> 0:44:53,060
但关于这个图表 非常奇妙的是

898
00:44:53,126 --> 0:44:56,730
当我们核对数据时

899
00:44:57,264 --> 0:44:58,232
它通过漂亮的动画进行实时更新

900
00:44:59,800 --> 0:45:01,001
也许第一天

901
00:44:59,800 --> 0:45:01,001
也许第一天

902
00:45:01,435 --> 0:45:03,036
我们的用户没有服药

903
00:45:04,271 --> 0:45:05,372
她感到非常不舒服

904
00:45:06,507 --> 0:45:07,541
第二天

905
00:45:08,342 --> 0:45:09,243
她开始服药

906
00:45:09,877 --> 0:45:11,345
她感到稍微好点了

907
00:45:13,180 --> 0:45:14,414
第三天…

908
00:45:15,282 --> 0:45:16,416
她服用了所有该服用的药物

909
00:45:16,483 --> 0:45:19,219
今天她也服用了所有该服用的药物

910
00:45:20,220 --> 0:45:22,723
因此你可以看到我们已经得到了

911
00:45:22,789 --> 0:45:25,459
但我们还可以利用另一个功能

912
00:45:25,526 --> 0:45:26,727
我认为你们一定非常喜欢

913
00:45:27,761 --> 0:45:31,064
现在你可以在CareKit的

914
00:45:31,532 --> 0:45:33,033
这个listViewController中的

915
00:45:33,433 --> 0:45:34,635
让我来演示一下如何实现

916
00:45:37,004 --> 0:45:38,071
让我们回到最顶部

917
00:45:38,138 --> 0:45:39,373
我认为我们想添加一个横幅

918
00:45:40,874 --> 0:45:42,776
我们可以通过创建

919
00:45:44,578 --> 0:45:45,979
我们要在tipView上

920
00:45:46,046 --> 0:45:47,581
我们还要给它附加一张图片

921
00:45:48,282 --> 0:45:49,550
但重点是

922
00:45:50,184 --> 0:45:52,586
我们把它作为视图附加

923
00:45:53,820 --> 0:45:54,955
现在我想让你注意的是

924
00:45:55,289 --> 0:45:57,658
这个tipView不是

925
00:45:59,593 --> 0:46:01,595
我们只是为这个演示创建了它

926
00:45:59,593 --> 0:46:01,595
我们只是为这个演示创建了它

927
00:46:02,029 --> 0:46:03,964
它可以是来自你app的视图

928
00:46:04,031 --> 0:46:06,700
或来自第三方库的视图

929
00:46:10,637 --> 0:46:11,805
当我们现在运行app时

930
00:46:12,372 --> 0:46:14,508
你会看到顶部有漂亮的横幅

931
00:46:14,575 --> 0:46:15,809
那会鼓励患者

932
00:46:15,876 --> 0:46:19,112
了解锻炼和健康怀孕之间的关系

933
00:46:26,119 --> 0:46:28,388
你可以想象得到这个功能

934
00:46:28,922 --> 0:46:29,823
有大量的用途

935
00:46:30,090 --> 0:46:31,358
你可以根据患者的

936
00:46:31,692 --> 0:46:34,928
填充这个数据

937
00:46:35,195 --> 0:46:36,563
你可以把它从服务器上扒下来

938
00:46:37,030 --> 0:46:38,599
或你可以根据日期对它进行设置

939
00:46:39,132 --> 0:46:40,701
真的有无限可能

940
00:46:41,835 --> 0:46:44,071
在我结束演示之前

941
00:46:44,571 --> 0:46:47,174
是让我们的用户可以快速访问

942
00:46:47,708 --> 0:46:50,377
我认为我们要做的就是

943
00:46:51,278 --> 0:46:54,181
显示模态呈现

944
00:46:54,648 --> 0:46:56,383
CareKit让这个过程

945
00:46:58,085 --> 0:46:59,219
在顶部

946
00:46:59,286 --> 0:47:02,623
我们要创建我们的UI栏按钮项

947
00:46:59,286 --> 0:47:02,623
我们要创建我们的UI栏按钮项

948
00:47:02,689 --> 0:47:04,992
我们要让它调用这里的这个函数

949
00:47:06,159 --> 0:47:08,462
我们要在这个函数内

950
00:47:08,529 --> 0:47:10,797
创建

951
00:47:11,365 --> 0:47:13,233
这是我们为你提供的一个

952
00:47:13,767 --> 0:47:15,936
你所需要做的就是

953
00:47:16,537 --> 0:47:18,972
它将自动查询

954
00:47:19,406 --> 0:47:20,507
并显示出来

955
00:47:24,511 --> 0:47:27,080
让我们最后再运行一次app

956
00:47:28,315 --> 0:47:29,383
好了

957
00:47:29,449 --> 0:47:31,652
那么轻触这个会显示我们的联系人

958
00:47:32,386 --> 0:47:34,521
如果患者需要

959
00:47:35,055 --> 0:47:36,723
她只需要轻触一下Maps即可

960
00:47:38,692 --> 0:47:40,627
看起来有4.9英里

961
00:47:42,029 --> 0:47:43,564
还不算太远 好的

962
00:47:44,198 --> 0:47:45,732
我们得到了联系人

963
00:47:46,033 --> 0:47:47,534
并且我们的app看起来很不错

964
00:47:48,368 --> 0:47:50,404
我想我要在这里结束演示了

965
00:47:50,470 --> 0:47:51,572
我们就到此为止

966
00:47:52,372 --> 0:47:53,674
但在我把舞台

967
00:47:53,740 --> 0:47:56,076
我想总结一下我们做了什么

968
00:47:57,244 --> 0:48:01,114
我们大概花了15分钟

969
00:47:57,244 --> 0:48:01,114
我们大概花了15分钟

970
00:48:01,381 --> 0:48:05,052
我们完成了一个漂亮的

971
00:48:05,118 --> 0:48:06,253
还带有华丽的动画

972
00:48:07,354 --> 0:48:09,790
但对于这个app最重要的是

973
00:48:10,190 --> 0:48:11,825
它非常模块化

974
00:48:12,492 --> 0:48:14,027
每个视图之间彼此没有关系

975
00:48:15,062 --> 0:48:17,130
所有的viewControllers

976
00:48:17,965 --> 0:48:19,967
没有任何委托把它们绑到一起

977
00:48:20,701 --> 0:48:23,337
随着用户需求的发展

978
00:48:23,737 --> 0:48:26,473
这个app的更新和修改非常简单

979
00:48:28,275 --> 0:48:32,379
我们认为CareKit 2.0

980
00:48:32,880 --> 0:48:35,682
我们非常期待看到我们的开发人员们

981
00:48:36,083 --> 0:48:37,718
用它创造出很棒的app

982
00:48:38,819 --> 0:48:40,020
好的 舞台交还给你Srinath

983
00:48:46,627 --> 0:48:48,695
哇哦 谢谢Erik的演示 特别棒

984
00:48:50,764 --> 0:48:53,534
现在总结一下整场演讲

985
00:48:55,035 --> 0:48:59,506
CareKit是对框架的

986
00:48:59,907 --> 0:49:01,608
它仍然保存了它的核心价值

987
00:48:59,907 --> 0:49:01,608
它仍然保存了它的核心价值

988
00:49:01,675 --> 0:49:04,945
但现在它是一个非常强大的工具

989
00:49:05,279 --> 0:49:09,316
可以为你的用户

990
00:49:11,185 --> 0:49:12,519
我们提到了ResearchKit

991
00:49:12,586 --> 0:49:15,956
我们讲了我们通过框架对UI

992
00:49:16,356 --> 0:49:20,961
以及在现有现行任务库上新添加的

993
00:49:21,862 --> 0:49:25,866
最后我们还讲了对社区的更新

994
00:49:26,133 --> 0:49:28,669
包括两个主要计划：

995
00:49:28,735 --> 0:49:30,404
调查员支持计划；

996
00:49:30,737 --> 0:49:32,940
和即将于今年秋季上线的

997
00:49:34,141 --> 0:49:35,209
（在GitHub上可用！）

998
00:49:35,275 --> 0:49:39,213
一如既往 ResearchKit

999
00:49:39,279 --> 0:49:41,715
你现在就可以在GitHub上使用

1000
00:49:44,351 --> 0:49:45,786
在接下来的几个月里

1001
00:49:45,853 --> 0:49:47,421
我们会非常努力地

1002
00:49:47,721 --> 0:49:50,190
向这些框架中添加更多功能

1003
00:49:50,757 --> 0:49:52,526
我们将支持暗黑模式

1004
00:49:52,593 --> 0:49:54,895
我们将添加可访问性、地理位置

1005
00:49:54,962 --> 0:49:57,164
以及更多的文档支持

1006
00:49:57,798 --> 0:50:01,535
在我们继续改善和扩展

1007
00:49:57,798 --> 0:50:01,535
在我们继续改善和扩展

1008
00:50:01,602 --> 0:50:05,205
我们非常鼓励

1009
00:50:05,272 --> 0:50:08,842
为我们提供反馈和建议

1010
00:50:08,909 --> 0:50:10,310
（请提出你们的建议！）

1011
00:50:11,044 --> 0:50:13,914
要获取更多关于本场演讲的信息

1012
00:50:14,581 --> 0:50:17,384
我们明天中午会举办一场

1013
00:50:17,451 --> 0:50:20,387
ResearchKit

1014
00:50:20,687 --> 0:50:21,855
我们会在那里回答你的所有疑问

1015
00:50:23,824 --> 0:50:25,959
感谢你们来参加我们的演讲

1016
00:50:26,260 --> 0:50:27,961
祝你们度过一个愉快的WWDC
