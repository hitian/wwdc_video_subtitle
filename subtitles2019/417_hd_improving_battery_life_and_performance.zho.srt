1
00:00:06,173 --> 0:00:10,277
（延长电池寿命和改善电池性能）

2
00:00:13,213 --> 0:00:14,081
谢谢大家

3
00:00:14,915 --> 0:00:17,317
大家好 你们都好吗？

4
00:00:17,384 --> 0:00:20,787
我是Phillip Azar

5
00:00:21,054 --> 0:00:23,557
延长电池寿命和改善电池性能

6
00:00:25,626 --> 0:00:28,295
你们的app

7
00:00:28,362 --> 0:00:30,430
它们让我们的用户能够

8
00:00:30,597 --> 0:00:33,967
参与这么多体验 没有你们的app

9
00:00:34,701 --> 0:00:35,736
你可以想象

10
00:00:36,737 --> 0:00:38,639
如果你们的app

11
00:00:38,705 --> 0:00:40,040
并且也不提供良好的性能

12
00:00:40,274 --> 0:00:41,742
这会让用户们非常失望

13
00:00:42,543 --> 0:00:44,344
因此今天我们想讲一些相关信息

14
00:00:45,412 --> 0:00:47,814
我们要讲一些工具

15
00:00:48,115 --> 0:00:49,149
其中有新工具 也有老工具

16
00:00:49,750 --> 0:00:53,353
你可以用来针对电池寿命和电池性能

17
00:00:54,321 --> 0:00:58,091
我们要讲一些指标

18
00:00:58,659 --> 0:01:00,394
从而了解并量化

19
00:00:58,659 --> 0:01:00,394
从而了解并量化

20
00:01:00,727 --> 0:01:03,263
你的app对电池寿命

21
00:01:04,031 --> 0:01:05,666
然后我会把舞台交给我的同事

22
00:01:06,033 --> 0:01:07,868
他会进一步地讲这些工具

23
00:01:08,302 --> 0:01:09,536
并给你们做一些演示

24
00:01:09,736 --> 0:01:12,406
以及如何在你的app中

25
00:01:12,840 --> 0:01:14,508
来延长电池寿命和提高电池性能

26
00:01:15,042 --> 0:01:16,376
然后我再返回舞台

27
00:01:17,744 --> 0:01:20,347
让我们从工具开始讲吧

28
00:01:22,015 --> 0:01:23,550
为了开始讲工具

29
00:01:23,617 --> 0:01:25,285
我们需要先讲一下工具的开发过程

30
00:01:25,352 --> 0:01:26,386
并熟悉一下这些工具

31
00:01:27,321 --> 0:01:28,655
开发分为几个阶段

32
00:01:29,389 --> 0:01:31,091
我们把它分为三个不同阶段

33
00:01:31,892 --> 0:01:33,493
开发和测试是第一阶段

34
00:01:34,027 --> 0:01:36,029
在这个阶段

35
00:01:36,430 --> 0:01:38,065
这是一个非常反复的过程

36
00:01:38,432 --> 0:01:40,400
我们要么在办公桌前

37
00:01:40,601 --> 0:01:43,637
我们真的在努力了解是什么

38
00:01:45,038 --> 0:01:46,874
下一个阶段叫做beta测试

39
00:01:47,508 --> 0:01:49,643
在我们开发好app的功能之后

40
00:01:49,776 --> 0:01:52,112
我们就准备好做测试运行了

41
00:01:52,779 --> 0:01:55,215
我们把app提供给一些人

42
00:01:55,549 --> 0:01:56,583
我们尝试获得反馈

43
00:01:58,118 --> 0:02:00,587
最后当我们对我们所收集到的

44
00:01:58,118 --> 0:02:00,587
最后当我们对我们所收集到的

45
00:02:00,654 --> 0:02:03,257
我们就已经准备好迎接黄金时间了

46
00:02:03,724 --> 0:02:04,725
即公开发布

47
00:02:05,392 --> 0:02:06,593
此时app

48
00:02:06,660 --> 0:02:08,662
并面向全球数百万客户

49
00:02:09,963 --> 0:02:13,901
对于电池寿命和性能

50
00:02:14,801 --> 0:02:16,703
我们需要对每个步骤都进行优化

51
00:02:17,070 --> 0:02:18,505
从而确保我们修复漏洞

52
00:02:18,672 --> 0:02:21,275
并让客户获得尽可能好的体验

53
00:02:22,543 --> 0:02:25,646
考虑到这些在iOS 13

54
00:02:25,913 --> 0:02:28,048
我们提供了一些很棒的工具

55
00:02:28,248 --> 0:02:30,751
帮助你了解你的app

56
00:02:31,852 --> 0:02:32,986
在开发和测试过程中

57
00:02:33,187 --> 0:02:35,289
我们使用Xcode

58
00:02:35,756 --> 0:02:38,759
比如Instruments、Energy Gauges

59
00:02:40,060 --> 0:02:40,894
然后在beta测试中

60
00:02:41,495 --> 0:02:43,697
你可直接在beta设备上收集痕迹

61
00:02:43,830 --> 0:02:46,466
通过使用开发人员设置并在

62
00:02:46,867 --> 0:02:48,468
这些对于了解

63
00:02:48,535 --> 0:02:51,305
在开发环境中可能不会发生

64
00:02:51,572 --> 0:02:52,539
但却在实际运行时可能发生的问题

65
00:02:52,873 --> 0:02:54,608
比如当手机信号不好时

66
00:02:55,843 --> 0:02:59,847
最后Xcode提供一组强大的日志

67
00:03:00,013 --> 0:03:04,084
你可以从公共发布中了解

68
00:03:04,418 --> 0:03:07,754
这些帮助你了解一些问题

69
00:03:08,155 --> 0:03:09,456
或针对特定客户的

70
00:03:09,523 --> 0:03:11,191
这些客户可能与你的情况不一样

71
00:03:13,594 --> 0:03:14,628
通过这些工具

72
00:03:14,928 --> 0:03:17,898
在过去的几年里

73
00:03:18,198 --> 0:03:19,800
我们觉得很可能存在一些

74
00:03:20,767 --> 0:03:23,604
我们间接或直接地跟你们中的许多人

75
00:03:23,971 --> 0:03:27,441
我们得到的反馈是

76
00:03:28,242 --> 0:03:31,645
我们该如何量化

77
00:03:31,912 --> 0:03:34,381
我们该如何在功能A和功能B之间

78
00:03:35,582 --> 0:03:38,752
今天作为Xcode 11

79
00:03:39,052 --> 0:03:42,055
我超级高兴地跟大家宣布

80
00:03:42,122 --> 0:03:45,158
我们已经通过三个新工具弥合了空白

81
00:03:46,493 --> 0:03:48,128
我要从XCTest Metrics开始讲

82
00:03:48,929 --> 0:03:51,298
这是我们随Xcode 11

83
00:03:51,732 --> 0:03:54,668
它可以让你直接

84
00:03:55,102 --> 0:03:58,205
所测量部分的性能和电池寿命指标

85
00:03:58,805 --> 0:04:00,874
这将为你提供一些关键优势

86
00:03:58,805 --> 0:04:00,874
这将为你提供一些关键优势

87
00:04:01,074 --> 0:04:04,378
当你在早期运行XCTest

88
00:04:04,745 --> 0:04:06,647
特定功能所产生的影响时

89
00:04:08,282 --> 0:04:09,116
下一个是MetricKit

90
00:04:09,750 --> 0:04:11,718
这是我们特别针对

91
00:04:11,852 --> 0:04:14,555
所创建的强大的新框架

92
00:04:14,988 --> 0:04:17,591
它会直接在你的app中

93
00:04:18,024 --> 0:04:20,360
并帮助你从所有不同用户那里了解

94
00:04:20,594 --> 0:04:22,396
你的app实际运行起来怎么样

95
00:04:23,630 --> 0:04:24,565
然后最后

96
00:04:24,665 --> 0:04:28,836
我们给Xcode Organizer增加了

97
00:04:29,636 --> 0:04:32,472
它是一组高级别汇总指标

98
00:04:32,673 --> 0:04:35,542
你可以直接在

99
00:04:35,909 --> 0:04:37,077
无需修改任何代码

100
00:04:37,611 --> 0:04:39,613
它会为你提供很棒的高级别概览

101
00:04:39,680 --> 0:04:41,348
关于你的app在全球范围内

102
00:04:41,715 --> 0:04:42,716
对所有客户的表现如何

103
00:04:44,117 --> 0:04:46,019
那么回头来看

104
00:04:46,119 --> 0:04:49,256
你可以想象得到所有这些工具

105
00:04:49,923 --> 0:04:52,326
从开发和测试阶段的

106
00:04:53,460 --> 0:04:55,362
然后MetricKit

107
00:04:55,662 --> 0:04:57,564
它很适合beta测试和公共发布

108
00:04:57,731 --> 0:04:59,266
当你不具备

109
00:04:59,333 --> 0:05:01,335
想要从中收集指标信息的设备时

110
00:04:59,333 --> 0:05:01,335
想要从中收集指标信息的设备时

111
00:05:02,870 --> 0:05:05,005
最后是Xcode

112
00:05:05,305 --> 0:05:07,274
加强了你对公共发布的了解

113
00:05:07,341 --> 0:05:10,711
并帮助你从实际用户那里了解问题

114
00:05:12,880 --> 0:05:14,147
因此当你把这些组合到一起

115
00:05:14,214 --> 0:05:15,716
我们会看到我们有更多的指标

116
00:05:15,782 --> 0:05:19,553
来量化开发过程中

117
00:05:20,220 --> 0:05:21,188
我们认为这非常棒

118
00:05:24,224 --> 0:05:25,859
我们稍微讲了一下这些工具

119
00:05:25,926 --> 0:05:28,161
我同事稍后会具体深入地

120
00:05:28,762 --> 0:05:30,931
但现在我想讲一下它们所提供的指标

121
00:05:31,698 --> 0:05:32,699
因为没有这些指标

122
00:05:32,766 --> 0:05:34,401
我们就不能量化我们的影响

123
00:05:34,968 --> 0:05:36,003
让我们现在就开始吧

124
00:05:37,804 --> 0:05:39,606
今年我们提供两组指标…

125
00:05:40,107 --> 0:05:41,708
电池和性能

126
00:05:42,809 --> 0:05:43,644
谁会猜到呢？

127
00:05:45,012 --> 0:05:46,280
对于电池指标

128
00:05:46,547 --> 0:05:48,081
我们今年提供了一大堆指标

129
00:05:48,148 --> 0:05:50,450
这些指标会帮助你量化

130
00:05:52,119 --> 0:05:57,057
处理、定位、显示、网络、

131
00:05:58,358 --> 0:06:03,330
Bluetooth和配件指标、

132
00:05:58,358 --> 0:06:03,330
Bluetooth和配件指标、

133
00:06:04,431 --> 0:06:06,433
这些是一大堆指标 非常强大

134
00:06:06,800 --> 0:06:09,069
但我只想讲其中一些指标

135
00:06:09,236 --> 0:06:11,171
是我们认为对每个人

136
00:06:12,105 --> 0:06:13,507
从处理指标开始讲

137
00:06:14,842 --> 0:06:18,011
处理指标 就像你想象的那样

138
00:06:18,612 --> 0:06:19,913
我们希望你使用这些指标

139
00:06:20,047 --> 0:06:22,749
量化和理解app的工作负荷

140
00:06:23,517 --> 0:06:26,119
因此比如 你可以实现比如

141
00:06:26,486 --> 0:06:28,155
在你可能无法预料的地方

142
00:06:28,889 --> 0:06:30,224
此外 你可以使用

143
00:06:30,290 --> 0:06:33,093
你可以使用这些指标在你的app中

144
00:06:34,461 --> 0:06:36,830
关键是我们想让你们使用这些

145
00:06:36,897 --> 0:06:39,399
比较app的功能的算法效率

146
00:06:39,466 --> 0:06:40,601
就像我们之前讨论过的那样

147
00:06:40,801 --> 0:06:42,202
如果你有功能A和功能B

148
00:06:42,402 --> 0:06:45,405
你可以使用这些指标来决定

149
00:06:47,508 --> 0:06:49,109
接下来我们有定位指标

150
00:06:50,377 --> 0:06:51,812
这些指标会帮助你

151
00:06:51,879 --> 0:06:53,514
了解和量化你的定位使用

152
00:06:53,814 --> 0:06:56,750
比如你的累积使用、

153
00:06:57,050 --> 0:06:58,519
以及后台定位使用

154
00:07:00,320 --> 0:07:02,489
请使用这些指标来了解定位的使用

155
00:07:02,556 --> 0:07:04,892
因为它对于电池寿命来说

156
00:07:05,425 --> 0:07:08,395
比如 你可能会遇到定位一直运行

157
00:07:08,462 --> 0:07:09,596
但你并不希望它运行的情况

158
00:07:10,230 --> 0:07:13,634
或者你可能使用了一个

159
00:07:13,700 --> 0:07:16,503
对于你所实施的定位的用例来说

160
00:07:17,504 --> 0:07:20,340
因此这些指标会帮助你了解并优化

161
00:07:22,776 --> 0:07:24,645
接下来我们提供显示指标

162
00:07:25,345 --> 0:07:27,281
今年我们为你们提供了各种不同的

163
00:07:27,347 --> 0:07:28,815
但我想特别指出其中一个

164
00:07:29,149 --> 0:07:30,551
它叫做平均像素亮度

165
00:07:31,818 --> 0:07:34,621
在你的OLED设备上

166
00:07:35,255 --> 0:07:37,124
app中UI的颜色

167
00:07:37,191 --> 0:07:39,259
对你在显示上所消耗的电量

168
00:07:39,493 --> 0:07:40,761
有直接影响

169
00:07:41,862 --> 0:07:45,499
我们通过一个叫做平均像素亮度

170
00:07:47,034 --> 0:07:50,470
简而言之

171
00:07:51,038 --> 0:07:52,973
你在OLED设备上

172
00:07:53,040 --> 0:07:54,508
我们把这个称为APL较高

173
00:07:55,642 --> 0:07:57,411
你在UI中所使用的颜色越深

174
00:07:57,978 --> 0:08:01,582
我们把这个称为APL较低

175
00:07:57,978 --> 0:08:01,582
我们把这个称为APL较低

176
00:08:02,649 --> 0:08:04,384
因此今年请注意一下平均像素亮度

177
00:08:06,019 --> 0:08:07,688
最后但同样重要的是我们有网络指标

178
00:08:09,022 --> 0:08:11,692
你可能已经想象到了 这些是指

179
00:08:11,959 --> 0:08:14,361
比如通过蜂窝和Wi-Fi

180
00:08:14,661 --> 0:08:15,829
以及连通性指标

181
00:08:17,464 --> 0:08:19,867
我们希望你尽可能优化网络使用

182
00:08:19,933 --> 0:08:21,401
因为它是一个高能子系统

183
00:08:22,336 --> 0:08:23,604
因此通过这些指标来执行

184
00:08:23,670 --> 0:08:26,206
比如验证所预期的上传和下载计数

185
00:08:26,940 --> 0:08:29,409
也许有一个上传

186
00:08:29,710 --> 0:08:31,044
你可以使用这些指标来了解具体情况

187
00:08:32,578 --> 0:08:34,515
更重要的是 我们希望你们能了解

188
00:08:34,581 --> 0:08:36,850
连通性对网络传输的影响

189
00:08:37,317 --> 0:08:39,620
当进行联网时

190
00:08:39,720 --> 0:08:40,587
它在你消耗的电量方面

191
00:08:41,221 --> 0:08:42,589
这些指标将帮助你了解

192
00:08:42,856 --> 0:08:44,725
你是否长期处于

193
00:08:44,925 --> 0:08:45,859
连通性差的情况下

194
00:08:48,395 --> 0:08:49,630
这些就是电池指标

195
00:08:50,097 --> 0:08:53,400
我们认为这一大堆指标

196
00:08:53,600 --> 0:08:55,536
你的app对电池寿命的影响

197
00:08:56,904 --> 0:08:58,372
让我们继续讲性能指标

198
00:08:59,239 --> 0:09:00,741
今年我们提供挂起指标、

199
00:08:59,239 --> 0:09:00,741
今年我们提供挂起指标、

200
00:09:01,675 --> 0:09:05,045
磁盘指标、app启动指标、

201
00:09:06,013 --> 0:09:09,082
内存指标和自定义间隔指标

202
00:09:10,184 --> 0:09:12,920
与电池指标一样

203
00:09:13,253 --> 0:09:15,122
是我认为对我们所有人

204
00:09:16,223 --> 0:09:17,558
从挂起指标开始讲

205
00:09:19,693 --> 0:09:21,895
今年挂起指标是一个柱形图

206
00:09:21,962 --> 0:09:24,865
表示你的app对于用户输入

207
00:09:25,966 --> 0:09:28,001
这是一个巨大的用户影响

208
00:09:28,368 --> 0:09:30,404
你可以想象

209
00:09:30,470 --> 0:09:32,840
但它突然停止工作了 那很不好

210
00:09:34,274 --> 0:09:36,109
因此请使用这些指标

211
00:09:36,176 --> 0:09:38,879
来了解何时把工作从主线程上移开

212
00:09:39,513 --> 0:09:42,049
并使用比如分派和异步提示

213
00:09:42,249 --> 0:09:43,383
来减少挂起率

214
00:09:45,185 --> 0:09:46,520
接下来我们有磁盘指标

215
00:09:47,120 --> 0:09:50,290
今年我们的重点是

216
00:09:51,758 --> 0:09:53,994
我们希望你们尽可能地量化磁盘使用

217
00:09:54,294 --> 0:09:56,263
因为磁盘使用与所有子系统一样

218
00:09:56,463 --> 0:09:58,966
是一种你只应该在真正需要的时候

219
00:09:59,967 --> 0:10:03,370
因此使用这些指标来验证

220
00:09:59,967 --> 0:10:03,370
因此使用这些指标来验证

221
00:10:03,804 --> 0:10:06,640
并且如果你正在对磁盘写入

222
00:10:06,974 --> 0:10:08,909
你也可以使用这些磁盘指标

223
00:10:11,278 --> 0:10:12,813
下一个是app启动指标

224
00:10:14,181 --> 0:10:15,983
这超级棒 因为今年我们提供

225
00:10:16,216 --> 0:10:17,985
启动和恢复时间柱形图

226
00:10:18,485 --> 0:10:21,054
从而帮助你了解

227
00:10:22,923 --> 0:10:25,759
我们希望你们使用这些指标

228
00:10:26,093 --> 0:10:27,928
来量化启动和恢复对性能的影响

229
00:10:30,063 --> 0:10:32,599
我们希望你们了解启动活动的影响

230
00:10:33,133 --> 0:10:35,235
因此当你在app启动之前执行

231
00:10:35,302 --> 0:10:36,370
比如数据库更新操作时

232
00:10:36,470 --> 0:10:38,572
这会直接影响你的启动和恢复时间

233
00:10:38,939 --> 0:10:40,607
这些指标会让你实时查看

234
00:10:42,976 --> 0:10:45,712
我们还希望你了解

235
00:10:46,280 --> 0:10:47,881
因为它们是两个截然不同的路径

236
00:10:48,982 --> 0:10:51,652
要获取多信息

237
00:10:52,052 --> 0:10:53,754
我推荐你参加明天的演讲

238
00:10:53,820 --> 0:10:55,822
叫做优化app启动

239
00:10:57,791 --> 0:10:59,660
最后一个但并不是最不重要的

240
00:11:00,494 --> 0:11:01,562
今年对于内存

241
00:11:01,795 --> 0:11:04,631
我们提供比如

242
00:11:06,667 --> 0:11:09,136
内存管理确实会影响启动时间

243
00:11:09,937 --> 0:11:11,171
因此我们希望你使用这些指标

244
00:11:11,238 --> 0:11:13,307
关注并密切注意内存使用

245
00:11:13,674 --> 0:11:15,409
这对于性能来说

246
00:11:17,144 --> 0:11:19,146
使用这些指标来了解内存使用

247
00:11:19,479 --> 0:11:22,316
并且如果内存峰值比你预期的峰值高

248
00:11:22,683 --> 0:11:26,186
这可能表示出现了

249
00:11:27,554 --> 0:11:29,890
如果你把注意力集中在

250
00:11:29,957 --> 0:11:31,425
你可以通过这些指标进行量化

251
00:11:31,558 --> 0:11:33,360
你还可以减少启动时间

252
00:11:33,427 --> 0:11:35,329
以及对后台终止的敏感性

253
00:11:37,531 --> 0:11:40,567
这就是其中一些性能指标

254
00:11:41,235 --> 0:11:42,402
我们认为这些对于

255
00:11:42,469 --> 0:11:45,372
帮助你了解设备上和脱离设备的性能

256
00:11:47,941 --> 0:11:52,279
回顾 我们讲了Xcode 11

257
00:11:52,679 --> 0:11:54,815
用于了解和量化电量和性能

258
00:11:55,949 --> 0:11:58,485
然后我们讲了

259
00:11:58,819 --> 0:12:01,121
从而进一步量化

260
00:11:58,819 --> 0:12:01,121
从而进一步量化

261
00:12:01,355 --> 0:12:02,890
并帮助你优化你的app

262
00:12:03,724 --> 0:12:05,692
这些很棒的指标

263
00:12:06,093 --> 0:12:08,161
确实会帮助你把你的app

264
00:12:08,996 --> 0:12:11,298
闲话少叙 舞台交给我的同事们

265
00:12:11,532 --> 0:12:14,201
他们会深入地讲

266
00:12:14,701 --> 0:12:15,602
Sastry先讲

267
00:12:15,903 --> 0:12:19,039
他要讲一下在开发和测试阶段

268
00:12:19,239 --> 0:12:20,407
用XCTest指标测量app

269
00:12:20,807 --> 0:12:21,642
Sastry？

270
00:12:29,449 --> 0:12:30,350
谢谢Phil

271
00:12:30,884 --> 0:12:33,253
大家好 我是

272
00:12:33,387 --> 0:12:35,289
我是Apple的一名软件工程师

273
00:12:35,889 --> 0:12:38,091
让我们回顾一些

274
00:12:38,158 --> 0:12:41,161
它们用于在开发和测试阶段

275
00:12:41,929 --> 0:12:44,164
就在Xcode的调试导航器内

276
00:12:44,531 --> 0:12:48,669
你可以看到CPU内存

277
00:12:49,236 --> 0:12:53,073
当你希望深入了解细节

278
00:12:53,407 --> 0:12:55,409
Instruments

279
00:12:55,876 --> 0:12:59,413
它带有模板

280
00:13:00,547 --> 0:13:02,449
系统无响应性

281
00:13:03,116 --> 0:13:07,187
内存过度使用以及电量问题

282
00:13:08,388 --> 0:13:11,625
你还可使用XCTest来测量性能

283
00:13:12,192 --> 0:13:15,696
XCTest是一个程序

284
00:13:15,762 --> 0:13:19,967
可以无缝整合到

285
00:13:21,435 --> 0:13:22,936
你不仅可以测量性能

286
00:13:23,003 --> 0:13:25,472
你还可以获取具有基线的回归

287
00:13:27,374 --> 0:13:32,312
直到去年 你所能测量的唯一指标

288
00:13:32,779 --> 0:13:34,548
性能的指标更多

289
00:13:34,748 --> 0:13:38,685
因此今年我们向XCTest中

290
00:13:40,521 --> 0:13:42,456
让我们具体看一下细节

291
00:13:42,656 --> 0:13:46,026
这是XCTest的一个示例性能

292
00:13:46,326 --> 0:13:48,362
你需要模式化一块代码

293
00:13:48,428 --> 0:13:49,963
指明在测量方法中

294
00:13:50,030 --> 0:13:51,765
要实施的动作

295
00:13:51,899 --> 0:13:54,468
它会测量它实施…

296
00:13:54,535 --> 0:13:56,303
执行这块代码所需要的时间

297
00:13:56,603 --> 0:13:58,238
现在为了把这个转化为

298
00:13:58,305 --> 0:14:01,975
性能测试的新样式并获取更多细节

299
00:13:58,305 --> 0:14:01,975
性能测试的新样式并获取更多细节

300
00:14:02,376 --> 0:14:06,280
我们只需要模式化时间、

301
00:14:06,346 --> 0:14:09,816
把它们打包到一个列表中并把列表

302
00:14:10,250 --> 0:14:11,952
通过这些小修改

303
00:14:12,019 --> 0:14:15,222
你现有的性能测试就可以测量

304
00:14:16,657 --> 0:14:17,824
我们有点偏题了

305
00:14:18,192 --> 0:14:23,030
通过你使用XCTest

306
00:14:23,363 --> 0:14:26,066
我们可以让你们免费执行一次

307
00:14:26,166 --> 0:14:27,668
因此 不需要任何代码

308
00:14:27,734 --> 0:14:31,405
你将可以进行

309
00:14:32,806 --> 0:14:33,941
让我们看一个演示

310
00:14:39,379 --> 0:14:41,415
为了这场演讲

311
00:14:41,481 --> 0:14:45,252
我们创建了一个叫做

312
00:14:46,620 --> 0:14:48,188
它有几个功能

313
00:14:48,355 --> 0:14:51,291
让我带你看一下 它可以让你拍照

314
00:14:52,593 --> 0:14:53,994
当你拍照时

315
00:14:54,761 --> 0:14:57,464
它会给照片标记地理位置

316
00:14:57,998 --> 0:15:01,335
然后你在照片上应用一些

317
00:14:57,998 --> 0:15:01,335
然后你在照片上应用一些

318
00:15:02,202 --> 0:15:05,372
我们将在接下来的演示中

319
00:15:05,839 --> 0:15:07,107
你还拥有一些标准功能

320
00:15:07,174 --> 0:15:09,343
比如从相册中加载一张照片

321
00:15:09,409 --> 0:15:12,045
保存照片以及把照片上传到服务器上

322
00:15:13,146 --> 0:15:14,181
那么这是什么意思？

323
00:15:14,248 --> 0:15:16,850
如何从Xcode中

324
00:15:17,684 --> 0:15:19,920
嗯 我刚才提到过

325
00:15:20,387 --> 0:15:25,492
对于你所创建的每个

326
00:15:25,559 --> 0:15:27,594
都可以进行一次免费的

327
00:15:28,195 --> 0:15:30,731
因此在演讲之前

328
00:15:30,797 --> 0:15:32,666
我已经获取了运行这个测试的权利

329
00:15:32,966 --> 0:15:35,102
结果就像这样

330
00:15:35,736 --> 0:15:40,374
你可以看到

331
00:15:40,440 --> 0:15:41,608
这是可以接受的

332
00:15:42,009 --> 0:15:44,845
你可以看到多次迭代的结果

333
00:15:45,145 --> 0:15:47,047
所有迭代的时间几乎都一样

334
00:15:47,514 --> 0:15:49,183
这是一件很有意思的事

335
00:15:49,249 --> 0:15:50,617
你可以设置你的基线

336
00:15:51,051 --> 0:15:54,721
基线是一种机制

337
00:15:54,821 --> 0:15:56,924
关于你所期待的性能值

338
00:15:57,191 --> 0:15:59,560
因此无论何时当你的性能值

339
00:15:59,626 --> 0:16:02,496
测试就会失败

340
00:15:59,626 --> 0:16:02,496
测试就会失败

341
00:16:02,796 --> 0:16:05,666
那么你可以设置平均值

342
00:16:06,700 --> 0:16:09,269
并且无论何时当你下一次运行测试时

343
00:16:09,336 --> 0:16:11,638
如果有任意值超过这些条件

344
00:16:11,705 --> 0:16:12,639
你的测试就会失败

345
00:16:13,240 --> 0:16:15,042
我已经修改了代码

346
00:16:15,375 --> 0:16:19,947
但我想确保app的

347
00:16:20,314 --> 0:16:22,049
让我再次运行测试

348
00:16:24,017 --> 0:16:26,153
当运行性能测试时

349
00:16:26,220 --> 0:16:27,688
有几个要点你要记住

350
00:16:28,021 --> 0:16:31,491
最好不要把调试器附加到进程中

351
00:16:31,558 --> 0:16:32,860
因为它会增加一些消耗

352
00:16:33,126 --> 0:16:37,297
并且最好关闭所有诊断选项

353
00:16:38,065 --> 0:16:40,834
你还可以通过创建独立的机制

354
00:16:40,901 --> 0:16:43,337
或使用测试计划功能来实现

355
00:16:43,403 --> 0:16:45,939
最新改进的功能是可以轻松关闭

356
00:16:46,473 --> 0:16:49,076
现在你可以看到已经运行了测试

357
00:16:49,142 --> 0:16:50,878
如果你要深入去看细节

358
00:16:50,944 --> 0:16:54,581
你会看到那是因为平均值确实超标了

359
00:16:54,648 --> 0:16:58,452
我是说 原来是0.2秒

360
00:16:59,052 --> 0:17:00,521
因此为了调试这个问题

361
00:16:59,052 --> 0:17:00,521
因此为了调试这个问题

362
00:17:00,587 --> 0:17:04,191
你可把它附加到Instruments

363
00:17:04,258 --> 0:17:06,993
查找为什么app的启动时间

364
00:17:07,426 --> 0:17:10,497
我会为你揭开神秘面纱

365
00:17:10,564 --> 0:17:12,699
我实际上尝试查找一个数据库

366
00:17:12,799 --> 0:17:15,202
在我的主线程上检查数据库更新

367
00:17:15,301 --> 0:17:17,804
Phil刚才提到过 这样做很不好

368
00:17:18,338 --> 0:17:22,175
因此正确方案是把这个任务分派到

369
00:17:23,010 --> 0:17:25,279
希望这能修复我们的问题

370
00:17:25,512 --> 0:17:26,980
让我们再次运行测试

371
00:17:27,047 --> 0:17:31,418
并确保数值在我们所期待的数值之内

372
00:17:32,619 --> 0:17:33,954
这里的关键是你可以…

373
00:17:34,588 --> 0:17:36,089
XCTest不仅帮助你测量

374
00:17:36,190 --> 0:17:38,592
它还帮助你确保不会倒退

375
00:17:38,659 --> 0:17:40,928
因此更多的是你只需写一次测试

376
00:17:40,994 --> 0:17:42,863
就可以忘掉它了

377
00:17:42,930 --> 0:17:44,798
并让它在你的CI系统中一直运行

378
00:17:44,865 --> 0:17:47,000
并确保你了解你的性能不会降低

379
00:17:47,668 --> 0:17:51,138
你可以看到 测试通过了

380
00:17:56,076 --> 0:18:01,915
因此把现有XCTest

381
00:17:56,076 --> 0:18:01,915
因此把现有XCTest

382
00:18:01,982 --> 0:18:04,918
我之前提到过的拥有更多维度的

383
00:18:05,319 --> 0:18:06,587
因此你所要做的就是

384
00:18:06,653 --> 0:18:10,457
把你打算测量的对象

385
00:18:10,557 --> 0:18:12,526
就像比如说 我有一个性能测试

386
00:18:12,593 --> 0:18:15,395
测量的是拍照所花的时间

387
00:18:17,130 --> 0:18:19,700
你知道的 使用照片并应用特效

388
00:18:20,000 --> 0:18:22,970
之前这可能会只测量时间长短

389
00:18:23,170 --> 0:18:27,074
但现在通过传递额外的

390
00:18:27,241 --> 0:18:31,044
我甚至可以测量内存

391
00:18:32,679 --> 0:18:35,749
XCTest并不是仅限于UI测试

392
00:18:35,816 --> 0:18:37,684
你还可以用它进行单元测试

393
00:18:38,151 --> 0:18:40,420
我要给你们举个例子

394
00:18:40,521 --> 0:18:42,456
我有应用特效功能

395
00:18:42,523 --> 0:18:44,391
我可以选择

396
00:18:44,458 --> 0:18:46,460
是否要使用一张或多张照片

397
00:18:46,894 --> 0:18:49,596
从功能的角度来说 增加的值很小

398
00:18:49,663 --> 0:18:53,200
但如果总量不多了 我宁愿这样做

399
00:18:53,634 --> 0:18:55,736
因此我获取了运行这个测试的权利

400
00:18:55,802 --> 0:18:59,373
并测试了它运行这个

401
00:18:59,439 --> 0:19:01,341
给一张照片应用特效功能

402
00:18:59,439 --> 0:19:01,341
给一张照片应用特效功能

403
00:19:01,408 --> 0:19:03,143
大约是1000KB

404
00:19:03,544 --> 0:19:07,714
但现在测量不同情境的

405
00:19:08,015 --> 0:19:09,383
增加的影响非常简单

406
00:19:09,449 --> 0:19:10,918
你所需要做的就是修改代码

407
00:19:10,984 --> 0:19:13,987
我把代码修改成拥有两个筛选器

408
00:19:14,454 --> 0:19:18,458
测试运行时 你可以立即查看数值

409
00:19:18,692 --> 0:19:22,930
了解了数值

410
00:19:23,063 --> 0:19:27,467
那么你可以看到 影响是…

411
00:19:28,202 --> 0:19:32,739
测试失败了

412
00:19:32,806 --> 0:19:34,274
大约是2000KB

413
00:19:34,341 --> 0:19:36,610
因此很可能我要坚持

414
00:19:37,344 --> 0:19:38,178
因此…

415
00:19:40,848 --> 0:19:46,153
总结一下 我给你演示了

416
00:19:46,420 --> 0:19:48,222
但我们添加了许多指标

417
00:19:48,288 --> 0:19:52,459
我们添加了内存 添加了存储

418
00:19:53,126 --> 0:19:54,261
但我们并没有止步于此

419
00:19:54,328 --> 0:19:56,930
我们丢弃了通用的底层系统

420
00:19:56,997 --> 0:19:59,600
因此你实际上可以实施

421
00:19:59,666 --> 0:20:02,703
并使用底层报告系统来获取回归

422
00:19:59,666 --> 0:20:02,703
并使用底层报告系统来获取回归

423
00:20:03,070 --> 0:20:05,506
请查看文档获取更多详情

424
00:20:06,306 --> 0:20:08,709
然后正如我在最后一个例子中

425
00:20:08,775 --> 0:20:11,678
你还可以使用XCTest来进行

426
00:20:11,745 --> 0:20:17,584
这是检查算法A是否比算法B

427
00:20:17,718 --> 0:20:21,121
只需要进行简单的单元测试

428
00:20:22,689 --> 0:20:27,094
因为XCTest与Xcode

429
00:20:27,561 --> 0:20:29,763
你可以在开发和测试过程中

430
00:20:29,830 --> 0:20:32,299
使用这个性能测试

431
00:20:32,366 --> 0:20:34,868
并同时作为后续的整合系统的一部分

432
00:20:34,935 --> 0:20:38,005
并确保你的app没有发生

433
00:20:38,872 --> 0:20:42,509
这就是用XCTest

434
00:20:42,743 --> 0:20:44,211
接下来我想邀请Ashish上台来

435
00:20:44,278 --> 0:20:47,080
他会讲一下在实际情况中

436
00:20:47,181 --> 0:20:48,015
测量你的app所产生的影响

437
00:20:59,560 --> 0:21:00,394
谢谢Sastry

438
00:20:59,560 --> 0:21:00,394
谢谢Sastry

439
00:21:00,928 --> 0:21:03,664
在初始测试和开发阶段之后

440
00:21:03,997 --> 0:21:06,066
收集实际指标有许多好处

441
00:21:06,133 --> 0:21:07,801
从而进一步优化电池寿命

442
00:21:07,868 --> 0:21:09,336
和app的性能

443
00:21:10,404 --> 0:21:13,607
这包含利用只有少数用户的

444
00:21:13,841 --> 0:21:15,943
以及更广泛的客户群

445
00:21:17,411 --> 0:21:20,647
在实际情况中 你的app

446
00:21:20,714 --> 0:21:23,717
比如不同的蜂窝网络、信号条件、

447
00:21:23,951 --> 0:21:26,854
不同类型的设备以及不同的地理位置

448
00:21:27,321 --> 0:21:31,325
这些帮助你识别在桌面测试过程中

449
00:21:32,960 --> 0:21:34,494
你还可以使用这个实际指标

450
00:21:34,561 --> 0:21:36,463
对比当前版本的app

451
00:21:36,530 --> 0:21:37,898
和之前版本app的电池寿命和性能

452
00:21:38,131 --> 0:21:39,566
你可以使用这个数据来发现

453
00:21:39,633 --> 0:21:42,402
是否存在任何回归或异乎寻常的问题

454
00:21:43,804 --> 0:21:47,407
这些现实指标还可以帮助你了解

455
00:21:47,708 --> 0:21:50,577
通过在现实情况下让大量客户

456
00:21:52,179 --> 0:21:56,183
为了解决这个问题 我很高兴地宣布

457
00:21:56,517 --> 0:21:59,052
它是一个设备上的框架

458
00:21:59,119 --> 0:22:01,188
和性能指标

459
00:21:59,119 --> 0:22:01,188
和性能指标

460
00:22:02,356 --> 0:22:04,758
我们还在MetricKit中

461
00:22:04,892 --> 0:22:08,028
用于收集你app中

462
00:22:09,096 --> 0:22:10,998
我们已经把这些功能都嵌入

463
00:22:11,265 --> 0:22:13,033
并在我们的数据收集汇总机制中

464
00:22:13,100 --> 0:22:15,636
保护用户们的隐私权

465
00:22:17,871 --> 0:22:21,308
采用MetricKit非常简单

466
00:22:23,043 --> 0:22:25,245
此处代码采用MetricKit

467
00:22:25,646 --> 0:22:27,848
首先导入MetricKit框架

468
00:22:28,215 --> 0:22:29,917
并在app中创建一个类

469
00:22:29,983 --> 0:22:32,686
遵守指标管理器订阅者协议

470
00:22:34,588 --> 0:22:37,157
你要在类内订阅指标

471
00:22:37,624 --> 0:22:40,294
这就让设备了解你的app有兴趣

472
00:22:40,360 --> 0:22:41,929
接收来自MetricKit的指标

473
00:22:42,296 --> 0:22:44,598
从而它会开始在设备上收集指标

474
00:22:46,900 --> 0:22:48,402
最后作为开发人员

475
00:22:48,468 --> 0:22:50,838
你需要实施一个叫做

476
00:22:51,305 --> 0:22:52,406
无论何时当在设备上

477
00:22:52,472 --> 0:22:54,541
向你的app提交指标有效载荷时

478
00:22:54,608 --> 0:22:56,143
都会涉及到这个方法

479
00:22:56,677 --> 0:22:58,512
一旦在设备上收到此种有效载荷

480
00:22:58,579 --> 0:23:00,314
由你决定采取哪些行动

481
00:22:58,579 --> 0:23:00,314
由你决定采取哪些行动

482
00:23:00,747 --> 0:23:03,183
比如你可以选择把它保存到文件中

483
00:23:03,517 --> 0:23:05,085
或还可以上传到服务器

484
00:23:05,152 --> 0:23:07,654
从而可以从多个用户那

485
00:23:09,823 --> 0:23:12,125
在使用指标之后

486
00:23:12,326 --> 0:23:14,261
因为你的app是在白天使用

487
00:23:14,528 --> 0:23:17,564
我们将自动为app收集汇总指标

488
00:23:18,932 --> 0:23:21,068
在24小时结束时

489
00:23:21,235 --> 0:23:24,872
我们会生成一整天的指标摘要

490
00:23:25,038 --> 0:23:26,907
并在设备上返回这个有效载荷

491
00:23:28,876 --> 0:23:30,377
现在让我们了解一下如何测量

492
00:23:30,444 --> 0:23:33,247
app中关键代码段的影响

493
00:23:34,448 --> 0:23:37,951
返回到Sastry刚才描述过的

494
00:23:38,085 --> 0:23:40,053
用户可以在app中实施多种活动

495
00:23:40,754 --> 0:23:43,056
比如他们可以选择拍照

496
00:23:43,590 --> 0:23:45,926
并在所拍照片上应用许多很酷的特效

497
00:23:46,693 --> 0:23:48,462
如果他们喜欢他们所实施的特效

498
00:23:48,896 --> 0:23:50,697
他们可以选择把照片保存在设备上

499
00:23:51,598 --> 0:23:53,367
MetricKit提供捕捉

500
00:23:53,433 --> 0:23:55,369
app中每个功能对电池寿命和性能

501
00:23:55,769 --> 0:23:57,838
所产生的精确影响的功能

502
00:23:59,706 --> 0:24:01,041
现在让我们了解一下如何实现

503
00:23:59,706 --> 0:24:01,041
现在让我们了解一下如何实现

504
00:24:01,708 --> 0:24:05,512
我们很高兴在MetricKit内

505
00:24:05,879 --> 0:24:08,615
它作为环绕式OS标志牌实施

506
00:24:09,383 --> 0:24:12,920
通过用mxSignpost

507
00:24:12,986 --> 0:24:14,688
你可以捕捉精确的影响

508
00:24:15,055 --> 0:24:16,223
让我们举个例子

509
00:24:17,724 --> 0:24:19,526
那么要使用mxSignpost

510
00:24:19,660 --> 0:24:23,931
你所要做的就是使用MetricKit的

511
00:24:24,198 --> 0:24:26,200
并用它创建一个日志处理

512
00:24:26,800 --> 0:24:30,838
并使用那个日志处理把mxSignpost

513
00:24:31,738 --> 0:24:34,808
在这个例子中 我想测量

514
00:24:34,875 --> 0:24:36,310
保存照片功能的影响

515
00:24:36,610 --> 0:24:39,780
我在这个app的代码之前和之后

516
00:24:40,714 --> 0:24:43,050
MetricKit将在设备上

517
00:24:43,116 --> 0:24:45,319
并替你处理它们

518
00:24:47,054 --> 0:24:48,288
现在让我们看一个演示

519
00:24:48,355 --> 0:24:50,891
我会告诉你们如何在自己的app中

520
00:24:59,900 --> 0:25:03,470
现在我返回到了我app的

521
00:24:59,900 --> 0:25:03,470
现在我返回到了我app的

522
00:25:04,037 --> 0:25:07,207
我现在位于我app的

523
00:25:07,541 --> 0:25:10,477
你可以看到我已经在这里采用了

524
00:25:10,878 --> 0:25:14,348
并创建了一个类

525
00:25:15,449 --> 0:25:16,416
在那个类内

526
00:25:16,483 --> 0:25:19,086
我已经给didReceive方法

527
00:25:19,453 --> 0:25:22,322
因此无论何时当有可用的

528
00:25:23,357 --> 0:25:25,926
对于我的app来说

529
00:25:25,993 --> 0:25:28,495
从而稍后可以进行一些设备内处理

530
00:25:28,996 --> 0:25:30,497
为了今天的演示

531
00:25:30,564 --> 0:25:32,699
我还写了一个函数来打印这个数据

532
00:25:32,933 --> 0:25:35,068
我可以让你看一下有效载荷的内容

533
00:25:35,836 --> 0:25:39,373
最后我还写了这个函数

534
00:25:39,706 --> 0:25:41,942
因此它可以在beta测试过程中

535
00:25:42,009 --> 0:25:44,178
从多个用户以及客户那里

536
00:25:45,913 --> 0:25:49,483
现在因为这个方法

537
00:25:49,750 --> 0:25:52,052
无论何时当有对我们的app可用的

538
00:25:52,352 --> 0:25:55,088
我们在Xcode中创建了新功能

539
00:25:55,389 --> 0:25:56,757
让我来给你演示那是如何运作的

540
00:25:57,524 --> 0:26:00,494
我们首先在我的测试设备上

541
00:25:57,524 --> 0:26:00,494
我们首先在我的测试设备上

542
00:26:05,065 --> 0:26:06,767
那么app现在正在运行

543
00:26:07,134 --> 0:26:10,804
现在我要进入调试并点击选择

544
00:26:11,605 --> 0:26:14,441
它会向你的app发送虚拟有效载荷

545
00:26:14,508 --> 0:26:17,444
从而你可以测试

546
00:26:17,945 --> 0:26:20,247
现在让我们看一下今日可用的

547
00:26:20,314 --> 0:26:21,448
MetricKit

548
00:26:22,583 --> 0:26:23,650
这里的第一个例子

549
00:26:23,717 --> 0:26:25,819
显示了与app相关的一些元数据

550
00:26:25,886 --> 0:26:27,087
比如版本号

551
00:26:27,354 --> 0:26:29,122
设备类型和OS版本号

552
00:26:29,790 --> 0:26:33,060
然后我们有一些与非常有用的

553
00:26:33,160 --> 0:26:35,629
比如app启动、恢复和挂起

554
00:26:36,630 --> 0:26:39,333
然后我们有与app使用相关的指标

555
00:26:39,399 --> 0:26:41,034
比如前台和后台时间

556
00:26:41,635 --> 0:26:44,705
以及一些后台指标

557
00:26:45,305 --> 0:26:47,441
然后有一些指标围绕定位使用、

558
00:26:48,008 --> 0:26:51,278
以及网络、磁盘IO内存和显示

559
00:26:52,179 --> 0:26:55,249
最后有一部分指标是

560
00:26:55,415 --> 0:26:56,416
围绕你app的

561
00:26:56,884 --> 0:27:00,320
你可看到现在MetricKit中

562
00:26:56,884 --> 0:27:00,320
你可看到现在MetricKit中

563
00:27:00,387 --> 0:27:02,789
因此我强烈推荐你查看我们的文档

564
00:27:02,856 --> 0:27:04,525
了解更多详情

565
00:27:05,158 --> 0:27:06,793
让我们现在返回到幻灯片中

566
00:27:10,063 --> 0:27:12,432
你可以看到

567
00:27:12,499 --> 0:27:14,601
使用MetricKit非常简单

568
00:27:14,902 --> 0:27:17,304
请立即开始在你的设备上获得指标

569
00:27:19,540 --> 0:27:21,408
对于 同时对于app

570
00:27:21,475 --> 0:27:23,277
我们决定开车去旅行

571
00:27:23,443 --> 0:27:26,046
并收集一些现实的度量

572
00:27:27,681 --> 0:27:29,750
在我们的

573
00:27:29,816 --> 0:27:31,251
实际使用

574
00:27:31,618 --> 0:27:33,620
我们得到

575
00:27:33,787 --> 0:27:35,389
上传到了我自己的服务器中

576
00:27:35,455 --> 0:27:37,691
通过我刚才展示给你的那段

577
00:27:39,560 --> 0:27:41,762
现在让我们使用从现实使用中

578
00:27:41,962 --> 0:27:44,665
来识别Awesome Photo App中的

579
00:27:45,999 --> 0:27:47,234
根据第一个示例

580
00:27:47,701 --> 0:27:49,570
这个数据显示了

581
00:27:49,636 --> 0:27:51,071
和后台时间

582
00:27:51,505 --> 0:27:54,775
以及不同精确度市场的全部定位使用

583
00:27:55,509 --> 0:27:58,045
它显示了app的定位使用

584
00:27:58,111 --> 0:27:59,313
大约是720秒

585
00:27:59,379 --> 0:28:02,816
非常接近于前台时间

586
00:27:59,379 --> 0:28:02,816
非常接近于前台时间

587
00:28:03,283 --> 0:28:04,785
我使用定位就是

588
00:28:04,852 --> 0:28:07,487
无论何时当我拍照时

589
00:28:08,622 --> 0:28:10,424
返回到app中 我忘记…

590
00:28:10,490 --> 0:28:13,760
我发现我在获取定位后忘记关闭它了

591
00:28:14,261 --> 0:28:16,797
这是关于如何使用

592
00:28:16,864 --> 0:28:19,066
来识别意料之外的app行为的

593
00:28:19,933 --> 0:28:21,935
我们使用这个数据

594
00:28:22,002 --> 0:28:25,339
减少定位使用 如果我们的用例中

595
00:28:25,739 --> 0:28:28,609
因为定位精确度越高

596
00:28:30,410 --> 0:28:33,647
下一个例子显示了app挂起时长的

597
00:28:34,181 --> 0:28:36,049
数据表明有许多实例的

598
00:28:36,116 --> 0:28:37,951
挂起时长多于5秒

599
00:28:38,185 --> 0:28:40,020
这是一种非常糟糕的用户体验

600
00:28:40,954 --> 0:28:43,924
Phil刚才讲过

601
00:28:43,991 --> 0:28:45,926
避免在主线程中

602
00:28:46,260 --> 0:28:48,395
从而减少任何挂起实例

603
00:28:49,863 --> 0:28:53,834
最后一个例子显示了如何

604
00:28:54,168 --> 0:28:57,504
识别指定app代码区域的热点

605
00:28:58,839 --> 0:29:02,409
在我的app中 我决定在所有主要

606
00:28:58,839 --> 0:29:02,409
在我的app中 我决定在所有主要

607
00:29:02,476 --> 0:29:06,914
比如加载照片、应用特效、

608
00:29:07,548 --> 0:29:09,917
使用mxSignpost、

609
00:29:09,983 --> 0:29:12,920
每个实例在实际情况中的运行次数

610
00:29:13,554 --> 0:29:15,822
以及一些电池寿命和性能指标

611
00:29:15,889 --> 0:29:17,524
比如整个app的累积的CPU时间

612
00:29:18,125 --> 0:29:20,861
和全部CPU时间

613
00:29:22,229 --> 0:29:23,997
这个数据表明有许多

614
00:29:24,064 --> 0:29:28,468
应用特效功能的

615
00:29:28,936 --> 0:29:32,339
现在我知道如何进一步

616
00:29:32,573 --> 0:29:34,842
从而减少整体的电池消耗量

617
00:29:37,177 --> 0:29:39,546
接下来是这部分的主要内容

618
00:29:40,514 --> 0:29:44,017
从iOS 13开始

619
00:29:44,084 --> 0:29:46,420
收集你的app在实际使用时的

620
00:29:48,355 --> 0:29:51,458
你可以使用MetricKit

621
00:29:51,525 --> 0:29:54,228
比如我今天展示的那个例子

622
00:29:54,528 --> 0:29:56,697
或你也可以通过客户群来做

623
00:29:58,432 --> 0:30:01,468
并且在我们今天的例子中

624
00:29:58,432 --> 0:30:01,468
并且在我们今天的例子中

625
00:30:01,535 --> 0:30:03,470
来自单一用户的MetricKit

626
00:30:03,804 --> 0:30:05,939
汇总来自多个用户的相同数据

627
00:30:06,006 --> 0:30:09,309
可以为你提供有关改善你的app的

628
00:30:11,211 --> 0:30:13,847
现在我要把舞台交给Anshul

629
00:30:13,914 --> 0:30:15,983
Xcode中开箱即用的遥测方案

630
00:30:16,183 --> 0:30:17,050
Anshul？

631
00:30:22,189 --> 0:30:23,390
非常感谢Ashish

632
00:30:23,891 --> 0:30:25,058
大家好

633
00:30:25,125 --> 0:30:27,928
我要讲Xcode指标核心管理器

634
00:30:27,995 --> 0:30:32,499
这是我们今年在Xcode 11中

635
00:30:33,767 --> 0:30:36,603
Xcode指标管理器是一个

636
00:30:36,670 --> 0:30:39,206
是我们在Xcode 11中

637
00:30:39,773 --> 0:30:43,177
用于浏览电量和性能app分析

638
00:30:43,544 --> 0:30:47,014
你可以了解app在客户设备上

639
00:30:47,080 --> 0:30:49,716
在电池寿命和性能方面表现如何

640
00:30:50,817 --> 0:30:53,253
你不需要对app进行任何修改

641
00:30:53,320 --> 0:30:56,423
你可以在Xcode 11中使用它

642
00:30:57,224 --> 0:31:00,861
我们在整个过程中都注意保护隐私权

643
00:30:57,224 --> 0:31:00,861
我们在整个过程中都注意保护隐私权

644
00:31:00,928 --> 0:31:03,564
从在设备上收集数据

645
00:31:03,864 --> 0:31:06,667
一直到在服务器上汇总数据

646
00:31:06,934 --> 0:31:10,304
因此你今天就可以开始使用

647
00:31:12,139 --> 0:31:17,110
它的运作方式是

648
00:31:17,778 --> 0:31:20,347
我们围绕你的app收集指标

649
00:31:21,048 --> 0:31:23,383
这些指标会在设备上进行汇总

650
00:31:23,450 --> 0:31:25,319
然后发送到我们的服务器上

651
00:31:25,586 --> 0:31:26,620
在服务器端

652
00:31:26,954 --> 0:31:30,190
我们对这个数据进行分析

653
00:31:30,624 --> 0:31:34,094
这些见解在指标管理器中显示

654
00:31:35,329 --> 0:31:38,599
请注意这些见解只显示在

655
00:31:38,665 --> 0:31:42,002
如果你的app的使用足够达到

656
00:31:43,136 --> 0:31:46,173
这些功能都是开箱即用

657
00:31:46,440 --> 0:31:50,077
不需要修改你的app或开发过程

658
00:31:50,244 --> 0:31:51,912
今天你们就可以用

659
00:31:52,679 --> 0:31:56,216
闲话少叙 让我们看一下演示

660
00:32:03,323 --> 0:32:07,694
要打开指标管理器

661
00:32:09,062 --> 0:32:11,398
那会提出一个熟悉的管理器窗口

662
00:32:11,465 --> 0:32:16,170
有存档、崩溃和电量标签

663
00:32:16,770 --> 0:32:18,405
如果你点击指标

664
00:32:18,939 --> 0:32:21,508
你会在左手边看到

665
00:32:21,742 --> 0:32:24,645
你在iOS App Store中

666
00:32:25,379 --> 0:32:29,416
假设我们发布的

667
00:32:29,483 --> 0:32:31,618
当我们点击那个

668
00:32:32,286 --> 0:32:35,155
这个app的相关指标

669
00:32:35,255 --> 0:32:39,459
指标比如电池寿命、启动时间、

670
00:32:39,826 --> 0:32:42,329
这些指标是我们认为

671
00:32:42,396 --> 0:32:45,065
你要获取优秀的app体验

672
00:32:46,266 --> 0:32:47,701
当你点击其中一个指标时

673
00:32:47,768 --> 0:32:50,571
右手边会显示关于该指标的详情

674
00:32:50,938 --> 0:32:53,841
你可以任意版本的app的指标

675
00:32:54,441 --> 0:32:57,044
或你可以把它与之前版本的指标

676
00:32:57,110 --> 0:33:02,482
这里的X轴代表app版本号

677
00:32:57,110 --> 0:33:02,482
这里的X轴代表app版本号

678
00:33:03,884 --> 0:33:06,820
让我们先来看电池指标

679
00:33:08,288 --> 0:33:10,524
电池有两种指标

680
00:33:10,591 --> 0:33:13,160
第一种是屏幕上的电池使用

681
00:33:13,493 --> 0:33:16,463
这是当用户在屏幕上

682
00:33:16,763 --> 0:33:20,901
所消耗的电量

683
00:33:21,235 --> 0:33:24,538
然后后台电池使用是

684
00:33:24,738 --> 0:33:27,341
当app在后台运行时消耗的电量

685
00:33:27,941 --> 0:33:33,146
现在每种指标都按照系统组件

686
00:33:33,480 --> 0:33:36,650
比如处理、网络、显示定位

687
00:33:36,884 --> 0:33:39,753
从而你可以了解哪些组件

688
00:33:39,820 --> 0:33:41,755
最消耗电量

689
00:33:43,257 --> 0:33:46,093
让我们从后台电池使用开始看

690
00:33:46,159 --> 0:33:49,863
因为我们知道

691
00:33:50,664 --> 0:33:52,399
通过查看后台

692
00:33:52,533 --> 0:33:56,436
看起来每天消耗大约10%电池电量

693
00:33:56,737 --> 0:33:57,938
这个数值非常高

694
00:33:59,006 --> 0:34:03,143
除了这个 看起来

695
00:33:59,006 --> 0:34:03,143
除了这个 看起来

696
00:34:03,210 --> 0:34:06,313
网络消耗了3.66%电量

697
00:34:06,613 --> 0:34:09,183
这些数值都太高了

698
00:34:09,248 --> 0:34:13,286
找出app为什么会在后台

699
00:34:17,391 --> 0:34:20,494
让我们查看当最新版app

700
00:34:21,161 --> 0:34:23,664
最新版app处于前台时

701
00:34:23,996 --> 0:34:26,900
看起来最新版本

702
00:34:27,434 --> 0:34:30,237
比上一个版本降低了10%

703
00:34:30,771 --> 0:34:33,340
其中显示指标看起来比较稳定

704
00:34:34,641 --> 0:34:37,244
网络指标稍有增加

705
00:34:37,311 --> 0:34:40,179
但这里的罪魁祸首是处理指标

706
00:34:40,914 --> 0:34:44,918
我们可以查看90%用户群

707
00:34:45,252 --> 0:34:48,088
和50%用户群时的这些数据

708
00:34:48,155 --> 0:34:52,426
看用户群是否在电量消耗方面

709
00:34:53,159 --> 0:34:55,195
我们还可以查看

710
00:34:55,661 --> 0:35:00,400
全部iPhone类

711
00:34:55,661 --> 0:35:00,400
全部iPhone类

712
00:35:00,634 --> 0:35:03,070
或单一设备的数据

713
00:35:03,437 --> 0:35:06,840
让我们 比如说

714
00:35:07,508 --> 0:35:12,112
对于iPhone 6

715
00:35:12,346 --> 0:35:17,918
1.0.8与1.0.7相比

716
00:35:18,719 --> 0:35:21,922
让我们再看一个较新的设备

717
00:35:22,456 --> 0:35:24,992
啊 iPhone X有一个大跳跃

718
00:35:25,092 --> 0:35:28,595
请看这里 与先前的设备相比

719
00:35:28,896 --> 0:35:32,900
而罪魁祸首就是处理指标

720
00:35:33,700 --> 0:35:36,470
对此进行进一步调试有许多方式

721
00:35:37,371 --> 0:35:39,206
我们可以直接进入代码

722
00:35:39,506 --> 0:35:43,677
或进入我们去年引入的

723
00:35:44,411 --> 0:35:48,382
电量标签显示实际运行时的

724
00:35:49,016 --> 0:35:51,285
你可以查看堆栈帧

725
00:35:51,785 --> 0:35:54,087
查找哪里最消耗电量

726
00:35:54,488 --> 0:35:57,925
我知道Ashish讲了

727
00:35:59,092 --> 0:36:01,695
他只对较新的设备

728
00:35:59,092 --> 0:36:01,695
他只对较新的设备

729
00:36:01,762 --> 0:36:04,198
和我们app的1.0.8版本

730
00:36:05,199 --> 0:36:08,669
applyFilter导致了这个

731
00:36:09,503 --> 0:36:12,873
这是其中一种使用指标

732
00:36:13,407 --> 0:36:17,110
和电量标签来找出问题

733
00:36:19,179 --> 0:36:21,915
现在让我们看一下其它可用的指标

734
00:36:22,549 --> 0:36:25,452
启动时间对于我们的用户来说

735
00:36:25,519 --> 0:36:29,456
因为启动慢的app会让用户们

736
00:36:29,790 --> 0:36:32,726
理想情况下 启动时间应该在数秒内

737
00:36:33,126 --> 0:36:39,566
我们的Awesome Photo App在所有

738
00:36:39,800 --> 0:36:44,538
你可以使用Sastry

739
00:36:44,872 --> 0:36:46,006
进行进一步的调试

740
00:36:47,241 --> 0:36:50,444
挂起时间是app的无响应时间

741
00:36:50,744 --> 0:36:52,212
单位是秒每小时

742
00:36:52,613 --> 0:36:56,517
理想情况下挂起时间应该为0

743
00:36:58,285 --> 0:37:02,289
我们展示了两种内存——

744
00:36:58,285 --> 0:37:02,289
我们展示了两种内存——

745
00:37:02,723 --> 0:37:04,658
内存是一种资源 我们应该…

746
00:37:05,158 --> 0:37:07,928
我们应该只在绝对需要时使用它

747
00:37:09,096 --> 0:37:13,433
磁盘写入是你的app所执行的

748
00:37:13,967 --> 0:37:16,703
我们需要留意我们执行了多少写入

749
00:37:17,471 --> 0:37:21,775
我们可使用Instruments

750
00:37:23,877 --> 0:37:26,880
这就是Xcode指标管理器

751
00:37:27,080 --> 0:37:32,319
一种开箱即用的工具

752
00:37:32,586 --> 0:37:36,223
并围绕高耗电量性能导致的问题

753
00:37:37,624 --> 0:37:41,895
比如启动时间长

754
00:37:42,763 --> 0:37:46,567
你可以检测

755
00:37:46,934 --> 0:37:50,170
并与上一个版本的数据做比较

756
00:37:50,637 --> 0:37:53,473
你今天就可以使用这个工具了

757
00:37:53,540 --> 0:37:57,411
无需修改你的app或开发生命周期

758
00:37:57,678 --> 0:38:01,315
因此请试着使用它

759
00:37:57,678 --> 0:38:01,315
因此请试着使用它

760
00:38:01,415 --> 0:38:03,584
非常感谢你们的聆听

761
00:38:08,622 --> 0:38:09,456
谢谢Anshul

762
00:38:10,757 --> 0:38:11,925
我们了解了这些很棒的工具

763
00:38:12,559 --> 0:38:15,195
我想快速总结一下

764
00:38:16,396 --> 0:38:18,866
我们讲了在Xcode 11之前

765
00:38:19,233 --> 0:38:22,970
用于调试和了解

766
00:38:24,171 --> 0:38:26,673
然后我们给你展示了一些新功能

767
00:38:26,740 --> 0:38:28,509
并会帮助你把量化

768
00:38:28,842 --> 0:38:31,144
性能和电池寿命影响

769
00:38:31,845 --> 0:38:34,448
以及可以从这些工具中收集的

770
00:38:34,748 --> 0:38:37,384
用于进一步了解并调试代码

771
00:38:38,852 --> 0:38:40,220
如果你从这个演示中学到了什么

772
00:38:40,921 --> 0:38:43,924
我希望你了解了我们为你们打造了

773
00:38:44,358 --> 0:38:46,093
我们非常想得到你们对它们的反馈

774
00:38:46,460 --> 0:38:49,096
这些工具会帮助你量化

775
00:38:49,363 --> 0:38:51,632
你的app对电池寿命和性能

776
00:38:52,733 --> 0:38:54,601
那种量化会

777
00:38:54,668 --> 0:38:56,670
帮助你做出决策

778
00:38:56,970 --> 0:38:58,906
为所有用户提供更好的体验

779
00:39:00,407 --> 0:39:03,877
要获取更多信息

780
00:39:05,012 --> 0:39:07,948
或参加我们明天的电量和性能演讲

781
00:39:09,216 --> 0:39:10,717
我们很高兴明天在演讲上见到你们

782
00:39:10,784 --> 0:39:12,486
我们会讲如何在你的app中

783
00:39:12,553 --> 0:39:15,155
以及如何使用这些工具

784
00:39:15,722 --> 0:39:17,958
别忘了参加明天的

785
00:39:18,125 --> 0:39:20,394
他们会深入地讲一下app启动性能

786
00:39:21,195 --> 0:39:23,564
再次感谢你们的参与
