1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:11,176 --> 0:00:13,196
&gt;&gt; Good afternoon.

3
00:00:13,306 --> 0:00:16,335
Welcome to our session on

4
00:00:16,335 --> 0:00:17,236
Working with USD.

5
00:00:17,926 --> 0:00:19,186
It's great to be here.

6
00:00:19,926 --> 0:00:21,386
My name is Denis Kovacs and I'm

7
00:00:21,386 --> 0:00:22,976
going to be joined on stage by

8
00:00:22,976 --> 0:00:23,486
Chloe Moore.

9
00:00:24,436 --> 0:00:26,316
Last year, we introduced AR

10
00:00:26,316 --> 0:00:27,536
Quick Look on iOS.

11
00:00:27,976 --> 0:00:30,266
It's the simplest way to explore

12
00:00:30,266 --> 0:00:32,345
3D content in AR on your

13
00:00:32,345 --> 0:00:32,906
devices.

14
00:00:35,476 --> 0:00:37,806
For instance, you can view the

15
00:00:37,806 --> 0:00:39,166
model of a product you'd like to

16
00:00:39,166 --> 0:00:39,476
buy.

17
00:00:40,066 --> 0:00:41,026
You can place it in your own

18
00:00:41,026 --> 0:00:42,676
space and get a real sense for

19
00:00:42,676 --> 0:00:43,486
its true size.

20
00:00:44,666 --> 0:00:45,966
As you move your device around,

21
00:00:46,256 --> 0:00:47,046
the model appears firmly

22
00:00:47,046 --> 0:00:47,976
grounded in your environment.

23
00:00:51,966 --> 0:00:53,316
And you can also get a good

24
00:00:53,316 --> 0:00:54,686
sense of how the real object

25
00:00:55,106 --> 0:00:56,566
would look in your home because

26
00:00:56,896 --> 0:00:58,586
the model is rendered using real

27
00:00:58,586 --> 0:00:59,636
lighting conditions of your

28
00:00:59,636 --> 0:01:00,056
space.

29
00:00:59,636 --> 0:01:00,056
space.

30
00:01:01,106 --> 0:01:02,346
Shiny materials like the

31
00:01:02,346 --> 0:01:03,416
polished chrome on this lamp

32
00:01:03,916 --> 0:01:05,226
even reflect your environment.

33
00:01:08,776 --> 0:01:10,706
And AR is simply fun.

34
00:01:11,576 --> 0:01:13,246
It's a really intuitive way to

35
00:01:13,246 --> 0:01:15,066
explore and interact with your

36
00:01:15,066 --> 0:01:15,976
beautiful 3D content.

37
00:01:21,286 --> 0:01:22,566
Underneath all these AR

38
00:01:22,566 --> 0:01:24,586
experiences is a file format we

39
00:01:24,586 --> 0:01:26,316
introduced last year to our

40
00:01:26,316 --> 0:01:27,976
platforms, USDZ.

41
00:01:30,306 --> 0:01:32,556
USDZ support is deeply

42
00:01:32,556 --> 0:01:34,026
integrated into our apps and

43
00:01:34,026 --> 0:01:36,096
frameworks, so you can share AR

44
00:01:36,096 --> 0:01:37,316
experiences with your friends

45
00:01:37,316 --> 0:01:39,776
over Messages and Mail, you can

46
00:01:39,776 --> 0:01:41,766
experience interactive news with

47
00:01:41,766 --> 0:01:44,336
content coming to life in AR, or

48
00:01:44,336 --> 0:01:45,676
you can find new experiences on

49
00:01:45,676 --> 0:01:47,636
the web, and take them directly

50
00:01:47,636 --> 0:01:48,986
into AR through Safari.

51
00:01:50,246 --> 0:01:51,766
And you can build your own

52
00:01:51,766 --> 0:01:53,226
beautiful apps that take

53
00:01:53,226 --> 0:01:54,456
advantage of USDZ.

54
00:01:59,236 --> 0:02:02,496
The technology behind USDZ is

55
00:01:59,236 --> 0:02:02,496
The technology behind USDZ is

56
00:02:02,496 --> 0:02:05,046
USD and it is the main topic of

57
00:02:05,086 --> 0:02:05,596
this session.

58
00:02:09,096 --> 0:02:11,816
So here's our agenda for today.

59
00:02:12,386 --> 0:02:14,056
First, we will look at what USD

60
00:02:14,056 --> 0:02:14,256
is.

61
00:02:14,256 --> 0:02:16,776
We'll discuss some workflows

62
00:02:16,776 --> 0:02:18,186
related to creating and

63
00:02:18,236 --> 0:02:20,426
converting to USDZ.

64
00:02:20,576 --> 0:02:22,066
The rest of the talk, we will

65
00:02:22,066 --> 0:02:24,146
spend building an intuition for

66
00:02:24,146 --> 0:02:24,496
USD.

67
00:02:25,556 --> 0:02:26,966
Starting with some essentials

68
00:02:27,036 --> 0:02:28,716
common to most 3D file formats

69
00:02:29,496 --> 0:02:30,636
and we will end with some

70
00:02:30,636 --> 0:02:33,906
features that are unique to USD.

71
00:02:34,176 --> 0:02:34,976
So, what is USD?

72
00:02:38,206 --> 0:02:40,266
USD stands for Universal Scene

73
00:02:40,266 --> 0:02:40,786
Description.

74
00:02:42,086 --> 0:02:44,496
It's a 3D file format and a

75
00:02:44,726 --> 0:02:46,856
supporting C++ library with

76
00:02:46,856 --> 0:02:48,906
Python bindings developed by

77
00:02:49,496 --> 0:02:49,666
Pixar.

78
00:02:50,616 --> 0:02:53,516
The library can read and write

79
00:02:54,236 --> 0:02:55,606
USD files.

80
00:02:55,786 --> 0:02:57,226
It contains a powerful

81
00:02:57,226 --> 0:02:58,846
composition engine and much,

82
00:02:58,916 --> 0:02:59,476
much more.

83
00:03:00,186 --> 0:03:02,416
The focus of this library is on

84
00:03:02,416 --> 0:03:05,696
speed, scalability and

85
00:03:05,696 --> 0:03:06,406
collaboration.

86
00:03:07,196 --> 0:03:08,546
There are three file extensions

87
00:03:08,836 --> 0:03:10,766
associated with USD, a plain

88
00:03:10,766 --> 0:03:12,546
text version, USDA, that is

89
00:03:12,976 --> 0:03:16,496
designed to be as easy to read

90
00:03:16,856 --> 0:03:19,156
and understand as possible.

91
00:03:20,006 --> 0:03:22,656
A binary version, USDC, that is

92
00:03:22,746 --> 0:03:25,046
as efficient as possible to read

93
00:03:25,046 --> 0:03:25,456
and write.

94
00:03:26,176 --> 0:03:28,566
And the extension USD, that can

95
00:03:28,566 --> 0:03:30,716
be either plain text or binary.

96
00:03:31,336 --> 0:03:33,856
You can go back and forth

97
00:03:33,856 --> 0:03:34,976
between these file types.

98
00:03:38,386 --> 0:03:40,656
And then there is USDZ.

99
00:03:41,636 --> 0:03:43,506
Let's take a closer look at

100
00:03:45,016 --> 0:03:45,126
that.

101
00:03:45,246 --> 0:03:47,216
So what is USDZ?

102
00:03:47,216 --> 0:03:48,796
USDZ is the distribution format

103
00:03:48,796 --> 0:03:49,456
for USD.

104
00:03:50,216 --> 0:03:51,766
It contains all the data related

105
00:03:51,766 --> 0:03:54,046
to a 3D scene packaged up in a

106
00:03:54,136 --> 0:03:55,366
single compact file.

107
00:03:56,666 --> 0:03:58,406
It's optimized for sharing and

108
00:03:58,406 --> 0:04:00,476
it's the basis of AR Quick Look.

109
00:03:58,406 --> 0:04:00,476
it's the basis of AR Quick Look.

110
00:04:00,986 --> 0:04:04,216
USDZ is supported on iOS, macOS

111
00:04:04,216 --> 0:04:04,496
and tvOS.

112
00:04:04,496 --> 0:04:08,966
If you look at the anatomy of a

113
00:04:09,286 --> 0:04:10,336
USDZ file we'll see that it's an

114
00:04:10,336 --> 0:04:13,176
uncompressed zip archive where

115
00:04:13,176 --> 0:04:15,076
all the contained files are

116
00:04:15,076 --> 0:04:17,696
aligned to 64-byte boundaries

117
00:04:18,315 --> 0:04:20,185
for most efficient memory

118
00:04:20,185 --> 0:04:20,565
mapping.

119
00:04:21,966 --> 0:04:23,906
There's two types of files

120
00:04:23,906 --> 0:04:25,536
contained in a USDZ archive.

121
00:04:26,876 --> 0:04:28,296
The scene description files in

122
00:04:28,626 --> 0:04:33,316
USDA, USD, or USDC or even USDZ

123
00:04:33,316 --> 0:04:34,916
format so you can have nested

124
00:04:35,016 --> 0:04:37,866
archives, and a set of textures

125
00:04:38,266 --> 0:04:40,906
currently in PNG or JPEG format.

126
00:04:46,826 --> 0:04:49,036
Let's take a rough comparison of

127
00:04:49,366 --> 0:04:52,726
current file formats out there.

128
00:04:52,926 --> 0:04:54,416
The basic-- The most basic

129
00:04:54,416 --> 0:04:56,486
format is obj, which essentially

130
00:04:56,486 --> 0:04:58,206
contains a single 3D model.

131
00:04:59,346 --> 0:05:00,926
It has a limited material

132
00:04:59,346 --> 0:05:00,926
It has a limited material

133
00:05:00,926 --> 0:05:03,066
support and no animations.

134
00:05:03,626 --> 0:05:06,806
Then there's a large group of

135
00:05:06,876 --> 0:05:08,676
different more modern file

136
00:05:08,716 --> 0:05:09,226
formats.

137
00:05:09,736 --> 0:05:11,056
They usually can contain

138
00:05:11,056 --> 0:05:13,386
multiple models that can be laid

139
00:05:13,386 --> 0:05:15,056
out in a scene graph, they can

140
00:05:15,056 --> 0:05:16,546
support different sets of

141
00:05:17,066 --> 0:05:19,596
material descriptions, and also

142
00:05:19,596 --> 0:05:20,176
animation.

143
00:05:22,376 --> 0:05:25,026
USD supports all of this, but

144
00:05:25,666 --> 0:05:27,646
additionally it was designed to

145
00:05:27,646 --> 0:05:29,556
be scalable, Pixar invented the

146
00:05:29,556 --> 0:05:30,816
format for its large movie

147
00:05:30,816 --> 0:05:31,176
scenes.

148
00:05:31,956 --> 0:05:33,566
And it also supports

149
00:05:33,626 --> 0:05:35,396
collaboration, which allows many

150
00:05:35,396 --> 0:05:37,196
artists to work together on a

151
00:05:37,196 --> 0:05:38,556
single scene without getting in

152
00:05:38,556 --> 0:05:39,266
each other's way.

153
00:05:44,186 --> 0:05:46,926
USDZ, as the archive package

154
00:05:47,676 --> 0:05:49,226
inherits most of these features

155
00:05:49,226 --> 0:05:49,556
as well.

156
00:05:53,296 --> 0:05:55,466
Next, let's take a look at

157
00:05:55,466 --> 0:05:56,106
workflows.

158
00:05:56,686 --> 0:05:59,466
We can group these in two

159
00:05:59,466 --> 0:06:02,196
categories, converting existing

160
00:05:59,466 --> 0:06:02,196
categories, converting existing

161
00:06:02,196 --> 0:06:04,636
assets and creating new ones.

162
00:06:05,206 --> 0:06:07,856
Let's start with converting

163
00:06:08,016 --> 0:06:08,966
existing assets.

164
00:06:13,486 --> 0:06:16,046
So let's imagine you have your

165
00:06:16,116 --> 0:06:18,526
assets on this in some of these

166
00:06:18,526 --> 0:06:20,316
other formats, maybe FBX or

167
00:06:20,316 --> 0:06:22,416
gltf, and you want to convert

168
00:06:22,416 --> 0:06:24,886
them to use USDZ to explore--

169
00:06:24,886 --> 0:06:27,536
deploy them to your app or AR

170
00:06:27,536 --> 0:06:28,546
Quick Look.

171
00:06:31,216 --> 0:06:33,016
Today, we introduced a new

172
00:06:33,016 --> 0:06:34,506
command line tool called

173
00:06:34,506 --> 0:06:35,386
usdzconvert.

174
00:06:36,106 --> 0:06:37,996
It supersedes last year's Xcode

175
00:06:37,996 --> 0:06:41,566
converter and it allows you to

176
00:06:41,566 --> 0:06:43,646
convert many more file formats

177
00:06:43,716 --> 0:06:46,676
such as FBX and gltf.

178
00:06:47,086 --> 0:06:48,236
It also performs asset

179
00:06:48,236 --> 0:06:48,886
validation.

180
00:06:49,546 --> 0:06:50,606
So you can be sure that there

181
00:06:50,606 --> 0:06:52,086
are no issues with the generated

182
00:06:52,086 --> 0:06:52,906
USDZ files.

183
00:06:53,696 --> 0:06:56,746
And it is Python based so it's

184
00:06:56,776 --> 0:06:57,756
platform independent.

185
00:06:58,506 --> 0:06:59,486
So it's easy for you to

186
00:06:59,486 --> 0:07:02,306
integrate this converter into

187
00:06:59,486 --> 0:07:02,306
integrate this converter into

188
00:07:02,306 --> 0:07:05,176
your existing content pipelines

189
00:07:05,456 --> 0:07:06,576
that might be on other platforms

190
00:07:06,576 --> 0:07:06,956
in macOS.

191
00:07:11,216 --> 0:07:12,156
Here are couple of sample

192
00:07:12,156 --> 0:07:12,656
sessions.

193
00:07:13,016 --> 0:07:14,686
Let's say you have a gltf file,

194
00:07:14,686 --> 0:07:16,386
you can pass the file to

195
00:07:16,386 --> 0:07:18,176
usdzconvert and it converts it

196
00:07:18,176 --> 0:07:18,796
into USDZ.

197
00:07:18,796 --> 0:07:21,496
You can also see that it

198
00:07:21,556 --> 0:07:22,736
performs asset validation

199
00:07:22,736 --> 0:07:22,976
afterwards.

200
00:07:26,736 --> 0:07:28,006
If you want to know all the

201
00:07:28,006 --> 0:07:29,586
command line options, you can

202
00:07:29,636 --> 0:07:30,466
use this -h.

203
00:07:31,116 --> 0:07:36,136
And you can also provide rich

204
00:07:36,136 --> 0:07:38,416
material descriptions directly

205
00:07:38,416 --> 0:07:39,276
from the command line.

206
00:07:39,276 --> 0:07:41,056
This is especially handy for

207
00:07:41,056 --> 0:07:42,356
file formats like obj that do

208
00:07:42,646 --> 0:07:43,926
not have a rich material

209
00:07:43,926 --> 0:07:45,096
definition.

210
00:07:47,556 --> 0:07:50,366
Usdzconvert is a part of a

211
00:07:50,366 --> 0:07:51,656
broader package that we are

212
00:07:51,656 --> 0:07:52,806
providing to developers.

213
00:07:53,496 --> 0:07:55,286
It also includes the precompiled

214
00:07:55,376 --> 0:07:57,186
binaries of the USD library for

215
00:07:57,186 --> 0:07:59,416
macOS and some other things as

216
00:07:59,416 --> 0:07:59,626
well.

217
00:07:59,836 --> 0:08:04,426
For example, the USD command

218
00:07:59,836 --> 0:08:04,426
For example, the USD command

219
00:08:04,426 --> 0:08:05,056
line tools.

220
00:08:05,266 --> 0:08:08,696
Usdcat, for example, is great to

221
00:08:09,156 --> 0:08:10,656
output a plain text

222
00:08:10,656 --> 0:08:13,376
representation of your USDZ

223
00:08:14,816 --> 0:08:14,946
file.

224
00:08:15,106 --> 0:08:17,416
Usdtree is useful to see a

225
00:08:17,416 --> 0:08:19,036
high-level structure of the

226
00:08:19,036 --> 0:08:19,786
model hierarchy.

227
00:08:20,896 --> 0:08:24,966
And usdchecker is USDZ's asset

228
00:08:25,016 --> 0:08:25,616
validator.

229
00:08:26,196 --> 0:08:29,726
We're also including a little

230
00:08:29,726 --> 0:08:31,266
script called fixed capacity.

231
00:08:31,776 --> 0:08:33,086
If you offered models with the

232
00:08:33,086 --> 0:08:34,525
transparent materials for AR

233
00:08:34,576 --> 0:08:36,446
Quick Look last year and those

234
00:08:36,446 --> 0:08:38,746
materials look opaque in iOS 13,

235
00:08:38,946 --> 0:08:43,576
use a script to fix that.

236
00:08:43,726 --> 0:08:45,576
OK. For a little demo of all of

237
00:08:45,576 --> 0:08:47,316
these, I'd like to invite Chloe

238
00:08:47,316 --> 0:08:47,776
on stage.

239
00:08:48,516 --> 0:08:53,746
[ Applause ]

240
00:08:54,246 --> 0:08:54,996
&gt;&gt; Thank you, Denis.

241
00:08:55,976 --> 0:08:57,706
As we have seen before, we

242
00:08:57,706 --> 0:09:00,056
provide a precompiled USD Python

243
00:08:57,706 --> 0:09:00,056
provide a precompiled USD Python

244
00:09:00,056 --> 0:09:01,846
library that's available for

245
00:09:01,846 --> 0:09:02,466
download here.

246
00:09:03,606 --> 0:09:05,286
I have already downloaded and

247
00:09:05,286 --> 0:09:05,916
unpacked it.

248
00:09:07,266 --> 0:09:08,976
The USD folder contains the

249
00:09:08,976 --> 0:09:10,886
precompiled USD Python library,

250
00:09:11,206 --> 0:09:12,876
as well as a suite of a command

251
00:09:12,876 --> 0:09:15,246
line tools such as usdtree and

252
00:09:15,246 --> 0:09:16,906
usdcat provided by Pixar.

253
00:09:18,296 --> 0:09:20,586
The usdzconvert folder contains

254
00:09:20,586 --> 0:09:22,566
the usdzconvert tool and the fix

255
00:09:22,566 --> 0:09:23,326
opacity tool.

256
00:09:24,536 --> 0:09:26,276
We also provide a USD command

257
00:09:26,536 --> 0:09:27,976
which sets up some environmental

258
00:09:27,976 --> 0:09:28,746
variables for you.

259
00:09:28,746 --> 0:09:31,316
When you double click it opens

260
00:09:31,316 --> 0:09:31,976
up a terminal window.

261
00:09:36,176 --> 0:09:38,226
Let's start with usdzconvert.

262
00:09:39,026 --> 0:09:40,816
If you just run usdzconvert by

263
00:09:40,816 --> 0:09:43,476
itself, it outputs our argument.

264
00:09:44,966 --> 0:09:46,596
Now suppose you have some gltf

265
00:09:46,596 --> 0:09:47,736
file that you want to convert.

266
00:10:03,346 --> 0:10:05,206
You can simply run usdzconvert

267
00:10:05,206 --> 0:10:05,956
with your file name.

268
00:10:06,316 --> 0:10:08,376
Now, let's take a look at a

269
00:10:08,376 --> 0:10:09,926
generated asset.

270
00:10:11,256 --> 0:10:13,216
To generate to the file contains

271
00:10:13,216 --> 0:10:15,416
all materials and animation.

272
00:10:18,936 --> 0:10:21,996
As we can see here, usdzconvert

273
00:10:21,996 --> 0:10:23,466
also performs additional asset

274
00:10:23,466 --> 0:10:23,976
validation.

275
00:10:27,566 --> 0:10:29,116
Next, let's say you have some

276
00:10:29,116 --> 0:10:31,326
obj file without material, like

277
00:10:31,896 --> 0:10:32,976
this tetrahedron model.

278
00:10:36,706 --> 0:10:38,316
You can simply add the material

279
00:10:38,536 --> 0:10:40,056
with additional arguments, for

280
00:10:40,056 --> 0:10:40,966
instance constant color.

281
00:10:45,246 --> 0:10:46,726
Here you can see material is

282
00:10:46,726 --> 0:10:46,966
applied.

283
00:10:51,796 --> 0:10:53,496
To see the high-level structure

284
00:10:53,496 --> 0:10:55,946
of your model, you can use

285
00:10:56,276 --> 0:10:56,546
usdtree.

286
00:10:58,096 --> 0:11:00,856
Here, see the material and the

287
00:10:58,096 --> 0:11:00,856
Here, see the material and the

288
00:11:00,856 --> 0:11:01,276
mesh.

289
00:11:05,236 --> 0:11:06,836
To see the full plain text

290
00:11:06,836 --> 0:11:08,186
representation of your model,

291
00:11:08,606 --> 0:11:09,666
you can use usdcat.

292
00:11:17,356 --> 0:11:18,666
Here's another common use case.

293
00:11:19,656 --> 0:11:25,476
You have a obj file here

294
00:11:25,696 --> 0:11:27,206
together with a rich set of

295
00:11:27,206 --> 0:11:27,976
material textures.

296
00:11:34,016 --> 0:11:35,776
Assigning textures to a material

297
00:11:35,856 --> 0:11:37,386
is as simple as assigning

298
00:11:37,386 --> 0:11:37,896
constants.

299
00:11:43,756 --> 0:11:46,726
A USDZ file is an uncompressed

300
00:11:46,726 --> 0:11:47,446
zip archive.

301
00:11:47,936 --> 0:11:49,396
So a quick way to examine its

302
00:11:49,396 --> 0:11:51,196
content is to use a zip info.

303
00:11:51,486 --> 0:11:55,916
Here we can see the USDZ archive

304
00:11:55,976 --> 0:11:58,356
contains a USDZ file and all

305
00:11:58,356 --> 0:11:59,116
above textures.

306
00:12:03,536 --> 0:12:05,176
Here you can see all material

307
00:12:05,176 --> 0:12:06,266
textures are applied to the

308
00:12:06,266 --> 0:12:06,586
model.

309
00:12:07,186 --> 0:12:10,866
So to summarize, converting your

310
00:12:10,866 --> 0:12:13,596
existing asset to USDZ is easy

311
00:12:13,636 --> 0:12:14,776
with usdzconvert.

312
00:12:15,606 --> 0:12:17,826
And there is a set of additional

313
00:12:17,826 --> 0:12:19,466
tools that would help you to

314
00:12:19,466 --> 0:12:21,306
examine your generated assets.

315
00:12:22,406 --> 0:12:23,196
Back to you, Denis.

316
00:12:24,516 --> 0:12:28,196
[ Applause ]

317
00:12:28,696 --> 0:12:29,976
Thank you, Chloe.

318
00:12:35,636 --> 0:12:38,536
So that covers the conversion

319
00:12:38,536 --> 0:12:39,056
stage.

320
00:12:39,506 --> 0:12:41,046
Now let's take a look at how to

321
00:12:41,046 --> 0:12:42,976
create USDZ files from scratch.

322
00:12:46,516 --> 0:12:48,616
You can of course start creating

323
00:12:48,616 --> 0:12:49,866
your assets with your favorite

324
00:12:49,866 --> 0:12:50,646
authoring tool.

325
00:12:50,966 --> 0:12:53,416
And it will likely be able to

326
00:12:53,416 --> 0:12:55,536
export to a format like FBX

327
00:12:55,536 --> 0:12:57,476
already that you can then

328
00:12:57,476 --> 0:12:59,366
convert to USDZ with the

329
00:12:59,366 --> 0:13:00,916
usdzconvert tool that we just

330
00:12:59,366 --> 0:13:00,916
usdzconvert tool that we just

331
00:13:00,916 --> 0:13:00,983
saw.

332
00:13:04,046 --> 0:13:05,936
But there's a growing number of

333
00:13:05,996 --> 0:13:07,406
content creation applications

334
00:13:07,546 --> 0:13:09,506
that support direct USD export.

335
00:13:10,756 --> 0:13:12,186
That allows you to integrate

336
00:13:12,186 --> 0:13:13,946
your content creation step more

337
00:13:13,946 --> 0:13:15,806
easily into a USD pipeline.

338
00:13:16,536 --> 0:13:19,536
And the conversion step with all

339
00:13:19,536 --> 0:13:20,706
these potential translation

340
00:13:20,706 --> 0:13:22,476
complications turns into a much

341
00:13:22,526 --> 0:13:24,506
simpler archiving step.

342
00:13:27,026 --> 0:13:29,356
Here are two examples of content

343
00:13:29,356 --> 0:13:32,196
creation tools that support USD

344
00:13:32,196 --> 0:13:32,626
export.

345
00:13:33,776 --> 0:13:35,116
This one is Substance Painter by

346
00:13:35,116 --> 0:13:38,076
Adobe, a great tool for creating

347
00:13:38,076 --> 0:13:39,916
photorealistic materials for

348
00:13:39,916 --> 0:13:40,856
your 3D objects.

349
00:13:41,426 --> 0:13:45,646
It supports USD and USDZ export.

350
00:13:46,186 --> 0:13:49,836
And here is Autodesk Maya, one

351
00:13:49,836 --> 0:13:51,536
of the leading 3D modeling and

352
00:13:51,536 --> 0:13:52,436
animation tools.

353
00:13:52,986 --> 0:13:57,716
It supports USD and USDZ export

354
00:13:57,956 --> 0:14:00,106
through a plugin that's written

355
00:13:57,956 --> 0:14:00,106
through a plugin that's written

356
00:14:00,106 --> 0:14:01,516
and maintained by Pixar.

357
00:14:02,126 --> 0:14:05,826
So as we've seen, a lot of these

358
00:14:05,896 --> 0:14:08,496
applications even support direct

359
00:14:08,496 --> 0:14:11,556
USDZ export further simplifying

360
00:14:11,776 --> 0:14:13,816
your USDZ creation step.

361
00:14:14,406 --> 0:14:18,836
And because of USD's Python

362
00:14:18,836 --> 0:14:20,786
bindings you can also create

363
00:14:20,786 --> 0:14:23,616
your own custom Python pipelines

364
00:14:23,686 --> 0:14:25,066
that are tailored to your

365
00:14:25,066 --> 0:14:25,956
particular content.

366
00:14:27,366 --> 0:14:29,996
Next, we're making exporting

367
00:14:29,996 --> 0:14:32,466
USDZ from SceneKit super easy.

368
00:14:33,336 --> 0:14:35,176
All you have to do is to create

369
00:14:35,176 --> 0:14:37,036
or load your SCNScene just as

370
00:14:37,036 --> 0:14:37,466
before.

371
00:14:37,996 --> 0:14:39,216
And when you're ready to export

372
00:14:39,216 --> 0:14:41,976
to USDZ, all you need is one API

373
00:14:41,976 --> 0:14:45,516
call, write to, and make sure

374
00:14:45,516 --> 0:14:46,976
that the file extension is usdz.

375
00:14:51,816 --> 0:14:54,496
In fact, we've integrated USDZ

376
00:14:54,496 --> 0:14:56,946
export into Xcode's SceneKit

377
00:14:56,946 --> 0:14:57,776
editor as well.

378
00:14:58,556 --> 0:15:00,606
So, you can also export directly

379
00:14:58,556 --> 0:15:00,606
So, you can also export directly

380
00:15:00,866 --> 0:15:02,826
through a command-- through a

381
00:15:02,826 --> 0:15:03,846
user interface as well.

382
00:15:04,626 --> 0:15:07,316
OK. So that covers the

383
00:15:07,316 --> 0:15:07,956
workflows.

384
00:15:09,486 --> 0:15:12,326
Now, we want to take a look at

385
00:15:12,696 --> 0:15:13,966
USD's features.

386
00:15:14,666 --> 0:15:16,226
Now, as we've mentioned in the

387
00:15:16,226 --> 0:15:18,446
introduction, USD has a very

388
00:15:18,446 --> 0:15:19,316
large feature set.

389
00:15:19,786 --> 0:15:21,766
And it is impossible to even

390
00:15:21,766 --> 0:15:22,596
mention all of them in this

391
00:15:22,796 --> 0:15:22,976
talk.

392
00:15:26,536 --> 0:15:28,606
But there are a few key concepts

393
00:15:28,876 --> 0:15:32,846
that are easy to grasp.

394
00:15:32,996 --> 0:15:34,806
So let's focus on those first.

395
00:15:40,056 --> 0:15:41,306
We will talk about four

396
00:15:41,306 --> 0:15:43,636
concepts, the File Structure,

397
00:15:44,806 --> 0:15:48,366
the Scene Graph, Mesh Data, and

398
00:15:48,366 --> 0:15:48,976
Materials.

399
00:15:49,546 --> 0:15:53,506
A key differentiator of USD is

400
00:15:53,506 --> 0:15:54,726
that its plain text form is

401
00:15:54,726 --> 0:15:56,916
designed to be readable and

402
00:15:56,916 --> 0:15:57,676
understandable.

403
00:15:59,006 --> 0:16:00,296
So the format becomes less

404
00:15:59,006 --> 0:16:00,296
So the format becomes less

405
00:16:00,296 --> 0:16:02,566
mysterious and more transparent.

406
00:16:03,376 --> 0:16:05,236
And when things go wrong, you

407
00:16:05,236 --> 0:16:07,006
can more quickly pinpoint where

408
00:16:07,006 --> 0:16:07,466
and why.

409
00:16:11,936 --> 0:16:12,876
So let's focus on the file

410
00:16:12,876 --> 0:16:13,676
structure first.

411
00:16:17,676 --> 0:16:22,056
So this is an excerpt of a USDA

412
00:16:22,196 --> 0:16:22,556
file.

413
00:16:23,446 --> 0:16:24,996
The first thing you will notice

414
00:16:25,426 --> 0:16:27,556
is that it contains these nested

415
00:16:27,656 --> 0:16:28,376
containers.

416
00:16:29,096 --> 0:16:30,616
In USD they're called prims.

417
00:16:33,156 --> 0:16:35,586
These prims contain properties

418
00:16:35,956 --> 0:16:37,516
that store the actual data.

419
00:16:38,136 --> 0:16:42,126
And there's a set of metadata

420
00:16:42,586 --> 0:16:45,906
attached to file level, prim

421
00:16:45,906 --> 0:16:48,746
level, or property level.

422
00:16:49,266 --> 0:16:51,526
Because of the nested structure,

423
00:16:52,156 --> 0:16:54,216
every object can be accessed

424
00:16:54,646 --> 0:16:55,596
through an object path.

425
00:16:56,416 --> 0:16:59,566
In this case, the prim cube is

426
00:16:59,566 --> 0:17:01,606
nested under simple mesh, so its

427
00:16:59,566 --> 0:17:01,606
nested under simple mesh, so its

428
00:17:01,646 --> 0:17:03,916
path becomes /simpleMesh/cube.

429
00:17:06,396 --> 0:17:09,256
This also works with properties,

430
00:17:09,685 --> 0:17:10,596
with the dot notation.

431
00:17:14,996 --> 0:17:16,376
Now that we have seen the basic

432
00:17:16,376 --> 0:17:17,915
file structure, let's take a

433
00:17:17,915 --> 0:17:19,596
look at how it is used to store

434
00:17:19,596 --> 0:17:20,146
scene data.

435
00:17:20,806 --> 0:17:24,665
A scene graph defines the object

436
00:17:24,665 --> 0:17:25,175
hierarchy.

437
00:17:26,195 --> 0:17:28,386
Transforms on a parent also

438
00:17:28,386 --> 0:17:29,186
affect its children.

439
00:17:29,836 --> 0:17:31,876
In this case, we have a cube and

440
00:17:31,876 --> 0:17:35,096
a sphere parented to the cube.

441
00:17:35,206 --> 0:17:37,556
If you move the cube, the sphere

442
00:17:37,556 --> 0:17:38,146
comes along.

443
00:17:38,726 --> 0:17:42,656
If you move the sphere, the cube

444
00:17:42,656 --> 0:17:43,866
stays put.

445
00:17:44,476 --> 0:17:47,396
A scene graph is easy to store

446
00:17:47,516 --> 0:17:48,906
with a nested prim structure of

447
00:17:48,906 --> 0:17:48,996
USD.

448
00:17:48,996 --> 0:17:51,886
You can see the ultra prim of

449
00:17:51,936 --> 0:17:54,526
the parents with the two child

450
00:17:54,526 --> 0:17:56,166
prims, cube and sphere.

451
00:17:56,736 --> 0:18:00,496
You can also see that there are

452
00:17:56,736 --> 0:18:00,496
You can also see that there are

453
00:18:00,496 --> 0:18:02,726
other prims such as materials or

454
00:18:02,726 --> 0:18:04,706
maybe animations that don't

455
00:18:05,016 --> 0:18:05,976
belong to the scene graph.

456
00:18:09,516 --> 0:18:11,026
So that covers scene graphs.

457
00:18:11,926 --> 0:18:16,286
Now let's take a look at mesh

458
00:18:16,346 --> 0:18:16,496
data.

459
00:18:16,496 --> 0:18:18,276
Mesh data can be grouped roughly

460
00:18:18,276 --> 0:18:19,216
in two categories.

461
00:18:19,826 --> 0:18:21,206
Mesh attributes such as

462
00:18:21,206 --> 0:18:23,196
positions, normals, and texture

463
00:18:23,196 --> 0:18:23,756
coordinates.

464
00:18:25,366 --> 0:18:28,046
And mesh connectivity, such as

465
00:18:28,416 --> 0:18:30,836
the numbers of vertices per face

466
00:18:31,186 --> 0:18:33,036
or which vertex indices belong

467
00:18:33,036 --> 0:18:36,866
to a face.

468
00:18:37,076 --> 0:18:38,616
Let's look at that at the simple

469
00:18:38,616 --> 0:18:40,076
example of a tetrahedron.

470
00:18:40,736 --> 0:18:42,556
We start with a set of points,

471
00:18:42,756 --> 0:18:44,116
four points for the tetrahedron.

472
00:18:44,816 --> 0:18:48,936
And each face contains three

473
00:18:48,936 --> 0:18:50,476
vertices, so there are four

474
00:18:50,476 --> 0:18:51,076
triangles.

475
00:18:51,636 --> 0:18:54,666
And for each face, we will also

476
00:18:54,666 --> 0:18:56,416
store the vertex indices.

477
00:18:56,896 --> 0:19:01,236
Next, we'll store normals.

478
00:18:56,896 --> 0:19:01,236
Next, we'll store normals.

479
00:19:01,326 --> 0:19:02,486
And in this case we choose to

480
00:19:02,486 --> 0:19:03,756
store the normals per face.

481
00:19:04,506 --> 0:19:07,186
So there are four normals.

482
00:19:08,066 --> 0:19:11,006
And the USD language for

483
00:19:11,006 --> 0:19:12,666
per-face attributes is uniform.

484
00:19:12,666 --> 0:19:14,656
So the metadata is set to

485
00:19:14,656 --> 0:19:15,336
uniform.

486
00:19:17,796 --> 0:19:19,266
That's also store texture

487
00:19:19,266 --> 0:19:19,876
coordinates.

488
00:19:20,546 --> 0:19:21,856
These are going to be sort as

489
00:19:21,856 --> 0:19:25,286
indexed, mesh attributes, and

490
00:19:25,286 --> 0:19:26,716
the indices are per-face,

491
00:19:27,106 --> 0:19:30,326
per-vertex, and in USDs language

492
00:19:30,326 --> 0:19:36,466
studies face bearing.

493
00:19:36,626 --> 0:19:38,146
Lastly, we'll make sure that

494
00:19:38,146 --> 0:19:40,306
this tetrahedron is rendered as

495
00:19:40,306 --> 0:19:41,786
a polygon and not as a

496
00:19:41,786 --> 0:19:42,776
subdivision surface.

497
00:19:43,276 --> 0:19:46,496
We'll come back to that later.

498
00:19:46,726 --> 0:19:47,616
So now we've seen the scene

499
00:19:47,616 --> 0:19:49,026
graph, and the mesh data, let's

500
00:19:49,026 --> 0:19:50,526
take a look at how materials are

501
00:19:50,526 --> 0:19:50,966
defined.

502
00:19:54,966 --> 0:19:56,786
USD's material definition is

503
00:19:56,786 --> 0:19:57,346
very rich.

504
00:19:57,766 --> 0:19:59,966
It is meant for movie quality

505
00:20:00,206 --> 0:20:00,886
output.

506
00:20:01,586 --> 0:20:02,606
For realistic real-time

507
00:20:02,606 --> 0:20:04,236
rendering, there's a smaller

508
00:20:04,236 --> 0:20:06,376
subset called UsdPreviewSurface.

509
00:20:07,156 --> 0:20:08,626
It's a physically-based material

510
00:20:08,626 --> 0:20:10,706
description and it supports two

511
00:20:10,706 --> 0:20:12,646
workflows, metallic-roughness

512
00:20:13,176 --> 0:20:14,246
and specular-roughness.

513
00:20:14,246 --> 0:20:15,736
We will focus on

514
00:20:15,736 --> 0:20:16,696
metallic-roughness here.

515
00:20:17,306 --> 0:20:20,406
So in this example, the same

516
00:20:20,406 --> 0:20:21,546
gramophone that we saw in

517
00:20:21,546 --> 0:20:24,906
Chloe's demo, we'll first assign

518
00:20:25,006 --> 0:20:26,576
a constant, white color.

519
00:20:27,106 --> 0:20:32,866
Next, we will set normal and

520
00:20:32,866 --> 0:20:35,716
occlusion maps to bring out the

521
00:20:35,716 --> 0:20:36,626
fine details.

522
00:20:40,916 --> 0:20:43,386
Next, let's crank up the

523
00:20:43,956 --> 0:20:45,606
metallic level so it becomes

524
00:20:45,816 --> 0:20:46,446
really shiny.

525
00:20:47,776 --> 0:20:51,576
And we will also add a roughness

526
00:20:51,576 --> 0:20:55,316
map to dull out parts of the

527
00:20:57,286 --> 0:20:57,476
object.

528
00:20:57,626 --> 0:21:00,966
Lastly, we will also set diffuse

529
00:20:57,626 --> 0:21:00,966
Lastly, we will also set diffuse

530
00:21:00,966 --> 0:21:04,536
color and metallic textures.

531
00:21:04,866 --> 0:21:07,316
So with these five textures, we

532
00:21:07,316 --> 0:21:09,006
get the final beautiful

533
00:21:09,006 --> 0:21:10,306
photorealistic look of this

534
00:21:10,306 --> 0:21:10,496
mesh.

535
00:21:11,146 --> 0:21:13,886
So let's see how this is

536
00:21:14,336 --> 0:21:16,596
described in USD.

537
00:21:16,596 --> 0:21:18,736
USD uses a shader node graph

538
00:21:19,076 --> 0:21:21,146
that has separate shader nodes

539
00:21:21,386 --> 0:21:23,346
that are connected to each

540
00:21:25,906 --> 0:21:26,016
other.

541
00:21:26,216 --> 0:21:28,536
UsdPreviewSurface has a very

542
00:21:28,586 --> 0:21:30,256
simple shader node graph

543
00:21:30,256 --> 0:21:32,506
structure, with only four node

544
00:21:32,506 --> 0:21:32,936
types.

545
00:21:34,246 --> 0:21:35,626
The main shader node that

546
00:21:35,626 --> 0:21:37,416
defines all the PBR attributes,

547
00:21:37,416 --> 0:21:38,606
we've seen five of them before.

548
00:21:39,936 --> 0:21:41,526
A texture sampler that tells you

549
00:21:41,526 --> 0:21:44,996
which texture to use, a mesh

550
00:21:44,996 --> 0:21:47,256
attribute reader for example for

551
00:21:47,516 --> 0:21:51,036
the texture coordinates, and a

552
00:21:51,766 --> 0:21:53,686
UV transformed node that allows

553
00:21:53,686 --> 0:21:57,126
you to scale or rotate your

554
00:21:57,126 --> 0:21:57,956
texture coordinates.

555
00:21:58,456 --> 0:21:59,326
Let's take a look at the

556
00:21:59,326 --> 0:22:01,766
simplest material example with a

557
00:21:59,326 --> 0:22:01,766
simplest material example with a

558
00:22:01,766 --> 0:22:03,866
couple of constant-- constants

559
00:22:04,226 --> 0:22:05,916
for the mesh attributes.

560
00:22:09,156 --> 0:22:12,736
We can see here that the main

561
00:22:12,736 --> 0:22:15,096
shader node's surface output is

562
00:22:15,096 --> 0:22:16,726
wired to the material's surface

563
00:22:16,726 --> 0:22:17,146
output.

564
00:22:18,376 --> 0:22:20,126
Here is what it looks like in

565
00:22:20,126 --> 0:22:20,306
USD.

566
00:22:20,306 --> 0:22:22,846
You have the outer nested

567
00:22:23,396 --> 0:22:26,886
material prim with main shader

568
00:22:26,886 --> 0:22:31,206
node prim inside, and the output

569
00:22:31,206 --> 0:22:33,416
of the shader node is wired to

570
00:22:33,416 --> 0:22:35,466
the output of the material using

571
00:22:35,466 --> 0:22:36,686
these object paths that we've

572
00:22:36,686 --> 0:22:37,296
seen before.

573
00:22:38,776 --> 0:22:40,256
Next, let's take a look at a

574
00:22:40,256 --> 0:22:41,686
slightly more complicated

575
00:22:42,096 --> 0:22:44,766
example of a texture assigned to

576
00:22:44,766 --> 0:22:46,006
the diffuse color channel.

577
00:22:46,516 --> 0:22:50,426
We will need a mesh attribute

578
00:22:50,466 --> 0:22:51,226
reader for the texture

579
00:22:51,226 --> 0:22:52,896
coordinates, that's the red

580
00:22:52,896 --> 0:22:55,846
shader node, a texture sampler

581
00:22:56,166 --> 0:22:57,276
for the texture that we want to

582
00:22:57,276 --> 0:23:00,166
apply, it's the orange one, and

583
00:22:57,276 --> 0:23:00,166
apply, it's the orange one, and

584
00:23:01,046 --> 0:23:03,636
the main PBR shader node with

585
00:23:03,676 --> 0:23:05,106
the diffuse color attributes.

586
00:23:09,176 --> 0:23:10,956
This is what it looks like in

587
00:23:10,956 --> 0:23:11,126
USD.

588
00:23:11,126 --> 0:23:13,936
You have the outer material prim

589
00:23:13,936 --> 0:23:18,036
again and then the three shader

590
00:23:18,036 --> 0:23:18,496
nodes.

591
00:23:19,016 --> 0:23:22,766
And the outputs are wired to

592
00:23:22,766 --> 0:23:23,866
some of the inputs of the next

593
00:23:23,866 --> 0:23:24,296
shader node.

594
00:23:24,856 --> 0:23:30,506
OK. So that covers essentials in

595
00:23:31,146 --> 0:23:31,406
USD.

596
00:23:31,456 --> 0:23:33,416
All of these concepts that we

597
00:23:33,416 --> 0:23:36,476
talked about are in a samples

598
00:23:36,476 --> 0:23:38,376
folder where we provided little

599
00:23:38,376 --> 0:23:40,416
sample scripts to create scene

600
00:23:40,416 --> 0:23:43,926
graphs, mesh data, material and

601
00:23:43,956 --> 0:23:45,556
mesh groups, so that you can

602
00:23:45,556 --> 0:23:46,726
assign multiple materials to

603
00:23:46,726 --> 0:23:49,336
single mesh, and even animations

604
00:23:49,376 --> 0:23:51,176
for transform animations and for

605
00:23:51,176 --> 0:23:52,276
skinning and skeletal

606
00:23:52,276 --> 0:23:52,866
animations.

607
00:23:57,826 --> 0:23:59,376
Now that we covered the basic

608
00:23:59,376 --> 0:24:01,046
structure of USD, let's take a

609
00:23:59,376 --> 0:24:01,046
structure of USD, let's take a

610
00:24:01,046 --> 0:24:03,256
look at the main advantages that

611
00:24:03,256 --> 0:24:05,116
set it apart from other formats.

612
00:24:06,976 --> 0:24:08,726
Scalability to complex scenes

613
00:24:09,246 --> 0:24:10,756
and life composition and

614
00:24:10,756 --> 0:24:11,426
collaboration.

615
00:24:17,616 --> 0:24:19,796
For scalability, we will look at

616
00:24:19,796 --> 0:24:21,056
something called subdivision

617
00:24:21,056 --> 0:24:21,676
surfaces.

618
00:24:23,216 --> 0:24:25,046
And for collaboration, we will

619
00:24:25,046 --> 0:24:26,546
look at the composition engine.

620
00:24:27,126 --> 0:24:29,566
So let's start with subdivision

621
00:24:29,566 --> 0:24:30,136
surfaces.

622
00:24:32,146 --> 0:24:33,676
Subdivision surfaces are an

623
00:24:33,676 --> 0:24:35,376
inefficient representation of

624
00:24:35,456 --> 0:24:36,466
curved surfaces.

625
00:24:37,506 --> 0:24:40,026
In contrast, polygonal surface

626
00:24:40,026 --> 0:24:41,416
descriptions are an

627
00:24:41,416 --> 0:24:44,276
approximation of the real curved

628
00:24:44,276 --> 0:24:44,806
surface.

629
00:24:44,996 --> 0:24:47,396
And that approximation bakes in

630
00:24:47,396 --> 0:24:49,606
some assumptions on what a good

631
00:24:49,606 --> 0:24:51,566
approximation is, for example,

632
00:24:51,566 --> 0:24:53,856
how closely you're going to be

633
00:24:53,976 --> 0:24:55,186
to the actual object.

634
00:24:55,856 --> 0:24:58,336
In contrast, subdivision

635
00:24:58,336 --> 0:24:59,776
surfaces described the true

636
00:24:59,776 --> 0:25:00,296
surface.

637
00:24:59,776 --> 0:25:00,296
surface.

638
00:25:00,756 --> 0:25:02,106
So you can do dynamic

639
00:25:02,136 --> 0:25:04,306
tessellation, for example based

640
00:25:04,306 --> 0:25:06,636
on the distance to the camera to

641
00:25:06,966 --> 0:25:08,856
find a good enough approximation

642
00:25:09,516 --> 0:25:12,256
of the true surface with small

643
00:25:12,256 --> 0:25:12,836
polygons.

644
00:25:14,996 --> 0:25:16,666
Subdivision surfaces are also

645
00:25:16,666 --> 0:25:18,466
great for animated content.

646
00:25:19,066 --> 0:25:22,486
And we have been using

647
00:25:22,486 --> 0:25:24,596
subdivision surfaces in the past

648
00:25:24,596 --> 0:25:28,076
couple years, for example, for

649
00:25:28,076 --> 0:25:30,316
an emoji or memoji.

650
00:25:30,956 --> 0:25:34,456
On the left-hand side, you can

651
00:25:34,536 --> 0:25:36,276
see what the subdivision control

652
00:25:36,276 --> 0:25:38,016
mesh would look like if you

653
00:25:38,016 --> 0:25:39,576
rendered it as a polygonal

654
00:25:39,576 --> 0:25:40,106
surface.

655
00:25:40,836 --> 0:25:41,956
You can see that it's fairly

656
00:25:41,956 --> 0:25:44,756
course, which is great in terms

657
00:25:44,756 --> 0:25:46,266
of the memory footprint.

658
00:25:47,356 --> 0:25:49,356
On the right-hand side, you can

659
00:25:49,416 --> 0:25:51,026
see the final subdivided

660
00:25:51,026 --> 0:25:52,466
surface, and you can see the

661
00:25:52,466 --> 0:25:54,316
beautiful details in there.

662
00:25:56,036 --> 0:25:57,486
The industry standard for

663
00:25:57,486 --> 0:25:59,056
subdivision surfaces is

664
00:25:59,056 --> 0:26:01,586
OpenSubdiv and it is also

665
00:25:59,056 --> 0:26:01,586
OpenSubdiv and it is also

666
00:26:01,586 --> 0:26:02,506
developed by Pixar.

667
00:26:03,396 --> 0:26:04,816
We have been working closely

668
00:26:04,816 --> 0:26:07,106
with Pixar to provide metal

669
00:26:07,106 --> 0:26:10,626
shaders that work optimally on

670
00:26:10,626 --> 0:26:11,646
our platforms.

671
00:26:11,996 --> 0:26:14,556
So the GPU evaluation is as fast

672
00:26:15,106 --> 0:26:17,116
as possible.

673
00:26:17,216 --> 0:26:19,846
And OpenSubdiv is the basis for

674
00:26:19,846 --> 0:26:21,496
subdivision surfaces in

675
00:26:21,496 --> 0:26:21,866
Scenekit.

676
00:26:22,136 --> 0:26:27,006
And of course USD has great

677
00:26:27,006 --> 0:26:29,086
support for subdivision surfaces

678
00:26:29,456 --> 0:26:30,496
and it works beautifully with

679
00:26:30,496 --> 0:26:31,126
OpenSubdiv.

680
00:26:32,156 --> 0:26:33,646
In fact, USD has a unified

681
00:26:33,646 --> 0:26:35,686
description for both polygonal

682
00:26:35,686 --> 0:26:37,486
mesh data and subdivision

683
00:26:37,486 --> 0:26:38,066
surface data.

684
00:26:39,096 --> 0:26:40,226
It also has subdivision

685
00:26:40,226 --> 0:26:41,786
specific-- support for

686
00:26:41,786 --> 0:26:43,646
subdivision-specific properties,

687
00:26:43,936 --> 0:26:46,686
such as creases or corners.

688
00:26:50,146 --> 0:26:51,726
So, that concludes subdivision

689
00:26:51,726 --> 0:26:53,726
surfaces, a great and efficient

690
00:26:53,766 --> 0:26:56,476
way to store high quality

691
00:26:56,476 --> 0:26:57,176
surfaces.

692
00:26:57,416 --> 0:27:00,846
Now let's take a look at the

693
00:26:57,416 --> 0:27:00,846
Now let's take a look at the

694
00:27:00,846 --> 0:27:01,726
composition engine.

695
00:27:06,096 --> 0:27:07,926
The composition engine is a

696
00:27:08,096 --> 0:27:10,206
powerful authoring tool that

697
00:27:10,206 --> 0:27:12,136
enables efficient collaboration

698
00:27:12,136 --> 0:27:13,006
between artists.

699
00:27:13,786 --> 0:27:15,736
And we'll take a look at an

700
00:27:15,736 --> 0:27:18,046
example of references.

701
00:27:18,536 --> 0:27:21,826
Here's again the scene graph

702
00:27:22,306 --> 0:27:24,816
with two child objects parented

703
00:27:25,226 --> 0:27:26,526
under a parent node.

704
00:27:27,246 --> 0:27:28,856
And this is an efficient

705
00:27:28,856 --> 0:27:30,676
representation, as long as those

706
00:27:30,756 --> 0:27:31,866
two objects are different.

707
00:27:32,406 --> 0:27:36,836
But what if you have multiple

708
00:27:36,836 --> 0:27:39,416
copies of the same object in

709
00:27:39,416 --> 0:27:40,166
your scene graph?

710
00:27:41,066 --> 0:27:43,516
Then this nested scene graph

711
00:27:43,516 --> 0:27:45,236
structure becomes inefficient

712
00:27:45,236 --> 0:27:47,266
because it stores duplicate

713
00:27:47,266 --> 0:27:47,776
data.

714
00:27:52,916 --> 0:27:56,066
Most filed formats factor out

715
00:27:56,126 --> 0:27:58,446
the duplicate data and store

716
00:27:58,446 --> 0:28:01,746
references instead, and use the

717
00:27:58,446 --> 0:28:01,746
references instead, and use the

718
00:28:01,746 --> 0:28:02,696
support set as well.

719
00:28:03,686 --> 0:28:04,986
But it goes further.

720
00:28:06,196 --> 0:28:10,166
It also creates virtual objects

721
00:28:10,516 --> 0:28:12,906
inside this nested scene graph

722
00:28:12,906 --> 0:28:15,586
prim structure, and each of

723
00:28:15,616 --> 0:28:19,676
these virtual objects has its

724
00:28:19,676 --> 0:28:23,276
own unique object path, so that

725
00:28:23,276 --> 0:28:25,916
you can go in and override some

726
00:28:25,916 --> 0:28:28,086
of its materials-- some of its

727
00:28:28,266 --> 0:28:29,226
properties.

728
00:28:29,516 --> 0:28:31,576
For example, in this case, I

729
00:28:32,356 --> 0:28:34,706
overrode the second spheres

730
00:28:35,326 --> 0:28:38,786
material color to yellow without

731
00:28:38,786 --> 0:28:40,016
affecting the first spheres

732
00:28:40,196 --> 0:28:40,616
material.

733
00:28:44,496 --> 0:28:46,626
You can also remove whole

734
00:28:46,626 --> 0:28:49,256
subtrees from your scene graph.

735
00:28:49,826 --> 0:28:51,886
And USD stores all of these

736
00:28:51,886 --> 0:28:55,356
edits as efficient overrides to

737
00:28:55,356 --> 0:28:56,246
the original data.

738
00:28:56,886 --> 0:29:00,126
Let's take a look at what artist

739
00:28:56,886 --> 0:29:00,126
Let's take a look at what artist

740
00:29:00,126 --> 0:29:01,476
workflows this enables.

741
00:29:01,956 --> 0:29:04,416
This is the finder in macOS

742
00:29:04,416 --> 0:29:04,976
Catalina.

743
00:29:06,156 --> 0:29:09,676
And you can see here macOS Quick

744
00:29:09,676 --> 0:29:13,166
Look rendering a scene, USD

745
00:29:13,166 --> 0:29:13,696
file.

746
00:29:13,986 --> 0:29:16,816
Let's say now, I'm a layout

747
00:29:16,816 --> 0:29:19,866
artist that places all these

748
00:29:19,866 --> 0:29:22,446
objects in the scene.

749
00:29:22,916 --> 0:29:26,756
And at the same time, there's

750
00:29:26,756 --> 0:29:28,346
another artist working on

751
00:29:28,346 --> 0:29:30,136
refining some of these objects,

752
00:29:30,176 --> 0:29:32,036
for example, this chair.

753
00:29:32,566 --> 0:29:35,206
And this artist replaced this

754
00:29:35,206 --> 0:29:39,096
chair object with this one.

755
00:29:40,506 --> 0:29:43,596
Now, if you go back to the

756
00:29:43,596 --> 0:29:46,776
layout file, you can see that

757
00:29:46,776 --> 0:29:47,646
these objects have been

758
00:29:47,646 --> 0:29:49,206
automatically replaced, the file

759
00:29:49,206 --> 0:29:51,026
itself did not change, it pulled

760
00:29:51,026 --> 0:29:51,816
in the references.

761
00:29:52,256 --> 0:29:55,106
And in fact, I can do my own

762
00:29:55,106 --> 0:29:55,626
edits.

763
00:29:56,186 --> 0:30:00,626
For example, changing the color

764
00:29:56,186 --> 0:30:00,626
For example, changing the color

765
00:30:00,906 --> 0:30:02,456
without affecting the other

766
00:30:02,456 --> 0:30:03,626
artists files.

767
00:30:04,226 --> 0:30:07,656
So this allows us to decouple

768
00:30:07,656 --> 0:30:08,846
our workflows from each other.

769
00:30:12,636 --> 0:30:15,046
So this was a quick sneak peek

770
00:30:15,366 --> 0:30:17,916
on all the new artist workflows

771
00:30:17,916 --> 0:30:19,616
that USD can enable.

772
00:30:23,616 --> 0:30:26,336
We have also included two more

773
00:30:26,336 --> 0:30:28,346
examples of these more advanced

774
00:30:28,346 --> 0:30:30,726
USD features in the samples

775
00:30:30,726 --> 0:30:31,096
folder.

776
00:30:32,396 --> 0:30:34,036
Subdivisions surfaces with

777
00:30:34,096 --> 0:30:36,786
creases and references with

778
00:30:36,786 --> 0:30:37,446
overrides.

779
00:30:46,046 --> 0:30:48,166
So, in summary, we have looked

780
00:30:48,166 --> 0:30:49,536
at universal scene description.

781
00:30:49,746 --> 0:30:51,496
It is a file format and a

782
00:30:51,496 --> 0:30:54,716
powerful library for authoring

783
00:30:54,716 --> 0:30:56,476
all the way to deploying 3D

784
00:30:56,476 --> 0:30:56,966
content.

785
00:30:58,516 --> 0:31:00,256
We have looked at workflows to

786
00:30:58,516 --> 0:31:00,256
We have looked at workflows to

787
00:31:00,256 --> 0:31:03,116
create and convert assets to

788
00:31:03,116 --> 0:31:03,236
USDZ.

789
00:31:03,236 --> 0:31:06,006
We introduced a new tool called

790
00:31:06,006 --> 0:31:08,246
usdxconvert that converts obj,

791
00:31:08,246 --> 0:31:10,786
gltf, fbx and other file formats

792
00:31:11,106 --> 0:31:11,546
to USDZ.

793
00:31:11,546 --> 0:31:14,936
And you can download these

794
00:31:14,936 --> 0:31:16,966
Python USDX tools, which include

795
00:31:16,966 --> 0:31:19,156
usdzconver, a precompiled USD

796
00:31:19,156 --> 0:31:21,136
library and the sample scripts

797
00:31:21,266 --> 0:31:21,976
from our website.

798
00:31:27,846 --> 0:31:29,626
For more information, please

799
00:31:29,626 --> 0:31:31,486
check out the session page.

800
00:31:32,356 --> 0:31:34,106
And we will have a lab on USD

801
00:31:34,106 --> 0:31:37,496
and USDZ tomorrow at 3 p.m. And

802
00:31:37,496 --> 0:31:39,156
also check out the advances in

803
00:31:39,156 --> 0:31:41,466
AR Quick Look on Friday at 9:00

804
00:31:42,106 --> 0:31:43,976
a.m.

805
00:31:44,176 --> 0:31:44,516
Thank you.

806
00:31:45,516 --> 0:31:50,500
[ Applause ]
