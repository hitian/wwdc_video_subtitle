1
00:00:06,939 --> 0:00:10,844
（为iOS引入多镜头捕捉）

2
00:00:10,911 --> 0:00:12,212
多镜头捕捉

3
00:00:12,646 --> 0:00:14,481
或者像我们圈内一样喜欢把它叫做

4
00:00:15,048 --> 0:00:16,183
MultiCam

5
00:00:18,151 --> 0:00:21,955
MultiCam是呼声最高的一个

6
00:00:22,022 --> 0:00:24,324
我们年复一年地听到关于它的消息

7
00:00:24,725 --> 0:00:25,826
那么我们今天要讲的是

8
00:00:25,893 --> 0:00:28,795
同时使用多镜头和多路麦克

9
00:00:29,296 --> 0:00:33,634
同时捕捉视频、

10
00:00:33,934 --> 0:00:36,737
音频、元数据、深度和照片

11
00:00:39,173 --> 0:00:41,708
不过第三方并不是唯一一个

12
00:00:42,109 --> 0:00:46,480
我们还收到了许多来自

13
00:00:46,780 --> 0:00:48,015
针对MultiCam捕捉

14
00:00:48,348 --> 0:00:50,083
其中主要的因素是ARKit

15
00:00:50,384 --> 0:00:52,085
如果你看了主题演讲

16
00:00:52,452 --> 0:00:55,022
你一定听到了

17
00:00:55,522 --> 0:00:59,626
这些API使用前置镜头

18
00:00:59,893 --> 0:01:02,462
并同时使用后置镜头追踪周边环境

19
00:00:59,893 --> 0:01:02,462
并同时使用后置镜头追踪周边环境

20
00:01:02,796 --> 0:01:05,899
这会帮助他们了解

21
00:01:06,099 --> 0:01:07,401
通过了解你正在凝望什么

22
00:01:08,836 --> 0:01:11,338
那么自AVFoundation的

23
00:01:11,505 --> 0:01:14,374
我们就已经

24
00:01:14,675 --> 0:01:16,543
可以一直追溯到Lion操作系统

25
00:01:17,077 --> 0:01:18,178
但在iOS上

26
00:01:18,412 --> 0:01:22,449
AVFoundation客户们

27
00:01:22,850 --> 0:01:24,685
并不是因为我们打算这样做

28
00:01:24,885 --> 0:01:26,386
我们有许多很好的理由

29
00:01:26,753 --> 0:01:28,822
第一个理由是硬件限制

30
00:01:29,289 --> 0:01:32,192
我指的是镜头分担了电源的电量

31
00:01:32,593 --> 0:01:35,562
它本身不能提供足够的电量

32
00:01:35,629 --> 0:01:38,131
同时全量支持两个摄像头

33
00:01:38,799 --> 0:01:40,200
第二个理由是

34
00:01:40,834 --> 0:01:43,470
我们期待发布一个可靠的API

35
00:01:43,704 --> 0:01:46,240
可以帮助你不让手机发烫

36
00:01:46,473 --> 0:01:51,144
当多个摄像头同时消耗电源时

37
00:01:51,345 --> 0:01:53,180
因此我们希望能确保

38
00:01:53,247 --> 0:01:54,481
可以帮助你

39
00:01:54,681 --> 0:01:57,718
处理硬件、热量和带宽约束

40
00:01:57,885 --> 0:01:59,686
这在我们的世界中是现实存在的

41
00:02:00,354 --> 0:02:04,758
好的 在iOS 13中有个好消息

42
00:02:05,058 --> 0:02:06,994
并且我们在当前全部硬件上

43
00:02:07,160 --> 0:02:12,533
iPhone XS、XS Max

44
00:02:13,100 --> 0:02:14,635
在全部平台上

45
00:02:14,701 --> 0:02:17,771
前面提到的硬件限制已经解决了

46
00:02:19,473 --> 0:02:21,441
那么让我们直接来看有趣的部分吧

47
00:02:21,508 --> 0:02:25,546
我们开发了一些新API

48
00:02:26,880 --> 0:02:29,583
如你曾用AVFoundation

49
00:02:29,650 --> 0:02:32,286
你一定了解我们有四个主要的类

50
00:02:32,586 --> 0:02:37,090
输出、会话和连接

51
00:02:38,725 --> 0:02:41,562
AVCaptureSession

52
00:02:41,628 --> 0:02:43,463
它用于排列数据

53
00:02:43,797 --> 0:02:46,133
它用于表明开始或停止运行

54
00:02:47,501 --> 0:02:50,971
你把它添加到一个或多个输入中

55
00:02:51,271 --> 0:02:53,674
其中一个这样的是

56
00:02:53,740 --> 0:02:57,044
它要么是摄像头要么是麦克的包装器

57
00:02:58,378 --> 0:03:02,316
你还需要添加一个或多个

58
00:02:58,378 --> 0:03:02,316
你还需要添加一个或多个

59
00:03:02,549 --> 0:03:04,618
否则那些生产出来的东西就无处安置

60
00:03:05,619 --> 0:03:08,589
然后会话以你的名义

61
00:03:08,856 --> 0:03:12,092
在输入和输出之间自动创建连接

62
00:03:12,793 --> 0:03:16,096
请注意 我展示的是iOS上的传统

63
00:03:16,296 --> 0:03:20,167
每个会话只允许一个镜头输入

64
00:03:21,768 --> 0:03:25,873
iOS 13中的新功能是我们引入了

65
00:03:25,939 --> 0:03:28,509
叫做AVCaptureMultiCamSession

66
00:03:29,009 --> 0:03:32,145
允许你执行多个输入和输出

67
00:03:33,480 --> 0:03:36,917
我们并没有抛弃

68
00:03:36,984 --> 0:03:38,218
它不会消失

69
00:03:38,552 --> 0:03:42,356
当前的AVCaptureSession

70
00:03:42,422 --> 0:03:44,224
当你执行单镜头捕捉时

71
00:03:44,625 --> 0:03:47,094
原因是

72
00:03:47,361 --> 0:03:50,430
作为一个强大的工具有一些限制

73
00:03:50,664 --> 0:03:51,965
我稍后会讲到

74
00:03:53,800 --> 0:03:56,937
好的 那么让我给你一个基本用例

75
00:03:57,171 --> 0:03:59,406
针对新的

76
00:03:59,806 --> 0:04:01,608
假如你想对MultiCamSession

77
00:03:59,806 --> 0:04:01,608
假如你想对MultiCamSession

78
00:04:01,675 --> 0:04:03,677
一个用作前置镜头

79
00:04:04,278 --> 0:04:07,848
并同时执行两个视频数据输出

80
00:04:08,148 --> 0:04:11,752
一个设备收到后置镜头的视频流

81
00:04:12,819 --> 0:04:15,889
那么假设如果你想执行实时预览

82
00:04:15,956 --> 0:04:19,760
你可添加独立的VideoPreviewLayers

83
00:04:20,793 --> 0:04:22,095
不过不要止步于此

84
00:04:22,963 --> 0:04:23,897
你可以执行

85
00:04:25,399 --> 0:04:28,502
同时元数据输出 如果你希望

86
00:04:28,569 --> 0:04:31,705
同时执行条形码扫描或面部检测的话

87
00:04:32,506 --> 0:04:34,808
你可以执行电影文件的多个输出

88
00:04:34,875 --> 0:04:37,211
如果你想用一个设备记录前景

89
00:04:37,477 --> 0:04:40,414
你可以添加照片的多个输出

90
00:04:40,747 --> 0:04:43,550
从不同的摄像头

91
00:04:43,884 --> 0:04:46,954
那么正如你所看到的

92
00:04:47,287 --> 0:04:50,190
大量输入和大量输出中

93
00:04:51,425 --> 0:04:54,061
那些小箭头叫做

94
00:04:54,228 --> 0:04:57,164
它们定义了输入到输出的数据流

95
00:04:57,698 --> 0:05:00,067
让我暂时关注一下设备输入

96
00:04:57,698 --> 0:05:00,067
让我暂时关注一下设备输入

97
00:05:00,434 --> 0:05:02,169
从而剖析一下连接

98
00:05:03,570 --> 0:05:07,908
捕捉输入有AVCapture

99
00:05:08,375 --> 0:05:11,512
我喜欢把它看作是个小插座

100
00:05:12,012 --> 0:05:16,316
每个媒体类型都有一个插座

101
00:05:17,184 --> 0:05:18,919
如果端口上没有插入任何东西

102
00:05:19,119 --> 0:05:22,122
那个端口就没有视频流

103
00:05:22,189 --> 0:05:24,057
你必须插点东西才能获得电流

104
00:05:24,558 --> 0:05:27,895
为了找出每个特定的输入

105
00:05:28,228 --> 0:05:31,098
你可以查询那个输入的端口属性

106
00:05:31,265 --> 0:05:34,868
它会告诉你说“我有这些

107
00:05:35,169 --> 0:05:36,370
对于双摄像头来说

108
00:05:36,637 --> 0:05:40,140
它们是以下这些的端口

109
00:05:40,574 --> 0:05:43,977
一个捕捉元数据对象

110
00:05:44,144 --> 0:05:48,048
一个捕捉元数据项

111
00:05:49,550 --> 0:05:52,586
现在无论何时当你使用

112
00:05:52,653 --> 0:05:54,454
来向会话中添加输入

113
00:05:54,721 --> 0:05:58,258
或使用它的添加输出方法

114
00:05:58,926 --> 0:06:01,595
会话都会查找兼容的媒体类型

115
00:05:58,926 --> 0:06:01,595
会话都会查找兼容的媒体类型

116
00:06:01,662 --> 0:06:04,231
和隐藏的表单连接 如果可以的话

117
00:06:04,631 --> 0:06:06,500
因此我们在这里有一个

118
00:06:06,867 --> 0:06:09,736
VideoDataOutput

119
00:06:10,103 --> 0:06:13,040
并且我们有一个电插头可以产生视频

120
00:06:13,240 --> 0:06:15,309
因此会自动进行连接

121
00:06:15,809 --> 0:06:17,945
大多数人都习惯那样

122
00:06:18,178 --> 0:06:20,180
处理

123
00:06:20,247 --> 0:06:21,915
如果你之前曾用过我们的类的话

124
00:06:22,549 --> 0:06:24,818
MultiCamSession

125
00:06:25,452 --> 0:06:28,088
那是因为输入和输出

126
00:06:28,322 --> 0:06:30,991
现在多个输入可以配备多个输出

127
00:06:31,058 --> 0:06:33,560
你很可能想要确保连接发生在

128
00:06:33,861 --> 0:06:37,998
A到A和B到B 而不会在

129
00:06:38,398 --> 0:06:41,168
因此当创建

130
00:06:41,435 --> 0:06:45,672
我们强烈要求你不要使用

131
00:06:46,173 --> 0:06:50,711
而是使用这些特别目的的添加工具

132
00:06:51,011 --> 0:06:53,380
或添加不带任何连接的输出

133
00:06:53,847 --> 0:06:57,017
同样地

134
00:06:57,551 --> 0:06:59,720
你可以用于视频预览层的那些

135
00:07:00,053 --> 0:07:02,723
就是setSessionWithNoConnections

136
00:07:03,056 --> 0:07:06,326
当你使用它们时

137
00:07:06,627 --> 0:07:08,495
“这是输入 这是输出

138
00:07:08,562 --> 0:07:11,265
你现在知道它们了 但请不要碰它们

139
00:07:11,431 --> 0:07:14,568
我稍后会手动添加

140
00:07:15,469 --> 0:07:19,239
添加方式就是自己创建

141
00:07:19,473 --> 0:07:23,710
并告诉它“我希望你把这个

142
00:07:24,044 --> 0:07:26,513
然后告诉会话说“请添加这个连接”

143
00:07:26,780 --> 0:07:27,814
然后一切就绪

144
00:07:29,049 --> 0:07:30,184
我太啰嗦了

145
00:07:30,384 --> 0:07:34,154
演示比口头说说要好的多

146
00:07:34,621 --> 0:07:38,425
他同样来自摄像头软件组 将给大家

147
00:07:38,759 --> 0:07:39,593
Nik？

148
00:07:40,827 --> 0:07:41,662
谢谢Brad

149
00:07:42,362 --> 0:07:43,797
AVMultiCamPIP

150
00:07:43,864 --> 0:07:46,733
用于演示

151
00:07:46,934 --> 0:07:48,669
在这里我们有两个视频预览

152
00:07:48,735 --> 0:07:51,471
一个显示的是前置镜头

153
00:07:51,772 --> 0:07:55,075
当我双击屏幕时

154
00:07:55,409 --> 0:07:56,710
哪个镜头呈现PIP

155
00:08:07,754 --> 0:08:11,692
现在我们可以在这里看到Brad

156
00:08:12,392 --> 0:08:14,561
在我向他提问之前

157
00:08:14,995 --> 0:08:16,897
我会按下底部的录制按钮

158
00:08:17,130 --> 0:08:18,532
稍后再观看这段采访

159
00:08:19,366 --> 0:08:22,169
嘿Brad 那么告诉我

160
00:08:22,636 --> 0:08:25,038
Nik

161
00:08:25,239 --> 0:08:26,874
你可以看到在倒影池前边

162
00:08:26,940 --> 0:08:28,909
正在举办各种活动

163
00:08:29,176 --> 0:08:30,511
我听到了水流的哗哗声

164
00:08:30,811 --> 0:08:32,980
听起来我随时都会被淋湿

165
00:08:33,413 --> 0:08:36,650
我听到我后边有野兽的声音

166
00:08:36,850 --> 0:08:38,919
老实说我非常担忧我在这里的生活

167
00:08:39,186 --> 0:08:40,821
嗯 Brad 那听起来太恐怖了

168
00:08:40,888 --> 0:08:41,889
希望你保持安全

169
00:08:41,955 --> 0:08:42,923
好的 谢谢

170
00:08:43,222 --> 0:08:44,057
录好了

171
00:08:44,558 --> 0:08:46,493
那么现在 我们完成了对电影的录制

172
00:08:46,560 --> 0:08:48,462
让我们看看我们刚刚录下了什么

173
00:08:51,331 --> 0:08:52,499
这是电影

174
00:08:53,033 --> 0:08:56,670
正如你所看到的

175
00:08:56,737 --> 0:09:00,073
就跟我们使用app时一样

176
00:08:56,737 --> 0:09:00,073
就跟我们使用app时一样

177
00:09:00,874 --> 0:09:02,209
这就是AVMultiCamPIP

178
00:09:02,476 --> 0:09:03,343
舞台交还给Brad

179
00:09:07,948 --> 0:09:09,483
谢谢Nik 演示很棒

180
00:09:11,385 --> 0:09:14,922
好的 那么让我们看看

181
00:09:15,422 --> 0:09:18,158
那么我们有两个设备输入

182
00:09:18,425 --> 0:09:19,626
一个是后置镜头的输入

183
00:09:20,427 --> 0:09:23,697
不带任何连接

184
00:09:23,864 --> 0:09:28,302
我们还有两个视频数据输出

185
00:09:28,735 --> 0:09:30,204
还有两个VideoPreviewLayers

186
00:09:30,437 --> 0:09:32,940
只需要把那些

187
00:09:33,207 --> 0:09:37,845
把一个放在另一个的上层

188
00:09:38,212 --> 0:09:39,780
当Nik双击它们时

189
00:09:40,013 --> 0:09:43,217
我们要简单地重定位它们

190
00:09:43,617 --> 0:09:47,221
在Metal Shader Compositor代码中

191
00:09:47,554 --> 0:09:50,090
它合成了那两个

192
00:09:50,357 --> 0:09:54,127
从而把较小的PIP

193
00:09:54,394 --> 0:09:57,531
因此它是把它们

194
00:09:57,831 --> 0:09:59,900
然后把它们发送给

195
00:10:00,133 --> 0:10:03,036
在AVAssetWriter中

196
00:10:03,637 --> 0:10:06,173
你现在可以使用这段示例代码了

197
00:10:06,440 --> 0:10:07,774
它与研讨会相关联

198
00:10:07,841 --> 0:10:10,978
你可以查看并开始做

199
00:10:12,446 --> 0:10:15,048
好的 是时候谈谈限制了

200
00:10:15,115 --> 0:10:18,352
虽然AVMultiCamSession

201
00:10:18,652 --> 0:10:19,987
但它并不能实现一切功能

202
00:10:20,287 --> 0:10:22,689
让我来告诉你它不能做什么

203
00:10:24,057 --> 0:10:28,061
首先你不能假装一个镜头是两个镜头

204
00:10:28,595 --> 0:10:32,065
AVCaptureDeviceInput API会让你

205
00:10:32,132 --> 0:10:35,302
创建为比如说后置镜头创建多个实例

206
00:10:35,536 --> 0:10:36,970
如果你想的话 你可以做十个

207
00:10:37,271 --> 0:10:41,475
但如果你尝试把全部实例添加到一个

208
00:10:42,176 --> 0:10:43,810
并且会引发异常

209
00:10:44,578 --> 0:10:47,948
在会话中

210
00:10:48,916 --> 0:10:51,185
同时你也不可以克隆镜头

211
00:10:51,451 --> 0:10:53,487
来获得两个同样类型的输出

212
00:10:53,954 --> 0:10:59,126
比如把一个镜头的信号

213
00:10:59,593 --> 0:11:01,895
当然了 你可以添加多个镜头

214
00:10:59,593 --> 0:11:01,895
当然了 你可以添加多个镜头

215
00:11:01,962 --> 0:11:04,631
并把每一个都连接到一个

216
00:11:04,865 --> 0:11:07,100
但你不能散开 不能一对多

217
00:11:10,537 --> 0:11:13,974
反之也不可以

218
00:11:14,508 --> 0:11:18,145
AVCapture在iOS上

219
00:11:18,545 --> 0:11:21,715
因此所有数据输出

220
00:11:22,282 --> 0:11:24,818
你不可以 比如说

221
00:11:24,885 --> 0:11:27,621
挤压为一个单一数据输出

222
00:11:27,688 --> 0:11:29,456
它不知道如何处理第二个视频

223
00:11:29,523 --> 0:11:31,225
因为它不知道如何混合它们

224
00:11:31,792 --> 0:11:34,828
当然 你可以使用

225
00:11:35,195 --> 0:11:37,865
然后在你自己的代码中

226
00:11:37,931 --> 0:11:41,101
比如我们在MultiCamPIP中

227
00:11:41,568 --> 0:11:42,970
不管怎样做都可以

228
00:11:43,237 --> 0:11:45,172
只要考虑到会话创建就好

229
00:11:45,239 --> 0:11:48,041
不要尝试把多镜头

230
00:11:49,443 --> 0:11:51,311
好的 提一下预设

231
00:11:52,412 --> 0:11:56,149
传统的AVCaptureSession

232
00:11:56,483 --> 0:12:00,320
给整个会话规定一个

233
00:11:56,483 --> 0:12:00,320
给整个会话规定一个

234
00:12:01,255 --> 0:12:04,191
它应用于那个会话内的

235
00:12:04,424 --> 0:12:07,828
比如当你把

236
00:12:08,795 --> 0:12:12,232
会话配置设备的分辨率和帧频

237
00:12:12,666 --> 0:12:15,068
以及全部输出 从而使它们提交

238
00:12:15,135 --> 0:12:18,672
一个高频时的视频体验

239
00:12:21,742 --> 0:12:24,111
预设对于MultiCamSession来说

240
00:12:24,878 --> 0:12:27,347
再想想一些诸如此类的东西

241
00:12:29,082 --> 0:12:33,086
MultiCamSession

242
00:12:33,387 --> 0:12:35,923
整个都是高品质意味着什么呢？

243
00:12:36,223 --> 0:12:38,458
你可能想在图表的不同分支上

244
00:12:38,792 --> 0:12:40,460
执行不同的服务品质

245
00:12:40,928 --> 0:12:43,664
比如在前置镜头上 你可能只想执行

246
00:12:43,931 --> 0:12:46,466
一个低分辨率预览

247
00:12:47,334 --> 0:12:49,636
而同时在后置镜头上执行

248
00:12:49,803 --> 0:12:53,073
非常高品质的预览

249
00:12:53,440 --> 0:12:57,077
嗯 很明显 我们没有针对

250
00:12:57,911 --> 0:13:00,981
我们决定在MultiCamSession中

251
00:12:57,911 --> 0:13:00,981
我们决定在MultiCamSession中

252
00:13:01,381 --> 0:13:02,950
它不支持预设

253
00:13:03,016 --> 0:13:07,487
它支持一个也只支持一个预设

254
00:13:07,855 --> 0:13:11,892
那么那意味着当你添加输入和输出时

255
00:13:12,192 --> 0:13:14,828
你必须自己配置活动格式

256
00:13:17,798 --> 0:13:20,234
好的 再谈谈消耗函数

257
00:13:20,868 --> 0:13:24,238
我在开始就提到过我们花了很多时间

258
00:13:24,304 --> 0:13:27,407
因为我们希望提交一个

259
00:13:27,841 --> 0:13:31,445
可以帮助你解决在运行多摄像头

260
00:13:31,678 --> 0:13:34,214
和点亮手机上每一个区块

261
00:13:34,581 --> 0:13:35,883
所付出的各种代价

262
00:13:39,520 --> 0:13:41,321
那么这很老套 但却是事实

263
00:13:42,022 --> 0:13:43,924
天下没有免费的午餐

264
00:13:43,991 --> 0:13:47,528
那么在研讨会的这个部分

265
00:13:48,362 --> 0:13:49,730
我要跟你们做一次

266
00:13:50,898 --> 0:13:53,567
在接下来的经验传授中

267
00:13:54,034 --> 0:13:56,170
以及你要如何对你的钱负责

268
00:13:56,436 --> 0:14:00,407
并用你的方式生活

269
00:13:56,436 --> 0:14:00,407
并用你的方式生活

270
00:14:01,508 --> 0:14:05,512
那么生活的现实就是我们在iOS上

271
00:14:06,113 --> 0:14:09,516
然而我们有多个摄像头

272
00:14:09,850 --> 0:14:13,654
但我们只有一个ISP

273
00:14:14,388 --> 0:14:17,591
因此流过这些传感器的全部像素

274
00:14:17,925 --> 0:14:21,995
都要由一个ISP来处理

275
00:14:22,462 --> 0:14:27,234
它限制了每个给定的时钟频率

276
00:14:28,068 --> 0:14:30,637
因此限制了

277
00:14:30,704 --> 0:14:32,973
一次可以运行多少像素

278
00:14:33,507 --> 0:14:37,878
硬件增加消耗正如你所期待的那样

279
00:14:38,312 --> 0:14:41,014
较高的分辨率意味着可以填充

280
00:14:41,615 --> 0:14:42,950
最大帧频

281
00:14:43,217 --> 0:14:45,152
如果像素提交的速度更快

282
00:14:45,219 --> 0:14:47,654
那么时钟频率的像素就越多

283
00:14:48,956 --> 0:14:51,091
还有第三个

284
00:14:51,158 --> 0:14:52,526
叫做传感器装箱

285
00:14:53,694 --> 0:14:56,930
传感器装箱指的是在相邻像素中

286
00:14:56,997 --> 0:14:59,266
用于减少带宽

287
00:14:59,766 --> 0:15:01,435
那么比如说这里有一张图片

288
00:14:59,766 --> 0:15:01,435
那么比如说这里有一张图片

289
00:15:01,768 --> 0:15:03,504
我们执行一次二乘二装箱

290
00:15:03,804 --> 0:15:07,741
它会拥有四个像素方格

291
00:15:08,275 --> 0:15:11,345
从而尺寸上就缩减了4x

292
00:15:11,778 --> 0:15:13,614
它为你减少了噪音

293
00:15:14,147 --> 0:15:15,949
它为你减少了带宽

294
00:15:16,350 --> 0:15:19,086
它为每个像素提供4x强度

295
00:15:19,520 --> 0:15:21,522
那么传感器装箱还有许多好处

296
00:15:21,889 --> 0:15:25,592
负面消息是图像品质稍差

297
00:15:25,859 --> 0:15:28,295
那么对角线可能看起来

298
00:15:28,962 --> 0:15:33,767
但它做出了补偿

299
00:15:34,501 --> 0:15:37,171
事实上无论何时

300
00:15:37,371 --> 0:15:41,408
你就正在使用装箱格式

301
00:15:41,475 --> 0:15:44,211
从而节省功率去实现

302
00:15:44,278 --> 0:15:45,212
你想要实现的其它有意思的AR功能

303
00:15:46,246 --> 0:15:50,184
好的 我们该如何解释消耗

304
00:15:50,751 --> 0:15:52,953
MultiCamSession

305
00:15:53,020 --> 0:15:54,555
结算硬件消耗

306
00:15:54,988 --> 0:15:56,557
因此每一次当你修改了什么东西时

307
00:15:56,957 --> 0:16:00,160
它会持续追踪它

308
00:15:56,957 --> 0:16:00,160
它会持续追踪它

309
00:16:00,527 --> 0:16:02,396
或逛在线商店一样

310
00:16:02,462 --> 0:16:04,765
把东西都放在购物车上

311
00:16:05,032 --> 0:16:07,668
你知道何时会接近预算的极限

312
00:16:07,901 --> 0:16:09,703
并且你可以比如说把东西丢掉

313
00:16:10,137 --> 0:16:12,239
然后放进新东西或去掉那些旧东西

314
00:16:12,306 --> 0:16:14,241
你在付款之前能看到费用

315
00:16:14,708 --> 0:16:16,710
这对于MultiCamSession来说

316
00:16:17,177 --> 0:16:20,647
我们有一个新属性叫做

317
00:16:21,381 --> 0:16:24,451
当你创建一个全新的会话时

318
00:16:25,485 --> 0:16:29,590
并随着你添加更多的功能、

319
00:16:30,390 --> 0:16:32,826
只要处于1.0以下就没什么问题

320
00:16:33,293 --> 0:16:35,395
1.0以下一切都运行无误

321
00:16:36,496 --> 0:16:39,733
只要你达到1.0及以上

322
00:16:40,167 --> 0:16:43,036
那是因为ISP带宽限制很严格

323
00:16:43,437 --> 0:16:44,571
它不像你可以

324
00:16:45,372 --> 0:16:47,341
你知道的 每隔一帧提交一次

325
00:16:47,641 --> 0:16:49,843
不 这是一个

326
00:16:50,043 --> 0:16:51,879
你要么能实现或要么不能实现

327
00:16:52,179 --> 0:16:54,581
因此如果你超过了1.0

328
00:16:54,915 --> 0:16:57,718
AVCaptureMultiCamSession

329
00:16:58,085 --> 0:16:59,753
它会给你一个通知

330
00:17:00,020 --> 0:17:03,490
关于运行时间报错的通知

331
00:17:03,557 --> 0:17:05,459
是因为硬件消耗超出

332
00:17:08,628 --> 0:17:11,064
现在你很可能正在思考

333
00:17:11,732 --> 0:17:15,002
最显而易见的方式就是

334
00:17:15,636 --> 0:17:18,739
另一种方式就是

335
00:17:19,540 --> 0:17:21,842
如果在同一个分辨率上有装箱格式

336
00:17:21,909 --> 0:17:23,042
那就选那个

337
00:17:23,277 --> 0:17:26,246
虽然品质有点儿低 但功率也低

338
00:17:27,714 --> 0:17:30,951
接下来你可能会想降低帧频会有帮助

339
00:17:32,085 --> 0:17:32,953
但并不会

340
00:17:33,720 --> 0:17:35,822
原因是

341
00:17:36,223 --> 0:17:39,293
允许你在运行时修改帧频

342
00:17:39,693 --> 0:17:42,095
并且我认为是自iOS 4起

343
00:17:42,596 --> 0:17:44,898
就开始允许你这样做了

344
00:17:45,566 --> 0:17:49,036
那么你可能会说

345
00:17:49,736 --> 0:17:52,706
你仍然需要付出120的消耗

346
00:17:52,773 --> 0:17:54,508
因为在运行时的任意一点上

347
00:17:54,575 --> 0:17:56,910
你可能会把帧频增加到120

348
00:17:56,977 --> 0:17:58,645
我们必须考虑到最糟糕的情况

349
00:17:59,613 --> 0:18:01,315
但有个好消息

350
00:17:59,613 --> 0:18:01,315
但有个好消息

351
00:18:01,381 --> 0:18:05,352
我们在AVCaptureDeviceInput上

352
00:18:06,086 --> 0:18:10,224
通过设置它

353
00:18:10,290 --> 0:18:12,125
低帧频格式

354
00:18:12,559 --> 0:18:17,231
通过承诺

355
00:18:19,900 --> 0:18:23,570
这是API中的混淆点

356
00:18:23,637 --> 0:18:25,572
我们不会把帧频看作是比率

357
00:18:25,639 --> 0:18:27,107
我们把它们看作是持续时间

358
00:18:27,341 --> 0:18:31,411
因此要设置帧频

359
00:18:31,478 --> 0:18:32,813
这对于帧频来说一样

360
00:18:33,146 --> 0:18:36,950
如果你想把60 FPS格式

361
00:18:37,518 --> 0:18:41,889
通过做一个CMTime实现

362
00:18:42,256 --> 0:18:47,895
然后把deviceInput的videoMinFram

363
00:18:48,228 --> 0:18:50,731
恭喜你 你已经把60 FPS格式

364
00:18:50,797 --> 0:18:53,901
转成30 FPS格式 你只付出了

365
00:18:56,336 --> 0:19:00,007
我还要提一下 在AVMultiCamPIP

366
00:18:56,336 --> 0:19:00,007
我还要提一下 在AVMultiCamPIP

367
00:19:00,073 --> 0:19:04,278
演示了如何反复地缩减消耗

368
00:19:04,578 --> 0:19:07,981
它是个递归函数

369
00:19:08,382 --> 0:19:11,251
并限制那些比较不重要的东西

370
00:19:11,318 --> 0:19:12,819
直到低于硬件消耗为止

371
00:19:13,787 --> 0:19:15,756
接下来是系统压力消耗

372
00:19:15,822 --> 0:19:18,959
这是我们发现的第二个消耗

373
00:19:19,760 --> 0:19:20,761
相信也你清楚地知道

374
00:19:21,628 --> 0:19:23,730
手机是非常强大的计算器

375
00:19:23,797 --> 0:19:27,034
它是一个小的、面临热挑战的设备

376
00:19:27,668 --> 0:19:32,739
并在在iOS 11中我们引入了

377
00:19:33,307 --> 0:19:35,809
帮助你监控摄像头的当前状况

378
00:19:37,044 --> 0:19:39,112
设想系统压力包含

379
00:19:39,713 --> 0:19:43,083
系统温度 全部OS热峰值功率

380
00:19:44,351 --> 0:19:47,221
那与电池有关

381
00:19:47,554 --> 0:19:49,456
它目前有多少余额呢？

382
00:19:49,957 --> 0:19:52,693
它是否可以足够迅速地

383
00:19:52,759 --> 0:19:56,063
以满足运行需求呢

384
00:19:56,964 --> 0:19:59,299
还有红外线探照灯温度

385
00:19:59,933 --> 0:20:02,202
在支持TrueDepth摄像头

386
00:19:59,933 --> 0:20:02,202
在支持TrueDepth摄像头

387
00:20:02,269 --> 0:20:04,938
我们有红外摄像头以及RGB摄像头

388
00:20:05,105 --> 0:20:06,640
嗯 那会产生它自己的热量

389
00:20:06,707 --> 0:20:09,676
那也给系统压力状态

390
00:20:12,346 --> 0:20:15,749
其中五个自始至终

391
00:20:16,283 --> 0:20:19,453
当系统压力状态是标准时

392
00:20:19,520 --> 0:20:20,487
你可以做一切你想做的事

393
00:20:20,921 --> 0:20:23,857
当它是合理时 你还可以继续

394
00:20:24,291 --> 0:20:26,660
但如果它是严重时

395
00:20:26,727 --> 0:20:28,262
系统即将减慢速度

396
00:20:28,896 --> 0:20:31,431
意味着GPU循环数量变少了

397
00:20:31,498 --> 0:20:35,035
可能会降低品质

398
00:20:35,502 --> 0:20:38,272
如果是危险状态 会有一大堆节制

399
00:20:38,338 --> 0:20:42,776
如果是关机

400
00:20:43,110 --> 0:20:44,912
害怕会伤害硬件

401
00:20:45,078 --> 0:20:48,482
在关机情况下我们将自动中断

402
00:20:48,949 --> 0:20:52,085
并告诉你由于系统压力状态不好

403
00:20:52,452 --> 0:20:55,689
然后我们等待设备

404
00:20:55,756 --> 0:20:57,424
然后才会让你再次运行摄像头

405
00:20:58,725 --> 0:21:01,195
那么这是iOS 11

406
00:20:58,725 --> 0:21:01,195
那么这是iOS 11

407
00:21:01,595 --> 0:21:03,130
在iOS 13中

408
00:21:03,497 --> 0:21:08,202
我们提供一种可以提前了解

409
00:21:08,602 --> 0:21:11,171
我们不仅告诉你当前所发生的

410
00:21:11,505 --> 0:21:13,640
可能会受到重启摄像头之前

411
00:21:14,007 --> 0:21:16,376
产生冲突的事实的影响

412
00:21:17,044 --> 0:21:19,913
我们现在有一种方式

413
00:21:19,980 --> 0:21:23,383
以及系统压力是多少

414
00:21:23,884 --> 0:21:25,986
因此增加消耗的东西

415
00:21:26,053 --> 0:21:27,855
与硬件消耗增加一样

416
00:21:28,055 --> 0:21:29,456
还有许多其它的东西

417
00:21:29,857 --> 0:21:32,359
比如视频图像稳定性

418
00:21:32,860 --> 0:21:34,628
或光学图像稳定性

419
00:21:34,695 --> 0:21:36,363
这些全都需要消耗电源

420
00:21:36,697 --> 0:21:38,799
我们有一个

421
00:21:39,032 --> 0:21:40,601
这里所列出的一切

422
00:21:40,667 --> 0:21:43,303
都会增加整个系统的压力消耗

423
00:21:45,272 --> 0:21:49,142
MultiCamSession可提前计算该分值

424
00:21:50,010 --> 0:21:53,046
并且它会考虑到它所了解的因素

425
00:21:53,280 --> 0:21:56,917
因此如果你要同时执行一些

426
00:21:57,317 --> 0:21:58,752
分值将不会包含它

427
00:21:58,819 --> 0:22:00,921
它只包含你通过摄像头所做的事

428
00:21:58,819 --> 0:22:00,921
它只包含你通过摄像头所做的事

429
00:22:03,023 --> 0:22:03,924
这是如何使用它

430
00:22:05,125 --> 0:22:07,327
通过查询系统压力消耗

431
00:22:07,528 --> 0:22:10,831
你可以了解在一个否则静态系统中

432
00:22:11,131 --> 0:22:13,534
还能正常运行多久

433
00:22:13,834 --> 0:22:17,104
因此如果它小于1.0

434
00:22:17,171 --> 0:22:18,205
你是一个很酷的客户

435
00:22:18,839 --> 0:22:20,240
如果它在1和2之间

436
00:22:20,507 --> 0:22:22,576
你应该最多可以运行15分钟

437
00:22:22,943 --> 0:22:25,078
如果在2和3之间 最多10分钟

438
00:22:25,512 --> 0:22:29,149
如果高于3

439
00:22:29,783 --> 0:22:33,287
事实上 即使你超过3

440
00:22:33,720 --> 0:22:36,823
但你必须了解它不会保持太长时间

441
00:22:37,124 --> 0:22:39,626
一旦它上升到危险或关机层级

442
00:22:39,860 --> 0:22:41,662
会话将被中断

443
00:22:41,728 --> 0:22:43,830
我们要拯救硬件 即使你不想

444
00:22:43,897 --> 0:22:46,733
但 嘿 这很棒

445
00:22:47,034 --> 0:22:49,036
完成你想要完成的事情的话

446
00:22:49,102 --> 0:22:51,405
但要付出非常非常高的系统压力消耗

447
00:22:51,605 --> 0:22:52,739
务必要这样做

448
00:22:55,108 --> 0:22:57,711
现在该如何在运行时

449
00:22:57,778 --> 0:22:59,913
我不是指会话的配置

450
00:22:59,980 --> 0:23:02,616
我说的是一旦你已经开始运行

451
00:22:59,980 --> 0:23:02,616
我说的是一旦你已经开始运行

452
00:23:02,783 --> 0:23:05,552
并且你注意到你已经开始增加

453
00:23:05,719 --> 0:23:08,288
最迅速、最简单的方法就是

454
00:23:08,622 --> 0:23:11,258
那会立即减轻系统压力

455
00:23:11,725 --> 0:23:14,261
同时 如果你正在做一些

456
00:23:14,528 --> 0:23:17,531
耗费GPU或CPU的操作

457
00:23:18,465 --> 0:23:21,802
还有最后一招 你可以尝试

458
00:23:21,869 --> 0:23:24,204
禁用你正在使用的一个

459
00:23:25,005 --> 0:23:28,976
AVMultiCamSession

460
00:23:29,343 --> 0:23:30,410
当运行时

461
00:23:30,777 --> 0:23:34,481
你可以禁用其中一个摄像头

462
00:23:34,548 --> 0:23:35,949
我们不会把所有摄像头都关掉

463
00:23:36,316 --> 0:23:38,352
因此如果你正在运行前后摄像头

464
00:23:38,418 --> 0:23:41,788
你注意到你即将超出预算

465
00:23:42,322 --> 0:23:44,491
你可以选择关闭前置摄像头

466
00:23:44,558 --> 0:23:46,026
后置摄像头将继续预览

467
00:23:46,093 --> 0:23:48,428
它不会丢失它的焦点、曝光或白平衡

468
00:23:48,929 --> 0:23:53,166
并且当你关闭你想禁用的摄像头上的

469
00:23:53,567 --> 0:23:55,569
最后一个活跃的输入端口时

470
00:23:55,769 --> 0:23:59,206
通过把它输入端口的启动属性

471
00:23:59,773 --> 0:24:02,743
我们将终止摄像头的视频流

472
00:23:59,773 --> 0:24:02,743
我们将终止摄像头的视频流

473
00:24:03,010 --> 0:24:04,912
为系统提供一次冷却的机会

474
00:24:07,014 --> 0:24:09,950
好的 那么我刚讲了

475
00:24:10,017 --> 0:24:11,451
硬件消耗和系统压力消耗

476
00:24:12,152 --> 0:24:14,188
还有一些

477
00:24:14,254 --> 0:24:16,256
如果你不希望欺骗自己相信

478
00:24:16,323 --> 0:24:18,091
没有其它可以增加消耗的功能

479
00:24:18,158 --> 0:24:20,661
当然会有其它消耗 比如内存

480
00:24:21,061 --> 0:24:23,964
但在iOS 13中我们人为地限制

481
00:24:24,231 --> 0:24:27,067
设备组合 我们允许你运行

482
00:24:27,301 --> 0:24:31,638
我们认为可以正常运行

483
00:24:32,873 --> 0:24:36,877
因此我们对所支持的

484
00:24:37,144 --> 0:24:40,214
我列出了在iPhone XS上

485
00:24:40,514 --> 0:24:42,850
这有点儿像视力表

486
00:24:42,916 --> 0:24:44,117
你稍后可以暂停视频

487
00:24:44,418 --> 0:24:46,053
但有六个所支持的配置

488
00:24:46,119 --> 0:24:48,088
并且你要记住的简单规则就是

489
00:24:48,155 --> 0:24:50,824
你不可以同时运行两个物理摄像头

490
00:24:51,258 --> 0:24:54,661
你可能会问比如

491
00:24:54,728 --> 0:24:56,129
只有一个复选框

492
00:24:56,496 --> 0:24:58,065
因为它是双摄像头

493
00:24:58,131 --> 0:25:00,234
并且双摄像头是一种软件摄像头

494
00:24:58,131 --> 0:25:00,234
并且双摄像头是一种软件摄像头

495
00:25:00,300 --> 0:25:02,769
它实际上包含广角和远距镜头

496
00:25:02,836 --> 0:25:04,438
因此它是两个物理摄像头

497
00:25:05,739 --> 0:25:07,808
如何了解是否支持

498
00:25:08,008 --> 0:25:10,344
正如我所说过的那样

499
00:25:10,677 --> 0:25:15,249
因此你需要查看

500
00:25:15,315 --> 0:25:16,416
是否允许你在你所拥有的设备上

501
00:25:16,984 --> 0:25:19,419
有一个类方法叫做

502
00:25:19,486 --> 0:25:21,955
你可以立刻决定是或否

503
00:25:22,856 --> 0:25:24,324
然后进一步当你想决定

504
00:25:24,391 --> 0:25:27,027
我是否可以一起运行这个设备组合时

505
00:25:27,427 --> 0:25:30,130
你可以对你感兴趣的设备创建一个

506
00:25:30,364 --> 0:25:33,901
然后请求它的新属性

507
00:25:34,168 --> 0:25:36,503
supportedMultiCamDeviceSets

508
00:25:36,737 --> 0:25:39,573
这将生成大量无序集合

509
00:25:39,773 --> 0:25:42,109
那会告诉你可以同时使用哪些组合

510
00:25:42,976 --> 0:25:47,614
接下来是我们人为限制

511
00:25:47,681 --> 0:25:48,682
你可以运行的格式

512
00:25:49,316 --> 0:25:53,120
我刚查看的在iPhone XS中

513
00:25:53,320 --> 0:25:55,756
与后置摄像头有关的有40多种格式

514
00:25:55,822 --> 0:25:57,257
因此可以选择的格式有很多很多

515
00:25:57,457 --> 0:25:59,393
但我们限制

516
00:25:59,459 --> 0:26:01,195
有MultiCamSession

517
00:25:59,459 --> 0:26:01,195
有MultiCamSession

518
00:26:01,395 --> 0:26:03,830
因为这些是我们可以随心所欲地

519
00:26:03,897 --> 0:26:06,466
在终端设备上同时运行的格式

520
00:26:06,934 --> 0:26:08,302
这有点儿像视力表

521
00:26:08,368 --> 0:26:10,204
但我希望你们注意一下组

522
00:26:11,071 --> 0:26:12,906
第一组是装箱格式

523
00:26:13,106 --> 0:26:15,509
还记得吗？低功率 是的

524
00:26:15,676 --> 0:26:18,212
在传感器上

525
00:26:18,278 --> 0:26:20,080
因此你收获了非常低的功率

526
00:26:20,781 --> 0:26:22,983
低于60 FPS时全部这些都可用

527
00:26:23,050 --> 0:26:27,354
你可以从640乘480

528
00:26:28,789 --> 0:26:32,025
下一组是

529
00:26:32,092 --> 0:26:33,927
这是一种非装箱格式

530
00:26:34,161 --> 0:26:35,863
与你对常规传统会话

531
00:26:35,929 --> 0:26:39,299
选择高预设时的格式一样

532
00:26:39,766 --> 0:26:41,835
它对MultiCam可用

533
00:26:42,169 --> 0:26:46,607
最后一组是1920乘1440

534
00:26:47,007 --> 0:26:49,476
这是一个很好的图片格式的替换格式

535
00:26:49,943 --> 0:26:53,680
我们并不是在所有摄像头上

536
00:26:53,981 --> 0:26:56,416
那对于手机来说是一件糟糕的事

537
00:26:56,750 --> 0:27:00,587
但我们允许你以30 FPS执行

538
00:26:56,750 --> 0:27:00,587
但我们允许你以30 FPS执行

539
00:27:00,654 --> 0:27:04,358
请注意 它仍然允许你执行

540
00:27:04,691 --> 0:27:06,360
因此这是一个很好的代理

541
00:27:06,660 --> 0:27:11,031
当你想通过多摄像头同时摄像时

542
00:27:13,100 --> 0:27:16,270
现在你要如何了解某格式是否支持

543
00:27:16,336 --> 0:27:17,304
你只需要问它就可以了

544
00:27:17,604 --> 0:27:20,974
因此当在格式之间迭代时 你可以说

545
00:27:21,375 --> 0:27:22,876
如果它支持 你就可以使用它

546
00:27:23,343 --> 0:27:26,513
在这里的代码中

547
00:27:26,780 --> 0:27:29,550
并选择下一个支持

548
00:27:29,850 --> 0:27:33,287
然后把它设置为我的活动格式

549
00:27:35,189 --> 0:27:37,357
我们进行人为限制的还有最后一点

550
00:27:37,858 --> 0:27:40,727
因为我们需要报告消耗

551
00:27:40,894 --> 0:27:43,830
由MultiCamSession

552
00:27:44,331 --> 0:27:46,867
在iOS上我们明确不支持

553
00:27:47,134 --> 0:27:50,404
app中多摄像头的多重会话

554
00:27:50,470 --> 0:27:52,873
并且同时我们也不支持

555
00:27:52,940 --> 0:27:55,008
多个应用中的多摄像头

556
00:27:55,242 --> 0:27:59,580
请注意iOS上的支持

557
00:27:59,880 --> 0:28:02,249
但当然了

558
00:27:59,880 --> 0:28:02,249
但当然了

559
00:28:03,984 --> 0:28:06,086
那么我的经验传授结束了

560
00:28:06,587 --> 0:28:07,821
好的 写不错的代码

561
00:28:08,288 --> 0:28:09,356
11点前要回家

562
00:28:09,623 --> 0:28:11,058
如果你的计划有变 给我打电话

563
00:28:12,125 --> 0:28:12,993
好的

564
00:28:13,460 --> 0:28:15,162
好的 现在让我们返回到

565
00:28:16,363 --> 0:28:17,531
同步视频流

566
00:28:19,833 --> 0:28:21,902
我提到了软件摄像头

567
00:28:22,169 --> 0:28:25,939
一个软件摄像头有两个镜头

568
00:28:26,306 --> 0:28:29,409
现在它也在iPhone XS

569
00:28:29,977 --> 0:28:32,513
TrueDepth摄像头

570
00:28:32,579 --> 0:28:33,714
因为它由

571
00:28:34,147 --> 0:28:36,683
一个红外摄像头

572
00:28:36,950 --> 0:28:40,921
这就能利用这两者的不同之处

573
00:28:42,022 --> 0:28:46,126
我们从未

574
00:28:46,627 --> 0:28:47,728
但我们现在要这样做

575
00:28:47,794 --> 0:28:50,297
在iOS 13中我们把它们叫做

576
00:28:50,864 --> 0:28:52,232
DualCam就是其中一种

577
00:28:52,666 --> 0:28:55,369
它一次呈现一个视频流

578
00:28:55,969 --> 0:29:00,073
并根据你的缩放系数转换

579
00:28:55,969 --> 0:29:00,073
并根据你的缩放系数转换

580
00:29:00,140 --> 0:29:02,176
如果你接近2x

581
00:29:02,242 --> 0:29:05,412
它会转换成远距摄像头

582
00:29:05,779 --> 0:29:07,581
它还能针对深度出奇招

583
00:29:07,748 --> 0:29:11,818
因为它有两个图像

584
00:29:12,319 --> 0:29:13,520
但从你的角度来说

585
00:29:13,587 --> 0:29:16,089
你依然只能一次获得一个视频流

586
00:29:17,791 --> 0:29:22,162
因为它们现在有名字了 它们还可

587
00:29:22,229 --> 0:29:24,798
因此当你查看摄像头设备时

588
00:29:25,165 --> 0:29:27,568
这是否是一个虚拟设备？

589
00:29:27,968 --> 0:29:31,471
如果它是 你可以问它

590
00:29:31,905 --> 0:29:35,409
在API中我们把这个叫做它的

591
00:29:37,578 --> 0:29:39,780
同步视频流就是

592
00:29:39,980 --> 0:29:41,715
获取虚拟设备的

593
00:29:42,216 --> 0:29:45,786
并同步运行它们

594
00:29:46,086 --> 0:29:47,654
换句话说就是

595
00:29:48,088 --> 0:29:50,424
我们首次允许你同时拍摄

596
00:29:50,490 --> 0:29:52,826
来自广角摄像头

597
00:29:53,861 --> 0:29:56,930
你要继续在虚拟设备上设置属性

598
00:29:56,997 --> 0:29:58,665
而不是在constituentDevices上

599
00:30:00,234 --> 0:30:02,469
那里有一些规则

600
00:30:03,170 --> 0:30:04,671
当你运行虚拟设备时

601
00:30:04,938 --> 0:30:08,141
constituentDevices

602
00:30:08,909 --> 0:30:10,911
它们有相同的活动分辨率

603
00:30:10,978 --> 0:30:12,279
它们有相同的帧频

604
00:30:12,846 --> 0:30:15,649
从硬件层级上来说 它们是同步的

605
00:30:15,983 --> 0:30:21,321
那意味着传感器

606
00:30:21,388 --> 0:30:25,926
因此视频流的中间行

607
00:30:26,260 --> 0:30:28,595
一定对应着同样的时钟时间

608
00:30:29,429 --> 0:30:32,132
那意味着它们的中心帧相匹配

609
00:30:32,332 --> 0:30:37,004
它还意味着曝光、

610
00:30:37,070 --> 0:30:40,274
非常棒 看起来几乎是同一个摄像头

611
00:30:40,440 --> 0:30:42,976
只是碰巧是两个不同的视野

612
00:30:45,913 --> 0:30:49,716
最好演示一下 而不是说说而已

613
00:30:49,783 --> 0:30:51,785
这个叫做AVDualCam

614
00:30:53,220 --> 0:30:54,054
好了

615
00:30:55,055 --> 0:30:57,424
好的

616
00:30:57,791 --> 0:30:59,793
虚拟摄像头会看到那些东西

617
00:30:59,860 --> 0:31:03,263
通过给你展示一个两个摄像头

618
00:30:59,860 --> 0:31:03,263
通过给你展示一个两个摄像头

619
00:31:04,665 --> 0:31:07,901
它这样做是为了给你展示

620
00:31:08,635 --> 0:31:09,803
好的 在这里我们有

621
00:31:10,270 --> 0:31:13,941
同步运行的双摄像头的广角摄像头

622
00:31:14,241 --> 0:31:15,375
和远距摄像头所拍摄的视频流

623
00:31:15,609 --> 0:31:18,679
左侧是广角摄像头拍摄的

624
00:31:19,379 --> 0:31:20,347
不相信我吗？

625
00:31:20,914 --> 0:31:22,583
在这里我要把我的手指放到一侧

626
00:31:24,218 --> 0:31:25,786
然后再把我的手指放到另一侧

627
00:31:26,119 --> 0:31:27,020
它们是不同的摄像头

628
00:31:29,523 --> 0:31:31,925
我对广角摄像头所做的事就是放大它

629
00:31:31,992 --> 0:31:33,894
从而让它与远距摄像头的视野一样

630
00:31:34,394 --> 0:31:37,698
但你可以注意到

631
00:31:37,764 --> 0:31:39,233
没什么问题

632
00:31:39,299 --> 0:31:41,401
场消隐也没有什么古怪

633
00:31:41,902 --> 0:31:45,272
它们的曝光和聚焦同时发生了改变

634
00:31:46,306 --> 0:31:49,409
我们可以再把它变得更有意思点儿

635
00:31:50,077 --> 0:31:51,578
变为分屏视图

636
00:31:51,979 --> 0:31:53,747
现在看起来有点儿困难

637
00:31:54,047 --> 0:31:57,818
但左侧是广角摄像头的拍摄内容

638
00:31:58,252 --> 0:31:59,319
右侧是远距摄像头的拍摄内容

639
00:31:59,386 --> 0:32:01,255
那么我只展示了每帧的一半

640
00:31:59,386 --> 0:32:01,255
那么我只展示了每帧的一半

641
00:32:02,256 --> 0:32:05,526
现在如果我轻触三次

642
00:32:06,193 --> 0:32:11,398
可以让我修改

643
00:32:11,965 --> 0:32:16,103
这个app知道如何注册

644
00:32:16,336 --> 0:32:19,973
因此它允许我修改深度汇聚平面

645
00:32:20,040 --> 0:32:21,308
就像你的双眼一样

646
00:32:21,675 --> 0:32:24,244
当你盯着一些非常近

647
00:32:24,311 --> 0:32:26,980
你正在修改汇聚的深度平面

648
00:32:27,281 --> 0:32:29,616
那么比如说近距离地看我的手

649
00:32:30,450 --> 0:32:34,321
我可以发现哪里是适合的深度汇聚

650
00:32:34,388 --> 0:32:36,523
好了 现在适合一只手了

651
00:32:37,024 --> 0:32:39,226
但却不适合我后边的那辆汽车

652
00:32:39,293 --> 0:32:42,696
因此我继续向远处移动

653
00:32:43,797 --> 0:32:46,466
好了 但这不适合它后面的汽车

654
00:32:47,234 --> 0:32:49,970
因此现在我可以把那家伙拉回来

655
00:32:51,405 --> 0:32:54,708
那么这就是来自双摄像头的

656
00:33:03,116 --> 0:33:05,953
这个图表显示了

657
00:33:07,020 --> 0:33:10,190
它没有使用两个独立的设备输入

658
00:33:10,557 --> 0:33:12,893
因此它使用的是

659
00:33:13,126 --> 0:33:15,429
但它以同步方式

660
00:33:15,829 --> 0:33:19,233
把广角帧和远距帧转成了两个

661
00:33:20,033 --> 0:33:22,336
你会注意到底部有一个小对象

662
00:33:22,402 --> 0:33:25,873
叫做AVCaptureOutputSynchronizer

663
00:33:26,073 --> 0:33:27,174
我不想混淆你们的视听

664
00:33:27,407 --> 0:33:30,410
它所做的并不是我所谈到的硬件同步

665
00:33:30,611 --> 0:33:34,815
它只是会话底部的一个对象

666
00:33:35,249 --> 0:33:39,987
它可以在一个单一回调中

667
00:33:40,053 --> 0:33:42,923
因此不要对广角和远距摄像头

668
00:33:42,990 --> 0:33:44,091
使用单独的

669
00:33:44,157 --> 0:33:46,760
你可以在底部执行

670
00:33:46,827 --> 0:33:50,030
并通过一个单一的回调

671
00:33:50,097 --> 0:33:51,532
那样就非常方便了

672
00:33:52,132 --> 0:33:56,837
它下边有一个Metal Shader

673
00:33:57,304 --> 0:34:00,007
正如我所说的那样 它知道如何

674
00:33:57,304 --> 0:34:00,007
正如我所说的那样 它知道如何

675
00:34:00,207 --> 0:34:02,376
并决定预览中的哪里

676
00:34:02,442 --> 0:34:03,944
是渲染这些图像的正确位置

677
00:34:04,244 --> 0:34:07,047
并且它还把它们发送到

678
00:34:07,114 --> 0:34:08,415
以记录到一个视频轨道中

679
00:34:10,250 --> 0:34:12,286
现在回顾一下之前的图表

680
00:34:14,021 --> 0:34:16,956
我展示了

681
00:34:17,157 --> 0:34:18,859
尤其是双摄像头的输入

682
00:34:19,560 --> 0:34:22,996
双摄像头输入的端口属性揭露了

683
00:34:23,063 --> 0:34:24,364
你能在那儿看到哪个端口

684
00:34:25,264 --> 0:34:27,134
有人看到那儿有两个视频端口吗？

685
00:34:28,635 --> 0:34:29,937
我没看到两个视频端口

686
00:34:30,204 --> 0:34:35,108
因此如何从我们在这里看到的那些

687
00:34:35,275 --> 0:34:37,744
那一个视频端口

688
00:34:38,110 --> 0:34:40,112
不 它没有给我们提供广角或远距

689
00:34:40,179 --> 0:34:43,016
它为我们提供的是双摄像头决定的

690
00:34:43,083 --> 0:34:45,886
适合指定缩放系数的端口

691
00:34:47,221 --> 0:34:50,257
这不会帮助我们同时获得两个视频流

692
00:34:50,324 --> 0:34:51,257
因此我们要如何做呢？

693
00:34:52,793 --> 0:34:53,760
嗯 让我来告诉你

694
00:34:54,161 --> 0:34:57,664
但这是个秘密 所以你必须保证

695
00:34:58,265 --> 0:35:02,202
虚拟设备有秘密端口 OK？

696
00:34:58,265 --> 0:35:02,202
虚拟设备有秘密端口 OK？

697
00:35:03,303 --> 0:35:07,341
你之前不知道的秘密端口

698
00:35:07,407 --> 0:35:10,611
现在变得可用了 但你没有把它们

699
00:35:10,878 --> 0:35:14,248
你通过了解要请求什么来获得它们

700
00:35:14,848 --> 0:35:19,086
因此你不仅会得到

701
00:35:19,152 --> 0:35:22,956
包括不能用于单一摄像头会话的端口

702
00:35:23,557 --> 0:35:25,158
你都可以通过名称进行请求

703
00:35:25,559 --> 0:35:27,394
因此在这里我们有

704
00:35:27,661 --> 0:35:32,599
我正在通过sourceDeviceType

705
00:35:33,000 --> 0:35:35,435
以及源设备类型

706
00:35:35,969 --> 0:35:38,272
它告诉我说“啊哈

707
00:35:38,338 --> 0:35:39,173
我现在就提供给你”

708
00:35:39,473 --> 0:35:41,341
一旦你得到那些输入端口

709
00:35:41,575 --> 0:35:44,545
你就可以把它们钩在一个连接上

710
00:35:44,778 --> 0:35:47,281
与你创建自己的手动连接时一样

711
00:35:47,748 --> 0:35:51,451
然后你就可以在广角或远距

712
00:35:52,853 --> 0:35:57,090
在AVDualCam演示中

713
00:35:57,524 --> 0:36:00,894
修改广角和远距摄像头的

714
00:35:57,524 --> 0:36:00,894
修改广角和远距摄像头的

715
00:36:01,295 --> 0:36:04,031
你也看到了 那不只是移动和晃动

716
00:36:04,097 --> 0:36:06,567
它沿着我希望它汇聚的平面上移动

717
00:36:06,633 --> 0:36:09,002
就沿着基线所在的平面

718
00:36:09,536 --> 0:36:12,139
我之所以能这样做是因为

719
00:36:12,639 --> 0:36:14,074
为我们提供了一些单应性辅助

720
00:36:14,474 --> 0:36:16,276
单应性是指

721
00:36:16,343 --> 0:36:18,946
它与同一平面上的两个图像相关

722
00:36:19,680 --> 0:36:21,348
它们是计算机视觉的基础

723
00:36:21,548 --> 0:36:26,787
它们对于以下任务来说很常见

724
00:36:28,222 --> 0:36:30,557
现在相机内联对于iOS来说

725
00:36:30,624 --> 0:36:32,492
我们在iOS 11中就引入了它们

726
00:36:33,193 --> 0:36:35,229
它们给我呈现一个3乘3的矩阵

727
00:36:35,295 --> 0:36:38,498
描述了摄像头的几何学性能

728
00:36:38,732 --> 0:36:42,069
也就是它的焦距和光学中心

729
00:36:42,436 --> 0:36:45,339
看这里使用了针孔摄像头

730
00:36:45,639 --> 0:36:48,809
你可以看到

731
00:36:49,009 --> 0:36:51,812
并击中传感器 那是光学传感器

732
00:36:51,879 --> 0:36:54,147
而把两者之间的距离作为焦距

733
00:36:55,415 --> 0:36:58,418
现在你可以选择按帧接收内联

734
00:36:58,685 --> 0:37:01,955
通过给AVCaptureConnection

735
00:36:58,685 --> 0:37:01,955
通过给AVCaptureConnection

736
00:37:02,022 --> 0:37:04,191
你希望内部提交

737
00:37:04,525 --> 0:37:05,492
一旦完成

738
00:37:05,859 --> 0:37:08,462
那么你所收到的每个

739
00:37:08,695 --> 0:37:10,130
都带有这个

740
00:37:10,564 --> 0:37:13,734
CameraIntrinsicMatrix

741
00:37:13,967 --> 0:37:18,105
包裹的是一个3乘3的浮点型矩阵

742
00:37:18,672 --> 0:37:20,574
当你获得广角视频流时

743
00:37:20,874 --> 0:37:22,910
你会得到广角摄像头的视频流矩阵

744
00:37:23,110 --> 0:37:26,713
当你获得远距视频流时

745
00:37:28,682 --> 0:37:33,120
现在iOS 13中有个新功能

746
00:37:33,520 --> 0:37:37,524
外联是一个旋转矩阵和一个平移矢量

747
00:37:37,591 --> 0:37:42,229
就像是被一起填到一个矩阵中

748
00:37:42,629 --> 0:37:46,500
它描述了摄像头

749
00:37:47,167 --> 0:37:50,270
这会为你提供帮助

750
00:37:50,537 --> 0:37:53,207
所在的位置的斜度

751
00:37:54,041 --> 0:37:56,710
那么AVDualCam使用外联

752
00:37:56,977 --> 0:38:00,347
来了解如何对齐

753
00:37:56,977 --> 0:38:00,347
来了解如何对齐

754
00:38:00,514 --> 0:38:03,817
相互协调 从而可以进行正常拍摄

755
00:38:05,853 --> 0:38:09,923
它们是内联和外联上

756
00:38:10,190 --> 0:38:13,460
那么在两年前的第507号研讨会上

757
00:38:13,527 --> 0:38:15,696
我对它们做了非常详细的介绍

758
00:38:15,929 --> 0:38:17,531
因此我请你回顾那场研讨会

759
00:38:17,598 --> 0:38:19,833
如果你的胃很强大的话

760
00:38:21,869 --> 0:38:27,174
好的 关于MultiCam捕捉的

761
00:38:28,575 --> 0:38:31,512
好的 让我们回顾一下使用传统

762
00:38:31,879 --> 0:38:35,582
AVCaptureSession

763
00:38:37,751 --> 0:38:39,887
麦克跟随摄像头

764
00:38:40,187 --> 0:38:41,455
这是我能想到的最简单的描述了

765
00:38:41,688 --> 0:38:46,627
因此如果会话中连接着前置摄像头

766
00:38:47,227 --> 0:38:49,763
那么麦克将自动选择

767
00:38:49,830 --> 0:38:51,365
与前置摄像头所指向的方向

768
00:38:51,765 --> 0:38:52,766
对于后置摄像头也一样

769
00:38:53,100 --> 0:38:55,802
因此它是一个漂亮的心形图

770
00:38:56,103 --> 0:38:58,105
它拒绝来自外部的你不想要的音频

771
00:38:58,505 --> 0:39:01,441
那样你就可以跟随你的主体 前或后

772
00:38:58,505 --> 0:39:01,441
那样你就可以跟随你的主体 前或后

773
00:39:01,909 --> 0:39:03,310
如果你有只有音频的会话

774
00:39:03,377 --> 0:39:05,646
我们不太确定该把音频指向哪个方向

775
00:39:05,712 --> 0:39:07,748
因此我们只给你提供一个全方位字段

776
00:39:08,549 --> 0:39:11,685
作为一个强大的功能

777
00:39:11,952 --> 0:39:15,589
通过声明“别动AVCaptureSession

778
00:39:15,756 --> 0:39:18,692
并配置自己的音频”

779
00:39:20,961 --> 0:39:23,697
那么是时候告诉你们另一个小秘密了

780
00:39:26,733 --> 0:39:28,502
根本就没有什么前置麦克

781
00:39:28,869 --> 0:39:30,204
我刚才完全是在骗你

782
00:39:31,104 --> 0:39:32,739
事实上iPhone

783
00:39:33,273 --> 0:39:35,209
包含许多麦克

784
00:39:35,275 --> 0:39:37,778
设备不同麦克的数量也不同

785
00:39:38,078 --> 0:39:39,680
最近几代iPhone

786
00:39:39,746 --> 0:39:43,851
iPad有五个麦克

787
00:39:44,218 --> 0:39:47,487
在最近几代iPhone上

788
00:39:47,721 --> 0:39:50,023
顶部有两个麦克分别指向两侧

789
00:39:50,457 --> 0:39:52,226
它们都是全方位麦克

790
00:39:52,726 --> 0:39:55,762
现在顶部麦克会产生一些

791
00:39:55,829 --> 0:39:58,966
因为它们之间有设备充当挡板

792
00:39:59,333 --> 0:40:02,503
但它仍然不能为你提供一个

793
00:39:59,333 --> 0:40:02,503
但它仍然不能为你提供一个

794
00:40:03,303 --> 0:40:06,306
那么你具体到如何获得

795
00:40:06,373 --> 0:40:08,308
接近前或后麦克的效果呢？

796
00:40:09,343 --> 0:40:11,912
你要做的叫做麦克波束形成

797
00:40:12,312 --> 0:40:15,682
这是处理原生音频信号

798
00:40:15,749 --> 0:40:17,384
并让它们具备方向性的一种方式

799
00:40:17,684 --> 0:40:19,920
Core Audio

800
00:40:20,487 --> 0:40:22,623
在这里我们有两个蓝色点

801
00:40:22,689 --> 0:40:26,026
代表iPhone上两侧的两个麦克

802
00:40:26,360 --> 0:40:27,995
圆形大概就是

803
00:40:28,061 --> 0:40:29,963
它们所听到的音频图

804
00:40:30,030 --> 0:40:32,299
请记住 它们都是全方位麦克

805
00:40:32,833 --> 0:40:35,402
如果我们去掉这两个信号

806
00:40:35,602 --> 0:40:38,305
我们就会形成八字形图 那很酷

807
00:40:38,372 --> 0:40:40,007
那并不是我们想要的

808
00:40:40,974 --> 0:40:42,476
如果我们想进一步塑造它

809
00:40:43,010 --> 0:40:47,147
我们可以给我们想要保留的麦克

810
00:40:47,381 --> 0:40:49,449
现在我们得到了一个小吃豆人

811
00:40:49,883 --> 0:40:52,619
很好 现在我们拒绝了

812
00:40:53,053 --> 0:40:55,422
但很遗憾 我们也把信号削弱了

813
00:40:55,489 --> 0:40:57,457
因此它比我们想的要安静多了

814
00:40:58,625 --> 0:41:03,363
但如果我们做了那些之后

815
00:40:58,625 --> 0:41:03,363
但如果我们做了那些之后

816
00:41:03,530 --> 0:41:05,165
我们会得到一个很漂亮的大吃豆人

817
00:41:05,332 --> 0:41:07,734
并且现在我们得到了

818
00:41:07,968 --> 0:41:11,605
我们拒绝了我们不想要的那个摄像头

819
00:41:12,306 --> 0:41:14,908
现在这个极其简化了

820
00:41:15,175 --> 0:41:18,345
其中进行着大量筛选

821
00:41:18,879 --> 0:41:20,614
但从根本上来说那就是所发生的事

822
00:41:20,948 --> 0:41:24,818
到目前为止

823
00:41:25,118 --> 0:41:27,287
但Core Audio的

824
00:41:27,354 --> 0:41:30,624
针对这个MultiCam功能

825
00:41:31,024 --> 0:41:35,796
在iOS 13中我们现在同时支持

826
00:41:41,368 --> 0:41:43,770
那么返回到老版

827
00:41:44,271 --> 0:41:48,208
当你获得麦克设备输入时

828
00:41:48,642 --> 0:41:51,745
那个端口有许多种音频

829
00:41:51,812 --> 0:41:53,614
可能是前、后或全方位音频

830
00:41:53,680 --> 0:41:55,782
取决于会话所找到的摄像头

831
00:41:56,450 --> 0:41:58,886
但当你使用

832
00:41:59,119 --> 0:42:01,288
行为非常严格

833
00:41:59,119 --> 0:42:01,288
行为非常严格

834
00:42:01,889 --> 0:42:05,659
你找到的第一个音频端口

835
00:42:06,059 --> 0:42:09,329
然后你会发现我提到的那些秘密端口

836
00:42:09,730 --> 0:42:13,133
得到了专门的后方波束

837
00:42:13,800 --> 0:42:16,770
实现方式是使用同样的

838
00:42:18,939 --> 0:42:21,241
设备输入端口接收器

839
00:42:21,608 --> 0:42:24,344
这一次通过

840
00:42:24,745 --> 0:42:27,948
因此你可以请求前方或后方位置

841
00:42:28,115 --> 0:42:30,083
那会为你提供你所感兴趣的端口

842
00:42:30,150 --> 0:42:32,186
并且你将获得很好的后或前波束形成

843
00:42:34,421 --> 0:42:35,355
这是前波束形成

844
00:42:36,523 --> 0:42:37,491
这是后波束形成

845
00:42:39,459 --> 0:42:42,729
现在返回到Nik的

846
00:42:43,297 --> 0:42:44,898
我们只关注了视频

847
00:42:44,965 --> 0:42:47,901
我们展示了技术先进的部分功能

848
00:42:48,302 --> 0:42:51,071
现在我要返回去并告诉你

849
00:42:51,905 --> 0:42:53,774
我们总是运行

850
00:42:55,242 --> 0:42:58,512
一台单一设备输入

851
00:42:58,579 --> 0:42:59,980
一个是前方波束形成

852
00:43:00,380 --> 0:43:03,183
我们对它们执行

853
00:43:03,417 --> 0:43:05,419
这张幻灯片应该说

854
00:43:05,819 --> 0:43:08,589
然后在运行时从两者之间选择一个

855
00:43:08,655 --> 0:43:11,692
那么根据两者谁更大

856
00:43:11,959 --> 0:43:13,927
我们可以切换为前或后麦克

857
00:43:14,261 --> 0:43:16,396
并为你提供我们所期待的波形形成

858
00:43:18,365 --> 0:43:21,468
关于多路麦克捕捉有一些规则

859
00:43:21,835 --> 0:43:23,837
波形形成只能对内置麦克有效

860
00:43:23,904 --> 0:43:27,107
如果你有外置麦克 USB麦克

861
00:43:27,174 --> 0:43:28,609
我们不知道如何用它形成波束

862
00:43:30,077 --> 0:43:33,380
如果你恰巧插入其它东西

863
00:43:33,780 --> 0:43:36,717
我们当然会捕捉音频

864
00:43:36,984 --> 0:43:40,153
但我们不知道如何形成波束

865
00:43:40,420 --> 0:43:42,589
传输你所连接的全部输入

866
00:43:42,656 --> 0:43:44,625
从而确保你不会丢失信号

867
00:43:47,828 --> 0:43:52,199
今天对于多摄像头捕捉的演讲

868
00:43:52,266 --> 0:43:53,467
让我们快速总结一下

869
00:43:55,202 --> 0:44:01,475
MultiCam捕捉会话是在

870
00:43:55,202 --> 0:44:01,475
MultiCam捕捉会话是在

871
00:44:02,476 --> 0:44:04,678
它是个强大的工具 但有一些限制

872
00:44:04,745 --> 0:44:05,612
了解一下这些限制

873
00:44:06,680 --> 0:44:09,583
当你编程时要考虑好

874
00:44:10,050 --> 0:44:11,485
如何处理硬件和系统压力消耗

875
00:44:13,420 --> 0:44:15,022
如果你想执行同步视频流

876
00:44:15,289 --> 0:44:18,158
使用那些有必不可少的

877
00:44:18,959 --> 0:44:21,328
最后如果你想执行多路麦克捕捉

878
00:44:21,395 --> 0:44:24,198
请注意你可以使用前、

879
00:44:24,665 --> 0:44:25,532
谢谢大家
