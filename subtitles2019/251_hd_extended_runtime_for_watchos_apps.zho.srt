1
00:00:01,516 --> 0:00:05,686
[音乐]

2
00:00:06,186 --> 0:00:07,966
&gt;&gt; 大家好 我叫 Forest

3
00:00:07,966 --> 0:00:09,166
很高兴向大家介绍

4
00:00:09,166 --> 0:00:11,726
在 Apple Watch 上获得运行时的新方法

5
00:00:12,396 --> 0:00:13,406
我们将回顾

6
00:00:13,406 --> 0:00:15,166
现有的 Background Modes

7
00:00:15,166 --> 0:00:16,686
以及我们加入 watchOS 6 的

8
00:00:16,776 --> 0:00:18,506
新 API 的一些细节

9
00:00:18,506 --> 0:00:20,816
它们能使更多种类的 App 获得扩展运行时

10
00:00:21,176 --> 0:00:22,756
简单的交互

11
00:00:22,756 --> 0:00:23,796
让 Apple Watch 变得强大

12
00:00:24,636 --> 0:00:25,676
你可能会抬起你的手腕

13
00:00:25,676 --> 0:00:27,526
查看时间 气温

14
00:00:27,766 --> 0:00:29,096
你的日历或者其他

15
00:00:29,096 --> 0:00:30,156
可以在表盘上的

16
00:00:30,156 --> 0:00:32,415
复杂功能中清楚看到的信息

17
00:00:33,386 --> 0:00:34,656
你可能查看语言学习 App

18
00:00:34,656 --> 0:00:36,366
发送的一则通知

19
00:00:36,856 --> 0:00:38,316
除了这些 你还可能启动一个

20
00:00:38,316 --> 0:00:39,896
App 来追踪一个包裹 完成一项任务

21
00:00:39,896 --> 0:00:41,236
或者记录一餐饭

22
00:00:42,046 --> 0:00:43,216
当你完成其中一个活动后

23
00:00:43,216 --> 0:00:45,516
放低你的手腕 这个 App 将变成非活跃状态

24
00:00:46,016 --> 0:00:47,336
一段短暂的时间后

25
00:00:47,336 --> 0:00:48,866
此进程将被挂起 但将

26
00:00:48,866 --> 0:00:50,426
在一段时间内保持在最前端

27
00:00:50,426 --> 0:00:51,926
这意味着如果你在

28
00:00:51,926 --> 0:00:53,286
这段时间内抬起手腕

29
00:00:53,286 --> 0:00:54,626
它就会被激活

30
00:00:55,726 --> 0:00:56,876
这里有一些使用实例

31
00:00:56,876 --> 0:00:58,566
在这些情况下 你希望你的 App

32
00:00:58,566 --> 0:01:00,646
能在你放低手腕后仍可持续运行

33
00:00:58,566 --> 0:01:00,646
能在你放低手腕后仍可持续运行

34
00:01:01,146 --> 0:01:02,596
如果你开始一项体能训练

35
00:01:02,596 --> 0:01:04,056
你希望 Apple Watch 可以记录

36
00:01:04,056 --> 0:01:05,116
你在这项运动中投入的时间

37
00:01:05,116 --> 0:01:07,796
你还可能希望收集其他数据

38
00:01:07,796 --> 0:01:11,206
例如实时心率 移动距离

39
00:01:11,206 --> 0:01:13,786
完成的高度 每分钟步数以及其他数据

40
00:01:14,666 --> 0:01:16,176
作为一个开发者 你可以

41
00:01:16,176 --> 0:01:17,486
通过使用 Workout API 和 HealthKit

42
00:01:17,486 --> 0:01:19,456
开发一个可以记录体能训练信息的 App

43
00:01:20,136 --> 0:01:22,096
另一个使 App 在你放低手腕后

44
00:01:22,096 --> 0:01:23,186
持续运行的明显原因

45
00:01:23,386 --> 0:01:26,926
是通过连接的蓝牙设备播放音频

46
00:01:27,646 --> 0:01:28,866
你可以通过调取后台

47
00:01:28,866 --> 0:01:30,156
音频 API 来运行音频会话

48
00:01:30,156 --> 0:01:32,626
在 watchOS 6 里你

49
00:01:32,626 --> 0:01:34,446
不仅可以播放本地音频

50
00:01:34,446 --> 0:01:36,416
还可以播放流媒体音乐 播客

51
00:01:36,416 --> 0:01:37,666
体育赛事以及其他内容

52
00:01:38,086 --> 0:01:40,996
当然 如果你在导航

53
00:01:40,996 --> 0:01:42,506
分步提示功能来

54
00:01:42,506 --> 0:01:43,656
指引你去往下一个目的地

55
00:01:44,166 --> 0:01:45,246
如果你在创建一个 App

56
00:01:45,246 --> 0:01:46,726
它能提供导航

57
00:01:46,726 --> 0:01:48,046
你可以通过使用 Core Location API

58
00:01:48,046 --> 0:01:49,486
创建一个导航会话

59
00:01:49,976 --> 0:01:52,126
我们在围绕

60
00:01:52,126 --> 0:01:53,586
前几个发布的 watchOS 版本

61
00:01:53,586 --> 0:01:55,206
的后台模式创建 API 时

62
00:01:55,206 --> 0:01:56,506
我们已经注意到一些 App

63
00:01:56,506 --> 0:01:57,996
需要额外的运行时

64
00:01:57,996 --> 0:02:00,036
但不符合任何已有的使用实例

65
00:01:57,996 --> 0:02:00,036
但不符合任何已有的使用实例

66
00:02:01,156 --> 0:02:02,416
所以现在我将

67
00:02:02,416 --> 0:02:03,766
交给 Scott Daner 来讨论

68
00:02:03,766 --> 0:02:05,646
watchOS 6 中的新 API 

69
00:02:05,646 --> 0:02:07,196
它将为一些新使用实例提供支持

70
00:02:08,966 --> 0:02:11,106
&gt;&gt; 大家好 我是 Scott Daner 

71
00:02:11,106 --> 0:02:12,436
我将向你介绍

72
00:02:12,436 --> 0:02:13,636
新的 Extended Runtime API

73
00:02:14,476 --> 0:02:18,356
在 watchOS 6 中 我们能

74
00:02:18,356 --> 0:02:20,716
通过 Extended Runtime API 触发新的场景

75
00:02:21,926 --> 0:02:24,906
这个 API 将提供充足的运行时

76
00:02:24,906 --> 0:02:26,836
甚至在用户放低手腕

77
00:02:26,836 --> 0:02:28,716
保护电池期间也能完成目标任务

78
00:02:29,546 --> 0:02:30,786
这个 Extended Runtime API

79
00:02:30,926 --> 0:02:33,816
包括 5 种使用实例

80
00:02:33,816 --> 0:02:36,006
自我管理 正念训练 物理治疗

81
00:02:36,006 --> 0:02:38,946
闹钟和健康监测

82
00:02:39,976 --> 0:02:41,626
这当中每一个使用实例都有

83
00:02:41,626 --> 0:02:42,906
相应的会话类型

84
00:02:43,596 --> 0:02:45,226
我们为达到每一个使用实例的需求

85
00:02:45,226 --> 0:02:47,326
进行了量身定制

86
00:02:48,296 --> 0:02:50,606
这个 API 是给

87
00:02:50,606 --> 0:02:52,136
非体能训练场景使用的 所以

88
00:02:52,136 --> 0:02:53,366
它不会影响动态圆环和

89
00:02:53,366 --> 0:02:55,686
体能训练圆环 与此同时 有些 App

90
00:02:55,686 --> 0:02:57,636
也许可以从监测

91
00:02:57,666 --> 0:02:59,066
和报告用户的心率获益

92
00:02:59,066 --> 0:03:00,986
但没有一个

93
00:02:59,066 --> 0:03:00,986
但没有一个

94
00:03:00,986 --> 0:03:02,596
我们将要讲到的会话类型

95
00:03:02,826 --> 0:03:04,336
拥有体能训练 App 

96
00:03:04,336 --> 0:03:05,746
默认的心率监测功能

97
00:03:06,866 --> 0:03:07,996
我们将会更详细的讨论这个问题

98
00:03:07,996 --> 0:03:09,936
但是监测用户的心率

99
00:03:09,936 --> 0:03:11,266
是功率密集型的

100
00:03:11,266 --> 0:03:13,296
所以对于心率的查询

101
00:03:13,296 --> 0:03:15,506
需要很谨慎

102
00:03:16,056 --> 0:03:17,346
第一种我们将谈到的会话类型

103
00:03:17,346 --> 0:03:18,896
是自我管理

104
00:03:19,726 --> 0:03:21,786
自我管理类 App 引导用户

105
00:03:21,786 --> 0:03:23,466
做一些简单的

106
00:03:23,466 --> 0:03:24,906
针对用户健康的活动

107
00:03:24,906 --> 0:03:25,516
例如刷牙

108
00:03:26,756 --> 0:03:28,496
一个自我管理会话可以

109
00:03:28,496 --> 0:03:30,476
运行至 10 分钟或者直到用户

110
00:03:30,476 --> 0:03:32,366
通过按压数码表冠退出 App

111
00:03:32,366 --> 0:03:34,576
或者切换到其他 App

112
00:03:34,726 --> 0:03:37,386
如果用户放低他们的手腕

113
00:03:37,756 --> 0:03:39,216
屏幕将关闭 但是

114
00:03:39,216 --> 0:03:40,226
这个会话还将继续运行

115
00:03:40,226 --> 0:03:42,746
你的进程将不会被延长

116
00:03:43,656 --> 0:03:44,836
这使得 App 能够

117
00:03:44,836 --> 0:03:46,096
播放声音 触觉反馈 或者

118
00:03:46,096 --> 0:03:46,976
使用蓝牙设备进行对话

119
00:03:47,046 --> 0:03:51,946
正念 App 通过冥想会话来引导用户

120
00:03:52,626 --> 0:03:54,026
有些正念 App 

121
00:03:54,026 --> 0:03:55,436
已经得到了他们需要的运行时

122
00:03:55,436 --> 0:03:57,086
通过在整个会话期间

123
00:03:57,086 --> 0:03:58,326
连续播放音频

124
00:03:58,326 --> 0:04:00,336
这是可以的

125
00:03:58,326 --> 0:04:00,336
这是可以的

126
00:04:01,216 --> 0:04:02,576
Background Audio API 可以

127
00:04:02,576 --> 0:04:03,866
在这些场景下使用

128
00:04:04,696 --> 0:04:06,356
这个使用实例可以为

129
00:04:06,356 --> 0:04:08,086
不连续播放音频的冥想

130
00:04:08,086 --> 0:04:09,336
提供运行时间

131
00:04:10,926 --> 0:04:12,226
类似自我管理会话

132
00:04:12,556 --> 0:04:14,426
正念会话会运行直到

133
00:04:14,426 --> 0:04:16,185
用户退出 App 或者

134
00:04:16,185 --> 0:04:17,336
时限终止

135
00:04:18,185 --> 0:04:19,676
对于正念会话来说

136
00:04:19,676 --> 0:04:21,146
时限是一个小时

137
00:04:21,755 --> 0:04:23,956
物理治疗 App 引导用户

138
00:04:23,956 --> 0:04:25,216
进行拉伸运动

139
00:04:25,416 --> 0:04:27,996
强化训练或者关节活动训练

140
00:04:28,756 --> 0:04:30,286
物理治疗会话被设计成

141
00:04:30,286 --> 0:04:31,816
提供你需要的运行时

142
00:04:31,816 --> 0:04:33,456
来触发对用户的提醒

143
00:04:33,456 --> 0:04:35,026
当到了换腿

144
00:04:35,026 --> 0:04:38,166
换转体的方向等的时候

145
00:04:39,706 --> 0:04:41,406
这个会话会在

146
00:04:41,406 --> 0:04:42,806
用户按了数码表冠或者

147
00:04:42,806 --> 0:04:44,426
切换到另一个 App 时持续运行

148
00:04:44,426 --> 0:04:46,526
以保证当用户在做重复动作的时候

149
00:04:46,526 --> 0:04:49,196
可以进行多任务处理

150
00:04:49,776 --> 0:04:51,766
这和体能训练会话的工作方式很类似

151
00:04:53,086 --> 0:04:54,616
这里有一次的时限

152
00:04:54,616 --> 0:04:55,936
但是你需要在用户

153
00:04:55,936 --> 0:04:57,496
完成这一套动作的同时

154
00:04:57,496 --> 0:04:58,006
结束这个会话

155
00:04:59,316 --> 0:05:00,746
记住 物理治疗会话

156
00:04:59,316 --> 0:05:00,746
记住 物理治疗会话

157
00:05:00,746 --> 0:05:01,916
是为那些非体能训练的活动

158
00:05:01,916 --> 0:05:04,626
而特别设计的

159
00:05:05,586 --> 0:05:06,986
如果你的物理治疗 App

160
00:05:06,986 --> 0:05:08,646
提供更剧烈的活动

161
00:05:09,056 --> 0:05:10,706
例如骑健身脚踏车

162
00:05:11,056 --> 0:05:12,566
那么对于这种活动要

163
00:05:12,566 --> 0:05:13,056
使用 Workout API

164
00:05:13,426 --> 0:05:14,936
健康监测 App 使用

165
00:05:14,936 --> 0:05:16,756
运行时来监测用户的

166
00:05:16,756 --> 0:05:19,066
健康数据 例如心率或者运动

167
00:05:19,716 --> 0:05:21,516
和目前一样 App 必须通过

168
00:05:21,516 --> 0:05:23,806
HealthKit API 来查询心率

169
00:05:24,596 --> 0:05:25,686
这将打开心率传感器

170
00:05:25,686 --> 0:05:26,706
这将对电池使用时间有影响

171
00:05:26,706 --> 0:05:28,576
所以告知你的用户

172
00:05:28,576 --> 0:05:31,236
这一点非常重要

173
00:05:31,876 --> 0:05:33,026
由于对电池的潜在

174
00:05:33,026 --> 0:05:34,936
严重影响

175
00:05:34,936 --> 0:05:37,106
使用这类 API 需要获得资格

176
00:05:37,106 --> 0:05:38,216
你需要对用户的电池

177
00:05:38,216 --> 0:05:40,006
格外的重视

178
00:05:41,006 --> 0:05:43,616
为了使用这种 API

179
00:05:43,616 --> 0:05:45,036
你需要在 Xcode 里的 Extension Target 中

180
00:05:45,036 --> 0:05:46,386
添加 Background Mode

181
00:05:46,386 --> 0:05:49,826
然后选择一个

182
00:05:49,826 --> 0:05:51,016
合适的会话类型

183
00:05:51,686 --> 0:05:54,586
要创建一个会话 第一步要创建

184
00:05:54,586 --> 0:05:56,876
一个 WKExtendedRuntimeSession() 对象

185
00:05:57,496 --> 0:05:58,836
这将创建一个会话

186
00:05:58,836 --> 0:05:59,836
但它此时还不会启动

187
00:06:00,836 --> 0:06:02,906
你需要在这个会话上设置一个代理

188
00:06:02,906 --> 0:06:05,156
然后调用 start() 方法

189
00:06:05,816 --> 0:06:07,326
调用 start() 方法

190
00:06:07,326 --> 0:06:08,256
需要在 App 活跃期间

191
00:06:08,416 --> 0:06:10,456
调用 start() 方法之后

192
00:06:10,456 --> 0:06:12,066
这个会话将立刻启动

193
00:06:12,066 --> 0:06:13,906
你将获得一个回调函数

194
00:06:13,906 --> 0:06:15,266
这表示它运行成功

195
00:06:16,526 --> 0:06:18,166
最后 你可以通过 调用 invalidate() 方法

196
00:06:18,166 --> 0:06:19,276
来结束这个 会话

197
00:06:21,276 --> 0:06:23,236
现在 我将请 Forest 回来

198
00:06:23,236 --> 0:06:23,976
介绍闹钟 

199
00:06:24,046 --> 0:06:26,786
&gt;&gt; 在大多数情况下如果一个 App 需要

200
00:06:26,786 --> 0:06:28,246
在某个特定的时间提醒用户

201
00:06:28,246 --> 0:06:29,876
最好的方式就是

202
00:06:29,876 --> 0:06:30,776
使用通知

203
00:06:31,536 --> 0:06:33,066
但是 有些情况下

204
00:06:33,066 --> 0:06:34,566
通知并不足够

205
00:06:34,566 --> 0:06:36,066
例如将用户从睡眠中唤醒

206
00:06:36,996 --> 0:06:39,296
这种情况下 App 可能希望

207
00:06:39,296 --> 0:06:40,576
获得运行时来监测

208
00:06:40,576 --> 0:06:42,676
用户的心率或者移动

209
00:06:42,676 --> 0:06:44,776
以确定一个进行提醒的最佳时机

210
00:06:45,476 --> 0:06:46,756
要实现这个功能 我们

211
00:06:46,756 --> 0:06:47,776
添加了闹钟会话类型

212
00:06:48,586 --> 0:06:50,576
智能闹钟会话能让 App

213
00:06:50,576 --> 0:06:52,166
预设一个窗口来监测

214
00:06:52,166 --> 0:06:54,766
心率和运动的变化

215
00:06:55,516 --> 0:06:57,186
闹钟会话是唯一的一种 

216
00:06:57,186 --> 0:06:58,306
能提前预设

217
00:06:58,306 --> 0:07:00,456
至多 36 小时 而且

218
00:06:58,306 --> 0:07:00,456
至多 36 小时 而且

219
00:07:00,456 --> 0:07:02,726
一旦启动可以运行至 30 分钟的会话

220
00:07:03,426 --> 0:07:04,716
你必须在这个会话期间

221
00:07:04,716 --> 0:07:05,916
至少进行一次触觉反馈

222
00:07:05,916 --> 0:07:07,246
因为你的目的是

223
00:07:07,246 --> 0:07:08,296
起到闹钟的作用

224
00:07:09,596 --> 0:07:12,446
如果你的 App 使用闹钟会话类型

225
00:07:12,446 --> 0:07:14,226
这个会话如何工作有一个关键的区别

226
00:07:14,586 --> 0:07:16,386
这个会话是提前预设的

227
00:07:17,196 --> 0:07:18,646
为了提前预设闹钟会话

228
00:07:18,726 --> 0:07:21,376
需要调用 startAtDate() 方法

229
00:07:22,066 --> 0:07:23,336
这将预设闹钟

230
00:07:23,336 --> 0:07:24,746
在晚些时候开始运行

231
00:07:25,496 --> 0:07:27,086
此外 就像当 App 在活跃时

232
00:07:27,086 --> 0:07:28,206
你需要调用 start() 方法一样

233
00:07:28,206 --> 0:07:30,076
startAtDate() 方法也需要

234
00:07:30,076 --> 0:07:31,046
在 App 活跃的时候调用

235
00:07:31,846 --> 0:07:34,036
晚些时候 当时间确定后

236
00:07:34,036 --> 0:07:36,246
这个会话将会开始运行

237
00:07:36,246 --> 0:07:37,556
如果此时 App 没有运行 则会被启动

238
00:07:37,856 --> 0:07:40,196
一经启动  App 内

239
00:07:40,196 --> 0:07:42,826
传递给 start 会话的扩展代理

240
00:07:42,826 --> 0:07:43,966
将接收到一个回调函数

241
00:07:44,616 --> 0:07:46,056
这个 App 必须在

242
00:07:46,056 --> 0:07:47,386
返回这个功能之前 

243
00:07:47,386 --> 0:07:48,026
在会话里设置一个代理

244
00:07:48,976 --> 0:07:50,516
在这之后 App 将

245
00:07:50,516 --> 0:07:51,646
在代理对象收到一个回调函数

246
00:07:51,646 --> 0:07:54,026
表明这个会话已经启动

247
00:07:54,616 --> 0:07:55,956
在会话活跃运行期间

248
00:07:55,956 --> 0:07:58,616
App 必须提供触觉反馈

249
00:07:59,516 --> 0:08:00,896
如果你的 App 在闹钟会话期间

250
00:07:59,516 --> 0:08:00,896
如果你的 App 在闹钟会话期间

251
00:08:00,896 --> 0:08:02,756
提供了触觉反馈

252
00:08:02,756 --> 0:08:04,536
我们将显示一个

253
00:08:04,536 --> 0:08:05,826
系统提醒 表明

254
00:08:05,826 --> 0:08:07,136
你的 App 正在播放闹钟

255
00:08:07,736 --> 0:08:09,596
如果你的 App 在闹钟会话期间

256
00:08:09,596 --> 0:08:10,926
没能提供触觉反馈

257
00:08:10,926 --> 0:08:12,156
我们将提醒用户

258
00:08:12,156 --> 0:08:13,646
未来可在会话中

259
00:08:13,646 --> 0:08:15,726
不允许 App 进行预设

260
00:08:16,336 --> 0:08:17,556
确保你在这个平台上

261
00:08:17,556 --> 0:08:18,796
是一个良好的公民

262
00:08:19,606 --> 0:08:20,986
如果你是 你的用户将

263
00:08:20,986 --> 0:08:21,716
永远不会看到它

264
00:08:22,076 --> 0:08:23,246
我们在这些使用实例

265
00:08:23,246 --> 0:08:24,656
的参数上花了不少心思

266
00:08:24,756 --> 0:08:26,116
所以请选择一个

267
00:08:26,116 --> 0:08:27,046
适合你的 App 的使用实例

268
00:08:28,006 --> 0:08:29,696
考虑用户的电池使用时间

269
00:08:30,136 --> 0:08:31,526
在用户完成健身活动时

270
00:08:31,526 --> 0:08:33,155
马上结束会话

271
00:08:33,155 --> 0:08:34,826
谨慎查询心率

272
00:08:35,166 --> 0:08:36,385
这将确保你的用户

273
00:08:36,385 --> 0:08:37,466
拥有很好的电池使用时间

274
00:08:38,426 --> 0:08:40,336
想要了解更多信息

275
00:08:40,336 --> 0:08:42,976
登录 developer.apple.com 查看文档
