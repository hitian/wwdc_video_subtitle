1
00:00:01,516 --> 0:00:06,546
[ Music ]

2
00:00:07,046 --> 0:00:07,566
&gt;&gt; Hello everyone.

3
00:00:07,866 --> 0:00:10,216
My name is Shiva Sundar, and I'm

4
00:00:10,216 --> 0:00:12,526
extremely excited to talk about

5
00:00:12,806 --> 0:00:14,696
HEVC Video with Alpha.

6
00:00:17,506 --> 0:00:19,116
You're probably familiar with

7
00:00:19,116 --> 0:00:21,216
Alpha channels in image files today.

8
00:00:22,716 --> 0:00:24,716
Alpha channels are ubiquitous

9
00:00:24,856 --> 0:00:27,776
in image files, in our apps and on

10
00:00:27,776 --> 0:00:28,136
the web.

11
00:00:29,576 --> 0:00:30,806
When there's an Alpha channel

12
00:00:30,886 --> 0:00:33,726
in an image file, every pixel in the

13
00:00:33,726 --> 0:00:36,236
image gets opacity along with

14
00:00:36,236 --> 0:00:36,816
its color.

15
00:00:38,036 --> 0:00:40,706
This allows us to have an image

16
00:00:40,706 --> 0:00:42,256
that has a complex,

17
00:00:42,256 --> 0:00:44,916
non-rectangular shape but looks

18
00:00:44,916 --> 0:00:47,786
natural when composited against

19
00:00:47,786 --> 0:00:49,066
many different backgrounds.

20
00:00:52,556 --> 0:00:55,536
So Alpha and transparency are

21
00:00:55,536 --> 0:00:58,336
common and used all over the web

22
00:00:59,136 --> 0:01:00,816
principally by still image

23
00:00:59,136 --> 0:01:00,816
principally by still image

24
00:01:00,816 --> 0:01:01,946
formats like PNG.

25
00:01:05,135 --> 0:01:07,216
Alpha in video has been less

26
00:01:07,216 --> 0:01:07,626
common.

27
00:01:09,176 --> 0:01:11,296
It has been a professional video

28
00:01:11,296 --> 0:01:13,456
workflow tool.

29
00:01:13,616 --> 0:01:15,466
The formats used in professional

30
00:01:15,466 --> 0:01:17,576
video workflows like Apple

31
00:01:17,576 --> 0:01:20,516
ProRes 4444 are very high data

32
00:01:20,516 --> 0:01:22,286
rate and not appropriate for

33
00:01:22,286 --> 0:01:22,726
delivery.

34
00:01:24,236 --> 0:01:26,776
In 2017, Apple introduced

35
00:01:26,776 --> 0:01:28,906
support for the HEIF image file

36
00:01:28,906 --> 0:01:31,286
format, which lets us take

37
00:01:31,286 --> 0:01:33,816
advantage of the advanced

38
00:01:33,816 --> 0:01:34,476
lossy compression

39
00:01:34,476 --> 0:01:37,526
technologies in HEVC to compress

40
00:01:37,526 --> 0:01:38,466
still images.

41
00:01:39,996 --> 0:01:42,016
HEIF also lets you include an

42
00:01:42,016 --> 0:01:43,946
Alpha channel in image files.

43
00:01:45,366 --> 0:01:47,216
In fact, this year we are

44
00:01:47,666 --> 0:01:49,286
adding support for HEIF

45
00:01:49,286 --> 0:01:51,816
sequences, which lets you have

46
00:01:51,816 --> 0:01:53,536
multiple images in a single

47
00:01:53,536 --> 0:01:53,916
file.

48
00:01:55,376 --> 0:01:57,536
HEIF sequences also support

49
00:01:57,536 --> 0:01:58,336
Alpha channels.

50
00:02:00,106 --> 0:02:02,136
For some time we've recognized

51
00:02:02,196 --> 0:02:04,796
the need for a lower bitrate way

52
00:02:05,076 --> 0:02:06,696
to include Alpha in motion

53
00:02:06,696 --> 0:02:07,076
video.

54
00:02:08,226 --> 0:02:11,236
And so we said let's use that

55
00:02:11,236 --> 0:02:12,656
advanced loosy compression

56
00:02:12,656 --> 0:02:14,796
technology to support Alpha

57
00:02:14,796 --> 0:02:16,876
channels in video files as well.

58
00:02:19,286 --> 0:02:21,786
Playback of HEVC video with

59
00:02:21,786 --> 0:02:24,616
Alpha is supported in iOS 13,

60
00:02:24,946 --> 0:02:28,376
tvOS 13 and macOS Catalina on

61
00:02:28,406 --> 0:02:29,976
all supported devices and

62
00:02:29,976 --> 0:02:30,676
computers.

63
00:02:31,816 --> 0:02:34,566
Encoding is supported on all of

64
00:02:34,566 --> 0:02:36,446
those devices and computers that

65
00:02:36,446 --> 0:02:37,836
have an HEVC encoder.

66
00:02:39,556 --> 0:02:41,916
Having a video with Alpha format

67
00:02:42,606 --> 0:02:45,286
that works well at bit rates low

68
00:02:45,286 --> 0:02:47,696
enough for distribution opens up

69
00:02:47,696 --> 0:02:48,796
many opportunities.

70
00:02:52,046 --> 0:02:53,046
You can have rich,

71
00:02:53,126 --> 0:02:54,896
non-rectangular motion video

72
00:02:54,896 --> 0:02:57,246
content that you incorporate as

73
00:02:57,246 --> 0:02:59,346
a layer as part of your app's

74
00:02:59,346 --> 0:03:00,716
expressive experience.

75
00:02:59,346 --> 0:03:00,716
expressive experience.

76
00:03:02,566 --> 0:03:04,136
It could be pre-rendered like an

77
00:03:04,136 --> 0:03:04,856
animation.

78
00:03:05,786 --> 0:03:07,926
Such an element can move around

79
00:03:07,966 --> 0:03:09,446
on top of a complicated

80
00:03:09,446 --> 0:03:11,476
background and you could even have

81
00:03:11,476 --> 0:03:13,276
several of them to give a

82
00:03:13,276 --> 0:03:15,366
feeling of depth or complex

83
00:03:15,366 --> 0:03:16,116
interactions.

84
00:03:17,416 --> 0:03:19,416
Because these are movies they

85
00:03:19,416 --> 0:03:20,746
can have synchronized sound

86
00:03:20,746 --> 0:03:23,046
tracks so the characters in

87
00:03:23,046 --> 0:03:24,916
these non-rectangular movies can

88
00:03:24,916 --> 0:03:25,296
talk.

89
00:03:26,436 --> 0:03:27,346
&gt;&gt; Highly professional.

90
00:03:27,826 --> 0:03:28,476
&gt;&gt; Alpha channel.

91
00:03:28,746 --> 0:03:29,176
&gt;&gt; Content.

92
00:03:29,406 --> 0:03:29,896
&gt;&gt; For you.

93
00:03:30,176 --> 0:03:31,336
&gt;&gt; Woo-hoo.

94
00:03:32,056 --> 0:03:33,196
&gt;&gt; Woo-hoo.

95
00:03:33,376 --> 0:03:34,826
&gt;&gt; They could be integrated into

96
00:03:34,826 --> 0:03:37,866
games using SpriteKit, SceneKit

97
00:03:38,176 --> 0:03:38,646
or Metal.

98
00:03:39,806 --> 0:03:41,356
In this context, we have

99
00:03:41,356 --> 0:03:42,696
provided you with some sample

100
00:03:42,696 --> 0:03:45,376
code on how to record a SceneKit

101
00:03:45,376 --> 0:03:48,266
scene into a HEVC video with

102
00:03:48,266 --> 0:03:50,706
Alpha and how to render another

103
00:03:50,996 --> 0:03:52,036
in a SpriteKit scene.

104
00:03:53,236 --> 0:03:55,336
On web pages, they could bring

105
00:03:55,336 --> 0:03:57,926
interactive elements to life.

106
00:03:58,316 --> 0:04:00,926
HEVC video with Alpha is

107
00:03:58,316 --> 0:04:00,926
HEVC video with Alpha is

108
00:04:00,926 --> 0:04:03,806
supported by Safari in iOS 13

109
00:04:04,016 --> 0:04:05,606
and macOS Catalina.

110
00:04:06,746 --> 0:04:08,826
Safari can also tell the web

111
00:04:08,826 --> 0:04:10,666
page whether this feature is

112
00:04:10,666 --> 0:04:11,206
supported.

113
00:04:12,906 --> 0:04:15,016
For more information on using

114
00:04:15,016 --> 0:04:17,956
the media capabilities API, be

115
00:04:17,956 --> 0:04:20,236
sure to check out the What's New

116
00:04:20,236 --> 0:04:22,696
in Authentication, Safari and

117
00:04:22,696 --> 0:04:23,746
WebKit video.

118
00:04:26,396 --> 0:04:29,236
The ability to distribute video

119
00:04:29,236 --> 0:04:32,166
with Alpha at low bitrates opens

120
00:04:32,166 --> 0:04:34,026
opportunities for authoring apps

121
00:04:34,346 --> 0:04:35,726
to provide background removal.

122
00:04:37,986 --> 0:04:40,206
Here I am in front of a green

123
00:04:40,206 --> 0:04:42,006
sheet hung from the wall

124
00:04:42,516 --> 0:04:43,826
recorded using an iPhone.

125
00:04:47,776 --> 0:04:53,366
I wish I was here.

126
00:04:53,486 --> 0:04:55,936
I used a custom video compositor

127
00:04:56,196 --> 0:04:58,356
with a co-image filter to

128
00:04:58,356 --> 0:05:00,096
replace the green pixels with

129
00:04:58,356 --> 0:05:00,096
replace the green pixels with

130
00:05:00,176 --> 0:05:02,786
transparency and exported it to

131
00:05:02,786 --> 0:05:03,856
a video with Alpha.

132
00:05:07,766 --> 0:05:10,096
I wish I was here.

133
00:05:13,046 --> 0:05:15,756
And now I can overlay this video

134
00:05:15,926 --> 0:05:17,186
on any background I like.

135
00:05:21,246 --> 0:05:23,606
I wish I was here.

136
00:05:25,736 --> 0:05:27,536
We are providing sample code

137
00:05:27,776 --> 0:05:30,066
showing how to do this and write

138
00:05:30,246 --> 0:05:32,366
the resulting HEVC video with

139
00:05:32,366 --> 0:05:33,156
Alpha movie.

140
00:05:35,116 --> 0:05:36,656
So how does this work?

141
00:05:37,906 --> 0:05:40,446
As you know, movie files contain

142
00:05:40,446 --> 0:05:42,556
tracks of various media types.

143
00:05:44,396 --> 0:05:46,766
A video track contains video

144
00:05:46,766 --> 0:05:47,196
frames.

145
00:05:48,406 --> 0:05:50,716
HEVC video with Alpha is

146
00:05:50,716 --> 0:05:52,876
contained inside a single video

147
00:05:52,876 --> 0:05:54,036
track in the movie.

148
00:05:56,136 --> 0:05:58,486
In the single track, each frame

149
00:05:58,606 --> 0:06:00,526
contains 2 parts called layers

150
00:05:58,606 --> 0:06:00,526
contains 2 parts called layers

151
00:06:01,186 --> 0:06:03,326
and each layer is compressed

152
00:06:03,326 --> 0:06:04,896
using the HEVC codec.

153
00:06:06,776 --> 0:06:08,876
The base layer contains the

154
00:06:08,876 --> 0:06:10,666
colored image of the frame as

155
00:06:10,666 --> 0:06:11,066
usual.

156
00:06:12,306 --> 0:06:14,716
The Alpha layer contains just

157
00:06:14,716 --> 0:06:16,266
the Alpha channel of the frame.

158
00:06:17,606 --> 0:06:20,076
This is done using special HEVC

159
00:06:20,076 --> 0:06:22,286
syntax which identifies the 2

160
00:06:22,286 --> 0:06:22,836
layers.

161
00:06:24,056 --> 0:06:26,506
The HEVC rules for this syntax

162
00:06:26,936 --> 0:06:29,326
mean that the HEVC decoder that

163
00:06:29,326 --> 0:06:31,276
does not know how to handle the

164
00:06:31,276 --> 0:06:33,956
Alpha layer will ignore it and

165
00:06:33,956 --> 0:06:35,336
display the base layer alone.

166
00:06:37,526 --> 0:06:39,826
Let's move along and talk about

167
00:06:39,826 --> 0:06:40,696
how to use it.

168
00:06:42,066 --> 0:06:44,456
HEVC with Alpha encoding is

169
00:06:44,456 --> 0:06:46,926
integrated into numerous AV

170
00:06:46,926 --> 0:06:48,236
Foundation APIs.

171
00:06:49,066 --> 0:06:50,786
Let's look at content creation,

172
00:06:50,786 --> 0:06:51,516
for example.

173
00:06:53,086 --> 0:06:55,026
You can render video frames with

174
00:06:55,026 --> 0:06:57,706
Alpha in your application and

175
00:06:57,706 --> 0:07:00,506
use AVAssetWriter to encode them

176
00:06:57,706 --> 0:07:00,506
use AVAssetWriter to encode them

177
00:07:00,686 --> 0:07:02,326
and write them to a movie file.

178
00:07:03,996 --> 0:07:05,516
You can use new presets

179
00:07:05,706 --> 0:07:06,516
available with

180
00:07:06,516 --> 0:07:08,896
AVAssetExportSession to

181
00:07:08,896 --> 0:07:10,926
transcode video formats

182
00:07:10,926 --> 0:07:13,716
containing Alpha including Apple

183
00:07:13,716 --> 0:07:16,966
ProRes 4444 into HEVC with

184
00:07:16,966 --> 0:07:17,406
Alpha.

185
00:07:18,706 --> 0:07:21,206
These new HEVC presets have the

186
00:07:21,206 --> 0:07:22,946
suffix with Alpha.

187
00:07:26,676 --> 0:07:27,786
You can also use

188
00:07:27,786 --> 0:07:30,786
AVAssettExportSession to burn

189
00:07:31,016 --> 0:07:32,886
in a specific background color

190
00:07:33,246 --> 0:07:35,606
converting a movie with Alpha

191
00:07:35,876 --> 0:07:38,556
into a movie without Alpha, that

192
00:07:38,556 --> 0:07:40,406
will play on players that don't

193
00:07:40,406 --> 0:07:42,026
support HEVC with Alpha.

194
00:07:45,046 --> 0:07:48,586
Or you can also use the HEVC

195
00:07:48,586 --> 0:07:50,376
with Alpha video encoder

196
00:07:50,596 --> 0:07:51,996
directly via

197
00:07:51,996 --> 0:07:53,256
VTCompressionSession.

198
00:07:57,246 --> 0:07:58,866
Looking at AVFoundation's

199
00:07:58,866 --> 0:08:02,706
playback APIs, HEVC with Alpha

200
00:07:58,866 --> 0:08:02,706
playback APIs, HEVC with Alpha

201
00:08:02,956 --> 0:08:05,556
is supported by AVPlayer and

202
00:08:05,556 --> 0:08:07,996
AVPlayerLayer for display in

203
00:08:07,996 --> 0:08:10,056
your apps view hierarchy via

204
00:08:10,056 --> 0:08:13,016
Core Animation, AppKit and UIKit.

205
00:08:14,676 --> 0:08:17,606
The video in AVPlayerLayer will

206
00:08:17,606 --> 0:08:19,506
be displayed with a transparent

207
00:08:19,506 --> 0:08:21,686
background and composed with the

208
00:08:21,686 --> 0:08:23,206
rest of the layers and views.

209
00:08:25,076 --> 0:08:27,766
Alternatively you can access a

210
00:08:27,766 --> 0:08:29,916
sequence of decoded video frames

211
00:08:30,146 --> 0:08:32,856
directly using 

212
00:08:32,976 --> 0:08:33,846
AVPlayerItemVideoOutput.

213
00:08:35,056 --> 0:08:36,856
This is a great choice when you

214
00:08:36,856 --> 0:08:38,616
want to incorporate those video

215
00:08:38,616 --> 0:08:40,846
frames into a custom rendering

216
00:08:40,846 --> 0:08:42,546
you're doing using Metal,

217
00:08:42,905 --> 0:08:45,046
SpriteKit and other GPU-based

218
00:08:45,046 --> 0:08:49,176
rendering APIs.

219
00:08:49,206 --> 0:08:51,246
If you need to decode frames for

220
00:08:51,246 --> 0:08:54,746
another purpose, you can use

221
00:08:54,746 --> 0:08:57,266
AVAssetImageGenerator directory

222
00:08:57,576 --> 0:08:59,436
and individual frame of the

223
00:08:59,436 --> 0:09:02,156
movie as a CGImage with Alpha.

224
00:08:59,436 --> 0:09:02,156
movie as a CGImage with Alpha.

225
00:09:03,766 --> 0:09:06,236
You can use AVAssetReader to

226
00:09:06,276 --> 0:09:09,186
extract video frames for use in

227
00:09:09,186 --> 0:09:10,496
a non-playback workflow.

228
00:09:13,226 --> 0:09:15,856
You can also use the HEVC with

229
00:09:15,856 --> 0:09:18,886
Alpha video decoder directly via

230
00:09:18,886 --> 0:09:20,416
VTDecompressionSession.

231
00:09:22,776 --> 0:09:25,776
In short because HEVC with Alpha

232
00:09:26,166 --> 0:09:28,746
is integrated into AVFoundation

233
00:09:28,836 --> 0:09:31,196
at the level of a video codec,

234
00:09:31,716 --> 0:09:33,796
it fits in well into all these

235
00:09:33,896 --> 0:09:35,486
familiar API workflows.

236
00:09:38,576 --> 0:09:40,536
Now let us see how we can

237
00:09:40,536 --> 0:09:42,106
accomplish this in code.

238
00:09:43,476 --> 0:09:45,846
When encoding a movie, when

239
00:09:45,846 --> 0:09:48,216
configuring your AVAssetWriter

240
00:09:48,266 --> 0:09:50,776
input or VTCompressionSession,

241
00:09:51,526 --> 0:09:55,036
use the video codec type HEVC

242
00:09:55,036 --> 0:09:55,716
with Alpha.

243
00:09:56,816 --> 0:09:59,236
This is a special signal that

244
00:09:59,236 --> 0:10:00,586
the Alpha channel should be

245
00:09:59,236 --> 0:10:00,586
the Alpha channel should be

246
00:10:00,586 --> 0:10:01,106
encoded.

247
00:10:01,976 --> 0:10:04,336
The encoded file will have the

248
00:10:04,336 --> 0:10:06,466
standard HEVC codec type.

249
00:10:07,286 --> 0:10:09,056
It will be backwards compatible.

250
00:10:09,916 --> 0:10:12,216
An HEVC player that does not

251
00:10:12,216 --> 0:10:14,286
understand Alpha will display

252
00:10:14,286 --> 0:10:15,756
only the base video layer.

253
00:10:16,396 --> 0:10:17,526
It will ignore the Alpha

254
00:10:17,526 --> 0:10:17,996
portion.

255
00:10:19,716 --> 0:10:21,306
If you work with Alpha channels,

256
00:10:21,966 --> 0:10:23,606
you may know that there are 2

257
00:10:23,606 --> 0:10:25,576
strategies for how to write

258
00:10:25,576 --> 0:10:27,086
video data to a file,

259
00:10:28,066 --> 0:10:30,636
premultiplied Alpha or straight

260
00:10:30,636 --> 0:10:32,206
Alpha, also known as

261
00:10:32,206 --> 0:10:33,956
unassociated Alpha or

262
00:10:33,956 --> 0:10:35,346
non-premultiplied Alpha.

263
00:10:36,416 --> 0:10:38,186
The tradeoffs between these

264
00:10:38,186 --> 0:10:40,316
choices are beyond the scope of

265
00:10:40,316 --> 0:10:40,996
this talk.

266
00:10:42,706 --> 0:10:44,086
If you're familiar with these,

267
00:10:44,756 --> 0:10:46,506
what you need to know is that

268
00:10:46,506 --> 0:10:47,416
both are supported.

269
00:10:49,366 --> 0:10:50,716
If you're not similar with

270
00:10:50,716 --> 0:10:52,996
these, we recommend the default,

271
00:10:53,446 --> 0:10:54,896
which is premultiplied Alpha.

272
00:10:55,536 --> 0:10:57,856
It's the natural choice in most

273
00:10:57,856 --> 0:10:59,906
GPU-based rendering parts and it

274
00:10:59,906 --> 0:11:00,736
scales better.

275
00:10:59,906 --> 0:11:00,736
scales better.

276
00:11:02,616 --> 0:11:05,036
Now looking at the code, you may

277
00:11:05,036 --> 0:11:07,606
specify the Alpha mode by either

278
00:11:07,606 --> 0:11:09,286
configuring the compression

279
00:11:09,286 --> 0:11:11,676
session or as a buffer

280
00:11:11,676 --> 0:11:12,306
attachment.

281
00:11:12,306 --> 0:11:15,606
As a safety mechanism if the

282
00:11:15,606 --> 0:11:17,206
setting and the buffer

283
00:11:17,206 --> 0:11:19,256
attachment are both specified

284
00:11:19,366 --> 0:11:21,246
and they do not match, the

285
00:11:21,246 --> 0:11:23,036
encoding operation will fail.

286
00:11:25,046 --> 0:11:26,996
Our APIs require the

287
00:11:26,996 --> 0:11:29,556
Alpha channel to be encoded with

288
00:11:29,556 --> 0:11:32,006
fixed quality because video

289
00:11:32,006 --> 0:11:34,176
encoding artifacts in the Alpha

290
00:11:34,176 --> 0:11:36,126
channel can be bothersome in

291
00:11:36,326 --> 0:11:37,986
ways that the same artifacts

292
00:11:38,286 --> 0:11:39,636
wouldn't be in the base layer.

293
00:11:40,746 --> 0:11:41,486
Our APIs let you

294
00:11:41,836 --> 0:11:44,136
control the base layers bitrate

295
00:11:44,476 --> 0:11:46,026
and the Alpha channel's quality

296
00:11:46,026 --> 0:11:49,876
separately if you need to.

297
00:11:50,076 --> 0:11:52,426
Now, looking at the code you can

298
00:11:52,426 --> 0:11:54,396
specify the Alpha layer quality

299
00:11:54,896 --> 0:11:56,876
using target quality for Alpha

300
00:11:56,876 --> 0:11:57,546
parameter.

301
00:11:59,376 --> 0:12:01,876
It is arranged between 0 and 1

302
00:11:59,376 --> 0:12:01,876
It is arranged between 0 and 1

303
00:12:02,436 --> 0:12:04,026
where 1 means it is close to

304
00:12:04,026 --> 0:12:04,596
lossless.

305
00:12:05,746 --> 0:12:07,036
The bitrate parameter you

306
00:12:07,036 --> 0:12:09,316
specify only applies to the base

307
00:12:09,316 --> 0:12:11,126
layer and is ignored by the

308
00:12:11,126 --> 0:12:11,846
Alpha layer.

309
00:12:13,546 --> 0:12:15,306
To detect the presence of an

310
00:12:15,306 --> 0:12:18,076
Alpha channel, you can either

311
00:12:18,076 --> 0:12:20,556
test AV media characteristic

312
00:12:21,016 --> 0:12:24,076
containsAlphaChannel or you

313
00:12:24,076 --> 0:12:26,506
can query the format description

314
00:12:26,506 --> 0:12:28,196
extension contains Alpha

315
00:12:28,196 --> 0:12:28,496
channel.

316
00:12:30,706 --> 0:12:33,286
If you are trying to export HEVC

317
00:12:33,286 --> 0:12:35,376
with Alpha movie, use to

318
00:12:35,376 --> 0:12:37,876
determine compatibility API to

319
00:12:37,876 --> 0:12:40,026
validate that Alpha is present

320
00:12:40,026 --> 0:12:40,886
in the source asset.

321
00:12:43,866 --> 0:12:45,636
This validation only takes the

322
00:12:45,636 --> 0:12:47,466
source movie into account not

323
00:12:47,466 --> 0:12:48,546
the video composition.

324
00:12:48,736 --> 0:12:51,046
So you must skip it if you are

325
00:12:51,046 --> 0:12:53,126
using a video composition to

326
00:12:53,126 --> 0:12:54,756
generate a new Alpha channel

327
00:12:55,206 --> 0:12:56,766
from sources that do not have

328
00:12:56,766 --> 0:12:57,476
Alpha channels.

329
00:12:59,466 --> 0:13:01,386
There are a lot of video players

330
00:12:59,466 --> 0:13:01,386
There are a lot of video players

331
00:13:01,386 --> 0:13:02,426
in the ecosystem.

332
00:13:03,676 --> 0:13:06,216
Many of them don't support HEVC

333
00:13:06,736 --> 0:13:08,586
let alone HEVC with Alpha.

334
00:13:10,096 --> 0:13:11,716
You can remove the Alpha channel

335
00:13:12,466 --> 0:13:14,426
by burning in a solid background

336
00:13:14,426 --> 0:13:14,896
color.

337
00:13:15,936 --> 0:13:17,616
We have added some convenience

338
00:13:17,616 --> 0:13:19,906
API and sample code to help

339
00:13:19,906 --> 0:13:21,196
simplify this conversion.

340
00:13:22,766 --> 0:13:24,156
If you're looking to build

341
00:13:24,156 --> 0:13:26,766
support into a non-Apple media

342
00:13:26,766 --> 0:13:28,806
framework, we have published a

343
00:13:28,806 --> 0:13:30,616
specification for an

344
00:13:30,616 --> 0:13:32,506
interoperability profile that

345
00:13:32,506 --> 0:13:34,476
you should read, but if you

346
00:13:34,476 --> 0:13:36,316
can't wait, here is a sneak

347
00:13:36,316 --> 0:13:37,000
peek.

348
00:13:43,296 --> 0:13:45,756
To summarize, HEVC video with

349
00:13:45,756 --> 0:13:47,676
Alpha is a cool new feature.

350
00:13:48,516 --> 0:13:50,596
It takes advantage of HEVC's

351
00:13:50,596 --> 0:13:52,716
state of the art compression

352
00:13:52,716 --> 0:13:53,316
technology.

353
00:13:54,676 --> 0:13:57,866
It is supported on iOS 13, tvOS

354
00:13:57,866 --> 0:13:59,916
13 and macOS Catalina.

355
00:14:01,226 --> 0:14:03,416
It takes advantage of hardware

356
00:14:03,416 --> 0:14:05,496
acceleration on recent devices.

357
00:14:06,886 --> 0:14:09,206
It is well integrated into

358
00:14:09,206 --> 0:14:11,436
AVFoundation for use in your apps.

359
00:14:12,686 --> 0:14:15,206
It is also integrated in Safari

360
00:14:15,206 --> 0:14:17,166
for use in your web experiences.

361
00:14:18,576 --> 0:14:21,526
HEVC with Alpha brings us new

362
00:14:21,526 --> 0:14:23,276
opportunities for creative

363
00:14:23,276 --> 0:14:25,286
expression for both developers

364
00:14:25,286 --> 0:14:26,216
and users alike.

365
00:14:26,886 --> 0:14:28,616
We can't wait to see the ways

366
00:14:28,676 --> 0:14:30,376
you can take advantage of it in

367
00:14:30,376 --> 0:14:30,766
your apps.

368
00:14:30,936 --> 0:14:31,976
Thank you for your time.
