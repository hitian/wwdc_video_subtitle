1
00:00:06,907 --> 0:00:10,878
（把对Mac引入iPad app

2
00:00:10,943 --> 0:00:12,112
下午好

3
00:00:16,750 --> 0:00:18,185
我是Jamie Montgomerie

4
00:00:18,252 --> 0:00:19,553
我来自UIKit团队

5
00:00:19,620 --> 0:00:22,322
我将和我的同事Glen、Nils

6
00:00:23,056 --> 0:00:24,625
与大家分享

7
00:00:24,691 --> 0:00:27,194
把对Mac引入iPad app

8
00:00:29,263 --> 0:00:31,965
在我们的第一场演讲关于对Mac

9
00:00:32,432 --> 0:00:33,534
我们讲了一些基本知识

10
00:00:33,600 --> 0:00:35,269
我们讲了如何创建app

11
00:00:35,335 --> 0:00:37,671
并讨论了一些你应该引起注意的

12
00:00:37,738 --> 0:00:38,572
主要的API的不同点

13
00:00:39,573 --> 0:00:41,775
在这场演讲中

14
00:00:42,075 --> 0:00:43,610
并让你的app更好地

15
00:00:44,077 --> 0:00:45,579
包括多平台之间的区别

16
00:00:46,046 --> 0:00:48,048
再提一下设计注意事项

17
00:00:48,949 --> 0:00:51,652
讲一下Mac上的app生命周期

18
00:00:52,085 --> 0:00:54,221
讨论如何分配你的app

19
00:00:54,288 --> 0:00:55,923
（让你的app更进一步

20
00:00:55,989 --> 0:00:56,857
（让你的UIKit app

21
00:00:56,924 --> 0:01:00,127
让我们讲一下让UIKit app

22
00:00:56,924 --> 0:01:00,127
让我们讲一下让UIKit app

23
00:01:01,128 --> 0:01:02,796
要记住的第一件事

24
00:01:03,297 --> 0:01:06,800
就是iPad版app越好

25
00:01:08,035 --> 0:01:09,803
我们会讲你可以采取的一些措施

26
00:01:09,870 --> 0:01:12,673
从而使你的app在iPad

27
00:01:12,739 --> 0:01:14,141
（iPad app越好

28
00:01:15,909 --> 0:01:18,312
在iPad上 你的app

29
00:01:18,378 --> 0:01:22,583
从iPad Mini中侧拉到漂亮

30
00:01:23,951 --> 0:01:25,853
但现在要在Mac上运行

31
00:01:25,919 --> 0:01:28,822
你的app可以在27英寸的

32
00:01:30,390 --> 0:01:32,292
它的屏幕尺寸比例因子是77%

33
00:01:33,660 --> 0:01:37,431
事实上 27英寸显示屏

34
00:01:38,465 --> 0:01:40,434
因此app非常适合那个窗口

35
00:01:41,468 --> 0:01:42,769
因此使用最佳范例

36
00:01:42,836 --> 0:01:44,771
支持动态类型并使用自动布局

37
00:01:45,239 --> 0:01:48,909
最后请记住 app在Mac上

38
00:01:49,576 --> 0:01:51,879
你的布局代码的运行速度

39
00:01:52,679 --> 0:01:55,782
如果不能 你应该使用我们的

40
00:01:57,384 --> 0:01:58,752
（实施强大的键盘支持）

41
00:01:58,819 --> 0:02:00,988
接下来实施强大的键盘支持

42
00:01:58,819 --> 0:02:00,988
接下来实施强大的键盘支持

43
00:02:01,655 --> 0:02:04,958
所有Mac都配有键盘

44
00:02:05,425 --> 0:02:08,228
现在iPad配有键盘的情况

45
00:02:09,196 --> 0:02:12,332
你可以用我们的UIKeyCommand类

46
00:02:13,534 --> 0:02:16,503
你可以在你的视图控制器中

47
00:02:16,570 --> 0:02:19,406
比如剪切、复制和粘贴方法

48
00:02:20,774 --> 0:02:22,609
并注意你的响应器ping

49
00:02:23,544 --> 0:02:26,380
设置第一响应器 从而容纳键盘命令

50
00:02:26,446 --> 0:02:27,781
这对于iPad也有帮助

51
00:02:29,316 --> 0:02:30,717
如果你的app是个游戏app

52
00:02:30,784 --> 0:02:33,720
对于你的iOS和Mac用户来说

53
00:02:33,787 --> 0:02:35,489
考虑支持游戏控制器会让体验变得

54
00:02:37,224 --> 0:02:38,525
（充分利用拖放）

55
00:02:39,960 --> 0:02:41,161
那么几年前

56
00:02:41,228 --> 0:02:43,764
我们在UIKit中引入了

57
00:02:44,598 --> 0:02:46,667
现在iPad用户期待能使用拖放

58
00:02:47,034 --> 0:02:49,369
而且Mac用户也期待很久了

59
00:02:50,838 --> 0:02:53,841
充分利用UI拖拽交互

60
00:02:53,907 --> 0:02:55,976
将取悦你的Mac和iPad用户

61
00:02:58,245 --> 0:02:59,346
（使用最新的API）

62
00:03:00,314 --> 0:03:01,748
这总是一个好建议

63
00:03:02,082 --> 0:03:03,650
使用最新的API

64
00:03:04,518 --> 0:03:05,752
如果你暂时还没有这样做

65
00:03:06,053 --> 0:03:07,821
现在是时候检验你的app了

66
00:03:08,088 --> 0:03:10,290
看看是否使用了弃用的API

67
00:03:11,692 --> 0:03:14,862
我说过这总是一个好建议

68
00:03:15,462 --> 0:03:17,297
正如我们在介绍演讲中所讨论的那样

69
00:03:17,364 --> 0:03:21,134
许多弃用的iOS API

70
00:03:22,269 --> 0:03:24,738
因此请使用WKWebView

71
00:03:25,138 --> 0:03:26,874
使用Metal

72
00:03:27,674 --> 0:03:30,143
我们一直在努力开发这些

73
00:03:30,210 --> 0:03:32,579
使用它们可以

74
00:03:32,646 --> 0:03:34,548
充分利用我们所做出的努力

75
00:03:38,752 --> 0:03:41,722
最后请支持我们的

76
00:03:42,990 --> 0:03:43,857
比如

77
00:03:43,924 --> 0:03:46,226
如果你在iPad app中

78
00:03:46,660 --> 0:03:49,329
每个UI窗口场景在Mac上

79
00:03:50,831 --> 0:03:55,769
在iPad上支持暗黑模式

80
00:03:56,937 --> 0:04:00,440
我本可以把它作为单独的一场演讲

81
00:03:56,937 --> 0:04:00,440
我本可以把它作为单独的一场演讲

82
00:04:00,741 --> 0:04:03,377
请浏览一下演讲目录

83
00:04:03,810 --> 0:04:06,747
请记住iPad版app越好

84
00:04:08,448 --> 0:04:09,850
（好的Mac app包含

85
00:04:10,717 --> 0:04:12,786
那么iPad版app越好

86
00:04:12,853 --> 0:04:15,722
但好的Mac app同时也包含

87
00:04:17,089 --> 0:04:19,993
我们要了解一下你可以采取哪些措施

88
00:04:20,060 --> 0:04:22,029
让你的UIKit app

89
00:04:23,363 --> 0:04:25,165
这里包含很多东西

90
00:04:25,232 --> 0:04:29,369
他们耗费了大量的精力

91
00:04:29,436 --> 0:04:31,038
来实现独一无二的Mac功能

92
00:04:32,105 --> 0:04:34,608
其中一些API

93
00:04:34,675 --> 0:04:37,177
或至少对于UIKit开发人员来说

94
00:04:38,712 --> 0:04:42,015
我们要快速看一下

95
00:04:43,550 --> 0:04:46,520
那么提到Mac独有功能

96
00:04:47,487 --> 0:04:49,590
对我来说 是菜单栏

97
00:04:50,958 --> 0:04:52,526
全局菜单栏是Mac所独有的功能

98
00:04:53,193 --> 0:04:55,529
它们存储用户在一个地方可以采取的

99
00:04:55,596 --> 0:04:57,965
并把它们在屏幕顶部整洁地隐藏起来

100
00:04:58,966 --> 0:05:00,167
它们对于app来说是全局性的

101
00:04:58,966 --> 0:05:00,167
它们对于app来说是全局性的

102
00:05:00,934 --> 0:05:03,871
并且其中的菜单项根据用户的行动

103
00:05:04,137 --> 0:05:05,239
被启用或禁用

104
00:05:06,607 --> 0:05:07,975
因此对于Mac上的

105
00:05:08,442 --> 0:05:09,877
你可以接受默认菜单栏

106
00:05:09,943 --> 0:05:11,311
不需要任何额外的工作

107
00:05:13,413 --> 0:05:16,116
你还可以在界面创建器中组建菜单栏

108
00:05:16,183 --> 0:05:17,618
就像我们在第一场演讲中

109
00:05:18,886 --> 0:05:21,321
或者对于字段控件

110
00:05:23,056 --> 0:05:24,892
那么我之前讲过

111
00:05:24,958 --> 0:05:27,528
如果你是个眼尖的API开发人员

112
00:05:27,594 --> 0:05:30,864
你会注意到

113
00:05:32,132 --> 0:05:36,603
与它一起的还有UIMenu

114
00:05:37,171 --> 0:05:39,673
功能是让你全权控制Mac菜单栏

115
00:05:40,474 --> 0:05:41,842
我们一会将看到一个

116
00:05:43,410 --> 0:05:44,878
关于这个API的一个好消息

117
00:05:45,345 --> 0:05:49,316
就是你在菜单中使用的

118
00:05:49,383 --> 0:05:51,652
当你按下Command键时

119
00:05:51,718 --> 0:05:53,187
将在发现生成器中显示

120
00:05:54,254 --> 0:05:57,157
因此如果你使用这个API

121
00:05:57,691 --> 0:05:59,426
你也可以用它来让你的

122
00:06:00,827 --> 0:06:02,095
（情境菜单）

123
00:06:03,063 --> 0:06:05,199
现在Mac中还有另一种菜单

124
00:06:05,732 --> 0:06:07,534
点Control或右击显示

125
00:06:08,368 --> 0:06:09,336
与主菜单不同

126
00:06:09,403 --> 0:06:10,470
它的内容是动态的

127
00:06:10,971 --> 0:06:12,372
它们基于鼠标指示下的内容

128
00:06:13,574 --> 0:06:17,144
在iOS 2中我们有一个强大的

129
00:06:17,511 --> 0:06:18,912
UIContextMenuInteraction

130
00:06:19,947 --> 0:06:22,816
它使用UICommand

131
00:06:23,350 --> 0:06:26,386
UIAction是基于区块的

132
00:06:27,654 --> 0:06:30,324
这个跨平台API在Mac上的功能

133
00:06:30,390 --> 0:06:32,326
显示我们都经常使用的情境菜单

134
00:06:33,794 --> 0:06:35,095
要了解更多关于这个API的信息

135
00:06:35,162 --> 0:06:36,163
你应该查看我们的

136
00:06:36,230 --> 0:06:39,099
针对iOS 13对你的UI

137
00:06:41,869 --> 0:06:43,003
（侧边栏）

138
00:06:43,837 --> 0:06:45,706
我们讲了一些新UIKit API

139
00:06:45,772 --> 0:06:47,441
这是一个老UIKit API

140
00:06:47,841 --> 0:06:48,809
UISplitViewController

141
00:06:50,043 --> 0:06:53,981
Mac上的侧边栏

142
00:06:54,314 --> 0:06:56,650
它们通常用于掌握UI的详情类型

143
00:06:57,951 --> 0:07:00,354
在Mac上UISplitViewController

144
00:06:57,951 --> 0:07:00,354
在Mac上UISplitViewController

145
00:07:00,420 --> 0:07:03,590
自动调整拖动尺寸

146
00:07:04,258 --> 0:07:07,327
你可以使用我们的新

147
00:07:07,394 --> 0:07:10,397
让左边的栏拥有Mac侧边栏的外观

148
00:07:11,865 --> 0:07:13,634
当你使用侧边栏背景样式时

149
00:07:14,034 --> 0:07:16,870
所嵌入的使用任意一个

150
00:07:16,937 --> 0:07:20,240
将呈现一个源列表 比如外观

151
00:07:20,974 --> 0:07:22,910
我们马上会在演示中看到这个

152
00:07:27,181 --> 0:07:28,882
iPad上不存在悬停

153
00:07:29,149 --> 0:07:31,385
但对于Mac用户来说却非常熟悉

154
00:07:32,452 --> 0:07:34,655
我们添加了一个

155
00:07:34,721 --> 0:07:36,190
UIHoverGestureRecognizer

156
00:07:36,857 --> 0:07:39,126
它允许你在UIKit app中

157
00:07:39,893 --> 0:07:41,128
在这个屏幕上

158
00:07:41,195 --> 0:07:43,530
你可以看到我们的股票app

159
00:07:44,164 --> 0:07:48,035
当用户在价格表上移动时显示价格

160
00:07:51,638 --> 0:07:53,040
（Mac工具栏）

161
00:07:54,341 --> 0:07:56,577
对于在Mac上完全不同的东西来说

162
00:07:56,643 --> 0:07:58,245
我们已经有了一些

163
00:07:59,012 --> 0:08:00,647
其中一个例子就是工具栏

164
00:07:59,012 --> 0:08:00,647
其中一个例子就是工具栏

165
00:08:01,281 --> 0:08:03,851
Mac app通常

166
00:08:05,252 --> 0:08:06,620
因为这是只有Mac才拥有的功能

167
00:08:06,920 --> 0:08:10,357
我们披露了仅适用于Mac的API

168
00:08:11,291 --> 0:08:14,728
你可以通过UIWindowScene的

169
00:08:15,829 --> 0:08:17,364
稍后也会有相关演示

170
00:08:19,433 --> 0:08:20,601
（触控栏）

171
00:08:21,335 --> 0:08:23,804
另一个Mac独有的栏是触控栏

172
00:08:24,705 --> 0:08:26,340
触控栏在Mac上

173
00:08:26,673 --> 0:08:28,642
在MacBook Pro上

174
00:08:28,709 --> 0:08:29,910
与情境菜单不同

175
00:08:30,277 --> 0:08:32,446
其中的内容取决于用户正在做的操作

176
00:08:33,847 --> 0:08:35,349
为了让你支持触控栏

177
00:08:35,414 --> 0:08:38,485
我们对UIKit app披露了

178
00:08:39,186 --> 0:08:42,923
它通过新的UIResponder

179
00:08:44,825 --> 0:08:46,026
（其它Mac功能）

180
00:08:46,827 --> 0:08:50,063
当然还有其它

181
00:08:50,898 --> 0:08:53,000
你可以控制窗口的尺寸调整

182
00:08:53,734 --> 0:08:57,104
你可以使用iOS打印API

183
00:08:58,338 --> 0:08:59,506
你可以出版一本帮助手册

184
00:08:59,573 --> 0:09:02,476
让你的用户直接从帮助菜单访问帮助

185
00:08:59,573 --> 0:09:02,476
让你的用户直接从帮助菜单访问帮助

186
00:09:03,277 --> 0:09:04,978
并且你可以自定义

187
00:09:05,379 --> 0:09:08,682
使你的app看起来

188
00:09:10,984 --> 0:09:12,219
（Mac app图标）

189
00:09:12,286 --> 0:09:13,287
现在 最后但并不是最不重要的

190
00:09:13,353 --> 0:09:15,088
我要提一下app图标

191
00:09:16,256 --> 0:09:18,592
如果你什么也不做 Mac版app

192
00:09:18,659 --> 0:09:19,793
将使用你iPad版app的图标

193
00:09:20,360 --> 0:09:22,396
但Mac的样式与

194
00:09:22,663 --> 0:09:25,933
因此你还可以给Mac版

195
00:09:27,100 --> 0:09:30,370
这听起来很微不足道

196
00:09:30,704 --> 0:09:32,873
因此我鼓励你们花点时间和努力

197
00:09:35,309 --> 0:09:36,476
（演示）

198
00:09:36,543 --> 0:09:38,278
现在我要向大家介绍

199
00:09:38,545 --> 0:09:42,049
他会给大家演示如何让iPad版

200
00:09:46,253 --> 0:09:47,487
谢谢Jaime

201
00:09:49,289 --> 0:09:50,624
正如我的同事刚说过的

202
00:09:51,325 --> 0:09:53,827
iPad版app越好

203
00:09:54,194 --> 0:09:55,829
让我们来看个例子

204
00:09:56,864 --> 0:09:59,466
在这里我们有一个叫做

205
00:09:59,766 --> 0:10:02,402
它是一款iPad app

206
00:09:59,766 --> 0:10:02,402
它是一款iPad app

207
00:10:03,504 --> 0:10:04,705
在之前的演示中

208
00:10:06,507 --> 0:10:07,474
我们所做的一切就是…

209
00:10:10,310 --> 0:10:11,378
好的 让我们等待它加载出来

210
00:10:12,279 --> 0:10:16,550
在之前的演示中

211
00:10:17,885 --> 0:10:22,389
修复所有的创建问题

212
00:10:26,360 --> 0:10:27,494
好的 要花一点时间

213
00:10:28,829 --> 0:10:29,897
正如你所看到的

214
00:10:29,963 --> 0:10:31,732
我们有了一个全新的Mac app

215
00:10:31,798 --> 0:10:34,168
拥有你所期待的

216
00:10:34,768 --> 0:10:38,839
比如 你可以四处拖动

217
00:10:40,040 --> 0:10:43,844
并且如果你支持不同的屏幕尺寸

218
00:10:43,911 --> 0:10:46,547
以及优化绘制

219
00:10:46,947 --> 0:10:51,985
你也会获得窗口快速、

220
00:10:53,720 --> 0:10:55,189
现在如果你实施它

221
00:10:55,255 --> 0:10:58,625
将在表视图控制器中回调现有移动

222
00:10:59,059 --> 0:11:03,830
你还可以在表视图控制器中

223
00:10:59,059 --> 0:11:03,830
你还可以在表视图控制器中

224
00:11:04,698 --> 0:11:06,834
而不需要进入单独的编辑模式

225
00:11:07,367 --> 0:11:08,435
那么这是个Mac功能

226
00:11:10,204 --> 0:11:15,042
接下来我们使用了新的

227
00:11:15,108 --> 0:11:16,310
是我们今年引入的API

228
00:11:17,377 --> 0:11:20,480
给它配置正确的UIAction

229
00:11:21,515 --> 0:11:25,152
然后就可以完美地把你的情境菜单

230
00:11:26,320 --> 0:11:28,322
因此在这里我得到了添加到收藏夹

231
00:11:29,056 --> 0:11:32,159
我可以把甜甜圈作为我的收藏

232
00:11:34,194 --> 0:11:35,429
现在谈谈菜单

233
00:11:36,697 --> 0:11:41,668
你还可以得到一个默认菜单栏

234
00:11:44,438 --> 0:11:45,339
你惯用的默认菜单项

235
00:11:45,405 --> 0:11:48,141
比如剪切、复制、粘贴、取消和重做

236
00:11:48,742 --> 0:11:52,145
这些项 菜单项的启用或禁用

237
00:11:52,212 --> 0:11:54,014
取决于响应器链上的东西

238
00:11:56,683 --> 0:12:02,289
最后如果你使用iOS中的

239
00:11:56,683 --> 0:12:02,289
最后如果你使用iOS中的

240
00:12:02,923 --> 0:12:06,093
并使用这些系统颜色

241
00:12:07,127 --> 0:12:10,097
那么暗黑模式效果也会很不错

242
00:12:11,231 --> 0:12:13,200
正如你所看到的 一切都变暗了

243
00:12:14,268 --> 0:12:15,502
并且你所有的颜色都已经设置好了

244
00:12:15,569 --> 0:12:18,405
而且你所有的突显

245
00:12:19,339 --> 0:12:21,742
而所有这一切

246
00:12:25,846 --> 0:12:26,914
是的 谢谢

247
00:12:30,617 --> 0:12:35,289
但如果你想把你的app

248
00:12:36,123 --> 0:12:39,393
如果你想让它在Mac上看起来

249
00:12:40,294 --> 0:12:41,228
我们要怎么做呢？

250
00:12:41,595 --> 0:12:43,830
嗯 今天让我们修复三个功能

251
00:12:44,965 --> 0:12:47,601
侧边栏、工具栏和菜单栏

252
00:12:48,769 --> 0:12:51,839
那么看起来

253
00:12:55,976 --> 0:12:57,244
是的 谢谢

254
00:13:00,914 --> 0:13:02,916
好的 第一件事是…

255
00:13:03,784 --> 0:13:06,353
请看这里的这个主视图

256
00:13:06,420 --> 0:13:10,190
这是常规的分屏控制器的主视图

257
00:13:10,958 --> 0:13:14,061
但它确实应该看起来像一个

258
00:13:14,561 --> 0:13:15,596
那么让我们设置…

259
00:13:15,996 --> 0:13:17,865
让我们看看如何设置工具栏的样式

260
00:13:19,666 --> 0:13:22,836
首先我们进入

261
00:13:22,903 --> 0:13:28,909
我们需要钩住viewDidLoad…

262
00:13:29,910 --> 0:13:33,714
在这里 我们的调用必须针对Mac

263
00:13:34,715 --> 0:13:37,518
从而它只应用于Mac创建

264
00:13:38,719 --> 0:13:43,390
我们只需要插入一个

265
00:13:44,558 --> 0:13:47,661
以及你知道的 侧边栏的一个新枚举

266
00:13:48,562 --> 0:13:51,865
那么通过这一行代码 我们现在有…

267
00:13:54,234 --> 0:13:55,536
我们进行了快速重新创建

268
00:13:57,471 --> 0:13:59,339
我们现在有侧边栏样式了

269
00:14:00,340 --> 0:14:04,444
只是为了给你展示它的样子

270
00:14:04,511 --> 0:14:05,946
它真的看起来像是个侧边栏

271
00:14:06,280 --> 0:14:08,715
当我四处移动它时

272
00:14:09,149 --> 0:14:10,083
你可以看到它有侧边栏的半透明性

273
00:14:11,785 --> 0:14:14,588
你还可以设置侧边栏的其它特性

274
00:14:14,922 --> 0:14:17,758
在通用偏好中 设置侧边栏图标尺寸

275
00:14:18,425 --> 0:14:19,993
在这里我把它设置为小图标

276
00:14:20,394 --> 0:14:22,429
你可以看到它进行了动态更新

277
00:14:23,163 --> 0:14:24,198
你还可以把它设为大图标

278
00:14:25,599 --> 0:14:26,533
我要把它设为中图标

279
00:14:27,267 --> 0:14:28,402
跟以前一样

280
00:14:29,303 --> 0:14:31,605
重排序…跟以前一样

281
00:14:34,508 --> 0:14:35,409
好的

282
00:14:37,778 --> 0:14:39,713
抱歉 返回到app中

283
00:14:42,082 --> 0:14:44,051
接下来 我们应该有一个工具栏

284
00:14:44,618 --> 0:14:47,888
我们有整合到标题栏中的许多小工具

285
00:14:48,488 --> 0:14:49,523
因此…

286
00:14:51,325 --> 0:14:53,760
用户可以点击他们常用的命令

287
00:14:54,528 --> 0:14:56,530
现在这与iOS不同

288
00:14:56,597 --> 0:15:00,300
工具栏一般处于app底部

289
00:14:56,597 --> 0:15:00,300
工具栏一般处于app底部

290
00:15:01,335 --> 0:15:03,904
我们有一个用于筛选菜谱的小工具

291
00:15:04,605 --> 0:15:07,207
我们还有一个

292
00:15:07,808 --> 0:15:08,909
因此让我们看看该如何实现

293
00:15:11,612 --> 0:15:13,247
我们要进入场景委托

294
00:15:13,881 --> 0:15:15,649
在这里在场景委托中

295
00:15:16,149 --> 0:15:19,119
我们要钩住场景

296
00:15:20,888 --> 0:15:25,325
我们要对UIKitForMac

297
00:15:25,692 --> 0:15:26,960
从而使它只在Mac中应用

298
00:15:28,295 --> 0:15:32,366
我们要深入到场景的对象模型中…

299
00:15:33,166 --> 0:15:35,802
并获取这个叫做

300
00:15:36,069 --> 0:15:37,671
Titlebar允许我们设置

301
00:15:38,472 --> 0:15:42,209
工具栏以及修改标题栏是否可见

302
00:15:42,843 --> 0:15:46,146
因此让我们创建一个新工具栏

303
00:15:49,917 --> 0:15:54,087
请注意

304
00:15:54,154 --> 0:15:55,956
这实际上是一个AppKit对象

305
00:15:58,458 --> 0:15:59,893
我需要给它赋予一个标识符

306
00:16:01,195 --> 0:16:05,499
之前我已经设置好一个标识符了

307
00:16:06,900 --> 0:16:09,102
现在我所需要做的就是标题栏

308
00:16:09,536 --> 0:16:12,573
我想把工具栏设置到

309
00:16:13,407 --> 0:16:14,608
那么通过这两行代码

310
00:16:15,075 --> 0:16:16,443
我现在已经创建了一个

311
00:16:17,110 --> 0:16:18,445
附加到标题栏上的工具栏

312
00:16:20,147 --> 0:16:22,316
但这个代码并不是特别有意思

313
00:16:22,382 --> 0:16:24,484
或者结果并不是特别有意思 因为

314
00:16:25,085 --> 0:16:27,521
我们实际上需要配置实际项的工具栏

315
00:16:28,021 --> 0:16:29,223
让我们看看如何实现

316
00:16:35,896 --> 0:16:37,397
我要让你来分配这个代码

317
00:16:38,599 --> 0:16:41,602
首先 我们要获取…我们需要获取

318
00:16:42,703 --> 0:16:46,540
然后我们把它传给

319
00:16:46,607 --> 0:16:47,975
它是我们创建的一个类

320
00:16:49,443 --> 0:16:50,511
然后我们设置委托

321
00:16:51,278 --> 0:16:54,648
我们想让用户自定义工具栏

322
00:16:55,482 --> 0:16:58,252
我们还想使

323
00:16:58,318 --> 0:17:00,153
navigationItem

324
00:16:58,318 --> 0:17:00,153
navigationItem

325
00:17:01,121 --> 0:17:06,393
最后我想把

326
00:17:06,460 --> 0:17:08,862
从而标题不会覆盖…

327
00:17:10,329 --> 0:17:12,833
我刚才所创建的导航项

328
00:17:14,134 --> 0:17:18,739
通过迅速重编译和创建

329
00:17:19,573 --> 0:17:20,840
我们现在有工具栏了

330
00:17:22,175 --> 0:17:26,646
你可以看到工具栏有

331
00:17:26,713 --> 0:17:30,450
因此 你知道的 对于早餐

332
00:17:32,252 --> 0:17:33,453
对于午餐 我想吃披萨

333
00:17:34,655 --> 0:17:36,089
对于晚餐 我想吃意面

334
00:17:36,723 --> 0:17:38,926
对于甜点 我很可能不想再吃意面了

335
00:17:40,827 --> 0:17:41,962
哇哦 是巧克力片饼干

336
00:17:44,932 --> 0:17:47,868
是的 我们还有一个加号小工具

337
00:17:47,935 --> 0:17:49,469
或添加菜谱项小工具

338
00:17:50,070 --> 0:17:53,807
允许我们添加新菜谱

339
00:17:55,609 --> 0:17:56,577
好的

340
00:17:58,145 --> 0:18:02,015
最后我们实际上还应该自定义菜单栏

341
00:17:58,145 --> 0:18:02,015
最后我们实际上还应该自定义菜单栏

342
00:18:02,082 --> 0:18:06,753
从而使用户们可以在便利的位置

343
00:18:07,387 --> 0:18:10,457
你可以在菜单栏中放置

344
00:18:10,524 --> 0:18:13,026
系统会相应地启用或禁用它们

345
00:18:13,694 --> 0:18:17,865
与此相对的是在工具栏中

346
00:18:19,433 --> 0:18:20,701
在介绍演讲中

347
00:18:21,034 --> 0:18:22,769
我们讲了如何在工具栏中放常用命令

348
00:18:23,303 --> 0:18:26,573
通过从Xcode界面创建器中

349
00:18:27,207 --> 0:18:30,911
但有时你想在运行时

350
00:18:31,278 --> 0:18:32,946
因此我要告诉你如何通过代码实现

351
00:18:34,481 --> 0:18:35,616
我们要做什么？

352
00:18:35,682 --> 0:18:37,317
我们要移除格式按钮

353
00:18:37,584 --> 0:18:41,188
因为格式按钮看起来用处不大

354
00:18:42,422 --> 0:18:43,957
因为这个app没有

355
00:18:44,625 --> 0:18:49,630
因此在字体菜单或甚至是文本对齐

356
00:18:51,098 --> 0:18:54,801
我们还要向文件菜单中

357
00:18:55,502 --> 0:18:59,840
那么在这里

358
00:18:59,907 --> 0:19:03,110
类似于这里的添加菜谱小工具

359
00:18:59,907 --> 0:19:03,110
类似于这里的添加菜谱小工具

360
00:19:05,012 --> 0:19:09,183
我们还要添加一个命令

361
00:19:09,249 --> 0:19:12,920
类似于这里的情境菜单

362
00:19:14,755 --> 0:19:16,523
好了 让我们看看要如何实现

363
00:19:20,294 --> 0:19:21,628
我们要进入app委托

364
00:19:22,396 --> 0:19:25,532
在这里在app委托中

365
00:19:30,304 --> 0:19:33,473
这个方法是带有创建器的

366
00:19:34,041 --> 0:19:35,776
它传递一个

367
00:19:36,410 --> 0:19:37,811
在后续的种子中

368
00:19:37,878 --> 0:19:40,848
这将被叫做buildMenu

369
00:19:41,748 --> 0:19:45,986
buildMenu带有创建器

370
00:19:46,053 --> 0:19:50,858
因此请注意

371
00:19:52,092 --> 0:19:55,128
你需要做的第一件事就是

372
00:19:55,195 --> 0:19:56,330
创建主菜单

373
00:19:56,930 --> 0:20:00,968
在这里我们要检查系统是否为主系统

374
00:19:56,930 --> 0:20:00,968
在这里我们要检查系统是否为主系统

375
00:20:01,602 --> 0:20:04,071
有时候你会得到

376
00:20:04,137 --> 0:20:06,173
如果你创建的是情境菜单

377
00:20:08,041 --> 0:20:09,977
于是我们需要与创建器沟通

378
00:20:10,577 --> 0:20:14,081
那么创建器 我想移除

379
00:20:16,049 --> 0:20:17,117
一个特定菜单

380
00:20:18,085 --> 0:20:21,088
在这里我想要移除的这个菜单

381
00:20:21,154 --> 0:20:24,124
正如你所看到的

382
00:20:24,625 --> 0:20:29,296
并建议你实际上可以移除哪种菜单

383
00:20:32,065 --> 0:20:35,636
快速创建和运行

384
00:20:36,236 --> 0:20:38,338
你可以看到

385
00:20:38,605 --> 0:20:39,840
移除了格式菜单

386
00:20:41,842 --> 0:20:43,877
让我们返回去看这个

387
00:20:44,778 --> 0:20:46,613
创建器实际上非常灵活

388
00:20:46,680 --> 0:20:49,950
你可以实现一切操作

389
00:20:50,350 --> 0:20:52,619
到做出选择性编辑

390
00:20:56,223 --> 0:20:59,026
好的 我要做的下一件事是

391
00:20:59,793 --> 0:21:04,097
让我们与创建器沟通一下

392
00:20:59,793 --> 0:21:04,097
让我们与创建器沟通一下

393
00:21:04,898 --> 0:21:09,903
插入到这里的文件菜单中

394
00:21:12,206 --> 0:21:13,707
这个内容怎么样？

395
00:21:16,777 --> 0:21:21,248
在这里我有一些

396
00:21:21,748 --> 0:21:23,417
要添加的命令

397
00:21:24,051 --> 0:21:25,786
第一个是

398
00:21:26,453 --> 0:21:33,293
它是一个关键命令

399
00:21:34,895 --> 0:21:39,733
它是一个关键命令

400
00:21:39,800 --> 0:21:41,001
和命令及选项

401
00:21:41,068 --> 0:21:44,571
因此如果你按命令选项f

402
00:21:44,638 --> 0:21:45,672
这个UIKeyCommand

403
00:21:46,240 --> 0:21:49,109
拥有UIKeyCommand

404
00:21:50,310 --> 0:21:51,578
它是一个完美的跨平台命令

405
00:21:51,645 --> 0:21:53,413
它还将出现在 你知道的

406
00:21:53,480 --> 0:21:57,918
在iPad上可暴露性视图

407
00:21:58,352 --> 0:22:00,921
因此不需要条件化任何代码

408
00:21:58,352 --> 0:22:00,921
因此不需要条件化任何代码

409
00:22:00,988 --> 0:22:03,323
它在Mac和iOS上都能用

410
00:22:05,893 --> 0:22:09,096
接下来我们可以创建

411
00:22:09,763 --> 0:22:12,499
这只是一个常规的命令

412
00:22:13,667 --> 0:22:18,472
它会进入toggleSelected

413
00:22:20,574 --> 0:22:21,808
最后我们要做一个菜单

414
00:22:21,875 --> 0:22:25,879
它是一个结构 把新命令…

415
00:22:25,946 --> 0:22:27,881
newRecipeCommand和

416
00:22:28,949 --> 0:22:32,386
这里要突出一件事

417
00:22:32,886 --> 0:22:36,423
因此菜单将被显示…

418
00:22:36,890 --> 0:22:39,459
菜单中的内容将

419
00:22:40,594 --> 0:22:42,129
如果你漏掉了这些选项

420
00:22:42,763 --> 0:22:45,966
菜单项将被作为分层菜单显示

421
00:22:46,033 --> 0:22:48,168
你可能会在Mac上使用分层菜单

422
00:22:49,803 --> 0:22:52,239
好的 让我们看看它是什么样子的

423
00:22:55,042 --> 0:22:56,577
我们把这个插入到…

424
00:22:56,643 --> 0:22:57,744
插入文件菜单的开端

425
00:22:59,780 --> 0:23:01,982
好的 我们进行了迅速的创建并运行

426
00:22:59,780 --> 0:23:01,982
好的 我们进行了迅速的创建并运行

427
00:23:04,218 --> 0:23:07,821
你可以看到

428
00:23:07,888 --> 0:23:10,090
与那个加号小工具的功能一样

429
00:23:11,592 --> 0:23:13,060
它还有一个添加收藏

430
00:23:13,861 --> 0:23:18,198
它会给巧克力片添加一个心形

431
00:23:18,966 --> 0:23:20,534
我们也可以移除收藏

432
00:23:21,268 --> 0:23:26,740
总之 我给你们展示的是

433
00:23:27,674 --> 0:23:31,044
仅通过在Mac上重新创建iPad app

434
00:23:31,545 --> 0:23:34,381
我还会给你们展示侧边栏、

435
00:23:34,681 --> 0:23:38,752
工具栏和菜单栏

436
00:23:39,052 --> 0:23:39,887
提升到下一个层级

437
00:23:40,487 --> 0:23:43,891
那么舞台交还给Jamie

438
00:23:48,161 --> 0:23:49,363
谢谢Glen

439
00:23:53,233 --> 0:23:55,702
那么现在我们要讲一些技术细节

440
00:23:55,769 --> 0:23:57,504
关于让你的iPad app

441
00:23:58,138 --> 0:24:00,874
让我们先来看一些设计考量

442
00:23:58,138 --> 0:24:00,874
让我们先来看一些设计考量

443
00:24:03,644 --> 0:24:04,912
首先是导航

444
00:24:05,779 --> 0:24:08,715
思考一下用户如何在你的app中

445
00:24:09,683 --> 0:24:12,219
如果你还没有考虑过在Mac上

446
00:24:12,519 --> 0:24:14,421
也许还没考虑过在iPad上

447
00:24:15,756 --> 0:24:17,758
请重新考虑标签栏的使用

448
00:24:18,225 --> 0:24:20,661
在Mac上 你应该考虑在工具栏中

449
00:24:20,727 --> 0:24:21,862
使用分段控制来代替

450
00:24:25,399 --> 0:24:26,300
（布局）

451
00:24:26,366 --> 0:24:29,503
接下来是布局

452
00:24:30,070 --> 0:24:33,207
它在你的布局中应该具有灵活性

453
00:24:34,408 --> 0:24:36,643
你还可以重新排版和重新设计

454
00:24:36,977 --> 0:24:40,113
并且你可以使用自定义资产

455
00:24:40,414 --> 0:24:41,949
或只是为了利用空间

456
00:24:44,184 --> 0:24:45,452
（排版）

457
00:24:46,486 --> 0:24:49,089
iPad设计比Mac设计要大得多

458
00:24:49,156 --> 0:24:50,224
它针对触摸进行了优化

459
00:24:51,091 --> 0:24:52,693
因此基础字号不一样

460
00:24:52,960 --> 0:24:55,462
在iOS上 大部分文本是17点

461
00:24:55,963 --> 0:24:57,464
而在Mac上是13点

462
00:24:58,565 --> 0:25:01,969
因此相对于它在

463
00:24:58,565 --> 0:25:01,969
因此相对于它在

464
00:25:02,269 --> 0:25:04,204
我们替你把UIKit内容缩小为

465
00:25:05,405 --> 0:25:09,243
这意味着在屏幕上

466
00:25:09,877 --> 0:25:13,780
即使是UIKit app中的位图

467
00:25:14,114 --> 0:25:15,983
AppKit app

468
00:25:17,317 --> 0:25:19,486
因为缩放对于app来说是全局性的

469
00:25:19,553 --> 0:25:21,088
在绝大部分情况下 你不需要担心它

470
00:25:22,422 --> 0:25:25,792
如果你真的想要更直接的控制

471
00:25:26,326 --> 0:25:29,329
你应该了解一下

472
00:25:29,696 --> 0:25:30,697
并学习如何去实现

473
00:25:32,366 --> 0:25:33,500
（菜单栏）

474
00:25:33,834 --> 0:25:34,801
菜单栏

475
00:25:35,068 --> 0:25:37,971
我们讲了如何做菜单栏

476
00:25:39,373 --> 0:25:41,842
我提到过菜单把所有可能的动作

477
00:25:42,209 --> 0:25:45,646
对于app来说它是全局性的

478
00:25:45,712 --> 0:25:47,681
并且根据用户正在执行的动作

479
00:25:48,615 --> 0:25:50,951
这意味着菜单中的内容

480
00:25:51,518 --> 0:25:53,520
你只需要在启动时进行一次性创建

481
00:25:54,555 --> 0:25:57,324
你真的应该考虑你app的所有功能

482
00:25:57,691 --> 0:25:59,893
并确保它们均可通过菜单栏可用

483
00:26:01,628 --> 0:26:02,863
（输入）

484
00:26:04,231 --> 0:26:06,366
我们刚讲了iPad

485
00:26:07,201 --> 0:26:09,803
iPad所特有的一个功能是

486
00:26:10,604 --> 0:26:11,872
Mac并没有这个功能

487
00:26:11,939 --> 0:26:14,675
但它却总是配有键盘和鼠标或触控板

488
00:26:15,943 --> 0:26:17,578
你应该考虑要如何把

489
00:26:17,644 --> 0:26:20,180
你app中所使用的手势

490
00:26:21,048 --> 0:26:23,717
在Mac上针对鼠标和触控板

491
00:26:24,618 --> 0:26:27,154
当你这样做时

492
00:26:29,723 --> 0:26:32,159
那对于设计话题来说只是冰山一角

493
00:26:32,459 --> 0:26:34,628
在Mac人机界面指南中

494
00:26:34,695 --> 0:26:36,597
还有大量关于设备上的有用信息

495
00:26:37,164 --> 0:26:39,032
当你设计你的app时

496
00:26:39,867 --> 0:26:43,237
并且我鼓励你们观看

497
00:26:43,937 --> 0:26:46,974
它包含许多很不错的建议

498
00:26:47,040 --> 0:26:48,008
成为一个不错的Mac app

499
00:26:48,775 --> 0:26:49,943
（更多设计资源）

500
00:26:51,044 --> 0:26:54,848
现在我们讲了把iPad app

501
00:26:55,148 --> 0:26:56,517
我要向大家介绍Nils

502
00:26:56,884 --> 0:26:59,586
他会讲Mac上UIKit app

503
00:27:00,087 --> 0:27:01,154
App生命周期

504
00:27:01,855 --> 0:27:02,990
（app生命周期）

505
00:27:04,658 --> 0:27:05,759
谢谢Jamie

506
00:27:06,393 --> 0:27:08,695
大家下午好

507
00:27:09,296 --> 0:27:11,164
我是AppKit框架团队的工程师

508
00:27:11,431 --> 0:27:13,066
今天我很激动

509
00:27:13,567 --> 0:27:16,737
我要跟大家分享Mac版iPad

510
00:27:18,839 --> 0:27:22,242
当我们把iOS上app生命周期

511
00:27:22,743 --> 0:27:24,011
我们发现它们有不同之处

512
00:27:24,578 --> 0:27:26,446
一些iOS专有的行为

513
00:27:26,513 --> 0:27:28,348
在UIKit API中有所体现

514
00:27:29,550 --> 0:27:32,619
在Mac上运行iPad app时

515
00:27:33,754 --> 0:27:37,891
我们要如何把macOS app

516
00:27:41,328 --> 0:27:43,964
让我们首先回顾一下

517
00:27:44,031 --> 0:27:45,265
iOS上的app生命周期状态

518
00:27:46,133 --> 0:27:47,568
你可以顺着图表看

519
00:27:47,634 --> 0:27:49,336
它会在右手边显示

520
00:27:49,403 --> 0:27:50,537
（app生命周期状态）

521
00:27:51,004 --> 0:27:52,306
当你的app出现在屏幕上时

522
00:27:52,372 --> 0:27:55,108
人们通常会在iPad上

523
00:27:55,509 --> 0:27:57,511
它既处于前台又是激活状态

524
00:27:59,746 --> 0:28:02,149
当有东西遮盖它时

525
00:27:59,746 --> 0:28:02,149
当有东西遮盖它时

526
00:28:02,616 --> 0:28:05,719
你app是非激活状态但仍处于前台

527
00:28:06,920 --> 0:28:08,288
这通常是暂时情况

528
00:28:08,655 --> 0:28:11,391
比如当控制中心

529
00:28:14,161 --> 0:28:15,429
一旦你的app处于后台

530
00:28:15,829 --> 0:28:17,464
用户就不再与之进行交互

531
00:28:18,298 --> 0:28:20,567
比如他们可能使用了任务切换器

532
00:28:20,634 --> 0:28:22,169
并侧滑到一个不同的app

533
00:28:23,270 --> 0:28:26,173
但你仍然可以实施后台任务完成

534
00:28:26,573 --> 0:28:29,142
并且当没有任何残余的后台任务时

535
00:28:31,078 --> 0:28:32,145
一旦被暂停使用

536
00:28:32,479 --> 0:28:34,848
你的app就被冻住了

537
00:28:35,782 --> 0:28:36,717
此时

538
00:28:36,783 --> 0:28:40,220
它可能在任一时刻就被系统终止

539
00:28:42,055 --> 0:28:43,156
最后

540
00:28:43,223 --> 0:28:46,026
当它甚至都不处于内存中时

541
00:28:49,029 --> 0:28:50,130
把这些总结在一起

542
00:28:50,197 --> 0:28:52,299
让我们看看你能看到的

543
00:28:52,599 --> 0:28:55,169
无论是在iOS或是

544
00:28:56,069 --> 0:28:57,504
我马上会带你们具体看这些

545
00:28:57,938 --> 0:29:00,607
但首先我要请你们注意…

546
00:28:57,938 --> 0:29:00,607
但首先我要请你们注意…

547
00:29:00,674 --> 0:29:01,808
但首先我要讲

548
00:29:02,142 --> 0:29:06,747
Mac上的iPad app

549
00:29:06,813 --> 0:29:07,681
相同的委托调用和通知

550
00:29:10,350 --> 0:29:12,419
你可能习惯在app委托方法中

551
00:29:12,486 --> 0:29:13,720
处理这些状态变更

552
00:29:13,987 --> 0:29:16,723
但它们还存在于这里所显示的

553
00:29:18,425 --> 0:29:20,360
我们推荐使用这些通知

554
00:29:20,794 --> 0:29:24,531
因为它们甚至当你

555
00:29:24,965 --> 0:29:27,100
而在多窗口API中

556
00:29:28,135 --> 0:29:29,203
顺便提一下 这与iOS上相同

557
00:29:30,604 --> 0:29:33,974
同时 多窗口app中

558
00:29:34,374 --> 0:29:37,077
取决于单个场景的激活状态

559
00:29:38,078 --> 0:29:40,981
因此你很可能想按场景

560
00:29:42,115 --> 0:29:45,352
但在此演讲中

561
00:29:47,387 --> 0:29:49,923
除了委托调用和通知

562
00:29:50,324 --> 0:29:53,060
在macOS上这些状态变更的顺序

563
00:29:53,126 --> 0:29:54,628
也与iPad上一样

564
00:29:56,330 --> 0:29:57,631
我刚刚承诺过

565
00:29:58,031 --> 0:30:01,602
让我们具体看看

566
00:29:58,031 --> 0:30:01,602
让我们具体看看

567
00:30:03,303 --> 0:30:04,505
启动时

568
00:30:04,571 --> 0:30:07,708
你会看到didFinishLaunching

569
00:30:10,911 --> 0:30:13,313
退出时你会看到

570
00:30:13,580 --> 0:30:14,648
和didEnterBackground

571
00:30:17,518 --> 0:30:19,119
你还会得到

572
00:30:19,586 --> 0:30:21,688
如果我们确定app正在退出

573
00:30:22,089 --> 0:30:23,757
并且你的app

574
00:30:25,826 --> 0:30:26,760
最后

575
00:30:26,827 --> 0:30:28,829
在从后台状态返回时

576
00:30:28,896 --> 0:30:31,832
你会看到willEnterForeground

577
00:30:34,368 --> 0:30:37,838
因为通知和顺序在两个平台上都相同

578
00:30:38,272 --> 0:30:41,175
当这些转换发生在macOS上时

579
00:30:42,376 --> 0:30:43,544
我们稍后再讲这个

580
00:30:45,746 --> 0:30:47,214
现在返回到iOS中

581
00:30:47,548 --> 0:30:50,751
我们建议你的代码应该

582
00:30:50,817 --> 0:30:51,718
以某种方式响应这些状态变更

583
00:30:52,252 --> 0:30:55,522
比如当你通过

584
00:30:55,856 --> 0:30:57,824
了解你的app的钝化时

585
00:30:58,525 --> 0:31:00,627
你希望在其它东西之间

586
00:30:58,525 --> 0:31:00,627
你希望在其它东西之间

587
00:31:01,128 --> 0:31:03,730
减少在屏幕上的内容的帧频

588
00:31:04,698 --> 0:31:06,900
停止各种不必要的工作

589
00:31:07,301 --> 0:31:10,304
比如计时器、队列和查询

590
00:31:11,371 --> 0:31:12,973
可能还有其它副作用

591
00:31:13,473 --> 0:31:16,443
比如你可能希望暂停游戏

592
00:31:16,510 --> 0:31:17,911
（响应状态变更）

593
00:31:18,846 --> 0:31:21,548
类似地 当你的app

594
00:31:21,615 --> 0:31:23,350
通过didEnterBackgroundNotification

595
00:31:23,884 --> 0:31:27,721
在iOS上 你的app

596
00:31:28,288 --> 0:31:31,358
把CPU的使用减少为最小

597
00:31:31,892 --> 0:31:34,094
并释放尽可能多的内存

598
00:31:35,395 --> 0:31:37,297
可能还有其它副作用

599
00:31:38,198 --> 0:31:41,335
比如 如果屏幕上的内容是私密内容

600
00:31:41,735 --> 0:31:44,137
你可能想在屏幕截图之前

601
00:31:45,639 --> 0:31:46,773
（你的iPad app

602
00:31:47,207 --> 0:31:50,944
现在当你把iPad app

603
00:31:51,011 --> 0:31:53,013
我们不希望你修改

604
00:31:54,047 --> 0:31:57,384
但运行在macOS上的iPad

605
00:31:58,552 --> 0:31:59,553
那会发生什么改变？

606
00:32:00,654 --> 0:32:02,456
这是一些针对Mac的考量

607
00:32:04,691 --> 0:32:07,628
许多Mac app

608
00:32:10,230 --> 0:32:12,232
其中一个app是处于最前的app

609
00:32:12,566 --> 0:32:15,169
那意味着它接收关键事件

610
00:32:15,569 --> 0:32:17,004
并且显示它的菜单栏

611
00:32:17,604 --> 0:32:18,539
（Mac OS考量）

612
00:32:20,340 --> 0:32:23,577
许多事都会影响

613
00:32:24,511 --> 0:32:27,447
比如一个窗口可能被另一个窗口挡住

614
00:32:28,215 --> 0:32:30,617
或窗口可能最小化到程序坞

615
00:32:31,351 --> 0:32:33,820
或它甚至可能完全处于另一个空间

616
00:32:36,823 --> 0:32:40,561
app还可能由于其它原因

617
00:32:40,627 --> 0:32:41,662
不在屏幕上显示内容

618
00:32:42,196 --> 0:32:44,131
比如整个app可能隐藏起来了

619
00:32:44,965 --> 0:32:47,401
或它可能目前只是没有任何窗口显示

620
00:32:48,302 --> 0:32:51,738
或你的app甚至可能

621
00:32:51,805 --> 0:32:55,509
在后台登录会话中运行

622
00:32:56,143 --> 0:32:58,445
在其中一个深夜调试会话中

623
00:32:58,512 --> 0:33:00,480
你可能正在通过VNC进行访问

624
00:32:58,512 --> 0:33:00,480
你可能正在通过VNC进行访问

625
00:33:01,682 --> 0:33:02,816
（状态变更对

626
00:33:02,883 --> 0:33:05,886
不管它们的最前状态和内容可用性

627
00:33:06,220 --> 0:33:10,023
Mac app通常不希望

628
00:33:10,090 --> 0:33:12,326
彻底改变它们的行为

629
00:33:14,027 --> 0:33:17,764
所有运行的app都要做

630
00:33:19,166 --> 0:33:22,035
同时 你希望处于最前的app

631
00:33:22,336 --> 0:33:26,273
仍能接收滚动事件、点击和悬停事件

632
00:33:27,708 --> 0:33:30,711
当Mac用户切换到

633
00:33:30,777 --> 0:33:32,779
他们不一定希望游戏暂停

634
00:33:33,280 --> 0:33:35,415
或当他们尝试在虚拟屏幕上

635
00:33:35,682 --> 0:33:39,653
通过其中一个VNC会话

636
00:33:43,090 --> 0:33:46,927
我之前告诉过你

637
00:33:46,994 --> 0:33:48,095
当这些状态发生变更时

638
00:33:48,161 --> 0:33:49,096
就是这些

639
00:33:49,663 --> 0:33:52,833
根据我刚讲过的内容

640
00:33:53,267 --> 0:33:56,170
几乎所有时间 我们都将保持

641
00:33:56,236 --> 0:33:58,705
所有iPad app

642
00:34:00,140 --> 0:34:03,777
在app终止和后台启动过程中

643
00:34:04,211 --> 0:34:06,713
我们只进入前台非激活状态

644
00:34:07,814 --> 0:34:09,016
换句话说

645
00:34:09,081 --> 0:34:11,618
只要用户感觉到你的app正在运行

646
00:34:12,252 --> 0:34:16,089
它就处于前台激活状态

647
00:34:17,925 --> 0:34:19,025
让我再重复一遍

648
00:34:19,927 --> 0:34:22,029
将不调用UIKit状态变更通知

649
00:34:22,094 --> 0:34:26,800
比如当你的app

650
00:34:27,067 --> 0:34:28,302
或有窗口遮挡住app时

651
00:34:32,139 --> 0:34:34,808
那意味着你的app

652
00:34:34,875 --> 0:34:36,409
急切地减少它的资源消耗

653
00:34:36,976 --> 0:34:40,414
然而AppNap启发算法适用于

654
00:34:40,480 --> 0:34:41,815
包括你的iPad app

655
00:34:42,916 --> 0:34:44,751
AppNap是

656
00:34:45,052 --> 0:34:48,088
系统不间断地观察app的各个属性

657
00:34:48,455 --> 0:34:50,157
用于显示它是否不在使用中

658
00:34:50,891 --> 0:34:54,393
比如它是否可见 主动绘图

659
00:34:54,728 --> 0:34:56,330
播放音频等等

660
00:34:57,965 --> 0:35:00,834
然后当AppNap

661
00:34:57,965 --> 0:35:00,834
然后当AppNap

662
00:35:01,134 --> 0:35:02,669
它会自动应用节流

663
00:35:04,238 --> 0:35:05,372
（app终止）

664
00:35:05,439 --> 0:35:06,707
我刚才提到过

665
00:35:06,773 --> 0:35:08,208
我们在终止和后台启动过程中

666
00:35:08,275 --> 0:35:10,310
确实会进入其他app状态

667
00:35:11,678 --> 0:35:13,113
让我们从app终止开始讲

668
00:35:15,015 --> 0:35:16,884
开发人员需要注意的是

669
00:35:17,551 --> 0:35:19,786
当把他们的iPad app

670
00:35:20,654 --> 0:35:22,656
iOS中app之间的切换

671
00:35:23,023 --> 0:35:25,659
与macOS上完全不一样

672
00:35:26,593 --> 0:35:27,628
比如

673
00:35:28,061 --> 0:35:31,665
在iOS上切换到另一个app时

674
00:35:32,165 --> 0:35:35,702
像把处于最前的Mac app变成

675
00:35:36,503 --> 0:35:39,806
因为你的app

676
00:35:41,308 --> 0:35:44,111
但在iOS上

677
00:35:44,645 --> 0:35:45,946
并且也没有任何播放的音频时

678
00:35:46,580 --> 0:35:49,783
这可能更类似于

679
00:35:50,384 --> 0:35:53,554
因为你的app不在视线内并且用户

680
00:35:57,124 --> 0:35:58,225
在macOS上

681
00:35:58,292 --> 0:36:00,961
用户发起了对你的

682
00:35:58,292 --> 0:36:00,961
用户发起了对你的

683
00:36:01,595 --> 0:36:05,966
得到了与在iOS中切换到一个

684
00:36:06,400 --> 0:36:08,135
比如通过使用任务切换器

685
00:36:09,970 --> 0:36:13,307
状态变更通知会让你从前台激活状态

686
00:36:13,740 --> 0:36:15,809
变成前台非激活状态

687
00:36:17,311 --> 0:36:18,545
然而对于用户来说

688
00:36:18,612 --> 0:36:21,281
app将立即显示为不再运行

689
00:36:22,216 --> 0:36:24,284
app的残余窗口将立即不可见

690
00:36:25,219 --> 0:36:27,187
它再也不会控制菜单栏

691
00:36:27,855 --> 0:36:29,957
程序坞中也不会再有任何指示灯

692
00:36:30,691 --> 0:36:35,495
且你的app也不会再在macOS

693
00:36:38,298 --> 0:36:39,299
但在幕后

694
00:36:39,366 --> 0:36:41,602
我们为后台任务提供了一个

695
00:36:42,102 --> 0:36:45,272
如果它们是通过我在这里所展示的

696
00:36:45,339 --> 0:36:46,306
UIApplication上的

697
00:36:48,742 --> 0:36:50,043
就像在iOS中一样

698
00:36:50,110 --> 0:36:53,280
迅速结束你的后台任务

699
00:36:54,648 --> 0:36:56,116
但有一种例外情况

700
00:36:57,050 --> 0:36:59,152
后台音频播放列表项被忽略了

701
00:36:59,887 --> 0:37:02,990
无论后台是否有音频请求

702
00:36:59,887 --> 0:37:02,990
无论后台是否有音频请求

703
00:37:03,857 --> 0:37:06,360
毕竟对于用户来说

704
00:37:07,694 --> 0:37:10,163
因此你的媒体框架要暂停你的…

705
00:37:10,230 --> 0:37:12,533
一旦进入后台状态

706
00:37:13,066 --> 0:37:14,268
我们的媒体框架将替你暂停你的播放

707
00:37:15,869 --> 0:37:19,473
然而请记住

708
00:37:20,340 --> 0:37:22,009
即使当用户切换到不同的app中时

709
00:37:22,442 --> 0:37:24,278
你的app也将保持前台激活状态

710
00:37:27,214 --> 0:37:28,482
此外

711
00:37:28,549 --> 0:37:31,485
如果用户尝试启动

712
00:37:31,985 --> 0:37:34,421
我们会简单地让你的app

713
00:37:35,556 --> 0:37:39,059
这类似于从iOS任务切换器

714
00:37:40,427 --> 0:37:41,728
这种重新启动

715
00:37:41,795 --> 0:37:45,232
只有当你的app仍在处理

716
00:37:45,766 --> 0:37:49,002
而不是一旦willTerminate

717
00:37:50,170 --> 0:37:51,772
因此尝试最小化这个阶段

718
00:37:51,839 --> 0:37:54,474
就是你的app忽略用户

719
00:37:57,611 --> 0:38:00,147
一旦最后一个后台任务完成或过期

720
00:37:57,611 --> 0:38:00,147
一旦最后一个后台任务完成或过期

721
00:38:00,614 --> 0:38:02,382
进程立即退出而不会暂停

722
00:38:03,851 --> 0:38:04,885
我之前提过

723
00:38:05,219 --> 0:38:08,822
你会得到与iOS上相同的

724
00:38:10,123 --> 0:38:12,860
在这种情况下 那意味着你会看到

725
00:38:13,327 --> 0:38:14,761
didEnterBackground

726
00:38:14,828 --> 0:38:17,931
和willTerminate

727
00:38:18,198 --> 0:38:20,467
而不仅仅是像iOS上一样暂停它

728
00:38:21,869 --> 0:38:22,936
（后台app启动）

729
00:38:23,003 --> 0:38:25,639
这就是Mac上

730
00:38:27,040 --> 0:38:28,208
正如我刚才提到过的那样

731
00:38:28,275 --> 0:38:32,179
让你的iPad app在Mac上

732
00:38:32,646 --> 0:38:34,715
是当它直接在后台启动时

733
00:38:36,116 --> 0:38:41,054
iOS有相当一部分API

734
00:38:41,121 --> 0:38:42,222
选择加入某些形式的后台启动

735
00:38:42,923 --> 0:38:44,291
要了解关于这个话题的更多信息

736
00:38:44,591 --> 0:38:48,161
请参考今年的

737
00:38:48,228 --> 0:38:49,329
关于app后台执行的改进演讲

738
00:38:51,698 --> 0:38:55,903
这些API的子集

739
00:38:58,105 --> 0:39:01,074
针对后台下载配置的URL会话

740
00:38:58,105 --> 0:39:01,074
针对后台下载配置的URL会话

741
00:39:03,177 --> 0:39:07,147
在APS字典中

742
00:39:07,214 --> 0:39:08,348
指定了带有可用内容的远程用户通知

743
00:39:09,283 --> 0:39:10,551
你可以用它 比如说

744
00:39:10,617 --> 0:39:13,954
更新你app的内容

745
00:39:16,223 --> 0:39:18,959
同时 当我们的用户调用

746
00:39:19,026 --> 0:39:21,161
未指定前台选项的通知动作时

747
00:39:21,828 --> 0:39:25,032
比如他们可能希望通过用户通知

748
00:39:25,632 --> 0:39:29,002
并且我们可以后台启动你的app

749
00:39:30,270 --> 0:39:31,338
最后

750
00:39:31,605 --> 0:39:34,274
我们还支持

751
00:39:34,708 --> 0:39:37,044
包括新

752
00:39:37,544 --> 0:39:42,349
以及BGAppRefreshTask

753
00:39:43,483 --> 0:39:45,085
请注意

754
00:39:45,485 --> 0:39:48,956
仅通过这个新API

755
00:39:54,428 --> 0:39:58,432
常见的后台运行时间限制

756
00:39:58,866 --> 0:39:59,967
与iOS上的相同

757
00:40:00,300 --> 0:40:01,935
因此如果你的任务占用太长时间

758
00:40:02,236 --> 0:40:04,571
你的app将面临被暂停使用

759
00:40:06,139 --> 0:40:07,875
当app仍然在后台运行时

760
00:40:08,141 --> 0:40:09,877
如果用户尝试启动它

761
00:40:10,577 --> 0:40:12,913
我们将简单地把它转换为

762
00:40:13,413 --> 0:40:16,617
类似于之前讨论过的

763
00:40:18,385 --> 0:40:19,753
对于后台启动也一样

764
00:40:20,254 --> 0:40:22,523
所有状态转换都将与

765
00:40:23,557 --> 0:40:26,493
在这种情况下 那意味着你只能看到

766
00:40:26,860 --> 0:40:30,931
以及针对后台启动

767
00:40:30,998 --> 0:40:31,999
所使用的任何回调

768
00:40:33,367 --> 0:40:35,302
只有在用户所执行的完全启动过程中

769
00:40:35,702 --> 0:40:39,039
你才可额外看到willEnterForeground

770
00:40:40,874 --> 0:40:41,909
（暂停使用）

771
00:40:41,975 --> 0:40:43,177
app暂停使用

772
00:40:43,844 --> 0:40:47,347
相较于iOS 在macOS上

773
00:40:48,582 --> 0:40:49,883
在常规的终止过程中

774
00:40:50,350 --> 0:40:53,420
app将直接退出 而没有任何暂停

775
00:40:54,454 --> 0:40:56,323
在macOS上的app切换过程中

776
00:40:56,890 --> 0:40:58,725
这不会导致后台状态或暂停

777
00:40:59,860 --> 0:41:02,396
但如果app直接在后台启动的话

778
00:40:59,860 --> 0:41:02,396
但如果app直接在后台启动的话

779
00:41:02,729 --> 0:41:05,165
你仍可能看到发生暂停

780
00:41:06,900 --> 0:41:08,101
现在在iPad上

781
00:41:08,402 --> 0:41:11,371
当其它地方需要资源的话

782
00:41:11,438 --> 0:41:12,940
特别是如果它已经被暂停使用的话

783
00:41:13,507 --> 0:41:14,541
但在macOS上

784
00:41:14,842 --> 0:41:16,577
如果你的iPad app

785
00:41:16,944 --> 0:41:19,346
它总是会立即终止

786
00:41:19,847 --> 0:41:21,481
即使不存在任何内存压力

787
00:41:23,483 --> 0:41:24,551
提到内存

788
00:41:24,618 --> 0:41:26,186
Mac内容模型应用

789
00:41:26,587 --> 0:41:28,822
意味着没有任何强制的内存限制

790
00:41:29,623 --> 0:41:31,992
你的app不会面临在执行

791
00:41:34,027 --> 0:41:35,229
但这是把双刃剑

792
00:41:36,196 --> 0:41:37,431
因为你的app运行时间越长

793
00:41:37,931 --> 0:41:40,601
由于堆积泄露

794
00:41:40,667 --> 0:41:41,768
用户越可能注意到系统性能下降

795
00:41:42,803 --> 0:41:44,104
特别是

796
00:41:44,404 --> 0:41:46,940
如果它在基于硬盘的系统上

797
00:41:49,376 --> 0:41:51,879
因此请使用分配分析模板

798
00:41:51,945 --> 0:41:54,181
和仪器来发现并修复泄露

799
00:41:55,148 --> 0:41:56,783
这也会让iPad版app受益颇多

800
00:41:59,520 --> 0:42:02,222
现在我们讲了大量信息

801
00:41:59,520 --> 0:42:02,222
现在我们讲了大量信息

802
00:42:03,423 --> 0:42:04,591
在macOS上

803
00:42:04,658 --> 0:42:08,562
你的iPad app将在前台激活

804
00:42:10,397 --> 0:42:12,432
虽然app终止和后台启动

805
00:42:12,499 --> 0:42:15,169
确实允许你的app

806
00:42:15,435 --> 0:42:16,503
和后台状态

807
00:42:18,238 --> 0:42:20,807
当你的app处于后台时

808
00:42:21,375 --> 0:42:23,677
不要期待音频会继续播放

809
00:42:25,045 --> 0:42:26,013
最后

810
00:42:26,346 --> 0:42:28,916
你可以继续以在iOS上相同的方式

811
00:42:28,982 --> 0:42:30,617
响应这些状态变更

812
00:42:32,352 --> 0:42:34,021
现在我要把舞台交给Chris

813
00:42:34,321 --> 0:42:37,191
他会讲把你的iPad app

814
00:42:37,624 --> 0:42:38,625
谢谢

815
00:42:44,331 --> 0:42:45,265
谢谢Nils

816
00:42:50,070 --> 0:42:52,406
你一直都在创建iOS app

817
00:42:54,675 --> 0:42:57,044
你知道如何在

818
00:42:57,978 --> 0:42:59,313
如何使用TestFlight

819
00:43:00,080 --> 0:43:04,518
如何使用开发签名、点对点

820
00:43:05,719 --> 0:43:06,720
但现在…

821
00:43:07,454 --> 0:43:11,258
你正在Mac上

822
00:43:12,226 --> 0:43:13,493
全部来源于同样的代码基

823
00:43:14,862 --> 0:43:15,996
你要如何实现呢？

824
00:43:16,797 --> 0:43:18,198
对于Mac来说有什么不同呢？

825
00:43:19,366 --> 0:43:20,901
你如何确保你的客户们

826
00:43:20,968 --> 0:43:23,704
在使用两个版本的app时

827
00:43:24,605 --> 0:43:25,472
这就是我们接下来要讲的内容

828
00:43:26,773 --> 0:43:27,841
让我们回到开始

829
00:43:29,076 --> 0:43:31,111
你在Xcode中打开了项目编辑器

830
00:43:32,045 --> 0:43:33,180
你启动了Mac支持

831
00:43:34,014 --> 0:43:35,282
你一直都很努力地在开发它

832
00:43:35,349 --> 0:43:38,585
你已经对app进行了完美的调整

833
00:43:38,886 --> 0:43:41,255
“天啊

834
00:43:42,489 --> 0:43:43,323
嗯 那很棒

835
00:43:43,757 --> 0:43:46,760
但如果你想了解更多

836
00:43:47,227 --> 0:43:49,997
你可以参加签名和性能讨论会

837
00:43:50,998 --> 0:43:53,967
在那里你可以看到

838
00:43:54,034 --> 0:43:55,369
有许多事情要做

839
00:43:56,203 --> 0:43:57,070
让我们具体看一下

840
00:43:58,539 --> 0:43:59,439
首先

841
00:43:59,806 --> 0:44:01,341
如果你启动自动签名

842
00:43:59,806 --> 0:44:01,341
如果你启动自动签名

843
00:44:01,775 --> 0:44:05,078
代码签署的所有维护

844
00:44:05,345 --> 0:44:07,047
这会让转换变得非常简单

845
00:44:07,548 --> 0:44:09,516
我高度推荐使用自动签名

846
00:44:11,652 --> 0:44:13,120
现在使用自动签名

847
00:44:13,187 --> 0:44:16,690
Xcode将为Mac

848
00:44:17,224 --> 0:44:18,392
同时也为iOS

849
00:44:19,426 --> 0:44:20,928
我们进行了一点现代化处理

850
00:44:21,662 --> 0:44:24,765
我们不使用iOS证书和Mac证书

851
00:44:25,065 --> 0:44:27,668
而是使用一个统一的

852
00:44:28,101 --> 0:44:29,169
这是一个很不错的进步

853
00:44:33,307 --> 0:44:35,075
现在当你添加Mac支持时

854
00:44:35,843 --> 0:44:38,512
Xcode将使用自动签名

855
00:44:38,579 --> 0:44:41,815
为你的app注册一个

856
00:44:42,216 --> 0:44:45,219
你的Mac版app标识符有一个前缀

857
00:44:45,853 --> 0:44:46,753
这很重要

858
00:44:47,254 --> 0:44:49,857
如果你一直在代码中

859
00:44:49,923 --> 0:44:51,925
使用捆绑标识符的话

860
00:44:52,192 --> 0:44:54,294
你需要考虑那会如何影响两个app

861
00:44:56,763 --> 0:44:57,898
entitlements文件

862
00:44:58,265 --> 0:45:00,000
就是你一直对iOS app使用的

863
00:45:00,501 --> 0:45:02,002
当注册Mac版时被共享出来

864
00:45:02,069 --> 0:45:03,103
因此那没有任何问题

865
00:45:04,805 --> 0:45:06,406
当你启用Mac支持时

866
00:45:07,040 --> 0:45:10,410
Xcode将添加Mac上所要求的

867
00:45:10,844 --> 0:45:13,013
强化运行时间和app沙盒

868
00:45:13,714 --> 0:45:16,783
因此比如说如果你已经针对摄像头

869
00:45:17,251 --> 0:45:19,052
在info.plist中

870
00:45:19,520 --> 0:45:21,622
Xcode将更新

871
00:45:21,688 --> 0:45:24,024
从而使你的app

872
00:45:26,260 --> 0:45:28,328
如果你正在使用

873
00:45:29,029 --> 0:45:30,697
那是基于你的捆绑标识符

874
00:45:31,365 --> 0:45:34,334
因此Xcode将调整你的

875
00:45:34,401 --> 0:45:36,470
从而使你的iOS app

876
00:45:36,537 --> 0:45:38,939
明确指向现有容器

877
00:45:39,540 --> 0:45:41,208
如果你一直使用默认容器API

878
00:45:41,275 --> 0:45:42,309
你可以继续这么做

879
00:45:44,978 --> 0:45:46,747
现在Xcode将为替进行大量迁移

880
00:45:47,247 --> 0:45:50,117
但如果你想在你的iOS app

881
00:45:50,184 --> 0:45:52,152
共享功能

882
00:45:52,419 --> 0:45:54,555
你可能需要做一些手动操作

883
00:45:56,023 --> 0:45:58,192
如果你在app中使用钥匙串

884
00:45:59,059 --> 0:46:01,995
你应该在Xcode中添加

885
00:45:59,059 --> 0:46:01,995
你应该在Xcode中添加

886
00:46:03,230 --> 0:46:06,099
iCloud钥匙串

887
00:46:06,700 --> 0:46:09,002
但在Mac上

888
00:46:09,069 --> 0:46:10,070
通过这个功能实现

889
00:46:12,139 --> 0:46:13,640
如果你使用推送通知

890
00:46:14,074 --> 0:46:16,376
请继续向你的iOS app

891
00:46:16,877 --> 0:46:20,013
这些通知将被iOS

892
00:46:21,648 --> 0:46:23,283
好的 这就是你需要了解的

893
00:46:23,350 --> 0:46:25,485
关于如何恰当地设置你的项目

894
00:46:27,187 --> 0:46:29,556
现在当你已经与其他人共享了

895
00:46:30,157 --> 0:46:32,259
你要开始在Xcode中

896
00:46:33,193 --> 0:46:34,294
在iOS上

897
00:46:34,361 --> 0:46:37,831
你使用那个存档将存储导出为IPA

898
00:46:38,565 --> 0:46:40,133
但这在Mac上有那么一点不一样

899
00:46:41,168 --> 0:46:43,837
当Xcode把你的app

900
00:46:44,171 --> 0:46:46,473
它在后台把它作为Mac程序包发送

901
00:46:48,609 --> 0:46:51,778
现在上传到App Store

902
00:46:51,845 --> 0:46:52,746
让我来给你展示一下

903
00:46:53,780 --> 0:46:55,115
当你打开项目后

904
00:46:55,415 --> 0:46:58,318
你可以使用产品菜单

905
00:46:58,385 --> 0:46:59,219
我的Mac

906
00:46:59,920 --> 0:47:00,854
然后就存档

907
00:46:59,920 --> 0:47:00,854
然后就存档

908
00:47:01,788 --> 0:47:05,092
那将打开管理器

909
00:47:06,159 --> 0:47:08,195
然后你可以点击发布app按钮

910
00:47:08,595 --> 0:47:10,731
按照你所熟悉的同样的上传流程做

911
00:47:12,499 --> 0:47:14,601
当然了

912
00:47:15,769 --> 0:47:17,804
包括从Xcode创建进行上传

913
00:47:19,339 --> 0:47:21,074
要了解更多关于

914
00:47:21,475 --> 0:47:24,044
我建议你们查看

915
00:47:24,111 --> 0:47:26,780
关于签署Xcode

916
00:47:29,449 --> 0:47:30,384
（Mac App Store）

917
00:47:30,951 --> 0:47:32,019
好的 那么你已经创建好app了

918
00:47:32,686 --> 0:47:36,156
但把app发到App Store

919
00:47:37,391 --> 0:47:39,193
首先这是一个新Mac app

920
00:47:39,660 --> 0:47:43,063
因此需在App Store连接中

921
00:47:43,130 --> 0:47:44,464
就像你对iOS版app所做的那样

922
00:47:44,898 --> 0:47:46,433
然后以前和现在各一次

923
00:47:47,935 --> 0:47:49,069
当你这么做时

924
00:47:49,536 --> 0:47:51,772
你正在把app记录与

925
00:47:52,039 --> 0:47:54,408
Xcode替你合成的app标识符

926
00:47:54,675 --> 0:47:56,877
就是那个带有

927
00:47:58,579 --> 0:48:00,380
无论何时当你把app上传到

928
00:47:58,579 --> 0:48:00,380
无论何时当你把app上传到

929
00:48:00,447 --> 0:48:01,915
你应该总是增加你的版本号

930
00:48:02,716 --> 0:48:04,151
这与iOS有一些不同

931
00:48:04,952 --> 0:48:08,188
MacOS使用版本号

932
00:48:09,823 --> 0:48:10,791
如果你完成了所有这些操作

933
00:48:11,525 --> 0:48:12,926
你就可以从Xcode上传app

934
00:48:13,660 --> 0:48:15,062
并把app发布到

935
00:48:18,265 --> 0:48:20,567
现在关于Mac有一件事很酷

936
00:48:20,634 --> 0:48:23,504
就是你对如何安装app

937
00:48:24,705 --> 0:48:27,508
当客户从App Store

938
00:48:28,075 --> 0:48:31,445
能把该app复制到另一台Mac上

939
00:48:32,679 --> 0:48:33,847
那涉及到一些事

940
00:48:35,082 --> 0:48:37,117
macOS上没有app瘦身

941
00:48:38,619 --> 0:48:40,921
你的app总要包含

942
00:48:40,988 --> 0:48:42,589
在任意Mac上运行所必需的

943
00:48:44,291 --> 0:48:46,593
因为你的app可以被拖放到

944
00:48:46,994 --> 0:48:49,663
由你决定是否向app中

945
00:48:50,531 --> 0:48:52,466
因此无论何时当你的app启动时

946
00:48:52,733 --> 0:48:55,536
是否为合法购买以及是否被允许运行

947
00:48:57,037 --> 0:48:59,840
要了解更多关于如何向app中

948
00:49:00,307 --> 0:49:03,944
我推荐你参考2017年的

949
00:49:06,280 --> 0:49:09,216
好消息是一旦你的app

950
00:49:09,950 --> 0:49:11,618
你就可以使用同样的强大工具

951
00:49:12,419 --> 0:49:16,089
比如App Store Connect、

952
00:49:17,024 --> 0:49:18,525
还有Xcode崩溃管理器

953
00:49:18,859 --> 0:49:21,395
用于归类可能会影响你客户的

954
00:49:22,996 --> 0:49:25,666
你的app可以使用同样的

955
00:49:26,700 --> 0:49:28,302
现在如果你使用那些API

956
00:49:28,602 --> 0:49:31,004
需在App Store Connect上

957
00:49:32,506 --> 0:49:35,242
如果你使用app内购买或订阅

958
00:49:35,943 --> 0:49:38,478
你需要在

959
00:49:38,545 --> 0:49:39,646
对新Mac app

960
00:49:40,414 --> 0:49:43,417
如果你想在两个版本的app之间

961
00:49:43,784 --> 0:49:46,854
你必须维护自己的端对端同步方案

962
00:49:49,256 --> 0:49:50,424
如果你是游戏app

963
00:49:50,490 --> 0:49:53,594
你应该从使用游戏中心群

964
00:49:53,660 --> 0:49:55,195
在两个版本的app之间

965
00:49:56,830 --> 0:49:58,165
并且如果你的app是多玩家游戏

966
00:49:58,732 --> 0:50:02,236
你应该在App Store Connect中

967
00:49:58,732 --> 0:50:02,236
你应该在App Store Connect中

968
00:50:02,703 --> 0:50:04,271
那会确保你的玩家

969
00:50:04,338 --> 0:50:07,474
与相应的iOS和

970
00:50:09,977 --> 0:50:12,980
好的 有了这些操作 你就可以

971
00:50:13,747 --> 0:50:14,781
暂时

972
00:50:15,148 --> 0:50:19,219
App Store不接受

973
00:50:19,620 --> 0:50:21,321
你仍可以创建app记录

974
00:50:21,722 --> 0:50:24,858
同时体验StoreKit

975
00:50:25,993 --> 0:50:28,362
过了今年夏季

976
00:50:28,629 --> 0:50:30,731
这正是实践上传app的好时候

977
00:50:31,865 --> 0:50:34,134
最后当发布Xcode 11时

978
00:50:34,935 --> 0:50:36,270
你就可以开始提交进行app审查了

979
00:50:38,705 --> 0:50:40,440
这就是在

980
00:50:47,014 --> 0:50:49,550
现在 在App Store之外

981
00:50:49,616 --> 0:50:50,817
你还可以有其它发布选项

982
00:50:51,718 --> 0:50:54,288
你可以直接向客户提供app

983
00:50:55,355 --> 0:50:58,292
如果你用Developer ID

984
00:50:58,625 --> 0:51:00,127
并由Apple进行公证的话

985
00:50:58,625 --> 0:51:00,127
并由Apple进行公证的话

986
00:51:01,795 --> 0:51:04,565
公证app是一个伟大的改革

987
00:51:05,632 --> 0:51:09,269
我们都会感到很宽慰 因为我们下载

988
00:51:09,336 --> 0:51:11,205
已经由写它的开发人员签名

989
00:51:11,872 --> 0:51:13,740
且签名已经由Apple进行了审查

990
00:51:15,409 --> 0:51:16,810
对于这些app来说

991
00:51:17,110 --> 0:51:18,412
但我们强制实行良好的政策

992
00:51:18,478 --> 0:51:21,081
比如要求打开

993
00:51:21,148 --> 0:51:22,316
（已公证的app）

994
00:51:22,783 --> 0:51:26,053
要签署和公证你的app

995
00:51:27,521 --> 0:51:30,023
且与你的团队分享一个已公证的

996
00:51:30,090 --> 0:51:31,959
因为TestFlight

997
00:51:32,893 --> 0:51:35,796
但有一个警告

998
00:51:35,863 --> 0:51:38,699
那些基于App Store的功能

999
00:51:41,301 --> 0:51:44,605
现在签署一个已公证的app

1000
00:51:44,671 --> 0:51:46,073
一切都可以从Xcode中实现

1001
00:51:46,874 --> 0:51:49,309
你的第一步是向

1002
00:51:50,410 --> 0:51:51,545
在这个过程中

1003
00:51:51,879 --> 0:51:54,948
Xcode将用Developer ID证书

1004
00:51:55,249 --> 0:51:56,817
并且Apple将扫描

1005
00:51:58,151 --> 0:51:59,186
几分钟之后

1006
00:51:59,253 --> 0:52:02,322
Xcode将收到一个通知

1007
00:51:59,253 --> 0:52:02,322
Xcode将收到一个通知

1008
00:52:02,623 --> 0:52:04,024
那时你可以导出它

1009
00:52:04,525 --> 0:52:06,593
你可以把它打包

1010
00:52:07,060 --> 0:52:08,529
并让它在你的服务器上可用

1011
00:52:11,865 --> 0:52:13,534
如果你想了解更多

1012
00:52:13,600 --> 0:52:14,735
或如何在app中使用安全模型

1013
00:52:15,035 --> 0:52:16,837
我建议你参考今年的一场演讲

1014
00:52:17,171 --> 0:52:18,305
关于公证的一切信息

1015
00:52:20,674 --> 0:52:24,144
好的 这些是你向客户发布app时

1016
00:52:25,412 --> 0:52:27,481
值得一提的还有第三种发布方式

1017
00:52:27,948 --> 0:52:29,483
就是开发签名

1018
00:52:30,984 --> 0:52:33,921
现在开发签名与你在iOS上

1019
00:52:34,421 --> 0:52:37,257
它对于与团队共享一个app创建

1020
00:52:37,958 --> 0:52:40,427
请记住 当你与新Mac共享时

1021
00:52:41,061 --> 0:52:43,497
请记得在开发者门户网站上

1022
00:52:45,299 --> 0:52:48,435
开发签名是你用于测试

1023
00:52:48,502 --> 0:52:50,103
那些StoreKit和

1024
00:52:50,637 --> 0:52:52,739
你可以…当你使用开发签名时

1025
00:52:52,806 --> 0:52:54,374
你可以使用沙盒测试账户

1026
00:52:54,942 --> 0:52:57,711
而不是花自己的钱练习收据验证

1027
00:53:00,681 --> 0:53:02,649
这些就是在Mac上

1028
00:53:05,686 --> 0:53:06,920
现在当然…

1029
00:53:08,355 --> 0:53:09,590
有大量信息需要接受

1030
00:53:10,791 --> 0:53:13,560
但请考虑一下你是否愿意跟我们一起

1031
00:53:14,928 --> 0:53:15,863
也许你像我一样

1032
00:53:16,830 --> 0:53:18,265
你开始是一名iPhone开发人员

1033
00:53:19,566 --> 0:53:22,002
你精通表视图和屏幕旋转

1034
00:53:23,370 --> 0:53:25,072
然后你就升级到一些更大的设备上

1035
00:53:26,106 --> 0:53:28,041
你在iPad上寻求机遇

1036
00:53:29,376 --> 0:53:31,745
你挑战自己使用新形状因数

1037
00:53:32,312 --> 0:53:34,081
添加多任务以及拖放

1038
00:53:36,016 --> 0:53:37,851
你的下一个挑战将是Mac

1039
00:53:38,886 --> 0:53:40,921
你将克服重调窗口尺寸和菜单栏

1040
00:53:42,189 --> 0:53:44,124
我很高兴看到

1041
00:53:44,758 --> 0:53:46,727
我们都将在它的发展中受益颇多

1042
00:53:47,494 --> 0:53:48,829
现在去勾选那个复选框吧

1043
00:53:50,163 --> 0:53:51,365
请参加我们的讨论会

1044
00:53:52,165 --> 0:53:53,600
请观看相关演讲

1045
00:53:54,034 --> 0:53:56,837
请度过一个美妙的WWDC 谢谢
