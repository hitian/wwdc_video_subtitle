1
00:00:06,640 --> 0:00:08,041
（在watchOS 6上

2
00:00:08,108 --> 0:00:10,010
去年的watchOS 5中

3
00:00:10,077 --> 0:00:14,448
我们介绍了在后台播放本地

4
00:00:16,315 --> 0:00:18,118
今年 使用watchOS 6

5
00:00:18,185 --> 0:00:22,723
Watch app将可以直接在

6
00:00:23,524 --> 0:00:25,259
这意味着你的用户

7
00:00:25,325 --> 0:00:27,461
将不再需要使用iPhone

8
00:00:27,528 --> 0:00:29,196
将音频文件同步到Watch上

9
00:00:29,463 --> 0:00:32,732
就能使用音频文件

10
00:00:32,799 --> 0:00:35,569
他们现在可以收听实时音频节目

11
00:00:35,636 --> 0:00:36,937
比如体育节目

12
00:00:38,472 --> 0:00:43,210
Apple Watch上watchOS

13
00:00:44,244 --> 0:00:45,179
HLS

14
00:00:45,979 --> 0:00:47,814
和自定义音频协议

15
00:00:49,383 --> 0:00:51,185
我们来深入了解一下

16
00:00:51,718 --> 0:00:54,888
如果你的内容是

17
00:00:55,956 --> 0:00:58,525
你可将AVQueuePlayer

18
00:00:58,592 --> 0:01:00,827
它会协助你播放你的

19
00:00:58,592 --> 0:01:00,827
它会协助你播放你的

20
00:01:01,695 --> 0:01:04,464
watchOS为

21
00:01:04,531 --> 0:01:06,433
上手非常简单

22
00:01:08,335 --> 0:01:10,938
使用专有的音频格式或

23
00:01:11,004 --> 0:01:13,473
自定义协议的app有点不同

24
00:01:14,908 --> 0:01:18,545
它们需要使用网络框架上使用

25
00:01:18,612 --> 0:01:22,049
来获取和解析

26
00:01:24,218 --> 0:01:26,720
每当音频内容在Watch上下载完成后

27
00:01:26,787 --> 0:01:30,591
使用AVFoundation

28
00:01:31,825 --> 0:01:33,060
（API附件）

29
00:01:33,126 --> 0:01:35,429
将iOS API集成

30
00:01:35,495 --> 0:01:39,499
watchOS 6上

31
00:01:40,000 --> 0:01:43,170
我们的目标是将着两个SDK

32
00:01:43,237 --> 0:01:47,074
这样你的代码不需要做太多修改

33
00:01:48,375 --> 0:01:49,476
至于网络

34
00:01:49,810 --> 0:01:52,613
watchOS 6

35
00:01:52,679 --> 0:01:54,648
iOS 12上第一次引入

36
00:01:55,048 --> 0:01:58,585
这个框架提供了一个更加现代的

37
00:01:59,019 --> 0:02:01,922
网络框架不仅提供了C API

38
00:01:59,019 --> 0:02:01,922
网络框架不仅提供了C API

39
00:02:01,989 --> 0:02:04,725
同时也提供

40
00:02:06,326 --> 0:02:10,130
URLSession为watchOS带来了

41
00:02:10,430 --> 0:02:13,967
它也带来了

42
00:02:14,034 --> 0:02:17,738
在iOS 13和

43
00:02:18,438 --> 0:02:20,274
音频流为从网络上获取数据的方式

44
00:02:20,340 --> 0:02:23,010
带来了特别的挑战

45
00:02:23,377 --> 0:02:24,211
为此

46
00:02:24,278 --> 0:02:28,582
URLSession引入了新的

47
00:02:28,882 --> 0:02:31,451
你应使用它来请求流数据

48
00:02:32,986 --> 0:02:33,987
至于音频播放

49
00:02:34,054 --> 0:02:37,758
AVFoundation为

50
00:02:37,824 --> 0:02:41,161
包括AVPlayer

51
00:02:42,329 --> 0:02:44,164
同时

52
00:02:44,231 --> 0:02:46,300
CoreMedia

53
00:02:47,734 --> 0:02:51,205
如果你的app已经能

54
00:02:51,271 --> 0:02:52,840
并不需要其他的项目配置

55
00:02:53,140 --> 0:02:55,475
音频流播放也同样可以实现了

56
00:02:56,176 --> 0:02:58,812
如果你的项目还没有配置

57
00:02:58,879 --> 0:03:02,950
你需要在WatchKit

58
00:02:58,879 --> 0:03:02,950
你需要在WatchKit

59
00:03:03,350 --> 0:03:05,652
首先 你要先打开Xcode

60
00:03:05,719 --> 0:03:08,188
来到WatchKit扩展

61
00:03:09,289 --> 0:03:11,792
在签署和功能部分中

62
00:03:11,859 --> 0:03:15,262
点击添加功能

63
00:03:16,096 --> 0:03:19,399
最后 在后台模式里

64
00:03:20,267 --> 0:03:21,835
这样就完成了

65
00:03:22,703 --> 0:03:23,837
（API的使用）

66
00:03:23,904 --> 0:03:27,541
现在项目已经配置完成了

67
00:03:27,608 --> 0:03:29,877
你需要使用的不同的API

68
00:03:30,878 --> 0:03:34,882
你的app启动后

69
00:03:34,948 --> 0:03:37,284
你需要向你的服务器获取数据

70
00:03:38,752 --> 0:03:41,355
这个数据是给用户展示的

71
00:03:41,421 --> 0:03:42,923
流播放选项和内容

72
00:03:42,990 --> 0:03:45,759
比如专辑信息

73
00:03:45,826 --> 0:03:47,261
播放列表信息

74
00:03:47,327 --> 0:03:49,863
或是你app流媒体的元数据内容

75
00:03:50,797 --> 0:03:53,934
在你的app启动前

76
00:03:54,001 --> 0:03:56,203
你可能就获取到了这些数据

77
00:03:56,537 --> 0:03:59,573
如非使用URLSession

78
00:04:00,240 --> 0:04:04,178
这时 套接字 流媒体任务

79
00:04:04,244 --> 0:04:05,913
将不能被使用

80
00:04:07,748 --> 0:04:11,051
当你获取到了所有的信息

81
00:04:11,118 --> 0:04:12,519
启动音频会话

82
00:04:13,153 --> 0:04:16,757
音频会话在这个节点前不应该被启动

83
00:04:16,822 --> 0:04:19,760
否则会打断用户的使用体验

84
00:04:20,327 --> 0:04:23,263
这是watchOS和

85
00:04:23,697 --> 0:04:27,201
在iOS上

86
00:04:27,267 --> 0:04:30,304
然而 我们发现watchOS

87
00:04:31,738 --> 0:04:33,574
当你启用一个音频会话时

88
00:04:33,640 --> 0:04:36,944
如果你的app当前没有任何线路

89
00:04:37,010 --> 0:04:40,647
watchOS会自动出现一个

90
00:04:41,348 --> 0:04:42,449
有两种使用场景

91
00:04:42,516 --> 0:04:46,620
当watchOS跳过

92
00:04:47,187 --> 0:04:48,689
对于蓝牙设备

93
00:04:48,755 --> 0:04:50,924
如果设备已经连接至Watch

94
00:04:51,425 --> 0:04:55,729
或者Bluetooth设备

95
00:04:55,896 --> 0:04:58,065
如果设备已连接至iPhone

96
00:04:58,131 --> 0:05:00,133
Watch会暂时借用它

97
00:04:58,131 --> 0:05:00,133
Watch会暂时借用它

98
00:05:00,801 --> 0:05:03,170
另一种场景是无法实现上面的

99
00:05:03,437 --> 0:05:06,907
比如 当你连接至你的iPhone

100
00:05:08,141 --> 0:05:10,878
当你的app有了一个音频会话

101
00:05:11,211 --> 0:05:14,948
所有的网络API都能取回音频内容

102
00:05:15,349 --> 0:05:18,085
包括URLSessionStreamingTask

103
00:05:18,318 --> 0:05:21,788
URLSessionWebSocketTask

104
00:05:22,723 --> 0:05:26,360
当没有一个激活的音频会话

105
00:05:26,426 --> 0:05:27,661
你的通话会失败

106
00:05:29,530 --> 0:05:31,932
最后 当你的app有足够的

107
00:05:31,999 --> 0:05:34,668
它才会开始播放

108
00:05:34,735 --> 0:05:37,638
你可使用AVFoundation

109
00:05:40,040 --> 0:05:43,143
如果你需要从你的服务器

110
00:05:43,210 --> 0:05:46,313
你可以使用所有

111
00:05:48,382 --> 0:05:51,118
现在 我们来讲一下音频流播放

112
00:05:51,185 --> 0:05:52,352
上的最佳实践案例

113
00:05:52,419 --> 0:05:54,221
（最佳实践）

114
00:05:54,288 --> 0:05:58,025
Apple Watch Series 3

115
00:05:58,659 --> 0:06:00,861
这说明你的app需要检测

116
00:05:58,659 --> 0:06:00,861
这说明你的app需要检测

117
00:06:00,928 --> 0:06:03,931
Watch的运行版本

118
00:06:04,364 --> 0:06:05,465
在watchOS 6

119
00:06:05,532 --> 0:06:09,970
使用

120
00:06:10,037 --> 0:06:11,138
来检查

121
00:06:12,873 --> 0:06:16,376
我们不建议watchOS 6上的

122
00:06:16,443 --> 0:06:18,912
其他音频和和网络API使用

123
00:06:18,979 --> 0:06:21,782
WatchKit的

124
00:06:22,115 --> 0:06:23,283
为此

125
00:06:23,350 --> 0:06:26,386
watchOS 6上的

126
00:06:27,254 --> 0:06:30,390
现在 我们来讨论

127
00:06:32,492 --> 0:06:34,161
如何获取信息是关键

128
00:06:34,561 --> 0:06:37,998
根据不同的网络状况

129
00:06:38,065 --> 0:06:40,400
保存一定量的音频数据

130
00:06:42,369 --> 0:06:45,038
网络请求的数量和大小

131
00:06:45,105 --> 0:06:47,407
需要被控制到最小数量

132
00:06:47,708 --> 0:06:50,911
额外的请求将不会向

133
00:06:50,978 --> 0:06:52,813
可能会导致延时或停止播放

134
00:06:53,213 --> 0:06:55,449
也要避免请求下载

135
00:06:55,516 --> 0:06:56,817
不需要的数据

136
00:06:57,084 --> 0:06:59,887
不然 这些都会导致糟糕的用户体验

137
00:07:02,189 --> 0:07:07,194
安全起见 开始流播放时

138
00:07:07,895 --> 0:07:10,931
监测各种数据到达你app

139
00:07:10,998 --> 0:07:13,166
只有当网络状况允许的情况下

140
00:07:13,233 --> 0:07:15,435
提升速率

141
00:07:15,836 --> 0:07:19,439
AVFoundation自动

142
00:07:21,441 --> 0:07:23,710
不要依赖网络的可达性

143
00:07:23,977 --> 0:07:25,846
根据网络的特性

144
00:07:25,913 --> 0:07:27,915
在你app使用这些信息的时候

145
00:07:27,981 --> 0:07:31,652
API返回的信息可能不再有效

146
00:07:32,352 --> 0:07:34,121
为了最好的用户体验

147
00:07:34,188 --> 0:07:36,456
总是要处理网络连接时

148
00:07:36,523 --> 0:07:39,459
的中断和失败

149
00:07:40,027 --> 0:07:41,995
一直要实时调整

150
00:07:42,062 --> 0:07:44,298
你app的

151
00:07:44,364 --> 0:07:45,799
音频的质量和获取量

152
00:07:47,568 --> 0:07:51,305
最后 你的app

153
00:07:51,371 --> 0:07:52,773
的网络过渡会更平滑

154
00:07:53,140 --> 0:07:55,142
当Watch远离iPhone时

155
00:07:55,209 --> 0:07:58,478
从Bluetooth、Wi-Fi

156
00:07:59,079 --> 0:08:02,249
对于Watch来说

157
00:07:59,079 --> 0:08:02,249
对于Watch来说

158
00:08:02,316 --> 0:08:03,550
切换并不常见

159
00:08:04,051 --> 0:08:06,854
但你的app应该考虑到

160
00:08:06,920 --> 0:08:08,989
只需几秒钟就能完成

161
00:08:09,656 --> 0:08:10,490
如你所见

162
00:08:10,557 --> 0:08:14,761
当从其他平台 Apple或其他

163
00:08:14,828 --> 0:08:16,063
引入音频流app时

164
00:08:16,129 --> 0:08:17,764
你应该做好优化网络码和协议

165
00:08:17,831 --> 0:08:21,301
的准备

166
00:08:22,736 --> 0:08:23,804
如果你想要了解

167
00:08:23,871 --> 0:08:27,241
开始创建音频的更多信息

168
00:08:27,307 --> 0:08:30,777
为watchOS创建音频

169
00:08:31,345 --> 0:08:34,181
本次网络框架介绍会议的信息

170
00:08:34,248 --> 0:08:36,683
都是在watchOS

171
00:08:37,116 --> 0:08:39,453
最后 想要知道如何创建

172
00:08:39,520 --> 0:08:42,556
良好的音频流播放体验
