1
00:00:06,139 --> 0:00:09,943
（把iPad App引入Mac）

2
00:00:15,716 --> 0:00:16,884
谢谢

3
00:00:20,187 --> 0:00:22,256
欢迎大家参加演讲

4
00:00:22,789 --> 0:00:24,091
我叫Ali Ozer

5
00:00:24,157 --> 0:00:26,793
稍后会有我的同事

6
00:00:26,860 --> 0:00:29,463
我们今天会介绍

7
00:00:30,797 --> 0:00:32,064
我们将举办两场演讲

8
00:00:32,131 --> 0:00:34,268
在这第一场演讲中

9
00:00:34,902 --> 0:00:36,336
关于这是什么技术

10
00:00:36,403 --> 0:00:39,239
以及如何使用

11
00:00:39,506 --> 0:00:42,876
还有你应该了解的一些

12
00:00:43,510 --> 0:00:47,714
第二场演讲是把iPad App

13
00:00:48,115 --> 0:00:49,216
时间是在本周稍后一些时间

14
00:00:49,616 --> 0:00:50,884
我们会介绍高级内容

15
00:00:51,385 --> 0:00:53,520
比如让你的app成为一个

16
00:00:53,587 --> 0:00:56,356
以及app发布的注意事项

17
00:00:58,025 --> 0:01:00,027
那么到底什么是

18
00:00:58,025 --> 0:01:00,027
那么到底什么是

19
00:01:00,661 --> 0:01:03,163
嗯 它是一种可以让你

20
00:01:03,597 --> 0:01:06,900
原生地在Mac上

21
00:01:07,734 --> 0:01:08,836
让我具体说一下

22
00:01:08,902 --> 0:01:10,037
（原生地在Mac上重建

23
00:01:10,671 --> 0:01:12,139
Mac是一个稳健的开发平台

24
00:01:12,506 --> 0:01:14,608
承载了各种各样的app

25
00:01:15,075 --> 0:01:16,777
我们拥有强大的桌面app

26
00:01:17,277 --> 0:01:20,147
基于网络的体验以及图形密集型游戏

27
00:01:20,681 --> 0:01:23,884
并且这些体验都有特定的框架

28
00:01:23,951 --> 0:01:24,785
用于支持它们

29
00:01:25,319 --> 0:01:26,453
但我们漏掉了一个东西

30
00:01:26,787 --> 0:01:31,191
就是UIKit

31
00:01:33,060 --> 0:01:36,697
把UIKit作为Mac上

32
00:01:37,064 --> 0:01:39,633
你就可以把iPad app

33
00:01:40,000 --> 0:01:42,102
引入Mac并获得头等体验

34
00:01:43,103 --> 0:01:44,671
让我们谈谈如何实现

35
00:01:47,107 --> 0:01:49,943
我们有丰富的技术栈

36
00:01:50,244 --> 0:01:52,546
在iOS上和macOS上共享

37
00:01:52,813 --> 0:01:54,715
并且我们会尽可能地利用它

38
00:01:56,149 --> 0:01:58,886
我们还引入了

39
00:01:59,253 --> 0:02:01,822
并把它们完美地引入到Mac上

40
00:01:59,253 --> 0:02:01,822
并把它们完美地引入到Mac上

41
00:02:02,189 --> 0:02:05,092
与Mac和基础结构以及

42
00:02:05,893 --> 0:02:07,127
最后但并不是最不重要的

43
00:02:07,561 --> 0:02:09,395
我们把实现方式变简单了

44
00:02:10,497 --> 0:02:13,166
我会讲前两点

45
00:02:13,233 --> 0:02:14,568
演示并讨论第三个话题

46
00:02:14,635 --> 0:02:15,836
（平衡我们的共享技术栈

47
00:02:15,903 --> 0:02:17,171
（用XCODE为MAC

48
00:02:17,471 --> 0:02:19,873
好的 那么让我来展示一下

49
00:02:20,240 --> 0:02:22,910
这就是Mac的技术栈

50
00:02:23,510 --> 0:02:25,979
它们创建于框架之上 UI框架

51
00:02:26,046 --> 0:02:28,348
以及你在这里看到的低层级的框架

52
00:02:28,749 --> 0:02:30,617
这些只是一些具有代表性的框架

53
00:02:30,684 --> 0:02:33,053
我们 当然了

54
00:02:33,687 --> 0:02:36,089
除了框架 我们还有数据库

55
00:02:36,390 --> 0:02:39,226
诸如用户的相册数据库、情境、

56
00:02:39,493 --> 0:02:40,761
偏好等等之类的东西

57
00:02:41,261 --> 0:02:42,329
现在有服务

58
00:02:42,396 --> 0:02:45,499
包含诸如用于复制粘贴

59
00:02:45,966 --> 0:02:47,067
和文件协调的剪贴板服务一样的东西

60
00:02:47,501 --> 0:02:50,003
然后我们还有一个

61
00:02:50,070 --> 0:02:51,438
就是我们的

62
00:02:52,272 --> 0:02:54,608
现在iOS技术栈看起来很相似

63
00:02:54,942 --> 0:02:56,543
在iOS上我们有iOS app

64
00:02:56,610 --> 0:03:00,280
然后有框架栈

65
00:02:56,610 --> 0:03:00,280
然后有框架栈

66
00:03:00,647 --> 0:03:02,382
你可以从这里看到一些差异

67
00:03:02,449 --> 0:03:03,851
我马上就会讲到这个

68
00:03:06,253 --> 0:03:09,656
现在你们中有许多人还没有意识到

69
00:03:09,990 --> 0:03:13,694
在Mac上的模拟器中

70
00:03:14,695 --> 0:03:17,397
在模拟器自己的环境中运行的技术栈

71
00:03:17,931 --> 0:03:19,633
与众不同

72
00:03:19,700 --> 0:03:23,003
那么它有它自己的框架、

73
00:03:23,971 --> 0:03:27,441
模拟器的主要目标是复制iOS环境

74
00:03:27,808 --> 0:03:32,346
以便你调试和测试iOS app

75
00:03:33,080 --> 0:03:34,781
在这方面模拟器做得不错

76
00:03:35,616 --> 0:03:39,152
然而与Mac用户体验完美整合

77
00:03:39,486 --> 0:03:41,054
并不是模拟器的目标

78
00:03:41,522 --> 0:03:44,191
它的目标也不是以最优方式

79
00:03:45,959 --> 0:03:47,728
因此把iOS app

80
00:03:48,161 --> 0:03:49,363
原生地引入Mac中的一种方式是

81
00:03:49,796 --> 0:03:52,165
我们在Mac上增强了框架

82
00:03:53,000 --> 0:03:56,603
既支持AppKit app

83
00:03:58,338 --> 0:04:01,408
我们结合并统一了

84
00:03:58,338 --> 0:04:01,408
我们结合并统一了

85
00:04:02,009 --> 0:04:03,043
低层级的框架的功能

86
00:04:03,377 --> 0:04:06,580
框架比如CoreGraphics、

87
00:04:07,114 --> 0:04:09,550
用于创建单一拷贝

88
00:04:11,752 --> 0:04:14,555
现在请注意在这张图中

89
00:04:14,821 --> 0:04:17,457
依赖于UIKit

90
00:04:17,925 --> 0:04:19,226
我要稍微谈谈这一点

91
00:04:20,160 --> 0:04:22,062
同时请注意那边的ARKit

92
00:04:22,462 --> 0:04:25,232
因为Mac上没有增强现实功能

93
00:04:25,299 --> 0:04:26,767
因此我们没有引入那个框架

94
00:04:27,501 --> 0:04:28,468
那么好了

95
00:04:28,535 --> 0:04:30,704
不要误解我们 我们喜欢ARKit

96
00:04:31,538 --> 0:04:32,639
只是不能在Mac上用

97
00:04:33,307 --> 0:04:35,876
最后是中间的

98
00:04:36,176 --> 0:04:39,580
我们不仅把这个框架引入了Mac

99
00:04:40,113 --> 0:04:42,282
我们还在Mac给它做了公共API

100
00:04:42,649 --> 0:04:44,017
去年我们就这样做了

101
00:04:44,484 --> 0:04:46,587
在这个技术刚出来时

102
00:04:46,854 --> 0:04:48,655
我们就在众目睽睽之下实现了

103
00:04:49,323 --> 0:04:51,458
并且我们还统一了服务和数据库

104
00:04:51,525 --> 0:04:54,228
Photos和Contacts

105
00:04:54,294 --> 0:04:56,997
仅一次复制就既能用于AppKit

106
00:04:57,364 --> 0:04:58,232
对于服务也一样

107
00:04:58,298 --> 0:05:01,101
只有一种复制粘贴服务

108
00:04:58,298 --> 0:05:01,101
只有一种复制粘贴服务

109
00:05:01,168 --> 0:05:02,002
等等

110
00:05:02,436 --> 0:05:05,973
这就是Mac上

111
00:05:06,640 --> 0:05:09,476
看起来与AppKit app的

112
00:05:09,743 --> 0:05:12,646
并具有原生性能特征

113
00:05:14,181 --> 0:05:15,549
在离开这个话题之前

114
00:05:15,616 --> 0:05:18,752
让我再谈谈AppKit

115
00:05:19,853 --> 0:05:21,822
当然了 并不只是

116
00:05:21,889 --> 0:05:23,290
还有许多其它框架

117
00:05:23,724 --> 0:05:25,325
我要给你们展示其中两个

118
00:05:25,792 --> 0:05:27,060
就是这样

119
00:05:27,594 --> 0:05:29,830
因为AppKit

120
00:05:29,897 --> 0:05:32,733
依赖于它们自身的框架也保持独立

121
00:05:32,799 --> 0:05:35,035
即使字面名称一样

122
00:05:35,102 --> 0:05:37,037
比如两个WebKits

123
00:05:37,571 --> 0:05:38,805
原因有很多

124
00:05:39,940 --> 0:05:43,710
主要原因是那些类不一样

125
00:05:43,977 --> 0:05:47,314
它们还拥有自己的行为和支持结构

126
00:05:47,714 --> 0:05:51,418
因此我们反过来在创建这些类时

127
00:05:51,485 --> 0:05:52,853
类的声明和实施也不一样

128
00:05:53,320 --> 0:05:56,857
那么例如这是MKMapView

129
00:05:57,491 --> 0:05:59,760
在AppKit

130
00:05:59,826 --> 0:06:02,663
你可以看到这些实际上是

131
00:05:59,826 --> 0:06:02,663
你可以看到这些实际上是

132
00:06:04,431 --> 0:06:07,601
因此我们在系统中其实是

133
00:06:07,868 --> 0:06:10,671
在开发者SDK中也是

134
00:06:11,171 --> 0:06:12,906
然而这并不是你需要担心的东西

135
00:06:13,240 --> 0:06:15,843
Static Linker和

136
00:06:15,909 --> 0:06:19,046
会替你实现

137
00:06:19,112 --> 0:06:20,080
它们会查找这些框架的正确版本

138
00:06:20,614 --> 0:06:23,817
无论是在创建时的链接中

139
00:06:25,719 --> 0:06:28,755
那么换个话题

140
00:06:29,056 --> 0:06:30,791
我们为什么要把

141
00:06:32,359 --> 0:06:33,927
嗯 我的意思是这只是部分原因

142
00:06:33,994 --> 0:06:37,564
你知道的

143
00:06:37,631 --> 0:06:38,966
许许多多iPad app中的一些

144
00:06:39,733 --> 0:06:42,002
我们认为如果它们能在Mac上使用

145
00:06:42,936 --> 0:06:45,138
并且还有无数的Mac用户

146
00:06:45,472 --> 0:06:47,207
他们中有许多人都对你们的app

147
00:06:47,741 --> 0:06:50,244
因此这种技术为他们提供了

148
00:06:50,310 --> 0:06:51,845
也为你们创造了新的机遇

149
00:06:53,013 --> 0:06:54,181
（何时考虑向MAC

150
00:06:54,248 --> 0:06:55,349
或你可能在想

151
00:06:55,415 --> 0:06:58,585
这种技术是否适合你的app

152
00:06:58,919 --> 0:07:00,888
这个问题很好

153
00:06:58,919 --> 0:07:00,888
这个问题很好

154
00:07:03,190 --> 0:07:06,593
那么假如你有一个iPad app

155
00:07:06,960 --> 0:07:09,563
并且你想把app的功能

156
00:07:10,130 --> 0:07:11,398
嗯 这是个很好的例子

157
00:07:11,465 --> 0:07:13,300
正好可以考虑使用这种技术

158
00:07:13,667 --> 0:07:14,935
其中一种情况是

159
00:07:15,202 --> 0:07:16,403
你可能有一个iPad app

160
00:07:16,470 --> 0:07:19,473
但也许在台式机上是一种网页体验

161
00:07:20,507 --> 0:07:22,209
现在web界面可能会非常棒

162
00:07:22,576 --> 0:07:26,213
但它们不是原生的 你知道的

163
00:07:26,280 --> 0:07:27,681
可以使用硬件功能、

164
00:07:27,748 --> 0:07:31,018
有稳健的本地存储等等

165
00:07:32,286 --> 0:07:34,621
另一种情况就是

166
00:07:35,255 --> 0:07:39,193
但也许你的iPad app

167
00:07:40,127 --> 0:07:41,395
这两者并没有保持同步

168
00:07:41,728 --> 0:07:43,931
因此这可能是让你的Mac app

169
00:07:45,265 --> 0:07:48,735
还有一种情况也许是替换一个

170
00:07:48,802 --> 0:07:53,207
使用了非原生、非最优

171
00:07:53,707 --> 0:07:55,075
如果你的iPad app是原生的

172
00:07:55,442 --> 0:07:57,744
这可能是一个使你的Mac app

173
00:08:00,514 --> 0:08:02,616
然而 有一件事需要记住

174
00:08:03,884 --> 0:08:05,919
如果你已经在Mac上有了一个

175
00:08:06,320 --> 0:08:08,522
并且在Mac上维护良好

176
00:08:08,589 --> 0:08:10,524
并随着iOS版本进行了升级

177
00:08:10,891 --> 0:08:13,193
那么你其实就不需要考虑这个技术了

178
00:08:13,260 --> 0:08:14,728
你可以继续使用AppKit

179
00:08:15,362 --> 0:08:18,632
AppKit是最好的框架

180
00:08:18,699 --> 0:08:20,000
用于开发Mac app

181
00:08:20,334 --> 0:08:23,237
事实上它可以提供完整的API集合

182
00:08:23,704 --> 0:08:25,572
比Mac上提供的这种技术完整的多

183
00:08:28,108 --> 0:08:28,976
那么其中

184
00:08:29,042 --> 0:08:31,912
还有一些app并不适用这种技术

185
00:08:32,846 --> 0:08:34,347
其中一个例子就是

186
00:08:34,414 --> 0:08:36,884
iPhone app

187
00:08:36,950 --> 0:08:39,253
因此它们会利用小屏幕的优势

188
00:08:39,785 --> 0:08:41,421
我们非常希望你们

189
00:08:41,488 --> 0:08:44,091
可以充分利用大屏幕的优势

190
00:08:44,157 --> 0:08:45,492
在你把它引入Mac之前

191
00:08:46,760 --> 0:08:49,630
另一种情况是

192
00:08:50,664 --> 0:08:53,267
之前我告诉过你

193
00:08:53,667 --> 0:08:55,435
如果你的app是基于ARKit的

194
00:08:55,502 --> 0:08:57,371
那么它在Mac上

195
00:08:58,038 --> 0:09:01,175
但如果增强现实功能不是主要功能

196
00:08:58,038 --> 0:09:01,175
但如果增强现实功能不是主要功能

197
00:09:01,808 --> 0:09:03,944
那引入app仍然可能有意义

198
00:09:04,211 --> 0:09:06,580
但条件是在Mac上移除那个功能

199
00:09:08,649 --> 0:09:12,252
因此在这个舞台上

200
00:09:12,653 --> 0:09:13,987
让我提一下高水平的目标

201
00:09:14,054 --> 0:09:16,356
帮助我们设计和提交

202
00:09:18,025 --> 0:09:20,260
我们希望你们容易上手

203
00:09:21,061 --> 0:09:22,296
我们有一个复选框

204
00:09:22,629 --> 0:09:24,965
你昨天已经看到了

205
00:09:26,066 --> 0:09:30,537
我们希望你们能使用单一源代码库

206
00:09:30,938 --> 0:09:34,041
单一源代码库可以让你在开发时

207
00:09:34,441 --> 0:09:37,077
并支持同时推进

208
00:09:37,144 --> 0:09:39,046
app的iPad和Mac版本

209
00:09:40,314 --> 0:09:43,183
我想让你们在心里把你的app

210
00:09:44,484 --> 0:09:46,820
就跟你把它们作为

211
00:09:46,887 --> 0:09:50,157
并且我们希望你们思考—

212
00:09:50,224 --> 0:09:51,124
继续以iOS SDK和概念来思考

213
00:09:51,959 --> 0:09:54,795
最后我们希望在外部

214
00:09:54,862 --> 0:09:55,696
app可以成为一个Mac app

215
00:09:56,029 --> 0:09:59,266
因此对于用户来说

216
00:10:01,201 --> 0:10:03,337
好的 我说完了

217
00:10:03,403 --> 0:10:04,671
谈谈如何着手去做

218
00:10:10,811 --> 0:10:12,012
大家下午好

219
00:10:12,546 --> 0:10:15,249
现在你已经了解了一些关于把

220
00:10:15,549 --> 0:10:17,784
我要给大家介绍

221
00:10:17,851 --> 0:10:18,685
如何使用Xcode

222
00:10:19,419 --> 0:10:22,389
一般来说 你必须要学习一个

223
00:10:22,456 --> 0:10:23,957
并从零开始写一个全新的app

224
00:10:24,491 --> 0:10:27,427
但通过Xcode 11

225
00:10:27,494 --> 0:10:29,463
你当前的项目和源代码

226
00:10:29,997 --> 0:10:30,964
让我们来试试

227
00:10:35,669 --> 0:10:37,471
（着手去做）

228
00:10:42,242 --> 0:10:45,145
那么在这里我有一个

229
00:10:45,212 --> 0:10:46,280
是我之前准备好的

230
00:10:47,181 --> 0:10:49,883
一开始 我们要在Xcode中

231
00:10:52,986 --> 0:10:55,222
并勾选部署信息

232
00:10:55,789 --> 0:10:57,658
下边的Mac复选框

233
00:10:58,592 --> 0:11:01,595
现在请注意只有你的app

234
00:10:58,592 --> 0:11:01,595
现在请注意只有你的app

235
00:11:02,696 --> 0:11:04,865
那么我要继续并点击这个复选框

236
00:11:06,200 --> 0:11:07,835
我们将看到弹出一个sheet

237
00:11:07,901 --> 0:11:10,704
那会告诉你Xcode

238
00:11:11,471 --> 0:11:12,973
我要继续并点击启动

239
00:11:15,008 --> 0:11:17,010
现在让我们看看它会做什么

240
00:11:17,678 --> 0:11:19,580
那么你首先会注意到的

241
00:11:20,113 --> 0:11:23,450
Scheme Selector中

242
00:11:23,917 --> 0:11:27,321
这就允许你针对Mac创建、

243
00:11:30,324 --> 0:11:34,328
你还会看到在捆绑标识符字段下边

244
00:11:34,761 --> 0:11:37,865
使用这种技术引入到Mac的

245
00:11:37,931 --> 0:11:41,869
都将自动默认获得一个

246
00:11:41,935 --> 0:11:43,337
它使用了一个特殊的前缀

247
00:11:45,138 --> 0:11:47,474
如果你的app中有硬编码的引用

248
00:11:47,541 --> 0:11:49,209
或它的app扩展捆绑了ID

249
00:11:49,543 --> 0:11:52,012
你可能需要做一些协同修改

250
00:11:53,046 --> 0:11:55,782
你可以在我们的下一场演讲中

251
00:11:55,849 --> 0:11:58,318
配置和分配的更多信息

252
00:11:58,385 --> 0:12:00,721
把iPad App引入Mac

253
00:11:58,385 --> 0:12:00,721
把iPad App引入Mac

254
00:12:01,622 --> 0:12:03,824
接下来让我们谈谈功能

255
00:12:04,658 --> 0:12:08,128
在iOS上 app需要

256
00:12:08,195 --> 0:12:09,530
指定用法描述字符串

257
00:12:09,830 --> 0:12:12,599
从而获取某些受保护的系统资源

258
00:12:12,666 --> 0:12:14,668
比如摄像头或用户的地理位置

259
00:12:15,636 --> 0:12:17,571
Xcode将使用这些信息

260
00:12:17,638 --> 0:12:20,541
向你的Mac app中自动添加

261
00:12:20,607 --> 0:12:23,310
从而使你获得与iOS上同样的功能

262
00:12:24,411 --> 0:12:25,379
比如

263
00:12:26,046 --> 0:12:30,317
iOS app可以默认进行

264
00:12:30,617 --> 0:12:32,419
而Mac app需要授权

265
00:12:33,620 --> 0:12:35,556
如果我们进入签名和功能编辑器

266
00:12:36,089 --> 0:12:39,826
我们可以看到Xcode

267
00:12:40,194 --> 0:12:43,297
以及一些其它授权

268
00:12:43,363 --> 0:12:44,865
Info.plist中的

269
00:12:48,335 --> 0:12:50,838
接下来是框架和app扩展

270
00:12:51,772 --> 0:12:55,108
因为在macOS上还支持

271
00:12:55,409 --> 0:12:57,778
但两个SDK之间仍有差异

272
00:12:58,879 --> 0:13:01,715
我主要讲Xcode项目配置

273
00:12:58,879 --> 0:13:01,715
我主要讲Xcode项目配置

274
00:13:02,049 --> 0:13:05,018
稍后Jason会讲API差异

275
00:13:06,486 --> 0:13:08,455
当Xcode更新你的项目时

276
00:13:09,223 --> 0:13:12,492
它会自动从Mac版中

277
00:13:12,860 --> 0:13:15,429
包含不可用的系统、SDK框架、

278
00:13:15,495 --> 0:13:18,665
不可用的app扩展类型

279
00:13:19,833 --> 0:13:21,368
如果我们返回到通用标签…

280
00:13:22,870 --> 0:13:25,873
你可以看到在框架库中

281
00:13:26,607 --> 0:13:29,543
Xcode已经为某些依赖关系

282
00:13:30,110 --> 0:13:33,981
ARKit和Watch app

283
00:13:37,851 --> 0:13:40,487
让我们继续并尝试创建Mac版

284
00:13:43,657 --> 0:13:45,225
让我们看看我们是否有报错

285
00:13:46,860 --> 0:13:49,630
这个报错是由于

286
00:13:50,531 --> 0:13:53,233
因为它是针对iOS模拟器创建的

287
00:13:54,468 --> 0:13:58,005
你可能在想

288
00:13:58,071 --> 0:13:59,306
都适用于x86

289
00:13:59,640 --> 0:14:02,209
你能在Mac版iPad app中

290
00:13:59,640 --> 0:14:02,209
你能在Mac版iPad app中

291
00:14:02,843 --> 0:14:04,411
嗯 答案是不能

292
00:14:05,479 --> 0:14:08,081
对于你可能拥有的任何

293
00:14:08,515 --> 0:14:09,917
你都需要联系供应商

294
00:14:09,983 --> 0:14:11,785
以获得一个针对Mac环境下

295
00:14:12,119 --> 0:14:13,987
进行了特别编译的版本

296
00:14:14,688 --> 0:14:16,757
从源代码构建框架是项目的一部分

297
00:14:16,823 --> 0:14:19,693
另一部分是默认为Mac

298
00:14:19,760 --> 0:14:20,694
进行自动配置

299
00:14:24,798 --> 0:14:27,334
你可能会考虑使用平台下拉菜单

300
00:14:27,401 --> 0:14:30,137
这里在框架库和潜入内容部分

301
00:14:31,004 --> 0:14:33,473
排除了不兼容Mac版的库

302
00:14:34,007 --> 0:14:35,943
除非你可以获取兼容版本

303
00:14:36,310 --> 0:14:39,780
或者如果它提供的功能

304
00:14:40,681 --> 0:14:43,617
然而如果你依赖于框架来实现

305
00:14:43,884 --> 0:14:46,687
你最好等着供应商更新库

306
00:14:47,020 --> 0:14:48,255
在你报告给Mac之前

307
00:14:51,225 --> 0:14:52,359
在这种情况下

308
00:14:52,426 --> 0:14:55,395
我恰好有这个库的

309
00:14:56,263 --> 0:14:58,065
因此我要继续并把它添加到项目中

310
00:14:59,800 --> 0:15:01,969
首先我要删除现有框架

311
00:14:59,800 --> 0:15:01,969
首先我要删除现有框架

312
00:15:04,371 --> 0:15:06,206
现在我要继续并拖入新框架

313
00:15:09,676 --> 0:15:10,611
现在你可能会注意到的第一件事

314
00:15:10,677 --> 0:15:12,779
就是这不是一个常规的框架

315
00:15:14,248 --> 0:15:17,518
更新的库是作为XC框架提交的

316
00:15:17,851 --> 0:15:19,720
它是Xcode 11中的新功能

317
00:15:19,786 --> 0:15:23,357
允许库的开发人员

318
00:15:23,724 --> 0:15:27,060
你能在Xcode项目中使用的

319
00:15:28,295 --> 0:15:30,964
把app引入Mac时

320
00:15:31,598 --> 0:15:33,033
但它们使

321
00:15:33,567 --> 0:15:36,003
跨平台管理依赖关系变得更方便

322
00:15:37,371 --> 0:15:39,806
你可以在Swift中的

323
00:15:40,374 --> 0:15:43,310
请注意它们也适用于

324
00:15:46,980 --> 0:15:49,082
接下来把你的app

325
00:15:49,149 --> 0:15:51,785
当然就是你的代码

326
00:15:52,686 --> 0:15:55,622
我刚讲了Xcode如何自动排除

327
00:15:55,689 --> 0:15:57,591
一些不可用的框架

328
00:15:58,258 --> 0:16:00,627
但你仍然需要对源代码做一些调整

329
00:15:58,258 --> 0:16:00,627
但你仍然需要对源代码做一些调整

330
00:16:00,694 --> 0:16:03,463
以便编译出

331
00:16:03,530 --> 0:16:04,431
对那些框架所提供的API的引用

332
00:16:04,731 --> 0:16:07,835
那可能由于硬件不同

333
00:16:07,901 --> 0:16:09,436
或用户体验不同而变得不可用

334
00:16:12,005 --> 0:16:13,574
你可以有条件地在Swift中

335
00:16:13,640 --> 0:16:16,143
使用目标平台环境

336
00:16:16,577 --> 0:16:19,279
或Objective-C中的

337
00:16:20,881 --> 0:16:22,382
现在让我们来看一下

338
00:16:22,783 --> 0:16:24,384
我要继续并尝试再次创建

339
00:16:27,454 --> 0:16:29,957
我们可以看到ARKit不可用

340
00:16:31,658 --> 0:16:32,726
很好

341
00:16:33,160 --> 0:16:37,764
那么我想添加一种

342
00:16:38,365 --> 0:16:40,667
如果没有那种效果

343
00:16:41,068 --> 0:16:44,638
食物的最好体验是在AR中

344
00:16:44,705 --> 0:16:46,907
那么让我们继续并把它注掉

345
00:16:48,275 --> 0:16:50,878
那么我们已经拥有一些示例代码

346
00:16:53,180 --> 0:16:54,882
我要继续并

347
00:16:57,751 --> 0:17:00,287
我还要#ifdef相应的API

348
00:16:57,751 --> 0:17:00,287
我还要#ifdef相应的API

349
00:17:02,823 --> 0:17:04,758
好的 让我们再一次尝试创建它

350
00:17:07,294 --> 0:17:08,729
另一个报错 好的

351
00:17:09,530 --> 0:17:11,498
那么这一次…

352
00:17:13,165 --> 0:17:16,170
看起来StoreKit框架

353
00:17:16,737 --> 0:17:20,273
但我们尝试

354
00:17:21,040 --> 0:17:24,077
现在我不确定我的app营销团队

355
00:17:24,144 --> 0:17:26,246
但很可能不那么重要

356
00:17:26,313 --> 0:17:29,049
我把这个也#if掉

357
00:17:29,850 --> 0:17:30,851
好的

358
00:17:31,919 --> 0:17:36,890
我们可以把它留给他们来处理…

359
00:17:37,324 --> 0:17:38,525
还有别的吗？

360
00:17:39,326 --> 0:17:41,461
好的 很好

361
00:17:42,396 --> 0:17:44,731
那么此时此刻 我可以运行app了

362
00:17:45,465 --> 0:17:46,934
但在此之前

363
00:17:47,000 --> 0:17:49,770
让我们思考一个可对Mac app

364
00:17:50,838 --> 0:17:55,275
默认情况下UIKit app将用

365
00:17:55,909 --> 0:17:57,311
同样的圆角设计

366
00:17:58,378 --> 0:18:00,514
正如你在这里所看到的

367
00:17:58,378 --> 0:18:00,514
正如你在这里所看到的

368
00:18:01,548 --> 0:18:02,783
但Mac app的图标

369
00:18:03,050 --> 0:18:05,185
一般都有漂亮而丰富的细节

370
00:18:05,252 --> 0:18:07,654
尺寸最大可以达到512点

371
00:18:08,155 --> 0:18:11,058
并利用了透明度

372
00:18:12,292 --> 0:18:14,294
给你的app自定义一个

373
00:18:14,361 --> 0:18:15,462
真的会帮助它脱颖而出

374
00:18:15,863 --> 0:18:20,000
你可以从下面的演讲中

375
00:18:20,067 --> 0:18:22,236
“关于iOS和macOS设计

376
00:18:24,037 --> 0:18:25,973
为了添加Mac专用图标

377
00:18:26,940 --> 0:18:30,777
我们想导航到Xcode中的

378
00:18:31,845 --> 0:18:33,714
那么在这里选择我的资产目录

379
00:18:35,215 --> 0:18:37,050
我要选择App图标资源

380
00:18:39,453 --> 0:18:40,954
进入监测器

381
00:18:43,190 --> 0:18:44,858
并勾选Mac复选框

382
00:18:44,925 --> 0:18:46,126
显示新插入点

383
00:18:47,728 --> 0:18:49,930
然后你只需拖入新图标即可

384
00:18:50,864 --> 0:18:52,566
我要继续并使用一个

385
00:18:52,633 --> 0:18:53,800
我之前准备好的图标集合

386
00:18:55,502 --> 0:18:56,737
我要继续并拖入

387
00:18:58,739 --> 0:18:59,806
哎呦

388
00:19:01,575 --> 0:19:02,576
好了

389
00:19:04,011 --> 0:19:06,747
好的 你可以看到我们得到了一个

390
00:19:08,615 --> 0:19:11,318
那么让我们继续再做一次

391
00:19:11,718 --> 0:19:12,920
我要继续并再创建一次

392
00:19:13,787 --> 0:19:15,155
这可能要花点儿时间

393
00:19:15,222 --> 0:19:18,058
因为我们已经从为iOS创建

394
00:19:18,125 --> 0:19:20,294
它需要重新创建所有的源代码

395
00:19:20,360 --> 0:19:21,828
和所有的资源

396
00:19:24,364 --> 0:19:25,699
我们给它一点儿时间

397
00:19:27,000 --> 0:19:30,637
我们已经成功创建并运行了Mac版

398
00:19:31,471 --> 0:19:33,440
并且你可以看到我们已经有了

399
00:19:37,377 --> 0:19:39,079
并且你可以看到

400
00:19:39,580 --> 0:19:41,148
我们有窗口信号灯

401
00:19:41,582 --> 0:19:45,252
我们有菜单、可调整大小的窗口

402
00:19:45,986 --> 0:19:48,655
当然了 还有漂亮的Mac点心图标

403
00:19:49,923 --> 0:19:50,858
正如你所期待的那样

404
00:19:52,292 --> 0:19:55,495
一旦完成

405
00:19:55,963 --> 0:19:59,199
你可以在Xcode中点击

406
00:19:59,266 --> 0:20:01,134
创建一个存档并打开管理器

407
00:19:59,266 --> 0:20:01,134
创建一个存档并打开管理器

408
00:20:01,869 --> 0:20:04,204
然后你就可以发布到

409
00:20:04,271 --> 0:20:06,740
或使用开发者ID独立地发布

410
00:20:09,109 --> 0:20:12,513
那么这就是Xcode 11

411
00:20:12,579 --> 0:20:13,413
引入到Mac

412
00:20:14,481 --> 0:20:16,483
现在我要邀请Ali返回舞台

413
00:20:16,850 --> 0:20:19,453
他会告诉你更多

414
00:20:19,520 --> 0:20:20,487
你都可以免费使用

415
00:20:26,026 --> 0:20:28,929
好的 那么现在我想谈谈

416
00:20:29,429 --> 0:20:30,898
我要讲一下…

417
00:20:31,198 --> 0:20:32,733
你的免费午餐

418
00:20:33,166 --> 0:20:35,802
但你在UIKit中

419
00:20:36,303 --> 0:20:38,205
有大量...老实说

420
00:20:38,272 --> 0:20:39,106
你获得了大量免费的功能

421
00:20:39,339 --> 0:20:41,675
整个框架栈的大部分

422
00:20:41,742 --> 0:20:43,744
还有我刚才展示给你的数据库和服务

423
00:20:44,011 --> 0:20:46,246
都会自动应用到

424
00:20:46,613 --> 0:20:48,315
但在这里我想强调一些东西

425
00:20:48,382 --> 0:20:49,650
它们不仅仅是免费的

426
00:20:50,017 --> 0:20:53,287
还会自动映像到Mac范例

427
00:20:53,353 --> 0:20:54,621
并按Mac的方式来实现

428
00:20:55,289 --> 0:20:57,991
那么让我们首先看一下 Jake

429
00:20:58,058 --> 0:20:59,126
（免费获得默认菜单栏）

430
00:20:59,193 --> 0:21:00,294
那么正如你在演示中所看到的那样

431
00:20:59,193 --> 0:21:00,294
那么正如你在演示中所看到的那样

432
00:21:00,561 --> 0:21:01,929
你得到了默认菜单栏

433
00:21:02,262 --> 0:21:04,398
app有一个默认的

434
00:21:04,464 --> 0:21:07,167
拥有大量Mac用户所期待的菜单项

435
00:21:09,469 --> 0:21:10,737
接下来得到了窗口管理

436
00:21:10,804 --> 0:21:14,208
这包括比如重调窗口尺寸

437
00:21:14,541 --> 0:21:16,877
以及我们亲切地称为

438
00:21:16,944 --> 0:21:18,679
在标题栏中有三个按钮

439
00:21:19,279 --> 0:21:20,614
还要指出一点…

440
00:21:22,015 --> 0:21:23,884
如果你的iPad恰好在附近

441
00:21:24,218 --> 0:21:26,420
你可以在iPad上显示

442
00:21:26,486 --> 0:21:28,355
Mac窗口中的iPad app

443
00:21:33,694 --> 0:21:35,395
自动适用暗黑模式

444
00:21:36,630 --> 0:21:38,899
如果你再进一步并采用任意新API

445
00:21:38,966 --> 0:21:40,901
让你的app成为一个

446
00:21:40,968 --> 0:21:42,836
那些也将会被自动迁移过来

447
00:21:43,704 --> 0:21:46,707
滚动条和滚动在Mac上也没问题

448
00:21:47,207 --> 0:21:49,343
进行了映像以覆盖滚动条功能

449
00:21:50,711 --> 0:21:52,813
当窗口不活跃时也能使用滚动

450
00:21:52,880 --> 0:21:55,182
当然了 那是用户对Mac的期待

451
00:21:55,849 --> 0:21:56,917
通过手势滚动

452
00:21:57,885 --> 0:22:00,654
如果用户让滚动条一直显示

453
00:21:57,885 --> 0:22:00,654
如果用户让滚动条一直显示

454
00:22:00,721 --> 0:22:04,091
那也会自动应用在你的app中

455
00:22:05,792 --> 0:22:07,027
现在让我来谈谈设置

456
00:22:07,361 --> 0:22:09,129
我们的菜谱app没有任何设置

457
00:22:09,730 --> 0:22:11,965
因此我要给你演示一个

458
00:22:12,966 --> 0:22:15,269
在iOS上 app指定设置捆绑包

459
00:22:15,536 --> 0:22:17,771
并且这些控件—这些设置控件

460
00:22:17,838 --> 0:22:19,373
出现在iOS设置app中

461
00:22:19,773 --> 0:22:21,675
比如这是语音备忘录的设置

462
00:22:22,075 --> 0:22:23,076
在设置app中

463
00:22:23,143 --> 0:22:26,513
Mac上的设计准则是

464
00:22:26,947 --> 0:22:29,082
通过一个菜单项实现

465
00:22:29,683 --> 0:22:31,919
当我们看到你的app有设置之后

466
00:22:32,252 --> 0:22:33,353
我们会为你提供这个菜单项

467
00:22:33,687 --> 0:22:36,390
并像这样自动把设置

468
00:22:36,857 --> 0:22:38,225
在app内

469
00:22:38,825 --> 0:22:40,394
并且你可以看到它们并排放在一起

470
00:22:40,460 --> 0:22:41,495
这是自动发生的

471
00:22:47,334 --> 0:22:50,504
你的app获得了触摸条的基本支持

472
00:22:50,804 --> 0:22:52,573
所有app都会使用系统触摸条

473
00:22:52,940 --> 0:22:56,844
此外如果你使用API

474
00:22:57,177 --> 0:22:58,312
或UITextView

475
00:22:58,812 --> 0:23:01,315
它们也将自动提供

476
00:22:58,812 --> 0:23:01,315
它们也将自动提供

477
00:23:01,381 --> 0:23:03,083
app中的文本触摸条的媒体权限

478
00:23:03,150 --> 0:23:04,284
就像你在这里看到的这些一样

479
00:23:06,520 --> 0:23:08,455
另一个自动映像的关键元素就是

480
00:23:08,522 --> 0:23:09,857
文档选择器

481
00:23:09,923 --> 0:23:12,025
这就是如何让

482
00:23:12,092 --> 0:23:16,063
看上去像NSOpenPanel

483
00:23:18,131 --> 0:23:22,135
你所创建的自定义视图按原样显示

484
00:23:22,569 --> 0:23:23,804
在这个语音备忘录app中

485
00:23:23,871 --> 0:23:27,608
自定义波形视图

486
00:23:30,978 --> 0:23:32,613
现在让我讲另一个话题

487
00:23:32,679 --> 0:23:34,648
你可能会经常遇到

488
00:23:35,315 --> 0:23:37,684
让我们看一下News中的

489
00:23:38,218 --> 0:23:39,853
这是iPad上的News

490
00:23:40,120 --> 0:23:43,557
这是用于管理通知的表格sheet

491
00:23:45,025 --> 0:23:48,428
这是Mac上的News

492
00:23:49,029 --> 0:23:51,465
你可以看到表格sheet

493
00:23:51,899 --> 0:23:54,101
连同内容中的UI切换项一起

494
00:23:54,568 --> 0:23:56,103
我把它并排显示一下

495
00:23:56,937 --> 0:23:59,139
在这里你可以看到我的一个主要目标

496
00:23:59,640 --> 0:24:02,609
是在可能的情况下为你的app

497
00:23:59,640 --> 0:24:02,609
是在可能的情况下为你的app

498
00:24:04,411 --> 0:24:05,612
提供源代码的高度兼容性

499
00:24:05,979 --> 0:24:08,782
尝试为app提供

500
00:24:09,149 --> 0:24:10,951
象征着太多的混乱

501
00:24:11,518 --> 0:24:14,855
因此单独地

502
00:24:14,922 --> 0:24:18,859
按原来那样为你的app

503
00:24:20,994 --> 0:24:22,996
此外还有文本大小

504
00:24:23,864 --> 0:24:27,334
在iOS上

505
00:24:27,801 --> 0:24:30,404
而在Mac上是13点

506
00:24:31,538 --> 0:24:32,506
正如你所看到的那样

507
00:24:32,573 --> 0:24:34,908
当它们并排显示时字号大小不一样

508
00:24:35,475 --> 0:24:37,477
这种差异的存在有两个原因

509
00:24:37,544 --> 0:24:40,414
分别是iOS设备相对显示密度较高

510
00:24:40,681 --> 0:24:42,316
以及适应触摸需要

511
00:24:43,016 --> 0:24:46,453
为了提供与Mac app

512
00:24:46,787 --> 0:24:49,957
我们把内容区缩减到了原来的77%

513
00:24:51,225 --> 0:24:53,293
因此窗口中的一切看起来

514
00:24:53,560 --> 0:24:56,964
并且你不需要针对Mac版

515
00:24:58,065 --> 0:25:00,167
本周稍后会有一场

516
00:24:58,065 --> 0:25:00,167
本周稍后会有一场

517
00:25:00,234 --> 0:25:04,071
会深入地谈到一些与此相关的话题

518
00:25:06,039 --> 0:25:06,874
（还有更多免费功能）

519
00:25:06,940 --> 0:25:09,877
现在让我快速讲讲更多免费功能

520
00:25:10,544 --> 0:25:12,045
如果你实施了复制和粘贴、

521
00:25:12,112 --> 0:25:15,249
拖放、打印或利用iOS 13中的

522
00:25:15,315 --> 0:25:19,520
新功能多窗口、多任务API

523
00:25:19,586 --> 0:25:22,222
这些将会被自动免费迁移到Mac上

524
00:25:23,457 --> 0:25:26,527
在Mac上 app的生命周期

525
00:25:26,593 --> 0:25:29,396
针对管理生命周期所实施的任何回调

526
00:25:29,463 --> 0:25:31,932
都将被自动迁移到Mac上

527
00:25:32,332 --> 0:25:35,736
你可以在把iPad app

528
00:25:35,802 --> 0:25:36,837
提升到下一层级的演讲中

529
00:25:37,771 --> 0:25:39,072
除了这些免费功能

530
00:25:39,139 --> 0:25:41,575
还有一些功能可以让你的app

531
00:25:42,476 --> 0:25:43,544
就是这些

532
00:25:43,810 --> 0:25:45,679
Jake已经讲过了Mac图标

533
00:25:46,580 --> 0:25:49,383
本周稍后的高级演讲上

534
00:25:49,449 --> 0:25:52,953
在今天下午稍后的iOS

535
00:25:54,521 --> 0:25:55,756
好的 谢谢

536
00:25:55,822 --> 0:25:57,824
此时此刻

537
00:25:57,891 --> 0:25:59,826
（采用MAC图标、自定义菜单、

538
00:25:59,893 --> 0:26:01,028
（触摸条、悬浮事件、

539
00:25:59,893 --> 0:26:01,028
（触摸条、悬浮事件、

540
00:26:04,064 --> 0:26:05,232
好的 谢谢Ali

541
00:26:07,401 --> 0:26:08,335
（API差异）

542
00:26:09,002 --> 0:26:09,937
大家下午好

543
00:26:10,003 --> 0:26:12,105
我要深入地讲一些API的差异

544
00:26:12,606 --> 0:26:15,042
你很可能会在把iPad app

545
00:26:16,643 --> 0:26:19,146
我要讲的是三类API差异

546
00:26:20,681 --> 0:26:22,950
那些API有完全相同的行为

547
00:26:23,217 --> 0:26:25,452
绝大部分API都能正常使用

548
00:26:25,519 --> 0:26:26,620
（API差异概览）

549
00:26:27,120 --> 0:26:29,022
那些映像到macOS的API

550
00:26:29,323 --> 0:26:30,591
会自动功能化

551
00:26:31,625 --> 0:26:35,495
它们利用的是iOS API

552
00:26:36,997 --> 0:26:39,399
最后我们还会讲到

553
00:26:39,466 --> 0:26:40,567
由于各种原因而不可用的API

554
00:26:40,934 --> 0:26:42,769
在第一部分中我们不能全都讲到

555
00:26:43,403 --> 0:26:46,039
Ali在第二部分中讲到了许多

556
00:26:46,807 --> 0:26:49,142
但我还想在我们进入第三部分之前

557
00:26:49,776 --> 0:26:51,311
提到一个额外的区域

558
00:26:52,346 --> 0:26:53,780
就是鼠标和触摸事件

559
00:26:53,847 --> 0:26:54,982
（鼠标和触摸事件）

560
00:26:55,282 --> 0:26:59,086
iOS是围绕一个直接的

561
00:26:59,720 --> 0:27:03,590
并且macOS是围绕非直接的

562
00:26:59,720 --> 0:27:03,590
并且macOS是围绕非直接的

563
00:27:04,525 --> 0:27:05,993
当你尝试把多点触控app

564
00:27:06,426 --> 0:27:08,228
并让它自由发挥作用时

565
00:27:08,829 --> 0:27:10,330
你面临着巨大的挑战

566
00:27:10,964 --> 0:27:15,235
虽然我们的确尝试尽可能地

567
00:27:16,837 --> 0:27:19,339
我们引入了一个新的

568
00:27:19,873 --> 0:27:22,543
当鼠标悬浮在你的视图上时会通知你

569
00:27:22,609 --> 0:27:23,644
（悬浮）

570
00:27:23,710 --> 0:27:24,778
（单指触摸追踪）

571
00:27:24,845 --> 0:27:26,613
并且鼠标左键拖动

572
00:27:27,014 --> 0:27:30,017
被映像到一个单一合成的触摸序列中

573
00:27:30,517 --> 0:27:32,719
并由轻触、

574
00:27:33,287 --> 0:27:35,289
平移和长按手势识别器自动识别

575
00:27:35,355 --> 0:27:37,090
手势识别器用于识别单一触摸

576
00:27:42,296 --> 0:27:43,197
（标准手势）

577
00:27:43,263 --> 0:27:44,665
在Mac上标准系统手势

578
00:27:44,998 --> 0:27:47,601
在硬件或驱动程序级别被识别

579
00:27:48,268 --> 0:27:50,804
它们向系统发布高等级的手势事件

580
00:27:52,039 --> 0:27:55,375
当UIKit app收到高等级的

581
00:27:56,143 --> 0:27:57,911
我们合成一对触摸行为

582
00:27:58,312 --> 0:28:00,180
并把它们提交给游标下的视图

583
00:27:58,312 --> 0:28:00,180
并把它们提交给游标下的视图

584
00:28:00,981 --> 0:28:05,252
这将在你的app中自动触发

585
00:28:05,319 --> 0:28:06,320
任意捏合或旋转手势识别器

586
00:28:08,822 --> 0:28:11,758
如果用户执行了标准的系统滚动手势

587
00:28:12,159 --> 0:28:14,328
在这种情况下我们不会合成

588
00:28:14,728 --> 0:28:16,830
UIKit将自动

589
00:28:16,897 --> 0:28:18,765
在游标下的UI滚动视图中进行滚动

590
00:28:19,633 --> 0:28:20,868
（自定义多点触控代码）

591
00:28:21,335 --> 0:28:23,270
现在我们不能

592
00:28:23,337 --> 0:28:25,038
是自定义多点触控行为

593
00:28:25,539 --> 0:28:27,574
无论是直接处理UI触摸

594
00:28:27,641 --> 0:28:29,776
或是已经写好自定义手势识别器

595
00:28:30,410 --> 0:28:32,279
没有任何自动方式

596
00:28:32,713 --> 0:28:36,717
把Mac上的各种不同的输入设备

597
00:28:37,684 --> 0:28:39,453
如果你在app中依赖于此

598
00:28:39,520 --> 0:28:41,255
你需要提供一种替代方式

599
00:28:41,522 --> 0:28:43,190
让用户实现同样的操作

600
00:28:43,257 --> 0:28:44,491
当你把app引入到Mac时

601
00:28:46,760 --> 0:28:49,129
让我们继续API差异的第三类

602
00:28:49,396 --> 0:28:50,998
就是不可用的API

603
00:28:51,899 --> 0:28:53,567
一般分为四大类

604
00:28:53,634 --> 0:28:54,635
（不可用的API

605
00:28:54,701 --> 0:28:55,936
弃用的框架

606
00:28:56,003 --> 0:28:56,837
（iOS特有框架）

607
00:28:56,904 --> 0:29:00,807
框架不可用是因为

608
00:28:56,904 --> 0:29:00,807
框架不可用是因为

609
00:29:01,308 --> 0:29:02,876
在macOS中不存在

610
00:29:03,610 --> 0:29:04,444
（硬件特有框架）

611
00:29:04,511 --> 0:29:08,081
关联到特定软件功能

612
00:29:08,582 --> 0:29:09,750
在Mac上不存在

613
00:29:10,617 --> 0:29:12,085
最后还有许多框架

614
00:29:12,152 --> 0:29:14,421
有不同的行为或API

615
00:29:14,855 --> 0:29:16,990
由于各种原因在macOS上不可用

616
00:29:17,724 --> 0:29:19,359
要对这些添加注释从而澄清

617
00:29:19,426 --> 0:29:20,794
并在Xcode中生成报错

618
00:29:21,094 --> 0:29:22,729
那么让我们再深入地看一下

619
00:29:22,796 --> 0:29:23,931
（框架差异）

620
00:29:23,997 --> 0:29:24,998
（弃用的框架）

621
00:29:25,065 --> 0:29:28,302
弃用的框架通常是用了很久的框架

622
00:29:28,735 --> 0:29:29,903
在它们被弃用过之后

623
00:29:30,971 --> 0:29:33,874
然而这对于iPad app来说

624
00:29:34,341 --> 0:29:37,344
因此你不应该假设任意弃用的框架

625
00:29:37,744 --> 0:29:38,846
对你可用

626
00:29:39,947 --> 0:29:42,883
现在是时候把弃用的框架迁移到

627
00:29:42,950 --> 0:29:44,084
替代框架上了

628
00:29:44,785 --> 0:29:47,588
这不仅允许你

629
00:29:47,855 --> 0:29:49,423
还会让你的iPad app

630
00:29:51,758 --> 0:29:52,793
还有一些框架

631
00:29:53,060 --> 0:29:56,630
关联了当前Mac上

632
00:29:56,697 --> 0:29:57,798
（iOS特有的框架 CLASEKIT、

633
00:29:57,865 --> 0:30:00,234
ClassKit框架用于

634
00:29:57,865 --> 0:30:00,234
ClassKit框架用于

635
00:30:00,300 --> 0:30:01,602
能与Schoolwork app

636
00:30:02,069 --> 0:30:03,737
但Mac上不存在这个app

637
00:30:03,804 --> 0:30:04,738
因此那毫无意义

638
00:30:05,572 --> 0:30:06,907
HealthKit

639
00:30:07,307 --> 0:30:08,742
此时此刻不可用

640
00:30:08,809 --> 0:30:11,078
因为并不是所有潜在的功能都存在

641
00:30:11,778 --> 0:30:12,980
（硬件特有的框架）

642
00:30:13,046 --> 0:30:15,482
有一些关联到iOS设备上的

643
00:30:15,549 --> 0:30:18,585
用于实现仅存在于iOS上的功能

644
00:30:19,119 --> 0:30:20,687
这将在Mac上不可用

645
00:30:20,754 --> 0:30:22,222
因此如果你的app使用了这些框架

646
00:30:22,289 --> 0:30:24,791
在你把它引入到Mac之前

647
00:30:26,960 --> 0:30:29,796
有些关联了iOS设备上

648
00:30:29,863 --> 0:30:31,865
在Mac上可用

649
00:30:32,799 --> 0:30:35,469
但这些API的可用性和功能性

650
00:30:36,336 --> 0:30:39,706
受到限制 因为Mac通常没有

651
00:30:41,808 --> 0:30:44,344
在某些情况下

652
00:30:44,945 --> 0:30:46,780
因此你的app可能已经

653
00:30:47,848 --> 0:30:50,284
让我给你一个你可能期待的

654
00:30:51,051 --> 0:30:54,154
Core Location能用

655
00:30:54,721 --> 0:30:57,057
因此你应该期待它们在移动时

656
00:30:57,124 --> 0:30:58,292
对地理位置的变更没有那么敏感

657
00:30:59,626 --> 0:31:03,797
且若你使用Core Motion

658
00:30:59,626 --> 0:31:03,797
且若你使用Core Motion

659
00:31:04,431 --> 0:31:05,532
你应该意识到Mac

660
00:31:05,599 --> 0:31:07,367
没有实现此功能的传感器

661
00:31:07,935 --> 0:31:09,536
那样会实现非常好的用户体验

662
00:31:09,970 --> 0:31:13,507
因此你应该添加一个替代机制

663
00:31:16,376 --> 0:31:18,011
有许多媒体相关的框架

664
00:31:18,078 --> 0:31:19,713
你应该注意其中的差异

665
00:31:20,848 --> 0:31:23,951
Media Player框架

666
00:31:24,017 --> 0:31:25,319
与它在Mac上提供的功能基本一样

667
00:31:25,385 --> 0:31:28,856
可以使用立即播放信息中心

668
00:31:29,723 --> 0:31:31,892
但不能使用库或回放支持

669
00:31:31,959 --> 0:31:33,160
（框架差异 MEDIA PLAYER、

670
00:31:33,227 --> 0:31:35,495
并且如果你使用

671
00:31:35,562 --> 0:31:39,066
在iOS设备上捕捉静止图像或视频

672
00:31:39,666 --> 0:31:42,269
你可以在UIKit中使用

673
00:31:42,336 --> 0:31:45,339
从内嵌的前置Mac摄像头进行捕捉

674
00:31:47,908 --> 0:31:49,843
还有许多其它存在差异的框架

675
00:31:49,910 --> 0:31:51,845
我希望你们能关注其中几个

676
00:31:53,146 --> 0:31:56,116
Metal在我们的所有平台上

677
00:31:56,817 --> 0:31:59,686
因此你们中绝大多数人会发现

678
00:32:00,187 --> 0:32:02,589
引入到Mac之后不经修改就能使用

679
00:32:04,091 --> 0:32:06,760
如果你使用了我们最新的GPU中的

680
00:32:06,827 --> 0:32:09,696
比如Memoryless Textures

681
00:32:11,064 --> 0:32:13,800
我们引入了一个新GPU家族API

682
00:32:13,867 --> 0:32:15,836
帮助你制约你的代码

683
00:32:15,903 --> 0:32:17,838
从而使其在GPU家族的范围内运行

684
00:32:18,805 --> 0:32:21,775
UIKit中 UIWebView

685
00:32:22,242 --> 0:32:23,210
因此如果你已有UIWebView

686
00:32:23,277 --> 0:32:25,979
现在是时候迁移到

687
00:32:27,414 --> 0:32:28,448
（API可用性）

688
00:32:28,815 --> 0:32:31,084
那么正如你所看到的

689
00:32:31,151 --> 0:32:32,686
我们没时间提到每一个差异

690
00:32:33,520 --> 0:32:34,988
那么我想花点儿时间来谈谈如何

691
00:32:35,055 --> 0:32:37,191
自己定义哪个API存在差异

692
00:32:37,524 --> 0:32:40,394
以及哪个API不可用 当你把

693
00:32:42,362 --> 0:32:43,830
那么Mac版的iPad app

694
00:32:44,298 --> 0:32:46,433
是用macOS SDK创建的

695
00:32:47,301 --> 0:32:49,570
因此对于不可用的框架来说

696
00:32:50,137 --> 0:32:52,673
它们只是不存在于SDK中

697
00:32:53,307 --> 0:32:56,276
但对于在iOS和macOS上

698
00:32:56,944 --> 0:32:59,613
我们给方法添加了恰当的注释来阐明

699
00:33:01,114 --> 0:33:02,516
我们给API添加注释…

700
00:33:03,016 --> 0:33:06,553
在Swift中可用

701
00:33:07,354 --> 0:33:08,622
对于iOS app

702
00:33:09,122 --> 0:33:10,791
我们显然只关心这部分

703
00:33:12,292 --> 0:33:15,028
好消息是iOS上的可用性

704
00:33:15,095 --> 0:33:18,198
对Mac版iPad app

705
00:33:19,266 --> 0:33:21,902
正如我之前提到过的那样

706
00:33:21,969 --> 0:33:25,138
因此当你浏览API时

707
00:33:27,074 --> 0:33:28,742
当存在可用性差异时

708
00:33:28,809 --> 0:33:30,644
你会看到我们对它做了清楚的注释

709
00:33:31,311 --> 0:33:33,947
这是一个仅适用于Mac上的

710
00:33:34,014 --> 0:33:34,915
iPad app中的API

711
00:33:35,282 --> 0:33:37,351
现在类似的API非常罕见

712
00:33:38,285 --> 0:33:41,321
你所能找到的Mac版iPad

713
00:33:41,955 --> 0:33:44,925
都是因为API在iOS上可用

714
00:33:45,325 --> 0:33:46,293
但在Mac上不可用

715
00:33:46,994 --> 0:33:49,363
在绝大多数情况下

716
00:33:49,429 --> 0:33:51,131
不适用于UIKitForMac

717
00:33:53,767 --> 0:33:54,868
（制约代码）

718
00:33:55,235 --> 0:33:57,971
理想情况是绝大多数代码

719
00:33:58,038 --> 0:33:59,106
当你把它们引入到Mac时

720
00:33:59,473 --> 0:34:01,875
然而如果你有一些代码

721
00:33:59,473 --> 0:34:01,875
然而如果你有一些代码

722
00:34:02,242 --> 0:34:04,945
你可以使用targetEnvironment

723
00:34:06,613 --> 0:34:10,217
并且如果你使用Objective-C

724
00:34:10,284 --> 0:34:11,918
目标条件语句来实现同样的操作

725
00:34:13,187 --> 0:34:14,688
当然 你可以使用这个目标条件语句

726
00:34:14,755 --> 0:34:16,857
来包含只与Mac相关的代码

727
00:34:17,991 --> 0:34:18,958
（数据保护）

728
00:34:20,393 --> 0:34:22,262
数据保护是一个iOS功能

729
00:34:22,329 --> 0:34:24,731
你可以用于保护你app的文件

730
00:34:24,797 --> 0:34:26,300
并防止未经授权获取文件

731
00:34:27,400 --> 0:34:29,002
你可以正常读写文件

732
00:34:29,069 --> 0:34:31,905
但系统会自动对它们加密和解密

733
00:34:33,340 --> 0:34:36,476
当向文件系统写入文件时通过指定

734
00:34:36,543 --> 0:34:37,978
以下四个写入选项中的一个来实现

735
00:34:39,947 --> 0:34:40,880
目前在macOS上

736
00:34:41,281 --> 0:34:44,117
这些数据保护API不起作用

737
00:34:45,018 --> 0:34:47,321
如果你尝试像这个例子一样使用它们

738
00:34:48,422 --> 0:34:50,190
代码会进行编译并执行

739
00:34:50,958 --> 0:34:53,560
但数据不能被安全地存储到

740
00:34:54,962 --> 0:34:56,663
如果你需要安全地存储数据

741
00:34:57,197 --> 0:34:58,765
有一些可用的选项

742
00:34:59,700 --> 0:35:02,269
密码和相关数据可以存在

743
00:34:59,700 --> 0:35:02,269
密码和相关数据可以存在

744
00:35:02,903 --> 0:35:06,340
并且FileVault显然会加密

745
00:35:07,508 --> 0:35:09,243
但如果那不足以满足你的需要

746
00:35:09,309 --> 0:35:13,780
你可以在CryptoKit中

747
00:35:14,715 --> 0:35:16,617
在把内容写入到磁盘之前进行加密

748
00:35:17,518 --> 0:35:19,052
正如你在示例中看到的那样

749
00:35:19,119 --> 0:35:21,955
这个API让数据加密变得直截了当

750
00:35:22,856 --> 0:35:24,658
然后你只需要把数据存到磁盘上

751
00:35:25,092 --> 0:35:26,260
并把关键字写入

752
00:35:26,660 --> 0:35:29,029
请参考文档了解全部详细信息

753
00:35:29,096 --> 0:35:31,131
关于如何存储并稍后解密数据

754
00:35:33,133 --> 0:35:34,168
（捆绑格式）

755
00:35:34,968 --> 0:35:35,969
我想提到的另一个差异

756
00:35:36,036 --> 0:35:37,971
就是app的捆绑格式

757
00:35:39,306 --> 0:35:41,041
iOS上的app捆绑

758
00:35:41,909 --> 0:35:43,277
被认为是平面捆绑

759
00:35:44,178 --> 0:35:47,147
当Xcode创建Mac版

760
00:35:48,282 --> 0:35:50,684
它将创建一个macOS样式捆绑

761
00:35:50,751 --> 0:35:52,920
比你在iOS上所使用的

762
00:35:54,721 --> 0:35:58,025
如你使用NSBundle API

763
00:35:58,592 --> 0:36:00,561
那么这一切对你来说都是透明的

764
00:35:58,592 --> 0:36:00,561
那么这一切对你来说都是透明的

765
00:36:01,428 --> 0:36:04,264
然而如果你有与app捆绑

766
00:36:04,698 --> 0:36:07,935
你需要修改代码

767
00:36:09,736 --> 0:36:10,971
（扩展）

768
00:36:12,039 --> 0:36:14,374
iOS支持多种多样的扩展…

769
00:36:14,441 --> 0:36:16,977
但并不是所有都可用

770
00:36:17,744 --> 0:36:19,680
当你把iPad app

771
00:36:20,581 --> 0:36:22,783
这是一些所支持的扩展集合

772
00:36:22,850 --> 0:36:24,785
但你可能会发现一些API差异

773
00:36:25,953 --> 0:36:27,754
这些扩展将自动

774
00:36:27,821 --> 0:36:30,057
Mac…

775
00:36:30,457 --> 0:36:31,325
Mac上的app

776
00:36:31,592 --> 0:36:34,127
因此比如说

777
00:36:34,862 --> 0:36:37,764
将会在AppKitapplication中

778
00:36:37,831 --> 0:36:38,932
出现在分享扩展旁边的分享按钮中

779
00:36:41,735 --> 0:36:43,804
还有许多ACPI扩展—抱歉

780
00:36:43,871 --> 0:36:46,607
许多目前不能在macOS上

781
00:36:47,541 --> 0:36:50,244
其中有许多目前在macOS上

782
00:36:50,310 --> 0:36:53,514
便签包、自定义键盘

783
00:36:54,147 --> 0:36:56,783
因为与之相应的功能

784
00:36:57,584 --> 0:36:59,386
并且在某些情况下

785
00:36:59,453 --> 0:37:03,156
你应该直接切换到

786
00:36:59,453 --> 0:37:03,156
你应该直接切换到

787
00:37:05,025 --> 0:37:06,293
那么我们了解了许多

788
00:37:06,360 --> 0:37:07,995
产生影响的API差异

789
00:37:08,295 --> 0:37:10,197
让我们看一个关于

790
00:37:10,264 --> 0:37:11,899
这些差异的演示

791
00:37:17,004 --> 0:37:18,105
（演示）

792
00:37:27,214 --> 0:37:28,415
那么我们的菜谱app…

793
00:37:29,449 --> 0:37:31,852
有一个功能是可以把一个菜谱

794
00:37:32,920 --> 0:37:35,122
并且你可以看到其中一个菜谱旁

795
00:37:35,189 --> 0:37:36,089
用于显示状态

796
00:37:37,324 --> 0:37:39,493
现在app有个自定义多点触控手势

797
00:37:39,560 --> 0:37:40,827
可以转换收藏状态

798
00:37:41,495 --> 0:37:43,797
但正如我们所讨论过的

799
00:37:44,264 --> 0:37:46,567
因此让我们添加一个自定义菜单项

800
00:37:55,642 --> 0:37:57,444
因此我们要做的第一件事是禁用…

801
00:37:58,378 --> 0:37:59,780
我们的自定义手势识别器

802
00:38:01,215 --> 0:38:02,883
我们通过之前提到过的目标条件语句

803
00:38:02,950 --> 0:38:04,418
把它裹起来实现

804
00:38:06,153 --> 0:38:10,190
哎呦…那个 稍等一下

805
00:38:19,600 --> 0:38:21,235
好的 然后

806
00:38:22,269 --> 0:38:24,271
接下来我们要做的是…

807
00:38:26,740 --> 0:38:28,842
用IBAction注释标记

808
00:38:28,909 --> 0:38:31,311
手势识别器调用的那个方法

809
00:38:31,378 --> 0:38:33,947
即toggleSelectedRecipeFavoriteState

810
00:38:34,014 --> 0:38:35,582
因此IB—或…

811
00:38:36,149 --> 0:38:37,417
IB可以看到这个信息

812
00:38:37,918 --> 0:38:39,653
然后 最后我们需要…

813
00:38:40,220 --> 0:38:41,788
添加一个菜单验证方法

814
00:38:41,855 --> 0:38:43,991
这将在

815
00:38:44,057 --> 0:38:46,393
移除收藏和添加收藏菜单项之间转换

816
00:38:46,927 --> 0:38:48,929
根据当前所选择的菜谱

817
00:38:51,265 --> 0:38:53,667
现在我们只需要添加

818
00:38:57,437 --> 0:38:59,273
我们要进入

819
00:38:59,339 --> 0:39:01,008
我们将拖出主菜单

820
00:38:59,339 --> 0:39:01,008
我们将拖出主菜单

821
00:39:07,915 --> 0:39:09,249
哎呦 抱歉 我拖错了

822
00:39:11,118 --> 0:39:12,152
主菜单

823
00:39:13,086 --> 0:39:16,256
我们想向文件菜单中添加一个

824
00:39:17,157 --> 0:39:18,792
因此我要添加一个内联的菜单分区

825
00:39:19,960 --> 0:39:21,328
我只需要这些项中的其中一项

826
00:39:21,395 --> 0:39:22,563
因此我要删除其它项

827
00:39:23,530 --> 0:39:25,065
我们要把它修改为添加收藏

828
00:39:27,201 --> 0:39:28,769
我们要实现与命令键等同的功能

829
00:39:35,642 --> 0:39:38,212
然后我们所需要做的就是

830
00:39:39,813 --> 0:39:42,749
让它发送与手势识别器

831
00:39:43,517 --> 0:39:45,519
现在让我们创建并运行我们的app

832
00:39:56,163 --> 0:39:57,397
我认为它的位置可能显示错了

833
00:40:08,008 --> 0:40:10,077
现在你可以看到我们有一个

834
00:40:10,143 --> 0:40:12,312
当我点击它时我们会看到收藏图标

835
00:40:13,447 --> 0:40:16,216
当然如果你取消—也会取消收藏

836
00:40:16,283 --> 0:40:18,886
我们要测试菜单的快捷方式

837
00:40:18,952 --> 0:40:20,087
当然了它的功能很棒

838
00:40:32,099 --> 0:40:35,002
你刚才已经了解把iPad app

839
00:40:35,369 --> 0:40:36,570
因此如果你的app

840
00:40:37,037 --> 0:40:39,406
请勾选那个复选框

841
00:40:40,174 --> 0:40:43,177
一定要经常查看文档和版本注释

842
00:40:43,877 --> 0:40:46,413
我们在本场演讲结束后

843
00:40:46,813 --> 0:40:48,282
请一定要参加我们周四下午的演讲

844
00:40:48,348 --> 0:40:50,751
把iPad app引入Mac

845
00:40:51,351 --> 0:40:52,719
我们会讲如何让你的app

846
00:40:52,786 --> 0:40:54,721
在Mac上更加流畅地使用

847
00:40:55,189 --> 0:40:57,090
通过合并平台特有功能

848
00:40:58,091 --> 0:41:00,360
请参加一会儿举办的关于iOS

849
00:40:58,091 --> 0:41:00,360
请参加一会儿举办的关于iOS

850
00:41:00,427 --> 0:41:03,230
我们将讨论设计考量

851
00:41:03,297 --> 0:41:04,731
当你把iPad app

852
00:41:05,465 --> 0:41:06,667
最后是周四上午的字体管理

853
00:41:06,733 --> 0:41:08,936
和文本缩放演讲

854
00:41:09,002 --> 0:41:11,238
我们将具体介绍如何处理新字体

855
00:41:11,605 --> 0:41:13,440
或如何处理Mac版

856
00:41:13,941 --> 0:41:15,242
谢谢 请享受接下来的时间
