1
00:00:06,139 --> 0:00:09,676
（RealityKit和

2
00:00:16,817 --> 0:00:18,018
大家好

3
00:00:19,520 --> 0:00:20,387
我是Cody

4
00:00:20,454 --> 0:00:22,256
欢迎大家来到

5
00:00:22,322 --> 0:00:25,025
RealityKit和

6
00:00:27,928 --> 0:00:32,131
现在App Store里有许多

7
00:00:32,198 --> 0:00:34,334
它们都充分利用了

8
00:00:34,801 --> 0:00:39,039
这些app的开发者们

9
00:00:39,306 --> 0:00:42,609
例如渲染 物理和动画

10
00:00:43,677 --> 0:00:47,581
ARKit使创建

11
00:00:47,648 --> 0:00:50,050
但是我们要让它还要简单

12
00:00:52,819 --> 0:00:55,923
开发AR app

13
00:00:55,989 --> 0:00:59,960
会让你遇到一些其他领域没有的挑战

14
00:01:00,027 --> 0:01:03,363
最主要的是你创建的虚拟内容

15
00:01:03,430 --> 0:01:05,399
会与现实世界进行交互

16
00:01:05,465 --> 0:01:06,667
反过来也是一样

17
00:01:08,135 --> 0:01:11,805
所以如果你在一个

18
00:01:11,872 --> 0:01:14,541
它应该要照亮周围的物体

19
00:01:14,608 --> 0:01:16,610
不管是真实的还是虚拟的

20
00:01:17,144 --> 0:01:20,914
而且放置在现实世界的东西

21
00:01:20,981 --> 0:01:23,350
看起来要像它真的在那里一样

22
00:01:24,384 --> 0:01:28,455
这在比如网购这样的情况下十分重要

23
00:01:28,522 --> 0:01:32,693
如果你想看看该产品

24
00:01:33,994 --> 0:01:36,964
所以我们就非常需要

25
00:01:37,030 --> 0:01:39,099
十分逼真的渲染

26
00:01:39,800 --> 0:01:44,004
否则就无法增强现实

27
00:01:45,839 --> 0:01:47,574
进入到RealityKit

28
00:01:47,641 --> 0:01:50,110
这是Swift的一个新框架

29
00:01:50,611 --> 0:01:53,580
是为了帮助你创建AR app

30
00:01:53,647 --> 0:01:56,783
同时也能更轻松地利用ARKit

31
00:01:59,453 --> 0:02:02,222
RealityKit是一个

32
00:01:59,453 --> 0:02:02,222
RealityKit是一个

33
00:02:02,289 --> 0:02:05,626
这意味着它完全是从头开始设计的

34
00:02:05,692 --> 0:02:08,762
而它的重点在于AR app的开发

35
00:02:10,130 --> 0:02:11,532
所以该框架特别注重于

36
00:02:11,598 --> 0:02:14,168
高度逼真的物理渲染

37
00:02:14,234 --> 0:02:18,138
精确模拟现实生活环境对象

38
00:02:19,706 --> 0:02:22,509
我们也充分利用Swift

39
00:02:22,943 --> 0:02:27,748
创建出了一个有着

40
00:02:30,851 --> 0:02:32,419
除了RealityKit

41
00:02:32,486 --> 0:02:35,155
我们还会介绍

42
00:02:35,622 --> 0:02:37,191
这是一款Mac和iOS工具

43
00:02:37,257 --> 0:02:40,561
能够简单基于AR的内容

44
00:02:41,361 --> 0:02:42,629
它直观的设计

45
00:02:42,696 --> 0:02:46,300
针对的是任何想让他们自己的内容

46
00:02:46,366 --> 0:02:48,635
出现在现实世界中的人

47
00:02:49,603 --> 0:02:53,507
甚至让你可以直接在AR中布景

48
00:02:54,541 --> 0:02:56,176
但是在介绍这个功能之前

49
00:02:56,410 --> 0:02:59,613
让我们先讲RealityKit

50
00:03:01,882 --> 0:03:04,651
这是一个真实的房间

51
00:03:04,718 --> 0:03:07,187
桌子上还有一些小东西

52
00:03:08,288 --> 0:03:09,256
它故意有点模糊

53
00:03:09,323 --> 0:03:12,893
因为这里的相机焦点很浅

54
00:03:13,393 --> 0:03:17,598
我们可以用RealityKit

55
00:03:17,998 --> 0:03:20,667
让他们看起来真的像在这个环境里

56
00:03:23,237 --> 0:03:28,876
请注意这里的照明 阴影和相机效果

57
00:03:28,942 --> 0:03:32,279
让这个物体看起来像真的在里面一样

58
00:03:32,346 --> 0:03:34,548
像这样奇思妙想的东西都可以

59
00:03:36,049 --> 0:03:37,784
RealityKit可以帮助你

60
00:03:37,851 --> 0:03:41,889
并使你的内容自动适应环境

61
00:03:42,322 --> 0:03:46,326
你只要告诉该框架你想展示的东西

62
00:03:46,393 --> 0:03:49,429
然后它就会提供适用于

63
00:03:52,599 --> 0:03:55,536
让你简单构建

64
00:03:55,602 --> 0:03:57,671
实际上你刚刚看到的那个app

65
00:03:57,738 --> 0:04:00,240
我只写了四行代码

66
00:03:57,738 --> 0:04:00,240
我只写了四行代码

67
00:04:01,275 --> 0:04:02,242
所以在这里

68
00:04:03,177 --> 0:04:05,612
我在这个环境中放置了一个水平锚

69
00:04:05,679 --> 0:04:09,249
我从资产包中

70
00:04:09,750 --> 0:04:12,619
我再将该模型附加到锚点上

71
00:04:14,121 --> 0:04:15,155
在这次演讲中

72
00:04:15,222 --> 0:04:17,724
我会深入探讨每个概念的含义

73
00:04:19,259 --> 0:04:20,226
（系统和框架基础）

74
00:04:20,293 --> 0:04:22,262
你刚刚看到了该框架的运用

75
00:04:22,329 --> 0:04:25,265
让我们进入构成

76
00:04:26,033 --> 0:04:28,268
以及帮助你立即开始的基础知识

77
00:04:31,705 --> 0:04:33,273
为了帮助你创建app

78
00:04:33,674 --> 0:04:38,278
RealityKit的内置系统

79
00:04:39,847 --> 0:04:42,916
这些都与其他

80
00:04:42,983 --> 0:04:45,285
比如ARKit和Metal

81
00:04:46,653 --> 0:04:47,621
（渲染）

82
00:04:47,688 --> 0:04:48,722
首先

83
00:04:49,223 --> 0:04:52,125
渲染让你的内容

84
00:04:52,192 --> 0:04:56,230
在真实环境中看起来更真

85
00:04:56,897 --> 0:04:59,833
并且它使用基于物理的

86
00:04:59,900 --> 0:05:03,537
能够准确模拟照明和材料的相互作用

87
00:04:59,900 --> 0:05:03,537
能够准确模拟照明和材料的相互作用

88
00:05:04,471 --> 0:05:06,406
它建立在Metal上

89
00:05:06,473 --> 0:05:09,910
也就是说它针对Apple设备

90
00:05:10,744 --> 0:05:13,647
该系统充分利用了Metal

91
00:05:13,714 --> 0:05:17,551
例如多线程渲染和其他低级功能

92
00:05:18,986 --> 0:05:22,089
因为RealityKit

93
00:05:22,155 --> 0:05:23,891
所以渲染的功能

94
00:05:23,957 --> 0:05:26,326
完全专注于让你的内容

95
00:05:26,393 --> 0:05:28,896
在真实环境中看起来更真

96
00:05:31,331 --> 0:05:33,033
（动画）

97
00:05:33,100 --> 0:05:34,601
在渲染的基础上

98
00:05:34,668 --> 0:05:37,905
动画可以为你的内容带来生命力

99
00:05:37,971 --> 0:05:39,473
也能丰富你的场景

100
00:05:39,873 --> 0:05:42,976
RealityKit动画系统

101
00:05:43,443 --> 0:05:47,314
通过支持骨架和变换动画的方式

102
00:05:48,015 --> 0:05:50,817
两者都可以直接从USDZ导入

103
00:05:51,685 --> 0:05:53,954
你甚至可以通过ARKit的

104
00:05:54,021 --> 0:05:56,590
在程序上为你的对象制作动画

105
00:05:56,657 --> 0:05:58,058
（骨架 - 变换）

106
00:05:58,125 --> 0:06:00,727
（碰撞检测 刚体动力学

107
00:05:58,125 --> 0:06:00,727
（碰撞检测 刚体动力学

108
00:06:00,794 --> 0:06:04,698
物理系统负责模拟内容之间

109
00:06:04,765 --> 0:06:07,968
复杂的交互 包括现实世界中的物体

110
00:06:08,569 --> 0:06:11,104
它提供一个支持几种不同

111
00:06:11,572 --> 0:06:14,141
代理形状的碰撞检测系统

112
00:06:14,208 --> 0:06:17,878
如盒状 球体 甚至复合形状

113
00:06:18,812 --> 0:06:21,248
它还可以模拟刚体动力学

114
00:06:21,315 --> 0:06:25,385
例如质量 惯性 摩擦和恢复原状

115
00:06:31,458 --> 0:06:33,861
RealityKit有网络的

116
00:06:33,927 --> 0:06:37,798
它可以跨设备同步整个场景

117
00:06:38,265 --> 0:06:41,401
包括现实世界数据的共享表示

118
00:06:42,769 --> 0:06:46,406
它全部建立在Apple的

119
00:06:47,307 --> 0:06:49,676
该系统开箱即用

120
00:06:49,743 --> 0:06:52,212
它使构建连接的app

121
00:06:52,279 --> 0:06:53,714
变得十分简单和自动

122
00:06:57,618 --> 0:06:59,820
RealityKit使用

123
00:06:59,887 --> 0:07:01,488
来表示对象数据

124
00:06:59,887 --> 0:07:01,488
来表示对象数据

125
00:07:01,555 --> 0:07:04,091
对用户来说是非常有用的工具

126
00:07:04,157 --> 0:07:07,294
可以通过组合属性轻松创建内容

127
00:07:07,361 --> 0:07:10,430
而不是大对象继承层次结构

128
00:07:10,864 --> 0:07:13,567
你也可以创建自己的自定义组件

129
00:07:13,634 --> 0:07:17,437
将你的数据和功能添加到任何实体

130
00:07:18,305 --> 0:07:19,673
还有

131
00:07:19,740 --> 0:07:22,643
所有组件都会自动将它们的数据

132
00:07:22,709 --> 0:07:25,112
在网络设置中与其他设备同步

133
00:07:26,280 --> 0:07:27,748
甚至是自定义组件

134
00:07:27,814 --> 0:07:30,851
所以共享数据非常简单

135
00:07:34,254 --> 0:07:36,723
所以 我们现在看到的系统

136
00:07:36,790 --> 0:07:39,626
强调的是AR的视觉方面

137
00:07:39,693 --> 0:07:41,995
但这并不是全部

138
00:07:43,063 --> 0:07:45,299
音频也是非常重要的

139
00:07:45,365 --> 0:07:47,467
它能够帮你创建沉浸式内容

140
00:07:47,534 --> 0:07:49,736
让你相信它在现实世界中是存在的

141
00:07:50,838 --> 0:07:54,241
RealityKit的

142
00:07:55,008 --> 0:07:58,178
并且可以将音频置于动态内容上

143
00:07:59,179 --> 0:08:03,050
所以它可以让离你较远的虚拟对象

144
00:07:59,179 --> 0:08:03,050
所以它可以让离你较远的虚拟对象

145
00:08:03,116 --> 0:08:06,486
听起来就离你很远 反之亦然

146
00:08:11,325 --> 0:08:12,292
我还想提一提

147
00:08:12,359 --> 0:08:16,430
RealityKit定义了一个

148
00:08:16,496 --> 0:08:18,165
也就是Reality File

149
00:08:18,899 --> 0:08:22,636
它存储了可以加载到

150
00:08:23,704 --> 0:08:26,607
而且该文件能够囊括

151
00:08:27,307 --> 0:08:29,977
例如 网格和材质以及物理属性

152
00:08:30,043 --> 0:08:31,512
甚至音频资源

153
00:08:33,246 --> 0:08:37,618
RealityKit还支持

154
00:08:37,683 --> 0:08:39,586
类似于AR Quick Look

155
00:08:39,953 --> 0:08:43,690
使用Reality File也能

156
00:08:43,756 --> 0:08:45,959
也能让你更好地控制你的内容

157
00:08:47,394 --> 0:08:51,098
你也可以直接从

158
00:08:51,164 --> 0:08:53,000
我们稍后也会说到

159
00:08:55,335 --> 0:08:56,837
（框架基础 AR视图 - 锚

160
00:08:56,904 --> 0:08:59,139
在使用

161
00:08:59,206 --> 0:09:02,009
你会用到四个主要领域

162
00:08:59,206 --> 0:09:02,009
你会用到四个主要领域

163
00:09:02,075 --> 0:09:05,078
不管你要创建什么类型的app

164
00:09:05,345 --> 0:09:07,381
包括AR视图

165
00:09:07,447 --> 0:09:10,551
锚 场景和实体

166
00:09:12,085 --> 0:09:16,456
我们先从视图或者叫AR视图开始

167
00:09:17,257 --> 0:09:19,226
视图负责许多构建AR app中

168
00:09:19,293 --> 0:09:21,261
繁杂的工作

169
00:09:21,328 --> 0:09:24,965
这样你就能专注于提高体验

170
00:09:25,766 --> 0:09:28,769
它也有许多有用的功能

171
00:09:29,036 --> 0:09:30,070
比如

172
00:09:30,137 --> 0:09:32,806
完整的手势支持 这样你就可以添加

173
00:09:33,407 --> 0:09:37,311
这样你就可以响应

174
00:09:37,811 --> 0:09:41,882
这允许实体更加轻松地响应用户输入

175
00:09:42,783 --> 0:09:45,452
还有非常逼真的相机效果

176
00:09:45,519 --> 0:09:46,954
这是由渲染支持的

177
00:09:47,020 --> 0:09:49,756
这能够帮助你的虚拟内容集成到

178
00:09:49,823 --> 0:09:51,191
现实世界中

179
00:09:51,959 --> 0:09:52,826
实际上

180
00:09:52,893 --> 0:09:56,864
ARView可以为你提供

181
00:09:56,930 --> 0:09:59,433
一样开箱即用的质量和功能集

182
00:10:00,000 --> 0:10:02,936
让我们来看看其中一些相机效果

183
00:10:04,037 --> 0:10:06,039
（阴影 AR视图）

184
00:10:06,106 --> 0:10:07,741
为了让你的内容看起来像真的

185
00:10:07,808 --> 0:10:11,478
最重要的效果之一

186
00:10:11,545 --> 0:10:13,680
就是具有说服力的阴影

187
00:10:13,747 --> 0:10:15,048
地上的阴影

188
00:10:15,949 --> 0:10:18,952
看看该影片在没有加阴影的时候

189
00:10:19,019 --> 0:10:21,688
很难说这个机器人

190
00:10:21,755 --> 0:10:23,824
相对于下面的桌子在哪里

191
00:10:23,891 --> 0:10:26,426
是漂在空中还是站在桌子上

192
00:10:26,493 --> 0:10:27,895
很难说

193
00:10:27,961 --> 0:10:29,396
但是一旦加上阴影

194
00:10:29,463 --> 0:10:33,200
这个机器人在3D空间中

195
00:10:34,067 --> 0:10:35,302
AR视图提供

196
00:10:35,369 --> 0:10:37,504
两种不同的地面阴影技术

197
00:10:37,571 --> 0:10:38,438
供你选择

198
00:10:38,505 --> 0:10:41,508
使你的app更加出彩

199
00:10:41,575 --> 0:10:44,044
所以要么是简单的投影

200
00:10:44,111 --> 0:10:46,747
或者是更真实的阴影

201
00:10:46,813 --> 0:10:48,081
也就是你在这里看到的

202
00:10:50,651 --> 0:10:52,986
（动作模糊 AR视图）

203
00:10:53,053 --> 0:10:56,690
AR视图能够自动读取相机曝光时间

204
00:10:56,757 --> 0:10:58,625
这是ARKit提供的

205
00:10:58,692 --> 0:11:03,964
它能在场景中的所有虚拟内容上

206
00:10:58,692 --> 0:11:03,964
它能在场景中的所有虚拟内容上

207
00:11:04,031 --> 0:11:05,832
这有助于匹配实时相机中

208
00:11:05,899 --> 0:11:08,302
已经存在的模糊

209
00:11:09,303 --> 0:11:10,804
我希望这不会让你们不舒服

210
00:11:12,139 --> 0:11:13,006
好了

211
00:11:13,941 --> 0:11:16,810
看看关闭动作模糊时

212
00:11:16,877 --> 0:11:20,480
该内容看起来就是贴在视屏的表面

213
00:11:28,689 --> 0:11:29,523
好了

214
00:11:31,124 --> 0:11:33,560
我们构建了一个逼真的景深算法

215
00:11:33,627 --> 0:11:35,896
来模拟不同的相机焦点

216
00:11:35,963 --> 0:11:39,066
这也是ARKit提供的有用信息

217
00:11:39,733 --> 0:11:40,767
所以当设备相机

218
00:11:40,834 --> 0:11:43,604
聚焦在现实世界中特殊的一个点时

219
00:11:44,338 --> 0:11:47,407
AR视图会确保虚拟内容

220
00:11:47,474 --> 0:11:49,710
遵循相同的聚焦模式

221
00:11:50,077 --> 0:11:51,478
在该视频中

222
00:11:51,545 --> 0:11:55,482
视频焦点不断前后变换

223
00:11:56,216 --> 0:11:58,719
为了聚焦到单独的每一列

224
00:11:58,785 --> 0:12:00,721
（景深 AR视图）

225
00:11:58,785 --> 0:12:00,721
（景深 AR视图）

226
00:12:10,230 --> 0:12:14,168
最后 AR视图将数字胶片颗粒

227
00:12:14,234 --> 0:12:16,570
这是ARKit的新功能 相机颗粒

228
00:12:17,638 --> 0:12:20,307
因为数码相机都有一定的噪音

229
00:12:20,374 --> 0:12:23,076
特别是在低光环境下

230
00:12:23,143 --> 0:12:25,245
在你的虚拟内容中加入颗粒

231
00:12:25,312 --> 0:12:27,447
能够让用户感觉到

232
00:12:27,514 --> 0:12:30,017
该内容真的是真实世界的一部分

233
00:12:30,083 --> 0:12:33,754
而不是浮在相机的表面

234
00:12:33,820 --> 0:12:35,422
（相机噪声 AR视图）

235
00:12:35,489 --> 0:12:38,659
现在这个机器人没有加任何噪声

236
00:12:38,725 --> 0:12:41,328
看起来就不像是真的在这个环境中

237
00:12:41,395 --> 0:12:42,763
当你加上噪声

238
00:12:42,829 --> 0:12:45,832
看起来就是相机下的图像

239
00:12:45,899 --> 0:12:47,434
而不是在相机表面

240
00:12:50,771 --> 0:12:52,306
（实体 建立每个对象的块）

241
00:12:52,372 --> 0:12:53,774
（确定场景结构 提供层次变换）

242
00:12:53,841 --> 0:12:55,275
现在我们来说说实体

243
00:12:55,342 --> 0:12:56,910
它构成了你要创建的

244
00:12:56,977 --> 0:12:59,112
任何体验的主要构建块

245
00:12:59,613 --> 0:13:02,216
你场景中的所有虚拟内容

246
00:12:59,613 --> 0:13:02,216
你场景中的所有虚拟内容

247
00:13:02,282 --> 0:13:04,885
是由具有不同类型组件的一个实体

248
00:13:04,952 --> 0:13:07,054
来为其提供特殊的功能

249
00:13:08,555 --> 0:13:11,859
任何实体都可以作为其他实体的父级

250
00:13:12,826 --> 0:13:15,395
这能够帮助我们创建场景结构

251
00:13:15,996 --> 0:13:17,531
并构建一个层次变换

252
00:13:17,598 --> 0:13:20,634
因此它更容易推理

253
00:13:21,568 --> 0:13:22,803
例如

254
00:13:23,704 --> 0:13:26,139
你有一个虚拟的桌子和虚拟的杯子

255
00:13:26,440 --> 0:13:28,442
你想要杯子在桌子上

256
00:13:29,042 --> 0:13:32,079
你可能会将桌子实体

257
00:13:32,145 --> 0:13:34,248
这样它们在空间里就可以同时移动

258
00:13:37,818 --> 0:13:39,820
（AR锚固）

259
00:13:39,887 --> 0:13:41,655
现在我们来讲讲锚固

260
00:13:41,722 --> 0:13:44,725
以及它在AR中为何如此重要

261
00:13:45,325 --> 0:13:48,462
在现实世界中

262
00:13:48,795 --> 0:13:51,698
如果我们将虚拟内容

263
00:13:51,765 --> 0:13:56,570
适应动作对于实际体验就至关重要

264
00:13:58,105 --> 0:14:00,741
例如 如果你的内容已锚定到图像

265
00:13:58,105 --> 0:14:00,741
例如 如果你的内容已锚定到图像

266
00:14:00,807 --> 0:14:03,477
比如桌子上的杂志

267
00:14:03,544 --> 0:14:04,945
这样物体就应该固定在上面了

268
00:14:05,012 --> 0:14:08,582
不管杂志在现实中是怎么移动的

269
00:14:10,184 --> 0:14:11,818
RealityKit解决了该问题

270
00:14:11,885 --> 0:14:16,590
ARKit锚作为API的

271
00:14:17,024 --> 0:14:19,359
支持任何锚定类型

272
00:14:19,426 --> 0:14:22,196
比如飞机 身体 脸部和相机

273
00:14:24,097 --> 0:14:28,402
现实世界中的任何表面都能被锚定

274
00:14:28,468 --> 0:14:32,706
我们将每一个锚点

275
00:14:33,607 --> 0:14:35,909
因此 为了说明锚在

276
00:14:36,210 --> 0:14:39,513
我们假设现实环境中

277
00:14:39,580 --> 0:14:41,415
我们可以将内容锚定在上面

278
00:14:41,481 --> 0:14:43,183
比如桌子或者墙

279
00:14:44,384 --> 0:14:47,087
每一个都可以用作锚

280
00:14:49,223 --> 0:14:50,057
所有的锚

281
00:14:50,123 --> 0:14:52,893
都有附加到它们的实体的层次结构

282
00:14:53,293 --> 0:14:54,895
这一点很重要

283
00:14:55,229 --> 0:14:58,632
因为实体的层次结构在相应锚点

284
00:14:59,099 --> 0:15:03,136
在现实世界中被ARKit

285
00:14:59,099 --> 0:15:03,136
在现实世界中被ARKit

286
00:15:04,171 --> 0:15:05,005
例如

287
00:15:05,072 --> 0:15:07,774
如果你要定义一个水平平面锚点

288
00:15:07,841 --> 0:15:09,209
再附加实体

289
00:15:09,276 --> 0:15:11,778
你在ARKit成功确认水平平面前

290
00:15:11,845 --> 0:15:15,716
在现实世界是看不到这个实体的

291
00:15:15,782 --> 0:15:18,719
这就防止了内容仅在空间浮动

292
00:15:18,785 --> 0:15:20,621
直到锚点被确定

293
00:15:23,924 --> 0:15:25,225
所以现在

294
00:15:25,292 --> 0:15:27,661
你的场景中可以引入新锚点

295
00:15:27,728 --> 0:15:29,396
比如图片锚点

296
00:15:29,997 --> 0:15:33,100
可能会将用于显示虚拟框架的

297
00:15:33,166 --> 0:15:36,203
比如墙上的照片

298
00:15:36,737 --> 0:15:39,806
所以如果你想移动照片

299
00:15:40,440 --> 0:15:42,576
比如你想将照片移到不同的墙上

300
00:15:42,643 --> 0:15:44,745
或者就想往左一点点

301
00:15:45,512 --> 0:15:47,948
虚拟框架也会随之移动

302
00:15:52,753 --> 0:15:53,587
最后

303
00:15:53,654 --> 0:15:56,123
让我们一起来看看AR场景的构成

304
00:15:56,590 --> 0:15:59,626
你们接下来都会看到

305
00:16:00,961 --> 0:16:02,863
我们从AR视图开始

306
00:16:03,664 --> 0:16:06,300
这是AR的开始

307
00:16:07,367 --> 0:16:09,369
它包含了对场景的引用

308
00:16:10,737 --> 0:16:13,574
并且是你可以手动添加

309
00:16:13,640 --> 0:16:14,908
就像你之前看到的那样

310
00:16:16,743 --> 0:16:18,979
每一次你要加载新实体

311
00:16:19,680 --> 0:16:21,982
你就可以将其附加至你选择的锚点

312
00:16:22,649 --> 0:16:27,187
或者附加到先前加载的实体

313
00:16:28,722 --> 0:16:30,023
在这个例子中

314
00:16:30,424 --> 0:16:31,758
我们有两个锚点

315
00:16:31,825 --> 0:16:34,061
每一个都形成了各自的层次结构

316
00:16:37,764 --> 0:16:40,033
现在结合刚刚我们所说的全部

317
00:16:40,100 --> 0:16:42,536
我们来看一个演示

318
00:16:48,809 --> 0:16:50,177
（演示）

319
00:16:50,244 --> 0:16:51,979
我们要做的

320
00:16:52,546 --> 0:16:55,015
是先检测我前面这个平面

321
00:16:55,549 --> 0:17:00,387
再将虚拟内容添加到这个平面

322
00:16:55,549 --> 0:17:00,387
再将虚拟内容添加到这个平面

323
00:17:00,454 --> 0:17:05,058
利用RealityKit中的

324
00:17:05,125 --> 0:17:06,292
程序网格生成库

325
00:17:07,895 --> 0:17:09,396
所以我们把它调出来

326
00:17:09,463 --> 0:17:12,465
我还要加一些虚拟玩具

327
00:17:13,200 --> 0:17:15,736
让它们和这些盒子交互

328
00:17:16,303 --> 0:17:17,637
好了

329
00:17:21,541 --> 0:17:22,976
你可以看到物理系统

330
00:17:23,042 --> 0:17:26,246
负责不同对象之间的交互

331
00:17:26,313 --> 0:17:28,682
动画系统为这架飞机制作动画

332
00:17:28,749 --> 0:17:30,517
让它朝我飞来

333
00:17:30,918 --> 0:17:34,955
RealityKit自动处理光线

334
00:17:35,022 --> 0:17:37,558
还有阴影 还有不同的相机效果

335
00:17:37,624 --> 0:17:40,227
让这些内容尽可能

336
00:17:40,294 --> 0:17:41,595
贴合实际

337
00:17:42,262 --> 0:17:44,464
这整个app只需要几行代码

338
00:17:44,531 --> 0:17:48,068
代码就只有加载方块盒子

339
00:17:48,135 --> 0:17:49,670
加载网格

340
00:17:49,736 --> 0:17:52,840
再告诉RealityKit

341
00:17:53,974 --> 0:17:54,908
就结束了

342
00:18:02,449 --> 0:18:04,685
接下来我想有请Tyler

343
00:18:04,751 --> 0:18:08,422
来详细讲讲RealityKit

344
00:18:12,392 --> 0:18:13,327
谢谢Cody

345
00:18:14,995 --> 0:18:15,963
我是Tyler Casella

346
00:18:16,029 --> 0:18:18,332
我将为你们

347
00:18:18,398 --> 0:18:20,667
和Reality Composer

348
00:18:21,602 --> 0:18:24,471
让我们先从

349
00:18:24,538 --> 0:18:28,108
构建AR app需要什么开始

350
00:18:34,181 --> 0:18:35,516
就像Cody向你们展示的那样

351
00:18:35,582 --> 0:18:38,452
RealityKit使用

352
00:18:38,519 --> 0:18:40,554
来将对象创建到现实世界中

353
00:18:41,088 --> 0:18:43,156
实体创建了你的场景结构

354
00:18:43,223 --> 0:18:44,825
和层次结构

355
00:18:44,892 --> 0:18:46,860
那么对你来说燥本地空间

356
00:18:46,927 --> 0:18:48,462
推理对象就更简单了

357
00:18:48,929 --> 0:18:51,398
现在如果你不熟悉实体组件设计模式

358
00:18:51,465 --> 0:18:52,299
没关系

359
00:18:52,366 --> 0:18:54,368
用起来其实很直观

360
00:18:55,502 --> 0:18:57,571
实体本身

361
00:18:57,638 --> 0:19:01,041
实际上由许多不同的组件组成

362
00:18:57,638 --> 0:19:01,041
实际上由许多不同的组件组成

363
00:19:01,108 --> 0:19:04,912
并且组件被定义为特定的行为和数据

364
00:19:04,978 --> 0:19:07,147
可以添加至独立实体

365
00:19:07,948 --> 0:19:10,918
与严格的继承模式不同

366
00:19:10,984 --> 0:19:12,452
使用实体和组件

367
00:19:12,519 --> 0:19:17,658
可以更好更灵活地运用代码

368
00:19:18,358 --> 0:19:21,528
它还提供了巨大的性能优势

369
00:19:21,595 --> 0:19:24,831
在内存布局和多线程两方面都有

370
00:19:24,898 --> 0:19:26,767
为了更好地解释实体和组件

371
00:19:26,834 --> 0:19:28,302
我们来看一个例子

372
00:19:29,803 --> 0:19:32,372
比如我们有在app中经常使用的

373
00:19:32,439 --> 0:19:34,641
不同的对象类型

374
00:19:34,708 --> 0:19:37,177
比如球 台灯还有相机

375
00:19:37,811 --> 0:19:40,080
现在还经常有许多

376
00:19:40,147 --> 0:19:42,249
它们共有的行为

377
00:19:42,316 --> 0:19:44,184
比如说锚定

378
00:19:44,918 --> 0:19:47,855
这些对象要被锚定到现实世界中

379
00:19:47,921 --> 0:19:51,191
所以我们可以对它们所有

380
00:19:52,559 --> 0:19:56,430
现在 因为球和灯都有视觉表现

381
00:19:56,496 --> 0:19:59,466
所以我们对其添加模型组件

382
00:19:59,533 --> 0:20:02,503
但是相机不添加

383
00:19:59,533 --> 0:20:02,503
但是相机不添加

384
00:20:03,003 --> 0:20:05,806
这正是实体组件设计的构成方面

385
00:20:05,873 --> 0:20:07,441
变得强大的地方

386
00:20:08,141 --> 0:20:10,644
现在 为了让对象相互碰撞

387
00:20:10,711 --> 0:20:12,946
我们可以对其添加碰撞组件

388
00:20:13,347 --> 0:20:15,549
之后我们继续操作

389
00:20:15,616 --> 0:20:17,985
直到得到我们想要的活动为止

390
00:20:18,385 --> 0:20:20,554
你可能注意到了这些对象

391
00:20:20,621 --> 0:20:22,756
都有独特的表现方式

392
00:20:22,823 --> 0:20:24,892
但是以这种方式构建代码

393
00:20:24,958 --> 0:20:28,395
你可以避免重复代码和重用行为

394
00:20:30,030 --> 0:20:32,633
我们来看看实体在代码中是怎样的

395
00:20:33,066 --> 0:20:36,370
实体本身不会创建任何参数

396
00:20:36,436 --> 0:20:37,704
但是如果你有实体

397
00:20:37,771 --> 0:20:41,241
你就可以使用下标运算符

398
00:20:42,309 --> 0:20:43,477
同样的方法

399
00:20:43,544 --> 0:20:46,780
你可以删除和修改这些实体上的组件

400
00:20:47,114 --> 0:20:49,683
它允许你修改实体

401
00:20:49,750 --> 0:20:50,817
动态行为

402
00:20:52,352 --> 0:20:54,588
现在所有的实体都包含子项

403
00:20:54,655 --> 0:20:57,658
你可以用addChild方法

404
00:20:58,292 --> 0:20:59,760
有了这种层次结构

405
00:21:01,395 --> 0:21:02,996
设置实体位置

406
00:21:03,063 --> 0:21:06,099
你就是在定义它

407
00:21:06,667 --> 0:21:09,002
如果你想设置在现实世界中的位置

408
00:21:09,069 --> 0:21:12,439
你可以使用

409
00:21:12,706 --> 0:21:15,409
将现实实体定义为无

410
00:21:15,475 --> 0:21:17,878
这也就表明你也想要

411
00:21:18,946 --> 0:21:20,414
我们知道一些开发者

412
00:21:20,480 --> 0:21:22,950
才刚刚开始创建他们的app

413
00:21:23,016 --> 0:21:25,853
所以我们提供了许多有用的实体变体

414
00:21:25,919 --> 0:21:28,455
它们已经预先配置好并可以使用

415
00:21:28,922 --> 0:21:33,060
它们包含了一般功能如确定锚点

416
00:21:33,126 --> 0:21:36,663
在场景中添加虚拟内容

417
00:21:37,064 --> 0:21:39,666
通过实例化任何这些实体

418
00:21:39,933 --> 0:21:43,904
所有必需的组件

419
00:21:44,238 --> 0:21:45,572
我们来看看其中一些实体

420
00:21:45,639 --> 0:21:47,007
以及如何使用

421
00:21:47,875 --> 0:21:49,977
第一个是AnchorEntity

422
00:21:50,310 --> 0:21:51,945
这是现实世界的粘合剂

423
00:21:52,012 --> 0:21:53,981
这也通常是创建AR app

424
00:21:54,047 --> 0:21:55,682
要做的第一件事

425
00:21:56,817 --> 0:22:00,354
有了AnchorEntity

426
00:21:56,817 --> 0:22:00,354
有了AnchorEntity

427
00:22:00,420 --> 0:22:01,722
现实世界的锚点

428
00:22:01,788 --> 0:22:03,991
如果该对象在环境中移动

429
00:22:04,258 --> 0:22:06,593
AnchorEntity

430
00:22:07,127 --> 0:22:07,961
因此

431
00:22:08,028 --> 0:22:11,465
AnchorEntity

432
00:22:11,532 --> 0:22:14,034
之后在网上加特定组件

433
00:22:15,969 --> 0:22:18,772
AnchorEntity

434
00:22:18,839 --> 0:22:20,040
所有可用锚点类型

435
00:22:20,107 --> 0:22:22,809
这可以快速将你的内容带入现实世界

436
00:22:23,110 --> 0:22:26,113
例如 你可以指定内容锚定的

437
00:22:26,180 --> 0:22:28,248
图片或对象

438
00:22:28,315 --> 0:22:31,518
然后在检测到符合规格的锚时

439
00:22:31,585 --> 0:22:34,354
它就会自动附加并在现实世界中出现

440
00:22:35,689 --> 0:22:39,426
如果你已经有AR锚点或

441
00:22:39,493 --> 0:22:41,895
你也可以直接锚定

442
00:22:42,796 --> 0:22:45,933
我们来看看如何在

443
00:22:47,067 --> 0:22:48,902
当你创建锚定实体时

444
00:22:48,969 --> 0:22:51,805
你是在描述锚定对象

445
00:22:52,139 --> 0:22:53,173
这里是我的描述

446
00:22:53,240 --> 0:22:56,777
我想让AnchorEntity

447
00:22:56,844 --> 0:22:59,112
类别是桌子

448
00:22:59,179 --> 0:23:02,749
最小边界为半米乘半米

449
00:22:59,179 --> 0:23:02,749
最小边界为半米乘半米

450
00:23:03,984 --> 0:23:07,287
之后我们要将该锚

451
00:23:07,354 --> 0:23:08,989
再加入场景后

452
00:23:09,056 --> 0:23:11,625
锚并不会马上激活

453
00:23:12,059 --> 0:23:16,463
记住 如果ARKit

454
00:23:16,530 --> 0:23:18,098
它就不会被激活

455
00:23:18,565 --> 0:23:21,401
一旦检测到匹配锚点

456
00:23:21,735 --> 0:23:24,137
AnchorEntity

457
00:23:24,204 --> 0:23:25,606
也会被激活

458
00:23:26,740 --> 0:23:28,242
即使AnchorEntity

459
00:23:28,308 --> 0:23:30,410
经常是你的app的子实体

460
00:23:30,477 --> 0:23:32,479
在某些情况下你也

461
00:23:32,546 --> 0:23:33,981
会想要多种操作

462
00:23:34,982 --> 0:23:36,149
比如这个

463
00:23:36,216 --> 0:23:39,353
我有一个想要锚定到桌子的内容

464
00:23:39,419 --> 0:23:40,687
同时还想将单独的内容

465
00:23:40,754 --> 0:23:42,789
锚定到图片

466
00:23:43,190 --> 0:23:45,492
这样它们就能在同一场景中出现

467
00:23:45,559 --> 0:23:47,828
但你的内容就可以固定在

468
00:23:47,895 --> 0:23:49,963
两个现实世界的对象上

469
00:23:51,265 --> 0:23:52,099
当你确定了你的内容

470
00:23:52,165 --> 0:23:54,168
要附着在什么对象上时

471
00:23:54,234 --> 0:23:56,403
下一步就是将内容附着上去

472
00:23:56,470 --> 0:23:58,672
这时ModelEntity

473
00:23:58,739 --> 0:24:01,074
这是RealityKit的

474
00:23:58,739 --> 0:24:01,074
这是RealityKit的

475
00:24:01,508 --> 0:24:04,178
你也会经常用到这个功能

476
00:24:04,678 --> 0:24:07,214
ModelEntity附带了

477
00:24:07,281 --> 0:24:11,451
物理 动画和渲染所需的所有构建块

478
00:24:11,919 --> 0:24:13,453
在实体组件术语中

479
00:24:13,520 --> 0:24:16,290
是一个有着模型组件的实体

480
00:24:16,356 --> 0:24:19,393
物理组件和碰撞组件

481
00:24:19,459 --> 0:24:21,895
这些实体可以在代码中动态创建

482
00:24:21,962 --> 0:24:25,732
或者直接从USDZ或

483
00:24:27,301 --> 0:24:29,636
这里我们从文件中

484
00:24:30,103 --> 0:24:32,439
你可你看到我们

485
00:24:32,506 --> 0:24:33,941
使负载非常明确

486
00:24:34,541 --> 0:24:36,043
这点你要注意

487
00:24:36,109 --> 0:24:38,278
特别是当你在做一些重要的事情

488
00:24:38,345 --> 0:24:40,314
并且可能阻止渲染线程时

489
00:24:40,380 --> 0:24:43,717
我们为你提供了异步变体来解决

490
00:24:43,784 --> 0:24:44,618
这些问题

491
00:24:44,685 --> 0:24:46,854
这在之后的演讲中会讲到

492
00:24:47,688 --> 0:24:49,423
当你的模型加载完成

493
00:24:49,489 --> 0:24:52,359
你就可以将其附加到锚点上

494
00:24:52,426 --> 0:24:53,827
一旦锚点被检测到

495
00:24:53,894 --> 0:24:56,463
你的模型就会在

496
00:24:58,398 --> 0:25:01,502
现在让我们来看看

497
00:24:58,398 --> 0:25:01,502
现在让我们来看看

498
00:25:02,002 --> 0:25:04,371
ModelEntity包含的

499
00:25:04,438 --> 0:25:05,739
网格资源

500
00:25:06,073 --> 0:25:08,275
它提供了模型的

501
00:25:08,342 --> 0:25:09,510
几何表示

502
00:25:10,511 --> 0:25:12,679
网格资源可以直接作为

503
00:25:12,746 --> 0:25:13,814
基元生成

504
00:25:13,881 --> 0:25:17,217
或是USDZ或

505
00:25:18,285 --> 0:25:20,654
因为网格通常是重量级的

506
00:25:20,721 --> 0:25:22,723
所以它们可以在多个实体之间共享

507
00:25:22,789 --> 0:25:25,225
这也允许我们优化渲染

508
00:25:25,292 --> 0:25:28,562
进一步匹配绘制调用

509
00:25:28,629 --> 0:25:30,731
如果你没有从文件中获取网格

510
00:25:30,797 --> 0:25:34,768
你也可以直接从一组

511
00:25:34,835 --> 0:25:37,304
这包括块状 球状

512
00:25:37,371 --> 0:25:38,672
平面和文字

513
00:25:38,739 --> 0:25:40,841
同时支持平台上的所有字体

514
00:25:42,676 --> 0:25:45,879
现在虽然网格定义了

515
00:25:45,946 --> 0:25:48,715
你还需要一个方法来定义模型的外观

516
00:25:49,016 --> 0:25:50,918
这时材料就发挥作用了

517
00:25:51,552 --> 0:25:54,154
材料提供物体的外观和感觉

518
00:25:54,221 --> 0:25:56,323
以及与周围的光如何交互

519
00:25:59,927 --> 0:26:02,596
现在RealityKit提供

520
00:25:59,927 --> 0:26:02,596
现在RealityKit提供

521
00:26:02,663 --> 0:26:04,965
也就是说我们可以模拟光线

522
00:26:05,032 --> 0:26:06,200
在现实世界是怎样的

523
00:26:06,266 --> 0:26:07,901
确保该物体在现实生活中可以

524
00:26:07,968 --> 0:26:08,836
无缝融合

525
00:26:09,169 --> 0:26:11,839
材料也自定义了对象

526
00:26:11,905 --> 0:26:13,307
参与模拟的方式

527
00:26:14,141 --> 0:26:17,444
材料可以在你加载

528
00:26:17,511 --> 0:26:19,046
你也可以自己创建材料

529
00:26:19,112 --> 0:26:21,381
使用我们在RealityKit中

530
00:26:21,448 --> 0:26:22,816
我们待会儿可以看看

531
00:26:24,318 --> 0:26:26,587
首先是

532
00:26:26,954 --> 0:26:30,757
通常基于物理的材料会包含很多参数

533
00:26:30,824 --> 0:26:32,326
这是因为现实生活中的光线

534
00:26:32,392 --> 0:26:33,727
十分复杂

535
00:26:34,228 --> 0:26:37,865
现在SimpleMaterial

536
00:26:37,931 --> 0:26:39,933
这些参数可以采用标量输入

537
00:26:40,000 --> 0:26:43,470
如果您想要改变

538
00:26:45,172 --> 0:26:48,609
SimpleMaterial

539
00:26:48,675 --> 0:26:51,845
拉丝金属或有色玻璃

540
00:26:52,346 --> 0:26:55,249
你可以通过三个主要属性来做到

541
00:26:55,315 --> 0:26:58,218
基色 粗糙度和金属色

542
00:26:59,119 --> 0:27:00,187
正如名字所说

543
00:26:59,119 --> 0:27:00,187
正如名字所说

544
00:27:00,254 --> 0:27:03,223
基色确定材料的整体颜色

545
00:27:03,290 --> 0:27:06,827
可以把对象从红色变成蓝色

546
00:27:08,028 --> 0:27:09,596
金属参数本身

547
00:27:09,663 --> 0:27:12,533
模拟了材料的导电性

548
00:27:12,599 --> 0:27:15,235
也影响光线和表面的交互

549
00:27:16,103 --> 0:27:20,140
因此 金属值为零表示

550
00:27:20,207 --> 0:27:23,677
也意味着光线会传播到表面

551
00:27:23,744 --> 0:27:26,880
是的表面之下的光线占主导地位

552
00:27:27,848 --> 0:27:30,417
如果我们将参数提升至1.0

553
00:27:30,884 --> 0:27:32,653
就说明是良好导体

554
00:27:32,719 --> 0:27:35,722
就使得表面的光线立即反射

555
00:27:35,789 --> 0:27:37,758
就让物体看起来有金属感

556
00:27:38,659 --> 0:27:39,993
粗糙度参数

557
00:27:40,060 --> 0:27:42,629
影响物体的粗糙度

558
00:27:42,696 --> 0:27:45,199
以及表面的反射程度

559
00:27:48,836 --> 0:27:50,504
我们也提供无光材料

560
00:27:50,571 --> 0:27:53,006
也能让物体着色

561
00:27:53,073 --> 0:27:54,775
但不像

562
00:27:54,842 --> 0:27:57,544
它不参与基于物理的渲染

563
00:27:57,611 --> 0:27:59,813
也不受场景中光线的影响

564
00:28:00,314 --> 0:28:02,749
因此 这使它具有整体平面着色

565
00:28:03,217 --> 0:28:07,187
这对保持问题或者内容的亮度很有用

566
00:28:07,254 --> 0:28:09,323
即使是在黑暗的环境中

567
00:28:09,890 --> 0:28:12,492
现在我们来看使用范例

568
00:28:12,893 --> 0:28:15,929
我在该环境中放置了一台虚拟电视

569
00:28:15,996 --> 0:28:18,799
电视机用的是

570
00:28:18,866 --> 0:28:21,702
屏幕用的是无光材料

571
00:28:22,002 --> 0:28:24,004
如果我把灯光调暗

572
00:28:24,071 --> 0:28:26,874
电视机暗下去了 但是屏幕还亮着

573
00:28:26,940 --> 0:28:29,710
这是因为它不受环境光线影响

574
00:28:31,144 --> 0:28:33,313
SimpleMaterial

575
00:28:33,380 --> 0:28:35,549
都允许各种外观

576
00:28:35,616 --> 0:28:37,885
但RealityKit

577
00:28:37,951 --> 0:28:40,888
它完全不一样 但是也同样的重要

578
00:28:40,954 --> 0:28:42,723
这就是

579
00:28:43,690 --> 0:28:46,059
OcclusionMaterial

580
00:28:46,126 --> 0:28:49,463
是屏蔽其后面的任何对象

581
00:28:49,530 --> 0:28:51,732
再将其传回相机中

582
00:28:52,232 --> 0:28:55,903
这使得物体可以在

583
00:28:57,037 --> 0:28:58,539
我们来看看用法

584
00:28:58,605 --> 0:29:01,742
我在真实世界的桌子上

585
00:28:58,605 --> 0:29:01,742
我在真实世界的桌子上

586
00:29:02,609 --> 0:29:05,045
使用

587
00:29:05,546 --> 0:29:06,747
这看起来

588
00:29:06,813 --> 0:29:09,082
就像该对象是从桌子里面出来的一样

589
00:29:09,149 --> 0:29:12,219
Cody的演示

590
00:29:13,687 --> 0:29:14,955
如果你不加这个效果

591
00:29:15,022 --> 0:29:17,724
就很难评估对象的位置

592
00:29:17,791 --> 0:29:21,328
也破坏了用户的沉浸式体验

593
00:29:23,130 --> 0:29:25,599
这些内容涵盖了ModelEntity

594
00:29:25,666 --> 0:29:26,500
我们来快速看看

595
00:29:26,567 --> 0:29:30,003
你怎么在代码中运用网格资源和材料

596
00:29:31,438 --> 0:29:33,640
我们在这里生成一个盒子网格

597
00:29:33,707 --> 0:29:36,543
以及我们动态生成

598
00:29:36,610 --> 0:29:38,745
使用通用前缀约定

599
00:29:38,812 --> 0:29:41,081
这是为了保证工作能够

600
00:29:41,148 --> 0:29:42,182
正常进行

601
00:29:43,450 --> 0:29:46,286
由于材料重量轻且初始化速度快

602
00:29:46,353 --> 0:29:48,789
它们可以直接从初始化程序创建

603
00:29:49,923 --> 0:29:52,226
当你同时有了网格和材料

604
00:29:52,292 --> 0:29:55,262
你只需创建一个

605
00:29:56,797 --> 0:29:57,931
有了这些

606
00:29:57,998 --> 0:29:59,533
你就可以构建基本块

607
00:29:59,600 --> 0:30:01,468
你就可以开始从中构建

608
00:29:59,600 --> 0:30:01,468
你就可以开始从中构建

609
00:30:01,535 --> 0:30:03,203
AR体验的可视化内容

610
00:30:03,770 --> 0:30:05,539
但是如果你真的想把它变成现实

611
00:30:05,606 --> 0:30:07,808
你还要添加动画

612
00:30:08,542 --> 0:30:09,977
就像Cody刚刚展示的

613
00:30:10,043 --> 0:30:13,247
RealityKit支持

614
00:30:13,313 --> 0:30:15,282
骨架和变换动画

615
00:30:16,350 --> 0:30:18,085
这些可以从文件中加载

616
00:30:18,151 --> 0:30:19,119
但是变换动画

617
00:30:19,186 --> 0:30:21,822
可以直接从

618
00:30:23,957 --> 0:30:27,427
两种类型的动画都可以在所有实体上

619
00:30:27,494 --> 0:30:28,729
从playAnimation

620
00:30:28,795 --> 0:30:30,097
当你播放动画时

621
00:30:30,163 --> 0:30:33,066
动画控制器会给回你一个对象

622
00:30:33,634 --> 0:30:37,171
该控制器允许你回放动画

623
00:30:37,738 --> 0:30:40,407
所以你可以暂停播放动画

624
00:30:40,474 --> 0:30:42,309
在正确的时间点维护你的动画

625
00:30:42,376 --> 0:30:44,211
或者检查动画的当前状态

626
00:30:44,278 --> 0:30:45,312
你可以重置

627
00:30:45,712 --> 0:30:47,848
甚至可以停止动画

628
00:30:49,850 --> 0:30:52,819
如果你没有在你的资产中

629
00:30:52,886 --> 0:30:56,056
你仍然可以通过移动功能

630
00:30:56,823 --> 0:31:00,227
你首先需要提供想让动画做出的变化

631
00:30:56,823 --> 0:31:00,227
你首先需要提供想让动画做出的变化

632
00:31:00,294 --> 0:31:03,063
在这种情况下我们向前移动五米

633
00:31:03,697 --> 0:31:08,302
然后你可以选择定义变换

634
00:31:08,368 --> 0:31:10,871
我们的情况中是现实世界

635
00:31:12,272 --> 0:31:13,340
接下来你要提供

636
00:31:13,407 --> 0:31:15,442
动画持续时间

637
00:31:15,509 --> 0:31:16,643
然后使用缓动函数

638
00:31:16,710 --> 0:31:18,946
来定义动画从开始到结束的

639
00:31:19,012 --> 0:31:20,347
平滑程度

640
00:31:20,414 --> 0:31:23,016
这样你就可以创建简单的变换动画了

641
00:31:26,153 --> 0:31:27,821
结合以上所有

642
00:31:27,888 --> 0:31:32,159
RealityKit专注

643
00:31:32,459 --> 0:31:34,761
今年我们在新框架中

644
00:31:34,828 --> 0:31:36,296
我们也引入了新工具

645
00:31:36,363 --> 0:31:38,799
帮助你的AR开发流程

646
00:31:38,866 --> 0:31:40,434
这就是

647
00:31:42,603 --> 0:31:45,205
我们为在Xcode 11中

648
00:31:45,272 --> 0:31:47,040
引入了

649
00:31:47,307 --> 0:31:50,511
也为App Store中的

650
00:31:51,211 --> 0:31:52,145
有了

651
00:31:52,212 --> 0:31:54,815
我们可以帮助iOS开发者

652
00:31:54,882 --> 0:31:58,585
更加容易创建AR和3D体验

653
00:31:58,952 --> 0:32:01,655
转向3D是一项很艰巨的任务

654
00:31:58,952 --> 0:32:01,655
转向3D是一项很艰巨的任务

655
00:32:01,722 --> 0:32:02,689
有了

656
00:32:02,756 --> 0:32:05,926
我们希望让你在构建

657
00:32:06,527 --> 0:32:08,729
我们已经将许多功能集成到该工具中

658
00:32:08,795 --> 0:32:10,998
现在我们来具体看看

659
00:32:12,566 --> 0:32:13,800
当你在开始新项目时

660
00:32:13,867 --> 0:32:15,002
你要解决的第一件事

661
00:32:15,068 --> 0:32:17,437
只是把你的内容带到世界中

662
00:32:17,871 --> 0:32:19,473
我们希望这个过程是简单的

663
00:32:19,540 --> 0:32:21,642
我们已经为你提供了一组内容

664
00:32:21,708 --> 0:32:24,912
你可以直接将其集成到场景中

665
00:32:24,978 --> 0:32:28,448
或者你可以直接使用占位符

666
00:32:28,916 --> 0:32:31,885
该库的范围从简单形状到普通对象

667
00:32:31,952 --> 0:32:33,620
甚至是大型建筑

668
00:32:35,189 --> 0:32:37,257
而且它们不是静态资产

669
00:32:37,324 --> 0:32:38,959
这里有一个螺旋形状

670
00:32:39,426 --> 0:32:41,128
它提供许多参数

671
00:32:41,195 --> 0:32:43,297
让你能够更加灵活创造

672
00:32:43,363 --> 0:32:46,633
我们可以拉伸和挤压

673
00:32:46,700 --> 0:32:48,902
我们也可加上铝材质

674
00:32:48,969 --> 0:32:51,538
让它看起来像是金属质感

675
00:32:53,607 --> 0:32:55,142
我们也提供丰富的模型

676
00:32:55,209 --> 0:32:57,711
你也可以直接集成你的内容

677
00:32:57,778 --> 0:32:59,179
比如图片帧

678
00:32:59,613 --> 0:33:02,783
我选择了一张图片并将它放进去

679
00:32:59,613 --> 0:33:02,783
我选择了一张图片并将它放进去

680
00:33:02,850 --> 0:33:06,186
然后挑选一个与我创建的体验风格

681
00:33:06,253 --> 0:33:07,187
相匹配的框架

682
00:33:09,056 --> 0:33:10,424
Reality Composer

683
00:33:10,490 --> 0:33:13,293
所见即所得环境

684
00:33:13,360 --> 0:33:16,530
可以让你轻松在创建时

685
00:33:16,597 --> 0:33:17,731
预设和预显你的场景

686
00:33:18,232 --> 0:33:20,334
在这里我可以复制一排棋子

687
00:33:20,400 --> 0:33:21,935
换掉外表

688
00:33:22,002 --> 0:33:24,471
来创建棋盘的另一面

689
00:33:27,841 --> 0:33:31,812
预可视化的很大一部分

690
00:33:31,879 --> 0:33:34,047
所以你就可以确保

691
00:33:34,114 --> 0:33:37,451
并且与真实环境吻合

692
00:33:39,753 --> 0:33:42,823
Reality Composer

693
00:33:42,890 --> 0:33:44,324
还能够支持简单交互

694
00:33:44,391 --> 0:33:46,793
这样就就能使AR体验栩栩如生

695
00:33:46,860 --> 0:33:48,729
让我们来看看这个例子

696
00:33:49,296 --> 0:33:53,033
这里是我想要进行交互的棋盘

697
00:33:53,100 --> 0:33:54,168
我想做的事情

698
00:33:54,234 --> 0:33:56,637
我在点击黑子时

699
00:33:56,703 --> 0:33:59,373
让它过去将军

700
00:33:59,940 --> 0:34:02,910
所以第一步是打开行为面板

701
00:33:59,940 --> 0:34:02,910
所以第一步是打开行为面板

702
00:34:03,443 --> 0:34:05,112
添加新行为

703
00:34:06,280 --> 0:34:08,916
这里有很多预定行为

704
00:34:08,982 --> 0:34:11,083
我选择轻拍翻转

705
00:34:12,018 --> 0:34:13,654
现在该行为给了我敲击触发器

706
00:34:13,719 --> 0:34:16,056
这可以出发一系列动作

707
00:34:16,356 --> 0:34:19,525
可以在黑子播放动画

708
00:34:20,027 --> 0:34:20,893
在我的交互中

709
00:34:20,960 --> 0:34:23,931
我要修改运动类型为摇晃

710
00:34:23,996 --> 0:34:25,065
而不是翻转

711
00:34:26,233 --> 0:34:30,637
然后我要添加一个行动来实现移动

712
00:34:30,838 --> 0:34:33,072
我就微调一下我们动作

713
00:34:33,940 --> 0:34:36,909
现在我可以预览我的交互

714
00:34:37,344 --> 0:34:40,581
现在我点击黑子 它就会摇晃

715
00:34:40,647 --> 0:34:43,083
并且会移动到国王面前将军

716
00:34:49,022 --> 0:34:50,123
所以 有了这些功能

717
00:34:50,190 --> 0:34:53,427
创建看起来很棒的

718
00:34:53,493 --> 0:34:55,896
就十分容易了

719
00:34:56,295 --> 0:34:58,966
我在iPad上展示的这些功能

720
00:34:59,032 --> 0:35:02,102
在macOS和

721
00:34:59,032 --> 0:35:02,102
在macOS和

722
00:35:03,704 --> 0:35:06,673
现在 虽然Reality Composer

723
00:35:06,740 --> 0:35:07,708
它与Xcode的

724
00:35:07,774 --> 0:35:10,110
开发和生态系统紧密集成

725
00:35:10,744 --> 0:35:12,379
当你要构建Xcode项目

726
00:35:12,946 --> 0:35:14,715
你项目中的内容

727
00:35:15,115 --> 0:35:18,118
会集成并优化到你的app中

728
00:35:18,619 --> 0:35:22,189
但是创建Xcode项目

729
00:35:22,256 --> 0:35:24,091
也能发生一些小奇迹

730
00:35:24,157 --> 0:35:25,726
这就是代码生成

731
00:35:26,560 --> 0:35:29,029
作为该步骤的一部分

732
00:35:29,096 --> 0:35:32,299
能够被编译

733
00:35:32,566 --> 0:35:34,902
接下来 我们会内省该文件

734
00:35:34,968 --> 0:35:37,604
并生成用于访问你

735
00:35:37,671 --> 0:35:39,640
自定义代码

736
00:35:40,974 --> 0:35:42,042
现在该代码生成步骤

737
00:35:42,109 --> 0:35:44,978
由Xcode在幕后自动执行

738
00:35:45,045 --> 0:35:49,416
并建立对场景中内容的强类型访问

739
00:35:49,783 --> 0:35:52,553
这有一个很好的优势

740
00:35:52,619 --> 0:35:55,155
对象的命名有任何的不匹配

741
00:35:55,222 --> 0:35:58,759
你就会收到编译报错而不是运行崩溃

742
00:35:59,960 --> 0:36:02,129
代码生成可以让你直接访问

743
00:35:59,960 --> 0:36:02,129
代码生成可以让你直接访问

744
00:36:02,196 --> 0:36:05,532
场景行为中的调用触发器

745
00:36:05,599 --> 0:36:08,168
还可以在代码中自定义行为

746
00:36:09,303 --> 0:36:12,773
我们觉得凭借Reality Composer

747
00:36:12,840 --> 0:36:15,175
Xcode中的编码是无缝的

748
00:36:16,910 --> 0:36:19,346
我们来快速预览

749
00:36:19,413 --> 0:36:21,682
我还想向你们展示更多

750
00:36:22,015 --> 0:36:25,018
因为我们今天说的只是冰山一角

751
00:36:25,085 --> 0:36:27,588
还有很多东西我没有讲到 比如网络

752
00:36:27,654 --> 0:36:31,325
物理团体 光线投射 手势等等

753
00:36:31,391 --> 0:36:33,961
所以我建议你听听我们其他的演技

754
00:36:34,595 --> 0:36:35,762
明天早上10:00

755
00:36:35,829 --> 0:36:38,465
我们有用Reality Composer

756
00:36:38,532 --> 0:36:41,401
会告诉你如何创建AR app

757
00:36:41,468 --> 0:36:43,971
而这是RealityKit

758
00:36:44,838 --> 0:36:46,440
周四早上11:00

759
00:36:46,507 --> 0:36:49,643
我们有用Reality Composer

760
00:36:49,710 --> 0:36:52,579
该演讲将会探讨如何将

761
00:36:52,646 --> 0:36:54,915
集成到您的AR app工作流程中

762
00:36:55,282 --> 0:36:57,784
明天中午请加入我们的实验室

763
00:36:57,851 --> 0:37:01,288
我们会进行答疑 可能会对你有帮助

764
00:36:57,851 --> 0:37:01,288
我们会进行答疑 可能会对你有帮助

765
00:37:01,355 --> 0:37:04,758
谢谢大家光临 希望大家在
