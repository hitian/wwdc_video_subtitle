1
00:00:00,506 --> 0:00:04,500
[ Music ]

2
00:00:08,016 --> 0:00:09,156
[ Applause ]

3
00:00:09,156 --> 0:00:12,186
&gt;&gt; Good morning and welcome to

4
00:00:12,186 --> 0:00:13,526
Data Flow Through SwiftUI.

5
00:00:13,526 --> 0:00:15,986
My name is Luca Bernardi and I

6
00:00:15,986 --> 0:00:17,096
will later be joined by my

7
00:00:17,096 --> 0:00:18,096
friend and colleague, Raj

8
00:00:18,096 --> 0:00:18,686
Ramamaurthy.

9
00:00:18,906 --> 0:00:19,896
Are you guys excited about

10
00:00:19,896 --> 0:00:20,486
SwiftUI?

11
00:00:20,486 --> 0:00:21,836
&gt;&gt; [Simultaneously] Yeah.

12
00:00:21,836 --> 0:00:25,276
&gt;&gt; Sweet. I'm super excited to

13
00:00:25,276 --> 0:00:25,996
be here today.

14
00:00:25,996 --> 0:00:28,476
SwiftUI is the shortest path to

15
00:00:28,476 --> 0:00:30,226
a great app, but we also

16
00:00:30,226 --> 0:00:31,896
designed it from the ground up

17
00:00:32,006 --> 0:00:33,526
with the goal of solving the

18
00:00:33,526 --> 0:00:35,096
complexity of UI development.

19
00:00:35,096 --> 0:00:37,876
That means that data is a first

20
00:00:37,876 --> 0:00:39,376
class citizen in SwiftUI.

21
00:00:40,056 --> 0:00:42,856
In this talk, we are going to

22
00:00:42,856 --> 0:00:44,646
show you the simple but powerful

23
00:00:44,646 --> 0:00:45,776
tool that you have at your

24
00:00:45,776 --> 0:00:47,706
disposal to flow data through

25
00:00:47,706 --> 0:00:48,506
your view hierarchy.

26
00:00:49,306 --> 0:00:50,706
This tool can help you achieve app that

27
00:00:50,706 --> 0:00:52,906
are not only beautiful but also

28
00:00:52,906 --> 0:00:53,506
well behaved.

29
00:00:56,046 --> 0:00:57,386
We will also look under the hood

30
00:00:57,386 --> 0:00:59,526
of how SwiftUI updates your view

31
00:00:59,526 --> 0:01:01,166
hierarchy to guarantee that you

32
00:00:59,526 --> 0:01:01,166
hierarchy to guarantee that you

33
00:01:01,166 --> 0:01:02,956
always have a correct and

34
00:01:02,956 --> 0:01:04,105
consistent representation of

35
00:01:04,105 --> 0:01:04,575
your data.

36
00:01:05,916 --> 0:01:07,856
And finally, we will empower you

37
00:01:07,986 --> 0:01:09,376
with a mental framework for

38
00:01:09,376 --> 0:01:10,996
understanding your data and the

39
00:01:10,996 --> 0:01:12,256
tool available to you.

40
00:01:13,836 --> 0:01:16,176
But before moving on, what do we

41
00:01:16,176 --> 0:01:16,906
mean by data?

42
00:01:18,196 --> 0:01:19,746
Data is all the information that

43
00:01:19,746 --> 0:01:20,666
drives your UI.

44
00:01:21,296 --> 0:01:23,146
Data comes in all sort of shapes

45
00:01:23,226 --> 0:01:23,746
and form.

46
00:01:24,356 --> 0:01:25,806
One example is stating your UI

47
00:01:25,806 --> 0:01:27,886
like the state of a toggle.

48
00:01:29,036 --> 0:01:30,766
Data also represent model data,

49
00:01:31,306 --> 0:01:32,406
such as the object that drives a

50
00:01:32,406 --> 0:01:32,976
list of messages.

51
00:01:36,096 --> 0:01:37,716
We have a number of tool at your

52
00:01:37,716 --> 0:01:39,166
disposal depending on what you

53
00:01:39,166 --> 0:01:39,746
want to achieve.

54
00:01:40,656 --> 0:01:41,586
You've probably seen some of

55
00:01:41,586 --> 0:01:42,926
this tool in previous talk.

56
00:01:42,926 --> 0:01:44,756
But if you are not familiar with

57
00:01:44,756 --> 0:01:47,206
them, don't worry we're going to

58
00:01:47,206 --> 0:01:48,786
explain what they are and when

59
00:01:48,786 --> 0:01:49,256
to use them.

60
00:01:50,236 --> 0:01:51,836
At the end of this talk, you'll

61
00:01:51,836 --> 0:01:54,186
know exactly what tool to use

62
00:01:54,306 --> 0:01:54,826
and when.

63
00:01:55,486 --> 0:01:57,736
But before showing you this

64
00:01:57,736 --> 0:01:59,316
tool, I would like to illustrate

65
00:01:59,316 --> 0:02:00,866
the two guiding principle that

66
00:01:59,316 --> 0:02:00,866
the two guiding principle that

67
00:02:00,866 --> 0:02:03,136
inspired us in designing them.

68
00:02:03,936 --> 0:02:05,266
The first principle is that

69
00:02:05,266 --> 0:02:06,996
every time you read a piece of

70
00:02:06,996 --> 0:02:08,166
data in your view, you're

71
00:02:08,166 --> 0:02:09,536
creating a dependency for that

72
00:02:09,536 --> 0:02:09,776
view.

73
00:02:10,616 --> 0:02:11,806
This is a dependency because

74
00:02:11,806 --> 0:02:13,116
every time the data changes,

75
00:02:13,466 --> 0:02:14,736
your view has to change to

76
00:02:14,736 --> 0:02:15,576
reflect the new value.

77
00:02:17,156 --> 0:02:18,776
For example, here in blue I have

78
00:02:18,776 --> 0:02:19,876
a view showing some playback

79
00:02:19,876 --> 0:02:21,856
control and the view needs to

80
00:02:21,856 --> 0:02:23,006
read some data in purple.

81
00:02:23,806 --> 0:02:25,116
Every time this value changes,

82
00:02:25,116 --> 0:02:25,976
we need to update the view.

83
00:02:28,666 --> 0:02:30,436
And so additionally, defining

84
00:02:30,436 --> 0:02:31,686
this dependency is a manual

85
00:02:31,686 --> 0:02:33,126
process and it can quickly

86
00:02:33,126 --> 0:02:34,696
become a complex endeavor.

87
00:02:35,266 --> 0:02:38,206
But just like viewing SwiftUI

88
00:02:38,206 --> 0:02:40,096
are declarative, data dependency

89
00:02:40,096 --> 0:02:40,596
are as well.

90
00:02:40,596 --> 0:02:41,956
There is no manual

91
00:02:41,956 --> 0:02:43,696
synchronization or invalidation.

92
00:02:43,696 --> 0:02:46,756
With SwiftUI, you simply

93
00:02:46,756 --> 0:02:48,056
describe the dependency to the

94
00:02:48,056 --> 0:02:50,056
framework using few tools and

95
00:02:50,056 --> 0:02:51,276
the frameworks handles all the

96
00:02:51,276 --> 0:02:51,566
rest.

97
00:02:51,596 --> 0:02:54,006
And that means that you can

98
00:02:54,056 --> 0:02:55,456
focus on building the best

99
00:02:55,456 --> 0:02:57,316
experience for your user.

100
00:03:00,096 --> 0:03:01,516
The second principle is that

101
00:03:01,516 --> 0:03:03,446
every piece of data that you're

102
00:03:03,446 --> 0:03:04,696
reading in your view hierarchy

103
00:03:04,846 --> 0:03:05,806
has a source of truth.

104
00:03:07,016 --> 0:03:08,166
The source of truth can live in

105
00:03:08,166 --> 0:03:08,816
your view hierarchy.

106
00:03:09,216 --> 0:03:10,576
For example when you have some

107
00:03:10,576 --> 0:03:13,366
state about something should be

108
00:03:13,426 --> 0:03:14,986
collapsed or not, or it can be

109
00:03:14,986 --> 0:03:16,866
external such as when you're

110
00:03:16,916 --> 0:03:18,396
displaying a message coming from

111
00:03:18,396 --> 0:03:18,976
a persistent model.

112
00:03:21,696 --> 0:03:22,836
Regardless of where the source

113
00:03:22,836 --> 0:03:24,876
of truth live, you should always

114
00:03:24,876 --> 0:03:27,266
have a single source of truth.

115
00:03:29,096 --> 0:03:31,196
Duplicated source of truth can

116
00:03:31,196 --> 0:03:32,766
lead to bug and inconsistency

117
00:03:32,986 --> 0:03:34,256
because you always have to be

118
00:03:34,256 --> 0:03:35,766
careful in keeping them in sync.

119
00:03:36,776 --> 0:03:38,286
Think about all the time you've

120
00:03:38,286 --> 0:03:39,786
duplicated the same piece of

121
00:03:39,866 --> 0:03:42,626
data, for example, into sibling

122
00:03:42,626 --> 0:03:44,876
view and how all the complexity

123
00:03:44,876 --> 0:03:46,186
of posting notification,

124
00:03:46,276 --> 0:03:47,626
KV observing or

125
00:03:47,626 --> 0:03:48,796
responding to a different

126
00:03:48,796 --> 0:03:50,326
sequence of event has caused

127
00:03:50,326 --> 0:03:50,876
your bug.

128
00:03:52,086 --> 0:03:53,006
And it's pretty easy to get

129
00:03:53,096 --> 0:03:53,386
wrong.

130
00:03:54,046 --> 0:03:55,036
And they've made the same

131
00:03:55,036 --> 0:03:56,286
mistake many time.

132
00:03:56,866 --> 0:03:59,936
What you shall do instead is

133
00:03:59,936 --> 0:04:01,456
lift up the data into a common

134
00:03:59,936 --> 0:04:01,456
lift up the data into a common

135
00:04:01,456 --> 0:04:03,386
ancestor and let the two

136
00:04:03,386 --> 0:04:05,546
children have a reference to it.

137
00:04:06,836 --> 0:04:08,426
When you have a single source of

138
00:04:08,426 --> 0:04:10,066
truth, you're eliminating

139
00:04:10,276 --> 0:04:11,946
inconsistency bug between view

140
00:04:11,946 --> 0:04:12,596
and your data.

141
00:04:13,206 --> 0:04:14,176
And you can use the tool

142
00:04:14,426 --> 0:04:15,786
available in the language to

143
00:04:15,786 --> 0:04:17,255
enforcing variant in your data.

144
00:04:17,866 --> 0:04:20,586
With this principle in mind,

145
00:04:20,966 --> 0:04:22,846
take a step back, look at all

146
00:04:22,846 --> 0:04:23,856
the source of truth in your

147
00:04:23,856 --> 0:04:25,466
code, and then use this

148
00:04:25,466 --> 0:04:27,376
information to make decision

149
00:04:27,376 --> 0:04:29,446
about the structure of your

150
00:04:32,956 --> 0:04:33,126
data.

151
00:04:33,276 --> 0:04:35,696
So I really like listening to a

152
00:04:35,696 --> 0:04:37,016
good podcast during my commute

153
00:04:37,016 --> 0:04:37,746
to Apple Park.

154
00:04:37,746 --> 0:04:39,386
And I thought it will be great

155
00:04:39,386 --> 0:04:41,216
to build a podcast player with

156
00:04:41,216 --> 0:04:41,646
SwiftUI.

157
00:04:41,646 --> 0:04:44,616
We are going to use this example

158
00:04:44,616 --> 0:04:45,596
throughout the talk to

159
00:04:45,736 --> 0:04:46,926
demonstrate all the tool

160
00:04:46,926 --> 0:04:47,676
available to you.

161
00:04:48,676 --> 0:04:49,826
Here is the UI that we are going

162
00:04:49,826 --> 0:04:50,256
to build.

163
00:04:51,506 --> 0:04:52,556
It's the interface for the

164
00:04:52,556 --> 0:04:53,826
player when we're going to

165
00:04:53,826 --> 0:04:55,236
display the show and episode

166
00:04:55,276 --> 0:04:57,836
title, the playback button, and

167
00:04:57,836 --> 0:04:58,496
the current time.

168
00:04:59,096 --> 0:05:01,916
We are going to build this UI

169
00:04:59,096 --> 0:05:01,916
We are going to build this UI

170
00:05:01,916 --> 0:05:02,796
step by step.

171
00:05:03,686 --> 0:05:04,846
But let's start by creating a

172
00:05:04,846 --> 0:05:05,786
view that show the current

173
00:05:05,786 --> 0:05:05,976
episode.

174
00:05:09,386 --> 0:05:10,506
We can start by creating a new

175
00:05:10,506 --> 0:05:12,536
view, Playerview, and this view

176
00:05:12,536 --> 0:05:13,636
has one property.

177
00:05:13,636 --> 0:05:14,846
That stored the current playing

178
00:05:14,846 --> 0:05:15,296
episode.

179
00:05:15,936 --> 0:05:17,836
And we want to display the

180
00:05:17,836 --> 0:05:19,466
episode show and title.

181
00:05:19,926 --> 0:05:20,986
So in the body, we'll make a

182
00:05:20,986 --> 0:05:22,956
VStack containing two texts so

183
00:05:22,956 --> 0:05:23,966
that they're stacked vertically.

184
00:05:24,536 --> 0:05:27,946
And regular Swift property are

185
00:05:27,946 --> 0:05:28,846
your first tool.

186
00:05:29,276 --> 0:05:30,206
They're great when you have a

187
00:05:30,206 --> 0:05:31,506
view that needs to read all the

188
00:05:31,506 --> 0:05:33,056
access to a derived piece of

189
00:05:33,056 --> 0:05:33,446
data.

190
00:05:34,406 --> 0:05:35,346
This is data that will be

191
00:05:35,346 --> 0:05:36,746
provided to the view by its

192
00:05:36,746 --> 0:05:37,206
parent.

193
00:05:38,556 --> 0:05:40,386
But now, I want to be able to

194
00:05:40,386 --> 0:05:42,046
play and pause, so let's have

195
00:05:42,046 --> 0:05:42,246
that.

196
00:05:42,936 --> 0:05:46,676
We had a new property indicating

197
00:05:46,676 --> 0:05:48,186
whether the episode is playing

198
00:05:48,186 --> 0:05:48,546
or not.

199
00:05:48,546 --> 0:05:50,896
And now the image that show a

200
00:05:50,896 --> 0:05:52,266
different clip depending on the

201
00:05:52,266 --> 0:05:53,236
value of isPlaying.

202
00:05:53,856 --> 0:05:56,176
But now I want to make the Play

203
00:05:56,176 --> 0:05:58,196
button interactive so that when

204
00:05:58,196 --> 0:05:59,556
the user taps on it, would

205
00:05:59,586 --> 0:06:01,146
toggle the Playback state and

206
00:05:59,586 --> 0:06:01,146
toggle the Playback state and

207
00:06:01,146 --> 0:06:02,226
change the image as well.

208
00:06:02,816 --> 0:06:06,176
And we can do that by using a

209
00:06:07,476 --> 0:06:07,636
button.

210
00:06:07,786 --> 0:06:09,636
A button takes some content and

211
00:06:09,636 --> 0:06:10,756
an action to execute when the

212
00:06:10,756 --> 0:06:11,646
user taps on it.

213
00:06:12,726 --> 0:06:13,906
In the action, we just toggle

214
00:06:13,906 --> 0:06:14,446
isPlaying.

215
00:06:15,086 --> 0:06:18,726
But if we go to build a run, we

216
00:06:18,726 --> 0:06:19,676
get a compiler error.

217
00:06:20,686 --> 0:06:21,876
But this is good because it's

218
00:06:21,876 --> 0:06:23,736
keeping us on the right path and

219
00:06:23,736 --> 0:06:24,766
through to one of the general

220
00:06:24,766 --> 0:06:25,726
principles of UI.

221
00:06:25,726 --> 0:06:27,906
We don't mutate the view

222
00:06:27,906 --> 0:06:28,366
hierarchy.

223
00:06:28,916 --> 0:06:31,606
Every time your UI is updated,

224
00:06:31,606 --> 0:06:33,536
it's because some view body is

225
00:06:33,536 --> 0:06:34,726
generating a different value.

226
00:06:34,726 --> 0:06:37,266
And in order to handle case like

227
00:06:37,306 --> 0:06:38,616
this, we have a tool that's

228
00:06:38,616 --> 0:06:38,976
called State.

229
00:06:42,146 --> 0:06:43,216
So let's have home state through

230
00:06:43,216 --> 0:06:43,676
this view.

231
00:06:44,256 --> 0:06:46,726
We can do that by using the

232
00:06:46,726 --> 0:06:48,226
state property wrapper on the

233
00:06:48,226 --> 0:06:49,106
isPlaying property.

234
00:06:49,716 --> 0:06:51,006
And by doing this, we are

235
00:06:51,006 --> 0:06:52,106
telling the system that

236
00:06:52,186 --> 0:06:53,566
isPlaying is a value that can

237
00:06:53,566 --> 0:06:55,286
change over time and that the

238
00:06:55,286 --> 0:06:56,656
PlayerView depends on it.

239
00:06:58,086 --> 0:06:59,716
Now if we build a run, we won't

240
00:06:59,716 --> 0:07:00,666
get a compiler error.

241
00:06:59,716 --> 0:07:00,666
get a compiler error.

242
00:07:01,106 --> 0:07:02,146
And when the user taps on the

243
00:07:02,146 --> 0:07:05,196
button, the state value changes

244
00:07:05,786 --> 0:07:06,756
and the framework will generate

245
00:07:06,756 --> 0:07:07,846
a new body for this view.

246
00:07:08,776 --> 0:07:09,726
If you're not familiar with

247
00:07:09,966 --> 0:07:11,716
Property Wrapper, it's a

248
00:07:11,716 --> 0:07:13,196
powerful new feature in Swift

249
00:07:13,286 --> 0:07:14,026
5.1.

250
00:07:14,606 --> 0:07:17,136
But we're not going into much

251
00:07:17,136 --> 0:07:18,296
detail about how they work.

252
00:07:18,776 --> 0:07:19,826
And if you want to learn more,

253
00:07:20,026 --> 0:07:20,846
check out these two great

254
00:07:20,846 --> 0:07:21,366
session.

255
00:07:21,966 --> 0:07:24,796
For this talk, all you need to

256
00:07:24,796 --> 0:07:25,836
know is that when you add the

257
00:07:25,836 --> 0:07:27,196
Property Wrapper, you're

258
00:07:27,196 --> 0:07:28,596
wrapping this property and

259
00:07:28,596 --> 0:07:29,916
augment it with some additional

260
00:07:29,916 --> 0:07:31,716
behavior when it's read or

261
00:07:31,716 --> 0:07:32,146
written.

262
00:07:32,666 --> 0:07:35,036
And you might wonder, how does

263
00:07:35,036 --> 0:07:35,596
this work?

264
00:07:36,216 --> 0:07:38,076
What is this additional behavior

265
00:07:38,646 --> 0:07:40,626
with state?

266
00:07:40,836 --> 0:07:42,836
When you state the framework,

267
00:07:42,836 --> 0:07:44,206
allocate the persistent storage

268
00:07:44,206 --> 0:07:45,596
for the variable on the view we

269
00:07:45,596 --> 0:07:46,936
have and track it as a

270
00:07:46,936 --> 0:07:49,526
dependency because if the system

271
00:07:49,526 --> 0:07:51,936
is creating storage for you, you

272
00:07:51,936 --> 0:07:53,316
always have to specify an

273
00:07:53,316 --> 0:07:54,376
initial constant value.

274
00:07:54,926 --> 0:07:57,466
View can be recreated often by

275
00:07:57,466 --> 0:07:59,636
the system, but with state, the

276
00:07:59,636 --> 0:08:01,436
framework knows that it needs to

277
00:07:59,636 --> 0:08:01,436
framework knows that it needs to

278
00:08:01,436 --> 0:08:03,016
persist the storage across

279
00:08:03,016 --> 0:08:04,436
multiple update of the same

280
00:08:04,436 --> 0:08:04,686
view.

281
00:08:05,166 --> 0:08:08,256
And it's a good practice to

282
00:08:08,256 --> 0:08:10,006
explicitly mark state property

283
00:08:10,006 --> 0:08:12,296
as private to really enforce the

284
00:08:12,296 --> 0:08:14,366
idea that state is owned and

285
00:08:14,366 --> 0:08:15,386
managed by that view

286
00:08:15,386 --> 0:08:16,076
specifically.

287
00:08:16,646 --> 0:08:19,106
But I want to take you behind

288
00:08:19,106 --> 0:08:20,766
the scene and show you what's

289
00:08:20,766 --> 0:08:21,556
happening when the user is

290
00:08:21,556 --> 0:08:21,976
tapping on the button.

291
00:08:25,346 --> 0:08:26,636
Let's start with view hierarchy

292
00:08:26,636 --> 0:08:27,276
we just showed.

293
00:08:28,466 --> 0:08:30,346
We just say that when-- that

294
00:08:30,346 --> 0:08:31,976
when we define some state, the

295
00:08:31,976 --> 0:08:33,086
framework is allocating

296
00:08:33,086 --> 0:08:34,256
persistent storage for you.

297
00:08:35,535 --> 0:08:36,736
One was the special property of

298
00:08:36,736 --> 0:08:38,376
state variable is that SwiftUI

299
00:08:38,376 --> 0:08:40,176
kind of start when they change.

300
00:08:40,176 --> 0:08:43,226
And because SwiftUI knows that

301
00:08:43,226 --> 0:08:44,466
the state variable was writing

302
00:08:44,466 --> 0:08:46,506
the body, it knows that the view

303
00:08:46,506 --> 0:08:47,646
rendering depend on that state

304
00:08:47,646 --> 0:08:47,976
variable.

305
00:08:50,586 --> 0:08:51,666
When the user interact with the

306
00:08:51,666 --> 0:08:53,786
button, the framework execute

307
00:08:53,786 --> 0:08:55,346
its action which in turn will

308
00:08:55,346 --> 0:08:56,236
meet at some state.

309
00:08:58,476 --> 0:09:00,196
The runtime the data-- the state

310
00:08:58,476 --> 0:09:00,196
The runtime the data-- the state

311
00:09:00,196 --> 0:09:01,386
does change and starting

312
00:09:01,386 --> 0:09:02,736
validating their view that owns

313
00:09:02,736 --> 0:09:05,636
the state, which mean it will

314
00:09:05,636 --> 0:09:07,166
recompute the body of that view

315
00:09:07,306 --> 0:09:08,396
and all of its children.

316
00:09:09,006 --> 0:09:12,056
In this sense, all the changes

317
00:09:12,056 --> 0:09:13,356
always flow down through your

318
00:09:13,356 --> 0:09:14,046
view hierarchy.

319
00:09:14,836 --> 0:09:16,486
And we're able to do these very

320
00:09:16,486 --> 0:09:17,716
efficiently because the

321
00:09:17,716 --> 0:09:19,366
framework is comparing the view

322
00:09:19,736 --> 0:09:21,316
and rendering again only what is

323
00:09:21,316 --> 0:09:21,766
changed.

324
00:09:22,346 --> 0:09:25,016
This is exactly what we

325
00:09:25,016 --> 0:09:26,306
mentioned earlier when we say

326
00:09:26,306 --> 0:09:27,596
that the framework manages the

327
00:09:27,596 --> 0:09:28,396
dependency for you.

328
00:09:30,116 --> 0:09:32,266
But we also talk about source of

329
00:09:32,266 --> 0:09:34,276
truth before and you should

330
00:09:34,276 --> 0:09:35,856
remember that every time you

331
00:09:35,856 --> 0:09:38,146
declare a state, you define a

332
00:09:38,146 --> 0:09:39,886
new source of truth that is

333
00:09:39,886 --> 0:09:40,746
owned by your view.

334
00:09:40,746 --> 0:09:43,406
And while this is so important

335
00:09:43,786 --> 0:09:45,106
that I'm showing to you in big

336
00:09:45,106 --> 0:09:47,576
letter, another important

337
00:09:47,576 --> 0:09:49,426
takeaway is that view are a

338
00:09:49,426 --> 0:09:50,896
function of state, not a

339
00:09:50,896 --> 0:09:53,446
sequence of event.

340
00:09:53,576 --> 0:09:55,496
Traditionally, you respond to

341
00:09:55,496 --> 0:09:57,296
some event by directly mutating

342
00:09:57,296 --> 0:09:58,016
your view hierarchy.

343
00:09:58,836 --> 0:09:59,966
For example, by adding or

344
00:09:59,966 --> 0:10:01,756
removing a subview or changing

345
00:09:59,966 --> 0:10:01,756
removing a subview or changing

346
00:10:01,756 --> 0:10:02,296
the alpha.

347
00:10:03,356 --> 0:10:05,806
Instead, in SwiftUI, you mutate

348
00:10:05,806 --> 0:10:08,056
some state and the state work as

349
00:10:08,056 --> 0:10:09,366
a source of truth from which you

350
00:10:09,366 --> 0:10:10,056
derive your view.

351
00:10:10,056 --> 0:10:12,536
This is where SwiftUI,

352
00:10:12,666 --> 0:10:15,096
declarative syntax shine.

353
00:10:15,566 --> 0:10:17,336
You describe your view given the

354
00:10:17,336 --> 0:10:18,076
current state.

355
00:10:18,076 --> 0:10:21,196
And this is also how SwiftUI

356
00:10:21,196 --> 0:10:22,786
helps you manage the complexity

357
00:10:22,786 --> 0:10:24,866
of UI development allowing you

358
00:10:24,866 --> 0:10:26,556
to write beautiful and correct

359
00:10:26,556 --> 0:10:26,966
interfaces.

360
00:10:30,656 --> 0:10:31,886
You can think of your app as a

361
00:10:31,886 --> 0:10:33,706
constant feedback loop between

362
00:10:33,706 --> 0:10:34,976
your user and the device.

363
00:10:37,666 --> 0:10:38,896
It all start with your user.

364
00:10:40,396 --> 0:10:42,246
The user interact with your app

365
00:10:42,246 --> 0:10:46,716
generating an action.

366
00:10:46,896 --> 0:10:48,056
The action is executed by the

367
00:10:48,056 --> 0:10:49,716
framework and mutate some state.

368
00:10:51,126 --> 0:10:52,346
The system detect that the state

369
00:10:52,346 --> 0:10:54,146
has changed and so it knows that

370
00:10:54,146 --> 0:10:55,676
it needs to update the view that

371
00:10:55,676 --> 0:10:57,426
depends on the state.

372
00:10:59,496 --> 0:11:01,436
This update will produce a new

373
00:10:59,496 --> 0:11:01,436
This update will produce a new

374
00:11:01,436 --> 0:11:03,166
version of your UI that your

375
00:11:03,166 --> 0:11:05,216
user can interact with.

376
00:11:06,436 --> 0:11:09,016
This model where data always

377
00:11:09,016 --> 0:11:10,726
flow in a single direction,

378
00:11:11,116 --> 0:11:13,276
instead is your single final

379
00:11:13,276 --> 0:11:15,796
point for all the changes, make

380
00:11:15,796 --> 0:11:18,296
the view update predictable and

381
00:11:18,296 --> 0:11:19,356
simple to understand.

382
00:11:19,956 --> 0:11:22,026
And now that we understand

383
00:11:22,116 --> 0:11:23,826
state, I want to go back to the

384
00:11:23,826 --> 0:11:25,076
AppWare building and make some

385
00:11:25,076 --> 0:11:25,586
improvement.

386
00:11:26,126 --> 0:11:30,186
So the first thing I want to

387
00:11:30,186 --> 0:11:31,916
change is that whenever the user

388
00:11:31,986 --> 0:11:33,996
taps on Pause, the episode title

389
00:11:33,996 --> 0:11:34,946
should change to gray.

390
00:11:34,946 --> 0:11:37,326
And we already know how to do

391
00:11:37,326 --> 0:11:37,516
that.

392
00:11:38,236 --> 0:11:39,526
We can just use our isPlaying

393
00:11:39,526 --> 0:11:41,256
state and choose the right text

394
00:11:41,256 --> 0:11:41,586
color.

395
00:11:42,106 --> 0:11:45,086
Next, I love some good

396
00:11:45,086 --> 0:11:45,816
refactoring.

397
00:11:46,316 --> 0:11:47,866
And if you have seen the SwiftUI

398
00:11:47,866 --> 0:11:49,646
essential tool, you already know

399
00:11:49,646 --> 0:11:51,186
that view are a locust

400
00:11:51,186 --> 0:11:52,666
obstruction in SwiftUI.

401
00:11:53,726 --> 0:11:55,636
You shall not be afraid of

402
00:11:55,636 --> 0:11:56,886
grouping meaningful piece of

403
00:11:57,316 --> 0:11:59,336
data in your view into smaller

404
00:11:59,336 --> 0:12:00,886
and reusable component that can

405
00:11:59,336 --> 0:12:00,886
and reusable component that can

406
00:12:00,886 --> 0:12:01,826
be composed together.

407
00:12:01,906 --> 0:12:03,856
And that's a good candidate

408
00:12:03,936 --> 0:12:04,196
here.

409
00:12:04,776 --> 0:12:07,386
That's a code for the Play and

410
00:12:07,386 --> 0:12:08,006
Pause button.

411
00:12:08,606 --> 0:12:10,976
So let's encapsulate this logic

412
00:12:10,976 --> 0:12:11,956
into its own view.

413
00:12:12,526 --> 0:12:13,906
And we can call this PlayButton.

414
00:12:15,246 --> 0:12:16,296
And now let's take a look at

415
00:12:16,296 --> 0:12:17,676
implementation of PlayButton.

416
00:12:17,816 --> 0:12:22,086
This is the same code as before

417
00:12:22,586 --> 0:12:23,856
just encapsulated into a new

418
00:12:23,856 --> 0:12:24,196
view.

419
00:12:25,046 --> 0:12:26,296
But notice that we made the new

420
00:12:26,296 --> 0:12:29,276
state here but state is not the

421
00:12:29,276 --> 0:12:29,776
right tool.

422
00:12:30,856 --> 0:12:32,806
By using state, we've created

423
00:12:32,806 --> 0:12:34,516
another source of truth for

424
00:12:34,516 --> 0:12:36,206
isPlaying, which we have to keep

425
00:12:36,206 --> 0:12:37,556
in sync with the state in the

426
00:12:37,556 --> 0:12:38,326
parent PlayerView.

427
00:12:38,326 --> 0:12:40,096
And that's not what we want.

428
00:12:40,746 --> 0:12:43,406
What we want is to make this a

429
00:12:43,406 --> 0:12:44,636
reusable component.

430
00:12:45,236 --> 0:12:46,396
So this view shall not own a

431
00:12:46,396 --> 0:12:48,956
source of truth, it just need to

432
00:12:48,956 --> 0:12:50,286
be able to read a value and

433
00:12:50,286 --> 0:12:50,896
mutate it.

434
00:12:52,006 --> 0:12:52,806
But it doesn't need to own

435
00:12:52,806 --> 0:12:53,206
state.

436
00:12:53,206 --> 0:12:55,476
And we have tools for this job.

437
00:12:55,816 --> 0:12:56,666
It's called binding.

438
00:12:56,666 --> 0:13:00,466
By using the Binding Property

439
00:12:56,666 --> 0:13:00,466
By using the Binding Property

440
00:13:00,506 --> 0:13:02,436
Wrapper, you define an explicit

441
00:13:02,436 --> 0:13:04,016
dependency to a source of truth

442
00:13:04,016 --> 0:13:05,316
without owning it.

443
00:13:06,656 --> 0:13:07,936
Additionally, you don't need to

444
00:13:07,936 --> 0:13:09,676
provide an initial value because

445
00:13:09,676 --> 0:13:11,026
the binding can be derived from

446
00:13:11,026 --> 0:13:11,566
a state.

447
00:13:12,886 --> 0:13:14,256
So let's see how does-- how this

448
00:13:14,256 --> 0:13:15,136
fits in our example.

449
00:13:15,746 --> 0:13:17,846
So the only change that we need

450
00:13:17,846 --> 0:13:19,616
to make is to use the binding

451
00:13:19,616 --> 0:13:21,126
property wrapper and omit the

452
00:13:21,126 --> 0:13:21,936
initial value.

453
00:13:22,256 --> 0:13:23,086
It's that simple.

454
00:13:23,706 --> 0:13:26,216
Let's now see how we can provide

455
00:13:26,216 --> 0:13:27,936
a binding into PlayButton by

456
00:13:27,936 --> 0:13:29,196
going back to our PlayerView.

457
00:13:31,756 --> 0:13:33,166
PlayerView is still holding the

458
00:13:33,166 --> 0:13:33,696
state.

459
00:13:33,906 --> 0:13:35,076
That's your source of truth.

460
00:13:35,686 --> 0:13:38,866
From the state, you can derive a

461
00:13:38,866 --> 0:13:40,296
binding by using the dollar

462
00:13:40,296 --> 0:13:41,826
prefix on the property name.

463
00:13:42,386 --> 0:13:44,936
This is your way to allow a

464
00:13:44,936 --> 0:13:47,106
component to access your state

465
00:13:47,496 --> 0:13:48,436
via binding.

466
00:13:49,056 --> 0:13:51,696
The dollar prefix is another

467
00:13:51,696 --> 0:13:53,206
feature of property wrapper.

468
00:13:53,416 --> 0:13:54,796
And if you want to learn more,

469
00:13:55,096 --> 0:13:56,476
please watch the modern Swift

470
00:13:56,476 --> 0:13:57,486
API design talk.

471
00:14:00,216 --> 0:14:01,466
I want for you to pause for a

472
00:14:01,466 --> 0:14:04,076
second and appreciate how simple

473
00:14:04,476 --> 0:14:05,456
but powerful this is.

474
00:14:06,536 --> 0:14:08,326
PlayButton does not contain a

475
00:14:08,326 --> 0:14:09,736
copy of the isPlaying value.

476
00:14:10,826 --> 0:14:12,046
Just as a reference to it

477
00:14:12,276 --> 0:14:14,046
through the binding, so there is

478
00:14:14,046 --> 0:14:16,186
no need to keep this data in

479
00:14:16,186 --> 0:14:17,976
sync between your view.

480
00:14:20,046 --> 0:14:21,696
And I want to contrast this with

481
00:14:21,696 --> 0:14:23,066
what we have to write today in

482
00:14:23,066 --> 0:14:23,976
UI kit, graph kit.

483
00:14:26,256 --> 0:14:28,376
You have a view controller that

484
00:14:28,376 --> 0:14:30,276
owns multiple view that need to

485
00:14:30,276 --> 0:14:32,256
respond to user interaction by

486
00:14:32,256 --> 0:14:34,106
manually setting up target

487
00:14:34,106 --> 0:14:35,876
action or defining a delegate.

488
00:14:36,946 --> 0:14:38,366
You have to observe the model

489
00:14:38,366 --> 0:14:39,996
change and respond to those

490
00:14:39,996 --> 0:14:40,486
event too.

491
00:14:41,626 --> 0:14:43,536
Every time any value changes,

492
00:14:43,826 --> 0:14:45,466
you have to read the value and

493
00:14:45,466 --> 0:14:46,796
set it everywhere it's needed.

494
00:14:47,416 --> 0:14:50,246
As soon as the complexity of

495
00:14:50,276 --> 0:14:52,596
your app grows welling up with a

496
00:14:52,596 --> 0:14:55,216
massive problem and I'm sure all

497
00:14:55,216 --> 0:14:56,606
of you know what I'm talking

498
00:14:56,606 --> 0:14:57,266
about here.

499
00:14:58,086 --> 0:14:59,396
The whole purpose of

500
00:14:59,396 --> 0:15:01,376
ViewController is to keep your

501
00:14:59,396 --> 0:15:01,376
ViewController is to keep your

502
00:15:01,376 --> 0:15:02,866
data in sync with your view.

503
00:15:03,746 --> 0:15:05,436
This is all complexity that I--

504
00:15:05,816 --> 0:15:08,106
you have to manage, but not in

505
00:15:08,106 --> 0:15:08,796
SwiftUI.

506
00:15:09,476 --> 0:15:12,496
You have a simple tool to define

507
00:15:12,496 --> 0:15:14,186
your data dependency and the

508
00:15:14,186 --> 0:15:15,816
framework takes care of all the

509
00:15:15,816 --> 0:15:16,146
rest.

510
00:15:16,846 --> 0:15:18,186
And well, you don't need a

511
00:15:18,186 --> 0:15:19,146
ViewController anymore.

512
00:15:20,516 --> 0:15:27,806
[ Applause and Cheering ]

513
00:15:28,306 --> 0:15:30,396
This idea is so powerful.

514
00:15:30,496 --> 0:15:32,276
This is applied throughout our

515
00:15:32,276 --> 0:15:32,906
framework.

516
00:15:35,806 --> 0:15:37,046
If you take a look at the API

517
00:15:37,046 --> 0:15:38,376
for component like Toggle,

518
00:15:38,686 --> 0:15:40,946
TextField and Slider, they all

519
00:15:40,946 --> 0:15:42,056
expect a binding.

520
00:15:42,906 --> 0:15:44,736
The framework keeps you in

521
00:15:44,736 --> 0:15:46,116
control of where the source of

522
00:15:46,116 --> 0:15:46,756
truth live.

523
00:15:46,756 --> 0:15:51,056
You create the data and give

524
00:15:51,056 --> 0:15:52,106
that to the component, a

525
00:15:52,106 --> 0:15:53,906
reference to it without ever

526
00:15:53,906 --> 0:15:55,976
duplicating that information or

527
00:15:55,976 --> 0:15:57,306
manually keep that in sync.

528
00:15:57,306 --> 0:15:58,846
And that's pretty amazing.

529
00:16:00,096 --> 0:16:02,256
In SwiftUI views are so many app

530
00:16:02,706 --> 0:16:03,886
that can views for layout,

531
00:16:04,376 --> 0:16:06,626
navigation, and much more.

532
00:16:07,176 --> 0:16:09,106
And in fact they are your single

533
00:16:09,246 --> 0:16:10,296
composition primitive.

534
00:16:11,016 --> 0:16:12,516
They're also a great tool for

535
00:16:12,516 --> 0:16:14,226
encapsulating presentation logic

536
00:16:14,456 --> 0:16:15,686
for a single piece of data.

537
00:16:16,866 --> 0:16:18,306
The frameworks allows you and

538
00:16:18,306 --> 0:16:20,296
encourage you to create small

539
00:16:20,296 --> 0:16:22,436
view to represent a single piece

540
00:16:22,436 --> 0:16:24,116
of data that can be composed

541
00:16:24,116 --> 0:16:24,596
together.

542
00:16:25,856 --> 0:16:27,036
And this is, again, the

543
00:16:27,036 --> 0:16:28,726
framework guiding you to our

544
00:16:29,166 --> 0:16:31,006
composition of small unit that

545
00:16:31,006 --> 0:16:31,906
you can reason about.

546
00:16:31,906 --> 0:16:34,946
So let's go back to our example

547
00:16:35,696 --> 0:16:35,766
now.

548
00:16:38,046 --> 0:16:39,056
I've shown this UI to my

549
00:16:39,056 --> 0:16:40,776
designer and she's very

550
00:16:40,776 --> 0:16:42,156
impressed by how little code I

551
00:16:42,156 --> 0:16:42,836
had to write.

552
00:16:44,256 --> 0:16:45,156
But she suggested some

553
00:16:45,156 --> 0:16:45,806
improvement.

554
00:16:47,066 --> 0:16:48,386
We should animate the transition

555
00:16:48,386 --> 0:16:49,416
within Play and Pause.

556
00:16:50,746 --> 0:16:52,606
Fortunately, it's very easy for

557
00:16:52,606 --> 0:16:54,926
me to make my designer because

558
00:16:54,926 --> 0:16:56,536
the framework keeps track of

559
00:16:56,536 --> 0:16:57,736
everything that has changed.

560
00:16:58,006 --> 0:16:59,426
It's incredibly easy and

561
00:16:59,426 --> 0:17:01,776
powerful to drive an animation

562
00:16:59,426 --> 0:17:01,776
powerful to drive an animation

563
00:17:01,906 --> 0:17:03,026
with state.

564
00:17:05,336 --> 0:17:06,976
By wrapping the mutation to the

565
00:17:06,976 --> 0:17:08,646
binding with an animation block,

566
00:17:09,165 --> 0:17:10,646
the framework will animate the

567
00:17:10,646 --> 0:17:12,356
transition when the value

568
00:17:12,356 --> 0:17:12,906
changes.

569
00:17:13,526 --> 0:17:15,056
And you will always get the

570
00:17:15,056 --> 0:17:16,886
correct animation to the final

571
00:17:16,886 --> 0:17:17,415
state.

572
00:17:18,965 --> 0:17:20,656
If you want to learn more about

573
00:17:20,656 --> 0:17:22,746
SwiftUI powerful animation and

574
00:17:22,746 --> 0:17:24,896
layout system and how to make

575
00:17:24,896 --> 0:17:26,715
amazing app, I invite you to

576
00:17:26,715 --> 0:17:28,906
watch Building Custom View in

577
00:17:28,906 --> 0:17:29,616
SwiftUI.

578
00:17:30,166 --> 0:17:32,496
We've now seen state and

579
00:17:32,496 --> 0:17:35,386
binding, but SwiftUI has quite

580
00:17:35,386 --> 0:17:36,716
few more trick up its sleeve.

581
00:17:37,136 --> 0:17:38,586
And to show you more, I want to

582
00:17:38,586 --> 0:17:39,826
invite Raj on stage.

583
00:17:40,276 --> 0:17:40,596
Raj?

584
00:17:41,516 --> 0:17:47,500
[ Applause ]

585
00:17:50,316 --> 0:17:51,026
&gt;&gt; Thanks, Luca.

586
00:17:51,026 --> 0:17:53,846
I'm going to walk you through a

587
00:17:53,846 --> 0:17:55,466
few of the other tools we have

588
00:17:56,056 --> 0:17:57,706
from managing data in SwiftUI.

589
00:17:58,816 --> 0:18:00,376
And by the end of this session,

590
00:17:58,816 --> 0:18:00,376
And by the end of this session,

591
00:18:00,796 --> 0:18:02,306
you'll be able to design and

592
00:18:02,306 --> 0:18:05,246
build robust reusable components

593
00:18:05,336 --> 0:18:08,086
that operate on all kinds of

594
00:18:09,576 --> 0:18:09,716
data.

595
00:18:09,866 --> 0:18:11,556
As you saw earlier, we have a

596
00:18:11,556 --> 0:18:13,986
number of powerful tools for

597
00:18:13,986 --> 0:18:15,166
managing data in SwiftUI.

598
00:18:15,956 --> 0:18:17,776
And Luca already covered a few

599
00:18:17,776 --> 0:18:19,896
of them such as using state,

600
00:18:20,666 --> 0:18:22,536
binding, or even just using a

601
00:18:22,536 --> 0:18:23,346
Swift property.

602
00:18:23,346 --> 0:18:25,816
I'm going to take you through

603
00:18:25,816 --> 0:18:27,446
the rest of these exciting tools

604
00:18:28,146 --> 0:18:30,036
starting with external changes

605
00:18:30,036 --> 0:18:30,546
in SwiftUI.

606
00:18:30,546 --> 0:18:33,496
So I want to bring back the

607
00:18:33,496 --> 0:18:34,886
diagram that Luca just showed

608
00:18:34,886 --> 0:18:35,096
you.

609
00:18:36,206 --> 0:18:38,266
And in this diagram, the user

610
00:18:38,376 --> 0:18:39,886
interacted with the application.

611
00:18:40,766 --> 0:18:42,616
This created an action which

612
00:18:42,616 --> 0:18:44,176
resulted in a mutation to some

613
00:18:44,176 --> 0:18:48,346
state and that was driven into a

614
00:18:48,346 --> 0:18:49,946
new copy of the view that was

615
00:18:49,946 --> 0:18:50,936
rendered to the user.

616
00:18:52,436 --> 0:18:55,506
Well, some events are initiated

617
00:18:55,506 --> 0:18:58,576
externally such as a timer or

618
00:18:58,576 --> 0:18:59,296
notification.

619
00:19:00,756 --> 0:19:03,016
But remember, in SwiftUI, your

620
00:19:03,016 --> 0:19:04,536
views are a function of some

621
00:19:04,536 --> 0:19:04,896
state.

622
00:19:06,296 --> 0:19:07,926
There's a single funnel point

623
00:19:08,106 --> 0:19:09,366
for all of your changes.

624
00:19:10,866 --> 0:19:12,666
And what this means is that

625
00:19:12,666 --> 0:19:14,706
SwiftUI reacts to these external

626
00:19:14,706 --> 0:19:17,106
changes the same way it does to

627
00:19:17,146 --> 0:19:17,976
user interaction.

628
00:19:20,556 --> 0:19:22,846
So when a timer fires or a

629
00:19:22,846 --> 0:19:24,906
notification is received, the

630
00:19:24,906 --> 0:19:26,626
process looks pretty much the

631
00:19:26,626 --> 0:19:26,926
same.

632
00:19:27,876 --> 0:19:30,126
We create an action, perform a

633
00:19:30,126 --> 0:19:33,226
mutation on some state, we get a

634
00:19:33,226 --> 0:19:35,486
new copy of the view and that's

635
00:19:35,526 --> 0:19:36,606
rerendered to the user.

636
00:19:37,196 --> 0:19:40,276
And in SwiftUI, we have a single

637
00:19:40,276 --> 0:19:41,766
abstraction for representing

638
00:19:41,766 --> 0:19:42,916
these external events.

639
00:19:44,046 --> 0:19:45,006
And it's called a Publisher.

640
00:19:45,596 --> 0:19:48,876
The publisher comes from the new

641
00:19:48,876 --> 0:19:49,926
combined framework.

642
00:19:50,876 --> 0:19:53,456
Combine is a unified declarative

643
00:19:53,456 --> 0:19:55,846
API for processing values over

644
00:19:55,846 --> 0:19:56,186
time.

645
00:19:57,506 --> 0:19:58,646
Now, we're not going to go into

646
00:19:58,646 --> 0:20:00,106
the details of Combine today,

647
00:19:58,646 --> 0:20:00,106
the details of Combine today,

648
00:20:00,326 --> 0:20:01,966
but you should definitely check

649
00:20:01,966 --> 0:20:03,416
out these related sessions where

650
00:20:03,416 --> 0:20:04,876
you can find out much more.

651
00:20:06,486 --> 0:20:08,156
For our purpose, there is one

652
00:20:08,156 --> 0:20:09,706
thing to remember when using

653
00:20:09,706 --> 0:20:11,316
these publishers with SwiftUI,

654
00:20:12,186 --> 0:20:13,326
they should omit on the main

655
00:20:13,326 --> 0:20:13,606
thread.

656
00:20:14,576 --> 0:20:16,606
Combine provides an easy to use

657
00:20:16,606 --> 0:20:18,776
operator called Receive On for

658
00:20:18,776 --> 0:20:19,136
this.

659
00:20:19,746 --> 0:20:21,366
For more information, you can

660
00:20:21,366 --> 0:20:22,706
check out the Combine and

661
00:20:22,706 --> 0:20:25,666
Practice session.

662
00:20:25,816 --> 0:20:28,346
OK. Let's walk through this with

663
00:20:28,346 --> 0:20:28,866
an example.

664
00:20:29,996 --> 0:20:32,566
Now, our users can sometimes get

665
00:20:32,566 --> 0:20:35,026
lost listening to podcasts and

666
00:20:35,236 --> 0:20:36,676
they can get tired of hearing

667
00:20:36,676 --> 0:20:38,966
about the same millennial ramble

668
00:20:38,966 --> 0:20:40,986
on about avocado toast for hours

669
00:20:40,986 --> 0:20:41,366
on end.

670
00:20:42,576 --> 0:20:44,976
So, we're going to add a time

671
00:20:44,976 --> 0:20:46,856
stamp to our podcast player so

672
00:20:46,856 --> 0:20:48,356
they know exactly where they are

673
00:20:48,356 --> 0:20:48,986
in the episode.

674
00:20:50,696 --> 0:20:53,596
To do that, we'll add some state

675
00:20:53,886 --> 0:20:55,236
representing the current time

676
00:20:56,116 --> 0:20:58,966
and a text that draws that

677
00:21:00,306 --> 0:21:00,486
value.

678
00:21:00,636 --> 0:21:03,706
Next, we'll use the onReceive

679
00:21:03,706 --> 0:21:04,366
modifier.

680
00:21:05,296 --> 0:21:06,906
Conveniently, I already built a

681
00:21:06,906 --> 0:21:09,246
publisher that fires when the

682
00:21:09,246 --> 0:21:10,346
current time changes.

683
00:21:11,256 --> 0:21:12,746
And I'll use that publisher by

684
00:21:12,746 --> 0:21:14,356
passing it into this onReceive

685
00:21:14,356 --> 0:21:14,936
modifier.

686
00:21:15,776 --> 0:21:17,836
Additionally, I'll also provide

687
00:21:17,836 --> 0:21:20,216
a closure that will execute when

688
00:21:20,216 --> 0:21:21,306
the publisher omits.

689
00:21:22,596 --> 0:21:24,686
And that's it.

690
00:21:24,686 --> 0:21:26,416
In doing this, we've described a

691
00:21:26,416 --> 0:21:27,806
dependency to SwiftUI.

692
00:21:28,966 --> 0:21:30,996
So now, when the currentTime

693
00:21:30,996 --> 0:21:33,226
updates, we'll update our state

694
00:21:34,016 --> 0:21:35,876
and SwiftUI knows that there's a

695
00:21:35,876 --> 0:21:36,666
dependency there.

696
00:21:37,136 --> 0:21:38,556
So we'll update the label

697
00:21:38,636 --> 0:21:39,466
automatically.

698
00:21:40,056 --> 0:21:42,236
There's no manual invalidation

699
00:21:42,316 --> 0:21:43,186
or management here.

700
00:21:44,516 --> 0:21:50,516
[ Applause ]

701
00:21:51,016 --> 0:21:52,706
So we briefly covered external

702
00:21:52,706 --> 0:21:53,796
changes in SwiftUI.

703
00:21:55,006 --> 0:21:56,386
Next, I want to talk to you

704
00:21:56,386 --> 0:21:57,506
about external data.

705
00:22:00,416 --> 0:22:01,856
For that, we have the

706
00:22:01,936 --> 0:22:03,196
BindableObject Protocol.

707
00:22:04,566 --> 0:22:06,406
BindableObject is a convenient

708
00:22:06,406 --> 0:22:08,516
way to use the well encapsulated

709
00:22:08,856 --> 0:22:10,706
tried and true model that you

710
00:22:10,766 --> 0:22:11,486
already have.

711
00:22:13,106 --> 0:22:14,966
It's great for teaching SwiftUI

712
00:22:15,456 --> 0:22:17,146
about the reference type model

713
00:22:17,146 --> 0:22:17,936
you've already built.

714
00:22:19,326 --> 0:22:21,656
This is data that you own and

715
00:22:21,736 --> 0:22:22,146
manage.

716
00:22:23,106 --> 0:22:25,436
SwiftUI just needs to know how

717
00:22:25,436 --> 0:22:27,586
to react to changes in that

718
00:22:28,776 --> 0:22:28,916
data.

719
00:22:29,096 --> 0:22:30,876
So let's use another example.

720
00:22:32,116 --> 0:22:34,376
Our users expect that their

721
00:22:34,376 --> 0:22:36,366
podcasts sync across all of

722
00:22:36,366 --> 0:22:38,016
their devices and I've been

723
00:22:38,016 --> 0:22:39,046
tasked with adding this

724
00:22:39,046 --> 0:22:39,666
functionality.

725
00:22:39,666 --> 0:22:41,696
So I've already gotten started

726
00:22:41,846 --> 0:22:44,116
and I've built up a model and

727
00:22:44,116 --> 0:22:45,476
now it's time to use the model

728
00:22:45,476 --> 0:22:47,246
that I've built in our view

729
00:22:47,246 --> 0:22:48,636
hierarchy and bring it into our

730
00:22:48,636 --> 0:22:49,356
podcast player.

731
00:22:50,306 --> 0:22:51,476
Let me show you how easy that

732
00:22:52,116 --> 0:22:52,206
is.

733
00:22:53,066 --> 0:22:54,776
You could see here a sketch of

734
00:22:54,776 --> 0:22:57,426
the model that we built.

735
00:22:57,616 --> 0:22:59,406
All I need to do to use this

736
00:22:59,406 --> 0:23:01,936
model with SwiftUI is to conform

737
00:22:59,406 --> 0:23:01,936
model with SwiftUI is to conform

738
00:23:01,976 --> 0:23:04,146
it to the BindableObject

739
00:23:04,196 --> 0:23:04,726
Protocol.

740
00:23:10,056 --> 0:23:12,556
With BindableObject, all we need

741
00:23:12,556 --> 0:23:13,956
to provide is a publisher.

742
00:23:14,856 --> 0:23:17,096
This publisher represents

743
00:23:17,096 --> 0:23:18,386
changes to our data.

744
00:23:19,196 --> 0:23:20,696
And remember, the combined

745
00:23:20,696 --> 0:23:22,516
publisher is our single

746
00:23:22,516 --> 0:23:23,886
abstraction for representing

747
00:23:23,886 --> 0:23:25,756
external changes to SwiftUI.

748
00:23:26,716 --> 0:23:28,186
So here, we'll provide a

749
00:23:28,186 --> 0:23:29,516
publisher in the didChange

750
00:23:29,516 --> 0:23:29,956
property.

751
00:23:30,516 --> 0:23:31,906
PassthroughSubject is a

752
00:23:31,906 --> 0:23:32,446
publisher.

753
00:23:33,016 --> 0:23:35,966
And then SwiftUI will subscribe

754
00:23:36,226 --> 0:23:37,786
to this publisher, so it knows

755
00:23:37,786 --> 0:23:39,166
when to update our view

756
00:23:39,166 --> 0:23:39,636
hierarchy.

757
00:23:40,186 --> 0:23:43,076
Then in the advanced method,

758
00:23:44,246 --> 0:23:46,796
when we mutate our model, we'll

759
00:23:46,796 --> 0:23:48,126
simply call send on the

760
00:23:48,126 --> 0:23:48,666
publisher.

761
00:23:50,086 --> 0:23:52,326
Now, note that for correctness,

762
00:23:52,676 --> 0:23:54,326
we need to do this any time our

763
00:23:54,326 --> 0:23:55,766
model changes so that our view

764
00:23:55,766 --> 0:23:56,986
hierarchy can stay up to date.

765
00:23:57,826 --> 0:23:59,636
But thankfully, SwiftUI has our

766
00:23:59,636 --> 0:24:00,286
back.

767
00:23:59,636 --> 0:24:00,286
back.

768
00:24:00,286 --> 0:24:01,336
It handles these updates

769
00:24:01,436 --> 0:24:03,936
gracefully, so you get great

770
00:24:04,106 --> 0:24:05,806
performance and correctness.

771
00:24:07,496 --> 0:24:09,346
So now we've built our model and

772
00:24:09,346 --> 0:24:10,886
its conformance to the

773
00:24:10,886 --> 0:24:12,146
BindableObject Protocol.

774
00:24:13,326 --> 0:24:14,796
Next, I want to show you how to

775
00:24:14,796 --> 0:24:15,906
use that model in the view

776
00:24:15,906 --> 0:24:16,386
hierarchy.

777
00:24:17,466 --> 0:24:19,096
Remember the two principles from

778
00:24:19,096 --> 0:24:19,466
earlier.

779
00:24:20,026 --> 0:24:21,546
Every piece of data has a source

780
00:24:21,546 --> 0:24:23,916
of truth and when you access

781
00:24:23,956 --> 0:24:25,196
that data, you create a

782
00:24:25,196 --> 0:24:25,986
dependency on it.

783
00:24:26,626 --> 0:24:28,306
So we've created our source of

784
00:24:28,306 --> 0:24:29,866
truth but we don't have a

785
00:24:29,866 --> 0:24:30,676
dependency yet.

786
00:24:31,636 --> 0:24:33,066
Fortunately, it's really easy to

787
00:24:33,066 --> 0:24:35,126
create dependencies on your

788
00:24:35,126 --> 0:24:36,006
bindable objects.

789
00:24:36,576 --> 0:24:40,826
I brought up this very basic

790
00:24:40,826 --> 0:24:41,526
diagram here.

791
00:24:41,856 --> 0:24:43,576
You can see we have our view

792
00:24:43,576 --> 0:24:45,486
hierarchy in blue on the right

793
00:24:46,106 --> 0:24:47,466
and we have our model in green

794
00:24:47,466 --> 0:24:47,906
on the left.

795
00:24:49,456 --> 0:24:51,076
Now, we can connect the two

796
00:24:51,126 --> 0:24:53,276
creating a dependency using the

797
00:24:53,326 --> 0:24:55,236
ObjectBinding property wrapper.

798
00:24:56,756 --> 0:24:58,986
And as we do this, each view

799
00:24:58,986 --> 0:25:00,506
that has that property wrapper

800
00:24:58,986 --> 0:25:00,506
that has that property wrapper

801
00:25:00,716 --> 0:25:02,506
will depend on the model that we

802
00:25:02,506 --> 0:25:03,216
wrote earlier.

803
00:25:05,296 --> 0:25:07,866
Just like with state, when you

804
00:25:07,866 --> 0:25:09,526
use the ObjectBinding property

805
00:25:09,526 --> 0:25:10,916
wrapper and add that to your

806
00:25:10,916 --> 0:25:13,296
view, the framework recognizes

807
00:25:13,296 --> 0:25:14,546
that there's a dependency there.

808
00:25:14,916 --> 0:25:16,786
And so in body, when you access

809
00:25:16,786 --> 0:25:18,756
that data, we automatically

810
00:25:18,836 --> 0:25:21,026
figure out when to update your

811
00:25:21,026 --> 0:25:21,336
view.

812
00:25:21,896 --> 0:25:24,716
In code, this looks something

813
00:25:25,786 --> 0:25:27,236
like this.

814
00:25:27,446 --> 0:25:28,936
When you create your view, you

815
00:25:28,936 --> 0:25:30,486
add the ObjectBinding property

816
00:25:30,486 --> 0:25:32,276
wrapper to a property in your

817
00:25:32,276 --> 0:25:32,526
view.

818
00:25:33,076 --> 0:25:36,006
And then when you instantiate

819
00:25:36,006 --> 0:25:38,446
your view, you just pass the

820
00:25:38,446 --> 0:25:39,966
reference to your model that you

821
00:25:39,966 --> 0:25:40,576
already have.

822
00:25:41,306 --> 0:25:43,996
Note that this creates an

823
00:25:43,996 --> 0:25:45,716
explicit dependency in the

824
00:25:45,716 --> 0:25:47,436
initializer of the view, which

825
00:25:47,436 --> 0:25:48,976
is really great because now

826
00:25:49,016 --> 0:25:50,666
anytime I go to instantiate my

827
00:25:50,666 --> 0:25:52,246
view, I know that it has a

828
00:25:52,246 --> 0:25:53,946
dependency on the model.

829
00:25:58,076 --> 0:25:58,936
And that's it.

830
00:26:00,336 --> 0:26:02,676
And as we do this, each view

831
00:26:02,676 --> 0:26:04,026
with the property wrapper will

832
00:26:04,146 --> 0:26:05,806
automatically subscribe the

833
00:26:05,806 --> 0:26:07,596
changes in our BindableObject,

834
00:26:08,566 --> 0:26:09,936
which means we get automatic

835
00:26:09,936 --> 0:26:10,806
dependency tracking.

836
00:26:11,156 --> 0:26:13,596
Again, no manual invalidation or

837
00:26:13,596 --> 0:26:15,346
synchronization needed.

838
00:26:16,516 --> 0:26:22,736
[ Applause ]

839
00:26:23,236 --> 0:26:24,416
So I want to pause and take

840
00:26:24,456 --> 0:26:26,756
careful note here because if

841
00:26:26,756 --> 0:26:28,826
using SwiftUI are value types,

842
00:26:29,376 --> 0:26:30,536
any time you're using a

843
00:26:30,536 --> 0:26:32,026
reference type, you should be

844
00:26:32,026 --> 0:26:33,686
using the ObjectBinding property

845
00:26:33,686 --> 0:26:34,066
wrapper.

846
00:26:34,736 --> 0:26:36,486
This way the framework will know

847
00:26:36,536 --> 0:26:38,276
when that data changes and can

848
00:26:38,376 --> 0:26:39,826
keep your view hierarchy up to

849
00:26:39,826 --> 0:26:40,106
date.

850
00:26:40,646 --> 0:26:43,166
So that's how to create a

851
00:26:43,166 --> 0:26:45,176
dependency using ObjectBinding

852
00:26:45,426 --> 0:26:46,486
on BindableObject.

853
00:26:47,446 --> 0:26:48,976
But we actually have another

854
00:26:48,976 --> 0:26:49,966
tool for creating these

855
00:26:49,966 --> 0:26:51,106
dependencies as well.

856
00:26:52,566 --> 0:26:54,066
You can create indirect

857
00:26:54,066 --> 0:26:54,726
dependencies.

858
00:26:56,156 --> 0:26:57,756
So I brought back a similar

859
00:26:57,756 --> 0:26:58,976
diagram to the one that you just

860
00:26:58,976 --> 0:27:01,266
saw, but this time our view has

861
00:26:58,976 --> 0:27:01,266
saw, but this time our view has

862
00:27:01,266 --> 0:27:02,146
gained some children.

863
00:27:02,656 --> 0:27:06,396
Next, I want to bring in the

864
00:27:06,396 --> 0:27:06,946
environment.

865
00:27:08,066 --> 0:27:09,586
If you've watched the SwiftUI

866
00:27:09,636 --> 0:27:11,636
Essentials talk, you know that

867
00:27:11,636 --> 0:27:12,936
the environment is a really

868
00:27:12,936 --> 0:27:15,316
great encapsulation for pushing

869
00:27:15,316 --> 0:27:16,636
data down through your view

870
00:27:16,636 --> 0:27:17,046
hierarchy.

871
00:27:18,196 --> 0:27:19,936
And using the environment object

872
00:27:19,936 --> 0:27:22,766
modifier, we can actually write

873
00:27:22,766 --> 0:27:26,196
our BindableObject into the

874
00:27:27,776 --> 0:27:28,116
environment.

875
00:27:28,116 --> 0:27:29,686
Now, our model is in the

876
00:27:29,686 --> 0:27:30,166
environment.

877
00:27:30,836 --> 0:27:34,276
We can create dependencies on

878
00:27:34,276 --> 0:27:35,736
our model by using the

879
00:27:35,736 --> 0:27:37,396
EnvironmentObject property

880
00:27:39,936 --> 0:27:40,096
wrapper.

881
00:27:40,266 --> 0:27:41,706
Now, by using this property

882
00:27:41,706 --> 0:27:43,086
wrapper, we can create a

883
00:27:43,086 --> 0:27:44,426
dependency on that model.

884
00:27:46,976 --> 0:27:48,376
But there's more.

885
00:27:49,156 --> 0:27:50,526
You can actually use this in

886
00:27:50,526 --> 0:27:51,776
multiple places.

887
00:27:52,756 --> 0:27:55,376
So you can use this in a variety

888
00:27:55,376 --> 0:27:56,406
of views throughout your

889
00:27:56,406 --> 0:27:57,896
hierarchy and they will all

890
00:27:57,896 --> 0:27:59,506
depend on the same model.

891
00:28:00,106 --> 0:28:03,166
And, of course, when that data

892
00:28:03,166 --> 0:28:05,706
changes, everything will get

893
00:28:05,706 --> 0:28:07,206
updated automatically.

894
00:28:08,586 --> 0:28:09,906
You get the same automatic

895
00:28:09,906 --> 0:28:11,636
dependency tracking as you do

896
00:28:11,636 --> 0:28:12,546
with ObjectBinding.

897
00:28:13,066 --> 0:28:15,676
You describe the dependency to

898
00:28:15,676 --> 0:28:18,186
SwiftUI by using these tools and

899
00:28:18,186 --> 0:28:19,516
the framework handles the rest.

900
00:28:20,056 --> 0:28:20,596
It's pretty great.

901
00:28:21,516 --> 0:28:27,036
[ Applause ]

902
00:28:27,536 --> 0:28:29,066
So let's update our podcast

903
00:28:29,066 --> 0:28:29,906
player to take advantage of

904
00:28:29,906 --> 0:28:30,156
this.

905
00:28:31,306 --> 0:28:33,796
To do that, this is it.

906
00:28:34,656 --> 0:28:35,766
You just need to add the

907
00:28:35,766 --> 0:28:37,086
EnvironmentObject property

908
00:28:37,086 --> 0:28:40,126
wrapper to the view and then in

909
00:28:40,126 --> 0:28:41,486
an ancestor higher up in the

910
00:28:41,486 --> 0:28:43,366
hierarchy just provide the model

911
00:28:43,366 --> 0:28:44,596
using the EnvironmentObject

912
00:28:44,596 --> 0:28:45,106
modifier.

913
00:28:46,426 --> 0:28:48,466
Now, whenever we use our player

914
00:28:48,466 --> 0:28:50,426
in the body, SwiftUI will

915
00:28:50,526 --> 0:28:52,296
automatically update our view on

916
00:28:52,296 --> 0:28:53,346
our behalf.

917
00:28:53,976 --> 0:28:55,346
So you're probably wondering

918
00:28:56,026 --> 0:28:56,866
when would I use

919
00:28:56,866 --> 0:28:58,836
EnvironmentObject versus

920
00:28:58,836 --> 0:28:59,566
ObjectBinding?

921
00:29:00,556 --> 0:29:02,966
Well, you can actually build

922
00:29:02,966 --> 0:29:04,246
your whole app with

923
00:29:04,246 --> 0:29:06,796
ObjectBinding, but it can get

924
00:29:06,796 --> 0:29:08,006
kind of cumbersome to pass

925
00:29:08,006 --> 0:29:09,406
around the model from hop to

926
00:29:09,406 --> 0:29:10,006
hop.

927
00:29:11,286 --> 0:29:11,846
And that's where

928
00:29:11,846 --> 0:29:13,126
EnvironmentObject comes in.

929
00:29:14,136 --> 0:29:16,366
It's a really useful convenience

930
00:29:16,696 --> 0:29:18,446
for passing data around your

931
00:29:18,446 --> 0:29:19,866
hierarchy indirectly.

932
00:29:21,316 --> 0:29:23,626
Here, you can see by using

933
00:29:23,626 --> 0:29:25,686
EnvironmentObject, we can pass

934
00:29:25,686 --> 0:29:27,156
the model indirectly through our

935
00:29:27,156 --> 0:29:29,026
view hierarchy, which means we

936
00:29:29,026 --> 0:29:30,566
don't have to instantiate all

937
00:29:30,566 --> 0:29:32,006
the intermediate views to the

938
00:29:32,006 --> 0:29:33,846
hierarchy with the model.

939
00:29:37,816 --> 0:29:39,616
So the environment is actually a

940
00:29:39,616 --> 0:29:41,186
great way to pass all sorts of

941
00:29:41,186 --> 0:29:42,876
data indirectly down through

942
00:29:42,876 --> 0:29:43,626
your view hierarchy.

943
00:29:44,366 --> 0:29:46,126
And you might have seen its use

944
00:29:46,396 --> 0:29:48,956
for things such as accent color

945
00:29:48,956 --> 0:29:51,066
or layout direction and even

946
00:29:51,066 --> 0:29:51,356
more.

947
00:29:52,446 --> 0:29:55,036
And as Luca said earlier, data

948
00:29:55,036 --> 0:29:56,726
comes in all sorts of shapes and

949
00:29:56,726 --> 0:29:57,106
forms.

950
00:29:58,276 --> 0:30:00,616
Well, values like accent color

951
00:29:58,276 --> 0:30:00,616
Well, values like accent color

952
00:30:00,726 --> 0:30:02,746
and layout direction, those are

953
00:30:02,746 --> 0:30:03,226
just data.

954
00:30:04,276 --> 0:30:06,006
And when you use them in your

955
00:30:06,006 --> 0:30:07,506
views, you're creating a

956
00:30:07,506 --> 0:30:08,406
dependency on them.

957
00:30:09,726 --> 0:30:11,906
In fact, the environment is a

958
00:30:12,016 --> 0:30:13,416
general purpose container for

959
00:30:13,416 --> 0:30:15,186
handling all sorts of indirect

960
00:30:15,256 --> 0:30:16,376
data and dependencies.

961
00:30:16,776 --> 0:30:17,956
And the framework uses it

962
00:30:17,956 --> 0:30:20,066
liberally to give you rich

963
00:30:20,066 --> 0:30:22,606
features like Dynamic Type and

964
00:30:22,606 --> 0:30:23,176
Dark Mode.

965
00:30:24,156 --> 0:30:25,566
You can also use the environment

966
00:30:25,686 --> 0:30:27,546
in previews to provide new

967
00:30:27,546 --> 0:30:29,066
values for things like the

968
00:30:29,066 --> 0:30:31,486
accent color or theme.

969
00:30:35,756 --> 0:30:37,406
So that's a quick tour through

970
00:30:37,406 --> 0:30:39,646
the powerful tools we have in

971
00:30:39,646 --> 0:30:41,226
SwiftUI for handling data.

972
00:30:42,466 --> 0:30:43,916
Next, I want to help you build

973
00:30:43,916 --> 0:30:46,496
some intuition for how to use

974
00:30:46,496 --> 0:30:48,276
the right tool and how they all

975
00:30:48,276 --> 0:30:48,836
fit together.

976
00:30:49,386 --> 0:30:53,276
One of the big themes here is

977
00:30:53,526 --> 0:30:55,446
that every piece of data has a

978
00:30:55,446 --> 0:30:57,006
single source of truth.

979
00:30:57,646 --> 0:30:59,516
And in SwiftUI, we really have

980
00:30:59,606 --> 0:31:01,746
two options for managing these

981
00:30:59,606 --> 0:31:01,746
two options for managing these

982
00:31:01,746 --> 0:31:03,936
sources of truth.

983
00:31:04,126 --> 0:31:05,586
First, we have state.

984
00:31:06,606 --> 0:31:08,236
State is great for data that's

985
00:31:08,386 --> 0:31:10,766
view local, a value type,

986
00:31:11,766 --> 0:31:14,506
managed, allocated and created

987
00:31:14,506 --> 0:31:15,106
by the framework.

988
00:31:15,776 --> 0:31:19,836
And BindableObject is great for

989
00:31:19,836 --> 0:31:20,916
data that you control.

990
00:31:22,286 --> 0:31:23,396
It's great for representing

991
00:31:23,526 --> 0:31:25,746
external data to SwiftUI such as

992
00:31:25,746 --> 0:31:29,576
in onDevice database, this is

993
00:31:29,786 --> 0:31:32,756
storage that you manage, which

994
00:31:32,756 --> 0:31:34,306
makes it great for the model

995
00:31:34,306 --> 0:31:35,296
that you already have.

996
00:31:35,926 --> 0:31:38,756
So now that we've talked about

997
00:31:38,756 --> 0:31:40,866
sources of truth, I want to talk

998
00:31:40,866 --> 0:31:42,306
a little bit about building

999
00:31:42,306 --> 0:31:43,486
reusable components.

1000
00:31:44,056 --> 0:31:46,456
One of the things that's great

1001
00:31:46,456 --> 0:31:48,866
about SwiftUI is that views are

1002
00:31:48,866 --> 0:31:49,976
low cost obstruction.

1003
00:31:49,976 --> 0:31:52,786
And what that means is that you

1004
00:31:52,946 --> 0:31:54,466
don't have to make the tradeoff

1005
00:31:54,756 --> 0:31:56,756
between great architecture and

1006
00:31:56,756 --> 0:31:57,576
performance.

1007
00:31:58,246 --> 0:31:59,566
You can build the architecture

1008
00:31:59,566 --> 0:32:00,996
you've always wanted to build

1009
00:31:59,566 --> 0:32:00,996
you've always wanted to build

1010
00:32:01,206 --> 0:32:02,856
and you can also get great

1011
00:32:02,856 --> 0:32:03,466
performance.

1012
00:32:03,626 --> 0:32:04,566
You don't have to make the

1013
00:32:04,566 --> 0:32:05,666
straight off.

1014
00:32:06,826 --> 0:32:09,316
And with SwiftUI, you can focus

1015
00:32:09,436 --> 0:32:10,786
on making your views into

1016
00:32:10,786 --> 0:32:11,906
reusable components.

1017
00:32:12,446 --> 0:32:14,606
When you do this, you'll

1018
00:32:14,816 --> 0:32:16,646
probably notice that most of the

1019
00:32:16,646 --> 0:32:17,966
time when you're using data in

1020
00:32:17,966 --> 0:32:19,896
your views, you probably don't

1021
00:32:19,896 --> 0:32:20,666
need to mutate it.

1022
00:32:21,326 --> 0:32:24,106
And so, read-only access is

1023
00:32:24,686 --> 0:32:26,166
preferred when you can get away

1024
00:32:26,166 --> 0:32:27,106
with that.

1025
00:32:28,236 --> 0:32:30,336
For that, we have Swift

1026
00:32:30,336 --> 0:32:31,826
properties and the environment.

1027
00:32:32,766 --> 0:32:34,566
And because views in SwiftUI are

1028
00:32:34,566 --> 0:32:36,396
value types, the framework can

1029
00:32:36,566 --> 0:32:37,606
automatically determine when

1030
00:32:37,606 --> 0:32:39,126
your data changes and update

1031
00:32:39,126 --> 0:32:43,146
your view as a result.

1032
00:32:43,146 --> 0:32:44,596
In general, you should prefer

1033
00:32:44,596 --> 0:32:46,896
immutable access, but sometimes

1034
00:32:46,956 --> 0:32:48,306
you do need to mutate a value.

1035
00:32:49,626 --> 0:32:51,596
And for that, we have binding.

1036
00:32:52,256 --> 0:32:55,756
As Luca told you earlier, a

1037
00:32:55,756 --> 0:32:57,846
binding is first class reference

1038
00:32:57,846 --> 0:32:58,186
to data.

1039
00:32:59,126 --> 0:33:00,976
It allows your components to

1040
00:32:59,126 --> 0:33:00,976
It allows your components to

1041
00:33:00,976 --> 0:33:03,756
read and write a value without

1042
00:33:03,756 --> 0:33:05,276
owning it.

1043
00:33:05,276 --> 0:33:06,526
And this makes it great for

1044
00:33:06,526 --> 0:33:07,256
reusability.

1045
00:33:08,226 --> 0:33:09,576
In fact, you can get a binding

1046
00:33:09,576 --> 0:33:10,586
to many different

1047
00:33:10,586 --> 0:33:11,596
representations of data.

1048
00:33:12,566 --> 0:33:13,836
We showed you today how to get a

1049
00:33:13,836 --> 0:33:15,476
binding to state, but you can

1050
00:33:15,476 --> 0:33:16,796
also get a binding to an

1051
00:33:16,796 --> 0:33:17,486
ObjectBinding.

1052
00:33:18,096 --> 0:33:20,616
In fact, you can get a binding

1053
00:33:20,616 --> 0:33:21,756
to another binding as well.

1054
00:33:22,926 --> 0:33:24,266
All you need to do is use the

1055
00:33:24,266 --> 0:33:25,846
dollar sign prefix as we showed

1056
00:33:25,846 --> 0:33:26,406
you earlier.

1057
00:33:26,406 --> 0:33:28,266
It allows you to derive a

1058
00:33:28,266 --> 0:33:29,596
binding from another one of

1059
00:33:29,596 --> 0:33:30,346
these tools.

1060
00:33:30,346 --> 0:33:33,716
I want to pause for a minute and

1061
00:33:33,716 --> 0:33:35,066
appreciate how powerful this is.

1062
00:33:35,946 --> 0:33:37,926
Earlier on, Luca showed you that

1063
00:33:37,926 --> 0:33:39,316
many of the components we vend

1064
00:33:39,376 --> 0:33:40,956
in SwiftUI, they operate on

1065
00:33:40,956 --> 0:33:41,386
bindings.

1066
00:33:42,436 --> 0:33:44,286
So let's use Toggle for example.

1067
00:33:45,296 --> 0:33:46,736
Toggle takes a binding to a

1068
00:33:46,736 --> 0:33:47,256
Boolean.

1069
00:33:48,456 --> 0:33:49,856
But the beauty of data in

1070
00:33:49,856 --> 0:33:51,906
SwiftUI is that Toggle doesn't

1071
00:33:51,906 --> 0:33:55,036
need to know or care where that

1072
00:33:55,036 --> 0:33:56,736
Boolean lives or comes from.

1073
00:33:57,476 --> 0:33:59,446
All it needs to do is know how

1074
00:33:59,446 --> 0:34:01,536
to read the value and change the

1075
00:33:59,446 --> 0:34:01,536
to read the value and change the

1076
00:34:01,536 --> 0:34:01,906
value.

1077
00:34:02,916 --> 0:34:04,106
Binding is a tool that

1078
00:34:04,106 --> 0:34:05,926
encapsulates these operations

1079
00:34:06,246 --> 0:34:08,576
which gets this separation of

1080
00:34:08,576 --> 0:34:09,856
concern to the Toggle.

1081
00:34:10,456 --> 0:34:14,255
And this is the real power of

1082
00:34:14,255 --> 0:34:15,466
using data in SwiftUI.

1083
00:34:16,286 --> 0:34:17,996
You can get great correctness

1084
00:34:18,866 --> 0:34:20,286
and great separation of

1085
00:34:20,286 --> 0:34:20,835
concerns.

1086
00:34:23,876 --> 0:34:25,346
So you'll notice, I didn't

1087
00:34:25,346 --> 0:34:26,826
actually mention state when I

1088
00:34:26,826 --> 0:34:28,076
was talking about building

1089
00:34:28,076 --> 0:34:29,036
reusable components.

1090
00:34:29,356 --> 0:34:32,416
Well, state is trapped inside of

1091
00:34:32,416 --> 0:34:33,706
your view and its children.

1092
00:34:34,696 --> 0:34:36,846
So if your component needs to

1093
00:34:36,846 --> 0:34:38,045
operate on a value that's

1094
00:34:38,156 --> 0:34:40,146
external or somewhere else,

1095
00:34:40,795 --> 0:34:43,426
state might not be a great fit.

1096
00:34:44,235 --> 0:34:46,356
And state is a fantastic tool

1097
00:34:46,356 --> 0:34:47,366
for prototyping a first

1098
00:34:47,366 --> 0:34:49,386
approach, as you saw today with

1099
00:34:49,386 --> 0:34:50,116
our podcast player.

1100
00:34:51,196 --> 0:34:53,126
But most of the time, your data

1101
00:34:53,346 --> 0:34:55,036
is going to live outside

1102
00:34:55,226 --> 0:34:55,666
SwiftUI.

1103
00:34:57,386 --> 0:34:59,096
For example, your data might

1104
00:34:59,096 --> 0:35:00,936
live in a database and that will

1105
00:34:59,096 --> 0:35:00,936
live in a database and that will

1106
00:35:00,936 --> 0:35:02,266
probably be represented by

1107
00:35:02,586 --> 0:35:04,036
something like a BindableObject.

1108
00:35:04,726 --> 0:35:07,266
So if you find yourself reaching

1109
00:35:07,266 --> 0:35:09,376
for state, please take a step

1110
00:35:09,376 --> 0:35:12,066
back and consider, does this

1111
00:35:12,106 --> 0:35:13,886
data really need to be owned by

1112
00:35:13,886 --> 0:35:14,346
this view?

1113
00:35:15,526 --> 0:35:17,806
Perhaps the data, the state

1114
00:35:17,856 --> 0:35:19,166
should be lifted up into a

1115
00:35:19,166 --> 0:35:20,616
parent as Luca showed you

1116
00:35:20,616 --> 0:35:23,206
earlier or maybe that data can

1117
00:35:23,206 --> 0:35:24,736
just be represented by an

1118
00:35:24,956 --> 0:35:26,556
external source using a

1119
00:35:26,636 --> 0:35:27,486
BindableObject.

1120
00:35:27,966 --> 0:35:31,076
So it's important to be careful

1121
00:35:31,076 --> 0:35:33,546
when using state, but it does

1122
00:35:33,546 --> 0:35:34,306
have its strengths.

1123
00:35:35,566 --> 0:35:37,196
One of the great uses of state

1124
00:35:37,436 --> 0:35:39,466
that we have in our framework is

1125
00:35:39,756 --> 0:35:40,066
button.

1126
00:35:41,486 --> 0:35:43,286
Button uses state to track

1127
00:35:43,576 --> 0:35:44,916
whether the user is pressing on

1128
00:35:44,916 --> 0:35:46,656
it and highlight appropriately.

1129
00:35:47,676 --> 0:35:48,796
And what's great about using

1130
00:35:48,796 --> 0:35:51,286
state for button is that when

1131
00:35:51,286 --> 0:35:52,626
you create a button, you don't

1132
00:35:52,626 --> 0:35:54,276
need to care about the highlight

1133
00:35:54,356 --> 0:35:54,656
state.

1134
00:35:55,726 --> 0:35:58,366
That is data that is truly owned

1135
00:35:58,606 --> 0:36:01,336
by the button.

1136
00:35:58,606 --> 0:36:01,336
by the button.

1137
00:36:01,506 --> 0:36:02,566
So when you're reaching for

1138
00:36:02,566 --> 0:36:04,816
state, consider do I have a case

1139
00:36:04,816 --> 0:36:05,556
that's like button?

1140
00:36:06,256 --> 0:36:07,516
And if you do, state might be a

1141
00:36:07,516 --> 0:36:08,036
great tool.

1142
00:36:08,906 --> 0:36:10,776
But if not, consider using one

1143
00:36:10,776 --> 0:36:12,066
of the other powerful tools

1144
00:36:12,066 --> 0:36:13,656
we've shown you for using data

1145
00:36:13,656 --> 0:36:14,236
in SwiftUI.

1146
00:36:17,536 --> 0:36:18,946
So that's how to build reusable

1147
00:36:18,946 --> 0:36:20,016
components with SwiftUI.

1148
00:36:20,686 --> 0:36:23,196
But what we've shown you here is

1149
00:36:23,196 --> 0:36:25,246
actually generally applicable to

1150
00:36:25,246 --> 0:36:26,386
all sorts of software.

1151
00:36:27,606 --> 0:36:29,156
Every piece of software has data

1152
00:36:30,076 --> 0:36:32,126
and every piece of software has

1153
00:36:32,176 --> 0:36:33,126
data access.

1154
00:36:34,296 --> 0:36:36,036
And by carefully understanding

1155
00:36:36,036 --> 0:36:38,196
your data, minimizing your

1156
00:36:38,196 --> 0:36:40,396
sources of truth, and building

1157
00:36:40,396 --> 0:36:42,356
reusable components, you can

1158
00:36:42,356 --> 0:36:44,636
eliminate an entire class of

1159
00:36:44,636 --> 0:36:44,986
bugs.

1160
00:36:45,646 --> 0:36:48,426
And when you use SwiftUI,

1161
00:36:49,016 --> 0:36:50,526
applying these concepts is

1162
00:36:50,526 --> 0:36:52,596
incredibly easy because we've

1163
00:36:52,676 --> 0:36:54,096
built them right into the

1164
00:36:54,146 --> 0:36:54,556
framework.

1165
00:36:57,436 --> 0:36:58,686
We have a number of related

1166
00:36:58,686 --> 0:37:00,766
sessions on SwiftUI and I

1167
00:36:58,686 --> 0:37:00,766
sessions on SwiftUI and I

1168
00:37:00,766 --> 0:37:02,286
encourage you to check out all

1169
00:37:03,036 --> 0:37:04,106
of them.

1170
00:37:04,306 --> 0:37:06,086
It will change the way you build

1171
00:37:07,056 --> 0:37:07,146
apps.

1172
00:37:08,096 --> 0:37:08,746
Thank you.

1173
00:37:09,516 --> 0:37:15,500
[ Applause ]
