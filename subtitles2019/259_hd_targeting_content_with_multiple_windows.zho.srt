1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:06,516 --> 0:00:09,500
[掌声]

3
00:00:12,366 --> 0:00:13,736
&gt;&gt; 大家好 我叫 Alex Schaefer

4
00:00:13,736 --> 0:00:15,796
我是 iOS 系统 UI 团队的一名工程师

5
00:00:16,016 --> 0:00:18,306
我要讲的是使用多个窗口的定位内容

6
00:00:18,746 --> 0:00:21,166
为了了解我们今天要讨论的问题

7
00:00:21,166 --> 0:00:22,636
让我们先快速了解一下 iOS 12 

8
00:00:24,086 --> 0:00:26,446
在 iOS 12 中 我们

9
00:00:26,446 --> 0:00:28,066
在你的 App 和用户界面之间

10
00:00:28,066 --> 0:00:29,046
建立了一对一的映射

11
00:00:29,756 --> 0:00:31,500
比如说一个通知来了

12
00:00:32,595 --> 0:00:33,726
用户会点击它

13
00:00:33,726 --> 0:00:35,446
那么这会把你带到相应的 App 中去 

14
00:00:35,446 --> 0:00:37,476
并且相应地 你的 App 将会更新你的用户界面

15
00:00:38,126 --> 0:00:38,406
这很好

16
00:00:38,406 --> 0:00:40,036
那有什么不同之处呢？

17
00:00:41,076 --> 0:00:43,326
是这样 在 iOS 13 中 

18
00:00:43,326 --> 0:00:44,806
你可以同时运行多个用户界面

19
00:00:45,496 --> 0:00:46,576
这会引发这样的问题——

20
00:00:48,566 --> 0:00:51,316
响应此通知应激活哪个场景

21
00:00:52,266 --> 0:00:53,336
其实 我知道你们都在说什么

22
00:00:54,586 --> 0:00:56,116
问我的 App 就好了

23
00:00:56,516 --> 0:00:57,306
这是我猜的

24
00:00:57,406 --> 0:00:59,396
但是如果你的 App 没在运行怎么办

25
00:01:00,146 --> 0:01:01,066
谁在乎呢

26
00:01:01,066 --> 0:01:01,786
那就启动我的 App 就好了

27
00:01:02,986 --> 0:01:04,066
好好 别着急

28
00:01:04,906 --> 0:01:06,936
iOS 需要知道你的 App 中

29
00:01:06,936 --> 0:01:07,886
哪个场景应该位于最前面

30
00:01:09,086 --> 0:01:10,516
并且针对启动时间 响应激活 App

31
00:01:10,706 --> 0:01:11,996
就好比刚刚那个进来的通知一样

32
00:01:12,696 --> 0:01:13,636
因此 如果我们在后台

33
00:01:13,636 --> 0:01:15,716
启动你的 App 并想要

34
00:01:15,716 --> 0:01:16,886
合适的场景 我们必须

35
00:01:16,886 --> 0:01:17,766
等到你的 App 完全加载

36
00:01:17,766 --> 0:01:19,396
然后再等待

37
00:01:19,396 --> 0:01:20,966
直到你可以做出决定

38
00:01:21,716 --> 0:01:22,296
这可能会导致

39
00:01:22,296 --> 0:01:24,156
不太理想的用户体验

40
00:01:24,626 --> 0:01:25,616
系统基本上会

41
00:01:25,616 --> 0:01:27,076
停下来等待反馈

42
00:01:27,076 --> 0:01:28,636
当我点击通知时 我

43
00:01:28,636 --> 0:01:30,256
希望它能立即到达某个地方

44
00:01:31,026 --> 0:01:32,766
那么 我们能对此做些什么呢

45
00:01:33,806 --> 0:01:35,476
好吧 让我们退后一步

46
00:01:35,476 --> 0:01:36,716
让我们想一下 我们

47
00:01:36,716 --> 0:01:37,796
有什么要和系统合作的地方

48
00:01:38,176 --> 0:01:40,126
我们有你的 App

49
00:01:40,416 --> 0:01:42,446
或许它正在运行 或许它不在

50
00:01:43,136 --> 0:01:46,256
你的 App 包含了你的场景

51
00:01:46,256 --> 0:01:47,576
以及每个场景的

52
00:01:47,576 --> 0:01:49,016
功能的信息

53
00:01:49,016 --> 0:01:50,266
这将派上用场

54
00:01:51,266 --> 0:01:53,206
最后 系统会收到

55
00:01:53,206 --> 0:01:54,236
这个传入通知

56
00:01:54,826 --> 0:01:56,066
我们已经讨论了为什么我们不能

57
00:01:56,066 --> 0:01:58,416
依赖于激活你的 App 并且

58
00:01:58,416 --> 0:01:59,576
我们知道通知

59
00:01:59,576 --> 0:02:00,926
必须以某种方式触发

60
00:01:59,576 --> 0:02:00,926
必须以某种方式触发

61
00:02:00,926 --> 0:02:02,466
适当的场景才能被激活

62
00:02:03,006 --> 0:02:04,446
因此 考虑到这些限制 

63
00:02:04,816 --> 0:02:06,316
让我们尝试将解决方案

64
00:02:06,316 --> 0:02:06,966
整合在一起

65
00:02:08,336 --> 0:02:10,795
首先 我们需要找到一种方法

66
00:02:10,795 --> 0:02:12,626
来描述通知所涉及的内容

67
00:02:12,916 --> 0:02:13,926
所以 让我们添加一些 

68
00:02:13,926 --> 0:02:15,406
通知来使得

69
00:02:15,406 --> 0:02:17,266
系统知道它是什么

70
00:02:18,396 --> 0:02:20,036
然后我们需要让你的场景

71
00:02:20,036 --> 0:02:21,646
以某种方式来描述

72
00:02:21,646 --> 0:02:22,646
它们的能力

73
00:02:22,646 --> 0:02:23,556
就像 什么样的内容

74
00:02:23,556 --> 0:02:24,166
它们可以展示

75
00:02:26,796 --> 0:02:28,546
那么 如果你的场景

76
00:02:28,546 --> 0:02:29,506
正在描述它们

77
00:02:29,506 --> 0:02:30,166
可以与系统合作的内容

78
00:02:30,166 --> 0:02:31,896
并且通知中有

79
00:02:31,896 --> 0:02:33,556
关于它内容的提示

80
00:02:34,476 --> 0:02:35,936
那么我们就不需要你的 App 了

81
00:02:37,096 --> 0:02:38,686
系统足够灵通到

82
00:02:38,686 --> 0:02:40,476
能够根据该通知选择

83
00:02:40,476 --> 0:02:42,786
要激活的所需场景

84
00:02:46,576 --> 0:02:49,196
因此 为了考虑到上面这些场景

85
00:02:49,196 --> 0:02:50,416
和这些场景的功能

86
00:02:50,536 --> 0:02:52,656
我们需要思考这些场景是什么

87
00:02:52,706 --> 0:02:54,006
它们的功能又是什么

88
00:02:54,006 --> 0:02:55,096
其实这些功能

89
00:02:55,096 --> 0:02:56,996
都包含在这个 UIKit 级别里

90
00:02:56,996 --> 0:02:58,616
即 UISceneActivationConditions

91
00:02:59,126 --> 0:03:00,916
这是 UIScene 中附带的一个对象

92
00:02:59,126 --> 0:03:00,916
这是 UIScene 中附带的一个对象

93
00:03:01,106 --> 0:03:02,566
而你的场景激活

94
00:03:02,566 --> 0:03:03,886
条件实际上只是

95
00:03:03,886 --> 0:03:06,636
一些 NS 谓词

96
00:03:06,636 --> 0:03:08,196
它们为特定可以激活的

97
00:03:08,196 --> 0:03:09,316
场景设置了一个路径

98
00:03:10,326 --> 0:03:12,156
让我们来深入了解一下 API

99
00:03:13,996 --> 0:03:15,296
那么 你的激活条件

100
00:03:15,296 --> 0:03:17,046
由两部分组成 即你的

101
00:03:17,046 --> 0:03:17,996
预设谓词和你的

102
00:03:17,996 --> 0:03:18,926
首选谓词

103
00:03:19,356 --> 0:03:21,596
你应该将预先设定好的

104
00:03:21,596 --> 0:03:23,406
谓词视为两者的主要谓词

105
00:03:23,796 --> 0:03:25,186
这向系统表达了

106
00:03:25,186 --> 0:03:26,416
哪些内容类型

107
00:03:26,416 --> 0:03:27,000
场景可以展示

108
00:03:29,766 --> 0:03:31,166
你的首选谓词是一种

109
00:03:31,166 --> 0:03:32,276
向系统表达

110
00:03:32,276 --> 0:03:33,426
此场景尤其 

111
00:03:33,426 --> 0:03:34,756
对特定类型的内容感兴趣

112
00:03:34,756 --> 0:03:35,346
的方式

113
00:03:35,376 --> 0:03:36,756
你应该将预设视为

114
00:03:36,756 --> 0:03:38,256
表达能力 而首选

115
00:03:38,256 --> 0:03:39,556
是一种描绘在

116
00:03:39,556 --> 0:03:41,456
满足条件的场景中

117
00:03:41,456 --> 0:03:42,466
应选择的内容的方法

118
00:03:43,266 --> 0:03:44,316
我已经告诉过你们 这些谓词

119
00:03:44,316 --> 0:03:45,026
可以帮助你们定义你们

120
00:03:45,026 --> 0:03:46,236
能力 但是我还没有

121
00:03:46,236 --> 0:03:47,806
真正详细谈及

122
00:03:47,806 --> 0:03:49,436
这些谓词的作用

123
00:03:51,076 --> 0:03:52,916
这些谓词对

124
00:03:52,956 --> 0:03:54,796
称为目标内容标识符的内容

125
00:03:54,796 --> 0:03:55,716
进行操作

126
00:03:55,766 --> 0:03:57,066
你可能会问自己

127
00:03:57,066 --> 0:03:57,666
那是什么

128
00:03:58,536 --> 0:03:59,706
目标内容标识符

129
00:03:59,706 --> 0:04:00,136
是字符串

130
00:03:59,706 --> 0:04:00,136
是字符串

131
00:04:00,386 --> 0:04:01,206
它只是字符串

132
00:04:01,576 --> 0:04:02,636
但是 它又比那

133
00:04:02,636 --> 0:04:03,706
要复杂一点

134
00:04:03,706 --> 0:04:05,236
目标内容标识符是

135
00:04:05,236 --> 0:04:07,406
表示你们模型中数据的一种

136
00:04:07,406 --> 0:04:08,116
结构化方式

137
00:04:08,366 --> 0:04:09,356
系统不会访问

138
00:04:09,356 --> 0:04:10,526
你的模型——那是你的事儿

139
00:04:10,526 --> 0:04:11,866
但我们将要用它

140
00:04:11,956 --> 0:04:14,386
作为一种建立起这些

141
00:04:14,386 --> 0:04:15,536
场景激活条件的方法

142
00:04:16,286 --> 0:04:19,106
iOS 13 将使用该

143
00:04:19,106 --> 0:04:20,656
目标内容标识符

144
00:04:20,656 --> 0:04:22,016
并根据你的 App 所有场景的

145
00:04:22,016 --> 0:04:23,836
场景激活条件

146
00:04:23,836 --> 0:04:25,056
对其进行评估

147
00:04:25,376 --> 0:04:26,916
且使用它来

148
00:04:26,916 --> 0:04:28,186
在内容应该定位到什么样的场景上

149
00:04:28,186 --> 0:04:28,846
进行调用

150
00:04:30,616 --> 0:04:32,176
Clown Town 是我们的令人兴奋的演示

151
00:04:32,176 --> 0:04:33,346
App 它回答了

152
00:04:33,346 --> 0:04:35,056
一个老掉牙的问题——

153
00:04:35,056 --> 0:04:36,446
随时订购一个小丑

154
00:04:36,446 --> 0:04:37,836
到我现在的位置是什么样

155
00:04:37,836 --> 0:04:41,656
那么 让我们来看看 

156
00:04:41,656 --> 0:04:43,056
Clown Town 的目标内容标识符

157
00:04:43,056 --> 0:04:44,196
是什么样的

158
00:04:44,786 --> 0:04:48,496
好吧 这看起来就像一个网址

159
00:04:48,616 --> 0:04:49,846
在这种情况下 Clown Town

160
00:04:49,846 --> 0:04:51,326
实际上使用的是通用链接

161
00:04:51,786 --> 0:04:53,616
就像我们说的那样

162
00:04:53,616 --> 0:04:54,406
目标内容标识符

163
00:04:54,406 --> 0:04:56,296
理想情况下应该以结构化格式表达

164
00:04:56,296 --> 0:04:57,916
就像通用

165
00:04:57,916 --> 0:04:58,646
链接或者网址一样

166
00:04:58,646 --> 0:05:00,686
你们中的许多人已经在使用

167
00:04:58,646 --> 0:05:00,686
你们中的许多人已经在使用

168
00:05:00,686 --> 0:05:02,296
通用链接 并且它

169
00:05:02,296 --> 0:05:03,366
在这里作为目标

170
00:05:03,366 --> 0:05:04,226
内容标识符会很棒

171
00:05:05,006 --> 0:05:06,396
我们来看看

172
00:05:06,396 --> 0:05:08,296
SDK 目标内容标识符的

173
00:05:08,296 --> 0:05:10,366
添加位置

174
00:05:10,456 --> 0:05:13,746
首先是 UNNotificationContent

175
00:05:14,086 --> 0:05:16,216
iOS 13 中的新增功能 你可以

176
00:05:16,216 --> 0:05:18,266
在使用新密钥 也即目标内容 ID

177
00:05:18,266 --> 0:05:19,276
将其发送到 Apple

178
00:05:19,276 --> 0:05:21,036
推送通知服务器之前

179
00:05:21,036 --> 0:05:22,906
实际增强你的 JSON 有效负载

180
00:05:24,026 --> 0:05:25,066
所以 这也引出了一个非常

181
00:05:25,066 --> 0:05:25,476
重要的点

182
00:05:25,546 --> 0:05:27,306
实际上你可以

183
00:05:27,306 --> 0:05:28,856
同样在后端服务器上

184
00:05:29,046 --> 0:05:30,976
构建此目标内容标识符

185
00:05:31,196 --> 0:05:32,476
并实际上确定

186
00:05:32,566 --> 0:05:34,703
通知应打开的场景

187
00:05:35,706 --> 0:05:38,476
接下来 UIApplicationShortcutItem

188
00:05:38,476 --> 0:05:39,606
已扩展为允许

189
00:05:39,606 --> 0:05:41,426
使用目标内容标识符

190
00:05:41,926 --> 0:05:43,426
今年 iPadOS 的新功能 你

191
00:05:43,426 --> 0:05:44,666
其实可以长按

192
00:05:44,666 --> 0:05:45,986
主屏幕上的图标并获得

193
00:05:45,986 --> 0:05:46,976
相同的快速操作

194
00:05:46,976 --> 0:05:47,876
就跟已经可以在 iPhone 上实现的一样

195
00:05:48,926 --> 0:05:54,286
最后 NSUserActivity

196
00:05:54,856 --> 0:05:56,036
使用此日期恢复

197
00:05:56,036 --> 0:05:57,216
以及切换等功能

198
00:05:57,476 --> 0:05:58,626
也非常有用

199
00:05:59,956 --> 0:06:01,196
所以 让我们在 Clown Town 中

200
00:05:59,956 --> 0:06:01,196
所以 让我们在 Clown Town 中

201
00:06:01,196 --> 0:06:02,286
设置那个场景以响应

202
00:06:02,286 --> 0:06:04,226
我们刚刚的目标

203
00:06:04,776 --> 0:06:04,906
内容标识符

204
00:06:06,446 --> 0:06:07,746
在顶部 我们有目标

205
00:06:07,746 --> 0:06:08,656
内容标识符

206
00:06:09,626 --> 0:06:11,356
这是我们的网址格式 它看上去

207
00:06:11,356 --> 0:06:13,286
像是一个装备为名是 Crusty 的小丑

208
00:06:14,216 --> 0:06:14,446
好了

209
00:06:15,976 --> 0:06:17,426
在你的左侧 我们有一个大概 

210
00:06:17,426 --> 0:06:18,796
描述 我们可以在该地区订购的

211
00:06:18,796 --> 0:06:19,556
所有小丑

212
00:06:20,446 --> 0:06:21,916
这是我们的主要场景

213
00:06:21,916 --> 0:06:23,266
我们的 App 中的所有内容

214
00:06:23,266 --> 0:06:23,576
都包含在这里

215
00:06:24,236 --> 0:06:26,316
用户实在不太可能

216
00:06:26,316 --> 0:06:28,006
将 Crusty 与这个场景联系起来

217
00:06:28,476 --> 0:06:29,846
我认为如此设置

218
00:06:29,846 --> 0:06:30,966
这个场景的激活

219
00:06:30,966 --> 0:06:32,746
条件是理想的

220
00:06:32,746 --> 0:06:34,186
它可以显示任何东西 但

221
00:06:34,186 --> 0:06:35,666
不特别首选任何东西

222
00:06:35,856 --> 0:06:36,656
这是有道理的

223
00:06:36,656 --> 0:06:38,206
这是我的主要场景 

224
00:06:38,206 --> 0:06:39,446
在这里我进入我的 App 它

225
00:06:39,446 --> 0:06:40,426
有我的所有内容

226
00:06:41,496 --> 0:06:43,786
幸运的是 那实际上

227
00:06:43,786 --> 0:06:44,676
是创建新场景时的

228
00:06:44,676 --> 0:06:45,386
默认设置

229
00:06:45,636 --> 0:06:46,686
你的 UI 场景激活

230
00:06:46,686 --> 0:06:47,616
条件将被设置为

231
00:06:47,616 --> 0:06:50,076
允许任何内容

232
00:06:50,076 --> 0:06:52,656
但并不特别首选任何内容

233
00:06:54,146 --> 0:06:54,686
好的

234
00:06:55,156 --> 0:06:58,136
在你的右边 我们为

235
00:06:58,136 --> 0:06:59,806
Crusty 设置了一个场景

236
00:07:00,216 --> 0:07:04,056
这个场景可以显示任何

237
00:07:04,056 --> 0:07:06,276
特定的小丑的细节 但是

238
00:07:06,706 --> 0:07:07,526
用户可能会

239
00:07:07,526 --> 0:07:09,306
特别将 Crusty 与这个场景联系起来

240
00:07:09,906 --> 0:07:12,956
所以 我们应该表达

241
00:07:12,956 --> 0:07:14,676
这种关联 在我们的场景

242
00:07:14,676 --> 0:07:16,116
激活条件下 因为

243
00:07:16,116 --> 0:07:17,596
场景可以激活 且我们

244
00:07:17,596 --> 0:07:18,596
更倾向于它

245
00:07:18,596 --> 0:07:19,746
专门为 Crusty 激活

246
00:07:20,366 --> 0:07:22,986
因此 让我们根据这些

247
00:07:22,986 --> 0:07:23,946
要求 并且

248
00:07:23,946 --> 0:07:25,176
为我们的细节化的场景

249
00:07:25,176 --> 0:07:26,756
组合一些场景激活条件

250
00:07:28,006 --> 0:07:29,626
好了 现在让我们把这些打破

251
00:07:30,806 --> 0:07:32,206
对于这个场景 我们只想

252
00:07:32,206 --> 0:07:34,826
激活与 Crusty 有关的场景

253
00:07:34,936 --> 0:07:36,076
所以我们只是要检查

254
00:07:36,076 --> 0:07:37,426
传入的目标内容

255
00:07:37,426 --> 0:07:39,566
标识符是否

256
00:07:39,566 --> 0:07:41,296
等于我们对 Crusty 的期望值

257
00:07:41,956 --> 0:07:44,166
很好 现在 你会注意到

258
00:07:44,166 --> 0:07:45,356
这种情况下 我们实际上对我们的预设

259
00:07:45,356 --> 0:07:47,376
和我们的首选使用了

260
00:07:47,376 --> 0:07:48,336
相同的谓词

261
00:07:48,536 --> 0:07:50,166
这是一种非常常见的模式

262
00:07:50,166 --> 0:07:51,226
你就会发现你在用这种模式

263
00:07:51,226 --> 0:07:52,376
当你想要针对特定​​内容

264
00:07:52,376 --> 0:07:53,906
定位场景时

265
00:07:54,686 --> 0:07:56,696
当然 在这里我们可以接受任何其他小丑

266
00:07:56,836 --> 0:07:58,026
这只是一个细节化场景

267
00:07:58,886 --> 0:08:00,506
但如果我收到通知

268
00:07:58,886 --> 0:08:00,506
但如果我收到通知

269
00:08:00,506 --> 0:08:01,366
我希望它能够

270
00:08:01,366 --> 0:08:03,276
准确定位到 Crusty 的所在地

271
00:08:04,736 --> 0:08:07,746
很好 那么 让我们讨论一下

272
00:08:07,746 --> 0:08:09,506
在设置这些谓词时会发生什么

273
00:08:10,596 --> 0:08:12,236
当我在场景激活条件下

274
00:08:12,236 --> 0:08:13,256
设置 Crusty 谓词时

275
00:08:13,256 --> 0:08:16,416
系统将打包这些谓词

276
00:08:16,416 --> 0:08:18,656
并将它们发送到操作系统中的其他位置

277
00:08:20,066 --> 0:08:21,336
这对 NS 谓词

278
00:08:21,336 --> 0:08:22,786
在场景激活条件下

279
00:08:22,786 --> 0:08:24,336
如何使用产生了一些影响

280
00:08:24,336 --> 0:08:27,686
我现在想对它们进行讨论

281
00:08:27,916 --> 0:08:29,426
场景激活条件对

282
00:08:29,426 --> 0:08:30,966
使用 NS 谓词

283
00:08:31,006 --> 0:08:31,736
有三个限制

284
00:08:32,346 --> 0:08:35,976
首先 不允许基于块的谓词

285
00:08:36,806 --> 0:08:38,265
遗憾的是 我们无法

286
00:08:38,265 --> 0:08:39,196
在正在运行的 App 中

287
00:08:39,196 --> 0:08:41,025
打包代码并将其发送到

288
00:08:41,025 --> 0:08:42,606
系统的其他部分

289
00:08:43,696 --> 0:08:46,896
第二 不允许使用基于

290
00:08:46,896 --> 0:08:47,806
正则表达式的谓词

291
00:08:48,296 --> 0:08:49,526
我们不能使用它们

292
00:08:49,526 --> 0:08:50,816
是因为它们可能会

293
00:08:50,816 --> 0:08:51,756
在评估场景谓词时

294
00:08:51,756 --> 0:08:54,316
引入不确定数量的时间

295
00:08:55,016 --> 0:08:55,936
我们鼓励你查看

296
00:08:55,936 --> 0:08:56,836
类似的运算符

297
00:08:56,986 --> 0:08:58,726
它事实上是 NS 谓词的 glob

298
00:08:58,726 --> 0:09:00,006
运算符 它应该

299
00:08:58,726 --> 0:09:00,006
运算符 它应该

300
00:09:00,006 --> 0:09:00,916
帮助你做你可能想做的

301
00:09:00,916 --> 0:09:03,196
所有种类的通配符匹配

302
00:09:03,456 --> 0:09:05,076
话说到这 如果你

303
00:09:05,076 --> 0:09:07,626
对如何使用正则表达式谓词

304
00:09:07,626 --> 0:09:08,696
有独特的想法

305
00:09:08,696 --> 0:09:12,306
欢迎使用反馈助手 并告知我们你的想法

306
00:09:12,576 --> 0:09:14,000
我们非常想听到这些想法

307
00:09:15,076 --> 0:09:17,576
最后 NS 谓词可以引用的

308
00:09:17,576 --> 0:09:19,636
唯一关键路径是“SELF”

309
00:09:20,116 --> 0:09:21,476
也就是说 你不会

310
00:09:21,476 --> 0:09:24,706
根据字符串长度

311
00:09:24,746 --> 0:09:27,746
或目标内容标识符的内容

312
00:09:27,746 --> 0:09:29,996
设置场景激活所要求的谓词

313
00:09:30,606 --> 0:09:32,136
我们希望你将会

314
00:09:32,136 --> 0:09:32,976
使用的真实内容

315
00:09:32,976 --> 0:09:33,826
放在你的模型中

316
00:09:34,346 --> 0:09:37,026
接下来 让我们看一下

317
00:09:37,026 --> 0:09:38,706
另一个示例

318
00:09:38,706 --> 0:09:40,996
了解我们常用的 App 架构的

319
00:09:40,996 --> 0:09:42,116
场景激活条件

320
00:09:42,686 --> 0:09:45,116
让我们来谈谈一个选项卡式

321
00:09:45,116 --> 0:09:46,636
App 它有点像 Safari 浏览器

322
00:09:47,586 --> 0:09:48,696
你会看到 Safari 浏览器在这里

323
00:09:48,726 --> 0:09:50,786
打开了两个标签 每个标签类似于

324
00:09:50,786 --> 0:09:51,856
它们自己的文档

325
00:09:52,716 --> 0:09:53,756
我们应该考虑

326
00:09:53,756 --> 0:09:55,046
每个标签 因为它们是

327
00:09:55,046 --> 0:09:56,386
自己的文档 同时它们有

328
00:09:56,386 --> 0:09:58,036
自己的目标内容标识符

329
00:09:58,396 --> 0:10:00,586
但请注意 如果我们将

330
00:09:58,396 --> 0:10:00,586
但请注意 如果我们将

331
00:10:00,586 --> 0:10:01,846
其中两个目标内容标识符

332
00:10:01,846 --> 0:10:03,646
显示在屏幕上 并且我们希望将其设置为

333
00:10:03,646 --> 0:10:05,666
我们首选的场景激活条件

334
00:10:05,666 --> 0:10:07,816
那么我们将如何做到这一点

335
00:10:08,616 --> 0:10:11,766
首先 让我们检查一下预制的谓词

336
00:10:13,956 --> 0:10:14,806
这非常简单

337
00:10:15,146 --> 0:10:16,106
基于文档的 App 通常可以

338
00:10:16,106 --> 0:10:17,416
在 App 中打开任何

339
00:10:17,416 --> 0:10:18,666
类型的文档

340
00:10:19,046 --> 0:10:21,316
因此 为了对其进行编码 我们实际上

341
00:10:21,316 --> 0:10:22,676
在此使用始终为“true”的谓词

342
00:10:22,676 --> 0:10:24,306
来描述任何场景

343
00:10:24,306 --> 0:10:26,296
都可以显示传递给它的任何内容

344
00:10:26,786 --> 0:10:28,316
它更会首选什么样的内容

345
00:10:28,806 --> 0:10:31,286
因为这个 UI 有多个

346
00:10:31,286 --> 0:10:32,616
选项卡 所以这就很合理 我们

347
00:10:32,616 --> 0:10:33,706
使用类似复合谓词的东西

348
00:10:33,706 --> 0:10:35,886
来收集其中的

349
00:10:35,936 --> 0:10:37,496
所有子预测值

350
00:10:37,496 --> 0:10:39,096
然后我们将在

351
00:10:39,096 --> 0:10:40,306
场景激活条件下使用它

352
00:10:41,566 --> 0:10:44,016
很好 好了 想要了解更多信息

353
00:10:44,196 --> 0:10:46,176
请访问 developer.apple.com

354
00:10:46,256 --> 0:10:47,436
有我们所有的幻灯片和

355
00:10:47,436 --> 0:10:48,606
笔记信息 你可以去那里

356
00:10:48,606 --> 0:10:49,956
获取更多有关信息

357
00:10:50,436 --> 0:10:53,386
另外 真诚地感谢你们的到来

358
00:10:53,426 --> 0:10:55,036
这是一次伟大的 WWDC

359
00:10:55,036 --> 0:10:56,166
我们已经迫不及待想看到

360
00:10:56,166 --> 0:10:58,106
你们会用这些新 API 做出什么

361
00:10:58,306 --> 0:10:59,096
非常感谢你们

362
00:11:00,508 --> 0:11:02,508
[掌声]
