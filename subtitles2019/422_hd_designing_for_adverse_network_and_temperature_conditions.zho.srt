1
00:00:01,176 --> 0:00:04,500
[音乐]

2
00:00:11,696 --> 0:00:12,696
&gt;&gt; 晚上好

3
00:00:14,066 --> 0:00:16,136
欢迎你们参加主题为

4
00:00:16,136 --> 0:00:17,856
“针对恶劣的网络和

5
00:00:18,716 --> 0:00:19,986
无论你是刚开始开发你的第一个 App

6
00:00:19,986 --> 0:00:21,536
或者已经是一个

7
00:00:21,536 --> 0:00:23,336
经验丰富的 App 开发者

8
00:00:23,336 --> 0:00:25,036
我们都希望你的设计

9
00:00:25,036 --> 0:00:26,136
具有世界级的体验

10
00:00:27,016 --> 0:00:28,366
你的 App 有潜力

11
00:00:28,366 --> 0:00:30,136
可以被数百万人

12
00:00:30,136 --> 0:00:31,626
在许多不同的情况下使用

13
00:00:32,566 --> 0:00:34,526
其中许多人没有使用

14
00:00:34,526 --> 0:00:37,106
超高速的 4G 网络

15
00:00:37,106 --> 0:00:38,806
一些人可能身处更炎热的环境中

16
00:00:39,966 --> 0:00:41,166
我们做了一定程度的测试

17
00:00:41,196 --> 0:00:43,346
但是你是否做了足够的工作

18
00:00:43,346 --> 0:00:44,806
来了解那些用户

19
00:00:44,806 --> 0:00:46,506
如何与你的 App 进行交互

20
00:00:46,506 --> 0:00:48,346
如果你做了这些

21
00:00:48,346 --> 0:00:51,146
你又是否提供了最好的体验

22
00:00:52,326 --> 0:00:54,266
优秀的 App

23
00:00:54,326 --> 0:00:55,436
即使在具有挑战性的现实环境中

24
00:00:55,436 --> 0:00:57,006
也能很好地工作

25
00:00:57,006 --> 0:00:58,496
而做到这一点在设计层面上是比较困难的

26
00:00:59,046 --> 0:01:00,396
这就是为什么

27
00:00:59,046 --> 0:01:00,396
这就是为什么

28
00:01:00,396 --> 0:01:02,046
我们在这里与你分享一些技巧

29
00:01:02,086 --> 0:01:03,856
以及 Xcode 中全新的工具来实现它

30
00:01:04,366 --> 0:01:05,215
我是 Alex Kara

31
00:01:05,596 --> 0:01:06,546
&gt;&gt; 我是 Ilya Veygman

32
00:01:07,206 --> 0:01:08,446
我们致力于提升

33
00:01:08,446 --> 0:01:10,196
iOS 系统的性能

34
00:01:10,196 --> 0:01:11,626
使它能在现实世界中

35
00:01:11,626 --> 0:01:13,106
良好 可靠且一致地运行

36
00:01:13,826 --> 0:01:15,286
iOS 会对不断变化的网络

37
00:01:15,286 --> 0:01:16,866
和温度条件做出反应

38
00:01:16,866 --> 0:01:18,386
我们希望你的 App

39
00:01:18,386 --> 0:01:20,036
能够同样做到这点

40
00:01:20,036 --> 0:01:21,156
这样你就能以你设计的方式

41
00:01:21,376 --> 0:01:22,436
体验你的 App

42
00:01:23,856 --> 0:01:24,956
&gt;&gt; 今天 我们要谈论

43
00:01:24,956 --> 0:01:25,806
一些令人兴奋的内容

44
00:01:26,146 --> 0:01:28,116
首先 我们将深入探讨

45
00:01:28,116 --> 0:01:29,746
真实世界的设备条件

46
00:01:29,746 --> 0:01:31,906
以及它们与设计过程的契合之处

47
00:01:33,066 --> 0:01:34,906
接下来 我们将向你展示

48
00:01:34,906 --> 0:01:36,286
如何使用新的和现有的开发者工具

49
00:01:36,466 --> 0:01:37,866
改进 App

50
00:01:38,186 --> 0:01:40,186
在不同网络连接下的行为

51
00:01:41,366 --> 0:01:42,846
最后 我们将展示

52
00:01:42,846 --> 0:01:44,506
一个全新的方法来优化

53
00:01:44,506 --> 0:01:46,666
你的 App 在不同温度条件下的性能

54
00:01:52,016 --> 0:01:54,166
&gt;&gt; 我想让你想象一下

55
00:01:54,166 --> 0:01:55,736
你如何以及在哪里使用 iOS

56
00:01:56,226 --> 0:01:57,646
你不只是在家里

57
00:01:57,646 --> 0:01:59,176
或办公室使用你的设备

58
00:02:00,156 --> 0:02:01,176
你到哪里都带着它们

59
00:02:01,636 --> 0:02:04,826
去海滩 去公园

60
00:02:04,826 --> 0:02:06,736
在地铁上 在汽车上

61
00:02:06,736 --> 0:02:07,336
进行长途旅行

62
00:02:08,716 --> 0:02:09,826
这些地方可能伴随着

63
00:02:09,826 --> 0:02:12,146
充足的阳光或热量

64
00:02:12,146 --> 0:02:12,926
抑或是很弱的网络连接

65
00:02:14,106 --> 0:02:15,186
现在 想象一下你的用户

66
00:02:15,966 --> 0:02:17,326
他们很有可能

67
00:02:17,326 --> 0:02:19,106
会在这样的环境中使用你的 App

68
00:02:19,606 --> 0:02:20,746
你需要考虑如何将其

69
00:02:20,746 --> 0:02:22,356
与你的开发

70
00:02:22,356 --> 0:02:23,736
和测试环境进行比较

71
00:02:25,106 --> 0:02:26,896
你可能正在办公室

72
00:02:26,976 --> 0:02:28,976
或实验室中进行大部分

73
00:02:28,976 --> 0:02:31,116
或所有的开发和测试

74
00:02:31,536 --> 0:02:32,796
这些场所都具有

75
00:02:32,796 --> 0:02:34,066
快速 可靠的网络连接

76
00:02:34,066 --> 0:02:35,506
和气候控制

77
00:02:35,506 --> 0:02:37,326
这无疑是一件好事

78
00:02:37,326 --> 0:02:38,746
我们都想要一个

79
00:02:38,746 --> 0:02:39,216
可控的工作环境

80
00:02:40,526 --> 0:02:41,416
但这些情况

81
00:02:41,416 --> 0:02:42,846
与世界各地的用户

82
00:02:42,846 --> 0:02:44,376
在与你的 App 交互时

83
00:02:44,376 --> 0:02:45,986
所面临的情况并不相同

84
00:02:46,026 --> 0:02:47,176
这种差异可能会使得你

85
00:02:47,176 --> 0:02:48,226
在看到用户

86
00:02:48,226 --> 0:02:49,736
对你的 App 发出抱怨时

87
00:02:49,736 --> 0:02:51,996
将其视为一次性的故障或特例

88
00:02:52,556 --> 0:02:55,686
除此之外 这些

89
00:02:55,686 --> 0:02:56,656
设备还可能进行多任务处理

90
00:02:57,696 --> 0:02:58,996
你的用户可能正坐在

91
00:02:58,996 --> 0:03:00,536
汽车的副驾驶座位上

92
00:02:58,996 --> 0:03:00,536
汽车的副驾驶座位上

93
00:03:00,536 --> 0:03:01,766
一边播放音乐

94
00:03:01,766 --> 0:03:03,196
一边通过无线网络连接到 CarPlay

95
00:03:03,196 --> 0:03:03,756
并获知转弯方向

96
00:03:04,706 --> 0:03:05,636
他们可能在咖啡店

97
00:03:06,176 --> 0:03:07,816
给 iPhone 充电

98
00:03:07,816 --> 0:03:09,526
并将其作为 Mac 的个人热点

99
00:03:10,116 --> 0:03:11,496
或者 他们可能在 App

100
00:03:11,496 --> 0:03:12,726
运行 3D 渲染

101
00:03:12,726 --> 0:03:14,316
或其他复杂的后台处理时

102
00:03:14,316 --> 0:03:15,686
使用 ARKit

103
00:03:15,686 --> 0:03:17,506
通过摄像头识别 App 中的对象

104
00:03:18,116 --> 0:03:21,176
这一切告诉我们

105
00:03:21,176 --> 0:03:22,736
所有这些场景都能造成

106
00:03:22,736 --> 0:03:25,096
你的设备更高负载地工作并获得热量

107
00:03:26,486 --> 0:03:27,706
虽然你的 App 的功能

108
00:03:27,706 --> 0:03:28,906
可能在隔离的测试环境中

109
00:03:28,996 --> 0:03:30,976
运行得很好

110
00:03:30,976 --> 0:03:32,506
但是你是否考虑过

111
00:03:32,506 --> 0:03:33,676
在这些非常真实和常见的例子中

112
00:03:33,676 --> 0:03:35,496
App 的性能可能会有所不同

113
00:03:36,286 --> 0:03:38,326
对用户来说的

114
00:03:38,326 --> 0:03:40,536
一个潜在痛点是

115
00:03:40,536 --> 0:03:41,866
他们一直在试图与一个

116
00:03:41,866 --> 0:03:43,556
只针对你的工作环境而设计的 App 进行交互

117
00:03:44,456 --> 0:03:45,426
他们会对此有怎样的意见

118
00:03:46,456 --> 0:03:48,806
&gt;&gt; 我们已经注意到

119
00:03:48,806 --> 0:03:50,116
App Store 上的一些评论

120
00:03:50,116 --> 0:03:52,676
提到了在某些情况下 App 低于预期的性能

121
00:03:53,276 --> 0:03:54,686
很棒的 App

122
00:03:54,686 --> 0:03:55,836
但有时却不够好用

123
00:03:56,586 --> 0:03:57,706
无论是在火车上

124
00:03:58,146 --> 0:03:59,956
炎热的地方

125
00:03:59,956 --> 0:04:02,076
还是在公路旅行中

126
00:03:59,956 --> 0:04:02,076
还是在公路旅行中

127
00:04:02,076 --> 0:04:03,546
这可能是你的用户

128
00:04:03,546 --> 0:04:04,856
记住你的 App 的最重要的方式

129
00:04:04,856 --> 0:04:06,206
他们可能不想在经历了

130
00:04:06,206 --> 0:04:07,996
一场糟糕的体验后再次使用它

131
00:04:08,636 --> 0:04:10,176
我们知道

132
00:04:10,176 --> 0:04:11,386
当人们在阳光直射下

133
00:04:11,386 --> 0:04:13,206
或者在隧道中使用手机时

134
00:04:13,206 --> 0:04:14,436
他们希望你的 App 能够继续工作

135
00:04:14,436 --> 0:04:17,526
我们也知道人们并不总是处于

136
00:04:17,526 --> 0:04:18,606
最佳的网络环境中

137
00:04:19,606 --> 0:04:20,896
如果你的开发条件并不具有代表性

138
00:04:20,896 --> 0:04:22,416
或者是一个净室条件

139
00:04:22,416 --> 0:04:24,306
那么这一点就很容易被忽略

140
00:04:25,476 --> 0:04:26,926
所以我们想要

141
00:04:26,956 --> 0:04:28,496
把这些情况考虑进去

142
00:04:28,496 --> 0:04:32,266
我们希望你能够提供一个一致的

143
00:04:32,266 --> 0:04:33,086
而不是低于预期的使用体验

144
00:04:33,906 --> 0:04:35,246
你会在你的反馈中

145
00:04:35,306 --> 0:04:37,226
发现身处 3G 网络环境中的用户

146
00:04:37,226 --> 0:04:38,456
或者在你的 App 中发现一个问题

147
00:04:38,456 --> 0:04:41,386
并注意到你的设备温度升高

148
00:04:42,066 --> 0:04:43,246
你可能会认为

149
00:04:43,246 --> 0:04:44,826
这些都是预期中的不良行为

150
00:04:44,856 --> 0:04:47,316
但这些并不是极端情况

151
00:04:47,706 --> 0:04:49,046
这些其实都是你和用户

152
00:04:49,046 --> 0:04:51,036
将要面对的真实情况

153
00:04:51,626 --> 0:04:52,766
为了更好地处理它们

154
00:04:52,766 --> 0:04:56,096
你将需要正确的开发者工具

155
00:04:56,176 --> 0:04:57,876
以及更好地应用它们的过程

156
00:04:58,186 --> 0:05:00,316
让我们从网络连接开始

157
00:04:58,186 --> 0:05:00,316
让我们从网络连接开始

158
00:05:00,966 --> 0:05:03,256
如果你将网络

159
00:05:03,586 --> 0:05:06,406
用于 App 中的主要功能或后台工作

160
00:05:07,186 --> 0:05:08,426
那么你可能已经在代码中决定

161
00:05:08,426 --> 0:05:10,086
在所使用的网络类型中

162
00:05:10,086 --> 0:05:11,026
进行相应的操作

163
00:05:12,096 --> 0:05:13,266
如果网络通话时间过长

164
00:05:13,266 --> 0:05:14,846
你可能会选择暂停

165
00:05:15,846 --> 0:05:17,766
对于你的用户

166
00:05:17,766 --> 0:05:19,286
他们中的一些人可能正在使用 3G 网络

167
00:05:20,186 --> 0:05:21,786
如果他们的现实情况确实如此

168
00:05:21,786 --> 0:05:23,096
那么即使下载需要更长的时间

169
00:05:23,096 --> 0:05:25,306
他们也会很乐意等待下载完成

170
00:05:26,436 --> 0:05:28,046
但你对于暂停的决定

171
00:05:28,756 --> 0:05:30,546
并没有尊重他们的意愿

172
00:05:31,126 --> 0:05:32,236
即使他们很乐意等待

173
00:05:32,236 --> 0:05:33,776
但当他们发现 App 没有任何进展时

174
00:05:33,776 --> 0:05:34,736
他们肯定会感到惊讶

175
00:05:35,246 --> 0:05:37,066
这些决定累积起来

176
00:05:37,116 --> 0:05:39,066
就会成为用户体验的一部分

177
00:05:42,836 --> 0:05:45,416
当用户启动你的 App 时

178
00:05:45,416 --> 0:05:48,026
他们不希望看到网络微调器

179
00:05:48,026 --> 0:05:50,116
不是持续稳定地下载

180
00:05:50,116 --> 0:05:51,236
就是完全地停止下载

181
00:05:52,206 --> 0:05:55,406
这可能是你在 App 启动期间

182
00:05:55,406 --> 0:05:56,686
进行网络调用时提供的体验

183
00:05:56,936 --> 0:05:58,586
但如果你在 LTE 上

184
00:05:58,586 --> 0:06:00,416
或者高速 Wi-Fi 上运行 App 时

185
00:05:58,586 --> 0:06:00,416
或者高速 Wi-Fi 上运行 App 时

186
00:06:00,416 --> 0:06:01,906
即使是在进行性能测试

187
00:06:01,906 --> 0:06:02,816
你也会觉得结果不错

188
00:06:03,296 --> 0:06:04,796
一段时间后

189
00:06:04,796 --> 0:06:06,296
特别是如果有其他的 App

190
00:06:06,296 --> 0:06:08,166
能够在相同的条件下正常运行

191
00:06:08,376 --> 0:06:09,766
那么你的用户可能会对这个界面十分厌倦

192
00:06:09,766 --> 0:06:11,976
甚至完全放弃你的 App

193
00:06:12,796 --> 0:06:13,916
你的 App 应该

194
00:06:13,916 --> 0:06:15,416
在即使没有网络连接的条件下

195
00:06:15,416 --> 0:06:16,206
依然可以正常启动

196
00:06:16,746 --> 0:06:19,266
如果我想用一个

197
00:06:19,316 --> 0:06:21,126
提前关闭的 App

198
00:06:21,126 --> 0:06:22,966
获取重要新闻

199
00:06:22,966 --> 0:06:24,636
我可能会注意到

200
00:06:24,636 --> 0:06:25,916
在较慢的网络连接上 内容无法加载

201
00:06:26,426 --> 0:06:28,086
如果我使用其他 App

202
00:06:28,086 --> 0:06:29,546
并注意到它们不会在

203
00:06:29,546 --> 0:06:31,236
同样的情况下失败 那么我会认为

204
00:06:31,236 --> 0:06:33,566
这个 App 很难使用 或者有 Bug

205
00:06:34,406 --> 0:06:35,926
如果你在测试中

206
00:06:35,926 --> 0:06:37,726
标记出网络调用

207
00:06:37,726 --> 0:06:39,486
或显式跳过它们

208
00:06:39,486 --> 0:06:41,376
那么你的开发或测试就有可能跳过这种情况

209
00:06:42,556 --> 0:06:43,756
因此 你应该查看一下

210
00:06:43,756 --> 0:06:45,236
Xcode 的 Scheme 编辑器

211
00:06:45,556 --> 0:06:46,526
看看是否设置了

212
00:06:46,526 --> 0:06:48,906
用于单元测试的环境变量

213
00:06:50,106 --> 0:06:51,066
当你将 App 作为单元

214
00:06:51,066 --> 0:06:52,886
测试主机运行时

215
00:06:52,886 --> 0:06:54,506
你可能会使用它来防止在

216
00:06:54,506 --> 0:06:56,226
App 启动期间发生不必要的工作

217
00:06:56,816 --> 0:06:58,656
对于单元测试

218
00:06:58,656 --> 0:06:59,976
为了优化执行速度

219
00:06:59,976 --> 0:07:01,716
你可以跳过一些工作

220
00:06:59,976 --> 0:07:01,716
你可以跳过一些工作

221
00:07:01,716 --> 0:07:03,206
比如启动后台网络请求

222
00:07:03,206 --> 0:07:05,006
但是你需要确保

223
00:07:05,006 --> 0:07:05,966
你仍然在其他地方

224
00:07:05,966 --> 0:07:06,886
处理这些情况

225
00:07:08,196 --> 0:07:11,196
XC 测试将等到 App 委托

226
00:07:11,196 --> 0:07:12,756
完成启动方法返回后

227
00:07:13,046 --> 0:07:14,666
才开始运行测试

228
00:07:15,336 --> 0:07:16,386
如果你在这里

229
00:07:16,386 --> 0:07:18,066
使用环境变量

230
00:07:18,066 --> 0:07:19,356
你需要检查你跳过的代码

231
00:07:19,356 --> 0:07:21,016
对于单元测试的正常运行

232
00:07:21,076 --> 0:07:21,926
是否确实不是必需的

233
00:07:22,796 --> 0:07:23,666
如果你正在标记

234
00:07:23,666 --> 0:07:25,166
或完全跳过网络调用

235
00:07:25,486 --> 0:07:26,306
那么你需要确保

236
00:07:26,306 --> 0:07:27,966
在开发过程的

237
00:07:27,966 --> 0:07:30,406
其他地方包含了这些情况

238
00:07:30,406 --> 0:07:32,226
以及实际的网络类型

239
00:07:32,226 --> 0:07:33,776
为此 我们需要考虑

240
00:07:33,776 --> 0:07:35,196
什么才是一个好的测试模型

241
00:07:35,596 --> 0:07:39,436
在本周早些时候的

242
00:07:39,436 --> 0:07:40,966
测试和 Xcode 会议上

243
00:07:40,966 --> 0:07:42,336
我们介绍了 Pyramid 模型

244
00:07:42,336 --> 0:07:43,956
以及它是如何构建

245
00:07:43,956 --> 0:07:45,856
可维护的自动化测试套件

246
00:07:46,966 --> 0:07:48,596
一个好的测试模型平衡了

247
00:07:48,676 --> 0:07:50,596
完整性 质量和执行速度

248
00:07:50,596 --> 0:07:52,886
并由大量集中的

249
00:07:52,886 --> 0:07:55,766
单元测试组成

250
00:07:56,146 --> 0:07:57,406
这些地方可以进行优化

251
00:07:57,406 --> 0:07:58,936
以获得快速的执行时间

252
00:07:58,936 --> 0:08:00,566
因为我们想在这里隔离特性

253
00:07:58,936 --> 0:08:00,566
因为我们想在这里隔离特性

254
00:08:00,566 --> 0:08:02,796
所以在净室条件下

255
00:08:02,796 --> 0:08:04,516
运行这些是没有问题的

256
00:08:05,346 --> 0:08:06,416
你可能正在使用这些

257
00:08:06,416 --> 0:08:07,526
来寻找函数回归

258
00:08:08,876 --> 0:08:10,196
还有一些

259
00:08:10,196 --> 0:08:13,606
针对 App 中离散类集的

260
00:08:13,606 --> 0:08:15,676
集成测试

261
00:08:15,846 --> 0:08:17,706
集成测试检查

262
00:08:17,706 --> 0:08:19,146
App 的子系统

263
00:08:19,146 --> 0:08:21,176
是否从用户的角度协同工作

264
00:08:22,176 --> 0:08:23,556
由于这些测试结果

265
00:08:23,556 --> 0:08:25,026
更紧密地反映实际的使用情况

266
00:08:25,026 --> 0:08:27,876
因此它们可能会增加方差

267
00:08:28,196 --> 0:08:29,356
因此 你应该准备好

268
00:08:29,356 --> 0:08:30,736
更深入地分类失败原因

269
00:08:30,736 --> 0:08:32,596
而不是仅仅认为

270
00:08:32,596 --> 0:08:34,166
这些测试是不可靠的

271
00:08:34,746 --> 0:08:38,976
最后 该套件还附带了

272
00:08:38,976 --> 0:08:40,775
用户界面测试或 UI 测试

273
00:08:40,775 --> 0:08:42,876
这些测试以一种

274
00:08:42,946 --> 0:08:44,256
非常类似于用户与 App

275
00:08:44,256 --> 0:08:46,176
交互的方式运行 App

276
00:08:46,396 --> 0:08:48,226
在这里 你可以验证

277
00:08:48,226 --> 0:08:49,586
App 的所有部分

278
00:08:49,586 --> 0:08:51,346
都已连接起来

279
00:08:51,346 --> 0:08:52,496
并与诸如网络的外部资源

280
00:08:52,496 --> 0:08:53,696
进行了正确的交互

281
00:08:54,336 --> 0:08:56,916
这就是最有代表性的测试

282
00:08:57,856 --> 0:09:00,526
与此同时 这可能是你在结果中

283
00:08:57,856 --> 0:09:00,526
与此同时 这可能是你在结果中

284
00:09:00,526 --> 0:09:02,456
看到最大方差的地方

285
00:09:02,456 --> 0:09:04,106
正因为这样

286
00:09:04,226 --> 0:09:06,246
你可能会更倾向于关注单元测试

287
00:09:06,246 --> 0:09:08,826
这可能会导致

288
00:09:08,826 --> 0:09:10,086
你对 App 的行为

289
00:09:10,086 --> 0:09:11,636
产生错误的安全感

290
00:09:12,726 --> 0:09:14,406
如果应用得当

291
00:09:14,406 --> 0:09:17,026
这个测试模型可以让你全面地了解

292
00:09:17,026 --> 0:09:18,556
App 的代码库是如何工作的

293
00:09:19,656 --> 0:09:20,896
这对于测试覆盖率非常好

294
00:09:20,896 --> 0:09:22,376
但是你需要注意

295
00:09:22,596 --> 0:09:25,356
在集成和 UI 套件中

296
00:09:25,646 --> 0:09:27,526
可能遗漏的测试

297
00:09:28,676 --> 0:09:30,026
将你的注意力

298
00:09:30,026 --> 0:09:31,286
完全放在单元测试上

299
00:09:31,286 --> 0:09:32,886
意味着在净室条件下测试

300
00:09:32,886 --> 0:09:34,766
虽然这有助于你找到回归

301
00:09:34,766 --> 0:09:36,046
但是也可能导致你忽略了

302
00:09:36,046 --> 0:09:37,316
你可以为用户的实际行为

303
00:09:37,356 --> 0:09:39,016
所进行的改进

304
00:09:39,636 --> 0:09:44,556
人们很容易养成

305
00:09:44,556 --> 0:09:46,106
净室测试的习惯

306
00:09:46,356 --> 0:09:47,416
因为它给了我们许多

307
00:09:47,416 --> 0:09:48,746
我们喜欢看到的测试品质

308
00:09:48,996 --> 0:09:51,586
可重复的结果 低方差

309
00:09:51,966 --> 0:09:53,296
这些都意味着

310
00:09:53,376 --> 0:09:54,416
测试片的减少

311
00:09:55,276 --> 0:09:56,586
我们希望你的 App 的

312
00:09:56,586 --> 0:09:57,496
功能和性能优势

313
00:09:57,496 --> 0:09:58,866
能够转化为现实的情况

314
00:09:58,866 --> 0:10:00,016
因此你将需要

315
00:09:58,866 --> 0:10:00,016
因此你将需要

316
00:10:00,056 --> 0:10:01,216
具有这些特性的

317
00:10:01,216 --> 0:10:01,966
正确的开发工具

318
00:10:04,216 --> 0:10:05,946
方差可能是反映现实的一个结果

319
00:10:05,946 --> 0:10:07,476
与你在测试和分类

320
00:10:07,476 --> 0:10:09,176
源代码中那些

321
00:10:09,176 --> 0:10:10,876
棘手的边界情况时相比

322
00:10:10,876 --> 0:10:12,096
它应该得到同样的关注

323
00:10:13,216 --> 0:10:14,636
当你将 Pyramid 模型

324
00:10:14,816 --> 0:10:17,416
应用于开发工作流的不同部分时

325
00:10:17,416 --> 0:10:19,246
你将找到正确的位置

326
00:10:19,246 --> 0:10:22,636
创建为你和你的团队工作的质量检查点

327
00:10:22,636 --> 0:10:24,106
比如确保在你合并之前通过

328
00:10:24,156 --> 0:10:25,766
所有的单元测试

329
00:10:25,766 --> 0:10:26,946
这样你就可以尽早找到回归

330
00:10:28,016 --> 0:10:29,386
尽管集成测试和 UI 测试

331
00:10:29,386 --> 0:10:32,286
可能不适合作为早期检查点

332
00:10:32,286 --> 0:10:33,556
因为在实际环境中

333
00:10:33,906 --> 0:10:35,066
会产生方差

334
00:10:35,066 --> 0:10:36,856
但它们必须在你的进程中

335
00:10:36,856 --> 0:10:38,086
存有一席之地

336
00:10:38,906 --> 0:10:40,006
如果你确保

337
00:10:40,006 --> 0:10:41,226
你在适当的时间运行它们

338
00:10:41,556 --> 0:10:42,896
你将能够描述

339
00:10:42,896 --> 0:10:44,356
你的 App 的行为

340
00:10:44,356 --> 0:10:45,916
并找到你可以

341
00:10:45,916 --> 0:10:47,976
进行的改进和行为进步

342
00:10:48,876 --> 0:10:50,266
现在 我们已经为

343
00:10:50,266 --> 0:10:51,656
实际情况测试腾出了空间

344
00:10:51,656 --> 0:10:53,016
你可以回头继续并将注意力集中在

345
00:10:53,016 --> 0:10:54,186
你之前可能跳过的测试上

346
00:10:54,186 --> 0:10:56,546
比如网络测试

347
00:10:57,916 --> 0:10:59,376
我们已经看到了一些

348
00:10:59,376 --> 0:11:02,276
实现这一点的方法

349
00:10:59,376 --> 0:11:02,276
实现这一点的方法

350
00:11:02,276 --> 0:11:03,446
比如使用定制路由器来调节网络基础设施

351
00:11:03,446 --> 0:11:05,166
如果处理得当

352
00:11:05,166 --> 0:11:07,156
这确实可以取得成功

353
00:11:08,076 --> 0:11:09,416
但是这也很难操作

354
00:11:09,416 --> 0:11:11,036
尤其如果你是一个

355
00:11:11,036 --> 0:11:12,476
刚刚开始起步的开发者

356
00:11:13,406 --> 0:11:14,676
即使你有一个良好的测试模型

357
00:11:14,736 --> 0:11:16,636
和对分流的强烈关注

358
00:11:16,636 --> 0:11:18,086
为了进行现实情况的测试

359
00:11:18,336 --> 0:11:20,536
你也需要优秀 可靠的开发工具

360
00:11:21,526 --> 0:11:23,666
因此 如果你使用 macOS

361
00:11:23,666 --> 0:11:24,886
开发你的 App

362
00:11:24,886 --> 0:11:26,316
我们建议你下载和使用

363
00:11:26,316 --> 0:11:27,866
Network Link Conditioner.prefPane

364
00:11:28,476 --> 0:11:29,636
你可以使用它

365
00:11:29,636 --> 0:11:31,356
来改变网络类型

366
00:11:31,356 --> 0:11:32,976
并查看你的 App 在

367
00:11:33,056 --> 0:11:34,766
3G 或 EDGE 等网络下的行为

368
00:11:37,636 --> 0:11:39,386
在 iOS 上

369
00:11:39,386 --> 0:11:41,226
Network Link Conditioner 可以在

370
00:11:41,226 --> 0:11:43,116
你的用于开发的设备中的

371
00:11:43,116 --> 0:11:44,746
开发者设置菜单中找到

372
00:11:45,336 --> 0:11:46,856
从这里开始

373
00:11:46,856 --> 0:11:48,796
你可以在争用预置

374
00:11:48,796 --> 0:11:50,516
或更具代表性的预置之间更改网络类型

375
00:11:50,936 --> 0:11:52,196
并为它们设计 App

376
00:11:52,336 --> 0:11:53,756
而不需要设置或更改

377
00:11:53,756 --> 0:11:55,236
网络基础设施

378
00:11:56,176 --> 0:11:57,446
这是一个可靠

379
00:11:57,446 --> 0:11:59,226
且可重复的设备支持的方式

380
00:11:59,486 --> 0:12:01,316
从而在不同的网络环境中运行你的 App

381
00:11:59,486 --> 0:12:01,316
从而在不同的网络环境中运行你的 App

382
00:12:02,406 --> 0:12:03,716
如果你有自定义需求

383
00:12:03,926 --> 0:12:05,356
还可以为你想要设计的

384
00:12:05,356 --> 0:12:07,236
特定类型的带宽

385
00:12:07,296 --> 0:12:09,206
包丢失和延迟

386
00:12:09,206 --> 0:12:10,966
创建自定义预置

387
00:12:11,836 --> 0:12:13,146
这对于检查 App

388
00:12:13,146 --> 0:12:15,316
在特定环境中的行为非常有用

389
00:12:15,856 --> 0:12:18,686
在 Xcode 11 中

390
00:12:18,686 --> 0:12:20,506
我们为设备和模拟器窗口

391
00:12:20,506 --> 0:12:21,856
提供了在各种不同的网络类型中

392
00:12:21,856 --> 0:12:23,806
激活的功能

393
00:12:23,806 --> 0:12:25,316
这样你就可以轻松可靠地启动

394
00:12:25,316 --> 0:12:27,226
并在设计过程中

395
00:12:27,226 --> 0:12:28,316
考虑到现实情况

396
00:12:28,796 --> 0:12:31,066
你将在窗口的下方

397
00:12:31,066 --> 0:12:33,606
看到一个新的设备状态部分

398
00:12:34,256 --> 0:12:36,736
在这里 你可以让你的设备处在

399
00:12:36,736 --> 0:12:37,636
更具代表性的状态

400
00:12:38,846 --> 0:12:40,046
如果你想要一个网络链接

401
00:12:40,256 --> 0:12:41,306
你将看到以往的所有网络类型

402
00:12:41,306 --> 0:12:42,636
以及新的配置文件

403
00:12:42,636 --> 0:12:45,076
以便你改变网络质量

404
00:12:46,436 --> 0:12:47,786
这意味着你可以

405
00:12:47,786 --> 0:12:49,706
让你的设备和 App

406
00:12:49,706 --> 0:12:51,686
在 2G 或 EDGE 3G 或 LTE

407
00:12:51,686 --> 0:12:55,356
或者不同类型的 Wi-Fi 网络上运行

408
00:12:56,046 --> 0:12:57,396
你甚至可以选择

409
00:12:57,396 --> 0:12:58,896
网络类型的质量

410
00:12:58,896 --> 0:13:01,166
比如好的 EDGE 网络

411
00:12:58,896 --> 0:13:01,166
比如好的 EDGE 网络

412
00:13:01,846 --> 0:13:03,486
人们确实在使用这样的网络连接

413
00:13:03,486 --> 0:13:05,176
所以我希望你能发现

414
00:13:05,176 --> 0:13:06,866
能帮助你查看 App

415
00:13:06,866 --> 0:13:08,606
如何与用户交互

416
00:13:08,606 --> 0:13:10,296
并寻找可以改进行为的地方

417
00:13:11,466 --> 0:13:12,546
一旦选择了

418
00:13:12,546 --> 0:13:13,826
要激活的条件

419
00:13:13,826 --> 0:13:15,176
轻点 “设备” 窗口中的 “开始”

420
00:13:16,116 --> 0:13:18,256
这些条件是系统范围内的

421
00:13:18,256 --> 0:13:19,946
所以你会发下

422
00:13:19,946 --> 0:13:21,156
一切都开始做出不同的反应

423
00:13:21,156 --> 0:13:23,346
包括你的 App

424
00:13:24,386 --> 0:13:26,246
在具有激活条件的设备上

425
00:13:26,246 --> 0:13:28,186
你将看到一个新的

426
00:13:28,186 --> 0:13:29,266
灰色状态指示器

427
00:13:31,056 --> 0:13:32,626
尽管激活一个网络类型

428
00:13:32,626 --> 0:13:34,186
会影响整个系统

429
00:13:34,396 --> 0:13:35,656
但是网络的 UI 指示器

430
00:13:35,656 --> 0:13:37,126
将保持不变

431
00:13:38,276 --> 0:13:39,316
你还应该知道

432
00:13:39,316 --> 0:13:41,106
激活的网络条件

433
00:13:41,106 --> 0:13:43,456
将是你的网络类型的上限

434
00:13:43,556 --> 0:13:45,166
你的网络性能将与现实情况下

435
00:13:45,166 --> 0:13:46,376
同等网络类型的性能持平

436
00:13:46,376 --> 0:13:47,816
并无法得到提升

437
00:13:49,516 --> 0:13:52,706
在设备中 如果你点按灰色状态图标

438
00:13:52,706 --> 0:13:54,046
你将看到一个提示符

439
00:13:54,046 --> 0:13:55,726
指示活动条件

440
00:13:55,726 --> 0:13:57,756
以及一个选项来停止该条件

441
00:13:57,756 --> 0:13:59,496
如果你的设备

442
00:13:59,496 --> 0:14:00,716
与 Xcode 断开连接

443
00:13:59,496 --> 0:14:00,716
与 Xcode 断开连接

444
00:14:00,716 --> 0:14:01,756
则该条件将自动停止

445
00:14:03,076 --> 0:14:04,426
为了向你展示

446
00:14:04,426 --> 0:14:06,026
如何使用网络连接设备条件

447
00:14:06,246 --> 0:14:07,696
来查找 App 中可以改进的地方

448
00:14:07,696 --> 0:14:09,976
我将请 Ilya 回到舞台

449
00:14:10,516 --> 0:14:12,656
[掌声]

450
00:14:13,156 --> 0:14:14,406
&gt;&gt; 我们经常预期我们的 App

451
00:14:14,406 --> 0:14:16,006
会在一个略差的网络连接中

452
00:14:16,006 --> 0:14:17,026
表现失常

453
00:14:17,056 --> 0:14:18,656
但重要的是

454
00:14:18,656 --> 0:14:19,716
你要问问自己

455
00:14:19,716 --> 0:14:21,606
这种行为是否真的有必要那么糟糕

456
00:14:22,156 --> 0:14:23,266
它能得到改善吗

457
00:14:23,626 --> 0:14:25,876
在不利或不同的网络环境下

458
00:14:25,876 --> 0:14:27,246
我们是否能取得一些进步

459
00:14:28,436 --> 0:14:30,676
这里有一个令人兴奋的示例 App

460
00:14:30,936 --> 0:14:31,876
我们可以启动它

461
00:14:31,876 --> 0:14:33,066
来查看在理想的实验室条件下

462
00:14:33,066 --> 0:14:34,856
网络连接的基本行为

463
00:14:36,016 --> 0:14:38,006
这个 App 探测

464
00:14:38,006 --> 0:14:39,636
我们为这个演示设置的端点

465
00:14:39,636 --> 0:14:40,866
从而查看连接需要的时间

466
00:14:41,646 --> 0:14:43,956
我们看到这个连接

467
00:14:43,956 --> 0:14:45,786
平均需要 150 毫秒

468
00:14:46,346 --> 0:14:48,506
我们可以把这想象成类似于

469
00:14:48,576 --> 0:14:49,756
要求安全登录

470
00:14:49,756 --> 0:14:50,866
或从网站上传输内容

471
00:14:51,606 --> 0:14:52,636
这看起来很棒

472
00:14:52,636 --> 0:14:54,516
如果我们在实验室做 UI 测试

473
00:14:54,516 --> 0:14:56,826
我们会假设一切都很顺利

474
00:14:56,826 --> 0:14:57,846
没有问题

475
00:14:58,716 --> 0:15:00,656
现在 让我们看看

476
00:14:58,716 --> 0:15:00,656
现在 让我们看看

477
00:15:00,656 --> 0:15:01,416
如果从 Xcode 设备窗口中打开

478
00:15:01,416 --> 0:15:02,466
Network Link Conditioner

479
00:15:02,466 --> 0:15:03,116
会发生什么

480
00:15:04,616 --> 0:15:07,856
在本例中

481
00:15:07,856 --> 0:15:08,846
这是一个普通的 3G 网络连接

482
00:15:10,266 --> 0:15:11,856
让我们看看现在发生了什么

483
00:15:13,436 --> 0:15:15,886
当我们再次运行探测器时

484
00:15:15,886 --> 0:15:17,746
我们看到它花费的时间更长

485
00:15:17,746 --> 0:15:19,766
在本例中

486
00:15:19,766 --> 0:15:21,476
平均超过 750 毫秒

487
00:15:22,406 --> 0:15:23,226
这并不令人惊讶

488
00:15:23,226 --> 0:15:24,676
毕竟 3G 网络

489
00:15:24,676 --> 0:15:26,326
比 LTE 或 Wi-Fi

490
00:15:26,326 --> 0:15:28,156
等网络要慢

491
00:15:29,156 --> 0:15:30,456
要注意的重要一点是

492
00:15:30,456 --> 0:15:32,436
正如我们之前所说

493
00:15:32,536 --> 0:15:34,826
这是许多用户将看到的实际网络

494
00:15:35,526 --> 0:15:36,916
我们能做些什么

495
00:15:36,916 --> 0:15:38,236
来改善他们的这种体验呢

496
00:15:39,216 --> 0:15:41,156
你可能注意到

497
00:15:41,156 --> 0:15:42,406
在运行探测器按钮上面有两个开关

498
00:15:42,406 --> 0:15:43,526
在 Optima 60NS 和

499
00:15:43,526 --> 0:15:46,206
TLS 1.3 中是禁用的

500
00:15:46,886 --> 0:15:48,426
让我们打开它们 看看会发生什么

501
00:15:48,916 --> 0:15:53,106
当我们打开它们

502
00:15:53,106 --> 0:15:54,426
并再次运行探测器时

503
00:15:54,426 --> 0:15:56,166
我们看到了一个立即的改善

504
00:15:56,166 --> 0:15:58,776
大约快了 33%

505
00:15:58,876 --> 0:16:00,826
在激活 Network Link Conditioner 后

506
00:15:58,876 --> 0:16:00,826
在激活 Network Link Conditioner 后

507
00:16:00,826 --> 0:16:01,666
简单地测试这个 App

508
00:16:01,666 --> 0:16:03,876
我们明确地看到

509
00:16:03,876 --> 0:16:04,816
当我们使用 3G 等

510
00:16:04,816 --> 0:16:06,036
速度较慢的网络

511
00:16:06,036 --> 0:16:08,266
且与 Wi-Fi 或 LTE 等速度较快的网络相比时

512
00:16:08,266 --> 0:16:10,366
出现了显著的性能损失

513
00:16:11,716 --> 0:16:13,006
这告诉我们

514
00:16:13,006 --> 0:16:14,386
我们应该考虑这些新特性

515
00:16:14,716 --> 0:16:15,956
并使用它们

516
00:16:16,046 --> 0:16:17,646
来主动地提高

517
00:16:17,816 --> 0:16:18,966
在现实的网络条件下的性能

518
00:16:21,756 --> 0:16:24,296
在运行 Network Link Conditioner 之后

519
00:16:24,296 --> 0:16:25,306
我们注意到一些

520
00:16:25,306 --> 0:16:26,966
以前并没有发现过的

521
00:16:26,966 --> 0:16:27,536
低于预期的性能

522
00:16:28,246 --> 0:16:29,426
你可以做出一些设置

523
00:16:29,426 --> 0:16:31,656
来积极改善整体的体验

524
00:16:32,756 --> 0:16:34,806
首先 设定合理的超时

525
00:16:35,726 --> 0:16:38,876
也就是说 当你停止进程时超时

526
00:16:38,876 --> 0:16:39,776
而不仅是当进程需要太长时间时超时

527
00:16:40,366 --> 0:16:42,576
正如我们之前所说的

528
00:16:42,576 --> 0:16:44,056
如果你的用户使用 3G 网络

529
00:16:44,056 --> 0:16:45,676
你愿意等待更长的时间来加载内容

530
00:16:46,356 --> 0:16:47,576
对他们来说

531
00:16:47,576 --> 0:16:49,516
任意的超时将是更糟糕的用户体验

532
00:16:49,786 --> 0:16:52,786
除此之外

533
00:16:52,786 --> 0:16:54,796
一定要使用 HTTP/2 并尽可能避免可达性检查

534
00:16:55,306 --> 0:16:56,556
相反 只要尝试使用网络

535
00:16:56,556 --> 0:16:57,956
并尽你所能确保你的 App

536
00:16:57,956 --> 0:16:59,366
在尽可能多的网络条件下

537
00:16:59,366 --> 0:17:00,946
运行良好

538
00:16:59,366 --> 0:17:00,946
运行良好

539
00:17:01,636 --> 0:17:03,096
要了解更多关于相关的改进

540
00:17:03,096 --> 0:17:06,646
请参见去年 WWDC 的这两个会议

541
00:17:06,646 --> 0:17:07,846
以及本周早些时候

542
00:17:07,846 --> 0:17:09,776
“网络进展”的 1 和 2 两部分内容

543
00:17:11,876 --> 0:17:14,096
&gt;&gt; 接下来 调节

544
00:17:14,126 --> 0:17:16,665
你需要开始考虑你的 App 中

545
00:17:16,665 --> 0:17:18,713
实际的网络使用情况

546
00:17:18,906 --> 0:17:20,076
你需要使用

547
00:17:20,076 --> 0:17:21,226
网络连接设备条件

548
00:17:21,226 --> 0:17:22,915
来描述你的 App

549
00:17:23,026 --> 0:17:24,626
在这种使用情况下的行为

550
00:17:24,626 --> 0:17:26,346
并问问自己

551
00:17:26,346 --> 0:17:28,336
这种性能是不是可接受的

552
00:17:29,066 --> 0:17:30,456
我们建议你至少使用

553
00:17:30,456 --> 0:17:32,206
3G 网络进行测试

554
00:17:32,206 --> 0:17:33,566
并寻找你可以进行的改进

555
00:17:34,216 --> 0:17:37,246
你需要改变网络类型和它的质量

556
00:17:37,246 --> 0:17:38,626
来查看你是否仍然

557
00:17:38,626 --> 0:17:40,326
提供了良好的体验

558
00:17:40,326 --> 0:17:41,666
然后通过将此作为

559
00:17:41,876 --> 0:17:43,196
集成和 UI 测试运行的一部分

560
00:17:43,196 --> 0:17:45,146
来锁定这些性能优势

561
00:17:45,506 --> 0:17:49,426
现在 我想谈谈

562
00:17:49,966 --> 0:17:51,136
温度的变化

563
00:17:52,216 --> 0:17:53,946
人们喜欢在阳光明媚的日子里

564
00:17:53,946 --> 0:17:55,476
在户外使用电子设备

565
00:17:56,216 --> 0:17:57,636
他们可能会在咖啡店

566
00:17:57,636 --> 0:17:59,106
当 iPhone 进行无线充电时

567
00:17:59,106 --> 0:18:00,546
使用个人热点

568
00:17:59,106 --> 0:18:00,546
使用个人热点

569
00:18:01,546 --> 0:18:03,366
在这些情况下

570
00:18:03,366 --> 0:18:05,056
设备会开始升温

571
00:18:05,056 --> 0:18:05,976
这是正常的行为

572
00:18:06,536 --> 0:18:08,056
一些热能的情况

573
00:18:08,056 --> 0:18:09,996
会导致 iOS 设备

574
00:18:09,996 --> 0:18:12,016
为了调节温度

575
00:18:12,016 --> 0:18:13,476
而改变其行为或性能

576
00:18:14,006 --> 0:18:16,786
温度的变化有

577
00:18:16,786 --> 0:18:18,336
很多原因 无论是

578
00:18:18,336 --> 0:18:19,846
设备做了更多的工作

579
00:18:19,846 --> 0:18:22,396
还是直接暴露在阳光下

580
00:18:22,616 --> 0:18:25,756
等环境影响

581
00:18:25,086 --> 0:18:25,756
抑或是其他因素

582
00:18:27,156 --> 0:18:28,246
所有这些都是正常的场景

583
00:18:28,246 --> 0:18:30,846
iOS 子系统

584
00:18:30,846 --> 0:18:32,546
会对温度变化做出反应

585
00:18:32,836 --> 0:18:34,816
以调节这些变化造成的影响

586
00:18:35,366 --> 0:18:37,406
然而 你的 App 却不能

587
00:18:37,406 --> 0:18:38,716
在不断变化的温度下

588
00:18:38,716 --> 0:18:40,706
正常地运行

589
00:18:40,706 --> 0:18:41,296
你也并未解决这个问题

590
00:18:42,836 --> 0:18:44,356
当某些阈值

591
00:18:44,356 --> 0:18:45,746
被超过时 例如

592
00:18:45,746 --> 0:18:47,436
如果设备长时间

593
00:18:47,436 --> 0:18:49,376
被留在炎热的汽车中

594
00:18:49,376 --> 0:18:50,956
用户可能会看到这个温度警告界面

595
00:18:51,916 --> 0:18:53,546
此时它们就不能再

596
00:18:53,546 --> 0:18:55,066
与你的 App 交互了

597
00:18:55,946 --> 0:18:57,496
发生这种情况的部分原因是

598
00:18:57,776 --> 0:18:58,986
为用户提供

599
00:18:58,986 --> 0:19:00,676
必要时拨打

600
00:18:58,986 --> 0:19:00,676
必要时拨打

601
00:19:00,676 --> 0:19:02,636
紧急电话的关键能力

602
00:19:04,076 --> 0:19:05,856
系统正在竭尽所能

603
00:19:05,856 --> 0:19:07,596
来限制它的能量作用

604
00:19:07,856 --> 0:19:09,606
这将影响热量和电池寿命

605
00:19:09,606 --> 0:19:11,796
你的 App 也是系统的

606
00:19:11,796 --> 0:19:13,316
后台常驻 App

607
00:19:13,316 --> 0:19:14,576
你也同样需要考虑它的能量作用

608
00:19:14,576 --> 0:19:16,396
这是很重要的

609
00:19:17,416 --> 0:19:18,886
为此 当你

610
00:19:18,886 --> 0:19:20,076
处于不同的热状态时

611
00:19:20,076 --> 0:19:21,446
你可以开始动态地改变

612
00:19:21,446 --> 0:19:23,106
你的 App 的行为

613
00:19:23,916 --> 0:19:25,846
通过防御性的设计

614
00:19:25,846 --> 0:19:27,396
你可以通过关闭后台工作

615
00:19:27,396 --> 0:19:29,156
来减少你的 App 的能量作用

616
00:19:32,446 --> 0:19:33,936
你可以注册

617
00:19:33,936 --> 0:19:35,906
热状态变化通知

618
00:19:35,906 --> 0:19:37,256
查看设备

619
00:19:37,256 --> 0:19:39,916
向你的 App 报告的状态

620
00:19:39,916 --> 0:19:41,646
并考虑正常的场景

621
00:19:41,646 --> 0:19:44,246
比如设备升温

622
00:19:44,246 --> 0:19:45,596
因为系统知道它应该

623
00:19:45,696 --> 0:19:46,836
如何应对温度升高

624
00:19:47,696 --> 0:19:49,056
但你的 App 知道

625
00:19:49,056 --> 0:19:50,546
更多关于它正在做的工作的细节

626
00:19:50,546 --> 0:19:52,366
以及这些工作应该如何

627
00:19:52,366 --> 0:19:53,726
在保持良好体验的同时

628
00:19:53,726 --> 0:19:55,266
对更高的热状态做出反应

629
00:19:56,916 --> 0:19:57,886
那么 让我们来看看

630
00:19:57,886 --> 0:19:58,976
你们可能会看到的这些热状态

631
00:20:00,156 --> 0:20:02,706
在标准状态下

632
00:20:02,706 --> 0:20:03,676
设备处于正常的工作温度

633
00:20:03,676 --> 0:20:04,886
不需要你的 App

634
00:20:04,886 --> 0:20:07,246
采取任何纠正措施

635
00:20:07,906 --> 0:20:09,966
在第一种状态下

636
00:20:10,006 --> 0:20:11,516
我们建议你主动

637
00:20:11,516 --> 0:20:13,116
启动一些节能措施

638
00:20:13,116 --> 0:20:14,226
这样你就不会显著造成

639
00:20:14,356 --> 0:20:16,216
继续的能量整体增长

640
00:20:17,216 --> 0:20:18,896
当 iOS 看到热状态处于 Fair 时

641
00:20:18,896 --> 0:20:20,446
我们开始暂停

642
00:20:20,446 --> 0:20:23,256
照片分析等可自由支配的后台工作

643
00:20:23,726 --> 0:20:26,406
当设备报告了

644
00:20:26,406 --> 0:20:28,146
Serious 的热状态时

645
00:20:28,146 --> 0:20:29,566
系统性能将受到影响

646
00:20:29,906 --> 0:20:30,946
你的 App 应该开始采取

647
00:20:30,946 --> 0:20:32,446
更强的节能措施

648
00:20:32,656 --> 0:20:34,546
减少 CPU 使用

649
00:20:34,846 --> 0:20:36,316
图形和 I/O

650
00:20:37,056 --> 0:20:38,546
这时 你应该使用

651
00:20:38,546 --> 0:20:40,816
低质量的视觉效果

652
00:20:41,536 --> 0:20:43,016
我们对系统采取的一些措施

653
00:20:43,016 --> 0:20:44,366
包括降低 ARKit App

654
00:20:44,366 --> 0:20:46,126
和 FaceTime 的帧率

655
00:20:46,126 --> 0:20:48,306
以降低它们的整体强度

656
00:20:48,956 --> 0:20:50,456
如果用户正在

657
00:20:50,456 --> 0:20:52,096
从 iCloud 备份中恢复

658
00:20:52,096 --> 0:20:53,166
他们会发现 iCloud 会暂停到这个状态

659
00:20:53,166 --> 0:20:54,816
直到设备冷却下来

660
00:20:55,906 --> 0:20:57,706
在热状态 Critical 时

661
00:20:58,076 --> 0:20:59,246
你的 App 应该停止使用

662
00:20:59,246 --> 0:21:00,536
相机等外部设备

663
00:20:59,246 --> 0:21:00,536
相机等外部设备

664
00:21:01,236 --> 0:21:02,696
如果你的 App 出现在

665
00:21:02,696 --> 0:21:03,886
电池用量列表的首位

666
00:21:03,886 --> 0:21:05,636
用户甚至可能会

667
00:21:05,636 --> 0:21:08,036
考虑删除你的 App

668
00:21:08,096 --> 0:21:09,886
你的 App 应该与系统一起

669
00:21:09,886 --> 0:21:11,556
对这些变化做出动态反应

670
00:21:11,556 --> 0:21:13,116
这样你就可以

671
00:21:13,116 --> 0:21:14,446
在保持低能耗的同时

672
00:21:14,446 --> 0:21:17,776
继续保持良好的体验

673
00:21:18,796 --> 0:21:20,276
要了解更多状态案例

674
00:21:20,276 --> 0:21:21,706
以及我们的建议

675
00:21:22,076 --> 0:21:23,716
你可以查看我们的文档

676
00:21:24,266 --> 0:21:27,276
Ilya 现在将为给你们展示一个例子

677
00:21:27,276 --> 0:21:28,426
如何对这些状态

678
00:21:28,426 --> 0:21:30,116
做出动态反应

679
00:21:30,776 --> 0:21:34,106
&gt;&gt; 我将向你们展示

680
00:21:34,106 --> 0:21:35,936
一个示例 ARKit App

681
00:21:35,936 --> 0:21:37,256
它基于我们现有的

682
00:21:37,256 --> 0:21:38,836
示例代码的修改版本

683
00:21:38,836 --> 0:21:40,326
能够在增强现实中处理 3D 交互

684
00:21:40,366 --> 0:21:41,126
和 UI 控件

685
00:21:41,126 --> 0:21:43,666
当我在 Apple Park 散步时

686
00:21:43,666 --> 0:21:44,986
它也在做一些

687
00:21:44,986 --> 0:21:47,116
繁复的后台工作

688
00:21:47,346 --> 0:21:48,376
在这里 你可以看到 App

689
00:21:48,376 --> 0:21:49,506
正在 Nominal 热状态下运行

690
00:21:49,506 --> 0:21:51,146
你可以看到

691
00:21:51,216 --> 0:21:52,906
红色的焦点方块

692
00:21:52,906 --> 0:21:54,966
变成了实体 找到一个表面

693
00:21:54,966 --> 0:21:56,706
让我放下一把漂亮的椅子和一盏灯

694
00:21:56,706 --> 0:21:57,796
然后坐在椅子上面看书

695
00:21:58,676 --> 0:22:01,346
现在你可以看到

696
00:21:58,676 --> 0:22:01,346
现在你可以看到

697
00:22:01,346 --> 0:22:02,856
相机的移动非常平稳

698
00:22:02,926 --> 0:22:04,456
一切都十分正常

699
00:22:04,616 --> 0:22:08,426
一切都如常地运转

700
00:22:08,686 --> 0:22:09,656
让我们再看一下这个 App

701
00:22:09,656 --> 0:22:11,656
但是现在我已经在外面

702
00:22:11,706 --> 0:22:12,796
待了很长时间了

703
00:22:12,796 --> 0:22:13,856
我一直坐在阳光下

704
00:22:13,996 --> 0:22:15,406
外面很炎热

705
00:22:15,406 --> 0:22:15,876
设备也开始升温

706
00:22:17,356 --> 0:22:18,346
你会注意到两件事

707
00:22:18,656 --> 0:22:20,446
首先 帧率不如

708
00:22:20,446 --> 0:22:22,146
以前那么好了

709
00:22:22,146 --> 0:22:25,216
其次 尽管我几乎是直接对准地面

710
00:22:25,216 --> 0:22:26,756
但焦点方块

711
00:22:26,756 --> 0:22:28,246
却没能找到一个表面

712
00:22:28,936 --> 0:22:30,136
这对你的用户来说

713
00:22:30,136 --> 0:22:31,596
不是一个很好的体验

714
00:22:31,596 --> 0:22:33,926
而且可能会让他们感到有点沮丧

715
00:22:34,096 --> 0:22:35,156
那么 我们能做些什么呢

716
00:22:36,446 --> 0:22:39,216
首先 你需要注册

717
00:22:39,216 --> 0:22:41,356
ProcessInfo.theremalStateDidChangeNotification

718
00:22:42,476 --> 0:22:46,386
当你收到热状态更改通知时

719
00:22:46,386 --> 0:22:48,576
读取实际的热状态

720
00:22:48,576 --> 0:22:49,396
然后做出相应的反应

721
00:22:50,156 --> 0:22:51,246
根据你的状态

722
00:22:51,246 --> 0:22:53,156
你应该启用或禁用某些特性

723
00:22:53,156 --> 0:22:54,996
以确保平滑的性能

724
00:22:54,996 --> 0:22:58,586
或者你认为重要的任何度量

725
00:22:59,046 --> 0:23:03,096
这是一个如何注册热状态

726
00:22:59,046 --> 0:23:03,096
这是一个如何注册热状态

727
00:23:03,096 --> 0:23:04,516
然后读取热状态的例子

728
00:23:04,516 --> 0:23:07,736
你应该如何选择

729
00:23:07,796 --> 0:23:08,876
对热状态作出反应

730
00:23:10,156 --> 0:23:11,946
在这个场景中

731
00:23:11,946 --> 0:23:13,996
我在 Nornimal 和 Fair 热状态下

732
00:23:14,616 --> 0:23:16,106
在这个例子中

733
00:23:16,106 --> 0:23:18,046
我打开了人脸跟踪 人物分割

734
00:23:18,176 --> 0:23:19,606
和运动模糊

735
00:23:19,606 --> 0:23:23,196
当热状态增加 Serious 时

736
00:23:23,196 --> 0:23:26,306
我禁用人脸跟踪和帧语义

737
00:23:26,826 --> 0:23:27,736
但我留下了运动模糊

738
00:23:27,736 --> 0:23:31,396
在 Critical 时

739
00:23:31,396 --> 0:23:31,716
我会关掉所有特性

740
00:23:32,566 --> 0:23:34,996
现在我们已经

741
00:23:34,996 --> 0:23:36,246
对热状态做出了反应

742
00:23:36,246 --> 0:23:37,766
让我们再看看这个 App

743
00:23:37,766 --> 0:23:38,836
在同样的场景下工作得怎样

744
00:23:38,836 --> 0:23:41,926
我们同样在外面待了很长时间

745
00:23:41,926 --> 0:23:42,746
但是能看到它现在好多了

746
00:23:43,496 --> 0:23:44,886
焦点方块能够找到一个表面

747
00:23:45,016 --> 0:23:46,916
我可以像以前一样

748
00:23:46,916 --> 0:23:48,486
放下我的椅子和台灯

749
00:23:48,486 --> 0:23:48,996
我也可以读一会书

750
00:23:49,706 --> 0:23:52,496
编写防御代码

751
00:23:52,496 --> 0:23:53,986
以及对热状态变化做出反应

752
00:23:53,986 --> 0:23:55,606
确实很有帮助

753
00:23:55,606 --> 0:23:57,036
但是你想提前知道

754
00:23:57,036 --> 0:23:58,016
它是否像你预期的那样工作

755
00:23:59,666 --> 0:24:01,826
一般来说

756
00:23:59,666 --> 0:24:01,826
一般来说

757
00:24:01,826 --> 0:24:05,266
我们可以提前测试 App 在不同温度下的性能

758
00:24:06,056 --> 0:24:08,656
换句话说 你应该测试你的防御代码

759
00:24:10,096 --> 0:24:12,096
但是为了做到这一点

760
00:24:12,096 --> 0:24:13,726
我们应该怎么处理呢

761
00:24:15,076 --> 0:24:15,966
&gt;&gt; 谢谢你 Ilya

762
00:24:15,966 --> 0:24:19,416
问题是 不是所有人都能获得热成像

763
00:24:20,616 --> 0:24:22,286
就像网络条件一样

764
00:24:22,286 --> 0:24:23,716
我们认识到

765
00:24:23,716 --> 0:24:25,386
对于验证 App 行为的挑战

766
00:24:25,386 --> 0:24:26,926
以及现有方法中

767
00:24:26,926 --> 0:24:29,766
存在很大的方差

768
00:24:30,656 --> 0:24:32,106
我们注意到

769
00:24:32,106 --> 0:24:33,346
人们正在使用一些

770
00:24:33,346 --> 0:24:34,996
我们不推荐的方法

771
00:24:34,996 --> 0:24:36,456
比如运行一个虚拟 CPU 负载

772
00:24:36,456 --> 0:24:38,226
使设备升温

773
00:24:38,226 --> 0:24:39,566
扔掉第一个小时的结果

774
00:24:39,566 --> 0:24:42,126
然后在设备高温的时候分析 App 行为

775
00:24:42,776 --> 0:24:44,526
我们一直在努力为此

776
00:24:44,526 --> 0:24:45,816
提供一个开发工具

777
00:24:45,816 --> 0:24:47,536
我们提出了一种可靠的方法

778
00:24:47,536 --> 0:24:49,306
来改变设备上报告的热状态

779
00:24:49,336 --> 0:24:50,676
而不需要对设备

780
00:24:51,056 --> 0:24:52,396
进行物理加热

781
00:24:52,566 --> 0:24:54,216
同时仍能保证其安全使用

782
00:24:54,786 --> 0:24:56,206
我们在 Xcode 11 中

783
00:24:56,206 --> 0:24:58,136
将这种方式构建到设备条件中

784
00:24:59,346 --> 0:25:00,806
从相同的设备

785
00:24:59,346 --> 0:25:00,806
从相同的设备

786
00:25:00,806 --> 0:25:02,346
和模拟器窗口中

787
00:25:02,346 --> 0:25:03,986
你可以激活高温条件

788
00:25:03,986 --> 0:25:05,806
使你的设备

789
00:25:05,806 --> 0:25:07,416
达到不同的热状态

790
00:25:07,646 --> 0:25:08,626
而不需要达到

791
00:25:08,626 --> 0:25:09,406
物理意义上的温度条件

792
00:25:10,346 --> 0:25:11,816
现在 你可以快速 轻松地

793
00:25:11,816 --> 0:25:13,436
让你的设备报告

794
00:25:13,436 --> 0:25:15,056
处于 Fair 的状态

795
00:25:15,056 --> 0:25:16,516
来测试你的主动节能措施

796
00:25:17,346 --> 0:25:19,156
热状态 Serious

797
00:25:19,156 --> 0:25:20,386
来检查你是否可靠地

798
00:25:20,386 --> 0:25:21,776
降低了你的资源使用和能量作用

799
00:25:21,776 --> 0:25:23,886
热状态 Critical

800
00:25:23,886 --> 0:25:25,586
来查看你对外部设备的使用

801
00:25:25,586 --> 0:25:27,526
是否真的停止

802
00:25:28,546 --> 0:25:29,876
运行其中一个

803
00:25:29,876 --> 0:25:31,676
会使设备的行为完全像

804
00:25:31,676 --> 0:25:32,906
它真的处于那个热状态一样

805
00:25:32,906 --> 0:25:34,986
但在你开始使用这些之前

806
00:25:34,986 --> 0:25:36,256
你需要知道

807
00:25:36,256 --> 0:25:39,016
它们在你的设备上是如何工作的 Ilya

808
00:25:39,566 --> 0:25:40,416
&gt;&gt; 谢谢你 Alex

809
00:25:40,646 --> 0:25:43,426
我将向你展示

810
00:25:43,426 --> 0:25:45,196
更多关于底层的情况

811
00:25:45,196 --> 0:25:47,026
你可以在这里看到一个图表

812
00:25:47,026 --> 0:25:48,246
它代表了设备的

813
00:25:48,246 --> 0:25:50,396
实际热状态

814
00:25:50,396 --> 0:25:52,656
如果有的话 活动状态

815
00:25:52,656 --> 0:25:53,836
以及设备的

816
00:25:53,836 --> 0:25:55,356
实际触觉温度

817
00:25:55,356 --> 0:25:57,116
它用右上角的温度计表示

818
00:25:57,116 --> 0:26:00,186
想象一下你桌上的基准设备

819
00:25:57,116 --> 0:26:00,186
想象一下你桌上的基准设备

820
00:26:00,726 --> 0:26:01,776
它处在室温条件下

821
00:26:01,776 --> 0:26:03,126
你没有任何激活条件

822
00:26:03,126 --> 0:26:04,396
并且你已经有一段时间没有使用它了

823
00:26:05,096 --> 0:26:06,946
在这里 热状态是 Nominal

824
00:26:07,556 --> 0:26:10,796
如果你现在

825
00:26:10,796 --> 0:26:12,686
激活 Serious 热配置

826
00:26:12,686 --> 0:26:14,366
设备将随着时间的推移

827
00:26:14,366 --> 0:26:16,956
从 Nominal

828
00:26:16,956 --> 0:26:19,926
经过 Fair 最终达到 Serious

829
00:26:20,676 --> 0:26:22,056
这个过程需要几秒钟

830
00:26:22,876 --> 0:26:24,166
就像在现实生活中

831
00:26:24,166 --> 0:26:25,256
如果你订阅了热状态通知

832
00:26:25,256 --> 0:26:26,976
你会在达到 Fair 和 Serious 状态时

833
00:26:26,976 --> 0:26:28,816
收到通知

834
00:26:29,396 --> 0:26:30,646
现在 有两件重要的

835
00:26:30,646 --> 0:26:31,986
事情需要注意

836
00:26:32,896 --> 0:26:34,506
首先 你的设备实际上

837
00:26:34,506 --> 0:26:35,796
并没有因此而升温

838
00:26:35,796 --> 0:26:37,106
或改变温度

839
00:26:37,106 --> 0:26:39,746
其次 这并不能

840
00:26:39,936 --> 0:26:41,606
固定你的热状态

841
00:26:41,606 --> 0:26:42,456
它的作用就像基准板一样

842
00:26:42,496 --> 0:26:44,776
让我来解释一下这是什么意思

843
00:26:45,626 --> 0:26:47,586
假设你的设备

844
00:26:47,586 --> 0:26:49,606
处于这种状态

845
00:26:49,606 --> 0:26:51,376
你运行了一些繁重的计算

846
00:26:51,376 --> 0:26:52,836
或者你只是把它放在太阳下一段时间

847
00:26:53,956 --> 0:26:56,916
基础温度实际上升高了

848
00:26:57,016 --> 0:26:58,096
这台设备摸起来升温了

849
00:26:59,146 --> 0:27:00,786
不管原因是什么

850
00:26:59,146 --> 0:27:00,786
不管原因是什么

851
00:27:00,786 --> 0:27:02,456
热状态也会从 Serious

852
00:27:02,456 --> 0:27:04,276
增加到 Critical

853
00:27:06,176 --> 0:27:08,026
这是一种预防措施

854
00:27:08,026 --> 0:27:09,496
以确保你的系统仍然安全运行

855
00:27:09,976 --> 0:27:10,986
即使你在这个热条件下

856
00:27:10,986 --> 0:27:12,396
进行非常繁重的测试

857
00:27:13,046 --> 0:27:14,226
如果你停止使用你的设备

858
00:27:14,226 --> 0:27:18,796
或让它冷却下来

859
00:27:18,796 --> 0:27:20,006
热状态将回到 Serious

860
00:27:20,006 --> 0:27:22,936
并保持在那里

861
00:27:23,386 --> 0:27:24,246
直到你撤销设置的条件

862
00:27:24,246 --> 0:27:28,246
在这之后 设备将从 Serious

863
00:27:28,246 --> 0:27:30,116
经过 Fair 最终降到 Nornimal

864
00:27:30,966 --> 0:27:32,136
在所有这些情况下

865
00:27:32,276 --> 0:27:34,546
你都将收到热状态用户通知

866
00:27:35,076 --> 0:27:38,656
在 Xcode 11 中

867
00:27:38,656 --> 0:27:40,326
这个热状态信息

868
00:27:40,326 --> 0:27:41,946
在调试导航器中的能量计中是可见的

869
00:27:43,196 --> 0:27:44,826
这里有两条热状态轨道

870
00:27:44,826 --> 0:27:48,106
都位于能量作用区域的底部

871
00:27:48,596 --> 0:27:50,206
最底部的轨道

872
00:27:50,286 --> 0:27:51,206
显示设备的实际热状态

873
00:27:51,206 --> 0:27:53,596
颜色编码便于分辨

874
00:27:54,526 --> 0:27:55,596
在这里 你可以看到热状态

875
00:27:55,596 --> 0:27:57,186
随着激活条件的变化

876
00:27:57,236 --> 0:27:59,506
先上升然后下降

877
00:27:59,506 --> 0:28:01,536
你可以看到 在这个场景中

878
00:27:59,506 --> 0:28:01,536
你可以看到 在这个场景中

879
00:28:01,536 --> 0:28:03,486
每个方向都花费了大约 10 秒的时间

880
00:28:04,616 --> 0:28:06,796
如果存在

881
00:28:06,796 --> 0:28:08,536
则顶部轨道显示活跃的热设备状态

882
00:28:09,766 --> 0:28:11,816
为了向你展示

883
00:28:11,816 --> 0:28:13,196
更多关于 Xcode 的调试和优化

884
00:28:13,196 --> 0:28:13,876
以及可以使用的工具

885
00:28:13,876 --> 0:28:15,836
我将有请 Jay 上台

886
00:28:17,516 --> 0:28:25,036
[掌声]

887
00:28:25,536 --> 0:28:26,626
&gt;&gt; 大家好

888
00:28:27,136 --> 0:28:29,006
我是 Jay 我是 Core OS 中

889
00:28:29,006 --> 0:28:31,136
能量技术团队的一员

890
00:28:31,136 --> 0:28:32,446
我将向你展示

891
00:28:32,446 --> 0:28:33,906
在设备受到温度限制时

892
00:28:33,906 --> 0:28:35,336
App 的行为

893
00:28:35,336 --> 0:28:36,166
以及你可以对此做些什么

894
00:28:37,496 --> 0:28:38,706
作为演示

895
00:28:38,706 --> 0:28:40,036
我们将使用一个

896
00:28:40,036 --> 0:28:41,926
Fox 2 App 的修改版

897
00:28:41,926 --> 0:28:43,226
它是几年前为 SceneKit

898
00:28:43,226 --> 0:28:44,606
公开发布的示例

899
00:28:45,816 --> 0:28:46,646
让我们开始吧

900
00:28:47,056 --> 0:28:48,656
我有一个设备

901
00:28:48,656 --> 0:28:49,966
在没有任何活跃的热条件下

902
00:28:49,966 --> 0:28:50,786
运行这个 App

903
00:28:51,356 --> 0:28:52,236
让我们看看它是如何加载的

904
00:28:53,346 --> 0:28:55,106
这是这个 App 的样子

905
00:28:56,346 --> 0:28:57,616
首先 让我们看看

906
00:28:57,616 --> 0:28:58,706
屏幕的左下角

907
00:29:00,026 --> 0:29:01,096
那是 FPS

908
00:29:01,356 --> 0:29:02,256
我们可以看到

909
00:29:02,256 --> 0:29:04,316
FPS 一直保持超过 30

910
00:29:04,766 --> 0:29:08,366
让我们看看这个 App 的细节

911
00:29:09,296 --> 0:29:12,286
这款 App 的动画效果十分不错

912
00:29:12,476 --> 0:29:15,756
让我们看看 App 内部的所有细节

913
00:29:15,756 --> 0:29:17,016
细节十分丰富

914
00:29:18,406 --> 0:29:19,466
如果你看

915
00:29:19,466 --> 0:29:20,226
右边的绿色宝石

916
00:29:20,706 --> 0:29:21,896
它上面有一个光源

917
00:29:21,946 --> 0:29:23,626
阴影很大

918
00:29:24,906 --> 0:29:25,676
如果你观察运动的物体

919
00:29:25,676 --> 0:29:27,286
它们有光源从里面发光

920
00:29:27,286 --> 0:29:28,776
它们投影在狐狸身上

921
00:29:28,776 --> 0:29:30,356
也有很大的阴影

922
00:29:30,996 --> 0:29:33,116
让我们看看熔岩

923
00:29:33,236 --> 0:29:34,586
烟雾从里面冒出来

924
00:29:34,586 --> 0:29:35,516
GPU 在背景融合方面

925
00:29:35,516 --> 0:29:37,716
处理得很好

926
00:29:38,556 --> 0:29:39,856
同时 还有很多

927
00:29:39,856 --> 0:29:42,466
微小的火粒子迸射出来

928
00:29:42,666 --> 0:29:44,416
这是一个很好的用户体验

929
00:29:45,276 --> 0:29:47,206
用户非常喜欢使用这样的 App

930
00:29:48,116 --> 0:29:49,116
如果你在运行性能测试

931
00:29:49,146 --> 0:29:52,666
它们都是绿色的

932
00:29:52,866 --> 0:29:54,176
让我们调整到一个热条件

933
00:29:54,176 --> 0:29:55,836
看看会发生什么

934
00:29:56,406 --> 0:29:59,096
我有另一台设备

935
00:29:59,096 --> 0:30:00,596
在运行同样的 App

936
00:29:59,096 --> 0:30:00,596
在运行同样的 App

937
00:30:00,646 --> 0:30:02,296
但处在 Serious 热条件下

938
00:30:02,296 --> 0:30:03,016
我们看看会发生什么

939
00:30:03,736 --> 0:30:06,506
我要切换到这个设备

940
00:30:06,506 --> 0:30:12,396
现在 如果你

941
00:30:12,396 --> 0:30:14,636
看屏幕的左下角

942
00:30:14,886 --> 0:30:16,436
FPS 已经降到 17

943
00:30:16,966 --> 0:30:19,136
我们几乎损失了一半的性能

944
00:30:19,696 --> 0:30:21,096
如果你观察移动的物体

945
00:30:21,096 --> 0:30:23,056
就会发现它们

946
00:30:23,056 --> 0:30:24,016
不像以前那么顺滑了

947
00:30:24,336 --> 0:30:25,086
如果你观察移动的平台

948
00:30:25,086 --> 0:30:26,626
或移动的岩石

949
00:30:27,166 --> 0:30:28,636
它们也不像以前那么顺滑了

950
00:30:29,206 --> 0:30:32,316
我们能做些什么来解决这个问题呢

951
00:30:33,606 --> 0:30:34,876
我们继续修改了 App

952
00:30:34,876 --> 0:30:36,706
来监听热状态的变化

953
00:30:37,826 --> 0:30:40,236
当热状态发生变化时

954
00:30:40,236 --> 0:30:41,876
App 将动态地响应

955
00:30:41,876 --> 0:30:43,106
并减少它所支持的功能

956
00:30:43,566 --> 0:30:45,626
让我们看看它是如何工作的

957
00:30:45,946 --> 0:30:48,156
我在顶部

958
00:30:48,156 --> 0:30:49,656
有一个小的调试 UI

959
00:30:49,656 --> 0:30:51,256
可以将它切换成静态或动态

960
00:30:51,256 --> 0:30:52,756
现在我要将它切换为动态

961
00:30:59,356 --> 0:31:00,416
如果你现在看屏幕底部

962
00:30:59,356 --> 0:31:00,416
如果你现在看屏幕底部

963
00:31:00,416 --> 0:31:04,636
我们又接近了 20 FPS

964
00:31:04,816 --> 0:31:06,196
场景看起来很像

965
00:31:06,196 --> 0:31:07,526
但是我们去掉了一些细节

966
00:31:07,806 --> 0:31:09,706
我们去掉了从熔岩中冒出的烟

967
00:31:10,256 --> 0:31:11,486
我们减少了一些火粒子

968
00:31:11,486 --> 0:31:13,906
但是正如你看到的

969
00:31:13,906 --> 0:31:15,986
App 的响应仍然很好

970
00:31:17,216 --> 0:31:18,136
这就是我们要找的

971
00:31:18,136 --> 0:31:23,176
现在 让我们来看看

972
00:31:23,176 --> 0:31:24,966
为了实现这一点我们必须做的代码更改

973
00:31:31,466 --> 0:31:33,046
当你处于 Nominal 或者 Fair 状态时

974
00:31:33,046 --> 0:31:34,086
我们不需要做任何事情

975
00:31:34,906 --> 0:31:35,786
你可以在 App 上

976
00:31:35,786 --> 0:31:36,556
启用所有功能

977
00:31:37,096 --> 0:31:37,436
我们有 HDR

978
00:31:37,436 --> 0:31:39,096
我们有景深

979
00:31:39,286 --> 0:31:40,546
我们有柔和的阴影

980
00:31:40,546 --> 0:31:41,976
我们也将后期处理设置为高

981
00:31:45,836 --> 0:31:47,936
但如果达到了 Serious 状态

982
00:31:47,936 --> 0:31:48,836
我们就要有所行动了

983
00:31:48,836 --> 0:31:51,146
我们需要禁用 HDR

984
00:31:51,936 --> 0:31:54,256
我们还将阴影从柔化变为斑点

985
00:31:54,796 --> 0:31:56,746
我们还将后期处理设置为中等

986
00:31:57,246 --> 0:32:00,356
当我们处在 Critical 状态时

987
00:31:57,246 --> 0:32:00,356
当我们处在 Critical 状态时

988
00:32:00,356 --> 0:32:01,026
还要进一步设置

989
00:32:01,026 --> 0:32:02,236
Critical 是一种非常高的热状态

990
00:32:02,236 --> 0:32:04,426
我们禁用了尽可能多的功能

991
00:32:04,956 --> 0:32:05,756
我们禁用了 HDR

992
00:32:05,846 --> 0:32:06,936
禁用景深

993
00:32:06,936 --> 0:32:08,576
我们禁用了阴影

994
00:32:08,576 --> 0:32:09,736
以及后期处理

995
00:32:10,946 --> 0:32:13,456
所有这些都将有助于

996
00:32:13,456 --> 0:32:15,416
保持 App 随时响应

997
00:32:15,936 --> 0:32:18,946
现在 让我们看看一些

998
00:32:18,946 --> 0:32:21,006
用来调节温度的工具

999
00:32:23,876 --> 0:32:25,506
这是一个采取在

1000
00:32:25,816 --> 0:32:28,196
同一 App 上的 Instrument 堆栈

1001
00:32:28,196 --> 0:32:29,426
分为带有和不带有优化

1002
00:32:29,966 --> 0:32:31,346
它们都是在

1003
00:32:31,346 --> 0:32:32,546
Serious 热条件下被捕获的

1004
00:32:32,606 --> 0:32:36,176
让我们看看 FPS 轨道

1005
00:32:36,176 --> 0:32:40,596
这是显示在同一帧中的时间

1006
00:32:41,366 --> 0:32:42,396
我们来解码一下

1007
00:32:42,886 --> 0:32:43,916
当显示器显示一个帧时

1008
00:32:43,916 --> 0:32:47,136
GP 正在绘制下一个帧

1009
00:32:47,136 --> 0:32:52,276
CP 正在为后面的帧创建指令

1010
00:32:52,276 --> 0:32:57,506
如果不进行任何优化

1011
00:32:57,506 --> 0:32:58,576
GP 就无法

1012
00:32:58,576 --> 0:32:59,796
及时交付帧

1013
00:33:00,146 --> 0:33:01,956
显示器就会一直显示相同的帧

1014
00:33:02,816 --> 0:33:04,096
这就是卡顿的样子

1015
00:33:04,236 --> 0:33:05,566
这时你的 App 开始滞后

1016
00:33:05,846 --> 0:33:06,576
如果你注意到

1017
00:33:06,576 --> 0:33:08,756
在优化之后

1018
00:33:08,756 --> 0:33:09,926
帧之间的间隔是一致的

1019
00:33:10,156 --> 0:33:11,516
除了使用 Instrument

1020
00:33:11,986 --> 0:33:14,166
你还应该使用 Xcode 能量计

1021
00:33:14,346 --> 0:33:15,916
你应该把注意力集中在

1022
00:33:15,916 --> 0:33:17,856
你的 App 的平均能量作用上

1023
00:33:18,766 --> 0:33:20,176
能量作用越大

1024
00:33:20,286 --> 0:33:21,806
电池损耗越高

1025
00:33:21,806 --> 0:33:22,966
你的 App 导致

1026
00:33:22,966 --> 0:33:24,526
热状态上升的可能性就越大

1027
00:33:24,966 --> 0:33:26,306
如果你看没有优化的情况

1028
00:33:26,306 --> 0:33:27,456
我们有一个

1029
00:33:27,456 --> 0:33:31,196
非常高的能量作用

1030
00:33:31,196 --> 0:33:32,476
但伴随着优化的启用

1031
00:33:32,476 --> 0:33:34,126
我们就能够降低能量作用

1032
00:33:34,286 --> 0:33:35,496
这意味着

1033
00:33:35,496 --> 0:33:36,656
当设备运行该 App 时

1034
00:33:36,656 --> 0:33:38,036
该 App 不会导致

1035
00:33:38,036 --> 0:33:39,746
热状态上升

1036
00:33:42,676 --> 0:33:44,576
有请 Alex 和 Ilya 进行总结

1037
00:33:45,516 --> 0:33:49,500
[掌声]

1038
00:33:52,256 --> 0:33:53,566
&gt;&gt; 谢谢你 Jay

1039
00:33:56,056 --> 0:33:57,806
如果你想了解更多

1040
00:33:57,806 --> 0:33:59,396
关于 Xcode 中的调试

1041
00:33:59,396 --> 0:34:00,896
以及其他

1042
00:33:59,396 --> 0:34:00,896
以及其他

1043
00:34:00,896 --> 0:34:01,836
可以为你的开发过程

1044
00:34:01,836 --> 0:34:03,266
带来真实场景的内容

1045
00:34:03,266 --> 0:34:04,946
例如环境覆盖

1046
00:34:04,946 --> 0:34:06,806
请查看本周早些时候的这个会议

1047
00:34:08,096 --> 0:34:10,656
&gt;&gt; 我们了解了

1048
00:34:10,656 --> 0:34:11,936
人们会在真实的环境下

1049
00:34:11,936 --> 0:34:13,985
使用你的 App

1050
00:34:13,985 --> 0:34:16,485
比如 3G 网络或高温状态

1051
00:34:16,686 --> 0:34:17,795
也了解了在这些情况下

1052
00:34:17,795 --> 0:34:19,275
提供真正可能的

1053
00:34:19,275 --> 0:34:21,666
最佳体验的重要性

1054
00:34:22,686 --> 0:34:24,235
以及一个典型的开发

1055
00:34:24,235 --> 0:34:25,815
和测试工作流

1056
00:34:26,045 --> 0:34:27,775
如何自然地引导你

1057
00:34:27,775 --> 0:34:29,516
进入净室条件

1058
00:34:29,516 --> 0:34:31,516
以避免片状的测试和高方差

1059
00:34:31,686 --> 0:34:33,616
我们了解了

1060
00:34:33,616 --> 0:34:35,536
在 Xcode 11 中新的设备条件

1061
00:34:35,896 --> 0:34:37,156
可以让你快速轻松地将

1062
00:34:37,156 --> 0:34:39,346
测试设备置于

1063
00:34:39,346 --> 0:34:41,216
不佳的网络或温度状态

1064
00:34:41,985 --> 0:34:43,396
这意味着你不再需要

1065
00:34:43,396 --> 0:34:44,966
等待一个小时让设备真正升温

1066
00:34:44,966 --> 0:34:46,196
也不再需要

1067
00:34:46,196 --> 0:34:47,186
扔掉某些测试结果

1068
00:34:47,565 --> 0:34:49,376
这是一种很好的方式

1069
00:34:49,376 --> 0:34:50,516
确保你正在设计的代码

1070
00:34:50,686 --> 0:34:52,266
以及它所带来的

1071
00:34:52,326 --> 0:34:53,565
所有优秀性能和特性

1072
00:34:53,775 --> 0:34:55,275
都能够转化为现实情况中

1073
00:34:55,275 --> 0:34:56,996
用户的实际体验

1074
00:34:58,416 --> 0:35:00,666
为了总结

1075
00:34:58,416 --> 0:35:00,666
为了总结

1076
00:35:00,666 --> 0:35:02,096
请使用 Test Pyramid 模型

1077
00:35:02,096 --> 0:35:03,896
来组织你的自动化测试套件

1078
00:35:03,896 --> 0:35:05,286
并准备在你

1079
00:35:05,286 --> 0:35:06,906
将实际情况引入测试时

1080
00:35:06,956 --> 0:35:10,666
对结果进行分类

1081
00:35:11,156 --> 0:35:13,246
只跳过单元测试中

1082
00:35:13,246 --> 0:35:14,216
真正不必要的代码

1083
00:35:14,746 --> 0:35:17,576
这里有一个行动的号召

1084
00:35:18,926 --> 0:35:19,856
别忘了使用

1085
00:35:19,856 --> 0:35:20,686
Network Link Conditioner

1086
00:35:21,316 --> 0:35:22,796
一定要激活设备条件

1087
00:35:22,986 --> 0:35:24,766
查看 App 的行为

1088
00:35:24,766 --> 0:35:26,196
并添加测试运行

1089
00:35:26,196 --> 0:35:28,256
从而发现你可能错过的异常行为

1090
00:35:29,416 --> 0:35:31,056
我们再次建议你

1091
00:35:31,056 --> 0:35:32,426
至少使用不同质量的

1092
00:35:32,426 --> 0:35:34,066
3G 网络类型进行测试

1093
00:35:34,446 --> 0:35:36,126
查看你的 App 在 Serious 的

1094
00:35:36,126 --> 0:35:37,406
热状态下是如何工作的

1095
00:35:38,396 --> 0:35:39,816
我们非常兴奋地看到那些

1096
00:35:39,816 --> 0:35:41,076
你使用我们提供的设备条件

1097
00:35:41,276 --> 0:35:43,096
所进行的改进

1098
00:35:43,756 --> 0:35:45,686
我们也很想听听你的意见

1099
00:35:46,126 --> 0:35:47,656
联系开发者支持

1100
00:35:47,656 --> 0:35:49,126
或者在此会议之后

1101
00:35:49,126 --> 0:35:49,966
访问 Xcode 实验室

1102
00:35:50,356 --> 0:35:52,876
获取更多信息 请参见我们的会议链接

1103
00:35:53,526 --> 0:35:54,826
非常感谢你

1104
00:35:54,826 --> 0:35:55,966
我们希望你有一个开心的 WWDC 之旅

1105
00:35:56,516 --> 0:36:03,500
[掌声]
