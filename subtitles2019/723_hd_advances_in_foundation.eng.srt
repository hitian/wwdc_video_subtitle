1
00:00:00,506 --> 0:00:05,500
[ Music ]

2
00:00:10,426 --> 0:00:12,426
[Applause]

3
00:00:12,836 --> 0:00:13,626
&gt;&gt; Hello, everyone.

4
00:00:13,626 --> 0:00:15,306
My name's Tina.

5
00:00:16,276 --> 0:00:17,456
I'm an engineer on the

6
00:00:17,456 --> 0:00:18,386
Foundation team.

7
00:00:18,616 --> 0:00:20,196
I'm going over the highlights of

8
00:00:20,196 --> 0:00:21,756
the new APIs we added to

9
00:00:21,756 --> 0:00:22,486
Foundation.

10
00:00:22,796 --> 0:00:24,176
Now, let's get started with the

11
00:00:24,176 --> 0:00:25,126
API highlights.

12
00:00:25,846 --> 0:00:27,386
These are a variety of things

13
00:00:27,386 --> 0:00:28,796
we're going to talk about today.

14
00:00:31,356 --> 0:00:32,956
Let's get started with Ordered

15
00:00:32,956 --> 0:00:33,856
Collection Diffing.

16
00:00:34,506 --> 0:00:36,346
It's an API that allows you to

17
00:00:36,346 --> 0:00:38,896
compute and code and apply the

18
00:00:38,896 --> 0:00:40,666
diff between collections.

19
00:00:41,646 --> 0:00:43,326
To illustrate this, I'm going to

20
00:00:43,326 --> 0:00:44,236
tell a story.

21
00:00:44,916 --> 0:00:46,886
There is a bear string that

22
00:00:46,886 --> 0:00:48,446
really wants to become a bird.

23
00:00:49,156 --> 0:00:52,166
Let's figure out how to do this.

24
00:00:52,376 --> 0:00:54,356
We notice that the bear has an E

25
00:00:54,356 --> 0:00:56,186
and A that the bird doesn't

26
00:00:56,186 --> 0:00:56,466
have.

27
00:00:57,556 --> 0:00:59,876
And it also needs an I and a D

28
00:00:59,876 --> 0:01:00,536
from the bird.

29
00:00:59,876 --> 0:01:00,536
from the bird.

30
00:01:01,966 --> 0:01:04,016
So let's go ahead and remove the

31
00:01:04,016 --> 0:01:07,016
E and A and insert an I in the

32
00:01:07,016 --> 0:01:09,306
middle and a D in the end.

33
00:01:10,766 --> 0:01:12,666
So that took two removals and

34
00:01:12,666 --> 0:01:15,036
two insertions to transform a

35
00:01:15,216 --> 0:01:16,226
bear to the bird.

36
00:01:18,556 --> 0:01:20,386
You can do this very easily with

37
00:01:20,436 --> 0:01:22,796
Ordered Collection Diffing API.

38
00:01:24,116 --> 0:01:26,346
The diff here is a collection

39
00:01:26,346 --> 0:01:27,066
difference type.

40
00:01:27,866 --> 0:01:29,626
It's a collection of insertions

41
00:01:29,626 --> 0:01:31,826
and removals that describe the

42
00:01:31,826 --> 0:01:34,006
element that is inserted or

43
00:01:34,006 --> 0:01:36,346
removed and the offset of the

44
00:01:36,346 --> 0:01:37,766
element in the collection.

45
00:01:38,726 --> 0:01:40,636
Here it contains two insertions

46
00:01:40,636 --> 0:01:44,876
and two removals as we just saw.

47
00:01:45,106 --> 0:01:46,456
We can apply the diff on the

48
00:01:46,456 --> 0:01:48,546
bear to get a new bird string.

49
00:01:49,486 --> 0:01:51,376
This is a very powerful API and

50
00:01:51,646 --> 0:01:53,926
not only works with strings, but

51
00:01:53,926 --> 0:01:55,076
any collection types.

52
00:01:55,256 --> 0:01:56,536
That was Ordered Collection

53
00:01:56,536 --> 0:01:56,946
Diffing.

54
00:01:57,446 --> 0:01:58,986
Now, let's talk about data and

55
00:01:58,986 --> 0:01:59,816
contiguity.

56
00:02:01,156 --> 0:02:02,306
Your app may be building

57
00:02:02,306 --> 0:02:04,386
pictures or other types of files

58
00:02:04,416 --> 0:02:05,096
from the disk.

59
00:02:05,886 --> 0:02:07,966
Usually, these forms of data can

60
00:02:07,966 --> 0:02:10,295
easily be represented by a

61
00:02:10,295 --> 0:02:12,326
contiguous area in memory.

62
00:02:13,676 --> 0:02:15,986
On the other hand, your app may

63
00:02:15,986 --> 0:02:17,556
be downloading data from the

64
00:02:17,556 --> 0:02:19,796
internet using dispatch data or

65
00:02:19,796 --> 0:02:21,426
URL session, for example.

66
00:02:22,316 --> 0:02:24,286
This produces bytes that arrive

67
00:02:24,316 --> 0:02:26,026
in multiple chunks in different

68
00:02:26,026 --> 0:02:27,836
time, and occupy these

69
00:02:27,836 --> 0:02:29,766
contiguous areas in memory.

70
00:02:31,896 --> 0:02:34,666
Prior to Swift 5, struct Data

71
00:02:34,666 --> 0:02:36,726
represented both contiguous and

72
00:02:36,726 --> 0:02:37,996
discontiguous regions.

73
00:02:38,806 --> 0:02:40,776
This unified interface was very

74
00:02:40,776 --> 0:02:43,516
simple to use, but it also meant

75
00:02:43,516 --> 0:02:44,986
that to provide whole buffer

76
00:02:44,986 --> 0:02:46,656
access to the underlying raw

77
00:02:46,656 --> 0:02:48,846
bytes, we needed to copy the

78
00:02:48,846 --> 0:02:52,956
regions into a contiguous area.

79
00:02:53,116 --> 0:02:54,616
This meant that the performance

80
00:02:54,706 --> 0:02:56,496
may sometimes be unpredictable.

81
00:02:57,276 --> 0:02:58,776
In fact, we have look at

82
00:02:58,966 --> 0:03:02,206
real-world usage of data, and

83
00:02:58,966 --> 0:03:02,206
real-world usage of data, and

84
00:03:02,206 --> 0:03:04,226
every discontiguous data gets

85
00:03:04,226 --> 0:03:04,666
flattened [assumed spelling]

86
00:03:04,776 --> 0:03:06,476
sometime during its lifecycle.

87
00:03:08,716 --> 0:03:11,816
So from Swift 5 and onwards, we

88
00:03:11,816 --> 0:03:14,056
promise that struct Data is a

89
00:03:14,056 --> 0:03:15,326
contiguous buffer type.

90
00:03:16,256 --> 0:03:17,886
And to present this promise in

91
00:03:17,886 --> 0:03:20,086
syntax, we introduce the

92
00:03:20,086 --> 0:03:21,746
ContiguousBytes protocol.

93
00:03:23,176 --> 0:03:25,026
Conforming to this protocol in

94
00:03:25,026 --> 0:03:26,606
the case that the type offers

95
00:03:26,666 --> 0:03:28,566
direct access to the underlying

96
00:03:28,566 --> 0:03:30,476
raw bytes in a contiguous

97
00:03:30,476 --> 0:03:30,936
manner.

98
00:03:31,546 --> 0:03:33,256
So you don't need to worry about

99
00:03:33,256 --> 0:03:34,646
accidentally flattening your

100
00:03:34,646 --> 0:03:35,546
data anymore.

101
00:03:36,166 --> 0:03:39,036
Now, how are we going to work

102
00:03:39,036 --> 0:03:40,616
with other buffer types that

103
00:03:40,616 --> 0:03:42,736
don't promise contiguity?

104
00:03:44,426 --> 0:03:46,536
We introduce two new protocols

105
00:03:46,756 --> 0:03:48,236
by taking struct Data's

106
00:03:48,236 --> 0:03:50,726
interface that's independent to

107
00:03:50,726 --> 0:03:53,146
contiguity and generalize it

108
00:03:53,146 --> 0:03:55,656
across various buffer types, and

109
00:03:55,656 --> 0:03:57,806
we arrive at DataProtocol.

110
00:03:58,686 --> 0:04:00,246
That is a collection of bytes

111
00:03:58,686 --> 0:04:00,246
That is a collection of bytes

112
00:04:00,916 --> 0:04:03,676
and MutableDataProtocol to offer

113
00:04:03,676 --> 0:04:04,976
additional mutability

114
00:04:04,976 --> 0:04:05,766
guarantees.

115
00:04:08,556 --> 0:04:10,076
Buffer types offered by

116
00:04:10,076 --> 0:04:12,116
Foundation the Swift Standard

117
00:04:12,116 --> 0:04:13,786
Library and the dispatch

118
00:04:13,826 --> 0:04:15,926
framework have adopted these

119
00:04:15,926 --> 0:04:16,536
protocols.

120
00:04:17,505 --> 0:04:18,625
You probably have worked with

121
00:04:18,625 --> 0:04:20,305
some of the types, including

122
00:04:20,416 --> 0:04:23,156
Data, array of UInt8 and

123
00:04:23,156 --> 0:04:24,056
DispatchData.

124
00:04:25,466 --> 0:04:26,986
We encourage you to adopt them

125
00:04:26,986 --> 0:04:29,226
on your types or methods too as

126
00:04:29,226 --> 0:04:30,466
a generic constraint.

127
00:04:33,676 --> 0:04:34,876
Now, let's talk about

128
00:04:34,876 --> 0:04:35,516
compression.

129
00:04:36,716 --> 0:04:38,306
Oftentimes, you want to make

130
00:04:38,306 --> 0:04:40,216
your data as small as possible.

131
00:04:41,026 --> 0:04:41,796
It could be that your

132
00:04:41,796 --> 0:04:43,096
application is running on

133
00:04:43,096 --> 0:04:45,406
devices with limited disk space

134
00:04:46,026 --> 0:04:47,226
or you need to transmit

135
00:04:47,226 --> 0:04:48,846
resources from or to the

136
00:04:48,846 --> 0:04:49,436
internet.

137
00:04:51,316 --> 0:04:52,906
This is a very common task.

138
00:04:53,456 --> 0:04:55,126
So we added the compression API

139
00:04:55,126 --> 0:04:56,456
to data in Swift.

140
00:04:57,096 --> 0:04:58,776
It is now as simple.

141
00:04:59,576 --> 0:04:59,936
Thank you.

142
00:05:00,516 --> 0:05:02,676
[ Applause ]

143
00:05:03,176 --> 0:05:04,856
It's as simple as this one line

144
00:05:05,066 --> 0:05:06,046
of code.

145
00:05:07,216 --> 0:05:09,196
The API also supports four

146
00:05:09,196 --> 0:05:11,936
compression algorithms to offer

147
00:05:11,936 --> 0:05:13,816
you different balances between

148
00:05:13,816 --> 0:05:16,116
speed, memory and compression

149
00:05:16,116 --> 0:05:16,676
ratio.

150
00:05:17,476 --> 0:05:19,296
I believe you can find one that

151
00:05:19,356 --> 0:05:20,486
best suits your needs.

152
00:05:23,036 --> 0:05:24,806
Now, let's move on to units.

153
00:05:25,756 --> 0:05:27,856
Foundation already supports 21

154
00:05:27,856 --> 0:05:29,496
classes to represent common

155
00:05:29,496 --> 0:05:31,746
physical units such as length,

156
00:05:32,086 --> 0:05:33,726
speed and duration.

157
00:05:35,106 --> 0:05:36,756
We extended the unit duration

158
00:05:36,756 --> 0:05:39,116
class with subsecond precision

159
00:05:39,116 --> 0:05:41,316
units up until picoseconds.

160
00:05:41,926 --> 0:05:43,626
That is a trillionth of a

161
00:05:43,686 --> 0:05:44,136
second.

162
00:05:45,446 --> 0:05:47,426
The unit frequency class uses

163
00:05:47,426 --> 0:05:49,506
hertz as a base unit currently,

164
00:05:50,086 --> 0:05:51,516
and this year it gained

165
00:05:51,626 --> 0:05:52,656
framesPerSecond.

166
00:05:53,686 --> 0:05:55,316
It's functionally equivalent to

167
00:05:55,386 --> 0:05:57,686
hertz but its cemented meaning

168
00:05:57,686 --> 0:05:59,346
makes it ideal to represent

169
00:05:59,416 --> 0:06:02,046
on-device FPS measurement.

170
00:05:59,416 --> 0:06:02,046
on-device FPS measurement.

171
00:06:04,076 --> 0:06:06,326
The UnitInformationStorage class

172
00:06:06,326 --> 0:06:06,666
is new.

173
00:06:06,666 --> 0:06:09,496
It can be used to represent the

174
00:06:09,496 --> 0:06:11,466
amount of digital information.

175
00:06:12,616 --> 0:06:14,876
The basic units are bits, bytes

176
00:06:15,096 --> 0:06:15,666
and nibbles.

177
00:06:16,526 --> 0:06:19,006
And the commonly used SI prefix

178
00:06:19,176 --> 0:06:21,596
and base-2 prefix units from

179
00:06:21,596 --> 0:06:24,716
kilo and kibi up until yotta and

180
00:06:24,716 --> 0:06:26,276
yobi are also supported.

181
00:06:27,746 --> 0:06:29,056
You can use it along with

182
00:06:29,706 --> 0:06:31,626
MeasurementFormatter to format,

183
00:06:31,886 --> 0:06:34,496
say, data size, or you can use

184
00:06:34,496 --> 0:06:36,416
it with ByteCountFormatter if

185
00:06:36,416 --> 0:06:37,986
you want more exact control.

186
00:06:38,526 --> 0:06:41,746
And we have more formatters for

187
00:06:41,746 --> 0:06:42,076
you.

188
00:06:42,626 --> 0:06:44,686
You probably have seen strings

189
00:06:44,686 --> 0:06:46,256
like these somewhere every day.

190
00:06:47,066 --> 0:06:48,706
Like, the status of a message

191
00:06:48,706 --> 0:06:51,456
you sent is read 1 hour ago, or

192
00:06:51,456 --> 0:06:53,936
there is a payment due tomorrow.

193
00:06:54,516 --> 0:06:56,836
That is a date or time displayed

194
00:06:56,836 --> 0:06:58,216
as a relative point to the

195
00:06:58,216 --> 0:06:58,706
present.

196
00:07:00,016 --> 0:07:02,516
It's not very trivial to make it

197
00:07:02,516 --> 0:07:05,356
correct for all locales, so we

198
00:07:05,426 --> 0:07:05,796
added the

199
00:07:05,796 --> 0:07:07,576
RelativeDateTimeFormatter to

200
00:07:07,576 --> 0:07:08,306
help you with this.

201
00:07:09,516 --> 0:07:14,196
[ Cheering ]

202
00:07:14,696 --> 0:07:14,916
Thank you.

203
00:07:15,826 --> 0:07:17,396
And just like other formatters,

204
00:07:17,726 --> 0:07:19,426
the return string is locale

205
00:07:19,496 --> 0:07:21,336
friendly, and there are multiple

206
00:07:21,336 --> 0:07:22,616
styles you can use.

207
00:07:24,576 --> 0:07:26,186
Another thing you probably want

208
00:07:26,186 --> 0:07:29,216
to format is a list, and we also

209
00:07:29,376 --> 0:07:31,026
added ListFormatter to make this

210
00:07:31,026 --> 0:07:32,366
super easy for you [laughs].

211
00:07:33,516 --> 0:07:36,896
[ Applause ]

212
00:07:37,396 --> 0:07:39,396
It formats a list into a string

213
00:07:39,426 --> 0:07:41,326
that uses the correct separator

214
00:07:41,326 --> 0:07:42,846
and conjunctions for all

215
00:07:42,846 --> 0:07:43,286
locales.

216
00:07:44,816 --> 0:07:46,256
Here is another example.

217
00:07:46,936 --> 0:07:48,066
Say there is an event that's

218
00:07:48,106 --> 0:07:49,216
going to occur at three

219
00:07:49,666 --> 0:07:50,956
different dates.

220
00:07:51,636 --> 0:07:53,286
So you probably want to show a

221
00:07:53,286 --> 0:07:56,336
string like the top or the one

222
00:07:56,336 --> 0:07:57,976
on the bottom that you spell out

223
00:07:57,976 --> 0:07:59,616
the name of the month on your

224
00:07:59,616 --> 0:08:01,086
Event page.

225
00:07:59,616 --> 0:08:01,086
Event page.

226
00:08:02,286 --> 0:08:03,576
And, of course, you want to

227
00:08:03,576 --> 0:08:05,136
display those using the correct

228
00:08:05,136 --> 0:08:06,876
format and localized name for

229
00:08:06,876 --> 0:08:07,836
different locales.

230
00:08:08,676 --> 0:08:10,436
This is important, because, for

231
00:08:10,436 --> 0:08:13,206
example, in Europe, they usually

232
00:08:13,206 --> 0:08:14,766
counting before month in

233
00:08:14,766 --> 0:08:15,246
writing.

234
00:08:16,656 --> 0:08:18,496
You can also do this very easily

235
00:08:18,496 --> 0:08:19,586
with ListFormatter.

236
00:08:21,776 --> 0:08:23,956
It comes with a property called

237
00:08:23,956 --> 0:08:26,286
itemFormatter whose role is to

238
00:08:26,286 --> 0:08:28,036
format each item in a list.

239
00:08:28,916 --> 0:08:30,776
In this case, we want to format

240
00:08:30,776 --> 0:08:33,395
a list of dates, and we know

241
00:08:33,395 --> 0:08:35,025
that Foundation supports date

242
00:08:35,025 --> 0:08:36,905
formatting using DateFormatter.

243
00:08:37,756 --> 0:08:39,626
So let's use it as our date

244
00:08:39,626 --> 0:08:40,566
itemFormatter.

245
00:08:41,946 --> 0:08:43,216
And this is all we need.

246
00:08:43,836 --> 0:08:44,356
We're all set.

247
00:08:45,826 --> 0:08:47,086
This gives your localized

248
00:08:47,086 --> 0:08:49,106
strings as the examples on the

249
00:08:49,106 --> 0:08:49,636
bottom.

250
00:08:52,836 --> 0:08:54,636
You can easily change the date

251
00:08:54,636 --> 0:08:56,446
style by setting the property on

252
00:08:56,446 --> 0:08:57,206
DateFormatter.

253
00:08:58,226 --> 0:08:59,776
ListFormatter works with all

254
00:08:59,776 --> 0:09:01,676
formatters, so please take

255
00:08:59,776 --> 0:09:01,676
formatters, so please take

256
00:09:01,676 --> 0:09:04,226
advantage of it and make string

257
00:09:04,226 --> 0:09:05,866
localized greatly in your

258
00:09:05,866 --> 0:09:06,756
application.

259
00:09:09,836 --> 0:09:11,446
So that was Formatter.

260
00:09:12,186 --> 0:09:13,666
Now let's move on to Operation

261
00:09:13,666 --> 0:09:14,056
Queue.

262
00:09:15,456 --> 0:09:17,376
Imagine in your app there are a

263
00:09:17,376 --> 0:09:18,836
bunch of background tasks

264
00:09:18,836 --> 0:09:19,986
running concurrently.

265
00:09:20,536 --> 0:09:23,806
At this moment, the user wants

266
00:09:23,806 --> 0:09:25,136
to save the state of this

267
00:09:25,136 --> 0:09:27,416
running app, so how would you do

268
00:09:27,416 --> 0:09:27,856
this?

269
00:09:28,956 --> 0:09:30,466
Well, you want to make sure all

270
00:09:30,466 --> 0:09:32,066
the running tasks are finished

271
00:09:32,176 --> 0:09:33,356
before you can save.

272
00:09:34,346 --> 0:09:36,346
So it might be tempting to do

273
00:09:36,346 --> 0:09:37,926
something like this.

274
00:09:39,156 --> 0:09:41,166
That is you check the number of

275
00:09:41,166 --> 0:09:42,746
running operations in the

276
00:09:42,746 --> 0:09:45,056
concurrent queue, and if there

277
00:09:45,056 --> 0:09:46,956
isn't any, it must mean that

278
00:09:46,956 --> 0:09:48,406
everything we scheduled must

279
00:09:48,406 --> 0:09:49,016
have finished.

280
00:09:49,616 --> 0:09:51,086
So we're ready to save, right?

281
00:09:52,256 --> 0:09:53,786
Nope, this is wrong.

282
00:09:54,176 --> 0:09:55,976
Please don't do this.

283
00:09:58,226 --> 0:09:59,976
It's possible that some other

284
00:09:59,976 --> 0:10:01,746
tasks are being scheduled at the

285
00:09:59,976 --> 0:10:01,746
tasks are being scheduled at the

286
00:10:01,746 --> 0:10:03,376
same time in all their threads,

287
00:10:03,936 --> 0:10:05,606
like right after the check

288
00:10:05,606 --> 0:10:07,506
passes and before the save

289
00:10:07,506 --> 0:10:08,096
happens.

290
00:10:08,726 --> 0:10:11,726
What you actually want here is a

291
00:10:11,726 --> 0:10:13,516
barrier to guard the safe

292
00:10:13,516 --> 0:10:15,726
operation and to make sure that

293
00:10:15,726 --> 0:10:18,196
no other tasks can run while the

294
00:10:18,196 --> 0:10:19,376
app is being saved.

295
00:10:20,606 --> 0:10:23,936
Something like this.

296
00:10:24,156 --> 0:10:26,006
So we're very excited to let you

297
00:10:26,006 --> 0:10:27,656
know that Operation Queue now

298
00:10:27,656 --> 0:10:28,716
supports barrier.

299
00:10:29,566 --> 0:10:31,026
You should add the BarrierBlock

300
00:10:31,466 --> 0:10:33,096
and put your saving operation

301
00:10:33,096 --> 0:10:34,216
inside the barrier.

302
00:10:35,086 --> 0:10:36,726
This guarantees that the save

303
00:10:36,726 --> 0:10:38,846
operation is the only task

304
00:10:38,976 --> 0:10:40,306
running at that particular

305
00:10:40,306 --> 0:10:42,846
period of time, and it only

306
00:10:42,846 --> 0:10:44,566
executes when everything

307
00:10:44,566 --> 0:10:46,086
previously scheduled is finished

308
00:10:46,756 --> 0:10:48,866
and that no other new jobs will

309
00:10:48,866 --> 0:10:51,406
run before it's finished.

310
00:10:52,516 --> 0:10:57,496
[ Applause ]

311
00:10:57,996 --> 0:10:59,346
Another update we have for

312
00:10:59,346 --> 0:11:00,776
Operation Queue is progress

313
00:10:59,346 --> 0:11:00,776
Operation Queue is progress

314
00:11:00,776 --> 0:11:01,416
reporting.

315
00:11:02,366 --> 0:11:03,816
Sometimes you may want to track

316
00:11:03,866 --> 0:11:05,356
the overall progress of your

317
00:11:05,356 --> 0:11:07,336
concurrent jobs and maybe

318
00:11:07,336 --> 0:11:09,436
display a progress bar in your

319
00:11:09,866 --> 0:11:09,956
UI.

320
00:11:10,356 --> 0:11:12,186
You can now do this by setting

321
00:11:12,186 --> 0:11:14,176
the totalUnitCount on the

322
00:11:14,176 --> 0:11:15,986
progress property of the

323
00:11:15,986 --> 0:11:16,986
Operation Queue.

324
00:11:18,376 --> 0:11:20,166
Each operation you added to the

325
00:11:20,166 --> 0:11:22,126
Operation Queue counterbuilds

326
00:11:22,126 --> 0:11:23,036
[assumed spelling] one unit of

327
00:11:23,036 --> 0:11:24,706
completion to the overall

328
00:11:24,706 --> 0:11:26,566
progress once operation is

329
00:11:26,596 --> 0:11:26,976
finished.

330
00:11:32,626 --> 0:11:34,036
Next up. Filesystem.

331
00:11:35,116 --> 0:11:37,546
iOS now supports USB and SMB

332
00:11:37,546 --> 0:11:39,386
volumes, which is a network

333
00:11:39,386 --> 0:11:40,196
filesystem.

334
00:11:41,126 --> 0:11:42,426
This means that you should be

335
00:11:42,426 --> 0:11:44,086
prepared to handle files that

336
00:11:44,086 --> 0:11:45,866
may exist on other volumes.

337
00:11:46,956 --> 0:11:48,016
So make sure you use

338
00:11:48,106 --> 0:11:48,956
FileManager's

339
00:11:48,956 --> 0:11:51,306
itemReplacementDirectory when

340
00:11:51,306 --> 0:11:53,016
choosing locations to write new

341
00:11:53,016 --> 0:11:55,166
file contents to when doing an

342
00:11:55,166 --> 0:11:57,916
Atomic Safe-Save operation.

343
00:11:59,336 --> 0:12:01,766
Next, be prepared that volumes

344
00:11:59,336 --> 0:12:01,766
Next, be prepared that volumes

345
00:12:01,766 --> 0:12:03,786
may disappear completely if the

346
00:12:03,786 --> 0:12:06,306
user pulls out the USB drive or

347
00:12:06,306 --> 0:12:08,186
you lose network connectivity to

348
00:12:08,186 --> 0:12:09,306
an SMB server.

349
00:12:10,626 --> 0:12:11,946
So if you choose the memory

350
00:12:11,946 --> 0:12:13,536
mapped files when reading data

351
00:12:13,536 --> 0:12:15,946
objects, make sure you use

352
00:12:16,316 --> 0:12:18,136
mappedIfSafe as your reading

353
00:12:18,136 --> 0:12:18,666
option.

354
00:12:19,696 --> 0:12:21,306
This will allow the system to

355
00:12:21,306 --> 0:12:23,446
map the file into virtual memory

356
00:12:23,446 --> 0:12:26,286
but only if the file is located

357
00:12:26,396 --> 0:12:28,016
on nonremovable volumes.

358
00:12:28,806 --> 0:12:31,176
Accessing files from USB or SMB

359
00:12:31,176 --> 0:12:33,206
drive may be tangibly slower

360
00:12:33,206 --> 0:12:34,746
than when you access files on

361
00:12:34,746 --> 0:12:35,636
the internal drive.

362
00:12:36,886 --> 0:12:38,016
So if you're not doing this

363
00:12:38,016 --> 0:12:40,116
already, please defer file

364
00:12:40,116 --> 0:12:42,296
system access to non-main thread

365
00:12:42,696 --> 0:12:44,366
to make sure your app remains

366
00:12:44,366 --> 0:12:45,016
responsive.

367
00:12:45,596 --> 0:12:48,426
You may need to test file system

368
00:12:48,426 --> 0:12:50,136
capabilities before you use

369
00:12:50,136 --> 0:12:50,446
them.

370
00:12:51,376 --> 0:12:53,976
For instance, the APFS features

371
00:12:53,976 --> 0:12:55,536
that you're familiar with like

372
00:12:55,606 --> 0:12:58,536
cloning may not be available

373
00:12:58,536 --> 0:13:00,486
when you access external volumes

374
00:12:58,536 --> 0:13:00,486
when you access external volumes

375
00:13:00,586 --> 0:13:02,386
via USB or SMB.

376
00:13:03,786 --> 0:13:05,006
You can test for these

377
00:13:05,146 --> 0:13:06,986
capabilities in events with

378
00:13:07,036 --> 0:13:10,156
various URL resource keys, or

379
00:13:10,156 --> 0:13:11,846
you can make sure you're

380
00:13:11,846 --> 0:13:13,976
prepared to handle and receive

381
00:13:13,976 --> 0:13:14,436
errors.

382
00:13:15,706 --> 0:13:17,286
You can find more information

383
00:13:17,286 --> 0:13:19,756
about this in the What's New in

384
00:13:19,756 --> 0:13:21,816
File Management and QuickLook

385
00:13:22,426 --> 0:13:22,526
talk.

386
00:13:25,676 --> 0:13:27,016
Next up. Swift update.

387
00:13:28,716 --> 0:13:30,806
Some Swift APIs were designed

388
00:13:30,806 --> 0:13:32,676
originally with Objective-C in

389
00:13:32,676 --> 0:13:35,936
mind, and we continued to

390
00:13:35,936 --> 0:13:37,536
improve them over the years.

391
00:13:38,456 --> 0:13:39,546
First is scanner.

392
00:13:40,146 --> 0:13:43,536
This is the API in Swift 4.

393
00:13:44,466 --> 0:13:47,716
It used to use NSString and

394
00:13:47,716 --> 0:13:49,266
return objects by reference.

395
00:13:51,266 --> 0:13:54,596
In Swift 5.1, we simplify this

396
00:13:54,596 --> 0:13:56,336
interface to this one line of

397
00:13:56,466 --> 0:13:56,716
code.

398
00:13:58,636 --> 0:14:01,466
What's more, the new API uses

399
00:13:58,636 --> 0:14:01,466
What's more, the new API uses

400
00:14:01,616 --> 0:14:04,436
the string type of Swift so that

401
00:14:04,516 --> 0:14:06,086
strings are collections of

402
00:14:06,176 --> 0:14:08,396
graphing instead of code points.

403
00:14:09,356 --> 0:14:11,126
This means that you can now work

404
00:14:11,126 --> 0:14:12,906
on complex sequences with the

405
00:14:12,906 --> 0:14:15,556
new scanner API perfectly, such

406
00:14:15,556 --> 0:14:16,426
as emojis.

407
00:14:19,656 --> 0:14:21,116
Another improvement is

408
00:14:21,116 --> 0:14:21,916
FileHandle.

409
00:14:22,996 --> 0:14:24,756
It used to throw exceptions when

410
00:14:24,756 --> 0:14:27,176
errors occur on the underlying

411
00:14:27,216 --> 0:14:28,136
file descriptor.

412
00:14:29,256 --> 0:14:30,736
This year, we introduced

413
00:14:30,736 --> 0:14:33,526
error-based API, so you can now

414
00:14:33,526 --> 0:14:35,626
handle the error right away at

415
00:14:35,626 --> 0:14:36,256
call sites.

416
00:14:36,256 --> 0:14:39,466
The API for writing data now

417
00:14:39,536 --> 0:14:41,526
also works with data protocol.

418
00:14:42,306 --> 0:14:44,116
It's also optimized to work with

419
00:14:44,256 --> 0:14:46,206
noncontiguous data.

420
00:14:48,476 --> 0:14:49,946
So these were the highlights of

421
00:14:49,946 --> 0:14:50,646
the new APIs.

422
00:14:51,706 --> 0:14:53,306
We encourage you to grab the new

423
00:14:53,306 --> 0:14:55,296
Xcode and try these exciting

424
00:14:55,336 --> 0:14:56,026
features out.

425
00:14:57,266 --> 0:14:58,916
When writing new methods to work

426
00:14:58,916 --> 0:15:01,486
with binary data, consider

427
00:14:58,916 --> 0:15:01,486
with binary data, consider

428
00:15:01,486 --> 0:15:03,016
making them bound on the data

429
00:15:03,016 --> 0:15:04,886
protocol type instead of

430
00:15:04,886 --> 0:15:06,776
requiring particular collection,

431
00:15:07,236 --> 0:15:09,096
like array of UInt8.

432
00:15:10,466 --> 0:15:12,386
If you're displaying dates or

433
00:15:12,386 --> 0:15:15,146
lists in your UI with strings,

434
00:15:16,506 --> 0:15:19,586
use RelativeDateTimeFormatter or

435
00:15:19,586 --> 0:15:21,526
a ListFormatter to makes sure

436
00:15:21,526 --> 0:15:23,356
the string work in every locale.

437
00:15:23,956 --> 0:15:26,956
We urge you to use Operation

438
00:15:26,956 --> 0:15:29,316
Queue's barrier to avoid race

439
00:15:29,316 --> 0:15:30,056
condition.

440
00:15:31,106 --> 0:15:32,666
And if you're using some sort of

441
00:15:32,776 --> 0:15:34,436
progress-reporting mechanism,

442
00:15:35,146 --> 0:15:36,896
switch to use the one provided

443
00:15:36,896 --> 0:15:37,996
by Operation Queue.

444
00:15:38,776 --> 0:15:39,506
Thank you.

445
00:15:40,516 --> 0:15:45,500
[ Applause ]
