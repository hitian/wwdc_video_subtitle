1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:10,516 --> 0:00:14,946
[掌声]

3
00:00:15,446 --> 0:00:16,226
&gt;&gt; 欢迎各位

4
00:00:16,616 --> 0:00:18,016
我叫 Stephane 是地图团队中的

5
00:00:18,016 --> 0:00:19,546
一名工程师 

6
00:00:19,596 --> 0:00:21,246
我将和我的同事 Mithilesh 一起

7
00:00:21,246 --> 0:00:22,336
和各位开发者来聊聊

8
00:00:22,406 --> 0:00:24,386
如何在你们的 App 和网站里添加室内地图

9
00:00:26,306 --> 0:00:28,116
在 iOS 11 中 我们引入了室内地图

10
00:00:28,116 --> 0:00:29,626
作为 Apple 地图的一部分

11
00:00:30,586 --> 0:00:32,386
我们为机场和商场等场所

12
00:00:32,386 --> 0:00:33,856
提供了漂亮且

13
00:00:33,856 --> 0:00:35,186
详细的平面图

14
00:00:36,196 --> 0:00:37,786
当你处在室内空间时

15
00:00:37,786 --> 0:00:39,826
室内地图可以很好的帮助你

16
00:00:39,826 --> 0:00:41,286
查看和搜索你在室内的路径

17
00:00:43,026 --> 0:00:45,036
使用楼层选择器 你可以在

18
00:00:45,036 --> 0:00:46,616
不同的楼层间进行切换

19
00:00:46,616 --> 0:00:48,716
并且在这些场所内你得到的室内位置

20
00:00:48,716 --> 0:00:51,516
是与 GPS 相似的 甚至更好

21
00:00:52,986 --> 0:00:54,366
今天 我们就将和

22
00:00:54,366 --> 0:00:55,706
各位探讨一下 开发者如何在

23
00:00:55,946 --> 0:00:57,716
自己的 App 中呈现室内地图以及

24
00:00:58,136 --> 0:00:59,376
室内定位

25
00:01:01,356 --> 0:01:02,836
我们一开始将探讨一下

26
00:01:02,836 --> 0:01:04,105
室内地图的数据格式

27
00:01:04,796 --> 0:01:06,646
之后我们将为各位

28
00:01:06,646 --> 0:01:08,276
介绍一些室内地图项目中的

29
00:01:08,276 --> 0:01:10,046
可用的工具

30
00:01:11,036 --> 0:01:12,186
之后我们将为各位展示

31
00:01:12,186 --> 0:01:14,266
如何在 iOS 和 web 的 App 当中

32
00:01:14,266 --> 0:01:15,606
展示室内地图

33
00:01:16,156 --> 0:01:18,246
那么 我们开始吧

34
00:01:19,146 --> 0:01:21,076
IMDF 代表的是

35
00:01:21,076 --> 0:01:23,146
Indoor Mapping Data Format

36
00:01:23,146 --> 0:01:25,176
它是一种特定的室内空间的建模规范

37
00:01:26,246 --> 0:01:27,736
但在讨论更多细节之前

38
00:01:27,736 --> 0:01:28,936
让我们先退一步

39
00:01:29,086 --> 0:01:32,796
仔细看看室内地图的一般含义

40
00:01:33,236 --> 0:01:36,156
室内地图和一般地图一样

41
00:01:36,156 --> 0:01:38,166
是由许多层组成

42
00:01:38,166 --> 0:01:39,946
每一层可能都

43
00:01:40,426 --> 0:01:41,706
分别包含着一些特性

44
00:01:42,646 --> 0:01:43,816
比方说 我们把这张地图分解一下

45
00:01:44,476 --> 0:01:48,336
室内地图的基础是建筑的覆盖区域

46
00:01:49,016 --> 0:01:51,326
之后我们就会得到一个平面

47
00:01:51,326 --> 0:01:54,006
在这个平面上 我们可以找到一些

48
00:01:54,006 --> 0:01:55,936
细节的空间单元 比如房间和过道

49
00:01:56,526 --> 0:02:00,996
这些空间单元有门 我们还可以看到

50
00:01:56,526 --> 0:02:00,996
这些空间单元有门 我们还可以看到

51
00:02:00,996 --> 0:02:03,576
在商场里经常看到的售货亭

52
00:02:04,216 --> 0:02:06,766
房间和售货亭都有标签

53
00:02:06,766 --> 0:02:08,496
比如 标记出使用该房间的

54
00:02:08,496 --> 0:02:11,726
企业的名称

55
00:02:11,786 --> 0:02:13,106
或者是用图案标记出

56
00:02:13,106 --> 0:02:14,246
像是电梯和卫生间

57
00:02:14,246 --> 0:02:16,586
这样的公共设施

58
00:02:16,736 --> 0:02:21,476
最后 还有可以用

59
00:02:21,476 --> 0:02:23,806
虚拟边界把多个空间单元

60
00:02:23,886 --> 0:02:25,096
划归到一个区域内

61
00:02:26,516 --> 0:02:27,816
好了 这就是用来制作室内地图的

62
00:02:27,816 --> 0:02:29,146
一些图层的样例

63
00:02:30,316 --> 0:02:32,186
因此 为了能进行准确地描述

64
00:02:32,486 --> 0:02:35,006
也为了能够

65
00:02:35,006 --> 0:02:36,446
创建和显示出这样的地图

66
00:02:36,446 --> 0:02:38,456
我们需要一种新的方式

67
00:02:38,456 --> 0:02:40,156
可以用于准确的描述它的内容

68
00:02:41,126 --> 0:02:43,000
这就需要 IMDF 这种数据格式发挥作用

69
00:02:44,286 --> 0:02:46,136
IMDF 是进行室内空间

70
00:02:46,136 --> 0:02:47,356
建模的一种规范

71
00:02:48,646 --> 0:02:52,636
它是一种基于 GeoJSON 的二维数据格式

72
00:02:52,636 --> 0:02:55,236
不仅易于创建和理解

73
00:02:55,236 --> 0:02:57,186
而且方便应用程序调用

74
00:02:58,136 --> 0:03:00,996
一个 IMDF 档案就是一组 JSON 文件

75
00:02:58,136 --> 0:03:00,996
一个 IMDF 档案就是一组 JSON 文件

76
00:03:03,236 --> 0:03:05,486
更进一步来说

77
00:03:05,486 --> 0:03:07,506
它由一个 manifest.json 文件以及

78
00:03:07,506 --> 0:03:10,216
多个 GeoJSON 文件组成

79
00:03:10,216 --> 0:03:11,416
每个文件都是一组特征的集合

80
00:03:11,416 --> 0:03:14,386
这些特征又可以赋予 IMDF 的特征以类型

81
00:03:15,696 --> 0:03:18,016
也就是说每个 IMDF 特征就是一个

82
00:03:18,016 --> 0:03:18,826
寻常的 GeoJSON 的特征

83
00:03:19,536 --> 0:03:21,856
其中包含一个负责表明类型的 type（特征）

84
00:03:21,856 --> 0:03:24,156
也许会有一个 geometry（几何对象）

85
00:03:23,696 --> 0:03:24,156
并且会有一组 properties（属性）

86
00:03:25,566 --> 0:03:27,216
IMDF 规范还要求提供一个 ID

87
00:03:27,216 --> 0:03:28,926
这个 ID 是一个 UUID 类型的字符串

88
00:03:28,926 --> 0:03:31,466
并且还需要一个额外的

89
00:03:31,466 --> 0:03:33,586
称作 feature_type 即特征类型的项 这一项的值

90
00:03:33,586 --> 0:03:35,556
表明正在建模的是某一种室内空间的对象

91
00:03:36,246 --> 0:03:38,486
让我们来看看

92
00:03:38,486 --> 0:03:40,886
IMDF 的一些主要的特征类型吧

93
00:03:43,586 --> 0:03:45,346
level 类型模拟的是楼层区域的

94
00:03:45,346 --> 0:03:47,716
位置信息以及物理范围

95
00:03:48,866 --> 0:03:50,926
每个 level 还有一个全称

96
00:03:50,926 --> 0:03:53,416
比如说这里的 Parking Level 1

97
00:03:53,886 --> 0:03:56,436
再配个缩写像是 P1  下面这个属性

98
00:03:56,436 --> 0:03:57,966
则用来指出它是属于哪一栋建筑的

99
00:03:59,166 --> 0:04:00,516
它还有一个序数

100
00:03:59,166 --> 0:04:00,516
它还有一个序数

101
00:04:00,896 --> 0:04:02,996
代表了该楼层

102
00:04:02,996 --> 0:04:04,966
在建筑的总楼层范围内的位置

103
00:04:06,446 --> 0:04:08,106
一楼的序数对应的是 0

104
00:04:08,106 --> 0:04:10,956
地下楼层使用负数来表示

105
00:04:11,036 --> 0:04:13,236
当然与之对应的

106
00:04:13,236 --> 0:04:16,546
地上楼层使用正数

107
00:04:19,096 --> 0:04:21,185
每一个楼层都是由各个空间单元组成的

108
00:04:21,726 --> 0:04:23,006
unit 类型则是模拟了

109
00:04:23,056 --> 0:04:24,266
空间里的位置和范围

110
00:04:24,266 --> 0:04:27,446
它可以代表房间 过道 楼梯间 或是 电梯

111
00:04:29,366 --> 0:04:31,826
opening 类型则模拟了像是门一类的入口

112
00:04:32,866 --> 0:04:33,956
其中可以定义一些有趣的属性

113
00:04:33,956 --> 0:04:35,716
像是这个入口的可访问性

114
00:04:35,716 --> 0:04:38,486
或者是访问控制系统的类型

115
00:04:39,056 --> 0:04:42,756
kiosk 类型则模拟的是一些装置和设施

116
00:04:42,976 --> 0:04:44,876
一般是一些用来提供服务

117
00:04:44,916 --> 0:04:46,546
或是分销产品的

118
00:04:47,046 --> 0:04:49,306
比如说一个咨询台或者是自动售货机

119
00:04:49,996 --> 0:04:52,936
多亏有了 occupant 这种特征类型

120
00:04:52,936 --> 0:04:55,376
我们就可以把商业信息添加到地图当中

121
00:04:55,476 --> 0:04:57,676
occupant 这种类型可以

122
00:04:57,676 --> 0:04:59,766
提供包括商户的名字 电话号码

123
00:04:59,766 --> 0:05:00,966
营业时间在内的商业信息

124
00:04:59,766 --> 0:05:00,966
营业时间在内的商业信息

125
00:05:02,306 --> 0:05:04,246
这个类型里面不包含 geometry 对象

126
00:05:04,246 --> 0:05:05,456
但是我们可以通过它关联的

127
00:05:05,866 --> 0:05:10,616
anchor 对象获取它们的显示点和地址

128
00:05:10,856 --> 0:05:12,666
anchor 类型代表的是一种用于引导的锚点

129
00:05:12,666 --> 0:05:13,996
它们给一个单元区域

130
00:05:13,996 --> 0:05:15,496
赋予了外围呈现位置

131
00:05:16,556 --> 0:05:17,986
它们也可能会引用某个地址

132
00:05:19,106 --> 0:05:21,466
anchor 类型在 IMDF 中起着重要的作用

133
00:05:22,106 --> 0:05:23,566
其他的一些特征类型 比如之前提过的

134
00:05:23,566 --> 0:05:26,476
occupant unit 或者是 kiosk 都需要通过

135
00:05:26,526 --> 0:05:30,626
anchor 类型的对象才能连接到地址之上

136
00:05:30,846 --> 0:05:32,406
我们可能还想增加一些便利设施

137
00:05:33,156 --> 0:05:34,396
amenity 这样的特征类型就可以

138
00:05:34,486 --> 0:05:36,366
用来模拟永久性的设施

139
00:05:36,366 --> 0:05:38,376
或是其他便利设施

140
00:05:38,376 --> 0:05:40,096
比如说照相亭 ATM 机 或者是

141
00:05:40,096 --> 0:05:44,216
某个展品之类的

142
00:05:44,406 --> 0:05:45,976
section 这种特征类型用于

143
00:05:45,976 --> 0:05:47,476
描述在一个楼层内

144
00:05:47,476 --> 0:05:49,126
具有特定主题的区域范围

145
00:05:49,126 --> 0:05:50,876
比如说购物中心的美食广场

146
00:05:50,876 --> 0:05:53,546
或是机场内的安检区域

147
00:05:54,856 --> 0:05:56,106
section 这种类型不需要

148
00:05:56,106 --> 0:05:58,316
通过物理边界来具体化

149
00:06:01,276 --> 0:06:03,396
building 类型就是用来描述现实中的建筑物

150
00:06:04,006 --> 0:06:06,006
它们会有一个名字并且还有一个地址

151
00:06:06,866 --> 0:06:08,046
但是 这一类型中并不包含 geometry（几何对象）

152
00:06:08,046 --> 0:06:10,146
来描述建筑物的范围

153
00:06:10,146 --> 0:06:12,006
而把这件事交给

154
00:06:12,006 --> 0:06:14,046
另一种称作 footprint 的特征类型来实现

155
00:06:15,576 --> 0:06:16,996
footprint 可以分成 3 个类型

156
00:06:17,516 --> 0:06:19,926
aerial 型的 footprint 能用来圈定

157
00:06:19,926 --> 0:06:22,296
建筑物地面以上部分的最大范围

158
00:06:23,366 --> 0:06:24,416
ground 型的 footprint 圈定

159
00:06:24,416 --> 0:06:25,616
地面区域的最大范围

160
00:06:25,616 --> 0:06:27,536
而 subterranean 型的

161
00:06:27,536 --> 0:06:32,086
footprint 则圈定地下楼层的最大范围

162
00:06:33,466 --> 0:06:35,246
好了 刚才我们简要的

163
00:06:35,246 --> 0:06:37,676
概述了一下 IMDF 的主要的特征类型

164
00:06:38,586 --> 0:06:40,716
多亏了 IMDF 我们才能够使用

165
00:06:40,716 --> 0:06:44,046
一种正式且灵活的方式描述室内空间

166
00:06:45,076 --> 0:06:46,406
但是 其实 IMDF 规范中还

167
00:06:46,406 --> 0:06:47,226
涵盖了更多的内容

168
00:06:47,846 --> 0:06:51,846
你可以到 register.apple.com 去查看更多的内容

169
00:06:52,286 --> 0:06:54,686
Apple 与许多顶级的

170
00:06:54,686 --> 0:06:56,386
平台供应商合作

171
00:06:56,386 --> 0:06:58,546
提供支持 IMDF 的地理空间工具

172
00:06:59,536 --> 0:07:00,886
你可以直接使用这些

173
00:06:59,536 --> 0:07:00,886
你可以直接使用这些

174
00:07:01,256 --> 0:07:03,596
来为你的场所创建一个 IMDF 档案文件

175
00:07:05,206 --> 0:07:06,986
你可以立即就启用这个档案文件

176
00:07:06,986 --> 0:07:08,486
并将其显示在你的 App 之中

177
00:07:08,486 --> 0:07:10,686
我们将在稍后进行演示

178
00:07:11,266 --> 0:07:14,856
如果你想启用室内定位

179
00:07:14,856 --> 0:07:16,036
又该如何操作呢

180
00:07:17,076 --> 0:07:17,976
好了 我们的室内地图项目

181
00:07:17,976 --> 0:07:19,826
就是来解决这种需求的

182
00:07:20,516 --> 0:07:22,766
通过参与室内地图项目

183
00:07:22,766 --> 0:07:23,976
你可以使用

184
00:07:23,976 --> 0:07:25,396
Apple 提供的一些工具

185
00:07:25,396 --> 0:07:27,616
来对你的数据进行

186
00:07:27,696 --> 0:07:28,896
可视化和验证操作

187
00:07:29,786 --> 0:07:31,496
更有趣的是

188
00:07:31,536 --> 0:07:33,036
你还可以为你的场所添加室内定位功能

189
00:07:33,036 --> 0:07:34,856
或是标记用户所处位置的蓝点功能

190
00:07:35,596 --> 0:07:37,176
此外 你还可以

191
00:07:37,346 --> 0:07:38,906
允许 Apple 在 Apple 地图中

192
00:07:38,906 --> 0:07:44,186
显示你的建筑场所信息

193
00:07:44,186 --> 0:07:45,386
注册室内地图项目

194
00:07:45,386 --> 0:07:48,156
仅需登录 register.Apple.com/indoor

195
00:07:49,116 --> 0:07:51,236
注册起来非常的简单易行

196
00:07:51,676 --> 0:07:52,886
你只需要提供一些

197
00:07:52,886 --> 0:07:54,326
关于你自己以及

198
00:07:54,326 --> 0:07:56,626
你所在的组织的基本信息

199
00:07:56,626 --> 0:07:58,596
比如 名字 位置 和 地址

200
00:07:59,176 --> 0:08:02,366
一旦 Apple 审核

201
00:07:59,176 --> 0:08:02,366
一旦 Apple 审核

202
00:08:02,366 --> 0:08:03,846
并批准了你的 App

203
00:08:03,846 --> 0:08:05,486
你就可以开始与你的

204
00:08:05,486 --> 0:08:07,296
地理空间工具的供应商展开合作

205
00:08:07,296 --> 0:08:08,626
来创建 IMDF 存档文件

206
00:08:08,626 --> 0:08:11,776
当你有了存档文件之后

207
00:08:11,776 --> 0:08:13,376
你就可以使用 IMDF 沙箱

208
00:08:13,376 --> 0:08:14,616
来验证它了

209
00:08:15,276 --> 0:08:19,016
IMDF 沙箱是一个工具

210
00:08:19,016 --> 0:08:20,516
它可以用来将 IMDF 数据

211
00:08:20,516 --> 0:08:22,076
进行可视化并验证

212
00:08:22,856 --> 0:08:24,006
它报告的大多数问题

213
00:08:24,106 --> 0:08:26,226
都可以通过单击几下就立即得到解决

214
00:08:27,426 --> 0:08:28,836
有一些错误可能会

215
00:08:28,836 --> 0:08:30,396
需要更多的工作

216
00:08:30,396 --> 0:08:31,806
这时你可能希望把你的数据提取回来

217
00:08:31,806 --> 0:08:34,916
交给地图制作方进行再修复

218
00:08:35,145 --> 0:08:36,836
当 IMDF 沙箱没有反馈错误时

219
00:08:36,836 --> 0:08:38,916
你可以把你的数据提交至

220
00:08:39,186 --> 0:08:40,956
更费时的验证测试

221
00:08:41,895 --> 0:08:43,486
如果没有检测到问题的话

222
00:08:43,486 --> 0:08:44,476
你就可以进入到下一个阶段

223
00:08:44,686 --> 0:08:46,516
使用室内测量 App

224
00:08:46,516 --> 0:08:49,986
为你的场所启用室内定位

225
00:08:51,276 --> 0:08:53,146
室内测量 App 是

226
00:08:53,146 --> 0:08:55,656
你在 iOS 上启用室内定位的配套程序

227
00:08:56,976 --> 0:08:58,996
通过收集所在地点的

228
00:08:58,996 --> 0:09:01,026
射频纹理特征来测量你的场所

229
00:08:58,996 --> 0:09:01,026
射频纹理特征来测量你的场所

230
00:09:01,986 --> 0:09:03,346
测量依赖于这样一个事实

231
00:09:03,806 --> 0:09:05,616
那就是建筑物内固定的

232
00:09:05,666 --> 0:09:07,256
WiFi 接入点所发出的

233
00:09:07,316 --> 0:09:09,066
射频模式是独特的

234
00:09:09,066 --> 0:09:10,826
而且射频模式取决于你所处的位置

235
00:09:11,436 --> 0:09:14,816
当测量完成时

236
00:09:14,816 --> 0:09:16,136
测量数据会被上传到 Apple 的服务器

237
00:09:16,136 --> 0:09:17,316
并进行处理

238
00:09:17,716 --> 0:09:20,066
如果没有报错的话

239
00:09:20,736 --> 0:09:22,416
你的场所的室内位置就会变成实时的

240
00:09:23,596 --> 0:09:25,276
你可以用一个测试 App

241
00:09:25,276 --> 0:09:27,676
来测一下室内位置的准确性

242
00:09:29,006 --> 0:09:31,526
测量的过程是非常简单和直观的

243
00:09:32,366 --> 0:09:33,466
我们有一些指导方针

244
00:09:33,466 --> 0:09:35,416
以便帮助你获得最好的结果

245
00:09:37,226 --> 0:09:40,146
好了 这样一来 你就已经创建了

246
00:09:40,146 --> 0:09:42,366
IMDF 档案文件 并且还对其进行了验证

247
00:09:42,366 --> 0:09:44,086
你还有可能已经启用了室内定位

248
00:09:44,836 --> 0:09:46,126
下一步就是

249
00:09:46,586 --> 0:09:47,746
在你的 App 和网站上显示它

250
00:09:48,786 --> 0:09:50,056
接下来我将让我的同事 Mithilesh

251
00:09:50,056 --> 0:09:51,126
来为大家展示

252
00:09:51,246 --> 0:09:53,976
如何把室内地图呈现在 iOS App 当中

253
00:09:54,516 --> 0:09:57,986
[掌声]

254
00:09:58,486 --> 0:09:59,126
&gt;&gt; 谢谢 Stephane

255
00:10:01,006 --> 0:10:03,476
大家好 我是 Mithilesh

256
00:10:03,476 --> 0:10:04,576
是地图团队的一名工程师

257
00:10:05,486 --> 0:10:06,716
我在这里向各位展示

258
00:10:06,716 --> 0:10:09,246
如何使用 IMDF 数据

259
00:10:09,246 --> 0:10:11,086
在 iOS App 中显示室内地图

260
00:10:11,676 --> 0:10:15,266
我们将为恐龙博物馆的

261
00:10:15,266 --> 0:10:16,696
游客创建一个简单的 App

262
00:10:17,276 --> 0:10:19,286
我们就叫它《Dinoseum》

263
00:10:20,296 --> 0:10:21,666
这款 App 会显示一个

264
00:10:21,666 --> 0:10:23,136
博物馆的地图 其中包含有

265
00:10:23,396 --> 0:10:24,916
不同的展品 餐厅 商店等等

266
00:10:26,076 --> 0:10:28,026
博物馆的各个区域

267
00:10:28,026 --> 0:10:29,486
都有描述性的标签和图标

268
00:10:29,486 --> 0:10:31,326
用户可以点击这些标签和图标

269
00:10:31,326 --> 0:10:33,416
来显示详细信息

270
00:10:35,276 --> 0:10:36,716
在右上角 我们有一个楼层切换器

271
00:10:36,716 --> 0:10:38,656
来切换至不同的楼层

272
00:10:39,356 --> 0:10:42,176
这款 App 还利用室内定位

273
00:10:42,176 --> 0:10:43,796
来显示用户在

274
00:10:43,796 --> 0:10:45,896
博物馆内的位置

275
00:10:47,066 --> 0:10:49,996
那么 构建这款 App 都需要什么呢

276
00:10:50,296 --> 0:10:52,056
显示一个基本的室内地图

277
00:10:52,126 --> 0:10:53,316
可以分为 3 个步骤

278
00:10:55,026 --> 0:10:57,096
第 1 步 我们将向项目中

279
00:10:57,126 --> 0:10:59,466
添加 IMDF 文件

280
00:10:59,466 --> 0:11:03,096
并为每一种特征类型创建模型类

281
00:10:59,466 --> 0:11:03,096
并为每一种特征类型创建模型类

282
00:11:03,276 --> 0:11:05,186
第 2 步 我们将解码

283
00:11:05,186 --> 0:11:08,496
IMDF 文件 并且给模型类创建实例

284
00:11:09,436 --> 0:11:10,846
然后我们给这些实例化后的特征类型的对象

285
00:11:10,846 --> 0:11:12,536
创建一个关系图 将它们关联起来

286
00:11:13,986 --> 0:11:15,446
场所由建筑物构成

287
00:11:15,726 --> 0:11:17,606
建筑物包含有足迹和楼层

288
00:11:17,866 --> 0:11:19,636
楼层中又包含有空间单元和出入口

289
00:11:20,086 --> 0:11:24,426
以此类推 第 3 步 我们将从已经解码了的

290
00:11:24,426 --> 0:11:26,546
特征对象中检索它们

291
00:11:26,546 --> 0:11:28,276
在 GeoJSON 文件中的几何对象

292
00:11:28,276 --> 0:11:30,636
并把它们呈现出来以此创建室内地图

293
00:11:32,456 --> 0:11:33,556
现在 让我们快速浏览下

294
00:11:33,556 --> 0:11:34,686
需要编写的代码吧

295
00:11:36,116 --> 0:11:38,106
对于第 1 步而言 我们创建一个

296
00:11:38,106 --> 0:11:39,646
名为 feature 的抽象类

297
00:11:41,306 --> 0:11:43,246
每一个 IMDF 的特征对象都必须有一个

298
00:11:43,246 --> 0:11:44,276
唯一的标识符

299
00:11:44,936 --> 0:11:47,656
他还必须有一组

300
00:11:47,746 --> 0:11:51,006
描述特征的属性

301
00:11:51,186 --> 0:11:53,806
它也许还会包含有 geometry 对象

302
00:11:53,806 --> 0:11:55,606
也就是一个 MKShape 数组对象

303
00:11:57,166 --> 0:11:58,536
使用上面的抽象类作为基类

304
00:11:58,716 --> 0:11:59,586
我们将会为像是 unit（空间单元）

305
00:11:59,586 --> 0:12:01,036
这样的具体的特征类

306
00:11:59,586 --> 0:12:01,036
这样的具体的特征类

307
00:12:01,236 --> 0:12:02,126
编写它们的具体实现

308
00:12:04,436 --> 0:12:06,516
对于解码 IMDF 文件

309
00:12:06,516 --> 0:12:08,886
其实就是一个 GeoJSON 文件

310
00:12:08,886 --> 0:12:11,056
我们将使用新的 MKGeoJSONDecoder

311
00:12:11,466 --> 0:12:13,346
并调用其中的 decode 方法

312
00:12:14,666 --> 0:12:15,786
稍后 我们将带大家看一下

313
00:12:15,786 --> 0:12:19,736
具体的实现细节

314
00:12:19,966 --> 0:12:22,116
在进行第 3 步的过程中

315
00:12:22,116 --> 0:12:24,036
我们将使用 MapKit 框架中的

316
00:12:24,036 --> 0:12:26,666
addOverlays 和 addAnnotations 

317
00:12:27,276 --> 0:12:29,276
用这两个 API 在地图上

318
00:12:29,276 --> 0:12:31,836
绘制多边形以及线和点

319
00:12:31,836 --> 0:12:33,036
对于每一个添加到地图上的 overlay（覆盖）

320
00:12:33,036 --> 0:12:34,726
我们都会有一个

321
00:12:34,726 --> 0:12:36,466
给到 mapView 的代理回调方法

322
00:12:36,466 --> 0:12:39,586
叫做 renderFor overlay

323
00:12:40,956 --> 0:12:42,766
对于每一个 annotation 来说

324
00:12:42,766 --> 0:12:44,666
我们都会有一个给 mapView 的回调方法 

325
00:12:44,666 --> 0:12:45,256
叫做 viewFor annotation

326
00:12:46,026 --> 0:12:47,486
在这两个代理方法中

327
00:12:47,536 --> 0:12:48,916
我们便有机会

328
00:12:48,916 --> 0:12:50,226
给室内地图的元素

329
00:12:50,226 --> 0:12:51,296
定制它们的外观

330
00:12:51,586 --> 0:12:55,146
那么在有了这些之后 我们就开始

331
00:12:55,146 --> 0:12:56,486
为我们的恐龙博物馆做室内地图吧

332
00:13:10,436 --> 0:13:12,276
我们将从一个非常基础的 App 开始

333
00:13:13,036 --> 0:13:14,276
这是一个基于 MKMapView 的

334
00:13:14,276 --> 0:13:17,056
单一视图的 App

335
00:13:19,096 --> 0:13:20,366
我想做的第一件事

336
00:13:20,366 --> 0:13:22,026
就是确保我已经给我的项目

337
00:13:22,216 --> 0:13:23,746
添加了 IMDF 文件

338
00:13:24,236 --> 0:13:28,186
它们在这儿

339
00:13:28,846 --> 0:13:30,256
在你的 App 里

340
00:13:30,256 --> 0:13:31,606
你可以选择将这些文件

341
00:13:31,686 --> 0:13:33,206
直接打包到你的 App 内

342
00:13:33,206 --> 0:13:34,076
或者是从你的服务器进行下载

343
00:13:36,186 --> 0:13:37,706
我们看一下其中一个文件

344
00:13:39,226 --> 0:13:41,046
这是一个 unit 的特征类型

345
00:13:41,876 --> 0:13:43,846
我们的目标是解码并呈现

346
00:13:43,846 --> 0:13:48,036
这个文件里面的内容

347
00:13:49,426 --> 0:13:51,906
我会先写一个叫做 feature 的抽象类

348
00:13:55,636 --> 0:13:57,886
这直接给出了我们之前看到的三个成员

349
00:13:58,366 --> 0:14:00,486
identifier  properties 和 geometry

350
00:13:58,366 --> 0:14:00,486
identifier  properties 和 geometry

351
00:14:01,596 --> 0:14:03,546
我们的这个类缺少一个初始化方法

352
00:14:03,546 --> 0:14:06,000
我们给他添加一个

353
00:14:10,046 --> 0:14:11,096
初始化由一串选择语句加上

354
00:14:11,096 --> 0:14:12,766
属性值的抛出异常的语句来组成

355
00:14:12,766 --> 0:14:14,066
非常的简单直白

356
00:14:15,046 --> 0:14:17,066
MKGeoJSON 的特征会把其属性

357
00:14:17,256 --> 0:14:20,136
公开成不透明的数据

358
00:14:20,136 --> 0:14:22,006
所以在使用之前我们必须要先解码

359
00:14:23,856 --> 0:14:25,976
我们使用 JSONDecoder 这个类

360
00:14:25,976 --> 0:14:28,196
来解码我们的数据并把它转换为

361
00:14:28,196 --> 0:14:29,196
相邻的对象

362
00:14:29,846 --> 0:14:33,526
现在 我可以给 feature 这个类

363
00:14:33,526 --> 0:14:35,016
来编写它的具体实现

364
00:14:35,736 --> 0:14:37,396
我们首先先实现 unit（空间单元）这个类型

365
00:14:41,316 --> 0:14:43,796
我们把基类设成 feature

366
00:14:47,276 --> 0:14:49,046
为了描述 unit 这种特征类型

367
00:14:49,046 --> 0:14:51,316
我们需要定义一些属性

368
00:14:55,126 --> 0:14:57,426
属性由 category 和 levelID 组成

369
00:14:57,426 --> 0:14:58,846
category 用于区分

370
00:14:58,846 --> 0:15:01,856
不同种类的 unit 的类型

371
00:14:58,846 --> 0:15:01,856
不同种类的 unit 的类型

372
00:15:01,996 --> 0:15:03,086
levelID 则是该 unit 所属的

373
00:15:03,086 --> 0:15:08,436
楼层的标识符

374
00:15:08,686 --> 0:15:10,226
unit 中包括有 occupant（使用者）

375
00:15:10,226 --> 0:15:10,926
以及 amenity（便利设施）

376
00:15:11,216 --> 0:15:16,596
所以让我们在这里加上它们两个

377
00:15:16,596 --> 0:15:17,866
这就是我们需要给 unit 特征类

378
00:15:17,866 --> 0:15:20,146
所做的所有操作

379
00:15:20,616 --> 0:15:22,116
与 unit 类相似的

380
00:15:22,116 --> 0:15:24,906
我们可以为 venue（场所）以及

381
00:15:24,906 --> 0:15:26,266
level（楼层）以及其他所有的我们想要

382
00:15:26,266 --> 0:15:27,546
解码的特征类型创建模型类

383
00:15:28,706 --> 0:15:30,546
我已经把它们都实现好了

384
00:15:30,546 --> 0:15:32,206
并且添加到了项目当中

385
00:15:32,856 --> 0:15:34,896
你可以下载

386
00:15:35,146 --> 0:15:36,426
本场会议的示例代码

387
00:15:36,426 --> 0:15:40,216
并查看它们

388
00:15:40,766 --> 0:15:42,296
好了 我们可以进到第 2 个步骤了

389
00:15:42,476 --> 0:15:45,116
解码 IMDF 数据

390
00:15:45,706 --> 0:15:50,736
我们将在 IMDFDecoder 类中实现这件事

391
00:15:51,406 --> 0:15:57,246
我们添加一个 MKGeoJSONDecoder 类型的属性

392
00:15:58,336 --> 0:15:59,706
这个是 MapKit 框架中

393
00:15:59,706 --> 0:16:01,746
一个新的可用类

394
00:15:59,706 --> 0:16:01,746
一个新的可用类

395
00:16:01,746 --> 0:16:04,756
你可以使用它解码所有的 GeoJSON 数据

396
00:16:07,756 --> 0:16:09,556
我现在要写一个名叫

397
00:16:09,656 --> 0:16:11,486
decodeFeatures 的方法来解码单个的

398
00:16:11,546 --> 0:16:12,696
IMDF 文件

399
00:16:13,276 --> 0:16:17,236
在这个方法中

400
00:16:17,236 --> 0:16:18,896
我们首先从磁盘里

401
00:16:18,896 --> 0:16:21,276
读取 IMDF 文件的内容

402
00:16:21,276 --> 0:16:23,456
并使用实例化后的 MKGeoJSONDecoder 方法

403
00:16:24,106 --> 0:16:27,556
对数据进行解码

404
00:16:27,756 --> 0:16:29,826
我们可以得到一个

405
00:16:29,826 --> 0:16:32,746
MKGeoJSONFeature 型的对象数组

406
00:16:32,746 --> 0:16:40,036
我们可以使用它来初始化我们的模型类

407
00:16:40,036 --> 0:16:41,206
我现在要写一个名为 IMDFDecoder 的方法

408
00:16:41,206 --> 0:16:43,106
来解码 IMDF 档案文件

409
00:16:43,136 --> 0:16:45,946
或是 IMDF 文件集

410
00:16:51,236 --> 0:16:52,906
让我们创建我们希望解码的

411
00:16:52,906 --> 0:16:54,346
特征对象的具体实例吧

412
00:16:54,376 --> 0:16:56,026
例如 venues（场所）

413
00:16:56,026 --> 0:16:57,886
levels（楼层）以及 units（空间单元）

414
00:16:57,886 --> 0:17:00,316
我们使用的就是刚才我写过的

415
00:16:57,886 --> 0:17:00,316
我们使用的就是刚才我写过的

416
00:17:00,316 --> 0:17:02,596
decodeFeatures 方法

417
00:17:02,776 --> 0:17:04,726
以此解码我们想要解码的特征类型

418
00:17:06,876 --> 0:17:08,685
为了能够更容易地显示出

419
00:17:08,685 --> 0:17:11,955
正确的特征子集

420
00:17:11,955 --> 0:17:13,215
我们需要给不同的特征对象间

421
00:17:13,215 --> 0:17:14,455
创建关联

422
00:17:15,705 --> 0:17:18,465
例如 venue（场所）包含有 levels（楼层）

423
00:17:19,276 --> 0:17:20,266
我们把他们关联起来

424
00:17:20,836 --> 0:17:24,146
我们是在按序号对 levels（楼层）

425
00:17:24,146 --> 0:17:25,435
进行分组之后再做上去的关联

426
00:17:29,176 --> 0:17:31,246
levels 包含 units（空间单元）以及

427
00:17:31,246 --> 0:17:33,346
openings（出入口）我们把它们也关联起来

428
00:17:38,776 --> 0:17:41,146
units 和 openings 都有一个属性

429
00:17:41,196 --> 0:17:43,146
叫做 levelID

430
00:17:44,136 --> 0:17:46,206
我们使用 levelID 将 units

431
00:17:46,206 --> 0:17:48,556
和 level 进行分组

432
00:17:48,556 --> 0:17:49,896
之后再遍历这个 venue（场所）的所有的楼层

433
00:17:49,896 --> 0:17:52,806
找到包含在对应楼层中的空间单元

434
00:17:52,806 --> 0:17:55,466
把它们关联起来

435
00:17:55,586 --> 0:18:00,000
对于openings 也是一样的操作

436
00:18:03,906 --> 0:18:06,236
unit 当中由包含

437
00:18:06,236 --> 0:18:07,806
amenities（便利设施）和 occupants（使用者）

438
00:18:07,806 --> 0:18:08,616
我们给它们创建上关联

439
00:18:13,876 --> 0:18:15,276
我们遍历所有的 amenities

440
00:18:15,276 --> 0:18:18,076
找到他们对应的 unit

441
00:18:18,076 --> 0:18:20,406
并建立关联

442
00:18:21,746 --> 0:18:23,166
同样的 我们也可以把

443
00:18:23,166 --> 0:18:24,776
occupants 和 unit 关联起来

444
00:18:28,696 --> 0:18:31,546
但 occupants 是个例外

445
00:18:32,366 --> 0:18:33,936
请记住 我们用 occupants 是来显示

446
00:18:33,936 --> 0:18:35,386
地图上商户的名称的

447
00:18:35,386 --> 0:18:37,786
它们是没有

448
00:18:37,786 --> 0:18:38,786
geometry 这个对象的

449
00:18:39,406 --> 0:18:41,986
取而代之的 他们依赖于 anchor（锚点）对象

450
00:18:41,986 --> 0:18:45,000
来获取它们的显示位置

451
00:18:47,896 --> 0:18:50,016
好了 现在我们就有了一个解码方法

452
00:18:51,076 --> 0:18:53,276
并且结合上 IMDF 档案文件可以

453
00:18:53,396 --> 0:18:56,176
给我们提供一个完全解码并且配置过的

454
00:18:56,176 --> 0:18:58,306
venue（场所）对象并且它

455
00:18:58,416 --> 0:18:59,876
还引入了所有我们希望呈现出来的

456
00:18:59,876 --> 0:19:01,246
特征类型

457
00:18:59,876 --> 0:19:01,246
特征类型

458
00:19:02,426 --> 0:19:03,626
所以现在我们可以进入到第 3 步了

459
00:19:03,716 --> 0:19:09,196
就是在地图上呈现 IMDF 数据

460
00:19:09,566 --> 0:19:11,356
我们将在控制主视图的

461
00:19:11,356 --> 0:19:12,946
IndoorMapViewController 类中

462
00:19:12,946 --> 0:19:13,876
实现这件事

463
00:19:18,136 --> 0:19:19,886
让我们调用

464
00:19:20,176 --> 0:19:22,426
在第 2 步中定义的解码方法

465
00:19:24,476 --> 0:19:27,606
我们会得到一个 venue（场所）的对象

466
00:19:27,606 --> 0:19:29,626
这样我们就可以把其他的特征以

467
00:19:29,626 --> 0:19:31,996
overlay（覆盖）和 annotation（注释）的方式添加上去

468
00:19:33,466 --> 0:19:35,386
为此 我将编写一个叫做

469
00:19:35,386 --> 0:19:37,956
showFeaturesForOrdinal 的方法

470
00:19:38,026 --> 0:19:42,626
其中序号是整型的

471
00:19:42,626 --> 0:19:44,706
代表某一个 level 具体在

472
00:19:44,706 --> 0:19:47,396
整个 building 的所有楼层范围内的位置

473
00:19:47,946 --> 0:19:52,776
在这个方法中 我们首先

474
00:19:52,776 --> 0:19:54,606
移除掉属于前一个楼层的 

475
00:19:54,686 --> 0:19:56,286
所有的覆盖和注释

476
00:19:56,876 --> 0:19:59,686
之后再把我们希望

477
00:19:59,726 --> 0:20:01,216
在这个当前楼层中呈现出来的

478
00:19:59,726 --> 0:20:01,216
在这个当前楼层中呈现出来的

479
00:20:01,266 --> 0:20:03,986
特征给聚合起来

480
00:20:03,986 --> 0:20:05,576
检索出这些特征对象的 geometry 部分

481
00:20:05,576 --> 0:20:08,736
并把它们以覆盖和注释的形式

482
00:20:08,736 --> 0:20:11,066
添加到地图上

483
00:20:11,626 --> 0:20:16,083
让我们从 showFeaturesForOrdinal 中调用这个方法

484
00:20:22,046 --> 0:20:23,296
我们把初始楼层设为

485
00:20:23,296 --> 0:20:24,686
序号为 1 的楼层

486
00:20:25,316 --> 0:20:30,086
我们已经实现了

487
00:20:30,086 --> 0:20:31,276
MKMapViewDelegate 方法

488
00:20:31,766 --> 0:20:33,796
mapView 以及 renderFor overlay 

489
00:20:34,426 --> 0:20:36,466
其中我们为每种

490
00:20:36,466 --> 0:20:39,586
GeoJSON 的几何类型都创建了

491
00:20:39,586 --> 0:20:41,966
MKOverlayRenderer 的实例

492
00:20:41,966 --> 0:20:43,816
包括新的 MKMultipolygonRenderer 以及

493
00:20:43,896 --> 0:20:46,436
新的 MKMultipolylineRenderer 方法

494
00:20:46,436 --> 0:20:48,596
以便更有效地呈现

495
00:20:48,596 --> 0:20:51,096
多边形和线条

496
00:20:51,696 --> 0:20:56,796
让我们运行一下这个 App

497
00:20:56,796 --> 0:20:58,486
看看我们是不是得到了一个室内地图

498
00:21:00,826 --> 0:21:05,346
好了 现在我们有了一个非常基本的博物馆地图

499
00:21:06,766 --> 0:21:11,176
让我们放大一点

500
00:21:11,386 --> 0:21:15,746
在这张地图内 空间单元是以多边形来显示的

501
00:21:17,326 --> 0:21:19,636
像卫生间这样的便利设施则是以

502
00:21:19,996 --> 0:21:21,746
注释的形式呈现的

503
00:21:22,076 --> 0:21:25,596
之后使用者像是这里的

504
00:21:25,596 --> 0:21:27,506
Jurassic Table Restaurant

505
00:21:27,506 --> 0:21:29,346
也是以注释的形式呈现的

506
00:21:29,946 --> 0:21:33,386
因为博物馆也是个多楼层的建筑

507
00:21:33,386 --> 0:21:35,236
所以它需要一个楼层选择器

508
00:21:36,396 --> 0:21:40,476
我们给它加一个

509
00:21:40,656 --> 0:21:41,716
我已经在 Storyboard 里

510
00:21:41,716 --> 0:21:42,866
加了一个楼层选择器

511
00:21:43,596 --> 0:21:45,896
这是一个基于 UIStackView 的楼层选择器

512
00:21:46,626 --> 0:21:47,516
我现在把它调成可见的

513
00:21:47,966 --> 0:21:52,426
为了接受与楼层选择器

514
00:21:52,426 --> 0:21:54,846
相关的更新信息

515
00:21:54,846 --> 0:21:56,316
我们已经实现了一个

516
00:21:56,316 --> 0:21:58,356
楼层选择的代理事件  其中包含一个

517
00:21:58,356 --> 0:21:59,986
叫做 selectedLevelDidChange 的方法

518
00:22:00,666 --> 0:22:02,206
每当用户在楼层选择器中

519
00:22:02,206 --> 0:22:04,006
进行选择时

520
00:22:04,006 --> 0:22:05,346
都会调用这个方法

521
00:22:06,846 --> 0:22:10,000
我们在这里处理更换楼层更换的事件

522
00:22:16,056 --> 0:22:17,886
当楼层发生变化时

523
00:22:18,026 --> 0:22:20,496
我们使用 showFeaturesForOrdinal 方法

524
00:22:20,496 --> 0:22:22,966
更新地图中所选楼层的

525
00:22:22,966 --> 0:22:24,166
各个特征

526
00:22:24,686 --> 0:22:28,276
我们再运行一下 确认下我们已经有了一个

527
00:22:28,276 --> 0:22:34,446
楼层选择器

528
00:22:34,636 --> 0:22:38,166
好了 现在我就可以在楼层选择器里

529
00:22:38,166 --> 0:22:40,956
点击上面的项目

530
00:22:41,016 --> 0:22:46,566
并查看博物馆的每一个楼层了

531
00:22:48,516 --> 0:22:52,546
[掌声]

532
00:22:53,046 --> 0:22:54,436
让我们在这里停一下

533
00:22:55,166 --> 0:23:00,056
回顾一下我们刚才所做的

534
00:22:55,166 --> 0:23:00,056
回顾一下我们刚才所做的

535
00:23:02,266 --> 0:23:04,966
首先 我们给 IMDF 的特征类型

536
00:23:05,016 --> 0:23:06,546
都创建它们的模型类

537
00:23:08,076 --> 0:23:09,996
之后 我们使用 MKGeoJSONDecoder

538
00:23:09,996 --> 0:23:13,026
对 IMDF 数据进行了解码

539
00:23:13,026 --> 0:23:15,476
并且在特征类之间建立了关联

540
00:23:15,706 --> 0:23:19,886
最后 我们使用MapKit框架的

541
00:23:19,886 --> 0:23:22,396
addOverlays 和

542
00:23:22,396 --> 0:23:24,326
addAnnotation 这两个 API

543
00:23:24,326 --> 0:23:25,526
在地图视图上呈现 IMDF 数据

544
00:23:26,856 --> 0:23:28,046
你可能已经注意到

545
00:23:28,046 --> 0:23:29,596
我们现在的地图没有什么样式

546
00:23:29,596 --> 0:23:31,446
上面的注释看起来

547
00:23:31,506 --> 0:23:32,596
也不怎么有趣

548
00:23:33,226 --> 0:23:36,206
只需要两个额外的步骤

549
00:23:36,206 --> 0:23:37,776
你就可以显著地改进

550
00:23:37,776 --> 0:23:39,676
室内地图体验和功能

551
00:23:40,296 --> 0:23:44,876
首先是将样式应用到室内地图的元素上

552
00:23:46,036 --> 0:23:48,246
对于理解和使用地图来说

553
00:23:48,246 --> 0:23:49,896
给它设计一个合适的样式是十分重要的

554
00:23:51,226 --> 0:23:53,476
你可以使用与 App 团队

555
00:23:53,546 --> 0:23:55,076
或是公司品牌相匹配的

556
00:23:55,076 --> 0:23:56,186
独一无二的颜色或图标

557
00:23:56,806 --> 0:23:59,796
在最后一个步骤里

558
00:23:59,796 --> 0:24:02,826
我们可以通过展示用户的实时位置

559
00:23:59,796 --> 0:24:02,826
我们可以通过展示用户的实时位置

560
00:24:02,826 --> 0:24:04,426
来让你的 App 变得更加实用

561
00:24:05,896 --> 0:24:06,886
请记住 你可以参与

562
00:24:06,886 --> 0:24:08,466
室内地图项目以及

563
00:24:08,466 --> 0:24:11,276
运用室内测量 App

564
00:24:11,276 --> 0:24:13,076
来测量你的场所

565
00:24:13,116 --> 0:24:14,826
用这样的方式你就可以

566
00:24:14,826 --> 0:24:16,106
获得准确的室内位置

567
00:24:17,156 --> 0:24:18,826
幸运的是 我们有一个团队

568
00:24:18,826 --> 0:24:20,636
已经测量过恐龙博物馆了

569
00:24:20,636 --> 0:24:22,206
所以我们可以更进一步将实时位置

570
00:24:22,206 --> 0:24:23,206
和表现位置的蓝点添加到题图当中

571
00:24:23,726 --> 0:24:26,726
让我们先来看一下

572
00:24:26,726 --> 0:24:28,566
一些用来辅助样式设计的代码吧

573
00:24:29,136 --> 0:24:32,436
我们将定义一个叫做

574
00:24:32,436 --> 0:24:35,796
StylableFeature 的协议

575
00:24:35,966 --> 0:24:37,296
它有一个属性和两个方法

576
00:24:38,506 --> 0:24:40,896
每一个可以进行样式设计的特征都必须包含 geometry

577
00:24:41,426 --> 0:24:45,146
并且 为了将样式应用于 overlays

578
00:24:45,276 --> 0:24:46,596
我们需要实现 configure(overlayRenderer:)

579
00:24:46,596 --> 0:24:51,006
这个方法类似的 并且 为了将样式应用于

580
00:24:51,006 --> 0:24:52,856
annotations 我们需要实现

581
00:24:52,896 --> 0:24:54,646
configure(annotationView:) 这个方法

582
00:24:55,196 --> 0:24:57,576
我将切换回 Xcode 为各位展示下

583
00:24:57,576 --> 0:24:59,000
如何实现上述的内容

584
00:25:07,316 --> 0:25:09,376
为了应用样式

585
00:25:09,376 --> 0:25:11,196
我们需要利用 asset 这个目录

586
00:25:11,806 --> 0:25:14,776
这里面我已经给

587
00:25:14,846 --> 0:25:18,256
这个室内地图添加了特定的颜色

588
00:25:18,916 --> 0:25:22,766
所以 为了应用这些颜色

589
00:25:22,766 --> 0:25:24,856
我们进到 styles.swift 这个文件内

590
00:25:26,016 --> 0:25:27,486
这里我已经定义好了

591
00:25:27,486 --> 0:25:28,646
StylableFeature 协议了

592
00:25:30,206 --> 0:25:32,296
现在 我们给 amenity 特征

593
00:25:32,296 --> 0:25:34,136
来应用一下样式吧

594
00:25:35,616 --> 0:25:38,086
我们可以通过扩展

595
00:25:38,086 --> 0:25:40,826
amenity 类来适配

596
00:25:40,826 --> 0:25:42,066
stylableFeature 这个协议

597
00:25:42,146 --> 0:25:45,846
并且因为 amenity 包含有

598
00:25:45,846 --> 0:25:47,926
点状的 geometry 对象 我们将要实现

599
00:25:47,966 --> 0:25:49,246
configure(annotationView:) 这个方法

600
00:25:49,246 --> 0:25:52,466
并把其中的 annotation 视图的背景颜色

601
00:25:52,516 --> 0:25:54,176
设置成 asset 目录中的

602
00:25:54,176 --> 0:25:55,296
默认颜色

603
00:25:56,546 --> 0:25:58,016
在这个地方我们同时可以

604
00:25:58,106 --> 0:25:59,606
把 annotation 的显示优先级

605
00:25:59,606 --> 0:26:01,636
设置成 defaultLow

606
00:25:59,606 --> 0:26:01,636
设置成 defaultLow

607
00:26:02,216 --> 0:26:05,216
类似的 我们可以扩展

608
00:26:05,216 --> 0:26:06,926
unit 类来适配

609
00:26:06,926 --> 0:26:08,256
stylableFeature 这个协议

610
00:26:08,256 --> 0:26:09,296
来给 unit 配上样式

611
00:26:10,746 --> 0:26:12,426
但是对于 unit 来说

612
00:26:12,426 --> 0:26:15,466
我们希望给每一种 unit 都配上独特的颜色

613
00:26:16,546 --> 0:26:18,346
为了实现这件事

614
00:26:18,346 --> 0:26:19,876
我将定义一个叫做 StylableCategory 的

615
00:26:20,396 --> 0:26:24,296
枚举型变量 其中的值

616
00:26:24,296 --> 0:26:26,306
是我们希望设计样式的

617
00:26:26,306 --> 0:26:27,506
各种 unit 的名称

618
00:26:27,906 --> 0:26:32,246
并且因为 unit 包含有 have polygon

619
00:26:32,246 --> 0:26:34,496
多边形的 geometry 对象 我们需要实现

620
00:26:34,526 --> 0:26:36,436
这个 configure(overlayRenderer:) 方法

621
00:26:36,996 --> 0:26:41,916
在这个方法中 我们将处理

622
00:26:41,916 --> 0:26:44,026
不同种的 unit 的值

623
00:26:44,086 --> 0:26:45,796
并且给它们都赋予

624
00:26:45,896 --> 0:26:50,666
不一样的颜色

625
00:26:50,886 --> 0:26:53,206
我将切换到主要的

626
00:26:53,206 --> 0:26:55,736
视图控制类这个位置

627
00:26:55,736 --> 0:26:57,326
在我的 mapView 中的 

628
00:26:57,326 --> 0:27:00,216
rendererFor overlay 这个方法里

629
00:26:57,326 --> 0:27:00,216
rendererFor overlay 这个方法里

630
00:27:00,376 --> 0:27:02,876
我们将调用 feature.configure(overlayRenderer:)

631
00:27:02,916 --> 0:27:05,316
这个方法来为特征应用上不同的颜色

632
00:27:05,706 --> 0:27:07,516
而不是让每个多边形

633
00:27:07,516 --> 0:27:11,346
都使用相同的风格和颜色

634
00:27:11,936 --> 0:27:16,266
类似的 对于

635
00:27:16,266 --> 0:27:18,456
annotation 来说 我将调用

636
00:27:18,986 --> 0:27:23,336
stylableFeature.configure(annotationView:)

637
00:27:23,696 --> 0:27:26,306
方法 来给每个 annotation 应用特定的样式

638
00:27:26,956 --> 0:27:31,156
我们想把 occupant 渲染成

639
00:27:31,216 --> 0:27:33,876
一个简单点配上一个标签

640
00:27:33,876 --> 0:27:35,936
之后 amenity 就是一个灰色的点

641
00:27:36,756 --> 0:27:38,776
为了完成这件事

642
00:27:39,186 --> 0:27:40,736
我已经实现了 自定义 annotation 视图的语句

643
00:27:40,736 --> 0:27:42,036
并且把它们放到项目文件里了

644
00:27:43,166 --> 0:27:45,376
在这个位置 我们调用了上面提到的

645
00:27:45,376 --> 0:27:48,336
configure(annotationView:) 方法

646
00:27:48,416 --> 0:27:50,386
并将特定的样式应用给了

647
00:27:50,496 --> 0:27:51,516
annotation 视图

648
00:27:52,106 --> 0:27:55,296
现在 让我们再运行一下这个 App

649
00:27:55,296 --> 0:27:56,556
看看我们的地图是不是看起来不一样了

650
00:27:57,156 --> 0:28:03,566
好了 它现在看起来

651
00:27:57,156 --> 0:28:03,566
好了 它现在看起来

652
00:28:03,566 --> 0:28:05,076
比之前的效果好了很多

653
00:28:06,246 --> 0:28:08,516
现在 我们可以看到

654
00:28:08,516 --> 0:28:11,846
不同的空间单元都有了不一样的颜色

655
00:28:11,846 --> 0:28:14,516
并且我们的便利设施都配成了灰色的点

656
00:28:15,426 --> 0:28:17,246
并且使用者 比如

657
00:28:17,246 --> 0:28:18,566
Jurassic Table Restaurant 这里

658
00:28:18,566 --> 0:28:20,676
是以点配上一个标签来显示的

659
00:28:21,256 --> 0:28:23,626
但是这里还是有一些地方是不对的

660
00:28:24,226 --> 0:28:27,696
地图上的这个区域

661
00:28:27,916 --> 0:28:30,056
它是过道 我记得它属于一种空间单元

662
00:28:30,146 --> 0:28:32,466
但是它的颜色和其他他周围的空间单元

663
00:28:32,466 --> 0:28:34,596
没有太大的不同

664
00:28:35,686 --> 0:28:37,406
让我们来看看能不能修复它

665
00:28:41,676 --> 0:28:44,296
为此 我将进到

666
00:28:44,296 --> 0:28:46,616
style.swift 文件内 我们给过道这个类别

667
00:28:46,616 --> 0:28:51,466
添加一个 type 值

668
00:28:52,446 --> 0:28:53,996
我们必须在 configure overlayRenderer

669
00:28:54,026 --> 0:28:56,326
方法中处理这件事

670
00:28:58,576 --> 0:29:01,326
在我们设置颜色的地方

671
00:28:58,576 --> 0:29:01,326
在我们设置颜色的地方

672
00:29:01,326 --> 0:29:03,016
walkway 的填充颜色

673
00:29:03,276 --> 0:29:04,596
应该是叫做 walkway fill 的颜色

674
00:29:05,156 --> 0:29:08,296
这个颜色应该在我们的 asset 目录下

675
00:29:09,006 --> 0:29:09,546
让我们确认一下

676
00:29:10,366 --> 0:29:13,286
好了 这里我们给它设置成了白色

677
00:29:14,096 --> 0:29:15,986
我再运行一下 App

678
00:29:16,106 --> 0:29:20,096
看下我们是不是修复了这个问题

679
00:29:20,206 --> 0:29:22,656
好了 非常棒 这看起来好多了

680
00:29:23,376 --> 0:29:25,386
只是简单地

681
00:29:25,386 --> 0:29:27,416
给过道应用了一个不同的颜色

682
00:29:27,416 --> 0:29:30,186
我们这个地图的外观就有了显著的改善

683
00:29:30,806 --> 0:29:35,446
让我们再优化一下

684
00:29:36,686 --> 0:29:39,316
给便利设施使用灰点的确不错

685
00:29:39,316 --> 0:29:41,716
但我觉得用图标会更好一点

686
00:29:43,026 --> 0:29:44,346
比普通的图标更好的是什么呢

687
00:29:44,596 --> 0:29:45,456
恐龙图标应该是最佳选择

688
00:29:45,926 --> 0:29:47,706
那么我们就用恐龙的图标吧

689
00:29:49,196 --> 0:29:51,596
我们的设计师已经给了我们一些图标

690
00:29:51,596 --> 0:29:53,336
我们已经把它们放到了项目里

691
00:29:54,336 --> 0:29:58,276
让我们把它们放到地图里吧

692
00:29:58,276 --> 0:30:00,136
我进入到 styles.swift 文件内 我们在这儿

693
00:29:58,276 --> 0:30:00,136
我进入到 styles.swift 文件内 我们在这儿

694
00:30:01,206 --> 0:30:03,796
看到 amenity 显示出来是个点

695
00:30:03,856 --> 0:30:05,906
让我们在这做一点改变

696
00:30:13,136 --> 0:30:15,486
为了方便起见

697
00:30:15,486 --> 0:30:17,186
我们把图标的名称

698
00:30:17,186 --> 0:30:20,876
和 amenity 类别设置成一样的

699
00:30:22,186 --> 0:30:23,276
所以这里的代码就是到 asset 的 category

700
00:30:23,276 --> 0:30:25,666
里面看一下这个特定的名称

701
00:30:26,096 --> 0:30:28,556
如果找到一个名称对应的图标

702
00:30:28,556 --> 0:30:29,926
我们就把 annotation 视图的 image 属性

703
00:30:30,006 --> 0:30:33,256
设置成这个图标

704
00:30:33,256 --> 0:30:34,706
如果没找到 就继续按照默认的方式显示灰点

705
00:30:35,426 --> 0:30:38,826
我们运行一下 App 看下效果

706
00:30:41,376 --> 0:30:43,326
太酷了 现在我们就能在地图上看到一些

707
00:30:43,326 --> 0:30:44,976
漂亮的图标了

708
00:30:44,976 --> 0:30:46,996
并且我们可以清晰地

709
00:30:46,996 --> 0:30:48,326
看到洗手间以及扶梯和电梯的位置

710
00:30:48,326 --> 0:30:50,846
更重要的是

711
00:30:50,846 --> 0:30:55,656
我们可以看到一个叫霸王龙的展览

712
00:30:58,516 --> 0:31:03,206
[掌声]

713
00:30:58,516 --> 0:31:03,206
[掌声]

714
00:31:03,706 --> 0:31:06,826
最后一件事 我们知道我们在这个博物馆内

715
00:31:06,826 --> 0:31:08,906
是可以使用室内定位的

716
00:31:09,606 --> 0:31:10,956
那就让我们利用起来这个功能吧

717
00:31:11,556 --> 0:31:16,246
让我们把用户的位置添加到地图中

718
00:31:17,456 --> 0:31:18,866
为了实现这件事

719
00:31:18,926 --> 0:31:21,936
我到这里的 Map View 这个位置

720
00:31:21,936 --> 0:31:22,826
从这儿打开 user location

721
00:31:23,436 --> 0:31:28,306
在我的 ViewController 这个文件里

722
00:31:29,276 --> 0:31:32,276
首先我要添加一个

723
00:31:32,276 --> 0:31:36,596
CLLocationManager 类型的属性

724
00:31:36,596 --> 0:31:39,946
然后用这个属性

725
00:31:40,076 --> 0:31:41,606
在 App 处于前台使用状态的时候

726
00:31:41,736 --> 0:31:44,506
向用户请求定位功能的权限

727
00:31:45,046 --> 0:31:48,596
每当我们获得一个定位的更新

728
00:31:48,596 --> 0:31:50,636
我们就会得到一个回传的参数给到

729
00:31:50,636 --> 0:31:54,176
MKMapViewDelegate 方法

730
00:31:54,176 --> 0:31:56,866
之后 mapView 就会更新用户的位置

731
00:31:57,506 --> 0:32:00,676
让我们来处理下位置更新吧

732
00:31:57,506 --> 0:32:00,676
让我们来处理下位置更新吧

733
00:32:01,296 --> 0:32:04,716
首先我们要检查一下用户是不是在

734
00:32:04,716 --> 0:32:06,216
场所的内部

735
00:32:07,096 --> 0:32:08,576
如果用户在内部的话

736
00:32:08,576 --> 0:32:09,656
我们就不需要更新地图了

737
00:32:11,006 --> 0:32:12,646
如果用户在场所的外部的话

738
00:32:12,646 --> 0:32:14,446
我们也不用更新地图

739
00:32:14,446 --> 0:32:16,586
但是 如果用户在内部的话

740
00:32:16,586 --> 0:32:18,816
我们就要用 MKUserLocation 上的

741
00:32:18,956 --> 0:32:20,756
CLLocation 这个属性

742
00:32:20,756 --> 0:32:21,856
来获取用户的坐标

743
00:32:22,586 --> 0:32:26,156
CLLocation 不仅提供用户的

744
00:32:26,226 --> 0:32:27,856
经度和纬度

745
00:32:27,856 --> 0:32:29,826
还将提供楼层的信息

746
00:32:29,826 --> 0:32:31,936
不过前提是你的场所已经被测量过

747
00:32:31,936 --> 0:32:35,616
并且用户在场所的内部

748
00:32:36,186 --> 0:32:39,556
所以我们将利用

749
00:32:39,556 --> 0:32:41,976
从 CLLocation 对象中的楼层信息

750
00:32:41,976 --> 0:32:44,446
并使用 showFeaturesForOrdinal 来

751
00:32:44,446 --> 0:32:46,366
更新地图信息

752
00:32:46,926 --> 0:32:48,656
以呈现用户的位置

753
00:32:49,606 --> 0:32:50,976
让我们在运行一下这个 App

754
00:32:58,936 --> 0:33:03,016
我在这点击允许

755
00:32:58,936 --> 0:33:03,016
我在这点击允许

756
00:33:03,016 --> 0:33:03,976
现在我们就有课用户的室内定位

757
00:33:04,516 --> 0:33:08,276
[掌声]

758
00:33:08,776 --> 0:33:10,316
我还必须说明一下

759
00:33:10,316 --> 0:33:11,856
当用户在不同的楼层间进行了切换

760
00:33:11,946 --> 0:33:15,026
地图将显示用户的当前的楼层

761
00:33:15,746 --> 0:33:17,816
以上这就是这个演示的全部内容

762
00:33:18,016 --> 0:33:19,046
接下来的部分就由 Stephane 

763
00:33:19,046 --> 0:33:22,196
来为各位演示如何在 Web App

764
00:33:22,396 --> 0:33:23,836
中显示室内地图吧

765
00:33:24,516 --> 0:33:29,500
[掌声]

766
00:33:37,276 --> 0:33:39,796
&gt;&gt; 好的 使用 MapKit JS 我们可以在 Web 上

767
00:33:39,926 --> 0:33:42,066
实现出类似的室内地图

768
00:33:42,066 --> 0:33:43,606
的外观和感觉

769
00:33:44,666 --> 0:33:46,626
我将演示如何使用

770
00:33:46,666 --> 0:33:49,136
MapKit JS 渲染我们的地图

771
00:33:49,136 --> 0:33:50,816
并且为所有的主要浏览器

772
00:33:51,126 --> 0:33:53,206
带来相同的室内地图体验

773
00:33:53,856 --> 0:33:56,396
在 MapKitJS 我们要用到的关键方法是

774
00:33:56,396 --> 0:33:58,846
importGeoJSON 方法

775
00:33:59,666 --> 0:34:01,446
importGeoJSON 方法需要接收两个参数

776
00:33:59,666 --> 0:34:01,446
importGeoJSON 方法需要接收两个参数

777
00:34:01,696 --> 0:34:03,336
第一个是需要转换的 GeoJSON 特征量

778
00:34:03,336 --> 0:34:04,826
第二个是

779
00:34:04,826 --> 0:34:07,226
GeoJSON 的代理对象

780
00:34:07,226 --> 0:34:08,835
代理对象允许我们以

781
00:34:08,835 --> 0:34:11,525
自定义的方式来创建项目

782
00:34:12,525 --> 0:34:14,216
在这个基本示例中

783
00:34:14,436 --> 0:34:15,065
我们有两个代理对象

784
00:34:15,966 --> 0:34:17,735
geoJSONDidError 让我们能够对

785
00:34:17,735 --> 0:34:20,025
错误做出反应

786
00:34:20,025 --> 0:34:21,926
geoJSONDidComplete 可以给我们一个

787
00:34:21,926 --> 0:34:23,755
刚创建好的项目的数组

788
00:34:28,356 --> 0:34:30,065
之后们们通过 showItems 方法

789
00:34:30,065 --> 0:34:32,335
来显示之前得到的项

790
00:34:33,176 --> 0:34:34,666
我们其实也可以用 addItems 方法

791
00:34:34,896 --> 0:34:36,216
但区别是 addItems 方法

792
00:34:36,216 --> 0:34:38,936
不会把地图的中心点给聚焦在新添加的项目上

793
00:34:41,656 --> 0:34:43,386
为了给 overlays 添加样式

794
00:34:43,606 --> 0:34:45,626
比如说多边形和线条

795
00:34:45,626 --> 0:34:46,815
我们可以运用 styleForOverlay 方法

796
00:34:47,696 --> 0:34:49,235
它用一个新获得的 overlay 作为参数

797
00:34:49,235 --> 0:34:51,226
并期望返回一个

798
00:34:51,226 --> 0:34:53,056
style 型的对象

799
00:34:54,005 --> 0:34:55,585
当然我们也可以创建一个

800
00:34:55,585 --> 0:34:57,296
全新的样式

801
00:34:57,296 --> 0:34:59,066
但我们也可以通过 style 属性

802
00:34:59,066 --> 0:35:00,936
使用与 overlay 相关联的默认样式

803
00:34:59,066 --> 0:35:00,936
使用与 overlay 相关联的默认样式

804
00:35:00,936 --> 0:35:04,086
之后再定制它

805
00:35:06,596 --> 0:35:08,796
我们也可以使用 itemForPoint 方法

806
00:35:08,796 --> 0:35:11,076
定制点的呈现效果

807
00:35:11,896 --> 0:35:13,066
itemForPoint 接收 point 特征的一个

808
00:35:13,066 --> 0:35:14,436
coordinate 作为参数

809
00:35:14,526 --> 0:35:18,196
并且会返回一个项

810
00:35:18,916 --> 0:35:21,386
这里返回的是一个 MarkerAnnotation 项

811
00:35:22,446 --> 0:35:23,996
当然 我们也可以设置

812
00:35:24,086 --> 0:35:25,576
标题和颜色等选项

813
00:35:26,136 --> 0:35:29,016
我们还可以设置显示的优先级

814
00:35:29,766 --> 0:35:31,416
当地图被缩放的很小的时候

815
00:35:31,416 --> 0:35:32,636
如果地图上出现很多的注释

816
00:35:32,636 --> 0:35:34,146
它们可能就会发生冲突

817
00:35:35,006 --> 0:35:37,106
有多种策略可以解决这个问题

818
00:35:37,106 --> 0:35:39,336
比如将注释集群在一起显示成一个

819
00:35:39,336 --> 0:35:41,496
或者是根据显示优先级来显示

820
00:35:42,566 --> 0:35:43,776
MapView JS 可以根据显示的优先级

821
00:35:43,776 --> 0:35:46,276
来决定首先应该

822
00:35:46,476 --> 0:35:49,000
隐藏哪些注释

823
00:35:50,676 --> 0:35:52,386
有了 importGeoJSON 我们就有了

824
00:35:52,386 --> 0:35:55,776
创建恐龙博物馆的地图所需的一切了

825
00:35:56,176 --> 0:35:56,816
那么我们开始吧

826
00:36:14,426 --> 0:36:15,486
我们就从一个简单的

827
00:36:15,486 --> 0:36:16,996
mapView 来开始我们的项目吧

828
00:36:17,606 --> 0:36:19,636
我正在运行着一个 HTTP 服务器

829
00:36:19,636 --> 0:36:20,306
并且它正在为我们的 Web 资产

830
00:36:20,306 --> 0:36:22,216
提供着服务 同时他还负责生成

831
00:36:22,216 --> 0:36:24,626
MapKit JS 的授权令牌

832
00:36:25,886 --> 0:36:27,786
为了将恐龙博物馆的地图

833
00:36:27,786 --> 0:36:29,526
绘制在浏览器里 我们需要

834
00:36:29,526 --> 0:36:31,476
加载 IMDF 文件 并为其中包含的

835
00:36:31,476 --> 0:36:33,016
每个特性创建 mapView 项

836
00:36:33,846 --> 0:36:35,136
这听起来很难 但并非如此

837
00:36:35,316 --> 0:36:37,166
有了 importGeoJSON 方法

838
00:36:37,166 --> 0:36:38,216
一切就变得不那么复杂

839
00:36:38,216 --> 0:36:40,396
因为我们之前已经看到

840
00:36:40,396 --> 0:36:42,226
IMDF 实际上就是 GeoJSON

841
00:36:42,816 --> 0:36:45,376
在 iOS 的演示里 你们已经看到

842
00:36:45,376 --> 0:36:48,056
我们实际给所有的特征做了个图的结构

843
00:36:48,726 --> 0:36:49,846
在这个演示里我们将采取

844
00:36:49,846 --> 0:36:51,106
有点不同的方法

845
00:36:51,516 --> 0:36:54,236
根据需要去过滤特征

846
00:36:55,256 --> 0:36:56,936
我们创建一个名为 IMDFArchive 的类

847
00:36:56,936 --> 0:37:00,566
它将提供加载 组织和筛选特征所用到的

848
00:36:56,936 --> 0:37:00,566
它将提供加载 组织和筛选特征所用到的

849
00:37:00,996 --> 0:37:02,926
基本的方法

850
00:37:11,066 --> 0:37:12,726
静态的 ImdfArchive.load 方法

851
00:37:12,726 --> 0:37:13,826
将从服务器下载

852
00:37:13,826 --> 0:37:16,106
我们需要的所有文件

853
00:37:16,106 --> 0:37:17,676
然后将特征聚合到一个数组中

854
00:37:17,676 --> 0:37:18,846
并将该数组传递给构造函数

855
00:37:18,846 --> 0:37:20,436
然后创建两个对象

856
00:37:20,436 --> 0:37:23,956
featureById 和 featuresByType

857
00:37:24,076 --> 0:37:25,456
它们在后面就会派上用场

858
00:37:27,076 --> 0:37:30,076
现在我们就可以调用这个方法

859
00:37:30,076 --> 0:37:33,126
来加载我们的特征

860
00:37:33,126 --> 0:37:35,186
并且我们可以用 importGeoJSON 来

861
00:37:35,186 --> 0:37:39,666
给每个特征创建 MapKit 项

862
00:37:39,886 --> 0:37:40,166
好了

863
00:37:40,756 --> 0:37:43,466
现在我们需要做的

864
00:37:43,776 --> 0:37:46,206
就是用 showItems 方法来

865
00:37:46,206 --> 0:37:47,886
显示这些新创建的地图项 我们来做这一步

866
00:37:56,186 --> 0:37:58,306
好了 我们试一下

867
00:37:59,036 --> 0:38:05,706
好了 我们可以看到地图上

868
00:37:59,036 --> 0:38:05,706
好了 我们可以看到地图上

869
00:38:05,706 --> 0:38:07,166
呈现了一大堆的几何图形

870
00:38:07,166 --> 0:38:08,996
不过这也是意料之中的

871
00:38:09,056 --> 0:38:10,296
因为我们要求 MapKit JS 渲染了

872
00:38:10,296 --> 0:38:11,166
我们这个场所内的所有特征

873
00:38:12,056 --> 0:38:13,386
我们需要的是只保留我们需要的

874
00:38:13,386 --> 0:38:14,426
特征类型并按照楼层来

875
00:38:14,426 --> 0:38:17,216
过滤并显示它们

876
00:38:18,026 --> 0:38:19,346
因此 我们需要在

877
00:38:19,346 --> 0:38:21,256
IMDFArchive 类中实现一些方法

878
00:38:21,896 --> 0:38:23,766
他们只返回给定序号的

879
00:38:23,796 --> 0:38:25,496
特定的类型的特征对象

880
00:38:26,536 --> 0:38:27,666
我们先从 level 开始吧

881
00:38:33,426 --> 0:38:35,416
好了 所以这里我们只保留了

882
00:38:35,416 --> 0:38:37,236
有着正确序号的 level

883
00:38:37,236 --> 0:38:38,976
类似的 我们也给 units 做一样的操作

884
00:38:46,046 --> 0:38:46,946
好了 它们都有一样的 levelID

885
00:38:48,346 --> 0:38:49,436
之后我们会为 units 里面的

886
00:38:49,436 --> 0:38:50,766
amenities 也做一样的操作

887
00:38:51,456 --> 0:38:55,936
还有 level 上的 openings amenities 和 anchors

888
00:39:04,076 --> 0:39:05,116
让我们在这里暂停一下

889
00:39:05,696 --> 0:39:07,356
事实上由于 IMDF files 根源上是

890
00:39:07,546 --> 0:39:08,696
标准的 GeoJSON 所以才让

891
00:39:08,696 --> 0:39:09,646
我们的工作变得如此简单

892
00:39:10,586 --> 0:39:12,776
这里无需复杂的解析或者解码的逻辑语句

893
00:39:13,566 --> 0:39:14,436
我们只需要知道

894
00:39:14,436 --> 0:39:16,056
我们希望呈现的属性它是

895
00:39:16,056 --> 0:39:16,726
属于哪一种特征类型就足够了

896
00:39:18,146 --> 0:39:20,406
好了 现在我们重新写一下渲染的逻辑

897
00:39:22,056 --> 0:39:25,266
我们将在这里创建一个叫做

898
00:39:25,266 --> 0:39:26,496
createItemsForOrdinal 的函数

899
00:39:26,546 --> 0:39:28,726
它将为给定的序号创建出对应的项

900
00:39:30,206 --> 0:39:31,266
现在我们要做的就是

901
00:39:31,266 --> 0:39:33,206
得到这个序号对应的特征

902
00:39:33,206 --> 0:39:34,426
我们还是先从 levels 开始

903
00:39:35,066 --> 0:39:38,826
好的 对于 levels 中的每一层

904
00:39:38,826 --> 0:39:40,226
我们都等到了对应的

905
00:39:40,906 --> 0:39:44,976
units 类似的还有 amenities 以及 openings

906
00:39:49,146 --> 0:39:50,886
好了 所以这就是我们现在

907
00:39:50,956 --> 0:39:53,446
想要的所有的特征类型

908
00:39:57,636 --> 0:40:00,736
好了 现在我们要做的就是显示它们

909
00:39:57,636 --> 0:40:00,736
好了 现在我们要做的就是显示它们

910
00:40:01,286 --> 0:40:02,816
现在我们用一个序号

911
00:40:02,816 --> 0:40:05,386
来调用 createItemsForOrdinal 函数

912
00:40:05,386 --> 0:40:06,846
我们就用序号 1

913
00:40:06,896 --> 0:40:08,976
它代表 2 楼 然后我们把它适配到地图上

914
00:40:14,496 --> 0:40:20,076
好了 让我们来写一下

915
00:40:20,226 --> 0:40:22,116
好的 这样就好多了

916
00:40:22,116 --> 0:40:23,786
现在我们可以清楚地

917
00:40:23,786 --> 0:40:25,216
看到 2 楼的结构了

918
00:40:26,176 --> 0:40:27,586
现在让我们添加一个楼层选择器

919
00:40:28,486 --> 0:40:29,916
我已经实现了一个简单的楼层选择器

920
00:40:29,916 --> 0:40:32,646
它其实就是一个基础的 HTML 表单

921
00:40:32,736 --> 0:40:35,036
是我用 venue 内的 level 的名称来实现的

922
00:40:35,986 --> 0:40:36,896
你可以在网站上

923
00:40:36,896 --> 0:40:38,236
本场讲座的下方链接中

924
00:40:38,236 --> 0:40:39,576
找到示例代码并查看细节

925
00:40:40,906 --> 0:40:42,516
在需要的情况下

926
00:40:42,896 --> 0:40:43,866
楼层选择器也会使用我们的

927
00:40:44,046 --> 0:40:46,886
createItemsForOrdinal 来创建项

928
00:40:47,636 --> 0:40:49,126
我已经导入了脚本

929
00:40:49,126 --> 0:40:50,116
所以这里我需要的就是实例化它

930
00:40:50,116 --> 0:40:55,966
并选择序号 1

931
00:40:56,206 --> 0:40:57,756
这样一来

932
00:40:57,756 --> 0:40:59,336
在加载完页面的时候

933
00:40:59,336 --> 0:41:00,056
就会显示出 2 楼

934
00:40:59,336 --> 0:41:00,056
就会显示出 2 楼

935
00:41:00,666 --> 0:41:04,026
我们再来试一下

936
00:41:05,586 --> 0:41:08,586
好了 现在 我就可以在楼层间切换了

937
00:41:09,156 --> 0:41:12,636
现在 我们需要做的

938
00:41:12,636 --> 0:41:13,826
就是添加一些样式

939
00:41:14,826 --> 0:41:15,776
现在 所有的空间单元看起来都是一样的

940
00:41:16,096 --> 0:41:18,006
现在我们甚至无法把

941
00:41:18,006 --> 0:41:19,236
代表出入口的线

942
00:41:19,236 --> 0:41:20,416
和其他的几何图形区分出来

943
00:41:20,416 --> 0:41:21,486
给了我们一个错误的印象

944
00:41:21,486 --> 0:41:23,896
就好像所有的空间单元都没有门

945
00:41:24,276 --> 0:41:25,056
这点有点让人困惑

946
00:41:26,006 --> 0:41:27,216
我们可以定制

947
00:41:27,216 --> 0:41:28,286
多边形和线条的样式

948
00:41:28,286 --> 0:41:29,266
只需要在 GeoJSON 的代理对象中

949
00:41:29,266 --> 0:41:33,146
把 styleForOverlay 方法给实现出来就可以了

950
00:41:33,906 --> 0:41:36,456
那么 我们就从把 openings 画成白色

951
00:41:36,456 --> 0:41:45,356
来开始吧 好了 这很简单

952
00:41:45,356 --> 0:41:47,056
我们只需在这儿选到 opening 特征这个位置

953
00:41:47,056 --> 0:41:49,556
之后把描边颜色设置成白色就可以了

954
00:41:51,786 --> 0:41:54,436
正如我们在 iOS App 种所做的

955
00:41:54,436 --> 0:41:57,126
这里让我们也根据 unit 的类别

956
00:41:57,236 --> 0:41:58,356
来设置不同的填充颜色

957
00:41:59,166 --> 0:42:00,776
为了实现这件事

958
00:41:59,166 --> 0:42:00,776
为了实现这件事

959
00:42:00,776 --> 0:42:01,976
让我们创建一个叫做 unitStyles 的对象

960
00:42:09,506 --> 0:42:11,786
好了 所以这个对象内

961
00:42:11,786 --> 0:42:13,886
将包含我们想要显示的每一个种类的 unit 

962
00:42:13,886 --> 0:42:15,386
的样式属性

963
00:42:16,566 --> 0:42:18,916
但我们也需要一个默认的

964
00:42:18,916 --> 0:42:21,696
因为有一些种类的 unit 可能没有指定的样式

965
00:42:21,696 --> 0:42:27,466
我们先把默认的写出来

966
00:42:27,646 --> 0:42:29,356
好了 现在我们就可以给

967
00:42:29,356 --> 0:42:30,966
我们关心的 unit 的种类

968
00:42:30,966 --> 0:42:32,000
来设定样式了

969
00:42:35,876 --> 0:42:38,796
好了 所以 我们可以用这个对象

970
00:42:38,796 --> 0:42:42,926
来给 unit 的 overlay 应用上一个样式

971
00:42:43,556 --> 0:42:56,996
好了 所以我们在这做的

972
00:42:56,996 --> 0:42:58,686
就是获取指定的 unit 类别的唯一样式

973
00:42:58,686 --> 0:43:01,556
之后把 fillOpacity strokeColor

974
00:42:58,686 --> 0:43:01,556
之后把 fillOpacity strokeColor

975
00:43:01,666 --> 0:43:03,056
和 fillColor 设置成样式值

976
00:43:03,056 --> 0:43:05,556
如果没有样式值

977
00:43:05,556 --> 0:43:06,576
就设置按默认值显示

978
00:43:08,546 --> 0:43:09,686
这实际上是一个很好的例子

979
00:43:09,686 --> 0:43:12,186
说明了渲染 IMDF 地图是多么容易

980
00:43:13,336 --> 0:43:14,426
大多数情况下将 feature_type

981
00:43:14,546 --> 0:43:16,216
和其包含 categoty 联合起来运用一下

982
00:43:16,216 --> 0:43:17,386
就能把样式给应用上去

983
00:43:17,866 --> 0:43:19,596
当然 我们其实也可以

984
00:43:19,646 --> 0:43:22,836
依赖其他属性来实现这件事

985
00:43:22,836 --> 0:43:23,816
那么 让我们来看一下变化吧

986
00:43:24,476 --> 0:43:29,526
好了 看起来好多了

987
00:43:29,876 --> 0:43:31,206
现在我们就能看出来

988
00:43:31,206 --> 0:43:33,756
哪里是过道以及用户可以从哪儿

989
00:43:33,756 --> 0:43:36,636
进到各个房间

990
00:43:36,886 --> 0:43:38,896
现在 你也许会注意到

991
00:43:39,706 --> 0:43:41,446
地图上的这些红色大头针

992
00:43:42,216 --> 0:43:43,256
它们代表的是便利设施

993
00:43:43,886 --> 0:43:45,416
请记住 amenities 包含

994
00:43:45,416 --> 0:43:47,886
点型 geometries 并且 importGeoJSON

995
00:43:47,886 --> 0:43:50,416
默认情况会把点型的 geometries

996
00:43:50,416 --> 0:43:51,656
按照 marker annotations 的方式呈现出来

997
00:43:53,526 --> 0:43:58,316
这里 我们希望和 iOS App 使用相同的图标

998
00:43:58,766 --> 0:44:01,356
为此 我们需要使用 MapKit JS 的

999
00:43:58,766 --> 0:44:01,356
为此 我们需要使用 MapKit JS 的

1000
00:44:01,356 --> 0:44:02,336
图片注释功能

1001
00:44:03,576 --> 0:44:04,496
就像我们之前所做的

1002
00:44:04,496 --> 0:44:05,946
我们可以通过

1003
00:44:05,946 --> 0:44:07,536
提供我们自己的 itemForPoint 方法

1004
00:44:07,536 --> 0:44:10,496
来替换掉 importGeoJSON 的默认行为

1005
00:44:11,176 --> 0:44:11,686
那么我们就来这么做吧

1006
00:44:21,046 --> 0:44:23,406
好了 所以我们在这儿做的

1007
00:44:23,406 --> 0:44:25,116
就是从属性中找到一个显示用的名称

1008
00:44:25,116 --> 0:44:26,216
或者是显示 category 给传回来的种类名

1009
00:44:26,216 --> 0:44:28,656
如果这两者都没有的话

1010
00:44:28,656 --> 0:44:30,756
就把它本身的名称作为 annotation 来显示

1011
00:44:32,296 --> 0:44:33,586
当这个 annotation 被点击时

1012
00:44:34,036 --> 0:44:35,516
显示用的名称将会出现在对话框里

1013
00:44:36,466 --> 0:44:38,236
我们还给所有的 amenities 先设置了

1014
00:44:38,236 --> 0:44:40,706
一个较低的显示优先级

1015
00:44:40,706 --> 0:44:42,686
这样我们就能给其他

1016
00:44:42,686 --> 0:44:43,876
更重要的 amenities 比如说展品

1017
00:44:44,296 --> 0:44:45,166
设置一个更高的优先级

1018
00:44:45,346 --> 0:44:47,116
我们很快就会讲到

1019
00:44:49,296 --> 0:44:51,366
并且最后 如果存在的话

1020
00:44:51,366 --> 0:44:55,946
如果我们的图标有一个 URL 的话

1021
00:44:55,946 --> 0:44:57,146
我们就创建一个 ImageAnnotation

1022
00:44:57,266 --> 0:44:59,546
如果没有的话 我们就返回

1023
00:44:59,616 --> 0:45:00,976
CreateDotAnnotation 的函数值

1024
00:44:59,616 --> 0:45:00,976
CreateDotAnnotation 的函数值

1025
00:45:02,086 --> 0:45:03,596
我已经在一个单独的文件里

1026
00:45:03,596 --> 0:45:04,726
实现了一个简单的点注释

1027
00:45:04,726 --> 0:45:06,076
而且我也已经把它导到项目里了

1028
00:45:06,866 --> 0:45:08,416
所以我们可以在这里直接用

1029
00:45:09,696 --> 0:45:12,316
好了 我们在这里要做的是

1030
00:45:12,626 --> 0:45:14,706
根据 category 给图标提供

1031
00:45:14,706 --> 0:45:17,026
正确的 URL

1032
00:45:17,856 --> 0:45:21,766
为此 我们在这儿创建一个对象

1033
00:45:21,766 --> 0:45:23,906
叫做 iconUrls

1034
00:45:24,616 --> 0:45:29,196
好了 这很简单

1035
00:45:30,306 --> 0:45:31,876
现在我们就可以用这个对象

1036
00:45:32,686 --> 0:45:41,196
来为图标获取 URL

1037
00:45:42,956 --> 0:45:45,356
你可能会注意到

1038
00:45:45,456 --> 0:45:50,006
这里的有一些条目非常的独特

1039
00:45:50,006 --> 0:45:52,416
它们并不是用来显示各种便利设施的

1040
00:45:52,656 --> 0:45:54,706
这些标志是用来表示

1041
00:45:54,846 --> 0:45:56,456
霸王龙 蜥脚类动物 以及骨骼展厅的

1042
00:45:57,946 --> 0:46:00,976
所以 我们需要以不同的方式来处理它们

1043
00:45:57,946 --> 0:46:00,976
所以 我们需要以不同的方式来处理它们

1044
00:46:07,616 --> 0:46:09,446
所以我们要做的是测试名称

1045
00:46:09,446 --> 0:46:11,216
如果名称是正确的匹配上了

1046
00:46:11,216 --> 0:46:13,386
我们就把对应的图标给显示上去

1047
00:46:13,596 --> 0:46:14,786
当然 我们也可以用

1048
00:46:14,786 --> 0:46:16,006
feature ID 来实现这件事

1049
00:46:17,486 --> 0:46:20,016
我们同时给所有的展品

1050
00:46:20,016 --> 0:46:22,256
设置了一个较高的显示优先级

1051
00:46:22,256 --> 0:46:24,586
其中霸王龙展览的优先级最高

1052
00:46:24,706 --> 0:46:28,526
最后但是也是十分重要的一步

1053
00:46:28,526 --> 0:46:30,586
我们还将把展品和

1054
00:46:30,586 --> 0:46:34,646
名称的 unicode 字符做一个匹配

1055
00:46:34,786 --> 0:46:35,706
是的 你没听错

1056
00:46:36,246 --> 0:46:37,136
实际上恐龙和霸王龙

1057
00:46:37,136 --> 0:46:39,876
都有它们专属的 unicode 字符

1058
00:46:41,186 --> 0:46:47,946
好了 让我们重新加载一下看下地图的渲染效果

1059
00:46:49,476 --> 0:46:51,066
现在 这张地图就可以

1060
00:46:51,136 --> 0:46:51,976
对得起《Dinoseum》这个名字了

1061
00:46:52,516 --> 0:46:55,866
[掌声]

1062
00:46:56,366 --> 0:46:59,366
再看这儿 如果我缩到

1063
00:47:00,046 --> 0:47:03,216
非常 非常 非常 远的时候

1064
00:47:03,216 --> 0:47:04,716
这是我们最后呈现出来的注释

1065
00:47:04,716 --> 0:47:06,546
是非常匹配主题的一个恐龙展品的图标

1066
00:47:07,656 --> 0:47:10,606
好了 当然 我们也可以

1067
00:47:11,186 --> 0:47:12,526
限制用户 让他们不能把比例尺

1068
00:47:12,526 --> 0:47:15,216
缩放到非常小

1069
00:47:15,846 --> 0:47:19,266
我们可以使用 MapKit JS 中提供的

1070
00:47:19,556 --> 0:47:25,206
一个叫做 cameraZoomRange 的设置

1071
00:47:25,206 --> 0:47:26,216
来实现这一点

1072
00:47:27,046 --> 0:47:32,386
好了 让我们来试一下 看看我们现在还能不能缩小了

1073
00:47:32,696 --> 0:47:36,016
看 无法再缩小了 这太棒了

1074
00:47:36,286 --> 0:47:43,786
好了 所以 最后一个我们想要在这里

1075
00:47:43,786 --> 0:47:45,676
处理掉的就是 occpant 了

1076
00:47:46,466 --> 0:47:48,396
请记得 这个部分

1077
00:47:48,396 --> 0:47:49,336
的确有点挑战性

1078
00:47:49,956 --> 0:47:51,806
因为 occupants 并不包含显示的定位点

1079
00:47:52,596 --> 0:47:54,376
但它们和 anchors 对象相连

1080
00:47:54,616 --> 0:47:55,956
anchors 是有显示的定位点的

1081
00:47:55,986 --> 0:47:57,336
因此 我们可以使用与之关联的

1082
00:47:57,336 --> 0:48:00,006
anchor 来获取坐标

1083
00:47:57,336 --> 0:48:00,006
anchor 来获取坐标

1084
00:48:00,006 --> 0:48:01,956
以便将 MapKit 注释放在地图上

1085
00:48:03,456 --> 0:48:05,666
因此 让我们在 ImdfArchive 类

1086
00:48:05,666 --> 0:48:07,376
中实现一个方法

1087
00:48:07,906 --> 0:48:09,766
它将所有 occupants 和他们的 anchors

1088
00:48:09,766 --> 0:48:12,746
按照特定的序号绑定在一起

1089
00:48:19,156 --> 0:48:21,516
好了 所以 这个方法返回一个 对象数组

1090
00:48:21,516 --> 0:48:22,586
这个数组包含of objects containing the

1091
00:48:22,586 --> 0:48:24,556
occupant 和它关联的

1092
00:48:24,926 --> 0:48:30,456
那么 让我们用这个来渲染 occupants 吧

1093
00:48:34,556 --> 0:48:37,506
就像你在这看到的

1094
00:48:37,556 --> 0:48:38,606
我们做的操作和给 amenities 的操作

1095
00:48:38,606 --> 0:48:40,826
是非常相似的 不过有一个例外

1096
00:48:41,576 --> 0:48:43,426
我们并不将 occupant 它本身提供给

1097
00:48:43,426 --> 0:48:44,816
importGeoJSON 这个方法

1098
00:48:44,816 --> 0:48:47,646
而提供的是 anchor

1099
00:48:47,646 --> 0:48:49,216
因为 anchor 中包含 geometry

1100
00:48:50,016 --> 0:48:51,796
我们把 occupant 的名称

1101
00:48:51,796 --> 0:48:53,096
设置成 annotation 显示出来的标题

1102
00:48:53,476 --> 0:48:57,696
我还基于 category 来设定了一个

1103
00:48:57,806 --> 0:49:01,066
特定的类 叫做 category-annotation

1104
00:48:57,806 --> 0:49:01,066
特定的类 叫做 category-annotation

1105
00:49:01,136 --> 0:49:03,266
这样 我就能给某些特定的

1106
00:49:03,266 --> 0:49:05,376
occupants 提供一个特定的样式

1107
00:49:06,876 --> 0:49:08,646
我已经在我们的 CSS 文件里

1108
00:49:08,736 --> 0:49:10,796
提供了一个样式

1109
00:49:11,366 --> 0:49:17,906
好了 现在我们再重新加载一次

1110
00:49:18,126 --> 0:49:19,956
好了 现在我们可以看到 Jurassic Table

1111
00:49:19,956 --> 0:49:21,976
这是我们一个著名的室内餐厅

1112
00:49:22,516 --> 0:49:26,986
[掌声]

1113
00:49:27,486 --> 0:49:30,756
现在 让我们回顾下我们都做了什么

1114
00:49:31,556 --> 0:49:33,586
首先我们从服务器上

1115
00:49:33,586 --> 0:49:35,196
下载 GeoJSON 文件

1116
00:49:35,196 --> 0:49:36,636
从中提取各类特征

1117
00:49:36,676 --> 0:49:38,316
并按照类别来组织它们

1118
00:49:39,316 --> 0:49:40,386
之后 我们实现了一些方法

1119
00:49:40,386 --> 0:49:42,256
来获得给定序数后的

1120
00:49:42,256 --> 0:49:44,276
对应特征上的特定类型

1121
00:49:45,026 --> 0:49:47,546
然后我们添加了一个楼层选择器

1122
00:49:47,546 --> 0:49:49,726
以便用户能够

1123
00:49:49,726 --> 0:49:51,146
选择它们想要查看的楼层

1124
00:49:52,456 --> 0:49:53,856
我们还给空间单元和出入口

1125
00:49:54,286 --> 0:49:55,696
提供了特定的样式

1126
00:49:57,946 --> 0:49:59,426
最后 我们为便利设施和使用者

1127
00:49:59,426 --> 0:50:01,206
创建了图标和

1128
00:49:59,426 --> 0:50:01,206
创建了图标和

1129
00:50:01,206 --> 0:50:02,886
自定义的注释

1130
00:50:03,156 --> 0:50:04,846
替换掉了默认的标记注释效果

1131
00:50:05,446 --> 0:50:08,336
使用 MapKit JS 我们能够

1132
00:50:08,336 --> 0:50:10,316
创建一个和 iOS 版本

1133
00:50:10,316 --> 0:50:12,116
具有相同外观和感觉的地图

1134
00:50:12,816 --> 0:50:14,266
现在 我们有了一个漂亮的地图

1135
00:50:14,266 --> 0:50:16,006
可以把它嵌入到 Dinoseum 的网站里

1136
00:50:16,006 --> 0:50:17,776
并在所有的主流浏览器中

1137
00:50:17,776 --> 0:50:19,506
给用户们提供

1138
00:50:19,506 --> 0:50:20,476
相同的使用体验

1139
00:50:21,286 --> 0:50:23,396
关于这一点

1140
00:50:23,396 --> 0:50:24,736
我将让 Mithilesh 上台来做个总结

1141
00:50:26,516 --> 0:50:31,756
[掌声]

1142
00:50:32,256 --> 0:50:36,686
&gt;&gt; 大家好 我希望你们能喜欢你们今天看到的一切

1143
00:50:37,886 --> 0:50:39,166
在我们结束今天的讲座之前

1144
00:50:39,166 --> 0:50:40,166
我还想介绍一些

1145
00:50:40,166 --> 0:50:42,196
适用于室内地图的最佳实践建议

1146
00:50:44,356 --> 0:50:45,396
我们先来说说样式

1147
00:50:46,756 --> 0:50:47,906
当你设计一个室内地图的时候

1148
00:50:47,986 --> 0:50:49,106
应该让它看起来像是你 App 的

1149
00:50:49,106 --> 0:50:50,256
自然的延申

1150
00:50:51,106 --> 0:50:53,196
你应该使用和你的 App 的主题

1151
00:50:53,306 --> 0:50:55,896
或是和你的公司相匹配的颜色及图标

1152
00:50:57,176 --> 0:50:58,296
不要尝试去复制 Apple 地图

1153
00:50:58,296 --> 0:50:59,686
或者其他 App 的外观效果

1154
00:51:01,046 --> 0:51:02,826
取而代之的是你要确保

1155
00:51:02,866 --> 0:51:05,126
地图上的覆盖颜色 图标 标签

1156
00:51:05,126 --> 0:51:06,216
要匹配你的 App 的视觉效果

1157
00:51:09,296 --> 0:51:10,506
给你地图上的不同的特征对象

1158
00:51:10,506 --> 0:51:12,146
选择不同的风格的样式

1159
00:51:13,516 --> 0:51:14,696
给诸如电梯之类的区域

1160
00:51:14,696 --> 0:51:16,496
使用特定的颜色分类

1161
00:51:17,186 --> 0:51:19,486
让人们可以一眼就发现它们

1162
00:51:22,366 --> 0:51:24,216
使用容易识别的图标

1163
00:51:25,376 --> 0:51:27,246
图标不仅在视觉上吸引人

1164
00:51:27,316 --> 0:51:29,116
而且给能够

1165
00:51:29,116 --> 0:51:31,306
有效的传达其目的

1166
00:51:34,196 --> 0:51:36,256
你应该根据缩放级别

1167
00:51:36,376 --> 0:51:37,506
调整地图的细节

1168
00:51:38,326 --> 0:51:39,776
过多的细节会让地图

1169
00:51:39,776 --> 0:51:41,056
看起来杂乱无章

1170
00:51:42,026 --> 0:51:43,856
当地图被缩到非常小的时候

1171
00:51:43,856 --> 0:51:45,166
展示大的区域 像是房间和建筑物

1172
00:51:45,516 --> 0:51:47,516
然后随着地图的放大

1173
00:51:47,516 --> 0:51:49,056
逐步添加更多的

1174
00:51:49,086 --> 0:51:50,006
细节功能和标签等

1175
00:51:53,026 --> 0:51:54,346
你应该在地图里包含一些

1176
00:51:54,346 --> 0:51:55,786
周围的区域来提供一些相关的参照

1177
00:51:56,696 --> 0:51:58,176
临街的街道 运动场

1178
00:51:58,266 --> 0:51:59,786
以及其他地标可以帮助人们

1179
00:51:59,836 --> 0:52:02,496
在使用地图时确定方位

1180
00:51:59,836 --> 0:52:02,496
在使用地图时确定方位

1181
00:52:04,396 --> 0:52:05,486
并且 最终也是最重要的是

1182
00:52:05,486 --> 0:52:08,106
在 iOS 上开启

1183
00:52:08,106 --> 0:52:10,406
用户的室内定位

1184
00:52:10,406 --> 0:52:13,086
可以让用户在浏览你的场所时

1185
00:52:13,086 --> 0:52:14,276
优化他们的使用体验

1186
00:52:15,886 --> 0:52:17,146
更多信息 你可以

1187
00:52:17,146 --> 0:52:18,596
查看相关的讲座

1188
00:52:18,756 --> 0:52:20,596
《What's New in MapKit and MapKit JS》以及

1189
00:52:21,186 --> 0:52:24,566
《Introducing the Apple Maps Program》这两场讲座

1190
00:52:25,346 --> 0:52:26,446
如果你有任何意见和问题

1191
00:52:26,446 --> 0:52:28,416
可以在这场讲座结束后

1192
00:52:28,416 --> 0:52:29,486
到我们的实验室来

1193
00:52:30,176 --> 0:52:31,556
非常感谢各位

1194
00:52:31,556 --> 0:52:33,156
出席这场讲座

1195
00:52:33,156 --> 0:52:33,966
希望你们能享受接下来的会议

1196
00:52:34,516 --> 0:52:39,500
[掌声]
