1
00:00:01,516 --> 0:00:05,500
[ Music ]

2
00:00:09,516 --> 0:00:15,076
[ Applause ]

3
00:00:15,576 --> 0:00:16,136
&gt;&gt; Hi, everyone.

4
00:00:17,146 --> 0:00:18,806
I'm Jacob Xiao and I'll be

5
00:00:18,806 --> 0:00:20,366
joined later by Kyle Macomber.

6
00:00:20,956 --> 0:00:22,256
We're so excited to show you

7
00:00:22,256 --> 0:00:24,766
SwiftUI, a revolutionary new way

8
00:00:24,766 --> 0:00:26,306
to build better apps faster.

9
00:00:26,916 --> 0:00:29,516
We think the best way to learn

10
00:00:29,516 --> 0:00:31,326
about Swift UI is to see it in

11
00:00:31,326 --> 0:00:33,986
action by building an app.

12
00:00:33,986 --> 0:00:35,756
Using SwiftUI feels like magic,

13
00:00:36,286 --> 0:00:37,386
but to make it clear that I

14
00:00:37,386 --> 0:00:38,176
don't have anything up my

15
00:00:38,176 --> 0:00:39,906
sleeves, I want to go through

16
00:00:39,906 --> 0:00:41,556
the entire process of creating

17
00:00:41,556 --> 0:00:43,436
an app in SwiftUI starting from

18
00:00:43,436 --> 0:00:43,956
scratch.

19
00:00:45,356 --> 0:00:46,236
So what kind of an app are we

20
00:00:46,236 --> 0:00:46,706
going to make?

21
00:00:47,356 --> 0:00:48,506
Well, let me set the stage for

22
00:00:48,506 --> 0:00:48,636
you.

23
00:00:49,436 --> 0:00:52,166
Anybody here hate meetings?

24
00:00:52,166 --> 0:00:53,926
Yeah? Well, so do we.

25
00:00:54,846 --> 0:00:55,726
But Kyle and I have found

26
00:00:55,726 --> 0:00:56,816
something that makes meetings

27
00:00:56,816 --> 0:00:58,486
more bearable, and that's having

28
00:00:58,486 --> 0:00:59,736
them in amazing, fancy

29
00:00:59,736 --> 0:01:00,396
conference rooms.

30
00:00:59,736 --> 0:01:00,396
conference rooms.

31
00:01:01,566 --> 0:01:02,756
So we've been making a list of

32
00:01:02,756 --> 0:01:03,936
all of the best conference rooms

33
00:01:03,936 --> 0:01:05,546
we can find and we want to make

34
00:01:05,546 --> 0:01:06,886
an app for it.

35
00:01:07,716 --> 0:01:10,396
So let's dive in.

36
00:01:10,606 --> 0:01:12,926
Okay. I'll start by creating a

37
00:01:12,926 --> 0:01:13,336
new project.

38
00:01:17,076 --> 0:01:18,906
And we'll call it Rooms.

39
00:01:22,046 --> 0:01:22,756
And I'll make sure that Use

40
00:01:22,756 --> 0:01:23,546
SwiftUI is checked.

41
00:01:30,046 --> 0:01:32,086
Now Xcode has started us off

42
00:01:32,706 --> 0:01:34,776
with a view, with the view that

43
00:01:34,776 --> 0:01:36,006
we can use to start building our

44
00:01:36,006 --> 0:01:36,296
UI.

45
00:01:40,576 --> 0:01:42,046
Our code is over here on the

46
00:01:42,046 --> 0:01:42,316
left.

47
00:01:43,096 --> 0:01:45,476
And on the right is the Canvas.

48
00:01:46,556 --> 0:01:47,816
And if you're familiar with

49
00:01:47,816 --> 0:01:48,666
Interface Builder or

50
00:01:48,666 --> 0:01:50,566
Storyboards, you may think that

51
00:01:50,566 --> 0:01:51,396
there's nothing new here.

52
00:01:51,956 --> 0:01:53,566
Some code on one side and a

53
00:01:53,566 --> 0:01:54,646
visual Canvas on the other,

54
00:01:54,806 --> 0:01:55,026
right?

55
00:01:56,206 --> 0:01:57,156
Well, there's a very important

56
00:01:57,156 --> 0:01:57,476
difference.

57
00:01:58,576 --> 0:02:01,216
With Storyboards, you need to

58
00:01:58,576 --> 0:02:01,216
With Storyboards, you need to

59
00:02:01,216 --> 0:02:02,726
choose between the benefits of

60
00:02:02,726 --> 0:02:04,476
using a visual editor, or the

61
00:02:04,476 --> 0:02:06,126
benefits of creating your UI in

62
00:02:06,126 --> 0:02:06,436
code.

63
00:02:07,236 --> 0:02:08,895
And if you choose one and change

64
00:02:08,895 --> 0:02:10,455
your mind later, then you have

65
00:02:10,455 --> 0:02:11,406
to start all over again.

66
00:02:11,406 --> 0:02:14,046
But with SwiftUI, that problem

67
00:02:14,046 --> 0:02:14,546
is gone.

68
00:02:15,416 --> 0:02:17,136
Now your view definition is

69
00:02:17,136 --> 0:02:18,946
always Swift's code and you can

70
00:02:18,946 --> 0:02:20,666
always choose to edit the code

71
00:02:20,846 --> 0:02:22,726
directly or to use the visual

72
00:02:22,726 --> 0:02:23,106
editor.

73
00:02:23,106 --> 0:02:24,376
And you can always go back and

74
00:02:24,376 --> 0:02:24,756
forth.

75
00:02:25,946 --> 0:02:27,326
So if we select something in the

76
00:02:27,326 --> 0:02:29,986
Canvas, then that selection is

77
00:02:29,986 --> 0:02:31,136
reflected in the code as well.

78
00:02:32,126 --> 0:02:33,306
And if you change something in

79
00:02:33,306 --> 0:02:35,756
the code, then that change is

80
00:02:35,756 --> 0:02:36,986
reflected in the Canvas as well.

81
00:02:37,486 --> 0:02:38,696
They work together seamlessly.

82
00:02:38,696 --> 0:02:41,856
So let me tell you a little more

83
00:02:41,856 --> 0:02:42,586
about how it works.

84
00:02:43,666 --> 0:02:45,546
The Canvas shows us previews of

85
00:02:45,546 --> 0:02:46,166
our view code.

86
00:02:46,766 --> 0:02:48,296
And it even helps us edit and

87
00:02:48,296 --> 0:02:49,136
learn about that code.

88
00:02:50,336 --> 0:02:52,036
Xcode shows these previews by

89
00:02:52,036 --> 0:02:53,856
compiling our real code and

90
00:02:53,856 --> 0:02:55,106
running it to generate a result.

91
00:02:56,226 --> 0:02:57,226
But one of my favorite things

92
00:02:57,226 --> 0:02:58,556
about previews is that they're

93
00:02:58,556 --> 0:03:00,406
also created using SwiftUI code.

94
00:02:58,556 --> 0:03:00,406
also created using SwiftUI code.

95
00:03:00,936 --> 0:03:02,296
In this case, the code right

96
00:03:02,296 --> 0:03:02,506
here.

97
00:03:03,166 --> 0:03:06,036
And later on, we'll see how that

98
00:03:06,036 --> 0:03:07,196
gives us a lot of power to

99
00:03:07,196 --> 0:03:08,436
customize our previews.

100
00:03:08,436 --> 0:03:11,516
Now our app is going to show a

101
00:03:11,516 --> 0:03:13,216
list of conference rooms, so

102
00:03:13,216 --> 0:03:14,056
let's make the cell for our

103
00:03:14,056 --> 0:03:14,396
list.

104
00:03:15,016 --> 0:03:17,296
I'm going to add another piece

105
00:03:17,296 --> 0:03:19,046
of text under this one to show

106
00:03:19,046 --> 0:03:20,416
more detail about each room.

107
00:03:21,496 --> 0:03:23,396
And I'm going to add it by just

108
00:03:23,396 --> 0:03:24,756
dragging it out onto my Canvas.

109
00:03:25,456 --> 0:03:28,336
And Xcode even shows me what

110
00:03:28,336 --> 0:03:29,626
will happen when I place it at

111
00:03:29,626 --> 0:03:30,396
different locations.

112
00:03:31,106 --> 0:03:33,406
Now when I drop it in, the

113
00:03:33,406 --> 0:03:35,336
preview updates to show my new

114
00:03:35,336 --> 0:03:38,166
text, but even better, Xcode has

115
00:03:38,166 --> 0:03:39,666
actually edited my code to add

116
00:03:39,666 --> 0:03:40,246
that text.

117
00:03:41,396 --> 0:03:42,816
Xcode has embedded these views

118
00:03:43,386 --> 0:03:44,876
into a Vstack to get the layout

119
00:03:44,876 --> 0:03:45,336
that I want.

120
00:03:46,456 --> 0:03:48,196
Now a Vstack or vertical stack

121
00:03:48,526 --> 0:03:49,646
is one of the common layout

122
00:03:49,686 --> 0:03:50,776
elements in SwiftUI.

123
00:03:51,696 --> 0:03:52,786
It lets you stack views

124
00:03:52,786 --> 0:03:53,196
vertically.

125
00:03:53,196 --> 0:03:55,396
And there's also an Hstack that

126
00:03:55,396 --> 0:03:56,546
stacks views horizontally.

127
00:03:57,616 --> 0:03:58,816
And these stacks are containers.

128
00:03:58,936 --> 0:04:00,566
I can place any views that I

129
00:03:58,936 --> 0:04:00,566
I can place any views that I

130
00:04:00,566 --> 0:04:03,646
want inside of them.

131
00:04:03,856 --> 0:04:05,046
Now I'm going to replace this

132
00:04:05,046 --> 0:04:06,426
placeholder that Xcode has given

133
00:04:06,426 --> 0:04:07,636
me with some more information

134
00:04:07,676 --> 0:04:08,486
about the room.

135
00:04:09,496 --> 0:04:10,516
We'll show the number of people

136
00:04:10,516 --> 0:04:10,996
that it can hold.

137
00:04:11,566 --> 0:04:12,756
And for now, let's just use a

138
00:04:12,756 --> 0:04:13,536
hard-coded value.

139
00:04:14,086 --> 0:04:17,055
Next, let's add an image next to

140
00:04:17,055 --> 0:04:17,606
our text.

141
00:04:18,206 --> 0:04:20,606
I can make edits in the code

142
00:04:20,906 --> 0:04:22,146
just as easily as in the editor.

143
00:04:22,776 --> 0:04:24,366
So let's embed our view in an

144
00:04:24,366 --> 0:04:24,656
Hstack.

145
00:04:25,566 --> 0:04:27,246
I can Command-click on my view

146
00:04:28,016 --> 0:04:29,456
and choose Embed an H Stack.

147
00:04:31,036 --> 0:04:32,336
And Xcode has updated the code

148
00:04:32,336 --> 0:04:33,006
to do just that.

149
00:04:34,176 --> 0:04:35,806
Now I can add an image next to

150
00:04:35,806 --> 0:04:36,416
my Vstack.

151
00:04:37,346 --> 0:04:38,886
We'll add some assets in a bit,

152
00:04:39,086 --> 0:04:40,816
but for now I'll just use an SF

153
00:04:40,816 --> 0:04:42,316
symbol image to get something up

154
00:04:42,316 --> 0:04:43,000
and running.

155
00:04:47,236 --> 0:04:49,546
SF symbols are new in iOS 13.

156
00:04:49,966 --> 0:04:50,696
They're a rich set of

157
00:04:50,696 --> 0:04:52,066
Apple-provided images that you

158
00:04:52,066 --> 0:04:53,526
can use in your app.

159
00:04:54,286 --> 0:04:55,836
And already we have a basic

160
00:04:55,836 --> 0:04:56,536
version of our cell.

161
00:04:57,656 --> 0:04:59,376
Now, I'll use the Canvas to

162
00:04:59,376 --> 0:05:00,576
style the cell the way I want.

163
00:04:59,376 --> 0:05:00,576
style the cell the way I want.

164
00:05:02,026 --> 0:05:03,496
I can Command-click on my stack

165
00:05:04,406 --> 0:05:06,416
and choose Inspect to see some

166
00:05:06,416 --> 0:05:07,296
of the properties that I can

167
00:05:07,296 --> 0:05:08,116
change for this stack.

168
00:05:09,376 --> 0:05:10,676
I'm going to set its alignment

169
00:05:10,736 --> 0:05:11,296
to be leading.

170
00:05:11,836 --> 0:05:14,746
And, once again, Xcode has

171
00:05:14,746 --> 0:05:16,236
updated my code to make that

172
00:05:16,236 --> 0:05:16,626
change.

173
00:05:17,266 --> 0:05:19,886
Now, I can also Command-click on

174
00:05:19,886 --> 0:05:23,876
my text to inspect that as well.

175
00:05:24,016 --> 0:05:24,986
And let's change this to be a

176
00:05:25,036 --> 0:05:25,636
smaller font.

177
00:05:25,736 --> 0:05:27,936
I'm going to use sub-headline.

178
00:05:28,606 --> 0:05:30,936
And one of the great things

179
00:05:31,006 --> 0:05:33,046
about Xcode modifying my code is

180
00:05:33,046 --> 0:05:34,156
it helps me to learn about

181
00:05:34,216 --> 0:05:34,546
SwiftUI.

182
00:05:34,546 --> 0:05:37,776
For example, here it's added

183
00:05:37,776 --> 0:05:39,136
this code to change the font.

184
00:05:40,006 --> 0:05:41,156
We call these kinds of methods

185
00:05:41,356 --> 0:05:43,056
modifiers and they're used in

186
00:05:43,056 --> 0:05:44,766
SwiftUI to customize the way

187
00:05:44,766 --> 0:05:46,046
your views look or behave.

188
00:05:47,546 --> 0:05:48,506
I'm going to add another

189
00:05:48,506 --> 0:05:50,826
modifier in code to set the

190
00:05:50,826 --> 0:05:53,216
foreground color to be a

191
00:05:53,216 --> 0:05:54,000
secondary color.

192
00:05:58,046 --> 0:06:00,366
Okay. Now that I have my cell,

193
00:05:58,046 --> 0:06:00,366
Okay. Now that I have my cell,

194
00:06:00,716 --> 0:06:01,596
let's put it into a list.

195
00:06:02,806 --> 0:06:03,946
To do that, I'm going to

196
00:06:03,946 --> 0:06:06,366
Command-click on our cell and

197
00:06:06,366 --> 0:06:07,656
just choose Convert To List.

198
00:06:08,796 --> 0:06:11,086
This wraps my cell in a list and

199
00:06:11,086 --> 0:06:12,896
shows five iterations of it.

200
00:06:13,516 --> 0:06:18,566
[ Applause ]

201
00:06:19,066 --> 0:06:21,156
It's great to be able to do this

202
00:06:21,156 --> 0:06:21,566
so easily.

203
00:06:21,566 --> 0:06:22,566
And this code is all that I need

204
00:06:22,706 --> 0:06:23,626
to show a list in my app.

205
00:06:23,976 --> 0:06:24,946
There's no delegates or data

206
00:06:24,946 --> 0:06:26,686
sources necessary, just views

207
00:06:26,686 --> 0:06:28,786
inside of a list.

208
00:06:29,056 --> 0:06:30,416
Next, let's hook this up to some

209
00:06:30,416 --> 0:06:30,676
data.

210
00:06:31,396 --> 0:06:35,256
I'm going to drag in some assets

211
00:06:35,446 --> 0:06:36,666
and a model file that I created

212
00:06:36,666 --> 0:06:36,986
earlier.

213
00:06:43,076 --> 0:06:44,556
Now my model has a few fields of

214
00:06:44,556 --> 0:06:45,666
information that we'll use.

215
00:06:46,736 --> 0:06:48,156
And to use this in a list in

216
00:06:48,156 --> 0:06:49,846
SwiftUI, I just need to make

217
00:06:49,846 --> 0:06:51,106
this type identifiable.

218
00:06:56,046 --> 0:06:57,526
This lets Lists know which items

219
00:06:57,526 --> 0:06:58,226
are coming and going.

220
00:06:59,036 --> 0:07:00,796
And all I need is an ID property

221
00:06:59,036 --> 0:07:00,796
And all I need is an ID property

222
00:07:00,926 --> 0:07:01,576
which we already have.

223
00:07:02,286 --> 0:07:04,486
Now this model file also

224
00:07:04,486 --> 0:07:05,866
includes some test data that I

225
00:07:05,866 --> 0:07:08,906
can use for debugging my app.

226
00:07:09,166 --> 0:07:10,296
Now let's go back to our view

227
00:07:10,986 --> 0:07:13,256
and let's pass in our data.

228
00:07:14,646 --> 0:07:17,526
I'll add a property for my

229
00:07:18,236 --> 0:07:18,406
rooms.

230
00:07:21,146 --> 0:07:22,246
And one of the great things

231
00:07:22,246 --> 0:07:23,596
about previews is that they can

232
00:07:23,596 --> 0:07:24,556
use their own test data.

233
00:07:25,286 --> 0:07:26,536
So I'll just pass in my test

234
00:07:26,536 --> 0:07:27,256
data right here.

235
00:07:31,066 --> 0:07:31,756
Now you may have noticed that

236
00:07:31,756 --> 0:07:33,246
this banner appeared above my

237
00:07:33,246 --> 0:07:33,626
preview.

238
00:07:34,886 --> 0:07:36,096
When I make larger changes to my

239
00:07:36,096 --> 0:07:37,776
types like adding this rooms

240
00:07:37,776 --> 0:07:39,716
property to our view, Xcode

241
00:07:39,716 --> 0:07:41,126
pauses the previews until I'm

242
00:07:41,126 --> 0:07:42,296
ready to have them resume

243
00:07:42,296 --> 0:07:42,716
updating.

244
00:07:43,216 --> 0:07:44,736
And I can just click button to

245
00:07:44,736 --> 0:07:45,186
resume.

246
00:07:45,656 --> 0:07:48,086
Next, let's use our data to

247
00:07:48,086 --> 0:07:48,766
drive the list.

248
00:07:49,506 --> 0:07:50,986
We'll pass in our rooms to the

249
00:07:50,986 --> 0:07:54,116
list and then I'll update our

250
00:07:54,116 --> 0:07:55,736
text to show the room's name.

251
00:07:56,596 --> 0:07:58,326
And we'll also use the real

252
00:07:58,326 --> 0:08:01,206
capacity right here in our text.

253
00:07:58,326 --> 0:08:01,206
capacity right here in our text.

254
00:08:07,056 --> 0:08:07,856
And now that we have real

255
00:08:07,856 --> 0:08:09,566
images, let's also use our Rooms

256
00:08:09,646 --> 0:08:10,676
thumbnail for the image.

257
00:08:17,056 --> 0:08:17,176
Great.

258
00:08:18,516 --> 0:08:25,546
[ Applause ]

259
00:08:26,046 --> 0:08:26,626
And you may have noticed the

260
00:08:26,626 --> 0:08:27,576
subtle change that happened to

261
00:08:27,576 --> 0:08:28,446
our list when we did this.

262
00:08:28,546 --> 0:08:30,826
When we started, our cells were

263
00:08:30,826 --> 0:08:32,265
the standard 44 points tall.

264
00:08:32,265 --> 0:08:34,015
But when we changed to these

265
00:08:34,015 --> 0:08:35,706
larger images, the cells

266
00:08:35,706 --> 0:08:37,176
automatically expanded to make

267
00:08:37,176 --> 0:08:38,596
sure those images fit without

268
00:08:38,596 --> 0:08:39,976
any extra work.

269
00:08:40,081 --> 0:08:42,081
[ Applause ]

270
00:08:42,145 --> 0:08:42,655
It's pretty cool.

271
00:08:44,030 --> 0:08:46,031
[ Applause ]

272
00:08:46,046 --> 0:08:47,066
And now that I have these images

273
00:08:47,066 --> 0:08:48,456
in context, they look a little

274
00:08:48,456 --> 0:08:48,916
bit sharp.

275
00:08:49,746 --> 0:08:50,956
So let's add a corner radius to

276
00:08:50,956 --> 0:08:52,066
our image using another

277
00:08:52,066 --> 0:08:52,636
modifier.

278
00:08:53,656 --> 0:08:54,846
And if you're not sure about

279
00:08:54,846 --> 0:08:56,096
what modifiers are available,

280
00:08:56,806 --> 0:08:58,466
you can view and filter a list

281
00:08:58,466 --> 0:08:59,296
of them right here in the

282
00:08:59,296 --> 0:08:59,716
library.

283
00:09:00,806 --> 0:09:02,596
Let's find Corner Radius and

284
00:09:02,596 --> 0:09:03,686
we'll just drag it onto our

285
00:09:04,566 --> 0:09:04,696
image.

286
00:09:05,516 --> 0:09:12,606
[ Applause ]

287
00:09:13,106 --> 0:09:15,056
Then we can tweak the values.

288
00:09:15,056 --> 0:09:17,296
That looks a little bit too big.

289
00:09:17,296 --> 0:09:17,526
Great.

290
00:09:18,206 --> 0:09:19,626
And now that our cells and our

291
00:09:19,626 --> 0:09:21,486
lists are looking good, the next

292
00:09:21,486 --> 0:09:22,706
thing that we need is to be able

293
00:09:22,706 --> 0:09:23,996
to tap on a cell to see more

294
00:09:23,996 --> 0:09:24,426
details.

295
00:09:25,606 --> 0:09:27,406
To support this, let's wrap our

296
00:09:27,406 --> 0:09:28,676
list in a navigation view.

297
00:09:30,406 --> 0:09:31,566
A navigation view shows a

298
00:09:31,566 --> 0:09:33,706
navigation bar and also has a

299
00:09:33,776 --> 0:09:34,986
stack to push views onto.

300
00:09:36,306 --> 0:09:37,736
Let's also set a navigation bar

301
00:09:37,736 --> 0:09:39,826
title and we'll just use some

302
00:09:39,826 --> 0:09:42,436
text that says Rooms to show

303
00:09:42,436 --> 0:09:43,616
Rooms in our navigation bar.

304
00:09:44,306 --> 0:09:47,896
Now let's set up our cell to

305
00:09:47,896 --> 0:09:48,796
push onto this stack.

306
00:09:50,076 --> 0:09:51,986
To do that, I'll wrap our cells

307
00:09:51,986 --> 0:09:53,326
content in a Navigation button.

308
00:09:53,966 --> 0:09:56,816
A Navigation button takes a

309
00:09:56,816 --> 0:09:58,796
destination which is a view that

310
00:09:58,796 --> 0:09:59,826
will push onto the stack.

311
00:10:00,716 --> 0:10:02,066
And to start with, we'll just

312
00:10:02,066 --> 0:10:03,436
use some text that shows the

313
00:10:03,436 --> 0:10:04,056
room's name.

314
00:10:05,126 --> 0:10:06,916
Then we'll put all of our cell's

315
00:10:06,916 --> 0:10:08,406
content inside of that

316
00:10:08,406 --> 0:10:10,636
navigation button and we're

317
00:10:10,836 --> 0:10:11,456
ready to go.

318
00:10:12,466 --> 0:10:13,796
And notice that our UI has

319
00:10:13,796 --> 0:10:15,206
updated to automatically show

320
00:10:15,206 --> 0:10:16,206
these UI indicators.

321
00:10:17,156 --> 0:10:18,516
SwiftUI handles details like

322
00:10:18,516 --> 0:10:19,936
this for me automatically so

323
00:10:19,936 --> 0:10:21,256
that my UI automatically looks

324
00:10:21,256 --> 0:10:21,866
right by default.

325
00:10:22,546 --> 0:10:25,026
Now let's also check that the

326
00:10:25,076 --> 0:10:25,986
cell behaves correctly.

327
00:10:26,796 --> 0:10:27,906
I can just click on this play

328
00:10:27,906 --> 0:10:29,676
button in my preview, which

329
00:10:29,676 --> 0:10:30,556
takes me into Live Mode.

330
00:10:31,486 --> 0:10:33,066
And when I do this, Xcode is

331
00:10:33,066 --> 0:10:34,856
compiling my code, sending it

332
00:10:34,856 --> 0:10:36,276
over to the Simulator, running

333
00:10:36,276 --> 0:10:37,876
it for me and showing the result

334
00:10:37,956 --> 0:10:39,016
of all of that right here in the

335
00:10:39,016 --> 0:10:40,596
Canvas, which means I can

336
00:10:40,596 --> 0:10:41,456
interact with my view.

337
00:10:42,446 --> 0:10:44,146
So I can tap on a cell to make

338
00:10:44,146 --> 0:10:45,696
sure that everything pushes and

339
00:10:45,696 --> 0:10:47,266
pops as I expect.

340
00:10:48,256 --> 0:10:50,256
And if I swipe to pop, you'll

341
00:10:50,256 --> 0:10:51,776
notice an advanced behavior that

342
00:10:51,776 --> 0:10:52,656
SwiftUI has given me

343
00:10:52,656 --> 0:10:53,286
automatically.

344
00:10:53,896 --> 0:10:56,016
Our cells stay highlighted, and

345
00:10:56,016 --> 0:10:57,056
as I swipe, they are

346
00:10:57,056 --> 0:10:58,316
interactively un-highlight it

347
00:10:58,586 --> 0:10:59,886
without us doing any extra work.

348
00:11:00,516 --> 0:11:08,206
[ Applause ]

349
00:11:08,706 --> 0:11:10,396
Okay, so we've got our list and

350
00:11:10,396 --> 0:11:11,496
it's working with its cells.

351
00:11:12,256 --> 0:11:13,406
But this view code is a little

352
00:11:13,406 --> 0:11:14,086
bit large now.

353
00:11:14,856 --> 0:11:15,826
And I'd really like to factor

354
00:11:15,826 --> 0:11:17,346
the cell out to be its own view.

355
00:11:17,976 --> 0:11:19,346
And Xcode helps me do this with

356
00:11:19,346 --> 0:11:20,416
one simple operation.

357
00:11:21,206 --> 0:11:22,796
I can just command click on the

358
00:11:22,796 --> 0:11:24,206
view that I want and choose

359
00:11:24,206 --> 0:11:26,716
Extract Subview.

360
00:11:27,016 --> 0:11:28,396
[ Applause ]

361
00:11:28,396 --> 0:11:28,976
It's fantastic.

362
00:11:29,516 --> 0:11:32,756
[ Applause ]

363
00:11:33,256 --> 0:11:34,486
All of my view code gets

364
00:11:34,486 --> 0:11:36,246
extracted out down here and I

365
00:11:36,246 --> 0:11:37,426
even get to choose the name for

366
00:11:37,426 --> 0:11:37,936
my new view.

367
00:11:38,366 --> 0:11:40,796
Let's call it Room Cell.

368
00:11:41,516 --> 0:11:44,036
[ Applause ]

369
00:11:44,536 --> 0:11:45,706
Thank you.

370
00:11:45,736 --> 0:11:46,986
Now, let's also add a property

371
00:11:47,266 --> 0:11:49,326
for our room.

372
00:11:49,406 --> 0:11:50,656
And we'll pass it in right here.

373
00:11:54,136 --> 0:11:55,626
This is a fantastic workflow

374
00:11:55,626 --> 0:11:56,056
improvement.

375
00:11:56,426 --> 0:11:58,056
And with SwiftUI, views are

376
00:11:58,056 --> 0:11:59,316
really lightweight so you don't

377
00:11:59,316 --> 0:12:00,496
have to worry about creating

378
00:11:59,316 --> 0:12:00,496
have to worry about creating

379
00:12:00,496 --> 0:12:01,686
extra views to better

380
00:12:01,686 --> 0:12:02,896
encapsulate or separate your

381
00:12:02,896 --> 0:12:03,186
logic.

382
00:12:03,856 --> 0:12:06,676
Okay, next let's build our

383
00:12:06,676 --> 0:12:07,246
detail view.

384
00:12:07,906 --> 0:12:09,716
I'm going to create a new view

385
00:12:10,736 --> 0:12:11,896
and make sure to use the SwiftUI

386
00:12:11,896 --> 0:12:12,266
Template.

387
00:12:12,886 --> 0:12:15,336
And let's call this new view

388
00:12:15,486 --> 0:12:15,976
Room Detail.

389
00:12:20,216 --> 0:12:21,946
Xcode has automatically given me

390
00:12:21,946 --> 0:12:24,006
a new ViewStruct and also the

391
00:12:24,006 --> 0:12:25,406
preview code to create it.

392
00:12:26,386 --> 0:12:27,456
Now since I want this detail

393
00:12:27,456 --> 0:12:28,626
view to show more information

394
00:12:28,626 --> 0:12:30,186
about my room, I'll add a

395
00:12:30,186 --> 0:12:30,976
property for the room.

396
00:12:33,466 --> 0:12:34,876
And just like I did before, I'll

397
00:12:34,876 --> 0:12:36,686
update my preview code to pass

398
00:12:36,686 --> 0:12:38,496
in one of our rooms from their

399
00:12:38,496 --> 0:12:39,686
test data.

400
00:12:43,206 --> 0:12:44,946
Then let's build our UI.

401
00:12:46,186 --> 0:12:48,396
We use an image and we'll show

402
00:12:48,686 --> 0:12:49,516
the room's image name.

403
00:12:53,396 --> 0:12:54,526
Okay, now we're showing our

404
00:12:54,526 --> 0:12:55,856
image but it's a little bit too

405
00:12:55,856 --> 0:12:56,576
large for our view.

406
00:12:57,616 --> 0:12:59,496
By default, SwiftUI shows all

407
00:12:59,496 --> 0:13:00,606
images at the size of their

408
00:12:59,496 --> 0:13:00,606
images at the size of their

409
00:13:00,606 --> 0:13:02,336
contents to prevent visual

410
00:13:02,336 --> 0:13:03,836
artifacts from scaling the image

411
00:13:03,836 --> 0:13:04,496
up or down.

412
00:13:05,416 --> 0:13:06,896
But for photos like this one, we

413
00:13:07,366 --> 0:13:08,546
want to be able to resize them

414
00:13:08,546 --> 0:13:08,896
down.

415
00:13:09,276 --> 0:13:10,676
And we can use an image-specific

416
00:13:11,046 --> 0:13:13,336
modifier called Resizable to do

417
00:13:13,336 --> 0:13:13,546
that.

418
00:13:15,126 --> 0:13:16,266
So I'll just drag this onto our

419
00:13:16,266 --> 0:13:19,866
view and all right, now it's

420
00:13:19,866 --> 0:13:21,846
resizing to fill the size that

421
00:13:21,846 --> 0:13:22,156
we have.

422
00:13:22,556 --> 0:13:23,986
But really we want it to

423
00:13:24,186 --> 0:13:25,456
maintain this original aspect

424
00:13:25,456 --> 0:13:25,866
ratio.

425
00:13:26,396 --> 0:13:27,516
And we can do that with another

426
00:13:27,516 --> 0:13:29,766
modifier, this time aspect

427
00:13:29,766 --> 0:13:29,976
ratio.

428
00:13:33,066 --> 0:13:34,346
And the aspect ratio modifier

429
00:13:34,386 --> 0:13:36,126
lets me choose between .fill,

430
00:13:36,976 --> 0:13:38,536
which expands the image to take

431
00:13:38,536 --> 0:13:41,346
up its entire frame, or .fit,

432
00:13:42,616 --> 0:13:43,846
which makes sure the image fits

433
00:13:43,846 --> 0:13:44,506
within the frame.

434
00:13:47,066 --> 0:13:48,106
And previews let me really

435
00:13:48,106 --> 0:13:49,316
easily see and understand the

436
00:13:49,316 --> 0:13:50,076
difference between these

437
00:13:50,076 --> 0:13:50,576
different modes.

438
00:13:51,456 --> 0:13:53,276
For now, let's use Fit so we can

439
00:13:53,276 --> 0:13:54,056
see the full image.

440
00:13:55,526 --> 0:13:56,736
Now let's go back to our list

441
00:13:57,396 --> 0:13:58,706
and update our cell to push our

442
00:13:58,706 --> 0:13:59,376
new detail view.

443
00:14:02,056 --> 0:14:03,086
We'll create our Room Detail

444
00:14:03,086 --> 0:14:05,226
view and we'll just pass in the

445
00:14:05,226 --> 0:14:05,716
current room.

446
00:14:08,346 --> 0:14:10,076
Now I'll switch my preview back

447
00:14:10,076 --> 0:14:10,666
into live mode.

448
00:14:12,096 --> 0:14:13,786
And I can tap on my cell to see

449
00:14:13,786 --> 0:14:14,246
our image.

450
00:14:15,416 --> 0:14:16,326
But now that I'm previewing it

451
00:14:16,326 --> 0:14:18,076
here, I can see that I forgot to

452
00:14:18,076 --> 0:14:19,346
set the title in the navigation

453
00:14:19,346 --> 0:14:19,536
bar.

454
00:14:20,256 --> 0:14:21,276
So let's go back to our detail

455
00:14:21,276 --> 0:14:21,956
view and fix that.

456
00:14:25,286 --> 0:14:27,246
Just like before, I can use the

457
00:14:27,246 --> 0:14:29,336
navigation bar title to set our

458
00:14:29,336 --> 0:14:32,356
title and we'll pass in our

459
00:14:32,356 --> 0:14:33,706
room's name as the title.

460
00:14:34,446 --> 0:14:36,196
But in the preview that I have

461
00:14:36,196 --> 0:14:37,476
here, we're only seeing the view

462
00:14:37,476 --> 0:14:39,076
itself and I'd really like to be

463
00:14:39,076 --> 0:14:40,146
able to quickly verify my

464
00:14:40,146 --> 0:14:40,606
change.

465
00:14:41,646 --> 0:14:42,886
Well, since previews have all

466
00:14:42,886 --> 0:14:44,206
the power of SwiftUI's views

467
00:14:44,206 --> 0:14:45,666
available, we can do just that.

468
00:14:46,856 --> 0:14:49,156
I can set up my preview to be

469
00:14:49,156 --> 0:14:50,426
inside of a navigation view

470
00:14:51,226 --> 0:14:52,506
using the same code that I would

471
00:14:52,506 --> 0:14:53,036
anywhere else.

472
00:14:53,806 --> 0:14:55,706
And now my view's preview is

473
00:14:55,706 --> 0:14:58,446
inside of a navigation bar.

474
00:14:59,516 --> 0:15:03,776
[ Applause ]

475
00:14:59,516 --> 0:15:03,776
[ Applause ]

476
00:15:04,276 --> 0:15:05,376
And now that I'm seeing it here,

477
00:15:05,536 --> 0:15:06,996
this large title looks like a

478
00:15:06,996 --> 0:15:07,826
little bit too much for our

479
00:15:07,826 --> 0:15:08,366
detail view.

480
00:15:09,156 --> 0:15:10,346
So let's update our navigation

481
00:15:10,346 --> 0:15:12,346
bar title to set the display

482
00:15:12,346 --> 0:15:13,236
mode to be inline.

483
00:15:13,896 --> 0:15:15,576
Much better.

484
00:15:17,056 --> 0:15:18,216
Now when I'm picking a good

485
00:15:18,216 --> 0:15:19,446
conference room, there's one

486
00:15:19,446 --> 0:15:20,346
thing that's very important to

487
00:15:20,346 --> 0:15:20,476
me.

488
00:15:21,526 --> 0:15:22,376
The room has to have a good

489
00:15:22,376 --> 0:15:22,726
table.

490
00:15:23,406 --> 0:15:24,356
I just can't focus on what

491
00:15:24,356 --> 0:15:25,576
anyone is saying if the table

492
00:15:25,576 --> 0:15:26,596
isn't of the highest quality.

493
00:15:28,016 --> 0:15:29,086
[ Laughter ]

494
00:15:29,086 --> 0:15:30,156
And I can see that there's some

495
00:15:30,156 --> 0:15:31,946
kind of table in this room, but

496
00:15:31,946 --> 0:15:33,046
I really can't see its details

497
00:15:33,046 --> 0:15:33,426
well enough.

498
00:15:34,576 --> 0:15:35,896
But when the image was in Fill,

499
00:15:36,636 --> 0:15:38,246
I could see it nice and close.

500
00:15:38,856 --> 0:15:39,696
Look at that wood grain.

501
00:15:39,696 --> 0:15:43,196
So I'd like to be able to change

502
00:15:43,196 --> 0:15:44,906
back and forth between Fill to

503
00:15:44,906 --> 0:15:46,756
see the details of the room and

504
00:15:46,756 --> 0:15:48,426
Fit to see everything at once.

505
00:15:49,106 --> 0:15:51,276
But how do I actually change

506
00:15:51,276 --> 0:15:53,056
this aspect ratio's content mode

507
00:15:53,296 --> 0:15:54,176
from within my view?

508
00:15:55,146 --> 0:15:56,256
Well, to understand how to do

509
00:15:56,256 --> 0:15:57,436
this, we really need to know

510
00:15:57,436 --> 0:15:59,006
more about how views work in

511
00:15:59,006 --> 0:16:00,036
SwiftUI and why.

512
00:15:59,006 --> 0:16:00,036
SwiftUI and why.

513
00:16:00,696 --> 0:16:01,986
And so I'm going to invite Kyle

514
00:16:01,986 --> 0:16:03,456
to the stage to talk about that.

515
00:16:04,126 --> 0:16:04,376
Kyle?

516
00:16:05,236 --> 0:16:07,176
&gt;&gt; Well, hello, WWDC.

517
00:16:08,516 --> 0:16:12,576
[ Applause ]

518
00:16:13,076 --> 0:16:14,516
What does everyone think of

519
00:16:14,596 --> 0:16:14,976
SwiftUI so far?

520
00:16:15,101 --> 0:16:17,101
[ Applause ]

521
00:16:17,186 --> 0:16:18,426
Yeah, I'm pretty excited too.

522
00:16:18,426 --> 0:16:20,946
It's a little magical though.

523
00:16:21,076 --> 0:16:23,446
And so before we go any further,

524
00:16:23,446 --> 0:16:24,626
we're going to take a step back

525
00:16:25,106 --> 0:16:27,016
and talk about the way views

526
00:16:27,016 --> 0:16:28,476
work and why in SwiftUI.

527
00:16:29,996 --> 0:16:32,016
So we left off here implementing

528
00:16:32,066 --> 0:16:32,806
Room Detail view.

529
00:16:34,026 --> 0:16:36,396
In SwiftUI, a view is a struct

530
00:16:36,526 --> 0:16:37,636
that conforms to the view

531
00:16:37,636 --> 0:16:39,736
protocol, rather than a class

532
00:16:39,866 --> 0:16:41,186
that inherits from a base class

533
00:16:41,256 --> 0:16:41,986
like UI view.

534
00:16:43,386 --> 0:16:44,516
This means your view doesn't

535
00:16:44,516 --> 0:16:45,916
inherit any stored properties.

536
00:16:46,626 --> 0:16:48,276
It's allocated on the stack and

537
00:16:48,276 --> 0:16:49,096
it's passed by value.

538
00:16:50,556 --> 0:16:52,216
Room Detail just stores a room,

539
00:16:52,706 --> 0:16:54,416
so it's the size and weight of a

540
00:16:54,416 --> 0:16:54,726
room.

541
00:16:55,196 --> 0:16:56,846
No additional allocation or

542
00:16:56,846 --> 0:16:57,946
reference counting overhead.

543
00:17:00,046 --> 0:17:01,826
Behind the scenes, SwiftUI

544
00:17:01,866 --> 0:17:03,336
aggressively collapses your view

545
00:17:03,336 --> 0:17:05,286
hierarchy into an efficient data

546
00:17:05,286 --> 0:17:06,326
structure for rendering.

547
00:17:07,016 --> 0:17:08,636
Because of this, we make liberal

548
00:17:08,636 --> 0:17:11,136
use of small single-purpose

549
00:17:11,136 --> 0:17:13,046
views in SwiftUI, and you should

550
00:17:13,046 --> 0:17:13,506
too.

551
00:17:14,626 --> 0:17:15,965
What I want you to take away

552
00:17:15,965 --> 0:17:18,236
from the last couple slides is

553
00:17:18,536 --> 0:17:20,586
that views in SwiftUI are

554
00:17:20,586 --> 0:17:21,856
incredibly lightweight.

555
00:17:22,726 --> 0:17:24,586
As Jacob said, you should never

556
00:17:24,586 --> 0:17:26,445
hesitate to refactor your

557
00:17:26,445 --> 0:17:29,176
SwiftUI code because extracting

558
00:17:29,176 --> 0:17:30,676
a subview has virtually no

559
00:17:30,676 --> 0:17:31,486
runtime overhead.

560
00:17:34,046 --> 0:17:34,636
Yeah, you can clap for that,

561
00:17:34,636 --> 0:17:35,256
it's pretty great.

562
00:17:36,516 --> 0:17:38,696
[ Applause ]

563
00:17:39,196 --> 0:17:41,916
So a view in SwifthUI and a view

564
00:17:41,916 --> 0:17:43,286
in a traditional UI framework

565
00:17:43,436 --> 0:17:44,936
fulfill the same primary role.

566
00:17:45,556 --> 0:17:47,426
They define a piece of UI.

567
00:17:48,136 --> 0:17:51,076
The view protocol only has a

568
00:17:51,076 --> 0:17:52,766
single requirement: a body

569
00:17:52,766 --> 0:17:54,626
property, which is, itself, a

570
00:17:54,626 --> 0:17:54,886
view.

571
00:17:55,436 --> 0:17:57,896
You build bigger views in

572
00:17:57,896 --> 0:17:59,416
SwiftUI by composing together

573
00:17:59,416 --> 0:18:00,226
smaller views.

574
00:17:59,416 --> 0:18:00,226
smaller views.

575
00:18:00,616 --> 0:18:02,116
We built Room Detail by

576
00:18:02,116 --> 0:18:04,596
composing together image, a view

577
00:18:04,596 --> 0:18:05,616
of an image at its native

578
00:18:05,616 --> 0:18:08,736
resolution, resizable which

579
00:18:08,736 --> 0:18:10,916
opted it into stretch in either

580
00:18:10,946 --> 0:18:14,156
dimension; and aspect ratio, a

581
00:18:14,156 --> 0:18:16,106
view that proportionally scales

582
00:18:16,716 --> 0:18:17,826
its child.

583
00:18:17,976 --> 0:18:19,306
The rendering of any view you

584
00:18:19,306 --> 0:18:21,366
build is just the rendering of

585
00:18:21,996 --> 0:18:23,476
its body.

586
00:18:23,666 --> 0:18:25,586
So if you set a break point and

587
00:18:25,586 --> 0:18:27,426
the debugger stops there, it

588
00:18:28,516 --> 0:18:30,256
means the framework has decided

589
00:18:30,256 --> 0:18:31,736
it needs a fresh rendering of

590
00:18:31,736 --> 0:18:31,976
your view.

591
00:18:35,046 --> 0:18:35,366
Tada.

592
00:18:38,046 --> 0:18:38,226
All right.

593
00:18:38,426 --> 0:18:41,566
So the framework knows when to

594
00:18:41,566 --> 0:18:43,256
fetch a new rendering of a view

595
00:18:43,626 --> 0:18:45,386
because in addition to defining

596
00:18:45,386 --> 0:18:47,796
a piece of UI, in SwiftUI, a

597
00:18:47,796 --> 0:18:49,586
view defines its dependencies.

598
00:18:51,266 --> 0:18:53,016
Let's extend Room Detail to

599
00:18:53,016 --> 0:18:55,676
allow the user to toggle between

600
00:18:55,856 --> 0:18:58,756
fitting into and filling up the

601
00:18:58,756 --> 0:19:01,386
available space so Jacob can get

602
00:18:58,756 --> 0:19:01,386
available space so Jacob can get

603
00:19:01,386 --> 0:19:02,546
a good look at that wood grain.

604
00:19:03,146 --> 0:19:05,616
So, the first thing we'll need

605
00:19:06,056 --> 0:19:07,616
is a property, but it's a

606
00:19:07,616 --> 0:19:08,486
special property.

607
00:19:08,996 --> 0:19:10,526
It's a state property and it

608
00:19:10,526 --> 0:19:11,976
says whether or not the image is

609
00:19:11,976 --> 0:19:12,286
zoomed.

610
00:19:13,536 --> 0:19:15,356
When SwiftUI sees a view with a

611
00:19:15,356 --> 0:19:17,116
state variable, it allocates

612
00:19:17,116 --> 0:19:18,596
storage for that variable on the

613
00:19:18,596 --> 0:19:19,396
view's behalf.

614
00:19:19,856 --> 0:19:21,586
In this Memory diagram, the

615
00:19:21,586 --> 0:19:23,706
green is your app's memory, and

616
00:19:23,706 --> 0:19:25,456
purple is memory SwiftUI is

617
00:19:25,456 --> 0:19:25,936
managing.

618
00:19:26,186 --> 0:19:27,766
And so this value of the zoom

619
00:19:27,766 --> 0:19:29,716
variable, we got you covered.

620
00:19:33,086 --> 0:19:35,486
So if you decide to fill or fit

621
00:19:35,606 --> 0:19:38,576
based on that variable, then

622
00:19:38,756 --> 0:19:39,666
we've got a view that renders

623
00:19:39,666 --> 0:19:41,766
like this when it's zoomed and

624
00:19:42,626 --> 0:19:44,126
like this when it isn't.

625
00:19:45,396 --> 0:19:46,956
So, now, all we need is a

626
00:19:46,956 --> 0:19:51,186
tapAction to toggle back and

627
00:19:51,186 --> 0:19:52,436
forth between the two states.

628
00:19:52,866 --> 0:19:54,876
And then on tap, the image will

629
00:19:54,876 --> 0:19:58,806
zoom to Fill and shrink to Fit.

630
00:20:00,516 --> 0:20:09,126
[ Applause ]

631
00:20:09,626 --> 0:20:12,056
So what actually is happening

632
00:20:12,746 --> 0:20:15,036
when we tap here?

633
00:20:15,256 --> 0:20:16,506
Well, one of the special

634
00:20:16,506 --> 0:20:18,686
properties of state variables is

635
00:20:18,686 --> 0:20:20,246
that SwiftUI can observe when

636
00:20:20,246 --> 0:20:21,216
they're read and written.

637
00:20:21,756 --> 0:20:23,586
Because SwiftUI knows that Zoom

638
00:20:23,586 --> 0:20:26,456
here was read in body, it knows

639
00:20:26,456 --> 0:20:27,406
that the view's rendering

640
00:20:27,406 --> 0:20:30,976
depends on it, which means when

641
00:20:30,976 --> 0:20:32,646
the variable changes, the

642
00:20:32,646 --> 0:20:34,066
framework is going to ask for

643
00:20:34,066 --> 0:20:36,356
body again using the new state

644
00:20:36,356 --> 0:20:36,686
value.

645
00:20:36,686 --> 0:20:40,046
So it can refresh the rendering

646
00:20:40,046 --> 0:20:41,806
this time with a different

647
00:20:41,806 --> 0:20:42,426
content mode.

648
00:20:46,046 --> 0:20:47,716
So, traditional UI frameworks

649
00:20:47,756 --> 0:20:49,616
don't distinguish between state

650
00:20:49,616 --> 0:20:50,806
variables and plain old

651
00:20:50,806 --> 0:20:51,406
properties.

652
00:20:51,726 --> 0:20:53,616
But I've found this distinction

653
00:20:53,616 --> 0:20:55,116
to be incredibly clarifying.

654
00:20:55,796 --> 0:21:00,196
In SwiftUI, every possible state

655
00:20:55,796 --> 0:21:00,196
In SwiftUI, every possible state

656
00:21:00,196 --> 0:21:01,796
your UI might find itself in,

657
00:21:02,516 --> 0:21:04,926
the offset of a scroll view, the

658
00:21:04,926 --> 0:21:07,496
highlightedness of a button, the

659
00:21:07,496 --> 0:21:09,256
contents of a navigation stack.

660
00:21:10,126 --> 0:21:11,056
It's derived from an

661
00:21:11,056 --> 0:21:12,526
authoritative piece of data,

662
00:21:13,066 --> 0:21:15,216
often called a Source of Truth.

663
00:21:16,256 --> 0:21:17,596
Collectively, your state

664
00:21:17,596 --> 0:21:19,056
variables and your model

665
00:21:19,276 --> 0:21:20,996
constitute your Source of Truth

666
00:21:21,266 --> 0:21:23,256
for your entire application.

667
00:21:24,316 --> 0:21:25,436
Earlier, I mentioned that this

668
00:21:25,436 --> 0:21:27,006
call to aspect ratio makes a

669
00:21:27,006 --> 0:21:27,326
view.

670
00:21:28,736 --> 0:21:29,926
Its definition looks something

671
00:21:29,926 --> 0:21:32,956
like this, where content mode is

672
00:21:32,956 --> 0:21:34,726
a plain old Swift property.

673
00:21:35,296 --> 0:21:38,136
You can neatly classify every

674
00:21:38,136 --> 0:21:40,116
property as either a source of

675
00:21:40,116 --> 0:21:42,236
truth or a derived value.

676
00:21:43,436 --> 0:21:45,236
The Zoom state variable is a

677
00:21:45,236 --> 0:21:46,786
Source of Truth.

678
00:21:47,416 --> 0:21:49,526
The Content Mode property is

679
00:21:49,526 --> 0:21:50,826
derived from it.

680
00:21:51,696 --> 0:21:54,276
Recall SwiftUI can observe when

681
00:21:54,276 --> 0:21:55,776
state variables are read and

682
00:21:55,776 --> 0:21:56,176
written.

683
00:21:56,466 --> 0:21:58,266
So when one changes, it knows

684
00:21:58,266 --> 0:21:59,586
which renderings to refresh.

685
00:22:00,826 --> 0:22:01,936
The framework refreshes the

686
00:22:01,936 --> 0:22:03,676
rendering by asking for a new

687
00:22:03,676 --> 0:22:06,696
body, making a new aspect ratio

688
00:22:06,696 --> 0:22:08,656
view from scratch, thereby

689
00:22:08,756 --> 0:22:10,376
overriding the Content Mode and

690
00:22:10,376 --> 0:22:11,526
any other stored properties.

691
00:22:12,196 --> 0:22:14,846
This is the mechanism by which

692
00:22:14,976 --> 0:22:17,126
all derived values in SwiftUI

693
00:22:17,256 --> 0:22:19,856
are kept up-to-date.

694
00:22:19,976 --> 0:22:22,266
So we've seen how we can declare

695
00:22:22,566 --> 0:22:24,536
a Source of Truth using a state

696
00:22:24,536 --> 0:22:27,346
variable, and that every plain

697
00:22:27,346 --> 0:22:29,346
old property is a derived value.

698
00:22:30,376 --> 0:22:31,066
We're not going to see an

699
00:22:31,066 --> 0:22:33,356
example in this talk, but Swift

700
00:22:33,356 --> 0:22:34,756
gives you a tool called Binding,

701
00:22:35,766 --> 0:22:37,036
which is great for passing

702
00:22:37,036 --> 0:22:38,546
read/write derived values.

703
00:22:39,236 --> 0:22:41,166
And technically any constant can

704
00:22:41,166 --> 0:22:42,506
serve as a perfectly good

705
00:22:42,506 --> 0:22:44,446
read-only Source of Truth as we

706
00:22:44,446 --> 0:22:45,986
saw with the test data driving

707
00:22:45,986 --> 0:22:46,656
our previews.

708
00:22:47,296 --> 0:22:48,596
Now there's one more I want to

709
00:22:48,596 --> 0:22:49,896
call out, and I mentioned a

710
00:22:49,896 --> 0:22:51,726
second ago that collectively

711
00:22:51,816 --> 0:22:53,216
your state variables and your

712
00:22:53,216 --> 0:22:54,746
model constitute the Source of

713
00:22:54,746 --> 0:22:56,606
Truth for your entire app.

714
00:22:56,606 --> 0:22:57,646
And so we have this bindable

715
00:22:57,646 --> 0:22:59,656
object protocol Jacob used

716
00:22:59,656 --> 0:23:01,956
earlier to teach SwiftUI about

717
00:22:59,656 --> 0:23:01,956
earlier to teach SwiftUI about

718
00:23:02,036 --> 0:23:03,596
how to observe changes from our

719
00:23:03,596 --> 0:23:03,966
model.

720
00:23:06,306 --> 0:23:07,816
This might be a lot really

721
00:23:07,816 --> 0:23:08,836
quickly, and so we have an

722
00:23:08,836 --> 0:23:11,676
entire talk later this week

723
00:23:11,676 --> 0:23:13,336
dedicated to developing your

724
00:23:13,336 --> 0:23:14,996
intuition about these different

725
00:23:14,996 --> 0:23:15,706
flow primitives.

726
00:23:18,056 --> 0:23:19,896
All right, let's step back and

727
00:23:19,896 --> 0:23:20,466
take stock.

728
00:23:22,286 --> 0:23:24,286
This is really different from

729
00:23:24,376 --> 0:23:25,806
what you do in a traditional

730
00:23:25,806 --> 0:23:27,306
life framework where the views

731
00:23:27,306 --> 0:23:28,886
themselves persist and you try

732
00:23:28,886 --> 0:23:30,096
your hardest to keep them all up

733
00:23:30,096 --> 0:23:31,006
to date.

734
00:23:32,396 --> 0:23:34,396
You may not think about it this

735
00:23:34,396 --> 0:23:35,676
way when you use a traditional

736
00:23:35,676 --> 0:23:38,156
UI framework, but every time a

737
00:23:38,156 --> 0:23:40,216
view reads a piece of data, it's

738
00:23:40,216 --> 0:23:41,986
creating an implicit dependency.

739
00:23:42,756 --> 0:23:44,106
It's a dependency because when

740
00:23:44,106 --> 0:23:45,976
that data changes, the view

741
00:23:45,976 --> 0:23:47,936
needs to update to reflect the

742
00:23:47,936 --> 0:23:48,566
new value.

743
00:23:49,036 --> 0:23:51,466
And when it fails to, that's a

744
00:23:51,466 --> 0:23:51,766
bug.

745
00:23:53,156 --> 0:23:55,006
SwiftUI automatically manages

746
00:23:55,006 --> 0:23:57,396
dependencies on your behalf by

747
00:23:57,396 --> 0:23:58,896
recomputing the appropriate

748
00:23:58,896 --> 0:24:00,526
derived values so this never

749
00:23:58,896 --> 0:24:00,526
derived values so this never

750
00:24:00,526 --> 0:24:00,976
happens again.

751
00:24:01,516 --> 0:24:07,936
[ Applause ]

752
00:24:08,436 --> 0:24:10,266
Of course, we don't just manage

753
00:24:10,336 --> 0:24:13,086
a single dependency at a time in

754
00:24:13,086 --> 0:24:14,146
our apps.

755
00:24:14,146 --> 0:24:15,636
Our apps are big.

756
00:24:15,886 --> 0:24:17,096
They're complicated.

757
00:24:18,196 --> 0:24:19,326
When it comes to how much you

758
00:24:19,326 --> 0:24:20,866
have to hold in your head and

759
00:24:20,866 --> 0:24:22,156
how easy it is to make a

760
00:24:22,156 --> 0:24:24,246
mistake, the way we manually

761
00:24:24,246 --> 0:24:26,206
manage dependencies today, it's

762
00:24:26,206 --> 0:24:26,736
really hard.

763
00:24:27,686 --> 0:24:29,706
Despite my best efforts, every

764
00:24:29,706 --> 0:24:31,866
update to every app I've ever

765
00:24:31,866 --> 0:24:33,276
shipped has had UI bugs.

766
00:24:34,096 --> 0:24:36,216
Every one of these lines is a

767
00:24:36,216 --> 0:24:36,866
dependency.

768
00:24:37,436 --> 0:24:39,516
And it's just the start.

769
00:24:42,086 --> 0:24:43,446
The thing I find the hardest

770
00:24:43,576 --> 0:24:45,316
about managing the complexity of

771
00:24:45,316 --> 0:24:47,666
my views is dealing with all the

772
00:24:47,666 --> 0:24:48,916
possible orders the different

773
00:24:48,916 --> 0:24:50,206
callbacks can get called in.

774
00:24:50,596 --> 0:24:53,526
So here's an old version of the

775
00:24:53,526 --> 0:24:54,906
room detail view that was

776
00:24:54,906 --> 0:24:56,536
implemented in UIKit.

777
00:24:57,096 --> 0:25:00,016
It had the same features as the

778
00:24:57,096 --> 0:25:00,016
It had the same features as the

779
00:25:00,016 --> 0:25:01,596
one we've seen so far has, but

780
00:25:01,596 --> 0:25:03,006
it had one more.

781
00:25:04,536 --> 0:25:06,486
Every once in a while, when we

782
00:25:06,486 --> 0:25:08,056
zoom in on a conference room

783
00:25:08,056 --> 0:25:09,996
image, it was too blurry to make

784
00:25:09,996 --> 0:25:11,246
out the wood grain on the table.

785
00:25:12,426 --> 0:25:14,476
And so we decided to add a

786
00:25:14,476 --> 0:25:16,326
special feature using neural

787
00:25:16,326 --> 0:25:18,316
networks and machine learning so

788
00:25:18,316 --> 0:25:20,906
we could tap to enhance the

789
00:25:20,906 --> 0:25:23,946
image on a background thread and

790
00:25:23,946 --> 0:25:26,586
thus choose the right conference

791
00:25:26,586 --> 0:25:26,826
room.

792
00:25:30,076 --> 0:25:30,496
All right, yeah.

793
00:25:31,346 --> 0:25:32,236
Over-engineering, right?

794
00:25:33,606 --> 0:25:34,786
So there's only one problem with

795
00:25:34,786 --> 0:25:36,886
this feature and that's it had a

796
00:25:36,886 --> 0:25:37,146
bug.

797
00:25:37,526 --> 0:25:38,876
We got a report of a stray

798
00:25:38,876 --> 0:25:40,356
activity indicator that never

799
00:25:40,356 --> 0:25:41,066
stops spinning.

800
00:25:42,276 --> 0:25:43,266
How'd this happen?

801
00:25:44,076 --> 0:25:45,926
Well, it turns out if the events

802
00:25:45,956 --> 0:25:48,456
fired in a specific order, we

803
00:25:49,156 --> 0:25:51,956
forgot to clean up that activity

804
00:25:51,956 --> 0:25:52,446
indicator.

805
00:25:52,976 --> 0:25:54,806
In this case, if the user zoomed

806
00:25:54,806 --> 0:25:56,326
out and tapped the enhance

807
00:25:56,326 --> 0:25:59,056
button as it was animating away,

808
00:25:59,336 --> 0:26:00,776
the activity indicator would get

809
00:25:59,336 --> 0:26:00,776
the activity indicator would get

810
00:26:00,776 --> 0:26:01,066
stuck.

811
00:26:02,046 --> 0:26:03,716
These kinds of mistakes are easy

812
00:26:03,716 --> 0:26:05,066
to make when you mutate your

813
00:26:05,066 --> 0:26:06,976
subviews directly from event

814
00:26:06,976 --> 0:26:10,146
handler callbacks rather than

815
00:26:10,246 --> 0:26:12,016
updating your Source of Truth

816
00:26:12,306 --> 0:26:15,866
and deriving your UI from that.

817
00:26:17,636 --> 0:26:19,606
Now we make this mistake because

818
00:26:19,606 --> 0:26:20,676
when we're coding this code,

819
00:26:20,726 --> 0:26:22,076
it's really easy to only think

820
00:26:22,076 --> 0:26:22,806
about the happy path.

821
00:26:23,616 --> 0:26:25,106
Those are the ones that come

822
00:26:25,596 --> 0:26:26,906
easily to mind.

823
00:26:26,906 --> 0:26:28,106
And it's really easy to overlook

824
00:26:28,106 --> 0:26:29,436
the unhappy ones that don't.

825
00:26:30,056 --> 0:26:31,466
The problem is that as the

826
00:26:31,466 --> 0:26:33,966
number of possible events our

827
00:26:33,966 --> 0:26:37,086
view can respond to grows, the

828
00:26:37,086 --> 0:26:38,416
number of unhappy paths

829
00:26:38,536 --> 0:26:39,426
explodes.

830
00:26:40,866 --> 0:26:42,456
Assume you get all four of these

831
00:26:42,456 --> 0:26:44,346
events, how many different

832
00:26:44,346 --> 0:26:45,646
possible orders are there that

833
00:26:45,646 --> 0:26:46,216
they could come in?

834
00:26:46,746 --> 0:26:49,726
Well, there's actually 24

835
00:26:49,726 --> 0:26:51,746
different orders for any four

836
00:26:51,746 --> 0:26:52,246
events.

837
00:26:52,806 --> 0:26:54,406
And in practice, it's even worse

838
00:26:54,456 --> 0:26:56,556
than that because every event

839
00:26:56,556 --> 0:26:57,846
can come in more than one time.

840
00:26:58,356 --> 0:26:59,836
Say for example a user is

841
00:26:59,836 --> 0:27:01,156
mashing the enhance button.

842
00:26:59,836 --> 0:27:01,156
mashing the enhance button.

843
00:27:02,366 --> 0:27:03,526
The challenge of managing this

844
00:27:03,526 --> 0:27:05,376
should be familiar to anyone

845
00:27:05,376 --> 0:27:06,536
who's ever implemented an

846
00:27:06,536 --> 0:27:08,156
interruptable animation where

847
00:27:08,156 --> 0:27:09,476
the completion handler can come

848
00:27:09,476 --> 0:27:11,006
in at a really unexpected time.

849
00:27:12,296 --> 0:27:13,856
If I could tell myself from five

850
00:27:13,856 --> 0:27:16,906
years ago anything about my job,

851
00:27:16,906 --> 0:27:18,666
it would be that UI programming

852
00:27:19,116 --> 0:27:20,506
is really hard.

853
00:27:20,946 --> 0:27:22,976
Like log-free concurrency hard.

854
00:27:25,046 --> 0:27:26,296
How many of you have written

855
00:27:26,296 --> 0:27:27,266
multi-threaded code?

856
00:27:28,436 --> 0:27:30,226
Probably all 2,000 of you, yeah.

857
00:27:30,826 --> 0:27:32,646
So no one pretends that's easy.

858
00:27:33,216 --> 0:27:34,606
It's taken me months to shake

859
00:27:34,606 --> 0:27:36,776
out all the bugs in some of my

860
00:27:36,776 --> 0:27:38,026
multi-threaded code, and even

861
00:27:38,026 --> 0:27:39,796
then I wasn't 100% confident in

862
00:27:39,796 --> 0:27:40,546
its correctness.

863
00:27:41,086 --> 0:27:44,096
A lot of UI code is actually

864
00:27:44,096 --> 0:27:46,706
just like that, only instead of

865
00:27:46,706 --> 0:27:48,616
a crash, your view ends up in

866
00:27:48,616 --> 0:27:49,906
the wrong place, or it's

867
00:27:49,906 --> 0:27:50,246
missing.

868
00:27:51,296 --> 0:27:52,916
This is because race conditions

869
00:27:52,916 --> 0:27:55,056
and UI inconsistencies share the

870
00:27:55,056 --> 0:27:56,426
same underlying source of

871
00:27:56,466 --> 0:27:57,096
complexity.

872
00:27:57,626 --> 0:27:59,676
These easy-to-overlook

873
00:27:59,846 --> 0:28:00,446
orderings.

874
00:27:59,846 --> 0:28:00,446
orderings.

875
00:28:00,506 --> 0:28:03,676
Many of the views we all work on

876
00:28:04,176 --> 0:28:07,396
have way more than four events.

877
00:28:07,956 --> 0:28:09,976
You know, like model

878
00:28:09,976 --> 0:28:12,016
notifications, delegate methods,

879
00:28:12,106 --> 0:28:13,876
target actions, completion

880
00:28:13,876 --> 0:28:14,256
handlers.

881
00:28:14,416 --> 0:28:15,376
They're all events.

882
00:28:16,246 --> 0:28:18,396
A view with 12 would roughly

883
00:28:18,426 --> 0:28:20,546
equate to 12 factorial possible

884
00:28:20,546 --> 0:28:20,976
orderings.

885
00:28:21,596 --> 0:28:22,976
That's almost half a billion.

886
00:28:24,336 --> 0:28:26,786
We've all worked on views with

887
00:28:26,836 --> 0:28:27,876
12 event handlers.

888
00:28:29,136 --> 0:28:30,956
So you can only fit so much in

889
00:28:30,956 --> 0:28:32,696
your head at a time.

890
00:28:35,056 --> 0:28:37,896
Yeah. This dotted line is one of

891
00:28:37,896 --> 0:28:40,406
the views in your app.

892
00:28:40,686 --> 0:28:41,966
What do people think the

893
00:28:41,966 --> 0:28:42,756
difference between those two

894
00:28:42,756 --> 0:28:43,396
dots is?

895
00:28:45,486 --> 0:28:48,886
Anyone? Those are the bugs, yes.

896
00:28:49,876 --> 0:28:51,946
So as we add features, the

897
00:28:51,946 --> 0:28:53,696
number of possible orderings we

898
00:28:53,696 --> 0:28:56,436
have to think of increases

899
00:28:56,546 --> 0:28:57,386
exponentially.

900
00:28:57,386 --> 0:28:58,686
And the chance we overlook one

901
00:29:00,176 --> 0:29:01,056
-- it's the same.

902
00:29:01,316 --> 0:29:01,936
It's inevitable.

903
00:29:04,246 --> 0:29:06,246
So I imagine many of you

904
00:29:06,246 --> 0:29:08,416
instinctively have reached for a

905
00:29:08,416 --> 0:29:10,346
way to handle this complexity in

906
00:29:10,346 --> 0:29:11,956
UIKit or AppKit when you program

907
00:29:11,956 --> 0:29:14,486
today, which is to collect all

908
00:29:14,486 --> 0:29:15,766
your view update code in a

909
00:29:15,766 --> 0:29:16,516
single method.

910
00:29:17,226 --> 0:29:18,246
And then from these event

911
00:29:18,246 --> 0:29:20,006
handler callbacks, you call that

912
00:29:20,006 --> 0:29:20,576
one method.

913
00:29:21,366 --> 0:29:22,956
It's a really great way for the

914
00:29:22,956 --> 0:29:24,396
complexity to not explode on

915
00:29:24,396 --> 0:29:24,463
you.

916
00:29:25,336 --> 0:29:26,846
Well, SwiftUI was heavily

917
00:29:26,846 --> 0:29:28,586
inspired by this best practice.

918
00:29:29,806 --> 0:29:31,486
When you are trying to implement

919
00:29:31,486 --> 0:29:33,636
a view this way in UI today,

920
00:29:33,846 --> 0:29:34,956
there's all these tricky cases

921
00:29:34,956 --> 0:29:36,136
you need to think about like

922
00:29:36,216 --> 0:29:37,456
adding or removing a subview

923
00:29:37,456 --> 0:29:38,726
from the view hierarchy, or

924
00:29:38,726 --> 0:29:39,696
pushing and popping off the

925
00:29:39,696 --> 0:29:40,506
navigation stack.

926
00:29:40,736 --> 0:29:42,126
Or performing updates to a table

927
00:29:42,126 --> 0:29:42,336
view.

928
00:29:42,866 --> 0:29:44,246
I was never able to figure out

929
00:29:44,366 --> 0:29:45,886
all of those cases all on my

930
00:29:45,886 --> 0:29:46,186
own.

931
00:29:47,236 --> 0:29:49,886
Well, we've spent all the time

932
00:29:49,886 --> 0:29:51,186
and done all the work and we've

933
00:29:51,186 --> 0:29:53,356
codified this best practice into

934
00:29:53,356 --> 0:29:54,296
SwiftUI on your behalf.

935
00:29:55,186 --> 0:29:56,716
The view protocol only has a

936
00:29:56,876 --> 0:29:58,506
single requirement: body.

937
00:29:58,796 --> 0:30:00,816
A single entry point that the

938
00:29:58,796 --> 0:30:00,816
A single entry point that the

939
00:30:00,816 --> 0:30:01,696
framework calls.

940
00:30:02,226 --> 0:30:04,826
That means there's only one

941
00:30:04,886 --> 0:30:06,716
possible order it can ever get

942
00:30:06,716 --> 0:30:07,906
called in.

943
00:30:08,516 --> 0:30:17,026
[ Applause ]

944
00:30:17,526 --> 0:30:19,066
Because of this pattern of

945
00:30:19,106 --> 0:30:20,656
simply fetching new views for

946
00:30:20,656 --> 0:30:21,586
the parts of the UI that

947
00:30:21,616 --> 0:30:25,156
changed, SwiftUI scales with

948
00:30:25,156 --> 0:30:26,956
your brain, virtually

949
00:30:26,956 --> 0:30:28,986
eliminating UI inconsistencies.

950
00:30:30,546 --> 0:30:30,976
All right.

951
00:30:31,016 --> 0:30:32,126
[ Applause ]

952
00:30:32,126 --> 0:30:33,306
Let's get back to the demo and

953
00:30:33,306 --> 0:30:34,406
finish the Room Detail view.

954
00:30:35,006 --> 0:30:35,346
Jacob?

955
00:30:42,066 --> 0:30:42,976
&gt;&gt; Okay, let's finish this app.

956
00:30:44,346 --> 0:30:45,636
Now, we know how to set up our

957
00:30:45,636 --> 0:30:46,646
view to zoom in.

958
00:30:47,886 --> 0:30:48,956
We'll add a state property.

959
00:30:52,166 --> 0:30:53,426
And we'll call it Zoomed and

960
00:30:53,876 --> 0:30:54,956
we'll default it to false.

961
00:30:56,456 --> 0:30:59,136
Then in our aspect ratio we'll

962
00:30:59,136 --> 0:31:00,836
use the Zoomed property to

963
00:30:59,136 --> 0:31:00,836
use the Zoomed property to

964
00:31:00,836 --> 0:31:02,146
change between Fill when we're

965
00:31:02,146 --> 0:31:03,756
zoomed and Fit otherwise.

966
00:31:05,206 --> 0:31:06,526
And finally, we'll add our

967
00:31:06,526 --> 0:31:08,936
tapAction to toggle that Zoomed

968
00:31:08,936 --> 0:31:09,296
property.

969
00:31:13,276 --> 0:31:14,406
Now let's try it out in Live

970
00:31:14,406 --> 0:31:14,596
Mode.

971
00:31:19,316 --> 0:31:20,726
Great, we can switch between

972
00:31:20,726 --> 0:31:21,556
these two different modes.

973
00:31:22,966 --> 0:31:24,096
But there's something missing

974
00:31:24,096 --> 0:31:24,346
here.

975
00:31:24,846 --> 0:31:25,876
Does anybody see it?

976
00:31:28,046 --> 0:31:28,676
That's right, it needs an

977
00:31:28,676 --> 0:31:29,186
animation.

978
00:31:29,186 --> 0:31:32,216
And with SwiftUI, animation's

979
00:31:32,216 --> 0:31:33,236
really easy to add.

980
00:31:34,486 --> 0:31:36,046
I can just wrap my change in a

981
00:31:36,046 --> 0:31:36,976
call to WithAnimation.

982
00:31:42,066 --> 0:31:43,826
And now my change is animated.

983
00:31:44,516 --> 0:31:50,546
[ Applause ]

984
00:31:51,046 --> 0:31:52,746
And not only that, the animation

985
00:31:52,746 --> 0:31:53,706
is fully interactive and

986
00:31:53,706 --> 0:31:55,186
interruptible so I can always

987
00:31:55,186 --> 0:31:56,086
change between the different

988
00:31:56,086 --> 0:31:57,966
states and it always ends up in

989
00:31:57,966 --> 0:31:59,306
the right place.

990
00:32:00,101 --> 0:32:02,101
[ Applause ]

991
00:32:02,186 --> 0:32:02,556
Yeah, it's great.

992
00:32:03,516 --> 0:32:05,646
[ Applause ]

993
00:32:06,146 --> 0:32:07,526
Now I would add the Enhance

994
00:32:07,526 --> 0:32:09,346
button next, but it turns out

995
00:32:09,476 --> 0:32:10,426
that the way Kyle trained the

996
00:32:10,426 --> 0:32:12,156
model, it only ever worked on

997
00:32:12,156 --> 0:32:13,226
that one image that he showed.

998
00:32:13,676 --> 0:32:16,096
So I'm going to add something

999
00:32:16,096 --> 0:32:16,556
more useful.

1000
00:32:17,926 --> 0:32:19,166
One of our coworkers is in

1001
00:32:19,166 --> 0:32:20,736
London so we often want to know

1002
00:32:20,736 --> 0:32:21,576
which rooms have video

1003
00:32:21,576 --> 0:32:22,066
conferencing.

1004
00:32:23,196 --> 0:32:24,416
So let's show an icon for that

1005
00:32:24,476 --> 0:32:25,726
on top of our detail view.

1006
00:32:27,186 --> 0:32:29,546
I can use a Zstack to show views

1007
00:32:29,606 --> 0:32:30,556
stacked on top of each other.

1008
00:32:34,496 --> 0:32:35,856
So I'll put our existing image

1009
00:32:35,856 --> 0:32:38,486
inside of that Zstack and then

1010
00:32:38,616 --> 0:32:40,616
I'll add another image to show

1011
00:32:40,616 --> 0:32:42,086
an icon for whether the room has

1012
00:32:42,086 --> 0:32:43,366
video or not.

1013
00:32:44,236 --> 0:32:46,426
I'll just use a symbol image and

1014
00:32:47,536 --> 0:32:49,416
we'll use Video.fill.

1015
00:32:51,496 --> 0:32:52,816
Okay, we have our icon here, but

1016
00:32:52,886 --> 0:32:54,016
it's a little bit small.

1017
00:32:55,166 --> 0:32:56,436
But symbol images automatically

1018
00:32:56,436 --> 0:32:57,826
use the current font to size

1019
00:32:57,826 --> 0:32:59,306
themselves, so I can easily

1020
00:32:59,306 --> 0:33:01,106
change to a larger font with a

1021
00:32:59,306 --> 0:33:01,106
change to a larger font with a

1022
00:33:01,106 --> 0:33:01,576
modifier.

1023
00:33:02,196 --> 0:33:04,316
We'll just drag this into our

1024
00:33:04,316 --> 0:33:06,246
code and apply it to the image.

1025
00:33:07,096 --> 0:33:07,886
And Title sounds good.

1026
00:33:07,886 --> 0:33:10,316
Now we've got our larger image.

1027
00:33:11,366 --> 0:33:12,606
Next, I want this image to be in

1028
00:33:12,606 --> 0:33:13,186
the top-left.

1029
00:33:13,986 --> 0:33:15,036
So let's set our Zstack's

1030
00:33:15,036 --> 0:33:18,386
alignment to be topLeading.

1031
00:33:19,076 --> 0:33:21,916
Okay. Next let's add some

1032
00:33:21,916 --> 0:33:23,416
padding so that this is not up

1033
00:33:23,416 --> 0:33:24,116
against the edge here.

1034
00:33:25,166 --> 0:33:26,676
Again, we can use a modifier to

1035
00:33:26,676 --> 0:33:26,966
do this.

1036
00:33:28,376 --> 0:33:29,596
And we'll just drag it in onto

1037
00:33:29,596 --> 0:33:30,316
our system image.

1038
00:33:30,846 --> 0:33:33,946
And All Edges seems like a good

1039
00:33:33,946 --> 0:33:34,336
choice here.

1040
00:33:35,606 --> 0:33:37,326
Okay, this is close, but I

1041
00:33:37,326 --> 0:33:38,506
really want to have this icon

1042
00:33:38,946 --> 0:33:40,166
all the way at the top of our

1043
00:33:40,166 --> 0:33:40,586
view area.

1044
00:33:40,586 --> 0:33:43,116
And we can get our video icon

1045
00:33:43,116 --> 0:33:44,736
there by putting our room image

1046
00:33:44,866 --> 0:33:46,156
inside of a flexible frame.

1047
00:33:47,096 --> 0:33:48,546
The frame will stretch to fill

1048
00:33:48,546 --> 0:33:49,096
the whole screen.

1049
00:33:49,096 --> 0:33:51,306
And when it has extra space, it

1050
00:33:51,306 --> 0:33:53,516
will center its contents inside

1051
00:33:53,516 --> 0:33:54,686
of it.

1052
00:33:54,686 --> 0:33:56,026
This means that our room image

1053
00:33:56,026 --> 0:33:56,836
will still be at the right

1054
00:33:56,836 --> 0:33:57,066
place.

1055
00:33:58,166 --> 0:34:00,016
So I'll add our flexible frame

1056
00:33:58,166 --> 0:34:00,016
So I'll add our flexible frame

1057
00:34:00,076 --> 0:34:00,646
to our image.

1058
00:34:03,066 --> 0:34:04,796
And we'll use a minimum width of

1059
00:34:04,796 --> 0:34:06,736
zero and a max width of

1060
00:34:06,736 --> 0:34:07,176
infinity.

1061
00:34:07,776 --> 0:34:10,096
And we'll do the same thing for

1062
00:34:10,096 --> 0:34:10,396
our height.

1063
00:34:16,186 --> 0:34:16,545
There we go.

1064
00:34:17,856 --> 0:34:18,856
And if you're curious to learn

1065
00:34:18,856 --> 0:34:20,226
more about how layout works in

1066
00:34:20,226 --> 0:34:21,786
SwiftUI, check out the Building

1067
00:34:21,826 --> 0:34:23,356
Custom Views in SwiftUI session.

1068
00:34:23,985 --> 0:34:26,136
Now we have our icon.

1069
00:34:26,766 --> 0:34:27,906
But we only want it to appear

1070
00:34:28,036 --> 0:34:29,056
when a room has video

1071
00:34:29,056 --> 0:34:29,636
conferencing.

1072
00:34:30,116 --> 0:34:30,815
So how do we do that?

1073
00:34:32,076 --> 0:34:33,156
Well, the declarative syntax

1074
00:34:33,156 --> 0:34:34,356
that we're using makes that

1075
00:34:34,356 --> 0:34:34,886
really easy.

1076
00:34:35,536 --> 0:34:36,926
We can just use an if.

1077
00:34:37,576 --> 0:34:39,065
So I'll add an if and we'll

1078
00:34:39,065 --> 0:34:40,835
check whether our room has

1079
00:34:40,835 --> 0:34:41,156
video.

1080
00:34:42,016 --> 0:34:43,476
And we'll only show our image

1081
00:34:43,545 --> 0:34:46,416
when that's true.

1082
00:34:46,626 --> 0:34:48,136
Now we can check if this is

1083
00:34:48,136 --> 0:34:49,505
working by changing our preview

1084
00:34:49,505 --> 0:34:51,356
data to a room that doesn't have

1085
00:34:51,545 --> 0:34:53,056
video, which is nice.

1086
00:34:54,076 --> 0:34:55,406
But even better, we can actually

1087
00:34:55,406 --> 0:34:56,516
set up our previews to show

1088
00:34:56,516 --> 0:34:58,176
multiple versions of our views

1089
00:34:58,176 --> 0:34:58,626
at once.

1090
00:34:59,966 --> 0:35:01,556
To do that, I'm just going to

1091
00:34:59,966 --> 0:35:01,556
To do that, I'm just going to

1092
00:35:01,556 --> 0:35:04,106
embed this view inside of a

1093
00:35:04,876 --> 0:35:05,006
group.

1094
00:35:05,126 --> 0:35:06,566
And now I can have multiple

1095
00:35:06,566 --> 0:35:07,736
views here.

1096
00:35:08,856 --> 0:35:10,706
So let's create a second version

1097
00:35:11,946 --> 0:35:12,846
using different test data.

1098
00:35:13,936 --> 0:35:15,266
Now we have one version of our

1099
00:35:15,266 --> 0:35:16,976
view with video conferencing,

1100
00:35:17,636 --> 0:35:18,606
and another version without.

1101
00:35:19,516 --> 0:35:26,816
[ Applause ]

1102
00:35:27,316 --> 0:35:29,266
Now let's go back to live mode.

1103
00:35:30,836 --> 0:35:32,386
Now when I'm in the Zoom state,

1104
00:35:32,666 --> 0:35:34,086
having that icon on top of my

1105
00:35:34,086 --> 0:35:35,366
image is a little distracting.

1106
00:35:36,196 --> 0:35:37,406
So let's update it to also

1107
00:35:37,406 --> 0:35:38,466
disappear when we're zoomed.

1108
00:35:39,286 --> 0:35:40,656
We can do that just by updating

1109
00:35:40,656 --> 0:35:40,976
our condition.

1110
00:35:47,446 --> 0:35:49,696
Now the icon automatically shows

1111
00:35:49,696 --> 0:35:51,156
and hides as we zoom in and out.

1112
00:35:51,646 --> 0:35:52,976
But even better, it animates,

1113
00:35:53,316 --> 0:35:54,006
fading in and out.

1114
00:35:55,326 --> 0:35:56,676
And we can also customize that

1115
00:35:56,676 --> 0:35:58,556
animation behavior by setting it

1116
00:35:58,556 --> 0:35:59,536
to a different transition.

1117
00:36:00,186 --> 0:36:04,796
So let's try .move and we'll use

1118
00:36:04,796 --> 0:36:06,066
the leading edge.

1119
00:36:07,526 --> 0:36:09,306
Now our icon slides out and

1120
00:36:09,306 --> 0:36:09,976
slides back in.

1121
00:36:10,516 --> 0:36:17,036
[ Applause ]

1122
00:36:17,536 --> 0:36:18,416
And let me also make this a

1123
00:36:18,416 --> 0:36:20,626
longer animation by specifying a

1124
00:36:20,626 --> 0:36:22,696
custom animation with a duration

1125
00:36:22,816 --> 0:36:23,426
of two seconds.

1126
00:36:24,106 --> 0:36:27,006
Now we can see our animation in

1127
00:36:27,006 --> 0:36:29,706
more detail and we can also see

1128
00:36:29,706 --> 0:36:31,016
what happens if we tap on it

1129
00:36:31,046 --> 0:36:31,946
while the animation is still

1130
00:36:31,946 --> 0:36:32,266
going.

1131
00:36:32,986 --> 0:36:34,036
It turns around and comes right

1132
00:36:35,256 --> 0:36:35,556
back.

1133
00:36:35,556 --> 0:36:37,226
Again, our animation is always

1134
00:36:37,226 --> 0:36:39,156
interactive and we can always

1135
00:36:39,206 --> 0:36:40,376
tap on it and it will end up in

1136
00:36:40,376 --> 0:36:40,886
the right state.

1137
00:36:41,546 --> 0:36:43,466
So that's our detail view.

1138
00:36:44,256 --> 0:36:45,186
Now let's review what we just

1139
00:36:45,216 --> 0:36:45,466
built.

1140
00:36:46,306 --> 0:36:48,616
Our detail view is configured

1141
00:36:48,616 --> 0:36:50,806
with a room to show and remember

1142
00:36:50,806 --> 0:36:51,926
that that's a derived value

1143
00:36:52,106 --> 0:36:53,186
passed in by the parent of the

1144
00:36:53,186 --> 0:36:53,396
view.

1145
00:36:53,396 --> 0:36:55,726
And we also have our state

1146
00:36:55,726 --> 0:36:57,706
property which controls whether

1147
00:36:57,876 --> 0:36:58,986
this view is zoomed in or not.

1148
00:36:58,986 --> 0:37:01,406
And this is persisted by the

1149
00:36:58,986 --> 0:37:01,406
And this is persisted by the

1150
00:37:01,406 --> 0:37:02,996
framework and controls the

1151
00:37:02,996 --> 0:37:03,756
aspect ratio.

1152
00:37:06,226 --> 0:37:08,046
Then we also have our video icon

1153
00:37:09,146 --> 0:37:10,616
and that's only shown for views

1154
00:37:10,706 --> 0:37:12,216
that have video conferencing and

1155
00:37:12,216 --> 0:37:13,186
only when they're not zoomed.

1156
00:37:14,146 --> 0:37:15,596
And we're also specifying this

1157
00:37:15,596 --> 0:37:17,176
transition to make the icon

1158
00:37:17,236 --> 0:37:17,916
slide in and out.

1159
00:37:18,496 --> 0:37:20,196
But what's actually happening

1160
00:37:20,196 --> 0:37:21,146
during that transition?

1161
00:37:22,076 --> 0:37:23,516
Well, when this icon is removed,

1162
00:37:24,416 --> 0:37:25,616
the view gets animated to a new

1163
00:37:25,616 --> 0:37:28,316
position and SwiftUI waits until

1164
00:37:28,316 --> 0:37:29,526
it finishes that animation to

1165
00:37:29,676 --> 0:37:30,906
actually remove the view from

1166
00:37:30,906 --> 0:37:31,446
the hierarchy.

1167
00:37:32,496 --> 0:37:33,666
And the when it's coming back,

1168
00:37:35,026 --> 0:37:36,496
SwiftUI inserts it off-screen

1169
00:37:36,496 --> 0:37:38,046
and the moves it back in with an

1170
00:37:38,046 --> 0:37:38,566
animation.

1171
00:37:39,816 --> 0:37:40,896
I've wanted to be able to do

1172
00:37:40,896 --> 0:37:42,306
AddSubview and RemoveSubview

1173
00:37:42,306 --> 0:37:43,476
with an animation for a really

1174
00:37:43,476 --> 0:37:45,136
long time, so I'm really excited

1175
00:37:45,136 --> 0:37:46,386
to finally have it.

1176
00:37:47,516 --> 0:37:52,606
[ Applause ]

1177
00:37:53,106 --> 0:37:54,346
And recall that this animation

1178
00:37:54,396 --> 0:37:55,736
is always interactive right out

1179
00:37:55,736 --> 0:37:56,146
of the box.

1180
00:37:57,116 --> 0:37:58,306
This is where being data-driven

1181
00:37:58,306 --> 0:37:59,566
instead of event-driven really

1182
00:37:59,566 --> 0:38:00,006
shines.

1183
00:37:59,566 --> 0:38:00,006
shines.

1184
00:38:00,566 --> 0:38:01,646
All those events that Kyle

1185
00:38:01,646 --> 0:38:02,986
talked about can happen while

1186
00:38:02,986 --> 0:38:03,766
this is animating.

1187
00:38:04,476 --> 0:38:05,846
And animations beginning and

1188
00:38:05,846 --> 0:38:07,076
ending are even more events.

1189
00:38:07,806 --> 0:38:09,146
It's incredibly difficult to

1190
00:38:09,146 --> 0:38:10,506
build something like this in an

1191
00:38:10,506 --> 0:38:11,476
event driven world.

1192
00:38:11,926 --> 0:38:13,356
But in SwiftUI it's just one

1193
00:38:13,356 --> 0:38:14,526
line of code.

1194
00:38:17,066 --> 0:38:18,566
Now let's go back to our list of

1195
00:38:18,566 --> 0:38:19,916
rooms and finish up this app.

1196
00:38:24,046 --> 0:38:25,446
Over time, we need to be able to

1197
00:38:25,446 --> 0:38:26,646
change our list of conference

1198
00:38:26,646 --> 0:38:28,156
rooms, so let's add some editing

1199
00:38:28,156 --> 0:38:28,526
support.

1200
00:38:29,566 --> 0:38:30,546
And while we're at it, let's

1201
00:38:30,546 --> 0:38:31,596
also make our data model a

1202
00:38:31,636 --> 0:38:32,436
little more real.

1203
00:38:33,526 --> 0:38:35,426
Right now, the data in our app

1204
00:38:35,626 --> 0:38:36,476
is completely static.

1205
00:38:37,096 --> 0:38:39,746
We have this array of rooms and

1206
00:38:39,746 --> 0:38:41,096
whatever we start with is what

1207
00:38:41,096 --> 0:38:41,736
we'll always have.

1208
00:38:42,326 --> 0:38:44,136
So let's update our model to

1209
00:38:44,136 --> 0:38:45,596
have a root store object that

1210
00:38:45,596 --> 0:38:46,966
will contain our rooms and will

1211
00:38:46,966 --> 0:38:48,266
be able to change over time.

1212
00:38:48,856 --> 0:38:51,476
I'm going to drag in a prebuilt

1213
00:38:51,476 --> 0:38:52,836
model file with our room store.

1214
00:39:01,596 --> 0:39:03,346
Notice that our store is a

1215
00:39:03,346 --> 0:39:04,906
mutable object which contains

1216
00:39:04,906 --> 0:39:05,586
the rooms that we need.

1217
00:39:06,616 --> 0:39:08,106
And all we need to do is tell

1218
00:39:08,106 --> 0:39:09,856
SwiftUI when it changes.

1219
00:39:10,926 --> 0:39:12,306
To do that, I'm going to conform

1220
00:39:12,306 --> 0:39:13,226
it to the bindable object

1221
00:39:13,256 --> 0:39:15,436
protocol which requires me to

1222
00:39:15,436 --> 0:39:16,706
have a DidChange property.

1223
00:39:23,066 --> 0:39:24,416
Now new this year is the Combine

1224
00:39:24,416 --> 0:39:25,956
framework which includes a large

1225
00:39:25,956 --> 0:39:27,206
number of components you can use

1226
00:39:27,206 --> 0:39:28,306
to connect your data together.

1227
00:39:29,186 --> 0:39:30,586
Here we use the pass-through

1228
00:39:30,586 --> 0:39:31,986
publisher, a pass-through

1229
00:39:31,986 --> 0:39:34,106
subject from Combine which gives

1230
00:39:34,106 --> 0:39:35,726
us a local object that we can

1231
00:39:35,726 --> 0:39:37,126
subscribe to and send updates

1232
00:39:37,126 --> 0:39:38,696
to, similar to a notification

1233
00:39:38,696 --> 0:39:38,976
center.

1234
00:39:42,856 --> 0:39:44,556
Then we'll just update our rooms

1235
00:39:46,076 --> 0:39:48,586
to have a DidSet so that we can

1236
00:39:48,586 --> 0:39:49,626
notify our subject when our

1237
00:39:49,626 --> 0:39:49,976
rooms change.

1238
00:39:55,166 --> 0:39:56,056
And if you're interested to

1239
00:39:56,056 --> 0:39:57,186
learn more about Combine, there

1240
00:39:57,186 --> 0:39:58,476
are two sessions this week to

1241
00:39:58,476 --> 0:40:00,286
take you through all of the

1242
00:39:58,476 --> 0:40:00,286
take you through all of the

1243
00:40:00,956 --> 0:40:01,156
details.

1244
00:40:01,276 --> 0:40:02,736
Now let's go back to our view

1245
00:40:03,436 --> 0:40:05,676
and update it to use our store.

1246
00:40:07,026 --> 0:40:08,106
We'll change from this Rooms

1247
00:40:08,106 --> 0:40:09,786
property to a Store property.

1248
00:40:10,476 --> 0:40:13,316
And we'll make it an object

1249
00:40:13,316 --> 0:40:15,356
binding to tell SwiftUI to

1250
00:40:15,396 --> 0:40:16,536
listen to changes for this

1251
00:40:16,536 --> 0:40:16,866
property.

1252
00:40:17,876 --> 0:40:19,566
And again, the Data Flow Through

1253
00:40:19,566 --> 0:40:20,626
SwiftUI session that Kyle

1254
00:40:20,626 --> 0:40:22,076
mentioned earlier has a lot more

1255
00:40:22,076 --> 0:40:23,296
information about how object

1256
00:40:23,296 --> 0:40:24,376
binding and these other pieces

1257
00:40:24,376 --> 0:40:24,636
work.

1258
00:40:25,126 --> 0:40:27,716
Let's also update our preview to

1259
00:40:27,716 --> 0:40:28,666
create our new store type.

1260
00:40:32,216 --> 0:40:34,356
Using our test data.

1261
00:40:34,526 --> 0:40:35,806
And we'll also update our list

1262
00:40:36,026 --> 0:40:37,436
to pull the rooms from out of

1263
00:40:37,976 --> 0:40:39,686
the store.

1264
00:40:39,906 --> 0:40:40,126
Great.

1265
00:40:40,826 --> 0:40:41,866
Now we're using our new model

1266
00:40:41,946 --> 0:40:43,176
and whenever it updates, our

1267
00:40:43,176 --> 0:40:44,156
view will create a fresh

1268
00:40:44,156 --> 0:40:44,486
rendering.

1269
00:40:45,996 --> 0:40:46,996
This means we're ready to add

1270
00:40:46,996 --> 0:40:47,796
our editing support.

1271
00:40:48,746 --> 0:40:50,006
Let's start by adding a button

1272
00:40:50,316 --> 0:40:51,896
to our list to add new rooms.

1273
00:40:53,156 --> 0:40:54,376
Right now, we're using a single

1274
00:40:54,376 --> 0:40:55,766
collection to drive the list

1275
00:40:56,386 --> 0:40:57,336
which is great for lists that

1276
00:40:57,336 --> 0:40:58,496
are entirely data-driven.

1277
00:40:59,096 --> 0:41:00,626
But when I need more, SwiftUI

1278
00:40:59,096 --> 0:41:00,626
But when I need more, SwiftUI

1279
00:41:00,626 --> 0:41:02,536
also lets me mix static and

1280
00:41:02,536 --> 0:41:04,106
dynamic content in lists and

1281
00:41:04,106 --> 0:41:04,956
other containers.

1282
00:41:05,546 --> 0:41:08,826
So I can replace this list using

1283
00:41:08,826 --> 0:41:10,556
the collection with a ForEach.

1284
00:41:11,166 --> 0:41:14,236
A ForEach creates a view for

1285
00:41:14,236 --> 0:41:15,426
each item in its collection.

1286
00:41:16,046 --> 0:41:19,336
So now I can add a static

1287
00:41:19,336 --> 0:41:20,716
element right alongside this

1288
00:41:20,716 --> 0:41:21,176
ForEach.

1289
00:41:22,416 --> 0:41:23,796
I'll just go to the library and

1290
00:41:23,796 --> 0:41:24,976
find a button.

1291
00:41:27,286 --> 0:41:28,826
And then I can just drag it into

1292
00:41:28,826 --> 0:41:31,266
my code to add it to our list.

1293
00:41:33,296 --> 0:41:35,116
Let's update its text to show

1294
00:41:35,116 --> 0:41:35,676
Add Room.

1295
00:41:36,846 --> 0:41:38,136
And let's add a method to add

1296
00:41:38,136 --> 0:41:38,756
that new room.

1297
00:41:43,436 --> 0:41:45,616
Okay, we'll tell our Store to

1298
00:41:45,616 --> 0:41:46,596
append a new room.

1299
00:41:47,266 --> 0:41:51,246
And let's just use the room that

1300
00:41:52,096 --> 0:41:52,436
we're in.

1301
00:41:52,436 --> 0:41:53,446
It's called Hall 2 and I think

1302
00:41:53,886 --> 0:41:54,816
there's what, about 2,000 of

1303
00:41:54,906 --> 0:41:54,976
you.

1304
00:41:59,046 --> 0:42:00,336
And finally, let's update our

1305
00:41:59,046 --> 0:42:00,336
And finally, let's update our

1306
00:42:00,336 --> 0:42:01,686
button to use our new Add Room

1307
00:42:01,686 --> 0:42:01,976
method.

1308
00:42:04,126 --> 0:42:05,746
Okay, now let's go to Live Mode

1309
00:42:05,746 --> 0:42:06,646
and try out our new button.

1310
00:42:07,406 --> 0:42:09,626
There it is, right next to all

1311
00:42:09,626 --> 0:42:10,026
of our data.

1312
00:42:10,166 --> 0:42:12,126
And when I tap it, we get our

1313
00:42:12,126 --> 0:42:12,566
new room.

1314
00:42:13,476 --> 0:42:13,716
Great.

1315
00:42:14,516 --> 0:42:21,816
[ Applause ]

1316
00:42:22,316 --> 0:42:23,456
So just like that, we were able

1317
00:42:23,456 --> 0:42:24,626
to add this single static

1318
00:42:24,626 --> 0:42:25,976
element alongside our

1319
00:42:25,976 --> 0:42:26,956
data-driven collection.

1320
00:42:27,936 --> 0:42:29,466
SwiftUI lets us easily describe

1321
00:42:29,466 --> 0:42:30,656
these powerful combinations

1322
00:42:31,256 --> 0:42:32,486
which makes it so much easier to

1323
00:42:32,486 --> 0:42:33,716
build complex list UI's.

1324
00:42:34,126 --> 0:42:35,466
No more off by one index path

1325
00:42:35,466 --> 0:42:35,876
errors.

1326
00:42:38,366 --> 0:42:39,896
But I want to style this to look

1327
00:42:39,896 --> 0:42:40,406
even better.

1328
00:42:41,386 --> 0:42:42,986
Let's put the Add button and all

1329
00:42:42,986 --> 0:42:44,356
of our content into separate

1330
00:42:44,356 --> 0:42:44,776
sections.

1331
00:42:45,986 --> 0:42:48,296
We can change our list style to

1332
00:42:49,356 --> 0:42:54,006
be grouped, which gives us this

1333
00:42:54,006 --> 0:42:54,786
nice grouped appearance.

1334
00:42:55,956 --> 0:42:57,296
Then we'll add a section

1335
00:42:57,296 --> 0:42:58,786
container around our button.

1336
00:43:02,166 --> 0:43:03,506
And another one around our

1337
00:43:03,576 --> 0:43:04,016
ForEach.

1338
00:43:07,336 --> 0:43:08,466
Great, now we have our separate

1339
00:43:08,466 --> 0:43:08,796
sections.

1340
00:43:09,386 --> 0:43:12,126
Next, let's hook up deletion for

1341
00:43:12,126 --> 0:43:12,536
our list.

1342
00:43:13,676 --> 0:43:17,406
We'll add a method to delete a

1343
00:43:17,406 --> 0:43:19,686
set of rooms and we'll pass in

1344
00:43:20,156 --> 0:43:22,486
some offsets for where to remove

1345
00:43:23,816 --> 0:43:23,916
them.

1346
00:43:24,146 --> 0:43:25,526
Then we'll just tell our store

1347
00:43:26,506 --> 0:43:28,026
to remove the rooms that those

1348
00:43:28,026 --> 0:43:28,386
offsets.

1349
00:43:32,296 --> 0:43:34,586
Then we can add a modifier onto

1350
00:43:34,586 --> 0:43:36,146
our ForEach called OnDelete.

1351
00:43:36,796 --> 0:43:39,056
And we can pass in our delete

1352
00:43:39,056 --> 0:43:41,396
method to that modifier.

1353
00:43:42,046 --> 0:43:44,526
Now if we go back into Live

1354
00:43:44,526 --> 0:43:47,886
Mode, we can swipe on one of our

1355
00:43:47,886 --> 0:43:49,646
rows and delete it, just like

1356
00:43:50,756 --> 0:43:50,846
that.

1357
00:43:51,516 --> 0:43:57,156
[ Applause ]

1358
00:43:57,656 --> 0:43:59,206
This ForEach is now configured

1359
00:43:59,206 --> 0:44:00,516
to call into our callback

1360
00:43:59,206 --> 0:44:00,516
to call into our callback

1361
00:44:01,596 --> 0:44:03,386
whenever items get removed from

1362
00:44:03,386 --> 0:44:03,486
it.

1363
00:44:04,406 --> 0:44:05,696
And then our callback calls into

1364
00:44:05,696 --> 0:44:07,056
the Store to remove those items.

1365
00:44:07,756 --> 0:44:08,656
And then our view updates.

1366
00:44:09,416 --> 0:44:09,516
Okay.

1367
00:44:10,536 --> 0:44:12,636
Now we want to be able to take

1368
00:44:12,636 --> 0:44:13,816
our list into Edit Mode in

1369
00:44:13,816 --> 0:44:14,936
addition to just allowing swipe

1370
00:44:14,976 --> 0:44:15,406
to delete.

1371
00:44:16,456 --> 0:44:18,786
So let's set a navigation bar

1372
00:44:18,786 --> 0:44:20,206
item, and we can do that the

1373
00:44:20,206 --> 0:44:21,606
same way we set this navigation

1374
00:44:21,606 --> 0:44:22,606
bar title-- with another

1375
00:44:22,606 --> 0:44:23,096
modifier.

1376
00:44:26,206 --> 0:44:27,886
And to create an Edit button, we

1377
00:44:27,886 --> 0:44:28,826
just create an Edit button.

1378
00:44:28,826 --> 0:44:31,186
And there it is in our UI.

1379
00:44:31,186 --> 0:44:34,016
And while we're at it, let's

1380
00:44:34,016 --> 0:44:35,236
also add reordering support.

1381
00:44:36,536 --> 0:44:37,996
Again, I'll just add a simple

1382
00:44:37,996 --> 0:44:39,756
method to move items.

1383
00:44:41,126 --> 0:44:42,436
And we'll move it from a source

1384
00:44:43,196 --> 0:44:45,976
to a destination.

1385
00:44:49,056 --> 0:44:50,306
And again, we'll just call into

1386
00:44:50,306 --> 0:44:52,676
our Store's Rooms and tell it to

1387
00:44:52,676 --> 0:44:52,906
move.

1388
00:44:57,276 --> 0:44:57,556
Okay.

1389
00:44:58,326 --> 0:45:00,556
Then just like before, we'll add

1390
00:44:58,326 --> 0:45:00,556
Then just like before, we'll add

1391
00:45:00,556 --> 0:45:02,116
another modifier, this time on

1392
00:45:02,116 --> 0:45:05,126
Move, and tell it to call into

1393
00:45:05,126 --> 0:45:07,676
the method that we just added.

1394
00:45:07,886 --> 0:45:09,386
Now let's try our app again.

1395
00:45:10,946 --> 0:45:12,116
We can toggle Edit Mode for our

1396
00:45:12,116 --> 0:45:12,566
list.

1397
00:45:13,476 --> 0:45:14,736
And notice that all of our data

1398
00:45:14,736 --> 0:45:16,516
rows have editing controls but

1399
00:45:16,516 --> 0:45:17,236
the button does not.

1400
00:45:18,146 --> 0:45:19,776
SwiftUI automatically shows the

1401
00:45:19,776 --> 0:45:21,516
right editing controls in the

1402
00:45:21,516 --> 0:45:23,216
places that need it, without us

1403
00:45:23,216 --> 0:45:24,976
having to do any extra work.

1404
00:45:25,516 --> 0:45:27,566
[ Applause ]

1405
00:45:28,066 --> 0:45:28,526
Yeah, it's cool.

1406
00:45:29,031 --> 0:45:31,031
[ Applause ]

1407
00:45:31,046 --> 0:45:32,356
And of course now we can drag to

1408
00:45:32,356 --> 0:45:34,496
reorder and tap on items to

1409
00:45:34,496 --> 0:45:34,976
remove them.

1410
00:45:37,016 --> 0:45:38,286
[ Applause ]

1411
00:45:38,286 --> 0:45:38,546
Thank you.

1412
00:45:39,516 --> 0:45:42,586
[ Applause ]

1413
00:45:43,086 --> 0:45:44,326
So let's quickly review what we

1414
00:45:44,326 --> 0:45:44,796
just added.

1415
00:45:45,956 --> 0:45:47,676
We customized our list to show

1416
00:45:47,676 --> 0:45:50,016
multiple sections, and by

1417
00:45:50,016 --> 0:45:50,956
setting its list style to

1418
00:45:50,956 --> 0:45:51,266
grouped.

1419
00:45:52,286 --> 0:45:53,586
And we mixed this static button

1420
00:45:54,186 --> 0:45:55,306
together with our data-driven

1421
00:45:55,306 --> 0:45:56,896
collection from our Rooms.

1422
00:45:58,006 --> 0:45:59,046
And we also saw how we can

1423
00:45:59,046 --> 0:46:00,476
quickly add editing operations

1424
00:45:59,046 --> 0:46:00,476
quickly add editing operations

1425
00:46:00,476 --> 0:46:01,696
to our list with just these

1426
00:46:01,696 --> 0:46:03,836
modifiers and a few functions to

1427
00:46:03,836 --> 0:46:04,556
modify our data.

1428
00:46:05,276 --> 0:46:07,376
And remember how we made our

1429
00:46:07,376 --> 0:46:08,936
room type identifiable earlier?

1430
00:46:09,846 --> 0:46:11,726
Well, ForEach automatically

1431
00:46:11,726 --> 0:46:12,896
watches for changes to its

1432
00:46:12,896 --> 0:46:14,726
collection and synthesizes the

1433
00:46:14,726 --> 0:46:16,536
correct insertions, deletions,

1434
00:46:16,696 --> 0:46:18,436
and changes for us, so we no

1435
00:46:18,436 --> 0:46:19,766
longer need to tell the list to

1436
00:46:19,766 --> 0:46:21,456
add and remove rows, which means

1437
00:46:21,456 --> 0:46:22,656
we no longer have to worry about

1438
00:46:22,656 --> 0:46:23,306
getting data source

1439
00:46:23,416 --> 0:46:24,606
inconsistency exceptions.

1440
00:46:26,016 --> 0:46:27,096
[ Applause ]

1441
00:46:27,096 --> 0:46:27,536
Yep, that's right.

1442
00:46:28,516 --> 0:46:30,686
[ Applause ]

1443
00:46:31,186 --> 0:46:31,926
So that's our list.

1444
00:46:32,256 --> 0:46:32,956
And we made this whole

1445
00:46:32,956 --> 0:46:34,856
sophisticated list UI with just

1446
00:46:34,946 --> 0:46:36,636
this really minimal view code.

1447
00:46:39,256 --> 0:46:40,876
Okay, now we were able to build

1448
00:46:40,876 --> 0:46:42,306
this app up really quickly.

1449
00:46:43,206 --> 0:46:44,126
But you might be thinking that

1450
00:46:44,126 --> 0:46:45,176
there's still a lot more work we

1451
00:46:45,176 --> 0:46:46,356
need to do to get it ready for

1452
00:46:46,356 --> 0:46:46,856
customers.

1453
00:46:47,676 --> 0:46:49,326
These days, support for dynamic

1454
00:46:49,406 --> 0:46:51,296
type, dark mode, accessibility,

1455
00:46:51,296 --> 0:46:52,786
localization -- these are all

1456
00:46:52,786 --> 0:46:53,806
just expected for an app.

1457
00:46:55,046 --> 0:46:56,356
But with SwiftUI you get a lot

1458
00:46:56,356 --> 0:46:57,636
more support for these behaviors

1459
00:46:57,686 --> 0:46:58,266
automatically.

1460
00:46:59,066 --> 0:47:00,226
And we can use previews to

1461
00:46:59,066 --> 0:47:00,226
And we can use previews to

1462
00:47:00,226 --> 0:47:01,366
really quickly test all of

1463
00:47:01,366 --> 0:47:01,586
these.

1464
00:47:02,916 --> 0:47:04,156
So let's go to our preview and

1465
00:47:04,956 --> 0:47:05,726
add some more views.

1466
00:47:05,786 --> 0:47:08,446
Again, I'll add a group to let

1467
00:47:09,036 --> 0:47:10,226
us have multiple children.

1468
00:47:10,826 --> 0:47:13,476
And then I'll add another

1469
00:47:13,476 --> 0:47:14,576
version of our view.

1470
00:47:15,256 --> 0:47:17,676
And this time we'll change the

1471
00:47:17,676 --> 0:47:21,716
environment to use a size

1472
00:47:21,716 --> 0:47:23,726
category that's a much larger

1473
00:47:24,406 --> 0:47:24,526
size.

1474
00:47:27,066 --> 0:47:28,166
Let's go see how it looks.

1475
00:47:28,266 --> 0:47:29,666
And everything automatically

1476
00:47:30,326 --> 0:47:31,596
works great.

1477
00:47:31,786 --> 0:47:31,856
Now --

1478
00:47:32,201 --> 0:47:34,201
[ Applause ]

1479
00:47:34,386 --> 0:47:35,356
Yeah. It's great to get this for

1480
00:47:36,886 --> 0:47:37,006
free.

1481
00:47:37,266 --> 0:47:38,666
Now the environment is a way

1482
00:47:38,666 --> 0:47:39,796
that you can set contextual

1483
00:47:39,796 --> 0:47:41,356
information about your views

1484
00:47:41,726 --> 0:47:42,516
that flows down the view

1485
00:47:42,516 --> 0:47:43,916
hierarchy and changes different

1486
00:47:43,916 --> 0:47:45,456
aspects of any contained views

1487
00:47:45,456 --> 0:47:46,126
all at once.

1488
00:47:46,866 --> 0:47:48,136
It's great for making changes to

1489
00:47:48,136 --> 0:47:49,566
a large set of views and it's

1490
00:47:49,566 --> 0:47:50,876
also great for customizing your

1491
00:47:50,876 --> 0:47:52,286
previews to see your view in

1492
00:47:52,286 --> 0:47:52,956
different contexts.

1493
00:47:53,086 --> 0:47:55,976
So let's add another version of

1494
00:47:55,976 --> 0:47:58,926
our view and update the

1495
00:47:58,926 --> 0:48:00,976
environment to set its color

1496
00:47:58,926 --> 0:48:00,976
environment to set its color

1497
00:48:00,976 --> 0:48:02,286
scheme to be dark.

1498
00:48:05,076 --> 0:48:06,116
And once again it all just

1499
00:48:06,116 --> 0:48:06,536
works.

1500
00:48:07,516 --> 0:48:12,546
[ Applause ]

1501
00:48:13,046 --> 0:48:14,516
And finally, let's also see how

1502
00:48:14,516 --> 0:48:15,536
our app works with other

1503
00:48:15,536 --> 0:48:16,036
languages.

1504
00:48:17,046 --> 0:48:18,986
I have some English string files

1505
00:48:19,126 --> 0:48:20,906
that I'll drag into my app.

1506
00:48:27,186 --> 0:48:28,786
And I'll tell Xcode to localize

1507
00:48:28,786 --> 0:48:28,976
them.

1508
00:48:34,106 --> 0:48:35,996
Then I'll go to my project file

1509
00:48:36,996 --> 0:48:39,376
and I'll import a localization

1510
00:48:39,506 --> 0:48:40,726
that I have for Arabic.

1511
00:48:47,046 --> 0:48:48,206
Now let's go back to our view

1512
00:48:48,566 --> 0:48:49,466
and add one more preview.

1513
00:48:55,766 --> 0:48:57,396
Now, if we first set the layout

1514
00:48:57,396 --> 0:49:00,906
direction to be right-to-left,

1515
00:48:57,396 --> 0:49:00,906
direction to be right-to-left,

1516
00:49:01,796 --> 0:49:03,326
we can see that this

1517
00:49:03,326 --> 0:49:04,706
automatically works without any

1518
00:49:04,706 --> 0:49:05,136
extra work.

1519
00:49:05,136 --> 0:49:09,116
But if I also set the locale to

1520
00:49:11,536 --> 0:49:16,876
be an Arabic locale, you can see

1521
00:49:16,876 --> 0:49:17,976
that everything gets localized.

1522
00:49:20,516 --> 0:49:25,736
[ Applause ]

1523
00:49:26,236 --> 0:49:27,776
And even better, if we look back

1524
00:49:27,776 --> 0:49:29,026
at our code, we didn't do

1525
00:49:29,026 --> 0:49:30,346
anything extra to support these

1526
00:49:30,346 --> 0:49:30,846
features.

1527
00:49:31,516 --> 0:49:33,006
To get our text localizable, we

1528
00:49:33,006 --> 0:49:34,246
didn't have to mark up which

1529
00:49:34,246 --> 0:49:35,486
strings should be localizable or

1530
00:49:35,486 --> 0:49:35,716
not.

1531
00:49:36,136 --> 0:49:37,506
SwiftUI automatically infers

1532
00:49:37,506 --> 0:49:37,746
that.

1533
00:49:38,676 --> 0:49:40,286
For text using string literals,

1534
00:49:40,676 --> 0:49:41,846
it's localizable by default.

1535
00:49:43,276 --> 0:49:44,506
And for text that's created by

1536
00:49:44,506 --> 0:49:46,066
getting passed a string, it

1537
00:49:46,066 --> 0:49:47,286
defaults to getting used as-is.

1538
00:49:48,216 --> 0:49:49,286
This means that all of our app

1539
00:49:49,326 --> 0:49:51,396
text like Rooms and Add Room

1540
00:49:51,686 --> 0:49:52,516
gets localized.

1541
00:49:53,046 --> 0:49:54,946
But all of our content like

1542
00:49:55,086 --> 0:49:56,906
these room names still gets

1543
00:49:56,906 --> 0:49:57,566
passed right through.

1544
00:49:58,296 --> 0:49:59,936
But even better, you can finally

1545
00:49:59,936 --> 0:50:01,306
use string interpolations and

1546
00:49:59,936 --> 0:50:01,306
use string interpolations and

1547
00:50:01,306 --> 0:50:02,446
have them localized correctly.

1548
00:50:03,516 --> 0:50:08,866
[ Applause ]

1549
00:50:09,366 --> 0:50:10,466
I love string interpolations.

1550
00:50:10,466 --> 0:50:11,366
They're great.

1551
00:50:12,356 --> 0:50:13,606
We're really excited for you to

1552
00:50:13,606 --> 0:50:14,526
start building apps with

1553
00:50:14,526 --> 0:50:14,916
SwiftUI.

1554
00:50:15,566 --> 0:50:16,276
When you get all of these

1555
00:50:16,276 --> 0:50:17,646
behaviors for free, you can

1556
00:50:17,646 --> 0:50:19,086
concentrate on the unique parts

1557
00:50:19,086 --> 0:50:20,436
of your app and build better

1558
00:50:20,436 --> 0:50:21,616
apps for your customers even

1559
00:50:21,616 --> 0:50:22,046
faster.

1560
00:50:23,126 --> 0:50:24,536
Now we built an iPhone app here,

1561
00:50:25,206 --> 0:50:26,596
but you can use these same APIs

1562
00:50:26,596 --> 0:50:27,936
and techniques across all of

1563
00:50:27,936 --> 0:50:28,686
Apple's platforms.

1564
00:50:29,556 --> 0:50:30,486
And you'll get these kinds of

1565
00:50:30,486 --> 0:50:31,806
automatic behaviors across all

1566
00:50:31,806 --> 0:50:31,976
of them.

1567
00:50:34,046 --> 0:50:35,316
Okay, let's take one last pass

1568
00:50:35,366 --> 0:50:36,486
through our app to review what

1569
00:50:36,486 --> 0:50:37,516
we built and make sure

1570
00:50:37,516 --> 0:50:38,456
everything is working right.

1571
00:50:39,836 --> 0:50:41,486
I'm a big fan of dark mode, so

1572
00:50:41,486 --> 0:50:41,976
let's use that version.

1573
00:50:45,166 --> 0:50:46,476
Okay, we have our list of rooms

1574
00:50:46,826 --> 0:50:48,486
and we can tap on one of them to

1575
00:50:48,486 --> 0:50:49,296
see more information.

1576
00:50:49,346 --> 0:50:51,556
And in our detail view we can

1577
00:50:51,556 --> 0:50:53,356
tap to zoom to full screen which

1578
00:50:53,356 --> 0:50:54,416
hides our video icon with a

1579
00:50:54,416 --> 0:50:56,676
transition, and that animation

1580
00:50:56,796 --> 0:50:57,586
is always interactive.

1581
00:51:00,106 --> 0:51:02,156
And we can also edit our list to

1582
00:51:02,156 --> 0:51:02,706
make changes.

1583
00:51:03,346 --> 0:51:07,566
Let's move this one down, and I

1584
00:51:07,566 --> 0:51:08,496
don't think anyone really wants

1585
00:51:08,496 --> 0:51:09,836
to use the dungeon conference

1586
00:51:10,346 --> 0:51:10,436
room.

1587
00:51:13,616 --> 0:51:14,736
Actually, I'm also not sure why

1588
00:51:14,846 --> 0:51:15,866
Kyle added this room that has an

1589
00:51:15,866 --> 0:51:16,266
elephant.

1590
00:51:16,266 --> 0:51:17,526
Let's get rid of that one too.

1591
00:51:18,756 --> 0:51:20,226
And finally, let's add our

1592
00:51:20,226 --> 0:51:20,756
conference room.

1593
00:51:21,676 --> 0:51:21,926
Great.

1594
00:51:22,266 --> 0:51:22,706
That's our app.

1595
00:51:23,516 --> 0:51:29,666
[ Applause ]

1596
00:51:30,166 --> 0:51:31,026
But there's one last thing that

1597
00:51:31,026 --> 0:51:32,116
I want to point out and it's

1598
00:51:32,116 --> 0:51:33,096
something that we didn't see.

1599
00:51:33,926 --> 0:51:35,046
We just built up this entire

1600
00:51:35,046 --> 0:51:36,796
application and tested all these

1601
00:51:36,796 --> 0:51:38,746
rich behaviors without ever once

1602
00:51:38,826 --> 0:51:40,626
building and running our app.

1603
00:51:40,626 --> 0:51:42,056
Xcode previews let us view,

1604
00:51:42,086 --> 0:51:43,496
edit, and debug our application

1605
00:51:43,706 --> 0:51:44,656
way faster than was ever

1606
00:51:44,656 --> 0:51:45,466
possible before.

1607
00:51:46,556 --> 0:51:47,536
So thank you very much.

1608
00:51:47,716 --> 0:51:48,926
I hope you enjoy using SwiftUI

1609
00:51:48,926 --> 0:51:49,646
as much as I do.

1610
00:51:49,936 --> 0:51:50,516
It's a lot of fun.

1611
00:51:51,516 --> 0:51:54,776
[ Applause ]

1612
00:51:55,276 --> 0:51:57,006
&gt;&gt; So our goal with this SwiftUI

1613
00:51:57,356 --> 0:51:59,426
is to give you the shortest path

1614
00:51:59,556 --> 0:52:00,796
to a great app that's going to

1615
00:51:59,556 --> 0:52:00,796
to a great app that's going to

1616
00:52:00,796 --> 0:52:02,106
reach the widest audience.

1617
00:52:03,216 --> 0:52:06,066
We saw four of SwiftUI's key

1618
00:52:06,066 --> 0:52:07,596
design principles at play today.

1619
00:52:07,796 --> 0:52:09,836
We saw its declarative syntax,

1620
00:52:10,226 --> 0:52:12,176
which will evoke the actual UI

1621
00:52:12,176 --> 0:52:13,776
you're building and take care of

1622
00:52:13,776 --> 0:52:15,286
those imperative details like

1623
00:52:15,286 --> 0:52:17,076
adding and removing subviews on

1624
00:52:17,076 --> 0:52:17,716
your behalf.

1625
00:52:18,436 --> 0:52:20,296
We saw the compositional pieces

1626
00:52:20,586 --> 0:52:22,046
and how you can combine together

1627
00:52:22,296 --> 0:52:24,256
pieces of content, modifiers and

1628
00:52:24,256 --> 0:52:26,396
containers to build exactly the

1629
00:52:26,396 --> 0:52:27,506
UI you're looking for.

1630
00:52:28,316 --> 0:52:29,636
We saw all the automatic

1631
00:52:29,676 --> 0:52:31,886
behaviors you get by saying less

1632
00:52:32,236 --> 0:52:33,536
and letting the framework take

1633
00:52:33,536 --> 0:52:34,576
care of more.

1634
00:52:35,206 --> 0:52:37,046
We talked about how SwiftUI

1635
00:52:37,266 --> 0:52:39,196
keeps your views in a consistent

1636
00:52:39,246 --> 0:52:40,866
state so you never end up with a

1637
00:52:40,866 --> 0:52:42,096
view missing or in the wrong

1638
00:52:42,096 --> 0:52:42,506
place.

1639
00:52:43,156 --> 0:52:44,486
And of course we played with

1640
00:52:44,486 --> 0:52:46,376
SwiftUI's awesome interruptal

1641
00:52:46,376 --> 0:52:48,496
animations, which is one of my

1642
00:52:48,496 --> 0:52:49,196
favorites.

1643
00:52:49,366 --> 0:52:51,256
I always felt like before I had

1644
00:52:51,256 --> 0:52:52,806
to trade between having flashy

1645
00:52:52,806 --> 0:52:54,686
animations and the crushing

1646
00:52:54,686 --> 0:52:55,876
complexity that could come with

1647
00:52:55,876 --> 0:52:56,016
it.

1648
00:52:56,236 --> 0:52:57,356
But no longer.

1649
00:52:57,916 --> 0:53:00,316
The goal with SwiftUI -- wait,

1650
00:52:57,916 --> 0:53:00,316
The goal with SwiftUI -- wait,

1651
00:53:00,316 --> 0:53:01,916
we didn't look at it again.

1652
00:53:01,916 --> 0:53:02,726
It's so cool, right?

1653
00:53:03,286 --> 0:53:05,046
All right, the goal with SwiftUI

1654
00:53:05,396 --> 0:53:07,976
is for us to take care of these

1655
00:53:07,976 --> 0:53:09,686
basic features that every app

1656
00:53:09,686 --> 0:53:11,016
needs on your behalf.

1657
00:53:11,476 --> 0:53:12,786
Because when you're building an

1658
00:53:12,786 --> 0:53:14,166
app, it's not just the basic

1659
00:53:14,166 --> 0:53:15,096
features you add.

1660
00:53:15,376 --> 0:53:17,256
You've got all your special,

1661
00:53:17,256 --> 0:53:19,036
unique features that make your

1662
00:53:19,036 --> 0:53:20,186
app yours.

1663
00:53:21,016 --> 0:53:22,686
And the goal is for us to bear

1664
00:53:22,686 --> 0:53:24,656
more of this burden, the burden

1665
00:53:24,656 --> 0:53:26,256
for all those things that you

1666
00:53:26,256 --> 0:53:28,526
need to have to have a great app

1667
00:53:29,036 --> 0:53:30,416
and let you spend more of your

1668
00:53:30,416 --> 0:53:31,686
time focusing on things that

1669
00:53:31,686 --> 0:53:32,676
make your app special.

1670
00:53:33,676 --> 0:53:35,986
So I hope you all enjoyed your

1671
00:53:35,986 --> 0:53:37,826
introduction to SwiftUI.

1672
00:53:37,826 --> 0:53:39,516
Come find us in the labs.

1673
00:53:39,696 --> 0:53:41,086
We'll be there this afternoon

1674
00:53:41,086 --> 0:53:41,876
and throughout the week.

1675
00:53:42,466 --> 0:53:44,086
And we called out to a couple

1676
00:53:44,086 --> 0:53:45,496
sessions, Data Flow Through UI,

1677
00:53:45,496 --> 0:53:46,836
and Building Custom Views.

1678
00:53:47,076 --> 0:53:49,346
Your next stop in learning

1679
00:53:49,346 --> 0:53:51,046
SwiftUI should be the SwiftUI

1680
00:53:51,086 --> 0:53:52,296
Essentials talk where we're

1681
00:53:52,296 --> 0:53:53,516
going to go into every piece of

1682
00:53:53,516 --> 0:53:55,606
syntax and all the pieces that

1683
00:53:55,606 --> 0:53:57,406
you can compose together to make

1684
00:53:57,406 --> 0:53:58,416
views what they are.

1685
00:53:58,416 --> 0:54:00,166
So I hope to see you there.

1686
00:53:58,416 --> 0:54:00,166
So I hope to see you there.

1687
00:54:00,396 --> 0:54:03,056
Have a great WWDC and I hope you

1688
00:54:03,056 --> 0:54:03,746
enjoy SwiftUI.

1689
00:54:04,516 --> 0:54:08,500
[ Applause ]
