1
00:00:00,506 --> 0:00:04,516
[ Music ]

2
00:00:11,516 --> 0:00:14,936
[ Applause ]

3
00:00:15,436 --> 0:00:16,556
&gt;&gt; Hi everybody.

4
00:00:16,886 --> 0:00:18,086
It's so great to be with you all

5
00:00:18,086 --> 0:00:19,396
again at WWDC.

6
00:00:20,556 --> 0:00:23,526
I'm Dave. If you've seen the

7
00:00:23,526 --> 0:00:25,756
other sessions on SwiftUI, you

8
00:00:25,756 --> 0:00:28,366
know how easy it is to assemble

9
00:00:28,366 --> 0:00:29,806
all the parts of an application

10
00:00:29,806 --> 0:00:30,816
and get it working.

11
00:00:31,776 --> 0:00:34,196
Today, John and I are going to

12
00:00:34,196 --> 0:00:36,526
show you how to go from creating

13
00:00:36,526 --> 0:00:39,056
a functional app to one with

14
00:00:40,226 --> 0:00:42,486
fine-tuned layout, beautiful

15
00:00:42,486 --> 0:00:44,906
graphics, and some really cool

16
00:00:44,906 --> 0:00:45,566
animations.

17
00:00:47,336 --> 0:00:49,346
We're going to present two

18
00:00:49,346 --> 0:00:52,396
SwiftUI subsystems and then

19
00:00:52,396 --> 0:00:53,206
John's going to use them

20
00:00:53,206 --> 0:00:54,576
together to build a custom

21
00:00:54,576 --> 0:00:55,016
control.

22
00:00:55,726 --> 0:00:57,016
So let's get started.

23
00:00:57,706 --> 0:01:00,346
Now from the moment you get

24
00:00:57,706 --> 0:01:00,346
Now from the moment you get

25
00:01:00,346 --> 0:01:02,426
started with SwiftUI you're

26
00:01:02,426 --> 0:01:04,206
already experiencing the layout

27
00:01:04,206 --> 0:01:04,546
system.

28
00:01:05,275 --> 0:01:06,986
So that blue box you see around

29
00:01:06,986 --> 0:01:08,536
the text in your preview editor,

30
00:01:09,176 --> 0:01:11,426
that's its bounds and layout's

31
00:01:11,426 --> 0:01:12,936
all about deciding the bounds of

32
00:01:12,936 --> 0:01:13,756
things on the screen.

33
00:01:15,006 --> 0:01:16,436
But let's take a look under the

34
00:01:16,486 --> 0:01:18,146
hood and see what's happening

35
00:01:18,456 --> 0:01:19,226
with this example.

36
00:01:21,576 --> 0:01:23,626
Technically, there are three

37
00:01:23,626 --> 0:01:24,446
views at work here.

38
00:01:25,006 --> 0:01:26,976
There's the text at the bottom

39
00:01:26,976 --> 0:01:27,916
of the view hierarchy.

40
00:01:28,466 --> 0:01:31,876
Your content view which always

41
00:01:31,876 --> 0:01:33,986
has the same bounds as its body,

42
00:01:34,096 --> 0:01:34,696
the text.

43
00:01:36,026 --> 0:01:39,136
And finally, the root view which

44
00:01:39,136 --> 0:01:40,986
in this case has the dimensions

45
00:01:40,986 --> 0:01:43,066
of the device minus the safe

46
00:01:43,066 --> 0:01:43,986
area insets.

47
00:01:44,566 --> 0:01:45,956
So if you see something like

48
00:01:46,016 --> 0:01:47,456
this at the top of your phone,

49
00:01:47,846 --> 0:01:49,166
for example, it's not included.

50
00:01:49,786 --> 0:01:54,306
Pro tip, you can still lay stuff

51
00:01:54,306 --> 0:01:56,046
out in that area by using this

52
00:01:56,046 --> 0:01:57,616
modifier, okay?

53
00:01:57,956 --> 0:01:59,506
But by default you're in the

54
00:01:59,506 --> 0:02:00,126
safety zone.

55
00:01:59,506 --> 0:02:00,126
safety zone.

56
00:02:01,396 --> 0:02:04,396
Now, the top layer of any view

57
00:02:04,476 --> 0:02:06,216
with a body is always what we

58
00:02:06,216 --> 0:02:07,536
call layout neutral.

59
00:02:08,235 --> 0:02:10,856
So its bounds are defined by the

60
00:02:10,856 --> 0:02:11,906
bounds of its body.

61
00:02:11,966 --> 0:02:13,346
They act the same.

62
00:02:13,776 --> 0:02:15,306
So you can really treat them as

63
00:02:15,356 --> 0:02:17,036
the same view for the purposes

64
00:02:17,036 --> 0:02:17,726
of layout.

65
00:02:18,536 --> 0:02:20,076
So there are really only two

66
00:02:20,076 --> 0:02:22,546
views of interest here and the

67
00:02:22,546 --> 0:02:24,946
layout process has three steps.

68
00:02:25,956 --> 0:02:28,646
First, the root view offers the

69
00:02:28,646 --> 0:02:31,606
text a proposed size and that's

70
00:02:31,606 --> 0:02:32,816
represented by those two big

71
00:02:32,816 --> 0:02:33,556
wide arrows.

72
00:02:34,276 --> 0:02:36,276
And because it's at the root, it

73
00:02:36,276 --> 0:02:37,566
offers the size of the whole

74
00:02:37,566 --> 0:02:38,266
safe area.

75
00:02:40,446 --> 0:02:42,496
Next, the text replies, well

76
00:02:42,496 --> 0:02:43,706
that's mighty generous of you

77
00:02:43,706 --> 0:02:46,286
but I'm really, I'm only this

78
00:02:46,286 --> 0:02:46,466
big.

79
00:02:47,126 --> 0:02:50,046
And in SwiftUI there's no way to

80
00:02:50,046 --> 0:02:52,356
force a size on your child, the

81
00:02:52,356 --> 0:02:54,726
parent has to respect that

82
00:02:55,816 --> 0:02:55,946
choice.

83
00:02:56,206 --> 0:02:57,786
And now the root view says

84
00:02:58,306 --> 0:02:59,646
alrighty, I need to put you

85
00:02:59,646 --> 0:03:01,546
somewhere so I'm putting you in

86
00:02:59,646 --> 0:03:01,546
somewhere so I'm putting you in

87
00:03:01,546 --> 0:03:01,866
the middle.

88
00:03:02,686 --> 0:03:04,346
So that's it.

89
00:03:04,346 --> 0:03:07,566
This was a simple example but

90
00:03:07,716 --> 0:03:09,416
every layout interaction plays

91
00:03:09,416 --> 0:03:11,136
out in the same way between

92
00:03:11,536 --> 0:03:12,636
parents and children.

93
00:03:13,366 --> 0:03:14,976
And the behavior of your whole

94
00:03:14,976 --> 0:03:17,446
layout emerges from these parent

95
00:03:17,446 --> 0:03:18,526
child interactions.

96
00:03:20,576 --> 0:03:22,466
But I want to highlight the

97
00:03:22,466 --> 0:03:24,766
second step because it's

98
00:03:24,806 --> 0:03:26,036
different from what you might be

99
00:03:26,036 --> 0:03:28,116
used to, and it has an important

100
00:03:28,116 --> 0:03:29,446
consequence for you.

101
00:03:30,626 --> 0:03:32,636
It means that your views have

102
00:03:32,636 --> 0:03:33,586
sizing behavior.

103
00:03:35,356 --> 0:03:37,416
Since every view controls its

104
00:03:37,416 --> 0:03:39,536
own size, it means when you

105
00:03:39,536 --> 0:03:41,746
build a view, you get to decide

106
00:03:41,786 --> 0:03:43,566
how and when it resizes.

107
00:03:44,396 --> 0:03:46,636
For example, this view is a

108
00:03:46,636 --> 0:03:49,716
non-negotiable 50 by 10 points

109
00:03:50,086 --> 0:03:51,666
by virtue of the fixed size

110
00:03:51,666 --> 0:03:53,046
frame at its root.

111
00:03:54,496 --> 0:03:58,446
And this one is flexible but the

112
00:03:58,446 --> 0:03:59,386
height and width are always the

113
00:03:59,386 --> 0:03:59,806
same.

114
00:04:00,586 --> 0:04:02,056
So it's always got a one to one

115
00:04:02,056 --> 0:04:02,906
aspect ratio.

116
00:04:03,526 --> 0:04:05,836
So sizing is encapsulated in the

117
00:04:05,836 --> 0:04:06,616
view definition.

118
00:04:08,436 --> 0:04:09,926
We also saw this in action with

119
00:04:09,966 --> 0:04:10,396
text.

120
00:04:11,486 --> 0:04:13,716
So in SwiftUI, the bounds of

121
00:04:13,786 --> 0:04:15,936
text never stretch beyond the

122
00:04:16,166 --> 0:04:17,196
height and width of its

123
00:04:17,196 --> 0:04:19,375
displayed lines, and we'll see

124
00:04:19,375 --> 0:04:20,586
why that's important when we

125
00:04:20,586 --> 0:04:23,416
talk about stacks in a minute.

126
00:04:23,566 --> 0:04:27,086
Now, there's one final step in

127
00:04:27,086 --> 0:04:29,106
layout that's crucial for

128
00:04:29,106 --> 0:04:32,516
getting UIs to look good and you

129
00:04:32,516 --> 0:04:34,256
don't really have to think about

130
00:04:34,256 --> 0:04:36,026
it in SwiftUI because we take

131
00:04:36,026 --> 0:04:38,026
care of it, but it's worth

132
00:04:38,026 --> 0:04:40,536
knowing that SwiftUI rounds the

133
00:04:40,536 --> 0:04:42,026
corners of your view to the

134
00:04:42,026 --> 0:04:42,746
nearest pixel.

135
00:04:43,486 --> 0:04:45,586
So instead of anti-aliasing like

136
00:04:45,656 --> 0:04:48,626
this, you always get crisp,

137
00:04:49,166 --> 0:04:49,936
clear edges.

138
00:04:50,796 --> 0:04:52,956
So this is just one of many

139
00:04:52,956 --> 0:04:55,036
details every great app needs to

140
00:04:55,036 --> 0:04:55,536
get right.

141
00:04:56,206 --> 0:04:57,846
But SwiftUI takes care of--

142
00:04:58,946 --> 0:04:59,496
[applause] just takes out of

143
00:04:59,546 --> 0:04:59,836
your way.

144
00:04:59,876 --> 0:04:59,976
Yeah.

145
00:05:00,516 --> 0:05:03,056
[ Applause ]

146
00:05:03,556 --> 0:05:05,096
So you can focus on the things

147
00:05:05,096 --> 0:05:07,936
that make your app special.

148
00:05:08,066 --> 0:05:10,186
Okay, now that we have the

149
00:05:10,226 --> 0:05:12,456
basics in hand, let's see if we

150
00:05:12,456 --> 0:05:14,576
can't make things a little more

151
00:05:14,576 --> 0:05:15,236
appetizing.

152
00:05:17,156 --> 0:05:18,826
I'll change the text in our

153
00:05:18,826 --> 0:05:21,316
example to something random

154
00:05:21,316 --> 0:05:24,816
like, I don't know, avocado

155
00:05:24,816 --> 0:05:25,196
toast.

156
00:05:26,756 --> 0:05:27,416
Are you hungry yet?

157
00:05:28,956 --> 0:05:31,246
No? Okay. Let me try to make it

158
00:05:31,246 --> 0:05:32,596
a little bit more appealing.

159
00:05:33,016 --> 0:05:34,866
I'll add a nice green background

160
00:05:34,896 --> 0:05:35,076
here.

161
00:05:35,946 --> 0:05:38,526
Now, this background modifier

162
00:05:39,056 --> 0:05:41,276
wraps the text view in a

163
00:05:41,276 --> 0:05:43,296
background view with the color

164
00:05:43,296 --> 0:05:44,816
view as a secondary child.

165
00:05:47,156 --> 0:05:49,306
So now the green background

166
00:05:49,356 --> 0:05:51,086
exactly matches the bounds of

167
00:05:51,116 --> 0:05:51,706
the text.

168
00:05:52,886 --> 0:05:55,266
So pro tip number two, throwing

169
00:05:55,596 --> 0:05:57,856
a background or border color on

170
00:05:57,856 --> 0:06:00,286
a view is a really useful trick

171
00:05:57,856 --> 0:06:00,286
a view is a really useful trick

172
00:06:00,286 --> 0:06:01,416
if you want to observe the

173
00:06:01,416 --> 0:06:03,576
view's bounds and you don't have

174
00:06:03,576 --> 0:06:04,896
a preview canvas handy.

175
00:06:06,306 --> 0:06:09,036
Okay, now I want a little bit

176
00:06:09,036 --> 0:06:10,676
more space around the text in

177
00:06:10,766 --> 0:06:13,356
the edge of the green box so I'm

178
00:06:13,356 --> 0:06:14,996
going to insert some padding

179
00:06:15,726 --> 0:06:15,816
there.

180
00:06:17,436 --> 0:06:20,106
Now, SwiftUI chooses an amount

181
00:06:20,106 --> 0:06:21,866
of padding that's appropriate to

182
00:06:21,866 --> 0:06:24,416
our platform, dynamic type size,

183
00:06:24,606 --> 0:06:25,316
and environment.

184
00:06:26,456 --> 0:06:27,786
And when you don't pass any

185
00:06:27,826 --> 0:06:29,576
parameters, you get adaptive

186
00:06:29,706 --> 0:06:31,926
padding in exactly the same way

187
00:06:31,926 --> 0:06:34,916
that SwiftUI adaptively styles a

188
00:06:35,036 --> 0:06:37,146
picker or a button depending on

189
00:06:37,146 --> 0:06:37,946
the context it's in.

190
00:06:39,226 --> 0:06:41,116
And if we want to adaptively pad

191
00:06:41,116 --> 0:06:42,276
just the leading and trailing

192
00:06:42,276 --> 0:06:46,376
edges, well we can do that too.

193
00:06:46,616 --> 0:06:48,656
Adaptive modifiers are the best

194
00:06:48,936 --> 0:06:50,326
way to adjust your layout

195
00:06:50,746 --> 0:06:52,236
because you avoid complicating

196
00:06:52,236 --> 0:06:54,276
the code, wasting time on

197
00:06:54,276 --> 0:06:55,976
details early in your process,

198
00:06:56,386 --> 0:06:57,776
and hard coding constants that

199
00:06:57,776 --> 0:06:58,696
might be inappropriate

200
00:06:58,696 --> 0:06:59,126
elsewhere.

201
00:06:59,666 --> 0:07:02,066
But since we're here to get

202
00:06:59,666 --> 0:07:02,066
But since we're here to get

203
00:07:02,066 --> 0:07:05,106
control over details, let's say

204
00:07:05,106 --> 0:07:06,466
we have a specification that

205
00:07:06,466 --> 0:07:08,926
calls for exactly 10 points of

206
00:07:08,996 --> 0:07:10,236
padding on all sides.

207
00:07:11,746 --> 0:07:12,556
Okay you can write that

208
00:07:12,556 --> 0:07:13,156
explicitly.

209
00:07:14,626 --> 0:07:16,866
Now this example's a little more

210
00:07:16,866 --> 0:07:18,636
interesting than hello world.

211
00:07:19,376 --> 0:07:20,846
So let's see how the layout

212
00:07:20,876 --> 0:07:22,686
process works in this case.

213
00:07:23,536 --> 0:07:26,736
First, the root view proposes

214
00:07:27,016 --> 0:07:28,206
its entire size to the

215
00:07:28,206 --> 0:07:28,876
background view.

216
00:07:29,716 --> 0:07:31,856
And much like our toast view

217
00:07:31,856 --> 0:07:34,276
itself, the background view is

218
00:07:34,276 --> 0:07:36,236
layout neutral so it's just

219
00:07:36,236 --> 0:07:38,056
going to pass that size proposal

220
00:07:38,296 --> 0:07:41,136
along to the padding view.

221
00:07:42,696 --> 0:07:45,176
Now, the padding view knows it's

222
00:07:45,176 --> 0:07:47,306
going to add 10 points on a side

223
00:07:47,306 --> 0:07:50,806
to its child so it offers that

224
00:07:50,806 --> 0:07:52,576
much less to its child-- the

225
00:07:52,576 --> 0:07:56,656
text-- and the text takes the

226
00:07:56,656 --> 0:07:58,476
width it needs and returns that

227
00:07:58,476 --> 0:08:01,136
to the padding view which knows

228
00:07:58,476 --> 0:08:01,136
to the padding view which knows

229
00:08:01,136 --> 0:08:02,856
it should be bigger than its

230
00:08:02,856 --> 0:08:04,626
child by 10 points on each side

231
00:08:04,916 --> 0:08:06,296
and it situates the text

232
00:08:06,296 --> 0:08:08,186
appropriately in its coordinate

233
00:08:08,186 --> 0:08:08,586
space.

234
00:08:11,156 --> 0:08:13,086
Now, we said the background view

235
00:08:13,086 --> 0:08:14,616
was layout neutral so it's just

236
00:08:14,616 --> 0:08:15,676
going to report that size

237
00:08:15,676 --> 0:08:16,156
upwards.

238
00:08:16,556 --> 0:08:19,686
But before it does, it offers

239
00:08:19,686 --> 0:08:21,426
that size to its secondary

240
00:08:21,426 --> 0:08:24,436
child, the color.

241
00:08:24,606 --> 0:08:27,366
Now, colors are very compliant

242
00:08:27,516 --> 0:08:28,516
when it comes to layout.

243
00:08:29,166 --> 0:08:31,006
The accept the size offered to

244
00:08:31,536 --> 0:08:31,886
them.

245
00:08:31,886 --> 0:08:33,836
So the color of the size is just

246
00:08:33,836 --> 0:08:35,236
the same as that of the padding

247
00:08:35,236 --> 0:08:35,426
view.

248
00:08:36,635 --> 0:08:38,726
Finally, the background reports

249
00:08:38,726 --> 0:08:41,046
its size to the root view and

250
00:08:41,796 --> 0:08:44,116
the root view centers it as

251
00:08:44,116 --> 0:08:44,526
before.

252
00:08:44,526 --> 0:08:46,296
And that's the whole process.

253
00:08:47,746 --> 0:08:48,776
Ready for another example?

254
00:08:49,296 --> 0:08:51,736
This one's even simpler but it's

255
00:08:51,736 --> 0:08:52,116
important.

256
00:08:53,746 --> 0:08:56,456
So in this case the view's body

257
00:08:56,536 --> 0:08:59,496
is just a fixed size 20 by 20

258
00:08:59,496 --> 0:08:59,886
image.

259
00:09:01,286 --> 0:09:03,936
In SwiftUI, unless you mark an

260
00:09:03,936 --> 0:09:06,086
image as resizable, either in

261
00:09:06,086 --> 0:09:08,256
the asset catalog or in code,

262
00:09:08,776 --> 0:09:09,706
it's fixed sized.

263
00:09:10,936 --> 0:09:13,236
Now, I'd like our view, our

264
00:09:13,236 --> 0:09:14,566
whole view to be about half

265
00:09:14,566 --> 0:09:17,126
again as big so let's add a 30

266
00:09:17,126 --> 0:09:20,166
by 30 frame modifier like this.

267
00:09:21,496 --> 0:09:24,986
Now, you might have noticed that

268
00:09:25,076 --> 0:09:27,946
the image, though undeniably

269
00:09:27,946 --> 0:09:29,836
appetizing, has not changed its

270
00:09:29,836 --> 0:09:30,226
size.

271
00:09:30,836 --> 0:09:33,866
But that shouldn't be surprising

272
00:09:33,866 --> 0:09:34,536
should it?

273
00:09:34,536 --> 0:09:37,116
We said it was fixed sized.

274
00:09:37,286 --> 0:09:39,946
Around it you'll find a 30 by 30

275
00:09:39,946 --> 0:09:42,616
frame and that's the size of the

276
00:09:42,616 --> 0:09:43,686
body of our view.

277
00:09:44,016 --> 0:09:45,666
So the view we've defined is in

278
00:09:45,666 --> 0:09:48,016
fact 50 percent bigger than it

279
00:09:48,016 --> 0:09:49,016
was before we added the

280
00:09:49,016 --> 0:09:49,576
modifier.

281
00:09:51,416 --> 0:09:54,326
So, is it a contradiction that

282
00:09:54,326 --> 0:09:55,826
the size of the frame doesn't

283
00:09:55,826 --> 0:09:59,016
match the size of our image?

284
00:09:59,146 --> 0:09:59,976
Actually, no.

285
00:10:00,956 --> 0:10:02,676
This is the layout system doing

286
00:10:02,676 --> 0:10:03,586
what it's supposed to do.

287
00:10:04,796 --> 0:10:06,526
See it's important to recognize

288
00:10:06,876 --> 0:10:08,926
that the frame is not a

289
00:10:08,926 --> 0:10:11,746
constraint in SwiftUI, it's just

290
00:10:11,746 --> 0:10:13,486
a view which you can think of

291
00:10:13,796 --> 0:10:14,906
like a picture frame.

292
00:10:16,436 --> 0:10:18,816
It proposes fixed dimensions for

293
00:10:18,816 --> 0:10:21,436
its child, but like every other

294
00:10:21,436 --> 0:10:23,326
view, the child ultimately

295
00:10:23,356 --> 0:10:24,776
chooses its own size.

296
00:10:26,116 --> 0:10:29,606
So in that sense, SwiftUI layout

297
00:10:29,706 --> 0:10:31,526
uses a lighter touch than you

298
00:10:31,526 --> 0:10:32,216
might be used to.

299
00:10:33,596 --> 0:10:35,616
The payoff, though, is that

300
00:10:35,616 --> 0:10:37,716
there are no underconstrained or

301
00:10:37,716 --> 0:10:39,046
overconstrained systems in

302
00:10:39,046 --> 0:10:41,606
SwiftUI which means everything

303
00:10:41,606 --> 0:10:42,596
you can express has a

304
00:10:42,596 --> 0:10:43,696
well-defined effect.

305
00:10:45,066 --> 0:10:46,976
So there's no such thing as an

306
00:10:46,976 --> 0:10:49,116
incorrect layout unless you

307
00:10:49,116 --> 0:10:49,956
don't like the result you're

308
00:10:49,956 --> 0:10:50,256
getting.

309
00:10:52,486 --> 0:10:54,066
Okay, now that we have the

310
00:10:54,066 --> 0:10:56,346
basics under our belts, let's

311
00:10:56,346 --> 0:10:58,126
discuss the power tools-- the

312
00:10:58,126 --> 0:10:58,856
stacks.

313
00:11:00,496 --> 0:11:04,306
Now, HStack and VStack arrange

314
00:11:04,346 --> 0:11:06,566
their children in a row or

315
00:11:06,566 --> 0:11:07,616
column respectively.

316
00:11:08,626 --> 0:11:10,306
I threw this list cell together

317
00:11:10,626 --> 0:11:12,446
with four stacks and just a few

318
00:11:12,446 --> 0:11:13,056
lines of code.

319
00:11:13,676 --> 0:11:15,586
And here's the code for that

320
00:11:15,586 --> 0:11:15,946
layout.

321
00:11:17,096 --> 0:11:18,566
At the top level you got an

322
00:11:18,566 --> 0:11:22,376
HStack with two children, the

323
00:11:22,376 --> 0:11:24,886
first of which is a VStack

324
00:11:24,886 --> 0:11:26,066
containing the star rating.

325
00:11:26,696 --> 0:11:30,676
And the other child is also a

326
00:11:30,676 --> 0:11:34,066
VStack that leading aligns its

327
00:11:34,066 --> 0:11:37,316
two children, the first of which

328
00:11:37,876 --> 0:11:40,676
is yet another HStack containing

329
00:11:40,826 --> 0:11:43,756
the title, a stretchy spacer,

330
00:11:44,956 --> 0:11:46,816
and our avocado image.

331
00:11:47,876 --> 0:11:49,496
So there you go.

332
00:11:50,286 --> 0:11:51,196
Four stacks.

333
00:11:51,896 --> 0:11:53,786
Let's put it back together.

334
00:11:54,766 --> 0:11:54,956
Now--

335
00:11:55,516 --> 0:12:01,056
[ Applause ]

336
00:11:55,516 --> 0:12:01,056
[ Applause ]

337
00:12:01,556 --> 0:12:02,926
So I want you to notice that

338
00:12:02,926 --> 0:12:05,066
SwiftUI didn't slam all of the

339
00:12:05,066 --> 0:12:06,526
stacks children against each

340
00:12:06,526 --> 0:12:06,776
other.

341
00:12:07,346 --> 0:12:09,006
It left some space between these

342
00:12:09,006 --> 0:12:11,806
two because adaptive spacing is

343
00:12:11,806 --> 0:12:12,296
in effect.

344
00:12:13,826 --> 0:12:15,336
You'll also find that the

345
00:12:15,336 --> 0:12:18,176
baseline to baseline spacing for

346
00:12:18,176 --> 0:12:20,486
adjacent text exactly matches

347
00:12:20,556 --> 0:12:22,146
Apple's human interface

348
00:12:22,146 --> 0:12:25,446
guidelines, as does the baseline

349
00:12:25,446 --> 0:12:26,356
to edge spacing.

350
00:12:26,956 --> 0:12:28,316
Because we've encoded these

351
00:12:28,396 --> 0:12:30,336
rules into SwiftUI's layout

352
00:12:30,336 --> 0:12:33,526
system, the general principle

353
00:12:33,526 --> 0:12:35,866
here is that the simplest,

354
00:12:36,376 --> 0:12:38,756
easiest code is also well on its

355
00:12:38,756 --> 0:12:40,476
way to producing a beautiful

356
00:12:40,476 --> 0:12:40,806
result.

357
00:12:42,506 --> 0:12:45,316
But, if you need control, as

358
00:12:45,316 --> 0:12:48,906
always, SwiftUI has your back

359
00:12:49,166 --> 0:12:50,806
with knobs you can turn to get

360
00:12:50,806 --> 0:12:51,976
exactly the result you want.

361
00:12:54,696 --> 0:12:56,826
Oh, I almost forgot another

362
00:12:56,946 --> 0:12:58,846
thing that SwiftUI handles for

363
00:12:58,846 --> 0:12:59,056
you.

364
00:12:59,776 --> 0:13:02,716
If your app is localized for a

365
00:12:59,776 --> 0:13:02,716
If your app is localized for a

366
00:13:02,716 --> 0:13:04,166
right to left writing system

367
00:13:04,166 --> 0:13:06,076
like Arabic and you change the

368
00:13:06,076 --> 0:13:08,926
system language, well SwiftUI

369
00:13:08,926 --> 0:13:10,046
flips your horizontal

370
00:13:10,046 --> 0:13:12,106
coordinates for you so you don't

371
00:13:12,106 --> 0:13:12,976
have to recode the layout.

372
00:13:13,516 --> 0:13:19,016
[ Applause ]

373
00:13:19,516 --> 0:13:21,676
So if you've been wondering why

374
00:13:21,676 --> 0:13:23,006
we talk about leading and

375
00:13:23,006 --> 0:13:24,836
trailing alignments instead of

376
00:13:24,926 --> 0:13:26,676
left and right, now you know.

377
00:13:27,336 --> 0:13:28,626
It's so that your layouts are

378
00:13:28,696 --> 0:13:29,846
automatically ready for

379
00:13:29,846 --> 0:13:30,976
internationalization.

380
00:13:32,746 --> 0:13:35,246
Okay, so let's get an inside

381
00:13:35,246 --> 0:13:36,356
look at stack layouts.

382
00:13:37,616 --> 0:13:40,156
Now, most views we've looked at

383
00:13:40,156 --> 0:13:42,406
so far have effectively been a

384
00:13:42,406 --> 0:13:44,096
linear chain of children.

385
00:13:44,686 --> 0:13:46,276
But stacks are interesting

386
00:13:46,696 --> 0:13:48,336
because the children have to

387
00:13:48,576 --> 0:13:50,446
compete for space on an equal

388
00:13:50,446 --> 0:13:50,786
footing.

389
00:13:52,186 --> 0:13:55,876
In this stack we've said the

390
00:13:55,876 --> 0:13:58,076
text shouldn't wrap to more than

391
00:13:58,076 --> 0:14:02,236
one line, which means that if

392
00:13:58,076 --> 0:14:02,236
one line, which means that if

393
00:14:02,236 --> 0:14:04,546
the stack is asked to fit in

394
00:14:04,546 --> 0:14:08,436
less space, well the text will

395
00:14:08,436 --> 0:14:09,896
just be truncated to fit.

396
00:14:11,186 --> 0:14:12,926
But let's start with the case

397
00:14:13,006 --> 0:14:14,736
where there's plenty of space

398
00:14:14,736 --> 0:14:16,776
offered by the parent, okay?

399
00:14:18,166 --> 0:14:20,296
So first the stack figures out

400
00:14:20,346 --> 0:14:21,566
the internal spacing

401
00:14:21,566 --> 0:14:24,856
requirements and subtracts that

402
00:14:24,856 --> 0:14:27,706
from the proposed width to give

403
00:14:27,706 --> 0:14:29,536
us an amount of unallocated

404
00:14:29,606 --> 0:14:30,086
space.

405
00:14:30,426 --> 0:14:32,656
And now we have three children

406
00:14:32,926 --> 0:14:34,296
whose size we don't know.

407
00:14:36,206 --> 0:14:38,536
So we divide the remaining space

408
00:14:38,856 --> 0:14:42,576
in three equal parts and then we

409
00:14:42,576 --> 0:14:44,546
propose one of those as the size

410
00:14:44,546 --> 0:14:45,876
for the least flexible child.

411
00:14:47,206 --> 0:14:49,496
Now, we said the image was fixed

412
00:14:49,496 --> 0:14:50,216
sized right?

413
00:14:50,586 --> 0:14:52,896
So that's the least flexible.

414
00:14:54,586 --> 0:14:57,906
So this-- the image takes this

415
00:14:57,906 --> 0:15:00,596
much, and whatever size it

416
00:14:57,906 --> 0:15:00,596
much, and whatever size it

417
00:15:00,746 --> 0:15:03,986
claimed, we deduct that from the

418
00:15:03,986 --> 0:15:05,216
unallocated space.

419
00:15:05,736 --> 0:15:07,876
And repeat.

420
00:15:08,716 --> 0:15:10,626
Okay? We now have two unsized

421
00:15:10,626 --> 0:15:13,186
children so we divide the

422
00:15:13,186 --> 0:15:14,906
remaining proposed size in two

423
00:15:15,146 --> 0:15:17,526
and offer one half to the least

424
00:15:17,526 --> 0:15:18,806
flexible child that doesn't have

425
00:15:18,806 --> 0:15:20,876
a size which is delicious.

426
00:15:22,486 --> 0:15:24,336
So delicious claims this much,

427
00:15:24,686 --> 0:15:26,546
which you can see is less than

428
00:15:26,546 --> 0:15:27,036
the offer.

429
00:15:27,716 --> 0:15:28,766
Remember that.

430
00:15:29,146 --> 0:15:32,926
And again, that is deducted from

431
00:15:33,086 --> 0:15:36,116
the unallocated space and that

432
00:15:36,116 --> 0:15:38,636
leave this much room for avocado

433
00:15:38,636 --> 0:15:40,516
toast which, as you can see, is

434
00:15:40,566 --> 0:15:40,826
plenty.

435
00:15:42,586 --> 0:15:44,976
Okay, last steps.

436
00:15:46,396 --> 0:15:48,006
Now that all of the children

437
00:15:48,006 --> 0:15:51,706
have sizes, the stack lines them

438
00:15:51,706 --> 0:15:53,276
up with the spacing from

439
00:15:53,276 --> 0:15:53,686
earlier.

440
00:15:54,936 --> 0:15:56,146
And since the code didn't

441
00:15:56,146 --> 0:15:58,246
specify an alignment, the

442
00:15:58,246 --> 0:15:59,676
default of centering is in

443
00:15:59,676 --> 0:16:00,016
effect.

444
00:15:59,676 --> 0:16:00,016
effect.

445
00:16:00,846 --> 0:16:02,956
So the stack uses center

446
00:16:02,956 --> 0:16:04,466
alignment to arrange the centers

447
00:16:04,466 --> 0:16:05,266
of all of the children

448
00:16:05,266 --> 0:16:05,706
vertically.

449
00:16:07,416 --> 0:16:09,866
Finally, the stack chooses its

450
00:16:09,866 --> 0:16:11,986
own size so that it exactly

451
00:16:11,986 --> 0:16:14,976
encloses the children.

452
00:16:15,086 --> 0:16:17,406
Now, if you think about it, you

453
00:16:17,406 --> 0:16:19,316
might be able to visualize why

454
00:16:19,316 --> 0:16:20,956
the bounds of text don't stretch

455
00:16:20,956 --> 0:16:22,216
beyond their displayed width.

456
00:16:23,586 --> 0:16:26,146
See if delicious had accepted

457
00:16:26,266 --> 0:16:27,956
all of its offer, that would

458
00:16:27,956 --> 0:16:29,786
leave less for avocado toast

459
00:16:30,096 --> 0:16:31,126
which would have forced it to

460
00:16:31,126 --> 0:16:33,416
truncate despite the fact that

461
00:16:33,416 --> 0:16:35,486
everything could have fit, there

462
00:16:35,876 --> 0:16:38,586
was plenty of room.

463
00:16:38,796 --> 0:16:40,436
Actually, of the two pieces of

464
00:16:40,476 --> 0:16:42,706
text here, avocado toast is

465
00:16:42,786 --> 0:16:44,336
clearly the more important,

466
00:16:44,476 --> 0:16:44,736
right?

467
00:16:45,216 --> 0:16:45,976
It's the subject.

468
00:16:46,936 --> 0:16:48,736
Delicious is just an adjective.

469
00:16:48,736 --> 0:16:49,696
It'd kind of expendable.

470
00:16:50,546 --> 0:16:52,986
So this wouldn't be a good

471
00:16:52,986 --> 0:16:53,366
result.

472
00:16:54,496 --> 0:16:56,696
But, now that I think about it,

473
00:16:57,196 --> 0:16:59,286
that means the amount of space-

474
00:16:59,346 --> 0:17:01,226
when the amount of space offered

475
00:16:59,346 --> 0:17:01,226
when the amount of space offered

476
00:17:01,226 --> 0:17:03,706
is less than the ideal, the

477
00:17:03,706 --> 0:17:05,226
truncation behavior we saw

478
00:17:05,226 --> 0:17:07,006
earlier probably isn't quite

479
00:17:07,006 --> 0:17:07,935
what we want either.

480
00:17:09,546 --> 0:17:11,356
With a narrow offer like this,

481
00:17:11,356 --> 0:17:12,435
we'd rather keep all of the

482
00:17:12,435 --> 0:17:15,665
subject intact and let the

483
00:17:15,665 --> 0:17:16,766
adjective truncate.

484
00:17:17,336 --> 0:17:19,976
Okay, to achieve that we have

485
00:17:19,976 --> 0:17:20,915
another power tool.

486
00:17:21,496 --> 0:17:24,185
We can raise the layout priority

487
00:17:24,185 --> 0:17:26,016
of avocado toast from the

488
00:17:26,016 --> 0:17:27,976
default of zero, to one.

489
00:17:28,516 --> 0:17:34,366
[ Applause ]

490
00:17:34,866 --> 0:17:36,626
So when children in a stack have

491
00:17:36,706 --> 0:17:38,706
different layout priorities, the

492
00:17:38,706 --> 0:17:40,316
stack takes the unallocated

493
00:17:40,316 --> 0:17:43,886
space, it sets aside the minimum

494
00:17:43,886 --> 0:17:45,486
widths of all of the lower

495
00:17:45,516 --> 0:17:47,486
priority children, and then it

496
00:17:47,486 --> 0:17:49,856
divides the rest among children

497
00:17:49,856 --> 0:17:51,276
with the highest priority value.

498
00:17:52,986 --> 0:17:54,216
So in this case there's just one

499
00:17:54,216 --> 0:17:55,686
of those, it's avocado toast.

500
00:17:56,286 --> 0:17:59,786
And so that'll be offered all of

501
00:17:59,836 --> 0:18:01,966
the available space minus the

502
00:17:59,836 --> 0:18:01,966
the available space minus the

503
00:18:01,966 --> 0:18:05,216
widths of the image and the

504
00:18:05,336 --> 0:18:06,886
three dots that remain after

505
00:18:06,886 --> 0:18:08,706
shrinking delicious to its

506
00:18:08,706 --> 0:18:08,976
minimum.

507
00:18:11,086 --> 0:18:13,886
Okay, after sizing all of the

508
00:18:13,886 --> 0:18:15,186
children with the highest layout

509
00:18:15,186 --> 0:18:17,196
priority, the stack moves on to

510
00:18:17,196 --> 0:18:19,716
divide the remaining space among

511
00:18:19,716 --> 0:18:21,266
children with the next highest

512
00:18:21,266 --> 0:18:23,756
layout priority, and so on.

513
00:18:24,686 --> 0:18:27,256
Okay, there's one last power

514
00:18:27,256 --> 0:18:29,006
tool I want to show you.

515
00:18:30,046 --> 0:18:30,606
Alignments.

516
00:18:31,836 --> 0:18:34,036
Now, I know you won't be

517
00:18:34,036 --> 0:18:36,026
surprised that we can bottom

518
00:18:36,026 --> 0:18:39,846
align this stack.

519
00:18:40,056 --> 0:18:41,186
Looks pretty good that way

520
00:18:41,186 --> 0:18:41,446
right?

521
00:18:43,016 --> 0:18:45,956
But, consider what happens when

522
00:18:45,956 --> 0:18:48,746
we change the font of delicious

523
00:18:48,746 --> 0:18:49,716
to something smaller.

524
00:18:50,266 --> 0:18:54,446
Well, it looks okay to me, but

525
00:18:54,446 --> 0:18:54,976
what do I know?

526
00:18:55,796 --> 0:18:56,906
I'm just an app developer.

527
00:18:57,766 --> 0:18:59,726
I'm pretty sure Crusty, my UI

528
00:18:59,726 --> 0:19:01,046
designer is going to have a

529
00:18:59,726 --> 0:19:01,046
designer is going to have a

530
00:19:01,046 --> 0:19:01,976
problem with it though.

531
00:19:02,516 --> 0:19:06,546
[ Applause ]

532
00:19:07,046 --> 0:19:08,456
Yeah he's going to zoom all the

533
00:19:08,456 --> 0:19:09,796
way in and start picking at the

534
00:19:09,796 --> 0:19:10,956
details like this.

535
00:19:12,276 --> 0:19:14,606
Bucky, he'll say, first you got

536
00:19:14,606 --> 0:19:16,136
the baseline of delicious which

537
00:19:16,136 --> 0:19:18,096
is here and then you got the

538
00:19:18,096 --> 0:19:20,346
bottom of the image down here.

539
00:19:20,566 --> 0:19:22,726
And then there's the baseline of

540
00:19:22,726 --> 0:19:25,546
avocado toast way up here, and

541
00:19:25,546 --> 0:19:27,076
none of them line up.

542
00:19:27,416 --> 0:19:28,216
What have I taught you?

543
00:19:29,516 --> 0:19:33,096
[Laughter]

544
00:19:33,596 --> 0:19:35,336
Fortunately we have an answer

545
00:19:35,336 --> 0:19:36,446
for that in SwiftUI.

546
00:19:37,906 --> 0:19:39,716
The first and last text-based

547
00:19:39,716 --> 0:19:41,616
line positions are alignments

548
00:19:41,646 --> 0:19:45,406
just like top and bottom.

549
00:19:45,536 --> 0:19:47,536
So if we align the text on its

550
00:19:47,616 --> 0:19:51,006
baseline, it solves the problem

551
00:19:51,566 --> 0:19:51,736
neatly.

552
00:19:52,516 --> 0:19:56,736
[ Applause ]

553
00:19:57,236 --> 0:19:58,766
But what about the image?

554
00:19:59,516 --> 0:20:01,346
See the image has no text in it

555
00:19:59,516 --> 0:20:01,346
See the image has no text in it

556
00:20:01,826 --> 0:20:03,516
but every alignment has a

557
00:20:03,516 --> 0:20:05,696
default value and the default

558
00:20:05,746 --> 0:20:08,036
value for last text baseline is

559
00:20:08,036 --> 0:20:09,916
just the bottom edge of the

560
00:20:09,916 --> 0:20:11,986
view, so that gets me exactly

561
00:20:11,986 --> 0:20:13,196
what I'm thinking Crusty will

562
00:20:13,196 --> 0:20:13,746
ask me for.

563
00:20:15,566 --> 0:20:19,716
Oh. Oh. Looking again, I'm

564
00:20:19,716 --> 0:20:21,806
pretty sure-- I got a bad

565
00:20:21,806 --> 0:20:22,856
feeling about this-- I'm pretty

566
00:20:22,856 --> 0:20:23,896
sure he's going to tell me

567
00:20:24,176 --> 0:20:26,136
there's a visual baseline that's

568
00:20:26,136 --> 0:20:29,076
up here, 87.4% of the way to the

569
00:20:29,076 --> 0:20:29,376
bottom.

570
00:20:30,016 --> 0:20:31,366
[Laughter]

571
00:20:31,366 --> 0:20:33,346
We can handle that by telling

572
00:20:33,346 --> 0:20:36,796
SwiftUI how to compute a last

573
00:20:36,796 --> 0:20:40,196
text baseline for the image in

574
00:20:40,196 --> 0:20:41,766
terms of its other alignments.

575
00:20:41,906 --> 0:20:42,936
Pretty cool, right?

576
00:20:43,516 --> 0:20:48,306
[ Applause ]

577
00:20:48,806 --> 0:20:49,906
But we're not done with the

578
00:20:49,906 --> 0:20:51,456
power of alignments yet.

579
00:20:52,106 --> 0:20:53,336
Let's go back to our nested

580
00:20:53,336 --> 0:20:54,216
stack example.

581
00:20:55,766 --> 0:20:57,806
Suppose we wanted to align the

582
00:20:57,806 --> 0:21:00,136
center of these stars and the

583
00:20:57,806 --> 0:21:00,136
center of these stars and the

584
00:21:00,136 --> 0:21:01,566
title, like this.

585
00:21:05,416 --> 0:21:07,506
Now remember the text in

586
00:21:07,506 --> 0:21:09,786
question is nested in two

587
00:21:09,926 --> 0:21:11,936
different branches of the view

588
00:21:11,936 --> 0:21:12,496
hierarchy.

589
00:21:14,516 --> 0:21:17,266
So, well center aligning the

590
00:21:17,666 --> 0:21:19,046
children of that top level

591
00:21:19,046 --> 0:21:20,166
HStack isn't going to cut it

592
00:21:20,686 --> 0:21:23,396
because that's the default,

593
00:21:23,806 --> 0:21:24,046
right?

594
00:21:24,046 --> 0:21:25,716
And so we're already there.

595
00:21:25,716 --> 0:21:26,736
You can see those children are

596
00:21:26,736 --> 0:21:27,506
already aligned.

597
00:21:28,236 --> 0:21:30,706
Now what we need is an alignment

598
00:21:31,216 --> 0:21:33,626
other than center that marks the

599
00:21:33,626 --> 0:21:36,396
middle of these stars and of the

600
00:21:36,396 --> 0:21:36,776
title.

601
00:21:38,336 --> 0:21:39,806
We need to define our own

602
00:21:39,806 --> 0:21:42,506
alignment which is actually this

603
00:21:42,506 --> 0:21:42,836
easy.

604
00:21:43,526 --> 0:21:45,466
It's just six lines that we put

605
00:21:45,466 --> 0:21:47,086
in an extension on vertical

606
00:21:47,086 --> 0:21:47,706
alignment.

607
00:21:49,606 --> 0:21:52,256
So first we define an enum

608
00:21:52,896 --> 0:21:55,366
conforming to alignment ID which

609
00:21:55,366 --> 0:21:58,076
has one requirement, tell

610
00:21:58,076 --> 0:22:00,076
SwiftUI how to compute the

611
00:21:58,076 --> 0:22:00,076
SwiftUI how to compute the

612
00:22:00,076 --> 0:22:00,846
default value.

613
00:22:03,746 --> 0:22:06,046
Now, it doesn't really matter

614
00:22:06,046 --> 0:22:07,976
what we choose here in this case

615
00:22:08,046 --> 0:22:09,936
because defaults aren't going to

616
00:22:09,936 --> 0:22:10,976
project out of those inner

617
00:22:10,976 --> 0:22:11,576
stacks.

618
00:22:12,126 --> 0:22:14,436
But I defined this default to be

619
00:22:14,496 --> 0:22:16,116
bottom just so that you could

620
00:22:16,116 --> 0:22:18,836
see that it's just like defining

621
00:22:18,926 --> 0:22:23,176
an alignment guide modifier.

622
00:22:24,016 --> 0:22:26,356
And last of all, we define a

623
00:22:26,356 --> 0:22:28,196
static instance of vertical

624
00:22:28,196 --> 0:22:31,096
alignment that takes the enum

625
00:22:31,096 --> 0:22:32,626
type as its argument.

626
00:22:35,156 --> 0:22:37,426
And now we can use it to align

627
00:22:37,576 --> 0:22:41,546
the stack, explicitly setting it

628
00:22:41,676 --> 0:22:43,256
to the center of the stars and

629
00:22:43,766 --> 0:22:45,496
of the title.

630
00:22:48,776 --> 0:22:50,266
Now the explicit alignment

631
00:22:50,266 --> 0:22:52,366
values we've set, they project

632
00:22:52,366 --> 0:22:53,726
all the way out through two

633
00:22:53,726 --> 0:22:56,196
layers of nested stack allowing

634
00:22:56,386 --> 0:22:58,056
the outer HStack to align those

635
00:22:58,056 --> 0:22:58,756
inner parts.

636
00:23:00,016 --> 0:23:00,976
So that's custom alignments.

637
00:23:01,516 --> 0:23:07,296
[ Applause ]

638
00:23:07,796 --> 0:23:09,626
A power tool that will help you

639
00:23:09,626 --> 0:23:11,066
satisfy even the most

640
00:23:11,116 --> 0:23:12,466
persnickety UI designer.

641
00:23:13,496 --> 0:23:15,506
Now, I'd like to invite John

642
00:23:15,506 --> 0:23:17,226
Harper to the stage to tell you

643
00:23:17,446 --> 0:23:18,826
about graphical effects in

644
00:23:18,826 --> 0:23:19,286
SwiftUI.

645
00:23:19,286 --> 0:23:19,536
John.

646
00:23:20,516 --> 0:23:25,556
[ Applause ]

647
00:23:26,056 --> 0:23:27,536
&gt;&gt; Thanks Dave.

648
00:23:27,596 --> 0:23:28,856
So yeah I'm going to talk about,

649
00:23:28,856 --> 0:23:30,566
describe some of the graphics

650
00:23:30,566 --> 0:23:32,196
features of SwiftUI and how you

651
00:23:32,196 --> 0:23:33,156
can use them to create

652
00:23:33,156 --> 0:23:35,786
interactive controls in your

653
00:23:35,786 --> 0:23:36,306
applications.

654
00:23:36,866 --> 0:23:39,396
So here's an example of the kind

655
00:23:39,396 --> 0:23:40,646
of thing we'd like to create

656
00:23:40,646 --> 0:23:41,046
potentially.

657
00:23:41,046 --> 0:23:42,616
You know you've seen this before

658
00:23:42,616 --> 0:23:45,126
but, you know, it's several

659
00:23:45,126 --> 0:23:46,346
normal controls but then in the

660
00:23:46,346 --> 0:23:48,526
center there's this big kind of

661
00:23:48,526 --> 0:23:50,386
graphical ring with a gradient

662
00:23:50,386 --> 0:23:51,656
around it and at the bottom

663
00:23:51,656 --> 0:23:52,366
there's a bar chart.

664
00:23:52,486 --> 0:23:53,836
And so you know if you wanted to

665
00:23:53,836 --> 0:23:56,156
do this in your apps you'd have

666
00:23:56,186 --> 0:23:57,506
to dive into the graphics system

667
00:23:57,506 --> 0:23:58,036
to some degree.

668
00:23:58,036 --> 0:23:59,556
You know core animation or core

669
00:23:59,556 --> 0:24:00,096
graphics.

670
00:23:59,556 --> 0:24:00,096
graphics.

671
00:24:00,556 --> 0:24:03,246
And so we think we've got a good

672
00:24:03,246 --> 0:24:04,356
way to do things like this in

673
00:24:04,866 --> 0:24:07,876
SwiftUI and so we're going to

674
00:24:07,876 --> 0:24:09,176
look at a little example.

675
00:24:09,366 --> 0:24:10,246
But before we can do anything

676
00:24:10,246 --> 0:24:11,636
complex we need to cover the

677
00:24:11,636 --> 0:24:12,186
basics.

678
00:24:12,576 --> 0:24:14,016
So if we wanted to draw a red

679
00:24:14,016 --> 0:24:15,476
circle, how would we do that?

680
00:24:15,476 --> 0:24:16,776
Well we'd first of all we'd

681
00:24:16,776 --> 0:24:17,786
create a custom view type

682
00:24:18,066 --> 0:24:19,176
because you know everything is a

683
00:24:19,176 --> 0:24:19,486
view.

684
00:24:20,296 --> 0:24:21,646
And then we'd put something like

685
00:24:21,646 --> 0:24:22,106
this in there.

686
00:24:22,106 --> 0:24:23,906
And here we're saying if you

687
00:24:23,906 --> 0:24:25,696
give me a shape and the color we

688
00:24:25,696 --> 0:24:27,206
can fill it with-- fill those

689
00:24:27,336 --> 0:24:28,886
two things together and get, you

690
00:24:28,916 --> 0:24:29,796
know, a red circle on the

691
00:24:29,796 --> 0:24:30,146
screen.

692
00:24:30,706 --> 0:24:32,386
But there's something really

693
00:24:32,386 --> 0:24:33,566
interesting here which is that

694
00:24:33,606 --> 0:24:34,856
we didn't give it a positional

695
00:24:34,856 --> 0:24:37,206
size and that's because we're

696
00:24:37,206 --> 0:24:38,426
relying on the layout system,

697
00:24:38,426 --> 0:24:39,626
all that stuff Dave described,

698
00:24:39,946 --> 0:24:41,276
to kind of position our views

699
00:24:41,276 --> 0:24:42,476
for us even though we're in this

700
00:24:42,526 --> 0:24:43,816
drawing model.

701
00:24:44,506 --> 0:24:47,896
And so, you know, shapes will

702
00:24:47,896 --> 0:24:49,146
just kind of react to the layout

703
00:24:49,146 --> 0:24:51,226
system and produce views.

704
00:24:51,226 --> 0:24:52,436
And in fact, you know now that

705
00:24:52,436 --> 0:24:54,096
our draw views, if you think of

706
00:24:54,096 --> 0:24:55,006
them that way are really just

707
00:24:55,036 --> 0:24:56,646
views, then that really means

708
00:24:56,676 --> 0:24:57,716
that everything in SwiftUI

709
00:24:57,716 --> 0:24:59,556
applies to drawing because

710
00:24:59,556 --> 0:25:01,016
everything in SwiftUI is views.

711
00:24:59,556 --> 0:25:01,016
everything in SwiftUI is views.

712
00:25:01,366 --> 0:25:02,546
And so all the modifiers you've

713
00:25:02,546 --> 0:25:04,296
seen about layout and animation,

714
00:25:04,796 --> 0:25:06,406
filter effects-- you know, just

715
00:25:06,406 --> 0:25:07,846
everything-- it all applies to

716
00:25:07,846 --> 0:25:08,706
drawing in the same way it

717
00:25:08,706 --> 0:25:09,606
applies to views.

718
00:25:10,006 --> 0:25:11,196
But similarly we've added a lot

719
00:25:11,196 --> 0:25:13,886
of kind of new custom modifiers

720
00:25:14,156 --> 0:25:15,086
purely for graphics.

721
00:25:15,296 --> 0:25:16,766
Things like blurs and shadows.

722
00:25:17,536 --> 0:25:18,776
But because drawing is just

723
00:25:18,776 --> 0:25:21,026
views, they all apply to regular

724
00:25:21,026 --> 0:25:22,196
views as well as the graphics

725
00:25:22,196 --> 0:25:22,526
views.

726
00:25:23,286 --> 0:25:24,816
And so we think this unification

727
00:25:24,816 --> 0:25:26,486
of kind of normal control like

728
00:25:26,486 --> 0:25:27,856
views and graphics is going to

729
00:25:27,856 --> 0:25:29,566
be incredibly powerful as we go

730
00:25:29,566 --> 0:25:30,006
forwards.

731
00:25:30,596 --> 0:25:32,526
Okay but let's look at this a

732
00:25:32,526 --> 0:25:33,686
little more.

733
00:25:34,296 --> 0:25:35,916
So the basic pattern is that we

734
00:25:35,916 --> 0:25:38,426
have a shape and a style-- kind

735
00:25:38,476 --> 0:25:40,126
of a color or something-- and

736
00:25:40,126 --> 0:25:41,076
the combination of those two

737
00:25:41,076 --> 0:25:42,216
things produces a view.

738
00:25:42,976 --> 0:25:44,176
As we have a few shapes here and

739
00:25:44,286 --> 0:25:47,536
as we saw I can fill with red

740
00:25:47,536 --> 0:25:48,426
and get a red circle.

741
00:25:49,426 --> 0:25:50,316
But also we could use a

742
00:25:50,316 --> 0:25:51,936
different operation and say a

743
00:25:51,936 --> 0:25:52,686
different shape-- you know a

744
00:25:52,686 --> 0:25:54,606
capsule-- and say stroke it with

745
00:25:54,606 --> 0:25:54,906
red.

746
00:25:55,586 --> 0:25:56,776
And in that case we won't get a

747
00:25:56,776 --> 0:25:58,186
filled shape, we'll get a filled

748
00:25:58,186 --> 0:25:59,036
outline of the shape.

749
00:25:59,576 --> 0:26:02,226
And that's often what we want,

750
00:25:59,576 --> 0:26:02,226
And that's often what we want,

751
00:26:02,336 --> 0:26:03,776
but you know sometimes we find

752
00:26:03,776 --> 0:26:04,756
we might want a slightly

753
00:26:04,756 --> 0:26:06,526
different kind of stroke, so we

754
00:26:06,526 --> 0:26:08,086
could also say stroke the border

755
00:26:08,086 --> 0:26:09,316
of the shape rather than the

756
00:26:09,316 --> 0:26:10,236
kind of on the shape.

757
00:26:10,306 --> 0:26:11,676
And that's just a variant.

758
00:26:11,676 --> 0:26:14,266
And this is also showing that,

759
00:26:14,266 --> 0:26:15,566
you know, all of these stroke

760
00:26:15,566 --> 0:26:17,156
operations all can either just

761
00:26:17,156 --> 0:26:18,076
take a line width as in the

762
00:26:18,076 --> 0:26:20,836
first example, or effectively

763
00:26:20,836 --> 0:26:21,706
all of the standard stroking

764
00:26:21,706 --> 0:26:23,286
parameters like dashes and end

765
00:26:23,286 --> 0:26:24,636
caps and the line joints, that

766
00:26:25,016 --> 0:26:25,856
you've probably seen in other

767
00:26:25,856 --> 0:26:26,766
graphs APIs.

768
00:26:28,556 --> 0:26:29,736
Okay so we've seen the shapes

769
00:26:29,736 --> 0:26:30,926
and we've seen filling them.

770
00:26:31,626 --> 0:26:32,586
But to this point we've only

771
00:26:32,586 --> 0:26:33,396
been using colors.

772
00:26:34,156 --> 0:26:34,876
But there are actually other

773
00:26:34,876 --> 0:26:36,556
things we can use to fill shapes

774
00:26:36,556 --> 0:26:36,756
with.

775
00:26:37,286 --> 0:26:37,976
You know we can use tiled images

776
00:26:37,976 --> 0:26:40,066
images and we can use various

777
00:26:40,066 --> 0:26:41,766
kinds of gradients to kind of

778
00:26:42,136 --> 0:26:43,626
fill the shape with.

779
00:26:44,636 --> 0:26:46,236
So here's an example of using a

780
00:26:46,236 --> 0:26:48,686
gradient and all of the gradient

781
00:26:48,686 --> 0:26:50,616
styles all use this base kind of

782
00:26:50,886 --> 0:26:52,886
type which is just providing the

783
00:26:52,886 --> 0:26:53,966
one dimensional color ramp.

784
00:26:54,446 --> 0:26:56,076
And in this case we've given it

785
00:26:56,076 --> 0:26:56,776
seven colors.

786
00:26:56,776 --> 0:26:58,106
It'll equally space them along

787
00:26:58,106 --> 0:26:59,726
the continuum and that just

788
00:26:59,726 --> 0:27:00,616
gives us our ramp.

789
00:26:59,726 --> 0:27:00,616
gives us our ramp.

790
00:27:01,286 --> 0:27:03,046
Once we have that, we can pick

791
00:27:03,046 --> 0:27:04,256
one of those gradient styles.

792
00:27:04,316 --> 0:27:05,336
You know, in this case we're

793
00:27:05,336 --> 0:27:06,076
going to use an angular

794
00:27:06,076 --> 0:27:06,536
gradient.

795
00:27:07,276 --> 0:27:08,786
We give it the color ramp and

796
00:27:08,786 --> 0:27:09,956
then we, in this case, for the

797
00:27:09,956 --> 0:27:11,176
angular gradient we give it the

798
00:27:11,176 --> 0:27:12,936
center point and a starting

799
00:27:12,936 --> 0:27:13,306
angle.

800
00:27:13,346 --> 0:27:14,716
And then it can just fill the

801
00:27:14,716 --> 0:27:15,826
colors around that circle

802
00:27:16,176 --> 0:27:18,216
effectively pushing them to

803
00:27:18,216 --> 0:27:21,626
infinity to give us our kind of

804
00:27:21,936 --> 0:27:22,626
color fill.

805
00:27:22,926 --> 0:27:24,276
But obviously then we can take

806
00:27:24,346 --> 0:27:26,496
the style we just made and apply

807
00:27:26,496 --> 0:27:28,176
it to a circle, in this case

808
00:27:28,176 --> 0:27:29,636
doing a fill as we saw before.

809
00:27:29,636 --> 0:27:30,526
And now we've got, instead of a

810
00:27:30,526 --> 0:27:31,746
red circle we've got this nice

811
00:27:31,746 --> 0:27:32,386
kind of color wheel.

812
00:27:33,406 --> 0:27:34,816
But of course filling is just

813
00:27:34,816 --> 0:27:36,546
one of our operations so we

814
00:27:36,546 --> 0:27:37,876
could equally have just said

815
00:27:37,876 --> 0:27:39,036
stroke border and got a filled

816
00:27:39,036 --> 0:27:39,356
ring.

817
00:27:40,516 --> 0:27:47,236
[ Applause ]

818
00:27:47,736 --> 0:27:49,646
Okay so that's the basics and

819
00:27:49,646 --> 0:27:50,936
we've seen drawing individual

820
00:27:50,936 --> 0:27:52,816
things, but now we want to go on

821
00:27:52,816 --> 0:27:53,656
and build something a little

822
00:27:53,656 --> 0:27:54,926
more complex out of multiple

823
00:27:55,046 --> 0:27:56,106
drawing operations, multiple

824
00:27:56,106 --> 0:27:56,316
views.

825
00:27:56,316 --> 0:27:58,036
And so this is the example we're

826
00:27:58,036 --> 0:27:59,346
going to use for the rest of the

827
00:27:59,346 --> 0:27:59,816
session.

828
00:27:59,816 --> 0:28:01,346
It's actually a sample code you

829
00:27:59,816 --> 0:28:01,346
It's actually a sample code you

830
00:28:01,346 --> 0:28:03,246
can download and it's just kind

831
00:28:03,246 --> 0:28:04,986
of an interactive pie chart kind

832
00:28:04,986 --> 0:28:06,826
of thing and it's made up of a

833
00:28:06,826 --> 0:28:08,276
bunch of color wedges where you

834
00:28:08,276 --> 0:28:09,406
can add them and remove them.

835
00:28:09,406 --> 0:28:10,656
They can animate in and out.

836
00:28:12,276 --> 0:28:15,266
Okay, so before we can figure

837
00:28:15,266 --> 0:28:16,276
out how to draw it, we need to

838
00:28:16,276 --> 0:28:16,956
look at the data.

839
00:28:17,566 --> 0:28:18,726
And so our sample app is

840
00:28:18,726 --> 0:28:21,116
providing us a data model and

841
00:28:21,286 --> 0:28:22,676
it's very simple.

842
00:28:22,676 --> 0:28:24,076
It's just a clasp representing

843
00:28:24,076 --> 0:28:25,106
one of these kind of wedge--

844
00:28:25,206 --> 0:28:26,106
ring of wedge things.

845
00:28:26,736 --> 0:28:27,976
And each wedge is a few

846
00:28:28,326 --> 0:28:29,666
properties representing the

847
00:28:29,706 --> 0:28:31,006
geometry and the color of the

848
00:28:31,456 --> 0:28:32,046
view.

849
00:28:32,356 --> 0:28:33,406
And then we've got a dictionary

850
00:28:33,406 --> 0:28:35,876
of the wedges tracked by ID and

851
00:28:35,876 --> 0:28:38,166
then finally an array of the IDs

852
00:28:38,166 --> 0:28:39,096
just so we know which order to

853
00:28:39,096 --> 0:28:39,566
draw them in.

854
00:28:40,376 --> 0:28:41,406
And so we can go on and think

855
00:28:41,406 --> 0:28:42,156
about how we're going to draw

856
00:28:42,156 --> 0:28:42,506
this now.

857
00:28:44,676 --> 0:28:46,726
Just as we saw before, we really

858
00:28:46,726 --> 0:28:47,596
want this to interact with the

859
00:28:47,596 --> 0:28:49,566
layout system so we're going to

860
00:28:49,566 --> 0:28:50,956
assume that there's a layout

861
00:28:50,956 --> 0:28:52,706
bounds for the entire control.

862
00:28:53,386 --> 0:28:54,706
You know because we want it to

863
00:28:54,706 --> 0:28:56,146
resize and move around as

864
00:28:56,146 --> 0:28:56,656
expected.

865
00:28:57,336 --> 0:28:59,056
And if you think about how this

866
00:28:59,056 --> 0:29:00,576
will work, you know, we can draw

867
00:28:59,056 --> 0:29:00,576
will work, you know, we can draw

868
00:29:00,576 --> 0:29:01,986
each of these colored things

869
00:29:01,986 --> 0:29:02,586
separately.

870
00:29:02,926 --> 0:29:03,996
And as long as they all fit

871
00:29:03,996 --> 0:29:05,416
within that same layout bounds,

872
00:29:05,416 --> 0:29:06,296
we can then composite them

873
00:29:06,296 --> 0:29:08,436
together and they'll all align

874
00:29:08,436 --> 0:29:08,956
seamlessly.

875
00:29:09,826 --> 0:29:11,336
So that really means we can just

876
00:29:11,336 --> 0:29:12,236
think about one of these.

877
00:29:13,556 --> 0:29:14,856
And so, you know, we've seen

878
00:29:14,856 --> 0:29:15,726
things like this before.

879
00:29:15,726 --> 0:29:17,266
It's really some shape filled

880
00:29:17,266 --> 0:29:17,966
with some gradient.

881
00:29:18,886 --> 0:29:20,076
In this case, a shape kind of

882
00:29:20,076 --> 0:29:20,596
like this.

883
00:29:21,386 --> 0:29:22,626
But we don't actually have this

884
00:29:22,626 --> 0:29:24,436
shape in the toolkit of the

885
00:29:24,636 --> 0:29:25,876
built in shapes in SwiftUI, but

886
00:29:26,456 --> 0:29:27,586
that's not a problem.

887
00:29:27,586 --> 0:29:28,966
We can go on and define a custom

888
00:29:28,966 --> 0:29:29,546
shape for this.

889
00:29:31,046 --> 0:29:33,216
So custom shapes are really like

890
00:29:33,216 --> 0:29:35,146
custom views in that they're,

891
00:29:35,246 --> 0:29:36,446
you know, types conforming to a

892
00:29:36,446 --> 0:29:36,886
protocol.

893
00:29:37,396 --> 0:29:38,346
Except in this case we're not

894
00:29:38,346 --> 0:29:39,706
conforming to a view protocol,

895
00:29:39,706 --> 0:29:41,066
we're using the shape protocol.

896
00:29:41,586 --> 0:29:43,086
And the shape protocol has a

897
00:29:43,086 --> 0:29:44,696
single requirement which is this

898
00:29:44,736 --> 0:29:45,836
path and rect function.

899
00:29:46,396 --> 0:29:47,916
And the rect you see here is the

900
00:29:47,916 --> 0:29:49,586
layout bounds or the frame of

901
00:29:49,586 --> 0:29:50,246
reference I guess.

902
00:29:50,246 --> 0:29:51,876
And then it's returning

903
00:29:51,876 --> 0:29:52,236
bézier path.

904
00:29:53,116 --> 0:29:55,976
So for our custom shape we'll

905
00:29:56,036 --> 0:29:57,146
give it a single property which

906
00:29:57,146 --> 0:29:58,306
is the wedge description, the

907
00:29:58,306 --> 0:29:59,416
thing containing the geometry.

908
00:30:00,116 --> 0:30:01,156
And then additionally we'll just

909
00:30:01,156 --> 0:30:02,326
create an empty path because

910
00:30:02,326 --> 0:30:03,236
we're going to put some things

911
00:30:03,236 --> 0:30:04,116
in that and then return it

912
00:30:04,116 --> 0:30:04,366
later.

913
00:30:05,526 --> 0:30:07,256
Just to kind of simplify this a

914
00:30:07,256 --> 0:30:09,756
little bit, I would also use a

915
00:30:09,756 --> 0:30:10,596
helper tiles which

916
00:30:10,676 --> 0:30:11,916
effectively abstracts some of

917
00:30:11,916 --> 0:30:14,016
the geometry of the shape we're

918
00:30:14,016 --> 0:30:15,326
drawing just to kind of hide the

919
00:30:15,326 --> 0:30:16,656
sines and cosines because, you

920
00:30:16,656 --> 0:30:18,976
know, this is circles and things

921
00:30:18,976 --> 0:30:19,316
like that.

922
00:30:19,316 --> 0:30:20,776
But this is really just defining

923
00:30:20,776 --> 0:30:22,926
some variables, you know, that

924
00:30:22,926 --> 0:30:24,266
we can then use in the rest of

925
00:30:24,266 --> 0:30:25,096
this function.

926
00:30:25,706 --> 0:30:28,216
So first of all we'll add the--

927
00:30:28,216 --> 0:30:29,226
one of the inner arcs.

928
00:30:30,276 --> 0:30:31,846
Then we can add a line to the

929
00:30:31,846 --> 0:30:33,716
path joining the inner and outer

930
00:30:33,716 --> 0:30:33,976
rings.

931
00:30:35,046 --> 0:30:36,176
And then another arc to kind of

932
00:30:36,176 --> 0:30:37,466
wind back around the circle.

933
00:30:38,306 --> 0:30:39,426
And finally we can just tell the

934
00:30:39,426 --> 0:30:40,806
path, hey close this current sub

935
00:30:40,806 --> 0:30:43,306
path which will join the last

936
00:30:43,306 --> 0:30:44,586
point to the start point, and

937
00:30:44,776 --> 0:30:45,486
we've got our shape.

938
00:30:45,486 --> 0:30:46,506
Excuse me.

939
00:30:47,476 --> 0:30:48,816
So now we can go on and actually

940
00:30:48,816 --> 0:30:49,516
draw this shape.

941
00:30:50,046 --> 0:30:50,626
We could fill it with our

942
00:30:50,626 --> 0:30:53,536
gradient and that's most of the

943
00:30:53,536 --> 0:30:53,996
way there.

944
00:30:54,786 --> 0:30:55,786
There is one thing we still need

945
00:30:55,786 --> 0:30:56,176
to do though.

946
00:30:56,756 --> 0:30:58,046
We saw in the movie that we'd

947
00:30:58,046 --> 0:30:59,256
like the shapes to animate.

948
00:30:59,256 --> 0:31:01,576
And if we just use this shape as

949
00:30:59,256 --> 0:31:01,576
And if we just use this shape as

950
00:31:01,576 --> 0:31:03,376
it is, there is no way that

951
00:31:03,406 --> 0:31:04,936
SwiftUI can animate this because

952
00:31:05,016 --> 0:31:06,256
it doesn't know enough about the

953
00:31:06,336 --> 0:31:06,736
types.

954
00:31:07,396 --> 0:31:08,616
And so we can go on and add one

955
00:31:08,616 --> 0:31:10,666
extra property to our custom

956
00:31:10,666 --> 0:31:12,836
shape called animatable data and

957
00:31:12,836 --> 0:31:14,526
this is really providing a

958
00:31:14,526 --> 0:31:16,146
vector of floating point numbers

959
00:31:16,806 --> 0:31:18,996
that the system is able to

960
00:31:19,846 --> 0:31:20,226
interpolate.

961
00:31:20,226 --> 0:31:22,116
In this case we're going to

962
00:31:22,116 --> 0:31:23,386
delegate the responsibility for

963
00:31:23,386 --> 0:31:24,946
this to data model because it's

964
00:31:24,946 --> 0:31:27,056
implemented this property for

965
00:31:27,056 --> 0:31:27,246
us.

966
00:31:27,726 --> 0:31:28,946
But really it's very simple.

967
00:31:28,946 --> 0:31:31,336
It's taking the three properties

968
00:31:31,336 --> 0:31:32,966
and the wedge description and

969
00:31:32,966 --> 0:31:34,066
then combining them into one

970
00:31:34,066 --> 0:31:35,346
value that can be interpolated.

971
00:31:36,956 --> 0:31:38,926
Okay so now our shape really is

972
00:31:38,926 --> 0:31:40,166
complete, we can go up and draw

973
00:31:40,166 --> 0:31:40,266
it.

974
00:31:41,206 --> 0:31:42,036
And so we can get back to

975
00:31:42,036 --> 0:31:43,376
thinking about how we layer

976
00:31:43,376 --> 0:31:44,386
together our diagram.

977
00:31:45,986 --> 0:31:47,576
So as we saw we can get a

978
00:31:47,576 --> 0:31:48,946
gradient, an angular

979
00:31:48,946 --> 0:31:50,646
gradient again and just fill our

980
00:31:50,646 --> 0:31:50,916
shape.

981
00:31:50,946 --> 0:31:52,936
But that's one of them.

982
00:31:52,936 --> 0:31:53,976
We really want, you know, eight

983
00:31:53,976 --> 0:31:54,526
of these things.

984
00:31:55,696 --> 0:31:57,036
And composite them together.

985
00:31:57,286 --> 0:31:58,246
And so we can do that with

986
00:31:58,316 --> 0:32:01,506
something called a Zstack which

987
00:31:58,316 --> 0:32:01,506
something called a Zstack which

988
00:32:01,506 --> 0:32:02,706
is very similar to the H and

989
00:32:02,706 --> 0:32:03,896
Vstacks Dave was talking about

990
00:32:03,896 --> 0:32:05,146
but it layers things together

991
00:32:05,146 --> 0:32:06,756
kind of depth-wise versus

992
00:32:07,116 --> 0:32:07,756
spatially.

993
00:32:08,656 --> 0:32:09,846
So we'll create another custom

994
00:32:09,846 --> 0:32:12,486
view and this time our view will

995
00:32:12,596 --> 0:32:13,776
grab the data model via the

996
00:32:13,806 --> 0:32:14,366
environment.

997
00:32:14,366 --> 0:32:15,356
We've set that up somewhere

998
00:32:15,356 --> 0:32:15,606
else.

999
00:32:16,326 --> 0:32:17,516
And we'll start off by creating

1000
00:32:17,516 --> 0:32:17,966
the Zstack.

1001
00:32:18,966 --> 0:32:20,266
Now we saw on our data model

1002
00:32:20,266 --> 0:32:22,586
that the, you know, it's giving

1003
00:32:22,586 --> 0:32:23,656
this array of wedge IDs.

1004
00:32:23,656 --> 0:32:26,976
And so we can use that with the

1005
00:32:27,046 --> 0:32:28,986
ForEach view in SwiftUI.

1006
00:32:28,986 --> 0:32:31,186
And really what that's doing is

1007
00:32:31,776 --> 0:32:33,926
mapping over that array of IDs

1008
00:32:34,326 --> 0:32:35,626
and effectively creating one

1009
00:32:35,626 --> 0:32:37,166
view for each wedge we want to

1010
00:32:37,166 --> 0:32:37,456
create.

1011
00:32:38,296 --> 0:32:39,416
And so this wedge view thing is

1012
00:32:39,416 --> 0:32:40,216
very simple.

1013
00:32:40,216 --> 0:32:42,506
It's really just a single

1014
00:32:43,396 --> 0:32:44,846
statement view that, you know,

1015
00:32:44,846 --> 0:32:46,096
creates the custom shape, fills

1016
00:32:46,096 --> 0:32:46,756
it with a gradient.

1017
00:32:47,436 --> 0:32:49,976
Okay so this is fairly complete

1018
00:32:50,586 --> 0:32:50,866
now.

1019
00:32:50,866 --> 0:32:52,146
You know, because of how SwiftUI

1020
00:32:52,146 --> 0:32:53,776
tracks dependencies, when our

1021
00:32:53,776 --> 0:32:55,176
data model updates the view will

1022
00:32:55,176 --> 0:32:56,716
update, you know, because Zstack

1023
00:32:57,186 --> 0:32:58,436
handles insertion and removal

1024
00:32:58,436 --> 0:32:59,126
transitions.

1025
00:32:59,366 --> 0:33:01,166
They will fade in and out

1026
00:32:59,366 --> 0:33:01,166
They will fade in and out

1027
00:33:01,166 --> 0:33:02,856
cleanly and that's pretty good

1028
00:33:02,856 --> 0:33:04,616
for an application like this.

1029
00:33:04,616 --> 0:33:05,766
But there are a few more things

1030
00:33:05,766 --> 0:33:06,636
we can go on and do now.

1031
00:33:07,086 --> 0:33:08,396
You know we saw in the movie

1032
00:33:08,396 --> 0:33:10,286
that we'd like the wedges to be

1033
00:33:10,286 --> 0:33:11,676
deleted when you tap on them.

1034
00:33:12,486 --> 0:33:14,056
So we can add something called a

1035
00:33:14,056 --> 0:33:15,646
tap action and this is kind of

1036
00:33:15,646 --> 0:33:16,686
like an event handler for the

1037
00:33:16,686 --> 0:33:18,306
view and it's really saying if

1038
00:33:18,306 --> 0:33:20,106
you tap inside this view's

1039
00:33:20,106 --> 0:33:21,696
shape, then run the closure.

1040
00:33:21,696 --> 0:33:23,256
And in our case the closure

1041
00:33:23,256 --> 0:33:25,946
we're going to use is enable

1042
00:33:25,946 --> 0:33:27,236
animations and then ask the data

1043
00:33:27,236 --> 0:33:28,996
model, hey remove this wedge ID.

1044
00:33:29,746 --> 0:33:30,756
So once we've done that we can

1045
00:33:30,756 --> 0:33:31,436
tap on the wedges.

1046
00:33:32,066 --> 0:33:33,926
Now there's one other final

1047
00:33:33,926 --> 0:33:34,796
thing we'd like to do here.

1048
00:33:35,206 --> 0:33:36,466
I said that the default

1049
00:33:36,466 --> 0:33:37,806
transition is a fade in fade out

1050
00:33:37,806 --> 0:33:39,316
effect and that's great for a

1051
00:33:39,316 --> 0:33:40,576
lot of things but in our case we

1052
00:33:40,576 --> 0:33:42,026
want something a little more fun

1053
00:33:42,226 --> 0:33:43,456
so we're going to scale the

1054
00:33:43,636 --> 0:33:44,856
wedges down towards the center

1055
00:33:44,856 --> 0:33:45,726
as well as fading them.

1056
00:33:46,536 --> 0:33:47,896
And we can do that by adding a

1057
00:33:47,896 --> 0:33:49,416
custom transition called scale

1058
00:33:49,416 --> 0:33:49,776
and fade.

1059
00:33:49,776 --> 0:33:51,096
And this is something we're

1060
00:33:51,096 --> 0:33:51,906
going to have to create for

1061
00:33:51,906 --> 0:33:52,316
ourselves.

1062
00:33:53,656 --> 0:33:55,586
Okay, so we think about what

1063
00:33:55,586 --> 0:33:56,926
this transition's going to do.

1064
00:33:57,326 --> 0:33:58,476
You know we want the-- when the

1065
00:33:58,476 --> 0:33:59,806
views are added, we want them to

1066
00:33:59,806 --> 0:34:01,476
start off scaled down and faded

1067
00:33:59,806 --> 0:34:01,476
start off scaled down and faded

1068
00:34:01,476 --> 0:34:03,496
out, and as they, you know, kind

1069
00:34:03,496 --> 0:34:04,746
of animate in, they'll come in,

1070
00:34:05,296 --> 0:34:06,566
scale up to the normal state.

1071
00:34:07,246 --> 0:34:07,956
While they're sitting in the

1072
00:34:07,956 --> 0:34:08,916
view hierarchy they'll just kind

1073
00:34:08,916 --> 0:34:10,926
of sit there and then finally

1074
00:34:10,926 --> 0:34:11,786
they'll reverse that transition

1075
00:34:11,786 --> 0:34:13,255
to kind of get removed.

1076
00:34:14,216 --> 0:34:15,616
And so if you think about that,

1077
00:34:15,786 --> 0:34:16,666
you know we don't need to define

1078
00:34:16,666 --> 0:34:17,735
all those frames obviously

1079
00:34:17,735 --> 0:34:19,096
because we have an animation

1080
00:34:19,096 --> 0:34:19,505
system.

1081
00:34:20,036 --> 0:34:21,636
And so we defined the end states

1082
00:34:21,636 --> 0:34:23,416
the animation system will take

1083
00:34:23,416 --> 0:34:24,096
care of the rest.

1084
00:34:24,976 --> 0:34:26,815
But of course in this case

1085
00:34:26,815 --> 0:34:28,646
there's actually a symmetric

1086
00:34:28,646 --> 0:34:30,386
transition here so we only

1087
00:34:30,386 --> 0:34:31,466
actually have two end states.

1088
00:34:31,686 --> 0:34:33,616
We have the transition kind of

1089
00:34:33,616 --> 0:34:36,746
set up and remove state and we

1090
00:34:36,746 --> 0:34:37,596
have the normal state where

1091
00:34:37,596 --> 0:34:39,516
nothing is really going on.

1092
00:34:40,235 --> 0:34:41,926
So now we know what states to

1093
00:34:41,926 --> 0:34:43,376
define we can define them in

1094
00:34:43,376 --> 0:34:43,646
code.

1095
00:34:43,646 --> 0:34:45,576
And the way we do that in

1096
00:34:45,576 --> 0:34:46,866
SwiftUI is with something called

1097
00:34:46,866 --> 0:34:47,606
a view modifier.

1098
00:34:48,176 --> 0:34:49,985
Now a view modifier is a little

1099
00:34:49,985 --> 0:34:51,076
bit like a view in that it's

1100
00:34:51,076 --> 0:34:52,235
defining some piece of the view

1101
00:34:52,235 --> 0:34:54,315
hierarchy but it's defining it

1102
00:34:54,315 --> 0:34:55,835
in, as a function of some other

1103
00:34:55,835 --> 0:34:56,196
view.

1104
00:34:56,896 --> 0:34:59,456
And that's what this thing is

1105
00:34:59,456 --> 0:34:59,886
representing.

1106
00:34:59,886 --> 0:35:01,756
You know it has a body method

1107
00:34:59,886 --> 0:35:01,756
You know it has a body method

1108
00:35:01,866 --> 0:35:02,876
just like the view has a body

1109
00:35:02,916 --> 0:35:03,416
property.

1110
00:35:03,956 --> 0:35:05,156
But in this case the body method

1111
00:35:05,156 --> 0:35:06,926
is a function of another view.

1112
00:35:06,926 --> 0:35:07,846
That's what the content

1113
00:35:07,846 --> 0:35:08,516
parameter is.

1114
00:35:09,176 --> 0:35:10,406
And so what we can do here is

1115
00:35:10,406 --> 0:35:12,526
apply this to any other view and

1116
00:35:12,526 --> 0:35:13,276
apply some changes.

1117
00:35:13,756 --> 0:35:15,476
And so in our case we want the

1118
00:35:15,476 --> 0:35:17,706
transition-- we have the two

1119
00:35:17,706 --> 0:35:18,656
transition states.

1120
00:35:18,656 --> 0:35:19,926
We'll give it a single Boolean

1121
00:35:19,926 --> 0:35:20,706
property saying is the

1122
00:35:20,706 --> 0:35:21,586
transition active.

1123
00:35:22,196 --> 0:35:23,546
And when the transition's active

1124
00:35:23,546 --> 0:35:25,126
we'll, you know, apply two

1125
00:35:25,346 --> 0:35:27,696
existing modifiers to kind of

1126
00:35:27,696 --> 0:35:29,816
change the incoming view to take

1127
00:35:29,856 --> 0:35:31,186
the effect of the transition.

1128
00:35:31,186 --> 0:35:32,816
That is, we'll, you know, we'll

1129
00:35:32,816 --> 0:35:34,476
scale it down and we'll fade it

1130
00:35:34,476 --> 0:35:37,226
out when the thing is set.

1131
00:35:38,066 --> 0:35:40,726
Okay so that's our transition

1132
00:35:40,726 --> 0:35:41,526
mostly defined.

1133
00:35:41,526 --> 0:35:43,806
We have one final step though.

1134
00:35:44,446 --> 0:35:46,256
We have the view modifier now

1135
00:35:46,256 --> 0:35:47,236
but we need to give the system

1136
00:35:47,236 --> 0:35:48,676
two values of the view modifier,

1137
00:35:48,676 --> 0:35:50,266
both the active and the inactive

1138
00:35:50,646 --> 0:35:53,526
values, so that SwiftUI can kind

1139
00:35:53,526 --> 0:35:54,996
of package that up as a single

1140
00:35:54,996 --> 0:35:56,866
transition and then as things

1141
00:35:56,866 --> 0:35:57,896
are added or removed, pick the

1142
00:35:57,896 --> 0:35:59,006
right value to apply at the

1143
00:35:59,006 --> 0:36:00,756
right time and then interpolate

1144
00:35:59,006 --> 0:36:00,756
right time and then interpolate

1145
00:36:01,156 --> 0:36:02,466
between them during animations.

1146
00:36:03,686 --> 0:36:05,436
So that's the thing we can go on

1147
00:36:05,436 --> 0:36:05,916
and use.

1148
00:36:06,636 --> 0:36:07,726
So having done all that we can

1149
00:36:07,726 --> 0:36:09,256
now see what we've built as a

1150
00:36:09,256 --> 0:36:09,696
demo.

1151
00:36:11,536 --> 0:36:13,866
Okay, so here's the app you can

1152
00:36:13,866 --> 0:36:15,926
download, and I'll run it.

1153
00:36:16,206 --> 0:36:17,486
And hopefully-- yeah so we've

1154
00:36:17,486 --> 0:36:19,576
got our window here.

1155
00:36:20,096 --> 0:36:21,106
It's empty right now because the

1156
00:36:21,106 --> 0:36:22,906
data model is empty but I can

1157
00:36:22,906 --> 0:36:23,746
add things.

1158
00:36:24,176 --> 0:36:25,356
You can see they take on the

1159
00:36:25,356 --> 0:36:26,436
transition we just created.

1160
00:36:26,436 --> 0:36:27,446
They're kind of scaling up and

1161
00:36:27,936 --> 0:36:28,396
filling in.

1162
00:36:28,396 --> 0:36:31,176
The nice thing is, you know, we

1163
00:36:31,176 --> 0:36:32,736
can tap on them and remove the

1164
00:36:32,736 --> 0:36:33,106
items.

1165
00:36:33,636 --> 0:36:34,906
As you see as I remove something

1166
00:36:34,906 --> 0:36:35,836
from the middle it'll kind of

1167
00:36:35,936 --> 0:36:37,376
rotate around nicely because of

1168
00:36:37,376 --> 0:36:38,846
the way we defined the shapes.

1169
00:36:38,846 --> 0:36:40,566
And then I can turn on the kind

1170
00:36:40,566 --> 0:36:41,726
of background animation here.

1171
00:36:42,886 --> 0:36:44,466
And then, you know, we have kind

1172
00:36:44,466 --> 0:36:45,796
of a physics simulation running

1173
00:36:45,796 --> 0:36:46,116
on this.

1174
00:36:46,496 --> 0:36:47,686
And it's just effectively kind

1175
00:36:47,686 --> 0:36:49,066
of random walking through the

1176
00:36:49,066 --> 0:36:49,776
parameter space.

1177
00:36:50,296 --> 0:36:52,066
And this is, you know, it's a

1178
00:36:52,066 --> 0:36:52,676
nice little app.

1179
00:36:52,676 --> 0:36:54,216
And even while it's animating

1180
00:36:54,216 --> 0:36:55,376
it's obviously still all

1181
00:36:55,426 --> 0:36:57,436
interactive and, you know,

1182
00:36:57,516 --> 0:36:58,206
testing, it is working

1183
00:36:58,206 --> 0:36:58,556
correctly.

1184
00:36:59,216 --> 0:37:00,046
The interesting thing here

1185
00:36:59,216 --> 0:37:00,046
The interesting thing here

1186
00:37:00,046 --> 0:37:02,516
though is when you think about

1187
00:37:02,516 --> 0:37:03,466
how we're rendering this,

1188
00:37:03,986 --> 0:37:05,886
SwiftUI effectively creates a

1189
00:37:06,306 --> 0:37:07,766
native platform view such as a

1190
00:37:07,766 --> 0:37:08,996
UI viewer NSView for

1191
00:37:08,996 --> 0:37:10,716
every element that appears on

1192
00:37:10,716 --> 0:37:11,146
the screen.

1193
00:37:11,826 --> 0:37:13,046
And so that's the things like

1194
00:37:13,046 --> 0:37:13,606
the buttons.

1195
00:37:14,396 --> 0:37:15,486
And so typically that's exactly

1196
00:37:15,486 --> 0:37:17,076
what we want because, you know,

1197
00:37:17,076 --> 0:37:18,376
we are mostly dealing with

1198
00:37:18,376 --> 0:37:19,586
normal controls and things like

1199
00:37:19,586 --> 0:37:19,856
that.

1200
00:37:20,936 --> 0:37:22,806
But for things like this kind of

1201
00:37:22,806 --> 0:37:26,006
graphic display, you know this

1202
00:37:26,006 --> 0:37:27,386
is, if you were drawing this in

1203
00:37:27,646 --> 0:37:29,486
UIkit or AppKit this is probably

1204
00:37:29,486 --> 0:37:30,116
not what you would do.

1205
00:37:30,116 --> 0:37:31,816
You probably would not create a

1206
00:37:31,816 --> 0:37:33,326
single NSView for every one of

1207
00:37:33,326 --> 0:37:33,686
these things.

1208
00:37:33,686 --> 0:37:35,786
And the reason being that once

1209
00:37:35,786 --> 0:37:36,876
you start creating lots of them,

1210
00:37:37,496 --> 0:37:38,436
you know, the performance isn't

1211
00:37:38,546 --> 0:37:39,296
quite what you'd like.

1212
00:37:39,296 --> 0:37:40,806
And that's really not a problem

1213
00:37:40,806 --> 0:37:41,646
because, you know, we're not

1214
00:37:41,646 --> 0:37:42,806
supposed to use NSView in this

1215
00:37:42,806 --> 0:37:42,976
way.

1216
00:37:44,126 --> 0:37:45,506
So we have a solution for that

1217
00:37:45,506 --> 0:37:47,976
in SwiftUI and that is we can

1218
00:37:47,976 --> 0:37:49,016
effectively put everything in

1219
00:37:49,016 --> 0:37:51,326
the ZStack here-- whoops--

1220
00:37:51,946 --> 0:37:52,746
inside something called a

1221
00:37:52,746 --> 0:37:53,286
drawing group.

1222
00:37:54,256 --> 0:37:55,516
And a drawing group is a special

1223
00:37:55,516 --> 0:37:57,366
way of rendering but only for

1224
00:37:57,366 --> 0:37:58,246
things like graphics.

1225
00:37:58,536 --> 0:37:59,766
So you know shapes and text and

1226
00:37:59,766 --> 0:38:00,816
images, things like that.

1227
00:37:59,766 --> 0:38:00,816
images, things like that.

1228
00:38:00,966 --> 0:38:02,246
And when we do that we'll

1229
00:38:02,246 --> 0:38:04,216
actually flatten all of the

1230
00:38:04,216 --> 0:38:05,946
SwiftUI views into a single

1231
00:38:05,946 --> 0:38:08,366
NSViewer UI view ad render them

1232
00:38:08,366 --> 0:38:08,826
with metal.

1233
00:38:09,516 --> 0:38:10,846
And so when I start doing this,

1234
00:38:10,846 --> 0:38:11,916
you can see it acts exactly the

1235
00:38:11,916 --> 0:38:12,936
same because, you know, it's not

1236
00:38:12,936 --> 0:38:14,686
a behavioral change.

1237
00:38:14,996 --> 0:38:16,666
But once I start ramping up the

1238
00:38:16,666 --> 0:38:18,156
numbers of elements, hopefully

1239
00:38:18,156 --> 0:38:19,346
you can see that the performance

1240
00:38:19,346 --> 0:38:19,976
was a lot better because--

1241
00:38:20,516 --> 0:38:27,736
[ Applause ]

1242
00:38:28,236 --> 0:38:29,366
And that's simply because you

1243
00:38:29,366 --> 0:38:31,056
know now there is one view which

1244
00:38:31,056 --> 0:38:32,486
is kind of what the view system

1245
00:38:32,486 --> 0:38:35,626
wants but you know the drawing's

1246
00:38:36,066 --> 0:38:36,796
happening using hardware

1247
00:38:36,796 --> 0:38:38,716
acceleration once only.

1248
00:38:38,716 --> 0:38:41,736
So I think that's about it.

1249
00:38:41,866 --> 0:38:43,366
Cool. Okay.

1250
00:38:49,516 --> 0:38:55,126
[ Applause ]

1251
00:38:55,626 --> 0:38:57,016
Okay so we've seen a few of the

1252
00:38:57,016 --> 0:38:59,036
graphic modifiers in this talk

1253
00:38:59,606 --> 0:39:00,956
but I want to point out that

1254
00:38:59,606 --> 0:39:00,956
but I want to point out that

1255
00:39:00,956 --> 0:39:02,266
there really are many more.

1256
00:39:02,266 --> 0:39:04,566
We've done a lot of work to

1257
00:39:04,566 --> 0:39:05,656
basically implement everything

1258
00:39:05,656 --> 0:39:06,826
you'd find in a normal 2D

1259
00:39:06,826 --> 0:39:07,506
drawing system.

1260
00:39:08,046 --> 0:39:09,586
And as we said, they all apply

1261
00:39:09,586 --> 0:39:10,306
to views as well.

1262
00:39:10,746 --> 0:39:12,416
So, you know, if this is, if you

1263
00:39:12,416 --> 0:39:13,266
need something from here, just

1264
00:39:13,346 --> 0:39:14,356
go look in the documentation.

1265
00:39:14,766 --> 0:39:17,606
And I think this really kind of

1266
00:39:17,766 --> 0:39:18,956
brings home the power of the

1267
00:39:18,956 --> 0:39:19,666
model we've built.

1268
00:39:19,666 --> 0:39:23,796
And the-- you know we want, we

1269
00:39:23,796 --> 0:39:24,946
want to kind of use these

1270
00:39:24,946 --> 0:39:26,116
graphic things but in

1271
00:39:26,216 --> 0:39:28,166
cooperation with all the rest of

1272
00:39:28,166 --> 0:39:29,866
the APIs like layout and

1273
00:39:29,866 --> 0:39:31,646
animations and interaction.

1274
00:39:31,646 --> 0:39:32,816
And the whole point of SwiftUI

1275
00:39:32,816 --> 0:39:34,916
is that we've unified all of

1276
00:39:34,916 --> 0:39:36,696
these areas around the one view

1277
00:39:36,696 --> 0:39:38,346
protocol to kind of give you

1278
00:39:38,346 --> 0:39:39,676
everything in the same package.

1279
00:39:39,676 --> 0:39:41,656
We think this is going to be

1280
00:39:41,706 --> 0:39:43,756
incredibly powerful and we

1281
00:39:43,756 --> 0:39:44,886
really can't wait to see where

1282
00:39:44,886 --> 0:39:45,696
you take it in the future.

1283
00:39:45,696 --> 0:39:46,976
So thank you very much.

1284
00:39:47,516 --> 0:39:54,166
[ Applause ]

1285
00:39:54,666 --> 0:39:55,946
We do have one more lab today.

1286
00:39:56,116 --> 0:39:57,886
It's, I think in an hour, so if

1287
00:39:57,886 --> 0:39:58,796
you have any questions about

1288
00:39:58,796 --> 0:40:00,006
this or anything else, please

1289
00:39:58,796 --> 0:40:00,006
this or anything else, please

1290
00:40:00,006 --> 0:40:01,256
come along and find us.

1291
00:40:01,776 --> 0:40:01,976
Thanks.

1292
00:40:02,508 --> 0:40:04,508
[ Applause ]
