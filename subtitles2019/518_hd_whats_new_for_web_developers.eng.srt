1
00:00:00,506 --> 0:00:05,500
[ Music ]

2
00:00:10,516 --> 0:00:14,896
[ Applause ]

3
00:00:15,396 --> 0:00:16,335
&gt;&gt; Good morning, everyone.

4
00:00:16,856 --> 0:00:17,726
My name is Devin.

5
00:00:17,956 --> 0:00:19,526
I'm thrilled to be here today

6
00:00:19,526 --> 0:00:20,776
with all of you to tell you

7
00:00:20,776 --> 0:00:22,326
about what's new in WebKit.

8
00:00:23,086 --> 0:00:23,886
There's a lot we have to talk

9
00:00:23,886 --> 0:00:25,026
about today, so we're going to

10
00:00:25,026 --> 0:00:25,456
dive right in.

11
00:00:26,026 --> 0:00:27,746
There are a lot of things that

12
00:00:27,746 --> 0:00:29,256
are new and exciting for the web

13
00:00:29,256 --> 0:00:30,896
platform and for web developers

14
00:00:30,896 --> 0:00:31,336
this year.

15
00:00:32,125 --> 0:00:33,616
Today's talk is going to cover a

16
00:00:33,616 --> 0:00:34,996
variety of different topics

17
00:00:35,316 --> 0:00:37,756
ranging from web specific APIs

18
00:00:38,116 --> 0:00:39,586
to new ways that you can provide

19
00:00:39,586 --> 0:00:41,036
a more native experience from

20
00:00:41,036 --> 0:00:41,996
within your web content.

21
00:00:42,506 --> 0:00:44,826
We have a lot to discuss, so

22
00:00:44,826 --> 0:00:45,726
we're going to dive right in

23
00:00:46,076 --> 0:00:47,206
starting with Dark Mode.

24
00:00:48,686 --> 0:00:50,126
The system Dark Mode was first

25
00:00:50,126 --> 0:00:51,756
introduced in MacOS Mojave.

26
00:00:51,756 --> 0:00:54,776
But this year, it also comes to

27
00:00:54,776 --> 0:00:56,416
iOS as part of iOS 13.

28
00:00:57,776 --> 0:00:59,466
This means that the desktop

29
00:00:59,466 --> 0:01:01,026
experience and the mobile

30
00:00:59,466 --> 0:01:01,026
experience and the mobile

31
00:01:01,026 --> 0:01:03,006
experience can now both adapt to

32
00:01:03,006 --> 0:01:03,466
Dark Mode.

33
00:01:03,466 --> 0:01:04,995
But don't worry.

34
00:01:05,236 --> 0:01:06,906
It, it's not that complicated.

35
00:01:07,356 --> 0:01:09,256
It's very easy to have your web

36
00:01:09,256 --> 0:01:11,106
content also adapt to Dark Mode.

37
00:01:11,816 --> 0:01:12,676
Let's take a look at it.

38
00:01:13,786 --> 0:01:16,396
First, adding a color scheme CSS

39
00:01:16,436 --> 0:01:18,866
property to any root CSS rule

40
00:01:18,976 --> 0:01:20,326
with a value that includes dark

41
00:01:21,006 --> 0:01:23,096
will tell WebKit that the entire

42
00:01:23,096 --> 0:01:24,546
page supports Dark Mode.

43
00:01:25,336 --> 0:01:26,486
And when in Dark Mode, the

44
00:01:26,776 --> 0:01:28,536
default text and background

45
00:01:28,536 --> 0:01:30,136
colors, as well as any form

46
00:01:30,136 --> 0:01:32,236
controls, will automatically

47
00:01:32,236 --> 0:01:33,286
update to match the rest of the

48
00:01:33,286 --> 0:01:33,836
darker theme.

49
00:01:34,636 --> 0:01:36,186
But as you can see, this won't

50
00:01:36,186 --> 0:01:37,616
do anything for custom styles.

51
00:01:38,126 --> 0:01:39,166
So, you'll still need to update

52
00:01:39,166 --> 0:01:39,666
them yourself.

53
00:01:40,636 --> 0:01:42,506
The way you can do that is using

54
00:01:42,506 --> 0:01:44,516
a prefers color scheme dark CSS

55
00:01:44,516 --> 0:01:45,406
media query.

56
00:01:46,456 --> 0:01:48,256
It behaves just like any other

57
00:01:48,256 --> 0:01:50,246
CSS media query, meaning that

58
00:01:50,246 --> 0:01:52,106
the contained styles only apply

59
00:01:52,106 --> 0:01:53,656
when the system is in Dark Mode.

60
00:01:54,016 --> 0:01:56,946
You can use this to change any

61
00:01:56,946 --> 0:01:58,686
other custom styles like CSS

62
00:01:58,686 --> 0:02:00,806
images or other colors to match

63
00:01:58,686 --> 0:02:00,806
images or other colors to match

64
00:02:00,806 --> 0:02:01,806
the rest of the darker theme on

65
00:02:01,806 --> 0:02:02,276
the page.

66
00:02:02,996 --> 0:02:04,476
But for images that are not in

67
00:02:04,476 --> 0:02:06,466
CSS, you can always use the

68
00:02:06,466 --> 0:02:08,306
picture element through HTML.

69
00:02:09,036 --> 0:02:10,696
And using the exact same media

70
00:02:10,696 --> 0:02:12,356
query it will cause the two

71
00:02:12,356 --> 0:02:14,126
images to automatically switch

72
00:02:14,326 --> 0:02:16,776
between when the user enables

73
00:02:16,776 --> 0:02:17,226
Dark Mode.

74
00:02:18,156 --> 0:02:19,226
It's that simple.

75
00:02:19,226 --> 0:02:21,816
And obviously, for any other

76
00:02:21,816 --> 0:02:23,786
content, you can always use the

77
00:02:23,786 --> 0:02:25,686
JavaScript matchMedia API,

78
00:02:26,126 --> 0:02:27,936
again, with the exact same media

79
00:02:27,936 --> 0:02:29,516
query to handle any other

80
00:02:29,516 --> 0:02:30,906
dynamic content.

81
00:02:31,776 --> 0:02:33,296
All of these techniques make it

82
00:02:33,296 --> 0:02:35,276
really easy for you to adapt

83
00:02:35,276 --> 0:02:36,856
Dark Mode to support the rest of

84
00:02:36,856 --> 0:02:37,676
your web content.

85
00:02:38,006 --> 0:02:39,596
And we can't wait to see your

86
00:02:39,596 --> 0:02:40,876
super cool dark websites.

87
00:02:42,316 --> 0:02:43,676
For more information about this,

88
00:02:44,106 --> 0:02:45,226
there's a great post on the

89
00:02:45,226 --> 0:02:47,396
WebKit blog and a great video in

90
00:02:47,396 --> 0:02:49,366
the WWDC App that talks all

91
00:02:49,366 --> 0:02:51,116
about supporting Dark Mode in

92
00:02:51,116 --> 0:02:51,686
web content.

93
00:02:52,156 --> 0:02:53,106
Be sure to check it out.

94
00:02:53,526 --> 0:02:57,386
And that's a very quick look at

95
00:02:57,386 --> 0:02:58,886
how to support Dark Mode in your

96
00:02:58,886 --> 0:02:59,436
web content.

97
00:02:59,766 --> 0:03:01,796
It's very easy.

98
00:02:59,766 --> 0:03:01,796
It's very easy.

99
00:03:02,266 --> 0:03:04,286
Next, let's talk about a very

100
00:03:04,286 --> 0:03:06,036
simple API that you can use

101
00:03:06,036 --> 0:03:07,726
called Web Share which allows

102
00:03:07,726 --> 0:03:09,126
you to invoke the native share

103
00:03:09,126 --> 0:03:10,676
sheet from within web content.

104
00:03:11,296 --> 0:03:13,876
It's standardized and it works

105
00:03:13,936 --> 0:03:15,336
anywhere, whether that be in

106
00:03:15,336 --> 0:03:17,706
Safari or in WK web view in an

107
00:03:17,816 --> 0:03:18,076
app.

108
00:03:18,956 --> 0:03:20,646
It's especially great on iOS

109
00:03:20,646 --> 0:03:21,876
this year with all of the

110
00:03:21,876 --> 0:03:23,146
improvements to the native share

111
00:03:25,066 --> 0:03:25,166
sheet.

112
00:03:25,436 --> 0:03:27,186
Using it is as simple as calling

113
00:03:27,186 --> 0:03:28,586
navigator.share with the

114
00:03:28,586 --> 0:03:29,546
relevant data.

115
00:03:30,086 --> 0:03:31,596
It returns a promise which

116
00:03:31,596 --> 0:03:33,126
resolves if a share action is

117
00:03:33,126 --> 0:03:34,936
completed or rejects if the

118
00:03:34,936 --> 0:03:35,886
share sheet is dismissed.

119
00:03:36,656 --> 0:03:38,426
But keep in mind this API

120
00:03:38,786 --> 0:03:40,436
expects to be called in response

121
00:03:40,436 --> 0:03:43,356
to a user gesture like a tap.

122
00:03:43,696 --> 0:03:45,026
So, if that's not the case, it

123
00:03:45,026 --> 0:03:46,476
will immediately reject.

124
00:03:47,976 --> 0:03:48,896
One of the cool things is that

125
00:03:48,896 --> 0:03:50,056
you can already see the Web

126
00:03:50,056 --> 0:03:52,096
Share API in action as it's been

127
00:03:52,096 --> 0:03:53,456
adopted by some pretty major

128
00:03:53,456 --> 0:03:53,976
websites.

129
00:03:55,146 --> 0:03:56,326
A great example of this is

130
00:03:56,326 --> 0:03:57,886
Twitter which also has some

131
00:03:57,886 --> 0:03:59,246
phenomenal support for Dark

132
00:03:59,246 --> 0:03:59,446
Mode.

133
00:04:00,516 --> 0:04:02,126
Tapping any of the Share icons

134
00:04:02,126 --> 0:04:03,916
on the page will open the native

135
00:04:03,916 --> 0:04:05,446
share sheet with the title and

136
00:04:05,446 --> 0:04:06,216
link of that tweet.

137
00:04:06,906 --> 0:04:07,936
And you can try this out for

138
00:04:07,936 --> 0:04:09,936
yourself in iOS 12.2 or later.

139
00:04:10,546 --> 0:04:13,236
And that's the Web Share API.

140
00:04:13,826 --> 0:04:15,626
A really simple way to invoke

141
00:04:15,626 --> 0:04:17,076
native functionality from within

142
00:04:17,076 --> 0:04:17,916
your web content.

143
00:04:20,526 --> 0:04:22,125
Now, let's move a little bit on

144
00:04:22,125 --> 0:04:23,536
to some new media features.

145
00:04:24,306 --> 0:04:25,536
If you're developing a website

146
00:04:25,536 --> 0:04:27,076
that strives to display the

147
00:04:27,076 --> 0:04:29,036
content that is best suited for

148
00:04:29,036 --> 0:04:30,026
the user's device.

149
00:04:30,626 --> 0:04:32,316
You can now use the new Media

150
00:04:32,316 --> 0:04:34,556
Capabilities API to determine

151
00:04:34,556 --> 0:04:35,836
whether any video codec is

152
00:04:35,836 --> 0:04:37,456
supported as well as if that

153
00:04:37,456 --> 0:04:39,516
video codec will be fast enough

154
00:04:39,516 --> 0:04:41,306
to knock off any frames or will

155
00:04:41,306 --> 0:04:42,366
be power efficient during

156
00:04:42,366 --> 0:04:42,996
playback.

157
00:04:43,856 --> 0:04:45,936
This empowers you to make a more

158
00:04:45,936 --> 0:04:47,716
informed decision about the type

159
00:04:47,716 --> 0:04:49,216
of content you want to present.

160
00:04:50,506 --> 0:04:52,016
And speaking of video content,

161
00:04:52,376 --> 0:04:55,436
macOS Catalina and iOS 13 also

162
00:04:55,436 --> 0:04:56,966
bring support for alpha channel

163
00:04:56,966 --> 0:04:57,586
video.

164
00:04:58,906 --> 0:05:00,466
Alpha channel video allows for

165
00:04:58,906 --> 0:05:00,466
Alpha channel video allows for

166
00:05:00,526 --> 0:05:02,706
any HEVC encoded video content

167
00:05:02,896 --> 0:05:04,426
to contain transparent pixels.

168
00:05:04,966 --> 0:05:06,516
A very compelling use case of

169
00:05:06,516 --> 0:05:08,316
this is that it allows your

170
00:05:08,316 --> 0:05:10,226
video to seamlessly integrate

171
00:05:10,226 --> 0:05:11,786
with the surrounding content

172
00:05:11,786 --> 0:05:13,236
when the user enables Dark Mode.

173
00:05:14,486 --> 0:05:15,786
Instead of making two separate

174
00:05:15,786 --> 0:05:17,316
videos, one for use in Light

175
00:05:17,316 --> 0:05:18,676
Mode and one for use in Dark

176
00:05:18,676 --> 0:05:20,626
Mode, a single video with a

177
00:05:20,626 --> 0:05:22,146
transparent background would

178
00:05:22,146 --> 0:05:23,376
likely work for both.

179
00:05:24,036 --> 0:05:25,426
And alpha channel videos can be

180
00:05:25,426 --> 0:05:27,206
used anywhere that videos can be

181
00:05:27,206 --> 0:05:27,906
used today.

182
00:05:28,226 --> 0:05:29,576
There's no special syntax,

183
00:05:29,636 --> 0:05:31,556
there's no special MIME type.

184
00:05:31,556 --> 0:05:32,546
It just works.

185
00:05:33,906 --> 0:05:35,666
But before you use it, you'll

186
00:05:35,666 --> 0:05:36,636
want to make sure that alpha

187
00:05:36,636 --> 0:05:38,496
channel video is available, such

188
00:05:38,496 --> 0:05:40,496
as on older iOS or older macOS,

189
00:05:40,836 --> 0:05:42,996
which you can do by adding an

190
00:05:42,996 --> 0:05:44,896
alpha channel key to the, to

191
00:05:44,896 --> 0:05:46,356
your capabilities object when

192
00:05:46,356 --> 0:05:47,716
using the Media Capabilities

193
00:05:47,766 --> 0:05:47,976
API.

194
00:05:51,236 --> 0:05:52,086
If you'd like to know a little

195
00:05:52,086 --> 0:05:53,266
bit more about alpha channel

196
00:05:53,266 --> 0:05:54,976
video, including how to create

197
00:05:54,976 --> 0:05:56,556
those videos on macOS Catalina,

198
00:05:56,996 --> 0:05:58,446
be sure to check out the video

199
00:05:58,446 --> 0:05:59,856
about creating HEVC videos with

200
00:05:59,856 --> 0:05:59,976
alpha.

201
00:06:03,196 --> 0:06:04,516
But if instead, you're a web

202
00:06:04,516 --> 0:06:06,846
developer who builds a website

203
00:06:06,846 --> 0:06:08,166
that includes peer-to-peer chat

204
00:06:08,166 --> 0:06:09,836
functionality and you also want

205
00:06:09,836 --> 0:06:11,566
to provide screen capture, you

206
00:06:11,566 --> 0:06:13,086
can now use the getDisplayMedia

207
00:06:13,086 --> 0:06:14,826
API in Safari 13.

208
00:06:15,906 --> 0:06:17,336
Calling it will gain return a

209
00:06:17,336 --> 0:06:19,216
promise and immediately prompt

210
00:06:19,216 --> 0:06:20,396
the user for permission to

211
00:06:20,396 --> 0:06:21,156
capture their screen.

212
00:06:22,266 --> 0:06:24,116
If that permission is granted,

213
00:06:24,436 --> 0:06:25,716
the promise will return with a

214
00:06:25,716 --> 0:06:27,396
standard media stream of the

215
00:06:27,396 --> 0:06:29,326
space that contains the Safari

216
00:06:29,326 --> 0:06:29,806
window.

217
00:06:30,726 --> 0:06:32,076
The returned media stream

218
00:06:32,136 --> 0:06:33,616
behaves just like any other

219
00:06:33,616 --> 0:06:35,476
standard media stream, meaning

220
00:06:35,476 --> 0:06:36,876
that it can be used with WebRTC

221
00:06:36,876 --> 0:06:38,346
to share your screen with

222
00:06:38,346 --> 0:06:39,006
another person.

223
00:06:39,416 --> 0:06:42,596
And those are some of the new

224
00:06:42,596 --> 0:06:44,726
media features coming to macOS

225
00:06:44,726 --> 0:06:47,346
Catalina, iOS 13, and Safari 13.

226
00:06:47,896 --> 0:06:50,536
Now, we're going to talk a

227
00:06:50,536 --> 0:06:52,716
little bit about a few new tools

228
00:06:52,716 --> 0:06:54,436
that you can use to make your

229
00:06:54,436 --> 0:06:56,706
web content more responsive and

230
00:06:56,706 --> 0:06:59,536
performant on all platforms.

231
00:07:00,796 --> 0:07:02,976
As web developers, part of our

232
00:07:02,976 --> 0:07:04,926
job is to make sure that we

233
00:07:04,926 --> 0:07:06,406
provide an experience that

234
00:07:06,406 --> 0:07:08,036
doesn't consume too much battery

235
00:07:08,306 --> 0:07:09,756
or unnecessarily perform

236
00:07:09,756 --> 0:07:10,146
actions.

237
00:07:11,266 --> 0:07:13,036
To help you better understand

238
00:07:13,316 --> 0:07:14,386
why those things might be

239
00:07:14,386 --> 0:07:16,546
happening, the Web Inspector has

240
00:07:16,546 --> 0:07:18,266
added a new CPU Timeline.

241
00:07:18,956 --> 0:07:21,096
This interface is packed with

242
00:07:21,096 --> 0:07:22,176
actionable information.

243
00:07:22,646 --> 0:07:23,976
And we really want you to be

244
00:07:23,976 --> 0:07:25,016
able to use it effectively.

245
00:07:25,446 --> 0:07:27,016
So, we've created a post on the

246
00:07:27,016 --> 0:07:29,096
WebKit blog and a video in the

247
00:07:29,096 --> 0:07:31,516
WWDC App all about understanding

248
00:07:31,516 --> 0:07:33,046
CPU usage with Web Inspector.

249
00:07:33,426 --> 0:07:34,516
Definitely check it out.

250
00:07:34,736 --> 0:07:35,696
It'll do wonders for your

251
00:07:35,696 --> 0:07:36,316
website.

252
00:07:36,606 --> 0:07:40,296
And WebDriver is coming to iOS.

253
00:07:41,276 --> 0:07:42,836
The standardized test format

254
00:07:42,936 --> 0:07:45,456
from the W3C for automation and

255
00:07:45,456 --> 0:07:47,286
regression testing is available

256
00:07:47,286 --> 0:07:48,976
on all iOS devices running iOS

257
00:07:48,976 --> 0:07:49,376
13.

258
00:07:50,126 --> 0:07:51,426
You can use WebDriver to

259
00:07:51,426 --> 0:07:53,076
automate regression testing of

260
00:07:53,076 --> 0:07:55,466
your web content and make sure

261
00:07:55,606 --> 0:07:57,356
that your, all the platforms you

262
00:07:57,356 --> 0:07:59,626
support, whether that be desktop

263
00:07:59,626 --> 0:08:01,636
or mobile, keep working exactly

264
00:07:59,626 --> 0:08:01,636
or mobile, keep working exactly

265
00:08:01,636 --> 0:08:02,406
as you would expect.

266
00:08:03,356 --> 0:08:05,466
WebDriver on iOS works much the

267
00:08:05,466 --> 0:08:06,706
same as on macOS.

268
00:08:06,886 --> 0:08:07,786
And we have phenomenal

269
00:08:07,786 --> 0:08:09,036
documentation for that on

270
00:08:09,036 --> 0:08:10,266
developer.apple.com.

271
00:08:10,266 --> 0:08:11,486
And we have some blog posts

272
00:08:11,486 --> 0:08:12,876
coming soon to talk more about

273
00:08:13,356 --> 0:08:13,426
it.

274
00:08:15,156 --> 0:08:16,366
Now, let's change it a little

275
00:08:16,366 --> 0:08:17,806
bit and talk about how to store

276
00:08:17,806 --> 0:08:19,336
structured data from within your

277
00:08:19,336 --> 0:08:19,966
web content.

278
00:08:20,526 --> 0:08:23,136
There have been two main ways of

279
00:08:23,136 --> 0:08:24,116
doing this in the past;

280
00:08:24,366 --> 0:08:25,996
IndexedDB and WebSQL.

281
00:08:26,206 --> 0:08:28,906
In Safari 13, WebSQL has been

282
00:08:28,906 --> 0:08:29,986
completely removed.

283
00:08:31,226 --> 0:08:32,496
All modern web browsers,

284
00:08:32,696 --> 0:08:34,596
including Safari, support

285
00:08:34,596 --> 0:08:35,216
IndexedDB.

286
00:08:35,806 --> 0:08:37,216
And over the past year, we've

287
00:08:37,216 --> 0:08:38,976
been hard at work making it more

288
00:08:38,976 --> 0:08:39,806
standards compliant.

289
00:08:40,626 --> 0:08:42,346
So, if you haven't already, be

290
00:08:42,346 --> 0:08:43,905
sure to transition to using

291
00:08:43,905 --> 0:08:45,636
IndexedDB as soon as possible.

292
00:08:49,076 --> 0:08:50,466
And finally, let's talk about

293
00:08:50,466 --> 0:08:52,646
Apple Pay, the easiest way to

294
00:08:52,646 --> 0:08:54,146
accept payments on the web.

295
00:08:54,676 --> 0:08:56,296
We have two main things to talk

296
00:08:56,296 --> 0:08:56,666
about.

297
00:08:57,156 --> 0:09:00,236
The first, Apple Pay, is now

298
00:08:57,156 --> 0:09:00,236
The first, Apple Pay, is now

299
00:09:00,396 --> 0:09:01,926
fully supported with all of its

300
00:09:01,926 --> 0:09:03,546
capabilities using the Payment

301
00:09:03,546 --> 0:09:04,166
Request API.

302
00:09:05,226 --> 0:09:07,326
Bringing the entirety of Apple

303
00:09:07,326 --> 0:09:10,246
Pay JS's private, secure, and

304
00:09:10,246 --> 0:09:11,936
streamlined experience to your

305
00:09:11,936 --> 0:09:12,846
web content in a more

306
00:09:12,846 --> 0:09:13,936
standardized way.

307
00:09:14,496 --> 0:09:15,916
We strongly encourage you to

308
00:09:15,916 --> 0:09:16,996
switch to the Payment Request

309
00:09:16,996 --> 0:09:19,016
API as it supports everything

310
00:09:19,016 --> 0:09:20,936
that Apple Pay JS can do and

311
00:09:20,936 --> 0:09:22,016
it's continuing to evolve.

312
00:09:23,076 --> 0:09:24,486
For a deeper dive into how to

313
00:09:24,586 --> 0:09:26,086
use the Payment Request API for

314
00:09:26,166 --> 0:09:27,896
Apple Pay, there's going to be a

315
00:09:27,896 --> 0:09:29,526
great post on the WebKit blog

316
00:09:29,526 --> 0:09:31,136
later today that'll do a deep

317
00:09:31,136 --> 0:09:31,956
dive into these new

318
00:09:31,956 --> 0:09:32,496
improvements.

319
00:09:33,786 --> 0:09:37,456
And second, in iOS 13, you can

320
00:09:37,456 --> 0:09:39,006
now use Apple Pay inside a

321
00:09:39,046 --> 0:09:39,596
WKWebView.

322
00:09:40,996 --> 0:09:41,266
Yeah.

323
00:09:42,516 --> 0:09:45,546
[ Applause ]

324
00:09:46,046 --> 0:09:47,526
This means that Apple Pay is now

325
00:09:47,526 --> 0:09:49,086
available in even more apps.

326
00:09:49,776 --> 0:09:50,876
But there are a few things to

327
00:09:50,876 --> 0:09:51,466
consider.

328
00:09:52,036 --> 0:09:53,636
When a user attempts to make a

329
00:09:53,636 --> 0:09:54,936
purchase through Apple Pay,

330
00:09:55,566 --> 0:09:56,936
there's an expectation that

331
00:09:56,936 --> 0:09:58,066
they're communicating with the

332
00:09:58,066 --> 0:09:59,906
page, not the containing web

333
00:09:59,906 --> 0:10:00,746
browser or app.

334
00:09:59,906 --> 0:10:00,746
browser or app.

335
00:10:01,686 --> 0:10:04,126
Nothing should get in between

336
00:10:04,126 --> 0:10:06,166
the user and the webpage during

337
00:10:06,166 --> 0:10:08,086
the transaction or before it's

338
00:10:08,086 --> 0:10:08,806
even started.

339
00:10:09,546 --> 0:10:10,846
So, this means there are fewer

340
00:10:10,846 --> 0:10:12,536
restrictions about when you can

341
00:10:12,536 --> 0:10:13,986
use Apple Pay inside the

342
00:10:13,986 --> 0:10:15,756
WKWebView as well as when you

343
00:10:15,756 --> 0:10:17,096
can inject script into a

344
00:10:17,096 --> 0:10:17,656
WKWebView.

345
00:10:18,406 --> 0:10:20,666
Here's how it works.

346
00:10:20,836 --> 0:10:22,726
If any script has ever been

347
00:10:22,726 --> 0:10:24,496
injected to the current page of

348
00:10:24,496 --> 0:10:26,686
the WKWebView, we will not allow

349
00:10:26,686 --> 0:10:27,166
Apple Pay.

350
00:10:27,796 --> 0:10:30,736
If the current page has already

351
00:10:30,736 --> 0:10:32,556
called canMakePayments with an

352
00:10:32,556 --> 0:10:33,736
Apple Pay payment method, we

353
00:10:34,316 --> 0:10:35,986
will not allow any future script

354
00:10:35,986 --> 0:10:36,516
injections.

355
00:10:36,756 --> 0:10:37,766
They will be blocked with an

356
00:10:37,766 --> 0:10:38,186
error.

357
00:10:38,646 --> 0:10:40,916
But both of these restrictions

358
00:10:40,916 --> 0:10:42,406
are only limited to the current

359
00:10:42,406 --> 0:10:42,796
page.

360
00:10:43,186 --> 0:10:44,916
So, any top-level navigation

361
00:10:44,916 --> 0:10:46,266
will cause them to reset.

362
00:10:46,646 --> 0:10:48,746
So, what does all of this mean?

363
00:10:50,116 --> 0:10:52,026
If you're a web developer, it's

364
00:10:52,236 --> 0:10:54,096
really important that you call

365
00:10:54,096 --> 0:10:56,286
canMakePayments before you

366
00:10:56,286 --> 0:10:57,586
attempt to show an Apple Pay

367
00:10:57,586 --> 0:10:59,566
button or even start anything

368
00:10:59,566 --> 0:11:00,176
with Apple Pay.

369
00:10:59,566 --> 0:11:00,176
with Apple Pay.

370
00:11:01,166 --> 0:11:03,086
This way, your users will never

371
00:11:03,086 --> 0:11:04,716
encounter a situation where an

372
00:11:04,716 --> 0:11:06,616
Apple Pay button is shown and

373
00:11:06,616 --> 0:11:07,566
tapping on it doesn't do

374
00:11:07,566 --> 0:11:08,656
anything because it's been

375
00:11:08,656 --> 0:11:09,106
disabled.

376
00:11:09,676 --> 0:11:11,906
And if instead, you're an app

377
00:11:11,906 --> 0:11:14,416
developer, really think about

378
00:11:14,416 --> 0:11:15,766
whether you actually need to

379
00:11:15,766 --> 0:11:17,436
inject script such as through

380
00:11:17,436 --> 0:11:18,966
the WKUserScript API or the

381
00:11:18,966 --> 0:11:20,436
evaluateJavaScript with

382
00:11:20,436 --> 0:11:21,586
completionHandler call.

383
00:11:22,366 --> 0:11:23,676
We've seen some examples in the

384
00:11:23,676 --> 0:11:25,856
past of apps injecting script

385
00:11:26,196 --> 0:11:28,006
when there's a WebKit API that

386
00:11:28,006 --> 0:11:29,266
does the exact same thing.

387
00:11:29,796 --> 0:11:30,876
There's no reason for that.

388
00:11:31,856 --> 0:11:33,446
By injecting script, you could

389
00:11:33,446 --> 0:11:35,566
be preventing the loaded web

390
00:11:35,566 --> 0:11:37,256
content from providing its best

391
00:11:37,256 --> 0:11:37,806
experience.

392
00:11:38,336 --> 0:11:41,516
And that's what's new with Apple

393
00:11:42,306 --> 0:11:42,376
Pay.

394
00:11:43,436 --> 0:11:45,576
This was a quick look at some of

395
00:11:45,576 --> 0:11:47,536
the great features available

396
00:11:47,536 --> 0:11:48,916
that are new for web developers

397
00:11:48,916 --> 0:11:49,296
this year.

398
00:11:50,696 --> 0:11:52,326
You'll also definitely want to

399
00:11:52,326 --> 0:11:53,326
check out Introducing

400
00:11:53,326 --> 0:11:55,446
Desktop-class Browsing on iPad,

401
00:11:55,936 --> 0:11:57,136
which covers how to use some

402
00:11:57,236 --> 0:11:58,936
other new web platform features

403
00:11:59,116 --> 0:12:00,816
like pointer events to really

404
00:11:59,116 --> 0:12:00,816
like pointer events to really

405
00:12:00,816 --> 0:12:03,206
make your desktop website feel

406
00:12:03,206 --> 0:12:05,666
right at home on iPad.

407
00:12:05,666 --> 0:12:06,946
I really hope you've enjoyed

408
00:12:06,946 --> 0:12:08,206
learning about what's new for

409
00:12:08,206 --> 0:12:09,006
web developers.

410
00:12:09,506 --> 0:12:10,856
We can't wait to see what

411
00:12:10,856 --> 0:12:12,616
beautiful designs and incredible

412
00:12:12,616 --> 0:12:14,076
experiences you craft with these

413
00:12:14,076 --> 0:12:15,686
new features and tools that are

414
00:12:15,686 --> 0:12:16,306
available to you.

415
00:12:16,656 --> 0:12:17,356
Have a great day.

416
00:12:18,016 --> 0:12:22,506
[ Applause ]
