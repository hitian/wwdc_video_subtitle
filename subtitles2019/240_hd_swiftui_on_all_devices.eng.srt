1
00:00:00,506 --> 0:00:05,500
[Music]

2
00:00:08,416 --> 0:00:11,566
&gt;&gt; [Applause] All right, thank

3
00:00:11,566 --> 0:00:11,946
you.

4
00:00:12,606 --> 0:00:14,906
Welcome. It's so great to see

5
00:00:14,906 --> 0:00:15,976
you all here and it's great to

6
00:00:15,976 --> 0:00:17,806
see so many people excited about

7
00:00:17,806 --> 0:00:18,176
SwiftUI.

8
00:00:18,176 --> 0:00:20,296
My name is Jeff Nadeau.

9
00:00:20,546 --> 0:00:22,256
I work on macOS frameworks and

10
00:00:22,256 --> 0:00:23,276
I'll be joined in a little bit

11
00:00:23,276 --> 0:00:24,986
by my colleagues Ada Turner and

12
00:00:24,986 --> 0:00:25,676
Meghna Sapre [phonetic].

13
00:00:27,026 --> 0:00:27,776
Now we hope you've had the

14
00:00:27,776 --> 0:00:28,996
chance to learn about SwiftUI

15
00:00:29,056 --> 0:00:30,446
all throughout the week but if

16
00:00:30,446 --> 0:00:32,066
you need a summary, here it is.

17
00:00:32,625 --> 0:00:34,196
SwiftUI is the shortest path to

18
00:00:34,196 --> 0:00:35,626
building great apps on every

19
00:00:35,626 --> 0:00:36,206
device.

20
00:00:36,766 --> 0:00:38,976
And what we're here to focus on

21
00:00:38,976 --> 0:00:40,856
today is the 'every' in every

22
00:00:40,856 --> 0:00:41,546
device.

23
00:00:42,936 --> 0:00:43,986
Now when we think about building

24
00:00:43,986 --> 0:00:45,036
applications for all of our

25
00:00:45,036 --> 0:00:46,236
Apple devices, these are the

26
00:00:46,236 --> 0:00:47,196
technologies that we think

27
00:00:47,196 --> 0:00:47,526
about.

28
00:00:48,026 --> 0:00:49,056
We use AppKit on the Mac.

29
00:00:49,756 --> 0:00:51,636
UIKit on iPhone and iPad,

30
00:00:52,046 --> 0:00:54,236
TVUIKit which is built on UIKit

31
00:00:54,286 --> 0:00:55,866
for Apple TV, and then on the

32
00:00:55,866 --> 0:00:57,096
watch we use WatchKit.

33
00:00:58,396 --> 0:00:59,506
These UI frameworks were

34
00:00:59,506 --> 0:01:00,806
designed around the strengths

35
00:00:59,506 --> 0:01:00,806
designed around the strengths

36
00:01:00,806 --> 0:01:01,886
and capabilities of the

37
00:01:01,886 --> 0:01:02,986
respective devices.

38
00:01:03,386 --> 0:01:04,586
And so naturally there are some

39
00:01:04,586 --> 0:01:05,556
differences between them.

40
00:01:06,196 --> 0:01:07,366
And historically we haven't been

41
00:01:07,366 --> 0:01:08,606
able to take code written for

42
00:01:08,606 --> 0:01:10,316
one and move it over to another

43
00:01:10,316 --> 0:01:11,806
device without modification.

44
00:01:12,466 --> 0:01:14,876
But for the first time ever,

45
00:01:14,876 --> 0:01:16,496
we're introducing a UI framework

46
00:01:16,496 --> 0:01:17,936
that you can use on any of these

47
00:01:17,936 --> 0:01:18,536
devices.

48
00:01:19,216 --> 0:01:20,616
That's unprecedented and it's a

49
00:01:20,726 --> 0:01:22,206
big opportunity for you as app

50
00:01:22,236 --> 0:01:22,936
developers.

51
00:01:24,016 --> 0:01:25,246
But these devices are so

52
00:01:25,246 --> 0:01:26,326
different so how is it that

53
00:01:26,326 --> 0:01:27,606
we've built one UI framework

54
00:01:27,606 --> 0:01:29,026
that works on all of them?

55
00:01:30,026 --> 0:01:31,636
Well, SwiftUI was built from the

56
00:01:31,636 --> 0:01:33,216
ground up to accommodate many

57
00:01:33,216 --> 0:01:34,496
different UI paradigms.

58
00:01:34,916 --> 0:01:35,886
So whether you're using a

59
00:01:35,886 --> 0:01:37,726
keyboard and mouse, or a multi

60
00:01:37,726 --> 0:01:39,296
touch display, or the Siri

61
00:01:39,296 --> 0:01:40,776
remote, or even the digital

62
00:01:40,776 --> 0:01:42,326
crown on your Apple Watch, or

63
00:01:42,326 --> 0:01:43,606
assistive technologies like

64
00:01:43,606 --> 0:01:45,176
voiceover and switch control,

65
00:01:45,616 --> 0:01:46,646
SwiftUI was designed to

66
00:01:46,646 --> 0:01:47,946
accommodate all of these.

67
00:01:49,126 --> 0:01:50,726
And it has great support for our

68
00:01:50,726 --> 0:01:51,996
platform design conventions out

69
00:01:51,996 --> 0:01:52,696
of the box.

70
00:01:53,276 --> 0:01:54,536
We've brought together experts

71
00:01:54,536 --> 0:01:56,426
from every platform to make sure

72
00:01:57,016 --> 0:01:59,706
that when you use an element in

73
00:01:59,706 --> 0:02:01,766
SwiftUI on a given device that

74
00:01:59,706 --> 0:02:01,766
SwiftUI on a given device that

75
00:02:01,766 --> 0:02:03,396
it looks and feels right at

76
00:02:03,396 --> 0:02:03,706
home.

77
00:02:04,646 --> 0:02:06,086
The result is a system where

78
00:02:06,086 --> 0:02:07,506
your knowledge is transferrable

79
00:02:07,506 --> 0:02:08,526
across devices.

80
00:02:09,246 --> 0:02:10,436
Everything fits together in the

81
00:02:10,436 --> 0:02:10,996
same way.

82
00:02:11,556 --> 0:02:12,516
So even when you're working

83
00:02:12,576 --> 0:02:14,036
with-- you're building support

84
00:02:14,036 --> 0:02:15,116
for some specific piece of

85
00:02:15,116 --> 0:02:16,356
hardware, say the Touch Bar on a

86
00:02:16,356 --> 0:02:18,026
MacBook Pro or the digital crown

87
00:02:18,026 --> 0:02:19,966
on an Apple Watch, or the Siri

88
00:02:19,966 --> 0:02:21,786
remote, the tools for doing this

89
00:02:21,816 --> 0:02:23,206
have a kind of consistency and

90
00:02:23,206 --> 0:02:24,756
familiarity that makes them

91
00:02:24,756 --> 0:02:25,786
really easy to pick up.

92
00:02:27,156 --> 0:02:28,626
Now, on top of just general

93
00:02:28,626 --> 0:02:31,456
design philosophy we also have a

94
00:02:31,456 --> 0:02:32,936
number of elements that are in

95
00:02:32,936 --> 0:02:34,736
common across-- SwiftUI across

96
00:02:34,736 --> 0:02:35,426
all devices.

97
00:02:35,776 --> 0:02:38,016
So for example, every platform

98
00:02:38,016 --> 0:02:39,316
has the idea of a toggle

99
00:02:39,316 --> 0:02:39,806
control.

100
00:02:40,356 --> 0:02:42,466
You've got some kind of piece of

101
00:02:42,466 --> 0:02:43,526
Boolean state that you want to

102
00:02:43,526 --> 0:02:46,356
be able to toggle and you have a

103
00:02:46,356 --> 0:02:47,436
label describing what you're

104
00:02:47,436 --> 0:02:47,906
toggling.

105
00:02:49,236 --> 0:02:50,926
And so even though our

106
00:02:51,416 --> 0:02:52,996
expression of this control could

107
00:02:52,996 --> 0:02:53,996
be very different on each

108
00:02:53,996 --> 0:02:55,566
device-- it might be a switch or

109
00:02:55,566 --> 0:02:57,146
a check box or a toggle button--

110
00:02:57,546 --> 0:02:59,426
we can offer a single API that

111
00:02:59,426 --> 0:03:00,986
describes this on any device.

112
00:02:59,426 --> 0:03:00,986
describes this on any device.

113
00:03:03,396 --> 0:03:05,676
SwiftUI also has a common layout

114
00:03:05,766 --> 0:03:06,186
system.

115
00:03:06,806 --> 0:03:08,146
So when you're using a stack or

116
00:03:08,146 --> 0:03:10,066
a spacer or a padding, these

117
00:03:10,066 --> 0:03:11,346
tools work the same on every

118
00:03:11,346 --> 0:03:11,846
device.

119
00:03:11,936 --> 0:03:13,196
And what that means is that once

120
00:03:13,196 --> 0:03:14,276
you've learned to lay out an

121
00:03:14,276 --> 0:03:15,596
application on one device,

122
00:03:15,926 --> 0:03:16,796
you've learned how to lay out an

123
00:03:16,796 --> 0:03:21,336
application on any.

124
00:03:21,446 --> 0:03:22,666
We also have some more advanced

125
00:03:22,666 --> 0:03:23,836
controls like picker for

126
00:03:23,836 --> 0:03:24,306
example.

127
00:03:24,686 --> 0:03:26,246
Picker picks one element from a

128
00:03:26,246 --> 0:03:28,946
list of many and this control

129
00:03:28,946 --> 0:03:30,316
expresses itself in a variety of

130
00:03:30,316 --> 0:03:30,556
ways.

131
00:03:30,556 --> 0:03:32,416
So on MacOS it might be a pop-up

132
00:03:32,416 --> 0:03:32,746
button.

133
00:03:33,076 --> 0:03:34,856
On iOS or WatchOS it might be

134
00:03:34,856 --> 0:03:35,896
this wheel style picker.

135
00:03:37,096 --> 0:03:38,786
And given how different they

136
00:03:38,786 --> 0:03:40,016
are, you might not use them

137
00:03:40,016 --> 0:03:41,426
completely interchangeably from

138
00:03:41,426 --> 0:03:42,386
device to device.

139
00:03:42,946 --> 0:03:43,656
But the one thing that's

140
00:03:43,746 --> 0:03:45,366
constant is the relationship to

141
00:03:45,366 --> 0:03:45,846
your data.

142
00:03:47,046 --> 0:03:48,086
When you've adapted your model

143
00:03:48,086 --> 0:03:48,986
to work with one of these

144
00:03:48,986 --> 0:03:50,626
controls, you can easily

145
00:03:50,626 --> 0:03:52,296
transplant that from device to

146
00:03:52,296 --> 0:03:52,936
device.

147
00:03:53,876 --> 0:03:54,946
Now we don't have time to go

148
00:03:54,946 --> 0:03:56,006
over all of the different

149
00:03:56,006 --> 0:03:57,906
elements available in SwiftUI so

150
00:03:57,906 --> 0:03:58,946
you should check out the SwiftUI

151
00:03:58,946 --> 0:04:00,026
essentials talk for more

152
00:03:58,946 --> 0:04:00,026
essentials talk for more

153
00:04:00,026 --> 0:04:01,826
information about that.

154
00:04:02,396 --> 0:04:04,696
Now, does that mean that I can

155
00:04:04,696 --> 0:04:06,446
really use SwiftUI to design a

156
00:04:06,446 --> 0:04:07,806
single app that's going to work

157
00:04:07,806 --> 0:04:09,526
great across all these devices?

158
00:04:10,756 --> 0:04:12,186
Is it going to let me write code

159
00:04:12,186 --> 0:04:14,076
to adapt seamlessly from a 4k

160
00:04:14,076 --> 0:04:15,936
television all the way down to a

161
00:04:15,936 --> 0:04:17,656
44 millimeter watch face?

162
00:04:19,796 --> 0:04:21,156
Well of course not.

163
00:04:23,286 --> 0:04:25,436
You know, there's no such thing

164
00:04:25,436 --> 0:04:27,926
as a one size fits all app.

165
00:04:28,156 --> 0:04:30,386
If we decided to just stick to

166
00:04:30,386 --> 0:04:31,696
the common denominator between

167
00:04:31,696 --> 0:04:33,456
all these devices, we'd be

168
00:04:33,456 --> 0:04:34,686
missing out on the things that

169
00:04:34,686 --> 0:04:35,946
make each device great.

170
00:04:35,946 --> 0:04:38,566
And there's no magic abstraction

171
00:04:38,566 --> 0:04:39,536
that can do that for you.

172
00:04:39,986 --> 0:04:41,116
You have to decide what the

173
00:04:41,116 --> 0:04:43,086
right design is for your app on

174
00:04:43,136 --> 0:04:43,926
each device.

175
00:04:45,266 --> 0:04:46,676
Now what SwiftUI can help you

176
00:04:46,676 --> 0:04:48,576
with is you can share your skill

177
00:04:48,576 --> 0:04:50,036
set and toolset that you've

178
00:04:50,036 --> 0:04:51,656
learned building from one device

179
00:04:51,996 --> 0:04:53,056
across many others.

180
00:04:54,466 --> 0:04:55,966
And there are definitely going

181
00:04:55,966 --> 0:04:57,106
to be opportunities to share

182
00:04:57,106 --> 0:04:59,056
code along the way, just where

183
00:04:59,056 --> 0:04:59,876
it makes sense.

184
00:05:00,436 --> 0:05:02,386
And so we think it's kind of

185
00:05:02,386 --> 0:05:03,276
important to think about this

186
00:05:03,306 --> 0:05:05,036
less as write once and run

187
00:05:05,036 --> 0:05:07,746
anywhere and more like learn

188
00:05:07,746 --> 0:05:09,286
once and apply anywhere.

189
00:05:09,896 --> 0:05:12,516
Now to put these principles into

190
00:05:12,516 --> 0:05:14,406
practice, we need to build an

191
00:05:14,406 --> 0:05:14,546
app.

192
00:05:16,016 --> 0:05:18,146
But really it's more like we've

193
00:05:18,176 --> 0:05:20,096
built four apps, one for each of

194
00:05:20,096 --> 0:05:21,266
our platforms.

195
00:05:22,736 --> 0:05:23,966
And the app that we've built is

196
00:05:23,966 --> 0:05:24,876
called Landmarks.

197
00:05:25,806 --> 0:05:27,006
The purpose of Landmarks is to

198
00:05:27,006 --> 0:05:28,066
research and visit landmarks

199
00:05:28,066 --> 0:05:28,776
throughout the country.

200
00:05:29,516 --> 0:05:31,656
We definitely want to look at

201
00:05:31,656 --> 0:05:32,626
photos and get visitor

202
00:05:32,626 --> 0:05:34,026
information about these places.

203
00:05:34,146 --> 0:05:36,936
I think it would be great to get

204
00:05:36,936 --> 0:05:38,716
maps and directions to a

205
00:05:38,716 --> 0:05:39,406
destination.

206
00:05:40,846 --> 0:05:41,786
And if we're planning a trip,

207
00:05:41,876 --> 0:05:43,066
marking favorites is a great

208
00:05:43,066 --> 0:05:43,346
idea.

209
00:05:43,346 --> 0:05:45,776
And when we think about bringing

210
00:05:45,776 --> 0:05:47,436
this app to all of our devices,

211
00:05:47,676 --> 0:05:49,336
we can tell ourselves a story

212
00:05:49,396 --> 0:05:50,576
about how we think the app

213
00:05:50,706 --> 0:05:52,536
belongs and fits on each one.

214
00:05:53,936 --> 0:05:57,266
So for example, on AppleTV it's

215
00:05:57,266 --> 0:05:58,766
a natural place to couch surf

216
00:05:58,766 --> 0:05:59,616
for places to go.

217
00:06:00,296 --> 0:06:02,296
And because it's a big screen

218
00:06:02,296 --> 0:06:03,276
experience, that might be

219
00:06:03,276 --> 0:06:04,126
something that you do with

220
00:06:04,126 --> 0:06:05,686
family or friends or roommates.

221
00:06:06,326 --> 0:06:08,846
And we definitely want to mark

222
00:06:08,846 --> 0:06:10,246
favorites to research later.

223
00:06:10,866 --> 0:06:13,476
And the Mac would be a great

224
00:06:13,476 --> 0:06:14,876
place to do that research.

225
00:06:15,456 --> 0:06:17,886
It's a good place to compare and

226
00:06:17,886 --> 0:06:20,356
contrast info, maybe have some

227
00:06:20,356 --> 0:06:21,526
more advanced sorting and

228
00:06:21,526 --> 0:06:24,416
filtering controls, and really

229
00:06:24,416 --> 0:06:28,216
read up on all the details.

230
00:06:28,216 --> 0:06:30,146
On iPhone, we obviously want

231
00:06:30,146 --> 0:06:31,196
quick information about each

232
00:06:31,196 --> 0:06:33,276
landmark but since it's so

233
00:06:33,276 --> 0:06:34,426
common to navigate with our

234
00:06:34,426 --> 0:06:36,026
phones, we should also be able

235
00:06:36,026 --> 0:06:37,096
to get driving directions as

236
00:06:37,096 --> 0:06:37,316
well.

237
00:06:38,986 --> 0:06:40,336
And iPhone of course is also a

238
00:06:40,336 --> 0:06:41,636
phone so if we need to place a

239
00:06:41,636 --> 0:06:43,136
phone call to call ahead, it's a

240
00:06:43,136 --> 0:06:45,896
natural place to do it.

241
00:06:46,736 --> 0:06:48,546
Finally on Apple Watch, that's

242
00:06:48,546 --> 0:06:49,746
where we want to get at-a-glance

243
00:06:49,746 --> 0:06:51,226
info about what's most important

244
00:06:51,226 --> 0:06:51,706
to us.

245
00:06:52,226 --> 0:06:55,056
And it's the perfect platform to

246
00:06:55,056 --> 0:06:56,736
receive important notifications

247
00:06:56,736 --> 0:06:57,846
when anything changes.

248
00:06:58,356 --> 0:07:02,046
Now the cool thing is that the

249
00:06:58,356 --> 0:07:02,046
Now the cool thing is that the

250
00:07:02,046 --> 0:07:03,356
iOS version of this application

251
00:07:03,356 --> 0:07:04,576
is already available to you

252
00:07:04,576 --> 0:07:05,116
today.

253
00:07:06,186 --> 0:07:07,536
It's part of a new documentation

254
00:07:07,536 --> 0:07:09,286
series to teach you how to view

255
00:07:09,286 --> 0:07:09,746
SwiftUI.

256
00:07:10,886 --> 0:07:11,816
You start from the very

257
00:07:11,816 --> 0:07:13,156
beginning and you can build this

258
00:07:13,156 --> 0:07:16,816
application up step by step.

259
00:07:17,046 --> 0:07:17,906
It's already available for

260
00:07:17,906 --> 0:07:19,686
download today and it's a great

261
00:07:19,686 --> 0:07:21,366
way to learn how to build an iOS

262
00:07:21,366 --> 0:07:21,506
app.

263
00:07:21,506 --> 0:07:23,586
And so as a result, we're going

264
00:07:23,586 --> 0:07:25,066
to be focusing more today on

265
00:07:25,066 --> 0:07:26,926
bringing this application to

266
00:07:26,926 --> 0:07:28,856
AppleTV, Mac, and Apple Watch.

267
00:07:29,416 --> 0:07:31,496
And to start us off on that

268
00:07:31,496 --> 0:07:32,476
journey, I'd like to hand it

269
00:07:32,476 --> 0:07:33,886
over to my colleague Ada Turner

270
00:07:33,936 --> 0:07:35,456
to talk to us about SwiftUI on

271
00:07:35,456 --> 0:07:35,936
AppleTV.

272
00:07:36,516 --> 0:07:43,086
[ Applause ]

273
00:07:43,586 --> 0:07:44,186
&gt;&gt; Thanks Jeff.

274
00:07:45,136 --> 0:07:48,036
Hi. My name is Ada Turner and

275
00:07:48,036 --> 0:07:49,736
I'm really excited to talk to

276
00:07:49,736 --> 0:07:51,986
you today about SwiftUI for

277
00:07:51,986 --> 0:07:52,826
AppleTV.

278
00:07:54,356 --> 0:07:57,096
Designing apps for the TV means

279
00:07:57,096 --> 0:07:58,546
designing for the biggest,

280
00:07:58,546 --> 0:08:00,896
boldest screen in the entire

281
00:07:58,546 --> 0:08:00,896
boldest screen in the entire

282
00:08:00,896 --> 0:08:02,726
home and that comes with some

283
00:08:02,726 --> 0:08:04,576
challenges and considerations

284
00:08:04,626 --> 0:08:05,906
unique to AppleTV.

285
00:08:06,526 --> 0:08:09,006
Luckily, SwiftUI allows you to

286
00:08:09,006 --> 0:08:11,036
create great experiences that

287
00:08:11,036 --> 0:08:12,466
are optimized for the living

288
00:08:12,466 --> 0:08:14,486
room using the same skill set

289
00:08:14,486 --> 0:08:16,156
and toolset that you've learned

290
00:08:16,286 --> 0:08:17,386
when developing for Apple's

291
00:08:17,386 --> 0:08:18,216
other devices.

292
00:08:19,696 --> 0:08:22,416
Today I'd like to focus on three

293
00:08:22,576 --> 0:08:24,366
key points for designing great

294
00:08:24,366 --> 0:08:26,116
experience on the biggest,

295
00:08:26,196 --> 0:08:27,236
boldest screen.

296
00:08:28,266 --> 0:08:30,656
TVOS is a 10 foot experience,

297
00:08:31,046 --> 0:08:32,275
not a mobile experience.

298
00:08:33,176 --> 0:08:34,736
People interact with your apps

299
00:08:34,976 --> 0:08:36,816
using the Siri remote not a

300
00:08:36,816 --> 0:08:38,296
touch screen or a mouse and

301
00:08:38,296 --> 0:08:38,826
keyboard.

302
00:08:39,486 --> 0:08:41,506
And it is especially important

303
00:08:41,506 --> 0:08:43,176
for TVOS apps to have

304
00:08:43,346 --> 0:08:45,336
streamlined navigation so people

305
00:08:45,336 --> 0:08:46,856
can jump right into your app's

306
00:08:46,856 --> 0:08:47,386
content.

307
00:08:48,636 --> 0:08:51,076
Now, what is a 10 foot

308
00:08:51,076 --> 0:08:51,806
experience?

309
00:08:53,106 --> 0:08:55,986
It's this, not this.

310
00:08:57,546 --> 0:08:59,796
Your apps should emphasize rich

311
00:08:59,866 --> 0:09:02,036
and immersive experiences like

312
00:08:59,866 --> 0:09:02,036
and immersive experiences like

313
00:09:02,036 --> 0:09:04,246
beautiful imagery or video as

314
00:09:04,286 --> 0:09:06,116
opposed to accomplishing tasks

315
00:09:06,586 --> 0:09:08,216
like taking notes or getting

316
00:09:08,216 --> 0:09:08,986
directions.

317
00:09:10,396 --> 0:09:12,576
When sharing SwiftUI code with

318
00:09:12,576 --> 0:09:14,266
your AppleTV app from other

319
00:09:14,266 --> 0:09:16,766
devices, carefully consider

320
00:09:16,766 --> 0:09:18,476
which experiences make the most

321
00:09:18,546 --> 0:09:20,746
sense when displayed on a large

322
00:09:20,746 --> 0:09:23,316
screen viewed from across the

323
00:09:23,316 --> 0:09:26,686
room with longer periods of use

324
00:09:27,506 --> 0:09:29,166
and potentially more than one

325
00:09:29,166 --> 0:09:31,946
viewer at a time.

326
00:09:32,156 --> 0:09:33,606
Let's take a look at which

327
00:09:33,606 --> 0:09:35,096
features we decided to support

328
00:09:35,096 --> 0:09:37,296
on Landmarks for TV and which

329
00:09:37,296 --> 0:09:38,716
ones we left on the cutting room

330
00:09:38,716 --> 0:09:39,136
floor.

331
00:09:40,596 --> 0:09:42,586
The easiest choice to make was

332
00:09:42,586 --> 0:09:43,586
to include the gorgeous

333
00:09:43,666 --> 0:09:45,026
photographs of the landmarks

334
00:09:45,396 --> 0:09:46,716
which will look great on the big

335
00:09:46,766 --> 0:09:47,226
screen.

336
00:09:48,566 --> 0:09:49,936
Gathering in the living room to

337
00:09:49,936 --> 0:09:51,596
pick out favorites together is

338
00:09:51,596 --> 0:09:52,856
one of the key features of our

339
00:09:52,856 --> 0:09:54,746
TVOS app so we can't forget

340
00:09:54,746 --> 0:09:54,946
that.

341
00:09:56,626 --> 0:09:58,486
And we'll also include basic

342
00:09:58,486 --> 0:10:00,246
tourism information such as

343
00:09:58,486 --> 0:10:00,246
tourism information such as

344
00:10:00,246 --> 0:10:02,576
hours of information and cost so

345
00:10:02,576 --> 0:10:04,146
that people can make informed

346
00:10:04,146 --> 0:10:05,466
decisions about where they want

347
00:10:05,466 --> 0:10:06,706
to visit as they browse.

348
00:10:08,386 --> 0:10:10,406
Now, although our data supports

349
00:10:10,446 --> 0:10:12,646
it, we decided that we're not

350
00:10:12,646 --> 0:10:14,426
going to include lengthy details

351
00:10:14,426 --> 0:10:15,676
about the history of each

352
00:10:15,676 --> 0:10:17,876
landmark as content like that

353
00:10:17,876 --> 0:10:19,516
really isn't appropriate on the

354
00:10:19,516 --> 0:10:20,056
TV.

355
00:10:21,116 --> 0:10:22,896
We also decided not to include

356
00:10:22,896 --> 0:10:24,606
advanced sorting and filtering

357
00:10:24,846 --> 0:10:26,246
as features like that make a lot

358
00:10:26,246 --> 0:10:28,346
more sense on the Mac or iPad.

359
00:10:29,296 --> 0:10:31,646
And finally, although our data

360
00:10:31,646 --> 0:10:32,656
includes geographical

361
00:10:32,656 --> 0:10:34,826
coordinates, we decided not to

362
00:10:34,826 --> 0:10:35,876
implement geofenced

363
00:10:35,876 --> 0:10:38,156
notifications as traveling with

364
00:10:38,156 --> 0:10:40,056
an actively running TVOS app is

365
00:10:40,056 --> 0:10:41,636
a very rare use case.

366
00:10:42,236 --> 0:10:44,236
[Laughter]

367
00:10:44,456 --> 0:10:47,666
Next, let's talk about focus.

368
00:10:48,276 --> 0:10:50,656
People interact with TVOS apps

369
00:10:50,656 --> 0:10:52,586
using the Siri remote which is

370
00:10:52,716 --> 0:10:54,326
optimized for effortlessly

371
00:10:54,326 --> 0:10:55,576
swiping through your app's

372
00:10:55,576 --> 0:10:56,086
interface.

373
00:10:56,786 --> 0:10:59,206
It is critical that your entire

374
00:10:59,206 --> 0:11:01,396
apps interface be intuitively

375
00:10:59,206 --> 0:11:01,396
apps interface be intuitively

376
00:11:01,396 --> 0:11:03,026
navigable using focus.

377
00:11:03,916 --> 0:11:06,216
Luckily, many of SwiftUI's

378
00:11:06,286 --> 0:11:08,356
standard interface elements such

379
00:11:08,356 --> 0:11:11,086
as lists, buttons, text fields,

380
00:11:11,206 --> 0:11:13,666
and toggles, all work seamlessly

381
00:11:13,666 --> 0:11:15,986
on TVOS, adopting different

382
00:11:15,986 --> 0:11:18,016
appearances and behaviors that

383
00:11:18,016 --> 0:11:20,356
look great on the big screen and

384
00:11:20,466 --> 0:11:21,966
interact using focus.

385
00:11:23,456 --> 0:11:25,076
If you implement your own custom

386
00:11:25,076 --> 0:11:27,376
controls, SwiftUI provides a

387
00:11:27,516 --> 0:11:29,476
focusable view modifier that

388
00:11:29,476 --> 0:11:31,366
allows you to control whether or

389
00:11:31,366 --> 0:11:33,026
not your view can become focused

390
00:11:33,406 --> 0:11:35,976
and execute a block of code when

391
00:11:35,976 --> 0:11:37,566
your view gains or loses focus.

392
00:11:38,416 --> 0:11:40,246
You can also use the on play

393
00:11:40,246 --> 0:11:42,676
pause command and on exit

394
00:11:42,676 --> 0:11:44,406
command view modifiers to

395
00:11:44,406 --> 0:11:46,146
respond to people pressing the

396
00:11:46,146 --> 0:11:48,316
play pause and menu buttons on

397
00:11:48,316 --> 0:11:49,876
the Siri remote when your view

398
00:11:49,876 --> 0:11:50,586
is focused.

399
00:11:52,716 --> 0:11:53,586
Thank you.

400
00:11:54,176 --> 0:11:57,836
[ Applause ]

401
00:11:58,336 --> 0:12:00,366
Finally, let's dive into some

402
00:11:58,336 --> 0:12:00,366
Finally, let's dive into some

403
00:12:00,366 --> 0:12:02,476
best navigation practices on

404
00:12:02,546 --> 0:12:03,146
TVOS.

405
00:12:05,046 --> 0:12:06,466
Long, vertically scrolling

406
00:12:06,466 --> 0:12:08,556
tables of content with deeply

407
00:12:08,556 --> 0:12:10,756
nested levels of navigation work

408
00:12:10,756 --> 0:12:13,486
great on the Mac or iPhone, but

409
00:12:14,096 --> 0:12:16,146
on TVOS people want an

410
00:12:16,316 --> 0:12:18,036
effortless browsing experience

411
00:12:18,036 --> 0:12:19,596
that emphasizes content.

412
00:12:20,586 --> 0:12:22,686
Using SwiftUI's easily

413
00:12:22,686 --> 0:12:25,096
composable stack views, list

414
00:12:25,096 --> 0:12:27,416
views, and scroll views, we can

415
00:12:27,416 --> 0:12:29,426
create an interface like this on

416
00:12:29,426 --> 0:12:31,836
Landmarks for a TV with vertical

417
00:12:31,836 --> 0:12:33,676
stacks of horizontally scrolling

418
00:12:33,676 --> 0:12:35,396
shelves that really take

419
00:12:35,396 --> 0:12:36,856
advantage of the widescreen

420
00:12:36,856 --> 0:12:39,626
display on the TV and allow

421
00:12:39,626 --> 0:12:40,826
people to browse between

422
00:12:40,826 --> 0:12:42,596
different categories without

423
00:12:42,596 --> 0:12:43,866
having to navigate between

424
00:12:43,866 --> 0:12:44,646
different pages.

425
00:12:46,166 --> 0:12:48,316
First, let's take a look at how

426
00:12:48,316 --> 0:12:49,776
we might structure the top level

427
00:12:49,776 --> 0:12:52,486
navigation of a SwiftUI app for

428
00:12:52,486 --> 0:12:53,226
AppleTV.

429
00:12:54,386 --> 0:12:56,626
Tab view is the primary means of

430
00:12:56,626 --> 0:12:58,856
navigation for many TVOS apps.

431
00:12:59,616 --> 0:13:01,076
It allows you to break your

432
00:12:59,616 --> 0:13:01,076
It allows you to break your

433
00:13:01,076 --> 0:13:02,996
app's content up into distinct

434
00:13:02,996 --> 0:13:04,386
categories that are easy to

435
00:13:04,466 --> 0:13:06,786
switch between and provides a

436
00:13:06,786 --> 0:13:08,796
persistent indicator at the top

437
00:13:08,796 --> 0:13:10,396
of each view that lets people

438
00:13:10,396 --> 0:13:11,616
know where they are in your app.

439
00:13:13,286 --> 0:13:15,396
Navigation view allows you to

440
00:13:15,396 --> 0:13:17,556
nest pages of content and

441
00:13:17,556 --> 0:13:19,236
optionally display a navigation

442
00:13:19,236 --> 0:13:21,206
bar with a title or buttons.

443
00:13:22,756 --> 0:13:24,656
I'd like to make a quick note on

444
00:13:24,656 --> 0:13:26,226
structuring your app's top level

445
00:13:26,226 --> 0:13:29,056
navigation on TVOS versus iOS.

446
00:13:30,516 --> 0:13:33,166
On iOS if you use a tabbed view,

447
00:13:33,166 --> 0:13:34,836
it will typically be the top

448
00:13:34,836 --> 0:13:37,586
level view of your app and each

449
00:13:37,586 --> 0:13:39,656
of its child views may be a

450
00:13:39,656 --> 0:13:41,946
navigation view with your app's

451
00:13:41,946 --> 0:13:43,876
content as the navigation view's

452
00:13:43,876 --> 0:13:44,506
root view.

453
00:13:45,176 --> 0:13:47,016
With this structure, when people

454
00:13:47,016 --> 0:13:48,726
navigate deeper into your app's

455
00:13:48,726 --> 0:13:50,796
content, the tab bar will remain

456
00:13:50,796 --> 0:13:52,576
visible allowing people to

457
00:13:52,576 --> 0:13:55,886
easily switch tabs at any time.

458
00:13:56,076 --> 0:13:58,316
Here on photos the tab bar

459
00:13:58,316 --> 0:14:00,276
remains visible on the bottom of

460
00:13:58,316 --> 0:14:00,276
remains visible on the bottom of

461
00:14:00,276 --> 0:14:02,846
the screen after navigating to

462
00:14:02,846 --> 0:14:06,416
the details page so that people

463
00:14:06,416 --> 0:14:08,686
can easily switch tabs without

464
00:14:08,686 --> 0:14:10,116
having to navigate backwards.

465
00:14:12,516 --> 0:14:17,506
However, on TVOS if you use a

466
00:14:17,506 --> 0:14:19,996
tab view you will actually want

467
00:14:19,996 --> 0:14:21,996
to make the navigation view the

468
00:14:21,996 --> 0:14:24,146
top level view of your app and

469
00:14:24,256 --> 0:14:26,046
set its root view to the tab

470
00:14:26,106 --> 0:14:28,496
view with your app's content as

471
00:14:28,536 --> 0:14:30,186
the direct children of the tab

472
00:14:30,186 --> 0:14:30,456
view.

473
00:14:31,166 --> 0:14:32,776
With this structure, when people

474
00:14:32,776 --> 0:14:34,206
navigate deeper into your app's

475
00:14:34,206 --> 0:14:36,306
content, the top bar will

476
00:14:36,306 --> 0:14:38,156
disappear and we want this

477
00:14:38,196 --> 0:14:40,436
behavior because TVOS is all

478
00:14:40,436 --> 0:14:42,216
about full screen experiences

479
00:14:42,436 --> 0:14:43,706
that emphasize your app's

480
00:14:43,706 --> 0:14:44,246
content.

481
00:14:46,356 --> 0:14:49,246
Here on photos for TV the tab

482
00:14:49,246 --> 0:14:50,826
bar disappears when we navigate

483
00:14:50,826 --> 0:14:52,286
deeper into the album's details

484
00:14:52,286 --> 0:14:54,366
so that people can focus on the

485
00:14:54,366 --> 0:14:58,556
contents of the album.

486
00:14:58,766 --> 0:15:00,776
SwiftUI views are highly

487
00:14:58,766 --> 0:15:00,776
SwiftUI views are highly

488
00:15:00,776 --> 0:15:03,586
composable so it's super easy to

489
00:15:03,586 --> 0:15:05,256
rearrange your app's navigation

490
00:15:05,256 --> 0:15:06,626
structure for TVOS.

491
00:15:07,626 --> 0:15:10,196
The nested relationships between

492
00:15:10,196 --> 0:15:13,526
the tab view, navigation views,

493
00:15:14,996 --> 0:15:17,046
and content views, are all

494
00:15:17,046 --> 0:15:18,836
visually indicated by the

495
00:15:18,836 --> 0:15:22,686
inherent structure of your code.

496
00:15:22,906 --> 0:15:24,706
Now, let's put some of these

497
00:15:24,706 --> 0:15:26,616
principles into practice and

498
00:15:26,666 --> 0:15:28,816
tune up landmarks for TV.

499
00:15:29,916 --> 0:15:31,626
First we will no longer be

500
00:15:31,626 --> 0:15:33,246
needing this navigation bar

501
00:15:33,246 --> 0:15:33,866
button title.

502
00:15:40,536 --> 0:15:43,036
Next we'll get rid of this

503
00:15:43,036 --> 0:15:45,566
navigation button and data

504
00:15:45,566 --> 0:15:46,126
header label.

505
00:15:48,506 --> 0:15:49,826
Let's see how this looks.

506
00:16:05,196 --> 0:16:06,086
This is definitely an

507
00:16:06,086 --> 0:16:07,766
improvement but we've got a ways

508
00:16:07,816 --> 0:16:08,176
to go.

509
00:16:09,056 --> 0:16:11,016
This long, vertically scrolling

510
00:16:11,016 --> 0:16:13,366
list doesn't quite feel right on

511
00:16:13,416 --> 0:16:16,806
TVOS so let's use a scroll view

512
00:16:16,806 --> 0:16:18,796
with a nested HStack instead of

513
00:16:18,796 --> 0:16:18,976
a list.

514
00:16:30,726 --> 0:16:32,796
And let's display all of the

515
00:16:32,796 --> 0:16:34,326
landmarks within a category

516
00:16:35,106 --> 0:16:36,036
inside of a row.

517
00:16:39,876 --> 0:16:41,606
Let's take a closer look at the

518
00:16:42,196 --> 0:16:42,266
row.

519
00:16:43,816 --> 0:16:45,946
It's very similar to category

520
00:16:45,946 --> 0:16:48,016
landmarks with the addition of a

521
00:16:48,016 --> 0:16:50,886
VStack containing a header label

522
00:16:51,286 --> 0:16:53,486
and an HStack wrapping the four

523
00:16:53,486 --> 0:16:54,506
each landmarks.

524
00:16:55,656 --> 0:16:57,996
One thing to note here is that

525
00:16:57,996 --> 0:16:59,466
instead of a plain text view,

526
00:16:59,946 --> 0:17:01,686
I'm using a custom view called

527
00:16:59,946 --> 0:17:01,686
I'm using a custom view called

528
00:17:01,686 --> 0:17:03,976
landmark card as the label for

529
00:17:03,976 --> 0:17:05,906
the navigation button and I'm

530
00:17:05,906 --> 0:17:07,675
sharing this view directly with

531
00:17:07,675 --> 0:17:08,496
the iOS app.

532
00:17:09,526 --> 0:17:10,406
Let's give this a run.

533
00:17:22,086 --> 0:17:23,415
This is starting to feel a lot

534
00:17:23,415 --> 0:17:23,856
better.

535
00:17:24,386 --> 0:17:25,996
By changing only a few lines of

536
00:17:25,996 --> 0:17:29,096
code, I now have a nice, big

537
00:17:29,096 --> 0:17:31,636
inviting buttons with images and

538
00:17:31,636 --> 0:17:33,006
a vertically scrolling list that

539
00:17:33,006 --> 0:17:34,236
really takes advantage of the

540
00:17:34,236 --> 0:17:34,936
wide screen.

541
00:17:36,276 --> 0:17:37,706
One thing I'd like to point out

542
00:17:37,736 --> 0:17:39,226
here is that while we're still

543
00:17:39,226 --> 0:17:41,326
using the exact same navigation

544
00:17:41,326 --> 0:17:43,286
button view in landmarks row,

545
00:17:43,676 --> 0:17:45,196
its appearance has changed.

546
00:17:45,716 --> 0:17:47,286
The chevron on the right hand

547
00:17:47,326 --> 0:17:49,016
side of the view is gone and the

548
00:17:49,016 --> 0:17:50,306
background is different.

549
00:17:50,956 --> 0:17:52,446
This is because navigation

550
00:17:52,446 --> 0:17:54,246
button is no longer being

551
00:17:54,246 --> 0:17:55,936
displayed in the list view and

552
00:17:55,936 --> 0:17:57,676
has automatically adapted its

553
00:17:57,676 --> 0:17:58,156
appearance.

554
00:17:59,446 --> 0:18:01,066
Now, while the horizontally

555
00:17:59,446 --> 0:18:01,066
Now, while the horizontally

556
00:18:01,066 --> 0:18:02,826
scrolling content looks great on

557
00:18:02,826 --> 0:18:04,626
the big screen, it might be a

558
00:18:04,626 --> 0:18:05,986
little too horizontal.

559
00:18:06,566 --> 0:18:07,786
Let's vertically stack the

560
00:18:07,786 --> 0:18:09,786
categories by changing the main

561
00:18:09,786 --> 0:18:10,746
view's HStack to a VStack.

562
00:18:19,126 --> 0:18:21,186
And adding a nested scroll view

563
00:18:21,306 --> 0:18:22,926
around the row's HStack.

564
00:18:31,506 --> 0:18:31,946
Let's give this a run.

565
00:18:40,676 --> 0:18:42,286
Ah, this is feeling really,

566
00:18:42,286 --> 0:18:42,906
really great.

567
00:18:43,536 --> 0:18:45,106
It's super easy to browse

568
00:18:45,106 --> 0:18:47,346
between different categories and

569
00:18:47,636 --> 0:18:49,266
browse the landmarks within each

570
00:18:49,266 --> 0:18:49,876
category.

571
00:18:51,376 --> 0:18:52,806
Finally, let's take a look at

572
00:18:52,806 --> 0:18:54,526
the details page.

573
00:18:55,316 --> 0:18:57,706
Well, this beautiful edge to

574
00:18:57,706 --> 0:18:59,176
edge photograph of the landmark

575
00:18:59,176 --> 0:19:00,896
would be looking pretty nice if

576
00:18:59,176 --> 0:19:00,896
would be looking pretty nice if

577
00:19:00,896 --> 0:19:02,286
it wasn't obscured by all of

578
00:19:02,286 --> 0:19:03,396
this high density text.

579
00:19:04,296 --> 0:19:05,716
Let's see what we can do to make

580
00:19:05,716 --> 0:19:07,036
improvements for AppleTV.

581
00:19:07,036 --> 0:19:09,856
So let's take a look at the

582
00:19:09,856 --> 0:19:10,836
details view.

583
00:19:12,116 --> 0:19:13,216
It's a pretty simple view.

584
00:19:13,826 --> 0:19:15,556
We have a background displaying

585
00:19:15,556 --> 0:19:17,456
a photo of the landmark, a

586
00:19:17,456 --> 0:19:19,376
favorites button, and some

587
00:19:19,376 --> 0:19:20,226
historic details.

588
00:19:21,446 --> 0:19:22,986
Let's try displaying tourism

589
00:19:22,986 --> 0:19:23,476
details.

590
00:19:24,426 --> 0:19:25,386
Try one last time.

591
00:19:33,526 --> 0:19:34,946
Ah, that's looking so much

592
00:19:34,946 --> 0:19:35,306
better.

593
00:19:35,826 --> 0:19:37,596
Only the most relevant details

594
00:19:37,596 --> 0:19:39,536
are being displayed with nice

595
00:19:39,536 --> 0:19:41,006
large fonts that are easy to

596
00:19:41,006 --> 0:19:42,366
read from across the room.

597
00:19:43,416 --> 0:19:44,996
We can mark a few landmarks as

598
00:19:45,056 --> 0:19:46,786
favorited for when we do more

599
00:19:46,786 --> 0:19:48,996
detailed research on landmarks

600
00:19:48,996 --> 0:19:49,626
for MacOS.

601
00:19:52,516 --> 0:19:53,716
Now, back to you Jeff.

602
00:19:54,516 --> 0:19:56,726
[Applause]

603
00:19:57,226 --> 0:19:57,636
&gt;&gt; Thanks Ada.

604
00:19:58,836 --> 0:20:00,496
I love that Ada was able to take

605
00:19:58,836 --> 0:20:00,496
I love that Ada was able to take

606
00:20:01,066 --> 0:20:02,476
a pretty standard list-based UI

607
00:20:02,476 --> 0:20:04,776
and really make it feel at home

608
00:20:04,776 --> 0:20:06,956
on AppleTV just by rearranging a

609
00:20:06,956 --> 0:20:07,596
couple of pieces that she

610
00:20:07,596 --> 0:20:07,956
already had.

611
00:20:08,046 --> 0:20:10,106
I think that really shows how

612
00:20:10,106 --> 0:20:11,416
powerful this framework is.

613
00:20:12,466 --> 0:20:13,586
So now let's turn our attention

614
00:20:13,586 --> 0:20:14,556
to MacOS.

615
00:20:15,586 --> 0:20:17,296
Now there's a lot that goes into

616
00:20:17,296 --> 0:20:18,576
making a great Mac app and I

617
00:20:18,576 --> 0:20:19,806
could probably fill the whole

618
00:20:19,806 --> 0:20:21,746
hour if we had it, but I'm going

619
00:20:21,746 --> 0:20:23,386
to focus on a few key points

620
00:20:23,416 --> 0:20:24,836
that SwiftUI can really help you

621
00:20:24,836 --> 0:20:27,166
with-- high information density,

622
00:20:27,596 --> 0:20:28,816
multi windowing support,

623
00:20:29,286 --> 0:20:31,256
keyboard shortcuts, and support

624
00:20:31,256 --> 0:20:32,526
for the MacBook Pro Touch Bar.

625
00:20:33,086 --> 0:20:35,496
Let's start with high

626
00:20:35,586 --> 0:20:36,536
information density.

627
00:20:39,286 --> 0:20:40,236
We generally have a lot of

628
00:20:40,236 --> 0:20:41,496
screen real estate to work with

629
00:20:41,496 --> 0:20:43,396
on the Mac and so we can use

630
00:20:43,396 --> 0:20:44,756
that to provide more information

631
00:20:44,756 --> 0:20:45,516
at a glance.

632
00:20:46,126 --> 0:20:47,296
That can make it easier to make

633
00:20:47,296 --> 0:20:48,916
more, to make better decisions

634
00:20:48,916 --> 0:20:50,446
and make comparisons if you have

635
00:20:50,446 --> 0:20:52,146
all that information all in one

636
00:20:52,146 --> 0:20:52,706
place.

637
00:20:54,376 --> 0:20:55,976
And because we have a precision

638
00:20:55,976 --> 0:20:57,826
pointing device on the Mac, we

639
00:20:57,826 --> 0:20:59,016
can tolerate smaller click

640
00:20:59,046 --> 0:21:00,766
targets and denser controls.

641
00:20:59,046 --> 0:21:00,766
targets and denser controls.

642
00:21:01,116 --> 0:21:02,366
Now that doesn't mean that your

643
00:21:02,366 --> 0:21:03,726
app should look like an airplane

644
00:21:03,726 --> 0:21:05,116
cockpit, but it does mean that

645
00:21:05,116 --> 0:21:05,846
you can provide more

646
00:21:05,846 --> 0:21:07,416
functionality in one place and

647
00:21:07,416 --> 0:21:09,496
leave more room for your

648
00:21:10,696 --> 0:21:10,976
content.

649
00:21:11,106 --> 0:21:13,456
And the Mac is a great place to

650
00:21:13,456 --> 0:21:15,186
read lots of text content if you

651
00:21:15,186 --> 0:21:16,176
have text content.

652
00:21:17,296 --> 0:21:19,696
So app sessions are often longer

653
00:21:19,696 --> 0:21:21,076
on the Mac and you're usually

654
00:21:21,076 --> 0:21:22,406
using it seated so it's very

655
00:21:22,406 --> 0:21:23,356
comfortable to just scroll

656
00:21:23,356 --> 0:21:27,086
through some text and read it.

657
00:21:27,336 --> 0:21:29,196
Now SwiftUI automatically

658
00:21:29,196 --> 0:21:31,036
adjusts the spacing and paddings

659
00:21:31,036 --> 0:21:32,406
between elements to be

660
00:21:32,406 --> 0:21:34,966
appropriate for the Mac.

661
00:21:35,106 --> 0:21:37,526
And you can use the control size

662
00:21:37,526 --> 0:21:39,446
modifier to access the small and

663
00:21:39,446 --> 0:21:40,926
mini sized controls that we have

664
00:21:40,926 --> 0:21:42,586
available on the MacOS system.

665
00:21:43,006 --> 0:21:44,196
And that might be great if you

666
00:21:44,196 --> 0:21:46,026
want to make an entire inspector

667
00:21:46,366 --> 0:21:47,506
use small controls.

668
00:21:50,686 --> 0:21:51,666
Next multi windowing.

669
00:21:52,646 --> 0:21:53,666
You know multiple windows have

670
00:21:53,666 --> 0:21:55,196
been just a staple of the MacUI

671
00:21:55,196 --> 0:21:57,896
for decades, and people love

672
00:21:57,896 --> 0:21:58,836
using multiple windows.

673
00:21:59,156 --> 0:22:00,366
They love using multiple windows

674
00:21:59,156 --> 0:22:00,366
They love using multiple windows

675
00:22:00,406 --> 0:22:01,716
to compare content across

676
00:22:01,716 --> 0:22:03,406
windows side by side.

677
00:22:04,176 --> 0:22:06,826
It's often nice to pull a single

678
00:22:06,826 --> 0:22:08,406
item out into its own window so

679
00:22:08,406 --> 0:22:09,866
you can focus on it in detail.

680
00:22:10,576 --> 0:22:13,396
And many people love organizing

681
00:22:13,396 --> 0:22:14,626
their windows spatially across

682
00:22:14,656 --> 0:22:16,316
their desktop and spaces.

683
00:22:16,566 --> 0:22:17,836
And these are all capabilities

684
00:22:17,836 --> 0:22:19,246
that you unlock if you support

685
00:22:19,246 --> 0:22:19,946
multi windowing.

686
00:22:20,586 --> 0:22:22,026
And SwiftUI makes this super

687
00:22:22,026 --> 0:22:22,406
easy.

688
00:22:22,456 --> 0:22:24,236
I'll show you an example of that

689
00:22:24,236 --> 0:22:27,736
in a little bit.

690
00:22:27,956 --> 0:22:29,396
Next, keyboard shortcuts.

691
00:22:30,596 --> 0:22:31,746
Keyboard shortcuts are an

692
00:22:31,746 --> 0:22:33,146
essential part of a MacUI.

693
00:22:33,806 --> 0:22:35,546
Mac users and especially power

694
00:22:35,546 --> 0:22:37,406
users love using keyboard

695
00:22:37,406 --> 0:22:38,706
shortcuts to access common

696
00:22:38,706 --> 0:22:40,526
actions and just fly through

697
00:22:40,526 --> 0:22:41,606
your app's navigation.

698
00:22:42,826 --> 0:22:43,756
And supporting keyboard

699
00:22:43,756 --> 0:22:45,356
shortcuts in SwiftUI is really

700
00:22:45,356 --> 0:22:46,366
easy and I'm going to show you

701
00:22:46,426 --> 0:22:47,926
an example.

702
00:22:47,996 --> 0:22:49,156
So let's say we have a tab view.

703
00:22:49,646 --> 0:22:50,756
We've got three tabs for

704
00:22:50,756 --> 0:22:53,186
explore, hikes, and tours, and

705
00:22:53,186 --> 0:22:54,846
what we want to do is bind each

706
00:22:54,846 --> 0:22:56,286
of these tabs to command one,

707
00:22:56,286 --> 0:22:57,776
two, and three, so that we can

708
00:22:57,776 --> 0:22:58,766
switch between them really

709
00:22:58,766 --> 0:22:59,186
quickly.

710
00:23:00,236 --> 0:23:01,406
Now when we want to set up a

711
00:23:01,406 --> 0:23:02,516
keyboard shortcut on the Mac,

712
00:23:02,836 --> 0:23:04,156
the first place that we go is

713
00:23:04,156 --> 0:23:05,496
actually the Mac menu bar.

714
00:23:06,346 --> 0:23:07,316
We like to put keyboard

715
00:23:07,316 --> 0:23:08,796
shortcuts into the Mac menu bar

716
00:23:09,186 --> 0:23:10,116
because it makes them more

717
00:23:10,116 --> 0:23:12,066
discoverable and it ensures that

718
00:23:12,066 --> 0:23:13,656
whatever actions we're hooking

719
00:23:13,656 --> 0:23:15,846
up here are also accessible if

720
00:23:15,846 --> 0:23:17,256
you're using just a mouse.

721
00:23:17,976 --> 0:23:19,776
Now you could do this in code.

722
00:23:19,856 --> 0:23:21,276
I've gone ahead and set it up in

723
00:23:21,276 --> 0:23:22,076
my storyboard.

724
00:23:23,056 --> 0:23:24,606
And then what I've done is

725
00:23:24,606 --> 0:23:26,126
defined some commands for each

726
00:23:26,126 --> 0:23:27,436
of these keyboard shortcuts.

727
00:23:27,686 --> 0:23:31,226
A command is just a name for a

728
00:23:31,226 --> 0:23:33,346
command that can be sent through

729
00:23:33,346 --> 0:23:35,426
the SwiftUI hierarchy and we can

730
00:23:35,426 --> 0:23:37,186
use them to wrap the selectors

731
00:23:37,316 --> 0:23:38,446
sent by each of these menu

732
00:23:38,446 --> 0:23:38,956
items.

733
00:23:42,246 --> 0:23:44,146
Putting it all together, all we

734
00:23:44,146 --> 0:23:45,776
have to do is use the on command

735
00:23:45,776 --> 0:23:47,456
modifier attached to the view

736
00:23:47,456 --> 0:23:48,306
that we want to recognize

737
00:23:48,306 --> 0:23:48,876
commands on.

738
00:23:49,306 --> 0:23:51,576
In this case we pass in the

739
00:23:51,576 --> 0:23:52,726
command that we just defined a

740
00:23:52,726 --> 0:23:54,366
moment ago, as what was a block

741
00:23:54,366 --> 0:23:55,816
of code to run when the command

742
00:23:55,816 --> 0:23:56,376
occurs.

743
00:23:57,746 --> 0:23:58,966
Here we're just setting the

744
00:23:58,966 --> 0:24:00,426
selected tab variable that our

745
00:23:58,966 --> 0:24:00,426
selected tab variable that our

746
00:24:00,426 --> 0:24:01,906
tab view is already bound to.

747
00:24:02,486 --> 0:24:03,386
So when we use one of these

748
00:24:03,416 --> 0:24:04,766
commands, the selected tab

749
00:24:04,766 --> 0:24:06,486
variable updates, the tab view

750
00:24:06,536 --> 0:24:08,286
notices and updates itself as

751
00:24:08,286 --> 0:24:08,576
well.

752
00:24:12,256 --> 0:24:14,026
If you want to know more about

753
00:24:14,206 --> 0:24:15,486
recognizing keyboard shortcuts

754
00:24:15,486 --> 0:24:16,506
and other system level

755
00:24:16,506 --> 0:24:17,796
integrations like this you

756
00:24:17,796 --> 0:24:18,776
should check out the integrating

757
00:24:18,776 --> 0:24:20,186
SwiftUI talk from this year.

758
00:24:22,396 --> 0:24:23,966
Finally, the Touch Bar.

759
00:24:25,286 --> 0:24:26,396
The Touch Bar is another great

760
00:24:26,396 --> 0:24:28,176
way to accelerate common actions

761
00:24:28,176 --> 0:24:28,716
on your Mac.

762
00:24:29,606 --> 0:24:30,636
It brings the most common and

763
00:24:30,636 --> 0:24:32,756
contextual actions right at your

764
00:24:32,756 --> 0:24:33,516
fingertips.

765
00:24:34,066 --> 0:24:36,146
And supporting the Touch Bar in

766
00:24:36,146 --> 0:24:37,816
SwiftUI is easier than ever.

767
00:24:39,246 --> 0:24:40,106
I'll show you an example.

768
00:24:40,866 --> 0:24:42,226
We define a Touch Bar in code

769
00:24:42,356 --> 0:24:43,596
and then just like we're

770
00:24:43,596 --> 0:24:46,336
populating a list or a stack, we

771
00:24:46,336 --> 0:24:47,416
just put the elements that we

772
00:24:47,416 --> 0:24:48,656
want in the Touch Bar one by

773
00:24:48,656 --> 0:24:48,966
one.

774
00:24:50,596 --> 0:24:52,396
And when we want to attach this

775
00:24:52,396 --> 0:24:54,246
to a view, we'll just use the

776
00:24:54,246 --> 0:24:57,116
dot Touch Bar modifier, passing

777
00:24:57,116 --> 0:24:58,156
in the Touch Bar that we're just

778
00:24:58,156 --> 0:24:58,586
defined.

779
00:24:58,586 --> 0:25:00,246
And it's that easy.

780
00:24:58,586 --> 0:25:00,246
And it's that easy.

781
00:25:01,056 --> 0:25:01,966
Whenever this view is the

782
00:25:01,966 --> 0:25:03,546
focused view or the nearest

783
00:25:03,546 --> 0:25:04,936
ancestor of the focused view,

784
00:25:05,056 --> 0:25:06,206
these controls will appear in

785
00:25:06,206 --> 0:25:07,736
the Touch Bar hardware.

786
00:25:10,366 --> 0:25:11,686
Now let's go back to our demo so

787
00:25:11,686 --> 0:25:12,676
we can put some of these into

788
00:25:12,676 --> 0:25:13,896
practice for Landmarks for

789
00:25:13,896 --> 0:25:14,596
MacOS.

790
00:25:18,906 --> 0:25:20,216
Okay here we are in Xcode.

791
00:25:21,606 --> 0:25:22,416
Let's just build and run

792
00:25:22,416 --> 0:25:23,866
Landmarks for MacOS so we can

793
00:25:23,866 --> 0:25:24,816
see where we're starting.

794
00:25:27,636 --> 0:25:30,456
Okay, we have a fairly standard

795
00:25:30,456 --> 0:25:32,306
master detail view here where

796
00:25:32,376 --> 0:25:33,766
we've got a list of landmarks on

797
00:25:33,766 --> 0:25:35,326
the left and the details on the

798
00:25:35,326 --> 0:25:35,596
right.

799
00:25:37,276 --> 0:25:38,496
We've also added some filtering

800
00:25:38,496 --> 0:25:39,936
controls so that we can go

801
00:25:40,066 --> 0:25:42,036
filter down by category or we

802
00:25:42,036 --> 0:25:43,086
can choose to see only our

803
00:25:43,086 --> 0:25:43,706
favorites.

804
00:25:44,306 --> 0:25:47,086
Now the really neat thing is

805
00:25:47,086 --> 0:25:48,506
that this list I've got here on

806
00:25:48,506 --> 0:25:50,016
the left side is actually

807
00:25:50,016 --> 0:25:50,886
something that I shared

808
00:25:50,886 --> 0:25:52,366
completely with iOS.

809
00:25:52,896 --> 0:25:53,606
And that was great.

810
00:25:53,606 --> 0:25:54,716
It gave me a really big head

811
00:25:54,716 --> 0:25:55,936
start to making this app.

812
00:25:56,506 --> 0:25:57,616
And I didn't have to do any

813
00:25:57,616 --> 0:25:58,266
adaptation.

814
00:25:58,266 --> 0:25:59,286
I didn't have to adapt it to a

815
00:25:59,286 --> 0:26:00,486
new data source or delegate

816
00:25:59,286 --> 0:26:00,486
new data source or delegate

817
00:26:00,486 --> 0:26:02,006
protocol or anything like that.

818
00:26:02,436 --> 0:26:03,476
I just got it for free.

819
00:26:04,966 --> 0:26:06,596
But I do think that this list

820
00:26:06,676 --> 0:26:07,916
could look better on the Mac.

821
00:26:08,536 --> 0:26:09,976
I wish I could see more elements

822
00:26:09,976 --> 0:26:11,626
in my scroll view at once and

823
00:26:11,626 --> 0:26:13,066
I'd love to have more details in

824
00:26:13,066 --> 0:26:13,516
each row.

825
00:26:16,286 --> 0:26:17,436
Let's start by taking a look at

826
00:26:17,436 --> 0:26:18,296
how this is defined.

827
00:26:18,956 --> 0:26:22,096
In our landmark list we've gone

828
00:26:22,096 --> 0:26:23,496
ahead and actually defined a Mac

829
00:26:23,596 --> 0:26:25,346
landmark list that wraps this

830
00:26:25,346 --> 0:26:26,856
landmark list which is a common

831
00:26:26,856 --> 0:26:27,736
element that I discussed

832
00:26:27,736 --> 0:26:28,166
earlier.

833
00:26:29,486 --> 0:26:30,496
Structuring our project like

834
00:26:30,536 --> 0:26:32,436
this is really handy because it

835
00:26:32,436 --> 0:26:33,806
means that I can still mostly

836
00:26:33,806 --> 0:26:35,106
share the implementation of this

837
00:26:35,106 --> 0:26:36,706
list but it gives me a place to

838
00:26:36,706 --> 0:26:37,726
put my Mac specific

839
00:26:37,726 --> 0:26:38,576
customizations.

840
00:26:39,126 --> 0:26:41,426
Let's follow this to look at how

841
00:26:41,426 --> 0:26:42,116
this is defined.

842
00:26:42,716 --> 0:26:45,146
We have some filter criteria

843
00:26:45,146 --> 0:26:46,136
that just describes the

844
00:26:46,136 --> 0:26:47,286
configuration of our filter

845
00:26:47,286 --> 0:26:48,186
controls that we looked at

846
00:26:48,186 --> 0:26:48,576
earlier.

847
00:26:49,186 --> 0:26:50,016
We have a binding to the

848
00:26:50,016 --> 0:26:51,486
selected landmarks the list-- so

849
00:26:51,486 --> 0:26:52,796
that the list can show and

850
00:26:52,796 --> 0:26:53,366
modify it.

851
00:26:54,176 --> 0:26:55,376
And we have some user data so

852
00:26:55,406 --> 0:26:56,686
that we know what landmarks are

853
00:26:56,686 --> 0:26:57,196
favorited.

854
00:26:58,346 --> 0:26:59,816
And the list is pretty simple.

855
00:26:59,816 --> 0:27:00,836
You've probably seen this a

856
00:26:59,816 --> 0:27:00,836
You've probably seen this a

857
00:27:00,836 --> 0:27:01,716
number of times already.

858
00:27:01,806 --> 0:27:03,966
We have a list we use for each

859
00:27:03,966 --> 0:27:05,106
to iterate over all of our

860
00:27:05,106 --> 0:27:06,006
landmarks to display.

861
00:27:06,006 --> 0:27:07,926
And then we create a landmark

862
00:27:07,926 --> 0:27:08,676
row for each one.

863
00:27:09,286 --> 0:27:12,156
And this is a hard-coded type

864
00:27:12,156 --> 0:27:12,526
here.

865
00:27:12,526 --> 0:27:13,716
It's just, this is the type of

866
00:27:13,716 --> 0:27:14,676
row that we're using right now.

867
00:27:15,636 --> 0:27:16,876
Now we could start doing

868
00:27:16,876 --> 0:27:18,776
something like poundif [assumed

869
00:27:18,836 --> 0:27:20,626
spelling] to exchange what

870
00:27:20,806 --> 0:27:21,816
landmark where we're using on

871
00:27:21,816 --> 0:27:23,396
each OS but I really don't want

872
00:27:23,396 --> 0:27:24,256
to do this as a hack.

873
00:27:24,426 --> 0:27:25,866
I want to build a tool that I

874
00:27:25,866 --> 0:27:26,666
can reuse.

875
00:27:27,466 --> 0:27:28,526
And so let me show you how I'm

876
00:27:28,526 --> 0:27:28,976
going to do that.

877
00:27:34,476 --> 0:27:39,586
So I'm going to redefine this

878
00:27:43,356 --> 0:27:45,376
list to be generic over the type

879
00:27:45,376 --> 0:27:46,356
of landmark row that we're going

880
00:27:46,356 --> 0:27:46,826
to use.

881
00:27:47,436 --> 0:27:51,726
And then I'm going to add a

882
00:27:51,726 --> 0:27:58,036
property which is a closure from

883
00:27:58,036 --> 0:28:00,306
the landmark to the row type

884
00:27:58,036 --> 0:28:00,306
the landmark to the row type

885
00:28:00,306 --> 0:28:01,326
that we've just defined as a

886
00:28:01,326 --> 0:28:02,666
generic type.

887
00:28:04,086 --> 0:28:06,066
And then instead of using a

888
00:28:06,236 --> 0:28:07,846
hard-coded type here I'm going

889
00:28:07,846 --> 0:28:11,546
to delegate the creation of the

890
00:28:11,596 --> 0:28:13,536
row to my block.

891
00:28:14,326 --> 0:28:17,856
Now, to adapt that in my Mac

892
00:28:17,856 --> 0:28:21,106
landmark list, all I have to do

893
00:28:21,106 --> 0:28:23,776
is update my type definition

894
00:28:23,776 --> 0:28:27,096
here, add the closure that I

895
00:28:27,096 --> 0:28:27,926
just described, the row

896
00:28:27,926 --> 0:28:34,756
provider, and return a row type.

897
00:28:34,946 --> 0:28:36,756
Luckily like any good TV demo I

898
00:28:36,756 --> 0:28:38,206
had one baking in the oven all

899
00:28:38,206 --> 0:28:39,656
along so we'll just use that

900
00:28:40,876 --> 0:28:41,016
one.

901
00:28:44,056 --> 0:28:45,586
Let's take a look at how that

902
00:28:45,586 --> 0:28:46,816
looks now.

903
00:28:49,486 --> 0:28:50,486
Now this is a lot better.

904
00:28:51,206 --> 0:28:52,246
My rows are a little bit more

905
00:28:52,246 --> 0:28:52,766
compact.

906
00:28:53,196 --> 0:28:54,546
I've added some more details to

907
00:28:54,546 --> 0:28:56,186
each one and I can even see at a

908
00:28:56,186 --> 0:28:57,536
glance which ones are favorited,

909
00:28:58,606 --> 0:28:59,516
and that's really nice.

910
00:29:00,086 --> 0:29:01,566
And the great thing here is that

911
00:29:01,566 --> 0:29:02,956
my list implementation is still

912
00:29:02,956 --> 0:29:03,986
completely shared.

913
00:29:04,506 --> 0:29:06,436
So if I still had-- if I had

914
00:29:06,436 --> 0:29:08,236
like really advanced filtering,

915
00:29:08,236 --> 0:29:10,096
sorting, or grouping logic, or

916
00:29:10,096 --> 0:29:11,846
if it was especially fancy,

917
00:29:11,846 --> 0:29:12,706
let's say I had some

918
00:29:12,706 --> 0:29:14,036
asynchronous work that was going

919
00:29:14,036 --> 0:29:15,026
to a database or to the

920
00:29:15,026 --> 0:29:16,826
internet, you know personally I

921
00:29:16,826 --> 0:29:17,896
only want to write that code

922
00:29:17,946 --> 0:29:18,456
once.

923
00:29:18,706 --> 0:29:20,466
And now we can and we don't have

924
00:29:20,496 --> 0:29:22,186
to compromise on our design to

925
00:29:22,186 --> 0:29:22,926
do it.

926
00:29:23,936 --> 0:29:25,676
The next thing that I'd love to

927
00:29:25,676 --> 0:29:27,096
be able to do is to double click

928
00:29:27,096 --> 0:29:28,416
one of these rows to pop it out

929
00:29:28,416 --> 0:29:29,396
into its own window.

930
00:29:29,396 --> 0:29:31,546
And that's also really easy.

931
00:29:31,546 --> 0:29:32,316
I'm going to show you how.

932
00:29:32,996 --> 0:29:34,376
The first thing that we need to

933
00:29:34,376 --> 0:29:37,106
do is create a window and on the

934
00:29:37,106 --> 0:29:38,736
Mac, even when we're defining

935
00:29:38,736 --> 0:29:40,646
our views with SwiftUI, we use

936
00:29:40,646 --> 0:29:42,196
AppKit to define our windows.

937
00:29:45,336 --> 0:29:46,326
Now I could do this in my

938
00:29:46,326 --> 0:29:48,436
storyboard but the code is

939
00:29:48,436 --> 0:29:49,406
really short so I'm just going

940
00:29:49,406 --> 0:29:50,036
to show it to you.

941
00:29:50,896 --> 0:29:52,736
We have a window controller and

942
00:29:53,526 --> 0:29:54,886
then I've defined a convenience

943
00:29:54,886 --> 0:29:56,456
initializer that takes a SwiftUI

944
00:29:56,456 --> 0:29:58,576
view, puts it into a hosting

945
00:29:58,576 --> 0:30:00,456
controller, and then creates a

946
00:29:58,576 --> 0:30:00,456
controller, and then creates a

947
00:30:00,456 --> 0:30:01,716
window around that hosting

948
00:30:01,716 --> 0:30:01,976
controller.

949
00:30:03,286 --> 0:30:04,746
I've also written a little bit

950
00:30:04,746 --> 0:30:06,426
of convenience code here that

951
00:30:06,426 --> 0:30:07,756
just keeps track of which

952
00:30:07,756 --> 0:30:09,316
windows exist per landmark

953
00:30:09,316 --> 0:30:10,876
already so that if I double

954
00:30:10,876 --> 0:30:12,156
click on a row that already has

955
00:30:12,156 --> 0:30:13,456
a window, it'll bring the

956
00:30:13,456 --> 0:30:15,376
existing window front instead of

957
00:30:15,456 --> 0:30:16,766
creating a new one every time.

958
00:30:20,146 --> 0:30:21,486
Let's go back to our list and

959
00:30:21,486 --> 0:30:22,336
add this integration.

960
00:30:23,546 --> 0:30:30,486
So, detail-- let's add a quick

961
00:30:32,006 --> 0:30:32,936
convenience method--

962
00:30:38,596 --> 0:30:42,066
shared-- to show a window for a

963
00:30:42,066 --> 0:30:42,686
given landmark.

964
00:30:43,946 --> 0:30:45,506
And then to attach it to my row,

965
00:30:45,586 --> 0:30:48,496
I can just add a tap action with

966
00:30:48,496 --> 0:30:49,916
a count of two because I only

967
00:30:49,916 --> 0:30:50,816
want it to recognize double

968
00:30:50,816 --> 0:30:54,956
clicks, and then in this tap

969
00:30:54,956 --> 0:30:55,886
action I'll call my show detail

970
00:30:55,886 --> 0:30:56,946
for landmark method.

971
00:31:06,796 --> 0:31:08,546
Now, when I double click on my

972
00:31:08,546 --> 0:31:11,606
rows, I can pull them out into

973
00:31:11,606 --> 0:31:13,006
their own windows and I can put

974
00:31:13,006 --> 0:31:14,006
them side by side, arrange them

975
00:31:14,006 --> 0:31:14,696
however I'd like.

976
00:31:15,236 --> 0:31:16,246
And because these are still

977
00:31:16,246 --> 0:31:18,046
AppKit windows I can use all of

978
00:31:18,046 --> 0:31:19,026
the great windowing features

979
00:31:19,026 --> 0:31:19,736
that are built in.

980
00:31:19,796 --> 0:31:21,446
So if I like tabs I can merge

981
00:31:21,446 --> 0:31:22,556
them into tabs and it's just

982
00:31:22,556 --> 0:31:22,976
like that.

983
00:31:22,976 --> 0:31:24,166
I get that completely for free

984
00:31:24,166 --> 0:31:24,976
which is really great.

985
00:31:25,516 --> 0:31:30,886
[ Applause ]

986
00:31:31,386 --> 0:31:32,566
And with that, I think that the

987
00:31:32,566 --> 0:31:33,446
Mac version of this app is

988
00:31:33,446 --> 0:31:34,666
starting to look pretty good so

989
00:31:34,666 --> 0:31:36,096
I'm going to go ahead and go

990
00:31:36,096 --> 0:31:37,106
back to our slides.

991
00:31:37,106 --> 0:31:40,546
So now that we've seen SwiftUI

992
00:31:40,546 --> 0:31:43,616
on AppleTV and Mac, it's time to

993
00:31:43,616 --> 0:31:44,576
turn our attention to Apple

994
00:31:44,576 --> 0:31:44,986
Watch.

995
00:31:45,486 --> 0:31:46,736
You know SwiftUI is the first

996
00:31:46,736 --> 0:31:47,926
truly native framework for

997
00:31:47,926 --> 0:31:49,236
building apps on Apple Watch and

998
00:31:49,236 --> 0:31:50,346
I think it's going to really

999
00:31:50,516 --> 0:31:52,046
broaden our horizons for what's

1000
00:31:52,046 --> 0:31:52,616
possible.

1001
00:31:52,976 --> 0:31:53,966
And to walk us through some of

1002
00:31:53,966 --> 0:31:55,776
those possibilities, I'd like to

1003
00:31:55,776 --> 0:31:56,786
hand it over to my colleague

1004
00:31:56,816 --> 0:31:57,176
Meghna.

1005
00:31:58,516 --> 0:32:00,556
[ Applause ]

1006
00:31:58,516 --> 0:32:00,556
[ Applause ]

1007
00:32:01,056 --> 0:32:01,506
&gt;&gt; Thank you.

1008
00:32:02,516 --> 0:32:06,276
[Applause]

1009
00:32:06,776 --> 0:32:07,616
Thanks Jeff.

1010
00:32:08,346 --> 0:32:10,686
With SwiftUI and all the amazing

1011
00:32:10,686 --> 0:32:12,686
things you've learned so far you

1012
00:32:12,686 --> 0:32:14,186
are bound to be on track to

1013
00:32:14,186 --> 0:32:15,646
build an app that provides an

1014
00:32:15,716 --> 0:32:17,436
awesome experience on all

1015
00:32:17,436 --> 0:32:18,346
devices.

1016
00:32:18,946 --> 0:32:21,396
Hi, I'm Meghna and now I'm going

1017
00:32:21,396 --> 0:32:22,776
to talk to you about bringing

1018
00:32:22,776 --> 0:32:24,226
this great experience to your

1019
00:32:24,226 --> 0:32:25,786
Apple Watch App.

1020
00:32:26,996 --> 0:32:28,826
While your experience may be

1021
00:32:28,876 --> 0:32:30,476
rooted in your application,

1022
00:32:30,846 --> 0:32:32,846
building for WatchOS means so

1023
00:32:32,846 --> 0:32:33,436
much more.

1024
00:32:34,656 --> 0:32:37,446
Complications, Siri shortcuts,

1025
00:32:37,666 --> 0:32:40,166
and notifications all contribute

1026
00:32:40,166 --> 0:32:41,486
to showing the most timely

1027
00:32:41,486 --> 0:32:43,516
information right on your Apple

1028
00:32:43,516 --> 0:32:44,166
Watch face.

1029
00:32:45,226 --> 0:32:47,226
Apple Watch is all about showing

1030
00:32:47,226 --> 0:32:48,496
the right information at the

1031
00:32:48,496 --> 0:32:49,106
right time.

1032
00:32:50,206 --> 0:32:51,736
For the purposes of this talk,

1033
00:32:52,026 --> 0:32:53,796
I'm going to focus on the app

1034
00:32:53,796 --> 0:32:54,856
and notifications.

1035
00:32:55,526 --> 0:32:58,086
We'll start with talking about

1036
00:32:58,086 --> 0:32:59,576
how SwiftUI allows you to

1037
00:32:59,576 --> 0:33:01,706
display elements and lay out

1038
00:32:59,576 --> 0:33:01,706
display elements and lay out

1039
00:33:01,706 --> 0:33:03,746
your Apps UI like never before.

1040
00:33:05,126 --> 0:33:06,036
But first things first.

1041
00:33:06,036 --> 0:33:08,936
A good rule while building an

1042
00:33:08,936 --> 0:33:11,256
Apple Watch experience is to aim

1043
00:33:11,256 --> 0:33:13,046
for the primary information or

1044
00:33:13,046 --> 0:33:14,976
the most critical action to be

1045
00:33:14,976 --> 0:33:16,596
available within two or three

1046
00:33:16,596 --> 0:33:16,776
taps.

1047
00:33:18,106 --> 0:33:19,726
While designing this experience,

1048
00:33:19,996 --> 0:33:22,036
the aim isn't to shrink down

1049
00:33:22,036 --> 0:33:23,906
your iPhone app but to bring the

1050
00:33:23,906 --> 0:33:26,216
most timely and relevant actions

1051
00:33:26,216 --> 0:33:27,856
to the context of your wrist.

1052
00:33:28,466 --> 0:33:31,176
With that, let's dive into some

1053
00:33:31,236 --> 0:33:33,166
SwiftUI simple concepts.

1054
00:33:34,006 --> 0:33:35,426
If you have content that exceeds

1055
00:33:35,426 --> 0:33:37,386
the bounds of a full screen, you

1056
00:33:37,386 --> 0:33:39,266
can wrap it in a SwiftUI scroll

1057
00:33:39,266 --> 0:33:39,766
view.

1058
00:33:41,056 --> 0:33:43,166
SwiftUI also gives you this

1059
00:33:43,246 --> 0:33:45,236
great new digital crown rotation

1060
00:33:45,236 --> 0:33:47,596
API which lets you completely

1061
00:33:47,596 --> 0:33:49,396
control rotation and haptics.

1062
00:33:49,956 --> 0:33:52,546
This API also opens the door to

1063
00:33:52,666 --> 0:33:54,946
using the digital crown in all

1064
00:33:54,946 --> 0:33:56,676
new ways to modify interface

1065
00:33:56,676 --> 0:33:57,356
elements.

1066
00:33:57,666 --> 0:33:59,136
This is something that was never

1067
00:33:59,136 --> 0:34:02,196
possible before.

1068
00:33:59,136 --> 0:34:02,196
possible before.

1069
00:34:02,346 --> 0:34:04,016
You're also probably familiar

1070
00:34:04,016 --> 0:34:05,596
with groups in WatchKit.

1071
00:34:06,296 --> 0:34:08,666
SwiftUI now gives you much more

1072
00:34:08,666 --> 0:34:10,176
powerful ways to organize your

1073
00:34:10,176 --> 0:34:12,216
content with horizontal and

1074
00:34:12,216 --> 0:34:13,186
vertical stacks.

1075
00:34:14,596 --> 0:34:16,666
Tabulating information has never

1076
00:34:16,666 --> 0:34:18,866
been easier than with lists and

1077
00:34:18,866 --> 0:34:19,976
with list sections.

1078
00:34:22,275 --> 0:34:24,886
Lastly, identifying what your

1079
00:34:24,886 --> 0:34:26,485
users care about the most on

1080
00:34:26,485 --> 0:34:28,716
your Apple Watch App will help

1081
00:34:28,716 --> 0:34:30,186
you decide what kind of data to

1082
00:34:30,186 --> 0:34:30,666
surface.

1083
00:34:31,295 --> 0:34:32,476
With the views and controls

1084
00:34:32,476 --> 0:34:34,596
provided by SwiftUI, you can

1085
00:34:34,596 --> 0:34:35,985
easily build an interface that

1086
00:34:35,985 --> 0:34:37,266
conveys the most crucial

1087
00:34:37,266 --> 0:34:39,045
information first.

1088
00:34:39,815 --> 0:34:42,326
Notifications are a great way to

1089
00:34:42,326 --> 0:34:44,866
give timely updates, however,

1090
00:34:45,295 --> 0:34:47,366
too much information or content

1091
00:34:47,366 --> 0:34:48,616
that isn't useful may lead

1092
00:34:48,646 --> 0:34:50,476
people to turn them off for your

1093
00:34:50,476 --> 0:34:50,706
app.

1094
00:34:52,335 --> 0:34:54,496
SwiftUI gives you the ability to

1095
00:34:54,576 --> 0:34:56,466
easily provide intuitive and

1096
00:34:56,466 --> 0:34:58,526
beneficial controls so people

1097
00:34:58,526 --> 0:35:00,336
can respond from within your app

1098
00:34:58,526 --> 0:35:00,336
can respond from within your app

1099
00:35:00,746 --> 0:35:02,136
and not have to dismiss the

1100
00:35:02,136 --> 0:35:03,026
notification.

1101
00:35:03,996 --> 0:35:05,376
Making your notifications

1102
00:35:05,376 --> 0:35:07,666
actionable as possible, you can

1103
00:35:07,666 --> 0:35:09,846
allow people to quickly respond.

1104
00:35:12,316 --> 0:35:14,346
When you send your notification

1105
00:35:14,406 --> 0:35:16,236
can be just as important as what

1106
00:35:16,236 --> 0:35:17,056
you send in it.

1107
00:35:17,796 --> 0:35:19,376
Try to use what you know about

1108
00:35:19,376 --> 0:35:21,576
how someone uses your app and

1109
00:35:21,576 --> 0:35:22,956
with that information you can

1110
00:35:23,056 --> 0:35:24,836
send the most timely information

1111
00:35:24,836 --> 0:35:27,136
at the most appropriate time.

1112
00:35:28,436 --> 0:35:30,386
With these powerful new SwiftUI

1113
00:35:30,386 --> 0:35:31,986
concepts and a better

1114
00:35:31,986 --> 0:35:33,466
understanding of what makes a

1115
00:35:33,466 --> 0:35:34,786
great Apple Watch experience,

1116
00:35:35,286 --> 0:35:36,166
let's take a look at the

1117
00:35:36,166 --> 0:35:37,736
landmarks app where we put some

1118
00:35:37,736 --> 0:35:39,016
of these concepts to use.

1119
00:35:39,086 --> 0:35:42,436
Using the app you've built with

1120
00:35:42,436 --> 0:35:44,566
SwiftUI for all the other

1121
00:35:44,566 --> 0:35:46,256
devices you're going to have a

1122
00:35:46,256 --> 0:35:47,476
functional Apple Watch App.

1123
00:35:48,046 --> 0:35:50,126
However, it may not be the best

1124
00:35:50,126 --> 0:35:51,206
Apple Watch experience.

1125
00:35:51,586 --> 0:35:53,376
I'm going to show you how, with

1126
00:35:53,376 --> 0:35:55,986
a few tweaks and updates, you're

1127
00:35:55,986 --> 0:35:57,146
going to be able to bring this

1128
00:35:57,146 --> 0:35:58,316
app more in line with the

1129
00:35:58,316 --> 0:36:00,006
context of the wrist.

1130
00:35:58,316 --> 0:36:00,006
context of the wrist.

1131
00:36:02,036 --> 0:36:03,436
Well the first thing you see

1132
00:36:03,436 --> 0:36:04,996
here is that we've built a

1133
00:36:05,226 --> 0:36:06,396
landmarks list.

1134
00:36:07,076 --> 0:36:08,596
For the watch landmarks, we've

1135
00:36:08,596 --> 0:36:10,056
gone ahead and customized the

1136
00:36:10,056 --> 0:36:11,106
details cell.

1137
00:36:11,696 --> 0:36:14,716
We've included an image for some

1138
00:36:14,716 --> 0:36:15,376
context.

1139
00:36:15,996 --> 0:36:17,426
We've included some tool details

1140
00:36:17,666 --> 0:36:19,156
and we've also added some

1141
00:36:19,156 --> 0:36:20,316
contact capabilities.

1142
00:36:21,266 --> 0:36:22,446
Now some of these things like

1143
00:36:22,446 --> 0:36:24,106
the contact capabilities don't

1144
00:36:24,106 --> 0:36:26,296
add too much value to say, an

1145
00:36:26,296 --> 0:36:28,696
AppleTV app but they work great

1146
00:36:28,696 --> 0:36:30,566
inside an Apple Watch App.

1147
00:36:32,416 --> 0:36:34,466
But that was still way too much

1148
00:36:34,466 --> 0:36:36,496
content to scroll so what we

1149
00:36:36,496 --> 0:36:38,166
decided to do is to narrow it

1150
00:36:38,206 --> 0:36:39,586
down to just our favorites.

1151
00:36:40,476 --> 0:36:42,326
To do that we created a simple

1152
00:36:42,376 --> 0:36:43,156
Swift filter.

1153
00:36:44,666 --> 0:36:46,026
Since we've narrowed this data

1154
00:36:46,026 --> 0:36:48,226
down, we also wanted users to

1155
00:36:48,226 --> 0:36:49,776
have an option to see all the

1156
00:36:49,776 --> 0:36:51,046
landmarks if they chose to.

1157
00:36:52,046 --> 0:36:53,686
That was possible with adding

1158
00:36:53,686 --> 0:36:54,296
this button.

1159
00:36:55,146 --> 0:36:56,616
This button simply toggles the

1160
00:36:56,616 --> 0:36:58,226
state between showing all and

1161
00:36:58,226 --> 0:37:00,046
showing favorites based on the

1162
00:36:58,226 --> 0:37:00,046
showing favorites based on the

1163
00:37:00,046 --> 0:37:01,026
view that you're in.

1164
00:37:02,026 --> 0:37:03,716
SwiftUI gives you this unique

1165
00:37:03,716 --> 0:37:05,486
ability to pick the pieces that

1166
00:37:05,486 --> 0:37:07,226
interest you for your app and

1167
00:37:07,226 --> 0:37:09,146
compose the views that work best

1168
00:37:09,336 --> 0:37:10,326
for your interface.

1169
00:37:12,976 --> 0:37:15,306
We wanted to be able to focus on

1170
00:37:15,306 --> 0:37:17,306
each cell more when we scroll.

1171
00:37:18,176 --> 0:37:20,136
With SwiftUI we were able to do

1172
00:37:20,136 --> 0:37:21,736
that with the carousel list

1173
00:37:21,736 --> 0:37:22,186
style.

1174
00:37:23,236 --> 0:37:24,926
This list style is great when

1175
00:37:24,926 --> 0:37:26,716
you have a fewer number of cells

1176
00:37:27,206 --> 0:37:28,516
or when you have cells with

1177
00:37:28,546 --> 0:37:29,766
interactive controls.

1178
00:37:30,556 --> 0:37:33,266
Here our cell has buttons for

1179
00:37:33,266 --> 0:37:35,426
contacting, for making a phone

1180
00:37:35,426 --> 0:37:37,756
call, for adding or removing the

1181
00:37:37,756 --> 0:37:39,556
landmark from favorites, and

1182
00:37:39,556 --> 0:37:41,016
having some navigation

1183
00:37:41,086 --> 0:37:41,826
capabilities.

1184
00:37:44,436 --> 0:37:46,526
Lastly, notifications.

1185
00:37:47,256 --> 0:37:49,256
For the landmarks app we wanted

1186
00:37:49,256 --> 0:37:50,626
to notify you when a new tour

1187
00:37:50,626 --> 0:37:51,326
has been added.

1188
00:37:51,946 --> 0:37:53,556
We wanted to add some images so

1189
00:37:53,556 --> 0:37:55,286
you can decide if you're

1190
00:37:55,286 --> 0:37:56,516
interested in this tour.

1191
00:37:56,996 --> 0:37:58,646
And also give you the ability to

1192
00:37:58,886 --> 0:38:00,026
book it from within the

1193
00:37:58,886 --> 0:38:00,026
book it from within the

1194
00:38:00,026 --> 0:38:00,916
notification.

1195
00:38:02,146 --> 0:38:04,336
Using the power of Swift, you

1196
00:38:04,336 --> 0:38:06,086
not only have the textual

1197
00:38:06,086 --> 0:38:08,286
information but you also have

1198
00:38:08,286 --> 0:38:09,876
this gorgeous, rich animation

1199
00:38:09,876 --> 0:38:11,206
moving the images.

1200
00:38:12,286 --> 0:38:13,606
Instead of just talking to you

1201
00:38:13,606 --> 0:38:14,896
about it I'm going to show you

1202
00:38:14,896 --> 0:38:16,196
how we built this.

1203
00:38:24,336 --> 0:38:25,796
So what you see here is that

1204
00:38:25,796 --> 0:38:28,946
I've created a structure for a

1205
00:38:28,946 --> 0:38:30,316
new tour notification.

1206
00:38:31,066 --> 0:38:32,706
Now I've already gone ahead and

1207
00:38:32,706 --> 0:38:34,526
hooked this notification up to

1208
00:38:34,526 --> 0:38:36,726
my notification controller which

1209
00:38:36,726 --> 0:38:38,996
means that whatever is in this

1210
00:38:38,996 --> 0:38:40,876
body is what you see inside the

1211
00:38:40,876 --> 0:38:42,526
notification after I run this

1212
00:38:42,526 --> 0:38:42,936
scheme.

1213
00:38:44,336 --> 0:38:45,426
This struct [phonetic] takes in

1214
00:38:45,426 --> 0:38:48,066
a landmark as a parameter which

1215
00:38:48,066 --> 0:38:49,256
is what the notification will

1216
00:38:49,256 --> 0:38:52,186
ideally pass to it.

1217
00:38:52,466 --> 0:38:56,266
Now let's go ahead and add some

1218
00:38:56,266 --> 0:38:56,716
text.

1219
00:39:08,426 --> 0:39:10,836
Okay so what we've done here is

1220
00:39:10,836 --> 0:39:13,416
that we've created a stack that

1221
00:39:13,416 --> 0:39:14,396
includes some textual

1222
00:39:14,396 --> 0:39:15,106
information.

1223
00:39:15,316 --> 0:39:17,166
The only reason I have a stack

1224
00:39:17,166 --> 0:39:18,496
here is because I'm going to add

1225
00:39:18,586 --> 0:39:20,926
some more data inside this.

1226
00:39:29,276 --> 0:39:31,156
In here we have decided a struct

1227
00:39:31,196 --> 0:39:33,206
called slideshow which takes in

1228
00:39:33,206 --> 0:39:34,436
an array of strings.

1229
00:39:35,156 --> 0:39:37,626
These strings are image names.

1230
00:39:40,036 --> 0:39:41,696
We have a variable which is

1231
00:39:41,696 --> 0:39:43,036
called the current index which

1232
00:39:43,036 --> 0:39:44,696
is essentially just to track

1233
00:39:45,046 --> 0:39:46,446
which image you're on at this

1234
00:39:46,546 --> 0:39:46,926
point.

1235
00:39:48,956 --> 0:39:50,696
Tour image is a custom

1236
00:39:50,816 --> 0:39:52,046
struct that I've created

1237
00:39:52,176 --> 0:39:53,026
which is a view.

1238
00:39:53,596 --> 0:39:55,826
It takes in an image name that

1239
00:39:55,826 --> 0:39:57,226
aligns the image correctly

1240
00:39:57,226 --> 0:39:58,276
inside my app.

1241
00:39:59,656 --> 0:40:01,376
Let's see how this looks in the

1242
00:39:59,656 --> 0:40:01,376
Let's see how this looks in the

1243
00:40:01,526 --> 0:40:02,946
previews so far.

1244
00:40:17,456 --> 0:40:19,386
Now, the next thing I want to be

1245
00:40:19,386 --> 0:40:24,076
able to add here is an ID for an

1246
00:40:24,076 --> 0:40:24,646
image.

1247
00:40:25,206 --> 0:40:27,406
That way when we animate this we

1248
00:40:27,406 --> 0:40:29,476
will have a proper track of what

1249
00:40:29,476 --> 0:40:30,956
view needs to be inserted and

1250
00:40:30,956 --> 0:40:31,976
what view needs to be removed.

1251
00:40:39,046 --> 0:40:40,686
At this point it looks like--

1252
00:40:40,686 --> 0:40:41,836
okay we have our text here,

1253
00:40:41,836 --> 0:40:43,456
great-- at this point it looks

1254
00:40:43,486 --> 0:40:44,876
like we can go ahead and add

1255
00:40:44,876 --> 0:40:46,956
this slideshow struct inside our

1256
00:40:46,956 --> 0:40:48,186
notifications body.

1257
00:40:50,896 --> 0:40:52,646
All right so once this updates

1258
00:40:52,646 --> 0:40:53,796
we should be able to see this

1259
00:40:54,006 --> 0:40:54,666
view here.

1260
00:40:54,716 --> 0:40:55,906
This looks great.

1261
00:40:56,896 --> 0:40:58,256
Now like we talked about here,

1262
00:40:58,256 --> 0:40:59,376
we should be able to support

1263
00:40:59,376 --> 0:41:01,066
multiple images inside this

1264
00:40:59,376 --> 0:41:01,066
multiple images inside this

1265
00:41:01,066 --> 0:41:01,456
struct.

1266
00:41:01,976 --> 0:41:03,296
For that, we would need to

1267
00:41:03,296 --> 0:41:05,366
calculate the next index.

1268
00:41:06,716 --> 0:41:10,646
Let's go ahead and do that.

1269
00:41:10,846 --> 0:41:12,086
Now in here I'm simply

1270
00:41:12,086 --> 0:41:14,606
calculating the next index and

1271
00:41:14,606 --> 0:41:16,236
I'm updating the current index.

1272
00:41:17,666 --> 0:41:19,886
What I also want to do is

1273
00:41:19,886 --> 0:41:22,846
animate this change.

1274
00:41:23,046 --> 0:41:24,966
With a simple animation, every

1275
00:41:24,966 --> 0:41:27,476
time my current index is updated

1276
00:41:27,476 --> 0:41:29,146
it will have some fluid string

1277
00:41:29,146 --> 0:41:30,516
animation which looks pretty

1278
00:41:30,516 --> 0:41:30,826
good.

1279
00:41:33,856 --> 0:41:36,366
Now, we've created this but we

1280
00:41:36,366 --> 0:41:37,946
haven't actually hooked it up to

1281
00:41:37,946 --> 0:41:38,546
anything.

1282
00:41:39,046 --> 0:41:42,856
Inside our ZStack ideally what

1283
00:41:42,856 --> 0:41:44,156
we'd want is that after a

1284
00:41:44,156 --> 0:41:46,246
particular interval in time we'd

1285
00:41:46,246 --> 0:41:47,686
want the image to change and

1286
00:41:47,686 --> 0:41:52,116
move on to the next image.

1287
00:41:52,456 --> 0:41:55,386
So I created an extension on a

1288
00:41:55,386 --> 0:41:56,996
view which has a view modifier.

1289
00:41:58,306 --> 0:41:59,956
Show next image is a simple view

1290
00:41:59,956 --> 0:42:01,936
extension which essentially

1291
00:41:59,956 --> 0:42:01,936
extension which essentially

1292
00:42:02,436 --> 0:42:04,426
invokes a timer that after every

1293
00:42:04,426 --> 0:42:06,716
two seconds switches on to the

1294
00:42:06,716 --> 0:42:07,926
next image index.

1295
00:42:10,816 --> 0:42:12,616
Now the last thing I want to add

1296
00:42:12,616 --> 0:42:14,566
here is this gorgeous slide

1297
00:42:14,566 --> 0:42:17,836
transition we saw, which is this

1298
00:42:18,586 --> 0:42:22,496
easy command right here.

1299
00:42:22,706 --> 0:42:24,976
Okay, let's see how this looks.

1300
00:42:42,716 --> 0:42:44,636
Okay so we have these images

1301
00:42:44,826 --> 0:42:45,706
scrolling through.

1302
00:42:46,206 --> 0:42:47,906
We have some actions that we had

1303
00:42:47,956 --> 0:42:49,186
hooked up to the notification

1304
00:42:49,186 --> 0:42:50,106
controller before.

1305
00:42:51,536 --> 0:42:52,366
As you can see-- [applause]

1306
00:42:53,066 --> 0:42:53,876
thank you.

1307
00:42:54,516 --> 0:42:57,576
[ Applause ]

1308
00:42:58,076 --> 0:43:00,086
Like you see, with very few

1309
00:42:58,076 --> 0:43:00,086
Like you see, with very few

1310
00:43:00,086 --> 0:43:02,006
changes we were able to create

1311
00:43:02,006 --> 0:43:04,046
this gorgeous, rich notification

1312
00:43:04,406 --> 0:43:06,616
which in WatchOS was never a

1313
00:43:06,616 --> 0:43:07,706
possibility before.

1314
00:43:08,486 --> 0:43:09,946
With that, let's go back to

1315
00:43:09,946 --> 0:43:10,096
Jeff.

1316
00:43:11,516 --> 0:43:15,886
[ Applause ]

1317
00:43:16,386 --> 0:43:17,926
&gt;&gt; All right, thank you Meghna.

1318
00:43:18,696 --> 0:43:19,966
I think it's so cool to see

1319
00:43:19,966 --> 0:43:21,116
something so rich and

1320
00:43:21,116 --> 0:43:22,596
interactive appearing just in

1321
00:43:22,596 --> 0:43:24,026
the context of a notification.

1322
00:43:24,506 --> 0:43:25,626
I think SwiftUI is going to

1323
00:43:25,626 --> 0:43:26,966
really broaden the horizons for

1324
00:43:26,966 --> 0:43:28,596
what's possible on WatchOS.

1325
00:43:29,186 --> 0:43:31,746
Now this has been just a

1326
00:43:31,746 --> 0:43:33,696
whirlwind tour so let's kind of

1327
00:43:34,506 --> 0:43:37,036
revisit and sum up what we've

1328
00:43:37,036 --> 0:43:37,586
learned today.

1329
00:43:38,956 --> 0:43:40,296
The first thing is that when

1330
00:43:40,296 --> 0:43:41,516
we're thinking about bringing an

1331
00:43:41,516 --> 0:43:43,396
application to a given device,

1332
00:43:43,876 --> 0:43:45,646
take a design first approach.

1333
00:43:46,216 --> 0:43:47,416
This isn't about saying that

1334
00:43:47,416 --> 0:43:48,556
I've got this code and I'm going

1335
00:43:48,556 --> 0:43:49,816
to try and get it working over

1336
00:43:49,816 --> 0:43:50,136
here.

1337
00:43:50,726 --> 0:43:51,906
It's thinking about what's the

1338
00:43:51,906 --> 0:43:53,666
right expression for my app on

1339
00:43:53,666 --> 0:43:55,006
this device and working

1340
00:43:55,006 --> 0:43:58,976
backwards from there.

1341
00:43:59,246 --> 0:44:00,476
But, you can share some code

1342
00:43:59,246 --> 0:44:00,476
But, you can share some code

1343
00:44:00,476 --> 0:44:01,146
sometimes.

1344
00:44:01,646 --> 0:44:03,626
For example, we didn't really

1345
00:44:03,626 --> 0:44:05,096
call it out but every demo that

1346
00:44:05,096 --> 0:44:06,776
you saw today is effortlessly

1347
00:44:06,776 --> 0:44:07,816
sharing the model code.

1348
00:44:07,996 --> 0:44:09,156
The model code has been compiled

1349
00:44:09,156 --> 0:44:10,766
into each target identically.

1350
00:44:12,256 --> 0:44:15,006
And you can share view code, you

1351
00:44:15,006 --> 0:44:16,246
just have to use good judgment

1352
00:44:16,246 --> 0:44:17,106
about when you do it.

1353
00:44:17,566 --> 0:44:19,046
And SwiftUI can help you along

1354
00:44:19,046 --> 0:44:21,146
the way by making it really easy

1355
00:44:21,306 --> 0:44:23,396
to re-factor out small, reusable

1356
00:44:23,396 --> 0:44:25,236
components that make more sense

1357
00:44:25,236 --> 0:44:26,876
to reuse across devices.

1358
00:44:29,146 --> 0:44:31,526
And finally, we're not here to

1359
00:44:31,526 --> 0:44:32,926
write once and run anywhere.

1360
00:44:33,406 --> 0:44:34,716
The real power is in your

1361
00:44:34,716 --> 0:44:35,386
knowledge.

1362
00:44:35,806 --> 0:44:37,346
When you learn once, you can

1363
00:44:37,346 --> 0:44:39,366
apply that to any device and I

1364
00:44:39,366 --> 0:44:40,736
think that's really powerful.

1365
00:44:43,286 --> 0:44:44,566
As always, this talk lives

1366
00:44:44,566 --> 0:44:44,956
online.

1367
00:44:44,956 --> 0:44:45,896
There you can see the video

1368
00:44:45,896 --> 0:44:47,286
replay and get associated

1369
00:44:47,286 --> 0:44:49,266
resources and I want to thank

1370
00:44:49,266 --> 0:44:49,776
you for your time.

1371
00:44:49,776 --> 0:44:50,916
We cannot wait to see what you

1372
00:44:50,916 --> 0:44:51,636
build with SwiftUI.

1373
00:44:52,516 --> 0:45:04,320
[ Applause ]
