1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:07,516 --> 0:00:15,546
[掌声]

3
00:00:16,046 --> 0:00:16,606
&gt;&gt; 大家好

4
00:00:16,946 --> 0:00:18,546
我是 Ari 今天我在这里

5
00:00:18,546 --> 0:00:20,046
非常激动地

6
00:00:20,046 --> 0:00:21,866
要告诉你们一些

7
00:00:21,866 --> 0:00:23,466
在 iOS 13 中快捷指令上的一些更新

8
00:00:24,586 --> 0:00:28,256
在 iOS 12 当中引入快捷指令 API 的时候

9
00:00:28,256 --> 0:00:30,106
我们提供了 SiriKit

10
00:00:30,426 --> 0:00:31,836
它可以把你在 App 中的操作

11
00:00:31,836 --> 0:00:33,246
和 Siri 连接起来

12
00:00:35,136 --> 0:00:36,726
在 App 中被提供出来的捷径操作

13
00:00:36,726 --> 0:00:39,216
可以以三种不同的方式被使用

14
00:00:39,796 --> 0:00:41,386
它们可以被用作建议

15
00:00:41,966 --> 0:00:43,196
可以通过语音被使用

16
00:00:43,456 --> 0:00:45,176
他们也可以被用作为

17
00:00:45,176 --> 0:00:46,376
多步快捷指令的一部分

18
00:00:47,066 --> 0:00:50,866
现在通过建议 Siri 会适时地

19
00:00:50,866 --> 0:00:52,496
在搜索过程中

20
00:00:52,496 --> 0:00:54,856
以及屏幕锁定的情况下

21
00:00:54,856 --> 0:00:56,616
建议用户使用开发者编写好的捷径

22
00:00:56,616 --> 0:00:58,096
这样用户每天在使用你们的 App 的时候

23
00:00:58,096 --> 0:00:59,426
所做的各项操作就可以获得更高效的体验

24
00:01:00,536 --> 0:01:03,236
利用声音 顾客可以

25
00:01:03,336 --> 0:01:05,126
通过询问 Siri 来使用

26
00:01:05,126 --> 0:01:06,176
你们 App 中的任意功能

27
00:01:07,866 --> 0:01:09,936
这个功能真的非常强大

28
00:01:10,066 --> 0:01:11,446
因为快捷指令可以以一种非常简单的方式

29
00:01:11,446 --> 0:01:13,336
让用户通过语音来使用你开发的 App

30
00:01:13,336 --> 0:01:14,556
它可以让用户以一种全新的方式

31
00:01:14,556 --> 0:01:15,566
来运用你的 App

32
00:01:16,266 --> 0:01:17,436
无论用户是正在戴着 AirPods 走路

33
00:01:17,436 --> 0:01:19,856
还是在车里用着车载 CarPlay

34
00:01:20,166 --> 0:01:22,016
或是在家用着 HomePod 又或者只是

35
00:01:22,016 --> 0:01:24,136
在房间的另一侧 一切都只需要一句

36
00:01:22,016 --> 0:01:24,136
"Hey Siri"

37
00:01:25,856 --> 0:01:27,626
最后呢 用户还可以在快捷指令 App 中

38
00:01:27,626 --> 0:01:29,466
创建他们自己的快捷指令

39
00:01:29,466 --> 0:01:31,316
这些快捷指令可以包含多个捷径操作

40
00:01:31,316 --> 0:01:33,466
当然也包括由你们的 App 所提供的捷径操作

41
00:01:34,006 --> 0:01:37,136
今年 我们将从更深的层次

42
00:01:37,136 --> 0:01:39,786
来探讨快捷指令 API

43
00:01:39,786 --> 0:01:41,206
我们有一些非常激动人心的 API

44
00:01:41,206 --> 0:01:43,356
更新来分享给你们 它们可以将

45
00:01:43,356 --> 0:01:44,936
语音控制以及多步骤快捷指令提升至

46
00:01:44,936 --> 0:01:45,566
一个更高的级别

47
00:01:46,566 --> 0:01:47,736
那么让我们来看看都更新了些什么吧

48
00:01:50,736 --> 0:01:53,726
在 iOS 13 中快捷指令 App 被重新设计了

49
00:01:53,886 --> 0:01:55,746
它被嵌入到了 iOS 系统中

50
00:01:55,836 --> 0:01:57,516
所以现在人们可以

51
00:01:57,516 --> 0:01:59,796
用目前最简单的方式来发现和使用快捷指令

52
00:02:01,556 --> 0:02:02,816
在我们去年公布了

53
00:02:02,816 --> 0:02:04,506
快捷指令之后

54
00:02:04,506 --> 0:02:05,986
我们从开发者那里听到最大的需求

55
00:02:06,256 --> 0:02:07,666
就是增加参数

56
00:02:08,386 --> 0:02:10,145
所以我们非常激动地想分享给各位开发者们

57
00:02:10,145 --> 0:02:12,106
在 iOS 13 中

58
00:02:12,106 --> 0:02:13,686
我们引入了对参数的支持

59
00:02:13,686 --> 0:02:15,116
通过支持参数可以实现

60
00:02:15,116 --> 0:02:16,476
一种我们称之为对话型捷径的功能

61
00:02:17,326 --> 0:02:19,016
这项功能基本上可以满足

62
00:02:19,016 --> 0:02:20,436
用户与你的 App 进行对话

63
00:02:20,676 --> 0:02:23,186
并且开发者还可以控制这类对话

64
00:02:23,446 --> 0:02:26,176
这样一来你就可以引导用户

65
00:02:26,176 --> 0:02:27,896
提供你所需要的信息

66
00:02:27,896 --> 0:02:29,416
并且可以根据用户的输入及当时的语境

67
00:02:29,416 --> 0:02:31,506
来进行动态响应

68
00:02:32,246 --> 0:02:34,386
在人们使用 Siri 和 App 的时候

69
00:02:34,386 --> 0:02:36,356
这项功能可以提供给人们

70
00:02:36,426 --> 0:02:37,916
一些全新的用例

71
00:02:37,916 --> 0:02:39,116
我很高兴在稍后

72
00:02:39,116 --> 0:02:39,986
告诉各位开发者有关这一功能的详尽信息

73
00:02:40,966 --> 0:02:43,446
之后 我们还为用户增加了一种全新的方式

74
00:02:43,486 --> 0:02:45,016
来自定义开发者提供的快捷指令

75
00:02:45,016 --> 0:02:46,736
用户可以用到一种新的定制 UI

76
00:02:46,786 --> 0:02:48,886
用户在这个 UI 中的设定

77
00:02:48,886 --> 0:02:50,576
和开发者为语音交互定制参数

78
00:02:50,576 --> 0:02:52,306
可以起到相同的效果

79
00:02:52,806 --> 0:02:55,806
你还可以启用输出和变量

80
00:02:55,806 --> 0:02:58,606
等高级方案

81
00:03:00,626 --> 0:03:02,686
最后我们还为 Siri UI

82
00:03:02,686 --> 0:03:04,906
增加了一项更新

83
00:03:04,906 --> 0:03:06,116
它可以让人们更简单地

84
00:03:06,116 --> 0:03:08,126
开启你编写在  App 内的快捷指令

85
00:03:08,676 --> 0:03:11,126
那么 让我们来看一下

86
00:03:11,126 --> 0:03:12,486
这些新的功能

87
00:03:12,486 --> 0:03:14,856
对 Siri 内部的语音体验有些什么意义吧

88
00:03:16,306 --> 0:03:18,626
我有一个非常棒的新的 Siri 快捷指令

89
00:03:18,626 --> 0:03:20,166
给它起名叫 "Add to Instacart"

90
00:03:20,166 --> 0:03:21,806
它的功能就是把东西添加到购物车

91
00:03:22,496 --> 0:03:23,836
所以 有了对话型快捷指令后

92
00:03:23,836 --> 0:03:25,576
当我说 "Add to Instacart"

93
00:03:25,576 --> 0:03:27,726
Instacart 就会通过定制的对话问我

94
00:03:27,726 --> 0:03:30,136
想要把什么添加到购物车

95
00:03:30,336 --> 0:03:32,076
之后我说 香蕉

96
00:03:32,786 --> 0:03:36,026
再之后能就会弹出来

97
00:03:36,026 --> 0:03:37,056
一些香蕉的选项

98
00:03:37,616 --> 0:03:38,726
在消除掉一些歧义的选项后

99
00:03:38,726 --> 0:03:42,256
Instacart 会问我想要具体哪一个香蕉

100
00:03:42,506 --> 0:03:44,216
我说 我想要有机香蕉

101
00:03:44,886 --> 0:03:48,286
所以 如果整个对话的

102
00:03:48,286 --> 0:03:49,796
上下文是顺遂的话

103
00:03:49,796 --> 0:03:51,516
App 可以根据我到目前所说的内容

104
00:03:51,516 --> 0:03:52,526
提出其他问题

105
00:03:53,096 --> 0:03:55,356
在这个用例中 Instacart 会问我

106
00:03:55,356 --> 0:03:57,166
我想要几个香蕉

107
00:03:57,896 --> 0:03:59,746
之后我说 6 个

108
00:04:00,066 --> 0:04:01,686
最后 Siri 会用我给 Instacart

109
00:04:01,686 --> 0:04:03,416
自定义的对话和自定义的视觉效果

110
00:04:03,416 --> 0:04:05,056
来让我知道

111
00:04:05,056 --> 0:04:06,886
这项任务已经完成了

112
00:04:08,236 --> 0:04:10,576
我还有另一个新的快捷指令

113
00:04:10,576 --> 0:04:12,266
这次的指令是来自于 MLB At Bat

114
00:04:12,616 --> 0:04:13,626
这款 App 的效果是

115
00:04:13,626 --> 0:04:15,276
"我只需说一句"Hey Siri 我要看棒球"

116
00:04:15,276 --> 0:04:17,146
之后它就会弹出

117
00:04:17,146 --> 0:04:18,555
我最喜欢的队伍的比赛

118
00:04:19,836 --> 0:04:21,596
不过 现在并没有 Phillies 这支队的比赛

119
00:04:21,596 --> 0:04:22,796
但是在有了

120
00:04:22,796 --> 0:04:24,816
对话型快捷指令之后

121
00:04:24,816 --> 0:04:27,166
MLB App 可以进行适当地检测和恢复

122
00:04:27,636 --> 0:04:28,716
以此来让我知道

123
00:04:28,716 --> 0:04:30,206
现在没有正在进行中的比赛

124
00:04:30,206 --> 0:04:31,696
并且取而代之地给我一些

125
00:04:31,696 --> 0:04:33,406
没准我想看的其他一些比赛的选项

126
00:04:34,456 --> 0:04:36,066
这只是两个粗略的用例

127
00:04:36,066 --> 0:04:37,626
来让大家了解可以用 Siri 做什么

128
00:04:37,626 --> 0:04:39,446
一会儿我们就会深入了解它是怎么实现的

129
00:04:39,976 --> 0:04:41,906
但是首先 让我们来聊聊

130
00:04:41,906 --> 0:04:45,116
在 iOS 13 里快捷指令 App 的一些更新吧

131
00:04:47,016 --> 0:04:50,126
现在快捷指令 App 已经被嵌入到了 iOS 内部

132
00:04:50,596 --> 0:04:52,996
你不需要再从 App Store 里下载它了

133
00:04:53,896 --> 0:04:56,416
就在这个 App 里

134
00:04:56,416 --> 0:04:57,506
用户就可以管理他所有的快捷指令

135
00:04:58,096 --> 0:04:59,656
所以之前在这里设置的一切快捷指令

136
00:04:59,656 --> 0:05:01,316
也都还是在这里面进行设置

137
00:04:59,656 --> 0:05:01,316
也都还是在这里面进行设置

138
00:05:01,896 --> 0:05:06,106
在我的快捷指令标签里

139
00:05:06,106 --> 0:05:07,356
用户可以看到所有的快捷指令

140
00:05:07,356 --> 0:05:08,576
这些快捷指令已经被设定好了

141
00:05:08,576 --> 0:05:10,566
用户可以通过点击或对 Siri

142
00:05:10,616 --> 0:05:12,726
说出快捷指令的名字来启动

143
00:05:13,086 --> 0:05:15,186
无需事先录制短语来激活对应的快捷指令

144
00:05:15,716 --> 0:05:18,756
在 iOS 13 里

145
00:05:18,756 --> 0:05:20,996
我们还设定了一个全新的自动化选项卡

146
00:05:20,996 --> 0:05:22,456
用户可以将某些快捷方式设置为

147
00:05:22,456 --> 0:05:23,896
在某些特定情况下

148
00:05:23,896 --> 0:05:25,846
自动地显示甚至是自动地运行

149
00:05:25,846 --> 0:05:27,716
比如说当他们到达特定的地点

150
00:05:27,716 --> 0:05:29,216
或是进入车内

151
00:05:29,216 --> 0:05:30,666
又或者是在早上

152
00:05:30,666 --> 0:05:33,736
闹钟响起来的时候

153
00:05:34,186 --> 0:05:35,966
现在我们都知道了

154
00:05:36,006 --> 0:05:37,886
快捷指令是非常实用的

155
00:05:37,986 --> 0:05:39,536
但是很难从零开始去使用它们

156
00:05:40,246 --> 0:05:42,286
所以我们在快捷指令中心里

157
00:05:42,526 --> 0:05:44,386
事先准备好了一些快捷指令

158
00:05:44,386 --> 0:05:45,916
用户可以从这里开始使用它们

159
00:05:46,786 --> 0:05:48,536
今年 我们还更新了快捷指令中心

160
00:05:48,536 --> 0:05:50,286
在其中加入了一个新的部分

161
00:05:50,286 --> 0:05:53,376
它叫做来自你的 App 的快捷指令

162
00:05:53,476 --> 0:05:55,476
这里面重点介绍给用户的就是

163
00:05:55,476 --> 0:05:56,996
来自第三方的捷径

164
00:05:56,996 --> 0:05:58,216
其中也包含你的 App

165
00:05:59,216 --> 0:06:00,936
所以这是一个非常好的机会

166
00:05:59,216 --> 0:06:00,936
所以这是一个非常好的机会

167
00:06:00,936 --> 0:06:02,726
可以将你的 App 的操作

168
00:06:02,726 --> 0:06:04,166
展现给用户

169
00:06:04,306 --> 0:06:06,476
即便是用户并未使用你开发的 App

170
00:06:07,456 --> 0:06:10,116
在快捷指令编辑器内

171
00:06:10,156 --> 0:06:12,826
也更新了一个新的自然语言格式

172
00:06:13,066 --> 0:06:15,076
这是它在编辑器里的效果

173
00:06:15,076 --> 0:06:16,546
用户给 Soup Chef 这款 App

174
00:06:16,546 --> 0:06:19,376
建立了一条快捷指令

175
00:06:19,716 --> 0:06:21,536
注意一下我的 App 是如何来公开这条

176
00:06:21,536 --> 0:06:23,996
描述的 "订购一份蛤蜊浓汤"

177
00:06:23,996 --> 0:06:25,556
用户只需点击其中的一个按钮

178
00:06:25,586 --> 0:06:27,106
就可以随时地

179
00:06:27,106 --> 0:06:28,386
调整这些参数

180
00:06:28,386 --> 0:06:30,446
像是点一下 "一份" 或者是 "蛤蜊浓汤"

181
00:06:31,856 --> 0:06:34,246
在这个编辑器里

182
00:06:34,246 --> 0:06:36,086
还有一个新的操控窗格

183
00:06:36,086 --> 0:06:37,156
你可以通过点击或者拖动

184
00:06:37,156 --> 0:06:41,176
添加第三方 App 提供的功能行动

185
00:06:41,176 --> 0:06:43,106
现在 你的 App 的操作

186
00:06:43,106 --> 0:06:45,026
可以提供输出参数

187
00:06:45,026 --> 0:06:46,436
这意味着它可以

188
00:06:46,436 --> 0:06:48,156
和其他的操作进行链接

189
00:06:48,156 --> 0:06:49,216
以此来创造更强大的快捷指令

190
00:06:50,086 --> 0:06:52,076
举例来看 Soup Chef 这款 App

191
00:06:52,506 --> 0:06:54,206
可以提供一个预计完成时间的参数

192
00:06:54,406 --> 0:06:56,646
所以你可以添加这个参数

193
00:06:56,646 --> 0:06:58,336
到“添加新的提醒”的操作之中

194
00:06:58,336 --> 0:06:59,646
来创建一条新的快捷指令

195
00:06:59,646 --> 0:07:01,456
去提醒你在汤做好的时候去拿它

196
00:06:59,646 --> 0:07:01,456
去提醒你在汤做好的时候去拿它

197
00:07:02,046 --> 0:07:04,476
所以 这就是快捷指令

198
00:07:04,476 --> 0:07:05,836
App 的新内容

199
00:07:06,216 --> 0:07:08,646
我们还有一些针对 Siri 的更新

200
00:07:09,936 --> 0:07:11,406
一直以来

201
00:07:11,406 --> 0:07:13,006
用户很难发现

202
00:07:13,006 --> 0:07:14,696
语音功能该如何使用

203
00:07:14,696 --> 0:07:16,066
因为他们不知道

204
00:07:16,106 --> 0:07:18,166
App 的哪些功能可以通过语音来使用

205
00:07:18,166 --> 0:07:19,476
或通过什么样的语音指令可使用这些功能

206
00:07:19,476 --> 0:07:21,766
添加至 Siri 使这件事得以简化

207
00:07:21,846 --> 0:07:23,776
因为人们已经使用了你的 App

208
00:07:24,026 --> 0:07:25,936
因此 你可以在 App 的相关部分

209
00:07:25,936 --> 0:07:27,816
增加一个"添加至 Siri"按钮

210
00:07:27,816 --> 0:07:30,206
不过前提是用户希望用声音

211
00:07:30,206 --> 0:07:32,366
来使用你 App 里的对应功能

212
00:07:33,076 --> 0:07:35,796
在 iOS 13 里 我们重新设计了

213
00:07:35,796 --> 0:07:36,766
添加至 Siri 弹窗

214
00:07:37,176 --> 0:07:39,026
在这一全新的 UI 中

215
00:07:39,026 --> 0:07:40,186
用户可以设置快捷指令

216
00:07:40,186 --> 0:07:40,996
并且无需录入语音短语

217
00:07:41,406 --> 0:07:43,366
用户可以直接输入一个短语

218
00:07:43,366 --> 0:07:44,386
或者可以直接用一个

219
00:07:44,386 --> 0:07:45,376
开发者建议的短语

220
00:07:46,816 --> 0:07:49,156
之后 只要你说出这个短语

221
00:07:49,156 --> 0:07:50,956
Siri 就会执行这条快捷指令

222
00:07:50,956 --> 0:07:54,286
之后如果用户点一下

223
00:07:54,286 --> 0:07:56,806
Do 下面的这个模块

224
00:07:56,806 --> 0:07:58,216
用户就可以自定义这条快捷指令

225
00:07:58,216 --> 0:07:59,996
和在快捷指令 App 里的操作是一样的

226
00:08:00,056 --> 0:08:04,606
现在 我们来深入了解一下执行

227
00:08:04,996 --> 0:08:06,786
首先 我们要介绍一下

228
00:08:06,786 --> 0:08:08,286
如何让用户可以

229
00:08:08,286 --> 0:08:10,026
自定义开发者编好的快捷指令

230
00:08:10,526 --> 0:08:11,796
然后我们将介绍参数的解析

231
00:08:11,796 --> 0:08:13,156
以及如何使用参数解析

232
00:08:13,156 --> 0:08:14,886
来实现出色的语音体验

233
00:08:15,486 --> 0:08:17,736
之后 我们将会讲解

234
00:08:17,736 --> 0:08:19,226
如何处理其中的那些

235
00:08:19,226 --> 0:08:20,436
互相依赖的参数

236
00:08:20,436 --> 0:08:23,056
最后我们将介绍

237
00:08:23,056 --> 0:08:25,186
动态选项和输出

238
00:08:25,186 --> 0:08:26,266
是如何帮助开发者在快捷指令中

239
00:08:26,266 --> 0:08:27,976
将其操作提升至一个新的层级

240
00:08:31,256 --> 0:08:32,895
那么 我们就从一款我开发的 App

241
00:08:32,895 --> 0:08:34,606
的自定义快捷指令

242
00:08:34,606 --> 0:08:35,785
来开始吧

243
00:08:37,046 --> 0:08:40,126
我真的非常喜欢喝汤

244
00:08:40,126 --> 0:08:41,405
所以我在致力于

245
00:08:41,405 --> 0:08:42,885
开发一款叫 Soup Chef 的 App

246
00:08:42,885 --> 0:08:43,976
人们可以利用这个 App 

247
00:08:43,976 --> 0:08:44,826
从自己喜欢饭店里选购汤

248
00:08:45,606 --> 0:08:47,396
我希望这个快捷指令

249
00:08:47,396 --> 0:08:48,676
可以让用户订购汤

250
00:08:48,676 --> 0:08:50,256
并且可以从操作内部

251
00:08:50,466 --> 0:08:51,856
选择要订购几份汤

252
00:08:53,216 --> 0:08:55,126
那么为了实现这个目的

253
00:08:55,276 --> 0:08:58,026
让我们从 Xcode 的 Intent Editor 来开始吧

254
00:08:59,306 --> 0:09:01,856
就像各位所熟知的那样

255
00:08:59,306 --> 0:09:01,856
就像各位所熟知的那样

256
00:09:01,856 --> 0:09:03,376
一个 Intent 就是用户可以在

257
00:09:03,376 --> 0:09:05,696
你的 App 里实现的任务的一个范本

258
00:09:06,006 --> 0:09:07,736
在这个案例当中 主要意图就是订购汤

259
00:09:08,916 --> 0:09:10,846
你应该为用户

260
00:09:10,956 --> 0:09:12,616
完成这项任务

261
00:09:12,616 --> 0:09:14,426
所需要的每条信息

262
00:09:14,426 --> 0:09:16,566
都定义参数

263
00:09:16,846 --> 0:09:18,056
在这儿定义的参数集

264
00:09:18,056 --> 0:09:20,706
既可以用于 Siri

265
00:09:21,036 --> 0:09:22,826
在对话型快捷指令里

266
00:09:22,826 --> 0:09:24,716
提出的问题集之中

267
00:09:25,046 --> 0:09:27,256
也可以用在

268
00:09:27,406 --> 0:09:28,976
快捷指令编辑器内的参数集之中

269
00:09:31,646 --> 0:09:33,626
对于每一个你添加到

270
00:09:33,626 --> 0:09:35,386
Intent 内的参数的类型而言

271
00:09:35,496 --> 0:09:37,236
你可以从系统提供的受支持的类型中

272
00:09:37,286 --> 0:09:38,556
进行选择

273
00:09:39,326 --> 0:09:42,136
或者也可以创建 Enum 枚举类型

274
00:09:42,136 --> 0:09:43,786
在 iOS 13 里

275
00:09:43,786 --> 0:09:44,986
你甚至可以给参数自定义类型

276
00:09:45,486 --> 0:09:48,706
当你选择了某个类型之后

277
00:09:48,706 --> 0:09:49,886
你会看到一些其他设置

278
00:09:49,886 --> 0:09:51,296
这些设置可以让你在这一类型内

279
00:09:51,296 --> 0:09:52,706
自定义一些特定的具体选项

280
00:09:53,146 --> 0:09:54,956
例如 假如我选了字符串类型

281
00:09:55,306 --> 0:09:56,666
我会看到一些新的选项

282
00:09:56,666 --> 0:09:59,036
用来大写或者自动更正

283
00:10:01,236 --> 0:10:03,146
对于这项参数

284
00:10:03,146 --> 0:10:05,606
我打算选一个汤的枚举类型

285
00:10:06,146 --> 0:10:08,496
现在 因为我正在更新现有参数

286
00:10:08,496 --> 0:10:10,156
所以我需要

287
00:10:10,156 --> 0:10:12,396
检查 User Facing 复选框

288
00:10:12,546 --> 0:10:14,036
以便可以将这个参数

289
00:10:14,036 --> 0:10:15,266
公开给 Siri 和

290
00:10:15,266 --> 0:10:16,446
快捷指令 App

291
00:10:17,276 --> 0:10:19,276
对于我添加的新参数

292
00:10:19,276 --> 0:10:22,336
默认情况下会对其进行检查

293
00:10:22,566 --> 0:10:23,826
接下来 我需要为我的参数

294
00:10:23,826 --> 0:10:25,476
填写一些新的信息

295
00:10:25,476 --> 0:10:26,896
我打算给这个参数添加显示名称

296
00:10:26,896 --> 0:10:28,226
因为在快捷指令编辑器里

297
00:10:28,226 --> 0:10:30,446
这个参数需要被显示出来

298
00:10:30,446 --> 0:10:33,196
因为这是一个现有的 Intent

299
00:10:33,196 --> 0:10:35,836
我还需要检查

300
00:10:35,836 --> 0:10:36,926
这个 Intend 的

301
00:10:36,926 --> 0:10:38,696
用户可配置这一复选框

302
00:10:38,896 --> 0:10:39,996
这使得 Intent 可以作为一个整体

303
00:10:39,996 --> 0:10:42,026
被 Siri 和

304
00:10:42,026 --> 0:10:43,286
快捷指令 App 所使用

305
00:10:44,056 --> 0:10:46,636
最后 我需要

306
00:10:46,636 --> 0:10:47,736
填写一个参数 summary

307
00:10:48,576 --> 0:10:49,886
我想在这个参数 summary 里

308
00:10:49,946 --> 0:10:51,866
包括数量和汤的类型这两个参数

309
00:10:51,866 --> 0:10:53,436
以便用户

310
00:10:53,436 --> 0:10:54,596
在快捷指令编辑器中

311
00:10:54,596 --> 0:10:55,896
可以轻松调整它们

312
00:10:56,236 --> 0:10:58,826
所以我添加了一个字符串

313
00:10:58,826 --> 0:11:00,636
叫"订购某个数量的汤"

314
00:10:58,826 --> 0:11:00,636
叫"订购某个数量的汤"

315
00:11:00,636 --> 0:11:02,646
并且我会让 Xcode 将

316
00:11:02,836 --> 0:11:07,896
数量和汤变成变量

317
00:11:07,896 --> 0:11:09,196
仅需这么几步

318
00:11:09,196 --> 0:11:10,906
你就可以将你的捷径操作

319
00:11:10,906 --> 0:11:12,956
像是这样呈现在快捷指令编辑器里

320
00:11:13,036 --> 0:11:16,656
现在 Intent 已经是可配置的了

321
00:11:16,656 --> 0:11:18,786
并且它出现在了

322
00:11:18,786 --> 0:11:19,566
快捷指令 App 之中

323
00:11:19,656 --> 0:11:21,066
它已经是一个现成的参数了

324
00:11:21,266 --> 0:11:23,036
所以 接下来

325
00:11:23,036 --> 0:11:24,526
我们需要做的

326
00:11:24,526 --> 0:11:25,806
就是解析 Intent 的参数

327
00:11:26,376 --> 0:11:28,306
我们来看看怎么操作

328
00:11:28,856 --> 0:11:32,166
在 iOS 12 中

329
00:11:32,166 --> 0:11:33,306
当用户通过 Siri 调用快捷指令时

330
00:11:33,306 --> 0:11:34,406
会经历两个阶段

331
00:11:34,726 --> 0:11:36,656
首先是 Confirm 之后是 Handle

332
00:11:38,316 --> 0:11:40,106
今年 我们又增加了一个阶段

333
00:11:40,106 --> 0:11:41,446
称之为 Resolve

334
00:11:41,686 --> 0:11:42,956
如果你之前

335
00:11:42,956 --> 0:11:43,996
已经使用过 SiriKit API

336
00:11:43,996 --> 0:11:45,516
那么你应该对它很熟悉

337
00:11:49,376 --> 0:11:52,216
在解决这个阶段内

338
00:11:52,216 --> 0:11:53,576
Siri 会遍历你在 Intent 上

339
00:11:53,576 --> 0:11:54,716
定义的每个参数

340
00:11:54,986 --> 0:11:57,746
并要求你的 Intent 处理程序

341
00:11:57,746 --> 0:11:58,786
来解决每个参数

342
00:11:58,786 --> 0:12:00,236
以此来决定是否需要

343
00:11:58,786 --> 0:12:00,236
以此来决定是否需要

344
00:12:00,416 --> 0:12:02,046
询问用户一个问题

345
00:12:02,756 --> 0:12:05,196
对于 Soup Chef 这款 App

346
00:12:05,196 --> 0:12:06,726
Siri 会先解决汤这个参数

347
00:12:06,726 --> 0:12:08,006
Siri 也许会问一个类似

348
00:12:08,006 --> 0:12:09,526
"你想要哪一款汤"这样的问题

349
00:12:10,756 --> 0:12:12,496
接下来 它会解决数量这个参数

350
00:12:12,496 --> 0:12:13,636
会问一个 类似于

351
00:12:13,636 --> 0:12:15,416
"你想要几份汤"这样的问题

352
00:12:16,096 --> 0:12:17,736
在最后

353
00:12:17,736 --> 0:12:19,196
它会问一个关于在哪儿买汤的问题

354
00:12:19,196 --> 0:12:20,726
比如"你想在哪家餐厅订购你的汤"

355
00:12:23,586 --> 0:12:24,776
在解决掉所有参数后

356
00:12:24,776 --> 0:12:26,326
Siri 将调用

357
00:12:26,326 --> 0:12:28,076
和 iOS 12 中相同的

358
00:12:28,076 --> 0:12:29,756
Confirm 和 Handle 方法

359
00:12:29,996 --> 0:12:34,716
那么让我们来看一下

360
00:12:34,716 --> 0:12:36,116
这在代码中是如何实现的吧

361
00:12:36,716 --> 0:12:38,756
因为 Xcode 会自动地

362
00:12:38,756 --> 0:12:40,066
为你定义的每个 Intent

363
00:12:40,066 --> 0:12:42,156
生成一个 Intent 处理协议

364
00:12:42,716 --> 0:12:44,986
并在 Intent 处理程序中

365
00:12:44,986 --> 0:12:46,246
实现该协议

366
00:12:46,456 --> 0:12:49,726
在 iOS 12 中 Xcode 生成了

367
00:12:49,726 --> 0:12:51,586
Confirm 和 Handle 这两个方法

368
00:12:52,306 --> 0:12:53,356
实现这两个方法就可以

369
00:12:53,356 --> 0:12:54,566
保证你的 Intent 被执行

370
00:12:55,636 --> 0:12:57,166
但是在今年 

371
00:12:57,166 --> 0:12:59,146
Xcode 还会为

372
00:12:59,146 --> 0:13:00,086
你标记为可配置的各个参数

373
00:12:59,146 --> 0:13:00,086
你标记为可配置的各个参数

374
00:13:00,086 --> 0:13:01,526
生成名叫 Resolve 的方法

375
00:13:02,006 --> 0:13:05,366
Siri 将调用 Resolve 方法

376
00:13:05,366 --> 0:13:07,696
并按照你在 Xcode 中

377
00:13:07,696 --> 0:13:09,096
定义的参数的顺序

378
00:13:09,096 --> 0:13:10,206
来提出问题

379
00:13:10,206 --> 0:13:12,016
你还可以在 Xcode 中

380
00:13:12,016 --> 0:13:13,676
拖放参数

381
00:13:13,676 --> 0:13:14,946
以更改参数被解决的顺序

382
00:13:18,806 --> 0:13:19,836
调用 Resolve 方法的时候

383
00:13:19,836 --> 0:13:22,206
Intent 将作为输入

384
00:13:22,306 --> 0:13:23,866
被传给 Resolve 方法

385
00:13:24,176 --> 0:13:25,536
其中包括当前

386
00:13:25,536 --> 0:13:27,536
正在被解决的参数的值

387
00:13:28,056 --> 0:13:29,476
所以这个参数的值

388
00:13:29,476 --> 0:13:30,716
可以来自几个不同的地方

389
00:13:31,886 --> 0:13:33,476
当 Resolve 方法第一次被调用

390
00:13:33,476 --> 0:13:35,066
此时快捷指令正在运行

391
00:13:35,066 --> 0:13:37,096
这个参数的值

392
00:13:37,096 --> 0:13:38,436
将在用户创建这个快捷指令的时候

393
00:13:38,436 --> 0:13:41,116
被设定上去

394
00:13:41,476 --> 0:13:43,206
在这个例子中

395
00:13:43,206 --> 0:13:45,096
汤这个域是空的

396
00:13:45,096 --> 0:13:46,526
因为用户没准有的时候想订一份蛤蜊浓汤

397
00:13:46,526 --> 0:13:48,186
而有时又想订一份西红柿浓汤

398
00:13:48,786 --> 0:13:50,036
用户想要创建一个快捷指令

399
00:13:50,036 --> 0:13:50,946
可以都每次

400
00:13:51,186 --> 0:13:53,146
询问他们究竟想要哪一款汤

401
00:13:54,406 --> 0:13:56,066
因此 当调用 Resolve 方法时

402
00:13:56,066 --> 0:13:57,606
汤这个参数将先被填充为空

403
00:13:57,606 --> 0:14:00,086
因为对于这个快捷指令中

404
00:13:57,606 --> 0:14:00,086
因为对于这个快捷指令中

405
00:14:00,086 --> 0:14:01,076
现在没有填充任何内容

406
00:14:01,076 --> 0:14:03,706
会根据用户的选择

407
00:14:03,706 --> 0:14:05,566
把这个参数的值传给 Intent 后

408
00:14:06,026 --> 0:14:07,736
再传给 Resolve 方法

409
00:14:08,196 --> 0:14:09,566
Resolve 方法的职责

410
00:14:09,566 --> 0:14:11,446
就是提供

411
00:14:11,496 --> 0:14:13,466
一个决议结果

412
00:14:13,466 --> 0:14:15,696
来决定 Siri 接下来要做什么

413
00:14:16,206 --> 0:14:19,216
现在 因为汤这个参数现在是空的

414
00:14:19,216 --> 0:14:20,896
所以 Soup Chef 这个 App

415
00:14:20,966 --> 0:14:22,546
就想从用户那里

416
00:14:22,916 --> 0:14:25,356
获得参数的值 通过传递需求值的解析结果

417
00:14:27,276 --> 0:14:29,346
为实现传递需求值这个目的

418
00:14:29,346 --> 0:14:31,056
Siri 会询问用户

419
00:14:31,056 --> 0:14:32,546
用户用声音回应 Siri 的问题

420
00:14:32,546 --> 0:14:34,156
来给这个参数赋上值

421
00:14:35,256 --> 0:14:37,066
所以 Soup Chef 就会问

422
00:14:37,066 --> 0:14:38,066
"你想要哪一款汤"

423
00:14:38,296 --> 0:14:39,746
用户可以回答

424
00:14:39,746 --> 0:14:41,106
像是"蛤蜊浓汤"这样的答案

425
00:14:41,726 --> 0:14:44,266
这样一来 用户回答的

426
00:14:44,266 --> 0:14:46,366
"蛤蜊浓汤" 

427
00:14:46,496 --> 0:14:48,006
就会作为输入 被填充给 Intent

428
00:14:48,006 --> 0:14:49,386
之后这次再调用 Resolve 方法时

429
00:14:49,386 --> 0:14:51,906
它就有了"蛤蜊浓汤"这项输入值

430
00:14:52,136 --> 0:14:55,766
这样 App 就可以决定下一步要做什么了

431
00:14:55,796 --> 0:14:57,456
在上面描述的案例里 蛤蜊浓汤

432
00:14:57,456 --> 0:14:59,416
是一个有效值 因为它是有库存的

433
00:14:59,416 --> 0:15:00,936
所以 Resolve 方法

434
00:14:59,416 --> 0:15:00,936
所以 Resolve 方法

435
00:15:00,936 --> 0:15:02,516
会返回 success

436
00:15:02,516 --> 0:15:03,706
这样 Siri 就能继续

437
00:15:03,706 --> 0:15:05,056
来询问列表里的下一个参数

438
00:15:05,526 --> 0:15:08,806
用户可能会

439
00:15:08,806 --> 0:15:10,176
在设定这条快捷指令的时候

440
00:15:10,176 --> 0:15:11,976
就把汤的值预设成了

441
00:15:11,976 --> 0:15:13,476
蛤蜊浓汤

442
00:15:13,476 --> 0:15:14,346
因为用户希望他的

443
00:15:14,346 --> 0:15:15,426
快捷指令可以每次不必询问他

444
00:15:15,426 --> 0:15:17,316
就直接订购好蛤蜊浓汤

445
00:15:17,316 --> 0:15:19,336
那么初次传递给 Resolve 方法的

446
00:15:19,336 --> 0:15:21,186
就不会是空值了 而是预设好的值

447
00:15:21,486 --> 0:15:22,646
Resolve 方法会直接返回成功执行的结果

448
00:15:22,646 --> 0:15:24,616
之后 Siri 就

449
00:15:24,616 --> 0:15:26,416
压根不会询问有关这个参数的任何问题了

450
00:15:26,416 --> 0:15:30,466
因此 在 Resolve 

451
00:15:30,466 --> 0:15:32,076
被实现的过程中

452
00:15:32,076 --> 0:15:33,606
你需要查看

453
00:15:33,606 --> 0:15:34,766
参数在 Intent 上的当前值

454
00:15:35,286 --> 0:15:36,786
如果参数没有值

455
00:15:36,786 --> 0:15:38,126
你可能需要返回 Needs Value 这个参数

456
00:15:38,126 --> 0:15:39,366
以此来询问用户获得参数值

457
00:15:39,746 --> 0:15:41,856
如果用户已经

458
00:15:41,856 --> 0:15:43,046
在创建快捷指令的时候

459
00:15:43,046 --> 0:15:44,546
预设了参数值

460
00:15:44,736 --> 0:15:45,896
或者是他们回答了 Siri 的问题

461
00:15:45,896 --> 0:15:47,516
这时 可能已经存在了准备好的参数值

462
00:15:47,516 --> 0:15:49,096
在等待被验证

463
00:15:49,096 --> 0:15:52,616
并且等待被顺利地通过

464
00:15:52,876 --> 0:15:54,606
因此 每次调用 Resolve 方法时

465
00:15:54,606 --> 0:15:56,056
都需要提供

466
00:15:56,056 --> 0:15:57,656
对应参数值的解析结果

467
00:15:58,336 --> 0:15:59,586
下面的内容将由 Roman 来介绍

468
00:15:59,586 --> 0:16:01,106
他会告诉各位

469
00:15:59,586 --> 0:16:01,106
他会告诉各位

470
00:16:01,106 --> 0:16:03,236
如何提供出色的解析结果

471
00:16:03,276 --> 0:16:05,106
以便在 Siri 中

472
00:16:05,106 --> 0:16:06,956
提供完善的语音体验

473
00:16:07,606 --> 0:16:15,826
Roman [掌声]

474
00:16:16,326 --> 0:16:16,856
&gt;&gt; 谢谢 Ari

475
00:16:17,236 --> 0:16:19,426
大家好 当我在构建语音体验的时候

476
00:16:19,426 --> 0:16:21,246
我希望可以考虑到

477
00:16:21,456 --> 0:16:22,986
用户可能说出的所有情况

478
00:16:22,986 --> 0:16:25,126
以及该如何妥善地处理它们

479
00:16:25,666 --> 0:16:28,586
比方说 如果用户

480
00:16:28,586 --> 0:16:29,686
想要订购的汤的数量超过了我们的库存

481
00:16:29,686 --> 0:16:31,786
我们应该适当地反馈给用户

482
00:16:32,376 --> 0:16:35,916
如果用户想要

483
00:16:35,916 --> 0:16:37,696
从一家距离很远的店里订购汤

484
00:16:37,696 --> 0:16:39,586
我们可以给用户提供一些距离更近的店铺 来供其选择

485
00:16:40,156 --> 0:16:43,286
Resolve 这一步骤

486
00:16:43,286 --> 0:16:44,736
是开发者改进 Siri 行为的一个契机

487
00:16:44,736 --> 0:16:46,486
并且可以由此来决定

488
00:16:46,546 --> 0:16:48,436
Siri 是否需要向用户提出问题

489
00:16:49,286 --> 0:16:50,746
这里就是开发者处理

490
00:16:50,746 --> 0:16:52,056
用户的所有输入情况的地方

491
00:16:53,296 --> 0:16:54,766
为达成这一目的

492
00:16:54,766 --> 0:16:55,876
你需要提供 Result 的值

493
00:16:57,406 --> 0:16:59,036
共有 6 种类型的

494
00:16:59,036 --> 0:17:00,256
Result 可供选择

495
00:16:59,036 --> 0:17:00,256
Result 可供选择

496
00:17:00,966 --> 0:17:02,266
让我们先从 needsValue 这一类型开始

497
00:17:02,266 --> 0:17:03,836
来看下每一个类型的效果吧

498
00:17:05,425 --> 0:17:06,915
如果用户没有在创建快捷指令的时候

499
00:17:06,915 --> 0:17:08,026
就预设指定的参数值

500
00:17:08,026 --> 0:17:09,675
并且你需要一个参数值才能继续

501
00:17:09,675 --> 0:17:11,356
此时你就可以告诉 Siri

502
00:17:11,356 --> 0:17:12,665
你需要一个值

503
00:17:13,886 --> 0:17:14,836
你需要为每个你可以解决的参数

504
00:17:15,076 --> 0:17:16,796
提供一个你设定的

505
00:17:16,796 --> 0:17:17,965
自定义提示对话框

506
00:17:19,046 --> 0:17:20,896
为此 你需要打开 Intent editor

507
00:17:21,296 --> 0:17:22,455
选择 Siri Dialog 对话框

508
00:17:22,455 --> 0:17:23,556
以此来进行参数的询问

509
00:17:23,556 --> 0:17:25,425
然后在提示文本字段中

510
00:17:25,425 --> 0:17:26,976
输入自定义的提示内容

511
00:17:30,426 --> 0:17:32,096
如果你返回的是 disambiguation

512
00:17:32,266 --> 0:17:34,046
Siri 将要求用户

513
00:17:34,086 --> 0:17:35,066
从值的列表中进行选择

514
00:17:35,846 --> 0:17:37,476
如果参数中的值不明确

515
00:17:37,476 --> 0:17:39,096
或者是你只有几个选项

516
00:17:39,096 --> 0:17:40,276
可供用户选择的话

517
00:17:40,336 --> 0:17:41,746
使用这种参数是一个很好的选择

518
00:17:45,576 --> 0:17:47,356
你可以在 Intent editor 中

519
00:17:47,586 --> 0:17:53,116
自定义 disambiguation 项的对话框

520
00:17:53,556 --> 0:17:55,076
返回 unsupported 的结果

521
00:17:55,076 --> 0:17:56,576
将会告诉 Siri 你的 App 

522
00:17:56,576 --> 0:17:57,326
不支持提供的值

523
00:17:58,466 --> 0:17:59,946
比方说 如果用户尝试订购超出库存的汤

524
00:17:59,946 --> 0:18:01,616
我们可以通过告诉用户

525
00:17:59,946 --> 0:18:01,616
我们可以通过告诉用户

526
00:18:01,616 --> 0:18:02,906
没有足够的库存

527
00:18:02,906 --> 0:18:05,786
来做出合理的回应

528
00:18:06,006 --> 0:18:07,416
之后 Siri 会重新

529
00:18:07,416 --> 0:18:08,156
提示用户录入合理的值

530
00:18:08,766 --> 0:18:12,866
我们可以

531
00:18:13,066 --> 0:18:14,136
在 Xcode 的 Validation Error 部分下

532
00:18:14,526 --> 0:18:16,616
定义要像用户显示的错误信息

533
00:18:18,126 --> 0:18:19,556
Xcode 将自动地为开发者

534
00:18:19,556 --> 0:18:21,076
在 Intent editor 中

535
00:18:21,076 --> 0:18:22,916
指定的最小值和最大值

536
00:18:22,916 --> 0:18:27,006
提供默认行为

537
00:18:27,226 --> 0:18:29,226
返回 confirmation Required 时

538
00:18:29,226 --> 0:18:30,786
Siri 将会要求

539
00:18:30,786 --> 0:18:31,966
用户确认参数值

540
00:18:33,066 --> 0:18:34,586
如果不清楚用户是否真的

541
00:18:34,586 --> 0:18:35,756
想要这个参数值

542
00:18:35,756 --> 0:18:37,566
或者是你有一个十分强烈的猜测

543
00:18:37,566 --> 0:18:38,846
且仍想与用户确认参数值

544
00:18:38,846 --> 0:18:40,856
那么就使用这个项吧

545
00:18:44,736 --> 0:18:46,116
同样的 你也可以在 Intent editor 里的

546
00:18:46,166 --> 0:18:51,066
Parameter Confirmation 选项中进行自定义

547
00:18:51,596 --> 0:18:53,146
返回 success 意味着

548
00:18:53,146 --> 0:18:54,956
获得了一个合理的参数值

549
00:18:54,956 --> 0:18:58,886
Siri 便将会去询问下一个参数

550
00:18:58,966 --> 0:19:00,626
返回 notRequired 意味着

551
00:18:58,966 --> 0:19:00,626
返回 notRequired 意味着

552
00:19:00,626 --> 0:19:02,976
你的 App 在这个参数上

553
00:19:02,976 --> 0:19:04,376
这一次并不需要参数值

554
00:19:04,906 --> 0:19:06,376
因此 Siri 将会跳过这个参数

555
00:19:06,376 --> 0:19:07,136
并去询问下一个参数

556
00:19:09,706 --> 0:19:10,846
在 Siri 和快捷指令 App 中

557
00:19:10,846 --> 0:19:11,676
快捷指令被执行时

558
00:19:11,676 --> 0:19:15,186
都会调用 Result 方法

559
00:19:15,936 --> 0:19:17,186
因此 你需要确保

560
00:19:17,186 --> 0:19:18,726
你的代码在这两个环境下

561
00:19:18,946 --> 0:19:19,966
都能正常运行

562
00:19:22,496 --> 0:19:24,216
现在 让我们来看看

563
00:19:24,216 --> 0:19:26,226
执行流程是什么样的

564
00:19:27,056 --> 0:19:28,886
这就是新的快捷指令 App

565
00:19:29,356 --> 0:19:30,686
在我的快捷指令中

566
00:19:30,686 --> 0:19:31,826
你可以看到我创建的

567
00:19:31,826 --> 0:19:33,746
或是从快捷指令中心中添加的所有快捷指令

568
00:19:34,176 --> 0:19:36,256
我们现在要创建一个新的快捷指令

569
00:19:36,256 --> 0:19:37,996
点击创建快捷指令按钮

570
00:19:38,606 --> 0:19:41,666
在快捷指令编辑器里

571
00:19:41,666 --> 0:19:42,816
我需要把操作添加到快捷指令里

572
00:19:43,416 --> 0:19:44,716
为此 我们点击

573
00:19:44,716 --> 0:19:47,646
添加操作按钮

574
00:19:48,126 --> 0:19:49,766
我日常会使用 Soup Chef 来订购

575
00:19:49,766 --> 0:19:51,486
美味的汤

576
00:19:51,486 --> 0:19:53,046
所以这里已经给了我订购汤的建议选项

577
00:19:54,626 --> 0:19:56,876
所有需要做的就是给它起个名字

578
00:19:58,266 --> 0:19:59,236
这就是我的快捷指令

579
00:19:59,476 --> 0:20:00,436
所有我需要做的就是

580
00:19:59,476 --> 0:20:00,436
所有我需要做的就是

581
00:20:00,436 --> 0:20:02,976
给它一个名字再把它存到“我的快捷指令”中

582
00:20:03,046 --> 0:20:04,156
为实现这件事

583
00:20:04,326 --> 0:20:08,366
我需要点击“下一步”按钮

584
00:20:08,506 --> 0:20:09,766
我们就给这个快捷指令命名为 "Order Soup"

585
00:20:14,176 --> 0:20:15,156
现在 我们来调用

586
00:20:15,156 --> 0:20:16,506
快捷指令和 Siri 试下效果

587
00:20:17,096 --> 0:20:17,976
"Hey Siri 点汤"

588
00:20:22,356 --> 0:20:23,236
&gt;&gt; "你想要什么汤"

589
00:20:23,776 --> 0:20:25,146
今天有 3 种汤可供选择

590
00:20:25,626 --> 0:20:28,106
蛤蜊浓汤 西红柿浓汤

591
00:20:28,106 --> 0:20:29,716
或者是鸡肉面条汤

592
00:20:29,716 --> 0:20:30,256
&gt;&gt; 蛤蜊浓汤

593
00:20:30,256 --> 0:20:34,346
&gt;&gt; 有两家餐馆离你比较近

594
00:20:34,406 --> 0:20:36,036
你想从哪一家订购

595
00:20:36,136 --> 0:20:40,086
38801 S Sheridan Blvd 或者是

596
00:20:40,086 --> 0:20:40,976
7401 S Lewis Ave

597
00:20:41,046 --> 0:20:43,936
&gt;&gt; 第一家吧

598
00:20:44,716 --> 0:20:45,966
&gt;&gt; 准备好订购了么

599
00:20:46,206 --> 0:20:48,436
&gt;&gt; 是的

600
00:20:49,096 --> 0:20:51,126
&gt;&gt; 好的 订购中

601
00:20:51,126 --> 0:20:53,266
总共花费 3.75 美元

602
00:20:54,066 --> 0:20:56,266
你订购的蛤蜊浓汤将在 10 分钟后准备完成

603
00:20:57,066 --> 0:20:58,526
&gt;&gt; 就这样

604
00:20:58,526 --> 0:21:00,616
我就用快捷指令和 Siri 订购好了汤

605
00:20:58,526 --> 0:21:00,616
我就用快捷指令和 Siri 订购好了汤

606
00:21:01,516 --> 0:21:06,996
[掌声]

607
00:21:07,496 --> 0:21:08,816
现在 我们来试着在快捷指令 App 内

608
00:21:08,816 --> 0:21:10,176
编写一个一样的快捷指令吧

609
00:21:10,666 --> 0:21:11,936
不过在此之前

610
00:21:11,936 --> 0:21:13,086
我想先自定义一下这个快捷指令

611
00:21:16,216 --> 0:21:17,316
我打算点一下汤这个位置

612
00:21:17,316 --> 0:21:18,936
之后再选某个汤

613
00:21:18,936 --> 0:21:20,176
选一个我日常从 Soup Chef 里订购的汤吧

614
00:21:20,896 --> 0:21:24,976
我打算选蛤蜊浓汤

615
00:21:29,996 --> 0:21:31,146
现在我要点击完成

616
00:21:31,146 --> 0:21:32,156
来保存这个快捷指令

617
00:21:35,886 --> 0:21:37,076
我们尝试一下只靠简单点击

618
00:21:37,076 --> 0:21:38,596
在快捷指令 App 中

619
00:21:38,596 --> 0:21:41,826
编写一个快捷方式

620
00:21:41,986 --> 0:21:43,256
所以在这里我得到了一个

621
00:21:43,256 --> 0:21:45,056
消除了歧义项的商店的选项列表

622
00:21:45,056 --> 0:21:46,716
和在 Siri 里的也是一样的

623
00:21:47,046 --> 0:21:48,676
我打算选第一个选项

624
00:21:52,446 --> 0:21:54,046
然后完成 这样我就又点了一份汤

625
00:21:54,326 --> 0:21:56,566
我猜可能我今天特别饿吧

626
00:22:02,746 --> 0:22:04,236
现在 我们来看一下

627
00:22:04,296 --> 0:22:06,566
如何让我们的快捷指令更进一层

628
00:22:08,286 --> 0:22:09,576
要是不用走出家门

629
00:22:09,576 --> 0:22:11,166
就能有汤送货上门 岂不是更好

630
00:22:12,796 --> 0:22:14,166
所以 我要在在汤店送货上门

631
00:22:14,166 --> 0:22:15,776
这一过程中加点新东西

632
00:22:16,426 --> 0:22:19,356
在快捷指令编辑器里

633
00:22:19,356 --> 0:22:20,626
我希望用户可以在

634
00:22:20,756 --> 0:22:22,646
到店自取和送货上门中进行选择

635
00:22:23,266 --> 0:22:26,026
如果用户选择送货上门

636
00:22:26,026 --> 0:22:27,126
我们就给他展示一个模块

637
00:22:27,126 --> 0:22:29,566
让他们可以决定把汤送到哪儿

638
00:22:30,016 --> 0:22:31,686
比方说 送到现在用户所在的位置

639
00:22:36,476 --> 0:22:37,966
如果他们选择到店自取

640
00:22:37,966 --> 0:22:39,196
就给用户展示另一个模块

641
00:22:39,196 --> 0:22:40,756
让他们来决定订购哪一家店的汤

642
00:22:42,496 --> 0:22:44,216
为了达成这一目标

643
00:22:44,216 --> 0:22:45,566
我们需要在 Intent editor 里

644
00:22:45,566 --> 0:22:48,536
设置并表达好参数的联动 

645
00:22:48,606 --> 0:22:49,926
那么让我们先来

646
00:22:49,926 --> 0:22:51,516
看一下这其中涉及的所有参数

647
00:22:52,196 --> 0:22:53,416
我们设定一个 orderType 参数

648
00:22:53,786 --> 0:22:55,056
它包含两个值

649
00:22:55,386 --> 0:22:56,766
delivery 和 pickup

650
00:22:57,696 --> 0:22:58,706
对于送货上门的 deliverLocation 和

651
00:22:58,706 --> 0:23:02,206
到店自取的 storeLocation 也创建好参数

652
00:22:58,706 --> 0:23:02,206
到店自取的 storeLocation 也创建好参数

653
00:23:02,326 --> 0:23:03,296
现在 让我们来看看

654
00:23:03,296 --> 0:23:04,296
参数的联动这一部分

655
00:23:05,746 --> 0:23:07,216
现在对于 deliverLocation 这个参数

656
00:23:07,216 --> 0:23:08,836
我把他的 Parent Parameter 设定成

657
00:23:08,836 --> 0:23:11,046
orderType 类型的

658
00:23:11,936 --> 0:23:13,226
我想仅当 Parent Parameter 参数的值

659
00:23:13,226 --> 0:23:14,586
是 delivery 的时候

660
00:23:14,586 --> 0:23:15,806
才展现出

661
00:23:15,806 --> 0:23:17,886
deliveryLocation 的参数值

662
00:23:17,966 --> 0:23:19,376
对于 storeLocation 参数

663
00:23:19,376 --> 0:23:20,446
也想实现相同的效果

664
00:23:20,786 --> 0:23:22,066
就是只在 Parent Parameter 的

665
00:23:22,116 --> 0:23:23,976
是 pickup 的时候再显示

666
00:23:27,696 --> 0:23:29,086
所以现在我的用户

667
00:23:29,086 --> 0:23:30,956
可以简单地选择不同的点单方式

668
00:23:33,776 --> 0:23:34,976
我们来看下怎么在 Xcode 里进行实现

669
00:23:37,296 --> 0:23:39,486
这里我先打开 Soup Chef 项目

670
00:23:40,196 --> 0:23:42,036
我们来选择 Intent definition 文件

671
00:23:42,396 --> 0:23:44,066
这里是定义所有的 Intent 的地方

672
00:23:45,566 --> 0:23:47,916
对于订购汤我已经写好了一些 Intent

673
00:23:48,726 --> 0:23:49,966
我们来看一下这些参数

674
00:23:50,406 --> 0:23:51,956
我们有 soup quantity

675
00:23:52,266 --> 0:23:53,606
toppings store location 这 4 个参数

676
00:23:54,426 --> 0:23:55,576
现在我们向下滚动到

677
00:23:55,576 --> 0:23:56,846
Xcode 中称之为

678
00:23:56,906 --> 0:23:57,756
Shortcuts App 的新部分

679
00:23:59,096 --> 0:24:00,556
在这儿 你可以看到

680
00:23:59,096 --> 0:24:00,556
在这儿 你可以看到

681
00:24:00,556 --> 0:24:01,806
快捷指令 App 支持的

682
00:24:01,806 --> 0:24:03,246
所有的参数组合

683
00:24:03,246 --> 0:24:04,286
以及相应的 summary

684
00:24:04,966 --> 0:24:06,286
你还可以在这个 App 里

685
00:24:06,336 --> 0:24:07,516
查看它的外观预览

686
00:24:09,116 --> 0:24:10,086
所以现在我们

687
00:24:10,086 --> 0:24:12,146
有 storeLocation 这个参数

688
00:24:12,146 --> 0:24:13,566
并且有 summary 来呈现实际的效果

689
00:24:13,566 --> 0:24:15,996
其效果就是"从 storeLocation

690
00:24:16,926 --> 0:24:18,666
我没把 toppings 这个参数

691
00:24:18,666 --> 0:24:21,646
放到我的 summary 里 

692
00:24:22,766 --> 0:24:24,746
现在我们继续

693
00:24:24,746 --> 0:24:26,516
添加一组参数来支持送货上门

694
00:24:27,296 --> 0:24:28,306
我们点击一下

695
00:24:28,306 --> 0:24:30,336
(+) 按钮并添加一个新的参数

696
00:24:30,336 --> 0:24:31,426
叫做 orderType

697
00:24:31,426 --> 0:24:34,086
我要为这个参数

698
00:24:34,086 --> 0:24:34,936
指定一个显示的名称

699
00:24:43,716 --> 0:24:45,096
所以 如果我向下滚动到

700
00:24:45,096 --> 0:24:46,286
Shortcuts App 的部分

701
00:24:46,286 --> 0:24:47,076
就可以看到 Order Type

702
00:24:47,076 --> 0:24:48,266
现在出现在了 More Options 下面

703
00:24:48,266 --> 0:24:49,776
并且它还被还自动地

704
00:24:49,776 --> 0:24:51,526
添加到了 Support Parameter 组合当中

705
00:24:52,336 --> 0:24:55,176
我们现在滑动到上面 让我们为 Order Type 参数

706
00:24:55,176 --> 0:24:58,136
指定一个新类型 我想要添加一个新的枚举型

707
00:24:59,316 --> 0:25:00,556
我们就把它称之为 Order Type 枚举型吧

708
00:24:59,316 --> 0:25:00,556
我们就把它称之为 Order Type 枚举型吧

709
00:25:04,046 --> 0:25:05,266
我也会为这个类型

710
00:25:05,266 --> 0:25:08,746
指定一个显示名称

711
00:25:08,956 --> 0:25:10,236
现在我们添加了两个用例

712
00:25:10,336 --> 0:25:11,276
delivery 和 pickup 

713
00:25:11,776 --> 0:25:12,846
我们先来看 delivery

714
00:25:12,956 --> 0:25:14,996
我们点一下这个 (+) 按钮

715
00:25:16,166 --> 0:25:20,776
输入 delivery 我将指定显示名称

716
00:25:21,386 --> 0:25:24,966
我们再为 pickup 添加一个用例

717
00:25:28,486 --> 0:25:29,376
也给它提供一个显示名称

718
00:25:30,116 --> 0:25:33,926
由于用户在和 Siri 交谈时

719
00:25:33,966 --> 0:25:35,386
可能会把 pickup 说成是 take out

720
00:25:35,386 --> 0:25:37,216
我们可以把这个添加成

721
00:25:37,216 --> 0:25:38,016
一个可以匹配的语素

722
00:25:38,506 --> 0:25:39,526
所以我要点击一下

723
00:25:39,526 --> 0:25:40,906
(+) 按钮 再添加一个 take out

724
00:25:44,766 --> 0:25:49,186
现在我们返回到 Intent

725
00:25:49,256 --> 0:25:50,176
现在我们需要添加一个新参数

726
00:25:50,216 --> 0:25:51,976
叫做 Delivery Location

727
00:25:56,526 --> 0:25:57,936
我们给它也设定一个显示名称

728
00:25:57,936 --> 0:25:59,526
就叫 Delivery Location

729
00:26:04,936 --> 0:26:06,776
现在我们滑动下来

730
00:26:07,576 --> 0:26:08,106
看看我们在下面有了什么新的东西

731
00:26:08,916 --> 0:26:10,816
我们仍然只有一个单独的参数组合

732
00:26:10,926 --> 0:26:12,436
而其中包含着所有的参数

733
00:26:13,656 --> 0:26:14,546
但是同时包含

734
00:26:14,546 --> 0:26:15,876
Store Location 和 Delivery Location

735
00:26:15,876 --> 0:26:17,266
是没有意义的

736
00:26:17,586 --> 0:26:21,846
我们来修复它 我们向上滑动到

737
00:26:21,846 --> 0:26:22,606
参数这个部分

738
00:26:23,736 --> 0:26:24,636
选中 Store Location 这个参数

739
00:26:24,636 --> 0:26:26,566
展开 Relationship 这个部分

740
00:26:26,566 --> 0:26:28,376
再把它的 Parent parameter

741
00:26:28,376 --> 0:26:29,956
设置成 orderType

742
00:26:29,956 --> 0:26:32,506
我希望只有当 Parent Parameter 的

743
00:26:32,506 --> 0:26:34,476
oderType 的值是 pickup 的时候

744
00:26:34,476 --> 0:26:36,386
才显示我的 Store Location 参数

745
00:26:37,856 --> 0:26:39,036
同样的 我们把

746
00:26:39,036 --> 0:26:40,346
Delivery Location 参数也设置成这样

747
00:26:41,196 --> 0:26:42,226
我们把 Parent Parameter 这里

748
00:26:42,226 --> 0:26:43,286
设置成 orderType.

749
00:26:44,396 --> 0:26:46,816
仅当 parent 值是 delivery 时才显示

750
00:26:48,046 --> 0:26:49,046
接下来我们滑动到

751
00:26:49,046 --> 0:26:50,366
Shortcuts App 的部分

752
00:26:50,366 --> 0:26:51,036
看一下其中的变化

753
00:26:51,696 --> 0:26:53,196
Xcode 自动地为我们创建了

754
00:26:53,266 --> 0:26:54,706
两个新的参数组合

755
00:26:55,226 --> 0:26:56,356
我们给它们分别

756
00:26:56,356 --> 0:26:58,506
加上一个合适的 summary

757
00:26:58,506 --> 0:27:02,566
即 订购某数量的某种汤

758
00:26:58,506 --> 0:27:02,566
即 订购某数量的某种汤

759
00:27:04,126 --> 0:27:08,366
以某种提货方式送达

760
00:27:09,296 --> 0:27:11,086
现在我们试想下

761
00:27:11,086 --> 0:27:12,106
我们的用户在快捷指令 App 里

762
00:27:12,106 --> 0:27:13,546
点击了 orderType 这个模块

763
00:27:13,616 --> 0:27:15,666
并且选择了 pickup 的提货方式 这样的话

764
00:27:15,666 --> 0:27:16,556
用户看到的就是包含有

765
00:27:16,596 --> 0:27:17,596
storeLocation 即门店地址的参数组合

766
00:27:19,706 --> 0:27:21,066
所以我已经有了

767
00:27:21,066 --> 0:27:22,186
这个参数组合的 summary 摘要

768
00:27:22,826 --> 0:27:24,856
但现在的状况是只有 pickup 一个值

769
00:27:25,126 --> 0:27:26,326
我们现在把这个参数

770
00:27:26,376 --> 0:27:27,596
转变成 orderType

771
00:27:28,716 --> 0:27:30,496
最后我们需要更新

772
00:27:30,496 --> 0:27:31,576
包含有 deliveryLocation 的

773
00:27:32,296 --> 0:27:34,036
参数组合

774
00:27:34,966 --> 0:27:36,056
我们来编写它的 summary

775
00:27:36,386 --> 0:27:41,216
订购某数量的汤

776
00:27:41,666 --> 0:27:46,126
以某种提货方式送到送货地点

777
00:27:47,366 --> 0:27:48,966
我们回退一下

778
00:27:48,966 --> 0:27:49,926
来看一下我们刚都做了些什么

779
00:27:50,676 --> 0:27:52,286
首先我们在 Intent 里定义好

780
00:27:52,286 --> 0:27:53,596
Parent 参数 和 Child 参数

781
00:27:54,456 --> 0:27:56,796
之后 我们给 Parent 参数 和 Child 参数

782
00:27:56,796 --> 0:27:57,886
两者之间建立了关联

783
00:27:58,616 --> 0:27:59,846
之后 在最后我们更新了

784
00:27:59,916 --> 0:28:01,186
每个参数组合的的 summary

785
00:27:59,916 --> 0:28:01,186
每个参数组合的的 summary

786
00:28:01,186 --> 0:28:02,976
使它们在快捷指令 App 里

787
00:28:02,976 --> 0:28:03,696
的呈现更好的效果

788
00:28:07,016 --> 0:28:08,756
现在 我们来看下怎么实现动态选项

789
00:28:10,926 --> 0:28:12,486
大多数的参数如 String 型

790
00:28:12,486 --> 0:28:14,116
或 Number 型 都有明显的输入

791
00:28:14,116 --> 0:28:16,576
机制 快捷指令 App 中的一个输入字段

792
00:28:18,766 --> 0:28:20,226
我们会要求用户

793
00:28:20,226 --> 0:28:21,236
在这里指定某个具体的值

794
00:28:25,006 --> 0:28:26,476
对于某些参数的值

795
00:28:26,476 --> 0:28:28,176
开发者也许会希望用户

796
00:28:28,276 --> 0:28:30,196
在创建快捷指令时

797
00:28:30,196 --> 0:28:31,426
可以从一组固定的值中进行挑选

798
00:28:31,426 --> 0:28:33,036
而这些固定的值是由

799
00:28:33,036 --> 0:28:34,286
你的 App 动态提供的

800
00:28:35,496 --> 0:28:36,826
对于我的 Store Location 这个参数

801
00:28:37,006 --> 0:28:38,196
我希望用户可以

802
00:28:38,196 --> 0:28:40,256
选择一家理他比较近的门店

803
00:28:42,756 --> 0:28:44,076
为了达到这个目的

804
00:28:44,076 --> 0:28:45,036
我需要检查一下 Location parameter 的

805
00:28:45,036 --> 0:28:47,666
Dynamic Options 的复选框是否被选中

806
00:28:50,226 --> 0:28:51,946
当我这么操作之后

807
00:28:52,016 --> 0:28:53,906
Xcode 会生成两个额外的

808
00:28:53,906 --> 0:28:55,106
Intent 协议处理方法

809
00:28:56,056 --> 0:28:57,446
第一种提供的是商店的

810
00:28:57,446 --> 0:28:58,256
位置的选项

811
00:28:58,906 --> 0:29:00,476
而另一种方法提供的是

812
00:28:58,906 --> 0:29:00,476
而另一种方法提供的是

813
00:29:00,476 --> 0:29:01,846
默认的值

814
00:29:05,566 --> 0:29:06,916
在你的 provide options 这个方法里

815
00:29:07,226 --> 0:29:08,666
你需要在 completion 当中

816
00:29:08,666 --> 0:29:11,146
返回当前可能的值的集合

817
00:29:16,496 --> 0:29:17,306
在勾选了 Dynamic Options 之后

818
00:29:17,306 --> 0:29:18,496
你也可以给这个参数

819
00:29:18,496 --> 0:29:20,956
提供一些默认值

820
00:29:26,346 --> 0:29:27,676
当你设置了 Dynamic Options 的参数

821
00:29:27,676 --> 0:29:29,726
被快捷指令执行的时候

822
00:29:29,726 --> 0:29:31,986
并且你在 Reslove 方法

823
00:29:31,986 --> 0:29:33,596
会把需要的值

824
00:29:33,596 --> 0:29:35,296
给成功地返回了出来

825
00:29:35,296 --> 0:29:37,376
Siri 会自动地以

826
00:29:37,376 --> 0:29:38,556
消除歧义项的格式

827
00:29:38,556 --> 0:29:40,526
把你返回过来的选项列表

828
00:29:40,526 --> 0:29:41,646
给显示出来

829
00:29:46,136 --> 0:29:47,596
最后 我希望用户可以

830
00:29:47,596 --> 0:29:48,686
在单个快捷指令当中

831
00:29:48,686 --> 0:29:49,926
进行多种操作

832
00:29:51,796 --> 0:29:53,096
比方说 一个用户

833
00:29:53,096 --> 0:29:54,586
在创建下订单的快捷指令的时候

834
00:29:54,586 --> 0:29:57,726
可以把他所下的订单的

835
00:29:57,726 --> 0:29:58,976
详细信息发送给

836
00:29:59,076 --> 0:29:59,976
经常帮他取货的朋友那里

837
00:30:02,806 --> 0:30:04,476
在 Xcode 11 中 

838
00:30:04,476 --> 0:30:05,706
我们引入了定义自定义选项卡的功能

839
00:30:05,706 --> 0:30:08,856
你可以在 Intent 和 Intent responses

840
00:30:08,856 --> 0:30:10,416
当中使用这一功能

841
00:30:10,986 --> 0:30:12,146
所以 现在我要重新定义一个类型

842
00:30:12,146 --> 0:30:13,626
就叫做 Order Details

843
00:30:13,626 --> 0:30:15,906
其中包含的就是

844
00:30:15,906 --> 0:30:17,236
我想传递个下一个操作的

845
00:30:17,236 --> 0:30:18,436
适当的信息集合

846
00:30:19,776 --> 0:30:20,996
在这个例子中

847
00:30:20,996 --> 0:30:22,746
我打算定义两个属性

848
00:30:22,746 --> 0:30:23,976
订单的估计时间和总计的钱数

849
00:30:26,476 --> 0:30:27,876
你也许之前听说过一个 Intent response

850
00:30:27,876 --> 0:30:29,406
其实就是执行尝试的

851
00:30:29,406 --> 0:30:30,456
逻辑结果

852
00:30:31,306 --> 0:30:32,376
它包含有一些属性

853
00:30:32,416 --> 0:30:33,646
这些属性可以把结果传达给用户

854
00:30:35,096 --> 0:30:36,476
为了增加一个输出

855
00:30:36,476 --> 0:30:37,986
我需要给我自定义的这个 orderDetails 类型

856
00:30:38,066 --> 0:30:38,976
定义一个新的属性

857
00:30:42,046 --> 0:30:43,976
之后 我需要把这个属性

858
00:30:43,976 --> 0:30:45,176
指定成输出

859
00:30:50,106 --> 0:30:51,536
当用户点击快捷指令编辑器中的

860
00:30:51,536 --> 0:30:53,296
Order Details 变量的时候

861
00:30:53,296 --> 0:30:55,216
他们会看到一些选项

862
00:30:55,266 --> 0:30:56,776
这些选项就是我定义在

863
00:30:56,776 --> 0:30:58,056
我自定义的 orderDetails 这个类型中的

864
00:30:58,056 --> 0:30:58,936
属性当中的值

865
00:31:03,226 --> 0:31:04,366
你也可以在 Siri 的相应模块中

866
00:31:04,366 --> 0:31:06,056
使用你自定义类型当中的

867
00:31:06,396 --> 0:31:07,296
成员变量

868
00:31:07,776 --> 0:31:09,056
所以这个相同的数据

869
00:31:09,056 --> 0:31:11,416
可以作为输出被同时使用

870
00:31:14,896 --> 0:31:15,906
今天你们可以学到

871
00:31:15,906 --> 0:31:17,186
如何让你的用户

872
00:31:17,186 --> 0:31:19,726
在全新的快捷指令 App 内

873
00:31:18,666 --> 0:31:20,836
定制想要的快捷指令 你还了解到了

874
00:31:20,836 --> 0:31:22,536
如何在 Siri 中提供对话型快捷指令

875
00:31:23,616 --> 0:31:24,806
只要你为每个 Intent 选择好

876
00:31:24,806 --> 0:31:26,506
正确的参数

877
00:31:26,556 --> 0:31:27,716
你的 App 就能够在

878
00:31:27,876 --> 0:31:28,736
每一个步骤中正确的相应并回馈用户

879
00:31:29,966 --> 0:31:31,346
你还可以在快捷指令 App 中

880
00:31:31,346 --> 0:31:33,306
利用其他 App 的输出

881
00:31:33,306 --> 0:31:36,576
来增强你的快捷指令

882
00:31:36,936 --> 0:31:37,846
我们的另一场讲座在星期五

883
00:31:37,846 --> 0:31:39,026
我的同事将和大家谈论

884
00:31:39,026 --> 0:31:41,256
如何设计和建立良好的快捷指令

885
00:31:41,816 --> 0:31:43,096
在这一整个星期内

886
00:31:43,206 --> 0:31:43,736
你也可以来实验室找我们

887
00:31:44,756 --> 0:31:46,226
十分感谢你们的到来

888
00:31:46,226 --> 0:31:47,416
希望你们享受接下来的会议

889
00:31:48,516 --> 0:31:58,500
[掌声]
