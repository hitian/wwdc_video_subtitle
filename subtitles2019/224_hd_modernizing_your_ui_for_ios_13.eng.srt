1
00:00:00,506 --> 0:00:05,500
[ Music ]

2
00:00:10,516 --> 0:00:14,396
[ Applause ]

3
00:00:14,896 --> 0:00:15,806
&gt;&gt; Hello everybody.

4
00:00:16,806 --> 0:00:19,816
This is modernizing your UI for

5
00:00:19,816 --> 0:00:20,796
iOS 13.

6
00:00:22,126 --> 0:00:23,046
I'm David Duncan.

7
00:00:23,666 --> 0:00:25,006
I'll be joined on stage shortly

8
00:00:25,006 --> 0:00:27,486
by my colleagues Russell, Kyle,

9
00:00:28,786 --> 0:00:30,496
James, and Mohammed.

10
00:00:32,026 --> 0:00:34,306
In this section, we're going to

11
00:00:34,306 --> 0:00:35,566
talk about six things.

12
00:00:36,446 --> 0:00:38,076
Preparing your applications for

13
00:00:38,116 --> 0:00:38,736
Flexible UI.

14
00:00:40,156 --> 0:00:41,736
Improvements that we've made the

15
00:00:41,736 --> 0:00:43,166
appearance of Bars and

16
00:00:43,166 --> 0:00:46,006
Presentations, new Features

17
00:00:46,006 --> 0:00:47,466
available to your applications

18
00:00:47,816 --> 0:00:50,806
for searching, and new Gestures

19
00:00:50,806 --> 0:00:53,026
that you can adopt to make your

20
00:00:53,026 --> 0:00:55,936
apps more productive and to take

21
00:00:55,936 --> 0:00:57,036
care of cases that you haven't

22
00:00:57,036 --> 0:00:58,456
been able to do before.

23
00:00:59,306 --> 0:01:00,446
And finally, we're going to go

24
00:00:59,306 --> 0:01:00,446
And finally, we're going to go

25
00:01:00,446 --> 0:01:02,176
over those new contextual menu

26
00:01:02,176 --> 0:01:03,506
APIs that were hinted at earlier

27
00:01:03,506 --> 0:01:03,936
this week.

28
00:01:04,446 --> 0:01:07,116
And so with this, let's talk

29
00:01:07,116 --> 0:01:10,636
about Flexible UI.

30
00:01:11,006 --> 0:01:13,146
So, the first step to being

31
00:01:13,196 --> 0:01:15,656
flexible is what your users

32
00:01:15,656 --> 0:01:17,356
first see when they launch your

33
00:01:17,356 --> 0:01:17,956
application.

34
00:01:19,236 --> 0:01:20,246
Storyboards have been the

35
00:01:20,246 --> 0:01:22,176
preferred way to specify your

36
00:01:22,176 --> 0:01:24,196
Launch UI since iOS 8.

37
00:01:25,516 --> 0:01:26,466
But there's also been another

38
00:01:26,466 --> 0:01:27,336
alternative that we've been

39
00:01:27,336 --> 0:01:28,566
supporting since the beginning

40
00:01:28,566 --> 0:01:31,416
of iOS, and that's Launch

41
00:01:31,416 --> 0:01:31,856
Images.

42
00:01:32,786 --> 0:01:34,316
Launch Images require you to

43
00:01:34,316 --> 0:01:35,746
specify an image for every

44
00:01:35,746 --> 0:01:37,586
screen size you support and

45
00:01:37,586 --> 0:01:39,286
revise whenever we introduce new

46
00:01:39,286 --> 0:01:40,056
screen sizes.

47
00:01:41,176 --> 0:01:42,366
And that's not very flexible.

48
00:01:43,546 --> 0:01:45,996
And so, this spring, April 2020,

49
00:01:46,516 --> 0:01:48,926
applications that linked iOS 13

50
00:01:49,036 --> 0:01:51,456
SDK must provide a Launch

51
00:01:51,456 --> 0:01:52,726
Storyboard in order to be

52
00:01:52,726 --> 0:01:53,666
accepted at the app store.

53
00:01:54,146 --> 0:01:55,416
You will no longer be able to

54
00:01:55,596 --> 0:01:57,326
submit with only Launch images.

55
00:01:58,246 --> 0:01:59,316
So, if you haven't adopted

56
00:01:59,316 --> 0:02:01,076
Launch Storyboards yet, now is a

57
00:01:59,316 --> 0:02:01,076
Launch Storyboards yet, now is a

58
00:02:01,116 --> 0:02:03,496
fantastic time to do so, and

59
00:02:03,496 --> 0:02:05,156
that leads on to the next change

60
00:02:05,206 --> 0:02:06,226
that you may have also already

61
00:02:06,226 --> 0:02:08,906
heard of, which is that in the

62
00:02:08,976 --> 0:02:11,306
past if we introduce new

63
00:02:11,306 --> 0:02:12,866
hardware with a new screen size,

64
00:02:13,306 --> 0:02:14,436
your apps were letterboxed.

65
00:02:15,266 --> 0:02:16,956
Well, we're not going to be

66
00:02:16,956 --> 0:02:17,766
doing that anymore either.

67
00:02:18,556 --> 0:02:20,076
So, if you application is built

68
00:02:20,076 --> 0:02:23,016
against the iOS 13 SDK, then it

69
00:02:23,016 --> 0:02:24,956
will always be displayed at the

70
00:02:24,956 --> 0:02:26,806
native full-screen resolution of

71
00:02:26,806 --> 0:02:27,186
the screen.

72
00:02:28,156 --> 0:02:29,296
So we expect that any

73
00:02:29,296 --> 0:02:30,976
application built against iOS13

74
00:02:31,096 --> 0:02:33,866
will use the appropriate APIs to

75
00:02:33,866 --> 0:02:35,846
ensure correct layout at any

76
00:02:35,846 --> 0:02:36,196
size.

77
00:02:37,446 --> 0:02:39,656
Now, for those of you building

78
00:02:39,656 --> 0:02:42,206
iPad applications, this also

79
00:02:42,206 --> 0:02:43,646
applies to split screen

80
00:02:43,646 --> 0:02:44,416
multitasking.

81
00:02:45,446 --> 0:02:48,096
So, we are going to expect that

82
00:02:48,096 --> 0:02:49,696
most applications, unless you

83
00:02:49,696 --> 0:02:50,606
need to provide a truly

84
00:02:50,606 --> 0:02:52,896
immersive experience, are going

85
00:02:52,896 --> 0:02:53,916
to support split screen

86
00:02:53,916 --> 0:02:55,946
multitasking, so that you can

87
00:02:55,946 --> 0:02:58,056
have your app in any size next

88
00:02:58,056 --> 0:02:59,966
to any other application that

89
00:02:59,966 --> 0:03:01,246
might be running that the user

90
00:02:59,966 --> 0:03:01,246
might be running that the user

91
00:03:01,246 --> 0:03:02,036
has chosen.

92
00:03:03,206 --> 0:03:06,266
Now, if you're not certain if

93
00:03:06,266 --> 0:03:07,186
you can support all these

94
00:03:07,186 --> 0:03:08,696
resizing modes and everything

95
00:03:08,696 --> 0:03:10,136
else, another thing you might

96
00:03:10,136 --> 0:03:11,406
want to try, especially if you

97
00:03:11,406 --> 0:03:12,746
have an iPad app, is just

98
00:03:12,746 --> 0:03:14,026
building for the Mac, with new

99
00:03:14,026 --> 0:03:15,716
supports that we're adding in

100
00:03:15,826 --> 0:03:16,986
macOS Catalina.

101
00:03:17,536 --> 0:03:18,596
And you can just do that at your

102
00:03:18,596 --> 0:03:19,626
desk to make sure that you

103
00:03:19,626 --> 0:03:21,606
resize nicely for any size.

104
00:03:22,526 --> 0:03:25,556
So, to sum up all that before,

105
00:03:26,296 --> 0:03:27,856
adopt Launch Storyboards.

106
00:03:28,026 --> 0:03:29,626
They're going to be the way to

107
00:03:29,626 --> 0:03:31,856
get that Launch UI when the user

108
00:03:31,966 --> 0:03:33,316
first launches your application.

109
00:03:34,156 --> 0:03:35,746
Make sure your application

110
00:03:35,746 --> 0:03:37,726
properly lays out to support any

111
00:03:37,726 --> 0:03:40,346
size, whether it is the smallest

112
00:03:40,346 --> 0:03:42,536
iPhone to the largest iPad.

113
00:03:43,036 --> 0:03:44,686
And finally, make sure that your

114
00:03:44,686 --> 0:03:46,606
iPad applications also support

115
00:03:46,696 --> 0:03:47,936
Split Screen Multitasking.

116
00:03:48,446 --> 0:03:49,566
Because all of this is going to

117
00:03:49,566 --> 0:03:51,636
be required by April 2020.

118
00:03:52,886 --> 0:03:54,886
And so with that, let's

119
00:03:54,886 --> 0:03:56,716
transition to Bars.

120
00:03:58,736 --> 0:04:03,846
So, if you look at your phone

121
00:03:58,736 --> 0:04:03,846
So, if you look at your phone

122
00:04:03,846 --> 0:04:04,886
after installing the beta,

123
00:04:06,056 --> 0:04:08,126
you'll see this is how

124
00:04:08,316 --> 0:04:08,906
nav bars now appears.

125
00:04:09,436 --> 0:04:10,566
When you scroll all the way up

126
00:04:10,566 --> 0:04:12,206
to the top, we drop out the

127
00:04:12,206 --> 0:04:14,196
background, and when we scroll

128
00:04:14,196 --> 0:04:15,556
something underneath, we bring

129
00:04:15,556 --> 0:04:16,836
it back in smoothly and

130
00:04:17,156 --> 0:04:17,946
transparently.

131
00:04:19,505 --> 0:04:22,776
Similarly, on iPad, if you have

132
00:04:22,776 --> 0:04:24,866
split view controller, we do

133
00:04:24,866 --> 0:04:26,256
this independently for both

134
00:04:26,256 --> 0:04:27,906
sides regardless of if the

135
00:04:27,906 --> 0:04:30,226
details support large titles or

136
00:04:30,226 --> 0:04:32,926
not, and they independently

137
00:04:32,926 --> 0:04:33,406
respond.

138
00:04:33,476 --> 0:04:35,016
So, one background comes in or

139
00:04:35,016 --> 0:04:35,956
the other, depending on the

140
00:04:35,956 --> 0:04:36,656
scroll position.

141
00:04:38,256 --> 0:04:40,396
Now, you might be asking, how do

142
00:04:40,396 --> 0:04:41,106
I adopt this?

143
00:04:41,106 --> 0:04:42,076
How do I make sure this works

144
00:04:42,226 --> 0:04:43,686
cleanly in my application?

145
00:04:44,746 --> 0:04:46,236
Well, the adoption story is

146
00:04:46,236 --> 0:04:46,876
easy.

147
00:04:47,126 --> 0:04:49,576
You link against iOS 13, you get

148
00:04:49,576 --> 0:04:50,106
this for free.

149
00:04:51,586 --> 0:04:52,796
But how to make that work

150
00:04:53,016 --> 0:04:54,916
beautifully in your application

151
00:04:54,916 --> 0:04:56,576
might require a little work, and

152
00:04:56,576 --> 0:04:57,916
that's where we have new

153
00:04:57,916 --> 0:04:59,506
appearance customization APIs to

154
00:04:59,976 --> 0:05:00,816
help you do this.

155
00:04:59,976 --> 0:05:00,816
help you do this.

156
00:05:02,086 --> 0:05:03,416
So, let's take a look at what it

157
00:05:03,416 --> 0:05:04,546
might look like to customize a

158
00:05:04,546 --> 0:05:06,146
navigation bar in the new

159
00:05:06,146 --> 0:05:08,566
appearance API.

160
00:05:08,806 --> 0:05:11,076
So, first thing we're going to

161
00:05:11,176 --> 0:05:13,846
do is create the object that

162
00:05:13,846 --> 0:05:14,676
actually represents the

163
00:05:14,676 --> 0:05:15,156
appearance,

164
00:05:15,786 --> 0:05:17,276
UINavigationBarAppearance .

165
00:05:17,536 --> 0:05:19,266
This is a subclass of

166
00:05:19,266 --> 0:05:21,436
UIBarAppearance, and it

167
00:05:21,436 --> 0:05:22,376
encapsulates all the

168
00:05:22,376 --> 0:05:23,556
customization options for

169
00:05:23,556 --> 0:05:24,326
UINavigationBar.

170
00:05:25,156 --> 0:05:26,166
In this case, we're going to

171
00:05:26,166 --> 0:05:27,376
actually make the navigation bar

172
00:05:27,376 --> 0:05:29,576
use an opaque color, and so

173
00:05:29,576 --> 0:05:30,716
we're going to use the default

174
00:05:30,716 --> 0:05:32,006
values provided by

175
00:05:32,006 --> 0:05:33,636
configureWithOpaqueBackground.

176
00:05:33,706 --> 0:05:35,716
That will make your navigation

177
00:05:35,716 --> 0:05:37,576
bar's background conform to

178
00:05:37,626 --> 0:05:38,596
light and dark mode with an

179
00:05:38,596 --> 0:05:40,036
appropriate opaque color.

180
00:05:41,556 --> 0:05:43,836
Now, in this particular case, we

181
00:05:43,836 --> 0:05:45,166
also wanted to change the label

182
00:05:45,166 --> 0:05:45,516
color.

183
00:05:45,966 --> 0:05:47,806
And so, we can set

184
00:05:47,806 --> 0:05:48,976
titleTextAttributes and

185
00:05:48,976 --> 0:05:50,916
largeTitleTextAttributes, and

186
00:05:50,916 --> 0:05:52,686
we'll just give them a custom

187
00:05:52,686 --> 0:05:54,606
color that we'll use, another

188
00:05:54,606 --> 0:05:55,936
dynamic color, just so that we

189
00:05:55,936 --> 0:05:57,126
work great in light and dark

190
00:05:57,186 --> 0:05:57,506
modes.

191
00:05:58,866 --> 0:06:00,676
And finally, we will attach the

192
00:05:58,866 --> 0:06:00,676
And finally, we will attach the

193
00:06:00,806 --> 0:06:02,156
navigation bar's standard

194
00:06:02,156 --> 0:06:02,866
appearance.

195
00:06:03,656 --> 0:06:04,726
So, what is that

196
00:06:04,726 --> 0:06:05,786
standardAppearance?

197
00:06:06,426 --> 0:06:08,166
Well, let's take a look.

198
00:06:09,516 --> 0:06:11,636
The navigation bar, when it's in

199
00:06:11,636 --> 0:06:12,906
its size without a large title

200
00:06:13,176 --> 0:06:14,946
is in the standard size, and

201
00:06:14,946 --> 0:06:16,036
that's what standardAppearance

202
00:06:16,036 --> 0:06:16,616
represents.

203
00:06:17,576 --> 0:06:18,766
In addition, if you don't

204
00:06:18,766 --> 0:06:20,126
specify any other appearance

205
00:06:20,126 --> 0:06:22,386
configuration, we'll use that as

206
00:06:22,386 --> 0:06:24,296
the basis to form defaults for

207
00:06:24,296 --> 0:06:25,846
the other two, which I'll talk

208
00:06:25,846 --> 0:06:29,336
about in a moment.

209
00:06:29,466 --> 0:06:31,226
So, if you use a smaller iPhone

210
00:06:31,226 --> 0:06:32,596
in Landscape, you get the

211
00:06:32,596 --> 0:06:34,716
compactAppearance, and that's

212
00:06:34,716 --> 0:06:36,786
what that represents, quantities

213
00:06:36,786 --> 0:06:37,136
for that.

214
00:06:37,136 --> 0:06:40,736
And we saw earlier that in iOS

215
00:06:40,796 --> 0:06:43,396
13 the navigation bar dropped

216
00:06:43,426 --> 0:06:44,956
its background to transparent

217
00:06:44,956 --> 0:06:46,556
when you pull down at the top of

218
00:06:46,556 --> 0:06:47,066
a scroll view.

219
00:06:47,966 --> 0:06:49,036
And so that is the

220
00:06:49,036 --> 0:06:50,436
scrollEdgeAppearance.

221
00:06:51,076 --> 0:06:52,646
Whenever a navigation bar is

222
00:06:52,646 --> 0:06:53,716
associated with a scroll view,

223
00:06:53,826 --> 0:06:54,896
which is pretty common in your

224
00:06:54,896 --> 0:06:56,576
apps, if you're at the top of

225
00:06:56,576 --> 0:06:58,326
that scroll view, then we'll use

226
00:06:58,326 --> 0:06:59,636
the scrollEdgeAppearance instead

227
00:06:59,636 --> 0:07:00,606
of the standard appearance.

228
00:06:59,636 --> 0:07:00,606
of the standard appearance.

229
00:07:01,016 --> 0:07:02,336
The default is to use a

230
00:07:02,336 --> 0:07:03,616
transparent background, and

231
00:07:03,616 --> 0:07:05,636
that's why you get the seamless

232
00:07:05,636 --> 0:07:07,316
appearance that we've got new in

233
00:07:07,396 --> 0:07:08,636
iOS 13.

234
00:07:09,476 --> 0:07:11,886
In addition, you can also

235
00:07:11,886 --> 0:07:12,996
customize the appearance of your

236
00:07:12,996 --> 0:07:14,446
bar button items, and so the

237
00:07:14,446 --> 0:07:16,286
buttonAppearance for plain items

238
00:07:16,286 --> 0:07:18,406
and the doneButtonAppearance for

239
00:07:18,406 --> 0:07:19,026
done items.

240
00:07:21,016 --> 0:07:22,276
Now, we could have stopped

241
00:07:22,276 --> 0:07:22,436
there.

242
00:07:22,686 --> 0:07:23,796
You got your navigation bar.

243
00:07:23,856 --> 0:07:24,576
It's customized.

244
00:07:24,576 --> 0:07:24,986
It's great.

245
00:07:24,986 --> 0:07:27,656
But we decided to also bring

246
00:07:27,656 --> 0:07:29,236
this to Toolbar and TabBar so

247
00:07:29,386 --> 0:07:30,846
that you can customize all your

248
00:07:30,846 --> 0:07:33,286
bars in a very similar way with

249
00:07:33,286 --> 0:07:34,726
each of those classes using

250
00:07:34,726 --> 0:07:35,736
their own subclass of

251
00:07:35,736 --> 0:07:38,146
UIBarAppearance to do their own

252
00:07:38,146 --> 0:07:39,006
customized work.

253
00:07:39,776 --> 0:07:40,946
Now, ToolbarAppearance is

254
00:07:40,946 --> 0:07:41,806
actually just a subset of

255
00:07:41,806 --> 0:07:42,696
properties relative to

256
00:07:42,696 --> 0:07:44,656
navigationBarAppearance, so it's

257
00:07:44,656 --> 0:07:46,046
not too interesting to continue

258
00:07:46,046 --> 0:07:47,346
further with, but

259
00:07:47,346 --> 0:07:48,706
TabBarAppearance is a little bit

260
00:07:48,706 --> 0:07:49,616
different, and that's because

261
00:07:49,936 --> 0:07:51,066
TabBar is also a little

262
00:07:52,086 --> 0:07:52,296
different.

263
00:07:52,866 --> 0:07:55,036
So, with a TabBar, you have

264
00:07:55,036 --> 0:07:56,846
additional customization options

265
00:07:57,326 --> 0:07:58,616
for these three layout

266
00:07:58,616 --> 0:07:59,136
appearance, the

267
00:07:59,136 --> 0:08:00,956
stackedLayoutAppearance, the

268
00:07:59,136 --> 0:08:00,956
stackedLayoutAppearance, the

269
00:08:00,996 --> 0:08:02,136
inlineAppearance, which you'll

270
00:08:02,136 --> 0:08:04,076
see on iPads, and the

271
00:08:04,076 --> 0:08:05,366
compactInlineAppearance, which

272
00:08:05,366 --> 0:08:06,446
you'll see on smaller phones.

273
00:08:07,206 --> 0:08:09,566
And so, you can put all that

274
00:08:09,566 --> 0:08:12,256
together and get new appearance

275
00:08:12,256 --> 0:08:13,506
customization for all of your

276
00:08:13,506 --> 0:08:13,836
bars.

277
00:08:15,116 --> 0:08:15,746
But there's one more thing.

278
00:08:16,996 --> 0:08:19,466
If you look at the new reminders

279
00:08:19,466 --> 0:08:21,286
app, when you navigate into a

280
00:08:21,286 --> 0:08:24,306
list, this title color changes

281
00:08:24,366 --> 0:08:25,346
to match the list.

282
00:08:26,736 --> 0:08:29,206
The way they do this is they use

283
00:08:29,466 --> 0:08:30,936
per navigation item appearance

284
00:08:30,936 --> 0:08:32,996
customization, which allows you

285
00:08:32,996 --> 0:08:34,466
to specify an appearance based

286
00:08:34,466 --> 0:08:35,966
on the navigation item that you

287
00:08:35,966 --> 0:08:37,426
pushed onto the navigationBar.

288
00:08:37,426 --> 0:08:39,356
Navigation items are also

289
00:08:39,356 --> 0:08:40,506
associated with navigation, or

290
00:08:40,546 --> 0:08:42,025
with view controllers, and so

291
00:08:42,025 --> 0:08:42,936
pushing onto a navigation

292
00:08:42,936 --> 0:08:44,336
controller will naturally use

293
00:08:44,336 --> 0:08:44,566
that.

294
00:08:45,646 --> 0:08:47,266
So what does that look like?

295
00:08:48,076 --> 0:08:50,746
Well, the navigation item has

296
00:08:50,746 --> 0:08:52,756
the same properties that the

297
00:08:52,756 --> 0:08:53,816
navigationBar has.

298
00:08:54,356 --> 0:08:55,956
So a common thing to do is to

299
00:08:55,956 --> 0:08:57,566
just take the standard

300
00:08:57,566 --> 0:08:58,956
appearance from a navigationBar,

301
00:08:59,806 --> 0:09:01,456
make a copy of it so that we are

302
00:08:59,806 --> 0:09:01,456
make a copy of it so that we are

303
00:09:01,576 --> 0:09:02,956
disassociated from that

304
00:09:02,956 --> 0:09:05,446
appearance, and make whatever

305
00:09:05,446 --> 0:09:06,516
changes you want.

306
00:09:06,616 --> 0:09:07,206
If you want this to be

307
00:09:07,206 --> 0:09:08,806
transparent, there's a configure

308
00:09:08,806 --> 0:09:10,226
transparency that you can use.

309
00:09:10,226 --> 0:09:11,916
You can change bar button item

310
00:09:11,916 --> 0:09:15,026
appearances, etc., etc. And then

311
00:09:15,026 --> 0:09:16,256
you assign it to the navigation

312
00:09:16,256 --> 0:09:16,486
item.

313
00:09:16,566 --> 0:09:18,276
And once you've done that,

314
00:09:18,396 --> 0:09:20,186
whenever the view controller and

315
00:09:20,186 --> 0:09:21,646
navigation item is current, we

316
00:09:21,846 --> 0:09:23,346
will use that appearance instead

317
00:09:23,346 --> 0:09:24,476
of the navigationBar's base

318
00:09:24,476 --> 0:09:25,936
appearance to make sure that you

319
00:09:25,936 --> 0:09:27,526
can customize your navigationBar

320
00:09:27,796 --> 0:09:29,596
for whatever view controller

321
00:09:29,596 --> 0:09:30,066
gets pushed.

322
00:09:30,566 --> 0:09:34,656
And so with that, I'm going to

323
00:09:34,656 --> 0:09:36,216
bring on Russell to talk about

324
00:09:36,216 --> 0:09:36,886
presentations.

325
00:09:37,516 --> 0:09:44,466
[ Applause ]

326
00:09:44,966 --> 0:09:46,006
&gt;&gt; Thanks David.

327
00:09:46,976 --> 0:09:47,766
Hi everyone.

328
00:09:48,106 --> 0:09:50,706
I'm Russell, and new in iOS 13

329
00:09:51,036 --> 0:09:52,446
we have a standard design for

330
00:09:52,446 --> 0:09:54,066
presentations that I am so

331
00:09:54,066 --> 0:09:55,186
excited to tell you all about.

332
00:09:56,796 --> 0:09:58,456
For example, if I'm here in the

333
00:09:58,456 --> 0:10:00,866
contacts app and I tap plus to

334
00:09:58,456 --> 0:10:00,866
contacts app and I tap plus to

335
00:10:00,866 --> 0:10:02,976
add a new contact, we have a new

336
00:10:02,976 --> 0:10:04,506
presentation style that looks

337
00:10:04,506 --> 0:10:06,206
like this, rather than the full

338
00:10:06,206 --> 0:10:07,326
screen presentation that we had

339
00:10:07,326 --> 0:10:07,716
before.

340
00:10:08,666 --> 0:10:09,726
You can see that the root view

341
00:10:09,726 --> 0:10:11,786
controller's view is not as

342
00:10:11,866 --> 0:10:13,956
scaled down and not removed from

343
00:10:13,956 --> 0:10:14,576
the view hierarchy.

344
00:10:15,936 --> 0:10:17,296
The layering of this design

345
00:10:17,636 --> 0:10:18,886
gives your users a sense of

346
00:10:18,926 --> 0:10:20,446
context about where they are in

347
00:10:20,446 --> 0:10:22,186
your applications, and the

348
00:10:22,186 --> 0:10:23,856
rounded top appearance serves as

349
00:10:23,856 --> 0:10:25,556
a signifier that these

350
00:10:25,556 --> 0:10:26,806
presentations can be

351
00:10:26,986 --> 0:10:29,436
interactively dismissed anywhere

352
00:10:29,776 --> 0:10:31,886
in the system [applause].

353
00:10:32,116 --> 0:10:32,366
Thanks.

354
00:10:33,516 --> 0:10:37,116
[ Applause ]

355
00:10:37,616 --> 0:10:38,936
So what is this new presentation

356
00:10:38,936 --> 0:10:39,256
style?

357
00:10:40,096 --> 0:10:41,806
These presentations are called

358
00:10:42,586 --> 0:10:45,136
Sheets, and Sheets aren't new at

359
00:10:45,136 --> 0:10:45,576
all.

360
00:10:45,906 --> 0:10:47,226
These presentations are just a

361
00:10:47,226 --> 0:10:49,506
new design for the existing

362
00:10:49,786 --> 0:10:51,436
UIModalPresentationStyle

363
00:10:51,656 --> 0:10:53,286
pageSheet and its sibling,

364
00:10:53,756 --> 0:10:54,166
formSheet.

365
00:10:55,636 --> 0:10:57,426
Previously, these styles would

366
00:10:57,426 --> 0:10:58,416
adapt to a full screen

367
00:10:58,416 --> 0:10:59,926
presentation in a compact width

368
00:10:59,926 --> 0:11:00,466
environment.

369
00:10:59,926 --> 0:11:00,466
environment.

370
00:11:00,666 --> 0:11:03,076
And now, they just stay Sheets

371
00:11:03,276 --> 0:11:04,626
with their own special layout

372
00:11:04,626 --> 0:11:06,426
and compact width different from

373
00:11:06,426 --> 0:11:09,466
their regular width layout.

374
00:11:09,546 --> 0:11:10,546
So, let's look at a few examples

375
00:11:10,546 --> 0:11:11,316
of this in action.

376
00:11:12,436 --> 0:11:13,846
In phones and portrait, you get

377
00:11:13,846 --> 0:11:14,566
the appearance that you just

378
00:11:14,566 --> 0:11:14,886
saw.

379
00:11:15,476 --> 0:11:16,946
In phone in landscape, you get a

380
00:11:16,946 --> 0:11:18,216
full screen layout like before.

381
00:11:18,806 --> 0:11:21,446
But iPads aren't left out.

382
00:11:21,786 --> 0:11:22,936
We've rethought Sheets here as

383
00:11:22,936 --> 0:11:23,196
well.

384
00:11:23,896 --> 0:11:25,526
Page Sheets float in a stack in

385
00:11:25,526 --> 0:11:28,106
the middle of the screen, and if

386
00:11:28,106 --> 0:11:29,386
multiple are presented on top of

387
00:11:29,386 --> 0:11:30,946
each other, they'll form a stack

388
00:11:30,946 --> 0:11:32,146
on top the review controller.

389
00:11:33,536 --> 0:11:36,776
And specifically, this new size

390
00:11:37,026 --> 0:11:38,566
follows the readable width, so

391
00:11:38,566 --> 0:11:39,706
it's perfect for textual

392
00:11:39,706 --> 0:11:40,156
content.

393
00:11:40,836 --> 0:11:42,276
And because the readable width

394
00:11:42,276 --> 0:11:43,366
changes with the user's

395
00:11:43,406 --> 0:11:44,836
currently selected dynamic type

396
00:11:44,836 --> 0:11:46,646
size, these page sheets can

397
00:11:46,646 --> 0:11:48,576
change size as well, like this

398
00:11:49,226 --> 0:11:49,916
or even like this.

399
00:11:50,836 --> 0:11:51,986
Or they can take on a stacked

400
00:11:51,986 --> 0:11:54,016
appearance if their preferred

401
00:11:54,016 --> 0:11:55,126
width is wider than the

402
00:11:55,126 --> 0:11:56,456
available width.

403
00:11:56,886 --> 0:12:00,676
So, what do you all need to do

404
00:11:56,886 --> 0:12:00,676
So, what do you all need to do

405
00:12:00,676 --> 0:12:02,026
to get this new appearance in

406
00:12:02,026 --> 0:12:02,806
your app?

407
00:12:03,086 --> 0:12:04,196
Well very little because you've

408
00:12:04,196 --> 0:12:05,546
done a lot of work to make this

409
00:12:05,586 --> 0:12:08,286
transition as easy as possible.

410
00:12:09,056 --> 0:12:12,106
The default UIViewController

411
00:12:12,106 --> 0:12:13,576
ModalPresentationStyle has

412
00:12:13,576 --> 0:12:15,936
changed to a new style called

413
00:12:15,936 --> 0:12:16,446
Automatic.

414
00:12:17,736 --> 0:12:19,376
Automatic is a dynamic

415
00:12:19,476 --> 0:12:20,956
presentation style, which is

416
00:12:20,956 --> 0:12:22,296
resolved at the time of

417
00:12:22,366 --> 0:12:23,026
presentation.

418
00:12:23,876 --> 0:12:25,006
To illustrate its behavior,

419
00:12:25,416 --> 0:12:26,806
let's walk through a few

420
00:12:26,806 --> 0:12:29,486
examples together.

421
00:12:29,626 --> 0:12:32,026
So, here I have a custom view

422
00:12:32,026 --> 0:12:33,306
controller, and it's going to

423
00:12:33,306 --> 0:12:35,276
present UIImagePickerController

424
00:12:35,486 --> 0:12:36,336
showing the user's photo

425
00:12:36,336 --> 0:12:36,826
library.

426
00:12:36,936 --> 0:12:38,516
And note that there's no modal

427
00:12:38,826 --> 0:12:40,886
presentation style set.

428
00:12:41,196 --> 0:12:42,676
This same code that worked on

429
00:12:42,676 --> 0:12:44,416
iOS 12 and presented the image

430
00:12:44,416 --> 0:12:45,956
picker full screen will now

431
00:12:45,956 --> 0:12:48,106
present as a sheet with no code

432
00:12:48,106 --> 0:12:49,106
change required on your part.

433
00:12:49,796 --> 0:12:53,126
On the other hand, if I

434
00:12:53,126 --> 0:12:53,706
configure the

435
00:12:53,706 --> 0:12:54,856
UIImagePickerController to

436
00:12:54,856 --> 0:12:56,706
present in camera mode, this

437
00:12:56,706 --> 0:12:58,046
code will present the camera

438
00:12:58,336 --> 0:13:00,446
full screen in iOS 13, just like

439
00:12:58,336 --> 0:13:00,446
full screen in iOS 13, just like

440
00:13:00,446 --> 0:13:01,486
it did in iOS 12.

441
00:13:02,506 --> 0:13:03,956
This is automatic at work,

442
00:13:04,176 --> 0:13:05,496
resolving to different styles

443
00:13:05,816 --> 0:13:07,146
depending on how a system

444
00:13:07,146 --> 0:13:08,576
provided view controller is

445
00:13:08,576 --> 0:13:09,866
configured so that you don't

446
00:13:09,866 --> 0:13:10,976
have to make any code change.

447
00:13:11,546 --> 0:13:15,096
Now, what about presenting our

448
00:13:15,096 --> 0:13:16,126
own view controllers?

449
00:13:16,876 --> 0:13:18,456
If I simply instantiate and

450
00:13:18,456 --> 0:13:20,196
present a custom subclass of

451
00:13:20,196 --> 0:13:21,916
UIViewController it will present

452
00:13:21,996 --> 0:13:22,426
as a Sheet.

453
00:13:23,016 --> 0:13:24,796
In other words, by default,

454
00:13:25,256 --> 0:13:27,236
automatic resolves to pageSheet.

455
00:13:27,786 --> 0:13:29,846
And this is great because it's

456
00:13:29,846 --> 0:13:31,226
the right style for most

457
00:13:31,226 --> 0:13:31,886
presentations.

458
00:13:32,916 --> 0:13:34,576
Again, no code change required.

459
00:13:36,366 --> 0:13:38,506
But, what about this last case?

460
00:13:39,196 --> 0:13:40,156
If you have a custom view

461
00:13:40,156 --> 0:13:41,596
controller that should be

462
00:13:41,596 --> 0:13:43,066
presented full screen, such as

463
00:13:43,066 --> 0:13:44,706
your own custom camera or other

464
00:13:44,706 --> 0:13:46,566
immersive experience, you may

465
00:13:46,566 --> 0:13:47,646
find that when you build this

466
00:13:47,646 --> 0:13:49,416
code, your immersive experience

467
00:13:49,416 --> 0:13:50,326
has been turned into a Sheet.

468
00:13:51,096 --> 0:13:52,756
But don't worry, all you have to

469
00:13:52,756 --> 0:13:55,316
do to fix it is explicitly set

470
00:13:55,316 --> 0:13:56,676
the modalPresentationStyle of

471
00:13:56,676 --> 0:13:58,046
this view controller to full

472
00:13:58,046 --> 0:13:58,356
screen.

473
00:13:59,706 --> 0:14:01,476
In general, it's good to leave

474
00:13:59,706 --> 0:14:01,476
In general, it's good to leave

475
00:14:01,476 --> 0:14:02,836
properties at their default

476
00:14:02,836 --> 0:14:04,686
values and only specify an

477
00:14:04,686 --> 0:14:06,056
explicit value when you're

478
00:14:06,056 --> 0:14:07,656
intentionally deviating from the

479
00:14:07,656 --> 0:14:08,376
default behavior.

480
00:14:08,916 --> 0:14:14,066
And what about Popovers?

481
00:14:14,566 --> 0:14:16,246
Well, Popovers always adapt to

482
00:14:16,246 --> 0:14:16,756
sheets now.

483
00:14:17,336 --> 0:14:18,606
So, if you want a Popover in

484
00:14:18,606 --> 0:14:21,036
regular width and a Sheet in

485
00:14:21,036 --> 0:14:23,606
compact width, all you have to

486
00:14:23,606 --> 0:14:24,556
do is set your modal

487
00:14:24,556 --> 0:14:25,646
presentation style to be a

488
00:14:25,646 --> 0:14:27,086
Popover, and you're done.

489
00:14:27,416 --> 0:14:29,366
You'll get exactly that

490
00:14:31,436 --> 0:14:31,656
behavior.

491
00:14:32,136 --> 0:14:35,306
Now, what do you all have to do

492
00:14:35,416 --> 0:14:40,346
to support Pull to Dismiss?

493
00:14:40,476 --> 0:14:41,756
In general, nothing.

494
00:14:42,446 --> 0:14:43,526
If you present something as a

495
00:14:43,526 --> 0:14:45,286
Sheet, the ability to pull it

496
00:14:45,286 --> 0:14:46,566
down comes for free.

497
00:14:47,266 --> 0:14:48,176
We will place a gesture

498
00:14:48,176 --> 0:14:49,476
recognizer on your entire

499
00:14:49,476 --> 0:14:51,156
presented view, so pulling down

500
00:14:51,156 --> 0:14:52,876
in any noninteractive area will

501
00:14:52,876 --> 0:14:54,076
trigger a pulldown on a Sheet.

502
00:14:55,156 --> 0:14:57,086
And, if the user pulls down past

503
00:14:57,266 --> 0:14:58,716
the top in any contained

504
00:14:58,716 --> 0:15:00,636
scrollView, that will also pull

505
00:14:58,716 --> 0:15:00,636
scrollView, that will also pull

506
00:15:00,636 --> 0:15:01,516
the sheet down as well

507
00:15:01,896 --> 0:15:03,446
completely for free.

508
00:15:04,996 --> 0:15:07,996
However, there are times when

509
00:15:07,996 --> 0:15:09,186
pulling down a sheet maybe

510
00:15:09,186 --> 0:15:10,016
undesirable.

511
00:15:10,666 --> 0:15:13,026
For example, if we present this

512
00:15:13,026 --> 0:15:15,006
same Sheet and enter some data,

513
00:15:15,636 --> 0:15:16,676
the Sheet should not be allowed

514
00:15:16,676 --> 0:15:18,056
to be pulled down, because it's

515
00:15:18,106 --> 0:15:19,916
unclear if the user intends to

516
00:15:20,116 --> 0:15:22,336
discard or save their changes,

517
00:15:23,106 --> 0:15:24,526
and if the user does attempt to

518
00:15:24,526 --> 0:15:26,316
pull down, the Sheet should

519
00:15:26,496 --> 0:15:28,096
rubber band, and an action sheet

520
00:15:28,096 --> 0:15:29,446
should be presented, showing

521
00:15:29,446 --> 0:15:31,026
what actions the user can take

522
00:15:31,346 --> 0:15:32,486
to escape this context.

523
00:15:36,226 --> 0:15:37,366
So, to create this experience,

524
00:15:37,676 --> 0:15:39,146
we have two new APIs.

525
00:15:40,056 --> 0:15:41,786
The first is modal and

526
00:15:41,786 --> 0:15:43,946
presentation, is a property on

527
00:15:43,946 --> 0:15:45,666
UIViewController, and when you

528
00:15:45,666 --> 0:15:46,876
set this to true on your

529
00:15:46,876 --> 0:15:48,256
presented View Controller, it

530
00:15:48,696 --> 0:15:51,076
will put the Sheet in a modal

531
00:15:51,076 --> 0:15:52,646
state where it cannot be

532
00:15:53,326 --> 0:15:53,566
dismissed,

533
00:15:54,356 --> 0:15:55,116
and you'll get the

534
00:15:55,116 --> 0:15:56,246
rubber-banding effect, just like

535
00:15:56,246 --> 0:15:56,576
you saw.

536
00:15:57,406 --> 0:15:58,736
This property supersedes the

537
00:15:58,736 --> 0:16:00,406
existing isModal and Popover

538
00:15:58,736 --> 0:16:00,406
existing isModal and Popover

539
00:16:00,406 --> 0:16:02,416
property to prevent both Sheets

540
00:16:02,476 --> 0:16:03,836
and Popovers from being

541
00:16:04,466 --> 0:16:04,686
dismissed.

542
00:16:06,016 --> 0:16:08,286
The second is a new

543
00:16:08,286 --> 0:16:10,186
UIAdaptivePresentationController

544
00:16:10,186 --> 0:16:11,996
DelegateMethod called

545
00:16:11,996 --> 0:16:13,816
presentationControllerDidAttempt

546
00:16:13,846 --> 0:16:14,276
ToDismiss.

547
00:16:15,366 --> 0:16:16,956
So if you set the delegate on

548
00:16:16,956 --> 0:16:17,996
the presentation controller

549
00:16:17,996 --> 0:16:20,076
involved, UIKit will call this

550
00:16:20,076 --> 0:16:22,036
method when the user pulls down

551
00:16:22,036 --> 0:16:23,646
while in a modal state, at which

552
00:16:23,646 --> 0:16:25,226
point you can present the action

553
00:16:25,226 --> 0:16:25,426
sheet.

554
00:16:28,556 --> 0:16:29,866
Here, you can see the

555
00:16:29,866 --> 0:16:31,576
relationship between these APIs.

556
00:16:32,356 --> 0:16:34,066
DidAttemptToDismiss is only

557
00:16:34,066 --> 0:16:36,126
called if isModalInPpresentation

558
00:16:36,126 --> 0:16:38,856
is true and the user pulls and

559
00:16:38,856 --> 0:16:40,286
releases with the intent to

560
00:16:40,286 --> 0:16:41,926
dismiss, so with some force or

561
00:16:41,926 --> 0:16:42,496
velocity.

562
00:16:43,546 --> 0:16:45,306
We call this the Modal Flow, and

563
00:16:45,306 --> 0:16:46,606
we have a sample project that

564
00:16:46,606 --> 0:16:48,136
shows exactly how to implement

565
00:16:48,136 --> 0:16:49,296
an example like this.

566
00:16:50,086 --> 0:16:51,166
See the link in the description

567
00:16:51,336 --> 0:16:53,266
for how to download that.

568
00:16:53,816 --> 0:16:55,356
But, we have more.

569
00:16:56,086 --> 0:16:58,096
We also have a few more delegate

570
00:16:58,096 --> 0:16:58,566
callbacks.

571
00:16:59,096 --> 0:17:00,016
PresentationController

572
00:16:59,096 --> 0:17:00,016
PresentationController

573
00:17:00,016 --> 0:17:01,626
ShouldDismiss, which is useful

574
00:17:01,626 --> 0:17:02,666
for preventing dismiss from the

575
00:17:02,666 --> 0:17:04,925
delegate, WillDismiss, which is

576
00:17:04,925 --> 0:17:06,756
a great place to grab one of the

577
00:17:06,756 --> 0:17:07,925
view controller's transition

578
00:17:07,925 --> 0:17:09,435
coordinators, which you can use

579
00:17:09,435 --> 0:17:11,496
to set up alongside animations,

580
00:17:11,556 --> 0:17:12,415
interaction change

581
00:17:12,415 --> 0:17:13,646
notifications, and animation

582
00:17:13,646 --> 0:17:15,536
completion blocks and

583
00:17:15,536 --> 0:17:17,236
DidDismiss, which is great for

584
00:17:17,236 --> 0:17:18,246
cleaning up state because it's

585
00:17:18,246 --> 0:17:20,486
only called once if the user

586
00:17:20,636 --> 0:17:21,915
actually pulls the Sheet down

587
00:17:21,915 --> 0:17:23,016
and completes the transition.

588
00:17:25,136 --> 0:17:26,715
These three callbacks supersede

589
00:17:26,715 --> 0:17:28,106
similarly named UI Popover

590
00:17:28,106 --> 0:17:29,366
presentationControllerDelegate

591
00:17:29,366 --> 0:17:31,976
Callbacks because these APIs are

592
00:17:31,976 --> 0:17:33,186
called for both Sheets and

593
00:17:33,186 --> 0:17:33,766
Popovers.

594
00:17:34,346 --> 0:17:37,586
Now, keep in mind that if a user

595
00:17:37,636 --> 0:17:39,496
were to repeatedly tug on a

596
00:17:39,496 --> 0:17:41,396
Sheet without pulling it down,

597
00:17:41,716 --> 0:17:43,546
the delegate will receive,

598
00:17:44,646 --> 0:17:46,626
Should and WillDismiss multiple

599
00:17:46,626 --> 0:17:49,076
times before calling DidDismiss,

600
00:17:49,286 --> 0:17:51,606
if it receives DidDismiss at

601
00:17:54,616 --> 0:17:54,716
all.

602
00:17:54,936 --> 0:17:56,406
Now, let's shift to Share

603
00:17:56,406 --> 0:17:57,246
Extensions for a moment.

604
00:17:58,526 --> 0:18:00,166
When you build with the iOS 13

605
00:17:58,526 --> 0:18:00,166
When you build with the iOS 13

606
00:18:00,296 --> 0:18:02,986
SDK, your Share Extensions, just

607
00:18:02,986 --> 0:18:05,176
like mail here, will become

608
00:18:05,176 --> 0:18:07,426
Sheets, and Pull to Dismiss will

609
00:18:07,426 --> 0:18:08,096
work here as well.

610
00:18:09,266 --> 0:18:10,176
So, on the principle view

611
00:18:10,176 --> 0:18:12,406
controller of your extension,

612
00:18:12,406 --> 0:18:13,316
which is like the main view

613
00:18:13,316 --> 0:18:14,526
controller you specify in the

614
00:18:14,526 --> 0:18:17,146
Info P List, be sure to set

615
00:18:17,146 --> 0:18:19,296
isModalInPresentation once the

616
00:18:19,296 --> 0:18:20,706
user has started entering data,

617
00:18:21,566 --> 0:18:23,186
and if you make your principle

618
00:18:23,186 --> 0:18:24,986
view controller conform to

619
00:18:24,986 --> 0:18:26,396
UIAdaptivePresentation

620
00:18:26,396 --> 0:18:28,296
ControllerDelegate and implement

621
00:18:28,736 --> 0:18:30,726
DidAttemptToDismiss, we will

622
00:18:30,726 --> 0:18:32,236
call that method when the user

623
00:18:32,236 --> 0:18:34,076
pulls down in this case, but

624
00:18:34,076 --> 0:18:35,746
note that we will not call any

625
00:18:35,746 --> 0:18:36,866
of the other delegate methods.

626
00:18:37,516 --> 0:18:39,656
And this behavior will be

627
00:18:39,656 --> 0:18:40,726
available in a future seed.

628
00:18:41,276 --> 0:18:45,426
Moving right along, I have a few

629
00:18:45,426 --> 0:18:46,646
things for you to consider.

630
00:18:47,636 --> 0:18:49,096
The first has to do with

631
00:18:49,096 --> 0:18:50,266
UIViewController Appearance

632
00:18:50,266 --> 0:18:50,696
Callbacks.

633
00:18:51,766 --> 0:18:53,576
Specifically, the difference

634
00:18:53,686 --> 0:18:55,156
between the appearance callbacks

635
00:18:55,416 --> 0:18:56,306
that the presenting view

636
00:18:56,306 --> 0:18:58,256
controller receives during a

637
00:18:58,256 --> 0:18:59,936
full screen presentation as

638
00:18:59,936 --> 0:19:00,986
compared to a sheet

639
00:18:59,936 --> 0:19:00,986
compared to a sheet

640
00:19:00,986 --> 0:19:01,596
presentation.

641
00:19:02,996 --> 0:19:03,696
During a full screen

642
00:19:03,696 --> 0:19:05,346
presentation, the presenting

643
00:19:05,346 --> 0:19:06,756
view controller's view is

644
00:19:06,756 --> 0:19:08,376
removed from the view hierarchy,

645
00:19:09,236 --> 0:19:10,926
and as a result, it receives

646
00:19:11,146 --> 0:19:13,476
viewWillDisappear when the

647
00:19:13,536 --> 0:19:15,406
presentation transition begins

648
00:19:15,466 --> 0:19:17,376
and then viewDidDisappear when

649
00:19:17,376 --> 0:19:18,466
the presentation transition

650
00:19:18,466 --> 0:19:18,876
finishes.

651
00:19:19,676 --> 0:19:20,856
And similarly, during the

652
00:19:20,856 --> 0:19:22,246
dismissal transition when its

653
00:19:22,246 --> 0:19:23,486
view moves back into the view

654
00:19:23,486 --> 0:19:25,046
hierarchy, it receives viewWill

655
00:19:25,046 --> 0:19:25,616
and DidAppear.

656
00:19:27,116 --> 0:19:29,296
But, for Sheet Presentations,

657
00:19:30,146 --> 0:19:31,036
the presenting view controller's

658
00:19:31,036 --> 0:19:32,396
view is not removed from the

659
00:19:32,396 --> 0:19:34,496
view hierarchy, and so it's

660
00:19:34,496 --> 0:19:36,126
view, or the view controller

661
00:19:36,126 --> 0:19:37,436
does not receive any of these

662
00:19:37,436 --> 0:19:38,426
appearance callbacks.

663
00:19:39,346 --> 0:19:40,476
So, if you have code in these

664
00:19:40,476 --> 0:19:41,786
callbacks that you need to be

665
00:19:41,786 --> 0:19:43,196
executed when a Sheet dismisses,

666
00:19:43,616 --> 0:19:44,276
you should look at the

667
00:19:44,276 --> 0:19:45,796
presentation controller Will and

668
00:19:45,796 --> 0:19:47,436
DidDismiss methods that we just

669
00:19:47,436 --> 0:19:48,486
talked about.

670
00:19:50,256 --> 0:19:52,556
The second thing I want you all

671
00:19:52,556 --> 0:19:53,946
to consider is that we have

672
00:19:53,996 --> 0:19:55,946
inserted some private views in

673
00:19:55,946 --> 0:19:57,856
the view hierarchy in between

674
00:19:57,856 --> 0:19:59,176
UIWindow and its

675
00:19:59,176 --> 0:20:00,166
rootViewController's view.

676
00:19:59,176 --> 0:20:00,166
rootViewController's view.

677
00:20:01,576 --> 0:20:03,196
This change should not affect

678
00:20:03,196 --> 0:20:03,366
you.

679
00:20:03,896 --> 0:20:04,696
We just don't want you to be

680
00:20:04,696 --> 0:20:05,946
surprised when you see these

681
00:20:05,946 --> 0:20:06,826
views it the View Debugger.

682
00:20:07,906 --> 0:20:08,866
The relationship between

683
00:20:08,866 --> 0:20:10,286
UIWindow and it Root View

684
00:20:10,286 --> 0:20:11,536
Controller's View is an

685
00:20:11,536 --> 0:20:13,166
implementation detail of UIKit,

686
00:20:13,166 --> 0:20:15,056
and because it is UIWindow's

687
00:20:15,056 --> 0:20:17,526
responsibility to manage and add

688
00:20:17,826 --> 0:20:18,926
this view to the view hierarchy.

689
00:20:20,096 --> 0:20:21,686
In general, the structure of a

690
00:20:21,686 --> 0:20:23,396
view hierarchy not owned by your

691
00:20:23,626 --> 0:20:25,256
app is liable to change without

692
00:20:25,256 --> 0:20:26,266
notice in any release.

693
00:20:27,326 --> 0:20:28,856
So, always ensure that you're

694
00:20:28,856 --> 0:20:30,556
writing your code in a way that

695
00:20:30,556 --> 0:20:32,476
doesn't make assumptions about

696
00:20:32,886 --> 0:20:36,626
private view hierarchies.

697
00:20:36,686 --> 0:20:39,526
So, use Sheet presentations in

698
00:20:39,526 --> 0:20:39,926
your apps.

699
00:20:40,546 --> 0:20:41,886
They're meant to be used for

700
00:20:41,886 --> 0:20:45,136
most UI with few exceptions, and

701
00:20:45,136 --> 0:20:46,706
implement the modal flow when

702
00:20:46,706 --> 0:20:48,226
pulling down requires the user's

703
00:20:48,226 --> 0:20:48,596
intent.

704
00:20:49,426 --> 0:20:50,856
And remember, there's a sample

705
00:20:50,856 --> 0:20:52,386
project that illustrates exactly

706
00:20:52,386 --> 0:20:54,196
how to do that in more detail in

707
00:20:54,196 --> 0:20:55,126
the session's description.

708
00:20:57,306 --> 0:20:58,596
Thanks everyone, and now I'm

709
00:20:58,596 --> 0:20:59,706
going to hand it off to Kyle to

710
00:20:59,706 --> 0:21:00,616
tell you more about Search.

711
00:20:59,706 --> 0:21:00,616
tell you more about Search.

712
00:21:01,516 --> 0:21:05,966
[ Applause ]

713
00:21:06,466 --> 0:21:06,766
&gt;&gt; Good job.

714
00:21:08,736 --> 0:21:09,976
Thank you, Russell.

715
00:21:16,066 --> 0:21:16,526
Hello everybody.

716
00:21:16,866 --> 0:21:17,556
My name is Kyle.

717
00:21:17,826 --> 0:21:19,856
I work on UIKit, and I'm going

718
00:21:19,856 --> 0:21:21,436
to tell you some new things in

719
00:21:21,516 --> 0:21:23,206
iOS 13 about Search.

720
00:21:23,906 --> 0:21:25,886
Now this isn't new.

721
00:21:25,886 --> 0:21:28,356
This is the existing interface

722
00:21:28,356 --> 0:21:29,566
for searching in the mail

723
00:21:29,566 --> 0:21:31,916
application, and it is provided

724
00:21:32,176 --> 0:21:32,876
by UIKit.

725
00:21:33,406 --> 0:21:34,206
Specifically, the

726
00:21:34,206 --> 0:21:36,666
UISearchController subclass of

727
00:21:36,756 --> 0:21:37,676
UIViewController.

728
00:21:38,726 --> 0:21:40,146
It's familiar to all of our

729
00:21:40,146 --> 0:21:42,276
users, and it's available in

730
00:21:42,276 --> 0:21:44,396
your applications too, and it

731
00:21:44,526 --> 0:21:46,296
consists of a number of parts.

732
00:21:47,606 --> 0:21:48,656
The biggest piece is a

733
00:21:48,656 --> 0:21:50,606
UISearchBar, which you can see

734
00:21:50,606 --> 0:21:51,676
here at the top of the screen.

735
00:21:53,036 --> 0:21:54,606
The search bar has a couple of

736
00:21:54,606 --> 0:21:56,526
components including a Cancel

737
00:21:56,526 --> 0:21:58,286
button and what we call the

738
00:21:58,286 --> 0:21:59,906
Scope Bar, which is that row of

739
00:21:59,906 --> 0:22:01,206
buttons underneath the search

740
00:21:59,906 --> 0:22:01,206
buttons underneath the search

741
00:22:01,916 --> 0:22:02,046
field.

742
00:22:02,956 --> 0:22:05,266
Now, you may notice the updated

743
00:22:05,466 --> 0:22:07,846
visual appearance of the Scope

744
00:22:07,846 --> 0:22:13,166
Bar in iOS 13, but now we're

745
00:22:13,166 --> 0:22:15,876
allowing our application to hide

746
00:22:15,876 --> 0:22:18,076
elements of the Search Bar even

747
00:22:18,076 --> 0:22:19,156
if it's managed by a

748
00:22:19,156 --> 0:22:20,136
UISearchController.

749
00:22:20,876 --> 0:22:22,446
So, if your application doesn't

750
00:22:22,446 --> 0:22:24,416
need a Scope Bar or a Cancel

751
00:22:24,416 --> 0:22:25,816
Button but wants to make them

752
00:22:25,816 --> 0:22:27,836
available perhaps depending on

753
00:22:27,836 --> 0:22:28,576
the UI state.

754
00:22:29,056 --> 0:22:30,506
You can control that directly

755
00:22:31,096 --> 0:22:31,936
with new properties on

756
00:22:31,936 --> 0:22:32,736
UISearchController.

757
00:22:34,776 --> 0:22:37,856
Also, we're exposing the

758
00:22:37,856 --> 0:22:39,816
SearchTextField as a public

759
00:22:39,816 --> 0:22:42,116
property on UISearchBar, which

760
00:22:42,116 --> 0:22:43,256
means that it's really easy to

761
00:22:43,256 --> 0:22:43,916
customize.

762
00:22:44,516 --> 0:22:52,666
[ Applause ]

763
00:22:53,166 --> 0:22:55,316
So to customize the appearance

764
00:22:55,316 --> 0:22:57,126
of your SearchController, set

765
00:22:57,796 --> 0:22:59,856
these properties to false on

766
00:22:59,856 --> 0:23:01,926
UISearchController and use the

767
00:22:59,856 --> 0:23:01,926
UISearchController and use the

768
00:23:01,926 --> 0:23:02,986
existing properties on

769
00:23:02,986 --> 0:23:04,296
UISearchBar to control the

770
00:23:04,296 --> 0:23:05,936
visibility of the Cancel Button

771
00:23:06,246 --> 0:23:06,936
and the Scope Bar.

772
00:23:08,686 --> 0:23:10,956
Use the searchTextField Property

773
00:23:11,436 --> 0:23:13,146
to get a reference to the

774
00:23:13,216 --> 0:23:15,526
UISearchTextField instance and

775
00:23:15,526 --> 0:23:17,366
change all the properties on the

776
00:23:17,366 --> 0:23:18,466
Text Field that you'd like to

777
00:23:18,466 --> 0:23:18,926
change.

778
00:23:19,206 --> 0:23:20,786
It's a subclass of UITextField

779
00:23:20,976 --> 0:23:21,836
and all of the styling

780
00:23:21,836 --> 0:23:26,226
properties are available there.

781
00:23:27,666 --> 0:23:29,266
UISearchController's behavior

782
00:23:29,266 --> 0:23:30,896
extends to the appearance and

783
00:23:30,896 --> 0:23:32,846
dismissal of Search as well, so

784
00:23:32,846 --> 0:23:35,086
the standard behavior is that

785
00:23:35,086 --> 0:23:36,426
when you activate the Search Bar

786
00:23:36,826 --> 0:23:38,126
by tapping on its Search Field,

787
00:23:39,296 --> 0:23:40,496
it gets hoisted to the top of

788
00:23:40,496 --> 0:23:42,596
the screen, but the content that

789
00:23:42,596 --> 0:23:44,186
was visible on the screen before

790
00:23:44,806 --> 0:23:45,606
remains visible.

791
00:23:46,216 --> 0:23:49,526
As you type, in this case the

792
00:23:49,526 --> 0:23:51,316
photos application displays

793
00:23:51,316 --> 0:23:53,056
results that match your partial

794
00:23:53,056 --> 0:23:55,956
search term, and this is

795
00:23:56,066 --> 0:23:57,206
implemented with a

796
00:23:57,206 --> 0:23:58,446
UIViewController that your

797
00:23:58,446 --> 0:24:00,346
application provides called the

798
00:23:58,446 --> 0:24:00,346
application provides called the

799
00:24:00,346 --> 0:24:01,366
Search Results Controller.

800
00:24:01,806 --> 0:24:05,336
Not every application behaves

801
00:24:05,336 --> 0:24:05,726
this way.

802
00:24:06,406 --> 0:24:07,336
For example, the mail

803
00:24:07,336 --> 0:24:09,246
application, as soon as you tap

804
00:24:09,246 --> 0:24:11,436
on the Search Field provides a

805
00:24:11,436 --> 0:24:12,826
list of suggested searches.

806
00:24:15,336 --> 0:24:16,346
This is still a

807
00:24:16,346 --> 0:24:17,886
UISearchController's Search

808
00:24:17,886 --> 0:24:19,726
Results Controller, and we're

809
00:24:19,726 --> 0:24:20,756
making this functionality

810
00:24:20,756 --> 0:24:22,916
available to you in iOS 13 as

811
00:24:22,916 --> 0:24:23,216
well.

812
00:24:24,516 --> 0:24:29,396
[ Applause ]

813
00:24:29,896 --> 0:24:30,456
Just set the

814
00:24:30,456 --> 0:24:32,016
showsSearchResultsController

815
00:24:32,016 --> 0:24:34,216
property on your Search

816
00:24:34,216 --> 0:24:36,326
Controller to true, and you can

817
00:24:36,326 --> 0:24:37,746
manage the automatic behavior

818
00:24:38,016 --> 0:24:39,296
with automatically shows search

819
00:24:39,296 --> 0:24:40,316
results controller property.

820
00:24:42,356 --> 0:24:43,996
There's another big feature in

821
00:24:43,996 --> 0:24:44,496
Search.

822
00:24:46,576 --> 0:24:48,536
In Mail and Photos and other

823
00:24:48,536 --> 0:24:49,886
applications on the system,

824
00:24:50,546 --> 0:24:53,146
these suggested searches result

825
00:24:54,066 --> 0:24:56,066
in what we call a token, which

826
00:24:56,066 --> 0:24:58,756
is a visual representation of a

827
00:24:58,756 --> 0:25:00,176
more complicated search query.

828
00:24:58,756 --> 0:25:00,176
more complicated search query.

829
00:25:00,766 --> 0:25:04,136
This functionality is available

830
00:25:04,136 --> 0:25:05,986
in your application on any

831
00:25:05,986 --> 0:25:07,526
instance of UISearchTextField

832
00:25:08,316 --> 0:25:10,296
via the new UISearchTokenAPI.

833
00:25:10,296 --> 0:25:12,836
And these tokens support Copy

834
00:25:12,836 --> 0:25:14,856
and Paste and Drag and Drop.

835
00:25:15,376 --> 0:25:16,686
It's the same implementation

836
00:25:16,776 --> 0:25:18,316
that we use for all of our

837
00:25:18,316 --> 0:25:18,976
applications.

838
00:25:19,516 --> 0:25:24,676
[ Applause ]

839
00:25:25,176 --> 0:25:27,716
For example, Photos uses it to

840
00:25:27,716 --> 0:25:29,956
provide saved or predicted

841
00:25:29,956 --> 0:25:32,816
searches for people, places, and

842
00:25:32,816 --> 0:25:33,366
objects.

843
00:25:34,756 --> 0:25:36,686
Tap on any of the entries in the

844
00:25:36,686 --> 0:25:39,106
SearchResultsController, and

845
00:25:39,106 --> 0:25:41,086
Photos transforms even a partial

846
00:25:41,086 --> 0:25:44,826
input into a token.

847
00:25:45,576 --> 0:25:47,216
As this is a subclass of

848
00:25:47,276 --> 0:25:49,156
UITextField, the tokens do

849
00:25:49,156 --> 0:25:50,596
interact with the text.

850
00:25:51,336 --> 0:25:53,626
In fact, they're always prior to

851
00:25:53,626 --> 0:25:54,296
the text.

852
00:25:55,726 --> 0:25:57,226
For example, if I pace the token

853
00:25:57,616 --> 0:25:59,376
into the search field, even

854
00:25:59,376 --> 0:26:00,856
though my insertion point is at

855
00:25:59,376 --> 0:26:00,856
though my insertion point is at

856
00:26:00,856 --> 0:26:02,626
the end of the search field, the

857
00:26:02,626 --> 0:26:03,906
token appears at the beginning,

858
00:26:05,436 --> 0:26:06,436
and as you can see here, the

859
00:26:06,436 --> 0:26:07,476
token is now selected.

860
00:26:08,716 --> 0:26:10,106
And I can extend the selection

861
00:26:10,576 --> 0:26:13,196
to include both the token and

862
00:26:14,096 --> 0:26:15,936
some text.

863
00:26:16,296 --> 0:26:18,506
Creating tokens is pretty easy.

864
00:26:19,716 --> 0:26:22,476
First, grab the selected text

865
00:26:22,476 --> 0:26:24,076
range to figure out what text

866
00:26:24,076 --> 0:26:25,766
you want to convert into a

867
00:26:26,416 --> 0:26:26,586
token.

868
00:26:26,726 --> 0:26:28,716
Create a UISearchToken object,

869
00:26:30,166 --> 0:26:31,746
and call this method on the

870
00:26:31,746 --> 0:26:33,836
SearchTextField to replace the

871
00:26:33,836 --> 0:26:35,496
textual portion of that range

872
00:26:35,856 --> 0:26:36,436
with a token.

873
00:26:37,706 --> 0:26:39,216
Your app is in complete control

874
00:26:39,446 --> 0:26:41,226
over the insertion and removal

875
00:26:41,226 --> 0:26:43,836
of tokens, so you can attach any

876
00:26:43,996 --> 0:26:48,746
meaning to them that you want.

877
00:26:48,746 --> 0:26:51,096
Now, UITextField conforms to a

878
00:26:51,096 --> 0:26:52,996
protocol called UITextInput.

879
00:26:54,026 --> 0:26:55,026
If you're doing programmatic

880
00:26:55,026 --> 0:26:57,266
selection, it's important to

881
00:26:57,266 --> 0:26:58,576
understand some aspects of

882
00:26:58,576 --> 0:27:01,956
UITextInput, namely ranges and

883
00:26:58,576 --> 0:27:01,956
UITextInput, namely ranges and

884
00:27:01,956 --> 0:27:02,616
positions.

885
00:27:03,986 --> 0:27:05,976
In a normal text field, every

886
00:27:05,976 --> 0:27:07,616
character is assigned a

887
00:27:07,616 --> 0:27:10,266
UITextPosition, and these

888
00:27:10,266 --> 0:27:12,396
positions are relative to two

889
00:27:12,396 --> 0:27:13,846
well-known positions at the

890
00:27:13,846 --> 0:27:16,126
beginning and the end of what we

891
00:27:16,126 --> 0:27:17,546
call the document, which is the

892
00:27:17,546 --> 0:27:18,546
search field's content.

893
00:27:19,136 --> 0:27:22,486
And you can use these positions

894
00:27:22,856 --> 0:27:24,876
to create UITextRanges.

895
00:27:25,396 --> 0:27:26,936
For example, to programmatically

896
00:27:26,936 --> 0:27:28,756
select a portion of the field's

897
00:27:28,756 --> 0:27:29,256
content.

898
00:27:31,316 --> 0:27:33,696
Because tokens are selectable,

899
00:27:34,096 --> 0:27:36,686
they too get UITextPositions.

900
00:27:37,246 --> 0:27:40,996
But the length of the text of a

901
00:27:40,996 --> 0:27:43,546
search field is now different

902
00:27:43,936 --> 0:27:45,556
from the distance from the

903
00:27:45,556 --> 0:27:47,246
beginning of the document to the

904
00:27:47,246 --> 0:27:48,956
last character's position.

905
00:27:50,096 --> 0:27:51,696
If this matters to you, for

906
00:27:51,696 --> 0:27:53,306
example, to programmatically

907
00:27:53,306 --> 0:27:55,046
select a portion of the text,

908
00:27:55,656 --> 0:27:58,166
UISearchTextField exports this

909
00:27:58,166 --> 0:28:00,136
new property, textualRange.

910
00:27:58,166 --> 0:28:00,136
new property, textualRange.

911
00:28:01,516 --> 0:28:02,076
The beginning of the

912
00:28:02,076 --> 0:28:04,046
textualRange is the first

913
00:28:04,416 --> 0:28:06,336
nontoken character in the field,

914
00:28:07,056 --> 0:28:08,436
and its end is the end of the

915
00:28:08,436 --> 0:28:08,866
document.

916
00:28:09,656 --> 0:28:10,986
These match up with character

917
00:28:10,986 --> 0:28:13,056
indexes in the text property.

918
00:28:13,686 --> 0:28:16,196
So, to take advantage of all of

919
00:28:16,196 --> 0:28:17,376
this new functionality in your

920
00:28:17,376 --> 0:28:19,066
application, take a look at the

921
00:28:19,066 --> 0:28:20,836
new properties and customization

922
00:28:20,836 --> 0:28:22,066
options available on

923
00:28:22,066 --> 0:28:22,946
UISearchController.

924
00:28:24,136 --> 0:28:26,316
Use UISearchTextField either

925
00:28:26,316 --> 0:28:27,906
inside the UISearchBar or

926
00:28:27,906 --> 0:28:29,196
anywhere else you can use a

927
00:28:29,196 --> 0:28:31,996
UITextField today, and customize

928
00:28:31,996 --> 0:28:33,246
it with all of the customization

929
00:28:33,246 --> 0:28:34,876
options that are available on

930
00:28:34,876 --> 0:28:35,516
UITextField.

931
00:28:36,696 --> 0:28:39,136
Adopt UISearchToken to represent

932
00:28:39,136 --> 0:28:41,106
complicated queries in a concise

933
00:28:41,106 --> 0:28:42,896
editable fashion that supports

934
00:28:42,896 --> 0:28:44,706
Copy and Paste and Drag and

935
00:28:45,336 --> 0:28:45,466
Drop.

936
00:28:46,176 --> 0:28:47,416
There's a lot of advanced

937
00:28:47,416 --> 0:28:48,696
techniques you can do with this,

938
00:28:49,016 --> 0:28:50,026
so we're going to have a sample

939
00:28:50,026 --> 0:28:51,916
project available soon at this

940
00:28:51,916 --> 0:28:53,246
session's website, that

941
00:28:53,246 --> 0:28:54,586
demonstrates how to use tokens

942
00:28:54,586 --> 0:28:55,146
effectively.

943
00:29:00,026 --> 0:29:00,596
Now, I'm going to hand it over

944
00:29:00,596 --> 0:29:01,276
to James, who's going to talk

945
00:29:01,276 --> 0:29:01,786
about Gestures.

946
00:29:02,516 --> 0:29:08,856
[ Applause ]

947
00:29:09,356 --> 0:29:10,016
&gt;&gt; Thanks Kyle.

948
00:29:10,806 --> 0:29:11,426
Hey everybody.

949
00:29:11,786 --> 0:29:13,836
I'm James Magahern, and I'm here

950
00:29:13,836 --> 0:29:15,186
to show you some new Gestures

951
00:29:15,186 --> 0:29:16,936
that we've added in iOS 13

952
00:29:17,266 --> 0:29:18,636
themed around selection,

953
00:29:18,716 --> 0:29:20,246
organization, and some common

954
00:29:20,246 --> 0:29:21,056
editing shortcuts.

955
00:29:21,846 --> 0:29:24,096
So this is everything I'm going

956
00:29:24,096 --> 0:29:25,226
to be talking about today.

957
00:29:25,576 --> 0:29:26,406
The best news you're going to

958
00:29:26,406 --> 0:29:27,576
hear all day is that a lot of

959
00:29:27,576 --> 0:29:28,696
this behavior is actually

960
00:29:28,696 --> 0:29:29,796
automatic, stuff that you're

961
00:29:29,796 --> 0:29:31,396
going to get for free, but I'm

962
00:29:31,396 --> 0:29:32,376
here to tell you about what's

963
00:29:32,376 --> 0:29:33,766
different and what you need to

964
00:29:33,766 --> 0:29:35,226
do in order to take full

965
00:29:35,226 --> 0:29:36,626
advantage of these new features

966
00:29:36,856 --> 0:29:37,906
inside of your application.

967
00:29:38,736 --> 0:29:39,696
So, let's start with some new

968
00:29:39,696 --> 0:29:41,336
features regarding text

969
00:29:41,336 --> 0:29:42,916
selection gestures in custom

970
00:29:42,916 --> 0:29:43,546
text views.

971
00:29:44,266 --> 0:29:46,606
So, as you know, there's a lot

972
00:29:46,606 --> 0:29:48,326
of really great existing ways to

973
00:29:48,326 --> 0:29:50,496
select text on iOS using

974
00:29:50,496 --> 0:29:50,956
Gestures.

975
00:29:51,726 --> 0:29:53,286
You can tap and hold to start

976
00:29:53,286 --> 0:29:54,846
highlighting right away, that's

977
00:29:54,846 --> 0:29:56,066
a new thing in iOS 13.

978
00:29:56,796 --> 0:29:57,936
You can long press to get the

979
00:29:57,936 --> 0:29:59,206
selection loop and move the

980
00:29:59,206 --> 0:30:01,036
insertion point around, and you

981
00:29:59,206 --> 0:30:01,036
insertion point around, and you

982
00:30:01,036 --> 0:30:02,886
can triple tap on a paragraph to

983
00:30:02,886 --> 0:30:04,066
select the entire paragraph all

984
00:30:04,066 --> 0:30:04,706
at once.

985
00:30:06,216 --> 0:30:08,086
So, these Gestures work great in

986
00:30:08,086 --> 0:30:09,736
native text widgets like

987
00:30:09,876 --> 0:30:11,776
UITextView and UITextField.

988
00:30:12,096 --> 0:30:12,846
You already get those.

989
00:30:14,346 --> 0:30:16,576
But, there might be some cases

990
00:30:16,906 --> 0:30:18,636
where you need to go beyond what

991
00:30:18,636 --> 0:30:19,996
TextView and TextField are

992
00:30:19,996 --> 0:30:20,596
capable of.

993
00:30:21,226 --> 0:30:22,256
Some of you need to implement

994
00:30:22,386 --> 0:30:24,066
highly customized text drawing

995
00:30:24,236 --> 0:30:24,746
in your apps.

996
00:30:26,156 --> 0:30:27,396
So, here's books as an example,

997
00:30:27,396 --> 0:30:28,696
where they use a completely

998
00:30:28,696 --> 0:30:30,326
customed text view to control

999
00:30:30,326 --> 0:30:32,126
the margins, character spacing,

1000
00:30:32,126 --> 0:30:36,196
etc. So, currently, in order to

1001
00:30:36,196 --> 0:30:37,766
get selection behavior like this

1002
00:30:38,006 --> 0:30:40,166
in a custom text view, you had

1003
00:30:40,166 --> 0:30:41,736
to manually add all of the

1004
00:30:42,006 --> 0:30:43,586
system text selection Gestures

1005
00:30:43,776 --> 0:30:45,496
to your app just to get parity

1006
00:30:45,496 --> 0:30:46,506
with the native text widgets.

1007
00:30:47,916 --> 0:30:48,846
Many of you also had to

1008
00:30:48,846 --> 0:30:49,986
implement you own UI for

1009
00:30:50,206 --> 0:30:51,886
selection, like the selection

1010
00:30:51,886 --> 0:30:53,146
rectangles, the blue selection

1011
00:30:53,146 --> 0:30:54,536
rectangles or the selection

1012
00:30:54,536 --> 0:30:56,176
handles just to offer this

1013
00:30:56,216 --> 0:30:56,706
behavior.

1014
00:30:57,326 --> 0:30:59,586
So, I'm pleased to announce in

1015
00:30:59,586 --> 0:31:01,956
iOS 13 this can be accomplished

1016
00:30:59,586 --> 0:31:01,956
iOS 13 this can be accomplished

1017
00:31:01,956 --> 0:31:03,796
much easier with a new type of

1018
00:31:03,796 --> 0:31:05,276
UIInteraction called

1019
00:31:05,276 --> 0:31:06,326
UITextInteraction.

1020
00:31:07,736 --> 0:31:08,616
So, in case you're not familiar

1021
00:31:08,616 --> 0:31:10,106
with UIInteractions, you can

1022
00:31:10,106 --> 0:31:10,856
think of them as a way to

1023
00:31:10,856 --> 0:31:12,496
encapsulate sort of a set of

1024
00:31:12,656 --> 0:31:14,786
behaviors and Gestures related

1025
00:31:14,786 --> 0:31:15,916
to UIKit widgets.

1026
00:31:16,386 --> 0:31:17,256
Think of Drag and Drop

1027
00:31:17,256 --> 0:31:18,516
interactions, similar to that.

1028
00:31:19,676 --> 0:31:21,166
So it's only three lines of code

1029
00:31:21,846 --> 0:31:23,216
to add all of the system test

1030
00:31:23,216 --> 0:31:24,766
selection Gestures to your app,

1031
00:31:25,146 --> 0:31:26,106
the ones that your users are

1032
00:31:26,106 --> 0:31:26,936
already familiar with.

1033
00:31:27,966 --> 0:31:30,066
We provide a set of Gestures for

1034
00:31:30,066 --> 0:31:32,346
editable and noneditable text

1035
00:31:32,346 --> 0:31:34,726
interactions, and you can use

1036
00:31:34,726 --> 0:31:37,096
the UITextInputProtocol to get

1037
00:31:37,096 --> 0:31:39,326
more fine grain control over the

1038
00:31:39,326 --> 0:31:40,786
selection UI, like the

1039
00:31:40,876 --> 0:31:42,686
rectangles and the handles that

1040
00:31:42,686 --> 0:31:43,526
I was mentioning before.

1041
00:31:44,106 --> 0:31:47,176
So here's what you need to do to

1042
00:31:47,176 --> 0:31:48,236
get started with

1043
00:31:48,456 --> 0:31:50,266
UITextInteraction in your Custom

1044
00:31:50,266 --> 0:31:50,686
Text View.

1045
00:31:51,566 --> 0:31:52,656
So, as I said, it's only three

1046
00:31:52,656 --> 0:31:53,946
lines of code to do this, minus

1047
00:31:53,946 --> 0:31:54,406
the comments.

1048
00:31:55,676 --> 0:31:56,796
So you create the interaction

1049
00:31:56,866 --> 0:31:58,956
using UITextInteraction 4, and

1050
00:31:58,956 --> 0:31:59,926
let us know if you want the set

1051
00:31:59,926 --> 0:32:01,376
of Gestures for editable or

1052
00:31:59,926 --> 0:32:01,376
of Gestures for editable or

1053
00:32:01,376 --> 0:32:02,636
noneditable text fields.

1054
00:32:04,006 --> 0:32:05,506
Then assign the text input

1055
00:32:05,506 --> 0:32:06,946
property to your view that

1056
00:32:07,006 --> 0:32:07,646
implements the

1057
00:32:07,646 --> 0:32:09,116
UITextInputProtocol.

1058
00:32:09,666 --> 0:32:11,176
We keep this separate in case

1059
00:32:11,176 --> 0:32:12,296
you want Gestures to work on a

1060
00:32:12,296 --> 0:32:13,656
container view, like a scroll

1061
00:32:13,656 --> 0:32:15,236
view, but you want all of the

1062
00:32:15,236 --> 0:32:17,616
text selection behavior to get

1063
00:32:17,616 --> 0:32:19,176
handled by some contained view,

1064
00:32:19,226 --> 0:32:20,056
like the one that's actually

1065
00:32:20,056 --> 0:32:20,986
drawing the text.

1066
00:32:22,276 --> 0:32:23,206
And finally, just add the

1067
00:32:23,206 --> 0:32:24,706
interaction to your view with

1068
00:32:24,936 --> 0:32:25,596
Add Interaction.

1069
00:32:26,166 --> 0:32:29,966
Well, take a trip--

1070
00:32:30,516 --> 0:32:32,966
[ Applause ]

1071
00:32:33,466 --> 0:32:34,526
Take a trip with me over to this

1072
00:32:34,526 --> 0:32:35,376
side of the stage, and we'll

1073
00:32:35,376 --> 0:32:37,256
talk about multiple selection

1074
00:32:37,386 --> 0:32:39,186
Gestures in TableViews and

1075
00:32:39,186 --> 0:32:39,716
CollectionViews.

1076
00:32:40,526 --> 0:32:44,616
So we've long supported Multiple

1077
00:32:44,616 --> 0:32:45,916
Selection Mode in

1078
00:32:45,916 --> 0:32:47,146
UICollectionView and

1079
00:32:47,146 --> 0:32:47,896
UITableView.

1080
00:32:48,726 --> 0:32:50,226
Apps like Notes here have a

1081
00:32:50,226 --> 0:32:51,876
Select button on the top right

1082
00:32:51,876 --> 0:32:54,166
corner where users can tap it to

1083
00:32:54,166 --> 0:32:55,676
enter multiple selection mode

1084
00:32:56,096 --> 0:32:57,466
and then individually select

1085
00:32:57,736 --> 0:32:59,436
each individual note one by one

1086
00:32:59,656 --> 0:33:01,706
to group them together and then

1087
00:32:59,656 --> 0:33:01,706
to group them together and then

1088
00:33:01,836 --> 0:33:03,276
organize them with Drag and Drop

1089
00:33:03,276 --> 0:33:04,556
or one of those action buttons

1090
00:33:04,556 --> 0:33:05,236
at the bottom there.

1091
00:33:05,766 --> 0:33:07,616
Well, I'm pleased to announce in

1092
00:33:07,616 --> 0:33:09,106
iOS 13 we're introducing a

1093
00:33:09,106 --> 0:33:11,316
totally new way of quickly

1094
00:33:11,316 --> 0:33:13,056
selecting a contiguous batch of

1095
00:33:13,056 --> 0:33:14,636
items in collection views and

1096
00:33:14,636 --> 0:33:15,016
table views.

1097
00:33:15,976 --> 0:33:16,606
So, let me show you what that

1098
00:33:16,606 --> 0:33:17,776
looks like here on this giant

1099
00:33:17,776 --> 0:33:18,006
iPad.

1100
00:33:19,026 --> 0:33:20,646
So now, users will be able to

1101
00:33:20,696 --> 0:33:22,576
instantly jump into multiple

1102
00:33:22,576 --> 0:33:24,376
selection mode by simply placing

1103
00:33:24,376 --> 0:33:25,996
two fingers down anywhere on a

1104
00:33:25,996 --> 0:33:28,066
table or collection view and pan

1105
00:33:28,066 --> 0:33:30,246
across to start selecting right

1106
00:33:30,246 --> 0:33:30,456
away.

1107
00:33:34,316 --> 0:33:36,296
Thanks, that's really awesome.

1108
00:33:36,296 --> 0:33:37,646
So, here you can see taking two

1109
00:33:37,646 --> 0:33:38,876
fingers and sliding down the

1110
00:33:38,876 --> 0:33:40,026
list view in files will

1111
00:33:40,076 --> 0:33:41,386
instantly put it into edit mode

1112
00:33:41,386 --> 0:33:42,436
and start selecting cells.

1113
00:33:43,916 --> 0:33:45,496
Even cooler, the same works for

1114
00:33:45,496 --> 0:33:46,576
a grid of items in a

1115
00:33:46,576 --> 0:33:48,596
UICollectionView flow layout, so

1116
00:33:48,596 --> 0:33:49,996
your users will be able to pan

1117
00:33:49,996 --> 0:33:51,376
two fingers across a grid of

1118
00:33:51,376 --> 0:33:52,656
items and select a bunch of

1119
00:33:52,656 --> 0:33:53,796
things all at once.

1120
00:33:54,446 --> 0:33:55,726
This is absolutely a dream come

1121
00:33:55,726 --> 0:33:56,716
true for Drag and Drop.

1122
00:33:57,226 --> 0:34:01,316
Not to mention, if your users

1123
00:33:57,226 --> 0:34:01,316
Not to mention, if your users

1124
00:34:01,316 --> 0:34:02,266
have a hardware keyboard

1125
00:34:02,266 --> 0:34:03,966
attached, they can also hold the

1126
00:34:03,966 --> 0:34:05,956
shift or command key to tap on

1127
00:34:05,956 --> 0:34:07,416
other items, and it behaves just

1128
00:34:07,416 --> 0:34:08,966
like it does on macOS.

1129
00:34:10,246 --> 0:34:10,396
Thanks.

1130
00:34:11,516 --> 0:34:14,656
[ Applause ]

1131
00:34:15,156 --> 0:34:16,556
And now especially that your

1132
00:34:16,556 --> 0:34:18,106
iPad apps can run on the Mac,

1133
00:34:18,346 --> 0:34:19,966
your table views can feel right

1134
00:34:20,696 --> 0:34:22,406
at home.

1135
00:34:22,626 --> 0:34:24,326
So, these awesome new behaviors

1136
00:34:24,326 --> 0:34:26,216
are currently opt in, and the

1137
00:34:26,216 --> 0:34:27,576
reason why is because your app

1138
00:34:27,666 --> 0:34:29,216
might need to adapt around the

1139
00:34:29,216 --> 0:34:30,786
fact that your user intends to

1140
00:34:30,786 --> 0:34:32,216
enter multiple selection mode.

1141
00:34:33,036 --> 0:34:33,876
For instance, you might want to

1142
00:34:33,876 --> 0:34:35,696
change the select or edit button

1143
00:34:35,696 --> 0:34:37,335
to say cancel or done instead.

1144
00:34:38,146 --> 0:34:39,136
You might want to show action

1145
00:34:39,136 --> 0:34:40,076
buttons at the bottom of the

1146
00:34:40,076 --> 0:34:41,826
screen for stuff to do with the

1147
00:34:41,826 --> 0:34:43,085
things that your user selected,

1148
00:34:43,735 --> 0:34:44,886
or you might to disable some UI

1149
00:34:44,886 --> 0:34:46,676
like the add not button in this

1150
00:34:46,716 --> 0:34:47,005
case.

1151
00:34:47,786 --> 0:34:50,216
So, to account for this, we're

1152
00:34:50,216 --> 0:34:51,626
adding just a couple of new APIs

1153
00:34:51,766 --> 0:34:53,186
to help you adapt to these new

1154
00:34:53,186 --> 0:34:53,726
behaviors.

1155
00:34:54,516 --> 0:34:55,376
It's really easy.

1156
00:34:55,446 --> 0:34:56,516
There's only two delegate

1157
00:34:56,516 --> 0:34:57,736
methods to implement, and

1158
00:34:57,996 --> 0:34:59,296
there's roughly equivalent

1159
00:34:59,296 --> 0:35:01,186
versions on both Table View and

1160
00:34:59,296 --> 0:35:01,186
versions on both Table View and

1161
00:35:01,186 --> 0:35:01,826
Collection View.

1162
00:35:02,406 --> 0:35:04,546
So here they are.

1163
00:35:05,656 --> 0:35:06,956
The first one to implement is

1164
00:35:06,956 --> 0:35:08,256
just Should Begin Multiple

1165
00:35:08,256 --> 0:35:09,756
Selection Interaction at Index

1166
00:35:09,756 --> 0:35:10,346
Path.

1167
00:35:10,346 --> 0:35:11,836
Or you can return true if you

1168
00:35:11,836 --> 0:35:12,886
would like to allow the gesture

1169
00:35:12,886 --> 0:35:13,346
to begin.

1170
00:35:14,196 --> 0:35:15,456
And we give you the index path

1171
00:35:15,456 --> 0:35:17,066
here in case you'd like to

1172
00:35:17,066 --> 0:35:18,366
prevent the selection from

1173
00:35:18,366 --> 0:35:19,486
beginning on a part of your

1174
00:35:19,486 --> 0:35:20,336
table view that's not

1175
00:35:20,336 --> 0:35:21,686
selectable, in which case you

1176
00:35:21,686 --> 0:35:22,746
can just return false.

1177
00:35:23,336 --> 0:35:25,576
And the second method to

1178
00:35:25,576 --> 0:35:27,106
implement is did begin multiple

1179
00:35:27,106 --> 0:35:28,546
selection interaction at index

1180
00:35:28,546 --> 0:35:30,566
path, where you can adapt your

1181
00:35:30,566 --> 0:35:32,046
surrounding UI to account for

1182
00:35:32,046 --> 0:35:34,256
the fact that the TableView was

1183
00:35:34,256 --> 0:35:35,806
automatically put into Multiple

1184
00:35:35,806 --> 0:35:37,086
Selection Mode, just like we're

1185
00:35:37,086 --> 0:35:38,496
talking about on the previous

1186
00:35:38,976 --> 0:35:39,106
slide.

1187
00:35:41,736 --> 0:35:43,636
So moving on, the last thing I

1188
00:35:43,636 --> 0:35:44,526
want to talk about is just

1189
00:35:44,526 --> 0:35:46,176
briefly cover some enhancements

1190
00:35:46,176 --> 0:35:47,606
that we've made to some common

1191
00:35:47,606 --> 0:35:49,256
editing tasks using some new

1192
00:35:49,256 --> 0:35:49,726
gestures.

1193
00:35:50,486 --> 0:35:53,776
So, in iOS 13, we're introducing

1194
00:35:53,776 --> 0:35:55,446
a standard set of Gestures to

1195
00:35:55,446 --> 0:35:56,746
make it easier to do some common

1196
00:35:56,746 --> 0:35:57,626
editing tasks.

1197
00:35:58,316 --> 0:35:59,806
For example, using three

1198
00:35:59,806 --> 0:36:01,466
fingers, users can now swipe

1199
00:35:59,806 --> 0:36:01,466
fingers, users can now swipe

1200
00:36:01,616 --> 0:36:04,346
back to undo and then swipe the

1201
00:36:04,346 --> 0:36:05,936
other way to redo.

1202
00:36:07,876 --> 0:36:10,036
Pinching three fingers in will

1203
00:36:10,036 --> 0:36:12,856
copy, and then pinching them out

1204
00:36:13,236 --> 0:36:14,506
will paste.

1205
00:36:17,676 --> 0:36:19,526
So, we're bringing this standard

1206
00:36:19,526 --> 0:36:21,346
set of productivity gestures to

1207
00:36:21,346 --> 0:36:22,716
the system so that you don't

1208
00:36:22,716 --> 0:36:24,006
have to worry about implementing

1209
00:36:24,006 --> 0:36:25,446
UI for these common editing

1210
00:36:25,446 --> 0:36:25,936
commands.

1211
00:36:26,566 --> 0:36:27,866
It's unified across the whole

1212
00:36:27,866 --> 0:36:29,746
system so your customers will be

1213
00:36:29,746 --> 0:36:31,176
able to discover right away

1214
00:36:31,176 --> 0:36:32,416
within your app, and they'll be

1215
00:36:32,416 --> 0:36:33,456
instantly familiar with it.

1216
00:36:34,176 --> 0:36:35,376
It's really great for drawing

1217
00:36:35,376 --> 0:36:36,496
apps because you don't need to

1218
00:36:36,496 --> 0:36:38,076
show any floating panels or

1219
00:36:38,076 --> 0:36:39,446
Toolbars in order to offer this

1220
00:36:39,446 --> 0:36:39,936
behavior.

1221
00:36:40,626 --> 0:36:42,356
And best of all, it's completely

1222
00:36:42,356 --> 0:36:43,976
free if you're already using

1223
00:36:43,976 --> 0:36:46,216
undo manager or NS undo manager.

1224
00:36:47,616 --> 0:36:49,536
So, my call to action here is

1225
00:36:49,536 --> 0:36:51,516
for you to try these gestures in

1226
00:36:51,516 --> 0:36:53,156
your app when you get a chance

1227
00:36:53,156 --> 0:36:54,136
and make sure that they work

1228
00:36:54,136 --> 0:36:54,746
really well.

1229
00:36:56,036 --> 0:36:57,966
But just in case, I can see some

1230
00:36:57,966 --> 0:36:59,506
of you are nervous, so just in

1231
00:36:59,506 --> 0:37:01,516
case they conflict with other

1232
00:36:59,506 --> 0:37:01,516
case they conflict with other

1233
00:37:01,516 --> 0:37:02,736
three-finger gestures that you

1234
00:37:02,736 --> 0:37:03,746
might have within your app,

1235
00:37:04,516 --> 0:37:06,096
we're offering an escape hatch

1236
00:37:06,096 --> 0:37:07,186
via some new API.

1237
00:37:07,966 --> 0:37:10,656
It's just a simple property that

1238
00:37:10,656 --> 0:37:12,396
you override on UIResponder

1239
00:37:12,606 --> 0:37:12,956
called

1240
00:37:12,956 --> 0:37:14,446
EditingInteractionConfiguration,

1241
00:37:14,966 --> 0:37:16,286
where you can return none if

1242
00:37:16,286 --> 0:37:17,586
you'd like to opt out of these

1243
00:37:17,586 --> 0:37:18,016
gestures.

1244
00:37:19,456 --> 0:37:21,166
So here's the takeaway, I hope,

1245
00:37:21,366 --> 0:37:21,866
for today.

1246
00:37:22,486 --> 0:37:24,116
Finally offer system-wide

1247
00:37:24,186 --> 0:37:25,766
standard text selection gestures

1248
00:37:26,316 --> 0:37:27,626
in your customized text widgets.

1249
00:37:28,076 --> 0:37:29,836
Change the way your users

1250
00:37:29,836 --> 0:37:31,516
organize information in your app

1251
00:37:31,946 --> 0:37:33,076
using multiple selection

1252
00:37:33,076 --> 0:37:33,456
gestures.

1253
00:37:33,456 --> 0:37:34,576
I really hope you adopt that

1254
00:37:34,576 --> 0:37:34,776
one.

1255
00:37:36,236 --> 0:37:37,546
And finally, allow your users to

1256
00:37:37,546 --> 0:37:39,296
stop shaking their iPad and

1257
00:37:39,296 --> 0:37:41,316
control the undo stack with a

1258
00:37:41,316 --> 0:37:42,376
standard set of gestures.

1259
00:37:43,336 --> 0:37:45,336
[ Applause ]

1260
00:37:45,696 --> 0:37:47,216
Yeah, it hurts.

1261
00:37:48,136 --> 0:37:49,026
So, thanks.

1262
00:37:49,026 --> 0:37:49,916
Now I'd like to hand it off to

1263
00:37:49,916 --> 0:37:51,326
Mohammed to talk about menus.

1264
00:37:52,516 --> 0:37:57,726
[ Applause ]

1265
00:37:58,226 --> 0:37:58,456
&gt;&gt; All right.

1266
00:37:58,456 --> 0:37:59,086
Thanks James.

1267
00:38:00,946 --> 0:38:01,826
Hi everyone.

1268
00:38:01,826 --> 0:38:03,556
I'm Mohammed, and I'm excited to

1269
00:38:03,556 --> 0:38:05,196
talk to you about some powerful

1270
00:38:05,196 --> 0:38:06,956
new APIs we're introducing in

1271
00:38:07,106 --> 0:38:09,546
iOS 13 that allow you to present

1272
00:38:09,896 --> 0:38:12,236
fluid interactive menus with

1273
00:38:12,236 --> 0:38:14,436
rich previews in your apps.

1274
00:38:15,696 --> 0:38:17,706
The first of these APIs is

1275
00:38:17,706 --> 0:38:19,616
UIContextMenuInteraction.

1276
00:38:21,936 --> 0:38:24,076
UIContextMenuInteraction is a

1277
00:38:24,076 --> 0:38:26,266
UIInteraction that lets you

1278
00:38:26,266 --> 0:38:28,246
present menus with rich previews

1279
00:38:28,546 --> 0:38:30,146
and complex hierarchies.

1280
00:38:31,076 --> 0:38:32,166
These hierarchies can have

1281
00:38:32,196 --> 0:38:34,436
nested sub-menus and in-line

1282
00:38:34,436 --> 0:38:35,066
sections.

1283
00:38:35,216 --> 0:38:36,346
We'll see what that means later

1284
00:38:37,076 --> 0:38:37,146
on.

1285
00:38:38,416 --> 0:38:40,046
The menu presented by the center

1286
00:38:40,046 --> 0:38:41,676
action is highly adaptive,

1287
00:38:42,386 --> 0:38:44,086
meaning it'll do the right thing

1288
00:38:44,086 --> 0:38:45,416
depending on the context in

1289
00:38:45,416 --> 0:38:46,156
which it's presented.

1290
00:38:47,216 --> 0:38:48,976
So, here we see it on an iPhone

1291
00:38:48,976 --> 0:38:49,536
in portrait.

1292
00:38:49,756 --> 0:38:51,226
We have the preview and the

1293
00:38:51,226 --> 0:38:52,436
actions kind of vertically

1294
00:38:52,436 --> 0:38:53,646
stacked above one another.

1295
00:38:54,216 --> 0:38:57,526
On an iPhone in landscape, we

1296
00:38:57,526 --> 0:38:58,866
get the preview and the action

1297
00:38:58,866 --> 0:39:00,596
side by side to better take

1298
00:38:58,866 --> 0:39:00,596
side by side to better take

1299
00:39:00,596 --> 0:39:01,656
advantage of the available

1300
00:39:01,656 --> 0:39:02,216
space.

1301
00:39:02,666 --> 0:39:06,796
And on an iPad, it reconfigures

1302
00:39:06,796 --> 0:39:08,376
itself depending on the

1303
00:39:08,376 --> 0:39:10,166
available space and size of its

1304
00:39:10,216 --> 0:39:11,536
preview and actions list.

1305
00:39:12,026 --> 0:39:15,026
And since this is a

1306
00:39:15,026 --> 0:39:16,996
cross-platform API, if you're

1307
00:39:16,996 --> 0:39:19,366
running your app on the Mac, it

1308
00:39:19,366 --> 0:39:21,046
turns into a familiar macOS

1309
00:39:21,246 --> 0:39:21,916
context menu.

1310
00:39:25,616 --> 0:39:27,066
The interaction provides a

1311
00:39:27,066 --> 0:39:29,586
consistent experience by

1312
00:39:29,756 --> 0:39:31,556
presenting the menu using the

1313
00:39:31,556 --> 0:39:33,816
same gesture throughout iOS.

1314
00:39:35,156 --> 0:39:36,556
So users will come to expect

1315
00:39:36,636 --> 0:39:38,436
that this gesture brings up a

1316
00:39:38,436 --> 0:39:41,846
menu anywhere in the system.

1317
00:39:41,976 --> 0:39:43,726
The gesture will adapt to the

1318
00:39:43,726 --> 0:39:44,866
device's capabilities.

1319
00:39:45,596 --> 0:39:48,026
So, on phones with 3D touch, we

1320
00:39:48,026 --> 0:39:49,306
will use 3D touch to bring up

1321
00:39:49,306 --> 0:39:50,896
the menu quickly and provide

1322
00:39:50,896 --> 0:39:51,596
some nice feedback.

1323
00:39:52,356 --> 0:39:54,736
On phones without 3D touch

1324
00:39:54,736 --> 0:39:56,136
capability, we'll use Haptic

1325
00:39:56,206 --> 0:39:57,806
Touch, and we'll keep that nice

1326
00:39:57,836 --> 0:39:59,156
feedback whenever the menu pops

1327
00:39:59,876 --> 0:39:59,946
up.

1328
00:40:00,496 --> 0:40:02,586
On other iOS devices, we'll use

1329
00:40:02,586 --> 0:40:05,086
a long press, and on the Mac,

1330
00:40:05,256 --> 0:40:06,736
it'll be your user's secondary

1331
00:40:06,736 --> 0:40:07,466
click setting.

1332
00:40:07,466 --> 0:40:09,336
So, a right click or a command

1333
00:40:09,336 --> 0:40:12,946
click or two-finger tap.

1334
00:40:15,636 --> 0:40:17,366
The interaction is automatically

1335
00:40:17,366 --> 0:40:18,756
integrated with other system

1336
00:40:18,756 --> 0:40:20,536
behaviors like Drag and Drop.

1337
00:40:21,516 --> 0:40:22,476
So if you've adopted

1338
00:40:22,526 --> 0:40:24,616
UIDragInteraction in your app

1339
00:40:24,786 --> 0:40:26,036
and you choose to adopt

1340
00:40:26,036 --> 0:40:27,666
UIContextMenuInteraction

1341
00:40:27,806 --> 0:40:30,286
alongside it, users will be able

1342
00:40:30,286 --> 0:40:32,136
to transition into dragging at

1343
00:40:32,186 --> 0:40:32,696
any point.

1344
00:40:33,886 --> 0:40:35,926
So, here we see as soon as that

1345
00:40:35,926 --> 0:40:37,476
initial threshold for dragging

1346
00:40:37,476 --> 0:40:39,436
is met, you're able to move your

1347
00:40:39,436 --> 0:40:42,126
finger to drag the photo over to

1348
00:40:42,126 --> 0:40:43,386
the files app.

1349
00:40:44,336 --> 0:40:45,986
However, if you wait a little

1350
00:40:45,986 --> 0:40:47,726
bit longer under the menu is

1351
00:40:47,766 --> 0:40:49,676
presented, you're still able to

1352
00:40:49,896 --> 0:40:51,936
transition smoothly into a drag

1353
00:40:52,376 --> 0:40:53,746
without removing your finger

1354
00:40:53,746 --> 0:40:54,396
from the screen.

1355
00:40:55,536 --> 0:40:57,356
So users have this nice fluid

1356
00:40:57,356 --> 0:40:58,536
continuous experience.

1357
00:40:59,056 --> 0:41:03,856
The second part of our API

1358
00:40:59,056 --> 0:41:03,856
The second part of our API

1359
00:41:03,936 --> 0:41:06,306
package today is UIMenu and

1360
00:41:06,306 --> 0:41:07,186
UIAction.

1361
00:41:08,866 --> 0:41:11,666
UIMenu and UIAction are a

1362
00:41:12,096 --> 0:41:14,076
hierarchical menu construction

1363
00:41:14,176 --> 0:41:16,936
system that allows us to define

1364
00:41:17,086 --> 0:41:18,496
and describe the menu

1365
00:41:18,496 --> 0:41:20,536
hierarchies that we're going to

1366
00:41:21,106 --> 0:41:22,876
want to display.

1367
00:41:22,876 --> 0:41:24,116
UIMenus are composable.

1368
00:41:24,176 --> 0:41:25,456
They're basically like building

1369
00:41:25,456 --> 0:41:26,856
blocks that we can put together

1370
00:41:27,116 --> 0:41:28,456
in different configurations to

1371
00:41:28,456 --> 0:41:29,736
describe different menu

1372
00:41:29,736 --> 0:41:30,366
hierarchies.

1373
00:41:33,486 --> 0:41:35,166
So, in a simple example here,

1374
00:41:35,166 --> 0:41:37,796
I've created a two action menu

1375
00:41:38,036 --> 0:41:40,646
by creating a UIMenu and passing

1376
00:41:40,646 --> 0:41:43,386
it to UIAction children, a share

1377
00:41:43,386 --> 0:41:45,156
action and a delete action.

1378
00:41:45,156 --> 0:41:47,776
If I want to add a little bit

1379
00:41:47,816 --> 0:41:49,576
more functionality to my menu by

1380
00:41:49,576 --> 0:41:51,676
say adding a sub-menu, all I

1381
00:41:51,676 --> 0:41:54,056
need to do is create another

1382
00:41:54,056 --> 0:41:56,656
UIMenu, give it some descriptive

1383
00:41:56,706 --> 0:41:58,726
title to display at the previous

1384
00:41:58,756 --> 0:42:01,176
level in the hierarchy, and pass

1385
00:41:58,756 --> 0:42:01,176
level in the hierarchy, and pass

1386
00:42:01,176 --> 0:42:02,456
it the desired children.

1387
00:42:02,536 --> 0:42:04,166
So here I've chose to include a

1388
00:42:04,216 --> 0:42:06,226
copy and a duplicate action.

1389
00:42:09,326 --> 0:42:10,986
So, when we present it, the menu

1390
00:42:10,986 --> 0:42:11,996
looks something like this.

1391
00:42:12,586 --> 0:42:16,346
We have a Share action at the

1392
00:42:16,346 --> 0:42:18,686
top, our edit action for our

1393
00:42:18,686 --> 0:42:21,176
sub-menu in the middle, and a

1394
00:42:21,176 --> 0:42:22,796
delete action at the bottom.

1395
00:42:23,506 --> 0:42:26,676
When the user taps edit, our

1396
00:42:26,676 --> 0:42:28,176
sub-menu is presented, and our

1397
00:42:28,226 --> 0:42:30,686
copy and duplicate actions pop

1398
00:42:33,256 --> 0:42:33,356
in.

1399
00:42:33,576 --> 0:42:34,796
Adopting the interaction in your

1400
00:42:34,796 --> 0:42:36,036
app is pretty straightforward.

1401
00:42:37,266 --> 0:42:39,136
If you've adopted other

1402
00:42:39,136 --> 0:42:40,616
UIInteractions in your app like

1403
00:42:40,616 --> 0:42:42,386
UIDragInteraction or some of the

1404
00:42:42,386 --> 0:42:43,686
TextInteractions that are being

1405
00:42:43,686 --> 0:42:45,056
introduced this year, this

1406
00:42:45,056 --> 0:42:46,096
pattern should be really

1407
00:42:46,096 --> 0:42:46,776
familiar to you.

1408
00:42:46,776 --> 0:42:48,856
The first thing well need to do

1409
00:42:48,856 --> 0:42:49,866
is just create a

1410
00:42:49,866 --> 0:42:51,806
UIContextMenuInteraction with

1411
00:42:51,806 --> 0:42:53,486
some object as its delegate.

1412
00:42:53,836 --> 0:42:54,706
So, this could be our View

1413
00:42:54,706 --> 0:42:55,626
Controller, for example.

1414
00:42:57,126 --> 0:42:58,576
Then we'll need to attach it to

1415
00:42:58,576 --> 0:43:00,486
some view using UIView's

1416
00:42:58,576 --> 0:43:00,486
some view using UIView's

1417
00:43:00,486 --> 0:43:02,226
addInteraction method.

1418
00:43:04,056 --> 0:43:05,566
Once we've done that, we'll need

1419
00:43:05,566 --> 0:43:07,076
to conform to the interaction's

1420
00:43:07,146 --> 0:43:07,976
delegate protocol.

1421
00:43:08,536 --> 0:43:10,866
The protocol has a single

1422
00:43:10,866 --> 0:43:12,776
required method that is called

1423
00:43:12,776 --> 0:43:14,306
when the interaction is about to

1424
00:43:14,306 --> 0:43:14,676
begin.

1425
00:43:15,886 --> 0:43:17,316
It's the app's job at this point

1426
00:43:17,366 --> 0:43:19,416
to either return a configuration

1427
00:43:19,466 --> 0:43:21,376
to start the interaction or

1428
00:43:21,376 --> 0:43:23,516
return nil to indicate that

1429
00:43:23,516 --> 0:43:25,116
there's no menu to be presented

1430
00:43:25,166 --> 0:43:26,296
for the current location.

1431
00:43:30,196 --> 0:43:31,886
The configuration object is how

1432
00:43:31,886 --> 0:43:32,846
we're going to describe our

1433
00:43:32,846 --> 0:43:33,206
menu.

1434
00:43:34,216 --> 0:43:36,476
It has an identifier.

1435
00:43:36,916 --> 0:43:38,166
The identifier is optional.

1436
00:43:38,166 --> 0:43:39,936
It's for you to use to be able

1437
00:43:39,936 --> 0:43:42,516
to identify the interaction

1438
00:43:42,576 --> 0:43:43,746
throughout its lifecycle,

1439
00:43:44,716 --> 0:43:46,616
throughout the various delegate

1440
00:43:46,616 --> 0:43:48,266
callbacks that you might get.

1441
00:43:49,326 --> 0:43:51,586
It also has a previewProvider

1442
00:43:51,586 --> 0:43:52,946
and action provider closure.

1443
00:43:53,726 --> 0:43:55,486
Both of these are called when

1444
00:43:55,486 --> 0:43:56,396
the menu is about to be

1445
00:43:56,396 --> 0:43:56,866
presented.

1446
00:43:57,406 --> 0:43:58,916
This allows us to defer the

1447
00:43:58,916 --> 0:44:00,626
potentially expensive work of

1448
00:43:58,916 --> 0:44:00,626
potentially expensive work of

1449
00:44:00,626 --> 0:44:01,976
actually building up the menu

1450
00:44:01,976 --> 0:44:03,496
and the preview until they're

1451
00:44:03,496 --> 0:44:04,846
actually needed.

1452
00:44:06,666 --> 0:44:07,886
So, in the example that we just

1453
00:44:07,886 --> 0:44:10,206
looked at, our menu doesn't have

1454
00:44:10,206 --> 0:44:11,346
that large rich preview.

1455
00:44:11,346 --> 0:44:13,276
It just has some actions, so

1456
00:44:13,276 --> 0:44:15,636
we're going to focus on creating

1457
00:44:15,636 --> 0:44:16,606
an actionProvider in our

1458
00:44:16,606 --> 0:44:17,706
implementation of the delegate

1459
00:44:17,706 --> 0:44:18,006
method.

1460
00:44:18,626 --> 0:44:22,906
So the actionProvider, when

1461
00:44:22,906 --> 0:44:26,316
called, has a list of suggested

1462
00:44:26,316 --> 0:44:27,676
actions that are passed to it by

1463
00:44:27,676 --> 0:44:28,186
the system.

1464
00:44:28,706 --> 0:44:32,486
This can be a mix of UIMenus and

1465
00:44:32,486 --> 0:44:34,646
UIActions, so potentially a

1466
00:44:34,646 --> 0:44:36,536
fully constructed hierarchy that

1467
00:44:36,536 --> 0:44:38,156
are picked up from the system.

1468
00:44:38,626 --> 0:44:40,006
These could be things that you

1469
00:44:40,006 --> 0:44:41,476
defined in your responder chain

1470
00:44:41,476 --> 0:44:43,166
using the new UI command API

1471
00:44:43,306 --> 0:44:46,196
being introduced in iOS 13 or

1472
00:44:46,196 --> 0:44:47,856
things that are offered by other

1473
00:44:47,856 --> 0:44:48,906
system components.

1474
00:44:49,466 --> 0:44:52,696
So we're doing a fully custom

1475
00:44:52,696 --> 0:44:53,976
menu here, so we're going to put

1476
00:44:53,976 --> 0:44:55,236
the suggested actions aside.

1477
00:44:56,746 --> 0:44:58,276
First, we'll create our edit

1478
00:44:58,276 --> 0:44:58,716
menu.

1479
00:44:58,956 --> 0:45:01,286
We'll just create a UIMenu with

1480
00:44:58,956 --> 0:45:01,286
We'll just create a UIMenu with

1481
00:45:01,286 --> 0:45:03,146
the title Edit, and we'll pass

1482
00:45:03,146 --> 0:45:05,076
the two children that want it to

1483
00:45:05,076 --> 0:45:07,306
have, a UIAction, with the title

1484
00:45:07,306 --> 0:45:09,046
Copy, and a UIAction with the

1485
00:45:09,046 --> 0:45:09,776
title Duplicate.

1486
00:45:12,836 --> 0:45:15,826
Then we'll define our root menu.

1487
00:45:16,876 --> 0:45:18,996
It often doesn't make sense for

1488
00:45:19,196 --> 0:45:20,846
a root menu to have a title, so

1489
00:45:20,846 --> 0:45:21,966
we'll skip it here.

1490
00:45:22,846 --> 0:45:24,146
However, if you do want to pass

1491
00:45:24,146 --> 0:45:25,726
it a title, it'll be displayed

1492
00:45:25,726 --> 0:45:27,146
as a header above the actions

1493
00:45:27,146 --> 0:45:27,556
list.

1494
00:45:28,006 --> 0:45:30,806
And we'll pass it three children

1495
00:45:30,806 --> 0:45:33,246
here, a share action, the edit

1496
00:45:33,246 --> 0:45:34,866
menu that we just created, and

1497
00:45:34,916 --> 0:45:36,736
finally a delete action with a

1498
00:45:36,736 --> 0:45:38,736
destructive style to indicate to

1499
00:45:38,736 --> 0:45:40,696
our users that the action has

1500
00:45:40,726 --> 0:45:41,866
destructive consequences.

1501
00:45:44,076 --> 0:45:45,626
Finally, we'll create a

1502
00:45:45,626 --> 0:45:47,146
configuration with some

1503
00:45:47,146 --> 0:45:49,036
identifier and pass it our

1504
00:45:49,036 --> 0:45:49,746
action provider.

1505
00:45:49,746 --> 0:45:51,436
And that's it.

1506
00:45:51,436 --> 0:45:53,806
That's really all it takes to

1507
00:45:53,806 --> 0:45:56,006
create and display menus using

1508
00:45:56,006 --> 0:45:57,606
UIContextMenuInteraction.

1509
00:45:58,186 --> 0:46:02,066
But with a little bit more work,

1510
00:45:58,186 --> 0:46:02,066
But with a little bit more work,

1511
00:46:03,346 --> 0:46:04,846
we can take advantage of some of

1512
00:46:04,846 --> 0:46:06,606
the animation customization APIs

1513
00:46:07,376 --> 0:46:08,616
offered by the interaction

1514
00:46:08,616 --> 0:46:10,596
delegate to build some really

1515
00:46:10,596 --> 0:46:11,806
great, highly polished

1516
00:46:11,806 --> 0:46:13,486
animations that really

1517
00:46:13,486 --> 0:46:14,526
communicate meaning to our

1518
00:46:14,526 --> 0:46:15,066
users.

1519
00:46:18,296 --> 0:46:19,786
So, in this example here, I've

1520
00:46:19,786 --> 0:46:21,116
taken the same menu that we had

1521
00:46:21,116 --> 0:46:23,356
earlier, and I've used the

1522
00:46:23,356 --> 0:46:24,746
source presentation

1523
00:46:24,826 --> 0:46:27,176
customization API to make the

1524
00:46:27,176 --> 0:46:30,016
menu appear from the cell's icon

1525
00:46:30,016 --> 0:46:32,626
instead of from the entire cell,

1526
00:46:32,626 --> 0:46:34,886
and I've even customized the

1527
00:46:34,886 --> 0:46:36,486
background color and even given

1528
00:46:36,756 --> 0:46:38,896
the preview a nice circular

1529
00:46:39,806 --> 0:46:39,906
shape.

1530
00:46:41,276 --> 0:46:43,276
These customization APIs are

1531
00:46:43,276 --> 0:46:45,426
built on a UITargetedPreview.

1532
00:46:45,796 --> 0:46:47,366
This is a new API that's being

1533
00:46:47,366 --> 0:46:49,386
introduced in iOS 13.

1534
00:46:50,066 --> 0:46:50,866
Now, if you've adopted

1535
00:46:50,866 --> 0:46:52,066
UIDragInteraction and

1536
00:46:52,066 --> 0:46:53,796
UIDropInteraction, and you built

1537
00:46:53,796 --> 0:46:55,386
some custom Drag or Drop

1538
00:46:55,436 --> 0:46:57,046
Previews in your app, then this

1539
00:46:57,046 --> 0:46:58,196
is probably very familiar.

1540
00:46:59,316 --> 0:47:00,276
We've essentially taken

1541
00:46:59,316 --> 0:47:00,276
We've essentially taken

1542
00:47:00,276 --> 0:47:02,106
UITargetedDragPreview and

1543
00:47:02,106 --> 0:47:03,756
generalized it into a more

1544
00:47:04,136 --> 0:47:05,836
general API that can be used by

1545
00:47:05,896 --> 0:47:06,856
other interactions.

1546
00:47:08,326 --> 0:47:10,096
UITargetedDragPreview is now a

1547
00:47:10,156 --> 0:47:12,136
subclass of UITargetedPreview.

1548
00:47:12,416 --> 0:47:14,096
So, if you already have

1549
00:47:14,416 --> 0:47:16,416
meaningful drag previews that

1550
00:47:16,526 --> 0:47:17,756
make sense for your menus

1551
00:47:17,756 --> 0:47:19,236
because they're triggered from

1552
00:47:19,236 --> 0:47:21,116
the same item, then you can

1553
00:47:21,116 --> 0:47:22,426
reuse that code without doing

1554
00:47:22,426 --> 0:47:23,786
any extra work.

1555
00:47:27,176 --> 0:47:29,106
To make adopting this in your

1556
00:47:29,106 --> 0:47:30,656
apps even easier, to make it

1557
00:47:30,656 --> 0:47:31,986
easier for you to bring up menus

1558
00:47:31,986 --> 0:47:32,796
in some of the most common

1559
00:47:32,796 --> 0:47:34,656
cases, we're also introducing

1560
00:47:34,656 --> 0:47:36,176
some convenience API for

1561
00:47:36,176 --> 0:47:37,346
UICollectionView and

1562
00:47:37,346 --> 0:47:38,246
UITableView.

1563
00:47:39,436 --> 0:47:40,816
All that's needed to bring up a

1564
00:47:40,816 --> 0:47:42,916
menu from your app, from your

1565
00:47:42,916 --> 0:47:45,706
Table View on all the platforms

1566
00:47:45,706 --> 0:47:47,056
that your app runs on is to

1567
00:47:47,056 --> 0:47:48,766
implement a single extra method

1568
00:47:48,766 --> 0:47:49,526
on its delegate.

1569
00:47:50,556 --> 0:47:52,296
Here, you'll once again return a

1570
00:47:52,296 --> 0:47:53,566
configuration if you have a menu

1571
00:47:53,566 --> 0:47:56,246
to display or return nil to

1572
00:47:56,246 --> 0:47:57,216
indicate that there's nothing to

1573
00:47:57,216 --> 0:47:57,586
be shown.

1574
00:47:59,416 --> 0:48:00,946
So, out of the box, these

1575
00:47:59,416 --> 0:48:00,946
So, out of the box, these

1576
00:48:00,946 --> 0:48:02,366
convenience APIs give you some

1577
00:48:02,366 --> 0:48:04,956
polished default animations with

1578
00:48:04,956 --> 0:48:06,766
menus presenting from Table or

1579
00:48:06,766 --> 0:48:07,896
Collection View cells and then

1580
00:48:07,896 --> 0:48:09,116
returning back to them when

1581
00:48:09,116 --> 0:48:09,646
dismissed.

1582
00:48:10,266 --> 0:48:11,736
We're also providing the same

1583
00:48:11,736 --> 0:48:12,866
custom presentation and

1584
00:48:12,866 --> 0:48:14,366
dismissal hooks so you could

1585
00:48:14,366 --> 0:48:17,336
build your custom appearance and

1586
00:48:17,336 --> 0:48:18,756
disappearance animations.

1587
00:48:21,406 --> 0:48:22,346
Now, you're probably thinking to

1588
00:48:22,346 --> 0:48:24,136
yourself, this sounds a lot like

1589
00:48:24,216 --> 0:48:25,566
Peek and Pop in some ways.

1590
00:48:26,656 --> 0:48:29,926
Well, we noticed that too.

1591
00:48:32,546 --> 0:48:33,856
However, since this new API

1592
00:48:34,186 --> 0:48:35,856
provides a much larger feature

1593
00:48:35,856 --> 0:48:37,606
set and works on multiple

1594
00:48:37,606 --> 0:48:40,486
platforms, we are deprecating

1595
00:48:40,486 --> 0:48:41,926
UIViewController previewing in

1596
00:48:42,096 --> 0:48:42,806
iOS 13.

1597
00:48:43,676 --> 0:48:45,046
So, go and replace your

1598
00:48:45,046 --> 0:48:46,526
implementation of Peek and Pop

1599
00:48:46,526 --> 0:48:48,346
with UIContextMenuInteraction

1600
00:48:48,966 --> 0:48:50,566
and give your users a consistent

1601
00:48:50,566 --> 0:48:53,366
experience in your app across

1602
00:48:53,366 --> 0:48:54,256
all devices.

1603
00:48:54,796 --> 0:48:58,326
You might also want to consider

1604
00:48:58,326 --> 0:48:59,986
replacing any long-press driven

1605
00:48:59,986 --> 0:49:02,606
menus in your apps with this new

1606
00:48:59,986 --> 0:49:02,606
menus in your apps with this new

1607
00:49:02,606 --> 0:49:04,826
interaction to take advantage of

1608
00:49:04,826 --> 0:49:06,286
the new feature set.

1609
00:49:07,316 --> 0:49:09,556
And if you have menus that

1610
00:49:09,556 --> 0:49:10,616
you're currently displaying

1611
00:49:10,616 --> 0:49:12,736
alongside Drag and Drop, this is

1612
00:49:12,736 --> 0:49:15,576
a great fluid solution that has

1613
00:49:15,576 --> 0:49:17,566
coordinated gestures and a fully

1614
00:49:17,566 --> 0:49:18,926
integrated experience that your

1615
00:49:19,456 --> 0:49:20,566
users are going to come to

1616
00:49:20,566 --> 0:49:24,636
expect starting in iOS 13.

1617
00:49:25,086 --> 0:49:26,156
All right, so now that you're

1618
00:49:26,266 --> 0:49:27,776
equipped with all this great new

1619
00:49:27,776 --> 0:49:29,196
knowledge, you should go and get

1620
00:49:29,196 --> 0:49:30,986
your apps ready for iOS 13.

1621
00:49:31,616 --> 0:49:32,706
Ensure that they're ready for

1622
00:49:32,706 --> 0:49:33,726
the future by making them

1623
00:49:33,726 --> 0:49:35,986
flexible, take advantage of the

1624
00:49:35,986 --> 0:49:37,126
new bar appearance and

1625
00:49:37,126 --> 0:49:39,046
presentation APIs to give your

1626
00:49:39,386 --> 0:49:41,336
apps that polished modern look

1627
00:49:41,336 --> 0:49:42,306
that users are going to come to

1628
00:49:42,306 --> 0:49:42,566
expect.

1629
00:49:43,856 --> 0:49:45,596
Go build the search experience

1630
00:49:45,596 --> 0:49:46,876
you've always wanted to build

1631
00:49:47,176 --> 0:49:48,706
using the great new search APIs,

1632
00:49:48,706 --> 0:49:51,256
and give your apps some great

1633
00:49:51,256 --> 0:49:52,466
features with the new

1634
00:49:52,466 --> 0:49:53,836
productivity gestures and

1635
00:49:53,836 --> 0:49:54,666
context menus.

1636
00:49:55,216 --> 0:49:57,826
If you have any questions about

1637
00:49:57,866 --> 0:50:00,466
these topics or anything else

1638
00:49:57,866 --> 0:50:00,466
these topics or anything else

1639
00:50:00,466 --> 0:50:02,246
related to UIKit, please come to

1640
00:50:02,246 --> 0:50:03,966
the labs tomorrow, and for

1641
00:50:03,966 --> 0:50:04,946
additional information about the

1642
00:50:05,006 --> 0:50:07,156
session, you can find it at the

1643
00:50:07,156 --> 0:50:07,916
session's website.

1644
00:50:08,936 --> 0:50:09,936
Thanks for coming by, and I hope

1645
00:50:09,936 --> 0:50:10,636
you enjoy the rest of the

1646
00:50:10,636 --> 0:50:10,936
conference.

1647
00:50:11,516 --> 0:50:20,560
[ Applause ]
