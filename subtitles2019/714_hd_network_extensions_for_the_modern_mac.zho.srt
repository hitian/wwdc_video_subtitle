1
00:00:06,640 --> 0:00:10,544
（现代macOS网络扩展

2
00:00:13,981 --> 0:00:14,815
大家好

3
00:00:14,882 --> 0:00:18,018
欢迎参加

4
00:00:18,385 --> 0:00:19,553
我是Jamie Wood

5
00:00:19,620 --> 0:00:20,654
我是Apple的一名软件工程师

6
00:00:21,221 --> 0:00:23,524
致力于因特网技术

7
00:00:24,191 --> 0:00:25,626
今天能来到这里我感到非常激动

8
00:00:25,692 --> 0:00:29,162
我要与大家分享一些非常棒、

9
00:00:29,396 --> 0:00:31,665
我们已经添加到

10
00:00:31,932 --> 0:00:35,802
可以让你创建扩展并自定义

11
00:00:35,869 --> 0:00:38,105
macOS网络功能的app

12
00:00:38,172 --> 0:00:40,807
而不需要使用网络内核扩展

13
00:00:42,476 --> 0:00:43,544
开始

14
00:00:43,610 --> 0:00:46,046
我想感谢你们所提供的反馈

15
00:00:46,780 --> 0:00:49,583
在过去几年的WWDC

16
00:00:49,950 --> 0:00:52,886
我们要求你们指出错误

17
00:00:52,953 --> 0:00:56,523
并给我们提供

18
00:00:56,590 --> 0:00:58,058
使用网络内核扩展的反馈

19
00:00:59,059 --> 0:01:00,827
我们收到了大量很棒的反馈

20
00:00:59,059 --> 0:01:00,827
我们收到了大量很棒的反馈

21
00:01:00,994 --> 0:01:02,062
我们接受了你们的反馈

22
00:01:02,129 --> 0:01:06,667
我们提出了一组app类别

23
00:01:07,601 --> 0:01:10,137
在macOS Mojave

24
00:01:10,204 --> 0:01:12,873
你确实需要使用网络内核扩展

25
00:01:12,940 --> 0:01:15,776
来完全实施这些类别内的app

26
00:01:17,077 --> 0:01:20,013
今天我想带你们一起

27
00:01:20,080 --> 0:01:21,815
了解每一个app类别

28
00:01:21,882 --> 0:01:26,587
并讲一下我们在macOS Catalina中

29
00:01:26,653 --> 0:01:29,456
那些新API会帮助你创建

30
00:01:29,523 --> 0:01:32,092
而不需要使用网络内核扩展

31
00:01:33,093 --> 0:01:34,695
让我们开始讲吧

32
00:01:35,562 --> 0:01:38,098
首先我要讲内容过滤器app

33
00:01:39,299 --> 0:01:43,470
内容过滤器app的一个例子就是

34
00:01:43,904 --> 0:01:45,939
这些app在系统中流动

35
00:01:46,006 --> 0:01:48,475
检查网络流量

36
00:01:48,542 --> 0:01:52,112
并阻塞流量 这在某种程度上

37
00:01:53,046 --> 0:01:58,118
内容过滤器app的另一个例子是

38
00:01:58,919 --> 0:02:03,524
这种app主要关注网络浏览行为

39
00:01:58,919 --> 0:02:03,524
这种app主要关注网络浏览行为

40
00:02:03,590 --> 0:02:05,459
并阻止访问

41
00:02:05,526 --> 0:02:08,161
被视为不适合儿童看的网站

42
00:02:09,162 --> 0:02:12,132
内容筛选器app的另一个例子是

43
00:02:12,666 --> 0:02:15,802
一种不会主动阻止任何网络流量

44
00:02:15,869 --> 0:02:20,140
而是只记录Mac上的

45
00:02:20,607 --> 0:02:25,145
从而稍后对那种无行为日志进行分析

46
00:02:25,379 --> 0:02:29,149
比如决定何时传输一些敏感数据

47
00:02:30,684 --> 0:02:33,220
在我们讲我们新添加的

48
00:02:33,287 --> 0:02:35,656
能帮助你创建内容过滤器app的

49
00:02:36,657 --> 0:02:39,560
我要先讲内容过滤器app的

50
00:02:39,626 --> 0:02:41,862
一些特别的运行时要求

51
00:02:42,563 --> 0:02:46,934
内容过滤器app中的

52
00:02:47,234 --> 0:02:49,870
有一些特定的运行时要求

53
00:02:50,504 --> 0:02:53,106
代码需要无时无刻运行

54
00:02:53,173 --> 0:02:54,007
并且甚至

55
00:02:54,074 --> 0:02:57,177
当没有用户登录系统时也要运行

56
00:02:57,711 --> 0:03:00,614
比如在家长控制app中

57
00:02:57,711 --> 0:03:00,614
比如在家长控制app中

58
00:03:00,948 --> 0:03:02,482
app需要发挥

59
00:03:02,549 --> 0:03:06,019
阻止访问不合适的网站的功能

60
00:03:06,086 --> 0:03:09,189
即使你的app实际上并没有在运行

61
00:03:10,390 --> 0:03:12,059
在个人防火墙app中

62
00:03:12,125 --> 0:03:14,061
app需要发挥

63
00:03:14,127 --> 0:03:17,497
防止Mac遭受

64
00:03:17,564 --> 0:03:19,166
来自网络的攻击的作用

65
00:03:19,233 --> 0:03:21,602
即使没有用户登录到系统中

66
00:03:22,569 --> 0:03:26,240
当你在内核扩展内

67
00:03:26,306 --> 0:03:28,642
实施内容过滤器代码时

68
00:03:28,709 --> 0:03:30,544
很明显满足运行时要求

69
00:03:30,611 --> 0:03:32,513
因为你的代码是在内核中运行

70
00:03:32,579 --> 0:03:34,481
因此它是一直在运行

71
00:03:34,548 --> 0:03:37,751
并且甚至当没有用户登录到系统时

72
00:03:39,186 --> 0:03:42,890
因此 为了在用户空间中

73
00:03:42,956 --> 0:03:46,326
我们在macOS Catalina中

74
00:03:46,393 --> 0:03:47,961
叫做系统扩展

75
00:03:49,663 --> 0:03:53,133
现在你很可能对app扩展

76
00:03:53,200 --> 0:03:57,404
app扩展是一堆你能

77
00:03:57,471 --> 0:04:02,643
用于扩展和自定义macOS

78
00:03:57,471 --> 0:04:02,643
用于扩展和自定义macOS

79
00:04:03,477 --> 0:04:04,711
那么系统扩展

80
00:04:04,778 --> 0:04:07,247
与app扩展有许多相似之处

81
00:04:07,581 --> 0:04:09,049
跟app扩展一样

82
00:04:09,116 --> 0:04:11,919
系统扩展被打包到你的app内

83
00:04:12,486 --> 0:04:15,722
它们完全由操作系统进行管理

84
00:04:16,055 --> 0:04:17,024
这很棒

85
00:04:17,089 --> 0:04:20,726
因为这意味着你不需要写任何

86
00:04:20,793 --> 0:04:24,198
从而把系统扩展放到文件系统中的

87
00:04:24,831 --> 0:04:26,333
并且你不需要写卸载程序

88
00:04:26,400 --> 0:04:28,402
从而当用户卸载你的app时

89
00:04:28,468 --> 0:04:30,270
移除系统扩展

90
00:04:31,605 --> 0:04:33,407
同时你不需要担心

91
00:04:33,473 --> 0:04:36,677
何时开始和停止系统扩展

92
00:04:36,743 --> 0:04:40,747
操作系统会根据需要运行系统扩展

93
00:04:43,717 --> 0:04:46,720
app扩展与系统扩展的另一个

94
00:04:46,787 --> 0:04:51,158
系统扩展的开发和调试非常简单

95
00:04:51,225 --> 0:04:55,529
你可以使用用于开发

96
00:04:55,596 --> 0:04:58,298
Xcode、LLDB、

97
00:05:01,768 --> 0:05:03,937
这与内核扩展不同

98
00:05:04,004 --> 0:05:08,108
众所周知 内核扩展的开发和调试

99
00:05:08,509 --> 0:05:12,880
在你开发扩展时

100
00:05:12,946 --> 0:05:14,348
要调试内核扩展

101
00:05:14,414 --> 0:05:16,483
你必须有两台独立的机器

102
00:05:16,550 --> 0:05:19,520
并且如果你设法把这两台机器

103
00:05:19,586 --> 0:05:23,123
并将它们放到内核扩展代码中的

104
00:05:23,190 --> 0:05:25,192
单步执行你的源代码

105
00:05:25,259 --> 0:05:28,328
是个非常冒险的提议

106
00:05:30,664 --> 0:05:32,132
与app扩展不同

107
00:05:32,199 --> 0:05:35,068
系统扩展的运行

108
00:05:35,135 --> 0:05:36,336
与任何用户登录到系统中无关

109
00:05:36,904 --> 0:05:39,439
因此系统扩展确实是

110
00:05:39,506 --> 0:05:41,808
运行网络处理代码的理想场所

111
00:05:41,875 --> 0:05:43,343
比如内容过滤器代码

112
00:05:46,513 --> 0:05:49,316
要了解关于系统扩展

113
00:05:49,383 --> 0:05:52,386
以及系统扩展的其它用例的

114
00:05:52,452 --> 0:05:54,821
请参看本周稍早时候的一场演讲

115
00:05:54,888 --> 0:05:57,357
系统扩展和DriverKit

116
00:05:59,860 --> 0:06:00,794
好的

117
00:05:59,860 --> 0:06:00,794
好的

118
00:06:00,861 --> 0:06:03,163
你可以使用系统扩展

119
00:06:03,230 --> 0:06:06,800
实施属于这些类别的不同app

120
00:06:06,867 --> 0:06:09,002
我在这里列出了这些类别…

121
00:06:09,069 --> 0:06:10,737
透明代理app

122
00:06:10,804 --> 0:06:13,373
DNS代理app和VPN app

123
00:06:14,141 --> 0:06:17,611
现在我想具体讲一下

124
00:06:17,678 --> 0:06:20,380
这些API可以帮助你们实施

125
00:06:24,885 --> 0:06:28,989
内容过滤器API

126
00:06:29,556 --> 0:06:35,395
我们在iOS 9中

127
00:06:35,829 --> 0:06:37,764
我们在

128
00:06:37,831 --> 0:06:41,034
把这些API带过来

129
00:06:41,101 --> 0:06:42,836
并添加了一堆很棒的新改进

130
00:06:42,903 --> 0:06:45,405
使这些API变得更强大

131
00:06:47,040 --> 0:06:49,076
让我们看一下内容过滤器API

132
00:06:49,142 --> 0:06:50,944
以及如何在app中使用它们

133
00:06:52,513 --> 0:06:54,147
在你的主UI app中

134
00:06:54,214 --> 0:06:58,952
你使用NEFilterManager

135
00:06:59,453 --> 0:07:00,687
内容过滤器配置

136
00:06:59,453 --> 0:07:00,687
内容过滤器配置

137
00:07:00,754 --> 0:07:02,890
在系统中注册你的内容过滤器

138
00:07:02,956 --> 0:07:05,425
从而系统了解如何运行你的过滤器

139
00:07:07,928 --> 0:07:09,563
你还创建一个系统扩展

140
00:07:09,630 --> 0:07:12,132
实际过滤网络内容的代码

141
00:07:12,199 --> 0:07:13,433
就要在系统扩展中运行

142
00:07:14,201 --> 0:07:15,469
内容过滤器API

143
00:07:15,536 --> 0:07:20,073
允许你在两个不同的层过滤网络内容

144
00:07:20,140 --> 0:07:22,276
你可以在数据流层过滤内容

145
00:07:22,342 --> 0:07:24,444
或在数据包层过滤内容

146
00:07:25,445 --> 0:07:27,347
对于数据流层过滤

147
00:07:27,414 --> 0:07:31,885
你创建任意数据过滤提供器的子类

148
00:07:33,687 --> 0:07:37,558
一旦你的内容过滤器配置在系统中

149
00:07:37,624 --> 0:07:39,459
并且过滤器已经启动并运行

150
00:07:39,927 --> 0:07:45,966
系统将在系统上创建

151
00:07:46,033 --> 0:07:47,467
网络数据的新TCP和UDP数据流

152
00:07:48,635 --> 0:07:53,173
传给NEFilterDataProvider子类的

153
00:07:53,240 --> 0:07:56,476
被表达为单独的

154
00:07:58,378 --> 0:08:01,448
然后子类负责

155
00:07:58,378 --> 0:08:01,448
然后子类负责

156
00:08:01,515 --> 0:08:06,486
对每个单独的数据流

157
00:08:07,721 --> 0:08:10,023
你可以在数据流的生命周期中的

158
00:08:10,090 --> 0:08:11,959
对每个数据流做出这种决定

159
00:08:12,025 --> 0:08:14,828
你可以在数据流首次打开时

160
00:08:15,229 --> 0:08:18,932
或你可以等看到数据流中一定量的

161
00:08:22,035 --> 0:08:25,572
请注意

162
00:08:25,639 --> 0:08:27,975
提供数据流的只读权限

163
00:08:29,276 --> 0:08:33,514
你不能修改数据流

164
00:08:34,681 --> 0:08:39,953
默认情况下

165
00:08:40,020 --> 0:08:42,523
传到

166
00:08:43,590 --> 0:08:45,459
如果这并不是你想要的…

167
00:08:45,526 --> 0:08:48,495
比如 如果你正在写家长控制app

168
00:08:48,562 --> 0:08:51,064
那么你只对Web流量感兴趣

169
00:08:51,131 --> 0:08:52,699
你使用NEFilter设置

170
00:08:52,766 --> 0:08:55,202
创建一组规则

171
00:08:55,269 --> 0:08:59,273
告知系统你想要在过滤器中看到的

172
00:09:01,842 --> 0:09:05,546
那么数据流层过滤就是这样运作的

173
00:09:07,714 --> 0:09:10,551
如果你想在数据包层过滤流量

174
00:09:11,618 --> 0:09:14,555
你要在系统扩展中

175
00:09:15,189 --> 0:09:16,557
创建NEFilterPacketProvider的

176
00:09:17,891 --> 0:09:20,561
因为网络数据包会流过系统

177
00:09:20,928 --> 0:09:27,100
系统将把那些数据包作为

178
00:09:27,167 --> 0:09:29,570
传到你的

179
00:09:30,871 --> 0:09:35,576
你可以对每个独立数据包

180
00:09:36,510 --> 0:09:40,581
好的 这是关于内容过滤器API

181
00:09:40,781 --> 0:09:42,583
以及如何在你的app中使用它们的

182
00:09:44,017 --> 0:09:46,353
接下来我会给你简单演示一个app

183
00:09:46,420 --> 0:09:49,256
它使用了系统扩展

184
00:09:49,323 --> 0:09:53,594
和内容过滤器API

185
00:10:00,133 --> 0:10:02,603
我的这个app功能很简单

186
00:10:03,804 --> 0:10:05,539
我会提示用户

187
00:10:05,606 --> 0:10:12,613
允许或拒绝8888端口上的

188
00:10:13,146 --> 0:10:16,617
让我继续并运行app

189
00:10:18,252 --> 0:10:21,622
这个app叫做Simple Firewall

190
00:10:22,523 --> 0:10:25,659
你可以看到这是我的UI指示器

191
00:10:25,726 --> 0:10:27,694
红点表示内容过滤器

192
00:10:27,761 --> 0:10:29,029
现在并没有在运行中

193
00:10:29,096 --> 0:10:31,164
因此我要继续并点击开始

194
00:10:33,000 --> 0:10:34,835
好的 我得到了来自系统的对话框

195
00:10:34,902 --> 0:10:38,138
表明我的系统扩展

196
00:10:38,205 --> 0:10:39,106
被阻止运行

197
00:10:39,573 --> 0:10:42,009
现在系统扩展非常强大

198
00:10:42,075 --> 0:10:46,246
它们可以让你在系统上做许多事

199
00:10:46,313 --> 0:10:49,950
包括查看系统中流过的网络流量

200
00:10:50,017 --> 0:10:54,188
那么…我们想确保

201
00:10:54,254 --> 0:10:56,657
我们得到了用户的允许

202
00:10:57,291 --> 0:10:59,793
因此我要继续并打开安全性首选项

203
00:11:00,894 --> 0:11:04,665
这将把我带到

204
00:11:04,865 --> 0:11:07,201
我要提供我的管理员认证信息

205
00:11:07,968 --> 0:11:11,672
继续并点击允许

206
00:11:14,241 --> 0:11:16,543
网络扩展框架还会提示用户

207
00:11:16,610 --> 0:11:19,479
确认他们希望允许系统扩展

208
00:11:19,546 --> 0:11:21,682
在Mac上过滤网络流量

209
00:11:22,616 --> 0:11:24,117
那么继续并点击允许

210
00:11:24,718 --> 0:11:26,720
好的 现在返回到

211
00:11:26,787 --> 0:11:31,258
我们可以看到内容过滤器正在运行

212
00:11:31,325 --> 0:11:36,563
让我们继续并在我的本地Mac上

213
00:11:36,630 --> 0:11:37,698
看看会发生什么

214
00:11:38,365 --> 0:11:40,701
我正在端口8888上

215
00:11:41,401 --> 0:11:45,239
因此我要继续打开Safari

216
00:11:45,305 --> 0:11:47,975
我已经把它添加到

217
00:11:48,041 --> 0:11:49,243
我点击它

218
00:11:49,776 --> 0:11:53,113
网页开始加载

219
00:11:53,180 --> 0:11:56,683
我非常确定

220
00:11:56,750 --> 0:12:00,120
有一个对话框告知我

221
00:11:56,750 --> 0:12:00,120
有一个对话框告知我

222
00:12:00,187 --> 0:12:04,358
并请求我允许或拒绝

223
00:12:04,725 --> 0:12:07,728
那么我要点击允许

224
00:12:09,530 --> 0:12:11,732
很酷 我的app正在工作中

225
00:12:12,633 --> 0:12:15,869
现在让我们继续并看一下

226
00:12:15,936 --> 0:12:18,739
看看它是如何利用系统扩展

227
00:12:19,139 --> 0:12:21,742
和内容过滤器API的

228
00:12:22,342 --> 0:12:26,480
在这里你可以看到我的项目

229
00:12:26,547 --> 0:12:30,551
我有SimpleFirewall Target

230
00:12:31,118 --> 0:12:34,354
我有SimpleFirewallExtension Target

231
00:12:34,421 --> 0:12:36,757
这是我的系统扩展

232
00:12:40,260 --> 0:12:43,363
让我们先看一下app中的一些代码

233
00:12:44,765 --> 0:12:49,570
我们要看一下

234
00:12:50,037 --> 0:12:54,408
我想先从

235
00:12:54,975 --> 0:12:57,110
当我在SimpleFirewall UI中

236
00:12:57,177 --> 0:13:00,781
调用这个函数

237
00:12:57,177 --> 0:13:00,781
调用这个函数

238
00:13:01,882 --> 0:13:03,684
先获取系统扩展的

239
00:13:03,750 --> 0:13:05,452
捆绑标识符

240
00:13:05,986 --> 0:13:10,791
并使用那个标识符创建一个系统扩展

241
00:13:14,194 --> 0:13:18,198
我把视图控制器对象设为

242
00:13:18,265 --> 0:13:21,335
从而当请求完成后

243
00:13:24,304 --> 0:13:26,707
一旦创建好

244
00:13:26,773 --> 0:13:30,444
我就把它提交给

245
00:13:30,777 --> 0:13:33,714
这就开始激活系统扩展

246
00:13:33,780 --> 0:13:35,516
包括提示用户

247
00:13:35,582 --> 0:13:38,819
允许SystemExtension

248
00:13:40,654 --> 0:13:45,459
好的 一旦用户允许

249
00:13:46,827 --> 0:13:51,832
就会调用视图控制器的请求

250
00:13:52,232 --> 0:13:55,369
我要确保激活请求已经完成

251
00:13:56,203 --> 0:14:00,807
我要继续并创建内容过滤器配置

252
00:13:56,203 --> 0:14:00,807
我要继续并创建内容过滤器配置

253
00:14:02,876 --> 0:14:05,312
我就是要在这里使用

254
00:14:05,379 --> 0:14:08,849
创建过滤器配置并在系统中进行注册

255
00:14:10,250 --> 0:14:11,552
在这里你可以看到

256
00:14:11,618 --> 0:14:15,856
我正在我的配置上设置一些细节

257
00:14:17,457 --> 0:14:20,961
我把过滤器插座设为真

258
00:14:21,028 --> 0:14:23,931
这表示我会在数据流层

259
00:14:23,997 --> 0:14:25,532
过滤网络流量

260
00:14:26,466 --> 0:14:28,101
我把过滤器数据包设为假

261
00:14:28,168 --> 0:14:31,138
表明我不会在数据包层

262
00:14:31,205 --> 0:14:32,873
过滤网络流量

263
00:14:34,675 --> 0:14:38,178
我要继续并启动我的内容过滤器配置

264
00:14:38,245 --> 0:14:40,781
然后在系统中注册配置

265
00:14:40,848 --> 0:14:42,883
通过调用保存到首选项实现

266
00:14:45,352 --> 0:14:48,188
因为启动了内容过滤器配置

267
00:14:48,522 --> 0:14:52,125
这将导致系统开启

268
00:14:52,392 --> 0:14:54,895
并开启我的内容过滤器

269
00:14:55,696 --> 0:14:58,432
让我们继续并看一下

270
00:14:58,498 --> 0:15:01,902
在系统扩展内运行的

271
00:14:58,498 --> 0:15:01,902
在系统扩展内运行的

272
00:15:01,969 --> 0:15:05,038
NEFilterDataProvider

273
00:15:07,474 --> 0:15:10,043
这是子类

274
00:15:10,110 --> 0:15:14,481
我已经在这个类中重写了

275
00:15:15,282 --> 0:15:18,919
StartFilter、StopFilter

276
00:15:20,120 --> 0:15:22,923
首先让我们看一下

277
00:15:23,991 --> 0:15:28,929
当系统开启内容过滤器时

278
00:15:30,531 --> 0:15:32,833
默认情况下

279
00:15:32,900 --> 0:15:37,070
系统将把每一个TCP和UDP

280
00:15:37,137 --> 0:15:39,173
我其实并不想这样

281
00:15:39,239 --> 0:15:42,643
我只对流入的在我的Mac上

282
00:15:42,709 --> 0:15:45,946
连接8888端口的

283
00:15:47,347 --> 0:15:50,284
因此我要创建一个

284
00:15:50,350 --> 0:15:53,954
告知系统我想要看到哪些流量

285
00:15:56,223 --> 0:16:01,595
现在我不关心TCP连接来自哪里

286
00:15:56,223 --> 0:16:01,595
现在我不关心TCP连接来自哪里

287
00:16:01,962 --> 0:16:04,865
我也不关心

288
00:16:04,932 --> 0:16:07,301
TCP连接要连接到我Mac上的

289
00:16:07,367 --> 0:16:08,535
哪个地址

290
00:16:08,836 --> 0:16:11,972
我要创建两个NEFilter规则

291
00:16:12,573 --> 0:16:16,710
一个有通配符IPv4地址

292
00:16:16,777 --> 0:16:19,980
另一个有通配符IPv6地址

293
00:16:21,982 --> 0:16:24,184
对于我所创建的每一个过滤器规则

294
00:16:24,251 --> 0:16:26,987
我都创建一个

295
00:16:27,054 --> 0:16:29,189
用于指定我想要查看的数据流的特征

296
00:16:29,256 --> 0:16:32,659
我想让过滤器规则与之匹配

297
00:16:34,995 --> 0:16:38,999
对于远程网络和远程前缀

298
00:16:39,533 --> 0:16:41,668
这意味着我的过滤器规则

299
00:16:41,735 --> 0:16:44,872
将匹配来自任何地方的流量

300
00:16:44,938 --> 0:16:46,740
我不关心它来自哪里

301
00:16:47,207 --> 0:16:48,609
对于本地网络

302
00:16:48,675 --> 0:16:51,612
我传递一个我使用通配符地址创建的

303
00:16:51,678 --> 0:16:57,017
和一个本地的8888端口

304
00:16:58,852 --> 0:17:03,390
好的 那么这意味着我的过滤器规则

305
00:16:58,852 --> 0:17:03,390
好的 那么这意味着我的过滤器规则

306
00:17:03,457 --> 0:17:05,726
将匹配所有进来的数据流

307
00:17:05,791 --> 0:17:07,027
并在任意地址上连接端口8888

308
00:17:09,997 --> 0:17:15,035
我指定一个TCP协议

309
00:17:15,536 --> 0:17:18,038
我继续并在过滤器数据的动作中

310
00:17:18,105 --> 0:17:20,273
创建

311
00:17:20,339 --> 0:17:22,409
传入NENetworkRule

312
00:17:23,310 --> 0:17:29,550
当有新的网络数据流入时

313
00:17:30,651 --> 0:17:32,419
如果匹配我在系统上创建的

314
00:17:33,554 --> 0:17:37,057
系统将根据过滤器数据动作

315
00:17:37,691 --> 0:17:40,060
把那个数据流传到我的内容过滤器中

316
00:17:42,129 --> 0:17:44,865
好的 一旦我创建好这些

317
00:17:44,932 --> 0:17:48,068
我会继续并创建我的

318
00:17:48,669 --> 0:17:53,207
传入规则并制定允许的默认动作

319
00:17:53,273 --> 0:17:56,443
这意味着如果系统上创建了

320
00:17:56,510 --> 0:17:59,012
并且它不匹配任何过滤器规则

321
00:17:59,079 --> 0:18:01,682
我希望系统允许那个它流过

322
00:17:59,079 --> 0:18:01,682
我希望系统允许那个它流过

323
00:18:01,748 --> 0:18:03,784
不要把它传给我的内容过滤器

324
00:18:05,419 --> 0:18:06,520
我要继续并调用应用

325
00:18:06,587 --> 0:18:09,089
从把我的过滤器设置应用到系统中

326
00:18:09,456 --> 0:18:13,160
然后 当完成后 我就调用

327
00:18:13,227 --> 0:18:16,230
示意系统我的过滤器现在已经启动

328
00:18:16,296 --> 0:18:20,100
并且已经准备好处理网络数据流了

329
00:18:21,835 --> 0:18:24,304
现在让我们看一下

330
00:18:24,371 --> 0:18:26,173
当有新数据流创建

331
00:18:26,240 --> 0:18:30,577
将调用这个函数

332
00:18:32,379 --> 0:18:34,448
这个函数接受一个参数

333
00:18:34,515 --> 0:18:37,117
即表示数据流的

334
00:18:38,051 --> 0:18:40,120
并返回一个新的数据流裁决

335
00:18:40,187 --> 0:18:42,556
示意系统如何处理数据流

336
00:18:43,790 --> 0:18:44,691
那么在这里我要做的就是

337
00:18:44,758 --> 0:18:49,129
在字典中

338
00:18:49,863 --> 0:18:53,734
并把那个字典发送到

339
00:18:53,800 --> 0:18:57,137
提示用户允许或拒绝数据流

340
00:18:59,606 --> 0:19:01,575
现在获得用户的决策

341
00:18:59,606 --> 0:19:01,575
现在获得用户的决策

342
00:19:01,642 --> 0:19:04,011
很明显是一个非常异步化的过程

343
00:19:04,077 --> 0:19:06,013
当我等待用户做出决策时

344
00:19:06,079 --> 0:19:08,916
我要继续并给系统返回一个

345
00:19:08,982 --> 0:19:12,052
这会告诉OS对这个数据流待决

346
00:19:12,119 --> 0:19:15,155
不要采取进一步行动

347
00:19:16,790 --> 0:19:18,325
一旦用户做出决策

348
00:19:18,392 --> 0:19:21,962
我会创建一个新的数据流裁决

349
00:19:22,029 --> 0:19:24,164
取决于用户所做出的决策

350
00:19:24,665 --> 0:19:28,168
然后我就通过新裁决调用恢复数据流

351
00:19:30,103 --> 0:19:33,707
好的 这是一个使用系统扩展

352
00:19:33,774 --> 0:19:38,779
和内容过滤器API

353
00:19:39,079 --> 0:19:41,915
来实施简单防火墙的一个示例app

354
00:19:46,086 --> 0:19:49,189
接下来我要讲透明代理app

355
00:19:50,224 --> 0:19:52,926
透明代理app的其中一个例子是

356
00:19:53,260 --> 0:19:55,195
云安全app

357
00:19:55,662 --> 0:19:59,499
这些app把通往指定网站的流量

358
00:19:59,800 --> 0:20:01,201
转移到云服务中

359
00:19:59,800 --> 0:20:01,201
转移到云服务中

360
00:20:01,435 --> 0:20:02,302
那个云服务

361
00:20:02,369 --> 0:20:05,038
对流量应用一些额外的安全性检查

362
00:20:05,105 --> 0:20:08,375
比如额外的用户认证或授权

363
00:20:10,344 --> 0:20:13,680
透明代理app的另一个例子是

364
00:20:13,747 --> 0:20:16,817
对流量应用一些特殊转换的app

365
00:20:16,884 --> 0:20:21,154
比如对网络流量

366
00:20:21,221 --> 0:20:24,024
或对以某种特殊方式

367
00:20:24,091 --> 0:20:26,226
从Web上下载的缓存资源

368
00:20:27,461 --> 0:20:31,265
透明代理app还可以在单一连接上

369
00:20:31,331 --> 0:20:33,934
多路传输多个网络流量数据流

370
00:20:34,635 --> 0:20:38,138
或它们可以使用一些

371
00:20:38,205 --> 0:20:39,907
那会减少网络延迟

372
00:20:40,207 --> 0:20:44,111
有许多关于透明代理app的

373
00:20:44,178 --> 0:20:47,214
因此我要很激动地告诉你们

374
00:20:47,281 --> 0:20:50,784
我们已经在网络扩展框架中

375
00:20:50,851 --> 0:20:53,720
允许你创建透明代理app

376
00:20:53,787 --> 0:20:55,989
而不需要使用内核扩展

377
00:20:57,991 --> 0:21:00,294
让我们继续并看一下这些API

378
00:20:57,991 --> 0:21:00,294
让我们继续并看一下这些API

379
00:21:00,360 --> 0:21:02,763
它们在

380
00:21:02,829 --> 0:21:05,265
让我们看一下如何在你的app中

381
00:21:08,769 --> 0:21:10,671
在你的主UI app中

382
00:21:11,271 --> 0:21:16,977
你使用任意透明代理管理器

383
00:21:17,044 --> 0:21:19,179
并在系统中注册你的透明代理

384
00:21:19,246 --> 0:21:23,283
因此你的系统知道如何运行

385
00:21:25,986 --> 0:21:29,723
你还要创建一个系统扩展

386
00:21:30,924 --> 0:21:35,395
这些API允许你在数据流层

387
00:21:35,462 --> 0:21:36,763
代理网络数据的流动

388
00:21:37,497 --> 0:21:42,002
为此 你要创建

389
00:21:42,336 --> 0:21:44,071
与内容过滤器不同

390
00:21:44,137 --> 0:21:48,308
默认情况下 系统不会给你的代理

391
00:21:49,309 --> 0:21:52,379
因此你必须创建一组

392
00:21:52,446 --> 0:21:56,316
指定你想要代理哪些数据流

393
00:21:58,051 --> 0:22:00,153
一旦你的透明代理启动并运行

394
00:21:58,051 --> 0:22:00,153
一旦你的透明代理启动并运行

395
00:22:00,220 --> 0:22:04,324
并且你已经安装了

396
00:22:05,726 --> 0:22:12,232
随着匹配你规则的新的

397
00:22:12,299 --> 0:22:16,336
这些数据流会被转移到你的

398
00:22:16,904 --> 0:22:21,341
然后完全由你来处理

399
00:22:22,376 --> 0:22:25,746
你可以在另一个链接上

400
00:22:25,812 --> 0:22:27,814
应用你的特殊转换

401
00:22:27,881 --> 0:22:30,350
或任何其它你想要执行的操作

402
00:22:31,852 --> 0:22:33,086
那么这是如何在你的app中

403
00:22:33,153 --> 0:22:37,424
使用透明代理API的一个简单概览

404
00:22:41,495 --> 0:22:44,364
接下来让我们看一下

405
00:22:45,065 --> 0:22:49,002
现在DNS协议是一个强大的协议

406
00:22:49,303 --> 0:22:51,371
但它不是特别安全

407
00:22:52,206 --> 0:22:56,210
因此欺骗DNS响应

408
00:22:56,276 --> 0:22:59,613
和导致浏览器打开恶意网站非常简单

409
00:23:00,013 --> 0:23:04,351
或通过查看某人发送的DNS查询

410
00:23:04,418 --> 0:23:07,387
监视他们的因特网浏览活动也很简单

411
00:23:08,822 --> 0:23:10,624
为了弥补这些不足

412
00:23:10,691 --> 0:23:12,292
DNS代理

413
00:23:12,359 --> 0:23:15,395
向DNS协议中应用额外的安全性

414
00:23:17,431 --> 0:23:18,498
比如

415
00:23:18,565 --> 0:23:22,402
app可能对DNS流量

416
00:23:22,469 --> 0:23:26,406
或在某种安全通道上应用

417
00:23:27,007 --> 0:23:29,543
那么我很高兴地告诉你

418
00:23:29,610 --> 0:23:33,881
我们引入了一些很棒的新API

419
00:23:33,947 --> 0:23:37,818
DNS代理app

420
00:23:42,356 --> 0:23:46,059
这些API在

421
00:23:46,126 --> 0:23:49,062
它们实际上是

422
00:23:49,129 --> 0:23:51,565
我们把它们带到

423
00:23:51,632 --> 0:23:53,433
并让它们在Mac上可用

424
00:23:53,967 --> 0:23:56,937
让我们看一下这些API

425
00:23:58,038 --> 0:23:59,239
在你的主UI app中

426
00:23:59,306 --> 0:24:01,408
你将使用

427
00:23:59,306 --> 0:24:01,408
你将使用

428
00:24:01,475 --> 0:24:03,944
创建你的DNS代理配置

429
00:24:04,011 --> 0:24:06,847
并在系统中注册你的配置

430
00:24:06,914 --> 0:24:09,449
从而系统知道如何运行

431
00:24:11,818 --> 0:24:13,453
你创建一个系统扩展

432
00:24:13,520 --> 0:24:16,456
DNS代理将在系统扩展中运行

433
00:24:16,990 --> 0:24:18,825
并且你要把你的代理

434
00:24:18,892 --> 0:24:23,463
作为NEDNSProxyProvider类

435
00:24:25,165 --> 0:24:28,535
一旦你的DNS代理配置在系统中

436
00:24:28,602 --> 0:24:30,470
你的系统扩展也正在运行

437
00:24:31,004 --> 0:24:34,374
那系统将开始转移

438
00:24:34,441 --> 0:24:37,477
对你的NEDNSProxyProvider

439
00:24:39,179 --> 0:24:43,350
然后完全由你来决定

440
00:24:43,417 --> 0:24:44,785
你可以对它进行加密

441
00:24:44,852 --> 0:24:47,487
你可以通过某种安全通道发送它

442
00:24:47,554 --> 0:24:49,489
完全由你决定

443
00:24:51,158 --> 0:24:52,226
好的

444
00:24:52,292 --> 0:24:55,495
那么这是DNS代理API的

445
00:24:55,896 --> 0:24:58,498
接下来我要讲VPN app

446
00:24:59,333 --> 0:25:02,503
VPN app的一个经典用例是

447
00:24:59,333 --> 0:25:02,503
VPN app的一个经典用例是

448
00:25:03,036 --> 0:25:06,673
允许公司为员工提供

449
00:25:06,740 --> 0:25:11,512
安全地远程访问公司内网的方式

450
00:25:12,880 --> 0:25:13,747
另一个用例

451
00:25:13,814 --> 0:25:17,050
最近几年越来越流行了

452
00:25:17,117 --> 0:25:18,886
即个人VPN app

453
00:25:19,353 --> 0:25:20,754
这些app用于

454
00:25:20,821 --> 0:25:24,525
安全地和异步地浏览因特网

455
00:25:26,226 --> 0:25:32,533
我们实际上在macOS 10.10中

456
00:25:33,667 --> 0:25:35,102
在这次发布中

457
00:25:35,169 --> 0:25:38,205
我们改善了这些API

458
00:25:38,805 --> 0:25:41,041
让我们看一下VPN API

459
00:25:41,108 --> 0:25:42,709
以及如何在你的app中使用它们

460
00:25:45,179 --> 0:25:46,413
在你的主UI app中

461
00:25:46,480 --> 0:25:51,051
你使用NETunnelProviderManager

462
00:25:51,118 --> 0:25:53,587
创建VPN配置

463
00:25:53,654 --> 0:25:56,557
并在系统中注册VPN客户端

464
00:25:57,991 --> 0:25:59,526
你还创建一个系统扩展

465
00:25:59,593 --> 0:26:02,563
你的VPN客户端代码

466
00:25:59,593 --> 0:26:02,563
你的VPN客户端代码

467
00:26:06,033 --> 0:26:08,502
你把VPN客户端

468
00:26:08,569 --> 0:26:11,338
作为NEPacketTunnelProvider类的

469
00:26:12,105 --> 0:26:14,541
系统创建一个utun界面

470
00:26:14,608 --> 0:26:18,579
响应你的

471
00:26:19,780 --> 0:26:22,850
NEPacketTunnelProvider

472
00:26:22,916 --> 0:26:28,589
你想通过你的VPN路由哪些网络

473
00:26:30,524 --> 0:26:33,594
一旦你指定了VPN的路由规则

474
00:26:33,660 --> 0:26:35,596
并在系统中安装了路由规则

475
00:26:35,996 --> 0:26:40,601
当IP数据包按照那些规则

476
00:26:41,235 --> 0:26:45,372
那些数据包将被转到你的

477
00:26:45,439 --> 0:26:50,577
你可以通过隧道连接

478
00:26:50,644 --> 0:26:54,248
使用自定义隧道协议发送那些数据包

479
00:26:55,349 --> 0:26:59,186
好的 这是VPN API

480
00:26:59,453 --> 0:27:02,155
接下来我想讲一下

481
00:26:59,453 --> 0:27:02,155
接下来我想讲一下

482
00:27:02,222 --> 0:27:03,624
所做的一些改进

483
00:27:04,491 --> 0:27:06,460
首先是

484
00:27:06,527 --> 0:27:10,330
这是一个可以设置在VPN配置上的

485
00:27:10,664 --> 0:27:13,634
这在个人VPN app中尤其有用

486
00:27:14,001 --> 0:27:15,035
在这些app中

487
00:27:15,102 --> 0:27:19,773
在VPN隧道之外没有流量泄漏

488
00:27:19,840 --> 0:27:23,043
你希望你的全部流量都能通过VPN

489
00:27:23,677 --> 0:27:24,511
是的

490
00:27:27,114 --> 0:27:31,318
通过在配置上启动

491
00:27:31,385 --> 0:27:32,252
你可以实现这个功能

492
00:27:32,319 --> 0:27:35,689
系统将通过VPN路由所有流量

493
00:27:35,756 --> 0:27:37,157
并且如果VPN

494
00:27:37,224 --> 0:27:40,160
由于某种原因暂时不可用…

495
00:27:40,227 --> 0:27:43,530
比如 如果Mac正在切换

496
00:27:43,597 --> 0:27:45,799
它所连接的WiFi网络

497
00:27:45,866 --> 0:27:50,070
或如果你的VPN不管由于什么原因

498
00:27:51,371 --> 0:27:54,107
在这些情境中 流量实际上会被释放

499
00:27:54,174 --> 0:27:56,710
而不是被路由到VPN之外

500
00:27:58,645 --> 0:28:01,215
现在如果你已经启动

501
00:27:58,645 --> 0:28:01,215
现在如果你已经启动

502
00:28:01,949 --> 0:28:04,852
但你仍然想访问本地网络资源

503
00:28:04,918 --> 0:28:06,320
比如打印机

504
00:28:06,820 --> 0:28:10,023
你可以启动

505
00:28:10,090 --> 0:28:12,326
从而仍然允许访问本地网络资源

506
00:28:15,596 --> 0:28:19,299
我们还对Per-App VPN

507
00:28:19,800 --> 0:28:24,671
我们添加了三个新的域名列表

508
00:28:24,738 --> 0:28:26,707
路由到Per-App VPN

509
00:28:28,141 --> 0:28:32,713
它的运作方式是对于每一个列表

510
00:28:33,347 --> 0:28:39,620
如果相应的app

511
00:28:39,686 --> 0:28:43,724
并且那个主机域名

512
00:28:44,491 --> 0:28:48,395
该连接的流量将通过

513
00:28:48,962 --> 0:28:49,930
让我们看一个例子

514
00:28:49,997 --> 0:28:51,598
如果你正在使用Mail app

515
00:28:51,665 --> 0:28:54,735
并且你给Mail app

516
00:28:54,801 --> 0:28:57,738
你有私人邮箱账户

517
00:28:57,804 --> 0:29:00,240
和公司邮箱账户

518
00:28:57,804 --> 0:29:00,240
和公司邮箱账户

519
00:29:01,742 --> 0:29:03,644
通过在邮箱域名数组中

520
00:29:03,710 --> 0:29:09,049
指定公司邮件服务器的域名

521
00:29:11,418 --> 0:29:15,856
当Mail打开对公司邮件服务器的

522
00:29:15,923 --> 0:29:18,892
将通过Per-App VPN

523
00:29:19,893 --> 0:29:22,763
而对你私人邮件服务器的连接

524
00:29:23,630 --> 0:29:25,766
将不通过

525
00:29:28,335 --> 0:29:32,172
CalendarDomains和

526
00:29:32,239 --> 0:29:33,073
使用方式相同

527
00:29:33,140 --> 0:29:36,777
但它们是Calendar app

528
00:29:39,379 --> 0:29:43,016
好的 那么这是macOS上可用的

529
00:29:43,083 --> 0:29:44,484
VPN API的简单概览

530
00:29:44,551 --> 0:29:48,789
以及我们所做的一些改进

531
00:29:49,056 --> 0:29:51,792
而不需要使用网络内核扩展

532
00:29:54,194 --> 0:29:56,230
接下来我想讲一下虚拟机app

533
00:29:56,296 --> 0:29:59,800
这些app用于创建和管理虚拟机

534
00:30:00,467 --> 0:30:02,703
实话实说 如果虚拟机不联网的话

535
00:30:02,769 --> 0:30:05,906
它很可能不是特别有用

536
00:30:07,107 --> 0:30:09,843
在macOS上 我们有

537
00:30:09,910 --> 0:30:13,814
正好能实现这个功能

538
00:30:14,581 --> 0:30:19,820
在macOS 10.10中vmnet.framework

539
00:30:20,721 --> 0:30:22,556
但我们在本次发布中做了一些改进

540
00:30:22,623 --> 0:30:23,991
为你提供更多

541
00:30:24,057 --> 0:30:26,593
把虚拟机连接到网络的方式

542
00:30:27,628 --> 0:30:28,595
框架的运作方式是

543
00:30:28,662 --> 0:30:31,999
给你提供一些

544
00:30:32,065 --> 0:30:33,200
把虚拟机连接到网络的不同模式

545
00:30:33,734 --> 0:30:36,637
我们对共享模式做了一些改进

546
00:30:36,703 --> 0:30:39,506
你现在可以在共享模式中

547
00:30:39,573 --> 0:30:41,542
你可以指定

548
00:30:41,608 --> 0:30:43,844
你想要分配给虚拟机的IP范围

549
00:30:44,044 --> 0:30:46,480
并且你可以在虚拟机和网络之间设置

550
00:30:46,547 --> 0:30:48,849
端口转发规则

551
00:30:50,450 --> 0:30:53,387
我们还添加了一个全新的模式

552
00:30:53,453 --> 0:30:56,523
在这个模式中

553
00:30:56,590 --> 0:30:59,860
就好像它们实际连接到本地网络一样

554
00:31:01,461 --> 0:31:06,099
好的 这是用于把虚拟机

555
00:31:06,166 --> 0:31:08,869
虚拟机API的简单概览

556
00:31:11,438 --> 0:31:17,511
接下来我想简单讲一下

557
00:31:18,212 --> 0:31:20,180
其中一个例子是

558
00:31:20,247 --> 0:31:23,383
需要与硬件通讯的app

559
00:31:23,450 --> 0:31:26,820
比如摄像头或音频设备

560
00:31:26,887 --> 0:31:33,227
该设备仅能接受某些低层协议

561
00:31:33,293 --> 0:31:36,830
比如自定义链接层协议

562
00:31:38,031 --> 0:31:41,935
另一个使用自定IP协议的

563
00:31:42,002 --> 0:31:42,903
比如

564
00:31:42,970 --> 0:31:45,939
需要使用某些高度优化了的协议

565
00:31:46,006 --> 0:31:50,611
与本地网络上的其它机器

566
00:31:53,380 --> 0:31:56,917
我很高兴地宣布

567
00:31:56,984 --> 0:31:58,585
我们引入了一些新API

568
00:31:58,652 --> 0:32:01,088
允许你使用自定义低层协议

569
00:31:58,652 --> 0:32:01,088
允许你使用自定义低层协议

570
00:32:01,154 --> 0:32:05,926
而不需要使用内核扩展

571
00:32:08,095 --> 0:32:11,932
首先让我们看一下

572
00:32:13,934 --> 0:32:16,937
这是网络框架中的一个新API

573
00:32:18,672 --> 0:32:20,007
它的运作方式是

574
00:32:20,073 --> 0:32:25,145
在你的app中 你创建一种新的

575
00:32:25,212 --> 0:32:29,950
给你的自定义IP协议

576
00:32:30,184 --> 0:32:34,388
然后使用那个NWParameters对象

577
00:32:34,855 --> 0:32:37,491
然后那个NWConnection

578
00:32:37,558 --> 0:32:41,161
与你使用自定义IP协议

579
00:32:41,228 --> 0:32:44,965
在网络上进行TCP或UDP

580
00:32:46,867 --> 0:32:48,902
要了解更多关于

581
00:32:48,969 --> 0:32:51,972
请参看我们去年的演讲

582
00:32:54,241 --> 0:32:56,910
现在让我们看一个简短的代码示例

583
00:32:56,977 --> 0:33:00,981
演示如何使用这个

584
00:32:56,977 --> 0:33:00,981
演示如何使用这个

585
00:33:01,648 --> 0:33:05,185
首先我要做的是用这个新构造函数

586
00:33:05,252 --> 0:33:06,987
创建一个

587
00:33:07,988 --> 0:33:12,993
它接受自定义IP协议的标识符编号

588
00:33:13,794 --> 0:33:14,828
重点是

589
00:33:14,895 --> 0:33:18,298
你必须在这里传递

590
00:33:18,365 --> 0:33:22,970
你不能传递

591
00:33:23,036 --> 0:33:26,373
比如TCP、UDP或ICMP

592
00:33:30,110 --> 0:33:34,014
接下来我要创建通讯的目的地

593
00:33:34,381 --> 0:33:35,983
并且创建NWConnection

594
00:33:36,049 --> 0:33:39,019
传入目的地和我的参数

595
00:33:40,854 --> 0:33:43,156
然后我就像使用其它

596
00:33:43,223 --> 0:33:46,426
使用连接

597
00:33:46,493 --> 0:33:47,327
开启连接

598
00:33:47,394 --> 0:33:52,666
并开始使用我的自定义IP协议

599
00:33:56,003 --> 0:34:00,040
接下来让我们看一下

600
00:33:56,003 --> 0:34:00,040
接下来让我们看一下

601
00:34:00,340 --> 0:34:03,043
我们也把它们添加到了网络框架中

602
00:34:04,244 --> 0:34:05,112
它们的运作方式是

603
00:34:05,179 --> 0:34:10,050
在你的app中你创建一个

604
00:34:10,951 --> 0:34:15,054
指定你想要使用的

605
00:34:15,922 --> 0:34:17,456
然后使用你的通道对象

606
00:34:17,524 --> 0:34:19,960
通过以太网接口通讯

607
00:34:20,027 --> 0:34:22,062
使用了你的自定义

608
00:34:23,163 --> 0:34:25,632
让我们看一些代码

609
00:34:27,100 --> 0:34:32,072
首先我引用当前有线以太网接口

610
00:34:32,906 --> 0:34:35,641
然后创建我的

611
00:34:35,708 --> 0:34:39,079
传入接口和我的自定义

612
00:34:40,414 --> 0:34:44,251
现在与自定义IP协议API一样

613
00:34:44,318 --> 0:34:46,853
你必须在这里传递一个

614
00:34:46,920 --> 0:34:49,556
你不能传递一个系统已经能处理的

615
00:34:49,623 --> 0:34:52,092
比如IP或IPv6

616
00:34:55,329 --> 0:34:56,763
创建好通道之后

617
00:34:56,830 --> 0:35:00,734
我在通道上设置一些回调代码块

618
00:34:56,830 --> 0:35:00,734
我在通道上设置一些回调代码块

619
00:35:01,768 --> 0:35:05,205
当通道状态发生变更时

620
00:35:05,272 --> 0:35:08,108
调用

621
00:35:08,642 --> 0:35:10,043
当通道准备好之后

622
00:35:10,110 --> 0:35:12,980
我可以继续并开始发送和接收

623
00:35:13,046 --> 0:35:15,115
使用了我自定义etherType

624
00:35:16,183 --> 0:35:17,584
当从网络中收到

625
00:35:17,651 --> 0:35:20,954
使用了我自定义etherType

626
00:35:21,021 --> 0:35:22,756
将调用

627
00:35:24,024 --> 0:35:25,826
当完全设置好我的通道之后

628
00:35:25,893 --> 0:35:27,427
我就继续并启动它

629
00:35:27,494 --> 0:35:31,131
从而我可以开始使用我的自定义

630
00:35:35,102 --> 0:35:38,338
很好 那么这是我们所添加的

631
00:35:38,405 --> 0:35:40,741
这些新API可以让你使用自定义

632
00:35:40,807 --> 0:35:45,145
而不需要使用内核扩展

633
00:35:46,713 --> 0:35:48,715
好的 我们今天讲了很多内容

634
00:35:48,782 --> 0:35:53,487
我们在macOS Catalina中

635
00:35:53,554 --> 0:35:56,857
可以让你创建属于这些类别的app

636
00:35:56,924 --> 0:36:00,160
而不需要使用网络内核扩展

637
00:35:56,924 --> 0:36:00,160
而不需要使用网络内核扩展

638
00:36:01,195 --> 0:36:05,165
现在我想简单讲一下

639
00:36:06,366 --> 0:36:10,170
网络内核扩展存在许多问题

640
00:36:11,805 --> 0:36:13,574
首先是难于开发

641
00:36:13,640 --> 0:36:15,943
我之前提到过

642
00:36:16,510 --> 0:36:18,212
如果你测试一些新功能

643
00:36:18,278 --> 0:36:19,880
你很可能需要反复重启很多次

644
00:36:19,947 --> 0:36:23,617
同时如果你使用网络内核扩展

645
00:36:23,684 --> 0:36:26,320
你需要频繁地使用一些

646
00:36:26,386 --> 0:36:30,157
比如执行手动M-缓冲链操作

647
00:36:30,224 --> 0:36:33,227
这个代码非常棘手 非常容易出错

648
00:36:34,628 --> 0:36:38,065
同时内核扩展难于调试

649
00:36:38,131 --> 0:36:40,067
你必须有两台独立的机器

650
00:36:40,133 --> 0:36:42,069
正如我之前所提到过的那样

651
00:36:42,135 --> 0:36:46,206
单步执行代码非常棘手

652
00:36:48,208 --> 0:36:53,380
同时内核扩展中的稳定性问题

653
00:36:53,447 --> 0:36:55,782
可能会给系统带来灾难性后果

654
00:36:56,250 --> 0:36:58,218
如果你的内核扩展崩溃了

655
00:36:58,785 --> 0:37:00,721
它不会仅仅当掉你的app

656
00:36:58,785 --> 0:37:00,721
它不会仅仅当掉你的app

657
00:37:00,787 --> 0:37:02,689
还会重启整个系统

658
00:37:02,756 --> 0:37:07,394
这对于用户来说非常糟糕

659
00:37:09,229 --> 0:37:13,100
因为内核扩展存在这么多问题

660
00:37:13,166 --> 0:37:15,802
而且也因为我们已经在macOS上

661
00:37:15,869 --> 0:37:18,539
就是我们现在有这些API

662
00:37:18,605 --> 0:37:21,508
你可以用于在macOS Catalina中

663
00:37:21,575 --> 0:37:24,244
而不需要使用网络内核扩展了

664
00:37:25,012 --> 0:37:27,814
我们现在不推荐你使用

665
00:37:27,881 --> 0:37:29,883
网络内核扩展

666
00:37:31,285 --> 0:37:35,055
你现有的网络内核扩展

667
00:37:35,122 --> 0:37:39,259
可以继续在

668
00:37:39,593 --> 0:37:41,295
然而我们强烈鼓励你们

669
00:37:41,361 --> 0:37:45,265
查看一下我们所添加的这些

670
00:37:45,933 --> 0:37:48,669
并开始在你们的app中采用它们

671
00:37:48,735 --> 0:37:51,271
替换网络内核扩展的使用

672
00:37:51,839 --> 0:37:54,808
尽快做到这一点很重要

673
00:37:54,875 --> 0:37:57,811
因为不久之后

674
00:37:57,878 --> 0:38:01,415
我们将从macOS中彻底移除

675
00:37:57,878 --> 0:38:01,415
我们将从macOS中彻底移除

676
00:38:01,481 --> 0:38:03,283
对网络内核扩展的支持

677
00:38:06,787 --> 0:38:12,292
好的 今天我们讲了

678
00:38:12,860 --> 0:38:15,495
我们把它们引入

679
00:38:15,562 --> 0:38:17,598
帮助你创建

680
00:38:17,664 --> 0:38:19,666
能过滤网络内容的app

681
00:38:19,733 --> 0:38:21,668
代理网络内容

682
00:38:21,735 --> 0:38:23,570
隧道网络内容

683
00:38:23,637 --> 0:38:26,106
给虚拟机联网

684
00:38:26,173 --> 0:38:30,310
并使用自定义低层协议

685
00:38:30,377 --> 0:38:33,313
而不需要使用网络内核扩展

686
00:38:35,682 --> 0:38:38,952
这是个好消息

687
00:38:39,019 --> 0:38:42,856
在你的app中采用这些新API

688
00:38:42,923 --> 0:38:45,926
因为现在已经不推荐使用

689
00:38:45,993 --> 0:38:49,329
并且不久的将来

690
00:38:51,932 --> 0:38:55,502
要获取更多信息

691
00:38:55,569 --> 0:38:58,505
你可以找到我今天在这里所演示的

692
00:38:58,572 --> 0:39:00,741
示例代码的链接

693
00:38:58,572 --> 0:39:00,741
示例代码的链接

694
00:39:02,009 --> 0:39:04,878
我们还有一场网络演讲

695
00:39:04,945 --> 0:39:09,116
并且我们希望能在演讲上看到你们

696
00:39:09,183 --> 0:39:11,785
感谢大家参加这场演讲
