1
00:00:00,506 --> 0:00:04,500
[音乐]

2
00:00:08,031 --> 0:00:10,031
[掌声]

3
00:00:10,046 --> 0:00:10,866
&gt;&gt; 嗨 大家好

4
00:00:10,866 --> 0:00:13,506
感谢你们来参加本次会议

5
00:00:13,866 --> 0:00:15,056
我知道这是漫长的一天

6
00:00:15,796 --> 0:00:17,236
我的名字是 Alexander Jakobsen

7
00:00:17,236 --> 0:00:18,176
还有我是 MapKit 团队的一名工程师

8
00:00:21,486 --> 0:00:23,436
Apple Maps 每一天都帮助着

9
00:00:23,436 --> 0:00:25,436
世界各地数百万的人们

10
00:00:25,436 --> 0:00:27,386
导航和探索世界

11
00:00:29,096 --> 0:00:31,616
成千上万的开发者比如

12
00:00:31,616 --> 0:00:34,206
你们正在 App 里使用 MapKit

13
00:00:34,206 --> 0:00:36,086
并且结合 Apple Maps 

14
00:00:36,086 --> 0:00:38,146
来帮助你们的用户

15
00:00:38,526 --> 0:00:41,666
使用各种各样令人震惊的位置服务

16
00:00:42,796 --> 0:00:44,646
去年 我们介绍了

17
00:00:44,646 --> 0:00:47,146
MapKit JS 它允许你在

18
00:00:47,146 --> 0:00:49,356
你的网页上同样使用 Apple Maps

19
00:00:50,896 --> 0:00:52,256
希望你看过

20
00:00:52,346 --> 0:00:54,526
本周一的主题演讲同时看到了所有

21
00:00:54,526 --> 0:00:56,016
我们添加到 iOS 13 中

22
00:00:56,016 --> 0:00:58,246
地图里的新功能

23
00:00:59,296 --> 0:01:01,606
我们对 Maps 的发展方向感到非常兴奋

24
00:00:59,296 --> 0:01:01,606
我们对 Maps 的发展方向感到非常兴奋

25
00:01:02,226 --> 0:01:04,096
但除了你在 Keynote 讲演里看到的之外

26
00:01:04,196 --> 0:01:07,696
我们今年一年都忙着构建一系列

27
00:01:07,696 --> 0:01:09,976
你们一直要求的

28
00:01:09,976 --> 0:01:12,396
MapKit 还有 MapKit JS 中的新功能

29
00:01:13,306 --> 0:01:15,606
所以 终于我非常兴奋

30
00:01:15,606 --> 0:01:17,286
能够告诉你们出现在 MapKit 和

31
00:01:17,286 --> 0:01:19,766
MapKit JS 中有什么是新的东西

32
00:01:20,376 --> 0:01:21,636
但在我们深入讨论所有

33
00:01:21,636 --> 0:01:23,406
新功能之前 我想要

34
00:01:23,406 --> 0:01:25,016
花一点时间 谈谈我们

35
00:01:25,016 --> 0:01:27,006
全新的基础地图

36
00:01:28,026 --> 0:01:30,746
如 Keynote 讲演中所提到过的

37
00:01:30,746 --> 0:01:32,616
我们已经重建了我们的地图 

38
00:01:32,616 --> 0:01:35,046
通过我们的定制车队和飞机队

39
00:01:35,116 --> 0:01:37,556
从最初版本直到到目前为止 

40
00:01:37,556 --> 0:01:40,126
覆盖超过 4 百万英里的公路 

41
00:01:41,666 --> 0:01:43,176
新地图非常

42
00:01:43,176 --> 0:01:44,886
详细 你会看到比以往

43
00:01:44,886 --> 0:01:47,756
任何时候都多的特性 

44
00:01:48,966 --> 0:01:51,196
如棒球场 跑道运动场 

45
00:01:51,426 --> 0:01:53,596
步行道和游泳池

46
00:01:54,086 --> 0:01:56,266
还有你会看到主要

47
00:01:56,266 --> 0:01:58,276
针对丰富性和

48
00:01:58,276 --> 0:02:00,996
关于公园 绿化道

49
00:01:58,276 --> 0:02:00,996
关于公园 绿化道

50
00:02:01,396 --> 0:02:04,636
海滩和偏远地区细节的改进

51
00:02:04,636 --> 0:02:06,816
还有修缮后的道路 建筑

52
00:02:07,086 --> 0:02:09,006
城市公园等等

53
00:02:11,096 --> 0:02:12,636
我们也很大程度改进了

54
00:02:12,636 --> 0:02:14,996
地址细节 这就意味着

55
00:02:14,996 --> 0:02:17,086
有更准确的搜索和

56
00:02:17,366 --> 0:02:18,486
方向结果

57
00:02:18,766 --> 0:02:21,496
最好的部分是我们

58
00:02:21,496 --> 0:02:23,026
在 Apple Maps 里实现了这些优化

59
00:02:23,026 --> 0:02:25,016
通过 MapKit 和 MapKit JS 

60
00:02:25,016 --> 0:02:28,686
它们会自动变成对你可用的

61
00:02:29,296 --> 0:02:30,686
从 2019 年底开始这个更新的地图会在

62
00:02:30,686 --> 0:02:32,636
全美国地区可供使用

63
00:02:32,636 --> 0:02:35,226
并且在 2020 年我们将会补充

64
00:02:35,226 --> 0:02:38,366
其他国家的信息

65
00:02:38,716 --> 0:02:40,096
我们也在尽力使地图

66
00:02:40,096 --> 0:02:43,026
在深色模式下

67
00:02:43,136 --> 0:02:48,256
在 iOS tvOS macOS 和网页上可用

68
00:02:48,956 --> 0:02:52,616
在本部分中 我们将会

69
00:02:52,616 --> 0:02:54,336
使用一个虚构的 WWDC

70
00:02:54,336 --> 0:02:57,406
伴生 App 用于演示

71
00:02:57,406 --> 0:02:58,826
我们将要谈论的一些话题

72
00:03:00,086 --> 0:03:01,266
这个 App 将可以作为

73
00:03:01,266 --> 0:03:02,996
网页中的示例代码

74
00:03:02,996 --> 0:03:06,136
但是让我们快速地

75
00:03:06,136 --> 0:03:09,096
看看这个 App 是什么样子的

76
00:03:09,886 --> 0:03:11,626
它有三个主要功能特征

77
00:03:11,856 --> 0:03:13,676
这些功能将会给像你们自己这样的与会者

78
00:03:13,676 --> 0:03:16,426
带来额外的价值

79
00:03:17,766 --> 0:03:19,036
第一个功能是

80
00:03:19,036 --> 0:03:20,596
住宿功能或者说是

81
00:03:20,596 --> 0:03:22,566
住宿搜寻器 通过它 利用伴生 App 

82
00:03:22,566 --> 0:03:28,616
与会者可以在会议期间找到住宿地点

83
00:03:29,356 --> 0:03:32,166
这个视图仅仅只是一个

84
00:03:32,166 --> 0:03:33,916
带有许多添加注释的地图

85
00:03:35,576 --> 0:03:37,936
第二个功能叫做 After Hours

86
00:03:38,296 --> 0:03:39,546
然后这个功能是让

87
00:03:39,546 --> 0:03:41,686
与会者在会议结束后

88
00:03:41,686 --> 0:03:43,646
可以找到一家餐馆或者一个酒吧

89
00:03:43,646 --> 0:03:46,146
在那里他们可以和其他的与会者会面

90
00:03:47,516 --> 0:03:49,306
当用户在搜索栏输入搜索内容时

91
00:03:49,306 --> 0:03:53,846
关于餐厅和酒吧相关建议会出现

92
00:03:53,846 --> 0:03:56,076
展示给我们然后搜索

93
00:03:56,076 --> 0:03:58,836
结果会在地图上显示成注释

94
00:03:59,436 --> 0:04:03,326
最后一个功能是事件视图

95
00:03:59,436 --> 0:04:03,326
最后一个功能是事件视图

96
00:04:04,496 --> 0:04:06,716
这个事件视图呈现为一个简单的

97
00:04:06,716 --> 0:04:08,836
伴生 App 事件的地图

98
00:04:08,836 --> 0:04:09,896
上面有那些会发生在

99
00:04:09,896 --> 0:04:11,746
官方 WWDC Bash 前夜的事件

100
00:04:12,766 --> 0:04:14,386
此功能可以让地图集中显示

101
00:04:14,386 --> 0:04:18,555
事件的位置 还可以渲染出一系列

102
00:04:18,555 --> 0:04:20,676
代表食物和饮料

103
00:04:20,676 --> 0:04:22,216
帐篷 以及舞台的

104
00:04:22,216 --> 0:04:23,866
注释和添加层

105
00:04:24,426 --> 0:04:28,046
所以 对于会议剩下的部分

106
00:04:28,046 --> 0:04:30,186
我们将谈到在 MapKit 和 MapKit JS 里

107
00:04:30,186 --> 0:04:34,586
最激动人心的新功能的更多细节 

108
00:04:34,586 --> 0:04:37,586
我们今天有很多东西要提及

109
00:04:37,586 --> 0:04:39,096
比如我们的新的快照服务

110
00:04:39,096 --> 0:04:41,386
可以过滤和增加地图视图相机控制

111
00:04:41,386 --> 0:04:45,156
的新的 API

112
00:04:46,226 --> 0:04:48,986
那么 让我们开始谈谈快照功能吧

113
00:04:49,726 --> 0:04:52,086
快照只是地图中一个静态的图像

114
00:04:52,086 --> 0:04:54,636
你可能会对地图的快照功能感到熟悉了

115
00:04:54,636 --> 0:04:56,996
从很多年前开始它已经

116
00:04:56,996 --> 0:04:59,916
在 MapKit 上可以使用了

117
00:05:01,126 --> 0:05:03,656
我们在我们的 App 中使用快照 

118
00:05:03,656 --> 0:05:05,686
但是我们在地图中不需要

119
00:05:05,826 --> 0:05:08,166
用户交互 如联系人

120
00:05:08,706 --> 0:05:10,356
和信息 以及日历

121
00:05:10,926 --> 0:05:13,566
但是因为快照是 MapKit 的一部分

122
00:05:13,566 --> 0:05:18,626
你只能在原生 App 中创建快照

123
00:05:19,366 --> 0:05:20,936
但本周 我们公布了一个

124
00:05:20,936 --> 0:05:22,886
允许你创建并在其他环境中

125
00:05:22,886 --> 0:05:26,616
也可以使用快照的新服务

126
00:05:27,556 --> 0:05:28,946
这项新服务被称为

127
00:05:29,726 --> 0:05:31,586
Maps Web Snapshots

128
00:05:32,406 --> 0:05:34,766
要获取 Maps Web Snapshot

129
00:05:35,146 --> 0:05:36,916
你所需要的仅仅是一个 URL

130
00:05:37,696 --> 0:05:39,486
这个 URL 的参数

131
00:05:39,776 --> 0:05:42,056
决定了该图像特征

132
00:05:42,056 --> 0:05:44,416
比如中心坐标

133
00:05:44,416 --> 0:05:46,696
以及它的尺寸

134
00:05:47,306 --> 0:05:48,866
如果你想要一样的 但出现在地图的

135
00:05:48,866 --> 0:05:50,736
深色模式中的快照

136
00:05:50,736 --> 0:05:54,386
你可以增加 colorScheme

137
00:05:54,386 --> 0:05:56,366
参数值中的 dark 值

138
00:05:58,716 --> 0:06:01,546
所有的快照 URL 都需要一个 signature

139
00:05:58,716 --> 0:06:01,546
所有的快照 URL 都需要一个 signature

140
00:06:01,546 --> 0:06:03,856
通过 Apple Developer Program

141
00:06:03,856 --> 0:06:06,346
在获得 MapKit JS API 密钥之后

142
00:06:06,346 --> 0:06:08,636
可以生成这个 signature

143
00:06:09,206 --> 0:06:12,466
作为 MapKit JS beta 的一部分

144
00:06:13,436 --> 0:06:15,956
你现在每一天可以请求 25000 个快照

145
00:06:15,956 --> 0:06:18,316
我们希望这个数目会

146
00:06:18,316 --> 0:06:21,416
足以满足大家的需求

147
00:06:21,996 --> 0:06:26,066
你可以在任何你可以用到 URL 的地方

148
00:06:26,066 --> 0:06:27,926
使用地图快照来显示一个图像

149
00:06:27,926 --> 0:06:29,726
来显示一个图像 例如邮件

150
00:06:29,726 --> 0:06:33,956
URL 预览 当然还有在网页中

151
00:06:34,806 --> 0:06:37,776
为了帮助你开始生成快照 URL 这个功能

152
00:06:37,776 --> 0:06:39,386
我们为你建立了这个工具

153
00:06:39,386 --> 0:06:41,356
然后在 MapKit JS 开发者页面上

154
00:06:41,356 --> 0:06:43,126
你可以找到更多的

155
00:06:43,126 --> 0:06:48,486
有关 MapKit JS beta 项目的信息 

156
00:06:52,196 --> 0:06:53,846
那么 这就是你可以创造

157
00:06:53,846 --> 0:06:55,326
Maps Web Snapshots 的方法

158
00:06:56,696 --> 0:06:57,806
那么 让我们继续也谈一谈

159
00:06:57,806 --> 0:07:00,276
在深色模式中的地图

160
00:06:57,806 --> 0:07:00,276
在深色模式中的地图

161
00:07:01,296 --> 0:07:02,896
去年 我们介绍了在 macOS 中

162
00:07:02,896 --> 0:07:05,286
深色模式的地图

163
00:07:05,666 --> 0:07:06,776
然后今年 我们将它带到了

164
00:07:06,776 --> 0:07:09,486
iOS tvOS 和网页上

165
00:07:10,446 --> 0:07:11,966
那么 你需要做什么来

166
00:07:11,966 --> 0:07:14,676
使用 App 深色模式下的地图呢

167
00:07:15,606 --> 0:07:17,916
好吧 MKMapView

168
00:07:17,916 --> 0:07:20,086
会根据其视图的层次结构

169
00:07:20,086 --> 0:07:22,006
在特征集合中

170
00:07:22,006 --> 0:07:24,176
自动适应用户的界面风格 

171
00:07:25,566 --> 0:07:28,876
所以 如果你的视图是深色的 那么

172
00:07:28,876 --> 0:07:30,896
地图视图将自动进行适应

173
00:07:31,396 --> 0:07:33,526
如果你过去使用过 tvOS 中的 MapKit

174
00:07:33,526 --> 0:07:36,506
这对于你应该是熟悉的

175
00:07:37,266 --> 0:07:38,116
关于你们正在想的

176
00:07:38,116 --> 0:07:40,426
没错 这个更新版的地图

177
00:07:40,426 --> 0:07:42,866
将自动取代旧的地图

178
00:07:46,416 --> 0:07:48,176
正如我之前提到的 如果你

179
00:07:48,176 --> 0:07:49,906
在你的地图中不需要用到

180
00:07:49,906 --> 0:07:52,416
用户交互 正确的工具

181
00:07:52,466 --> 0:07:53,966
就是 snapshotter 

182
00:07:54,816 --> 0:07:56,946
但与地图视图不同的是

183
00:07:56,946 --> 0:07:59,566
snapshotter 不知道

184
00:07:59,566 --> 0:08:01,286
你 App 中视图的层次结构

185
00:07:59,566 --> 0:08:01,286
你 App 中视图的层次结构

186
00:08:01,816 --> 0:08:03,796
因此 重要的是

187
00:08:03,796 --> 0:08:05,906
你对你的 snapshotter 进行配置

188
00:08:06,416 --> 0:08:08,356
来确保快照这个快照

189
00:08:08,466 --> 0:08:11,696
匹配用户界面样式的视图层次结构

190
00:08:12,136 --> 0:08:13,346
而你可以通过使用

191
00:08:13,346 --> 0:08:14,456
snapshotter 选项来实现这个配置

192
00:08:15,076 --> 0:08:16,766
那么 让我们用一个例子来看如何做到

193
00:08:18,186 --> 0:08:19,316
首先 你需要创建你的

194
00:08:19,316 --> 0:08:21,616
snapshotter 选项 然后你需要

195
00:08:21,616 --> 0:08:23,066
分配哪些地方是

196
00:08:23,066 --> 0:08:24,636
你想要创建快照的

197
00:08:25,936 --> 0:08:27,276
你还需要提供

198
00:08:27,366 --> 0:08:28,776
这个快照的尺寸

199
00:08:30,536 --> 0:08:33,515
与视图类似 你可以在特征集合里

200
00:08:33,515 --> 0:08:35,076
通过使用用户界面风格 

201
00:08:35,326 --> 0:08:38,956
来配置这个快照的外观

202
00:08:39,796 --> 0:08:41,086
所以 如果你有一个打算用来展示

203
00:08:41,086 --> 0:08:42,986
你的快照的视图

204
00:08:42,986 --> 0:08:44,866
最简单的配置选项的方式

205
00:08:44,866 --> 0:08:48,996
是直接抓取目标视图中的特征集合 

206
00:08:49,946 --> 0:08:53,736
这确保了你创建的快照

207
00:08:53,736 --> 0:08:56,006
完全的匹配你的视图层次中的

208
00:08:56,006 --> 0:08:56,986
用户界面风格

209
00:08:58,316 --> 0:08:59,686
但请记住 当用户正在使用你的 App 时

210
00:08:59,686 --> 0:09:02,036
他们可以自由切换进入或退出

211
00:08:59,686 --> 0:09:02,036
他们可以自由切换进入或退出

212
00:09:02,036 --> 0:09:03,586
iOS 的深色模式

213
00:09:04,286 --> 0:09:05,526
所以 请确保你观察到了

214
00:09:05,526 --> 0:09:07,396
视图层次结构中的

215
00:09:07,396 --> 0:09:08,746
特征集合的变化

216
00:09:08,746 --> 0:09:11,586
以便用户界面风格改变的时候

217
00:09:11,586 --> 0:09:13,306
可以重新生成新的快照 

218
00:09:16,176 --> 0:09:17,956
在某些情况下 你可能不会

219
00:09:17,956 --> 0:09:20,166
有一个目标视图

220
00:09:20,166 --> 0:09:21,746
作为快照 可能是因为

221
00:09:21,746 --> 0:09:23,916
你正在跟另一个设备共享这个视图

222
00:09:25,086 --> 0:09:26,156
在这种情况下 你可以转而

223
00:09:26,156 --> 0:09:27,976
创建一个匹配用户界面风格

224
00:09:28,276 --> 0:09:30,416
的 UITraitCollection

225
00:09:32,356 --> 0:09:33,936
一旦你配置了你的选项

226
00:09:33,936 --> 0:09:35,726
你只用在创建的时候调用

227
00:09:35,726 --> 0:09:36,956
进入你的 snapshotter 路径

228
00:09:37,006 --> 0:09:39,116
然后你告诉

229
00:09:39,116 --> 0:09:41,636
你的 snapshotter 为你创建快照

230
00:09:46,286 --> 0:09:48,486
在你 App 里使用

231
00:09:48,576 --> 0:09:50,816
深色模式的地图就是这么容易

232
00:09:51,366 --> 0:09:53,726
所以 接下来我想讨论一下

233
00:09:53,726 --> 0:09:56,806
一组新的 API 通过它可以让你

234
00:09:56,856 --> 0:09:59,386
在 MapKit 和 MapKit JS 里控制

235
00:09:59,386 --> 0:10:00,796
显示在地图视图中

236
00:09:59,386 --> 0:10:00,796
显示在地图视图中

237
00:10:00,856 --> 0:10:03,976
兴趣点图标

238
00:10:06,126 --> 0:10:07,276
如果你曾经看过我们的地图

239
00:10:07,276 --> 0:10:08,806
你可能已经看到

240
00:10:08,806 --> 0:10:10,296
除去所有的道路 

241
00:10:10,296 --> 0:10:12,456
建筑物 公园和水域

242
00:10:12,746 --> 0:10:14,236
就是这些所有的小图标

243
00:10:14,236 --> 0:10:19,466
代表着餐馆 博物馆 停车场等

244
00:10:20,106 --> 0:10:21,676
这些信息有利于

245
00:10:21,746 --> 0:10:24,126
让用户更好地理解

246
00:10:24,126 --> 0:10:25,516
他们正在看的地方

247
00:10:25,516 --> 0:10:27,046
是什么样的区域

248
00:10:28,296 --> 0:10:30,016
但是例如当你正在构建一个

249
00:10:30,326 --> 0:10:32,596
推广酒店和旅馆的功能

250
00:10:32,596 --> 0:10:36,916
你可能有自己想要在视图里

251
00:10:36,916 --> 0:10:39,526
添加为注释视图的数据

252
00:10:40,376 --> 0:10:41,606
在那种情况下 你可能不会想要显示

253
00:10:41,606 --> 0:10:43,526
这些内置图标 因为它们

254
00:10:43,526 --> 0:10:47,236
要么与你正在添加的信息重复

255
00:10:47,236 --> 0:10:49,476
要么与你服务并不关联

256
00:10:49,476 --> 0:10:52,796
所以你不想显示这些东西

257
00:10:54,466 --> 0:10:56,186
在过去 你唯一的选择

258
00:10:56,186 --> 0:10:58,376
就是关掉所有的

259
00:10:58,376 --> 0:11:00,546
兴趣点图标 

260
00:10:58,376 --> 0:11:00,546
兴趣点图标 

261
00:11:00,546 --> 0:11:03,166
但那就意味着你的用户

262
00:11:03,166 --> 0:11:05,026
丢失了很多有价值的内容

263
00:11:06,066 --> 0:11:07,436
那么你想做的是

264
00:11:07,836 --> 0:11:09,356
基于它们的分类

265
00:11:09,356 --> 0:11:11,086
过滤出那些兴趣图标

266
00:11:13,336 --> 0:11:15,856
那么 MapKit 和 MapKit JS 现在

267
00:11:15,856 --> 0:11:20,036
有了一个当你构建你的 App 时

268
00:11:20,036 --> 0:11:22,026
我们认为你会觉得有用的类别列表

269
00:11:22,526 --> 0:11:26,126
[掌声]

270
00:11:26,626 --> 0:11:28,356
而这显然不是一个

271
00:11:28,356 --> 0:11:29,676
全部包含的清单

272
00:11:29,886 --> 0:11:31,176
所以 如果你看到某一个类别缺失

273
00:11:31,176 --> 0:11:32,946
请在明天来我们的实验室

274
00:11:32,946 --> 0:11:34,886
或发给我们你的反馈

275
00:11:34,886 --> 0:11:37,266
最重要的是

276
00:11:37,266 --> 0:11:39,356
告诉我们你的用例

277
00:11:39,906 --> 0:11:43,576
所以 你可以使用这些分类来创建一个

278
00:11:43,576 --> 0:11:45,846
pointOfInterestFilter

279
00:11:46,396 --> 0:11:47,906
当你创造你的过滤器时

280
00:11:47,906 --> 0:11:49,346
你可以设置它包括某些分类

281
00:11:49,376 --> 0:11:52,426
或者排除某些分类

282
00:11:53,206 --> 0:11:54,066
我们来看看几个

283
00:11:54,066 --> 0:11:55,846
这方面的例子

284
00:11:56,476 --> 0:11:58,506
默认情况下地图视图会执行

285
00:11:58,506 --> 0:12:00,746
不使用任何过滤

286
00:11:58,506 --> 0:12:00,746
不使用任何过滤

287
00:12:00,746 --> 0:12:03,256
所以所有的兴趣点图标都会显示

288
00:12:04,236 --> 0:12:05,926
但就我们而言

289
00:12:05,926 --> 0:12:07,646
我们的目标是酒店和旅店

290
00:12:07,806 --> 0:12:09,556
并且不想显示它们

291
00:12:10,396 --> 0:12:11,576
你可以通过 hotel 类别

292
00:12:11,576 --> 0:12:13,936
创建一个排除过滤

293
00:12:14,136 --> 0:12:15,506
就可以实现这一目标了

294
00:12:16,726 --> 0:12:18,206
这确保不显示酒店或者旅馆

295
00:12:18,206 --> 0:12:19,736
但与此同时其余的信息

296
00:12:19,736 --> 0:12:21,186
是被保留了的

297
00:12:21,816 --> 0:12:23,966
反之 当你知道哪个类别

298
00:12:23,966 --> 0:12:25,866
与你的用例相关 

299
00:12:25,866 --> 0:12:27,756
你可以给这些类别

300
00:12:27,826 --> 0:12:30,626
创建一个包含过滤 

301
00:12:31,426 --> 0:12:33,866
所以 举个例子这个过滤器可以

302
00:12:33,866 --> 0:12:36,366
过滤掉法院和在拐角处的美容和理发店 

303
00:12:36,366 --> 0:12:37,536
只显示所选定的类别的

304
00:12:40,046 --> 0:12:42,216
兴趣点 也就是

305
00:12:42,346 --> 0:12:44,416
饭店 夜生活和 

306
00:12:44,476 --> 0:12:45,816
停车场及咖啡馆

307
00:12:46,346 --> 0:12:48,826
如果你确实想要关闭

308
00:12:48,826 --> 0:12:50,046
所有兴趣点图标

309
00:12:50,046 --> 0:12:52,066
你仍然可以使用一个

310
00:12:52,066 --> 0:12:52,976
排除所有东西的过滤器

311
00:12:56,676 --> 0:12:57,836
Point of Interest Filtering 功能

312
00:12:57,836 --> 0:13:01,046
在今年秋天 

313
00:12:57,836 --> 0:13:01,046
在今年秋天 

314
00:13:01,046 --> 0:13:03,006
也可以用于 MapKit JS

315
00:13:03,006 --> 0:13:04,046
它的工作方式非常类似

316
00:13:04,606 --> 0:13:05,416
我们在 MapKit 对象中添加一个

317
00:13:05,416 --> 0:13:06,976
pointOfInterestFilter

318
00:13:06,976 --> 0:13:09,926
然后你可以创建一个使用 

319
00:13:09,926 --> 0:13:14,426
兴趣点类型作为值的列表的过滤器

320
00:13:15,066 --> 0:13:16,576
一旦你创建了过滤器

321
00:13:16,846 --> 0:13:18,126
你可以把它应用到你的地图上的

322
00:13:18,126 --> 0:13:21,346
pointOfInterestFilter 属性

323
00:13:23,876 --> 0:13:26,236
所以地图视图肯定是

324
00:13:26,236 --> 0:13:29,466
MapKit 和 MapKit JS 最出色的功能

325
00:13:30,236 --> 0:13:31,356
但另一个重要的基石

326
00:13:31,846 --> 0:13:36,606
是支持搜索和自动完成

327
00:13:37,746 --> 0:13:38,856
那么 接下来我要谈谈

328
00:13:38,856 --> 0:13:40,766
你要如何通过过滤功能

329
00:13:40,766 --> 0:13:44,556
来完善搜索和自动完成的结果

330
00:13:45,136 --> 0:13:50,106
伴生 App 在 MapKit 上

331
00:13:50,106 --> 0:13:51,316
针对 After Hours 功能

332
00:13:51,316 --> 0:13:53,206
使用了搜索和自动完成功能

333
00:13:54,316 --> 0:13:56,726
因此 当用户正在输入时

334
00:13:56,726 --> 0:13:58,046
源自 MKLocalSearchCompleter 的

335
00:13:58,046 --> 0:13:59,566
自动建议 -- 自动完成建议

336
00:13:59,906 --> 0:14:01,246
会自动出现

337
00:13:59,906 --> 0:14:01,246
会自动出现

338
00:14:02,636 --> 0:14:04,086
通过 MKLocalSearch 获取的结果

339
00:14:04,086 --> 0:14:06,286
也会显示在地图上

340
00:14:07,396 --> 0:14:09,436
但是当我们退回一步

341
00:14:09,436 --> 0:14:10,796
再回头看看那些建议时

342
00:14:10,796 --> 0:14:12,966
我们意识到在一个功能中

343
00:14:12,966 --> 0:14:14,426
当我们预计我们的用户会用来搜索

344
00:14:14,426 --> 0:14:16,676
酒吧和餐馆的时候

345
00:14:17,226 --> 0:14:20,366
一所中学就不是一个很相关的建议了

346
00:14:21,306 --> 0:14:22,776
幸运的是

347
00:14:22,776 --> 0:14:24,836
我们曾使用过的用来过滤地图视图

348
00:14:24,836 --> 0:14:26,956
的 pointOfInterestFilter 也可以

349
00:14:26,956 --> 0:14:29,666
用于搜索和自动完成

350
00:14:30,236 --> 0:14:33,166
因此 你可以给你的搜索功能

351
00:14:33,166 --> 0:14:35,816
创建一个过滤器

352
00:14:35,816 --> 0:14:37,016
并且把它应用到你的

353
00:14:37,016 --> 0:14:39,546
MKLocalSearhCompleter 中

354
00:14:39,546 --> 0:14:41,216
和你的 MKLocalSearch.Request

355
00:14:42,416 --> 0:14:43,526
这将会使你的搜索结果范围

356
00:14:43,526 --> 0:14:45,566
缩小到一个更加相关的集合

357
00:14:46,206 --> 0:14:49,066
但在此列表中

358
00:14:49,116 --> 0:14:50,066
仍有地址显示出来

359
00:14:50,516 --> 0:14:52,316
这是因为兴趣点通常

360
00:14:52,316 --> 0:14:55,936
代表着地标性建筑或企业

361
00:14:55,936 --> 0:14:58,396
而这些地址却明显不是这样

362
00:14:59,426 --> 0:15:00,626
所以要进一步优化列表中的结果

363
00:14:59,426 --> 0:15:00,626
所以要进一步优化列表中的结果

364
00:15:00,626 --> 0:15:03,826
我们想要搜索和自动完成的结果

365
00:15:03,826 --> 0:15:06,576
集中在兴趣点上面

366
00:15:07,276 --> 0:15:10,756
到目前为止 MapKit 只支持

367
00:15:10,756 --> 0:15:12,776
在 MKLocalSearchCompleter 中的

368
00:15:12,826 --> 0:15:14,656
结果类型过滤

369
00:15:15,526 --> 0:15:18,116
你可以通过 filterType 属性完成这个

370
00:15:19,466 --> 0:15:21,566
但只是这个值 位置

371
00:15:21,736 --> 0:15:24,926
仍然意味着你会同时得到地址和兴趣点

372
00:15:24,926 --> 0:15:27,396
这还不够帮助我们解决这个情况

373
00:15:28,146 --> 0:15:30,186
所以为了解决这个

374
00:15:30,186 --> 0:15:32,196
我们引入了两个新的选项集合

375
00:15:32,346 --> 0:15:33,516
它们叫做 ResultType

376
00:15:34,546 --> 0:15:36,946
并且你使用这些选项集来配置

377
00:15:36,946 --> 0:15:38,406
你想从搜索和自动完成中

378
00:15:38,406 --> 0:15:41,556
得到结果的类型

379
00:15:42,156 --> 0:15:47,396
所以这个 MKLocalSearchCompleter 的选项集

380
00:15:47,396 --> 0:15:49,146
可以任意组合

381
00:15:49,206 --> 0:15:50,876
你想要的地址或者

382
00:15:50,876 --> 0:15:52,686
兴趣点和询问

383
00:15:52,976 --> 0:15:57,466
MKLocalSearch.Request 可以让你在

384
00:15:57,466 --> 0:15:59,356
地址和兴趣点中选择

385
00:15:59,866 --> 0:16:02,706
所以你现在可以轻松地

386
00:15:59,866 --> 0:16:02,706
所以你现在可以轻松地

387
00:16:02,706 --> 0:16:05,746
配置你的 completer 和你的 request

388
00:16:05,746 --> 0:16:07,976
只用来请求兴趣点的结果

389
00:16:11,086 --> 0:16:12,956
你从 MKLocalSearch 得到的结果

390
00:16:12,956 --> 0:16:17,806
是一系列 MKMapItems

391
00:16:18,646 --> 0:16:20,096
MapItems 包含很多比如

392
00:16:20,096 --> 0:16:21,856
搜索结果的位置坐标

393
00:16:21,856 --> 0:16:24,876
和地址的有用的信息

394
00:16:25,136 --> 0:16:26,326
在某些情况下 这个地方也可以

395
00:16:26,326 --> 0:16:27,766
有一个名字 一个电话号码

396
00:16:27,766 --> 0:16:29,586
甚至是一个 URL

397
00:16:31,006 --> 0:16:32,546
为了让你更轻松地梳理你要找的结果类型

398
00:16:32,546 --> 0:16:35,846
我们添加了一个新的属性

399
00:16:35,846 --> 0:16:38,916
它叫做兴趣点类型

400
00:16:40,316 --> 0:16:42,756
所以 如果你搜索 ABC

401
00:16:42,756 --> 0:16:45,776
如果你搜索 ABC

402
00:16:45,776 --> 0:16:49,266
你可能会得到结果是 

403
00:16:49,416 --> 0:16:51,446
举个例子 可能会是

404
00:16:51,616 --> 0:16:52,216
Al's Beet Canteen 和 ABC Brewing

405
00:16:53,166 --> 0:16:55,476
如果你检查一下这些结果的兴趣点类型 

406
00:16:55,476 --> 0:16:57,126
你会看到它们的分类分别是

407
00:16:57,126 --> 0:16:59,806
饭店和啤酒厂

408
00:17:00,996 --> 0:17:03,666
如果你应用一个啤酒厂类的

409
00:17:03,666 --> 0:17:05,086
包含过滤器

410
00:17:05,086 --> 0:17:08,685
Al's Beet Canteen 将不会再出现

411
00:17:08,976 --> 0:17:12,316
尽管如此 ABC Brewing 也可以作为一个

412
00:17:12,346 --> 0:17:16,316
饭店在运营 这就意味着

413
00:17:16,316 --> 0:17:18,516
当我们应用一个饭店类型

414
00:17:18,516 --> 0:17:20,646
的包含过滤器

415
00:17:20,646 --> 0:17:22,955
我们可能仍旧在我们的搜索结果里看见

416
00:17:22,955 --> 0:17:23,776
ABC Brewing 

417
00:17:24,746 --> 0:17:25,726
当我们检查兴趣点类型

418
00:17:25,726 --> 0:17:27,596
它仍旧将会作为一个啤酒厂出现

419
00:17:27,596 --> 0:17:29,706
因为 ABC breweries -- brewery 就作为

420
00:17:29,706 --> 0:17:32,856
ABC Brewing 的初级的分类

421
00:17:35,356 --> 0:17:36,826
同样的 在这个秋天

422
00:17:36,826 --> 0:17:38,686
搜索和自动过滤支持

423
00:17:38,686 --> 0:17:40,596
也将会出现 MapKit JS 里

424
00:17:41,336 --> 0:17:43,106
你应用你的 pointOfInterest filter 

425
00:17:43,106 --> 0:17:44,586
直接作用在搜索物体上

426
00:17:44,586 --> 0:17:47,496
来过滤兴趣点

427
00:17:48,616 --> 0:17:50,246
你也使用新的属性 

428
00:17:50,246 --> 0:17:51,926
includeAddresses 

429
00:17:51,926 --> 0:17:53,066
includePointOfInterest

430
00:17:53,176 --> 0:17:54,406
和 includeQueries

431
00:17:54,526 --> 0:17:56,356
用于搜索的物体上

432
00:17:56,356 --> 0:17:59,246
来缩小你所得到的结果类型

433
00:17:59,756 --> 0:18:03,106
好吧 到这里 我把话筒交给

434
00:17:59,756 --> 0:18:03,106
好吧 到这里 我把话筒交给

435
00:18:03,106 --> 0:18:04,816
我的同事 Nalini 

436
00:18:04,816 --> 0:18:06,426
她将告诉你如何快速和简单地

437
00:18:06,426 --> 0:18:08,166
通过新的 API

438
00:18:08,166 --> 0:18:10,516
来提高你搜索结果的相关性

439
00:18:11,516 --> 0:18:16,546
[掌声]

440
00:18:17,046 --> 0:18:17,936
&gt;&gt; 谢谢你 Alexander

441
00:18:18,676 --> 0:18:20,116
大家好 我是 Nalini 我是一名

442
00:18:20,116 --> 0:18:22,006
MapKit 框架团队中的软件工程师

443
00:18:22,506 --> 0:18:24,256
Alexander 已经展示了 

444
00:18:24,256 --> 0:18:25,776
我们将会在整个会议过程构建的

445
00:18:25,776 --> 0:18:26,956
WWDC 伴生 App 

446
00:18:27,606 --> 0:18:29,146
我们已经有了一个版本的 App 

447
00:18:29,146 --> 0:18:30,806
它可以使用一些功能

448
00:18:30,806 --> 0:18:33,196
但还不是那么完善

449
00:18:33,606 --> 0:18:34,956
让我来给你展示一下

450
00:18:35,456 --> 0:18:36,426
在这里 我们正在看的是

451
00:18:36,426 --> 0:18:38,026
After Hours 功能 在这里我们会

452
00:18:38,026 --> 0:18:39,756
探索 San Jose 附近的地方

453
00:18:40,996 --> 0:18:43,096
我们的地图视图有一个搜索栏

454
00:18:43,576 --> 0:18:44,496
这个搜索栏稍后会通过

455
00:18:44,496 --> 0:18:46,456
MKLocalSearchCompleter 和

456
00:18:46,456 --> 0:18:48,966
MKLocalSearch 来搜索 Apple Maps

457
00:18:49,776 --> 0:18:52,586
自 iOS 9.3 起 此功能就已经存在了

458
00:18:52,626 --> 0:18:54,946
让我们继续搜索一些东西吧

459
00:18:59,226 --> 0:19:02,306
在我打字的时候 我们看到了自动填充的建议

460
00:18:59,226 --> 0:19:02,306
在我打字的时候 我们看到了自动填充的建议

461
00:19:02,656 --> 0:19:04,246
作为参加会议的人

462
00:19:04,246 --> 0:19:05,956
我们对其中一些结果

463
00:19:05,956 --> 0:19:07,856
并不是很感兴趣

464
00:19:08,986 --> 0:19:10,956
让我们继续并且进行一次搜索

465
00:19:13,686 --> 0:19:15,706
我们观察到类似的体验

466
00:19:16,066 --> 0:19:17,956
我们得到的结果并不

467
00:19:17,986 --> 0:19:19,416
与我们的用例相关

468
00:19:20,026 --> 0:19:22,016
让我们看看如何通过

469
00:19:22,016 --> 0:19:23,396
pointOfInterestFilter 和结果类型 API

470
00:19:23,396 --> 0:19:25,976
来改进这样的体验

471
00:19:28,576 --> 0:19:30,096
这里我们正在看的是

472
00:19:30,096 --> 0:19:31,396
设置自动填充和搜索的

473
00:19:31,396 --> 0:19:33,146
After Hours 视图控制器

474
00:19:34,126 --> 0:19:34,766
我们将调出一个用来

475
00:19:34,766 --> 0:19:38,316
兼顾自动填充和搜索的

476
00:19:38,546 --> 0:19:42,086
pointOfInterestFilter

477
00:19:42,706 --> 0:19:44,116
我们感兴趣的类型是

478
00:19:44,116 --> 0:19:46,536
夜生活和饭店

479
00:19:46,826 --> 0:19:47,926
对于我们的用例而言

480
00:19:49,186 --> 0:19:51,326
我们将把 pointOfInterestFilter 应用到

481
00:19:51,326 --> 0:19:51,976
searchCompleter 里

482
00:19:58,706 --> 0:20:00,396
对于我们的用例来说

483
00:19:58,706 --> 0:20:00,396
对于我们的用例来说

484
00:20:00,396 --> 0:20:01,316
地址结果并不是相关

485
00:20:01,726 --> 0:20:03,556
我们将结果类型限制为

486
00:20:03,556 --> 0:20:04,506
pointOfInterest

487
00:20:08,356 --> 0:20:11,556
我们刚刚做的改变会影响到自动填充

488
00:20:12,126 --> 0:20:14,026
让我们看看是如何应用相同

489
00:20:14,026 --> 0:20:16,906
过滤来搜索的

490
00:20:17,106 --> 0:20:19,216
当用户操作搜索时

491
00:20:19,216 --> 0:20:20,536
我们形成一个本地搜索请求

492
00:20:21,326 --> 0:20:23,626
我们将把 pointOfInterestFilter 应用在

493
00:20:23,626 --> 0:20:24,946
搜索请求里

494
00:20:28,056 --> 0:20:29,976
我们将结果类型限制为 pointOfInterest

495
00:20:35,276 --> 0:20:36,346
现在我们有

496
00:20:36,346 --> 0:20:38,186
pointOfInterestFilter 和结果类型

497
00:20:38,186 --> 0:20:39,816
同时应用于自动填充和搜索

498
00:20:39,816 --> 0:20:42,976
让我们运行一下我们的 App 吧

499
00:20:48,616 --> 0:20:49,956
看一下 After Hours 功能

500
00:20:49,956 --> 0:20:51,396
我们会继续并且搜索

501
00:20:51,396 --> 0:20:52,626
相同的源字符串

502
00:20:53,236 --> 0:20:57,366
如你所见 我们得到的结果

503
00:20:57,366 --> 0:20:58,826
与我们的用例相关

504
00:21:01,596 --> 0:21:03,326
当我们发出搜索时

505
00:21:03,326 --> 0:21:05,126
我们也得到相关的结果

506
00:21:05,126 --> 0:21:07,256
且它在地图视图上显示为注释

507
00:21:07,936 --> 0:21:09,686
我们刚看到如何通过

508
00:21:09,686 --> 0:21:11,106
pointOfInterestFilter 和结果类型 API

509
00:21:11,106 --> 0:21:15,396
改进自动填充和搜索体验的

510
00:21:15,606 --> 0:21:17,526
先说到这里 我要把话筒还给 Alexander 了

511
00:21:18,516 --> 0:21:20,586
[掌声]

512
00:21:21,086 --> 0:21:25,656
&gt;&gt; 好的 这就是如何通过五行代码

513
00:21:25,706 --> 0:21:27,476
来摆脱所有那些

514
00:21:27,476 --> 0:21:28,676
不相关的搜索结果

515
00:21:28,886 --> 0:21:30,786
所以当你现在正在你的 App 里

516
00:21:30,786 --> 0:21:31,976
使用搜索和自动填充

517
00:21:31,976 --> 0:21:33,696
我强烈建议你

518
00:21:33,696 --> 0:21:35,396
来试一下这些新的 API

519
00:21:35,856 --> 0:21:38,436
这就是我们今天要提到的

520
00:21:38,436 --> 0:21:43,156
关于搜索和自动填充功能的过滤方法

521
00:21:43,666 --> 0:21:44,996
接下来我想告诉你

522
00:21:44,996 --> 0:21:46,456
一些我们在 MapKit 里对我们的

523
00:21:46,456 --> 0:21:49,346
叠加层 API 做出的非常好的改进 

524
00:21:50,386 --> 0:21:52,246
叠加层是用来对你的自定义内容

525
00:21:52,496 --> 0:21:54,766
在你的地图视图里

526
00:21:54,766 --> 0:21:56,706
在一个更宽泛的范围内进行分层

527
00:21:56,706 --> 0:21:58,406
并且它们一般用几何形状代表

528
00:21:58,406 --> 0:22:00,976
例如线条或多边形

529
00:21:58,406 --> 0:22:00,976
例如线条或多边形

530
00:22:01,526 --> 0:22:03,166
要给你展示这些改进

531
00:22:03,166 --> 0:22:04,236
我们将在伴生 App 上

532
00:22:04,236 --> 0:22:07,096
快速浏览一下事件视图功能

533
00:22:08,426 --> 0:22:10,846
所以针对该功能 我们想在地图视图上

534
00:22:10,876 --> 0:22:13,556
渲染这个简单的事件地图

535
00:22:14,796 --> 0:22:16,466
我们将使用叠加层来代表

536
00:22:16,466 --> 0:22:18,256
食物和饮料

537
00:22:18,256 --> 0:22:19,876
帐篷和舞台

538
00:22:20,476 --> 0:22:21,826
就像这些 - 它们都是矩形的形状

539
00:22:21,826 --> 0:22:25,866
我们可以使用 MKPolygons 对它们进行建模

540
00:22:26,756 --> 0:22:28,736
所以因为这张地图很简单

541
00:22:28,736 --> 0:22:29,736
而且我们剩的时间有点少

542
00:22:29,736 --> 0:22:31,566
在这部分 我们将通过完全一样的方式

543
00:22:31,566 --> 0:22:32,346
为它们设计风格

544
00:22:33,346 --> 0:22:35,256
但对于添加到你的地图视图里的

545
00:22:35,256 --> 0:22:37,056
每一个叠加层

546
00:22:37,056 --> 0:22:41,756
你需要用你的委托方法提供一个渲染对象

547
00:22:42,066 --> 0:22:43,896
如果你要添加很多

548
00:22:44,036 --> 0:22:45,666
像这样的类似风格的叠加层

549
00:22:45,696 --> 0:22:47,586
这就意味着你将创建

550
00:22:47,586 --> 0:22:49,586
大量以一样方法配置的渲染物体

551
00:22:49,586 --> 0:22:52,676
这样就有点太浪费了

552
00:22:53,566 --> 0:22:55,926
很显然 添加七个叠加层

553
00:22:55,926 --> 0:22:57,486
并不会在你的 App 里

554
00:22:57,486 --> 0:22:59,766
产生更显著提高的性能影响

555
00:23:00,066 --> 0:23:01,856
但当你添加

556
00:23:02,296 --> 0:23:04,106
大量的叠加层时

557
00:23:04,736 --> 0:23:05,876
你真的可以观察到

558
00:23:05,876 --> 0:23:08,776
这对性能有影响

559
00:23:08,976 --> 0:23:10,166
所以为了解决这个问题

560
00:23:10,166 --> 0:23:12,446
我们在 MapKit 里引入了一些新的类别

561
00:23:12,776 --> 0:23:14,186
有两个新的叠加层类别

562
00:23:14,186 --> 0:23:17,346
MKMultiPolygon 和 MKMultiPolyline

563
00:23:17,376 --> 0:23:19,896
你可以用来分别

564
00:23:19,896 --> 0:23:22,946
对多边形和折线分组

565
00:23:22,946 --> 0:23:26,716
正如我之前所说

566
00:23:26,716 --> 0:23:28,046
每当你添加一个叠加层

567
00:23:28,046 --> 0:23:29,666
你需要提供一个渲染的对象

568
00:23:30,116 --> 0:23:31,376
所以我们介绍了两个

569
00:23:31,376 --> 0:23:32,896
新的匹配渲染级

570
00:23:33,276 --> 0:23:35,636
MKMultiPolygonRenderer 和

571
00:23:35,636 --> 0:23:37,346
MKMultiPolylineRenderer

572
00:23:38,756 --> 0:23:40,296
使用这些级 你可以大大减少

573
00:23:40,296 --> 0:23:43,396
所需渲染的对象的数量

574
00:23:43,396 --> 0:23:44,586
也减少了需要在 App 里创建对象数量

575
00:23:44,876 --> 0:23:46,506
并且因此改进了性能

576
00:23:47,366 --> 0:23:48,986
那么让我们看一个简单的例子

577
00:23:50,446 --> 0:23:51,746
所以我们在这里使用以上的舞台坐标

578
00:23:51,746 --> 0:23:54,926
把舞台设置为多边形

579
00:23:55,446 --> 0:23:56,796
在创造出所有其他多边形后

580
00:23:56,796 --> 0:23:58,126
我们直接将它们

581
00:23:58,126 --> 0:24:00,106
添加到地图视图上面

582
00:23:58,126 --> 0:24:00,106
添加到地图视图上面

583
00:24:00,266 --> 0:24:02,276
但这意味着 就像我之前说的那样

584
00:24:02,276 --> 0:24:03,516
要创建七个渲染对象

585
00:24:03,516 --> 0:24:05,576
委托会被询问

586
00:24:06,306 --> 0:24:07,796
所以你可以做的是

587
00:24:07,796 --> 0:24:09,456
将所有这些多边形

588
00:24:09,506 --> 0:24:11,016
分组到 MKMultiPolygon

589
00:24:11,016 --> 0:24:13,606
然后简单地把 MultiPolygon

590
00:24:13,606 --> 0:24:17,846
添加到你的地图视图上

591
00:24:18,046 --> 0:24:19,246
一旦你更新了你的代码

592
00:24:19,246 --> 0:24:21,136
来添加了 MultiPolygons 之后

593
00:24:21,426 --> 0:24:24,636
你还需要更新你的委托方式

594
00:24:24,916 --> 0:24:25,936
来调用 MultiPolygons

595
00:24:26,646 --> 0:24:27,956
获得之后你需要创建一个

596
00:24:27,956 --> 0:24:31,096
MKMultiPolygonRenderer 对象

597
00:24:31,596 --> 0:24:32,766
这和之前的的 MKPolygonRenderer 

598
00:24:32,766 --> 0:24:35,536
完成方法完全一样

599
00:24:36,026 --> 0:24:39,426
除了通过创建更少的渲染的对象

600
00:24:39,426 --> 0:24:41,256
节省了内存空间

601
00:24:41,256 --> 0:24:43,026
这也改善了渲染性能

602
00:24:43,026 --> 0:24:46,086
因为 MapKit 现在变得更智能了

603
00:24:46,086 --> 0:24:47,916
并且可以批量为你

604
00:24:47,916 --> 0:24:49,426
渲染这些多边形

605
00:24:50,946 --> 0:24:52,506
我们取得了另一项改进是

606
00:24:52,696 --> 0:24:54,526
现在 MapKit 可以

607
00:24:54,526 --> 0:24:56,536
通过内置的 MapKit 渲染

608
00:24:57,296 --> 0:25:01,056
自动渲染所有你创建的叠加层 

609
00:24:57,296 --> 0:25:01,056
自动渲染所有你创建的叠加层 

610
00:25:01,056 --> 0:25:04,576
是作为矢量图形来渲染 而不是位图

611
00:25:05,126 --> 0:25:07,546
而且当用户与地图发生交互时

612
00:25:07,546 --> 0:25:08,906
矢量渲染大大改善你的叠加层的外观

613
00:25:08,906 --> 0:25:13,196
因为在用户放大和缩小

614
00:25:13,196 --> 0:25:15,046
地图视图的时候

615
00:25:15,046 --> 0:25:17,456
它们的尺寸更加完美

616
00:25:18,426 --> 0:25:21,306
当你在添加非常大和复杂的叠加层时

617
00:25:21,306 --> 0:25:22,666
由于某些原因

618
00:25:22,666 --> 0:25:24,266
在渲染为矢量图形的时候

619
00:25:24,266 --> 0:25:25,716
它们看起来不太对劲

620
00:25:25,716 --> 0:25:27,886
你可以选择退出

621
00:25:27,886 --> 0:25:30,256
矢量渲染 转而使用

622
00:25:30,256 --> 0:25:32,616
在渲染器里的 shouldRasterize 功能

623
00:25:33,206 --> 0:25:36,726
这就是你如何在 MapKit 中

624
00:25:36,726 --> 0:25:37,976
使用新的叠加层 API

625
00:25:38,516 --> 0:25:43,526
[掌声]

626
00:25:44,026 --> 0:25:44,916
所以我想要的做的下一件事

627
00:25:44,916 --> 0:25:46,766
是说一下 MapKit 

628
00:25:46,766 --> 0:25:48,216
对 GeoJSON 的新支持

629
00:25:49,096 --> 0:25:52,066
GeoJSON 是一种广泛使用的用于表示

630
00:25:52,066 --> 0:25:54,406
几何对象 比如点 线条和多边形

631
00:25:54,406 --> 0:25:57,906
的存储和有线型格式

632
00:25:58,576 --> 0:26:00,246
许多供应商都会发布

633
00:25:58,576 --> 0:26:00,246
许多供应商都会发布

634
00:26:00,246 --> 0:26:02,136
GeoJSON 形式的数据

635
00:26:02,566 --> 0:26:05,496
所以你们之中有些人可能已经有了

636
00:26:05,496 --> 0:26:08,556
用于解析 GeoJSON 创建注释

637
00:26:08,556 --> 0:26:09,876
和添加在你的地图视图的

638
00:26:10,106 --> 0:26:11,226
叠加层的代码 

639
00:26:11,626 --> 0:26:13,606
所以使用这些新的 API 

640
00:26:13,606 --> 0:26:15,866
我们希望操作 GeoJSON

641
00:26:15,866 --> 0:26:17,606
与之前相比会变得简单

642
00:26:17,606 --> 0:26:18,946
然后也许你甚至可以删除一些

643
00:26:18,946 --> 0:26:19,976
你们已经编写好的代码

644
00:26:20,516 --> 0:26:24,166
[掌声]

645
00:26:24,666 --> 0:26:26,046
对于那些对 GeoJSON 不是很熟悉的人

646
00:26:26,046 --> 0:26:30,006
这里是一个可以表示位置的

647
00:26:30,006 --> 0:26:31,786
很简单的示范例子

648
00:26:32,166 --> 0:26:35,096
在最上面一行是类型  

649
00:26:35,456 --> 0:26:37,176
让我们知道它的分类是一个特性

650
00:26:37,176 --> 0:26:40,416
这个特性有一个可选的标识符

651
00:26:40,456 --> 0:26:43,796
你可以用它来从其他很多分类中

652
00:26:43,796 --> 0:26:46,116
只标识出这个对应的特性

653
00:26:46,636 --> 0:26:49,926
这个特性可以被定义成

654
00:26:49,926 --> 0:26:52,756
一个单独的几何 一个点 

655
00:26:52,756 --> 0:26:54,666
但特性也可以同时拥有多个几何形状

656
00:26:55,416 --> 0:26:57,406
除了几何外

657
00:26:57,806 --> 0:26:59,496
还会有几个属性成员

658
00:26:59,946 --> 0:27:01,376
在这种情况下

659
00:26:59,946 --> 0:27:01,376
在这种情况下

660
00:27:01,376 --> 0:27:03,896
包含这个位置的名称和状态

661
00:27:04,906 --> 0:27:07,816
所以要在 MapKits 里表示这个特性 

662
00:27:07,816 --> 0:27:11,116
我们引入了一个新的级叫做

663
00:27:11,116 --> 0:27:12,216
MKGeoJSONFeature

664
00:27:13,176 --> 0:27:14,606
而这个级只是一个包含了

665
00:27:14,606 --> 0:27:15,756
标识符 被解码了的几何

666
00:27:15,756 --> 0:27:20,696
和属性的数据容器

667
00:27:22,036 --> 0:27:25,526
所以要将你的 GeoJSON 应用到

668
00:27:25,656 --> 0:27:27,296
实际的 MapKit 分类里 

669
00:27:27,296 --> 0:27:29,446
我们引入了另一个级 

670
00:27:29,446 --> 0:27:30,846
叫做 MKGeoJSONDecoder

671
00:27:31,546 --> 0:27:34,066
如果你曾经使用过 Swift 的 JSON 解码器

672
00:27:34,066 --> 0:27:36,646
MKGeoJSONDecoder 应该

673
00:27:36,646 --> 0:27:37,906
会让你觉得很熟悉

674
00:27:38,976 --> 0:27:40,556
你只需创建一个你的解码器

675
00:27:41,266 --> 0:27:43,436
你传递你的数据

676
00:27:43,436 --> 0:27:45,396
然后它将返回一个数组 这个数组来自

677
00:27:45,396 --> 0:27:51,656
MKGeoJSONFeatures 或者 MapKit 的几何

678
00:27:51,736 --> 0:27:56,236
比如 MKPolygon 或者 MKPolylines 等等

679
00:27:56,936 --> 0:27:58,366
这取决于你如何构造你的 GeoJSON

680
00:27:58,366 --> 0:28:00,016
因为你可以在你的

681
00:27:58,366 --> 0:28:00,016
因为你可以在你的

682
00:28:00,016 --> 0:28:03,706
第一行设置特性

683
00:28:03,706 --> 0:28:05,276
或者在 GeoJSON 首行设置几何

684
00:28:05,276 --> 0:28:08,346
所以 如果你看看

685
00:28:08,346 --> 0:28:10,436
这个之前的例子里 GeoJSON 是如何

686
00:28:10,436 --> 0:28:14,576
通过使用 MKGeoJSONDecoder 被解码的

687
00:28:14,576 --> 0:28:16,156
我们可以做到 因为这有一个单独的特性

688
00:28:16,156 --> 0:28:18,606
我们的结果行

689
00:28:18,606 --> 0:28:19,816
也只会有一个项目

690
00:28:20,656 --> 0:28:22,556
但解码器也将几何

691
00:28:22,556 --> 0:28:24,876
解码到 MapKit 级

692
00:28:25,146 --> 0:28:28,086
所以这里的点的位置

693
00:28:28,086 --> 0:28:32,126
会被解码为 MKPointAnnotation

694
00:28:32,126 --> 0:28:33,536
然后这个特性会被解码成

695
00:28:33,536 --> 0:28:36,136
一个引用至

696
00:28:36,136 --> 0:28:37,976
MKPointAnnotation 的 MKGeoJSONFeature 

697
00:28:40,556 --> 0:28:41,896
所以我之前对

698
00:28:41,976 --> 0:28:44,206
MKMultiPolygon 和 MultiPolyline

699
00:28:44,206 --> 0:28:45,466
的介绍讲解

700
00:28:46,026 --> 0:28:47,486
MapKit 现在有了一个完整的

701
00:28:47,486 --> 0:28:49,566
从 GeoJSON 几何

702
00:28:49,946 --> 0:28:51,086
到 MapKit 级的完整制图

703
00:28:51,916 --> 0:28:53,156
这意味着一旦

704
00:28:53,156 --> 0:28:55,266
你已经解码了你的 GeoJSON

705
00:28:55,266 --> 0:28:56,886
你就有了或多或少的准备

706
00:28:56,886 --> 0:28:58,206
被添加到你的地图视图中

707
00:28:58,206 --> 0:28:59,946
的注释和叠加层

708
00:29:00,786 --> 0:29:04,506
那么让我们看一个简单的示例

709
00:29:04,686 --> 0:29:05,996
首先 你创建你的解码器

710
00:29:07,126 --> 0:29:08,166
然后你传递你的数据

711
00:29:08,866 --> 0:29:11,156
正如我所说 如何操作

712
00:29:11,156 --> 0:29:12,716
完全取决于你的 GeoJSON 是如何被构建的

713
00:29:12,716 --> 0:29:14,206
你要么可以将你的代码首行

714
00:29:14,206 --> 0:29:17,926
设置成特性 那么几何

715
00:29:18,476 --> 0:29:20,436
如果你还要做一个额外的特性解析

716
00:29:20,436 --> 0:29:23,096
你可以使用几何属性

717
00:29:23,626 --> 0:29:27,376
来得到使用那些多边形和折线的访问权限

718
00:29:28,216 --> 0:29:29,526
在我们的例子中 我们已经知道了

719
00:29:29,526 --> 0:29:31,486
GeoJSON 将只会有一个特性

720
00:29:31,486 --> 0:29:34,236
和一个点几何

721
00:29:34,236 --> 0:29:36,356
所以这段代码做了一些假设

722
00:29:37,726 --> 0:29:38,896
在大多数情况下

723
00:29:38,896 --> 0:29:40,336
你也可以让你的这部分代码同时

724
00:29:40,336 --> 0:29:44,466
参考 MKPolygons MultiPolylines 等等 

725
00:29:45,036 --> 0:29:48,366
在 GeoJSON 规范中

726
00:29:48,696 --> 0:29:51,726
这个 properties 成员可以是

727
00:29:51,726 --> 0:29:53,396
任何有效的 JSON 甚至空白

728
00:29:53,746 --> 0:29:55,596
这意味着 MapKit

729
00:29:55,636 --> 0:29:56,766
无法对如何解析这个数据

730
00:29:56,766 --> 0:29:59,226
做出做出任何假设

731
00:30:00,436 --> 0:30:03,296
所以 MKGeoJSONFeature 展示了它

732
00:30:03,346 --> 0:30:05,296
属性为一个数据类型

733
00:30:06,436 --> 0:30:08,396
所以 如果你知道你的属性结构

734
00:30:08,396 --> 0:30:11,396
你可以使用 JSON 解码器

735
00:30:11,396 --> 0:30:15,426
来将数据映射到

736
00:30:15,426 --> 0:30:16,746
一个合适的模型级中

737
00:30:17,546 --> 0:30:18,696
在我们的例子中 我们知道了

738
00:30:18,696 --> 0:30:19,976
这个属性包含了一个

739
00:30:19,976 --> 0:30:20,926
字符串到字符串的映射

740
00:30:21,606 --> 0:30:23,016
所以我们将它简单地归类到一个

741
00:30:23,016 --> 0:30:24,506
dictionary 这样的话

742
00:30:24,506 --> 0:30:26,116
我们可以通过 name 密钥值

743
00:30:26,116 --> 0:30:27,316
来进行读取

744
00:30:27,866 --> 0:30:30,586
但在某些情况下

745
00:30:30,586 --> 0:30:32,736
你可能不一定能够掌控你的 GeoJSON

746
00:30:32,736 --> 0:30:33,896
你可能并不知道

747
00:30:33,896 --> 0:30:35,776
你的属性的实际结构

748
00:30:36,276 --> 0:30:37,636
在这种情况下 你可以改为使用

749
00:30:37,706 --> 0:30:39,836
JSON 串行化 API

750
00:30:40,506 --> 0:30:43,976
来基于属性类型进行动态探索

751
00:30:48,296 --> 0:30:49,936
那么 MapKit JS 呢

752
00:30:50,196 --> 0:30:51,566
我们实际上已经支持

753
00:30:51,686 --> 0:30:53,936
在 MapKit JS 里使用 GeoJSON 

754
00:30:54,436 --> 0:30:56,776
所以你可以用你的 GeoJSON 构建

755
00:30:56,776 --> 0:30:59,496
一个已经存在的 MapKit JS 物体

756
00:30:59,496 --> 0:31:01,456
例如作为注释 叠层和

757
00:30:59,496 --> 0:31:01,456
例如作为注释 叠层和

758
00:31:01,456 --> 0:31:02,506
ItemCollections

759
00:31:02,896 --> 0:31:05,546
让我们快速的看一个这样的例子吧

760
00:31:06,026 --> 0:31:08,406
所以你只需对 MapKit 对象

761
00:31:08,406 --> 0:31:11,466
使用输入 GeoJSON 函数

762
00:31:11,466 --> 0:31:13,106
传递一个 URL

763
00:31:13,106 --> 0:31:13,846
或者一个有效的 GeoJSON 对象

764
00:31:14,916 --> 0:31:16,766
这个函数会反馈一个项目集合

765
00:31:16,766 --> 0:31:20,656
包含了一个或多个 MapKit JS 对象

766
00:31:21,316 --> 0:31:22,756
然后你可以轻松

767
00:31:22,756 --> 0:31:25,276
使用添加项目或者展示项目

768
00:31:25,276 --> 0:31:26,756
添加内容到你的地图对象中

769
00:31:28,646 --> 0:31:30,736
好的 我现在把话题

770
00:31:30,736 --> 0:31:32,256
再次交还给 Nalini 

771
00:31:32,366 --> 0:31:33,396
而现在她将向我们展示

772
00:31:33,396 --> 0:31:35,596
你能如何在地图视图中

773
00:31:35,736 --> 0:31:36,826
实现该事件地图的渲染

774
00:31:37,516 --> 0:31:41,500
[掌声]

775
00:31:44,896 --> 0:31:46,286
&gt;&gt; 让我们继续构建这个

776
00:31:46,286 --> 0:31:47,776
WWDC 伴生 App

777
00:31:48,566 --> 0:31:49,566
我们在这里看看

778
00:31:49,566 --> 0:31:50,896
Concert in The Park 功能

779
00:31:51,326 --> 0:31:52,626
在这里我们有一个设置为

780
00:31:52,626 --> 0:31:53,716
音乐会的区域的地图

781
00:31:54,656 --> 0:31:56,076
哪个音乐会在没有食物和饮料的情况下

782
00:31:56,076 --> 0:31:57,186
是完整的呢

783
00:31:57,576 --> 0:31:59,796
所以我们需要这些食物和饮料的帐篷

784
00:32:00,026 --> 0:32:01,816
我们将在地图视图上将这些帐篷

785
00:32:02,016 --> 0:32:04,276
作为叠加层和注释来渲染

786
00:32:04,886 --> 0:32:07,606
我们的数据以 GeoJSON 格式提供

787
00:32:07,916 --> 0:32:08,936
让我们快速浏览一下这些数据

788
00:32:14,316 --> 0:32:16,076
在我们的 JSON 中 我们有两个特性

789
00:32:16,696 --> 0:32:19,226
第一行被分组为特性集合

790
00:32:19,466 --> 0:32:21,796
我们的第一个特性就是事件帐篷

791
00:32:21,796 --> 0:32:24,126
我们将渲染许多帐篷

792
00:32:24,286 --> 0:32:26,296
这意味着我们有更多的食品和饮料可以选择

793
00:32:27,156 --> 0:32:29,826
我们的帐篷的几何是 MultiPolygon

794
00:32:30,886 --> 0:32:33,276
这些是不同帐篷的坐标

795
00:32:33,996 --> 0:32:35,646
我们将在地图视图上

796
00:32:35,646 --> 0:32:37,246
使用这些数据来渲染叠加层

797
00:32:37,426 --> 0:32:39,726
它们将代表帐篷的边界

798
00:32:40,256 --> 0:32:43,406
我们的第二个特性是点

799
00:32:43,906 --> 0:32:47,166
它描述了各种食品和饮料帐篷的名字

800
00:32:48,036 --> 0:32:49,756
我们将在地图视图上

801
00:32:49,756 --> 0:32:51,256
使用这些数据渲染注释

802
00:32:51,256 --> 0:32:54,156
这将代表帐篷的标签

803
00:32:55,086 --> 0:32:57,136
让我们看看在代码里

804
00:32:57,136 --> 0:32:57,976
如何解析这两个特性

805
00:33:02,216 --> 0:33:03,096
在这里我们正在看的是事件数据源

806
00:33:03,096 --> 0:33:05,176
我们将加载 JSON

807
00:33:05,176 --> 0:33:07,286
然后进行解析

808
00:33:07,846 --> 0:33:08,976
让我们继续先操作载入 JSON 吧

809
00:33:12,176 --> 0:33:15,426
当加载了 JSON 后 我们会

810
00:33:15,476 --> 0:33:17,326
使用 MKGeoJSONDecoder 来解码

811
00:33:17,326 --> 0:33:21,066
将它解码成一组 MKGeoJSON 对象

812
00:33:22,046 --> 0:33:24,216
我们随后会解析这些对象

813
00:33:24,686 --> 0:33:25,976
让我们继续并且运用这个解析函数

814
00:33:32,096 --> 0:33:35,706
我们将迭代 GeoJSON 对象

815
00:33:36,286 --> 0:33:38,676
我们看一下我们的 JSON  

816
00:33:38,676 --> 0:33:40,186
在最上级看到了一个特性

817
00:33:40,186 --> 0:33:41,456
所以我们会把这个对象当作

818
00:33:41,456 --> 0:33:42,716
MKGeoJSONFeature

819
00:33:43,306 --> 0:33:44,686
在一般的分析器中 我们也会想要

820
00:33:44,686 --> 0:33:46,896
处理其他的几何对象

821
00:33:47,746 --> 0:33:48,646
我们重复这个 feature.geometry

822
00:33:48,646 --> 0:33:50,666
然后将其过滤到

823
00:33:50,666 --> 0:33:52,546
本地系统的 MapKit 的类型里

824
00:33:52,576 --> 0:33:54,606
在这里就是 MKMultiPolygon

825
00:33:55,466 --> 0:33:58,056
我们将把它添加到一系列的叠加层中

826
00:33:58,676 --> 0:33:59,756
这是一系列叠加层 我们会

827
00:33:59,756 --> 0:34:02,786
把它们添加到地图视图里

828
00:33:59,756 --> 0:34:02,786
把它们添加到地图视图里

829
00:34:03,086 --> 0:34:04,536
那么我们来看看事件视图控制器

830
00:34:04,536 --> 0:34:06,976
我们在那里设置地图视图并添加叠层

831
00:34:11,876 --> 0:34:13,886
对于我们在地图视图里添加的每个叠加层

832
00:34:13,886 --> 0:34:15,626
我们都需要在地图视图的委托方式里

833
00:34:15,626 --> 0:34:17,706
提供一个渲染器

834
00:34:18,536 --> 0:34:19,976
让我们继续并设置委托方式

835
00:34:24,666 --> 0:34:26,946
我们将 MKOverlay 放在委托方式里

836
00:34:26,946 --> 0:34:30,966
我们希望它可以回到 MKOverlayRenderer

837
00:34:31,315 --> 0:34:32,876
那么让我们继续并设置委托方式

838
00:34:37,936 --> 0:34:42,216
我们看见了我们帐篷的几何是多边形

839
00:34:42,255 --> 0:34:45,255
所以我们把这个叠层当成 MKMultiPolygon

840
00:34:46,045 --> 0:34:49,476
这里我们把它的视觉展现设定为

841
00:34:49,476 --> 0:34:51,786
多边形的叠加层 然后我们具体设置了

842
00:34:51,786 --> 0:34:53,456
如何渲染我们的帐篷

843
00:34:53,456 --> 0:34:55,956
所以现在我们添加了一个叠加层

844
00:34:55,956 --> 0:34:57,306
还具体定义了它的外观

845
00:34:57,306 --> 0:34:58,786
设置成一样的外观之后

846
00:34:58,786 --> 0:35:00,976
我们继续运行一下我们的 App

847
00:34:58,786 --> 0:35:00,976
我们继续运行一下我们的 App

848
00:35:05,266 --> 0:35:08,006
看这个 Concert in the Park 就是这个

849
00:35:08,426 --> 0:35:10,796
我们现在可以看见了帐篷的边框

850
00:35:11,076 --> 0:35:12,926
被渲染成地图视图上的叠加层

851
00:35:13,426 --> 0:35:15,576
当帐篷标签显示出来可以很大程度

852
00:35:15,576 --> 0:35:17,826
帮助我们弄清楚我们在哪里

853
00:35:17,826 --> 0:35:19,396
可以获得食物和饮料了

854
00:35:20,226 --> 0:35:21,776
我们将这些标签

855
00:35:21,776 --> 0:35:23,476
作为地图视图上的注释呈现

856
00:35:23,866 --> 0:35:26,186
那让我们回到事件数据源

857
00:35:29,116 --> 0:35:30,596
地图视图对注释的处理方式

858
00:35:30,596 --> 0:35:32,686
与叠加层不同

859
00:35:32,856 --> 0:35:34,326
所以我们将

860
00:35:34,326 --> 0:35:35,746
注释和叠加层的处理分开

861
00:35:41,516 --> 0:35:43,456
注释的名称会被在

862
00:35:43,506 --> 0:35:45,136
feature.properties 里被解析

863
00:35:45,956 --> 0:35:47,896
这些就是我们会用来

864
00:35:47,896 --> 0:35:49,176
配置这个注释的数据

865
00:35:49,776 --> 0:35:50,876
那么让我们继续并执行

866
00:35:50,876 --> 0:35:51,896
这个配置函数

867
00:35:57,636 --> 0:35:59,766
我们的点的属性是

868
00:35:59,766 --> 0:36:02,056
字符串到字符串的映射

869
00:35:59,766 --> 0:36:02,056
字符串到字符串的映射

870
00:36:03,166 --> 0:36:05,216
我们将会使用 Swift 的 JSONDecoder

871
00:36:05,796 --> 0:36:08,556
来将其解码成字符串词典

872
00:36:09,676 --> 0:36:11,326
我们把这个配置后的数据

873
00:36:11,836 --> 0:36:13,336
添加到一系列的注释中去

874
00:36:13,336 --> 0:36:15,276
我们会利用这个系列

875
00:36:15,276 --> 0:36:17,736
调用注释添加到地图视图里

876
00:36:18,646 --> 0:36:19,686
让我们看看事件视图控制器

877
00:36:19,686 --> 0:36:22,706
并且在地图视图添加注释

878
00:36:26,666 --> 0:36:28,886
让我们为注释设置视图

879
00:36:33,196 --> 0:36:34,126
我们将会用到

880
00:36:34,126 --> 0:36:37,036
MKMapViewDefaultAnnotation

881
00:36:37,036 --> 0:36:39,376
ViewReuseIdentifier 常数

882
00:36:39,376 --> 0:36:41,116
来登记我们的自定义注释

883
00:36:41,826 --> 0:36:45,546
既然我们有了模板和注释的视图设置

884
00:36:45,546 --> 0:36:46,946
那让我们运行一下 App

885
00:36:54,906 --> 0:36:57,116
所以我们现在看到在地图视图上

886
00:36:57,856 --> 0:37:00,016
帐篷标签被呈现为注释的方式

887
00:36:57,856 --> 0:37:00,016
帐篷标签被呈现为注释的方式

888
00:37:00,796 --> 0:37:02,676
我们刚刚看到了如何通过 GeoJSON 数据

889
00:37:02,786 --> 0:37:05,626
渲染注释和叠加层 

890
00:37:06,916 --> 0:37:08,666
尽管如此 在我们的地图视图里 

891
00:37:08,666 --> 0:37:10,146
我们看到了许多个兴趣点

892
00:37:10,146 --> 0:37:11,446
它们在地图上的显示

893
00:37:11,446 --> 0:37:12,506
干扰了我们查看地图

894
00:37:13,386 --> 0:37:15,026
让我们操作一下

895
00:37:15,026 --> 0:37:16,546
之前 Alexander 提到过的那个

896
00:37:16,546 --> 0:37:18,116
排除所有兴趣点过滤器

897
00:37:18,116 --> 0:37:18,976
来关掉这些无关的兴趣点

898
00:37:24,886 --> 0:37:25,946
现在我们已经应用了

899
00:37:25,946 --> 0:37:27,316
pointOfInterestFilter 过滤器

900
00:37:27,486 --> 0:37:28,906
让我们运行一下 App

901
00:37:35,186 --> 0:37:37,986
我们就看到使用这个功能

902
00:37:35,186 --> 0:37:37,986
我们能很轻松地做到

903
00:37:38,446 --> 0:37:40,506
让用户能够更专注于

904
00:37:40,506 --> 0:37:43,246
与我们的用例相关的信息了

905
00:37:43,616 --> 0:37:45,556
就说到这里 我要把话筒还给 Alexander

906
00:37:46,516 --> 0:37:50,756
[掌声]

907
00:37:51,256 --> 0:37:53,136
&gt;&gt; 正如你在这个演示中看到的那样

908
00:37:53,136 --> 0:37:55,446
新的 MKGeoJSONDecoder 可以让

909
00:37:55,446 --> 0:37:57,656
你使用 GeoJSON 变得轻松很多

910
00:37:57,656 --> 0:38:00,876
这么说来 在地图视图里

911
00:37:57,656 --> 0:38:00,876
这么说来 在地图视图里

912
00:38:00,876 --> 0:38:03,926
渲染一个事件地图变得相当简单直接

913
00:38:04,506 --> 0:38:07,446
但在某些用例中

914
00:38:07,446 --> 0:38:11,406
比如当你正在处理大型场馆的室内数据时

915
00:38:11,406 --> 0:38:12,746
你的数据要复杂很多

916
00:38:15,406 --> 0:38:17,336
所以 为了标准化和简单化的处理

917
00:38:17,336 --> 0:38:19,416
这种复杂的室内数据

918
00:38:19,416 --> 0:38:21,226
我们已经开发出来

919
00:38:21,276 --> 0:38:24,146
室内地图数据格式 即 IMDF

920
00:38:24,886 --> 0:38:28,236
IMDF 规范是建立在

921
00:38:28,236 --> 0:38:30,076
我们刚才谈到的 GeoJSON 的基础之上的

922
00:38:30,236 --> 0:38:34,906
它会提供一个室内数据的综合模型

923
00:38:34,906 --> 0:38:39,126
可以让你以通用方式处理 JSON 

924
00:38:39,706 --> 0:38:42,116
要了解有关如何在你的地图上 

925
00:38:42,116 --> 0:38:43,976
渲染丰富的室内数据的更多信息

926
00:38:43,976 --> 0:38:45,576
我强烈建议观看

927
00:38:45,576 --> 0:38:47,096
在明天下午两点的

928
00:38:47,096 --> 0:38:51,076
添加室内地图至你的 App 和网页分会

929
00:38:51,076 --> 0:38:55,836
这个专题还会提到 IMDF 规范的更多细节

930
00:38:56,436 --> 0:38:59,956
这就是我要谈的关于支持在 MapKit 里

931
00:38:59,956 --> 0:39:04,436
新的 GeoJSON 的全部内容

932
00:38:59,956 --> 0:39:04,436
新的 GeoJSON 的全部内容

933
00:39:04,856 --> 0:39:06,386
所以在剩下的最后一个重要的主题中

934
00:39:06,386 --> 0:39:08,546
我想谈一下如何用一组新的 API

935
00:39:08,546 --> 0:39:10,736
让你在 MapKit 和 MapKit JS 中

936
00:39:10,736 --> 0:39:13,436
可以真正掌控地图视图里的相机

937
00:39:14,206 --> 0:39:16,076
为了给你展示这个 我们会

938
00:39:16,076 --> 0:39:19,706
再看一下伴生 App 里事件视图

939
00:39:20,536 --> 0:39:24,516
这个视图是为了呈现这个事件地图

940
00:39:24,826 --> 0:39:26,296
所以举个例子

941
00:39:26,296 --> 0:39:29,226
用户要放大到整个旧金山是不合逻辑的

942
00:39:29,766 --> 0:39:32,676
因此要将地图视图锁定在相关区域

943
00:39:32,676 --> 0:39:37,216
你可以通过添加一个允许用户移动范围的

944
00:39:37,216 --> 0:39:38,336
限制区域的边界

945
00:39:38,956 --> 0:39:41,766
所以我们推出了一个新的级

946
00:39:41,766 --> 0:39:44,026
叫做相机边界

947
00:39:44,026 --> 0:39:46,076
它定义一个区域

948
00:39:46,076 --> 0:39:47,586
在这个区域里面你的地图视图的中心点

949
00:39:47,706 --> 0:39:49,416
始终需要保持在同一个位置

950
00:39:52,336 --> 0:39:54,006
有两种方法可以创建相机边界

951
00:39:54,006 --> 0:39:56,146
使用坐标区域

952
00:39:56,146 --> 0:39:58,576
或者使用 MapRect

953
00:39:59,146 --> 0:40:00,226
一旦你创造了你的相机边界

954
00:39:59,146 --> 0:40:00,226
一旦你创造了你的相机边界

955
00:40:00,226 --> 0:40:03,306
你就把它应用到你的地图视图中

956
00:40:03,376 --> 0:40:04,686
新的 cameraBoundary 属性了

957
00:40:06,456 --> 0:40:10,486
但在此之前 请确保你的地图视图的中心

958
00:40:10,486 --> 0:40:12,936
是被放置在相机边界区域里面

959
00:40:14,096 --> 0:40:17,316
你比其他任何人了解你的 App 

960
00:40:17,316 --> 0:40:20,276
当你的正在使用的地图视图

961
00:40:20,756 --> 0:40:22,596
位于相机边界的外面

962
00:40:22,596 --> 0:40:24,166
这个地图视图将更新到边界内的位置

963
00:40:24,746 --> 0:40:26,156
在大多数情况下 相机边界外的位置

964
00:40:26,206 --> 0:40:28,686
不会是你为你的用户选择的位置

965
00:40:29,196 --> 0:40:32,156
一旦应用了这个 cameraBoundary 功能

966
00:40:32,156 --> 0:40:35,906
这个地图视图就会严格执行它的指令

967
00:40:36,826 --> 0:40:38,346
举个例子 这意味着当你调用

968
00:40:38,706 --> 0:40:43,656
setRegion 强制地图视图

969
00:40:43,656 --> 0:40:47,696
移到相机边界外的

970
00:40:47,696 --> 0:40:49,836
它会尽量移动到接近你下达指令的地方

971
00:40:49,836 --> 0:40:51,836
但它不会违背这个相机边界

972
00:40:52,416 --> 0:40:54,616
这当然不仅仅适用于 setRegion

973
00:40:54,616 --> 0:40:57,006
对任何可以调整你的地图视图的中心点

974
00:40:57,346 --> 0:41:00,026
的 API 都是适用的

975
00:40:57,346 --> 0:41:00,026
的 API 都是适用的

976
00:41:00,526 --> 0:41:03,856
而且我们也在 MapKit JS 里面

977
00:41:03,856 --> 0:41:06,226
支持这个相机边界的使用

978
00:41:07,266 --> 0:41:09,516
但是它们的工作原理有一点点差异

979
00:41:09,706 --> 0:41:10,756
你可以用一个 CoordinateRegion

980
00:41:10,756 --> 0:41:14,326
或者一个 MapRect 作为你的相机边界

981
00:41:14,866 --> 0:41:17,076
所以你只需要在你的地图对象中

982
00:41:17,076 --> 0:41:19,766
把新的 cameraBoundary 属性设置成

983
00:41:19,766 --> 0:41:21,696
CoordinateRegion 或者 MapRect

984
00:41:24,076 --> 0:41:26,156
所以我们现在有了一个

985
00:41:26,516 --> 0:41:28,126
保证我们的地图视图

986
00:41:28,126 --> 0:41:29,176
停留在相关区域内的方法

987
00:41:30,016 --> 0:41:31,866
但用户仍然可以把地图视图缩小到

988
00:41:31,866 --> 0:41:33,926
我们用例相关区域完全看不见的程度

989
00:41:34,426 --> 0:41:36,446
在操作上这是可行的

990
00:41:36,446 --> 0:41:38,206
因为相机边界仅仅保证了

991
00:41:38,306 --> 0:41:41,086
地图的中心点在那个区域内

992
00:41:41,656 --> 0:41:44,436
我们的中心仍然是那个公园

993
00:41:44,716 --> 0:41:46,216
我们仅仅只是真的放大了而已

994
00:41:47,606 --> 0:41:49,306
所以我们还需要一种方法来限制

995
00:41:49,376 --> 0:41:51,066
放大地图视图的程度

996
00:41:51,576 --> 0:41:55,446
地图视图的缩放由它的相机所控制

997
00:41:56,346 --> 0:41:57,986
如果你之前在你的 App 里

998
00:41:57,986 --> 0:41:59,446
使用过 MKMapCamera

999
00:41:59,446 --> 0:42:01,386
可能已经用过调节高度的 API 了

1000
00:41:59,446 --> 0:42:01,386
可能已经用过调节高度的 API 了

1001
00:42:02,656 --> 0:42:04,226
但是当你使用的是有角度的相机

1002
00:42:04,226 --> 0:42:07,396
你会很本能地直接考虑

1003
00:42:07,396 --> 0:42:10,746
从地图的中心坐标到相机的距离

1004
00:42:11,906 --> 0:42:13,346
这也是可以控制你

1005
00:42:13,346 --> 0:42:15,166
缩放地图视图的距离

1006
00:42:16,456 --> 0:42:18,396
基于这个原因

1007
00:42:18,396 --> 0:42:20,146
我们在 MKMapCamera 里引入了一个

1008
00:42:20,186 --> 0:42:25,536
新的属性叫做中心坐标距离

1009
00:42:25,626 --> 0:42:28,176
在这里我希望

1010
00:42:28,176 --> 0:42:29,856
你能停止参考海拔高度

1011
00:42:29,856 --> 0:42:32,166
而是转而关注

1012
00:42:32,286 --> 0:42:34,476
从地图的中心坐标

1013
00:42:34,476 --> 0:42:35,936
到相机的距离

1014
00:42:36,836 --> 0:42:37,746
当你在你的代码里

1015
00:42:37,746 --> 0:42:39,696
完成这个转换时

1016
00:42:39,696 --> 0:42:41,126
一定要记住一个重要的事情

1017
00:42:41,696 --> 0:42:44,856
我们过去用的

1018
00:42:44,856 --> 0:42:46,816
以海拔为中心的模型中

1019
00:42:46,816 --> 0:42:48,356
当你保持了同样的海拔时

1020
00:42:48,356 --> 0:42:50,296
相机的角度的改变

1021
00:42:50,296 --> 0:42:51,736
意味着相机

1022
00:42:51,736 --> 0:42:54,076
离中心点更远了 

1023
00:42:55,546 --> 0:42:57,376
但在一个距离中心模型中

1024
00:42:57,726 --> 0:43:00,396
当你改变你相机的角度时

1025
00:42:57,726 --> 0:43:00,396
当你改变你相机的角度时

1026
00:43:00,396 --> 0:43:02,856
我们希望是距离保持不变

1027
00:43:02,856 --> 0:43:07,326
相反 改变的是海拔高度

1028
00:43:08,636 --> 0:43:11,076
MKMapCamera 已经更新了

1029
00:43:11,076 --> 0:43:13,076
所以之前的角度属性会发生变化

1030
00:43:13,126 --> 0:43:16,646
当你设置了一个

1031
00:43:16,706 --> 0:43:18,726
中心坐标距离

1032
00:43:19,606 --> 0:43:21,946
所以你现在了解了中心

1033
00:43:21,946 --> 0:43:23,176
坐标距离是控制

1034
00:43:23,276 --> 0:43:24,956
你的地图视图缩放的关键

1035
00:43:25,226 --> 0:43:26,526
那在实际应用中你要如何约束缩放范围呢

1036
00:43:27,086 --> 0:43:29,956
为此我们引入了一个新的级

1037
00:43:29,956 --> 0:43:31,676
叫做 CameraZoomRange

1038
00:43:32,206 --> 0:43:34,966
这个 CameraZoomRange 定义了

1039
00:43:34,966 --> 0:43:38,496
中心坐标距离的大小极限

1040
00:43:38,796 --> 0:43:39,566
当你在你的地图视图里应用 

1041
00:43:39,566 --> 0:43:40,736
CameraZoomRange 时

1042
00:43:40,736 --> 0:43:44,386
相机会被强制控制在那个范围内

1043
00:43:46,116 --> 0:43:49,686
所以你只需要创建一个含有大小极限值的

1044
00:43:49,686 --> 0:43:52,806
CameraZoomRange 把它应用到

1045
00:43:51,716 --> 0:43:52,806
你的地图视图的新的

1046
00:43:52,806 --> 0:43:54,916
CameraZoomRange 属性里

1047
00:43:55,896 --> 0:43:57,226
如果你想 你也可以创建一个 

1048
00:43:57,226 --> 0:43:58,546
只含有最小值或者最大值的

1049
00:43:58,546 --> 0:44:00,956
CameraZoomRange

1050
00:43:58,546 --> 0:44:00,956
CameraZoomRange

1051
00:44:03,246 --> 0:44:05,446
你可能已经注意到了在过去

1052
00:44:05,446 --> 0:44:07,076
即使没有 CameraZoomRange

1053
00:44:07,076 --> 0:44:10,206
我们在地图视图上缩放的范围

1054
00:44:10,206 --> 0:44:11,756
也是有所限制的

1055
00:44:12,646 --> 0:44:14,076
这些限制可能会根据

1056
00:44:14,076 --> 0:44:16,666
你所查看的世界地区

1057
00:44:16,666 --> 0:44:17,966
或者根据你用的地图类型而变化

1058
00:44:19,036 --> 0:44:20,246
在某些情况下有这些限制是

1059
00:44:20,246 --> 0:44:21,886
一些技术局限造成的

1060
00:44:21,886 --> 0:44:23,346
在另一些情况中

1061
00:44:23,346 --> 0:44:24,566
这些限制是由于法律原因造成的

1062
00:44:25,506 --> 0:44:27,626
这意味着即使你的用户设置的

1063
00:44:27,626 --> 0:44:29,696
CameraZoomRange 区域有一个最小值

1064
00:44:29,696 --> 0:44:33,956
这个最小距离短于 MapView 的默认距离 

1065
00:44:34,586 --> 0:44:37,396
你的用户就将无法放大

1066
00:44:38,096 --> 0:44:40,396
同样的 即使有更大的最大距离值

1067
00:44:40,396 --> 0:44:43,306
相机也不会允许你的用户进一步缩小

1068
00:44:43,846 --> 0:44:48,296
当你使用时相机在

1069
00:44:48,296 --> 0:44:49,216
CameraZoomRange 区域外

1070
00:44:49,216 --> 0:44:50,996
MapView 会自动更新

1071
00:44:50,996 --> 0:44:53,436
你相机的中心坐标距离

1072
00:44:54,156 --> 0:44:54,896
所以就像 cameraBoundary 一样

1073
00:44:54,896 --> 0:44:57,896
一旦你添加了 CameraZoomRange

1074
00:44:57,896 --> 0:45:01,426
地图视图将严格执行 CameraZoomRange

1075
00:44:57,896 --> 0:45:01,426
地图视图将严格执行 CameraZoomRange

1076
00:45:02,766 --> 0:45:04,366
同时我们也增加了在 MapKit JS 里

1077
00:45:04,366 --> 0:45:06,386
对相机变焦范围的支持

1078
00:45:06,386 --> 0:45:08,586
所以在 MapKit 对象里添加了 

1079
00:45:08,586 --> 0:45:10,796
一个新的 CameraZoomRange 对象

1080
00:45:11,426 --> 0:45:12,746
你可以用同样的方式

1081
00:45:12,746 --> 0:45:14,116
同时设置它们的最大最小极限

1082
00:45:14,116 --> 0:45:16,186
或者只取二者其中之一

1083
00:45:16,996 --> 0:45:18,026
然后你在你的地图对象

1084
00:45:18,026 --> 0:45:19,976
应用这个新的 CameraZoomRange 属性

1085
00:45:23,576 --> 0:45:25,326
好的 我现在把话题

1086
00:45:25,326 --> 0:45:27,496
再一次递还给我的同事 Nalini

1087
00:45:27,596 --> 0:45:28,716
这次她会告诉你

1088
00:45:28,716 --> 0:45:32,316
如何使用这些相机变焦距离和相机边界来

1089
00:45:32,316 --> 0:45:33,976
改善你使用地图视图的体验

1090
00:45:34,516 --> 0:45:39,326
[掌声]

1091
00:45:39,826 --> 0:45:40,576
&gt;&gt; 我们在这里看一下

1092
00:45:40,576 --> 0:45:42,416
这个概念地图

1093
00:45:42,416 --> 0:45:44,076
在这里我们只渲染了注释和叠层

1094
00:45:47,566 --> 0:45:49,296
我正在缩小概念区域

1095
00:45:49,296 --> 0:45:51,336
在这里用户可以缩小到看到

1096
00:45:51,336 --> 0:45:53,266
圣荷西以及整个加利福尼亚

1097
00:45:54,206 --> 0:45:56,816
我们想控制地图视图的缩放范围

1098
00:45:57,486 --> 0:45:59,956
让我们使用一下 Alexander 之前有谈到的

1099
00:46:00,126 --> 0:46:00,926
CameraZoomRange API 

1100
00:46:10,596 --> 0:46:13,386
最小值和最大值是以米为单位的

1101
00:46:14,146 --> 0:46:15,926
通过在地图视图里应用 CameraZoomRange

1102
00:46:15,926 --> 0:46:17,836
我们限制了用户在地图视图里

1103
00:46:17,836 --> 0:46:20,526
可以放大多远或者多近的程度

1104
00:46:22,036 --> 0:46:23,606
让我们运行一下应用了

1105
00:46:23,606 --> 0:46:24,976
CameraZoomRange 的 App

1106
00:46:31,446 --> 0:46:33,126
我尝试再次缩小一下

1107
00:46:33,396 --> 0:46:34,416
好的 我无法缩小了

1108
00:46:34,796 --> 0:46:36,266
我们试着放大一下

1109
00:46:38,846 --> 0:46:42,696
我正在放大 我可以看到舞台了

1110
00:46:42,986 --> 0:46:45,656
我可以看到在音乐会场地里不同的帐篷

1111
00:46:46,276 --> 0:46:47,886
所以对于我们的用例来说

1112
00:46:47,886 --> 0:46:49,606
这个变焦范围的应用是完美的

1113
00:46:50,316 --> 0:46:53,226
但是 正如你所看到的 

1114
00:46:53,226 --> 0:46:54,006
用户还是会移动出范围

1115
00:46:54,846 --> 0:46:57,896
我们希望用户专注于音乐会区域

1116
00:46:58,656 --> 0:47:01,726
让我们运用一下 Alexander 之前有谈到的

1117
00:46:58,656 --> 0:47:01,726
让我们运用一下 Alexander 之前有谈到的

1118
00:47:01,726 --> 0:47:02,976
cameraBoundary API 

1119
00:47:11,476 --> 0:47:13,626
我们设置我们的 MKCoordinateRegion

1120
00:47:13,736 --> 0:47:15,086
用 eventCenter 作为中心点

1121
00:47:15,086 --> 0:47:16,456
还有一个区域设置为

1122
00:47:16,516 --> 0:47:19,546
latitudinalMeters: 20

1123
00:47:19,546 --> 0:47:20,896
longitudinalMeters: 10

1124
00:47:21,656 --> 0:47:23,606
我们使用这个 coordinateRegion 来

1125
00:47:23,676 --> 0:47:25,096
设置我们的 CameraBoundary

1126
00:47:25,856 --> 0:47:27,326
当 CameraBoundary 应用在地图视图里时

1127
00:47:27,326 --> 0:47:30,536
我们要确保了地图视图的中心点

1128
00:47:30,736 --> 0:47:31,846
处在这个区域内

1129
00:47:32,626 --> 0:47:34,206
让我们运行一下我们应用了

1130
00:47:34,206 --> 0:47:34,976
CameraBoundary 的 App

1131
00:47:41,626 --> 0:47:42,956
我在试着移开范围

1132
00:47:43,646 --> 0:47:45,156
正如你所看到的 我现在无法移开

1133
00:47:46,296 --> 0:47:47,976
我们来试试放大吧

1134
00:47:50,396 --> 0:47:51,636
我真的想要移动到

1135
00:47:51,636 --> 0:47:52,766
这个梦幻的舞台区

1136
00:47:53,546 --> 0:47:55,076
传闻有可能 Lady Gaga 会在这里有演出

1137
00:47:55,076 --> 0:47:57,536
但看起来我不能移动到这里

1138
00:47:58,166 --> 0:47:59,816
让我们尝试一些更新的数据

1139
00:48:00,566 --> 0:48:01,736
我们来试试修改经纬度

1140
00:48:01,736 --> 0:48:04,516
latitudinalMeters: 100 和

1141
00:48:04,516 --> 0:48:07,456
longitudinalMeters: 80 

1142
00:48:07,456 --> 0:48:09,136
然后让我们配合这些更新的数字

1143
00:48:09,136 --> 0:48:09,926
运行一下我们的 App 

1144
00:48:14,866 --> 0:48:16,506
好的 我要再放大一下

1145
00:48:16,626 --> 0:48:17,976
并尝试进入舞台区域

1146
00:48:21,336 --> 0:48:23,216
正如你所看到的 我可以移动到舞台区了

1147
00:48:23,216 --> 0:48:25,836
我可以到达盥洗室

1148
00:48:26,766 --> 0:48:29,286
我们刚看到如何利用

1149
00:48:29,286 --> 0:48:30,696
cameraBoundary 和

1150
00:48:30,696 --> 0:48:33,166
CameraZoomRange API 来保证

1151
00:48:33,556 --> 0:48:34,886
用户可以专注在

1152
00:48:34,886 --> 0:48:37,106
与我们的用例相关的信息上

1153
00:48:37,506 --> 0:48:39,286
说到这里 我要把话题交回给 Alexander 了

1154
00:48:40,516 --> 0:48:44,556
[掌声]

1155
00:48:45,056 --> 0:48:47,156
&gt;&gt; 所以 再一次

1156
00:48:47,156 --> 0:48:48,856
仅仅是几代码行的改变

1157
00:48:48,856 --> 0:48:51,326
你得到一个完全不同的地图视图的使用体验

1158
00:48:51,916 --> 0:48:53,906
所以请在你的 App 中尝试一下这些操作

1159
00:48:54,666 --> 0:48:56,596
这实际上已经是关于

1160
00:48:56,596 --> 0:48:58,316
相机 API 的地图视图

1161
00:48:58,666 --> 0:49:00,336
最后想要讲的内容

1162
00:48:58,666 --> 0:49:00,336
最后想要讲的内容

1163
00:49:01,486 --> 0:49:03,036
但就像我之前所说的那样

1164
00:49:03,036 --> 0:49:04,446
今天我们涵盖了太多东西

1165
00:49:04,916 --> 0:49:07,456
所以在我们结束之前我想

1166
00:49:07,666 --> 0:49:09,276
总结今天所提到的我们的关键点

1167
00:49:09,276 --> 0:49:12,216
我希望在这部分你认真听一下

1168
00:49:13,246 --> 0:49:15,206
随着引入了新的快照服务

1169
00:49:15,206 --> 0:49:21,386
你现在可以创建快照

1170
00:49:21,386 --> 0:49:23,976
并在你的网页上使用它们

1171
00:49:24,426 --> 0:49:28,216
所以在你的地图里你不需要用户交互

1172
00:49:28,216 --> 0:49:31,406
不用浪费资源下载一个全幅地图

1173
00:49:33,066 --> 0:49:35,716
每一个 App 有着在不同的使用背景下

1174
00:49:35,716 --> 0:49:38,466
独一无二的的相关数据

1175
00:49:38,966 --> 0:49:41,386
所以可以通过使用新的

1176
00:49:41,386 --> 0:49:42,986
pointOfInterestFilters 在你的 App 里

1177
00:49:42,986 --> 0:49:44,276
调整你的地图视图达到适应你的需求

1178
00:49:44,766 --> 0:49:49,626
通过使用新的 pointOfInterestFilters

1179
00:49:49,626 --> 0:49:51,046
和结果类型过滤器

1180
00:49:51,046 --> 0:49:52,726
确保了搜索和自动填充的结果

1181
00:49:52,726 --> 0:49:54,846
尽可能与你的用户相关

1182
00:49:58,396 --> 0:50:00,586
然后当你在你的地图视图里

1183
00:49:58,396 --> 0:50:00,586
然后当你在你的地图视图里

1184
00:50:00,586 --> 0:50:02,136
添加了一堆多边形和折线时

1185
00:50:02,136 --> 0:50:04,216
通过新的 multipolygons

1186
00:50:04,216 --> 0:50:05,976
和 multipolylines 可以对它们进行分组

1187
00:50:09,266 --> 0:50:11,086
如果你正在使用 GeoJSON

1188
00:50:11,086 --> 0:50:13,586
利用 MapKit 和 MapKit JS 中的

1189
00:50:13,586 --> 0:50:18,026
更新的支持服务

1190
00:50:18,026 --> 0:50:22,696
你可以少写少用许多代码

1191
00:50:22,886 --> 0:50:31,176
当你的地图视图着重于某个特定区域范围内

1192
00:50:31,176 --> 0:50:32,526
尝试一下新的相机边界

1193
00:50:32,526 --> 0:50:34,036
和相机缩放范围 

1194
00:50:34,116 --> 0:50:35,646
它们可以让你的地图视图真正集中在

1195
00:50:35,696 --> 0:50:36,836
重要位置区域范围内

1196
00:50:37,336 --> 0:50:41,226
想要获取 关于 MapKits 和 MapKit JS 的

1197
00:50:41,226 --> 0:50:43,016
更多信息和示例代码

1198
00:50:43,016 --> 0:50:45,706
请访问本部分的网页

1199
00:50:45,886 --> 0:50:48,086
如果你有任何疑问

1200
00:50:48,156 --> 0:50:50,046
请在明天下午 3 点来我们实验室

1201
00:50:50,046 --> 0:50:54,126
说到这里 我想感谢你们的到来

1202
00:50:54,126 --> 0:50:55,326
我希望你会有一个非常美好的

1203
00:50:55,326 --> 0:50:57,626
晚上 明天享受大会的最后一天

1204
00:50:58,516 --> 0:51:03,500
[掌声]
