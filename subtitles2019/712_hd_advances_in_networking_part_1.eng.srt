1
00:00:00,506 --> 0:00:05,500
[ Music ]

2
00:00:09,516 --> 0:00:16,556
[ Applause ]

3
00:00:17,056 --> 0:00:18,106
&gt;&gt; Welcome to Advances in

4
00:00:18,106 --> 0:00:18,706
Networking.

5
00:00:18,756 --> 0:00:19,976
My name is Joshua Graessley.

6
00:00:20,126 --> 0:00:21,416
My coworkers and I from Internet

7
00:00:21,416 --> 0:00:22,896
Technologies are excited to talk

8
00:00:22,896 --> 0:00:23,706
to you about a number of

9
00:00:23,706 --> 0:00:24,946
improvements we've made in the

10
00:00:24,946 --> 0:00:26,196
area of networking on our

11
00:00:26,276 --> 0:00:28,076
platforms this last year.

12
00:00:29,206 --> 0:00:31,666
In part one, we're going to talk

13
00:00:31,666 --> 0:00:32,636
about Low Data Mode.

14
00:00:32,706 --> 0:00:34,156
This is an exciting new feature

15
00:00:34,156 --> 0:00:35,286
where we can work together to

16
00:00:35,286 --> 0:00:36,766
help save our user's network

17
00:00:36,766 --> 0:00:38,116
data when it really matters.

18
00:00:38,406 --> 0:00:39,896
We'll talk about how you can

19
00:00:39,896 --> 0:00:41,466
write asynchronous-- very

20
00:00:41,466 --> 0:00:42,926
elegant asynchronous networking

21
00:00:42,926 --> 0:00:44,696
code using Combine in

22
00:00:44,696 --> 0:00:45,486
URLSession.

23
00:00:46,396 --> 0:00:48,816
We'll also cover WebSocket APIs.

24
00:00:49,096 --> 0:00:50,056
Last year, this was one of the

25
00:00:50,056 --> 0:00:51,326
number one things you requested

26
00:00:51,326 --> 0:00:52,896
in the labs and we're excited

27
00:00:52,896 --> 0:00:53,846
this year to be providing a

28
00:00:53,846 --> 0:00:54,426
solution.

29
00:00:55,506 --> 0:00:56,866
Finally, we'll talk about a

30
00:00:56,866 --> 0:00:58,446
number of mobility improvements

31
00:00:58,526 --> 0:00:59,976
and we'll talk about how we can

32
00:00:59,976 --> 0:01:01,346
work together to provide our

33
00:00:59,976 --> 0:01:01,346
work together to provide our

34
00:01:01,346 --> 0:01:03,156
users a more seamless experience

35
00:01:03,156 --> 0:01:04,715
as devices move from one network

36
00:01:04,936 --> 0:01:05,396
to another.

37
00:01:07,036 --> 0:01:10,606
In part two, we'll cover a bunch

38
00:01:10,606 --> 0:01:11,476
of additional topics.

39
00:01:11,526 --> 0:01:12,596
That's at 5:00 today.

40
00:01:12,696 --> 0:01:13,736
I encourage you to come back and

41
00:01:13,736 --> 0:01:15,246
check that out.

42
00:01:15,936 --> 0:01:17,866
Now, before we dive into Low

43
00:01:17,866 --> 0:01:19,016
Data Mode, I want to take a

44
00:01:19,016 --> 0:01:20,546
minute to talk about networking

45
00:01:20,546 --> 0:01:22,036
APIs on our platform.

46
00:01:23,046 --> 0:01:25,376
The best networking APIs to use

47
00:01:25,376 --> 0:01:27,226
on our platform are URLSession

48
00:01:27,366 --> 0:01:28,226
and Network.framework.

49
00:01:28,696 --> 0:01:29,676
As you'll hear about in this

50
00:01:29,676 --> 0:01:31,526
session and in part two, there

51
00:01:31,526 --> 0:01:32,226
are a number of great

52
00:01:32,226 --> 0:01:33,936
improvements we've made and all

53
00:01:33,936 --> 0:01:34,736
of those improvements are

54
00:01:34,736 --> 0:01:35,966
available to your applications

55
00:01:36,166 --> 0:01:37,016
if you're using these

56
00:01:37,046 --> 0:01:37,516
frameworks.

57
00:01:38,936 --> 0:01:40,636
If you're using sockets, you're

58
00:01:40,636 --> 0:01:41,456
not going to be able to take

59
00:01:41,456 --> 0:01:42,146
advantage of this.

60
00:01:42,686 --> 0:01:44,106
Unfortunately, sockets just

61
00:01:44,106 --> 0:01:45,266
doesn't have the richness that

62
00:01:45,266 --> 0:01:46,706
we require in order to provide

63
00:01:46,706 --> 0:01:47,786
this functionality at that

64
00:01:47,786 --> 0:01:48,076
layer.

65
00:01:48,076 --> 0:01:49,876
Now, if you're doing something

66
00:01:49,876 --> 0:01:52,056
like a VPN or a content filter,

67
00:01:52,386 --> 0:01:53,686
NetworkExtension framework is a

68
00:01:53,686 --> 0:01:54,916
great solution and we've made a

69
00:01:54,916 --> 0:01:56,146
number of improvements there as

70
00:01:56,146 --> 0:01:57,386
well that we'll be talking about

71
00:01:57,386 --> 0:02:01,226
tomorrow at 9:00 a.m. Now with

72
00:01:57,386 --> 0:02:01,226
tomorrow at 9:00 a.m. Now with

73
00:02:01,386 --> 0:02:02,886
that, I'd like to talk about Low

74
00:02:02,886 --> 0:02:03,326
Data Mode.

75
00:02:03,946 --> 0:02:05,486
Low Data Mode is a really

76
00:02:05,486 --> 0:02:07,516
exciting new feature in iOS 13.

77
00:02:08,876 --> 0:02:10,166
I think the best way to

78
00:02:10,166 --> 0:02:11,526
introduce Low Data Mode is to

79
00:02:11,526 --> 0:02:12,736
have you think back to how you

80
00:02:12,736 --> 0:02:14,086
got here to WWDC.

81
00:02:14,086 --> 0:02:17,326
You probably got on an airplane

82
00:02:17,386 --> 0:02:20,006
to fly out to sunny San Jose.

83
00:02:21,046 --> 0:02:22,646
And on that airplane, there was

84
00:02:22,736 --> 0:02:24,786
probably a Wi-Fi network and

85
00:02:24,786 --> 0:02:26,686
that Wi-Fi network was probably

86
00:02:26,796 --> 0:02:28,786
kind of expensive of it may have

87
00:02:28,786 --> 0:02:30,656
been very congested and you may

88
00:02:30,656 --> 0:02:31,706
have been finding yourself

89
00:02:31,706 --> 0:02:33,646
wishing that you had some way to

90
00:02:33,646 --> 0:02:35,036
tell the applications and the

91
00:02:35,036 --> 0:02:37,036
system on your device that on

92
00:02:37,036 --> 0:02:38,696
this particular network it's

93
00:02:38,696 --> 0:02:39,946
really important to be very

94
00:02:39,946 --> 0:02:41,506
conservative in how you use

95
00:02:41,506 --> 0:02:42,116
network data.

96
00:02:43,066 --> 0:02:44,946
Low Data is all about solving

97
00:02:44,946 --> 0:02:45,776
that problem.

98
00:02:47,226 --> 0:02:48,936
Low Data gives users an

99
00:02:49,216 --> 0:02:51,176
ability-- a preference to signal

100
00:02:51,176 --> 0:02:52,546
to your application and to the

101
00:02:52,606 --> 0:02:54,436
system that you really want to

102
00:02:54,666 --> 0:02:56,556
be very careful in how you use

103
00:02:56,686 --> 0:02:57,826
data on this network.

104
00:02:59,256 --> 0:03:01,636
This can be set on a per Wi-Fi

105
00:02:59,256 --> 0:03:01,636
This can be set on a per Wi-Fi

106
00:03:01,636 --> 0:03:03,856
network based on SSID and a per

107
00:03:03,926 --> 0:03:05,506
cellular network based on SIM.

108
00:03:06,876 --> 0:03:09,416
When the device is on a Low Data

109
00:03:09,416 --> 0:03:10,696
Mode network, this has two

110
00:03:10,736 --> 0:03:11,686
primary impacts.

111
00:03:11,876 --> 0:03:12,986
There's a change to the system

112
00:03:12,986 --> 0:03:14,816
policy and a change to your

113
00:03:14,816 --> 0:03:16,296
applications that have adopted

114
00:03:16,296 --> 0:03:16,976
Low Data Mode.

115
00:03:17,536 --> 0:03:19,866
For the system policy, we will

116
00:03:19,866 --> 0:03:21,206
defer any background

117
00:03:21,206 --> 0:03:22,796
discretionary tasks while we're

118
00:03:22,796 --> 0:03:24,016
on a Low Data Mode network.

119
00:03:24,806 --> 0:03:26,016
So, if you were on your airplane

120
00:03:26,016 --> 0:03:27,166
and you had Low Data Mode turned

121
00:03:27,166 --> 0:03:28,986
on, we would defer all of those

122
00:03:29,016 --> 0:03:30,336
background discretionary tasks.

123
00:03:30,946 --> 0:03:31,616
And when you get off the

124
00:03:31,616 --> 0:03:32,766
airplane and check into your

125
00:03:32,806 --> 0:03:34,606
hotel and you get onto the Wi-Fi

126
00:03:34,606 --> 0:03:35,986
network there that's potentially

127
00:03:35,986 --> 0:03:37,386
less congested or less

128
00:03:37,386 --> 0:03:39,316
expensive, then we'd let all

129
00:03:39,316 --> 0:03:41,046
those background tasks resume

130
00:03:41,046 --> 0:03:43,026
and carry on.

131
00:03:43,616 --> 0:03:44,976
Another change we make is that

132
00:03:45,126 --> 0:03:46,266
Background App Refresh is

133
00:03:46,266 --> 0:03:46,776
disabled.

134
00:03:47,166 --> 0:03:48,686
This helps us avoid allowing

135
00:03:48,686 --> 0:03:49,656
applications that are in the

136
00:03:49,656 --> 0:03:51,386
background that may have nothing

137
00:03:51,386 --> 0:03:52,266
to do with what the user is

138
00:03:52,266 --> 0:03:53,856
actually interested in from

139
00:03:53,856 --> 0:03:54,856
consuming network data.

140
00:03:55,676 --> 0:03:56,786
This gets us some pretty big

141
00:03:56,786 --> 0:03:58,236
wins, but we think some of the

142
00:03:58,236 --> 0:03:59,566
biggest wins are going to come

143
00:03:59,566 --> 0:04:00,486
from the changes that you're

144
00:03:59,566 --> 0:04:00,486
from the changes that you're

145
00:04:00,486 --> 0:04:01,266
going to make in your

146
00:04:01,266 --> 0:04:02,976
applications to adopt Low Data

147
00:04:02,976 --> 0:04:03,276
Mode.

148
00:04:04,166 --> 0:04:05,196
So, I'd like to spend some time

149
00:04:05,196 --> 0:04:06,286
talking about the techniques

150
00:04:06,346 --> 0:04:07,016
that you can use.

151
00:04:07,576 --> 0:04:10,126
It all starts with looking into

152
00:04:10,126 --> 0:04:11,746
how your application is actually

153
00:04:11,746 --> 0:04:12,906
using network data.

154
00:04:13,816 --> 0:04:15,856
As you start to dig in, it's

155
00:04:15,916 --> 0:04:17,266
really important to keep in mind

156
00:04:18,106 --> 0:04:20,766
any time you can save data and

157
00:04:20,815 --> 0:04:22,256
there's no impact on the user

158
00:04:22,256 --> 0:04:24,136
experience, you should always do

159
00:04:24,136 --> 0:04:24,636
that.

160
00:04:25,636 --> 0:04:26,496
I know this seems kind of

161
00:04:26,496 --> 0:04:27,356
obvious, but you might be

162
00:04:27,416 --> 0:04:28,406
surprised about the ways that

163
00:04:28,406 --> 0:04:29,796
you can make optimizations that

164
00:04:30,126 --> 0:04:31,076
will reduce the amount of

165
00:04:31,076 --> 0:04:34,026
network data that you're using.

166
00:04:35,366 --> 0:04:36,666
Now, once you've gotten through

167
00:04:36,666 --> 0:04:38,276
all of those low-hanging fruits

168
00:04:38,276 --> 0:04:39,356
where you can just get a win

169
00:04:39,356 --> 0:04:40,536
with no impact, then you're

170
00:04:40,656 --> 0:04:41,766
going to have to start making

171
00:04:41,766 --> 0:04:43,246
some decisions about tradeoffs.

172
00:04:44,506 --> 0:04:46,226
In a lot of cases, you have the

173
00:04:46,226 --> 0:04:48,116
opportunity to use some more

174
00:04:48,116 --> 0:04:49,396
data and give a really great

175
00:04:49,396 --> 0:04:51,206
experience or use a little bit

176
00:04:51,206 --> 0:04:52,906
less data and give a still great

177
00:04:52,986 --> 0:04:54,206
but maybe not quite as great

178
00:04:54,206 --> 0:04:54,846
experience.

179
00:04:55,406 --> 0:04:57,266
And Low Data Mode is all about a

180
00:04:57,266 --> 0:04:58,566
way for the user to signal to

181
00:04:58,566 --> 0:05:00,386
your application that they'd

182
00:04:58,566 --> 0:05:00,386
your application that they'd

183
00:05:00,386 --> 0:05:01,876
really prefer that you save that

184
00:05:01,876 --> 0:05:03,596
data and go with the option that

185
00:05:03,596 --> 0:05:04,806
still gives a great experience,

186
00:05:05,146 --> 0:05:08,076
but maybe not quite as great.

187
00:05:08,356 --> 0:05:09,156
So, let's talk about some

188
00:05:09,156 --> 0:05:10,116
techniques you can use.

189
00:05:10,556 --> 0:05:12,536
The first one is to reduce image

190
00:05:12,536 --> 0:05:12,956
quality.

191
00:05:13,386 --> 0:05:15,856
If your application isn't all

192
00:05:15,856 --> 0:05:17,546
about images, by reducing image

193
00:05:17,546 --> 0:05:18,866
quality, you can save a lot of

194
00:05:18,866 --> 0:05:20,396
data and you can still let the

195
00:05:20,396 --> 0:05:21,716
user do what they're trying to

196
00:05:21,716 --> 0:05:24,136
do, but save data in the

197
00:05:24,136 --> 0:05:24,676
process.

198
00:05:26,256 --> 0:05:28,296
You can reduce pre-fetching.

199
00:05:28,526 --> 0:05:29,986
Prefetching is a great technique

200
00:05:30,116 --> 0:05:31,766
for improving performance, but

201
00:05:31,766 --> 0:05:33,026
it has this downside that you

202
00:05:33,026 --> 0:05:34,436
may end up fetching resources

203
00:05:34,436 --> 0:05:36,046
that the user never needs.

204
00:05:36,236 --> 0:05:37,406
And in the event that they're

205
00:05:37,406 --> 0:05:38,636
really concerned about how much

206
00:05:38,636 --> 0:05:39,736
network data they're using,

207
00:05:39,986 --> 0:05:41,096
pre-fetching can actually be

208
00:05:41,096 --> 0:05:41,746
counterproductive.

209
00:05:43,056 --> 0:05:44,656
So, when you're in Low Data

210
00:05:44,656 --> 0:05:46,206
Mode, you can use-- you can

211
00:05:46,206 --> 0:05:47,606
eliminate your pre-fetching, you

212
00:05:47,606 --> 0:05:48,336
can save that data.

213
00:05:48,336 --> 0:05:49,526
And the user may have to wait a

214
00:05:49,526 --> 0:05:50,646
little bit longer if they scroll

215
00:05:50,646 --> 0:05:52,196
that content into view to wait

216
00:05:52,266 --> 0:05:54,126
for it to load.

217
00:05:54,746 --> 0:05:56,036
You can synchronize less often.

218
00:05:56,206 --> 0:05:57,266
The data will be stale for a

219
00:05:57,266 --> 0:05:58,496
little bit longer, but you'll

220
00:05:58,496 --> 0:05:59,206
still have data.

221
00:05:59,366 --> 0:06:00,576
The user can still accomplish

222
00:05:59,366 --> 0:06:00,576
The user can still accomplish

223
00:06:00,576 --> 0:06:04,366
what they've set out to do, but

224
00:06:04,366 --> 0:06:05,636
over a long period of time you

225
00:06:05,636 --> 0:06:06,816
can actually get some pretty big

226
00:06:06,876 --> 0:06:09,216
savings through reduced rate of

227
00:06:09,216 --> 0:06:09,886
synchronization.

228
00:06:10,536 --> 0:06:14,436
You can mark background tasks as

229
00:06:14,436 --> 0:06:15,306
discretionary.

230
00:06:15,896 --> 0:06:16,916
You'd be surprised how many of

231
00:06:16,916 --> 0:06:18,076
the background tasks you're

232
00:06:18,076 --> 0:06:19,916
setting up don't really need to

233
00:06:19,916 --> 0:06:20,876
be done immediately.

234
00:06:21,936 --> 0:06:23,216
By marking a background task as

235
00:06:23,216 --> 0:06:25,176
discretionary, it gives the

236
00:06:25,176 --> 0:06:26,756
system a lot of flexibility in

237
00:06:26,756 --> 0:06:27,936
when it actually schedules that

238
00:06:27,936 --> 0:06:28,586
operation.

239
00:06:28,716 --> 0:06:30,696
As I had mentioned in--

240
00:06:30,926 --> 0:06:32,246
previously-- when you're on the

241
00:06:32,246 --> 0:06:33,886
airplane, that gives the system

242
00:06:33,886 --> 0:06:35,156
the opportunity to put off that

243
00:06:35,156 --> 0:06:36,566
task until we get to a non-Low

244
00:06:36,566 --> 0:06:39,066
Data Mode network.

245
00:06:39,536 --> 0:06:40,836
Another great solution is to

246
00:06:40,836 --> 0:06:41,796
disable auto-play.

247
00:06:42,686 --> 0:06:44,076
This is really great because it

248
00:06:44,076 --> 0:06:45,326
doesn't prevent the user from

249
00:06:45,446 --> 0:06:46,466
playing the content that they're

250
00:06:46,466 --> 0:06:48,046
interested in, but it means the

251
00:06:48,046 --> 0:06:49,226
user doesn't have to pay for

252
00:06:49,226 --> 0:06:50,396
content that they really don't

253
00:06:50,396 --> 0:06:50,836
care about.

254
00:06:51,726 --> 0:06:54,356
That brings me to another really

255
00:06:54,356 --> 0:06:55,836
important point when you're

256
00:06:55,836 --> 0:06:56,646
choosing how you're going to

257
00:06:56,646 --> 0:06:57,676
implement Low Data Mode.

258
00:06:58,106 --> 0:06:59,236
Please don't block

259
00:06:59,236 --> 0:07:00,286
user-initiated work.

260
00:06:59,236 --> 0:07:00,286
user-initiated work.

261
00:07:00,796 --> 0:07:02,346
Low Data Mode is all about

262
00:07:02,986 --> 0:07:04,486
telling the system to reduce the

263
00:07:04,486 --> 0:07:05,446
amount of network data that it

264
00:07:05,446 --> 0:07:07,326
uses, but to make sure that the

265
00:07:07,326 --> 0:07:08,886
user can still accomplish what

266
00:07:08,886 --> 0:07:09,846
they're setting out to do.

267
00:07:10,926 --> 0:07:11,916
As you're going through your

268
00:07:11,916 --> 0:07:13,286
application, you may realize

269
00:07:13,286 --> 0:07:14,316
that some of the operations you

270
00:07:14,316 --> 0:07:16,206
do do take a lot of network data

271
00:07:16,206 --> 0:07:17,226
and there's nothing you can do

272
00:07:17,226 --> 0:07:17,906
about that.

273
00:07:18,936 --> 0:07:20,646
It's great to reduce the amount

274
00:07:20,646 --> 0:07:21,686
of network data you're using for

275
00:07:21,686 --> 0:07:22,926
those operations any way you

276
00:07:22,926 --> 0:07:25,166
can, but we really don't want

277
00:07:25,166 --> 0:07:26,876
you to pop up a dialog that says

278
00:07:26,926 --> 0:07:28,016
are you sure you wanted to do

279
00:07:28,016 --> 0:07:28,176
this.

280
00:07:28,336 --> 0:07:29,586
I see you're in network data and

281
00:07:29,586 --> 0:07:30,426
this is going to use a lot of

282
00:07:30,426 --> 0:07:31,106
data.

283
00:07:31,256 --> 0:07:32,476
Don't second-guess the user.

284
00:07:32,586 --> 0:07:33,696
They've turned on Low Data Mode

285
00:07:34,666 --> 0:07:35,436
and they've asked your

286
00:07:35,436 --> 0:07:36,526
application to perform that

287
00:07:36,526 --> 0:07:37,226
operation.

288
00:07:37,266 --> 0:07:40,236
Go ahead and do that.

289
00:07:40,316 --> 0:07:41,596
So, let's talk a little bit

290
00:07:41,596 --> 0:07:43,346
about the APIs that your

291
00:07:43,346 --> 0:07:45,216
application can use to implement

292
00:07:45,216 --> 0:07:45,766
Low Data Mode.

293
00:07:47,266 --> 0:07:49,546
We've added APIs to URLSession

294
00:07:49,546 --> 0:07:50,936
and Network.framework.

295
00:07:51,746 --> 0:07:54,966
The thing to keep in mind is

296
00:07:54,966 --> 0:07:55,896
that when a network is in Low

297
00:07:55,896 --> 0:07:57,676
Data Mode, the constrained

298
00:07:57,676 --> 0:07:59,046
property is going to be set on

299
00:07:59,046 --> 0:07:59,756
that network.

300
00:08:00,876 --> 0:08:02,596
So, all of the APIs that we

301
00:08:02,596 --> 0:08:03,846
provide are based on the

302
00:08:03,846 --> 0:08:04,756
constrained property.

303
00:08:05,156 --> 0:08:07,016
In URLSession, we've added a

304
00:08:07,016 --> 0:08:07,906
property called

305
00:08:07,906 --> 0:08:09,546
allowsConstrainedNetworkAccess.

306
00:08:10,326 --> 0:08:11,706
By default, this is set to true.

307
00:08:12,096 --> 0:08:13,246
Your applications are allowed to

308
00:08:13,246 --> 0:08:14,436
use Low Data Mode networks by

309
00:08:14,436 --> 0:08:14,886
default.

310
00:08:15,506 --> 0:08:17,046
You can set this to false to opt

311
00:08:17,046 --> 0:08:17,236
out.

312
00:08:17,236 --> 0:08:18,936
You can set this on URLSession

313
00:08:18,936 --> 0:08:20,576
requests as well as your

314
00:08:20,576 --> 0:08:22,026
URLSession configuration.

315
00:08:23,036 --> 0:08:25,006
With URLSession, we really

316
00:08:25,006 --> 0:08:26,536
encourage you to go ahead and

317
00:08:26,536 --> 0:08:28,796
try that large resource fetch or

318
00:08:28,796 --> 0:08:29,926
pre-fetch and set

319
00:08:29,926 --> 0:08:31,376
allowsConstrainedNetworkAccess

320
00:08:31,376 --> 0:08:31,816
to false.

321
00:08:32,635 --> 0:08:33,936
If you get a failure and the

322
00:08:33,936 --> 0:08:35,876
error has a network unavailable

323
00:08:35,876 --> 0:08:37,486
reason of constrained, that

324
00:08:37,486 --> 0:08:38,876
indicates the operation failed

325
00:08:38,926 --> 0:08:40,076
because you're in Low Data Mode

326
00:08:40,076 --> 0:08:41,756
and the right thing to do there

327
00:08:41,926 --> 0:08:43,436
is to turn around and perform

328
00:08:43,436 --> 0:08:44,776
your Low Data Mode operation.

329
00:08:44,776 --> 0:08:46,576
In the case of a large resource

330
00:08:46,696 --> 0:08:48,016
fetch, that would be fetching a

331
00:08:48,016 --> 0:08:49,206
smaller resource instead.

332
00:08:49,206 --> 0:08:51,026
In the case of a pre-fetch, just

333
00:08:51,026 --> 0:08:52,076
wait until the user actually

334
00:08:52,076 --> 0:08:52,836
needs the content.

335
00:08:53,916 --> 0:08:55,936
This has the added benefit of

336
00:08:55,936 --> 0:08:56,856
letting you take advantage of

337
00:08:56,856 --> 0:08:57,926
anything that may actually

338
00:08:57,926 --> 0:08:58,946
already be in the cache.

339
00:08:59,876 --> 0:09:01,366
Now, with Network.framework, you

340
00:08:59,876 --> 0:09:01,366
Now, with Network.framework, you

341
00:09:01,366 --> 0:09:02,446
have a similar property called

342
00:09:02,446 --> 0:09:03,646
prohibitConstrainedPaths.

343
00:09:04,136 --> 0:09:05,396
You can set this to true to

344
00:09:05,396 --> 0:09:06,666
block your connections and other

345
00:09:06,666 --> 0:09:08,526
networking objects from using

346
00:09:08,526 --> 0:09:09,556
Low Data Mode networks.

347
00:09:10,796 --> 0:09:12,276
With Network.framework you have

348
00:09:12,276 --> 0:09:13,056
another option, though.

349
00:09:13,376 --> 0:09:14,216
If you're going to connect to

350
00:09:14,216 --> 0:09:15,566
the same host whether you're in

351
00:09:15,566 --> 0:09:17,046
Low Data Mode or not, you can go

352
00:09:17,046 --> 0:09:17,946
ahead and establish that

353
00:09:17,946 --> 0:09:18,426
connection.

354
00:09:18,776 --> 0:09:19,736
And once the connection is

355
00:09:19,736 --> 0:09:21,196
established, you can get the

356
00:09:21,196 --> 0:09:23,016
current path and on the current

357
00:09:23,016 --> 0:09:23,996
path you can check to see if

358
00:09:23,996 --> 0:09:25,516
it's constrained and this will

359
00:09:25,516 --> 0:09:26,396
tell you whether or not this

360
00:09:26,426 --> 0:09:28,056
connection is established over a

361
00:09:28,056 --> 0:09:29,046
Low Data Mode network.

362
00:09:30,296 --> 0:09:32,216
Now, if you go this route, it's

363
00:09:32,216 --> 0:09:33,356
really important to make sure

364
00:09:33,356 --> 0:09:34,526
that you handle path updates.

365
00:09:35,876 --> 0:09:36,896
It's very possible that the

366
00:09:36,896 --> 0:09:38,346
constrained property can change

367
00:09:38,376 --> 0:09:39,316
over the lifetime of your

368
00:09:39,316 --> 0:09:40,616
connection.

369
00:09:43,176 --> 0:09:44,106
So, I spent a lot of time

370
00:09:44,106 --> 0:09:45,126
talking about the constrained

371
00:09:45,126 --> 0:09:46,406
property and Low Data Mode.

372
00:09:47,066 --> 0:09:48,236
There are a few other properties

373
00:09:48,236 --> 0:09:49,876
that your application can use to

374
00:09:49,876 --> 0:09:51,306
make decisions about what to do

375
00:09:51,586 --> 0:09:52,336
on a given network.

376
00:09:53,376 --> 0:09:54,946
There is the expensive property,

377
00:09:55,016 --> 0:09:55,746
which we introduced in

378
00:09:55,746 --> 0:09:56,936
Network.framework last year and

379
00:09:56,936 --> 0:09:58,336
we're bringing to URLSession

380
00:09:58,406 --> 0:09:58,656
with the

381
00:09:58,656 --> 0:09:59,976
allowsExpensiveNetworkAccess

382
00:09:59,976 --> 0:10:02,386
property this year.

383
00:09:59,976 --> 0:10:02,386
property this year.

384
00:10:03,656 --> 0:10:06,056
There's also checks for specific

385
00:10:06,056 --> 0:10:07,346
interface types, such as

386
00:10:07,346 --> 0:10:08,526
Cellular or Wi-Fi.

387
00:10:09,896 --> 0:10:11,006
If you haven't adopted any of

388
00:10:11,006 --> 0:10:12,226
these things yet, you're in a

389
00:10:12,226 --> 0:10:13,606
great position to focus on

390
00:10:13,606 --> 0:10:14,886
adopting Low Data Mode and

391
00:10:14,886 --> 0:10:16,046
that's definitely the way to go.

392
00:10:16,846 --> 0:10:18,006
With Low Data Mode, which

393
00:10:18,006 --> 0:10:19,196
correlates to the constrained

394
00:10:19,236 --> 0:10:22,646
property, the user has control.

395
00:10:22,776 --> 0:10:24,396
They have a setting they control

396
00:10:24,396 --> 0:10:25,466
that with.

397
00:10:25,466 --> 0:10:26,766
Expensive, on the other hand, is

398
00:10:26,766 --> 0:10:27,976
a property that's set by the

399
00:10:27,976 --> 0:10:29,946
system and it's almost always

400
00:10:29,996 --> 0:10:31,386
set for cellular networks and

401
00:10:31,386 --> 0:10:32,976
it's also set for Wi-Fi networks

402
00:10:33,016 --> 0:10:34,106
when they're associated with a

403
00:10:34,106 --> 0:10:35,196
Personal Hotspot.

404
00:10:36,316 --> 0:10:37,946
You can also check for cellular,

405
00:10:38,286 --> 0:10:39,536
but that also is something that

406
00:10:39,536 --> 0:10:40,916
the user has no control over.

407
00:10:41,896 --> 0:10:42,766
So, if you're currently doing

408
00:10:42,766 --> 0:10:44,086
any checks based on cellular

409
00:10:44,146 --> 0:10:45,386
interfaces or expensive

410
00:10:45,436 --> 0:10:47,116
properties, it's a really great

411
00:10:47,116 --> 0:10:49,406
idea to move over to doing-- to

412
00:10:49,406 --> 0:10:51,166
using constrained and taking

413
00:10:51,166 --> 0:10:52,226
advantage of Low Data Mode.

414
00:10:52,886 --> 0:10:54,606
If you've looked at these

415
00:10:54,606 --> 0:10:55,896
options and you've decided that

416
00:10:55,896 --> 0:10:57,166
you still want to be making

417
00:10:57,166 --> 0:10:58,126
decisions based on whether

418
00:10:58,126 --> 0:10:59,626
something's expensive or

419
00:10:59,626 --> 0:11:01,636
cellular, we strongly encourage

420
00:10:59,626 --> 0:11:01,636
cellular, we strongly encourage

421
00:11:01,636 --> 0:11:02,566
you to use expensive.

422
00:11:03,746 --> 0:11:05,336
Expensive is a lot more flexible

423
00:11:05,336 --> 0:11:07,196
and in many ways it effectively

424
00:11:07,196 --> 0:11:09,026
futureproofs your application.

425
00:11:09,676 --> 0:11:11,186
Right now, cellular networks are

426
00:11:11,186 --> 0:11:12,046
almost always marked as

427
00:11:12,046 --> 0:11:13,426
expensive, but they may not be

428
00:11:13,426 --> 0:11:14,726
in the future and there are

429
00:11:14,726 --> 0:11:16,106
other interface types that may

430
00:11:16,106 --> 0:11:17,476
come around that may also be

431
00:11:17,476 --> 0:11:17,956
expensive.

432
00:11:18,456 --> 0:11:19,846
By using the expensive property,

433
00:11:19,956 --> 0:11:21,236
your application is going to do

434
00:11:21,236 --> 0:11:22,346
the right thing in the future

435
00:11:22,346 --> 0:11:23,346
with different interfaces.

436
00:11:23,996 --> 0:11:24,686
If you're checking for a

437
00:11:24,686 --> 0:11:25,726
specific interface such as

438
00:11:25,726 --> 0:11:27,326
cellular, you're not going to be

439
00:11:27,326 --> 0:11:29,316
able to take advantage of that.

440
00:11:29,916 --> 0:11:31,116
I'm really excited to see what

441
00:11:31,116 --> 0:11:32,606
you guys do adopting Low Data

442
00:11:32,606 --> 0:11:32,816
Mode.

443
00:11:33,146 --> 0:11:34,216
Thank you so much for your time.

444
00:11:34,456 --> 0:11:35,426
With that, I'd like to have

445
00:11:35,426 --> 0:11:36,936
Guoye come up to talk about

446
00:11:36,936 --> 0:11:38,566
Combine in URLSession.

447
00:11:39,516 --> 0:11:42,636
[ Applause ]

448
00:11:43,136 --> 0:11:43,726
&gt;&gt; Thank you, Josh.

449
00:11:45,096 --> 0:11:45,916
Good morning.

450
00:11:46,206 --> 0:11:48,346
I'm Guoye Zhang.

451
00:11:48,696 --> 0:11:50,616
I'm excited to tell you today

452
00:11:50,886 --> 0:11:52,366
about how we are supporting a

453
00:11:52,366 --> 0:11:54,026
new Swift framework, Combine in

454
00:11:54,026 --> 0:11:56,466
URLSession, and how you can use

455
00:11:56,466 --> 0:11:57,866
Combine to streamline your

456
00:11:57,866 --> 0:11:59,386
networking code.

457
00:12:00,976 --> 0:12:03,446
Combine brings decorative

458
00:12:03,766 --> 0:12:04,976
asynchronous programming to

459
00:12:04,976 --> 0:12:05,486
Swift.

460
00:12:06,446 --> 0:12:09,486
To explain what it is, let me

461
00:12:09,586 --> 0:12:11,266
start with an example of

462
00:12:11,266 --> 0:12:12,806
building a responsive search

463
00:12:12,806 --> 0:12:13,156
field.

464
00:12:13,786 --> 0:12:16,826
So, search field publishes

465
00:12:16,826 --> 0:12:19,676
values whenever user types and

466
00:12:19,676 --> 0:12:21,446
sink here subscribes and

467
00:12:21,446 --> 0:12:23,436
receives a URL to start a

468
00:12:23,436 --> 0:12:24,006
search.

469
00:12:24,556 --> 0:12:27,326
In-between, we use the map

470
00:12:27,326 --> 0:12:30,416
operator to map the value into a

471
00:12:30,416 --> 0:12:30,626
URL.

472
00:12:33,526 --> 0:12:35,496
Now, let's suppose I only want

473
00:12:35,496 --> 0:12:37,306
to start a search when there is

474
00:12:37,346 --> 0:12:38,316
enough content.

475
00:12:38,916 --> 0:12:42,406
We can use the filter operator.

476
00:12:43,896 --> 0:12:45,566
The filter operator in this case

477
00:12:45,946 --> 0:12:47,956
drops all strings shorter than

478
00:12:48,026 --> 0:12:48,916
three characters.

479
00:12:52,406 --> 0:12:54,926
Now we've eliminated the user's

480
00:12:54,926 --> 0:12:57,056
queries like a single H.

481
00:12:57,896 --> 0:13:00,066
However, the search still

482
00:12:57,896 --> 0:13:00,066
However, the search still

483
00:13:00,066 --> 0:13:01,526
happens too frequently.

484
00:13:02,286 --> 0:13:04,526
What if I only want to search

485
00:13:04,806 --> 0:13:06,356
when user stops typing for a

486
00:13:06,356 --> 0:13:06,756
moment.

487
00:13:07,396 --> 0:13:11,426
We can use debounce operator.

488
00:13:12,516 --> 0:13:17,776
[ Applause ]

489
00:13:18,276 --> 0:13:20,576
So, debounce delays the value

490
00:13:20,896 --> 0:13:22,566
and only forwards it when there

491
00:13:22,566 --> 0:13:24,686
is a significant delay, in this

492
00:13:24,686 --> 0:13:26,486
case 0.2 seconds.

493
00:13:30,316 --> 0:13:33,296
However, with debounce, if user

494
00:13:33,296 --> 0:13:35,186
types something and deletes it,

495
00:13:35,646 --> 0:13:37,176
we might end up sending the same

496
00:13:37,176 --> 0:13:38,766
value down the chain and

497
00:13:38,766 --> 0:13:40,806
starting the same search over

498
00:13:40,806 --> 0:13:43,136
and over again.

499
00:13:43,356 --> 0:13:45,786
To solve this, we can add the

500
00:13:45,786 --> 0:13:47,416
removeDuplicates operator.

501
00:13:49,036 --> 0:13:51,836
removeDuplicates remembers the

502
00:13:51,836 --> 0:13:54,346
last value received and only

503
00:13:54,346 --> 0:13:55,616
forwards a new value when it

504
00:13:55,616 --> 0:13:56,526
changes.

505
00:14:01,356 --> 0:14:03,526
Now we have the final version of

506
00:14:03,526 --> 0:14:05,596
the search field by changing

507
00:14:05,596 --> 0:14:07,696
these powerful operators, your

508
00:14:07,696 --> 0:14:09,806
asynchronous code be linear and

509
00:14:09,806 --> 0:14:10,656
composable.

510
00:14:16,116 --> 0:14:19,726
Combine processes values over

511
00:14:19,726 --> 0:14:20,196
time.

512
00:14:21,336 --> 0:14:23,866
It consists of publishers,

513
00:14:24,146 --> 0:14:26,216
operators, and subscribers.

514
00:14:27,596 --> 0:14:30,166
The chain is driven by the

515
00:14:30,166 --> 0:14:31,466
request sent from the

516
00:14:31,466 --> 0:14:32,526
subscriber.

517
00:14:34,236 --> 0:14:36,136
In response to the request,

518
00:14:36,676 --> 0:14:38,236
publisher sends value down the

519
00:14:38,236 --> 0:14:38,536
chain.

520
00:14:39,486 --> 0:14:41,436
This is how that pressure is

521
00:14:41,436 --> 0:14:42,476
handled by Combine.

522
00:14:43,116 --> 0:14:46,376
If you want to learn more,

523
00:14:47,306 --> 0:14:48,866
Introducing Combine session

524
00:14:48,866 --> 0:14:50,596
video will be available shortly

525
00:14:51,076 --> 0:14:52,536
and I encourage you to attend

526
00:14:52,796 --> 0:14:54,676
Combine in Practice sessions

527
00:14:55,426 --> 0:14:58,276
this afternoon.

528
00:14:58,436 --> 0:15:00,326
Networking is inherently

529
00:14:58,436 --> 0:15:00,326
Networking is inherently

530
00:15:00,326 --> 0:15:02,006
asynchronous, that's why it's

531
00:15:02,006 --> 0:15:03,356
perfect to adopt Combine.

532
00:15:05,396 --> 0:15:07,706
This year, we're introducing

533
00:15:07,706 --> 0:15:10,206
DataTaskPublisher in URLSession.

534
00:15:10,876 --> 0:15:13,076
It is a single value publisher

535
00:15:13,616 --> 0:15:14,936
and it works similarly to our

536
00:15:14,996 --> 0:15:16,276
existing closure based

537
00:15:16,276 --> 0:15:18,946
convenience methods, which means

538
00:15:18,946 --> 0:15:20,736
you can create it from a shared

539
00:15:20,736 --> 0:15:23,016
URLSession or from your own

540
00:15:23,016 --> 0:15:24,706
URLSession and receive

541
00:15:24,706 --> 0:15:26,386
authentication challenges and

542
00:15:26,386 --> 0:15:27,986
metrics on your delegate.

543
00:15:28,576 --> 0:15:31,386
This is the interface of

544
00:15:31,386 --> 0:15:32,556
DataTaskPublisher.

545
00:15:33,116 --> 0:15:35,746
It conforms to the publisher

546
00:15:35,746 --> 0:15:37,006
protocol.

547
00:15:37,806 --> 0:15:39,926
On success, it sends you a true

548
00:15:39,926 --> 0:15:41,906
pool of data and response.

549
00:15:42,196 --> 0:15:44,526
On failure, it sends you an URL

550
00:15:44,526 --> 0:15:44,976
error.

551
00:15:48,416 --> 0:15:50,206
Now, let me give you a demo on

552
00:15:50,206 --> 0:15:51,976
how Combine works in URLSession.

553
00:15:59,006 --> 0:16:00,186
So, for the purpose of this

554
00:15:59,006 --> 0:16:00,186
So, for the purpose of this

555
00:16:00,186 --> 0:16:02,766
demo, I've disabled URL cache,

556
00:16:02,966 --> 0:16:04,536
so all the resources to fetch

557
00:16:04,536 --> 0:16:05,456
over the network.

558
00:16:06,296 --> 0:16:08,126
I've also used Network Link

559
00:16:08,226 --> 0:16:09,866
Conditioner to simulate a

560
00:16:09,866 --> 0:16:10,976
realistic 3G environment.

561
00:16:16,426 --> 0:16:18,396
So, I am building this for a bar

562
00:16:18,396 --> 0:16:19,286
called PubSocket.

563
00:16:20,636 --> 0:16:23,536
This app shows name, image, and

564
00:16:23,536 --> 0:16:25,546
item price of each item in the

565
00:16:25,546 --> 0:16:25,956
bar.

566
00:16:27,956 --> 0:16:29,676
So, after listening to Josh's

567
00:16:29,676 --> 0:16:31,326
talk about Low Data Mode, I've

568
00:16:31,326 --> 0:16:32,626
decided to provide a

569
00:16:32,626 --> 0:16:34,346
high-resolution image and a

570
00:16:34,346 --> 0:16:36,206
low-resolution image for Low

571
00:16:36,696 --> 0:16:37,756
Data Mode.

572
00:16:37,976 --> 0:16:39,336
Right now I'm in Low Data Mode,

573
00:16:39,336 --> 0:16:40,726
so you see these black and white

574
00:16:40,726 --> 0:16:40,976
images.

575
00:16:43,686 --> 0:16:45,296
And if I switch off Low Data

576
00:16:49,036 --> 0:16:50,676
Mode, these images are replaced

577
00:16:50,676 --> 0:16:51,656
with the high-resolution

578
00:16:51,656 --> 0:16:51,976
variant.

579
00:16:55,416 --> 0:16:56,896
Let's see how this is currently

580
00:16:56,896 --> 0:16:57,946
implemented without Combine.

581
00:17:04,876 --> 0:17:06,516
So the interface is built in

582
00:17:06,516 --> 0:17:09,396
UITableView and here we have the

583
00:17:09,396 --> 0:17:11,516
data source method cellForRowAt

584
00:17:11,516 --> 0:17:12,236
indexPath.

585
00:17:13,156 --> 0:17:15,675
In this method, we dequeue a

586
00:17:15,675 --> 0:17:18,266
reusable cell and configure the

587
00:17:18,266 --> 0:17:19,866
name and price of each item on

588
00:17:19,866 --> 0:17:20,366
the cell.

589
00:17:21,596 --> 0:17:25,626
Then we start a URL request to

590
00:17:25,626 --> 0:17:27,386
fetch the high-resolution image

591
00:17:27,516 --> 0:17:29,176
and disable constrained network

592
00:17:29,176 --> 0:17:29,816
access.

593
00:17:31,116 --> 0:17:33,196
pubSession here is the shared

594
00:17:33,196 --> 0:17:35,066
global session we use in

595
00:17:35,066 --> 0:17:37,496
PubSocket app and we use the

596
00:17:37,496 --> 0:17:39,296
pubSession to create a data task

597
00:17:39,296 --> 0:17:40,226
from the request.

598
00:17:44,376 --> 0:17:46,826
When task finishes, we check to

599
00:17:46,826 --> 0:17:48,546
see if the status code is 200.

600
00:17:48,546 --> 0:17:50,796
OK. We convert the data into the

601
00:17:50,796 --> 0:17:52,496
image and put the image on the

602
00:17:52,496 --> 0:17:52,946
cell.

603
00:17:59,496 --> 0:18:01,446
When task fails due to Low Data

604
00:17:59,496 --> 0:18:01,446
When task fails due to Low Data

605
00:18:01,446 --> 0:18:04,256
Mode, we create a new data task

606
00:18:04,556 --> 0:18:05,746
to fetch the low-resolution

607
00:18:05,746 --> 0:18:05,976
image.

608
00:18:09,556 --> 0:18:10,776
And we do the same thing here.

609
00:18:10,776 --> 0:18:13,406
We check the status code, we

610
00:18:13,406 --> 0:18:14,806
convert the image, and put it on

611
00:18:14,806 --> 0:18:14,976
the cell.

612
00:18:17,576 --> 0:18:18,686
Don't forget to resume these

613
00:18:18,686 --> 0:18:18,916
tasks.

614
00:18:23,696 --> 0:18:26,056
So, as a networking engineer, I

615
00:18:26,056 --> 0:18:27,616
know the networking logic here

616
00:18:27,616 --> 0:18:28,176
is solid.

617
00:18:29,216 --> 0:18:30,556
I'm adhering to the best

618
00:18:30,556 --> 0:18:31,686
practice of not doing any

619
00:18:31,686 --> 0:18:32,566
pre-fetch acts.

620
00:18:33,236 --> 0:18:36,046
However, I'm not very happy with

621
00:18:36,046 --> 0:18:38,196
the current code because it has

622
00:18:38,196 --> 0:18:39,566
lots of duplications.

623
00:18:40,476 --> 0:18:42,236
We are checking the status code,

624
00:18:42,236 --> 0:18:46,796
converting the image twice.

625
00:18:46,966 --> 0:18:48,796
Also, you might have noticed

626
00:18:49,056 --> 0:18:50,286
I've made the very common

627
00:18:50,286 --> 0:18:52,436
mistake of capturing the cell

628
00:18:52,436 --> 0:18:53,676
and putting the image on the

629
00:18:53,676 --> 0:18:54,976
cell asynchronously.

630
00:18:57,126 --> 0:18:58,596
The cell could have already been

631
00:18:58,596 --> 0:19:00,516
reused at this time by UIKit.

632
00:18:58,596 --> 0:19:00,516
reused at this time by UIKit.

633
00:19:02,446 --> 0:19:03,926
So, I'm going to show you the

634
00:19:03,926 --> 0:19:04,256
bug.

635
00:19:04,256 --> 0:19:07,026
I'm going to scroll down very

636
00:19:07,026 --> 0:19:07,426
quickly.

637
00:19:07,426 --> 0:19:08,946
Please pay attention to the last

638
00:19:08,946 --> 0:19:10,236
few items on the menu.

639
00:19:10,796 --> 0:19:13,546
As you can see, hot dog and

640
00:19:13,546 --> 0:19:15,086
drumstick have the wrong image

641
00:19:15,086 --> 0:19:15,476
being placed.

642
00:19:19,086 --> 0:19:20,526
Let me do it again.

643
00:19:20,526 --> 0:19:21,636
I'm going to scroll up to the

644
00:19:21,636 --> 0:19:21,986
top.

645
00:19:21,986 --> 0:19:23,176
Please pay attention to the

646
00:19:23,176 --> 0:19:24,356
first few items.

647
00:19:27,436 --> 0:19:28,686
Yeah, root beer and fries have

648
00:19:28,686 --> 0:19:30,396
the wrong image being placed on

649
00:19:30,396 --> 0:19:31,456
them before they are replaced

650
00:19:31,456 --> 0:19:31,976
with the correct one.

651
00:19:37,506 --> 0:19:38,886
Now let's see how we can use

652
00:19:38,886 --> 0:19:40,746
Combine to fix all these issues.

653
00:19:42,676 --> 0:19:44,666
First, let me delete this code

654
00:19:44,666 --> 0:19:44,976
to fetch.

655
00:19:49,666 --> 0:19:50,446
Here we have the

656
00:19:50,446 --> 0:19:52,446
MenuItemTableViewCell class

657
00:19:52,446 --> 0:19:52,746
here.

658
00:19:53,146 --> 0:19:55,816
So, cell receives an image, so

659
00:19:55,816 --> 0:19:57,106
it's a good place to put a

660
00:19:57,106 --> 0:19:58,866
subscriber on it.

661
00:20:00,076 --> 0:20:02,186
The subscriber here conforms to

662
00:20:02,186 --> 0:20:03,526
any cancelable protocol.

663
00:20:04,796 --> 0:20:07,096
We can cancel the subscriber in

664
00:20:08,676 --> 0:20:10,486
prepare for reuse method.

665
00:20:11,036 --> 0:20:12,326
The cancellation happens

666
00:20:12,326 --> 0:20:13,886
immediately, which means we

667
00:20:13,886 --> 0:20:15,586
won't ever get the chance of any

668
00:20:15,586 --> 0:20:16,736
image being placed on the wrong

669
00:20:16,736 --> 0:20:17,106
cell.

670
00:20:18,996 --> 0:20:20,556
Now let's go back to the

671
00:20:20,556 --> 0:20:22,196
TableView data source method,

672
00:20:22,196 --> 0:20:23,776
cellForRowAt indexPath.

673
00:20:26,256 --> 0:20:28,046
We start by doing the same

674
00:20:28,046 --> 0:20:30,216
thing, create a URL request and

675
00:20:30,386 --> 0:20:31,916
fetch the high-resolution image

676
00:20:32,156 --> 0:20:33,626
and disable constrained network

677
00:20:33,626 --> 0:20:34,116
access.

678
00:20:34,926 --> 0:20:36,876
But instead of a data task, we

679
00:20:36,876 --> 0:20:38,756
create a data task publisher for

680
00:20:38,756 --> 0:20:39,446
the request.

681
00:20:44,156 --> 0:20:46,536
Then we use the new tryCatch

682
00:20:46,536 --> 0:20:47,766
operator in Combine.

683
00:20:48,336 --> 0:20:50,446
The tryCatch operator catches

684
00:20:50,446 --> 0:20:51,466
the error produced by

685
00:20:51,466 --> 0:20:53,856
DataTaskPublisher and if the

686
00:20:53,856 --> 0:20:55,506
task failed because of Low Data

687
00:20:55,506 --> 0:20:57,856
Mode, we replace the publisher

688
00:20:57,856 --> 0:20:59,236
with the new publisher to fetch

689
00:20:59,236 --> 0:21:01,146
the low-resolution image.

690
00:20:59,236 --> 0:21:01,146
the low-resolution image.

691
00:21:02,776 --> 0:21:04,486
Otherwise, we just rethrow the

692
00:21:04,486 --> 0:21:05,686
same error down the chain.

693
00:21:10,336 --> 0:21:13,226
Next, let's use tryMap operator

694
00:21:13,416 --> 0:21:15,036
to handle the success case where

695
00:21:15,036 --> 0:21:16,206
we receive the data and the

696
00:21:16,206 --> 0:21:16,956
response.

697
00:21:17,406 --> 0:21:18,986
We check the status code and

698
00:21:18,986 --> 0:21:20,566
create an image from the data.

699
00:21:21,876 --> 0:21:23,606
This map handles both

700
00:21:23,936 --> 0:21:25,286
high-resolution image and

701
00:21:25,286 --> 0:21:26,446
low-resolution image,

702
00:21:26,856 --> 0:21:27,896
eliminating the code

703
00:21:27,896 --> 0:21:28,646
duplication.

704
00:21:33,556 --> 0:21:35,926
Finally, we replace the error

705
00:21:35,926 --> 0:21:38,776
with a placeholder image, switch

706
00:21:38,776 --> 0:21:40,566
the main queue, and use the

707
00:21:40,566 --> 0:21:42,646
assigned subscriber to put the

708
00:21:42,646 --> 0:21:43,596
image on the cell.

709
00:21:51,096 --> 0:21:52,136
Now, this is pretty good.

710
00:21:52,396 --> 0:21:53,976
We've implemented the same logic

711
00:21:53,976 --> 0:21:55,396
with much shorter code and

712
00:21:55,396 --> 0:21:56,076
linear code.

713
00:21:57,436 --> 0:21:58,756
But can we do more?

714
00:21:59,726 --> 0:22:01,336
There is one more operator I

715
00:21:59,726 --> 0:22:01,336
There is one more operator I

716
00:22:01,336 --> 0:22:02,226
want to show you.

717
00:22:02,786 --> 0:22:04,506
It is called retry.

718
00:22:06,936 --> 0:22:09,446
Imagine what you have to-- what

719
00:22:09,446 --> 0:22:11,426
you have to do before to support

720
00:22:11,426 --> 0:22:11,976
retry.

721
00:22:12,586 --> 0:22:16,276
You have to either call the data

722
00:22:16,276 --> 0:22:19,686
task creator recursively or

723
00:22:19,686 --> 0:22:20,996
maintain a state machine.

724
00:22:22,486 --> 0:22:24,976
Now in Combine, I can just put

725
00:22:24,976 --> 0:22:28,346
retry operator right here before

726
00:22:28,346 --> 0:22:29,596
we replace the error.

727
00:22:32,516 --> 0:22:37,826
[ Applause ]

728
00:22:38,326 --> 0:22:40,276
So, retry catches the errors

729
00:22:40,276 --> 0:22:43,116
thrown here and it retries by

730
00:22:43,116 --> 0:22:44,406
restarting the chain of

731
00:22:44,406 --> 0:22:46,466
operators and fetches the image

732
00:22:46,466 --> 0:22:46,906
again.

733
00:22:46,906 --> 0:22:49,656
In this case, I'm just retrying

734
00:22:49,656 --> 0:22:49,856
once.

735
00:22:53,816 --> 0:22:55,616
So, networking APIs on all

736
00:22:55,616 --> 0:22:57,166
platforms are designed to be

737
00:22:57,166 --> 0:22:59,576
very reliable, so in general you

738
00:22:59,576 --> 0:23:00,646
don't need to retry.

739
00:22:59,576 --> 0:23:00,646
don't need to retry.

740
00:23:01,306 --> 0:23:03,466
However, your app might need to

741
00:23:03,466 --> 0:23:05,066
connect with some flaky server

742
00:23:05,066 --> 0:23:07,496
or meta boxes that gives you 500

743
00:23:07,496 --> 0:23:09,136
server errors frequently.

744
00:23:09,666 --> 0:23:12,906
In this case, this tryMap

745
00:23:12,906 --> 0:23:14,876
operator will throw an invalid

746
00:23:14,876 --> 0:23:16,756
server response error, which can

747
00:23:16,756 --> 0:23:17,956
be caught by retry.

748
00:23:21,536 --> 0:23:23,296
But please be aware that

749
00:23:23,296 --> 0:23:24,906
networking operation is very

750
00:23:24,906 --> 0:23:27,336
expensive; retry is no

751
00:23:27,336 --> 0:23:29,666
exception, so avoid retry if

752
00:23:29,666 --> 0:23:30,396
possible.

753
00:23:30,956 --> 0:23:32,996
If you have to retry, start with

754
00:23:32,996 --> 0:23:34,066
a very low number.

755
00:23:35,916 --> 0:23:37,826
Also, please pay attention to

756
00:23:37,826 --> 0:23:39,686
the idempotence of your request.

757
00:23:40,876 --> 0:23:43,206
In my app, downloading an image

758
00:23:43,206 --> 0:23:45,436
twice is fine, but if your app

759
00:23:45,436 --> 0:23:46,856
handles transaction like

760
00:23:46,856 --> 0:23:49,236
payment, blindly retrying could

761
00:23:49,236 --> 0:23:50,286
be very dangerous.

762
00:23:56,286 --> 0:23:57,806
Now let me turn on Low Data Mode

763
00:23:57,806 --> 0:23:57,976
again.

764
00:24:06,266 --> 0:24:07,606
And let's see the app running

765
00:24:07,606 --> 0:24:07,846
again.

766
00:24:23,286 --> 0:24:24,676
As you can see, we fetched the

767
00:24:24,676 --> 0:24:25,826
low-resolution images just like

768
00:24:25,826 --> 0:24:25,976
before.

769
00:24:29,066 --> 0:24:30,616
And if I turn off Low Data Mode,

770
00:24:34,416 --> 0:24:36,716
the same high-resolution images

771
00:24:36,976 --> 0:24:38,496
and we won't get any wrong

772
00:24:38,496 --> 0:24:39,976
images being placed on the cell.

773
00:24:44,516 --> 0:24:52,206
[ Applause ]

774
00:24:52,706 --> 0:24:55,646
OK. Let's go back to the slides.

775
00:24:59,046 --> 0:25:01,086
To recap, I've just shown you

776
00:24:59,046 --> 0:25:01,086
To recap, I've just shown you

777
00:25:01,086 --> 0:25:02,276
how Combine can make your

778
00:25:02,276 --> 0:25:05,306
networking code concise, linear,

779
00:25:05,516 --> 0:25:07,396
and less error-prone.

780
00:25:08,156 --> 0:25:09,646
I've also shown you how

781
00:25:09,646 --> 0:25:11,146
composable these Combine

782
00:25:11,146 --> 0:25:12,946
operators are, that you can

783
00:25:12,946 --> 0:25:14,396
support retry by just adding

784
00:25:14,396 --> 0:25:15,346
one-off code.

785
00:25:16,256 --> 0:25:18,536
But please pay attention to use

786
00:25:18,536 --> 0:25:20,636
low retry count and only retry

787
00:25:20,636 --> 0:25:22,036
idempotent requests.

788
00:25:23,026 --> 0:25:25,576
Finally, I've shown you how you

789
00:25:25,936 --> 0:25:28,056
can use Combine with Low Data

790
00:25:28,056 --> 0:25:30,166
Mode without doing any pre-fetch

791
00:25:30,166 --> 0:25:30,546
checks.

792
00:25:34,176 --> 0:25:35,736
Here is the code I extracted

793
00:25:35,736 --> 0:25:37,666
from my demo to do adaptive

794
00:25:37,666 --> 0:25:39,026
loading for Low Data Mode.

795
00:25:39,636 --> 0:25:43,276
It takes a regular URL and a low

796
00:25:43,276 --> 0:25:45,846
data URL and gives you back a

797
00:25:45,846 --> 0:25:48,696
publisher of data.

798
00:25:48,876 --> 0:25:51,906
First, we create a-- we create a

799
00:25:51,906 --> 0:25:53,946
request to fetch the regular URL

800
00:25:54,156 --> 0:25:55,696
and disable constrained network

801
00:25:55,696 --> 0:25:56,186
access.

802
00:25:57,196 --> 0:25:58,976
We use the URL-- we use the

803
00:25:58,976 --> 0:26:00,676
request to create a data task

804
00:25:58,976 --> 0:26:00,676
request to create a data task

805
00:26:00,676 --> 0:26:01,376
publisher.

806
00:26:03,116 --> 0:26:05,516
Then, immediately then we handle

807
00:26:05,516 --> 0:26:08,106
the error caused by Low Data

808
00:26:08,106 --> 0:26:09,916
Mode and then we replace the

809
00:26:09,916 --> 0:26:11,336
publisher with a new publisher

810
00:26:11,516 --> 0:26:13,376
to fetch the low data URL.

811
00:26:13,866 --> 0:26:17,466
Next, we handle both success

812
00:26:17,466 --> 0:26:19,486
cases together, checking the

813
00:26:19,556 --> 0:26:21,346
status code and give the data

814
00:26:21,346 --> 0:26:21,976
back to you.

815
00:26:25,796 --> 0:26:27,066
You can use this code as a

816
00:26:27,066 --> 0:26:29,076
starting point of Combine and

817
00:26:29,076 --> 0:26:31,156
Low Data Mode and customize this

818
00:26:31,156 --> 0:26:31,936
code to your needs.

819
00:26:34,096 --> 0:26:35,646
I have to mention that some of

820
00:26:35,646 --> 0:26:37,316
the APIs are not available yet

821
00:26:37,406 --> 0:26:38,216
in current SDK.

822
00:26:38,216 --> 0:26:40,166
We are working on getting them

823
00:26:40,166 --> 0:26:41,816
into a future beta.

824
00:26:45,486 --> 0:26:46,956
Next, I want to invite my

825
00:26:46,956 --> 0:26:49,236
colleague Jiten to talk about

826
00:26:49,236 --> 0:26:49,956
WebSocket.

827
00:26:50,726 --> 0:26:51,946
&gt;&gt; Thank you, Guoye.

828
00:26:51,946 --> 0:26:54,166
Good morning everyone.

829
00:26:54,606 --> 0:26:56,946
My name is Jiten Mehta and I'm

830
00:26:56,946 --> 0:26:58,506
excited to talk to you about the

831
00:26:58,506 --> 0:27:00,516
WebSocket protocol in Apple's

832
00:26:58,506 --> 0:27:00,516
WebSocket protocol in Apple's

833
00:27:00,516 --> 0:27:03,026
networking frameworks new in iOS

834
00:27:03,076 --> 0:27:05,026
13 and macOS Catalina.

835
00:27:06,726 --> 0:27:08,696
In the past years, a large

836
00:27:08,696 --> 0:27:09,886
number of developers have asked

837
00:27:09,886 --> 0:27:11,446
us for the WebSocket protocol

838
00:27:11,446 --> 0:27:13,216
support in Apple's frameworks.

839
00:27:14,096 --> 0:27:15,516
In fact, it was the number one

840
00:27:15,516 --> 0:27:16,666
developer request from a

841
00:27:16,666 --> 0:27:18,066
networking survey that we

842
00:27:18,066 --> 0:27:18,976
conducted last year.

843
00:27:22,456 --> 0:27:24,526
WebSocket allows bidirectional

844
00:27:24,526 --> 0:27:26,816
communication over a single HTTP

845
00:27:26,816 --> 0:27:27,496
connection.

846
00:27:28,676 --> 0:27:30,346
This enables developers to write

847
00:27:30,346 --> 0:27:31,966
applications like chat,

848
00:27:32,736 --> 0:27:34,356
multiplayer games, and other

849
00:27:34,356 --> 0:27:36,166
real-time applications.

850
00:27:36,976 --> 0:27:38,606
WebSocket works over the

851
00:27:38,606 --> 0:27:41,386
well-known HTTP ports and is

852
00:27:41,446 --> 0:27:42,816
fully compatible with the

853
00:27:42,816 --> 0:27:44,426
existing web infrastructure,

854
00:27:44,796 --> 0:27:46,176
allowing you to connect to

855
00:27:46,246 --> 0:27:48,886
proxies, CDNs, and firewalls.

856
00:27:50,256 --> 0:27:52,156
Historically, the WebSocket

857
00:27:52,156 --> 0:27:54,316
protocol has been available as a

858
00:27:54,316 --> 0:27:56,686
JavaScript API in web browsers,

859
00:27:57,866 --> 0:27:59,146
but looking at the benefits that

860
00:27:59,146 --> 0:28:00,636
WebSocket brings to web apps,

861
00:27:59,146 --> 0:28:00,636
WebSocket brings to web apps,

862
00:28:00,936 --> 0:28:03,206
we've decided to extend this API

863
00:28:03,426 --> 0:28:05,446
to our networking framework in

864
00:28:05,446 --> 0:28:07,026
addition to the existing

865
00:28:07,026 --> 0:28:09,176
JavaScript API already available

866
00:28:09,176 --> 0:28:09,906
in web views.

867
00:28:11,226 --> 0:28:12,746
This enables you to use your

868
00:28:12,746 --> 0:28:14,856
existing web infrastructure and

869
00:28:14,856 --> 0:28:16,166
bring it to your native apps on

870
00:28:16,226 --> 0:28:16,976
Apple's platforms.

871
00:28:20,476 --> 0:28:22,106
Before we talk about WebSocket,

872
00:28:22,836 --> 0:28:24,186
let's take a look at a common

873
00:28:24,186 --> 0:28:26,516
technique used today to enable

874
00:28:26,516 --> 0:28:28,056
bidirectional communication.

875
00:28:29,136 --> 0:28:30,856
Let's take a chat application as

876
00:28:30,856 --> 0:28:31,456
an example.

877
00:28:31,956 --> 0:28:34,726
When a client wants to receive a

878
00:28:34,726 --> 0:28:36,096
response from the server, it

879
00:28:36,096 --> 0:28:37,056
sends out a request.

880
00:28:38,266 --> 0:28:40,046
The server responds with a 200

881
00:28:40,046 --> 0:28:42,006
status code immediately, but it

882
00:28:42,006 --> 0:28:43,496
does not send out the response

883
00:28:43,496 --> 0:28:45,116
body because it doesn't have one

884
00:28:45,116 --> 0:28:45,706
at this point.

885
00:28:46,866 --> 0:28:48,536
Sometime in the future, once the

886
00:28:48,536 --> 0:28:50,336
server has a response ready for

887
00:28:50,336 --> 0:28:52,146
the client, it sends it out to

888
00:28:52,146 --> 0:28:52,576
the client.

889
00:28:53,356 --> 0:28:55,116
At which point, the client sends

890
00:28:55,116 --> 0:28:56,656
a new request, indicating that

891
00:28:56,656 --> 0:28:58,066
it wants to receive the next

892
00:28:58,066 --> 0:28:58,536
message.

893
00:28:59,916 --> 0:29:01,606
This is known as long polling,

894
00:28:59,916 --> 0:29:01,606
This is known as long polling,

895
00:29:02,206 --> 0:29:03,666
but there are some disadvantages

896
00:29:03,666 --> 0:29:04,976
associated with long polling.

897
00:29:06,436 --> 0:29:08,176
Both the end points when they

898
00:29:08,176 --> 0:29:09,916
want to send messages have to

899
00:29:09,916 --> 0:29:12,396
either send an HTTP request or

900
00:29:12,396 --> 0:29:14,786
an HTTP response, which is a lot

901
00:29:14,786 --> 0:29:15,336
of overhead.

902
00:29:16,836 --> 0:29:18,536
Additionally, complexity has to

903
00:29:18,696 --> 0:29:19,936
be maintained at the server to

904
00:29:19,936 --> 0:29:21,176
enable long polling.

905
00:29:22,726 --> 0:29:24,226
Let's see how WebSockets can

906
00:29:24,226 --> 0:29:25,396
solve this problem for us.

907
00:29:25,936 --> 0:29:29,446
As the first part of the first

908
00:29:29,446 --> 0:29:31,086
step of the WebSocket handshake,

909
00:29:31,336 --> 0:29:33,586
the client sends out a request

910
00:29:33,766 --> 0:29:35,416
to the server, indicating that

911
00:29:35,416 --> 0:29:36,696
it wants to upgrade this

912
00:29:36,696 --> 0:29:37,766
connection to WebSocket.

913
00:29:39,206 --> 0:29:41,376
The server responds with the 101

914
00:29:41,456 --> 0:29:42,996
switching protocol to response,

915
00:29:43,566 --> 0:29:45,126
at which point we have a

916
00:29:45,126 --> 0:29:47,076
bidirectional stream between the

917
00:29:47,076 --> 0:29:47,966
two end points.

918
00:29:48,506 --> 0:29:51,286
Both the end points are now free

919
00:29:51,286 --> 0:29:52,956
to send messages in either

920
00:29:52,956 --> 0:29:53,526
direction.

921
00:29:54,096 --> 0:29:56,716
They can send messages like data

922
00:29:57,026 --> 0:29:59,246
string or ping and pong frames

923
00:29:59,566 --> 0:30:03,566
without any HTTP overhead.

924
00:29:59,566 --> 0:30:03,566
without any HTTP overhead.

925
00:30:03,566 --> 0:30:05,426
URLSession is Apple's

926
00:30:05,426 --> 0:30:07,056
recommended API for HTTP.

927
00:30:07,056 --> 0:30:09,986
And this year we are excited to

928
00:30:10,046 --> 0:30:10,816
announce

929
00:30:10,986 --> 0:30:13,216
URLSessionWebSocketTask, a new

930
00:30:13,216 --> 0:30:14,976
API in the foundation framework.

931
00:30:15,516 --> 0:30:20,816
[ Cheering and Applause ]

932
00:30:21,316 --> 0:30:22,906
To create a WebSocket task, you

933
00:30:22,906 --> 0:30:24,626
can simply pass in the URL that

934
00:30:24,626 --> 0:30:26,046
you want to connect to and call

935
00:30:26,046 --> 0:30:26,736
resume.

936
00:30:27,406 --> 0:30:28,996
We will start the handshake and

937
00:30:28,996 --> 0:30:29,936
you need not worry about

938
00:30:29,936 --> 0:30:31,026
handling any of the status

939
00:30:31,026 --> 0:30:31,426
codes.

940
00:30:31,956 --> 0:30:34,866
The first part of the WebSocket

941
00:30:34,866 --> 0:30:37,296
handshake uses HTTP semantics,

942
00:30:37,666 --> 0:30:38,996
which means your

943
00:30:39,036 --> 0:30:42,106
URLSessionWebSocketTask will use

944
00:30:42,106 --> 0:30:43,816
your existing URLSession

945
00:30:43,816 --> 0:30:45,016
configuration objects.

946
00:30:46,136 --> 0:30:47,576
It will also use your network

947
00:30:47,576 --> 0:30:48,996
storages to do cookie and

948
00:30:48,996 --> 0:30:50,766
convention look ups and we will

949
00:30:50,766 --> 0:30:52,186
honor your delegates for any

950
00:30:52,186 --> 0:30:52,826
challenges.

951
00:30:54,156 --> 0:30:55,566
Once you're connected, you can

952
00:30:55,616 --> 0:30:57,776
send data or string messages on

953
00:30:57,776 --> 0:30:58,336
the task.

954
00:30:59,556 --> 0:31:01,266
You can also receive messages on

955
00:30:59,556 --> 0:31:01,266
You can also receive messages on

956
00:31:01,266 --> 0:31:03,206
the task by passing a completion

957
00:31:03,206 --> 0:31:04,806
handler, which will be called

958
00:31:04,806 --> 0:31:06,706
asynchronously once we receive

959
00:31:06,706 --> 0:31:08,846
the entire message from the

960
00:31:09,196 --> 0:31:09,336
server.

961
00:31:10,396 --> 0:31:12,456
The URLSession API for

962
00:31:12,456 --> 0:31:14,186
WebSockets is closer to the

963
00:31:14,186 --> 0:31:16,576
JavaScript API, which is based

964
00:31:16,576 --> 0:31:18,796
around complete messages and

965
00:31:18,796 --> 0:31:19,466
callbacks.

966
00:31:20,706 --> 0:31:21,936
But some developers need more

967
00:31:21,936 --> 0:31:24,766
than this, like sever support or

968
00:31:24,766 --> 0:31:26,186
reading partial messages.

969
00:31:26,726 --> 0:31:28,616
And for that, we are excited to

970
00:31:28,616 --> 0:31:31,136
announce WebSocketSupport in

971
00:31:31,136 --> 0:31:32,756
Network.framework through the

972
00:31:32,756 --> 0:31:34,816
NWConnection and NWListener

973
00:31:34,816 --> 0:31:36,096
objects that give you both

974
00:31:36,096 --> 0:31:36,976
client and server support.

975
00:31:39,516 --> 0:31:43,066
[ Applause ]

976
00:31:43,566 --> 0:31:45,646
With this, you can have a

977
00:31:45,646 --> 0:31:47,066
message oriented transport

978
00:31:47,066 --> 0:31:48,826
protocol which can be extended

979
00:31:48,826 --> 0:31:50,306
for peer-to-peer communication.

980
00:31:51,646 --> 0:31:53,166
You can also receive partial

981
00:31:53,166 --> 0:31:54,566
messages by specifying the

982
00:31:54,566 --> 0:31:56,406
minimum and maximum bytes for a

983
00:31:56,406 --> 0:31:57,836
give and receive operation.

984
00:31:58,446 --> 0:32:00,816
To add WebSockets to your

985
00:31:58,446 --> 0:32:00,816
To add WebSockets to your

986
00:32:00,816 --> 0:32:02,416
network frame of objects, you

987
00:32:02,416 --> 0:32:04,556
can simply create a parameters

988
00:32:04,556 --> 0:32:06,156
object with TLS enabled on it.

989
00:32:07,066 --> 0:32:09,686
Next, create a websocketOptions

990
00:32:09,956 --> 0:32:11,766
and set it on the default

991
00:32:11,766 --> 0:32:12,676
protocol stack of the

992
00:32:12,676 --> 0:32:12,966
parameters.

993
00:32:15,506 --> 0:32:16,766
Once you create the parameters,

994
00:32:17,196 --> 0:32:18,516
next you can pass in these

995
00:32:18,516 --> 0:32:20,206
parameters to the NWConnection

996
00:32:20,206 --> 0:32:21,886
constructor to create an

997
00:32:21,886 --> 0:32:22,916
NWConnection object.

998
00:32:23,826 --> 0:32:24,836
Or if you're looking to create a

999
00:32:24,836 --> 0:32:26,196
listener, just pass these

1000
00:32:26,196 --> 0:32:27,506
parameters to the constructor of

1001
00:32:27,506 --> 0:32:28,026
the listener.

1002
00:32:29,446 --> 0:32:31,946
The send and receive APIs remain

1003
00:32:31,946 --> 0:32:34,156
unchanged from last year and you

1004
00:32:34,156 --> 0:32:36,346
can continue using those to send

1005
00:32:36,346 --> 0:32:37,976
and receive WebSocket messages.

1006
00:32:42,046 --> 0:32:43,156
Now, let's take a look at

1007
00:32:43,156 --> 0:32:44,366
WebSockets in action.

1008
00:32:44,976 --> 0:32:47,166
I'm going to build upon the

1009
00:32:47,166 --> 0:32:48,476
application that Guoye just

1010
00:32:48,476 --> 0:32:51,276
showed you, PubSocket, but I

1011
00:32:51,276 --> 0:32:52,496
want to change the business

1012
00:32:52,496 --> 0:32:54,406
model of PubSocket slightly.

1013
00:32:54,876 --> 0:32:57,836
The price of items is now going

1014
00:32:57,836 --> 0:33:00,076
to be dynamic and will change on

1015
00:32:57,836 --> 0:33:00,076
to be dynamic and will change on

1016
00:33:00,076 --> 0:33:00,486
demand.

1017
00:33:01,266 --> 0:33:02,686
So, think about a stock market,

1018
00:33:02,686 --> 0:33:05,126
but for food and drinks.

1019
00:33:05,886 --> 0:33:06,896
So, on the left-hand side you

1020
00:33:06,896 --> 0:33:08,366
see PubServer, which is the

1021
00:33:08,366 --> 0:33:09,936
application that the bartender

1022
00:33:09,936 --> 0:33:11,316
sees where they can edit the

1023
00:33:11,316 --> 0:33:12,906
items or make changes to the

1024
00:33:12,966 --> 0:33:13,246
price.

1025
00:33:14,286 --> 0:33:15,286
On the right-hand side is the

1026
00:33:15,326 --> 0:33:16,396
pub menu that we've already

1027
00:33:16,396 --> 0:33:17,886
seen, which is the application

1028
00:33:17,886 --> 0:33:19,516
that your clients or customers

1029
00:33:19,516 --> 0:33:20,766
walking into the bar can see.

1030
00:33:21,316 --> 0:33:24,096
The new feature with dynamic

1031
00:33:24,096 --> 0:33:25,716
pricing is going to be called

1032
00:33:25,716 --> 0:33:26,826
PubSocket+.

1033
00:33:27,246 --> 0:33:28,096
So, see-- let's see how

1034
00:33:28,096 --> 0:33:29,336
PubSocket+ works with our

1035
00:33:29,336 --> 0:33:30,706
current implementation of server

1036
00:33:30,706 --> 0:33:31,136
and client.

1037
00:33:31,726 --> 0:33:34,966
Let's suppose the bartender

1038
00:33:34,966 --> 0:33:36,476
wants to bump the price of root

1039
00:33:36,476 --> 0:33:39,226
beer to $6.99.

1040
00:33:39,226 --> 0:33:41,126
I click update.

1041
00:33:42,316 --> 0:33:43,826
And now the client has to pull

1042
00:33:43,826 --> 0:33:44,956
down to refresh.

1043
00:33:45,496 --> 0:33:47,836
And once they do that, they get

1044
00:33:47,836 --> 0:33:49,796
the updated price of root beer.

1045
00:33:50,936 --> 0:33:53,096
That's OK, but I'm sure we could

1046
00:33:53,096 --> 0:33:53,956
do better than this.

1047
00:33:54,806 --> 0:33:56,856
I want customers of PubSocket+

1048
00:33:56,856 --> 0:33:58,496
to have a seamless experience

1049
00:33:58,706 --> 0:33:59,746
where they don't have to pull

1050
00:33:59,746 --> 0:34:01,856
down to refresh and they can get

1051
00:33:59,746 --> 0:34:01,856
down to refresh and they can get

1052
00:34:01,856 --> 0:34:02,826
the price changes live.

1053
00:34:03,526 --> 0:34:06,156
Let's see how WebSockets can

1054
00:34:06,156 --> 0:34:07,496
help us achieve this.

1055
00:34:08,025 --> 0:34:11,275
Let's head over to Xcode and

1056
00:34:11,366 --> 0:34:13,476
first I'm going to stop the

1057
00:34:14,525 --> 0:34:18,466
server and the client.

1058
00:34:18,466 --> 0:34:20,775
And let's head over to our

1059
00:34:20,775 --> 0:34:22,576
server where I have an

1060
00:34:22,576 --> 0:34:24,916
NWListener which is acting as my

1061
00:34:24,916 --> 0:34:25,795
TCB server.

1062
00:34:27,156 --> 0:34:29,016
Here I have some parameters that

1063
00:34:29,016 --> 0:34:30,565
I've created with TLS options

1064
00:34:30,565 --> 0:34:31,096
set on them.

1065
00:34:32,156 --> 0:34:32,966
First, I'm going to make a

1066
00:34:32,966 --> 0:34:35,416
change here to create some

1067
00:34:35,416 --> 0:34:37,856
WebSocket options and set it on

1068
00:34:37,856 --> 0:34:39,226
the protocol stack of the

1069
00:34:39,226 --> 0:34:39,966
parameters.

1070
00:34:40,856 --> 0:34:43,876
This tells my server how to do a

1071
00:34:43,876 --> 0:34:45,716
WebSocket handshake with clients

1072
00:34:45,755 --> 0:34:46,876
that are trying to connect with

1073
00:34:47,456 --> 0:34:47,525
it.

1074
00:34:48,156 --> 0:34:49,985
The next change I would make on

1075
00:34:49,985 --> 0:34:53,056
my server is in this function

1076
00:34:53,056 --> 0:34:55,176
called sendPriceChanges.

1077
00:34:56,306 --> 0:34:58,556
This function is meant to send

1078
00:34:58,556 --> 0:35:00,686
out WebSocket messages to all

1079
00:34:58,556 --> 0:35:00,686
out WebSocket messages to all

1080
00:35:00,686 --> 0:35:01,826
the clients that are connected

1081
00:35:01,826 --> 0:35:04,446
to it each time a price of an

1082
00:35:04,446 --> 0:35:07,146
item changes on the server.

1083
00:35:07,326 --> 0:35:09,216
Currently, I have a send

1084
00:35:09,216 --> 0:35:11,386
implemented with default stream

1085
00:35:11,386 --> 0:35:11,936
context.

1086
00:35:13,056 --> 0:35:15,166
This means that the data that I

1087
00:35:15,166 --> 0:35:17,086
pass to the send method is sent

1088
00:35:17,086 --> 0:35:18,626
out as a bag of bytes on this

1089
00:35:18,626 --> 0:35:20,416
TCB connection and it does not

1090
00:35:20,416 --> 0:35:21,876
have any message framing.

1091
00:35:21,876 --> 0:35:24,496
I'm going to change the context

1092
00:35:24,496 --> 0:35:28,246
here and create a new context

1093
00:35:28,606 --> 0:35:30,826
with some WebSocket metadata

1094
00:35:30,826 --> 0:35:32,876
associated with it.

1095
00:35:32,926 --> 0:35:34,946
Now, this tells my connection to

1096
00:35:34,946 --> 0:35:37,156
send the data as WebSocket

1097
00:35:37,216 --> 0:35:38,296
message frames.

1098
00:35:39,376 --> 0:35:40,586
With these two changes, my

1099
00:35:40,586 --> 0:35:42,456
server should be all set to send

1100
00:35:42,456 --> 0:35:43,906
out WebSocket messages to my

1101
00:35:43,906 --> 0:35:44,266
client.

1102
00:35:45,316 --> 0:35:48,216
Now, let's see-- I can keep the

1103
00:35:48,216 --> 0:35:49,656
server building while we head

1104
00:35:49,656 --> 0:35:50,336
over to the client.

1105
00:35:51,566 --> 0:35:52,956
So, on the client side, I'm

1106
00:35:54,086 --> 0:35:55,086
going to make changes to the

1107
00:35:55,086 --> 0:35:57,546
function connect first; connect

1108
00:35:58,116 --> 0:35:59,086
is going to connect to a new

1109
00:35:59,086 --> 0:36:01,936
server and for that I'm going to

1110
00:35:59,086 --> 0:36:01,936
server and for that I'm going to

1111
00:36:02,286 --> 0:36:05,316
use URLSessionWebSocketTask I'll

1112
00:36:05,316 --> 0:36:07,686
simply pass in the URL to the

1113
00:36:07,686 --> 0:36:09,836
task and then call resume so I

1114
00:36:09,836 --> 0:36:11,876
can start doing the handshake.

1115
00:36:12,866 --> 0:36:14,266
Once I'm connected, I'm going to

1116
00:36:14,266 --> 0:36:16,436
call readMessage, which will

1117
00:36:16,536 --> 0:36:17,966
receive a message back from the

1118
00:36:17,966 --> 0:36:18,196
server.

1119
00:36:18,196 --> 0:36:20,846
Now, let's see how readMessage

1120
00:36:20,846 --> 0:36:21,646
should be implemented.

1121
00:36:23,156 --> 0:36:26,386
Inside readMessage, I'll call

1122
00:36:26,386 --> 0:36:28,916
receive on the task and pass a

1123
00:36:28,916 --> 0:36:29,866
completion block.

1124
00:36:30,866 --> 0:36:34,276
On the success case, I'll update

1125
00:36:34,276 --> 0:36:36,616
my UI with the price change and

1126
00:36:36,616 --> 0:36:38,046
immediately after that I'll call

1127
00:36:38,046 --> 0:36:39,676
readMessage again so I can read

1128
00:36:39,676 --> 0:36:40,956
the next message coming back

1129
00:36:40,956 --> 0:36:41,696
from the server.

1130
00:36:42,646 --> 0:36:44,166
Once I make these two changes on

1131
00:36:44,166 --> 0:36:45,916
the client, I should be all set

1132
00:36:46,136 --> 0:36:47,806
to connect to my server and

1133
00:36:47,806 --> 0:36:49,246
receive WebSocket messages.

1134
00:36:50,576 --> 0:36:52,656
So, let's run a new server and a

1135
00:36:52,656 --> 0:36:54,386
client to see how they work.

1136
00:36:55,486 --> 0:36:57,406
First I'm going to run my

1137
00:37:00,936 --> 0:37:01,086
server.

1138
00:37:01,276 --> 0:37:02,416
And now our new client reads

1139
00:37:02,486 --> 0:37:04,456
PubSocket+, which has the new

1140
00:37:04,456 --> 0:37:06,836
and improved WebSocket ability.

1141
00:37:07,606 --> 0:37:09,396
Now, let's suppose it's happy

1142
00:37:09,396 --> 0:37:11,156
hour and the bartender wants to

1143
00:37:11,156 --> 0:37:12,516
reduce the price of root beer

1144
00:37:12,676 --> 0:37:14,556
down to $1.99.

1145
00:37:14,556 --> 0:37:16,326
So, let me make that change.

1146
00:37:20,076 --> 0:37:21,756
And I'm going to click update

1147
00:37:22,506 --> 0:37:23,606
and then you can see on the

1148
00:37:23,606 --> 0:37:25,296
client the price got updated

1149
00:37:25,346 --> 0:37:26,396
without the client having to--

1150
00:37:27,516 --> 0:37:29,586
[ Applause ]

1151
00:37:30,086 --> 0:37:32,386
So, for those of you who missed

1152
00:37:32,386 --> 0:37:33,306
it, I'm going to reduce the

1153
00:37:33,306 --> 0:37:34,386
fries to go with that root

1154
00:37:34,386 --> 0:37:35,716
beer-- now that's some happy

1155
00:37:35,716 --> 0:37:35,886
hour.

1156
00:37:36,556 --> 0:37:39,906
And once I click update, you'll

1157
00:37:39,906 --> 0:37:41,586
see the price of fries change on

1158
00:37:41,586 --> 0:37:42,886
the client without me having to

1159
00:37:42,886 --> 0:37:43,426
pull down.

1160
00:37:43,646 --> 0:37:45,926
And I'll do it once again and

1161
00:37:45,926 --> 0:37:47,286
there the price of fries

1162
00:37:47,286 --> 0:37:47,696
changes.

1163
00:37:48,516 --> 0:37:51,746
[ Applause ]

1164
00:37:52,246 --> 0:37:54,166
So, that is WebSockets

1165
00:37:54,386 --> 0:37:55,726
bidirectional communication

1166
00:37:55,726 --> 0:37:57,696
without any HTTP overhead.

1167
00:37:58,916 --> 0:38:00,766
Some of you might be wondering

1168
00:37:58,916 --> 0:38:00,766
Some of you might be wondering

1169
00:38:00,766 --> 0:38:02,366
what the Stats button on the top

1170
00:38:02,366 --> 0:38:02,926
right is for.

1171
00:38:03,376 --> 0:38:05,216
If I click that, here are some

1172
00:38:05,216 --> 0:38:06,446
new statistics that we are

1173
00:38:06,446 --> 0:38:07,866
collecting through our

1174
00:38:07,866 --> 0:38:09,886
URLSession metrics API.

1175
00:38:11,486 --> 0:38:13,216
Additionally, at the bottom, RTT

1176
00:38:13,216 --> 0:38:15,326
is the round-trip time between

1177
00:38:15,326 --> 0:38:17,006
my client and my server that I'm

1178
00:38:17,006 --> 0:38:19,116
calculating using pings and

1179
00:38:19,116 --> 0:38:20,256
pongs in WebSockets.

1180
00:38:21,126 --> 0:38:22,806
I'm currently using Network Link

1181
00:38:22,806 --> 0:38:24,906
Conditioner to simulate a busy

1182
00:38:24,906 --> 0:38:25,366
bar environment.

1183
00:38:25,366 --> 0:38:26,246
You could use something like

1184
00:38:26,246 --> 0:38:27,396
this to monitor the health of

1185
00:38:27,446 --> 0:38:29,126
your connection between your

1186
00:38:29,126 --> 0:38:29,866
client and server.

1187
00:38:30,886 --> 0:38:31,946
If you are interested in knowing

1188
00:38:31,946 --> 0:38:33,646
more about the new properties

1189
00:38:33,646 --> 0:38:35,966
added to the metrics API or how

1190
00:38:35,966 --> 0:38:37,686
to use Network Link Conditioner,

1191
00:38:37,946 --> 0:38:39,326
please join us for the second

1192
00:38:39,326 --> 0:38:40,836
networking session at 5:00 p.m.

1193
00:38:40,836 --> 0:38:41,116
today.

1194
00:38:42,266 --> 0:38:43,286
Now, let's head back to our

1195
00:38:43,286 --> 0:38:43,736
slides.

1196
00:38:47,496 --> 0:38:49,196
Let's do a quick recap of

1197
00:38:49,286 --> 0:38:51,706
PubSocket+.

1198
00:38:51,886 --> 0:38:53,406
For our server, we used

1199
00:38:53,406 --> 0:38:55,176
NWListener with WebSocket

1200
00:38:55,176 --> 0:38:56,486
options set on the protocol

1201
00:38:56,486 --> 0:38:56,836
stack.

1202
00:38:57,486 --> 0:38:59,846
For a client, we used

1203
00:38:59,846 --> 0:39:01,816
URLSessionWebSocketTask to

1204
00:38:59,846 --> 0:39:01,816
URLSessionWebSocketTask to

1205
00:39:01,816 --> 0:39:03,396
connect to our server and read

1206
00:39:03,396 --> 0:39:04,006
messages.

1207
00:39:04,006 --> 0:39:07,026
For our transport, we used

1208
00:39:07,026 --> 0:39:08,176
bidirectional WebSocket

1209
00:39:08,176 --> 0:39:08,736
messages.

1210
00:39:09,606 --> 0:39:11,076
And finally, the advantage of

1211
00:39:11,106 --> 0:39:12,496
doing everything was

1212
00:39:12,976 --> 0:39:14,556
bidirectional messaging with

1213
00:39:14,556 --> 0:39:18,586
very little HTTP overhead.

1214
00:39:18,706 --> 0:39:20,676
Let's review the APIs available

1215
00:39:20,676 --> 0:39:22,186
for you to add WebSockets to

1216
00:39:22,186 --> 0:39:23,026
your apps today.

1217
00:39:24,256 --> 0:39:26,136
WebKit gives you the ability to

1218
00:39:26,136 --> 0:39:28,266
add WebSockets with the existing

1219
00:39:28,266 --> 0:39:30,556
JavaScript API in your web apps

1220
00:39:30,556 --> 0:39:31,366
and web views.

1221
00:39:31,916 --> 0:39:34,626
New this year,

1222
00:39:34,626 --> 0:39:37,196
URLSessionWebSocketTask built on

1223
00:39:37,196 --> 0:39:39,376
top of Network.framework plugs

1224
00:39:39,376 --> 0:39:40,526
into URLSession.

1225
00:39:41,276 --> 0:39:42,976
It works with your existing

1226
00:39:42,976 --> 0:39:44,666
URLSession configuration objects

1227
00:39:44,896 --> 0:39:46,796
and offers automatic cookie and

1228
00:39:46,796 --> 0:39:47,836
authentication support.

1229
00:39:48,656 --> 0:39:50,896
It also offers a convenient way

1230
00:39:50,896 --> 0:39:52,736
to measure round-trip time using

1231
00:39:52,796 --> 0:39:53,746
ping and pong handling.

1232
00:39:55,606 --> 0:39:56,616
Also new this year,

1233
00:39:56,846 --> 0:39:58,226
WebSocketSupport in

1234
00:39:58,226 --> 0:39:59,686
Network.framework through the

1235
00:39:59,686 --> 0:40:01,546
NWConnection and NWListener

1236
00:39:59,686 --> 0:40:01,546
NWConnection and NWListener

1237
00:40:01,546 --> 0:40:04,086
objects give you both client and

1238
00:40:04,086 --> 0:40:04,836
server support.

1239
00:40:06,046 --> 0:40:07,916
It gives you direct access to

1240
00:40:07,966 --> 0:40:09,706
complete and partial messages,

1241
00:40:10,006 --> 0:40:11,726
including ping and pong frames.

1242
00:40:12,636 --> 0:40:14,076
You can optionally set custom

1243
00:40:14,076 --> 0:40:16,226
headers like cookies or other

1244
00:40:16,226 --> 0:40:17,846
authentication headers through

1245
00:40:17,846 --> 0:40:19,536
the websocketOptions object.

1246
00:40:20,806 --> 0:40:21,916
We are happy to be opening up

1247
00:40:21,916 --> 0:40:23,056
this technology to all

1248
00:40:23,056 --> 0:40:24,656
developers and we're excited to

1249
00:40:24,656 --> 0:40:25,836
see what you do with this.

1250
00:40:26,806 --> 0:40:28,116
Next, I would like to invite

1251
00:40:28,176 --> 0:40:29,776
Christoph to talk about mobility

1252
00:40:29,776 --> 0:40:30,456
improvements.

1253
00:40:31,516 --> 0:40:35,826
[ Applause ]

1254
00:40:36,326 --> 0:40:36,986
&gt;&gt; Thank you, Jiten.

1255
00:40:37,606 --> 0:40:39,276
Hello everyone.

1256
00:40:40,386 --> 0:40:41,766
I am Christoph and I am going to

1257
00:40:41,766 --> 0:40:43,726
show you what mobility

1258
00:40:43,726 --> 0:40:45,526
improvements we did in iOS 13.

1259
00:40:46,986 --> 0:40:50,006
So, users are often experiencing

1260
00:40:50,006 --> 0:40:50,276
this.

1261
00:40:50,556 --> 0:40:51,966
When they are walking out of

1262
00:40:51,966 --> 0:40:53,696
their home, when they are far

1263
00:40:53,696 --> 0:40:54,976
away from their Wi-Fi access

1264
00:40:54,976 --> 0:40:57,476
point, the signal of Wi-Fi gets

1265
00:40:57,476 --> 0:40:59,666
worse and often the applications

1266
00:40:59,666 --> 0:41:00,906
become slower because the

1267
00:40:59,666 --> 0:41:00,906
become slower because the

1268
00:41:00,906 --> 0:41:02,876
networking becomes slower as

1269
00:41:02,876 --> 0:41:03,056
well.

1270
00:41:03,736 --> 0:41:04,826
Sometimes the applications

1271
00:41:04,826 --> 0:41:05,576
completely fail.

1272
00:41:06,326 --> 0:41:08,136
And so people have gotten used

1273
00:41:08,136 --> 0:41:08,976
to this that when they are

1274
00:41:08,976 --> 0:41:10,136
walking out of their home they

1275
00:41:10,136 --> 0:41:11,706
just swipe up to the Control

1276
00:41:11,706 --> 0:41:13,546
Center and turn off Wi-Fi.

1277
00:41:14,986 --> 0:41:16,836
Now, I am sure we have all

1278
00:41:16,836 --> 0:41:18,206
experienced this, right?

1279
00:41:19,066 --> 0:41:21,556
So, we want to change this.

1280
00:41:22,326 --> 0:41:23,526
We believe that users should

1281
00:41:23,526 --> 0:41:25,116
never have to turn off Wi-Fi

1282
00:41:25,556 --> 0:41:26,576
when they are walking out of

1283
00:41:26,576 --> 0:41:26,976
their home.

1284
00:41:27,416 --> 0:41:28,056
We believe that your

1285
00:41:28,056 --> 0:41:29,576
applications should just work

1286
00:41:29,576 --> 0:41:31,396
even when Wi-Fi is in a very bad

1287
00:41:31,396 --> 0:41:31,906
condition.

1288
00:41:33,106 --> 0:41:34,536
And I'm sure everybody here in

1289
00:41:34,536 --> 0:41:36,616
this room wants to achieve the

1290
00:41:36,616 --> 0:41:37,136
same goal.

1291
00:41:38,026 --> 0:41:39,746
So, let me show you how we can

1292
00:41:39,746 --> 0:41:39,976
get there.

1293
00:41:44,536 --> 0:41:46,836
This is the way we usually

1294
00:41:46,836 --> 0:41:47,686
represent Wi-Fi.

1295
00:41:48,316 --> 0:41:50,016
We have the Wi-Fi access point

1296
00:41:50,016 --> 0:41:51,586
in the middle, concentric

1297
00:41:51,586 --> 0:41:54,096
circles around it that show how

1298
00:41:54,096 --> 0:41:55,706
the Wi-Fi signal is gradually

1299
00:41:55,706 --> 0:41:57,536
fading away, getting weaker and

1300
00:41:57,536 --> 0:41:59,366
weaker as the phone gets farther

1301
00:41:59,366 --> 0:42:00,166
and farther away.

1302
00:41:59,366 --> 0:42:00,166
and farther away.

1303
00:42:01,216 --> 0:42:02,666
In this kind of scenario, it

1304
00:42:02,666 --> 0:42:04,676
would be very simple for a phone

1305
00:42:04,676 --> 0:42:06,216
to decide whether to use Wi-Fi

1306
00:42:06,626 --> 0:42:07,886
or switch over to cell.

1307
00:42:08,656 --> 0:42:11,846
Right? Now, the problem is that

1308
00:42:12,166 --> 0:42:13,526
this kind of representation of

1309
00:42:13,526 --> 0:42:15,716
how Wi-Fi looks is actually very

1310
00:42:15,716 --> 0:42:16,986
far away from reality.

1311
00:42:17,796 --> 0:42:20,386
In reality, it looks more like

1312
00:42:22,216 --> 0:42:22,316
this.

1313
00:42:22,536 --> 0:42:23,856
You have the Wi-Fi access point

1314
00:42:23,856 --> 0:42:25,786
in the middle and then a very

1315
00:42:25,786 --> 0:42:27,636
spotty Wi-Fi signal around it.

1316
00:42:28,556 --> 0:42:29,826
And the spottiness is because of

1317
00:42:29,826 --> 0:42:31,246
the objects in the room are

1318
00:42:31,246 --> 0:42:32,656
interfering with the signal.

1319
00:42:33,316 --> 0:42:35,546
The house, the walls, everything

1320
00:42:35,546 --> 0:42:37,406
is making the Wi-Fi signal a

1321
00:42:37,406 --> 0:42:40,826
very uncertain indicator of the

1322
00:42:40,826 --> 0:42:41,366
quality.

1323
00:42:42,216 --> 0:42:43,766
And a tiny little movement of

1324
00:42:43,766 --> 0:42:45,186
the phone could move the phone

1325
00:42:45,186 --> 0:42:47,046
from a good position to a bad

1326
00:42:47,046 --> 0:42:47,566
position.

1327
00:42:48,486 --> 0:42:49,536
So, for the phone, it's really

1328
00:42:49,536 --> 0:42:51,296
difficult to know whether Wi-Fi

1329
00:42:51,296 --> 0:42:53,196
is still good or bad.

1330
00:42:53,546 --> 0:42:54,576
It might still receive the

1331
00:42:54,576 --> 0:42:56,186
beacons from the access point,

1332
00:42:56,756 --> 0:42:57,636
but the signal might

1333
00:42:57,636 --> 0:42:59,196
nevertheless be too low to

1334
00:42:59,256 --> 0:43:01,576
actually send or receive any

1335
00:42:59,256 --> 0:43:01,576
actually send or receive any

1336
00:43:01,576 --> 0:43:01,916
data.

1337
00:43:03,076 --> 0:43:04,906
So, in this kind of environment,

1338
00:43:05,366 --> 0:43:06,656
the phone needs to decide

1339
00:43:06,866 --> 0:43:08,676
whether to use Wi-Fi or whether

1340
00:43:08,676 --> 0:43:09,246
to use cell.

1341
00:43:10,236 --> 0:43:11,726
It's this uncertainty around the

1342
00:43:11,726 --> 0:43:13,596
Wi-Fi signal that is the whole

1343
00:43:13,596 --> 0:43:15,146
challenge around mobility.

1344
00:43:17,696 --> 0:43:20,936
So, at Apple, we have been aware

1345
00:43:20,936 --> 0:43:22,106
of this problem for quite a

1346
00:43:22,106 --> 0:43:24,526
while and I will show you how in

1347
00:43:24,526 --> 0:43:27,456
the past we have done many steps

1348
00:43:27,456 --> 0:43:28,416
to improve this kind of

1349
00:43:28,416 --> 0:43:28,966
scenario.

1350
00:43:28,966 --> 0:43:32,696
All of it started back in iOS 7

1351
00:43:33,156 --> 0:43:33,706
with Siri.

1352
00:43:36,156 --> 0:43:38,066
In iOS 7, we introduced

1353
00:43:38,066 --> 0:43:39,766
Multipath TCP for Siri.

1354
00:43:40,516 --> 0:43:42,056
Multipath TCP allows to use

1355
00:43:42,056 --> 0:43:43,996
Wi-Fi and cell at the same time.

1356
00:43:44,496 --> 0:43:46,656
So, starting in iOS 7, whenever

1357
00:43:46,716 --> 0:43:48,226
people are using Siri and

1358
00:43:48,226 --> 0:43:49,366
walking out of their home,

1359
00:43:50,276 --> 0:43:52,276
Multipath TCP will make sure

1360
00:43:52,276 --> 0:43:53,426
that the traffic goes either

1361
00:43:53,426 --> 0:43:56,556
Wi-Fi over cell, reducing the

1362
00:43:56,556 --> 0:43:58,846
latency for Siri users and

1363
00:43:58,846 --> 0:44:00,046
reducing the error rates.

1364
00:43:58,846 --> 0:44:00,046
reducing the error rates.

1365
00:44:01,316 --> 0:44:03,556
We are seeing great results

1366
00:44:03,776 --> 0:44:05,136
thank to Multipath TCP.

1367
00:44:06,346 --> 0:44:08,656
Now, a real end-to-end multipath

1368
00:44:08,836 --> 0:44:12,376
protocol, like Multipath TCP,

1369
00:44:12,376 --> 0:44:14,466
requires both the client and the

1370
00:44:14,466 --> 0:44:15,896
server to be aware of it.

1371
00:44:16,546 --> 0:44:17,986
Both need to work together,

1372
00:44:18,646 --> 0:44:18,926
right?

1373
00:44:19,236 --> 0:44:20,586
They need to work together to

1374
00:44:20,586 --> 0:44:21,776
decide whether to send the

1375
00:44:21,776 --> 0:44:23,516
traffic on Wi-Fi or on cell.

1376
00:44:24,566 --> 0:44:26,866
And so we asked ourselves how

1377
00:44:26,866 --> 0:44:29,436
can we improve mobility without

1378
00:44:29,436 --> 0:44:31,896
having both the client and the

1379
00:44:31,896 --> 0:44:33,586
server have to work together

1380
00:44:34,436 --> 0:44:36,306
without requiring the need to

1381
00:44:36,356 --> 0:44:37,186
modify the server

1382
00:44:37,186 --> 0:44:38,056
configurations.

1383
00:44:39,366 --> 0:44:41,126
And the answer came two years

1384
00:44:41,126 --> 0:44:42,786
later in iOS 9 with Wi-Fi

1385
00:44:42,786 --> 0:44:43,266
Assist.

1386
00:44:43,796 --> 0:44:47,516
Wi-Fi Assist handles mobility

1387
00:44:47,516 --> 0:44:49,536
for all applications, for all

1388
00:44:49,536 --> 0:44:51,226
flows, talking to any server.

1389
00:44:51,226 --> 0:44:53,986
And the way it does it is by

1390
00:44:53,986 --> 0:44:56,216
first starting on Wi-Fi and when

1391
00:44:56,216 --> 0:44:57,596
the signal is bad and the

1392
00:44:57,596 --> 0:44:59,326
connection doesn't, manages to

1393
00:44:59,326 --> 0:45:00,786
get established quickly enough,

1394
00:44:59,326 --> 0:45:00,786
get established quickly enough,

1395
00:45:01,256 --> 0:45:02,406
we will just raise another

1396
00:45:02,406 --> 0:45:05,796
connection over the cellular

1397
00:45:05,866 --> 0:45:06,306
link.

1398
00:45:06,696 --> 0:45:08,406
Since iOS 9, since we are--

1399
00:45:08,406 --> 0:45:09,666
since we introduced Wi-Fi

1400
00:45:09,666 --> 0:45:11,456
Assist, all of your applications

1401
00:45:12,176 --> 0:45:13,506
that are using the high-level

1402
00:45:13,506 --> 0:45:14,976
APIs can benefit from Wi-Fi

1403
00:45:14,976 --> 0:45:17,566
Assist and are having a much

1404
00:45:17,606 --> 0:45:18,876
better experience when the user

1405
00:45:18,876 --> 0:45:19,346
is mobile.

1406
00:45:19,346 --> 0:45:21,916
And this works for any server

1407
00:45:22,246 --> 0:45:24,306
talking to any servers on the

1408
00:45:24,306 --> 0:45:24,726
internet.

1409
00:45:26,626 --> 0:45:28,186
Now, Wi-Fi Assist might still

1410
00:45:28,186 --> 0:45:30,276
get stuck on Wi-Fi, if for

1411
00:45:30,276 --> 0:45:31,556
example the connection managed

1412
00:45:31,556 --> 0:45:33,286
to get established, but then the

1413
00:45:33,286 --> 0:45:34,966
signal degraded afterwards.

1414
00:45:35,426 --> 0:45:37,256
And those flows would then still

1415
00:45:37,256 --> 0:45:37,676
be stuck.

1416
00:45:38,156 --> 0:45:39,416
In order to handle those kind of

1417
00:45:39,416 --> 0:45:42,016
scenarios better, one still

1418
00:45:42,016 --> 0:45:43,856
needs real end-to-end multipath,

1419
00:45:44,306 --> 0:45:45,496
the same way as we have it for

1420
00:45:45,496 --> 0:45:45,836
Siri.

1421
00:45:46,766 --> 0:45:48,466
So, after four years of

1422
00:45:48,466 --> 0:45:52,096
experience with Multipath TCP

1423
00:45:52,096 --> 0:45:54,616
for Siri, we decided to open up

1424
00:45:54,616 --> 0:45:55,736
the API for every one of you.

1425
00:45:56,616 --> 0:45:58,776
So, since iOS 11, you can start

1426
00:45:58,776 --> 0:46:00,616
using the handover or

1427
00:45:58,776 --> 0:46:00,616
using the handover or

1428
00:46:00,616 --> 0:46:02,886
interactive mode in URLSession

1429
00:46:03,276 --> 0:46:04,336
or the Network.framework.

1430
00:46:05,426 --> 0:46:07,076
So, when you are able to make

1431
00:46:07,076 --> 0:46:07,976
sure that your servers are

1432
00:46:07,976 --> 0:46:09,946
ready, you can enable Multipath

1433
00:46:09,946 --> 0:46:11,626
TCP and get the same benefits as

1434
00:46:11,626 --> 0:46:11,966
Siri.

1435
00:46:13,456 --> 0:46:15,836
So, in each of those releases,

1436
00:46:16,036 --> 0:46:19,596
iOS 7, iOS 9, iOS 11, we focused

1437
00:46:19,596 --> 0:46:21,786
on one specific area to improve

1438
00:46:21,786 --> 0:46:22,366
mobility.

1439
00:46:23,876 --> 0:46:25,736
We focused on Multipath TCP, we

1440
00:46:25,736 --> 0:46:27,526
focused on Siri, we focused on

1441
00:46:27,526 --> 0:46:28,416
Wi-Fi Assist.

1442
00:46:29,356 --> 0:46:31,166
And now comes iOS 13.

1443
00:46:32,326 --> 0:46:34,906
And in iOS 13, we improved so

1444
00:46:34,906 --> 0:46:36,986
many things they don't even fit

1445
00:46:36,986 --> 0:46:38,116
on this slide anymore.

1446
00:46:40,086 --> 0:46:43,436
In iOS 13, the mobility

1447
00:46:43,436 --> 0:46:44,976
improvements-- thank you.

1448
00:46:45,516 --> 0:46:48,276
[ Applause ]

1449
00:46:48,776 --> 0:46:49,146
Thank you.

1450
00:46:49,276 --> 0:46:50,866
In iOS 13, the mobility

1451
00:46:50,866 --> 0:46:52,276
improvements go throughout the

1452
00:46:52,276 --> 0:46:52,966
whole system.

1453
00:46:53,756 --> 0:46:55,206
Many different frameworks,

1454
00:46:55,316 --> 0:46:57,626
daemons, applications, from the

1455
00:46:57,626 --> 0:46:59,016
firmware to the driver.

1456
00:46:59,696 --> 0:47:01,656
Everything is now improved for

1457
00:46:59,696 --> 0:47:01,656
Everything is now improved for

1458
00:47:01,656 --> 0:47:02,226
mobility.

1459
00:47:02,546 --> 0:47:04,256
And in this part of the session,

1460
00:47:04,436 --> 0:47:05,836
I am going to talk about two of

1461
00:47:05,836 --> 0:47:08,206
them; Wi-Fi Assist and Multipath

1462
00:47:08,206 --> 0:47:09,526
Transports.

1463
00:47:10,816 --> 0:47:13,716
So, first up, Wi-Fi Assist.

1464
00:47:14,636 --> 0:47:16,746
Traditionally, Wi-Fi assist has

1465
00:47:16,746 --> 0:47:18,656
only been taking very limited

1466
00:47:18,656 --> 0:47:20,356
amount of information into

1467
00:47:20,356 --> 0:47:22,536
account to decide whether Wi-Fi

1468
00:47:22,536 --> 0:47:23,266
is good enough.

1469
00:47:24,376 --> 0:47:26,596
Now in iOS 13, we changed that.

1470
00:47:27,946 --> 0:47:30,046
We made it such that all

1471
00:47:30,046 --> 0:47:31,766
components in the system are

1472
00:47:31,766 --> 0:47:33,476
providing information into Wi-Fi

1473
00:47:33,476 --> 0:47:35,526
Assist so that Wi-Fi Assist has

1474
00:47:35,526 --> 0:47:36,926
a full cross-layer mobility

1475
00:47:36,926 --> 0:47:37,396
detection.

1476
00:47:38,526 --> 0:47:40,316
The lower layers, Wi-Fi and

1477
00:47:40,316 --> 0:47:41,716
cell, are providing information

1478
00:47:41,716 --> 0:47:43,656
about the signal quality in a

1479
00:47:43,656 --> 0:47:45,256
much fine-- more fine-grained

1480
00:47:45,256 --> 0:47:47,236
way than in iOS 12.

1481
00:47:48,306 --> 0:47:49,526
And also, the higher-layer

1482
00:47:49,626 --> 0:47:50,476
frameworks like

1483
00:47:50,616 --> 0:47:52,596
Network.framework, URLSession,

1484
00:47:53,116 --> 0:47:54,516
other daemons of the system,

1485
00:47:54,736 --> 0:47:55,596
they are all providing

1486
00:47:55,596 --> 0:47:57,166
information into Wi-Fi Assist

1487
00:47:57,636 --> 0:47:59,266
about how their flows are making

1488
00:47:59,266 --> 0:47:59,826
progress.

1489
00:48:00,666 --> 0:48:02,796
All of this information going

1490
00:48:02,796 --> 0:48:04,206
into Wi-Fi Assist will then

1491
00:48:04,206 --> 0:48:06,136
allow it to detect whether we

1492
00:48:06,136 --> 0:48:08,076
are in a mobility scenario or

1493
00:48:08,076 --> 0:48:09,526
not and whether we should maybe

1494
00:48:09,526 --> 0:48:10,796
start trying to use cell.

1495
00:48:11,776 --> 0:48:13,416
So, all of this information,

1496
00:48:13,746 --> 0:48:15,086
then Wi-Fi Assist is going to

1497
00:48:15,086 --> 0:48:17,786
take its decisions and feeds it

1498
00:48:17,786 --> 0:48:19,106
back into the system.

1499
00:48:19,546 --> 0:48:21,326
It tells the lower layers, Wi-Fi

1500
00:48:21,326 --> 0:48:23,106
and cell, to make efforts to

1501
00:48:23,106 --> 0:48:24,346
improve the signal quality.

1502
00:48:25,246 --> 0:48:27,046
And it also communicates to the

1503
00:48:27,046 --> 0:48:27,936
other layers like

1504
00:48:28,406 --> 0:48:29,986
Network.framework and URLSession

1505
00:48:30,076 --> 0:48:31,406
to start recovering flows.

1506
00:48:31,406 --> 0:48:34,946
All of this leads to a much

1507
00:48:34,946 --> 0:48:36,306
improved flow recovery.

1508
00:48:37,796 --> 0:48:39,896
Now, even when a flow has

1509
00:48:39,896 --> 0:48:40,886
already been established on

1510
00:48:40,886 --> 0:48:42,416
Wi-Fi and has started to

1511
00:48:42,416 --> 0:48:44,936
exchange data, if later on the

1512
00:48:44,936 --> 0:48:47,636
signal quality is reducing, we

1513
00:48:47,636 --> 0:48:49,466
are able to move the next

1514
00:48:49,466 --> 0:48:50,786
request that would have been

1515
00:48:50,786 --> 0:48:53,396
used on Wi-Fi, we are able to

1516
00:48:53,396 --> 0:48:54,796
move that one over to cell.

1517
00:48:55,796 --> 0:48:57,476
So, your applications should now

1518
00:48:57,476 --> 0:48:59,246
much less be getting stuck on

1519
00:48:59,246 --> 0:48:59,686
Wi-Fi.

1520
00:49:00,286 --> 0:49:03,306
Now, the question for you, of

1521
00:49:03,306 --> 0:49:04,976
course, is how can you get the

1522
00:49:04,976 --> 0:49:06,676
benefits from Wi-Fi Assist?

1523
00:49:07,236 --> 0:49:08,366
How can you get the benefits

1524
00:49:08,366 --> 0:49:09,536
from all the improvements that

1525
00:49:09,536 --> 0:49:10,886
we did in iOS 13?

1526
00:49:12,346 --> 0:49:14,756
So, first of all, the way you

1527
00:49:14,756 --> 0:49:16,096
can get them is by using the

1528
00:49:16,096 --> 0:49:18,356
high-level APIs like URLSession

1529
00:49:18,356 --> 0:49:19,306
and Network.framework.

1530
00:49:20,206 --> 0:49:22,276
All of these APIs have been

1531
00:49:22,276 --> 0:49:23,886
built with Wi-Fi Assist in mind

1532
00:49:24,846 --> 0:49:25,746
and they are getting the full

1533
00:49:25,746 --> 0:49:26,586
benefit from it.

1534
00:49:27,396 --> 0:49:28,656
So, make sure that your

1535
00:49:28,656 --> 0:49:30,906
applications are using those

1536
00:49:32,526 --> 0:49:32,656
APIs.

1537
00:49:33,706 --> 0:49:36,966
Next up, some of you are doing

1538
00:49:36,966 --> 0:49:39,566
active interface management with

1539
00:49:39,566 --> 0:49:41,896
APIs like SCNetworkReachability.

1540
00:49:42,686 --> 0:49:43,996
You are maybe doing pre-flight

1541
00:49:43,996 --> 0:49:45,896
checks to know where is your

1542
00:49:46,016 --> 0:49:47,506
request going to end up on.

1543
00:49:47,506 --> 0:49:49,156
Is it going to go on Wi-Fi or on

1544
00:49:49,156 --> 0:49:49,476
cell?

1545
00:49:50,606 --> 0:49:51,666
The problem with those

1546
00:49:51,666 --> 0:49:53,766
pre-flight checks is that when

1547
00:49:53,766 --> 0:49:55,906
you do it and the moment when

1548
00:49:55,906 --> 0:49:57,326
you actually use the connection,

1549
00:49:58,816 --> 0:49:59,716
the interface might have

1550
00:49:59,776 --> 0:50:00,196
changed.

1551
00:49:59,776 --> 0:50:00,196
changed.

1552
00:50:00,316 --> 0:50:02,136
Wi-Fi Assist might have decided

1553
00:50:02,136 --> 0:50:03,396
to actually send your flow over

1554
00:50:03,396 --> 0:50:05,256
to cell or Wi-Fi might have

1555
00:50:05,346 --> 0:50:06,456
significantly improved.

1556
00:50:06,946 --> 0:50:08,806
So, the pre-flight check is a

1557
00:50:08,806 --> 0:50:10,636
very bad indicator of where your

1558
00:50:10,636 --> 0:50:11,966
flow is going to end up on.

1559
00:50:12,506 --> 0:50:14,696
So, we encourage you to rethink

1560
00:50:14,696 --> 0:50:16,166
your usage of the pre-flight

1561
00:50:16,166 --> 0:50:18,796
checks and come talk to us later

1562
00:50:18,796 --> 0:50:20,326
in the labs about why you need

1563
00:50:20,326 --> 0:50:22,286
it and we will work with you to

1564
00:50:22,286 --> 0:50:24,246
find an alternative.

1565
00:50:25,806 --> 0:50:28,656
Now, if you still need to steer

1566
00:50:28,756 --> 0:50:30,316
flows, for example, away from

1567
00:50:30,316 --> 0:50:32,216
cell because, for example, the

1568
00:50:32,216 --> 0:50:34,936
data transfer is way too big or

1569
00:50:34,936 --> 0:50:36,966
the traffic is not critical for

1570
00:50:36,966 --> 0:50:39,146
the user experience, you can use

1571
00:50:39,146 --> 0:50:40,206
helpers like

1572
00:50:40,296 --> 0:50:42,396
allowsExpensiveNetworkAccess and

1573
00:50:42,396 --> 0:50:43,346
set them to false.

1574
00:50:43,946 --> 0:50:46,116
That way, your request is not

1575
00:50:46,116 --> 0:50:47,956
going to go on the cellular

1576
00:50:48,416 --> 0:50:48,546
link.

1577
00:50:50,176 --> 0:50:53,076
So, this is Wi-Fi Assist and we

1578
00:50:53,076 --> 0:50:54,486
made a lot of efforts to make it

1579
00:50:54,486 --> 0:50:56,616
even better in iOS 13 and you

1580
00:50:56,616 --> 0:50:59,066
can get the benefits by using

1581
00:50:59,066 --> 0:51:01,356
the high-level APIs.

1582
00:50:59,066 --> 0:51:01,356
the high-level APIs.

1583
00:51:01,356 --> 0:51:02,856
This brings me to the next one,

1584
00:51:03,186 --> 0:51:04,696
which is Multipath Transports.

1585
00:51:07,296 --> 0:51:09,716
Siri has been using it for quite

1586
00:51:09,716 --> 0:51:10,306
a while now.

1587
00:51:10,676 --> 0:51:12,366
We have opened up the API two

1588
00:51:12,366 --> 0:51:15,416
years ago and we have encouraged

1589
00:51:15,416 --> 0:51:18,336
you to look into your apps and

1590
00:51:18,336 --> 0:51:19,776
see which of your flows might

1591
00:51:19,776 --> 0:51:22,966
benefit the most from Multipath

1592
00:51:23,616 --> 0:51:23,716
TCP.

1593
00:51:23,926 --> 0:51:26,326
So, this year in iOS 13, we ran

1594
00:51:26,326 --> 0:51:27,946
this well and looked into our

1595
00:51:27,946 --> 0:51:31,246
own apps and decided to see

1596
00:51:31,556 --> 0:51:33,126
which one is going to benefit

1597
00:51:33,126 --> 0:51:34,266
from Multipath TCP.

1598
00:51:34,936 --> 0:51:36,196
Which one is often used when

1599
00:51:36,196 --> 0:51:37,736
mobile and has a very critical

1600
00:51:37,736 --> 0:51:39,046
flow for the user experience

1601
00:51:39,046 --> 0:51:40,206
that is hard to recover?

1602
00:51:41,256 --> 0:51:43,266
Well, one application is Apple

1603
00:51:43,266 --> 0:51:43,796
Maps.

1604
00:51:44,576 --> 0:51:46,306
Most users, well, when they are

1605
00:51:46,306 --> 0:51:47,666
getting their directions, they

1606
00:51:47,666 --> 0:51:48,816
are walking out of their home

1607
00:51:49,336 --> 0:51:50,526
and they are using search.

1608
00:51:50,956 --> 0:51:53,226
So, in iOS 13, we enabled

1609
00:51:53,226 --> 0:51:54,976
Multipath TCP for Apple Maps.

1610
00:51:55,516 --> 0:51:59,716
[ Applause ]

1611
00:52:00,216 --> 0:52:01,806
Now, whenever you are walking

1612
00:52:01,806 --> 0:52:03,576
out of the home and using Maps,

1613
00:52:03,876 --> 0:52:05,846
looking up your directions,

1614
00:52:05,916 --> 0:52:07,346
trying to search a restaurant,

1615
00:52:08,266 --> 0:52:10,016
MP TCP will be used and move

1616
00:52:10,016 --> 0:52:11,316
your flow over from Wi-Fi to

1617
00:52:11,316 --> 0:52:11,616
cell.

1618
00:52:12,456 --> 0:52:14,666
And since Monday, since the

1619
00:52:14,666 --> 0:52:15,836
first beta, we have been

1620
00:52:15,836 --> 0:52:17,846
enabling it and we are going to

1621
00:52:17,846 --> 0:52:19,506
see a much better responsiveness

1622
00:52:19,506 --> 0:52:20,286
for Apple Maps.

1623
00:52:22,086 --> 0:52:24,386
The next one where we are having

1624
00:52:24,386 --> 0:52:26,666
a very critical user experience

1625
00:52:27,326 --> 0:52:29,236
and that is also often used when

1626
00:52:29,236 --> 0:52:30,916
walking out of the home is when

1627
00:52:30,916 --> 0:52:31,856
you are streaming music.

1628
00:52:32,416 --> 0:52:33,616
Right? When you are streaming

1629
00:52:33,616 --> 0:52:34,796
music, you are downloading a

1630
00:52:34,796 --> 0:52:38,006
large file full of music content

1631
00:52:38,326 --> 0:52:40,286
and you don't want this music to

1632
00:52:40,286 --> 0:52:40,696
stall.

1633
00:52:41,116 --> 0:52:42,286
Because when it stalls, the user

1634
00:52:42,286 --> 0:52:43,646
will be disrupted.

1635
00:52:44,616 --> 0:52:46,836
So, since iOS 13, we enabled

1636
00:52:46,836 --> 0:52:48,716
Multipath TCP for Apple Music.

1637
00:52:49,516 --> 0:52:53,866
[ Applause ]

1638
00:52:54,366 --> 0:52:56,026
We are seeing much less music

1639
00:52:56,026 --> 0:52:58,616
streaming stalls because MP TCP

1640
00:52:58,616 --> 0:53:00,596
is now moving flows over to cell

1641
00:52:58,616 --> 0:53:00,596
is now moving flows over to cell

1642
00:53:00,846 --> 0:53:02,206
whenever we are getting close to

1643
00:53:02,206 --> 0:53:02,806
stalling.

1644
00:53:03,616 --> 0:53:05,466
And so the user is going to have

1645
00:53:05,466 --> 0:53:06,666
a much better experience.

1646
00:53:07,266 --> 0:53:09,916
Now, the thing about this, we

1647
00:53:09,916 --> 0:53:11,816
have enabled it for Siri, Maps,

1648
00:53:11,876 --> 0:53:14,316
and Music, and you can do this

1649
00:53:14,316 --> 0:53:14,576
too.

1650
00:53:15,646 --> 0:53:17,536
We recommend-- we encourage you

1651
00:53:17,536 --> 0:53:19,146
to look into your applications.

1652
00:53:19,286 --> 0:53:20,566
Which one is often used when

1653
00:53:20,566 --> 0:53:21,646
walking out of the home?

1654
00:53:22,516 --> 0:53:24,746
Which one has a very critical

1655
00:53:24,746 --> 0:53:26,266
flow that is critical for the

1656
00:53:26,266 --> 0:53:27,676
user experience and that is hard

1657
00:53:27,676 --> 0:53:28,256
to recover?

1658
00:53:29,146 --> 0:53:30,376
Those kind of flows, they are

1659
00:53:30,376 --> 0:53:31,676
perfect for the multipath

1660
00:53:31,676 --> 0:53:33,316
service type and you can choose

1661
00:53:33,316 --> 0:53:35,056
them on handover or interactive

1662
00:53:35,516 --> 0:53:36,736
in the URLSession and

1663
00:53:36,736 --> 0:53:37,516
Network.framework.

1664
00:53:38,696 --> 0:53:40,966
Now, don't forget, if you do

1665
00:53:40,966 --> 0:53:42,596
enter in multipath, it still

1666
00:53:42,596 --> 0:53:44,446
requires both the client and the

1667
00:53:44,446 --> 0:53:47,046
server to work together, so go

1668
00:53:47,046 --> 0:53:49,076
and visit this URL to make sure

1669
00:53:49,076 --> 0:53:50,306
that your servers are configured

1670
00:53:50,306 --> 0:53:50,776
correctly.

1671
00:53:52,796 --> 0:53:56,566
So, this brings me to the end of

1672
00:53:56,626 --> 0:53:58,136
the mobility part of this

1673
00:53:58,136 --> 0:53:58,466
session.

1674
00:53:59,976 --> 0:54:01,146
If there is one thing that we

1675
00:53:59,976 --> 0:54:01,146
If there is one thing that we

1676
00:54:01,146 --> 0:54:02,866
want you to remember, it's that

1677
00:54:03,626 --> 0:54:05,886
whenever a user is walking out

1678
00:54:05,886 --> 0:54:07,586
of their home, he should not

1679
00:54:07,676 --> 0:54:09,256
have a bad experience and turn

1680
00:54:09,256 --> 0:54:09,846
off Wi-Fi.

1681
00:54:10,786 --> 0:54:13,416
So, when you are developing your

1682
00:54:13,416 --> 0:54:14,666
applications, when you are

1683
00:54:14,666 --> 0:54:16,716
testing them and you are

1684
00:54:16,716 --> 0:54:19,336
configuring a bad Wi-Fi network

1685
00:54:19,336 --> 0:54:20,316
and you are walking out of the

1686
00:54:20,316 --> 0:54:22,266
home while testing it, don't

1687
00:54:22,266 --> 0:54:23,416
expect your applications to

1688
00:54:23,416 --> 0:54:25,556
become slow, to fail, or your

1689
00:54:25,556 --> 0:54:28,746
flows to basically-- to take

1690
00:54:28,746 --> 0:54:29,156
forever.

1691
00:54:29,916 --> 0:54:31,256
It should, in principle, just

1692
00:54:31,256 --> 0:54:31,476
work.

1693
00:54:31,956 --> 0:54:33,996
If it doesn't, make sure that

1694
00:54:33,996 --> 0:54:35,106
those flows that have been

1695
00:54:35,106 --> 0:54:37,266
failing are using the high-level

1696
00:54:37,586 --> 0:54:37,736
APIs.

1697
00:54:38,026 --> 0:54:39,356
These APIs are getting the full

1698
00:54:39,356 --> 0:54:41,356
benefit from Wi-Fi Assist from

1699
00:54:41,356 --> 0:54:42,856
all the improvements that we did

1700
00:54:42,856 --> 0:54:43,806
in iOS 13.

1701
00:54:44,376 --> 0:54:46,576
If you are doing active

1702
00:54:46,606 --> 0:54:48,826
interface management, come talk

1703
00:54:48,826 --> 0:54:50,726
to us in the lab or send us an

1704
00:54:50,726 --> 0:54:51,726
Apple Bug Report.

1705
00:54:52,296 --> 0:54:53,846
Tell us about your use case and

1706
00:54:53,846 --> 0:54:55,086
we will work together with you

1707
00:54:55,086 --> 0:54:57,056
to find an alternative so that

1708
00:54:57,516 --> 0:55:00,226
you can avoid doing this active

1709
00:54:57,516 --> 0:55:00,226
you can avoid doing this active

1710
00:55:00,226 --> 0:55:01,736
interface management and get the

1711
00:55:01,736 --> 0:55:03,666
full benefits from Wi-Fi assist.

1712
00:55:04,206 --> 0:55:07,026
And, finally, if you have flows

1713
00:55:07,026 --> 0:55:08,146
that are still getting stuck on

1714
00:55:08,146 --> 0:55:09,826
Wi-Fi and that are hard to

1715
00:55:09,826 --> 0:55:12,756
recover, try to see if you can

1716
00:55:12,756 --> 0:55:14,266
start using a multipath service

1717
00:55:14,266 --> 0:55:16,006
type, get your servers ready,

1718
00:55:16,006 --> 0:55:17,956
and get the same benefits as

1719
00:55:17,956 --> 0:55:20,056
Apple Music, Maps, and Siri.

1720
00:55:20,556 --> 0:55:22,506
So, this is the end of this part

1721
00:55:22,506 --> 0:55:23,186
of the session.

1722
00:55:24,126 --> 0:55:25,336
We have seen that with the Low

1723
00:55:25,336 --> 0:55:28,196
Data Mode users can now turn on

1724
00:55:28,196 --> 0:55:29,816
marked networks so that they

1725
00:55:29,816 --> 0:55:31,706
reduce the data usage on those

1726
00:55:31,706 --> 0:55:32,206
networks.

1727
00:55:32,696 --> 0:55:34,906
We have exposed a new API so

1728
00:55:34,906 --> 0:55:36,616
that your applications can

1729
00:55:36,616 --> 0:55:37,726
benefit from it as well.

1730
00:55:38,276 --> 0:55:41,246
If you are building a publisher

1731
00:55:41,246 --> 0:55:43,036
subscriber style application,

1732
00:55:43,766 --> 0:55:45,496
Combine in URLSession allows you

1733
00:55:45,496 --> 0:55:47,136
to build you a very elegant app,

1734
00:55:47,746 --> 0:55:49,386
the same way as Guoye has shown

1735
00:55:49,386 --> 0:55:49,936
you today.

1736
00:55:50,676 --> 0:55:52,706
Finally, WebSockets.

1737
00:55:53,106 --> 0:55:54,366
It has been the most requested

1738
00:55:54,406 --> 0:55:57,026
feature is making it into iOS 13

1739
00:55:57,596 --> 0:55:59,396
and so you can easily build

1740
00:55:59,396 --> 0:56:01,066
two-way communications into your

1741
00:55:59,396 --> 0:56:01,066
two-way communications into your

1742
00:56:01,066 --> 0:56:01,876
applications.

1743
00:56:02,436 --> 0:56:05,996
And, in iOS 13, we did a huge

1744
00:56:05,996 --> 0:56:08,486
push to improve the mobility for

1745
00:56:08,636 --> 0:56:11,306
your applications so you can get

1746
00:56:11,306 --> 0:56:12,986
the same benefits by using the

1747
00:56:12,986 --> 0:56:14,746
high-level APIs.

1748
00:56:15,816 --> 0:56:18,796
So, later this afternoon, there

1749
00:56:18,796 --> 0:56:20,446
is a part two of the Advances in

1750
00:56:20,446 --> 0:56:21,346
Networking session.

1751
00:56:21,836 --> 0:56:23,216
You will be seeing more exciting

1752
00:56:23,216 --> 0:56:25,396
new APIs that will benefit your

1753
00:56:25,396 --> 0:56:26,016
applications.

1754
00:56:26,836 --> 0:56:28,216
Tomorrow, for those among you

1755
00:56:28,216 --> 0:56:30,496
that are developing on macOS,

1756
00:56:30,906 --> 0:56:32,466
there are new APIs for network

1757
00:56:32,466 --> 0:56:35,046
extensions, and we also have the

1758
00:56:35,046 --> 0:56:36,636
lab at 9:00 a.m. starting at

1759
00:56:36,636 --> 0:56:38,016
9:00 a.m. tomorrow and you can

1760
00:56:38,016 --> 0:56:39,626
come there to ask us questions

1761
00:56:40,086 --> 0:56:41,586
and we will be very happy to

1762
00:56:41,586 --> 0:56:44,006
help you out.

1763
00:56:44,286 --> 0:56:45,676
So, this is the end.

1764
00:56:45,776 --> 0:56:46,986
I hope you had fun and you

1765
00:56:46,986 --> 0:56:47,906
enjoyed the session.

1766
00:56:50,046 --> 0:56:50,516
Thank you very much.

1767
00:56:51,508 --> 0:56:53,508
[ Applause ]
