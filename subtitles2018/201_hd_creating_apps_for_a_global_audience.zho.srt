1
00:00:16,717 --> 0:00:20,387
（为全球观众创建app

2
00:00:20,454 --> 0:00:23,090
早上好 哇 谢谢

3
00:00:27,194 --> 0:00:28,495
非常感谢

4
00:00:28,562 --> 0:00:31,465
再次欢迎来到WWDC

5
00:00:32,399 --> 0:00:33,400
我叫Joaquim

6
00:00:33,467 --> 0:00:35,569
我想 我不必再介绍我自己了

7
00:00:36,136 --> 0:00:39,339
Karan、Dongyuan

8
00:00:39,406 --> 0:00:40,474
国际化

9
00:00:40,908 --> 0:00:42,442
那么 我们要讨论什么呢？

10
00:00:42,509 --> 0:00:44,778
我将做一个简短的介绍

11
00:00:44,845 --> 0:00:49,016
我们还将做一些深入研究

12
00:00:49,416 --> 0:00:52,920
另外 还将涉及一些

13
00:00:54,755 --> 0:00:56,957
那么 为什么这很重要呢？

14
00:00:57,257 --> 0:00:59,126
这适用于每一个app

15
00:00:59,226 --> 0:01:01,195
国际化是一个重要的概念

16
00:00:59,226 --> 0:01:01,195
国际化是一个重要的概念

17
00:01:01,395 --> 0:01:02,863
我们将仔细研究其中的细节

18
00:01:02,930 --> 0:01:05,299
为什么它适用于每一个app

19
00:01:05,364 --> 0:01:07,334
不论你支持哪种语言的设置

20
00:01:08,936 --> 0:01:10,137
再者

21
00:01:10,204 --> 0:01:12,206
这是为了让更多的人来了解它

22
00:01:12,272 --> 0:01:15,042
它使每个人

23
00:01:15,609 --> 0:01:18,612
不论他们说的是哪种语言

24
00:01:18,912 --> 0:01:20,447
或者他们是在哪个国家成长的

25
00:01:20,848 --> 0:01:22,816
需要注意的是

26
00:01:22,883 --> 0:01:23,984
后两者也可能有区别

27
00:01:24,084 --> 0:01:26,353
这是一个值得记住的事情

28
00:01:28,355 --> 0:01:32,125
因此 国际化涵盖了广泛的主题

29
00:01:32,192 --> 0:01:34,561
甚至 它也可能

30
00:01:35,362 --> 0:01:36,830
如果你对这个话题还不熟悉

31
00:01:37,464 --> 0:01:38,966
思考这问题的最佳方式也许是

32
00:01:39,032 --> 0:01:43,504
把国际化

33
00:01:43,871 --> 0:01:46,740
这个讨论

34
00:01:47,474 --> 0:01:51,879
无论是它的最初开始阶段

35
00:01:51,945 --> 0:01:54,047
甚至是在App Store

36
00:01:54,448 --> 0:01:57,351
像你的App Store

37
00:01:57,584 --> 0:02:00,587
都应该在国际背景下公开讨论

38
00:01:57,584 --> 0:02:00,587
都应该在国际背景下公开讨论

39
00:02:03,023 --> 0:02:06,226
就像我之前说过的

40
00:02:08,794 --> 0:02:11,598
在Apple 我们有

41
00:02:11,932 --> 0:02:14,635
因此 我们估计超过70%的客户

42
00:02:14,701 --> 0:02:16,270
是在美国以外的

43
00:02:16,670 --> 0:02:19,373
这意味着

44
00:02:19,773 --> 0:02:22,743
他们希望

45
00:02:23,043 --> 0:02:25,579
不仅如此 还要注意到任何可能

46
00:02:25,646 --> 0:02:28,182
与他们的区域设置相关的任何细节

47
00:02:30,217 --> 0:02:33,820
我们支持38种不同的书写语言

48
00:02:33,887 --> 0:02:38,759
以及更多的键盘和输入方法

49
00:02:38,825 --> 0:02:40,494
供人们打字和输入

50
00:02:40,994 --> 0:02:41,995
这对你来说意味着

51
00:02:42,062 --> 0:02:44,932
你有一个可以开始的坚实基础

52
00:02:45,265 --> 0:02:49,436
我们的每个API

53
00:02:49,837 --> 0:02:51,538
这意味着

54
00:02:51,605 --> 0:02:54,575
你将开始为你的app

55
00:02:54,641 --> 0:02:57,611
提供非常好的国际支持

56
00:03:00,614 --> 0:03:04,484
因此 例如 这可能涉及到

57
00:03:05,185 --> 0:03:07,821
如果我不谈日期和时间

58
00:03:07,888 --> 0:03:09,323
但是思考一下

59
00:03:09,890 --> 0:03:12,693
因为全世界的人都有不同的期望

60
00:03:13,260 --> 0:03:16,496
这是葡萄牙的东圣贝托

61
00:03:17,297 --> 0:03:19,700
但我今天关注的重点

62
00:03:20,033 --> 0:03:23,570
倒不如说是火车站里时间的表现方式

63
00:03:23,637 --> 0:03:27,040
如果你去那里你会发现

64
00:03:27,608 --> 0:03:30,344
这是真的 不仅仅在火车站是这样

65
00:03:30,410 --> 0:03:33,347
在许多国家 这是非常司空见惯的事

66
00:03:34,581 --> 0:03:36,350
因此 你的app应该知道这些

67
00:03:36,517 --> 0:03:39,553
并根据区域来显示时间

68
00:03:40,020 --> 0:03:41,655
通过DateFormatter

69
00:03:41,722 --> 0:03:44,057
这是一组我们提供的API

70
00:03:44,324 --> 0:03:46,426
它真的可以为你完成所有繁琐的任务

71
00:03:49,363 --> 0:03:50,964
另一个例子是日历

72
00:03:51,031 --> 0:03:53,934
世界各地有许多不同的日历系统

73
00:03:54,201 --> 0:03:56,537
另外 还必须注意到

74
00:03:56,603 --> 0:03:59,339
许多人每天使用不止一种日历系统

75
00:03:59,406 --> 0:04:02,442
他们可能会利用其中一个日历系统

76
00:03:59,406 --> 0:04:02,442
他们可能会利用其中一个日历系统

77
00:04:03,010 --> 0:04:04,211
另一个日历系统用于商业活动

78
00:04:04,645 --> 0:04:06,513
他们都有一些不同的特点 例如：

79
00:04:06,747 --> 0:04:08,415
闰月和闰年

80
00:04:08,782 --> 0:04:11,251
不同的天数和不同的月份数

81
00:04:11,518 --> 0:04:14,588
因此 要准确地了解这些

82
00:04:14,922 --> 0:04:16,890
并要知道如何恰当地表达这些信息

83
00:04:16,957 --> 0:04:19,326
这也就是说要在国际上有所了解

84
00:04:20,327 --> 0:04:24,665
这是一个iOS日历app的例子

85
00:04:24,731 --> 0:04:26,466
在公历的顶部显示中国农历

86
00:04:27,000 --> 0:04:29,136
我们在日历和

87
00:04:29,203 --> 0:04:32,005
提供了一组API

88
00:04:34,474 --> 0:04:37,077
我们也可以讨论一下单位和测量

89
00:04:37,344 --> 0:04:42,015
无论是公制还是英制

90
00:04:42,382 --> 0:04:45,719
或者是摄氏温度或华氏温度

91
00:04:46,386 --> 0:04:47,421
你的app应该了解

92
00:04:47,487 --> 0:04:49,690
它们在这些区域相应的默认值

93
00:04:49,923 --> 0:04:52,860
并可以根据用户的偏好来加以变化

94
00:04:55,696 --> 0:04:58,332
不仅如此 不管是对于单位

95
00:04:58,532 --> 0:04:59,633
都应当这样

96
00:04:59,700 --> 0:05:01,134
它涵盖了很多方面

97
00:04:59,700 --> 0:05:01,134
它涵盖了很多方面

98
00:05:01,201 --> 0:05:04,338
从十进制分隔符到千位分隔符

99
00:05:04,671 --> 0:05:08,942
甚至是用来表示和表达的所有数字

100
00:05:09,409 --> 0:05:10,777
这些都会在不同的区域间发生改变

101
00:05:11,378 --> 0:05:15,015
如果你使用数字格式器的话

102
00:05:15,616 --> 0:05:18,385
这不仅对保持一致性很重要

103
00:05:18,452 --> 0:05:19,853
而且也是可以理解的

104
00:05:22,789 --> 0:05:26,994
文本也是另一个伟大的话题

105
00:05:27,327 --> 0:05:30,030
根据你成长过程中学习和书写的

106
00:05:30,097 --> 0:05:32,232
一种或多种语言

107
00:05:32,599 --> 0:05:34,635
以及这些语言脚本的书写方法

108
00:05:35,169 --> 0:05:36,703
你可能会认为 有些属性

109
00:05:36,770 --> 0:05:40,607
在其他脚本书写中和其他语言中

110
00:05:40,908 --> 0:05:42,609
但这可能并不一定成立

111
00:05:43,277 --> 0:05:46,246
一个例子 可能是明显的例子

112
00:05:46,313 --> 0:05:48,682
有些语言

113
00:05:49,049 --> 0:05:52,085
在这个例子中 乌尔都语

114
00:05:52,152 --> 0:05:54,488
这和英语完全不同

115
00:05:54,688 --> 0:05:56,123
可能与你已习惯的完全不同

116
00:05:56,957 --> 0:05:58,125
更进一步说

117
00:05:59,193 --> 0:06:03,163
很多书籍 比如大部分用

118
00:05:59,193 --> 0:06:03,163
很多书籍 比如大部分用

119
00:06:03,463 --> 0:06:05,866
都是从右向左垂直书写排列的

120
00:06:06,433 --> 0:06:08,101
因此 了解这些格式

121
00:06:08,468 --> 0:06:12,039
了解呈现这些格式的上下文

122
00:06:12,105 --> 0:06:14,041
并根据这些格式调整布局

123
00:06:14,107 --> 0:06:15,909
会是你的app的一个重要方面

124
00:06:16,343 --> 0:06:20,514
TextKit和CoreText

125
00:06:20,948 --> 0:06:23,050
可以帮助你确保在每一种情况下

126
00:06:23,116 --> 0:06:24,751
都做正确的事情

127
00:06:28,222 --> 0:06:31,225
我们再进一步来谈论

128
00:06:31,892 --> 0:06:32,893
根据你成长的地方

129
00:06:32,960 --> 0:06:35,162
你可能会有

130
00:06:35,696 --> 0:06:38,899
或者是在你的名字之前的家庭姓氏

131
00:06:39,867 --> 0:06:43,570
同样 知道如何呈现这些内容

132
00:06:43,904 --> 0:06:45,506
可能是app的一个关键部分

133
00:06:45,906 --> 0:06:48,909
在这一点上

134
00:06:49,309 --> 0:06:52,946
并且了解格式化名称的细节和复杂性

135
00:06:53,680 --> 0:06:56,016
我们有这个API

136
00:06:56,316 --> 0:06:57,317
可帮助你做这件事情

137
00:07:00,187 --> 0:07:04,625
好吧 所以在所有这些概念中

138
00:07:06,093 --> 0:07:08,595
你的许多用户

139
00:07:08,662 --> 0:07:11,131
并用它进行交流

140
00:07:11,565 --> 0:07:13,133
无论是因为他们迁移到别的国家

141
00:07:13,200 --> 0:07:15,335
或者还是仅仅因为这个地区本身

142
00:07:15,636 --> 0:07:17,204
使用的是不止一种语言

143
00:07:18,772 --> 0:07:20,374
更进一步来说

144
00:07:22,142 --> 0:07:24,344
即使你的app

145
00:07:24,845 --> 0:07:27,481
你的客户也很可能

146
00:07:27,548 --> 0:07:31,518
以自己的母语

147
00:07:32,085 --> 0:07:36,089
所以不管你的app支持什么语言

148
00:07:36,356 --> 0:07:40,227
在整app的设计和实现过程中

149
00:07:40,427 --> 0:07:42,996
这些都是非常重要的话题

150
00:07:45,999 --> 0:07:48,101
如果你第一次听说这些东西

151
00:07:48,569 --> 0:07:49,570
就像我之前说过的

152
00:07:49,903 --> 0:07:53,540
我们有一组非常好的API

153
00:07:53,607 --> 0:07:55,375
并能处理好所有这些不同的方面

154
00:07:55,442 --> 0:07:59,346
并且知道不同语言和区域之间的

155
00:07:59,847 --> 0:08:03,250
关于Formatter API

156
00:07:59,847 --> 0:08:03,250
关于Formatter API

157
00:08:03,884 --> 0:08:06,687
我们也有一些很棒的演讲

158
00:08:06,753 --> 0:08:09,323
如何为你的app

159
00:08:13,093 --> 0:08:15,796
因此让我们开始深入探讨布局

160
00:08:15,963 --> 0:08:18,632
和一些与国际化相关的目标

161
00:08:19,066 --> 0:08:20,968
尤其是当涉及到适应性布局的时候

162
00:08:23,203 --> 0:08:26,373
因为实际上适应性布局的核心目标是

163
00:08:26,440 --> 0:08:29,943
是要呈现各种不同的信息

164
00:08:30,878 --> 0:08:33,981
当你将你的app

165
00:08:34,780 --> 0:08:36,416
你最有可能遇到的是

166
00:08:36,482 --> 0:08:38,986
这些翻译出来内容的长度

167
00:08:39,052 --> 0:08:40,953
根据不同的语言

168
00:08:41,020 --> 0:08:42,289
它们可能会更短或更长

169
00:08:42,356 --> 0:08:45,926
这是你的设计和布局

170
00:08:45,993 --> 0:08:48,028
（布局——较长或较短的

171
00:08:48,095 --> 0:08:50,097
除此之外 还有方向性

172
00:08:50,163 --> 0:08:51,298
就像我之前提到的

173
00:08:51,965 --> 0:08:54,268
因为有些语言是用从右到左书写的

174
00:08:54,635 --> 0:08:56,637
所以它就需要一些设计上的考虑

175
00:08:56,937 --> 0:08:58,906
不仅是你的app中有文本

176
00:08:59,173 --> 0:09:01,141
也包括你呈现信息的方式

177
00:08:59,173 --> 0:09:01,141
也包括你呈现信息的方式

178
00:09:01,375 --> 0:09:03,677
尤其是横向流动的信息

179
00:09:04,011 --> 0:09:08,482
以及一般的流动应该如何适应

180
00:09:10,517 --> 0:09:11,985
（布局基础）

181
00:09:12,052 --> 0:09:15,055
从自动布局出发

182
00:09:15,155 --> 0:09:17,057
你可能听说过自动布局

183
00:09:17,591 --> 0:09:20,994
这是一项强大的技术

184
00:09:21,662 --> 0:09:25,465
自动布局

185
00:09:26,066 --> 0:09:28,068
显式框架或位置

186
00:09:28,836 --> 0:09:32,005
而是用来描述

187
00:09:32,272 --> 0:09:35,142
因此也就是用来描述它们之间

188
00:09:35,409 --> 0:09:37,945
以及它们时间

189
00:09:40,113 --> 0:09:42,115
在这个基于约束的系统上

190
00:09:42,416 --> 0:09:45,018
我们有了引导和跟踪约束的概念

191
00:09:45,853 --> 0:09:47,221
它的意思是

192
00:09:47,287 --> 0:09:50,424
它本质上描述了

193
00:09:50,691 --> 0:09:51,959
从左向右的属性

194
00:09:52,426 --> 0:09:55,929
而在阿拉伯语和希伯来语

195
00:09:56,263 --> 0:09:58,065
从右边和左边来计算

196
00:09:58,599 --> 0:10:02,202
这意味着通过自动布局

197
00:09:58,599 --> 0:10:02,202
这意味着通过自动布局

198
00:10:02,402 --> 0:10:06,139
这些布局取决于书写方向

199
00:10:06,206 --> 0:10:09,910
而不需要为任何一个书写方向

200
00:10:13,947 --> 0:10:15,382
另一个很好的起点是

201
00:10:15,449 --> 0:10:17,851
使用我们在用户界面框架中提供的

202
00:10:17,918 --> 0:10:20,087
高级组件和文件柜

203
00:10:20,153 --> 0:10:24,358
因为它们使用了所有这些概念

204
00:10:25,058 --> 0:10:27,861
UIKit AppKit中提供的

205
00:10:27,928 --> 0:10:29,663
和StackViews

206
00:10:30,230 --> 0:10:34,268
你可以仅仅通过它们

207
00:10:34,668 --> 0:10:37,471
甚至可以将它们相互嵌入

208
00:10:37,538 --> 0:10:38,539
创建整个app布局

209
00:10:39,907 --> 0:10:42,109
看一个

210
00:10:42,910 --> 0:10:44,912
我可在Stack View中

211
00:10:44,978 --> 0:10:48,715
这样在左边 有城市名称

212
00:10:49,149 --> 0:10:52,386
这可以放到

213
00:10:52,452 --> 0:10:55,322
因为在英语中 这是从左向右流动

214
00:10:55,722 --> 0:10:57,391
而且因为

215
00:10:58,725 --> 0:11:01,695
如果我用希伯来语运行我的app

216
00:10:58,725 --> 0:11:01,695
如果我用希伯来语运行我的app

217
00:11:01,762 --> 0:11:04,364
因为这些信息会自动适应

218
00:11:04,565 --> 0:11:06,767
因为Stack View

219
00:11:06,900 --> 0:11:08,535
并且使用了引擎下的自动布局

220
00:11:10,971 --> 0:11:12,873
如果你想了解更多

221
00:11:12,940 --> 0:11:16,009
以及如何根据不同的

222
00:11:16,076 --> 0:11:17,644
详细信息的话

223
00:11:17,711 --> 0:11:20,347
那么下面这些也是你需要了解的

224
00:11:24,218 --> 0:11:27,454
因此当涉及到你app中的

225
00:11:28,055 --> 0:11:30,924
其关键目标

226
00:11:30,991 --> 0:11:33,927
不要假设固定宽度

227
00:11:34,328 --> 0:11:36,797
如果你不假设固定宽度

228
00:11:36,864 --> 0:11:40,167
这让你的app

229
00:11:40,234 --> 0:11:42,536
不仅可以水平地适应不同长度的变化

230
00:11:42,603 --> 0:11:45,772
而且甚至可以让你的标签竖直生长

231
00:11:45,839 --> 0:11:48,041
并在必要的时候适应多行

232
00:11:48,709 --> 0:11:50,777
这是你在app中

233
00:11:50,844 --> 0:11:51,912
所必须要决定的事情

234
00:11:52,246 --> 0:11:53,847
你想优先考虑什么

235
00:11:53,914 --> 0:11:57,818
以便能够允许你的app发展和使用

236
00:11:57,885 --> 0:12:00,521
（文本长度——文本长度变化

237
00:11:57,885 --> 0:12:00,521
（文本长度——文本长度变化

238
00:12:00,587 --> 0:12:03,757
如果你的标签和控件

239
00:12:03,824 --> 0:12:06,393
这些高级组件的

240
00:12:06,460 --> 0:12:10,497
要么使用自动布局本身进行定位

241
00:12:10,564 --> 0:12:12,566
你已经允许你的标签生长了

242
00:12:12,833 --> 0:12:16,103
你的控件可以接收

243
00:12:16,670 --> 0:12:19,206
随后的工作就是

244
00:12:19,540 --> 0:12:22,075
相互之间彼此成长的问题

245
00:12:24,311 --> 0:12:25,312
（测试）

246
00:12:25,379 --> 0:12:27,948
所以说这真是太伟大了

247
00:12:28,015 --> 0:12:30,284
那么确切地说

248
00:12:30,350 --> 0:12:32,219
在自适应布局方面

249
00:12:32,286 --> 0:12:36,490
正在检查所有正确的盒子呢？

250
00:12:36,990 --> 0:12:38,225
好消息是Xcode

251
00:12:38,292 --> 0:12:40,460
提供了许多特性供你测试使用

252
00:12:40,827 --> 0:12:43,630
不仅如此

253
00:12:43,697 --> 0:12:46,333
并在app开发的早期

254
00:12:46,400 --> 0:12:47,801
快速发现这些问题

255
00:12:48,602 --> 0:12:50,237
伪语言就是一个例子

256
00:12:50,370 --> 0:12:51,638
伪语言非常了不起

257
00:12:52,306 --> 0:12:54,942
尤其是当你还没有为你的app

258
00:12:55,008 --> 0:12:56,977
所以你可以在Xcode中

259
00:12:57,277 --> 0:13:00,581
使用伪语言运行你的app

260
00:12:57,277 --> 0:13:00,581
使用伪语言运行你的app

261
00:13:00,948 --> 0:13:04,618
这就改变了你的app的

262
00:13:05,185 --> 0:13:07,554
一个例子是有界字符串伪语言

263
00:13:07,821 --> 0:13:10,057
会在你显示的每个UI字符串的

264
00:13:10,123 --> 0:13:12,492
开头和结尾添加几个字符

265
00:13:13,026 --> 0:13:17,264
然后你可以确保你的app内容中

266
00:13:17,331 --> 0:13:19,499
没有任何截断或意外的剪切

267
00:13:19,566 --> 0:13:20,734
所以这是非常有用的

268
00:13:20,801 --> 0:13:23,837
我们还有其它更多的伪语言

269
00:13:26,106 --> 0:13:27,608
特别是对于自动布局

270
00:13:28,175 --> 0:13:31,778
我们在Xcode中

271
00:13:31,845 --> 0:13:35,015
Xcode可以告诉你接口构建中

272
00:13:35,082 --> 0:13:36,683
常见的反模式

273
00:13:37,217 --> 0:13:39,653
这可能是固定宽度的约束

274
00:13:39,853 --> 0:13:42,322
或者是控件或标签上的约束太少

275
00:13:42,689 --> 0:13:45,692
可能会在运行时带来问题

276
00:13:45,759 --> 0:13:47,227
特别是在其他语言中

277
00:13:50,597 --> 0:13:53,100
现在我想请Dongyuan上台

278
00:13:53,166 --> 0:13:55,669
他会给你们演示所有这些

279
00:13:55,936 --> 0:13:58,038
非常感谢

280
00:13:58,305 --> 0:13:59,840
谢谢 Dongyuan？

281
00:14:00,874 --> 0:14:01,975
谢谢 Joaquim

282
00:14:02,042 --> 0:14:05,612
（演示——DONGYUAN LIU

283
00:14:09,416 --> 0:14:10,417
嗨 我是Dongyuan

284
00:14:11,018 --> 0:14:13,420
让我向你展示

285
00:14:13,487 --> 0:14:16,089
以及在现实世界中

286
00:14:17,257 --> 0:14:19,226
这是一个名为

287
00:14:19,526 --> 0:14:22,129
它是第一家

288
00:14:23,197 --> 0:14:26,333
它不仅可以让你预订

289
00:14:26,400 --> 0:14:29,303
而且正如你在表格中看到的

290
00:14:30,437 --> 0:14:34,107
所以我想去月球好几次了

291
00:14:34,374 --> 0:14:35,609
这次我可以实现了

292
00:14:36,844 --> 0:14:39,313
这是月球上所有可以找到的地点

293
00:14:39,646 --> 0:14:41,281
以及它们与地球的距离

294
00:14:42,182 --> 0:14:44,484
让我选择

295
00:14:45,752 --> 0:14:47,821
这是我们的旅行详细信息页面

296
00:14:48,856 --> 0:14:50,691
往返一次似乎很便宜

297
00:14:50,958 --> 0:14:52,426
所以我要买更多的票

298
00:14:54,027 --> 0:14:55,128
我们买三张吧

299
00:14:56,263 --> 0:14:57,297
我们走吧

300
00:14:58,732 --> 0:15:02,202
正如你所看到的 因为

301
00:14:58,732 --> 0:15:02,202
正如你所看到的 因为

302
00:15:02,636 --> 0:15:04,538
我们的布局在英语中运行很好

303
00:15:05,172 --> 0:15:09,176
然而我们仍然希望

304
00:15:09,877 --> 0:15:12,379
因为我们还处于开发周期的早期阶段

305
00:15:12,546 --> 0:15:14,314
我们还没有本地化这个app

306
00:15:14,781 --> 0:15:17,117
我们可以使用

307
00:15:17,818 --> 0:15:20,888
为此我将转到当前方案

308
00:15:21,522 --> 0:15:22,589
点击编辑方案

309
00:15:23,590 --> 0:15:27,327
在方案编辑器中

310
00:15:28,262 --> 0:15:32,366
我可以选择一个伪语言

311
00:15:33,534 --> 0:15:37,738
它对于暴露出来的潜在的

312
00:15:38,772 --> 0:15:40,774
让我们在这个配置中运行这个app

313
00:15:42,643 --> 0:15:43,644
你可以看倒

314
00:15:43,944 --> 0:15:46,246
这个伪语言

315
00:15:46,313 --> 0:15:48,749
都添加了一些特殊字符

316
00:15:49,449 --> 0:15:51,285
我们这里的标签行仍然很好

317
00:15:51,718 --> 0:15:53,620
但是浏览按钮被截断了

318
00:15:54,254 --> 0:15:55,355
我们来解决这个问题

319
00:15:57,491 --> 0:16:02,062
当我选择浏览按钮时

320
00:15:57,491 --> 0:16:02,062
当我选择浏览按钮时

321
00:16:05,199 --> 0:16:07,835
警告显示我们有一个固定的宽度约束

322
00:16:08,068 --> 0:16:09,403
这可能会导致剪切

323
00:16:10,871 --> 0:16:13,874
如果我想知道更多的信息

324
00:16:14,641 --> 0:16:19,213
我将通过单击警告标志

325
00:16:19,947 --> 0:16:21,081
这里有三个选项

326
00:16:21,148 --> 0:16:24,618
我将选择第一个

327
00:16:24,685 --> 0:16:27,254
以便在有更多内容时按钮可以变宽

328
00:16:27,888 --> 0:16:28,889
好的

329
00:16:29,857 --> 0:16:31,425
好的 没有其他布局问题

330
00:16:32,860 --> 0:16:34,895
我将向你展示一个

331
00:16:34,962 --> 0:16:36,663
我刚才所做的更改

332
00:16:37,664 --> 0:16:40,734
我要到右上角的助理编辑器

333
00:16:40,901 --> 0:16:42,035
这里的中间按钮

334
00:16:44,271 --> 0:16:47,641
在这里我可以选择预览和

335
00:16:48,675 --> 0:16:53,080
预览窗格允许你在不运行app时

336
00:16:53,213 --> 0:16:55,449
以多种屏幕大小和不同语言查看布局

337
00:16:56,617 --> 0:16:57,918
在右下角

338
00:16:58,218 --> 0:17:02,256
我将选择刚才使用的

339
00:16:58,218 --> 0:17:02,256
我将选择刚才使用的

340
00:17:04,156 --> 0:17:07,394
太好了

341
00:17:07,627 --> 0:17:10,631
我们的浏览按钮现在可以

342
00:17:12,499 --> 0:17:15,801
另一个非常有用的伪语言

343
00:17:16,369 --> 0:17:19,406
它用于验证你的布局是否

344
00:17:19,473 --> 0:17:23,644
如德语、芬兰语或俄语相匹配

345
00:17:24,310 --> 0:17:26,946
它们有时比英语长两倍

346
00:17:27,614 --> 0:17:28,949
我们来看看是否可行

347
00:17:30,717 --> 0:17:32,519
现在浏览器按钮仍然正常

348
00:17:32,653 --> 0:17:35,222
但是我们的标签行

349
00:17:36,256 --> 0:17:37,391
当我选择标签时

350
00:17:37,658 --> 0:17:40,360
我可以看到我们只有一个中心X约束

351
00:17:40,561 --> 0:17:43,463
我们没有任何前导或尾随空间约束

352
00:17:43,730 --> 0:17:45,432
这样标签就会溢出

353
00:17:46,300 --> 0:17:49,703
让我们添加一个前导空间约束

354
00:17:50,504 --> 0:17:52,372
我按住控制键

355
00:17:53,207 --> 0:17:55,075
从标签拖动

356
00:17:55,542 --> 0:17:57,644
选择引导空间到安全区域

357
00:17:59,780 --> 0:18:02,950
我可以选择约束来适应它的值

358
00:17:59,780 --> 0:18:02,950
我可以选择约束来适应它的值

359
00:18:03,817 --> 0:18:07,054
让我们写一些合理的东西在这里边部

360
00:18:09,523 --> 0:18:13,493
我可以立即看到我的标签不再被剪切

361
00:18:14,294 --> 0:18:16,363
然而它仍然被截断了

362
00:18:16,930 --> 0:18:20,501
这是一个我们想向我们的所有客户

363
00:18:20,868 --> 0:18:21,869
这并不是理想的

364
00:18:22,803 --> 0:18:24,071
不需要截断

365
00:18:24,438 --> 0:18:27,741
我可以允许标签

366
00:18:28,709 --> 0:18:30,310
在这里当我选择标签时

367
00:18:31,011 --> 0:18:33,947
我可以看到

368
00:18:34,481 --> 0:18:37,184
这意味着我们只允许标签为一行

369
00:18:38,118 --> 0:18:39,820
如果我把这个值改为零

370
00:18:41,355 --> 0:18:44,825
我可以允许标签

371
00:18:47,461 --> 0:18:51,665
我可以看到我的标签现在

372
00:18:52,866 --> 0:18:54,701
如果我把语言转换回英语

373
00:18:55,502 --> 0:18:58,939
我的标签仍然是一行

374
00:19:00,340 --> 0:19:02,843
我还鼓励你

375
00:19:04,077 --> 0:19:06,680
在这里你可以选择不同尺寸的屏幕

376
00:19:07,481 --> 0:19:10,150
我鼓励你在最小的设备上

377
00:19:10,217 --> 0:19:11,218
比如 iPhone SE

378
00:19:11,552 --> 0:19:14,421
因为剪裁和截断更有可能发生在

379
00:19:14,488 --> 0:19:15,756
较小的设备上

380
00:19:17,691 --> 0:19:20,827
现在我想知道我们的布局

381
00:19:20,894 --> 0:19:22,062
如阿拉伯语或希伯来语

382
00:19:22,896 --> 0:19:24,198
正如我前面所说的

383
00:19:24,264 --> 0:19:26,767
我们还没有这些语言的本地化

384
00:19:27,568 --> 0:19:29,503
我们可以运行另一个伪语言

385
00:19:30,404 --> 0:19:34,875
让我们再次打开方案编辑器

386
00:19:35,642 --> 0:19:38,145
我将选择从右到左的伪语言

387
00:19:39,546 --> 0:19:41,315
并在模拟器中运行app

388
00:19:44,718 --> 0:19:46,520
（构建成功）

389
00:19:48,488 --> 0:19:49,756
好吧 浏览

390
00:19:50,924 --> 0:19:52,092
正如你在这里所看到的

391
00:19:52,326 --> 0:19:57,931
我们的表格现在从右向左流动

392
00:19:58,565 --> 0:20:02,503
因为我们使用了

393
00:19:58,565 --> 0:20:02,503
因为我们使用了

394
00:20:03,170 --> 0:20:05,305
其它标准的UIKit组件

395
00:20:05,973 --> 0:20:08,542
所有的标题都在右边

396
00:20:08,609 --> 0:20:10,577
这是从右到左的引领边

397
00:20:11,144 --> 0:20:14,414
这里的军人臂章是在左侧

398
00:20:15,549 --> 0:20:17,684
这次我要去木星

399
00:20:18,952 --> 0:20:21,255
你可能注意到

400
00:20:21,321 --> 0:20:24,525
后退按钮现在右上角而不是左上角

401
00:20:25,259 --> 0:20:28,161
这对于

402
00:20:29,129 --> 0:20:31,098
让我们在木星上选择一个位置

403
00:20:32,566 --> 0:20:35,469
这是我们的旅行详情页面

404
00:20:35,936 --> 0:20:37,371
一切似乎都很好

405
00:20:37,437 --> 0:20:39,706
除了步进器和旅行者标签之外

406
00:20:40,474 --> 0:20:43,610
第一个问题是步进器应该在尾侧

407
00:20:43,677 --> 0:20:45,379
也就是从右侧到左边到左边

408
00:20:46,079 --> 0:20:48,081
旅行者的标签应该在前面

409
00:20:48,148 --> 0:20:49,483
在这里的右边

410
00:20:50,017 --> 0:20:53,687
而且旅行者标签上也有不必要的空格

411
00:20:54,788 --> 0:20:56,657
让我们在那个接口构建器中修复它

412
00:21:00,027 --> 0:21:02,362
让我找到我们的故障区单元…

413
00:21:03,363 --> 0:21:04,598
它在这里 好的

414
00:21:05,465 --> 0:21:06,667
放大一点

415
00:21:06,733 --> 0:21:08,368
（旅行细节）

416
00:21:09,603 --> 0:21:10,704
（旅行者）

417
00:21:10,771 --> 0:21:13,373
当我选择旅行者标签和步进器时

418
00:21:13,807 --> 0:21:15,909
我可以看到它们没有限制

419
00:21:16,109 --> 0:21:17,110
这不太好

420
00:21:17,678 --> 0:21:19,980
当然Xcode对此有一个警告

421
00:21:21,181 --> 0:21:22,783
因此 解决这问题的一种方法是

422
00:21:22,850 --> 0:21:25,586
为旅行者添加一个前导空间限制

423
00:21:25,819 --> 0:21:28,021
并为步进器添加一个尾随空间约束

424
00:21:28,856 --> 0:21:31,825
前导和尾随将转换为左右语言

425
00:21:31,992 --> 0:21:33,293
对于从右向左的语言

426
00:21:34,094 --> 0:21:37,164
但是这里我将向你展示

427
00:21:37,598 --> 0:21:39,399
即使用UIStackView

428
00:21:39,900 --> 0:21:43,237
一个使用在引擎盖下

429
00:21:44,004 --> 0:21:47,207
通过使用Stack View

430
00:21:48,408 --> 0:21:49,877
让我选择这两个视图

431
00:21:50,777 --> 0:21:54,915
然后点击右下角的嵌入按钮

432
00:21:56,216 --> 0:21:57,251
选择Stack View

433
00:21:59,019 --> 0:22:01,421
现在我的两个视图在

434
00:21:59,019 --> 0:22:01,421
现在我的两个视图在

435
00:22:01,955 --> 0:22:05,425
剩下的惟一事情就是向

436
00:22:06,894 --> 0:22:10,697
我要选择Stack View

437
00:22:11,932 --> 0:22:13,567
这里输入四个0

438
00:22:13,800 --> 0:22:16,537
因为我希望

439
00:22:16,603 --> 0:22:17,771
表视图单元格

440
00:22:18,505 --> 0:22:21,508
我喜欢在这里选择对边距的约束

441
00:22:21,942 --> 0:22:24,411
因为我想要

442
00:22:24,578 --> 0:22:28,048
我想要前缘与单元分隔符对齐

443
00:22:28,482 --> 0:22:29,850
并添加四个约束

444
00:22:30,784 --> 0:22:31,818
那就这样吧

445
00:22:32,753 --> 0:22:34,922
我要验证我的改变

446
00:22:37,057 --> 0:22:38,592
（构建成功）

447
00:22:39,193 --> 0:22:40,194
是的 浏览

448
00:22:41,361 --> 0:22:43,163
这次我想去拜访地球

449
00:22:44,598 --> 0:22:48,135
我想去葡萄牙的里斯本

450
00:22:49,570 --> 0:22:50,571
走吧

451
00:22:51,238 --> 0:22:52,239
现在你可以看到

452
00:22:52,506 --> 0:22:56,643
因为我们的旅行标签和步进器

453
00:22:57,044 --> 0:22:58,679
我们可自由获得从左到右的支持

454
00:22:59,546 --> 0:23:00,647
预订这次旅行吧

455
00:22:59,546 --> 0:23:00,647
预订这次旅行吧

456
00:23:00,714 --> 0:23:02,182
（你的预订已确认）

457
00:23:02,249 --> 0:23:03,250
太好了

458
00:23:06,086 --> 0:23:08,055
现在让我总结一下我们所讨论的内容

459
00:23:08,121 --> 0:23:09,189
（演示）

460
00:23:13,327 --> 0:23:16,129
为了让我们的app布局

461
00:23:16,563 --> 0:23:18,498
有几个简单的步骤

462
00:23:18,899 --> 0:23:22,336
尽可能使用Stack View

463
00:23:22,703 --> 0:23:24,872
因为它们

464
00:23:25,439 --> 0:23:27,541
相信 它们使用起来更容易

465
00:23:28,408 --> 0:23:31,078
为了更好地控制

466
00:23:31,311 --> 0:23:33,647
并确保使用前导和尾随约束

467
00:23:33,947 --> 0:23:36,183
以便你能够适应从右到左的语言

468
00:23:36,950 --> 0:23:39,386
对于早期测试的

469
00:23:39,853 --> 0:23:42,823
你可以使用

470
00:23:43,490 --> 0:23:46,927
请不要忽略接口构建器中的

471
00:23:47,160 --> 0:23:50,430
它们对于避免

472
00:23:50,497 --> 0:23:51,965
剪切 截断和重叠

473
00:23:52,432 --> 0:23:54,468
现在请Karan上台来讨论文本

474
00:23:54,535 --> 0:23:56,203
（布局）

475
00:23:57,204 --> 0:23:58,205
谢谢 Dongyuan

476
00:23:59,373 --> 0:24:00,474
大家早上好

477
00:23:59,373 --> 0:24:00,474
大家早上好

478
00:24:00,941 --> 0:24:02,242
让我们来谈谈文本

479
00:24:04,645 --> 0:24:07,714
在Apple

480
00:24:07,781 --> 0:24:09,917
是我们设计过程的一个关键部分

481
00:24:11,185 --> 0:24:13,954
对我们来说

482
00:24:14,288 --> 0:24:18,258
文本在屏幕上的样子

483
00:24:19,293 --> 0:24:23,263
以及它被翻译成其他语言的方式

484
00:24:26,733 --> 0:24:29,770
现在让我向你介绍一些关键的方面

485
00:24:29,837 --> 0:24:32,172
当我们将自己的app

486
00:24:32,239 --> 0:24:33,340
我们要记住这些关键方面

487
00:24:33,574 --> 0:24:35,742
以及你如何利用这些东西

488
00:24:35,809 --> 0:24:38,412
使你的app在其他语言中

489
00:24:41,148 --> 0:24:43,517
现在我要讲三个主题

490
00:24:43,917 --> 0:24:46,153
用语言和脚本建立一些基础

491
00:24:46,253 --> 0:24:49,056
然后深入到字体和样式

492
00:24:49,923 --> 0:24:51,491
现在让我们来谈谈语言和脚本

493
00:24:51,558 --> 0:24:53,260
（文本——语言和脚本）

494
00:24:54,595 --> 0:24:56,363
什么是脚本？

495
00:24:56,430 --> 0:24:58,065
当我谈到脚本时

496
00:24:58,131 --> 0:25:00,200
不是指Bash脚本或

497
00:24:58,131 --> 0:25:00,200
不是指Bash脚本或

498
00:25:00,901 --> 0:25:04,905
我说的是一种语言的书写方式

499
00:25:05,005 --> 0:25:06,440
也就是书写系统

500
00:25:06,507 --> 0:25:08,475
你用来写一种语言的字母

501
00:25:08,942 --> 0:25:10,744
这些是我们支持的

502
00:25:10,811 --> 0:25:12,412
从左到右书写的脚本

503
00:25:14,181 --> 0:25:16,750
我们也有从右到左书写的脚本

504
00:25:18,819 --> 0:25:21,555
要注意的是

505
00:25:21,622 --> 0:25:22,990
是它们是多语言的

506
00:25:23,423 --> 0:25:27,160
因此每个脚本都支持

507
00:25:27,728 --> 0:25:29,162
正如你所看到的

508
00:25:29,229 --> 0:25:32,833
这里的拉丁语脚本

509
00:25:33,867 --> 0:25:35,736
其他脚本也是如此

510
00:25:36,069 --> 0:25:37,938
例如 西里尔文脚本也支持

511
00:25:38,005 --> 0:25:39,540
各种不同的语言

512
00:25:40,340 --> 0:25:42,643
如果你看从右到左的脚本

513
00:25:42,943 --> 0:25:44,678
我们看到的是阿拉伯语脚本

514
00:25:44,745 --> 0:25:46,480
而不是阿拉伯语

515
00:25:46,547 --> 0:25:48,081
支持多种不同的语言

516
00:25:48,148 --> 0:25:51,218
比如阿拉伯语和波斯语

517
00:25:52,419 --> 0:25:56,657
你在屏幕上看到的 是的

518
00:25:57,157 --> 0:25:58,759
但这可不是为了作秀

519
00:25:58,825 --> 0:26:00,460
当你开发app和不同的脚本时

520
00:25:58,825 --> 0:26:00,460
当你开发app和不同的脚本时

521
00:26:00,527 --> 0:26:02,529
实际上是有很多的含义的

522
00:26:02,596 --> 0:26:06,099
因为有些概念

523
00:26:06,166 --> 0:26:07,334
在脚本之间映射

524
00:26:07,401 --> 0:26:09,203
我来举几个例子

525
00:26:11,505 --> 0:26:12,773
让我们来谈谈字体

526
00:26:13,907 --> 0:26:16,677
在这里你可以看到

527
00:26:17,110 --> 0:26:19,613
你会看到很多标签

528
00:26:21,081 --> 0:26:23,150
你在加泰罗尼亚语中

529
00:26:25,886 --> 0:26:28,722
最后

530
00:26:29,489 --> 0:26:33,427
现在我想提醒大家注意的是

531
00:26:33,493 --> 0:26:35,762
屏幕上所有的文本

532
00:26:35,829 --> 0:26:38,599
都用我们的系统字体呈现

533
00:26:39,466 --> 0:26:41,602
我想让你注意的另一件事是

534
00:26:41,668 --> 0:26:43,704
所有的东西都被渲染得很漂亮

535
00:26:44,071 --> 0:26:45,272
这是因为

536
00:26:45,339 --> 0:26:47,908
支持各种不同的语言

537
00:26:48,242 --> 0:26:50,477
当你在你的app中

538
00:26:50,544 --> 0:26:52,679
你肯定会得到免费的支持

539
00:26:54,181 --> 0:26:57,651
现在你在Xcode中

540
00:26:57,718 --> 0:26:59,786
都会默认为

541
00:27:00,354 --> 0:27:04,291
但是如果你想更进一步

542
00:27:06,660 --> 0:27:09,429
我们在操作系统中

543
00:27:09,496 --> 0:27:11,565
这些样式都是精心实现的

544
00:27:11,632 --> 0:27:14,001
以支持各种不同的用例

545
00:27:14,568 --> 0:27:18,505
并且能够很好地映射

546
00:27:19,373 --> 0:27:20,707
因此当你用一种文本样式时

547
00:27:20,774 --> 0:27:24,311
你可以向你的用户保证

548
00:27:26,079 --> 0:27:27,748
你也可以更进一步

549
00:27:28,849 --> 0:27:31,518
如果你将标签设置为

550
00:27:31,585 --> 0:27:34,821
它将根据用户的文本大小设置

551
00:27:35,289 --> 0:27:36,823
这对于使用更小或

552
00:27:36,890 --> 0:27:39,426
来说非常方便

553
00:27:39,893 --> 0:27:40,894
就像我自己一样

554
00:27:42,029 --> 0:27:43,997
因此我强烈建议你使用它

555
00:27:44,431 --> 0:27:47,734
这将确保你的文本样式适当伸缩

556
00:27:50,003 --> 0:27:52,105
但是假设 像我们现在一样

557
00:27:52,172 --> 0:27:55,175
我们正在开发一个度假行星app

558
00:27:55,843 --> 0:27:59,980
我们想要在这个

559
00:28:00,347 --> 0:28:03,083
但现在不是这样

560
00:28:03,150 --> 0:28:05,619
所以我们决定把标题采用一种字体

561
00:28:05,686 --> 0:28:07,888
它应该使app更加具有个性

562
00:28:08,856 --> 0:28:11,859
所以我们看了一些可供选择的

563
00:28:13,026 --> 0:28:14,628
首先我们看了这个

564
00:28:14,828 --> 0:28:16,964
但是正如

565
00:28:17,464 --> 0:28:20,334
我们希望保持本地化

566
00:28:20,400 --> 0:28:22,636
中心部分

567
00:28:22,703 --> 0:28:25,806
我们做的第一件事就是检查

568
00:28:25,873 --> 0:28:28,308
这适用于

569
00:28:28,375 --> 0:28:30,344
好 我们已经有了法国的本地化

570
00:28:30,744 --> 0:28:31,745
我们试过了

571
00:28:32,446 --> 0:28:34,014
事实证明 事实并非如此

572
00:28:34,548 --> 0:28:39,353
所以我们一直在看我们的选择清单

573
00:28:39,653 --> 0:28:41,388
我们看了另一种字体

574
00:28:42,356 --> 0:28:45,225
当我们用法语试的时候

575
00:28:45,859 --> 0:28:48,829
因为它支持法语所需的所有字符

576
00:28:49,029 --> 0:28:50,130
这真是个好消息

577
00:28:52,132 --> 0:28:55,669
我们的app下一步

578
00:28:55,736 --> 0:28:58,472
但是我们还没有越南语的本地化

579
00:28:59,206 --> 0:29:02,576
那么你可以使用的一个很棒的工具是

580
00:28:59,206 --> 0:29:02,576
那么你可以使用的一个很棒的工具是

581
00:29:02,643 --> 0:29:06,780
它可以安装在每一个Mac电脑上

582
00:29:06,847 --> 0:29:08,315
它安装在每台Mac电脑上了

583
00:29:08,549 --> 0:29:12,519
在字体本中

584
00:29:12,719 --> 0:29:13,787
就像这里的越南语

585
00:29:14,421 --> 0:29:17,824
我们在这里看到

586
00:29:18,025 --> 0:29:20,427
越南语是一组受支持的语言

587
00:29:20,861 --> 0:29:23,931
事实上 这种字体也支持

588
00:29:24,031 --> 0:29:25,966
所以我们有些确信

589
00:29:26,033 --> 0:29:28,869
如果我们扩展到俄语

590
00:29:28,936 --> 0:29:30,404
这种字体将也将好用

591
00:29:31,171 --> 0:29:33,874
现在我要提醒大家注意

592
00:29:34,341 --> 0:29:35,475
如果仅仅因为字体书说

593
00:29:35,542 --> 0:29:37,711
一种字体支持一种给定语言

594
00:29:37,778 --> 0:29:41,081
你不需要用这种语言

595
00:29:41,148 --> 0:29:44,251
你仍然需要通过尝试

596
00:29:44,318 --> 0:29:45,385
确实适用于该语言

597
00:29:48,956 --> 0:29:54,194
我们为我们的度假星球app

598
00:29:55,462 --> 0:29:58,198
现在我们将进一步扩展

599
00:29:58,332 --> 0:29:59,833
我们想做更多的语言

600
00:29:59,900 --> 0:30:02,102
特别是我们希望本地化为中文

601
00:29:59,900 --> 0:30:02,102
特别是我们希望本地化为中文

602
00:30:03,270 --> 0:30:06,106
好吧 我们把所有的字符串

603
00:30:06,173 --> 0:30:07,174
它们已经回来了

604
00:30:07,341 --> 0:30:10,477
我们的app现在已经完全本地化为

605
00:30:10,978 --> 0:30:11,979
酷

606
00:30:12,880 --> 0:30:14,681
但这并不是真的

607
00:30:14,748 --> 0:30:16,650
看看标题发生了什么

608
00:30:17,251 --> 0:30:19,520
在英语中 我们有这个有趣的字体

609
00:30:19,586 --> 0:30:22,956
但是在中文中

610
00:30:23,056 --> 0:30:26,560
这是因为我们的字体只支持

611
00:30:27,761 --> 0:30:33,567
当然 解决这个问题的方法是

612
00:30:33,634 --> 0:30:36,069
现在

613
00:30:36,236 --> 0:30:37,271
就这么简单

614
00:30:39,072 --> 0:30:41,208
不幸的是

615
00:30:41,275 --> 0:30:43,710
这是一个文体的问题

616
00:30:43,777 --> 0:30:46,113
但是我可以告诉你

617
00:30:47,881 --> 0:30:50,217
这很简单

618
00:30:50,617 --> 0:30:54,888
首先你通常从

619
00:30:54,955 --> 0:30:57,457
比如在我们的例子中是英语

620
00:30:57,524 --> 0:31:00,093
于是我们选择拉丁文字体

621
00:30:57,524 --> 0:31:00,093
于是我们选择拉丁文字体

622
00:31:01,228 --> 0:31:03,664
我想介绍给你们的关键概念叫做

623
00:31:03,730 --> 0:31:05,265
级联列表

624
00:31:05,766 --> 0:31:07,334
于是这个级联列表上写着

625
00:31:07,668 --> 0:31:12,472
如果我想渲染这个汉字

626
00:31:13,073 --> 0:31:14,908
而第一个字体没有它

627
00:31:15,209 --> 0:31:18,212
我应该用什么字体来查找这个字符？

628
00:31:18,478 --> 0:31:21,815
如果你不指定一个级联列表的话

629
00:31:21,982 --> 0:31:23,483
但是如果你有一个级联列表

630
00:31:23,550 --> 0:31:27,454
那么你可以在返回到系统字体之前

631
00:31:28,322 --> 0:31:30,958
因此在本例中我们创建了

632
00:31:31,024 --> 0:31:34,161
我们手工选择的

633
00:31:34,761 --> 0:31:36,897
现在如果你的app

634
00:31:36,964 --> 0:31:40,601
你可以在这里添加多个东西

635
00:31:41,535 --> 0:31:44,471
一旦你有了一个级联列表

636
00:31:44,538 --> 0:31:47,040
然后你创建了一个新的字体

637
00:31:48,675 --> 0:31:51,411
而且还要确保如果你的app

638
00:31:51,478 --> 0:31:52,613
即它应该使用的类型

639
00:31:52,880 --> 0:31:55,682
那么你的字体也应该适应它

640
00:31:55,816 --> 0:31:57,751
这和API调用一样简单

641
00:31:59,386 --> 0:32:00,487
让我们看看一些例子

642
00:31:59,386 --> 0:32:00,487
让我们看看一些例子

643
00:32:02,155 --> 0:32:05,025
这是macOS Mojave

644
00:32:05,092 --> 0:32:06,360
在macOS Mojave上

645
00:32:07,227 --> 0:32:10,697
正如你所看到的 对于这个新设计

646
00:32:11,231 --> 0:32:13,634
当然

647
00:32:13,700 --> 0:32:16,470
支持的所有语言

648
00:32:16,537 --> 0:32:18,872
选择相同的圆形样式的话

649
00:32:18,939 --> 0:32:20,174
那就没有意义了

650
00:32:21,942 --> 0:32:25,579
此外在macOS Mojave上

651
00:32:29,483 --> 0:32:31,618
另一个例子是信息app

652
00:32:31,685 --> 0:32:37,090
在这个app中 你可以

653
00:32:37,791 --> 0:32:40,928
现在这里 你将看到

654
00:32:41,295 --> 0:32:44,031
不仅被翻译成其他语言

655
00:32:44,097 --> 0:32:45,732
而且在风格上也得到了匹配

656
00:32:45,799 --> 0:32:50,137
所以在我们支持的所有语言中

657
00:32:52,005 --> 0:32:53,340
这是字体

658
00:32:54,541 --> 0:32:55,976
让我们再来谈谈风格样式

659
00:32:56,777 --> 0:32:58,712
同样我也要从定义开始

660
00:32:59,479 --> 0:33:00,914
我所说的风格是什么意思？

661
00:32:59,479 --> 0:33:00,914
我所说的风格是什么意思？

662
00:33:01,448 --> 0:33:04,218
广义地说

663
00:33:04,284 --> 0:33:08,755
我指的是你选择字体后

664
00:33:09,056 --> 0:33:11,358
让我们来说说字体的字的粗细

665
00:33:11,692 --> 0:33:14,628
比如它有多粗

666
00:33:14,962 --> 0:33:17,231
以及字体的大小

667
00:33:19,399 --> 0:33:22,102
所以需要记住的关键方面是

668
00:33:22,169 --> 0:33:27,241
有些方面可以更好地转化为其他语言

669
00:33:27,341 --> 0:33:32,112
让我们来看一个例子

670
00:33:32,779 --> 0:33:34,848
这里我们有一个简单的

671
00:33:35,482 --> 0:33:38,652
我们把“火星”

672
00:33:38,719 --> 0:33:39,853
用斜体表示它们是变量

673
00:33:41,622 --> 0:33:44,157
这就是它如何转换成繁体中文的

674
00:33:45,425 --> 0:33:46,927
这里有几个问题

675
00:33:46,994 --> 0:33:48,795
（词强调）

676
00:33:48,862 --> 0:33:54,168
“火星”在英语中是斜体

677
00:33:54,268 --> 0:33:57,771
为什么？因为斜体化

678
00:33:57,838 --> 0:34:00,073
它不是拉丁语 西里尔语

679
00:33:57,838 --> 0:34:00,073
它不是拉丁语 西里尔语

680
00:34:00,140 --> 0:34:01,909
一个概念

681
00:34:03,277 --> 0:34:06,246
所以使用斜体字的设计

682
00:34:07,080 --> 0:34:10,684
另一件要注意的是

683
00:34:10,751 --> 0:34:14,021
也没有大写字母和小写字母的概念

684
00:34:14,221 --> 0:34:17,456
所以

685
00:34:17,524 --> 0:34:20,027
你就失去了在英语中的自然区别

686
00:34:20,960 --> 0:34:24,231
还有几点要注意的是

687
00:34:25,831 --> 0:34:28,502
还有因为“2”

688
00:34:28,869 --> 0:34:31,103
仍然是斜体

689
00:34:33,306 --> 0:34:34,440
如何解决这个问题呢？

690
00:34:35,775 --> 0:34:39,346
关键是要意识到你在强调

691
00:34:39,413 --> 0:34:41,348
而不一定非得是斜体

692
00:34:41,581 --> 0:34:43,917
强调可以用多种不同的方式来完成

693
00:34:43,984 --> 0:34:45,319
这是一种很好的方法

694
00:34:45,385 --> 0:34:47,187
可以在不同的语言之间进行强调

695
00:34:47,254 --> 0:34:49,623
事实上它适用于我们支持的所有语言

696
00:34:49,690 --> 0:34:52,726
即对给定的单词加粗

697
00:34:55,329 --> 0:35:00,000
最后让我们讨论一下

698
00:35:00,067 --> 0:35:01,335
（字符强调）

699
00:35:01,401 --> 0:35:03,637
假设我们有一个

700
00:35:04,104 --> 0:35:06,740
我们想突出显示匹配的结果部分

701
00:35:06,940 --> 0:35:09,042
以使用户更清楚地了解

702
00:35:09,543 --> 0:35:11,378
现在这对于英语来说非常有效

703
00:35:11,445 --> 0:35:15,115
因为它使用了一个更大加粗

704
00:35:17,584 --> 0:35:19,786
但是这对印地语来说真的很糟糕

705
00:35:20,087 --> 0:35:22,289
所以你在这里看到的

706
00:35:23,190 --> 0:35:24,558
任何会读印地语的人

707
00:35:24,625 --> 0:35:26,460
都会告诉你说

708
00:35:26,527 --> 0:35:27,794
都是完全坏的

709
00:35:28,362 --> 0:35:32,966
每当你看到

710
00:35:33,200 --> 0:35:34,968
这就是说有非常严重的错误了

711
00:35:35,802 --> 0:35:37,437
发生这种情况的原因是

712
00:35:37,738 --> 0:35:40,240
即使它是相同的字体家族

713
00:35:40,307 --> 0:35:44,077
不同的字体权重实际上是不同的字体

714
00:35:44,244 --> 0:35:46,680
如果你有两种不同的字体

715
00:35:46,747 --> 0:35:48,015
印地语这样的语言的

716
00:35:48,382 --> 0:35:49,917
合适的连接行为

717
00:35:51,351 --> 0:35:54,421
因此解决这个问题的一种简单方法

718
00:35:54,488 --> 0:35:57,424
在字符级别上使用不同的强调方式

719
00:35:57,491 --> 0:36:02,729
因此在一个字符级别

720
00:35:57,491 --> 0:36:02,729
因此在一个字符级别

721
00:36:03,230 --> 0:36:06,700
例如在这里

722
00:36:06,767 --> 0:36:08,502
灰色表示剩余的单词.

723
00:36:08,869 --> 0:36:10,003
这是很好用的

724
00:36:10,971 --> 0:36:15,576
现在你会在键盘上看到

725
00:36:15,642 --> 0:36:18,645
很好

726
00:36:18,712 --> 0:36:20,280
（字符强调——颜色）

727
00:36:21,849 --> 0:36:24,818
对于阿拉伯语这里有同样的例子

728
00:36:25,052 --> 0:36:28,555
同样在iOS和macOS上

729
00:36:28,622 --> 0:36:31,091
而且它在很多方面都很有效

730
00:36:32,259 --> 0:36:33,961
我还应该提到

731
00:36:34,027 --> 0:36:37,197
带属性字符串

732
00:36:40,467 --> 0:36:44,972
最后我们来复习一下

733
00:36:48,509 --> 0:36:53,013
首先在app的早期开始规划

734
00:36:53,447 --> 0:36:56,183
不仅是针对于开发

735
00:36:59,586 --> 0:37:02,122
一旦你知道了要本地化的语言

736
00:36:59,586 --> 0:37:02,122
一旦你知道了要本地化的语言

737
00:37:02,322 --> 0:37:04,625
扩展到国际化

738
00:37:05,125 --> 0:37:07,160
尽你所能

739
00:37:07,761 --> 0:37:12,132
像自动布局

740
00:37:12,199 --> 0:37:14,067
在你构建功能的过程中

741
00:37:14,134 --> 0:37:16,436
非常容易采用

742
00:37:16,503 --> 0:37:19,740
但是如果你完成了你的项目

743
00:37:19,806 --> 0:37:22,109
那么你可能必须

744
00:37:22,176 --> 0:37:23,544
这将需要做大量的工作

745
00:37:25,579 --> 0:37:26,914
（总结）

746
00:37:26,980 --> 0:37:28,682
如果你正在做的事情让你觉得

747
00:37:28,749 --> 0:37:31,018
“哦 是的

748
00:37:31,518 --> 0:37:32,886
它可能有一个API

749
00:37:33,253 --> 0:37:36,423
所以当你要

750
00:37:36,490 --> 0:37:40,427
一定要看看

751
00:37:40,594 --> 0:37:43,096
是否有格式化程序类

752
00:37:43,163 --> 0:37:45,365
在尝试破坏自己的工作成果前

753
00:37:45,432 --> 0:37:47,034
确保查看

754
00:37:47,534 --> 0:37:49,670
是否有任何处理文本的API

755
00:37:52,539 --> 0:37:56,376
最后确保

756
00:37:56,510 --> 0:37:59,313
所以这里要注意的关键事情是

757
00:37:59,580 --> 0:38:02,983
你的app的每一个本地化

758
00:37:59,580 --> 0:38:02,983
你的app的每一个本地化

759
00:38:03,483 --> 0:38:06,453
并且你需要确保

760
00:38:06,520 --> 0:38:08,922
你在开发语言中指定的意图

761
00:38:09,289 --> 0:38:12,125
你支持的所有其他语言

762
00:38:12,192 --> 0:38:14,428
并且在此过程中不会丢失任何东西

763
00:38:14,494 --> 0:38:15,896
（提前计划——边做边调整

764
00:38:15,963 --> 0:38:16,997
非常感谢
