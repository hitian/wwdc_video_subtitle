1
00:00:07,516 --> 0:00:16,500
[ 音乐 ]

2
00:00:19,296 --> 0:00:20,086
&gt;&gt; 大家好

3
00:00:20,226 --> 0:00:21,616
我叫 Jeremy 是

4
00:00:21,616 --> 0:00:23,366
tvOS 团队的一名工程师

5
00:00:23,866 --> 0:00:25,066
今天 我很高兴

6
00:00:25,066 --> 0:00:26,586
能与大家分享

7
00:00:26,586 --> 0:00:29,236
tvOS 12 中 TVMLKit 的新内容

8
00:00:29,776 --> 0:00:32,706
如果你不熟悉 TVMLKit

9
00:00:32,706 --> 0:00:34,366
这是 Apple 的一个高级框架 

10
00:00:34,366 --> 0:00:37,506
可以快速构建基于内容的 tvOS App

11
00:00:38,016 --> 0:00:39,826
它无需额外设置 就已经

12
00:00:39,826 --> 0:00:41,416
符合我们的 Human Interface Guidelines

13
00:00:41,766 --> 0:00:42,996
让你的 App 外表

14
00:00:42,996 --> 0:00:44,776
美观 体验合理

15
00:00:45,536 --> 0:00:47,406
TVMLKit 使用 JavaScript 来驱动

16
00:00:47,406 --> 0:00:49,526
App 逻辑 还使用了一种

17
00:00:49,526 --> 0:00:51,226
基于 XML 的标记（markup）语言

18
00:00:51,226 --> 0:00:53,876
按照你的规定 渲染成

19
00:00:53,876 --> 0:00:55,326
屏幕上的用户界面（UI）

20
00:00:57,226 --> 0:00:59,346
其实 大家熟知的

21
00:00:59,346 --> 0:01:01,996
一些常用 App 就是

22
00:00:59,346 --> 0:01:01,996
一些常用 App 就是

23
00:01:01,996 --> 0:01:03,216
用 TVMLKit 构建的

24
00:01:04,146 --> 0:01:06,336
此外 还有数千款 App Store 中的 App

25
00:01:06,336 --> 0:01:07,046
也是如此

26
00:01:09,006 --> 0:01:10,706
我们先来谈谈

27
00:01:10,706 --> 0:01:12,006
我们为 TVMLKit

28
00:01:12,006 --> 0:01:14,046
进行的改进 我今天

29
00:01:14,306 --> 0:01:15,606
想先谈谈其中的三点

30
00:01:16,336 --> 0:01:18,176
首先 我们改进了

31
00:01:18,176 --> 0:01:20,006
网页检查器（Web Inspector） 

32
00:01:20,006 --> 0:01:22,816
方便你更好地找出 App 中的错误 并深入

33
00:01:23,116 --> 0:01:24,446
地进行分析

34
00:01:26,056 --> 0:01:28,716
去年以来 我们添加了许多新特性 并做了许多改进

35
00:01:28,716 --> 0:01:29,986
以改善 TVMLKit 的框架

36
00:01:30,196 --> 0:01:32,676
今天 我会讲到其中三点

37
00:01:32,676 --> 0:01:34,936
我们会提到

38
00:01:34,936 --> 0:01:37,006
全新的网页检查器

39
00:01:37,006 --> 0:01:39,506
它改进了调试过程

40
00:01:39,506 --> 0:01:41,176
更新了功能更为强大的

41
00:01:41,176 --> 0:01:42,416
数据绑定构建

42
00:01:43,026 --> 0:01:45,716
并添加了全新的自定义 TVMLKit 上播放

43
00:01:45,716 --> 0:01:47,196
体验的方法

44
00:01:47,786 --> 0:01:50,446
我们先来谈谈网页检查器

45
00:01:50,876 --> 0:01:53,156
tvOS 11 加强了对

46
00:01:53,156 --> 0:01:54,466
网页检查器的支持 能够

47
00:01:54,466 --> 0:01:56,156
让你进一步分析

48
00:01:56,156 --> 0:01:57,236
使用 TVMLKit 的 App

49
00:01:57,966 --> 0:01:59,506
自此 我们进一步增强了

50
00:01:59,506 --> 0:02:01,976
这方面的支持

51
00:01:59,506 --> 0:02:01,976
这方面的支持

52
00:02:02,476 --> 0:02:05,596
tvOS 11.3 中 除了可以

53
00:02:05,596 --> 0:02:06,996
在元素中显示注册

54
00:02:06,996 --> 0:02:08,616
事件监听器 现在你也可以

55
00:02:08,616 --> 0:02:09,886
暂时将其禁用

56
00:02:10,985 --> 0:02:13,166
这对调试很有帮助

57
00:02:13,166 --> 0:02:14,456
因为现在你可以随意启用

58
00:02:14,456 --> 0:02:16,166
或禁用事件处理器了

59
00:02:20,436 --> 0:02:22,476
在网络标签页下

60
00:02:22,476 --> 0:02:23,516
XHR 中除了文稿资源

61
00:02:23,516 --> 0:02:25,416
还有图像资源

62
00:02:25,806 --> 0:02:27,206
这样 你就可以看到

63
00:02:27,206 --> 0:02:29,336
正在加载的图像

64
00:02:29,336 --> 0:02:30,576
以及其他信息 例如

65
00:02:30,576 --> 0:02:32,436
加载耗时 以及时间分配的情况

66
00:02:32,946 --> 0:02:35,806
如果你想看到

67
00:02:35,806 --> 0:02:37,076
实际传输的

68
00:02:37,076 --> 0:02:40,236
图像 你可以使用这一功能

69
00:02:40,746 --> 0:02:42,206
但请注意

70
00:02:42,206 --> 0:02:43,386
你必须先

71
00:02:43,386 --> 0:02:45,206
打开网页检查器

72
00:02:45,806 --> 0:02:47,026
因为它不能显示

73
00:02:47,026 --> 0:02:47,876
已加载的图像

74
00:02:49,636 --> 0:02:51,496
最后 也是我

75
00:02:51,496 --> 0:02:53,086
最喜欢的特性 就是

76
00:02:53,086 --> 0:02:53,396
检查按钮

77
00:02:54,176 --> 0:02:55,596
点击之后 就会显示

78
00:02:55,596 --> 0:02:56,916
当前关注的视图中

79
00:02:56,916 --> 0:02:59,186
所包含的临近元素

80
00:03:00,946 --> 0:03:02,576
如果你的元素树为收起状态

81
00:03:03,036 --> 0:03:05,156
网页检查器会将其展开

82
00:03:05,156 --> 0:03:07,016
找出具体元素 并高亮显示

83
00:03:09,596 --> 0:03:11,966
要使用网页检查器 你可以

84
00:03:11,966 --> 0:03:13,636
下载并安装 macOS 的

85
00:03:13,636 --> 0:03:15,616
最新版本 或安装

86
00:03:15,616 --> 0:03:16,966
Safari 技术预览版

87
00:03:17,796 --> 0:03:19,176
欲知更多关于使用

88
00:03:19,176 --> 0:03:21,406
网页检查器的信息 可以

89
00:03:21,406 --> 0:03:23,296
观看我们去年的关于

90
00:03:23,296 --> 0:03:24,876
通过 tvOS App 来使用网页检查器的演讲

91
00:03:28,516 --> 0:03:30,636
接下来 我们谈谈数据绑定

92
00:03:33,696 --> 0:03:35,176
在我们谈到

93
00:03:35,176 --> 0:03:36,646
具体的新特性之前

94
00:03:36,766 --> 0:03:38,566
我先来大概介绍一下数据绑定

95
00:03:39,236 --> 0:03:40,576
数据绑定借助

96
00:03:40,576 --> 0:03:42,746
模板标记文件中的

97
00:03:42,746 --> 0:03:44,346
表达式 帮你将

98
00:03:44,346 --> 0:03:46,166
数据轻松转化为 UI 元素

99
00:03:47,356 --> 0:03:48,876
这很重要 因为

100
00:03:48,876 --> 0:03:50,706
这可以让数据

101
00:03:50,906 --> 0:03:52,066
与布局逻辑

102
00:03:52,066 --> 0:03:53,796
和 App

103
00:03:53,796 --> 0:03:55,116
逻辑相分离

104
00:03:57,526 --> 0:03:58,776
因此 数据绑定

105
00:03:58,776 --> 0:04:00,126
模板可以减少

106
00:03:58,776 --> 0:04:00,126
模板可以减少

107
00:04:00,126 --> 0:04:02,566
将数据转换为 TVML 文稿时

108
00:04:02,566 --> 0:04:04,556
所需的 JavaScript 代码量

109
00:04:04,556 --> 0:04:06,116
因为框架可以替你

110
00:04:06,776 --> 0:04:07,016
完成这项工作

111
00:04:07,016 --> 0:04:10,646
事实上 这种替你编写文稿的方式

112
00:04:10,646 --> 0:04:13,236
能够确保最佳性能 你也不必

113
00:04:13,236 --> 0:04:15,076
担心该用什么 API

114
00:04:16,456 --> 0:04:17,926
我们来看一个

115
00:04:17,926 --> 0:04:19,266
具体的例子

116
00:04:19,856 --> 0:04:21,026
假如你想生成一个

117
00:04:21,026 --> 0:04:23,596
横幅 其中包括标题和描述

118
00:04:24,136 --> 0:04:26,706
这是不使用数据绑定的

119
00:04:26,706 --> 0:04:28,546
通常做法

120
00:04:30,996 --> 0:04:32,386
首先 要获取

121
00:04:32,386 --> 0:04:33,666
显示给用户的

122
00:04:33,666 --> 0:04:35,146
相关数据 本例中

123
00:04:35,146 --> 0:04:36,856
就是标题和描述

124
00:04:38,656 --> 0:04:40,596
获取之后 要将数据

125
00:04:40,596 --> 0:04:42,406
传递给一段写好的

126
00:04:42,406 --> 0:04:43,666
JavaScript 代码

127
00:04:43,666 --> 0:04:45,126
让代码来处理数据

128
00:04:45,126 --> 0:04:47,766
并生成最终的文稿

129
00:04:49,306 --> 0:04:52,336
借助数据绑定

130
00:04:52,336 --> 0:04:53,666
就可以去掉 JavaScript 处理

131
00:04:53,666 --> 0:04:55,526
这一步 并在模板中

132
00:04:55,526 --> 0:04:57,206
设置绑定参数

133
00:04:57,206 --> 0:04:58,956
TVMLKit 可以

134
00:04:58,956 --> 0:05:00,556
按照设置 替你填入数据

135
00:04:58,956 --> 0:05:00,556
按照设置 替你填入数据

136
00:05:00,556 --> 0:05:01,876
并生成文稿

137
00:05:02,786 --> 0:05:04,616
实际上 你的 App

138
00:05:04,616 --> 0:05:05,676
只需要负责

139
00:05:05,676 --> 0:05:08,186
获取和交换数据

140
00:05:08,186 --> 0:05:09,866
完全不需要考虑编辑 DOM

141
00:05:11,076 --> 0:05:13,936
简而言之 这就是数据绑定如何工作

142
00:05:13,936 --> 0:05:14,906
以及它如何帮助你减少代码量

143
00:05:17,516 --> 0:05:20,626
去年 我们引入了数据绑定的概念

144
00:05:20,626 --> 0:05:22,356
以及其他核心概念 例如

145
00:05:22,636 --> 0:05:23,896
绑定元素属性

146
00:05:23,896 --> 0:05:25,896
绑定元素的

147
00:05:25,896 --> 0:05:28,146
文本内容 当然

148
00:05:28,146 --> 0:05:29,516
还有将区块（section）中的

149
00:05:29,516 --> 0:05:31,546
条目（items）绑定在搁架（shelf）网格

150
00:05:31,816 --> 0:05:32,456
或列表中

151
00:05:33,266 --> 0:05:35,016
我们再用一个例子来

152
00:05:35,016 --> 0:05:36,796
快速回顾这些概念

153
00:05:39,756 --> 0:05:40,946
这个数据绑定模板

154
00:05:40,946 --> 0:05:42,316
对应一个

155
00:05:42,316 --> 0:05:43,666
图像元素 其中的

156
00:05:43,666 --> 0:05:45,046
绑定表达式

157
00:05:45,046 --> 0:05:47,796
以 @ 开头 后面是属性名

158
00:05:47,796 --> 0:05:49,806
和想要绑定的特性

159
00:05:50,236 --> 0:05:52,466
接下来 我们来看看

160
00:05:52,466 --> 0:05:54,456
生成元素文本内容的例子

161
00:05:55,946 --> 0:05:57,406
这个例子中 标题元素

162
00:05:57,406 --> 0:05:58,856
有对应的数据

163
00:05:58,856 --> 0:06:01,126
应当填充在元素中

164
00:05:58,856 --> 0:06:01,126
应当填充在元素中

165
00:06:03,356 --> 0:06:05,976
标题元素的数据绑定模板

166
00:06:05,976 --> 0:06:07,386
包含文本内容绑定

167
00:06:07,386 --> 0:06:09,836
以及这一绑定所映射的特性

168
00:06:13,186 --> 0:06:15,376
最后我们来谈谈条目绑定

169
00:06:15,836 --> 0:06:17,356
这种绑定方式

170
00:06:17,356 --> 0:06:19,256
稍有不同 它涉及到

171
00:06:19,256 --> 0:06:20,886
一组想要展示的数据

172
00:06:21,586 --> 0:06:23,156
它仅适用于搁架 列表

173
00:06:23,156 --> 0:06:24,696
或网格中的区块

174
00:06:26,656 --> 0:06:27,796
这个例子中 有一个数组

175
00:06:27,796 --> 0:06:30,736
数据以树形列表条目的形式存在

176
00:06:31,236 --> 0:06:32,636
最后的结果

177
00:06:32,636 --> 0:06:34,836
应当是一个由

178
00:06:34,836 --> 0:06:35,656
锁定的列表条目（listItemLockup）组成的区块

179
00:06:37,246 --> 0:06:39,586
区块对应的数据绑定模板

180
00:06:39,586 --> 0:06:41,696
应包括两项 分别是

181
00:06:41,696 --> 0:06:43,366
条目的绑定及其所映射的特性

182
00:06:43,366 --> 0:06:46,336
以及一个原型

183
00:06:46,336 --> 0:06:48,016
用来转化数组中的

184
00:06:48,136 --> 0:06:49,006
数据对象

185
00:06:49,636 --> 0:06:51,296
这里 数据

186
00:06:51,296 --> 0:06:52,826
绑定模板对应的

187
00:06:52,826 --> 0:06:53,836
是锁定的列表条目

188
00:06:55,976 --> 0:06:57,236
这就是我们在

189
00:06:57,236 --> 0:06:59,556
tvOS 11 中引入的树状绑定结构体

190
00:06:59,736 --> 0:07:01,366
欲知更多信息

191
00:06:59,736 --> 0:07:01,366
欲知更多信息

192
00:07:01,366 --> 0:07:02,736
请观看我们去年 WWDC 上名为

193
00:07:02,736 --> 0:07:05,116
Advances in TVMLKit 的会议

194
00:07:08,246 --> 0:07:11,436
今年 我们进一步扩充了功能

195
00:07:11,996 --> 0:07:13,366
首先 我们添加了

196
00:07:13,366 --> 0:07:14,896
子元素绑定（children binding）

197
00:07:14,896 --> 0:07:17,076
以更接近原生的方式

198
00:07:17,076 --> 0:07:17,876
绑定元素的子元素

199
00:07:19,406 --> 0:07:20,986
为方便你管理

200
00:07:20,986 --> 0:07:22,526
DOM 我们添加了一些

201
00:07:22,526 --> 0:07:25,276
特殊元素 即片段和规则

202
00:07:25,836 --> 0:07:27,446
这些我们会深入探讨

203
00:07:27,446 --> 0:07:29,076
让我们首先谈谈子元素绑定

204
00:07:32,246 --> 0:07:33,526
子元素绑定是一种

205
00:07:33,526 --> 0:07:35,106
更为原生的条目绑定

206
00:07:35,996 --> 0:07:37,966
条目绑定为一些

207
00:07:37,966 --> 0:07:39,936
特殊情境进行了优化 例如

208
00:07:39,936 --> 0:07:42,046
包含搁板 框架或列表的区块

209
00:07:42,276 --> 0:07:44,316
以更高效地

210
00:07:44,316 --> 0:07:45,836
处理大数据的集合

211
00:07:46,826 --> 0:07:48,706
它们可以在这些元素之外使用

212
00:07:49,686 --> 0:07:51,766
其他情况下 使用子元素绑定

213
00:07:54,116 --> 0:07:56,136
背后的原因很简单

214
00:07:56,206 --> 0:07:57,976
子元素绑定能生成

215
00:07:57,976 --> 0:07:59,736
目标元素的子元素

216
00:08:02,356 --> 0:08:04,986
运作方式与条目绑定相同

217
00:08:05,566 --> 0:08:09,086
你需要使用原型 来定义

218
00:08:09,186 --> 0:08:13,526
数据转换成的元素 该元素将

219
00:08:13,526 --> 0:08:15,536
作为模板

220
00:08:15,536 --> 0:08:16,976
以生成最终的 DOM

221
00:08:20,346 --> 0:08:22,286
让我们举个例子 来解释工作原理

222
00:08:23,256 --> 0:08:24,766
让我回到之前

223
00:08:24,766 --> 0:08:26,916
数组中树状条目的例子

224
00:08:27,536 --> 0:08:32,546
数据与原来相同 但这次是三个

225
00:08:32,546 --> 0:08:33,655
不同的菜单条目

226
00:08:34,346 --> 0:08:36,326
这些条目将用在菜单栏中

227
00:08:37,676 --> 0:08:40,466
这是我们预期的最终结果

228
00:08:40,836 --> 0:08:42,796
大致是一个包含菜单栏树条目的

229
00:08:42,796 --> 0:08:43,635
菜单栏

230
00:08:46,026 --> 0:08:47,846
这是构建模板的

231
00:08:47,846 --> 0:08:50,876
非常简便的方式

232
00:08:50,876 --> 0:08:52,686
可以看到

233
00:08:52,686 --> 0:08:54,236
与条目绑定类似

234
00:08:54,756 --> 0:08:56,196
这里也使用了原型

235
00:08:56,196 --> 0:08:58,386
将数据映射到元素 这里也有

236
00:08:58,386 --> 0:08:59,516
绑定表达式

237
00:09:00,526 --> 0:09:03,186
唯一的区别在于 这里的元素

238
00:09:03,416 --> 0:09:04,416
不是区块

239
00:09:05,036 --> 0:09:07,066
子元素绑定 可以用于任何元素

240
00:09:10,166 --> 0:09:11,636
只要你希望自动生成

241
00:09:11,636 --> 0:09:13,196
全部子元素 这种解决方案

242
00:09:13,196 --> 0:09:14,716
就很好

243
00:09:15,456 --> 0:09:16,656
但有时 你可能

244
00:09:16,656 --> 0:09:18,326
只想生成部分的

245
00:09:18,326 --> 0:09:19,016
子元素

246
00:09:19,146 --> 0:09:20,996
例如 这个自动

247
00:09:20,996 --> 0:09:22,886
流传输 App 包含一个正在播放的

248
00:09:22,886 --> 0:09:23,476
菜单条目（nowPlayingMenuItem）

249
00:09:24,186 --> 0:09:25,406
这是一个

250
00:09:25,406 --> 0:09:27,386
特殊菜单条目 应该

251
00:09:27,386 --> 0:09:29,686
常驻菜单栏 但是

252
00:09:29,686 --> 0:09:32,016
仅在后台有音频

253
00:09:32,016 --> 0:09:33,896
播放时才显示

254
00:09:36,716 --> 0:09:38,376
但这里 我们还是

255
00:09:38,376 --> 0:09:39,556
希望菜单栏条目都能

256
00:09:39,556 --> 0:09:40,186
绑定数据

257
00:09:40,986 --> 0:09:42,996
为此 我们需要

258
00:09:42,996 --> 0:09:44,386
将菜单栏划分为

259
00:09:44,386 --> 0:09:46,326
依赖数据与不依赖数据

260
00:09:46,326 --> 0:09:47,006
两部分

261
00:09:47,626 --> 0:09:51,776
这里 我们就要运用片段

262
00:09:51,966 --> 0:09:52,946
那么 什么是片段呢

263
00:09:54,376 --> 0:09:56,066
片段是渲染器

264
00:09:56,216 --> 0:09:57,436
不可见的隐形元素

265
00:09:58,216 --> 0:10:00,056
它可以帮助你管理 DOM

266
00:09:58,216 --> 0:10:00,056
它可以帮助你管理 DOM

267
00:10:01,366 --> 0:10:02,796
但片段的特殊之处

268
00:10:02,796 --> 0:10:05,346
就在于 它的子元素是可见的

269
00:10:08,176 --> 0:10:10,586
又因为片段是元素

270
00:10:10,586 --> 0:10:12,086
而子元素绑定可以应用于任何

271
00:10:12,086 --> 0:10:14,526
元素 因此片段可以

272
00:10:14,526 --> 0:10:15,816
应用子元素绑定

273
00:10:18,576 --> 0:10:19,926
我们再回到我们想要的

274
00:10:19,926 --> 0:10:21,486
数据最终形态 以及

275
00:10:21,486 --> 0:10:22,696
数据的初始状态

276
00:10:23,126 --> 0:10:24,626
这里有菜单栏条目

277
00:10:25,436 --> 0:10:27,046
很适合放在

278
00:10:27,046 --> 0:10:29,336
片段中 这一点很棒

279
00:10:29,336 --> 0:10:31,676
因为这样 我们就可以应用子元素绑定了

280
00:10:34,806 --> 0:10:36,896
现在 我们将

281
00:10:36,896 --> 0:10:38,456
绑定数据的部分放在

282
00:10:38,456 --> 0:10:41,766
片段中 菜单栏仍然保留正在播放

283
00:10:41,766 --> 0:10:42,356
菜单条目

284
00:10:42,656 --> 0:10:44,336
因为渲染器只能看到

285
00:10:44,336 --> 0:10:45,756
片段的子元素

286
00:10:45,756 --> 0:10:48,076
这段代码仍能渲染成

287
00:10:48,076 --> 0:10:49,536
格式正确的菜单栏

288
00:10:52,576 --> 0:10:53,946
对于用来

289
00:10:53,946 --> 0:10:56,416
映射到 UI

290
00:10:56,536 --> 0:10:58,496
元素的数据本身

291
00:10:58,496 --> 0:11:00,376
可能的情况是

292
00:10:58,496 --> 0:11:00,376
可能的情况是

293
00:11:00,376 --> 0:11:02,406
有些数据保持不变

294
00:11:02,406 --> 0:11:04,516
有些则始终变化

295
00:11:05,606 --> 0:11:07,296
比方说

296
00:11:07,296 --> 0:11:10,186
这段代码 对应

297
00:11:10,186 --> 0:11:12,366
一个有封面图像

298
00:11:12,496 --> 0:11:15,496
有标题 还有播放进度的视频

299
00:11:17,726 --> 0:11:19,316
有时候 我们想

300
00:11:19,316 --> 0:11:21,236
基于这些信息

301
00:11:21,236 --> 0:11:22,716
来显示不同的 UI

302
00:11:23,176 --> 0:11:25,576
如果还没有

303
00:11:25,576 --> 0:11:27,596
开始播放 进度

304
00:11:27,596 --> 0:11:29,796
自然为零 只显示

305
00:11:29,796 --> 0:11:31,596
视频的封面图像

306
00:11:31,596 --> 0:11:34,576
和视频的标题就可以了

307
00:11:36,086 --> 0:11:37,766
但如果我们开始看

308
00:11:37,766 --> 0:11:39,326
视频 播放进度自然

309
00:11:39,326 --> 0:11:40,226
会大于零

310
00:11:41,126 --> 0:11:43,606
为此 我们既要显示不变的元素

311
00:11:44,526 --> 0:11:45,836
即封面图像和标题

312
00:11:47,076 --> 0:11:48,586
还要凸显出

313
00:11:48,586 --> 0:11:50,736
视频正在播放

314
00:11:51,376 --> 0:11:53,506
也就是要显示进度条 随着播放进度的

315
00:11:53,506 --> 0:11:55,646
百分比进展 而逐渐填满

316
00:11:57,546 --> 0:12:00,526
同样地 我们现在有两种使用情景 它们的数据

317
00:11:57,546 --> 0:12:00,526
同样地 我们现在有两种使用情景 它们的数据

318
00:12:00,526 --> 0:12:02,556
不同 同时我们也想

319
00:12:02,556 --> 0:12:04,416
显示不同的外观

320
00:12:05,146 --> 0:12:06,756
第一种情境中

321
00:12:06,756 --> 0:12:08,816
我们有锁定的图像和标题

322
00:12:09,926 --> 0:12:11,556
第二种情境中

323
00:12:11,556 --> 0:12:13,896
我们添加了额外的一个叠层和进度条

324
00:12:17,046 --> 0:12:17,916
一般来说

325
00:12:17,916 --> 0:12:19,456
App 逻辑会根据

326
00:12:19,496 --> 0:12:21,126
数据 生成不同的

327
00:12:21,126 --> 0:12:24,016
x 值 但借助规则

328
00:12:24,016 --> 0:12:25,356
你可以用一个

329
00:12:25,356 --> 0:12:27,076
静态模板 生成

330
00:12:27,076 --> 0:12:28,606
任何一种

331
00:12:28,636 --> 0:12:29,526
最终文稿

332
00:12:31,126 --> 0:12:32,096
那么 什么是规则

333
00:12:32,446 --> 0:12:35,236
规则使用数据状态

334
00:12:35,236 --> 0:12:38,186
来重新生成最终文档

335
00:12:38,416 --> 0:12:40,756
从而改善 UI

336
00:12:41,806 --> 0:12:43,296
规则是不可见元素

337
00:12:43,516 --> 0:12:44,746
渲染器看不到规则

338
00:12:45,246 --> 0:12:47,236
但规则却可以影响正在生成的文稿

339
00:12:49,296 --> 0:12:50,716
规则内的任何操作

340
00:12:50,716 --> 0:12:53,616
都会应用于

341
00:12:53,726 --> 0:12:55,476
规则所在的姊妹元素

342
00:12:56,476 --> 0:12:57,756
要展示这一点

343
00:12:57,756 --> 0:12:59,396
最好的办法是举例

344
00:12:59,396 --> 0:13:00,286
展示设置过程

345
00:12:59,396 --> 0:13:00,286
展示设置过程

346
00:13:02,836 --> 0:13:04,286
我们来看看 需要

347
00:13:04,476 --> 0:13:06,756
什么样的规则 才能

348
00:13:06,756 --> 0:13:08,106
构建我们想要的原型

349
00:13:08,106 --> 0:13:10,036
实现刚才例子中的效果

350
00:13:10,536 --> 0:13:11,976
首先 我们将原型

351
00:13:11,976 --> 0:13:13,386
定义为 UI 预期外观的

352
00:13:13,386 --> 0:13:15,116
最小公约数

353
00:13:15,116 --> 0:13:16,446
也就是最基本单位

354
00:13:17,276 --> 0:13:18,916
这里就包括

355
00:13:18,916 --> 0:13:20,016
图像和标题

356
00:13:21,716 --> 0:13:23,196
但你可能还注意到

357
00:13:23,196 --> 0:13:25,216
我们还为进度条

358
00:13:25,216 --> 0:13:25,896
准备了占位符

359
00:13:26,566 --> 0:13:28,056
占位符也是一种

360
00:13:28,056 --> 0:13:29,426
特殊元素 它对渲染器

361
00:13:29,426 --> 0:13:31,096
不可见 这个例子中

362
00:13:31,366 --> 0:13:32,876
规则会将占位符

363
00:13:32,876 --> 0:13:35,426
作为数据状态符合时的替换目标

364
00:13:36,886 --> 0:13:39,026
现在 我们将规则加入

365
00:13:40,136 --> 0:13:42,466
这组规则应用于姊妹元素

366
00:13:42,466 --> 0:13:43,976
包裹在 rules 标签中

367
00:13:47,606 --> 0:13:48,926
匹配数据状态的

368
00:13:48,926 --> 0:13:51,426
单个规则会封装成

369
00:13:51,516 --> 0:13:54,186
特定元素

370
00:13:54,606 --> 0:13:56,776
一旦匹配特定数据状态

371
00:13:56,806 --> 0:13:59,166
特定元素就会生效

372
00:14:00,396 --> 0:14:01,696
而匹配的方式

373
00:14:01,826 --> 0:14:03,766
则是利用状态属性的

374
00:14:03,766 --> 0:14:04,526
查询指令

375
00:14:07,266 --> 0:14:09,186
如果数据状态匹配

376
00:14:09,186 --> 0:14:10,876
那么特定元素的

377
00:14:10,876 --> 0:14:12,696
子元素便成为

378
00:14:12,696 --> 0:14:14,346
应用于规则姊妹元素的

379
00:14:14,346 --> 0:14:16,146
一系列操作

380
00:14:16,556 --> 0:14:18,606
这里 我们希望

381
00:14:18,606 --> 0:14:19,996
占位符能够被

382
00:14:19,996 --> 0:14:21,846
叠层元素及其子元素取代

383
00:14:25,956 --> 0:14:27,666
TVMLKit 分析元素的	

384
00:14:27,666 --> 0:14:29,106
标签属性 从而

385
00:14:29,106 --> 0:14:30,936
匹配被取代的元素

386
00:14:31,676 --> 0:14:33,456
实际取代过程中

387
00:14:33,676 --> 0:14:35,356
首先会匹配标签

388
00:14:35,776 --> 0:14:37,256
之后会比较元素的名称

389
00:14:38,146 --> 0:14:40,726
如果元素名不同 它便会将元素

390
00:14:40,726 --> 0:14:42,786
完全取代 这里

391
00:14:43,086 --> 0:14:44,776
占位符变成了叠层

392
00:14:45,736 --> 0:14:47,236
但如果元素名

393
00:14:47,236 --> 0:14:49,046
匹配 新内容

394
00:14:49,386 --> 0:14:51,476
就会添加到已有内容之后

395
00:14:53,426 --> 0:14:55,586
现在 我们就有了一个简单的

396
00:14:55,586 --> 0:14:56,986
规则模板 可以根据

397
00:14:56,986 --> 0:14:58,806
提供的数据状态 生成

398
00:14:58,806 --> 0:15:00,416
两种不同的输出

399
00:14:58,806 --> 0:15:00,416
两种不同的输出

400
00:15:02,136 --> 0:15:04,016
实际上 你可以调用

401
00:15:04,016 --> 0:15:05,606
App 逻辑 来决定

402
00:15:05,606 --> 0:15:07,276
元素如何显示 并生成

403
00:15:07,276 --> 0:15:08,916
专门的静态模板

404
00:15:09,596 --> 0:15:11,216
应用于将要

405
00:15:11,586 --> 0:15:14,196
转化为 UI 的各种元素

406
00:15:15,556 --> 0:15:16,846
接下来换个话题 我们来

407
00:15:16,876 --> 0:15:18,506
谈谈 TVMLKit 中的播放

408
00:15:19,296 --> 0:15:20,896
TVMLKit 早就提供了

409
00:15:20,966 --> 0:15:22,486
扩展接口 方便你

410
00:15:22,486 --> 0:15:24,226
自定义 UI

411
00:15:24,226 --> 0:15:26,326
包括个别界面

412
00:15:26,326 --> 0:15:28,226
和整套模板

413
00:15:29,126 --> 0:15:31,276
tvOS 12 中 我们将这一功能

414
00:15:31,276 --> 0:15:32,586
扩展到回放流程

415
00:15:32,976 --> 0:15:34,586
让你完全控制播放体验

416
00:15:34,726 --> 0:15:37,416
以及相关的其他用户体验

417
00:15:41,046 --> 0:15:43,976
这些功能适用于

418
00:15:44,046 --> 0:15:45,176
现有的不同播放风格

419
00:15:45,176 --> 0:15:47,786
既包括嵌入式播放

420
00:15:47,866 --> 0:15:48,656
也包括全屏播放

421
00:15:51,676 --> 0:15:53,106
为此 你需要提供

422
00:15:53,106 --> 0:15:55,006
TVPlayer 对象 以及与其

423
00:15:55,006 --> 0:15:57,916
相关的 UI  作为 UIViewController

424
00:16:01,156 --> 0:16:03,016
这很类似

425
00:16:03,016 --> 0:16:04,486
JavaScript 的 API

426
00:16:04,626 --> 0:16:06,256
与你们的 JavaScript

427
00:16:06,406 --> 0:16:08,276
开发者沟通时 能省去不少麻烦

428
00:16:09,556 --> 0:16:11,856
最后 我们还提供了

429
00:16:11,856 --> 0:16:13,066
有限 JavaScript 桥

430
00:16:13,066 --> 0:16:13,736
（Limited JavaScript Bridge）

431
00:16:13,736 --> 0:16:15,206
该功能可以连通

432
00:16:15,336 --> 0:16:17,866
原生代码和 JavaScript 代码

433
00:16:20,536 --> 0:16:23,916
我们来谈谈 TVPlayer

434
00:16:23,916 --> 0:16:25,736
这是自定义

435
00:16:25,736 --> 0:16:27,766
播放体验的基础

436
00:16:28,996 --> 0:16:32,466
TVPlayer 是一个 AVPlayer

437
00:16:32,466 --> 0:16:33,886
公共适配器 适配于回放

438
00:16:33,886 --> 0:16:34,336
流程（Playback Pipeline）

439
00:16:35,396 --> 0:16:36,916
这意味着 TVPlayer

440
00:16:36,916 --> 0:16:38,506
可以转换一般的

441
00:16:38,506 --> 0:16:40,506
AVPlayer 回调

442
00:16:40,506 --> 0:16:41,746
并由 JavaScript 接收

443
00:16:45,316 --> 0:16:47,306
TVPlayer 还可以

444
00:16:47,306 --> 0:16:48,726
将自定义事件

445
00:16:48,726 --> 0:16:51,276
发送给 JavaScript

446
00:16:51,276 --> 0:16:52,526
默认情况下 它可以

447
00:16:52,576 --> 0:16:54,806
将 AVPlayer 的事件作为

448
00:16:54,806 --> 0:16:55,536
播放事件处理

449
00:16:55,656 --> 0:16:57,976
其他事件都由你来发送

450
00:17:02,046 --> 0:17:03,616
JavaScript 为播放器

451
00:17:03,616 --> 0:17:05,306
作出的改动均为 KVO 可观察

452
00:17:05,496 --> 0:17:06,656
你可以知道

453
00:17:06,656 --> 0:17:08,306
你的 JavaScript 开发者 进行了哪些改动

454
00:17:09,705 --> 0:17:11,526
最后 TVPlayer 对象

455
00:17:11,806 --> 0:17:13,506
播放媒体时会按照

456
00:17:13,506 --> 0:17:15,546
顺序 从第一个媒体

457
00:17:15,546 --> 0:17:16,746
一直播放到

458
00:17:16,746 --> 0:17:17,976
播放列表中最后一个媒体

459
00:17:20,945 --> 0:17:22,175
无论是否需要播放器

460
00:17:22,576 --> 0:17:24,256
TV Application Controller Delegate

461
00:17:24,256 --> 0:17:25,945
都会要求 TVPlayer

462
00:17:25,945 --> 0:17:27,506
你需要返回一个实例

463
00:17:27,566 --> 0:17:29,646
才能参与

464
00:17:29,646 --> 0:17:30,496
回放流程

465
00:17:34,076 --> 0:17:35,066
回放流程的下一步

466
00:17:35,066 --> 0:17:36,406
就是要将回放

467
00:17:36,406 --> 0:17:37,826
以 UI 的形式

468
00:17:37,826 --> 0:17:39,236
显示在屏幕上

469
00:17:39,736 --> 0:17:42,066
这随时可能发生

470
00:17:42,066 --> 0:17:44,936
可以是全屏回放 也可以是嵌入式回放

471
00:17:45,426 --> 0:17:47,016
你完全可以

472
00:17:47,016 --> 0:17:48,406
创建自己的 UI

473
00:17:49,186 --> 0:17:51,826
如果 TVMLKit 需要

474
00:17:51,826 --> 0:17:53,646
UI 那么 TVInterfaceCreating

475
00:17:53,646 --> 0:17:54,316
就会要求获得

476
00:17:54,316 --> 0:17:55,616
一个视图控制器（view controller）

477
00:17:56,246 --> 0:17:58,046
TVInterfaceCreating 还会向视图控制器

478
00:17:58,046 --> 0:18:00,336
传递对 TVPlayer 的引用 负责

479
00:17:58,046 --> 0:18:00,336
传递对 TVPlayer 的引用 负责

480
00:18:00,336 --> 0:18:01,806
在视图中播放媒体

481
00:18:04,726 --> 0:18:05,476
接下来 使用 TVPlayer

482
00:18:05,476 --> 0:18:07,226
及与其相关的 UI 时

483
00:18:07,666 --> 0:18:10,596
有一些事情需要注意

484
00:18:12,266 --> 0:18:13,246
首先 你应当

485
00:18:13,246 --> 0:18:15,266
亲自处理所有 'should' 事件

486
00:18:16,026 --> 0:18:17,156
这类事件一般

487
00:18:17,156 --> 0:18:19,246
与广告相关 基本是一个

488
00:18:19,246 --> 0:18:20,786
UI 方面的问题

489
00:18:20,786 --> 0:18:22,656
应当由你的

490
00:18:22,656 --> 0:18:23,446
原生代码处理

491
00:18:25,676 --> 0:18:27,266
如果你使用 FairPlay 加密

492
00:18:27,266 --> 0:18:29,836
视频播放 

493
00:18:29,836 --> 0:18:32,456
你需要使用 AVContentKeySession

494
00:18:32,456 --> 0:18:33,486
来加载密钥

495
00:18:34,006 --> 0:18:36,326
欲知更多关于

496
00:18:36,326 --> 0:18:38,406
AVContentKeySession 的信息 请观看

497
00:18:38,406 --> 0:18:39,866
我们去年的讲座

498
00:18:39,866 --> 0:18:42,166
Advances in HTTP Live Streaming 以及

499
00:18:42,166 --> 0:18:43,086
今年的一场关于

500
00:18:43,086 --> 0:18:44,646
AVContentKeySession 最佳

501
00:18:44,646 --> 0:18:45,206
实践的讲座

502
00:18:47,456 --> 0:18:49,826
最后 如果你的 JavaScript

503
00:18:49,826 --> 0:18:51,586
开发者使用叠层和

504
00:18:51,586 --> 0:18:53,526
互动叠层 这些必须要

505
00:18:53,526 --> 0:18:54,856
进行设置

506
00:18:55,556 --> 0:18:56,896
这些属于 UI 既然

507
00:18:56,896 --> 0:18:57,856
你要构建自己的 UI

508
00:18:57,856 --> 0:18:59,896
就需要亲自处理

509
00:19:04,206 --> 0:19:06,166
总之 我们为

510
00:19:06,166 --> 0:19:09,746
TVMLKit 和 tvOS 12 做出了

511
00:19:10,176 --> 0:19:11,876
如下改动 首先

512
00:19:11,876 --> 0:19:13,256
数据绑定更为

513
00:19:13,256 --> 0:19:15,406
强大 你可以借此构建

514
00:19:15,406 --> 0:19:17,676
任何依赖数据的模板

515
00:19:18,316 --> 0:19:19,936
我们鼓励大家 一定要试一试

516
00:19:21,376 --> 0:19:22,986
其次 如果你一直希望

517
00:19:22,986 --> 0:19:24,716
能够自定义

518
00:19:24,716 --> 0:19:26,146
回放体验

519
00:19:26,146 --> 0:19:27,886
现在你就可以通过实现

520
00:19:27,886 --> 0:19:29,356
自己的原生回放来体验了

521
00:19:31,246 --> 0:19:32,566
欲知更多关于本会议的信息

522
00:19:32,566 --> 0:19:35,226
请访问屏幕上的网站

523
00:19:37,286 --> 0:19:40,326
谢谢大家参加 2018 年 WWDC

524
00:19:41,166 --> 0:19:41,506
谢谢
