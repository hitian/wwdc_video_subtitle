1
00:00:07,516 --> 0:00:15,500
[ 音乐 ]

2
00:00:21,516 --> 0:00:26,116
[ 掌声 ]

3
00:00:26,616 --> 0:00:27,566
&gt;&gt; 大家好

4
00:00:27,926 --> 0:00:28,396
欢迎你们

5
00:00:29,436 --> 0:00:30,756
今天我非常激动

6
00:00:30,756 --> 0:00:31,066
来到这里

7
00:00:31,606 --> 0:00:32,716
让我们开始吧

8
00:00:34,046 --> 0:00:35,946
着色器是图形的重要部分

9
00:00:35,946 --> 0:00:37,906
它们能帮助你

10
00:00:37,956 --> 0:00:41,166
开发好看的游戏和 App

11
00:00:41,506 --> 0:00:42,996
考虑到大规模并行

12
00:00:42,996 --> 0:00:45,026
执行环境

13
00:00:45,026 --> 0:00:46,306
使用着色器非常不容易

14
00:00:47,076 --> 0:00:48,076
在开发过程中

15
00:00:48,076 --> 0:00:49,556
很多事可能会出错

16
00:00:49,556 --> 0:00:51,886
即便你

17
00:00:51,886 --> 0:00:53,236
纠正了错误

18
00:00:53,296 --> 0:00:54,406
它们还必须运行得很快

19
00:00:55,446 --> 0:00:57,426
我叫 Alp 今天我将

20
00:00:57,626 --> 0:00:59,426
向你们展示强大的工具

21
00:00:59,426 --> 0:01:02,126
和工作流来帮助你们对 Metal 着色器

22
00:00:59,426 --> 0:01:02,126
和工作流来帮助你们对 Metal 着色器

23
00:01:02,296 --> 0:01:04,105
进行调试和性能分析

24
00:01:04,626 --> 0:01:07,526
让我们首先来谈一下 Metal

25
00:01:08,836 --> 0:01:10,426
Metal 不仅是

26
00:01:10,426 --> 0:01:12,206
帧和语言

27
00:01:12,626 --> 0:01:15,556
我们有 Metal kits

28
00:01:15,556 --> 0:01:17,956
和 Metal Performance shaders

29
00:01:17,956 --> 0:01:19,166
并且我们有强大的工具使你的

30
00:01:19,166 --> 0:01:21,376
开发过程高效 简单

31
00:01:22,426 --> 0:01:24,956
完全融入工具的

32
00:01:24,956 --> 0:01:26,776
Metal 系统跟踪

33
00:01:26,776 --> 0:01:29,306
可以让你看到 CPU

34
00:01:29,306 --> 0:01:31,646
和 GPU 是如何并行工作的

35
00:01:31,646 --> 0:01:33,066
以及 App 的程序运行时间

36
00:01:34,496 --> 0:01:36,346
这是第一款能

37
00:01:36,346 --> 0:01:37,696
对 App 进行性能分析并看到

38
00:01:37,696 --> 0:01:38,436
你的瓶颈所在的强大工具

39
00:01:38,986 --> 0:01:42,196
但我今天的主题是

40
00:01:42,196 --> 0:01:44,106
Metal 帧调试器

41
00:01:46,596 --> 0:01:48,516
它能让你

42
00:01:48,516 --> 0:01:51,116
通过游戏的一帧或计算机上传

43
00:01:51,116 --> 0:01:53,096
来捕捉 Metal 的工作

44
00:01:53,636 --> 0:01:55,366
单步调试过程

45
00:01:56,996 --> 0:01:59,556
检查状态和资源

46
00:02:00,656 --> 0:02:03,806
它提供强大的性能分析特征

47
00:02:03,806 --> 0:02:07,186
让你看到 GPU 计数器和管线数据

48
00:02:07,706 --> 0:02:09,746
它完全集成入 Xcode

49
00:02:09,746 --> 0:02:12,586
为你提供了

50
00:02:13,006 --> 0:02:15,866
对 Metal 工作量进行调试和性能分析的地方

51
00:02:16,356 --> 0:02:22,196
今年 我们为 Metal 帧调试器增加了一些内容

52
00:02:23,006 --> 0:02:26,756
有了依存查看器 现在你可以看到

53
00:02:26,756 --> 0:02:28,926
编码器之间是如何共同工作的

54
00:02:28,926 --> 0:02:31,026
以及它们如何通过资源利用

55
00:02:31,026 --> 0:02:32,096
互相连接

56
00:02:33,026 --> 0:02:35,076
这是一款强大的工具

57
00:02:35,076 --> 0:02:36,336
引导你的工作量

58
00:02:36,336 --> 0:02:37,296
让你明白

59
00:02:37,536 --> 0:02:40,136
如何共同工作来

60
00:02:40,506 --> 0:02:42,356
制作那一帧

61
00:02:42,356 --> 0:02:45,876
明天上午十点 我们有 Metal 游戏性能优化讨论

62
00:02:45,876 --> 0:02:48,966
其中一部分将谈到

63
00:02:48,966 --> 0:02:49,656
依存查看器

64
00:02:50,656 --> 0:02:53,126
但是今天我将围绕几何查看器 

65
00:02:53,756 --> 0:02:57,936
着色器调试器和增强版阴影性能分析器

66
00:02:58,576 --> 0:03:00,216
我将展示在日常阴影元素中

67
00:02:58,576 --> 0:03:00,216
我将展示在日常阴影元素中

68
00:03:00,216 --> 0:03:04,066
对你们有帮助的工作量

69
00:03:04,516 --> 0:03:06,736
那么让我们从

70
00:03:06,736 --> 0:03:07,336
几何查看器开始

71
00:03:11,786 --> 0:03:15,286
顶点阶段 是图形管线中的第一阶段

72
00:03:16,196 --> 0:03:18,126
如果这一步出问题

73
00:03:18,126 --> 0:03:19,526
它会弄乱你的整个图像

74
00:03:20,016 --> 0:03:22,416
所以需要

75
00:03:22,926 --> 0:03:25,346
在调试着色器前

76
00:03:25,346 --> 0:03:27,216
排除一些顶点问题

77
00:03:27,756 --> 0:03:31,556
在顶点阶段中

78
00:03:31,616 --> 0:03:33,446
需要检查一些东西

79
00:03:33,636 --> 0:03:35,906
主要是顶点输入

80
00:03:35,906 --> 0:03:38,076
指数和顶点输出

81
00:03:39,116 --> 0:03:41,256
去年的 Xcode 9

82
00:03:41,256 --> 0:03:43,226
我们介绍了输入属性视图

83
00:03:43,226 --> 0:03:45,096
所有数据都结合在

84
00:03:45,266 --> 0:03:47,166
其中的桌面视图格式上

85
00:03:48,146 --> 0:03:50,036
但是想要真正不与 3D 关联

86
00:03:50,546 --> 0:03:54,006
来调试这样的视觉数据还是

87
00:03:54,006 --> 0:03:55,356
很困难的

88
00:03:56,296 --> 0:03:58,966
所以这就是为什么今年

89
00:03:58,966 --> 0:04:01,006
我们结合了所有这些数据

90
00:03:58,966 --> 0:04:01,006
我们结合了所有这些数据

91
00:04:01,006 --> 0:04:02,896
并且创造了一个你们可以

92
00:04:02,896 --> 0:04:04,526
看见并检查它的地方

93
00:04:05,196 --> 0:04:06,986
现在我想向你们介绍

94
00:04:06,986 --> 0:04:11,000
几何查看器

95
00:04:12,516 --> 0:04:15,616
[ 掌声 ]

96
00:04:16,116 --> 0:04:17,886
&gt;&gt; 几何查看器是一个新工具

97
00:04:17,886 --> 0:04:19,166
可以以 3D 形式看到

98
00:04:19,166 --> 0:04:21,146
转换后顶点数据

99
00:04:21,146 --> 0:04:22,896
这样你实际上就可以

100
00:04:22,896 --> 0:04:24,116
知道顶点输出

101
00:04:25,106 --> 0:04:27,126
同时它为你提供

102
00:04:27,126 --> 0:04:29,876
数据输入指数和输出

103
00:04:30,236 --> 0:04:31,136
这样你可以实际上

104
00:04:31,136 --> 0:04:32,706
把它关联回 3D

105
00:04:33,956 --> 0:04:35,526
你能在每次绘图调用使用它

106
00:04:35,886 --> 0:04:37,266
就像附件和绑定资源一样

107
00:04:37,266 --> 0:04:39,176
因此你就有

108
00:04:39,466 --> 0:04:41,996
一个地方来查看所有的

109
00:04:41,996 --> 0:04:42,996
顶点问题

110
00:04:44,506 --> 0:04:47,336
现在让我们来看看三个

111
00:04:47,336 --> 0:04:49,226
常见的顶点问题

112
00:04:49,226 --> 0:04:50,516
让我们看看如何用

113
00:04:50,516 --> 0:04:52,306
几何查看器解决它们

114
00:04:52,886 --> 0:04:56,256
那么这是第一个问题

115
00:04:56,706 --> 0:04:58,506
我将要绘图调用

116
00:04:58,506 --> 0:05:00,496
画一棵树 正如你所看到的

117
00:04:58,506 --> 0:05:00,496
画一棵树 正如你所看到的

118
00:05:00,496 --> 0:05:03,236
三角形的一些顶点

119
00:05:03,236 --> 0:05:05,876
到了屏幕外面

120
00:05:05,876 --> 0:05:06,956
导致这个三角形歪了

121
00:05:07,916 --> 0:05:09,246
只要用几何查看器

122
00:05:09,596 --> 0:05:10,676
你可以点击看上去

123
00:05:10,676 --> 0:05:11,296
有问题的三角形

124
00:05:12,076 --> 0:05:13,966
并且只要用下面的查看器

125
00:05:14,396 --> 0:05:17,466
你能看到这些顶点

126
00:05:17,596 --> 0:05:21,096
所有的输入和输出数据

127
00:05:24,796 --> 0:05:27,906
而在第二种情况中

128
00:05:27,906 --> 0:05:29,736
我调用相同的绘图

129
00:05:29,736 --> 0:05:31,386
但这次这棵树

130
00:05:31,386 --> 0:05:33,386
完全没有了

131
00:05:33,386 --> 0:05:34,636
只要用几何查看器

132
00:05:34,776 --> 0:05:38,456
和自由运动的相机

133
00:05:38,586 --> 0:05:40,426
你能看到这棵树

134
00:05:40,426 --> 0:05:42,086
完全被画在 Frustum 外面

135
00:05:43,536 --> 0:05:45,006
所以这就能解释为什么它不在

136
00:05:45,006 --> 0:05:45,816
屏幕上

137
00:05:46,716 --> 0:05:48,526
那么用几何查看器

138
00:05:48,526 --> 0:05:50,706
检测这样的情况就

139
00:05:50,706 --> 0:05:53,416
非常简单 并且对于最后一种情况

140
00:05:54,526 --> 0:05:56,296
有时甚至不可能

141
00:05:56,296 --> 0:05:57,946
在 3D 中形成

142
00:05:58,176 --> 0:05:59,156
可见的三角形

143
00:05:59,726 --> 0:06:01,576
这些情况都难以调试

144
00:05:59,726 --> 0:06:01,576
这些情况都难以调试

145
00:06:01,716 --> 0:06:04,476
你可能有退化的三角形

146
00:06:04,476 --> 0:06:05,946
因为你让

147
00:06:05,946 --> 0:06:07,716
许多顶点

148
00:06:07,716 --> 0:06:08,656
进入了相同位置

149
00:06:09,296 --> 0:06:11,146
或者在顶点输出位置

150
00:06:11,146 --> 0:06:12,666
可能有无穷大和 NaN

151
00:06:12,666 --> 0:06:14,086
这对 GPU 来说

152
00:06:14,086 --> 0:06:15,716
是未定义行为

153
00:06:16,736 --> 0:06:18,906
好在对于几何查看器

154
00:06:19,196 --> 0:06:22,566
能探测这些情况 并给你提供一个问题按钮

155
00:06:22,916 --> 0:06:30,736
只要点击按钮 你就可以看到问题清单

156
00:06:31,356 --> 0:06:35,466
在这种情况下 它找到了几个退化的三角形

157
00:06:36,476 --> 0:06:38,466
点击其中一个三角形

158
00:06:38,466 --> 0:06:39,126
你能直接看到数据

159
00:06:40,126 --> 0:06:42,046
只要看看这些数据

160
00:06:42,046 --> 0:06:44,036
我就看出我的两个顶点

161
00:06:44,036 --> 0:06:46,286
正在到达原点

162
00:06:46,286 --> 0:06:48,556
所以它是一个退化的三角形

163
00:06:50,366 --> 0:06:52,526
那么正如你在这所有示例中看到的

164
00:06:52,526 --> 0:06:55,186
几何查看器

165
00:06:55,216 --> 0:06:57,666
是一个能够快速检查所有

166
00:06:57,666 --> 0:06:59,016
几何相关问题的

167
00:06:59,016 --> 0:07:01,186
强大工具

168
00:06:59,016 --> 0:07:01,186
强大工具

169
00:07:01,186 --> 0:07:02,486
如果问题出在输入上

170
00:07:03,036 --> 0:07:04,556
那么你必须回过头去

171
00:07:04,696 --> 0:07:05,286
检查你的模型

172
00:07:05,766 --> 0:07:07,246
但如果问题出在输出上

173
00:07:07,246 --> 0:07:09,646
那么你必须调试

174
00:07:09,646 --> 0:07:10,426
顶点着色器

175
00:07:11,336 --> 0:07:13,326
这就将引入下一个话题

176
00:07:15,976 --> 0:07:18,076
调试着色器

177
00:07:18,076 --> 0:07:18,686
使用新的着色器调试器

178
00:07:20,196 --> 0:07:21,496
着色器很难调试

179
00:07:22,556 --> 0:07:24,386
它们有复杂的数学代码

180
00:07:24,386 --> 0:07:25,736
和大量的矢量运算

181
00:07:26,446 --> 0:07:28,556
并且它们高度平行

182
00:07:28,776 --> 0:07:30,196
你正在写的着色器代码

183
00:07:30,526 --> 0:07:32,716
每隔每帧

184
00:07:32,806 --> 0:07:33,736
就会执行百万次

185
00:07:33,736 --> 0:07:37,706
这是 Unity 《死者之书》样片

186
00:07:37,706 --> 0:07:39,016
中的一个场景

187
00:07:39,016 --> 0:07:41,056
这周早些时候我们在 Keynote

188
00:07:41,056 --> 0:07:42,466
和国情咨文中见过

189
00:07:43,296 --> 0:07:45,486
在这个场景的每一帧中

190
00:07:46,426 --> 0:07:48,246
一千万个顶点位置

191
00:07:48,246 --> 0:07:51,196
在所有不同通道

192
00:07:51,196 --> 0:07:54,236
呈现出六千万个三角形

193
00:07:54,236 --> 0:07:54,776
每一帧

194
00:07:55,866 --> 0:07:57,696
所以当你的着色器出现了问题

195
00:07:57,696 --> 0:08:00,846
你将很难发现 问题出在哪儿

196
00:07:57,696 --> 0:08:00,846
你将很难发现 问题出在哪儿

197
00:08:00,846 --> 0:08:02,766
哪个着色器有问题

198
00:08:02,766 --> 0:08:04,556
哪部分着色器编码有问题

199
00:08:05,496 --> 0:08:07,426
所以为了帮你调试着色器

200
00:08:07,426 --> 0:08:10,146
现在我非常高兴地

201
00:08:10,236 --> 0:08:12,156
向你们介绍全新的

202
00:08:12,156 --> 0:08:14,736
着色器调试器 [掌声]

203
00:08:20,986 --> 0:08:23,106
着色器调试器是一个能调试所有

204
00:08:23,306 --> 0:08:25,276
Metal 着色器的新工具

205
00:08:25,946 --> 0:08:27,666
为你在成千上万个线程中

206
00:08:27,666 --> 0:08:29,606
提供丰富可视化效果

207
00:08:29,646 --> 0:08:33,456
并且它能展示来自 GPU

208
00:08:33,456 --> 0:08:35,596
而不是模拟器的实时数据

209
00:08:36,285 --> 0:08:39,546
它提供了你自由的设置方式

210
00:08:39,546 --> 0:08:40,946
这样你能轻松地跟随

211
00:08:40,946 --> 0:08:42,716
自己的操作

212
00:08:42,716 --> 0:08:44,285
根本无需断点

213
00:08:45,726 --> 0:08:47,836
它完全集成到

214
00:08:47,836 --> 0:08:49,456
Metal 帧调试器 这样

215
00:08:49,716 --> 0:08:51,766
你拥有了调试着色器

216
00:08:51,766 --> 0:08:52,846
所需的一切

217
00:08:53,776 --> 0:08:55,896
现在我将把舞台交给

218
00:08:55,896 --> 0:08:57,966
我的同事 Xavier 由他为你们

219
00:08:58,246 --> 0:09:01,330
操作展示着色器性能分析器 Xavier

220
00:08:58,246 --> 0:09:01,330
操作展示着色器性能分析器 Xavier

221
00:09:02,516 --> 0:09:05,076
[ 掌声 ]

222
00:09:05,576 --> 0:09:06,536
&gt;&gt; 谢谢 Alp

223
00:09:07,066 --> 0:09:08,936
大家下午好

224
00:09:09,046 --> 0:09:10,606
今天的演示 我想制造

225
00:09:10,606 --> 0:09:11,976
一个看起来很酷的水模拟

226
00:09:11,976 --> 0:09:14,326
但是正如你们所见

227
00:09:14,666 --> 0:09:16,156
出现了一些几何问题

228
00:09:17,036 --> 0:09:18,646
我是 Xavier

229
00:09:18,646 --> 0:09:20,226
非常高兴能向你展示如何

230
00:09:20,226 --> 0:09:21,806
使用全新的着色器调试器

231
00:09:21,946 --> 0:09:22,906
和几何查看器

232
00:09:23,226 --> 0:09:25,016
来确定和解决几何问题

233
00:09:25,016 --> 0:09:27,966
那么我们将

234
00:09:27,966 --> 0:09:28,836
从我们的朋友捕捉开始

235
00:09:28,836 --> 0:09:31,066
你们可以轻松

236
00:09:31,066 --> 0:09:32,566
通过点击调试栏中的

237
00:09:32,676 --> 0:09:33,786
向上切割按钮来做到

238
00:09:34,316 --> 0:09:38,426
现在我们已经捕捉到了帧

239
00:09:38,426 --> 0:09:40,516
可以开始调试我们的问题了

240
00:09:40,986 --> 0:09:44,006
由于碰到了几何问题

241
00:09:44,006 --> 0:09:45,526
我们将用到

242
00:09:45,526 --> 0:09:46,686
全新的几何查看器

243
00:09:49,396 --> 0:09:51,406
几何查看器能让你

244
00:09:51,406 --> 0:09:54,806
导航和检查 绘图调用的几何

245
00:09:56,516 --> 0:09:58,306
水面应该是平滑的

246
00:09:58,306 --> 0:10:00,456
但是我们可以看到

247
00:09:58,306 --> 0:10:00,456
但是我们可以看到

248
00:10:00,576 --> 0:10:01,596
有一个陡峭的悬崖

249
00:10:02,416 --> 0:10:04,966
让我们挑一个 看起来有问题的三角形

250
00:10:04,966 --> 0:10:06,276
比如这一个

251
00:10:06,686 --> 0:10:08,596
现在让我们选中底部

252
00:10:08,656 --> 0:10:11,126
这个破损的顶点

253
00:10:11,476 --> 0:10:13,686
你可以在这里使用这个表格

254
00:10:13,686 --> 0:10:14,456
轻松地做到这一点

255
00:10:14,456 --> 0:10:17,816
那么现在我们找到了

256
00:10:17,816 --> 0:10:20,316
破损的顶点 让我们

257
00:10:20,316 --> 0:10:21,346
找到输入位置

258
00:10:21,636 --> 0:10:24,666
可以看到所有

259
00:10:24,666 --> 0:10:26,496
输入位置对于这个三角形的

260
00:10:26,496 --> 0:10:27,846
所有顶点来说

261
00:10:27,906 --> 0:10:30,316
都很相似 事实上 白色的

262
00:10:30,316 --> 0:10:32,126
坐标完全一致

263
00:10:32,546 --> 0:10:34,616
所以这看起来是正确的

264
00:10:34,616 --> 0:10:35,346
也被检测到了

265
00:10:35,766 --> 0:10:39,216
鉴于输入正确

266
00:10:39,216 --> 0:10:40,556
但我们可以看到这儿 在 3D 视图中

267
00:10:40,556 --> 0:10:43,076
输出是错误的

268
00:10:43,076 --> 0:10:44,566
那么问题一定就是

269
00:10:44,566 --> 0:10:44,946
顶点着色器

270
00:10:45,616 --> 0:10:46,686
那么让我们用全新的着色器调试器

271
00:10:46,686 --> 0:10:48,176
来调试和解决这个问题

272
00:10:48,176 --> 0:10:52,556
只要点击调试按钮

273
00:10:52,556 --> 0:10:54,046
就在右下方的角落里

274
00:10:54,556 --> 0:10:59,896
这样一来 我们现在在着色器调试器中了

275
00:11:00,026 --> 0:11:01,196
非常简单

276
00:11:05,496 --> 0:11:06,916
你在着色器调试器中

277
00:11:06,916 --> 0:11:08,926
注意到的第一件事是

278
00:11:08,926 --> 0:11:10,796
除了源代码之外

279
00:11:11,136 --> 0:11:12,126
你还能看到所有行中

280
00:11:12,126 --> 0:11:14,066
被修改过的变量

281
00:11:14,066 --> 0:11:16,426
如果想要关于变量的

282
00:11:16,426 --> 0:11:17,926
更多细节

283
00:11:18,276 --> 0:11:19,716
你只要打开细节视图

284
00:11:19,716 --> 0:11:21,956
点击这个细节视图按钮

285
00:11:21,956 --> 0:11:23,006
就在这儿

286
00:11:24,836 --> 0:11:27,366
细节视图将会用源代码语言

287
00:11:27,366 --> 0:11:29,186
向你展示变量的

288
00:11:29,186 --> 0:11:30,276
所有值

289
00:11:30,826 --> 0:11:33,136
不仅如此

290
00:11:33,136 --> 0:11:35,036
还包括你正在调试的

291
00:11:35,036 --> 0:11:36,316
三角形的所有顶点

292
00:11:36,316 --> 0:11:37,216
变量的值

293
00:11:37,216 --> 0:11:42,646
在调试导航窗口中

294
00:11:42,646 --> 0:11:43,856
你能看到

295
00:11:43,856 --> 0:11:46,106
历史记录 他可以显示

296
00:11:46,106 --> 0:11:47,636
着色器从头到尾

297
00:11:47,636 --> 0:11:50,816
做过什么

298
00:11:51,166 --> 0:11:53,126
正如你所见 我们可以非常简单地

299
00:11:53,176 --> 0:11:54,686
使用方向键

300
00:11:54,686 --> 0:11:55,806
单步调试代码

301
00:11:57,916 --> 0:11:59,566
你们可能已经注意到了

302
00:11:59,566 --> 0:12:01,726
当我用导航仪导航时

303
00:11:59,566 --> 0:12:01,726
当我用导航仪导航时

304
00:12:02,056 --> 0:12:03,406
它在源代码中的位置

305
00:12:03,406 --> 0:12:04,226
被高亮了

306
00:12:04,796 --> 0:12:06,756
这个操作是双向的

307
00:12:07,056 --> 0:12:08,556
你可以选中一行你的

308
00:12:08,556 --> 0:12:10,136
源代码 它在调试导航仪中

309
00:12:10,136 --> 0:12:11,876
的位置将被选中

310
00:12:12,396 --> 0:12:15,466
在任何时候 你只要打开变量视图

311
00:12:15,466 --> 0:12:17,096
这儿在底部

312
00:12:17,096 --> 0:12:18,686
就能看到所有

313
00:12:18,686 --> 0:12:20,836
范围内存在的变量

314
00:12:20,836 --> 0:12:24,806
那么我们已经更加了解

315
00:12:24,806 --> 0:12:26,096
着色器调试器了

316
00:12:26,216 --> 0:12:27,276
让我们来调试我们的问题

317
00:12:30,436 --> 0:12:32,686
水是由产生的

318
00:12:32,716 --> 0:12:34,356
位移矢量计算的

319
00:12:34,446 --> 0:12:36,056
其稍后会添加到我们的

320
00:12:36,056 --> 0:12:36,676
最终位置

321
00:12:37,566 --> 0:12:38,826
让我们通过打开这个

322
00:12:38,826 --> 0:12:39,986
细节视图

323
00:12:39,986 --> 0:12:41,776
来进一步了解

324
00:12:42,266 --> 0:12:42,366
这个位移矢量

325
00:12:46,536 --> 0:12:48,616
在这个细节视图里我们可以看到

326
00:12:48,856 --> 0:12:51,206
正在调试的

327
00:12:51,206 --> 0:12:52,576
顶点的正确坐标

328
00:12:52,686 --> 0:12:54,116
是一个很大的负数

329
00:12:54,416 --> 0:12:55,816
与其他正确顶点

330
00:12:55,816 --> 0:12:57,976
中的正数相比

331
00:12:58,256 --> 0:13:00,416
那么接下来的问题就是我们

332
00:12:58,256 --> 0:13:00,416
那么接下来的问题就是我们

333
00:13:00,416 --> 0:13:02,116
如何计算这个位移矢量

334
00:13:02,116 --> 0:13:05,556
所以 让我们用调试导航仪

335
00:13:05,806 --> 0:13:07,046
运行函数

336
00:13:07,046 --> 0:13:09,000
看看到底正在发生什么

337
00:13:17,086 --> 0:13:18,236
看这里 甚至不用读代码

338
00:13:18,236 --> 0:13:19,906
我们已经可以

339
00:13:19,906 --> 0:13:21,696
发现有地方出错了

340
00:13:22,156 --> 0:13:24,176
有一个变量的值

341
00:13:24,176 --> 0:13:25,966
不是数字 并且这

342
00:13:25,966 --> 0:13:27,706
很可能破坏进一步

343
00:13:27,706 --> 0:13:28,136
的数学运算

344
00:13:28,666 --> 0:13:30,276
让我们来检查一下这一切

345
00:13:30,276 --> 0:13:30,826
为什么会发生

346
00:13:31,356 --> 0:13:32,846
如果我们在这个调试器中检查

347
00:13:32,846 --> 0:13:34,796
会发现我们正在

348
00:13:34,796 --> 0:13:37,096
对这个负数进行操作

349
00:13:37,096 --> 0:13:40,036
这就是导致 NaN 的原因

350
00:13:40,806 --> 0:13:42,316
所以我们已经找到了原因

351
00:13:42,316 --> 0:13:43,956
我们可以很快解决这个问题

352
00:13:43,956 --> 0:13:45,396
通过对调这两行

353
00:13:45,396 --> 0:13:48,966
这样 我们就不会对负数

354
00:13:48,966 --> 0:13:49,786
进行操作了

355
00:13:50,526 --> 0:13:55,686
现在 我们已经调整了着色器

356
00:13:55,686 --> 0:13:56,946
让我们试一下这些改变

357
00:13:56,946 --> 0:13:58,166
点击这儿 重载变化按钮

358
00:13:58,166 --> 0:14:05,696
在调试栏中 重载着色器将使用

359
00:13:58,166 --> 0:14:05,696
在调试栏中 重载着色器将使用

360
00:14:05,756 --> 0:14:06,976
新着色器运行代码

361
00:14:06,976 --> 0:14:08,566
这样你就能

362
00:14:08,566 --> 0:14:10,096
立刻检验结果

363
00:14:11,356 --> 0:14:15,916
现在我们可以看到 水平面光滑了

364
00:14:17,266 --> 0:14:18,876
但是让我们实际检验一遍

365
00:14:19,166 --> 0:14:27,706
只要点击 调试栏中的继续按钮

366
00:14:27,706 --> 0:14:28,656
然后我们能看到 [ 掌声响起 ]

367
00:14:29,446 --> 0:14:31,826
我们的水模拟完全正确

368
00:14:34,456 --> 0:14:36,306
在这个演示中

369
00:14:36,306 --> 0:14:37,896
我们已经看到如何拿一帧

370
00:14:37,896 --> 0:14:39,846
如何用全新的

371
00:14:39,846 --> 0:14:41,606
几何查看器寻找损坏的顶点

372
00:14:41,606 --> 0:14:43,506
如何用全新的

373
00:14:43,506 --> 0:14:45,636
着色器调试器调试和修复

374
00:14:45,636 --> 0:14:46,696
顶点着色器

375
00:14:46,966 --> 0:14:47,976
谢谢 我将把舞台交还给 Alp

376
00:14:48,516 --> 0:14:57,016
[ 掌声 ]

377
00:14:57,516 --> 0:14:58,226
&gt;&gt; 很酷 对吧

378
00:14:58,636 --> 0:15:00,426
谢谢 Xavier

379
00:14:58,636 --> 0:15:00,426
谢谢 Xavier

380
00:15:01,646 --> 0:15:02,836
现在你已经看过着色器调试器

381
00:15:02,836 --> 0:15:04,676
的作用 让我们进一步

382
00:15:04,676 --> 0:15:06,666
看看如何使用

383
00:15:06,666 --> 0:15:08,636
这个工具解决调试需求

384
00:15:09,246 --> 0:15:10,476
首先

385
00:15:11,326 --> 0:15:13,196
我们来谈谈如何

386
00:15:13,196 --> 0:15:16,656
进入着色器调试器

387
00:15:16,696 --> 0:15:18,736
这儿我已经捕捉了一帧

388
00:15:18,896 --> 0:15:20,316
并且在进行最后一次调用

389
00:15:20,776 --> 0:15:23,176
然后你将选中绘图调用或

390
00:15:23,176 --> 0:15:25,486
发送调用

391
00:15:25,746 --> 0:15:27,606
调试栏上的调试着色器按钮

392
00:15:27,666 --> 0:15:29,706
将被启用

393
00:15:30,126 --> 0:15:31,576
你能轻松进入着色器调试器

394
00:15:32,636 --> 0:15:34,416
点击按钮将会出现一个视图

395
00:15:34,646 --> 0:15:35,676
你可以选择你

396
00:15:35,706 --> 0:15:36,506
感兴趣的线程

397
00:15:37,906 --> 0:15:39,246
选择线程意味着

398
00:15:39,336 --> 0:15:41,166
不同的事情 这取决于

399
00:15:41,166 --> 0:15:42,126
你正在调试的着色器

400
00:15:42,126 --> 0:15:42,636
的类型

401
00:15:43,726 --> 0:15:45,996
对于片元着色器

402
00:15:46,196 --> 0:15:47,956
你将用像素检视器

403
00:15:47,956 --> 0:15:49,976
选中你想要调试的像素

404
00:15:50,966 --> 0:15:53,176
对于顶点着色器

405
00:15:53,176 --> 0:15:54,596
你将用我们刚刚看到的

406
00:15:54,596 --> 0:15:56,446
几何查看器来选中

407
00:15:56,446 --> 0:15:57,636
你想要调试的顶点

408
00:15:58,166 --> 0:16:01,236
对于计算能力

409
00:15:58,166 --> 0:16:01,236
对于计算能力

410
00:16:01,236 --> 0:16:03,286
你将用控制键来选择

411
00:16:03,286 --> 0:16:04,516
你感兴趣的线程

412
00:16:05,176 --> 0:16:07,166
然后只要点击调试按钮

413
00:16:07,166 --> 0:16:08,906
就大功告成了

414
00:16:09,596 --> 0:16:10,556
你在着色器调试器中了

415
00:16:11,556 --> 0:16:12,696
当你在里面时

416
00:16:12,696 --> 0:16:14,666
你可以很轻松地

417
00:16:14,666 --> 0:16:16,686
检查任何你感兴趣的变量

418
00:16:17,846 --> 0:16:19,936
你只需找到 变量所在的那一行源代码

419
00:16:19,936 --> 0:16:22,836
那就是你需要做的一切

420
00:16:22,996 --> 0:16:24,256
你不需要任何断点

421
00:16:24,546 --> 0:16:25,926
你不需要单步执行代码

422
00:16:26,566 --> 0:16:28,356
那一行中

423
00:16:28,356 --> 0:16:30,376
修改的变量的值

424
00:16:30,376 --> 0:16:31,716
将在工具栏中显示

425
00:16:32,946 --> 0:16:34,406
正如大家在演示中看到的那样

426
00:16:34,406 --> 0:16:35,836
我们高亮了 NaN

427
00:16:35,956 --> 0:16:38,976
和无穷大

428
00:16:38,976 --> 0:16:40,576
因此很容易找到

429
00:16:40,576 --> 0:16:41,466
一般性错误

430
00:16:42,636 --> 0:16:43,806
你可以用工具栏中的

431
00:16:43,806 --> 0:16:45,826
按钮来启用

432
00:16:45,826 --> 0:16:47,816
细节视图

433
00:16:47,816 --> 0:16:49,486
并得到变量的完整详细细节

434
00:16:49,946 --> 0:16:53,356
这非常有用

435
00:16:53,356 --> 0:16:54,696
特别是如果你想视察

436
00:16:54,696 --> 0:16:56,196
复杂的结构并且想要

437
00:16:56,196 --> 0:16:57,786
潜入不同的组件

438
00:16:59,396 --> 0:17:02,136
或者你可以将鼠标停在任何

439
00:16:59,396 --> 0:17:02,136
或者你可以将鼠标停在任何

440
00:17:02,136 --> 0:17:03,346
源代码里的变量上

441
00:17:03,346 --> 0:17:05,776
你立刻就能看到

442
00:17:05,776 --> 0:17:07,866
变量在当时的值

443
00:17:08,685 --> 0:17:11,256
如果你正在从纹理中采样

444
00:17:11,526 --> 0:17:13,366
就像我们这个例子

445
00:17:13,526 --> 0:17:15,726
并且想快速检测

446
00:17:15,726 --> 0:17:17,715
该纹理是否正确

447
00:17:17,715 --> 0:17:20,506
那么这将尤其有用

448
00:17:20,626 --> 0:17:23,016
就像在 CPU 调试器中

449
00:17:23,705 --> 0:17:24,626
你能够看到

450
00:17:24,626 --> 0:17:26,796
变量视图

451
00:17:26,796 --> 0:17:29,876
向你显示范围内所有变量

452
00:17:30,046 --> 0:17:32,496
因此检视变量

453
00:17:32,496 --> 0:17:33,656
是调试着色器的

454
00:17:33,656 --> 0:17:35,856
核心部分 但是那仅是

455
00:17:35,856 --> 0:17:36,396
故事的一半

456
00:17:37,096 --> 0:17:38,696
你还想知道

457
00:17:38,726 --> 0:17:40,376
你的代码的

458
00:17:40,376 --> 0:17:40,996
执行顺序是什么

459
00:17:41,536 --> 0:17:42,896
着色器调试器也使之

460
00:17:42,896 --> 0:17:43,866
变得相当简单

461
00:17:44,486 --> 0:17:46,876
当你进入着色器调试器后

462
00:17:46,876 --> 0:17:48,356
在调试导航仪中

463
00:17:48,356 --> 0:17:50,386
你会看到着色器

464
00:17:50,386 --> 0:17:52,316
为你选中的线程

465
00:17:52,316 --> 0:17:53,546
执行的所有

466
00:17:53,546 --> 0:17:53,946
源代码行

467
00:17:55,906 --> 0:17:58,276
你可以选中想要的任意一行

468
00:17:58,276 --> 0:17:59,856
并直接导航到该行

469
00:18:00,866 --> 0:18:03,156
这也提供了独特的

470
00:18:03,156 --> 0:18:04,486
执行经验让你

471
00:18:04,486 --> 0:18:06,656
能够仅用光标键

472
00:18:06,656 --> 0:18:08,326
遍历代码

473
00:18:09,206 --> 0:18:10,776
函数在导航器中是

474
00:18:10,776 --> 0:18:12,306
成组的 因此你只需

475
00:18:12,306 --> 0:18:17,166
扩展并运行它们

476
00:18:17,166 --> 0:18:18,676
这也使反向调试

477
00:18:18,746 --> 0:18:21,046
成为了可能 这是

478
00:18:21,046 --> 0:18:22,976
调节着色器的一种

479
00:18:22,976 --> 0:18:23,526
非常有用的方式

480
00:18:23,866 --> 0:18:25,326
只要找到有错误值的变量

481
00:18:25,326 --> 0:18:27,476
然后反向运行

482
00:18:27,476 --> 0:18:29,266
看看哪里

483
00:18:29,336 --> 0:18:33,396
出了错以及出错的原因

484
00:18:33,596 --> 0:18:35,026
你还可以使用过滤

485
00:18:35,946 --> 0:18:37,686
过滤是集中的好办法

486
00:18:37,686 --> 0:18:41,576
你可以过滤任何

487
00:18:41,576 --> 0:18:42,716
着色器代码中

488
00:18:42,746 --> 0:18:43,506
你感兴趣的东西

489
00:18:44,396 --> 0:18:46,336
过滤器将与函数调用

490
00:18:46,486 --> 0:18:50,046
变量 资源 相匹配

491
00:18:50,996 --> 0:18:53,676
你的着色器代码可能会跨越

492
00:18:53,676 --> 0:18:55,936
许多不同文件

493
00:18:55,936 --> 0:18:58,046
但如果你使用过滤器

494
00:18:58,046 --> 0:18:59,686
它只会执行与着色器相匹配的内容

495
00:18:59,686 --> 0:19:05,966
因此这是一个集中的好方法

496
00:18:59,686 --> 0:19:05,966
因此这是一个集中的好方法

497
00:19:06,166 --> 0:19:08,286
到目前为止我们所看到的

498
00:19:08,406 --> 0:19:09,686
都针对调试单一线程

499
00:19:09,686 --> 0:19:12,706
但如果是其他线程呢

500
00:19:14,346 --> 0:19:16,156
着色器调试器也让你

501
00:19:16,156 --> 0:19:18,276
能够基于你选中的初始线程来

502
00:19:18,276 --> 0:19:20,596
访问其他线程

503
00:19:21,866 --> 0:19:23,926
这意味着对于顶点着色器

504
00:19:24,456 --> 0:19:27,846
你将获得选中顶点的基元

505
00:19:28,156 --> 0:19:30,056
对于片元着色器 你将获得直接

506
00:19:30,056 --> 0:19:31,996
角度区域以及选定的像素

507
00:19:33,436 --> 0:19:35,316
对于计算能力 你将获得

508
00:19:35,316 --> 0:19:38,326
选中的计算线程的所有线程组

509
00:19:38,326 --> 0:19:39,836
这样你能够获取

510
00:19:40,106 --> 0:19:43,696
与线程组内存有关的所有变量

511
00:19:43,936 --> 0:19:46,476
现在我们来看看获取

512
00:19:46,476 --> 0:19:48,966
其他线程将如何帮助你调试

513
00:19:48,966 --> 0:19:49,786
片元着色器

514
00:19:50,336 --> 0:19:54,766
那么当你的代码执行

515
00:19:55,106 --> 0:19:56,606
上百万不同的像素时

516
00:19:57,576 --> 0:20:00,196
在单个像素中查看单个变量

517
00:19:57,576 --> 0:20:00,196
在单个像素中查看单个变量

518
00:20:00,196 --> 0:20:02,056
可能无法帮助你

519
00:20:02,056 --> 0:20:02,716
解决所有情况

520
00:20:03,546 --> 0:20:05,136
我举个例子

521
00:20:05,506 --> 0:20:08,016
我正在计算梯度

522
00:20:08,016 --> 0:20:09,476
而且我看不见单一梯度值

523
00:20:09,796 --> 0:20:11,546
但是我不知道

524
00:20:11,546 --> 0:20:13,256
这个梯度值对我的像素

525
00:20:13,256 --> 0:20:14,776
到底好不好

526
00:20:15,756 --> 0:20:18,306
只要点击一下

527
00:20:18,336 --> 0:20:21,106
打开细节视图 我就能在茫茫像素中

528
00:20:21,106 --> 0:20:23,136
看到我的像素

529
00:20:23,136 --> 0:20:25,036
的梯度值

530
00:20:25,316 --> 0:20:27,596
现在我知道这个梯度不对

531
00:20:27,596 --> 0:20:29,296
因为我能

532
00:20:29,296 --> 0:20:31,236
清楚地看到它不平滑

533
00:20:32,216 --> 0:20:34,146
正如你看到的 细节视图能

534
00:20:34,176 --> 0:20:35,716
帮助你了解着色器

535
00:20:36,536 --> 0:20:40,376
并为它分辨好或不好的值

536
00:20:40,916 --> 0:20:44,506
你能快速进入任何

537
00:20:44,506 --> 0:20:47,116
其他像素 立即查看

538
00:20:47,116 --> 0:20:49,196
那个像素的变量值

539
00:20:49,796 --> 0:20:54,036
你还可以用这个视图

540
00:20:54,286 --> 0:20:56,926
切换线程

541
00:20:57,036 --> 0:20:58,826
切换线程非常适合

542
00:20:58,826 --> 0:21:00,596
比较 这样你就能

543
00:20:58,826 --> 0:21:00,596
比较 这样你就能

544
00:21:00,596 --> 0:21:02,566
清楚地看到好的和不好的像素

545
00:21:03,006 --> 0:21:04,456
你能在它们之间快速跳转

546
00:21:04,456 --> 0:21:07,116
并且查看后台像素的活动

547
00:21:08,666 --> 0:21:10,526
一旦切换线程

548
00:21:10,526 --> 0:21:12,306
我们就更新了执行历史和

549
00:21:12,306 --> 0:21:14,456
变量视图

550
00:21:14,456 --> 0:21:15,806
这样你能充分调试

551
00:21:15,806 --> 0:21:17,606
新选中的线程

552
00:21:19,096 --> 0:21:20,596
这会变得更好

553
00:21:21,716 --> 0:21:23,276
细节视图还能让你

554
00:21:23,276 --> 0:21:24,836
了解散度

555
00:21:26,256 --> 0:21:29,706
无论何时你开启细节视图

556
00:21:29,706 --> 0:21:31,716
右手侧的蒙版

557
00:21:31,716 --> 0:21:34,716
就会始终显示

558
00:21:34,786 --> 0:21:36,556
其他线程执行的相同

559
00:21:36,556 --> 0:21:37,226
代码情况

560
00:21:38,686 --> 0:21:40,456
在这个例子中

561
00:21:40,556 --> 0:21:43,776
是有条件的 只要看看蒙版

562
00:21:43,776 --> 0:21:45,416
我就知道

563
00:21:45,416 --> 0:21:47,796
在这里面大约执行了

564
00:21:48,086 --> 0:21:49,786
一半线程

565
00:21:49,786 --> 0:21:51,786
如果是有条件的话

566
00:21:51,786 --> 0:21:52,046
以对角线形状执行

567
00:21:53,556 --> 0:21:57,276
现在为了展示如何

568
00:21:57,276 --> 0:21:59,196
用细节视图解决片元着色器

569
00:21:59,196 --> 0:22:00,946
中的问题

570
00:21:59,196 --> 0:22:00,946
中的问题

571
00:22:00,946 --> 0:22:02,916
我将邀请 Xavier

572
00:22:02,916 --> 0:22:03,366
重回舞台

573
00:22:03,746 --> 0:22:04,136
Xavier

574
00:22:05,516 --> 0:22:08,596
[ 掌声 ]

575
00:22:09,096 --> 0:22:09,476
&gt;&gt; 谢谢 Alp

576
00:22:10,136 --> 0:22:11,486
在第一个演示中解决了

577
00:22:11,486 --> 0:22:13,086
几何问题后

578
00:22:13,316 --> 0:22:15,606
我加入了高亮作为过程和效果

579
00:22:16,176 --> 0:22:17,986
但是结果却并不尽如人意

580
00:22:18,646 --> 0:22:19,936
因此采取帧捕捉

581
00:22:19,936 --> 0:22:20,706
来调试这个问题

582
00:22:25,756 --> 0:22:27,506
在这儿的视图

583
00:22:27,506 --> 0:22:30,016
我们可以看到

584
00:22:30,096 --> 0:22:31,356
高亮实际上

585
00:22:31,356 --> 0:22:33,886
是在底部产生暗色区域的地方

586
00:22:34,336 --> 0:22:36,246
所以让我们用着色器调试器

587
00:22:36,346 --> 0:22:37,526
来调试和解决这个问题

588
00:22:38,756 --> 0:22:40,746
通过不按 我打开了

589
00:22:40,886 --> 0:22:42,796
像素检视器

590
00:22:42,796 --> 0:22:45,096
这能让你选中你想要调试的像素

591
00:22:45,776 --> 0:22:47,736
因此 这儿我们将选中

592
00:22:47,736 --> 0:22:49,576
一个像素 比如说这个

593
00:22:49,576 --> 0:22:52,876
然后启动着色器调试器

594
00:22:52,876 --> 0:22:54,636
你需要点击这里的调试按钮

595
00:22:54,636 --> 0:22:55,566
在底部右侧的角落里

596
00:22:58,216 --> 0:22:59,556
现在我们就在调试

597
00:22:59,556 --> 0:23:00,296
帧和着色器了

598
00:22:59,556 --> 0:23:00,296
帧和着色器了

599
00:23:05,416 --> 0:23:07,656
可以看到

600
00:23:07,726 --> 0:23:09,186
高亮从三种不同的

601
00:23:09,186 --> 0:23:10,416
步骤中生成

602
00:23:10,976 --> 0:23:12,346
让我们用细节视图

603
00:23:12,346 --> 0:23:14,126
来迅速了解正在发生什么

604
00:23:14,516 --> 0:23:16,466
我们首先从比较近的

605
00:23:16,466 --> 0:23:17,416
第一个开始看

606
00:23:17,876 --> 0:23:21,676
可以看到这儿 我们正在

607
00:23:21,676 --> 0:23:23,336
从原始色彩中取样

608
00:23:23,336 --> 0:23:25,576
这看上去没问题

609
00:23:25,986 --> 0:23:29,056
接着往下看

610
00:23:29,176 --> 0:23:30,596
这儿我们正在一个方向中

611
00:23:30,676 --> 0:23:31,716
累加高亮

612
00:23:31,716 --> 0:23:33,696
让我们打开

613
00:23:33,696 --> 0:23:35,436
细节视图来看看结果

614
00:23:35,926 --> 0:23:39,246
从细节视图中可以看到

615
00:23:39,246 --> 0:23:42,776
在底部 已经有了暗色区域

616
00:23:42,896 --> 0:23:45,556
就在这儿 那么问题

617
00:23:45,556 --> 0:23:46,696
一定出在我们

618
00:23:46,696 --> 0:23:48,066
累加高亮的过程中

619
00:23:48,726 --> 0:23:51,016
你可以看到 细节视图

620
00:23:51,016 --> 0:23:52,136
是一款了解你着色器的

621
00:23:52,376 --> 0:23:55,186
强大工具 甚至不需要看代码

622
00:23:56,396 --> 0:23:58,376
让我们用调试导航仪

623
00:23:58,476 --> 0:24:00,056
看看第一个像素

624
00:23:58,476 --> 0:24:00,056
看看第一个像素

625
00:24:00,056 --> 0:24:01,396
到底发生了什么

626
00:24:01,866 --> 0:24:06,386
看这儿

627
00:24:06,386 --> 0:24:08,106
这个函数主要是一个

628
00:24:08,106 --> 0:24:09,316
迭代几次的循环

629
00:24:09,456 --> 0:24:13,326
从 brightnessMap 中累加样本

630
00:24:13,326 --> 0:24:14,946
循环仅在着色器调试器中

631
00:24:14,946 --> 0:24:16,976
被高亮了 这意味着

632
00:24:16,976 --> 0:24:18,666
你可以用着色器调试器

633
00:24:18,666 --> 0:24:20,426
导用迭代

634
00:24:20,426 --> 0:24:24,086
然后和源代码一起获取

635
00:24:24,316 --> 0:24:27,266
在每次迭代中的变量值

636
00:24:27,796 --> 0:24:31,596
如果我们关注这儿 会看到

637
00:24:31,596 --> 0:24:32,786
当我导向

638
00:24:32,786 --> 0:24:34,606
不同迭代时

639
00:24:34,606 --> 0:24:35,046
值会变化

640
00:24:37,016 --> 0:24:39,656
但是真正强大的是

641
00:24:39,656 --> 0:24:41,466
将这与细节视图结合起来

642
00:24:42,186 --> 0:24:44,196
那么这儿 我们将

643
00:24:44,196 --> 0:24:45,566
打开细节视图来看看最终的

644
00:24:45,566 --> 0:24:47,226
色彩 这也是我们

645
00:24:47,226 --> 0:24:48,666
累加高亮的地方

646
00:24:51,536 --> 0:24:53,556
现在让我们用调试导航仪

647
00:24:53,556 --> 0:24:54,476
进行迭代

648
00:24:55,326 --> 0:24:57,906
正如我们看到的 当我迭代时

649
00:24:58,056 --> 0:24:59,346
我们开始为最后的色彩

650
00:24:59,346 --> 0:25:00,946
累加高亮

651
00:24:59,346 --> 0:25:00,946
累加高亮

652
00:25:01,536 --> 0:25:03,296
但是当我继续

653
00:25:03,296 --> 0:25:05,106
向循环末尾迭代时 我们

654
00:25:05,106 --> 0:25:07,236
实际上可以看到 出现了一个图案

655
00:25:07,766 --> 0:25:09,986
那么让我们来看看为什么

656
00:25:09,986 --> 0:25:10,506
会发生这种情况

657
00:25:14,116 --> 0:25:15,806
正如在调试器中

658
00:25:16,156 --> 0:25:18,176
我们实际上可以看到

659
00:25:18,176 --> 0:25:19,116
权重是负的

660
00:25:19,626 --> 0:25:21,076
这就是为什么

661
00:25:21,076 --> 0:25:23,206
在最终呈现时

662
00:25:23,206 --> 0:25:25,146
色彩是分散的

663
00:25:25,146 --> 0:25:25,346
而不是积累在一起的

664
00:25:26,436 --> 0:25:28,286
现在我们已经找到了

665
00:25:28,476 --> 0:25:30,056
问题所在

666
00:25:30,056 --> 0:25:31,586
让我迅速解决它

667
00:25:34,616 --> 0:25:36,296
现在让我们检验结果

668
00:25:36,296 --> 0:25:38,036
只要签入

669
00:25:38,036 --> 0:25:39,716
重载变化按钮

670
00:25:39,716 --> 0:25:42,776
在调试栏中

671
00:25:42,776 --> 0:25:46,366
我们可以看到 现在已经没有其他载体了

672
00:25:46,656 --> 0:25:48,496
但是 让我们在实际操作中看一下

673
00:25:48,496 --> 0:25:50,036
只要点击继续按钮

674
00:25:54,556 --> 0:25:56,686
好了 现在我们的高亮

675
00:25:56,686 --> 0:25:57,346
看上去不错

676
00:25:58,066 --> 0:26:00,146
这只是使用着色器调试器

677
00:25:58,066 --> 0:26:00,146
这只是使用着色器调试器

678
00:26:00,146 --> 0:26:01,516
和它强大的细节视图

679
00:26:01,516 --> 0:26:05,376
来调试 [ 音质不清晰 ] 着色器的一个例子

680
00:26:05,896 --> 0:26:06,426
谢谢大家

681
00:26:06,426 --> 0:26:07,466
把舞台交还给 Alp

682
00:26:08,516 --> 0:26:11,646
[ 掌声 ]

683
00:26:12,146 --> 0:26:12,766
&gt;&gt; 谢谢 Xavier

684
00:26:14,316 --> 0:26:16,316
现在我们已经看到了

685
00:26:16,316 --> 0:26:17,196
着色器调试器的一切

686
00:26:17,196 --> 0:26:19,996
我们来总结一下

687
00:26:19,996 --> 0:26:22,526
到目前为止谈了什么

688
00:26:22,716 --> 0:26:25,036
着色器调试器是专门

689
00:26:25,036 --> 0:26:26,496
针对调试 Metal 着色器

690
00:26:26,496 --> 0:26:28,736
设计的 考虑到

691
00:26:28,736 --> 0:26:30,236
GPU 的高并行本质

692
00:26:30,236 --> 0:26:33,666
大家也都看到

693
00:26:33,666 --> 0:26:36,066
它对修补非数字和无穷大

694
00:26:36,066 --> 0:26:37,796
的高亮的漏洞

695
00:26:37,796 --> 0:26:40,456
非常有用 很容易发现

696
00:26:40,456 --> 0:26:43,036
一般性错误 并且能让你

697
00:26:43,036 --> 0:26:45,136
更好地了解着色器

698
00:26:45,976 --> 0:26:47,426
有了细节视图

699
00:26:47,426 --> 0:26:48,836
你甚至不需要读代码

700
00:26:49,116 --> 0:26:50,726
了解你的着色器正在做什么

701
00:26:51,756 --> 0:26:53,996
同时它还为着色器开发

702
00:26:53,996 --> 0:26:56,066
提供了绝佳的环境

703
00:26:56,766 --> 0:26:58,016
只要进入着色器调试器

704
00:26:58,306 --> 0:27:01,356
并开始编辑 读取

705
00:26:58,306 --> 0:27:01,356
并开始编辑 读取

706
00:27:01,476 --> 0:27:03,426
即可快速迭代你的结果

707
00:27:03,916 --> 0:27:07,486
着色器调试器支持搭载 iOS

708
00:27:07,806 --> 0:27:10,726
macOS 和 tvOS 的最新硬件

709
00:27:12,066 --> 0:27:14,456
接下来该欣赏

710
00:27:14,956 --> 0:27:15,660
Xcode 10 了

711
00:27:17,516 --> 0:27:21,546
[ 掌声 ]

712
00:27:22,046 --> 0:27:23,286
&gt;&gt; 现在我们已经看到了

713
00:27:23,286 --> 0:27:24,866
如何使用几何查看器和

714
00:27:24,866 --> 0:27:26,726
着色器调试器来调试

715
00:27:26,726 --> 0:27:28,896
着色器问题 现在让我们将目光转向

716
00:27:28,896 --> 0:27:30,836
如何让着色器

717
00:27:30,836 --> 0:27:32,426
运行得更快

718
00:27:36,276 --> 0:27:39,796
因此优化 GPU 的使用

719
00:27:39,796 --> 0:27:42,266
很重要 因为你想让 App

720
00:27:42,406 --> 0:27:44,196
运行得更快

721
00:27:44,196 --> 0:27:46,166
消耗更少的电量 并且有更好的

722
00:27:46,166 --> 0:27:46,866
用户体验

723
00:27:47,416 --> 0:27:49,556
但在开始优化前

724
00:27:50,016 --> 0:27:53,876
必须知道优化内容是什么

725
00:27:54,236 --> 0:27:56,366
如果你有 GPU 限制

726
00:27:56,366 --> 0:27:57,576
典型的 Metal 工作量有许多

727
00:27:57,576 --> 0:27:58,406
不同通道

728
00:27:59,106 --> 0:28:01,236
知道专注哪条通道

729
00:27:59,106 --> 0:28:01,236
知道专注哪条通道

730
00:28:01,236 --> 0:28:02,846
是非常重要的

731
00:28:03,646 --> 0:28:05,876
好消息是我们有强大的

732
00:28:05,876 --> 0:28:07,756
内置在 Metal 帧调试器中的

733
00:28:07,756 --> 0:28:11,386
性能分析工具 来帮助你解决问题

734
00:28:11,576 --> 0:28:13,636
GPU 计数器可以给你的 App

735
00:28:13,636 --> 0:28:15,476
带来极佳的表现

736
00:28:16,406 --> 0:28:17,846
可以看到 时间

737
00:28:17,946 --> 0:28:19,946
编码或绘图调用

738
00:28:19,946 --> 0:28:21,896
并且提供不同的计数器

739
00:28:21,896 --> 0:28:23,786
显示瓶颈

740
00:28:25,066 --> 0:28:26,686
从这儿 一旦你知道了

741
00:28:26,856 --> 0:28:28,616
扩展型通道 你就能

742
00:28:28,616 --> 0:28:30,276
继续得到管线数据

743
00:28:31,076 --> 0:28:33,446
你会为你的着色器

744
00:28:33,646 --> 0:28:36,486
进行很好的编译 为你提供

745
00:28:36,486 --> 0:28:38,926
指令类型

746
00:28:39,676 --> 0:28:42,566
使用着色器性能分析器

747
00:28:42,986 --> 0:28:44,846
能让你看到绘图调用

748
00:28:44,896 --> 0:28:47,136
和每个管线状态

749
00:28:48,366 --> 0:28:48,536
的定时

750
00:28:48,826 --> 0:28:51,896
那么今天我将重点谈谈

751
00:28:51,986 --> 0:28:53,736
着色器性能分析器 并且我将展示

752
00:28:53,736 --> 0:28:55,296
能帮助你们优化着色器的

753
00:28:55,296 --> 0:28:57,016
工作流程

754
00:28:57,516 --> 0:29:02,176
一旦你在 Metal

755
00:28:57,516 --> 0:29:02,176
一旦你在 Metal

756
00:29:02,176 --> 0:29:04,306
帧调试器中

757
00:29:04,306 --> 0:29:06,156
即将被性能导航器读取

758
00:29:06,156 --> 0:29:07,826
你将看到根据执行时间分类的

759
00:29:08,226 --> 0:29:10,666
所有管线状态

760
00:29:11,446 --> 0:29:13,806
这是一个能够看到我们正在优化的

761
00:29:13,806 --> 0:29:16,786
所有扩展型管线的地方

762
00:29:18,036 --> 0:29:19,766
这儿用这些管线状态

763
00:29:19,766 --> 0:29:21,366
你还能看到

764
00:29:21,366 --> 0:29:23,016
绘图调用 这样就能

765
00:29:23,016 --> 0:29:24,836
直接导向其中一个

766
00:29:24,836 --> 0:29:25,656
看看它正在画什么

767
00:29:26,166 --> 0:29:29,486
如果你是 iOS 或 tvOS 系统

768
00:29:30,466 --> 0:29:31,806
只要前往着色器源

769
00:29:32,076 --> 0:29:32,966
就能看到每行

770
00:29:32,966 --> 0:29:33,976
执行成本

771
00:29:34,846 --> 0:29:36,286
它非常好地展示了

772
00:29:36,626 --> 0:29:40,456
在着色器中 你在哪儿花费的时间最多

773
00:29:40,456 --> 0:29:40,966
按行计算

774
00:29:41,996 --> 0:29:44,056
一旦你进入到着色器源代码中

775
00:29:44,056 --> 0:29:46,046
就可以开始

776
00:29:46,046 --> 0:29:48,086
编辑你的代码并重载

777
00:29:48,086 --> 0:29:50,326
看看计时器是否

778
00:29:50,796 --> 0:29:51,776
有任何时间差异

779
00:29:52,816 --> 0:29:54,726
或者你可以仅仅进入着色器

780
00:29:54,726 --> 0:29:55,096
调试器

781
00:29:56,136 --> 0:29:57,736
如果你想优化

782
00:29:57,736 --> 0:29:58,586
一个算法或者刚刚

783
00:29:58,586 --> 0:30:00,676
通过一个控制流

784
00:29:58,586 --> 0:30:00,676
通过一个控制流

785
00:30:00,676 --> 0:30:02,166
并且当我知道你究竟能不能优化

786
00:30:02,166 --> 0:30:06,196
那么这是一个极好的工作流

787
00:30:06,196 --> 0:30:08,906
因此着色器性能分析器能

788
00:30:08,906 --> 0:30:10,596
极大地帮助你优化着色器

789
00:30:10,596 --> 0:30:13,336
但现在我们将它在 A11 做得

790
00:30:13,336 --> 0:30:17,330
更优秀

791
00:30:18,096 --> 0:30:19,286
现在所有的二进制芯片

792
00:30:19,606 --> 0:30:21,366
A11 被完全设计为

793
00:30:21,366 --> 0:30:23,486
GPU 现在我们有硬件支持

794
00:30:23,486 --> 0:30:24,826
让你能够更深入

795
00:30:24,826 --> 0:30:26,366
了解你的着色器

796
00:30:27,696 --> 0:30:27,816
正在做什么

797
00:30:28,046 --> 0:30:30,126
现在有了 A11 你就能通过

798
00:30:30,126 --> 0:30:32,596
图表 看到每行

799
00:30:32,686 --> 0:30:34,496
被执行的成本分析

800
00:30:35,096 --> 0:30:37,106
那么着色器包含不同的

801
00:30:37,106 --> 0:30:39,706
执行单元 如果你重度使用

802
00:30:39,706 --> 0:30:41,526
它们中的一个 很可能

803
00:30:41,526 --> 0:30:42,716
会因此碰上瓶颈

804
00:30:43,936 --> 0:30:46,096
算术逻辑单元和内存

805
00:30:46,096 --> 0:30:48,456
分析能让你看到

806
00:30:48,926 --> 0:30:50,776
在不同执行单元

807
00:30:50,776 --> 0:30:51,996
花费的时间

808
00:30:53,516 --> 0:30:56,516
为了确保精确指令在 A11 中更高效

809
00:30:56,516 --> 0:30:57,876
我们做了很多工作

810
00:30:58,366 --> 0:31:00,136
使用健康 溢出

811
00:30:58,366 --> 0:31:00,136
使用健康 溢出

812
00:31:00,186 --> 0:31:02,026
很可能极大增加你的

813
00:31:02,346 --> 0:31:03,296
GPU 预算

814
00:31:03,526 --> 0:31:07,596
你能看到的

815
00:31:07,596 --> 0:31:08,786
另外一个类型是同步

816
00:31:08,886 --> 0:31:10,786
这个类型

817
00:31:10,786 --> 0:31:12,006
很重要

818
00:31:12,006 --> 0:31:13,696
因为你希望着色器

819
00:31:13,696 --> 0:31:16,246
核心忙于运转 而不是

820
00:31:16,246 --> 0:31:17,396
等待同步

821
00:31:18,266 --> 0:31:20,776
在你的着色器代码中

822
00:31:20,776 --> 0:31:21,826
如果正在从纹理 缓冲区中读取数据

823
00:31:21,826 --> 0:31:24,616
或者正在用原子或栅栏

824
00:31:24,616 --> 0:31:26,886
你可能需要暂停

825
00:31:27,046 --> 0:31:28,286
等待同步

826
00:31:29,576 --> 0:31:32,196
我们还能让你看到

827
00:31:32,196 --> 0:31:36,396
内联函数的成本 从着色器中调用

828
00:31:36,946 --> 0:31:39,286
这样你能直接

829
00:31:39,286 --> 0:31:40,646
导向成本最高的

830
00:31:40,646 --> 0:31:42,706
函数 并且开始

831
00:31:46,326 --> 0:31:47,000
优化它 [ 掌声 ]

832
00:31:48,886 --> 0:31:51,166
&gt;&gt; 欢迎来到 Apple 设计的

833
00:31:51,166 --> 0:31:52,566
A11 仿生芯片

834
00:31:53,056 --> 0:31:54,786
我们能提供比以往更好的

835
00:31:54,786 --> 0:31:55,666
性能分析数据

836
00:31:56,346 --> 0:31:58,256
今年我们将介绍

837
00:31:58,256 --> 0:32:00,456
即使在内联函数中

838
00:31:58,256 --> 0:32:00,456
即使在内联函数中

839
00:32:00,456 --> 0:32:02,386
也引入了每行定时信息

840
00:32:02,386 --> 0:32:03,326
和指令类型

841
00:32:03,966 --> 0:32:05,546
我是 Max 我将

842
00:32:05,546 --> 0:32:07,686
帮助你获得最优的着色器

843
00:32:09,796 --> 0:32:12,500
性能 [ 掌声 ]

844
00:32:13,776 --> 0:32:15,846
所以我再次捕捉了同样的

845
00:32:15,846 --> 0:32:17,946
水模拟 但这次

846
00:32:18,206 --> 0:32:19,636
是在我的 iPhone 上

847
00:32:20,636 --> 0:32:23,736
让我们来通过性能

848
00:32:23,736 --> 0:32:25,046
看看帧的变化

849
00:32:25,566 --> 0:32:28,216
现在我们看到按时间排序的帧使用的

850
00:32:28,216 --> 0:32:30,066
一列管线

851
00:32:30,106 --> 0:32:32,546
我们可以很容易看到

852
00:32:32,866 --> 0:32:34,066
噪声管线

853
00:32:34,116 --> 0:32:35,876
正在消耗大量时间

854
00:32:37,046 --> 0:32:39,716
发现了这一点 我们看到

855
00:32:39,716 --> 0:32:41,226
几乎所有时间都被用在

856
00:32:41,226 --> 0:32:42,176
片元着色器上

857
00:32:42,736 --> 0:32:44,456
但是今年我们更进一步

858
00:32:45,096 --> 0:32:48,896
我们能看到在

859
00:32:48,896 --> 0:32:51,046
着色器调用的

860
00:32:51,046 --> 0:32:53,306
里面的每个函数花费的时间

861
00:32:53,816 --> 0:32:56,766
只要点击这儿前往

862
00:32:56,766 --> 0:32:58,126
源代码文件 就能直接

863
00:32:58,126 --> 0:32:59,256
跳转到正确的那一行

864
00:32:59,506 --> 0:33:01,536
这就是我们检查的第一步

865
00:32:59,506 --> 0:33:01,536
这就是我们检查的第一步

866
00:33:04,256 --> 0:33:07,306
那么现在在右手侧

867
00:33:07,306 --> 0:33:08,716
看到的就是

868
00:33:08,716 --> 0:33:10,446
我们在这个函数

869
00:33:10,446 --> 0:33:11,666
内部花的时间百分比

870
00:33:11,666 --> 0:33:14,196
进一步就能看到

871
00:33:14,196 --> 0:33:16,326
我们在每一行

872
00:33:16,326 --> 0:33:17,846
花费的时间比例

873
00:33:19,186 --> 0:33:20,916
注意 着色器性能分析器

874
00:33:20,916 --> 0:33:23,386
适用与优化后的代码

875
00:33:23,386 --> 0:33:24,786
因此编程器可以对指令

876
00:33:24,786 --> 0:33:26,946
重新排序 并且某些行

877
00:33:26,946 --> 0:33:28,786
可能没有定时信息

878
00:33:29,536 --> 0:33:32,366
接下来就到定时信息了

879
00:33:32,866 --> 0:33:34,386
我们有指令类型

880
00:33:34,526 --> 0:33:37,346
让我们来看一看

881
00:33:37,606 --> 0:33:39,626
大家能看到算术逻辑单元 在做数学运算时

882
00:33:39,626 --> 0:33:41,986
花费了时间

883
00:33:41,986 --> 0:33:43,346
我们正在从内存 纹理中读取

884
00:33:43,346 --> 0:33:45,696
但是引起我关注的是

885
00:33:45,696 --> 0:33:46,986
在同步中

886
00:33:46,986 --> 0:33:48,536
花费的时间

887
00:33:48,936 --> 0:33:50,966
尤其是在这儿等待内存的时间

888
00:33:51,586 --> 0:33:53,316
这意味着我们的 GPU 不能

889
00:33:53,316 --> 0:33:55,336
很快地读取数据 并且不能

890
00:33:55,336 --> 0:33:57,216
通过在其他线程中 执行算术逻辑单元工作

891
00:33:57,216 --> 0:33:58,866
来隐藏这个延迟

892
00:34:00,236 --> 0:34:01,806
那么让我们来弄清楚原因

893
00:34:02,326 --> 0:34:06,696
只要根据性能数字

894
00:34:06,696 --> 0:34:08,456
我们来到了这一行

895
00:34:08,456 --> 0:34:11,196
在这儿 我们花了超过一半的

896
00:34:11,196 --> 0:34:13,235
在着色器内时间

897
00:34:14,016 --> 0:34:15,176
再次看看

898
00:34:15,176 --> 0:34:17,275
指令类型

899
00:34:17,275 --> 0:34:18,755
我们能看到同步

900
00:34:18,755 --> 0:34:21,286
花费了很长时间

901
00:34:21,866 --> 0:34:22,346
但是为什么

902
00:34:26,176 --> 0:34:28,166
这儿我们使用了

903
00:34:28,936 --> 0:34:30,255
靠偏移量从色彩纹理中

904
00:34:30,255 --> 0:34:32,766
读取的色彩值

905
00:34:34,356 --> 0:34:36,045
这个偏移量是从这里的

906
00:34:36,045 --> 0:34:37,085
噪声纹理中读取的

907
00:34:37,406 --> 0:34:39,786
那么我们读取了一个相依纹理

908
00:34:39,906 --> 0:34:42,545
直到获得纹理读取后的

909
00:34:42,545 --> 0:34:44,706
数据 GPU 才能处理

910
00:34:45,106 --> 0:34:47,396
那么我们对此可以做些什么呢

911
00:34:47,846 --> 0:34:50,596
好吧 不从噪声纹理中读取

912
00:34:50,596 --> 0:34:52,536
我们反而可以在 GPU 中

913
00:34:52,536 --> 0:34:55,025
直接计算噪声值

914
00:34:55,886 --> 0:34:59,136
我来演示一下

915
00:34:59,266 --> 0:35:01,226
现在更新我的着色器

916
00:34:59,266 --> 0:35:01,226
现在更新我的着色器

917
00:35:02,126 --> 0:35:03,806
着色器现在被送到

918
00:35:03,806 --> 0:35:06,286
我们编写的设备中了

919
00:35:06,286 --> 0:35:09,106
然后整帧将重新运行

920
00:35:09,106 --> 0:35:11,106
并重新进行性能分析 因为只要改变

921
00:35:11,106 --> 0:35:12,896
一个着色器或一个线程就有可能

922
00:35:12,896 --> 0:35:15,006
影响你整个 GPU 时序

923
00:35:16,496 --> 0:35:18,926
一旦完成 我们来看一下

924
00:35:20,336 --> 0:35:22,606
我们看到 现在在着色器中

925
00:35:22,796 --> 0:35:24,376
只花了 3 毫秒

926
00:35:24,376 --> 0:35:26,166
而原先需要 20 多毫秒

927
00:35:26,846 --> 0:35:29,866
但我们再看看指令类型

928
00:35:30,586 --> 0:35:35,496
这儿能看到我们几乎

929
00:35:35,496 --> 0:35:37,206
完全消除了同步时间

930
00:35:37,206 --> 0:35:39,116
并且保持 GPU

931
00:35:39,116 --> 0:35:41,256
高速运转

932
00:35:42,526 --> 0:35:44,396
总而言之

933
00:35:44,396 --> 0:35:45,506
当你在着色器中发现了瓶颈

934
00:35:45,506 --> 0:35:47,516
每行定时信息会

935
00:35:47,516 --> 0:35:49,706
明确告诉你

936
00:35:49,706 --> 0:35:51,226
问题所在

937
00:35:51,226 --> 0:35:53,396
指令类型帮助你

938
00:35:53,396 --> 0:35:54,516
发现原因

939
00:35:55,316 --> 0:35:56,146
这就是我要介绍的部分

940
00:35:56,626 --> 0:35:57,576
将舞台交还给我的同事 Alp

941
00:35:58,516 --> 0:36:04,216
[ 掌声 ]

942
00:35:58,516 --> 0:36:04,216
[ 掌声 ]

943
00:36:04,716 --> 0:36:06,006
&gt;&gt; 谢谢 Max

944
00:36:06,006 --> 0:36:08,596
结束之前

945
00:36:08,596 --> 0:36:10,786
我想谈谈最后一件事

946
00:36:10,786 --> 0:36:12,546
让你更轻松地使用

947
00:36:12,546 --> 0:36:14,466
这些新的强大工具

948
00:36:15,696 --> 0:36:18,596
希望你们已经离线

949
00:36:18,596 --> 0:36:20,016
编写完了着色器

950
00:36:20,166 --> 0:36:21,226
这样就不用为在线编写

951
00:36:21,226 --> 0:36:23,126
而花费运行时间了

952
00:36:23,936 --> 0:36:25,576
如果你们正在离线编写

953
00:36:25,576 --> 0:36:27,236
着色器 现在我们有一个

954
00:36:27,236 --> 0:36:29,956
全新的编译程序选项可以将

955
00:36:29,956 --> 0:36:31,496
着色器源码保存到建立的

956
00:36:31,496 --> 0:36:33,196
Metal 源中

957
00:36:33,196 --> 0:36:34,156
这样无论何地 你们都能通过

958
00:36:34,156 --> 0:36:36,316
这些工具 处理着色器源码

959
00:36:37,306 --> 0:36:38,916
如果你们正在用

960
00:36:38,916 --> 0:36:41,406
Xcode Project 编写着色器

961
00:36:41,406 --> 0:36:42,826
你们能直接转到 Build Settings

962
00:36:42,826 --> 0:36:43,906
并且启用这一选项

963
00:36:44,736 --> 0:36:46,756
或者你们正在用命令行编写

964
00:36:46,756 --> 0:36:48,876
那么就可以直接让 Metal 编译器

965
00:36:49,106 --> 0:36:51,356
运行 MO 选项

966
00:36:52,356 --> 0:36:56,186
但请记住只有在调试生成时 才启用它

967
00:36:56,186 --> 0:36:58,296
这样你就不会误把着色器源码

968
00:36:58,296 --> 0:37:00,526
和你的 App 一起推送出去

969
00:36:58,296 --> 0:37:00,526
和你的 App 一起推送出去

970
00:37:00,946 --> 0:37:02,256
好了

971
00:37:03,316 --> 0:37:07,726
让我们来总结一下今天的内容

972
00:37:07,916 --> 0:37:09,056
我们首先说了几何查看器

973
00:37:09,056 --> 0:37:11,866
它能让你

974
00:37:11,866 --> 0:37:13,686
查看所有与顶点

975
00:37:13,686 --> 0:37:16,266
相关的问题 并且调试

976
00:37:16,266 --> 0:37:18,376
画面问题 请记住

977
00:37:18,376 --> 0:37:19,646
首先要检查几何查看器

978
00:37:19,646 --> 0:37:21,276
确保在调试着色器前

979
00:37:21,276 --> 0:37:23,216
你的几何图形

980
00:37:23,216 --> 0:37:24,736
没有问题

981
00:37:25,476 --> 0:37:27,906
然后我们提到了着色器调试器

982
00:37:27,906 --> 0:37:30,096
这是一款能调试所有

983
00:37:30,096 --> 0:37:31,986
Metal 着色器的强大工具

984
00:37:32,656 --> 0:37:33,816
可以很好地修补漏洞

985
00:37:34,786 --> 0:37:36,546
让你了解和开发

986
00:37:36,546 --> 0:37:37,876
着色器

987
00:37:38,376 --> 0:37:40,956
通过着色器性能分析工具

988
00:37:41,486 --> 0:37:43,286
你甚至可以更进一步

989
00:37:43,416 --> 0:37:45,706
看到 GPU 正在用 A11 仿生芯片

990
00:37:45,706 --> 0:37:48,746
做什么

991
00:37:49,696 --> 0:37:51,786
如果想要了解更多信息

992
00:37:51,926 --> 0:37:52,526
请查看链接

993
00:37:53,606 --> 0:37:55,486
明天上午十点

994
00:37:55,486 --> 0:37:57,326
我们将谈谈 Metal 游戏

995
00:37:57,326 --> 0:37:59,226
性能优化方面 届时

996
00:37:59,226 --> 0:38:00,976
我们将谈论在游戏中

997
00:37:59,226 --> 0:38:00,976
我们将谈论在游戏中

998
00:38:00,976 --> 0:38:02,376
发现的常见

999
00:38:02,376 --> 0:38:04,506
性能问题和可供大家使用的

1000
00:38:04,506 --> 0:38:06,636
检测和修补问题的工具

1001
00:38:06,946 --> 0:38:07,236
谢谢大家 [ 掌声 ]
