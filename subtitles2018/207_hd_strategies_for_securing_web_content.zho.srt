1
00:00:07,516 --> 0:00:16,500
［ 音乐 ］

2
00:00:21,516 --> 0:00:26,896
［ 掌声 ］

3
00:00:27,396 --> 0:00:29,296
&gt;&gt; 大家好

4
00:00:29,296 --> 0:00:30,566
我叫 John Wilander

5
00:00:30,566 --> 0:00:32,216
是 Safari 浏览器和 Webkit 团队的工程师

6
00:00:32,216 --> 0:00:35,056
今天在这里

7
00:00:35,056 --> 0:00:37,006
我想介绍如何

8
00:00:37,006 --> 0:00:38,356
维护网络内容

9
00:00:38,846 --> 0:00:42,076
或者 我也喜欢称之为

10
00:00:42,076 --> 0:00:43,236
采取瑞典人的建议

11
00:00:45,016 --> 0:00:46,476
你可能会问自己

12
00:00:46,476 --> 0:00:48,796
网页内容 这个术语

13
00:00:48,796 --> 0:00:49,956
相当宽泛

14
00:00:50,296 --> 0:00:51,686
这场会议真的与我有关吗

15
00:00:52,586 --> 0:00:53,846
是的 与你有关

16
00:00:54,336 --> 0:00:57,826
首先 App 使用大量的网页内容

17
00:00:58,286 --> 0:01:00,566
用于广告 登录流程

18
00:00:58,286 --> 0:01:00,566
用于广告 登录流程

19
00:01:00,566 --> 0:01:02,636
和启动画面 

20
00:01:03,066 --> 0:01:04,325
或许你的部分 App

21
00:01:04,325 --> 0:01:06,236
正在使用 Safari View Controller

22
00:01:06,766 --> 0:01:08,146
你或许将整个 UI 部分

23
00:01:08,146 --> 0:01:12,756
呈现在网页视图中一些

24
00:01:12,756 --> 0:01:14,306
伴随网页 App 可能

25
00:01:14,306 --> 0:01:16,456
会在 Web 浏览器中呈现

26
00:01:16,456 --> 0:01:18,276
它们能共享内容 

27
00:01:18,696 --> 0:01:20,806
或提供跨 App 和 Web App

28
00:01:20,806 --> 0:01:22,226
的联合体验

29
00:01:22,786 --> 0:01:24,876
所以 这场会议确实为你量身定做

30
00:01:25,586 --> 0:01:26,986
安全十分重要

31
00:01:27,656 --> 0:01:28,936
你想要长久经营

32
00:01:29,096 --> 0:01:30,096
想提供最好的

33
00:01:30,096 --> 0:01:31,026
客户体验

34
00:01:31,296 --> 0:01:33,346
想获得竞争优势

35
00:01:33,926 --> 0:01:35,476
你想获得这种权利

36
00:01:35,476 --> 0:01:37,176
其他人违背就会

37
00:01:37,176 --> 0:01:39,086
走向衰落 而你被市场选择

38
00:01:40,246 --> 0:01:42,086
好了 我们今天要讨论什么呢

39
00:01:42,726 --> 0:01:44,986
首先我们来说一下

40
00:01:45,236 --> 0:01:47,506
传输安全

41
00:01:47,756 --> 0:01:49,786
在做其他工作前

42
00:01:49,786 --> 0:01:51,936
我要简单提及这方面的

43
00:01:51,936 --> 0:01:53,876
基本内容 这对于接下来很重要

44
00:01:54,406 --> 0:01:55,136
如果不能确保

45
00:01:55,136 --> 0:01:57,036
传输安全 那么其他的就更别提了

46
00:01:57,926 --> 0:02:00,646
然后 我们再说一下跨域锁定

47
00:01:57,926 --> 0:02:00,646
然后 我们再说一下跨域锁定

48
00:02:01,146 --> 0:02:03,976
基本上我会向你们

49
00:02:03,976 --> 0:02:05,426
展示一系列在 WebKit 及

50
00:02:05,426 --> 0:02:07,856
浏览器引擎中

51
00:02:07,856 --> 0:02:09,606
使用的技术

52
00:02:09,606 --> 0:02:12,426
这可以帮助你获得

53
00:02:12,726 --> 0:02:15,476
更安全的 Web 内容默认值

54
00:02:16,056 --> 0:02:17,396
我们希望为你选择

55
00:02:17,396 --> 0:02:19,186
但我们无法为你测试网站

56
00:02:19,186 --> 0:02:21,636
或网页内容

57
00:02:21,636 --> 0:02:23,346
因此我们需要你的加入

58
00:02:23,946 --> 0:02:25,686
或许 你会有疑问

59
00:02:25,686 --> 0:02:27,056
为什么我要

60
00:02:27,056 --> 0:02:28,326
关心这些安全机制

61
00:02:28,326 --> 0:02:30,226
我将向你们展示

62
00:02:30,226 --> 0:02:32,386
一些攻击场景

63
00:02:32,386 --> 0:02:34,546
并将其映射到安全技术上

64
00:02:34,616 --> 0:02:36,026
以便于你们明白

65
00:02:36,026 --> 0:02:37,716
它在哪里发挥作用

66
00:02:37,776 --> 0:02:39,746
以及它怎样保护

67
00:02:39,746 --> 0:02:40,596
你的网页内容

68
00:02:41,266 --> 0:02:42,966
所以 我们先来讲一讲

69
00:02:42,966 --> 0:02:44,476
传输安全

70
00:02:45,096 --> 0:02:46,876
这一点你应该很熟悉

71
00:02:47,486 --> 0:02:49,276
这与转移到

72
00:02:49,276 --> 0:02:51,196
HTTPS 和 WSS 有关

73
00:02:52,286 --> 0:02:54,376
WSS 适用于网络套接字

74
00:02:55,526 --> 0:02:58,306
现在 HTTP 和 WS

75
00:02:58,306 --> 0:03:00,386
这种纯文本等价物的

76
00:02:58,306 --> 0:03:00,386
这种纯文本等价物的

77
00:03:00,386 --> 0:03:02,916
持续存在并不是

78
00:03:02,986 --> 0:03:03,796
继续使用它们的借口

79
00:03:04,296 --> 0:03:05,686
你需要转移到安全传输

80
00:03:05,686 --> 0:03:07,866
因为这将

81
00:03:08,016 --> 0:03:09,936
确保你在浏览器

82
00:03:09,936 --> 0:03:11,396
或 App 中

83
00:03:11,396 --> 0:03:13,686
呈现的内容

84
00:03:13,686 --> 0:03:15,606
来自预期的服务器

85
00:03:15,606 --> 0:03:19,696
而且没有在传输中混淆内容

86
00:03:20,316 --> 0:03:22,876
因此 为使主要内容

87
00:03:22,876 --> 0:03:23,576
转移到 HTTPS

88
00:03:23,946 --> 0:03:24,626
这里有几项技术

89
00:03:24,626 --> 0:03:26,636
可以为你提供帮助

90
00:03:27,496 --> 0:03:28,756
你首先要做的

91
00:03:29,176 --> 0:03:31,116
除了主要内容移动到 HTTPS

92
00:03:31,256 --> 0:03:33,526
93
00:03:33,526 --> 0:03:35,236


94
00:03:35,236 --> 0:03:39,076
这是一个 HTTP 响应头

95
00:03:39,076 --> 0:03:40,636
可以传送到呈现引擎

96
00:03:40,636 --> 0:03:43,136
比如 WebKit 告诉它

97
00:03:43,136 --> 0:03:45,666
嘿 我的域名应一直

98
00:03:45,666 --> 0:03:47,296
通过 HTTPS 加载

99
00:03:47,816 --> 0:03:50,636
如果有来自我的 HTTP 请求

100
00:03:50,636 --> 0:03:52,436
只需自动为我

101
00:03:52,436 --> 0:03:54,306
升级到 HTTPS 即可

102
00:03:54,616 --> 0:03:56,066
请勿将纯文本

103
00:03:56,206 --> 0:03:57,996
连接到我的服务器

104
00:03:59,216 --> 0:04:00,756
另外你可以

105
00:03:59,216 --> 0:04:00,756
另外你可以

106
00:04:00,756 --> 0:04:02,486
告诉呈现引擎

107
00:04:02,486 --> 0:04:04,106
需要记忆多长时间

108
00:04:04,336 --> 0:04:05,916
所以 通常至少

109
00:04:05,916 --> 0:04:06,956
提前半年

110
00:04:08,426 --> 0:04:09,846
现在 你可能正在从其他

111
00:04:09,846 --> 0:04:11,546
不受控制的服务器

112
00:04:11,546 --> 0:04:12,966
加载内容

113
00:04:12,966 --> 0:04:14,536
而不是从你的域名加载

114
00:04:15,216 --> 0:04:16,916
还有一个你可以

115
00:04:16,916 --> 0:04:18,685
发送到浏览器引擎

116
00:04:18,685 --> 0:04:19,896
叫做“升级不安全请求”

117
00:04:19,896 --> 0:04:23,036
也是一个 HTTP 响应头

118
00:04:23,036 --> 0:04:25,076
它会给浏览器指令

119
00:04:25,076 --> 0:04:27,256
嘿 前进并且把其他所有链接

120
00:04:27,256 --> 0:04:28,796
也升级到内容中

121
00:04:28,826 --> 0:04:31,086
即使不是从我的服务器输出

122
00:04:31,086 --> 0:04:33,126
即使它们并没有

123
00:04:33,126 --> 0:04:35,406
设置严格的传输安全

124
00:04:36,356 --> 0:04:38,476
所以 这两样东西会

125
00:04:38,556 --> 0:04:40,836
自动升级到安全传输

126
00:04:42,166 --> 0:04:43,516
另一件需要做的事就是

127
00:04:43,516 --> 0:04:46,646
确保你的 Cookie 的安全

128
00:04:46,866 --> 0:04:48,346
这是你在设置 Cookie 头中

129
00:04:48,346 --> 0:04:49,486
添加的属性

130
00:04:49,846 --> 0:04:51,606
分号 安全

131
00:04:52,226 --> 0:04:54,376
这意味着你在告诉

132
00:04:54,476 --> 0:04:56,666
网络堆叠这个 Cookie

133
00:04:56,666 --> 0:04:58,716
只能通过安全传输

134
00:04:58,716 --> 0:04:59,716
进行发送

135
00:05:00,086 --> 0:05:01,686
如果由于某种原因

136
00:05:01,766 --> 0:05:03,696
我的服务器出现纯文本请求

137
00:05:03,936 --> 0:05:06,066
请不要发送 Cookie

138
00:05:06,836 --> 0:05:08,336
因为你应该使用安全的传输

139
00:05:08,336 --> 0:05:10,186
所有的 Cookie 都应该

140
00:05:10,186 --> 0:05:11,606
标记为安全

141
00:05:12,606 --> 0:05:14,846
最后 你要做的是

142
00:05:14,846 --> 0:05:16,316
将安全传输

143
00:05:16,346 --> 0:05:17,886
特定于 App

144
00:05:18,476 --> 0:05:19,566
你可能听说过 App 传输安全

145
00:05:19,566 --> 0:05:21,246
或者 ATS

146
00:05:21,246 --> 0:05:24,266
这是 iOS App 的默认行为

147
00:05:24,266 --> 0:05:26,116
这意味着

148
00:05:26,116 --> 0:05:27,996
只能为网络流量

149
00:05:27,996 --> 0:05:29,436
使用安全传输

150
00:05:30,496 --> 0:05:32,156
现在 你可以做出选择

151
00:05:32,156 --> 0:05:33,836
在信息列表中表明

152
00:05:33,836 --> 0:05:35,606
嘿 对于网页内容

153
00:05:35,686 --> 0:05:39,536
我仍然想做不安全请求 不要这样做

154
00:05:40,136 --> 0:05:42,276
你应在信息列表中说“不”

155
00:05:42,316 --> 0:05:44,096
尤其是对于

156
00:05:44,096 --> 0:05:45,926
任意网页内容加载

157
00:05:46,976 --> 0:05:49,066
好了 现在我们已经确保传输安全

158
00:05:49,386 --> 0:05:50,136
我们继续

159
00:05:50,476 --> 0:05:51,226
现在来看

160
00:05:51,316 --> 0:05:52,786
跨域锁定

161
00:05:53,716 --> 0:05:54,756
将其称为“锁定”

162
00:05:54,756 --> 0:05:57,106
是因为它真的能为你的

163
00:05:57,106 --> 0:06:00,276
网页内容选择更明智

164
00:05:57,106 --> 0:06:00,276
网页内容选择更明智

165
00:06:00,276 --> 0:06:02,906
更安全的默认设置

166
00:06:03,286 --> 0:06:05,186
我们将其锁定到

167
00:06:05,186 --> 0:06:06,306
它本该如此的状态

168
00:06:06,306 --> 0:06:08,446
然后你可以打开

169
00:06:08,446 --> 0:06:10,946
具体想要做的东西

170
00:06:11,806 --> 0:06:13,836
现在来看一下

171
00:06:13,836 --> 0:06:15,846
什么是跨域加载

172
00:06:16,186 --> 0:06:17,336
我们要锁定什么

173
00:06:18,076 --> 0:06:20,106
网页技术有这个

174
00:06:20,216 --> 0:06:21,956
强大的功能

175
00:06:22,066 --> 0:06:24,036
你可以将不同服务器及

176
00:06:24,096 --> 0:06:25,676
不同来源的内容

177
00:06:25,676 --> 0:06:26,266
交织在一起

178
00:06:27,126 --> 0:06:28,586
如果你愿意的话

179
00:06:28,586 --> 0:06:29,036
不同域名也可以

180
00:06:30,056 --> 0:06:32,136
例如图像

181
00:06:32,746 --> 0:06:34,356
你可以将任何

182
00:06:34,356 --> 0:06:36,746
网络服务器的图像加载到

183
00:06:36,746 --> 0:06:37,586
网页内容中

184
00:06:37,586 --> 0:06:38,696
这就是一种跨域加载

185
00:06:39,546 --> 0:06:42,066
你也可以从其他服务器上加载脚本

186
00:06:42,766 --> 0:06:44,696
有趣的是 这些脚本

187
00:06:44,886 --> 0:06:46,556
实际上执行的是与你自己脚本

188
00:06:46,556 --> 0:06:48,746
相同的权限和特权

189
00:06:48,746 --> 0:06:50,636
因此 你需要

190
00:06:50,636 --> 0:06:52,246
谨慎考虑从其他服务器上

191
00:06:52,246 --> 0:06:53,926
卸载哪些脚本

192
00:06:54,356 --> 0:06:56,996
它们或多或少都拥有你的网页内容

193
00:06:57,286 --> 0:06:59,136
用你的同等权限去执行

194
00:07:00,126 --> 0:07:02,536
再例如 iframes

195
00:07:02,786 --> 0:07:05,506
可用来嵌入其他服务器

196
00:07:05,506 --> 0:07:06,416
的完整页面

197
00:07:06,806 --> 0:07:08,246
跨域意思是

198
00:07:08,486 --> 0:07:09,436
来自不同域名

199
00:07:09,926 --> 0:07:11,146
以上就是三个

200
00:07:11,206 --> 0:07:12,826
跨域加载的例子

201
00:07:13,386 --> 0:07:15,616
现在 我们已经建立了

202
00:07:15,616 --> 0:07:18,046
安全机制

203
00:07:18,046 --> 0:07:20,096
一个超过 20 年的网页安全机制

204
00:07:20,146 --> 0:07:21,606
为这些跨域加载

205
00:07:21,656 --> 0:07:22,526
提供基本的保护

206
00:07:22,836 --> 0:07:24,496
它也被称为

207
00:07:24,496 --> 0:07:26,356
同源策略

208
00:07:27,046 --> 0:07:28,586
但有所不同的是

209
00:07:28,586 --> 0:07:30,196
在这里你能得到

210
00:07:30,196 --> 0:07:31,206
真实域名的例子

211
00:07:31,556 --> 0:07:33,956
你得到了加载图像的案例

212
00:07:33,956 --> 0:07:37,096
你还拥有了

213
00:07:37,226 --> 0:07:39,336
加载脚本的 CDN

214
00:07:39,916 --> 0:07:41,226
另外你可能还会得到一个社交小部件

215
00:07:41,226 --> 0:07:42,926
一个 iframe

216
00:07:42,926 --> 0:07:44,166
来自 social.example 

217
00:07:44,896 --> 0:07:46,856
而且 我想说的是这里的

218
00:07:46,856 --> 0:07:49,076
.example 我确信

219
00:07:49,076 --> 0:07:51,026
不是在讨论真实的网站

220
00:07:51,406 --> 0:07:52,666
换个更易理解的说法

221
00:07:52,666 --> 0:07:54,396
你可以将其看作 .com 或者 .org

222
00:07:55,566 --> 0:07:56,446
不管怎样 这些都是

223
00:07:56,446 --> 0:07:58,306
跨源加载和

224
00:07:58,306 --> 0:08:01,236
同源策略

225
00:07:58,306 --> 0:08:01,236
同源策略

226
00:08:01,236 --> 0:08:02,836
能够跟踪加载图像

227
00:08:02,836 --> 0:08:04,096
加载脚本

228
00:08:04,096 --> 0:08:05,586
以及 iframe 的位置

229
00:08:05,586 --> 0:08:07,446
因此它能够

230
00:08:07,446 --> 0:08:08,756
提供基本的保护

231
00:08:09,326 --> 0:08:12,046
这种基本保护意味着

232
00:08:12,046 --> 0:08:14,366
在这个例子中 你的页面不能

233
00:08:14,366 --> 0:08:16,426
从 social.example 进入到 iframe

234
00:08:16,426 --> 0:08:21,126
不能读取其字节及内容 

235
00:08:21,246 --> 0:08:22,416
也不能写入内容

236
00:08:22,706 --> 0:08:24,106
同源策略是

237
00:08:24,106 --> 0:08:25,826
防御 网页的这部分内容

238
00:08:25,826 --> 0:08:27,066
实际上来自其他的

239
00:08:27,066 --> 0:08:28,626
服务器 你不能

240
00:08:28,626 --> 0:08:29,866
直接进入到那里

241
00:08:29,866 --> 0:08:31,996
修改内容或者

242
00:08:31,996 --> 0:08:33,366
读取用户刚好

243
00:08:33,366 --> 0:08:34,905
输入的内容

244
00:08:35,496 --> 0:08:37,596
同源策略

245
00:08:37,596 --> 0:08:38,905
简单来说

246
00:08:39,275 --> 0:08:41,696
就是在一个浏览器中匹配两个页面 两个选项卡

247
00:08:42,236 --> 0:08:43,596
一个选项卡不能

248
00:08:43,596 --> 0:08:45,546
进入另一个选项卡去看

249
00:08:45,546 --> 0:08:47,056
用户此时此地的内容

250
00:08:47,876 --> 0:08:49,176
同源策略

251
00:08:49,746 --> 0:08:53,500
也在那里高效地运转和工作

252
00:08:54,726 --> 0:08:55,756
下一个 锁定

253
00:08:55,846 --> 0:08:57,806
我们如何准确地锁定

254
00:08:58,116 --> 0:08:59,116
我们已经有了

255
00:08:59,116 --> 0:09:01,176
同源策略 但还不够

256
00:08:59,116 --> 0:09:01,176
同源策略 但还不够

257
00:09:01,546 --> 0:09:04,726
所以需要选择一些更多的默认值

258
00:09:05,106 --> 0:09:07,016
从子资源的

259
00:09:07,016 --> 0:09:08,716
完整性开始 我之后

260
00:09:08,756 --> 0:09:09,956
会提到这一点

261
00:09:10,536 --> 0:09:12,256
这只是脚本标记的

262
00:09:12,256 --> 0:09:14,006
简单更改

263
00:09:15,126 --> 0:09:16,426
第二部分是

264
00:09:16,426 --> 0:09:17,376
内容安全策略

265
00:09:17,526 --> 0:09:19,056
它能够为你的真格页面

266
00:09:19,056 --> 0:09:20,576
提供全面的安全策略

267
00:09:20,576 --> 0:09:22,366
你可以说

268
00:09:22,366 --> 0:09:24,236
嘿 我只想从这里加载脚本

269
00:09:24,546 --> 0:09:25,976
我不想从其他的服务器上

270
00:09:25,976 --> 0:09:27,596
得到等框架等等

271
00:09:27,696 --> 0:09:30,686
我们会看到 第三部分是简单的

272
00:09:30,686 --> 0:09:32,496
服务器配置

273
00:09:32,986 --> 0:09:35,076
这些是发出的 HTTP 响应头

274
00:09:35,136 --> 0:09:36,666
并告诉浏览器引擎说

275
00:09:36,666 --> 0:09:38,856
嘿 我想要更安全的默认配置

276
00:09:38,856 --> 0:09:40,466
我不想要这些

277
00:09:40,466 --> 0:09:42,366
旧的传统 API

278
00:09:42,366 --> 0:09:43,496
虽然你一直支持

279
00:09:43,496 --> 0:09:44,206
但我并不需要

280
00:09:44,426 --> 0:09:47,926
请帮助我 那么 让我们一起深入其中

281
00:09:47,926 --> 0:09:49,566
了解子资源的完整性

282
00:09:50,696 --> 0:09:52,746
现在从 CDN

283
00:09:52,746 --> 0:09:54,416
即内容分发网络

284
00:09:54,416 --> 0:09:55,906
加载该框架

285
00:09:56,366 --> 0:09:57,826
是非常合理的方式

286
00:09:58,826 --> 0:10:01,916
这个脚本标签只包含

287
00:09:58,826 --> 0:10:01,916
这个脚本标签只包含

288
00:10:01,966 --> 0:10:04,666
URL 来获取脚本 对吗

289
00:10:05,446 --> 0:10:06,536
正如我所提到的 

290
00:10:06,536 --> 0:10:09,686
你现在正在依靠 CDN 来提供

291
00:10:09,686 --> 0:10:10,956
正确的脚本

292
00:10:10,956 --> 0:10:12,546
这保证你的网页内容

293
00:10:12,546 --> 0:10:13,806
按预期方式运行

294
00:10:14,846 --> 0:10:16,346
但实际上 你要知道

295
00:10:16,346 --> 0:10:17,966
如果它们决定碰撞该版本

296
00:10:17,966 --> 0:10:19,066
或是服务器出了问题

297
00:10:19,066 --> 0:10:20,296
它们将会给你

298
00:10:20,296 --> 0:10:21,256
发送错误脚本

299
00:10:21,256 --> 0:10:24,016
你的网页内容可能会瘫痪

300
00:10:24,646 --> 0:10:25,896
有可能出错

301
00:10:25,896 --> 0:10:27,576
也有可能无法按照预期方式工作

302
00:10:28,026 --> 0:10:29,646
你知道自己期待什么脚本

303
00:10:29,646 --> 0:10:31,626
但是当你只是像这样

304
00:10:31,626 --> 0:10:32,716
发送一个脚本标签时

305
00:10:32,716 --> 0:10:34,186
就像这样

306
00:10:35,006 --> 0:10:36,756
你的行为就只是

307
00:10:36,756 --> 0:10:39,436
告诉浏览器

308
00:10:39,436 --> 0:10:42,336
回到 JavaScript 中执行它

309
00:10:43,036 --> 0:10:45,056
换种更好的方式说就是

310
00:10:45,376 --> 0:10:46,526
不 我想确保这是我

311
00:10:46,526 --> 0:10:47,986
期待的脚本

312
00:10:48,546 --> 0:10:49,996
不过 你可以在脚本标记中

313
00:10:49,996 --> 0:10:52,766
使用完整性属性

314
00:10:53,366 --> 0:10:54,916
在这里 你提供了一个校验和

315
00:10:54,916 --> 0:10:56,496
这种情况下

316
00:10:56,496 --> 0:10:59,466
用算法 sha256 表示

317
00:10:59,466 --> 0:11:01,316
这是我希望从我的 CDN 里

318
00:10:59,466 --> 0:11:01,316
这是我希望从我的 CDN 里

319
00:11:01,316 --> 0:11:04,176
得到的校验和

320
00:11:04,176 --> 0:11:05,816
而且只有当我得到

321
00:11:05,816 --> 0:11:07,946
与校验和匹配的东西时

322
00:11:07,946 --> 0:11:08,576
你才能够执行它

323
00:11:09,266 --> 0:11:11,036
因此 浏览器引擎会在

324
00:11:11,036 --> 0:11:13,556
执行代码前检查和比较

325
00:11:13,556 --> 0:11:15,976
确保该校验和

326
00:11:17,196 --> 0:11:19,186
那么 如果不匹配会怎样呢

327
00:11:19,246 --> 0:11:21,506
如果碰撞到版本

328
00:11:21,506 --> 0:11:22,606
或是哪里出了问题

329
00:11:22,606 --> 0:11:23,406
又或是我得到错误脚本怎么办呢

330
00:11:24,096 --> 0:11:26,216
那么我的网页就出现故障 无法运行

331
00:11:26,666 --> 0:11:28,056
你添加一个校验

332
00:11:28,276 --> 0:11:29,906
这种情况下 你已经加载

333
00:11:29,906 --> 0:11:31,266
或尝试加载一个框架

334
00:11:31,736 --> 0:11:33,336
如果经检查框架加载正确后

335
00:11:33,336 --> 0:11:35,376
我现在就可在 dom

336
00:11:35,376 --> 0:11:36,266
中得到对象

337
00:11:36,856 --> 0:11:39,246
如果错误

338
00:11:39,246 --> 0:11:41,516
那么就从自己控制的服务器加载

339
00:11:41,516 --> 0:11:44,126
并且不做任何更改

340
00:11:44,896 --> 0:11:47,496
虽然这样可能会降低性能

341
00:11:47,496 --> 0:11:49,266
但至少网页内容

342
00:11:49,266 --> 0:11:50,986
或是网站仍然可以运行

343
00:11:51,986 --> 0:11:53,886
好的 以上就是子资源完整性

344
00:11:54,336 --> 0:11:55,696
现在我们来看

345
00:11:55,696 --> 0:11:56,866
内容安全策略

346
00:11:57,486 --> 0:11:59,186
我提过 这就像

347
00:11:59,186 --> 0:12:00,616
为页面设置一个策略

348
00:11:59,186 --> 0:12:00,616
为页面设置一个策略

349
00:12:00,616 --> 0:12:02,596
比如这里应该允许什么

350
00:12:02,626 --> 0:12:03,876
实际上我将其看作一个

351
00:12:03,946 --> 0:12:05,176
架构策略

352
00:12:05,176 --> 0:12:06,856
如果你是一名软件工程师

353
00:12:07,336 --> 0:12:09,326
你会想追踪相依性

354
00:12:09,326 --> 0:12:10,736
我可以在这里做什么

355
00:12:10,736 --> 0:12:12,306
我可以加载什么

356
00:12:12,346 --> 0:12:13,106
不能加载什么

357
00:12:14,586 --> 0:12:17,766
因此 这又是一个 HTTP 响应头

358
00:12:18,116 --> 0:12:19,386
所以 当你从服务器

359
00:12:19,446 --> 0:12:21,636
发送一个页面时

360
00:12:21,726 --> 0:12:23,356
你加一个响应头进去

361
00:12:23,356 --> 0:12:24,936
并说 嘿 我要运行一个

362
00:12:24,936 --> 0:12:26,496
内容安全策略

363
00:12:26,826 --> 0:12:28,376
我将控制我的

364
00:12:28,376 --> 0:12:29,736
网页内容

365
00:12:30,626 --> 0:12:32,476
然后你开始

366
00:12:32,626 --> 0:12:35,286
从远程服务器加载任何类型

367
00:12:35,286 --> 0:12:36,856
的内容默认源

368
00:12:36,856 --> 0:12:38,956
是我自己

369
00:12:39,476 --> 0:12:42,306
只能从我的服务器默认加载

370
00:12:42,976 --> 0:12:44,466
现在 你已经完全锁定它

371
00:12:44,466 --> 0:12:46,866
如果页面中

372
00:12:46,866 --> 0:12:48,456
有任何类型的内容加载

373
00:12:48,456 --> 0:12:51,816
试图从不属于你的服务器拉进来

374
00:12:51,816 --> 0:12:53,576
它会被拒绝

375
00:12:53,576 --> 0:12:56,136
因为 WebKit 会以与你设置的策略

376
00:12:56,136 --> 0:12:58,426
不匹配的原因而拒绝

377
00:12:59,716 --> 0:13:00,636
正如你们看到的

378
00:12:59,716 --> 0:13:00,636
正如你们看到的

379
00:13:00,636 --> 0:13:01,206
我在这儿做了注释

380
00:13:01,206 --> 0:13:02,016
没有内联

381
00:13:02,136 --> 0:13:04,526
这也是默认行为的一部分

382
00:13:04,776 --> 0:13:06,086
一旦你这样设置

383
00:13:06,086 --> 0:13:08,496
也就是说没有内联脚本

384
00:13:08,726 --> 0:13:10,726
只从文件加载脚本

385
00:13:11,276 --> 0:13:12,606
这就是为什么我一直认为

386
00:13:12,606 --> 0:13:14,116
它是一个架构策略

387
00:13:14,366 --> 0:13:15,976
因为你将逻辑分为文件

388
00:13:15,976 --> 0:13:21,246
与标记和样式化分开来

389
00:13:21,316 --> 0:13:23,946
这些样式也在文件中

390
00:13:24,166 --> 0:13:25,046
CSS 文件

391
00:13:26,066 --> 0:13:29,636
好的 现在你想从 cdn.example 中

392
00:13:29,636 --> 0:13:31,686
加载脚本

393
00:13:31,686 --> 0:13:33,176
如果只使用默认源自带

394
00:13:33,176 --> 0:13:35,976
那么这将会被锁定

395
00:13:35,976 --> 0:13:37,776
对吗 就无法进行远程脚本加载

396
00:13:38,126 --> 0:13:39,776
在内容安全策略中

397
00:13:39,776 --> 0:13:41,856
有个白名单机制

398
00:13:42,396 --> 0:13:44,356
你只要说 嘿 脚本源

399
00:13:44,566 --> 0:13:47,256
打开 can.example

400
00:13:47,366 --> 0:13:49,246
因为我想从那里加载脚本

401
00:13:49,786 --> 0:13:51,066
现在你可以从自己的服务器

402
00:13:51,066 --> 0:13:53,716
和 cdn.example 中加载

403
00:13:53,716 --> 0:13:54,466
但在其他地方无法加载

404
00:13:55,866 --> 0:13:57,206
你可能想要在 iframe 中

405
00:13:57,206 --> 0:14:00,326
有社交媒体插件

406
00:13:57,206 --> 0:14:00,326
有社交媒体插件

407
00:14:00,326 --> 0:14:02,006
一种小插件

408
00:14:02,406 --> 0:14:04,306
你可以添加一个框架源代码指令

409
00:14:04,306 --> 0:14:05,956
说我想从 social.example 中

410
00:14:05,956 --> 0:14:07,366
加载 iframes

411
00:14:07,366 --> 0:14:10,036
但是没有其他人

412
00:14:10,036 --> 0:14:12,076
在我的页面上有 iframe

413
00:14:12,596 --> 0:14:13,946
这样 你就掌握了这一点

414
00:14:14,626 --> 0:14:16,346
甚至当你的内容

415
00:14:16,346 --> 0:14:18,376
被加载到别人页面上的 iframe 时

416
00:14:18,376 --> 0:14:21,856
也会有相反的指令

417
00:14:22,316 --> 0:14:24,766
在这个例子中 news.example

418
00:14:24,766 --> 0:14:27,066
正在加载一个 iframe 中的内容

419
00:14:27,516 --> 0:14:29,556
你可以发出指令

420
00:14:29,556 --> 0:14:30,576
这是内容安全策略框架中

421
00:14:30,576 --> 0:14:33,626
最后一条指令

422
00:14:34,026 --> 0:14:35,516
这是告诉浏览器

423
00:14:35,516 --> 0:14:38,686
嘿 检查它的框架

424
00:14:38,926 --> 0:14:40,666
一直到首页

425
00:14:40,666 --> 0:14:42,726
它们都必须在

426
00:14:42,726 --> 0:14:44,666
我允许的清单上

427
00:14:45,116 --> 0:14:46,806
所以 在这种情况下 你的网页

428
00:14:46,806 --> 0:14:48,926
内容已经表示 news.example

429
00:14:48,926 --> 0:14:50,346
我和它们有交易往来

430
00:14:50,676 --> 0:14:51,816
他们可以在 iframe 中

431
00:14:51,816 --> 0:14:52,926
有我的内容

432
00:14:54,126 --> 0:14:55,916
这是相当多的 所以 让我们

433
00:14:55,916 --> 0:14:58,026
逐行快速回顾一下

434
00:14:58,026 --> 0:14:59,936
这样我们就知道 这说的是什么了

435
00:15:00,396 --> 0:15:02,036
内容安全策略

436
00:15:02,036 --> 0:15:03,966
从默认源自带开始

437
00:15:04,296 --> 0:15:05,506
锁定一切

438
00:15:05,506 --> 0:15:06,616
所有将用

439
00:15:06,616 --> 0:15:08,476
源属性加载的东西

440
00:15:08,476 --> 0:15:10,586
都像从服务器加载

441
00:15:10,586 --> 0:15:12,646
需要我的出处以及域名

442
00:15:13,476 --> 0:15:14,666
然后打开

443
00:15:15,076 --> 0:15:17,346
对于脚本 你可以

444
00:15:17,346 --> 0:15:19,716
添加允许使用哪些脚本

445
00:15:20,786 --> 0:15:23,366
你可以决定允许自己从哪里

446
00:15:23,366 --> 0:15:24,746
加载框架

447
00:15:25,436 --> 0:15:26,496
然后将它们列入白名单

448
00:15:26,696 --> 0:15:28,526
最后 如果你打算

449
00:15:28,526 --> 0:15:30,156
在别人的页面中

450
00:15:30,156 --> 0:15:32,026
使用 iframe 

451
00:15:32,026 --> 0:15:35,726
可以将其放在框架指令的白名单上

452
00:15:36,926 --> 0:15:38,986
好的 这就是内容安全策略

453
00:15:39,286 --> 0:15:42,256
它还有更多内容

454
00:15:42,256 --> 0:15:44,276
我们也会在

455
00:15:44,276 --> 0:15:46,346
一些攻击场景中

456
00:15:46,346 --> 0:15:47,646
看到这些东西的特点

457
00:15:48,986 --> 0:15:51,476
下面我们来看一下 Cookie

458
00:15:51,916 --> 0:15:53,616
事实上在网络兴起时

459
00:15:53,616 --> 0:15:56,456
人们将 Cookie 称为

460
00:15:56,536 --> 0:15:58,426
“魔力 Cookie”

461
00:15:58,426 --> 0:16:00,476
它真的很神奇

462
00:15:58,426 --> 0:16:00,476
它真的很神奇

463
00:16:00,476 --> 0:16:01,666
可以用来做很多事情

464
00:16:02,286 --> 0:16:03,746
也许最敏感的是它们对

465
00:16:03,746 --> 0:16:06,126
用户进行认证

466
00:16:06,126 --> 0:16:08,196
一旦认证登录

467
00:16:08,196 --> 0:16:09,266
你就会得到一个

468
00:16:09,266 --> 0:16:11,296
Cookie 保存会话

469
00:16:11,666 --> 0:16:13,806
这个程序 如果它被移动

470
00:16:13,806 --> 0:16:15,476
或被盗 并且被移动到

471
00:16:15,476 --> 0:16:17,366
另一个浏览器引擎中

472
00:16:17,366 --> 0:16:19,446
很多时候可以模仿该用户

473
00:16:19,886 --> 0:16:21,636
所以说 你真的需要保护好你的 Cookie

474
00:16:22,156 --> 0:16:23,686
就像我提过的

475
00:16:23,686 --> 0:16:25,376
你应该标记其安全

476
00:16:25,376 --> 0:16:26,796
以便于永远不会泄露

477
00:16:26,796 --> 0:16:27,706
纯文本请求

478
00:16:28,216 --> 0:16:29,636
不过 还有更多的事要做 对吗

479
00:16:30,576 --> 0:16:34,436
来看 HttpOnly Cookie

480
00:16:34,706 --> 0:16:36,736
这是个相当古老的技术

481
00:16:37,316 --> 0:16:38,936
我想它已经有至少

482
00:16:38,936 --> 0:16:42,496
15 年左右的历史了

483
00:16:42,696 --> 0:16:45,376
你可能很熟悉

484
00:16:45,376 --> 0:16:47,236
web API document.Cookie

485
00:16:47,876 --> 0:16:50,146
这是 JavaScript

486
00:16:50,496 --> 0:16:51,826
读取和写入 Cookie 的一种方式

487
00:16:53,016 --> 0:16:55,206
JavaScript 功能强大

488
00:16:55,336 --> 0:16:56,606
而且 就像我提到的

489
00:16:56,606 --> 0:16:57,976
如果你从其他服务器加载 JavaScript

490
00:16:58,026 --> 0:16:59,896
就可以通过这个 API

491
00:16:59,896 --> 0:17:01,886
访问所有用户的 Cookie

492
00:16:59,896 --> 0:17:01,886
访问所有用户的 Cookie

493
00:17:03,316 --> 0:17:05,106
你不能让它们拥有

494
00:17:05,106 --> 0:17:06,136
这么多权限

495
00:17:06,246 --> 0:17:07,496
相反 你应该保护你的

496
00:17:07,496 --> 0:17:08,816
Cookie 尤其是你的

497
00:17:08,816 --> 0:17:10,746
身份验证 Cookie

498
00:17:10,746 --> 0:17:12,736
它实际上是以用户登录的方式

499
00:17:12,736 --> 0:17:15,636
方法是将其标记为 HttpOnly

500
00:17:16,455 --> 0:17:18,526
意思是这个 Cookie

501
00:17:18,526 --> 0:17:19,796
你看到的是设置

502
00:17:19,796 --> 0:17:21,036
Cookie 头文件

503
00:17:21,036 --> 0:17:23,236
我们只发送 HTTP

504
00:17:23,236 --> 0:17:25,256
这意味着不在 API 中 

505
00:17:25,506 --> 0:17:26,986
暴露这个 Cookie

506
00:17:27,836 --> 0:17:30,136
因此 JavaScript 现在看不到

507
00:17:30,136 --> 0:17:31,876
Cookie 当然也不能

508
00:17:31,936 --> 0:17:34,316
篡改 盗取或是操纵它

509
00:17:34,936 --> 0:17:38,016
所以 这是你应该做的

510
00:17:38,186 --> 0:17:40,376
还有另一件事

511
00:17:40,376 --> 0:17:43,766
关于版本的新技术 SameSite Cookie

512
00:17:44,496 --> 0:17:45,916
同样 当你在浏览器中

513
00:17:45,916 --> 0:17:47,486
设置 Cookie 头时

514
00:17:47,486 --> 0:17:49,696
将其设置在 Cookie 头上

515
00:17:50,406 --> 0:17:52,216
看这里 我得到了相同的

516
00:17:52,216 --> 0:17:54,076
严格的站点属性

517
00:17:54,656 --> 0:17:56,356
这里也有一个松散的版本

518
00:17:56,356 --> 0:17:58,596
但基本上用于

519
00:17:58,596 --> 0:18:00,436
这个特定的 Cookie

520
00:17:58,596 --> 0:18:00,436
这个特定的 Cookie

521
00:18:00,436 --> 0:18:02,976
前提是我是页面拥有者

522
00:18:02,976 --> 0:18:04,446
是主页面

523
00:18:04,446 --> 0:18:06,946
而不是嵌入的

524
00:18:07,406 --> 0:18:08,946
当我拥有整个用户体验时

525
00:18:08,946 --> 0:18:10,906
我就有了整个 Web 视图

526
00:18:10,906 --> 0:18:12,816
然后发送到 Cookie

527
00:18:13,836 --> 0:18:16,606
所以 在嵌入式案例中

528
00:18:16,606 --> 0:18:18,016
如果你的 Web 内容

529
00:18:18,016 --> 0:18:19,386
由不信任的人嵌入

530
00:18:19,386 --> 0:18:24,266
SameSite Cookie 将不会被发送

531
00:18:24,266 --> 0:18:24,946
且你的服务器也能检测到这一点

532
00:18:25,036 --> 0:18:27,516
我没有得到 SameSite Cookie 

533
00:18:27,516 --> 0:18:29,576
所以要么是用户没有

534
00:18:29,576 --> 0:18:31,086
登录 要么是我正在被嵌入

535
00:18:31,086 --> 0:18:34,866
我不能允许这样的事发生

536
00:18:34,866 --> 0:18:36,966
比如 一个敏感的处理

537
00:18:37,886 --> 0:18:40,376
所以 要控制

538
00:18:40,376 --> 0:18:42,826
被嵌入 SameSite Cookie

539
00:18:43,696 --> 0:18:46,336
好了 跨域锁定

540
00:18:46,436 --> 0:18:47,206
现在我们来看一看

541
00:18:47,406 --> 0:18:49,446
真正的全新技术

542
00:18:49,796 --> 0:18:51,706
WebKit 首先执行

543
00:18:51,706 --> 0:18:53,726
这两个新的响应头

544
00:18:54,236 --> 0:18:55,736
它们都是关于

545
00:18:55,736 --> 0:18:57,376
限制谁来加载

546
00:18:57,376 --> 0:18:58,296
你的资源

547
00:18:58,716 --> 0:19:00,686
跨域资源策略

548
00:18:58,716 --> 0:19:00,686
跨域资源策略

549
00:19:02,306 --> 0:19:03,366
我们之前提到过

550
00:19:03,426 --> 0:19:05,446
图像和脚本

551
00:19:05,446 --> 0:19:06,506
这两种类型的内容

552
00:19:06,506 --> 0:19:09,016
允许跨源加载

553
00:19:09,696 --> 0:19:11,006
自网络兴起以来

554
00:19:11,076 --> 0:19:13,006
它们就一直存在

555
00:19:13,006 --> 0:19:17,046
因此从来没有一个真正的机制说 嘿

556
00:19:17,046 --> 0:19:18,586
真的不想让其他站点

557
00:19:18,586 --> 0:19:21,506
加载我的脚本或图像

558
00:19:22,396 --> 0:19:24,966
我可以只是自己加载它们吗

559
00:19:25,806 --> 0:19:27,106
不行 我们在网上有这个东西

560
00:19:27,106 --> 0:19:28,936
任何人在任何服务器上

561
00:19:28,936 --> 0:19:30,166
都可以加载图像和脚本

562
00:19:31,236 --> 0:19:33,146
现在 我们提供给你

563
00:19:33,146 --> 0:19:35,206
一个控制器来告诉浏览器

564
00:19:35,206 --> 0:19:36,326
嘿 我不想要这个

565
00:19:36,496 --> 0:19:39,276
这就被称为跨域资源策略

566
00:19:39,966 --> 0:19:41,576
在这个特殊的例子里

567
00:19:41,626 --> 0:19:43,006
我给它的指令

568
00:19:43,236 --> 0:19:46,446
是一样的 意味着只有我自己的网站

569
00:19:46,966 --> 0:19:47,646
可以加载

570
00:19:47,646 --> 0:19:49,856
只有当我的域名是

571
00:19:49,856 --> 0:19:52,446
主页面域并且我拉入

572
00:19:52,446 --> 0:19:54,386
这个图像时 才会将

573
00:19:54,386 --> 0:19:56,136
图像加载到网页内容处理

574
00:19:56,426 --> 0:19:57,616
这里 脚本也是同样的道理

575
00:19:58,106 --> 0:19:59,776
所以 当其他人

576
00:19:59,776 --> 0:20:01,666
尝试跨域加载

577
00:19:59,776 --> 0:20:01,666
尝试跨域加载

578
00:20:01,666 --> 0:20:03,566
你的图像或是脚本

579
00:20:04,006 --> 0:20:05,346
且你正在发送这个响应头时

580
00:20:05,346 --> 0:20:07,776
这些内容将不会被加载

581
00:20:09,346 --> 0:20:10,426
所以 这会让你控制住自己

582
00:20:10,636 --> 0:20:11,716
这是一种新技术

583
00:20:12,786 --> 0:20:14,596
最后 在跨域锁定中

584
00:20:14,596 --> 0:20:15,736
我们获得了

585
00:20:15,736 --> 0:20:18,046
跨域窗口策略

586
00:20:18,566 --> 0:20:19,696
现在我们真的陷入了

587
00:20:19,696 --> 0:20:21,726
早前的旧的 API 中

588
00:20:22,226 --> 0:20:24,426
你可能很熟悉

589
00:20:24,456 --> 0:20:27,206
在一个新窗口打开

590
00:20:27,236 --> 0:20:28,626
其他人的页面

591
00:20:28,626 --> 0:20:30,246
或是你自己的页面

592
00:20:31,116 --> 0:20:32,736
不同于你点击的

593
00:20:32,736 --> 0:20:34,536
常规链接导航

594
00:20:34,536 --> 0:20:36,696
或是在同一选项卡中打开

595
00:20:36,696 --> 0:20:38,106
新标签和导航

596
00:20:38,196 --> 0:20:39,826
而是打开一个全新的窗口

597
00:20:40,746 --> 0:20:42,356
在过去的日子里 我们甚至可以

598
00:20:42,356 --> 0:20:44,916
看到丑陋的弹出窗口

599
00:20:44,916 --> 0:20:46,866
以及这类其他东西

600
00:20:46,866 --> 0:20:49,896
但这是旧的 API

601
00:20:50,086 --> 0:20:51,016
window. Open

602
00:20:51,616 --> 0:20:53,636
而且还有一些奇怪的事情发生

603
00:20:54,776 --> 0:20:56,936
所以 如果你的内容是由

604
00:20:56,936 --> 0:21:00,016
其他人打开的 看起来

605
00:20:56,936 --> 0:21:00,016
其他人打开的 看起来

606
00:21:00,016 --> 0:21:03,326
就像是用户刚刚访问过我的网站

607
00:21:03,326 --> 0:21:04,936
我的 SameSite Cookie 一切正常

608
00:21:05,606 --> 0:21:07,676
但是开启者维护一个操作

609
00:21:07,676 --> 0:21:10,226
并在某种程度上拥有你的

610
00:21:10,226 --> 0:21:13,176
窗口 并拥有特定 API 来

611
00:21:13,176 --> 0:21:15,356
控制该窗口

612
00:21:15,356 --> 0:21:16,996
开启者甚至可以超出你的控制

613
00:21:16,996 --> 0:21:18,736
来导航你的窗口

614
00:21:20,036 --> 0:21:22,346
有了新的响应头

615
00:21:22,346 --> 0:21:24,356
跨域窗口策略

616
00:21:24,356 --> 0:21:27,076
你终于可以对此说不

617
00:21:27,576 --> 0:21:30,326
大部分网站都没有

618
00:21:30,326 --> 0:21:32,136
在开启者拥有的窗口中

619
00:21:32,136 --> 0:21:33,446
实际使用这种 API

620
00:21:33,446 --> 0:21:35,076
以及这类通信方式

621
00:21:35,076 --> 0:21:36,766
网页上看到这种情况是

622
00:21:36,766 --> 0:21:38,926
非常罕见的 但是它确实存在

623
00:21:38,926 --> 0:21:40,426
且在默认情况下是这样工作的

624
00:21:40,886 --> 0:21:42,496
通过发送这个头文件

625
00:21:42,496 --> 0:21:44,966
在这种情况下为拒绝

626
00:21:44,966 --> 0:21:47,076
句柄不应该放在那儿

627
00:21:47,766 --> 0:21:49,436
可以打开 但从这一点来看

628
00:21:49,436 --> 0:21:51,186
你不能控制我

629
00:21:51,986 --> 0:21:54,166
还有一种方式

630
00:21:54,166 --> 0:21:55,466
我不会在这里展示它

631
00:21:55,466 --> 0:21:57,616
但你可以允许发布信息

632
00:21:58,016 --> 0:22:00,826
你可能想在两个窗口之间对话

633
00:21:58,016 --> 0:22:00,826
你可能想在两个窗口之间对话

634
00:22:01,086 --> 0:22:02,466
而不对窗口进行

635
00:22:02,466 --> 0:22:04,566
开启控制 然后

636
00:22:04,566 --> 0:22:06,156
你可以允许发布信息

637
00:22:07,206 --> 0:22:08,896
好的 这也是一项新技术

638
00:22:08,896 --> 0:22:10,126
现在我们已经了解过了

639
00:22:10,126 --> 0:22:11,416
跨域锁定

640
00:22:12,336 --> 0:22:15,946
你可以看到 这并不难

641
00:22:15,946 --> 0:22:18,326
这是一组响应头

642
00:22:18,326 --> 0:22:19,836
这是内容安全策略

643
00:22:19,836 --> 0:22:22,096
可供你将内容列入白名单

644
00:22:22,096 --> 0:22:24,066
这是脚本标记的

645
00:22:24,066 --> 0:22:26,126
完整性属性 或多或少

646
00:22:26,126 --> 0:22:27,116
我们在这里讨论过了

647
00:22:27,666 --> 0:22:28,926
我将会给你一些动力

648
00:22:29,136 --> 0:22:29,926
我们来看一些

649
00:22:29,926 --> 0:22:30,976
攻击场景

650
00:22:30,976 --> 0:22:32,806
你在捍卫什么

651
00:22:32,806 --> 0:22:34,666
如何使这些安全技术

652
00:22:34,666 --> 0:22:37,256
适应这些攻击

653
00:22:37,256 --> 0:22:38,286
接下来我们一起了解一下

654
00:22:38,286 --> 0:22:39,406
跨域攻击

655
00:22:39,546 --> 0:22:41,396
推测执行攻击

656
00:22:41,666 --> 0:22:43,586
有些人可能听说过

657
00:22:43,586 --> 0:22:45,046
幽灵 我们还要

658
00:22:45,046 --> 0:22:46,596
一起了解窗口控制攻击

659
00:22:47,136 --> 0:22:48,756
现在让我们首先深入了解

660
00:22:48,756 --> 0:22:49,086
跨域攻击

661
00:22:50,066 --> 0:22:51,046
我们讨论一下

662
00:22:51,046 --> 0:22:53,936
当 CDN 出现问题时的跨站点脚本

663
00:22:53,936 --> 0:22:55,586
你可以告诉我

664
00:22:55,696 --> 0:22:56,986
要去向哪里 对吧

665
00:22:57,486 --> 0:22:58,576
跨站点请求

666
00:22:58,576 --> 0:23:01,576
伪造跨站点脚本

667
00:22:58,576 --> 0:23:01,576
伪造跨站点脚本

668
00:23:01,806 --> 0:23:03,876
想象一下你建立了一个信息 App

669
00:23:04,306 --> 0:23:06,346
比如 你将其作为一个本地 App

670
00:23:06,346 --> 0:23:08,066
具有丰富的格式化的网页视图

671
00:23:08,066 --> 0:23:09,706
你可能还有一个

672
00:23:09,706 --> 0:23:11,646
配套的网页 App

673
00:23:11,646 --> 0:23:13,346
你或用户可以在

674
00:23:13,346 --> 0:23:15,216
常规网页浏览器中访问

675
00:23:15,216 --> 0:23:16,906
可以把消息发送给对方

676
00:23:16,906 --> 0:23:18,676
并伴随丰富的格式

677
00:23:19,356 --> 0:23:21,956
当然 大多数用户都很友善

678
00:23:22,176 --> 0:23:23,676
友善的人会互相

679
00:23:23,676 --> 0:23:24,476
发送好的信息

680
00:23:24,926 --> 0:23:26,256
他们中有些人讨厌

681
00:23:26,256 --> 0:23:28,206
有人发出令人愤怒的信息

682
00:23:28,206 --> 0:23:29,996
但偶尔这样的情况确有发生

683
00:23:29,996 --> 0:23:32,166
确实会有用户发送

684
00:23:32,166 --> 0:23:33,076
这样的信息

685
00:23:34,106 --> 0:23:36,066
一开始很好 但

686
00:23:36,286 --> 0:23:37,586
当时它包含这标记

687
00:23:38,396 --> 0:23:40,476
而现在 如果你出了差错

688
00:23:40,476 --> 0:23:42,226
无论是在链中

689
00:23:42,226 --> 0:23:43,936
还是在本地 App 的网页视图中

690
00:23:43,936 --> 0:23:46,626
又或是在网站中

691
00:23:46,626 --> 0:23:48,336
它实际上都将会被认为是

692
00:23:48,336 --> 0:23:50,076
标记而不是信息

693
00:23:50,556 --> 0:23:52,766
而攻击者

694
00:23:52,766 --> 0:23:54,436
也就是恶意用户就能够

695
00:23:54,556 --> 0:23:57,976
在接收者的浏览器引擎中

696
00:23:58,266 --> 0:23:59,036
运行脚本

697
00:23:59,836 --> 0:24:02,326
然后试图盗取该用户的 Cookie

698
00:23:59,836 --> 0:24:02,326
然后试图盗取该用户的 Cookie

699
00:24:02,776 --> 0:24:04,376
但请记住 这些脚本

700
00:24:04,376 --> 0:24:05,726
正在全力运行

701
00:24:05,726 --> 0:24:07,586
它们可以接管你整个

702
00:24:07,716 --> 0:24:09,536
用户界面 代表受害者

703
00:24:09,536 --> 0:24:10,916
向你发出请求

704
00:24:11,916 --> 0:24:13,366
比如说 跨站点脚本

705
00:24:13,366 --> 0:24:15,506
就是一个反映不良情况的例子

706
00:24:15,506 --> 0:24:16,836
你不会希望这发生在自己身上

707
00:24:17,846 --> 0:24:19,976
幸运的是 你已经标记了

708
00:24:19,976 --> 0:24:22,616
你的身份验证 Cookie HttpOnly 对吧

709
00:24:22,976 --> 0:24:25,626
所以 它们不适用于

710
00:24:25,626 --> 0:24:26,546
这个恶意脚本

711
00:24:27,466 --> 0:24:29,306
如今 HttpOnly Cookie 不能

712
00:24:29,306 --> 0:24:31,256
保护你免受跨站点脚本攻击

713
00:24:31,566 --> 0:24:32,626
这种脚本仍在运行

714
00:24:33,376 --> 0:24:36,226
HttpOnly Cookie 可以保护的 Cookie

715
00:24:37,196 --> 0:24:38,216
因此 你要做的还有很多

716
00:24:38,216 --> 0:24:39,926
那么你都做了些什么呢

717
00:24:40,686 --> 0:24:41,926
内容安全策略

718
00:24:42,656 --> 0:24:44,626
从默认源自带开始

719
00:24:44,626 --> 0:24:45,696
对吗

720
00:24:46,036 --> 0:24:48,566
只有我可以运行

721
00:24:48,566 --> 0:24:49,986
我页面上的脚本

722
00:24:50,716 --> 0:24:52,726
这意味着在默认情况下

723
00:24:52,726 --> 0:24:55,416
不会有内联脚本

724
00:24:55,416 --> 0:24:57,466
且这类所有错误都会消失

725
00:24:58,956 --> 0:25:00,966
现在没有办法将脚本

726
00:24:58,956 --> 0:25:00,966
现在没有办法将脚本

727
00:25:00,966 --> 0:25:03,006
加入到你的网页中

728
00:25:03,006 --> 0:25:04,796
并让它们执行

729
00:25:04,796 --> 0:25:06,326
因为你在页面设置了策略

730
00:25:08,326 --> 0:25:12,096
好 如果你的 CDN 受到威胁怎么办

731
00:25:12,526 --> 0:25:14,186
这会很糟糕 我们只能希望

732
00:25:14,186 --> 0:25:17,266
它不会发生 但它有可能发生

733
00:25:17,816 --> 0:25:19,216
所以你真的要依靠这个

734
00:25:19,216 --> 0:25:22,486
从 CDN 加载框架

735
00:25:22,486 --> 0:25:25,406
因为它可以执行与你自己脚本

736
00:25:25,406 --> 0:25:26,516
相同的权力

737
00:25:28,136 --> 0:25:30,016
现在 如果它们

738
00:25:30,016 --> 0:25:31,656
已经破解并将脚本请求

739
00:25:31,656 --> 0:25:33,416
重新定向到 evil.example

740
00:25:33,456 --> 0:25:35,666
加载攻击代码怎么办

741
00:25:36,526 --> 0:25:38,126
突然间你感觉自己得到了

742
00:25:38,126 --> 0:25:40,146
一个框架 也许已经好到

743
00:25:40,146 --> 0:25:41,406
足以捆绑在框架结构中

744
00:25:41,406 --> 0:25:44,156
但它仍然做些令人讨厌的事情

745
00:25:44,866 --> 0:25:46,836
那么你该怎么做

746
00:25:47,546 --> 0:25:49,426
在内容安全策略中

747
00:25:49,426 --> 0:25:50,966
将脚本源添加到白名单中

748
00:25:50,966 --> 0:25:53,626
这样浏览器就可以

749
00:25:53,626 --> 0:25:55,396
拒绝执行来自

750
00:25:55,396 --> 0:25:56,736
evil.example 的任何代码

751
00:25:58,246 --> 0:26:01,026
好了 现在攻击者需要

752
00:25:58,246 --> 0:26:01,026
好了 现在攻击者需要

753
00:26:01,026 --> 0:26:02,586
变得更加狡猾

754
00:26:03,426 --> 0:26:05,066
他很可能

755
00:26:05,126 --> 0:26:07,306
会更改 CDN 服务器的脚本

756
00:26:07,306 --> 0:26:08,796
而不是将其重新定向到

757
00:26:08,936 --> 0:26:10,666
evil.example 服务器

758
00:26:11,206 --> 0:26:12,626
所以 它在你的白名单上

759
00:26:12,626 --> 0:26:15,036
你要加载并执行这一脚本

760
00:26:16,056 --> 0:26:19,256
不过 你有子资源完整性

761
00:26:19,256 --> 0:26:20,566
来帮助你

762
00:26:21,206 --> 0:26:22,576
你可以控制

763
00:26:22,576 --> 0:26:24,356
其他服务器脚本

764
00:26:24,356 --> 0:26:26,126
的完整性

765
00:26:26,806 --> 0:26:28,096
如果校验和不匹配

766
00:26:28,196 --> 0:26:29,566
那么你将会从

767
00:26:29,566 --> 0:26:31,206
自己的服务器上加载

768
00:26:32,186 --> 0:26:33,926
因此 这种攻击也失败了

769
00:26:35,746 --> 0:26:37,566
好的 这个就是破解 CDN

770
00:26:37,756 --> 0:26:39,686
最后的跨域

771
00:26:39,686 --> 0:26:42,736
攻击 即跨站点请求伪造

772
00:26:43,316 --> 0:26:46,206
这与最后一个单词相关联即伪造

773
00:26:46,206 --> 0:26:48,926
意思是攻击者

774
00:26:48,926 --> 0:26:50,936
试图伪造一个请求

775
00:26:50,936 --> 0:26:52,906
看起来好像你的

776
00:26:52,906 --> 0:26:55,156
用户正在做些什么

777
00:26:55,156 --> 0:26:58,046
但事实上他们并没有

778
00:26:59,156 --> 0:27:00,786
我们回到信息 App

779
00:26:59,156 --> 0:27:00,786
我们回到信息 App

780
00:27:01,866 --> 0:27:04,106
你拥有这个论坛

781
00:27:04,106 --> 0:27:06,596
可以支持用户发送信息

782
00:27:06,596 --> 0:27:08,446
坦白说 当涉及到它时

783
00:27:08,446 --> 0:27:10,476
它将是 HTTP 请求

784
00:27:10,746 --> 0:27:12,956
可能在 HTTP 邮件中

785
00:27:12,956 --> 0:27:14,236
当消息进入服务器

786
00:27:14,236 --> 0:27:15,276
并查看 Cookie 时

787
00:27:15,276 --> 0:27:16,946
一切看起来都不错 然后

788
00:27:16,946 --> 0:27:18,766
你会将信息发送给

789
00:27:18,766 --> 0:27:19,776
接收者 对吗

790
00:27:20,666 --> 0:27:21,956
那么 现在出现了

791
00:27:21,956 --> 0:27:24,536
恶意攻击者

792
00:27:24,586 --> 0:27:26,756
当然他已经在偷窥你的用户

793
00:27:26,946 --> 0:27:29,866
也就是说他发送了一个链接

794
00:27:29,866 --> 0:27:31,726
并将该用户诱骗到

795
00:27:31,726 --> 0:27:33,876
攻击者的网站 evil.example 

796
00:27:34,526 --> 0:27:36,466
并展示一些

797
00:27:36,466 --> 0:27:38,586
非常吸引人的统计数据

798
00:27:39,336 --> 0:27:41,176
这让受害用户

799
00:27:41,176 --> 0:27:42,566
至少在那里待上一段时间

800
00:27:42,566 --> 0:27:44,326
我的意思是你必须查看这些数据

801
00:27:45,286 --> 0:27:47,176
受害者用户

802
00:27:47,176 --> 0:27:49,326
并不知道你的网页内容

803
00:27:49,486 --> 0:27:51,966
存在隐藏的资源负载

804
00:27:51,966 --> 0:27:55,156
代表受害者用户

805
00:27:55,156 --> 0:27:57,576
发送消息

806
00:27:57,636 --> 0:27:59,226
当然也会自动添加

807
00:27:59,226 --> 0:28:01,556
Cookie 这就是网页的工作原理 对吧

808
00:27:59,226 --> 0:28:01,556
Cookie 这就是网页的工作原理 对吧

809
00:28:01,556 --> 0:28:02,796
如果网络上发出请求

810
00:28:02,796 --> 0:28:04,866
则会添加 Cookie

811
00:28:04,866 --> 0:28:07,086
我想你的服务器会看起来像

812
00:28:07,086 --> 0:28:09,216
该用户想要发送信息的样子

813
00:28:10,096 --> 0:28:11,916
那可能是垃圾邮件

814
00:28:11,916 --> 0:28:14,796
或是恶意软件的链接

815
00:28:15,206 --> 0:28:16,626
它可能会和同伴分离

816
00:28:16,626 --> 0:28:18,986
好吧 也许走不了那么远

817
00:28:18,986 --> 0:28:20,526
不过恶意软件

818
00:28:20,526 --> 0:28:21,606
将继续留在那里

819
00:28:22,296 --> 0:28:25,726
所以 你不希望发生这种情况

820
00:28:25,936 --> 0:28:30,726
幸运的是 你已经使用了相同站点 Cookie

821
00:28:31,376 --> 0:28:33,006
它们不会被发送到

822
00:28:33,006 --> 0:28:34,996
嵌入式情况当中 这意味着

823
00:28:34,996 --> 0:28:37,756
你的服务器将会检测到

824
00:28:37,756 --> 0:28:39,516
我被嵌入在这里

825
00:28:39,826 --> 0:28:42,016
我不允许用户从

826
00:28:42,016 --> 0:28:44,246
其他页面下的 iframe

827
00:28:44,246 --> 0:28:45,256
发送消息

828
00:28:45,626 --> 0:28:47,656
当我做这种敏感的事情

829
00:28:47,656 --> 0:28:49,276
比如说发送消息时

830
00:28:49,276 --> 0:28:51,146
我需要得到 UI

831
00:28:51,146 --> 0:28:52,146
否认这一请求

832
00:28:53,086 --> 0:28:54,496
这样 情况就在你掌控之中了

833
00:28:56,316 --> 0:28:58,326
好了 我们现在了解下

834
00:28:58,326 --> 0:28:59,956
跨域攻击 看一看

835
00:28:59,956 --> 0:29:01,446
那些安全机制是

836
00:28:59,956 --> 0:29:01,446
那些安全机制是

837
00:29:01,446 --> 0:29:02,636
如何帮助我们的

838
00:29:03,026 --> 0:29:04,046
我们来看一些

839
00:29:04,046 --> 0:29:06,166
非常奇特 新鲜的东西

840
00:29:06,386 --> 0:29:08,846
幽灵攻击

841
00:29:08,846 --> 0:29:10,956
或预测执行攻击

842
00:29:11,606 --> 0:29:16,776
在这里我想说的是

843
00:29:16,946 --> 0:29:18,476
预测攻击是什么

844
00:29:19,186 --> 0:29:20,846
它如何变成一种

845
00:29:20,846 --> 0:29:22,336
攻击 我们又怎样

846
00:29:22,336 --> 0:29:24,636
去防御它

847
00:29:25,316 --> 0:29:28,436
那么现在 我们深入 CPU

848
00:29:28,566 --> 0:29:31,246
它正在执行代码

849
00:29:31,646 --> 0:29:33,726
它已达到有力条件

850
00:29:34,276 --> 0:29:36,476
它会在条件下进行一些行为

851
00:29:36,916 --> 0:29:38,756
它在问自己 嘿

852
00:29:38,756 --> 0:29:40,856
我这里有个数据索引 x

853
00:29:41,326 --> 0:29:42,806
这个是否正确

854
00:29:43,226 --> 0:29:46,516
在我数据读取的界内还是界外

855
00:29:47,416 --> 0:29:50,046
因为如果是界外

856
00:29:50,046 --> 0:29:51,516
我就会做些错误处理

857
00:29:51,516 --> 0:29:53,446
但如果是界内

858
00:29:53,446 --> 0:29:54,906
我就会继续操作并且

859
00:29:54,906 --> 0:29:55,756
将数据加载到数组中

860
00:29:57,036 --> 0:30:00,326
如今 现代 CPU

861
00:29:57,036 --> 0:30:00,326
如今 现代 CPU

862
00:30:00,326 --> 0:30:02,156
如果一次又一次地看到

863
00:30:02,156 --> 0:30:05,346
相同路径 就会学习吸收

864
00:30:05,346 --> 0:30:06,696
X 总是处于界内状态

865
00:30:07,356 --> 0:30:09,496
加载这个数组 是可以的

866
00:30:10,406 --> 0:30:11,586
为什么我不在

867
00:30:11,586 --> 0:30:14,516
知晓其准确与否之前

868
00:30:14,516 --> 0:30:15,986
先走一步 去推测一下呢

869
00:30:16,686 --> 0:30:17,816
这就是它的工作原理

870
00:30:18,356 --> 0:30:20,496
它执行此代码 以推测方式

871
00:30:20,496 --> 0:30:22,946
获取代码路径

872
00:30:22,946 --> 0:30:25,066
加载数据

873
00:30:25,066 --> 0:30:26,676
在最终答案出现时

874
00:30:26,676 --> 0:30:28,896
在该种情况下 不 这是一种

875
00:30:28,896 --> 0:30:30,536
x 不正常的罕见情况

876
00:30:30,536 --> 0:30:31,606
你不能一直加载

877
00:30:31,606 --> 0:30:33,886
该数据 它会将其备份

878
00:30:33,886 --> 0:30:37,896
并采用正确的代码路径

879
00:30:38,066 --> 0:30:39,116
这怎么办

880
00:30:39,466 --> 0:30:43,056
没关系 因为推测路径没有提交

881
00:30:43,056 --> 0:30:45,566
它只是提前完成

882
00:30:45,566 --> 0:30:46,806
以便我们可以利用

883
00:30:46,806 --> 0:30:48,896
当原始问题

884
00:30:48,896 --> 0:30:50,786
得出最终答案时

885
00:30:50,786 --> 0:30:52,226
我已经完成了

886
00:30:52,796 --> 0:30:54,546
这就是预测执行

887
00:30:55,626 --> 0:30:57,666
那么这是怎样变成攻击的呢

888
00:30:58,056 --> 0:31:00,876
事实证明

889
00:30:58,056 --> 0:31:00,876
事实证明

890
00:31:01,056 --> 0:31:02,496
由推测执行造成的缓存效果

891
00:31:02,496 --> 0:31:04,936
可以通过恶意代码

892
00:31:04,936 --> 0:31:07,756
进行监控 然后

893
00:31:07,756 --> 0:31:10,036
还可以泄漏那些

894
00:31:10,036 --> 0:31:12,416
从来不应该发生过的数据读取

895
00:31:13,026 --> 0:31:14,606
这是界外的 该负载

896
00:31:14,606 --> 0:31:16,456
应该没有发生

897
00:31:16,456 --> 0:31:18,996
但它会影响缓存 并且通过测量

898
00:31:18,996 --> 0:31:21,116
缓存 攻击者可以

899
00:31:21,116 --> 0:31:22,826
泄露那些不应该

900
00:31:22,826 --> 0:31:23,866
被加载的数据

901
00:31:25,086 --> 0:31:27,396
那么这是如何映射到网页内容的呢

902
00:31:28,046 --> 0:31:29,986
还记得同源策略吗

903
00:31:30,476 --> 0:31:31,636
这个东西已经

904
00:31:31,636 --> 0:31:34,476
保护了我们 20 年

905
00:31:34,476 --> 0:31:36,676
确保了一个来源的

906
00:31:36,676 --> 0:31:37,996
主框架不能

907
00:31:38,026 --> 0:31:39,756
进入和读取其他框架的字节

908
00:31:39,756 --> 0:31:41,916
或许是你的嵌入内容

909
00:31:43,206 --> 0:31:44,496
而有了预测执行

910
00:31:44,496 --> 0:31:46,416
攻击 我们就可以不再

911
00:31:46,416 --> 0:31:47,656
依赖于同源策略

912
00:31:48,766 --> 0:31:50,196
现在存在一种资格 那就是

913
00:31:50,196 --> 0:31:51,576
如果你可以运行脚本 并且

914
00:31:51,576 --> 0:31:53,696
你在同一个过程中 与其他内容

915
00:31:53,696 --> 0:31:55,676
一样的网页内容处理过程

916
00:31:55,676 --> 0:31:57,916
那么你就可以

917
00:31:57,916 --> 0:32:00,276
通过预测执行攻击读取内容

918
00:31:57,916 --> 0:32:00,276
通过预测执行攻击读取内容

919
00:32:01,556 --> 0:32:04,406
不过 这对网页来说是个巨大的挑战

920
00:32:04,696 --> 0:32:05,866
我可以告诉你们

921
00:32:05,866 --> 0:32:08,086
我一直在和其他浏览器供应商开会

922
00:32:08,186 --> 0:32:10,676
我们正在努力尝试

923
00:32:10,676 --> 0:32:12,776
试图修复默认情况下的网页

924
00:32:12,776 --> 0:32:15,076
不过我们也需要你们的帮助

925
00:32:15,796 --> 0:32:17,786
如果你可以选择一些东西

926
00:32:17,826 --> 0:32:19,146
我们已经看过

927
00:32:19,256 --> 0:32:20,666
防御机制了 对吧

928
00:32:20,926 --> 0:32:22,796
如果你能选择这些

929
00:32:22,796 --> 0:32:24,446
你可以帮忙告诉我们说

930
00:32:24,786 --> 0:32:26,146
我有敏感内容

931
00:32:26,366 --> 0:32:28,196
我想要获得更好的默认值

932
00:32:28,196 --> 0:32:30,826
你不用为我支持这些遗留的 API

933
00:32:31,286 --> 0:32:32,536
然后我们就可以

934
00:32:32,536 --> 0:32:34,006
更积极地

935
00:32:34,006 --> 0:32:36,496
为你打击预测执行攻击

936
00:32:37,456 --> 0:32:38,916
下面我们看是如何映射的

937
00:32:39,666 --> 0:32:41,106
想要打击

938
00:32:41,106 --> 0:32:42,536
预测执行攻击

939
00:32:42,536 --> 0:32:44,686
你首先要做的是

940
00:32:44,686 --> 0:32:47,046
确保你的网页内容

941
00:32:47,306 --> 0:32:49,176
永远不会像

942
00:32:49,176 --> 0:32:51,756
evil.example 那样在同一个

943
00:32:51,756 --> 0:32:52,736
网页内容处理中结束

944
00:32:53,316 --> 0:32:54,416
如果它们有一个

945
00:32:54,416 --> 0:32:56,626
框架 evil.example 那么就可以

946
00:32:56,716 --> 0:32:58,186
在你网页内容驻留的

947
00:32:58,186 --> 0:33:00,386
过程中执行代码

948
00:32:58,186 --> 0:33:00,386
过程中执行代码

949
00:33:00,386 --> 0:33:02,646
并读取你的字节

950
00:33:03,436 --> 0:33:04,746
因此 我们怎样保证这样的情况

951
00:33:04,746 --> 0:33:05,326
不会发生呢

952
00:33:06,286 --> 0:33:07,656
我们有这些东西

953
00:33:07,936 --> 0:33:09,836
第一个 WKWebView

954
00:33:10,036 --> 0:33:11,406
现在我们正在使用 WebKit

955
00:33:11,406 --> 0:33:12,616
作为框架来查看 App

956
00:33:13,616 --> 0:33:16,466
我正在寻找 Safari

957
00:33:16,756 --> 0:33:18,046
这是一个使用 WKWebView 的

958
00:33:18,046 --> 0:33:20,216
App 的示例

959
00:33:20,326 --> 0:33:22,386
我们有时将其称为

960
00:33:22,386 --> 0:33:24,306
现代 WebKit 它已经

961
00:33:24,306 --> 0:33:25,596
使用了很多年

962
00:33:25,986 --> 0:33:27,866
而且它提供了

963
00:33:28,096 --> 0:33:29,346
964
00:33:30,096 --> 0:33:32,336


965
00:33:32,536 --> 0:33:34,296
evil.example 你的 Web 内容

966
00:33:34,296 --> 0:33:36,696
还有 webkit.org 都在

967
00:33:36,696 --> 0:33:39,096
单独的网页内容过程里呈现

968
00:33:40,126 --> 0:33:42,896
此外 WKWebView 给你

969
00:33:43,026 --> 0:33:44,726
提供了一个分离的

970
00:33:44,726 --> 0:33:45,566
网络过程

971
00:33:45,816 --> 0:33:47,436
在这里 Cookie 得以添加

972
00:33:47,436 --> 0:33:51,966
HTTP 头能够被解析等等

973
00:33:54,306 --> 0:33:56,036
现在 预测执行攻击

974
00:33:56,036 --> 0:33:58,346
都依赖于在

975
00:33:58,346 --> 0:34:00,796
同一个网页内容过程中

976
00:33:58,346 --> 0:34:00,796
同一个网页内容过程中

977
00:34:00,796 --> 0:34:02,516
进行推测

978
00:34:02,516 --> 0:34:04,386
试图读取

979
00:34:04,386 --> 0:34:06,246
攻击者不应该

980
00:34:06,246 --> 0:34:07,136
读取的内容

981
00:34:07,136 --> 0:34:08,496
如果你把事情

982
00:34:08,496 --> 0:34:09,956
划分成了不同的进程

983
00:34:10,696 --> 0:34:12,036
那这个攻击就不起作用了 对吧

984
00:34:12,636 --> 0:34:13,956
你不能跨进程界限

985
00:34:14,025 --> 0:34:16,196
来进行预测执行攻击

986
00:34:16,196 --> 0:34:18,286
因此这已经成为一种防御措施

987
00:34:18,286 --> 0:34:20,626
防御措施 当然

988
00:34:20,626 --> 0:34:22,686
非常重要的一点是

989
00:34:22,686 --> 0:34:24,886
网页内容进程不能

990
00:34:24,916 --> 0:34:26,666
触及网络进程

991
00:34:26,666 --> 0:34:28,396
不能在这里预测执行攻击

992
00:34:30,056 --> 0:34:32,076
但是如果你仍然在使用

993
00:34:32,076 --> 0:34:34,396
UIWebView 那么

994
00:34:34,396 --> 0:34:36,196
你可能不太对

995
00:34:37,306 --> 0:34:39,275
我们不赞成这版本

996
00:34:40,485 --> 0:34:42,436
现在 假设你有 evil.example

997
00:34:43,206 --> 0:34:44,686
有网页内容

998
00:34:45,315 --> 0:34:46,686
以及网络堆栈

999
00:34:47,496 --> 0:34:48,826
然后你将这些全部

1000
00:34:48,826 --> 0:34:51,946
放入你的 App 中

1001
00:34:51,946 --> 0:34:53,596
那么从预测执行攻击的角度看

1002
00:34:54,315 --> 0:34:55,505
一切都融合在一起

1003
00:34:56,306 --> 0:34:58,346
这是完全相同的进程空间

1004
00:34:59,026 --> 0:35:00,666
在这种情况下

1005
00:34:59,026 --> 0:35:00,666
在这种情况下

1006
00:35:00,666 --> 0:35:03,506
没有东西可以防卫预测执行攻击

1007
00:35:04,286 --> 0:35:06,666
你需要离开 UIWebView

1008
00:35:07,466 --> 0:35:10,376
如果你转移到 WKWebView

1009
00:35:10,376 --> 0:35:12,696
你就会得到这个

1010
00:35:12,896 --> 0:35:15,096
在 evil.example 内容过程

1011
00:35:15,656 --> 0:35:16,856
的进程中

1012
00:35:16,856 --> 0:35:18,676
分离和不良情况

1013
00:35:18,796 --> 0:35:19,856
不会影响其余部分

1014
00:35:21,266 --> 0:35:23,306
我们已经转移到了 WKWebView

1015
00:35:23,656 --> 0:35:24,726
让我们来看看

1016
00:35:24,726 --> 0:35:26,996
内容安全策略如何帮助你

1017
00:35:27,406 --> 0:35:28,626
你可能有一个来自 social.example

1018
00:35:28,626 --> 0:35:29,976
的嵌入式小部件

1019
00:35:29,976 --> 0:35:33,166
但是另一方面

1020
00:35:33,166 --> 0:35:34,696
你也许会得到一个注入式攻击

1021
00:35:34,696 --> 0:35:36,086
或许这是又一次的信息传递

1022
00:35:36,086 --> 0:35:38,716
人们在信息中发送标记

1023
00:35:38,946 --> 0:35:40,546
可以偶尔呈现它

1024
00:35:40,546 --> 0:35:42,516
并从 evil.example 中引入 iframe

1025
00:35:43,376 --> 0:35:45,816
还有 你可能在这里有一个 AD

1026
00:35:45,816 --> 0:35:47,426
你也想让它在这儿

1027
00:35:47,426 --> 0:35:48,676
然后 AD Network

1028
00:35:48,676 --> 0:35:50,286
破解并重新定向到

1029
00:35:50,286 --> 0:35:52,246
evil.example 然后引入一个框架

1030
00:35:52,646 --> 0:35:53,996
另外 请牢记 千万不要

1031
00:35:53,996 --> 0:35:55,426
与来自 evil.example 的框架

1032
00:35:55,786 --> 0:35:58,876
一起在网页内容进程当中

1033
00:35:59,986 --> 0:36:00,866
那么 你做了什么

1034
00:35:59,986 --> 0:36:00,866
那么 你做了什么

1035
00:36:01,306 --> 0:36:02,616
你已经部署了

1036
00:36:02,616 --> 0:36:04,706
内容安全策略

1037
00:36:05,016 --> 0:36:07,746
并且已经从允许框架的位置

1038
00:36:07,746 --> 0:36:10,316
指定了内容

1039
00:36:10,316 --> 0:36:11,176
请不要允许 evil.example

1040
00:36:12,386 --> 0:36:14,466
这就是你如何防止

1041
00:36:14,466 --> 0:36:16,666
意外地从 evil.example 中

1042
00:36:16,666 --> 0:36:19,116
获得一个框架的例子

1043
00:36:20,176 --> 0:36:22,286
那么 相反

1044
00:36:22,496 --> 0:36:24,796
evil.example 能否将你的网页内容

1045
00:36:24,796 --> 0:36:26,996
拖入恶意程序呢

1046
00:36:27,876 --> 0:36:28,396
答案是肯定的

1047
00:36:29,186 --> 0:36:30,736
那么 你该怎样防御呢

1048
00:36:31,546 --> 0:36:32,646
我们回到内容安全策略

1049
00:36:32,646 --> 0:36:35,846
现在我们看到了框架祖先

1050
00:36:36,016 --> 0:36:37,326
这是我之前提到的

1051
00:36:37,566 --> 0:36:39,686
内容稍有不同

1052
00:36:40,086 --> 0:36:41,916
事实上也可以说没有

1053
00:36:41,916 --> 0:36:44,736
这意味着将永远不要对我进行 iframe

1054
00:36:45,546 --> 0:36:47,206
这个内容不应发放在

1055
00:36:47,206 --> 0:36:48,486
其他人的 iframe 中

1056
00:36:49,006 --> 0:36:49,896
这是我的内容

1057
00:36:50,256 --> 0:36:51,896
只有我才可以呈现它

1058
00:36:52,636 --> 0:36:54,756
所以 如果你放置这个

1059
00:36:55,236 --> 0:36:57,986
evil.example 页面

1060
00:36:57,986 --> 0:37:01,126
就不能在你的 iframe 中插入内容

1061
00:36:57,986 --> 0:37:01,126
就不能在你的 iframe 中插入内容

1062
00:37:01,446 --> 0:37:03,026
当然 我们也可以

1063
00:37:03,126 --> 0:37:05,386
在网络进程中进行封锁

1064
00:37:05,816 --> 0:37:07,236
这很重要 对 因为

1065
00:37:07,426 --> 0:37:08,886
预测执行攻击

1066
00:37:08,886 --> 0:37:10,116
只能发生在同一进程空间

1067
00:37:10,116 --> 0:37:12,056
所以 我们要在

1068
00:37:12,056 --> 0:37:13,336
evil.example 可以执行

1069
00:37:13,336 --> 0:37:15,716
JavaScript 的位置之前将其切断

1070
00:37:17,336 --> 0:37:19,756
HttpOnly Cookie

1071
00:37:19,756 --> 0:37:21,266
真的能通过映射

1072
00:37:21,266 --> 0:37:22,226
预测执行攻击吗

1073
00:37:22,666 --> 0:37:23,616
是的 它们能

1074
00:37:23,886 --> 0:37:25,606
它们在这里

1075
00:37:25,606 --> 0:37:27,776
比尝试攻击跨站点脚本更重要

1076
00:37:28,456 --> 0:37:31,426
为什么 还记得那个旧的 API

1077
00:37:31,426 --> 0:37:33,616
document.cookie 是从 JavaScript

1078
00:37:33,616 --> 0:37:35,236
中查看 Cookie 的方式吗

1079
00:37:36,076 --> 0:37:37,376
既然我们不能 也不可以

1080
00:37:37,376 --> 0:37:38,906
再依赖同源策略

1081
00:37:38,906 --> 0:37:41,646
evil.example 可以

1082
00:37:41,646 --> 0:37:43,636
从你的内容到达 iframe

1083
00:37:43,636 --> 0:37:44,956
并实际读取 Cookie

1084
00:37:45,816 --> 0:37:46,676
非常糟糕

1085
00:37:47,196 --> 0:37:49,016
但是如果你将它们标记为 HttpOnly

1086
00:37:49,516 --> 0:37:51,446
WebKit 将确保

1087
00:37:51,546 --> 0:37:52,896
将它们保留在网络进程中

1088
00:37:53,256 --> 0:37:54,456
1089
00:37:54,456 --> 0:37:55,706


1090
00:37:55,706 --> 0:37:57,216
因为它们不需要在 document.cookie

1091
00:37:57,216 --> 0:37:58,476
API 中公开

1092
00:37:59,506 --> 0:38:00,836
因此 这会自动保护

1093
00:37:59,506 --> 0:38:00,836
因此 这会自动保护

1094
00:38:00,836 --> 0:38:02,596
Cookie 反对

1095
00:38:02,596 --> 0:38:03,486
预测执行攻击

1096
00:38:04,866 --> 0:38:06,406
SameSite Cookie

1097
00:38:06,576 --> 0:38:07,786
这基本上能让

1098
00:38:07,786 --> 0:38:09,646
你的服务器控制

1099
00:38:09,696 --> 0:38:10,176
嵌入式案例

1100
00:38:10,556 --> 0:38:12,306
同样 evil.example 已经决定

1101
00:38:12,306 --> 0:38:14,006
尝试对你的内容进行一次

1102
00:38:14,046 --> 0:38:15,756
预测执行攻击

1103
00:38:16,656 --> 0:38:17,936
用你的内容加载一个 iframe

1104
00:38:17,936 --> 0:38:20,306
但 SameSite Cookie

1105
00:38:20,306 --> 0:38:22,446
没有被发送 这样你的服务器

1106
00:38:22,446 --> 0:38:24,966
就会明白 我要在这里嵌入了

1107
00:38:24,966 --> 0:38:25,856
而我不允许这样做

1108
00:38:25,886 --> 0:38:27,696
那你将会拒绝

1109
00:38:27,696 --> 0:38:29,896
整个资源加载服务器端

1110
00:38:31,396 --> 0:38:34,796
那不会在 evil.example 进程中结束

1111
00:38:35,656 --> 0:38:37,786
最后 打击这些攻击

1112
00:38:38,016 --> 0:38:40,516
跨域资源策略

1113
00:38:41,446 --> 0:38:42,806
这是我告诉过你的

1114
00:38:42,806 --> 0:38:44,026
新头文件 你可以对

1115
00:38:44,316 --> 0:38:46,476
网页浏览器引擎说

1116
00:38:46,476 --> 0:38:48,626
嘿 图像 脚本以及

1117
00:38:48,626 --> 0:38:49,786
其他来自我的服务器的东西

1118
00:38:50,226 --> 0:38:51,736
只有我能下载

1119
00:38:52,276 --> 0:38:53,576
所以 如果你说 在你的服务器上

1120
00:38:53,576 --> 0:38:55,226
将这个头文件发送给

1121
00:38:55,226 --> 0:38:57,446
你的图像和脚本 我们将

1122
00:38:57,446 --> 0:38:59,116
确保阻止它们被

1123
00:38:59,116 --> 0:39:01,716
evil.example 加载

1124
00:38:59,116 --> 0:39:01,716
evil.example 加载

1125
00:39:01,716 --> 0:39:02,906
我们会在网络进程中

1126
00:39:02,906 --> 0:39:03,866
执行这一阻止

1127
00:39:04,186 --> 0:39:06,336
同样 给你一个进程分离的

1128
00:39:06,336 --> 0:39:08,406
机会 使预测执行攻击

1129
00:39:08,406 --> 0:39:10,676
不能读取你的字节

1130
00:39:12,686 --> 0:39:14,976
好的 我们来看看

1131
00:39:14,976 --> 0:39:16,366
最后的攻击类别

1132
00:39:16,366 --> 0:39:17,466
这是一个相当简短的

1133
00:39:17,836 --> 0:39:19,246
窗口控制攻击

1134
00:39:20,216 --> 0:39:21,906
所以 我们将查看

1135
00:39:21,906 --> 0:39:23,626
恶意的窗口导航

1136
00:39:23,786 --> 0:39:24,896
有时被称为

1137
00:39:24,936 --> 0:39:26,806
标签 然后进行防御

1138
00:39:28,446 --> 0:39:29,466
现在 我们再一次回到

1139
00:39:29,466 --> 0:39:31,486
evil.example 而不是

1140
00:39:31,486 --> 0:39:33,506
嵌入你的内容

1141
00:39:33,506 --> 0:39:36,106
因此 window.open 在一个

1142
00:39:36,106 --> 0:39:37,876
新的窗口中打开你的内容

1143
00:39:37,876 --> 0:39:38,416
你却不知道

1144
00:39:38,416 --> 0:39:39,986
是的 你不能决定

1145
00:39:39,986 --> 0:39:41,876
好 有人打开了我的网页

1146
00:39:42,066 --> 0:39:44,826
SameSite Cookie 可能会发送到这里

1147
00:39:44,826 --> 0:39:46,086
你可能以为一切

1148
00:39:46,086 --> 0:39:49,376
都很好 但是 evil.example 会等到

1149
00:39:49,376 --> 0:39:52,416
你的用户注意力没有

1150
00:39:52,416 --> 0:39:54,856
集中在你的页面 然后

1151
00:39:54,856 --> 0:39:57,786
使用句柄将它导航到

1152
00:39:57,786 --> 0:40:00,516
一个看起来与你页面

1153
00:39:57,786 --> 0:40:00,516
一个看起来与你页面

1154
00:40:00,516 --> 0:40:02,646
相像的欺诈页面 并要求

1155
00:40:02,646 --> 0:40:04,736
用户再次登录

1156
00:40:04,736 --> 0:40:05,906
以盗取凭据并将其

1157
00:40:05,906 --> 0:40:07,496
发送给攻击者

1158
00:40:08,436 --> 0:40:09,416
如果你把控制权

1159
00:40:09,416 --> 0:40:10,756
留给了开启者

1160
00:40:10,756 --> 0:40:12,126
这种情况就会发生

1161
00:40:13,206 --> 0:40:16,836
相反如果你部署跨域窗口策略

1162
00:40:16,836 --> 0:40:19,466
拒绝此项操作

1163
00:40:19,466 --> 0:40:21,556
那么攻击者页面

1164
00:40:21,556 --> 0:40:24,126
将没有处理程序来导航窗口

1165
00:40:24,666 --> 0:40:27,756
这就是进攻的最后一道防线

1166
00:40:28,496 --> 0:40:31,046
是时候采取行动了

1167
00:40:31,366 --> 0:40:32,656
我们回顾一下

1168
00:40:32,656 --> 0:40:34,516
在这里说过的

1169
00:40:34,516 --> 0:40:35,656
以便于你知道自己

1170
00:40:35,656 --> 0:40:37,956
回到办公室或者家中

1171
00:40:37,956 --> 0:40:39,456
开始工作时需要做什么

1172
00:40:40,196 --> 0:40:42,926
首先 我们必须要保证

1173
00:40:42,926 --> 0:40:43,746
这些传输

1174
00:40:44,066 --> 0:40:45,916
移动到 HTTPS 和 WSS

1175
00:40:47,206 --> 0:40:49,126
你应该有安全的 Cookie

1176
00:40:49,546 --> 0:40:51,916
你也要标记它们 HttpOnly

1177
00:40:52,296 --> 0:40:53,966
如果你接受瑞典人的建议

1178
00:40:54,246 --> 0:40:55,486
只需将你的所有 Cookie

1179
00:40:55,486 --> 0:40:56,716
设置为 HttpOnly 并确保安全

1180
00:40:57,806 --> 0:40:59,706
你需要从 UIWebView

1181
00:40:59,706 --> 0:41:01,636
迁移到 WKWebview

1182
00:40:59,706 --> 0:41:01,636
迁移到 WKWebview

1183
00:41:02,046 --> 0:41:03,076
这些是基础

1184
00:41:03,786 --> 0:41:05,216
然后我们就有了

1185
00:41:05,216 --> 0:41:07,006
我们一直在进行的防御机制

1186
00:41:07,386 --> 0:41:09,386
内容安全策略将

1187
00:41:09,386 --> 0:41:11,956
帮助你在这里进行跨站点

1188
00:41:11,956 --> 0:41:13,236
脚本和预测

1189
00:41:13,236 --> 0:41:14,276
执行攻击

1190
00:41:16,266 --> 0:41:17,686
HttpOnly Cookie 将为你提供

1191
00:41:17,746 --> 0:41:19,706
对跨站点脚本的某种保护

1192
00:41:19,706 --> 0:41:20,826
这意味着

1193
00:41:20,906 --> 0:41:22,526
脚本不能窃取 Cookie

1194
00:41:22,526 --> 0:41:24,306
但它肯定会 

1195
00:41:24,306 --> 0:41:26,026
帮助你抵御

1196
00:41:26,026 --> 0:41:27,586
预测执行攻击

1197
00:41:27,626 --> 0:41:29,616
因为 HttpOnly Cookie 

1198
00:41:29,756 --> 0:41:31,236
被完全保存在网络进程中

1199
00:41:33,286 --> 0:41:34,446
子资源完整性

1200
00:41:34,876 --> 0:41:36,036
这就是抵御

1201
00:41:36,436 --> 0:41:37,896
受损 CDN 的方式

1202
00:41:38,306 --> 0:41:40,246
有人正在你的

1203
00:41:40,246 --> 0:41:42,346
页面上执行你从未想过的代码

1204
00:41:44,576 --> 0:41:47,176
SameSite Cookie 这是一种

1205
00:41:47,176 --> 0:41:49,766
打击伪造请求的方法

1206
00:41:49,816 --> 0:41:51,936
为了对付某些钓鱼页面

1207
00:41:52,026 --> 0:41:52,816
隐藏到你的服务器上

1208
00:41:52,906 --> 0:41:54,456
你会知道 因为

1209
00:41:54,456 --> 0:41:56,036
当你被嵌入时 

1210
00:41:56,036 --> 0:41:57,496
不会发送 SameSite Cookie 所以你

1211
00:41:57,496 --> 0:41:59,336
不用接受请求

1212
00:42:00,236 --> 0:42:01,376
它也发生在抵御

1213
00:42:01,426 --> 0:42:02,946
预测执行攻击上

1214
00:42:03,236 --> 0:42:04,976
因为如果一个恶意页面

1215
00:42:04,976 --> 0:42:06,606
试图吸入你的资源

1216
00:42:06,606 --> 0:42:08,476
以便能够利用对它们的攻击

1217
00:42:08,476 --> 0:42:10,616
那么同样 SameSite Cookie

1218
00:42:10,616 --> 0:42:11,976
将不会被发送 你也可以

1219
00:42:11,976 --> 0:42:12,916
拒绝加载

1220
00:42:13,486 --> 0:42:15,506
然后我们了解了这些新

1221
00:42:15,506 --> 0:42:18,216
技术 即跨域资源策略

1222
00:42:18,786 --> 0:42:20,996
你可以说

1223
00:42:20,996 --> 0:42:23,366
这是图像 脚本和其他

1224
00:42:23,366 --> 0:42:25,556
跨域加载的方式 拒绝它们

1225
00:42:25,556 --> 0:42:27,996
只需加载到我的页面上

1226
00:42:28,506 --> 0:42:32,306
最后 控制窗口是为了确保

1227
00:42:32,306 --> 0:42:34,686
如果其他人

1228
00:42:34,686 --> 0:42:36,556
在自己的窗口中打开网页内容

1229
00:42:36,556 --> 0:42:37,136
该句柄就会消失

1230
00:42:40,286 --> 0:42:41,786
这些都是很容易采用的

1231
00:42:42,246 --> 0:42:44,266
尤其是对你来说

1232
00:42:44,386 --> 0:42:45,826
你了解你的网站

1233
00:42:45,826 --> 0:42:47,106
知道你的网站内容

1234
00:42:47,106 --> 0:42:48,176
了解 App 知道它们该

1235
00:42:48,176 --> 0:42:49,096
如何工作

1236
00:42:49,316 --> 0:42:50,586
如果我们只为所有人

1237
00:42:50,586 --> 0:42:51,906
默认打开它

1238
00:42:51,906 --> 0:42:53,796
它可能会破坏一些东西 

1239
00:42:53,796 --> 0:42:56,246
所以你需要选择这个

1240
00:42:56,326 --> 0:42:58,076
通过选择方法

1241
00:42:58,076 --> 0:42:59,266
你应该检查安全性

1242
00:42:59,266 --> 0:43:01,356
是否正常工作你可以尝试

1243
00:42:59,266 --> 0:43:01,356
是否正常工作你可以尝试

1244
00:43:01,356 --> 0:43:02,286
对自己的内容进行攻击

1245
00:43:02,286 --> 0:43:05,006
确保我的内容安全策略

1246
00:43:05,006 --> 0:43:06,846
能够保护我 很好

1247
00:43:06,846 --> 0:43:09,706
当然还要测试本就存在的功能

1248
00:43:11,826 --> 0:43:12,526
我们有一个博客

1249
00:43:12,786 --> 0:43:14,286
WebKit 项目是一个

1250
00:43:14,286 --> 0:43:15,016
公开资源的项目

1251
00:43:15,276 --> 0:43:16,576
我们有一个博客来

1252
00:43:16,576 --> 0:43:17,856
讨论这些技术

1253
00:43:17,856 --> 0:43:18,596
和其他事情

1254
00:43:18,966 --> 0:43:20,536
这是我们将在

1255
00:43:20,536 --> 0:43:22,446
这两个最后响应头上更新的地方

1256
00:43:22,786 --> 0:43:24,626
跨域资源策略

1257
00:43:24,626 --> 0:43:26,296
和跨域窗口策略

1258
00:43:26,656 --> 0:43:28,156
因为我们仍在与

1259
00:43:28,156 --> 0:43:29,276
其他浏览器

1260
00:43:29,276 --> 0:43:30,786
供应商讨论这些问题 试图确保

1261
00:43:30,786 --> 0:43:32,106
它们是标准的

1262
00:43:32,436 --> 0:43:34,316
以便相同的响应头

1263
00:43:34,316 --> 0:43:35,756
在所有浏览器上有效运行

1264
00:43:36,296 --> 0:43:37,896
因此 可能会有轻微的

1265
00:43:37,896 --> 0:43:40,656
名称更改或添加的属性

1266
00:43:40,656 --> 0:43:42,076
但我们目前还没有

1267
00:43:42,586 --> 0:43:44,736
此外 它很新

1268
00:43:44,736 --> 0:43:46,016
所以你实际上无法进入

1269
00:43:46,016 --> 0:43:48,936
直到有种子二或公共种子

1270
00:43:49,476 --> 0:43:51,326
我们还没有完全支持

1271
00:43:51,326 --> 0:43:53,336
开发人员的种子

1272
00:43:55,486 --> 0:43:56,946
我再推荐一下其他的会议

1273
00:43:57,096 --> 0:43:58,456
请来看我们 包括我

1274
00:43:58,456 --> 0:44:00,266
明天在 2:00 在 Safari WebKit

1275
00:43:58,456 --> 0:44:00,266
明天在 2:00 在 Safari WebKit

1276
00:44:00,266 --> 0:44:02,546
和密码自动填充实验室

1277
00:44:02,546 --> 0:44:04,256
你可以到那里

1278
00:44:04,256 --> 0:44:06,396
与我或我的同事讨论

1279
00:44:06,396 --> 0:44:07,766
如何部署这些技术

1280
00:44:07,766 --> 0:44:09,266
让他们更好的为你服务

1281
00:44:09,966 --> 0:44:11,116
周五还有一个会议

1282
00:44:11,116 --> 0:44:13,336
一个关于

1283
00:44:13,336 --> 0:44:16,676
Safari 和 WebKit 中新内容的综合会议 谢谢

1284
00:44:17,516 --> 0:44:22,500
［ 掌声 ］
