1
00:00:16,950 --> 0:00:21,622
（通知群组的使用 演讲711）

2
00:00:23,557 --> 0:00:25,893
谢谢 下午好 欢迎

3
00:00:26,260 --> 0:00:27,394
我叫Michele

4
00:00:27,461 --> 0:00:30,097
在iOS用户通知团队工作

5
00:00:31,532 --> 0:00:34,735
几分钟前

6
00:00:34,801 --> 0:00:36,737
向你介绍了群组通知

7
00:00:37,037 --> 0:00:41,808
现在我们将更详细地

8
00:00:41,875 --> 0:00:43,143
探讨这个功能

9
00:00:43,210 --> 0:00:46,613
我们将学习如何使用

10
00:00:47,014 --> 0:00:50,551
以及如何使其更有条理

11
00:00:52,719 --> 0:00:55,455
首先我们简要概述一下

12
00:00:55,522 --> 0:00:56,523
该功能的工作原理

13
00:00:56,590 --> 0:00:59,193
以及UI的各部分如何协调

14
00:00:59,693 --> 0:01:02,963
然后我们来看看默认分组

15
00:00:59,693 --> 0:01:02,963
然后我们来看看默认分组

16
00:01:03,330 --> 0:01:07,234
我们将了解如何创建自定义通知群组

17
00:01:07,301 --> 0:01:11,171
以便你根据app内容调整群组

18
00:01:12,573 --> 0:01:14,274
最后 我们将学习

19
00:01:14,341 --> 0:01:17,444
如何为你的新通知群组

20
00:01:21,481 --> 0:01:24,818
我们先简要介绍一下该功能的UI

21
00:01:26,553 --> 0:01:31,291
通知群组收集不同通知

22
00:01:31,358 --> 0:01:33,927
并将它们分组排一个小堆栈中

23
00:01:34,294 --> 0:01:37,664
这样使Notification Center更有条理

24
00:01:37,731 --> 0:01:39,600
并且对用户更高效

25
00:01:39,666 --> 0:01:42,569
这样用户可以同时看到更多通知

26
00:01:42,636 --> 0:01:46,840
而不会被任何全屏的app挡住

27
00:01:46,907 --> 0:01:48,642
从而看不到一些内容

28
00:01:50,611 --> 0:01:54,047
每个通知群组都会在其顶部

29
00:01:54,114 --> 0:01:56,416
显示本组的最新通知

30
00:01:56,683 --> 0:01:59,052
我们将此称为主通知

31
00:02:00,287 --> 0:02:03,924
主通知下方

32
00:02:03,991 --> 0:02:05,926
提供一些

33
00:02:05,993 --> 0:02:08,829
关于组中包含的其他通知的细节

34
00:02:09,096 --> 0:02:14,468
提供一个组内通知总数

35
00:02:14,535 --> 0:02:19,306
有时还有有关通知内容的详细信息

36
00:02:22,643 --> 0:02:26,013
通知群组还有助于通知分类

37
00:02:26,079 --> 0:02:27,948
例如 只需轻轻一滑

38
00:02:28,015 --> 0:02:31,552
你可以清除该组中的所有通知

39
00:02:31,618 --> 0:02:32,719
全部清除它们

40
00:02:33,987 --> 0:02:36,823
同样容易的是扩展群组

41
00:02:36,890 --> 0:02:40,460
查看内部的所有通知

42
00:02:40,527 --> 0:02:42,396
也许清除一条

43
00:02:42,729 --> 0:02:45,666
当完成后 你可以清除所有通知

44
00:02:45,732 --> 0:02:48,402
用顶部的组按键 清除所有组内通知

45
00:02:52,172 --> 0:02:57,978
这是对该功能的一个非常简短的概述

46
00:02:58,045 --> 0:03:01,481
让你熟悉对UI的不同部分和术语

47
00:02:58,045 --> 0:03:01,481
让你熟悉对UI的不同部分和术语

48
00:03:02,015 --> 0:03:06,119
现在我们看看这些群组如何运作

49
00:03:07,521 --> 0:03:09,790
默认行为是app分组

50
00:03:10,591 --> 0:03:13,961
每个app都有自己的群组

51
00:03:14,027 --> 0:03:16,730
来自该app的所有通知

52
00:03:17,197 --> 0:03:19,700
如果你不作任何操作就是这个设定

53
00:03:19,766 --> 0:03:25,606
你会在不采用任何新API的情况下

54
00:03:27,541 --> 0:03:32,279
许多情况下 app分组就足够了

55
00:03:32,346 --> 0:03:36,016
例如 在播客app

56
00:03:36,083 --> 0:03:41,889
所有通知同属一组

57
00:03:41,989 --> 0:03:45,692
它们是节目新剧集的通知

58
00:03:46,059 --> 0:03:49,596
所以 不存在有的具体通知更有意思

59
00:03:49,663 --> 0:03:52,900
或更重要 而需要作不同的显示

60
00:03:55,002 --> 0:03:59,072
刚才说过 我们可以轻松点击群组

61
00:03:59,139 --> 0:04:01,275
并查看该组内的详细信息

62
00:03:59,139 --> 0:04:01,275
并查看该组内的详细信息

63
00:04:06,513 --> 0:04:10,884
所以 app分组很好

64
00:04:10,951 --> 0:04:13,887
使Notification Center

65
00:04:14,454 --> 0:04:18,392
但许多app有更特别的内容

66
00:04:18,458 --> 0:04:20,827
它们可能需要不同的组织方式

67
00:04:20,894 --> 0:04:23,797
使通知更有效率

68
00:04:24,731 --> 0:04:25,632
据此

69
00:04:25,699 --> 0:04:27,301
我们可以创建自定义分组

70
00:04:27,968 --> 0:04:30,537
在这场讨论中 我们将首先看看

71
00:04:30,604 --> 0:04:34,341
用于为通知创建自定义组的API

72
00:04:34,842 --> 0:04:39,680
然后我们看一下iOS 12中的

73
00:04:41,014 --> 0:04:43,917
探索这些app采用的一些模式

74
00:04:43,984 --> 0:04:47,221
以及它们在用户可见的内容

75
00:04:47,287 --> 0:04:49,590
以及群组涵盖内容

76
00:04:49,656 --> 0:04:52,092
之间如何寻找平衡

77
00:04:52,159 --> 0:04:55,462
以帮助Notification Center的组织

78
00:04:57,764 --> 0:05:01,969
这就是为你的app创建群组的方式

79
00:04:57,764 --> 0:05:01,969
这就是为你的app创建群组的方式

80
00:05:02,369 --> 0:05:06,373
你只需在通知内容中

81
00:05:08,375 --> 0:05:09,843
完成此操作后

82
00:05:09,910 --> 0:05:13,380
你使用相同线程标识符

83
00:05:13,747 --> 0:05:16,984
将在Notification Center

84
00:05:18,952 --> 0:05:20,988
线程标识符可以是任何字符串

85
00:05:21,922 --> 0:05:23,457
用什么标识都没关系

86
00:05:23,891 --> 0:05:26,326
所有通知都会据此组合在一起

87
00:05:26,827 --> 0:05:28,829
你只需要为其独特命名

88
00:05:28,896 --> 0:05:31,832
你只需要一个唯一的字符串

89
00:05:32,933 --> 0:05:34,067
这就行了

90
00:05:34,134 --> 0:05:36,603
你为通知创建了一个群组

91
00:05:37,571 --> 0:05:40,908
但鉴于它如此简单

92
00:05:41,642 --> 0:05:44,811
我们需要注意如何创建这些组

93
00:05:46,346 --> 0:05:49,183
而且如果你熟悉通知API

94
00:05:49,650 --> 0:05:51,885
你会注意到这不是一个新的API

95
00:05:51,952 --> 0:05:55,222
这是前期iOS版本中引入的API

96
00:05:55,289 --> 0:05:58,492
因此 它已经存在于当前的iOS中

97
00:05:58,959 --> 0:06:03,897
过去我们介绍了丰富的通知

98
00:05:58,959 --> 0:06:03,897
过去我们介绍了丰富的通知

99
00:06:04,231 --> 0:06:06,333
所以 如果你已经采用了这个API

100
00:06:06,867 --> 0:06:10,337
以支持以前iOS版本中的

101
00:06:10,404 --> 0:06:14,074
你的通知已经在iOS 12中

102
00:06:15,409 --> 0:06:18,078
你可能想要复习群组的创建方式

103
00:06:18,145 --> 0:06:20,480
因为现在API的上下文有点变化

104
00:06:20,781 --> 0:06:24,117
所以稍微调整一下可能会更好

105
00:06:26,119 --> 0:06:29,056
在这个例子中

106
00:06:29,122 --> 0:06:31,558
在本地通知上设置线程标识符

107
00:06:32,726 --> 0:06:36,663
你可以在推送有效负载上

108
00:06:42,336 --> 0:06:47,140
好 现在让我们来看看

109
00:06:48,442 --> 0:06:52,112
在我们看这些例子时

110
00:06:52,179 --> 0:06:54,348
即通知分组的目标

111
00:06:54,982 --> 0:07:01,722
通过对通知进行分组

112
00:06:54,982 --> 0:07:01,722
通过对通知进行分组

113
00:07:01,788 --> 0:07:05,025
并改进

114
00:07:05,359 --> 0:07:09,096
你可能熟悉这种情况

115
00:07:09,162 --> 0:07:10,531
某个app发送了许多通知

116
00:07:10,597 --> 0:07:12,366
也许你在app里聊天

117
00:07:12,933 --> 0:07:16,170
有人发送了大量消息

118
00:07:16,737 --> 0:07:20,574
我们想通过组织通知来改善这种情况

119
00:07:20,641 --> 0:07:24,244
以便用户可以更有效地使用它们

120
00:07:28,382 --> 0:07:30,384
我们的第一个例子是日历

121
00:07:33,220 --> 0:07:38,292
根据你的生活组织方式或工作地点

122
00:07:38,358 --> 0:07:42,896
很多事件更改及事件邀请的通知

123
00:07:43,997 --> 0:07:46,967
但并非所有通知都有相同的重要性

124
00:07:47,034 --> 0:07:49,436
日历发送的有些通知

125
00:07:49,503 --> 0:07:51,271
比其它通知更重要

126
00:07:51,772 --> 0:07:53,006
这些是…

127
00:07:55,175 --> 0:07:58,011
你在创建活动时设置的事件提醒

128
00:07:58,445 --> 0:08:00,480
或“该走了”通知

129
00:07:58,445 --> 0:08:00,480
或“该走了”通知

130
00:08:00,547 --> 0:08:01,682
这些通知更重要

131
00:08:01,748 --> 0:08:05,752
因为它们提示我现在要采取行动

132
00:08:05,819 --> 0:08:08,956
如果我收到通知

133
00:08:09,022 --> 0:08:11,592
我需要开始去赴会

134
00:08:12,459 --> 0:08:15,329
但许多其他通知

135
00:08:15,395 --> 0:08:18,732
不需要立即回应

136
00:08:18,799 --> 0:08:21,768
比如分享日历的更新

137
00:08:22,169 --> 0:08:24,438
或其他事件的时间变化

138
00:08:24,505 --> 0:08:27,241
当天晚些时候或某天

139
00:08:28,442 --> 0:08:30,644
所以分开这两类通知很有用

140
00:08:31,778 --> 0:08:36,517
日历的作法是用默认组即app组

141
00:08:36,582 --> 0:08:39,852
处理发送的大部分通知

142
00:08:40,187 --> 0:08:43,222
实现办法是 对大部分通知

143
00:08:43,289 --> 0:08:45,459
不设置任何线程标识符

144
00:08:45,993 --> 0:08:47,628
邮件是默认值

145
00:08:47,694 --> 0:08:50,297
如果你不设置它 这是默认的群组

146
00:08:51,532 --> 0:08:55,536
然后 日历设置特定的线程标识符

147
00:08:55,602 --> 0:08:58,639
仅针对这些更重要的通知

148
00:08:58,705 --> 0:09:00,207
我们想特别提起注意的通知

149
00:08:58,705 --> 0:09:00,207
我们想特别提起注意的通知

150
00:09:02,809 --> 0:09:04,945
结果就是…

151
00:09:06,146 --> 0:09:11,518
来自日历的大多数通知都是信息更新

152
00:09:11,985 --> 0:09:15,589
不需要立即做出反应

153
00:09:15,656 --> 0:09:18,959
或者不需要留给以后参考

154
00:09:19,026 --> 0:09:22,930
例如提示事件位置的通知

155
00:09:23,764 --> 0:09:26,500
而其他更重要的

156
00:09:26,567 --> 0:09:29,636
更紧急的

157
00:09:29,703 --> 0:09:34,107
比如找到会议地点

158
00:09:37,044 --> 0:09:42,783
我展开一下 看到我的群组还有什么

159
00:09:44,384 --> 0:09:48,689
这是我们从日历中学到的模式

160
00:09:49,089 --> 0:09:51,892
把重要且可操作的通知

161
00:09:51,959 --> 0:09:53,594
与信息更新的通知分隔开

162
00:09:58,765 --> 0:10:01,368
我们的下一个例子是短信

163
00:09:58,765 --> 0:10:01,368
我们的下一个例子是短信

164
00:10:02,703 --> 0:10:04,137
短信可能是

165
00:10:04,204 --> 0:10:07,841
最简单的通知群组的实现

166
00:10:08,375 --> 0:10:11,645
显而易见 短信包含对话

167
00:10:12,212 --> 0:10:14,448
每个对话都有自己的群组

168
00:10:16,083 --> 0:10:18,585
但我们仍可以学到重要的东西

169
00:10:18,652 --> 0:10:21,355
我们仍然可以从短信中学习

170
00:10:21,855 --> 0:10:24,858
为什么短信把所有对话

171
00:10:24,925 --> 0:10:28,729
分在不同的组中？

172
00:10:29,730 --> 0:10:31,865
短信发送的通知

173
00:10:31,932 --> 0:10:34,301
通常来自人

174
00:10:34,368 --> 0:10:36,136
来自你的朋友和家人

175
00:10:36,203 --> 0:10:39,806
这些是我们关心并重视的通知

176
00:10:39,873 --> 0:10:44,211
其次 它们通常是短暂的通知

177
00:10:44,278 --> 0:10:46,980
因为通常情况下

178
00:10:47,047 --> 0:10:49,716
从而从Notifications Center清除

179
00:10:51,818 --> 0:10:53,053
短信的做法

180
00:10:53,120 --> 0:10:57,958
是为这些一对一对话创建一个线程

181
00:10:58,258 --> 0:11:01,028
它会创建一个单独的通知组

182
00:10:58,258 --> 0:11:01,028
它会创建一个单独的通知组

183
00:11:01,094 --> 0:11:03,197
用于群组对话

184
00:11:03,764 --> 0:11:08,302
只需为该线程生成任何组标识符

185
00:11:08,368 --> 0:11:09,670
并将它们组合在一起

186
00:11:13,907 --> 0:11:17,177
我可以展开并看到我的所有消息

187
00:11:18,645 --> 0:11:21,982
那么我们从短信中学到了什么？

188
00:11:22,583 --> 0:11:26,186
为有意义的个人通信创建群组

189
00:11:26,520 --> 0:11:27,855
这些短信通知

190
00:11:27,921 --> 0:11:30,424
通常很重要

191
00:11:30,490 --> 0:11:34,628
它们在Notification Center

192
00:11:34,695 --> 0:11:38,899
因此

193
00:11:43,170 --> 0:11:44,872
我们的最后一个例子是邮件

194
00:11:46,507 --> 0:11:47,841
邮件与短信

195
00:11:48,242 --> 0:11:51,645
有一些相同的特征

196
00:11:52,145 --> 0:11:56,049
它们都经常是人与人的直接沟通

197
00:11:56,583 --> 0:12:02,589
二者有类似的概念

198
00:11:56,583 --> 0:12:02,589
二者有类似的概念

199
00:12:03,490 --> 0:12:04,758
如线程及对话

200
00:12:05,993 --> 0:12:10,030
但邮件和短信之间存在一些重大差异

201
00:12:10,564 --> 0:12:15,102
邮件的通知数量可能高于短信

202
00:12:15,669 --> 0:12:20,274
另一方面

203
00:12:21,608 --> 0:12:26,246
邮件通常用于较慢的通信

204
00:12:26,313 --> 0:12:29,483
一般不需立即回应

205
00:12:30,651 --> 0:12:31,485
所以

206
00:12:31,718 --> 0:12:38,125
按线程组织邮件通知并不理想

207
00:12:38,192 --> 0:12:42,095
这将在Notification Center中

208
00:12:42,162 --> 0:12:46,200
这样的UI效率不高

209
00:12:46,266 --> 0:12:51,471
邮件提供了特定UI显示邮件线程

210
00:12:52,573 --> 0:12:55,843
那么 邮件如何组织其通知？

211
00:12:57,344 --> 0:13:02,115
首先 邮件提供了一些邮件到达时

212
00:12:57,344 --> 0:13:02,115
首先 邮件提供了一些邮件到达时

213
00:13:02,182 --> 0:13:03,917
已有的组织的功能

214
00:13:03,984 --> 0:13:05,586
和优先处理功能

215
00:13:07,020 --> 0:13:10,858
邮件提供单独的帐户

216
00:13:10,924 --> 0:13:12,292
设置许多不同的帐户

217
00:13:13,026 --> 0:13:17,931
提供VIP功能

218
00:13:18,999 --> 0:13:21,702
你可以设收藏夹

219
00:13:22,336 --> 0:13:25,372
你也可以在邮件客户端

220
00:13:25,439 --> 0:13:27,341
打开特定线程的通知

221
00:13:28,876 --> 0:13:32,513
所以似乎用户已经在告诉我们

222
00:13:32,579 --> 0:13:36,083
哪些通知和邮件更重要

223
00:13:36,149 --> 0:13:37,851
哪些不太重要

224
00:13:37,918 --> 0:13:39,319
这就是邮件所做的

225
00:13:39,786 --> 0:13:46,093
邮件首先从帐号组开始组织通知

226
00:13:46,426 --> 0:13:48,862
它为所有投递给特定帐号的邮件

227
00:13:48,929 --> 0:13:50,964
创建一个大帐号

228
00:13:51,732 --> 0:13:55,169
如果我有多个帐号

229
00:13:56,603 --> 0:13:57,437
然而

230
00:13:58,572 --> 0:14:03,243
如果我的VIP联系人

231
00:13:58,572 --> 0:14:03,243
如果我的VIP联系人

232
00:14:03,844 --> 0:14:07,047
该邮件会被分到另一个群组

233
00:14:07,748 --> 0:14:09,516
因为我指定了那是VIP

234
00:14:09,583 --> 0:14:13,487
当VIP发送电子邮件时

235
00:14:13,554 --> 0:14:14,655
立即得到通知

236
00:14:16,089 --> 0:14:21,128
而且如果我打开邮件内

237
00:14:21,795 --> 0:14:25,399
它们也会分离到自己的小组中

238
00:14:29,102 --> 0:14:32,840
所以你看到虽然邮件与短信

239
00:14:32,906 --> 0:14:36,710
在某些特征上类似

240
00:14:37,177 --> 0:14:39,780
它们分组通知的方法略有不同

241
00:14:39,847 --> 0:14:42,950
因为它们使用通知的方法

242
00:14:43,016 --> 0:14:44,818
及处理的内容不同

243
00:14:46,520 --> 0:14:49,223
那么 这里邮件在告诉我们什么？

244
00:14:49,723 --> 0:14:52,726
尊重用户的优先级设定和组织

245
00:14:53,093 --> 0:14:58,031
邮件具有组织和确定优先级的功能

246
00:14:58,332 --> 0:15:02,469
我们可以用它来组织邮件发送的通知

247
00:14:58,332 --> 0:15:02,469
我们可以用它来组织邮件发送的通知

248
00:15:05,572 --> 0:15:10,177
（通知组摘要）

249
00:15:10,244 --> 0:15:15,015
我们已看到了如何创建任意数量的组

250
00:15:16,817 --> 0:15:21,321
我们来看看

251
00:15:21,388 --> 0:15:24,124
描述它们包含的内容

252
00:15:25,692 --> 0:15:28,328
而使这些群组更加清晰

253
00:15:30,864 --> 0:15:35,035
这些例子是我上周的

254
00:15:35,669 --> 0:15:38,505
这里我们看到

255
00:15:38,639 --> 0:15:41,108
了该组的内容略作解释

256
00:15:41,642 --> 0:15:46,180
例如 邮件说

257
00:15:47,414 --> 0:15:50,384
播客说我有一堆新剧集

258
00:15:50,450 --> 0:15:54,354
已发送到我的播客app以收听

259
00:15:56,523 --> 0:15:58,192
而新闻告诉我

260
00:15:58,258 --> 0:16:01,428
我有九个

261
00:15:58,258 --> 0:16:01,428
我有九个

262
00:16:05,165 --> 0:16:07,634
让我们稍加探讨一下

263
00:16:07,701 --> 0:16:12,506
如果你不自定义摘要

264
00:16:12,573 --> 0:16:14,474
说你还有九个通知

265
00:16:15,108 --> 0:16:19,313
但我们可以更好地描述这些内容

266
00:16:19,379 --> 0:16:22,316
例如 如果你有一个

267
00:16:22,883 --> 0:16:27,621
你可能想说你正在发送九条消息

268
00:16:28,355 --> 0:16:29,189
怎样做到这个？

269
00:16:30,991 --> 0:16:34,294
第一件事就是选择摘要格式

270
00:16:34,361 --> 0:16:35,562
这是一个格式字符串

271
00:16:36,029 --> 0:16:39,633
只是用数字占位符描述你的内容

272
00:16:39,700 --> 0:16:42,669
正如我们在这里看到的

273
00:16:44,137 --> 0:16:48,342
然后在通知类别中设置

274
00:16:49,243 --> 0:16:51,245
你将用于发送通知的格式字符串

275
00:16:54,548 --> 0:16:57,618
注意 摘要格式是在类别上设置的

276
00:16:57,684 --> 0:17:00,988
而线程是在通知内容上设置的

277
00:16:57,684 --> 0:17:00,988
而线程是在通知内容上设置的

278
00:17:01,054 --> 0:17:03,590
这是因为如你所知 类别

279
00:17:03,657 --> 0:17:09,429
指的是类型

280
00:17:09,930 --> 0:17:12,499
例如 短信有不同的类别

281
00:17:12,566 --> 0:17:16,837
用于一对一对话和群组对话

282
00:17:16,904 --> 0:17:19,239
这意味着这两个类别

283
00:17:19,306 --> 0:17:20,807
可以设置不同的摘要

284
00:17:21,074 --> 0:17:23,911
这就是在类别中设置摘要格式的原因

285
00:17:27,714 --> 0:17:28,949
当你在这里时

286
00:17:29,016 --> 0:17:32,886
更新通知组的通知类别

287
00:17:32,953 --> 0:17:37,024
你也可以设置这个

288
00:17:37,824 --> 0:17:41,995
与我们用于通知组的摘要非常相似

289
00:17:42,596 --> 0:17:46,767
这两者之间的主要区

290
00:17:47,534 --> 0:17:49,837
hiddenPreviewsPlaceholder

291
00:17:49,903 --> 0:17:53,006
这是我们去年在iOS 11中

292
00:17:53,640 --> 0:17:57,778
它会自定义显示的文本

293
00:17:57,845 --> 0:18:02,282
而不是用户将其通知

294
00:17:57,845 --> 0:18:02,282
而不是用户将其通知

295
00:18:02,716 --> 0:18:07,855
如果我将通知设置为私有

296
00:18:08,255 --> 0:18:11,258
但是 当我作身份验证并解锁设备时

297
00:18:11,325 --> 0:18:14,695
我可以在下面看到展开的通知和摘要

298
00:18:14,928 --> 0:18:17,164
说还有八条短信

299
00:18:17,397 --> 0:18:21,768
这就是为什么摘要格式包含更多消息

300
00:18:21,969 --> 0:18:25,806
但预览占位符仅包含短信数

301
00:18:31,411 --> 0:18:36,283
这就是摘要的基本设置

302
00:18:36,750 --> 0:18:38,952
但是群组对话的消息

303
00:18:39,019 --> 0:18:43,590
有一个更有趣的摘要

304
00:18:43,657 --> 0:18:45,492
还有在那个线程 那个对话

305
00:18:45,559 --> 0:18:49,997
发短信的人

306
00:18:51,064 --> 0:18:53,934
我们不能用刚刚指定的格式

307
00:18:54,001 --> 0:18:56,737
因为它只有一个数字占位符

308
00:18:57,604 --> 0:19:02,142
所以 我们要做的是

309
00:18:57,604 --> 0:19:02,142
所以 我们要做的是

310
00:19:02,442 --> 0:19:09,149
包含数字占位符和字符串占位符

311
00:19:09,216 --> 0:19:13,287
如你所见

312
00:19:13,620 --> 0:19:16,390
我们将把第二个占位符

313
00:19:16,456 --> 0:19:19,359
以通知中的名称列表来替换

314
00:19:21,161 --> 0:19:23,430
仍然在类别中设置摘要格式

315
00:19:24,431 --> 0:19:26,800
然后我们必须收集这些名称

316
00:19:28,602 --> 0:19:33,607
要发送这些名称

317
00:19:33,674 --> 0:19:36,310
因为每个通知都可以由不同的人发送

318
00:19:36,376 --> 0:19:37,911
可以是不同的名字

319
00:19:40,581 --> 0:19:42,983
所以 我们收集所有这些名字

320
00:19:43,650 --> 0:19:48,889
在字符串中构建并在摘要中替换它们

321
00:19:48,956 --> 0:19:53,427
当然 推送有效负载也支持摘要参数

322
00:19:54,795 --> 0:19:59,199
这就是我们收集所有名称后的摘要

323
00:19:59,266 --> 0:20:01,235
并在摘要参数中设定其格式

324
00:19:59,266 --> 0:20:01,235
并在摘要参数中设定其格式

325
00:20:06,373 --> 0:20:08,075
名称不必是唯一的

326
00:20:08,141 --> 0:20:12,079
你可以用同一个名称发送许多通知

327
00:20:12,479 --> 0:20:18,252
例如 在邮件案例中

328
00:20:18,318 --> 0:20:20,087
因为它们都在同一个帐号中

329
00:20:20,153 --> 0:20:22,356
我们将删除重复数据

330
00:20:22,422 --> 0:20:26,693
并且只显示每个可见名称的一个实例

331
00:20:32,199 --> 0:20:34,868
下一个例子是播客

332
00:20:35,302 --> 0:20:38,939
播客向我们展示了

333
00:20:40,274 --> 0:20:42,242
此通知有什么特别之处？

334
00:20:42,843 --> 0:20:44,945
在此通知中 播客说

335
00:20:45,012 --> 0:20:51,451
我的主要通知播客中有两集新剧

336
00:20:53,554 --> 0:20:56,123
总结说众多节目中

337
00:20:56,190 --> 0:20:57,925
还有七集

338
00:20:58,792 --> 0:21:00,727
当我扩展这个群体时会发生什么？

339
00:20:58,792 --> 0:21:00,727
当我扩展这个群体时会发生什么？

340
00:21:03,564 --> 0:21:07,534
群组中只有三个外部通知

341
00:21:07,768 --> 0:21:11,572
不像总结说的那样是7个

342
00:21:11,638 --> 0:21:15,676
摘要中的数量

343
00:21:15,742 --> 0:21:17,144
与组内通知数量相匹配

344
00:21:18,278 --> 0:21:19,713
那么这是怎么回事？

345
00:21:21,181 --> 0:21:24,952
因为播客集中这些通知

346
00:21:25,018 --> 0:21:28,388
并在一个节目发布多集时

347
00:21:28,789 --> 0:21:31,124
试图限制发送的通知数量

348
00:21:31,191 --> 0:21:34,595
同时 它有这些通知说

349
00:21:34,661 --> 0:21:37,364
“有两集新剧集选择

350
00:21:38,565 --> 0:21:43,670
如果你把底部三个通知中的剧集

351
00:21:43,737 --> 0:21:46,306
这就是摘要所算的

352
00:21:46,373 --> 0:21:47,975
你可以看到总数是7

353
00:21:49,676 --> 0:21:52,012
让我们看看这个API是如何工作的

354
00:21:53,447 --> 0:21:56,583
这只是通知内容的另一个属性

355
00:21:56,650 --> 0:21:59,052
称为summaryArgumentCount

356
00:22:00,020 --> 0:22:03,123
此数字表示

357
00:22:03,190 --> 0:22:06,894
在摘要中摘要参数的计数

358
00:22:08,328 --> 0:22:12,900
我们将再次收集所有名称

359
00:22:12,966 --> 0:22:16,203
我们将统计所有计数 创建摘要

360
00:22:17,304 --> 0:22:20,707
正如我们所看到的 这个通知会有

361
00:22:21,141 --> 0:22:25,179
summaryArgumentCount计数

362
00:22:25,746 --> 0:22:28,048
这就是我们展示的摘要

363
00:22:30,384 --> 0:22:31,685
而且和其它部分一样

364
00:22:31,752 --> 0:22:34,221
你当然可以在推送有效负载中设置它

365
00:22:38,225 --> 0:22:42,829
summaryArgumentCount

366
00:22:42,896 --> 0:22:46,533
因此你只有对通知

367
00:22:46,600 --> 0:22:47,968
而非任何时候都需要设置

368
00:22:50,537 --> 0:22:53,841
（摘要复数和本地化）

369
00:22:53,907 --> 0:22:59,246
现在 我们正在玩文字 建句子

370
00:22:59,313 --> 0:23:05,285
而且这时

371
00:22:59,313 --> 0:23:05,285
而且这时

372
00:23:05,652 --> 0:23:09,089
并且在这种情况下需要考虑复数

373
00:23:12,059 --> 0:23:14,294
另一个播客通知

374
00:23:14,361 --> 0:23:17,431
例如 在这种情况下

375
00:23:17,865 --> 0:23:22,536
但如果我只有一集

376
00:23:23,270 --> 0:23:25,873
但API只允许我们设置一个字符串

377
00:23:27,207 --> 0:23:28,242
而我们需要两个

378
00:23:29,710 --> 0:23:31,011
你需要两个的英语表述

379
00:23:31,712 --> 0:23:36,283
但是如果你想本地化你的app

380
00:23:36,350 --> 0:23:38,185
或者如果你的主要语言不是英语

381
00:23:38,252 --> 0:23:40,521
你正在为不同的语言做开发

382
00:23:41,054 --> 0:23:44,458
某些语言对复数有不同的规则

383
00:23:44,525 --> 0:23:47,060
也许它们没有两个形式

384
00:23:47,828 --> 0:23:50,430
它们可能会有适用不同规则的形式

385
00:23:51,565 --> 0:23:55,169
iOS

386
00:23:55,235 --> 0:23:58,805
提供了对本地化这类字符串的支持

387
00:23:58,872 --> 0:24:02,242
所以你不需要学习所有的规则

388
00:23:58,872 --> 0:24:02,242
所以你不需要学习所有的规则

389
00:24:02,309 --> 0:24:04,912
你不需要知道

390
00:24:05,746 --> 0:24:11,018
采用和翻译每个字符串非常简单

391
00:24:11,084 --> 0:24:12,819
拥有正确的复数形式

392
00:24:18,625 --> 0:24:23,063
我们需要做的第一件事就是采用

393
00:24:23,130 --> 0:24:28,669
这“修复我们的复数问题”

394
00:24:28,735 --> 0:24:32,639
文字字符串用本地化字符串代替

395
00:24:34,007 --> 0:24:36,476
并请记住 在这里 你需要使用

396
00:24:36,543 --> 0:24:39,980
我们针对本地化字符串的

397
00:24:40,547 --> 0:24:45,652
因为我们需要存储这个本地化的

398
00:24:46,186 --> 0:24:51,058
因为如果系统语言稍后发生变化

399
00:24:51,325 --> 0:24:54,695
如果你发送通知

400
00:24:54,761 --> 0:24:57,331
正确的本地化信息

401
00:25:00,000 --> 0:25:04,538
因此 在这里设置本地化字符串后

402
00:25:05,606 --> 0:25:10,878
并在字符串dict文件中

403
00:25:11,411 --> 0:25:14,381
字符串dict文件

404
00:25:14,448 --> 0:25:20,287
它描述性能字符串和配置字典

405
00:25:20,654 --> 0:25:22,623
这个文件在底部的配置字典中

406
00:25:22,689 --> 0:25:28,695
你会看到英文单数和复数的两个版本

407
00:25:29,463 --> 0:25:32,933
如我所说 要想支持其他语言

408
00:25:33,000 --> 0:25:37,771
和不同的复数规则

409
00:25:37,871 --> 0:25:38,906
你创建一个新文件

410
00:25:38,972 --> 0:25:44,178
希伯来语有三种不同的复数形式

411
00:25:44,645 --> 0:25:49,149
俄语有三种复数 与希伯来语亦不同

412
00:25:49,249 --> 0:25:52,586
而且你不需要知道何时使用哪一个

413
00:25:52,653 --> 0:25:54,955
若你用我们提供的

414
00:25:57,057 --> 0:26:01,428
这是我们刚刚看到的简单摘要格式

415
00:25:57,057 --> 0:26:01,428
这是我们刚刚看到的简单摘要格式

416
00:26:02,029 --> 0:26:07,267
当然我们也可以使用参数格式化摘要

417
00:26:08,101 --> 0:26:12,840
你看 我们在顶部定义了格式字符串

418
00:26:13,473 --> 0:26:17,611
我们需要按键匹配配置字典

419
00:26:18,712 --> 0:26:22,716
在下面 我们为两个不同的版本

420
00:26:23,383 --> 0:26:25,886
用数字占位符指定了两个字符串

421
00:26:25,953 --> 0:26:29,990
以及我们将提供名称的列表的占位符

422
00:26:35,028 --> 0:26:35,863
所以…

423
00:26:36,663 --> 0:26:38,432
因为我们正在交换

424
00:26:38,799 --> 0:26:42,836
app和系统之间的这些格式字符串

425
00:26:43,203 --> 0:26:45,339
这些实际上是API的一部分

426
00:26:45,606 --> 0:26:50,277
因此 我们可以支持的格式数量有限

427
00:26:51,411 --> 0:26:53,113
我们需要就这些达成一致

428
00:26:53,547 --> 0:26:56,250
这就是我在这些例子中

429
00:26:56,817 --> 0:27:01,555
第一个是当你不需要参数时

430
00:26:56,817 --> 0:27:01,555
第一个是当你不需要参数时

431
00:27:02,022 --> 0:27:04,057
带有一个数字占位符的格式

432
00:27:04,124 --> 0:27:07,561
你需要指定一个无符号数字

433
00:27:09,096 --> 0:27:11,899
你可以使用的第二种格式

434
00:27:11,965 --> 0:27:16,236
是有数字占位符

435
00:27:16,803 --> 0:27:22,176
我们将自动检测你正在使用的字符串

436
00:27:26,213 --> 0:27:27,381
（快速提示）

437
00:27:27,447 --> 0:27:32,152
现在我们都完成了通知分组的功能

438
00:27:32,553 --> 0:27:35,822
但在你离场之前

439
00:27:36,356 --> 0:27:38,625
关于通知分组和这些API的提示

440
00:27:38,692 --> 0:27:43,230
这将帮你完成app中的

441
00:27:45,699 --> 0:27:50,437
第一步是组合不同的摘要

442
00:27:52,573 --> 0:27:55,676
我们看到你可以

443
00:27:55,742 --> 0:28:00,747
在不同的类别中设置不同的摘要

444
00:27:55,742 --> 0:28:00,747
在不同的类别中设置不同的摘要

445
00:28:00,814 --> 0:28:04,318
并在通知内容中并定义线程组

446
00:28:04,384 --> 0:28:08,322
表示你可以在同一组通知中

447
00:28:08,655 --> 0:28:13,093
当你这样做时会发生什么？

448
00:28:13,727 --> 0:28:19,766
如果该组中的任何摘要都没有参数

449
00:28:20,267 --> 0:28:23,370
合并列表中的所有摘要并这样显示

450
00:28:24,505 --> 0:28:28,876
但是如果组内任何通知摘要

451
00:28:28,942 --> 0:28:31,678
有任何参数

452
00:28:32,179 --> 0:28:34,948
我们将不得不回到默认消息

453
00:28:40,587 --> 0:28:45,125
第二个提示是关于丰富的通知和组

454
00:28:46,393 --> 0:28:50,564
我们不久前在iOS中

455
00:28:51,198 --> 0:28:54,601
它们与群组通知可同时工作

456
00:28:55,269 --> 0:29:00,674
当用户按下某个组

457
00:28:55,269 --> 0:29:00,674
当用户按下某个组

458
00:29:00,741 --> 0:29:03,744
将加载该群组的内容扩展程序

459
00:29:03,810 --> 0:29:07,047
你的通知

460
00:29:07,381 --> 0:29:09,716
将被主要通知加载

461
00:29:09,783 --> 0:29:13,787
显示在顶部的那个

462
00:29:13,854 --> 0:29:17,090
用通常的didReceive Notification

463
00:29:20,894 --> 0:29:25,399
加载扩展程序后

464
00:29:25,499 --> 0:29:27,801
例如 组中的相同通知

465
00:29:28,402 --> 0:29:30,070
或者如果你想显示不同的内容

466
00:29:30,137 --> 0:29:31,905
你也可以使用自己的API加载它

467
00:29:35,475 --> 0:29:38,846
当你的扩展程序打开且运行时

468
00:29:38,912 --> 0:29:42,182
如果其他通知发送到同一组

469
00:29:42,416 --> 0:29:44,351
它们有相同的线程标识符

470
00:29:44,418 --> 0:29:48,288
将和开始时一样

471
00:29:48,355 --> 0:29:52,426
被发送到你的内容扩展程序

472
00:29:56,597 --> 0:30:02,369
最后 如果你已经通过

473
00:29:56,597 --> 0:30:02,369
最后 如果你已经通过

474
00:30:02,436 --> 0:30:05,906
或从你自己的API加载

475
00:30:06,139 --> 0:30:08,809
向用户显示了额外的通知

476
00:30:08,876 --> 0:30:11,645
你该从Notification Center中

477
00:30:11,879 --> 0:30:17,284
继续保持Notification Center的

478
00:30:18,585 --> 0:30:21,455
我想回顾一下我们谈到的内容

479
00:30:22,389 --> 0:30:24,992
这是一段很长的谈话 有很多细节

480
00:30:25,058 --> 0:30:28,562
但我只希望你记住两件非常重要的事

481
00:30:29,363 --> 0:30:32,366
第一个是通知分组的目标

482
00:30:32,733 --> 0:30:37,404
通知分组的目标是更好地组织

483
00:30:37,471 --> 0:30:42,309
并帮你的用户在使用通知时提高效率

484
00:30:42,543 --> 0:30:45,846
这将帮助他们对通知进行分类

485
00:30:45,913 --> 0:30:49,349
并让他们更快地接收重要信息

486
00:30:50,717 --> 0:30:55,489
我希望你记住的第二件事

487
00:30:55,556 --> 0:30:58,759
是添加自定义摘要以提高清晰度

488
00:30:59,293 --> 0:31:03,063
正如你在我的示例中所看到的

489
00:30:59,293 --> 0:31:03,063
正如你在我的示例中所看到的

490
00:31:03,764 --> 0:31:09,136
通知组下方的一小段文字有助于

491
00:31:09,203 --> 0:31:11,138
查看该组中还有哪些新通知

492
00:31:11,205 --> 0:31:13,774
而且我不需要打开通知群组

493
00:31:13,841 --> 0:31:16,710
来查看所有有关内容

494
00:31:16,777 --> 0:31:19,913
摘要已经提供了一些信息

495
00:31:21,081 --> 0:31:25,886
我们将在本次会议结束后不久

496
00:31:26,253 --> 0:31:30,824
明早我们将有另一个实验室

497
00:31:31,725 --> 0:31:35,395
周五还有另一场关于通知的会议

498
00:31:35,462 --> 0:31:38,365
更多地讨论设计方面的问题

499
00:31:38,432 --> 0:31:41,802
及如何跨所有用户设备和不同系统

500
00:31:41,869 --> 0:31:45,272
全局化考虑你的通知

501
00:31:47,441 --> 0:31:49,877
非常感谢 再见
