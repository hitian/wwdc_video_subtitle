1
00:00:07,516 --> 0:00:15,500
［ 音乐 ］

2
00:00:18,046 --> 0:00:19,216
&gt;&gt; 大家好 欢迎来到

3
00:00:19,216 --> 0:00:22,386
有关于自动填充凭证提供商扩展的会议

4
00:00:23,846 --> 0:00:25,246
在这一视频中 我将首先给出

5
00:00:25,246 --> 0:00:26,506
一个关于

6
00:00:26,506 --> 0:00:28,006
密码自动填充功能的概览

7
00:00:28,006 --> 0:00:29,186
以及该功能是如何在 iOS 12 中被进一步改进的

8
00:00:30,386 --> 0:00:31,986
之后 我会深入讲解有关于

9
00:00:31,986 --> 0:00:33,546
密码管理 App 

10
00:00:33,606 --> 0:00:34,786
现在如何将密码自动填充

11
00:00:34,786 --> 0:00:37,326
通过 iOS 12 中的新 API 进行整合

12
00:00:38,846 --> 0:00:39,886
同时 我会推荐一些

13
00:00:39,886 --> 0:00:41,256
最佳做法

14
00:00:41,256 --> 0:00:43,866
供你们在采用这些新 API 的时候使用

15
00:00:45,556 --> 0:00:47,906
首先 我们来谈一谈密码自动填充

16
00:00:50,696 --> 0:00:52,596
iOS 11 带来了两项

17
00:00:52,596 --> 0:00:53,946
关于密码自动填充的重大改进

18
00:00:54,776 --> 0:00:56,186
第一 相关成度最高的凭证

19
00:00:56,186 --> 0:00:57,266
会直接显示在

20
00:00:57,266 --> 0:00:58,416
快速输入栏中

21
00:00:58,706 --> 0:00:59,876
所以只需要轻点一下就可以

22
00:01:00,786 --> 0:01:02,466
第二 iOS 11 带来了

23
00:01:02,466 --> 0:01:04,025
App 内的密码自动填充功能

24
00:01:04,506 --> 0:01:05,836
这使得

25
00:01:05,916 --> 0:01:07,166
使用 iCloud 钥匙串中的凭证变得极为方便

26
00:01:07,166 --> 0:01:08,826
无论是在

27
00:01:08,826 --> 0:01:10,846
网页内还是在 App 中

28
00:01:10,846 --> 0:01:12,006
比如你们刚才看到的 那个闪闪发光的 App

29
00:01:13,996 --> 0:01:17,046
在 iOS 和 tvOS 12 中 你还可以在

30
00:01:17,046 --> 0:01:18,426
Apple TV 的 App 中使用密码自动填充

31
00:01:18,526 --> 0:01:20,306
通过在一台 iOS 设备上

32
00:01:20,306 --> 0:01:23,476
来选择需要输入的凭证即可

33
00:01:23,476 --> 0:01:24,456
这些功能对于

34
00:01:24,456 --> 0:01:26,006
iCloud 钥匙串的用户来说棒极了

35
00:01:26,006 --> 0:01:27,186
但也有些用户依赖于其它的

36
00:01:27,186 --> 0:01:28,406
密码管理 App 来存储

37
00:01:28,406 --> 0:01:29,116
他们的安全凭证

38
00:01:30,656 --> 0:01:32,136
为了让这些用户在使用他们的安全凭证

39
00:01:32,136 --> 0:01:33,346
的时候 也能变得同样便捷

40
00:01:33,346 --> 0:01:38,446
iOS 12 允许密码管理 App 整合自动填充功能

41
00:01:38,446 --> 0:01:39,656
以便于提供如同 iCloud 钥匙串

42
00:01:39,656 --> 0:01:40,046
一样的体验

43
00:01:41,736 --> 0:01:44,346
在 iOS 12 中 密码自动填充设置

44
00:01:44,346 --> 0:01:45,676
有了一个全新的 UI

45
00:01:45,926 --> 0:01:47,476
允许用户自己选择

46
00:01:47,476 --> 0:01:48,776
向自动填充功能中

47
00:01:48,776 --> 0:01:51,126
提供凭证的 App 

48
00:01:51,126 --> 0:01:52,406
来作为对于 iCloud 钥匙串的补充或替代

49
00:01:52,586 --> 0:01:56,006
通过使用快速输入栏

50
00:01:56,936 --> 0:01:58,146
用户能够以列表形式浏览

51
00:01:58,146 --> 0:02:00,036
他们存储在密码管理 App 中的凭证

52
00:01:58,146 --> 0:02:00,036
他们存储在密码管理 App 中的凭证

53
00:02:00,876 --> 0:02:03,296
这一 UI 是由与密码管理 App 

54
00:02:03,296 --> 0:02:04,146
捆绑的扩展所支持的

55
00:02:04,146 --> 0:02:06,656
当一个凭证被选中

56
00:02:06,976 --> 0:02:07,986
该扩展会将其送回自动填充中

57
00:02:07,986 --> 0:02:10,515
随后用户名和密码

58
00:02:10,515 --> 0:02:11,686
就会被填入 App 中

59
00:02:12,326 --> 0:02:16,356
当然 快速输入栏预测

60
00:02:16,356 --> 0:02:16,626
也能够如此工作

61
00:02:17,186 --> 0:02:18,386
现在 自动填充能够显示出

62
00:02:18,386 --> 0:02:19,796
由 App 指定的最佳凭证

63
00:02:19,796 --> 0:02:21,396
所以 要访问

64
00:02:21,646 --> 0:02:22,416
只需轻点一下就够了

65
00:02:23,956 --> 0:02:25,486
当使用这些凭证的时候

66
00:02:25,606 --> 0:02:27,016
App 扩展可以选择性地

67
00:02:27,016 --> 0:02:28,596
显示出它的原有 UI 

68
00:02:28,596 --> 0:02:29,666
以便在输入凭证之前

69
00:02:29,666 --> 0:02:30,106
验证用户

70
00:02:33,116 --> 0:02:34,796
这一整合使得

71
00:02:34,796 --> 0:02:36,506
使用密码管理 App 的用户

72
00:02:36,506 --> 0:02:38,076
在登录 App 的时候更加便捷

73
00:02:38,076 --> 0:02:39,066
因为他们不再需要

74
00:02:39,066 --> 0:02:40,436
切换 App 来拷贝他们的凭证

75
00:02:41,846 --> 0:02:43,216
它也让密码自动填充

76
00:02:43,216 --> 0:02:44,426
能够在更多的 App 中使用

77
00:02:44,836 --> 0:02:46,346
任何支持 iCloud 钥匙串自动填充的 App

78
00:02:46,346 --> 0:02:47,826
现在都能够与

79
00:02:47,826 --> 0:02:49,336
密码管理 App 协同工作

80
00:02:49,336 --> 0:02:50,346
且不需要任何额外操作

81
00:02:50,826 --> 0:02:54,726
看过这一概览之后 

82
00:02:54,726 --> 0:02:55,926
我们来深入看一看 

83
00:02:55,926 --> 0:02:57,336
如何将这些功能

84
00:02:57,336 --> 0:02:57,926
在你的 App 中执行

85
00:02:58,576 --> 0:02:59,946
主要有四步需要讲解

86
00:03:02,336 --> 0:03:04,006
首先 你需要配置

87
00:03:04,006 --> 0:03:05,426
你的项目来使用这些

88
00:03:05,426 --> 0:03:06,536
全新的 API

89
00:03:07,226 --> 0:03:08,106
这其中包括

90
00:03:08,106 --> 0:03:09,706
向你的 App 中添加新功能

91
00:03:09,706 --> 0:03:11,006
以及向你的项目中添加扩展

92
00:03:11,526 --> 0:03:13,116
自动填充将会使用这一扩展

93
00:03:13,116 --> 0:03:14,136
当它需要访问你的 App 

94
00:03:14,136 --> 0:03:16,636
或者需要在系统中

95
00:03:17,696 --> 0:03:18,006
显示它的 UI 的时候

96
00:03:18,036 --> 0:03:19,566
其次 你的扩展需要

97
00:03:19,566 --> 0:03:20,786
能够支持以列表显示出

98
00:03:20,786 --> 0:03:21,896
用户可选择的凭证

99
00:03:21,896 --> 0:03:23,256
当他们通过 

100
00:03:23,256 --> 0:03:24,346
快速输入栏

101
00:03:24,346 --> 0:03:24,536
打开你的扩展的时候

102
00:03:26,736 --> 0:03:28,626
然后 如果你想要自动填充

103
00:03:28,626 --> 0:03:29,746
在快速输入栏内

104
00:03:29,746 --> 0:03:31,226
显示出你的 App 的凭证

105
00:03:31,226 --> 0:03:32,466
你需要为此添加支持

106
00:03:32,466 --> 0:03:33,566
通过告知系统

107
00:03:33,566 --> 0:03:34,656
你想要显示出的凭证

108
00:03:35,116 --> 0:03:36,536
并在你的扩展中

109
00:03:36,536 --> 0:03:38,746
执行另一个 API 来回应

110
00:03:38,746 --> 0:03:39,326
用户对于凭证的选择

111
00:03:40,856 --> 0:03:43,536
最后 你也许想要使用一个允许你显示出

112
00:03:43,536 --> 0:03:44,886
你的扩展的 UI 的 API 

113
00:03:44,886 --> 0:03:47,876
当用户在设置中

114
00:03:47,876 --> 0:03:48,356
选择了你的密码管理 App 时

115
00:03:49,096 --> 0:03:50,096
我们来更细致地

116
00:03:50,096 --> 0:03:50,546
了解一下这些步骤

117
00:03:53,016 --> 0:03:54,646
首先 你需要对你的项目

118
00:03:54,646 --> 0:03:55,826
做一些改动

119
00:03:56,456 --> 0:03:57,506
以在你的 App 功能中启用 

120
00:03:57,506 --> 0:04:00,556
自动填充凭证提供商为首

121
00:03:57,506 --> 0:04:00,556
自动填充凭证提供商为首

122
00:04:01,316 --> 0:04:02,716
这将为你的 App 

123
00:04:02,716 --> 0:04:04,116
添加所必需的权限

124
00:04:04,116 --> 0:04:05,696
并将其连接到新的认证服务框架

125
00:04:05,696 --> 0:04:07,716
它可以提供

126
00:04:07,716 --> 0:04:08,936
为整合密码自动填充

127
00:04:08,936 --> 0:04:09,416
所需要的 API

128
00:04:09,826 --> 0:04:13,936
随后 你需要添加一个

129
00:04:13,936 --> 0:04:15,316
自动填充凭证提供商扩展目标

130
00:04:15,316 --> 0:04:16,946
到你的项目中

131
00:04:17,676 --> 0:04:19,296
Xcode 10 包含了

132
00:04:19,296 --> 0:04:20,116
该扩展的全新模版

133
00:04:20,656 --> 0:04:23,666
该模版会为你创建一个新的

134
00:04:23,666 --> 0:04:24,706
视图控制器层级 一个 ASCredential

135
00:04:25,136 --> 0:04:27,986
ProviderViewController 的子层级

136
00:04:29,076 --> 0:04:30,326
当自动填充需要唤醒你的扩展时

137
00:04:30,326 --> 0:04:31,766
它会创建一个

138
00:04:31,766 --> 0:04:33,336
该层级的实例

139
00:04:33,336 --> 0:04:34,366
并对指定模式做出请求

140
00:04:34,766 --> 0:04:35,606
你的子层级

141
00:04:35,606 --> 0:04:36,026
将会覆盖它

142
00:04:37,756 --> 0:04:38,996
那么一旦 你已经配置好了你的项目

143
00:04:38,996 --> 0:04:41,146
在你的扩展里

144
00:04:41,146 --> 0:04:42,626
需要添加的第一样东西

145
00:04:42,626 --> 0:04:43,756
就是用户可以

146
00:04:43,756 --> 0:04:44,726
通过快速输入栏

147
00:04:44,726 --> 0:04:45,286
来浏览的凭证列表

148
00:04:45,566 --> 0:04:46,866
它是这样运作的

149
00:04:47,446 --> 0:04:50,616
当用户在登录某一 App 时

150
00:04:50,736 --> 0:04:51,926
他们可以使用快速输入栏

151
00:04:51,926 --> 0:04:53,376
来打开你的凭证列表

152
00:04:54,026 --> 0:04:56,306
此时自动填充将会

153
00:04:56,306 --> 0:04:57,776
启动你的 App 扩展

154
00:04:57,776 --> 0:04:58,946
并告知它用户在何处登录

155
00:04:58,946 --> 0:05:00,566
这样你就可以给出

156
00:04:58,946 --> 0:05:00,566
这样你就可以给出

157
00:05:00,566 --> 0:05:01,926
相关程度最高的凭证建议

158
00:05:03,816 --> 0:05:05,436
自动填充是通过

159
00:05:05,436 --> 0:05:06,736
准备好一系列 

160
00:05:06,736 --> 0:05:08,086
ASCredentialServiceIdentifier

161
00:05:08,086 --> 0:05:10,716
代表着用户当前正在使用的服务

162
00:05:10,716 --> 0:05:11,146
来做到这一点的

163
00:05:11,976 --> 0:05:12,956
你的扩展可能会收到

164
00:05:12,956 --> 0:05:14,636
多个服务标识符

165
00:05:14,636 --> 0:05:16,086
如果自动填充能够识别多个

166
00:05:16,086 --> 0:05:17,386
更好更合适的 

167
00:05:17,386 --> 0:05:18,236
以便在当前环境下使用

168
00:05:19,956 --> 0:05:21,866
在 App 内 服务标识符

169
00:05:21,866 --> 0:05:23,836
是基于该 App 所相关域名的

170
00:05:24,406 --> 0:05:25,976
采用了通用链接 接力

171
00:05:25,976 --> 0:05:27,876
或者共享网页凭证的 App

172
00:05:27,876 --> 0:05:29,856
将会有相关联的域名

173
00:05:31,006 --> 0:05:32,606
例如 这个闪闪发光的 App 

174
00:05:32,606 --> 0:05:33,456
与 shiny.example.com 相关联

175
00:05:33,456 --> 0:05:36,386
那么自动填充

176
00:05:36,386 --> 0:05:37,586
将会为你的扩展提供

177
00:05:37,586 --> 0:05:39,086
一个服务标识符

178
00:05:39,086 --> 0:05:41,436
它的类型是域名 shiny.example.com

179
00:05:42,866 --> 0:05:44,286
在 Safari 浏览器中

180
00:05:44,286 --> 0:05:46,056
服务标识符是基于

181
00:05:46,086 --> 0:05:47,966
用户当前正在登录的页面 URL

182
00:05:51,316 --> 0:05:52,976
自动填充会将服务标识符

183
00:05:52,976 --> 0:05:54,786
通过请求

184
00:05:54,786 --> 0:05:56,186
已准备好的

185
00:05:56,186 --> 0:05:57,796
服务标识符模式凭证列表

186
00:05:57,796 --> 0:05:59,266
在你的视图控制器中

187
00:06:00,286 --> 0:06:02,066
在这里 你的扩展应该

188
00:06:02,066 --> 0:06:03,526
建立起它的 UI 来显示

189
00:06:03,526 --> 0:06:05,466
用户的凭证信息

190
00:06:05,466 --> 0:06:06,546
且它应该能够通过所提供的服务标识符

191
00:06:06,546 --> 0:06:08,156
为相关度最高的那些

192
00:06:08,156 --> 0:06:09,166
给出高优先级

193
00:06:09,926 --> 0:06:11,636
在这一步 有两件事会发生

194
00:06:12,196 --> 0:06:15,286
如果用户选择忽略你的扩展

195
00:06:15,286 --> 0:06:16,656
你可以通过调用

196
00:06:16,656 --> 0:06:18,306
出错取消请求

197
00:06:18,436 --> 0:06:20,456
来告知系统

198
00:06:20,456 --> 0:06:21,586
在你的视图控制器扩展环境中

199
00:06:21,586 --> 0:06:23,906
自动填充就会

200
00:06:23,906 --> 0:06:24,886
忽略你的扩展

201
00:06:28,976 --> 0:06:30,886
如果用户选择了

202
00:06:30,886 --> 0:06:32,086
一个他们想要使用的凭证

203
00:06:32,506 --> 0:06:33,976
你的扩展就会建立一个

204
00:06:33,976 --> 0:06:35,736
基于用户选择的

205
00:06:35,736 --> 0:06:37,596
ASPasswordCredential

206
00:06:37,596 --> 0:06:39,286
然后通过调用

207
00:06:39,286 --> 0:06:40,596
完成请求和所选凭证模式

208
00:06:40,596 --> 0:06:42,106
来把它交给自动填充

209
00:06:42,106 --> 0:06:43,206
在扩展环境中进行

210
00:06:44,046 --> 0:06:45,526
那么自动填充就会使用

211
00:06:45,526 --> 0:06:47,236
那个凭证来填充

212
00:06:47,316 --> 0:06:49,126
App 中的用户名和密码

213
00:06:51,656 --> 0:06:53,036
这里有一些非常棒的实例

214
00:06:53,036 --> 0:06:53,986
是凭证列表所应该遵循的

215
00:06:53,986 --> 0:06:55,926
为了最好的用户体验

216
00:06:56,946 --> 0:06:58,426
首先 要确保

217
00:06:58,426 --> 0:06:59,856
在你的 UI 中添加一个按钮

218
00:06:59,856 --> 0:07:00,456
来取消请求

219
00:06:59,856 --> 0:07:00,456
来取消请求

220
00:07:01,446 --> 0:07:02,616
用户可能会随时改变主意

221
00:07:02,616 --> 0:07:03,986
是否登录他们的服务

222
00:07:03,986 --> 0:07:05,136
亦或是意识到 他们没有保存好的凭证

223
00:07:05,136 --> 0:07:06,746
所以你应该

224
00:07:06,746 --> 0:07:08,096
允许用户忽略你的扩展

225
00:07:08,096 --> 0:07:09,956
不需要选择任何凭证

226
00:07:12,856 --> 0:07:14,746
同样你的凭证列表 UI 

227
00:07:14,746 --> 0:07:16,006
应该让所有凭证都可见

228
00:07:16,006 --> 0:07:17,646
不论他们是不是

229
00:07:17,676 --> 0:07:19,216
与服务标识符相符

230
00:07:19,896 --> 0:07:21,486
在某些情况下

231
00:07:21,486 --> 0:07:22,526
用户可能需要从一个不同的域名下

232
00:07:22,526 --> 0:07:23,246
选择一个凭证

233
00:07:24,226 --> 0:07:25,516
允许用户

234
00:07:25,516 --> 0:07:26,776
从列表中访问整套凭证

235
00:07:26,776 --> 0:07:28,256
以确保你的扩展

236
00:07:28,256 --> 0:07:29,696
时刻都能派上用场

237
00:07:31,916 --> 0:07:33,576
用户认证

238
00:07:33,576 --> 0:07:35,096
是完全取决于你的扩展的

239
00:07:35,406 --> 0:07:36,796
如果你需要认证用户

240
00:07:36,796 --> 0:07:38,236
那么当凭证列表出现的时候

241
00:07:38,236 --> 0:07:39,426
你就应该执行认证

242
00:07:39,856 --> 0:07:43,396
以上就是你如何

243
00:07:43,396 --> 0:07:44,596
在你的扩展中操作凭证列表

244
00:07:44,596 --> 0:07:45,936
以保证你的 App 中的凭证

245
00:07:45,936 --> 0:07:47,576
无论在何地

246
00:07:47,576 --> 0:07:48,466
只需要登录 都是可用的

247
00:07:49,076 --> 0:07:51,566
现在我们要将它变得更加方便

248
00:07:51,566 --> 0:07:53,206
通过允许自动填充

249
00:07:53,206 --> 0:07:54,396
将这些凭证

250
00:07:54,486 --> 0:07:55,566
直接显示在快速输入栏上

251
00:07:56,116 --> 0:07:58,346
我将以一个概览开始

252
00:07:58,346 --> 0:07:59,516
关于这些操作如何进行

253
00:07:59,776 --> 0:08:01,116
描述一下你的代码所扮演的角色

254
00:07:59,776 --> 0:08:01,116
描述一下你的代码所扮演的角色

255
00:08:01,116 --> 0:08:05,123
系统 以及用户正在登录的 App

256
00:08:07,376 --> 0:08:09,186
首先 你的 App 需要

257
00:08:09,186 --> 0:08:10,876
让自动填充提前知道

258
00:08:11,126 --> 0:08:12,356
它想要将什么凭证

259
00:08:12,356 --> 0:08:13,816
显示在快速输入栏上

260
00:08:15,126 --> 0:08:16,266
你的 App 需要提供给自动填充

261
00:08:16,266 --> 0:08:17,996
一份凭证身份列表

262
00:08:18,336 --> 0:08:19,846
凭证身份包含

263
00:08:19,846 --> 0:08:21,106
凭证相关信息

264
00:08:21,406 --> 0:08:22,746
例如用户名和服务

265
00:08:22,746 --> 0:08:24,616
但没有密码

266
00:08:25,106 --> 0:08:28,116
当用户开始登录 App 时

267
00:08:28,116 --> 0:08:29,886
App 会与自动填充对话

268
00:08:29,886 --> 0:08:31,356
并让它知道

269
00:08:31,356 --> 0:08:32,756
何时用户名栏或者密码栏

270
00:08:32,756 --> 0:08:33,356
被选中

271
00:08:34,645 --> 0:08:35,946
随后自动填充就会寻找

272
00:08:35,946 --> 0:08:36,796
合适的凭证身份

273
00:08:36,796 --> 0:08:38,265
来为 App 提供建议

274
00:08:38,905 --> 0:08:39,866
这一操作是通过

275
00:08:39,866 --> 0:08:40,616
搜索由你的 App 提供的

276
00:08:40,616 --> 0:08:43,076
凭证身份来进行的

277
00:08:43,076 --> 0:08:44,706
所以你的扩展 暂时还不需要启动

278
00:08:45,996 --> 0:08:46,856
如果有任何匹配的

279
00:08:46,856 --> 0:08:47,726
凭证身份

280
00:08:47,726 --> 0:08:49,886
自动填充会将它们显示在

281
00:08:49,886 --> 0:08:50,616
快速输入栏内

282
00:08:51,726 --> 0:08:53,096
这些建议是

283
00:08:53,096 --> 0:08:54,666
系统私密提供的

284
00:08:54,666 --> 0:08:56,246
所以 App 还不能确定

285
00:08:56,246 --> 0:08:57,466
用户为 App

286
00:08:57,466 --> 0:08:58,946
保存了什么凭证

287
00:09:01,356 --> 0:09:02,746
当用户选择了其中一条建议

288
00:09:02,746 --> 0:09:05,106
自动填充就会启动你的扩展

289
00:09:05,106 --> 0:09:06,496
来向它询问

290
00:09:06,496 --> 0:09:07,846
完整凭证

291
00:09:07,846 --> 0:09:08,346
包括密码

292
00:09:08,836 --> 0:09:11,516
它会告知你的扩展

293
00:09:11,596 --> 0:09:12,736
用户选择了哪个

294
00:09:12,736 --> 0:09:16,216
凭证身份

295
00:09:16,216 --> 0:09:17,556
随后你的扩展会寻找

296
00:09:17,556 --> 0:09:18,926
属于所选凭证的密码

297
00:09:18,926 --> 0:09:20,316
在你的 App 的数据库中

298
00:09:21,256 --> 0:09:22,736
在此时 扩展可以选择

299
00:09:22,736 --> 0:09:24,426
在返回密码之前

300
00:09:24,546 --> 0:09:25,806
显示它自己的 UI 

301
00:09:26,726 --> 0:09:27,826
对于密码管理 App 来说

302
00:09:27,826 --> 0:09:29,246
请求用户输入

303
00:09:29,246 --> 0:09:31,126
一个主管密码

304
00:09:31,126 --> 0:09:32,016
或者执行其它形式的

305
00:09:32,016 --> 0:09:36,626
针对 App 的认证是非常有用的

306
00:09:36,886 --> 0:09:37,976
一旦你的扩展掌握了密码

307
00:09:37,976 --> 0:09:39,906
它会将其打包进

308
00:09:39,906 --> 0:09:41,536
一个 ASPasswordCredential

309
00:09:41,536 --> 0:09:42,796
通过完成扩展请求

310
00:09:42,796 --> 0:09:43,736
来传递给自动填充

311
00:09:44,226 --> 0:09:47,426
如果扩展没有显示出自己的 UI

312
00:09:47,426 --> 0:09:49,476
自动填充会

313
00:09:49,476 --> 0:09:50,826
为用户执行

314
00:09:50,826 --> 0:09:51,296
适当的认证

315
00:09:52,116 --> 0:09:53,346
根据设备和用户偏好的不同

316
00:09:53,346 --> 0:09:55,116
这一认证可能是

317
00:09:55,116 --> 0:09:57,356
面容 ID 触控 ID 

318
00:09:57,356 --> 0:09:58,666
设备密码或者什么都没有

319
00:09:59,236 --> 0:10:02,726
如果认证成功

320
00:09:59,236 --> 0:10:02,726
如果认证成功

321
00:10:02,726 --> 0:10:05,976
自动填充就会填充 App 中的用户名和密码

322
00:10:06,336 --> 0:10:08,676
这之中发生了非常多的事

323
00:10:08,806 --> 0:10:09,596
所以我要梳理一遍

324
00:10:09,596 --> 0:10:10,666
作为一个开发人员

325
00:10:10,666 --> 0:10:11,856
你需要为这一工作流程

326
00:10:11,856 --> 0:10:12,286
所做的支持

327
00:10:12,816 --> 0:10:16,096
你需要做的三件事是

328
00:10:16,346 --> 0:10:17,656
向自动填充提供

329
00:10:17,656 --> 0:10:18,866
你想向用户建议的

330
00:10:18,866 --> 0:10:19,966
凭证身份

331
00:10:20,926 --> 0:10:21,836
在你的扩展中执行支持

332
00:10:21,836 --> 0:10:22,736
以便建议被选中后

333
00:10:22,736 --> 0:10:24,196
提供密码

334
00:10:24,196 --> 0:10:27,666
并在扩展中显示定制 UI

335
00:10:27,666 --> 0:10:28,866
目的是在返回凭证前

336
00:10:28,866 --> 0:10:30,446
认证用户

337
00:10:30,446 --> 0:10:31,546
如果你的 UX 需要的话

338
00:10:32,546 --> 0:10:33,736
重申一下

339
00:10:33,736 --> 0:10:34,196
这一步不是必需的

340
00:10:34,776 --> 0:10:36,036
如果你不显示出定制 UI

341
00:10:36,036 --> 0:10:37,716
来执行验证

342
00:10:37,716 --> 0:10:38,646
自动填充会为你

343
00:10:38,646 --> 0:10:39,746
执行适当的验证

344
00:10:42,936 --> 0:10:44,296
凭证身份

345
00:10:44,296 --> 0:10:46,246
是由 ASPasswordCredentialIdentity 实例

346
00:10:46,246 --> 0:10:47,606
来表现的

347
00:10:48,336 --> 0:10:49,526
这一层级包含所有

348
00:10:49,526 --> 0:10:52,126
自动填充所需要知道的凭证信息

349
00:10:52,126 --> 0:10:53,746
以便确定在何处提供它们

350
00:10:54,676 --> 0:10:55,636
其中包含了一个服务标识符

351
00:10:55,636 --> 0:10:57,526
它会告诉自动填充

352
00:10:57,526 --> 0:10:59,036
在哪一个 App 或是网页上

353
00:10:59,036 --> 0:11:00,336
提供凭证建议

354
00:10:59,036 --> 0:11:00,336
提供凭证建议

355
00:11:01,496 --> 0:11:03,086
凭证中的用户名

356
00:11:03,626 --> 0:11:06,646
以及可选记录身份字符串

357
00:11:06,646 --> 0:11:07,906
你可以使用它们

358
00:11:07,906 --> 0:11:09,086
来连接这一身份

359
00:11:09,086 --> 0:11:10,176
到你的 App 自身数据库中的一项记录

360
00:11:10,176 --> 0:11:13,446
以及一项等级参数

361
00:11:14,336 --> 0:11:15,776
如果用户有多个凭证

362
00:11:15,776 --> 0:11:17,166
对应一项服务

363
00:11:17,166 --> 0:11:19,006
且快速输入栏无法显示

364
00:11:19,006 --> 0:11:20,196
你可以使用等级参数

365
00:11:20,196 --> 0:11:21,156
来标记特定的凭证身份

366
00:11:21,156 --> 0:11:23,206
来给它们更高或更低的优先级

367
00:11:24,436 --> 0:11:25,556
有更高等级的凭证身份

368
00:11:25,656 --> 0:11:26,826
会优先于

369
00:11:26,826 --> 0:11:29,466
低等级的凭证身份被给出

370
00:11:32,476 --> 0:11:34,316
这些凭证身份

371
00:11:34,316 --> 0:11:35,696
会被保存在凭证身份库中

372
00:11:35,696 --> 0:11:38,896
也就是你 App 中的数据库

373
00:11:38,896 --> 0:11:40,606
你可以使用 ASCredentialIdentityStore 级

374
00:11:40,606 --> 0:11:42,296
来对其进行修改

375
00:11:43,356 --> 0:11:44,846
自动填充为用户提供建议凭证

376
00:11:44,846 --> 0:11:46,276
是通过搜索

377
00:11:46,276 --> 0:11:47,736
你 App 中的凭证身份库

378
00:11:48,316 --> 0:11:51,836
凭证身份库

379
00:11:51,836 --> 0:11:53,196
有完整的数据保护

380
00:11:53,196 --> 0:11:55,026
除了开放数据

381
00:11:55,026 --> 0:11:56,446
所以没有任何操作

382
00:11:56,446 --> 0:11:57,266
能在设备锁定的时候执行

383
00:11:58,246 --> 0:11:59,416
系统永远不会

384
00:11:59,416 --> 0:12:00,616
将凭证身份库与云服务同步

385
00:11:59,416 --> 0:12:00,616
将凭证身份库与云服务同步

386
00:12:00,616 --> 0:12:02,516
或将其包含在备份中

387
00:12:02,736 --> 0:12:04,746
所以这些信息

388
00:12:05,276 --> 0:12:06,000
永远不会离开设备

389
00:12:07,826 --> 0:12:09,246
每一个 App 都有独立的

390
00:12:09,246 --> 0:12:11,216
凭证身份库 并且只有 App 本身或者

391
00:12:11,216 --> 0:12:13,436
相应扩展 才能对其进行修改

392
00:12:14,066 --> 0:12:15,336
这一库只会被自动填充读取

393
00:12:15,336 --> 0:12:17,246
用于决定

394
00:12:17,246 --> 0:12:19,286
向用户建议什么凭证

395
00:12:19,836 --> 0:12:23,316
并且凭证身份库

396
00:12:23,316 --> 0:12:26,226
只有在 App 扩展被用户启用后

397
00:12:26,226 --> 0:12:27,296
才能被修改

398
00:12:28,506 --> 0:12:29,716
如果你的扩展未启用

399
00:12:29,866 --> 0:12:31,616
对于库的更新的任何尝试将会失败

400
00:12:32,106 --> 0:12:33,386
如果用户禁用了你的扩展

401
00:12:33,386 --> 0:12:34,806
或者删除了你的 App

402
00:12:35,146 --> 0:12:36,296
整个凭证身份库

403
00:12:36,296 --> 0:12:37,026
将会被删除

404
00:12:37,476 --> 0:12:42,706
你的 App 需要更新其凭证身份库

405
00:12:42,706 --> 0:12:43,856
当对于它所能提供的凭证

406
00:12:43,856 --> 0:12:45,076
有新的信息变动的时候

407
00:12:46,316 --> 0:12:47,896
举例来说 

408
00:12:47,896 --> 0:12:49,616
你的 App 使用线上服务

409
00:12:49,616 --> 0:12:50,916
来保存用户的凭证

410
00:12:51,456 --> 0:12:54,156
当用户登录时

411
00:12:54,156 --> 0:12:55,006
你的 App 会开始获取

412
00:12:55,006 --> 0:12:56,026
用户的凭证

413
00:12:56,486 --> 0:12:59,186
这时你应该在库中

414
00:12:59,186 --> 0:13:00,796
更新凭证身份列表

415
00:12:59,186 --> 0:13:00,796
更新凭证身份列表

416
00:13:00,796 --> 0:13:02,066
以便于新添加的凭证

417
00:13:02,066 --> 0:13:03,406
能够显示在快速输入栏上

418
00:13:03,926 --> 0:13:08,506
如果用户添加 删除

419
00:13:08,506 --> 0:13:10,326
或修改他们的凭证

420
00:13:10,326 --> 0:13:11,446
你的 App 要更新

421
00:13:11,446 --> 0:13:13,556
凭证身份库

422
00:13:13,556 --> 0:13:15,006
以保证能一直准确地反馈出

423
00:13:15,006 --> 0:13:16,716
这一组凭证 这是由你的 App 所提供的

424
00:13:18,516 --> 0:13:20,046
这些更新可能是由于

425
00:13:20,046 --> 0:13:21,466
在 App 内 用户在

426
00:13:21,536 --> 0:13:23,426
本定做出了修改

427
00:13:23,426 --> 0:13:25,566
或者可能是因为你的 App 同步了

428
00:13:25,566 --> 0:13:27,606
来自其它登录了线上服务的设备中的变更

429
00:13:29,746 --> 0:13:31,616
然后 如果用户要

430
00:13:31,616 --> 0:13:34,926
在当前设备上 登出线上服务

431
00:13:34,926 --> 0:13:36,016
你的 App 要

432
00:13:36,016 --> 0:13:37,696
从库中移除所有的凭证身份

433
00:13:37,696 --> 0:13:39,136
用户不会再看到

434
00:13:39,136 --> 0:13:40,606
关于这些凭证的建议

435
00:13:44,086 --> 0:13:46,136
在你的代码中 你要使用

436
00:13:46,136 --> 0:13:47,826
ASCredentialIdentityStore 级

437
00:13:47,826 --> 0:13:51,686
来与凭证身份库互动

438
00:13:51,686 --> 0:13:53,246
通过使用替代凭证身份

439
00:13:53,246 --> 0:13:55,286
并移除所有的

440
00:13:55,286 --> 0:13:56,946
凭证身份模式

441
00:13:57,716 --> 0:13:59,116
你可以替代或者清除

442
00:13:59,116 --> 0:14:00,516
被自动填充

443
00:13:59,116 --> 0:14:00,516
被自动填充

444
00:14:00,516 --> 0:14:01,676
纳入考虑建议范畴内的

445
00:14:01,676 --> 0:14:02,246
凭证身份

446
00:14:04,556 --> 0:14:06,026
当出现个人修改时

447
00:14:06,026 --> 0:14:07,826
这些已保存的凭证身份

448
00:14:07,826 --> 0:14:09,496
或已移除的凭证身份模式

449
00:14:09,496 --> 0:14:11,666
会允许你

450
00:14:11,666 --> 0:14:15,386
添加 更新或移除凭证身份

451
00:14:15,386 --> 0:14:16,906
而不需要完全替代库中的内容

452
00:14:20,426 --> 0:14:21,486
关于系统

453
00:14:21,486 --> 0:14:23,426
需要了解的一个重要方面

454
00:14:23,426 --> 0:14:25,036
就是凭证身份库

455
00:14:25,036 --> 0:14:26,506
有时会被删除

456
00:14:26,506 --> 0:14:27,516
但你的 App 无法预见这一点

457
00:14:28,076 --> 0:14:31,276
例如 如果用户

458
00:14:31,276 --> 0:14:32,596
在自动填充中禁用了你的扩展

459
00:14:32,596 --> 0:14:34,336
而随后又重新启用了它

460
00:14:34,336 --> 0:14:36,386
但系统已经清空了库

461
00:14:37,296 --> 0:14:38,696
如果系统认为

462
00:14:38,696 --> 0:14:39,996
你的 App 提供凭证身份

463
00:14:39,996 --> 0:14:41,546
但一直不能

464
00:14:41,546 --> 0:14:43,076
提供密码

465
00:14:43,076 --> 0:14:44,276
当用户选择这些凭证的时候

466
00:14:44,276 --> 0:14:46,076
那么凭证身份库

467
00:14:46,076 --> 0:14:47,976
就会被删除

468
00:14:47,976 --> 0:14:49,116
以防用户再看到这些

469
00:14:49,116 --> 0:14:50,646
陈旧无用的凭证建议

470
00:14:51,076 --> 0:14:56,176
如果用户从备份中恢复了他们的设备

471
00:14:56,176 --> 0:14:57,116
并且有使用你的

472
00:14:57,116 --> 0:14:59,056
凭证提供扩展

473
00:14:59,056 --> 0:15:00,306
但是库中不会存在

474
00:14:59,056 --> 0:15:00,306
但是库中不会存在

475
00:15:00,306 --> 0:15:01,736
任何凭证身份

476
00:15:01,736 --> 0:15:02,596
因为它没有被包含在备份中

477
00:15:02,596 --> 0:15:04,546
你的 App 要能够

478
00:15:04,546 --> 0:15:06,516
处理这些情况

479
00:15:06,596 --> 0:15:08,316
ASCredentialIdentityStore

480
00:15:08,316 --> 0:15:09,576
能够帮助你检测这些情况

481
00:15:09,706 --> 0:15:10,726
你就能够采取合适的操作

482
00:15:10,726 --> 0:15:12,376
当你需要更新库的时候

483
00:15:15,776 --> 0:15:17,336
你可以使用状态获取模式

484
00:15:17,446 --> 0:15:18,666
来询问系统

485
00:15:18,666 --> 0:15:20,006
关于你的 App 的

486
00:15:20,006 --> 0:15:21,846
凭证身份库的情况

487
00:15:21,846 --> 0:15:23,356
将其返回为一个

488
00:15:23,356 --> 0:15:24,176
ASCredentialIdentityStoreState 项目

489
00:15:25,876 --> 0:15:27,566
它会告知你的第一件事

490
00:15:27,566 --> 0:15:28,926
是用户是否

491
00:15:28,926 --> 0:15:30,016
启用了你的扩展

492
00:15:30,726 --> 0:15:31,816
你应该在试图更新

493
00:15:31,816 --> 0:15:32,686
凭证身份库之前

494
00:15:32,686 --> 0:15:33,746
检查这一点

495
00:15:34,256 --> 0:15:35,606
如果你的扩展被禁用了

496
00:15:35,736 --> 0:15:36,816
那么保存或移除

497
00:15:36,816 --> 0:15:38,716
凭证身份是没有意义的

498
00:15:42,116 --> 0:15:44,306
它同样支持

499
00:15:44,306 --> 0:15:45,606
增量更新属性

500
00:15:46,026 --> 0:15:47,136
你可以用它来判断

501
00:15:47,136 --> 0:15:48,626
你的身份库是否有改动

502
00:15:48,626 --> 0:15:49,576
自从上一次

503
00:15:49,576 --> 0:15:51,636
更新之后

504
00:15:51,636 --> 0:15:52,746
如果你之前保存了

505
00:15:52,746 --> 0:15:53,756
凭证身份到库中

506
00:15:53,756 --> 0:15:55,826
就会返回 true 值

507
00:15:56,436 --> 0:15:57,646
提示你应该使用

508
00:15:57,646 --> 0:15:59,146
增量保存凭证身份

509
00:15:59,146 --> 0:16:03,386
并移除凭证身份模式

510
00:15:59,146 --> 0:16:03,386
并移除凭证身份模式

511
00:16:03,386 --> 0:16:04,916
如果库还没有被写入

512
00:16:04,916 --> 0:16:07,746
也许是因为你的 App 被禁用后

513
00:16:07,786 --> 0:16:08,996
又重新启用了

514
00:16:10,026 --> 0:16:11,446
那么增量更新

515
00:16:11,446 --> 0:16:12,546
就会返回 false 值

516
00:16:12,736 --> 0:16:13,706
你就应该

517
00:16:13,706 --> 0:16:15,176
向身份库中加入凭证身份的

518
00:16:15,176 --> 0:16:16,176
完整列表

519
00:16:16,176 --> 0:16:19,996
通过使用替代凭证身份的方法

520
00:16:22,306 --> 0:16:23,466
一旦你的 App 开始保存

521
00:16:23,466 --> 0:16:24,626
凭证身份到库中

522
00:16:24,626 --> 0:16:26,716
自动填充就可以开始

523
00:16:26,716 --> 0:16:27,546
给出你的 App 中的凭证

524
00:16:27,546 --> 0:16:28,776
显示在快速输入栏内

525
00:16:29,916 --> 0:16:31,556
接下来 你需要在你的扩展中

526
00:16:31,556 --> 0:16:32,816
添加支持来提供密码

527
00:16:32,816 --> 0:16:33,976
当其中的

528
00:16:33,976 --> 0:16:35,756
某一个凭证建议被选取

529
00:16:37,836 --> 0:16:39,846
此时 自动填充

530
00:16:39,846 --> 0:16:41,376
会首先启动你的扩展

531
00:16:41,376 --> 0:16:42,866
并向它请求密码

532
00:16:42,866 --> 0:16:44,166
但不在屏幕上显示你的 UI

533
00:16:44,346 --> 0:16:46,886
自动填充在执行这一步时

534
00:16:46,886 --> 0:16:48,596
在你的视图控制器中 

535
00:16:48,626 --> 0:16:50,306
会调用无需用户

536
00:16:50,536 --> 0:16:51,896
交互凭证提供的方法

537
00:16:52,616 --> 0:16:53,846
然后提供出一个

538
00:16:53,846 --> 0:16:54,776
ASPasswordCredentialIdentity

539
00:16:55,026 --> 0:16:56,026
代表着该凭证

540
00:16:56,026 --> 0:16:59,766
已被填充在这一方法中

541
00:16:59,766 --> 0:17:00,956
你需要查找

542
00:16:59,766 --> 0:17:00,956
你需要查找

543
00:17:00,956 --> 0:17:01,786
属于给定凭证的相关密码

544
00:17:01,786 --> 0:17:03,346
并将其交还给

545
00:17:03,346 --> 0:17:05,106
自动填充

546
00:17:05,106 --> 0:17:07,026
通过使用所选凭证 完成请求的方法

547
00:17:07,536 --> 0:17:11,016
如果你的扩展

548
00:17:11,016 --> 0:17:12,526
想要显示出自己的 UI

549
00:17:13,195 --> 0:17:14,546
就取消扩展请求

550
00:17:14,705 --> 0:17:15,986
通过使用

551
00:17:15,986 --> 0:17:18,016
需要用户交互错误代码

552
00:17:18,016 --> 0:17:20,236
在 ASExtensionErrorDomin 内

553
00:17:22,116 --> 0:17:23,836
系统就会在你的视图控制器中

554
00:17:23,836 --> 0:17:25,746
调用准备接口

555
00:17:25,746 --> 0:17:28,966
以提供凭证模式

556
00:17:28,966 --> 0:17:29,286
并显示它的 UI

557
00:17:30,436 --> 0:17:31,966
在这一方法中 

558
00:17:31,966 --> 0:17:33,786
你的扩展会为工作流程建立它的 UI 

559
00:17:33,786 --> 0:17:34,726
来提供密码

560
00:17:35,796 --> 0:17:37,236
当密码最后准备好

561
00:17:37,236 --> 0:17:40,916
你将凭证返回给自动填充

562
00:17:40,916 --> 0:17:43,586
通过使用所选凭证 完成请求方法

563
00:17:44,806 --> 0:17:48,746
再一次 如果你的 UI 显示出来了

564
00:17:48,746 --> 0:17:50,076
自动填充就不会执行任何认证

565
00:17:50,076 --> 0:17:51,676
在它填入返回的凭证之前

566
00:17:52,266 --> 0:17:53,486
是由你的扩展来决定

567
00:17:53,486 --> 0:17:54,236
什么类型的认证

568
00:17:54,236 --> 0:17:55,546
是它所需要的

569
00:17:59,016 --> 0:18:00,436
在执行这一功能时

570
00:17:59,016 --> 0:18:00,436
在执行这一功能时

571
00:18:00,436 --> 0:18:01,526
要牢记一点

572
00:18:01,526 --> 0:18:02,896
你的扩展

573
00:18:02,896 --> 0:18:04,346
需要快速回应

574
00:18:04,346 --> 0:18:05,846
最开始无 UI 的请求

575
00:18:05,846 --> 0:18:07,896
无论结果是什么

576
00:18:09,316 --> 0:18:11,066
你的 UI 显示出来

577
00:18:11,066 --> 0:18:12,816
所以对用户来说

578
00:18:12,816 --> 0:18:14,086
你的扩展在后台运行

579
00:18:14,086 --> 0:18:15,056
并不会被他们察觉

580
00:18:16,076 --> 0:18:18,776
返回密码需要很长时间

581
00:18:18,776 --> 0:18:20,676
用户可能会感知到系统 你的 App

582
00:18:20,676 --> 0:18:23,846
或者他们正在使用的服务无响应

583
00:18:24,796 --> 0:18:25,786
这对于用户体验来说

584
00:18:25,786 --> 0:18:26,426
是非常糟糕的

585
00:18:26,946 --> 0:18:29,436
并且这是非常重要的

586
00:18:29,776 --> 0:18:31,396
如果几秒钟过去之后

587
00:18:31,396 --> 0:18:32,556
你的扩展还没有

588
00:18:32,556 --> 0:18:34,586
返回密码 被请求显示 UI

589
00:18:34,586 --> 0:18:36,356
或由于别的错误被取消

590
00:18:36,356 --> 0:18:38,116
自动填充会

591
00:18:38,116 --> 0:18:39,776
取消扩展且不填充凭证

592
00:18:41,616 --> 0:18:43,486
然而 这一超时问题

593
00:18:43,486 --> 0:18:45,376
不会发生在排错测试版中

594
00:18:45,376 --> 0:18:47,066
也不会发生在模拟器中

595
00:18:47,066 --> 0:18:48,226
所以你有大把时间

596
00:18:48,226 --> 0:18:49,996
来排查错误 并且不受系统影响

597
00:18:54,236 --> 0:18:55,746
当你在添加支持

598
00:18:55,746 --> 0:18:56,736
让凭证显示在

599
00:18:56,736 --> 0:18:57,726
快速输入栏时

600
00:18:57,726 --> 0:18:59,346
保持凭证身份库

601
00:18:59,346 --> 0:19:02,226
是最新版本尤为重要

602
00:18:59,346 --> 0:19:02,226
是最新版本尤为重要

603
00:19:02,226 --> 0:19:03,756
并且要与你的 App 所了解的凭证同步

604
00:19:04,856 --> 0:19:07,996
如果库不能与你的 App 数据同步

605
00:19:07,996 --> 0:19:09,166
用户就看不到新添加的凭证

606
00:19:09,166 --> 0:19:10,156
在快速输入栏内

607
00:19:10,156 --> 0:19:13,436
或者可能会在快速输入栏上 一直看到某个凭证

608
00:19:13,606 --> 0:19:14,816
即便他们已经从你的 App 中

609
00:19:14,816 --> 0:19:15,286
删除了这一凭证

610
00:19:16,686 --> 0:19:18,046
你应该好好利用

611
00:19:18,046 --> 0:19:19,416
ASCredentialIdentityStore 的

612
00:19:19,616 --> 0:19:21,186
增量更新 API

613
00:19:21,906 --> 0:19:23,346
每当有凭证改变时

614
00:19:23,346 --> 0:19:26,986
就替换整个凭证身份列表

615
00:19:26,986 --> 0:19:28,286
会十分费力费时 特别是

616
00:19:28,286 --> 0:19:29,966
当你有多个凭证身份要更新

617
00:19:31,016 --> 0:19:32,506
这样做对表现而言更有好处

618
00:19:32,506 --> 0:19:33,666
增量保存

619
00:19:33,666 --> 0:19:35,396
新的凭证身份

620
00:19:35,396 --> 0:19:36,986
或者当有变动时移除那些被删除的凭证

621
00:19:36,986 --> 0:19:39,866
而不要覆盖整个库

622
00:19:42,316 --> 0:19:43,916
请记住 

623
00:19:43,916 --> 0:19:45,266
当你的扩展被调用

624
00:19:45,336 --> 0:19:46,496
说明用户正在使用

625
00:19:46,496 --> 0:19:47,106
其它的 App

626
00:19:47,816 --> 0:19:50,886
将互动和 UI 减少到最小

627
00:19:50,886 --> 0:19:52,306
并且只添加

628
00:19:52,306 --> 0:19:53,546
为了用户获取密码所必需的部分

629
00:19:56,496 --> 0:19:57,666
如果加载你的密码数据库

630
00:19:57,666 --> 0:19:59,086
包含了非常复杂的步骤

631
00:19:59,086 --> 0:20:02,676
请避免在视图加载方法中 重做这一步骤

632
00:19:59,086 --> 0:20:02,676
请避免在视图加载方法中 重做这一步骤

633
00:20:02,676 --> 0:20:04,016
在你的视图控制器中

634
00:20:04,016 --> 0:20:04,596
并稍后再将其解散

635
00:20:05,416 --> 0:20:06,836
系统可能会重复使用

636
00:20:06,836 --> 0:20:08,446
你的 App 扩展

637
00:20:08,446 --> 0:20:09,806
如果用户顺序登录多个服务

638
00:20:09,806 --> 0:20:11,386
需要使用你的扩展

639
00:20:12,686 --> 0:20:13,886
请考虑使用单一模式

640
00:20:13,886 --> 0:20:15,766
那么任何在一次扩展请求内

641
00:20:15,766 --> 0:20:17,596
完成的工作

642
00:20:17,596 --> 0:20:19,276
都可以被重复使用

643
00:20:19,276 --> 0:20:20,296
只要不是必须重复执行

644
00:20:20,836 --> 0:20:24,836
以上就概括了

645
00:20:24,836 --> 0:20:26,096
如何将你的凭证

646
00:20:26,096 --> 0:20:29,206
显示在快速输入栏上

647
00:20:29,376 --> 0:20:31,056
最后 我再来谈一个 API

648
00:20:31,056 --> 0:20:33,056
它可能对你的扩展会有帮助

649
00:20:34,106 --> 0:20:35,426
当用户为密码自动填充

650
00:20:35,426 --> 0:20:37,006
而启用了你的扩展

651
00:20:38,296 --> 0:20:39,796
你可能需要做一些设置

652
00:20:39,796 --> 0:20:41,096
为了让用户得到最佳体验

653
00:20:41,676 --> 0:20:43,186
首先 如果你支持

654
00:20:43,186 --> 0:20:44,046
在快速输入栏内

655
00:20:44,046 --> 0:20:45,726
显示凭证

656
00:20:45,726 --> 0:20:47,026
你的扩展需要先提供

657
00:20:47,026 --> 0:20:48,126
凭证身份

658
00:20:48,126 --> 0:20:49,086
给自动填充

659
00:20:50,116 --> 0:20:52,296
但此时 显示其它设置可能也是有用的

660
00:20:52,296 --> 0:20:54,226
比如让用户可以

661
00:20:54,226 --> 0:20:55,416
通过登录

662
00:20:55,416 --> 0:20:56,736
一项线上服务

663
00:20:56,736 --> 0:20:58,016
来取回密码

664
00:20:58,016 --> 0:20:58,396
如果他们还没有登录的话

665
00:21:00,286 --> 0:21:02,156
认证服务提供

666
00:21:02,156 --> 0:21:03,816
一个 API 来支持这些工作流程

667
00:21:04,476 --> 0:21:05,516
当这些都在你的扩展上启用

668
00:21:05,516 --> 0:21:07,396
设置可以启动

669
00:21:07,396 --> 0:21:08,726
你的扩展并显示出它的 UI

670
00:21:08,726 --> 0:21:11,386
你就可以让用户来配置它

671
00:21:13,096 --> 0:21:15,646
要进行这一操作

672
00:21:15,646 --> 0:21:17,076
为你的扩展打开

673
00:21:17,076 --> 0:21:19,176
信息特性列表 

674
00:21:19,276 --> 0:21:21,096
并在 NSExtensionAttributes 下添加一个

675
00:21:21,156 --> 0:21:23,716
新的键 ASCredentialProviderExtension

676
00:21:23,716 --> 0:21:26,186
ShowsConfigurationUI 

677
00:21:26,186 --> 0:21:27,496
且布尔值为 yes

678
00:21:28,426 --> 0:21:29,666
这就是系统能够如何知道

679
00:21:29,666 --> 0:21:30,956
当你的扩展被启用后

680
00:21:30,956 --> 0:21:31,496
要去使用它

681
00:21:33,896 --> 0:21:37,546
然后执行 为扩展配置准备接口方法

682
00:21:37,546 --> 0:21:38,906
在你的视图控制器中

683
00:21:41,776 --> 0:21:43,026
当你的扩展被首次启用时

684
00:21:43,606 --> 0:21:47,146
当你的扩展设置完毕

685
00:21:47,726 --> 0:21:49,076
在你的扩展环境下调用

686
00:21:49,076 --> 0:21:52,616
完成扩展配置请求模式

687
00:21:52,616 --> 0:21:54,256
设置就会关闭你的 UI

688
00:21:54,336 --> 0:21:57,456
此时 你的扩展就被启动了

689
00:21:57,906 --> 0:22:00,236
它此时为自动填充提供了凭证身份

690
00:21:57,906 --> 0:22:00,236
它此时为自动填充提供了凭证身份

691
00:22:00,236 --> 0:22:01,486
以便在快速输入栏上显示建议

692
00:22:02,136 --> 0:22:03,356
它可以提供密码

693
00:22:03,356 --> 0:22:04,326
当这些建议被选中时

694
00:22:04,326 --> 0:22:06,316
并且它也能显示给用户

695
00:22:06,316 --> 0:22:07,666
所有凭证的列表

696
00:22:08,236 --> 0:22:09,496
你现在已经完成了

697
00:22:09,496 --> 0:22:10,926
将密码自动填充整合进你的 App 中这件事

698
00:22:10,926 --> 0:22:11,906
用户可以开始享受

699
00:22:11,906 --> 0:22:13,166
将密码保存在你的 App 中

700
00:22:13,166 --> 0:22:14,576
所带来的便捷

701
00:22:14,806 --> 0:22:15,646
无论何时何地

702
00:22:18,276 --> 0:22:20,906
还有更多非常棒的实例

703
00:22:20,906 --> 0:22:22,706
你可以在开发你的扩展时 进行参考

704
00:22:23,256 --> 0:22:27,496
正如我们之前所谈的

705
00:22:27,496 --> 0:22:28,856
主视图控制器是负责

706
00:22:28,856 --> 0:22:32,076
显示 UI 为不同的功能

707
00:22:32,866 --> 0:22:34,156
要做到这一点

708
00:22:34,156 --> 0:22:35,536
我们建议使用独立的视图控制器

709
00:22:35,536 --> 0:22:36,876
且它们是由主视图控制器

710
00:22:36,876 --> 0:22:37,376
所管理的

711
00:22:38,596 --> 0:22:40,286
比如说 你可能想要

712
00:22:40,286 --> 0:22:42,786
用一个视图控制器层级来显示

713
00:22:42,786 --> 0:22:43,146
凭证身份列表

714
00:22:43,456 --> 0:22:44,896
另一个用来

715
00:22:44,896 --> 0:22:45,886
在填充凭证时

716
00:22:45,886 --> 0:22:46,546
认证用户

717
00:22:47,056 --> 0:22:50,066
你可以将这些视图控制器

718
00:22:50,066 --> 0:22:51,826
显示在主视图控制器中

719
00:22:51,826 --> 0:22:53,306
或者使用视图控制器控制面板

720
00:22:53,376 --> 0:22:54,366
来嵌入它们的视图

721
00:22:54,506 --> 0:22:56,496
如果你通过

722
00:22:56,496 --> 0:22:57,746
显示视图控制器来准备接口

723
00:22:57,746 --> 0:22:59,366
这一显示过程

724
00:22:59,366 --> 0:23:00,206
是需要无动画的

725
00:22:59,366 --> 0:23:00,206
是需要无动画的

726
00:23:00,206 --> 0:23:03,086
因为主视图控制器的显示

727
00:23:03,086 --> 0:23:04,766
已经有了动画

728
00:23:05,356 --> 0:23:09,766
总而言之 扩展需要是

729
00:23:09,766 --> 0:23:10,826
轻量化的 

730
00:23:10,826 --> 0:23:12,416
且能够随时终止的

731
00:23:12,416 --> 0:23:13,396
这也包括

732
00:23:13,396 --> 0:23:14,896
自动填充凭证提供扩展

733
00:23:16,046 --> 0:23:17,226
你的扩展是会被唤醒

734
00:23:17,226 --> 0:23:18,846
来执行一件指定的任务

735
00:23:18,996 --> 0:23:20,126
所以你不应该添加任何

736
00:23:20,126 --> 0:23:21,966
不必要的工作流程

737
00:23:21,966 --> 0:23:23,536
或者多余的交互

738
00:23:25,116 --> 0:23:26,666
请注意 系统可能会

739
00:23:26,666 --> 0:23:27,866
在任何时候

740
00:23:27,866 --> 0:23:29,526
出于各类原因

741
00:23:29,526 --> 0:23:30,026
终止或暂定你的扩展

742
00:23:30,026 --> 0:23:33,566
比如说 系统会终止

743
00:23:33,566 --> 0:23:34,866
凭证提供扩展

744
00:23:34,866 --> 0:23:36,166
当用户切换 App 

745
00:23:36,166 --> 0:23:37,016
而它们处于使用状态时

746
00:23:38,656 --> 0:23:39,936
你的扩展将会得到一个

747
00:23:39,936 --> 0:23:41,206
独立的标记盒 它来自于主要 App

748
00:23:41,206 --> 0:23:42,616
但它仍然需要共享数据

749
00:23:42,616 --> 0:23:44,726
比如用户的凭证

750
00:23:45,586 --> 0:23:47,106
使用 App 组或共享钥匙串

751
00:23:47,106 --> 0:23:48,746
以便在扩展和 App 之间

752
00:23:48,746 --> 0:23:50,146
共享数据

753
00:23:51,316 --> 0:23:52,616
关于扩展开发的回顾

754
00:23:52,616 --> 0:23:54,596
请参考

755
00:23:54,596 --> 0:23:56,426
为 iOS 和 OS X 建立扩展

756
00:23:56,506 --> 0:23:58,856
会议的第二部分

757
00:23:58,856 --> 0:24:00,436
来自于 WWDC 2014

758
00:23:58,856 --> 0:24:00,436
来自于 WWDC 2014

759
00:24:03,036 --> 0:24:05,246
最后 你可以使用 Safari 浏览器

760
00:24:05,246 --> 0:24:06,046
如果你需要为你的

761
00:24:06,046 --> 0:24:07,386
凭证提供扩展排查错误

762
00:24:07,576 --> 0:24:08,456
当你测试

763
00:24:08,456 --> 0:24:09,096
凭证填充的时候

764
00:24:10,396 --> 0:24:12,416
要执行这一步 

765
00:24:12,416 --> 0:24:13,966
首先激活扩展方案流程

766
00:24:13,966 --> 0:24:15,476
选择目标 然后选择运行

767
00:24:17,556 --> 0:24:19,526
当你执行这一操作时 Xcode 会询问

768
00:24:19,526 --> 0:24:20,896
让你选择一个 App 来承载

769
00:24:20,896 --> 0:24:21,476
这一扩展

770
00:24:22,136 --> 0:24:23,886
在列表中选择 Safari 浏览器

771
00:24:23,886 --> 0:24:25,266
然后单击运行按钮

772
00:24:26,766 --> 0:24:28,386
Safari 浏览器会启动

773
00:24:28,386 --> 0:24:29,946
你就可以定位到

774
00:24:29,946 --> 0:24:30,926
你想要测试你的扩展的

775
00:24:30,926 --> 0:24:31,496
登录页面

776
00:24:32,376 --> 0:24:33,496
当你打开你的凭证列表

777
00:24:33,496 --> 0:24:36,416
或者在快速输入栏中 选择一个凭证

778
00:24:36,546 --> 0:24:38,076
扩展就会启动

779
00:24:38,076 --> 0:24:39,376
Xcode 会附上排错程序

780
00:24:39,376 --> 0:24:40,916
这样你就可以开始

781
00:24:40,916 --> 0:24:41,576
你的排错过程了

782
00:24:44,506 --> 0:24:46,106
要在其它情况下

783
00:24:46,106 --> 0:24:48,316
为你的扩展排错

784
00:24:48,316 --> 0:24:50,436
使用 Attach to Process Item 选项

785
00:24:50,436 --> 0:24:51,806
在 Xcode 的排错菜单中

786
00:24:51,806 --> 0:24:52,206
来附加排错程序

787
00:24:53,426 --> 0:24:54,626
如果你想要测试设置 UI

788
00:24:54,626 --> 0:24:56,746
你可以手动打开设置

789
00:24:56,746 --> 0:24:58,806
来启用你的扩展

790
00:24:58,806 --> 0:25:00,326
或者你也可以打开任何 App 的登录页面

791
00:24:58,806 --> 0:25:00,326
或者你也可以打开任何 App 的登录页面

792
00:25:00,326 --> 0:25:01,636
如果你想在那里为自动填充排错

793
00:25:05,376 --> 0:25:07,686
总结一下 iOS 12 

794
00:25:07,686 --> 0:25:08,836
允许密码管理 App 

795
00:25:08,836 --> 0:25:10,056
整合密码自动填充功能

796
00:25:11,146 --> 0:25:13,736
使用全新的认证服务框架中的 API

797
00:25:13,736 --> 0:25:15,426
你的凭证提供扩展

798
00:25:15,426 --> 0:25:16,896
可以展示给用户

799
00:25:16,896 --> 0:25:18,296
一张完整的凭证列表

800
00:25:18,916 --> 0:25:19,746
将凭证显示在

801
00:25:19,746 --> 0:25:21,696
快速输入栏上 

802
00:25:21,696 --> 0:25:22,976
并在设置中 有选择地

803
00:25:22,976 --> 0:25:24,856
为用户提供配置扩展的方式

804
00:25:27,416 --> 0:25:30,486
更多信息 请参考有关这一会议的

805
00:25:30,486 --> 0:25:31,006
Apple 开发人员页面

806
00:25:32,066 --> 0:25:32,996
要了解更多关于

807
00:25:32,996 --> 0:25:33,916
iOS 12 中的密码管理改进

808
00:25:33,916 --> 0:25:37,796
请查看 自动强密码和安全码

809
00:25:37,796 --> 0:25:39,276
自动填充会议

810
00:25:40,156 --> 0:25:41,226
如果你想进一步了解

811
00:25:41,226 --> 0:25:42,216
密码自动填充功能

812
00:25:42,216 --> 0:25:44,276
和相关领域

813
00:25:44,736 --> 0:25:46,156
请查看介绍 App 

814
00:25:46,156 --> 0:25:48,166
的密码自动填充会议

815
00:25:48,166 --> 0:25:49,866
来自于 WWDC 2017
