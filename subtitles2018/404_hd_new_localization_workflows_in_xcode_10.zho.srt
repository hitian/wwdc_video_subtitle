1
00:00:06,516 --> 0:00:14,500
[ 音乐 ]

2
00:00:21,516 --> 0:00:25,566
[ 掌声 ]

3
00:00:26,066 --> 0:00:27,066
&gt;&gt; 大家早上好

4
00:00:27,196 --> 0:00:28,476
非常感谢大家能够

5
00:00:28,476 --> 0:00:29,216
参加开发者大会

6
00:00:29,266 --> 0:00:30,446
我叫 Sara Radi

7
00:00:30,446 --> 0:00:31,636
是 Apple 本地化团队的一名

8
00:00:31,636 --> 0:00:33,576
软件工程师

9
00:00:33,576 --> 0:00:34,746
今天我会和我的同事

10
00:00:34,746 --> 0:00:36,526
Vivian 和 Chris 一起

11
00:00:36,526 --> 0:00:37,996
来谈谈使用 Xcode 10 以后的

12
00:00:37,996 --> 0:00:39,646
新的本地化工作流程

13
00:00:41,146 --> 0:00:42,486
首先我想跟大家一起

14
00:00:42,486 --> 0:00:44,136
快速回顾下

15
00:00:44,136 --> 0:00:45,906
在 Xcode 10 之前的

16
00:00:45,906 --> 0:00:47,486
本地化工作流程

17
00:00:48,926 --> 0:00:50,856
然后我会介绍 Xcode 本地化目录

18
00:00:50,856 --> 0:00:52,486
这将是一个全新的模板

19
00:00:52,486 --> 0:00:54,786
用于在 Xcode 10 上

20
00:00:54,786 --> 0:00:56,706
导入和导出

21
00:00:56,706 --> 0:00:57,556
你的本地化文件

22
00:00:58,446 --> 0:01:00,026
最后 Chris 将讨论

23
00:00:58,446 --> 0:01:00,026
最后 Chris 将讨论

24
00:01:00,026 --> 0:01:02,276
如何使用目标定义文件

25
00:01:02,376 --> 0:01:03,906
来本地化 Siri 捷径

26
00:01:03,936 --> 0:01:05,936
该文件也是我们今年

27
00:01:06,026 --> 0:01:07,546
在 Xcode 10 中引入的

28
00:01:07,756 --> 0:01:08,646
一种新的文件格式

29
00:01:10,036 --> 0:01:11,536
让我们开始快速

30
00:01:11,566 --> 0:01:12,576
概述一下

31
00:01:15,236 --> 0:01:17,666
在 Xcode 10 之前

32
00:01:17,716 --> 0:01:19,166
如果你有一个包含

33
00:01:19,166 --> 0:01:20,996
App 支持的

34
00:01:20,996 --> 0:01:22,676
本地化的项目

35
00:01:22,716 --> 0:01:24,276
我们将在项目中查找

36
00:01:24,276 --> 0:01:25,696
字符基串的本地化资源

37
00:01:26,176 --> 0:01:27,746
这些字符串可以在源代码

38
00:01:27,746 --> 0:01:29,026
故事板文件

39
00:01:29,116 --> 0:01:30,546
字符串文件

40
00:01:30,546 --> 0:01:32,186
或字符串字典中定义

41
00:01:32,786 --> 0:01:34,466
我们识别了这些资源后

42
00:01:34,466 --> 0:01:36,426
我们就从中

43
00:01:36,476 --> 0:01:38,786
提取字符串

44
00:01:38,786 --> 0:01:39,766
并以 XLIFF 格式导出它们

45
00:01:40,386 --> 0:01:42,556
XLIFF 是一个行业标准

46
00:01:42,556 --> 0:01:44,296
大多数本地化从业者

47
00:01:44,296 --> 0:01:45,056
都已经非常熟悉了

48
00:01:45,636 --> 0:01:46,536
这些就是你要

49
00:01:46,586 --> 0:01:48,246
发出去翻译的

50
00:01:49,936 --> 0:01:51,546
在你的 XLIFF 文件

51
00:01:51,546 --> 0:01:54,216
翻译完成后 作为导入文件

52
00:01:54,216 --> 0:01:55,356
我们将它们添加到

53
00:01:55,356 --> 0:01:57,596
你的 Xcode 项目的

54
00:01:57,596 --> 0:01:59,346
可本地化资源中

55
00:01:59,346 --> 0:02:01,036
其中包含 XLIFF 文件中的新翻译

56
00:01:59,346 --> 0:02:01,036
其中包含 XLIFF 文件中的新翻译

57
00:02:01,646 --> 0:02:03,576
这个流程现在变得非常简单

58
00:02:06,386 --> 0:02:08,216
XLIFF 格式

59
00:02:08,216 --> 0:02:10,536
为开发者提供了极大的好处

60
00:02:11,136 --> 0:02:12,916
首先它可以帮助你

61
00:02:13,266 --> 0:02:14,726
将本地化工作从代码中抽离出来

62
00:02:14,766 --> 0:02:16,396
这样就不必在源代码中

63
00:02:16,596 --> 0:02:18,886
进行任何的语言假设

64
00:02:20,266 --> 0:02:21,776
XLIFF 文件同时保留了

65
00:02:21,836 --> 0:02:23,896
开发者语言和

66
00:02:23,896 --> 0:02:25,736
翻译本地化的内容

67
00:02:25,736 --> 0:02:27,306
以便本地化人员

68
00:02:27,306 --> 0:02:28,696
可以在你提供的

69
00:02:28,946 --> 0:02:31,096
XLIFF 文件中

70
00:02:31,096 --> 0:02:32,006
直接翻译

71
00:02:32,836 --> 0:02:35,246
除此之外 XLIFF

72
00:02:35,246 --> 0:02:37,096
是一个非常好的工具

73
00:02:37,096 --> 0:02:38,736
它将来自不同资源

74
00:02:38,736 --> 0:02:40,406
和不同文件类型的字符串

75
00:02:40,486 --> 0:02:41,926
合并到一个文档中

76
00:02:41,926 --> 0:02:43,556
而不是交付

77
00:02:43,556 --> 0:02:45,186
多个文件类型

78
00:02:45,436 --> 0:02:46,536
并对其进行记录

79
00:02:48,506 --> 0:02:50,466
但是 XLIFF 没有

80
00:02:50,466 --> 0:02:52,126
为本地化人员提供

81
00:02:52,126 --> 0:02:53,846
视觉环境和

82
00:02:53,906 --> 0:02:55,046
功能性的上下文

83
00:02:56,296 --> 0:02:57,806
它不提供资源数据

84
00:02:57,806 --> 0:02:59,786
比如项目中的素材

85
00:02:59,886 --> 0:03:01,326
例如故事板文件

86
00:02:59,886 --> 0:03:01,326
例如故事板文件

87
00:03:01,326 --> 0:03:02,956
将非常有助于

88
00:03:02,956 --> 0:03:05,416
本地化人员

89
00:03:05,416 --> 0:03:06,356
想象你的 UI 在

90
00:03:06,356 --> 0:03:07,496
开发语言中的布局

91
00:03:08,176 --> 0:03:11,336
它也不提供关于

92
00:03:11,336 --> 0:03:14,956
XLIFF 的自定义元数据

93
00:03:15,326 --> 0:03:16,826
最后 我们现在生成的

94
00:03:16,826 --> 0:03:18,336
XLIFF 文件没有大小

95
00:03:18,456 --> 0:03:20,146
和长度属性的限制

96
00:03:20,146 --> 0:03:21,836
而知晓限制对本地化人员

97
00:03:21,836 --> 0:03:23,646
大有好处

98
00:03:24,066 --> 0:03:25,586
如果给定的字符串显示

99
00:03:25,586 --> 0:03:26,986
在 Watch/iPhone/iPad 屏幕上

100
00:03:26,986 --> 0:03:28,636
本地化人员会

101
00:03:28,636 --> 0:03:31,596
自主选择翻译的长度

102
00:03:33,606 --> 0:03:36,136
为什么上下文

103
00:03:36,136 --> 0:03:37,116
对你的本地化人员而言十分重要呢

104
00:03:37,166 --> 0:03:40,226
如果我们来看下

105
00:03:40,226 --> 0:03:43,026
之后要给大家演示的 

106
00:03:43,026 --> 0:03:44,646
一个旅游 App 的例子

107
00:03:44,646 --> 0:03:47,196
如果你看到导航栏

108
00:03:47,326 --> 0:03:48,746
右边的 “Book” 按钮

109
00:03:48,746 --> 0:03:51,366
我们这些

110
00:03:51,366 --> 0:03:53,856
坐在房间里的人

111
00:03:53,856 --> 0:03:55,346
都十分清楚

112
00:03:55,346 --> 0:03:56,626
“book” 指的是某些

113
00:03:56,716 --> 0:03:58,796
和旅行相关的东西

114
00:03:58,796 --> 0:04:00,626
因为我们面前有

115
00:03:58,796 --> 0:04:00,626
因为我们面前有

116
00:04:00,626 --> 0:04:02,106
相应的视觉环境

117
00:04:02,166 --> 0:04:04,026
时间 日期

118
00:04:04,106 --> 0:04:05,666
游客数目和价格

119
00:04:07,036 --> 0:04:08,726
但是如果你给你的本地化人员

120
00:04:08,896 --> 0:04:11,136
发送一个 XLIFF 文件

121
00:04:11,136 --> 0:04:12,616
他们唯一看到的

122
00:04:12,746 --> 0:04:14,196
就是字符串 “Book”

123
00:04:14,196 --> 0:04:16,046
没有我们之前看到

124
00:04:16,046 --> 0:04:17,526
视觉上下文

125
00:04:17,856 --> 0:04:20,666
所以 “Book” 可以指

126
00:04:20,666 --> 0:04:21,356
两个完全不同的东西

127
00:04:21,935 --> 0:04:23,936
它可以是名词 指读书的书

128
00:04:23,936 --> 0:04:26,726
也可以是动词

129
00:04:26,726 --> 0:04:28,966
指预定酒店房间

130
00:04:28,966 --> 0:04:33,246
机票或旅行的这个动作

131
00:04:33,846 --> 0:04:35,446
我问我们的俄语翻译

132
00:04:35,446 --> 0:04:36,936
他是否能帮我翻译

133
00:04:36,936 --> 0:04:38,386
“Book” 这个词

134
00:04:38,386 --> 0:04:39,936
没有任何额外的上下文

135
00:04:39,936 --> 0:04:42,176
他想出了所有

136
00:04:42,176 --> 0:04:43,426
这些不同的选择

137
00:04:43,786 --> 0:04:45,756
因此如果不给他

138
00:04:45,756 --> 0:04:47,186
提供额外的上下文

139
00:04:47,186 --> 0:04:48,756
他将很难决定在

140
00:04:48,976 --> 0:04:50,586
UI 中为俄罗斯用户

141
00:04:50,586 --> 0:04:52,266
显示哪个义项

142
00:04:53,516 --> 0:04:55,266
上下文对于

143
00:04:55,306 --> 0:04:57,166
本地化人员来讲

144
00:04:57,166 --> 0:04:58,976
在决定所使用的翻译长度时也十分重要

145
00:04:59,046 --> 0:05:02,436
我们来看一下这个例子

146
00:04:59,046 --> 0:05:02,436
我们来看一下这个例子

147
00:05:02,436 --> 0:05:04,646
这有一个短语

148
00:05:04,646 --> 0:05:06,196
“预订确认”

149
00:05:06,396 --> 0:05:08,416
用英文显示在

150
00:05:08,686 --> 0:05:10,446
Watch 屏幕上就很合适

151
00:05:10,446 --> 0:05:12,716
但是在法语中却是截断的

152
00:05:13,956 --> 0:05:15,256
首先 截断了

153
00:05:15,256 --> 0:05:16,536
在 UI 中看起来

154
00:05:16,536 --> 0:05:18,846
不是很妥当

155
00:05:18,846 --> 0:05:20,366
有时候截断甚至会

156
00:05:20,366 --> 0:05:21,996
改变单词的意思

157
00:05:22,436 --> 0:05:24,556
甚至会冒犯你的用户

158
00:05:24,936 --> 0:05:26,736
它可以很有趣

159
00:05:26,736 --> 0:05:28,576
就像在这个例子中

160
00:05:28,576 --> 0:05:30,896
它的意思根本不是

161
00:05:30,896 --> 0:05:31,926
你的预订已经被确认

162
00:05:31,926 --> 0:05:34,826
而是说这个预订很蠢 完全不是我想要的字样

163
00:05:35,756 --> 0:05:39,626
因此我们认为

164
00:05:39,626 --> 0:05:40,976
为了向客户或本地化人员

165
00:05:40,976 --> 0:05:43,386
带来高质量的

166
00:05:43,666 --> 0:05:45,016
本地化内容

167
00:05:45,526 --> 0:05:46,426
提供上下文非常重要

168
00:05:47,476 --> 0:05:49,156
现在我想介绍一下

169
00:05:49,456 --> 0:05:51,416
Xcode 本地化目录

170
00:05:51,606 --> 0:05:53,506
这是一种在 Xcode 10 中

171
00:05:53,506 --> 0:05:55,646
导入和导出

172
00:05:55,646 --> 0:05:58,596
本地化内容的新格式

173
00:05:59,286 --> 0:06:01,606
什么是 Xcode 本地化目录

174
00:05:59,286 --> 0:06:01,606
什么是 Xcode 本地化目录

175
00:06:02,146 --> 0:06:04,666
它是一种具有

176
00:06:04,666 --> 0:06:07,806
.xcloc 扩展的新型本地化工具

177
00:06:08,746 --> 0:06:11,246
由 Xcode 中的

178
00:06:11,246 --> 0:06:13,056
导出本地化命令生成

179
00:06:13,056 --> 0:06:14,316
和 XLIFF 文件

180
00:06:14,316 --> 0:06:16,106
在 Xcode 10 之前的

181
00:06:16,386 --> 0:06:17,596
导出命令相同

182
00:06:18,126 --> 0:06:20,396
和导入本地化

183
00:06:20,396 --> 0:06:21,606
命令合并

184
00:06:22,736 --> 0:06:24,546
本地化目录主要是

185
00:06:24,546 --> 0:06:27,126
支持所有

186
00:06:27,206 --> 0:06:29,826
可本地化的素材

187
00:06:29,986 --> 0:06:32,076
这意味着在

188
00:06:32,076 --> 0:06:34,296
Xcode 项目中

189
00:06:34,296 --> 0:06:36,076
所有可本地化的素材

190
00:06:36,126 --> 0:06:37,686
本地化目录都支持

191
00:06:37,686 --> 0:06:39,376
不仅仅是

192
00:06:39,756 --> 0:06:40,496
字符串文件

193
00:06:41,516 --> 0:06:45,976
[ 掌声 ]

194
00:06:46,476 --> 0:06:47,946
本地化目录的

195
00:06:47,946 --> 0:06:50,236
另一个重要特性

196
00:06:50,596 --> 0:06:52,236
是它为本地化者

197
00:06:52,476 --> 0:06:54,806
提供了附加的

198
00:06:54,806 --> 0:06:55,566
上下文信息

199
00:06:57,256 --> 0:07:00,086
我们在 XLIFF 格式之上

200
00:06:57,256 --> 0:07:00,086
我们在 XLIFF 格式之上

201
00:07:00,086 --> 0:07:01,106
构建了 Xcode 本地化目录

202
00:07:02,026 --> 0:07:03,416
我们来看一下

203
00:07:03,416 --> 0:07:05,696
先前的的示例

204
00:07:05,826 --> 0:07:07,206
那么我们所有的字符串

205
00:07:07,206 --> 0:07:09,416
基本可本地化资源

206
00:07:09,416 --> 0:07:11,726
都将以 XLIFF 格式提取

207
00:07:11,796 --> 0:07:13,406
并且你在项目中标记为

208
00:07:13,406 --> 0:07:16,116
可本地化的任何其他内容

209
00:07:16,116 --> 0:07:17,906
都受本地化目录支持

210
00:07:17,906 --> 0:07:21,006
并以 xcloc 形式 以及包含

211
00:07:21,756 --> 0:07:23,326
字符串的 XLIFF 文件

212
00:07:23,356 --> 0:07:24,336
的形式导出

213
00:07:25,416 --> 0:07:27,066
我们来仔细看看

214
00:07:27,066 --> 0:07:29,706
本地化目录里面的内容

215
00:07:30,226 --> 0:07:33,156
在你的 xcloc 中

216
00:07:33,156 --> 0:07:36,536
可以找到一个 contents.json 文件

217
00:07:36,536 --> 0:07:38,656
其中包含有关导出的

218
00:07:38,656 --> 0:07:40,486
本地化目录的元数据

219
00:07:40,906 --> 0:07:43,286
里面有诸如

220
00:07:43,286 --> 0:07:45,106
App 开发语言的信息

221
00:07:45,106 --> 0:07:47,806
导出的本地化

222
00:07:47,806 --> 0:07:50,006
目录的目标语言信息

223
00:07:50,746 --> 0:07:52,046
还有有关生成该

224
00:07:52,046 --> 0:07:53,416
本地化目录的

225
00:07:53,416 --> 0:07:54,506
工具的信息

226
00:07:54,506 --> 0:07:55,846
在这种情况下

227
00:07:55,846 --> 0:07:57,436
它就是 Xcode

228
00:07:57,436 --> 0:07:58,756
你可以找到 Xcode 的

229
00:07:58,756 --> 0:07:59,936
版本号和构建版本号等信息

230
00:08:00,596 --> 0:08:02,536
它还有导出的

231
00:08:02,536 --> 0:08:05,426
本地化目录的版本号

232
00:08:06,356 --> 0:08:09,166
接下来在生成的 xcloc 中

233
00:08:09,986 --> 0:08:12,696
你会看到本地化内容目录

234
00:08:13,136 --> 0:08:14,876
本地化内容包含

235
00:08:14,976 --> 0:08:16,436
项目中所有

236
00:08:16,436 --> 0:08:18,886
可本地化的资源

237
00:08:18,886 --> 0:08:20,816
这是本地化人员

238
00:08:20,816 --> 0:08:23,326
工作的主要目录

239
00:08:24,836 --> 0:08:26,986
因此正如我所提到的那样

240
00:08:26,986 --> 0:08:29,736
在本地化内容中

241
00:08:29,736 --> 0:08:32,096
你会看到一个 XLIFF 文档

242
00:08:32,145 --> 0:08:34,456
其中包含所有项目本地化字符串

243
00:08:34,456 --> 0:08:36,606
以及可本地化的非字符串

244
00:08:36,806 --> 0:08:38,826
素材（如图像）

245
00:08:38,826 --> 0:08:40,265
如果你想要本地化这些内容

246
00:08:40,996 --> 0:08:42,246
这些素材将与

247
00:08:42,246 --> 0:08:44,176
本地化目录中的 Xcode 项目

248
00:08:44,246 --> 0:08:46,276
归进相同的

249
00:08:46,356 --> 0:08:48,616
文件系统层次结构中

250
00:08:49,786 --> 0:08:51,956
你的本地化人员

251
00:08:52,066 --> 0:08:54,306
还可以使用本地化内容

252
00:08:54,486 --> 0:08:57,016
来覆盖针对某种语言

253
00:08:57,016 --> 0:08:58,726
的任何资源

254
00:08:58,726 --> 0:09:00,336
例如界面构建文件

255
00:08:58,726 --> 0:09:00,336
例如界面构建文件

256
00:09:00,826 --> 0:09:05,206
接下来 在本地化目录中

257
00:09:05,206 --> 0:09:07,176
我们生成一个源内容目录

258
00:09:07,246 --> 0:09:08,976
这主要是为

259
00:09:08,976 --> 0:09:11,356
上下文提供的

260
00:09:12,156 --> 0:09:14,336
源内容包含用于

261
00:09:14,606 --> 0:09:16,336
生成本地化内容的素材

262
00:09:16,336 --> 0:09:18,056
用故事板举个例子

263
00:09:18,156 --> 0:09:19,576
会有助于本地化人员

264
00:09:19,576 --> 0:09:23,096
了解到你的用户界面

265
00:09:23,096 --> 0:09:24,366
是如何布置在

266
00:09:24,366 --> 0:09:25,366
开发语言中的

267
00:09:25,366 --> 0:09:27,486
以便决定

268
00:09:27,486 --> 0:09:28,416
翻译的长度

269
00:09:29,366 --> 0:09:30,816
即使你的

270
00:09:30,856 --> 0:09:34,166
本地化字符串来自源代码

271
00:09:34,466 --> 0:09:36,086
我们也不会在源内容中

272
00:09:36,186 --> 0:09:37,086
生成你的源代码

273
00:09:38,016 --> 0:09:41,686
主要为上下文提供的素材

274
00:09:41,686 --> 0:09:43,546
也将被归入相同的

275
00:09:43,546 --> 0:09:44,956
文件系统层次结构中

276
00:09:44,956 --> 0:09:46,316
即你的本地化目录

277
00:09:46,316 --> 0:09:48,616
中的 Xcode 项目

278
00:09:48,616 --> 0:09:50,026
正如我所提到的

279
00:09:50,026 --> 0:09:51,776
这主要是为上下文提供的

280
00:09:51,776 --> 0:09:53,566
即使你的本地化人员

281
00:09:53,566 --> 0:09:55,956
在导入中更改你的源上下文

282
00:09:55,956 --> 0:09:58,026
Xcode 也会忽略它们

283
00:09:58,026 --> 0:10:00,246
不会将这些资源导回

284
00:09:58,026 --> 0:10:00,246
不会将这些资源导回

285
00:10:00,766 --> 0:10:01,936
到你的项目中

286
00:10:03,116 --> 0:10:05,726
最后在本地化目录中

287
00:10:05,726 --> 0:10:07,166
你将找到一个 Notes 目录

288
00:10:07,166 --> 0:10:09,426
这主要是为

289
00:10:09,426 --> 0:10:11,646
本地化人员

290
00:10:11,646 --> 0:10:13,766
提供任何附加的

291
00:10:13,766 --> 0:10:15,946
上下文信息

292
00:10:16,816 --> 0:10:18,546
比如说 它可以是

293
00:10:18,626 --> 0:10:21,486
来自 UI 附件的

294
00:10:21,486 --> 0:10:22,046
屏幕快照数据

295
00:10:22,976 --> 0:10:25,176
可以是自述文件或电影

296
00:10:25,176 --> 0:10:28,016
解释有关你的 App

297
00:10:28,016 --> 0:10:30,276
的信息或任何你认为

298
00:10:30,276 --> 0:10:31,476
对本地化人员

299
00:10:31,476 --> 0:10:34,026
非常重要的信息

300
00:10:34,576 --> 0:10:35,476
这就是 Xcode

301
00:10:35,476 --> 0:10:37,286
本地化目录结构

302
00:10:37,996 --> 0:10:40,026
我们也一直

303
00:10:40,026 --> 0:10:42,156
致力于更新 Xcode

304
00:10:42,156 --> 0:10:42,836
构建命令行工具

305
00:10:43,206 --> 0:10:45,196
现在在导出中

306
00:10:45,196 --> 0:10:46,966
我们生成一个 Xcode 本地化目录

307
00:10:47,456 --> 0:10:49,086
在导入时

308
00:10:49,086 --> 0:10:51,406
导入命令向后兼容

309
00:10:51,596 --> 0:10:53,386
如果你仍使用

310
00:10:53,386 --> 0:10:54,626
旧的 XLIFF 文件

311
00:10:54,626 --> 0:10:55,946
仍然可以将它们重新导入你的项目中

312
00:10:56,016 --> 0:10:58,226
或者你可以导入

313
00:10:58,506 --> 0:11:00,436
新的本地化目录

314
00:10:58,506 --> 0:11:00,436
新的本地化目录

315
00:11:01,306 --> 0:11:03,126
就是这样

316
00:11:03,126 --> 0:11:04,736
下面请 Vivian

317
00:11:04,736 --> 0:11:06,046
给大家演示一下

318
00:11:06,046 --> 0:11:07,126
本地化目录

319
00:11:07,176 --> 0:11:12,916
非常感谢 [ 掌声 ]

320
00:11:13,416 --> 0:11:13,976
&gt;&gt; 谢谢你 Sara

321
00:11:19,036 --> 0:11:20,776
是这样 我们一直在研究

322
00:11:20,776 --> 0:11:23,226
一个旅行 App

323
00:11:23,226 --> 0:11:25,246
这个 App 的特别之处在于

324
00:11:25,246 --> 0:11:27,506
它是第一个让你计划到

325
00:11:27,506 --> 0:11:28,256
其他星球度假的 App

326
00:11:28,866 --> 0:11:30,256
所以我们称之为度假行星

327
00:11:30,546 --> 0:11:33,966
我们来看一下 在启动画面上

328
00:11:33,966 --> 0:11:35,626
有这个可爱的标志

329
00:11:35,666 --> 0:11:37,706
还有 App 的名称

330
00:11:37,706 --> 0:11:38,996
点按这里 打开浏览

331
00:11:40,116 --> 0:11:41,146
我们可以预定航班

332
00:11:41,276 --> 0:11:43,816
预定探险和巡航

333
00:11:44,046 --> 0:11:45,546
或者整个假期

334
00:11:45,666 --> 0:11:46,806
咱们去火星吧

335
00:11:49,106 --> 0:11:50,406
现在我需要选择

336
00:11:50,406 --> 0:11:52,536
到火星上的哪个地方去

337
00:11:52,536 --> 0:11:53,966
我觉得可以试一试

338
00:11:53,966 --> 0:11:55,106
NASA 好奇号漫游者

339
00:11:55,106 --> 0:11:56,416
那就去 Gale Creator 吧

340
00:11:56,936 --> 0:11:59,946
肯定得在会议之后去

341
00:12:00,816 --> 0:12:03,686
我们去一个月吧

342
00:12:03,686 --> 0:12:05,236
乘坐一艘非常快的宇宙飞船

343
00:12:05,236 --> 0:12:07,546
我要带 Sara 和 Chris 一起去

344
00:12:07,546 --> 0:12:08,706
所以一共是三个旅行者

345
00:12:09,726 --> 0:12:11,636
总之会是一次非常便宜的火星之旅

346
00:12:12,956 --> 0:12:14,256
这是大家之前看到的

347
00:12:14,256 --> 0:12:15,046
那个 “Book” 按钮

348
00:12:15,956 --> 0:12:17,656
很好 我们的预订已经确认

349
00:12:18,276 --> 0:12:20,106
当然 地球上想要

350
00:12:20,106 --> 0:12:21,806
去访问火星的人

351
00:12:21,806 --> 0:12:23,656
有些人的 iOS

352
00:12:23,656 --> 0:12:26,096
设备语言不是英文

353
00:12:26,436 --> 0:12:27,336
所以我们需要

354
00:12:27,336 --> 0:12:29,166
本地化这个 App

355
00:12:29,166 --> 0:12:32,756
我们进入 Xcode

356
00:12:32,756 --> 0:12:34,626
我只需要

357
00:12:34,626 --> 0:12:36,866
选择我的项目

358
00:12:36,866 --> 0:12:38,286
在 Info 下面

359
00:12:38,286 --> 0:12:40,796
本地化 点按加号

360
00:12:40,796 --> 0:12:42,526
我们首先添加法语来试试看

361
00:12:44,666 --> 0:12:47,086
我的故事板默认是

362
00:12:47,086 --> 0:12:48,756
可本地化的

363
00:12:48,756 --> 0:12:49,586
所以它们已经被选中了

364
00:12:50,076 --> 0:12:51,356
有一个可本地化的

365
00:12:51,476 --> 0:12:53,306
字符串词典

366
00:12:53,306 --> 0:12:54,406
我也标记了可本地化

367
00:12:54,586 --> 0:12:55,916
我只需要点按完成（Finish）

368
00:12:56,046 --> 0:12:59,656
这时 Xcode 已经在

369
00:12:59,686 --> 0:13:01,696
我的项目中创建了 fr.lproj

370
00:12:59,686 --> 0:13:01,696
我的项目中创建了 fr.lproj

371
00:13:01,696 --> 0:13:04,106
并且通过故事板创建了

372
00:13:04,556 --> 0:13:06,586
带有我的英文字符串

373
00:13:06,586 --> 0:13:08,446
拷贝的字符串文件

374
00:13:09,796 --> 0:13:12,936
还拷贝了我的图像

375
00:13:12,936 --> 0:13:14,506
因为我没有标记它可本地化

376
00:13:14,736 --> 0:13:17,866
所以需要我们来选择在右边 点按本地化（Localize）

377
00:13:18,096 --> 0:13:19,696
这个文件中的语言

378
00:13:19,696 --> 0:13:21,516
之间没有内容共享

379
00:13:21,706 --> 0:13:23,396
所以我需要把它变成英语

380
00:13:23,876 --> 0:13:25,436
因为那是我默认的开发语言

381
00:13:26,346 --> 0:13:29,296
点按本地化（Localize）并勾选法语

382
00:13:29,296 --> 0:13:30,246
制作副本

383
00:13:31,316 --> 0:13:32,276
好了就是这样

384
00:13:33,466 --> 0:13:35,556
现在我准备

385
00:13:35,556 --> 0:13:36,456
导出本地化

386
00:13:37,336 --> 0:13:39,926
我选择我的项目

387
00:13:39,926 --> 0:13:42,246
到编辑器

388
00:13:42,246 --> 0:13:43,136
导出本地化

389
00:13:44,296 --> 0:13:45,396
把它命名为

390
00:13:45,396 --> 0:13:46,916
vacationplanetloc

391
00:13:46,916 --> 0:13:48,356
就不用打出本地化几个字了

392
00:13:49,196 --> 0:13:50,606
然后连按我要

393
00:13:50,606 --> 0:13:54,036
导出的法语 并点按存储（Save）

394
00:13:55,156 --> 0:13:57,116
现在 Xcode 为我生成了

395
00:13:57,116 --> 0:13:58,986
Xcode 本地化目录

396
00:13:58,986 --> 0:14:03,006
可以在访达中查看

397
00:13:58,986 --> 0:14:03,006
可以在访达中查看

398
00:14:03,236 --> 0:14:05,126
好的那我们开始吧

399
00:14:05,866 --> 0:14:07,556
这是我的法语 Xcode

400
00:14:07,556 --> 0:14:09,206
本地化目录

401
00:14:09,396 --> 0:14:10,596
扩展名为 .xcloc

402
00:14:11,596 --> 0:14:13,406
就像 Sara 说的那样

403
00:14:13,976 --> 0:14:15,886
有我的 Xcode 

404
00:14:15,886 --> 0:14:17,106
本地化目录

405
00:14:17,106 --> 0:14:18,196
的元数据 contents.json

406
00:14:19,386 --> 0:14:21,106
接下来是本地化内容

407
00:14:21,296 --> 0:14:23,866
在这里有一个 XLIFF

408
00:14:23,866 --> 0:14:25,936
和 Xcode 9 一样

409
00:14:26,586 --> 0:14:29,686
你可以看到这里有

410
00:14:29,686 --> 0:14:33,556
我所有的字符串

411
00:14:33,556 --> 0:14:34,586
在这里我们可以看到

412
00:14:34,586 --> 0:14:36,646
红色突出显示未翻译的英文副本

413
00:14:37,146 --> 0:14:42,436
和我的项目文件层次结构类似的

414
00:14:42,436 --> 0:14:44,996
本地化内容中有图标图像

415
00:14:45,586 --> 0:14:48,456
接下来我们来看源内容

416
00:14:49,126 --> 0:14:50,836
同样仿照

417
00:14:50,836 --> 0:14:52,676
Xcode 项目的文件层次结构

418
00:14:53,346 --> 0:14:55,666
底层有故事板文件

419
00:14:55,666 --> 0:14:56,996
还有信息 plist

420
00:14:56,996 --> 0:14:58,716
字符串的英文

421
00:14:58,886 --> 0:15:00,986
代码中定义的字符串的 

422
00:14:58,886 --> 0:15:00,986
代码中定义的字符串的 

423
00:15:01,036 --> 0:15:02,356
localizable.strings

424
00:15:03,056 --> 0:15:05,246
可本地化的字符串字典和

425
00:15:05,246 --> 0:15:06,976
图像的英文版本

426
00:15:07,826 --> 0:15:09,806
所以 Xcode 本地化目录的

427
00:15:09,806 --> 0:15:11,556
最后一部分是

428
00:15:11,556 --> 0:15:12,366
Notes 文件夹

429
00:15:12,896 --> 0:15:14,486
Xcode 不会在这里

430
00:15:14,486 --> 0:15:17,906
放置任何东西

431
00:15:17,906 --> 0:15:20,106
但昨天我运行了 XCUI 测试

432
00:15:20,106 --> 0:15:22,556
这是一个非常简单的创建屏幕快照的方法

433
00:15:23,886 --> 0:15:26,086
所有的屏幕快照都保存为

434
00:15:26,576 --> 0:15:28,196
测试的附件

435
00:15:28,576 --> 0:15:29,606
所以我们可以回头看看

436
00:15:29,606 --> 0:15:32,236
测试结果

437
00:15:32,806 --> 0:15:35,756
例如我在这里添加了

438
00:15:35,906 --> 0:15:37,436
启动画面

439
00:15:37,436 --> 0:15:38,386
作为附件

440
00:15:38,926 --> 0:15:40,866
就是这样

441
00:15:41,376 --> 0:15:42,976
在访达中

442
00:15:42,976 --> 0:15:45,856
把它们拷贝到

443
00:15:45,856 --> 0:15:47,306
Notes 文件夹中

444
00:15:47,426 --> 0:15:48,986
选择在访达中显示（Show in Finder）

445
00:15:50,146 --> 0:15:52,266
显示包内容

446
00:15:52,526 --> 0:15:53,576
查看附件

447
00:15:54,366 --> 0:15:55,146
就在这儿

448
00:15:56,556 --> 0:16:00,746
拷贝并粘贴

449
00:15:56,556 --> 0:16:00,746
拷贝并粘贴

450
00:16:02,766 --> 0:16:04,046
我认为这个 Travel Details

451
00:16:04,046 --> 0:16:05,276
会特别有用

452
00:16:05,276 --> 0:16:06,626
因为它有麻烦的

453
00:16:06,626 --> 0:16:09,646
“Book” 按钮

454
00:16:09,916 --> 0:16:11,866
现在我准备将我的整个

455
00:16:11,866 --> 0:16:14,166
Xcode 本地化目录

456
00:16:14,166 --> 0:16:16,306
发送给我的本地化人员

457
00:16:16,856 --> 0:16:19,986
现在最棒的是

458
00:16:19,986 --> 0:16:21,796
他们非常快 已经完成了

459
00:16:21,796 --> 0:16:23,016
所以我们可以继续

460
00:16:23,016 --> 0:16:23,896
导入这些翻译

461
00:16:24,356 --> 0:16:26,946
只要回到 我的项目

462
00:16:28,196 --> 0:16:29,776
确保我选择了该项目

463
00:16:30,716 --> 0:16:32,136
和以前一样

464
00:16:32,836 --> 0:16:34,736
转到编辑器

465
00:16:34,736 --> 0:16:35,536
这次选择 Import Localizations

466
00:16:36,736 --> 0:16:38,476
所以我要选择

467
00:16:38,476 --> 0:16:40,566
Return to Xcode Localization Catalog.

468
00:16:41,406 --> 0:16:42,056
点按打开

469
00:16:42,556 --> 0:16:45,256
现在我得到一个

470
00:16:45,256 --> 0:16:46,776
与 Xcode 9 相同的

471
00:16:46,916 --> 0:16:48,486
对比视图

472
00:16:48,486 --> 0:16:49,766
它显示了有关我的

473
00:16:49,886 --> 0:16:50,366
字符串的所有警告 错误和更改

474
00:16:50,906 --> 0:16:52,616
所以在这里 这只是警告我

475
00:16:52,616 --> 0:16:54,116
我没有为 infoplist.strings 

476
00:16:54,116 --> 0:16:55,606
做任何翻译

477
00:16:56,016 --> 0:16:57,696
但没关系 我没有要求这些翻译

478
00:16:57,696 --> 0:16:59,066
所以我就

479
00:16:59,066 --> 0:17:00,166
忽略这个警告

480
00:16:59,066 --> 0:17:00,166
忽略这个警告

481
00:17:00,706 --> 0:17:03,156
我也可以检查有什么变化

482
00:17:03,156 --> 0:17:04,096
所以在这里

483
00:17:04,215 --> 0:17:05,406
如果我们看故事板

484
00:17:05,406 --> 0:17:07,496
可以看到

485
00:17:07,915 --> 0:17:09,616
真正的法语翻译

486
00:17:09,616 --> 0:17:10,726
来替换字符串中的英文副本

487
00:17:12,175 --> 0:17:13,726
所以我只要点按导入 就像那样

488
00:17:15,296 --> 0:17:16,786
我的字符串和

489
00:17:16,786 --> 0:17:18,746
非字符串资源

490
00:17:18,746 --> 0:17:20,616
的所有翻译都在

491
00:17:20,616 --> 0:17:21,976
我的项目的正确位置

492
00:17:22,516 --> 0:17:28,726
[ 掌声 ]

493
00:17:29,226 --> 0:17:30,836
好的 我们再检查一下

494
00:17:31,616 --> 0:17:32,736
我将对一些文件

495
00:17:32,736 --> 0:17:33,696
进行抽查

496
00:17:33,696 --> 0:17:35,866
好的 main.strings

497
00:17:35,906 --> 0:17:37,256
看着是法语

498
00:17:37,256 --> 0:17:38,356
其实我不会讲法语

499
00:17:39,456 --> 0:17:40,866
检查一下图像

500
00:17:41,076 --> 0:17:42,776
也是法语

501
00:17:42,776 --> 0:17:44,966
好 让我们再用法语

502
00:17:44,966 --> 0:17:47,216
运行一下这个 App

503
00:17:47,216 --> 0:17:48,896
确保一切都没问题

504
00:17:49,346 --> 0:17:51,496
我要选择

505
00:17:51,496 --> 0:17:53,996
活动模式（Active Scheme）

506
00:17:53,996 --> 0:17:54,826
再选择编辑模式（Edit Scheme）

507
00:17:56,046 --> 0:17:58,636
将 App 语言设置为法语

508
00:17:58,636 --> 0:18:00,696
将 App 国家或地区

509
00:17:58,636 --> 0:18:00,696
将 App 国家或地区

510
00:18:00,696 --> 0:18:02,106
设置为法国

511
00:18:02,756 --> 0:18:04,506
现在我准备好运行了

512
00:18:05,516 --> 0:18:07,646
先停止英语运行

513
00:18:08,576 --> 0:18:11,216
稍等一小会儿

514
00:18:11,216 --> 0:18:12,796
我们应该可以得到

515
00:18:12,796 --> 0:18:13,456
一个法语的 App

516
00:18:14,056 --> 0:18:16,566
好的到目前为止看起来不错

517
00:18:16,566 --> 0:18:18,376
我只需要快速浏览一下

518
00:18:18,376 --> 0:18:19,126
这样我就可以查看 “Book” 按钮

519
00:18:20,156 --> 0:18:21,796
好的浏览一下

520
00:18:21,796 --> 0:18:22,636
我们再回到火星

521
00:18:22,986 --> 0:18:24,166
我真的很喜欢 Gale Creator

522
00:18:24,746 --> 0:18:25,626
真棒

523
00:18:26,056 --> 0:18:27,866
那个 “Book” 按钮翻译对了

524
00:18:27,866 --> 0:18:28,996
我把这部分的屏幕快照

525
00:18:28,996 --> 0:18:31,306
也包括进去 可能真的很有帮助

526
00:18:31,986 --> 0:18:33,886
如果我们查看一下日期

527
00:18:34,736 --> 0:18:36,396
我不需要给我的

528
00:18:36,396 --> 0:18:38,616
翻译们发送月份列表

529
00:18:39,086 --> 0:18:40,976
而是直接用

530
00:18:40,976 --> 0:18:42,426
日期选择器

531
00:18:42,506 --> 0:18:43,986
然后使用格式化程序

532
00:18:43,986 --> 0:18:45,436
就能免费获得这些本地化内容

533
00:18:46,816 --> 0:18:48,376
同样 通过使用格式化程序的

534
00:18:48,376 --> 0:18:50,236
价格模板

535
00:18:50,266 --> 0:18:51,596
可以得到正确的数字格式

536
00:18:51,706 --> 0:18:53,116
和欧元价格

537
00:18:54,436 --> 0:18:56,676
所以无论是字符串

538
00:18:56,876 --> 0:18:58,886
还是非字符串

539
00:18:58,886 --> 0:19:01,466
这都是一种简易转换为法语的方法

540
00:18:58,886 --> 0:19:01,466
这都是一种简易转换为法语的方法

541
00:19:01,466 --> 0:19:02,806
就像我只用 

542
00:19:02,806 --> 0:19:04,406
Xcode 9 中的

543
00:19:04,586 --> 0:19:05,246
字符串资源一样

544
00:19:05,576 --> 0:19:07,126
最后 让我们

545
00:19:07,166 --> 0:19:08,876
回到幻灯片

546
00:19:08,876 --> 0:19:11,836
结束对 Xcode 本地化目录的讨论

547
00:19:12,516 --> 0:19:19,266
[ 掌声 ]

548
00:19:19,766 --> 0:19:21,906
好的我们已经介绍了

549
00:19:21,906 --> 0:19:23,686
Xcode 本地化目录作为

550
00:19:23,686 --> 0:19:26,346
Xcode 的新的本地化

551
00:19:26,346 --> 0:19:28,746
导出和导入标准

552
00:19:29,856 --> 0:19:31,286
为你的翻译人员

553
00:19:31,286 --> 0:19:33,146
提供了更多的灵活性

554
00:19:33,146 --> 0:19:34,676
并允许你方便地提供

555
00:19:34,676 --> 0:19:37,036
更多的视觉和功能背景

556
00:19:37,036 --> 0:19:38,326
以更好地帮助他们

557
00:19:38,326 --> 0:19:40,346
第一次就做出

558
00:19:40,466 --> 0:19:41,316
高质量的翻译

559
00:19:41,876 --> 0:19:44,366
它增加了文件类型支持

560
00:19:44,406 --> 0:19:45,926
因此你可以像使用基于

561
00:19:45,926 --> 0:19:47,876
字符串的资源那样

562
00:19:48,206 --> 0:19:49,696
轻松地导出和导入

563
00:19:49,696 --> 0:19:51,216
非字符串资源

564
00:19:51,826 --> 0:19:54,766
我们还更新了 Xcode 构建版本

565
00:19:54,886 --> 0:19:56,796
以使用 Xcode 本地化目录

566
00:19:56,796 --> 0:19:59,076
提供持续支持

567
00:20:00,116 --> 0:20:02,176
如果你现在有

568
00:20:02,176 --> 0:20:04,256
本地化的内容

569
00:20:04,256 --> 0:20:05,736
不要担心

570
00:20:05,736 --> 0:20:07,026
当 Xcode 和 Xcode 构建

571
00:20:07,026 --> 0:20:09,556
都向后兼容时

572
00:20:09,556 --> 0:20:11,256
你仍然可以导入这些 XLIFFs 文件

573
00:20:12,496 --> 0:20:14,606
好了 现在我把场地交给 Chris

574
00:20:14,606 --> 0:20:16,556
他会和你们谈谈

575
00:20:16,556 --> 0:20:18,756
如何通过本地化目标

576
00:20:18,756 --> 0:20:20,056
定义文件来

577
00:20:20,056 --> 0:20:21,616
创建 Siri 捷径

578
00:20:22,516 --> 0:20:27,796
[ 掌声 ]

579
00:20:28,296 --> 0:20:29,186
&gt;&gt; 谢谢你 Vivian

580
00:20:29,686 --> 0:20:30,796
这可真棒

581
00:20:31,366 --> 0:20:32,306
我非常期待

582
00:20:32,306 --> 0:20:33,146
此次的火星之旅

583
00:20:33,706 --> 0:20:36,526
我将向你们展示如何

584
00:20:36,726 --> 0:20:38,656
通过本地化你的目标

585
00:20:38,746 --> 0:20:41,306
定义来本地化 Siri 捷径

586
00:20:41,766 --> 0:20:44,886
你的目标定义是

587
00:20:44,886 --> 0:20:46,546
在 Xcode 中的

588
00:20:46,646 --> 0:20:47,996
目标定义文件中创建的

589
00:20:48,716 --> 0:20:50,146
这些都是你用来

590
00:20:50,146 --> 0:20:51,876
为 Siri 捷径

591
00:20:51,876 --> 0:20:52,886
定义的自定义目标

592
00:20:53,516 --> 0:20:54,916
它们只是具有目标定义

593
00:20:54,916 --> 0:20:57,166
扩展名的文件

594
00:20:57,166 --> 0:20:59,406
在 Xcode 中具有自定义编辑器

595
00:21:00,186 --> 0:21:02,626
我们设计它们是为了

596
00:21:02,626 --> 0:21:04,796
利用基础本地化

597
00:21:05,386 --> 0:21:07,036
所以当你翻译你的目标时

598
00:21:07,036 --> 0:21:08,816
你没有很多不同的

599
00:21:08,816 --> 0:21:10,256
目标定义文件

600
00:21:10,256 --> 0:21:13,096
每种语言一个

601
00:21:13,096 --> 0:21:15,226
你只需要使用字符串文件

602
00:21:15,226 --> 0:21:17,376
来本地化你的

603
00:21:17,376 --> 0:21:18,486
目标定义中的字符串

604
00:21:19,396 --> 0:21:22,626
当然 我们也支持

605
00:21:22,786 --> 0:21:25,876
stringsdict 文件

606
00:21:25,876 --> 0:21:28,236
用于各种情况

607
00:21:28,236 --> 0:21:29,796
如复数规则和

608
00:21:29,796 --> 0:21:30,446
可变宽度字符串

609
00:21:31,936 --> 0:21:33,636
如果你还没看过

610
00:21:33,746 --> 0:21:35,176
我强烈建议你

611
00:21:35,176 --> 0:21:36,776
去看看昨天大会的

612
00:21:36,776 --> 0:21:38,606
Siri 捷径的介绍

613
00:21:38,606 --> 0:21:40,336
它可以用于流媒体

614
00:21:40,336 --> 0:21:43,916
现在让我们

615
00:21:44,226 --> 0:21:46,256
快速浏览一下 目标定义编辑器

616
00:21:46,806 --> 0:21:47,986
这里我们有一个

617
00:21:47,986 --> 0:21:49,396
度假星球 App 的

618
00:21:49,456 --> 0:21:53,286
目标定义

619
00:21:53,286 --> 0:21:54,736
我们有一个

620
00:21:54,736 --> 0:21:55,376
预定度假的目标

621
00:21:56,336 --> 0:21:57,496
当然 你想在你的目标中

622
00:21:57,496 --> 0:21:58,726
本地化的

623
00:21:58,726 --> 0:22:01,056
内容有标题和

624
00:21:58,726 --> 0:22:01,056
内容有标题和

625
00:22:01,056 --> 0:22:02,886
目标本身的描述

626
00:22:03,206 --> 0:22:05,836
但是大部分你将要

627
00:22:05,836 --> 0:22:07,656
为你的目标定义

628
00:22:07,656 --> 0:22:09,756
本地化的

629
00:22:09,856 --> 0:22:13,036
是从目标参数组成的

630
00:22:13,346 --> 0:22:15,346
快捷类型

631
00:22:15,866 --> 0:22:18,816
当然 当一个目标被调用时

632
00:22:18,816 --> 0:22:20,836
它也会产生一个响应

633
00:22:20,836 --> 0:22:22,846
这些响应也可以通过

634
00:22:22,846 --> 0:22:25,676
响应模板进行定制

635
00:22:25,796 --> 0:22:27,576
这些响应模板的

636
00:22:27,666 --> 0:22:29,266
本地化方式与

637
00:22:29,266 --> 0:22:31,076
你的快捷方式

638
00:22:31,076 --> 0:22:33,836
类型完全相同

639
00:22:33,936 --> 0:22:35,436
现在让我们更深入地

640
00:22:35,436 --> 0:22:37,116
了解一个目标的实际结构

641
00:22:37,116 --> 0:22:38,816
以及它内部的

642
00:22:38,816 --> 0:22:39,196
可本地化结构

643
00:22:40,376 --> 0:22:42,426
目标实际上是

644
00:22:42,426 --> 0:22:43,776
具有各种类型的

645
00:22:43,776 --> 0:22:45,136
参数的集合

646
00:22:45,696 --> 0:22:46,866
它们可以有整数

647
00:22:47,106 --> 0:22:49,486
或昨天你们看到的字符串类型

648
00:22:49,486 --> 0:22:50,776
它们也支持

649
00:22:50,776 --> 0:22:53,916
自定义对象

650
00:22:53,916 --> 0:22:55,776
它们支持在目标定义中

651
00:22:55,776 --> 0:22:57,776
定义的枚举类型

652
00:22:58,256 --> 0:23:02,036
这些参数被组合成

653
00:22:58,256 --> 0:23:02,036
这些参数被组合成

654
00:23:02,036 --> 0:23:04,706
不同的快捷方式

655
00:23:04,706 --> 0:23:09,016
有一个可读性很强的标题

656
00:23:09,586 --> 0:23:13,816
当然 响应也是属性的集合

657
00:23:13,816 --> 0:23:15,506
这些属性具有

658
00:23:15,746 --> 0:23:17,846
容易理解的类型

659
00:23:18,126 --> 0:23:20,976
比如字符串或整数

660
00:23:21,226 --> 0:23:23,786
还可以具有

661
00:23:23,786 --> 0:23:24,636
枚举类型

662
00:23:25,226 --> 0:23:27,456
当你本地化

663
00:23:27,456 --> 0:23:29,156
你的目标定义时

664
00:23:29,156 --> 0:23:31,826
最需要本地化的是你的快捷方式

665
00:23:31,826 --> 0:23:34,666
类型和响应模板

666
00:23:35,026 --> 0:23:36,516
主要来说

667
00:23:36,516 --> 0:23:37,756
我们今天要讨论的是

668
00:23:37,886 --> 0:23:39,276
如何本地化你的

669
00:23:39,276 --> 0:23:42,096
快捷方式类型

670
00:23:42,096 --> 0:23:43,786
因为本地化相应模板的方式

671
00:23:43,786 --> 0:23:44,606
完全相同

672
00:23:45,196 --> 0:23:48,066
所以这里是我们的

673
00:23:48,066 --> 0:23:50,036
度假星球 App 的一个例子

674
00:23:50,396 --> 0:23:52,036
这是预订旅行的快捷方式

675
00:23:52,036 --> 0:23:56,296
这种类型的旅行

676
00:23:56,296 --> 0:23:57,946
实际上有一个

677
00:23:57,986 --> 0:24:00,316
占位符用于枚举

678
00:23:57,986 --> 0:24:00,316
占位符用于枚举

679
00:24:00,846 --> 0:24:03,096
此枚举允许你

680
00:24:03,186 --> 0:24:04,776
预订航班或

681
00:24:04,816 --> 0:24:06,396
预订邮轮

682
00:24:06,396 --> 0:24:07,486
或者预定假期

683
00:24:07,816 --> 0:24:10,216
当 Xcode 本地化

684
00:24:10,486 --> 0:24:12,336
你的目标定义文件时

685
00:24:12,466 --> 0:24:13,646
当你按下 Vivian 给你的

686
00:24:13,646 --> 0:24:14,876
本地化按钮时

687
00:24:15,776 --> 0:24:18,116
Xcode 会为这个

688
00:24:18,606 --> 0:24:22,046
枚举中的部分

689
00:24:22,046 --> 0:24:25,886
生成一个字符串

690
00:24:26,356 --> 0:24:30,066
因为我们选择了

691
00:24:30,136 --> 0:24:31,926
特定的词

692
00:24:31,926 --> 0:24:32,706
所以它恰好起作用

693
00:24:34,336 --> 0:24:36,786
因为我们的模板上

694
00:24:36,786 --> 0:24:38,676
写着 “预订航班”

695
00:24:38,676 --> 0:24:41,316
使用不定冠词

696
00:24:41,686 --> 0:24:44,106
我们可以

697
00:24:44,106 --> 0:24:46,106
或 “预订一种类型”

698
00:24:46,106 --> 0:24:47,986
使用不定冠词

699
00:24:47,986 --> 0:24:49,606
我们可以预订航班 预订邮轮 或预订度假套餐

700
00:24:49,646 --> 0:24:51,326
因为他们都以辅音开头

701
00:24:51,526 --> 0:24:53,186
因为这是英语的规则

702
00:24:53,696 --> 0:24:55,966
但是如果我为我的

703
00:24:56,286 --> 0:24:57,946
列举增加了一个

704
00:24:57,946 --> 0:24:59,966
新的值来代表预定一次探险 比如说火星

705
00:25:02,316 --> 0:25:05,136
Xcode 只是在它的

706
00:25:05,136 --> 0:25:06,656
字符串文件中生成

707
00:25:07,786 --> 0:25:10,996
"Book a expedition" 

708
00:25:10,996 --> 0:25:12,546
这实际上不是很合乎语法

709
00:25:13,516 --> 0:25:14,746
幸运的是

710
00:25:14,746 --> 0:25:16,266
这些字符串文件是

711
00:25:16,266 --> 0:25:19,956
由明确定义的 ID 和稳定 ID 来控制的

712
00:25:20,346 --> 0:25:21,926
因此你可以直接进入字符串文件

713
00:25:21,926 --> 0:25:24,996
并对其进行更改

714
00:25:24,996 --> 0:25:26,466
以使其符合语法

715
00:25:27,826 --> 0:25:29,586
英语并不是唯一

716
00:25:29,586 --> 0:25:31,416
一种具有这种语法

717
00:25:31,416 --> 0:25:32,476
一致性的语言

718
00:25:33,116 --> 0:25:34,396
当然不同的语言

719
00:25:34,476 --> 0:25:35,596
有不同的

720
00:25:35,596 --> 0:25:36,036
语法一致性

721
00:25:36,276 --> 0:25:37,686
法语的话 你需要做

722
00:25:37,686 --> 0:25:39,776
同样的事

723
00:25:40,176 --> 0:25:41,626
你需要让冠词的词性

724
00:25:41,686 --> 0:25:44,006
和它所指的

725
00:25:44,006 --> 0:25:48,046
名词的词性一致

726
00:25:48,336 --> 0:25:50,486
现在让我们快速

727
00:25:50,486 --> 0:25:51,856
看一个更复杂的例子

728
00:25:52,716 --> 0:25:57,736
这里有一个快捷方式

729
00:25:57,736 --> 0:26:00,106
用于为一些人

730
00:25:57,736 --> 0:26:00,106
用于为一些人

731
00:26:00,246 --> 0:26:01,526
预订假期 

732
00:26:01,526 --> 0:26:03,706
同样 在生成字符串

733
00:26:03,706 --> 0:26:05,546
文件 Xcode 时

734
00:26:06,246 --> 0:26:08,106
它会将模板与

735
00:26:08,106 --> 0:26:08,866
枚举值组合在一起

736
00:26:09,326 --> 0:26:10,876
但是 它不会为

737
00:26:10,876 --> 0:26:13,056
每个可能的整数

738
00:26:13,086 --> 0:26:15,016
生成一个字符串

739
00:26:16,256 --> 0:26:18,716
相反 它会在

740
00:26:18,716 --> 0:26:20,066
字符串中

741
00:26:20,066 --> 0:26:21,756
保留一个占位符

742
00:26:21,756 --> 0:26:24,866
由快捷方式系统在运行时替换

743
00:26:25,186 --> 0:26:29,446
再说一遍 这看起来

744
00:26:29,446 --> 0:26:30,376
应该是合理的

745
00:26:30,456 --> 0:26:32,986
对吧 上面写着

746
00:26:32,986 --> 0:26:35,536
为一些人订一个假期

747
00:26:35,656 --> 0:26:36,566
或者订一个航班

748
00:26:37,066 --> 0:26:41,076
在我们的字符串文件中

749
00:26:41,076 --> 0:26:42,716
我们得到了生成的 ID 和字符串

750
00:26:42,716 --> 0:26:44,226
上面写的是

751
00:26:44,226 --> 0:26:46,376
为一些人预订一次巡航

752
00:26:46,606 --> 0:26:48,666
这个占位符仍然在那里

753
00:26:49,196 --> 0:26:51,526
然而当我为自己去

754
00:26:51,526 --> 0:26:53,796
预订一艘游轮去庆祝

755
00:26:53,796 --> 0:26:57,386
伟大的 WWDC 时

756
00:26:57,386 --> 0:26:59,206
真正的快捷方式是

757
00:26:59,206 --> 0:27:01,666
“预订一个人的游轮”

758
00:26:59,206 --> 0:27:01,666
“预订一个人的游轮”

759
00:27:01,666 --> 0:27:04,696
这句英语

760
00:27:04,696 --> 0:27:05,796
在语法上不合规范

761
00:27:07,146 --> 0:27:08,936
但是 这些文件

762
00:27:09,046 --> 0:27:11,796
也支持字符串词典（stringsdict）文件

763
00:27:11,796 --> 0:27:14,116
因此你可以做

764
00:27:14,116 --> 0:27:16,746
所有你需要的多元化

765
00:27:16,856 --> 0:27:18,766
并让系统为你处理它

766
00:27:20,426 --> 0:27:23,076
在字符串词典（stringsdict）文件中

767
00:27:23,076 --> 0:27:26,706
我们有字典本身

768
00:27:26,706 --> 0:27:29,156
由我在字符串文件中

769
00:27:29,336 --> 0:27:31,196
展示的那个字符串进行键控

770
00:27:31,566 --> 0:27:33,506
你可以使用它

771
00:27:33,506 --> 0:27:37,196
也可以使用 ID 作为关键

772
00:27:37,196 --> 0:27:40,676
然后我们又生成了

773
00:27:40,676 --> 0:27:42,576
另一个字符串

774
00:27:42,576 --> 0:27:44,906
它实际上会在用户界面中显示出来

775
00:27:46,376 --> 0:27:48,366
在这里 我们指的是

776
00:27:48,366 --> 0:27:50,656
另一个变量它可以

777
00:27:50,656 --> 0:27:52,816
根据英语的复数规则

778
00:27:52,816 --> 0:27:55,976
来代替此变量

779
00:27:56,046 --> 0:27:57,956
或另一个变量

780
00:27:58,466 --> 0:28:02,156
要了解关于 

781
00:27:58,466 --> 0:28:02,156
要了解关于 

782
00:28:02,156 --> 0:28:04,276
stringsdict 文件的

783
00:28:04,276 --> 0:28:05,826
更多信息

784
00:28:05,826 --> 0:28:08,076
可以查看我们的分会

785
00:28:08,076 --> 0:28:09,876
从去年开始 在 WWDC App 中

786
00:28:09,876 --> 0:28:10,566
使用 Xcode 9 进行本地化

787
00:28:12,936 --> 0:28:15,096
如果我现在去

788
00:28:15,096 --> 0:28:17,536
预订我的邮轮

789
00:28:17,536 --> 0:28:19,646
这个操作系统会说

790
00:28:19,646 --> 0:28:22,026
哦 我为一个人进行预订

791
00:28:22,496 --> 0:28:24,866
所以我们用一个人的情况

792
00:28:24,866 --> 0:28:25,936
得到一个恰当的语法短语

793
00:28:26,836 --> 0:28:28,946
同样的 如果我想为

794
00:28:28,946 --> 0:28:30,836
我们所有人预订一次邮轮之旅

795
00:28:31,186 --> 0:28:33,186
你知道 毕竟我不是

796
00:28:33,186 --> 0:28:37,506
这里唯一的一个

797
00:28:37,626 --> 0:28:39,646
系统会说 “为三个人预订一次邮轮之旅”

798
00:28:40,166 --> 0:28:45,676
现在我们来聊聊

799
00:28:45,676 --> 0:28:47,366
在代码中创建的目标

800
00:28:48,446 --> 0:28:49,826
如果你正在代码中

801
00:28:49,826 --> 0:28:52,106
创建一个目标来

802
00:28:52,806 --> 0:28:55,216
将其捐赠给系统

803
00:28:55,216 --> 0:28:57,786
那么这并不一定是显示快捷方式的地方

804
00:28:58,076 --> 0:29:00,136
在将来的某个时刻

805
00:28:58,076 --> 0:29:00,136
在将来的某个时刻

806
00:29:00,206 --> 0:29:01,576
可以根据用户的操作

807
00:29:01,576 --> 0:29:02,776
显示这些内容

808
00:29:04,246 --> 0:29:07,106
我们有一个新的 API

809
00:29:07,106 --> 0:29:09,316
来创建一个延迟的

810
00:29:09,316 --> 0:29:12,516
可本地化字符串

811
00:29:12,516 --> 0:29:13,946
它将在字符串呈现给

812
00:29:13,946 --> 0:29:15,306
用户的地方进行本地化

813
00:29:16,006 --> 0:29:19,376
这是必要的

814
00:29:19,446 --> 0:29:21,226
因为向系统提供目标

815
00:29:21,226 --> 0:29:23,136
实际上是在告诉系统

816
00:29:23,216 --> 0:29:25,026
嘿 用户在我的 App 中

817
00:29:25,026 --> 0:29:27,696
执行了一些操作

818
00:29:27,696 --> 0:29:29,886
你可能会在

819
00:29:29,886 --> 0:29:31,896
其他时候再次提供它们

820
00:29:33,026 --> 0:29:35,506
幸运的是 这个 API 

821
00:29:35,506 --> 0:29:37,346
非常容易使用

822
00:29:37,746 --> 0:29:39,976
它只是一个添加到

823
00:29:39,976 --> 0:29:42,396
nsstring 的调用

824
00:29:42,436 --> 0:29:43,776
你可以使用它来包装

825
00:29:43,776 --> 0:29:45,856
要分配给你在代码中

826
00:29:45,856 --> 0:29:49,366
创建的目标的字符串

827
00:29:50,056 --> 0:29:52,786
让我们快速讨论

828
00:29:52,786 --> 0:29:53,376
一下我们所看到的

829
00:29:54,146 --> 0:29:56,216
我们已经看到

830
00:29:56,216 --> 0:29:58,076
Xcode 将你的快捷方式类型

831
00:29:58,246 --> 0:30:00,126
与在目标定义中

832
00:29:58,246 --> 0:30:00,126
与在目标定义中

833
00:30:00,126 --> 0:30:01,556
生成字符串文件时

834
00:30:01,556 --> 0:30:02,976
定义的枚举组合在一起

835
00:30:03,146 --> 0:30:08,106
你可以使用字符串

836
00:30:08,166 --> 0:30:10,356
和 stringsdict 文件

837
00:30:10,356 --> 0:30:11,106
本地化你的快捷方式

838
00:30:11,586 --> 0:30:14,796
如果你在代码中创建

839
00:30:14,886 --> 0:30:16,836
一个目标捐给系统

840
00:30:16,916 --> 0:30:18,716
通知用户操作的系统

841
00:30:18,716 --> 0:30:19,986
可能会重复

842
00:30:19,986 --> 0:30:23,066
你可以使用延迟局部目标字符串

843
00:30:23,066 --> 0:30:26,616
结束字符串以这样一种方式

844
00:30:26,616 --> 0:30:28,236
它将局部呈现

845
00:30:28,236 --> 0:30:29,476
给用户的时候

846
00:30:29,476 --> 0:30:31,526
不是在你的

847
00:30:31,526 --> 0:30:33,626
App 中创建的那个

848
00:30:33,626 --> 0:30:35,416
因此 如果用户在捐赠

849
00:30:35,416 --> 0:30:37,546
该目标的过程中

850
00:30:37,546 --> 0:30:39,196
更改了手机的语言

851
00:30:39,196 --> 0:30:40,996
并且显示了快捷方式

852
00:30:41,146 --> 0:30:43,976
则仍然会遵循用户的手机语言

853
00:30:44,546 --> 0:30:49,566
现在 当你在

854
00:30:49,616 --> 0:30:51,566
stringsdict 文件中定义字符串时

855
00:30:51,566 --> 0:30:53,876
它们实际上在运行时会被优先选择

856
00:30:54,626 --> 0:30:56,046
这意味着你可以在

857
00:30:56,046 --> 0:30:58,266
所有不需要复数规则

858
00:30:58,266 --> 0:31:00,246
的情况下

859
00:30:58,266 --> 0:31:00,246
的情况下

860
00:31:00,246 --> 0:31:01,636
在你的字符串文件中

861
00:31:01,636 --> 0:31:04,506
执行大部分本地化操作

862
00:31:04,506 --> 0:31:06,416
然后你可以提供一个

863
00:31:06,466 --> 0:31:08,336
字符串文件或

864
00:31:08,336 --> 0:31:10,666
与你的目标定义名称

865
00:31:10,666 --> 0:31:13,656
相同的字符串文件来覆盖

866
00:31:14,276 --> 0:31:16,996
当你创建

867
00:31:16,996 --> 0:31:18,956
stringsdict 文件时

868
00:31:19,316 --> 0:31:21,966
你可以使用字符串本身

869
00:31:21,966 --> 0:31:23,836
或者字符串 ID

870
00:31:23,836 --> 0:31:26,296
Xcode 在你的字符串文件中

871
00:31:26,296 --> 0:31:29,276
指定为键

872
00:31:29,346 --> 0:31:30,936
作为本地化的

873
00:31:31,036 --> 0:31:32,456
字符串键和字符串

874
00:31:32,456 --> 0:31:34,556
在某种程度上

875
00:31:34,556 --> 0:31:35,536
你决定在你的目标定义中做些改变

876
00:31:36,056 --> 0:31:39,926
现在请回 Vivian

877
00:31:39,926 --> 0:31:41,896
来告诉大家

878
00:31:41,896 --> 0:31:43,126
我们该如何操作

879
00:31:43,126 --> 0:31:44,976
这整个过程是如何在 Xcode 中工作的

880
00:31:45,516 --> 0:31:50,846
[ 掌声 ]

881
00:31:51,346 --> 0:31:51,966
&gt;&gt; 谢谢 Chris

882
00:32:02,956 --> 0:32:05,656
一旦你去了一次火星

883
00:32:05,656 --> 0:32:06,936
你可能会想

884
00:32:06,936 --> 0:32:08,656
去第二次 第三次

885
00:32:08,656 --> 0:32:10,506
因为这些旅行真的很便宜

886
00:32:10,506 --> 0:32:11,636
就像我们看到的那样

887
00:32:12,716 --> 0:32:14,036
如果我们的 App 能给

888
00:32:14,036 --> 0:32:16,086
这些频繁旅行的人

889
00:32:16,206 --> 0:32:18,486
作出额外的旅行建议

890
00:32:18,486 --> 0:32:20,596
并提供下一次假期的快捷方式 那就太棒了

891
00:32:20,846 --> 0:32:22,706
考虑到这一点

892
00:32:22,706 --> 0:32:25,036
我为我们的项目添加了一个目标定义

893
00:32:25,146 --> 0:32:28,606
我们来看一下

894
00:32:29,166 --> 0:32:30,756
这是我们的目标定义

895
00:32:31,456 --> 0:32:33,136
有一个定制的目标

896
00:32:33,246 --> 0:32:35,946
叫做 “Book Item”

897
00:32:36,666 --> 0:32:40,026
有标题 有描述

898
00:32:40,026 --> 0:32:41,566
下面是实际的建议

899
00:32:42,106 --> 0:32:45,386
所以它是旅行者的

900
00:32:45,546 --> 0:32:46,756
一种类型

901
00:32:46,806 --> 0:32:47,736
就像 Chris 说的那样

902
00:32:47,736 --> 0:32:49,436
这是参数的组合

903
00:32:50,516 --> 0:32:52,836
所以我们可以看到

904
00:32:52,836 --> 0:32:57,406
旅行者是一个整数

905
00:32:57,406 --> 0:32:59,026
类型是在这里的

906
00:32:59,026 --> 0:33:01,376
enum 中定义的

907
00:32:59,026 --> 0:33:01,376
enum 中定义的

908
00:33:01,376 --> 0:33:03,146
所以我们可以看到它可以是一次飞行

909
00:33:03,146 --> 0:33:03,956
一次巡航 一个整套假期 或者一次探险

910
00:33:05,136 --> 0:33:06,776
现在 如果我们的用户

911
00:33:06,776 --> 0:33:08,186
继续提供建议并

912
00:33:08,186 --> 0:33:09,636
预订另一次旅行

913
00:33:09,636 --> 0:33:10,916
我们需要给他们一些反馈

914
00:33:11,446 --> 0:33:13,196
因此我们有一个回应

915
00:33:13,376 --> 0:33:15,226
关于我们是否可以

916
00:33:15,226 --> 0:33:17,226
预订他们的旅行

917
00:33:17,226 --> 0:33:18,616
只有成功或失败的信息

918
00:33:19,196 --> 0:33:20,446
这同样是

919
00:33:20,446 --> 0:33:22,156
参数的组合

920
00:33:22,726 --> 0:33:25,276
当然 既然我们有面向

921
00:33:25,276 --> 0:33:27,226
用户的字符串

922
00:33:27,226 --> 0:33:28,036
我们需要对它们进行本地化

923
00:33:28,316 --> 0:33:28,956
现在就开始吧

924
00:33:29,686 --> 0:33:31,786
就像我对图像所做的一样

925
00:33:31,786 --> 0:33:34,316
我只要到这里 点按本地化

926
00:33:35,286 --> 0:33:36,986
现在目标定义文件

927
00:33:36,986 --> 0:33:38,126
将会像界面构建版本（interface builder）

928
00:33:38,196 --> 0:33:39,796
文件一样 我们在 strings 文件中有一个

929
00:33:39,796 --> 0:33:41,766
目标定义和

930
00:33:41,766 --> 0:33:43,686
所有的翻译

931
00:33:43,786 --> 0:33:45,456
我想把它放在底部

932
00:33:46,626 --> 0:33:47,576
点按本地化

933
00:33:48,396 --> 0:33:51,676
好的 我想看一下法语

934
00:33:52,766 --> 0:33:54,476
在这一点上

935
00:33:54,476 --> 0:33:56,846
Xcode 为法语翻译

936
00:33:56,846 --> 0:33:58,916
创建了一个字符串文件

937
00:34:00,106 --> 0:34:01,086
就在这儿

938
00:34:01,086 --> 0:34:03,496
好的 大家可以看到

939
00:34:03,496 --> 0:34:06,426
当我滚动的时候

940
00:34:06,426 --> 0:34:08,516
它有所有可能的字符串

941
00:34:08,516 --> 0:34:09,916
给定在枚举中定义的

942
00:34:09,916 --> 0:34:12,156
参数的可能值

943
00:34:13,045 --> 0:34:14,556
这很好 因为我

944
00:34:14,556 --> 0:34:16,456
不会说法语

945
00:34:16,456 --> 0:34:18,386
但我从幻灯片上知道

946
00:34:18,456 --> 0:34:19,416
航班和邮轮有

947
00:34:19,416 --> 0:34:20,735
不同的词性

948
00:34:20,735 --> 0:34:22,045
它们需要

949
00:34:22,045 --> 0:34:25,096
不同形式的冠词

950
00:34:25,356 --> 0:34:27,306
但我还是可以

951
00:34:27,306 --> 0:34:29,686
解决一些语法问题的

952
00:34:29,686 --> 0:34:30,916
这些是英文的

953
00:34:31,176 --> 0:34:34,926
一个人和一个

954
00:34:35,266 --> 0:34:36,106
探险队的例子

955
00:34:36,585 --> 0:34:38,436
为此 我需要 或者说

956
00:34:38,436 --> 0:34:40,275
至少要修正复数情况

957
00:34:40,676 --> 0:34:41,946
我要添加一个和

958
00:34:41,946 --> 0:34:44,146
目标定义同名的

959
00:34:44,146 --> 0:34:45,216
stringsdict 文件

960
00:34:46,406 --> 0:34:48,186
到我的项目这里

961
00:34:48,676 --> 0:34:49,936
创建新文件

962
00:34:51,146 --> 0:34:52,366
我将使用 Xcode 9 中

963
00:34:52,366 --> 0:34:55,116
添加的 stringsdict 模板

964
00:34:56,696 --> 0:34:57,406
点按下一步（Next）

965
00:34:58,516 --> 0:34:59,746
好的 这是非常重要的部分

966
00:34:59,746 --> 0:35:01,776
我要确保我的名字准确无误

967
00:34:59,746 --> 0:35:01,776
我要确保我的名字准确无误

968
00:35:03,096 --> 0:35:04,196
目标 好的

969
00:35:06,676 --> 0:35:11,386
创建 现在我不需要

970
00:35:11,386 --> 0:35:13,116
进入我的法语字符串文件

971
00:35:13,186 --> 0:35:15,186
来找到我的目标的 ID

972
00:35:15,946 --> 0:35:17,876
我可以进入

973
00:35:17,876 --> 0:35:19,776
目标定义文件

974
00:35:19,776 --> 0:35:21,186
因为它们是唯一的

975
00:35:21,906 --> 0:35:23,956
我可以直接从这里拷贝

976
00:35:24,026 --> 0:35:29,076
拷贝 然后粘贴

977
00:35:29,306 --> 0:35:33,966
然后回到 stringsdict

978
00:35:35,286 --> 0:35:39,306
好的 你可以在这里看到

979
00:35:39,306 --> 0:35:40,346
Xcode 在粘贴时为我格式化了参数

980
00:35:40,346 --> 0:35:44,316
这已经为 Siri 捷径

981
00:35:44,616 --> 0:35:45,906
做好了准备

982
00:35:46,766 --> 0:35:48,496
好了 现在我准备好

983
00:35:48,496 --> 0:35:49,966
要填我的

984
00:35:49,966 --> 0:35:50,906
复数字典了

985
00:35:50,906 --> 0:35:52,566
我只需要一个和另一个

986
00:35:52,566 --> 0:35:53,956
因为我用的是英语

987
00:35:53,956 --> 0:35:55,226
所以我有单数和复数

988
00:35:56,256 --> 0:35:57,796
但是就像任何一个好的烹饪节目一样

989
00:35:57,796 --> 0:35:59,106
我已经准备好了完成的文件

990
00:35:59,206 --> 0:36:00,386
我把它换进去

991
00:35:59,206 --> 0:36:00,386
我把它换进去

992
00:36:00,886 --> 0:36:04,446
好的 跟它说再见吧

993
00:36:04,446 --> 0:36:08,396
我们去找

994
00:36:08,466 --> 0:36:18,006
最后一个 好了 

995
00:36:18,526 --> 0:36:21,586
是的 Xcode

996
00:36:21,586 --> 0:36:23,716
我想拷贝一份 好了

997
00:36:24,316 --> 0:36:25,866
好的 我们来看一下

998
00:36:28,376 --> 0:36:30,496
我们来看一个同时

999
00:36:30,496 --> 0:36:32,166
解决两个问题的例子

1000
00:36:33,816 --> 0:36:35,906
如果我们查一下 “Book Expedition”

1001
00:36:36,646 --> 0:36:38,266
这里的字符串是

1002
00:36:38,266 --> 0:36:42,016
“Book a Expedition”

1003
00:36:42,016 --> 0:36:43,006
但在复数字典里

1004
00:36:43,006 --> 0:36:46,056
我这里有一个人

1005
00:36:46,056 --> 0:36:47,256
或其他人数的人

1006
00:36:47,666 --> 0:36:50,166
我在这里所做的

1007
00:36:50,166 --> 0:36:52,406
是修正了不定冠词的适用情况

1008
00:36:52,406 --> 0:36:53,596
所以字符串实际显示

1009
00:36:53,596 --> 0:36:54,556
我们将使用 an

1010
00:36:55,746 --> 0:36:58,486
好的 所以我有我的手机上

1011
00:36:58,486 --> 0:36:59,746
运行的 App 的完成版本

1012
00:36:59,806 --> 0:37:00,816
我们通过它

1013
00:36:59,806 --> 0:37:00,816
我们通过它

1014
00:37:00,816 --> 0:37:01,976
来检查创建的快捷方式

1015
00:37:06,576 --> 0:37:08,466
我只想和以前一样

1016
00:37:08,466 --> 0:37:09,686
去那个地方

1017
00:37:09,686 --> 0:37:10,856
我真的很喜欢 Gale Creator

1018
00:37:11,726 --> 0:37:14,386
浏览 火星 Gale Creator

1019
00:37:14,386 --> 0:37:17,386
我们不要只去一天

1020
00:37:17,386 --> 0:37:20,716
我们要去 这就行了

1021
00:37:21,136 --> 0:37:22,286
好的 这次我要独自一人去

1022
00:37:22,286 --> 0:37:23,466
因为我想

1023
00:37:23,466 --> 0:37:24,396
检查一下一个人的情况

1024
00:37:25,516 --> 0:37:28,216
好了 当我点按 “Book” 时

1025
00:37:28,216 --> 0:37:30,326
实际上创建了快捷方式

1026
00:37:30,326 --> 0:37:30,986
并捐赠了它

1027
00:37:31,406 --> 0:37:32,796
所以现在我们可以去看看它

1028
00:37:33,236 --> 0:37:35,756
可以通过

1029
00:37:35,896 --> 0:37:39,126
设置 Siri 搜索来找到

1030
00:37:39,516 --> 0:37:42,066
就这样 预订一场

1031
00:37:42,066 --> 0:37:43,396
一个人的冒险

1032
00:37:45,516 --> 0:37:50,986
[ 掌声 ]

1033
00:37:51,486 --> 0:37:54,156
好的 这对英语来说很好 我修好了它

1034
00:37:54,256 --> 0:37:55,236
但我仍然需要将其

1035
00:37:55,236 --> 0:37:57,066
本地化为法语

1036
00:37:57,176 --> 0:37:58,646
最重要的是

1037
00:37:58,756 --> 0:38:00,296
它与第一个演示一样简单

1038
00:37:58,756 --> 0:38:00,296
它与第一个演示一样简单

1039
00:38:00,296 --> 0:38:02,606
所以我们可以回到 Xcode

1040
00:38:03,646 --> 0:38:05,756
好的 我要确保我将我的

1041
00:38:05,756 --> 0:38:07,196
字符串词本地化

1042
00:38:07,196 --> 0:38:08,316
因为我还没有这样做

1043
00:38:08,506 --> 0:38:09,476
英语 是的

1044
00:38:10,136 --> 0:38:11,066
检查法语

1045
00:38:11,596 --> 0:38:12,866
否则它不会被导出

1046
00:38:14,046 --> 0:38:15,846
好的 现在我只需

1047
00:38:15,846 --> 0:38:16,726
再次选择我的项目

1048
00:38:17,716 --> 0:38:18,486
去编辑器

1049
00:38:19,266 --> 0:38:20,776
导出为本地化

1050
00:38:21,616 --> 0:38:22,906
我打算称这个

1051
00:38:22,906 --> 0:38:25,046
假期计划为 loc2

1052
00:38:25,046 --> 0:38:26,386
因为它是第二轮本地化

1053
00:38:27,506 --> 0:38:28,896
仔细检查 是的

1054
00:38:28,896 --> 0:38:30,966
我选择的还是法语 点按保存

1055
00:38:31,976 --> 0:38:33,566
现在 Xcode 创建另一个

1056
00:38:33,566 --> 0:38:35,076
Xcode 本地化目录

1057
00:38:35,076 --> 0:38:37,766
我们来看看它

1058
00:38:42,556 --> 0:38:45,176
检查一下本地化的内容

1059
00:38:45,246 --> 0:38:47,776
如果我们看一下 XLIFF

1060
00:38:47,776 --> 0:38:50,126
可以看到红色突出显示的

1061
00:38:50,126 --> 0:38:51,626
是目标定义中的

1062
00:38:51,626 --> 0:38:54,576
所有新字符串

1063
00:38:54,636 --> 0:38:56,066
但我们也有第一次

1064
00:38:56,066 --> 0:38:57,326
导入的所有翻译

1065
00:38:57,516 --> 0:38:59,116
所以你可以有一个

1066
00:38:59,116 --> 0:39:00,566
增量本地化的过程

1067
00:38:59,116 --> 0:39:00,566
增量本地化的过程

1068
00:39:00,566 --> 0:39:02,186
在这个过程中

1069
00:39:02,186 --> 0:39:03,546
你开发好了 App 

1070
00:39:03,606 --> 0:39:05,796
获得本地化版本

1071
00:39:05,796 --> 0:39:07,136
然后对版本 2 进行了一些调整

1072
00:39:07,136 --> 0:39:09,386
当你输出另一轮本地化时

1073
00:39:09,386 --> 0:39:10,176
不会丢失任何东西

1074
00:39:10,706 --> 0:39:13,466
这也适用于

1075
00:39:13,466 --> 0:39:15,066
非字符串资源

1076
00:39:15,436 --> 0:39:16,926
这里有我的图像的

1077
00:39:16,926 --> 0:39:18,536
法语版本

1078
00:39:19,896 --> 0:39:21,936
棒极了 所以我可以开发我的 App

1079
00:39:22,226 --> 0:39:24,236
继续本地化 继续工作

1080
00:39:24,296 --> 0:39:26,236
这一切都像第一次一样简单

1081
00:39:26,236 --> 0:39:29,056
它涵盖了我的字符串

1082
00:39:29,056 --> 0:39:30,426
我的非字符串资源

1083
00:39:30,426 --> 0:39:31,876
和我的目标定义

1084
00:39:31,876 --> 0:39:33,366
以便我可以

1085
00:39:33,426 --> 0:39:35,176
建议其它的火星旅行

1086
00:39:36,076 --> 0:39:37,736
好的我们重新交给

1087
00:39:37,736 --> 0:39:38,806
Chris 由他来进行

1088
00:39:38,806 --> 0:39:40,976
最终的总结

1089
00:39:41,516 --> 0:39:46,500
[ 掌声 ]

1090
00:39:50,476 --> 0:39:52,136
&gt;&gt; 再次谢谢你 Vivian

1091
00:39:53,146 --> 0:39:54,066
这可真棒

1092
00:39:54,726 --> 0:39:56,316
我真的很期待这些旅行

1093
00:39:58,076 --> 0:40:00,806
正如你所看到的

1094
00:39:58,076 --> 0:40:00,806
正如你所看到的

1095
00:40:00,806 --> 0:40:02,856
Xcode 本地化目录

1096
00:40:02,856 --> 0:40:04,246
是我们用于本地化的 

1097
00:40:04,246 --> 0:40:05,126
Xcode 的新标准

1098
00:40:05,636 --> 0:40:08,806
这些支持你项目中的

1099
00:40:08,806 --> 0:40:11,686
所有可本地化资源

1100
00:40:11,686 --> 0:40:13,946
而不仅仅是基于

1101
00:40:13,946 --> 0:40:14,966
字符串的资源

1102
00:40:15,376 --> 0:40:17,086
而且更为灵活

1103
00:40:17,316 --> 0:40:20,476
可以为本地化人员

1104
00:40:20,596 --> 0:40:22,186
提供上下文

1105
00:40:22,246 --> 0:40:23,596
无论是从测试中

1106
00:40:23,596 --> 0:40:26,036
放入屏幕快照还是

1107
00:40:26,036 --> 0:40:27,646
放入自述文件或

1108
00:40:27,646 --> 0:40:29,196
如何使用 App 的电影

1109
00:40:29,196 --> 0:40:30,986
都可以为本地化人员提供

1110
00:40:30,986 --> 0:40:33,796
所需的上下文以确保

1111
00:40:33,796 --> 0:40:35,786
第一次翻译就可以达到相应的准确率

1112
00:40:36,926 --> 0:40:39,176
你也看到 Siri 捷径

1113
00:40:39,176 --> 0:40:41,546
很容易通过本地化

1114
00:40:41,616 --> 0:40:42,956
你的目标定义文件

1115
00:40:42,996 --> 0:40:46,126
进行本地化

1116
00:40:46,126 --> 0:40:48,766
这些文件使用字符串文件

1117
00:40:48,766 --> 0:40:51,676
进行基本本地化

1118
00:40:51,676 --> 0:40:52,936
并且你可以在适当的地方

1119
00:40:52,936 --> 0:40:54,476
使用 stringsdict 文件来处理

1120
00:40:54,686 --> 0:40:56,666
各种语言的

1121
00:40:56,666 --> 0:41:01,026
复数规则

1122
00:40:56,666 --> 0:41:01,026
复数规则

1123
00:41:01,026 --> 0:41:02,796
当你创建代码捐赠目标时

1124
00:41:02,906 --> 0:41:05,236
可以使用延迟

1125
00:41:05,286 --> 0:41:06,926
本地化目标字符串

1126
00:41:06,926 --> 0:41:09,116
以确保从捐赠目标

1127
00:41:09,116 --> 0:41:10,986
创建的快捷方式

1128
00:41:10,986 --> 0:41:13,986
在向用户显示时

1129
00:41:13,986 --> 0:41:15,506
进行本地化

1130
00:41:15,506 --> 0:41:17,196
而不是在你 

1131
00:41:17,196 --> 0:41:18,966
捐赠它的时候

1132
00:41:19,496 --> 0:41:21,766
若要了解更多信息

1133
00:41:21,766 --> 0:41:23,866
请访问在 WWDC 网站

1134
00:41:23,936 --> 0:41:24,646
可以看到我们的会议页面

1135
00:41:26,476 --> 0:41:28,166
感谢大家能够参与 WWDC

1136
00:41:28,166 --> 0:41:29,796
希望大家可以

1137
00:41:29,796 --> 0:41:31,966
好好享受此次盛会

1138
00:41:32,516 --> 0:41:40,820
[ 掌声 ]
