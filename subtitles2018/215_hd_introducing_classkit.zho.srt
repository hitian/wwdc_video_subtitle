1
00:00:17,150 --> 0:00:23,790
（ClassKit简介

2
00:00:31,365 --> 0:00:32,432
大家早上好

3
00:00:33,367 --> 0:00:35,002
我叫Pavel

4
00:00:35,068 --> 0:00:38,906
Marin与我今天和大家

5
00:00:40,841 --> 0:00:43,343
我们的演讲分为三部分

6
00:00:43,410 --> 0:00:47,014
在第一部分中

7
00:00:47,748 --> 0:00:50,117
我们将向你展示数据

8
00:00:50,751 --> 0:00:52,252
演讲的第二部分

9
00:00:52,319 --> 0:00:54,555
我们将列出系统中所有的类

10
00:00:54,621 --> 0:00:57,457
以及介绍每个类的一些有趣特性

11
00:00:58,225 --> 0:00:59,059
最后

12
00:00:59,126 --> 0:01:02,663
Marin将向我们展示如何在现有

13
00:00:59,126 --> 0:01:02,663
Marin将向我们展示如何在现有

14
00:01:02,729 --> 0:01:03,931
（使用ClassKit）

15
00:01:03,997 --> 0:01:05,966
让我们从概述开始

16
00:01:06,033 --> 0:01:08,335
（总体概述）

17
00:01:09,102 --> 0:01:11,972
ClassKit

18
00:01:12,039 --> 0:01:15,342
这意味着它被设计于学校环境中使用

19
00:01:17,177 --> 0:01:22,049
它允许你在app中定义可布置的内容

20
00:01:22,115 --> 0:01:25,319
以便教师可以将其作为家庭作业

21
00:01:26,787 --> 0:01:30,657
它可以汇报

22
00:01:30,724 --> 0:01:32,759
这些由老师布置的内容的进度

23
00:01:34,394 --> 0:01:36,330
而且这是在考虑到

24
00:01:36,830 --> 0:01:40,534
我的意思是你可以在你的app中

25
00:01:40,601 --> 0:01:43,036
报告任何所布置内容的进度

26
00:01:43,604 --> 0:01:46,540
但老师只会看到那些

27
00:01:46,607 --> 0:01:48,709
他们明确布置给学生的任务的进度

28
00:01:50,644 --> 0:01:53,814
你为何应采用ClassKit呢？

29
00:01:53,881 --> 0:01:58,952
首先 这将能够提供更好的学生体验

30
00:01:59,920 --> 0:02:01,922
因为他们将能够确切地知道

31
00:01:59,920 --> 0:02:01,922
因为他们将能够确切地知道

32
00:02:01,989 --> 0:02:04,725
你的app中有哪些可布置的内容

33
00:02:06,093 --> 0:02:08,095
它能让教师了解在app中

34
00:02:08,895 --> 0:02:11,598
每个学生的表现如何

35
00:02:12,132 --> 0:02:15,169
这使个性化学习成为可能

36
00:02:15,936 --> 0:02:18,939
如果老师能够知道

37
00:02:19,006 --> 0:02:23,177
他们将能够更好地调整

38
00:02:23,844 --> 0:02:26,980
最后 它也给你一个竞争优势

39
00:02:27,047 --> 0:02:28,749
这是因为如果教师…

40
00:02:29,783 --> 0:02:32,619
当这类信息反馈给他们时

41
00:02:32,686 --> 0:02:37,024
他们很可能会提倡在学校内广泛使用

42
00:02:37,090 --> 0:02:39,726
你的app

43
00:02:40,928 --> 0:02:42,162
说到学校

44
00:02:42,229 --> 0:02:45,933
有一个叫Apple School

45
00:02:46,400 --> 0:02:48,969
学校管理员和IT部门

46
00:02:49,036 --> 0:02:53,574
使用它为该组织中的每个人

47
00:02:53,974 --> 0:02:55,309
创建托管Apple ID

48
00:02:55,375 --> 0:02:58,645
每个老师都会得到一个

49
00:02:58,712 --> 0:03:01,181
所有学生也将得到

50
00:02:58,712 --> 0:03:01,181
所有学生也将得到

51
00:03:02,015 --> 0:03:04,885
管理员也可以使用它

52
00:03:04,952 --> 0:03:11,124
例如 在数学课上我们有一位老师

53
00:03:11,191 --> 0:03:13,560
他自己有一个托管Apple ID

54
00:03:13,627 --> 0:03:17,064
而学生也有各自的

55
00:03:18,365 --> 0:03:22,169
这也是学校管理

56
00:03:23,370 --> 0:03:26,240
正如我们提到的竞争优势一样

57
00:03:26,306 --> 0:03:31,311
这是学校在ClassKit功能中

58
00:03:31,845 --> 0:03:33,847
启用学生进度报告的地方

59
00:03:36,917 --> 0:03:40,988
此外 这也是学校批量购买

60
00:03:41,588 --> 0:03:46,193
任何启用了

61
00:03:46,260 --> 0:03:49,630
都将在其名字旁边有一个

62
00:03:51,331 --> 0:03:55,502
Schoolwork是一个

63
00:03:56,270 --> 0:04:00,073
学生使用此app查看

64
00:03:56,270 --> 0:04:00,073
学生使用此app查看

65
00:04:00,807 --> 0:04:05,279
教师用它来布置家庭作业

66
00:04:05,345 --> 0:04:08,148
我们在系统中称之为讲义

67
00:04:09,116 --> 0:04:11,251
讲义只是一组任务

68
00:04:11,318 --> 0:04:15,656
例如 一段内容可能是

69
00:04:18,725 --> 0:04:23,597
这也是教师查看学生

70
00:04:23,664 --> 0:04:27,501
进度报告的地方

71
00:04:28,735 --> 0:04:32,272
让我们来看看一个讲义的

72
00:04:32,339 --> 0:04:33,507
（讲义的生命周期）

73
00:04:33,574 --> 0:04:37,211
但在我们制作讲义之前

74
00:04:38,145 --> 0:04:41,248
你的app需要能够声明

75
00:04:41,315 --> 0:04:43,283
哪些内容是可布置的

76
00:04:46,353 --> 0:04:50,090
在我们的框架中 这是通过使用

77
00:04:50,791 --> 0:04:53,894
CLS上下文能够允许你

78
00:04:53,961 --> 0:04:56,430
将你的内容表示为树结构

79
00:04:57,297 --> 0:05:00,434
你的app中已经预定义了

80
00:04:57,297 --> 0:05:00,434
你的app中已经预定义了

81
00:05:01,902 --> 0:05:04,238
一个主app上下文

82
00:05:05,138 --> 0:05:09,877
这充当上下文树中的根上下文

83
00:05:10,744 --> 0:05:13,847
而你所有的内容都只是

84
00:05:13,914 --> 0:05:15,115
主app上下文的后代

85
00:05:16,450 --> 0:05:17,284
所以…

86
00:05:18,852 --> 0:05:20,621
我们请求你尽早…

87
00:05:22,089 --> 0:05:23,857
定义你的内容

88
00:05:23,924 --> 0:05:25,792
因为你越早定义你的内容

89
00:05:25,859 --> 0:05:29,096
Schoolwork中的教师

90
00:05:29,162 --> 0:05:31,098
并将其布置给学生

91
00:05:33,000 --> 0:05:35,135
假设你已经创建了你的上下文树

92
00:05:35,702 --> 0:05:38,005
一位教师将能够打开

93
00:05:38,505 --> 0:05:41,441
然后点击“Create

94
00:05:42,609 --> 0:05:44,611
这将创建一个新的讲义实例

95
00:05:44,678 --> 0:05:47,614
然后他们会将讲义

96
00:05:47,681 --> 0:05:49,850
指向你app内的某个特定内容

97
00:05:50,551 --> 0:05:54,555
一旦他们完成这个步骤

98
00:05:55,489 --> 0:05:57,224
一旦学生收到这份讲义

99
00:05:57,291 --> 0:06:00,994
他们会点击讲义

100
00:05:57,291 --> 0:06:00,994
他们会点击讲义

101
00:06:01,728 --> 0:06:05,432
这时你的app将会创建必要的上下文

102
00:06:06,533 --> 0:06:09,670
为了更好的学生体验

103
00:06:09,736 --> 0:06:13,373
你最好将学生导航到相应的内容

104
00:06:15,309 --> 0:06:18,478
Marin一会儿将会告诉我们

105
00:06:19,112 --> 0:06:21,682
现在假设

106
00:06:21,748 --> 0:06:24,151
学生开始做这份家庭作业

107
00:06:24,751 --> 0:06:27,421
你的app开始向学生报告进度

108
00:06:28,055 --> 0:06:31,024
所有这些进度将被发送到教师的设备

109
00:06:31,091 --> 0:06:35,429
并捆绑在我们称之为

110
00:06:36,363 --> 0:06:39,066
当这些完成以后

111
00:06:39,132 --> 0:06:42,469
教师可以从分发的讲义中获得该报告

112
00:06:46,373 --> 0:06:50,844
这整个流程包括

113
00:06:51,378 --> 0:06:52,880
一个学生托管ID

114
00:06:53,514 --> 0:06:56,116
也可能有一些设备

115
00:06:56,183 --> 0:07:00,587
甚至只是一台你可以登录登出的设备

116
00:06:56,183 --> 0:07:00,587
甚至只是一台你可以登录登出的设备

117
00:07:01,788 --> 0:07:05,359
但尽管如此

118
00:07:05,893 --> 0:07:08,896
我们创建了一个我们称之为

119
00:07:09,630 --> 0:07:15,269
开发者模式的作用是

120
00:07:16,069 --> 0:07:19,740
以便你可以创建讲义

121
00:07:19,806 --> 0:07:20,908
分发给学生

122
00:07:21,408 --> 0:07:23,510
并查看这些学生的进度报告

123
00:07:23,944 --> 0:07:26,280
它也可以让你充当学生

124
00:07:26,346 --> 0:07:27,781
使用这些讲义

125
00:07:27,848 --> 0:07:30,851
并且你的app可以将进度报告给教师

126
00:07:33,253 --> 0:07:35,722
还有一种重置开发数据的方法

127
00:07:35,789 --> 0:07:40,794
说实话我个人经常需要使用这个按钮

128
00:07:42,596 --> 0:07:45,132
有了这些作为前提

129
00:07:45,199 --> 0:07:46,066
（框架类）

130
00:07:46,133 --> 0:07:48,669
在最顶端

131
00:07:50,470 --> 0:07:54,274
它用于在我们的app中管理上下文树

132
00:07:57,678 --> 0:08:01,248
这也是主app上下文作为属性

133
00:07:57,678 --> 0:08:01,248
这也是主app上下文作为属性

134
00:08:02,015 --> 0:08:06,887
Data Store跟踪系统中的

135
00:08:07,988 --> 0:08:09,890
所以如果你想保存这些对象

136
00:08:09,957 --> 0:08:15,462
你可以调用

137
00:08:18,632 --> 0:08:19,566
我还想提一下

138
00:08:19,633 --> 0:08:22,469
一个Data Store共享实例

139
00:08:22,536 --> 0:08:24,037
你可以与之交互

140
00:08:25,339 --> 0:08:29,243
接下来我们讨论一下上下文

141
00:08:30,944 --> 0:08:35,182
我们看到上下文是一个树层次结构

142
00:08:35,849 --> 0:08:39,285
Marin稍后会讨论上下文的细节

143
00:08:39,352 --> 0:08:43,222
如何使用它们

144
00:08:43,524 --> 0:08:46,793
但我想专注于上下文身份

145
00:08:48,328 --> 0:08:52,733
ClassKit中上下文的身份

146
00:08:53,500 --> 0:08:55,569
第一个是identifier属性

147
00:08:56,904 --> 0:08:58,839
identifier属性允许你

148
00:08:58,906 --> 0:09:02,843
在兄弟节点中唯一识别上下文

149
00:08:58,906 --> 0:09:02,843
在兄弟节点中唯一识别上下文

150
00:09:04,444 --> 0:09:05,612
我的意思是

151
00:09:05,679 --> 0:09:08,615
你可以拥有具有相同

152
00:09:08,682 --> 0:09:10,684
或具有相同identifier

153
00:09:11,251 --> 0:09:14,555
只要他们没有相同的父节点

154
00:09:15,889 --> 0:09:19,927
另一个东西我们称之为

155
00:09:21,228 --> 0:09:23,564
上下文标识符路径是我们实际用来

156
00:09:23,630 --> 0:09:26,567
在上下文树中唯一的识别

157
00:09:27,234 --> 0:09:28,368
特定上下文的东西

158
00:09:29,102 --> 0:09:31,238
上下文标识符路径是什么呢？

159
00:09:31,305 --> 0:09:33,640
其实它只是一个

160
00:09:34,441 --> 0:09:38,612
我们使用它的方式是

161
00:09:38,679 --> 0:09:41,715
沿着这条路径

162
00:09:42,349 --> 0:09:43,717
即路径中的最后一个节点

163
00:09:45,552 --> 0:09:47,855
我们来看看这在实践中看起来如何

164
00:09:50,123 --> 0:09:54,428
在这个例子中 我们有一个指向

165
00:09:54,494 --> 0:09:56,129
“section-1”上下文的

166
00:09:56,797 --> 0:09:58,832
右边是我们的上下文树

167
00:09:59,266 --> 0:10:02,369
要查找“section-1”

168
00:09:59,266 --> 0:10:02,369
要查找“section-1”

169
00:10:03,136 --> 0:10:04,872
然后我们访问“Book”上下文

170
00:10:04,938 --> 0:10:06,773
然后找到“Book”上下文的

171
00:10:06,840 --> 0:10:08,408
标识符为“chapter-2”的

172
00:10:08,909 --> 0:10:11,712
我们将访问这个节点 然后以同样的

173
00:10:12,579 --> 0:10:15,315
由于“section-1”

174
00:10:15,382 --> 0:10:18,285
这个节点就是该路径所代表的节点

175
00:10:20,454 --> 0:10:23,891
我们有几种方法来查找

176
00:10:24,791 --> 0:10:27,961
一种是使用绝对上下文路径

177
00:10:28,028 --> 0:10:32,633
CLSDataStore的 contexts

178
00:10:34,101 --> 0:10:39,473
此方法将会返回路径中的所有上下文

179
00:10:39,840 --> 0:10:43,477
所以在这个例子中

180
00:10:43,544 --> 0:10:46,747
“Book”上下文、“chapter-2”上下文

181
00:10:48,015 --> 0:10:51,018
如果由于某种原因 “section-1”中的

182
00:10:51,485 --> 0:10:53,620
那么完成块中的数组

183
00:10:53,687 --> 0:10:56,790
将继续包含“App”上下文

184
00:10:57,958 --> 0:11:02,262
这使你有机会为遗失的上下文

185
00:10:57,958 --> 0:11:02,262
这使你有机会为遗失的上下文

186
00:11:03,530 --> 0:11:06,066
还有一种使用相对路径

187
00:11:07,134 --> 0:11:09,536
如果你已经持有对某个上下文的引用

188
00:11:09,603 --> 0:11:11,338
但你想找到其后代

189
00:11:12,039 --> 0:11:13,974
实现它的方法是

190
00:11:14,041 --> 0:11:16,743
CLSContext的 descendent

191
00:11:17,477 --> 0:11:18,545
这里的区别在于

192
00:11:18,612 --> 0:11:20,781
你要么获取到该上下文

193
00:11:20,848 --> 0:11:22,649
如果它不匹配任何路径

194
00:11:24,551 --> 0:11:27,354
还有一种查找上下文的方式

195
00:11:27,421 --> 0:11:32,893
这是通过CLSDataStore的 contexts

196
00:11:33,293 --> 0:11:34,628
在幻灯片的例子中

197
00:11:34,695 --> 0:11:38,265
你可以看到如何找到

198
00:11:39,299 --> 0:11:42,736
此外 还有一个

199
00:11:43,604 --> 0:11:48,342
它与我们刚才看到的路径查找方法

200
00:11:48,408 --> 0:11:49,409
一同使用

201
00:11:52,446 --> 0:11:55,849
屏幕上是委托声明

202
00:11:59,486 --> 0:12:00,921
这当你的上下文是

203
00:11:59,486 --> 0:12:00,921
这当你的上下文是

204
00:12:00,988 --> 0:12:04,191
按需下载的时候通常很有用

205
00:12:04,258 --> 0:12:08,295
因此你想按需创建这些上下文

206
00:12:08,362 --> 0:12:12,733
它的工作原理是

207
00:12:13,033 --> 0:12:17,938
如果你没有在该路径上找到上下文

208
00:12:18,005 --> 0:12:22,042
我们将在你定义的委托上调用

209
00:12:22,109 --> 0:12:24,011
createContext(forIdentifier)方法

210
00:12:24,411 --> 0:12:26,413
这给你一个创建所遗失上下文的机会

211
00:12:27,414 --> 0:12:30,117
当你创建好了上下文

212
00:12:30,184 --> 0:12:32,853
添加到树中的正确位置

213
00:12:35,722 --> 0:12:39,526
正如我所提到的

214
00:12:40,060 --> 0:12:42,362
让我们来看看实践中这是如何运作的

215
00:12:43,330 --> 0:12:45,799
我们还使用相同的标识符路径

216
00:12:45,866 --> 0:12:49,770
但这次 我们的树并不完整

217
00:12:49,837 --> 0:12:51,171
（委托实战）

218
00:12:51,238 --> 0:12:54,374
我们首先访问“App”上下文

219
00:12:55,309 --> 0:12:57,144
然后我们将访问“Book”上下文

220
00:12:57,744 --> 0:13:01,381
接着我们将尝试访问

221
00:12:57,744 --> 0:13:01,381
接着我们将尝试访问

222
00:13:02,382 --> 0:13:03,483
但它并不存在

223
00:13:03,750 --> 0:13:06,053
因此我们要求委托创建它

224
00:13:06,687 --> 0:13:08,055
如果委托创建了它

225
00:13:08,589 --> 0:13:10,791
我们会将它添加到树上的正确位置

226
00:13:11,225 --> 0:13:12,693
我们可以访问这个上下文了

227
00:13:13,527 --> 0:13:17,397
我们将为“section-1”

228
00:13:18,332 --> 0:13:20,734
由于“section-1”

229
00:13:20,801 --> 0:13:23,303
这意味着它就是这条路径所指的对象

230
00:13:26,173 --> 0:13:28,842
接下来我们谈谈活动对象

231
00:13:29,476 --> 0:13:32,646
活动对象实际上是用来

232
00:13:32,880 --> 0:13:35,782
向教师报告进度的对象

233
00:13:36,283 --> 0:13:39,419
事实上他们应被理解为“活动报告”

234
00:13:42,289 --> 0:13:46,193
活动对象始终与上下文相关联

235
00:13:46,527 --> 0:13:48,829
你可以自己分配一个

236
00:13:49,363 --> 0:13:53,734
你可以通过调用 CLSContext.

237
00:13:53,800 --> 0:13:55,736
来创建一个新的活动对象

238
00:13:56,303 --> 0:13:58,305
这将返回一个与方法的接收者

239
00:13:58,372 --> 0:14:00,507
新的活动对象

240
00:13:58,372 --> 0:14:00,507
新的活动对象

241
00:14:02,876 --> 0:14:03,810
如果你想查看

242
00:14:03,877 --> 0:14:07,848
当前是否有一个活动

243
00:14:07,915 --> 0:14:11,051
你可以通过查询CLSContext的

244
00:14:11,118 --> 0:14:12,452
来完成此操作

245
00:14:14,855 --> 0:14:17,791
我想提醒一下

246
00:14:18,192 --> 0:14:21,395
这与重新启动该活动是一回事

247
00:14:22,162 --> 0:14:26,433
这意味着教师将收到

248
00:14:30,270 --> 0:14:32,840
我们来看看如何将进度添加到活动中

249
00:14:32,906 --> 0:14:35,576
一种方法是直接设置

250
00:14:36,376 --> 0:14:41,081
这行代码是要添加一个进度范围

251
00:14:42,516 --> 0:14:45,419
另外直接设置progress属性

252
00:14:46,153 --> 0:14:49,223
与将进度范围的开始设为0

253
00:14:51,491 --> 0:14:53,961
我还想提一下

254
00:14:54,027 --> 0:14:56,964
甚至将同一个进度范围添加多次

255
00:14:57,030 --> 0:14:59,366
都是完全没有问题的

256
00:15:00,100 --> 0:15:02,936
我们会在幕后处理好所有细节

257
00:15:03,470 --> 0:15:06,940
以确保最终向教师提交正确的报告

258
00:15:08,575 --> 0:15:12,112
我们还需要讨论另外一个对象

259
00:15:12,179 --> 0:15:13,914
那就是活动项目

260
00:15:14,815 --> 0:15:17,017
什么是活动项目

261
00:15:18,585 --> 0:15:21,922
它是你希望作为你的报告的一部分

262
00:15:21,989 --> 0:15:23,290
展示给教师的数量

263
00:15:25,259 --> 0:15:28,462
每个活动可以有一个主要活动项目

264
00:15:28,762 --> 0:15:31,365
这将是除了进度以外

265
00:15:31,431 --> 0:15:33,567
你想展示给教师的

266
00:15:34,101 --> 0:15:35,302
主要信息

267
00:15:36,637 --> 0:15:39,640
例如 这对于展示测验的

268
00:15:41,308 --> 0:15:44,311
你还可以拥有多个其他活动项目

269
00:15:45,145 --> 0:15:49,082
你可以使用它添加额外的信息

270
00:15:49,149 --> 0:15:52,653
比如 给学生提供了多少提示

271
00:15:52,719 --> 0:15:55,155
每个问题的答案 等等

272
00:15:57,524 --> 0:16:02,362
活动分项和抽象类

273
00:15:57,524 --> 0:16:02,362
活动分项和抽象类

274
00:16:02,429 --> 0:16:04,665
我们已经定义了三个子类

275
00:16:05,966 --> 0:16:07,901
其中之一是

276
00:16:07,968 --> 0:16:10,971
这对于简单的标量 如提示

277
00:16:11,471 --> 0:16:13,407
经验点和类似的事情非常有用

278
00:16:13,473 --> 0:16:14,408
（CLSActivityItem）

279
00:16:14,474 --> 0:16:15,909
我们还有一个ScoreItem

280
00:16:15,976 --> 0:16:19,012
这对于表示"Y分之X"之类的

281
00:16:19,880 --> 0:16:23,984
例如 对于测验的最终分数

282
00:16:24,751 --> 0:16:27,054
我们也有一个BinaryItem

283
00:16:27,988 --> 0:16:32,993
这个是用来回答

284
00:16:34,661 --> 0:16:38,665
我们来看看如何将主活动项目

285
00:16:38,732 --> 0:16:41,535
你首先需要创建一个活动项目

286
00:16:42,002 --> 0:16:43,403
在幻灯片中

287
00:16:43,470 --> 0:16:46,807
我们向你展示了如何创建名为

288
00:16:47,374 --> 0:16:50,410
然后将其作为主活动项目

289
00:16:50,477 --> 0:16:51,979
你需要设置

290
00:16:52,513 --> 0:16:55,682
一个活动的

291
00:16:58,151 --> 0:17:02,289
要添加其他活动项目

292
00:16:58,151 --> 0:17:02,289
要添加其他活动项目

293
00:17:02,723 --> 0:17:05,726
在幻灯片中 我们展示了

294
00:17:06,093 --> 0:17:09,296
其类型为“hints”

295
00:17:10,329 --> 0:17:11,964
为了将它与一项活动联系起来

296
00:17:12,031 --> 0:17:16,170
你需要调用CLSActivity的

297
00:17:16,236 --> 0:17:19,173
将你刚刚创建的项目作为参数传给它

298
00:17:19,239 --> 0:17:23,042
此时 该活动项目将与活动相关联

299
00:17:24,077 --> 0:17:28,080
在处理活动项目时有一些最佳实践

300
00:17:29,249 --> 0:17:32,953
其中之一是始终为主活动项目

301
00:17:33,020 --> 0:17:34,488
设置相同的子类

302
00:17:35,656 --> 0:17:36,823
我的意思是

303
00:17:37,090 --> 0:17:40,727
想象一下 教师给两个学生

304
00:17:41,528 --> 0:17:43,564
你知道 在学生A的设备上

305
00:17:43,630 --> 0:17:47,034
你将主活动项目设置为

306
00:17:47,968 --> 0:17:49,203
在学生B的设备上

307
00:17:49,269 --> 0:17:52,306
你将主活动项目设置为

308
00:17:53,040 --> 0:17:55,108
如果你这样做

309
00:17:55,175 --> 0:18:00,914
一个汇总报告给老师

310
00:17:55,175 --> 0:18:00,914
一个汇总报告给老师

311
00:18:00,981 --> 0:18:04,084
将ScoreItem转换为

312
00:18:04,718 --> 0:18:07,087
正因为如此 最好始终使用

313
00:18:07,688 --> 0:18:10,624
活动项目的相同子类作为主活动项目

314
00:18:11,792 --> 0:18:15,696
另外 请为你的活动项目提供清晰

315
00:18:15,762 --> 0:18:16,930
简单但描述性强的标题

316
00:18:17,331 --> 0:18:20,167
这是因为你在活动项目上设置的标题

317
00:18:20,234 --> 0:18:22,503
将在其报告中显示给教师

318
00:18:24,338 --> 0:18:27,608
并请好好利用附加活动项目

319
00:18:27,674 --> 0:18:31,178
它们是提供额外信息的好方法

320
00:18:31,245 --> 0:18:33,647
教师实际上需要这些信息来真正了解

321
00:18:33,714 --> 0:18:36,283
学生在你的app中的表现

322
00:18:37,718 --> 0:18:39,820
因此 我想邀请Marin上台

323
00:18:39,887 --> 0:18:42,322
她将在实践中向我们展示

324
00:18:50,797 --> 0:18:51,632
（使用ClassKit）

325
00:18:51,698 --> 0:18:52,599
大家好

326
00:18:53,200 --> 0:18:56,570
我的名字是Marin

327
00:18:57,204 --> 0:18:59,406
我想告诉你

328
00:18:59,473 --> 0:19:02,509
如何将ClassKitapp到

329
00:18:59,473 --> 0:19:02,509
如何将ClassKitapp到

330
00:19:03,310 --> 0:19:06,980
为了做到这一点 Pavel

331
00:19:07,948 --> 0:19:09,750
该演示app叫Quizzler

332
00:19:10,184 --> 0:19:12,853
这是一个简单的数学测验app

333
00:19:13,487 --> 0:19:14,988
你看到的第一个屏幕

334
00:19:15,355 --> 0:19:18,892
要求你选择你想要测试的数学类型

335
00:19:19,560 --> 0:19:21,595
让我们继续并选择加法测验

336
00:19:22,930 --> 0:19:25,632
选择好之后

337
00:19:25,999 --> 0:19:28,735
问我们是否想查看

338
00:19:28,802 --> 0:19:30,404
所有用户的高分记分牌

339
00:19:31,004 --> 0:19:33,373
或者我们只是想直接开始测验

340
00:19:34,041 --> 0:19:35,742
让我们直接点击开始测验

341
00:19:37,211 --> 0:19:40,280
然后 我们会看到每一个问题

342
00:19:41,014 --> 0:19:44,651
我们只要回答这些问题

343
00:19:45,719 --> 0:19:48,589
现在我们了解了这个

344
00:19:49,122 --> 0:19:52,292
让我们来谈谈

345
00:19:53,660 --> 0:19:57,998
首先我们将讨论

346
00:19:58,065 --> 0:20:00,067
对我们的演示app有意义

347
00:19:58,065 --> 0:20:00,067
对我们的演示app有意义

348
00:20:00,968 --> 0:20:02,135
讨论完这些之后

349
00:20:02,669 --> 0:20:06,540
我们还会讨论什么类型的

350
00:20:06,607 --> 0:20:07,641
也可能有意义

351
00:20:08,909 --> 0:20:10,944
我们将确保我们支持深度链接

352
00:20:11,512 --> 0:20:12,946
现有两种方法可做到这一点

353
00:20:13,714 --> 0:20:15,983
第一种方法是使用全局链接

354
00:20:16,850 --> 0:20:20,988
如果你已经在app中

355
00:20:21,054 --> 0:20:24,258
你可以简单地设置

356
00:20:24,324 --> 0:20:25,993
CLSContext中的

357
00:20:27,661 --> 0:20:31,164
而我们的演示app不支全局链接

358
00:20:31,231 --> 0:20:33,000
所以我会向你展示第二种方法

359
00:20:33,433 --> 0:20:37,271
即使用NS User Activities

360
00:20:38,572 --> 0:20:41,475
然后我们将确保使用开发者模式

361
00:20:41,909 --> 0:20:45,279
在Schoolwork app上

362
00:20:46,547 --> 0:20:49,483
现在我们来谈谈什么类型的

363
00:20:49,550 --> 0:20:50,884
可能对这个app有意义

364
00:20:51,652 --> 0:20:54,188
作为第一步 我们可能会做一个

365
00:20:54,588 --> 0:20:58,592
我们的用户界面与上下文树的

366
00:20:59,159 --> 0:21:01,828
如果我们这样做

367
00:20:59,159 --> 0:21:01,828
如果我们这样做

368
00:21:01,895 --> 0:21:03,130
最终会得到这样一个结构

369
00:21:03,931 --> 0:21:07,000
其中最顶层是我们的主app上下文

370
00:21:07,067 --> 0:21:08,702
即我们的Quizzler app

371
00:21:09,236 --> 0:21:14,007
在它的下面是“Addition”上下文

372
00:21:14,641 --> 0:21:16,410
在它们各自的下面

373
00:21:16,677 --> 0:21:21,014
还有“Scoreboard”上下文

374
00:21:22,049 --> 0:21:27,754
Pavel告诉我们

375
00:21:27,821 --> 0:21:30,490
教师将它们布置给学生

376
00:21:31,258 --> 0:21:32,559
现在我们牢记这一点

377
00:21:32,626 --> 0:21:35,028
我们先来谈谈

378
00:21:36,129 --> 0:21:39,967
“Scoreboard”上下文

379
00:21:40,467 --> 0:21:42,236
这是所有用户的最高分

380
00:21:42,936 --> 0:21:47,441
一位老师给他的学生分发这些

381
00:21:49,076 --> 0:21:49,977
好像并没有

382
00:21:50,043 --> 0:21:52,179
所以我们将删除它

383
00:21:53,046 --> 0:21:55,716
现在 剩下的结构看起来像这样

384
00:21:56,650 --> 0:21:59,586
接下来让我们看看

385
00:22:00,354 --> 0:22:03,423
我们app中的“Addition”

386
00:22:04,157 --> 0:22:06,593
难道它不就只是加法测验吗？

387
00:22:07,427 --> 0:22:09,796
这实际上就是一件事

388
00:22:10,330 --> 0:22:12,666
所以这些应该被合并为一个

389
00:22:13,033 --> 0:22:14,301
所以我们继续这样做

390
00:22:14,368 --> 0:22:17,538
对于“Multiplication”上下文也是如此

391
00:22:18,705 --> 0:22:21,308
现在我们剩下的结构看起来像这样

392
00:22:22,309 --> 0:22:24,311
Pavel和我讨论了一下

393
00:22:24,578 --> 0:22:28,782
我们决定在将来可能会

394
00:22:29,550 --> 0:22:31,385
以及一个除法测验

395
00:22:31,718 --> 0:22:35,455
如果我们决定这样做 我们可以

396
00:22:36,156 --> 0:22:37,858
现在 当你们都在想

397
00:22:37,925 --> 0:22:40,794
哪种结构对你的app有意义

398
00:22:41,094 --> 0:22:43,397
不要只考虑你当前的功能集

399
00:22:43,630 --> 0:22:46,200
同时也要考虑你将来可能做什么

400
00:22:46,266 --> 0:22:49,269
并确保你的结构将随着

401
00:22:50,871 --> 0:22:53,307
现在让我们来谈谈上下文本身

402
00:22:53,941 --> 0:22:56,743
我们希望确保我们有明确的标题

403
00:22:57,211 --> 0:23:01,215
那是因为标题是一个重要信息

404
00:22:57,211 --> 0:23:01,215
那是因为标题是一个重要信息

405
00:23:01,281 --> 0:23:06,486
学生和老师都必须通过这个信息

406
00:23:06,553 --> 0:23:07,654
（CLSContext）

407
00:23:07,721 --> 0:23:11,491
我们也希望尽早定义我们的上下文

408
00:23:12,192 --> 0:23:14,995
对于我们的演示app

409
00:23:15,295 --> 0:23:19,333
因此一旦app启动

410
00:23:19,733 --> 0:23:21,335
所以这就是我们定义

411
00:23:22,970 --> 0:23:26,273
我们可能也想要始终向教师

412
00:23:26,340 --> 0:23:29,510
以特定顺序展示我们的上下文

413
00:23:30,277 --> 0:23:33,914
对于我们的演示app

414
00:23:33,981 --> 0:23:38,652
应该始终显示在

415
00:23:39,052 --> 0:23:43,023
为了做到这一点

416
00:23:43,090 --> 0:23:44,625
displayOrder属性

417
00:23:46,193 --> 0:23:47,327
现在我们已经确定了

418
00:23:47,394 --> 0:23:49,563
我们要写什么类型的上下文数据

419
00:23:49,630 --> 0:23:52,065
让我们来谈谈由学生生成的活动

420
00:23:53,534 --> 0:23:56,370
在这里 我有一个

421
00:23:56,737 --> 0:24:00,941
这是一些活动数据可能的样子

422
00:23:56,737 --> 0:24:00,941
这是一些活动数据可能的样子

423
00:24:01,975 --> 0:24:04,778
对于我们的测验

424
00:24:04,845 --> 0:24:08,949
所花费的总时间绝对有意义

425
00:24:09,616 --> 0:24:11,518
为了做到这一点 我们可以调用

426
00:24:11,585 --> 0:24:15,856
CLSActivity的

427
00:24:17,257 --> 0:24:20,961
现在 如果能够显示学生得到的总分

428
00:24:21,028 --> 0:24:22,229
可能也很不错

429
00:24:23,130 --> 0:24:24,598
如果我们仔细想想

430
00:24:24,665 --> 0:24:29,636
总分可能是这整个测验中

431
00:24:29,703 --> 0:24:31,004
最重要的信息

432
00:24:31,538 --> 0:24:33,106
因此我们可能想使用

433
00:24:33,173 --> 0:24:35,576
Schoolwork UI突出显示它

434
00:24:36,143 --> 0:24:40,848
为了做到这一点 我们可以创建

435
00:24:41,148 --> 0:24:44,184
然后我们将其设置为主活动项目

436
00:24:44,518 --> 0:24:47,487
这样 它就会在

437
00:24:48,789 --> 0:24:51,358
现在 如果能显示每个问题

438
00:24:51,425 --> 0:24:54,595
是否回答正确可能也很好

439
00:24:55,629 --> 0:25:00,767
要做到这一点 我们可以创建

440
00:24:55,629 --> 0:25:00,767
要做到这一点 我们可以创建

441
00:25:01,702 --> 0:25:03,303
并将其中每一个

442
00:25:03,370 --> 0:25:06,440
都添加为活动的附加活动项目

443
00:25:07,608 --> 0:25:08,809
现在我们已经确定了

444
00:25:08,876 --> 0:25:11,144
要写什么类型的

445
00:25:11,712 --> 0:25:14,648
让我们看看这实际上看起来如何

446
00:25:15,115 --> 0:25:16,750
（演示）

447
00:25:20,454 --> 0:25:24,291
现在屏幕上是我的显示器镜像

448
00:25:24,925 --> 0:25:29,296
我首先要做的是

449
00:25:30,163 --> 0:25:33,467
然后我将选择

450
00:25:33,534 --> 0:25:36,537
在这里找到

451
00:25:37,538 --> 0:25:40,374
然后 我们要确保将这个选项打开

452
00:25:40,674 --> 0:25:43,443
现在我们就准备好开始

453
00:25:44,378 --> 0:25:46,880
首先我们要写我们的上下文

454
00:25:47,214 --> 0:25:50,250
我们说过可以在app

455
00:25:50,717 --> 0:25:53,387
现在让我们打开

456
00:25:54,087 --> 0:25:57,424
我们在这里创建一个函数

457
00:25:57,491 --> 0:25:59,860
它将为我们发布我们的上下文

458
00:26:02,129 --> 0:26:04,932
这是我们的发布上下文函数

459
00:26:05,232 --> 0:26:07,401
而我们现在要做的是

460
00:26:07,467 --> 0:26:09,570
实例化一个

461
00:26:10,304 --> 0:26:13,106
传递该上下文的类型

462
00:26:14,374 --> 0:26:19,379
给它一个唯一的标识符

463
00:26:20,113 --> 0:26:22,282
确保设置了

464
00:26:22,349 --> 0:26:26,954
因为我们希望加法测验

465
00:26:27,821 --> 0:26:30,591
然后 我们将为乘法测验

466
00:26:30,824 --> 0:26:34,127
实例化一个上下文

467
00:26:34,962 --> 0:26:38,899
接着 我们创建一个

468
00:26:38,966 --> 0:26:40,534
必须要创建的上下文字典

469
00:26:41,835 --> 0:26:43,971
然后我们要获取我们希望

470
00:26:44,037 --> 0:26:45,806
将这些添加到其中的父上下文

471
00:26:46,240 --> 0:26:49,810
由于我们的上下文结构比较简单

472
00:26:50,043 --> 0:26:52,813
永远是主app上下文

473
00:26:53,780 --> 0:26:57,951
现在让我们运行一个查询来查看

474
00:26:58,519 --> 0:27:00,187
所以我们需要创建

475
00:26:58,519 --> 0:27:00,187
所以我们需要创建

476
00:27:00,888 --> 0:27:02,289
寻找所有父节点是

477
00:27:02,356 --> 0:27:05,025
我们刚刚定义的父节点的上下文

478
00:27:05,826 --> 0:27:10,264
然后 我们将向CLSDataStore的

479
00:27:11,198 --> 0:27:16,703
以找出所有与我们刚定义的

480
00:27:17,704 --> 0:27:20,174
这将返回一个上下文数组

481
00:27:21,141 --> 0:27:23,677
我们只要遍历所有

482
00:27:23,744 --> 0:27:25,579
我们知道其存在的上下文

483
00:27:26,680 --> 0:27:29,683
然后 对于已经存在的每个上下文

484
00:27:30,050 --> 0:27:32,486
我们将从需要创建的

485
00:27:32,553 --> 0:27:33,887
上下文字典中删除它

486
00:27:35,656 --> 0:27:38,392
接着我们将遍历剩余的

487
00:27:38,458 --> 0:27:42,062
并且对于这些上下文中的每一个

488
00:27:42,696 --> 0:27:46,900
我们将它作为一个子上下文

489
00:27:48,001 --> 0:27:50,070
然后我们调用save函数保存更改

490
00:27:51,004 --> 0:27:53,507
现在我们需要做的就是在app启动时

491
00:27:53,574 --> 0:27:54,808
调用这个函数

492
00:27:57,945 --> 0:27:59,847
让我们运行此代码

493
00:27:59,913 --> 0:28:02,149
以测试我们的上下文

494
00:27:59,913 --> 0:28:02,149
以测试我们的上下文

495
00:28:03,183 --> 0:28:06,119
我这有一个设备

496
00:28:06,987 --> 0:28:07,955
完美

497
00:28:08,021 --> 0:28:09,489
我们的Quizzler app

498
00:28:10,057 --> 0:28:12,059
但一切看起来都一样

499
00:28:12,860 --> 0:28:16,263
我们如何知道这些上下文

500
00:28:16,830 --> 0:28:19,833
这就是我们使用到开发者模式

501
00:28:20,133 --> 0:28:21,468
我现在点击主页按钮

502
00:28:22,102 --> 0:28:23,670
并打开设置

503
00:28:24,738 --> 0:28:25,806
现在我向下滚动

504
00:28:25,873 --> 0:28:27,574
我需要寻找开发人员设置

505
00:28:28,609 --> 0:28:33,046
当我选择开发人员设置时 我将看到

506
00:28:33,881 --> 0:28:35,782
如果我选择

507
00:28:35,849 --> 0:28:39,419
我们可以看到

508
00:28:39,920 --> 0:28:41,855
我要确保我选择了它

509
00:28:42,356 --> 0:28:46,226
现在 我们可以点击主页按钮

510
00:28:48,428 --> 0:28:51,865
当Schoolwork app启动时

511
00:28:52,232 --> 0:28:53,834
我将关掉它

512
00:28:53,901 --> 0:28:56,103
如果我们看右上角

513
00:28:56,170 --> 0:28:57,771
我可以看到那有一个加号按钮

514
00:28:58,405 --> 0:29:00,574
这时我就知道

515
00:28:58,405 --> 0:29:00,574
这时我就知道

516
00:29:01,175 --> 0:29:05,245
如果我点击那个加号按钮

517
00:29:05,946 --> 0:29:07,481
我可以添加一个活动

518
00:29:08,415 --> 0:29:12,352
然后点击“Apps” 可以看到

519
00:29:12,819 --> 0:29:16,557
如果我选择它 真棒

520
00:29:16,924 --> 0:29:20,527
所以现在我们已经能够验证

521
00:29:21,094 --> 0:29:23,497
我还想指出加法测验

522
00:29:23,564 --> 0:29:25,899
在乘法测验之上显示

523
00:29:26,533 --> 0:29:30,437
我们现在也能够验证

524
00:29:31,038 --> 0:29:32,940
现在让我们选择加法测验

525
00:29:33,407 --> 0:29:36,210
这将会为这份讲义添加该上下文

526
00:29:36,577 --> 0:29:39,646
现在让我们将这份讲义

527
00:29:40,647 --> 0:29:43,917
我要点击收件人字段

528
00:29:45,118 --> 0:29:47,521
让我们给这个讲义添加一个标题

529
00:29:49,356 --> 0:29:51,124
现在我继续点击“Post”按钮

530
00:29:51,525 --> 0:29:54,595
它所做的是将这份讲义

531
00:29:54,928 --> 0:29:58,298
并为这份讲义中的上下文授权

532
00:29:58,365 --> 0:30:01,668
现在该上下文可以开始

533
00:29:58,365 --> 0:30:01,668
现在该上下文可以开始

534
00:30:02,703 --> 0:30:05,105
我们可以看到

535
00:30:05,172 --> 0:30:06,340
我可以点击它

536
00:30:06,974 --> 0:30:08,809
在这里我们看到了我添加的上下文

537
00:30:08,876 --> 0:30:13,313
并且我的漂亮图标

538
00:30:14,014 --> 0:30:16,917
如果我点击图标 它应该直接将我

539
00:30:16,984 --> 0:30:18,719
导航到加法数学测验

540
00:30:19,019 --> 0:30:20,320
我们点击它

541
00:30:21,455 --> 0:30:26,293
Schoolwork启动了app

542
00:30:27,094 --> 0:30:29,830
哦 对了 这是对的

543
00:30:29,897 --> 0:30:31,932
让我们回到Xcode并添加它

544
00:30:33,000 --> 0:30:34,801
打开AppDelegate

545
00:30:34,868 --> 0:30:38,005
让我们加入Continue

546
00:30:40,107 --> 0:30:44,478
在这里 Continue Restoration

547
00:30:45,345 --> 0:30:47,548
我们需要使用该用户活动

548
00:30:47,614 --> 0:30:49,850
并获取它的

549
00:30:51,151 --> 0:30:52,953
一旦我们有了上下文路径

550
00:30:53,420 --> 0:30:56,557
我们将实例化我们自己的

551
00:30:56,623 --> 0:30:58,892
关联到该上下文的内部测验模型

552
00:30:59,927 --> 0:31:01,295
然后我们要确定

553
00:30:59,927 --> 0:31:01,295
然后我们要确定

554
00:31:01,361 --> 0:31:03,931
我们调用的是同一个发布上下文函数

555
00:31:04,464 --> 0:31:07,401
如果该上下文还没有被创建

556
00:31:07,467 --> 0:31:09,069
我们需要确保创建它们

557
00:31:09,736 --> 0:31:13,774
这里将返回一个可选错误

558
00:31:15,108 --> 0:31:17,811
然后 我们将与主线程进行同步

559
00:31:18,545 --> 0:31:21,782
实例化我们的Storyboard

560
00:31:21,849 --> 0:31:24,351
并且实例化此测验的视图控制器

561
00:31:25,285 --> 0:31:28,088
然后我们将在视图控制器上

562
00:31:28,488 --> 0:31:30,123
并压入适当的视图

563
00:31:30,757 --> 0:31:33,861
现在 让我们运行此代码

564
00:31:33,927 --> 0:31:36,296
并测试我们的深度链接是否正常工作

565
00:31:37,197 --> 0:31:39,132
现在切换回我的设备

566
00:31:39,399 --> 0:31:42,302
然后导航回

567
00:31:44,505 --> 0:31:47,007
在这里 我们再次点击图标

568
00:31:48,208 --> 0:31:51,812
真棒 它直接启动了加法数学测验

569
00:31:52,279 --> 0:31:56,216
现在我们准备开始编写

570
00:31:56,750 --> 0:32:00,254
让我们回到Xcode

571
00:31:56,750 --> 0:32:00,254
让我们回到Xcode

572
00:32:00,320 --> 0:32:02,923
被调用的那部分代码

573
00:32:04,525 --> 0:32:09,563
这里 我们想要为我们的测验

574
00:32:09,630 --> 0:32:13,600
启动计时器

575
00:32:14,067 --> 0:32:16,370
我们要做的是

576
00:32:16,436 --> 0:32:19,173
发起一个查询

577
00:32:20,007 --> 0:32:22,843
然后我们要在主app上下文中查询

578
00:32:23,343 --> 0:32:27,247
所有与标识符路径相匹配的后代

579
00:32:27,714 --> 0:32:29,583
这些标识符路径与此测验相关联

580
00:32:30,584 --> 0:32:32,819
这将返回一个可选上下文

581
00:32:33,787 --> 0:32:35,255
我们使用该上下文

582
00:32:35,956 --> 0:32:37,958
确保调用它的

583
00:32:38,659 --> 0:32:42,796
然后我们将实例化

584
00:32:43,230 --> 0:32:47,267
这是因为当这部分代码运行时

585
00:32:47,601 --> 0:32:50,504
我们就知道学生正对该测验

586
00:32:51,071 --> 0:32:53,507
接着我们要缓存该活动

587
00:32:53,574 --> 0:32:55,375
以及我们定义的属性

588
00:32:56,910 --> 0:33:00,080
然后我们调用活动的start方法

589
00:32:56,910 --> 0:33:00,080
然后我们调用活动的start方法

590
00:33:00,948 --> 0:33:03,617
我们还说过我们想报告

591
00:33:03,684 --> 0:33:05,152
每个问题的回答是否正确

592
00:33:05,719 --> 0:33:08,488
所以我要找到当学生选择答案时

593
00:33:08,555 --> 0:33:10,390
所调用的代码

594
00:33:11,792 --> 0:33:14,361
在这里我们要做的是

595
00:33:14,728 --> 0:33:17,598
获取当前运行的活动

596
00:33:17,664 --> 0:33:18,799
这正是我们刚刚创建的

597
00:33:19,333 --> 0:33:24,004
接着 我们将实例化一个

598
00:33:24,571 --> 0:33:29,576
给它一个唯一的标识符

599
00:33:30,377 --> 0:33:33,614
然后记得传入

600
00:33:34,915 --> 0:33:37,851
现在我们要设置

601
00:33:37,918 --> 0:33:41,889
学生的回答是否正确的值

602
00:33:42,956 --> 0:33:45,259
然后我们要在当前运行活动中

603
00:33:45,325 --> 0:33:50,097
将这个binaryItem

604
00:33:51,198 --> 0:33:53,400
我们最不想做的是

605
00:33:53,467 --> 0:33:56,036
停止计时器并设置总分

606
00:33:56,637 --> 0:33:58,405
我们找到当学生停止答题时

607
00:33:58,472 --> 0:34:02,109
所调用的那部分代码

608
00:33:58,472 --> 0:34:02,109
所调用的那部分代码

609
00:34:03,110 --> 0:34:06,780
这里我们获得同样的当前运行活动

610
00:34:07,447 --> 0:34:11,351
接着 我们将创建一个

611
00:34:11,851 --> 0:34:16,924
传递一个唯一的标识符、标题

612
00:34:16,989 --> 0:34:22,129
可能的最高分数中学生所得到的分数

613
00:34:23,063 --> 0:34:25,264
然后 我们将该分数项

614
00:34:25,331 --> 0:34:28,467
作为主活动项添加到我们的活动中

615
00:34:28,969 --> 0:34:30,571
注意每次我这样做时

616
00:34:30,637 --> 0:34:35,309
我总是设置CLS活动项目的

617
00:34:35,542 --> 0:34:38,178
它总是一个ScoreItem

618
00:34:39,213 --> 0:34:42,315
然后我们调用stop方法

619
00:34:42,649 --> 0:34:45,018
并调用save

620
00:34:45,918 --> 0:34:48,155
现在让我们重新运行此代码

621
00:34:48,222 --> 0:34:52,025
以测试我们的学生生成的活动数据

622
00:34:52,860 --> 0:34:54,494
我切换回我的设备

623
00:34:54,862 --> 0:34:57,998
现在我们要切换并充当学生的角色

624
00:34:58,332 --> 0:35:01,768
我将返回到开发人员设置界面

625
00:34:58,332 --> 0:35:01,768
我将返回到开发人员设置界面

626
00:35:02,569 --> 0:35:04,004
设置在这里

627
00:35:04,071 --> 0:35:05,305
我们点击“Student”

628
00:35:05,372 --> 0:35:08,108
现在我转而扮演学生的角色

629
00:35:08,775 --> 0:35:11,245
现在我们打开

630
00:35:12,446 --> 0:35:14,781
这时候右上角

631
00:35:14,848 --> 0:35:16,683
不再有一个加号按钮

632
00:35:16,884 --> 0:35:19,052
我就知道我是以学生身份登录的

633
00:35:19,553 --> 0:35:22,389
我们可以看到

634
00:35:22,990 --> 0:35:27,327
如果我点击它

635
00:35:27,394 --> 0:35:28,929
我可以点击图标

636
00:35:29,329 --> 0:35:31,198
它直接将我导航到测验界面

637
00:35:32,099 --> 0:35:34,301
现在我看到一条提醒

638
00:35:34,368 --> 0:35:37,504
将以我的名义进行记录

639
00:35:37,938 --> 0:35:39,106
我来关掉它

640
00:35:40,007 --> 0:35:43,343
然后回答我们所有的问题

641
00:35:45,379 --> 0:35:46,914
最后得到总分

642
00:35:47,381 --> 0:35:48,815
可以看到 我得了100%

643
00:35:49,383 --> 0:35:51,351
我们回到

644
00:35:52,019 --> 0:35:54,621
在这里我们可以看到活动数据

645
00:35:54,688 --> 0:35:56,957
我们可以看到时间和总分

646
00:35:57,558 --> 0:35:59,560
注意总分在用户界面的主要部分

647
00:35:59,626 --> 0:36:00,961
突出显示

648
00:35:59,626 --> 0:36:00,961
突出显示

649
00:36:01,028 --> 0:36:04,665
现在我们能够验证

650
00:36:04,731 --> 0:36:08,101
我也可以点击单元格

651
00:36:08,168 --> 0:36:10,070
上面有我写的所有活动数据

652
00:36:10,470 --> 0:36:13,173
我可以看到浅灰色的总得分

653
00:36:13,240 --> 0:36:15,676
还有我设定的总分的标题

654
00:36:16,677 --> 0:36:19,146
在底部 我们可以看到所用时间

655
00:36:19,213 --> 0:36:20,914
然后是每个问题的回答结果

656
00:36:21,181 --> 0:36:24,218
我们还可以看到我为每个问题

657
00:36:24,284 --> 0:36:26,220
它们也是浅灰色的

658
00:36:27,087 --> 0:36:29,056
现在我们已经能够验证

659
00:36:29,122 --> 0:36:31,692
我们的活动数据已经被记录下来了

660
00:36:32,659 --> 0:36:36,430
现在我想重新将Pavel请上台

661
00:36:36,496 --> 0:36:39,132
以继续他的演讲

662
00:36:48,408 --> 0:36:49,510
谢谢Marin

663
00:36:50,444 --> 0:36:54,114
我想提一下关于ClassKit的

664
00:36:55,983 --> 0:36:58,752
首先 尽早声明你的上下文

665
00:36:58,819 --> 0:37:01,021
以便教师可以进行分发

666
00:36:58,819 --> 0:37:01,021
以便教师可以进行分发

667
00:37:01,555 --> 0:37:04,591
并且Marin向我们

668
00:37:04,658 --> 0:37:06,460
不是所有东西都非得是一个上下文

669
00:37:07,728 --> 0:37:11,198
如果这样做有意义 就请使用

670
00:37:11,932 --> 0:37:15,636
另外 请好好利用附加活动项目

671
00:37:16,103 --> 0:37:19,473
它们的确是提供额外信息的好方法

672
00:37:19,540 --> 0:37:23,977
而教师可能需要这些信息来了解

673
00:37:25,345 --> 0:37:28,482
还有一些关于教育app的

674
00:37:28,949 --> 0:37:31,285
其中之一是

675
00:37:32,085 --> 0:37:33,887
这是因为在学校环境中

676
00:37:33,954 --> 0:37:35,756
使用app内清除并不是个好主意

677
00:37:36,456 --> 0:37:38,892
这个库是用来支持可清除存储的

678
00:37:40,294 --> 0:37:41,662
总的来说 这是一个好主意

679
00:37:41,728 --> 0:37:44,097
但在学校环境中非常重要的是

680
00:37:44,164 --> 0:37:49,403
在那里共享iPod是很常见的

681
00:37:50,170 --> 0:37:53,740
最后 通过托管app配置

682
00:37:54,374 --> 0:37:59,112
这样做可以使学校管理员

683
00:38:00,747 --> 0:38:03,116
你可以在

684
00:38:03,183 --> 0:38:04,451
找到

685
00:38:04,518 --> 0:38:08,055
关于所有这些内容的链接

686
00:38:09,223 --> 0:38:12,826
愿大家在剩余的WWDC中

687
00:38:13,227 --> 0:38:14,394
谢谢大家的参与
