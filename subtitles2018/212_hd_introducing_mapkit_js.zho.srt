1
00:00:18,218 --> 0:00:21,154
（MAPKIT JS简介

2
00:00:21,221 --> 0:00:22,356
大家好

3
00:00:28,629 --> 0:00:29,596
我是Vicki Murley

4
00:00:29,663 --> 0:00:32,566
我是MapKit JS团队的

5
00:00:32,633 --> 0:00:36,136
这是演讲212

6
00:00:37,337 --> 0:00:40,607
十多年前当iPhone刚出来时

7
00:00:40,674 --> 0:00:42,376
它确实改变了整个行业

8
00:00:42,543 --> 0:00:43,710
它将我们带入了

9
00:00:43,777 --> 0:00:46,780
现在称为app生态系统的世界

10
00:00:47,347 --> 0:00:49,783
仔细想一下这很有趣

11
00:00:49,850 --> 0:00:52,953
app是我们日常生活中

12
00:00:53,086 --> 0:00:56,590
但在有app之前

13
00:00:57,291 --> 0:00:59,860
如果你的公司

14
00:00:59,927 --> 0:01:02,362
你可能以一个网站开始你的事业

15
00:00:59,927 --> 0:01:02,362
你可能以一个网站开始你的事业

16
00:01:02,429 --> 0:01:04,531
即使在今天 如果你有app产品

17
00:01:04,697 --> 0:01:07,568
你可能也在使用网站来吸引更多用户

18
00:01:07,634 --> 0:01:09,837
或者只是其它不同的受众

19
00:01:10,437 --> 0:01:13,173
所以很多开发者 就像你一样

20
00:01:13,240 --> 0:01:15,375
有一个网站和一个app

21
00:01:15,442 --> 0:01:19,947
WWDC网站就是一个很好的例子

22
00:01:20,080 --> 0:01:22,883
我们有这个网站

23
00:01:23,016 --> 0:01:24,218
你可能正在使用它

24
00:01:24,284 --> 0:01:26,553
在会议中心附近寻找各种路线信息

25
00:01:26,620 --> 0:01:29,022
就好像这周你在这里做的一样

26
00:01:29,890 --> 0:01:32,326
所以在Apple 我们真的很幸运

27
00:01:32,392 --> 0:01:37,097
因为我们已经能够在我们自己的

28
00:01:37,297 --> 0:01:38,599
有一段时间了

29
00:01:38,799 --> 0:01:41,368
这是WWDC网站上的一个页面

30
00:01:41,435 --> 0:01:44,972
它能向你展示

31
00:01:46,173 --> 0:01:49,142
若你曾用过iCloud.com

32
00:01:49,209 --> 0:01:51,678
你就已经在网站上

33
00:01:52,613 --> 0:01:55,382
如果你曾经搜索过零售商店

34
00:01:55,449 --> 0:01:58,318
这也是网页中的

35
00:01:58,385 --> 0:01:59,520
（寻找商店）

36
00:01:59,586 --> 0:02:00,554
你们中的大多数人

37
00:01:59,586 --> 0:02:00,554
你们中的大多数人

38
00:02:00,621 --> 0:02:03,757
可能都在app中

39
00:02:04,224 --> 0:02:05,259
今天

40
00:02:05,325 --> 0:02:08,762
我们开放了MapKit JS

41
00:02:08,829 --> 0:02:10,464
（MAPKIT JS）

42
00:02:14,868 --> 0:02:19,540
本周的WWDC上

43
00:02:19,606 --> 0:02:22,042
这是我们一直在自己的网站上

44
00:02:22,109 --> 0:02:24,044
所使用的库

45
00:02:24,878 --> 0:02:30,450
当前所有网页地图库

46
00:02:30,517 --> 0:02:33,253
比如你的某些数量以内的请求

47
00:02:33,387 --> 0:02:35,789
MapKit JS测试版也不例外

48
00:02:36,223 --> 0:02:38,358
作为MapKit JS测试版

49
00:02:38,425 --> 0:02:42,663
你可以得到25万次地图初始化

50
00:02:43,830 --> 0:02:46,266
和两万五千个服务请求

51
00:02:46,500 --> 0:02:51,572
这包括地理编码 搜索

52
00:02:51,805 --> 0:02:56,410
通常这些免费的使用级别

53
00:02:56,510 --> 0:02:59,713
可能是每年 每月或每周

54
00:03:00,514 --> 0:03:01,715
对于MapKit JS测试版

55
00:03:01,782 --> 0:03:05,419
我们每天都会为你提供

56
00:03:05,485 --> 0:03:07,554
（每天）

57
00:03:11,692 --> 0:03:13,160
所以这是很大一笔数额

58
00:03:13,527 --> 0:03:16,797
但是如果你需要更多来支持你的用例

59
00:03:16,864 --> 0:03:18,866
或你的公司

60
00:03:18,932 --> 0:03:20,133
网上有一个表格

61
00:03:20,200 --> 0:03:23,737
只需填写并提交 我们将收到该请求

62
00:03:23,804 --> 0:03:24,872
（需要更多？联系我们）

63
00:03:24,938 --> 0:03:27,674
要想使用MapKit JS

64
00:03:27,774 --> 0:03:30,677
你可以通过登录你的开发者帐户

65
00:03:30,811 --> 0:03:34,114
你需要转到

66
00:03:34,248 --> 0:03:36,183
你可以在那里得到一个密钥

67
00:03:36,250 --> 0:03:39,720
就像你使用开发者帐户中的

68
00:03:39,786 --> 0:03:40,988
（获取MAPKIT JS密钥）

69
00:03:41,054 --> 0:03:44,925
MapKit JS测试版

70
00:03:44,992 --> 0:03:48,095
所以我建议你尽快去申请一个

71
00:03:50,764 --> 0:03:53,967
一旦你得到一个密钥

72
00:03:54,101 --> 0:03:56,503
我的意思是 我可能带有偏见

73
00:03:56,570 --> 0:03:59,907
但我认为你会很喜欢它的很多东西

74
00:04:00,374 --> 0:04:04,545
第一件事是它可以

75
00:04:04,611 --> 0:04:06,780
统一使用同一个地图提供者

76
00:04:07,147 --> 0:04:10,384
我们注意到有很多人在app中

77
00:04:10,884 --> 0:04:13,120
你将可在任何地方

78
00:04:13,187 --> 0:04:15,322
（为什么你会喜欢

79
00:04:15,389 --> 0:04:19,625
MapKit JS API

80
00:04:19,692 --> 0:04:22,229
你正在使用的本地

81
00:04:22,296 --> 0:04:25,365
但它们使用的是

82
00:04:25,432 --> 0:04:27,501
所以它们应该很容易适应

83
00:04:29,703 --> 0:04:36,643
此外 MapKit JS能为网页

84
00:04:36,877 --> 0:04:40,747
它具有32种本地化语言

85
00:04:41,281 --> 0:04:44,751
它可以通过键盘和语音来使用

86
00:04:45,319 --> 0:04:49,623
它拥有Apple Maps中

87
00:04:49,756 --> 0:04:52,826
它也支持原生手势

88
00:04:52,893 --> 0:04:57,698
双指旋转 还可以移动

89
00:04:59,199 --> 0:05:02,469
它还使用了一种

90
00:04:59,199 --> 0:05:02,469
它还使用了一种

91
00:05:02,669 --> 0:05:04,271
它的意思是

92
00:05:04,338 --> 0:05:07,407
有几种不同的模式可以渲染地图

93
00:05:07,841 --> 0:05:10,177
第一种是客户端渲染

94
00:05:10,244 --> 0:05:15,215
这是一个完整的WebGL引擎

95
00:05:15,749 --> 0:05:20,187
这使我们能够做很多事情

96
00:05:20,320 --> 0:05:24,491
或双指滚动来放大时

97
00:05:24,558 --> 0:05:28,295
当我们在缩放级别之间切换时

98
00:05:28,362 --> 0:05:29,630
就像本地app一样

99
00:05:29,696 --> 0:05:32,099
（客户端渲染（CSR）

100
00:05:32,165 --> 0:05:35,102
此外 客户端渲染为我们提供了

101
00:05:35,169 --> 0:05:36,637
对地图上标签的完全控制

102
00:05:36,837 --> 0:05:39,339
所以我们可以启用旋转等功能

103
00:05:39,573 --> 0:05:42,476
我用两根手指旋转地图

104
00:05:42,676 --> 0:05:45,879
但标签在我旋转时仍然保持水平

105
00:05:47,447 --> 0:05:49,816
最后 通过使用CSR

106
00:05:49,883 --> 0:05:54,555
我们可以显示你经常

107
00:05:54,721 --> 0:05:58,192
这个注释的标题是

108
00:05:58,292 --> 0:06:01,228
如果我选择这个注释

109
00:05:58,292 --> 0:06:01,228
如果我选择这个注释

110
00:06:01,295 --> 0:06:04,398
但它会覆盖它下面的那个标签

111
00:06:04,865 --> 0:06:08,735
因此通过客户端渲染

112
00:06:08,869 --> 0:06:11,538
我们可以将该标签隐藏起来

113
00:06:11,638 --> 0:06:15,275
从而使地图上的标签不会

114
00:06:15,342 --> 0:06:16,543
与注释的文本重叠

115
00:06:18,245 --> 0:06:20,614
即使用户放大和缩小

116
00:06:20,681 --> 0:06:23,717
并且地图标签正在不断变化

117
00:06:23,851 --> 0:06:27,588
但地图标签永远不会

118
00:06:28,088 --> 0:06:30,524
实际上 如果你有一个可拖动的注释

119
00:06:30,591 --> 0:06:33,727
并且用户在地图上到处移动它

120
00:06:34,061 --> 0:06:38,298
地图标签永远不会覆盖你的注释标签

121
00:06:39,700 --> 0:06:43,003
这是渲染模式之一

122
00:06:43,437 --> 0:06:47,808
但是Web代码可以在任何地方运行

123
00:06:48,408 --> 0:06:51,845
有些时候你的用户

124
00:06:51,912 --> 0:06:54,348
可能运行在低性能配置的设备上

125
00:06:54,414 --> 0:06:56,450
也许是一个旧设备

126
00:06:56,517 --> 0:07:00,020
我们有一种不同的模式

127
00:06:56,517 --> 0:07:00,020
我们有一种不同的模式

128
00:07:00,687 --> 0:07:01,955
它实际上

129
00:07:02,122 --> 0:07:05,692
是一个显示底图的图像块网格

130
00:07:05,993 --> 0:07:10,564
其顶部有一层WebGL标签

131
00:07:10,797 --> 0:07:14,168
因此我们仍然可以为

132
00:07:14,234 --> 0:07:18,005
以高性能的方式提供这些强大的功能

133
00:07:18,605 --> 0:07:20,140
如旋转和标签冲突处理

134
00:07:22,042 --> 0:07:25,546
如果用户的配置

135
00:07:25,612 --> 0:07:27,915
他们将会得到我们称之为

136
00:07:27,981 --> 0:07:31,418
这是一个图像贴图网格

137
00:07:31,618 --> 0:07:34,521
在这种情况下

138
00:07:36,290 --> 0:07:38,825
所以自适应渲染模式非常酷

139
00:07:38,892 --> 0:07:42,796
因为对每个客户端配置

140
00:07:43,497 --> 0:07:46,867
我们会自动为你的用户选择最佳模式

141
00:07:46,934 --> 0:07:50,337
因此你无需决定

142
00:07:50,404 --> 0:07:52,639
还是贴图版本

143
00:07:52,706 --> 0:07:57,277
我们运行一个快速测试

144
00:07:57,344 --> 0:07:58,912
（自适应渲染模式）

145
00:07:58,979 --> 0:08:00,480
根据我们迄今的经验

146
00:07:58,979 --> 0:08:00,480
根据我们迄今的经验

147
00:08:00,547 --> 0:08:02,883
大多数用户正在使用客户端渲染

148
00:08:02,950 --> 0:08:04,885
或仅标签客户端渲染

149
00:08:06,253 --> 0:08:08,589
以上是对MapKit JS

150
00:08:08,655 --> 0:08:11,592
现在为了告诉你

151
00:08:11,658 --> 0:08:13,961
我将把舞台

152
00:08:21,401 --> 0:08:22,503
谢谢 Vicki

153
00:08:22,569 --> 0:08:24,004
（在你的网站上

154
00:08:24,771 --> 0:08:28,675
我们来看看为你的网站

155
00:08:29,843 --> 0:08:31,545
我们将看到如何设置地图

156
00:08:32,179 --> 0:08:34,347
如何导航以及注释这张地图

157
00:08:34,414 --> 0:08:36,350
以便你可以显示自己的数据

158
00:08:37,451 --> 0:08:40,120
最后 我们将看到如何启用

159
00:08:40,453 --> 0:08:41,989
与其它服务的富交互

160
00:08:42,054 --> 0:08:43,890
（设置你的地图）

161
00:08:43,957 --> 0:08:46,927
要设置你的地图

162
00:08:47,828 --> 0:08:49,796
第一步是导入MapKit JS

163
00:08:50,197 --> 0:08:53,567
你可以看到一个script标签

164
00:08:53,934 --> 0:08:58,205
MapKit JS脚本的URL

165
00:08:58,672 --> 0:09:00,307
包含一个版本号

166
00:08:58,672 --> 0:09:00,307
包含一个版本号

167
00:09:01,141 --> 0:09:04,444
我们遵循语义版本控制系统

168
00:09:04,511 --> 0:09:07,114
其中第一个数字是主要版本号

169
00:09:07,181 --> 0:09:10,551
它在引入重大更改时才会更新

170
00:09:10,617 --> 0:09:13,020
第二个数字是次要版本号

171
00:09:13,086 --> 0:09:17,591
所以当修复漏洞或添加新功能时

172
00:09:17,758 --> 0:09:19,893
以及引入性能改进时

173
00:09:19,960 --> 0:09:21,161
我们更新这个数字

174
00:09:21,228 --> 0:09:24,865
最后对于紧急补丁

175
00:09:24,932 --> 0:09:27,701
你可以指定一个X而不是特定的数字

176
00:09:27,768 --> 0:09:29,536
作为次要或补丁版本

177
00:09:29,603 --> 0:09:33,974
我们建议你

178
00:09:34,041 --> 0:09:38,011
以便你能够在我们的第一个

179
00:09:38,078 --> 0:09:40,147
（第2步：创建地图容器）

180
00:09:40,214 --> 0:09:43,250
为了能够在你的网站上显示地图

181
00:09:43,450 --> 0:09:47,654
你需要告诉MapKit

182
00:09:47,721 --> 0:09:52,826
为了做到这一点

183
00:09:52,893 --> 0:09:55,362
它将成为你的地图的容器

184
00:09:55,529 --> 0:09:57,164
这个例子中

185
00:09:57,231 --> 0:10:00,901
这通常是非常好的选择

186
00:09:57,231 --> 0:10:00,901
这通常是非常好的选择

187
00:10:01,335 --> 0:10:04,805
我给它一个ID

188
00:10:04,972 --> 0:10:08,976
一件非常重要的事情是设定它的大小

189
00:10:09,243 --> 0:10:11,645
因为地图没有自己的大小

190
00:10:11,712 --> 0:10:15,883
所以它只会使用包含它的元素的大小

191
00:10:16,250 --> 0:10:18,151
所以如果你有一个元素

192
00:10:18,285 --> 0:10:21,188
它在这里用灰色背景表示

193
00:10:21,388 --> 0:10:24,291
地图会显示在该元素内

194
00:10:24,358 --> 0:10:27,794
如果你的元素大小发生变化

195
00:10:28,161 --> 0:10:29,463
（第3步：

196
00:10:29,530 --> 0:10:32,332
我为我的地图设置了一个元素

197
00:10:32,633 --> 0:10:35,435
下一步是初始化MapKit JS

198
00:10:35,502 --> 0:10:39,706
我们刚才看到你需要一个密钥

199
00:10:39,940 --> 0:10:42,342
以及初始化MapKit

200
00:10:43,443 --> 0:10:46,613
你需要获得

201
00:10:46,680 --> 0:10:51,919
以便你能够使用

202
00:10:51,985 --> 0:10:56,823
最重要的是它可以在你的网站上

203
00:10:58,025 --> 0:11:01,528
最后一步是使用MapKit中的

204
00:10:58,025 --> 0:11:01,528
最后一步是使用MapKit中的

205
00:11:01,595 --> 0:11:03,931
创建一个地图对象

206
00:11:04,031 --> 0:11:07,267
我给它地图容器的ID

207
00:11:07,334 --> 0:11:08,535
这就是所发生的事

208
00:11:08,769 --> 0:11:10,938
我们的网页上显示了一个地图

209
00:11:12,406 --> 0:11:13,740
这是默认地图

210
00:11:13,807 --> 0:11:16,043
我们没有传递任何其他参数

211
00:11:16,109 --> 0:11:18,612
所以它会显示

212
00:11:18,679 --> 0:11:21,715
你可以在角落处看到控件

213
00:11:21,782 --> 0:11:24,184
你可以看到用来旋转的指南针

214
00:11:24,651 --> 0:11:25,819
缩放控件

215
00:11:26,887 --> 0:11:29,122
顶部的地图类型控件等

216
00:11:30,791 --> 0:11:33,260
这是一个非常大的区域

217
00:11:33,527 --> 0:11:36,864
但是如果你在一个页面上

218
00:11:36,930 --> 0:11:39,433
只想显示一张非常小的地图

219
00:11:39,499 --> 0:11:42,569
这些控件会占用很多宝贵的空间

220
00:11:42,636 --> 0:11:46,707
因此默认情况下 当你的地图尺寸

221
00:11:46,773 --> 0:11:49,877
我们将自动隐藏这些控件

222
00:11:50,944 --> 0:11:54,147
在触控设备上 情况略有不同

223
00:11:54,214 --> 0:11:56,683
我们并不需要显示一些控件

224
00:11:56,750 --> 0:11:58,252
比如缩放或指南针

225
00:11:58,318 --> 0:12:01,288
因为我们可以用手势

226
00:11:58,318 --> 0:12:01,288
因为我们可以用手势

227
00:12:01,355 --> 0:12:04,858
来旋转地图或放大

228
00:12:05,225 --> 0:12:08,629
所以我们不需要显示这些控件

229
00:12:08,695 --> 0:12:11,298
来浪费这些空间

230
00:12:11,365 --> 0:12:12,933
（平台和地图尺寸

231
00:12:13,000 --> 0:12:16,069
注意Apple徽标和法律文本

232
00:12:16,970 --> 0:12:18,438
这些是控件的默认值

233
00:12:18,505 --> 0:12:22,476
但你也可以自己设置

234
00:12:22,643 --> 0:12:24,645
某些控件是所谓的自适应控件

235
00:12:24,711 --> 0:12:26,713
这包括指南针和比例尺

236
00:12:26,847 --> 0:12:29,183
这意味着取决于平台

237
00:12:29,249 --> 0:12:31,318
他们的行为会略有不同

238
00:12:31,385 --> 0:12:35,756
在iOS上 默认情况下不显示

239
00:12:35,822 --> 0:12:37,324
但如果地图旋转了

240
00:12:37,391 --> 0:12:40,327
我们就会显示它以指示

241
00:12:40,394 --> 0:12:44,698
比例尺是地图上距离单位的指标

242
00:12:44,765 --> 0:12:48,769
我们只在用户放大和缩小时才显示它

243
00:12:49,036 --> 0:12:53,707
所以当我们进行缩放和旋转时

244
00:12:53,774 --> 0:12:56,009
我们可以看到指南针

245
00:12:56,076 --> 0:12:57,444
在右下角出现并消失

246
00:12:57,511 --> 0:13:00,447
并且比例尺在左上角出现和消失

247
00:12:57,511 --> 0:13:00,447
并且比例尺在左上角出现和消失

248
00:13:00,514 --> 0:13:02,382
当然我们也可以设置这些控件

249
00:13:02,449 --> 0:13:04,451
始终可见或始终隐藏

250
00:13:04,518 --> 0:13:06,153
（任意情景下的可配置控件）

251
00:13:06,220 --> 0:13:08,255
其余控件都有一个二进制状态

252
00:13:08,322 --> 0:13:14,461
以便通过设置其布尔属性

253
00:13:16,163 --> 0:13:16,997
在这个例子中

254
00:13:17,064 --> 0:13:20,701
我们将显示桌面上默认不显示的控件

255
00:13:20,834 --> 0:13:22,836
例如用户位置控件

256
00:13:22,903 --> 0:13:26,240
它出现在窗口的右下角

257
00:13:26,573 --> 0:13:27,908
在这里 我已经选择了它

258
00:13:27,975 --> 0:13:29,977
现在正在跟踪用户位置

259
00:13:30,043 --> 0:13:32,679
你可以在地图中心看到用户当前位置

260
00:13:33,280 --> 0:13:37,451
比例尺显示在左上方

261
00:13:38,719 --> 0:13:41,054
我们可以进一步配置这些控件

262
00:13:42,089 --> 0:13:45,459
为了更好地匹配页面的配色方案

263
00:13:45,526 --> 0:13:47,794
你可以设置地图的色调

264
00:13:47,861 --> 0:13:51,365
这会改变用户控件的颜色

265
00:13:51,431 --> 0:13:55,202
例如 你可以看到地图的所有控件…

266
00:13:55,269 --> 0:13:57,738
你可以看到用户控件

267
00:13:57,804 --> 0:14:00,407
因为我将其色调颜色设置为红色

268
00:13:57,804 --> 0:14:00,407
因为我将其色调颜色设置为红色

269
00:14:00,474 --> 0:14:02,543
你可以在此处使用任何CSS颜色值

270
00:14:03,143 --> 0:14:04,611
（本地化）

271
00:14:04,678 --> 0:14:08,615
MapKit将使用你的浏览器的

272
00:14:09,216 --> 0:14:14,955
以便它能够调整为

273
00:14:15,022 --> 0:14:18,025
你也可以在初始化调用中设置语言

274
00:14:18,091 --> 0:14:21,061
或者你甚至可以使用

275
00:14:21,128 --> 0:14:22,696
这里我把它设置为日语

276
00:14:22,763 --> 0:14:27,868
因此我可以以日语显示地图以及控件

277
00:14:28,235 --> 0:14:30,771
比如你可以看到指南针中的

278
00:14:30,871 --> 0:14:32,472
已被替换

279
00:14:32,539 --> 0:14:35,442
并且单位现在使用了公制系统

280
00:14:35,509 --> 0:14:40,147
这在日本比使用英里或码更传统

281
00:14:42,216 --> 0:14:45,219
如果你将语言设置为从右向左显示

282
00:14:45,285 --> 0:14:48,055
例如本例中的希伯来语

283
00:14:48,121 --> 0:14:52,226
其中的控件也会被镜像显示

284
00:14:53,861 --> 0:14:56,730
控件是你的用户可以与地图

285
00:14:56,797 --> 0:14:58,832
进行交互的一些方法

286
00:14:58,899 --> 0:15:00,434
也是直接交互的方法

287
00:14:58,899 --> 0:15:00,434
也是直接交互的方法

288
00:15:00,501 --> 0:15:04,838
正如我所说的

289
00:15:04,972 --> 0:15:06,607
在桌面上对于一些手势

290
00:15:06,673 --> 0:15:07,975
你可以使用触控板

291
00:15:08,041 --> 0:15:11,078
你也可以使用鼠标点击并平移地图

292
00:15:11,144 --> 0:15:14,348
或双击以放大地图

293
00:15:14,481 --> 0:15:17,885
你也可以直接禁用这些交互

294
00:15:18,118 --> 0:15:20,687
比如通过将ZoomEnabled

295
00:15:20,854 --> 0:15:23,056
或RotateEnabled属性值

296
00:15:23,123 --> 0:15:25,792
例如 如果你有个非常小的地图

297
00:15:25,859 --> 0:15:27,361
就像我之前展示的那种

298
00:15:27,728 --> 0:15:28,629
你可能需要确保

299
00:15:28,695 --> 0:15:31,398
用户不会意外移动地图

300
00:15:31,465 --> 0:15:33,667
以确保它始终显示正确的区域

301
00:15:33,734 --> 0:15:36,069
你就可以将这些属性

302
00:15:36,236 --> 0:15:37,804
这将会使地图变为静态

303
00:15:38,305 --> 0:15:40,140
（导航和注释地图）

304
00:15:40,207 --> 0:15:43,844
现在我们知道了

305
00:15:43,911 --> 0:15:46,580
我们还希望展示一些有趣的内容

306
00:15:47,648 --> 0:15:52,419
我们可以通过导航浏览世界各地

307
00:15:52,519 --> 0:15:53,921
也可以注释地图

308
00:15:53,987 --> 0:15:55,756
来引起对我们想展示的

309
00:15:56,823 --> 0:15:58,225
区域的关注

310
00:16:00,694 --> 0:16:03,063
我们将看到如何设置中心和区域

311
00:16:03,130 --> 0:16:05,832
如何向地图添加注释以标记位置

312
00:16:05,899 --> 0:16:08,869
以及如何使用叠层

313
00:16:09,369 --> 0:16:11,305
我们从地图的中心和区域开始说起

314
00:16:13,307 --> 0:16:14,741
同样 这是一个默认地图

315
00:16:15,142 --> 0:16:18,078
它显示的是默认区域

316
00:16:18,145 --> 0:16:22,216
它已经缩小到最小级别

317
00:16:22,516 --> 0:16:26,186
并将地图中心置于0/0经纬度上

318
00:16:26,753 --> 0:16:29,756
你可能想展示世界中

319
00:16:29,823 --> 0:16:31,225
对于这个例子

320
00:16:31,291 --> 0:16:34,394
我想将焦点集中在巴西的里约热内卢

321
00:16:35,229 --> 0:16:37,664
为此 我将设置我的地图中心

322
00:16:37,731 --> 0:16:39,366
为里约热内卢的坐标

323
00:16:39,433 --> 0:16:40,701
你可以在右边看到

324
00:16:40,767 --> 0:16:45,239
地图中心已经移动到里约热内卢

325
00:16:45,839 --> 0:16:48,609
但是设置地图的中心

326
00:16:48,675 --> 0:16:51,144
因此在这样的尺度下

327
00:16:51,211 --> 0:16:53,247
因为我们可以看到整个南美洲

328
00:16:53,313 --> 0:16:55,215
所以让我们放大一点

329
00:16:55,282 --> 0:16:56,283
（在地图上移动）

330
00:16:56,350 --> 0:16:59,286
为了做到这一点

331
00:16:59,353 --> 0:17:02,289
一个坐标区域由一个中心

332
00:16:59,353 --> 0:17:02,289
一个坐标区域由一个中心

333
00:17:02,356 --> 0:17:05,358
它由处于地图的中心的这些点表示

334
00:17:05,626 --> 0:17:07,861
以及纬度和经度范围组成

335
00:17:07,928 --> 0:17:12,266
我在这里将该区域显示为这个虚线框

336
00:17:12,933 --> 0:17:17,538
但我们会注意到

337
00:17:17,637 --> 0:17:20,140
将比你要求显示的区域更大

338
00:17:20,207 --> 0:17:23,609
因为我们需要确保它完全包括在

339
00:17:23,676 --> 0:17:25,979
你为地图设置的边界里面

340
00:17:26,046 --> 0:17:28,147
所以在这种情况下

341
00:17:28,448 --> 0:17:32,219
即该地区的北部和南部

342
00:17:32,452 --> 0:17:34,655
以显示指定的整个区域

343
00:17:34,788 --> 0:17:39,793
就编码

344
00:17:40,761 --> 0:17:43,297
中心被设置为一个

345
00:17:43,363 --> 0:17:45,499
这是一个纬度和经度对

346
00:17:45,832 --> 0:17:48,936
地图的区域用

347
00:17:49,269 --> 0:17:51,972
它是一个包含两个成员的对象

348
00:17:52,039 --> 0:17:53,941
一个中心 也即一个坐标

349
00:17:54,341 --> 0:17:55,442
以及坐标跨度

350
00:17:55,509 --> 0:17:58,512
它是一个纬度增量和一个经度增量

351
00:17:59,112 --> 0:18:01,615
（总是展示正确的区域）

352
00:17:59,112 --> 0:18:01,615
（总是展示正确的区域）

353
00:18:01,682 --> 0:18:04,651
我是怎么得到我在这些截图中

354
00:18:04,718 --> 0:18:06,286
向你展示的这个区域或坐标的呢

355
00:18:06,353 --> 0:18:08,689
实际上有很多方法可以查到

356
00:18:10,123 --> 0:18:12,092
特定的区域和坐标

357
00:18:12,159 --> 0:18:16,163
你可以在维基百科上查找它们

358
00:18:16,230 --> 0:18:21,635
你可以从某些

359
00:18:22,336 --> 0:18:25,172
但还有一种方法可以获得这些信息

360
00:18:25,439 --> 0:18:30,978
就是使用MapKit服务

361
00:18:31,044 --> 0:18:34,081
地理编码可以让你查找一个地方

362
00:18:34,982 --> 0:18:36,950
并将返回一个坐标和一个区域

363
00:18:37,017 --> 0:18:38,685
在前面的这个例子中

364
00:18:38,752 --> 0:18:41,054
我使用了

365
00:18:41,121 --> 0:18:44,324
来查找里约热内卢的坐标和区域

366
00:18:44,391 --> 0:18:46,193
这就是我对地图进行的设置

367
00:18:46,627 --> 0:18:50,163
你也可以使用搜索功能来搜索地方

368
00:18:50,230 --> 0:18:54,034
它不仅会返回这些地方的坐标

369
00:18:54,101 --> 0:18:56,537
而且还会返回

370
00:18:56,837 --> 0:18:59,373
以此确保它包含全部结果

371
00:18:59,640 --> 0:19:01,141
（设置一个包含项目的区域）

372
00:18:59,640 --> 0:19:01,141
（设置一个包含项目的区域）

373
00:19:01,208 --> 0:19:04,978
在地图上快速设置区域的另一种方式

374
00:19:05,045 --> 0:19:06,813
它是一个名为

375
00:19:07,047 --> 0:19:10,617
我们现在看看

376
00:19:10,684 --> 0:19:11,785
且通过调用showItems

377
00:19:11,852 --> 0:19:15,556
我们将确保能够得到

378
00:19:15,622 --> 0:19:17,591
以便用户可以看到它们

379
00:19:17,658 --> 0:19:19,626
（区域变化可以使用动画效果）

380
00:19:19,693 --> 0:19:21,862
我会提到区域更改可以使用动画效果

381
00:19:21,929 --> 0:19:24,765
因此你可以提供一个很好的动画效果

382
00:19:24,831 --> 0:19:27,000
或者你也可以立即设置区域

383
00:19:29,203 --> 0:19:32,439
这些事情 比如改变地区

384
00:19:32,773 --> 0:19:35,809
改变中心等

385
00:19:35,876 --> 0:19:39,213
但它们也可以由用户的交互来完成

386
00:19:39,279 --> 0:19:42,716
你希望能够对这些交互作出响应

387
00:19:43,050 --> 0:19:44,751
map对象…

388
00:19:45,752 --> 0:19:48,922
允许你监听用户事件

389
00:19:49,223 --> 0:19:51,959
例如区域更改事件

390
00:19:52,259 --> 0:19:53,961
因为这可以用动画来表示

391
00:19:54,094 --> 0:19:58,332
还有诸如滚动 缩放和旋转等手势的

392
00:19:58,465 --> 0:20:01,301
我们遵循DOM事件处理模型

393
00:19:58,465 --> 0:20:01,301
我们遵循DOM事件处理模型

394
00:20:01,368 --> 0:20:03,403
所以你会见到这些熟悉的方法

395
00:20:03,470 --> 0:20:05,906
如addEventListener

396
00:20:06,206 --> 0:20:07,341
其参数为事件的名称

397
00:20:07,407 --> 0:20:11,044
以及一个包含事件参数的

398
00:20:11,111 --> 0:20:12,045
举个例子

399
00:20:12,112 --> 0:20:15,883
如果我想每当用户打开不同的区域时

400
00:20:15,949 --> 0:20:18,318
都用一些新信息刷新我的地图

401
00:20:18,385 --> 0:20:20,921
我可以监听

402
00:20:21,121 --> 0:20:24,658
这会让我知道

403
00:20:24,725 --> 0:20:26,960
现在我可以使用该地图的区域

404
00:20:27,027 --> 0:20:32,266
来计算我想在此阶段显示哪些信息

405
00:20:34,735 --> 0:20:39,473
现在我们知道了如何设置地图

406
00:20:39,706 --> 0:20:41,542
我们可以用注释和叠层来做到这一点

407
00:20:41,608 --> 0:20:43,010
我将从注释开始

408
00:20:43,076 --> 0:20:45,345
MapKit JS提供了三种注释

409
00:20:45,412 --> 0:20:47,614
第一种你刚才已经看到过

410
00:20:47,681 --> 0:20:49,483
它是标记注释

411
00:20:50,517 --> 0:20:51,852
你可使用图像或DOM元素

412
00:20:51,919 --> 0:20:55,989
来自定义注释

413
00:20:56,256 --> 0:20:57,791
所提供的信息更多

414
00:20:57,858 --> 0:21:01,328
其中DOM元素注释将

415
00:20:57,858 --> 0:21:01,328
其中DOM元素注释将

416
00:21:01,762 --> 0:21:02,729
（标记注释）

417
00:21:02,796 --> 0:21:03,697
标记注释

418
00:21:03,764 --> 0:21:06,867
是MapKit JS提供的

419
00:21:06,934 --> 0:21:12,005
因为它们内置了丰富的交互功能

420
00:21:12,673 --> 0:21:14,107
并且还有很多样式可供选择

421
00:21:14,174 --> 0:21:16,109
因此它们与你在iOS上

422
00:21:16,176 --> 0:21:18,245
看到的标记注释类似

423
00:21:19,079 --> 0:21:22,216
他们有一个选中和取消选中的

424
00:21:22,449 --> 0:21:25,619
并且它们会自动隐藏底层的地图标签

425
00:21:25,886 --> 0:21:26,753
如我们刚才所见

426
00:21:26,820 --> 0:21:28,622
所以这里当我选中我的注释时

427
00:21:28,922 --> 0:21:34,194
车站出口的标签将会隐藏

428
00:21:34,261 --> 0:21:36,530
（外观自动适应当前的渲染模式）

429
00:21:36,597 --> 0:21:38,365
标记注释…

430
00:21:39,199 --> 0:21:43,136
标记注释的外观也会自动适应

431
00:21:43,370 --> 0:21:44,304
MapKit JS为

432
00:21:44,371 --> 0:21:46,673
你的地图选择的渲染模式

433
00:21:46,940 --> 0:21:48,208
我们已经看到

434
00:21:48,275 --> 0:21:51,945
当使用客户端渲染模式

435
00:21:52,012 --> 0:21:53,780
我们可以隐藏标签

436
00:21:53,847 --> 0:21:55,916
我们也可以显示你在地图上的

437
00:21:55,983 --> 0:21:57,417
注释的标题和副标题

438
00:21:57,484 --> 0:22:00,020
这就是左侧显示的内容

439
00:21:57,484 --> 0:22:00,020
这就是左侧显示的内容

440
00:22:00,754 --> 0:22:04,858
如果你使用服务器端渲染

441
00:22:04,925 --> 0:22:05,959
而且无法隐藏它们

442
00:22:06,026 --> 0:22:07,961
如果你看下右边的地图

443
00:22:08,028 --> 0:22:11,665
我们可以看到更多的标签

444
00:22:11,765 --> 0:22:15,602
因此为了能够清晰地显示我们的注释

445
00:22:15,802 --> 0:22:19,606
我们将只显示注释气球

446
00:22:19,840 --> 0:22:23,377
我们仍然可以通过选中标注泡泡

447
00:22:23,443 --> 0:22:26,413
来看到这些注释的标题和副标题

448
00:22:26,480 --> 0:22:27,648
就像在这个例子中一样

449
00:22:27,714 --> 0:22:28,715
自定义注释

450
00:22:28,782 --> 0:22:31,885
也会使用这种标注泡泡

451
00:22:31,952 --> 0:22:33,654
来显示其标题和副标题

452
00:22:35,322 --> 0:22:39,226
最后 标记注释提供了很多样式选项

453
00:22:39,560 --> 0:22:41,728
这是标记注释的默认值

454
00:22:41,795 --> 0:22:44,364
你可以使用坐标和一些属性

455
00:22:44,698 --> 0:22:46,900
如标题和副标题

456
00:22:46,967 --> 0:22:50,437
这是基本的默认渲染

457
00:22:50,537 --> 0:22:53,440
你将看到一个字形图像

458
00:22:53,507 --> 0:22:55,676
并且它呈现红色

459
00:22:56,977 --> 0:23:00,214
你可以将该颜色更改为

460
00:22:56,977 --> 0:23:00,214
你可以将该颜色更改为

461
00:23:00,280 --> 0:23:03,550
在这里我用了一个绿色的气球

462
00:23:03,784 --> 0:23:05,986
你还可以更改字形的颜色

463
00:23:06,086 --> 0:23:07,921
字形只能有一种颜色

464
00:23:08,121 --> 0:23:11,124
在这个例子中

465
00:23:11,191 --> 0:23:12,359
切换为黄色

466
00:23:13,894 --> 0:23:15,462
你可以更改字形的图像

467
00:23:15,529 --> 0:23:18,432
将MapKit JS

468
00:23:18,498 --> 0:23:21,401
更改为你可以提供的任何光栅图像

469
00:23:21,468 --> 0:23:23,370
在这个例子中 我提供了这个图像

470
00:23:23,604 --> 0:23:26,106
你可以为图片提供多个来源

471
00:23:26,173 --> 0:23:27,808
以适应不同的像素比例

472
00:23:27,875 --> 0:23:29,409
（自定义以适应你网站的

473
00:23:29,476 --> 0:23:32,679
当注释被选中时 它变得更大

474
00:23:32,746 --> 0:23:35,582
因此你有更多空间

475
00:23:35,649 --> 0:23:37,584
因此在这个例子中

476
00:23:37,651 --> 0:23:38,852
一个选中字形图像

477
00:23:39,086 --> 0:23:41,655
它与原始图像不同

478
00:23:43,390 --> 0:23:44,491
最后 除了图像

479
00:23:44,558 --> 0:23:46,994
你还可以使用某些文字来更改字形

480
00:23:47,261 --> 0:23:51,164
我们建议你使用非常短的字符串

481
00:23:51,231 --> 0:23:52,833
比如一到三个字符

482
00:23:53,166 --> 0:23:55,636
在这个例子中

483
00:23:55,969 --> 0:23:58,639
当字形文字和字形图像都被指定时

484
00:23:58,705 --> 0:24:00,874
将显示字形文字

485
00:23:58,705 --> 0:24:00,874
将显示字形文字

486
00:24:01,508 --> 0:24:04,545
现在我们知道了如何显示标记注释

487
00:24:04,611 --> 0:24:07,281
我们可以疯狂的在地图上

488
00:24:07,681 --> 0:24:11,552
这是在巴黎搜索咖啡馆和酒吧的结果

489
00:24:11,618 --> 0:24:15,155
我为它们设置了不同的样式

490
00:24:15,522 --> 0:24:18,859
但问题是在同一区域内

491
00:24:18,926 --> 0:24:20,994
有非常密集的注释

492
00:24:21,895 --> 0:24:24,131
幸运的是我们在

493
00:24:24,198 --> 0:24:25,866
来处理这种混乱

494
00:24:26,400 --> 0:24:30,170
第一种是在注释上设置

495
00:24:30,704 --> 0:24:33,240
这意味着当两个注释相冲突时

496
00:24:33,307 --> 0:24:35,375
displayPriority

497
00:24:35,442 --> 0:24:36,577
其为一个数字

498
00:24:37,144 --> 0:24:41,648
将会隐藏具有

499
00:24:41,715 --> 0:24:42,883
（注释冲突）

500
00:24:42,950 --> 0:24:44,751
因此在这个例子中

501
00:24:44,818 --> 0:24:45,919
已被隐藏出去

502
00:24:45,986 --> 0:24:48,822
当你放大和缩小时

503
00:24:48,889 --> 0:24:53,126
比如放大地图可以让你发现更多注释

504
00:24:53,427 --> 0:24:55,429
当它们具有相同的

505
00:24:55,596 --> 0:24:59,399
我们将使用屏幕底部显示的那个

506
00:25:00,267 --> 0:25:01,902
来作为优先级最高的注释

507
00:25:01,969 --> 0:25:03,070
（注释群集）

508
00:25:03,136 --> 0:25:05,639
处理混乱的另一种方法是使用群集

509
00:25:05,706 --> 0:25:07,407
而不是使用这些显示优先级

510
00:25:07,608 --> 0:25:11,411
在这种情况下

511
00:25:11,478 --> 0:25:14,014
这是一个可以

512
00:25:14,281 --> 0:25:15,482
且是一个简单的字符串

513
00:25:15,816 --> 0:25:19,920
当两个注释冲突

514
00:25:19,987 --> 0:25:23,323
它们将被替换为

515
00:25:23,390 --> 0:25:26,994
当然 如果两个以上的注释相冲突

516
00:25:27,261 --> 0:25:28,228
因此在这个例子中

517
00:25:28,295 --> 0:25:31,899
我们看到一些注释可以单独显示

518
00:25:31,965 --> 0:25:33,934
因为它们没有邻居

519
00:25:34,368 --> 0:25:36,770
但在中心的密集区域

520
00:25:36,870 --> 0:25:40,174
我们将几个注释聚集在一起

521
00:25:40,941 --> 0:25:43,944
创建群集时

522
00:25:44,011 --> 0:25:44,978
我们使用字形

523
00:25:45,045 --> 0:25:47,447
来显示群集中有多少个注释

524
00:25:47,714 --> 0:25:52,886
你还可以更改群集的外观

525
00:25:52,953 --> 0:25:57,057
通过指定新的样式或新的注释类型

526
00:25:57,658 --> 0:26:01,862
现在我们将通过一个小演示

527
00:25:57,658 --> 0:26:01,862
现在我们将通过一个小演示

528
00:26:01,929 --> 0:26:03,664
（标记注释演示）

529
00:26:06,533 --> 0:26:07,634
在这个演示中

530
00:26:09,303 --> 0:26:11,104
它应该在这里显示

531
00:26:11,171 --> 0:26:12,105
（嘿！是大脚怪！）

532
00:26:12,172 --> 0:26:13,774
这个演示中

533
00:26:14,374 --> 0:26:16,677
我们要显示的数据

534
00:26:17,377 --> 0:26:20,480
是在这个地区发生的大脚怪目击事件

535
00:26:20,714 --> 0:26:23,851
所以在本次演讲之后

536
00:26:23,917 --> 0:26:26,420
当会议结束以后

537
00:26:26,520 --> 0:26:29,923
你可以去探索北加州的树林

538
00:26:29,990 --> 0:26:31,458
来看看能不能找到大脚怪

539
00:26:33,660 --> 0:26:35,262
我创建了一张地图

540
00:26:36,063 --> 0:26:39,333
我已经按照刚才幻灯片中

541
00:26:39,399 --> 0:26:41,869
所显示的方式进行了初始化

542
00:26:43,203 --> 0:26:44,037
我所做的是

543
00:26:44,104 --> 0:26:49,977
我收集了大脚怪目击事件的清单

544
00:26:50,377 --> 0:26:52,145
包括他们的位置

545
00:26:52,212 --> 0:26:56,984
它们发生的年份

546
00:26:57,384 --> 0:26:58,418
我想要做的是…

547
00:26:58,485 --> 0:27:01,154
我想要使用这些注释并在地图上

548
00:26:58,485 --> 0:27:01,154
我想要使用这些注释并在地图上

549
00:27:01,221 --> 0:27:02,422
用标记注释来显示它们

550
00:27:02,489 --> 0:27:07,261
让我创建一个函数来将

551
00:27:07,327 --> 0:27:10,697
转换为一个标记注释

552
00:27:12,099 --> 0:27:15,302
所以对于一个目击事件

553
00:27:15,369 --> 0:27:17,871
用作标记注释的坐标

554
00:27:18,505 --> 0:27:20,774
这些目击事件还有其他一些属性

555
00:27:20,841 --> 0:27:24,444
例如目击年份

556
00:27:24,611 --> 0:27:27,214
这些数据来自

557
00:27:27,281 --> 0:27:30,584
大脚怪野外研究组织的数据库

558
00:27:30,717 --> 0:27:32,252
所以我会显示ID

559
00:27:32,319 --> 0:27:34,922
以便如果你有兴趣了解

560
00:27:34,988 --> 0:27:39,560
你可以查看该数据库并获取更多信息

561
00:27:39,927 --> 0:27:42,529
最后 我已经准备好

562
00:27:42,596 --> 0:27:45,532
通过使用这个坐标

563
00:27:46,266 --> 0:27:49,102
现在我知道了该如何

564
00:27:49,169 --> 0:27:50,404
设置目击事件的标记注释

565
00:27:50,470 --> 0:27:54,875
我现在要获取准备好的目击事件

566
00:27:56,310 --> 0:27:58,545
在这个目击清单中

567
00:27:58,779 --> 0:28:01,181
我会为其中每个目击事件

568
00:27:58,779 --> 0:28:01,181
我会为其中每个目击事件

569
00:28:02,783 --> 0:28:07,387
然后我会确保它们在地图上显示

570
00:28:07,754 --> 0:28:09,389
我的注释将显示在地图上

571
00:28:09,456 --> 0:28:12,259
我将使用showItems方法

572
00:28:12,326 --> 0:28:15,462
因为它不仅确保项目可见

573
00:28:15,529 --> 0:28:17,331
还会将它们添加到地图中

574
00:28:18,532 --> 0:28:20,133
由于我正在做一个网页

575
00:28:20,200 --> 0:28:22,870
因此我还可以在我的页面上

576
00:28:22,936 --> 0:28:25,339
比如这个地区有多少次目击

577
00:28:26,507 --> 0:28:29,443
让我保存它

578
00:28:30,577 --> 0:28:32,012
并重新加载

579
00:28:33,313 --> 0:28:36,316
我现在看到一张

580
00:28:36,650 --> 0:28:38,485
所有这些注释都是目击事件

581
00:28:38,552 --> 0:28:41,121
我们遇到了我刚才强调的问题

582
00:28:41,188 --> 0:28:43,257
这就是在这个公园地区

583
00:28:43,323 --> 0:28:47,027
我可以看到很多目击事件发生

584
00:28:47,160 --> 0:28:48,328
即使我放大

585
00:28:48,395 --> 0:28:50,464
这仍然很混乱

586
00:28:50,697 --> 0:28:52,466
所以我会使用注释上的

587
00:28:52,533 --> 0:28:56,904
显示优先级属性清理它

588
00:28:58,138 --> 0:29:00,407
为了替显示优先级选择一个指标

589
00:28:58,138 --> 0:29:00,407
为了替显示优先级选择一个指标

590
00:29:00,474 --> 0:29:05,479
我将使用的是这些目击中的

591
00:29:05,679 --> 0:29:07,748
即是否是清晰的目击

592
00:29:07,814 --> 0:29:09,783
也就是是否有人真的看到了大脚怪

593
00:29:10,117 --> 0:29:13,854
还是说他们只是听到或看到

594
00:29:13,954 --> 0:29:15,455
现在我有了这个明确的指标

595
00:29:15,522 --> 0:29:17,991
我将用它来设置我的显示优先级

596
00:29:18,325 --> 0:29:19,793
显示优先级是一个数字

597
00:29:19,860 --> 0:29:22,162
并且这些优先级可能非常随意

598
00:29:22,229 --> 0:29:26,066
因此我们提供预定义的值

599
00:29:26,133 --> 0:29:29,136
它表示你的注释必须

600
00:29:29,236 --> 0:29:31,672
除此以外也有

601
00:29:31,839 --> 0:29:35,142
因此当目击清晰时

602
00:29:35,275 --> 0:29:37,978
否则我会设置

603
00:29:38,679 --> 0:29:40,948
最后 我还会编码这些信息

604
00:29:41,014 --> 0:29:42,382
作为我的注释的颜色

605
00:29:42,449 --> 0:29:44,518
以便用户更好地理解

606
00:29:44,585 --> 0:29:47,421
为什么有些注释会显示而有些不会

607
00:29:47,754 --> 0:29:50,691
当它是棕色时

608
00:29:50,757 --> 0:29:52,693
当它是绿色时

609
00:29:53,260 --> 0:29:55,262
我们来看看它的区别

610
00:29:56,797 --> 0:29:59,333
现在你可以看到地图更简洁了

611
00:29:59,533 --> 0:30:02,503
因为所有的冲突都已解决

612
00:29:59,533 --> 0:30:02,503
因为所有的冲突都已解决

613
00:30:02,569 --> 0:30:05,172
你可以看到一些注释是棕色的

614
00:30:05,239 --> 0:30:06,406
这些都是清晰的目击

615
00:30:06,473 --> 0:30:07,474
它们可能是那些

616
00:30:07,541 --> 0:30:10,944
应该最先访问的最有趣的目击事件

617
00:30:12,513 --> 0:30:14,615
但是你也可以看到

618
00:30:14,982 --> 0:30:17,518
会有新的目击事件显示出来

619
00:30:17,684 --> 0:30:19,653
因此你的用户可以浏览地图

620
00:30:19,720 --> 0:30:24,525
并找出他们希望看到大脚怪的地方

621
00:30:25,425 --> 0:30:28,161
我将通过为地图添加另一条信息

622
00:30:29,029 --> 0:30:31,131
来结束本演示

623
00:30:31,298 --> 0:30:32,699
我会改变字形

624
00:30:33,300 --> 0:30:34,368
为…

625
00:30:35,302 --> 0:30:37,905
我准备好的大脚怪的图标

626
00:30:37,971 --> 0:30:39,907
这是一个简单的PNG图像

627
00:30:41,909 --> 0:30:43,810
我将其用于清晰的目击

628
00:30:44,411 --> 0:30:47,047
如果目击不太清晰

629
00:30:47,114 --> 0:30:51,652
我将设置字形文本为一个问号

630
00:30:52,219 --> 0:30:53,520
使其更加明确

631
00:30:55,122 --> 0:30:57,958
现在我可以看到

632
00:30:58,592 --> 0:31:01,929
这些值得怀疑的目击上有一个问号

633
00:30:58,592 --> 0:31:01,929
这些值得怀疑的目击上有一个问号

634
00:31:02,262 --> 0:31:05,032
而对大脚怪的清晰目击事件

635
00:31:05,165 --> 0:31:06,834
将会有大脚怪的图标

636
00:31:09,002 --> 0:31:11,371
这是我们的第一个演示

637
00:31:12,673 --> 0:31:13,640
谢谢

638
00:31:14,875 --> 0:31:16,109
（演示回顾）

639
00:31:16,176 --> 0:31:17,010
所以…

640
00:31:17,511 --> 0:31:21,682
在本演示中 我们展示了

641
00:31:21,748 --> 0:31:22,983
创建标记注释

642
00:31:23,483 --> 0:31:27,588
如何设置注释的显示优先级

643
00:31:28,222 --> 0:31:31,425
以及如何使用彩色字形图像

644
00:31:31,491 --> 0:31:35,596
来将我们的信息转换到地图上

645
00:31:36,129 --> 0:31:37,364
（图片注释）

646
00:31:37,431 --> 0:31:40,467
有时标记注释非常方便

647
00:31:40,534 --> 0:31:43,937
但可能不是你想要在地图上

648
00:31:44,004 --> 0:31:46,507
例如 如果你想使用公司的徽标

649
00:31:46,573 --> 0:31:48,675
它有多种颜色

650
00:31:48,742 --> 0:31:52,980
那么你不能使用字形图像

651
00:31:53,480 --> 0:31:55,282
有时候注释的形状

652
00:31:55,349 --> 0:31:57,551
并非是你想要的

653
00:31:57,618 --> 0:31:58,452
所以在这种情况下

654
00:31:58,519 --> 0:32:02,189
你可以提供图像来表示你的注释

655
00:31:58,519 --> 0:32:02,189
你可以提供图像来表示你的注释

656
00:32:02,256 --> 0:32:04,491
在这个例子中

657
00:32:05,225 --> 0:32:08,195
来标记我最近去过的地方

658
00:32:09,496 --> 0:32:12,199
我可以使用这些光栅图像进行注释

659
00:32:12,266 --> 0:32:14,735
标题和副标题将显示在标注泡泡中

660
00:32:14,801 --> 0:32:17,604
就像服务器端渲染的标记注释一样

661
00:32:17,871 --> 0:32:19,606
为了创建一个图像注释

662
00:32:19,673 --> 0:32:22,509
这与创建标记注释非常相似

663
00:32:22,609 --> 0:32:25,045
但必须提供附加属性

664
00:32:25,112 --> 0:32:27,114
即图像的URL

665
00:32:27,281 --> 0:32:30,617
在这里你可以看到

666
00:32:31,518 --> 0:32:32,653
（自定义注释）

667
00:32:32,719 --> 0:32:35,656
表示注释的另一种方式

668
00:32:35,722 --> 0:32:37,891
是使用经典的图钉

669
00:32:38,358 --> 0:32:41,595
而且图钉通常有许多不同的颜色

670
00:32:41,662 --> 0:32:43,830
问题是如果我想提供

671
00:32:43,897 --> 0:32:44,998
很多不同的颜色

672
00:32:45,065 --> 0:32:47,367
我需要提供很多不同的图像

673
00:32:47,601 --> 0:32:49,603
这很快就会变得无法管理

674
00:32:49,670 --> 0:32:52,940
因此我可以使用自定义注释

675
00:32:53,006 --> 0:32:54,408
在这种情况下

676
00:32:54,474 --> 0:32:58,278
而是使用任何DOM元素

677
00:32:58,545 --> 0:33:00,147
（元素是根据需求创建的）

678
00:32:58,545 --> 0:33:00,147
（元素是根据需求创建的）

679
00:33:00,214 --> 0:33:03,717
这些元素是根据你的注释需求创建的

680
00:33:03,851 --> 0:33:04,918
我们来看一个例子

681
00:33:04,985 --> 0:33:06,386
这里如果我想

682
00:33:07,754 --> 0:33:10,924
在我的地图上显示任意颜色的图钉

683
00:33:11,692 --> 0:33:14,962
我将用坐标和选项作为参数

684
00:33:15,028 --> 0:33:17,030
第三个参数是一个函数

685
00:33:17,097 --> 0:33:19,566
它将返回该注释的DOM元素

686
00:33:19,867 --> 0:33:22,069
在这个例子中

687
00:33:22,302 --> 0:33:24,705
我创建一个canvas元素

688
00:33:24,771 --> 0:33:27,074
我在该canvas元素上

689
00:33:27,140 --> 0:33:30,043
我将图钉头的颜色改成我想要的颜色

690
00:33:30,110 --> 0:33:31,211
然后返回这个canvas

691
00:33:31,278 --> 0:33:33,747
这就是地图上为此注释

692
00:33:33,814 --> 0:33:34,948
显示的画布

693
00:33:37,651 --> 0:33:40,621
这些是你可以使用的三种注释

694
00:33:40,687 --> 0:33:44,591
但有时候你想要展示的

695
00:33:44,658 --> 0:33:47,060
或一组单个位置

696
00:33:47,127 --> 0:33:50,864
有时你想要在地图上显示完整的区域

697
00:33:50,931 --> 0:33:52,065
（叠层）

698
00:33:52,132 --> 0:33:53,467
要做到这一点

699
00:33:53,534 --> 0:33:56,336
我们提供三种不同的叠层

700
00:33:57,070 --> 0:33:59,640
以下是一些如何使用它们的例子

701
00:34:00,440 --> 0:34:01,542
使用圆形叠层

702
00:34:01,608 --> 0:34:05,212
你可以显示从某个点开始的所有距离

703
00:34:05,279 --> 0:34:08,348
使用折线叠层

704
00:34:08,715 --> 0:34:13,085
你可以使用多边形叠层

705
00:34:13,353 --> 0:34:16,422
来突出显示地理区域 例如州

706
00:34:16,489 --> 0:34:18,125
国家或城市的边界等等

707
00:34:18,192 --> 0:34:19,393
（圆形叠层）

708
00:34:19,458 --> 0:34:22,029
这里是一个圆形叠层的例子

709
00:34:22,295 --> 0:34:23,996
现在这是布鲁塞尔

710
00:34:24,264 --> 0:34:27,167
并且我把我的地图的中心

711
00:34:27,768 --> 0:34:30,938
它在城市的正中心

712
00:34:31,004 --> 0:34:33,273
这是一个非常适合逛街的地方

713
00:34:33,473 --> 0:34:39,045
通过使用围绕中心点的

714
00:34:39,112 --> 0:34:41,215
我可以看到步行距离

715
00:34:41,380 --> 0:34:44,585
这里我使用坐标创建了叠层

716
00:34:44,650 --> 0:34:48,155
你需要传给圆形叠层的第二个参数

717
00:34:48,222 --> 0:34:50,023
是以米为单位的半径

718
00:34:50,090 --> 0:34:52,592
所以在这里 每个叠层都有一个半径

719
00:34:52,659 --> 0:34:55,295
从400米开始每次增加400米

720
00:34:55,362 --> 0:34:57,063
即400 800等

721
00:34:57,631 --> 0:35:00,067
我们可以看到右边有一个

722
00:34:57,631 --> 0:35:00,067
我们可以看到右边有一个

723
00:35:00,133 --> 0:35:03,203
漫画艺术博物馆

724
00:35:03,270 --> 0:35:04,238
这听起来很有趣

725
00:35:04,304 --> 0:35:08,909
它看起来可能在

726
00:35:08,976 --> 0:35:10,711
即大约10到15分钟的步行路程

727
00:35:11,979 --> 0:35:13,947
我可以用叠层做的一件重要的事

728
00:35:14,014 --> 0:35:15,449
是我也可以设计它们的样式

729
00:35:16,116 --> 0:35:19,553
所以在这里

730
00:35:19,620 --> 0:35:21,788
我可以使用

731
00:35:22,389 --> 0:35:24,458
它有几个属性

732
00:35:24,525 --> 0:35:27,327
如线宽 线条和笔触颜色

733
00:35:27,394 --> 0:35:29,663
它也可以是任何CSS颜色

734
00:35:29,930 --> 0:35:34,935
默认情况下圆形叠层用蓝色填充

735
00:35:35,169 --> 0:35:37,104
但在这个例子中

736
00:35:37,171 --> 0:35:39,673
所以我将fillColor

737
00:35:41,542 --> 0:35:45,345
我决定我想去参观这个漫画博物馆

738
00:35:45,612 --> 0:35:47,314
正如我们将要展示的那样

739
00:35:47,381 --> 0:35:51,518
MapKit JS可以为你提供

740
00:35:51,585 --> 0:35:52,619
和驾车路线的服务

741
00:35:52,786 --> 0:35:54,788
在这个例子中 我向它查询了

742
00:35:54,988 --> 0:35:58,058
从我所在之处Manneken Pis

743
00:35:58,926 --> 0:36:00,494
我得到的结果是

744
00:35:58,926 --> 0:36:00,494
我得到的结果是

745
00:36:00,561 --> 0:36:03,597
此地图上使用折线叠层表示的路线

746
00:36:03,664 --> 0:36:05,866
折线叠层是一个点列表

747
00:36:05,933 --> 0:36:09,269
它们都是相互关联的坐标

748
00:36:09,336 --> 0:36:13,106
我还可以调整它们的样式

749
00:36:13,173 --> 0:36:16,510
或粗线宽

750
00:36:18,478 --> 0:36:20,547
最后一个例子是多边形叠层

751
00:36:20,614 --> 0:36:23,350
这对数据可视化之类的用例非常有用

752
00:36:23,417 --> 0:36:25,252
这里我有一张美国地图

753
00:36:25,319 --> 0:36:28,322
其中每个州都是它自己的叠层

754
00:36:28,522 --> 0:36:31,925
多边形叠层也由一系列点定义

755
00:36:31,992 --> 0:36:33,427
在这个例子中

756
00:36:34,962 --> 0:36:36,563
叠层形状是封闭且被填充的

757
00:36:36,630 --> 0:36:37,931
（多边形叠层）

758
00:36:37,998 --> 0:36:40,701
你甚至可以指定点列表

759
00:36:40,767 --> 0:36:42,503
来实现更复杂的方案

760
00:36:42,569 --> 0:36:44,805
比如说 如果你有飞地和外飞地

761
00:36:44,872 --> 0:36:48,008
这通常是真实地理区域的情况

762
00:36:49,376 --> 0:36:50,477
注释和叠层

763
00:36:50,544 --> 0:36:54,314
也可以添加一些额外的信息

764
00:36:54,381 --> 0:36:56,183
即这个data属性

765
00:36:56,450 --> 0:36:58,285
因此在这个例子中 我想展示

766
00:36:58,819 --> 0:37:01,588
美国每个州的人口

767
00:36:58,819 --> 0:37:01,588
美国每个州的人口

768
00:37:01,655 --> 0:37:03,290
我可以将其显示为一种颜色

769
00:37:03,991 --> 0:37:06,560
这让我对人口有一个大概的了解

770
00:37:06,627 --> 0:37:09,129
但我也可以添加一些额外的数据

771
00:37:09,196 --> 0:37:12,799
这样如果用户选中其中一个叠层

772
00:37:12,866 --> 0:37:14,735
在这个例子中是德克萨斯州

773
00:37:14,902 --> 0:37:19,006
我可以显示

774
00:37:20,140 --> 0:37:22,709
叠层可以被选中 就像注释一样

775
00:37:23,110 --> 0:37:24,511
（GEOJSON导入）

776
00:37:25,879 --> 0:37:29,082
为了显示叠层

777
00:37:29,149 --> 0:37:31,418
或所有的州

778
00:37:31,485 --> 0:37:33,620
我们需要大量的数据

779
00:37:33,687 --> 0:37:37,024
对于州来说

780
00:37:37,791 --> 0:37:40,794
所以将这些数据存入你的程序的

781
00:37:40,861 --> 0:37:42,296
是使用GeoJSON导入

782
00:37:42,362 --> 0:37:43,964
若你有一个GeoJSON数据文件

783
00:37:44,364 --> 0:37:47,067
你就可以使用

784
00:37:47,634 --> 0:37:49,436
注解和叠层会被创建

785
00:37:49,503 --> 0:37:52,472
在这个例子中

786
00:37:52,573 --> 0:37:55,943
其中有很多UFO目击事件

787
00:37:56,543 --> 0:37:58,445
这只是地图的一部分细节

788
00:37:58,512 --> 0:38:01,315
你可以看到有很多目击事件

789
00:37:58,512 --> 0:38:01,315
你可以看到有很多目击事件

790
00:38:02,349 --> 0:38:05,752
所有这些注释和叠层都是自动创建的

791
00:38:05,819 --> 0:38:09,523
它们当然也可以使用

792
00:38:09,990 --> 0:38:11,525
（响应用户交互）

793
00:38:11,592 --> 0:38:15,729
最后 这些注释和叠层

794
00:38:15,796 --> 0:38:17,531
可以被用户选中

795
00:38:17,698 --> 0:38:21,468
你想监听它们上的事件

796
00:38:21,802 --> 0:38:24,204
你可以监听选中和取消选中事件

797
00:38:24,271 --> 0:38:27,441
我们之前也看到过

798
00:38:27,608 --> 0:38:29,276
所以你也可以监听拖动事件

799
00:38:29,343 --> 0:38:32,513
这也使用了

800
00:38:32,579 --> 0:38:35,549
例如 你可以使用

801
00:38:36,049 --> 0:38:38,018
来监听地图中的选中事件

802
00:38:38,085 --> 0:38:42,155
它会告诉你注释或叠层何时被选中了

803
00:38:42,222 --> 0:38:44,525
我们将在演示中看到一个例子

804
00:38:46,059 --> 0:38:47,361
下一节是

805
00:38:47,494 --> 0:38:49,630
启用与服务的富交互

806
00:38:49,696 --> 0:38:52,599
对于本节

807
00:39:05,612 --> 0:39:08,882
MapKit JS

808
00:39:09,149 --> 0:39:11,752
地理编码 搜索和路线

809
00:39:12,619 --> 0:39:14,755
我将逐步介绍每一个例子

810
00:39:14,821 --> 0:39:17,257
但在此之前

811
00:39:18,759 --> 0:39:20,627
你可以以类似的方式使用这些服务

812
00:39:20,861 --> 0:39:22,029
它包括四个简单的步骤

813
00:39:22,462 --> 0:39:24,498
首先创建服务对象

814
00:39:25,065 --> 0:39:27,901
然后指定请求参数和选项

815
00:39:28,368 --> 0:39:29,670
然后你发出请求

816
00:39:30,137 --> 0:39:32,372
最后通过回调函数

817
00:39:32,439 --> 0:39:33,807
处理异步响应

818
00:39:34,608 --> 0:39:36,577
首先我们来谈谈地理编码器

819
00:39:36,977 --> 0:39:38,478
（地理编码）

820
00:39:38,545 --> 0:39:40,480
下面是一个如何使用

821
00:39:40,547 --> 0:39:42,316
它包含两个方法

822
00:39:42,716 --> 0:39:44,251
lookup和

823
00:39:44,585 --> 0:39:47,120
如果你有一个地址或位置

824
00:39:47,187 --> 0:39:48,889
而你想找到坐标

825
00:39:48,956 --> 0:39:49,990
或者反过来

826
00:39:50,057 --> 0:39:52,459
你有一个坐标

827
00:39:53,994 --> 0:39:56,263
第一步是创建你的对象

828
00:39:57,664 --> 0:40:01,301
你可以向其提供一个可选的

829
00:39:57,664 --> 0:40:01,301
你可以向其提供一个可选的

830
00:40:01,668 --> 0:40:05,072
这将允许你为地理编码器

831
00:40:05,339 --> 0:40:07,708
这在存在同名地方

832
00:40:07,774 --> 0:40:10,110
但处于不同位置的情况下很有用

833
00:40:10,677 --> 0:40:13,313
例如 如果你在此处使用地理编码器

834
00:40:13,380 --> 0:40:16,450
你最有可能得到

835
00:40:16,517 --> 0:40:18,285
而非澳大利亚布里斯班

836
00:40:20,020 --> 0:40:21,588
接下来你需要构建请求

837
00:40:21,722 --> 0:40:23,724
我们在这里使用这个会议中心

838
00:40:25,192 --> 0:40:26,927
接下来你需要处理响应

839
00:40:27,528 --> 0:40:28,762
正如我们之前提到的

840
00:40:28,829 --> 0:40:32,533
地理编码器可以轻松用于

841
00:40:32,633 --> 0:40:35,202
所以我们这里在地图上

842
00:40:37,838 --> 0:40:40,707
我们在这里有一个反向查找的例子

843
00:40:40,774 --> 0:40:41,875
其中我们有一个坐标

844
00:40:41,942 --> 0:40:44,011
我们想找到这个地方的地址

845
00:40:46,046 --> 0:40:47,447
这就是地理编码器

846
00:40:47,781 --> 0:40:50,918
接下来是服务上下文

847
00:40:51,185 --> 0:40:52,186
正如我之前提到的

848
00:40:52,252 --> 0:40:55,022
你可以提供一个

849
00:40:55,088 --> 0:40:58,292
你也可以提供搜索的坐标和区域

850
00:40:58,792 --> 0:41:02,262
这对为你的用户提供

851
00:40:58,792 --> 0:41:02,262
这对为你的用户提供

852
00:41:03,096 --> 0:41:06,934
这就是存在同名

853
00:41:07,000 --> 0:41:07,968
但不同地方的情况

854
00:41:08,035 --> 0:41:10,771
或者你可以将最近的

855
00:41:10,838 --> 0:41:11,972
（服务上下文）

856
00:41:12,039 --> 0:41:13,140
（搜索）

857
00:41:13,207 --> 0:41:15,976
以下是如何使用搜索服务的示例

858
00:41:16,577 --> 0:41:19,513
这是一个在用户附近

859
00:41:20,814 --> 0:41:23,150
首先你创建你的服务对象

860
00:41:25,018 --> 0:41:28,922
然后使用“coffee”

861
00:41:28,989 --> 0:41:30,657
你也可以做一些更具体的事情

862
00:41:30,724 --> 0:41:33,627
比如提供咖啡店的具体名称

863
00:41:35,996 --> 0:41:37,631
然后你可以处理结果

864
00:41:38,899 --> 0:41:41,401
这可以使用注释轻松显示

865
00:41:41,468 --> 0:41:44,371
因为有时它返回多个结果

866
00:41:44,571 --> 0:41:46,807
你也可以使用坐标以及标题

867
00:41:46,874 --> 0:41:49,142
来填充注释的字段

868
00:41:51,044 --> 0:41:53,514
最后我们使用

869
00:41:53,580 --> 0:41:56,183
同时添加并显示该注释

870
00:41:58,519 --> 0:42:00,354
如果请求中包含

871
00:41:58,519 --> 0:42:00,354
如果请求中包含

872
00:42:00,420 --> 0:42:02,656
你想要发送的完整查询

873
00:42:02,723 --> 0:42:05,926
但是如果你想要一个

874
00:42:06,159 --> 0:42:08,395
你就可以使用

875
00:42:08,462 --> 0:42:09,563
（搜索自动补全）

876
00:42:09,630 --> 0:42:10,697
通过使用搜索自动补全功能

877
00:42:10,764 --> 0:42:14,668
你可以向服务提供部分查询字段

878
00:42:14,735 --> 0:42:17,004
并提供建议来让你的用户

879
00:42:17,070 --> 0:42:18,472
少输入一些字符

880
00:42:18,539 --> 0:42:20,841
你随后可以使用

881
00:42:22,442 --> 0:42:23,377
（路线）

882
00:42:23,443 --> 0:42:25,245
最后一项服务是查找路线

883
00:42:27,314 --> 0:42:31,084
与其他服务类似

884
00:42:32,019 --> 0:42:35,689
你可以选择提供一种语言

885
00:42:35,956 --> 0:42:37,457
返回路线步骤

886
00:42:38,992 --> 0:42:40,460
如果你不提供语言

887
00:42:40,694 --> 0:42:43,263
提供给MapKit

888
00:42:43,330 --> 0:42:44,264
将被使用

889
00:42:44,364 --> 0:42:47,167
如果那也没有提供

890
00:42:47,234 --> 0:42:48,168
将被使用

891
00:42:50,037 --> 0:42:52,873
然后使用两个必填字段构建你的请求

892
00:42:52,940 --> 0:42:54,641
即origin

893
00:42:54,975 --> 0:42:58,178
它们可以是坐标 地址或地点

894
00:43:00,147 --> 0:43:03,050
默认情况下 交通工具类型是汽车

895
00:43:03,150 --> 0:43:05,385
你可使用Transport枚举

896
00:43:05,452 --> 0:43:06,987
步行路线

897
00:43:07,287 --> 0:43:09,890
我们不会这样做

898
00:43:10,157 --> 0:43:12,292
但我们会使用

899
00:43:12,659 --> 0:43:15,562
你可以使用它为用户

900
00:43:15,696 --> 0:43:18,465
这样我们可以显示不同的路线

901
00:43:18,532 --> 0:43:20,834
而不是默认的最佳路线

902
00:43:22,870 --> 0:43:26,306
最后 你可以在地图上显示你的结果

903
00:43:26,406 --> 0:43:29,443
这里我们使用了折线叠层

904
00:43:29,543 --> 0:43:32,880
你还会得到一组路线步骤以及距离

905
00:43:32,946 --> 0:43:33,981
和旅行时间

906
00:43:34,047 --> 0:43:35,315
以上这些就是服务

907
00:43:35,382 --> 0:43:36,717
现在你对它们更熟悉了

908
00:43:36,783 --> 0:43:38,552
Julien将回到台上演示

909
00:43:45,492 --> 0:43:46,593
谢谢 Melody

910
00:43:46,760 --> 0:43:48,996
我们将从刚才的地方继续

911
00:43:49,429 --> 0:43:52,599
我们将继续构建

912
00:43:53,867 --> 0:43:55,969
这个网页

913
00:43:57,137 --> 0:43:58,272
还缺少一样东西

914
00:43:58,438 --> 0:44:01,608
尽管它可以告诉我们当前在哪里

915
00:43:58,438 --> 0:44:01,608
尽管它可以告诉我们当前在哪里

916
00:44:02,209 --> 0:44:04,578
也可以告诉我们大脚怪的位置

917
00:44:04,645 --> 0:44:06,613
但它还没有告诉我们如何到达那里

918
00:44:07,514 --> 0:44:09,716
所以我想补充一些路线

919
00:44:10,250 --> 0:44:14,188
从我们当前的位置

920
00:44:14,621 --> 0:44:17,291
到这些大脚怪的位置

921
00:44:17,591 --> 0:44:21,161
我将用MapKit JS路线服务

922
00:44:21,562 --> 0:44:23,564
我将使用折线叠层来绘制这些路线

923
00:44:24,431 --> 0:44:28,702
但我需要做的第一件事

924
00:44:29,203 --> 0:44:31,772
我需要找到一种方式

925
00:44:31,839 --> 0:44:34,074
他们希望看到哪一个目击点

926
00:44:34,241 --> 0:44:35,142
所以…

927
00:44:35,843 --> 0:44:37,277
这一个被选中了

928
00:44:37,344 --> 0:44:40,113
这可能是用户想要看的 对吧

929
00:44:40,414 --> 0:44:42,282
接下来就是我们要做的事

930
00:44:42,482 --> 0:44:46,119
我们将使用地图的选中事件监听器

931
00:44:46,286 --> 0:44:49,489
来监听用户对注释的选择

932
00:44:49,690 --> 0:44:52,893
当某个注释被选中时

933
00:44:52,960 --> 0:44:56,396
如何去到那个特定的位置

934
00:44:56,530 --> 0:44:59,766
所以我们会请求路线并绘制它

935
00:45:00,100 --> 0:45:01,635
以便用户看到如何到达那里

936
00:45:01,702 --> 0:45:04,104
最后 我们还可以让他们选择

937
00:45:04,171 --> 0:45:06,406
路线服务返回的

938
00:45:06,473 --> 0:45:09,276
可选路线中的一条

939
00:45:09,743 --> 0:45:12,779
并显示有关这些路线的更多信息

940
00:45:13,380 --> 0:45:15,782
我们先来设置我们的事件监听器

941
00:45:17,751 --> 0:45:20,287
我们在地图上监听选中事件

942
00:45:20,687 --> 0:45:24,458
它告诉我们注释或叠层何时被选中了

943
00:45:24,825 --> 0:45:28,128
这是我收到的事件对象的属性

944
00:45:28,195 --> 0:45:30,130
如果annotation属性中

945
00:45:30,197 --> 0:45:32,566
那么这意味着这个注释刚刚被选中了

946
00:45:32,633 --> 0:45:37,538
因此在MapKit中

947
00:45:37,604 --> 0:45:39,139
所以这里就不会有歧义

948
00:45:39,206 --> 0:45:41,008
这是我们想要去的那个

949
00:45:41,241 --> 0:45:43,977
我将显示到该注释的路线

950
00:45:46,747 --> 0:45:49,316
显示我们的路线意味着

951
00:45:49,550 --> 0:45:54,388
让我们设置一个折线叠层

952
00:45:54,988 --> 0:45:59,226
首先我将定义一种

953
00:45:59,393 --> 0:46:03,197
设置不透明度和线宽

954
00:45:59,393 --> 0:46:03,197
设置不透明度和线宽

955
00:46:03,397 --> 0:46:06,500
默认的颜色是蓝色 这挺好的

956
00:46:06,567 --> 0:46:08,035
我们就用它

957
00:46:08,535 --> 0:46:10,571
就像我们之前写的函数

958
00:46:10,637 --> 0:46:14,007
来为引用对象按需创建注释一样

959
00:46:14,074 --> 0:46:16,610
这里我们将为路线按需创建叠层

960
00:46:17,177 --> 0:46:22,216
MapKit JS路线服务

961
00:46:22,482 --> 0:46:25,919
包含许多信息 其中包括一条路径

962
00:46:26,086 --> 0:46:30,591
这是你可以从A到B的步骤列表

963
00:46:30,958 --> 0:46:34,561
每个步骤列表本身都包含一个点列表

964
00:46:35,529 --> 0:46:38,098
如果你记得为了创建折线叠层

965
00:46:38,165 --> 0:46:39,433
我需要一个点列表

966
00:46:39,499 --> 0:46:41,301
所以既然我有一个点列表的列表

967
00:46:41,368 --> 0:46:43,403
我会将它缩减为一个列表

968
00:46:43,704 --> 0:46:47,341
以便我将所有路径步骤

969
00:46:48,075 --> 0:46:51,778
这是我想用来创建

970
00:46:51,845 --> 0:46:54,214
这是我刚刚定义的

971
00:46:54,548 --> 0:46:57,117
我希望我的叠层显示的样式

972
00:46:57,584 --> 0:47:02,155
然后我会让用户能够选择这个叠层

973
00:46:57,584 --> 0:47:02,155
然后我会让用户能够选择这个叠层

974
00:47:02,222 --> 0:47:06,593
我会将所有路线对象

975
00:47:06,660 --> 0:47:10,330
这样我就可以显示

976
00:47:11,865 --> 0:47:14,201
我知道如何绘制这些叠层

977
00:47:14,268 --> 0:47:17,371
现在我需要从服务中请求它们

978
00:47:17,971 --> 0:47:19,673
所以我们开始吧

979
00:47:21,475 --> 0:47:23,911
这有点长 但不是很糟糕

980
00:47:24,111 --> 0:47:26,547
我首先需要创建一个路线对象

981
00:47:26,747 --> 0:47:30,284
我将为路线使用当前语言

982
00:47:30,350 --> 0:47:31,818
所以使用默认就可以了

983
00:47:33,220 --> 0:47:36,690
现在当我请求一条

984
00:47:36,757 --> 0:47:39,393
或更确切地说

985
00:47:39,893 --> 0:47:41,428
我会先清理我的地图

986
00:47:41,495 --> 0:47:44,765
因为也许我之前已经展示过

987
00:47:45,499 --> 0:47:48,635
如果我查询地图的其他列表属性

988
00:47:48,702 --> 0:47:52,272
它会告诉我哪些叠层

989
00:47:52,339 --> 0:47:55,175
我就可以使用removeOverlays方法

990
00:47:55,242 --> 0:47:59,413
现在我有了一个干净的地图

991
00:47:59,880 --> 0:48:02,049
我正在构建请求

992
00:47:59,880 --> 0:48:02,049
我正在构建请求

993
00:48:02,115 --> 0:48:05,452
对于origin 我将这个位置硬编码进去

994
00:48:05,853 --> 0:48:10,591
我也可以设置坐标

995
00:48:10,657 --> 0:48:12,359
但这样更方便

996
00:48:12,693 --> 0:48:15,529
对于destination

997
00:48:15,596 --> 0:48:18,966
它们是作为参数给出的注释的坐标

998
00:48:20,000 --> 0:48:27,007
我想展示几条可能的路线

999
00:48:27,140 --> 0:48:30,644
所以我要确保requestAlternateRoutes属性

1000
00:48:32,446 --> 0:48:34,381
现在我的请求已经构建完毕

1001
00:48:35,148 --> 0:48:36,183
我可在directions服务上

1002
00:48:36,250 --> 0:48:39,419
调用route方法执行它

1003
00:48:42,723 --> 0:48:45,325
当你做这样的查询时可能会出错

1004
00:48:45,392 --> 0:48:48,262
所以我们必须确保当错误发生时

1005
00:48:48,328 --> 0:48:49,363
我们可以处理错误

1006
00:48:49,463 --> 0:48:51,665
在这个例子中 我会回退到

1007
00:48:51,732 --> 0:48:55,502
显示我创建的默认路线

1008
00:48:55,569 --> 0:48:58,172
所以如果我们看到一条直线

1009
00:49:00,007 --> 0:49:01,208
但让我们关注…

1010
00:49:01,275 --> 0:49:05,412
让我们乐观一点

1011
00:49:05,479 --> 0:49:08,282
在这种情况下

1012
00:49:08,348 --> 0:49:12,119
我将为它们中的每一个

1013
00:49:13,053 --> 0:49:16,323
我将在地图上使用

1014
00:49:16,523 --> 0:49:19,059
来添加这些路线

1015
00:49:19,126 --> 0:49:21,395
能够包含这些路线的区域来显示它们

1016
00:49:21,895 --> 0:49:26,466
让我介绍一下该方法的更多选项

1017
00:49:26,600 --> 0:49:28,001
第一个是animate

1018
00:49:28,101 --> 0:49:31,238
因为我想确保有一个流畅的动画

1019
00:49:31,305 --> 0:49:37,277
以从地图的当前区域过渡到

1020
00:49:38,545 --> 0:49:42,115
最后 我还将添加一些填充

1021
00:49:42,182 --> 0:49:45,652
而不是只将地图限制在路线周围

1022
00:49:46,987 --> 0:49:48,055
我现在已经准备好了

1023
00:49:49,723 --> 0:49:54,995
从本会议中心请求路线

1024
00:49:55,062 --> 0:49:56,763
让我们再次选中这个

1025
00:49:57,831 --> 0:50:00,334
现在我的注释已被选中

1026
00:49:57,831 --> 0:50:00,334
现在我的注释已被选中

1027
00:50:00,501 --> 0:50:02,169
请求也已经执行

1028
00:50:03,237 --> 0:50:05,272
我看到有三个不同的结果

1029
00:50:05,339 --> 0:50:08,909
这些路线的一部分是一样的

1030
00:50:09,843 --> 0:50:13,413
它们从我们现在的位置开始

1031
00:50:13,614 --> 0:50:14,781
所以我认为这是对的

1032
00:50:14,882 --> 0:50:16,517
是的 这看起来没错

1033
00:50:17,551 --> 0:50:19,653
我有三个结果

1034
00:50:19,953 --> 0:50:22,422
现在我可能有兴趣了解更多

1035
00:50:22,489 --> 0:50:25,759
关于行程时间和距离的差异

1036
00:50:25,959 --> 0:50:27,227
我可以通过选中来做到

1037
00:50:27,294 --> 0:50:29,696
但如果我选中一条路线

1038
00:50:29,763 --> 0:50:33,133
我的注释已被取消选择

1039
00:50:33,200 --> 0:50:35,502
因为一次只能有一个选中对象

1040
00:50:35,602 --> 0:50:37,671
这里的问题是

1041
00:50:39,106 --> 0:50:41,742
选中的叠层没有默认行为

1042
00:50:42,176 --> 0:50:43,777
所以我们来实现自己的

1043
00:50:43,844 --> 0:50:46,046
我们要做的是突出显示这些叠层

1044
00:50:46,113 --> 0:50:48,982
然后在侧栏中显示它们的信息

1045
00:50:49,650 --> 0:50:52,052
为了突出这些叠层

1046
00:50:52,586 --> 0:50:54,221
我将创建一个新的样式

1047
00:50:55,422 --> 0:50:56,757
用于突出显示叠层

1048
00:50:56,823 --> 0:51:00,194
让我们把它放在我的旧样式旁边

1049
00:50:56,823 --> 0:51:00,194
让我们把它放在我的旧样式旁边

1050
00:51:00,594 --> 0:51:02,563
此样式将保持相同的不透明度

1051
00:51:02,629 --> 0:51:05,699
我们让线变粗 并且设置为紫色

1052
00:51:05,766 --> 0:51:08,068
以使其更加明显

1053
00:51:10,070 --> 0:51:13,774
但是现在我们需要在叠层被选中后

1054
00:51:14,241 --> 0:51:19,279
幸运的是我已经有了一个

1055
00:51:20,881 --> 0:51:22,015
到目前为止

1056
00:51:22,082 --> 0:51:26,353
我们只对监听选中的注释感兴趣

1057
00:51:26,520 --> 0:51:31,291
但现在我们只需添加一个新的…

1058
00:51:33,694 --> 0:51:34,528
哎呀

1059
00:51:35,162 --> 0:51:36,029
逗号…

1060
00:51:36,563 --> 0:51:38,465
现在如果注释被选中

1061
00:51:38,532 --> 0:51:40,367
其处理仍然与以前一样

1062
00:51:40,434 --> 0:51:43,537
但如果是叠层被选中

1063
00:51:43,637 --> 0:51:46,406
我刚刚定义的

1064
00:51:46,473 --> 0:51:48,809
以便其突出显示

1065
00:51:49,877 --> 0:51:51,478
我们看看实际效果

1066
00:51:55,582 --> 0:51:58,785
我们这次可以选择不同的注释

1067
00:52:00,721 --> 0:52:04,057
现在我们可以看到

1068
00:52:07,227 --> 0:52:09,596
路线列表中选中路线

1069
00:52:09,663 --> 0:52:11,265
我还没有实现显示数据

1070
00:52:12,165 --> 0:52:14,201
我们看看选中另一条路线如何

1071
00:52:14,701 --> 0:52:18,172
这里发生的事情是当一个叠层

1072
00:52:18,238 --> 0:52:19,306
没有任何事情发生

1073
00:52:19,373 --> 0:52:22,209
而取消选中叠层时

1074
00:52:22,276 --> 0:52:25,479
所以我也必须实现这部分行为

1075
00:52:27,447 --> 0:52:28,582
在这个例子中

1076
00:52:29,116 --> 0:52:33,687
我将为deselect事件

1077
00:52:34,188 --> 0:52:38,225
当取消选中叠层时

1078
00:52:38,292 --> 0:52:39,459
为默认值

1079
00:52:41,595 --> 0:52:44,531
这应该能解决我的问题

1080
00:52:45,666 --> 0:52:46,900
我们再试一次

1081
00:52:47,701 --> 0:52:49,069
我选中这条路线

1082
00:52:49,469 --> 0:52:52,139
如果我再次选中同一个地方

1083
00:52:52,206 --> 0:52:54,441
因为我们这里有两个叠层互相重叠

1084
00:52:54,508 --> 0:52:56,443
这将选中另一个叠层

1085
00:52:56,910 --> 0:52:59,379
现在取消选中事件处理器

1086
00:52:59,446 --> 0:53:02,816
所以我刚才的突出显示已经消失了

1087
00:52:59,446 --> 0:53:02,816
所以我刚才的突出显示已经消失了

1088
00:53:02,916 --> 0:53:06,753
而且现在新选中的对象能够正确显示

1089
00:53:07,087 --> 0:53:09,122
这似乎工作得很好

1090
00:53:10,157 --> 0:53:11,625
这是另一个例子

1091
00:53:12,826 --> 0:53:15,262
同样的 我可以选中这些路线

1092
00:53:17,030 --> 0:53:18,599
但我想了解更多关于它们的信息

1093
00:53:18,665 --> 0:53:20,467
我想知道行车路线是什么

1094
00:53:20,534 --> 0:53:24,605
使用其中一条路线与另一条路线相比

1095
00:53:25,506 --> 0:53:26,406
所以…

1096
00:53:26,940 --> 0:53:28,809
这非常简单

1097
00:53:28,876 --> 0:53:32,446
因为我需要的东西都已经存在

1098
00:53:32,679 --> 0:53:36,517
我已将数据保存在我的叠层中

1099
00:53:36,717 --> 0:53:39,686
我也有一个选中事件监听器

1100
00:53:39,753 --> 0:53:43,724
所以当叠层被选中时

1101
00:53:46,226 --> 0:53:47,327
显示在侧边栏中

1102
00:53:48,862 --> 0:53:50,264
这属于很典型的

1103
00:53:50,330 --> 0:53:53,400
Web开发技术

1104
00:53:53,467 --> 0:53:58,071
我们有一些数据并且

1105
00:53:58,138 --> 0:53:59,540
所以我不会讨论其中的细节

1106
00:53:59,606 --> 0:54:01,475
但我们关注的细节

1107
00:53:59,606 --> 0:54:01,475
但我们关注的细节

1108
00:54:01,542 --> 0:54:04,011
与叠层相关

1109
00:54:04,478 --> 0:54:06,980
当叠层被选中时 它就会显示出来

1110
00:54:07,581 --> 0:54:10,017
我不会在这个选中事件上

1111
00:54:10,083 --> 0:54:13,754
所以当叠层取消选中时

1112
00:54:13,820 --> 0:54:16,723
从而不会同时出现多条路线

1113
00:54:18,458 --> 0:54:19,660
我们再试一次

1114
00:54:20,561 --> 0:54:22,729
我们还是选中上次那个注释

1115
00:54:23,797 --> 0:54:26,567
我再次选中这条路线

1116
00:54:26,700 --> 0:54:30,571
现在该路线被选中了

1117
00:54:30,771 --> 0:54:33,040
一些额外的信息

1118
00:54:33,340 --> 0:54:34,875
这是路线的简称

1119
00:54:34,942 --> 0:54:37,845
这是从汉密尔顿公路出发的路线

1120
00:54:38,512 --> 0:54:41,648
路程为70公里

1121
00:54:41,715 --> 0:54:44,651
我需要1小时32分钟到达那里

1122
00:54:44,718 --> 0:54:45,986
以下是我可以跟随的

1123
00:54:46,053 --> 0:54:49,056
到达目的地的所有步骤

1124
00:54:49,857 --> 0:54:51,358
我也可以看看这条路线如何

1125
00:54:52,059 --> 0:54:56,630
它的路程实际上更长 但它却更快

1126
00:54:57,164 --> 0:54:59,700
就是这样

1127
00:54:59,766 --> 0:55:04,238
我们已经构建了一个大脚怪查找器

1128
00:54:59,766 --> 0:55:04,238
我们已经构建了一个大脚怪查找器

1129
00:55:05,272 --> 0:55:10,010
它可以让我们选择想去的地方

1130
00:55:12,746 --> 0:55:13,614
谢谢

1131
00:55:13,680 --> 0:55:14,848
（演示——路线和用户交互）

1132
00:55:14,982 --> 0:55:16,750
（演示回顾）

1133
00:55:16,850 --> 0:55:17,784
快速回顾一下

1134
00:55:17,851 --> 0:55:20,087
我们看到了如何对用户事件做出响应

1135
00:55:20,153 --> 0:55:22,155
在这个演示中为选中事件

1136
00:55:23,090 --> 0:55:27,327
我们从MapKit JS服务中

1137
00:55:27,427 --> 0:55:30,764
我们使用折线叠层

1138
00:55:31,298 --> 0:55:35,169
我们为选中叠层事件

1139
00:55:35,235 --> 0:55:38,805
因为默认情况下没有提供特定的行为

1140
00:55:39,573 --> 0:55:40,674
（关键要点）

1141
00:55:40,741 --> 0:55:43,844
关于MapKit JS

1142
00:55:44,578 --> 0:55:45,846
但我们只有一个小时

1143
00:55:45,913 --> 0:55:47,915
所以我们就谈到这里

1144
00:55:49,650 --> 0:55:53,787
但我希望我们为MapKit JS

1145
00:55:53,854 --> 0:55:57,157
为Web app提供了

1146
00:55:58,292 --> 0:56:01,495
它让你能够统一使用单个地图提供者

1147
00:55:58,292 --> 0:56:01,495
它让你能够统一使用单个地图提供者

1148
00:56:01,562 --> 0:56:03,430
并且它具有熟悉且灵活的API

1149
00:56:03,497 --> 0:56:04,698
所以如果你的团队

1150
00:56:04,765 --> 0:56:07,401
使用过原生MapKit API

1151
00:56:07,467 --> 0:56:10,637
这应该感觉非常熟悉

1152
00:56:10,704 --> 0:56:12,973
Web开发者应该也很乐意看到

1153
00:56:13,140 --> 0:56:17,010
这些API是为了适配

1154
00:56:19,046 --> 0:56:21,682
我要提醒你

1155
00:56:21,748 --> 0:56:23,884
才能够使用MapKit JS

1156
00:56:24,084 --> 0:56:27,621
因此请到开发者门户获取你的密钥

1157
00:56:29,223 --> 0:56:30,991
若你想了解更多

1158
00:56:31,058 --> 0:56:35,662
你可以在此URL

1159
00:56:37,064 --> 0:56:39,933
如果你想了解更多

1160
00:56:40,200 --> 0:56:42,503
这是这次演讲的URL

1161
00:56:42,870 --> 0:56:47,140
我们附带的视频将逐步教你

1162
00:56:47,207 --> 0:56:49,610
如何获取和使用

1163
00:56:49,676 --> 0:56:51,044
（更多信息）

1164
00:56:51,111 --> 0:56:53,814
最后 我们还有相关的实验

1165
00:56:53,881 --> 0:56:56,016
它们分别在周三早上和周五早上

1166
00:56:56,083 --> 0:56:59,019
届时你可以与

1167
00:56:59,253 --> 0:57:01,688
并向我们询问

1168
00:56:59,253 --> 0:57:01,688
并向我们询问

1169
00:57:02,456 --> 0:57:03,490
非常感谢
