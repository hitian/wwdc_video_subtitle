1
00:00:17,217 --> 0:00:22,189
（你的app以及

2
00:00:22,723 --> 0:00:23,590
大家好

3
00:00:28,061 --> 0:00:29,630
我是Pierre-Olivier Martel

4
00:00:29,830 --> 0:00:32,131
我是Apple的安全、工程、职业

5
00:00:32,198 --> 0:00:33,534
小组的工程经理

6
00:00:34,168 --> 0:00:36,203
今天和我的两个同事一起

7
00:00:36,270 --> 0:00:37,371
来聊聊

8
00:00:37,437 --> 0:00:40,274
macOS Mojave

9
00:00:40,974 --> 0:00:42,843
以及怎样在你们的app中用到它们

10
00:00:44,811 --> 0:00:45,879
我将从介绍

11
00:00:45,946 --> 0:00:47,915
今年新加入的一些

12
00:00:47,981 --> 0:00:49,616
高级安全性改进开始

13
00:00:50,217 --> 0:00:52,753
然后我将用剩下的时间

14
00:00:53,020 --> 0:00:56,023
介绍正在加入门禁的一些增强特性

15
00:00:59,660 --> 0:01:01,461
几年前我们在macOS中引入了

16
00:00:59,660 --> 0:01:01,461
几年前我们在macOS中引入了

17
00:01:01,528 --> 0:01:03,931
叫做系统安全保护的特性

18
00:01:04,096 --> 0:01:08,068
目标是增强对操作系统的保护

19
00:01:08,368 --> 0:01:09,369
如此一来…

20
00:01:10,070 --> 0:01:13,006
系统的二进制文件不论是在硬盘上

21
00:01:13,073 --> 0:01:15,042
还是运行时都免于被修改

22
00:01:16,510 --> 0:01:18,679
今年我们将更进一步

23
00:01:19,479 --> 0:01:22,916
对系统二进制文件增加

24
00:01:23,951 --> 0:01:25,452
系统将在

25
00:01:26,453 --> 0:01:29,356
进程的整个生命周期

26
00:01:29,423 --> 0:01:31,992
强制执行代码签名验证

27
00:01:32,392 --> 0:01:36,797
并自动中止任何与其代码签名

28
00:01:37,197 --> 0:01:41,902
或者执行任何

29
00:01:43,136 --> 0:01:45,739
除此以外 系统还将监控

30
00:01:46,240 --> 0:01:47,074
那么…

31
00:01:47,508 --> 0:01:51,311
代码库、框架、插件的动态加载

32
00:01:51,612 --> 0:01:55,315
并强制要求

33
00:01:56,483 --> 0:01:59,853
此机制现在已经在iOS上

34
00:01:59,920 --> 0:02:02,222
现在我们将其变成

35
00:01:59,920 --> 0:02:02,222
现在我们将其变成

36
00:02:03,290 --> 0:02:05,292
当然 这仅限于系统本身

37
00:02:05,359 --> 0:02:07,828
而不是你的app

38
00:02:08,395 --> 0:02:09,263
然而…

39
00:02:09,830 --> 0:02:13,767
在整个操作系统中

40
00:02:13,834 --> 0:02:14,968
还有一些系统扩展点

41
00:02:15,035 --> 0:02:18,205
没有对app扩展模型执行该要求

42
00:02:18,906 --> 0:02:22,042
这些技术上看是系统二进制文件

43
00:02:22,109 --> 0:02:23,544
至少是插件加载对象

44
00:02:24,044 --> 0:02:26,446
对这些对象我们将放松该政策

45
00:02:26,613 --> 0:02:31,685
系统仍允许这些进程加载

46
00:02:31,752 --> 0:02:35,289
第三方签名或者完全未签名的代码

47
00:02:37,224 --> 0:02:40,460
因此如果在app中发布这些插件

48
00:02:40,928 --> 0:02:44,097
请确保在

49
00:02:44,264 --> 0:02:45,599
并确保其工作正常

50
00:02:45,666 --> 0:02:46,800
否则 请告知我们

51
00:02:49,002 --> 0:02:51,805
下面 我来讲讲用户界面自动化

52
00:02:53,207 --> 0:02:55,108
macOS的安全模型

53
00:02:55,175 --> 0:02:57,277
特别是涉及用户数据访问时

54
00:02:57,744 --> 0:03:02,683
取决于用户自己作出的安全决策

55
00:02:57,744 --> 0:03:02,683
取决于用户自己作出的安全决策

56
00:03:03,483 --> 0:03:05,319
我们通常会捕获这些决策

57
00:03:06,253 --> 0:03:08,222
要么通过用户

58
00:03:08,555 --> 0:03:10,824
使用打开/保存对话框

59
00:03:10,891 --> 0:03:12,459
或者拖放操作的意图

60
00:03:13,093 --> 0:03:15,229
要么通过更明确的授权对话框

61
00:03:15,429 --> 0:03:18,232
或者要求用户

62
00:03:18,432 --> 0:03:22,202
在系统设置中更改安全配置

63
00:03:22,269 --> 0:03:23,637
以取得用户同意

64
00:03:25,272 --> 0:03:27,808
这样一来 操作系统能够区分

65
00:03:27,875 --> 0:03:28,976
到底是用户自己

66
00:03:29,042 --> 0:03:32,746
做出这些决策

67
00:03:33,547 --> 0:03:36,683
还是软件通过用户界面驱使的

68
00:03:37,885 --> 0:03:40,554
过去我们对系统授权对话框

69
00:03:40,621 --> 0:03:43,056
做了一些有目标的强化

70
00:03:43,123 --> 0:03:46,960
以检测并阻断这些人为事件

71
00:03:47,828 --> 0:03:51,832
然而操作系统中的这些决策点

72
00:03:52,399 --> 0:03:53,600
以至于我们需更好模型

73
00:03:55,769 --> 0:03:57,037
在macOS Mojave中

74
00:03:57,104 --> 0:03:59,406
系统将只允许

75
00:03:59,907 --> 0:04:01,775
由用户特别配置过

76
00:03:59,907 --> 0:04:01,775
由用户特别配置过

77
00:04:02,042 --> 0:04:07,447
以控制其用户界面的进程

78
00:04:08,415 --> 0:04:10,384
发布用户界面事件

79
00:04:11,084 --> 0:04:11,985
这一配置

80
00:04:12,686 --> 0:04:15,722
加入了系统设置里的

81
00:04:15,789 --> 0:04:17,124
安全和隐私面板

82
00:04:17,558 --> 0:04:20,994
现在和已有的附件列表在一起

83
00:04:23,730 --> 0:04:27,067
这是将受影响的API列表

84
00:04:27,267 --> 0:04:29,169
他们主要分成两类

85
00:04:29,570 --> 0:04:30,404
第一类…

86
00:04:30,470 --> 0:04:32,206
在HID层：

87
00:04:32,873 --> 0:04:35,909
IOHIDPostEvent

88
00:04:36,743 --> 0:04:38,979
第二类 在CG层

89
00:04:39,313 --> 0:04:41,715
如果尝试发布任何CG事件

90
00:04:42,049 --> 0:04:42,883
或者…

91
00:04:43,083 --> 0:04:45,185
如果创建CG事件面板

92
00:04:45,552 --> 0:04:48,255
而不提供只侦听选项

93
00:04:48,889 --> 0:04:51,692
有效创建所谓的修改面板

94
00:04:52,359 --> 0:04:54,795
那么用户也必须许可这些进程

95
00:04:57,431 --> 0:04:58,365
然后…

96
00:04:59,166 --> 0:05:03,704
我们主要关注强化Safari本身

97
00:04:59,166 --> 0:05:03,704
我们主要关注强化Safari本身

98
00:05:04,671 --> 0:05:05,639
毕竟

99
00:05:05,706 --> 0:05:08,509
它是机器上最重要的互联网

100
00:05:08,575 --> 0:05:09,643
接入app之一

101
00:05:11,011 --> 0:05:12,379
所以它值得特别关注

102
00:05:13,614 --> 0:05:14,548
在Mojave里…

103
00:05:15,082 --> 0:05:18,919
Safari和其他随之发布的

104
00:05:18,986 --> 0:05:20,254
周边进程一样

105
00:05:20,854 --> 0:05:22,055
完全运行在沙盒中

106
00:05:23,156 --> 0:05:24,758
如果你是网络开发者

107
00:05:24,825 --> 0:05:27,928
由于Safari

108
00:05:28,328 --> 0:05:31,732
这可能潜在影响到你的本地开发流程

109
00:05:33,033 --> 0:05:34,368
如果想了解更多细节

110
00:05:34,434 --> 0:05:36,303
请关注“Safari新特性”

111
00:05:36,370 --> 0:05:38,272
以及本周五的WebKit演讲

112
00:05:39,373 --> 0:05:40,908
当然 WebKit已在沙盒模式下

113
00:05:40,974 --> 0:05:42,042
运行多年

114
00:05:42,409 --> 0:05:46,446
我们花了大量精力

115
00:05:46,880 --> 0:05:51,151
并从中移除任何有风险的

116
00:05:51,518 --> 0:05:54,688
例如 网页内容进程

117
00:05:55,022 --> 0:05:57,357
不再需要访问Windows服务器

118
00:05:57,524 --> 0:06:00,060
或者程序坞 或者网络

119
00:05:57,524 --> 0:06:00,060
或者程序坞 或者网络

120
00:06:01,595 --> 0:06:04,031
如果你的app

121
00:06:04,631 --> 0:06:07,134
你将不再需要额外工作

122
00:06:07,434 --> 0:06:09,570
你将自动从这些改进中收益

123
00:06:12,639 --> 0:06:14,708
下面 我来讲讲门禁

124
00:06:16,076 --> 0:06:18,345
门禁过去几年中

125
00:06:18,412 --> 0:06:22,082
在阻止恶意软件在平台上

126
00:06:22,683 --> 0:06:23,550
在这里

127
00:06:23,851 --> 0:06:25,018
我们想让它更出色

128
00:06:25,485 --> 0:06:27,321
我们主要集中于这三个方面

129
00:06:29,089 --> 0:06:29,923
首先…

130
00:06:30,057 --> 0:06:34,027
我邀请Kelly上台

131
00:06:34,428 --> 0:06:36,363
该机制让用户能控制

132
00:06:36,530 --> 0:06:39,032
app访问他们个人数据的方式

133
00:06:40,634 --> 0:06:42,970
然后 我将介绍新的安全特性

134
00:06:43,036 --> 0:06:45,939
作为开发者 你能在app中采用

135
00:06:46,507 --> 0:06:49,109
以增强其安全性和透明度

136
00:06:50,277 --> 0:06:51,144
最后

137
00:06:51,411 --> 0:06:52,813
我肯定你们已急于听到更多

138
00:06:52,880 --> 0:06:55,315
关于昨天Sebastian

139
00:06:55,382 --> 0:06:57,518
Developer ID公正服务

140
00:06:57,951 --> 0:07:00,621
所以我邀请Garrett上台

141
00:06:57,951 --> 0:07:00,621
所以我邀请Garrett上台

142
00:07:02,689 --> 0:07:03,790
好了 开始吧

143
00:07:03,924 --> 0:07:04,758
Kelly？

144
00:07:10,964 --> 0:07:11,965
好的 谢谢Pierre

145
00:07:12,533 --> 0:07:13,767
我是Kelly Yancy

146
00:07:13,834 --> 0:07:16,069
我是Apple OS安全团队的

147
00:07:16,303 --> 0:07:19,540
我今天很荣幸地介绍

148
00:07:19,606 --> 0:07:20,774
新的用户数据保护机制

149
00:07:21,275 --> 0:07:23,177
现在macOS

150
00:07:24,545 --> 0:07:25,712
这些API…

151
00:07:29,416 --> 0:07:31,084
会在允许app访问

152
00:07:31,185 --> 0:07:33,720
其各自数据前征求用户同意

153
00:07:36,557 --> 0:07:38,926
经过这些提示 善意的软件

154
00:07:38,992 --> 0:07:40,827
能在如何访问

155
00:07:41,228 --> 0:07:44,264
个人数据方面遵从用户偏好

156
00:07:46,300 --> 0:07:50,904
现在macOS Mojave里

157
00:07:51,038 --> 0:07:53,173
访问后台/存储的app

158
00:07:53,240 --> 0:07:54,708
访问这些数据也需要用户同意

159
00:07:55,475 --> 0:07:58,879
现在使用预定的API

160
00:08:00,547 --> 0:08:01,882
应该准备周全

161
00:08:02,149 --> 0:08:04,218
但和以往一样 鼓励你在最新的

162
00:08:04,284 --> 0:08:06,787
macOS上测试你的app

163
00:08:07,888 --> 0:08:11,325
现在 如果app直接通过文件系统

164
00:08:11,391 --> 0:08:12,359
访问数据库

165
00:08:13,360 --> 0:08:14,795
请注意有可能

166
00:08:14,995 --> 0:08:17,464
在操作系统提示用户授权时

167
00:08:17,764 --> 0:08:18,765
该访问

168
00:08:18,832 --> 0:08:20,868
会阻塞调用进程

169
00:08:21,602 --> 0:08:25,038
在计算机每秒进行

170
00:08:25,239 --> 0:08:27,474
人的延迟相对较高

171
00:08:28,041 --> 0:08:30,544
你不会想在主线程里

172
00:08:30,744 --> 0:08:34,248
否则 弹出提示信息时其会挂起

173
00:08:36,450 --> 0:08:38,284
这里是一段通过

174
00:08:38,352 --> 0:08:41,087
文件系统访问用户图片的代码示例

175
00:08:41,922 --> 0:08:42,756
现在 默认的

176
00:08:42,823 --> 0:08:45,392
Photos app

177
00:08:45,459 --> 0:08:46,660
保存用户的图片库

178
00:08:47,361 --> 0:08:48,228
因此…

179
00:08:49,229 --> 0:08:53,000
当这段代码访问用户的图片库时

180
00:08:53,400 --> 0:08:55,068
其可能因为访问用户的照片

181
00:08:55,135 --> 0:08:57,004
触发授权提示

182
00:08:57,538 --> 0:09:00,307
在macOS

183
00:08:57,538 --> 0:09:00,307
在macOS

184
00:09:02,476 --> 0:09:04,878
现在app访问用户的主目录时

185
00:09:05,112 --> 0:09:08,982
可能触发多种授权提示 不只是照片

186
00:09:09,149 --> 0:09:11,351
还有联系人、日历等等

187
00:09:12,085 --> 0:09:14,488
因为很多app访问整个文件系统

188
00:09:14,555 --> 0:09:16,823
例如磁盘管理或者备份软件

189
00:09:17,791 --> 0:09:20,360
用户能在系统设置的

190
00:09:20,694 --> 0:09:24,164
把它们加入新的系统应用数据分类

191
00:09:24,231 --> 0:09:27,034
以提前授权这些app

192
00:09:27,801 --> 0:09:30,337
这样做 用户提前授权这些app

193
00:09:30,404 --> 0:09:34,041
就能在访问他们所有的

194
00:09:34,675 --> 0:09:39,947
授权也可以通过MDM服务器

195
00:09:40,247 --> 0:09:41,415
提前配置

196
00:09:41,481 --> 0:09:43,884
只要其为用户改进的注册

197
00:09:46,186 --> 0:09:50,457
当用户收到访问个人数据的

198
00:09:50,891 --> 0:09:53,527
了解访问的目的十分重要

199
00:09:54,361 --> 0:09:58,198
设想你安装了一个

200
00:09:58,799 --> 0:10:02,402
第一次运行就看到这个提示

201
00:09:58,799 --> 0:10:02,402
第一次运行就看到这个提示

202
00:10:02,936 --> 0:10:04,137
这是个艰难的抉择

203
00:10:05,138 --> 0:10:06,907
但我们能让他简单点

204
00:10:07,641 --> 0:10:09,309
通过加入目的描述

205
00:10:10,043 --> 0:10:13,280
以解释app为何请求访问

206
00:10:13,480 --> 0:10:16,617
以及拒绝的后果是什么

207
00:10:17,384 --> 0:10:19,520
现在app可以

208
00:10:19,653 --> 0:10:22,556
通过在Info.plist文件里

209
00:10:23,290 --> 0:10:25,959
指定授权提示显示的文字

210
00:10:27,394 --> 0:10:28,729
这是我们已经看到的

211
00:10:28,795 --> 0:10:31,164
每个API的

212
00:10:32,199 --> 0:10:36,069
你可能注意到这些和iOS里的

213
00:10:37,237 --> 0:10:38,505
我想指出一个区别

214
00:10:38,572 --> 0:10:41,308
那就是位置服务的

215
00:10:43,210 --> 0:10:45,646
该键值在iOS上已经废弃了

216
00:10:45,712 --> 0:10:50,651
但我保证其在macOS Mojave上

217
00:10:52,286 --> 0:10:57,491
链接到10.14 SDK的app

218
00:10:58,592 --> 0:11:00,794
除了通知用户

219
00:10:58,592 --> 0:11:00,794
除了通知用户

220
00:11:00,861 --> 0:11:04,998
这些键值还用于告知操作系统

221
00:11:05,065 --> 0:11:06,333
作为开发者

222
00:11:06,633 --> 0:11:09,736
你打算让app访问用户个人数据

223
00:11:10,737 --> 0:11:13,874
如果app要访问用户个人数据

224
00:11:14,141 --> 0:11:15,609
却没包含…

225
00:11:16,410 --> 0:11:18,879
合适的键值和访问数据目的描述

226
00:11:19,980 --> 0:11:23,584
macOS Mojave

227
00:11:23,984 --> 0:11:25,152
并退出app

228
00:11:26,353 --> 0:11:27,487
为了保持兼容

229
00:11:27,554 --> 0:11:31,892
对链接到旧SDK的app来说

230
00:11:33,060 --> 0:11:34,228
举例来说

231
00:11:34,294 --> 0:11:36,997
有一个为10.13 SDK

232
00:11:37,364 --> 0:11:39,766
要通过这些API

233
00:11:39,833 --> 0:11:41,235
访问用户个人数据

234
00:11:42,569 --> 0:11:43,971
该app不会退出

235
00:11:44,371 --> 0:11:46,874
而是显示一个缺少

236
00:11:46,940 --> 0:11:49,009
就像一分钟前我们看到那个一样

237
00:11:49,176 --> 0:11:52,279
因此还是鼓励在app中

238
00:11:52,813 --> 0:11:53,680
包含Info.plist键值

239
00:11:53,947 --> 0:11:56,917
即使是旧的SDK

240
00:11:57,751 --> 0:12:01,121
用户也能更好了解访问数据的理由

241
00:11:57,751 --> 0:12:01,121
用户也能更好了解访问数据的理由

242
00:12:03,557 --> 0:12:06,260
除了这些提示信息

243
00:12:06,927 --> 0:12:10,364
macOS Mojave

244
00:12:10,731 --> 0:12:13,333
用户的隐私数据

245
00:12:19,606 --> 0:12:22,176
因此通过文件系统访问这些数据时

246
00:12:23,076 --> 0:12:25,812
操作系统不会提示授权

247
00:12:26,413 --> 0:12:30,951
除非各自的系统app或服务

248
00:12:31,218 --> 0:12:34,321
或者用户通过安全和隐私设置面板

249
00:12:34,655 --> 0:12:35,889
将app预授权为

250
00:12:35,956 --> 0:12:37,925
系统app数据

251
00:12:38,258 --> 0:12:39,293
就如刚才所见

252
00:12:40,561 --> 0:12:41,495
此外…

253
00:12:42,262 --> 0:12:46,166
授权还可以通过MDM注册

254
00:12:47,968 --> 0:12:51,638
访问这些数据的另一个方式是脚本

255
00:12:53,006 --> 0:12:56,810
邮件、信息和Safari

256
00:12:56,877 --> 0:13:00,080
向其他app暴露一些功能

257
00:12:56,877 --> 0:13:00,080
向其他app暴露一些功能

258
00:13:00,647 --> 0:13:02,182
拿邮件举例

259
00:13:02,583 --> 0:13:05,686
邮件的本地数据库

260
00:13:06,086 --> 0:13:09,957
他有我朋友、家人、往来公司的

261
00:13:10,023 --> 0:13:12,993
还有邮件内容本身

262
00:13:13,393 --> 0:13:16,296
我的私人回复 购物回执

263
00:13:16,363 --> 0:13:17,831
发货通知

264
00:13:18,465 --> 0:13:21,768
还有我忘了的服务的临时密码

265
00:13:23,036 --> 0:13:26,640
所以邮件app自然有权

266
00:13:27,241 --> 0:13:30,677
macOS Mojave里

267
00:13:32,479 --> 0:13:35,215
而邮件可以由其他app脚本访问

268
00:13:35,282 --> 0:13:39,720
我们需确保其只在我同意时

269
00:13:42,856 --> 0:13:44,291
因为要让用户控制

270
00:13:44,358 --> 0:13:46,827
受信访问其数据的app

271
00:13:46,894 --> 0:13:48,695
与其他app怎样交互

272
00:13:49,363 --> 0:13:52,065
macOS Mojave

273
00:13:52,132 --> 0:13:54,668
以授权app访问其他app

274
00:13:55,502 --> 0:13:56,737
现在Developer Preview

275
00:13:56,803 --> 0:14:00,073
不要求授权以自动化其他app

276
00:13:56,803 --> 0:14:00,073
不要求授权以自动化其他app

277
00:14:00,340 --> 0:14:03,744
但是可以在未来的预览版中

278
00:14:05,179 --> 0:14:06,780
只有用户同意

279
00:14:08,382 --> 0:14:11,118
邮件才能被其他app自动化

280
00:14:12,719 --> 0:14:14,588
所以这适用于Apple的事件

281
00:14:17,491 --> 0:14:18,492
但有例外

282
00:14:18,559 --> 0:14:20,460
那些非隐私敏感的

283
00:14:20,961 --> 0:14:23,163
Apple事件有例外

284
00:14:23,664 --> 0:14:24,565
例如

285
00:14:24,698 --> 0:14:26,900
在默认app中打开文档

286
00:14:27,134 --> 0:14:30,204
在默认协议处理程序中打开URL

287
00:14:30,971 --> 0:14:32,739
或打开其他app

288
00:14:35,742 --> 0:14:36,577
最后…

289
00:14:37,077 --> 0:14:41,315
macOS Mojave

290
00:14:42,082 --> 0:14:44,251
用户授权的相机和麦克

291
00:14:46,353 --> 0:14:47,888
我想我要拒绝这个

292
00:14:51,325 --> 0:14:52,159
所以app能…

293
00:14:53,861 --> 0:14:56,296
在没有用户同意时模拟相机

294
00:14:56,363 --> 0:14:57,531
和麦克硬件

295
00:14:57,965 --> 0:14:59,466
但开始录制

296
00:15:00,267 --> 0:15:01,802
还是需要用户授权

297
00:15:03,103 --> 0:15:06,340
这适用于所有内置驱动支持的设备

298
00:15:09,309 --> 0:15:11,445
现在 app可以查询

299
00:15:12,946 --> 0:15:15,482
授权状态

300
00:15:17,050 --> 0:15:17,885
这在想要app的

301
00:15:17,951 --> 0:15:22,489
用户体验反映

302
00:15:23,290 --> 0:15:27,628
AVFoundation提供的

303
00:15:28,595 --> 0:15:29,897
有趣的是

304
00:15:30,230 --> 0:15:32,733
它不只简单的返回是否的布尔值

305
00:15:33,433 --> 0:15:36,670
它返回四种可能的枚举值

306
00:15:37,804 --> 0:15:39,206
我将深入讲解

307
00:15:39,273 --> 0:15:41,175
因为我觉得这些是相关的

308
00:15:42,042 --> 0:15:44,044
第一个 未确定

309
00:15:44,111 --> 0:15:46,947
意味着用户尚未同意

310
00:15:47,181 --> 0:15:49,816
app访问相机或者麦克

311
00:15:51,118 --> 0:15:54,388
因此 app访问硬件时

312
00:15:55,122 --> 0:15:57,824
操作系统将弹出提示

313
00:16:01,295 --> 0:16:04,998
受限的 意味着用户不能同意

314
00:16:05,265 --> 0:16:06,934
访问硬件…

315
00:16:07,000 --> 0:16:08,335
相机或麦克…

316
00:16:08,402 --> 0:16:09,469
被禁用

317
00:16:09,636 --> 0:16:12,306
家长控制或移动设备管理

318
00:16:14,708 --> 0:16:18,846
拒绝的 意味着之前提示过用户

319
00:16:19,179 --> 0:16:21,748
但用户拒绝授权

320
00:16:22,115 --> 0:16:25,352
不想app访问硬件

321
00:16:26,653 --> 0:16:27,554
最后

322
00:16:28,021 --> 0:16:31,625
加权均值意味着之前提示过用户

323
00:16:31,758 --> 0:16:35,596
用户授权app有权访问硬件

324
00:16:40,467 --> 0:16:41,301
因此

325
00:16:41,535 --> 0:16:43,937
我们相信在当下提示十分重要

326
00:16:44,404 --> 0:16:46,473
这也是操作系统现在

327
00:16:47,007 --> 0:16:49,309
及时显示提示信息的原因

328
00:16:49,376 --> 0:16:53,313
app访问相机麦克时

329
00:16:54,515 --> 0:16:57,251
操作系统必要时会显示提示

330
00:16:57,518 --> 0:16:59,052
我们觉得那是正确的时间

331
00:16:59,119 --> 0:17:01,288
因为用户当时

332
00:16:59,119 --> 0:17:01,288
因为用户当时

333
00:17:01,421 --> 0:17:04,358
最能理解为何app要访问硬件

334
00:17:05,893 --> 0:17:08,795
而有时app想更多控制

335
00:17:08,862 --> 0:17:11,131
授权提示的时间

336
00:17:11,464 --> 0:17:13,901
例如 app打开一个窗口

337
00:17:13,967 --> 0:17:17,069
窗口中显示相机画面

338
00:17:17,137 --> 0:17:20,741
或者相机的可视化音频

339
00:17:21,241 --> 0:17:23,343
你想在用户拒绝授权时

340
00:17:23,410 --> 0:17:25,311
避免显示空白窗口

341
00:17:26,113 --> 0:17:29,149
这时最好在窗口打开前就提示

342
00:17:29,883 --> 0:17:32,953
所以AVFoundation

343
00:17:33,253 --> 0:17:35,822
你能提前获取授权

344
00:17:38,058 --> 0:17:41,228
我想强调的是 该API是异步的

345
00:17:41,361 --> 0:17:42,696
它用一个回调函数

346
00:17:43,263 --> 0:17:48,235
返回一个app

347
00:17:48,302 --> 0:17:50,938
因此和刚才所见的枚举值有些许不同

348
00:17:52,139 --> 0:17:55,075
当app访问接口时

349
00:17:55,142 --> 0:17:56,376
该回调函数能立即调用

350
00:17:56,577 --> 0:18:00,981
例如 如果用户之前授权或拒绝访问

351
00:17:56,577 --> 0:18:00,981
例如 如果用户之前授权或拒绝访问

352
00:18:01,281 --> 0:18:02,649
操作系统已经知道答案

353
00:18:02,716 --> 0:18:06,353
并能立即调用回调函数告诉你结果

354
00:18:06,587 --> 0:18:08,655
类似地

355
00:18:10,090 --> 0:18:14,995
如果家长控制或MDM服务器

356
00:18:15,696 --> 0:18:19,666
回调函数会用否的布尔值立即执行

357
00:18:22,603 --> 0:18:26,507
但是也可能该回调函数在之后才执行

358
00:18:26,874 --> 0:18:28,242
可能很久以后

359
00:18:28,809 --> 0:18:31,211
当我们等待时系统显示提示信息

360
00:18:31,278 --> 0:18:34,147
只有在用户做出决定后

361
00:18:34,214 --> 0:18:35,983
回调函数才会执行

362
00:18:36,683 --> 0:18:38,852
那时我们才知道答案

363
00:18:38,919 --> 0:18:40,821
是的 app有权访问

364
00:18:44,691 --> 0:18:48,595
所以app可以包含访问

365
00:18:49,329 --> 0:18:51,198
和其他目的描述一样

366
00:18:51,965 --> 0:18:55,369
这些对链接到10.14 SDK的

367
00:18:55,936 --> 0:18:56,970
对链接到旧版本SDK

368
00:18:57,804 --> 0:18:58,906
的app来说

369
00:18:58,972 --> 0:19:02,009
尽管可选 却鼓励提供

370
00:18:58,972 --> 0:19:02,009
尽管可选 却鼓励提供

371
00:19:05,045 --> 0:19:08,615
回顾一下：这是刚看过的主题概要

372
00:19:11,585 --> 0:19:12,886
macOS Mojave

373
00:19:13,220 --> 0:19:15,189
不会引导用户授权

374
00:19:15,956 --> 0:19:17,858
访问这些用户数据

375
00:19:18,458 --> 0:19:21,995
只有各自的系统app和用户

376
00:19:22,062 --> 0:19:24,331
通过安全和隐私设置面板

377
00:19:24,498 --> 0:19:27,901
或者家长控制和

378
00:19:28,902 --> 0:19:30,671
授权的app才允许访问这些数据

379
00:19:33,540 --> 0:19:36,076
这些是app在用户授权后

380
00:19:36,143 --> 0:19:38,178
能访问的用户数据和设备类别

381
00:19:39,413 --> 0:19:41,715
现在操作系统、macOS

382
00:19:42,716 --> 0:19:45,018
在app第一次访问这些数据时

383
00:19:45,085 --> 0:19:47,821
向用户显示授权提示

384
00:19:48,355 --> 0:19:50,357
然后记住用户的选择

385
00:19:50,424 --> 0:19:51,425
这对用户来说很棒

386
00:19:51,491 --> 0:19:55,996
每个app访问

387
00:19:56,063 --> 0:19:57,431
而不会提示多次

388
00:19:58,165 --> 0:19:59,399
但作为开发者

389
00:20:00,767 --> 0:20:02,603
你可能想提前提示用户

390
00:20:03,170 --> 0:20:05,305
以便显示提示信息后

391
00:20:05,539 --> 0:20:07,107
能决定app的行为

392
00:20:08,275 --> 0:20:13,113
用户同意该怎样

393
00:20:13,780 --> 0:20:17,518
出于此目的 macOS提供了

394
00:20:18,285 --> 0:20:21,455
能用于让操作系统忘记

395
00:20:22,356 --> 0:20:24,591
之前授权提示的答案

396
00:20:25,459 --> 0:20:29,530
这样下次运行app时

397
00:20:30,063 --> 0:20:31,798
操作系统会再次提示

398
00:20:32,699 --> 0:20:35,135
该工具仅用于测试

399
00:20:35,736 --> 0:20:38,272
即使在调试时 app也不该

400
00:20:38,338 --> 0:20:39,640
自动调用该工具

401
00:20:42,009 --> 0:20:42,876
总结来说

402
00:20:43,243 --> 0:20:45,679
确保授权提示即时显示

403
00:20:45,946 --> 0:20:47,714
这很重要 能让用户理解

404
00:20:47,781 --> 0:20:49,583
提示显示的原因

405
00:20:50,884 --> 0:20:54,721
加入Info.plist键值

406
00:20:55,088 --> 0:20:57,090
app将怎样访问数据

407
00:20:57,591 --> 0:21:01,261
以及如果拒绝访问

408
00:20:57,591 --> 0:21:01,261
以及如果拒绝访问

409
00:21:02,462 --> 0:21:05,899
不要在主线程中访问

410
00:21:05,966 --> 0:21:09,036
这样等待授权时app不会挂起

411
00:21:09,603 --> 0:21:13,040
访问需要授权的资源时

412
00:21:13,140 --> 0:21:15,642
正确处理用户拒绝的情况

413
00:21:17,277 --> 0:21:19,813
最后 当用户同意访问时

414
00:21:20,113 --> 0:21:22,182
对用户的个人数据负责

415
00:21:23,817 --> 0:21:27,421
这就是macOS Mojave上

416
00:21:27,688 --> 0:21:30,057
谢谢 我将把讲舞台

417
00:21:30,123 --> 0:21:33,126
继续介绍增强的运行时保护

418
00:21:38,832 --> 0:21:39,733
谢谢Kelly

419
00:21:41,435 --> 0:21:44,805
过去几年里 我们向Mac

420
00:21:45,105 --> 0:21:48,208
很多人问 在app里能做什么

421
00:21:48,442 --> 0:21:51,879
对其余系统使用

422
00:21:53,046 --> 0:21:55,115
然而到现在 还没有好的说法

423
00:21:56,783 --> 0:21:57,618
今天…

424
00:21:58,018 --> 0:21:59,820
我们将引入一套新的能在app中

425
00:21:59,887 --> 0:22:02,089
方便使用的运行时保护机制

426
00:21:59,887 --> 0:22:02,089
方便使用的运行时保护机制

427
00:22:03,690 --> 0:22:08,262
这是10.14 SDK上

428
00:22:09,062 --> 0:22:12,966
通过使能全套系统提供的

429
00:22:13,200 --> 0:22:15,202
其有效的为app设置

430
00:22:15,269 --> 0:22:16,503
新的安全基线

431
00:22:17,471 --> 0:22:23,143
并让你能选择退回更有

432
00:22:24,411 --> 0:22:28,182
它能配置一套新的不受限的设置

433
00:22:28,582 --> 0:22:31,485
不受限是指这些设置不需要

434
00:22:31,552 --> 0:22:34,788
任何预先授权所有人都能访问

435
00:22:36,356 --> 0:22:39,927
它能在Xcode的

436
00:22:40,727 --> 0:22:41,662
最后

437
00:22:42,029 --> 0:22:43,664
如果需要在老版本的

438
00:22:43,964 --> 0:22:47,301
macOS及其子版本中部署app

439
00:22:48,035 --> 0:22:49,002
向后兼容的

440
00:22:49,269 --> 0:22:52,339
随着将来加入更多特性

441
00:22:52,606 --> 0:22:54,808
已经发布的app不会受影响

442
00:22:56,143 --> 0:22:58,078
我们来聊聊新的保护机制

443
00:22:59,213 --> 0:23:00,547
首先 代码签名

444
00:22:59,213 --> 0:23:00,547
首先 代码签名

445
00:23:01,882 --> 0:23:03,717
当采用新的运行时

446
00:23:03,951 --> 0:23:05,118
系统将强制要求

447
00:23:05,185 --> 0:23:09,089
地址空间内的每个可执行页

448
00:23:09,423 --> 0:23:11,491
必须有app发布时的

449
00:23:11,558 --> 0:23:12,893
原始代码签名支持

450
00:23:16,063 --> 0:23:18,031
这对大多数app来说都不错

451
00:23:18,098 --> 0:23:20,767
当然有些情况下这是不合适的

452
00:23:20,834 --> 0:23:22,302
因此让我们看看如何配置

453
00:23:24,071 --> 0:23:27,174
例如 app有一个脚本运行时

454
00:23:27,341 --> 0:23:29,443
有较高的性能要求

455
00:23:29,943 --> 0:23:33,480
此时 你很可能使用JIT

456
00:23:33,547 --> 0:23:34,915
来执行app

457
00:23:35,482 --> 0:23:36,316
这种情况…

458
00:23:36,483 --> 0:23:38,919
能使用列表中的第一个设置

459
00:23:39,620 --> 0:23:42,155
它让你能访问MMAP系统调用中

460
00:23:42,222 --> 0:23:43,724
新的MAP JIT标识

461
00:23:44,057 --> 0:23:46,260
标识让你能创建所谓的JIT区域

462
00:23:46,393 --> 0:23:48,662
这些是可读 可写

463
00:23:48,729 --> 0:23:50,197
可执行的内存区域

464
00:23:52,232 --> 0:23:55,035
再如有一个插件系统

465
00:23:55,102 --> 0:23:58,972
你期望能加载执行没有合适签名

466
00:23:59,206 --> 0:24:02,142
或完全没有签名的插件

467
00:23:59,206 --> 0:24:02,142
或完全没有签名的插件

468
00:24:03,076 --> 0:24:05,546
那么就得用列表中的第二个设置

469
00:24:06,947 --> 0:24:08,482
最后 如果app…

470
00:24:08,549 --> 0:24:11,919
需要运行时修改自己的代码页

471
00:24:12,186 --> 0:24:14,755
有效破坏自己的代码签名

472
00:24:15,455 --> 0:24:19,459
就需要用列表里的最后一个设置

473
00:24:20,160 --> 0:24:24,264
要注意的是

474
00:24:25,399 --> 0:24:26,867
但我们还是想让它能实现

475
00:24:28,836 --> 0:24:30,571
然后是代码库验证

476
00:24:31,471 --> 0:24:33,006
采用新的运行时

477
00:24:33,473 --> 0:24:37,377
系统会默认强制要求

478
00:24:37,511 --> 0:24:40,914
动态加载的每个库 框架 插件

479
00:24:41,548 --> 0:24:44,051
的代码签名

480
00:24:45,319 --> 0:24:47,020
这些模块…

481
00:24:47,087 --> 0:24:50,490
这些对象必须有Apple签名

482
00:24:50,624 --> 0:24:51,458
或者…

483
00:24:51,525 --> 0:24:53,093
必须有app发布时

484
00:24:53,160 --> 0:24:55,362
主程序的相同的组织ID签名

485
00:24:56,597 --> 0:24:58,232
如果是插件系统

486
00:24:58,298 --> 0:25:03,637
你需要加载其他组织签名的对象

487
00:24:58,298 --> 0:25:03,637
你需要加载其他组织签名的对象

488
00:25:04,404 --> 0:25:06,907
就能用这一设置放松该政策

489
00:25:08,041 --> 0:25:10,911
要注意 它还是要求

490
00:25:11,044 --> 0:25:12,779
只是可以由其他组织签名

491
00:25:12,913 --> 0:25:16,049
如果需要加载完全未签名的代码

492
00:25:16,517 --> 0:25:18,452
就得用之前页面里的

493
00:25:18,519 --> 0:25:19,620
一个设置

494
00:25:21,889 --> 0:25:22,990
然后 调试：

495
00:25:24,358 --> 0:25:27,694
新运行时里的app是不能调试的

496
00:25:28,462 --> 0:25:30,764
也不能调试其他app

497
00:25:31,698 --> 0:25:35,135
如果要在新运行时调试app

498
00:25:35,202 --> 0:25:37,337
可以用允许任务设置

499
00:25:38,605 --> 0:25:41,808
注意当在Xcode里

500
00:25:42,042 --> 0:25:44,211
Xcode会自动为你加入该设置

501
00:25:44,278 --> 0:25:47,080
如果用Xcode作为

502
00:25:47,314 --> 0:25:48,782
你什么都不用做

503
00:25:49,183 --> 0:25:50,417
程序也会保证

504
00:25:50,484 --> 0:25:52,986
当发布导出时

505
00:25:53,053 --> 0:25:55,322
设置从签名中正确的去掉

506
00:25:56,323 --> 0:25:58,225
如果不用Xcode

507
00:25:58,292 --> 0:26:00,294
没有该设置 除非确实需要

508
00:25:58,292 --> 0:26:00,294
没有该设置 除非确实需要

509
00:26:01,528 --> 0:26:03,030
如果app就是个调试器

510
00:26:03,096 --> 0:26:05,799
那就得用列表中的第二个设置

511
00:26:06,466 --> 0:26:08,368
最后 一些罕见情况下

512
00:26:08,435 --> 0:26:12,639
app依赖于DYLD环境变量

513
00:26:12,706 --> 0:26:14,541
在运行时修改其BFU

514
00:26:15,108 --> 0:26:17,144
就可以用列表里的最后一个选项

515
00:26:19,713 --> 0:26:21,248
最后 资源访问

516
00:26:22,015 --> 0:26:24,651
运行时要求你对app

517
00:26:24,952 --> 0:26:28,288
要访问的数据类型透明

518
00:26:28,822 --> 0:26:31,892
因此如果app要访问的

519
00:26:31,959 --> 0:26:34,094
是Kelly之前提到的

520
00:26:34,161 --> 0:26:36,363
受保护类别的数据

521
00:26:36,997 --> 0:26:38,799
而app签名中又没有包含

522
00:26:38,866 --> 0:26:39,867
合适的设置

523
00:26:40,033 --> 0:26:42,002
系统将自动终止它

524
00:26:44,338 --> 0:26:46,673
我们有对应Kelly提到的

525
00:26:46,740 --> 0:26:47,941
每个类别的设置

526
00:26:48,842 --> 0:26:49,843
但记住

527
00:26:50,310 --> 0:26:52,379
只加入设置是不够的

528
00:26:53,547 --> 0:26:56,917
链接到10.14 SDK时

529
00:26:57,484 --> 0:27:00,988
最后 它也不会自动

530
00:26:57,484 --> 0:27:00,988
最后 它也不会自动

531
00:27:01,288 --> 0:27:03,590
用户仍有最后的决定权

532
00:27:06,260 --> 0:27:07,261
怎么使能这一点？

533
00:27:07,327 --> 0:27:08,862
Xcode里

534
00:27:09,530 --> 0:27:10,797
前往开发能力面板

535
00:27:11,698 --> 0:27:14,201
的目标设置

536
00:27:15,035 --> 0:27:17,738
你将找到新的硬件和运行时小节

537
00:27:18,305 --> 0:27:19,306
并能开启它

538
00:27:20,207 --> 0:27:22,643
之前提到的每个设置

539
00:27:22,709 --> 0:27:24,111
都有选项

540
00:27:29,950 --> 0:27:31,552
更合适的

541
00:27:31,752 --> 0:27:33,654
是使用命令行接口

542
00:27:33,720 --> 0:27:38,158
能在代码签名命令中

543
00:27:39,760 --> 0:27:42,262
为了验证是否恰当设置

544
00:27:42,329 --> 0:27:43,797
并采用这一新的运行时

545
00:27:43,864 --> 0:27:45,732
能使用--display选项

546
00:27:46,133 --> 0:27:48,435
这里 要找的是

547
00:27:49,369 --> 0:27:53,340
运行时标识 以及运行时版本

548
00:27:56,910 --> 0:27:57,744
好了

549
00:27:57,811 --> 0:27:59,580
现在来看看问题的最后一个部分

550
00:28:00,113 --> 0:28:01,415
聊聊公正的app

551
00:28:02,115 --> 0:28:02,950
Garrett？

552
00:28:07,321 --> 0:28:08,188
谢谢Pierre

553
00:28:09,122 --> 0:28:09,990
大家好

554
00:28:10,057 --> 0:28:10,891
我是Garrett

555
00:28:10,958 --> 0:28:13,160
我就职于Apple的

556
00:28:14,928 --> 0:28:16,830
我的同事Kelly之前讲到

557
00:28:16,897 --> 0:28:20,300
通过保证用户对私人数据的控制

558
00:28:20,501 --> 0:28:23,770
以保护其免于恶意软件的方法之一

559
00:28:24,271 --> 0:28:26,273
我想讲讲保护用户免于恶意软件

560
00:28:26,340 --> 0:28:27,474
的其他方法

561
00:28:27,841 --> 0:28:31,178
这是靠识别和阻断恶意软件

562
00:28:31,245 --> 0:28:32,779
使之没有机会运行

563
00:28:34,414 --> 0:28:36,016
现在Mac App Store

564
00:28:36,083 --> 0:28:38,585
是用户寻找和下载新软件的好地方

565
00:28:39,086 --> 0:28:40,988
人们能安心的安装app

566
00:28:41,054 --> 0:28:45,259
知道Apple已采取行动

567
00:28:46,894 --> 0:28:49,196
今年Mac App Store

568
00:28:49,263 --> 0:28:50,230
这很不错

569
00:28:50,364 --> 0:28:53,467
但我们也理解部分开发者需要

570
00:28:53,534 --> 0:28:55,002
Developer ID计划的

571
00:28:56,236 --> 0:28:57,137
两者一起…

572
00:28:57,204 --> 0:28:59,573
门禁和Developer ID

573
00:28:59,640 --> 0:29:02,242
恶意软件传播方面表现出色

574
00:28:59,640 --> 0:29:02,242
恶意软件传播方面表现出色

575
00:29:02,609 --> 0:29:03,443
今天

576
00:29:03,510 --> 0:29:06,246
通过引入app公证

577
00:29:06,413 --> 0:29:08,749
我们让Developer ID

578
00:29:10,484 --> 0:29:13,887
app公证过程设计旨在散布之前

579
00:29:13,954 --> 0:29:17,057
帮助识别阻断恶意软件

580
00:29:17,691 --> 0:29:19,726
同时还保留了

581
00:29:19,793 --> 0:29:21,361
灵活性

582
00:29:22,129 --> 0:29:25,432
这意味着能像现在一样

583
00:29:25,499 --> 0:29:27,501
发布有现在相同功能的app

584
00:29:28,101 --> 0:29:31,205
其中的关键就是

585
00:29:33,774 --> 0:29:36,243
公证服务是执行

586
00:29:36,376 --> 0:29:40,681
Developer ID

587
00:29:41,415 --> 0:29:44,251
其是Developer ID计划

588
00:29:44,618 --> 0:29:46,153
而非app审查

589
00:29:48,121 --> 0:29:49,256
今天开始

590
00:29:49,456 --> 0:29:53,327
开发者能开始上传可发布的内容

591
00:29:53,393 --> 0:29:54,595
到公证服务

592
00:29:55,128 --> 0:29:58,398
假如这些app 安装包

593
00:29:58,465 --> 0:30:01,568
磁盘镜像不包含恶意软件

594
00:29:58,465 --> 0:30:01,568
磁盘镜像不包含恶意软件

595
00:30:01,902 --> 0:30:04,471
公证服务会发布一个公证号

596
00:30:04,838 --> 0:30:06,006
到你的app

597
00:30:06,974 --> 0:30:08,342
公证号能装订

598
00:30:08,408 --> 0:30:10,611
并随app一起发布

599
00:30:10,911 --> 0:30:13,647
门禁首次启动公证过的app时

600
00:30:13,881 --> 0:30:17,584
能验证该公证并提供首次启动体验

601
00:30:19,520 --> 0:30:22,055
现在你在发布之前的开发工作

602
00:30:22,122 --> 0:30:23,690
完全保持不变

603
00:30:27,494 --> 0:30:29,229
你可能已听说 在联合国

604
00:30:29,296 --> 0:30:31,498
未来该过程将是必须的

605
00:30:31,798 --> 0:30:32,933
尽管那是真的

606
00:30:33,000 --> 0:30:35,602
我们现在发布该服务并接受反馈

607
00:30:35,669 --> 0:30:37,804
暂时公证完全是可选的

608
00:30:40,507 --> 0:30:42,943
继续之前 我想强调一点

609
00:30:44,244 --> 0:30:45,712
这不是app审查

610
00:30:46,413 --> 0:30:49,716
公证服务只简单执行一些安全审查

611
00:30:49,783 --> 0:30:52,452
以确保内容可以安全发布

612
00:30:54,421 --> 0:30:55,255
因此…

613
00:30:55,389 --> 0:30:57,724
对开发过程来说 这看来像什么？

614
00:30:58,392 --> 0:31:00,861
这是开发过程的高级

615
00:30:58,392 --> 0:31:00,861
这是开发过程的高级

616
00:31:00,994 --> 0:31:02,262
和简化的概览

617
00:31:03,430 --> 0:31:04,498
左边

618
00:31:04,565 --> 0:31:06,600
开发者在他们的本地系统

619
00:31:06,667 --> 0:31:07,935
迭代开发app

620
00:31:08,068 --> 0:31:12,239
构建特性 调试

621
00:31:13,140 --> 0:31:15,142
当app准备好发布时

622
00:31:16,243 --> 0:31:18,445
用Developer ID

623
00:31:18,679 --> 0:31:20,480
并执行最后的测试

624
00:31:21,415 --> 0:31:22,349
之后…

625
00:31:22,416 --> 0:31:24,685
内容能直接发布给

626
00:31:24,751 --> 0:31:25,586
运行它的用户

627
00:31:25,652 --> 0:31:28,021
或者门禁能验证它没有篡改过

628
00:31:28,388 --> 0:31:30,057
然后用户能运行你的app

629
00:31:30,724 --> 0:31:34,328
要公证该app只需额外的一步

630
00:31:35,529 --> 0:31:38,365
你继续本地开发 和以前一样

631
00:31:39,066 --> 0:31:41,568
一旦用Developer ID

632
00:31:42,069 --> 0:31:44,605
拷贝能上传到Apple公证服务

633
00:31:45,172 --> 0:31:48,342
假如Developer ID

634
00:31:49,209 --> 0:31:50,711
将返回一个公证号

635
00:31:50,878 --> 0:31:54,515
能通过所谓的装订过程

636
00:31:55,816 --> 0:31:57,384
然后装订过的内容

637
00:31:58,585 --> 0:32:00,420
能像以前一样发布

638
00:31:58,585 --> 0:32:00,420
能像以前一样发布

639
00:32:01,021 --> 0:32:02,823
当到达用户系统上时

640
00:32:03,056 --> 0:32:05,058
门禁将验证该公证

641
00:32:05,225 --> 0:32:07,094
并提供新的首次启动体验

642
00:32:08,562 --> 0:32:09,396
现在…

643
00:32:10,664 --> 0:32:12,833
因为这是高度自动化的过程

644
00:32:13,100 --> 0:32:16,170
我们致力于在一小时内返回公证号

645
00:32:16,770 --> 0:32:20,073
但当我们发布时我们将进一步改进

646
00:32:20,140 --> 0:32:21,241
服务速度和质量

647
00:32:22,309 --> 0:32:24,344
我们再讲讲这些安全要求

648
00:32:24,411 --> 0:32:25,479
我之前提过

649
00:32:26,146 --> 0:32:27,014
呃…

650
00:32:27,181 --> 0:32:30,083
首先是没有恶意软件

651
00:32:31,218 --> 0:32:33,620
安全审查

652
00:32:33,687 --> 0:32:35,522
的内容中找到恶意成分

653
00:32:35,689 --> 0:32:37,558
它会立即创建叫做撤销的

654
00:32:37,624 --> 0:32:38,959
特殊公证号

655
00:32:39,393 --> 0:32:41,061
并立即通知开发者

656
00:32:42,429 --> 0:32:43,263
其次…

657
00:32:43,497 --> 0:32:46,066
所有可执行程序都要恰当的签名

658
00:32:46,834 --> 0:32:48,101
确保app到达用户系统时

659
00:32:48,168 --> 0:32:51,538
门禁能验证其没被篡改过

660
00:32:51,972 --> 0:32:54,274
是非常重要的

661
00:32:55,943 --> 0:32:56,777
最后…

662
00:32:57,411 --> 0:32:59,646
所有二进制代码必须进入

663
00:32:59,713 --> 0:33:01,048
强化的运行时

664
00:32:59,713 --> 0:33:01,048
强化的运行时

665
00:33:01,381 --> 0:33:03,150
这样它们能在不削减功能的情况下

666
00:33:03,217 --> 0:33:06,186
受益于操作系统提供的额外防护

667
00:33:07,487 --> 0:33:10,090
假设有准备好公证的app

668
00:33:10,457 --> 0:33:12,326
该如何上传它

669
00:33:12,726 --> 0:33:16,530
其内置于Xcode的存档

670
00:33:16,663 --> 0:33:18,699
如果已经使用它 你基本就搞定了

671
00:33:19,733 --> 0:33:21,969
这里能看到组织者的存档面板

672
00:33:22,169 --> 0:33:24,571
我已经存档了

673
00:33:25,239 --> 0:33:27,341
如果点击右边的发布app按钮

674
00:33:29,409 --> 0:33:31,111
将带我到发布选项

675
00:33:31,845 --> 0:33:33,881
我将继续和以前一样通过

676
00:33:33,947 --> 0:33:35,315
Developer ID

677
00:33:35,916 --> 0:33:37,751
当选择那个时 将有新的选项

678
00:33:37,818 --> 0:33:39,453
以上传到公证服务

679
00:33:40,687 --> 0:33:42,823
点击后将显示进度条

680
00:33:42,890 --> 0:33:45,692
同时Developer ID

681
00:33:46,093 --> 0:33:47,761
上传完成后

682
00:33:48,562 --> 0:33:50,931
将通知你公证开始

683
00:33:52,733 --> 0:33:54,434
此时你能导出app的拷贝

684
00:33:54,501 --> 0:33:56,937
以执行任何你想同时

685
00:33:57,671 --> 0:33:58,839
如果点击关闭

686
00:33:59,106 --> 0:34:00,941
将带你回到存档面板

687
00:33:59,106 --> 0:34:00,941
将带你回到存档面板

688
00:34:01,375 --> 0:34:04,178
可以看到状态切换成处理中

689
00:34:05,479 --> 0:34:06,980
公证完成后

690
00:34:09,416 --> 0:34:12,286
推送通知到达Xcode会通知你

691
00:34:12,418 --> 0:34:13,687
公证完成

692
00:34:14,821 --> 0:34:17,257
Xcode会自动下载公证号

693
00:34:17,591 --> 0:34:18,992
并装订到你的内容

694
00:34:19,159 --> 0:34:21,094
下次前往存档面板

695
00:34:21,161 --> 0:34:22,362
点击导出

696
00:34:22,429 --> 0:34:26,300
你就有一个装订了

697
00:34:27,734 --> 0:34:29,570
当用户首次启动app时

698
00:34:29,870 --> 0:34:32,039
他们会看见包含app图标的

699
00:34:32,105 --> 0:34:33,940
新版的首次启动对话框

700
00:34:35,742 --> 0:34:39,545
我们了解不是每个人都用

701
00:34:39,880 --> 0:34:41,447
尽管Xcode很有效

702
00:34:41,514 --> 0:34:43,650
Xcode工作流现在预览版中提供

703
00:34:44,284 --> 0:34:46,353
我们还构建了一套命令行工具

704
00:34:46,485 --> 0:34:47,588
执行其中的每个步骤

705
00:34:47,654 --> 0:34:50,056
可以集成到任何其他工作流

706
00:34:50,791 --> 0:34:53,760
第一部是上传拷贝到公证服务

707
00:34:56,263 --> 0:35:01,201
公证服务能接收压缩文件

708
00:34:56,263 --> 0:35:01,201
公证服务能接收压缩文件

709
00:35:02,236 --> 0:35:03,770
如果有一个原始app

710
00:35:03,904 --> 0:35:06,607
得在上传公证服务前压缩它

711
00:35:07,341 --> 0:35:09,977
公证服务要用到的工具

712
00:35:10,878 --> 0:35:12,880
这里能看见命令行提示

713
00:35:13,013 --> 0:35:16,049
发送Watch Grass Grow

714
00:35:17,117 --> 0:35:19,353
注意altool需要授权

715
00:35:19,486 --> 0:35:21,955
但你能通过环境变量传入密码信息

716
00:35:22,022 --> 0:35:22,956
或钥匙串

717
00:35:24,024 --> 0:35:25,325
一旦上传完成

718
00:35:25,759 --> 0:35:28,962
你将收到一个UUID

719
00:35:30,230 --> 0:35:32,633
也能传回altool

720
00:35:32,699 --> 0:35:34,535
以检查公证的状态

721
00:35:35,869 --> 0:35:38,605
这里我们能看见另一个

722
00:35:38,839 --> 0:35:40,641
以检查公证状态

723
00:35:41,875 --> 0:35:44,144
这里能看到公证过程

724
00:35:44,344 --> 0:35:45,312
已成功完成

725
00:35:45,646 --> 0:35:47,814
重要的是还有一份

726
00:35:47,881 --> 0:35:49,816
来自公证服务的日志文件

727
00:35:50,150 --> 0:35:52,719
这是检查告警

728
00:35:53,086 --> 0:35:56,757
并发现公证号里究竟

729
00:35:57,024 --> 0:36:00,394
如此能确保软件包里的

730
00:35:57,024 --> 0:36:00,394
如此能确保软件包里的

731
00:36:03,030 --> 0:36:05,299
发布前的最后一步

732
00:36:05,365 --> 0:36:07,201
是装订公证号

733
00:36:07,267 --> 0:36:09,036
到要发布的内容上

734
00:36:09,803 --> 0:36:11,805
有一个叫做装订机的特殊工具

735
00:36:12,339 --> 0:36:15,642
能直接装订公证号到app

736
00:36:15,976 --> 0:36:18,412
磁盘镜像和安装包

737
00:36:18,979 --> 0:36:21,281
装订机只需一步就能

738
00:36:21,782 --> 0:36:24,151
获取公证号并附加到发布内容

739
00:36:24,718 --> 0:36:27,621
这里能看到我正把公证号

740
00:36:28,288 --> 0:36:31,058
完成后我能发布该磁盘镜像

741
00:36:31,625 --> 0:36:32,559
用户

742
00:36:32,693 --> 0:36:34,528
将收到公证过的app

743
00:36:37,631 --> 0:36:39,032
提醒一下

744
00:36:39,800 --> 0:36:42,603
macOS Mojave里

745
00:36:42,836 --> 0:36:45,239
未公证的app保留

746
00:36:45,305 --> 0:36:48,041
app显示的首次启动对话框

747
00:36:48,775 --> 0:36:50,410
并为公证过的app

748
00:36:51,278 --> 0:36:54,915
显示新版的带有app图标的对话框

749
00:36:56,583 --> 0:36:59,219
如果用户确实下载了带有

750
00:36:59,520 --> 0:37:00,988
恶意内容的软件

751
00:36:59,520 --> 0:37:00,988
恶意内容的软件

752
00:37:01,822 --> 0:37:04,291
软件不会运行 他们将收到

753
00:37:05,692 --> 0:37:06,560
这个告警

754
00:37:07,361 --> 0:37:08,996
这不是新的功能

755
00:37:09,263 --> 0:37:10,964
macOS一直有

756
00:37:11,698 --> 0:37:14,268
阻断这类软件的功能

757
00:37:14,501 --> 0:37:15,335
但是…

758
00:37:16,336 --> 0:37:18,138
公证服务让我们能更早识别

759
00:37:18,205 --> 0:37:22,576
特定的恶意内容并提供更好体验

760
00:37:22,843 --> 0:37:25,913
而非开发者撤销

761
00:37:27,281 --> 0:37:29,583
这就是如何构建公证过的app

762
00:37:29,950 --> 0:37:31,985
以及如何保证Mac用户更安全

763
00:37:33,053 --> 0:37:33,987
你能做什么？

764
00:37:34,621 --> 0:37:37,124
公证服务现在已经可用

765
00:37:37,758 --> 0:37:40,327
请随意上传app

766
00:37:41,895 --> 0:37:44,164
没必要等到下次软件更新

767
00:37:44,398 --> 0:37:46,533
服务也能检查你以往的版本

768
00:37:46,600 --> 0:37:48,035
发送任何有的东西

769
00:37:49,136 --> 0:37:51,371
服务发布时欢迎反馈

770
00:37:51,438 --> 0:37:53,440
如果公证服务有任何问题

771
00:37:53,507 --> 0:37:54,341
请到实验室

772
00:37:54,408 --> 0:37:55,943
我们很乐意为你解决它

773
00:37:56,944 --> 0:37:59,746
记住签名问题现在还只是告警

774
00:37:59,947 --> 0:38:01,782
将来会成为错误

775
00:37:59,947 --> 0:38:01,782
将来会成为错误

776
00:38:02,716 --> 0:38:05,252
macOS Mojave

777
00:38:05,619 --> 0:38:08,522
门禁将向用户推荐公证过的app

778
00:38:08,989 --> 0:38:10,724
但在以后的macOS版本中

779
00:38:10,991 --> 0:38:13,794
门禁将默认要求软件公证过

780
00:38:15,596 --> 0:38:16,763
门禁的内容就是这些

781
00:38:16,830 --> 0:38:19,166
我要交给Pierre做结束语

782
00:38:28,175 --> 0:38:29,042
谢谢Garrett

783
00:38:30,310 --> 0:38:32,679
让我们回顾一下讲话的要点

784
00:38:33,981 --> 0:38:35,916
首先 macOS Mojave

785
00:38:36,283 --> 0:38:37,985
用户现在能控制

786
00:38:38,051 --> 0:38:41,288
app访问其个人数据的方式

787
00:38:42,456 --> 0:38:45,959
意味着app得准备处理他们的决定

788
00:38:46,293 --> 0:38:50,163
首先用户需要一些时间才能给出答案

789
00:38:51,031 --> 0:38:53,534
其次他们可能拒绝请求

790
00:38:54,902 --> 0:38:55,736
此外…

791
00:38:56,103 --> 0:38:58,472
确保用新的设置和目的描述

792
00:38:59,072 --> 0:39:02,409
让app要访问的内容和访问的理由

793
00:38:59,072 --> 0:39:02,409
让app要访问的内容和访问的理由

794
00:39:03,377 --> 0:39:06,813
对用户保持透明

795
00:39:07,648 --> 0:39:10,984
还有确保及时请求数据访问权限

796
00:39:11,051 --> 0:39:14,621
以便用户理解访问的理由

797
00:39:15,455 --> 0:39:17,658
如此用户更有可能授权访问

798
00:39:19,393 --> 0:39:22,362
我们有新的app能使用的运行时

799
00:39:23,130 --> 0:39:26,667
它有效提升app安全性和透明性

800
00:39:26,900 --> 0:39:28,769
其不会削减

801
00:39:28,836 --> 0:39:29,937
app现已有的功能

802
00:39:30,070 --> 0:39:32,105
它要求主动采用它们

803
00:39:34,107 --> 0:39:34,975
最后

804
00:39:35,042 --> 0:39:37,711
请协助让用户感觉更安全

805
00:39:38,478 --> 0:39:42,416
通过app公证尽快阻断恶意软件

806
00:39:43,383 --> 0:39:46,687
Developer ID公证服务

807
00:39:48,388 --> 0:39:50,224
如果需要讲解的更多内容

808
00:39:50,591 --> 0:39:52,292
请关注开发者网站

809
00:39:53,126 --> 0:39:54,127
我们有个实验室

810
00:39:54,194 --> 0:39:56,263
就在演讲后的3:00到6:00

811
00:39:56,864 --> 0:39:59,633
明天9:00到12:00还有一个

812
00:40:00,234 --> 0:40:02,202
最后周四还有一个

813
00:40:02,269 --> 0:40:04,671
关于签名和发布

814
00:40:05,939 --> 0:40:07,674
再次感谢你们到来

815
00:40:07,808 --> 0:40:09,276
希望你们在本周
