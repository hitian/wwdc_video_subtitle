1
00:00:17,050 --> 0:00:18,485
（AVContentKeySession

2
00:00:18,552 --> 0:00:20,187
你好 感谢你的参与

3
00:00:20,254 --> 0:00:24,224
我是Anil Katti

4
00:00:25,292 --> 0:00:28,395
今天 我们来谈谈

5
00:00:28,462 --> 0:00:32,366
有关应用它的一些最佳实践

6
00:00:34,067 --> 0:00:37,271
AVContentKeySession是一个

7
00:00:37,671 --> 0:00:40,574
用于Apple平台上

8
00:00:40,641 --> 0:00:41,942
传递FairPlay Streaming密钥

9
00:00:43,110 --> 0:00:44,077
（议程）

10
00:00:44,144 --> 0:00:46,213
下面是我们将要谈到的议题

11
00:00:46,446 --> 0:00:50,551
首先概述FairPlay Streaming

12
00:00:50,918 --> 0:00:54,688
然后介绍一些用

13
00:00:54,755 --> 0:00:56,223
优化回放的方法

14
00:00:57,191 --> 0:01:01,261
最后谈谈FairPlay Streaming

15
00:00:57,191 --> 0:01:01,261
最后谈谈FairPlay Streaming

16
00:01:01,528 --> 0:01:05,065
并随时回答一些来自开发人员的

17
00:01:05,132 --> 0:01:06,633
常见问题

18
00:01:07,768 --> 0:01:09,469
我们开始吧

19
00:01:09,536 --> 0:01:10,737
（FairPlay Streaming概述）

20
00:01:10,804 --> 0:01:13,707
FairPlay Streaming

21
00:01:13,774 --> 0:01:17,211
来帮助保护传送到

22
00:01:18,212 --> 0:01:21,882
FairPlay Streaming

23
00:01:22,182 --> 0:01:26,887
app需要遵循这些步骤

24
00:01:26,954 --> 0:01:30,657
从而使平台可以对加密的

25
00:01:32,626 --> 0:01:34,962
在传递FairPlay Streaming密钥时

26
00:01:35,028 --> 0:01:40,067
你的app充当平台

27
00:01:41,168 --> 0:01:44,104
当它收到来自AVFoundation的

28
00:01:44,371 --> 0:01:49,476
它的响应是发出加密密钥请求

29
00:01:49,810 --> 0:01:51,745
也被称为SPC

30
00:01:52,145 --> 0:01:55,215
SPC然后被发送到密钥服务器

31
00:01:55,816 --> 0:01:59,987
密钥服务器用加密密钥

32
00:02:00,220 --> 0:02:01,588
也被称为CKC

33
00:02:02,489 --> 0:02:06,426
最后 该app将CKC

34
00:02:06,593 --> 0:02:09,729
以便它可以开始解密和播放

35
00:02:11,265 --> 0:02:15,569
直到最近 app还在使用通用的

36
00:02:15,636 --> 0:02:17,204
称为AVAssetResourceLoader

37
00:02:17,571 --> 0:02:19,339
来提供内容解密密钥

38
00:02:20,941 --> 0:02:24,711
去年我们推出了

39
00:02:24,912 --> 0:02:26,547
称为AVContentKeySession

40
00:02:26,613 --> 0:02:29,983
它是专门针对内容解密密钥设计的

41
00:02:31,785 --> 0:02:35,022
AVContentKeySession

42
00:02:35,822 --> 0:02:38,592
一是简化密钥加载过程

43
00:02:38,926 --> 0:02:41,028
并在内容解密密钥的生命周期内

44
00:02:41,094 --> 0:02:43,697
为app提供更好的控制

45
00:02:44,498 --> 0:02:48,869
二是为新的内容保护功能建一个平台

46
00:02:51,338 --> 0:02:54,208
AVContentKeySession

47
00:02:54,541 --> 0:02:57,611
在我们的平台上传递的大部分

48
00:02:57,978 --> 0:03:01,682
是通过AVContentKeySession传递的

49
00:02:57,978 --> 0:03:01,682
是通过AVContentKeySession传递的

50
00:03:03,417 --> 0:03:06,486
这个API帮助开发人员

51
00:03:06,553 --> 0:03:07,754
优化了密钥传递

52
00:03:08,889 --> 0:03:12,159
我将介绍一些你可以从这个API中

53
00:03:12,593 --> 0:03:15,929
但首先让我们看看

54
00:03:17,731 --> 0:03:22,135
使用AVAssetResourceLoader

55
00:03:22,202 --> 0:03:24,838
在AVFoundation

56
00:03:25,072 --> 0:03:27,674
并发送按需加载请求

57
00:03:28,942 --> 0:03:33,113
这通常发生在AVFoundation

58
00:03:33,180 --> 0:03:35,582
发现内容是加密的

59
00:03:36,250 --> 0:03:39,586
此外 AVFoundation

60
00:03:39,786 --> 0:03:41,355
发送这些密钥的加载请求

61
00:03:41,922 --> 0:03:45,459
例如 AVFoundation

62
00:03:45,526 --> 0:03:48,195
如果在回放过程中

63
00:03:48,562 --> 0:03:51,331
切换到使用不同密钥的弧度

64
00:03:52,466 --> 0:03:55,068
AVContentKeySession

65
00:03:56,236 --> 0:03:59,873
它将密钥加载与媒体加载

66
00:03:59,940 --> 0:04:03,810
并使app对密钥加载时间

67
00:03:59,940 --> 0:04:03,810
并使app对密钥加载时间

68
00:04:05,279 --> 0:04:09,183
AVContentKeySession

69
00:04:09,249 --> 0:04:11,251
在任何时候启动密钥加载

70
00:04:12,252 --> 0:04:13,987
这样就开辟了新的用途

71
00:04:14,488 --> 0:04:17,124
允许app优化密钥传递

72
00:04:17,190 --> 0:04:19,959
并改进回放体验的多个方面

73
00:04:22,696 --> 0:04:27,034
AVContentKeySession

74
00:04:28,669 --> 0:04:33,473
不像过去等待AVFoundation

75
00:04:33,974 --> 0:04:38,579
你可以用AVContentKeySession

76
00:04:38,645 --> 0:04:42,449
主动加载你基于用户操作

77
00:04:42,516 --> 0:04:45,185
预测可能不久将需要的密钥

78
00:04:46,720 --> 0:04:49,990
你甚至可以在用户选择

79
00:04:51,191 --> 0:04:53,894
我们称其为密钥预载或预热

80
00:04:55,729 --> 0:04:57,664
此外 如果你的内容

81
00:04:57,731 --> 0:05:00,734
跨越不同弧度使用多个密钥

82
00:04:57,731 --> 0:05:00,734
跨越不同弧度使用多个密钥

83
00:05:00,801 --> 0:05:05,005
你可以在与密钥服务器交涉之前

84
00:05:06,073 --> 0:05:08,909
这可以减少密钥服务器上的一些负载

85
00:05:08,976 --> 0:05:11,545
并且消除了每个密钥往返的延迟

86
00:05:14,915 --> 0:05:18,919
你可以通过

87
00:05:18,986 --> 0:05:21,355
调用processContentKeyRequest

88
00:05:22,723 --> 0:05:24,124
一旦你调用这个方法

89
00:05:24,491 --> 0:05:28,529
AVContentKeySession

90
00:05:28,695 --> 0:05:30,430
向你发一个

91
00:05:31,798 --> 0:05:36,637
AVContentKeySession允许你

92
00:05:36,703 --> 0:05:39,206
比如发加密的密钥请求

93
00:05:39,273 --> 0:05:41,875
和以加密的密钥响应

94
00:05:44,778 --> 0:05:49,082
现在我们假设

95
00:05:49,349 --> 0:05:53,253
有没有可能在回放开始后

96
00:05:54,154 --> 0:05:55,422
这是可能的

97
00:05:56,323 --> 0:06:00,327
app可能会收到按需加载请求

98
00:05:56,323 --> 0:06:00,327
app可能会收到按需加载请求

99
00:06:00,394 --> 0:06:02,563
例如 如果回放路线改变

100
00:06:03,697 --> 0:06:08,435
请注意 用户可以决定

101
00:06:08,802 --> 0:06:11,872
或插入

102
00:06:12,339 --> 0:06:16,009
在这些情况下

103
00:06:18,078 --> 0:06:23,784
因此 app应始终准备好

104
00:06:24,051 --> 0:06:25,619
即使它已预先加载密钥

105
00:06:28,922 --> 0:06:31,725
另一个有关这个主题的常见问题是

106
00:06:32,092 --> 0:06:37,030
app如何预先加载播放期间

107
00:06:38,632 --> 0:06:42,736
为了预加载密钥

108
00:06:43,270 --> 0:06:47,674
也就是在HLS播放列表的

109
00:06:49,243 --> 0:06:52,579
我们建议你以带外方式获取所有

110
00:06:52,746 --> 0:06:56,850
你的内容

111
00:06:58,185 --> 0:07:03,190
另一种办法是在创作内容时

112
00:06:58,185 --> 0:07:03,190
另一种办法是在创作内容时

113
00:07:03,457 --> 0:07:06,293
包括在主播放列表中作为会话密钥

114
00:07:06,360 --> 0:07:10,964
并在AVAssetResourceLoader上使用

115
00:07:12,799 --> 0:07:14,735
说到这里我想指出

116
00:07:14,801 --> 0:07:19,373
我们有一个关于优化HLS性能的

117
00:07:19,439 --> 0:07:20,574
不只是密钥交付

118
00:07:21,642 --> 0:07:23,377
你一定要看看

119
00:07:26,513 --> 0:07:28,081
预加载说完了 看下面

120
00:07:28,148 --> 0:07:32,419
AVContentKeySession

121
00:07:33,187 --> 0:07:34,421
大家知道怎么做？

122
00:07:35,222 --> 0:07:39,593
你可以使用AVContentKeySession来分散

123
00:07:39,993 --> 0:07:42,696
正在传输实时内容的客户的

124
00:07:44,031 --> 0:07:48,335
通常 直播流会定期轮换密钥

125
00:07:48,402 --> 0:07:51,471
以为内容添加额外的保护层

126
00:07:53,407 --> 0:07:57,144
可以想像

127
00:07:57,444 --> 0:07:59,313
这些密钥会同时出现

128
00:07:59,546 --> 0:08:00,514
当发生这种情况时

129
00:07:59,546 --> 0:08:00,514
当发生这种情况时

130
00:08:00,581 --> 0:08:04,651
数百万用户同时请求密钥

131
00:08:04,718 --> 0:08:07,588
导致密钥服务器上的巨大冲动负载

132
00:08:08,856 --> 0:08:13,560
当你在请求出现前并在播放列表中

133
00:08:13,627 --> 0:08:15,028
在一个小时间窗口内

134
00:08:15,095 --> 0:08:18,298
分散密钥请求事件

135
00:08:18,599 --> 0:08:21,969
基本上 你在对到达

136
00:08:24,438 --> 0:08:26,573
我们详细介绍了这个例子

137
00:08:26,640 --> 0:08:30,677
并在去年HLS演讲期间

138
00:08:30,744 --> 0:08:32,880
因此 查看

139
00:08:32,946 --> 0:08:36,517
或WWDC app上录制的片段

140
00:08:38,818 --> 0:08:43,023
除了允许你管理和传送

141
00:08:43,490 --> 0:08:45,325
另外AVContentKeySession也可以

142
00:08:45,392 --> 0:08:49,630
作为新的FairPlay Streaming

143
00:08:50,664 --> 0:08:52,900
去年我们发布了一个这样的新功能

144
00:08:53,967 --> 0:08:55,602
我们称之为离线出租

145
00:08:55,669 --> 0:08:57,004
（什么是离线出租？）

146
00:08:57,070 --> 0:08:59,573
离线租赁是一种

147
00:08:59,640 --> 0:09:03,177
它允许你指定两个到期持续时间

148
00:08:59,640 --> 0:09:03,177
它允许你指定两个到期持续时间

149
00:09:03,243 --> 0:09:07,114
永久性密钥上的存储和回放时间

150
00:09:08,916 --> 0:09:13,720
存储时间指定密钥在你的存储器中时

151
00:09:14,154 --> 0:09:16,123
在用于回放之前

152
00:09:16,490 --> 0:09:19,026
你希望它有效的时间

153
00:09:20,594 --> 0:09:23,063
这个数字通常很大 比如30天

154
00:09:24,765 --> 0:09:26,600
而回放时间

155
00:09:27,367 --> 0:09:30,370
指定回放后

156
00:09:30,671 --> 0:09:32,339
你希望密钥有效的时间

157
00:09:32,906 --> 0:09:35,442
它通常比存储时间短

158
00:09:35,509 --> 0:09:36,777
例如 24小时

159
00:09:38,946 --> 0:09:42,716
此功能让你在创建持久性密钥时

160
00:09:42,950 --> 0:09:45,018
指定此类到期持续时间

161
00:09:45,085 --> 0:09:48,789
平台确保遵守两次到期时间

162
00:09:49,256 --> 0:09:50,858
即使设备处于离线状态

163
00:09:52,192 --> 0:09:53,427
你可能想知道

164
00:09:53,493 --> 0:09:56,730
如何以及在哪里

165
00:09:58,131 --> 0:10:03,070
FairPlay为此推出了

166
00:09:58,131 --> 0:10:03,070
FairPlay为此推出了

167
00:10:04,037 --> 0:10:06,106
这必须在请求持久性密钥时

168
00:10:06,340 --> 0:10:08,942
使用过的CKC中发出信号

169
00:10:11,912 --> 0:10:15,048
就代码而言 通过在AVPersistableContent

170
00:10:15,349 --> 0:10:19,186
你将生成一个持久性密钥

171
00:10:20,387 --> 0:10:22,823
这将返回一个

172
00:10:23,156 --> 0:10:25,359
你保存在你的app存储中

173
00:10:25,759 --> 0:10:28,862
并用它来回答未来的密钥加载请求

174
00:10:30,597 --> 0:10:34,234
请注意

175
00:10:34,434 --> 0:10:35,936
在我们的例子中是30天

176
00:10:37,437 --> 0:10:41,542
因此 当你使用

177
00:10:42,009 --> 0:10:44,912
你可能会通过新的代理回调

178
00:10:45,412 --> 0:10:47,614
收到一个更新过的持久性密钥

179
00:10:49,383 --> 0:10:51,218
当涉及委托回调时

180
00:10:51,285 --> 0:10:53,654
你应该丢弃原始的持久密钥

181
00:10:54,054 --> 0:10:57,257
把此更新后的持久性密钥

182
00:10:58,926 --> 0:11:02,930
并用它来回答未来的密钥加载请求

183
00:10:58,926 --> 0:11:02,930
并用它来回答未来的密钥加载请求

184
00:11:04,765 --> 0:11:07,534
请注意

185
00:11:07,601 --> 0:11:11,305
到播放持续时间结束

186
00:11:13,841 --> 0:11:18,212
现在 让我们换个角度

187
00:11:19,980 --> 0:11:22,749
从改善播放体验的角度来看

188
00:11:23,016 --> 0:11:26,253
错误处理是最重要的主题之一

189
00:11:27,988 --> 0:11:30,858
成功加载密钥涉及许多步骤

190
00:11:31,158 --> 0:11:34,094
不时的失败在所难免

191
00:11:35,128 --> 0:11:36,530
所以 当失败发生时

192
00:11:36,597 --> 0:11:40,467
你该做的第一件事是

193
00:11:40,734 --> 0:11:44,204
或AVAssetResourceLoadingRequest

194
00:11:45,539 --> 0:11:47,774
有些错误是致命的 有些则不是

195
00:11:48,075 --> 0:11:50,244
你应该帮助平台做出决定

196
00:11:51,645 --> 0:11:55,415
你应该做的另一件事是

197
00:11:55,616 --> 0:11:58,485
调查根本原因 并尝试减轻错误

198
00:11:58,552 --> 0:12:02,422
让你的用户在我们的平台上

199
00:11:58,552 --> 0:12:02,422
让你的用户在我们的平台上

200
00:12:04,525 --> 0:12:06,894
我还建议你看看

201
00:12:06,960 --> 0:12:09,029
我们去年录制的一段资料

202
00:12:09,096 --> 0:12:11,431
以了解更多关于错误处理的

203
00:12:15,135 --> 0:12:18,238
多年来 我们看到

204
00:12:18,305 --> 0:12:20,440
开发者掉入了一些陷阱

205
00:12:21,074 --> 0:12:24,711
我们看到过

206
00:12:25,679 --> 0:12:28,682
AVFoundation

207
00:12:28,749 --> 0:12:31,685
你应该尽快提供回复

208
00:12:32,853 --> 0:12:36,156
密钥传送延迟可能导致回放超时

209
00:12:37,391 --> 0:12:40,961
顺便说一下 通过调查你的

210
00:12:41,228 --> 0:12:44,031
你应该能够识别和调试超时

211
00:12:46,733 --> 0:12:49,269
另一个陷阱围绕着HDCP执法

212
00:12:50,270 --> 0:12:54,708
请务必记住你的内容的HDCP要求

213
00:12:55,042 --> 0:12:59,613
是在你的密钥服务器的

214
00:13:01,348 --> 0:13:04,518
如果你希望针对不同的弧度

215
00:13:04,585 --> 0:13:05,919
执行不同的HDCP级别

216
00:13:05,986 --> 0:13:08,088
你应该用这些弧度

217
00:13:08,155 --> 0:13:09,189
指定不同密钥标识符

218
00:13:09,857 --> 0:13:12,826
并从你的密钥服务器

219
00:13:15,562 --> 0:13:19,700
最后 你在以持久性密钥

220
00:13:19,766 --> 0:13:20,968
应该小心

221
00:13:21,768 --> 0:13:25,839
因为持久性密钥与生成它的设备绑定

222
00:13:26,440 --> 0:13:27,474
例如

223
00:13:27,708 --> 0:13:31,812
你不应该使用持久性密钥

224
00:13:31,879 --> 0:13:33,380
密钥加载请求

225
00:13:34,848 --> 0:13:36,917
这样做会导致回放失败

226
00:13:39,019 --> 0:13:42,189
我们在iOS 11.2中

227
00:13:42,422 --> 0:13:46,360
帮助你尽早避免或解决这类问题

228
00:13:47,227 --> 0:13:49,930
让我通过一些代码片段来解释

229
00:13:52,199 --> 0:13:53,967
如果你正在使用

230
00:13:54,034 --> 0:13:57,004
现在你甚至无法做到

231
00:13:57,337 --> 0:13:59,873
RequestPersistableContentKey

232
00:14:00,140 --> 0:14:04,878
如果AVContentKeyRequest

233
00:14:07,047 --> 0:14:10,250
因此 请求 PersistableContent

234
00:14:10,317 --> 0:14:14,354
你的密钥服务器上的在线

235
00:14:16,890 --> 0:14:19,026
如果你使用AVAssetResourceLoader

236
00:14:19,593 --> 0:14:21,995
然后用持久性密钥数据blob

237
00:14:22,062 --> 0:14:23,030
你应该检查

238
00:14:23,096 --> 0:14:27,167
新引入的

239
00:14:27,234 --> 0:14:30,137
持久性密钥是否被列

240
00:14:31,738 --> 0:14:35,275
我希望我们提供了

241
00:14:35,342 --> 0:14:37,778
并澄清了几个你可能遇到的一些问题

242
00:14:38,178 --> 0:14:42,216
总结一下 我们介绍了

243
00:14:42,683 --> 0:14:46,987
我们看到了如何使用

244
00:14:47,287 --> 0:14:48,856
并扩展直播

245
00:14:50,023 --> 0:14:52,192
我们谈了一点离线租赁

246
00:14:52,259 --> 0:14:55,128
它究竟是什么以及如何以正确地使用

247
00:14:56,230 --> 0:15:00,033
我们最后强调了错误处理的最佳实践

248
00:14:56,230 --> 0:15:00,033
我们最后强调了错误处理的最佳实践

249
00:15:00,100 --> 0:15:02,135
同时提供

250
00:15:02,703 --> 0:15:05,105
以及你应该注意的常见陷阱

251
00:15:08,675 --> 0:15:09,910
谢谢你的收听

252
00:15:09,977 --> 0:15:13,814
也请访问developer.apple.com

253
00:15:13,881 --> 0:15:15,249
和其他相关演讲

254
00:15:15,582 --> 0:15:16,483
谢谢
