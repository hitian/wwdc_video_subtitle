1
00:00:07,516 --> 0:00:14,500
[ 音乐 ]

2
00:00:18,316 --> 0:00:21,796
&gt;&gt; 女士们 先生们

3
00:00:21,796 --> 0:00:22,946
有请软件副总裁

4
00:00:22,946 --> 0:00:23,976
Sebastian Marineau-Mes

5
00:00:24,516 --> 0:00:31,796
[ 掌声 ]

6
00:00:32,296 --> 0:00:34,136
&gt;&gt; 大家下午好

7
00:00:34,606 --> 0:00:36,046
欢迎各位出席

8
00:00:36,046 --> 0:00:38,416
WWDC 2018 的下午讨论会

9
00:00:39,166 --> 0:00:40,906
今天上午的讨论会

10
00:00:40,906 --> 0:00:42,226
十分精彩

11
00:00:42,446 --> 0:00:43,476
我想你们都喜欢

12
00:00:43,476 --> 0:00:44,446
上午的讲演吧

13
00:00:44,546 --> 0:00:45,456
我们展示了很多

14
00:00:45,456 --> 0:00:46,086
很棒的内容

15
00:00:46,086 --> 0:00:48,166
我想你们已经看到

16
00:00:48,166 --> 0:00:49,736
2018 年是热切关注

17
00:00:49,736 --> 0:00:51,516
整个生态系统的基础的一年

18
00:00:51,516 --> 0:00:53,586
我们拓宽了

19
00:00:53,586 --> 0:00:55,816
关键技术领域的边界

20
00:00:56,636 --> 0:01:00,326
我们引入了大量的 API 和功能 从而提供了

21
00:00:56,636 --> 0:01:00,326
我们引入了大量的 API 和功能 从而提供了

22
00:01:00,326 --> 0:01:02,356
许多全新的体验

23
00:01:02,356 --> 0:01:06,566
涵盖机器学习 AR 高性能图形处理

24
00:01:06,566 --> 0:01:08,446
新的开发工具等等

25
00:01:08,446 --> 0:01:09,236
领域十分广泛

26
00:01:10,146 --> 0:01:13,456
API 中的许多改进 都适用于我们

27
00:01:13,456 --> 0:01:15,396
所有的操作系统

28
00:01:15,396 --> 0:01:16,736
因此每个操作系统都得以共同发展

29
00:01:17,116 --> 0:01:18,856
此外 iCloud 提供了

30
00:01:18,856 --> 0:01:20,496
一种结构 使我们的所有设备

31
00:01:20,496 --> 0:01:23,836
都能获得统一且一致的体验

32
00:01:24,956 --> 0:01:27,166
在 iOS 12 中 我们看到了大量

33
00:01:27,166 --> 0:01:28,126
令人难以置信的新功能

34
00:01:28,126 --> 0:01:29,706
包括 AR 中的新功能

35
00:01:29,706 --> 0:01:31,476
“信息” App 中的相机特效

36
00:01:31,476 --> 0:01:32,906
FaceTime 群聊

37
00:01:33,276 --> 0:01:35,756
屏幕使用时间数据

38
00:01:35,976 --> 0:01:38,136
功能更丰富的“照片” App

39
00:01:38,136 --> 0:01:40,946
当然还有对性能的显著提升

40
00:01:41,906 --> 0:01:44,186
在 macOS 中

41
00:01:44,186 --> 0:01:46,266
我们很兴奋地引入了深色模式

42
00:01:46,556 --> 0:01:48,246
桌面上“访达”全新的功能

43
00:01:48,736 --> 0:01:51,246
诸如“News”和“股市”的新 App

44
00:01:51,246 --> 0:01:53,306
重新构思设计的 Mac 版 App Store

45
00:01:53,306 --> 0:01:55,146
增强的隐私和安全保护

46
00:01:55,146 --> 0:01:58,406
watchOS 5 带来了

47
00:01:58,496 --> 0:01:59,876
可定制的互动通知功能

48
00:01:59,876 --> 0:02:02,166
对 App 内容的支持

49
00:01:59,876 --> 0:02:02,166
对 App 内容的支持

50
00:02:02,166 --> 0:02:03,906
Siri 表盘中的“捷径”功能

51
00:02:04,006 --> 0:02:05,966
背景音频模式

52
00:02:05,966 --> 0:02:08,626
以及改进的体能训练 API

53
00:02:08,626 --> 0:02:12,526
在 Apple tvOS 中

54
00:02:12,526 --> 0:02:14,276
我们加入了对“杜比全景声”的支持

55
00:02:14,276 --> 0:02:16,016
这样视频 App 就可以提供

56
00:02:16,016 --> 0:02:16,736
沉浸式的音频体验

57
00:02:16,736 --> 0:02:18,386
我们在今天早上 体验了一下效果 真的很棒

58
00:02:18,886 --> 0:02:20,636
iOS 设备的安全密码共享

59
00:02:20,636 --> 0:02:22,596
使你可以轻松地在 Apple TV App 

60
00:02:22,596 --> 0:02:23,686
VPP 支持以及

61
00:02:23,686 --> 0:02:26,376
UIKit 和 TV MLKit 的增强功能之间

62
00:02:26,376 --> 0:02:28,416
进行操作

63
00:02:28,416 --> 0:02:30,816
从而更轻松地构建

64
00:02:30,816 --> 0:02:32,136
视觉和体验俱佳的

65
00:02:32,136 --> 0:02:33,296
原生 App

66
00:02:34,526 --> 0:02:36,526
我们创造了优秀的平台

67
00:02:36,526 --> 0:02:38,156
真正影响世界的

68
00:02:38,466 --> 0:02:39,676
是你们的 App

69
00:02:39,676 --> 0:02:40,866
我们的生态系统的

70
00:02:40,866 --> 0:02:42,196
广度和规模

71
00:02:42,196 --> 0:02:44,126
使我们成为用户生活中

72
00:02:44,126 --> 0:02:46,166
必不可少的一部分

73
00:02:47,016 --> 0:02:48,386
无论是帮助他们探索创造力

74
00:02:48,386 --> 0:02:52,956
与最关心的人取得联系

75
00:02:52,956 --> 0:02:54,276
还是改变医疗保健服务的提供方式

76
00:02:54,276 --> 0:02:56,656
我们共同关注

77
00:02:56,656 --> 0:02:58,536
用户生活中

78
00:02:58,536 --> 0:03:00,416
十分重要的方方面面

79
00:02:58,536 --> 0:03:00,416
十分重要的方方面面

80
00:03:00,416 --> 0:03:02,396
并为他们提供了出色的体验

81
00:03:03,586 --> 0:03:04,966
我们认为 当技术改善每一个人的生活的时候

82
00:03:05,016 --> 0:03:07,576
它才是最强大的

83
00:03:08,506 --> 0:03:10,116
因此 我们自始至终致力于

84
00:03:10,116 --> 0:03:13,456
让每一款 Apple 产品都可用且易用

85
00:03:14,176 --> 0:03:15,826
为了使我们的平台

86
00:03:16,226 --> 0:03:18,026
以及你们所有的 App

87
00:03:18,026 --> 0:03:19,816
都方便使用

88
00:03:19,816 --> 0:03:21,166
我们提供了强大的功能

89
00:03:21,166 --> 0:03:22,496
并且希望你们能一直利用这些功能

90
00:03:22,866 --> 0:03:24,996
因为这对那些用户来说 是非常重要的

91
00:03:26,416 --> 0:03:28,166
我们的用户也将他们的

92
00:03:28,166 --> 0:03:29,786
最宝贵的数据托付给我们

93
00:03:30,216 --> 0:03:31,676
所以在 Apple 我们不断深入地思考

94
00:03:31,676 --> 0:03:33,096
隐私和安全问题

95
00:03:33,566 --> 0:03:35,216
我想邀请 Katie 上台

96
00:03:35,216 --> 0:03:36,846
与你们继续讨论这一点

97
00:03:36,846 --> 0:03:36,976
Katie

98
00:03:37,516 --> 0:03:45,096
[ 掌声 ]

99
00:03:45,596 --> 0:03:46,246
&gt;&gt; 谢谢 Sebastian

100
00:03:46,246 --> 0:03:49,176
提到隐私我们就会考虑

101
00:03:49,176 --> 0:03:51,066
如何在我们的产品和服务中

102
00:03:51,066 --> 0:03:52,646
建立隐私保护

103
00:03:52,646 --> 0:03:54,376
可能会有很多细节

104
00:03:54,376 --> 0:03:55,586
需要考虑

105
00:03:55,906 --> 0:03:57,006
但是要考虑的首要内容是

106
00:03:57,006 --> 0:03:58,836
信任

107
00:03:58,836 --> 0:04:01,776
我们所有人都要确保

108
00:03:58,836 --> 0:04:01,776
我们所有人都要确保

109
00:04:01,776 --> 0:04:03,306
用户可以信任我们

110
00:04:03,306 --> 0:04:06,306
能够保护他们

111
00:04:06,306 --> 0:04:07,426
最敏感的数据

112
00:04:08,056 --> 0:04:09,946
从财务数据到通讯

113
00:04:09,946 --> 0:04:12,446
再到位置信息和照片

114
00:04:12,446 --> 0:04:15,556
随着科技越来越

115
00:04:15,556 --> 0:04:17,476
融入我们的生活

116
00:04:17,476 --> 0:04:19,516
信任变得愈发重要

117
00:04:20,016 --> 0:04:22,146
那么 如何与用户建立信任呢

118
00:04:22,946 --> 0:04:25,366
我们将重点放在四个关键因素上

119
00:04:25,366 --> 0:04:26,996
让我为你们逐个举例展示

120
00:04:28,286 --> 0:04:30,136
我们不需要用户

121
00:04:30,206 --> 0:04:32,186
在“地图” App 上登录

122
00:04:32,186 --> 0:04:34,296
而是使用旋转随机标识符

123
00:04:34,676 --> 0:04:36,016
在实现相关功能时

124
00:04:36,016 --> 0:04:38,366
它不能关联到特定的 Apple ID

125
00:04:39,636 --> 0:04:41,926
我们使用设备内置智能

126
00:04:41,926 --> 0:04:43,906
来支持强大的功能

127
00:04:43,906 --> 0:04:46,046
比如“照片” App 中的搜索功能和“回忆”相册

128
00:04:46,576 --> 0:04:50,146
不需要云分析照片就可以实现

129
00:04:50,326 --> 0:04:52,846
我们设计了面容 ID

130
00:04:53,006 --> 0:04:55,106
所有的面容 ID 数据

131
00:04:55,106 --> 0:04:56,886
都受 Secure Enclave 的加密和保护

132
00:04:56,886 --> 0:04:58,226
且永远不会离开你的设备

133
00:04:59,636 --> 0:05:01,266
当我们收集用户数据

134
00:04:59,636 --> 0:05:01,266
当我们收集用户数据

135
00:05:01,816 --> 0:05:03,076
或允许第三方

136
00:05:03,076 --> 0:05:05,186
收集照片等数据时

137
00:05:05,186 --> 0:05:06,376
我们要确保一切在

138
00:05:06,376 --> 0:05:07,046
用户同意的情况下进行

139
00:05:07,176 --> 0:05:09,886
让我们深入了解一下

140
00:05:09,886 --> 0:05:12,266
透明和控制

141
00:05:12,916 --> 0:05:14,386
当请求访问位置

142
00:05:14,386 --> 0:05:16,026
或照片时

143
00:05:16,026 --> 0:05:18,036
你们一定看到过这些警报

144
00:05:18,036 --> 0:05:20,506
这个警报包含一个

145
00:05:20,506 --> 0:05:21,326
目的字符串

146
00:05:21,596 --> 0:05:23,606
它是由你们提供的字符串

147
00:05:23,606 --> 0:05:25,236
用来解释

148
00:05:25,236 --> 0:05:27,446
请求数据的原因

149
00:05:27,516 --> 0:05:28,366
以及你会用数据去做什么

150
00:05:29,316 --> 0:05:31,036
一个好的字符串

151
00:05:31,036 --> 0:05:32,966
包含一个清晰的解释

152
00:05:32,966 --> 0:05:36,566
说明它将启用哪些特性

153
00:05:36,566 --> 0:05:38,236
以及改进哪些功能

154
00:05:39,636 --> 0:05:42,186
你的解释越具体

155
00:05:42,186 --> 0:05:44,206
用户们就越有可能

156
00:05:44,206 --> 0:05:45,936
授予访问权限

157
00:05:47,516 --> 0:05:48,876
我们认为

158
00:05:48,876 --> 0:05:51,276
确保用户知晓

159
00:05:51,276 --> 0:05:53,016
他们的数据将被如何使用

160
00:05:53,016 --> 0:05:53,966
是十分重要的

161
00:05:54,636 --> 0:05:56,756
App 审核现在更加关注

162
00:05:56,756 --> 0:05:58,426
这些目的字符串

163
00:05:59,106 --> 0:06:01,176
如果你们有一个这样的目的字符串

164
00:05:59,106 --> 0:06:01,176
如果你们有一个这样的目的字符串

165
00:06:01,176 --> 0:06:03,256
它显然是无效的

166
00:06:03,256 --> 0:06:05,686
那么你们可能会被

167
00:06:05,686 --> 0:06:06,666
App 审核拒绝

168
00:06:06,666 --> 0:06:10,736
这个字符串从技术上解释了

169
00:06:10,736 --> 0:06:12,326
如何使用数据

170
00:06:12,976 --> 0:06:15,656
但是它缺乏细节

171
00:06:15,656 --> 0:06:17,566
以至于用户很难

172
00:06:17,566 --> 0:06:20,286
做出决定

173
00:06:20,356 --> 0:06:22,806
有些用户可能会担心

174
00:06:22,806 --> 0:06:24,326
App 的麦克风的访问权限

175
00:06:24,586 --> 0:06:27,366
但它可能是

176
00:06:27,366 --> 0:06:29,436
你的 App 中的关键功能

177
00:06:30,116 --> 0:06:31,706
这就是为什么

178
00:06:31,706 --> 0:06:33,386
我们需要一个清晰的

179
00:06:33,436 --> 0:06:35,876
目的字符串

180
00:06:35,876 --> 0:06:39,496
来解释如何使用数据

181
00:06:39,646 --> 0:06:41,476
优秀的功能

182
00:06:41,476 --> 0:06:42,946
不应以牺牲隐私为代价

183
00:06:43,436 --> 0:06:45,506
相反地 它可以通过告知用户

184
00:06:45,506 --> 0:06:47,276
你们将如何保护他们的数据

185
00:06:47,276 --> 0:06:48,176
以及如何使用这些数据

186
00:06:48,176 --> 0:06:48,976
从而为隐私安全提供保障

187
00:06:54,276 --> 0:06:56,426
我们也非常关心安全问题

188
00:06:56,846 --> 0:06:58,436
为了保护设备上

189
00:06:58,506 --> 0:07:00,706
App 和云中的

190
00:06:58,506 --> 0:07:00,706
App 和云中的

191
00:07:00,706 --> 0:07:03,176
所有敏感数据

192
00:07:03,176 --> 0:07:06,076
我们应从整体上 考虑安全问题

193
00:07:06,806 --> 0:07:09,336
我们提供的技术

194
00:07:09,336 --> 0:07:11,556
可以让你们更容易地构建

195
00:07:11,616 --> 0:07:12,976
安全的 App

196
00:07:13,076 --> 0:07:14,606
以下是一些关于

197
00:07:14,606 --> 0:07:16,016
我们所提供的技术的例子

198
00:07:17,336 --> 0:07:20,876
在 iOS 上 我们默认

199
00:07:20,876 --> 0:07:22,316
自动加密 App 数据

200
00:07:23,416 --> 0:07:25,736
通过网络

201
00:07:25,736 --> 0:07:27,506
“App Transport Security（App 传输安全）”

202
00:07:27,506 --> 0:07:29,186
意味着你无需再修补

203
00:07:29,186 --> 0:07:29,816
客户端网络库

204
00:07:31,516 --> 0:07:33,506
接下来是 CloudKit

205
00:07:33,506 --> 0:07:35,836
在云中 CloudKit 安全地跨设备

206
00:07:35,936 --> 0:07:37,856
存储和同步数据

207
00:07:39,186 --> 0:07:40,736
使你们可以专注于为用户

208
00:07:40,736 --> 0:07:42,546
构建良好的体验

209
00:07:42,866 --> 0:07:44,186
而不必担心

210
00:07:44,186 --> 0:07:46,446
管理帐户状态

211
00:07:46,446 --> 0:07:47,326
或帐户凭证

212
00:07:48,076 --> 0:07:50,456
它使你能够获得

213
00:07:50,456 --> 0:07:51,876
最佳的类内安全保障

214
00:07:51,876 --> 0:07:54,026
最佳的类内安全保障

215
00:07:54,026 --> 0:07:56,466
包括内置的双重认证

216
00:07:57,256 --> 0:07:59,076
自双重认证在三年前推出以来

217
00:07:59,076 --> 0:08:01,546
超过三分之二的

218
00:07:59,076 --> 0:08:01,546
超过三分之二的

219
00:08:01,546 --> 0:08:03,766
Apple ID 帐户

220
00:08:03,766 --> 0:08:05,536
采用了双重认证

221
00:08:06,506 --> 0:08:08,956
与其他行业相比

222
00:08:08,956 --> 0:08:10,206
这是一个巨大的成功

223
00:08:10,576 --> 0:08:13,196
我们发现他们只有不到 10% 的帐户

224
00:08:13,196 --> 0:08:15,796
受到双因素认证的保护

225
00:08:16,686 --> 0:08:18,556
但这对我们很重要

226
00:08:19,206 --> 0:08:21,866
我们一直致力于

227
00:08:21,866 --> 0:08:24,126
确保用户帐户的安全

228
00:08:24,686 --> 0:08:26,396
这样即使别人知道你的密码

229
00:08:26,396 --> 0:08:28,906
你也是唯一

230
00:08:28,906 --> 0:08:30,566
可以访问你的帐户的人

231
00:08:31,146 --> 0:08:35,216
在 iOS 12 中

232
00:08:35,216 --> 0:08:36,836
我们想让你和你的用户

233
00:08:37,015 --> 0:08:39,826
能够更加方便和安全地使用密码

234
00:08:41,416 --> 0:08:42,956
我们都知道

235
00:08:42,956 --> 0:08:44,646
一个安全的密码对于

236
00:08:44,976 --> 0:08:47,236
保证信息和身份的安全

237
00:08:47,236 --> 0:08:48,546
至关重要

238
00:08:49,926 --> 0:08:51,936
但密码可能很难记住

239
00:08:51,936 --> 0:08:54,586
所以用户会倾向

240
00:08:54,586 --> 0:08:55,656
使用弱密码或重复使用密码

241
00:08:56,416 --> 0:08:59,506
这也给开发人员带来了问题

242
00:09:00,606 --> 0:09:03,236
用户可能会放弃注册帐户

243
00:09:03,306 --> 0:09:05,076
你还必须要处理

244
00:09:05,076 --> 0:09:06,386
密码重置请求

245
00:09:07,536 --> 0:09:09,276
但最糟糕的是

246
00:09:09,276 --> 0:09:10,736
过弱的密码

247
00:09:10,736 --> 0:09:13,026
可能导致帐户被盗

248
00:09:13,766 --> 0:09:18,036
我们有了一个解决方案

249
00:09:18,036 --> 0:09:19,926
iOS 12 可以让你们和你们的用户

250
00:09:19,926 --> 0:09:21,696
通过创建 存储和自动填充密码

251
00:09:21,976 --> 0:09:24,116
来轻松地使用强

252
00:09:24,406 --> 0:09:26,606
且独特的密码

253
00:09:27,426 --> 0:09:29,826
但真正了不起的是

254
00:09:30,076 --> 0:09:31,816
它也可以在你的

255
00:09:31,816 --> 0:09:34,066
iOS App 中使用

256
00:09:34,066 --> 0:09:35,936
这样无论用户在哪里创建帐户

257
00:09:35,936 --> 0:09:38,016
他们都能够得到一个强密码

258
00:09:38,016 --> 0:09:39,766
并且同步到所有的设备上

259
00:09:39,766 --> 0:09:42,586
自动提供强密码

260
00:09:42,586 --> 0:09:44,396
非常简单

261
00:09:45,066 --> 0:09:46,206
事实上 你们可以不需要

262
00:09:46,206 --> 0:09:48,696
在你们的 App 中做任何改变

263
00:09:48,696 --> 0:09:51,396
为了确保它能正常工作

264
00:09:51,396 --> 0:09:53,736
你们需要把你们的 App 和域名关联起来

265
00:09:54,416 --> 0:09:55,786
如果你们采用了通用链接

266
00:09:56,196 --> 0:09:57,966
你们可能已经这样做了

267
00:09:59,326 --> 0:10:00,316
然后你们需要标记

268
00:09:59,326 --> 0:10:00,316
然后你们需要标记

269
00:10:00,316 --> 0:10:00,976
用户名和密码字段

270
00:10:01,056 --> 0:10:04,056
如果密码不符合

271
00:10:04,056 --> 0:10:06,786
你们的 App 的要求

272
00:10:06,786 --> 0:10:10,016
你们甚至可以定制密码

273
00:10:10,216 --> 0:10:11,886
此外 我们也让用户

274
00:10:11,886 --> 0:10:13,866
更容易地获取密码

275
00:10:14,796 --> 0:10:16,596
他们只需询问 Siri

276
00:10:16,596 --> 0:10:17,806
一旦经过认证

277
00:10:17,996 --> 0:10:19,666
就能看到他们的密码清单

278
00:10:21,126 --> 0:10:23,256
最重要的是

279
00:10:23,256 --> 0:10:25,486
为了帮助清除旧密码

280
00:10:26,216 --> 0:10:27,556
你们可以轻松地判断

281
00:10:27,556 --> 0:10:29,826
你们的密码是否在

282
00:10:29,826 --> 0:10:31,516
现有帐户中被重复使用

283
00:10:31,516 --> 0:10:32,456
现有帐户中被重复使用

284
00:10:33,176 --> 0:10:35,846
你们的 iPhone 会标记这些密码

285
00:10:35,876 --> 0:10:37,456
然后引领你们访问相关网站

286
00:10:37,456 --> 0:10:39,136
你们可以在那里

287
00:10:39,136 --> 0:10:41,326
将其替换为强密码

288
00:10:44,076 --> 0:10:45,796
现在 处理那些

289
00:10:45,796 --> 0:10:47,076
发送给你们和你们的用户的

290
00:10:47,076 --> 0:10:49,326
一次性验证码

291
00:10:49,616 --> 0:10:52,106
也变得更加容易

292
00:10:53,646 --> 0:10:54,886
它们会自动出现在

293
00:10:54,886 --> 0:10:57,176
快速输入栏中 你们只需轻点一下 

294
00:10:57,176 --> 0:10:58,856
就可以填入它们

295
00:10:59,516 --> 0:11:05,876
[ 掌声 ]

296
00:10:59,516 --> 0:11:05,876
[ 掌声 ]

297
00:11:06,376 --> 0:11:08,026
我们还为第三方密码管理器

298
00:11:08,026 --> 0:11:10,306
创建了一个新的扩展功能

299
00:11:10,306 --> 0:11:12,586
使它们能够为 “Safari 浏览器” 中的

300
00:11:12,586 --> 0:11:15,966
自动填充和 App 提供密码

301
00:11:16,516 --> 0:11:22,646
[ 掌声 ]

302
00:11:23,146 --> 0:11:24,906
这些功能

303
00:11:24,906 --> 0:11:27,896
在 iOS Mac

304
00:11:28,176 --> 0:11:30,616
甚至 Apple TV 上

305
00:11:30,616 --> 0:11:33,376
都能提供很好的体验

306
00:11:33,586 --> 0:11:36,146
我们非常关心隐私和安全

307
00:11:36,146 --> 0:11:38,906
它们是我们所有产品的基础

308
00:11:39,566 --> 0:11:42,686
因此 我们为你们提供了

309
00:11:42,686 --> 0:11:44,696
在此基础上构建 App 的能力

310
00:11:45,076 --> 0:11:47,726
从而保护并保障安全性

311
00:11:47,726 --> 0:11:48,536
以及赢得用户的信任

312
00:11:49,156 --> 0:11:50,976
现在 让我们请回 Sebastian

313
00:11:51,516 --> 0:11:57,976
[ 掌声 ]

314
00:11:58,476 --> 0:11:59,266
&gt;&gt; 谢谢 Katie

315
00:11:59,586 --> 0:12:00,856
这些新的密码功能

316
00:11:59,586 --> 0:12:00,856
这些新的密码功能

317
00:12:00,856 --> 0:12:02,436
是不是很神奇

318
00:12:02,736 --> 0:12:03,676
非常 非常棒

319
00:12:03,676 --> 0:12:04,326
棒极了

320
00:12:04,456 --> 0:12:05,046
谢谢大家

321
00:12:06,096 --> 0:12:07,996
我们向我们的用户承诺

322
00:12:07,996 --> 0:12:10,076
提供优秀的体验

323
00:12:10,256 --> 0:12:11,606
我们通常将

324
00:12:11,606 --> 0:12:14,326
认为出色的体验

325
00:12:14,326 --> 0:12:15,336
应该是优秀的创新功能

326
00:12:16,556 --> 0:12:17,926
但同样重要的是

327
00:12:17,926 --> 0:12:19,556
不要在不可预知和缓慢的软件中

328
00:12:19,556 --> 0:12:21,576
妥协了愉悦的体验

329
00:12:22,436 --> 0:12:24,956
这是 Apple 工程团队的首要任务

330
00:12:25,586 --> 0:12:27,326
我们开发工具和实践

331
00:12:27,326 --> 0:12:28,396
来帮助我们实现这一点

332
00:12:28,396 --> 0:12:30,576
我们将这些工具提供给你们

333
00:12:30,636 --> 0:12:32,396
这样你们就可以

334
00:12:32,396 --> 0:12:34,376
在 App 中应用它们

335
00:12:35,306 --> 0:12:36,586
大量的工具和技术可供你们使用

336
00:12:36,586 --> 0:12:38,956
从而帮助你们

337
00:12:38,956 --> 0:12:40,976
使代码更加可靠和稳定

338
00:12:41,326 --> 0:12:42,356
对于你们的 App 来说

339
00:12:42,356 --> 0:12:43,066
可预测性十分重要

340
00:12:43,596 --> 0:12:45,006
当然 让你们的 App 快速地运行

341
00:12:45,006 --> 0:12:46,406
同样至关重要

342
00:12:46,406 --> 0:12:47,746
为此 我们为你们提供了

343
00:12:47,746 --> 0:12:49,706
许多的性能工具

344
00:12:50,586 --> 0:12:51,696
我们都知道

345
00:12:51,696 --> 0:12:55,416
跨越复杂系统和 App

346
00:12:55,686 --> 0:12:56,456
的性能优化是一项挑战

347
00:12:56,986 --> 0:12:59,696
今年 我们在这方面做了很多工作

348
00:12:59,986 --> 0:13:02,806
我们开发了许多新的工具和技术

349
00:12:59,986 --> 0:13:02,806
我们开发了许多新的工具和技术

350
00:13:02,806 --> 0:13:03,936
并希望为你们带来

351
00:13:03,936 --> 0:13:04,736
这些强大的新功能

352
00:13:05,496 --> 0:13:07,696
在 Xcode 10 中

353
00:13:07,696 --> 0:13:09,276
我们扩展了 Instruments 的功能

354
00:13:09,496 --> 0:13:10,856
使你们能够

355
00:13:10,856 --> 0:13:12,216
对自己的自定义工具和工作流

356
00:13:12,216 --> 0:13:13,466
进行更丰富的操作

357
00:13:14,286 --> 0:13:15,706
这一切都是从一个

358
00:13:15,706 --> 0:13:16,806
旧有的 API 开始的

359
00:13:17,106 --> 0:13:18,246
你们有些人可能知道

360
00:13:18,246 --> 0:13:19,196
并使用过它

361
00:13:19,616 --> 0:13:21,126
我知道我应该感到内疚

362
00:13:21,596 --> 0:13:24,316
printf 它就像 API 中瑞士军刀

363
00:13:24,316 --> 0:13:25,816
我们使用它来

364
00:13:25,816 --> 0:13:27,276
调试和跟踪代码

365
00:13:27,276 --> 0:13:28,166
但我们都知道它效率很低

366
00:13:28,676 --> 0:13:30,156
两年前 我们为你们带来了

367
00:13:30,156 --> 0:13:32,546
一个叫做 os_log 的新 API

368
00:13:32,906 --> 0:13:34,266
它是一种高效和高性能的 API

369
00:13:34,266 --> 0:13:36,266
可以在系统的

370
00:13:36,266 --> 0:13:38,006
各个层面中

371
00:13:38,006 --> 0:13:38,626
捕获日志和跟踪点

372
00:13:39,076 --> 0:13:41,366
它高效且轻量

373
00:13:41,366 --> 0:13:42,836
如果你们还没有使用过它

374
00:13:42,836 --> 0:13:43,436
你们真的应该试试

375
00:13:43,436 --> 0:13:43,926
它很棒

376
00:13:44,566 --> 0:13:47,466
今年 我们基于 os_log

377
00:13:47,466 --> 0:13:49,336
加入了 os_signpost

378
00:13:50,016 --> 0:13:51,326
它是一种功能强大的技术

379
00:13:51,376 --> 0:13:53,656
为你们的 App 提供了丰富的

380
00:13:53,656 --> 0:13:55,776
其格式能够被 Instruments 解译的

381
00:13:55,776 --> 0:13:57,606
上下文数据

382
00:13:57,606 --> 0:13:59,996
因此 你们可以使用 os_signpost

383
00:13:59,996 --> 0:14:01,816
跟踪你们的代码

384
00:13:59,996 --> 0:14:01,816
跟踪你们的代码

385
00:14:01,816 --> 0:14:03,786
也可以使用它

386
00:14:03,936 --> 0:14:05,986
标记函数的关键部分

387
00:14:06,586 --> 0:14:08,226
一旦你获得了数据

388
00:14:08,226 --> 0:14:09,986
就到了内置的自定义 Instruments 可视化

389
00:14:10,306 --> 0:14:12,266
大显身手的时候了

390
00:14:13,256 --> 0:14:14,756
现在我们有了这个新的

391
00:14:14,756 --> 0:14:16,656
自定义 Instruments 支持

392
00:14:16,656 --> 0:14:18,086
我认为 只有通过展示

393
00:14:18,086 --> 0:14:19,556
才能向你们证明它的强大

394
00:14:19,846 --> 0:14:21,236
接下来 Ken 将向你们展示

395
00:14:21,236 --> 0:14:21,886
这个工具能做些什么

396
00:14:21,886 --> 0:14:21,976
Ken

397
00:14:22,516 --> 0:14:28,066
[ 掌声 ]

398
00:14:28,566 --> 0:14:29,536
&gt;&gt; 谢谢 Sebastian

399
00:14:30,176 --> 0:14:31,416
我正在开发我的

400
00:14:31,416 --> 0:14:33,086
太阳系探索 App

401
00:14:33,656 --> 0:14:35,186
但我注意到了

402
00:14:35,186 --> 0:14:36,746
一些存在的性能问题

403
00:14:36,996 --> 0:14:38,506
App 在更新数据的过程中

404
00:14:38,506 --> 0:14:39,646
每当它启动

405
00:14:39,646 --> 0:14:40,846
或者当我像这样按 command-R 时

406
00:14:41,126 --> 0:14:43,106
你们可以看到

407
00:14:43,106 --> 0:14:45,306
UI 会变得很不稳定

408
00:14:45,756 --> 0:14:46,576
行星在围绕轨道

409
00:14:46,576 --> 0:14:47,766
运行的时候

410
00:14:47,766 --> 0:14:48,486
会断断续续

411
00:14:48,936 --> 0:14:49,786
然而更新完成后

412
00:14:49,786 --> 0:14:52,006
又变得十分流畅

413
00:14:52,556 --> 0:14:53,556
所以我想搞清楚

414
00:14:53,556 --> 0:14:54,126
问题的所在

415
00:14:55,166 --> 0:14:56,996
回到我的代码中

416
00:14:57,906 --> 0:15:00,426
PlanetUpdateService.swift

417
00:14:57,906 --> 0:15:00,426
PlanetUpdateService.swift

418
00:15:00,426 --> 0:15:02,106
这是处理

419
00:15:02,106 --> 0:15:03,056
数据更新的文件

420
00:15:03,056 --> 0:15:05,096
我想添加一些日志

421
00:15:05,176 --> 0:15:06,926
一些 signpost 来帮助我弄明白

422
00:15:06,926 --> 0:15:08,266
代码中到底发生了什么

423
00:15:08,266 --> 0:15:10,696
我将从添加一个

424
00:15:10,746 --> 0:15:11,506
日志句柄开始

425
00:15:11,676 --> 0:15:13,566
我将使用新的

426
00:15:13,566 --> 0:15:17,296
pointsOfInterest 类别

427
00:15:17,396 --> 0:15:20,166
这是一个特殊的新类别

428
00:15:20,676 --> 0:15:22,276
我用它记录的任何东西

429
00:15:22,346 --> 0:15:24,846
都会自动显示在 Instruments 里面

430
00:15:25,426 --> 0:15:27,256
我想要分析的第一件是

431
00:15:27,256 --> 0:15:30,596
启动这个更新时 发生了什么

432
00:15:30,596 --> 0:15:32,276
它是在这个方法中发生的

433
00:15:32,276 --> 0:15:33,756
我要在这里加上

434
00:15:33,756 --> 0:15:34,906
第一个 log 语句

435
00:15:34,906 --> 0:15:36,186
“Requesting planet data（请求行星数据）”

436
00:15:36,186 --> 0:15:38,176
我们之后就能看到

437
00:15:39,296 --> 0:15:40,656
然后我真正想知道的是

438
00:15:40,656 --> 0:15:43,156
处理和解析所有这些

439
00:15:43,156 --> 0:15:45,706
我正在使用的数据

440
00:15:45,776 --> 0:15:46,666
需要多长时间

441
00:15:47,476 --> 0:15:50,336
这些任务是在这里完成的

442
00:15:50,796 --> 0:15:52,476
为了更直观一些

443
00:15:52,476 --> 0:15:53,906
我要添加一些 signpost

444
00:15:54,476 --> 0:15:55,866
第一个 signpost 将是一个

445
00:15:56,666 --> 0:15:58,946
begin 类别的 signpost

446
00:15:58,946 --> 0:16:00,966
放在我开始任务之前

447
00:15:58,946 --> 0:16:00,966
放在我开始任务之前

448
00:16:00,966 --> 0:16:02,526
然后 我将在这里

449
00:16:02,526 --> 0:16:05,206
添加另一个 signpost

450
00:16:05,206 --> 0:16:06,226
也就是在我结束任务之后

451
00:16:06,456 --> 0:16:08,166
它是一个 end 类别的 signpost

452
00:16:08,166 --> 0:16:09,986
这将为我创建 一个时间区间

453
00:16:10,706 --> 0:16:11,646
自动计算时间差

454
00:16:11,646 --> 0:16:13,436
并直暴露过 Instruments

455
00:16:13,436 --> 0:16:14,196
显示出来

456
00:16:15,056 --> 0:16:16,626
让我们在 Instruments 中分析一下

457
00:16:16,626 --> 0:16:18,486
看看我们能得到什么样的数据

458
00:16:19,296 --> 0:16:21,236
所以我们选择 “Product”-

459
00:16:21,386 --> 0:16:22,546
“Profile（分析）”

460
00:16:22,806 --> 0:16:24,086
Xcode 会构建我的 App

461
00:16:24,876 --> 0:16:26,456
启动 Instruments 

462
00:16:26,486 --> 0:16:30,066
然后我们会在这里 看到数据流

463
00:16:30,486 --> 0:16:31,506
在这里 你们可以看到

464
00:16:31,506 --> 0:16:32,536
pointsOfInterest 的轨迹

465
00:16:33,156 --> 0:16:34,596
我用 pointsOfInterest 类别

466
00:16:34,596 --> 0:16:35,376
记录的所有东西

467
00:16:35,376 --> 0:16:37,236
都显示在这里

468
00:16:37,236 --> 0:16:39,566
这是我的数据 我想放大

469
00:16:39,566 --> 0:16:40,816
所以我需要按住 Option 键

470
00:16:40,816 --> 0:16:42,026
然后点按并拖拽

471
00:16:42,026 --> 0:16:43,016
这样我们可以更清楚地观察

472
00:16:43,746 --> 0:16:45,086
我们在这里可以看到一个小标志

473
00:16:45,086 --> 0:16:46,766
上面写着请求行星数据

474
00:16:47,326 --> 0:16:48,876
这是我在代码中添加的

475
00:16:48,876 --> 0:16:50,136
第一个日志的结果

476
00:16:51,056 --> 0:16:52,506
这里的蓝条

477
00:16:52,996 --> 0:16:55,376
是我处理和解析数据的地方

478
00:16:55,626 --> 0:16:56,866
这些就是我添加的

479
00:16:56,866 --> 0:16:58,126
signpost 的结果

480
00:16:58,906 --> 0:17:00,406
当我看到这个的时候

481
00:16:58,906 --> 0:17:00,406
当我看到这个的时候

482
00:17:00,406 --> 0:17:02,626
我想我马上就知道 问题出在哪里了

483
00:17:02,886 --> 0:17:04,256
每次我在这里

484
00:17:04,306 --> 0:17:05,756
处理并解析数据时

485
00:17:05,756 --> 0:17:07,336
我都可以看到主线程的 CPU 使用量

486
00:17:07,336 --> 0:17:08,846
出现相应的峰值

487
00:17:08,846 --> 0:17:11,096
对我来说 这是一个明显的危险信号

488
00:17:11,096 --> 0:17:13,376
因为我可能正在主线程上

489
00:17:13,376 --> 0:17:15,126
进行分析和处理

490
00:17:15,746 --> 0:17:17,326
这将导致不尽流畅的 UI

491
00:17:18,066 --> 0:17:19,876
你们可以看到 

492
00:17:19,876 --> 0:17:21,256
通过一个日志语句和几个 signpost

493
00:17:21,256 --> 0:17:23,876
我已经能够对我的 App 的性能

494
00:17:23,876 --> 0:17:26,236
进行一些非常深入的了解

495
00:17:26,486 --> 0:17:28,465
借助新的工具

496
00:17:28,465 --> 0:17:29,866
你们能做的事情不仅这些

497
00:17:30,286 --> 0:17:32,516
在 Xcode 10 中有一个新的模板

498
00:17:32,516 --> 0:17:34,366
可以让你们创建一个

499
00:17:34,546 --> 0:17:37,296
完全自定义的 Instruments 包

500
00:17:37,786 --> 0:17:38,836
我的一个团队伙伴

501
00:17:38,836 --> 0:17:40,286
已经着手创建了一个 Instruments 包

502
00:17:40,286 --> 0:17:41,686
它基于一些网络

503
00:17:41,686 --> 0:17:43,386
一些他在我们的网络框架中

504
00:17:43,596 --> 0:17:44,006
添加过的 signpost

505
00:17:44,456 --> 0:17:45,516
我的“下载”文件夹里有

506
00:17:45,516 --> 0:17:46,796
他发给我的最新版本

507
00:17:47,236 --> 0:17:50,056
所以让我打开它

508
00:17:50,056 --> 0:17:51,576
当我打开的时候

509
00:17:51,576 --> 0:17:52,446
Instruments 会询问我是否安装

510
00:17:53,036 --> 0:17:54,376
那么我选择 “Install（安装）”

511
00:17:54,786 --> 0:17:56,056
现在你们可以看到

512
00:17:56,056 --> 0:17:56,756
我有了一个新的模板

513
00:17:56,756 --> 0:17:57,636
这里是我的模板选择器

514
00:17:57,636 --> 0:17:58,696
叫做 “Solar System（太阳系）”

515
00:17:58,696 --> 0:17:59,866
我需要连按它

516
00:17:59,866 --> 0:18:02,516
之后我们再一次开始

517
00:17:59,866 --> 0:18:02,516
之后我们再一次开始

518
00:18:02,516 --> 0:18:03,126
记录数据

519
00:18:04,136 --> 0:18:05,826
就像之前一样

520
00:18:05,826 --> 0:18:07,136
我需要跟踪 pointsOfInterest

521
00:18:07,136 --> 0:18:08,126
这里有我想要

522
00:18:08,126 --> 0:18:08,896
观察的数据

523
00:18:09,436 --> 0:18:11,356
但是现在 我有了更多

524
00:18:11,356 --> 0:18:13,096
关于我所发出的网络请求

525
00:18:13,096 --> 0:18:15,076
的详细信息

526
00:18:15,536 --> 0:18:16,506
同样地 我需要放大一下

527
00:18:16,506 --> 0:18:16,976
这样我们可以看得更清楚一些

528
00:18:22,406 --> 0:18:24,136
这个定制的 Instruments 包

529
00:18:24,466 --> 0:18:26,536
使我能够

530
00:18:26,536 --> 0:18:28,706
清楚地看到

531
00:18:28,706 --> 0:18:30,566
我是如何使用这个框架的

532
00:18:31,016 --> 0:18:32,426
例如这里

533
00:18:32,626 --> 0:18:34,226
它向我展示了

534
00:18:34,226 --> 0:18:35,746
我每 0.1 秒平均发出了

535
00:18:35,746 --> 0:18:37,506
多少个网络请求

536
00:18:38,226 --> 0:18:39,456
然后在这里

537
00:18:39,456 --> 0:18:41,256
这个跟踪显示了

538
00:18:41,256 --> 0:18:43,536
关于每个网络请求的详细信息

539
00:18:43,796 --> 0:18:44,726
耗时多久

540
00:18:45,026 --> 0:18:46,326
它甚至用红色突出显示

541
00:18:46,326 --> 0:18:47,396
重复的请求

542
00:18:47,756 --> 0:18:48,766
在这些地方

543
00:18:48,946 --> 0:18:50,386
我不止一次请求

544
00:18:50,386 --> 0:18:51,816
相同的数据

545
00:18:51,816 --> 0:18:53,066
看起来大约超过一半的时间

546
00:18:53,146 --> 0:18:55,406
我都在做这样的事情

547
00:18:55,666 --> 0:18:56,836
所以我一直在浪费

548
00:18:56,836 --> 0:18:58,056
大量的性能

549
00:18:58,536 --> 0:18:59,816
这些正是我需要的信息

550
00:18:59,816 --> 0:19:01,796
帮助我更有效地

551
00:18:59,816 --> 0:19:01,796
帮助我更有效地

552
00:19:01,796 --> 0:19:04,086
使用这个框架

553
00:19:04,766 --> 0:19:07,126
signpost 和定制工具

554
00:19:07,126 --> 0:19:09,146
是两种非常好的方法

555
00:19:09,146 --> 0:19:10,926
让你们可以在 Instruments 中

556
00:19:10,926 --> 0:19:12,516
查看你们的数据

557
00:19:12,856 --> 0:19:13,566
那么这就是

558
00:19:13,566 --> 0:19:14,316
新的性能工具

559
00:19:14,476 --> 0:19:14,976
Sebastian

560
00:19:15,516 --> 0:19:19,546
[ 掌声 ]

561
00:19:20,046 --> 0:19:20,356
&gt;&gt; 好的

562
00:19:20,706 --> 0:19:21,476
谢谢 Ken

563
00:19:21,476 --> 0:19:23,866
这真是一个精彩的演示

564
00:19:23,866 --> 0:19:25,276
这些出色的工具

565
00:19:25,276 --> 0:19:27,046
能帮助你们所有人

566
00:19:27,556 --> 0:19:28,856
让 App 运行得更快

567
00:19:29,796 --> 0:19:32,396
现在总结一下

568
00:19:32,396 --> 0:19:33,886
我们刚刚回顾了许多

569
00:19:33,886 --> 0:19:35,726
优秀的工具和最佳的实践

570
00:19:35,726 --> 0:19:37,626
可以帮助我们使我们的用户满意

571
00:19:37,896 --> 0:19:38,746
并保持他们的信任

572
00:19:39,656 --> 0:19:41,676
现在 我想把我们的注意力

573
00:19:41,676 --> 0:19:42,976
转移到 Mac 上

574
00:19:43,186 --> 0:19:46,516
OS X 是 17 年前被推出的

575
00:19:46,516 --> 0:19:48,336
我们一直在推动这个平台

576
00:19:48,336 --> 0:19:49,366
向前发展

577
00:19:50,016 --> 0:19:53,346
Leopard 支持了 64 位操作

578
00:19:53,346 --> 0:19:54,386
OS X Mountain Lion

579
00:19:54,386 --> 0:19:56,246
引入了 Gatekeeper

580
00:19:56,246 --> 0:19:56,976
这是 Mac 安全方面的关键一步

581
00:19:57,046 --> 0:19:59,296
我们的主要任务之一

582
00:19:59,296 --> 0:20:00,626
就是利用最新的技术

583
00:19:59,296 --> 0:20:00,626
就是利用最新的技术

584
00:20:00,626 --> 0:20:02,546
通过扩展 Mac 的功能

585
00:20:02,546 --> 0:20:04,436
来推动 Mac 的发展

586
00:20:05,146 --> 0:20:06,236
但是 当我们推动平台发展时

587
00:20:06,236 --> 0:20:08,096
我们有时不得不

588
00:20:08,096 --> 0:20:09,866
放弃旧有的功能

589
00:20:10,166 --> 0:20:12,376
以确保我们不会阻碍它的发展

590
00:20:13,476 --> 0:20:14,986
去年我们宣布

591
00:20:14,986 --> 0:20:16,976
High Sierra 是最后一个

592
00:20:16,976 --> 0:20:19,046
完全支持 32 位 App 的

593
00:20:19,046 --> 0:20:20,766
macOS 版本

594
00:20:21,586 --> 0:20:23,276
今年我们宣布

595
00:20:23,276 --> 0:20:25,326
macOS Mojave 是最后一个

596
00:20:25,326 --> 0:20:28,076
支持 32 位的版本

597
00:20:29,346 --> 0:20:30,946
因此 当我们在明年

598
00:20:30,946 --> 0:20:33,286
移除 32 位的支持时

599
00:20:33,356 --> 0:20:35,256
这些 32 位的框架也将被移除

600
00:20:35,256 --> 0:20:36,726
例如 QuickTime 框架

601
00:20:37,036 --> 0:20:38,796
和 Apple Java 框架

602
00:20:39,336 --> 0:20:42,746
接下来让我们讨论一下

603
00:20:42,746 --> 0:20:43,126
Mac 的安全问题

604
00:20:43,696 --> 0:20:45,186
Gatekeeper 在阻挡大规模的

605
00:20:45,186 --> 0:20:46,576
恶意软件攻击的方面做得很好

606
00:20:46,576 --> 0:20:49,786
今年我们想进一步推进

607
00:20:50,666 --> 0:20:52,086
我们在扩展用户可决定的权限

608
00:20:52,436 --> 0:20:54,176
强化运行时安全

609
00:20:54,176 --> 0:20:56,006
并推出新的认证服务

610
00:20:56,246 --> 0:20:57,966
让我们将更详细地讨论一下

611
00:20:59,296 --> 0:21:00,986
正如你们今天上午所听到的

612
00:20:59,296 --> 0:21:00,986
正如你们今天上午所听到的

613
00:21:00,986 --> 0:21:02,086
我们正在扩展

614
00:21:02,086 --> 0:21:04,666
对敏感系统资源的保护

615
00:21:05,976 --> 0:21:06,816
我们已经添加了摄像头和麦克风的监管

616
00:21:06,816 --> 0:21:08,676
现在 我们需要征得用户的同意

617
00:21:08,676 --> 0:21:10,936
才能使用 API

618
00:21:10,936 --> 0:21:12,626
并直接访问所有这些资源

619
00:21:13,606 --> 0:21:14,706
这在实践中意味着什么呢

620
00:21:15,636 --> 0:21:17,846
这意味着 根据用户同意与否

621
00:21:17,846 --> 0:21:19,466
你的 App 必须

622
00:21:19,466 --> 0:21:22,156
适当地处理

623
00:21:22,156 --> 0:21:22,986
可能的拒绝或失败

624
00:21:24,796 --> 0:21:26,076
正如 Katie 提到的

625
00:21:26,076 --> 0:21:27,456
提供有意义的目的字符串

626
00:21:27,456 --> 0:21:28,546
也是一个很棒的想法

627
00:21:28,546 --> 0:21:30,316
这样当用户

628
00:21:30,316 --> 0:21:31,226
面对这些对话时

629
00:21:31,266 --> 0:21:33,326
他们能够理解为什么

630
00:21:33,326 --> 0:21:34,756
你们的 App 需要访问权限

631
00:21:35,396 --> 0:21:37,996
我们还将进一步保护

632
00:21:37,996 --> 0:21:39,806
敏感的用户数据

633
00:21:40,456 --> 0:21:42,036
只有像备份工具

634
00:21:42,036 --> 0:21:44,106
这样的专用 App

635
00:21:44,106 --> 0:21:45,006
才需要访问这类数据

636
00:21:45,416 --> 0:21:46,396
在“安全性与隐私”的

637
00:21:46,396 --> 0:21:48,336
系统偏好设置面板中

638
00:21:48,336 --> 0:21:50,666
我们通过直接征求用户同意

639
00:21:50,666 --> 0:21:53,776
来保护这些位置

640
00:21:53,946 --> 0:21:55,236
接下来 我们将介绍

641
00:21:55,236 --> 0:21:57,246
运行时保护的增强

642
00:21:58,086 --> 0:21:58,876
许多人想要用一种方法

643
00:21:58,876 --> 0:22:01,036
将 SIP 保护扩展到

644
00:21:58,876 --> 0:22:01,036
将 SIP 保护扩展到

645
00:22:01,146 --> 0:22:03,146
自己的 App 中

646
00:22:03,886 --> 0:22:05,896
在我们新的增强的运行时中

647
00:22:05,936 --> 0:22:07,446
有一个新的安全基线

648
00:22:07,736 --> 0:22:09,466
就是有风险的功能

649
00:22:09,826 --> 0:22:10,726
需要被选择

650
00:22:11,376 --> 0:22:12,456
除了强大的代码验证之外

651
00:22:12,456 --> 0:22:14,656
它还保护了 App

652
00:22:14,656 --> 0:22:16,606
不受代码注入的影响等

653
00:22:17,526 --> 0:22:18,826
增强的运行时

654
00:22:18,826 --> 0:22:19,906
完全向后兼容

655
00:22:20,146 --> 0:22:21,816
它是通过 Xcode 中的

656
00:22:21,896 --> 0:22:23,176
一个简单开关来选择的

657
00:22:24,636 --> 0:22:25,876
最后 我们将介绍

658
00:22:25,876 --> 0:22:28,446
已认证 App 的概念

659
00:22:28,996 --> 0:22:30,416
它是一个

660
00:22:30,416 --> 0:22:32,036
开发人员 ID 程序的扩展

661
00:22:32,036 --> 0:22:34,596
针对那些发布在 Mac App Store 之外的 App

662
00:22:34,596 --> 0:22:35,896
它有两个主要目标

663
00:22:36,406 --> 0:22:38,266
第一个目标是

664
00:22:38,266 --> 0:22:40,356
在恶意软件传播给我们的用户之前

665
00:22:40,356 --> 0:22:41,746
能够比现在更快地检测到它们

666
00:22:42,346 --> 0:22:43,736
第二个目标是

667
00:22:43,826 --> 0:22:45,026
提供更细粒度的撤销功能

668
00:22:45,026 --> 0:22:46,846
以便我们可以撤销某个

669
00:22:46,846 --> 0:22:48,256
受损 App 的特定版本

670
00:22:48,256 --> 0:22:50,246
而无需撤销

671
00:22:50,246 --> 0:22:52,946
整个签名证书

672
00:22:53,786 --> 0:22:54,816
这是它的工作原理

673
00:22:55,316 --> 0:22:56,846
你们修复了漏洞

674
00:22:56,846 --> 0:22:57,866
然后像以前一样构建你们的 App

675
00:22:57,866 --> 0:22:59,126
用你们的

676
00:22:59,126 --> 0:23:00,426
开发人员 ID 证书签名

677
00:22:59,126 --> 0:23:00,426
开发人员 ID 证书签名

678
00:23:01,096 --> 0:23:02,356
但在发布给用户之前

679
00:23:02,356 --> 0:23:04,156
你们需要将 App 提交给

680
00:23:04,156 --> 0:23:05,626
开发人员 ID 认证服务

681
00:23:06,336 --> 0:23:08,336
经过认证之后

682
00:23:08,526 --> 0:23:09,986
你们就可以通过现有的渠道发布 App

683
00:23:11,186 --> 0:23:13,266
如果你们的用户在他们的系统上

684
00:23:13,266 --> 0:23:15,536
运行这个 App

685
00:23:15,536 --> 0:23:16,826
macOS Mojave 将与认证服务进行核对

686
00:23:16,826 --> 0:23:18,006
以确保这个 App 通过认证

687
00:23:18,006 --> 0:23:21,056
且不是恶意 App

688
00:23:22,106 --> 0:23:25,026
这个服务不同于 App 审核

689
00:23:25,026 --> 0:23:26,186
由于认证服务的缘故

690
00:23:26,186 --> 0:23:27,926
目前还不需要新的

691
00:23:27,926 --> 0:23:29,906
针对开发人员 ID App 的准则

692
00:23:30,256 --> 0:23:32,216
它专门用于

693
00:23:32,216 --> 0:23:34,726
在安全层面上分析 App

694
00:23:35,996 --> 0:23:37,796
未来的 macOS 版本

695
00:23:37,796 --> 0:23:40,316
将要求所有的开发人员 ID App

696
00:23:40,316 --> 0:23:41,546
在安装之前

697
00:23:41,546 --> 0:23:43,136
必须经过认证服务

698
00:23:43,216 --> 0:23:44,356
所以希望你们做好准备

699
00:23:44,356 --> 0:23:46,616
这个特性已在 Beta 版中投入使用

700
00:23:46,616 --> 0:23:48,596
我们鼓励你们试用一下

701
00:23:48,596 --> 0:23:49,876
并为我们提供反馈

702
00:23:50,996 --> 0:23:52,136
这些就是在 macOS Mojave 中

703
00:23:52,186 --> 0:23:54,846
对 Gatekeeper 的增强

704
00:23:55,276 --> 0:23:56,796
现在让我们换个话题

705
00:23:56,796 --> 0:23:58,626
谈谈 macOS 的用户体验

706
00:23:59,056 --> 0:24:01,746
为此 我想邀请 Kristen 上台

707
00:23:59,056 --> 0:24:01,746
为此 我想邀请 Kristen 上台

708
00:24:01,746 --> 0:24:01,976
Kristen

709
00:24:02,516 --> 0:24:05,546
[ 掌声 ]

710
00:24:06,046 --> 0:24:06,906
&gt;&gt; 谢谢 Sebastian

711
00:24:06,906 --> 0:24:07,766
很高兴来到这里

712
00:24:08,556 --> 0:24:09,806
我们在 macOS Mojave 中

713
00:24:09,806 --> 0:24:11,546
加入了很多很棒的功能

714
00:24:11,546 --> 0:24:12,656
包括对访达 屏幕快照

715
00:24:12,896 --> 0:24:14,836
以及桌面文档的改进

716
00:24:15,116 --> 0:24:17,046
我想特别强调其中一个

717
00:24:17,046 --> 0:24:18,166
你们作为开发人员

718
00:24:18,166 --> 0:24:19,536
可以利用的功能

719
00:24:19,536 --> 0:24:20,956
它就是 Quick Actions

720
00:24:21,646 --> 0:24:26,746
使用访达的 Quick Actions 功能

721
00:24:26,746 --> 0:24:28,296
我们将你需要的工具

722
00:24:28,296 --> 0:24:29,826
根据你需要的场景 嵌入到访达的

723
00:24:29,826 --> 0:24:30,846
预览面板中

724
00:24:31,826 --> 0:24:33,766
你可以在文件上

725
00:24:33,826 --> 0:24:35,166
执行一些常见的操作

726
00:24:35,166 --> 0:24:35,866
而不需要离开访达

727
00:24:36,586 --> 0:24:38,646
针对不同的文件类型

728
00:24:38,646 --> 0:24:39,626
支持不同的操作

729
00:24:39,626 --> 0:24:46,366
你们可以看到这里的视频和 PDF

730
00:24:47,416 --> 0:24:48,876
而且不仅仅局限于内置的操作

731
00:24:49,326 --> 0:24:51,296
我们知道专业用户

732
00:24:51,296 --> 0:24:52,196
喜欢创建自己的操作

733
00:24:52,776 --> 0:24:54,766
这些操作也可以

734
00:24:54,976 --> 0:24:57,356
显示在访达中

735
00:24:57,536 --> 0:24:58,856
你作为开发人员能够通过 App 扩展

736
00:24:58,856 --> 0:25:00,496
从你们的 App 中

737
00:24:58,856 --> 0:25:00,496
从你们的 App 中

738
00:25:00,496 --> 0:25:02,636
提供自定义操作

739
00:25:03,466 --> 0:25:05,366
作为终端用户

740
00:25:05,366 --> 0:25:07,376
你们还可以将 shell 脚本

741
00:25:07,376 --> 0:25:09,146
Applesscripts 和 Automator 操作

742
00:25:09,146 --> 0:25:11,496
合并到 Automator 中

743
00:25:11,496 --> 0:25:12,186
以创建一个操作包

744
00:25:12,246 --> 0:25:14,816
这些操作包

745
00:25:14,816 --> 0:25:17,046
将基于文件类型

746
00:25:17,046 --> 0:25:18,726
显示在访达中

747
00:25:19,456 --> 0:25:20,986
这些自定义操作

748
00:25:20,986 --> 0:25:23,216
在访达中拥有一席之地

749
00:25:23,216 --> 0:25:24,726
在触控栏中更是如此

750
00:25:25,176 --> 0:25:26,346
触控栏经过自定义后

751
00:25:26,346 --> 0:25:26,996
变得更加出色

752
00:25:27,346 --> 0:25:28,686
你们可以自定义触控栏

753
00:25:28,686 --> 0:25:29,906
能够随时或在按下某个按钮时

754
00:25:29,906 --> 0:25:31,576
显示这些操作

755
00:25:33,006 --> 0:25:35,546
接下来 在今天上午的主题演讲中

756
00:25:35,626 --> 0:25:37,566
你们看到了另一项

757
00:25:37,566 --> 0:25:39,906
我们非常感兴趣的技术

758
00:25:39,906 --> 0:25:42,796
一种可以将 iOS App

759
00:25:43,856 --> 0:25:44,626
引入 Mac 的简单方法

760
00:25:44,896 --> 0:25:46,076
我们在 “News” “股市”

761
00:25:46,076 --> 0:25:48,016
“语音备忘录”和“家庭”

762
00:25:48,016 --> 0:25:49,426
这四款 App 中

763
00:25:49,976 --> 0:25:52,486
开发这一技术

764
00:25:53,216 --> 0:25:57,076
这些 App 利用了 UIKit

765
00:25:57,336 --> 0:25:59,376
它是一种可以交付

766
00:25:59,376 --> 0:26:01,746
优秀 Mac App 的新方法

767
00:25:59,376 --> 0:26:01,746
优秀 Mac App 的新方法

768
00:26:01,746 --> 0:26:03,396
当然 AppKit 是我们

769
00:26:03,396 --> 0:26:04,846
主要的原生框架

770
00:26:04,846 --> 0:26:06,846
它充分地利用了 Mac

771
00:26:06,846 --> 0:26:07,596
提供的所有功能

772
00:26:07,936 --> 0:26:11,066
我们绝不能忽略这一点

773
00:26:11,066 --> 0:26:12,286
然而我们注意到

774
00:26:12,286 --> 0:26:14,186
很多人都有 iOS App

775
00:26:14,186 --> 0:26:15,396
却没有提供原生的 Mac 体验

776
00:26:15,396 --> 0:26:17,306
针对这种情况

777
00:26:17,306 --> 0:26:18,476
我们向你们介绍一种

778
00:26:18,476 --> 0:26:20,436
能够把你们的 App

779
00:26:20,436 --> 0:26:21,226
移植到 Mac 上的简单方法

780
00:26:22,346 --> 0:26:24,206
那么我们怎么做呢

781
00:26:25,216 --> 0:26:27,016
这些 UIKit App

782
00:26:27,016 --> 0:26:28,576
在原生堆栈上的

783
00:26:28,576 --> 0:26:29,026
原生环境中运行

784
00:26:29,196 --> 0:26:30,856
如果你们仔细观察

785
00:26:30,856 --> 0:26:32,446
你们会发现 UIKit App 下面的堆栈

786
00:26:32,446 --> 0:26:34,206
和 AppKit App 下面的堆栈

787
00:26:34,206 --> 0:26:35,976
有很多共同点

788
00:26:35,976 --> 0:26:37,616
事实上 这些环境是建立在

789
00:26:37,616 --> 0:26:39,336
一个共同的基础之上的

790
00:26:39,596 --> 0:26:40,816
然而随着时间的推移 这些基础已经

791
00:26:40,816 --> 0:26:41,676
在一定程度上分散了

792
00:26:42,826 --> 0:26:44,696
我们正在利用这个机会

793
00:26:44,846 --> 0:26:46,466
对底层进行合并

794
00:26:47,136 --> 0:26:48,546
这对之前不曾接触这项技术的

795
00:26:48,546 --> 0:26:49,886
开发人员来说是一个好消息

796
00:26:49,886 --> 0:26:51,186
因为它可以让你们更容易地

797
00:26:51,186 --> 0:26:52,836
编写可移植的代码

798
00:26:53,466 --> 0:26:56,336
这些 App 具有所有

799
00:26:56,336 --> 0:26:59,026
典型的 Mac 特性

800
00:26:59,026 --> 0:26:59,976
现在我想向你们展示一下

801
00:27:14,046 --> 0:27:15,466
你已经看到了 iPad 的

802
00:27:15,946 --> 0:27:17,306
新“股市” App

803
00:27:17,846 --> 0:27:19,426
我现在运行的是这个 App 的 Mac 版本

804
00:27:19,426 --> 0:27:20,906
它是基于同样的资源构建的

805
00:27:22,046 --> 0:27:23,356
鼠标事件被映射到 UI 事件

806
00:27:23,356 --> 0:27:25,336
因此我可以在关注列表中

807
00:27:25,336 --> 0:27:27,116
点按一个股票代号

808
00:27:27,586 --> 0:27:28,636
来查看更多的信息

809
00:27:29,306 --> 0:27:30,896
我可以在交互式图表上

810
00:27:30,896 --> 0:27:32,366
移动鼠标

811
00:27:32,366 --> 0:27:34,056
来查看某个时间点的价格

812
00:27:34,056 --> 0:27:35,416
我还可以点按并拖动

813
00:27:35,416 --> 0:27:37,086
来查看一段时间内的股价变化

814
00:27:37,736 --> 0:27:39,406
我可以在 App 中

815
00:27:39,406 --> 0:27:40,626
点按一篇文章并打开它

816
00:27:40,626 --> 0:27:42,666
既然这是一个 Mac 窗口

817
00:27:42,666 --> 0:27:44,766
我当然可以任意调整大小

818
00:27:45,266 --> 0:27:46,686
也可以全屏显示

819
00:27:46,766 --> 0:27:49,816
另一个事件映射的例子是

820
00:27:49,816 --> 0:27:51,466
我可以使用两指滚动

821
00:27:51,466 --> 0:27:52,296
来滑动网页

822
00:27:52,516 --> 0:27:54,216
如果我想复制一些文本

823
00:27:54,216 --> 0:27:57,126
我可以选择它 选中它

824
00:27:57,126 --> 0:28:02,686
然后拖拽到我的“备忘录” App 中

825
00:27:57,126 --> 0:28:02,686
然后拖拽到我的“备忘录” App 中

826
00:28:03,016 --> 0:28:04,426
在这个备忘录中

827
00:28:04,586 --> 0:28:06,406
我有一个新闻文章的链接

828
00:28:06,406 --> 0:28:07,826
我可以点按它

829
00:28:07,826 --> 0:28:09,736
然后它就会直接在 “News” App 中打开

830
00:28:10,126 --> 0:28:12,666
我们用一些项目

831
00:28:12,786 --> 0:28:15,826
填充了这个 App 的菜单项

832
00:28:16,126 --> 0:28:17,286
例如 我可以进入 “File（文件）” 菜单

833
00:28:17,286 --> 0:28:19,446
然后选择 “Follow Channel（关注频道）”

834
00:28:20,316 --> 0:28:22,406
请注意 ESPN 是如何

835
00:28:22,406 --> 0:28:24,096
直接过渡到侧边栏中的

836
00:28:24,916 --> 0:28:26,366
在工具栏中可以看到

837
00:28:26,366 --> 0:28:28,136
另一个 Mac 技术

838
00:28:28,136 --> 0:28:29,606
下面的内容为这里的渲染

839
00:28:29,606 --> 0:28:31,206
提供了一些红色

840
00:28:31,886 --> 0:28:33,256
我们在工具栏中

841
00:28:33,256 --> 0:28:34,996
有一些窗口的控件

842
00:28:34,996 --> 0:28:36,906
包括分享按钮

843
00:28:36,906 --> 0:28:38,266
这样我就可以点按

844
00:28:38,266 --> 0:28:39,396
并向朋友分享这篇文章

845
00:28:40,176 --> 0:28:44,186
这就是我们对 Mac 上的

846
00:28:44,526 --> 0:28:44,966
UIKit App 的简要介绍

847
00:28:45,516 --> 0:28:50,636
[ 掌声 ]

848
00:28:51,136 --> 0:28:51,676
谢谢大家

849
00:28:53,376 --> 0:28:54,686
我们一直在开发这一项技术

850
00:28:54,716 --> 0:28:56,266
并努力对它

851
00:28:56,266 --> 0:28:57,756
进行全面的审查

852
00:28:57,756 --> 0:28:59,316
我们计划在明年

853
00:28:59,316 --> 0:29:00,856
将其提供给你们

854
00:28:59,316 --> 0:29:00,856
将其提供给你们

855
00:29:00,856 --> 0:29:02,886
和你们的 App

856
00:29:04,496 --> 0:29:09,216
接下来 深色模式

857
00:29:09,406 --> 0:29:12,196
深色模式是 macOS Mojave 的

858
00:29:12,196 --> 0:29:13,966
一项重要更新

859
00:29:13,966 --> 0:29:14,576
我们觉得它看起来十分惊艳

860
00:29:14,576 --> 0:29:15,956
让我们简要地了解一下

861
00:29:20,076 --> 0:29:21,276
窗口背景为深色

862
00:29:21,566 --> 0:29:23,786
使得内容更为突出

863
00:29:24,346 --> 0:29:26,216
侧边栏是半透明的

864
00:29:26,456 --> 0:29:28,556
内容显示变得更为生动

865
00:29:28,976 --> 0:29:31,456
并与窗口下面的内容

866
00:29:31,486 --> 0:29:33,076
形成对比

867
00:29:33,076 --> 0:29:36,506
在一些情况下 我们发现

868
00:29:36,506 --> 0:29:38,356
改变图标很有必要

869
00:29:38,356 --> 0:29:40,136
比如你们可以看到这个

870
00:29:40,186 --> 0:29:42,236
颜色稍微变深的照片图标

871
00:29:42,236 --> 0:29:44,126
和这个深色的废纸篓图标

872
00:29:45,136 --> 0:29:46,346
这里还有一些

873
00:29:46,346 --> 0:29:46,946
非常微妙的细节

874
00:29:47,756 --> 0:29:49,176
窗口的背景

875
00:29:49,176 --> 0:29:50,536
也受桌面颜色的

876
00:29:50,536 --> 0:29:52,096
轻微影响

877
00:29:53,716 --> 0:29:55,316
为了向你们展示这个特性

878
00:29:55,316 --> 0:29:57,296
这个窗口被置于

879
00:29:57,296 --> 0:29:57,976
两张差别很大的桌面图片之上

880
00:29:59,736 --> 0:30:01,446
在左边

881
00:29:59,736 --> 0:30:01,446
在左边

882
00:30:01,446 --> 0:30:02,976
蓝色桌面图片上的窗口

883
00:30:03,066 --> 0:30:05,166
有轻微的蓝色色调

884
00:30:05,666 --> 0:30:07,346
而在右边

885
00:30:07,346 --> 0:30:08,516
橙色桌面图片上的窗口

886
00:30:08,516 --> 0:30:10,366
有轻微的橙色色调

887
00:30:10,996 --> 0:30:12,406
这不是半透明的

888
00:30:12,406 --> 0:30:13,596
我们实际上

889
00:30:13,596 --> 0:30:14,776
是从桌面获取平均的颜色

890
00:30:14,816 --> 0:30:16,966
然后将其混合到不透明的背景中

891
00:30:16,966 --> 0:30:18,536
这样 你们的窗口就能够

892
00:30:18,536 --> 0:30:20,056
在各种桌面图片上

893
00:30:20,056 --> 0:30:21,436
都看起来协调美观

894
00:30:21,436 --> 0:30:24,946
让我们看看 为了支持深色模式

895
00:30:24,946 --> 0:30:26,986
你们需要在 App 中进行的操作

896
00:30:28,656 --> 0:30:30,516
因为我们想要确保

897
00:30:30,516 --> 0:30:31,806
与你们的 App 保持兼容

898
00:30:31,806 --> 0:30:32,986
所以我们不会自动为你们选择

899
00:30:33,396 --> 0:30:34,836
对深色模式的支持

900
00:30:35,106 --> 0:30:36,426
你们需要构建

901
00:30:36,426 --> 0:30:38,726
macOS Mojave SDK

902
00:30:40,046 --> 0:30:42,026
例如 这就是 “Keynote 讲演”

903
00:30:42,026 --> 0:30:43,906
在 Mojave 上构建后

904
00:30:44,046 --> 0:30:46,096
首次运行时的样子

905
00:30:47,026 --> 0:30:48,696
它有一个深色的工具栏

906
00:30:48,696 --> 0:30:50,326
但它在其他方面并没有按照

907
00:30:50,386 --> 0:30:51,756
我们希望的方式 应用深色模式

908
00:30:53,146 --> 0:30:54,506
格式部分的

909
00:30:54,506 --> 0:30:55,606
背景颜色太浅

910
00:30:56,396 --> 0:30:58,866
工具栏控件变得

911
00:30:58,866 --> 0:31:00,696
模糊且难以阅读

912
00:30:58,866 --> 0:31:00,696
模糊且难以阅读

913
00:31:01,096 --> 0:31:02,546
侧边栏用的是错误的材料

914
00:31:02,546 --> 0:31:05,016
它过于半透明

915
00:31:05,016 --> 0:31:11,246
在控件的选定部分中

916
00:31:11,246 --> 0:31:12,906
我们发现在白色背景上

917
00:31:13,086 --> 0:31:14,056
存在白色的 Glyph

918
00:31:15,626 --> 0:31:17,266
然而好消息是

919
00:31:17,266 --> 0:31:20,426
这些问题都很容易解决

920
00:31:20,776 --> 0:31:22,426
我们有简单的 API

921
00:31:22,426 --> 0:31:23,426
来支持深色模式的所有需求

922
00:31:23,426 --> 0:31:25,536
事实上 其中的大多数

923
00:31:25,536 --> 0:31:26,846
已经存在多年了

924
00:31:26,846 --> 0:31:29,916
我们只需要做少量的添加

925
00:31:29,916 --> 0:31:30,576
NSColor

926
00:31:32,246 --> 0:31:34,376
带有 backgroundColor 属性的

927
00:31:34,376 --> 0:31:35,796
容器视图

928
00:31:36,926 --> 0:31:39,036
针对材料的 NSVisualEffectView

929
00:31:40,606 --> 0:31:42,366
模板图形

930
00:31:42,366 --> 0:31:44,476
以及一种新的方式来着色你们的内容

931
00:31:46,316 --> 0:31:48,456
我们用这些 API 更新了 Keynote 讲演

932
00:31:48,456 --> 0:31:50,476
结果就是这样

933
00:31:51,196 --> 0:31:51,976
看起来很棒

934
00:31:54,696 --> 0:31:56,416
这些都是非常简单的改变

935
00:31:56,666 --> 0:31:58,436
我们邀请你们今天来试试

936
00:31:59,006 --> 0:32:00,236
如果你们已经遵循了 在系统颜色中

937
00:31:59,006 --> 0:32:00,236
如果你们已经遵循了 在系统颜色中

938
00:32:00,236 --> 0:32:02,076
使用素材目录的最佳实践

939
00:32:02,076 --> 0:32:03,596
那么你们可能会

940
00:32:03,596 --> 0:32:05,136
惊喜地发现

941
00:32:05,186 --> 0:32:06,646
你们已经非常接近成功了

942
00:32:07,306 --> 0:32:08,556
由于这些技术仍然可以

943
00:32:08,556 --> 0:32:10,486
在以前的版本中使用

944
00:32:10,756 --> 0:32:12,146
所以你们可以应用它们

945
00:32:12,146 --> 0:32:12,866
并轻松地进行向后兼容

946
00:32:13,706 --> 0:32:14,976
当然 这取决于

947
00:32:14,976 --> 0:32:16,456
你们的 App 中

948
00:32:16,456 --> 0:32:18,256
有多少自定义控件

949
00:32:18,256 --> 0:32:20,356
但对于我们的一些 App 来说

950
00:32:20,356 --> 0:32:21,786
仅需要一天就可以完成

951
00:32:22,006 --> 0:32:23,346
我们也为你们提供了

952
00:32:23,346 --> 0:32:24,096
一些有用的工具

953
00:32:24,096 --> 0:32:26,536
我想有请 Matthew

954
00:32:26,656 --> 0:32:28,306
来到讲台

955
00:32:28,306 --> 0:32:30,296
并向你们展示 Xcode 10

956
00:32:30,296 --> 0:32:31,976
如何支持深色模式的应用等内容

957
00:32:32,516 --> 0:32:38,726
[ 掌声 ]

958
00:32:39,226 --> 0:32:39,916
&gt;&gt; 谢谢 Kristen

959
00:32:40,676 --> 0:32:42,166
我们今年发布的 Xcode 版本

960
00:32:42,166 --> 0:32:43,486
关注的是生产力

961
00:32:44,156 --> 0:32:45,116
工作流的改进

962
00:32:45,266 --> 0:32:47,236
性能的改进

963
00:32:47,236 --> 0:32:50,586
以及对所有 SDK 新特性的支持

964
00:32:50,586 --> 0:32:51,906
当然

965
00:32:51,906 --> 0:32:54,566
Xcode 在 macOS Mojave 上运行时

966
00:32:54,566 --> 0:32:55,556
提供了全新的外观和使用感受

967
00:32:56,006 --> 0:32:57,956
让我们先来看看

968
00:32:57,956 --> 0:32:59,676
Xcode 如何让你们的 Mac App

969
00:32:59,676 --> 0:33:01,976
在深色模式下 也拥有出色的外观

970
00:32:59,676 --> 0:33:01,976
在深色模式下 也拥有出色的外观

971
00:33:06,046 --> 0:33:08,826
现在我们回到了太阳系 App

972
00:33:09,576 --> 0:33:10,886
我们已经把它转换成深色模式

973
00:33:10,886 --> 0:33:12,896
到目前为止我们已经 取得了很大的进展

974
00:33:13,356 --> 0:33:15,036
但还有一些改进

975
00:33:15,036 --> 0:33:15,936
我需要在这里完成

976
00:33:16,716 --> 0:33:17,786
设计程序为我们提供了一个

977
00:33:17,786 --> 0:33:19,746
颜色更深的地球图形

978
00:33:20,036 --> 0:33:21,806
我可以在

979
00:33:22,006 --> 0:33:23,786
这两个硬编码的方框里

980
00:33:23,786 --> 0:33:24,466
改变颜色

981
00:33:25,286 --> 0:33:27,006
Xcode 的素材目录

982
00:33:27,056 --> 0:33:27,546
使这变得很容易

983
00:33:28,166 --> 0:33:29,866
我们从这个图形开始

984
00:33:31,026 --> 0:33:32,406
我需要切换到素材标签页

985
00:33:32,406 --> 0:33:34,066
我们可以看到

986
00:33:34,066 --> 0:33:35,946
我已经定义了

987
00:33:35,996 --> 0:33:37,116
所有颜色的深色变量

988
00:33:38,496 --> 0:33:39,896
我将选择

989
00:33:39,896 --> 0:33:41,576
包含所有图形的组

990
00:33:41,686 --> 0:33:43,026
比如 我想为这个行星图形

991
00:33:43,026 --> 0:33:45,276
添加一个深色变体 非常简单

992
00:33:46,126 --> 0:33:46,796
我选择它

993
00:33:47,426 --> 0:33:49,416
进入检查器并添加一个

994
00:33:49,416 --> 0:33:50,096
深色变体

995
00:33:50,586 --> 0:33:52,246
我的设计师已经把这些素材发给了我

996
00:33:52,246 --> 0:33:53,596
所以我可以把它们

997
00:33:53,596 --> 0:33:56,676
从我的下载文件夹中取出

998
00:33:56,676 --> 0:33:57,146
并放到目录中

999
00:33:58,176 --> 0:33:58,866
就是这样

1000
00:33:59,536 --> 0:34:00,786
当我回到我的界面时

1001
00:33:59,536 --> 0:34:00,786
当我回到我的界面时

1002
00:34:00,786 --> 0:34:02,346
你们将看到 更新后的地球图形

1003
00:34:02,346 --> 0:34:03,886
已经匹配了

1004
00:34:04,206 --> 0:34:05,386
界面构建器画布的外观

1005
00:34:07,176 --> 0:34:08,886
我已经指定了我需要的

1006
00:34:08,886 --> 0:34:10,096
所有颜色变体

1007
00:34:10,666 --> 0:34:12,246
为了更新这些方框

1008
00:34:12,246 --> 0:34:14,126
我只选择这两个框

1009
00:34:14,126 --> 0:34:15,666
进入检查器并将填充颜色

1010
00:34:15,666 --> 0:34:17,966
更改为目录中的一个颜色

1011
00:34:18,596 --> 0:34:20,136
我们选择 badgeBackgroundColor

1012
00:34:21,356 --> 0:34:22,846
很好 现在我的界面

1013
00:34:22,846 --> 0:34:23,466
看起来十分漂亮

1014
00:34:24,485 --> 0:34:26,255
在设计界面时

1015
00:34:26,255 --> 0:34:27,545
我通常喜欢检查其他的外观

1016
00:34:27,545 --> 0:34:29,466
因为我需要

1017
00:34:29,466 --> 0:34:30,565
评估我的进展

1018
00:34:31,326 --> 0:34:32,795
所以我们需要使用界面构建器

1019
00:34:33,835 --> 0:34:34,896
在底部

1020
00:34:34,896 --> 0:34:36,516
这个新的外观栏允许我

1021
00:34:36,516 --> 0:34:38,576
在外观之间切换

1022
00:34:39,356 --> 0:34:40,255
我只要选择左边的外观

1023
00:34:40,255 --> 0:34:41,485
就可以看到

1024
00:34:41,485 --> 0:34:43,565
我的 App 的浅色外观

1025
00:34:44,266 --> 0:34:46,076
这样我就可以很容易地评估我的进展

1026
00:34:46,906 --> 0:34:49,466
让我们运行这个 App

1027
00:34:49,466 --> 0:34:50,136
看看结果怎么样

1028
00:34:51,295 --> 0:34:52,536
我们需要更新我们的素材

1029
00:34:52,536 --> 0:34:53,766
并启动 App

1030
00:34:54,505 --> 0:34:55,916
我们在这里可以看到

1031
00:34:55,916 --> 0:34:57,106
App 启动了

1032
00:34:58,046 --> 0:34:59,606
很好 看起来很不错

1033
00:35:00,226 --> 0:35:02,406
这个 App 已经能够

1034
00:35:02,406 --> 0:35:04,226
以深色模式启动 进而匹配了我的系统

1035
00:35:04,916 --> 0:35:06,466
在我开发 App 的过程中

1036
00:35:06,466 --> 0:35:07,556
我也可以改变它的外观

1037
00:35:08,486 --> 0:35:09,866
在调试栏的下面

1038
00:35:09,866 --> 0:35:11,516
是一个新的外观切换开关

1039
00:35:11,516 --> 0:35:13,476
我也可以在触控栏中使用它

1040
00:35:13,476 --> 0:35:15,146
并访问所有的外观

1041
00:35:15,666 --> 0:35:17,366
我可以选择浅色模式 深色模式

1042
00:35:17,366 --> 0:35:19,566
甚至高对比度模式

1043
00:35:19,566 --> 0:35:21,196
来评估辅助功能

1044
00:35:21,966 --> 0:35:23,766
现在我选择了浅色模式

1045
00:35:23,766 --> 0:35:25,816
我们加载这些素材

1046
00:35:25,816 --> 0:35:27,446
我的 App 就会处于浅色模式

1047
00:35:28,436 --> 0:35:30,496
只需使用素材目录

1048
00:35:30,496 --> 0:35:32,186
界面构建器

1049
00:35:32,186 --> 0:35:33,946
和我们的调试工具

1050
00:35:33,946 --> 0:35:35,176
你们就可以让你们的 App

1051
00:35:35,176 --> 0:35:36,566
在黑暗模式下也拥有出色的外观

1052
00:35:37,516 --> 0:35:45,566
[ 掌声 ]

1053
00:35:46,066 --> 0:35:47,796
我知道你们中的许多人

1054
00:35:47,796 --> 0:35:49,456
一直想要

1055
00:35:49,566 --> 0:35:50,646
在 Xcode 中显示暗色模式

1056
00:35:51,396 --> 0:35:52,616
它已经成为呼声最高的

1057
00:35:52,616 --> 0:35:54,076
请求之一

1058
00:35:54,076 --> 0:35:55,296
事实上 就在几周前

1059
00:35:55,296 --> 0:35:56,686
App Store 中出现了一条

1060
00:35:56,686 --> 0:35:58,596
关于诉求这个功能的评论

1061
00:35:58,856 --> 0:36:00,436
这个用户叫做

1062
00:35:58,856 --> 0:36:00,436
这个用户叫做

1063
00:36:00,436 --> 0:36:02,456
Ronnie Bo Bonnie

1064
00:36:02,456 --> 0:36:03,436
这是真的

1065
00:36:03,436 --> 0:36:04,216
并不是我编造的

1066
00:36:04,556 --> 0:36:05,556
但我只是想花点时间 然后说

1067
00:36:05,556 --> 0:36:07,436
Ronnie 如果你也在这里的话

1068
00:36:07,436 --> 0:36:09,536
你不用出卖自己的灵魂了

1069
00:36:10,516 --> 0:36:12,516
[ 笑声 ]

1070
00:36:13,516 --> 0:36:15,866
[ 掌声 ]

1071
00:36:16,366 --> 0:36:17,586
我们也做出了其他的一些

1072
00:36:17,586 --> 0:36:18,906
针对设计工具的改进

1073
00:36:18,906 --> 0:36:19,666
今天与你们分享

1074
00:36:21,286 --> 0:36:23,256
基于表格的 UI 比如“偏好设置”和“检查器” 

1075
00:36:23,256 --> 0:36:25,996
在 Mac App 中是很常见的

1076
00:36:26,036 --> 0:36:27,816
Cocoa 的 NSGridView

1077
00:36:27,816 --> 0:36:30,396
是布局它们的最佳系统

1078
00:36:30,516 --> 0:36:31,766
所以我们将 NSGridView 的功能

1079
00:36:31,876 --> 0:36:33,656
引入到界面构建器中

1080
00:36:33,656 --> 0:36:35,496
这样你们就可以

1081
00:36:35,496 --> 0:36:37,166
像在电子表格中

1082
00:36:37,506 --> 0:36:39,126
设计表格一样

1083
00:36:39,126 --> 0:36:39,606
设计基于列和行的 UI

1084
00:36:40,636 --> 0:36:41,676
拖放内容 [ 掌声 ]

1085
00:36:42,206 --> 0:36:42,696
是的

1086
00:36:44,786 --> 0:36:48,696
你们可以为此鼓掌

1087
00:36:48,806 --> 0:36:49,756
电子表格可以很酷

1088
00:36:49,756 --> 0:36:52,866
你们可以拖放内容

1089
00:36:52,906 --> 0:36:54,476
使用符合环境操作

1090
00:36:54,476 --> 0:36:56,296
并获得诸如从右到左的布局

1091
00:36:56,356 --> 0:36:57,436
等内容的系统访问

1092
00:36:58,456 --> 0:36:59,476
在设计界面时

1093
00:36:59,476 --> 0:37:01,166
库是一个重要的工具

1094
00:36:59,476 --> 0:37:01,166
库是一个重要的工具

1095
00:37:01,266 --> 0:37:02,796
我们为你们提供一个

1096
00:37:02,796 --> 0:37:04,046
全新的工作流

1097
00:37:04,676 --> 0:37:05,956
因为现在的库已经

1098
00:37:06,126 --> 0:37:07,466
与检查器分离了

1099
00:37:08,246 --> 0:37:09,596
你们现在可以把库移动到

1100
00:37:09,596 --> 0:37:10,906
任何你们想要的地方

1101
00:37:11,556 --> 0:37:13,196
可以调整大小

1102
00:37:13,196 --> 0:37:13,666
以匹配你们的布局

1103
00:37:14,286 --> 0:37:15,846
还可以在工作时

1104
00:37:15,846 --> 0:37:17,276
保持库的开启

1105
00:37:17,276 --> 0:37:18,966
或者在完成时 自动关闭库

1106
00:37:19,516 --> 0:37:25,066
[ 掌声 ]

1107
00:37:25,566 --> 0:37:26,896
这个库可以很好地处理

1108
00:37:26,896 --> 0:37:28,176
我们所有的内容类型

1109
00:37:28,246 --> 0:37:31,596
包括媒体和代码片段

1110
00:37:31,596 --> 0:37:32,746
最后 有了我们的设计工具

1111
00:37:32,746 --> 0:37:33,876
你们会发现

1112
00:37:33,876 --> 0:37:35,636
它们变得更灵活

1113
00:37:35,636 --> 0:37:37,536
拥有更快的文档加载速度

1114
00:37:37,536 --> 0:37:39,436
和更具响应性的画布交互

1115
00:37:40,666 --> 0:37:42,056
我们也将大量的精力

1116
00:37:42,056 --> 0:37:43,706
放在我们的源代码编辑工具

1117
00:37:43,756 --> 0:37:46,716
使它们能够保持快速 流畅

1118
00:37:46,716 --> 0:37:47,286
并不断提供有用的信息

1119
00:37:47,286 --> 0:37:49,706
我们从性能出发

1120
00:37:49,706 --> 0:37:50,626
使得编辑器能够

1121
00:37:50,626 --> 0:37:52,246
以更快的速度加载大型文档

1122
00:37:52,306 --> 0:37:55,996
同时保持 每秒 60 帧每秒的平滑滚动

1123
00:37:57,016 --> 0:37:58,596
接下来

1124
00:37:58,666 --> 0:38:00,516
我们对 SourceKit 的

1125
00:37:58,666 --> 0:38:00,516
我们对 SourceKit 的

1126
00:38:00,516 --> 0:38:01,856
稳定性加倍

1127
00:38:01,856 --> 0:38:02,736
并增强语言集成的坚固性

1128
00:38:03,146 --> 0:38:04,966
所以现在 更多精彩的注释

1129
00:38:04,966 --> 0:38:06,296
将不再处于编辑器周围

1130
00:38:06,296 --> 0:38:07,966
而是存在于编辑器之中

1131
00:38:09,516 --> 0:38:15,786
[ 掌声 ]

1132
00:38:16,286 --> 0:38:17,766
自动补全和导航

1133
00:38:17,826 --> 0:38:19,646
是两个基本的工作流

1134
00:38:19,646 --> 0:38:20,686
我们在这两个方面都做了改进

1135
00:38:21,596 --> 0:38:23,106
自动补全现在提供了

1136
00:38:23,106 --> 0:38:24,896
更有针对性的结果

1137
00:38:24,896 --> 0:38:27,076
并限制了高置信匹配的完成

1138
00:38:28,046 --> 0:38:29,466
当使用“跳转到定义”

1139
00:38:29,466 --> 0:38:31,496
进行导航时

1140
00:38:31,496 --> 0:38:32,956
目的地列表现在将提供

1141
00:38:32,956 --> 0:38:34,676
类似于文件和行信息的环境细节

1142
00:38:34,676 --> 0:38:36,276
以帮助你们轻松到达

1143
00:38:36,276 --> 0:38:37,576
你想要去的地方

1144
00:38:38,516 --> 0:38:43,166
[ 掌声 ]

1145
00:38:43,666 --> 0:38:44,576
你们将在 “Action（操作）” 菜单中的

1146
00:38:44,576 --> 0:38:46,096
“Callers” 选项中

1147
00:38:46,096 --> 0:38:48,136
看到相同的环境信息

1148
00:38:48,136 --> 0:38:49,976
这是一个让你们在项目之间

1149
00:38:49,976 --> 0:38:51,646
迅速切换的完美方式

1150
00:38:52,456 --> 0:38:54,756
去年 我们为包括 Swift 的

1151
00:38:54,756 --> 0:38:56,436
所有语言

1152
00:38:56,506 --> 0:38:57,156
引入了重构

1153
00:38:57,156 --> 0:38:59,286
而你们 也就是 Swift 社区

1154
00:38:59,486 --> 0:39:01,126
抓住了这个机会

1155
00:38:59,486 --> 0:39:01,126
抓住了这个机会

1156
00:39:01,126 --> 0:39:02,536
并增加了一些新的操作

1157
00:39:03,936 --> 0:39:05,606
这些操作简化了

1158
00:39:05,606 --> 0:39:07,526
常见的编程场景

1159
00:39:07,526 --> 0:39:08,956
并直接构建到 Xcode 之中

1160
00:39:09,446 --> 0:39:10,336
点按一下就可使用

1161
00:39:11,766 --> 0:39:13,526
重构只是你们在项目中

1162
00:39:13,526 --> 0:39:15,266
修改源代码的

1163
00:39:15,356 --> 0:39:16,196
众多方法之一

1164
00:39:16,846 --> 0:39:17,876
为了更容易地跟踪

1165
00:39:17,876 --> 0:39:19,806
你们的更改

1166
00:39:19,806 --> 0:39:21,326
我们引入了一个

1167
00:39:21,326 --> 0:39:22,056
源代码控制更改栏

1168
00:39:23,336 --> 0:39:24,706
更改栏位于

1169
00:39:24,706 --> 0:39:25,896
编辑器的左侧

1170
00:39:25,896 --> 0:39:27,326
它是一些突出显示的

1171
00:39:27,326 --> 0:39:29,156
自上次退出后发生变化的代码行

1172
00:39:29,946 --> 0:39:31,896
标志的样式和颜色

1173
00:39:31,896 --> 0:39:33,576
反映了更改的类型

1174
00:39:33,576 --> 0:39:35,326
使你很容易地

1175
00:39:35,326 --> 0:39:37,046
看到你所做的更改

1176
00:39:37,046 --> 0:39:38,516
团队成员所做的更改

1177
00:39:38,516 --> 0:39:41,016
以及可能存在冲突的更改

1178
00:39:41,836 --> 0:39:44,466
这个特性

1179
00:39:45,516 --> 0:39:49,586
[ 掌声 ]

1180
00:39:50,086 --> 0:39:51,796
是的 我也认为这个特性非常棒

1181
00:39:51,796 --> 0:39:53,966
现在我想给你们演示一下

1182
00:39:55,886 --> 0:39:57,336
我们回到

1183
00:39:57,336 --> 0:39:59,686
太阳系 App

1184
00:39:59,686 --> 0:40:00,906
我想在我们的一个源文件中

1185
00:39:59,686 --> 0:40:00,906
我想在我们的一个源文件中

1186
00:40:00,906 --> 0:40:03,236
做一些改变

1187
00:40:03,346 --> 0:40:04,946
那就是我们的 sceneViewController

1188
00:40:05,676 --> 0:40:07,166
我将在编辑器中

1189
00:40:07,166 --> 0:40:08,446
向下滚动到

1190
00:40:08,446 --> 0:40:09,206
我想要进行更改的地方

1191
00:40:09,816 --> 0:40:10,996
我们可以看到在左边

1192
00:40:11,076 --> 0:40:12,716
就在行数的左边

1193
00:40:12,716 --> 0:40:14,896
源代码控制更改栏

1194
00:40:14,896 --> 0:40:16,206
指示了一些

1195
00:40:16,206 --> 0:40:18,436
团队成员所做的上游更改

1196
00:40:19,106 --> 0:40:21,576
事实上 如果我对这行进行更改

1197
00:40:21,616 --> 0:40:22,926
你们将看到标志变为红色

1198
00:40:23,276 --> 0:40:24,346
为了突出显示冲突

1199
00:40:24,976 --> 0:40:26,626
如果我把光标放在这个标志上

1200
00:40:26,626 --> 0:40:27,596
你们会看到

1201
00:40:27,666 --> 0:40:28,996
它突出显示了

1202
00:40:29,036 --> 0:40:30,356
已经发生变化并且正在产生冲突的

1203
00:40:30,356 --> 0:40:31,166
字符的范围

1204
00:40:32,106 --> 0:40:33,976
如果我点按这个标志

1205
00:40:34,146 --> 0:40:35,776
它会弹出一个操作菜单

1206
00:40:35,776 --> 0:40:36,726
其中有对这个变化的描述

1207
00:40:36,726 --> 0:40:38,546
以及我可以进行的操作

1208
00:40:38,546 --> 0:40:40,986
我看到我的团队成员在这里

1209
00:40:40,986 --> 0:40:42,556
添加了更多的描述性的注释

1210
00:40:43,316 --> 0:40:44,896
我想我会采取他的更改方案

1211
00:40:45,246 --> 0:40:46,576
因此我将使用 “Action（操作）”菜单

1212
00:40:46,576 --> 0:40:48,946
来丢弃我的更改 并在上方的

1213
00:40:48,946 --> 0:40:50,546
“Source Controll（源代码控制）”菜单中

1214
00:40:50,606 --> 0:40:51,656
把他的更改 Pull 过来

1215
00:40:53,046 --> 0:40:55,146
这是他的更改

1216
00:40:55,146 --> 0:40:56,216
有十分具体的注释

1217
00:40:56,916 --> 0:40:58,276
我可以滚动到编辑器的底部

1218
00:40:58,276 --> 0:40:59,036
看看还有什么

1219
00:40:59,036 --> 0:41:01,096
我想看的东西

1220
00:40:59,036 --> 0:41:01,096
我想看的东西

1221
00:41:01,976 --> 0:41:02,976
这是 Xcode 10 的另一个新特性

1222
00:41:02,976 --> 0:41:04,696
我们的编辑器现在支持

1223
00:41:04,726 --> 0:41:05,376
超范围滚动功能

1224
00:41:06,516 --> 0:41:11,976
[ 掌声 ]

1225
00:41:12,476 --> 0:41:13,706
回到我想修改的代码行

1226
00:41:13,746 --> 0:41:15,226
我想把这些硬编码的函数

1227
00:41:15,226 --> 0:41:16,616
转换成

1228
00:41:16,656 --> 0:41:20,406
从素材目录中 提取颜色的属性

1229
00:41:21,376 --> 0:41:23,636
我想改变其中的三个

1230
00:41:23,636 --> 0:41:25,546
由于这些注释

1231
00:41:25,546 --> 0:41:26,336
它们现在有点分散了

1232
00:41:27,076 --> 0:41:29,066
没有关系 在 Xcode 10 中 

1233
00:41:29,066 --> 0:41:30,196
我们改进了代码折叠问题

1234
00:41:31,066 --> 0:41:32,356
你们现在可以

1235
00:41:32,356 --> 0:41:33,206
随意折叠代码

1236
00:41:33,686 --> 0:41:34,856
我们还重新引入了

1237
00:41:34,856 --> 0:41:35,636
代码折叠条

1238
00:41:35,756 --> 0:41:36,716
就在行数的右边

1239
00:41:36,716 --> 0:41:37,966
我可以点按

1240
00:41:38,516 --> 0:41:42,546
[ 掌声 ]

1241
00:41:43,046 --> 0:41:43,876
从而将代码折叠起来

1242
00:41:44,326 --> 0:41:45,446
现在我们有了这个

1243
00:41:45,506 --> 0:41:47,923
漂亮且简洁的折叠展示

1244
00:41:48,546 --> 0:41:50,206
这是我想要改变的

1245
00:41:50,206 --> 0:41:51,686
第一个函数

1246
00:41:51,686 --> 0:41:52,916
我发现所有这些函数都

1247
00:41:52,916 --> 0:41:54,256
非常相似

1248
00:41:54,256 --> 0:41:55,326
所以如果我能同时改变它们

1249
00:41:55,326 --> 0:41:57,176
那就太好了

1250
00:41:58,226 --> 0:42:07,626
我现在通过多光标编辑 也能实现这点了

1251
00:41:58,226 --> 0:42:07,626
我现在通过多光标编辑 也能实现这点了

1252
00:42:08,126 --> 0:42:09,326
多光标编辑的关键是

1253
00:42:09,326 --> 0:42:11,506
两个手指 “Control” 和 “Shift”

1254
00:42:11,956 --> 0:42:13,806
我需要按住这两个键

1255
00:42:13,836 --> 0:42:15,086
然后依次点按

1256
00:42:15,086 --> 0:42:16,456
每个函数的开头

1257
00:42:17,326 --> 0:42:18,766
我们将使用范围选择

1258
00:42:18,766 --> 0:42:20,166
将它们改为 var

1259
00:42:20,606 --> 0:42:22,246
我们把它们换成冒号

1260
00:42:22,736 --> 0:42:24,786
到目前为止我们做得都很好

1261
00:42:25,896 --> 0:42:27,726
现在我突然发现

1262
00:42:27,726 --> 0:42:29,356
我将目录中的颜色和这里的属性

1263
00:42:29,546 --> 0:42:31,426
起了相同的名称

1264
00:42:32,006 --> 0:42:33,606
我们只需要选择这些名字

1265
00:42:33,606 --> 0:42:34,236
并复制它们

1266
00:42:34,926 --> 0:42:35,716
现在让我们执行

1267
00:42:35,716 --> 0:42:37,136
并改变它们

1268
00:42:37,836 --> 0:42:39,256
我们再放置三个光标

1269
00:42:39,256 --> 0:42:41,196
全部选中

1270
00:42:41,196 --> 0:42:43,506
输入 named:

1271
00:42:43,506 --> 0:42:45,876
粘贴这些颜色

1272
00:42:45,876 --> 0:42:46,766
这样我们就将它们全部改变了

1273
00:42:46,766 --> 0:42:47,916
快了三倍

1274
00:42:48,516 --> 0:42:55,016
[ 掌声 ]

1275
00:42:55,516 --> 0:42:56,876
多光标编辑

1276
00:42:56,876 --> 0:42:59,066
也很适合列选择

1277
00:42:59,626 --> 0:43:01,206
这里是所有

1278
00:42:59,626 --> 0:43:01,206
这里是所有

1279
00:43:01,206 --> 0:43:02,516
我用 weak 定义的 IBOutlets

1280
00:43:03,006 --> 0:43:04,666
如果我按住 option 键

1281
00:43:05,066 --> 0:43:06,766
将它们全部选中

1282
00:43:06,766 --> 0:43:08,806
[ 欢呼声 ] 

1283
00:43:09,226 --> 0:43:10,266
然后把它们

1284
00:43:10,266 --> 0:43:12,346
转换成 unowned [ 掌声 ]

1285
00:43:12,966 --> 0:43:13,896
就像这样

1286
00:43:13,896 --> 0:43:15,316
我可以进行修改

1287
00:43:15,316 --> 0:43:16,516
然后使用源代码控制条

1288
00:43:16,516 --> 0:43:17,786
确保我得到了我想要的修改

1289
00:43:18,546 --> 0:43:19,916
这些就是我们在 Xcode 10 中

1290
00:43:19,916 --> 0:43:21,156
所添加的一些出色的

1291
00:43:21,486 --> 0:43:22,846
新的编辑功能

1292
00:43:23,516 --> 0:43:30,246
[ 掌声 ]

1293
00:43:30,746 --> 0:43:32,066
除了性能和稳定性方面的

1294
00:43:32,066 --> 0:43:33,246
改进之外

1295
00:43:33,246 --> 0:43:35,106
我们还增加了

1296
00:43:35,106 --> 0:43:36,356
源代码控制更改条

1297
00:43:36,356 --> 0:43:36,946
和多光标编辑

1298
00:43:37,276 --> 0:43:39,156
Xcode 10 会不断提升

1299
00:43:39,156 --> 0:43:41,366
我们的源代码编辑体验

1300
00:43:41,906 --> 0:43:43,846
除了源代码控制更改栏之外

1301
00:43:43,846 --> 0:43:45,456
我们还扩展了

1302
00:43:45,456 --> 0:43:47,456
源代码控制集成

1303
00:43:47,456 --> 0:43:50,426
首先 我们将冲突解决系统

1304
00:43:50,426 --> 0:43:52,286
与 Git 统一起来

1305
00:43:52,286 --> 0:43:54,106
使结果更准确

1306
00:43:54,106 --> 0:43:56,266
更可预测

1307
00:43:56,316 --> 0:43:57,316
且速度更快

1308
00:43:58,466 --> 0:44:00,376
接下来 我们增强了

1309
00:43:58,466 --> 0:44:00,376
接下来 我们增强了

1310
00:44:00,376 --> 0:44:02,146
Pull 操作以支持 Rebase

1311
00:44:02,446 --> 0:44:03,896
这样你们将可以重放

1312
00:44:03,896 --> 0:44:04,656
不同分支之间的变化 [ 掌声 ]

1313
00:44:04,656 --> 0:44:05,976
是的 我们可以为此鼓掌

1314
00:44:06,516 --> 0:44:08,896
[ 掌声 ]

1315
00:44:09,396 --> 0:44:10,726
你们可以轻松地重放

1316
00:44:10,726 --> 0:44:12,106
在分支之间的更改

1317
00:44:12,106 --> 0:44:13,346
而不必进行不必要的 Merge

1318
00:44:13,976 --> 0:44:15,786
为了保证连接的安全

1319
00:44:15,786 --> 0:44:17,116
Xcode 将帮助你们

1320
00:44:17,116 --> 0:44:19,836
创建 SSH 密钥

1321
00:44:19,836 --> 0:44:21,786
并将它们直接上载到服务帐户

1322
00:44:22,516 --> 0:44:26,516
[ 掌声 ]

1323
00:44:27,016 --> 0:44:29,006
这对于我们的服务集成来说

1324
00:44:29,086 --> 0:44:30,466
是一个完美的补充

1325
00:44:30,466 --> 0:44:32,196
因为除了 GitHub

1326
00:44:32,376 --> 0:44:33,916
我们今年还增加了两个新的服务

1327
00:44:34,676 --> 0:44:35,616
对 Atlassian 的

1328
00:44:35,676 --> 0:44:37,566
Bitbucket 云和 Bitbucket 服务器的支持

1329
00:44:38,516 --> 0:44:42,246
[ 掌声 ]

1330
00:44:42,746 --> 0:44:44,766
以及对 GitLab.com 的支持

1331
00:44:45,096 --> 0:44:45,846
和自托管

1332
00:44:46,516 --> 0:44:49,816
[ 掌声 ]

1333
00:44:50,316 --> 0:44:51,836
看来这里有很多源代码控制的爱好者

1334
00:44:52,606 --> 0:44:54,366
这两个功能都很棒

1335
00:44:54,496 --> 0:44:55,786
因为它们的 WEB 接口

1336
00:44:55,786 --> 0:44:57,976
将直接检入 Xcode

1337
00:44:59,386 --> 0:45:01,006
正如 Sebastian 前面提到的

1338
00:44:59,386 --> 0:45:01,006
正如 Sebastian 前面提到的

1339
00:45:01,006 --> 0:45:02,626
我们热衷于为你们提供

1340
00:45:02,626 --> 0:45:04,186
优秀的工具来调试和优化

1341
00:45:04,476 --> 0:45:05,696
你们的 App

1342
00:45:06,056 --> 0:45:07,556
今年 我们重点关注了

1343
00:45:07,556 --> 0:45:09,536
工具的可用性和性能

1344
00:45:09,536 --> 0:45:12,456
我们从低级调试器

1345
00:45:12,456 --> 0:45:13,536
LLDB 开始

1346
00:45:13,966 --> 0:45:15,656
LLDB 在控制台

1347
00:45:15,656 --> 0:45:16,966
和 Xcode 的变量视图中

1348
00:45:16,966 --> 0:45:19,146
具有更快的启动速度

1349
00:45:19,146 --> 0:45:20,186
和更精确的对变量的访问

1350
00:45:21,676 --> 0:45:23,176
接下来 我们将调试符号的

1351
00:45:23,176 --> 0:45:25,246
下载速度提高了 5 倍

1352
00:45:25,246 --> 0:45:26,496
所以现在的下载时长是以秒记

1353
00:45:26,496 --> 0:45:26,976
而不是以分钟记

1354
00:45:27,516 --> 0:45:33,146
[ 掌声 ]

1355
00:45:33,646 --> 0:45:34,646
我们增强了

1356
00:45:34,646 --> 0:45:35,966
内存调试工具

1357
00:45:35,966 --> 0:45:37,106
使其能够更快地加载和保存文档

1358
00:45:37,106 --> 0:45:39,176
并提供了全新且紧凑的布局

1359
00:45:39,176 --> 0:45:40,646
以帮助你们同时查看

1360
00:45:40,646 --> 0:45:42,746
更多的 App

1361
00:45:43,886 --> 0:45:45,456
今年春天的早些时候

1362
00:45:45,456 --> 0:45:47,936
我们介绍了能源诊断报告

1363
00:45:48,416 --> 0:45:49,826
它们就像崩溃日志

1364
00:45:49,826 --> 0:45:50,606
但是针对能源使用

1365
00:45:51,266 --> 0:45:52,796
这些报告在 iOS 上

1366
00:45:52,836 --> 0:45:54,656
自动收集

1367
00:45:54,656 --> 0:45:57,086
用于 App Store App 的试运行

1368
00:45:57,086 --> 0:45:59,106
并会展现前台和

1369
00:45:59,106 --> 0:46:00,016
后台使用的细节

1370
00:45:59,106 --> 0:46:00,016
后台使用的细节

1371
00:46:01,086 --> 0:46:02,576
这些报告显示在整理器中

1372
00:46:02,576 --> 0:46:04,326
内容包括用来说明事件的

1373
00:46:04,326 --> 0:46:05,916
堆栈框架

1374
00:46:06,896 --> 0:46:08,196
和崩溃日志一样

1375
00:46:08,196 --> 0:46:09,876
你们可以在项目中打开这些报告

1376
00:46:09,876 --> 0:46:11,446
导航你们的代码

1377
00:46:11,446 --> 0:46:13,756
然后找到并修复问题

1378
00:46:15,006 --> 0:46:16,646
除此之外

1379
00:46:16,646 --> 0:46:19,456
我们在测试方面也有一些改进

1380
00:46:19,806 --> 0:46:21,346
今年春天的早些时候

1381
00:46:21,386 --> 0:46:23,116
我们增强了 “Code Coverage（代码覆盖）”

1382
00:46:23,116 --> 0:46:24,466
添加了一个命令行工具

1383
00:46:24,466 --> 0:46:26,456
来访问覆盖数据

1384
00:46:26,456 --> 0:46:28,476
并允许你们选择

1385
00:46:28,476 --> 0:46:29,396
收集覆盖的单个目标

1386
00:46:30,286 --> 0:46:31,436
这意味着你们的覆盖报告

1387
00:46:31,436 --> 0:46:33,176
现在可以主动设置为针对

1388
00:46:33,176 --> 0:46:35,106
你们正在编写和测试的区域

1389
00:46:36,266 --> 0:46:38,106
除此之外

1390
00:46:38,106 --> 0:46:40,216
我们今年还增加两个新的

1391
00:46:40,216 --> 0:46:41,676
测试工作流 实际上是三个

1392
00:46:42,466 --> 0:46:44,226
首先 你们现在可以

1393
00:46:44,226 --> 0:46:45,976
在测试包中自动包含

1394
00:46:45,976 --> 0:46:47,986
或排除新的测试

1395
00:46:48,616 --> 0:46:50,486
接下来 你们可以

1396
00:46:50,486 --> 0:46:51,626
以随机的顺序执行测试

1397
00:46:51,626 --> 0:46:53,306
从而最小化

1398
00:46:53,306 --> 0:46:54,506
偶然因素的影响

1399
00:46:55,536 --> 0:46:56,726
我们今年最大的变化是

1400
00:46:56,726 --> 0:46:58,496
现在 你们可以在 Xcode 中

1401
00:46:58,496 --> 0:47:00,906
并行执行测试

1402
00:46:58,496 --> 0:47:00,906
并行执行测试

1403
00:47:01,516 --> 0:47:07,066
[ 掌声 ]

1404
00:47:07,566 --> 0:47:09,236
去年 你们可以使用 Xcodebuild

1405
00:47:09,236 --> 0:47:11,056
对多个设备进行并行测试

1406
00:47:11,056 --> 0:47:13,366
将所有相同的测试

1407
00:47:13,366 --> 0:47:15,056
发送到每个设备上

1408
00:47:15,056 --> 0:47:17,126
如果你们想要使用持续集成

1409
00:47:17,126 --> 0:47:18,476
并达到最广泛的测试规模

1410
00:47:18,476 --> 0:47:19,886
它是最适合的方法

1411
00:47:20,956 --> 0:47:22,146
当你们使用 Xcode 时

1412
00:47:22,326 --> 0:47:24,556
你们通常只关注于单个配置

1413
00:47:24,966 --> 0:47:25,916
但在测试时

1414
00:47:25,916 --> 0:47:27,586
你们希望尽快完成

1415
00:47:28,696 --> 0:47:30,406
Xcode 10 通过并行测试

1416
00:47:30,406 --> 0:47:33,376
极大地改进了

1417
00:47:33,376 --> 0:47:34,016
这个配置的测试速度

1418
00:47:35,126 --> 0:47:36,536
在后台 Xcode 创建了

1419
00:47:36,536 --> 0:47:38,706
Mac App 的副本

1420
00:47:38,826 --> 0:47:40,906
或者 iOS 模拟器的克隆

1421
00:47:41,156 --> 0:47:42,866
然后将测试套件

1422
00:47:42,866 --> 0:47:43,106
发送给它们

1423
00:47:44,496 --> 0:47:45,756
这意味着你们将

1424
00:47:45,826 --> 0:47:47,716
继续测试单个配置

1425
00:47:47,716 --> 0:47:49,856
但是将在很短的时间内完成

1426
00:47:51,096 --> 0:47:51,926
并行测试可以

1427
00:47:51,966 --> 0:47:53,286
根据你们的机器容量

1428
00:47:53,286 --> 0:47:55,106
自动进行伸缩

1429
00:47:55,106 --> 0:47:57,316
这意味着在 iMac Pro 上

1430
00:47:57,316 --> 0:47:57,876
它会表现得非常棒

1431
00:47:59,796 --> 0:48:00,846
你们可能会问 具体有多棒呢

1432
00:47:59,796 --> 0:48:00,846
你们可能会问 具体有多棒呢

1433
00:48:01,266 --> 0:48:02,776
好吧 我们来看看另一个演示

1434
00:48:03,506 --> 0:48:07,896
我们将再次回到我们的太阳系项目

1435
00:48:08,956 --> 0:48:11,986
这里我们看到了

1436
00:48:12,056 --> 0:48:13,826
我们之前运行的 Mac 测试的测试日志

1437
00:48:14,406 --> 0:48:15,866
耗时大约 14 秒

1438
00:48:16,986 --> 0:48:18,016
现在让我们用并行测试

1439
00:48:18,016 --> 0:48:19,206
来运行它

1440
00:48:19,416 --> 0:48:20,276
我将点按并按住工具栏

1441
00:48:20,276 --> 0:48:22,416
选择 “Test...(测试)”操作

1442
00:48:23,016 --> 0:48:24,216
然后会跳出方案列表

1443
00:48:25,696 --> 0:48:27,266
在选项中 我将点按

1444
00:48:27,316 --> 0:48:29,246
“Execute in parallel（以并行方式执行）”

1445
00:48:29,246 --> 0:48:31,236
点按 “Test（测试）”

1446
00:48:31,236 --> 0:48:32,386
然后我们将构建并行测试

1447
00:48:32,386 --> 0:48:33,676
如果你们看看

1448
00:48:33,676 --> 0:48:35,246
右下角的文件

1449
00:48:35,246 --> 0:48:37,076
会发现我们已经启动了测试

1450
00:48:37,076 --> 0:48:38,596
我们现在启动了许多不同的进程

1451
00:48:38,596 --> 0:48:39,786
每一个都对应一个我们的测试套件

1452
00:48:39,866 --> 0:48:41,746
然后收集结果

1453
00:48:42,996 --> 0:48:44,116
如果我们看一下测试日志

1454
00:48:44,116 --> 0:48:45,966
它的完成速度几乎是

1455
00:48:45,966 --> 0:48:46,646
原来的四倍

1456
00:48:47,516 --> 0:48:53,676
[ 掌声 ]

1457
00:48:54,176 --> 0:48:55,376
由于并行测试对单元测试

1458
00:48:55,376 --> 0:48:57,376
非常有效

1459
00:48:57,486 --> 0:48:58,546
它对 UI 测试也会非常有效

1460
00:48:59,786 --> 0:49:01,986
我将选择 App 的

1461
00:48:59,786 --> 0:49:01,986
我将选择 App 的

1462
00:49:01,986 --> 0:49:04,316
iOS 版本

1463
00:49:04,316 --> 0:49:04,936
然后开始测试

1464
00:49:05,526 --> 0:49:06,936
在后台

1465
00:49:06,936 --> 0:49:08,156
我们将克隆

1466
00:49:08,156 --> 0:49:10,236
活动的模拟器

1467
00:49:10,236 --> 0:49:11,686
然后为每个模拟器

1468
00:49:11,686 --> 0:49:13,126
设置调试会话

1469
00:49:13,126 --> 0:49:14,816
然后切换到运行

1470
00:49:14,816 --> 0:49:15,776
所有这些模拟器的空间

1471
00:49:16,676 --> 0:49:17,846
你们将会看到

1472
00:49:17,846 --> 0:49:19,456
我们在每个模拟器上

1473
00:49:19,456 --> 0:49:20,916
安装不同的测试套件

1474
00:49:20,916 --> 0:49:22,696
并在每个模拟器上启动不同的测试集

1475
00:49:23,556 --> 0:49:25,386
我可以在所有这些设备上

1476
00:49:25,386 --> 0:49:27,756
更快地运行

1477
00:49:27,756 --> 0:49:28,986
所有相同的测试

1478
00:49:28,986 --> 0:49:30,716
这使我能够添加更多的测试

1479
00:49:30,716 --> 0:49:31,706
并做出一个更好的 App

1480
00:49:32,556 --> 0:49:34,316
这就是 Xcode 10 中

1481
00:49:34,316 --> 0:49:36,796
快得像鬼畜一样的并行测试

1482
00:49:37,516 --> 0:49:46,216
[ 掌声 ]

1483
00:49:46,716 --> 0:49:47,976
去年 我们介绍了

1484
00:49:48,026 --> 0:49:49,646
用 Swift 编写的

1485
00:49:49,826 --> 0:49:50,626
新的构建系统的预览版

1486
00:49:51,516 --> 0:49:52,466
对此 许多人在自己的项目中

1487
00:49:52,466 --> 0:49:54,186
进行了尝试 并提供了积极的反馈

1488
00:49:54,426 --> 0:49:56,546
现在我可以高兴地说

1489
00:49:56,546 --> 0:49:58,156
我们的新型构建系统

1490
00:49:58,456 --> 0:49:59,306
已经适用于所有项目

1491
00:50:00,006 --> 0:50:01,116
除了更高的可靠性

1492
00:50:01,116 --> 0:50:03,656
和稳定性之外

1493
00:50:03,656 --> 0:50:05,916
我们还关注总体的构建性能

1494
00:50:06,796 --> 0:50:07,936
你们将发现 构建系统现在可以

1495
00:50:07,936 --> 0:50:09,906
更快地进行重新构建

1496
00:50:10,136 --> 0:50:11,976
更好地处理并行任务 并且使用更少的内存

1497
00:50:11,976 --> 0:50:14,436
构建系统现在包含

1498
00:50:14,436 --> 0:50:16,476
新的更丰富的诊断信息

1499
00:50:16,646 --> 0:50:17,946
以帮助你们调整项目配置

1500
00:50:17,986 --> 0:50:19,516
从而实现最佳的

1501
00:50:19,516 --> 0:50:21,026
构建性能

1502
00:50:21,446 --> 0:50:23,746
让我们继续构建性能的话题

1503
00:50:23,746 --> 0:50:24,956
我想谈谈

1504
00:50:24,956 --> 0:50:26,466
最新版本的另一个核心组件

1505
00:50:26,466 --> 0:50:29,396
Swift 4.2

1506
00:50:29,766 --> 0:50:31,156
在过去的一年里

1507
00:50:31,156 --> 0:50:33,016
我们对 Swift 项目的编译时间

1508
00:50:33,086 --> 0:50:34,786
进行了稳步的改进

1509
00:50:35,936 --> 0:50:37,126
我们对一些开放源代码的

1510
00:50:37,126 --> 0:50:39,526
iOS App 进行了采样

1511
00:50:39,526 --> 0:50:40,666
与旧版本相比

1512
00:50:40,666 --> 0:50:42,776
使用 Xcode 10 调试构建版本的性能

1513
00:50:42,776 --> 0:50:46,996
通常是之前的两倍

1514
00:50:46,996 --> 0:50:49,566
至于发布的构建版本

1515
00:50:49,566 --> 0:50:52,316
通过使用新的尺寸优化

1516
00:50:52,316 --> 0:50:54,306
代码大小可以最多减少 30%

1517
00:50:54,306 --> 0:50:55,906
这对于蜂窝网络下载来说

1518
00:50:55,906 --> 0:50:56,436
是一个很好的消息

1519
00:50:57,976 --> 0:51:00,056
除此之外

1520
00:50:57,976 --> 0:51:00,056
除此之外

1521
00:51:00,056 --> 0:51:02,306
Swift 还添加了一些新功能

1522
00:51:02,306 --> 0:51:04,576
并对运行时语言进行改进

1523
00:51:05,326 --> 0:51:06,126
其中一些是很拗口的 API

1524
00:51:06,126 --> 0:51:09,276
比如 “Synthesized hashtable conformance”

1525
00:51:10,786 --> 0:51:12,436
尝试这些 API 的最佳位置是

1526
00:51:12,436 --> 0:51:14,906
Xcode 中的 Playgrounds

1527
00:51:15,596 --> 0:51:16,976
因为 Xcode Playgrounds 现在

1528
00:51:16,976 --> 0:51:18,676
包含了新的

1529
00:51:18,676 --> 0:51:20,506
类似速降的交互

1530
00:51:20,506 --> 0:51:21,996
允许你们在不重新启动

1531
00:51:22,316 --> 0:51:23,726
Playground 会话的情况下

1532
00:51:23,726 --> 0:51:24,486
评估新的代码行

1533
00:51:26,516 --> 0:51:30,186
[ 掌声 ]

1534
00:51:30,686 --> 0:51:31,756
这是我们太阳系视图的

1535
00:51:31,756 --> 0:51:32,346
一个 Playground

1536
00:51:32,346 --> 0:51:34,216
为移动到下一个行星

1537
00:51:34,506 --> 0:51:36,466
而添加的新代码行

1538
00:51:36,466 --> 0:51:38,616
将被评估

1539
00:51:38,616 --> 0:51:39,386
并在 Playground 继续运行时

1540
00:51:39,386 --> 0:51:39,536
返回结果

1541
00:51:42,046 --> 0:51:43,896
所有这些

1542
00:51:43,896 --> 0:51:45,546
对运行时语言和工具的添加

1543
00:51:45,786 --> 0:51:47,646
使得作为 Xcode 10 的一部分的 Swift

1544
00:51:48,046 --> 0:51:49,206
保持着不断进步的步伐

1545
00:51:49,206 --> 0:51:52,036
我们还有另一个版本

1546
00:51:52,036 --> 0:51:52,796
即将与你们见面

1547
00:51:52,796 --> 0:51:55,646
Swift 5

1548
00:51:55,986 --> 0:51:57,806
Swift 5 的主要焦点在于更广泛的应用

1549
00:51:57,806 --> 0:51:59,856
使 Swift 成为

1550
00:51:59,886 --> 0:52:01,166
OS 的一部分

1551
00:51:59,886 --> 0:52:01,166
OS 的一部分

1552
00:52:01,796 --> 0:52:03,216
当我们发布新的 OS 版本时

1553
00:52:03,216 --> 0:52:04,946
App 将不再需要

1554
00:52:04,946 --> 0:52:06,336
包含 Swift 运行时

1555
00:52:06,336 --> 0:52:08,046
从而获得

1556
00:52:08,086 --> 0:52:09,636
更小的下载 [ 掌声 ]

1557
00:52:09,636 --> 0:52:09,846
和更快的启动

1558
00:52:10,516 --> 0:52:15,586
[ 掌声 ]

1559
00:52:16,086 --> 0:52:17,216
我们对此也感到非常兴奋

1560
00:52:17,216 --> 0:52:18,666
我们在这个目标上

1561
00:52:18,706 --> 0:52:19,976
取得了巨大的进展

1562
00:52:20,396 --> 0:52:21,626
你们会在明年初的

1563
00:52:21,696 --> 0:52:23,956
看到它的发布

1564
00:52:24,536 --> 0:52:27,996
Xcode 10 包含了

1565
00:52:27,996 --> 0:52:29,566
大量的生产力改进

1566
00:52:29,886 --> 0:52:31,626
以及在工具的性能 坚固性

1567
00:52:31,626 --> 0:52:33,496
和稳定性方面的

1568
00:52:33,496 --> 0:52:35,846
大幅提升

1569
00:52:36,436 --> 0:52:37,736
所有这些都能帮助你们

1570
00:52:37,736 --> 0:52:40,586
更快地完成高质量的工作

1571
00:52:40,626 --> 0:52:42,246
这就是 Xcode 10

1572
00:52:43,516 --> 0:52:50,656
[ 掌声 ]

1573
00:52:51,156 --> 0:52:52,576
接下来 我想邀请 John

1574
00:52:52,576 --> 0:52:54,236
来与你们讨论

1575
00:52:54,236 --> 0:52:54,816
关于机器学习的新内容

1576
00:52:55,356 --> 0:52:55,636
John

1577
00:52:56,321 --> 0:52:58,321
[ 掌声 ]

1578
00:52:58,626 --> 0:52:59,306
&gt;&gt; 谢谢 Matthew

1579
00:53:02,286 --> 0:53:03,236
机器学习是

1580
00:53:03,236 --> 0:53:04,556
操作系统

1581
00:53:04,556 --> 0:53:06,736
和许多 App 的基础

1582
00:53:07,276 --> 0:53:09,206
我们的目标是

1583
00:53:09,346 --> 0:53:12,476
提供简单易用的 API

1584
00:53:12,476 --> 0:53:14,826
使每个人都能使用“机器学习”

1585
00:53:15,726 --> 0:53:17,356
你们都做得非常出色

1586
00:53:17,356 --> 0:53:19,606
不断为你们的 App 注入

1587
00:53:19,606 --> 0:53:21,886
创新的特性和智慧

1588
00:53:22,456 --> 0:53:26,426
去年 我们引入了 Core ML

1589
00:53:26,926 --> 0:53:29,196
及其基本性能框架

1590
00:53:29,196 --> 0:53:31,096
以及高层级的视觉

1591
00:53:31,096 --> 0:53:32,946
和自然语言处理

1592
00:53:33,306 --> 0:53:34,506
首先 我想向你们展示

1593
00:53:34,506 --> 0:53:35,336
我们在视觉和自然语言处理方面

1594
00:53:35,336 --> 0:53:37,706
所做的一些改进

1595
00:53:38,776 --> 0:53:42,826
如果我们想要拍摄

1596
00:53:42,826 --> 0:53:43,906
带有深度的照片

1597
00:53:43,906 --> 0:53:46,436
我们现在提供了

1598
00:53:46,436 --> 0:53:47,996
支持物体检测

1599
00:53:48,546 --> 0:53:50,126
和包围框的 API 

1600
00:53:50,186 --> 0:53:51,306
就像图片中标记的那样

1601
00:53:52,546 --> 0:53:55,396
我们可以做脸部检测

1602
00:53:55,396 --> 0:53:56,446
人脸关键点检测

1603
00:53:57,546 --> 0:53:59,846
像这个二维码这样的条形码

1604
00:53:59,846 --> 0:54:01,886
也可以在图像中被检测到

1605
00:53:59,846 --> 0:54:01,886
也可以在图像中被检测到

1606
00:54:03,276 --> 0:54:05,476
除了我们之前提供的

1607
00:54:05,536 --> 0:54:06,906
可以检测深度的 API

1608
00:54:07,576 --> 0:54:08,876
我们现在支持人形分割

1609
00:54:08,876 --> 0:54:10,936
所以你们可以从照片中

1610
00:54:10,936 --> 0:54:12,576
删除一个人

1611
00:54:12,636 --> 0:54:13,296
并将他们从背景中

1612
00:54:13,296 --> 0:54:15,736
分离出来

1613
00:54:15,736 --> 0:54:16,536
或者在背景中替换成一些

1614
00:54:16,536 --> 0:54:17,926
不同的东西

1615
00:54:19,926 --> 0:54:21,586
对于自然语言处理

1616
00:54:21,586 --> 0:54:23,836
我们有一个全新且易于使用的

1617
00:54:23,836 --> 0:54:24,796
基于 Swift 的 API

1618
00:54:26,876 --> 0:54:28,696
你们可以将

1619
00:54:28,696 --> 0:54:30,846
像这样简单的句子

1620
00:54:30,846 --> 0:54:32,676
自动地识别为英文

1621
00:54:34,226 --> 0:54:35,596
通过简单的 API

1622
00:54:37,116 --> 0:54:38,346
你们可以对句子进行拆分

1623
00:54:38,386 --> 0:54:40,086
并将其转换为语法元素

1624
00:54:40,336 --> 0:54:43,416
除此之外

1625
00:54:43,416 --> 0:54:45,256
你们还可以进行命名实体识别

1626
00:54:46,046 --> 0:54:47,596
这句话被检测到

1627
00:54:47,596 --> 0:54:49,096
是在说 Apple 这个组织

1628
00:54:49,096 --> 0:54:50,096
以及一个

1629
00:54:50,096 --> 0:54:51,506
位于圣何塞的地点

1630
00:54:51,506 --> 0:54:54,726
你们可能认为 对于英文这样的语言

1631
00:54:54,726 --> 0:54:56,666
实现这点并不困难

1632
00:54:56,666 --> 0:54:59,106
但是我们支持更多的语言

1633
00:54:59,516 --> 0:55:01,866
包括法语 德语 日语

1634
00:54:59,516 --> 0:55:01,866
包括法语 德语 日语

1635
00:55:01,866 --> 0:55:03,186
以及这里举例的简体中文

1636
00:55:03,186 --> 0:55:07,836
现在我们来看看 Core ML

1637
00:55:08,456 --> 0:55:09,876
它是我们的

1638
00:55:09,876 --> 0:55:11,106
机器学习技术的基础

1639
00:55:12,676 --> 0:55:13,986
就在一年前

1640
00:55:13,986 --> 0:55:15,146
我们在这里引入了 Core ML

1641
00:55:15,866 --> 0:55:17,016
从那以后

1642
00:55:17,016 --> 0:55:18,876
我们应用了所有主要的

1643
00:55:18,876 --> 0:55:20,876
机器学习的训练框架和格式

1644
00:55:21,716 --> 0:55:23,126
仅仅在一年内就实现这一点

1645
00:55:23,126 --> 0:55:24,366
令人难以置信

1646
00:55:24,366 --> 0:55:26,796
但我们不想就此停止

1647
00:55:28,266 --> 0:55:29,936
我们将引入 Core ML 2

1648
00:55:29,936 --> 0:55:33,026
我们专注于让模型

1649
00:55:33,026 --> 0:55:35,376
执行得更快

1650
00:55:35,376 --> 0:55:37,546
体型更小

1651
00:55:37,616 --> 0:55:38,736
并且让它们更容易自定义

1652
00:55:39,956 --> 0:55:40,866
我们知道这些

1653
00:55:40,906 --> 0:55:43,576
是我们最需要的特性

1654
00:55:43,576 --> 0:55:46,676
为了查看性能改进

1655
00:55:46,676 --> 0:55:48,336
我们添加了一个

1656
00:55:48,336 --> 0:55:48,906
新的批处理 API

1657
00:55:49,896 --> 0:55:52,356
以前你们不得不

1658
00:55:52,356 --> 0:55:53,786
对每个映像进行推理

1659
00:55:54,196 --> 0:55:55,836
并在 CPU 和 GPU 之间传递它们

1660
00:55:55,836 --> 0:55:58,526
而现在 你们可以将这些推理请求

1661
00:55:58,526 --> 0:56:00,196
打包在一起

1662
00:55:58,526 --> 0:56:00,196
打包在一起

1663
00:56:00,196 --> 0:56:02,566
并利用 CPU 和 GPU 的

1664
00:56:02,696 --> 0:56:04,066
全部性能进行处理

1665
00:56:05,076 --> 0:56:06,486
通过这种技术

1666
00:56:06,486 --> 0:56:07,866
以及对其下的

1667
00:56:07,866 --> 0:56:09,036
Metal 性能着色器的增强

1668
00:56:09,756 --> 0:56:11,866
我们可以在像 Resnet

1669
00:56:11,866 --> 0:56:13,596
这样的大型网络上

1670
00:56:13,596 --> 0:56:14,846
获得高达 30% 的性能改进

1671
00:56:15,536 --> 0:56:16,826
但是如果你们使用的是小型网络

1672
00:56:16,826 --> 0:56:17,806
就像在 iOS 上使用的那种

1673
00:56:17,806 --> 0:56:20,316
我们观察到的结果是

1674
00:56:20,316 --> 0:56:21,796
当使用 MobileNet 运行时

1675
00:56:21,876 --> 0:56:22,906
API 会有高达 4 倍的性能改进

1676
00:56:23,646 --> 0:56:25,536
我们并没有就此止步

1677
00:56:26,566 --> 0:56:27,806
我们想要让模型更小

1678
00:56:27,806 --> 0:56:30,386
所以我们现在支持量化

1679
00:56:30,886 --> 0:56:32,806
我们使用一个

1680
00:56:32,806 --> 0:56:35,856
以 FP32 制式发布的模型

1681
00:56:36,626 --> 0:56:37,866
比如这个来自 MobileNet 的例子

1682
00:56:37,866 --> 0:56:40,216
将它调整到 Int 8 制式

1683
00:56:40,216 --> 0:56:42,756
然后它的大小将成功从 17MB

1684
00:56:42,756 --> 0:56:44,566
减少到小于 5MB

1685
00:56:45,546 --> 0:56:46,926
这对于与 App 绑定的模型来说

1686
00:56:46,926 --> 0:56:48,636
是一个不少的节省

1687
00:56:48,636 --> 0:56:53,676
你们可以通过

1688
00:56:54,066 --> 0:56:55,566
“Lookup tabel quantization” 等功能

1689
00:56:55,566 --> 0:56:56,646
进行进一步的简化

1690
00:56:56,726 --> 0:56:58,616
我们还支持许多其他功能

1691
00:56:58,616 --> 0:57:01,146
包括对“Custom models（自定义模型）”的支持

1692
00:56:58,616 --> 0:57:01,146
包括对“Custom models（自定义模型）”的支持

1693
00:57:01,146 --> 0:57:03,396
以及一个非常流行的功能

1694
00:57:03,396 --> 0:57:05,366
“Flexible shapes（柔性形状）”

1695
00:57:05,656 --> 0:57:06,826
你们不再需要

1696
00:57:06,826 --> 0:57:08,376
为每一个你们想要进行推理的形状

1697
00:57:08,376 --> 0:57:09,266
提供一个模型

1698
00:57:09,586 --> 0:57:11,396
你们仅需发布一个模型

1699
00:57:11,396 --> 0:57:13,076
然后我们简单的 API

1700
00:57:13,076 --> 0:57:17,076
将为你处理一切

1701
00:57:17,296 --> 0:57:18,936
现在让我们谈谈 Create ML

1702
00:57:19,006 --> 0:57:21,776
一个全新的 易于使用的

1703
00:57:21,776 --> 0:57:23,336
机器学习训练框架

1704
00:57:24,096 --> 0:57:25,926
它汇集了机器学习

1705
00:57:25,926 --> 0:57:28,276
Swift Xcode

1706
00:57:28,276 --> 0:57:29,716
和 Xcode Playgrounds 的强大功能

1707
00:57:31,536 --> 0:57:33,166
使你们不必再从互联网下载包

1708
00:57:33,166 --> 0:57:34,206
并通过冗长

1709
00:57:34,206 --> 0:57:35,256
复杂的教程

1710
00:57:35,256 --> 0:57:36,616
来训练一个模型

1711
00:57:38,406 --> 0:57:39,636
我们支持特征层面训练

1712
00:57:39,636 --> 0:57:41,586
例如图形分类

1713
00:57:41,586 --> 0:57:43,076
和自然语言处理

1714
00:57:44,256 --> 0:57:45,736
如果你们想深入研究

1715
00:57:45,736 --> 0:57:47,336
机器学习

1716
00:57:47,336 --> 0:57:49,226
我们也支持传统类型的算法

1717
00:57:49,276 --> 0:57:50,576
比如线性回归

1718
00:57:50,576 --> 0:57:52,336
增强树模型

1719
00:57:52,336 --> 0:57:53,516
以及传统的数据处理

1720
00:57:53,666 --> 0:57:56,106
但是我们认为人们会想要

1721
00:57:56,106 --> 0:57:57,906
更多地使用这些

1722
00:57:57,906 --> 0:57:59,476
特征类型的训练

1723
00:57:59,476 --> 0:58:00,596
所以让我们来看看这些例子

1724
00:57:59,476 --> 0:58:00,596
所以让我们来看看这些例子

1725
00:58:01,986 --> 0:58:05,106
对于自然语言处理

1726
00:58:05,106 --> 0:58:06,976
你们现在可以拥有自己的

1727
00:58:06,976 --> 0:58:08,816
自定义自然语言模型

1728
00:58:08,816 --> 0:58:10,646
该模型可以进行

1729
00:58:10,996 --> 0:58:12,096
文本分类 单词标记

1730
00:58:12,096 --> 0:58:12,886
并支持多种语言

1731
00:58:12,886 --> 0:58:16,576
你们可以用非常小的数据集

1732
00:58:16,576 --> 0:58:18,236
训练一个模型

1733
00:58:18,236 --> 0:58:20,536
做情感分析

1734
00:58:20,536 --> 0:58:22,636
比如电影评论

1735
00:58:22,636 --> 0:58:23,766
你们只需要在

1736
00:58:23,766 --> 0:58:25,046
字符串中训练正负

1737
00:58:25,046 --> 0:58:26,766
然后建立自己的自定义图形

1738
00:58:26,796 --> 0:58:27,796
自定义文本分类器

1739
00:58:28,846 --> 0:58:31,786
你们也可以用这样的方法

1740
00:58:32,266 --> 0:58:34,196
进行领域分析

1741
00:58:34,196 --> 0:58:36,226
训练一个模型来理解

1742
00:58:36,226 --> 0:58:37,286
在给定的句子中你们谈论的

1743
00:58:37,286 --> 0:58:39,316
是一家酒店还是一家餐厅

1744
00:58:40,026 --> 0:58:43,636
我们认为 到目前为止

1745
00:58:43,636 --> 0:58:44,986
图形分类是

1746
00:58:45,036 --> 0:58:46,126
人们想要做的

1747
00:58:46,126 --> 0:58:49,256
最受欢迎的训练

1748
00:58:49,256 --> 0:58:50,616
所以我们把重点放在这上面

1749
00:58:51,646 --> 0:58:52,896
一般来说

1750
00:58:52,896 --> 0:58:55,466
如果你们用一个很小的数据集

1751
00:58:55,466 --> 0:58:56,526
来训练一个非常大的模型

1752
00:58:56,526 --> 0:58:58,086
因为作为开发人员

1753
00:58:58,086 --> 0:58:59,246
你们可能只能访问到这样的数据

1754
00:58:59,426 --> 0:59:01,096
那么你们的模型将不会得到很好的训练

1755
00:58:59,426 --> 0:59:01,096
那么你们的模型将不会得到很好的训练

1756
00:59:01,096 --> 0:59:02,456
它们会被过度供给

1757
00:59:02,456 --> 0:59:03,236
然后你们就会得到糟糕的预测

1758
00:59:03,846 --> 0:59:06,506
Apple 在使用

1759
00:59:06,506 --> 0:59:08,646
数百万的照片数据

1760
00:59:08,646 --> 0:59:10,696
训练非常大的模型的方面

1761
00:59:10,746 --> 0:59:12,856
有着十分丰富的经验

1762
00:59:13,236 --> 0:59:14,786
我们想把所有的经验

1763
00:59:14,786 --> 0:59:16,416
传授给你们

1764
00:59:16,746 --> 0:59:19,136
通过一种叫做迁移学习的技术

1765
00:59:19,136 --> 0:59:21,896
你们可以训练自己的

1766
00:59:22,156 --> 0:59:23,896
自定义图形分类器

1767
00:59:25,206 --> 0:59:27,506
我们把模型打包到

1768
00:59:27,506 --> 0:59:28,956
我们的 OS 中

1769
00:59:28,956 --> 0:59:29,666
这样就不需要你们交付了

1770
00:59:30,096 --> 0:59:32,116
然后获取你们的数据

1771
00:59:32,116 --> 0:59:33,336
并通过 Creat ML 使用迁移学习

1772
00:59:33,336 --> 0:59:35,366
然后增强我们的模型

1773
00:59:36,706 --> 0:59:38,076
这意味着你们只需要

1774
00:59:38,136 --> 0:59:39,166
交付模型中被增强的那部分

1775
00:59:39,166 --> 0:59:41,636
这为你们的 App 

1776
00:59:41,636 --> 0:59:43,516
带来了十分可观的节省 

1777
00:59:44,926 --> 0:59:45,926
很多开发人员

1778
00:59:45,926 --> 0:59:47,626
需要构建大约 100MB 规模的模型

1779
00:59:47,626 --> 0:59:48,606
仅仅为了向他们的 App 中

1780
00:59:48,606 --> 0:59:50,396
添加一个智能功能

1781
00:59:50,396 --> 0:59:52,526
我们帮助他们提高了效率

1782
00:59:53,376 --> 0:59:54,506
现在 通过迁移学习

1783
00:59:54,506 --> 0:59:55,886
他们可以把模型的大小

1784
00:59:55,886 --> 0:59:57,726
缩减到 3MB

1785
00:59:58,516 --> 1:00:05,856
[ 掌声 ]

1786
00:59:58,516 --> 1:00:05,856
[ 掌声 ]

1787
01:00:06,356 --> 1:00:08,296
如果你们能够了解

1788
01:00:08,296 --> 1:00:09,716
在 Xcode 和 Xcode Playground 中

1789
01:00:09,716 --> 1:00:11,726
实现这一点的方法

1790
01:00:11,726 --> 1:00:13,166
那就更酷了

1791
01:00:13,166 --> 1:00:14,186
所以我想邀请 Lizzie 上来给你们演示一下

1792
01:00:14,856 --> 1:00:16,856
[ 掌声 ]

1793
01:00:17,196 --> 1:00:17,406
Lizzie

1794
01:00:18,746 --> 1:00:19,276
&gt;&gt; 谢谢 John

1795
01:00:20,196 --> 1:00:21,506
让我们来看看

1796
01:00:21,506 --> 1:00:23,456
如何创建一个 App

1797
01:00:23,456 --> 1:00:24,936
来对不同类型的花进行分类

1798
01:00:25,686 --> 1:00:26,986
我将使用一种

1799
01:00:27,136 --> 1:00:28,146
最先进的图形分类器模型

1800
01:00:28,146 --> 1:00:29,516
叫做 Inception B3

1801
01:00:29,516 --> 1:00:31,726
但是这种方法有两个问题

1802
01:00:31,726 --> 1:00:33,076
但是这种方法有两个问题

1803
01:00:33,506 --> 1:00:35,486
第一个问题是这个模型很大

1804
01:00:35,486 --> 1:00:39,076
它在我们的 App 中占了 100MB 的内存

1805
01:00:39,076 --> 1:00:40,916
第二个问题是

1806
01:00:40,916 --> 1:00:42,986
即使这个模型

1807
01:00:43,046 --> 1:00:44,976
支持 1000 个分类

1808
01:00:45,136 --> 1:00:47,396
它也不能正确分类一个玫瑰

1809
01:00:48,076 --> 1:00:49,826
一般来说我要做的就是

1810
01:00:49,826 --> 1:00:51,276
切换到新的开发环境

1811
01:00:51,276 --> 1:00:52,936
下载一个开源的

1812
01:00:52,996 --> 1:00:54,466
机器学习库

1813
01:00:54,466 --> 1:00:56,586
然后花几个小时 训练一个新的模型

1814
01:00:57,376 --> 1:00:59,686
但是现在有了 Create ML 的强大功能

1815
01:00:59,796 --> 1:01:02,656
你们现在可以在几分钟内

1816
01:00:59,796 --> 1:01:02,656
你们现在可以在几分钟内

1817
01:01:02,896 --> 1:01:04,826
在 Xcode 中完成这项工作

1818
01:01:04,826 --> 1:01:05,866
我将切换到一个新的 Playground

1819
01:01:05,866 --> 1:01:08,226
并导入 CreatMLUI

1820
01:01:09,506 --> 1:01:11,296
下一步是定义一个 builder

1821
01:01:11,296 --> 1:01:14,066
它可以构建

1822
01:01:14,066 --> 1:01:15,006
图形分类器模型

1823
01:01:16,256 --> 1:01:18,066
然后 为了启用

1824
01:01:18,066 --> 1:01:20,166
这个模型的拖放交互

1825
01:01:20,166 --> 1:01:21,796
我们可以在实况视图中

1826
01:01:21,856 --> 1:01:22,136
显示这个构建器

1827
01:01:22,736 --> 1:01:24,286
请看一下旁边

1828
01:01:24,326 --> 1:01:26,146
我们得到了一个提示

1829
01:01:26,146 --> 1:01:26,886
告诉我们拖如图形来开始训练

1830
01:01:28,366 --> 1:01:30,936
在我的桌面上

1831
01:01:30,936 --> 1:01:32,506
我有很多不同的

1832
01:01:32,506 --> 1:01:35,096
花的图片

1833
01:01:35,096 --> 1:01:36,676
并根据它们的名字

1834
01:01:36,676 --> 1:01:37,776
整理在不同的文件夹中

1835
01:01:38,596 --> 1:01:39,686
我们有雏菊 朱槿

1836
01:01:40,026 --> 1:01:43,656
当然还有玫瑰

1837
01:01:45,416 --> 1:01:46,566
现在我要做的是

1838
01:01:46,566 --> 1:01:48,636
把这个文件夹拖到 UI 中

1839
01:01:49,466 --> 1:01:50,936
很快 一个图形分类器模型

1840
01:01:50,936 --> 1:01:52,816
通过 GPU 的加速

1841
01:01:52,896 --> 1:01:55,646
开始在 Mac 上训练

1842
01:01:55,726 --> 1:01:58,156
我马上就能看到

1843
01:01:58,156 --> 1:02:00,116
这个训练数据集的准确度

1844
01:01:58,156 --> 1:02:00,116
这个训练数据集的准确度

1845
01:02:00,546 --> 1:02:01,856
但我真正想知道的是

1846
01:02:01,856 --> 1:02:03,586
它对没有出现过的花朵

1847
01:02:03,636 --> 1:02:05,186
的分类表现如何

1848
01:02:05,316 --> 1:02:07,156
我把其中的一些放在这里

1849
01:02:07,206 --> 1:02:09,146
然后把它们拖进来

1850
01:02:09,246 --> 1:02:10,796
让模型开始分析

1851
01:02:10,796 --> 1:02:12,346
这些新的图片

1852
01:02:13,076 --> 1:02:15,266
当我滚动界面时

1853
01:02:15,456 --> 1:02:16,996
你们可以看到

1854
01:02:16,996 --> 1:02:18,556
每种花的实际标签

1855
01:02:18,556 --> 1:02:19,436
以及模型的预测结果

1856
01:02:20,676 --> 1:02:24,486
在这个数据集中 95% 的准确度 是相当不错的

1857
01:02:25,236 --> 1:02:26,886
我现在想做的是

1858
01:02:26,886 --> 1:02:27,986
把它添加到我的 App 中

1859
01:02:27,986 --> 1:02:29,456
你们只需拖拽一下

1860
01:02:29,456 --> 1:02:31,406
就可以了

1861
01:02:34,096 --> 1:02:34,736
我添加好了

1862
01:02:34,856 --> 1:02:36,616
我们看看这个新的模型

1863
01:02:36,616 --> 1:02:38,926
可以发现

1864
01:02:39,116 --> 1:02:40,016
它只有 50KB

1865
01:02:40,566 --> 1:02:41,866
这是节省了很多空间

1866
01:02:42,396 --> 1:02:44,226
所以我会删除

1867
01:02:45,516 --> 1:02:52,046
[ 掌声 ]

1868
01:02:52,546 --> 1:02:53,966
我会删除这个 100MB 的模型

1869
01:02:53,966 --> 1:02:55,496
并初始化这个

1870
01:02:55,496 --> 1:02:56,966
新的图形分类器

1871
01:02:58,986 --> 1:03:01,976
如果我重新运行这个 App

1872
01:02:58,986 --> 1:03:01,976
如果我重新运行这个 App

1873
01:03:02,046 --> 1:03:04,196
它就会将这个新的模型

1874
01:03:04,346 --> 1:03:05,026
绑定到 App 中

1875
01:03:05,696 --> 1:03:07,276
我们可以对它进行测试

1876
01:03:07,346 --> 1:03:08,806
看看它是否能够正确地预测

1877
01:03:09,176 --> 1:03:10,626
我们训练过的图片

1878
01:03:10,626 --> 1:03:13,116
或者同样类型的

1879
01:03:13,116 --> 1:03:13,806
花的新图片

1880
01:03:14,376 --> 1:03:16,146
的确 它可以正确地

1881
01:03:16,146 --> 1:03:17,416
对玫瑰进行分类

1882
01:03:18,366 --> 1:03:19,546
让我们再试试朱槿的分类

1883
01:03:19,546 --> 1:03:22,006
经过我们的训练

1884
01:03:22,006 --> 1:03:23,346
以及与 App 的整合后

1885
01:03:23,346 --> 1:03:25,703
它也可以正确地分辨这类图片

1886
01:03:25,996 --> 1:03:27,366
正如你们所看到的

1887
01:03:27,366 --> 1:03:29,536
我们已经能够

1888
01:03:29,536 --> 1:03:31,676
通过 Swift 和 Xcode

1889
01:03:31,786 --> 1:03:33,056
在很少的时间内

1890
01:03:33,286 --> 1:03:37,536
用 Create ML 训练我们的分类器模型 且模型的

1891
01:03:37,726 --> 1:03:38,036
大小十分轻量

1892
01:03:38,816 --> 1:03:39,746
下面有请 John

1893
01:03:40,516 --> 1:03:43,296
[ 掌声 ]

1894
01:03:43,796 --> 1:03:44,146
&gt;&gt; 谢谢 Lizzie

1895
01:03:47,296 --> 1:03:49,106
这难道不酷吗

1896
01:03:49,106 --> 1:03:50,496
仅仅使用三行的 Swift

1897
01:03:50,496 --> 1:03:52,776
就在 Mac 上用几秒钟的时间

1898
01:03:53,066 --> 1:03:57,176
训练了一个自定义图像分类器

1899
01:03:57,386 --> 1:03:59,836
我们已经讨论了新的

1900
01:03:59,836 --> 1:04:01,446
视觉和自然语言处理 API

1901
01:03:59,836 --> 1:04:01,446
视觉和自然语言处理 API

1902
01:04:01,446 --> 1:04:02,626
以及我们所做的一些增强

1903
01:04:02,626 --> 1:04:05,196
我们对 Core ML 2 的改进

1904
01:04:05,196 --> 1:04:06,866
能够使模型变得更小 更快

1905
01:04:06,866 --> 1:04:08,486
且支持更多的自定义

1906
01:04:08,486 --> 1:04:10,526
Create ML 方面

1907
01:04:10,526 --> 1:04:12,546
我们为 Mac 加入了

1908
01:04:12,546 --> 1:04:16,546
全新的机器学习训练框架

1909
01:04:16,756 --> 1:04:17,746
现在我想谈一谈

1910
01:04:17,746 --> 1:04:19,016
我们在 OS 中构建的

1911
01:04:19,066 --> 1:04:20,046
另一个智能领域

1912
01:04:20,046 --> 1:04:23,296
那就是“捷径”

1913
01:04:23,296 --> 1:04:25,106
你们可以通过 Siri

1914
01:04:25,106 --> 1:04:26,196
暴露 App 中的

1915
01:04:26,196 --> 1:04:27,776
关键功能

1916
01:04:27,866 --> 1:04:31,176
你们甚至可以使用语音命令

1917
01:04:31,176 --> 1:04:34,646
暴露这些关键功能

1918
01:04:36,316 --> 1:04:38,606
此前在 OS 中的

1919
01:04:38,606 --> 1:04:40,536
为 Apple 软件

1920
01:04:40,536 --> 1:04:42,846
建议功能和操作的部分特性

1921
01:04:42,846 --> 1:04:44,856
如今可以通过“捷径”而实现

1922
01:04:46,266 --> 1:04:47,906
所有这些预测都是在设备上

1923
01:04:47,906 --> 1:04:49,576
通过机器学习做出的

1924
01:04:49,856 --> 1:04:51,486
从而保护了用户的隐私

1925
01:04:53,456 --> 1:04:54,666
你们可能会问

1926
01:04:54,666 --> 1:04:55,526
如何应用“捷径”

1927
01:04:56,666 --> 1:04:57,956
你们中的许多人

1928
01:04:57,956 --> 1:05:00,306
已经应用了一些

1929
01:04:57,956 --> 1:05:00,306
已经应用了一些

1930
01:05:00,356 --> 1:05:01,936
NSUserActivity 的功能

1931
01:05:01,936 --> 1:05:03,096
比如“聚焦”搜索和“接力”

1932
01:05:03,256 --> 1:05:05,976
如果你就是他们中的一员

1933
01:05:06,026 --> 1:05:07,496
现在只需添加这一行代码

1934
01:05:07,496 --> 1:05:09,206
就可以使它们

1935
01:05:09,206 --> 1:05:10,796
支持系统的预测

1936
01:05:11,016 --> 1:05:12,496
[ 掌声 ]

1937
01:05:12,496 --> 1:05:13,436
没错 仅仅一行代码

1938
01:05:13,436 --> 1:05:18,016
但是如果你们想要体验

1939
01:05:18,046 --> 1:05:20,376
完整且丰富的“捷径”功能

1940
01:05:20,376 --> 1:05:21,826
你们需要使用加强的

1941
01:05:21,826 --> 1:05:22,756
新 SiriKit 的 Intents API

1942
01:05:23,996 --> 1:05:26,406
它可以使 App 

1943
01:05:28,046 --> 1:05:29,606
丰富的内联功能

1944
01:05:29,606 --> 1:05:32,106
集成在 Siri 中

1945
01:05:32,106 --> 1:05:33,726
并支持自定义语音触发和响应

1946
01:05:34,126 --> 1:05:35,866
更重要的是

1947
01:05:35,906 --> 1:05:37,776
它可以更有针对性地预测

1948
01:05:37,776 --> 1:05:39,736
这些“捷径”在未来的何时

1949
01:05:39,866 --> 1:05:41,616
会引起用户的兴趣

1950
01:05:42,786 --> 1:05:45,856
一个优秀的“捷径”

1951
01:05:45,856 --> 1:05:47,276
应该能加速并增加

1952
01:05:47,276 --> 1:05:49,886
与 App 的连接

1953
01:05:50,656 --> 1:05:53,826
应该被更频繁地使用

1954
01:05:54,686 --> 1:05:56,566
例如在 TeamSnap 中

1955
01:05:56,566 --> 1:05:58,426
你们希望能够

1956
01:05:58,456 --> 1:06:00,656
检查孩子在每个周六早上的

1957
01:05:58,456 --> 1:06:00,656
检查孩子在每个周六早上的

1958
01:06:00,656 --> 1:06:01,536
足球比赛日程

1959
01:06:02,526 --> 1:06:03,796
理想情况下 我们希望这个功能

1960
01:06:03,796 --> 1:06:05,976
能够集成在 Siri UI 中

1961
01:06:06,046 --> 1:06:08,196
并被直接处理

1962
01:06:08,196 --> 1:06:09,336
而无需进入 App

1963
01:06:09,336 --> 1:06:11,296
如果这是你们想要做的事情

1964
01:06:11,376 --> 1:06:13,826
你们现在完全可以实现它

1965
01:06:14,176 --> 1:06:15,806
在创建“捷径”时

1966
01:06:16,046 --> 1:06:17,686
你们需要做三件简单的事情

1967
01:06:18,336 --> 1:06:19,636
显然 你们需要定义这个“捷径”

1968
01:06:19,636 --> 1:06:21,066
而且需要为

1969
01:06:21,066 --> 1:06:22,246
用户真正感兴趣的操作

1970
01:06:22,246 --> 1:06:23,366
定义它

1971
01:06:24,516 --> 1:06:25,716
当这些“捷径”出现时

1972
01:06:25,716 --> 1:06:27,446
即使它们在 App 中

1973
01:06:27,446 --> 1:06:29,346
你们也需要递交

1974
01:06:29,346 --> 1:06:30,496
因为我们需要这个信号

1975
01:06:30,496 --> 1:06:32,106
在将来预测这些“捷径”

1976
01:06:32,106 --> 1:06:34,196
当然 当这些“捷径”出现时

1977
01:06:34,196 --> 1:06:35,566
你需要处理它们

1978
01:06:35,566 --> 1:06:38,676
如果你们已经完成了这些操作

1979
01:06:38,676 --> 1:06:40,436
你们会惊喜地发现

1980
01:06:40,436 --> 1:06:41,916
你们可以直接与

1981
01:06:41,916 --> 1:06:43,496
HomePod 中的“捷径”进行互动

1982
01:06:44,246 --> 1:06:45,626
所以现在 你们不用拿起手机

1983
01:06:45,626 --> 1:06:47,166
只需要在 HomePod 那里

1984
01:06:47,166 --> 1:06:48,816
向 Siri 询问

1985
01:06:48,816 --> 1:06:50,656
孩子的球员名单

1986
01:06:50,656 --> 1:06:53,426
它就会借助 App 中的信息回复你

1987
01:06:53,696 --> 1:06:55,766
如果你们也想

1988
01:06:55,766 --> 1:06:57,096
让你们的“捷径”

1989
01:06:57,096 --> 1:06:59,016
在 Siri 表盘上显示

1990
01:06:59,016 --> 1:07:01,046
你们可以采用这个新的 Relevant API

1991
01:06:59,016 --> 1:07:01,046
你们可以采用这个新的 Relevant API

1992
01:07:02,066 --> 1:07:06,026
这就是“捷径”

1993
01:07:06,026 --> 1:07:08,056
一种可以暴露 App 的关键功能

1994
01:07:08,056 --> 1:07:09,606
并可以通过 Siri 

1995
01:07:09,846 --> 1:07:12,016
提高用户参与度的 强大的新方法

1996
01:07:13,686 --> 1:07:15,246
现在 我想邀请 Jeremy 上台

1997
01:07:15,246 --> 1:07:17,676
与你们谈谈关于 Metal 的新内容

1998
01:07:17,866 --> 1:07:18,046
Jeremy

1999
01:07:19,516 --> 1:07:22,816
[ 掌声 ]

2000
01:07:23,316 --> 1:07:23,816
&gt;&gt; 谢谢 John

2001
01:07:24,646 --> 1:07:26,526
Metal 是 Apple 现代的

2002
01:07:26,526 --> 1:07:27,616
性能强大

2003
01:07:27,856 --> 1:07:29,056
且高效的编程接口

2004
01:07:29,056 --> 1:07:30,646
它接通了 Apple 所有平台的核心

2005
01:07:30,646 --> 1:07:32,626
也就是 GPU

2006
01:07:32,626 --> 1:07:33,636
利用了它强大的能力

2007
01:07:34,076 --> 1:07:35,716
它加速了高级 3D 图形

2008
01:07:35,716 --> 1:07:37,526
以及通用数据的

2009
01:07:37,526 --> 1:07:38,976
并行计算

2010
01:07:39,756 --> 1:07:41,306
自我们在 2014 年推出 Metal 以来

2011
01:07:41,306 --> 1:07:43,416
我们看到它已被广泛用于

2012
01:07:43,416 --> 1:07:44,916
流畅且高性能的 UI

2013
01:07:44,916 --> 1:07:47,246
现代 3D 游戏

2014
01:07:47,246 --> 1:07:49,266
高级计算摄影

2015
01:07:49,266 --> 1:07:51,396
以及最新的

2016
01:07:51,396 --> 1:07:53,256
AR 和 VR 体验

2017
01:07:53,936 --> 1:07:54,866
去年秋天

2018
01:07:54,866 --> 1:07:56,926
当我们推出最新款 iPhone 时

2019
01:07:56,926 --> 1:07:58,506
我们在 A11 Bionic 芯片的支持下

2020
01:07:58,506 --> 1:08:00,096
非常兴奋地揭开了了 Metal 的新章节

2021
01:07:58,506 --> 1:08:00,096
非常兴奋地揭开了了 Metal 的新章节

2022
01:08:00,096 --> 1:08:02,556
Apple 利用多年

2023
01:08:02,846 --> 1:08:05,176
在硬件和软件设计方面

2024
01:08:05,176 --> 1:08:07,166
深厚的专业知识的芯片

2025
01:08:07,276 --> 1:08:09,246
发布了针对 Metal 2 优化的

2026
01:08:09,246 --> 1:08:11,586
自行设计的 GPU

2027
01:08:11,766 --> 1:08:14,246
它具有切片式着色

2028
01:08:14,286 --> 1:08:15,776
和图块等

2029
01:08:15,776 --> 1:08:17,076
创新的新特性

2030
01:08:17,076 --> 1:08:18,305
并以更快的性能

2031
01:08:18,305 --> 1:08:20,046
和更低的功耗

2032
01:08:20,046 --> 1:08:22,106
推动了 GPU 编程的发展

2033
01:08:22,106 --> 1:08:24,406
现在你们的 App 可以

2034
01:08:24,406 --> 1:08:26,106
直接使用 Metal 处理 3D 图形

2035
01:08:26,106 --> 1:08:27,386
和 GPU 计算

2036
01:08:27,555 --> 1:08:29,136
此外 Metal 还为 Apple 的

2037
01:08:29,136 --> 1:08:31,126
针对图形 媒体和数据处理的许多系统框架

2038
01:08:31,345 --> 1:08:33,015
提供了强大的支持

2039
01:08:33,015 --> 1:08:35,256
让我为你们举一些例子

2040
01:08:35,256 --> 1:08:37,716
我们的 iOS 摄像头框架

2041
01:08:37,716 --> 1:08:38,886
使用 Metal 计算深度信息

2042
01:08:38,886 --> 1:08:41,196
识别照片中的人物

2043
01:08:41,196 --> 1:08:42,676
并在这张华丽的

2044
01:08:42,716 --> 1:08:44,145
人像模式图片中

2045
01:08:44,145 --> 1:08:45,395
产生景深效果

2046
01:08:46,176 --> 1:08:47,786
开发人员 Epic Games

2047
01:08:47,786 --> 1:08:49,216
利用我们在所有平台上

2048
01:08:49,216 --> 1:08:50,805
对 Metal 的广泛支持

2049
01:08:50,805 --> 1:08:52,026
在 iPhone iPad 和 Mac 上

2050
01:08:52,106 --> 1:08:55,116
发布了他们的畅销游戏 《堡垒之夜》

2051
01:08:56,486 --> 1:08:58,796
AMD 的受 Metal 加速的

2052
01:08:58,796 --> 1:08:59,395
Radeon ProRender 插件

2053
01:08:59,395 --> 1:09:01,805
现在正在 Maxon Cinema4D 和

2054
01:08:59,395 --> 1:09:01,805
现在正在 Maxon Cinema4D 和

2055
01:09:01,805 --> 1:09:03,946
Autodesk Maya 中 

2056
01:09:03,946 --> 1:09:05,566
驱动高性能的 3D 内容创建

2057
01:09:05,566 --> 1:09:08,876
和专业编辑

2058
01:09:09,466 --> 1:09:11,526
像《Gravity Sketch》这样的 App

2059
01:09:11,526 --> 1:09:13,256
正在使用 Metal 

2060
01:09:13,256 --> 1:09:14,946
为新一代的艺术家提供

2061
01:09:14,946 --> 1:09:17,106
沉浸式的专业 VR 编辑功能

2062
01:09:18,696 --> 1:09:20,055
Metal 的机器学习加速功能

2063
01:09:20,055 --> 1:09:21,816
使《BeCasso》等 iOS App

2064
01:09:21,816 --> 1:09:23,386
能够将你们的照片

2065
01:09:23,386 --> 1:09:25,826
转化为美丽的画作

2066
01:09:26,225 --> 1:09:27,506
并在 macOS 的

2067
01:09:27,616 --> 1:09:29,515
Pixelmator Pro 中

2068
01:09:29,515 --> 1:09:31,435
驱动自动和智能的图像编辑

2069
01:09:32,225 --> 1:09:33,055
这些只是其中一部分例子

2070
01:09:33,055 --> 1:09:34,996
因为开发人员对 Metal 的

2071
01:09:34,996 --> 1:09:37,446
应用非常惊人

2072
01:09:37,446 --> 1:09:38,486
现在已经有超过 40 万个 App

2073
01:09:38,546 --> 1:09:40,886
使用 Metal API

2074
01:09:42,395 --> 1:09:44,316
所有运行 iOS 12

2075
01:09:44,376 --> 1:09:46,536
和 macOS Mojave 的系统

2076
01:09:46,536 --> 1:09:48,185
均支持 Metal

2077
01:09:48,185 --> 1:09:49,716
包括过去至少 5 年间发布的

2078
01:09:49,716 --> 1:09:51,296
所有 iOS 设备和 Mac

2079
01:09:52,326 --> 1:09:53,856
这意味着现在有

2080
01:09:53,856 --> 1:09:56,326
超过 10 亿个 Metal 系统

2081
01:09:56,326 --> 1:09:56,976
可以支持你们的 App 和游戏

2082
01:09:57,106 --> 1:10:00,886
由于 Metal 广泛支持

2083
01:09:57,106 --> 1:10:00,886
由于 Metal 广泛支持

2084
01:10:00,886 --> 1:10:04,626
Apple 所有的桌面和移动平台

2085
01:10:04,626 --> 1:10:06,106
我们现在正从 macOS Mojave

2086
01:10:06,106 --> 1:10:08,476
iOS 12 和 Apple tvOS 12 开始

2087
01:10:08,476 --> 1:10:10,686
弃用旧有的

2088
01:10:10,686 --> 1:10:12,026
OpenGL 和 OpenCL GPU 框架

2089
01:10:12,116 --> 1:10:14,786
使用这些旧有 API 的 App

2090
01:10:14,786 --> 1:10:15,916
仍然可以在这些

2091
01:10:15,916 --> 1:10:17,256
系统版本中运行

2092
01:10:17,256 --> 1:10:18,766
但随着我们对旧有技术逐步的淘汰

2093
01:10:18,766 --> 1:10:19,966
弃用是必须迈出的第一步

2094
01:10:20,096 --> 1:10:21,156
因此如果你们还没有着手

2095
01:10:21,156 --> 1:10:22,256
我们建议你们

2096
01:10:22,256 --> 1:10:23,676
尽快将 App 转变为 Metal

2097
01:10:23,676 --> 1:10:24,806
我们将在不久的将来

2098
01:10:24,806 --> 1:10:27,186
就这一转变

2099
01:10:27,186 --> 1:10:27,786
进行更多的讨论

2100
01:10:28,716 --> 1:10:29,906
在你们转变 App 的过程中

2101
01:10:29,906 --> 1:10:30,966
我们可以提供帮助

2102
01:10:31,296 --> 1:10:33,016
与其他的 GPU

2103
01:10:33,016 --> 1:10:34,726
编程 API 相比

2104
01:10:34,726 --> 1:10:35,856
Metal API 更易于使用

2105
01:10:35,856 --> 1:10:37,246
也更易于掌握

2106
01:10:37,496 --> 1:10:38,856
它包含了一种

2107
01:10:38,856 --> 1:10:41,186
熟悉且强大的 C++ GPU 着色语言

2108
01:10:41,436 --> 1:10:43,126
我们还为 Metal 的使用

2109
01:10:43,126 --> 1:10:44,426
提供了一整套

2110
01:10:44,426 --> 1:10:46,666
高级调试和性能分析工具

2111
01:10:46,666 --> 1:10:49,076
这些都内置在 Xcode 中

2112
01:10:49,076 --> 1:10:51,286
我们还提供了具有高级分析功能的

2113
01:10:51,286 --> 1:10:52,456
GPU 性能计数器

2114
01:10:52,456 --> 1:10:53,746
来识别你们最宝贵的

2115
01:10:53,746 --> 1:10:55,506
着色代码行

2116
01:10:55,506 --> 1:10:57,476
一个用于导航 Metal 函数调用的

2117
01:10:57,476 --> 1:10:58,646
可视化 API 调试器

2118
01:10:58,646 --> 1:11:00,666
以及 Metal 系统跟踪

2119
01:10:58,646 --> 1:11:00,666
以及 Metal 系统跟踪

2120
01:11:00,666 --> 1:11:02,226
用于将你们的 Metal 命令

2121
01:11:02,226 --> 1:11:03,506
放在系统上发生的

2122
01:11:03,506 --> 1:11:04,506
所有其他事件的环境中

2123
01:11:04,996 --> 1:11:07,476
今年 我们很兴奋地宣布

2124
01:11:07,516 --> 1:11:08,956
两个强大的工具

2125
01:11:08,956 --> 1:11:10,586
一个是新的 Metal 依赖查看器

2126
01:11:10,586 --> 1:11:11,776
你们可以调查你们的

2127
01:11:11,776 --> 1:11:13,326
复杂且多通道的渲染和命令编码器

2128
01:11:13,326 --> 1:11:15,526
另一个是全新的

2129
01:11:15,526 --> 1:11:17,666
交互式 GPU 源代码

2130
01:11:17,666 --> 1:11:19,306
着色调试器

2131
01:11:19,306 --> 1:11:20,806
你们可以将 Metal 代码

2132
01:11:20,806 --> 1:11:22,966
探索到像素级别

2133
01:11:24,036 --> 1:11:25,046
你们一定想看到

2134
01:11:25,046 --> 1:11:26,596
这些新工具的作用

2135
01:11:26,596 --> 1:11:28,756
所以我想邀请 Seth 为你们做一个演示

2136
01:11:29,346 --> 1:11:29,556
Seth

2137
01:11:30,516 --> 1:11:35,466
[ 掌声 ]

2138
01:11:35,966 --> 1:11:36,496
&gt;&gt; 谢谢 John

2139
01:11:37,416 --> 1:11:39,556
Xcode 的 GP 调试器

2140
01:11:39,556 --> 1:11:41,216
是用于开发 Metal App 的工具

2141
01:11:41,576 --> 1:11:43,306
在左侧的调试导航器中

2142
01:11:43,306 --> 1:11:44,646
你们可以看到在框架中所使用的

2143
01:11:44,646 --> 1:11:45,926
所有 Metal API 代码

2144
01:11:46,126 --> 1:11:46,906
和绘制代码

2145
01:11:46,906 --> 1:11:48,956
在右边你们可以看到

2146
01:11:48,956 --> 1:11:51,406
所选的绘制代码的结果

2147
01:11:51,406 --> 1:11:53,186
主编辑器向你们展示了

2148
01:11:53,186 --> 1:11:54,656
所有的缓冲区 纹理

2149
01:11:54,656 --> 1:11:56,196
和绘制代码所需的

2150
01:11:56,196 --> 1:11:57,316
其他资源

2151
01:11:57,576 --> 1:11:59,086
我们将介绍在 Xcode 10 中全新的

2152
01:11:59,086 --> 1:12:00,096
依赖查看器

2153
01:11:59,086 --> 1:12:00,096
依赖查看器

2154
01:12:00,096 --> 1:12:01,556
我们可以使用它来了解

2155
01:12:01,556 --> 1:12:04,236
复杂的渲染层

2156
01:12:04,236 --> 1:12:06,166
是如何组合成场景的

2157
01:12:07,706 --> 1:12:09,136
它为你们提供一个

2158
01:12:09,136 --> 1:12:12,296
框架的蓝图

2159
01:12:12,296 --> 1:12:14,276
从而解释和理解

2160
01:12:14,276 --> 1:12:15,666
在一个 App 中复杂的渲染图

2161
01:12:15,746 --> 1:12:17,696
例如 Unity 在这里展示的

2162
01:12:17,696 --> 1:12:19,406
令人惊叹的《死亡之书》

2163
01:12:20,016 --> 1:12:24,656
我可以缩小来查看更多细节

2164
01:12:24,816 --> 1:12:26,486
前面的渲染层

2165
01:12:26,486 --> 1:12:28,696
显示在顶部

2166
01:12:28,696 --> 1:12:30,426
后面的渲染层显示在底部

2167
01:12:31,296 --> 1:12:32,206
这些线表示

2168
01:12:32,206 --> 1:12:34,176
路径之间的依赖

2169
01:12:34,876 --> 1:12:36,136
选中的路径

2170
01:12:36,376 --> 1:12:37,426
用蓝色高亮显示

2171
01:12:38,306 --> 1:12:40,096
正如你们所见

2172
01:12:40,096 --> 1:12:41,616
由于这里有超过 100 张渲染路径

2173
01:12:41,616 --> 1:12:43,146
这个场景中显然有很多依赖关系

2174
01:12:44,496 --> 1:12:46,516
尽管这个场景看起来已经很好

2175
01:12:47,026 --> 1:12:48,756
但仍有提升的空间

2176
01:12:49,256 --> 1:12:50,736
所以我做了一个额外的渲染层

2177
01:12:50,736 --> 1:12:52,076
镜头光晕

2178
01:12:52,076 --> 1:12:54,336
但是你们可以看到

2179
01:12:54,336 --> 1:12:55,806
结果看起来并不好

2180
01:12:55,806 --> 1:12:57,156
太绿了

2181
01:12:58,176 --> 1:13:03,376
让我们放大 选择一个像素

2182
01:12:58,176 --> 1:13:03,376
让我们放大 选择一个像素

2183
01:13:03,416 --> 1:13:06,186
然后启动新的着色调试器

2184
01:13:06,186 --> 1:13:08,566
一个强大的交互式工具

2185
01:13:08,566 --> 1:13:09,956
从而根据视觉效果

2186
01:13:09,956 --> 1:13:10,476
调试着色器[ 音质不清晰 ]

2187
01:13:11,206 --> 1:13:14,676
在主编辑器中

2188
01:13:14,676 --> 1:13:15,156
我可以看到源代码

2189
01:13:15,816 --> 1:13:17,396
在右边的侧边栏中

2190
01:13:17,526 --> 1:13:19,126
我可以看到每一行代码

2191
01:13:19,256 --> 1:13:21,176
所涉及的变量

2192
01:13:21,176 --> 1:13:22,806
此外 我可以展开

2193
01:13:22,806 --> 1:13:25,316
其中的任何一行 来查看更多的细节

2194
01:13:26,146 --> 1:13:27,876
这两个视图将所选的

2195
01:13:27,876 --> 1:13:29,486
像素周围的区域可视化

2196
01:13:30,316 --> 1:13:31,906
并与框架附件中

2197
01:13:31,906 --> 1:13:34,496
高亮显示的区域相对应

2198
01:13:36,016 --> 1:13:37,986
左边的视图

2199
01:13:37,986 --> 1:13:39,336
显示变量值

2200
01:13:39,336 --> 1:13:41,576
右边的视图

2201
01:13:41,726 --> 1:13:44,276
显示像素 执行蒙版

2202
01:13:44,336 --> 1:13:45,946
它表示这一行代码

2203
01:13:45,996 --> 1:13:48,156
所执行的像素

2204
01:13:48,326 --> 1:13:49,766
这是一种非常强大的方法

2205
01:13:49,826 --> 1:13:52,256
来调试 GPU 上

2206
01:13:52,256 --> 1:13:53,756
大量的着色器并行执行

2207
01:13:53,756 --> 1:13:57,586
你们可以看到

2208
01:13:57,586 --> 1:13:59,016
执行蒙版的形状

2209
01:13:59,516 --> 1:14:00,596
与视觉异常的形状相匹配

2210
01:13:59,516 --> 1:14:00,596
与视觉异常的形状相匹配

2211
01:14:00,596 --> 1:14:02,296
这告诉我

2212
01:14:02,296 --> 1:14:05,426
问题存在于这一行代码中

2213
01:14:05,426 --> 1:14:06,386
现在我知道问题出在哪里了

2214
01:14:06,386 --> 1:14:07,806
这就是我的具体错误

2215
01:14:07,806 --> 1:14:09,456
我应该使用

2216
01:14:09,456 --> 1:14:10,606
镜头光晕的矢量长度

2217
01:14:10,606 --> 1:14:12,556
而不是它的颜色

2218
01:14:12,556 --> 1:14:13,976
这将很容易修复

2219
01:14:17,286 --> 1:14:18,916
我可以点击更新着色器的按钮

2220
01:14:18,916 --> 1:14:20,576
来快速应用修复

2221
01:14:20,716 --> 1:14:22,386
重新编译着色器

2222
01:14:22,386 --> 1:14:23,836
并将其配置到 GPU 上

2223
01:14:24,026 --> 1:14:26,876
这里我们可以看到

2224
01:14:26,876 --> 1:14:28,266
我的镜头光晕被修复了

2225
01:14:28,266 --> 1:14:28,776
场景看起来很酷

2226
01:14:29,516 --> 1:14:36,246
[ 掌声 ]

2227
01:14:36,746 --> 1:14:37,936
这就是 Xcode 10 中

2228
01:14:37,936 --> 1:14:39,946
新的依赖查看器

2229
01:14:39,946 --> 1:14:41,626
和 GP 着色调试器

2230
01:14:41,626 --> 1:14:42,856
为你们提供强大的新工具来构建

2231
01:14:42,856 --> 1:14:43,416
Metal App

2232
01:14:44,066 --> 1:14:44,446
Jeremy

2233
01:14:45,276 --> 1:14:47,496
&gt;&gt; 好的 [ 掌声 ]

2234
01:14:47,496 --> 1:14:47,776
谢谢 Seth

2235
01:14:50,806 --> 1:14:52,036
除了这些神奇的新工具外

2236
01:14:52,036 --> 1:14:53,396
我们还将继续讨论 Metal

2237
01:14:53,396 --> 1:14:55,266
在 iOS 12

2238
01:14:55,266 --> 1:14:57,276
和 macOS Mojave 中的

2239
01:14:57,276 --> 1:14:58,606
一些全新的功能

2240
01:14:58,606 --> 1:15:00,856
我今天将着重介绍其中的三个

2241
01:14:58,606 --> 1:15:00,856
我今天将着重介绍其中的三个

2242
01:15:01,526 --> 1:15:03,096
“GPU-Driven Command Encoding”

2243
01:15:03,416 --> 1:15:04,556
“Machine Learning Training Acceleration”

2244
01:15:04,556 --> 1:15:06,576
以及 “Ray Tracing”

2245
01:15:07,496 --> 1:15:09,466
首先是 GPU 驱动的命令编码

2246
01:15:09,676 --> 1:15:11,606
在之前 你们的 App 会使用 CPU

2247
01:15:11,606 --> 1:15:13,536
对 GPU 命令进行编码

2248
01:15:13,536 --> 1:15:14,936
然后在 GPU 上

2249
01:15:14,936 --> 1:15:16,686
执行这些命令

2250
01:15:17,086 --> 1:15:18,196
虽然 Metal 可以使

2251
01:15:18,196 --> 1:15:20,326
这种编码非常快

2252
01:15:20,326 --> 1:15:21,426
但是它仍然会因为

2253
01:15:21,456 --> 1:15:23,086
CPU 和 GPU 之间同步的瓶颈

2254
01:15:23,086 --> 1:15:24,246
而受到影响

2255
01:15:24,746 --> 1:15:26,506
在 iOS 12 和 macOS Mojave 中

2256
01:15:26,506 --> 1:15:28,026
你们可以直接在 GPU 上

2257
01:15:28,026 --> 1:15:29,836
对这些命令进行编码

2258
01:15:29,836 --> 1:15:32,046
从而节省宝贵的 CPU 时间

2259
01:15:32,046 --> 1:15:34,806
以供游戏和 App 使用

2260
01:15:35,276 --> 1:15:36,746
由于你们使用的是

2261
01:15:36,746 --> 1:15:38,476
一个计算着色器

2262
01:15:38,476 --> 1:15:39,886
来在 GPU 上处理这些命令

2263
01:15:39,886 --> 1:15:41,016
所以你们也可以

2264
01:15:41,016 --> 1:15:42,386
并行地构造

2265
01:15:42,386 --> 1:15:44,076
大量的命令

2266
01:15:44,076 --> 1:15:47,976
从而获得更佳的渲染性能和复杂性

2267
01:15:48,966 --> 1:15:50,876
接下来 我想分享

2268
01:15:50,876 --> 1:15:52,526
关于 Metal 对机器学习的支持

2269
01:15:52,716 --> 1:15:54,036
的最新进展

2270
01:15:54,396 --> 1:15:57,186
在 iOS 12 和 macOS Mojave 中

2271
01:15:57,186 --> 1:15:59,936
我们为现有的 Metal 性能着色库

2272
01:15:59,936 --> 1:16:01,876
增加了大量

2273
01:15:59,936 --> 1:16:01,876
增加了大量

2274
01:16:01,876 --> 1:16:03,566
全新的计算内核

2275
01:16:03,966 --> 1:16:05,626
经过优化后 它们可以在 iOS

2276
01:16:05,626 --> 1:16:07,196
和 Mac 设备的本地 GPU 上

2277
01:16:07,196 --> 1:16:09,926
支持机器学习训练

2278
01:16:10,246 --> 1:16:11,646
新的 Metal 性能着色器

2279
01:16:11,646 --> 1:16:14,076
在机器学习训练时的性能改进

2280
01:16:14,076 --> 1:16:15,706
是令人惊叹的

2281
01:16:15,706 --> 1:16:17,116
训练速度快了

2282
01:16:17,166 --> 1:16:18,456
一个数量级

2283
01:16:19,376 --> 1:16:20,846
我们也非常高兴地宣布

2284
01:16:20,846 --> 1:16:21,826
我们一直在与 Google 合作

2285
01:16:21,866 --> 1:16:22,796
并将在今年的晚些时候

2286
01:16:22,796 --> 1:16:24,676
将 Metal 加速引入 TensorFlow

2287
01:16:24,676 --> 1:16:25,966
早期的性能结果显示

2288
01:16:25,966 --> 1:16:27,226
相较于以前

2289
01:16:27,226 --> 1:16:29,406
执行的速度快了 20 倍

2290
01:16:29,406 --> 1:16:31,236
这是一个惊人的进步

2291
01:16:32,316 --> 1:16:33,936
[ 掌声 ] 是的 非常棒

2292
01:16:34,516 --> 1:16:36,756
[ 掌声 ]

2293
01:16:37,256 --> 1:16:38,796
最后 射线跟踪

2294
01:16:38,796 --> 1:16:39,866
这是一个有较长历史的技术

2295
01:16:39,866 --> 1:16:41,746
它可以实现令人

2296
01:16:41,806 --> 1:16:44,076
难以置信的逼真场景

2297
01:16:44,076 --> 1:16:45,646
通常用于高端渲染

2298
01:16:45,646 --> 1:16:46,336
和 3D 产品设计

2299
01:16:46,716 --> 1:16:48,116
然而一般来说

2300
01:16:48,116 --> 1:16:49,466
它必须离线完成

2301
01:16:49,466 --> 1:16:51,206
因为它的计算成本非常高

2302
01:16:51,346 --> 1:16:54,796
现在让我快速地描述一下原因

2303
01:16:55,126 --> 1:16:56,196
首先 你们需要通过数学建模

2304
01:16:56,196 --> 1:16:58,036
模拟光线从光源发出

2305
01:16:58,036 --> 1:17:00,636
在物体上反射穿过场景

2306
01:16:58,036 --> 1:17:00,636
在物体上反射穿过场景

2307
01:17:00,636 --> 1:17:02,676
朝向屏幕

2308
01:17:02,676 --> 1:17:03,686
并进入你们的眼睛的过程

2309
01:17:04,326 --> 1:17:05,756
并且为了获得越来越高的分辨率

2310
01:17:05,756 --> 1:17:07,126
你们需要添加

2311
01:17:07,126 --> 1:17:09,796
越来越多的射线

2312
01:17:10,866 --> 1:17:14,206
直到达到理想的分辨率

2313
01:17:14,206 --> 1:17:15,486
直到达到理想的分辨率

2314
01:17:15,486 --> 1:17:17,626
这个简单的 1000 * 1000 的图形

2315
01:17:17,626 --> 1:17:19,776
就需要接近 600 万束射线才能生成

2316
01:17:20,756 --> 1:17:22,066
每一束射线都必须

2317
01:17:22,066 --> 1:17:23,256
经过至少两组

2318
01:17:23,256 --> 1:17:25,726
昂贵的数学计算处理

2319
01:17:26,136 --> 1:17:27,496
首先 你们需要确定

2320
01:17:27,496 --> 1:17:28,606
一条给定的射线是否

2321
01:17:28,606 --> 1:17:30,226
与场景中一个特定的三角形相交

2322
01:17:30,576 --> 1:17:31,966
其次 你们需要应用

2323
01:17:31,966 --> 1:17:33,266
一个依据材料特定的着色器

2324
01:17:33,266 --> 1:17:35,106
来生成像素

2325
01:17:35,986 --> 1:17:38,716
最初 这两个操作

2326
01:17:38,716 --> 1:17:39,696
都是由 CPU 执行的

2327
01:17:39,936 --> 1:17:41,656
然而 虽然 GPU 可以

2328
01:17:41,656 --> 1:17:43,336
轻松地处理像素阴影

2329
01:17:43,336 --> 1:17:45,036
可对 CPU 来说

2330
01:17:45,036 --> 1:17:46,506
光线与三角形的相交

2331
01:17:46,506 --> 1:17:47,716
本身就是一个很大的瓶颈

2332
01:17:47,716 --> 1:17:49,026
并且 要将其有效地移动到 GPU 上

2333
01:17:49,026 --> 1:17:50,386
也是一个难题

2334
01:17:51,546 --> 1:17:52,876
但是新的 Metal 射线-三角形求交器

2335
01:17:52,876 --> 1:17:55,016
为你们解决了这个问题

2336
01:17:55,276 --> 1:17:56,726
有了这个新的 API

2337
01:17:56,726 --> 1:17:58,306
你们可以在一个

2338
01:17:58,306 --> 1:18:00,106
非常简单易用的包中

2339
01:17:58,306 --> 1:18:00,106
非常简单易用的包中

2340
01:18:00,106 --> 1:18:01,336
获得高达 10 倍的性能提升

2341
01:18:01,336 --> 1:18:03,336
且一切都已针对 iOS

2342
01:18:03,516 --> 1:18:05,376
和 macOS 的 GPU 进行了预先优化

2343
01:18:06,186 --> 1:18:07,956
只需简单的几行代码

2344
01:18:07,956 --> 1:18:09,216
只需简单的几行代码

2345
01:18:09,216 --> 1:18:12,216
和许多 GPU 计算操作一样

2346
01:18:12,216 --> 1:18:13,896
射线跟踪是一种

2347
01:18:13,896 --> 1:18:15,086
能够有效地根据

2348
01:18:15,086 --> 1:18:16,376
GPU 的可用性能

2349
01:18:16,376 --> 1:18:18,356
达到不同水平效果的操作

2350
01:18:18,356 --> 1:18:20,066
所以我们可以借助

2351
01:18:20,066 --> 1:18:21,936
Metal 2 对外部 GPU 的支持

2352
01:18:21,936 --> 1:18:23,216
来获得更多的性能

2353
01:18:23,216 --> 1:18:25,806
你们一定要看一下它的效果

2354
01:18:25,976 --> 1:18:27,076
我想邀请 Rav

2355
01:18:27,076 --> 1:18:29,406
来做一个快速的演示 Rav

2356
01:18:30,516 --> 1:18:34,016
[ 掌声 ]

2357
01:18:34,516 --> 1:18:35,106
&gt;&gt; 谢谢 Jeremy

2358
01:18:35,806 --> 1:18:37,716
好的 让我们打开这个

2359
01:18:37,716 --> 1:18:39,296
Amazon Lumberyard 的小酒馆场景

2360
01:18:39,476 --> 1:18:41,316
的射线跟踪渲染

2361
01:18:41,626 --> 1:18:43,536
并使用 CPU

2362
01:18:43,536 --> 1:18:44,956
来执行相交计算

2363
01:18:45,516 --> 1:18:47,186
这个执行在优化后

2364
01:18:47,316 --> 1:18:49,496
可以在 iMac Pro 的

2365
01:18:49,496 --> 1:18:50,686
所有 10 个内核上运行

2366
01:18:51,776 --> 1:18:52,786
我们还添加了一个小的基准测试

2367
01:18:52,786 --> 1:18:54,296
对射线跟踪算法

2368
01:18:54,296 --> 1:18:56,116
进行 80 次迭代的过程

2369
01:18:56,116 --> 1:18:58,116
进行计时

2370
01:18:59,016 --> 1:19:01,016
对于这种环境来说

2371
01:18:59,016 --> 1:19:01,016
对于这种环境来说

2372
01:19:01,016 --> 1:19:03,206
这需要进行超过 60 亿次的

2373
01:19:03,206 --> 1:19:04,066
相交测试

2374
01:19:04,736 --> 1:19:05,676
你们可以看到

2375
01:19:05,676 --> 1:19:09,566
我们需要大约 12 秒才能在 CPU 上完成

2376
01:19:09,626 --> 1:19:12,556
现在我们使用 iMac Pro 中内置的 GPU 上的

2377
01:19:12,556 --> 1:19:14,286
新 Metal 射线-三角形求交器

2378
01:19:14,286 --> 1:19:15,796
并将所需的时间

2379
01:19:15,796 --> 1:19:17,506
与之前进行比较

2380
01:19:17,686 --> 1:19:19,816
你们可以马上看到

2381
01:19:19,816 --> 1:19:21,546
速度快了很多

2382
01:19:21,546 --> 1:19:23,926
我们只需要 1.3 秒

2383
01:19:23,926 --> 1:19:24,606
就能完成同样的工作量

2384
01:19:24,986 --> 1:19:26,256
太棒了 我再来做一次

2385
01:19:26,256 --> 1:19:26,646
开始

2386
01:19:28,436 --> 1:19:29,266
完成了

2387
01:19:30,046 --> 1:19:32,306
获得了近乎 10 倍的性能提升

2388
01:19:32,336 --> 1:19:34,836
简直令人惊叹

2389
01:19:35,356 --> 1:19:36,816
当然 我们并没有就此停止

2390
01:19:36,816 --> 1:19:39,296
正如 Jeremy 提到的

2391
01:19:39,296 --> 1:19:40,916
射线跟踪非常适合

2392
01:19:40,916 --> 1:19:43,336
跨多个 GPU 的并行处理

2393
01:19:43,336 --> 1:19:44,976
因此我可以启用一个

2394
01:19:44,976 --> 1:19:46,556
已经连接到 iMac Pro 上的外部 GPU

2395
01:19:46,626 --> 1:19:50,006
并将渲染时间缩短一半

2396
01:19:50,176 --> 1:19:52,316
你们可能注意到我们添加了一条绿线

2397
01:19:52,316 --> 1:19:53,676
这是为了能够直观地观察

2398
01:19:53,796 --> 1:19:55,106
我们如何在两个

2399
01:19:55,106 --> 1:19:56,326
GPU 之间分配工作负载

2400
01:19:56,326 --> 1:19:59,026
在这种情况下

2401
01:19:59,026 --> 1:20:00,776
每个 GPU 渲染一半的帧

2402
01:19:59,026 --> 1:20:00,776
每个 GPU 渲染一半的帧

2403
01:20:01,416 --> 1:20:02,946
这是一个很大的进步

2404
01:20:03,456 --> 1:20:05,006
但是正如 Jeremy 所说

2405
01:20:05,006 --> 1:20:06,626
你们不可能永远只有 2 个 GPU

2406
01:20:07,186 --> 1:20:09,266
所以让我们再添加 2 个

2407
01:20:09,266 --> 1:20:12,306
现在共有 4 个 GPU 在渲染场景

2408
01:20:12,756 --> 1:20:15,496
这就是 iMac Pro 的

2409
01:20:15,496 --> 1:20:17,836
超过 40 万亿次的计算能力

2410
01:20:17,936 --> 1:20:20,286
我们现在渲染场景的速度

2411
01:20:20,446 --> 1:20:23,186
比 CPU 快了 30 倍

2412
01:20:23,616 --> 1:20:25,466
我们认为这真的很棒

2413
01:20:27,516 --> 1:20:34,266
[ 掌声 ]

2414
01:20:34,766 --> 1:20:35,896
由于射线跟踪

2415
01:20:35,896 --> 1:20:37,076
非常适合渲染阴影

2416
01:20:37,076 --> 1:20:38,376
我将关闭这里的几个灯

2417
01:20:38,376 --> 1:20:40,276
来突出阴影效果

2418
01:20:40,276 --> 1:20:41,826
你们就可以真正理解

2419
01:20:41,916 --> 1:20:43,226
图像在 GPU 上

2420
01:20:43,226 --> 1:20:44,856
聚集的速度有多快

2421
01:20:45,526 --> 1:20:48,126
因此我们相信

2422
01:20:48,156 --> 1:20:49,916
新的 Metal 射线-三角形求交器

2423
01:20:49,916 --> 1:20:52,566
以及 macOS 上

2424
01:20:52,566 --> 1:20:53,926
对外部 GPU 的支持

2425
01:20:53,926 --> 1:20:55,496
将使那些能够利用射线跟踪技术的 App

2426
01:20:55,496 --> 1:20:57,566
进行一些新的工作流

2427
01:20:58,116 --> 1:20:58,406
谢谢大家

2428
01:20:58,856 --> 1:20:59,486
交回给你 Jeremy [ 掌声 ]

2429
01:21:02,196 --> 1:21:04,306
&gt;&gt; 好的 真是太棒了

2430
01:21:04,406 --> 1:21:04,936
谢谢 Rav 这就是 

2431
01:21:06,066 --> 1:21:08,116
iOS 12 和 macOS Mojave 中的 Metal 2

2432
01:21:08,116 --> 1:21:10,466
它是一款易于使用

2433
01:21:10,466 --> 1:21:12,216
统一了 3D 图形

2434
01:21:12,216 --> 1:21:14,466
和 GPU 计算的 API

2435
01:21:14,466 --> 1:21:16,046
广泛支持 Apple 的所有产品

2436
01:21:16,146 --> 1:21:18,926
包括 A11 Bionic

2437
01:21:18,926 --> 1:21:20,186
和 Apple 设计的 GPU

2438
01:21:21,086 --> 1:21:22,716
GPU 开发工具集成到 Xcode

2439
01:21:22,716 --> 1:21:24,206
和所有新特性中

2440
01:21:24,206 --> 1:21:27,016
以支持最新的机器学习训练

2441
01:21:27,016 --> 1:21:28,966
和射线跟踪技术

2442
01:21:29,376 --> 1:21:30,546
这是将你们的 App

2443
01:21:30,546 --> 1:21:31,686
转移到 Metal 的最佳时机

2444
01:21:31,686 --> 1:21:32,826
我们迫不及待地想看看

2445
01:21:32,856 --> 1:21:33,656
你们接下来会创造的成果

2446
01:21:33,856 --> 1:21:34,196
谢谢大家

2447
01:21:35,276 --> 1:21:37,126
现在 我想请上 Mike Rockwell

2448
01:21:37,126 --> 1:21:40,676
来讨论一些 AR 最新进展

2449
01:21:40,676 --> 1:21:40,876
谢谢

2450
01:21:41,516 --> 1:21:43,706
[ 掌声 ]

2451
01:21:44,206 --> 1:21:44,926
&gt;&gt; 谢谢 Jeremy

2452
01:21:47,936 --> 1:21:49,786
对 Apple 的 AR 来说

2453
01:21:49,786 --> 1:21:51,306
去年是了不起的一年

2454
01:21:51,896 --> 1:21:53,876
随着 ARKit 在 WWDC 上的首次亮相

2455
01:21:53,876 --> 1:21:57,866
iOS 成为了世界上

2456
01:21:57,866 --> 1:22:01,186
最大的 AR 平台

2457
01:21:57,866 --> 1:22:01,186
最大的 AR 平台

2458
01:22:01,696 --> 1:22:03,146
目前已有数亿个

2459
01:22:03,296 --> 1:22:06,576
支持 AR 的 iOS 设备

2460
01:22:06,576 --> 1:22:08,006
而且这个数字正在迅速增长

2461
01:22:09,066 --> 1:22:09,966
正如 Craig 在上午

2462
01:22:09,966 --> 1:22:12,336
向你们展示的

2463
01:22:12,336 --> 1:22:14,446
在 iOS 12 系统中

2464
01:22:14,446 --> 1:22:16,386
我们进一步实现了

2465
01:22:16,386 --> 1:22:17,326
AR 在操作系统中的高度集成 

2466
01:22:18,126 --> 1:22:20,696
我们现在可以在“信息” “News”

2467
01:22:20,696 --> 1:22:22,946
“Safari 浏览器” 等 App 中

2468
01:22:22,946 --> 1:22:26,606
通过新的 Quick Look 查看器来体验 AR 内容

2469
01:22:27,456 --> 1:22:29,516
为此 我们必须为 AR

2470
01:22:29,516 --> 1:22:31,246
创建一个针对其

2471
01:22:31,296 --> 1:22:32,996
进行优化的文件格式

2472
01:22:32,996 --> 1:22:35,066
我们与 Pixar 和 Adobe

2473
01:22:35,066 --> 1:22:37,836
合作创建了一种新的移动 AR 格式

2474
01:22:37,836 --> 1:22:39,886
叫做 USDZ

2475
01:22:40,176 --> 1:22:43,616
它基于在整个行业中

2476
01:22:43,616 --> 1:22:45,256
用于专业内容创作的

2477
01:22:45,256 --> 1:22:46,786
通用场景描述格式

2478
01:22:47,286 --> 1:22:48,726
它对移动设备进行了优化

2479
01:22:48,726 --> 1:22:50,916
支持丰富的

2480
01:22:50,916 --> 1:22:52,416
3D 素材和动画

2481
01:22:53,576 --> 1:22:57,596
使用 USDZ 十分简单

2482
01:22:58,016 --> 1:22:59,526
在网络上

2483
01:22:59,526 --> 1:23:01,596
只需要几行 HTML

2484
01:22:59,526 --> 1:23:01,596
只需要几行 HTML

2485
01:23:01,596 --> 1:23:03,976
并且它也支持在 SceneKit 中

2486
01:23:03,976 --> 1:23:06,196
使用 Model I/O

2487
01:23:06,196 --> 1:23:07,346
因此你们可以在 App 中

2488
01:23:07,346 --> 1:23:08,236
轻松地使用它

2489
01:23:09,596 --> 1:23:11,266
我们还一直与

2490
01:23:11,266 --> 1:23:12,736
内容创建工具方面的业界翘楚

2491
01:23:12,736 --> 1:23:14,116
密切合作

2492
01:23:14,116 --> 1:23:15,366
为了给 USDZ 提供本地支持

2493
01:23:16,406 --> 1:23:17,986
正如你们今天上午听到的

2494
01:23:17,986 --> 1:23:18,986
Abhay 说他十分了解

2495
01:23:18,986 --> 1:23:21,836
Adobe 在这个方向的最新进展

2496
01:23:21,836 --> 1:23:22,886
所以我想邀请他现在上台

2497
01:23:22,886 --> 1:23:24,666
跟你们聊一聊

2498
01:23:25,226 --> 1:23:25,676
Abhay

2499
01:23:26,516 --> 1:23:29,546
[ 掌声 ]

2500
01:23:30,046 --> 1:23:30,516
&gt;&gt; 谢谢 Mike

2501
01:23:32,996 --> 1:23:34,226
很高兴回到讲台上

2502
01:23:35,276 --> 1:23:36,186
正如你们在今天上午的

2503
01:23:36,186 --> 1:23:38,116
主题演讲中所听到的

2504
01:23:38,116 --> 1:23:40,866
Adobe 的 Creative Cloud

2505
01:23:40,866 --> 1:23:42,806
以及 ARKit 将能够重新想象

2506
01:23:42,806 --> 1:23:44,236
并融合数字世界和现实世界

2507
01:23:45,176 --> 1:23:47,496
这需要对新的

2508
01:23:47,496 --> 1:23:49,566
设计交互模型

2509
01:23:49,566 --> 1:23:50,656
进行彻底的重新思考

2510
01:23:52,086 --> 1:23:54,506
今天早些时候

2511
01:23:54,506 --> 1:23:56,546
我们宣布了一种用于

2512
01:23:56,546 --> 1:23:58,986
创建 AR 体验的新系统 Project Aero

2513
01:23:59,646 --> 1:24:02,286
它将 Photoshop 和 Dimension 等

2514
01:23:59,646 --> 1:24:02,286
它将 Photoshop 和 Dimension 等

2515
01:24:02,286 --> 1:24:03,916
常见的 Creative Cloud App 的

2516
01:24:03,916 --> 1:24:06,736
一些特性注入到 ARKit 中

2517
01:24:07,646 --> 1:24:11,816
借助于 Creative Cloud 和 iOS

2518
01:24:11,816 --> 1:24:13,076
你们将首次可以

2519
01:24:13,236 --> 1:24:14,606
在 AR 中进行

2520
01:24:14,606 --> 1:24:16,066
“所见即所得”的编辑

2521
01:24:16,066 --> 1:24:20,626
和你们想的一样

2522
01:24:20,626 --> 1:24:21,956
我们也认为

2523
01:24:21,956 --> 1:24:24,046
ARKit 绝对是 AR 的主导平台

2524
01:24:24,206 --> 1:24:26,236
我们很高兴能与

2525
01:24:26,236 --> 1:24:28,576
Apple 紧密合作

2526
01:24:28,576 --> 1:24:31,216
共同探索和推进

2527
01:24:31,216 --> 1:24:32,936
沉浸式设计的发展

2528
01:24:33,526 --> 1:24:38,226
但是要充分实现 AR 的潜力

2529
01:24:38,226 --> 1:24:39,326
你们需要投身于

2530
01:24:39,326 --> 1:24:40,066
整个生态系统中

2531
01:24:40,416 --> 1:24:42,056
所以今天 我们宣布

2532
01:24:42,056 --> 1:24:43,956
Adobe 将与

2533
01:24:43,956 --> 1:24:46,396
Apple 和 Pixar 一起

2534
01:24:46,646 --> 1:24:50,996
本地支持 USDZ 格式

2535
01:24:50,996 --> 1:24:51,063
[ 掌声 ]

2536
01:24:51,063 --> 1:24:54,466
AR 是一种独特的媒介

2537
01:24:54,466 --> 1:24:56,056
它允许交互内容

2538
01:24:56,106 --> 1:24:58,396
扩展到屏幕之外

2539
01:24:58,396 --> 1:25:00,036
我们周围的物理空间

2540
01:24:58,396 --> 1:25:00,036
我们周围的物理空间

2541
01:25:00,036 --> 1:25:02,106
实际上变成了一个

2542
01:25:02,106 --> 1:25:03,666
创造性的画布

2543
01:25:04,106 --> 1:25:05,506
我们来看一下

2544
01:25:07,516 --> 1:26:23,516
[ 音乐 ]

2545
01:25:07,516 --> 1:26:23,516
[ 音乐 ]

2546
01:26:24,016 --> 1:26:25,046
[ 掌声 ]

2547
01:26:25,046 --> 1:26:25,596
非常酷

2548
01:26:29,816 --> 1:26:32,876
究其核心 Aero 项目是 Adobe 

2549
01:26:32,926 --> 1:26:34,456
愿景和使命的一部分

2550
01:26:34,456 --> 1:26:36,686
希望能够真正将

2551
01:26:36,836 --> 1:26:38,376
沉浸式内容的创造民主化

2552
01:26:39,186 --> 1:26:40,266
正如你们在视频中所看到的

2553
01:26:40,266 --> 1:26:42,906
创造者和开发人员

2554
01:26:42,906 --> 1:26:44,266
将能够无缝地协作

2555
01:26:44,266 --> 1:26:46,566
并借助于这些工具

2556
01:26:46,566 --> 1:26:50,906
提供广泛的 AR 体验

2557
01:26:51,056 --> 1:26:53,356
请继续关注

2558
01:26:53,356 --> 1:26:55,136
我们即将召开的 Adobe MAX 大会

2559
01:26:55,136 --> 1:26:56,526
获知 Aero 项目的更多最新进展

2560
01:26:57,286 --> 1:26:58,576
就个人而言

2561
01:26:58,576 --> 1:26:59,806
我们与 Apple 的合作

2562
01:26:59,806 --> 1:27:02,246
令我感到十分的兴奋

2563
01:26:59,806 --> 1:27:02,246
令我感到十分的兴奋

2564
01:27:02,246 --> 1:27:04,476
因为我们在共同探索

2565
01:27:04,476 --> 1:27:06,556
这个新兴而强大的

2566
01:27:06,556 --> 1:27:07,616
新叙事媒介的无限可能

2567
01:27:07,706 --> 1:27:08,476
谢谢大家

2568
01:27:08,526 --> 1:27:08,976
交给你了 Mike

2569
01:27:09,516 --> 1:27:12,166
[ 掌声 ]

2570
01:27:12,666 --> 1:27:13,226
&gt;&gt; 谢谢 Abhay

2571
01:27:14,546 --> 1:27:15,516
简直太棒了

2572
01:27:15,736 --> 1:27:16,776
令人惊叹

2573
01:27:17,386 --> 1:27:20,096
当然 Apple 的 AR 基础

2574
01:27:20,096 --> 1:27:21,316
是 ARKit

2575
01:27:21,966 --> 1:27:23,676
ARKit 具备

2576
01:27:23,676 --> 1:27:25,626
可靠的设备位置定位

2577
01:27:25,626 --> 1:27:27,986
精确的照明和尺寸估计

2578
01:27:27,986 --> 1:27:30,606
这使得创建 AR App 变得更加容易

2579
01:27:31,616 --> 1:27:32,946
iPhone X 提供了

2580
01:27:32,946 --> 1:27:34,616
突破性的面部追踪

2581
01:27:34,806 --> 1:27:36,746
在过去 这需要专门定制的硬件

2582
01:27:38,116 --> 1:27:39,806
在最初的版本发布后

2583
01:27:39,806 --> 1:27:41,306
我们很快跟进了 ARKit 1.5

2584
01:27:41,306 --> 1:27:43,866
增加了 2D 图像触发器

2585
01:27:43,866 --> 1:27:45,206
高分辨率的背景摄像头

2586
01:27:45,206 --> 1:27:46,856
以及暂停

2587
01:27:46,856 --> 1:27:49,216
和恢复跟踪的功能

2588
01:27:49,216 --> 1:27:50,096
如此一来 在你接到来电时

2589
01:27:50,096 --> 1:27:52,006
就不必重启 AR 会话

2590
01:27:52,746 --> 1:27:54,366
我非常兴奋地告诉你们

2591
01:27:54,366 --> 1:27:56,576
我们下一个跨越式的前进

2592
01:27:56,576 --> 1:28:00,706
ARKit 2

2593
01:27:56,576 --> 1:28:00,706
ARKit 2

2594
01:28:00,706 --> 1:28:03,076
ARKit 2 提供了很多的改进

2595
01:28:03,076 --> 1:28:06,116
包括提升的

2596
01:28:06,116 --> 1:28:07,946
面部跟踪功能

2597
01:28:07,946 --> 1:28:11,826
新增了注视和舌头的跟踪能力

2598
01:28:12,386 --> 1:28:13,786
这些高要求的功能

2599
01:28:13,786 --> 1:28:14,766
允许你们把面部动画的逼真程度

2600
01:28:14,766 --> 1:28:16,726
带到一个新的水平

2601
01:28:17,566 --> 1:28:18,846
事实证明

2602
01:28:18,846 --> 1:28:20,706
孩子们在玩动画表情时的

2603
01:28:20,706 --> 1:28:22,226
第一件事就是伸出舌头

2604
01:28:22,226 --> 1:28:23,536
我想你们很多人也是这样

2605
01:28:23,536 --> 1:28:24,886
这就是为什么 我们要新增这项功能

2606
01:28:28,366 --> 1:28:29,956
为了更准确地将物体

2607
01:28:29,956 --> 1:28:31,636
融入到场景中

2608
01:28:31,636 --> 1:28:33,346
我们添加了环境纹理贴图

2609
01:28:33,726 --> 1:28:36,206
ARKit 基于摄像头在现实世界中

2610
01:28:36,206 --> 1:28:37,986
看到的场景创建纹理贴图

2611
01:28:37,986 --> 1:28:41,346
请注意 这个球反射的是

2612
01:28:41,346 --> 1:28:42,466
桌子上的那张真实的图片

2613
01:28:43,046 --> 1:28:44,966
但是摄像头看不到的场景

2614
01:28:44,966 --> 1:28:45,706
该怎么办呢

2615
01:28:46,346 --> 1:28:47,896
通过机器学习

2616
01:28:47,896 --> 1:28:49,286
我们在数千个典型的环境中

2617
01:28:49,456 --> 1:28:51,356
训练了一个神经网络

2618
01:28:51,786 --> 1:28:53,826
这使得 ARKit 能够

2619
01:28:53,826 --> 1:28:55,876
虚构场景的其他部分

2620
01:28:56,406 --> 1:28:57,336
这意味着你们会得到一些

2621
01:28:57,416 --> 1:28:58,906
十分可信的反射

2622
01:28:58,906 --> 1:28:59,846
比如头顶的灯光

2623
01:28:59,846 --> 1:29:01,026
即使摄像头根本没有

2624
01:28:59,846 --> 1:29:01,026
即使摄像头根本没有

2625
01:29:01,236 --> 1:29:02,676
在环境中看到灯光

2626
01:29:02,676 --> 1:29:04,346
你们也可以在球上看到反射

2627
01:29:06,706 --> 1:29:09,016
我们扩展了 2D 图像检测功能

2628
01:29:09,016 --> 1:29:11,486
从而支持在三维空间中

2629
01:29:11,486 --> 1:29:14,446
跟踪这些图像

2630
01:29:15,166 --> 1:29:17,246
所以现在你们可以跟踪

2631
01:29:17,306 --> 1:29:18,606
粘在图片上的 3D 物体

2632
01:29:18,606 --> 1:29:19,996
在现实世界中的移动

2633
01:29:20,366 --> 1:29:24,856
不仅是平面的移动 也可以是立体的移动

2634
01:29:27,516 --> 1:29:33,336
[ 掌声 ]

2635
01:29:33,836 --> 1:29:37,306
ARKit 现在可以检测 3D 物体

2636
01:29:37,796 --> 1:29:39,896
你们可以通过 API

2637
01:29:40,426 --> 1:29:42,416
或者我们提供的简单开发工具

2638
01:29:42,416 --> 1:29:46,596
来扫描物体

2639
01:29:46,596 --> 1:29:48,606
然后这些映射可以用于

2640
01:29:48,606 --> 1:29:49,786
识别这些物体及其位置

2641
01:29:49,786 --> 1:29:51,756
并触发与环境相关的

2642
01:29:51,756 --> 1:29:53,976
AR 体验

2643
01:29:56,516 --> 1:29:59,206
[ 掌声 ]

2644
01:29:59,706 --> 1:30:01,566
ARKit 2 的一个

2645
01:29:59,706 --> 1:30:01,566
ARKit 2 的一个

2646
01:30:01,566 --> 1:30:03,576
非常重要的特性是

2647
01:30:03,576 --> 1:30:04,936
支持一致性体验

2648
01:30:05,356 --> 1:30:06,356
你们可以在视频中看到

2649
01:30:06,356 --> 1:30:07,866
我们绘制了一个环境

2650
01:30:07,866 --> 1:30:09,386
然后放置了一个 3D 物体

2651
01:30:10,276 --> 1:30:12,416
这个映射可以被保存

2652
01:30:12,416 --> 1:30:14,196
然后用于识别空间

2653
01:30:14,196 --> 1:30:16,066
并重新定位到

2654
01:30:16,066 --> 1:30:18,776
相同的坐标系中

2655
01:30:18,806 --> 1:30:20,736
而且不仅局限在那个设备上

2656
01:30:20,936 --> 1:30:22,206
你们还可以将这些映射

2657
01:30:22,296 --> 1:30:23,856
共享给其他设备

2658
01:30:23,856 --> 1:30:25,706
从而获得完全相同的体验

2659
01:30:26,396 --> 1:30:27,936
你们将有能力创建出

2660
01:30:27,936 --> 1:30:29,686
能够提供一致性体验的 App

2661
01:30:29,686 --> 1:30:31,586
这意味着

2662
01:30:31,586 --> 1:30:32,446
你们可以多次获得这个体验

2663
01:30:33,366 --> 1:30:34,836
例如 你们可以在家里

2664
01:30:34,836 --> 1:30:36,416
放一个展示家人图片和艺术品的

2665
01:30:36,416 --> 1:30:38,266
AR 图钉板

2666
01:30:38,856 --> 1:30:41,096
而且你们可以 在不使用云的情况下

2667
01:30:41,096 --> 1:30:42,726
分享这些映射

2668
01:30:43,186 --> 1:30:45,046
你们的设备可以

2669
01:30:45,226 --> 1:30:48,416
进行本地端对端分享

2670
01:30:49,206 --> 1:30:50,596
我们提供的另一个功能是

2671
01:30:50,596 --> 1:30:51,916
你们将可以实时

2672
01:30:51,916 --> 1:30:55,006
分享这些映射

2673
01:30:55,866 --> 1:30:57,596
这让你们可以创建

2674
01:30:57,926 --> 1:31:00,036
多人 AR 游戏

2675
01:30:57,926 --> 1:31:00,036
多人 AR 游戏

2676
01:31:00,746 --> 1:31:02,376
为了测验这项功能

2677
01:31:02,376 --> 1:31:04,126
我们创建了一个新的游戏

2678
01:31:04,126 --> 1:31:04,816
叫做《SwiftShot》

2679
01:31:05,226 --> 1:31:07,076
我将用一个视频

2680
01:31:07,076 --> 1:31:08,556
向你们展示

2681
01:31:09,516 --> 1:31:45,186
[ 音乐 ]

2682
01:31:45,686 --> 1:31:47,286
《SwiftShot》是一款非常棒的游戏

2683
01:31:47,286 --> 1:31:48,546
我们也将它带到了今天的展会中

2684
01:31:48,546 --> 1:31:49,806
如果你们还没有机会体验

2685
01:31:49,806 --> 1:31:51,416
我们提供了一个 AR 游戏区

2686
01:31:51,606 --> 1:31:53,636
我们希望与您共享它

2687
01:31:53,636 --> 1:31:54,806
因此你们可以

2688
01:31:54,806 --> 1:31:56,396
凭开放许可证

2689
01:31:56,396 --> 1:31:58,926
下载完整的源代码

2690
01:31:58,926 --> 1:32:00,496
你们可以测试它

2691
01:31:58,926 --> 1:32:00,496
你们可以测试它

2692
01:32:00,496 --> 1:32:01,256
并根据需要进行修改

2693
01:32:01,256 --> 1:32:02,056
我们迫不及待地想看看

2694
01:32:02,056 --> 1:32:03,646
你们在《SwiftShot》上所做的创意

2695
01:32:05,046 --> 1:32:08,376
这就是 ARKit 2

2696
01:32:08,376 --> 1:32:10,616
改进的脸部跟踪

2697
01:32:10,616 --> 1:32:13,186
环境纹理贴图

2698
01:32:13,186 --> 1:32:15,696
图像检测和跟踪

2699
01:32:16,146 --> 1:32:18,566
3D 物体检测

2700
01:32:18,566 --> 1:32:20,726
一致性体验以及多用户体验

2701
01:32:21,786 --> 1:32:23,926
它与整个操作系统

2702
01:32:23,956 --> 1:32:26,106
的 USDZ 相结合

2703
01:32:26,106 --> 1:32:28,766
使 iOS 12 成为迄今为止

2704
01:32:28,766 --> 1:32:29,926
最强大的 AR 平台

2705
01:32:30,326 --> 1:32:31,756
我们很高兴今天能把这项技术 展示给你们

2706
01:32:31,756 --> 1:32:33,216
而且迫不及待地想知道

2707
01:32:33,216 --> 1:32:34,706
你们会创造出怎么样的成果

2708
01:32:35,426 --> 1:32:37,176
请允许我请回 Sebastian

2709
01:32:37,416 --> 1:32:37,786
谢谢大家

2710
01:32:38,516 --> 1:32:42,726
[ 掌声 ]

2711
01:32:43,226 --> 1:32:43,996
&gt;&gt; 谢谢 Mike

2712
01:32:45,156 --> 1:32:47,946
我想我们今天看到了

2713
01:32:47,946 --> 1:32:49,556
很多令人激动的新技术

2714
01:32:49,556 --> 1:32:50,636
我希望你们对此

2715
01:32:50,636 --> 1:32:52,216
感到十分兴奋

2716
01:32:53,076 --> 1:32:54,716
我们让利用机器学习

2717
01:32:54,716 --> 1:32:56,406
变得更容易

2718
01:32:56,406 --> 1:32:58,456
用 ARKit 构建新的出色体验

2719
01:32:58,456 --> 1:32:59,666
用 Metal 进行高性能图形处理

2720
01:32:59,716 --> 1:33:01,546
借助深色模式

2721
01:32:59,716 --> 1:33:01,546
借助深色模式

2722
01:33:01,546 --> 1:33:02,946
推进了 Mac 发展的一大步

2723
01:33:02,946 --> 1:33:04,156
我知道你们对此都无比的喜欢

2724
01:33:04,156 --> 1:33:05,916
这一切都得益于

2725
01:33:05,916 --> 1:33:07,136
我们的开发工具的巨大进步

2726
01:33:07,136 --> 1:33:09,366
这些工具使得我们

2727
01:33:09,366 --> 1:33:10,526
能够充分利用这些

2728
01:33:10,696 --> 1:33:12,236
非常强大的技术

2729
01:33:12,916 --> 1:33:15,026
我们还讨论了

2730
01:33:15,066 --> 1:33:17,156
应该如何专注于

2731
01:33:17,156 --> 1:33:18,966
对用户最重要的东西

2732
01:33:20,056 --> 1:33:21,286
所有这些优秀的技术和工具

2733
01:33:21,286 --> 1:33:23,216
都可以在今天作为开发人员预览版

2734
01:33:23,216 --> 1:33:26,716
供 WWDC 与会者帐户使用

2735
01:33:26,716 --> 1:33:27,986
有没有人已经开始下载了

2736
01:33:29,286 --> 1:33:29,826
没有几个人吗

2737
01:33:29,826 --> 1:33:31,276
好吧 你们得抓紧时间了

2738
01:33:31,526 --> 1:33:32,666
这个发布可是限量的

2739
01:33:34,966 --> 1:33:36,556
请尽快开始下载

2740
01:33:36,556 --> 1:33:37,456
请尽快开始下载

2741
01:33:37,816 --> 1:33:40,146
同时 请充分利用这一周

2742
01:33:40,146 --> 1:33:41,636
在这次大会上

2743
01:33:41,736 --> 1:33:42,906
我们将会举办超过 100 个讨论会

2744
01:33:42,906 --> 1:33:44,636
深入探讨所有这些主题

2745
01:33:45,126 --> 1:33:46,336
它们都是十分精彩的讨论会

2746
01:33:46,706 --> 1:33:48,106
我们还建议你们

2747
01:33:48,106 --> 1:33:49,976
充分利用我们所有的实验室

2748
01:33:49,976 --> 1:33:51,276
因为你们可以

2749
01:33:51,276 --> 1:33:52,456
从在场的许多

2750
01:33:52,456 --> 1:33:53,986
Apple 工程师那里得到帮助

2751
01:33:54,266 --> 1:33:56,306
他们将回答你们的所有问题

2752
01:33:57,206 --> 1:33:59,906
我希望你们能享受这次的大会

2753
01:33:59,906 --> 1:34:01,996
期待着本周能与你们见面

2754
01:33:59,906 --> 1:34:01,996
期待着本周能与你们见面

2755
01:34:02,166 --> 1:34:02,586
谢谢大家

2756
01:34:03,508 --> 1:34:05,508
[ 掌声 ]
