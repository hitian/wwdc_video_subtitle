1
00:00:17,784 --> 0:00:21,488
（watchOS新特性

2
00:00:23,123 --> 0:00:24,124
嗨

3
00:00:28,595 --> 0:00:29,463
大家好

4
00:00:31,231 --> 0:00:35,269
下午好 感谢你们参加

5
00:00:35,903 --> 0:00:38,772
本次演讲中

6
00:00:38,839 --> 0:00:42,009
让开发人员、设计师

7
00:00:42,075 --> 0:00:44,978
和产品主管可以利用这些特性

8
00:00:45,045 --> 0:00:46,647
为用户提供良好的使用体验

9
00:00:46,880 --> 0:00:49,650
我们还会深入了解

10
00:00:49,716 --> 0:00:51,318
的细节内容

11
00:00:52,019 --> 0:00:53,520
我是Lori Hylan-Cho

12
00:00:53,820 --> 0:00:57,257
我是Watch框架开发团队成员

13
00:00:57,324 --> 0:00:59,526
和大家分享一些新特性

14
00:00:59,593 --> 0:01:02,763
这些特性能帮助watchOS 5

15
00:00:59,593 --> 0:01:02,763
这些特性能帮助watchOS 5

16
00:01:04,831 --> 0:01:08,335
自从2015年以来

17
00:01:08,969 --> 0:01:12,339
良好的手表体验涉及到多个方面

18
00:01:12,406 --> 0:01:14,775
Watch app是其中的

19
00:01:15,809 --> 0:01:20,647
通知、信息推送

20
00:01:20,714 --> 0:01:24,551
提供流畅的手表体验

21
00:01:24,618 --> 0:01:27,487
在合适的时间

22
00:01:29,056 --> 0:01:30,757
当然Series 3手表

23
00:01:30,824 --> 0:01:33,627
支持蜂窝网络新的Wi-Fi选项

24
00:01:33,694 --> 0:01:36,129
让你能够直接通过手表上网

25
00:01:36,196 --> 0:01:39,366
越来越多的穿戴式手表

26
00:01:39,700 --> 0:01:42,936
因此必须提供完整的手表体验

27
00:01:44,004 --> 0:01:46,840
让我们来看看

28
00:01:46,907 --> 0:01:50,110
它们帮助你提供良好的手表体验

29
00:01:53,080 --> 0:01:56,116
问Apple Watch任何用户

30
00:01:56,183 --> 0:01:59,119
他们首先想到的功能之一

31
00:01:59,620 --> 0:02:01,955
今年我们进一步

32
00:01:59,620 --> 0:02:01,955
今年我们进一步

33
00:02:02,022 --> 0:02:03,624
加入一些重要改进

34
00:02:05,826 --> 0:02:08,395
从watchOS 1开始

35
00:02:08,461 --> 0:02:10,697
创建动态通知

36
00:02:10,764 --> 0:02:13,600
但是当通知到达时

37
00:02:14,301 --> 0:02:16,203
可能会永远错过它

38
00:02:16,270 --> 0:02:19,373
因为Notification Center

39
00:02:20,007 --> 0:02:22,976
这样设计的目的

40
00:02:23,043 --> 0:02:24,511
相比于在Notification Center显示

41
00:02:24,578 --> 0:02:27,047
有更多的时间显示通知

42
00:02:28,949 --> 0:02:33,320
在watchOS 5中 我们将尽

43
00:02:33,787 --> 0:02:37,357
而不需要你们更改代码

44
00:02:38,292 --> 0:02:40,894
我们努力让它变得更好

45
00:02:41,261 --> 0:02:43,330
而且也能够在Notification Center

46
00:02:43,397 --> 0:02:45,899
显示动态通知

47
00:02:45,966 --> 0:02:48,302
接下来我要介绍两个特性

48
00:02:50,304 --> 0:02:52,806
第一个是分组通知

49
00:02:53,440 --> 0:02:56,743
你可能已经知道

50
00:02:56,810 --> 0:02:59,847
多个类别和不同的通知界面

51
00:03:00,080 --> 0:03:03,717
你们可能已经设定了

52
00:03:03,784 --> 0:03:05,819
从iOS发送通知到手表

53
00:03:07,855 --> 0:03:09,790
在watchOS 5中

54
00:03:09,857 --> 0:03:12,960
在Notification Center自动分组通知

55
00:03:13,026 --> 0:03:14,628
上幅幻灯片已经展示这一点

56
00:03:15,662 --> 0:03:20,234
指定类别和线程ID

57
00:03:21,802 --> 0:03:24,805
即获得与内置信息app

58
00:03:24,872 --> 0:03:27,140
当原始通知显示在屏幕上时

59
00:03:27,207 --> 0:03:29,710
具有相同线程ID的新通知到达时

60
00:03:30,143 --> 0:03:32,412
会被追加到现有界面

61
00:03:33,413 --> 0:03:36,083
这种分组操作是可选的

62
00:03:36,149 --> 0:03:37,918
让你能够使用同一个通知接口控制器

63
00:03:37,985 --> 0:03:41,388
多次调用句柄

64
00:03:43,957 --> 0:03:45,526
要使用这些行为

65
00:03:45,592 --> 0:03:49,263
应该在界面Storyboard中

66
00:03:49,329 --> 0:03:50,397
选择通知类别

67
00:03:51,198 --> 0:03:54,468
在属性检查器中

68
00:03:55,602 --> 0:03:59,540
当原始通知显示在屏幕上时

69
00:03:59,907 --> 0:04:02,543
通知到达

70
00:03:59,907 --> 0:04:02,543
通知到达

71
00:04:02,843 --> 0:04:04,945
将会在现有通知界面控制器上

72
00:04:05,012 --> 0:04:07,681
再次调用

73
00:04:07,915 --> 0:04:10,918
因此 你应该准备

74
00:04:10,984 --> 0:04:15,255
追加内容

75
00:04:15,322 --> 0:04:17,757
在现有标签上显示新的消息正文

76
00:04:17,824 --> 0:04:21,327
或者为表格添加一个行

77
00:04:24,398 --> 0:04:28,802
对于didReceiveNotification

78
00:04:29,536 --> 0:04:32,806
这个版本的completionHandler

79
00:04:34,174 --> 0:04:36,443
从而变得更加简单

80
00:04:37,177 --> 0:04:39,079
这样我们就可以知道

81
00:04:39,146 --> 0:04:41,748
你已经完成通知数据处理

82
00:04:41,815 --> 0:04:44,518
并且准备在屏幕上显示通知

83
00:04:45,352 --> 0:04:48,455
你们应该尽量简单地

84
00:04:48,522 --> 0:04:52,459
显示通知

85
00:04:54,795 --> 0:04:58,198
另外要注意的是

86
00:04:58,265 --> 0:05:01,869
在通知到达时

87
00:04:58,265 --> 0:05:01,869
在通知到达时

88
00:05:02,302 --> 0:05:04,638
如果你处理通知类别的

89
00:05:04,705 --> 0:05:06,206
分组和动态界面

90
00:05:06,273 --> 0:05:10,077
当用户轻点分组和Notification Center时

91
00:05:10,143 --> 0:05:12,713
所有具有相同线程ID的消息

92
00:05:13,714 --> 0:05:16,183
如果该线程上的其他消息到达

93
00:05:16,250 --> 0:05:19,753
将会实时追加这些消息

94
00:05:24,591 --> 0:05:25,659
还有一项重大改进

95
00:05:26,460 --> 0:05:29,763
在watchOS 5中

96
00:05:29,830 --> 0:05:32,132
直接加入app一些特性

97
00:05:32,199 --> 0:05:34,568
在通知中加入一些元素

98
00:05:34,635 --> 0:05:36,937
与内容进行交互

99
00:05:38,972 --> 0:05:43,076
例如 可以让用户

100
00:05:43,143 --> 0:05:45,512
通知用户

101
00:05:45,579 --> 0:05:49,449
延长停车时间

102
00:05:49,516 --> 0:05:51,718
确认订餐

103
00:05:51,785 --> 0:05:54,555
而且还知道

104
00:05:56,823 --> 0:05:58,258
让我们来看看这是如何运作的

105
00:05:58,992 --> 0:06:01,895
如果你要创建

106
00:05:58,992 --> 0:06:01,895
如果你要创建

107
00:06:01,962 --> 0:06:05,799
将会自动为你创建

108
00:06:07,835 --> 0:06:11,371
如果已经为你的通知类别

109
00:06:11,438 --> 0:06:14,675
请在Watch app界面

110
00:06:14,741 --> 0:06:17,744
然后选中“交互式界面”复选框

111
00:06:21,949 --> 0:06:25,085
对于这两种界面

112
00:06:25,152 --> 0:06:27,988
同时 还选中了动态交互选项

113
00:06:28,722 --> 0:06:31,325
在watchOS 5中

114
00:06:31,391 --> 0:06:35,329
将会显示动态界面而且也会在

115
00:06:35,395 --> 0:06:36,530
前面我讲过这一点

116
00:06:37,698 --> 0:06:40,868
早期版本的watchOS

117
00:06:40,934 --> 0:06:43,604
因此你需要保持向后兼容

118
00:06:46,607 --> 0:06:49,243
创建动态交互式界面控制器之后

119
00:06:49,309 --> 0:06:51,278
可以从对象库中添加按钮 开关

120
00:06:51,345 --> 0:06:53,547
和其他交互控件

121
00:06:53,614 --> 0:06:55,582
现在 它们作为弹出菜单

122
00:06:55,649 --> 0:06:56,950
出现在屏幕上

123
00:07:00,687 --> 0:07:03,957
甚至可以为通知添加手势识别功能

124
00:07:04,024 --> 0:07:06,527
但是你应该知道

125
00:07:06,593 --> 0:07:10,564
高于你在同一区域

126
00:07:16,436 --> 0:07:18,805
在设计通知界面之后

127
00:07:18,872 --> 0:07:20,841
在代码中设置交互控件

128
00:07:20,908 --> 0:07:24,778
类似于app中的

129
00:07:25,279 --> 0:07:26,180
在这里可以看到

130
00:07:26,246 --> 0:07:30,217
我在动态交互式界面中

131
00:07:30,284 --> 0:07:32,119
添加向上按钮的操作

132
00:07:32,186 --> 0:07:34,788
每点击按钮一次

133
00:07:34,855 --> 0:07:36,490
时间将会增加15分钟

134
00:07:39,026 --> 0:07:40,594
在点击这些按钮时

135
00:07:40,661 --> 0:07:43,030
你可能已经忘记

136
00:07:43,096 --> 0:07:45,566
始终会启动你的app

137
00:07:46,233 --> 0:07:51,338
对于常规动态和静态通知

138
00:07:51,572 --> 0:07:53,640
但是对于动态交互式通知

139
00:07:53,707 --> 0:07:56,243
我们必须禁止此行为

140
00:07:56,310 --> 0:07:58,045
因为现在我们设置了交互控件

141
00:07:59,079 --> 0:08:01,882
如有必要

142
00:07:59,079 --> 0:08:01,882
如有必要

143
00:08:01,949 --> 0:08:02,850
启动你的app

144
00:08:02,916 --> 0:08:06,019
你必须进行显式操作

145
00:08:06,353 --> 0:08:08,789
performNotification

146
00:08:11,758 --> 0:08:15,028
同样地 如果在通知界面中

147
00:08:15,095 --> 0:08:17,931
这个按钮在接受操作之后

148
00:08:18,198 --> 0:08:19,099
如同本例中所做的那样

149
00:08:19,166 --> 0:08:21,902
我们点击“延长”按钮

150
00:08:21,969 --> 0:08:24,671
延长我的租赁时间并且撤消通知

151
00:08:25,072 --> 0:08:27,708
应该在按钮IB操作函数末尾

152
00:08:27,774 --> 0:08:31,011
调用

153
00:08:34,047 --> 0:08:37,251
还可以使用标准操作按钮

154
00:08:37,317 --> 0:08:38,652
处理更改和通知正文

155
00:08:39,119 --> 0:08:41,889
因为操作按钮始终会撤消通知

156
00:08:43,657 --> 0:08:45,192
等等 你可能在想

157
00:08:45,392 --> 0:08:48,529
所有通知界面共享操作按钮

158
00:08:48,595 --> 0:08:50,764
如果没有交互元素

159
00:08:50,831 --> 0:08:52,733
那么一些按钮可能没有意义

160
00:08:53,534 --> 0:08:57,371
作为watchOS 5中的新特性

161
00:08:57,437 --> 0:08:58,906
显示的操作按钮

162
00:09:01,341 --> 0:09:05,279
通知界面控制器有一个

163
00:09:05,345 --> 0:09:06,747
此属性返回操作数组

164
00:09:06,813 --> 0:09:08,782
并显示给通知

165
00:09:09,249 --> 0:09:13,720
可以在didReceive notification回调中

166
00:09:13,787 --> 0:09:15,956
将这个属性设置为

167
00:09:16,390 --> 0:09:19,293
这让你能够灵活地添加或删除按钮

168
00:09:19,359 --> 0:09:21,161
以满足交互界面需求

169
00:09:23,130 --> 0:09:25,032
在未来版本中

170
00:09:25,098 --> 0:09:27,668
我们将允许

171
00:09:27,734 --> 0:09:29,903
随时更改操作

172
00:09:30,304 --> 0:09:33,340
让你能够根据用户的交互操作

173
00:09:33,407 --> 0:09:35,442
在交互通知界面中

174
00:09:35,509 --> 0:09:37,744
更改操作按钮

175
00:09:40,781 --> 0:09:43,483
因此 通知和通知创建方法

176
00:09:43,550 --> 0:09:45,819
发生了很大的改变

177
00:09:46,753 --> 0:09:49,890
接下来我还要讲两件事情

178
00:09:52,392 --> 0:09:55,062
关键报警是一种新类型的通知

179
00:09:55,128 --> 0:09:58,065
会触发振动和提示音

180
00:09:58,131 --> 0:10:01,134
即使你的手表处于静音免打扰模式

181
00:09:58,131 --> 0:10:01,134
即使你的手表处于静音免打扰模式

182
00:10:01,568 --> 0:10:04,738
因此它们可以用于

183
00:10:05,672 --> 0:10:08,475
如果Watch app

184
00:10:08,542 --> 0:10:12,546
或者用于紧急事件

185
00:10:13,881 --> 0:10:16,683
关键报警需要app授权

186
00:10:17,217 --> 0:10:19,686
并且获得用户的显式许可

187
00:10:19,753 --> 0:10:21,855
以区分于常规通知

188
00:10:24,391 --> 0:10:28,295
与关键报警相反的是静默通知

189
00:10:28,729 --> 0:10:32,566
通知出现在屏幕上时

190
00:10:32,633 --> 0:10:34,101
不会打扰用户

191
00:10:34,468 --> 0:10:38,605
你可以选择直接发送通知到

192
00:10:39,273 --> 0:10:41,675
你会发现将不会显示图标

193
00:10:41,742 --> 0:10:43,710
发送的通知

194
00:10:43,777 --> 0:10:45,812
也位于Notification Center之内

195
00:10:46,647 --> 0:10:49,116
但是 从屏幕上方扫动

196
00:10:49,183 --> 0:10:51,051
将会显示静默发送的通知

197
00:10:56,290 --> 0:10:59,893
如果选择在app中静默发送通知

198
00:10:59,960 --> 0:11:03,530
你不必在app首次启动时

199
00:10:59,960 --> 0:11:03,530
你不必在app首次启动时

200
00:11:03,597 --> 0:11:05,132
提醒用户允许发送通知

201
00:11:05,966 --> 0:11:08,702
相反 你可以请求临时权限

202
00:11:09,369 --> 0:11:12,406
这样 用户将会知道

203
00:11:12,472 --> 0:11:14,808
发送什么类型的通知

204
00:11:14,875 --> 0:11:17,177
以及他们是否想要

205
00:11:19,413 --> 0:11:21,949
作为开发人员

206
00:11:22,015 --> 0:11:26,119
用户都可以控制

207
00:11:26,854 --> 0:11:30,457
可以选择静默发送通知

208
00:11:30,524 --> 0:11:34,061
在Notification Center

209
00:11:34,127 --> 0:11:37,197
或更改通知偏好和设置

210
00:11:41,401 --> 0:11:44,705
总的来说 现在通知变得更加动态

211
00:11:45,105 --> 0:11:48,976
在通知到达时能够看到

212
00:11:49,042 --> 0:11:51,578
看到动态界面

213
00:11:52,379 --> 0:11:56,350
我们还首次在手表上

214
00:11:57,251 --> 0:11:59,786
因此 你可以设计

215
00:11:59,853 --> 0:12:01,255
与内置的消息app一样

216
00:11:59,853 --> 0:12:01,255
与内置的消息app一样

217
00:12:02,556 --> 0:12:04,958
你可以在app发送的通知中

218
00:12:05,025 --> 0:12:07,861
加入更多的app功能

219
00:12:07,928 --> 0:12:10,197
利用交互式控件和操作按钮

220
00:12:10,264 --> 0:12:11,698
可以在运行时定义它们

221
00:12:12,766 --> 0:12:15,302
还可以选择所发送通知的

222
00:12:15,369 --> 0:12:17,471
紧急级别

223
00:12:18,572 --> 0:12:20,741
要了解关于通知的更多信息

224
00:12:22,209 --> 0:12:24,678
可以参加一个演讲

225
00:12:25,145 --> 0:12:27,848
我强烈建议参加

226
00:12:28,115 --> 0:12:30,817
这个演讲将会介绍一些不错的技巧

227
00:12:30,884 --> 0:12:33,153
指导你们设计

228
00:12:36,924 --> 0:12:37,858
好的

229
00:12:37,925 --> 0:12:41,361
我们已经讨论了通知功能

230
00:12:41,428 --> 0:12:43,230
现在让我们把注意力转向

231
00:12:43,297 --> 0:12:46,366
一些新的特性

232
00:12:47,334 --> 0:12:50,103
首先来看本地声音播放

233
00:12:52,039 --> 0:12:55,475
你们一些人曾经尝试过

234
00:12:55,542 --> 0:12:59,246
利用URL会话下载文件到手表

235
00:12:59,313 --> 0:13:02,316
然后使用WKAudioFileQueuePlayer

236
00:12:59,313 --> 0:13:02,316
然后使用WKAudioFileQueuePlayer

237
00:13:03,417 --> 0:13:06,553
在watchOS 5中

238
00:13:06,620 --> 0:13:08,255
音频app开发工作

239
00:13:08,322 --> 0:13:11,024
带来更好的使用体验

240
00:13:13,327 --> 0:13:16,163
在watchOS 5中

241
00:13:16,230 --> 0:13:18,165
用于播放本地音乐文件

242
00:13:18,532 --> 0:13:21,768
现在你可以专注于app的主要用途

243
00:13:21,835 --> 0:13:25,772
即音频

244
00:13:25,939 --> 0:13:29,109
单纯的音频播放app

245
00:13:35,382 --> 0:13:39,486
我们还提供直接AVAudioPlayer

246
00:13:39,553 --> 0:13:41,855
这意味着你可以使用

247
00:13:41,922 --> 0:13:43,357
方法和属性

248
00:13:43,423 --> 0:13:46,326
如果你开发iOS音频播放app

249
00:13:46,827 --> 0:13:50,831
事实上 你可以在

250
00:13:50,898 --> 0:13:53,634
通过将回放相关代码

251
00:13:55,002 --> 0:13:57,171
不同于iOS的是

252
00:13:58,172 --> 0:14:00,440
在手表上播放长格式音频

253
00:13:58,172 --> 0:14:00,440
在手表上播放长格式音频

254
00:14:00,507 --> 0:14:04,545
需要耳机或外置扬声器

255
00:14:04,611 --> 0:14:07,181
与内置音乐app播放音频一样

256
00:14:08,248 --> 0:14:12,419
因此 蓝牙路由

257
00:14:12,486 --> 0:14:15,822
如果将路由共享规则设置为长格式

258
00:14:17,257 --> 0:14:21,128
将会通过Apple无线芯片

259
00:14:21,195 --> 0:14:23,797
例如AirPods

260
00:14:24,064 --> 0:14:25,365
如果它们正在使用之中

261
00:14:25,699 --> 0:14:29,269
将会显示一个路由选择器

262
00:14:29,336 --> 0:14:30,671
或蓝牙扬声器

263
00:14:30,737 --> 0:14:34,374
当你在会话中调用activateWithOptions

264
00:14:34,441 --> 0:14:35,342
这是一项新特性

265
00:14:38,278 --> 0:14:41,381
也可以使用

266
00:14:41,448 --> 0:14:43,283
将app的播放信息

267
00:14:43,584 --> 0:14:45,919
推送给

268
00:14:45,986 --> 0:14:50,157
这意味着 你的app信息将会显示在

269
00:14:53,260 --> 0:14:55,062
你可以处理你的app

270
00:14:55,128 --> 0:14:56,563
媒体远程控制指令

271
00:14:56,763 --> 0:14:58,298
例如播放 暂停

272
00:14:58,632 --> 0:15:00,033
上一曲 下一曲

273
00:14:58,632 --> 0:15:00,033
上一曲 下一曲

274
00:15:00,267 --> 0:15:02,102
甚至点赞和吐槽

275
00:15:05,405 --> 0:15:06,440
最后同样重要的是

276
00:15:06,507 --> 0:15:10,577
现在可以在你的自定义

277
00:15:10,978 --> 0:15:12,646
界面构建器对象库中

278
00:15:13,113 --> 0:15:15,883
提供新的音量控制视图

279
00:15:19,686 --> 0:15:23,624
在静止时 控件自动使用

280
00:15:23,690 --> 0:15:26,026
当转动数码表冠时

281
00:15:26,193 --> 0:15:27,895
会响应系统音量

282
00:15:27,961 --> 0:15:29,429
控制中的颜色变化

283
00:15:32,332 --> 0:15:36,670
有一个演讲专门介绍

284
00:15:36,737 --> 0:15:41,475
强烈建议你们参加此演讲

285
00:15:41,542 --> 0:15:43,744
最佳的音频处理方法

286
00:15:44,278 --> 0:15:46,813
我们还准备在星期四

287
00:15:46,880 --> 0:15:50,117
讨论watchOS运行时

288
00:15:52,753 --> 0:15:55,722
如果app的主要功能不是播放音频

289
00:15:55,789 --> 0:15:58,759
但是你的app将受益于

290
00:15:58,825 --> 0:16:00,360
控制音频的功能

291
00:15:58,825 --> 0:16:00,360
控制音频的功能

292
00:16:00,561 --> 0:16:02,462
无论是在Watch或手机上

293
00:16:03,497 --> 0:16:06,600
比如在锻炼app中

294
00:16:06,667 --> 0:16:08,168
看到nowPlaying控件

295
00:16:08,702 --> 0:16:12,206
现在你们能够将

296
00:16:12,272 --> 0:16:14,408
嵌入你们的app

297
00:16:16,643 --> 0:16:19,012
你可以在对象库

298
00:16:19,079 --> 0:16:20,214
nowPlayingView

299
00:16:20,914 --> 0:16:23,016
它将会铺满屏幕

300
00:16:23,083 --> 0:16:25,419
适应各种页面布局app

301
00:16:26,687 --> 0:16:29,089
nowPlayingView

302
00:16:29,156 --> 0:16:32,092
用于控制来自于其它app的音频

303
00:16:32,159 --> 0:16:34,761
它会显示用户正在听什么

304
00:16:34,828 --> 0:16:36,830
在Apple Watch

305
00:16:39,867 --> 0:16:42,936
这里我想介绍其他一些新选项

306
00:16:43,003 --> 0:16:44,671
和行为变化

307
00:16:45,305 --> 0:16:49,476
在以前版本的watchOS中

308
00:16:49,543 --> 0:16:53,080
但是忘记为42毫米设备

309
00:16:53,447 --> 0:16:55,949
大尺寸设备上将会丢失资产

310
00:16:56,683 --> 0:16:59,987
现在 资产将会自动

311
00:17:00,053 --> 0:17:02,489
如果没有42毫米尺寸

312
00:17:04,223 --> 0:17:07,895
也不需要提供不同的尺寸

313
00:17:07,961 --> 0:17:11,098
相反 你只需要

314
00:17:11,164 --> 0:17:14,367
在资产类型全局选择中

315
00:17:14,434 --> 0:17:17,905
将新的“自动缩放”选项

316
00:17:23,877 --> 0:17:27,047
这样 将会在合适的时间

317
00:17:27,114 --> 0:17:28,248
和合适的位置

318
00:17:30,651 --> 0:17:34,988
我们还在字体菜单中提供

319
00:17:35,055 --> 0:17:38,392
以多样化显示界面文本

320
00:17:39,226 --> 0:17:42,095
这些文本样式兼容动态字体格式

321
00:17:42,162 --> 0:17:44,364
可以变大或变小

322
00:17:44,431 --> 0:17:48,035
用户可以更改字体大小和设置

323
00:17:49,970 --> 0:17:53,607
我们通过界面生成器和API

324
00:17:53,674 --> 0:17:54,808
大标题样式

325
00:17:58,779 --> 0:18:01,915
我在开发一个滑雪锻炼app

326
00:17:58,779 --> 0:18:01,915
我在开发一个滑雪锻炼app

327
00:18:01,982 --> 0:18:04,117
正好可以借此机会讨论

328
00:18:04,184 --> 0:18:06,286
我们针对watchOS 5

329
00:18:07,521 --> 0:18:10,457
在本版本中 我们完全重写了

330
00:18:10,524 --> 0:18:14,061
使它变得更简单

331
00:18:14,461 --> 0:18:17,631
我们通过一个内置

332
00:18:18,565 --> 0:18:21,134
希望你们的锻炼app也使用它

333
00:18:23,370 --> 0:18:27,541
现在 更容易开始锻炼和收集数据

334
00:18:27,608 --> 0:18:30,777
在HK锻炼会话中

335
00:18:30,844 --> 0:18:32,746
使用新的初始化函数

336
00:18:32,813 --> 0:18:34,548
新的Workout Builder API

337
00:18:36,016 --> 0:18:37,551
创建锻炼会话

338
00:18:38,252 --> 0:18:41,655
从会话中获得生成器

339
00:18:42,022 --> 0:18:43,223
就是这么简单

340
00:18:44,424 --> 0:18:47,461
代码是这样的

341
00:18:47,528 --> 0:18:50,063
你使用healthStore

342
00:18:50,130 --> 0:18:51,899
和workoutConfiguration

343
00:18:51,965 --> 0:18:53,600
包括活动类别

344
00:18:54,935 --> 0:18:58,572
获取与会话关联的

345
00:18:59,373 --> 0:19:00,741
然后开始收集数据

346
00:18:59,373 --> 0:19:00,741
然后开始收集数据

347
00:19:02,042 --> 0:19:05,779
将会自动收集锻炼相关数据

348
00:19:05,846 --> 0:19:08,248
即使发生暂停和恢复

349
00:19:08,315 --> 0:19:12,186
从而提供正确和一致的

350
00:19:12,252 --> 0:19:13,921
以及正确的锻炼时间

351
00:19:16,323 --> 0:19:18,292
任何app都不是完美的

352
00:19:18,692 --> 0:19:21,828
如果在活跃锻炼会话期间

353
00:19:21,895 --> 0:19:23,797
将会自动重新启动

354
00:19:28,268 --> 0:19:31,972
只需使用HKHealthStore

355
00:19:32,039 --> 0:19:32,873
API

356
00:19:32,940 --> 0:19:37,477
会话和生成器

357
00:19:40,314 --> 0:19:42,916
如果想要详细了解

358
00:19:42,983 --> 0:19:45,686
以及健康和健身数据收集方法

359
00:19:45,752 --> 0:19:47,988
可以查阅

360
00:19:48,255 --> 0:19:52,059
或参加明天下午的健康和

361
00:19:54,995 --> 0:19:55,896
接下来

362
00:19:56,063 --> 0:19:57,764
通过使用

363
00:19:57,831 --> 0:20:00,501
现在你的app

364
00:19:57,831 --> 0:20:00,501
现在你的app

365
00:20:01,435 --> 0:20:02,936
在Keynote演讲中已经讲过

366
00:20:03,070 --> 0:20:06,006
Siri Shortcuts

367
00:20:06,073 --> 0:20:09,443
他们经常执行的任务

368
00:20:10,944 --> 0:20:14,014
在Siri表盘上…常用任务

369
00:20:14,081 --> 0:20:15,782
出现在合适的位置和时间

370
00:20:15,916 --> 0:20:18,685
开发人员只需要很少的工作

371
00:20:19,586 --> 0:20:21,488
我想重点介绍

372
00:20:21,555 --> 0:20:24,892
来提供良好的手表体验

373
00:20:24,958 --> 0:20:27,227
是否安装了app

374
00:20:29,463 --> 0:20:31,932
首先来看

375
00:20:33,166 --> 0:20:36,403
顾名思义 快捷方式是

376
00:20:36,503 --> 0:20:40,107
看到有用的信息

377
00:20:40,674 --> 0:20:41,842
无论任务是否会

378
00:20:41,909 --> 0:20:44,344
在特定屏幕上启动app

379
00:20:44,845 --> 0:20:47,648
或获得令人满意的app执行结果

380
00:20:47,714 --> 0:20:51,418
例如订购早餐咖啡

381
00:20:51,485 --> 0:20:53,587
或补充你的巧克力供应

382
00:20:54,721 --> 0:20:58,392
信息一目了然

383
00:21:00,928 --> 0:21:04,364
快捷方式以用户活动或

384
00:21:05,032 --> 0:21:07,568
如果需要启动app

385
00:21:07,634 --> 0:21:10,037
例如 直接进入屏幕界面

386
00:21:10,571 --> 0:21:12,239
记录他们的饮食量

387
00:21:12,306 --> 0:21:14,408
这时适合使用

388
00:21:14,474 --> 0:21:15,876
基于用户活动的快捷方式

389
00:21:18,111 --> 0:21:20,314
对于不需要启动app的任务

390
00:21:20,380 --> 0:21:23,717
例如 经常性的咖啡订购

391
00:21:23,784 --> 0:21:25,953
则更适合使用

392
00:21:26,887 --> 0:21:28,822
如果你的快捷方式是基于意图的

393
00:21:28,889 --> 0:21:31,825
当你在Siri界面上

394
00:21:31,892 --> 0:21:33,927
将会显示快速确认屏幕

395
00:21:34,795 --> 0:21:36,563
你想要订购咖啡吗？

396
00:21:37,197 --> 0:21:39,600
如果支持后台运行

397
00:21:39,666 --> 0:21:42,903
在用户确认后

398
00:21:43,437 --> 0:21:46,240
如果不支持后台运行

399
00:21:46,306 --> 0:21:47,608
执行你的意图

400
00:21:50,010 --> 0:21:52,379
在预测快捷方式的显示内容时

401
00:21:52,446 --> 0:21:55,716
考虑了用户以往的app交互方式

402
00:21:56,316 --> 0:21:58,719
在用户执行app的主要功能时

403
00:21:58,785 --> 0:22:01,388
你应该记录用户的意图或操作

404
00:21:58,785 --> 0:22:01,388
你应该记录用户的意图或操作

405
00:22:02,089 --> 0:22:06,493
像Audible这样的音频app

406
00:22:06,560 --> 0:22:10,764
当用户开始或播放音频列表时

407
00:22:13,934 --> 0:22:17,404
Siri表盘上的快捷方式界面

408
00:22:17,604 --> 0:22:21,108
最相关的项目显示在最上方

409
00:22:21,175 --> 0:22:22,943
不相关的项目显示在下方

410
00:22:24,878 --> 0:22:28,182
以往的用户交互意图

411
00:22:28,582 --> 0:22:30,083
以及记录的用户活动

412
00:22:30,150 --> 0:22:33,987
都会用于搜索和预测

413
00:22:34,388 --> 0:22:35,556
并且表明相关性

414
00:22:36,190 --> 0:22:38,058
但是 如果要显示在Siri表盘上

415
00:22:38,125 --> 0:22:40,527
必须提供明确的系统提示

416
00:22:40,594 --> 0:22:42,729
通过创建相关的快捷方式

417
00:22:42,996 --> 0:22:44,498
告知在什么时候

418
00:22:47,034 --> 0:22:48,435
相关快捷方式包括

419
00:22:48,502 --> 0:22:51,238
基于用户活动或意图的

420
00:22:51,605 --> 0:22:55,042
一个可选的手表模板

421
00:22:55,108 --> 0:22:57,511
标题、副标题和图片

422
00:22:58,178 --> 0:23:01,849
和一个相关性解释器

423
00:22:58,178 --> 0:23:01,849
和一个相关性解释器

424
00:23:01,915 --> 0:23:05,185
或情况下

425
00:23:07,554 --> 0:23:10,724
我们已经讨论基于

426
00:23:10,791 --> 0:23:13,861
现在来看相关性快捷方式

427
00:23:16,296 --> 0:23:20,067
手表模块是一个可选的

428
00:23:20,133 --> 0:23:24,137
包括标题、可选标题和可选图片

429
00:23:24,905 --> 0:23:28,842
如果你不提供手表模板

430
00:23:28,909 --> 0:23:30,310
提供必要的信息

431
00:23:30,577 --> 0:23:34,281
但是你应该提供信息字符串

432
00:23:34,348 --> 0:23:37,851
这样 当用户点击快捷方式盘面时

433
00:23:40,721 --> 0:23:44,591
相关性解释器说明

434
00:23:44,658 --> 0:23:46,560
快捷方式最具有价值

435
00:23:47,594 --> 0:23:50,731
考虑一下在什么时候和地点

436
00:23:51,131 --> 0:23:55,335
是用户随时需要查看

437
00:23:56,003 --> 0:23:58,472
还是仅在特定日期和时间

438
00:23:59,173 --> 0:24:00,874
或者与位置有关？

439
00:23:59,173 --> 0:24:00,874
或者与位置有关？

440
00:24:02,776 --> 0:24:05,846
由于相关性快捷方式

441
00:24:06,213 --> 0:24:08,682
因此可以指定多种相关性

442
00:24:09,016 --> 0:24:13,187
例如 可以为快捷方式

443
00:24:15,722 --> 0:24:19,193
这些相关性解释器会提醒系统

444
00:24:19,660 --> 0:24:21,695
当用户与你的内容交互时

445
00:24:21,995 --> 0:24:24,131
系统会记录用户的操作

446
00:24:24,798 --> 0:24:27,201
如果用户没有与Siri界面上

447
00:24:27,267 --> 0:24:30,137
进行交互

448
00:24:32,840 --> 0:24:34,474
在你创建快捷方式后

449
00:24:34,541 --> 0:24:37,811
接下来需要把它们放入

450
00:24:37,945 --> 0:24:40,414
Siri表盘将选择性使用它们

451
00:24:41,415 --> 0:24:45,819
iOS app和Watch app

452
00:24:46,887 --> 0:24:50,924
iOS相关性快捷方式定期

453
00:24:51,325 --> 0:24:54,828
在显示手表相关快捷方式时

454
00:24:56,029 --> 0:24:58,465
如果你的手表支持iOS快捷方式

455
00:24:58,665 --> 0:25:00,501
Watch app将会处理执行

456
00:24:58,665 --> 0:25:00,501
Watch app将会处理执行

457
00:25:01,235 --> 0:25:04,171
如果不支持

458
00:25:05,706 --> 0:25:08,575
将通过英特网

459
00:25:11,411 --> 0:25:15,182
相关性快捷方式

460
00:25:15,249 --> 0:25:20,320
而不需要watchOS支持

461
00:25:20,721 --> 0:25:22,456
并且支持后台运行

462
00:25:22,756 --> 0:25:25,225
可以运行 而不需要

463
00:25:25,526 --> 0:25:26,727
访问单独的加密数据

464
00:25:28,095 --> 0:25:32,266
再次说明 这些快捷方式将会

465
00:25:32,733 --> 0:25:35,636
Watch app始终能够带来

466
00:25:35,702 --> 0:25:37,504
可以本地处理快捷方式

467
00:25:37,804 --> 0:25:39,273
通过启动app

468
00:25:39,473 --> 0:25:42,009
或者在后台执行意图

469
00:25:44,144 --> 0:25:47,114
你应该定期更新

470
00:25:47,681 --> 0:25:49,316
如果用户启动你的app

471
00:25:49,750 --> 0:25:52,452
例如在Siri界面

472
00:25:53,053 --> 0:25:55,622
运行时将会完成更新

473
00:25:56,323 --> 0:25:58,458
提供即视信息的快捷方式

474
00:25:58,525 --> 0:26:00,861
对于用户来说很有用

475
00:25:58,525 --> 0:26:00,861
对于用户来说很有用

476
00:26:01,228 --> 0:26:04,331
回忆一下前面的饮食

477
00:26:04,598 --> 0:26:05,632
只需要看一下表盘

478
00:26:05,699 --> 0:26:08,669
就可知道温度是72度 多云

479
00:26:08,902 --> 0:26:09,736
不必进行点击

480
00:26:11,238 --> 0:26:12,573
为了更好实现这个功能

481
00:26:12,906 --> 0:26:15,075
我们添加了一个后台刷新任务：

482
00:26:15,142 --> 0:26:18,111
WKRelevantShortcut

483
00:26:19,179 --> 0:26:22,783
当你使用此任务时

484
00:26:22,850 --> 0:26:26,119
然后提供新的相关性快捷方式

485
00:26:27,421 --> 0:26:29,423
在安排这些后台任务时

486
00:26:29,489 --> 0:26:31,391
我们会考虑用户活动

487
00:26:31,625 --> 0:26:35,095
和信息查看次数

488
00:26:38,699 --> 0:26:42,703
如果基于意图的快捷方式

489
00:26:42,769 --> 0:26:45,072
快捷方式的意图

490
00:26:46,540 --> 0:26:49,710
由于意图扩展是一个独立于

491
00:26:49,776 --> 0:26:51,178
WatchKit扩展的过程

492
00:26:51,445 --> 0:26:54,748
现在我们提供一个

493
00:26:54,815 --> 0:26:57,985
WKIntentDidRun

494
00:26:58,418 --> 0:27:02,656
以运行你的主扩展

495
00:26:58,418 --> 0:27:02,656
以运行你的主扩展

496
00:27:02,723 --> 0:27:06,293
更新任何可能过时的快照或通知内容

497
00:27:09,029 --> 0:27:12,766
现在 只需要转动手腕

498
00:27:13,867 --> 0:27:16,737
你应该知道 用户可以在

499
00:27:16,803 --> 0:27:19,339
使用它们随时执行快捷方式

500
00:27:20,507 --> 0:27:23,076
这些快捷方式短语

501
00:27:23,143 --> 0:27:25,946
这样你可以进行方便的操作

502
00:27:26,013 --> 0:27:28,715
比如说 在菲尔咖啡

503
00:27:28,782 --> 0:27:31,785
订购薄荷味莫吉托咖啡

504
00:27:33,220 --> 0:27:36,690
不需要在Siri表盘上显示

505
00:27:36,857 --> 0:27:39,660
就可以使用快捷方式短语

506
00:27:41,662 --> 0:27:46,300
总结一下 你们可以使用

507
00:27:46,366 --> 0:27:48,302
提供相关的信息

508
00:27:49,236 --> 0:27:52,973
在iPhone和Apple Watch上

509
00:27:53,040 --> 0:27:54,508
将它们添加到快捷方式库

510
00:27:54,575 --> 0:27:56,777
从而可以在Siri表盘上

511
00:27:57,644 --> 0:28:02,049
最后 你的watchOS app

512
00:27:57,644 --> 0:28:02,049
最后 你的watchOS app

513
00:28:02,649 --> 0:28:05,853
他们能够在手表上

514
00:28:07,688 --> 0:28:09,890
如果想要详细了解

515
00:28:10,457 --> 0:28:13,493
建议你们观看一个演讲或实验室

516
00:28:14,361 --> 0:28:18,298
尤其是关于Siri表盘上的

517
00:28:18,365 --> 0:28:22,035
此演讲更详细地讲解

518
00:28:24,771 --> 0:28:26,940
今天我们讲了很多的内容

519
00:28:27,641 --> 0:28:28,575
这是我们讲过的内容

520
00:28:29,343 --> 0:28:33,580
希望你们通过创建

521
00:28:33,814 --> 0:28:37,518
使你们的通知更有吸引力

522
00:28:38,585 --> 0:28:41,021
现在 使用AV基础API

523
00:28:41,088 --> 0:28:44,391
可以在后台播放音频

524
00:28:44,458 --> 0:28:46,159
访问nowPlaying信息

525
00:28:47,461 --> 0:28:49,997
利用新的

526
00:28:50,063 --> 0:28:52,032
可以增强锻炼app的可靠性

527
00:28:52,933 --> 0:28:55,502
通过创建相关性快捷方式

528
00:28:55,569 --> 0:28:57,471
可以在Siri表盘上

529
00:28:59,940 --> 0:29:02,676
如果对今天的内容

530
00:28:59,940 --> 0:29:02,676
如果对今天的内容

531
00:29:03,043 --> 0:29:05,012
或你的watchOS开发工作

532
00:29:05,412 --> 0:29:08,348
有任何疑问

533
00:29:08,715 --> 0:29:10,684
我们想要看看你在做些什么

534
00:29:11,051 --> 0:29:13,887
欢迎来访
