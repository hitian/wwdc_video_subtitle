1
00:00:17,417 --> 0:00:22,856
（LLVM新特性 演讲409）

2
00:00:27,427 --> 0:00:30,297
早上好 欢迎来到

3
00:00:31,265 --> 0:00:33,901
我是Jim Grosbach

4
00:00:33,967 --> 0:00:38,805
今天在我们将深入了解

5
00:00:38,872 --> 0:00:41,008
新事物的技术细节之前

6
00:00:41,074 --> 0:00:44,311
关于LLVM的背景知识

7
00:00:45,379 --> 0:00:49,716
首先 LLVM不仅仅是编译器

8
00:00:50,217 --> 0:00:53,153
它是Clang编译器

9
00:00:53,220 --> 0:00:56,089
和我们每天都使用的C族语言的背景

10
00:00:56,456 --> 0:01:01,929
它也为静态分析器 杀毒软件

11
00:00:56,456 --> 0:01:01,929
它也为静态分析器 杀毒软件

12
00:01:02,362 --> 0:01:05,232
并且是GPU着色器编译器下的

13
00:01:05,498 --> 0:01:11,171
所有Apple移动平台的

14
00:01:11,939 --> 0:01:16,343
除此之外

15
00:01:16,410 --> 0:01:19,813
一个叫做Swift的额外小项目

16
00:01:21,014 --> 0:01:24,918
和Swift一样

17
00:01:26,353 --> 0:01:30,557
我们都在我们的LLVM

18
00:01:30,824 --> 0:01:32,826
他通常是个很友好的家伙

19
00:01:32,893 --> 0:01:35,863
不过我得提醒你

20
00:01:35,963 --> 0:01:38,165
他可能会变得有点暴躁

21
00:01:39,499 --> 0:01:43,303
作为一个开源项目

22
00:01:44,137 --> 0:01:47,341
我们与来自世界各地

23
00:01:47,407 --> 0:01:50,677
不同行业的合作伙

24
00:01:50,744 --> 0:01:56,483
还有世界各地更多的人

25
00:01:56,583 --> 0:01:59,319
这真是太棒了

26
00:01:59,386 --> 0:02:02,089
创造出最伟大的工具

27
00:01:59,386 --> 0:02:02,089
创造出最伟大的工具

28
00:02:02,322 --> 0:02:03,790
来推动科技的发展

29
00:02:04,825 --> 0:02:09,395
如果你对编译器有兴趣的话

30
00:02:09,729 --> 0:02:12,766
我们乐意邀请你加入我们

31
00:02:13,267 --> 0:02:16,170
你可以去访问LLVM的网站

32
00:02:16,603 --> 0:02:20,941
或者你可以在今天晚些时候

33
00:02:21,008 --> 0:02:23,977
我们的许多来自Apple的

34
00:02:24,044 --> 0:02:27,848
我肯定会非常高兴地与你讲解

35
00:02:27,915 --> 0:02:30,117
与所有编译器相关

36
00:02:30,384 --> 0:02:31,652
任何一切你想知道的事情

37
00:02:32,986 --> 0:02:37,591
今天我们有一套很好的东西

38
00:02:37,658 --> 0:02:40,160
我们有自动引用计数的更新

39
00:02:40,227 --> 0:02:44,464
这使得编译器

40
00:02:44,731 --> 0:02:49,937
Xcode 10中有了新诊断方法

41
00:02:50,170 --> 0:02:53,974
在构建时它能够帮助

42
00:02:54,208 --> 0:02:56,376
从而提高代码的质量

43
00:02:56,710 --> 0:02:58,979
我们的编译器功能

44
00:02:59,046 --> 0:03:01,949
还是你的app

45
00:02:59,046 --> 0:03:01,949
还是你的app

46
00:03:02,249 --> 0:03:05,419
以及还有新的特性

47
00:03:05,485 --> 0:03:07,588
所有真正伟大的新东西

48
00:03:07,654 --> 0:03:09,389
以便能够从我们的平台

49
00:03:09,456 --> 0:03:11,692
和架构中

50
00:03:11,992 --> 0:03:13,994
获得我们都想要的性能

51
00:03:14,728 --> 0:03:17,664
因此 我想邀请我的同事

52
00:03:18,098 --> 0:03:19,533
Alex上来谈谈ARC

53
00:03:20,400 --> 0:03:21,301
Alex

54
00:03:21,368 --> 0:03:23,136
（ARC最新情况）

55
00:03:27,908 --> 0:03:28,842
谢谢Jim

56
00:03:29,676 --> 0:03:31,445
自从我们在几年前引入了

57
00:03:31,512 --> 0:03:34,214
自动引用计数以来

58
00:03:34,915 --> 0:03:37,184
它大大简化了

59
00:03:38,051 --> 0:03:41,088
一些限制使得从旧的

60
00:03:41,355 --> 0:03:45,225
手动保留释放模式迁移到

61
00:03:45,292 --> 0:03:48,395
我很高兴地说

62
00:03:49,029 --> 0:03:51,064
Xcode 10支持

63
00:03:51,131 --> 0:03:54,635
C结构中的

64
00:03:54,701 --> 0:03:56,670
（C结构中的ARC对象指针！）

65
00:04:00,507 --> 0:04:02,176
让我们来看一个例子

66
00:04:02,242 --> 0:04:04,811
假设我们想编写一个

67
00:04:05,379 --> 0:04:09,149
我们想要创建一个

68
00:04:09,216 --> 0:04:10,617
（工程师）

69
00:04:10,684 --> 0:04:14,521
对于Xcode 9和更早的版本

70
00:04:14,588 --> 0:04:18,591
使用一个带有ARC对象指针字段的

71
00:04:18,992 --> 0:04:22,829
所以我们必须在这里使用一个C

72
00:04:24,264 --> 0:04:27,935
而现在Xcode 10

73
00:04:28,135 --> 0:04:30,671
具有ARC对象指针字段的C结构

74
00:04:34,474 --> 0:04:37,644
让我们继续写我们的食品订购app

75
00:04:38,045 --> 0:04:41,248
让我们创建一个

76
00:04:41,615 --> 0:04:45,719
在这个函数中

77
00:04:45,919 --> 0:04:47,054
MenuItem类的变量项目

78
00:04:48,388 --> 0:04:51,124
然后 让我们把这个项目传递到

79
00:04:51,191 --> 0:04:53,393
另一个实际上

80
00:04:54,761 --> 0:04:59,733
创建项时编译器必须合成那个

81
00:05:00,033 --> 0:05:03,871
保留项目中

82
00:05:05,038 --> 0:05:06,707
幻灯片上的代码注释演示了

83
00:05:07,074 --> 0:05:10,444
编译器所合成的代码

84
00:05:11,044 --> 0:05:14,848
此代码确保在实际使用项目之前

85
00:05:15,182 --> 0:05:18,785
不会提前发布项目的名称和价格

86
00:05:21,255 --> 0:05:24,858
在函数的末尾

87
00:05:25,292 --> 0:05:27,227
并从栈中被释放

88
00:05:27,394 --> 0:05:30,664
因此编译器必须合成

89
00:05:30,864 --> 0:05:34,601
释放条目中

90
00:05:35,536 --> 0:05:40,841
这可以确保在项目释放时

91
00:05:42,943 --> 0:05:47,147
以前在使用手动保留释放模式时

92
00:05:47,581 --> 0:05:50,184
Objective-C

93
00:05:50,984 --> 0:05:54,521
但是你必须自己编写保留和释放

94
00:05:55,122 --> 0:05:59,293
使用ARC编译器会为你

95
00:05:59,459 --> 0:06:02,930
隐藏所有这些复杂性

96
00:05:59,459 --> 0:06:02,930
隐藏所有这些复杂性

97
00:06:03,630 --> 0:06:05,666
所以编译器实际上是你的朋友

98
00:06:05,999 --> 0:06:09,136
它对栈上的变量

99
00:06:09,203 --> 0:06:10,904
以及其他结构中的字段

100
00:06:11,772 --> 0:06:14,575
以及Objective-C类中的

101
00:06:14,875 --> 0:06:18,245
实例变量

102
00:06:19,680 --> 0:06:23,684
但是有一个地方

103
00:06:23,750 --> 0:06:26,587
我们需要做一些额外的工作

104
00:06:27,788 --> 0:06:29,489
ARC对象指针字段的结构

105
00:06:30,624 --> 0:06:31,992
让我们回到我们的结构

106
00:06:32,125 --> 0:06:36,096
我们假设

107
00:06:36,797 --> 0:06:41,835
若这是Objective-C接口

108
00:06:42,536 --> 0:06:45,205
但它不是 所以让我们使用

109
00:06:46,173 --> 0:06:49,176
现在这段代码实际上有两个问题

110
00:06:49,977 --> 0:06:54,815
首先内存在分配时不是零初始化的

111
00:06:55,048 --> 0:06:58,185
这意味着它们的指针是无效的

112
00:06:58,585 --> 0:07:01,822
这将导致程序在运行时

113
00:06:58,585 --> 0:07:01,822
这将导致程序在运行时

114
00:07:01,889 --> 0:07:03,323
出现不希望的运行时行为

115
00:07:05,225 --> 0:07:09,062
第二个问题是在释放内存之前

116
00:07:09,129 --> 0:07:12,065
ARC对象指针字段未被清除

117
00:07:12,499 --> 0:07:17,070
这将导致你的程序运行时内存泄漏

118
00:07:19,139 --> 0:07:25,212
要解决第一个问题

119
00:07:25,746 --> 0:07:29,449
这将确保你的内存是零初始化的

120
00:07:30,050 --> 0:07:34,688
这将消除所有那些令人不快的

121
00:07:35,722 --> 0:07:39,059
要解决第二个问题

122
00:07:39,459 --> 0:07:41,728
你可以在循环分配到内存之前

123
00:07:42,129 --> 0:07:45,532
编写一个循环以清除项目中的

124
00:07:46,266 --> 0:07:49,803
这将确保在释放条目时

125
00:07:49,937 --> 0:07:52,239
条目中的名称和价格不会泄漏

126
00:07:56,009 --> 0:07:58,478
现在这是一个令人兴奋的新特性

127
00:07:59,046 --> 0:08:03,217
如果你们当中

128
00:07:59,046 --> 0:08:03,217
如果你们当中

129
00:08:03,517 --> 0:08:06,119
而推迟迁移到ARC中的话

130
00:08:06,186 --> 0:08:10,524
我希望Xcode 10中

131
00:08:10,991 --> 0:08:12,860
可以帮助你重新考虑你的选择

132
00:08:14,027 --> 0:08:18,732
我们来看看Objective-C

133
00:08:18,799 --> 0:08:23,270
看看在Xcode 10中

134
00:08:23,570 --> 0:08:26,273
在哪里以及如何使用这些结构

135
00:08:27,774 --> 0:08:31,745
在Xcode 10中

136
00:08:31,812 --> 0:08:34,248
Objective-C

137
00:08:34,515 --> 0:08:36,216
对象指针字段的结构

138
00:08:36,549 --> 0:08:41,788
例如你可以在C、Objective-C

139
00:08:41,855 --> 0:08:43,789
使用相同的结构

140
00:08:44,791 --> 0:08:50,330
而且即使在ARC或

141
00:08:50,564 --> 0:08:52,666
它也会正常工作

142
00:08:54,067 --> 0:08:58,839
在Xcode 10中

143
00:08:59,306 --> 0:09:04,745
统一了

144
00:08:59,306 --> 0:09:04,745
统一了

145
00:09:04,811 --> 0:09:07,915
这些函数接收或返回具有

146
00:09:08,715 --> 0:09:12,653
这是通过Xcode 10中的

147
00:09:13,053 --> 0:09:17,291
这种ABI变化影响了

148
00:09:17,858 --> 0:09:21,195
这些函数通过值返回或接受

149
00:09:21,528 --> 0:09:26,466
具有ARC对象指针字段的结构

150
00:09:26,533 --> 0:09:28,635
而没有像构造函数或析构函数

151
00:09:30,037 --> 0:09:33,106
现在如果你不确定这对你意味着什么

152
00:09:33,173 --> 0:09:36,643
或者你的代码是否受到

153
00:09:37,077 --> 0:09:39,713
请查看Xcode的发行说明

154
00:09:39,947 --> 0:09:41,882
描述了此ABI更改的

155
00:09:42,182 --> 0:09:45,352
效果和影响

156
00:09:45,419 --> 0:09:48,922
（结构中的

157
00:09:48,989 --> 0:09:50,224
对于ARC对象指针字段

158
00:09:50,290 --> 0:09:54,494
和C结构 我们有一个警告

159
00:09:55,629 --> 0:09:57,431
它们在Swift中没有支持

160
00:09:57,698 --> 0:09:59,733
因此如果你尝试使用一个具有

161
00:09:59,967 --> 0:10:02,669
Swift中

162
00:09:59,967 --> 0:10:02,669
Swift中

163
00:10:03,203 --> 0:10:07,040
你只会得到一个编译错误

164
00:10:07,107 --> 0:10:10,344
（对于某些函数的ABI更改

165
00:10:10,410 --> 0:10:13,814
（Swift不支持使用

166
00:10:13,881 --> 0:10:19,019
除了像支持ARC对指针字段的

167
00:10:19,453 --> 0:10:24,358
Xcode 10

168
00:10:24,825 --> 0:10:28,061
在Xcode 10中

169
00:10:28,762 --> 0:10:30,797
今天我想谈谈其中的两个

170
00:10:30,864 --> 0:10:31,965
（Xcode 10中的新诊断）

171
00:10:32,032 --> 0:10:34,902
第一个警告可能对那些混合了

172
00:10:35,602 --> 0:10:39,072
的人感兴趣

173
00:10:39,840 --> 0:10:44,444
因如你所知Swift代码

174
00:10:45,312 --> 0:10:50,017
Xcode允许你

175
00:10:50,217 --> 0:10:54,855
Objective-C声明描述

176
00:10:54,922 --> 0:10:56,456
（SWIFT和

177
00:10:56,523 --> 0:10:59,860
你可以将这个头文件导入到你自己的

178
00:11:00,360 --> 0:11:04,031
以便访问底层的Swift声明

179
00:11:04,798 --> 0:11:06,333
现在让我们更具体地讨论一下

180
00:11:06,400 --> 0:11:09,636
如何将Swift的闭包参数

181
00:11:09,703 --> 0:11:11,438
导入到Objective-C中

182
00:11:12,172 --> 0:11:13,841
现在屏幕上

183
00:11:14,107 --> 0:11:17,945
你看到了一个叫Executor的

184
00:11:18,712 --> 0:11:22,716
该协议定义了一个名为

185
00:11:22,883 --> 0:11:25,986
它接受一个名为

186
00:11:27,487 --> 0:11:31,225
现在Swift中闭包参数

187
00:11:31,491 --> 0:11:35,362
这意味着在函数返回后

188
00:11:35,429 --> 0:11:37,097
它们不应该被保留或调用

189
00:11:38,599 --> 0:11:43,770
现在当符合

190
00:11:43,871 --> 0:11:47,374
程序员很容易忘记这个契约是存在的

191
00:11:48,175 --> 0:11:51,178
例如 正如你现在幻灯片上看到的

192
00:11:51,512 --> 0:11:55,215
在Objective-C中

193
00:11:55,282 --> 0:11:57,751
并且符合Executor协议

194
00:11:58,352 --> 0:12:00,921
因此它提供了

195
00:11:58,352 --> 0:12:00,921
因此它提供了

196
00:12:01,321 --> 0:12:03,390
该方法接受与Swift的

197
00:12:03,457 --> 0:12:06,827
处理程序闭包参数对应的

198
00:12:07,427 --> 0:12:09,863
但仅仅通过查看

199
00:12:10,097 --> 0:12:11,865
我们无法知道

200
00:12:11,932 --> 0:12:14,568
处理程序参数是否可以转义

201
00:12:16,003 --> 0:12:21,341
Xcode 10

202
00:12:21,708 --> 0:12:24,878
帮助我们记住这个参数

203
00:12:27,481 --> 0:12:31,151
为了修正这个警告 你可以使用

204
00:12:31,218 --> 0:12:33,587
来注释你的块参数

205
00:12:34,588 --> 0:12:35,856
你还应该用

206
00:12:35,923 --> 0:12:39,059
NS_NOESCAPE注释

207
00:12:39,126 --> 0:12:42,796
或方法实现中的参数

208
00:12:44,164 --> 0:12:49,770
NS_NOESCAPE注释只是

209
00:12:50,204 --> 0:12:54,741
以确保在执行操作方法返回后

210
00:12:54,808 --> 0:12:57,578
你不存储或调用处理程序块

211
00:12:59,012 --> 0:13:02,316
因此这是为了帮助你记住

212
00:12:59,012 --> 0:13:02,316
因此这是为了帮助你记住

213
00:13:02,382 --> 0:13:07,454
Swift和Object-C代码

214
00:13:09,990 --> 0:13:13,260
现在第二个警告

215
00:13:14,228 --> 0:13:15,929
更低级别代码并关心

216
00:13:15,996 --> 0:13:20,601
结构在内存中的布局方式的人感兴趣

217
00:13:21,835 --> 0:13:23,470
让我们来看看一个结构

218
00:13:23,770 --> 0:13:28,809
在C语言中结构必须遵循严格的

219
00:13:29,810 --> 0:13:32,679
在这个特殊的结构中

220
00:13:32,813 --> 0:13:35,916
编译器必须在

221
00:13:36,250 --> 0:13:39,253
插入一个2字节的填充

222
00:13:40,721 --> 0:13:44,024
有时你可能想要放松这些规则

223
00:13:44,124 --> 0:13:47,528
编译器提供了一个

224
00:13:47,594 --> 0:13:51,965
你可以用它来控制布局和结构的对齐

225
00:13:52,032 --> 0:13:54,434
（用#PRAGMA PACK

226
00:13:54,501 --> 0:13:59,173
现在这个示例中我们使用

227
00:13:59,706 --> 0:14:03,277
来删除这个固定的布局

228
00:13:59,706 --> 0:14:03,277
来删除这个固定的布局

229
00:14:03,343 --> 0:14:06,280
并确保我们的结构是紧凑的

230
00:14:07,347 --> 0:14:10,984
这在序列化结构或通过网络

231
00:14:11,051 --> 0:14:13,654
传输结构时非常有用

232
00:14:14,788 --> 0:14:19,760
现在pragma pack通常

233
00:14:20,360 --> 0:14:25,465
但是程序员很容易忘记将

234
00:14:27,234 --> 0:14:29,770
Xcode 10现在会警告那些

235
00:14:30,404 --> 0:14:34,074
pragma pack pop

236
00:14:34,875 --> 0:14:37,511
它会将你指向push的位置

237
00:14:37,578 --> 0:14:39,680
（找到不平衡的

238
00:14:39,746 --> 0:14:41,114
为了修复这个警告

239
00:14:41,315 --> 0:14:44,685
你应该查看push指令的位置

240
00:14:45,285 --> 0:14:47,221
并将pop指令

241
00:14:47,554 --> 0:14:50,457
插入到代码中的相应位置

242
00:14:51,725 --> 0:14:55,963
在我们的例子中我们可以在

243
00:14:57,130 --> 0:14:58,732
一旦我们这样做了

244
00:14:59,566 --> 0:15:03,570
新的布局规则将只适用于填充结构

245
00:14:59,566 --> 0:15:03,570
新的布局规则将只适用于填充结构

246
00:15:03,804 --> 0:15:07,674
因此它们不会影响程序中的

247
00:15:11,812 --> 0:15:17,017
我提到的这两个新警告

248
00:15:17,951 --> 0:15:22,589
它们可以帮助你

249
00:15:23,390 --> 0:15:26,627
为了更多地讨论更正确更健壮的代码

250
00:15:26,860 --> 0:15:28,962
我想请George上台

251
00:15:29,029 --> 0:15:29,963
他将讨论

252
00:15:30,030 --> 0:15:33,233
Xcode 10中

253
00:15:34,101 --> 0:15:35,002
George

254
00:15:35,068 --> 0:15:37,070
（CLANG静态分析器）

255
00:15:41,508 --> 0:15:42,442
谢谢 Alex

256
00:15:42,876 --> 0:15:45,546
我想向你介绍一些

257
00:15:45,612 --> 0:15:49,449
我们为Clang静态分析器

258
00:15:50,284 --> 0:15:52,786
Clang静态分析器

259
00:15:52,853 --> 0:15:56,490
可以在你的程序中找到边缘案例

260
00:15:57,224 --> 0:15:59,927
静态分析器不仅为你查找漏洞

261
00:16:00,227 --> 0:16:03,030
还在列出漏洞的路径的

262
00:16:03,096 --> 0:16:04,932
Xcode中显示其可视化

263
00:16:05,566 --> 0:16:10,604
NSMutableArray中

264
00:16:11,071 --> 0:16:14,274
静态分析器向你展示了

265
00:16:14,341 --> 0:16:16,577
这样你就可以看到

266
00:16:18,045 --> 0:16:22,049
我想告诉你们

267
00:16:23,083 --> 0:16:28,055
首先我们有了一个新的检查

268
00:16:28,422 --> 0:16:31,692
这可能会导致不良的性能

269
00:16:32,359 --> 0:16:35,729
其次我们有一项新的检查

270
00:16:35,996 --> 0:16:39,132
动释放池中的自动释放变量的误用

271
00:16:39,433 --> 0:16:41,802
这可能会导致释放后使用崩溃

272
00:16:42,970 --> 0:16:46,473
最后我们改进了

273
00:16:46,540 --> 0:16:47,975
性能和可视

274
00:16:49,376 --> 0:16:52,079
那么让我们从一个

275
00:16:52,145 --> 0:16:54,081
检测伟大的中央调度反模式检查开始

276
00:16:54,915 --> 0:16:58,852
我们平台上的许多API都是异步的

277
00:16:59,186 --> 0:17:01,822
但有时开发人员出于某种原因

278
00:16:59,186 --> 0:17:01,822
但有时开发人员出于某种原因

279
00:17:01,889 --> 0:17:04,491
希望以同步的方式使用它们

280
00:17:05,559 --> 0:17:06,693
可能是因为他们的代码

281
00:17:06,760 --> 0:17:08,896
已经在后台队列上运行了

282
00:17:09,496 --> 0:17:11,832
或者是因为函数在必需的值可用之前

283
00:17:11,898 --> 0:17:13,934
根本无法继续运行

284
00:17:14,734 --> 0:17:16,336
而那里诱人的解决方案是

285
00:17:16,403 --> 0:17:19,473
使用信号量来确保同步

286
00:17:20,273 --> 0:17:22,776
这就是这个例子中的情况

287
00:17:23,042 --> 0:17:27,314
所以这里有一个SXPC对象

288
00:17:27,814 --> 0:17:31,685
我们使用它的属性

289
00:17:31,885 --> 0:17:34,922
从另一个进程异步地

290
00:17:35,088 --> 0:17:36,590
获取递归任务的名称

291
00:17:37,558 --> 0:17:42,629
然后我们等待一个信号量

292
00:17:43,297 --> 0:17:46,700
这有助于确保在函数返回任务名时

293
00:17:47,434 --> 0:17:49,002
任务名是可用的

294
00:17:49,770 --> 0:17:53,674
因此这种方法是可行的

295
00:17:54,408 --> 0:17:55,809
因此这里的主要问题是

296
00:17:55,876 --> 0:18:00,447
当你在某个异步进程上

297
00:17:55,876 --> 0:18:00,447
当你在某个异步进程上

298
00:18:00,814 --> 0:18:02,482
你可能会等待一个优先级

299
00:18:02,549 --> 0:18:04,852
比你的队列低得多的队列

300
00:18:05,118 --> 0:18:06,687
这会导致优先级反转

301
00:18:06,920 --> 0:18:09,289
这会恶化性能并导致挂起

302
00:18:10,057 --> 0:18:13,794
而且以这种方式使用信号量

303
00:18:13,994 --> 0:18:17,598
也会产生无用的线程

304
00:18:18,966 --> 0:18:21,268
为了帮助你解决这个问题

305
00:18:21,435 --> 0:18:24,471
现在静态分析器对这种情况提出警告

306
00:18:26,807 --> 0:18:29,076
帮助了解问题发生的地点

307
00:18:29,142 --> 0:18:31,478
（伟大的中央调度性能反模式）

308
00:18:31,545 --> 0:18:33,514
现在让我们看看如何解决这个问题

309
00:18:34,014 --> 0:18:38,385
在最好的情况下

310
00:18:38,452 --> 0:18:39,720
可以替代使用

311
00:18:40,187 --> 0:18:44,491
因此对于SXPC连接

312
00:18:44,558 --> 0:18:47,127
即synchronousRemoteObjectProxy

313
00:18:47,661 --> 0:18:51,164
当使用它时

314
00:18:51,398 --> 0:18:53,000
运行速度要快得多

315
00:18:55,135 --> 0:18:59,273
或者如果没有这样的同步API可用

316
00:18:59,740 --> 0:19:03,143
你可以重构app

317
00:18:59,740 --> 0:19:03,143
你可以重构app

318
00:19:03,410 --> 0:19:06,180
只需在回调中调用所需的函数即可

319
00:19:09,216 --> 0:19:11,285
这个检查在默认情况下是不启用的

320
00:19:11,552 --> 0:19:14,087
但是我们鼓励你在构建设置中启用它

321
00:19:14,254 --> 0:19:17,824
以确保在你的app中

322
00:19:17,891 --> 0:19:19,560
并尽可能快地运行

323
00:19:21,328 --> 0:19:23,363
现在让我们讨论第二个检查

324
00:19:23,430 --> 0:19:25,866
用于检测

325
00:19:25,933 --> 0:19:28,502
比自动释放池的生命周期

326
00:19:30,404 --> 0:19:35,175
自动释放限定符指定

327
00:19:35,409 --> 0:19:37,878
就必须释放该值

328
00:19:38,545 --> 0:19:42,816
这里有一个例子

329
00:19:43,016 --> 0:19:44,451
创建一个错误变量

330
00:19:44,685 --> 0:19:47,254
一旦控件在自动释放池之外

331
00:19:47,321 --> 0:19:50,490
个变量就会被释放 然后被销毁

332
00:19:51,058 --> 0:19:55,128
自动释放池是

333
00:19:55,395 --> 0:19:58,565
它有助于控制app的大内存占用

334
00:19:58,632 --> 0:20:01,602
并确保在必要时销毁临时内存

335
00:19:58,632 --> 0:20:01,602
并确保在必要时销毁临时内存

336
00:20:03,036 --> 0:20:06,373
然而它可能会导致意外的崩溃

337
00:20:07,040 --> 0:20:09,042
而且它们更令人意外

338
00:20:09,109 --> 0:20:12,212
因为你甚至不需要在app中

339
00:20:12,279 --> 0:20:14,681
就可以发生这些崩溃

340
00:20:15,082 --> 0:20:18,318
例如这里有一个验证函数

341
00:20:19,019 --> 0:20:21,588
它接受out参数NSError

342
00:20:22,289 --> 0:20:23,624
而out参数

343
00:20:23,690 --> 0:20:27,494
在Objective-C中

344
00:20:28,095 --> 0:20:32,866
所以当我们把这个out参数

345
00:20:35,269 --> 0:20:39,206
然后函数退出时

346
00:20:39,840 --> 0:20:43,610
如果调用者试图

347
00:20:43,810 --> 0:20:46,747
他们可能会释放后使用中崩溃

348
00:20:46,813 --> 0:20:48,849
（OUT参数和自动存储池）

349
00:20:48,916 --> 0:20:50,684
（获块中的自恢复变量）

350
00:20:50,751 --> 0:20:55,856
这种模式已经很难被发现

351
00:20:55,989 --> 0:20:58,559
拥有自动存储池的app的部分时

352
00:20:58,625 --> 0:21:00,127
这种模式会变得更糟

353
00:20:58,625 --> 0:21:00,127
这种模式会变得更糟

354
00:21:00,694 --> 0:21:05,566
这里有一个类似的函数

355
00:21:06,166 --> 0:21:09,837
然后调用

356
00:21:09,937 --> 0:21:12,706
这是一个流行的

357
00:21:12,773 --> 0:21:15,709
它在集合的每个元素上调用一个块

358
00:21:16,476 --> 0:21:18,979
但是enumerateObjectsUsingBlock

359
00:21:19,479 --> 0:21:23,550
实际上把x称为返回的

360
00:21:24,051 --> 0:21:25,919
因此这里也出现了一个类似的问题

361
00:21:26,286 --> 0:21:30,123
当我们在块中创建一个错误值

362
00:21:30,190 --> 0:21:31,925
并将其写入out参数时

363
00:21:32,559 --> 0:21:34,194
当控件到达

364
00:21:34,261 --> 0:21:38,131
它实际上会被释放

365
00:21:39,533 --> 0:21:42,636
然后当调用者试图阅读它时

366
00:21:42,803 --> 0:21:45,205
它们也可能会释放后使用中崩溃

367
00:21:47,975 --> 0:21:51,044
在此之前

368
00:21:51,378 --> 0:21:55,048
它在块中捕获隐式自动发出的参数时

369
00:21:55,115 --> 0:21:56,517
发出警告

370
00:21:56,984 --> 0:21:58,118
编译器警告

371
00:21:58,185 --> 0:22:01,355
建议显式地使这些参数自动发送

372
00:21:58,185 --> 0:22:01,355
建议显式地使这些参数自动发送

373
00:22:02,089 --> 0:22:04,691
但是我们注意到

374
00:22:05,526 --> 0:22:07,160
所以在Xcode 10中

375
00:22:07,227 --> 0:22:10,864
我们引入了一个功能更强大的

376
00:22:11,865 --> 0:22:14,168
它知道哪些API

377
00:22:15,169 --> 0:22:17,871
调用了自动释放池中提供的块

378
00:22:18,172 --> 0:22:20,073
并对此类情况进行警告

379
00:22:21,108 --> 0:22:22,843
（Xcode 10：

380
00:22:23,610 --> 0:22:25,679
现在让我们看看如何解决这个问题

381
00:22:26,213 --> 0:22:27,814
这里最简单的方法就是

382
00:22:28,081 --> 0:22:30,417
引入一个强大的局部变量

383
00:22:31,084 --> 0:22:33,320
然后当你在块中时

384
00:22:33,654 --> 0:22:36,857
将一个值写入内部的强变量中

385
00:22:37,624 --> 0:22:40,194
将一个值写入内部的强变量中

386
00:22:40,561 --> 0:22:42,696
只复制到out参数

387
00:22:42,863 --> 0:22:45,432
并且你知道它不在自动释放池中

388
00:22:45,499 --> 0:22:48,202
因此写入自动释放变量是安全的

389
00:22:50,103 --> 0:22:53,140
（改进性能和报告可视化）

390
00:22:53,207 --> 0:22:57,077
最后我们还改进了

391
00:22:57,144 --> 0:22:58,545
Clang静态分析器的性能

392
00:22:59,580 --> 0:23:03,283
因此在Xcode 10中

393
00:22:59,580 --> 0:23:03,283
因此在Xcode 10中

394
00:23:03,350 --> 0:23:05,519
以更有效的方式探索你的程序

395
00:23:05,752 --> 0:23:10,991
现在它在相同的分析时间内

396
00:23:12,392 --> 0:23:16,630
它不仅发现了更多的漏洞

397
00:23:17,264 --> 0:23:19,933
报告往往更小也更容易理解

398
00:23:20,033 --> 0:23:23,737
我的意思是

399
00:23:24,638 --> 0:23:25,739
你会得到

400
00:23:25,806 --> 0:23:28,509
很多步骤和箭头的例子

401
00:23:28,575 --> 0:23:30,744
这些例子有些难以理解

402
00:23:31,445 --> 0:23:35,282
在Xcode的新版本中的

403
00:23:35,849 --> 0:23:39,820
我们提供了一个更小的错误路径

404
00:23:39,887 --> 0:23:41,655
你可以更快地看到问题

405
00:23:43,390 --> 0:23:47,261
因此为了在项目中使用静态分析器

406
00:23:47,327 --> 0:23:53,734
你可以使用产品 分析

407
00:23:53,967 --> 0:23:56,637
以确保分析器问题不被忽略

408
00:23:57,271 --> 0:23:59,573
所以我鼓励你使用静态分析器

409
00:23:59,973 --> 0:24:02,409
它是一个很好的工具

410
00:23:59,973 --> 0:24:02,409
它是一个很好的工具

411
00:24:03,110 --> 0:24:06,980
现在我的同事Ahmed

412
00:24:07,047 --> 0:24:10,250
（加强安全）

413
00:24:10,317 --> 0:24:11,151
谢谢George

414
00:24:14,555 --> 0:24:18,058
如Alex和George告诉你的

415
00:24:18,125 --> 0:24:20,894
和静态分析器检查

416
00:24:21,428 --> 0:24:23,197
但是你也有杀毒软件

417
00:24:23,363 --> 0:24:25,432
和所有这些工具

418
00:24:25,499 --> 0:24:26,667
包括安全漏洞

419
00:24:28,135 --> 0:24:31,238
所以我相信你们都有很多测试

420
00:24:31,538 --> 0:24:34,374
来发现这些测试中的所有漏洞

421
00:24:35,008 --> 0:24:37,578
但是对于一些最恶劣的安全漏洞

422
00:24:38,111 --> 0:24:41,148
如果它们以某种方式

423
00:24:41,381 --> 0:24:43,517
我们希望确保它们

424
00:24:45,152 --> 0:24:49,156
因此对于那些

425
00:24:49,223 --> 0:24:51,358
即使在发布版本中我们也希望如此

426
00:24:52,593 --> 0:24:54,862
我是Ahmed

427
00:24:54,962 --> 0:24:58,332
今天我将告诉大家

428
00:25:00,033 --> 0:25:01,001
要了解它是如何工作的

429
00:25:01,068 --> 0:25:02,936
我们就需要了解栈是如何工作的

430
00:25:04,972 --> 0:25:08,709
这里我有一个简单的C函数

431
00:25:09,309 --> 0:25:13,080
我用它来打印

432
00:25:14,781 --> 0:25:17,284
在这种情况下

433
00:25:18,352 --> 0:25:19,319
它的工作方式是

434
00:25:19,386 --> 0:25:23,957
我们需分配一些内存来跟踪这个调用

435
00:25:26,126 --> 0:25:28,996
我们把它分配到一个叫做栈的区域

436
00:25:29,730 --> 0:25:33,500
栈向空指针或地址0方向向下延伸

437
00:25:35,903 --> 0:25:38,172
因此当我们执行

438
00:25:38,705 --> 0:25:40,741
这会分配所谓的堆栈帧

439
00:25:41,441 --> 0:25:43,944
堆栈帧包含类似返回地址的内容

440
00:25:44,211 --> 0:25:46,480
这样我们就知道

441
00:25:47,714 --> 0:25:50,884
但它也包含其他东西

442
00:25:51,718 --> 0:25:55,088
因此例如

443
00:25:56,056 --> 0:25:57,658
它就驻留在堆栈框架中

444
00:26:00,260 --> 0:26:04,331
如果我尝试对这个dlog文件

445
00:26:05,766 --> 0:26:07,901
那么这个函数

446
00:26:09,369 --> 0:26:12,506
当它完成时

447
00:26:12,639 --> 0:26:14,107
并返回给调用者

448
00:26:16,810 --> 0:26:20,013
现在我们更详细地看看这个堆栈框架

449
00:26:21,515 --> 0:26:25,385
假设我将函数改成一个本地缓冲区

450
00:26:25,452 --> 0:26:27,321
这是一个4字节的字符数组

451
00:26:29,790 --> 0:26:31,959
我正在尝试通过先做一个

452
00:26:32,226 --> 0:26:36,530
我传递到缓冲区中的字符串的

453
00:26:38,565 --> 0:26:44,571
strcpy来准备调试字符串

454
00:26:46,039 --> 0:26:49,276
但问题是在这一点上

455
00:26:49,877 --> 0:26:53,280
我们已经用尽了在我们的缓冲区中

456
00:26:54,581 --> 0:26:57,184
所以如果我们继续

457
00:26:57,518 --> 0:26:59,720
那么我们将重写返回地址

458
00:27:01,054 --> 0:27:02,589
这是一个很大的安全问题

459
00:27:02,856 --> 0:27:07,427
如果攻击者控制了

460
00:27:07,961 --> 0:27:09,763
那么它可以控制返回地址

461
00:27:10,197 --> 0:27:11,932
如果它能控制返回地址

462
00:27:11,999 --> 0:27:14,368
那么他们就基本上控制了

463
00:27:14,434 --> 0:27:15,836
所以这是很大的安全问题

464
00:27:18,772 --> 0:27:21,909
因此如果你有一个测试捕捉到了这个

465
00:27:22,509 --> 0:27:24,278
并且运行了地址消毒器

466
00:27:24,878 --> 0:27:27,881
那么你将有一个简单的方法

467
00:27:28,415 --> 0:27:30,551
实际上 我在这里应该做的是

468
00:27:30,784 --> 0:27:33,420
strncpy 它知道大小

469
00:27:33,854 --> 0:27:36,957
甚至更好 使用更高级别的API

470
00:27:39,026 --> 0:27:42,229
但是有时候这些漏洞

471
00:27:43,063 --> 0:27:47,835
我们通过使用

472
00:27:49,770 --> 0:27:51,972
栈保护器改变了堆栈框架的布局

473
00:27:52,039 --> 0:27:54,007
金丝雀

474
00:27:55,642 --> 0:27:57,477
这样当我们写的时候

475
00:27:58,378 --> 0:28:01,715
我们会在函数返回之前有一些代码

476
00:27:58,378 --> 0:28:01,715
我们会在函数返回之前有一些代码

477
00:28:02,015 --> 0:28:04,117
来检查金丝雀是否有效

478
00:28:06,186 --> 0:28:09,623
所以如我们继续用strcpy来写

479
00:28:11,491 --> 0:28:14,962
然后在返回之前先检查金丝雀

480
00:28:15,696 --> 0:28:16,964
然后就会终止

481
00:28:17,664 --> 0:28:21,235
因此我们将一个潜在的

482
00:28:21,401 --> 0:28:24,771
转化为可靠的崩溃

483
00:28:26,573 --> 0:28:28,642
这就是所谓的堆栈保护器

484
00:28:31,545 --> 0:28:32,746
（堆栈保护器）

485
00:28:32,813 --> 0:28:35,983
它检测到某些类型的堆栈缓冲区溢出

486
00:28:36,049 --> 0:28:37,651
就是我们刚才看到的攻击

487
00:28:38,418 --> 0:28:41,388
在许多版本的Xcode中

488
00:28:44,391 --> 0:28:47,261
下来我要讲一个更复杂的例子

489
00:28:47,327 --> 0:28:49,029
我们引入了一个新的缓解措施

490
00:28:50,697 --> 0:28:54,201
假设我取了我的函数

491
00:28:55,068 --> 0:28:58,005
我改变了缓冲区

492
00:28:59,106 --> 0:29:01,508
长度来自一个叫做len的参数

493
00:28:59,106 --> 0:29:01,508
长度来自一个叫做len的参数

494
00:29:04,044 --> 0:29:09,716
假设在一个特定的调用中

495
00:29:10,984 --> 0:29:14,054
所以现在堆栈帧必须至少有

496
00:29:16,924 --> 0:29:19,693
但是内存并不是立即可用的

497
00:29:20,127 --> 0:29:22,062
所以内存被分成了几页

498
00:29:22,663 --> 0:29:25,732
而堆栈只在需要时才增长

499
00:29:26,633 --> 0:29:30,804
例如当我们试图访问

500
00:29:30,871 --> 0:29:35,075
缓冲区的10000个字节时

501
00:29:35,509 --> 0:29:37,211
所以它在CPU中做了一个

502
00:29:37,277 --> 0:29:38,879
与操作系统对话的页面错误

503
00:29:39,012 --> 0:29:41,915
操作系统看到我们有权力增长堆栈

504
00:29:42,049 --> 0:29:44,084
并且它增长了它

505
00:29:44,918 --> 0:29:46,486
这些都发生在引擎盖下面

506
00:29:49,056 --> 0:29:53,560
但是 如果攻击者控制了长度

507
00:29:53,994 --> 0:29:56,230
大到足以跨越许多页

508
00:29:57,865 --> 0:29:59,199
所以现在就有了一个新问题

509
00:29:59,867 --> 0:30:04,438
内存不是无限的

510
00:29:59,867 --> 0:30:04,438
内存不是无限的

511
00:30:04,505 --> 0:30:05,439
最终我们会到达

512
00:30:05,506 --> 0:30:07,641
另一个已经分配的内存区域

513
00:30:08,008 --> 0:30:09,343
通常是堆

514
00:30:10,811 --> 0:30:13,413
当我们这样做的时候

515
00:30:13,714 --> 0:30:15,349
与已使用的

516
00:30:15,415 --> 0:30:17,451
这通常是像

517
00:30:20,587 --> 0:30:23,790
如果我们试着看看

518
00:30:24,591 --> 0:30:27,794
然后我们试着

519
00:30:30,097 --> 0:30:32,766
我们做H-E-L等等

520
00:30:33,667 --> 0:30:35,502
从CPU的角度来看

521
00:30:35,569 --> 0:30:37,704
生成的代码和操作系统

522
00:30:37,771 --> 0:30:38,805
这都没问题

523
00:30:39,006 --> 0:30:42,943
因为我们只是在写一个已经可用的

524
00:30:44,811 --> 0:30:47,681
但实际上并非如此

525
00:30:47,748 --> 0:30:50,784
这不是本地堆栈分配数组的一部分

526
00:30:51,552 --> 0:30:53,353
所以当我们写东西的时候

527
00:30:53,420 --> 0:30:56,256
一些完全不相关的信息

528
00:30:56,323 --> 0:30:59,693
比如我不知道一个布尔值

529
00:31:00,327 --> 0:31:02,663
这是另一个重要的安全漏洞

530
00:31:06,967 --> 0:31:09,736
这是我们用一个新特性来缓解的

531
00:31:10,871 --> 0:31:14,007
这个特性是通过在函数的入口

532
00:31:14,474 --> 0:31:15,676
发出些新代码来工作的

533
00:31:16,910 --> 0:31:20,380
这个函数检查堆栈框架是否可以使用

534
00:31:21,381 --> 0:31:24,451
所以它询问操作系统堆栈的最大空间

535
00:31:25,285 --> 0:31:27,821
如果你尝试做一个大于那个的分配

536
00:31:27,888 --> 0:31:29,456
那么它实际上就会终止

537
00:31:31,124 --> 0:31:35,028
这将把一个潜在的

538
00:31:35,395 --> 0:31:38,665
变成了可靠的崩溃

539
00:31:41,101 --> 0:31:43,670
所以这就是堆栈检查

540
00:31:43,737 --> 0:31:46,206
你可能听说过它

541
00:31:46,907 --> 0:31:48,809
在Xcode 10中默认启用它

542
00:31:48,876 --> 0:31:49,877
（堆栈检查）

543
00:31:49,943 --> 0:31:52,779
（检测“堆栈冲突”

544
00:31:53,347 --> 0:31:57,384
接下来我想谈谈我们在

545
00:31:57,751 --> 0:32:00,787
这就是对新扩展的支持：

546
00:31:57,751 --> 0:32:00,787
这就是对新扩展的支持：

547
00:32:02,990 --> 0:32:06,059
那么大家都知道

548
00:32:06,793 --> 0:32:10,764
Xcode的一个伟大之处在于

549
00:32:10,998 --> 0:32:13,467
你就可以针对

550
00:32:15,202 --> 0:32:18,872
因此在macOS、iOS

551
00:32:19,139 --> 0:32:24,278
我们对每个都进行了调整

552
00:32:24,511 --> 0:32:26,013
所有可用的东西

553
00:32:26,413 --> 0:32:29,449
因此无论我们在哪里运行

554
00:32:31,185 --> 0:32:35,289
因此如果你的app

555
00:32:35,455 --> 0:32:37,724
这也是你可能要做的事情

556
00:32:39,760 --> 0:32:41,895
因此我们有三个功能可以讨论

557
00:32:42,095 --> 0:32:45,332
它们可以用在iMac Pro

558
00:32:47,067 --> 0:32:48,569
让我们从iMac Pro开始

559
00:32:51,305 --> 0:32:54,107
iMac Pro

560
00:32:55,976 --> 0:32:59,880
它有一组名为

561
00:33:02,049 --> 0:33:05,853
AVX-512是一组

562
00:33:08,689 --> 0:33:13,493
这些是X86-64的好

563
00:33:13,627 --> 0:33:19,633
在X86-64中 我们只能假设

564
00:33:20,033 --> 0:33:23,837
这在任何Mac电脑上都是可以保证的

565
00:33:25,105 --> 0:33:28,175
现在任何新的Mac电脑

566
00:33:28,742 --> 0:33:32,846
但是iMac Pro是第一个有

567
00:33:35,682 --> 0:33:39,653
在Xcode Clang中

568
00:33:40,454 --> 0:33:43,090
这很好

569
00:33:43,156 --> 0:33:45,192
我们可以在向量中有更多的元素

570
00:33:46,126 --> 0:33:48,228
这样可以大大提高吞吐量

571
00:33:51,198 --> 0:33:53,166
AVX-512还有其他好处

572
00:33:53,567 --> 0:33:57,538
例如我们不仅有更大的向量

573
00:33:57,905 --> 0:33:59,239
我们还有更多的向量

574
00:33:59,840 --> 0:34:03,343
所以在X86-64上我们只有16

575
00:33:59,840 --> 0:34:03,343
所以在X86-64上我们只有16

576
00:34:03,710 --> 0:34:05,412
所以是大量的数据需要处理

577
00:34:07,247 --> 0:34:09,783
即使由于某种原因自动向量器

578
00:34:09,850 --> 0:34:13,253
无法使用这些向量

579
00:34:13,620 --> 0:34:16,290
那么我们仍然有更多的技能寄存器

580
00:34:16,356 --> 0:34:18,692
甚至对于那些只会浮动或加倍的代码

581
00:34:20,127 --> 0:34:22,329
在AVX-512中有很多性能优势

582
00:34:24,197 --> 0:34:26,900
以让我们看看我们如何

583
00:34:27,000 --> 0:34:29,536
利用我的计算

584
00:34:31,772 --> 0:34:35,509
所以我要做的第一件事就是

585
00:34:36,076 --> 0:34:39,880
因为这将是我在所有Mac上

586
00:34:41,681 --> 0:34:43,684
接下来我可以尝试专门化我的函数

587
00:34:44,217 --> 0:34:46,786
一种方法是使用目标属性

588
00:34:49,188 --> 0:34:51,692
这告诉编译器

589
00:34:51,757 --> 0:34:55,395
这个函数有AVX-512

590
00:34:57,364 --> 0:35:01,735
因此如果你使用simd.h 例如

591
00:34:57,364 --> 0:35:01,735
因此如果你使用simd.h 例如

592
00:35:02,636 --> 0:35:05,572
现在我们可以使用相同的代码

593
00:35:05,839 --> 0:35:06,840
获得更好的性能

594
00:35:09,109 --> 0:35:11,445
如果你使用更大的向量类型

595
00:35:11,512 --> 0:35:13,514
比如 simd浮点数16

596
00:35:13,580 --> 0:35:16,583
那么现在你的性能要比

597
00:35:17,117 --> 0:35:19,453
AVX-512版本中

598
00:35:22,022 --> 0:35:24,691
如果你一直伸入到到X86本质

599
00:35:24,925 --> 0:35:27,694
那么现在你可以开始使用新的

600
00:35:28,095 --> 0:35:29,796
和M512类型

601
00:35:32,866 --> 0:35:35,602
因此如果你想专攻更大的代码单元

602
00:35:35,669 --> 0:35:40,307
那么不仅是单个函数

603
00:35:40,707 --> 0:35:43,577
然后你可以使用附加向量扩展构建

604
00:35:43,644 --> 0:35:46,113
设置的新的AVX-512值

605
00:35:46,180 --> 0:35:49,349
（在XCODE中

606
00:35:49,416 --> 0:35:51,919
所以当你这样做的时候

607
00:35:51,985 --> 0:35:56,790
如果你熟悉AVX-1和AVX-2

608
00:35:56,857 --> 0:35:58,759
（AVX-512考虑）

609
00:35:58,825 --> 0:36:02,629
所以你只能从

610
00:35:58,825 --> 0:36:02,629
所以你只能从

611
00:36:03,197 --> 0:36:05,265
向AVX-512函数传递大的向量

612
00:36:05,566 --> 0:36:09,436
因此如果ABI与

613
00:36:09,770 --> 0:36:11,138
你就不能把它们传递给它们

614
00:36:14,107 --> 0:36:17,144
此外这些向量很大

615
00:36:17,211 --> 0:36:20,681
而且它们足够大

616
00:36:20,948 --> 0:36:23,083
无法像malloc

617
00:36:23,150 --> 0:36:25,786
因此在将这些分配到

618
00:36:26,353 --> 0:36:27,754
都必须考虑到这一点

619
00:36:30,457 --> 0:36:32,659
所以总的来说

620
00:36:32,726 --> 0:36:36,196
我们在操作系统中已经历过的

621
00:36:36,263 --> 0:36:39,733
例如你可以使用加速框架

622
00:36:39,800 --> 0:36:41,368
就容易多了

623
00:36:41,568 --> 0:36:43,871
因为我们已经专门为每一个微架构

624
00:36:44,004 --> 0:36:45,739
提供了所有的功能

625
00:36:48,542 --> 0:36:49,810
这就是AVX-512

626
00:36:51,545 --> 0:36:56,149
iPhone 8、8 Plus

627
00:36:59,286 --> 0:37:03,457
那么第一个功能是

628
00:36:59,286 --> 0:37:03,457
那么第一个功能是

629
00:37:04,958 --> 0:37:09,696
这得益于iPhone X

630
00:37:10,497 --> 0:37:12,232
这是A11 Bionic芯片

631
00:37:16,370 --> 0:37:22,843
因此与A10相比

632
00:37:23,043 --> 0:37:28,182
它支持六个CPU

633
00:37:28,949 --> 0:37:30,083
这在iOS系统中

634
00:37:32,452 --> 0:37:34,288
是第一个而且由于你有更多的内核

635
00:37:34,354 --> 0:37:36,823
所以你可能同时拥有更多的线程

636
00:37:37,124 --> 0:37:37,991
使用更多的线程

637
00:37:38,058 --> 0:37:41,328
你可能需要更多的同步

638
00:37:42,729 --> 0:37:44,498
这是用原子实现的

639
00:37:45,699 --> 0:37:49,570
A11 Bionic还引入了

640
00:37:49,837 --> 0:37:54,808
更好地优化了新的额外的核心

641
00:37:57,344 --> 0:37:58,745
让我们来看看它是如何工作的

642
00:38:00,681 --> 0:38:05,085
原子的工作方式

643
00:38:05,853 --> 0:38:09,489
假设我有一个线程

644
00:38:10,424 --> 0:38:13,093
所以它在那里有一个原子共享变量

645
00:38:13,694 --> 0:38:15,362
它只是想要增加它

646
00:38:15,429 --> 0:38:17,431
（原子）

647
00:38:17,497 --> 0:38:21,134
因此在引擎盖下

648
00:38:22,002 --> 0:38:25,405
该代码首先对高速缓存

649
00:38:25,939 --> 0:38:27,774
这是完全包含

650
00:38:27,941 --> 0:38:30,844
该原子变量的一个小的内存区域

651
00:38:33,747 --> 0:38:36,783
现在我们拥有独占访问权

652
00:38:37,351 --> 0:38:40,254
并且可以在临时加载值上进行增量

653
00:38:40,754 --> 0:38:42,456
并将结果存储起来

654
00:38:44,825 --> 0:38:47,427
我们知道这是安全的

655
00:38:47,694 --> 0:38:49,930
所以在计算临时结果时

656
00:38:50,030 --> 0:38:52,366
没有其他线程可以更改值

657
00:38:53,934 --> 0:38:57,804
但是现在假设有另一个线程

658
00:38:57,871 --> 0:39:00,107
相同变量或另一个变量

659
00:38:57,871 --> 0:39:00,107
相同变量或另一个变量

660
00:39:02,709 --> 0:39:04,211
所以两者都会尝试

661
00:39:04,278 --> 0:39:06,780
对这个变量进行排他性访问

662
00:39:07,614 --> 0:39:10,517
这是不可能的

663
00:39:12,219 --> 0:39:15,656
因此它们都将无法获得独家访问权

664
00:39:16,557 --> 0:39:19,426
它们将不得不再次尝试

665
00:39:22,029 --> 0:39:23,730
这对性能来说并不是好东西

666
00:39:25,966 --> 0:39:31,171
因此在ARM v8.1中

667
00:39:31,371 --> 0:39:33,974
我们有新的指令

668
00:39:34,408 --> 0:39:37,010
在某些情况下这可以极大地提高性能

669
00:39:38,412 --> 0:39:41,215
因此这也是你可以

670
00:39:41,448 --> 0:39:45,986
针对整个目标而专门化代码的东西

671
00:39:47,120 --> 0:39:49,122
只有当你有自己的C11

672
00:39:49,189 --> 0:39:52,125
它才是真正有用的东西

673
00:39:53,093 --> 0:39:56,697
因此一般来说

674
00:39:56,763 --> 0:39:59,533
例如像GCD或PThread

675
00:40:00,901 --> 0:40:03,070
这些已经对

676
00:40:03,303 --> 0:40:05,506
但它们也与操作系统合作

677
00:40:05,606 --> 0:40:07,107
以获得更好的性能

678
00:40:11,144 --> 0:40:15,349
A11 CPU的另一个特性是

679
00:40:16,250 --> 0:40:20,587
大家都很熟悉两种标准的浮点类型

680
00:40:20,654 --> 0:40:22,956
所以我们有两者64位

681
00:40:23,290 --> 0:40:24,958
和浮点32位

682
00:40:26,093 --> 0:40:29,897
所以在A11中我们也有

683
00:40:30,931 --> 0:40:37,104
它的范围和精度都要小得多

684
00:40:38,038 --> 0:40:39,339
但在某些情况下 比如机器学习

685
00:40:39,406 --> 0:40:41,441
或当你试图通过Metal

686
00:40:41,608 --> 0:40:44,378
这是很棒的

687
00:40:45,445 --> 0:40:47,714
如果把它们放到向量中

688
00:40:47,948 --> 0:40:50,450
在此你可以把它们更多的放在

689
00:40:53,353 --> 0:40:55,956
因此这也是你可以专门化代码的东西

690
00:40:56,890 --> 0:40:59,826
一般来说需要记住的是

691
00:41:00,494 --> 0:41:02,429
这些特性并不是随处可见的

692
00:41:03,463 --> 0:41:06,533
因此当你想使用它们时

693
00:41:06,600 --> 0:41:08,569
在运行的设备上是动态可用的

694
00:41:08,635 --> 0:41:09,937
sysctlbyname

695
00:41:10,337 --> 0:41:12,239
来实现

696
00:41:12,306 --> 0:41:14,074
（检测指令集扩展）

697
00:41:14,141 --> 0:41:16,577
因此总的来说

698
00:41:16,643 --> 0:41:18,946
系统框架中完成了所有工作

699
00:41:21,849 --> 0:41:24,084
这是三个新的指令集扩展

700
00:41:24,484 --> 0:41:26,320
在iMac Pro

701
00:41:26,386 --> 0:41:30,824
在iPhone X、8和8 Plus上

702
00:41:30,891 --> 0:41:33,360
（新指令集扩展）

703
00:41:33,827 --> 0:41:36,563
这就是Xcode中

704
00:41:37,264 --> 0:41:41,668
所以从C结构的ARC对象指针

705
00:41:41,969 --> 0:41:43,837
Xcode 10中

706
00:41:45,005 --> 0:41:47,174
还有一些我们甚至没有讨论过的东西

707
00:41:47,441 --> 0:41:49,610
比如超过100个新的警告

708
00:41:49,810 --> 0:41:53,614
支持C++ 17标准库函数

709
00:41:55,782 --> 0:41:57,284
如果你想了解更多

710
00:41:57,351 --> 0:42:00,487
我们将很快有视频和幻灯片

711
00:41:57,351 --> 0:42:00,487
我们将很快有视频和幻灯片

712
00:42:01,088 --> 0:42:04,424
如果你出席了本场会议

713
00:42:04,892 --> 0:42:05,893
谢谢大家
