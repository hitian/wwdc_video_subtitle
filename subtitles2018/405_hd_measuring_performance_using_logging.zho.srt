1
00:00:06,516 --> 0:00:16,500
[ 音乐 ]

2
00:00:22,516 --> 0:00:30,756
[ 掌声 ]

3
00:00:31,256 --> 0:00:33,646
&gt;&gt; 下午好

4
00:00:34,516 --> 0:00:35,556
我叫 Shane

5
00:00:35,956 --> 0:00:37,476
我来自 Darwin Runtime 团队

6
00:00:37,756 --> 0:00:39,146
欢迎大家来到

7
00:00:39,146 --> 0:00:40,856
“使用日志来

8
00:00:40,856 --> 0:00:41,226
衡量性能”

9
00:00:42,616 --> 0:00:44,676
我们在周一听到了很多

10
00:00:44,766 --> 0:00:46,086
关于性能的东西

11
00:00:46,706 --> 0:00:47,696
性能是

12
00:00:47,696 --> 0:00:49,526
良好用户体验的

13
00:00:49,526 --> 0:00:50,516
关键之一

14
00:00:50,936 --> 0:00:52,816
人们希望他们的游戏

15
00:00:52,906 --> 0:00:54,176
和 App 能跑得快

16
00:00:54,936 --> 0:00:56,126
同时兼具流畅性和灵敏性

17
00:00:57,416 --> 0:01:02,066
但软件是复杂的

18
00:00:57,416 --> 0:01:02,066
但软件是复杂的

19
00:01:02,066 --> 0:01:04,916
这意味着当你的 App 在运行时

20
00:01:05,036 --> 0:01:06,596
有时还同时发生着很多事情

21
00:01:06,596 --> 0:01:09,876
这意味着你可以

22
00:01:09,876 --> 0:01:11,486
从一些意想不到的地方

23
00:01:11,486 --> 0:01:12,746
找到性能的突出点

24
00:01:13,716 --> 0:01:16,106
这么做的话

25
00:01:16,106 --> 0:01:18,066
发觉这些性能突出点需要你

26
00:01:18,136 --> 0:01:20,076
对程序的行为有所理解 

27
00:01:20,076 --> 0:01:21,616
有时需要

28
00:01:21,616 --> 0:01:22,416
更深的理解

29
00:01:23,046 --> 0:01:24,746
它要求你知道

30
00:01:24,746 --> 0:01:26,376
你的代码具体在什么时候运行

31
00:01:26,506 --> 0:01:28,696
一段运算具体花了多少时间

32
00:01:29,546 --> 0:01:31,256
所以这是一个

33
00:01:31,406 --> 0:01:33,706
能让好工具真正发挥作用的地方

34
00:01:34,536 --> 0:01:36,146
我们知道开发更好的工具

35
00:01:36,146 --> 0:01:37,816
并交给你们使用

36
00:01:37,816 --> 0:01:39,936
可以使我们

37
00:01:39,936 --> 0:01:41,136
帮助你们成为

38
00:01:41,136 --> 0:01:42,116
更有效率的开发者

39
00:01:42,776 --> 0:01:44,416
所以今天我要说说

40
00:01:44,416 --> 0:01:45,236
一个这样的工具

41
00:01:45,636 --> 0:01:47,076
今天我要说说

42
00:01:47,406 --> 0:01:48,226
Signposts

43
00:01:48,796 --> 0:01:50,796
Signposts 是 OSLog 家族中的

44
00:01:50,796 --> 0:01:51,756
新成员

45
00:01:52,696 --> 0:01:56,296
你可以在 macOS 中使用

46
00:01:56,436 --> 0:01:58,206
你也可以在 iOS 中使用

47
00:01:58,296 --> 0:01:59,866
你可以在 Swift 和 C 里面使用

48
00:02:00,196 --> 0:02:02,596
但最酷的是

49
00:02:02,736 --> 0:02:04,936
我们将它整合进了 Instruments

50
00:02:05,466 --> 0:02:06,606
这意味着 Instruments 可以

51
00:02:06,606 --> 0:02:07,766
获得 Signposts 产生的数据

52
00:02:07,766 --> 0:02:12,136
让你对程序的行为 有更深的理解

53
00:02:13,496 --> 0:02:15,476
首先简单讲下历史

54
00:02:16,556 --> 0:02:18,926
我们在几年前就推出了 OSLog

55
00:02:19,696 --> 0:02:21,826
这是我们关于日志设备

56
00:02:21,826 --> 0:02:22,746
的新想法

57
00:02:23,006 --> 0:02:26,076
这是我们从系统中 获取调试信息的方式

58
00:02:26,456 --> 0:02:29,186
我们是怀着提升效率的目标

59
00:02:29,356 --> 0:02:31,586
并牢记着隐私的重要性 来开发它的

60
00:02:32,696 --> 0:02:34,146
这里你可以看到一段

61
00:02:34,146 --> 0:02:35,796
OSLog 的代码示例

62
00:02:35,796 --> 0:02:37,256
我刚刚创建了一个简单的日志句柄

63
00:02:37,256 --> 0:02:39,566
并把 “hello world” 传给了它

64
00:02:40,326 --> 0:02:43,016
Signposts 继承了 OSLog 的 API

65
00:02:43,796 --> 0:02:44,536
但它是为了描述

66
00:02:44,536 --> 0:02:45,576
性能使用的情况

67
00:02:45,816 --> 0:02:46,486
这意味着它们在传达

68
00:02:46,486 --> 0:02:48,156
和性能有关的信息

69
00:02:48,156 --> 0:02:49,676
并且我们把它

70
00:02:49,756 --> 0:02:51,026
整合进了我们的开发者工具中

71
00:02:51,026 --> 0:02:52,846
也就是说你可以

72
00:02:52,936 --> 0:02:53,876
用 Signposts 来给你的

73
00:02:53,876 --> 0:02:55,486
代码加上注释然后打开

74
00:02:55,486 --> 0:02:57,176
Instruments 就能看到这个

75
00:02:58,526 --> 0:02:59,866
在这里 Instruments 向你展示了

76
00:03:00,406 --> 0:03:03,736
关于程序行为和 Signposts 活动

77
00:03:03,736 --> 0:03:05,596
的一个漂亮时间线

78
00:03:06,046 --> 0:03:07,186
然后在底部

79
00:03:07,186 --> 0:03:09,486
有一个聚合了

80
00:03:09,546 --> 0:03:11,316
Signposts 统计和分析数据

81
00:03:11,316 --> 0:03:13,216
的表格

82
00:03:13,216 --> 0:03:15,056
通过筛选拆解

83
00:03:15,056 --> 0:03:16,706
来检查你程序的

84
00:03:16,876 --> 0:03:17,126
行为

85
00:03:18,506 --> 0:03:20,476
此次会议中我会讲

86
00:03:20,706 --> 0:03:21,986
如何在你的代码中使用

87
00:03:21,986 --> 0:03:23,366
Signposts 并向你展示

88
00:03:23,366 --> 0:03:24,086
它的功能

89
00:03:24,536 --> 0:03:25,226
然后我们将展示

90
00:03:25,226 --> 0:03:29,436
新的 Instrument 和 Signposts 的图像

91
00:03:29,436 --> 0:03:31,296
使你对 Signposts 和 Instrument

92
00:03:31,296 --> 0:03:34,736
的协作有直观的理解 让我们开始吧

93
00:03:35,556 --> 0:03:38,946
我先从一个非常简单的例子开始

94
00:03:39,766 --> 0:03:42,466
假设这是你的 App

95
00:03:43,116 --> 0:03:44,586
你想调查

96
00:03:44,586 --> 0:03:46,836
一块特定界面

97
00:03:46,896 --> 0:03:49,456
刷新所需要的时间

98
00:03:49,966 --> 0:03:51,856
要达到这个目标

99
00:03:51,856 --> 0:03:53,566
你要加载一些图片并将它们

100
00:03:53,566 --> 0:03:54,176
放在屏幕上

101
00:03:54,696 --> 0:03:57,576
所以简单来说从 App 的

102
00:03:57,576 --> 0:04:01,346
这个 App 做的工作就是抓取素材

103
00:03:57,576 --> 0:04:01,346
这个 App 做的工作就是抓取素材

104
00:04:01,486 --> 0:04:02,456
当你抓取完所有素材以后

105
00:04:02,456 --> 0:04:04,296
界面就刷新了

106
00:04:05,436 --> 0:04:07,116
一个 Signpost 允许我们

107
00:04:07,176 --> 0:04:09,466
标记一段行为的开始

108
00:04:09,466 --> 0:04:11,196
和结束然后将

109
00:04:11,196 --> 0:04:12,586
这时间上的两点

110
00:04:12,586 --> 0:04:14,476
和这两个日志事件关联

111
00:04:15,326 --> 0:04:18,086
它们通过调用了一个

112
00:04:18,086 --> 0:04:19,106
os_signpost 函数来完成

113
00:04:19,305 --> 0:04:20,516
有两种调用方式

114
00:04:20,616 --> 0:04:23,296
一种是 .begin 一种是 .end

115
00:04:23,726 --> 0:04:25,776
这里我用一个下面

116
00:04:25,776 --> 0:04:27,526
带 b 的箭头代表开始

117
00:04:27,926 --> 0:04:29,446
用下面带 e 的箭头

118
00:04:29,446 --> 0:04:31,626
代表结束

119
00:04:31,626 --> 0:04:32,936
然后我们将这两点

120
00:04:32,936 --> 0:04:34,126
联系起来

121
00:04:34,126 --> 0:04:36,296
让你知道

122
00:04:36,366 --> 0:04:37,736
这个间隔经过了多少时间

123
00:04:37,736 --> 0:04:39,276
好了

124
00:04:40,126 --> 0:04:42,246
代码里这里有一段

125
00:04:42,246 --> 0:04:44,076
这个算法的简单应用

126
00:04:44,556 --> 0:04:45,886
对于界面的每个元素

127
00:04:45,886 --> 0:04:47,236
我们都要获取素材

128
00:04:47,236 --> 0:04:49,296
并且想要测量

129
00:04:49,296 --> 0:04:51,506
这个操作所需的时间

130
00:04:52,426 --> 0:04:53,786
要将 signpost 导入

131
00:04:53,786 --> 0:04:55,716
这段代码里

132
00:04:55,716 --> 0:04:57,396
我们只需将包含这个功能

133
00:04:57,596 --> 0:04:59,636
的 os.signpost 模块导入

134
00:05:00,506 --> 0:05:02,496
然后因为 Signposts 是

135
00:05:02,496 --> 0:05:04,146
OSLog 功能的一部分

136
00:05:04,586 --> 0:05:06,276
我们要创建一个日志句柄

137
00:05:06,796 --> 0:05:08,406
这里 这个日志句柄有两个参数

138
00:05:08,406 --> 0:05:10,296
一个 subsystem 和一个 category

139
00:05:11,216 --> 0:05:13,896
subsystem 可能在你整个

140
00:05:13,896 --> 0:05:14,566
项目中都是

141
00:05:14,566 --> 0:05:15,096
一样的

142
00:05:15,516 --> 0:05:16,676
它看起来非常像你的套装 ID

143
00:05:16,676 --> 0:05:18,666
它代表着软件的

144
00:05:18,666 --> 0:05:19,996
组成部分

145
00:05:19,996 --> 0:05:21,246
可能是你使用的框架

146
00:05:22,816 --> 0:05:24,726
category 是用来关联

147
00:05:25,346 --> 0:05:27,266
将相关的操作或者相关的

148
00:05:27,266 --> 0:05:28,586
signposts 组合在一起

149
00:05:29,136 --> 0:05:30,236
稍后你将在会议中看到

150
00:05:30,236 --> 0:05:33,096
为什么它很有用

151
00:05:33,256 --> 0:05:34,596
当我们有了日志句柄后

152
00:05:35,416 --> 0:05:37,516
我们将调用 os_signpost 函数两次

153
00:05:37,826 --> 0:05:39,036
一次用 .begin. 一次用 .end.

154
00:05:39,036 --> 0:05:41,486
我们将日志句柄传给

155
00:05:41,486 --> 0:05:42,876
这几次调用

156
00:05:42,876 --> 0:05:44,566
第三个参数

157
00:05:44,956 --> 0:05:46,686
是 signpost 名称

158
00:05:47,826 --> 0:05:49,396
signpost 名称是

159
00:05:49,396 --> 0:05:51,156
一个字符串常量

160
00:05:51,186 --> 0:05:52,996
用来确定间隔时间

161
00:05:53,056 --> 0:05:54,676
用来确定我们想要测量的操作

162
00:05:55,696 --> 0:05:57,326
这个字符串常量是

163
00:05:57,326 --> 0:05:59,346
用来匹配我们

164
00:05:59,346 --> 0:06:00,806
通过调用的 os_signpost 函数

165
00:05:59,346 --> 0:06:00,806
通过调用的 os_signpost 函数

166
00:06:00,806 --> 0:06:02,756
注释或标记过的

167
00:06:02,966 --> 0:06:04,606
开始点和结束点

168
00:06:05,026 --> 0:06:07,416
所以在我们的时间线上

169
00:06:07,416 --> 0:06:08,086
看起来就像这样

170
00:06:08,086 --> 0:06:09,676
在每段工作的开始

171
00:06:09,676 --> 0:06:11,696
我们放了一个

172
00:06:11,696 --> 0:06:12,246
os_signpost

173
00:06:12,366 --> 0:06:13,336
在每段工作的结束

174
00:06:13,336 --> 0:06:14,776
我们放了一个 os_signpost

175
00:06:15,086 --> 0:06:16,646
因为这些字符串常量

176
00:06:16,646 --> 0:06:17,756
在开始和结束的调用点上

177
00:06:17,756 --> 0:06:19,286
按顺序排好了

178
00:06:19,286 --> 0:06:20,856
我们可以将它俩匹配

179
00:06:20,856 --> 0:06:23,266
但是如果我们想要

180
00:06:23,266 --> 0:06:25,346
测量整段操作

181
00:06:25,346 --> 0:06:26,836
完成全部刷新

182
00:06:26,836 --> 0:06:27,866
所花的时间呢

183
00:06:28,526 --> 0:06:31,236
在我们代码里

184
00:06:31,236 --> 0:06:32,966
我们只需添加另一对 os_signpost

185
00:06:32,966 --> 0:06:34,646
begin 和 end 调用

186
00:06:34,836 --> 0:06:35,346
非常简单

187
00:06:35,836 --> 0:06:37,196
这次我赋予了一个

188
00:06:37,306 --> 0:06:38,446
不同的字符串常量

189
00:06:38,556 --> 0:06:39,756
所以就有一个不一样的 signpost 名称

190
00:06:39,836 --> 0:06:41,616
这次用了 “Refresh Panel”

191
00:06:41,616 --> 0:06:43,206
来表示这是一个独立的间隔时间

192
00:06:43,206 --> 0:06:45,166
和循环里的间隔时间相独立

193
00:06:47,236 --> 0:06:50,536
在我们的时间线上

194
00:06:50,536 --> 0:06:51,846
我们标记了另外两个

195
00:06:51,846 --> 0:06:52,656
signposts

196
00:06:54,166 --> 0:06:55,606
而匹配的字符串常量

197
00:06:55,606 --> 0:06:57,296
“Refresh Panel”

198
00:06:57,296 --> 0:06:58,426
让系统知道

199
00:06:58,426 --> 0:07:01,326
这两点是相关联的

200
00:06:58,426 --> 0:07:01,326
这两点是相关联的

201
00:07:02,846 --> 0:07:03,136
好了

202
00:07:03,926 --> 0:07:05,796
这并不是个超级简单的例子

203
00:07:06,226 --> 0:07:07,876
如果你的程序一直

204
00:07:07,906 --> 0:07:09,736
按第一步第二步

205
00:07:09,736 --> 0:07:11,046
然后第三步的顺序来走

206
00:07:11,166 --> 0:07:11,816
这么做是可以的

207
00:07:12,256 --> 0:07:14,706
但在我们系统中

208
00:07:14,706 --> 0:07:16,686
经常有很多工作是异步发生的

209
00:07:17,146 --> 0:07:17,386
嗯

210
00:07:17,796 --> 0:07:19,816
并不是有第一步

211
00:07:19,816 --> 0:07:21,066
第二步第三步

212
00:07:21,066 --> 0:07:23,136
我们通常按顺序开始

213
00:07:23,136 --> 0:07:24,796
对吧 然后

214
00:07:24,796 --> 0:07:25,956
稍后再完成它们

215
00:07:26,296 --> 0:07:27,106
这意味着

216
00:07:27,736 --> 0:07:28,766
这些操作可以

217
00:07:28,766 --> 0:07:29,346
同时发生

218
00:07:29,346 --> 0:07:30,086
他们可以重叠

219
00:07:31,226 --> 0:07:32,786
在这种情况下我们需要

220
00:07:32,786 --> 0:07:34,046
给系统一些

221
00:07:34,046 --> 0:07:35,636
额外的信息

222
00:07:35,636 --> 0:07:36,836
以让它区分开

223
00:07:36,836 --> 0:07:38,126
这些 signposts

224
00:07:39,156 --> 0:07:42,096
要做到这一点

225
00:07:42,096 --> 0:07:43,366
目前我们只用到了名称

226
00:07:43,716 --> 0:07:43,886
对吧

227
00:07:43,886 --> 0:07:45,726
这个名称会匹配

228
00:07:45,726 --> 0:07:46,566
开始和结束点

229
00:07:47,276 --> 0:07:48,436
所以字符串常量现在

230
00:07:48,436 --> 0:07:50,026
已经标识了时间段

231
00:07:50,026 --> 0:07:51,236
但还没有让我们可以

232
00:07:51,236 --> 0:07:53,436
区分重叠的时间段

233
00:07:54,236 --> 0:07:55,346
要做到这一点我们给

234
00:07:55,346 --> 0:07:56,606
Signpost 调用添加

235
00:07:56,606 --> 0:07:58,816
了另一块信息 叫做 signpost ID

236
00:08:00,256 --> 0:08:02,196
signpost ID 会告诉系统

237
00:08:02,196 --> 0:08:04,076
这些是同一类型的操作

238
00:08:04,076 --> 0:08:06,516
但是它们之间

239
00:08:06,546 --> 0:08:07,586
又互相不一样

240
00:08:08,366 --> 0:08:11,276
所以如果两项操作重叠了

241
00:08:11,276 --> 0:08:12,376
但它们有着不同的 signpost ID 

242
00:08:12,376 --> 0:08:13,446
系统就会知道

243
00:08:13,486 --> 0:08:14,686
它们是不同的时间段

244
00:08:15,096 --> 0:08:16,516
只要你将相同的

245
00:08:16,516 --> 0:08:18,046
signpost ID 传给了开始调用点

246
00:08:18,046 --> 0:08:19,196
和结束调用点

247
00:08:19,626 --> 0:08:21,096
这两个 signpost 就会

248
00:08:21,316 --> 0:08:22,546
相互关联

249
00:08:23,596 --> 0:08:25,936
你可以通过这个构造函数

250
00:08:25,936 --> 0:08:27,196
使用一个日志句柄

251
00:08:27,196 --> 0:08:29,666
来创建 signpost ID 但你也可以

252
00:08:29,666 --> 0:08:31,736
通过对象来创建

253
00:08:32,606 --> 0:08:33,765
如果你有一些对象

254
00:08:33,765 --> 0:08:35,226
代表你想做的事

255
00:08:35,226 --> 0:08:36,426
那么这样就很方便

256
00:08:36,895 --> 0:08:38,515
只要你使用了

257
00:08:38,515 --> 0:08:39,736
对象的同一实例

258
00:08:39,736 --> 0:08:41,456
就会生成同样的 signpost ID

259
00:08:41,826 --> 0:08:42,756
这意味着你不需要

260
00:08:42,806 --> 0:08:44,876
到处携带和存储 signpost ID

261
00:08:44,876 --> 0:08:46,756
你可以直接使用对象

262
00:08:48,966 --> 0:08:51,646
直观上你可以将

263
00:08:51,646 --> 0:08:53,616
signpost ID 想成允许我们

264
00:08:53,616 --> 0:08:55,086
向每次 signpost 调用

265
00:08:55,086 --> 0:08:56,926
传递一点额外的背景信息

266
00:08:57,926 --> 0:09:00,576
对于一段特定的操作

267
00:08:57,926 --> 0:09:00,576
对于一段特定的操作

268
00:09:00,576 --> 0:09:03,036
它可以将开始和结束标记联系起来

269
00:09:03,716 --> 0:09:04,916
这很重要因为这些操作

270
00:09:04,916 --> 0:09:06,336
不仅可能会重叠

271
00:09:06,336 --> 0:09:08,116
它们还通常需要花

272
00:09:08,186 --> 0:09:11,896
不一样的时间

273
00:09:12,116 --> 0:09:14,666
让我们到示例代码中看看

274
00:09:15,716 --> 0:09:16,466
这就是我们的代码

275
00:09:16,466 --> 0:09:18,026
我要将同步获取

276
00:09:18,026 --> 0:09:20,066
异步调用转换成

277
00:09:20,066 --> 0:09:21,036
异步获取

278
00:09:21,946 --> 0:09:23,266
现在我要给它一个

279
00:09:23,396 --> 0:09:24,436
completionHandler

280
00:09:24,436 --> 0:09:25,756
当素材获取完毕后

281
00:09:25,846 --> 0:09:27,236
这个闭包就会运行

282
00:09:28,446 --> 0:09:29,486
然后我又添加了

283
00:09:29,486 --> 0:09:30,946
一个闭包一个 completionHandler

284
00:09:31,346 --> 0:09:34,076
在素材获取完后就运行

285
00:09:35,006 --> 0:09:36,676
在每种情况下我都将

286
00:09:36,676 --> 0:09:38,266
os_signpost 结束调用

287
00:09:38,306 --> 0:09:40,426
放在了闭包内来指示

288
00:09:40,426 --> 0:09:42,256
这就是我想要标记时段

289
00:09:42,256 --> 0:09:42,916
结束的时间

290
00:09:44,266 --> 0:09:44,526
OK

291
00:09:45,796 --> 0:09:47,426
因为我们觉得

292
00:09:48,296 --> 0:09:49,616
这些时段会互相重叠

293
00:09:49,616 --> 0:09:51,046
我们想针对每个时段

294
00:09:51,076 --> 0:09:52,456
创建新的 signpost ID

295
00:09:52,876 --> 0:09:54,416
注意在上面的例子中我已经

296
00:09:54,606 --> 0:09:55,756
通过构造函数使用日志句柄

297
00:09:55,756 --> 0:09:56,576
创建了一个

298
00:09:56,686 --> 0:09:58,106
第二个 我是通过

299
00:10:01,116 --> 0:10:03,436
然后我将这些

300
00:10:03,436 --> 0:10:06,226
signpost ID 传给调用处

301
00:10:06,676 --> 0:10:07,126
做完了

302
00:10:07,876 --> 0:10:10,706
你可以将 signpost 想成

303
00:10:10,706 --> 0:10:12,146
整理好的一种

304
00:10:12,146 --> 0:10:13,846
分类或者层次

305
00:10:14,336 --> 0:10:14,566
对吧

306
00:10:15,066 --> 0:10:16,616
所有这些操作都由

307
00:10:16,616 --> 0:10:17,936
日志句柄相关联

308
00:10:18,036 --> 0:10:19,396
代表日志类型

309
00:10:20,106 --> 0:10:21,456
对我们感兴趣的每段操作

310
00:10:21,456 --> 0:10:22,706
我们赋予了它一个

311
00:10:22,706 --> 0:10:23,616
signpost 名称

312
00:10:25,096 --> 0:10:26,786
然后因为这些 signpost

313
00:10:26,986 --> 0:10:28,256
可能互相重叠

314
00:10:28,256 --> 0:10:29,626
我们给了它们 signpost ID

315
00:10:29,626 --> 0:10:32,016
告诉系统这是

316
00:10:32,016 --> 0:10:34,656
那段时间的一个

317
00:10:34,656 --> 0:10:35,136
特定实例

318
00:10:36,596 --> 0:10:39,396
这个界面专门

319
00:10:39,666 --> 0:10:42,836
设计得很灵活

320
00:10:42,836 --> 0:10:44,196
这样你就可以在开始点

321
00:10:44,196 --> 0:10:46,416
和结束点控制所有的参数

322
00:10:46,416 --> 0:10:47,956
你可以控制 signpost 名称

323
00:10:47,956 --> 0:10:51,036
赋予的日志句柄和 ID

324
00:10:51,036 --> 0:10:52,276
我们这么做是因为

325
00:10:52,276 --> 0:10:53,966
只要你在开始点

326
00:10:54,126 --> 0:10:55,656
和结束点提供了相同的参数

327
00:10:55,656 --> 0:10:57,406
那两个 signpost 

328
00:10:57,406 --> 0:10:59,126
就能够互相匹配

329
00:10:59,526 --> 0:11:01,586
这意味着你的开始和结束点

330
00:10:59,526 --> 0:11:01,586
这意味着你的开始和结束点

331
00:11:01,586 --> 0:11:02,096
可以在不同的函数中

332
00:11:02,736 --> 0:11:03,816
它们可以和不同的对象

333
00:11:03,816 --> 0:11:04,776
相关联

334
00:11:04,816 --> 0:11:05,946
它们甚至可以存在不同的

335
00:11:05,946 --> 0:11:06,646
源文件中

336
00:11:07,356 --> 0:11:08,746
我们这么做是因为我们想

337
00:11:08,746 --> 0:11:10,556
让你可以在你的代码里使用它

338
00:11:10,856 --> 0:11:12,366
所以无论你有什么

339
00:11:12,366 --> 0:11:14,576
进入和退出的条件

340
00:11:14,626 --> 0:11:17,726
你都可以调用

341
00:11:17,876 --> 0:11:20,886
这就是如何使用 signposts

342
00:11:20,886 --> 0:11:22,366
来测量间隔时间

343
00:11:22,906 --> 0:11:24,516
可能你还想随 signposts

344
00:11:24,516 --> 0:11:25,716
传达一些额外的信息

345
00:11:25,716 --> 0:11:26,916
一些额外的

346
00:11:26,916 --> 0:11:28,496
和性能有关的信息

347
00:11:28,496 --> 0:11:30,396
对于这个 我们有办法

348
00:11:30,396 --> 0:11:32,306
向 signpost 调用添加元数据

349
00:11:33,526 --> 0:11:35,796
这是你的基础 signpost 调用

350
00:11:36,106 --> 0:11:37,256
在此基础上我们可以

351
00:11:37,256 --> 0:11:39,056
添加一个字符串常量参数

352
00:11:39,796 --> 0:11:40,846
这允许你为你的

353
00:11:40,846 --> 0:11:42,626
开始和结束调用点添加一些

354
00:11:42,626 --> 0:11:43,316
背景信息

355
00:11:44,366 --> 0:11:46,016
对于一段特定的操作

356
00:11:46,206 --> 0:11:47,896
你可能有很多进入和退出点

357
00:11:47,896 --> 0:11:50,416
但是字符串常量

358
00:11:50,416 --> 0:11:52,756
也是一个 OSLog 格式的字符串

359
00:11:53,226 --> 0:11:54,756
这意味着我可以拿它来

360
00:11:54,756 --> 0:11:57,406
向 signpost 传递额外的数据

361
00:11:57,686 --> 0:11:59,226
这里 比如说

362
00:11:59,226 --> 0:12:01,556
我使用了 %d 传递了四个整数

363
00:11:59,226 --> 0:12:01,556
我使用了 %d 传递了四个整数

364
00:12:02,806 --> 0:12:04,846
但是因为这是一个 OSLog 格式的

365
00:12:04,846 --> 0:12:06,986
字符串 我还可以使用它来

366
00:12:06,986 --> 0:12:08,626
传递许多不同类型的参数

367
00:12:08,786 --> 0:12:09,766
这里我传递了一些

368
00:12:09,766 --> 0:12:10,796
浮点数

369
00:12:10,916 --> 0:12:12,266
我甚至使用了格式说明符

370
00:12:12,266 --> 0:12:14,726
来告诉系统

371
00:12:14,726 --> 0:12:15,736
我想要的精确度

372
00:12:16,246 --> 0:12:19,396
你也可以使用字符串常量

373
00:12:19,396 --> 0:12:20,926
formatter 来传递动态字符串

374
00:12:21,746 --> 0:12:23,086
这样我们可以

375
00:12:23,086 --> 0:12:24,186
传递来自函数调用

376
00:12:24,186 --> 0:12:25,656
或者来自

377
00:12:25,656 --> 0:12:27,186
用户输入的信息

378
00:12:28,046 --> 0:12:30,036
而我们使用

379
00:12:30,036 --> 0:12:31,756
固定大小的存储量来引用

380
00:12:31,756 --> 0:12:33,516
这个格式的字符串常量

381
00:12:33,516 --> 0:12:34,906
这意味着你可以想

382
00:12:34,906 --> 0:12:36,746
让它多长和易于理解

383
00:12:36,746 --> 0:12:37,136
都行

384
00:12:39,136 --> 0:12:41,356
这段易于理解的字符串

385
00:12:41,356 --> 0:12:42,346
跟之后 Instruments 渲染的

386
00:12:42,346 --> 0:12:43,656
是一样的

387
00:12:44,046 --> 0:12:45,986
所以你可以随意给它一些背景

388
00:12:45,986 --> 0:12:47,106
我在这里列举了

389
00:12:47,106 --> 0:12:48,006
很多参数

390
00:12:48,446 --> 0:12:49,866
Instruments 能够展示

391
00:12:49,866 --> 0:12:51,146
完整的渲染后的字符串

392
00:12:51,576 --> 0:12:53,146
或者它仍然对所附的

393
00:12:53,146 --> 0:12:55,486
数据有程序访问权限

394
00:12:57,756 --> 0:12:59,816
除了这些时段的

395
00:12:59,816 --> 0:13:01,226
元数据以外你可能还想

396
00:12:59,816 --> 0:13:01,226
元数据以外你可能还想

397
00:13:01,226 --> 0:13:03,496
添加独立的时间点

398
00:13:04,156 --> 0:13:06,236
也就是说除了

399
00:13:06,236 --> 0:13:08,246
开始 signpost 和结束 signpost 以外

400
00:13:08,246 --> 0:13:09,356
你还可以有这样一个 signpost

401
00:13:09,356 --> 0:13:10,726
它没有跟一个特定的

402
00:13:10,786 --> 0:13:12,646
时间段绑定

403
00:13:12,646 --> 0:13:14,406
而是跟一个固定的时刻绑定

404
00:13:14,636 --> 0:13:16,596
对于这个我们有一个

405
00:13:16,596 --> 0:13:17,946
类型为 event 的 os_signpost

406
00:13:18,886 --> 0:13:20,136
event 类型的 os_signpost

407
00:13:20,136 --> 0:13:21,926
的调用和开始结束的调用

408
00:13:21,926 --> 0:13:23,676
看起来一样

409
00:13:23,676 --> 0:13:24,966
只不过多了 event 的类型

410
00:13:25,706 --> 0:13:27,706
它标记了一个特定的时间点

411
00:13:28,656 --> 0:13:29,806
你可以在时间段的

412
00:13:29,806 --> 0:13:32,186
范围内使用它

413
00:13:32,186 --> 0:13:33,266
或者可能你想追踪

414
00:13:33,266 --> 0:13:34,506
独立于一个时间段的事件

415
00:13:34,506 --> 0:13:36,176
比如一次用户交互

416
00:13:36,966 --> 0:13:39,436
所以对于我们刚刚讲的

417
00:13:39,436 --> 0:13:41,066
获取素材的时间间隔

418
00:13:41,066 --> 0:13:42,206
你可能想知道

419
00:13:42,206 --> 0:13:43,556
你在什么时候连接到了

420
00:13:43,596 --> 0:13:44,616
提供这个素材的服务

421
00:13:45,066 --> 0:13:45,906
或者你可能想知道

422
00:13:45,906 --> 0:13:47,466
你在什么时候 接收到了其中的几个字节

423
00:13:48,416 --> 0:13:49,636
你可以使用这个

424
00:13:49,636 --> 0:13:51,056
在一个时间段过程中

425
00:13:51,056 --> 0:13:52,556
多次更新

426
00:13:52,596 --> 0:13:54,986
此时间段的状态和进展

427
00:13:56,426 --> 0:13:58,416
或者你可能想追踪一个

428
00:13:58,416 --> 0:14:00,776
触发事件比如

429
00:13:58,416 --> 0:14:00,776
触发事件比如

430
00:14:00,776 --> 0:14:02,336
一次用户界面交互

431
00:14:02,336 --> 0:14:04,196
比如有人刚滑动屏幕

432
00:14:04,196 --> 0:14:05,276
来更新界面

433
00:14:05,816 --> 0:14:07,206
虽然如果你真的在

434
00:14:07,206 --> 0:14:08,306
研究一个性能问题

435
00:14:08,336 --> 0:14:09,846
他们可能滑动了很多次

436
00:14:09,846 --> 0:14:12,436
所以这可能是你看到的

437
00:14:14,786 --> 0:14:17,136
如果你启用了 signpost

438
00:14:17,636 --> 0:14:18,686
默认情况下它们是开启的

439
00:14:19,396 --> 0:14:20,366
但是我想讲讲

440
00:14:20,486 --> 0:14:22,216
有条件地开启和关闭它们

441
00:14:23,986 --> 0:14:25,546
首先我想强调

442
00:14:25,546 --> 0:14:26,766
我们把 signpost 设计得

443
00:14:26,906 --> 0:14:27,536
轻便小巧

444
00:14:28,066 --> 0:14:29,986
这意味着我们做了很多

445
00:14:29,986 --> 0:14:32,146
来优化它们的启动时间

446
00:14:32,666 --> 0:14:33,376
我们通过优化了编译器

447
00:14:33,376 --> 0:14:34,796
使得任务能

448
00:14:34,796 --> 0:14:36,546
提前进行而非

449
00:14:36,606 --> 0:14:37,436
在运行时

450
00:14:37,926 --> 0:14:39,416
我们还推迟了很多事情

451
00:14:39,416 --> 0:14:40,796
使它们可以在 Instruments

452
00:14:40,796 --> 0:14:41,656
后台运行

453
00:14:41,946 --> 0:14:43,406
这意味着当

454
00:14:43,406 --> 0:14:44,376
在发送 signposts 时

455
00:14:44,376 --> 0:14:46,416
它们只会占用非常少的系统资源

456
00:14:46,876 --> 0:14:47,896
我们这么做是因为我们想

457
00:14:47,896 --> 0:14:49,456
最小化它给你的代码运行

458
00:14:49,456 --> 0:14:50,436
带来的影响

459
00:14:50,916 --> 0:14:52,096
我们这么做还因为

460
00:14:52,096 --> 0:14:53,236
我们想确保即使

461
00:14:53,236 --> 0:14:55,076
你的时间跨度非常小

462
00:14:55,076 --> 0:14:56,946
你也能发送很多

463
00:14:56,946 --> 0:14:57,866
signpost 来得到一些

464
00:14:57,866 --> 0:14:58,976
精确的测量结果

465
00:15:00,236 --> 0:15:01,566
但是你也可能想要

466
00:15:01,566 --> 0:15:03,066
关闭你的 signpost

467
00:15:03,406 --> 0:15:05,186
你可能想要通过

468
00:15:05,186 --> 0:15:06,836
特定路径中的代码消除

469
00:15:06,836 --> 0:15:07,656
尽可能多的开销

470
00:15:08,176 --> 0:15:10,186
或者你可能有两种类型的

471
00:15:10,186 --> 0:15:11,386
signposts 两种的体量

472
00:15:11,386 --> 0:15:14,546
都非常大 但是在某一时刻

473
00:15:14,546 --> 0:15:16,016
你仅仅想对其中一种

474
00:15:16,016 --> 0:15:17,096
进行除错

475
00:15:17,876 --> 0:15:19,536
要这么做的话

476
00:15:19,536 --> 0:15:20,806
我们要利用 OSLog 的一个功能

477
00:15:20,856 --> 0:15:23,266
禁用的日志句柄

478
00:15:24,136 --> 0:15:25,896
禁用的日志句柄是一个

479
00:15:26,386 --> 0:15:27,226
简单的句柄

480
00:15:27,276 --> 0:15:30,036
它的功能是把

481
00:15:30,096 --> 0:15:31,846
对于该句柄的

482
00:15:31,846 --> 0:15:33,766
OSLog 和 os_signpost 调用

483
00:15:33,766 --> 0:15:35,736
都变成类似于空操作的东西

484
00:15:36,556 --> 0:15:38,186
事实上 如果你在 C 当中使用它

485
00:15:38,466 --> 0:15:39,576
我们甚至会帮你检查行

486
00:15:39,626 --> 0:15:41,506
我们甚至不会

487
00:15:41,506 --> 0:15:42,856
评估剩下的参数

488
00:15:43,546 --> 0:15:45,246
所以你可以在运行时

489
00:15:45,246 --> 0:15:46,156
修改这个句柄

490
00:15:46,566 --> 0:15:47,746
让我给你看个例子

491
00:15:48,426 --> 0:15:51,226
让我们回到一开始

492
00:15:51,226 --> 0:15:53,146
使用的第一段代码示例

493
00:15:53,146 --> 0:15:54,846
你可以在上面看到初始化的

494
00:15:54,846 --> 0:15:56,066
日志句柄

495
00:15:56,896 --> 0:15:59,066
而我现在要让这个初始化

496
00:15:59,106 --> 0:16:00,596
有条件地发生

497
00:15:59,106 --> 0:16:00,596
有条件地发生

498
00:16:01,076 --> 0:16:02,866
所以我要么将它分配给

499
00:16:02,976 --> 0:16:04,546
普通的 os_log 构造函数

500
00:16:05,066 --> 0:16:05,906
或者把它分配给

501
00:16:05,906 --> 0:16:07,196
禁用的日志句柄

502
00:16:07,776 --> 0:16:11,126
如果我们采取第一种方法

503
00:16:11,126 --> 0:16:12,776
所有的 os_signpost 调用都会

504
00:16:12,776 --> 0:16:14,546
按照我刚刚说的一样进行

505
00:16:14,546 --> 0:16:15,996
但如果我们采取第二种方法

506
00:16:15,996 --> 0:16:17,256
这些 os_signpost 调用都会变成

507
00:16:17,256 --> 0:16:18,026
接近于空操作

508
00:16:18,876 --> 0:16:21,696
我刚刚说过

509
00:16:21,696 --> 0:16:22,886
我没有必要调用任何我的

510
00:16:22,886 --> 0:16:24,196
调用 我没有必要改变

511
00:16:24,196 --> 0:16:25,126
我的任何调用

512
00:16:25,126 --> 0:16:26,756
我只需要改变初始化

513
00:16:27,566 --> 0:16:29,346
我让初始化条件

514
00:16:29,346 --> 0:16:31,446
依赖于环境变量

515
00:16:31,696 --> 0:16:32,716
你可以在

516
00:16:32,716 --> 0:16:34,046
对程序进行调试时

517
00:16:34,046 --> 0:16:35,136
在 Xcode scheme 中

518
00:16:35,136 --> 0:16:37,236
对此进行设置

519
00:16:37,836 --> 0:16:39,126
我刚才说你没有必要

520
00:16:39,126 --> 0:16:40,346
在调用处内进行改变

521
00:16:40,346 --> 0:16:41,326
但是你可能有一些

522
00:16:41,326 --> 0:16:44,506
用于特定 instrumentation 的功能

523
00:16:44,586 --> 0:16:46,346
也就是说虽然代价高昂

524
00:16:46,346 --> 0:16:47,586
但可能只有在调试时

525
00:16:47,586 --> 0:16:48,086
才使用它

526
00:16:48,926 --> 0:16:50,976
这种情况下你可以检查一个

527
00:16:50,976 --> 0:16:52,486
特定的日志句柄

528
00:16:52,486 --> 0:16:53,736
看看在启用 signpost

529
00:16:54,076 --> 0:16:55,536
属性中是否启用了 signpost

530
00:16:56,036 --> 0:16:57,256
启用了 signpost 的属性

531
00:16:57,256 --> 0:16:58,656
可以用来控制

532
00:16:58,656 --> 0:17:00,526
额外的操作

533
00:16:58,656 --> 0:17:00,526
额外的操作

534
00:17:02,586 --> 0:17:02,876
好的

535
00:17:03,426 --> 0:17:05,076
我刚展示过的所有例子

536
00:17:05,076 --> 0:17:06,646
都是用的 Swift

537
00:17:07,356 --> 0:17:11,175
但是 signposts 也可以用于 C

538
00:17:13,086 --> 0:17:13,925
我刚刚讲过的

539
00:17:13,955 --> 0:17:15,476
所有功能都可以用

540
00:17:15,476 --> 0:17:17,266
日志句柄

541
00:17:17,675 --> 0:17:18,665
发送三种不同的

542
00:17:18,665 --> 0:17:21,236
signpost 以及管理

543
00:17:21,236 --> 0:17:22,476
你的 signpost 标识符

544
00:17:23,066 --> 0:17:23,816
对于那些对使用 C

545
00:17:23,816 --> 0:17:25,726
感兴趣的人来说

546
00:17:25,726 --> 0:17:26,876
我鼓励你们阅读标题文档

547
00:17:26,876 --> 0:17:28,086
标题文档涵盖了所有

548
00:17:28,086 --> 0:17:29,566
我刚讲的信息但是是从

549
00:17:29,566 --> 0:17:30,896
C 语言开发者的角度写的

550
00:17:32,236 --> 0:17:32,806
好了

551
00:17:33,476 --> 0:17:34,876
现在你知道了如何在

552
00:17:34,876 --> 0:17:35,866
代码中使用 signpost

553
00:17:36,356 --> 0:17:38,006
或许你对它们代表的东西

554
00:17:38,006 --> 0:17:39,386
有了一个思维模型

555
00:17:39,956 --> 0:17:41,436
所以我想让你们看看

556
00:17:41,436 --> 0:17:43,126
signposts 如何与

557
00:17:43,306 --> 0:17:43,926
Instruments 协作

558
00:17:44,486 --> 0:17:45,936
这一块 我要把

559
00:17:45,936 --> 0:17:46,906
剩下的环节交给

560
00:17:46,906 --> 0:17:48,416
我的同事 Chad

561
00:17:49,016 --> 0:17:49,276
谢谢

562
00:17:50,516 --> 0:17:56,796
[ 掌声 ]

563
00:17:57,296 --> 0:17:57,926
&gt;&gt; 好了

564
00:17:58,646 --> 0:17:59,246
谢谢你 Shane

565
00:18:00,486 --> 0:18:02,606
今天我要向大家演示

566
00:18:02,606 --> 0:18:04,036
Instruments 10 的

567
00:18:04,036 --> 0:18:05,016
三个重要的新功能

568
00:18:05,016 --> 0:18:06,776
帮助你更好地

569
00:18:06,776 --> 0:18:07,616
处理 signpost 数据

570
00:18:08,506 --> 0:18:10,436
第一个就是新的 os_signpost instrument

571
00:18:10,686 --> 0:18:11,656
这个 instrument 允许你

572
00:18:11,656 --> 0:18:13,186
记录 图形化

573
00:18:13,186 --> 0:18:14,986
并分析你 App

574
00:18:14,986 --> 0:18:16,736
的所有 signpost 活动

575
00:18:17,636 --> 0:18:20,036
下一个功能是 points of interest

576
00:18:20,036 --> 0:18:20,846
我会大概讲讲什么是

577
00:18:20,846 --> 0:18:22,316
points of interest

578
00:18:22,426 --> 0:18:23,946
你会在什么时候使用它

579
00:18:24,396 --> 0:18:26,026
然后我会向大家展示

580
00:18:26,026 --> 0:18:27,636
新的自定义 instrument 功能

581
00:18:27,636 --> 0:18:29,086
以及如何同 os_signpost

582
00:18:29,086 --> 0:18:31,946
使用它来得到关于

583
00:18:32,286 --> 0:18:34,536
signpost 的更精确的

584
00:18:34,536 --> 0:18:35,386
一个表示

585
00:18:35,986 --> 0:18:37,616
让我们看看

586
00:18:37,616 --> 0:18:38,346
操作示范吧

587
00:18:39,116 --> 0:18:39,216
好的

588
00:18:42,626 --> 0:18:44,526
首先让我们

589
00:18:44,526 --> 0:18:47,106
看看我们的示例程序

590
00:18:47,256 --> 0:18:48,986
这是我们的 Trailblazer App

591
00:18:50,046 --> 0:18:53,016
这个 App 向你展示了

592
00:18:53,016 --> 0:18:54,056
当地的登山路线

593
00:18:54,476 --> 0:18:56,626
当我们往下滑时

594
00:18:56,656 --> 0:18:58,756
它会为你下载这些好看的图片

595
00:18:59,916 --> 0:19:01,476
你会注意到最开始

596
00:18:59,916 --> 0:19:01,476
你会注意到最开始

597
00:19:01,566 --> 0:19:03,216
是白色的背景然后

598
00:19:03,216 --> 0:19:04,896
图片随后出现 填充了背景

599
00:19:04,896 --> 0:19:06,486
对于这类 App

600
00:19:06,486 --> 0:19:08,536
这是非常常见的现象

601
00:19:08,536 --> 0:19:09,526
有时它植入了

602
00:19:09,526 --> 0:19:12,466
future 或者 promise

603
00:19:12,466 --> 0:19:13,796
但是这个现象 虽然它对

604
00:19:13,896 --> 0:19:15,746
性能很有帮助

605
00:19:15,746 --> 0:19:17,496
它也很难被配置

606
00:19:17,556 --> 0:19:19,896
原因在于有很多异步的

607
00:19:19,896 --> 0:19:21,486
活动在同时进行

608
00:19:21,876 --> 0:19:23,796
当用户滑动时

609
00:19:23,796 --> 0:19:25,996
有一些下载在同时进行

610
00:19:25,996 --> 0:19:27,316
如果用户像这样

611
00:19:27,316 --> 0:19:29,226
飞快地滑动时那么

612
00:19:29,226 --> 0:19:31,646
在图像单元重新被使用

613
00:19:31,776 --> 0:19:33,536
之前下载可能还没有完成

614
00:19:34,066 --> 0:19:35,826
那么我们就得取消下载

615
00:19:36,076 --> 0:19:37,986
如果我们取消失败了

616
00:19:37,986 --> 0:19:40,236
那么一些下载就会

617
00:19:40,236 --> 0:19:41,326
并行运行但是我们

618
00:19:41,326 --> 0:19:42,276
并不想这样

619
00:19:42,936 --> 0:19:44,196
让我们看看如何

620
00:19:44,196 --> 0:19:46,416
使用 signposts 来分析

621
00:19:46,416 --> 0:19:47,866
我们的 Trailblazer 的 App

622
00:19:48,546 --> 0:19:51,326
在路线单元中

623
00:19:51,326 --> 0:19:53,026
有一个方式叫做

624
00:19:53,206 --> 0:19:54,956
startImageDownload

625
00:19:55,286 --> 0:19:56,486
当我们需要下载新图像时

626
00:19:56,486 --> 0:19:58,736
它就会被调用

627
00:19:58,996 --> 0:20:00,726
它传递了需要被下载的

628
00:19:58,996 --> 0:20:00,726
它传递了需要被下载的

629
00:20:01,016 --> 0:20:01,856
图像名称

630
00:20:02,506 --> 0:20:03,666
现在我们在这里有一个

631
00:20:04,256 --> 0:20:05,896
download helper 的类 

632
00:20:05,896 --> 0:20:07,386
我们创建一个传递名称的实例

633
00:20:07,386 --> 0:20:08,546
将我们自己设为委托

634
00:20:08,546 --> 0:20:09,626
当它下载完后就会

635
00:20:09,656 --> 0:20:10,136
回调我们

636
00:20:10,136 --> 0:20:13,486
这种情况下

637
00:20:13,486 --> 0:20:15,386
既然 downloader 代表

638
00:20:15,566 --> 0:20:16,816
同时进行的活动

639
00:20:16,816 --> 0:20:19,016
这个异步的工作

640
00:20:19,016 --> 0:20:20,836
就是 signpost ID 的绝佳依据

641
00:20:21,046 --> 0:20:22,046
我们现在用我们的

642
00:20:22,046 --> 0:20:25,156
downloader 对象来创建 signpost ID 

643
00:20:26,606 --> 0:20:27,746
要启用我们的 signposts

644
00:20:27,746 --> 0:20:29,356
我们要做一个 os_signpost begin

645
00:20:29,656 --> 0:20:30,886
我们将它发送到

646
00:20:30,886 --> 0:20:32,836
我们的 networking 日志句柄

647
00:20:32,876 --> 0:20:34,606
快速浏览下我们的

648
00:20:34,606 --> 0:20:35,616
networking 日志句柄

649
00:20:35,926 --> 0:20:37,516
你可以看到我们使用了

650
00:20:37,516 --> 0:20:39,446
Trailblazer 套装 ID 和

651
00:20:39,446 --> 0:20:40,906
networking 类别

652
00:20:41,606 --> 0:20:45,786
现在我们要传递一张图像

653
00:20:45,786 --> 0:20:47,896
不好意思是背景图片的

654
00:20:47,896 --> 0:20:49,086
signpost 名称这样我们

655
00:20:49,086 --> 0:20:50,216
就能看到所有背景

656
00:20:50,216 --> 0:20:51,106
图片的下载

657
00:20:51,106 --> 0:20:52,936
它会传递我们创建的

658
00:20:52,936 --> 0:20:53,756
signpost ID

659
00:20:53,816 --> 0:20:56,356
我们给开始附上一些

660
00:20:56,356 --> 0:20:59,206
元数据来传达我们

661
00:20:59,206 --> 0:21:01,016
下载的图像的名称

662
00:20:59,206 --> 0:21:01,016
下载的图像的名称

663
00:21:01,636 --> 0:21:02,476
然后我们开始下载

664
00:21:02,476 --> 0:21:04,556
我们设置属性

665
00:21:04,796 --> 0:21:06,526
来追踪下载

666
00:21:06,526 --> 0:21:08,096
目前设为 runningDownloader

667
00:21:09,196 --> 0:21:10,406
这个完成后我们会在这里

668
00:21:10,406 --> 0:21:12,736
有一个 didReceiveImage 回调

669
00:21:13,126 --> 0:21:15,266
然后我们将图像视图

670
00:21:15,266 --> 0:21:16,266
设为接收到的图像

671
00:21:17,376 --> 0:21:19,686
然后我们结束调用 signpost

672
00:21:19,926 --> 0:21:21,316
然后我们将使用完全

673
00:21:21,316 --> 0:21:23,266
一样的日志句柄 一样的名称

674
00:21:23,266 --> 0:21:25,666
一样的 signpost ID 但这次

675
00:21:25,666 --> 0:21:27,686
我们将附上一些

676
00:21:27,686 --> 0:21:29,286
结束的元数据比如

677
00:21:29,286 --> 0:21:29,846
“finished with size”

678
00:21:30,726 --> 0:21:32,686
你会注意到这里

679
00:21:33,296 --> 0:21:35,896
我们给了这个参数标记了

680
00:21:35,896 --> 0:21:38,406
Xcode:size-in-bytes 的特征

681
00:21:38,406 --> 0:21:40,056
这个东西告诉

682
00:21:40,336 --> 0:21:42,276
Xcode 和 Instruments

683
00:21:42,276 --> 0:21:43,676
这项参数在显示

684
00:21:43,676 --> 0:21:45,566
和分析中都应被当做

685
00:21:45,716 --> 0:21:46,536
size-in-bytes

686
00:21:47,756 --> 0:21:49,166
这些叫工程类型

687
00:21:49,166 --> 0:21:50,336
你可以在 Instruments

688
00:21:50,336 --> 0:21:51,656
开发者帮助指南中

689
00:21:51,656 --> 0:21:52,986
读到 就在 Instruments

690
00:21:52,986 --> 0:21:54,206
的帮助菜单中

691
00:21:54,956 --> 0:21:57,676
当我们完成下载后

692
00:21:57,676 --> 0:21:59,556
我们可以将它设为 nil

693
00:22:00,106 --> 0:22:02,366
我们有两种方式来

694
00:22:02,366 --> 0:22:03,656
结束下载

695
00:22:03,656 --> 0:22:05,766
一种是成功的情况

696
00:22:06,036 --> 0:22:07,576
而我们还要考虑

697
00:22:07,576 --> 0:22:08,206
取消的情况

698
00:22:08,896 --> 0:22:11,176
准备重新使用时 如果我们

699
00:22:11,176 --> 0:22:12,136
现在有一个正在运行的

700
00:22:12,136 --> 0:22:13,656
downloader 我们首先需要

701
00:22:13,716 --> 0:22:15,486
取消这个 downloader

702
00:22:16,316 --> 0:22:17,406
这种情况下我们要

703
00:22:17,406 --> 0:22:18,916
为这个时间段创建结束点

704
00:22:19,106 --> 0:22:20,936
然后我们使用同一个

705
00:22:21,306 --> 0:22:24,766
日志句柄 signpost 名称 signpost ID

706
00:22:25,296 --> 0:22:27,046
然后我们使用 cancelled

707
00:22:27,046 --> 0:22:29,456
作为结束元数据来隔开它

708
00:22:29,456 --> 0:22:31,066
当我们成功完成时

709
00:22:32,116 --> 0:22:33,606
这些应该足够

710
00:22:33,606 --> 0:22:34,356
来配置了

711
00:22:34,356 --> 0:22:38,146
现在我们到这里来配置产品

712
00:22:38,146 --> 0:22:40,086
而当我们完成

713
00:22:40,086 --> 0:22:43,876
构建和安装后它就会

714
00:22:43,916 --> 0:22:44,816
启动 Instruments

715
00:22:44,816 --> 0:22:47,146
它会在这里启动 Instruments

716
00:22:47,266 --> 0:22:49,666
我们可以创建一个空白的

717
00:22:49,666 --> 0:22:50,156
新文档

718
00:22:50,536 --> 0:22:52,456
然后我们到 library 中

719
00:22:52,546 --> 0:22:54,156
我可以向你展示如何使用

720
00:22:54,156 --> 0:22:56,126
新的 os_signpost instrument

721
00:22:56,646 --> 0:22:59,256
这里有我们新的 os_signpost instrument

722
00:22:59,386 --> 0:23:03,806
然后我们把它拖动 挪到这里

723
00:22:59,386 --> 0:23:03,806
然后我们把它拖动 挪到这里

724
00:23:04,186 --> 0:23:05,116
我们给它在这里

725
00:23:05,116 --> 0:23:07,176
多留点空间然后我们

726
00:23:07,176 --> 0:23:08,376
按下录制

727
00:23:08,646 --> 0:23:12,226
然后我们拿出 iPhone

728
00:23:12,396 --> 0:23:13,556
回到开始状态

729
00:23:13,876 --> 0:23:14,066
好了

730
00:23:14,066 --> 0:23:15,076
现在我们要开始滑动

731
00:23:15,076 --> 0:23:16,226
然后我们也会

732
00:23:16,226 --> 0:23:17,126
非常 非常快得滑动屏幕

733
00:23:17,196 --> 0:23:20,116
然后我们让它停下

734
00:23:20,576 --> 0:23:22,236
现在我们返回到

735
00:23:22,236 --> 0:23:23,326
Instruments 中看看我们记录下了

736
00:23:23,326 --> 0:23:24,096
什么数据

737
00:23:24,796 --> 0:23:26,776
现在我要停止录制

738
00:23:27,636 --> 0:23:29,716
现在你可以注意到

739
00:23:30,006 --> 0:23:31,406
在轨迹视图中

740
00:23:31,406 --> 0:23:33,206
我们可以直观地看到

741
00:23:33,206 --> 0:23:34,636
所有背景图片时间间隔

742
00:23:34,636 --> 0:23:35,706
这是 signpost 名称

743
00:23:35,996 --> 0:23:37,706
如果我们按住选项键

744
00:23:37,706 --> 0:23:40,236
然后放大你可以看到

745
00:23:40,646 --> 0:23:41,546
有一些时间段

746
00:23:41,766 --> 0:23:43,946
时间段被

747
00:23:43,946 --> 0:23:45,846
开始元数据和结束

748
00:23:45,846 --> 0:23:47,176
元数据标记

749
00:23:48,126 --> 0:23:50,106
如果我们缩回去

750
00:23:50,386 --> 0:23:52,066
然后再次观察轨迹

751
00:23:52,066 --> 0:23:54,786
我们会注意到

752
00:23:54,876 --> 0:23:57,546
只有少于五张的图片

753
00:23:57,546 --> 0:23:58,466
在同时进行下载

754
00:23:58,466 --> 0:23:59,546
这是一件好事

755
00:24:00,006 --> 0:24:01,646
这意味着我们取消成功了

756
00:24:01,646 --> 0:24:04,276
如果我们想确认的话

757
00:24:04,276 --> 0:24:05,346
我们可以到这里然后

758
00:24:05,346 --> 0:24:07,606
你可以看到许多

759
00:24:07,606 --> 0:24:09,536
时间间隔的元数据都

760
00:24:09,536 --> 0:24:11,936
写着下载时被取消

761
00:24:12,706 --> 0:24:14,506
如果你想 如果

762
00:24:14,506 --> 0:24:16,716
你想看看数据

763
00:24:17,076 --> 0:24:18,346
或者说你想看看

764
00:24:18,346 --> 0:24:19,586
这些间隔的持续时间

765
00:24:19,586 --> 0:24:22,196
那么你可以来这里

766
00:24:22,246 --> 0:24:23,726
看看这些间隔的概要

767
00:24:24,126 --> 0:24:26,726
然后我们看到按类别

768
00:24:26,726 --> 0:24:28,886
进行了细分 然后按 signpost

769
00:24:28,886 --> 0:24:30,616
名称然后按开始信息

770
00:24:30,616 --> 0:24:32,456
然后按结束信息

771
00:24:33,386 --> 0:24:35,326
如果我们把这个缩小

772
00:24:35,326 --> 0:24:38,056
你可以看到我们

773
00:24:38,056 --> 0:24:41,306
发送了 93 次图片下载请求

774
00:24:42,236 --> 0:24:44,236
其中 12 次是针对于位置 1

775
00:24:45,426 --> 0:24:46,506
在这 12 次中

776
00:24:46,506 --> 0:24:48,776
7 次被取消 5 次完成

777
00:24:48,806 --> 0:24:50,736
大小为 3.31 MB

778
00:24:52,006 --> 0:24:53,036
如果你现在看这里

779
00:24:53,036 --> 0:24:54,716
这些是关于时段的

780
00:24:54,716 --> 0:24:55,386
统计数据

781
00:24:55,776 --> 0:24:58,496
然后你们可以看到

782
00:24:58,736 --> 0:25:00,506
被取消的最小和平均

783
00:24:58,736 --> 0:25:00,506
被取消的最小和平均

784
00:25:01,106 --> 0:25:02,966
时间段比

785
00:25:02,966 --> 0:25:04,816
下载完全的时间段

786
00:25:05,066 --> 0:25:06,056
要小很多

787
00:25:06,056 --> 0:25:07,086
这就是在这种

788
00:25:07,086 --> 0:25:08,826
情况下你期待看到的

789
00:25:09,866 --> 0:25:11,086
现在如果你想要看所有

790
00:25:11,086 --> 0:25:12,926
被取消掉的事件

791
00:25:12,926 --> 0:25:13,966
因为你对这些很感兴趣

792
00:25:13,966 --> 0:25:16,186
你可以按下这个聚焦箭头

793
00:25:16,216 --> 0:25:19,586
然后它会带你跳转到一个

794
00:25:19,586 --> 0:25:21,586
列表视图你可以在这里看到

795
00:25:21,586 --> 0:25:24,186
所有地方 其中位置 1 

796
00:25:24,186 --> 0:25:25,626
有结束信息 “cancelled”

797
00:25:26,386 --> 0:25:28,156
并且当我们浏览的时候

798
00:25:28,156 --> 0:25:29,146
你会看到轨迹

799
00:25:29,146 --> 0:25:30,636
上方的探头

800
00:25:31,016 --> 0:25:32,566
会移到每一个

801
00:25:32,566 --> 0:25:33,206
时间间隔处

802
00:25:33,336 --> 0:25:35,066
所以你可以追踪所有

803
00:25:35,066 --> 0:25:36,086
失败的情况如果你

804
00:25:36,086 --> 0:25:36,556
感兴趣的话

805
00:25:36,666 --> 0:25:40,076
这是一个查看这些

806
00:25:40,316 --> 0:25:42,756
间隔的时间

807
00:25:42,756 --> 0:25:44,096
时间点的好方法

808
00:25:44,456 --> 0:25:46,926
但是如果你想进行对这些

809
00:25:46,926 --> 0:25:48,536
元数据进行分析呢

810
00:25:49,316 --> 0:25:50,886
如果你想确定

811
00:25:51,046 --> 0:25:53,426
有多少字节的图像数据

812
00:25:53,426 --> 0:25:54,916
是我们已经从网络上下载了呢

813
00:25:55,696 --> 0:25:57,906
我们已经发送了元数据信息

814
00:25:57,906 --> 0:25:59,946
比如 “Finished with size”

815
00:25:59,996 --> 0:26:01,026
然后是它的大小

816
00:25:59,996 --> 0:26:01,026
然后是它的大小

817
00:26:01,026 --> 0:26:02,516
如果我们能把这些参数加起来

818
00:26:02,576 --> 0:26:04,536
那就太棒了

819
00:26:05,266 --> 0:26:06,546
所以，如果你想这么做

820
00:26:06,546 --> 0:26:07,256
你可以在这里选择

821
00:26:07,256 --> 0:26:09,286
“summary of metadata statistics”

822
00:26:10,616 --> 0:26:11,696
你可以看到

823
00:26:11,696 --> 0:26:13,276
我们将它分解成了子系统

824
00:26:13,826 --> 0:26:17,076
种类和格式化字符串

825
00:26:17,076 --> 0:26:18,636
在格式化字符串下面

826
00:26:18,636 --> 0:26:19,606
是它的参数

827
00:26:19,816 --> 0:26:20,996
由于我们的格式化字符串

828
00:26:20,996 --> 0:26:22,926
只有一个参数 所以就是 arg0

829
00:26:22,926 --> 0:26:26,416
现在 Instruments 已经将这些加在一起了

830
00:26:26,416 --> 0:26:27,896
并且它知道这是一个

831
00:26:27,896 --> 0:26:28,776
以字节计的大小

832
00:26:28,776 --> 0:26:29,866
它给了我们一个精准的计算

833
00:26:29,866 --> 0:26:31,986
结果为 80MB

834
00:26:32,036 --> 0:26:33,626
所以我们一共下载了

835
00:26:33,656 --> 0:26:34,856
80MB 的图像数据

836
00:26:35,046 --> 0:26:37,666
现在你在这里可以

837
00:26:37,666 --> 0:26:38,186
看到不同的列

838
00:26:38,186 --> 0:26:39,196
有最小值 最大值 平均值

839
00:26:39,196 --> 0:26:40,166
还有标准差

840
00:26:40,256 --> 0:26:41,776
所以这是一个很好的方式

841
00:26:41,846 --> 0:26:43,976
来查看你通过

842
00:26:43,976 --> 0:26:47,706
元数据传递的值的统计分析

843
00:26:48,306 --> 0:26:49,296
Shane 刚刚提到

844
00:26:49,296 --> 0:26:51,766
signposts 非常轻量

845
00:26:52,056 --> 0:26:54,596
这是完全正确的

846
00:26:54,806 --> 0:26:55,916
除非你像我 刚刚跑 Instruments

847
00:26:55,916 --> 0:26:56,816
那样运行 Instruments

848
00:26:57,016 --> 0:27:00,056
在 immediate 模式下

849
00:26:57,016 --> 0:27:00,056
在 immediate 模式下

850
00:27:00,056 --> 0:27:01,166
即默认录制模式下

851
00:27:01,166 --> 0:27:03,126
Instruments 几乎是在

852
00:27:03,126 --> 0:27:06,416
实时展现和记录数据

853
00:27:07,056 --> 0:27:07,926
所以当它进入到

854
00:27:07,926 --> 0:27:09,556
immediate 模式录制时

855
00:27:09,626 --> 0:27:11,636
所有的 signposts 都必须直接

856
00:27:11,636 --> 0:27:12,826
发给 Instruments

857
00:27:13,326 --> 0:27:15,106
我们就避开了

858
00:27:15,106 --> 0:27:16,176
在操作系统中

859
00:27:16,176 --> 0:27:18,486
缓冲能获得的优化

860
00:27:19,196 --> 0:27:21,966
现在，通过我们的 signposts

861
00:27:21,966 --> 0:27:23,576
通过我们的 signposts App

862
00:27:24,036 --> 0:27:25,546
我们并不会真正创建足够多的

863
00:27:25,546 --> 0:27:27,176
时间间隔使我们注意到花销

864
00:27:27,176 --> 0:27:29,186
但是如果你有一个游戏引擎

865
00:27:29,186 --> 0:27:30,156
并且你想要每秒发送

866
00:27:30,156 --> 0:27:32,146
数千个 signpost

867
00:27:32,146 --> 0:27:34,836
这时开销就会开始累积变多

868
00:27:35,266 --> 0:27:37,336
所以为了避免这个问题

869
00:27:37,756 --> 0:27:39,376
你可以在你

870
00:27:39,376 --> 0:27:41,176
录制之前改变

871
00:27:41,616 --> 0:27:42,736
Instruments 的录制模式

872
00:27:43,286 --> 0:27:45,016
你可以通过

873
00:27:45,016 --> 0:27:46,956
下拉录制按钮

874
00:27:46,956 --> 0:27:49,266
然后选择录制选项来实现

875
00:27:50,706 --> 0:27:52,496
在这块全局选项

876
00:27:52,646 --> 0:27:55,326
的区域中你可以看到

877
00:27:55,326 --> 0:27:57,176
我们选中了 immediate 模式

878
00:27:57,496 --> 0:27:58,976
我们可以把它变成

879
00:27:58,976 --> 0:27:59,876
last 5 second 模式

880
00:28:00,436 --> 0:28:01,656
这种模式通常被称为

881
00:28:01,656 --> 0:28:02,376
窗口模式

882
00:28:03,206 --> 0:28:04,736
它告诉操作系统

883
00:28:04,736 --> 0:28:05,416
和录制技术

884
00:28:05,416 --> 0:28:07,416
我们不需要

885
00:28:07,416 --> 0:28:08,306
每一个事件

886
00:28:08,306 --> 0:28:09,386
我们只想要最后五秒

887
00:28:09,386 --> 0:28:10,046
的内容

888
00:28:10,366 --> 0:28:11,786
当你这么做时

889
00:28:11,786 --> 0:28:12,946
Instruments 会让开

890
00:28:12,946 --> 0:28:15,416
然后让操作系统来做

891
00:28:15,836 --> 0:28:16,966
这是一个非常常见的模式

892
00:28:16,966 --> 0:28:18,296
我们将它用于系统追踪

893
00:28:18,296 --> 0:28:19,976
我们将它用于 metal 系统追踪

894
00:28:19,976 --> 0:28:21,806
和新的游戏性能模板

895
00:28:22,276 --> 0:28:23,736
所以这是一种在你的 App 中

896
00:28:23,736 --> 0:28:25,776
寻找卡顿和挂机的非常常见的方式

897
00:28:25,846 --> 0:28:26,646
好了

898
00:28:27,256 --> 0:28:30,916
这就是我们的 os_signpost

899
00:28:30,996 --> 0:28:31,426
instrument

900
00:28:32,756 --> 0:28:34,756
现在让我们来说说 points of interest

901
00:28:36,046 --> 0:28:38,216
现在如果我们回到

902
00:28:38,326 --> 0:28:39,476
Trailblazer App

903
00:28:40,216 --> 0:28:43,176
你注意到当我点击一个路线

904
00:28:43,176 --> 0:28:45,166
它就显示详细内容

905
00:28:46,026 --> 0:28:47,326
如果我返回点一个

906
00:28:47,326 --> 0:28:48,676
不同的路线它就显示

907
00:28:48,676 --> 0:28:49,316
不同的详细信息

908
00:28:50,476 --> 0:28:53,186
如果我们能追踪

909
00:28:53,326 --> 0:28:55,026
每一次详细信息界面的

910
00:28:55,026 --> 0:28:56,516
的出现那就好了

911
00:28:56,896 --> 0:28:57,986
因为这样我们就能分辨出

912
00:28:57,986 --> 0:28:59,266
我们的用户在试图做什么

913
00:28:59,266 --> 0:29:00,856
我们知道用户在 App 中

914
00:28:59,266 --> 0:29:00,856
我们知道用户在 App 中

915
00:29:00,856 --> 0:29:01,606
所处位置

916
00:29:02,626 --> 0:29:04,466
你当然可以用一个 signpost

917
00:29:04,466 --> 0:29:07,246
来做这个但是你必须在

918
00:29:07,296 --> 0:29:08,526
os_signpost instrument

919
00:29:08,526 --> 0:29:10,366
里拖动并记录下 App 中

920
00:29:10,366 --> 0:29:12,146
所有 signpost 的活动

921
00:29:12,146 --> 0:29:14,316
它某种程度上降低了

922
00:29:14,316 --> 0:29:16,456
这些用户使用事件

923
00:29:16,456 --> 0:29:17,086
的重要性

924
00:29:17,756 --> 0:29:19,386
所以我们允许你

925
00:29:19,386 --> 0:29:20,826
将它们弄到

926
00:29:20,936 --> 0:29:21,796
points of interest 中去

927
00:29:22,566 --> 0:29:23,746
现在如果我到代码里

928
00:29:23,746 --> 0:29:26,636
查看细节控制器

929
00:29:26,636 --> 0:29:28,406
看我们的 viewDidAppear 方法

930
00:29:28,406 --> 0:29:31,006
你可以看到我正在发布

931
00:29:31,006 --> 0:29:32,426
我正在创建一个 os_signpost 事件

932
00:29:33,076 --> 0:29:34,296
显示 “Detail Appeared”

933
00:29:34,696 --> 0:29:36,136
以及细节的名称

934
00:29:37,186 --> 0:29:38,206
这被发送给我们创建的

935
00:29:38,206 --> 0:29:39,486
一个特别的日志句柄

936
00:29:39,486 --> 0:29:40,516
叫 points of interest

937
00:29:40,986 --> 0:29:42,116
创建它的方式是

938
00:29:42,556 --> 0:29:43,836
创建一个带子系统

939
00:29:43,946 --> 0:29:46,166
标识符和系统

940
00:29:46,256 --> 0:29:47,976
points of interest 类别的

941
00:29:47,976 --> 0:29:48,466
日志句柄

942
00:29:48,666 --> 0:29:49,946
这是一个

943
00:29:49,946 --> 0:29:51,196
Instruments 会查找的特殊类别

944
00:29:51,656 --> 0:29:52,896
当它看到这里的 points

945
00:29:53,246 --> 0:29:55,746
它会把它们放到 points

946
00:29:55,786 --> 0:29:57,196
of interest instrument 里

947
00:29:57,336 --> 0:29:59,856
如果我们回到这里然后点击

948
00:29:59,856 --> 0:30:01,636
time profile 你可以看到

949
00:29:59,856 --> 0:30:01,636
time profile 你可以看到

950
00:30:01,636 --> 0:30:03,636
这里自动包含了

951
00:30:03,636 --> 0:30:04,976
points of interest instrument

952
00:30:05,146 --> 0:30:08,706
如果我们录制下来

953
00:30:08,936 --> 0:30:11,246
然后进行同样的基础操作

954
00:30:11,246 --> 0:30:12,636
我们进入 Matt Davis Trail

955
00:30:12,636 --> 0:30:13,426
然后我们回到

956
00:30:13,426 --> 0:30:15,536
Skyline Trail 然后再回来

957
00:30:15,536 --> 0:30:17,896
我们再做一次为了测得更准

958
00:30:19,366 --> 0:30:20,856
现在当你返回到

959
00:30:21,236 --> 0:30:25,176
Instruments 你可以看到

960
00:30:25,176 --> 0:30:26,276
这些 points of interest

961
00:30:26,606 --> 0:30:27,806
突出显示

962
00:30:27,806 --> 0:30:29,776
所以你能看到

963
00:30:29,776 --> 0:30:31,236
在你 App 中 你的用户所处位置

964
00:30:31,236 --> 0:30:32,406
你可以将这个和其他

965
00:30:32,406 --> 0:30:33,316
性能数据关联

966
00:30:33,986 --> 0:30:34,986
所以 points of interest

967
00:30:34,986 --> 0:30:38,626
可以让你 从你的 App 中

968
00:30:38,626 --> 0:30:40,546
选择一些最重要的

969
00:30:40,546 --> 0:30:42,016
兴趣点然后把它们

970
00:30:42,016 --> 0:30:44,036
提供给你团队中

971
00:30:44,036 --> 0:30:45,446
或者开发社区中的

972
00:30:45,446 --> 0:30:46,306
每一位开发者

973
00:30:46,566 --> 0:30:47,736
然后他们可以立即看到

974
00:30:47,736 --> 0:30:48,596
points of interest

975
00:30:49,956 --> 0:30:50,156
好了

976
00:30:50,156 --> 0:30:51,756
这就是 points of interest

977
00:30:51,756 --> 0:30:53,596
instrument 以及如何从

978
00:30:53,596 --> 0:30:54,956
signposts 中创建

979
00:30:54,956 --> 0:30:55,646
points of interest

980
00:30:56,966 --> 0:30:58,926
另一个 Instruments 10 中

981
00:30:59,276 --> 0:31:01,006
很好的功能是

982
00:30:59,276 --> 0:31:01,006
很好的功能是

983
00:31:01,006 --> 0:31:03,026
你可以创建自定义的 instrument

984
00:31:03,576 --> 0:31:05,096
为了向大家展示

985
00:31:05,096 --> 0:31:06,456
在 os_signpost 可以对自定义

986
00:31:06,456 --> 0:31:08,816
instrument 做什么 我们创建了

987
00:31:08,816 --> 0:31:11,256
作为项目的一部分

988
00:31:11,256 --> 0:31:12,836
一个 Trailblazer instruments 包

989
00:31:13,916 --> 0:31:16,226
我现在要构建并运行

990
00:31:16,306 --> 0:31:20,306
你可以看到当我们在做时

991
00:31:20,586 --> 0:31:21,996
我们启动了 Instruments

992
00:31:21,996 --> 0:31:24,566
的一个独立备份

993
00:31:24,566 --> 0:31:25,796
里面有我们刚建的包

994
00:31:25,796 --> 0:31:28,796
如果我们将版本调出来

995
00:31:28,796 --> 0:31:30,666
可以看到我们现在

996
00:31:30,726 --> 0:31:32,356
有一个 Trailblazer Networking

997
00:31:32,856 --> 0:31:33,826
轨迹模板

998
00:31:33,826 --> 0:31:36,296
如果我们选中它可以看到

999
00:31:36,456 --> 0:31:38,046
我们有一个 Trailblazer

1000
00:31:38,046 --> 0:31:39,616
Networking instrument

1001
00:31:39,616 --> 0:31:40,246
在我们的轨迹文档中

1002
00:31:41,546 --> 0:31:43,266
让我们开始录制

1003
00:31:43,326 --> 0:31:44,226
然后看看我们的 

1004
00:31:44,226 --> 0:31:46,666
points of interest 的区别

1005
00:31:46,666 --> 0:31:48,176
不好意思 我们的 os_signpost

1006
00:31:48,376 --> 0:31:49,736
和自定义 instrument

1007
00:31:49,736 --> 0:31:50,016
可以做什么

1008
00:31:50,106 --> 0:31:51,416
我们要做同样的事情

1009
00:31:51,956 --> 0:31:53,156
我们开始基本的下载

1010
00:31:53,246 --> 0:31:57,046
然后回来

1011
00:31:57,046 --> 0:31:58,086
然后分析我们的轨迹

1012
00:31:59,036 --> 0:32:00,656
现在这里显示的

1013
00:31:59,036 --> 0:32:00,656
现在这里显示的

1014
00:32:00,656 --> 0:32:01,646
完全不一样

1015
00:32:01,786 --> 0:32:04,676
让我们放大 然后 观察

1016
00:32:04,676 --> 0:32:07,076
你看到在这里左边

1017
00:32:07,076 --> 0:32:08,066
我们没有按

1018
00:32:08,066 --> 0:32:09,396
signpost 名称细分

1019
00:32:09,396 --> 0:32:10,906
而是按下载的图像

1020
00:32:11,416 --> 0:32:13,466
现在我们可以看到图二

1021
00:32:13,656 --> 0:32:17,406
是在这里和这里下载的

1022
00:32:18,256 --> 0:32:20,456
我们在每处标记了

1023
00:32:20,716 --> 0:32:21,896
下载的大小

1024
00:32:21,896 --> 0:32:22,386
单位是兆

1025
00:32:22,996 --> 0:32:25,546
我们把他们标成红色

1026
00:32:25,546 --> 0:32:27,576
如果下载大小大于

1027
00:32:27,576 --> 0:32:28,896
3 1/2 MB 的话

1028
00:32:29,656 --> 0:32:31,846
这是我们创建的自定义图像

1029
00:32:31,846 --> 0:32:33,636
是自定义 instrument 的一部分

1030
00:32:33,956 --> 0:32:35,536
现在在下面我们还

1031
00:32:35,536 --> 0:32:36,446
定义了一些细节

1032
00:32:36,536 --> 0:32:38,516
这里有一张非常简洁的

1033
00:32:38,516 --> 0:32:39,716
下载任务表

1034
00:32:39,836 --> 0:32:41,266
并且你可以通过它们

1035
00:32:41,266 --> 0:32:42,516
来浏览轨迹

1036
00:32:43,476 --> 0:32:46,116
我们还有 让我看看

1037
00:32:46,116 --> 0:32:47,796
能不能把它弄回这里来

1038
00:32:47,996 --> 0:32:50,846
我们还有一个对所有下载

1039
00:32:50,846 --> 0:32:51,466
的概要

1040
00:32:51,536 --> 0:32:52,096
非常简单

1041
00:32:52,506 --> 0:32:54,016
我们只想加起来求和

1042
00:32:54,226 --> 0:32:56,136
我们还有个很棒的东西

1043
00:32:56,136 --> 0:32:57,266
叫 Timeslice

1044
00:32:58,026 --> 0:32:59,806
在 Timeslice 视图中

1045
00:33:00,226 --> 0:33:01,746
我们这么做是想要

1046
00:33:01,746 --> 0:33:02,716
回答我之前提出的问题

1047
00:33:02,716 --> 0:33:04,146
这些东西中

1048
00:33:04,146 --> 0:33:05,636
哪些实际上是并行

1049
00:33:05,636 --> 0:33:06,096
运行的

1050
00:33:06,676 --> 0:33:07,656
如果你想看看

1051
00:33:07,656 --> 0:33:08,506
并行运行的

1052
00:33:08,506 --> 0:33:09,736
时间段你只需要

1053
00:33:09,736 --> 0:33:11,876
拖动这里的

1054
00:33:11,876 --> 0:33:13,216
的探头然后你就可以

1055
00:33:13,216 --> 0:33:14,886
看到在任一时间点上

1056
00:33:15,276 --> 0:33:16,976
和该探头相交

1057
00:33:16,976 --> 0:33:18,196
的部分

1058
00:33:18,706 --> 0:33:20,016
所以这是一个很好的

1059
00:33:20,016 --> 0:33:21,556
但不同的检查 signpost 数据

1060
00:33:21,556 --> 0:33:21,746
的方法

1061
00:33:23,036 --> 0:33:24,556
如果你在和别人

1062
00:33:24,556 --> 0:33:26,056
一起做一个项目或者

1063
00:33:26,056 --> 0:33:26,776
你是开发者社区的

1064
00:33:26,776 --> 0:33:28,606
一员那么使用自定义

1065
00:33:28,606 --> 0:33:29,646
instrument 能够很好地

1066
00:33:29,646 --> 0:33:31,606
获取 signpost 数据

1067
00:33:31,606 --> 0:33:33,336
改造它 这样其他人

1068
00:33:33,386 --> 0:33:35,286
就可以直接使用并

1069
00:33:35,286 --> 0:33:36,126
不需要懂得你代码的

1070
00:33:36,126 --> 0:33:37,956
运行细节就能理解

1071
00:33:37,956 --> 0:33:39,216
所以它们是一个非常重要的功能

1072
00:33:39,576 --> 0:33:42,746
好消息是要创建

1073
00:33:42,746 --> 0:33:44,246
这样的一个 instrument

1074
00:33:44,956 --> 0:33:46,926
全部软件包定义

1075
00:33:46,926 --> 0:33:51,636
只有 115 行 XML

1076
00:33:51,716 --> 0:33:53,386
所以自定义 instruments

1077
00:33:53,386 --> 0:33:55,236
非常有表现力和强大

1078
00:33:55,236 --> 0:33:56,506
但又非常简单

1079
00:33:57,466 --> 0:34:00,226
这就是关于我们演示的总结

1080
00:33:57,466 --> 0:34:00,226
这就是关于我们演示的总结

1081
00:34:01,516 --> 0:34:08,536
[ 掌声 ]

1082
00:34:09,036 --> 0:34:10,666
在今天的会议中

1083
00:34:10,666 --> 0:34:13,065
我们查看了 signpost API

1084
00:34:13,065 --> 0:34:14,545
我们向你们展示了如何用它

1085
00:34:14,896 --> 0:34:16,216
在你 App 中标注

1086
00:34:16,216 --> 0:34:17,536
值得注意的行为

1087
00:34:17,536 --> 0:34:18,235
和时间段

1088
00:34:19,005 --> 0:34:20,126
我们展示了如何收集

1089
00:34:20,126 --> 0:34:21,835
元数据并将元数据

1090
00:34:22,076 --> 0:34:23,065
放入 Instruments 来

1091
00:34:23,065 --> 0:34:24,826
可视化和做分析

1092
00:34:25,406 --> 0:34:27,916
我们展示了如何在

1093
00:34:28,246 --> 0:34:29,755
os_signpost 中合并

1094
00:34:29,755 --> 0:34:32,646
自定义 instrument 来创建

1095
00:34:32,786 --> 0:34:34,856
更好的 signpost 数据展示

1096
00:34:36,056 --> 0:34:38,626
所有的这些总结下来

1097
00:34:38,686 --> 0:34:41,085
就是我们可以给你

1098
00:34:41,085 --> 0:34:42,346
你需要用来

1099
00:34:42,346 --> 0:34:46,106
提升 App 性能的信息

1100
00:34:46,485 --> 0:34:47,856
所以我们很高兴看到

1101
00:34:47,856 --> 0:34:49,946
你使用 os_signpost 和

1102
00:34:49,946 --> 0:34:51,866
Instruments 来一块提升

1103
00:34:51,866 --> 0:34:53,656
你 App 的用户体验

1104
00:34:54,985 --> 0:34:56,576
这就是今天的内容

1105
00:34:57,016 --> 0:34:58,856
想要了解更多信息

1106
00:34:58,856 --> 0:35:00,946
你可以来实验室找我们

1107
00:34:58,856 --> 0:35:00,946
你可以来实验室找我们

1108
00:35:00,946 --> 0:35:03,546
技术实验室 8 今天下午三点

1109
00:35:03,546 --> 0:35:05,896
同时明天我还有会议 410

1110
00:35:05,896 --> 0:35:06,996
创建自定义 instrument

1111
00:35:07,076 --> 0:35:08,876
我会讲讲

1112
00:35:08,876 --> 0:35:10,106
自定义 instrument

1113
00:35:10,106 --> 0:35:11,686
的工作原理并向你们

1114
00:35:11,686 --> 0:35:13,156
展示我们如何创建的 Trailblazer

1115
00:35:13,156 --> 0:35:14,836
networking instrument 包

1116
00:35:15,696 --> 0:35:16,386
非常感谢

1117
00:35:16,386 --> 0:35:17,936
享受剩下的会议吧

1118
00:35:18,516 --> 0:35:24,480
[ 掌声 ]
