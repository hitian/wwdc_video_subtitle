1
00:00:17,985 --> 0:00:21,421
（使用Accelerate

2
00:00:22,422 --> 0:00:23,323
早上好

3
00:00:23,390 --> 0:00:24,358
大家好吗？

4
00:00:25,392 --> 0:00:26,360
很好

5
00:00:29,263 --> 0:00:31,899
我叫Matthew Badin

6
00:00:32,399 --> 0:00:34,501
欢迎来到“使用Accelerate

7
00:00:36,870 --> 0:00:39,239
我和同事Luke Chang

8
00:00:39,873 --> 0:00:41,441
我们将与你讨论

9
00:00:41,508 --> 0:00:44,578
及其关联框架中提供的优秀API

10
00:00:45,345 --> 0:00:48,248
我们先对Accelerate

11
00:00:48,315 --> 0:00:50,551
及其中包含的一些高性能库进行概述

12
00:00:51,552 --> 0:00:54,421
然后我们将深入讨论一些库

13
00:00:55,355 --> 0:00:57,591
我们首先从vDSP开始

14
00:00:58,625 --> 0:01:00,060
我们有两个例子

15
00:00:58,625 --> 0:01:00,060
我们有两个例子

16
00:01:00,928 --> 0:01:01,995
首先 我们会告诉你

17
00:01:02,062 --> 0:01:03,697
如何从噪音中提取信号

18
00:01:04,164 --> 0:01:05,331
然后我们会向你展示

19
00:01:05,399 --> 0:01:08,168
如何从图像中移除某些类型的痕迹

20
00:01:09,903 --> 0:01:11,371
接着我们将看看simd

21
00:01:11,972 --> 0:01:13,574
我们将向你展示如何使用四元数

22
00:01:13,640 --> 0:01:15,642
来表示三维旋转

23
00:01:18,612 --> 0:01:20,581
之后我将把话筒

24
00:01:20,647 --> 0:01:22,916
他将向你展示

25
00:01:22,983 --> 0:01:24,318
一些有趣的事情

26
00:01:24,952 --> 0:01:27,254
所以 让我们开始吧

27
00:01:29,356 --> 0:01:31,491
你可能会问自己

28
00:01:31,625 --> 0:01:33,227
Accelerate到底是什么

29
00:01:35,829 --> 0:01:37,831
Accelerate的主要目的

30
00:01:37,898 --> 0:01:40,834
是提供数以千计的低级数学原语

31
00:01:41,368 --> 0:01:44,171
我们在所有Apple平台上

32
00:01:44,771 --> 0:01:47,107
所以这不仅包括iOS和MacOS

33
00:01:47,174 --> 0:01:49,042
同时包括watchOS和tvOS

34
00:01:51,478 --> 0:01:55,482
这些原语中的大部分都是

35
00:01:56,049 --> 0:01:58,452
这意味着我们将得到出色的性能

36
00:01:59,853 --> 0:02:03,290
这种性能直接转化为节省的能量

37
00:01:59,853 --> 0:02:03,290
这种性能直接转化为节省的能量

38
00:02:04,525 --> 0:02:07,461
因此若你是app开发者

39
00:02:07,628 --> 0:02:11,331
你的app将不仅运行更快

40
00:02:11,765 --> 0:02:12,599
这意味着你的用户

41
00:02:12,666 --> 0:02:14,568
将会在总体上有更好的体验

42
00:02:18,405 --> 0:02:20,974
由于我们提供了如此多的原语

43
00:02:21,041 --> 0:02:23,644
我们发现将它们分类为

44
00:02:23,710 --> 0:02:25,612
领域特定库会非常有用

45
00:02:26,980 --> 0:02:28,282
例如 我们将所有

46
00:02:28,348 --> 0:02:31,485
信号处理原语集中到vDSP

47
00:02:32,052 --> 0:02:34,154
因此这里面有你的FFT

48
00:02:34,221 --> 0:02:35,689
或DFT和DCT

49
00:02:35,756 --> 0:02:38,692
即你的快速傅里叶变换

50
00:02:41,128 --> 0:02:43,931
VImage包含图像处理原语

51
00:02:44,631 --> 0:02:47,134
如果你正在进行色彩空间转换

52
00:02:49,570 --> 0:02:52,306
VForce

53
00:02:52,372 --> 0:02:54,107
例如正弦和余弦

54
00:02:56,543 --> 0:02:58,645
我们也支持密集线性代数

55
00:02:59,813 --> 0:03:01,348
以及稀疏线性代数

56
00:02:59,813 --> 0:03:01,348
以及稀疏线性代数

57
00:03:02,983 --> 0:03:06,486
我们有一个叫做BNNS的

58
00:03:06,553 --> 0:03:08,889
它代表“基础神经网络子程序”

59
00:03:09,690 --> 0:03:11,959
有些库不是

60
00:03:12,226 --> 0:03:14,962
但与其密切相关

61
00:03:15,028 --> 0:03:16,864
包括像simd这样的库

62
00:03:17,331 --> 0:03:19,366
它是CPU的矢量编程辅助工具

63
00:03:20,300 --> 0:03:21,134
以及Compression

64
00:03:21,201 --> 0:03:24,304
它包含几种不同的无损数据压缩算法

65
00:03:26,340 --> 0:03:27,875
我们来看看我们的第一个库

66
00:03:28,175 --> 0:03:29,510
我们先看看vDSP

67
00:03:31,311 --> 0:03:34,214
vDSP是最先进的信号处理库

68
00:03:34,448 --> 0:03:36,783
它包含了种类广泛的信号处理原语

69
00:03:37,618 --> 0:03:40,587
其包括数组上的基本算术运算

70
00:03:40,654 --> 0:03:42,189
比如加法和减法

71
00:03:42,990 --> 0:03:48,262
以及更复杂的操作

72
00:03:49,363 --> 0:03:50,864
如果你是成功的app开发者

73
00:03:50,931 --> 0:03:53,600
也许你在过去避开了FFT

74
00:03:53,867 --> 0:03:55,869
我想向你展示我们如何通过

75
00:03:56,203 --> 0:03:58,572
只需几行代码就可以完成这项工作

76
00:03:59,106 --> 0:04:00,240
我这有一个例子

77
00:03:59,106 --> 0:04:00,240
我这有一个例子

78
00:04:00,707 --> 0:04:02,743
我将向你展示如何从噪声中提取信号

79
00:04:14,821 --> 0:04:16,589
我们这里有一个音频信号

80
00:04:16,990 --> 0:04:18,058
这是基带信号

81
00:04:18,125 --> 0:04:19,892
我们还没有对其添加任何噪音

82
00:04:20,260 --> 0:04:22,095
你会注意到底部有两个滑块

83
00:04:22,930 --> 0:04:25,098
在左下角有一个滑块

84
00:04:27,868 --> 0:04:28,735
你可以看到它的效果

85
00:04:30,237 --> 0:04:31,939
这是第二个滑块

86
00:04:32,005 --> 0:04:33,440
它可以让我消除这种噪音

87
00:04:34,575 --> 0:04:35,709
它被称为阈值

88
00:04:37,244 --> 0:04:39,580
你还会注意到右下角有一个切换开关

89
00:04:40,881 --> 0:04:43,283
这让我可以在不同的域下观察它

90
00:04:43,350 --> 0:04:46,987
目前我们在时域下看这个信号

91
00:04:47,054 --> 0:04:48,455
我们要做一些分析

92
00:04:49,156 --> 0:04:51,225
现在在频域下看这个信号

93
00:04:53,026 --> 0:04:54,962
你可以看到左侧的所有尖峰

94
00:04:55,362 --> 0:04:57,397
这些是信号的频率分量

95
00:04:59,933 --> 0:05:01,802
你还会注意到蓝色条

96
00:04:59,933 --> 0:05:01,802
你还会注意到蓝色条

97
00:05:02,503 --> 0:05:05,839
蓝色条是阈值滑块

98
00:05:08,542 --> 0:05:11,912
我现在要给信号增加一些噪音

99
00:05:13,046 --> 0:05:14,748
我们多添加一些噪音

100
00:05:18,385 --> 0:05:20,854
你可以看到我感兴趣的信号

101
00:05:20,921 --> 0:05:25,125
由左边的峰值表示

102
00:05:25,192 --> 0:05:26,927
是那些高度最高的尖峰

103
00:05:27,528 --> 0:05:28,595
我们添加的噪音

104
00:05:28,662 --> 0:05:30,864
其类型为背景噪音

105
00:05:31,298 --> 0:05:34,001
所以它是均匀分布到各处的尖峰

106
00:05:34,067 --> 0:05:35,369
但它们是低级尖峰

107
00:05:37,037 --> 0:05:39,506
现在我要消除这些噪音

108
00:05:39,773 --> 0:05:40,607
我的方法是

109
00:05:40,674 --> 0:05:42,543
将此阈值略微调高一点

110
00:05:44,077 --> 0:05:47,181
当我这样做时

111
00:05:47,447 --> 0:05:50,551
我们正在识别任何

112
00:05:50,617 --> 0:05:52,553
并将其删除

113
00:05:52,619 --> 0:05:53,854
或者说

114
00:05:53,921 --> 0:05:57,024
任何高度低于这个蓝色条的尖峰

115
00:05:57,457 --> 0:05:59,259
我们将视其为噪音并将其删除

116
00:06:01,228 --> 0:06:02,663
所以如果我继续调高它

117
00:06:06,200 --> 0:06:08,135
最终我会消除所有的噪音

118
00:06:10,003 --> 0:06:11,104
如果我回到时域视图

119
00:06:11,839 --> 0:06:13,907
你可以看到我已经删除了噪音

120
00:06:14,074 --> 0:06:17,277
如果你不信我 我们可以删除阈值

121
00:06:17,911 --> 0:06:21,114
这就是所有噪声仍然存在的情况

122
00:06:22,749 --> 0:06:23,784
告诉你我们如何做到

123
00:06:29,690 --> 0:06:33,527
从高层角度来说

124
00:06:33,794 --> 0:06:35,095
这就是开关的作用

125
00:06:36,163 --> 0:06:38,765
然后我们将识别代表噪音的频率分量

126
00:06:38,832 --> 0:06:40,834
并将其移除

127
00:06:41,835 --> 0:06:42,803
完成这步之后

128
00:06:42,870 --> 0:06:44,872
我们要重建音频信号

129
00:06:45,372 --> 0:06:46,540
我们来看一些代码

130
00:06:50,177 --> 0:06:53,981
这里我们要用到的是

131
00:06:55,415 --> 0:06:57,618
你可在此看到

132
00:06:59,453 --> 0:07:02,956
这个上下文将描述

133
00:06:59,453 --> 0:07:02,956
这个上下文将描述

134
00:07:03,023 --> 0:07:05,125
以及为我们分配空间来完成这项工作

135
00:07:06,326 --> 0:07:08,662
在这个例子中

136
00:07:10,531 --> 0:07:13,567
然后我们将把这个上下文

137
00:07:16,937 --> 0:07:18,672
这将实际执行此工作

138
00:07:21,441 --> 0:07:24,511
当我们执行了分析后

139
00:07:24,778 --> 0:07:26,613
这就是魔术发生的地方

140
00:07:27,748 --> 0:07:29,216
这个例程将会识别

141
00:07:29,283 --> 0:07:33,353
任何小于该阈值的频率分量

142
00:07:33,554 --> 0:07:34,621
这将把它清除出去

143
00:07:36,690 --> 0:07:39,159
完成这步之后

144
00:07:43,330 --> 0:07:45,999
我们同样需要使用

145
00:07:48,969 --> 0:07:51,238
在这个例子中

146
00:07:51,305 --> 0:07:53,273
来重建信号

147
00:07:57,077 --> 0:08:00,247
然后我们要将这个上下文传给

148
00:07:57,077 --> 0:08:00,247
然后我们要将这个上下文传给

149
00:08:00,314 --> 0:08:03,383
这实际上将执行重建音频信号的工作

150
00:08:05,586 --> 0:08:06,753
我们向你展示的是

151
00:08:08,055 --> 0:08:10,657
你如何使用vDSP从音频信号中

152
00:08:10,724 --> 0:08:12,392
移除某些类型噪音的例子

153
00:08:13,193 --> 0:08:14,928
我还想向你展示如何通过vDSP

154
00:08:14,995 --> 0:08:18,098
移除图像中的某些类型的噪声的例子

155
00:08:20,868 --> 0:08:24,738
在这个例子中

156
00:08:32,078 --> 0:08:33,647
我们所做的是拍摄了这张图片

157
00:08:35,381 --> 0:08:37,951
并对其使用双色屏处理

158
00:08:39,785 --> 0:08:41,688
这可以代表一张旧报纸的照片

159
00:08:41,922 --> 0:08:45,058
我们要做的就是移除这种效果

160
00:08:45,125 --> 0:08:47,494
我们将尝试移除你看到的痕迹

161
00:08:48,195 --> 0:08:50,664
目前我们处于关闭状态

162
00:08:51,798 --> 0:08:54,234
我们要做的是对这个屏幕取样

163
00:08:54,501 --> 0:08:56,670
然后从该样本中创建一个滤罩

164
00:08:56,737 --> 0:08:59,106
然后将其应用于图像

165
00:08:59,573 --> 0:09:01,308
让我向你展示第一次尝试

166
00:08:59,573 --> 0:09:01,308
让我向你展示第一次尝试

167
00:09:04,811 --> 0:09:07,314
我们所做的是我们识别了

168
00:09:07,714 --> 0:09:09,883
某个阈值的频率分量

169
00:09:10,384 --> 0:09:13,921
任何高于该阈值的频率分量

170
00:09:15,088 --> 0:09:15,989
我们都将会删除

171
00:09:17,024 --> 0:09:18,625
你看 如果我们设置的阈值太低

172
00:09:19,960 --> 0:09:22,129
我们不仅移除了痕迹

173
00:09:22,196 --> 0:09:23,997
也移除了图片的一部分

174
00:09:27,968 --> 0:09:29,236
如果我们设置得太高

175
00:09:32,239 --> 0:09:34,107
你可以看到这没有任何效果

176
00:09:38,946 --> 0:09:40,113
中等程度看起来不错

177
00:09:40,747 --> 0:09:45,719
中等程度似乎能够正确识别

178
00:09:45,886 --> 0:09:47,788
且不至于损坏太多的图像

179
00:09:48,689 --> 0:09:49,857
告诉你我们如何做到

180
00:09:55,262 --> 0:09:56,763
从更高层面来说

181
00:09:56,830 --> 0:10:00,100
我们要对图像和样本执行FFT运算

182
00:09:56,830 --> 0:10:00,100
我们要对图像和样本执行FFT运算

183
00:10:01,235 --> 0:10:03,570
然后我们将从该样本创建一个滤罩

184
00:10:03,837 --> 0:10:05,506
并将其应用于图像

185
00:10:07,341 --> 0:10:08,275
一旦完成这个步骤

186
00:10:08,342 --> 0:10:10,377
我们就可以重建原始图像

187
00:10:10,711 --> 0:10:12,279
我们来看一些代码

188
00:10:14,982 --> 0:10:16,049
我们要做一个FFT

189
00:10:18,452 --> 0:10:20,087
这意味着它必须是二次幂

190
00:10:20,220 --> 0:10:21,755
这就是你看到log2调用的原因

191
00:10:22,890 --> 0:10:25,392
1024x1024是图片的大小

192
00:10:28,562 --> 0:10:31,164
然后我们将它传递给

193
00:10:31,231 --> 0:10:32,499
这里的参数可不少

194
00:10:32,900 --> 0:10:35,702
这里的重点是

195
00:10:35,769 --> 0:10:38,839
所以我们将不得不创建

196
00:10:41,542 --> 0:10:43,744
我们将把它存储在这个复数结构中

197
00:10:43,944 --> 0:10:45,212
这实际上是说

198
00:10:45,279 --> 0:10:47,548
我们将把复数存储在两个数组中

199
00:10:48,182 --> 0:10:49,716
实数部分存储在一个数组中

200
00:10:49,883 --> 0:10:51,385
虚数部分存在第二个数组

201
00:10:52,486 --> 0:10:54,388
我们还需要指定一个方向

202
00:10:54,855 --> 0:10:56,623
这例子中

203
00:10:59,960 --> 0:11:01,528
（频率移除）

204
00:10:59,960 --> 0:11:01,528
（频率移除）

205
00:11:01,595 --> 0:11:06,066
现在 痕迹移除技术更先进一点了

206
00:11:06,133 --> 0:11:08,435
所以我只会在较高的层面讨论它

207
00:11:09,069 --> 0:11:10,904
我建议你下载示例app

208
00:11:10,971 --> 0:11:12,372
它现在可以在线下载

209
00:11:12,773 --> 0:11:16,643
而且其中每个例程

210
00:11:16,710 --> 0:11:18,245
我们拥有出色的在线文档

211
00:11:20,480 --> 0:11:21,648
从高层角度来说

212
00:11:21,715 --> 0:11:24,985
我们要做的是识别频率分量的大小

213
00:11:25,052 --> 0:11:26,353
在这个例子中即样本

214
00:11:27,921 --> 0:11:30,224
然后我们将确定要删除的分量

215
00:11:33,026 --> 0:11:35,462
接着我们将从中创建一个滤罩

216
00:11:36,964 --> 0:11:38,899
一旦完成这些步骤

217
00:11:38,966 --> 0:11:39,833
应用到图片上

218
00:11:41,068 --> 0:11:42,102
实际上我们做的是

219
00:11:42,169 --> 0:11:45,205
我们将想要删除的部分乘以0

220
00:11:45,272 --> 0:11:47,207
而将想要保留的分量乘以1

221
00:11:52,279 --> 0:11:54,915
我们再次使用zrop来重建图像

222
00:11:54,982 --> 0:11:57,518
由于这是一个FFT

223
00:12:01,321 --> 0:12:03,557
在这个例子中有一个关键细节

224
00:12:03,857 --> 0:12:06,226
即我们要将图像存储在两个数组中

225
00:12:06,393 --> 0:12:07,728
因为这是一个复数结构

226
00:12:08,061 --> 0:12:10,063
其中偶数像素将保存在实数数组中

227
00:12:10,230 --> 0:12:12,232
而奇数像素保存在虚数数组中

228
00:12:15,102 --> 0:12:16,603
我们还要指定一个方向

229
00:12:16,670 --> 0:12:18,705
这次我们将使用逆FFT

230
00:12:19,907 --> 0:12:21,875
现在我想稍微换个挡

231
00:12:21,942 --> 0:12:24,411
刚才我们向你展示了两个例子

232
00:12:26,046 --> 0:12:28,749
我们有两个vDSP的工作示例

233
00:12:29,283 --> 0:12:30,317
然后我们退一步

234
00:12:30,384 --> 0:12:34,588
向你展示了我们如何创建这些示例

235
00:12:34,655 --> 0:12:36,590
我们后退一步向你展示了

236
00:12:37,925 --> 0:12:38,792
对于下一个库

237
00:12:38,859 --> 0:12:41,128
我想要做的是从基本组件开始

238
00:12:41,195 --> 0:12:42,863
我想逐步达到我们的效果

239
00:12:43,163 --> 0:12:44,765
我们来看看simd

240
00:12:45,332 --> 0:12:47,601
我们将从基本的低级原语开始

241
00:12:47,801 --> 0:12:50,003
我们将要逐步实现旋转效果

242
00:12:50,070 --> 0:12:52,005
在这个例子中是对3D对象的旋转

243
00:12:54,575 --> 0:12:55,475
从高层角度来说

244
00:12:57,144 --> 0:12:59,580
simd是矢量处理单元的抽象

245
00:13:00,447 --> 0:13:04,885
它可以让你声明向量和矩阵对象

246
00:13:05,352 --> 0:13:07,754
然后你可以对这些对象执行操作

247
00:13:07,821 --> 0:13:10,691
这将直接映射到处理器的矢量硬件

248
00:13:11,992 --> 0:13:13,427
我们来看一个代码例子

249
00:13:16,096 --> 0:13:18,165
我们这里要做的是取两个数组

250
00:13:18,232 --> 0:13:20,167
计算其元素的平均值

251
00:13:20,534 --> 0:13:23,670
所以我们将遍历其中每个标量

252
00:13:23,737 --> 0:13:25,439
将它们加在一起再除以二

253
00:13:27,574 --> 0:13:28,842
这将会非常缓慢

254
00:13:31,044 --> 0:13:35,048
另一种方法 你可将这些数组声明为

255
00:13:36,550 --> 0:13:38,185
然后我们可以

256
00:13:38,252 --> 0:13:41,622
对这些对象进行基本的算术运算

257
00:13:43,423 --> 0:13:45,726
因此你不仅可以更自然地表达计算

258
00:13:45,792 --> 0:13:48,462
而且它也会尽可能快地运行

259
00:13:49,763 --> 0:13:51,698
这将适用于所有Apple平台

260
00:13:55,969 --> 0:13:58,005
simd具有大量的功能

261
00:13:58,705 --> 0:14:01,308
除了矢量和矩阵对象之外

262
00:13:58,705 --> 0:14:01,308
除了矢量和矩阵对象之外

263
00:14:02,709 --> 0:14:06,713
它还允许你对这些对象执行算术运算

264
00:14:08,749 --> 0:14:09,750
它还具有扩展功能

265
00:14:09,816 --> 0:14:12,286
例如 点积和clamp函数

266
00:14:14,188 --> 0:14:15,956
它也支持超越函数

267
00:14:16,023 --> 0:14:17,591
例如正弦和余弦

268
00:14:19,726 --> 0:14:21,128
以及四元数

269
00:14:21,595 --> 0:14:22,829
四元数在表示三维旋转时

270
00:14:22,896 --> 0:14:25,065
是非常有用的

271
00:14:25,365 --> 0:14:27,668
我想多谈一点这个话题

272
00:14:29,903 --> 0:14:32,105
我们来看一段代码示例

273
00:14:33,674 --> 0:14:35,108
这里有很多东西要展开讨论

274
00:14:35,876 --> 0:14:36,810
所以我们从右边开始

275
00:14:37,544 --> 0:14:39,813
这里有一个单位球体

276
00:14:40,280 --> 0:14:41,748
你会注意到这个红点

277
00:14:43,150 --> 0:14:44,852
这实际上是这个向量的尖端

278
00:14:45,953 --> 0:14:48,121
我们声明了

279
00:14:48,188 --> 0:14:50,190
我们将x和y分量设置为零

280
00:14:50,390 --> 0:14:51,792
并将z分量设置为1

281
00:14:52,092 --> 0:14:53,393
所以它指向我们

282
00:14:54,461 --> 0:14:57,064
那个红色点代表该向量的尖端

283
00:14:58,932 --> 0:15:02,135
我们现在要使用四元数

284
00:14:58,932 --> 0:15:02,135
我们现在要使用四元数

285
00:15:03,670 --> 0:15:05,472
从技术上来说

286
00:15:05,539 --> 0:15:06,773
但出于说明的目的

287
00:15:06,840 --> 0:15:08,509
我们说我们正在旋转这个向量

288
00:15:10,010 --> 0:15:11,879
当使用四元数进行旋转时

289
00:15:12,112 --> 0:15:14,515
你需要指定一个轴和旋转角度

290
00:15:15,649 --> 0:15:16,683
或者换一种说法

291
00:15:16,984 --> 0:15:19,152
你在旋转什么以及旋转了多少

292
00:15:20,120 --> 0:15:21,922
我们要围绕X轴旋转

293
00:15:21,989 --> 0:15:24,791
我们将向上旋转三个pi的弧度

294
00:15:27,628 --> 0:15:30,130
你可通过调用simd_act

295
00:15:31,899 --> 0:15:34,168
这将在该向量上执行四元数的动作

296
00:15:34,234 --> 0:15:35,802
并返回一个

297
00:15:37,137 --> 0:15:38,272
现在我们来看看

298
00:15:47,214 --> 0:15:50,551
通常情况下

299
00:15:50,617 --> 0:15:52,786
你通常要沿多个轴旋转

300
00:15:54,521 --> 0:15:56,290
如果你已经熟悉旋转矩阵

301
00:15:56,356 --> 0:15:57,791
这将看起来很自然

302
00:16:00,127 --> 0:16:01,061
就像旋转矩阵一样

303
00:16:01,128 --> 0:16:03,096
你可以使用乘法来结合旋转

304
00:16:03,163 --> 0:16:06,433
并且也像旋转矩阵一样

305
00:16:06,867 --> 0:16:08,936
所以这意味着

306
00:16:09,002 --> 0:16:10,871
你将改变旋转的顺序

307
00:16:13,440 --> 0:16:16,577
这里我们要做的事情是

308
00:16:17,110 --> 0:16:18,979
然后向右旋转三个pi的弧度

309
00:16:19,046 --> 0:16:21,048
我们将它们组合成一个单一的旋转

310
00:16:26,854 --> 0:16:27,955
你可用四元数和simd

311
00:16:28,021 --> 0:16:30,891
来做的一些更有趣的事情是插值

312
00:16:30,958 --> 0:16:33,260
我们支持两种类型的插值

313
00:16:34,862 --> 0:16:36,063
第一种是Slerp

314
00:16:37,865 --> 0:16:39,833
它代表球面线性插值

315
00:16:42,035 --> 0:16:43,670
它实际上有两种变体

316
00:16:47,207 --> 0:16:48,475
我们有一个

317
00:16:48,542 --> 0:16:50,644
它能找到这两个点之间的最短弧

318
00:16:50,711 --> 0:16:52,379
这个例子中

319
00:16:53,747 --> 0:16:56,216
我们还有simd_slerp_longest函数

320
00:16:56,283 --> 0:16:58,218
所以你会发现它位于单位球体后面

321
00:17:07,127 --> 0:17:08,694
第二种变体是Spline

322
00:17:09,730 --> 0:17:13,000
当你有两个以上的旋转时

323
00:17:13,066 --> 0:17:14,667
例如 在这里我们要

324
00:17:14,734 --> 0:17:17,171
在一个旋转数组中进行插值

325
00:17:17,971 --> 0:17:19,506
这里有很多样板代码

326
00:17:19,573 --> 0:17:21,608
我希望你只关注

327
00:17:24,645 --> 0:17:26,346
我们实际上正在做的只是

328
00:17:26,413 --> 0:17:29,583
遍历每个旋转

329
00:17:34,454 --> 0:17:35,956
你不仅要用Spline指定

330
00:17:36,023 --> 0:17:40,127
你希望插入的两个旋转

331
00:17:40,194 --> 0:17:42,396
也应该指定上一个和下一个旋转

332
00:17:44,531 --> 0:17:45,766
像这个样子

333
00:17:51,972 --> 0:17:52,840
如果你是一个游戏开发者

334
00:17:52,906 --> 0:17:55,576
你可能对旋转单独的矢量不感兴趣

335
00:17:55,642 --> 0:17:57,578
你可能对旋转物体感兴趣

336
00:17:57,845 --> 0:17:58,912
我们为你准备了这个

337
00:17:59,313 --> 0:18:00,280
这是一个立方体

338
00:17:59,313 --> 0:18:00,280
这是一个立方体

339
00:18:00,347 --> 0:18:03,016
它由多个向量表示

340
00:18:03,083 --> 0:18:04,952
它将经历一连串的八次旋转

341
00:18:05,452 --> 0:18:07,221
在左边 我们将使用Slerp来

342
00:18:07,287 --> 0:18:08,422
跟踪这些旋转

343
00:18:08,689 --> 0:18:10,090
右边

344
00:18:10,390 --> 0:18:11,959
我们来看看Slerp的效果

345
00:18:19,766 --> 0:18:21,502
你可以看到

346
00:18:21,568 --> 0:18:24,705
它每改变一次方向

347
00:18:25,305 --> 0:18:26,640
而如果我们看Spline

348
00:18:35,082 --> 0:18:37,784
由于它还知道前一轮和下一轮旋转

349
00:18:37,851 --> 0:18:39,520
你最终会得到这些圆角

350
00:18:39,586 --> 0:18:40,654
所以让我们再看一遍

351
00:18:52,599 --> 0:18:54,401
我非常快速地讨论了所有这些话题

352
00:18:55,469 --> 0:18:56,570
我们来回顾一下

353
00:18:58,272 --> 0:19:00,073
我们首先看了下vDSP

354
00:18:58,272 --> 0:19:00,073
我们首先看了下vDSP

355
00:19:00,340 --> 0:19:01,642
并向你展示了两个例子

356
00:19:01,708 --> 0:19:04,077
第一个是如何从噪声中提取信号

357
00:19:04,511 --> 0:19:07,714
第二个是如何从图像中

358
00:19:08,949 --> 0:19:10,417
然后我们讨论了simd

359
00:19:10,484 --> 0:19:12,519
我向你展示了如何使用四元数

360
00:19:12,586 --> 0:19:14,154
来表示三维旋转

361
00:19:15,255 --> 0:19:17,891
我现在要将话筒交给

362
00:19:18,192 --> 0:19:19,526
他将向你展示一些

363
00:19:19,593 --> 0:19:20,527
有趣的事情

364
00:19:26,667 --> 0:19:27,568
谢谢你 Matthew

365
00:19:30,137 --> 0:19:32,472
大家好 我叫Luke Chang

366
00:19:32,539 --> 0:19:34,508
我是矢量和数值团队的工程师

367
00:19:35,142 --> 0:19:38,745
今天我要谈论vImage

368
00:19:39,046 --> 0:19:41,882
以及在你的app

369
00:19:42,249 --> 0:19:43,717
只需几行代码

370
00:19:43,784 --> 0:19:46,954
你就可以在你的app中

371
00:19:47,354 --> 0:19:48,388
让我们开始吧

372
00:19:50,824 --> 0:19:53,527
VImage是我们的图像处理库

373
00:19:54,561 --> 0:19:55,996
它有几个组件

374
00:19:56,063 --> 0:19:57,397
第一个组件

375
00:19:57,931 --> 0:19:59,299
是转换函数

376
00:20:00,100 --> 0:20:05,506
转换函数可帮助你

377
00:20:06,406 --> 0:20:09,943
不同的图像格式有不同的优势

378
00:20:10,110 --> 0:20:10,944
例如

379
00:20:11,578 --> 0:20:14,648
RGB格式与显示器上的像素相匹配

380
00:20:14,948 --> 0:20:16,450
所以它最适合显示

381
00:20:17,084 --> 0:20:19,887
另一方面 我们有YCbCr图像

382
00:20:20,654 --> 0:20:23,490
这与人类如何感知图像相似

383
00:20:23,957 --> 0:20:27,794
人眼识别亮度 这就是亮度信道

384
00:20:28,495 --> 0:20:30,964
还有颜色 即色度信道

385
00:20:32,065 --> 0:20:36,370
而且相机使用

386
00:20:37,371 --> 0:20:38,672
因此转换函数

387
00:20:38,739 --> 0:20:41,708
可帮助你轻松地在这些格式之间

388
00:20:43,644 --> 0:20:45,779
我们还有几何函数

389
00:20:46,880 --> 0:20:51,685
几何函数能改变图像的大小或方向

390
00:20:52,085 --> 0:20:53,453
我们有vImageScale

391
00:20:54,021 --> 0:20:56,823
它可以放大或缩小图像

392
00:20:57,391 --> 0:20:59,026
我们使用Lanczos算法

393
00:20:59,092 --> 0:21:02,663
因此在操作之后会有高质量的输出

394
00:20:59,092 --> 0:21:02,663
因此在操作之后会有高质量的输出

395
00:21:03,797 --> 0:21:05,832
我们也有vImageRotate

396
00:21:05,966 --> 0:21:09,002
可以顺时针或逆时针旋转图像

397
00:21:11,171 --> 0:21:13,173
接下来我们还有卷积函数

398
00:21:14,007 --> 0:21:16,710
卷积函数最显着的效果

399
00:21:16,777 --> 0:21:18,145
是模糊效果

400
00:21:18,745 --> 0:21:23,116
你到处都能见到模糊效果

401
00:21:23,650 --> 0:21:26,119
如果你想将某些东西渐淡到背景中

402
00:21:26,253 --> 0:21:29,022
你就可以使用模糊函数

403
00:21:31,024 --> 0:21:32,826
接下来是变换函数

404
00:21:33,727 --> 0:21:36,897
变换函数基本上是一个矩阵乘法

405
00:21:37,397 --> 0:21:40,601
它可以让你在每个像素的

406
00:21:41,168 --> 0:21:44,104
假设你想增强红色或增强绿色

407
00:21:44,371 --> 0:21:46,707
你可以用变换函数来做到这一点

408
00:21:48,709 --> 0:21:49,710
形态函数

409
00:21:50,377 --> 0:21:55,682
形态函数改变图像中

410
00:21:55,749 --> 0:21:56,917
而不改变图片本身

411
00:21:57,818 --> 0:21:59,586
我们有vImageErode

412
00:22:00,153 --> 0:22:04,124
和vImageDilate

413
00:22:05,425 --> 0:22:06,960
如果你感觉这很冒险

414
00:22:07,027 --> 0:22:10,931
你实际上可以为这些函数

415
00:22:11,398 --> 0:22:16,503
vImage侵蚀和扩张函数

416
00:22:16,570 --> 0:22:18,405
来使物体变小或变大

417
00:22:20,340 --> 0:22:22,676
这些是vImage中的五种工具

418
00:22:22,743 --> 0:22:26,947
现在我想向你展示我们

419
00:22:27,147 --> 0:22:29,917
来演示你可以使用vImage

420
00:22:33,520 --> 0:22:36,557
这里有一个使用后置摄像头

421
00:22:36,623 --> 0:22:37,958
捕捉图像的实验

422
00:22:38,792 --> 0:22:41,461
我们将图像投影到屏幕上

423
00:22:42,396 --> 0:22:44,531
我们现在是实时操作

424
00:22:44,598 --> 0:22:45,666
这是一个直播视频流

425
00:22:45,732 --> 0:22:49,803
你可以看到那只喝水鸟

426
00:22:50,571 --> 0:22:51,572
好 我想向你展示的

427
00:22:51,638 --> 0:22:54,441
第一个效果是颜色饱和效果

428
00:22:54,775 --> 0:22:59,313
你可以在很多照片编辑软件中

429
00:23:00,047 --> 0:23:02,416
现在我想突出颜色效果

430
00:23:02,549 --> 0:23:06,453
我可以将此滑块移到右侧

431
00:23:09,122 --> 0:23:11,992
使红色更红 绿色更绿

432
00:23:13,560 --> 0:23:16,730
在另一边有一朵白玫瑰

433
00:23:17,264 --> 0:23:21,602
我觉得白玫瑰的颜色

434
00:23:21,668 --> 0:23:25,572
我想引导我的观众关注其构图

435
00:23:25,973 --> 0:23:28,041
以及这张图片的对比度

436
00:23:28,876 --> 0:23:33,881
我可以向左滑动来使图像去饱和

437
00:23:36,083 --> 0:23:39,453
直到它变成黑白图像

438
00:23:40,120 --> 0:23:43,056
现在色彩在这张图片中不再让人分心

439
00:23:43,123 --> 0:23:46,860
现在观众可以专注于构图和对比

440
00:23:48,095 --> 0:23:48,929
好

441
00:23:49,162 --> 0:23:50,030
所以…

442
00:23:50,230 --> 0:23:51,298
我们如何做到这一点

443
00:23:55,969 --> 0:23:57,704
我们需要采取几个步骤

444
00:23:57,938 --> 0:24:01,642
首先 我们当然必须从相机获取图像

445
00:23:57,938 --> 0:24:01,642
首先 我们当然必须从相机获取图像

446
00:24:03,710 --> 0:24:08,515
然后我们要使用

447
00:24:08,582 --> 0:24:12,252
因此我们必须为vImage的

448
00:24:13,687 --> 0:24:17,591
然后我们实际调用vImage函数

449
00:24:18,859 --> 0:24:21,328
并将输出显示在屏幕上

450
00:24:22,596 --> 0:24:23,697
我们先来讨论

451
00:24:24,531 --> 0:24:27,968
如何使用vImage函数

452
00:24:30,671 --> 0:24:33,140
我向你展示的是一种色彩饱和效果

453
00:24:33,207 --> 0:24:36,610
这是计算色彩饱和效果的公式

454
00:24:37,110 --> 0:24:40,080
我们想要消除像素的偏差

455
00:24:40,781 --> 0:24:44,751
并使用乘法来应用饱和效果

456
00:24:45,552 --> 0:24:48,388
然后我们再将偏差放回像素

457
00:24:49,623 --> 0:24:53,126
VImage具有完成此操作的函数

458
00:24:53,594 --> 0:24:56,129
即vImageMatrixMultiply

459
00:24:58,265 --> 0:25:01,068
vImageMatrixMultiply

460
00:24:58,265 --> 0:25:01,068
vImageMatrixMultiply

461
00:25:01,301 --> 0:25:04,805
在这个例子中为-128

462
00:25:06,106 --> 0:25:09,243
由于饱和度是浮点数

463
00:25:09,309 --> 0:25:11,111
而图像是一个整数

464
00:25:11,745 --> 0:25:16,016
我们希望先将此饱和度值

465
00:25:16,283 --> 0:25:21,388
我们选择Q12作为定点格式

466
00:25:22,756 --> 0:25:25,859
再是postBias参数

467
00:25:25,926 --> 0:25:27,995
以此将偏差放回像素

468
00:25:30,430 --> 0:25:32,799
矩阵本身非常简单

469
00:25:33,033 --> 0:25:37,337
我们所要做的

470
00:25:37,471 --> 0:25:39,606
所以矩阵本身就是一个缩放器

471
00:25:39,806 --> 0:25:44,044
将CbCr信道与该缩放器相乘

472
00:25:45,546 --> 0:25:49,249
有了所需的所有信息

473
00:25:49,883 --> 0:25:52,920
只需一行代码 一个函数调用

474
00:25:53,120 --> 0:25:55,522
你就可以实现这个饱和效果

475
00:25:57,157 --> 0:25:59,826
现在让我们回到需要采取的其他步骤

476
00:26:01,161 --> 0:26:03,830
我们需要从相机拍摄图像

477
00:26:03,997 --> 0:26:04,932
我们如何做到这一点？

478
00:26:06,466 --> 0:26:08,168
我们需要写一个委托方法

479
00:26:08,902 --> 0:26:12,306
相机给我们的是

480
00:26:13,273 --> 0:26:14,875
因此我们获取这个缓冲区

481
00:26:15,843 --> 0:26:19,613
我们必须确保CPU可以访问

482
00:26:19,880 --> 0:26:21,315
这即vImage所在之处

483
00:26:22,182 --> 0:26:26,019
在我们应用这些效果之后

484
00:26:26,353 --> 0:26:30,057
我们必须解锁

485
00:26:30,757 --> 0:26:33,527
以便相机可以重新使用这块内存

486
00:26:36,797 --> 0:26:37,764
第二步

487
00:26:37,831 --> 0:26:40,868
我们必须准备

488
00:26:43,504 --> 0:26:46,640
我们已经在CVImageBuffer中

489
00:26:46,707 --> 0:26:47,641
我们需要做的

490
00:26:47,708 --> 0:26:52,079
只是获取如高度和宽度等信息

491
00:26:53,247 --> 0:26:56,850
然后我们可以将它打包成

492
00:26:57,217 --> 0:26:59,386
以便它可以被vImage库使用

493
00:26:59,786 --> 0:27:02,089
我们为亮度和色度信道进行这项操作

494
00:26:59,786 --> 0:27:02,089
我们为亮度和色度信道进行这项操作

495
00:27:03,524 --> 0:27:05,626
现在我们需要准备一个输出缓冲区

496
00:27:06,493 --> 0:27:10,931
请记住 我们还没有为输出图像

497
00:27:11,164 --> 0:27:12,199
因此我们需要这样做

498
00:27:12,799 --> 0:27:16,303
vImage有一个很方便的函数

499
00:27:16,470 --> 0:27:17,437
可以做到这一点

500
00:27:18,672 --> 0:27:23,110
给定其高度 宽度和每像素位数

501
00:27:23,944 --> 0:27:27,881
vImageBuffer_Init

502
00:27:27,948 --> 0:27:30,584
然后也会创建一个

503
00:27:30,651 --> 0:27:33,387
从而可以被vImage库使用

504
00:27:35,722 --> 0:27:36,623
最后一步

505
00:27:36,857 --> 0:27:40,060
是将处理后的图像输出到屏幕上

506
00:27:43,397 --> 0:27:48,202
正如我之前所说的

507
00:27:48,268 --> 0:27:54,041
所以让我们使用转换函数

508
00:27:54,308 --> 0:27:58,478
然后 因为用户界面

509
00:27:58,679 --> 0:27:59,880
所以我们必须创建一个

510
00:28:01,481 --> 0:28:03,317
在vImage中有一个方便的函数

511
00:28:03,383 --> 0:28:06,854
vImageCreateCGImageFromBuffer

512
00:28:08,021 --> 0:28:10,123
它能帮助你

513
00:28:10,190 --> 0:28:12,960
来创建CGImage

514
00:28:13,794 --> 0:28:15,128
需要注意的一点是

515
00:28:15,362 --> 0:28:19,299
我们实际上并没有将

516
00:28:19,366 --> 0:28:20,834
从一个地方复制到另一个地方

517
00:28:21,201 --> 0:28:24,037
我们只是简单的创建一个

518
00:28:24,371 --> 0:28:27,474
其向该图像缓冲区添加一个容器

519
00:28:28,141 --> 0:28:31,678
因此我们只是向其中

520
00:28:31,745 --> 0:28:35,516
创建一个CGImage对象

521
00:28:37,150 --> 0:28:38,118
一旦有了该对象

522
00:28:38,285 --> 0:28:41,722
我们就可以将CGImage对象

523
00:28:42,422 --> 0:28:44,458
它就会显示在屏幕上

524
00:28:44,892 --> 0:28:45,859
就这么简单

525
00:28:46,293 --> 0:28:49,897
只需四个步骤

526
00:28:50,163 --> 0:28:51,899
我们向你展示了饱和效果

527
00:28:51,965 --> 0:28:52,799
现在

528
00:28:53,767 --> 0:28:56,170
我们还可以用

529
00:28:57,538 --> 0:28:59,873
我们可以做一个旋转

530
00:28:59,940 --> 0:29:02,976
顺时针或逆时针旋转图像

531
00:28:59,940 --> 0:29:02,976
顺时针或逆时针旋转图像

532
00:29:03,577 --> 0:29:04,611
我们可以模糊化

533
00:29:05,412 --> 0:29:07,181
将某些东西渐淡到背景中

534
00:29:08,081 --> 0:29:09,016
你感觉…

535
00:29:10,017 --> 0:29:13,287
如果你觉得你想为图片

536
00:29:13,353 --> 0:29:16,056
你可以对黑白图像进行抖动处理

537
00:29:16,657 --> 0:29:19,326
或对彩色图像进行色彩量化

538
00:29:20,260 --> 0:29:23,363
我们来看看它们在app中的样子

539
00:29:36,410 --> 0:29:37,344
再一次

540
00:29:37,411 --> 0:29:40,314
这里有个滑块来控制旋转

541
00:29:40,848 --> 0:29:44,351
我可以逆时针旋转

542
00:29:46,220 --> 0:29:48,655
或顺时针旋转

543
00:29:51,525 --> 0:29:53,460
现在我想尝试模糊效果

544
00:29:53,594 --> 0:29:55,095
让我点击这里的一个按钮

545
00:29:55,963 --> 0:29:56,897
然后…

546
00:29:57,231 --> 0:29:59,199
我可以加深模糊

547
00:30:00,534 --> 0:30:03,036
或…向左滑动

548
00:30:03,670 --> 0:30:05,873
将玫瑰带回前景

549
00:30:08,008 --> 0:30:10,077
对于黑白相片 我可以使用抖动

550
00:30:12,246 --> 0:30:14,915
现在 这张黑白图片

551
00:30:14,982 --> 0:30:18,752
其灰度现在由点的密度表示

552
00:30:18,819 --> 0:30:20,220
这就是抖动效果

553
00:30:20,287 --> 0:30:24,191
我们使用了重音和抖动算法

554
00:30:24,258 --> 0:30:25,893
我稍后会告诉你该如何做

555
00:30:27,094 --> 0:30:30,130
对于色彩量化 我们使用了查找表

556
00:30:31,098 --> 0:30:34,301
我可以移动这个滑块来增加量化级别

557
00:30:34,368 --> 0:30:36,603
当我将滑块向右移动时

558
00:30:36,970 --> 0:30:40,707
此图片中的颜色越来越少

559
00:30:41,308 --> 0:30:42,910
这很有创意…

560
00:30:44,511 --> 0:30:48,415
这就是电脑屏幕在

561
00:30:50,384 --> 0:30:51,318
好的

562
00:30:51,385 --> 0:30:52,252
所以…

563
00:30:53,220 --> 0:30:54,755
我们来看看这是如何做到的

564
00:30:58,458 --> 0:30:59,426
对于旋转效果

565
00:30:59,493 --> 0:31:01,695
你可以调用

566
00:30:59,493 --> 0:31:01,695
你可以调用

567
00:31:01,962 --> 0:31:04,364
并给定旋转角度

568
00:31:04,431 --> 0:31:08,035
它就会逆时针或顺时针旋转你的图像

569
00:31:09,970 --> 0:31:12,673
对于模糊效果 我们使用

570
00:31:13,574 --> 0:31:16,043
模糊效果由内核大小控制

571
00:31:16,610 --> 0:31:19,146
内核越大 就会越模糊

572
00:31:21,682 --> 0:31:26,153
抖动效果基本上就是将8位图像

573
00:31:26,220 --> 0:31:29,156
同时你可以指定抖动算法

574
00:31:29,656 --> 0:31:32,626
在这个例子中

575
00:31:35,429 --> 0:31:38,599
对于色彩量化

576
00:31:38,665 --> 0:31:41,969
来为RGB信道创建一个查找表

577
00:31:42,836 --> 0:31:45,272
然后我们调用

578
00:31:45,739 --> 0:31:48,509
来将此查找表应用于RGB信道

579
00:31:48,575 --> 0:31:51,078
以限制屏幕上的颜色数量

580
00:31:54,047 --> 0:31:56,950
这些是我想向你展示的四个额外效果

581
00:31:57,017 --> 0:32:01,255
我认为现在是

582
00:31:57,017 --> 0:32:01,255
我认为现在是

583
00:32:04,491 --> 0:32:05,726
LINPACK Benchmark

584
00:32:06,860 --> 0:32:09,696
我们谈到了

585
00:32:09,897 --> 0:32:13,667
我们也谈论了在你的app中

586
00:32:14,368 --> 0:32:17,838
但我们还没有谈到

587
00:32:18,605 --> 0:32:21,308
LINPACK Benchmark

588
00:32:23,443 --> 0:32:24,945
什么是LINPACK Benchmark？

589
00:32:25,712 --> 0:32:27,347
它实际上会试图衡量

590
00:32:27,414 --> 0:32:30,551
你可以多快地解决

591
00:32:31,718 --> 0:32:34,721
实际上有三种不同的

592
00:32:34,788 --> 0:32:37,958
第一个解决的是

593
00:32:38,859 --> 0:32:41,461
第二个解决的是1000乘1000

594
00:32:42,229 --> 0:32:43,230
最后一个…

595
00:32:43,830 --> 0:32:47,367
这是最有趣的一个

596
00:32:47,935 --> 0:32:48,836
即“不受限”

597
00:32:49,136 --> 0:32:51,471
你可以解决你想要的任意大的系统

598
00:32:51,638 --> 0:32:55,108
来充分利用你的机器上的

599
00:32:55,175 --> 0:32:56,009
所有计算能力

600
00:32:57,344 --> 0:33:01,882
我们看看使用Accelerate

601
00:32:57,344 --> 0:33:01,882
我们看看使用Accelerate

602
00:33:03,083 --> 0:33:05,185
性能以吉拍来衡量

603
00:33:07,087 --> 0:33:10,457
以双精度运算追赶

604
00:33:11,225 --> 0:33:12,526
iPhone 6

605
00:33:13,927 --> 0:33:15,329
iPhone 6S

606
00:33:16,230 --> 0:33:17,464
iPhone 7

607
00:33:18,065 --> 0:33:21,902
iPhone X

608
00:33:22,269 --> 0:33:23,570
这是双精度运算

609
00:33:23,837 --> 0:33:25,439
我们来看看单精度

610
00:33:26,974 --> 0:33:27,841
再一次…

611
00:33:31,044 --> 0:33:31,912
我们的空间用完了

612
00:33:31,979 --> 0:33:35,048
我们不得不缩小以使它们更靠近

613
00:33:38,252 --> 0:33:41,655
iPhone X

614
00:33:42,723 --> 0:33:46,527
现在你可能会想 这并不令人意外

615
00:33:47,160 --> 0:33:48,762
然而 随着时间的推移

616
00:33:48,829 --> 0:33:51,698
它的性能也会随之提高

617
00:33:52,399 --> 0:33:55,302
但事实上 这并不是全部

618
00:33:56,603 --> 0:33:58,172
当微架构发生变化

619
00:33:58,238 --> 0:34:01,175
从而为机器提供额外的计算能力时

620
00:33:58,238 --> 0:34:01,175
从而为机器提供额外的计算能力时

621
00:34:01,742 --> 0:34:02,943
你需要相应的软件

622
00:34:03,010 --> 0:34:06,079
来充分利用这些额外的计算能力

623
00:34:06,680 --> 0:34:08,014
这就是与我们相关的地方

624
00:34:08,982 --> 0:34:12,886
请记住 这些是用同样的

625
00:34:13,187 --> 0:34:16,089
运行在所有五代iPhone上

626
00:34:16,422 --> 0:34:19,092
他们都使用Accelerate

627
00:34:20,260 --> 0:34:21,527
而无需做出任何改变

628
00:34:23,297 --> 0:34:25,232
对于你的app也是如此

629
00:34:25,799 --> 0:34:28,101
如果你在app中

630
00:34:28,302 --> 0:34:31,138
你将自动获得最佳性能

631
00:34:31,405 --> 0:34:34,241
在我们支持的所有架构上

632
00:34:35,641 --> 0:34:36,577
此外…

633
00:34:37,511 --> 0:34:40,514
Accelerate还支持多平台

634
00:34:41,014 --> 0:34:45,719
Accelerate能在macOS、iOS

635
00:34:47,221 --> 0:34:48,589
假设明天

636
00:34:48,655 --> 0:34:52,092
Apple推出了新架构或新平台

637
00:34:52,359 --> 0:34:53,793
你也不必担心

638
00:34:54,561 --> 0:34:57,764
你需要做的

639
00:34:57,931 --> 0:35:01,535
顶多是重新构建你的app

640
00:34:57,931 --> 0:35:01,535
顶多是重新构建你的app

641
00:35:01,735 --> 0:35:04,505
你将自动在最新版本的平台或架构上

642
00:35:04,805 --> 0:35:07,741
获得最佳性能

643
00:35:10,711 --> 0:35:12,346
总而言之

644
00:35:12,779 --> 0:35:18,185
我们谈到Accelerate

645
00:35:18,819 --> 0:35:19,653
有极大可能

646
00:35:19,720 --> 0:35:21,955
你会在Accelerate中

647
00:35:22,489 --> 0:35:24,558
如果你需要一些我们还没有的功能

648
00:35:24,625 --> 0:35:27,261
请随时提交功能请求

649
00:35:27,928 --> 0:35:30,097
我们经常查看这个功能请求

650
00:35:30,163 --> 0:35:32,299
对它们进行评估 然后投入构建

651
00:35:32,766 --> 0:35:37,371
实际上 我们的一些最佳功能

652
00:35:38,939 --> 0:35:40,674
Accelerate很容易使用

653
00:35:40,941 --> 0:35:41,942
大部分时间

654
00:35:42,009 --> 0:35:44,211
只用一个函数调用就可以完成工作

655
00:35:45,445 --> 0:35:47,681
它快速且节能

656
00:35:48,115 --> 0:35:52,519
因此你的app更具响应能力

657
00:35:53,854 --> 0:35:57,357
Accelerate可跨平台

658
00:35:57,558 --> 0:36:00,627
你可以在我们支持的

659
00:35:57,558 --> 0:36:00,627
你可以在我们支持的

660
00:36:00,694 --> 0:36:03,597
均获得最佳性能

661
00:36:03,964 --> 0:36:06,567
而其中最棒的是你不必改变你的代码

662
00:36:09,036 --> 0:36:10,003
欲了解更多信息

663
00:36:10,070 --> 0:36:14,007
你可以参阅developer.apple.com上的

664
00:36:14,208 --> 0:36:18,245
我们所有的演示app

665
00:36:18,312 --> 0:36:19,713
都会在线提供

666
00:36:20,581 --> 0:36:23,450
明天下午两点

667
00:36:24,117 --> 0:36:25,986
我期待在那里见到你们

668
00:36:26,053 --> 0:36:27,387
如果你有任何问题

669
00:36:27,654 --> 0:36:29,623
或你想了解更多

670
00:36:30,057 --> 0:36:31,425
我很乐意在那里见到你

671
00:36:33,393 --> 0:36:34,995
以上就是我们今天的演讲

672
00:36:35,062 --> 0:36:36,196
谢谢大家的光临

673
00:36:36,363 --> 0:36:37,231
祝你有美好的一天
