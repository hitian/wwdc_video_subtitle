1
00:00:16,750 --> 0:00:22,890
（充分利用XCODE中的

2
00:00:22,956 --> 0:00:24,057
（演讲402）

3
00:00:29,062 --> 0:00:30,097
下午好！

4
00:00:30,163 --> 0:00:33,066
欢迎来到“充分利用Xcode中的

5
00:00:33,467 --> 0:00:37,104
我叫Tibet Rooney-Rabdau

6
00:00:37,171 --> 0:00:38,972
Alex Brown

7
00:00:40,207 --> 0:00:42,209
我喜欢每次当我有新的编程想法时

8
00:00:42,276 --> 0:00:44,444
我能直接在Playground中

9
00:00:45,112 --> 0:00:48,682
在今天的演讲中 我们将与你

10
00:00:49,383 --> 0:00:50,384
对于那些不太熟悉

11
00:00:50,450 --> 0:00:53,053
Xcode中Playground

12
00:00:53,120 --> 0:00:54,755
这都将是一次很棒的演讲

13
00:00:56,890 --> 0:00:59,826
我们将从Playground原理

14
00:01:00,327 --> 0:01:04,431
简要介绍Playground

15
00:01:05,432 --> 0:01:08,235
然后向你展示如何在

16
00:01:08,936 --> 0:01:12,606
我们将讨论一些能让你更好地

17
00:01:14,208 --> 0:01:16,610
最后 我们以一些更高级的技术收尾

18
00:01:16,944 --> 0:01:20,347
包括走进Custom Playground

19
00:01:20,647 --> 0:01:23,984
我们将使用此协议

20
00:01:25,052 --> 0:01:30,490
我们还将讨论如何使用工作区

21
00:01:32,559 --> 0:01:35,729
使用Playground

22
00:01:35,796 --> 0:01:39,066
也可以为他人创建学习环境

23
00:01:40,467 --> 0:01:43,537
让我们快速浏览一下

24
00:01:46,773 --> 0:01:50,777
当你第一次打开Playground时

25
00:01:51,311 --> 0:01:55,249
这是你在Xcode中使用的

26
00:01:56,216 --> 0:01:59,186
当你使用Playground时

27
00:01:59,253 --> 0:02:01,488
在于右侧的运行结果边栏

28
00:01:59,253 --> 0:02:01,488
在于右侧的运行结果边栏

29
00:02:01,855 --> 0:02:04,391
显示你的代码中

30
00:02:06,126 --> 0:02:09,863
你还可以将这些结果添加为内联结果

31
00:02:10,898 --> 0:02:14,535
这是通过点击结果边栏中的

32
00:02:14,601 --> 0:02:15,769
矩形按钮来实现的

33
00:02:16,870 --> 0:02:20,207
你的结果将会在Swift代码中

34
00:02:22,809 --> 0:02:24,945
在这个例子中 你可以看到

35
00:02:25,012 --> 0:02:26,380
“你好 Playground”

36
00:02:26,647 --> 0:02:29,116
被添加到我们的字符串变量声明下面

37
00:02:31,518 --> 0:02:33,687
我们来看一下辅助编辑器模式

38
00:02:34,855 --> 0:02:37,925
在Xcode的Playground中

39
00:02:37,991 --> 0:02:41,929
你可以使用实时视图

40
00:02:43,697 --> 0:02:46,867
在这个例子中 我使用

41
00:02:46,934 --> 0:02:48,335
来显示欢迎消息

42
00:02:49,203 --> 0:02:53,307
但你也可在iOS和tvOS Playground中

43
00:02:53,707 --> 0:02:57,344
而对于macOS Playground

44
00:03:01,915 --> 0:03:05,652
现在让我向你展示一段简短的代码

45
00:03:06,520 --> 0:03:08,822
首先 你需要导入

46
00:03:10,224 --> 0:03:13,060
PlaygroundSupport

47
00:03:13,126 --> 0:03:15,462
以允许Playground能够

48
00:03:15,863 --> 0:03:17,998
其中就包括了对显示实时视图的支持

49
00:03:18,866 --> 0:03:21,068
你需要导入这个

50
00:03:21,134 --> 0:03:22,536
以便使用其API

51
00:03:23,704 --> 0:03:28,108
一旦你使用标准的UIKit或AppKit API

52
00:03:28,509 --> 0:03:31,111
你需要将其传递给

53
00:03:31,778 --> 0:03:34,081
你可以通过将当前

54
00:03:34,147 --> 0:03:36,884
设置为viewController

55
00:03:37,584 --> 0:03:40,354
这将会告诉Xcode

56
00:03:40,420 --> 0:03:41,855
显示viewController

57
00:03:43,690 --> 0:03:46,059
-为让Playground更好看

58
00:03:46,126 --> 0:03:47,961
你可以包含一些标记文本

59
00:03:48,362 --> 0:03:51,632
当你在创建一个想与他人分享的

60
00:03:52,065 --> 0:03:57,171
通过标记 你能在Playground中

61
00:03:58,038 --> 0:04:01,341
现在让我们快速浏览一下

62
00:03:58,038 --> 0:04:01,341
现在让我们快速浏览一下

63
00:04:03,777 --> 0:04:07,347
这里 我为我写的一首诗

64
00:04:08,148 --> 0:04:10,184
标记注释与常规注释类似

65
00:04:10,250 --> 0:04:12,786
只是在正斜杠后面有一个冒号

66
00:04:13,253 --> 0:04:16,290
注释的其余部分将被视为标记文本

67
00:04:18,257 --> 0:04:21,161
如果你有多行注释彼此相邻

68
00:04:21,228 --> 0:04:23,931
则它们形成一个标记文本块

69
00:04:25,499 --> 0:04:27,835
你也可以使用多行注释

70
00:04:27,901 --> 0:04:30,304
即在第一个星号后面加冒号

71
00:04:32,072 --> 0:04:34,074
这是我们在Xcode中的标记

72
00:04:34,741 --> 0:04:37,244
它显示了我写的诗的原始标记

73
00:04:38,078 --> 0:04:39,847
要以渲染后的形式显示它

74
00:04:40,147 --> 0:04:42,883
选择窗口右上角的按钮

75
00:04:42,950 --> 0:04:44,818
这将打开

76
00:04:45,919 --> 0:04:49,590
在“Playground设置”

77
00:04:50,991 --> 0:04:53,093
现在我的诗已经被渲染好了

78
00:04:55,529 --> 0:04:57,397
使用标记还能实现的

79
00:04:57,464 --> 0:04:59,466
是将标题添入

80
00:05:00,167 --> 0:05:02,903
你可以使用标题创建

81
00:05:03,270 --> 0:05:06,673
你可以使用“#”号

82
00:05:07,875 --> 0:05:11,612
在这个例子中

83
00:05:11,678 --> 0:05:12,913
作为一级标题

84
00:05:13,714 --> 0:05:17,217
副标题“标记颂歌”

85
00:05:17,918 --> 0:05:20,220
而我的署名行则是

86
00:05:21,421 --> 0:05:23,090
请记住在“#”号

87
00:05:23,156 --> 0:05:24,992
和标题字符串之间添加至少一个空格

88
00:05:25,058 --> 0:05:27,561
否则渲染时“#”号

89
00:05:29,530 --> 0:05:31,298
这是诗中的标题

90
00:05:31,365 --> 0:05:32,699
经过渲染后的效果

91
00:05:33,734 --> 0:05:36,236
你可以看到第一级标题最大

92
00:05:36,303 --> 0:05:38,739
其次是第二级

93
00:05:40,741 --> 0:05:43,644
你也可以格式化标记内容中的文本

94
00:05:44,878 --> 0:05:48,448
你可以在字符串两边添加星号

95
00:05:48,515 --> 0:05:50,684
来斜体显示星号之间的文本

96
00:05:51,652 --> 0:05:54,821
你也可以使用反引号来显示代码字体

97
00:05:56,823 --> 0:06:00,827
最后 如果你使用两个星号

98
00:05:56,823 --> 0:06:00,827
最后 如果你使用两个星号

99
00:06:01,795 --> 0:06:03,363
让我们来看看它的渲染效果

100
00:06:05,332 --> 0:06:08,435
你可以看到“红色”和“蓝色”

101
00:06:08,735 --> 0:06:12,005
“标记”以代码字体显示

102
00:06:14,007 --> 0:06:16,410
我们来看看如何在标记中使用列表

103
00:06:17,344 --> 0:06:20,380
如果标记注释以数字开头 后跟句点

104
00:06:20,447 --> 0:06:23,450
则它会在有序列表中创建一个项

105
00:06:24,618 --> 0:06:28,222
在这个例子中

106
00:06:29,389 --> 0:06:32,526
在这里你可以看到我的诗句

107
00:06:32,693 --> 0:06:35,963
其中每行代表有序列表中的一个项

108
00:06:37,464 --> 0:06:39,800
你也可以使用标记创建一个无序列表

109
00:06:40,767 --> 0:06:42,736
无序列表与有序列表类似

110
00:06:42,803 --> 0:06:45,839
除了每行以星号而不是数字开头

111
00:06:47,708 --> 0:06:50,310
这是我的诗在一个

112
00:06:50,377 --> 0:06:51,645
诗中每一行

113
00:06:51,712 --> 0:06:54,848
都代表无序列表中的一个项

114
00:06:57,050 --> 0:06:59,086
标记也可以包含链接

115
00:07:00,120 --> 0:07:03,557
在这个例子中 我分别创建了

116
00:07:04,358 --> 0:07:06,960
为了创建链接

117
00:07:07,027 --> 0:07:09,930
然后将链接的目标

118
00:07:11,598 --> 0:07:15,602
另一种创建链接的方式是使用引用

119
00:07:16,003 --> 0:07:18,572
在这个例子中

120
00:07:18,972 --> 0:07:21,542
但这可以是任何字符串

121
00:07:23,010 --> 0:07:26,880
创建和使用链接引用时

122
00:07:27,181 --> 0:07:30,918
创建引用时 添加一个冒号

123
00:07:32,920 --> 0:07:35,656
这是链接的呈现形式

124
00:07:36,456 --> 0:07:40,994
玫瑰、紫罗兰和乐趣均以蓝色显示

125
00:07:43,130 --> 0:07:46,500
目前为止 我们都在把

126
00:07:47,067 --> 0:07:49,469
但Playground

127
00:07:49,736 --> 0:07:51,772
每个都有自己的标记和代码

128
00:07:52,940 --> 0:07:54,741
要创建一个

129
00:07:54,975 --> 0:07:57,511
选择Playground

130
00:07:57,978 --> 0:07:59,980
选择“新建” 然后选择

131
00:08:01,081 --> 0:08:02,883
你也可以通过如下方法

132
00:08:02,950 --> 0:08:06,920
按住Ctrl键并点击Playground

133
00:08:09,156 --> 0:08:12,759
你可以在标记中创建链接

134
00:08:13,794 --> 0:08:15,362
要转到上一页

135
00:08:15,529 --> 0:08:18,765
你可以创建一个链接

136
00:08:19,666 --> 0:08:20,701
要进入下一页

137
00:08:20,767 --> 0:08:23,570
你可以创建一个

138
00:08:24,538 --> 0:08:27,441
最后 如果你想导航到特定页面

139
00:08:27,508 --> 0:08:30,878
你可以创建一个链接

140
00:08:30,944 --> 0:08:35,249
但需要去掉其扩展名

141
00:08:35,315 --> 0:08:37,017
替换任何空格或特殊字符

142
00:08:39,586 --> 0:08:41,488
你也可以嵌入一些额外的内容

143
00:08:41,554 --> 0:08:43,690
让Playground更加强大

144
00:08:44,758 --> 0:08:47,661
你可将其它Swift文件

145
00:08:47,728 --> 0:08:49,763
该文件夹位于

146
00:08:50,764 --> 0:08:53,534
每个页面也有它自己的源文件夹

147
00:08:54,268 --> 0:08:56,837
源将被编译为独立的模块

148
00:08:56,904 --> 0:08:59,339
在可见的地方它们会被自动导入

149
00:08:59,406 --> 0:09:01,708
所以你不必处理导入语句

150
00:08:59,406 --> 0:09:01,708
所以你不必处理导入语句

151
00:09:02,409 --> 0:09:04,745
由于它们被编译为独立的模块

152
00:09:05,078 --> 0:09:06,747
因此你可以使用访问控制机制

153
00:09:06,813 --> 0:09:10,184
来控制哪些东西可以从辅助源中导出

154
00:09:11,652 --> 0:09:14,388
任何你想用作

155
00:09:14,454 --> 0:09:16,023
都应该标记为“公开”

156
00:09:16,657 --> 0:09:19,693
需要放入源文件夹的一个好例子

157
00:09:19,760 --> 0:09:23,530
是辅助代码

158
00:09:23,797 --> 0:09:25,599
例如不属于

159
00:09:28,702 --> 0:09:31,271
Playground

160
00:09:31,939 --> 0:09:35,542
资源是你希望在Playground中

161
00:09:35,609 --> 0:09:38,979
如图像、音频、视频

162
00:09:40,480 --> 0:09:41,815
就像源一样

163
00:09:42,115 --> 0:09:44,852
每个页面

164
00:09:44,918 --> 0:09:46,420
拥有一个资源文件夹

165
00:09:48,522 --> 0:09:51,425
你可以在你的标记和代码中使用

166
00:09:51,491 --> 0:09:53,327
你添加到Playground的

167
00:09:54,728 --> 0:09:57,297
类似于你在Playground上

168
00:09:57,364 --> 0:10:01,335
你可以使用这里高亮显示的语法

169
00:09:57,364 --> 0:10:01,335
你可以使用这里高亮显示的语法

170
00:10:02,703 --> 0:10:06,473
你需要指定图像名称

171
00:10:07,140 --> 0:10:10,110
你还可以指定描述图像的替代文本

172
00:10:10,177 --> 0:10:14,047
以及悬停标题文本

173
00:10:15,148 --> 0:10:19,353
替代文本和悬停标题文本

174
00:10:19,419 --> 0:10:21,154
从而让语音系统使用者受益

175
00:10:22,723 --> 0:10:25,092
这里我们使用标准的UIImage

176
00:10:25,359 --> 0:10:28,395
访问相同的图像代码

177
00:10:30,264 --> 0:10:34,034
与图片类似

178
00:10:35,068 --> 0:10:38,172
这是通过使用与嵌入图像

179
00:10:38,372 --> 0:10:41,275
但还需要额外指定一张海报图片

180
00:10:41,575 --> 0:10:43,944
以及指定视频的宽度和高度

181
00:10:46,246 --> 0:10:49,349
对于你想要在代码中访问的其它资源

182
00:10:49,416 --> 0:10:50,517
比如这个视频

183
00:10:51,118 --> 0:10:54,721
你可以使用标准的

184
00:10:56,023 --> 0:10:59,660
此示例使用URL函数的

185
00:10:59,927 --> 0:11:03,530
来向mainBundle索取

186
00:10:59,927 --> 0:11:03,530
来向mainBundle索取

187
00:11:05,032 --> 0:11:06,400
在Playground中的资源

188
00:11:06,466 --> 0:11:09,636
会被自动视为

189
00:11:12,039 --> 0:11:15,375
有关你在Playground中

190
00:11:15,442 --> 0:11:18,045
以及我们前面讨论的

191
00:11:18,111 --> 0:11:20,080
请访问developer.apple.com

192
00:11:21,748 --> 0:11:24,785
现在请欢迎我的同伴

193
00:11:25,018 --> 0:11:26,186
他将介绍更多关于

194
00:11:26,253 --> 0:11:28,555
Xcode 10中

195
00:11:29,223 --> 0:11:30,224
谢谢

196
00:11:39,132 --> 0:11:40,133
谢谢Tibet

197
00:11:40,434 --> 0:11:43,504
我是Alex Brown

198
00:11:44,972 --> 0:11:46,373
我想问你们一个问题

199
00:11:47,040 --> 0:11:49,943
你是否曾想到过一个极妙的编程想法

200
00:11:50,544 --> 0:11:53,847
却在你打开代码编辑器之前

201
00:11:54,815 --> 0:11:56,917
也许是你的收件箱阻碍了你

202
00:11:57,384 --> 0:12:00,821
或者你还没有在Xcode中

203
00:11:57,384 --> 0:12:00,821
或者你还没有在Xcode中

204
00:12:02,389 --> 0:12:06,026
无论你是刚开始使用

205
00:12:06,927 --> 0:12:08,996
还是赶着最后期限经验丰富的工程师

206
00:12:09,730 --> 0:12:12,799
或是构建机器学习模型的数据科学家

207
00:12:13,967 --> 0:12:18,205
我都想告诉你 使用

208
00:12:18,405 --> 0:12:21,375
是开始为Apple API

209
00:12:24,411 --> 0:12:25,546
在Xcode 10中

210
00:12:26,480 --> 0:12:29,283
Playground

211
00:12:29,650 --> 0:12:32,786
这允许你以逐步的方式执行代码

212
00:12:34,254 --> 0:12:37,457
为此 首先我想让你们

213
00:12:41,695 --> 0:12:43,430
若你很熟悉Playground

214
00:12:43,830 --> 0:12:47,100
你的视线应该会立即跳到

215
00:12:47,768 --> 0:12:49,102
非行号上面的蓝线处

216
00:12:50,671 --> 0:12:53,507
这里有一个新的Play按钮

217
00:12:55,909 --> 0:13:00,681
行号上方的蓝线表示

218
00:12:55,909 --> 0:13:00,681
行号上方的蓝线表示

219
00:13:01,882 --> 0:13:03,450
当你点击Play按钮时

220
00:13:04,084 --> 0:13:08,255
这意味着运行所有蓝线标记的代码

221
00:13:08,589 --> 0:13:10,123
前面有Play按钮的那行

222
00:13:10,190 --> 0:13:11,725
让我们看看它是什么样子

223
00:13:13,060 --> 0:13:13,927
就像这样

224
00:13:13,994 --> 0:13:17,464
你可以看到只有Playground的

225
00:13:18,098 --> 0:13:20,567
运行结果显示在右侧

226
00:13:21,502 --> 0:13:24,471
你还看到Play按钮现在变灰了

227
00:13:24,538 --> 0:13:28,108
这表明这些代码行不再处于

228
00:13:28,675 --> 0:13:29,877
你刚刚已经执行了它们

229
00:13:31,345 --> 0:13:34,414
Play按钮变为灰色

230
00:13:35,015 --> 0:13:39,253
比如你正在一些

231
00:13:39,786 --> 0:13:43,023
这包括函数括号内的代码

232
00:13:43,090 --> 0:13:44,291
或for循环中的代码

233
00:13:44,858 --> 0:13:46,793
如果你想执行一个for循环

234
00:13:47,127 --> 0:13:50,063
你需要将光标移到右括号处

235
00:13:50,264 --> 0:13:54,468
这时Play按钮将变为蓝色

236
00:13:58,338 --> 0:14:02,643
还有一个很棒的快捷键

237
00:13:58,338 --> 0:14:02,643
还有一个很棒的快捷键

238
00:14:03,410 --> 0:14:06,647
这就像在输入一行代码后

239
00:14:06,713 --> 0:14:09,082
但这还会执行这一行代码

240
00:14:09,249 --> 0:14:12,819
并且它将光标移动到下一行

241
00:14:14,655 --> 0:14:17,691
蓝色代码也有另一种含义

242
00:14:18,192 --> 0:14:22,629
意味着这些代码可安全编辑

243
00:14:23,363 --> 0:14:24,464
为什么这很重要？

244
00:14:25,032 --> 0:14:27,367
如果你编辑蓝线上方的代码

245
00:14:28,569 --> 0:14:31,138
这将会修改你已经执行过的代码

246
00:14:31,471 --> 0:14:35,342
因此你须重置Playground

247
00:14:36,143 --> 0:14:40,747
当你编辑蓝线上方的代码时

248
00:14:44,618 --> 0:14:47,487
有时 你需要手动

249
00:14:47,554 --> 0:14:49,923
你可以使用屏幕底部调试栏中的

250
00:14:50,157 --> 0:14:52,426
Stop按钮来完成此操作

251
00:14:53,694 --> 0:14:57,431
那么为什么要逐步运行？

252
00:14:58,098 --> 0:15:01,034
首先 再多执行一行代码很快

253
00:14:58,098 --> 0:15:01,034
首先 再多执行一行代码很快

254
00:15:01,335 --> 0:15:03,437
这比重新启动Playground

255
00:15:03,504 --> 0:15:05,739
并等待它赶上你的想法要快得多

256
00:15:06,773 --> 0:15:09,910
其次 它允许你对实时数据做出回应

257
00:15:10,444 --> 0:15:14,548
写一行代码 执行它

258
00:15:14,715 --> 0:15:17,784
这会自然引出要写的下一行代码

259
00:15:18,919 --> 0:15:21,855
第三 每次重新运行

260
00:15:22,089 --> 0:15:23,991
都可能会给你不同的值

261
00:15:24,424 --> 0:15:27,828
例如 如果你正在访问网络资源

262
00:15:28,328 --> 0:15:30,097
就会发生这种情况

263
00:15:30,797 --> 0:15:32,499
通过逐步执行

264
00:15:32,566 --> 0:15:35,402
你的数据模型将保持稳定且易于理解

265
00:15:36,470 --> 0:15:40,507
让我们看一个简单的例子

266
00:15:42,910 --> 0:15:43,977
我喜欢游戏

267
00:15:44,044 --> 0:15:46,747
我喜欢纸牌游戏

268
00:15:46,813 --> 0:15:48,782
我甚至喜欢写游戏

269
00:15:49,082 --> 0:15:52,286
现在 我对此不太狂热

270
00:15:52,619 --> 0:15:55,556
这是一个非常小的游戏

271
00:15:55,956 --> 0:15:59,660
这是“剪刀石头布”之类的校园游戏

272
00:16:00,694 --> 0:16:03,297
我将游戏规则写成简单的检查函数

273
00:16:03,497 --> 0:16:04,932
来告诉我们是否赢了

274
00:16:05,599 --> 0:16:07,167
我还写了一个电脑玩家

275
00:16:07,234 --> 0:16:09,536
它只是随机出一个动作

276
00:16:10,838 --> 0:16:14,441
通过逐步执行

277
00:16:14,508 --> 0:16:16,009
也就是轮到电脑玩家出的地方

278
00:16:16,643 --> 0:16:18,912
并在我们出手之前看看结果如何

279
00:16:19,479 --> 0:16:22,015
在这种情况下

280
00:16:22,416 --> 0:16:23,851
我们出“布”

281
00:16:25,085 --> 0:16:27,120
“布”击败“石头”

282
00:16:28,021 --> 0:16:30,123
这听起来有点像作弊

283
00:16:30,357 --> 0:16:32,659
但这却是一种非常强大的技术

284
00:16:35,963 --> 0:16:37,831
这是一个极其强大的技术

285
00:16:38,165 --> 0:16:41,435
当你正试图学习新的陌生的API时

286
00:16:41,835 --> 0:16:45,472
或当你探索一个你还不知道

287
00:16:46,640 --> 0:16:48,175
这是一个非常简单的例子

288
00:16:48,742 --> 0:16:51,845
现在我们来看一个更神奇的演示

289
00:17:04,625 --> 0:17:07,895
我们刚才以一个游戏开始

290
00:17:08,262 --> 0:17:10,329
这是“一字棋”游戏

291
00:17:11,765 --> 0:17:13,634
我已经在这个游戏上做了一些工作

292
00:17:14,535 --> 0:17:18,005
我构建好了游戏引擎

293
00:17:18,405 --> 0:17:21,974
我已将所有代码移到辅助资源中

294
00:17:22,376 --> 0:17:25,913
这让我们摆脱了这部分代码

295
00:17:26,280 --> 0:17:29,349
即真正的去玩这个游戏

296
00:17:30,951 --> 0:17:32,519
我也将使用实时视图

297
00:17:32,586 --> 0:17:37,090
但首先让我们回顾一下

298
00:17:37,691 --> 0:17:39,660
你可以看到它跟踪着鼠标指针

299
00:17:40,494 --> 0:17:44,264
让我们开始加载棋盘

300
00:17:45,232 --> 0:17:46,834
我们旋转一下

301
00:17:48,635 --> 0:17:50,671
这是“一字棋”棋盘

302
00:17:51,104 --> 0:17:54,274
你可以看到我已经执行了

303
00:17:54,708 --> 0:17:57,411
并且Playground中

304
00:17:58,178 --> 0:18:00,247
其中包括该我走的第一步

305
00:17:58,178 --> 0:18:00,247
其中包括该我走的第一步

306
00:18:01,381 --> 0:18:02,249
让我们来运行它

307
00:18:03,383 --> 0:18:04,218
就像这样

308
00:18:04,518 --> 0:18:07,454
你可以看到我们在用代码来玩游戏

309
00:18:08,055 --> 0:18:10,490
并在实时视图中查看结果

310
00:18:11,358 --> 0:18:13,160
我们再让电脑走一步

311
00:18:18,031 --> 0:18:19,099
很少 太棒了

312
00:18:19,166 --> 0:18:21,368
电脑玩家是完全随机的

313
00:18:21,435 --> 0:18:23,971
所以今天它不太可能会打败我

314
00:18:28,542 --> 0:18:31,545
我向你展示了

315
00:18:31,812 --> 0:18:33,080
然后逐步执行

316
00:18:33,547 --> 0:18:36,216
Playground中

317
00:18:36,450 --> 0:18:37,885
但我们可以做得比这更多

318
00:18:37,951 --> 0:18:40,921
在Playground后面

319
00:18:41,088 --> 0:18:42,489
所以让我们再走一步

320
00:18:51,732 --> 0:18:52,633
就像这样

321
00:18:52,699 --> 0:18:54,635
现在 我可以点击Play按钮

322
00:18:56,537 --> 0:18:59,406
来执行这一行代码

323
00:18:59,840 --> 0:19:01,842
我们现在让电脑再走一步

324
00:18:59,840 --> 0:19:01,842
我们现在让电脑再走一步

325
00:19:07,681 --> 0:19:08,549
很好

326
00:19:13,086 --> 0:19:14,988
你应该在这里注意一些事情

327
00:19:15,289 --> 0:19:18,525
第一 棋盘一开始是平的

328
00:19:18,592 --> 0:19:21,562
我需要经过旋转才能看到它

329
00:19:23,497 --> 0:19:25,499
当我们执行更多的代码行时

330
00:19:25,566 --> 0:19:28,101
它不会旋转回原来的位置

331
00:19:28,302 --> 0:19:29,136
这很不错

332
00:19:29,203 --> 0:19:33,140
因为我可以写代码

333
00:19:33,207 --> 0:19:35,275
但这会涉及一些称为四元数的东西

334
00:19:35,342 --> 0:19:37,578
我认为我还没有准备好去学习这东西

335
00:19:39,246 --> 0:19:40,747
这东西很棒的第二个原因

336
00:19:40,814 --> 0:19:44,518
是如果电脑玩家可以在

337
00:19:44,918 --> 0:19:48,822
重新开始 它就可以得到一次新机会

338
00:19:48,889 --> 0:19:50,424
这会有点不公平

339
00:19:51,525 --> 0:19:54,194
让我们完成这个游戏

340
00:20:04,705 --> 0:20:05,772
这是正确的走法吗？

341
00:20:08,942 --> 0:20:09,943
很好

342
00:20:17,317 --> 0:20:19,920
你可以看到游戏通过

343
00:20:19,987 --> 0:20:21,822
突出显示了我的决胜步

344
00:20:23,156 --> 0:20:24,224
这不算太花哨

345
00:20:24,291 --> 0:20:27,094
我正在寻找一些

346
00:20:27,361 --> 0:20:30,364
因此我一直在研究新的用户界面

347
00:20:30,864 --> 0:20:33,166
在传统的开发环境中

348
00:20:33,233 --> 0:20:35,202
你将不得不建立一个复杂的流程

349
00:20:35,269 --> 0:20:37,771
在游戏或任何你使用的API中

350
00:20:38,105 --> 0:20:40,140
自动代表你去执行

351
00:20:40,574 --> 0:20:44,311
以便我们可以测试在程序中

352
00:20:45,212 --> 0:20:48,415
但在Playground上

353
00:20:48,482 --> 0:20:50,417
我可以手动参与游戏直到游戏结束

354
00:20:50,484 --> 0:20:52,252
然后编写新的代码

355
00:20:52,319 --> 0:20:54,821
更新当前正在进行的操作

356
00:20:55,255 --> 0:20:56,523
现在我们来试试

357
00:21:01,228 --> 0:21:03,730
我已经使用粒子系统

358
00:21:03,797 --> 0:21:05,232
为游戏结束准备了新的效果

359
00:21:06,466 --> 0:21:08,535
让我们使用

360
00:21:09,503 --> 0:21:12,806
这感觉更像是一场胜利

361
00:21:17,945 --> 0:21:19,847
让我们回顾一下我们刚刚看到的内容

362
00:21:20,747 --> 0:21:25,452
通过逐步运行

363
00:21:26,286 --> 0:21:30,157
这使我们能够在代码和数据

364
00:21:30,657 --> 0:21:32,793
每次我们得到一些新信息

365
00:21:32,860 --> 0:21:36,730
我们都可以编写下一行代码来探索它

366
00:21:37,698 --> 0:21:38,999
我们可以使用

367
00:21:39,066 --> 0:21:42,302
让我们的手不离开键盘

368
00:21:43,203 --> 0:21:47,174
最后 通过将动态实时视图

369
00:21:47,241 --> 0:21:50,978
我们可以创建模型的第二视图

370
00:21:51,044 --> 0:21:55,249
并且我们可以在使用图形环境操控

371
00:21:56,884 --> 0:21:57,718
所以…

372
00:21:58,285 --> 0:22:02,689
无论你是刚学习

373
00:21:58,285 --> 0:22:02,689
无论你是刚学习

374
00:22:03,891 --> 0:22:06,093
还是试图勾勒出下一个

375
00:22:06,760 --> 0:22:10,130
高级程序员

376
00:22:12,232 --> 0:22:14,735
下一次当你有编码灵感时

377
00:22:15,302 --> 0:22:18,172
我们邀请你

378
00:22:21,575 --> 0:22:24,311
如果你仍在寻找想法

379
00:22:24,711 --> 0:22:26,213
我这里有三个主意

380
00:22:27,080 --> 0:22:27,915
第一

381
00:22:28,448 --> 0:22:30,851
如果你正在创建你自己的API

382
00:22:31,018 --> 0:22:32,853
展示它的最佳方式之一

383
00:22:33,086 --> 0:22:36,156
是为你的API创建一个

384
00:22:36,356 --> 0:22:41,128
用户可以逐步执行代码

385
00:22:43,297 --> 0:22:47,634
第二 你可以下载一些

386
00:22:48,001 --> 0:22:50,037
并使用Playground

387
00:22:50,871 --> 0:22:52,639
逐步深入研究这些数据

388
00:22:53,807 --> 0:22:57,144
你可以从地图、地方政府

389
00:22:57,377 --> 0:22:58,912
获取这些数据

390
00:23:00,514 --> 0:23:04,918
最后 你可以像我一样

391
00:23:05,819 --> 0:23:06,887
从简单的开始

392
00:23:07,855 --> 0:23:10,190
使用SpriteKit

393
00:23:10,257 --> 0:23:13,594
逐行优化 直至趋于完美

394
00:23:16,230 --> 0:23:20,667
我希望今天能够向你们展示

395
00:23:21,134 --> 0:23:23,470
它很有趣 但是一种很有用的有趣

396
00:23:26,807 --> 0:23:30,010
它允许你以交互的方式

397
00:23:30,677 --> 0:23:33,780
这很棒 无论你使用

398
00:23:33,847 --> 0:23:35,716
下载了一段未知的JSON

399
00:23:36,316 --> 0:23:40,087
还是你正在机器学习app中

400
00:23:40,654 --> 0:23:42,222
处理数十万或数百万行的数据

401
00:23:42,589 --> 0:23:44,591
若想了解更多用例

402
00:23:44,658 --> 0:23:47,928
我鼓励你在WWDC app中

403
00:23:48,462 --> 0:23:50,531
下载并观看“创建ML”演讲

404
00:23:51,999 --> 0:23:56,303
其次 学习使用Apple API

405
00:23:56,870 --> 0:24:00,407
无论你刚开始学习

406
00:23:56,870 --> 0:24:00,407
无论你刚开始学习

407
00:24:00,474 --> 0:24:02,809
还是尝试使用在本次WWDC上

408
00:24:04,945 --> 0:24:07,514
你不必非得使用Apple API

409
00:24:07,915 --> 0:24:11,018
你还可以将自己的框架

410
00:24:11,385 --> 0:24:13,387
展示这一点的最佳方式之一

411
00:24:13,921 --> 0:24:16,924
是为你的数据类型创建自定义表述

412
00:24:17,391 --> 0:24:21,562
这允许开发人员只需扫一眼

413
00:24:22,696 --> 0:24:25,265
为了讨论更多关于这两个先进的概念

414
00:24:25,599 --> 0:24:27,734
我想邀请TJ上台

415
00:24:37,110 --> 0:24:38,111
谢谢Alex

416
00:24:38,278 --> 0:24:41,281
我的名字是TJ Usiyan

417
00:24:42,115 --> 0:24:45,652
当我讲完我的部分时

418
00:24:45,853 --> 0:24:48,388
你发布的每个库框架

419
00:24:48,689 --> 0:24:52,159
将会并可以通过增加

420
00:24:53,560 --> 0:25:00,367
Playground能为readme文件

421
00:24:53,560 --> 0:25:00,367
Playground能为readme文件

422
00:25:00,567 --> 0:25:02,870
提供更丰富的体验

423
00:25:04,905 --> 0:25:08,809
实现这一点的方法之一就是

424
00:25:08,876 --> 0:25:11,912
在Playground中

425
00:25:12,479 --> 0:25:14,748
我将涵盖所有这些内容

426
00:25:15,382 --> 0:25:18,252
从Custom Playground

427
00:25:18,752 --> 0:25:19,920
它将允许你

428
00:25:19,987 --> 0:25:25,392
在Playground中

429
00:25:25,692 --> 0:25:27,828
以便用户可以有一个很好的概念

430
00:25:28,962 --> 0:25:34,768
随后我将继续介绍如何将

431
00:25:35,769 --> 0:25:38,572
最后 我将介绍一些疑难解决技巧

432
00:25:38,639 --> 0:25:41,041
以预防事情不像你所期望的那样发生

433
00:25:43,977 --> 0:25:46,513
让我们从Playground Display

434
00:25:47,814 --> 0:25:48,916
如你所知

435
00:25:49,950 --> 0:25:52,853
当用户输入一行代码时

436
00:25:53,720 --> 0:25:57,891
值会显示在右侧的结果边栏

437
00:25:59,726 --> 0:26:02,196
对于没有针对Playground

438
00:25:59,726 --> 0:26:02,196
对于没有针对Playground

439
00:26:02,930 --> 0:26:06,133
Playground

440
00:26:07,167 --> 0:26:11,305
对不符合Custom String

441
00:26:13,040 --> 0:26:16,844
我们将使用Swift类型

442
00:26:17,544 --> 0:26:20,681
对符合Custom String

443
00:26:20,747 --> 0:26:23,851
我们将使用调用描述的结果

444
00:26:26,486 --> 0:26:28,355
当这还不够时

445
00:26:28,422 --> 0:26:33,560
你的用户可以点击右侧的

446
00:26:35,696 --> 0:26:38,899
他们也可以点击

447
00:26:39,233 --> 0:26:42,736
Inline Results按钮

448
00:26:44,037 --> 0:26:45,105
当他们这样做时

449
00:26:46,974 --> 0:26:48,842
会显示一个自定义表述

450
00:26:49,243 --> 0:26:51,545
通常是一个文本表述

451
00:26:52,646 --> 0:26:55,315
对于很多类型来说

452
00:26:55,382 --> 0:26:59,253
但有时候也许你想返回一个数字

453
00:27:01,121 --> 0:27:02,356
尽管这仍然是文本

454
00:27:03,156 --> 0:27:06,627
有时 仅文本还不够

455
00:27:06,693 --> 0:27:10,497
你想返回一些图形 也许是图片

456
00:27:13,033 --> 0:27:15,269
控制你返回格式的方式

457
00:27:16,303 --> 0:27:19,239
是通过实现Custom Playground

458
00:27:20,073 --> 0:27:26,513
这是在Xcode 9.3和Swift 4.1中

459
00:27:27,247 --> 0:27:30,350
它取代了Custom Playground

460
00:27:30,684 --> 0:27:32,753
这在同一版本中已被弃用

461
00:27:34,721 --> 0:27:37,157
现在我们来看看一致性

462
00:27:40,060 --> 0:27:44,998
你可以在这里看到

463
00:27:45,065 --> 0:27:46,033
playgroundDescription

464
00:27:46,533 --> 0:27:48,802
playgroundDescription的类型为Any

465
00:27:49,303 --> 0:27:54,675
这意味着你可以返回任何

466
00:27:56,510 --> 0:28:00,881
现在 某些类型已经有了专门的表述

467
00:27:56,510 --> 0:28:00,881
现在 某些类型已经有了专门的表述

468
00:28:01,348 --> 0:28:02,950
这些表述由Apple提供

469
00:28:04,484 --> 0:28:08,355
这些是自Xcode 9.3

470
00:28:08,422 --> 0:28:11,792
具有专门表述的类型列表

471
00:28:12,626 --> 0:28:16,763
左侧的类型具有特定的文字表述

472
00:28:17,798 --> 0:28:20,634
右侧的类型具有图形表述

473
00:28:21,435 --> 0:28:23,837
我邀请你尝试以上每种方法

474
00:28:23,904 --> 0:28:27,941
并决定哪个最能代表

475
00:28:31,211 --> 0:28:34,181
完成此操作后

476
00:28:34,248 --> 0:28:36,483
以及API给你的用户

477
00:28:38,318 --> 0:28:43,190
我将向你展示如何向Playground

478
00:28:43,457 --> 0:28:46,026
并与Apple框架共存

479
00:28:48,462 --> 0:28:52,833
通常 当你在项目中构建单个框架时

480
00:28:53,734 --> 0:28:56,670
该框架将保存在

481
00:28:58,505 --> 0:29:00,874
当你想将它导入

482
00:28:58,505 --> 0:29:00,874
当你想将它导入

483
00:29:01,675 --> 0:29:03,610
这也是Playground

484
00:29:04,244 --> 0:29:05,379
确保你的Playground

485
00:29:05,445 --> 0:29:07,014
最简单的方法

486
00:29:07,748 --> 0:29:10,350
是将Playground

487
00:29:11,852 --> 0:29:14,721
这是我为简单项目建议的策略

488
00:29:15,055 --> 0:29:17,958
这种情况下你能够

489
00:29:18,725 --> 0:29:21,395
这就是在Project Navigator中的样子

490
00:29:25,098 --> 0:29:26,967
一旦你添加了这个项目

491
00:29:27,134 --> 0:29:29,603
或在你将该Playground

492
00:29:30,003 --> 0:29:30,971
我有一点建议

493
00:29:31,038 --> 0:29:31,905
记住：

494
00:29:32,840 --> 0:29:34,608
构建非常像走路

495
00:29:35,342 --> 0:29:39,046
因为你必须记住

496
00:29:39,112 --> 0:29:41,381
记住在运行之前进行构建

497
00:29:42,449 --> 0:29:46,753
有时你有多个项目

498
00:29:47,054 --> 0:29:48,288
多个框架

499
00:29:48,555 --> 0:29:51,325
也许你有两个、三个、四个

500
00:29:53,026 --> 0:29:54,027
在这种情况下

501
00:29:54,294 --> 0:29:57,297
我刚刚描述的Built Products

502
00:29:57,364 --> 0:29:58,565
实际上是翻倍的

503
00:29:58,632 --> 0:30:02,302
如果你有不同的项目 就会有多个

504
00:29:58,632 --> 0:30:02,302
如果你有不同的项目 就会有多个

505
00:30:02,369 --> 0:30:06,573
当你想要将代码导入Playground时

506
00:30:07,107 --> 0:30:11,912
解决此问题的最简单方法

507
00:30:12,446 --> 0:30:13,647
单个工作区

508
00:30:14,014 --> 0:30:16,617
然后当你构建每个项目时

509
00:30:17,818 --> 0:30:19,620
这些框架将最终保存在

510
00:30:20,153 --> 0:30:24,057
你的工作区中的那个

511
00:30:24,358 --> 0:30:28,328
之后只需将Playground

512
00:30:28,529 --> 0:30:29,963
这样就应该没问题了

513
00:30:31,665 --> 0:30:35,102
这就是刚才说的内容

514
00:30:36,904 --> 0:30:39,640
现在 假设你已经做了这些事情

515
00:30:39,706 --> 0:30:43,610
你遵循了我的指示

516
00:30:43,844 --> 0:30:45,746
你会说“TJ对我撒谎”

517
00:30:48,582 --> 0:30:50,984
你需要检查

518
00:30:51,051 --> 0:30:54,254
以确保一切都按照

519
00:30:56,290 --> 0:30:57,624
以下是你如何做到这一点

520
00:30:59,092 --> 0:31:00,460
你要打开File

521
00:30:59,092 --> 0:31:00,460
你要打开File

522
00:31:01,361 --> 0:31:02,396
Project Settings

523
00:31:05,265 --> 0:31:07,568
然后点击Advanced按钮

524
00:31:09,803 --> 0:31:11,939
在浅灰色的屏幕上

525
00:31:12,005 --> 0:31:16,977
我们会看到

526
00:31:17,477 --> 0:31:18,545
你需要点击它

527
00:31:18,745 --> 0:31:22,049
这会直接将你带到你所打开项目的

528
00:31:22,115 --> 0:31:23,951
Built Products

529
00:31:26,987 --> 0:31:29,256
这是在Finder中看起来的样子

530
00:31:30,724 --> 0:31:33,827
现在让我们将所有这些

531
00:31:43,237 --> 0:31:45,572
那些认识我的人

532
00:31:46,406 --> 0:31:50,244
知道我对音乐有着持久的兴趣

533
00:31:51,612 --> 0:31:56,550
我其实对音乐非常感兴趣

534
00:31:56,884 --> 0:31:59,720
至少对我来说很新

535
00:31:59,786 --> 0:32:02,990
我觉得更多人应该知道这一点

536
00:31:59,786 --> 0:32:02,990
我觉得更多人应该知道这一点

537
00:32:03,056 --> 0:32:04,525
而且它应该被更广泛地使用

538
00:32:05,459 --> 0:32:08,262
所以我创建了一个框架

539
00:32:08,328 --> 0:32:09,796
以便他们可以在代码中使用它

540
00:32:10,464 --> 0:32:12,799
在这里你可以看到

541
00:32:13,066 --> 0:32:19,306
我也在维基百科上做了一些研究

542
00:32:20,374 --> 0:32:23,944
并写了一个描述该乐符的

543
00:32:24,244 --> 0:32:27,447
随后是几个值

544
00:32:27,514 --> 0:32:32,486
以便我们可以在右侧看到结果

545
00:32:35,289 --> 0:32:36,957
如果我渲染这个文档

546
00:32:38,258 --> 0:32:41,361
这些将会在Pros中显示出来

547
00:32:41,428 --> 0:32:44,765
其中链接以蓝色突显

548
00:32:48,302 --> 0:32:49,469
在我运行之前

549
00:32:50,237 --> 0:32:51,905
我需要进行构建

550
00:32:55,809 --> 0:33:00,280
接着让我们运行

551
00:32:55,809 --> 0:33:00,280
接着让我们运行

552
00:33:01,648 --> 0:33:02,482
现在…

553
00:33:05,752 --> 0:33:08,322
你可以在这里看到右侧的结果中

554
00:33:08,388 --> 0:33:09,990
显示了这些有趣的乐符

555
00:33:10,424 --> 0:33:13,994
我真的认为这个乐符很有趣

556
00:33:14,061 --> 0:33:17,731
因为较低音用大写字母表示

557
00:33:18,098 --> 0:33:20,767
较高音用小写字母表示

558
00:33:21,201 --> 0:33:25,172
而确切的八度

559
00:33:25,639 --> 0:33:26,840
由逗号或撇号的数量表示

560
00:33:28,041 --> 0:33:28,876
现在…

561
00:33:29,676 --> 0:33:32,045
希望你们都能看到这个乐符

562
00:33:32,346 --> 0:33:34,181
也希望我足够清晰地解释了它们

563
00:33:34,248 --> 0:33:37,918
但其实我在我正辅导的人那里

564
00:33:39,052 --> 0:33:41,021
他们不像我一样喜欢这种方式

565
00:33:41,355 --> 0:33:44,124
所以我创建了另一个

566
00:33:44,458 --> 0:33:48,328
带有键盘可视化功能的框架

567
00:33:48,729 --> 0:33:50,063
很有帮助

568
00:33:51,164 --> 0:33:52,599
既然我想这样做

569
00:33:52,833 --> 0:33:55,035
我需要在工作区中创建一个

570
00:33:55,102 --> 0:33:57,938
在这个工作区中

571
00:33:58,005 --> 0:34:00,040
而无需更改任何框架

572
00:33:58,005 --> 0:34:00,040
而无需更改任何框架

573
00:34:01,108 --> 0:34:02,009
为了做到这一点

574
00:34:02,809 --> 0:34:04,711
我先关闭这个

575
00:34:07,314 --> 0:34:09,583
然后创建一个全新的

576
00:34:12,386 --> 0:34:13,286
工作区

577
00:34:13,687 --> 0:34:14,855
打开File

578
00:34:16,989 --> 0:34:18,492
选择New Work Space

579
00:34:21,228 --> 0:34:22,829
我将其命名为“Tutoring”

580
00:34:24,598 --> 0:34:26,033
并将它放在桌面上

581
00:34:31,038 --> 0:34:36,310
然后 我将通过选择File &gt;

582
00:34:38,712 --> 0:34:40,581
先添加赫尔姆霍茨

583
00:34:41,215 --> 0:34:42,716
这是我刚打开的框架

584
00:34:44,251 --> 0:34:45,185
然后点File…

585
00:34:46,820 --> 0:34:48,522
就在这里 Keyboard

586
00:34:52,759 --> 0:34:58,165
然后我通过File &gt; New &gt;

587
00:35:02,970 --> 0:35:04,371
一个空白的

588
00:35:05,672 --> 0:35:07,608
“My Playground”

589
00:35:08,041 --> 0:35:09,042
跟任何名字一样

590
00:35:11,512 --> 0:35:13,180
我需要首先导入

591
00:35:14,414 --> 0:35:15,549
赫尔姆霍茨

592
00:35:16,817 --> 0:35:17,951
然后导入我的Keyboard

593
00:35:22,289 --> 0:35:23,123
好的

594
00:35:24,024 --> 0:35:27,528
之后 我将快速做一些测试

595
00:35:27,928 --> 0:35:32,032
以确保音符按照我的预期显示

596
00:35:33,333 --> 0:35:36,170
我将构建我的每个框架

597
00:35:37,104 --> 0:35:40,040
我要确保从方案中选中每一个

598
00:35:40,107 --> 0:35:42,476
稍后 我可能会制定另一个方案

599
00:35:42,543 --> 0:35:45,012
一次性构建这两个项目

600
00:35:45,078 --> 0:35:47,114
但我现在所剩时间不多了

601
00:35:48,882 --> 0:35:52,452
接着我在其中

602
00:35:52,519 --> 0:35:53,887
一切都按预期运作

603
00:35:54,254 --> 0:35:55,122
但是

604
00:35:56,089 --> 0:35:57,824
这个可视化功能有时并不起作用

605
00:35:57,891 --> 0:36:00,160
我有一些只见过钢琴的年轻学生

606
00:35:57,891 --> 0:36:00,160
我有一些只见过钢琴的年轻学生

607
00:36:00,594 --> 0:36:02,362
这里有一小段代码

608
00:36:05,132 --> 0:36:06,600
可以在playgroundDescription中

609
00:36:07,501 --> 0:36:09,870
快速创建一个视图

610
00:36:10,270 --> 0:36:11,805
配置它

611
00:36:12,172 --> 0:36:14,775
我还需要写一行代码

612
00:36:16,143 --> 0:36:19,446
“customText=description”

613
00:36:20,981 --> 0:36:24,051
在配置完我的视图后 我需要返回它

614
00:36:24,251 --> 0:36:25,252
就这么简单

615
00:36:25,819 --> 0:36:26,987
这变得更加简单

616
00:36:27,054 --> 0:36:29,523
因为我手上碰巧有一个框架

617
00:36:29,890 --> 0:36:35,128
现在我想再次运行第4行

618
00:36:35,362 --> 0:36:40,234
我要通过点击这里的Stop按钮

619
00:36:44,571 --> 0:36:47,074
接着在我添加内联结果后

620
00:36:49,009 --> 0:36:50,544
重新运行整个Playground

621
00:36:54,114 --> 0:36:55,349
你可以在这里看到…

622
00:37:02,723 --> 0:37:05,926
你可以在这里看到

623
00:37:06,159 --> 0:37:11,632
这样我的学生就可以识别出

624
00:37:15,636 --> 0:37:16,470
现在

625
00:37:16,904 --> 0:37:21,408
让我们来回顾一下今天所学的知识

626
00:37:25,412 --> 0:37:28,448
Tibet介绍了

627
00:37:28,949 --> 0:37:32,386
布局以及

628
00:37:33,253 --> 0:37:37,457
Alex解释了Playground中

629
00:37:37,958 --> 0:37:40,360
我介绍了Custom Playground

630
00:37:40,861 --> 0:37:42,696
以及如何导入你自己的代码

631
00:37:43,931 --> 0:37:44,898
所以希望…

632
00:37:45,365 --> 0:37:48,268
既然演讲已接近尾声

633
00:37:48,735 --> 0:37:52,406
我们已介绍了Playground

634
00:37:53,874 --> 0:37:56,743
我们希望看到每个项目

635
00:37:57,744 --> 0:37:59,479
明年都有一个Playground

636
00:38:03,150 --> 0:38:04,618
如果你有任何问题

637
00:38:04,685 --> 0:38:06,987
请随时造访我们的实验室

638
00:38:07,321 --> 0:38:08,422
我们明年再见
