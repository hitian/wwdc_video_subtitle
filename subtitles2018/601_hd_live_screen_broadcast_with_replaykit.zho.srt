1
00:00:17,985 --> 0:00:21,421
（REPLAYKIT直播功能）

2
00:00:26,693 --> 0:00:32,165
早上好 欢迎来到

3
00:00:32,900 --> 0:00:35,969
我是Alexander

4
00:00:36,036 --> 0:00:39,273
为大家讲述ReplayKit概念

5
00:00:39,339 --> 0:00:40,974
及今年ReplayKit新增特性

6
00:00:42,543 --> 0:00:44,912
内容很多 现在开始吧

7
00:00:47,381 --> 0:00:52,419
ReplayKit框架可实时抓取

8
00:00:52,486 --> 0:00:56,590
以及声音内容 也可以录制视频

9
00:00:56,890 --> 0:00:59,893
方便用户编辑或分享

10
00:01:01,562 --> 0:01:04,230
ReplayKit也支持直播

11
00:01:05,732 --> 0:01:08,669
对于生成内容的app 比如游戏

12
00:01:09,536 --> 0:01:13,407
ReplayKit可以提供工具

13
00:01:13,607 --> 0:01:17,110
和可视化内容

14
00:01:18,745 --> 0:01:20,414
对于播放app

15
00:01:20,480 --> 0:01:23,917
ReplayKit可以接收

16
00:01:23,984 --> 0:01:27,187
或整个iOS系统中抓取的内容

17
00:01:27,788 --> 0:01:32,793
然后编码并流传输至服务器

18
00:01:36,563 --> 0:01:41,001
ReplayKit传输的内容

19
00:01:41,368 --> 0:01:44,137
性能开销低 更好用

20
00:01:44,838 --> 0:01:49,643
同时它可以保护用户隐私

21
00:01:49,710 --> 0:01:52,679
才能录制或开启直播

22
00:01:52,746 --> 0:01:57,351
并且显著标明截取内容的时间点

23
00:02:02,222 --> 0:02:04,224
今天我的演讲主题是

24
00:02:05,025 --> 0:02:06,994
ReplayKit的直播功能

25
00:02:07,561 --> 0:02:11,398
简单概述之后 我会讲app内播放

26
00:02:11,598 --> 0:02:15,836
和iOS系统播放

27
00:02:15,903 --> 0:02:19,206
一个新的API

28
00:02:20,774 --> 0:02:23,911
这个API可以直接

29
00:02:24,111 --> 0:02:26,079
从直播app中开启播放

30
00:02:28,615 --> 0:02:30,117
随后我们将讨论

31
00:02:30,184 --> 0:02:33,554
如何实现播放扩展

32
00:02:33,720 --> 0:02:36,890
以及这个新的API

33
00:02:39,293 --> 0:02:40,394
我们还会讲述

34
00:02:40,460 --> 0:02:45,065
如何保护app的内容不被截取

35
00:02:48,602 --> 0:02:51,138
首先简述下直播的概念

36
00:02:54,208 --> 0:02:58,445
我说过ReplayKit

37
00:02:58,512 --> 0:03:02,115
视频和音频内容

38
00:02:58,512 --> 0:03:02,115
视频和音频内容

39
00:03:03,150 --> 0:03:08,922
可直接从iOS或tvOS设备操作

40
00:03:10,023 --> 0:03:14,361
麦克风或相机

41
00:03:15,128 --> 0:03:17,731
所有内容都绝对安全

42
00:03:17,831 --> 0:03:20,200
只能在你所使用的服务器上获取

43
00:03:23,570 --> 0:03:26,406
无论是录制游戏视频到

44
00:03:26,907 --> 0:03:29,076
在WebEx视频通话中分享屏幕

45
00:03:29,843 --> 0:03:32,279
用TeamViewer

46
00:03:32,813 --> 0:03:35,682
还是在Facebook上

47
00:03:36,450 --> 0:03:38,919
都需要使用ReplayKit技术

48
00:03:40,153 --> 0:03:42,055
（REPLAYKIT对比

49
00:03:42,122 --> 0:03:44,725
以前ReplayKit的直播

50
00:03:45,125 --> 0:03:47,794
是在app中操作 用户通过app

51
00:03:48,061 --> 0:03:49,563
开始或停止直播

52
00:03:50,831 --> 0:03:54,301
app直接对话

53
00:03:54,768 --> 0:03:58,705
ReplayKit本身包含

54
00:03:59,139 --> 0:04:03,043
可提供来自app的影像或音频内容

55
00:03:59,139 --> 0:04:03,043
可提供来自app的影像或音频内容

56
00:04:04,077 --> 0:04:07,514
扩展会将媒体编码

57
00:04:08,015 --> 0:04:10,751
这就是app内播放

58
00:04:13,921 --> 0:04:17,423
ReplayKit 2的新功能是

59
00:04:17,925 --> 0:04:21,595
将系统作为一个整体实现直播

60
00:04:22,763 --> 0:04:26,266
工作原理是用户启动直播

61
00:04:26,767 --> 0:04:28,202
并在控制中心里

62
00:04:28,735 --> 0:04:31,205
开始或停止播放

63
00:04:33,273 --> 0:04:37,544
这会开启系统级

64
00:04:38,345 --> 0:04:40,247
音频视频样本同样是

65
00:04:40,314 --> 0:04:42,583
通过扩展上传至服务器

66
00:04:43,383 --> 0:04:46,119
这就是两者在概念上的区分

67
00:04:48,255 --> 0:04:52,025
那么我们先从app内播放讲起

68
00:04:53,360 --> 0:04:55,696
app内播放中 你的app

69
00:04:55,762 --> 0:04:57,931
或游戏会提供

70
00:04:58,699 --> 0:05:00,801
玩游戏时直接录制的内容

71
00:04:58,699 --> 0:05:00,801
玩游戏时直接录制的内容

72
00:05:03,604 --> 0:05:08,609
游戏通过调用ReplayKit

73
00:05:10,043 --> 0:05:13,580
同样它可以作为播放视图控制器

74
00:05:13,647 --> 0:05:16,550
让用户自主选择平台

75
00:05:18,318 --> 0:05:19,419
与此同时

76
00:05:21,021 --> 0:05:25,025
播放app提供的播放扩展

77
00:05:25,859 --> 0:05:29,196
让ReplayKit代表游戏完成

78
00:05:29,763 --> 0:05:31,765
用户注册

79
00:05:31,999 --> 0:05:36,570
上传直播内容至服务器

80
00:05:37,504 --> 0:05:40,574
这是我们原先使用

81
00:05:41,508 --> 0:05:43,377
这个我们之前讲过

82
00:05:43,443 --> 0:05:46,513
如果你的app需要精细地控制

83
00:05:46,580 --> 0:05:50,050
直播的开始和结束

84
00:05:50,117 --> 0:05:53,820
可以观看

85
00:05:55,789 --> 0:05:56,957
是几年前的视频

86
00:05:59,059 --> 0:06:00,994
但是今天我们要讲的

87
00:05:59,059 --> 0:06:00,994
但是今天我们要讲的

88
00:06:01,061 --> 0:06:03,697
是iOS系统播放

89
00:06:04,431 --> 0:06:07,835
如果要播放所有屏幕上的活动

90
00:06:08,302 --> 0:06:09,736
和所有音频

91
00:06:10,470 --> 0:06:12,873
我们不再从app中开启播放

92
00:06:12,940 --> 0:06:17,010
通过暂停app开始或停止播放

93
00:06:19,046 --> 0:06:22,950
例如 本场演讲是在控制中心内

94
00:06:23,016 --> 0:06:25,886
这是系统级活动且持续运行

95
00:06:26,320 --> 0:06:28,555
不会因为用户从主屏幕切换到app

96
00:06:29,156 --> 0:06:31,058
或在不同app之间切换而终止

97
00:06:32,359 --> 0:06:35,495
所有这些都在iOS 11

98
00:06:35,896 --> 0:06:38,832
这就是我们去年

99
00:06:41,168 --> 0:06:43,136
这是个游戏 假设你正在玩

100
00:06:43,804 --> 0:06:47,574
你想开始录制并播放

101
00:06:49,343 --> 0:06:51,111
那么下拉控制中心

102
00:06:51,178 --> 0:06:54,214
点击这个录屏按键

103
00:06:55,282 --> 0:07:00,220
就看到选择器

104
00:06:55,282 --> 0:07:00,220
就看到选择器

105
00:07:00,521 --> 0:07:04,791
也可以选择一个播放平台

106
00:07:05,025 --> 0:07:06,693
将内容传输至该平台

107
00:07:08,729 --> 0:07:10,964
完成后 回到游戏

108
00:07:12,099 --> 0:07:13,967
现在游戏跟平台就连在一起了

109
00:07:14,568 --> 0:07:18,672
播放扩展接收录屏文件样本

110
00:07:18,739 --> 0:07:21,108
将视频流上传至后台

111
00:07:21,608 --> 0:07:24,478
通过网页浏览器中的播放器

112
00:07:24,545 --> 0:07:27,681
或其他流媒体渠道

113
00:07:29,249 --> 0:07:32,519
就可以随时随地

114
00:07:36,290 --> 0:07:39,893
这就是如何开启iOS系统播放

115
00:07:40,294 --> 0:07:43,797
那么这种播放的有趣之处

116
00:07:43,864 --> 0:07:46,667
就在于我说过的不间断播放

117
00:07:47,034 --> 0:07:49,469
不受app切换干扰

118
00:07:50,103 --> 0:07:53,073
我这是在主屏幕上进行播放

119
00:07:53,140 --> 0:07:55,976
那么我主屏幕上的活动都被播放出来

120
00:07:57,611 --> 0:08:02,883
如果这时打开另一个app

121
00:07:57,611 --> 0:08:02,883
如果这时打开另一个app

122
00:08:03,617 --> 0:08:05,719
这才是核心所在

123
00:08:05,786 --> 0:08:08,555
这种播放本身就是系统级活动

124
00:08:08,822 --> 0:08:11,491
你可以回到控制中心停止播放

125
00:08:11,725 --> 0:08:14,895
或者点击上方的状态栏

126
00:08:14,962 --> 0:08:17,397
打开控制中心停止播放

127
00:08:19,466 --> 0:08:23,170
另外如果我切换横屏

128
00:08:23,570 --> 0:08:25,939
它也可以支持

129
00:08:27,941 --> 0:08:31,378
横屏竖屏 可以随意切换

130
00:08:31,545 --> 0:08:33,113
就像app间切换一样

131
00:08:38,217 --> 0:08:42,089
iOS系统播放是我们去年发布的

132
00:08:42,556 --> 0:08:46,493
之后收到了许多很好的反馈和改进

133
00:08:47,194 --> 0:08:50,898
现在我们的直播API

134
00:08:50,964 --> 0:08:55,636
比如通讯、媒体和房屋

135
00:08:56,103 --> 0:08:58,872
资讯台、教育以及社交

136
00:09:01,441 --> 0:09:03,644
同时我们也收到许多反馈

137
00:09:04,044 --> 0:09:09,283
比如在控制中心找不到播放界面

138
00:09:10,651 --> 0:09:14,855
为了方便用户直接在app中编辑

139
00:09:15,956 --> 0:09:18,659
今年我们的目标是帮助你

140
00:09:18,725 --> 0:09:21,395
将iOS系统播放融入app

141
00:09:22,029 --> 0:09:25,232
因此就要隆重介绍系统播放选择器

142
00:09:28,836 --> 0:09:30,571
回到刚才的图

143
00:09:33,006 --> 0:09:34,274
我们要添加的

144
00:09:35,209 --> 0:09:39,580
是将这两种线性流程结合在一起

145
00:09:42,482 --> 0:09:46,687
这种结合让app也能够

146
00:09:46,920 --> 0:09:49,590
启动iOS系统播放

147
00:09:50,657 --> 0:09:54,394
因此app可以跟控制中心一样

148
00:09:55,562 --> 0:09:59,066
开始并持续播放

149
00:09:59,132 --> 0:10:01,001
不会因切换app

150
00:09:59,132 --> 0:10:01,001
不会因切换app

151
00:10:02,002 --> 0:10:04,338
或退回主屏幕而停止

152
00:10:05,205 --> 0:10:08,108
从app中开始的直播

153
00:10:08,775 --> 0:10:13,947
可以在控制中心停止 反之亦然

154
00:10:14,014 --> 0:10:17,050
从控制中心的直播 回到app后

155
00:10:17,317 --> 0:10:18,685
可以一键停止

156
00:10:22,322 --> 0:10:26,460
因此系统播放选择器使得用户能够

157
00:10:27,127 --> 0:10:31,198
直接在app中启动iOS系统播放

158
00:10:31,565 --> 0:10:35,235
在我们提供的界面上一键完成

159
00:10:35,736 --> 0:10:39,006
这是将在iOS 12实现的新功能

160
00:10:41,542 --> 0:10:43,243
下面来举个例子

161
00:10:44,511 --> 0:10:49,650
这是样本app Fox 2

162
00:10:51,852 --> 0:10:54,221
当我点击这个播放选择器按键

163
00:10:54,788 --> 0:10:57,524
你看到的界面与之前

164
00:10:57,591 --> 0:11:01,128
在控制中心看到的一样

165
00:10:57,591 --> 0:11:01,128
在控制中心看到的一样

166
00:11:02,629 --> 0:11:06,733
然后选择播放平台开始直播

167
00:11:08,502 --> 0:11:09,770
现在回到app

168
00:11:09,837 --> 0:11:12,105
直播就已经在那个平台开始了

169
00:11:13,073 --> 0:11:17,578
全世界人民都可以观看我的直播

170
00:11:20,681 --> 0:11:22,316
怎么做到的？

171
00:11:23,717 --> 0:11:28,622
这是个新类名

172
00:11:29,056 --> 0:11:34,428
它只是用户界面的子类

173
00:11:34,494 --> 0:11:39,466
在界面构建器设为一个类名

174
00:11:40,868 --> 0:11:42,569
或通过编程实现

175
00:11:43,103 --> 0:11:48,542
你只需要创建一个实例

176
00:11:48,809 --> 0:11:50,777
添加到界面层级

177
00:11:53,514 --> 0:11:58,051
这是播放选择器最简单的使用方法

178
00:11:59,720 --> 0:12:04,858
我知道在座各位都是直播平台开发者

179
00:11:59,720 --> 0:12:04,858
我知道在座各位都是直播平台开发者

180
00:12:05,893 --> 0:12:07,561
最后通过这个新的API

181
00:12:08,095 --> 0:12:12,332
用户可以直接从app中开始直播

182
00:12:12,599 --> 0:12:15,369
再也不需要提供全套的教程

183
00:12:15,435 --> 0:12:17,771
比如如何启用录屏、如何设置

184
00:12:18,005 --> 0:12:20,807
如何找到自己的

185
00:12:21,842 --> 0:12:26,013
但是你可能会希望选择器只显示

186
00:12:26,346 --> 0:12:29,449
你平台的播放扩展

187
00:12:31,084 --> 0:12:36,690
ReplayKit提供的API

188
00:12:38,091 --> 0:12:41,395
它只是界面的一个属性

189
00:12:41,762 --> 0:12:45,999
你要做的只是通过程序包标识

190
00:12:46,066 --> 0:12:48,435
标记播放扩展

191
00:12:48,902 --> 0:12:53,273
然后分配给

192
00:12:56,276 --> 0:12:59,213
这是代码样本

193
00:13:00,747 --> 0:13:03,283
属性设置

194
00:13:03,350 --> 0:13:04,818
应当在界面修正之后

195
00:13:04,885 --> 0:13:07,821
与代码样本唯一的区别是

196
00:13:07,888 --> 0:13:10,591
你需要替换字符串

197
00:13:10,657 --> 0:13:13,260
com.your-app.

198
00:13:13,627 --> 0:13:15,362
这是扩展的捆绑ID

199
00:13:17,965 --> 0:13:21,535
这张图表中 我想要强调

200
00:13:23,237 --> 0:13:25,839
在app中创建的选择器界面

201
00:13:26,440 --> 0:13:29,576
这个界面只是快捷键

202
00:13:29,776 --> 0:13:31,778
选择器的系统界面

203
00:13:32,145 --> 0:13:35,415
控制中心也可打开

204
00:13:36,750 --> 0:13:39,953
选择器本身属于系统

205
00:13:40,020 --> 0:13:45,192
app不占有直播的任何部分

206
00:13:45,259 --> 0:13:50,631
因此也不可通过编程

207
00:13:53,333 --> 0:13:54,635
（开发REPLAYKIT 2

208
00:13:54,701 --> 0:13:58,839
那么你要做的是

209
00:13:59,406 --> 0:14:02,142
新的API十分简单

210
00:13:59,406 --> 0:14:02,142
新的API十分简单

211
00:14:02,509 --> 0:14:06,113
在此次演讲结束之前

212
00:14:08,081 --> 0:14:10,450
接下来 我们将过程演示一遍

213
00:14:10,884 --> 0:14:12,686
给播放扩展开发者看

214
00:14:13,387 --> 0:14:17,191
然后讨论如何使用播放扩展

215
00:14:17,491 --> 0:14:22,229
以及当app同时提供扩展

216
00:14:22,496 --> 0:14:23,664
有哪些用处

217
00:14:25,899 --> 0:14:27,467
再回到刚才那张图

218
00:14:27,534 --> 0:14:30,604
我们现在来看播放扩展页面

219
00:14:30,871 --> 0:14:34,308
我想向你们展示系统播放的路径

220
00:14:36,777 --> 0:14:39,680
（播放APP和扩展）

221
00:14:39,746 --> 0:14:42,950
首先 先讲播放app

222
00:14:43,483 --> 0:14:47,487
然后是播放扩展以及在直播中

223
00:14:48,322 --> 0:14:50,791
它们各自的工作

224
00:14:53,227 --> 0:14:55,429
先安装播放扩展

225
00:14:55,729 --> 0:14:58,165
与包含扩展的app一起安装

226
00:14:58,665 --> 0:14:59,933
比如你安装了

227
00:15:00,133 --> 0:15:02,903
你也要安装

228
00:15:04,204 --> 0:15:09,376
播放扩展和app

229
00:15:09,877 --> 0:15:13,013
是独立的二进制文件

230
00:15:13,747 --> 0:15:18,886
这些程序由用户直接调用

231
00:15:19,119 --> 0:15:20,888
彼此独立

232
00:15:21,955 --> 0:15:25,759
通常你们需要使用app

233
00:15:25,826 --> 0:15:27,528
或注册你们的服务

234
00:15:28,595 --> 0:15:33,734
现在app安装了播放选择器API

235
00:15:34,134 --> 0:15:38,005
你就可以让用户先输入一些信息

236
00:15:38,071 --> 0:15:41,108
再将直播发到Facebook

237
00:15:44,745 --> 0:15:46,079
播放扩展

238
00:15:47,247 --> 0:15:50,551
以上就是所有实际的工作

239
00:15:50,717 --> 0:15:53,353
所有程序都已具备

240
00:15:55,656 --> 0:16:00,527
扩展会接收

241
00:15:55,656 --> 0:16:00,527
扩展会接收

242
00:16:01,028 --> 0:16:04,898
app原生音频

243
00:16:05,132 --> 0:16:08,602
录屏视频或麦克风录音

244
00:16:08,669 --> 0:16:12,005
然后编码并上传至平台

245
00:16:12,072 --> 0:16:14,074
可根据喜好使用任何技术

246
00:16:14,141 --> 0:16:15,742
（播放上传扩展）

247
00:16:15,809 --> 0:16:17,244
（播放扩展模板）

248
00:16:17,311 --> 0:16:20,814
为了方便你开发新的播放平台

249
00:16:21,148 --> 0:16:23,483
我们提供Xcode模板

250
00:16:24,785 --> 0:16:28,388
只要将扩展添加至使用该模板的项目

251
00:16:28,455 --> 0:16:30,090
就一切就绪了

252
00:16:30,991 --> 0:16:33,193
现在看看如何编码吧

253
00:16:35,562 --> 0:16:39,633
在使用Xcode模板

254
00:16:39,933 --> 0:16:41,869
你会看到一个

255
00:16:43,737 --> 0:16:46,673
在这里添加代码用来控制

256
00:16:46,840 --> 0:16:48,809
播放中的各种活动

257
00:16:49,977 --> 0:16:51,378
同样你需要安装

258
00:16:51,445 --> 0:16:54,448
这个功能以处理导入的音视频样本

259
00:16:55,682 --> 0:16:58,085
（播放周期）

260
00:16:58,151 --> 0:17:01,488
这就是播放周期图示

261
00:16:58,151 --> 0:17:01,488
这就是播放周期图示

262
00:17:03,357 --> 0:17:07,694
各个状态为设置、启动、开始

263
00:17:08,795 --> 0:17:10,163
处理和停止

264
00:17:11,732 --> 0:17:12,933
（登录和播放设置）

265
00:17:13,000 --> 0:17:16,737
左边的绿色方块代表的状态是

266
00:17:17,503 --> 0:17:20,073
你的播放扩展还未运行

267
00:17:20,674 --> 0:17:23,544
此时你的app可以

268
00:17:23,609 --> 0:17:26,180
获取用户的登录信息

269
00:17:26,346 --> 0:17:31,084
然后使用共享的密钥串

270
00:17:31,818 --> 0:17:35,122
或者你还是可以让用户输入

271
00:17:35,189 --> 0:17:36,857
Facebook上的信息

272
00:17:38,792 --> 0:17:41,828
然后传至扩展 无论以何种方法

273
00:17:43,864 --> 0:17:45,933
一旦用户开启直播

274
00:17:46,600 --> 0:17:49,269
无论在控制中心或app里面

275
00:17:49,336 --> 0:17:51,071
只要安装了播放选择器

276
00:17:52,472 --> 0:17:55,676
ReplayKit会启动扩展程序

277
00:17:55,976 --> 0:17:58,745
创建SampleHandler

278
00:17:59,813 --> 0:18:01,982
这时候

279
00:17:59,813 --> 0:18:01,982
这时候

280
00:18:02,282 --> 0:18:05,752
你可以覆盖SampleHandler

281
00:18:06,587 --> 0:18:08,889
编写适用于直播的程式

282
00:18:08,956 --> 0:18:11,558
不要直接关联媒体样本的处理

283
00:18:12,659 --> 0:18:16,530
举例来说

284
00:18:16,697 --> 0:18:20,934
通过这个密钥串

285
00:18:22,069 --> 0:18:23,804
（直播开始）

286
00:18:23,871 --> 0:18:25,272
一旦程序启动

287
00:18:25,339 --> 0:18:28,275
且SampleHandler

288
00:18:30,744 --> 0:18:34,381
扩展得知ReplayKit将提供

289
00:18:34,448 --> 0:18:39,653
音视频样本

290
00:18:40,721 --> 0:18:45,926
在此函数中 可以创建媒体引擎

291
00:18:45,993 --> 0:18:50,130
或其他活动以接收样本

292
00:18:50,197 --> 0:18:53,300
并实时编码 然后上传至服务器

293
00:18:54,535 --> 0:18:56,303
（媒体样本处理）

294
00:18:56,370 --> 0:18:58,205
直播正在运行的时候

295
00:19:00,174 --> 0:19:03,477
ReplayKit会提供

296
00:19:04,044 --> 0:19:08,115
扩展要做的是编码并上传至直播平台

297
00:19:08,348 --> 0:19:10,717
根据偏好 可使用任何技术

298
00:19:12,853 --> 0:19:15,856
ReplayKit为扩展提供

299
00:19:15,923 --> 0:19:18,025
（直播上传扩展）

300
00:19:18,258 --> 0:19:20,561
录屏视频样本

301
00:19:21,228 --> 0:19:23,363
app音频样本

302
00:19:24,064 --> 0:19:27,768
和麦克风音频样本

303
00:19:28,268 --> 0:19:32,539
扩展将所有这些编码

304
00:19:35,542 --> 0:19:37,878
所有扩展处理的内容

305
00:19:37,945 --> 0:19:39,780
是由一个函数控制

306
00:19:40,547 --> 0:19:42,316
叫做processSampleBuffer

307
00:19:42,950 --> 0:19:47,154
该函数接收单个

308
00:19:47,487 --> 0:19:48,755
以及该缓冲类型

309
00:19:49,890 --> 0:19:53,093
你要做的就是对媒体样本

310
00:19:53,560 --> 0:19:55,529
这段代码样本展示了

311
00:19:55,596 --> 0:19:58,565
如何使用Video Toolbox

312
00:19:59,733 --> 0:20:02,736
我们建议使用

313
00:19:59,733 --> 0:20:02,736
我们建议使用

314
00:20:02,970 --> 0:20:06,440
因为它提供的硬件可以加速编码

315
00:20:06,507 --> 0:20:10,511
这对我们来说十分重要

316
00:20:10,777 --> 0:20:13,881
因为扩展的内存限制

317
00:20:13,947 --> 0:20:15,582
低于app的内存

318
00:20:16,984 --> 0:20:19,086
（处理app信息）

319
00:20:19,152 --> 0:20:24,725
在你对视频编码

320
00:20:25,626 --> 0:20:29,763
全世界的观众都可以观看你的直播

321
00:20:31,498 --> 0:20:33,700
但前提是他们要能够找到你的直播

322
00:20:34,968 --> 0:20:39,072
假设有人喜欢玩

323
00:20:39,606 --> 0:20:42,309
那么你的网页或app中

324
00:20:42,743 --> 0:20:46,079
让他们能找到

325
00:20:47,915 --> 0:20:50,617
为了实现这一目的

326
00:20:50,918 --> 0:20:52,753
你需要在视频流中添加

327
00:20:52,819 --> 0:20:56,323
有关这个游戏直播的信息

328
00:20:58,158 --> 0:21:01,562
为此ReplayKit提供一个

329
00:20:58,158 --> 0:21:01,562
为此ReplayKit提供一个

330
00:21:01,795 --> 0:21:04,565
叫做broadcastAnnotated

331
00:21:04,631 --> 0:21:07,367
一旦玩家开始游戏

332
00:21:08,602 --> 0:21:12,840
愤怒的小鸟发送样本

333
00:21:13,473 --> 0:21:16,009
游戏开始并提供词库

334
00:21:16,076 --> 0:21:18,245
详细说明启动的app信息

335
00:21:20,981 --> 0:21:25,752
比如 你可以使用

336
00:21:25,819 --> 0:21:29,623
RPApplicationInfo

337
00:21:29,690 --> 0:21:31,892
获取游戏的捆绑包ID

338
00:21:31,959 --> 0:21:34,461
作为元数据传输给流

339
00:21:35,896 --> 0:21:38,832
（处理播放完成）

340
00:21:40,300 --> 0:21:43,136
用户停止直播时 无论以何种方式

341
00:21:44,271 --> 0:21:47,541
ReplayKit使用的函数为

342
00:21:47,808 --> 0:21:50,677
来告诉扩展直播已经结束

343
00:21:50,744 --> 0:21:54,448
不会再有新的样本

344
00:21:55,949 --> 0:21:58,185
这个函数中 你需要

345
00:21:58,252 --> 0:22:00,888
结束上传缓存视频

346
00:21:58,252 --> 0:22:00,888
结束上传缓存视频

347
00:22:00,954 --> 0:22:05,893
释放媒体引擎或其他需要释放的内容

348
00:22:07,160 --> 0:22:09,129
（处理登录）

349
00:22:10,464 --> 0:22:15,068
这个就是直播的一般周期

350
00:22:15,669 --> 0:22:18,572
我这里还要再补充一点

351
00:22:20,407 --> 0:22:21,308
如上讨论

352
00:22:23,410 --> 0:22:25,579
任何设置直播所需的活动

353
00:22:26,213 --> 0:22:28,382
都在app中进行

354
00:22:29,316 --> 0:22:32,653
你可以获取用户登录app的信息

355
00:22:32,719 --> 0:22:36,657
或app中直播的名称

356
00:22:38,125 --> 0:22:41,929
我们也为此标记一个状态

357
00:22:42,996 --> 0:22:47,534
但是有些情况下 直播开始了

358
00:22:48,101 --> 0:22:51,071
扩展却缺少内容 无法进行播放

359
00:22:51,471 --> 0:22:54,474
比如 登录程序失败

360
00:22:55,375 --> 0:23:00,047
或某些东西缺失

361
00:22:55,375 --> 0:23:00,047
或某些东西缺失

362
00:23:02,282 --> 0:23:06,753
ReplayKit提供的API

363
00:23:07,654 --> 0:23:09,223
直播无法开启

364
00:23:09,489 --> 0:23:12,759
并提供某种解决方案

365
00:23:14,828 --> 0:23:19,600
工作原理是扩展调用API函数

366
00:23:19,666 --> 0:23:25,305
ReplayKit终止程序

367
00:23:27,107 --> 0:23:30,878
扩展提供运行失败的原因

368
00:23:31,278 --> 0:23:34,615
这个例子中

369
00:23:34,681 --> 0:23:37,050
原因是用户未登录

370
00:23:39,686 --> 0:23:43,257
接下来用户点击底部回到app

371
00:23:44,057 --> 0:23:46,693
ReplayKit启动app

372
00:23:46,760 --> 0:23:50,163
你要做的是以某种方式处理这个情况

373
00:23:50,230 --> 0:23:52,666
比如显示用户界面

374
00:23:53,000 --> 0:23:55,202
之后直播就可以正常运行

375
00:23:57,538 --> 0:24:01,175
我们之前看过这个代码片段

376
00:23:57,538 --> 0:24:01,175
我们之前看过这个代码片段

377
00:24:01,508 --> 0:24:04,378
这里我要展示的是你如何处理

378
00:24:04,444 --> 0:24:05,712
当用户未登录时

379
00:24:06,313 --> 0:24:09,750
这里有个函数

380
00:24:10,884 --> 0:24:15,389
你要做的是提供用户信息词库

381
00:24:15,455 --> 0:24:20,294
说明失败原因 然后

382
00:24:20,727 --> 0:24:23,163
并在程序终止后 显示该字符串

383
00:24:26,533 --> 0:24:29,603
（开发直播扩展）

384
00:24:29,670 --> 0:24:30,838
好了

385
00:24:32,873 --> 0:24:35,375
现在看看如何开发直播扩展

386
00:24:36,610 --> 0:24:39,713
如你所见 过程简单直白

387
00:24:41,548 --> 0:24:43,750
app控制直播设置

388
00:24:44,618 --> 0:24:46,987
然后将信息递给扩展

389
00:24:50,691 --> 0:24:52,759
直播开始后

390
00:24:52,826 --> 0:24:56,063
收取并编码媒体样本

391
00:24:57,231 --> 0:25:00,133
同时获取屏幕上的app信息

392
00:24:57,231 --> 0:25:00,133
同时获取屏幕上的app信息

393
00:25:00,200 --> 0:25:03,136
观众就可以找到你的直播了

394
00:25:05,305 --> 0:25:08,542
今天我想讲最后一点

395
00:25:10,544 --> 0:25:13,480
就是保护app内容

396
00:25:15,115 --> 0:25:19,353
你的app可能会显示一些

397
00:25:20,220 --> 0:25:23,023
录屏或直播的内容

398
00:25:24,258 --> 0:25:28,295
这同时适用于音频和可视化内容

399
00:25:30,030 --> 0:25:34,301
有个API能告诉你内容是否被抓取

400
00:25:34,735 --> 0:25:37,704
这个API由UIKit框架提供

401
00:25:38,672 --> 0:25:42,609
我讲的就是UIScreen的属性

402
00:25:43,944 --> 0:25:46,246
你可以通过注册来接收通知

403
00:25:46,313 --> 0:25:49,249
在该属性值被改变的时候

404
00:25:49,683 --> 0:25:54,021
停止音频回放或隐藏视觉内容

405
00:25:54,521 --> 0:25:55,689
在录制开始的时候

406
00:25:57,090 --> 0:26:00,260
还有个特殊情况需要特别注意

407
00:25:57,090 --> 0:26:00,260
还有个特殊情况需要特别注意

408
00:26:00,327 --> 0:26:02,529
就是隔空播放投屏

409
00:26:03,664 --> 0:26:06,400
我来展示你们可以如何处理

410
00:26:06,466 --> 0:26:09,503
通过这个代码样本通知处理程序

411
00:26:10,237 --> 0:26:13,473
基本来说 在投屏的情况下

412
00:26:13,707 --> 0:26:15,576
屏幕数量一般多于一个

413
00:26:15,843 --> 0:26:20,080
Screens这个数组

414
00:26:20,147 --> 0:26:23,951
那么即使isCaptured

415
00:26:24,117 --> 0:26:25,986
在投屏的时候

416
00:26:26,720 --> 0:26:30,357
这一步检查也可以保证回放继续

417
00:26:34,228 --> 0:26:38,298
以上就是屏幕直播及其运行原理

418
00:26:38,498 --> 0:26:39,499
总结来说

419
00:26:40,667 --> 0:26:42,736
ReplayKit提供高级API

420
00:26:42,803 --> 0:26:45,572
让你可以直播一个app的内容

421
00:26:46,173 --> 0:26:48,709
或屏幕上的所有活动内容

422
00:26:50,110 --> 0:26:53,413
iOS 12中

423
00:26:53,914 --> 0:26:58,252
或一种启动系统直播的方法

424
00:27:00,020 --> 0:27:03,891
实际上需要你去编码的是直播扩展

425
00:27:04,157 --> 0:27:06,960
它承担了视频编码的全部实际工作

426
00:27:09,029 --> 0:27:13,133
同样我们还讨论了

427
00:27:17,604 --> 0:27:20,541
这个演讲的链接可以提供更多信息

428
00:27:21,108 --> 0:27:25,078
今天晚些时候还有个

429
00:27:25,145 --> 0:27:27,047
下午3点在技术实验室5

430
00:27:27,314 --> 0:27:30,284
如果有任何问题和意见

431
00:27:30,350 --> 0:27:31,585
我们希望听到你的反馈

432
00:27:33,854 --> 0:27:36,857
谢谢大家今天来到这里

433
00:27:36,924 --> 0:27:40,060
我们很开心能告诉你这个新方法

434
00:27:40,627 --> 0:27:42,462
在iOS中实现直播

435
00:27:42,529 --> 0:27:46,033
也很期待看到

436
00:27:46,600 --> 0:27:47,801
所以大家尽管尝试

437
00:27:48,569 --> 0:27:52,105
使用Xcode模板

438
00:27:52,372 --> 0:27:57,744
或打开现有的app

439
00:27:58,245 --> 0:28:02,249
让直播从iOS到你的平台

440
00:27:58,245 --> 0:28:02,249
让直播从iOS到你的平台

441
00:28:02,749 --> 0:28:03,584
谢谢
