1
00:00:07,516 --> 0:00:17,776
[ 音乐 ]

2
00:00:18,276 --> 0:00:19,586
&gt;&gt; 在这个讨论会中 我们将

3
00:00:19,586 --> 0:00:21,006
向你介绍 Quick Look 

4
00:00:21,646 --> 0:00:22,806
欢迎参加 Quick Look 的

5
00:00:22,806 --> 0:00:23,366
“Preview from the ground up（入门预览）”

6
00:00:24,096 --> 0:00:26,046
我是 Raffael

7
00:00:26,046 --> 0:00:27,816
我将与另一位 Apple

8
00:00:28,186 --> 0:00:29,576
软件工程师 Maxime

9
00:00:29,576 --> 0:00:29,946
一起向大家讲解

10
00:00:30,456 --> 0:00:34,256
我们首先

11
00:00:34,256 --> 0:00:36,286
会进行一个

12
00:00:36,286 --> 0:00:36,826
Quick Look 的概述

13
00:00:37,896 --> 0:00:39,326
然后我们将向你展示

14
00:00:39,326 --> 0:00:41,656
如何在 App 中 采用 “Quick Look Preview

15
00:00:41,656 --> 0:00:43,366
Controller（Quick Look 预览控制器）”

16
00:00:43,726 --> 0:00:45,816
然后我们将解释

17
00:00:45,816 --> 0:00:47,566
如何为你自己的文件格式

18
00:00:47,566 --> 0:00:51,216
提供自定义 Quick Look 预览

19
00:00:51,416 --> 0:00:52,976
和自定义缩略图

20
00:00:55,536 --> 0:00:57,866
让我们开始吧 什么是 Quick Look 

21
00:01:00,156 --> 0:01:01,486
Quick Look 被用来

22
00:01:01,486 --> 0:01:03,786
预览文稿

23
00:01:03,786 --> 0:01:06,006
它让你能轻松地展示文稿

24
00:01:07,026 --> 0:01:08,936
更准确地说

25
00:01:09,126 --> 0:01:10,726
Quick Look 是一个 iOS 框架

26
00:01:10,726 --> 0:01:12,826
它为开发者提供了

27
00:01:12,826 --> 0:01:13,466
多个核心功能

28
00:01:15,036 --> 0:01:16,236
它允许你

29
00:01:16,236 --> 0:01:18,246
预览几种常用的

30
00:01:18,246 --> 0:01:21,716
文件格式的文稿

31
00:01:21,716 --> 0:01:23,926
为你的文件格式

32
00:01:23,926 --> 0:01:27,596
提供自定义预览

33
00:01:27,596 --> 0:01:29,236
并为你的

34
00:01:29,236 --> 0:01:31,296
自定义文件格式的文件

35
00:01:31,296 --> 0:01:32,326
向系统提供缩略图

36
00:01:35,786 --> 0:01:37,146
实际上 Apple 的许多

37
00:01:37,146 --> 0:01:38,816
第一方 App

38
00:01:38,816 --> 0:01:39,886
已经在使用 Quick Look 

39
00:01:41,006 --> 0:01:43,896
例如 在“文件”中显示

40
00:01:43,896 --> 0:01:45,976
存储在云中的文稿

41
00:01:51,046 --> 0:01:53,346
或者在“邮件”和“备忘录”中

42
00:01:53,346 --> 0:01:53,976
预览你的附件

43
00:02:01,356 --> 0:02:03,266
在“信息”中显示

44
00:02:03,266 --> 0:02:04,976
你已经发送的照片和视频

45
00:02:12,046 --> 0:02:13,286
所以 这个讨论会的目标听众是谁呢

46
00:02:13,686 --> 0:02:15,546
如果你想知道

47
00:02:15,546 --> 0:02:17,106
如何在 App 中

48
00:02:17,106 --> 0:02:18,836
展示文稿

49
00:02:18,836 --> 0:02:19,976
而不需要实现

50
00:02:19,976 --> 0:02:21,696
用户所使用的所有常见功能

51
00:02:22,526 --> 0:02:23,676
那么你就来对了

52
00:02:24,986 --> 0:02:26,836
你可能还拥有一个

53
00:02:26,836 --> 0:02:29,176
iOS 原本不支持的自定义文件格式

54
00:02:29,176 --> 0:02:30,796
你想要保证

55
00:02:30,796 --> 0:02:32,306
你的文件格式

56
00:02:32,306 --> 0:02:34,136
通过自定义缩略图和预览

57
00:02:34,136 --> 0:02:35,776
被 iOS 正确地处理

58
00:02:36,046 --> 0:02:38,176
如果你想了解更多信息 就不要离开

59
00:02:39,776 --> 0:02:40,816
不管你是

60
00:02:40,816 --> 0:02:43,046
iOS 的新手

61
00:02:43,046 --> 0:02:45,026
还是已经有了一个 App

62
00:02:45,026 --> 0:02:46,616
我们都会一步一步地指导你

63
00:02:49,356 --> 0:02:50,626
顺便说一句

64
00:02:50,626 --> 0:02:51,906
如果你还没看过的话

65
00:02:51,906 --> 0:02:53,526
你应该看看去年的讨论会

66
00:02:53,526 --> 0:02:55,286
“在 iOS 中打造

67
00:02:55,336 --> 0:02:57,876
优秀的基于文稿的 App”

68
00:02:57,876 --> 0:02:59,586
那次我们介绍了

69
00:02:59,586 --> 0:03:01,256
UIDocumentBrowserViewController

70
00:02:59,586 --> 0:03:01,256
UIDocumentBrowserViewController

71
00:03:01,506 --> 0:03:03,286
也简要介绍了一些关于

72
00:03:03,286 --> 0:03:04,656
Quick Look 的预览和缩略图扩展功能

73
00:03:04,656 --> 0:03:06,086
的基础内容

74
00:03:07,516 --> 0:03:09,046
今年还将会有一场

75
00:03:09,046 --> 0:03:10,426
文稿浏览器入门

76
00:03:10,426 --> 0:03:11,986
的讨论会

77
00:03:11,986 --> 0:03:13,606
如果你对 iOS 上的

78
00:03:14,016 --> 0:03:15,506
文件处理感兴趣

79
00:03:15,506 --> 0:03:16,896
我们强烈建议你参加

80
00:03:21,246 --> 0:03:22,416
Quick Look 已经存在

81
00:03:22,416 --> 0:03:23,426
有一段时间了

82
00:03:23,886 --> 0:03:25,146
它是在 iOS 4 的

83
00:03:25,146 --> 0:03:26,536
SDK 中引入的

84
00:03:28,046 --> 0:03:29,386
你最感兴趣的应该是

85
00:03:29,386 --> 0:03:30,786
QLPreviewController

86
00:03:30,786 --> 0:03:32,476
它是一个预览文稿的

87
00:03:32,476 --> 0:03:34,356
视图控制器

88
00:03:36,266 --> 0:03:38,386
它使用经典的数据源

89
00:03:38,386 --> 0:03:40,086
和委托模式

90
00:03:40,086 --> 0:03:41,706
这些你已经从你的 UIKit 和

91
00:03:41,706 --> 0:03:42,526
其他框架中知道了

92
00:03:42,976 --> 0:03:46,156
要想用一个漂亮的缩放变换

93
00:03:46,156 --> 0:03:47,516
来展示 Quick Look 

94
00:03:47,516 --> 0:03:49,256
我们给你的 API

95
00:03:49,256 --> 0:03:49,976
是最便利的方案

96
00:03:55,046 --> 0:03:56,326
你为什么想使用 Quick Look 

97
00:03:56,606 --> 0:03:58,326
如果你有一个与“文件” “邮件”

98
00:03:58,326 --> 0:04:00,986
或其他我们之前展示给你的 App

99
00:03:58,326 --> 0:04:00,986
或其他我们之前展示给你的 App

100
00:04:00,986 --> 0:04:02,356
相似的用例

101
00:04:02,986 --> 0:04:04,696
Quick Look 是你最好的选择

102
00:04:05,886 --> 0:04:07,146
Quick Look 可以直接使用

103
00:04:07,146 --> 0:04:08,426
你想要的它都有

104
00:04:10,306 --> 0:04:11,896
它支持常用的

105
00:04:11,896 --> 0:04:14,436
文件类型

106
00:04:14,436 --> 0:04:16,495
并提供给用户

107
00:04:16,495 --> 0:04:18,055
从其他第一方 iOS App 已经习惯的

108
00:04:18,055 --> 0:04:19,656
原生用户体验

109
00:04:21,616 --> 0:04:22,976
我们确保 Quick Look 

110
00:04:22,976 --> 0:04:24,586
在所有设备上

111
00:04:24,586 --> 0:04:26,056
都具有优异的性能

112
00:04:26,056 --> 0:04:28,166
因此所有的动画和手势都很流畅

113
00:04:30,006 --> 0:04:31,106
你可能正在处理

114
00:04:31,106 --> 0:04:32,976
来自不可信来源的文件

115
00:04:33,046 --> 0:04:34,936
但别担心 有我们在

116
00:04:35,466 --> 0:04:36,396
Quick Look 附带了一个

117
00:04:36,396 --> 0:04:38,046
复杂的安全模型

118
00:04:38,046 --> 0:04:39,816
可以保证 App 的安全性

119
00:04:44,136 --> 0:04:45,056
让我们看一下

120
00:04:45,056 --> 0:04:46,296
受支持的文件类型

121
00:04:47,196 --> 0:04:48,966
正如你所见

122
00:04:48,966 --> 0:04:49,986
囊括了所有的常用类型

123
00:04:50,406 --> 0:04:52,676
媒体文件 比如图像

124
00:04:52,676 --> 0:04:54,506
音频文件和视频

125
00:04:54,876 --> 0:04:56,916
文稿 比如 PDF

126
00:04:56,916 --> 0:04:59,526
办公文件以及压缩档案

127
00:05:00,556 --> 0:05:02,786
预览压缩档案

128
00:05:02,786 --> 0:05:04,586
允许你查看

129
00:05:04,586 --> 0:05:06,346
档案中的内容

130
00:05:06,346 --> 0:05:08,466
并单独查看其中的文件

131
00:05:08,466 --> 0:05:09,516
或共享等等

132
00:05:11,446 --> 0:05:13,176
现在如果你的自定义文件格式

133
00:05:13,176 --> 0:05:15,136
并不在这个列表中 那也不要担心

134
00:05:16,096 --> 0:05:17,786
去年我们引入了

135
00:05:17,786 --> 0:05:19,456
一个新的扩展点

136
00:05:19,456 --> 0:05:21,046
来实现 Quick Look 的预览扩展

137
00:05:21,916 --> 0:05:23,726
预览扩展允许你

138
00:05:23,726 --> 0:05:25,886
作为开发者为自己的

139
00:05:25,886 --> 0:05:27,746
自定义文件格式的文件

140
00:05:27,746 --> 0:05:28,876
创建预览

141
00:05:28,876 --> 0:05:31,976
我们将在讨论会的第二部分讨论这个问题

142
00:05:32,476 --> 0:05:35,776
今年有了 iOS 12 我们也增加了

143
00:05:35,776 --> 0:05:37,376
对新的 AR 文件格式

144
00:05:37,376 --> 0:05:41,196
USDZ 的支持

145
00:05:41,196 --> 0:05:43,156
所以只要几行代码

146
00:05:43,156 --> 0:05:44,856
你就可以在 App 中

147
00:05:44,856 --> 0:05:46,586
获得完全沉浸式的

148
00:05:46,586 --> 0:05:47,276
增强现实体验

149
00:05:48,746 --> 0:05:50,896
好的 现在我们谈一谈用户体验

150
00:05:51,556 --> 0:05:53,086
对于刚才所显示的每个文件类型

151
00:05:53,086 --> 0:05:55,056
我们确保 Quick Look 

152
00:05:55,056 --> 0:05:56,606
为你的移动设备

153
00:05:56,606 --> 0:05:58,866
提供了最好的预览

154
00:06:00,476 --> 0:06:01,936
例如 当你预览图像时

155
00:06:01,936 --> 0:06:04,266
你可以方便地

156
00:06:04,266 --> 0:06:05,796
放大图像

157
00:06:06,246 --> 0:06:08,706
你也可以用一个向下滑动的手势

158
00:06:08,706 --> 0:06:10,466
来关闭 Quick Look 

159
00:06:11,006 --> 0:06:14,596
在 PDF 文稿中

160
00:06:14,596 --> 0:06:16,156
你会有一个带有缩略图的侧边栏

161
00:06:16,156 --> 0:06:17,286
便于导航

162
00:06:18,356 --> 0:06:20,366
在电子表格中

163
00:06:20,366 --> 0:06:22,956
你可以切换文稿的各个页面

164
00:06:24,396 --> 0:06:26,476
在媒体文件中

165
00:06:26,476 --> 0:06:28,176
我们展示了一个滚动条

166
00:06:28,176 --> 0:06:29,656
允许你前后快进 等等

167
00:06:29,776 --> 0:06:30,626
你应该明白了吧

168
00:06:32,556 --> 0:06:33,896
所以当你选择 Quick Look 时

169
00:06:34,246 --> 0:06:36,046
你的用户可以使用

170
00:06:36,046 --> 0:06:37,976
所有其他 App 可以使用的手势

171
00:06:43,386 --> 0:06:44,516
那么对于 Quick Look 的

172
00:06:44,516 --> 0:06:46,126
常见用例是什么呢

173
00:06:47,196 --> 0:06:49,046
例如 你可能希望

174
00:06:49,046 --> 0:06:51,136
让用户放大照片

175
00:06:51,136 --> 0:06:54,386
或者希望能够

176
00:06:54,386 --> 0:06:56,746
通过左右滑动 快速浏览一组照片

177
00:06:57,826 --> 0:07:00,096
你想要播放音频或视频文件

178
00:06:57,826 --> 0:07:00,096
你想要播放音频或视频文件

179
00:07:00,096 --> 0:07:02,046
而不需要处理

180
00:07:02,046 --> 0:07:03,546
底层框架

181
00:07:03,546 --> 0:07:06,996
或者你想要呈现一个

182
00:07:06,996 --> 0:07:08,946
可滚动 可缩放的

183
00:07:08,946 --> 0:07:11,646
PDF 形式的用户协议

184
00:07:12,876 --> 0:07:14,026
那就使用 Quick Look 吧

185
00:07:16,686 --> 0:07:17,876
但是 Quick Look 不应该被误用

186
00:07:17,876 --> 0:07:20,446
这些时候不应该使用 Quick Look 

187
00:07:21,936 --> 0:07:22,946
Quick Look 提供预览功能

188
00:07:22,946 --> 0:07:25,826
但不提供编辑功能

189
00:07:26,766 --> 0:07:27,866
因此如果你需要

190
00:07:27,866 --> 0:07:29,806
图像编辑

191
00:07:29,806 --> 0:07:32,746
PDF 管理 或者电影剪辑等功能

192
00:07:32,746 --> 0:07:34,976
你需要选择另一种方法

193
00:07:39,046 --> 0:07:40,676
类似地

194
00:07:40,676 --> 0:07:42,336
如果你需要为你的视频

195
00:07:42,336 --> 0:07:43,906
提供更高级的播放控制

196
00:07:43,906 --> 0:07:45,426
Quick Look 可能不是最好的选择

197
00:07:46,016 --> 0:07:47,896
你可以使用 AVPlayer

198
00:07:49,116 --> 0:07:50,016
Quick Look 应该

199
00:07:50,016 --> 0:07:51,346
全屏显示

200
00:07:51,716 --> 0:07:53,276
如果你只是想

201
00:07:53,276 --> 0:07:55,456
展示嵌入布局的一个图像 

202
00:07:55,636 --> 0:07:57,356
一个视频或一个文稿

203
00:07:57,356 --> 0:07:58,936
以及它周围的其他视图

204
00:07:59,616 --> 0:08:00,886
你可能想要使用

205
00:07:59,616 --> 0:08:00,886
你可能想要使用

206
00:08:00,886 --> 0:08:04,506
UAImageView AVPlayer WKWebView

207
00:08:04,576 --> 0:08:06,086
或其他类型的视图

208
00:08:08,816 --> 0:08:10,316
还要注意

209
00:08:10,316 --> 0:08:12,436
暂不支持定制

210
00:08:12,436 --> 0:08:13,856
Quick Look 的视图层级结构

211
00:08:14,416 --> 0:08:16,316
请不要尝试

212
00:08:16,316 --> 0:08:17,696
在预览前面添加别的视图

213
00:08:17,696 --> 0:08:20,036
比如导航工具栏

214
00:08:20,036 --> 0:08:20,976
这是目前不支持的

215
00:08:26,166 --> 0:08:27,826
现在我们已经介绍了 Quick Look 

216
00:08:27,826 --> 0:08:29,596
让我们看看

217
00:08:29,596 --> 0:08:31,976
如何充分利用我们的 API

218
00:08:37,275 --> 0:08:38,655
如果你想把文稿作为第一步

219
00:08:38,655 --> 0:08:40,966
呈现给用户

220
00:08:40,966 --> 0:08:44,296
你要实例化一个新的 QLPreviewController

221
00:08:44,296 --> 0:08:46,186
它基本上就是一个 UIViewController

222
00:08:48,176 --> 0:08:50,886
接下来 为了告诉 previewController

223
00:08:50,886 --> 0:08:53,006
要预览哪些文稿

224
00:08:53,006 --> 0:08:54,726
你需要为它分配一个 dataSource（数据源）

225
00:08:55,676 --> 0:08:57,156
dataSource 是一个

226
00:08:57,156 --> 0:08:58,046
遵循 QLPreviewControllerDataSource

227
00:08:58,046 --> 0:09:00,426
dataSource 协议的对象

228
00:08:58,046 --> 0:09:00,426
dataSource 协议的对象

229
00:09:00,426 --> 0:09:02,906
我们马上就会看到这个

230
00:09:03,396 --> 0:09:07,116
第三步也是最后一步

231
00:09:07,586 --> 0:09:09,006
你要做的就是

232
00:09:09,006 --> 0:09:09,786
展现这个视图控制器

233
00:09:15,046 --> 0:09:16,296
让我们仔细看看

234
00:09:16,296 --> 0:09:17,436
dataSource 是如何工作的

235
00:09:18,376 --> 0:09:20,236
你的数据源必须遵循

236
00:09:20,236 --> 0:09:22,956
QLPreviewControllerDataSource 协议

237
00:09:24,026 --> 0:09:26,426
这是一个需要两个方法的协议

238
00:09:26,776 --> 0:09:28,666
首先你需要返回

239
00:09:28,666 --> 0:09:30,406
预览控制器应该

240
00:09:30,406 --> 0:09:31,946
预览的项目数量

241
00:09:32,956 --> 0:09:34,336
它应该提供

242
00:09:34,336 --> 0:09:36,166
一个以上的项目

243
00:09:36,166 --> 0:09:37,926
让用户将能够左右滑动

244
00:09:37,926 --> 0:09:38,936
浏览文稿

245
00:09:41,156 --> 0:09:43,216
接下来 Quick Look 

246
00:09:43,216 --> 0:09:44,186
根据你之前

247
00:09:44,186 --> 0:09:46,446
返回的数值

248
00:09:46,446 --> 0:09:48,176
QLPreviewItem 向你询求一个或多个

249
00:09:50,516 --> 0:09:52,636
那么 什么是 QLPreviewItem 呢

250
00:09:53,456 --> 0:09:54,966
它是一种对文稿

251
00:09:54,966 --> 0:09:56,736
进行抽象的协议

252
00:09:57,386 --> 0:09:59,326
对于 Quick Look 而言

253
00:09:59,326 --> 0:10:02,136
QLPreviewItem 基本上就是 URL

254
00:09:59,326 --> 0:10:02,136
QLPreviewItem 基本上就是 URL

255
00:10:02,136 --> 0:10:04,596
我可以在这找到磁盘上的文稿

256
00:10:04,596 --> 0:10:06,936
以及可选的标题

257
00:10:06,936 --> 0:10:08,566
Quick Look 将把它显示在导航栏中

258
00:10:09,136 --> 0:10:12,216
在你的 App 中

259
00:10:12,216 --> 0:10:14,206
表示文稿的类

260
00:10:14,206 --> 0:10:15,746
需要遵循 QLPreviewItem 协议

261
00:10:16,586 --> 0:10:19,266
但是顺便说一下

262
00:10:19,266 --> 0:10:21,376
NSURL 已经遵循了 QLPreviewItem 协议

263
00:10:21,376 --> 0:10:23,396
所以如果不需要自定义标题

264
00:10:23,396 --> 0:10:25,246
你可以直接

265
00:10:25,246 --> 0:10:29,806
返回数据源中的 NSURL 实例

266
00:10:29,806 --> 0:10:30,936
而无需自己实现协议

267
00:10:31,466 --> 0:10:34,896
让我们看一下这个例子

268
00:10:36,426 --> 0:10:38,136
在这个场景中

269
00:10:38,136 --> 0:10:39,576
显示 Quick Look 的

270
00:10:39,576 --> 0:10:41,766
视图控制器

271
00:10:41,766 --> 0:10:43,166
充当 QLPreviewController 的数据源

272
00:10:44,496 --> 0:10:46,566
因此我们让它

273
00:10:46,566 --> 0:10:48,236
在扩展中遵循

274
00:10:48,236 --> 0:10:50,346
QLPreviewControllerDataSource

275
00:10:50,346 --> 0:10:51,586
并执行了这两种方法

276
00:10:53,276 --> 0:10:54,986
这里我们使用一个

277
00:10:54,986 --> 0:10:57,396
文件 URL 数组作为 Model

278
00:10:57,986 --> 0:10:59,516
我们返回

279
00:10:59,516 --> 0:11:02,096
numberOfPreviewItems

280
00:10:59,516 --> 0:11:02,096
numberOfPreviewItems

281
00:11:02,096 --> 0:11:03,646
(in controller:) 方法

282
00:11:03,646 --> 0:11:04,086
中的 URL 数量

283
00:11:04,586 --> 0:11:07,626
然后每个 URL 会相应地被

284
00:11:07,796 --> 0:11:10,006
previewController(_ controller: 

285
00:11:10,006 --> 0:11:12,216
previewItemAt index:) 方法

286
00:11:12,216 --> 0:11:13,896
中的索引引用

287
00:11:19,046 --> 0:11:22,426
好的 我们已经设置好了 previewController

288
00:11:22,426 --> 0:11:24,336
它知道要预览哪些文件

289
00:11:24,336 --> 0:11:25,656
所以我们已经准备好

290
00:11:25,656 --> 0:11:26,376
展示视图控制器了

291
00:11:27,386 --> 0:11:28,836
有两种方法可以选择

292
00:11:29,586 --> 0:11:30,766
你可以在当前环境顶上

293
00:11:30,766 --> 0:11:34,866
模态地显示 previewController

294
00:11:34,866 --> 0:11:36,456
也可以将 previewController

295
00:11:36,916 --> 0:11:38,626
推入 UINavigationController

296
00:11:39,726 --> 0:11:41,746
这两种方法都很有效

297
00:11:41,746 --> 0:11:43,646
你需要决定哪一种

298
00:11:43,646 --> 0:11:44,586
更适合你的情况

299
00:11:44,586 --> 0:11:47,016
如果要模态地显示

300
00:11:47,016 --> 0:11:48,066
你的处理方法和处理任何视图控制器一样

301
00:11:48,066 --> 0:11:49,716
也就是调用 present()

302
00:11:51,666 --> 0:11:53,296
这是一个

303
00:11:53,296 --> 0:11:54,996
模态显示的例子

304
00:11:57,176 --> 0:11:58,046
如果你有一个

305
00:11:58,046 --> 0:11:59,876
UINavigationController

306
00:11:59,876 --> 0:12:01,396
而且更喜欢把 previewController 推入

307
00:11:59,876 --> 0:12:01,396
而且更喜欢把 previewController 推入

308
00:12:01,396 --> 0:12:03,386
你可以使用

309
00:12:03,386 --> 0:12:03,976
pushViewController

310
00:12:08,146 --> 0:12:08,976
它的效果是这样的

311
00:12:16,046 --> 0:12:17,286
QLPreviewController 类

312
00:12:17,286 --> 0:12:18,866
提供了一些

313
00:12:18,866 --> 0:12:19,906
我想要强调的方法

314
00:12:20,956 --> 0:12:22,826
首先 如果你想知道

315
00:12:22,826 --> 0:12:24,296
Quick Look 是否能够

316
00:12:24,366 --> 0:12:25,986
预览某个文稿

317
00:12:26,706 --> 0:12:28,756
使用 canPreview(_ item:) 类方法

318
00:12:28,756 --> 0:12:32,026
这个方法将返回为真

319
00:12:32,026 --> 0:12:33,726
如果文稿匹配任何

320
00:12:33,726 --> 0:12:36,376
默认支持的文件类型

321
00:12:36,376 --> 0:12:37,756
或者如果有可用的预览扩展

322
00:12:37,756 --> 0:12:39,666
可以处理该文件

323
00:12:41,856 --> 0:12:44,216
这是我们已经讨论过的 dataSource

324
00:12:46,816 --> 0:12:49,216
reloadData() 重新加载

325
00:12:49,216 --> 0:12:50,356
预览控制器应该呈现的

326
00:12:50,356 --> 0:12:51,556
文稿列表

327
00:12:52,236 --> 0:12:54,406
如果这个列表发生了变化

328
00:12:54,406 --> 0:12:55,486
且预览控制器已经显示

329
00:12:55,486 --> 0:12:57,626
则使用该方法

330
00:12:57,626 --> 0:12:59,236
来触发重载

331
00:13:01,796 --> 0:13:03,446
如果你需要获取

332
00:13:03,446 --> 0:13:05,236
预览项列表中

333
00:13:05,236 --> 0:13:07,146
当前预览项的索引

334
00:13:07,956 --> 0:13:09,546
请记住用户可以向左

335
00:13:09,546 --> 0:13:10,696
或向右滑动以切换到另一个

336
00:13:10,696 --> 0:13:14,436
请使用 currentPreviewItemIndex 变量

337
00:13:15,646 --> 0:13:17,206
这既是一个 getter

338
00:13:17,206 --> 0:13:19,486
也是一个 setter

339
00:13:19,486 --> 0:13:20,986
所以如果你想要 Quick Look

340
00:13:20,986 --> 0:13:22,746
在某个特定项目时开始显示

341
00:13:22,746 --> 0:13:25,256
请将索引设置为正确的值

342
00:13:25,666 --> 0:13:29,946
最后但同样重要的是

343
00:13:29,946 --> 0:13:32,376
预览控制器也有一个委托

344
00:13:33,066 --> 0:13:34,126
现在让我们来看看

345
00:13:34,126 --> 0:13:35,936
QLPreviewControllerDelegate 协议

346
00:13:41,056 --> 0:13:42,506
如果你给你的预览控制器

347
00:13:42,506 --> 0:13:44,366
分配一个委托

348
00:13:44,366 --> 0:13:46,626
你会有更多的方法来控制 Quick Look 的行为

349
00:13:47,736 --> 0:13:49,226
它还允许你

350
00:13:49,226 --> 0:13:50,496
对 Quick Look 的显示做出反应

351
00:13:51,316 --> 0:13:52,836
注意 QLPreviewControllerDelegate 中的

352
00:13:52,836 --> 0:13:55,616
所有方法都是可选的

353
00:13:56,226 --> 0:13:57,636
你不需要执行它们

354
00:13:57,726 --> 0:13:59,096
事实上你甚至

355
00:13:59,096 --> 0:14:00,556
不需要分配一个委托

356
00:13:59,096 --> 0:14:00,556
不需要分配一个委托

357
00:14:02,376 --> 0:14:04,076
该协议承载了许多

358
00:14:04,076 --> 0:14:05,506
可以实现的方法

359
00:14:06,306 --> 0:14:07,986
前两种方法允许你

360
00:14:07,986 --> 0:14:09,566
对 Quick Look 即将

361
00:14:09,566 --> 0:14:11,086
被用户取消

362
00:14:11,086 --> 0:14:13,976
以及已经取消这两种事件 做出反应

363
00:14:18,046 --> 0:14:19,036
你可能想要使用这些方法

364
00:14:19,036 --> 0:14:20,636
来更新当前

365
00:14:20,636 --> 0:14:22,976
呈现 Quick Look 的视图控制器

366
00:14:27,176 --> 0:14:29,456
接下来 previewController(_ controller:

367
00:14:29,456 --> 0:14:31,856
shouldOpen url: for item:)方法

368
00:14:32,386 --> 0:14:34,026
让你能预防 Quick Look 

369
00:14:34,026 --> 0:14:35,966
打开预览文稿

370
00:14:35,966 --> 0:14:37,136
所包含的链接

371
00:14:38,006 --> 0:14:39,846
使用这个方法

372
00:14:39,846 --> 0:14:41,736
你可以防止用户

373
00:14:41,736 --> 0:14:43,806
在点击 PDF 中

374
00:14:43,806 --> 0:14:46,206
包含的 URL 或电话号码时离开 App

375
00:14:46,206 --> 0:14:51,086
最后 

376
00:14:51,086 --> 0:14:52,246
如刚刚我们提到的

377
00:14:52,246 --> 0:14:53,936
QLPreviewControllerDelegate 协议

378
00:14:53,936 --> 0:14:56,356
提供了 API 

379
00:14:56,476 --> 0:14:58,896
以在 Quick Look 被显示和被撤销时

380
00:14:58,896 --> 0:15:00,636
获得一个平滑的缩放动画

381
00:14:58,896 --> 0:15:00,636
获得一个平滑的缩放动画

382
00:15:01,716 --> 0:15:03,616
通过这些方法

383
00:15:03,616 --> 0:15:05,396
用户界面上的缩略图

384
00:15:05,396 --> 0:15:07,706
可以在被点按时

385
00:15:07,706 --> 0:15:10,086
转换为 Quick Look预览

386
00:15:13,056 --> 0:15:15,466
如果有一个邮件附件

387
00:15:15,466 --> 0:15:17,356
或对话视图中的一张照片

388
00:15:17,586 --> 0:15:20,526
借助 Quick Look 

389
00:15:20,526 --> 0:15:22,096
你可以通过轻点它 让它全屏显示

390
00:15:25,406 --> 0:15:27,356
在你的 App 中

391
00:15:27,356 --> 0:15:28,906
我们让你非常容易地

392
00:15:28,906 --> 0:15:30,756
得到这个渐变缩放动画

393
00:15:32,276 --> 0:15:33,936
如果你要执行委托中的

394
00:15:33,936 --> 0:15:35,496
其中一种方法

395
00:15:35,936 --> 0:15:37,236
Quick Look 将需要

396
00:15:37,236 --> 0:15:38,986
询求所需的信息

397
00:15:38,986 --> 0:15:40,096
来执行缩放

398
00:15:41,026 --> 0:15:42,126
基本上就是

399
00:15:42,126 --> 0:15:44,386
一个矩形区域

400
00:15:44,386 --> 0:15:45,636
当显示或取消 Quick Look 时

401
00:15:45,636 --> 0:15:48,246
动画会在这个区域内

402
00:15:48,246 --> 0:15:49,226
开始或停止

403
00:15:51,176 --> 0:15:54,666
你可以提供

404
00:15:54,666 --> 0:15:58,586
缩略图的框架和图像

405
00:15:58,686 --> 0:16:00,266
或者 更好地

406
00:15:58,686 --> 0:16:00,266
或者 更好地

407
00:16:00,266 --> 0:16:02,416
你可以使用

408
00:16:02,416 --> 0:16:04,136
我们的模态方法

409
00:16:04,136 --> 0:16:05,946
即返回缩略图为视图

410
00:16:06,916 --> 0:16:08,306
使用这种方法

411
00:16:08,306 --> 0:16:09,916
你不必担心坐标

412
00:16:10,436 --> 0:16:11,976
Quick Look 将为你完成所有繁重的工作

413
00:16:17,126 --> 0:16:18,416
它的效果是这样的

414
00:16:19,986 --> 0:16:21,006
请注意缩略图是

415
00:16:21,006 --> 0:16:22,916
如何过渡到

416
00:16:22,916 --> 0:16:23,896
Quick Look 全屏预览的

417
00:16:26,126 --> 0:16:27,716
好的 现在是演示的时候了

418
00:16:27,716 --> 0:16:29,206
我们想向你展示

419
00:16:29,206 --> 0:16:31,016
我们刚刚讲过的内容

420
00:16:33,156 --> 0:16:35,666
好的 这是一个 iOS 项目

421
00:16:35,666 --> 0:16:37,226
我们不讨论它

422
00:16:37,226 --> 0:16:38,696
而是按下播放键

423
00:16:38,906 --> 0:16:40,016
看一看我们准备了什么

424
00:16:40,016 --> 0:16:41,926
以及我们正做些什么

425
00:16:51,046 --> 0:16:51,926
我们叫它《Wildlife Explorer》

426
00:16:51,926 --> 0:16:53,976
它是一个非常简单的 App

427
00:16:54,766 --> 0:16:56,516
它基本上显示了

428
00:16:56,516 --> 0:16:58,766
一个照片网格

429
00:16:58,766 --> 0:17:00,516
我们在这里看到的每一张照片

430
00:16:58,766 --> 0:17:00,516
我们在这里看到的每一张照片

431
00:17:00,516 --> 0:17:02,276
都是它背后内容的缩略图

432
00:17:02,276 --> 0:17:03,126
你可以点击它

433
00:17:03,256 --> 0:17:05,496
例如 点击大象的图片

434
00:17:05,496 --> 0:17:07,286
就会在全屏显示

435
00:17:07,286 --> 0:17:08,866
大象的大照片

436
00:17:08,866 --> 0:17:11,826
点击长颈鹿

437
00:17:12,066 --> 0:17:13,945
就会预览一个完整的 PDF 文件

438
00:17:13,945 --> 0:17:15,715
内含所有种类的长颈鹿

439
00:17:17,215 --> 0:17:18,906
现在 我们除了看着它

440
00:17:18,906 --> 0:17:20,445
什么都做不了

441
00:17:21,156 --> 0:17:23,806
点击图片没有反应 所以我们来修复这个问题

442
00:17:28,306 --> 0:17:30,406
这个 App 的结构

443
00:17:30,406 --> 0:17:31,376
相当简单

444
00:17:32,546 --> 0:17:33,916
为了显示照片的网格

445
00:17:33,916 --> 0:17:35,166
我们使用

446
00:17:35,166 --> 0:17:36,356
CollectionViewController

447
00:17:38,886 --> 0:17:41,686
在初始化它时

448
00:17:41,686 --> 0:17:43,996
我们将获得与 App 打包的文稿

449
00:17:43,996 --> 0:17:45,656
的 URL 列表

450
00:17:45,656 --> 0:17:46,946
比如我们刚刚看到的大象图片

451
00:17:51,196 --> 0:17:53,276
我们使用这个列表

452
00:17:53,276 --> 0:17:55,396
来初始化 documentDataSource

453
00:17:56,666 --> 0:17:58,626
该对象在

454
00:17:58,626 --> 0:17:59,966
UICollectionViewDataSource 

455
00:17:59,966 --> 0:18:01,296
协议的实现中

456
00:17:59,966 --> 0:18:01,296
协议的实现中

457
00:18:01,296 --> 0:18:03,976
作为集合视图的 Model

458
00:18:12,106 --> 0:18:13,896
在这里 

459
00:18:13,896 --> 0:18:15,696
我们返回刚才收集的文稿的数目

460
00:18:16,096 --> 0:18:17,896
然后为每个文稿

461
00:18:17,896 --> 0:18:19,316
创建一个 cell

462
00:18:19,316 --> 0:18:20,896
每个 cell 的缩略图

463
00:18:20,896 --> 0:18:22,076
分别作为单元格的图像

464
00:18:22,526 --> 0:18:25,756
到目前为止

465
00:18:25,756 --> 0:18:27,166
这几乎就是这个 App 的核心了

466
00:18:28,266 --> 0:18:29,736
现在我们把之前

467
00:18:29,736 --> 0:18:30,476
讲过的内容加上去

468
00:18:31,216 --> 0:18:32,786
在点击单元格时

469
00:18:32,786 --> 0:18:34,246
我们希望 Quick Look

470
00:18:34,246 --> 0:18:35,146
会显示正确的文稿

471
00:18:36,286 --> 0:18:37,886
我们已经可以确定

472
00:18:37,886 --> 0:18:39,196
在用户刚刚轻点一个单元格时

473
00:18:39,196 --> 0:18:40,966
有一个方法被调用了

474
00:18:47,056 --> 0:18:48,676
为了显示 Quick Look 我们在这里

475
00:18:48,676 --> 0:18:50,896
创建一个新的 QLPreviewController

476
00:18:51,286 --> 0:18:51,976
并对它进行配置

477
00:19:03,396 --> 0:19:05,796
我们创建一个新的控制器

478
00:19:05,796 --> 0:19:07,426
并把 documentDataSource 赋予给它

479
00:19:07,426 --> 0:19:09,676
作为数据源

480
00:19:09,856 --> 0:19:11,446
然后确保 Quick Look 

481
00:19:11,446 --> 0:19:12,936
在出现的时候显示正确的预览

482
00:19:12,936 --> 0:19:15,016
通过设置正确的

483
00:19:15,116 --> 0:19:15,976
currentPreviewItemIndex

484
00:19:20,056 --> 0:19:22,316
很好 现在 Xcode 已经在

485
00:19:22,316 --> 0:19:23,986
抱怨我们的新代码了

486
00:19:23,986 --> 0:19:25,486
它还不知道

487
00:19:25,486 --> 0:19:27,106
QLPreviewController

488
00:19:27,826 --> 0:19:29,106
我们需要首先导入 QuickLook 

489
00:19:29,106 --> 0:19:31,396
因此我们返回到

490
00:19:31,396 --> 0:19:32,976
文件的顶部并导入 QuickLook 

491
00:19:44,046 --> 0:19:46,456
好了 Xcode 抱怨的

492
00:19:46,456 --> 0:19:48,446
下一件事是数据源

493
00:19:49,166 --> 0:19:50,766
我们赋给

494
00:19:50,766 --> 0:19:52,016
新预览控制器

495
00:19:52,016 --> 0:19:53,556
的文稿数据源

496
00:19:53,556 --> 0:19:54,416
似乎还没有遵循

497
00:19:54,416 --> 0:19:56,226
QLPreviewControllerDataSource 协议

498
00:19:56,226 --> 0:19:57,946
这个我们之前

499
00:19:57,946 --> 0:19:58,946
已经讨论过了

500
00:20:00,656 --> 0:20:02,766
为了解决这个问题

501
00:20:02,766 --> 0:20:04,976
我们切换到 DocumentDataSource 的部分

502
00:20:10,246 --> 0:20:11,606
DocumentDataSource 

503
00:20:11,606 --> 0:20:13,486
是一个非常简单的对象

504
00:20:13,576 --> 0:20:15,926
到目前为止

505
00:20:15,926 --> 0:20:16,246
它仅仅拥有一个 URL 数组

506
00:20:17,256 --> 0:20:18,286
我们需要将

507
00:20:18,286 --> 0:20:20,086
QLPreviewControllerDataSource 协议

508
00:20:20,086 --> 0:20:21,646
添加到这个

509
00:20:21,646 --> 0:20:23,936
类实现的协议列表中

510
00:20:33,246 --> 0:20:34,956
接下来 我们实现缺失的方法

511
00:20:45,096 --> 0:20:46,456
正如你看到的

512
00:20:46,456 --> 0:20:48,376
我们在这里使用 DocumentDataSource 的方式

513
00:20:48,376 --> 0:20:50,216
与我们在集合视图中

514
00:20:50,216 --> 0:20:51,326
使用文稿数据源的方式非常相似

515
00:20:51,586 --> 0:20:54,066
在 numberOfPreviewItems() 方法中

516
00:20:54,066 --> 0:20:56,046
我们返回之前

517
00:20:56,046 --> 0:20:57,516
从文稿文件夹

518
00:20:57,516 --> 0:20:59,326
收集的 URL 数量

519
00:20:59,806 --> 0:21:03,626
然后 Quick Look 询求

520
00:20:59,806 --> 0:21:03,626
然后 Quick Look 询求

521
00:21:03,626 --> 0:21:06,126
单独的 QLPreviewItem

522
00:21:06,126 --> 0:21:08,896
然后返回索引引用的正确 URL

523
00:21:13,066 --> 0:21:14,106
很好 数据源已经

524
00:21:14,106 --> 0:21:15,866
被正确地设置好了

525
00:21:15,866 --> 0:21:17,496
因此我们可以继续并

526
00:21:17,496 --> 0:21:18,416
显示预览控制器了

527
00:21:19,456 --> 0:21:20,836
因此 我们返回到

528
00:21:20,836 --> 0:21:23,036
didTapCollectionCell() 方法

529
00:21:23,036 --> 0:21:23,976
并添加丢失的方法调用

530
00:21:34,046 --> 0:21:34,976
我们来看看现在是什么样子

531
00:21:46,046 --> 0:21:47,456
好的 我们回到了网格中

532
00:21:47,666 --> 0:21:49,516
现在 当点击一个单元格时

533
00:21:49,846 --> 0:21:51,766
Quick Look 会

534
00:21:51,766 --> 0:21:53,656
全屏显示正确的文稿

535
00:21:55,326 --> 0:21:57,406
看看 使用你习惯的所有手势

536
00:21:57,406 --> 0:21:59,936
全屏显示图像

537
00:21:59,936 --> 0:22:01,826
甚至 PDF 文件

538
00:21:59,936 --> 0:22:01,826
甚至 PDF 文件

539
00:22:01,826 --> 0:22:03,346
是多么容易

540
00:22:04,126 --> 0:22:06,256
我们可以用两个手指放大文稿

541
00:22:06,606 --> 0:22:09,276
我们可以选择文本

542
00:22:09,276 --> 0:22:11,576
甚至复制它

543
00:22:13,846 --> 0:22:16,356
一旦我们完成了

544
00:22:16,356 --> 0:22:18,706
我们可以用缩放手势

545
00:22:18,706 --> 0:22:18,976
再次取消 Quick Look 

546
00:22:23,046 --> 0:22:24,416
所以我们在这里使用的

547
00:22:24,416 --> 0:22:25,976
显示 Quick Look 的方式

548
00:22:25,976 --> 0:22:26,986
是模态展示风格

549
00:22:27,946 --> 0:22:29,406
正如我前面所说的

550
00:22:29,406 --> 0:22:31,156
我们还可以用一个推挤动画

551
00:22:31,156 --> 0:22:32,136
来呈现 Quick Look 

552
00:22:33,426 --> 0:22:35,026
因此 我们只需

553
00:22:35,026 --> 0:22:36,556
告诉 App 的导航控制器

554
00:22:36,556 --> 0:22:38,206
将预览控制器

555
00:22:38,206 --> 0:22:40,116
推到当前的控制器上

556
00:22:40,116 --> 0:22:52,786
来让它显示 我们来看一下

557
00:23:05,076 --> 0:23:06,336
正如你所见

558
00:23:06,336 --> 0:23:07,896
这是一种不同的

559
00:23:07,896 --> 0:23:09,506
呈现 Quick Look 的风格

560
00:23:09,506 --> 0:23:10,976
它和模态呈现一样有效

561
00:23:17,066 --> 0:23:19,226
好了 Quick Look 能用了

562
00:23:19,226 --> 0:23:20,356
现在我想告诉你们的最后一件事

563
00:23:20,356 --> 0:23:22,126
是如何使用 Quick Look 委托

564
00:23:22,126 --> 0:23:23,766
来我们在网格中

565
00:23:23,766 --> 0:23:25,576
点击缩略图时

566
00:23:25,576 --> 0:23:28,616
获得漂亮的缩放动画

567
00:23:28,706 --> 0:23:30,456
首先 我们切换回

568
00:23:30,456 --> 0:23:32,286
模态呈现样式

569
00:23:32,286 --> 0:23:33,976
这是缩放变换工作所需要的

570
00:23:39,046 --> 0:23:40,286
然后我们需要

571
00:23:40,286 --> 0:23:41,496
给预览控制器

572
00:23:41,496 --> 0:23:43,706
分配一个委托

573
00:23:43,706 --> 0:23:44,496
在这种情况下我们分配 self

574
00:23:54,046 --> 0:23:55,646
然而 self 还不符合

575
00:23:55,646 --> 0:23:57,536
QLPreviewController 委托

576
00:23:57,536 --> 0:23:59,506
所以让我们将它添加到

577
00:23:59,506 --> 0:23:59,976
协议列表中

578
00:24:12,236 --> 0:24:14,556
现在 最后一步

579
00:24:14,556 --> 0:24:16,446
我们执行一个神奇的方法

580
00:24:16,446 --> 0:24:18,156
它告诉 Quick Look 

581
00:24:18,156 --> 0:24:20,176
当将要显示缩放动画时

582
00:24:20,176 --> 0:24:22,756
使用哪个视图作为源

583
00:24:34,366 --> 0:24:36,506
正如你所看到的

584
00:24:36,506 --> 0:24:38,816
我们正在使用最近被轻点的

585
00:24:38,816 --> 0:24:40,356
单元格的 imageView

586
00:24:40,356 --> 0:24:42,356
我们将这个单元格作为参考

587
00:24:42,356 --> 0:24:42,896
并将其返回给 Quick Look 

588
00:24:44,196 --> 0:24:45,646
这就是我们为了

589
00:24:45,646 --> 0:24:47,666
让缩放动画工作要做的一切

590
00:24:48,066 --> 0:24:49,836
Quick Look 将在被提交时

591
00:24:49,836 --> 0:24:52,416
和被取消时调用它

592
00:24:52,996 --> 0:24:53,916
我们来试一下

593
00:25:03,046 --> 0:25:04,506
现在 当我们点击一个缩略图时

594
00:25:05,116 --> 0:25:06,576
请注意缩略图

595
00:25:06,576 --> 0:25:08,446
是如何显示到全屏预览的

596
00:25:09,756 --> 0:25:11,646
同时也观察到

597
00:25:11,646 --> 0:25:13,726
无论我们如何取消预览

598
00:25:13,766 --> 0:25:15,946
它都会漂亮地过渡到正确的起点

599
00:25:22,306 --> 0:25:24,586
很好 演示到这里

600
00:25:25,206 --> 0:25:26,106
回到幻灯片

601
00:25:26,616 --> 0:25:30,036
现在我想把它交给 Maxime 

602
00:25:30,036 --> 0:25:31,996
他会告诉你关于预览

603
00:25:31,996 --> 0:25:33,076
和缩略图扩展的一切

604
00:25:34,336 --> 0:25:35,506
&gt;&gt; 谢谢你 Raffael

605
00:25:36,186 --> 0:25:37,916
那么 如你所见

606
00:25:37,996 --> 0:25:39,486
Quick Look 使得在 App 中

607
00:25:39,486 --> 0:25:41,506
添加一个强大的预览功能变得非常容易

608
00:25:42,196 --> 0:25:43,756
但还有更多的事情可以谈

609
00:25:44,486 --> 0:25:45,556
首先 我想向你展示的是

610
00:25:45,556 --> 0:25:47,326
如何扩展 Quick Look 的预览功能

611
00:25:47,326 --> 0:25:48,826
通过为你的

612
00:25:48,896 --> 0:25:50,766
文件格式

613
00:25:50,766 --> 0:25:51,676
提供预览

614
00:25:54,006 --> 0:25:55,476
我们已经列出了

615
00:25:55,476 --> 0:25:56,636
Quick Look 在本地支持的

616
00:25:56,636 --> 0:25:57,536
文件类型

617
00:25:59,216 --> 0:26:02,936
然而 自 iOS 11 以来

618
00:25:59,216 --> 0:26:02,936
然而 自 iOS 11 以来

619
00:26:03,046 --> 0:26:04,836
这个列表可以通过

620
00:26:04,836 --> 0:26:06,646
与 iOS App 捆绑一个预览扩展来扩展

621
00:26:06,646 --> 0:26:08,886
这样作为开发者的你

622
00:26:08,886 --> 0:26:10,876
就可以为你的自定义文件格式

623
00:26:10,876 --> 0:26:12,326
提供预览

624
00:26:12,636 --> 0:26:15,666
你应该提供一个预览

625
00:26:15,666 --> 0:26:16,886
如果你使用的是自定义文件格式

626
00:26:17,166 --> 0:26:18,536
并且你想使它

627
00:26:18,536 --> 0:26:20,436
像其他原生文件类型一样通过

628
00:26:20,436 --> 0:26:22,466
Quick Look 预览

629
00:26:23,656 --> 0:26:25,146
可供共享的文件类型

630
00:26:25,146 --> 0:26:27,126
通常是用来创建扩展的

631
00:26:27,126 --> 0:26:28,656
很好选择

632
00:26:29,576 --> 0:26:31,046
特别是如果你希望

633
00:26:31,046 --> 0:26:32,886
用户在收到

634
00:26:32,936 --> 0:26:35,106
来自“邮件” “信息”

635
00:26:35,106 --> 0:26:37,516
或“备忘录”等 App 中的文件后

636
00:26:37,516 --> 0:26:38,256
轻松预览内容

637
00:26:38,766 --> 0:26:40,536
然后一切开始运转

638
00:26:40,536 --> 0:26:44,096
如果 App 使用 QLPreviewController

639
00:26:44,096 --> 0:26:45,896
且打算预览一个

640
00:26:46,196 --> 0:26:48,026
本地并不支持的文件

641
00:26:48,476 --> 0:26:50,326
那它将会从你的预览扩展中受益

642
00:26:52,606 --> 0:26:54,796
下面这个例子能告诉你

643
00:26:54,796 --> 0:26:56,916
你可以通过预览扩展获得什么

644
00:26:57,346 --> 0:26:59,876
我们已经构建了一个示例 App

645
00:26:59,876 --> 0:27:01,386
你可以从 Apple 的网站上下载

646
00:26:59,876 --> 0:27:01,386
你可以从 Apple 的网站上下载

647
00:27:01,386 --> 0:27:02,956
这个 App 允许用户

648
00:27:02,956 --> 0:27:05,316
创建定制的 Particle

649
00:27:05,316 --> 0:27:05,936
并与其进行交互

650
00:27:07,086 --> 0:27:08,406
由于我们想

651
00:27:08,406 --> 0:27:11,286
与其他用户共享我们很酷的 Particle

652
00:27:11,286 --> 0:27:13,956
我们创建了一个新的文件格式

653
00:27:13,956 --> 0:27:16,636
Particles 文件格式

654
00:27:16,636 --> 0:27:18,076
每个文件代表

655
00:27:18,076 --> 0:27:20,316
一个 Particle 系统

656
00:27:20,316 --> 0:27:22,856
并且你可以在其中配置各种火焰和星星

657
00:27:24,466 --> 0:27:26,956
现在假设

658
00:27:27,296 --> 0:27:29,146
你向你的朋友共享一个 Particles 文件

659
00:27:30,026 --> 0:27:31,656
当你在“信息”中

660
00:27:31,786 --> 0:27:33,106
或作为电子邮件附件预览它们时

661
00:27:33,106 --> 0:27:34,906
我们看到的是

662
00:27:35,206 --> 0:27:36,996
一个空白的屏幕

663
00:27:36,996 --> 0:27:40,256
那肯定不是我们想要的

664
00:27:40,416 --> 0:27:42,176
但是通过为我们的 Particles 文件格式

665
00:27:42,176 --> 0:27:43,696
执行预览扩展

666
00:27:43,696 --> 0:27:45,196
它将用一个

667
00:27:45,196 --> 0:27:47,926
漂亮的三维互动 Particle 系统

668
00:27:48,236 --> 0:27:49,976
取代空白屏幕 这多么棒啊

669
00:27:54,046 --> 0:27:55,136
我确信你现在一定希望

670
00:27:55,346 --> 0:27:56,546
了解如何为你的文件格式

671
00:27:56,546 --> 0:27:58,586
创建自己的预览扩展

672
00:28:00,276 --> 0:28:02,666
首先 你需要

673
00:28:02,666 --> 0:28:04,556
在现有的 App 项目中

674
00:28:04,556 --> 0:28:05,696
添加一个新的 Target

675
00:28:06,786 --> 0:28:10,116
为此 你必须在 Xcode 中

676
00:28:10,156 --> 0:28:13,986
选择 “Quick Look Preview Extension

677
00:28:13,986 --> 0:28:16,486
（Quick Look 预览扩展）”模板 然后

678
00:28:16,486 --> 0:28:17,956
Xcode 将为你生成几个文件

679
00:28:19,226 --> 0:28:20,936
具有一个基本实现的

680
00:28:20,936 --> 0:28:22,426
PreviewViewController 类

681
00:28:23,296 --> 0:28:25,186
这就是你要为

682
00:28:25,186 --> 0:28:26,476
预览添加代码的地方

683
00:28:27,066 --> 0:28:29,816
将 PreviewViewController

684
00:28:29,816 --> 0:28:32,216
作为其入口点的 storyboard 文件

685
00:28:32,686 --> 0:28:35,696
然后 Info.plist 是你

686
00:28:35,696 --> 0:28:37,626
需要编辑的第一样东西

687
00:28:37,626 --> 0:28:42,586
让我们仔细看一下

688
00:28:42,796 --> 0:28:45,066
首先 

689
00:28:45,066 --> 0:28:46,776
我们最感兴趣的属性

690
00:28:46,776 --> 0:28:48,836
是 QLSupportedContentTypes

691
00:28:49,706 --> 0:28:50,786
就是在屏幕快照中

692
00:28:50,816 --> 0:28:52,256
被选定的那个

693
00:28:53,706 --> 0:28:55,066
这是一个数组

694
00:28:55,066 --> 0:28:56,346
其中列出了

695
00:28:56,346 --> 0:28:57,756
你的扩展可以提供预览的

696
00:28:57,756 --> 0:28:58,136
所有文件类型

697
00:28:59,366 --> 0:29:00,946
请注意 你只能为

698
00:28:59,366 --> 0:29:00,946
请注意 你只能为

699
00:29:00,946 --> 0:29:02,716
你拥有的和导出的 UTI（统一类型标识符）

700
00:29:02,756 --> 0:29:03,996
提供预览

701
00:29:05,356 --> 0:29:07,146
当 Quick Look 不能

702
00:29:07,146 --> 0:29:09,246
预览本机的文件类型时

703
00:29:09,246 --> 0:29:10,826
它将使用添加到

704
00:29:10,826 --> 0:29:13,986
这个数组中的内容类型

705
00:29:13,986 --> 0:29:15,306
并选择一个

706
00:29:15,506 --> 0:29:16,106
可以处理这个预览的扩展

707
00:29:16,906 --> 0:29:18,246
所以一定要列出

708
00:29:18,246 --> 0:29:19,946
你的扩展支持的所有文件类型

709
00:29:21,056 --> 0:29:22,526
让我们看看我们的《Particles》App

710
00:29:22,746 --> 0:29:24,176
是如何实现这一点的

711
00:29:24,426 --> 0:29:29,576
如你所看到的

712
00:29:29,576 --> 0:29:30,896
Particles 声明并导出一个

713
00:29:31,276 --> 0:29:32,176
新的 Particles 文件类型

714
00:29:32,326 --> 0:29:34,806
它的标识符是

715
00:29:35,486 --> 0:29:37,986
com.example.apple-samplecode.

716
00:29:37,986 --> 0:29:39,996
Particles.Particles

717
00:29:41,296 --> 0:29:43,006
由于我们希望扩展

718
00:29:43,006 --> 0:29:45,196
以支持预览 Particles 文件

719
00:29:45,196 --> 0:29:47,016
所以我们将这个标识符添加到

720
00:29:47,016 --> 0:29:48,836
Info.plist 的

721
00:29:48,836 --> 0:29:49,566
QLSupportedContentTypes 中

722
00:29:50,256 --> 0:29:52,196
顺便说一下

723
00:29:52,196 --> 0:29:54,756
如果你对 UTI 感兴趣

724
00:29:54,756 --> 0:29:56,646
你应该看看今年的

725
00:29:56,646 --> 0:29:56,956
“Document Manage（文稿管理）”讨论会

726
00:30:00,376 --> 0:30:01,696
当需要为文件类型扩展

727
00:30:01,696 --> 0:30:03,066
生成一个新的预览时

728
00:30:03,066 --> 0:30:06,156
Quick Look 将创建一个新的

729
00:30:06,156 --> 0:30:07,986
PreviewViewController 实例

730
00:30:08,456 --> 0:30:09,026
并在 preparePreviewOfFile(

731
00:30:09,086 --> 0:30:10,636
at url: completionHandler handler:)

732
00:30:10,636 --> 0:30:12,056
方法中调用它

733
00:30:14,976 --> 0:30:16,716
该方法是

734
00:30:16,716 --> 0:30:18,876
QLPreviewingController 协议的一部分

735
00:30:19,216 --> 0:30:20,826
必须为文件

736
00:30:20,826 --> 0:30:22,296
提供预览

737
00:30:23,156 --> 0:30:25,296
Quick Look 将显示并加载

738
00:30:25,336 --> 0:30:26,116
同时等待

739
00:30:26,116 --> 0:30:27,486
你的扩展准备好

740
00:30:27,486 --> 0:30:28,266
显示预览

741
00:30:28,756 --> 0:30:31,026
你所要做的

742
00:30:31,026 --> 0:30:32,116
就是加载预览的内容

743
00:30:32,116 --> 0:30:34,276
并在扩展完成后

744
00:30:34,276 --> 0:30:36,196
立即调用

745
00:30:36,196 --> 0:30:38,886
completionHandler

746
00:30:39,026 --> 0:30:40,216
好的

747
00:30:40,216 --> 0:30:42,676
这就是预览扩展

748
00:30:42,676 --> 0:30:43,216
让我们更进一步

749
00:30:44,016 --> 0:30:46,046
与预览类似

750
00:30:46,046 --> 0:30:47,266
你也可以为自己文件格式的文件

751
00:30:47,266 --> 0:30:48,926
提供缩略图

752
00:30:49,316 --> 0:30:51,506
让我们来谈谈

753
00:30:51,506 --> 0:30:52,356
Quick Look 缩略图扩展

754
00:30:52,916 --> 0:30:56,776
缩略图是表示

755
00:30:56,776 --> 0:30:58,806
文件内容的

756
00:30:58,806 --> 0:31:00,806
有限大小的图像

757
00:30:58,806 --> 0:31:00,806
有限大小的图像

758
00:31:01,116 --> 0:31:03,206
整个 iOS 和 macOS

759
00:31:03,206 --> 0:31:05,856
都允许用户

760
00:31:05,856 --> 0:31:08,216
辨别文件

761
00:31:08,216 --> 0:31:09,876
而不需要打开文件

762
00:31:11,366 --> 0:31:12,796
例如 你可以在这个屏幕快照中看到

763
00:31:12,796 --> 0:31:15,016
iOS 是如何在“文件” App 中

764
00:31:15,016 --> 0:31:17,706
使用它们的

765
00:31:17,706 --> 0:31:19,326
iOS 可以为不同的文件类型

766
00:31:19,326 --> 0:31:21,356
图像 视频 PDF

767
00:31:21,356 --> 0:31:24,426
文本文件和 USDZ 文件

768
00:31:24,426 --> 0:31:25,266
生成缩略图

769
00:31:26,126 --> 0:31:28,276
现在你可能已经注意到了

770
00:31:28,276 --> 0:31:29,966
左边的空白图标

771
00:31:31,186 --> 0:31:32,816
这是因为这些是 Particles 文件

772
00:31:32,956 --> 0:31:35,726
iOS 不知道

773
00:31:35,726 --> 0:31:37,346
如何为这个文件

774
00:31:37,346 --> 0:31:38,466
生成缩略图

775
00:31:38,796 --> 0:31:41,786
但是不用担心

776
00:31:41,786 --> 0:31:43,756
我们将向你展示

777
00:31:43,756 --> 0:31:45,376
如何创建一个缩略图扩展

778
00:31:45,376 --> 0:31:46,746
你可以使用它

779
00:31:46,746 --> 0:31:47,986
轻松地为你的自定义文件类型

780
00:31:47,986 --> 0:31:48,296
改进这种情况

781
00:31:49,296 --> 0:31:50,996
看看这些 Particles 文件的

782
00:31:50,996 --> 0:31:52,516
缩略图看起来有多棒

783
00:31:52,516 --> 0:31:54,346
多亏了我们在 App 中

784
00:31:54,346 --> 0:31:55,976
添加的缩略图扩展

785
00:32:01,166 --> 0:32:02,426
这个扩展提供的缩略图

786
00:32:02,426 --> 0:32:04,906
出现在“文件” App 中

787
00:32:04,906 --> 0:32:06,416
以及任何

788
00:32:06,416 --> 0:32:07,616
基于 UIDocumentBrowswerViewController

789
00:32:07,616 --> 0:32:09,526
的 App 中

790
00:32:10,576 --> 0:32:12,256
它们也会出现在

791
00:32:12,256 --> 0:32:14,076
Quick Look 列表中

792
00:32:14,076 --> 0:32:15,746
在 Quick Look 中预览多个文件时

793
00:32:15,746 --> 0:32:17,546
你可以在点击列表按钮时看到它们

794
00:32:17,546 --> 0:32:20,166
如果你有

795
00:32:20,166 --> 0:32:22,136
用户可以共享并与之交互的

796
00:32:22,136 --> 0:32:24,276
自定义文件类型

797
00:32:24,276 --> 0:32:25,396
那么你可能想要为你的 App

798
00:32:25,396 --> 0:32:26,416
提供一个这样的扩展

799
00:32:27,166 --> 0:32:28,786
现在让我们看看如何做到这一点

800
00:32:31,796 --> 0:32:33,436
创建缩略图扩展

801
00:32:33,466 --> 0:32:35,466
就像创建预览扩展一样

802
00:32:36,856 --> 0:32:39,626
为此 在现有的 App 项目中

803
00:32:39,626 --> 0:32:40,936
添加一个新的 Target

804
00:32:40,936 --> 0:32:42,536
并选择

805
00:32:42,536 --> 0:32:43,986
“Thumbnail Extension（缩略图扩展）”模板

806
00:32:46,326 --> 0:32:48,226
Xcode 将为你生成两个文件

807
00:32:48,226 --> 0:32:50,126
一个是具有

808
00:32:50,126 --> 0:32:51,316
基本实现的

809
00:32:51,316 --> 0:32:52,046
ThumbnailProvider 类

810
00:32:53,326 --> 0:32:56,296
在这里 你要添加

811
00:32:56,296 --> 0:33:00,596
负责生成缩略图的代码 Info.plist

812
00:32:56,296 --> 0:33:00,596
负责生成缩略图的代码 Info.plist

813
00:33:00,596 --> 0:33:01,806
像在预览扩展中一样

814
00:33:02,356 --> 0:33:03,856
是你创建扩展后

815
00:33:03,856 --> 0:33:05,796
你要编辑的第一件东西

816
00:33:10,046 --> 0:33:11,296
与预览扩展的

817
00:33:11,296 --> 0:33:12,926
Info.plist 一样

818
00:33:12,926 --> 0:33:14,096
缩略图扩展的

819
00:33:14,096 --> 0:33:15,406
Info.plist 也有一个

820
00:33:15,406 --> 0:33:17,326
QLSupportedContentTypes 数组

821
00:33:17,936 --> 0:33:20,766
需要用扩展支持的

822
00:33:20,856 --> 0:33:23,096
内容类型填充

823
00:33:24,096 --> 0:33:26,866
因此 请确保

824
00:33:26,866 --> 0:33:29,086
在 QLSupportedContentTypes 中

825
00:33:29,086 --> 0:33:30,756
包含你的扩展可以生成

826
00:33:30,756 --> 0:33:32,626
缩略图的所有内容类型

827
00:33:33,766 --> 0:33:35,646
在设置扩展之后

828
00:33:35,836 --> 0:33:37,466
你将能够开始

829
00:33:37,466 --> 0:33:40,206
实现 QLThumbnailProvider 子类

830
00:33:40,596 --> 0:33:42,506
有两种方法

831
00:33:42,506 --> 0:33:44,976
可以为文件提供缩略图

832
00:33:45,116 --> 0:33:49,336
你可以使用这些来绘制 CoreGraphics 

833
00:33:49,336 --> 0:33:52,266
UIKit 绘制技术

834
00:33:52,266 --> 0:33:54,286
或者你可以返回图像文件 URL

835
00:33:55,536 --> 0:33:59,296
你必须在

836
00:33:59,296 --> 0:34:00,866
QLThumbnailProvider 子类中

837
00:33:59,296 --> 0:34:00,866
QLThumbnailProvider 子类中

838
00:34:00,866 --> 0:34:02,316
重写 provideThumbnail(for request:

839
00:34:02,536 --> 0:34:04,326
_ handler: )方法

840
00:34:05,546 --> 0:34:07,816
我们在 2017 年的 WWDC 中的

841
00:34:07,816 --> 0:34:09,795
“在 iOS 11 中打造优秀的基于文稿的 App”

842
00:34:09,826 --> 0:34:14,376
讨论会中 对 Quick Look API 中的

843
00:34:14,376 --> 0:34:16,556
这一部分进行了广泛的讨论

844
00:34:17,076 --> 0:34:18,166
如果你想

845
00:34:18,166 --> 0:34:19,485
为你的自定义文件类型

846
00:34:19,485 --> 0:34:21,966
提供缩略图

847
00:34:21,966 --> 0:34:23,666
我强烈建议你去看看

848
00:34:23,936 --> 0:34:25,485
简而言之

849
00:34:25,485 --> 0:34:26,936
你将需要利用

850
00:34:26,936 --> 0:34:28,166
在 QLFileThumbnailRequest 方法中

851
00:34:28,275 --> 0:34:30,286
包含的参数

852
00:34:31,856 --> 0:34:34,126
文件的 URL 

853
00:34:34,126 --> 0:34:35,176
缩略图的最大和最小尺寸

854
00:34:35,176 --> 0:34:37,295
以及它的大小

855
00:34:39,596 --> 0:34:41,565
对于每个缩略图请求

856
00:34:41,565 --> 0:34:43,646
API 期望你创建一个

857
00:34:43,646 --> 0:34:45,315
QLThumbnailReply 对象

858
00:34:45,916 --> 0:34:48,025
这个对象必须

859
00:34:48,025 --> 0:34:49,886
负责生成缩略图

860
00:34:50,826 --> 0:34:51,886
你需要通过该方法的

861
00:34:51,886 --> 0:34:53,116
完成处理程序

862
00:34:53,116 --> 0:34:57,636
把它提供给 Quick Look

863
00:34:57,766 --> 0:34:59,166
好吧 让我们来具体看看

864
00:34:59,166 --> 0:35:00,306
现在是演示时间

865
00:34:59,166 --> 0:35:00,306
现在是演示时间

866
00:35:00,806 --> 0:35:03,956
让我们先来看看

867
00:35:04,096 --> 0:35:05,556
安装了《Particles》App 后

868
00:35:05,556 --> 0:35:08,566
没有任何 Quick Look 扩展的情况

869
00:35:09,556 --> 0:35:11,466
好吧 我们还没有任何文件

870
00:35:11,466 --> 0:35:13,686
让我们按一下 “+” 按钮

871
00:35:13,686 --> 0:35:15,056
创建一个新的文件

872
00:35:17,116 --> 0:35:18,686
你在这里看到的是

873
00:35:18,686 --> 0:35:19,686
Particle 编辑器

874
00:35:20,126 --> 0:35:21,786
让我们创建一个火焰 Particle 系统

875
00:35:21,786 --> 0:35:23,946
我们稍微改变一下颜色

876
00:35:23,946 --> 0:35:25,426
然后保存文稿

877
00:35:27,096 --> 0:35:30,336
那么你可以看到

878
00:35:30,336 --> 0:35:31,716
我们并看不到我们刚刚设计的

879
00:35:31,716 --> 0:35:33,046
美丽的 Particle 系统

880
00:35:33,406 --> 0:35:35,716
我们可以通过

881
00:35:35,716 --> 0:35:37,716
在我们的 App 中添加一个缩略图扩展来修复

882
00:35:38,476 --> 0:35:41,966
现在 让我们将文件保存到“备忘录”

883
00:35:41,966 --> 0:35:46,916
并查看 Quick Look 中的预览效果

884
00:35:47,076 --> 0:35:50,056
好的 我们打开文件格式

885
00:35:52,316 --> 0:35:54,746
我们看到的只是一个空白的屏幕

886
00:35:54,746 --> 0:35:56,626
我们可以做得更好 我们也改进一下这个

887
00:35:57,556 --> 0:35:59,066
让我们切换到 Xcode 

888
00:35:59,066 --> 0:36:00,706
并实行预览

889
00:35:59,066 --> 0:36:00,706
并实行预览

890
00:36:00,706 --> 0:36:01,606
和缩略图扩展

891
00:36:02,826 --> 0:36:04,526
我们已经有一个

892
00:36:04,526 --> 0:36:06,926
包含扩展设置的现有项目

893
00:36:07,956 --> 0:36:09,516
我们将使用这些作为起点

894
00:36:09,516 --> 0:36:11,736
并添加这两个扩展

895
00:36:12,556 --> 0:36:14,266
如前所述

896
00:36:14,266 --> 0:36:16,326
我们需要配置扩展的 Info.plist

897
00:36:16,326 --> 0:36:17,936
以便系统知道

898
00:36:17,936 --> 0:36:19,436
我们能够为 Particles 文件

899
00:36:19,436 --> 0:36:21,196
提供预览

900
00:36:21,196 --> 0:36:22,316
和缩略图

901
00:36:23,476 --> 0:36:25,786
所以《Particles》App 

902
00:36:25,786 --> 0:36:28,236
在 App 的 Target 中的

903
00:36:28,236 --> 0:36:30,076
“Exported UTIs” 部分定义自己的文件格式

904
00:36:30,936 --> 0:36:32,246
我们需要配置扩展

905
00:36:32,246 --> 0:36:35,156
以在 Info.plist 中使用该 UTI

906
00:36:35,336 --> 0:36:38,676
正如你所看到的 

907
00:36:38,676 --> 0:36:40,186
预览扩展的 Info.plist 的

908
00:36:40,186 --> 0:36:41,376
QLSupportedContentTypes 

909
00:36:41,376 --> 0:36:43,346
确实包含

910
00:36:43,346 --> 0:36:44,756
Particles 文件格式的 

911
00:36:44,756 --> 0:36:45,746
UTI 的标识符

912
00:36:46,226 --> 0:36:49,606
缩略图扩展的

913
00:36:49,606 --> 0:36:50,886
Info.plist 的情况

914
00:36:50,886 --> 0:36:51,446
也是这样

915
00:36:51,966 --> 0:36:54,256
所以唯一剩下要做的

916
00:36:54,526 --> 0:36:56,226
就是执行这些扩展

917
00:36:56,766 --> 0:36:58,226
让我们从预览扩展开始

918
00:36:59,276 --> 0:37:02,296
正如演讲中提到的

919
00:36:59,276 --> 0:37:02,296
正如演讲中提到的

920
00:37:02,626 --> 0:37:03,796
我们需要执行这个方法

921
00:37:03,796 --> 0:37:05,976
preparePreviewOfFile(at url: 

922
00:37:05,976 --> 0:37:07,166
completionHandler handler: )

923
00:37:07,536 --> 0:37:10,506
我们的主要 App

924
00:37:10,506 --> 0:37:12,316
《Particles》已经有一个视图控制器类

925
00:37:12,626 --> 0:37:13,686
它会在屏幕上

926
00:37:13,686 --> 0:37:14,526
变成 Particles 系统

927
00:37:15,546 --> 0:37:16,866
我们将在我们的扩展中

928
00:37:16,866 --> 0:37:18,346
减少重复的控制器

929
00:37:19,406 --> 0:37:21,126
我们将创建一个 helper 方法

930
00:37:21,126 --> 0:37:22,716
它将负责

931
00:37:22,716 --> 0:37:24,176
加载这样的视图控制器

932
00:37:24,366 --> 0:37:26,316
并将其添加到视图层级结构中

933
00:37:28,046 --> 0:37:30,726
正如你看到的

934
00:37:30,726 --> 0:37:32,156
现在一个文稿的 particleViewController

935
00:37:32,156 --> 0:37:33,656
只是创建一个

936
00:37:33,656 --> 0:37:35,526
particleViewController

937
00:37:35,526 --> 0:37:37,146
并将它传递给

938
00:37:37,146 --> 0:37:38,426
它接收到的文稿

939
00:37:38,426 --> 0:37:39,806
这样 particleViewController

940
00:37:39,806 --> 0:37:41,566
就可以呈现

941
00:37:41,566 --> 0:37:42,586
文稿所代表的 Particles

942
00:37:44,126 --> 0:37:45,426
我们仍然需要

943
00:37:45,426 --> 0:37:46,896
从 preparePreviewOfFile() 中调用这个方法

944
00:37:46,896 --> 0:37:50,286
那么我们就这么做吧

945
00:37:51,336 --> 0:37:54,136
我们首先创建一个文稿

946
00:37:54,136 --> 0:37:56,096
它是 UIDocument 的子类

947
00:37:57,136 --> 0:37:59,876
我们打开它

948
00:37:59,876 --> 0:38:01,846
一旦它打开我们就可调用

949
00:37:59,876 --> 0:38:01,846
一旦它打开我们就可调用

950
00:38:01,846 --> 0:38:03,496
我们的 helper 方法

951
00:38:03,496 --> 0:38:04,566
它会取代一个 particleViewController

952
00:38:05,696 --> 0:38:08,206
最后 我们不要忘记

953
00:38:08,206 --> 0:38:09,606
关闭完成处理程序

954
00:38:09,606 --> 0:38:11,796
以通知 Quick Look 

955
00:38:11,796 --> 0:38:13,186
我们的视图控制器已经加载

956
00:38:13,186 --> 0:38:13,976
并准备在屏幕上显示

957
00:38:15,306 --> 0:38:17,606
我们的预览扩展现在已经准备好了

958
00:38:18,376 --> 0:38:19,986
让我们现在实现缩略图扩展

959
00:38:21,586 --> 0:38:24,466
这里我们要做的

960
00:38:24,466 --> 0:38:26,086
就是执行 provideThumbnail(for request:

961
00:38:26,086 --> 0:38:27,456
_ handler: ) 方法

962
00:38:28,776 --> 0:38:30,546
因此 request 提供了

963
00:38:30,546 --> 0:38:32,016
在呈现缩略图时

964
00:38:32,016 --> 0:38:33,686
需要考虑的几个属性

965
00:38:35,886 --> 0:38:37,696
在本例中

966
00:38:37,696 --> 0:38:39,886
我们将使用文件 URL

967
00:38:39,886 --> 0:38:40,726
作为缩略图的最大尺寸

968
00:38:41,966 --> 0:38:43,926
注意这里也有缩放

969
00:38:43,926 --> 0:38:45,826
和最小尺寸的性质

970
00:38:45,926 --> 0:38:47,056
但是在我们的 Particle 系统中

971
00:38:47,056 --> 0:38:48,316
我们不使用它们

972
00:38:49,716 --> 0:38:51,496
然后我们创建一个绘制代码块

973
00:38:51,826 --> 0:38:54,676
稍后我们将提供完成块

974
00:38:56,596 --> 0:38:58,836
在本例中

975
00:38:58,836 --> 0:39:00,476
我们调用 helper 方法

976
00:38:58,836 --> 0:39:00,476
我们调用 helper 方法

977
00:39:00,476 --> 0:39:01,246
它负责绘制缩略图

978
00:39:02,056 --> 0:39:03,606
drawThumbnail(for: fileURL

979
00:39:04,126 --> 0:39:04,866
contextSize: )

980
00:39:05,336 --> 0:39:06,676
我们马上要执行

981
00:39:06,676 --> 0:39:08,136
这个 helper 方法

982
00:39:08,706 --> 0:39:10,296
你可能已经注意到

983
00:39:10,296 --> 0:39:11,716
我们的绘图块返回一个布尔值

984
00:39:12,576 --> 0:39:13,926
该标志指示

985
00:39:13,926 --> 0:39:15,196
是否已成功绘制了缩略图

986
00:39:15,196 --> 0:39:17,266
如果这个代码块

987
00:39:17,266 --> 0:39:18,376
被用来生成缩略图

988
00:39:19,396 --> 0:39:21,376
现在我们来看看

989
00:39:21,376 --> 0:39:22,236
如何画出 Particles 缩略图

990
00:39:24,316 --> 0:39:26,746
为了绘制缩略图

991
00:39:26,746 --> 0:39:29,316
我们使用文件的 URL 

992
00:39:29,316 --> 0:39:31,276
以及绘制环境的大小

993
00:39:32,196 --> 0:39:33,856
在这种情况下

994
00:39:33,856 --> 0:39:35,256
我们都知道缩略图要求的最大尺寸

995
00:39:35,256 --> 0:39:37,116
因为我们可以生成

996
00:39:37,116 --> 0:39:38,526
任意大小的 Particles 缩略图

997
00:39:39,376 --> 0:39:41,756
我们的方法是首先

998
00:39:41,756 --> 0:39:43,426
创建一个表示文件的文稿

999
00:39:43,426 --> 0:39:45,776
并尝试打开它

1000
00:39:46,226 --> 0:39:48,296
如果失败 则返回假

1001
00:39:48,336 --> 0:39:50,276
表示无法生成缩略图

1002
00:39:50,906 --> 0:39:54,066
打开文件之后

1003
00:39:54,186 --> 0:39:56,036
它会创建一个 particleViewController

1004
00:39:56,626 --> 0:39:57,576
用于呈现

1005
00:39:57,576 --> 0:39:57,966
Particles 文件

1006
00:39:59,506 --> 0:40:01,136
然后它获取一个 particleViewController

1007
00:39:59,506 --> 0:40:01,136
然后它获取一个 particleViewController

1008
00:40:01,136 --> 0:40:02,666
的快照

1009
00:40:02,666 --> 0:40:05,466
并使用它来绘制缩略图

1010
00:40:05,506 --> 0:40:06,766
我们在返回真之前

1011
00:40:06,766 --> 0:40:08,196
关闭文稿

1012
00:40:08,196 --> 0:40:09,886
表明我们成功地生成了一个缩略图

1013
00:40:11,766 --> 0:40:13,116
现在我们已经

1014
00:40:13,116 --> 0:40:15,736
生成了缩略图

1015
00:40:15,736 --> 0:40:16,736
我们需要创建我们的 QLThumbnailReply

1016
00:40:17,296 --> 0:40:20,476
我们根据环境大小创建

1017
00:40:20,476 --> 0:40:23,076
在本例中

1018
00:40:23,076 --> 0:40:25,486
是最大尺寸和绘制代码块

1019
00:40:27,516 --> 0:40:29,886
我们还有我们通过

1020
00:40:29,886 --> 0:40:32,346
完成处理程序中的参数

1021
00:40:32,346 --> 0:40:33,356
提供的 reply 对象

1022
00:40:33,936 --> 0:40:35,806
在这个例子中是 “nil”

1023
00:40:35,806 --> 0:40:36,946
因为我们总是添加它们

1024
00:40:36,946 --> 0:40:38,566
来为 Particles 文件

1025
00:40:39,676 --> 0:40:40,956
绘制缩略图

1026
00:40:40,956 --> 0:40:41,926
如果在绘制时它们中的任何一个显示出来

1027
00:40:42,386 --> 0:40:43,486
缩略图块的成功值

1028
00:40:43,486 --> 0:40:45,486
将会支持出来

1029
00:40:45,486 --> 0:40:47,736
所以缩略图可在之后被舍弃

1030
00:40:48,266 --> 0:40:49,796
我们最终都设置好了

1031
00:40:49,796 --> 0:40:51,326
让我们运行这段代码看看 它是怎样的

1032
00:40:52,406 --> 0:40:54,726
哇 现在我们看到了一个

1033
00:40:54,726 --> 0:40:56,926
漂亮的火粒子的文件缩略图

1034
00:40:57,446 --> 0:40:59,386
这比之前看起来好太多了

1035
00:41:00,426 --> 0:41:03,296
现在我们来检测一下我们的预览扩展

1036
00:41:04,966 --> 0:41:07,076
好的 所以我们在“备忘录”里

1037
00:41:07,076 --> 0:41:08,126
Quick Look 仍然显示着

1038
00:41:08,126 --> 0:41:09,726
和之前我们尝试预览文件的时候

1039
00:41:09,726 --> 0:41:11,006
一样的空白屏

1040
00:41:11,676 --> 0:41:13,016
让我们取消 Quick Look 

1041
00:41:13,016 --> 0:41:13,706
然后再次显示它

1042
00:41:16,186 --> 0:41:18,556
现在我们能看见

1043
00:41:18,556 --> 0:41:20,796
漂亮的粒子预览

1044
00:41:20,796 --> 0:41:25,186
将我们的自定义文件格式 在 iOS 中是如此的简单

1045
00:41:25,186 --> 0:41:26,556
今天的展示就到这里

1046
00:41:27,086 --> 0:41:29,116
所以 我们今天学习到了什么

1047
00:41:29,806 --> 0:41:32,176
首先 我们已经向你展示了

1048
00:41:32,326 --> 0:41:33,956
通过使用 Quick Look 的

1049
00:41:33,956 --> 0:41:35,696
QLPreviewController

1050
00:41:35,696 --> 0:41:37,306
向 App 添加

1051
00:41:37,306 --> 0:41:39,276
强大的预览功能是多么容易

1052
00:41:40,276 --> 0:41:42,926
之后我们了解了

1053
00:41:42,926 --> 0:41:44,316
Quick Look 的扩展点

1054
00:41:45,196 --> 0:41:47,236
预览扩展允许你

1055
00:41:47,236 --> 0:41:48,876
让你的自定义文件

1056
00:41:48,876 --> 0:41:50,306
像任何本地文件类型一样

1057
00:41:50,306 --> 0:41:51,386
通过 Quick Look 得以预览

1058
00:41:52,396 --> 0:41:54,326
而缩略图扩展

1059
00:41:54,326 --> 0:41:56,136
用于在需要时

1060
00:41:56,176 --> 0:41:57,976
向 iOS 提供你的

1061
00:41:57,976 --> 0:41:58,276
文件类型的缩略图

1062
00:41:59,086 --> 0:42:01,526
这些扩展一起协作

1063
00:41:59,086 --> 0:42:01,526
这些扩展一起协作

1064
00:42:01,526 --> 0:42:02,826
使你的文件格式

1065
00:42:02,826 --> 0:42:06,216
成为 iOS 中的会员

1066
00:42:06,356 --> 0:42:08,036
那么 这就是这场 Quick Look 

1067
00:42:08,036 --> 0:42:08,576
讨论会的全部内容了

1068
00:42:09,186 --> 0:42:10,286
如果你想得到更多信息

1069
00:42:10,286 --> 0:42:12,346
你可以登陆

1070
00:42:12,346 --> 0:42:13,246
Apple 的网站

1071
00:42:13,646 --> 0:42:14,976
感谢大家的关注
