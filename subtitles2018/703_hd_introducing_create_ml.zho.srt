1
00:00:06,516 --> 0:00:14,500
［ 音乐 ］

2
00:00:20,516 --> 0:00:29,046
［ 掌声 ］

3
00:00:29,546 --> 0:00:31,956
&gt;&gt; 大家好 非常欢迎

4
00:00:32,436 --> 0:00:33,796
我是 Gaurav

5
00:00:33,796 --> 0:00:34,936
今天要向大家介绍的主题是

6
00:00:34,936 --> 0:00:36,436
机器学习

7
00:00:37,096 --> 0:00:40,146
去年我们发布了 Core ML

8
00:00:40,146 --> 0:00:41,986
从各位开发人员处

9
00:00:41,986 --> 0:00:44,906
得到的反馈

10
00:00:44,906 --> 0:00:45,766
非同凡响

11
00:00:46,566 --> 0:00:48,456
你们开发的 App

12
00:00:48,606 --> 0:00:50,436
令人惊叹

13
00:00:50,436 --> 0:00:53,596
效果也非常出众

14
00:00:53,596 --> 0:00:54,086
所以 首先让我对大家表示感谢

15
00:00:54,676 --> 0:00:56,186
谢谢你们信任 Core ML

16
00:00:56,666 --> 0:00:58,376
我们非常高兴看到

17
00:00:58,376 --> 0:01:01,396
这么多开发人员

18
00:00:58,376 --> 0:01:01,396
这么多开发人员

19
00:01:01,396 --> 0:01:03,306
使用 Core ML

20
00:01:03,306 --> 0:01:03,596
并给用户带来智能体验

21
00:01:04,406 --> 0:01:05,556
因为我们是共进退的

22
00:01:05,876 --> 0:01:06,226
感谢大家

23
00:01:07,041 --> 0:01:09,041
［ 掌声 ］

24
00:01:09,066 --> 0:01:12,376
这是给所有开发人员的掌声

25
00:01:13,236 --> 0:01:16,506
好 如果你还有印象

26
00:01:16,506 --> 0:01:18,026
Core ML 让你可以轻松

27
00:01:18,026 --> 0:01:19,526
将机器学习模型

28
00:01:19,526 --> 0:01:19,856
应用于你的 App 中

29
00:01:21,336 --> 0:01:22,586
整个过程非常简单

30
00:01:23,006 --> 0:01:25,066
找到一个机器学习模型

31
00:01:25,066 --> 0:01:27,746
拖拽到 Xcode 中

32
00:01:27,816 --> 0:01:29,806
然后仅添加三行代码

33
00:01:30,366 --> 0:01:32,776
你就可以实时运行

34
00:01:32,776 --> 0:01:34,206
最先进的机器学习模型

35
00:01:34,206 --> 0:01:36,376
以及其中几百万个参数

36
00:01:36,436 --> 0:01:36,716
和几十亿次计算

37
00:01:36,916 --> 0:01:37,736
真是令人惊叹

38
00:01:39,076 --> 0:01:40,856
你的用户可以

39
00:01:40,916 --> 0:01:42,606
实时体验机器学习

40
00:01:42,606 --> 0:01:44,576
同时他们的隐私

41
00:01:44,576 --> 0:01:44,806
也受到保护

42
00:01:46,066 --> 0:01:47,466
你只需要将模型

43
00:01:47,466 --> 0:01:49,766
拖拽进 Xcode

44
00:01:50,126 --> 0:01:51,546
剩下的就看

45
00:01:51,546 --> 0:01:51,756
Core ML 了

46
00:01:51,856 --> 0:01:55,986
那么问题来了

47
00:01:55,986 --> 0:01:57,776
这些机器学习模型

48
00:01:58,626 --> 0:01:58,746
从哪儿来呢

49
00:01:59,936 --> 0:02:01,726
去年 我们给大家提供了

50
00:01:59,936 --> 0:02:01,726
去年 我们给大家提供了

51
00:02:01,726 --> 0:02:02,486
两个选择

52
00:02:03,116 --> 0:02:05,086
第一个是

53
00:02:05,086 --> 0:02:06,896
你可以从我们网站上

54
00:02:06,896 --> 0:02:09,416
下载机器学习模型

55
00:02:10,166 --> 0:02:13,146
但更重要的是

56
00:02:13,146 --> 0:02:15,326
我们还发布了 Core ML 工具

57
00:02:15,896 --> 0:02:18,086
有了 Core ML 工具

58
00:02:18,316 --> 0:02:19,486
你们就可以使用

59
00:02:19,576 --> 0:02:22,496
了不起的 ML 社区创作作品了

60
00:02:23,776 --> 0:02:25,986
方法也很简单

61
00:02:26,446 --> 0:02:27,316
选择你最想要的学习资料库

62
00:02:27,316 --> 0:02:29,226
在该资料库中

63
00:02:29,226 --> 0:02:31,326
训练你的模型

64
00:02:31,526 --> 0:02:33,426
将模型导入 Core ML

65
00:02:33,426 --> 0:02:35,776
然后再嵌入

66
00:02:35,776 --> 0:02:36,426
你的 App 即可

67
00:02:36,426 --> 0:02:40,256
我们发布 Core ML 的时候

68
00:02:40,256 --> 0:02:42,346
Core ML 只支持

69
00:02:42,406 --> 0:02:43,656
五个或六个

70
00:02:43,656 --> 0:02:47,726
训练资料库

71
00:02:47,726 --> 0:02:48,996
但是一年以内

72
00:02:48,996 --> 0:02:52,026
我们就支持了

73
00:02:52,026 --> 0:02:52,976
所有热门的资料库

74
00:02:53,966 --> 0:02:55,586
我们现在还在改良工具

75
00:02:55,586 --> 0:02:56,756
让你们有更大

76
00:02:56,756 --> 0:02:57,826
自定义的空间

77
00:02:58,266 --> 0:02:59,436
明天的会上

78
00:02:59,436 --> 0:03:01,846
我们会给大家更详细介绍

79
00:02:59,436 --> 0:03:01,846
我们会给大家更详细介绍

80
00:03:01,846 --> 0:03:02,786
Core ML 工具

81
00:03:03,246 --> 0:03:07,586
2017 年年底

82
00:03:07,586 --> 0:03:10,686
我们发布了 Turi Create 这是我们的

83
00:03:10,686 --> 0:03:11,816
开源机器学习数据集

84
00:03:11,926 --> 0:03:13,706
明天的会议上我们也会

85
00:03:13,706 --> 0:03:15,556
介绍 Turi Create

86
00:03:16,086 --> 0:03:18,666
今年 我们想给大家

87
00:03:18,666 --> 0:03:19,636
带来一些新的东西

88
00:03:20,046 --> 0:03:22,186
希望能继续我们的征途

89
00:03:22,876 --> 0:03:24,226
给大家带来一些原生的

90
00:03:24,226 --> 0:03:27,126
既灵活又基于 Swift 的东西

91
00:03:28,056 --> 0:03:29,276
对 Xcode 的功能

92
00:03:29,276 --> 0:03:32,216
好好加以利用

93
00:03:32,216 --> 0:03:33,726
将关注点放在你们身上

94
00:03:33,726 --> 0:03:35,916
开发人员身上

95
00:03:35,916 --> 0:03:37,566
让机器学习变得简单明了

96
00:03:38,306 --> 0:03:40,956
这就是我们发布 Create ML 的原因

97
00:03:41,516 --> 0:03:47,636
［ 掌声 ］

98
00:03:48,136 --> 0:03:50,026
下面说说我们基于 Swift 的

99
00:03:50,716 --> 0:03:52,016
机器学习框架

100
00:03:52,226 --> 0:03:55,096
Create ML 让机器学习的

101
00:03:55,096 --> 0:03:56,616
组成部分变得完整

102
00:03:57,616 --> 0:03:59,836
你可以在 Create ML 中

103
00:03:59,836 --> 0:04:01,946
创建一个模型

104
00:03:59,836 --> 0:04:01,946
创建一个模型

105
00:04:01,996 --> 0:04:02,216
然后在 Core ML 中运行该模型

106
00:04:02,796 --> 0:04:04,496
这样你就可以用我们最喜欢的

107
00:04:04,496 --> 0:04:06,956
编程语言 Swift

108
00:04:06,956 --> 0:04:07,776
从头到脚进行机器学习开发

109
00:04:08,346 --> 0:04:09,366
无需面对开发过程中

110
00:04:09,366 --> 0:04:10,606
需要用到多种语言的情况

111
00:04:10,606 --> 0:04:12,166
例如 你用一种语言训练模型

112
00:04:12,166 --> 0:04:13,386
而又在另一种语言中

113
00:04:13,386 --> 0:04:14,446
运行模型

114
00:04:16,296 --> 0:04:19,736
Create ML

115
00:04:19,736 --> 0:04:20,565
既简单又强大

116
00:04:20,565 --> 0:04:21,966
为各位的 App 量身打造

117
00:04:22,546 --> 0:04:23,996
Create ML 运用了

118
00:04:23,996 --> 0:04:27,146
Apple 核心技术

119
00:04:27,146 --> 0:04:29,566
在你的 Mac 上就能使用

120
00:04:31,156 --> 0:04:32,876
今年 目前为止

121
00:04:32,876 --> 0:04:34,336
我们的重点是

122
00:04:34,336 --> 0:04:35,036
三个非常重要的用例

123
00:04:35,416 --> 0:04:38,696
第一个是图像

124
00:04:38,696 --> 0:04:40,946
第二个是文本

125
00:04:41,096 --> 0:04:41,646
第三个是表格数据

126
00:04:42,886 --> 0:04:45,226
我们认为这三个用例

127
00:04:45,226 --> 0:04:47,346
对大家是最有用的

128
00:04:47,606 --> 0:04:50,946
你可以自定义

129
00:04:50,946 --> 0:04:52,206
图像分类器

130
00:04:52,676 --> 0:04:54,426
这需要你自己创建

131
00:04:54,426 --> 0:04:55,696
图像分类器

132
00:04:55,696 --> 0:04:57,606
对你产品列表中的产品

133
00:04:57,636 --> 0:04:58,316
完成正确识别

134
00:04:59,536 --> 0:05:00,846
你也可以

135
00:04:59,536 --> 0:05:00,846
你也可以

136
00:05:00,986 --> 0:05:02,586
做文本分类器

137
00:05:02,586 --> 0:05:04,266
然后自己做情感分析

138
00:05:04,266 --> 0:05:05,766
话题分析 或领域分析

139
00:05:06,456 --> 0:05:09,616
你还可以

140
00:05:09,656 --> 0:05:12,636
对列表数据做

141
00:05:12,636 --> 0:05:13,246
经典回归及分类

142
00:05:13,626 --> 0:05:15,316
举个例子 你可能想

143
00:05:15,316 --> 0:05:16,726
根据红酒的化学成分

144
00:05:16,726 --> 0:05:18,916
预测红酒品质

145
00:05:19,746 --> 0:05:21,066
这样的例子数不胜数

146
00:05:21,066 --> 0:05:23,286
在接下来的三十分钟里

147
00:05:23,286 --> 0:05:24,966
我们来详细探讨一下

148
00:05:24,966 --> 0:05:25,216
这个状况

149
00:05:27,976 --> 0:05:30,216
在我们开始前

150
00:05:30,216 --> 0:05:31,656
我们先看一下普通的工作流程

151
00:05:31,656 --> 0:05:35,246
假如你想

152
00:05:35,576 --> 0:05:37,526
在你的 App 中

153
00:05:37,526 --> 0:05:39,726
添加一个新的功能

154
00:05:39,726 --> 0:05:40,826
首先确保机器学习

155
00:05:40,876 --> 0:05:41,606
是正确的选择

156
00:05:41,866 --> 0:05:42,986
不要盲目地

157
00:05:42,986 --> 0:05:43,676
使用机器学习

158
00:05:44,056 --> 0:05:45,156
确保机器学习

159
00:05:45,156 --> 0:05:46,496
是适合你的

160
00:05:46,496 --> 0:05:47,996
然后明确

161
00:05:49,696 --> 0:05:49,926
你要解决的问题

162
00:05:50,076 --> 0:05:52,006
第二步是收集数据

163
00:05:53,326 --> 0:05:55,446
要保证你的数据可以反映

164
00:05:55,446 --> 0:05:57,766
你 App 的真实使用情况

165
00:05:58,566 --> 0:05:59,686
例如 如果你在

166
00:05:59,686 --> 0:06:01,916
制作一个图像分类器

167
00:05:59,686 --> 0:06:01,916
制作一个图像分类器

168
00:06:02,546 --> 0:06:04,066
用户会在 iPhone 上

169
00:06:04,066 --> 0:06:06,486
使用你的 App

170
00:06:06,486 --> 0:06:07,946
那你就需要收集

171
00:06:07,946 --> 0:06:08,236
iPhone 中的照片

172
00:06:08,676 --> 0:06:10,246
不要收集太多

173
00:06:10,366 --> 0:06:12,566
屏幕截图 主要还是 

174
00:06:13,106 --> 0:06:13,326
iPhone 的照片

175
00:06:14,536 --> 0:06:17,606
下一步是训练模型

176
00:06:18,396 --> 0:06:21,276
最后一个重要步骤是

177
00:06:21,276 --> 0:06:22,756
对你的模型进行评估

178
00:06:23,366 --> 0:06:25,686
模型评估需要用

179
00:06:25,686 --> 0:06:27,996
一组不一样的数据来检验

180
00:06:29,286 --> 0:06:31,556
如果你觉得满意

181
00:06:31,606 --> 0:06:32,376
就可以导出模型

182
00:06:33,726 --> 0:06:35,416
不过我们假设结果

183
00:06:35,416 --> 0:06:36,216
并不令人满意

184
00:06:36,216 --> 0:06:37,246
你要不就用不同的参数

185
00:06:37,246 --> 0:06:39,416
重新训练模型

186
00:06:39,686 --> 0:06:41,676
要不就收集更多数据

187
00:06:43,456 --> 0:06:45,356
Create ML 在工作流程的

188
00:06:45,356 --> 0:06:47,736
四个阶段

189
00:06:47,736 --> 0:06:48,176
都能给你提供帮助

190
00:06:48,796 --> 0:06:52,886
我们有强大的

191
00:06:52,886 --> 0:06:55,816
内置数据版工具 数据源和数据表

192
00:06:55,816 --> 0:06:57,196
那么接下来

193
00:06:57,196 --> 0:06:58,036
我会给大家介绍

194
00:06:58,466 --> 0:07:01,546
你只需一行代码

195
00:06:58,466 --> 0:07:01,546
你只需一行代码

196
00:07:01,546 --> 0:07:03,196
就可以训练你的机器学习模型

197
00:07:04,416 --> 0:07:06,196
训练过程会根据你的硬件

198
00:07:06,196 --> 0:07:07,386
做最优化处理

199
00:07:08,096 --> 0:07:11,796
Create ML 还有内置评估标准

200
00:07:11,796 --> 0:07:12,976
这样你就不用

201
00:07:12,976 --> 0:07:14,236
自己写精确率 召回率

202
00:07:14,236 --> 0:07:16,316
和混淆矩阵的计算了

203
00:07:16,646 --> 0:07:19,926
用现成的就行

204
00:07:19,926 --> 0:07:22,376
最后 你对结果满意了

205
00:07:22,376 --> 0:07:22,716
导出模型即可

206
00:07:23,366 --> 0:07:25,936
现在我们深入研究一下

207
00:07:25,936 --> 0:07:28,506
三个用例

208
00:07:29,006 --> 0:07:32,646
图像 文本 和列表数据

209
00:07:32,986 --> 0:07:34,466
首先是图像

210
00:07:34,466 --> 0:07:36,056
下面有请 Lizi Ottens 上台

211
00:07:36,056 --> 0:07:38,036
她是机器学习团队的

212
00:07:38,036 --> 0:07:38,766
一名高级工程师

213
00:07:38,926 --> 0:07:39,266
谢谢大家

214
00:07:40,516 --> 0:07:44,996
［ 掌声 ］

215
00:07:45,496 --> 0:07:49,516
&gt;&gt; 谢谢你 Gaurav

216
00:07:50,106 --> 0:07:51,716
基于图像的功能

217
00:07:51,716 --> 0:07:53,866
是 App 功能中最强大

218
00:07:53,866 --> 0:07:56,806
也最具交互性的功能之一

219
00:07:57,526 --> 0:07:59,346
所以我们今天来看一下

220
00:07:59,346 --> 0:08:00,886
如何训练自定义的

221
00:07:59,346 --> 0:08:00,886
如何训练自定义的

222
00:08:00,886 --> 0:08:02,156
图像分类模型

223
00:08:03,316 --> 0:08:04,686
图像分类是

224
00:08:04,686 --> 0:08:06,626
在一组标签中

225
00:08:06,626 --> 0:08:08,546
找出你想要给某张图片

226
00:08:08,546 --> 0:08:10,336
添加的标签

227
00:08:11,646 --> 0:08:12,486
根据训练数据的不同

228
00:08:12,486 --> 0:08:14,216
你可以将目标定为

229
00:08:14,216 --> 0:08:16,676
在 App 中实现

230
00:08:16,676 --> 0:08:18,666
特定领域的用例

231
00:08:19,346 --> 0:08:21,876
我们的第一步是收集训练数据

232
00:08:23,826 --> 0:08:25,286
让我们来看一个

233
00:08:25,536 --> 0:08:28,286
水果分类器是如何成型的

234
00:08:29,596 --> 0:08:31,756
首先 你需要收集很多

235
00:08:31,756 --> 0:08:33,306
不同类型的图像

236
00:08:33,306 --> 0:08:34,756
这些图像要与你想得到的

237
00:08:34,756 --> 0:08:36,296
最终结果保持一致

238
00:08:36,296 --> 0:08:37,796
然后给图像添加标签

239
00:08:37,796 --> 0:08:38,726
你可以先做一个图集

240
00:08:38,726 --> 0:08:41,775
图集的字符串标签

241
00:08:42,066 --> 0:08:43,726
要与图集中的图像保持一致

242
00:08:44,376 --> 0:08:46,466
或者我们注意到

243
00:08:46,506 --> 0:08:48,226
很多热门的数据组

244
00:08:48,316 --> 0:08:49,636
是通过分层目录结构整理的

245
00:08:49,636 --> 0:08:51,706
也就是说 图像的标签

246
00:08:52,356 --> 0:08:53,726
就是图片文件夹的名字

247
00:08:53,726 --> 0:08:55,006
文件夹中包含所有相关图片

248
00:08:56,726 --> 0:08:57,556
还有一些其他数据源

249
00:08:57,806 --> 0:09:00,116
比如 在单个文件夹里

250
00:08:57,806 --> 0:09:00,116
比如 在单个文件夹里

251
00:09:00,286 --> 0:09:01,836
图片标签被添加到文件名称中

252
00:09:02,296 --> 0:09:04,186
Create ML 的接口

253
00:09:04,186 --> 0:09:05,876
便于提取

254
00:09:06,156 --> 0:09:06,776
这些不同结构

255
00:09:09,126 --> 0:09:11,256
下面是比较复杂的部分

256
00:09:11,396 --> 0:09:12,246
模型训练

257
00:09:12,686 --> 0:09:14,756
准备好数据后

258
00:09:14,806 --> 0:09:15,596
就要训练模型了

259
00:09:17,036 --> 0:09:18,946
你可以通过

260
00:09:19,046 --> 0:09:20,576
输入的图像

261
00:09:20,646 --> 0:09:23,176
从零开始 训练一个复杂的模型

262
00:09:23,936 --> 0:09:26,326
这时你需要大量的标签数据

263
00:09:26,976 --> 0:09:28,546
你还需要大量的计算

264
00:09:28,546 --> 0:09:29,446
和很好的耐心

265
00:09:30,396 --> 0:09:31,626
在机器学习领域

266
00:09:31,696 --> 0:09:33,376
另一个比较成功的技术

267
00:09:33,376 --> 0:09:34,086
就是迁移学习

268
00:09:34,966 --> 0:09:36,936
由于 Apple 在训练

269
00:09:36,936 --> 0:09:38,796
复杂模型上

270
00:09:38,906 --> 0:09:40,236
有丰富的经验

271
00:09:40,236 --> 0:09:41,386
操作系统中

272
00:09:41,426 --> 0:09:43,036
已经包含一个

273
00:09:43,036 --> 0:09:43,826
你可以利用的模型了

274
00:09:44,336 --> 0:09:46,056
我们要做的是

275
00:09:46,056 --> 0:09:47,616
将迁移学习用于

276
00:09:47,686 --> 0:09:49,346
操作系统中的模型

277
00:09:49,346 --> 0:09:50,806
然后对其进行补充

278
00:09:51,256 --> 0:09:52,836
用你准备的数据

279
00:09:53,166 --> 0:09:55,046
重新训练最后几个层次

280
00:09:55,046 --> 0:09:57,126
这样你就不用收集几百万张图片了

281
00:09:57,476 --> 0:09:59,736
只需用你能收集到的数据

282
00:09:59,936 --> 0:10:01,446
就可以训练出一个不错的图像分类器

283
00:09:59,936 --> 0:10:01,446
就可以训练出一个不错的图像分类器

284
00:10:03,576 --> 0:10:05,656
这可以节省很多训练时间

285
00:10:06,176 --> 0:10:07,306
我们看到很多开发人员

286
00:10:07,346 --> 0:10:08,936
一开始花费数小时训练模型

287
00:10:09,596 --> 0:10:12,996
后来逐渐减少到几分钟

288
00:10:12,996 --> 0:10:14,576
只需用几千张图像

289
00:10:15,056 --> 0:10:16,756
或更小的数据组就可以

290
00:10:16,826 --> 0:10:17,166
有些甚至几秒就能完成

291
00:10:19,886 --> 0:10:21,126
这也缩减了模型大小

292
00:10:21,296 --> 0:10:23,026
从几百 MB

293
00:10:23,026 --> 0:10:26,756
缩减至几 MB

294
00:10:26,756 --> 0:10:28,426
只需几千张图片

295
00:10:28,426 --> 0:10:28,896
小的甚至有几 KB 的

296
00:10:32,076 --> 0:10:34,416
Create ML 的目标在于

297
00:10:34,416 --> 0:10:35,966
简化模型训练

298
00:10:35,966 --> 0:10:37,646
让机器学习变得简单易用

299
00:10:38,286 --> 0:10:39,786
为了证明这一点

300
00:10:39,786 --> 0:10:40,396
我们来看一个例子

301
00:10:47,396 --> 0:10:49,356
首先 为了发现问题

302
00:10:49,446 --> 0:10:51,066
我运行了一个 App

303
00:10:51,126 --> 0:10:52,546
而这个 App

304
00:10:52,626 --> 0:10:54,286
采用的是行业现有的

305
00:10:54,286 --> 0:10:55,166
一个图像分类模型

306
00:10:56,326 --> 0:10:57,766
这个模型是挺大的

307
00:10:57,766 --> 0:10:59,446
在 App 中有 100 MB

308
00:11:00,676 --> 0:11:03,066
我们运行 App

309
00:11:03,116 --> 0:11:07,016
可以得到一些水果的图片

310
00:11:07,016 --> 0:11:07,756
但是这不是我想要的结果

311
00:11:08,626 --> 0:11:10,256
如果我们能将

312
00:11:11,356 --> 0:11:13,316
这些特例分类就更棒了

313
00:11:14,376 --> 0:11:15,796
我们可以

314
00:11:15,886 --> 0:11:19,346
新建一个 Playground

315
00:11:19,346 --> 0:11:21,536
输入 CreateMLUI

316
00:11:21,536 --> 0:11:24,166
我借助 UI 给大家演示

317
00:11:24,166 --> 0:11:25,016
如何操作

318
00:11:26,166 --> 0:11:27,276
我们定义一个创建器

319
00:11:28,796 --> 0:11:29,576
设为启动

320
00:11:29,576 --> 0:11:31,226
然后启用拖拽式训练

321
00:11:31,276 --> 0:11:32,766
我们可以

322
00:11:32,766 --> 0:11:34,186
实时展示创建器

323
00:11:38,426 --> 0:11:40,696
这会在实时视图中

324
00:11:40,696 --> 0:11:42,476
出现拖拽添加图像的提示

325
00:11:42,646 --> 0:11:43,306
添加后开始训练模型

326
00:11:44,886 --> 0:11:47,176
我准备了一些

327
00:11:47,176 --> 0:11:50,676
水果的图片 有蓝莓 还有其他的水果

328
00:11:51,746 --> 0:11:53,396
你可以将图片拖进来

329
00:11:53,476 --> 0:11:54,626
然后你的 Mac

330
00:11:54,626 --> 0:11:56,366
就自动开始训练

331
00:11:56,576 --> 0:11:57,056
图像分类模型了

332
00:11:57,916 --> 0:11:59,616
无论有多少类别

333
00:11:59,616 --> 0:12:03,516
你的 GPU 都会加速训练进程

334
00:11:59,616 --> 0:12:03,516
你的 GPU 都会加速训练进程

335
00:12:04,736 --> 0:12:06,036
Create ML 会自动展示

336
00:12:06,036 --> 0:12:09,526
训练数据组的准确率 然而

337
00:12:09,526 --> 0:12:11,316
更有效的是

338
00:12:11,316 --> 0:12:13,076
用模型未识别过的图像

339
00:12:13,076 --> 0:12:15,006
来预测实际用例中

340
00:12:15,006 --> 0:12:17,076
模型的性能

341
00:12:17,806 --> 0:12:20,696
我将另一个包含新图片的文件夹拖入

342
00:12:21,786 --> 0:12:24,846
现在 模型在评估新的水果图片

343
00:12:25,246 --> 0:12:26,896
往下滑可以

344
00:12:26,896 --> 0:12:28,566
看到图片的真实标签

345
00:12:28,606 --> 0:12:31,756
和模型预测出的标签

346
00:12:34,376 --> 0:12:36,406
如果你对准确度

347
00:12:36,406 --> 0:12:38,216
还算满意

348
00:12:38,216 --> 0:12:39,976
你就可以将模型

349
00:12:39,976 --> 0:12:40,406
拖入你的 App

350
00:12:44,786 --> 0:12:45,496
我加在了这里

351
00:12:45,806 --> 0:12:48,036
我们现在再来看

352
00:12:48,076 --> 0:12:49,836
这个模型只有 83 KB

353
00:12:50,396 --> 0:12:52,656
比之前的模型

354
00:12:52,766 --> 0:12:53,206
小了很多

355
00:12:54,516 --> 0:12:59,736
［ 掌声 ］

356
00:13:00,236 --> 0:13:01,696
我们可以删除

357
00:13:01,696 --> 0:13:02,686
之前的旧模型

358
00:13:02,686 --> 0:13:04,786
在视图控制器中

359
00:13:04,786 --> 0:13:06,286
我们可以启用新的模型

360
00:13:06,986 --> 0:13:07,806
ImageClassifier

361
00:13:10,536 --> 0:13:11,676
我们重新运行 App

362
00:13:13,146 --> 0:13:17,866
打开模拟器

363
00:13:17,866 --> 0:13:18,946
看一下新模型

364
00:13:19,026 --> 0:13:19,356
对于水果图片的识别

365
00:13:24,026 --> 0:13:25,436
现在 App 可以

366
00:13:25,436 --> 0:13:27,366
正确识别覆盆子了

367
00:13:27,366 --> 0:13:28,806
因为我们训练了模型

368
00:13:29,276 --> 0:13:29,826
对于覆盆子的识别

369
00:13:30,686 --> 0:13:31,736
我们甚至可以看看

370
00:13:31,736 --> 0:13:32,986
模型是否能区分草莓和覆盆子

371
00:13:33,396 --> 0:13:34,126
现在能做到了

372
00:13:37,956 --> 0:13:39,236
然而你还可以采用

373
00:13:39,286 --> 0:13:39,826
其他的工作流程

374
00:13:40,636 --> 0:13:41,516
或许你想

375
00:13:41,606 --> 0:13:43,356
用编程控制

376
00:13:43,356 --> 0:13:44,056
或自动训练

377
00:13:45,116 --> 0:13:46,486
下面就来讲一下我们

378
00:13:46,486 --> 0:13:48,096
如何在 Create ML 中实现

379
00:13:48,866 --> 0:13:54,246
我们切换到新的 Playground

380
00:13:54,296 --> 0:13:57,316
然后输入 CreateML

381
00:13:57,866 --> 0:13:59,566
由于会用到 URL

382
00:13:59,566 --> 0:14:01,386
我们也输入 Foundation

383
00:13:59,566 --> 0:14:01,386
我们也输入 Foundation

384
00:14:03,686 --> 0:14:05,406
因为桌面上

385
00:14:05,406 --> 0:14:06,826
还有水果图片的文件夹

386
00:14:06,826 --> 0:14:09,776
我们可以直接输入路径

387
00:14:09,776 --> 0:14:14,586
测试用的图片

388
00:14:14,586 --> 0:14:15,466
也是一样

389
00:14:15,466 --> 0:14:17,526
下一步是

390
00:14:17,526 --> 0:14:18,636
训练模型

391
00:14:19,426 --> 0:14:22,376
我们可以定义一个模型

392
00:14:22,376 --> 0:14:23,716
然后启动一个

393
00:14:23,716 --> 0:14:24,386
图像分类器

394
00:14:25,206 --> 0:14:26,726
现在 我们看一下

395
00:14:26,726 --> 0:14:28,166
自动完成的情况

396
00:14:28,296 --> 0:14:29,826
我们提供多个标签

397
00:14:29,826 --> 0:14:31,006
和多张图像所匹配的

398
00:14:31,006 --> 0:14:33,016
训练数据

399
00:14:33,086 --> 0:14:38,616
或者使用数据源

400
00:14:38,666 --> 0:14:39,846
甚至可以用

401
00:14:39,906 --> 0:14:40,046
模型训练的参数

402
00:14:41,456 --> 0:14:42,466
我们用一个数据源吧

403
00:14:42,466 --> 0:14:44,226
我们用 labeledDirectories

404
00:14:44,296 --> 0:14:45,366
因为我们的数据

405
00:14:45,366 --> 0:14:47,576
是根据标签目录整理的

406
00:14:47,576 --> 0:14:48,436
然后指定 trainingDirectory

407
00:14:50,526 --> 0:14:51,556
由于我们在 Xcode Playground

408
00:14:51,556 --> 0:14:52,946
新的 REPL 模式下

409
00:14:52,976 --> 0:14:54,226
运行模型

410
00:14:54,226 --> 0:14:56,726
我只需按 Shift + Enter

411
00:14:56,726 --> 0:14:57,796
模型马上就开始训练了

412
00:14:59,216 --> 0:15:00,576
你可以将控制台

413
00:14:59,216 --> 0:15:00,576
你可以将控制台

414
00:15:01,556 --> 0:15:04,006
打开查看

415
00:15:04,006 --> 0:15:06,036
提取功能

416
00:15:06,036 --> 0:15:07,256
并查看有多少重复

417
00:15:08,566 --> 0:15:10,126
之后 你也可以

418
00:15:10,126 --> 0:15:12,066
打开 Quick Look

419
00:15:12,066 --> 0:15:13,866
查看模型的名称

420
00:15:13,866 --> 0:15:14,546
和经过多少数据的训练

421
00:15:16,216 --> 0:15:19,286
现在我们用测试数据

422
00:15:19,376 --> 0:15:19,686
评估一下模型

423
00:15:20,666 --> 0:15:22,926
我们可以

424
00:15:22,926 --> 0:15:25,116
对另一个数据源

425
00:15:25,306 --> 0:15:26,626
调用估算

426
00:15:26,626 --> 0:15:27,636
因为整理方法与之前相同

427
00:15:28,036 --> 0:15:30,206
明确测试数据的 URL

428
00:15:30,986 --> 0:15:33,246
点击 Shift + Enter

429
00:15:33,246 --> 0:15:35,196
模型就开始评估

430
00:15:35,196 --> 0:15:35,456
测试图像了

431
00:15:36,196 --> 0:15:37,816
评估结束后

432
00:15:37,816 --> 0:15:39,326
我们可以查看 Quick Look

433
00:15:39,326 --> 0:15:40,956
看评估了多少数据

434
00:15:40,956 --> 0:15:42,636
文件夹中包含

435
00:15:42,726 --> 0:15:44,166
多少类别

436
00:15:44,596 --> 0:15:45,366
和模型准确率

437
00:15:46,886 --> 0:15:48,326
如果多结果满意

438
00:15:48,376 --> 0:15:48,816
就可以将模型导出

439
00:15:58,606 --> 0:15:59,716
假设我想

440
00:15:59,826 --> 0:16:00,996
导出到桌面

441
00:15:59,826 --> 0:16:00,996
导出到桌面

442
00:16:01,206 --> 0:16:02,706
并命名为 FruitClassifier

443
00:16:04,846 --> 0:16:06,296
成功之后

444
00:16:06,296 --> 0:16:07,676
桌面上就有这个新模型了

445
00:16:08,586 --> 0:16:09,876
我们双击模型查看

446
00:16:09,876 --> 0:16:12,046
可以发现

447
00:16:12,126 --> 0:16:12,466
大小完全没变

448
00:16:12,696 --> 0:16:14,256
还是 83 KB

449
00:16:17,036 --> 0:16:18,316
此外 我们可以以同样的方式

450
00:16:18,376 --> 0:16:19,666
将模型嵌入我们的 App

451
00:16:21,206 --> 0:16:21,596
让我们重温一下

452
00:16:22,516 --> 0:16:31,506
［ 掌声 ］

453
00:16:32,006 --> 0:16:33,536
我们看到两种

454
00:16:33,536 --> 0:16:35,126
在 Create ML 中

455
00:16:35,126 --> 0:16:35,516
训练图像分类器模型的方式

456
00:16:36,276 --> 0:16:38,406
一是借助 UI

457
00:16:38,406 --> 0:16:40,446
拖拽训练数据

458
00:16:40,656 --> 0:16:41,626
及评估数据

459
00:16:41,626 --> 0:16:43,956
这样创建模型

460
00:16:43,956 --> 0:16:44,276
非常简单

461
00:16:45,396 --> 0:16:47,866
二是利用 Create ML 接口

462
00:16:48,676 --> 0:16:49,726
看代码的话

463
00:16:49,726 --> 0:16:51,406
我们会发现

464
00:16:51,406 --> 0:16:53,486
我们首先需要输入 CreateML

465
00:16:54,456 --> 0:16:56,066
下一步要明确

466
00:16:56,066 --> 0:16:57,486
训练数据和测试数据的位置

467
00:16:57,486 --> 0:16:59,666
然后通过明确

468
00:16:59,666 --> 0:17:01,396
测试数据的结构

469
00:16:59,666 --> 0:17:01,396
测试数据的结构

470
00:17:01,496 --> 0:17:02,926
我们就可以开始训练模型了

471
00:17:04,205 --> 0:17:05,346
然后我们用测试数据

472
00:17:05,415 --> 0:17:07,996
评估模型

473
00:17:07,996 --> 0:17:08,306
最后保存模型

474
00:17:11,576 --> 0:17:12,596
如果想自动操作

475
00:17:13,006 --> 0:17:14,215
你可以将这些

476
00:17:14,326 --> 0:17:16,106
写成脚本

477
00:17:16,106 --> 0:17:17,836
很多人用脚本保存操作过程

478
00:17:17,836 --> 0:17:19,215
并且可以随时运行

479
00:17:21,746 --> 0:17:22,896
你可以更改

480
00:17:22,896 --> 0:17:24,766
文件的权限

481
00:17:24,866 --> 0:17:25,086
然后就这样运行

482
00:17:26,056 --> 0:17:27,806
对于其他的工作流程

483
00:17:27,806 --> 0:17:29,996
你可以使用

484
00:17:29,996 --> 0:17:30,126
Swift 命令行

485
00:17:30,126 --> 0:17:33,246
今天我们了解了

486
00:17:33,246 --> 0:17:34,496
如何通过不同的工作流程

487
00:17:35,016 --> 0:17:36,176
训练图像分类模型

488
00:17:36,176 --> 0:17:38,496
下面我要有请 Tao

489
00:17:38,496 --> 0:17:40,576
来讲一下

490
00:17:40,576 --> 0:17:40,976
自然语言处理

491
00:17:41,476 --> 0:17:41,766
谢谢大家

492
00:17:42,516 --> 0:17:49,876
［ 掌声 ］

493
00:17:50,376 --> 0:17:53,546
&gt;&gt; 谢谢 Lizi

494
00:17:54,636 --> 0:17:55,336
大家好

495
00:17:55,526 --> 0:17:56,466
我的名字是 Tao

496
00:17:56,466 --> 0:17:58,416
我是 Apple Core ML 团队的

497
00:17:58,686 --> 0:18:00,086
一名工程师

498
00:17:58,686 --> 0:18:00,086
一名工程师

499
00:18:00,996 --> 0:18:03,166
刚刚大家看到了

500
00:18:03,166 --> 0:18:04,676
我们用几行代码

501
00:18:04,676 --> 0:18:07,036
就可以简单且直观地

502
00:18:07,036 --> 0:18:07,616
训练图像分类器

503
00:18:08,246 --> 0:18:10,146
自然语言也可以做到

504
00:18:10,146 --> 0:18:11,876
下面由我

505
00:18:11,876 --> 0:18:12,406
为大家讲解

506
00:18:12,956 --> 0:18:15,926
今年发布的 Create ML 中

507
00:18:15,926 --> 0:18:17,476
我们会支持两种自然语言处理

508
00:18:17,476 --> 0:18:19,826
文本分类

509
00:18:19,826 --> 0:18:21,866
和词语标注

510
00:18:23,096 --> 0:18:25,046
今天 我会重点介绍

511
00:18:25,046 --> 0:18:26,516
文本分类

512
00:18:26,836 --> 0:18:28,216
想了解词语标注的更多细节

513
00:18:28,796 --> 0:18:30,136
请各位参加明天

514
00:18:30,136 --> 0:18:31,796
自然语言方面的会议

515
00:18:32,656 --> 0:18:34,446
文本分类

516
00:18:34,696 --> 0:18:35,846
在机器学习中

517
00:18:35,926 --> 0:18:36,606
有几种 App

518
00:18:37,816 --> 0:18:39,886
例如 情感分析

519
00:18:40,756 --> 0:18:42,526
各位开发人员的热情

520
00:18:42,526 --> 0:18:43,516
不可抵挡

521
00:18:43,826 --> 0:18:44,906
这是正面信息

522
00:18:45,336 --> 0:18:46,776
你希望你的 App 可以识别

523
00:18:47,516 --> 0:18:50,166
［ 掌声 ］

524
00:18:50,666 --> 0:18:51,656
垃圾邮件分析

525
00:18:52,336 --> 0:18:54,006
如果你在邮箱中

526
00:18:54,006 --> 0:18:55,846
看到这条信息

527
00:18:55,846 --> 0:18:57,616
你知道这是垃圾邮件

528
00:18:57,766 --> 0:19:00,056
所以你希望你的 App

529
00:18:57,766 --> 0:19:00,056
所以你希望你的 App

530
00:19:00,526 --> 0:19:02,086
也能识别

531
00:19:02,086 --> 0:19:03,076
话题分析

532
00:19:03,736 --> 0:19:05,696
勇士队翻盘

533
00:19:05,696 --> 0:19:06,636
大获全胜

534
00:19:07,166 --> 0:19:08,686
这是一条体育新闻

535
00:19:08,906 --> 0:19:10,406
你希望你的 App

536
00:19:10,406 --> 0:19:11,186
能划分类别

537
00:19:12,406 --> 0:19:14,876
想要训练这样的分类器

538
00:19:14,876 --> 0:19:16,226
你首先要收集

539
00:19:16,226 --> 0:19:17,436
一些训练数据

540
00:19:18,326 --> 0:19:21,076
Create ML 支持

541
00:19:21,076 --> 0:19:22,256
多种整理训练

542
00:19:22,256 --> 0:19:23,686
数据的方式

543
00:19:24,326 --> 0:19:26,776
比如 标签目录

544
00:19:27,486 --> 0:19:28,796
这里有两个文件夹

545
00:19:29,116 --> 0:19:30,856
一个叫正面

546
00:19:30,856 --> 0:19:32,196
一个叫负面

547
00:19:32,836 --> 0:19:34,526
每个文件夹中

548
00:19:34,526 --> 0:19:37,026
都有一些原始文本

549
00:19:37,026 --> 0:19:40,046
它们的准确标签

550
00:19:40,046 --> 0:19:41,616
就是文件夹的名字

551
00:19:43,096 --> 0:19:45,056
或者你可以

552
00:19:45,056 --> 0:19:46,456
在 CSV 文件中

553
00:19:46,456 --> 0:19:48,866
记录原始文本

554
00:19:48,866 --> 0:19:50,766
和准确标签

555
00:19:50,966 --> 0:19:51,916
以逗号隔开

556
00:19:52,926 --> 0:19:54,926
我们还支持 JSON 格式的

557
00:19:54,926 --> 0:19:56,856
训练数据

558
00:19:57,236 --> 0:19:58,426
我们刚提到

559
00:19:58,426 --> 0:20:00,326
训练数据整理

560
00:19:58,426 --> 0:20:00,326
训练数据整理

561
00:20:00,366 --> 0:20:02,056
测试数据也可以用

562
00:20:02,056 --> 0:20:03,326
同样的方式整理

563
00:20:06,376 --> 0:20:08,296
训练数据和测试数据

564
00:20:08,296 --> 0:20:10,196
都准备好后

565
00:20:10,196 --> 0:20:12,246
训练文本分类器

566
00:20:12,246 --> 0:20:13,196
还需要什么步骤呢

567
00:20:16,046 --> 0:20:17,806
典型的工作流程

568
00:20:17,806 --> 0:20:18,576
大概是这样

569
00:20:20,046 --> 0:20:21,396
我们从原始文本入手

570
00:20:22,286 --> 0:20:24,206
通过语言识别

571
00:20:24,206 --> 0:20:25,906
确认原始文本的语言

572
00:20:27,286 --> 0:20:28,916
将文本转换成标记

573
00:20:30,306 --> 0:20:31,756
再将标记

574
00:20:31,756 --> 0:20:34,946
转换成相应特征值

575
00:20:34,946 --> 0:20:36,216
然后加入机器学习模型

576
00:20:36,216 --> 0:20:40,116
输出一些预测值

577
00:20:40,116 --> 0:20:42,066
再将预测值转成标签

578
00:20:42,066 --> 0:20:44,126
然后你可以将标签

579
00:20:44,126 --> 0:20:46,256
与准确标签对比

580
00:20:46,346 --> 0:20:49,206
不断重复这样的过程

581
00:20:49,466 --> 0:20:51,926
然而有了 Create ML

582
00:20:51,926 --> 0:20:54,666
整个流程变得简单

583
00:20:54,666 --> 0:20:56,696
这样你只需

584
00:20:56,696 --> 0:20:58,896
准备原始文本

585
00:20:58,896 --> 0:21:01,226
和准确标签

586
00:20:58,896 --> 0:21:01,226
和准确标签

587
00:21:01,686 --> 0:21:02,566
再训练模型就可以了

588
00:21:03,516 --> 0:21:09,356
［ 掌声 ］

589
00:21:09,856 --> 0:21:11,686
下面我来给大家展示

590
00:21:11,686 --> 0:21:13,256
如何训练文本分类器

591
00:21:13,256 --> 0:21:15,406
并对其加以使用

592
00:21:16,186 --> 0:21:18,396
假如我们有一个简单的 App

593
00:21:18,536 --> 0:21:21,106
叫做保持正面

594
00:21:21,196 --> 0:21:23,566
App 的目的是为了激发

595
00:21:23,626 --> 0:21:24,016
正面的帖子

596
00:21:24,656 --> 0:21:27,246
如果有用户输入

597
00:21:27,246 --> 0:21:29,326
我讨厌堵车

598
00:21:29,326 --> 0:21:31,506
则帖子背景变为红色

599
00:21:31,506 --> 0:21:31,856
发帖按钮变为不可点击

600
00:21:32,706 --> 0:21:37,206
我喜欢淡定地在车流中

601
00:21:37,206 --> 0:21:40,006
以每小时 10 公里的速度

602
00:21:40,736 --> 0:21:41,416
向前行驶

603
00:21:41,626 --> 0:21:42,736
这是个正面的帖子

604
00:21:42,946 --> 0:21:44,646
我们鼓励这种帖子

605
00:21:46,116 --> 0:21:47,876
如果每个人的手机上

606
00:21:47,876 --> 0:21:49,486
都装了这个 App

607
00:21:49,836 --> 0:21:51,406
互联网会变得多好呀

608
00:21:52,516 --> 0:21:56,396
［掌声］

609
00:21:56,896 --> 0:21:58,336
想要实现这一点

610
00:21:58,336 --> 0:21:59,296
我来给大家做个演示

611
00:22:07,016 --> 0:22:09,966
要训练这样一个分类器

612
00:22:09,966 --> 0:22:11,506
我们首先要

613
00:22:11,506 --> 0:22:12,206
收集训练数据

614
00:22:12,916 --> 0:22:17,736
在桌面上 有一个训练数据文件夹

615
00:22:17,736 --> 0:22:19,436
和一个测试数据文件夹

616
00:22:20,126 --> 0:22:21,616
在训练文件里

617
00:22:21,616 --> 0:22:22,156
我们有两个文件夹

618
00:22:22,316 --> 0:22:23,816
一个命名为正面

619
00:22:23,816 --> 0:22:26,246
另一个为负面

620
00:22:26,246 --> 0:22:28,106
每个文件夹中

621
00:22:28,106 --> 0:22:28,446
有一些文章

622
00:22:29,526 --> 0:22:31,486
测试文件夹的整理方式

623
00:22:31,486 --> 0:22:32,686
基本相同

624
00:22:33,436 --> 0:22:38,116
首先 我需要

625
00:22:38,116 --> 0:22:41,196
输入 CreateML

626
00:22:41,446 --> 0:22:43,846
现在 我需要明确

627
00:22:43,846 --> 0:22:46,666
训练数据的位置

628
00:22:47,436 --> 0:22:50,056
我用的只是 URL

629
00:22:50,056 --> 0:22:53,056
然后我就可以

630
00:22:53,056 --> 0:22:54,656
用 Lizi 展示过的

631
00:22:54,656 --> 0:22:56,576
标签目录

632
00:22:56,576 --> 0:22:57,206
来训练我的模型了

633
00:22:57,556 --> 0:23:00,756
看 训练开始了

634
00:22:57,556 --> 0:23:00,756
看 训练开始了

635
00:23:02,406 --> 0:23:03,656
从底下可以看到

636
00:23:03,656 --> 0:23:06,726
在这里有进度报告

637
00:23:06,926 --> 0:23:10,276
训练好像已经结束了

638
00:23:10,406 --> 0:23:12,566
现在你可以

639
00:23:12,566 --> 0:23:13,696
查看这个模型中

640
00:23:13,696 --> 0:23:14,256
的一些表现数据

641
00:23:14,496 --> 0:23:19,226
例如 model.trainingMetrics

642
00:23:19,226 --> 0:23:20,516
在训练中

643
00:23:20,516 --> 0:23:23,226
使用了 2000 多个数据

644
00:23:23,226 --> 0:23:24,786
准确率 100%

645
00:23:25,286 --> 0:23:29,796
那如果是新数据

646
00:23:29,846 --> 0:23:30,556
这个模型表现会如何呢

647
00:23:31,446 --> 0:23:33,336
我接下来要

648
00:23:33,366 --> 0:23:37,126
定义测试数据

649
00:23:38,376 --> 0:23:42,086
然后用测试数据

650
00:23:43,316 --> 0:23:43,456
评估模型

651
00:23:43,626 --> 0:23:46,336
可以看到

652
00:23:46,516 --> 0:23:49,036
这里有 77 个测试数据

653
00:23:49,446 --> 0:23:52,966
准确率 94%

654
00:23:52,966 --> 0:23:53,616
效果非常好

655
00:23:54,556 --> 0:23:56,076
为了更高的准确率

656
00:23:56,076 --> 0:23:57,296
你们可能想多训练几次

657
00:23:57,296 --> 0:23:59,906
但是这个数字

658
00:23:59,906 --> 0:24:01,936
已经很好了

659
00:23:59,906 --> 0:24:01,936
已经很好了

660
00:24:01,936 --> 0:24:04,276
所以下面我想

661
00:24:04,276 --> 0:24:04,456
试验一下

662
00:24:05,306 --> 0:24:07,686
想要保存模型

663
00:24:07,686 --> 0:24:10,446
我需要定义

664
00:24:10,446 --> 0:24:14,496
保存路径

665
00:24:14,496 --> 0:24:16,176
然后将模型导出到桌面

666
00:24:16,736 --> 0:24:19,086
这看起来

667
00:24:19,246 --> 0:24:20,306
模型已经保存了

668
00:24:22,236 --> 0:24:23,906
现在切换到

669
00:24:23,906 --> 0:24:24,386
我的 App 来

670
00:24:25,326 --> 0:24:27,266
将模型拖拽过来

671
00:24:27,836 --> 0:24:29,396
这就可以了

672
00:24:33,636 --> 0:24:36,756
现在我就可以使用模型了

673
00:24:37,276 --> 0:24:39,686
let model = TextClassifier

674
00:24:39,686 --> 0:24:42,566
它应当会自动填充

675
00:24:43,426 --> 0:24:45,236
然后我要插入一些

676
00:24:45,236 --> 0:24:47,236
基本的推理代码

677
00:24:47,776 --> 0:24:50,716
在这个推理代码中

678
00:24:50,716 --> 0:24:52,576
我在第一行使用了

679
00:24:52,696 --> 0:24:54,826
model.prediction

680
00:24:54,826 --> 0:24:55,386
来获取预测

681
00:24:55,386 --> 0:24:56,806
为了与 App

682
00:24:56,806 --> 0:24:58,586
简洁的 UI 兼容

683
00:24:58,586 --> 0:25:00,456
我将预测结果转换成两个值

684
00:24:58,586 --> 0:25:00,456
我将预测结果转换成两个值

685
00:25:01,146 --> 0:25:03,566
我们来试试

686
00:25:16,456 --> 0:25:18,026
先试一下

687
00:25:18,026 --> 0:25:18,766
已经展示过的例子

688
00:25:19,676 --> 0:25:23,566
我讨厌堵车 负面情绪

689
00:25:24,666 --> 0:25:27,196
我喜欢淡定地在车流中

690
00:25:27,936 --> 0:25:30,856
以每小时 10 公里的速度

691
00:25:30,856 --> 0:25:32,666
向前行驶

692
00:25:33,416 --> 0:25:35,866
正面情绪 让我们尝试

693
00:25:35,866 --> 0:25:37,686
一些不一样的

694
00:25:38,706 --> 0:25:41,486
机器学习很难

695
00:25:41,686 --> 0:25:45,436
Create ML 让机器学习变得简单

696
00:25:46,536 --> 0:25:47,076
出现正面

697
00:25:48,516 --> 0:25:53,166
［ 掌声 ］

698
00:25:53,666 --> 0:25:55,046
这就是如何训练

699
00:25:55,046 --> 0:25:57,776
你的文本分类器

700
00:25:57,776 --> 0:25:59,926
将其拖入 App 中并使用

701
00:26:04,796 --> 0:26:06,406
我们来回顾一下

702
00:26:07,836 --> 0:26:09,726
训练这样一个分类器

703
00:26:09,866 --> 0:26:11,266
首先你要

704
00:26:11,266 --> 0:26:12,246
确定数据

705
00:26:13,216 --> 0:26:14,686
训练数据

706
00:26:14,686 --> 0:26:18,136
以及测试数据

707
00:26:18,136 --> 0:26:19,586
然后用训练数据

708
00:26:19,586 --> 0:26:20,836
创建模型

709
00:26:22,146 --> 0:26:24,646
评估模型性能时

710
00:26:24,646 --> 0:26:26,246
用测试数据

711
00:26:26,246 --> 0:26:26,466
进行评估

712
00:26:27,786 --> 0:26:30,136
最后 你只需用 write 接口

713
00:26:30,136 --> 0:26:32,716
保存模型

714
00:26:32,716 --> 0:26:35,336
就可以嵌入 App 中使用了

715
00:26:38,176 --> 0:26:41,586
总的来说

716
00:26:41,586 --> 0:26:43,676
只需几行代码

717
00:26:43,676 --> 0:26:45,986
你就可以训练自己的

718
00:26:47,136 --> 0:26:48,526
文本分类器 简单又直观

719
00:26:49,046 --> 0:26:52,196
下面 我将话筒

720
00:26:52,196 --> 0:26:53,586
转回给 Gaurav

721
00:26:53,586 --> 0:26:54,696
由他来介绍列表数据

722
00:26:55,256 --> 0:26:55,626
谢谢各位

723
00:26:56,516 --> 0:27:00,986
［ 掌声 ］

724
00:26:56,516 --> 0:27:00,986
［ 掌声 ］

725
00:27:01,486 --> 0:27:04,576
&gt;&gt; 谢谢你 Tao

726
00:27:04,826 --> 0:27:07,136
除了图像和文本

727
00:27:07,136 --> 0:27:08,776
另一类在解决

728
00:27:08,776 --> 0:27:10,106
机器学习问题时

729
00:27:10,106 --> 0:27:12,556
很常见的数据来源

730
00:27:12,556 --> 0:27:12,706
就是列表数据

731
00:27:13,986 --> 0:27:15,526
列表数据是指

732
00:27:15,526 --> 0:27:17,446
有特殊格式

733
00:27:17,446 --> 0:27:19,206
或列表形式的数据

734
00:27:19,686 --> 0:27:21,716
这类数据非常常见

735
00:27:22,766 --> 0:27:24,356
举个例子 假如

736
00:27:24,356 --> 0:27:25,706
你想利用床的数量

737
00:27:25,796 --> 0:27:27,326
浴室数量

738
00:27:27,406 --> 0:27:28,716
或建筑面积

739
00:27:28,786 --> 0:27:29,196
预测房价

740
00:27:29,836 --> 0:27:31,366
这样的数据通常

741
00:27:31,446 --> 0:27:32,446
是以列表形式整理的

742
00:27:32,446 --> 0:27:35,656
你想通过

743
00:27:35,656 --> 0:27:36,996
红酒中的化学成分

744
00:27:36,996 --> 0:27:37,996
预测红酒质量

745
00:27:38,316 --> 0:27:39,336
你的数据有很大可能

746
00:27:39,336 --> 0:27:40,456
是列表形式

747
00:27:41,066 --> 0:27:42,426
或者一些简单的事

748
00:27:42,486 --> 0:27:44,116
比如用酒吧减价时段

749
00:27:44,116 --> 0:27:46,396
或酒吧消费水平

750
00:27:46,516 --> 0:27:48,516
决定今晚去哪家酒吧

751
00:27:48,776 --> 0:27:50,066
你的数据会是列表形式

752
00:27:51,696 --> 0:27:55,076
要处理列表形式的数据

753
00:27:55,076 --> 0:27:56,756
我们需要用到

754
00:27:56,936 --> 0:27:59,846
一种新的数据结构

755
00:27:59,846 --> 0:28:01,686
我们把它叫作 MLDataTable

756
00:27:59,846 --> 0:28:01,686
我们把它叫作 MLDataTable

757
00:28:02,496 --> 0:28:04,876
MLDataTable 是基于

758
00:28:04,876 --> 0:28:06,866
Turi Create 的一项技术

759
00:28:06,866 --> 0:28:08,546
我们明天会详细介绍

760
00:28:09,036 --> 0:28:11,136
这些数据表格

761
00:28:11,136 --> 0:28:12,286
有一点很有意思

762
00:28:13,876 --> 0:28:15,056
每一行包含

763
00:28:15,056 --> 0:28:17,266
一个例子的所有数据

764
00:28:17,356 --> 0:28:18,946
这里二号房子

765
00:28:19,056 --> 0:28:21,236
有四张床 三间浴室

766
00:28:21,316 --> 0:28:21,666
价格是 50 万美元

767
00:28:22,336 --> 0:28:25,006
每一列数据包含

768
00:28:25,006 --> 0:28:25,876
一种特征

769
00:28:26,306 --> 0:28:27,636
床的数量 浴室数量

770
00:28:28,636 --> 0:28:30,426
建筑面积等等

771
00:28:30,966 --> 0:28:31,886
都是特征

772
00:28:33,206 --> 0:28:34,966
我们想预测的

773
00:28:35,016 --> 0:28:37,446
是一列特殊的数据

774
00:28:37,586 --> 0:28:41,246
那就是房屋价格

775
00:28:41,246 --> 0:28:43,286
所以这一列是目标或反应变量

776
00:28:44,046 --> 0:28:45,546
列表数据处理

777
00:28:45,546 --> 0:28:47,136
其实是将目标变量

778
00:28:47,136 --> 0:28:49,456
作为所有特征的函数

779
00:28:49,646 --> 0:28:51,846
然后进行预测

780
00:28:51,896 --> 0:28:57,086
那我们都支持

781
00:28:57,086 --> 0:28:57,756
什么格式的列表数据呢

782
00:28:57,756 --> 0:28:59,926
CSV JSON

783
00:28:59,926 --> 0:29:02,306
还有代码

784
00:28:59,926 --> 0:29:02,306
还有代码

785
00:29:02,786 --> 0:29:04,666
我们再谈谈

786
00:29:05,436 --> 0:29:07,886
MLDataTable

787
00:29:08,396 --> 0:29:11,946
你只需用 CSV

788
00:29:11,946 --> 0:29:14,346
数据可以轻松读取

789
00:29:14,826 --> 0:29:17,536
更重要的是

790
00:29:17,536 --> 0:29:19,636
你可以用下标标注

791
00:29:19,636 --> 0:29:20,806
访问数据列

792
00:29:20,996 --> 0:29:22,426
你只需调用

793
00:29:22,496 --> 0:29:23,926
houseData[“price”]

794
00:29:23,926 --> 0:29:27,296
就可以得到整列价格数据

795
00:29:27,476 --> 0:29:30,356
你可以对两列数据

796
00:29:30,356 --> 0:29:31,886
做加减乘除

797
00:29:32,686 --> 0:29:35,376
实现该操作的语句

798
00:29:35,376 --> 0:29:36,696
非常直观

799
00:29:36,696 --> 0:29:37,956
你只需要

800
00:29:37,956 --> 0:29:39,296
用 houseData[“price”]

801
00:29:39,296 --> 0:29:41,356
除以 houseData[“sqft”]

802
00:29:41,356 --> 0:29:41,896
就得到每平方英尺的价格

803
00:29:43,136 --> 0:29:45,196
在后台运行中

804
00:29:45,226 --> 0:29:46,936
计算通过

805
00:29:46,936 --> 0:29:49,106
惰性求值

806
00:29:49,106 --> 0:29:50,196
和矢量运算完成

807
00:29:50,956 --> 0:29:53,716
还有一些其他

808
00:29:53,716 --> 0:29:54,576
有意思的地方

809
00:29:54,686 --> 0:29:56,596
例如你可以在训练中

810
00:29:56,596 --> 0:29:58,616
切分数据表格

811
00:29:58,696 --> 0:29:59,946
也可以过滤数据

812
00:30:00,746 --> 0:30:02,146
举个例子

813
00:30:02,146 --> 0:30:04,406
如果你只对大房子感兴趣

814
00:30:04,406 --> 0:30:05,956
就可以创建一个指示变量

815
00:30:05,956 --> 0:30:06,896
然后进行过滤

816
00:30:08,116 --> 0:30:09,846
列表数据支持

817
00:30:09,846 --> 0:30:11,656
很多种操作

818
00:30:11,656 --> 0:30:13,686
希望大家可以在 Xcode

819
00:30:13,686 --> 0:30:14,626
Playground 中多多尝试

820
00:30:14,766 --> 0:30:15,196
非常有意思

821
00:30:15,196 --> 0:30:19,406
现在 当你将数据

822
00:30:19,406 --> 0:30:20,706
添进表格后

823
00:30:20,746 --> 0:30:21,426
就可以开始训练了

824
00:30:22,846 --> 0:30:24,416
Create ML 支持

825
00:30:24,416 --> 0:30:25,766
很多种算法

826
00:30:25,766 --> 0:30:29,006
例如 提升树算法

827
00:30:29,006 --> 0:30:30,146
随机森林回归算法 等等

828
00:30:31,256 --> 0:30:33,526
这些算法

829
00:30:33,526 --> 0:30:34,506
有各自的级

830
00:30:34,506 --> 0:30:37,936
想要训练模型

831
00:30:37,936 --> 0:30:39,816
你只需要一行代码

832
00:30:40,246 --> 0:30:41,786
就是说 你只要

833
00:30:41,826 --> 0:30:44,036
指定目标

834
00:30:44,036 --> 0:30:45,466
明确数据位置

835
00:30:45,466 --> 0:30:46,886
指定算法 就可以了

836
00:30:47,456 --> 0:30:49,846
在示例中 假设我们采用线性回归

837
00:30:49,846 --> 0:30:52,586
或普通线性回归算法

838
00:30:52,586 --> 0:30:53,816
你只需要

839
00:30:53,816 --> 0:30:56,676
说明数据来自 houseData

840
00:30:56,676 --> 0:30:57,876
以及数据列是 price

841
00:30:58,666 --> 0:31:03,016
如果选择 BoostedTreeRegression

842
00:30:58,666 --> 0:31:03,016
如果选择 BoostedTreeRegression

843
00:31:03,016 --> 0:31:04,746
就将线性回归算法

844
00:31:04,746 --> 0:31:06,676
替换掉就可以了

845
00:31:07,676 --> 0:31:09,946
RandomForest 是这个

846
00:31:11,316 --> 0:31:14,346
我们还提供

847
00:31:14,346 --> 0:31:16,186
高度提炼过的 MLRegressor

848
00:31:16,526 --> 0:31:18,066
它可以自动运行

849
00:31:18,066 --> 0:31:19,706
所有的算法

850
00:31:19,706 --> 0:31:20,666
并为你找出最合适的

851
00:31:21,516 --> 0:31:27,196
［ 掌声 ］

852
00:31:27,696 --> 0:31:28,866
这与我们的理念相吻合

853
00:31:28,866 --> 0:31:30,606
我们希望大家

854
00:31:30,606 --> 0:31:30,876
可以将精力用于其他任务

855
00:31:30,876 --> 0:31:32,476
示例中的任务就是

856
00:31:32,536 --> 0:31:32,916
预测房屋价格

857
00:31:32,916 --> 0:31:34,146
你们不应当

858
00:31:34,516 --> 0:31:36,286
花太多精力在算法的细节上

859
00:31:37,056 --> 0:31:38,776
如果你是算法方面的专家

860
00:31:38,776 --> 0:31:40,876
你也可以使用

861
00:31:40,876 --> 0:31:42,316
BoostedTree

862
00:31:42,316 --> 0:31:43,506
并自己修改其中的参数

863
00:31:48,156 --> 0:31:50,446
一个完整的开发流程

864
00:31:50,446 --> 0:31:51,126
就是这样的

865
00:31:52,016 --> 0:31:54,396
跟图像和文本的

866
00:31:54,396 --> 0:31:56,196
流程一模一样

867
00:31:56,586 --> 0:31:59,956
首先是指定数据

868
00:32:00,276 --> 0:32:02,616
第二点是

869
00:32:03,646 --> 0:32:04,096
创建自己的模型

870
00:32:04,546 --> 0:32:05,966
第三 评估模型

871
00:32:07,346 --> 0:32:09,126
一旦你感到满意就

872
00:32:09,126 --> 0:32:09,386
保存模型

873
00:32:10,536 --> 0:32:13,856
列表数据 图像数据

874
00:32:14,086 --> 0:32:15,746
文本数据的

875
00:32:15,806 --> 0:32:17,206
流程都是一样的

876
00:32:19,876 --> 0:32:21,466
现在让我们

877
00:32:21,466 --> 0:32:23,856
快速回忆一下

878
00:32:23,946 --> 0:32:24,356
本次会议的内容

879
00:32:27,676 --> 0:32:30,896
Create ML 是我们机器学习框架的新工具

880
00:32:30,896 --> 0:32:33,156
它简单易用

881
00:32:33,156 --> 0:32:34,876
功能强大

882
00:32:34,876 --> 0:32:36,836
它搭载了 Apple 的核心技术

883
00:32:36,836 --> 0:32:38,226
你可以在 Mac 上用 Swift

884
00:32:38,226 --> 0:32:40,686
完整运用机器学习

885
00:32:43,256 --> 0:32:45,116
我们还说到

886
00:32:45,176 --> 0:32:46,036
工作流程

887
00:32:46,976 --> 0:32:49,896
你需要从功能入手

888
00:32:50,576 --> 0:32:52,366
你想要实现什么样的功能

889
00:32:53,716 --> 0:32:55,196
然后发现问题

890
00:32:55,946 --> 0:32:57,176
收集数据

891
00:32:57,456 --> 0:33:00,456
要保证你的数据可以反映

892
00:32:57,456 --> 0:33:00,456
要保证你的数据可以反映

893
00:33:00,456 --> 0:33:02,776
真实的使用场景

894
00:33:03,606 --> 0:33:05,156
然后训练模型

895
00:33:05,536 --> 0:33:07,186
最后评估模型

896
00:33:08,016 --> 0:33:10,406
满意之后

897
00:33:10,476 --> 0:33:14,366
保存模型

898
00:33:14,636 --> 0:33:17,046
Create ML 基于 Swift 语言

899
00:33:17,406 --> 0:33:19,496
在 macOS Mojave 中已经可以使用

900
00:33:22,836 --> 0:33:24,396
你可以在 Xcode Playground

901
00:33:24,396 --> 0:33:28,206
Swift Scripts

902
00:33:28,206 --> 0:33:29,076
及 Swift REPL 中使用

903
00:33:29,076 --> 0:33:30,536
大家多多尝试

904
00:33:32,326 --> 0:33:33,776
我们很期待大家的反馈

905
00:33:33,776 --> 0:33:35,546
我们会收集反馈

906
00:33:35,546 --> 0:33:37,946
希望你们也同样

907
00:33:37,946 --> 0:33:38,956
喜爱 Create ML

908
00:33:41,456 --> 0:33:43,146
我们之后还有

909
00:33:43,146 --> 0:33:44,656
机器学习的聚会

910
00:33:44,656 --> 0:33:45,146
以及实验室议程

911
00:33:45,296 --> 0:33:46,946
明天也有一个聚会

912
00:33:47,376 --> 0:33:49,046
我们也会在实验室

913
00:33:49,046 --> 0:33:50,236
希望届时能得到大家的反馈

914
00:33:51,346 --> 0:33:52,866
在 WWDC 的 App 中

915
00:33:52,866 --> 0:33:53,986
有相关的会议信息

916
00:33:54,146 --> 0:33:56,626
明天上午有 Core ML 的会议

917
00:33:56,626 --> 0:34:00,346
下午是机器学习的会议

918
00:33:56,626 --> 0:34:00,346
下午是机器学习的会议

919
00:34:00,346 --> 0:34:03,516
周四有一个

920
00:34:05,216 --> 0:34:05,606
视觉内容的会议

921
00:34:05,606 --> 0:34:08,795
在周三和周五 我们有实验室议程

922
00:34:09,466 --> 0:34:09,786
感谢大家

923
00:34:10,516 --> 0:34:20,370
［ 掌声 ］
