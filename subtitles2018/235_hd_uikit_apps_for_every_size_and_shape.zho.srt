1
00:00:17,818 --> 0:00:21,388
（UIKit：各种尺寸和形状的app

2
00:00:21,722 --> 0:00:23,123
我叫David Duncan

3
00:00:23,423 --> 0:00:27,361
我的同事Tyler Fox和

4
00:00:27,861 --> 0:00:29,096
我们在这里与大家讨论

5
00:00:29,563 --> 0:00:32,566
如何构建各种尺寸和形状的app

6
00:00:34,535 --> 0:00:37,337
当我们在最初的iPhone上

7
00:00:37,404 --> 0:00:39,806
我不知道你们中当时有多少人在这里

8
00:00:40,240 --> 0:00:42,442
但那时你们只有一个屏幕尺寸

9
00:00:43,343 --> 0:00:48,982
但今天我们有iPhone

10
00:00:49,449 --> 0:00:52,286
我们已经有了iPhone X

11
00:00:52,352 --> 0:00:54,454
和一个新的形状

12
00:00:55,756 --> 0:00:59,560
在这次演讲中我们将使用

13
00:00:59,626 --> 0:01:04,631
它可以很好地适应

14
00:00:59,626 --> 0:01:04,631
它可以很好地适应

15
00:01:06,466 --> 0:01:07,301
好的

16
00:01:07,734 --> 0:01:10,637
这就是我们今天要

17
00:01:11,238 --> 0:01:13,607
我将谈到安全区域和布局边界

18
00:01:13,807 --> 0:01:15,542
以及如何在你的app中使用它们

19
00:01:15,776 --> 0:01:17,945
来匹配各种屏幕尺寸和形状

20
00:01:19,379 --> 0:01:22,616
然后Tyler会上来和你们讨论

21
00:01:22,683 --> 0:01:24,618
讨论它们如何与安全区域

22
00:01:24,685 --> 0:01:26,987
布局边界和

23
00:01:28,722 --> 0:01:31,458
最后Russell会和大家讨论

24
00:01:31,525 --> 0:01:34,928
如何使用所有的UIKit工具来

25
00:01:35,863 --> 0:01:40,501
好吧 有了这些 现在我们开始讨论

26
00:01:42,269 --> 0:01:46,240
那么什么是安全区域呢

27
00:01:46,306 --> 0:01:47,774
看起来是什么样子的呢？

28
00:01:48,342 --> 0:01:49,943
在矩形屏幕的iPhone 8上

29
00:01:50,010 --> 0:01:53,714
它的整个屏幕都是一个安全区域

30
00:01:54,147 --> 0:01:57,184
所有内容都在那里 内容没有被覆盖

31
00:01:58,886 --> 0:02:03,657
在iPhone X上 在其顶部

32
00:01:58,886 --> 0:02:03,657
在iPhone X上 在其顶部

33
00:02:03,724 --> 0:02:09,663
这些硬件应从你的app

34
00:02:10,531 --> 0:02:13,534
在横屏中你会有一些类似的东西

35
00:02:13,600 --> 0:02:15,469
在其上面我们给你提供了对称布局

36
00:02:15,536 --> 0:02:17,971
在底部有一些空间供给

37
00:02:18,038 --> 0:02:19,940
让你可以安全地放置你的内容

38
00:02:21,341 --> 0:02:22,376
但是还有哪些设备

39
00:02:22,442 --> 0:02:25,145
可能有一个不属于整个屏幕的

40
00:02:26,947 --> 0:02:30,150
实际上Apple TV

41
00:02:30,651 --> 0:02:32,920
因为某些电视屏幕可能

42
00:02:32,986 --> 0:02:36,823
实际上已经超出了

43
00:02:37,291 --> 0:02:39,359
这些表明它们的信息

44
00:02:39,426 --> 0:02:41,828
是基于所谓的超扫描补偿的

45
00:02:42,462 --> 0:02:43,931
表明在你为Apple TV

46
00:02:43,997 --> 0:02:47,167
构建的任何app中

47
00:02:48,802 --> 0:02:52,306
现在我们已经看到了一些安全区域

48
00:02:52,372 --> 0:02:56,143
在设备屏幕上是什么样子的例子

49
00:02:56,577 --> 0:02:59,279
如何在你自己的app中使用它

50
00:02:59,346 --> 0:03:01,048
来构建自适应app呢？

51
00:02:59,346 --> 0:03:01,048
来构建自适应app呢？

52
00:03:03,483 --> 0:03:06,220
好的 我们取任意一个视图

53
00:03:06,653 --> 0:03:12,025
视图所有的东西 在视图的

54
00:03:12,526 --> 0:03:17,998
它们代表可能有某个覆盖的区域

55
00:03:18,065 --> 0:03:20,767
如果你把内容放到了那里的话

56
00:03:21,735 --> 0:03:26,507
你可以使用安全区域嵌入属性

57
00:03:26,840 --> 0:03:28,342
一个UI边缘嵌入

58
00:03:28,408 --> 0:03:29,743
它有这四个值

59
00:03:30,944 --> 0:03:32,946
现在如果你用自动布局来做布局的话

60
00:03:33,013 --> 0:03:36,717
那么实际上你可能只想看到

61
00:03:37,351 --> 0:03:41,288
你可以通过查看安全区布局指南

62
00:03:41,522 --> 0:03:45,893
这是一个表示这些信息的

63
00:03:45,959 --> 0:03:48,295
它有布局锚供你进行自动布局

64
00:03:48,362 --> 0:03:51,131
以及一个布局框架

65
00:03:53,166 --> 0:03:56,336
现在我们已经看到了

66
00:03:57,037 --> 0:04:00,274
让我们再看看

67
00:03:57,037 --> 0:04:00,274
让我们再看看

68
00:04:01,708 --> 0:04:05,412
为此我们将删除文本

69
00:04:05,779 --> 0:04:08,715
这将覆盖该视图的大部分底部边缘

70
00:04:10,484 --> 0:04:13,854
那么现在安全区域是如何计算的呢？

71
00:04:14,321 --> 0:04:18,158
正如我们看到的

72
00:04:18,659 --> 0:04:22,329
它侵犯了父视图的左、右和底部的

73
00:04:22,963 --> 0:04:25,699
不安全部分

74
00:04:26,400 --> 0:04:30,204
这些就是数值

75
00:04:30,270 --> 0:04:32,172
表示那个子视图安全区域

76
00:04:32,239 --> 0:04:33,140
内嵌入的属性

77
00:04:33,774 --> 0:04:36,910
类似地

78
00:04:36,977 --> 0:04:39,046
它的布局框架看起来有点像这个

79
00:04:40,514 --> 0:04:45,319
现在一旦你看到了这个

80
00:04:45,385 --> 0:04:48,388
你可能希望为你的UI

81
00:04:48,722 --> 0:04:52,759
你可能会决定要通过

82
00:04:52,826 --> 0:04:55,996
这些控件随后将添加到安全区

83
00:04:56,396 --> 0:04:57,431
或者从安全区中减去

84
00:04:58,232 --> 0:05:00,100
我们继续添加另一个子视图

85
00:04:58,232 --> 0:05:00,100
我们继续添加另一个子视图

86
00:05:01,835 --> 0:05:04,638
此外它还有一个视图控制器

87
00:05:05,072 --> 0:05:07,307
因为在视图控制器上

88
00:05:07,374 --> 0:05:09,576
它允许你可以添加额外的嵌入

89
00:05:10,110 --> 0:05:14,648
这个属性叫做额外的安全区嵌入

90
00:05:15,482 --> 0:05:18,485
我们现在继续

91
00:05:19,386 --> 0:05:22,456
将这些额外的安全区嵌入

92
00:05:22,956 --> 0:05:26,793
最后构建最终的安全区布局指南

93
00:05:28,328 --> 0:05:29,696
在你的app中

94
00:05:29,763 --> 0:05:31,932
你还想了解哪些安全区域的行为呢？

95
00:05:32,566 --> 0:05:34,635
好吧 让我们看另一个例子

96
00:05:35,102 --> 0:05:38,972
在这里我们在父视图安全区域内

97
00:05:39,306 --> 0:05:40,874
所以这个视图安全区 当然

98
00:05:40,941 --> 0:05:43,210
封装了这个视图的整个区域

99
00:05:43,944 --> 0:05:45,679
我们把它移到一边

100
00:05:45,746 --> 0:05:48,148
正如你所期望的

101
00:05:48,215 --> 0:05:50,851
因为我们还没有离开父视图的安全区

102
00:05:52,019 --> 0:05:53,620
好的 我们会再往外移一点

103
00:05:54,188 --> 0:05:58,091
你会看到在那个安全区域的

104
00:05:58,158 --> 0:06:00,494
它占据了它重叠的部分

105
00:05:58,158 --> 0:06:00,494
它占据了它重叠的部分

106
00:06:01,094 --> 0:06:03,664
在那里在延伸它的父视图安全区之外

107
00:06:04,164 --> 0:06:07,634
当我们靠近边缘时 它继续延伸

108
00:06:08,502 --> 0:06:09,837
若我们继续将这个视图

109
00:06:09,903 --> 0:06:12,806
你想它将会发生什么呢？

110
00:06:14,842 --> 0:06:15,809
好吧 你觉得怎么样？

111
00:06:16,410 --> 0:06:20,948
当视图移出父视图时

112
00:06:21,615 --> 0:06:24,918
不论那个视图移开距离父视图有多远

113
00:06:25,719 --> 0:06:28,722
现在你可能会自问

114
00:06:28,922 --> 0:06:32,593
“其目的是什么？” 答案是动画

115
00:06:33,193 --> 0:06:36,363
在这个特殊的例子中

116
00:06:36,797 --> 0:06:39,666
我们不希望内容停留在安全区内

117
00:06:39,733 --> 0:06:41,969
因为那样它就不会

118
00:06:42,402 --> 0:06:44,638
我们可以看到这个app的例子

119
00:06:45,172 --> 0:06:48,308
我们从它的底部拉出一个视图

120
00:06:49,543 --> 0:06:53,213
若这个视图是针对其父安全区展开的

121
00:06:53,614 --> 0:06:56,216
那么随着这个视图

122
00:06:56,283 --> 0:06:58,552
其父安全区将随着扩展

123
00:06:59,119 --> 0:07:04,258
那么这个区域就会在整个过渡期间

124
00:06:59,119 --> 0:07:04,258
那么这个区域就会在整个过渡期间

125
00:07:04,925 --> 0:07:08,529
这意味着你不会看到背景随着它出现

126
00:07:09,129 --> 0:07:13,300
所以这就是为什么安全区

127
00:07:13,367 --> 0:07:14,735
都不会比其父视图提供的更大

128
00:07:16,036 --> 0:07:18,639
那么我们总结一下这个安全区域部分

129
00:07:18,705 --> 0:07:21,708
让我们看一下你如何与它交互

130
00:07:22,209 --> 0:07:25,445
我们又一次提到了安全区嵌入属性

131
00:07:25,512 --> 0:07:27,314
和安全区布局指南属性

132
00:07:28,048 --> 0:07:32,152
但是如果你的视图需要在

133
00:07:32,219 --> 0:07:35,923
那么你可以重写

134
00:07:37,424 --> 0:07:39,893
典型做法是调用

135
00:07:39,960 --> 0:07:42,930
但是如果你需要运行任何其他逻辑

136
00:07:43,730 --> 0:07:47,701
如果你的视图控制器需要响应

137
00:07:48,135 --> 0:07:51,405
那么你可以在视图控制器上覆盖

138
00:07:51,471 --> 0:07:52,673
视图安全区域的变化

139
00:07:53,640 --> 0:07:56,476
最后如果你在IB中处理你的界面

140
00:07:56,977 --> 0:07:59,179
那么你就可以使用安全区域属性

141
00:07:59,479 --> 0:08:04,818
如视图列表所示

142
00:07:59,479 --> 0:08:04,818
如视图列表所示

143
00:08:06,386 --> 0:08:08,188
所以一个安全区域解释就是这样的

144
00:08:08,255 --> 0:08:10,390
让我们来谈谈布局边界

145
00:08:13,327 --> 0:08:17,397
布局边距就是填充

146
00:08:17,998 --> 0:08:22,202
一般来说它是一个

147
00:08:22,269 --> 0:08:25,672
它允许你从视图的边缘指定一个空间

148
00:08:26,773 --> 0:08:29,243
像使用安全区域一样

149
00:08:29,309 --> 0:08:32,813
而这一次称为布局边界

150
00:08:33,914 --> 0:08:38,418
现在 去年 我们还增加了

151
00:08:39,152 --> 0:08:41,955
它们不同于布局边界

152
00:08:42,022 --> 0:08:44,558
因为布局边界使用UI边缘嵌入值

153
00:08:45,158 --> 0:08:48,562
而定向布局边界使用

154
00:08:49,496 --> 0:08:51,798
这两种结构的主要区别在于

155
00:08:51,865 --> 0:08:55,602
方向嵌入使用前导和尾随

156
00:08:56,136 --> 0:08:59,506
这使得创建

157
00:08:59,573 --> 0:09:01,708
变得非常容易

158
00:08:59,573 --> 0:09:01,708
变得非常容易

159
00:09:01,909 --> 0:09:04,077
所以当你在使用定向布局边界时

160
00:09:04,144 --> 0:09:06,013
你就不需要在左右之间进行切换了

161
00:09:07,147 --> 0:09:08,849
现在 就像安全区域一样

162
00:09:09,483 --> 0:09:12,686
我们提供了一个编剧指南

163
00:09:13,520 --> 0:09:17,658
你可以使用自动布局

164
00:09:18,325 --> 0:09:22,396
然后我们继续

165
00:09:24,097 --> 0:09:26,366
既然我们讨论的是布局边界

166
00:09:26,433 --> 0:09:29,403
你可能会问的下一个问题是

167
00:09:30,604 --> 0:09:33,140
它们两个是如何相互作用的呢？

168
00:09:34,174 --> 0:09:36,410
好吧 我们继续 把那些标记带回来

169
00:09:37,144 --> 0:09:40,747
哦 是的 我是想谈谈

170
00:09:42,649 --> 0:09:48,021
因此使用安全区域

171
00:09:48,822 --> 0:09:52,292
然后就安全区域构我们建布局边界

172
00:09:52,759 --> 0:09:55,963
我们这样做的最明显的答案是

173
00:09:56,029 --> 0:09:58,532
在默认情况下

174
00:09:58,599 --> 0:10:01,201
你希望你的布局边界放在安全区域内

175
00:09:58,599 --> 0:10:01,201
你希望你的布局边界放在安全区域内

176
00:10:01,268 --> 0:10:04,905
因为它们表示的是

177
00:10:05,939 --> 0:10:10,844
但是我们经过寻思之后会对自己说

178
00:10:11,345 --> 0:10:13,914
所以我们会让你很容易跳过这个默认

179
00:10:14,248 --> 0:10:16,850
如果你把安全区域属性的

180
00:10:16,917 --> 0:10:21,722
从真实改为错误

181
00:10:21,788 --> 0:10:24,191
把布局边距移回视图的边界

182
00:10:24,625 --> 0:10:27,728
作为安全区域的对等体

183
00:10:28,462 --> 0:10:30,364
利用布局边界

184
00:10:30,898 --> 0:10:33,600
好的 我们已经看到 在默认情况下

185
00:10:33,967 --> 0:10:36,436
安全区域边界会向下

186
00:10:37,704 --> 0:10:40,107
但对于布局边界在默认的情况下

187
00:10:40,174 --> 0:10:43,143
因为默认情况下你的布局很可能想要

188
00:10:43,210 --> 0:10:46,480
其边界独立于安全区域

189
00:10:46,547 --> 0:10:48,715
这代表了整个视图层次结构的概念

190
00:10:50,317 --> 0:10:53,854
但是如果你想要传播的话

191
00:10:54,521 --> 0:10:56,924
通过改变保存超级视图布局的边界

192
00:10:56,990 --> 0:10:59,159
从错误改为真实来翻转这个

193
00:11:00,060 --> 0:11:03,263
我们继续 我们会把

194
00:11:03,664 --> 0:11:07,167
以确保在父视图和子视图之间的

195
00:11:07,234 --> 0:11:09,169
一切东西都很自然地对齐

196
00:11:11,305 --> 0:11:15,676
在过去的几年里

197
00:11:15,742 --> 0:11:17,411
布局边界

198
00:11:18,278 --> 0:11:20,647
如果你看我们在默认情况下

199
00:11:21,281 --> 0:11:24,318
那么你会看到在这个视图上的

200
00:11:25,118 --> 0:11:28,322
去年我们还添加了一个属性

201
00:11:28,922 --> 0:11:31,158
称为系统最小布局边界

202
00:11:31,792 --> 0:11:35,696
这些边界是我们与你现在提供的

203
00:11:35,762 --> 0:11:39,733
所有边界相结合而得出的最小边界

204
00:11:40,133 --> 0:11:42,402
所以如果你想要添加到

205
00:11:42,469 --> 0:11:44,304
你可以这样做而不会干扰

206
00:11:44,371 --> 0:11:46,673
UIKit提供的左右边界

207
00:11:47,474 --> 0:11:49,810
但是同样 你可能需要更多的控制

208
00:11:50,310 --> 0:11:51,745
所以 还有另外一个属性

209
00:11:52,713 --> 0:11:55,949
叫做viewRespects

210
00:11:56,717 --> 0:12:00,387
如果你想让你的边界

211
00:11:56,717 --> 0:12:00,387
如果你想让你的边界

212
00:12:00,854 --> 0:12:05,392
将其翻转为错误

213
00:12:05,459 --> 0:12:06,593
没有任何问题

214
00:12:07,995 --> 0:12:13,367
这样 要完成布局边界

215
00:12:13,433 --> 0:12:17,671
是布局边界属性

216
00:12:18,338 --> 0:12:21,608
定向布局边界

217
00:12:21,842 --> 0:12:23,510
顶部 底部 前导和尾随都很好

218
00:12:24,444 --> 0:12:28,682
你可以在自动布局中使用

219
00:12:29,816 --> 0:12:33,854
最后当布局边界在视图中发生变化时

220
00:12:33,921 --> 0:12:36,490
你可以覆盖

221
00:12:36,557 --> 0:12:38,425
并在那里执行你需要做的任何逻辑

222
00:12:39,293 --> 0:12:43,330
在界面构建器中

223
00:12:43,397 --> 0:12:45,699
只需检查那个约束到边界框即可

224
00:12:46,433 --> 0:12:50,270
接下来有请Tyler Fox

225
00:12:58,712 --> 0:13:00,814
谢谢David 下午好

226
00:12:58,712 --> 0:13:00,814
谢谢David 下午好

227
00:13:01,448 --> 0:13:05,352
正如David提到的

228
00:13:05,752 --> 0:13:09,456
滚动视图是iOS操作的关键部分

229
00:13:09,523 --> 0:13:12,559
它们出现在整个系统中 在表格视图

230
00:13:12,626 --> 0:13:15,462
在集合视图 UI文本视图都有

231
00:13:15,529 --> 0:13:18,232
当然在你的所有app中的

232
00:13:19,032 --> 0:13:22,169
在我们的Bagel Times中

233
00:13:22,236 --> 0:13:26,206
正如你所知

234
00:13:26,273 --> 0:13:27,841
正如你所看到的

235
00:13:27,908 --> 0:13:30,544
所有的东西都是

236
00:13:30,611 --> 0:13:33,480
你知道

237
00:13:33,547 --> 0:13:35,349
正在收集的高质量的内容

238
00:13:35,716 --> 0:13:39,052
比如 探索

239
00:13:39,786 --> 0:13:41,889
我们还想回顾一些关于

240
00:13:41,955 --> 0:13:45,826
如何在app中使用

241
00:13:45,893 --> 0:13:50,631
了解它们如何帮助你将内容调整到

242
00:13:52,065 --> 0:13:54,801
为此我们将在这里介绍一个例子

243
00:13:54,868 --> 0:13:57,137
我们将从一个全屏滚动视图开始

244
00:13:57,538 --> 0:13:58,872
在左边我将向大家展示

245
00:13:58,939 --> 0:14:01,575
在一个真正的设备上

246
00:13:58,939 --> 0:14:01,575
在一个真正的设备上

247
00:14:01,642 --> 0:14:04,845
在右边我们要看一些屏幕后的事情

248
00:14:04,912 --> 0:14:07,214
并了解图中发生了什么

249
00:14:08,015 --> 0:14:11,185
所以 我们今天所说的一切

250
00:14:11,251 --> 0:14:13,754
我们将讨论所有垂直的Y轴

251
00:14:13,820 --> 0:14:16,523
但是所有的东西都同样适用于X轴

252
00:14:17,124 --> 0:14:20,394
我们也要用一些简单的值来进行说明

253
00:14:20,460 --> 0:14:22,396
那么在这个例子中

254
00:14:22,462 --> 0:14:24,231
我们滚动视图的高度是400个点

255
00:14:25,699 --> 0:14:29,069
现在在你的滚动视图中

256
00:14:29,837 --> 0:14:33,440
你可以想到一个滚动视图

257
00:14:33,807 --> 0:14:37,845
滚动视图的大小在某种程度上

258
00:14:38,045 --> 0:14:40,714
然后在里面图片就是你的内容

259
00:14:40,781 --> 0:14:44,451
某种程度上内容可以滑动

260
00:14:45,085 --> 0:14:48,088
现在在这个例子中

261
00:14:48,255 --> 0:14:50,691
这是因为我们的内容的高度

262
00:14:50,757 --> 0:14:55,229
根据内容的多少

263
00:14:55,963 --> 0:14:58,565
在这里我关掉了右边这张图的剪辑

264
00:14:58,632 --> 0:15:01,168
这样我们就可以看到

265
00:14:58,632 --> 0:15:01,168
这样我们就可以看到

266
00:15:02,269 --> 0:15:06,240
因此滚动视图使用

267
00:15:06,306 --> 0:15:08,408
它是表示滚动视图

268
00:15:09,176 --> 0:15:10,911
现在我们已经滚动到了最顶端了

269
00:15:10,978 --> 0:15:15,015
所以contentOffset

270
00:15:15,082 --> 0:15:17,584
与滚动视图的上边缘已经对齐

271
00:15:18,785 --> 0:15:21,288
现在如果我们继续向下滚动视图

272
00:15:21,355 --> 0:15:23,156
它会将我们的内容向上滑动

273
00:15:23,223 --> 0:15:25,759
那么让我们滚动到底部

274
00:15:26,293 --> 0:15:31,031
正如你在我们的例子中所看到的

275
00:15:31,098 --> 0:15:32,833
内容偏移量会一直增加到100

276
00:15:33,100 --> 0:15:36,103
这是因为滚动视图的顶部边缘

277
00:15:36,170 --> 0:15:39,406
现在比内容区域的

278
00:15:40,474 --> 0:15:42,809
如果我们在滚动视图上设置一个

279
00:15:42,876 --> 0:15:45,746
contentOffset为0

280
00:15:46,246 --> 0:15:47,681
我们又回到了起点

281
00:15:48,549 --> 0:15:52,052
所以这就是滚动

282
00:15:52,319 --> 0:15:54,421
现在让我们谈谈一个

283
00:15:55,122 --> 0:15:58,225
可滚动区域的非常重要的概念

284
00:15:58,659 --> 0:16:01,361
我们通过一个叫做

285
00:15:58,659 --> 0:16:01,361
我们通过一个叫做

286
00:16:02,629 --> 0:16:07,401
所以contentInset

287
00:16:07,467 --> 0:16:11,605
你可以从滚动视图可滚动区域的边缘

288
00:16:12,339 --> 0:16:16,009
因此添加contentInset

289
00:16:16,076 --> 0:16:19,046
滚动视图能够滚动到更大的区域

290
00:16:19,546 --> 0:16:23,250
让我们在上面边缘设置一个

291
00:16:24,351 --> 0:16:26,486
这里我们将

292
00:16:27,054 --> 0:16:30,190
正如你所看到的

293
00:16:30,257 --> 0:16:32,192
这样滚动区域就现在就变得更大了

294
00:16:33,093 --> 0:16:36,396
现在当我们的

295
00:16:36,730 --> 0:16:39,366
我们的内容仍然与

296
00:16:39,766 --> 0:16:43,437
但滚动视图实际上可以

297
00:16:44,271 --> 0:16:46,240
所以让我们像以前一样滚动

298
00:16:46,306 --> 0:16:47,941
观察事物是如何变化的

299
00:16:48,876 --> 0:16:50,344
我们将滚动到底部

300
00:16:50,410 --> 0:16:54,181
就像以前一样 我们仍然在这里

301
00:16:54,748 --> 0:16:57,417
那是因为我们没有改变

302
00:16:57,484 --> 0:16:59,920
我们底部的

303
00:17:00,921 --> 0:17:05,157
如果我们现在继续往回滚动

304
00:17:05,425 --> 0:17:08,395
我们实际上会得到一个为负值的

305
00:17:09,663 --> 0:17:13,934
这是因为我们现在的滚动

306
00:17:14,201 --> 0:17:17,570
这样我们就可以滚动到顶部边缘的

307
00:17:17,637 --> 0:17:18,704
负值contentInset

308
00:17:20,339 --> 0:17:21,909
现在我们从iOS 7开始

309
00:17:22,509 --> 0:17:24,978
contentInset

310
00:17:25,045 --> 0:17:27,814
这是因为在iOS 7中

311
00:17:27,881 --> 0:17:30,217
在整个系统中变得非常普遍了

312
00:17:30,284 --> 0:17:33,620
这个想法是

313
00:17:33,787 --> 0:17:37,791
它会从下面露出滚动条

314
00:17:37,858 --> 0:17:41,895
通过滚动条获得漂亮的彩色框

315
00:17:42,496 --> 0:17:46,066
因为这很常见

316
00:17:46,133 --> 0:17:50,003
自动设置滚动视图上的contentInset

317
00:17:50,604 --> 0:17:53,407
为此我们在

318
00:17:54,208 --> 0:17:57,344
这被称为自动调整滚动视图嵌入

319
00:17:57,744 --> 0:18:02,883
其目的是当滚动视图上

320
00:17:57,744 --> 0:18:02,883
其目的是当滚动视图上

321
00:18:03,417 --> 0:18:07,955
重叠栏时 将自动设置滚动

322
00:18:08,488 --> 0:18:11,458
这是因为当你的滚动视图

323
00:18:11,525 --> 0:18:14,328
它本身就包含在导航控制器里面了

324
00:18:15,495 --> 0:18:17,731
现在对于一些常见的情况

325
00:18:17,998 --> 0:18:22,703
但若你的app有更多自定义或高级

326
00:18:23,303 --> 0:18:27,374
有时让你的代码设置

327
00:18:27,441 --> 0:18:30,744
和UIKit设置相同的contentInset属性

328
00:18:31,612 --> 0:18:35,249
因此从iOS 11开始

329
00:18:35,315 --> 0:18:38,952
和强大的方法

330
00:18:39,653 --> 0:18:43,390
实现这一点的机制是利用

331
00:18:43,790 --> 0:18:46,660
我们现在会讲到它

332
00:18:48,262 --> 0:18:51,899
所以从iOS 11开始我们在

333
00:18:51,965 --> 0:18:56,136
它是只读的

334
00:18:56,203 --> 0:18:58,739
它基本上描述了

335
00:18:59,540 --> 0:19:01,074
你可能会问我们刚才讨论的

336
00:18:59,540 --> 0:19:01,074
你可能会问我们刚才讨论的

337
00:19:01,141 --> 0:19:03,377
adjustedContentInset

338
00:19:03,443 --> 0:19:05,546
的区别是什么？

339
00:19:05,812 --> 0:19:08,081
一个好问题

340
00:19:09,216 --> 0:19:14,821
adjustedContentInset

341
00:19:14,888 --> 0:19:18,559
加上来自系统或UIKit的

342
00:19:19,660 --> 0:19:21,962
因为我们现在把这两个分开

343
00:19:22,029 --> 0:19:24,464
所以很容易推断出正在发生的事情

344
00:19:25,365 --> 0:19:28,735
当然你可能想要知道

345
00:19:28,802 --> 0:19:29,870
滚动视图中得到一个

346
00:19:30,838 --> 0:19:34,408
一个最常见的例子是

347
00:19:35,042 --> 0:19:38,645
让我们看看它是如何工作的

348
00:19:38,712 --> 0:19:41,348
但我们会把一些

349
00:19:42,683 --> 0:19:44,318
那么 如果我们现在开始的话

350
00:19:44,384 --> 0:19:46,887
我们在边缘没有

351
00:19:46,954 --> 0:19:49,423
但是我们将继续

352
00:19:49,489 --> 0:19:51,158
safeAreaInsets

353
00:19:52,359 --> 0:19:57,598
你会看到在默认情况下

354
00:19:57,664 --> 0:20:02,603
在其顶部边缘的safeAreaInsets放入到其

355
00:19:57,664 --> 0:20:02,603
在其顶部边缘的safeAreaInsets放入到其

356
00:20:02,803 --> 0:20:05,572
这是因为我们的滚动视图

357
00:20:05,772 --> 0:20:07,040
它的作用是

358
00:20:07,107 --> 0:20:10,010
它会自动增加

359
00:20:10,077 --> 0:20:13,380
使内容可以从下面从覆盖顶部边缘

360
00:20:13,447 --> 0:20:17,284
滚动出来 像一个条一样

361
00:20:19,119 --> 0:20:22,589
我们来看一个例子

362
00:20:22,656 --> 0:20:26,827
iPhone X在左边、iPhone 8在右边

363
00:20:27,160 --> 0:20:29,630
你可以看到这是一个真实的例子

364
00:20:29,696 --> 0:20:32,699
在iPhone X上

365
00:20:32,766 --> 0:20:36,103
因为它有更大的状态栏高度

366
00:20:36,570 --> 0:20:39,173
其结果是

367
00:20:39,239 --> 0:20:41,575
这是灰色的区域在顶部有阴影

368
00:20:42,576 --> 0:20:46,547
这是滚动视图自动适应

369
00:20:46,613 --> 0:20:47,681
它运行的任何设备的一种方式

370
00:20:48,282 --> 0:20:51,618
现在让我们回到我们的图上

371
00:20:52,786 --> 0:20:56,423
我们有这样的滚动视图

372
00:20:57,057 --> 0:20:59,493
让我们继续

373
00:20:59,860 --> 0:21:01,962
我们把这个放到内容区中

374
00:20:59,860 --> 0:21:01,962
我们把这个放到内容区中

375
00:21:02,196 --> 0:21:05,966
现在这个子视图完全位于滚动视图的

376
00:21:06,033 --> 0:21:06,934
安全区域内

377
00:21:08,068 --> 0:21:10,704
但是如果我们开始向下滚动

378
00:21:10,771 --> 0:21:13,607
它会移动那个内容向上 就像这样

379
00:21:14,074 --> 0:21:15,342
这个子视图的一部分

380
00:21:15,409 --> 0:21:18,579
这个时候会发生什么呢？

381
00:21:19,613 --> 0:21:23,283
根据David

382
00:21:23,717 --> 0:21:26,453
你可能会想 好吧

383
00:21:26,520 --> 0:21:29,489
将开始看到它自己的

384
00:21:30,324 --> 0:21:32,025
但事实并非如此

385
00:21:32,659 --> 0:21:35,128
原因是当滚动视图将安全区域的嵌入

386
00:21:35,195 --> 0:21:39,399
合并到它的调整后的内容嵌入中时

387
00:21:40,000 --> 0:21:43,937
它将不再将相同的嵌入向下传播到

388
00:21:44,004 --> 0:21:45,072
同一边缘上的子视图

389
00:21:46,240 --> 0:21:47,407
这是非常重要的一点

390
00:21:48,208 --> 0:21:53,547
滚动视图使用滚动来移动内容

391
00:21:54,481 --> 0:21:58,919
如果一个滚动视图也要传播

392
00:21:58,986 --> 0:22:01,555
它用来扩展它的可滚动区域的

393
00:21:58,986 --> 0:22:01,555
它用来扩展它的可滚动区域的

394
00:22:01,622 --> 0:22:03,390
它几乎就像是在两个不同的地方

395
00:22:03,457 --> 0:22:06,026
重复计算相同的嵌入

396
00:22:06,593 --> 0:22:07,528
结果是

397
00:22:07,594 --> 0:22:11,832
滚动轴上的子视图完全不知道

398
00:22:11,899 --> 0:22:14,835
边缘上有安全区域嵌入

399
00:22:14,902 --> 0:22:17,171
而滚动视图正将它们吸收到

400
00:22:18,405 --> 0:22:20,340
我们已了解了滚动视图

401
00:22:20,407 --> 0:22:23,477
让我们介绍一下我们所有的选项

402
00:22:23,544 --> 0:22:25,012
一边让你控制这种行为

403
00:22:26,780 --> 0:22:29,883
你必须这样做的机制是

404
00:22:29,950 --> 0:22:31,952
contentInsetAdjustmentBehavior

405
00:22:32,019 --> 0:22:35,689
它也可以在界面构建器上使用

406
00:22:36,590 --> 0:22:38,992
现在它的默认值是自动的

407
00:22:39,293 --> 0:22:41,895
大多数时候 如果不是所有的时候

408
00:22:41,962 --> 0:22:44,731
你真的应当把它把它设为它的默认值

409
00:22:45,199 --> 0:22:49,136
但我们想通过这些选项

410
00:22:49,203 --> 0:22:50,504
知道它们是可以使用的

411
00:22:50,571 --> 0:22:52,673
这样你就可以在app中

412
00:22:53,307 --> 0:22:54,775
我们从第一个开始

413
00:22:55,976 --> 0:22:58,445
第一个是始终如一的行为

414
00:22:58,512 --> 0:23:00,714
正如你所期望的那样 这非常简单

415
00:22:58,512 --> 0:23:00,714
正如你所期望的那样 这非常简单

416
00:23:00,781 --> 0:23:05,953
滚动视图总是将任何系统的嵌入

417
00:23:06,019 --> 0:23:08,922
包含在其任何边缘的调整内容中

418
00:23:09,289 --> 0:23:11,491
这在我们的具体例子中很有效

419
00:23:11,558 --> 0:23:14,595
我们的滚动视图中

420
00:23:14,828 --> 0:23:16,730
所以 它会合并它们

421
00:23:16,797 --> 0:23:19,066
内容会从这些栏下面移出来

422
00:23:19,132 --> 0:23:22,769
我们在左边或右边没有任何水平嵌入

423
00:23:23,170 --> 0:23:25,873
但是要注意这个

424
00:23:25,939 --> 0:23:29,176
比如iPhone X的

425
00:23:29,743 --> 0:23:31,612
就会有左和右安全区域嵌入

426
00:23:31,845 --> 0:23:35,082
使用此行为

427
00:23:35,148 --> 0:23:38,619
调整后的内容内嵌中

428
00:23:38,685 --> 0:23:41,255
这将使表视图可以水平滚动

429
00:23:41,555 --> 0:23:43,023
你不会想要那种行为

430
00:23:43,790 --> 0:23:46,860
这就是为何我们有下一个行为

431
00:23:47,761 --> 0:23:51,064
有了这个滚动视图将独立地考虑

432
00:23:51,131 --> 0:23:53,433
垂直轴和水平轴上的东西

433
00:23:53,867 --> 0:23:56,436
对于其中的每一个 如果内容大小

434
00:23:56,503 --> 0:23:58,705
超过了宽度或高度

435
00:23:59,273 --> 0:24:01,942
或者如果你设置了

436
00:23:59,273 --> 0:24:01,942
或者如果你设置了

437
00:24:02,009 --> 0:24:04,511
或者设置了alwaysBounceVertical

438
00:24:04,845 --> 0:24:07,447
那么滚动视图将考虑轴是可滚动的

439
00:24:07,614 --> 0:24:09,983
它会将任何系统嵌入

440
00:24:10,050 --> 0:24:11,618
包含到它的调整后的内容中

441
00:24:11,952 --> 0:24:15,455
所以在我后面的这个例子中

442
00:24:15,522 --> 0:24:18,158
所以我们把这些自动嵌入合并在一起

443
00:24:18,325 --> 0:24:20,694
但若我们有篇更短的文章

444
00:24:21,328 --> 0:24:24,464
好的 这是一篇较短的文章

445
00:24:24,531 --> 0:24:27,067
让我们看看导航条下面发生了什么

446
00:24:27,868 --> 0:24:31,071
看起来我们已经丢失了系统嵌入

447
00:24:31,138 --> 0:24:33,907
所以 我们的标题一直在状态栏下面

448
00:24:34,308 --> 0:24:37,578
让我们把导航条放回去

449
00:24:37,845 --> 0:24:41,181
一种方法是你可以在这个滚动视图上设置

450
00:24:41,248 --> 0:24:42,716
如果这是你想要的

451
00:24:42,783 --> 0:24:45,552
使滚动视图始终

452
00:24:45,786 --> 0:24:48,856
或者我们会达到下一个行为

453
00:24:49,590 --> 0:24:52,860
自动工作基本上与我们刚才谈到的

454
00:24:52,926 --> 0:24:57,297
scrollableAxes相同

455
00:24:57,364 --> 0:25:00,868
即当滚动视图位于

456
00:24:57,364 --> 0:25:00,868
即当滚动视图位于

457
00:25:01,568 --> 0:25:05,606
滚动视图将继续进行

458
00:25:05,873 --> 0:25:10,043
即使不是垂直滚动

459
00:25:10,344 --> 0:25:13,080
因此即使在这种情况下

460
00:25:13,146 --> 0:25:15,349
它仍然意味着我们得到了正确的嵌入

461
00:25:15,415 --> 0:25:17,284
这通常是你想要的行为

462
00:25:17,351 --> 0:25:19,086
这就是为什么我们设它为默认值

463
00:25:19,286 --> 0:25:20,554
不过我得提醒你一下

464
00:25:20,621 --> 0:25:23,924
如果将已弃用的automatically

465
00:25:23,991 --> 0:25:25,225
属性设置为错误

466
00:25:25,726 --> 0:25:27,694
则将禁用此行为

467
00:25:27,761 --> 0:25:30,264
其行为就像

468
00:25:31,198 --> 0:25:33,600
好了

469
00:25:33,800 --> 0:25:37,804
从来没有 现在

470
00:25:37,871 --> 0:25:41,108
这意味着滚动视图永远不会调整它

471
00:25:42,075 --> 0:25:44,578
然而这也有一些副作用

472
00:25:45,779 --> 0:25:49,883
首先这意味着滚动视图

473
00:25:49,950 --> 0:25:52,686
safeAreaInsets

474
00:25:53,053 --> 0:25:54,555
正如我们之前谈到的

475
00:25:54,621 --> 0:25:57,524
这可能会带给你一些

476
00:25:57,891 --> 0:26:00,060
例如 如果你回想一下你的布局边界

477
00:25:57,891 --> 0:26:00,060
例如 如果你回想一下你的布局边界

478
00:26:00,127 --> 0:26:02,596
是与安全区域的相关的

479
00:26:02,663 --> 0:26:05,332
可能会因此而增加或改变

480
00:26:06,366 --> 0:26:09,303
这也将禁用滚动视图提供的

481
00:26:09,369 --> 0:26:12,906
比如自动滚动指示器嵌入

482
00:26:13,640 --> 0:26:17,744
所以如果你在网上搜索 你知道的

483
00:26:17,811 --> 0:26:19,246
问题和回答网站建议你

484
00:26:19,313 --> 0:26:22,449
将你的滚动视图的

485
00:26:22,950 --> 0:26:26,053
而是使用附加的安全区域嵌入

486
00:26:26,119 --> 0:26:27,988
来增加安全区域嵌入

487
00:26:28,055 --> 0:26:31,091
如果你的目标是向系统表达说

488
00:26:31,158 --> 0:26:33,560
一个工具栏或者其他的覆盖

489
00:26:33,894 --> 0:26:37,998
或者你可能考虑要直接修改

490
00:26:38,065 --> 0:26:39,867
那个我们一开始讲过的属性

491
00:26:39,933 --> 0:26:43,103
那么这就是你可以使用的控制

492
00:26:43,170 --> 0:26:46,773
增加或减少

493
00:26:47,508 --> 0:26:49,510
我想有请Russell

494
00:26:49,576 --> 0:26:52,412
他将告诉你如何把这一切放在一起

495
00:26:58,252 --> 0:26:59,086
谢谢 Tyler

496
00:27:00,454 --> 0:27:03,357
现在我们已经引入了

497
00:27:03,423 --> 0:27:06,326
来帮助你的app适应不同的环境

498
00:27:06,627 --> 0:27:09,296
安全区域其实是最新的

499
00:27:09,530 --> 0:27:12,065
我将回顾其中的一些概念并讨论

500
00:27:12,132 --> 0:27:13,901
它们是如何与安全区一起工作的

501
00:27:15,769 --> 0:27:18,038
让我们进入app的第一个屏幕

502
00:27:18,305 --> 0:27:22,109
这里有一个很标准的设置

503
00:27:22,176 --> 0:27:26,280
包含一个带有我们的

504
00:27:27,447 --> 0:27:31,618
现在注意这三个视图控制器的视图

505
00:27:32,119 --> 0:27:35,989
这使得标签条

506
00:27:36,056 --> 0:27:38,725
导航栏可以扩展到状态栏下面

507
00:27:38,792 --> 0:27:41,895
而内容可以它下面扩展和滚动

508
00:27:43,530 --> 0:27:45,632
但我们需要防止这些元素重叠

509
00:27:45,699 --> 0:27:48,735
让我们看看安全区域是如何

510
00:27:50,270 --> 0:27:53,674
安全区域嵌入通过流经

511
00:27:53,740 --> 0:27:57,444
它只接收在Home Indicator

512
00:27:57,511 --> 0:27:59,479
因为这是它所看到的一切

513
00:28:00,714 --> 0:28:04,251
由于导航控制器位于其中

514
00:28:04,318 --> 0:28:07,521
所以它也会在底部接收一个安全区域

515
00:28:08,322 --> 0:28:11,592
内容视图控制器在这两个栏内

516
00:28:11,658 --> 0:28:12,993
用于记录两个栏

517
00:28:14,728 --> 0:28:16,797
现在这个故事在横屏上

518
00:28:17,497 --> 0:28:20,234
类似地

519
00:28:20,634 --> 0:28:22,836
但是在左侧和右侧也有嵌入

520
00:28:23,237 --> 0:28:26,306
用于记录屏幕两侧

521
00:28:26,373 --> 0:28:28,375
这些都是通过视图控制器层级

522
00:28:28,442 --> 0:28:30,944
从屏幕向下传播的

523
00:28:32,145 --> 0:28:35,516
现在我想在这里停下来

524
00:28:35,582 --> 0:28:38,285
当你在实现自己的视图时

525
00:28:38,352 --> 0:28:39,920
应该如何考虑使用安全区域

526
00:28:40,754 --> 0:28:45,225
这个自定义视图应该不知道

527
00:28:45,526 --> 0:28:49,396
它甚至不应该知道

528
00:28:50,597 --> 0:28:52,833
这是封装的目的

529
00:28:53,166 --> 0:28:56,003
如果你的视图只读取

530
00:28:56,069 --> 0:28:57,838
在所有四个侧面上提供给它们的

531
00:28:57,905 --> 0:29:04,645
并且能够适应任意安全区域嵌入

532
00:28:57,905 --> 0:29:04,645
并且能够适应任意安全区域嵌入

533
00:29:04,711 --> 0:29:08,649
这将确保你的视图是模块化的

534
00:29:08,715 --> 0:29:12,553
可以在你的整个app中移动

535
00:29:12,619 --> 0:29:13,887
并且仍然不会被遮挡

536
00:29:16,523 --> 0:29:20,494
现在让我们跳到一篇文章中

537
00:29:22,162 --> 0:29:26,033
因此隐藏状态栏是一种技术

538
00:29:26,099 --> 0:29:29,469
收回20点垂直屏幕

539
00:29:30,838 --> 0:29:34,675
而我们通过覆盖隐藏在

540
00:29:34,741 --> 0:29:37,411
首选状态栏来完成这一操作

541
00:29:37,477 --> 0:29:39,680
首选状态栏通过

542
00:29:39,746 --> 0:29:45,018
并受到系统根的尊重

543
00:29:46,587 --> 0:29:49,156
不幸的是在iPhone X上

544
00:29:49,223 --> 0:29:52,659
更喜欢隐藏状态栏

545
00:29:53,227 --> 0:29:55,896
所以我们不能在它下面滑动内容

546
00:29:57,931 --> 0:30:01,835
UIKit会保护你

547
00:29:57,931 --> 0:30:01,835
UIKit会保护你

548
00:30:01,902 --> 0:30:05,506
相反 iPhone X上

549
00:30:05,939 --> 0:30:08,375
当导航条可见时

550
00:30:08,442 --> 0:30:10,310
它将始终显示状态栏

551
00:30:11,845 --> 0:30:15,482
所以如果你想隐藏状态栏

552
00:30:15,549 --> 0:30:16,517
我们的建议是

553
00:30:16,583 --> 0:30:20,287
将导航栏和状态栏一起隐藏

554
00:30:21,788 --> 0:30:27,127
一般来说当你想创建一个

555
00:30:27,194 --> 0:30:29,997
只需将所有的覆盖和控件一起隐藏

556
00:30:30,831 --> 0:30:34,768
这不仅看起来很好

557
00:30:34,835 --> 0:30:39,373
它也是一个能很好地适应

558
00:30:41,642 --> 0:30:44,144
现在说到沉浸式体验

559
00:30:44,845 --> 0:30:46,547
让我们切换到iPad

560
00:30:46,613 --> 0:30:49,616
讨论在一个非常广泛的环境中

561
00:30:51,351 --> 0:30:53,620
这里你可以看到我们有文本

562
00:30:53,687 --> 0:30:57,257
它并没有一直延伸到视图的边缘

563
00:30:58,458 --> 0:30:59,726
这样做的问题是

564
00:30:59,793 --> 0:31:01,828
如果我们把文本全部写到了边缘

565
00:30:59,793 --> 0:31:01,828
如果我们把文本全部写到了边缘

566
00:31:01,895 --> 0:31:06,400
当你的眼睛会在给定字体大小下

567
00:31:06,466 --> 0:31:10,737
它会变得难以阅读

568
00:31:11,672 --> 0:31:17,344
因此解决方案是

569
00:31:17,711 --> 0:31:20,080
即系统根据用户当前选择的

570
00:31:20,414 --> 0:31:24,751
提供的推荐可读宽度

571
00:31:25,052 --> 0:31:29,656
动态类型是

572
00:31:31,258 --> 0:31:33,026
你能通过UIView上的API

573
00:31:33,427 --> 0:31:37,497
获得可读的宽度叫做

574
00:31:37,798 --> 0:31:39,199
这是另一个布局指南

575
00:31:39,266 --> 0:31:42,169
就像边界和安全区域的布局指南

576
00:31:42,970 --> 0:31:44,137
它的工作原理是一样的

577
00:31:46,707 --> 0:31:49,776
现在我提到了这个可读的宽度取决于

578
00:31:49,843 --> 0:31:53,213
用户当前选择的动态类型大小

579
00:31:53,280 --> 0:31:57,050
这意味着如果用户在控制中心或

580
00:31:57,484 --> 0:32:00,420
则可读宽度将变小或更大以进行补偿

581
00:31:57,484 --> 0:32:00,420
则可读宽度将变小或更大以进行补偿

582
00:32:03,223 --> 0:32:06,760
现在让我们切换到竖屏

583
00:32:06,827 --> 0:32:11,632
使文章的上下文显示变得更窄

584
00:32:12,032 --> 0:32:15,802
因此在这里最大推荐可读宽度

585
00:32:15,869 --> 0:32:19,306
比我们要显示文章的空间宽得多

586
00:32:20,174 --> 0:32:23,010
需要注意的是可读内容指南

587
00:32:23,076 --> 0:32:27,214
仍然不一定会报告所需最大可读宽度

588
00:32:27,281 --> 0:32:30,751
它将被固定到布局边界

589
00:32:30,817 --> 0:32:33,954
在readableContentGuide中

590
00:32:34,021 --> 0:32:36,823
不要担心它们会超出你的边界

591
00:32:39,593 --> 0:32:43,297
现在让我们看看它是

592
00:32:43,897 --> 0:32:47,234
readableContentGuide

593
00:32:47,301 --> 0:32:51,471
它的嵌入添加到由

594
00:32:53,507 --> 0:32:59,046
通常情况下

595
00:32:59,112 --> 0:33:03,817
可读的宽度将会比iPhone

596
00:32:59,112 --> 0:33:03,817
可读的宽度将会比iPhone

597
00:33:03,884 --> 0:33:06,954
这意味着它不会发挥作用

598
00:33:07,588 --> 0:33:12,359
然而即使是在iPhone上

599
00:33:12,426 --> 0:33:14,194
小于默认字体大小

600
00:33:14,261 --> 0:33:16,496
因此你的app仍然可以适应

601
00:33:18,899 --> 0:33:22,536
现在让我们回到文章列表表视图

602
00:33:22,603 --> 0:33:24,404
看看这里的可读宽度是如何工作的

603
00:33:25,439 --> 0:33:29,977
关于表视图 需要知道的是

604
00:33:30,344 --> 0:33:34,982
我说的是边界用来布局很多UI元素

605
00:33:35,215 --> 0:33:38,018
这意味着分隔符

606
00:33:38,418 --> 0:33:40,153
系统附件

607
00:33:40,387 --> 0:33:43,557
以及系统单元格样式中的标签

608
00:33:43,924 --> 0:33:45,492
你在自己自定义表视图单元格中

609
00:33:45,559 --> 0:33:47,528
放置的任何视图

610
00:33:47,594 --> 0:33:50,464
如果将它们放置在边界之外

611
00:33:51,098 --> 0:33:54,001
这意味着如果你调整了

612
00:33:55,002 --> 0:33:57,905
可以将所有这些元素一起移动

613
00:33:58,739 --> 0:34:01,808
如果你有一个表格视图

614
00:33:58,739 --> 0:34:01,808
如果你有一个表格视图

615
00:34:01,875 --> 0:34:05,412
你需要调整表格视图的边距

616
00:34:05,479 --> 0:34:10,083
使所有的元素对齐

617
00:34:10,684 --> 0:34:13,286
为此表视图提供了一个API

618
00:34:13,353 --> 0:34:16,389
称为cellLayoutMargins

619
00:34:16,790 --> 0:34:20,327
当它为错误值时

620
00:34:20,761 --> 0:34:24,063
如果是真实值的话

621
00:34:24,965 --> 0:34:29,136
现在要注意的是 这个属性的默认值

622
00:34:29,203 --> 0:34:31,071
在iOS 12中发生了变化

623
00:34:31,804 --> 0:34:36,844
现在默认为错误值 它曾真实

624
00:34:37,744 --> 0:34:40,947
这不会对你的app的行为

625
00:34:41,014 --> 0:34:42,149
尤其是在手机上

626
00:34:42,516 --> 0:34:47,721
我们的一般建议是不要使用默认值

627
00:34:47,788 --> 0:34:50,657
当你知道有一个表视图将包含

628
00:34:50,724 --> 0:34:52,893
将它设置为真实值

629
00:34:54,661 --> 0:34:57,431
并且该属性也可从界面构建器中调整

630
00:34:57,497 --> 0:34:59,833
并具有可读的宽度复选框

631
00:35:02,903 --> 0:35:07,341
现在与表视图保持一致

632
00:35:08,275 --> 0:35:12,079
关于它们如何使用安全区域

633
00:35:12,412 --> 0:35:16,250
即你的表视图单元格的内容视图

634
00:35:16,717 --> 0:35:20,354
不会扩展到安全区域之外

635
00:35:21,622 --> 0:35:26,026
但是默认情况下

636
00:35:26,727 --> 0:35:29,796
和选择背景视图确实超出了安全区域

637
00:35:31,064 --> 0:35:34,868
所以如果你有需要在

638
00:35:34,935 --> 0:35:37,538
那些要在安全区域外溢出到

639
00:35:37,604 --> 0:35:41,441
则可以在背景

640
00:35:41,508 --> 0:35:42,876
或选定的背景视图中放置它

641
00:35:42,943 --> 0:35:44,845
如果这些视图的语义有意义的话

642
00:35:45,345 --> 0:35:51,618
或在UI表视图中有一个属性叫做

643
00:35:52,352 --> 0:35:55,989
默认情况下是真实值

644
00:35:56,056 --> 0:35:58,759
以便使内容视图也扩展到边缘

645
00:36:00,494 --> 0:36:03,597
这个属性也可以从界面构建器中配置

646
00:36:06,733 --> 0:36:08,535
现在我们回到竖屏

647
00:36:08,602 --> 0:36:12,372
在我们的app的主屏幕中

648
00:36:12,439 --> 0:36:14,608
在包含拾取器视图前

649
00:36:15,542 --> 0:36:16,376
现在

650
00:36:17,845 --> 0:36:23,684
屏幕的安全区域意味着

651
00:36:23,750 --> 0:36:28,922
拾取器视图的布局在这个安全区域内

652
00:36:30,958 --> 0:36:35,195
大多数的系统控件比如

653
00:36:35,262 --> 0:36:36,330
可能还有你自己的控件

654
00:36:36,396 --> 0:36:40,901
很多视图都没理由知道

655
00:36:40,968 --> 0:36:43,737
因为目前还不清楚他们会如何反应

656
00:36:43,804 --> 0:36:45,506
在内部重新布局

657
00:36:46,440 --> 0:36:47,975
我们有处理此类视图布局的

658
00:36:48,041 --> 0:36:50,511
推荐技巧

659
00:36:50,577 --> 0:36:53,814
即将它们放置在容器视图中

660
00:36:54,748 --> 0:36:56,817
该容器视图的职责是

661
00:36:56,984 --> 0:37:02,956
过分析安全区的嵌套

662
00:36:56,984 --> 0:37:02,956
过分析安全区的嵌套

663
00:37:03,290 --> 0:37:06,026
将其不知道内容的安全区

664
00:37:06,326 --> 0:37:12,399
它还可以提供背景

665
00:37:12,466 --> 0:37:15,903
在这种情况下

666
00:37:18,305 --> 0:37:20,974
我们要讨论的另一种技巧

667
00:37:21,041 --> 0:37:23,644
是关于靠近屏幕边缘的

668
00:37:23,710 --> 0:37:30,717
当你有一个控件或按钮时

669
00:37:30,784 --> 0:37:34,087
你可能要直接放置在安全区域上

670
00:37:34,154 --> 0:37:37,224
其中安全区域嵌入设置为零

671
00:37:37,558 --> 0:37:39,426
在设计中这样做的原因是

672
00:37:39,493 --> 0:37:43,564
安全区域内嵌有时

673
00:37:43,997 --> 0:37:47,501
我想给你们提供一个单一的解决方案

674
00:37:47,901 --> 0:37:50,537
可以同时适用于这两种情况

675
00:37:51,205 --> 0:37:52,439
让我们引入一个图表

676
00:37:53,640 --> 0:37:56,143
我将向你提供两个自动布局约束

677
00:37:56,376 --> 0:37:59,279
这些约束将在这两种不同的情况下

678
00:37:59,880 --> 0:38:01,348
我们需要的第一个约束

679
00:37:59,880 --> 0:38:01,348
我们需要的第一个约束

680
00:38:02,850 --> 0:38:06,453
代表我们通常要添加的填充

681
00:38:06,720 --> 0:38:09,790
这只是一个从超级视图底部

682
00:38:10,123 --> 0:38:11,859
一个常量约束

683
00:38:12,259 --> 0:38:15,495
但是在这种情况下

684
00:38:15,562 --> 0:38:18,432
以便当安全区域不设置为非零时

685
00:38:20,200 --> 0:38:23,070
第二个约束是从控件底部到

686
00:38:23,403 --> 0:38:26,640
安全区底部的不平等约束

687
00:38:27,107 --> 0:38:31,545
这确保我们的控制始终在安全区域内

688
00:38:33,313 --> 0:38:37,084
因此如果我将安全区域设置为非零

689
00:38:37,150 --> 0:38:41,421
不平等约束确保了

690
00:38:42,022 --> 0:38:44,625
同时仍然保留一些最小的填充

691
00:38:47,794 --> 0:38:53,600
在此对话和先前的会谈中

692
00:38:53,667 --> 0:38:54,735
不同自适应API

693
00:38:55,135 --> 0:38:58,038
布局边界有助于保持许多元素对齐

694
00:38:58,772 --> 0:39:02,509
安全区域内嵌可以保护

695
00:38:58,772 --> 0:39:02,509
安全区域内嵌可以保护

696
00:39:03,410 --> 0:39:07,181
可读宽度可以保持文本的列舒适阅读

697
00:39:07,714 --> 0:39:10,284
当你对app进行大型结构更改时

698
00:39:10,350 --> 0:39:13,520
尺寸类将通知你

699
00:39:15,189 --> 0:39:21,795
这些API用于在我们的框架中

700
00:39:22,196 --> 0:39:26,834
滚动视图 表格视图

701
00:39:27,034 --> 0:39:29,503
我们今天谈论其他类型的东西

702
00:39:29,570 --> 0:39:32,573
以确保我们的高级组件

703
00:39:32,639 --> 0:39:37,044
能够以最简单的方式

704
00:39:37,978 --> 0:39:40,581
因此你可以根据这些自适应原语

705
00:39:40,647 --> 0:39:44,952
来设计你的app

706
00:39:45,886 --> 0:39:47,387
其好处是

707
00:39:47,454 --> 0:39:53,160
你的代码不是针对特定设备进行

708
00:39:53,360 --> 0:39:57,264
它将保证你的app

709
00:39:57,331 --> 0:39:58,799
将来证明都是好用的

710
00:40:00,467 --> 0:40:04,338
若想获得更多信息

711
00:40:05,305 --> 0:40:06,406
感谢你们的光临

712
00:40:06,473 --> 0:40:08,542
真心希望你们享受这次会议
