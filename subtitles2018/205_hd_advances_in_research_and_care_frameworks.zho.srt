1
00:00:16,750 --> 0:00:23,757
（研究和护理框架进阶）

2
00:00:30,998 --> 0:00:32,131
感谢大家的到来

3
00:00:32,299 --> 0:00:36,970
欢迎来听研究和护理框架进阶会议

4
00:00:37,538 --> 0:00:39,873
我叫Srinath

5
00:00:40,541 --> 0:00:43,310
如果你熟悉我们过去的

6
00:00:43,610 --> 0:00:47,381
你就会记得我们的会议主要聚焦于

7
00:00:47,447 --> 0:00:49,683
两个开源健康框架

8
00:00:50,717 --> 0:00:52,753
ResearchKit

9
00:00:53,453 --> 0:00:57,124
尽管今年我们仍然会

10
00:00:57,491 --> 0:01:02,229
我们还会谈到一些

11
00:00:57,491 --> 0:01:02,229
我们还会谈到一些

12
00:01:02,462 --> 0:01:03,797
在更大的健康领域中

13
00:01:04,631 --> 0:01:07,534
对于你们中那些对框架感到陌生的人

14
00:01:07,868 --> 0:01:11,905
我强烈建议你们看看去年的两个演讲

15
00:01:13,407 --> 0:01:17,077
CareKit和ResearchKit的新内容

16
00:01:17,611 --> 0:01:22,015
她对ResearchKit和

17
00:01:22,649 --> 0:01:25,452
另一个演讲

18
00:01:25,719 --> 0:01:27,421
由Kelsey Dedoshka

19
00:01:27,721 --> 0:01:30,691
在那个演讲中 我们引入了一个

20
00:01:30,958 --> 0:01:35,896
它允许程序员在病人和

21
00:01:35,963 --> 0:01:38,232
其中使用了HIPAA适用后台

22
00:01:38,899 --> 0:01:42,169
在那张幻灯片上

23
00:01:42,402 --> 0:01:46,240
Penn Medicine取得的

24
00:01:47,241 --> 0:01:52,312
Penn Life Gained app利用了

25
00:01:52,646 --> 0:01:56,884
在肥胖症手术的术前和术后帮助患者

26
00:01:57,084 --> 0:01:58,085
在Penn Medicine

27
00:01:59,219 --> 0:02:01,288
这个app权衡了护理计划

28
00:01:59,219 --> 0:02:01,288
这个app权衡了护理计划

29
00:02:01,488 --> 0:02:04,691
治疗数据和其他交互式组件

30
00:02:05,125 --> 0:02:08,495
来帮助病人度过他们的减肥之旅

31
00:02:09,229 --> 0:02:14,801
数据一直在被同步

32
00:02:15,068 --> 0:02:19,673
与治疗提供商所用的iPad app间

33
00:02:19,840 --> 0:02:22,576
并实时与患者进行互动

34
00:02:23,143 --> 0:02:26,046
我们的团队已收到了医患双方

35
00:02:26,246 --> 0:02:28,849
非常积极的反馈

36
00:02:29,049 --> 0:02:33,921
鉴于这些app对于他们

37
00:02:35,189 --> 0:02:38,258
既然我们已谈到了从去年以来的进展

38
00:02:38,959 --> 0:02:41,128
我想要快速地

39
00:02:41,395 --> 0:02:43,597
整体介绍下我们的健康框架

40
00:02:44,431 --> 0:02:48,235
这些框架的创造来源于我们的初衷

41
00:02:48,302 --> 0:02:51,205
就是通过科技来改善世界健康水平

42
00:02:51,839 --> 0:02:55,042
在此过程中 我们真的想让

43
00:02:55,309 --> 0:02:58,545
并且为开发者

44
00:02:58,745 --> 0:03:01,815
最终你和我们

45
00:02:58,745 --> 0:03:01,815
最终你和我们

46
00:03:01,982 --> 0:03:05,752
可以帮助改进两个核心领域

47
00:03:06,053 --> 0:03:07,721
研究和治疗

48
00:03:08,922 --> 0:03:11,625
今年我很激动地向你们介绍

49
00:03:11,892 --> 0:03:14,795
一些我们非常关注的主题

50
00:03:15,028 --> 0:03:16,496
从很多方面来说

51
00:03:16,864 --> 0:03:18,899
最开始我们聚焦于框架

52
00:03:19,132 --> 0:03:22,970
我会给你们介绍我们对于

53
00:03:23,504 --> 0:03:27,074
然后我们会介绍

54
00:03:27,441 --> 0:03:31,044
特别是像帕金森症这样的

55
00:03:31,411 --> 0:03:35,716
这里会由Gabriel上台

56
00:03:36,450 --> 0:03:40,787
最后我们会将所有内容

57
00:03:41,021 --> 0:03:45,492
看看你们可以如何在代码中

58
00:03:47,160 --> 0:03:49,196
我们从ResearchKit开始

59
00:03:50,163 --> 0:03:53,300
从去年开始 我们花了很多精力

60
00:03:53,700 --> 0:03:57,137
来改善我们社区的开放性和参与性

61
00:03:58,472 --> 0:04:01,508
一些对于ResearchKit

62
00:03:58,472 --> 0:04:01,508
一些对于ResearchKit

63
00:04:02,142 --> 0:04:07,047
以及当前任务现有库的一些新内容

64
00:04:08,348 --> 0:04:10,751
现在让我们从社区的更新开始说吧

65
00:04:11,084 --> 0:04:12,920
我想谈两个主要话题

66
00:04:13,187 --> 0:04:15,989
仓库特权和计划更新

67
00:04:17,156 --> 0:04:20,961
过去的几个月

68
00:04:21,028 --> 0:04:24,164
并且给我们社区的成员提供写入权限

69
00:04:24,932 --> 0:04:28,101
事实上 我们选了五个明星贡献者

70
00:04:28,168 --> 0:04:31,305
给了他们ResearchKit

71
00:04:31,572 --> 0:04:34,308
这能允许他们合并MPR

72
00:04:34,942 --> 0:04:37,544
非常感谢 并且恭喜你们

73
00:04:37,778 --> 0:04:41,882
Erin、Fernando、Nino

74
00:04:43,083 --> 0:04:46,420
接着我想讲一下我们的计划更新

75
00:04:46,887 --> 0:04:51,592
之前我们一直在同时推送到

76
00:04:52,025 --> 0:04:56,263
我们意识到这样会制约

77
00:04:56,797 --> 0:05:02,536
为了权衡我们的一些内部功能

78
00:04:56,797 --> 0:05:02,536
为了权衡我们的一些内部功能

79
00:05:03,136 --> 0:05:06,073
这也是我们为什么

80
00:05:06,373 --> 0:05:09,009
比推送到master

81
00:05:09,843 --> 0:05:11,612
我们希望你们可以利用这段时间

82
00:05:12,145 --> 0:05:16,984
来用下我们的最新更新

83
00:05:17,651 --> 0:05:18,986
而你们所做的变动

84
00:05:19,353 --> 0:05:23,657
会使其很快出现在我们的稳定

85
00:05:23,924 --> 0:05:27,594
而不是让你等整个发布周期

86
00:05:29,162 --> 0:05:31,465
现在我们已经介绍了社区的更新

87
00:05:31,532 --> 0:05:35,802
我想更深入介绍下我们对于

88
00:05:36,069 --> 0:05:40,440
ResearchKit框架本身所做的更新

89
00:05:41,775 --> 0:05:46,113
作为比较

90
00:05:46,380 --> 0:05:50,784
在ResearchKit 1.5中的样子

91
00:05:51,718 --> 0:05:53,787
而这是相同的迷你表格步骤

92
00:05:54,354 --> 0:05:57,391
在ResearchKit

93
00:05:58,592 --> 0:06:04,264
如你所见

94
00:05:58,592 --> 0:06:04,264
如你所见

95
00:06:04,331 --> 0:06:09,069
让ResearchKit的界面

96
00:06:09,703 --> 0:06:11,104
让我们仔细看一下

97
00:06:13,574 --> 0:06:16,610
我们将进度标签从导航条的中心

98
00:06:16,677 --> 0:06:18,612
移到了右边 并且做了一些修饰

99
00:06:19,313 --> 0:06:23,517
这让我们补充了导航条的大标题功能

100
00:06:23,784 --> 0:06:26,186
并将其app到我们的所有步骤标题中

101
00:06:26,987 --> 0:06:31,525
为了保持一致的样式

102
00:06:31,992 --> 0:06:34,761
用以改善整体的用户体验

103
00:06:34,828 --> 0:06:38,365
对那些回答多个问题和调查问卷的人

104
00:06:38,565 --> 0:06:42,736
因为它提供了一个你想要实现的

105
00:06:44,505 --> 0:06:49,409
这个卡片视图被默认app到

106
00:06:49,476 --> 0:06:51,912
我们还有一个新的布林属性

107
00:06:52,179 --> 0:06:54,882
你可以将其设为假来保证向下兼容性

108
00:06:55,616 --> 0:06:59,119
最后我们还加入了一个页脚容器视图

109
00:06:59,486 --> 0:07:01,355
来改进导航流

110
00:06:59,486 --> 0:07:01,355
来改进导航流

111
00:07:01,822 --> 0:07:04,391
取消按钮现在是页脚视图的一部分了

112
00:07:04,591 --> 0:07:06,426
它会一直固定在底部

113
00:07:06,927 --> 0:07:09,029
这就意味着你的用户

114
00:07:09,229 --> 0:07:12,533
再也不用一直拉动到步骤的底部

115
00:07:13,066 --> 0:07:15,636
来进入后面的导航选项了

116
00:07:15,936 --> 0:07:20,607
把所有的控制功能放到一起

117
00:07:22,042 --> 0:07:23,143
而接下来

118
00:07:23,577 --> 0:07:28,482
在ResearchKit最常用到

119
00:07:29,149 --> 0:07:33,253
它来生成PDF文件并附上用户签名

120
00:07:33,887 --> 0:07:37,558
我们意识到在你的app中

121
00:07:37,624 --> 0:07:40,460
向你的用户调查一些机密文件

122
00:07:40,827 --> 0:07:42,496
是多么重要

123
00:07:42,763 --> 0:07:46,934
这也是我们为什么加入了

124
00:07:47,467 --> 0:07:52,105
它构建于去年推出的

125
00:07:52,873 --> 0:07:55,876
让我们仔细看一些功能吧

126
00:07:55,943 --> 0:07:57,211
这个步骤所提供的

127
00:07:59,546 --> 0:08:02,482
用于轻松在页面间切换的快速导航

128
00:07:59,546 --> 0:08:02,482
用于轻松在页面间切换的快速导航

129
00:08:03,617 --> 0:08:07,187
在需要时来标记文档的实时备注功能

130
00:08:08,055 --> 0:08:09,857
搜索功能 让你的用户

131
00:08:09,923 --> 0:08:12,960
通过关键词或短语来检索整个文档

132
00:08:13,427 --> 0:08:16,797
以及分享或保存PDF

133
00:08:16,964 --> 0:08:19,132
利用标准iOS共享表单

134
00:08:19,700 --> 0:08:24,271
更棒的是将其放入你的app非常简单

135
00:08:25,372 --> 0:08:28,275
你需要创建一个

136
00:08:28,342 --> 0:08:29,910
一个唯一的标识符

137
00:08:30,344 --> 0:08:32,246
然后提供给我们

138
00:08:32,312 --> 0:08:34,548
你想要显示的PDF文档的文件路径

139
00:08:36,250 --> 0:08:39,019
现在我想要换个话题

140
00:08:39,385 --> 0:08:42,856
介绍下ResearchKit的

141
00:08:44,291 --> 0:08:45,325
当前任务

142
00:08:46,159 --> 0:08:51,231
你们当中有人可能不熟悉

143
00:08:51,431 --> 0:08:56,170
能让用户执行特定任务或特定测试

144
00:08:56,436 --> 0:08:57,938
在给定的时间内

145
00:08:58,505 --> 0:09:01,842
当用户完成这个步骤时

146
00:08:58,505 --> 0:09:01,842
当用户完成这个步骤时

147
00:09:01,909 --> 0:09:04,945
一个包含了ORKResult对象

148
00:09:05,646 --> 0:09:07,915
这个对象由一些数据点组成

149
00:09:07,981 --> 0:09:12,019
包括像是用户响应、定时信息

150
00:09:12,085 --> 0:09:16,623
以及从不同源录制的数据

151
00:09:17,057 --> 0:09:19,193
治疗数据 甚至是你的麦克风

152
00:09:20,194 --> 0:09:24,031
今年我们还加入了

153
00:09:24,898 --> 0:09:28,268
现在让我们看下

154
00:09:28,802 --> 0:09:30,871
你的目标是要创建

155
00:09:30,938 --> 0:09:35,309
一个记录配置

156
00:09:35,709 --> 0:09:38,445
你需要向我们提供两个重要参数

157
00:09:38,745 --> 0:09:40,948
第一个是

158
00:09:41,481 --> 0:09:45,519
第二个是可选的

159
00:09:46,386 --> 0:09:48,956
在你创建了这个记录配置后

160
00:09:49,156 --> 0:09:50,624
你可以把它加到步骤中

161
00:09:51,158 --> 0:09:54,461
现在当用户要执行任务的时候

162
00:09:54,761 --> 0:09:58,532
他们就会看到HealthKit的

163
00:09:59,066 --> 0:10:02,703
他们只有允许访问才能执行查询

164
00:09:59,066 --> 0:10:02,703
他们只有允许访问才能执行查询

165
00:10:03,237 --> 0:10:05,038
而在用户完成任务后

166
00:10:05,272 --> 0:10:08,275
作为你ORKResult对象中

167
00:10:08,575 --> 0:10:12,813
你还会从健康记录中

168
00:10:13,614 --> 0:10:17,885
为了更好理解和学习

169
00:10:18,252 --> 0:10:22,823
我强烈建议你们去参加这个演讲

170
00:10:23,123 --> 0:10:27,394
“通过HealthKit访问 健康数据”

171
00:10:27,661 --> 0:10:31,632
它会详细介绍健康记录的所有内容

172
00:10:31,698 --> 0:10:34,301
包括了一些很重要的app

173
00:10:35,802 --> 0:10:37,104
我们现在已经介绍了

174
00:10:37,471 --> 0:10:40,207
当前任务模块的整体更新

175
00:10:41,875 --> 0:10:44,478
让我来介绍下当前任务本身吧

176
00:10:45,012 --> 0:10:50,017
我们今年添加了聚焦于

177
00:10:50,717 --> 0:10:53,320
听力、语言表达以及视力

178
00:10:54,321 --> 0:10:55,789
让我们从听力开始说

179
00:10:57,624 --> 0:11:01,828
我们添加了一个新的

180
00:10:57,624 --> 0:11:01,828
我们添加了一个新的

181
00:11:02,563 --> 0:11:05,265
其实现了降十升五方法

182
00:11:05,666 --> 0:11:07,134
并且让你决定

183
00:11:07,201 --> 0:11:11,205
用户在dBHL量程内的听力阈值

184
00:11:12,606 --> 0:11:16,877
为了实现这一点

185
00:11:17,211 --> 0:11:20,080
我非常激动地说

186
00:11:20,547 --> 0:11:24,017
我们首次开源了

187
00:11:24,618 --> 0:11:26,887
有三个表格

188
00:11:27,254 --> 0:11:32,426
第一个是AirPods

189
00:11:32,893 --> 0:11:36,129
第二个是每频率的敏感度

190
00:11:36,196 --> 0:11:39,633
这里的敏感度是以

191
00:11:40,000 --> 0:11:42,035
最后我们还提供了

192
00:11:42,269 --> 0:11:47,040
参考同声压级表单

193
00:11:48,642 --> 0:11:53,614
需要注意的是

194
00:11:54,348 --> 0:11:58,385
这意味着我们在积极地运行

195
00:11:58,652 --> 0:11:59,853
在接下来的数周内

196
00:11:59,920 --> 0:12:04,491
随着我们集中精确的数据

197
00:11:59,920 --> 0:12:04,491
随着我们集中精确的数据

198
00:12:05,926 --> 0:12:09,596
现在让我们看下

199
00:12:10,764 --> 0:12:13,567
用户需要听声调

200
00:12:14,067 --> 0:12:18,572
在特定频率不同的分贝值

201
00:12:19,306 --> 0:12:20,674
当用户听到一个声调时

202
00:12:20,741 --> 0:12:23,911
他们要按下按钮

203
00:12:24,278 --> 0:12:27,648
这时候我们会开始降低分贝值

204
00:12:27,915 --> 0:12:30,284
就像是这里的绿点所表示的那样

205
00:12:30,784 --> 0:12:35,222
当用户没能在给定时间内点击按钮时

206
00:12:35,289 --> 0:12:39,293
我们会如红点所示那样

207
00:12:39,593 --> 0:12:41,929
我们会将这些数据点提供给

208
00:12:41,995 --> 0:12:44,965
降十升五方法来决定

209
00:12:45,032 --> 0:12:48,535
用户以分贝计的听力阈值

210
00:12:52,005 --> 0:12:53,774
从开发者的角度

211
00:12:54,041 --> 0:12:57,845
整个声调的产生发生在三个阶段

212
00:12:58,445 --> 0:13:00,981
首先第一个是预刺激延迟

213
00:12:58,445 --> 0:13:00,981
首先第一个是预刺激延迟

214
00:13:01,381 --> 0:13:04,685
这是个以秒计的开发者定义的

215
00:13:04,952 --> 0:13:09,356
我们用它来生成一个

216
00:13:09,423 --> 0:13:11,592
在我们将该声调播放给用户之前

217
00:13:12,292 --> 0:13:14,895
这是为了确保用户不会欺骗测试

218
00:13:15,162 --> 0:13:17,030
通过随机点击按钮

219
00:13:18,599 --> 0:13:22,102
我们还提供了一个声调持续的属性

220
00:13:22,169 --> 0:13:25,405
其监控了播放声调的实际持续时间

221
00:13:26,173 --> 0:13:30,244
最后就是后刺激延迟 也就是

222
00:13:30,310 --> 0:13:34,081
用户响应特定声调的时间

223
00:13:35,082 --> 0:13:36,817
为了在你的app中实现

224
00:13:37,684 --> 0:13:41,922
你需要创建一个

225
00:13:41,989 --> 0:13:46,560
一个唯一的标识符

226
00:13:46,627 --> 0:13:50,297
包括频率表 也就是一个频率数组

227
00:13:50,731 --> 0:13:52,766
你想要将其回播给你的用户

228
00:13:53,367 --> 0:13:55,169
我们还有更多的属性

229
00:13:55,235 --> 0:13:58,605
你可以定制你特有的用例

230
00:14:00,541 --> 0:14:04,011
当用户完成这项任务时

231
00:14:04,511 --> 0:14:06,947
ORKResult对象

232
00:14:07,414 --> 0:14:11,251
让我们看看

233
00:14:12,085 --> 0:14:13,253
在最上层 你会得到

234
00:14:13,320 --> 0:14:16,490
很多信息

235
00:14:16,924 --> 0:14:19,893
还有示例对象的数组

236
00:14:20,527 --> 0:14:24,731
这些对象会封装像是声道这类东西

237
00:14:24,798 --> 0:14:28,769
也就是声音是从左还是右声道

238
00:14:29,436 --> 0:14:30,871
还有阈值

239
00:14:30,938 --> 0:14:33,106
其是由降十升五方法决定的

240
00:14:33,807 --> 0:14:36,643
它也是由单元对象数组组成的

241
00:14:37,344 --> 0:14:41,348
而单元对象会提供

242
00:14:41,648 --> 0:14:44,051
在该分贝下 特定的声调被播放

243
00:14:44,117 --> 0:14:45,752
还有很多的时间戳

244
00:14:45,819 --> 0:14:49,823
它包含了用户是何时点击按钮的

245
00:14:51,091 --> 0:14:55,696
接下来让我们介绍听力类的

246
00:14:56,363 --> 0:14:59,199
我们加入了一个环境SPL测量计

247
00:15:00,334 --> 0:15:02,903
它实现了一个A级过滤器

248
00:15:03,136 --> 0:15:07,174
用来以分贝测量环境的声压级别

249
00:15:07,808 --> 0:15:10,410
换句话说 它告诉你有多吵

250
00:15:11,011 --> 0:15:14,314
这个步骤现在还接受了阈值

251
00:15:14,848 --> 0:15:16,483
这让事情变得有趣了

252
00:15:16,550 --> 0:15:20,187
因为你现在可以将该步骤

253
00:15:20,754 --> 0:15:24,858
例如 如果你想让你的用户

254
00:15:25,225 --> 0:15:29,696
你可以在此之前加入这个任务

255
00:15:29,763 --> 0:15:33,600
处于一个太吵的环境

256
00:15:36,403 --> 0:15:40,407
要加入这个任务 你需要创建一个

257
00:15:40,474 --> 0:15:43,944
一个唯一的标识符

258
00:15:44,845 --> 0:15:48,482
我们还有一些

259
00:15:50,317 --> 0:15:55,889
现在让我们换个话题

260
00:15:57,191 --> 0:15:59,960
我们加入了一个语音识别模块

261
00:16:00,327 --> 0:16:03,797
其利用了iOS上的语音识别框架

262
00:16:04,064 --> 0:16:08,368
它让我们可直接访问实时语音识别器

263
00:16:08,435 --> 0:16:11,438
它支持超过50种不同的语言

264
00:16:12,206 --> 0:16:14,474
作为这个任务的一部分

265
00:16:14,541 --> 0:16:18,445
用户要重复一个句子或描述一个图像

266
00:16:19,213 --> 0:16:20,914
在他们说完之后

267
00:16:21,315 --> 0:16:24,818
用户会自动进入下一步

268
00:16:25,352 --> 0:16:28,222
他们可以编辑生成的脚本

269
00:16:28,822 --> 0:16:31,425
例如在本例中 quick和fox

270
00:16:31,491 --> 0:16:34,027
被错误理解成quiet和box

271
00:16:34,494 --> 0:16:38,866
你的用户可以点击这些词

272
00:16:40,234 --> 0:16:42,669
需要注意的是

273
00:16:42,736 --> 0:16:44,104
我们会返回给你

274
00:16:44,438 --> 0:16:48,075
一个非常丰富的数据集

275
00:16:48,976 --> 0:16:51,645
一个用户所说内容的直接录音

276
00:16:52,412 --> 0:16:55,182
由语音识别引擎生成的脚本

277
00:16:55,916 --> 0:16:58,585
以及由用户编辑的脚本

278
00:17:00,387 --> 0:17:01,455
要将其加入你的app

279
00:17:01,522 --> 0:17:04,758
你需要创建一个

280
00:17:04,825 --> 0:17:07,861
并提供给我们一个用户界面图像

281
00:17:08,829 --> 0:17:12,266
你也能为此识别定制本地化

282
00:17:12,900 --> 0:17:15,903
并且你还可以得到实时脚本

283
00:17:15,969 --> 0:17:17,237
随着用户讲话

284
00:17:18,605 --> 0:17:20,406
让我们详细看下

285
00:17:20,473 --> 0:17:23,343
我们结果对象的一个子集吧

286
00:17:24,545 --> 0:17:26,780
这是SFTranscription类型

287
00:17:27,047 --> 0:17:29,416
由语音识别框架所展现的

288
00:17:29,883 --> 0:17:32,219
该格式化字符串提供了脚本

289
00:17:32,553 --> 0:17:34,321
以及分段对象数组

290
00:17:34,555 --> 0:17:37,658
将脚本分成了子字符串

291
00:17:37,925 --> 0:17:41,028
还为每个子字符串

292
00:17:41,595 --> 0:17:45,299
在这之上

293
00:17:45,632 --> 0:17:48,068
在这个解释例子中 你们可以看到

294
00:17:49,603 --> 0:17:53,907
这些结果可以用来获取句法、文法的

295
00:17:54,174 --> 0:17:56,944
语言学功能 还有讲话速率

296
00:17:57,444 --> 0:18:02,082
以评估在不同医疗情况下的说话模式

297
00:17:57,444 --> 0:18:02,082
以评估在不同医疗情况下的说话模式

298
00:18:02,149 --> 0:18:04,117
包括认知和情绪

299
00:18:07,120 --> 0:18:12,526
有趣的是 我们的下一个任务

300
00:18:13,861 --> 0:18:15,829
讲话与噪音当前任务

301
00:18:16,597 --> 0:18:20,400
这能让你实现完全自动化的语音测听

302
00:18:21,668 --> 0:18:25,639
传统的声音测听使用纯声音

303
00:18:25,706 --> 0:18:27,541
也就是记号波形

304
00:18:28,141 --> 0:18:29,843
对于录好的实例

305
00:18:29,910 --> 0:18:32,946
用户可以清晰地分辨纯语音

306
00:18:33,013 --> 0:18:35,849
但是要分辨词语非常困难

307
00:18:36,049 --> 0:18:37,885
当这些词语跟噪音混在一起的时候

308
00:18:38,919 --> 0:18:40,621
这很接近于

309
00:18:40,687 --> 0:18:44,525
现实世界中早期听力下降的例子

310
00:18:44,825 --> 0:18:47,928
例如 在一个吵闹的餐厅里

311
00:18:47,995 --> 0:18:51,698
当你不能理解

312
00:18:52,966 --> 0:18:54,902
在我详细介绍之前

313
00:18:54,968 --> 0:18:58,238
让我们来看看

314
00:19:03,877 --> 0:19:05,746
行动器尝试了三张绿色的图片

315
00:19:08,215 --> 0:19:11,151
正如你所看到的

316
00:19:11,318 --> 0:19:12,352
而在完成了之后

317
00:19:12,419 --> 0:19:15,756
他们会被要求立即

318
00:19:17,858 --> 0:19:23,664
语音和噪音当前任务使用音频文件

319
00:19:23,730 --> 0:19:28,068
这些音频文件是由一个闭集矩阵的

320
00:19:28,135 --> 0:19:32,539
像是词语相似度、一致性、困难度

321
00:19:32,806 --> 0:19:36,777
还有确保由同步器生成的句子

322
00:19:37,244 --> 0:19:40,681
发音更平衡

323
00:19:41,982 --> 0:19:44,518
这些文件然后被用程序混合

324
00:19:44,585 --> 0:19:49,256
与背景噪音一起

325
00:19:50,157 --> 0:19:51,491
开发者也可以

326
00:19:51,558 --> 0:19:56,063
为所有的噪音信号设置增益的值

327
00:19:58,098 --> 0:20:03,270
语音接收阈值

328
00:19:58,098 --> 0:20:03,270
语音接收阈值

329
00:20:03,470 --> 0:20:07,641
用户只能理解50%的口述词语

330
00:20:10,077 --> 0:20:13,981
我们这个测试的愿景是

331
00:20:14,047 --> 0:20:17,784
我们会上传超过175个不同的文件

332
00:20:18,785 --> 0:20:22,222
对应了25个列表

333
00:20:22,623 --> 0:20:23,724
而从长远来看

334
00:20:24,057 --> 0:20:27,661
我们希望这个测试能够支持多种语言

335
00:20:27,961 --> 0:20:31,865
特别是目前那些言语

336
00:20:32,165 --> 0:20:35,936
由于缺乏语音数据库或其他测试资源

337
00:20:36,436 --> 0:20:39,306
如果你是这个特定领域的研究者

338
00:20:39,540 --> 0:20:41,708
并且你对特定的区域设置有需求

339
00:20:42,309 --> 0:20:44,478
我强烈建议你与我们联系

340
00:20:44,678 --> 0:20:46,914
我们会尽力达成您的要求

341
00:20:49,550 --> 0:20:50,651
要将这个功能加入你的app

342
00:20:50,717 --> 0:20:53,353
你需要创建一个

343
00:20:53,921 --> 0:20:56,290
并将我们指向你想播放的音频文件

344
00:20:56,723 --> 0:20:59,960
你也可以指定

345
00:21:02,496 --> 0:21:05,098
最后 让我们来介绍下视觉

346
00:21:06,600 --> 0:21:09,970
Amsler网格是一种工具

347
00:21:10,270 --> 0:21:13,740
用于检测在用户视野中的问题

348
00:21:13,807 --> 0:21:19,379
可能是由于像黄斑变性

349
00:21:20,547 --> 0:21:25,586
这个测试通常在医生的办公室进行

350
00:21:25,819 --> 0:21:27,387
在一张传统的纸上

351
00:21:27,454 --> 0:21:30,057
显示一个图形

352
00:21:30,891 --> 0:21:34,127
视力好的用户

353
00:21:34,361 --> 0:21:36,730
而受到某些疾病困扰的用户

354
00:21:36,930 --> 0:21:39,433
会开始在这张图上看到扭曲

355
00:21:40,167 --> 0:21:43,837
如果你现在看到扭曲

356
00:21:44,271 --> 0:21:47,140
这是故意的

357
00:21:48,075 --> 0:21:51,812
用户只需指向

358
00:21:52,212 --> 0:21:55,549
通过复制这个网格

359
00:21:55,616 --> 0:21:59,620
这个任务的功能带到

360
00:21:59,987 --> 0:22:03,891
用户只需在他们看到扭曲的网格上

361
00:21:59,987 --> 0:22:03,891
用户只需在他们看到扭曲的网格上

362
00:22:05,025 --> 0:22:10,330
我们相信开发者可以

363
00:22:10,631 --> 0:22:12,866
像是压力按压

364
00:22:13,133 --> 0:22:18,005
来增加正在进行这一任务的用户体验

365
00:22:19,306 --> 0:22:20,908
所有这些当前任务

366
00:22:20,974 --> 0:22:24,611
用于数据收集和分析真的很棒

367
00:22:25,345 --> 0:22:30,117
但它们被设计成要在给定时间段

368
00:22:31,251 --> 0:22:35,322
当我们研究具体问题时

369
00:22:35,389 --> 0:22:39,860
一些更复杂的健康问题

370
00:22:40,127 --> 0:22:45,299
因此我们引入了

371
00:22:45,999 --> 0:22:47,301
为了介绍更多的相关信息

372
00:22:47,534 --> 0:22:49,837
我想请Gabriel上台来

373
00:22:56,577 --> 0:22:57,411
大家好

374
00:22:57,911 --> 0:23:01,315
我叫Gabriel

375
00:22:57,911 --> 0:23:01,315
我叫Gabriel

376
00:23:01,582 --> 0:23:04,051
来介绍一个新的研究API

377
00:23:04,585 --> 0:23:05,919
运动障碍API

378
00:23:09,089 --> 0:23:13,193
正如Srinath所提及的

379
00:23:13,760 --> 0:23:15,329
在Apple Watch上可用

380
00:23:15,596 --> 0:23:18,765
这将允许你监测

381
00:23:19,066 --> 0:23:21,602
特别是两种运动障碍

382
00:23:21,802 --> 0:23:24,738
跟帕金森病的研究有关

383
00:23:25,672 --> 0:23:29,710
因为现在有针对性的用例

384
00:23:30,244 --> 0:23:32,579
你需要申请一个

385
00:23:32,880 --> 0:23:34,314
来使用这个API

386
00:23:35,115 --> 0:23:38,352
这个app将会

387
00:23:38,652 --> 0:23:39,920
从第二波开始

388
00:23:40,687 --> 0:23:43,323
如果你等不及了

389
00:23:44,224 --> 0:23:47,694
将会有样本数据集

390
00:23:47,761 --> 0:23:50,864
在ResearchKit

391
00:23:51,965 --> 0:23:55,936
让我们来谈论下

392
00:23:58,939 --> 0:23:59,840
正如你们有些人可能知道的那样

393
00:24:00,474 --> 0:24:03,410
帕金森病是一种退行性神经疾病

394
00:24:03,911 --> 0:24:06,813
这会影响受疾病困扰患者的运动机能

395
00:24:07,781 --> 0:24:11,752
帕金森病的其中一种可识别症状

396
00:24:12,219 --> 0:24:17,391
此API监测静止时的震颤

397
00:24:17,691 --> 0:24:23,497
当某人不想移动

398
00:24:24,665 --> 0:24:28,302
现在 有相应的治疗措施

399
00:24:28,635 --> 0:24:32,206
可以帮助抑制和控制

400
00:24:32,673 --> 0:24:36,910
然而 这些非常相似的治疗

401
00:24:37,644 --> 0:24:40,047
例如运动障碍

402
00:24:41,682 --> 0:24:45,452
这个API可以监控的

403
00:24:45,886 --> 0:24:49,690
就是表现出烦躁以及身体摇摆

404
00:24:50,924 --> 0:24:55,629
那么让我们回顾一下 你有震颤

405
00:24:55,963 --> 0:24:59,333
以及运动障碍

406
00:25:00,334 --> 0:25:04,571
让我们看下

407
00:25:04,638 --> 0:25:05,873
来评估这些症状

408
00:25:08,842 --> 0:25:11,845
通常这些类型的评估

409
00:25:12,479 --> 0:25:15,749
临床医生会要求

410
00:25:16,049 --> 0:25:18,986
进行物理诊断测试

411
00:25:19,186 --> 0:25:22,389
以评估

412
00:25:23,457 --> 0:25:28,195
这些评级提供了量化数据

413
00:25:28,262 --> 0:25:31,431
以及在诊所

414
00:25:32,566 --> 0:25:34,735
为了得到更广泛的

415
00:25:35,135 --> 0:25:37,371
我们会鼓励患者坚持写日记

416
00:25:37,738 --> 0:25:39,540
手动记录他们的症状

417
00:25:40,807 --> 0:25:42,876
但是 这可能对于患者来说很麻烦

418
00:25:43,110 --> 0:25:45,279
有些人可能会忘记 这很正常

419
00:25:45,345 --> 0:25:50,984
或无法完整描述他们每天的症状

420
00:25:52,486 --> 0:25:53,320
这不是很好吗

421
00:25:54,454 --> 0:25:59,960
若有一种被动的、不引人注目的方式

422
00:26:01,128 --> 0:26:04,097
通过使用运动障碍API

423
00:26:04,631 --> 0:26:07,301
像你们一样的研究人员和开发人员

424
00:26:07,534 --> 0:26:11,004
将能够构建app

425
00:26:12,272 --> 0:26:16,310
病人戴着Apple Watch时

426
00:26:17,344 --> 0:26:20,614
这不仅会给你一个量化的方式

427
00:26:21,081 --> 0:26:24,151
在这里显示

428
00:26:24,685 --> 0:26:27,721
它也会给你一个纵向的分析

429
00:26:27,921 --> 0:26:30,724
你可以持续跟踪这些症状的变化

430
00:26:31,658 --> 0:26:35,362
这些算法的设计和试用

431
00:26:35,629 --> 0:26:39,366
来自于内部临床研究中

432
00:26:40,367 --> 0:26:44,171
我们希望你可以使用

433
00:26:44,438 --> 0:26:49,476
来建立新的护理体验

434
00:26:49,543 --> 0:26:50,844
帕金森患者的生活质量

435
00:26:52,513 --> 0:26:54,248
但是在你这么做之前

436
00:26:54,815 --> 0:26:56,984
你需要知道

437
00:26:57,684 --> 0:26:59,820
那么 让我们看下代码

438
00:27:01,989 --> 0:27:05,526
你首先需要做的是请求

439
00:27:05,592 --> 0:27:08,729
来自用户的运动授权

440
00:27:09,930 --> 0:27:14,334
一旦你完成这些 你需要调用

441
00:27:14,635 --> 0:27:16,770
以启用症状监测

442
00:27:17,738 --> 0:27:22,009
现在这个症状监视器会打开

443
00:27:22,242 --> 0:27:25,479
所以这会对你用户的电池寿命

444
00:27:25,779 --> 0:27:28,549
不过他们仍然可以收集一天的数据

445
00:27:28,615 --> 0:27:29,550
仅充一次电

446
00:27:31,518 --> 0:27:34,955
正如你所见 最长的录音时间为七天

447
00:27:35,589 --> 0:27:37,157
我知道你们中的很多人将要进行

448
00:27:37,224 --> 0:27:39,259
超过7天的研究

449
00:27:39,526 --> 0:27:43,530
如果是这样 只要再次调用

450
00:27:43,730 --> 0:27:45,799
来扩展你的数据收集间隔

451
00:27:47,234 --> 0:27:50,871
这将开始在你的授意下

452
00:27:51,038 --> 0:27:53,106
存储震颤和运动障碍结果

453
00:27:54,408 --> 0:27:56,076
之后的某个时候 你将要

454
00:27:56,143 --> 0:27:59,146
返回到该app

455
00:27:59,379 --> 0:28:01,515
让我们看下

456
00:27:59,379 --> 0:28:01,515
让我们看下

457
00:28:04,218 --> 0:28:08,021
如你所见 在这行

458
00:28:08,088 --> 0:28:11,391
新的存储在设备上的震颤记录

459
00:28:13,060 --> 0:28:16,563
这些记录通过API存储在设备上

460
00:28:17,197 --> 0:28:19,566
但在7天后失效

461
00:28:20,000 --> 0:28:21,702
所以 在它失效之前

462
00:28:21,902 --> 0:28:24,605
你需要获得这些数据的所有权

463
00:28:25,138 --> 0:28:29,276
通过序列化它们

464
00:28:29,610 --> 0:28:33,146
或传输到不同的平台

465
00:28:34,414 --> 0:28:38,852
数据将返回给你

466
00:28:39,286 --> 0:28:43,223
所以一小时的数据

467
00:28:43,690 --> 0:28:46,660
我们来看一看

468
00:28:52,165 --> 0:28:56,203
正如你所看到的那样 结果对象

469
00:28:56,270 --> 0:28:59,806
一分钟的百分比

470
00:28:59,873 --> 0:29:02,943
存在或不存在的症状

471
00:28:59,873 --> 0:29:02,943
存在或不存在的症状

472
00:29:03,777 --> 0:29:07,347
对于运动障碍 在右侧

473
00:29:07,981 --> 0:29:09,583
可能或者不太可能

474
00:29:10,817 --> 0:29:12,419
震颤给你更多的选择

475
00:29:12,853 --> 0:29:13,687
让我们来看看

476
00:29:16,690 --> 0:29:20,494
由于这个是在静止时的震颤

477
00:29:20,561 --> 0:29:23,263
都会简单地返回未知百分比

478
00:29:23,730 --> 0:29:27,134
这和我们使用微弱信号

479
00:29:27,201 --> 0:29:28,602
我们无法做出决定

480
00:29:29,636 --> 0:29:32,573
然而如果这个算法可以做出决定

481
00:29:32,639 --> 0:29:34,541
它可以返回震颤的严重程度

482
00:29:34,842 --> 0:29:37,377
范围从轻微到强烈

483
00:29:38,846 --> 0:29:44,117
现在 为了给你展示

484
00:29:44,418 --> 0:29:45,252
能够与ResearchKit

485
00:29:45,319 --> 0:29:49,223
的当前任务中的

486
00:29:49,623 --> 0:29:52,025
我想把Akshay请到舞台上

487
00:29:52,359 --> 0:29:56,163
他将两者整合

488
00:30:03,470 --> 0:30:04,371
大家好

489
00:30:04,438 --> 0:30:06,740
欢迎来到护理研究进阶的演示

490
00:30:07,307 --> 0:30:09,676
在这个演示中 我们会看到一些

491
00:30:10,043 --> 0:30:12,246
并创建运动障碍API

492
00:30:13,046 --> 0:30:14,948
作为我们在GitHub仓库上

493
00:30:15,282 --> 0:30:17,818
我们已经添加

494
00:30:18,552 --> 0:30:20,854
这个app实现了

495
00:30:21,455 --> 0:30:24,791
并可视化了

496
00:30:24,858 --> 0:30:26,226
以及我们刚刚看到的症状数据点

497
00:30:26,827 --> 0:30:28,495
我们现在看看

498
00:30:36,904 --> 0:30:37,938
我们有一个

499
00:30:38,605 --> 0:30:40,674
我们实现了运动障碍API

500
00:30:41,041 --> 0:30:43,277
收集了震颤和运动障碍

501
00:30:43,510 --> 0:30:44,611
并将它们发送给电话app

502
00:30:45,312 --> 0:30:48,515
在iPhone app中

503
00:30:49,016 --> 0:30:51,919
并且可视化了这些震颤

504
00:30:52,719 --> 0:30:56,023
让我们看看代码是什么样的

505
00:30:56,089 --> 0:30:58,859
从一个基础乏味的平面app开始

506
00:31:02,896 --> 0:31:05,232
这是我的Xcode工作空间

507
00:31:05,299 --> 0:31:08,335
在我的ResearchKit中

508
00:31:08,969 --> 0:31:10,404
我们有一个任务列表

509
00:31:10,904 --> 0:31:13,340
我们将在那里添加

510
00:31:13,807 --> 0:31:16,310
一个graphviewController

511
00:31:16,376 --> 0:31:18,212
这些震颤和运动障碍

512
00:31:18,679 --> 0:31:19,813
还有一个评估管理器

513
00:31:19,880 --> 0:31:22,349
我们将在那里实现

514
00:31:23,884 --> 0:31:27,154
当帕金森病患者

515
00:31:27,454 --> 0:31:29,189
他们会被问及一些特定的问题

516
00:31:29,590 --> 0:31:32,526
这些问题包括他们日常生活的活动

517
00:31:32,593 --> 0:31:34,962
例如从0到10分

518
00:31:35,028 --> 0:31:36,230
今天你的痛苦程度如何

519
00:31:36,864 --> 0:31:38,932
或者你有什么非运动症状

520
00:31:39,666 --> 0:31:42,302
我们已经在我们的app中

521
00:31:42,836 --> 0:31:46,206
这些问卷通常伴随着七次物理测试

522
00:31:46,273 --> 0:31:48,976
其中一个物理测试

523
00:31:49,376 --> 0:31:52,246
让我们继续并添加

524
00:31:53,480 --> 0:31:54,882
在我的任务列表视图控制器中

525
00:31:55,616 --> 0:31:58,085
我会继续并添加

526
00:31:58,652 --> 0:31:59,486
如你所见

527
00:31:59,553 --> 0:32:02,422
我们只加入了一个

528
00:31:59,553 --> 0:32:02,422
我们只加入了一个

529
00:32:03,023 --> 0:32:07,027
如果注意的话 其中一个参数

530
00:32:07,394 --> 0:32:09,630
这是由ResearchKit

531
00:32:09,897 --> 0:32:12,833
表示所有支持的语言环境

532
00:32:12,900 --> 0:32:14,034
被语音识别API所支持

533
00:32:14,401 --> 0:32:17,538
让你作为开发者不必担心

534
00:32:17,604 --> 0:32:20,307
你的语言环境是否

535
00:32:21,408 --> 0:32:23,577
现在 让我们接着介绍

536
00:32:24,945 --> 0:32:27,848
正如Gabriel提到的那样

537
00:32:27,915 --> 0:32:30,517
CMMovementDisorderManager

538
00:32:31,218 --> 0:32:33,387
如果你注意的话

539
00:32:33,453 --> 0:32:36,757
monitorKinesias

540
00:32:37,357 --> 0:32:39,226
让我们在初始化程序中调用它

541
00:32:40,694 --> 0:32:45,399
不管谁创建了一个

542
00:32:45,666 --> 0:32:48,035
都能开始震颤

543
00:32:49,069 --> 0:32:50,470
一旦我们收集了这些数据

544
00:32:50,537 --> 0:32:52,472
我们也需要一个方法来查询

545
00:32:52,673 --> 0:32:55,509
让我们继续添加一个方法

546
00:32:56,476 --> 0:33:01,215
我添加了一个新的queryNewAssessments方法

547
00:32:56,476 --> 0:33:01,215
我添加了一个新的queryNewAssessments方法

548
00:33:01,281 --> 0:33:05,052
对于给定的开始日期和结束日期

549
00:33:05,485 --> 0:33:07,087
为相同的开始日期和结束日期

550
00:33:09,456 --> 0:33:12,693
为了这个演示 我们已经运行了

551
00:33:12,759 --> 0:33:15,596
以及运动障碍症状数据点

552
00:33:16,029 --> 0:33:19,733
让我们接着使用这些JSON文件

553
00:33:20,868 --> 0:33:22,903
我会转到

554
00:33:23,904 --> 0:33:26,507
在这里 如你所见

555
00:33:26,773 --> 0:33:29,710
它可以读取JSON文件

556
00:33:30,277 --> 0:33:32,045
让我们在viewDidLoad中

557
00:33:34,381 --> 0:33:36,950
很好 现在让我们运行它

558
00:33:38,685 --> 0:33:41,355
如你所见 我们添加了

559
00:33:41,855 --> 0:33:44,157
并添加了运动障碍API

560
00:33:44,925 --> 0:33:46,727
这就是我们的帕金森研究app

561
00:33:47,027 --> 0:33:48,295
我们在顶部有调查问卷

562
00:33:48,629 --> 0:33:50,397
让我们运行一个问卷吧

563
00:33:51,765 --> 0:33:55,469
如Srinath提到的 我们拥有

564
00:33:56,036 --> 0:34:00,641
所有这些ResearchKit中

565
00:33:56,036 --> 0:34:00,641
所有这些ResearchKit中

566
00:34:01,842 --> 0:34:04,411
让我们快速完成这份问卷

567
00:34:05,112 --> 0:34:07,614
现在让我们接着看下

568
00:34:08,382 --> 0:34:11,385
讲述如何使用

569
00:34:11,985 --> 0:34:13,754
只要我按下

570
00:34:14,054 --> 0:34:15,589
我会重复我看到的文字

571
00:34:17,791 --> 0:34:20,060
敏捷的棕色狐狸跳过了懒狗

572
00:34:23,030 --> 0:34:25,799
我跳转到了下一步

573
00:34:26,099 --> 0:34:29,303
如Srinath所说 这一步

574
00:34:29,369 --> 0:34:32,773
从任务中通过设置

575
00:34:35,175 --> 0:34:38,679
很好 让我们看看创建的这些图表

576
00:34:38,745 --> 0:34:40,714
消除震颤和运动障碍症状数据点

577
00:34:40,981 --> 0:34:43,449
由于ResearchKit图表

578
00:34:43,650 --> 0:34:46,687
我会快速横置我的手机

579
00:34:47,454 --> 0:34:51,458
在这里可以看到 我们有所有的震颤

580
00:34:51,525 --> 0:34:54,194
在特定的一天

581
00:34:54,995 --> 0:34:58,699
我们可以看到轻微

582
00:34:58,966 --> 0:35:00,234
也可能是运动障碍

583
00:34:58,966 --> 0:35:00,234
也可能是运动障碍

584
00:35:01,335 --> 0:35:04,404
很好 现在

585
00:35:04,805 --> 0:35:05,873
接着进行这个演讲

586
00:35:06,340 --> 0:35:07,174
谢谢大家

587
00:35:08,976 --> 0:35:09,810
谢谢 Akshay

588
00:35:12,946 --> 0:35:14,314
感谢你精彩的演示

589
00:35:15,249 --> 0:35:19,319
现在让我们回顾下

590
00:35:21,922 --> 0:35:24,992
我们开始谈论了

591
00:35:25,626 --> 0:35:29,096
通过扩展特权

592
00:35:30,030 --> 0:35:33,000
我们展示了ResearchKit

593
00:35:33,567 --> 0:35:37,504
并且我们还添加了一些新的当前任务

594
00:35:37,838 --> 0:35:39,306
听觉、言语和视觉

595
00:35:40,007 --> 0:35:42,910
Gabriel和你们谈论了

596
00:35:42,976 --> 0:35:46,380
这在Apple Watch的

597
00:35:47,781 --> 0:35:52,953
现在 我们期望

598
00:35:53,220 --> 0:35:55,923
继续与我们互动并提供反馈

599
00:35:56,690 --> 0:36:00,360
我们也鼓励你充分利用

600
00:35:56,690 --> 0:36:00,360
我们也鼓励你充分利用

601
00:36:00,961 --> 0:36:04,631
这样你就可以利用

602
00:36:04,898 --> 0:36:09,770
比如辅助功能、定位和质量保证

603
00:36:10,838 --> 0:36:15,843
这样的话 当我们继续

604
00:36:16,109 --> 0:36:20,180
我们期待所有的开发者

605
00:36:20,480 --> 0:36:22,349
帮助我们改进这些内容

606
00:36:22,816 --> 0:36:26,987
这些任务就像是搭建积木

607
00:36:27,221 --> 0:36:31,992
来创造更大的研究成果

608
00:36:32,292 --> 0:36:36,663
像你做的那样 我们鼓励你

609
00:36:36,997 --> 0:36:39,666
这样我们可以继续

610
00:36:40,067 --> 0:36:44,972
并扩展进展项目的广泛性

611
00:36:46,540 --> 0:36:51,678
如果你想获知更多ResearchKit的信息

612
00:36:52,479 --> 0:36:54,681
如果你要想了解

613
00:36:54,748 --> 0:36:56,550
也可以访问以下的链接

614
00:36:57,184 --> 0:37:00,354
我也鼓励你前往

615
00:36:57,184 --> 0:37:00,354
我也鼓励你前往

616
00:37:00,888 --> 0:37:02,322
我们团队会在那里

617
00:37:02,523 --> 0:37:05,659
会很高兴地回答

618
00:37:05,859 --> 0:37:08,595
我们也会讨论

619
00:37:09,496 --> 0:37:13,233
最后 我们真的很期待

620
00:37:13,300 --> 0:37:16,036
在接下来的日子能用到这些更新

621
00:37:16,103 --> 0:37:16,937
谢谢
