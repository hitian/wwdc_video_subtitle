1
00:00:07,016 --> 0:00:15,500
[ 音乐 ]

2
00:00:21,516 --> 0:00:26,616
[ 掌声 ]

3
00:00:27,116 --> 0:00:29,286
欢迎来到

4
00:00:29,286 --> 0:00:30,706
Getting to Know Swift Manager

5
00:00:31,476 --> 0:00:32,386
我是 Rick Ballard

6
00:00:32,856 --> 0:00:34,476
和我一起的是 Boris Buegling

7
00:00:34,726 --> 0:00:35,946
我们非常高兴

8
00:00:35,946 --> 0:00:37,356
能来给你们介绍

9
00:00:37,356 --> 0:00:38,926
Swift 的包管理器

10
00:00:38,926 --> 0:00:40,236
有时也叫 SwiftPM

11
00:00:40,236 --> 0:00:43,156
今天我们主要关注的

12
00:00:43,156 --> 0:00:44,516
就是这个开源项目

13
00:00:44,716 --> 0:00:46,126
而不是 Apple 的

14
00:00:46,126 --> 0:00:47,056
其他开发者工具

15
00:00:47,266 --> 0:00:49,466
今天要讲的内容有很多

16
00:00:50,906 --> 0:00:52,346
Swift 包管理器

17
00:00:52,346 --> 0:00:54,226
使得在 Swift 生态系统里

18
00:00:54,226 --> 0:00:56,986
开发和分配源代码变得更轻松

19
00:00:57,656 --> 0:00:58,576
今天我们就来讨论一下

20
00:00:58,576 --> 0:01:00,946
它的目标 设计

21
00:00:58,576 --> 0:01:00,946
它的目标 设计

22
00:01:00,946 --> 0:01:03,876
还有一些对未来的展望

23
00:01:05,275 --> 0:01:06,836
首先 我想先说一下

24
00:01:06,836 --> 0:01:08,526
为什么我们决定

25
00:01:08,526 --> 0:01:10,126
为 Swift 项目

26
00:01:10,196 --> 0:01:11,586
创建一个新的包管理器

27
00:01:12,426 --> 0:01:14,186
我们将简单介绍它的使用方法

28
00:01:14,186 --> 0:01:16,276
然后深入讨论它的设计

29
00:01:16,276 --> 0:01:17,146
和特性

30
00:01:18,356 --> 0:01:19,396
我们还会讲到

31
00:01:19,396 --> 0:01:20,596
我们未来的打算

32
00:01:20,596 --> 0:01:22,706
最后会介绍

33
00:01:22,706 --> 0:01:24,586
SwiftPM 的开源过程 

34
00:01:24,666 --> 0:01:26,246
以及如果你感兴趣

35
00:01:26,246 --> 0:01:27,646
要如何加入

36
00:01:28,796 --> 0:01:30,186
我相信你们大多数人对

37
00:01:30,186 --> 0:01:31,486
包管理器都很熟悉 

38
00:01:31,986 --> 0:01:33,506
它们可以很好的用来

39
00:01:33,506 --> 0:01:34,276
分享和再利用代码

40
00:01:34,276 --> 0:01:36,146
但是我们为什么 

41
00:01:36,146 --> 0:01:37,946
要给 Swift 再做一个新的呢

42
00:01:39,576 --> 0:01:41,356
首先是因为

43
00:01:41,356 --> 0:01:42,646
Swift 是一个跨平台语言

44
00:01:42,906 --> 0:01:43,836
所以我们想 

45
00:01:43,836 --> 0:01:45,446
为你的 Swift 代码

46
00:01:45,446 --> 0:01:46,096
建一个跨平台工具

47
00:01:46,996 --> 0:01:48,376
这样你可以更容易的

48
00:01:48,376 --> 0:01:49,866
以一致的方式配置代码

49
00:01:49,866 --> 0:01:51,596
并且在所有 Swift

50
00:01:51,666 --> 0:01:52,936
支持的平台上使用

51
00:01:53,696 --> 0:01:55,386
SwiftPM 包括

52
00:01:55,386 --> 0:01:57,166
完整的构建系统

53
00:01:57,166 --> 0:01:58,856
让你只用一个工具

54
00:01:59,176 --> 0:02:02,976
就可以配置 构建 测试 甚至运行软件

55
00:01:59,176 --> 0:02:02,976
就可以配置 构建 测试 甚至运行软件

56
00:02:07,556 --> 0:02:08,916
同时 我们还致力于

57
00:02:08,916 --> 0:02:10,485
让你能够将

58
00:02:10,485 --> 0:02:12,856
你的 Swift 库

59
00:02:12,856 --> 0:02:14,836
轻松分享给任何人 

60
00:02:15,116 --> 0:02:16,676
通过在 Swift 项目中

61
00:02:16,676 --> 0:02:18,976
提供规范的包管理器

62
00:02:18,976 --> 0:02:20,626
我们希望能

63
00:02:20,686 --> 0:02:21,516
为分发库的方式 

64
00:02:21,516 --> 0:02:22,706
建立一个公共标准

65
00:02:23,466 --> 0:02:24,676
这也有助于

66
00:02:24,676 --> 0:02:26,506
Swift 生态系统的发展  

67
00:02:26,546 --> 0:02:27,546
让 Swift 变得更好

68
00:02:28,006 --> 0:02:31,426
很多人可能有

69
00:02:31,626 --> 0:02:33,206
想要添加的特性

70
00:02:33,626 --> 0:02:34,756
但是我们对

71
00:02:34,756 --> 0:02:36,276
加入核心库的内容非常谨慎

72
00:02:36,276 --> 0:02:37,966
这样才能保证

73
00:02:37,966 --> 0:02:39,426
我们的 API 是精心呈现的

74
00:02:40,486 --> 0:02:41,966
优秀的包管理器

75
00:02:41,966 --> 0:02:43,446
可以较为容易的以包的形式配置

76
00:02:43,866 --> 0:02:45,976
想要添加的内容 而不是

77
00:02:45,976 --> 0:02:47,866
直接把它们放入核心库

78
00:02:48,576 --> 0:02:50,386
随着时间发展

79
00:02:50,386 --> 0:02:52,156
优质的内容

80
00:02:52,156 --> 0:02:53,486
在社区会越来越受欢迎

81
00:02:53,486 --> 0:02:55,066
并且逐渐标准化

82
00:02:56,516 --> 0:02:58,486
最后 

83
00:02:58,486 --> 0:03:00,496
建立 Swift 的包管理器

84
00:02:58,486 --> 0:03:00,496
建立 Swift 的包管理器

85
00:03:00,496 --> 0:03:01,746
让我们可以利用

86
00:03:01,746 --> 0:03:03,676
Swift 的功能和理念

87
00:03:04,716 --> 0:03:06,406
SwiftPM 本身是

88
00:03:06,406 --> 0:03:08,896
写在 Swift 里的 并且也是一个 Swift 包

89
00:03:09,656 --> 0:03:10,836
除此之外

90
00:03:10,836 --> 0:03:13,116
我们和 Swift 语言

91
00:03:13,156 --> 0:03:14,676
以及核心库项目

92
00:03:14,676 --> 0:03:16,806
通力合作

93
00:03:16,806 --> 0:03:18,076
为包管理器构建了很棒的功能

94
00:03:18,076 --> 0:03:19,576
能帮助你的 Swift 代码更好的发挥作用

95
00:03:21,006 --> 0:03:23,106
SwiftPM 是 

96
00:03:23,106 --> 0:03:25,306
Swift 开源项目的一部分  

97
00:03:25,306 --> 0:03:28,636
在 Swift.org 和 GitHub 上都可以访问

98
00:03:29,596 --> 0:03:30,636
Swift.org 上的

99
00:03:30,636 --> 0:03:32,886
Swift 包管理器部分

100
00:03:32,886 --> 0:03:34,286
是对其入门的好地方 

101
00:03:35,596 --> 0:03:37,456
如果你决定试着使用

102
00:03:37,456 --> 0:03:40,696
你可以在所有 Swift 工具链中找到它

103
00:03:40,696 --> 0:03:42,426
也可以从 Swift.org 下载

104
00:03:43,106 --> 0:03:44,946
当然 它也和 Swift 工具一起

105
00:03:44,946 --> 0:03:46,856
包含在 Xcode 的

106
00:03:46,856 --> 0:03:47,746
每一次发布中

107
00:03:49,166 --> 0:03:51,716
接下来讲解 如何使用 SwiftPM

108
00:03:52,166 --> 0:03:53,186
让我们邀请

109
00:03:53,186 --> 0:03:54,546
Boris Buegling 上台

110
00:03:54,546 --> 0:03:54,976
展示一下基本内容

111
00:03:55,516 --> 0:04:02,500
[ 掌声 ]

112
00:03:55,516 --> 0:04:02,500
[ 掌声 ]

113
00:04:07,076 --> 0:04:08,376
谢谢 Rick

114
00:04:08,376 --> 0:04:10,366
让我们了解一下如何使用 SwiftPM

115
00:04:12,736 --> 0:04:15,096
SwiftPM 包含四个

116
00:04:15,096 --> 0:04:16,976
命令行工具 

117
00:04:16,976 --> 0:04:17,666
顶层是 Swift Command

118
00:04:18,466 --> 0:04:20,726
Swift Build 用于创建你的包  

119
00:04:21,065 --> 0:04:23,676
Swift Run 用于运行可执行文件

120
00:04:24,096 --> 0:04:26,466
Swift Test 用于进行测试

121
00:04:26,986 --> 0:04:29,326
Swift Package 用于对包进行

122
00:04:29,326 --> 0:04:33,176
各种非创建操作

123
00:04:33,316 --> 0:04:35,566
包储存在 git 储存区

124
00:04:35,986 --> 0:04:37,876
并且用 git 标签

125
00:04:37,916 --> 0:04:38,756
标示分支

126
00:04:41,656 --> 0:04:43,496
接下来 我会演示

127
00:04:43,496 --> 0:04:45,866
创建第一个 Swift 包

128
00:04:45,866 --> 0:04:47,416
是多么简单的事情

129
00:04:51,136 --> 0:04:54,026
从终端开始

130
00:04:54,026 --> 0:04:56,886
创建一个新的目录叫 helloworld

131
00:04:57,806 --> 0:04:59,656
这也是我们包的名字

132
00:05:00,386 --> 0:05:02,706
转到该目录

133
00:05:02,706 --> 0:05:06,656
并运行 swift package init

134
00:05:06,656 --> 0:05:08,046
--type executable

135
00:05:08,576 --> 0:05:12,166
这样 SwiftPM 就创建了

136
00:05:12,166 --> 0:05:14,006
一个基本包和结构

137
00:05:15,096 --> 0:05:18,306
让我们打开访达

138
00:05:18,306 --> 0:05:19,556
仔细看一下这个包

139
00:05:29,046 --> 0:05:30,426
这个是 Package.swift

140
00:05:30,426 --> 0:05:33,356
清单文件 用来描述包的结构

141
00:05:33,746 --> 0:05:34,656
有一个 README

142
00:05:34,656 --> 0:05:38,026
还有 Sources 目录

143
00:05:39,086 --> 0:05:40,266
其中的子文件夹就是

144
00:05:40,266 --> 0:05:41,176
我们的目标 helloworld

145
00:05:41,836 --> 0:05:43,736
以及可执行项的

146
00:05:43,736 --> 0:05:44,306
main.swift 文件

147
00:05:44,986 --> 0:05:46,286
同时还有一个 test 目录

148
00:05:46,486 --> 0:05:48,476
一会儿可以放入一些单元测试

149
00:05:49,186 --> 0:05:52,146
让我们回到终端

150
00:05:52,816 --> 0:05:58,296
输入 swift run

151
00:05:58,296 --> 0:06:00,126
来构建和运行这个包

152
00:05:58,296 --> 0:06:00,126
来构建和运行这个包

153
00:06:00,466 --> 0:06:03,066
这个命令会编译该包

154
00:06:03,066 --> 0:06:05,056
链接可执行项

155
00:06:05,056 --> 0:06:06,266
于是我们看到了输出的 Hello，World！

156
00:06:06,766 --> 0:06:10,766
下面 我要换另外一个终端窗口

157
00:06:10,766 --> 0:06:12,566
在那里我准备了一个 复杂一点儿的包

158
00:06:12,706 --> 0:06:13,656
在接下来讲解关于

159
00:06:13,656 --> 0:06:16,926
SwiftPM 的基本概念时

160
00:06:17,116 --> 0:06:18,276
我们会使用它

161
00:06:19,026 --> 0:06:22,106
首先 让我们先运行一下

162
00:06:22,106 --> 0:06:23,346
看看它是干嘛的

163
00:06:24,236 --> 0:06:25,986
你可以看到

164
00:06:25,986 --> 0:06:27,546
它会在终端随机产生

165
00:06:27,986 --> 0:06:28,666
扑克牌花色和数字

166
00:06:35,076 --> 0:06:36,666
现在 我们可以回到

167
00:06:36,666 --> 0:06:39,816
幻灯片来说一说

168
00:06:39,866 --> 0:06:40,816
SwiftPM 的基本概念

169
00:06:47,436 --> 0:06:49,186
一个包分为三个

170
00:06:49,186 --> 0:06:51,006
主要部分 依赖

171
00:06:52,576 --> 0:06:57,206
目标和产品

172
00:06:57,736 --> 0:06:59,666
接下来我们会

173
00:06:59,666 --> 0:07:01,876
分别了解一下每一个部分

174
00:06:59,666 --> 0:07:01,876
分别了解一下每一个部分

175
00:07:04,036 --> 0:07:05,836
依赖是当你

176
00:07:05,836 --> 0:07:08,336
开发功能的时候

177
00:07:08,336 --> 0:07:09,476
可使用的 Swift 包

178
00:07:10,146 --> 0:07:14,346
每个依赖提供

179
00:07:14,346 --> 0:07:16,736
一个或多个产品

180
00:07:17,256 --> 0:07:18,466
比如你的包可使用的库

181
00:07:19,046 --> 0:07:21,816
让我们来看一下

182
00:07:21,816 --> 0:07:23,286
包中的依赖

183
00:07:23,286 --> 0:07:26,216
在 Swift 清单文件里是什么样子

184
00:07:26,426 --> 0:07:27,816
每个依赖都有源位置

185
00:07:27,816 --> 0:07:31,486
而且有版本号

186
00:07:35,576 --> 0:07:37,436
目标是包的 

187
00:07:37,436 --> 0:07:38,646
基本构建模块

188
00:07:39,786 --> 0:07:42,076
一个目标描述

189
00:07:42,076 --> 0:07:44,736
如何将一组源文件

190
00:07:45,156 --> 0:07:47,606
构建到模块或者测试套件中

191
00:07:49,956 --> 0:07:51,856
目标可以依赖

192
00:07:51,856 --> 0:07:54,736
同个包里的其他目标 

193
00:07:56,456 --> 0:07:58,716
或者从其他包里

194
00:07:58,716 --> 0:08:00,106
导出的

195
00:07:58,716 --> 0:08:00,106
导出的

196
00:08:00,106 --> 0:08:00,776
声明为依赖的产品

197
00:08:02,976 --> 0:08:04,656
产品可以由库

198
00:08:04,656 --> 0:08:08,396
执行

199
00:08:08,396 --> 0:08:09,476
产品是由一个或者多个目标的

200
00:08:09,476 --> 0:08:11,506
构件组成的

201
00:08:13,996 --> 0:08:16,166
包通过定义产品

202
00:08:16,166 --> 0:08:18,836
为其他包提供库

203
00:08:19,726 --> 0:08:22,536
默认情况下

204
00:08:22,536 --> 0:08:23,946
你不需要声明库的类型

205
00:08:23,946 --> 0:08:26,726
SwiftPM 会根据

206
00:08:26,726 --> 0:08:29,356
它的使用情况来帮你选择

207
00:08:30,446 --> 0:08:32,346
如果需要

208
00:08:32,346 --> 0:08:34,586
你可以特定声明一个库 

209
00:08:34,586 --> 0:08:34,976
是静态的或者动态的

210
00:08:35,586 --> 0:08:38,496
让我们看一下

211
00:08:38,496 --> 0:08:40,756
目标是如何

212
00:08:41,746 --> 0:08:42,066
清单中配置的

213
00:08:42,066 --> 0:08:43,996
在这个例子里 一共有三个目标

214
00:08:45,916 --> 0:08:47,866
第一个叫 libdealer

215
00:08:48,046 --> 0:08:51,646
它包含了我们主要功能的执行

216
00:08:52,496 --> 0:08:53,906
它有一个依赖

217
00:08:53,906 --> 0:08:55,036
是 DeckOfPlayingCards

218
00:08:55,946 --> 0:08:58,266
就是我们之前声明的

219
00:08:58,266 --> 0:08:59,096
依赖的产品

220
00:09:00,896 --> 0:09:03,206
第二个目标是 dealer 它需要依靠

221
00:09:03,206 --> 0:09:04,946
前一个目标来提供

222
00:09:04,946 --> 0:09:06,536
我们刚才运行的命令行工具

223
00:09:07,096 --> 0:09:10,756
最后 有一个测试目标

224
00:09:10,756 --> 0:09:12,126
它依赖于

225
00:09:12,126 --> 0:09:13,696
其他两个目标

226
00:09:13,696 --> 0:09:14,956
我们可以对功能进行单元测试

227
00:09:20,026 --> 0:09:21,436
在我们的样例包中

228
00:09:21,436 --> 0:09:23,206
我们还配置了两个产品

229
00:09:24,646 --> 0:09:26,676
第一个是库产品

230
00:09:27,206 --> 0:09:29,026
对应目标 libdealer

231
00:09:30,066 --> 0:09:31,806
它把我们的执行结果

232
00:09:31,806 --> 0:09:33,736
作为库提供给

233
00:09:33,736 --> 0:09:34,746
外部使用

234
00:09:35,186 --> 0:09:39,016
第二个是一个

235
00:09:39,016 --> 0:09:41,166
可执行目标

236
00:09:41,166 --> 0:09:43,916
它依靠 dealer 目标  

237
00:09:43,916 --> 0:09:45,526
为命令行提供可执行项

238
00:09:50,496 --> 0:09:52,686
最后我要展示一下

239
00:09:52,686 --> 0:09:53,886
如果运用包

240
00:09:53,886 --> 0:09:56,306
为本例添加一个新功能

241
00:09:59,836 --> 0:10:01,216
让我们换到一个新的 

242
00:09:59,836 --> 0:10:01,216
让我们换到一个新的 

243
00:10:01,216 --> 0:10:03,686
终端窗口然后打开

244
00:10:04,116 --> 0:10:05,806
package.swift 清单文件

245
00:10:05,806 --> 0:10:10,636
添加一个新依赖

246
00:10:10,896 --> 0:10:15,156
这次 我们添加的是 

247
00:10:15,156 --> 0:10:16,136
SwiftPM 本身

248
00:10:16,216 --> 0:10:19,296
正如 Rick 所说 

249
00:10:19,346 --> 0:10:20,426
它自己就是 Swift 包

250
00:10:20,856 --> 0:10:22,446
但是它并不提供一个稳定的API  

251
00:10:22,606 --> 0:10:23,686
这就是为什么我们

252
00:10:23,686 --> 0:10:25,486
要依赖于一个具体的版本号

253
00:10:27,516 --> 0:10:30,146
我们还希望能

254
00:10:30,146 --> 0:10:32,086
在 libdealer 目标中

255
00:10:32,086 --> 0:10:32,476
依赖于一个 SwiftPM 的产品

256
00:10:33,016 --> 0:10:34,206
叫做 Utility

257
00:10:34,546 --> 0:10:37,716
它有一个类

258
00:10:37,716 --> 0:10:40,146
叫做终端控制器

259
00:10:40,146 --> 0:10:42,026
让我们可以

260
00:10:42,216 --> 0:10:46,326
在终端中输出不同的颜色

261
00:10:46,476 --> 0:10:48,056
请记住

262
00:10:48,056 --> 0:10:49,986
这不是官方 Apple API

263
00:10:49,986 --> 0:10:51,196
我们只是用来演示

264
00:10:51,756 --> 0:10:54,906
让我们回到终端

265
00:10:57,136 --> 0:10:59,576
在演示前 

266
00:10:59,576 --> 0:11:01,156
我已经更改了代码

267
00:10:59,576 --> 0:11:01,156
我已经更改了代码

268
00:11:02,016 --> 0:11:03,496
来使用这个新依赖

269
00:11:03,876 --> 0:11:06,716
让我们试着运行

270
00:11:06,716 --> 0:11:07,226
看下结果

271
00:11:07,716 --> 0:11:09,926
正如你所见 

272
00:11:09,926 --> 0:11:11,346
输出是一样的

273
00:11:11,346 --> 0:11:12,946
但添加了一些颜色

274
00:11:12,946 --> 0:11:13,346
变得更有趣了

275
00:11:19,096 --> 0:11:20,856
现在我想展示最后一个演示

276
00:11:22,656 --> 0:11:24,986
就是 SwiftPM 怎么运行测试

277
00:11:25,526 --> 0:11:28,566
我们要使用 Swift Neo 包

278
00:11:29,096 --> 0:11:30,636
它是一个 Apple

279
00:11:31,006 --> 0:11:32,686
在春天发布的开源网络库

280
00:11:33,236 --> 0:11:37,986
我们使用 --parallel 选项

281
00:11:38,226 --> 0:11:39,366
运行 Swift Test 

282
00:11:40,806 --> 0:11:42,576
这让我们可以 进行平行测试

283
00:11:42,656 --> 0:11:44,656
这样就可以更快的得到测试结果

284
00:11:45,216 --> 0:11:47,036
还可以选择 filter 选项

285
00:11:49,396 --> 0:11:51,156
这样你就可以运行子测试

286
00:11:51,156 --> 0:11:53,926
基于单一结果进行迭代

287
00:11:57,736 --> 0:12:00,356
现在需要在几秒内

288
00:11:57,736 --> 0:12:00,356
现在需要在几秒内

289
00:12:01,166 --> 0:12:05,236
再次编译我们的包并运行测试

290
00:12:09,136 --> 0:12:10,716
如你所见

291
00:12:10,716 --> 0:12:13,236
进度条很好

292
00:12:13,286 --> 0:12:14,536
测试结束的很快

293
00:12:14,536 --> 0:12:15,636
因为我们在平行运行它们

294
00:12:18,026 --> 0:12:19,836
让我们再次回到幻灯片

295
00:12:26,536 --> 0:12:27,776
接下来 我要讲一下 

296
00:12:27,776 --> 0:12:29,936
Swift 包管理器的设计

297
00:12:36,216 --> 0:12:38,606
SwiftPM 遵循 Swift 的理念

298
00:12:38,986 --> 0:12:40,706
快速 安全

299
00:12:40,706 --> 0:12:41,146
表达能力强

300
00:12:41,816 --> 0:12:44,736
它很安全

301
00:12:44,736 --> 0:12:46,426
因为构建环境是独立的

302
00:12:46,426 --> 0:12:48,546
而且构建项目不能运行任意指令

303
00:12:49,256 --> 0:12:52,116
而快速得益于

304
00:12:52,116 --> 0:12:53,896
使用了对大型依赖图

305
00:12:53,896 --> 0:12:54,886
可扩展的构建引擎

306
00:12:55,416 --> 0:12:58,526
表达能力强是因为 

307
00:12:58,636 --> 0:13:00,716
包清单文件使用的是 Swift 语言

308
00:12:58,636 --> 0:13:00,716
包清单文件使用的是 Swift 语言

309
00:13:01,426 --> 0:13:04,136
这也让你可以使用

310
00:13:04,136 --> 0:13:06,346
已经熟悉的编程语言

311
00:13:06,956 --> 0:13:11,346
接下来

312
00:13:11,346 --> 0:13:12,436
我会向你展示

313
00:13:12,436 --> 0:13:13,726
在创建 Swift 包时

314
00:13:13,726 --> 0:13:16,136
会遇到的各个步骤

315
00:13:16,766 --> 0:13:19,576
首先是配置

316
00:13:23,096 --> 0:13:25,126
就像刚才见到的 SwiftPM 的清单文件

317
00:13:25,126 --> 0:13:26,796
是基于 Swift 的

318
00:13:27,336 --> 0:13:28,906
使用 Swift 让它更加容易理解

319
00:13:28,906 --> 0:13:31,116
因为这样你不用学习任何

320
00:13:31,116 --> 0:13:32,136
新的语言

321
00:13:32,736 --> 0:13:34,646
而且我们还遵循了 

322
00:13:34,646 --> 0:13:36,876
Swift 的 API 设计准则 

323
00:13:36,876 --> 0:13:37,416
让你觉得更加熟悉

324
00:13:38,216 --> 0:13:40,216
这还让我们可以

325
00:13:40,216 --> 0:13:42,216
利用现有的

326
00:13:42,276 --> 0:13:47,086
为 Swift 写的工具 

327
00:13:47,086 --> 0:13:48,586
但是当编写你自己的清单时

328
00:13:48,586 --> 0:13:50,076
你还是应该使用声明式语法

329
00:13:50,076 --> 0:13:51,946
以避免副作用发生

330
00:13:53,236 --> 0:13:54,586
因为 SwiftPM 不能保证

331
00:13:54,586 --> 0:13:56,766
在什么时候或按什么频率

332
00:13:56,766 --> 0:13:59,406
评估你的源代码

333
00:14:00,316 --> 0:14:01,836
左手边

334
00:14:01,836 --> 0:14:03,846
这个例子就没有

335
00:14:03,846 --> 0:14:04,686
完全使用声明式

336
00:14:05,416 --> 0:14:06,886
我们看不到

337
00:14:06,886 --> 0:14:09,656
生成的名字

338
00:14:09,656 --> 0:14:11,526
而它在包里面出现了好几次

339
00:14:12,076 --> 0:14:15,736
相反 在右边就是一个

340
00:14:15,736 --> 0:14:17,486
运用字符串常量的

341
00:14:17,486 --> 0:14:18,406
声明式清单文件

342
00:14:18,666 --> 0:14:20,356
很容易理解 

343
00:14:20,746 --> 0:14:21,726
目标是什么

344
00:14:23,556 --> 0:14:25,526
如你所见

345
00:14:25,526 --> 0:14:27,086
不使用声明式语法

346
00:14:27,086 --> 0:14:28,056
会让你的清单

347
00:14:28,056 --> 0:14:29,596
对你和你的用户而言

348
00:14:29,596 --> 0:14:29,976
更难理解

349
00:14:33,146 --> 0:14:35,226
源文件被放在磁盘上

350
00:14:35,296 --> 0:14:36,786
在包中以每个目标命名的

351
00:14:36,786 --> 0:14:38,806
文件夹下

352
00:14:39,426 --> 0:14:40,846
这样就可以上手

353
00:14:40,846 --> 0:14:43,216
并且让包

354
00:14:43,246 --> 0:14:46,336
使用一个常见结构

355
00:14:46,516 --> 0:14:47,796
让你可以更快的导航

356
00:14:50,856 --> 0:14:52,496
包管理器和其他构建工具

357
00:14:52,496 --> 0:14:54,506
总是关注

358
00:14:55,036 --> 0:14:56,696
哪些是用户

359
00:14:56,696 --> 0:14:58,636
指定编写的

360
00:14:58,636 --> 0:15:00,256
哪些是由包管理器

361
00:14:58,636 --> 0:15:00,256
哪些是由包管理器

362
00:15:00,256 --> 0:15:00,976
应用的惯例

363
00:15:06,046 --> 0:15:07,586
正如之前所讲

364
00:15:07,586 --> 0:15:09,126
源文件是自动从

365
00:15:09,126 --> 0:15:10,616
盘里的惯例位置提取的

366
00:15:10,616 --> 0:15:12,746
这样你可以很容易的

367
00:15:12,746 --> 0:15:14,286
添加或者移除源文件

368
00:15:14,286 --> 0:15:15,936
而不需要编辑

369
00:15:16,006 --> 0:15:17,316
包清单文件

370
00:15:19,496 --> 0:15:21,096
但是产品和目标

371
00:15:21,656 --> 0:15:23,326
需要指定配置

372
00:15:23,326 --> 0:15:26,376
这样可以更简单的

373
00:15:26,376 --> 0:15:28,436
理解这个包和它的定义

374
00:15:28,676 --> 0:15:31,506
而无需与盘的布局 进行对照

375
00:15:32,816 --> 0:15:33,876
同时 客户仅仅通过看清单

376
00:15:33,876 --> 0:15:36,346
就很容易明白

377
00:15:36,346 --> 0:15:38,846
这个包提供的是什么内容

378
00:15:42,236 --> 0:15:44,756
SwiftPM 同时支持 

379
00:15:44,756 --> 0:15:45,926
用其他语言创建源代码

380
00:15:45,926 --> 0:15:47,766
比如 C C++

381
00:15:47,766 --> 0:15:49,456
或者 Objective-C

382
00:15:50,156 --> 0:15:52,276
并且可以与现有代码整合

383
00:15:53,456 --> 0:15:54,826
但是请注意

384
00:15:54,826 --> 0:15:56,516
我们不支持在同一个目标里

385
00:15:56,946 --> 0:15:58,646
把这些语言和 Swift 混用

386
00:15:59,086 --> 0:16:03,266
接下来 我们看一下

387
00:15:59,086 --> 0:16:03,266
接下来 我们看一下

388
00:16:03,366 --> 0:16:04,646
依赖和版本号

389
00:16:07,916 --> 0:16:10,006
为了确保你的包

390
00:16:10,006 --> 0:16:12,116
能够很好的进行错误修补

391
00:16:12,116 --> 0:16:14,136
而不是频繁混乱

392
00:16:14,356 --> 0:16:16,306
Swift 包需要坚持语义版本

393
00:16:17,606 --> 0:16:19,186
这是一个常用标准

394
00:16:19,346 --> 0:16:20,656
把具体语义 

395
00:16:20,656 --> 0:16:22,246
与每个版本数的部分

396
00:16:22,246 --> 0:16:23,246
联系起来

397
00:16:25,376 --> 0:16:27,236
主要版本意味着

398
00:16:27,276 --> 0:16:29,996
破坏性改变

399
00:16:30,146 --> 0:16:31,936
需要客户更新代码

400
00:16:33,196 --> 0:16:34,756
这些改变包括

401
00:16:34,756 --> 0:16:36,516
删除现有类型

402
00:16:36,996 --> 0:16:38,566
删除信息

403
00:16:38,566 --> 0:16:39,236
或者改变签名

404
00:16:40,166 --> 0:16:42,066
同时包括

405
00:16:42,066 --> 0:16:45,296
反向不兼容错误修补

406
00:16:45,296 --> 0:16:48,366
或者对现有 API 的行为

407
00:16:48,366 --> 0:16:50,066
做出的重大改变

408
00:16:50,896 --> 0:16:52,406
次要版本是指

409
00:16:52,406 --> 0:16:55,646
以反向兼容的形式

410
00:16:55,646 --> 0:16:56,006
添加的功能

411
00:16:57,046 --> 0:16:58,456
比如添加一个新的

412
00:16:58,456 --> 0:17:00,106
方法或者类型

413
00:16:58,456 --> 0:17:00,106
方法或者类型

414
00:17:00,996 --> 0:17:02,896
最后 补丁版本是指

415
00:17:02,896 --> 0:17:04,465
当你做反向兼容错误修补时

416
00:17:04,465 --> 0:17:06,736
需要增加的数字

417
00:17:08,276 --> 0:17:10,776
这让客户可以

418
00:17:10,776 --> 0:17:13,536
可以得到错误修复

419
00:17:13,536 --> 0:17:17,695
而不用担心破坏源代码

420
00:17:17,816 --> 0:17:21,296
SwiftPM 在开始构建前

421
00:17:21,296 --> 0:17:23,246
需要确定包图中所有包的

422
00:17:23,246 --> 0:17:24,056
具体版本

423
00:17:24,705 --> 0:17:26,526
我们要使用叫

424
00:17:26,526 --> 0:17:27,756
依赖解析的过程

425
00:17:28,716 --> 0:17:30,796
它可以让 SwiftPM 

426
00:17:30,796 --> 0:17:32,376
查看所有对包的指定要求

427
00:17:33,456 --> 0:17:37,516
并找出和它们兼容的

428
00:17:37,516 --> 0:17:40,146
最新版本

429
00:17:40,216 --> 0:17:41,396
让我们再来看一下

430
00:17:41,396 --> 0:17:42,926
SwiftPM 在这个过程中

431
00:17:42,926 --> 0:17:44,836
都做了些什么

432
00:17:44,836 --> 0:17:45,306
还用刚才的演示

433
00:17:47,136 --> 0:17:49,676
dealer 包有两个

434
00:17:49,676 --> 0:17:51,066
直接的依赖

435
00:17:51,476 --> 0:17:53,796
一个是 SwiftPM 本身

436
00:17:53,796 --> 0:17:58,136
另外一个是 DeckOfPlayingCards

437
00:17:58,276 --> 0:17:59,666
SwiftPM 会分析

438
00:17:59,666 --> 0:18:01,456
这些直接依赖的版本 

439
00:17:59,666 --> 0:18:01,456
这些直接依赖的版本 

440
00:18:02,366 --> 0:18:03,666
第一个一目了然 

441
00:18:03,666 --> 0:18:05,086
因为我们

442
00:18:05,086 --> 0:18:06,536
指定了一个版本

443
00:18:07,886 --> 0:18:09,336
写在了标签中

444
00:18:10,446 --> 0:18:12,866
第二个 我们使用了 from 语法

445
00:18:13,286 --> 0:18:14,986
意味着我们

446
00:18:14,986 --> 0:18:17,826
对次要和补丁部分进行更新

447
00:18:18,356 --> 0:18:21,766
本例中 最后得到的

448
00:18:21,896 --> 0:18:24,046
是 3.1.4 标签

449
00:18:24,596 --> 0:18:28,566
整个过程都是递归的

450
00:18:29,206 --> 0:18:30,876
接下来 SwiftPM

451
00:18:30,876 --> 0:18:33,296
查看所有直接依赖的传递依赖

452
00:18:33,726 --> 0:18:34,716
PM 没有其他的依赖了

453
00:18:34,716 --> 0:18:37,146
所以没有其他什么可做的了

454
00:18:37,706 --> 0:18:39,686
但是 DeckOfPlayingCards

455
00:18:39,796 --> 0:18:41,236
依赖于 fisher-yates 和

456
00:18:41,236 --> 0:18:42,346
playing-card 包

457
00:18:42,916 --> 0:18:47,426
SwiftPM 需要再次解析

458
00:18:47,426 --> 0:18:49,176
这些包的版本

459
00:18:49,576 --> 0:18:50,976
对 fisher-yates 包来说 

460
00:18:51,066 --> 0:18:52,966
方法是一样的

461
00:18:52,966 --> 0:18:55,576
因为我们使用的还是 from 语法

462
00:18:56,666 --> 0:18:57,906
在这里的

463
00:18:57,906 --> 0:18:59,626
标签结果是 2.2.5

464
00:19:00,146 --> 0:19:02,716
对 playing-card 包

465
00:19:02,986 --> 0:19:04,976
我们使用的是 upToNextMinor 语法

466
00:19:05,446 --> 0:19:06,866
意味着我们

467
00:19:06,866 --> 0:19:08,316
只更新补丁部分

468
00:19:09,566 --> 0:19:10,466
如果你想对依赖更保守一点

469
00:19:10,466 --> 0:19:11,786
只进行错误修补

470
00:19:11,786 --> 0:19:14,576
那么你应该使用这种语法

471
00:19:15,216 --> 0:19:17,786
在这里的

472
00:19:17,786 --> 0:19:21,916
标签结果是 3.0.2

473
00:19:22,066 --> 0:19:23,626
最后 当考虑目标时

474
00:19:23,626 --> 0:19:26,486
SwiftPM 需要

475
00:19:26,576 --> 0:19:28,456
把要求的产品

476
00:19:28,456 --> 0:19:30,606
和我们解析的包匹配

477
00:19:31,186 --> 0:19:32,556
让我们看一下演示中的

478
00:19:32,556 --> 0:19:34,996
dealer 目标 

479
00:19:34,996 --> 0:19:36,696
如你所见  

480
00:19:36,696 --> 0:19:39,176
Utility 产品是由

481
00:19:39,176 --> 0:19:40,346
SwiftPM 包提供的

482
00:19:41,476 --> 0:19:43,116
包的其他部分

483
00:19:43,786 --> 0:19:45,186
提供其他产品

484
00:19:45,646 --> 0:19:50,156
依赖解析之后 

485
00:19:50,156 --> 0:19:52,106
解析结果被保存在

486
00:19:52,106 --> 0:19:53,236
package.resolved 文件里

487
00:19:53,816 --> 0:19:56,106
这个文件的目的是

488
00:19:56,106 --> 0:19:57,556
让你可以把你的

489
00:19:57,606 --> 0:19:59,086
解析版本分享给

490
00:19:59,086 --> 0:20:01,076
团队其他人或者 

491
00:19:59,086 --> 0:20:01,076
团队其他人或者 

492
00:20:01,576 --> 0:20:03,496
继续集成基础结构

493
00:20:03,496 --> 0:20:05,896
这样你就可以得到 可依赖的构建结果

494
00:20:05,896 --> 0:20:07,436
并且你可以选择

495
00:20:07,436 --> 0:20:10,976
什么时候更新依赖

496
00:20:11,046 --> 0:20:12,536
当你想更新时

497
00:20:12,536 --> 0:20:14,406
运行 Swift Package Update 就可以

498
00:20:15,366 --> 0:20:19,896
请注意 包含 package.resolved 的

499
00:20:19,936 --> 0:20:21,286
是最顶层的包

500
00:20:22,176 --> 0:20:24,626
如果有传递依赖包含

501
00:20:24,626 --> 0:20:26,606
package.resolve 文件

502
00:20:26,606 --> 0:20:28,506
它会被依赖解析忽略

503
00:20:30,776 --> 0:20:32,206
接下来让我们看一下

504
00:20:32,206 --> 0:20:36,796
包的构建

505
00:20:36,796 --> 0:20:38,446
SwiftPM 使用 llbuild

506
00:20:38,446 --> 0:20:39,846
作为基础构建引擎

507
00:20:40,526 --> 0:20:42,146
llbuild 是一套构建 

508
00:20:42,146 --> 0:20:43,156
构建系统的库

509
00:20:43,726 --> 0:20:45,146
建立在通用目标和

510
00:20:45,146 --> 0:20:47,546
可重复利用的构建引擎之上

511
00:20:47,956 --> 0:20:49,836
这样我们可以进行

512
00:20:49,836 --> 0:20:52,206
更快也更准确的增量构建

513
00:20:53,056 --> 0:20:54,926
Xcode 的新构建系统

514
00:20:54,926 --> 0:20:55,536
也使用该引擎

515
00:20:56,096 --> 0:21:00,606
这也是 Swift 开源项目的一部分

516
00:20:56,096 --> 0:21:00,606
这也是 Swift 开源项目的一部分

517
00:21:02,796 --> 0:21:04,806
独立的软件开发

518
00:21:04,876 --> 0:21:06,266
再加上详细声明的依赖

519
00:21:06,266 --> 0:21:10,686
保证了

520
00:21:10,686 --> 0:21:11,776
即使有的包要求复杂

521
00:21:11,776 --> 0:21:13,476
也可以安全可靠地

522
00:21:13,476 --> 0:21:15,736
在不同环境下构建和使用

523
00:21:17,016 --> 0:21:18,376
SwiftPM 不会把包

524
00:21:18,376 --> 0:21:19,596
以全局形式安装到系统

525
00:21:19,786 --> 0:21:21,506
它只允许你

526
00:21:21,506 --> 0:21:23,956
使用你指明依赖的包

527
00:21:25,166 --> 0:21:29,116
我们还利用了构建沙盒

528
00:21:29,116 --> 0:21:30,526
这样在构建时 就不会

529
00:21:30,526 --> 0:21:32,106
把内容写入文件系统的任意位置

530
00:21:33,546 --> 0:21:36,216
SwiftPM 不允许

531
00:21:36,216 --> 0:21:37,676
执行任意命令

532
00:21:37,676 --> 0:21:39,056
或者外壳脚本

533
00:21:40,246 --> 0:21:41,326
这让我们可以

534
00:21:41,326 --> 0:21:44,016
完全了解你的构建图

535
00:21:44,396 --> 0:21:46,396
和所有的输入输出

536
00:21:46,396 --> 0:21:49,366
进行快速又准确的增量构建

537
00:21:50,166 --> 0:21:52,486
因为我们知道

538
00:21:52,486 --> 0:21:53,326
你所有的依赖

539
00:21:53,946 --> 0:21:56,726
正如我之前演示时所说 

540
00:21:56,726 --> 0:21:59,496
SwiftPM 也支持测试

541
00:22:00,076 --> 0:22:02,716
它建立在 XCTest 框架上

542
00:22:02,716 --> 0:22:03,306
你应该已经很熟悉了

543
00:22:03,916 --> 0:22:07,136
我们支持平行测试

544
00:22:07,136 --> 0:22:08,876
这样你可以更快的得到测试结果

545
00:22:10,036 --> 0:22:12,766
我们还支持测试过滤 

546
00:22:12,766 --> 0:22:13,856
这样你可以运行一系列

547
00:22:13,886 --> 0:22:15,566
子测试并基于同一结果

548
00:22:15,566 --> 0:22:15,936
进行迭代

549
00:22:16,496 --> 0:22:20,816
因为我们在扩展 SwiftPM

550
00:22:20,816 --> 0:22:21,726
我们考虑到了

551
00:22:21,726 --> 0:22:23,776
工作流程功能

552
00:22:23,776 --> 0:22:25,116
让你可以在命令行

553
00:22:25,116 --> 0:22:27,526
进行所有的开发

554
00:22:27,716 --> 0:22:29,376
这个功能就是编辑模式

555
00:22:30,246 --> 0:22:32,876
它可以重写某个特定包所有的

556
00:22:32,876 --> 0:22:34,986
传递事件

557
00:22:34,986 --> 0:22:37,186
它创建了一个本地副本

558
00:22:37,386 --> 0:22:40,626
这样可以进行临时编辑

559
00:22:40,626 --> 0:22:41,766
而对传递依赖的

560
00:22:41,766 --> 0:22:43,326
调整可以被测试

561
00:22:43,806 --> 0:22:44,996
而不用把提前转给

562
00:22:44,996 --> 0:22:46,836
包图中所有的包

563
00:22:51,036 --> 0:22:53,396
分支依赖允许

564
00:22:53,396 --> 0:22:54,826
在没有严格版本要求的情况下   

565
00:22:54,826 --> 0:22:56,346
依赖包

566
00:22:56,626 --> 0:22:58,146
当你在同时

567
00:22:58,146 --> 0:23:00,076
开发好几个包时 这个很有用

568
00:22:58,146 --> 0:23:00,076
开发好几个包时 这个很有用

569
00:23:01,276 --> 0:23:02,396
这是只针对开发的功能

570
00:23:02,396 --> 0:23:04,816
所以当你发布标签之前

571
00:23:04,816 --> 0:23:06,446
你需要调整到

572
00:23:06,706 --> 0:23:10,786
特定版本的依赖

573
00:23:10,986 --> 0:23:12,636
本地包让你可以

574
00:23:12,636 --> 0:23:14,526
直接从文件系统

575
00:23:14,526 --> 0:23:17,296
使用包 而不是从 Git 存储库

576
00:23:17,806 --> 0:23:19,056
这很有用

577
00:23:19,056 --> 0:23:22,876
可以让你在初始创建中

578
00:23:22,876 --> 0:23:24,816
创建多个包

579
00:23:27,936 --> 0:23:29,566
最后一个话题是

580
00:23:29,566 --> 0:23:33,176
使用 SwiftPM 和 Swift 语言的新版本

581
00:23:33,746 --> 0:23:37,766
每个新 Swift 版本 

582
00:23:37,766 --> 0:23:39,156
会产生一个新版本的

583
00:23:39,156 --> 0:23:40,866
package.swift 清单 API

584
00:23:41,796 --> 0:23:43,146
上一个版本 API 

585
00:23:43,146 --> 0:23:45,876
还可以使用

586
00:23:45,876 --> 0:23:47,366
这样你可以利用新的源工具

587
00:23:47,556 --> 0:23:48,716
而不需要更新你的包

588
00:23:48,716 --> 0:23:52,316
或者失去对现有包的访问

589
00:23:53,576 --> 0:23:55,156
采用新的 API

590
00:23:55,626 --> 0:23:57,676
是独立于

591
00:23:57,676 --> 0:23:59,466
将你的包源代码

592
00:23:59,466 --> 0:24:00,546
更改到新的 Swift 语言版本的

593
00:23:59,466 --> 0:24:00,546
更改到新的 Swift 语言版本的

594
00:24:01,146 --> 0:24:05,546
若要指定使用的 API 具体是哪个版本 

595
00:24:05,546 --> 0:24:08,006
我们要在 package.swift

596
00:24:08,006 --> 0:24:09,476
清单文件的顶层

597
00:24:10,526 --> 0:24:12,846
使用 Swift 工具版本指令

598
00:24:13,446 --> 0:24:15,306
它可以指定

599
00:24:15,306 --> 0:24:16,476
用来处理给定清单所需的

600
00:24:16,476 --> 0:24:19,266
Swift 工具的

601
00:24:19,266 --> 0:24:20,226
最低版本要求

602
00:24:20,686 --> 0:24:24,056
每个包还可以声明

603
00:24:24,176 --> 0:24:25,356
它用来编译源代码的

604
00:24:25,356 --> 0:24:28,646
Swift 语言版本

605
00:24:29,536 --> 0:24:31,186
这是一个列表

606
00:24:31,186 --> 0:24:32,436
通过使用编译指令

607
00:24:32,436 --> 0:24:34,216
你可以对于自己同一版本的包

608
00:24:34,216 --> 0:24:36,846
你可以支持多个版本的 Swift

609
00:24:37,816 --> 0:24:39,256
一个包图可以是

610
00:24:39,256 --> 0:24:41,826
很多不同语言版本的包的集合

611
00:24:44,456 --> 0:24:45,866
今天讲了很多

612
00:24:45,866 --> 0:24:48,136
SwiftPM 如何工作的

613
00:24:48,136 --> 0:24:49,516
接下来 让我们再次

614
00:24:49,516 --> 0:24:51,746
请 Rick 上台来讲一下

615
00:24:51,746 --> 0:24:52,476
未来的展望

616
00:24:53,516 --> 0:24:58,626
[ 掌声 ]

617
00:24:59,126 --> 0:24:59,946
谢谢 Boris

618
00:25:01,286 --> 0:25:02,416
Boris 向你们展示了现在 

619
00:25:02,416 --> 0:25:04,856
可以做什么 但其实

620
00:25:04,856 --> 0:25:06,136
还有很多潜力

621
00:25:06,586 --> 0:25:08,426
SwiftPM 还是一个新项目 

622
00:25:08,426 --> 0:25:09,716
有很多成长空间 

623
00:25:11,216 --> 0:25:13,396
Swift 使用了一个

624
00:25:13,396 --> 0:25:14,986
开放演化的过程

625
00:25:15,206 --> 0:25:17,956
意味着任何人 包括你们都可以贡献想法

626
00:25:18,926 --> 0:25:19,796
如果你想得到一些启发

627
00:25:19,796 --> 0:25:21,596
我们也愿意分享一些

628
00:25:21,596 --> 0:25:23,736
我们的想法

629
00:25:23,736 --> 0:25:25,136
虽然它们还没有形成计划

630
00:25:25,946 --> 0:25:27,086
我们分享这些想法

631
00:25:27,086 --> 0:25:29,956
为了让你看到 Swift 包管理器的潜力

632
00:25:30,276 --> 0:25:32,276
也很希望能得到

633
00:25:32,276 --> 0:25:33,926
你们的反馈评论和想法 

634
00:25:33,926 --> 0:25:36,706
帮助我们推进这个产品

635
00:25:38,216 --> 0:25:39,636
我今天要讲的

636
00:25:39,806 --> 0:25:41,266
想法分为四个

637
00:25:41,266 --> 0:25:42,106
不同的主题

638
00:25:43,256 --> 0:25:44,396
第一个应该就是

639
00:25:44,396 --> 0:25:45,806
让 Swift 包管理器

640
00:25:45,806 --> 0:25:47,756
和其他工具融合

641
00:25:47,756 --> 0:25:50,366
帮助你发布

642
00:25:50,366 --> 0:25:52,756
包的新版本和配置它们的产品

643
00:25:53,726 --> 0:25:55,806
支持比 SwiftPM

644
00:25:55,886 --> 0:25:57,606
如今能构建的更复杂的包

645
00:25:57,606 --> 0:25:59,606
最后是在包的

646
00:25:59,606 --> 0:26:02,646
发现和信任上的展望

647
00:25:59,606 --> 0:26:02,646
发现和信任上的展望

648
00:26:02,986 --> 0:26:05,896
因为 SwiftPM 命令行

649
00:26:05,896 --> 0:26:07,726
体验非常重要

650
00:26:07,726 --> 0:26:09,036
我们希望确保

651
00:26:09,036 --> 0:26:11,026
SwiftPM 能和其他工具融合

652
00:26:11,026 --> 0:26:12,386
比如开发环境

653
00:26:12,676 --> 0:26:14,316
自动化等等

654
00:26:15,706 --> 0:26:16,846
我们已经通过

655
00:26:16,846 --> 0:26:18,096
SwiftPM 基于库的结构  

656
00:26:18,096 --> 0:26:20,466
打下了一个基础

657
00:26:21,356 --> 0:26:22,726
SwiftPM 如今还没有

658
00:26:22,726 --> 0:26:25,076
稳定的 API 

659
00:26:25,076 --> 0:26:26,296
但是对于那些同

660
00:26:26,296 --> 0:26:28,186
SwiftPM 一起改变的工具 

661
00:26:28,186 --> 0:26:30,686
现在已经可以使用和添加了

662
00:26:32,256 --> 0:26:33,646
如果你愿意

663
00:26:33,646 --> 0:26:35,156
在你的开发工具里

664
00:26:35,156 --> 0:26:36,956
为 SwiftPM  构建支持 

665
00:26:36,956 --> 0:26:38,446
我们非常欢迎你的贡献和讨论

666
00:26:38,856 --> 0:26:40,786
我们希望让 SwiftPM 成为

667
00:26:40,786 --> 0:26:43,196
开发工具繁荣的生态系统中的一部分

668
00:26:43,476 --> 0:26:46,666
最近在 Swift 论坛上

669
00:26:46,666 --> 0:26:48,596
我们看到的一些请求是

670
00:26:48,596 --> 0:26:50,406
寻找可以用自动工具

671
00:26:50,406 --> 0:26:52,276
编辑 package.swift 清单的方法 

672
00:26:52,276 --> 0:26:53,946
而不需要

673
00:26:53,946 --> 0:26:55,796
让用户总是直接

674
00:26:55,796 --> 0:26:56,966
编辑源代码

675
00:26:57,746 --> 0:26:59,166
我们认为让 SwiftPM

676
00:26:59,166 --> 0:27:00,536
支持这个是可行的 

677
00:26:59,166 --> 0:27:00,536
支持这个是可行的 

678
00:27:00,876 --> 0:27:03,196
可能会通过使用 libSyntax 实现

679
00:27:04,056 --> 0:27:05,926
libSyntax 是一个 

680
00:27:05,926 --> 0:27:07,296
在 Swift 开源项目中

681
00:27:07,296 --> 0:27:08,856
开发的库

682
00:27:08,856 --> 0:27:11,256
让你更容易的

683
00:27:11,256 --> 0:27:13,536
在别的工具上理解和使用 

684
00:27:13,536 --> 0:27:14,336
Swift 语法

685
00:27:15,476 --> 0:27:17,546
Boris 刚才讲到过

686
00:27:17,546 --> 0:27:19,556
你应该为 package.swift 清单

687
00:27:19,636 --> 0:27:21,236
采用声明式语法

688
00:27:21,526 --> 0:27:22,986
这是另外一个原因

689
00:27:22,986 --> 0:27:25,006
这会让 SwiftPM 可以 

690
00:27:25,006 --> 0:27:26,526
更容易的

691
00:27:26,526 --> 0:27:28,076
理解你的清单

692
00:27:28,076 --> 0:27:29,706
并作出自动调整

693
00:27:29,706 --> 0:27:31,106
比如添加新的依赖

694
00:27:31,106 --> 0:27:32,486
或者目标

695
00:27:32,996 --> 0:27:36,286
SwiftPM 还有很多空间

696
00:27:36,286 --> 0:27:39,016
来添加新的功能 帮助

697
00:27:39,016 --> 0:27:40,176
你发布新版本

698
00:27:40,176 --> 0:27:42,596
并部署它们的产品

699
00:27:43,916 --> 0:27:45,776
现在 如果你想

700
00:27:45,776 --> 0:27:46,996
发布一个包的新版本

701
00:27:47,346 --> 0:27:49,056
你需要手动用 Git 标注 

702
00:27:49,056 --> 0:27:52,976
如果你想检查发布的标签

703
00:27:52,976 --> 0:27:54,096
也要直接使用Git

704
00:27:55,356 --> 0:27:56,986
我们可以添加新功能

705
00:27:57,146 --> 0:27:58,956
来自动化这一过程

706
00:27:58,956 --> 0:28:00,786
执行额外的杂务工作

707
00:27:58,956 --> 0:28:00,786
执行额外的杂务工作

708
00:28:00,786 --> 0:28:02,676
验证和其他辅助任务

709
00:28:02,676 --> 0:28:06,046
作为工作流程改进的一部分

710
00:28:07,796 --> 0:28:09,726
我们可以添加的

711
00:28:09,726 --> 0:28:11,206
一个非常有用的功能

712
00:28:11,316 --> 0:28:12,686
就是帮助保持

713
00:28:12,686 --> 0:28:14,056
正确语义版本

714
00:28:14,696 --> 0:28:17,176
我们可以让 SwiftPM 分析

715
00:28:17,176 --> 0:28:18,776
你的新版本包里

716
00:28:18,776 --> 0:28:20,226
API 的差异

717
00:28:20,226 --> 0:28:22,976
并检测你是否在编译时

718
00:28:22,976 --> 0:28:24,656
做出了不兼容的更改

719
00:28:24,656 --> 0:28:26,186
如果做出不兼容的更改

720
00:28:26,186 --> 0:28:27,726
就建议你更新包的主要版本

721
00:28:30,916 --> 0:28:32,326
另外一件可以做的事是

722
00:28:32,326 --> 0:28:34,286
让你可以从 SwiftPM

723
00:28:34,286 --> 0:28:36,516
更容易的部署产品

724
00:28:36,516 --> 0:28:39,606
你也许希望个性化

725
00:28:39,606 --> 0:28:41,636
和库的链接

726
00:28:41,636 --> 0:28:43,586
或者个性化特定配置环境下

727
00:28:43,626 --> 0:28:45,086
的产品布局

728
00:28:45,086 --> 0:28:46,526
本地或者在服务器上

729
00:28:47,326 --> 0:28:48,886
或者你希望

730
00:28:48,886 --> 0:28:50,696
包含版本信息

731
00:28:50,696 --> 0:28:53,006
关于哪些包被构建进产品

732
00:28:54,076 --> 0:28:55,736
或者你希望

733
00:28:55,736 --> 0:28:57,316
把 SwiftPM 关于

734
00:28:57,366 --> 0:28:59,816
你的包的参数用于你的产品 

735
00:29:00,516 --> 0:29:02,106
SwiftPM 可以添加新的命令

736
00:29:02,106 --> 0:29:03,666
来支持这些需求

737
00:29:05,836 --> 0:29:07,196
现在用 SwiftPM 

738
00:29:07,196 --> 0:29:09,266
已经可以构建很多东西

739
00:29:09,266 --> 0:29:10,736
但是我们希望可以支持

740
00:29:10,736 --> 0:29:13,486
更多有更复杂需求的包

741
00:29:14,916 --> 0:29:16,356
如今最大的缺口

742
00:29:16,356 --> 0:29:18,646
可能就是支持资源

743
00:29:18,836 --> 0:29:20,836
如果你有任何图像 数据

744
00:29:20,836 --> 0:29:22,726
文件或者其他素材 

745
00:29:22,726 --> 0:29:24,386
SwiftPM 目前还不能

746
00:29:24,386 --> 0:29:25,426
把它们和你的产品

747
00:29:25,426 --> 0:29:25,966
打包在一起

748
00:29:27,096 --> 0:29:28,626
基础核心库

749
00:29:28,626 --> 0:29:30,716
在今年春天刚刚添加了  

750
00:29:30,716 --> 0:29:33,276
跨平台使用资源的 API

751
00:29:33,276 --> 0:29:35,586
如果我们想构建

752
00:29:35,586 --> 0:29:37,316
这个特性 可以让

753
00:29:37,316 --> 0:29:38,046
SwiftPM 使用这一 API

754
00:29:39,896 --> 0:29:41,736
我知道还有一些用户

755
00:29:41,736 --> 0:29:43,496
希望添加对

756
00:29:43,496 --> 0:29:45,446
一些特定编译器标志 连接标志的支持

757
00:29:45,746 --> 0:29:47,026
以及其他 SwiftPM 如今

758
00:29:47,026 --> 0:29:48,686
还不支持的属性

759
00:29:48,796 --> 0:29:51,216
我们希望能

760
00:29:51,216 --> 0:29:52,946
添加一个强大的

761
00:29:52,946 --> 0:29:55,136
构建设置模式

762
00:29:55,136 --> 0:29:56,386
包含条件设置

763
00:29:56,386 --> 0:29:58,776
或者粒度控制

764
00:29:58,776 --> 0:30:00,146
来决定哪一部分的包

765
00:30:00,216 --> 0:30:01,526
有哪些设定值

766
00:30:03,636 --> 0:30:04,866
Boris 刚才还谈到

767
00:30:04,866 --> 0:30:06,786
SwiftPM 构建的独立性

768
00:30:06,786 --> 0:30:08,026
以及它重要的原因

769
00:30:09,206 --> 0:30:10,456
我们不允许你运行

770
00:30:10,456 --> 0:30:11,206
任意外壳脚本

771
00:30:11,626 --> 0:30:13,696
但有一些用户

772
00:30:13,696 --> 0:30:14,906
构建可以在一定程度上个性化

773
00:30:14,906 --> 0:30:16,416
也许是因为

774
00:30:16,416 --> 0:30:18,216
想要个性化语言

775
00:30:18,216 --> 0:30:19,976
或者处理器

776
00:30:19,976 --> 0:30:21,026
他们想运行自己的

777
00:30:21,026 --> 0:30:22,686
文档生成器工具

778
00:30:22,686 --> 0:30:24,166
或者有其他需要添加到

779
00:30:24,166 --> 0:30:25,826
构建过程的步骤

780
00:30:26,776 --> 0:30:27,926
我们认为 SwiftPM 

781
00:30:27,926 --> 0:30:29,836
可以安全的支持这些内容

782
00:30:29,836 --> 0:30:32,196
甚至是通过实际的工具包

783
00:30:32,196 --> 0:30:33,506
把新的工具带入

784
00:30:33,506 --> 0:30:34,366
你的构建过程

785
00:30:34,956 --> 0:30:36,226
重要的是

786
00:30:36,226 --> 0:30:37,746
如果我们采用这一新功能

787
00:30:37,746 --> 0:30:39,706
就要确保

788
00:30:39,706 --> 0:30:40,716
任何加入构建过程

789
00:30:40,716 --> 0:30:42,306
的新工具都必须

790
00:30:42,306 --> 0:30:44,196
准确的声明它们的

791
00:30:44,246 --> 0:30:46,166
输入和输出依赖

792
00:30:46,166 --> 0:30:48,286
这样 SwiftPM 才可以继续保持

793
00:30:48,366 --> 0:30:50,946
正确的增量和平行构建

794
00:30:53,596 --> 0:30:54,876
最后 我想说一下

795
00:30:54,876 --> 0:30:56,446
关于包的发现

796
00:30:56,446 --> 0:30:58,306
信任和管理的

797
00:30:58,556 --> 0:31:00,406
前瞻想法

798
00:30:58,556 --> 0:31:00,406
前瞻想法

799
00:31:00,906 --> 0:31:04,026
Git 自身支持

800
00:31:04,026 --> 0:31:05,226
它的条款也支持

801
00:31:05,546 --> 0:31:07,116
提供如 TLS 的安全机制

802
00:31:07,116 --> 0:31:08,786
以确保

803
00:31:08,786 --> 0:31:10,056
你在和你认为的

804
00:31:10,056 --> 0:31:11,826
远程储存库接触

805
00:31:12,356 --> 0:31:14,036
但是恶意伪装

806
00:31:14,036 --> 0:31:15,496
可以危害到

807
00:31:15,496 --> 0:31:17,296
远程储存库

808
00:31:17,326 --> 0:31:18,876
并写入恶意内容

809
00:31:19,166 --> 0:31:20,186
事实上

810
00:31:20,186 --> 0:31:21,536
在任何情况下使用第三方代码

811
00:31:21,536 --> 0:31:22,996
你都应该

812
00:31:22,996 --> 0:31:24,006
提高警惕

813
00:31:24,376 --> 0:31:25,706
但是 Swift 包管理器

814
00:31:25,856 --> 0:31:27,776
提供一个很好的机会

815
00:31:27,776 --> 0:31:29,686
让我们构建一个安全功能

816
00:31:29,686 --> 0:31:30,996
确保你得到的是

817
00:31:30,996 --> 0:31:33,016
你所期待的内容

818
00:31:35,456 --> 0:31:37,546
SwiftPM 还可以让

819
00:31:37,546 --> 0:31:39,026
构建中的

820
00:31:39,026 --> 0:31:41,206
package.swift 清单评估 

821
00:31:41,206 --> 0:31:42,876
无法绕过安全保护并从你的

822
00:31:42,876 --> 0:31:44,266
文件系统写出内容

823
00:31:44,266 --> 0:31:45,316
或者访问网络

824
00:31:45,756 --> 0:31:47,686
今天我们使用的是

825
00:31:47,686 --> 0:31:49,066
macOS 的沙盒技术

826
00:31:49,066 --> 0:31:49,786
它很棒

827
00:31:50,096 --> 0:31:51,166
但我们同时也想

828
00:31:51,166 --> 0:31:53,126
把这种安全性带入别的平台

829
00:31:55,596 --> 0:31:56,966
很多用户希望

830
00:31:56,966 --> 0:31:58,566
将复刻包变得简单

831
00:31:58,916 --> 0:32:00,346
也许是因为他们想

832
00:31:58,916 --> 0:32:00,346
也许是因为他们想

833
00:32:00,346 --> 0:32:02,086
在包图里对某个包

834
00:32:02,086 --> 0:32:03,456
做私人的个性化处理

835
00:32:04,046 --> 0:32:05,416
又或者是因为

836
00:32:05,416 --> 0:32:08,006
他们想重写

837
00:32:08,006 --> 0:32:10,406
得到这个包的原 URL

838
00:32:10,406 --> 0:32:12,516
这样可以指向

839
00:32:12,516 --> 0:32:14,846
一个他们控制的私人镜像

840
00:32:14,876 --> 0:32:16,616
而不用寄希望于

841
00:32:16,676 --> 0:32:20,116
原来的包永远在那个位置

842
00:32:20,286 --> 0:32:21,636
最后我希望

843
00:32:21,636 --> 0:32:23,966
Swift 包能有一个真正的索引

844
00:32:24,636 --> 0:32:25,846
除了提供

845
00:32:25,846 --> 0:32:27,936
标准化命名空间

846
00:32:27,936 --> 0:32:29,476
让发现新的包更容易

847
00:32:29,476 --> 0:32:31,696
我们还可以为包

848
00:32:31,696 --> 0:32:34,416
提供更多支持 如质量衡量标准等等

849
00:32:34,416 --> 0:32:35,656
比如它的自动测试范围

850
00:32:35,656 --> 0:32:36,146
是怎样的

851
00:32:36,636 --> 0:32:38,466
或者支持用来评估

852
00:32:38,466 --> 0:32:40,246
你考虑使用的

853
00:32:40,246 --> 0:32:41,476
新包的可靠性的方法

854
00:32:41,976 --> 0:32:45,106
我说了很多

855
00:32:45,306 --> 0:32:47,236
但这些只是其中的一些可能性

856
00:32:47,616 --> 0:32:49,256
如果你们感兴趣

857
00:32:49,256 --> 0:32:51,066
我们很希望

858
00:32:51,066 --> 0:32:52,846
听到你的反馈

859
00:32:52,846 --> 0:32:54,606
想法和贡献 

860
00:32:54,606 --> 0:32:56,126
让 Swift 包管理器成为

861
00:32:56,126 --> 0:32:57,756
开发者社区里最好的工具

862
00:32:58,686 --> 0:33:00,726
如果希望加入的话

863
00:32:58,686 --> 0:33:00,726
如果希望加入的话

864
00:33:00,726 --> 0:33:02,146
你们应该如何做呢

865
00:33:02,146 --> 0:33:04,476
我想说一下 Swift 的开源过程

866
00:33:05,756 --> 0:33:07,506
我刚才也提到过

867
00:33:07,506 --> 0:33:10,306
包管理器是 Swift 开源项目的一部分

868
00:33:10,926 --> 0:33:12,686
Swift.org 是

869
00:33:12,686 --> 0:33:14,306
一个很好的

870
00:33:14,306 --> 0:33:16,536
了解社区和过程的地方

871
00:33:18,306 --> 0:33:20,786
SwiftPM 使用的是 

872
00:33:20,856 --> 0:33:23,176
Swift 语言评估过程

873
00:33:23,176 --> 0:33:25,696
这意味着任何人都可以对

874
00:33:25,696 --> 0:33:28,336
Swift 包管理器的的新功能或者调整

875
00:33:28,476 --> 0:33:29,616
提供建议

876
00:33:31,156 --> 0:33:32,826
不过 在你起草

877
00:33:32,826 --> 0:33:34,396
一个完整正式的提案之前

878
00:33:34,466 --> 0:33:36,036
我建议你

879
00:33:36,036 --> 0:33:37,676
去 Swift 论坛的

880
00:33:37,676 --> 0:33:39,636
包管理器部分

881
00:33:39,636 --> 0:33:40,726
和社区交流一下你的想法

882
00:33:41,246 --> 0:33:42,456
你可以得到很多反馈

883
00:33:42,526 --> 0:33:44,576
能够帮助你完善你的想法

884
00:33:45,156 --> 0:33:47,916
如果你想先

885
00:33:47,916 --> 0:33:48,936
小试牛刀

886
00:33:48,936 --> 0:33:50,756
bugs.swift.org 的

887
00:33:50,756 --> 0:33:52,786
错误追踪器中

888
00:33:52,786 --> 0:33:54,856
有很多的好想法

889
00:33:54,856 --> 0:33:55,966
尤其是那些

890
00:33:55,966 --> 0:33:58,756
标记了 StarterBug 的的错误

891
00:33:59,266 --> 0:34:00,656
因为 正如我所说 SwiftPM 

892
00:33:59,266 --> 0:34:00,656
因为 正如我所说 SwiftPM 

893
00:34:00,656 --> 0:34:02,226
是用 Swift 写的

894
00:34:02,436 --> 0:34:04,886
你会发现它其实很容易上手

895
00:34:05,346 --> 0:34:07,836
当然 如果你在

896
00:34:07,836 --> 0:34:09,306
使用 SwiftPM 时找到了错误

897
00:34:09,306 --> 0:34:10,746
我们鼓励你报到

898
00:34:10,746 --> 0:34:12,525
bugs.swift.org 上 

899
00:34:12,525 --> 0:34:16,556
你可以追踪我们是如何解决的

900
00:34:16,755 --> 0:34:18,166
SwiftPM 可以利用

901
00:34:18,166 --> 0:34:20,926
和 Swift 项目相同的

902
00:34:20,926 --> 0:34:21,956
持续集成基础结构

903
00:34:22,356 --> 0:34:23,516
这意味着轮询请求

904
00:34:23,516 --> 0:34:25,126
可以被自动构建

905
00:34:25,126 --> 0:34:27,116
并在合并前进行测试

906
00:34:27,766 --> 0:34:29,206
因为 SwiftPM 代码

907
00:34:29,206 --> 0:34:30,815
有很大的测试范围

908
00:34:31,116 --> 0:34:31,775
我们发现这个

909
00:34:31,775 --> 0:34:33,206
基础结构对我们来说

910
00:34:33,206 --> 0:34:33,755
非常有用

911
00:34:35,356 --> 0:34:36,806
当你准备尝试

912
00:34:36,806 --> 0:34:38,686
最后的调整

913
00:34:38,686 --> 0:34:40,436
你可以在 Swift.org 上

914
00:34:40,536 --> 0:34:41,775
下载 Trunk Snapshot 工具链

915
00:34:41,775 --> 0:34:44,156
它们会定期更新 

916
00:34:46,456 --> 0:34:47,866
我们很高兴见到

917
00:34:47,866 --> 0:34:49,746
SwiftPM 社区如今的成长

918
00:34:49,956 --> 0:34:51,876
有180 多个人做出贡献

919
00:34:51,876 --> 0:34:53,626
有些是在错误修复上

920
00:34:53,626 --> 0:34:55,146
有些是在新功能上

921
00:34:55,636 --> 0:34:57,276
Swift 包生态系统

922
00:34:57,276 --> 0:34:58,446
也在以健康的速度增长

923
00:34:58,446 --> 0:35:00,216
很多跨平台包

924
00:34:58,446 --> 0:35:00,216
很多跨平台包

925
00:35:00,216 --> 0:35:01,736
和公共包

926
00:35:01,736 --> 0:35:03,236
都可以在 GitHub 上找到  

927
00:35:04,086 --> 0:35:05,296
这意味着你可以

928
00:35:05,296 --> 0:35:06,666
专注于怎样让你的产品

929
00:35:06,666 --> 0:35:08,406
与众不同 让包的依赖

930
00:35:08,406 --> 0:35:10,086
负责剩下的部分

931
00:35:10,086 --> 0:35:12,346
我建议你现在就

932
00:35:12,346 --> 0:35:13,966
体验一下 SwiftPM 的

933
00:35:14,116 --> 0:35:15,456
一些功能

934
00:35:15,456 --> 0:35:16,766
而它未来还有很大的进步空间

935
00:35:17,136 --> 0:35:19,126
两个建议的功能分别是

936
00:35:19,126 --> 0:35:21,656
命令行实用工具和

937
00:35:21,656 --> 0:35:23,616
针对在服务器上用 Swift 做开发的库

938
00:35:24,796 --> 0:35:26,216
服务器端的 Swift 社区 

939
00:35:26,216 --> 0:35:27,926
对 Swift 包管理器

940
00:35:27,926 --> 0:35:29,156
进行了广泛的应用

941
00:35:29,626 --> 0:35:30,956
服务器端的 

942
00:35:30,956 --> 0:35:32,696
自己也在很好的成长

943
00:35:32,696 --> 0:35:33,916
现在提供了很多框架

944
00:35:33,916 --> 0:35:35,646
来做网页和后端开发

945
00:35:36,296 --> 0:35:37,886
如果你愿意关注一下

946
00:35:37,886 --> 0:35:39,006
这种方式的话

947
00:35:39,006 --> 0:35:40,326
我觉得你会发现

948
00:35:40,326 --> 0:35:41,426
Swift 是做这种跨平台开发的

949
00:35:41,426 --> 0:35:42,736
很好的语言

950
00:35:44,076 --> 0:35:45,686
但是你也可以

951
00:35:45,686 --> 0:35:47,096
用 SwiftPM 创建

952
00:35:47,096 --> 0:35:50,116
命令行实用工具和库

953
00:35:50,116 --> 0:35:50,796
哪个都可以

954
00:35:51,386 --> 0:35:53,406
上手很容易

955
00:35:53,406 --> 0:35:54,856
只需要打开一个终端窗口

956
00:35:54,856 --> 0:35:57,006
然后在里面运行 Swift 包

957
00:35:57,776 --> 0:35:58,746
如果下次

958
00:35:58,746 --> 0:36:00,186
你想尝试新事物

959
00:35:58,746 --> 0:36:00,186
你想尝试新事物

960
00:36:00,186 --> 0:36:02,136
我建议你试试看

961
00:36:03,046 --> 0:36:04,176
如果你想做出贡献

962
00:36:04,176 --> 0:36:05,946
请到 Swift 论坛

963
00:36:05,946 --> 0:36:07,786
开始对话

964
00:36:08,796 --> 0:36:09,986
如果想来和我们聊聊

965
00:36:09,986 --> 0:36:11,876
明天下午 3 点

966
00:36:11,876 --> 0:36:15,326
我们会在实验室

967
00:36:15,326 --> 0:36:16,626
我很兴奋的想知道

968
00:36:16,626 --> 0:36:17,906
我们能做成什么

969
00:36:17,906 --> 0:36:19,366
以及这个开发者社区一起

970
00:36:19,366 --> 0:36:19,826
可以成就什么

971
00:36:20,586 --> 0:36:21,886
你的贡献能够帮助我们

972
00:36:21,916 --> 0:36:23,626
设计一个很棒的包管理器

973
00:36:23,626 --> 0:36:25,796
对整个 Swift 社区都意义重大

974
00:36:26,796 --> 0:36:27,226
谢谢

975
00:36:27,306 --> 0:36:28,916
祝你享受接下来的 WWDC

976
00:36:29,516 --> 0:36:33,500
[ 掌声 ]
