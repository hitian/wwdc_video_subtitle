1
00:00:17,251 --> 0:00:22,890
（macOS上的Photos集成

2
00:00:22,956 --> 0:00:24,024
早上好

3
00:00:25,425 --> 0:00:26,260
早上好

4
00:00:26,627 --> 0:00:27,728
我的名字叫Eric Hanson

5
00:00:27,794 --> 0:00:30,931
我是Photos平台的技术传播者

6
00:00:31,164 --> 0:00:34,868
我今天会和Photos工程团队的

7
00:00:34,935 --> 0:00:39,806
来给你们介绍一下macOS上

8
00:00:42,409 --> 0:00:44,611
我们要介绍两个关键问题

9
00:00:46,079 --> 0:00:49,917
第一个是对于我们去年在macOS

10
00:00:49,983 --> 0:00:52,819
所介绍的

11
00:00:53,987 --> 0:00:58,625
然后我们要介绍的是利用拖拽

12
00:00:59,159 --> 0:01:00,360
来跟你的app交互

13
00:00:59,159 --> 0:01:00,360
来跟你的app交互

14
00:01:01,128 --> 0:01:04,031
但是首先让我们来谈一下

15
00:01:07,668 --> 0:01:11,572
当iPhoto于2002年

16
00:01:12,306 --> 0:01:15,442
Apple成为了首批允许人们

17
00:01:15,509 --> 0:01:19,980
制作漂亮的书 然后是卡片与日历的

18
00:01:20,314 --> 0:01:21,748
公司之一

19
00:01:24,718 --> 0:01:31,191
而至今已有超过七千万的

20
00:01:31,491 --> 0:01:33,594
是使用iPhoto

21
00:01:37,397 --> 0:01:38,932
但是与此同时

22
00:01:38,999 --> 0:01:43,470
十六年的时间 我们一直在关注着

23
00:01:44,004 --> 0:01:46,540
用户现在已经有了很广泛的选择

24
00:01:46,607 --> 0:01:50,711
利用他们的物理与数码照片

25
00:01:50,777 --> 0:01:52,679
来创建所有这些内容

26
00:01:54,381 --> 0:01:58,085
正是因为遵照这个很棒的生态系统

27
00:01:58,685 --> 0:02:00,554
才能让我们在去年

28
00:01:58,685 --> 0:02:00,554
才能让我们在去年

29
00:02:00,621 --> 0:02:03,223
推出了基于这个生态系统的

30
00:02:03,724 --> 0:02:05,726
Photo项目扩展API

31
00:02:08,127 --> 0:02:10,297
我们已经看到一些不错的扩展

32
00:02:11,298 --> 0:02:13,901
例如 Mimeo Photos

33
00:02:14,301 --> 0:02:19,039
它可以让你创建

34
00:02:20,641 --> 0:02:24,244
Whitewall可让你从照片中

35
00:02:24,311 --> 0:02:25,479
创建画廊级别的装裱印刷品

36
00:02:26,680 --> 0:02:29,516
我们还有Wix.com

37
00:02:29,583 --> 0:02:32,486
可以让你非常轻松地创建出

38
00:02:32,553 --> 0:02:34,488
可以跟朋友和家人分享的网络相册

39
00:02:36,390 --> 0:02:39,259
我们现在还看到了一些新的扩展

40
00:02:39,760 --> 0:02:42,262
就像是这个叫Motif的扩展

41
00:02:42,696 --> 0:02:48,101
它是一个直接集成到Photos的

42
00:02:48,769 --> 0:02:50,170
它会在今年夏天推出

43
00:02:53,373 --> 0:02:57,611
所有的这些选择

44
00:02:57,978 --> 0:03:01,615
对于你们开发者来说是个巨大的机遇

45
00:02:57,978 --> 0:03:01,615
对于你们开发者来说是个巨大的机遇

46
00:03:02,749 --> 0:03:06,620
你可以利用这些丰富的元数据

47
00:03:06,687 --> 0:03:09,556
以及我们传到你扩展中的图像

48
00:03:10,290 --> 0:03:11,325
来构建内容

49
00:03:11,391 --> 0:03:14,928
在macOS上

50
00:03:15,229 --> 0:03:18,599
来创造一些新奇的很棒的内容

51
00:03:19,066 --> 0:03:21,168
让全世界的用户为之倾倒

52
00:03:25,005 --> 0:03:26,373
正是因为这个原因

53
00:03:27,808 --> 0:03:29,376
Apple宣布

54
00:03:29,576 --> 0:03:32,579
我们会将整个打印产品业务

55
00:03:32,646 --> 0:03:35,883
转移到macOS Mojave

56
00:03:37,618 --> 0:03:41,622
用户可以使用项目扩展来创建书

57
00:03:41,688 --> 0:03:44,458
卡片以及日历等所有这些内容

58
00:03:44,691 --> 0:03:47,895
所有这些你利用扩展创造出的

59
00:03:49,696 --> 0:03:54,801
利用这个生态系统 我们给大家

60
00:03:56,170 --> 0:03:59,006
让我们来介绍下

61
00:04:00,474 --> 0:04:01,308
首先

62
00:04:03,177 --> 0:04:04,178
就是UI的内容

63
00:04:05,245 --> 0:04:07,281
现在我们会获取你扩展的UI

64
00:04:07,347 --> 0:04:10,050
并将其直接集成到

65
00:04:11,018 --> 0:04:14,888
而你所熟悉的侧边栏一直都有

66
00:04:15,622 --> 0:04:19,358
用户可以在你的扩展中创建一个项目

67
00:04:19,426 --> 0:04:21,394
并且能从侧边栏抓取内容

68
00:04:21,461 --> 0:04:23,830
直接拖拽到你的项目中就可以

69
00:04:24,965 --> 0:04:27,401
他们也可以弹出照片搜索

70
00:04:28,202 --> 0:04:30,270
搜索他们想要用的照片

71
00:04:30,537 --> 0:04:33,640
然后复制并粘贴到在做的项目中

72
00:04:36,009 --> 0:04:38,979
我们还可以让你直接集成

73
00:04:39,046 --> 0:04:42,516
Photos强大的编辑工具

74
00:04:44,551 --> 0:04:47,387
例如 你可以让用户

75
00:04:47,454 --> 0:04:50,357
只需双击照片

76
00:04:51,425 --> 0:04:52,292
就可以对其进行编辑

77
00:04:52,426 --> 0:04:55,662
你现在用个一行的API就能实现

78
00:04:55,929 --> 0:04:59,633
你可以调用Photos的编辑器

79
00:04:59,700 --> 0:05:04,371
我们在照片载入的时候

80
00:04:59,700 --> 0:05:04,371
我们在照片载入的时候

81
00:05:04,438 --> 0:05:06,940
让用户来进行想做的调整

82
00:05:07,374 --> 0:05:08,609
我们还让他们可以访问

83
00:05:08,675 --> 0:05:11,812
项目中用到的所有其他资源

84
00:05:12,546 --> 0:05:14,448
当他们的编辑会话结束时

85
00:05:14,515 --> 0:05:16,183
只需要点击完成按钮

86
00:05:16,683 --> 0:05:19,786
他们就可以回到正在做的项目

87
00:05:20,354 --> 0:05:23,790
你会得到库有变化的通知

88
00:05:23,857 --> 0:05:26,760
你可以对其进行反应

89
00:05:29,496 --> 0:05:30,998
但是如果很难找到

90
00:05:32,366 --> 0:05:34,201
app和你创建的扩展的话

91
00:05:34,268 --> 0:05:35,836
那一切都没有意义了

92
00:05:36,303 --> 0:05:38,272
因此我们要进而介绍下

93
00:05:38,338 --> 0:05:41,408
你们app的可见性

94
00:05:42,276 --> 0:05:45,879
Photos app可以通过

95
00:05:47,114 --> 0:05:51,285
而现在有了macOS Mojave上

96
00:05:51,351 --> 0:05:55,589
我们实际上可以直接连接到

97
00:05:55,789 --> 0:05:59,493
一个致力于扩展体验的故事

98
00:06:00,127 --> 0:06:02,296
这是个一直会存在的故事

99
00:06:02,362 --> 0:06:06,400
我们可以对其进行更新

100
00:06:06,466 --> 0:06:09,770
并且教用户用

101
00:06:11,038 --> 0:06:13,140
当用户从这个故事中

102
00:06:14,341 --> 0:06:16,143
下载了一个app时

103
00:06:16,777 --> 0:06:19,313
他们下载的是包含了扩展的app

104
00:06:20,080 --> 0:06:25,419
按原来的经验

105
00:06:25,485 --> 0:06:27,788
教用户如何在你的独立app中

106
00:06:27,855 --> 0:06:29,890
使用Photos的扩展

107
00:06:30,190 --> 0:06:31,959
但我们觉得可以做得更好

108
00:06:32,326 --> 0:06:36,096
如果用户下载了app以后

109
00:06:36,163 --> 0:06:38,498
Photos中的项目

110
00:06:39,333 --> 0:06:40,734
我们正在使其成为现实

111
00:06:41,902 --> 0:06:44,505
我们可以在Photos中

112
00:06:44,771 --> 0:06:48,342
你可以传入你的扩展标识符

113
00:06:48,709 --> 0:06:51,645
或是传入一个分类

114
00:06:52,479 --> 0:06:56,517
Photos会从后台到前台来

115
00:06:56,950 --> 0:07:00,921
并且可以选择想显示给用户的扩展

116
00:06:56,950 --> 0:07:00,921
并且可以选择想显示给用户的扩展

117
00:07:01,955 --> 0:07:05,125
所以它们在首次启动的时候

118
00:07:05,192 --> 0:07:06,593
就马上被带入创建的体验了

119
00:07:06,660 --> 0:07:07,928
我们觉得这很棒

120
00:07:11,431 --> 0:07:12,499
最后

121
00:07:12,566 --> 0:07:14,401
当他们创建项目的时候

122
00:07:15,102 --> 0:07:17,871
我们想让项目运行在适合的地方

123
00:07:18,805 --> 0:07:21,041
就在用户的Photo库中

124
00:07:22,109 --> 0:07:23,610
我们实际上是这么实现的

125
00:07:23,677 --> 0:07:26,013
我们在Photos中有项目总览

126
00:07:26,079 --> 0:07:28,815
可以让用户看到他们创建的所有内容

127
00:07:28,882 --> 0:07:33,687
而且现在我们允许该扩展

128
00:07:33,954 --> 0:07:37,624
该预览可以呈现出项目是什么样子的

129
00:07:37,824 --> 0:07:39,660
以这个照片为例

130
00:07:41,361 --> 0:07:44,498
用户不仅能通过双击其中的一个项目

131
00:07:44,565 --> 0:07:47,267
来返回到你的扩展并继续工作

132
00:07:47,801 --> 0:07:50,270
还可以从其他项目来创建项目

133
00:07:50,637 --> 0:07:53,507
他们可以通过选择项目

134
00:07:53,574 --> 0:07:55,108
来从中创建一些新的内容

135
00:07:55,342 --> 0:07:57,344
我们会尽我们所能的将所有东西传入

136
00:07:57,744 --> 0:07:59,513
来帮助你的扩展

137
00:07:59,913 --> 0:08:02,282
让你以良好的势头开始

138
00:07:59,913 --> 0:08:02,282
让你以良好的势头开始

139
00:08:02,950 --> 0:08:06,253
但是在Apple项目中

140
00:08:06,320 --> 0:08:07,521
确实是的

141
00:08:08,522 --> 0:08:11,225
我们逐张照片

142
00:08:11,291 --> 0:08:14,728
逐页地发给你

143
00:08:14,962 --> 0:08:18,665
以便可以让你的扩展

144
00:08:18,732 --> 0:08:20,267
创建一个完全的转换体验

145
00:08:20,501 --> 0:08:22,603
我们强烈建议你们这么做

146
00:08:25,272 --> 0:08:27,941
这就是从UI层面高度

147
00:08:28,008 --> 0:08:29,376
来介绍的新内容

148
00:08:29,443 --> 0:08:31,111
但我还想更深入介绍一下

149
00:08:31,178 --> 0:08:33,347
我想请我的同事

150
00:08:33,413 --> 0:08:36,183
Photos工程团队的Tobias Conradi

151
00:08:36,250 --> 0:08:37,083
Tobias

152
00:08:42,121 --> 0:08:43,991
早上好 谢谢 Eric

153
00:08:44,057 --> 0:08:46,093
你们好 我叫

154
00:08:46,159 --> 0:08:47,494
我是Photos团队的工程师

155
00:08:47,561 --> 0:08:50,330
我会详细介绍一些我们对于

156
00:08:50,397 --> 0:08:52,165
Photos项目扩展所做的修改

157
00:08:52,833 --> 0:08:54,701
首先就是创建菜单

158
00:08:55,135 --> 0:08:57,671
当我们首次在macOS

159
00:08:57,738 --> 0:08:59,206
引入Photos项目扩展时

160
00:08:59,273 --> 0:09:02,910
我们将所有扩展以平面列表的形式

161
00:08:59,273 --> 0:09:02,910
我们将所有扩展以平面列表的形式

162
00:09:03,177 --> 0:09:05,512
但结果是 有时候

163
00:09:05,579 --> 0:09:08,649
仅凭扩展的名字是很难猜到

164
00:09:08,715 --> 0:09:10,884
你要创建的哪种项目的

165
00:09:11,451 --> 0:09:13,453
我们想改善用户体验

166
00:09:13,520 --> 0:09:16,323
所以我们引入了项目分类

167
00:09:16,990 --> 0:09:20,494
macOS Mojave中

168
00:09:20,561 --> 0:09:24,665
我们在创建菜单中有分类和子菜单

169
00:09:25,065 --> 0:09:28,135
我们今年引入的分类有书籍

170
00:09:28,202 --> 0:09:32,506
日历、卡片、墙面装饰

171
00:09:32,573 --> 0:09:35,943
还有不适用于这些分类扩展的

172
00:09:37,511 --> 0:09:40,414
现在用户就可以带着

173
00:09:40,480 --> 0:09:43,650
例如 我想要创建墙面装饰

174
00:09:44,117 --> 0:09:48,789
用户可以看到

175
00:09:49,957 --> 0:09:52,025
那么扩展是如何显示在分类中的呢？

176
00:09:52,693 --> 0:09:56,196
我们在扩展Info.plist的

177
00:09:56,263 --> 0:09:58,065
有一个新的键值

178
00:09:58,131 --> 0:09:59,967
它叫做

179
00:10:00,033 --> 0:10:05,105
该键的值就是

180
00:10:05,172 --> 0:10:07,708
在本例中就是墙面装饰和其他

181
00:10:10,110 --> 0:10:12,779
用户从扩展中所看到的下一个内容

182
00:10:12,846 --> 0:10:14,381
就是类型选取表单

183
00:10:14,715 --> 0:10:16,617
你给我们提供此数据

184
00:10:16,683 --> 0:10:22,823
我们就会显示

185
00:10:23,524 --> 0:10:26,126
我们去年介绍的那个API的问题

186
00:10:26,193 --> 0:10:31,098
就是它有点难以提供最新的价格信息

187
00:10:31,164 --> 0:10:32,366
或是当前的报价

188
00:10:32,566 --> 0:10:38,005
这就是为什么我们引入了

189
00:10:38,071 --> 0:10:39,406
它看起来是这样的

190
00:10:40,107 --> 0:10:42,042
除了动态更新

191
00:10:42,109 --> 0:10:46,013
我们现在还支持在表单底部

192
00:10:46,079 --> 0:10:47,614
显示一个定制的页脚文本信息

193
00:10:47,681 --> 0:10:51,084
如果你需要的话

194
00:10:53,820 --> 0:10:58,358
在API层面上

195
00:10:59,159 --> 0:11:03,130
我们的新方法是在

196
00:10:59,159 --> 0:11:03,130
我们的新方法是在

197
00:11:03,530 --> 0:11:05,799
我们请求了一个数据资源

198
00:11:05,866 --> 0:11:07,868
而不是产品类型描述的列表

199
00:11:07,935 --> 0:11:11,738
并且从扩展被选中的菜单中

200
00:11:12,139 --> 0:11:13,373
传入分类

201
00:11:13,440 --> 0:11:15,142
还有一个使其无效化的对象

202
00:11:15,776 --> 0:11:17,611
在你返回数据源后

203
00:11:17,945 --> 0:11:20,981
我们会为项目类型描述

204
00:11:21,048 --> 0:11:22,783
以及可选的页脚文本信息

205
00:11:23,350 --> 0:11:27,487
每当你的扩展需要将返回的信息

206
00:11:27,554 --> 0:11:30,691
你就可以用这个无效化器

207
00:11:30,757 --> 0:11:33,260
或是页脚文本信息变得无效

208
00:11:33,327 --> 0:11:36,163
Photos会从数据源

209
00:11:36,230 --> 0:11:38,699
并且在UI中显示最新的数据

210
00:11:42,302 --> 0:11:44,638
下一个主题是

211
00:11:45,172 --> 0:11:47,441
projectInfo

212
00:11:47,508 --> 0:11:50,344
结构化补充信息

213
00:11:50,711 --> 0:11:53,113
它会结构化到section

214
00:11:53,180 --> 0:11:56,884
以及反映了创造层级的

215
00:11:57,551 --> 0:12:01,688
元素有着基本的布局暗示

216
00:11:57,551 --> 0:12:01,688
元素有着基本的布局暗示

217
00:12:01,755 --> 0:12:05,259
还有资源的权重和分数

218
00:12:05,325 --> 0:12:10,898
而且资源中还包含了资源的

219
00:12:11,532 --> 0:12:14,368
这就是对于projectInfo

220
00:12:14,434 --> 0:12:16,436
欲了解

221
00:12:16,503 --> 0:12:20,274
我强烈建议你们看下去年的演讲

222
00:12:24,511 --> 0:12:29,783
projectInfo在项目

223
00:12:30,450 --> 0:12:34,988
每当用户将新的资源加入到项目中时

224
00:12:35,055 --> 0:12:38,158
projectInfo就会过期

225
00:12:38,725 --> 0:12:41,628
我们想引入新的API

226
00:12:41,695 --> 0:12:43,697
新的API位于

227
00:12:43,764 --> 0:12:46,200
它会用来获取更新的项目信息

228
00:12:46,266 --> 0:12:47,935
以及项目当前的状态

229
00:12:48,635 --> 0:12:49,770
让我们以此为例

230
00:12:49,837 --> 0:12:52,706
我们会在项目创建时

231
00:12:53,040 --> 0:12:55,876
然后用户就可以向项目

232
00:12:55,943 --> 0:12:58,846
你可以调用

233
00:12:58,912 --> 0:13:02,950
还有projectInfo

234
00:12:58,912 --> 0:13:02,950
还有projectInfo

235
00:13:03,016 --> 0:13:05,719
并且为添加的资源附上一个新的分区

236
00:13:06,119 --> 0:13:09,189
如果用户添加了更多的资源

237
00:13:09,256 --> 0:13:12,259
传入项目信息

238
00:13:12,626 --> 0:13:15,095
并且为添加的资源附上一个新的分区

239
00:13:17,064 --> 0:13:20,334
让我们更深入地介绍

240
00:13:20,400 --> 0:13:21,802
意向区域

241
00:13:22,302 --> 0:13:26,240
意向区域

242
00:13:26,306 --> 0:13:28,141
例如 人们的脸

243
00:13:28,642 --> 0:13:32,646
如果相同的人出现在了多张图片中

244
00:13:32,713 --> 0:13:37,251
对于相同人的

245
00:13:38,252 --> 0:13:40,187
让我们暂时关注于B这个人

246
00:13:41,822 --> 0:13:44,791
除了意向区域标识符

247
00:13:44,858 --> 0:13:48,295
我们还有意向区域的权重

248
00:13:48,362 --> 0:13:54,234
表明了项目中意向区域的重要性

249
00:13:55,536 --> 0:13:59,673
如果你想决定要选

250
00:13:59,740 --> 0:14:03,544
或是意向区域的话

251
00:13:59,740 --> 0:14:03,544
或是意向区域的话

252
00:14:04,211 --> 0:14:06,780
这就是为什么我们

253
00:14:06,847 --> 0:14:11,385
它代表了资源中意向区域的质量

254
00:14:12,186 --> 0:14:16,089
在左手边 B有点失焦了

255
00:14:16,156 --> 0:14:19,259
而且不在图片的中间

256
00:14:19,326 --> 0:14:20,761
他对上焦了

257
00:14:20,827 --> 0:14:23,664
这就是为什么右手边的质量分

258
00:14:23,730 --> 0:14:25,032
比左手边更高一些

259
00:14:27,301 --> 0:14:28,969
在API层面上

260
00:14:29,036 --> 0:14:30,404
我们有这个替换的权重

261
00:14:30,470 --> 0:14:34,908
也就是在项目环境中

262
00:14:35,142 --> 0:14:37,811
然后就是资源中的质量

263
00:14:39,980 --> 0:14:42,049
我想给你们做一个快速的演示

264
00:14:42,115 --> 0:14:44,218
看看你可以如何利用

265
00:14:44,284 --> 0:14:46,587
来改善体验

266
00:14:46,653 --> 0:14:50,457
并在监听库通知

267
00:14:50,524 --> 0:14:51,792
会获得通知

268
00:14:52,125 --> 0:14:55,429
而且还使用了一个新的

269
00:15:03,704 --> 0:15:04,738
好了

270
00:15:05,305 --> 0:15:08,675
我创建了一个幻灯片显示扩展

271
00:15:09,476 --> 0:15:11,678
为了给你们看看它是什么样的

272
00:15:11,745 --> 0:15:14,214
我在相册中选取了一些资源

273
00:15:14,815 --> 0:15:17,885
并且会利用该扩展

274
00:15:20,320 --> 0:15:22,923
这个扩展有两个视图

275
00:15:22,990 --> 0:15:25,292
它包含了项目中的所有资源

276
00:15:25,425 --> 0:15:29,563
另一个是播放该幻灯片

277
00:15:31,365 --> 0:15:36,570
你可能会注意到 该幻灯片显示

278
00:15:36,637 --> 0:15:37,938
这是有点无聊的

279
00:15:38,672 --> 0:15:40,207
我想用意向区域

280
00:15:40,274 --> 0:15:43,443
来聚焦于照片中有意思的区域

281
00:15:44,945 --> 0:15:47,247
让我们切换到Xcode来修复一下

282
00:15:50,150 --> 0:15:54,288
在我的资源模型里

283
00:15:54,354 --> 0:15:58,225
它总会返回相同的值

284
00:15:58,358 --> 0:16:02,029
让我们在代码中替换一下它

285
00:15:58,358 --> 0:16:02,029
让我们在代码中替换一下它

286
00:16:06,633 --> 0:16:10,237
我要做的是从资源元素中

287
00:16:10,304 --> 0:16:14,308
且按照它们的权重和质量来进行排序

288
00:16:14,808 --> 0:16:18,011
从意向区域的排好序的列表中

289
00:16:18,078 --> 0:16:20,914
我们想获得最后的元素并返回它的值

290
00:16:22,149 --> 0:16:24,251
如果我们现在重新运行这个扩展

291
00:16:38,131 --> 0:16:43,403
我们就会一直聚焦于

292
00:16:44,004 --> 0:16:45,672
我觉得这样看起来要好得多

293
00:16:48,809 --> 0:16:51,778
接下来我想向项目中再多加一些资源

294
00:16:51,845 --> 0:16:55,516
我从侧边栏抓取了一个相册

295
00:16:55,582 --> 0:16:56,950
在指针附近有个加号

296
00:16:57,017 --> 0:16:59,052
看起来就像是

297
00:17:00,120 --> 0:17:02,489
我松开鼠标按键的话

298
00:17:02,856 --> 0:17:04,758
资源会被加入到项目中

299
00:17:04,825 --> 0:17:07,994
但是我的扩展并没有列出变化通知

300
00:17:08,060 --> 0:17:11,464
而且也不知道加入到项目中的资源

301
00:17:12,633 --> 0:17:14,768
让我们切换回Xcode

302
00:17:16,670 --> 0:17:21,642
在我的projectViewController中

303
00:17:21,708 --> 0:17:24,810
它们是projectExtensionController

304
00:17:25,078 --> 0:17:28,182
这里我想要注册观察到的变化

305
00:17:31,051 --> 0:17:34,054
我们在两个方法中有着相同的代码

306
00:17:36,490 --> 0:17:39,626
首先我们获得了

307
00:17:39,893 --> 0:17:43,697
我们对添加到项目中的资源感兴趣

308
00:17:43,764 --> 0:17:47,000
所以我们获取了一份项目中

309
00:17:47,534 --> 0:17:51,338
然后我们注册了库的资源变化观察者

310
00:17:51,772 --> 0:17:54,708
在项目结束的时候 我们再取消注册

311
00:17:56,043 --> 0:17:59,613
由于Xcode提示我们

312
00:17:59,680 --> 0:18:01,181
我们要将变化观察者

313
00:17:59,680 --> 0:18:01,181
我们要将变化观察者

314
00:18:01,248 --> 0:18:02,449
加到

315
00:18:02,883 --> 0:18:05,919
下面这里

316
00:18:09,323 --> 0:18:11,725
我们实现了

317
00:18:12,693 --> 0:18:14,094
PhotoLibraryDidChange

318
00:18:14,161 --> 0:18:17,397
会在照片库中有内容

319
00:18:18,098 --> 0:18:22,603
我们会以方法参数的形式

320
00:18:23,537 --> 0:18:25,472
我们可以请求

321
00:18:25,539 --> 0:18:28,475
获得我们感兴趣的

322
00:18:28,842 --> 0:18:33,146
我们对项目中

323
00:18:33,213 --> 0:18:35,082
所以我们要传入

324
00:18:35,716 --> 0:18:38,785
如果返回了

325
00:18:38,852 --> 0:18:45,325
我们会利用fetchResultsAfterChanges

326
00:18:45,559 --> 0:18:49,630
并获得projectExtensionContext

327
00:18:50,631 --> 0:18:52,733
传入我们的项目信息

328
00:18:53,634 --> 0:18:56,336
在updatedProjectInfo

329
00:18:56,403 --> 0:18:58,372
我们可以调用相同的设置代码

330
00:18:58,438 --> 0:19:01,175
但是你可以实现更复杂的功能

331
00:18:58,438 --> 0:19:01,175
但是你可以实现更复杂的功能

332
00:19:02,309 --> 0:19:04,211
让我们重新运行下这个项目

333
00:19:19,660 --> 0:19:20,661
好了

334
00:19:23,530 --> 0:19:26,099
我现在就可以从侧边栏拖拽相册

335
00:19:26,600 --> 0:19:32,072
把它放到扩展

336
00:19:32,139 --> 0:19:36,710
而且扩展会监听照片库的变化

337
00:19:36,777 --> 0:19:40,547
在其变化以及我们更新了

338
00:19:48,488 --> 0:19:51,725
正如你们所见 只要几步

339
00:19:51,792 --> 0:19:56,463
我就可以通过使用

340
00:19:56,530 --> 0:19:58,866
及projectInfo中

341
00:19:58,932 --> 0:20:02,269
还可以注册资源变化观察器

342
00:19:58,932 --> 0:20:02,269
还可以注册资源变化观察器

343
00:20:02,336 --> 0:20:05,506
在照片库有任何变化的时候获得通知

344
00:20:05,572 --> 0:20:07,474
并更新我的项目信息

345
00:20:10,444 --> 0:20:12,946
我想强调集成中的两个内容

346
00:20:13,280 --> 0:20:17,918
Photos会默认处理

347
00:20:17,985 --> 0:20:20,654
资源的复制和粘贴

348
00:20:20,854 --> 0:20:23,824
但是如果你的扩展也想实现粘贴区域

349
00:20:23,891 --> 0:20:26,627
也就是你在处理文字之类的

350
00:20:26,693 --> 0:20:28,161
我们需要你的帮助以了解

351
00:20:28,228 --> 0:20:30,664
你的扩展应该什么时候处理粘贴区域

352
00:20:30,731 --> 0:20:33,200
以及Photos

353
00:20:33,634 --> 0:20:39,306
因此如果菜单操作是粘贴

354
00:20:39,373 --> 0:20:43,210
检查你的扩展是否可以

355
00:20:43,343 --> 0:20:47,514
如果不能 就返回假

356
00:20:47,581 --> 0:20:49,449
否则的话 如果你要处理它

357
00:20:49,516 --> 0:20:52,719
就返回真 那么你的

358
00:20:54,121 --> 0:20:56,290
对于拖拽的操作也是类似的

359
00:20:56,657 --> 0:21:02,563
Photos会默认处理

360
00:20:56,657 --> 0:21:02,563
Photos会默认处理

361
00:21:02,796 --> 0:21:05,399
但是如果你注册了错误类型的话

362
00:21:05,465 --> 0:21:07,201
你的扩展可能会受到干扰

363
00:21:07,267 --> 0:21:11,004
所以请留意注册到

364
00:21:11,238 --> 0:21:14,308
只注册扩展内部拖拽

365
00:21:14,374 --> 0:21:16,710
或是你确实想处理的拖拽

366
00:21:16,777 --> 0:21:20,080
请在使用的时候

367
00:21:20,147 --> 0:21:23,917
因为它默认会注册一堆拖拽类型

368
00:21:26,053 --> 0:21:28,789
这就是关于照片项目扩展的所有内容

369
00:21:28,856 --> 0:21:33,894
现在让我将讲台交给我的同事

370
00:21:33,961 --> 0:21:36,730
以第三方app来

371
00:21:36,964 --> 0:21:38,031
谢谢

372
00:21:40,601 --> 0:21:41,635
谢谢 Tobias

373
00:21:42,402 --> 0:21:43,570
大家好

374
00:21:43,804 --> 0:21:44,671
我叫Sanaa

375
00:21:44,738 --> 0:21:47,241
我是一名Photos的工程师

376
00:21:47,307 --> 0:21:50,010
来介绍一些最佳的实践

377
00:21:50,077 --> 0:21:52,613
有关我们利用拖拽

378
00:21:52,679 --> 0:21:55,716
接收和提供图片或是视频

379
00:21:57,551 --> 0:22:00,420
拖拽是将物品从一处移动到另一处的

380
00:21:57,551 --> 0:22:00,420
拖拽是将物品从一处移动到另一处的

381
00:22:00,487 --> 0:22:02,523
最直观和简单的方式之一

382
00:22:03,257 --> 0:22:06,326
但有时你可能会遇到这样的情况

383
00:22:10,130 --> 0:22:12,132
如果你的app中出现了这样的问题

384
00:22:12,199 --> 0:22:14,034
那你就来对地方了

385
00:22:14,601 --> 0:22:15,536
那么

386
00:22:18,505 --> 0:22:21,041
让我们退一步来思考下发生了什么

387
00:22:22,776 --> 0:22:25,946
macOS上的拖拽会用到

388
00:22:26,013 --> 0:22:28,549
当它被封装到剪切板的时候

389
00:22:28,615 --> 0:22:31,185
读写数据会在接收和提供app时

390
00:22:31,251 --> 0:22:33,820
发生于主交易中

391
00:22:34,254 --> 0:22:38,192
在过去 由于只有本地的数据

392
00:22:38,258 --> 0:22:41,261
你可以把文件的URL放到剪切板中

393
00:22:41,428 --> 0:22:43,163
但是现在事情有了变化

394
00:22:43,330 --> 0:22:48,869
如果用户在使用iCloud的话

395
00:22:48,936 --> 0:22:52,773
所以在Photos中 我们需要

396
00:22:52,840 --> 0:22:55,375
首先下载完全分辨率的项目文件

397
00:22:56,643 --> 0:23:00,581
而且Photos

398
00:22:56,643 --> 0:23:00,581
而且Photos

399
00:23:00,647 --> 0:23:04,251
所以如果用户选择保留位置信息

400
00:23:04,318 --> 0:23:08,488
Photos就会导出一个

401
00:23:09,223 --> 0:23:11,992
下载和导出文件都要花时间

402
00:23:12,059 --> 0:23:14,027
你不应该在主交易中这么做

403
00:23:14,428 --> 0:23:17,431
因为这样会阻塞你的app UI

404
00:23:19,499 --> 0:23:23,403
为了能实现这一功能

405
00:23:24,471 --> 0:23:29,042
其实我们有这么一个API

406
00:23:30,344 --> 0:23:32,913
文件承诺是一种承诺

407
00:23:32,980 --> 0:23:36,617
某个还没有出现在

408
00:23:36,683 --> 0:23:38,986
会被写入到一个提供的位置上

409
00:23:39,620 --> 0:23:43,156
它还允许发送者在后台写文件

410
00:23:45,559 --> 0:23:48,428
有两种与文件承诺进行交互的方式

411
00:23:48,829 --> 0:23:52,099
通过NSFilePromiseReceiver

412
00:23:52,165 --> 0:23:55,202
以及通过NSFilePromiseProvider

413
00:23:55,936 --> 0:23:59,139
这两个先进的API在两年前

414
00:23:59,206 --> 0:24:00,240
就跟macOS Sierra

415
00:23:59,206 --> 0:24:00,240
就跟macOS Sierra

416
00:24:02,409 --> 0:24:04,945
首先让我们看看接收文件承诺

417
00:24:08,849 --> 0:24:12,653
基本原则就是app支持的拖拽

418
00:24:12,719 --> 0:24:16,757
应该一直接受文件URL和文件承诺

419
00:24:16,823 --> 0:24:18,025
我会解释下为什么

420
00:24:20,027 --> 0:24:22,729
有很多的app提供了文件承诺

421
00:24:23,931 --> 0:24:27,167
Photos会在拖拽图片的时候

422
00:24:27,234 --> 0:24:29,169
对于视频或是整个相册也是这样

423
00:24:29,670 --> 0:24:32,272
从macOS Mojave开始

424
00:24:32,339 --> 0:24:36,443
我们添加了拖拽人或是回忆的功能

425
00:24:36,910 --> 0:24:39,780
我们并不是唯一使用

426
00:24:40,614 --> 0:24:43,784
邮件会在将短信拖拽到

427
00:24:44,117 --> 0:24:46,820
以保存包括附件在内的整个邮件

428
00:24:47,754 --> 0:24:50,791
Safari会在拖拽图片的时候

429
00:24:51,091 --> 0:24:56,396
Keynote会在拖拽幻灯片

430
00:24:56,463 --> 0:24:58,932
创建一个包含了这些幻灯片的新文档

431
00:25:00,501 --> 0:25:03,370
如果你想从这些app中接收文件

432
00:25:03,437 --> 0:25:07,574
或是有app提供了文件承诺的话

433
00:25:07,641 --> 0:25:09,142
并且需要接受这些文件

434
00:25:09,810 --> 0:25:12,479
让我们通过代码来看看如何实现吧

435
00:25:15,048 --> 0:25:18,685
首先在设置时 视图必须通过调用

436
00:25:18,752 --> 0:25:21,421
来注册接受的类型

437
00:25:21,488 --> 0:25:24,424
为了接受文件承诺

438
00:25:24,491 --> 0:25:27,961
你可以使用

439
00:25:28,028 --> 0:25:29,730
类属性

440
00:25:32,032 --> 0:25:38,772
当执行拖拽操作 枚举或是

441
00:25:39,439 --> 0:25:42,209
你应该添加对于

442
00:25:42,643 --> 0:25:44,611
以确保首先对它进行处理

443
00:25:45,145 --> 0:25:49,650
因为它是最有可能包含

444
00:25:52,386 --> 0:25:56,523
对于每个filePromiseReceiver

445
00:25:57,257 --> 0:25:58,926
当文件准备好的时候

446
00:25:59,693 --> 0:26:03,764
读取器块会在所提供的

447
00:25:59,693 --> 0:26:03,764
读取器块会在所提供的

448
00:26:03,830 --> 0:26:05,399
你可以在那里对文件进行处理

449
00:26:07,501 --> 0:26:11,171
提供后台operationQueue

450
00:26:12,406 --> 0:26:17,077
可以在等待文件下载完成

451
00:26:18,078 --> 0:26:21,515
下载或被源文件写入时

452
00:26:22,249 --> 0:26:26,186
因为这个过程会花很长时间

453
00:26:26,753 --> 0:26:30,724
你不应该在缓慢的网络中

454
00:26:33,560 --> 0:26:38,532
为了获得更好的用户体验

455
00:26:39,099 --> 0:26:40,300
当文件准备好的时候

456
00:26:40,367 --> 0:26:43,604
你可以用真实的内容来替换UI

457
00:26:45,873 --> 0:26:48,442
这里你可以看到一个邮件的例子

458
00:26:49,576 --> 0:26:52,446
在等待通过文件承诺来下载图片时

459
00:26:52,513 --> 0:26:55,816
会显示一个占位的URL

460
00:27:01,121 --> 0:27:03,490
这就是接收文件承诺的内容

461
00:27:03,557 --> 0:27:06,593
让我们看下要如何提供文件承诺

462
00:27:07,094 --> 0:27:10,931
如果你想发送到拖拽的数据

463
00:27:11,164 --> 0:27:12,599
在磁盘上还没有

464
00:27:12,666 --> 0:27:15,602
那么你应该在app进行实现

465
00:27:16,436 --> 0:27:21,775
让我们通过看这个API

466
00:27:25,646 --> 0:27:30,184
首先你需要创建一个

467
00:27:32,486 --> 0:27:35,189
你应该为每个承诺的文件

468
00:27:35,422 --> 0:27:38,992
在将filePromiseProvider对象

469
00:27:39,059 --> 0:27:42,262
写入到剪切板之前

470
00:27:42,596 --> 0:27:43,764
以及一个代理

471
00:27:44,298 --> 0:27:47,701
这些代理会将文件写入磁盘中

472
00:27:48,368 --> 0:27:52,840
在NSFilePromiseProvider

473
00:27:53,006 --> 0:27:56,043
第一个方法由拖拽的目的地所调用

474
00:27:56,777 --> 0:27:59,613
并且返回的是文件名

475
00:27:59,980 --> 0:28:06,453
第二个方法会返回一个

476
00:27:59,980 --> 0:28:06,453
第二个方法会返回一个

477
00:28:06,520 --> 0:28:10,257
文件会被写入其中

478
00:28:10,991 --> 0:28:15,395
我们强烈建议你实现这个可选的方法

479
00:28:15,462 --> 0:28:19,366
提供一个后台

480
00:28:19,433 --> 0:28:21,902
否则主队列会被用在其他内容上

481
00:28:24,137 --> 0:28:27,941
最后writePromiseToFile

482
00:28:28,008 --> 0:28:30,110
让你将文件写入磁盘上

483
00:28:31,645 --> 0:28:34,781
在你完成的时候

484
00:28:37,217 --> 0:28:40,988
这就是接收以及提供文件承诺的内容

485
00:28:41,054 --> 0:28:44,391
我们还介绍了你可以用来

486
00:28:44,458 --> 0:28:48,762
将你的app调整为可以

487
00:28:48,829 --> 0:28:52,065
现在我想请Joachim上台来

488
00:28:52,132 --> 0:28:54,201
通过示例app

489
00:28:54,268 --> 0:28:55,335
谢谢 Joachim？

490
00:28:59,039 --> 0:28:59,973
谢谢

491
00:29:02,009 --> 0:29:02,976
早上好

492
00:29:03,510 --> 0:29:06,547
我们会看一个简单的光线生成app

493
00:29:06,613 --> 0:29:08,782
它有些拖拽方面的问题

494
00:29:09,049 --> 0:29:12,519
我们会进到Xcode

495
00:29:19,893 --> 0:29:21,461
这就是我的简单app

496
00:29:21,528 --> 0:29:25,232
我会从桌面上拿一个文件

497
00:29:25,699 --> 0:29:27,634
放到它的窗口中

498
00:29:27,701 --> 0:29:28,669
就像是这样

499
00:29:29,469 --> 0:29:31,371
在右上角我有一个小按钮

500
00:29:31,438 --> 0:29:37,511
我可以在这添加一个文本框

501
00:29:38,378 --> 0:29:42,382
我可以选择它 移动它

502
00:29:43,750 --> 0:29:48,889
我可以将它发送到iMessage

503
00:29:52,759 --> 0:29:54,828
虽然这张图片很棒

504
00:29:54,895 --> 0:29:57,531
但我还是想用我在网上找到的图片

505
00:29:57,698 --> 0:29:59,299
让我们打开Safari

506
00:30:01,168 --> 0:30:05,172
试着将这张图片拖放到

507
00:30:06,840 --> 0:30:09,009
不幸的是 这样不行

508
00:30:09,543 --> 0:30:13,180
让我们进入Xcode

509
00:30:17,150 --> 0:30:20,087
我现在在app的

510
00:30:20,420 --> 0:30:23,957
我们要直接跳到

511
00:30:24,358 --> 0:30:26,527
看看发生了什么

512
00:30:28,662 --> 0:30:32,599
在这里 我们只注册了文件的URL

513
00:30:33,133 --> 0:30:37,437
让我们修复这个问题

514
00:30:41,642 --> 0:30:46,280
然后在处理拖拽操作的时候

515
00:30:46,713 --> 0:30:50,450
我们也需要对

516
00:30:51,351 --> 0:30:55,222
让我们跳到下面的这个方法

517
00:30:56,790 --> 0:31:01,328
这个是所支持的类的列表

518
00:30:56,790 --> 0:31:01,328
这个是所支持的类的列表

519
00:31:01,528 --> 0:31:05,365
所以我们要在第一个索引那里添加

520
00:31:06,066 --> 0:31:11,205
NSFilePromiseReceiver

521
00:31:15,375 --> 0:31:19,580
在这里的枚举方法中

522
00:31:26,954 --> 0:31:30,457
来接收所承诺的文件

523
00:31:30,524 --> 0:31:32,326
如果我们刚刚通过拖拽得到了一个

524
00:31:32,526 --> 0:31:36,463
文件的URL

525
00:31:36,530 --> 0:31:39,800
相同的方法

526
00:31:40,734 --> 0:31:42,202
让我们看看这样行不行

527
00:31:48,208 --> 0:31:49,743
这就是我们的简单app

528
00:31:50,377 --> 0:31:55,782
让我们回到Safari

529
00:32:00,521 --> 0:32:01,755
这很简单

530
00:32:01,822 --> 0:32:06,727
我只需要修改两个现有的方法

531
00:32:08,996 --> 0:32:11,732
现在让我们添加一些文字

532
00:32:15,202 --> 0:32:16,236
就像是这样

533
00:32:16,570 --> 0:32:20,440
如果我还没准备好

534
00:32:20,507 --> 0:32:24,545
那我可以将它拖拽到桌面就可以

535
00:32:27,247 --> 0:32:28,982
正如你所见 这样是行不通的

536
00:32:29,183 --> 0:32:32,553
让我们回到Xcode

537
00:32:38,058 --> 0:32:39,193
在这个类的底部

538
00:32:39,259 --> 0:32:44,131
我们有这个会返回遵从于NSPasteboardWriting

539
00:32:44,565 --> 0:32:45,966
如你所见

540
00:32:46,033 --> 0:32:48,735
我们这里返回一个简单的

541
00:32:49,403 --> 0:32:53,473
我们会用filePromiseProvider

542
00:32:57,010 --> 0:33:02,716
我们要创建一个文件供应器

543
00:32:57,010 --> 0:33:02,716
我们要创建一个文件供应器

544
00:33:03,317 --> 0:33:08,455
我们会用这个userInfo属性

545
00:33:08,856 --> 0:33:11,892
我们后面会用它来将文件写到磁盘上

546
00:33:13,894 --> 0:33:18,699
然后我们要遵从

547
00:33:22,169 --> 0:33:23,470
就像是这样

548
00:33:24,538 --> 0:33:25,706
回到下面

549
00:33:26,139 --> 0:33:29,610
实现你刚才听到的三个代理方法

550
00:33:32,179 --> 0:33:34,715
第一个会返回文件名

551
00:33:36,450 --> 0:33:39,753
为了简单

552
00:33:41,255 --> 0:33:43,857
第二个代理会返回

553
00:33:44,758 --> 0:33:46,860
我们这里正好有一个

554
00:33:47,895 --> 0:33:52,399
第三个代理要将文件写入到磁盘中

555
00:33:58,739 --> 0:34:00,073
这里所发生的是

556
00:33:58,739 --> 0:34:00,073
这里所发生的是

557
00:34:00,140 --> 0:34:05,946
我们要从filePromiseProvider对象中

558
00:34:06,013 --> 0:34:11,351
并且我们要用它的JPEG呈现

559
00:34:13,620 --> 0:34:14,688
让我们来看一下

560
00:34:19,793 --> 0:34:22,161
这次我们要跳到Photos中

561
00:34:24,998 --> 0:34:27,000
我们要拿到这张图片

562
00:34:27,935 --> 0:34:32,539
把它拖拽到我们的app中

563
00:34:36,243 --> 0:34:40,447
然后把它拖到Finder桌面上

564
00:34:42,014 --> 0:34:43,116
这是这样了

565
00:34:55,829 --> 0:34:58,465
如果你照着我刚刚的步骤来做

566
00:34:58,532 --> 0:35:01,235
你就可以为你的app添加

567
00:34:58,532 --> 0:35:01,235
你就可以为你的app添加

568
00:35:01,635 --> 0:35:04,304
并改进你的用户体验

569
00:35:04,872 --> 0:35:07,174
我想让Eric来给你们介绍一下

570
00:35:07,441 --> 0:35:08,275
谢谢

571
00:35:08,342 --> 0:35:12,779
（演示

572
00:35:12,846 --> 0:35:14,448
非常棒的内容

573
00:35:14,515 --> 0:35:15,849
我希望你们能喜欢

574
00:35:15,916 --> 0:35:18,685
我就想说几句话来做下总结

575
00:35:19,520 --> 0:35:21,588
将这些内容串连到一起

576
00:35:22,122 --> 0:35:29,029
首先我想说的是

577
00:35:29,096 --> 0:35:31,999
对吗？

578
00:35:32,065 --> 0:35:34,835
每天都会拍数以百万计的照片

579
00:35:35,602 --> 0:35:39,540
所有这些照片都可以

580
00:35:41,041 --> 0:35:43,243
但如果它们不能进行分享的话

581
00:35:43,977 --> 0:35:45,512
如果它们不能被展示

582
00:35:45,579 --> 0:35:48,982
不能被妥善地保存起来

583
00:35:49,149 --> 0:35:52,986
所以拍摄了这些照片的人

584
00:35:53,053 --> 0:35:55,789
依赖于你们这些开发者

585
00:35:55,856 --> 0:35:59,993
创造出可以让他们发挥创造力

586
00:36:00,494 --> 0:36:03,197
如果你今天从这个演讲

587
00:36:03,263 --> 0:36:04,731
就是要记住

588
00:36:05,332 --> 0:36:07,201
支持文件承诺

589
00:36:07,634 --> 0:36:11,371
它可以很轻松地实现

590
00:36:11,438 --> 0:36:12,539
跟Photos app的交互

591
00:36:13,640 --> 0:36:14,808
请一定要实现它

592
00:36:15,042 --> 0:36:17,611
第二个就是 我们强烈建议你

593
00:36:17,678 --> 0:36:20,881
去看看所有那些

594
00:36:20,948 --> 0:36:24,651
在Photos的项目扩展体验中

595
00:36:26,420 --> 0:36:30,457
回到我最开始所讲的内容

596
00:36:30,524 --> 0:36:33,093
使用它的话你可以有很大的机遇

597
00:36:33,160 --> 0:36:37,698
我们一起努力的话就可以为每个人

598
00:36:40,367 --> 0:36:43,904
为了这一目的

599
00:36:44,304 --> 0:36:47,441
我们会有很多工程师

600
00:36:47,508 --> 0:36:50,511
来帮助你们解答

601
00:36:50,577 --> 0:36:53,180
不管是关于iOS还是

602
00:36:53,247 --> 0:36:55,682
我们期待着跟你们聊一聊

603
00:36:56,250 --> 0:36:58,852
请享受WWDC剩下演讲

604
00:36:58,919 --> 0:36:59,887
谢谢大家
