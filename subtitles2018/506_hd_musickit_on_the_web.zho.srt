1
00:00:07,516 --> 0:00:15,500
[ 音乐 ]

2
00:00:17,516 --> 0:00:20,976
[ 掌声 ]

3
00:00:21,476 --> 0:00:24,166
&gt;&gt; 大家好 欢迎大家

4
00:00:25,086 --> 0:00:26,766
我是 Betim Deva

5
00:00:26,766 --> 0:00:28,216
Apple Music 团队的工程师

6
00:00:28,256 --> 0:00:30,336
在此我激动地与你们分享

7
00:00:30,336 --> 0:00:32,266
我们对 MusicKit

8
00:00:32,266 --> 0:00:33,296
所作的一些更新

9
00:00:35,106 --> 0:00:36,566
MusicKit 发布于去年

10
00:00:36,566 --> 0:00:38,626
它使得开发者

11
00:00:38,626 --> 0:00:41,366
可以在自己的 App 中

12
00:00:41,366 --> 0:00:43,556
实现定制化的音乐体验

13
00:00:44,476 --> 0:00:46,476
今年 我们要介绍的是

14
00:00:46,476 --> 0:00:48,796
网页端 Apple Music

15
00:00:48,796 --> 0:00:50,486
将使你能够在你的网站上

16
00:00:50,486 --> 0:00:53,586
实现同样的音乐体验

17
00:00:54,766 --> 0:00:56,856
我们准备好了一个很棒的网页播放器

18
00:00:56,856 --> 0:00:58,916
方便你嵌入使用

19
00:00:58,916 --> 0:01:00,796
而我们即将登场的网页端 MusicKit

20
00:00:58,916 --> 0:01:00,796
而我们即将登场的网页端 MusicKit

21
00:01:00,796 --> 0:01:02,976
能够把 Apple Music

22
00:01:03,046 --> 0:01:06,456
整合在你的网站中

23
00:01:07,066 --> 0:01:09,006
我们过一小会再讨论

24
00:01:09,006 --> 0:01:10,546
网页端 Apple Music

25
00:01:10,546 --> 0:01:12,566
但是首先让我们看一看

26
00:01:12,566 --> 0:01:14,736
MusicKit 上的一些令人激动的更新

27
00:01:15,256 --> 0:01:18,906
我们非常欣喜地看到

28
00:01:18,906 --> 0:01:20,816
App 开发者以不同的方式

29
00:01:21,196 --> 0:01:23,466
将 Apple Music 结合到他们的 App 里

30
00:01:24,026 --> 0:01:27,026
例如 我们都熟知并喜欢

31
00:01:27,026 --> 0:01:29,986
用 musical.ly 来制作音乐视频

32
00:01:30,636 --> 0:01:32,086
当你在这个 App 中发现一首新歌

33
00:01:32,086 --> 0:01:34,586
你可以很容易将它加入播放列表

34
00:01:36,216 --> 0:01:38,726
Houdini 使得加入 Apple Music 

35
00:01:38,726 --> 0:01:39,716
更加简单

36
00:01:40,306 --> 0:01:42,366
它可以把你的播放列表

37
00:01:42,366 --> 0:01:44,336
转移到 Apple Music 中

38
00:01:45,716 --> 0:01:48,166
Stationhead 可以把你的

39
00:01:48,166 --> 0:01:50,596
播放列表变成电台

40
00:01:50,976 --> 0:01:53,126
它可以将你的音乐和声音

41
00:01:53,126 --> 0:01:56,046
广播到全世界

42
00:01:57,556 --> 0:02:00,536
最后 Ola 是全印度最大的

43
00:01:57,556 --> 0:02:00,536
最后 Ola 是全印度最大的

44
00:02:00,536 --> 0:02:02,286
网约车服务

45
00:02:03,106 --> 0:02:04,296
我们一直在与他们合作

46
00:02:04,296 --> 0:02:06,466
将 Apple Music 体验

47
00:02:06,466 --> 0:02:09,256
加入到他们的车队中

48
00:02:10,876 --> 0:02:13,406
自从去年 MusicKit 发布以来

49
00:02:13,406 --> 0:02:15,466
我们收到了大量的反馈

50
00:02:15,466 --> 0:02:18,276
希望我们提供

51
00:02:18,276 --> 0:02:20,406
能够利用 ISRC

52
00:02:20,406 --> 0:02:22,926
也就是国际标准音像制品编码

53
00:02:22,926 --> 0:02:24,796
来搜索内容的功能

54
00:02:24,846 --> 0:02:28,336
在此我高兴地宣布

55
00:02:28,336 --> 0:02:30,156
我们已经加入了这项功能

56
00:02:30,156 --> 0:02:31,986
它能够精确地把

57
00:02:32,246 --> 0:02:35,296
Apple Music 目录

58
00:02:35,296 --> 0:02:37,066
与几乎任何其他来源的

59
00:02:37,066 --> 0:02:38,916
歌曲与音乐视频进行匹配

60
00:02:40,596 --> 0:02:43,036
另一项对 MusicKit 的改进

61
00:02:43,626 --> 0:02:46,686
是增加了 iCloud 音乐资料库 API

62
00:02:48,096 --> 0:02:50,026
只要用户向你的 App

63
00:02:50,026 --> 0:02:52,736
提供授权

64
00:02:52,736 --> 0:02:54,396
他们就可以以各种方式

65
00:02:54,756 --> 0:02:56,486
在你的 App 里直接与

66
00:02:56,486 --> 0:02:59,206
他们的音乐资料库互动

67
00:03:00,676 --> 0:03:03,966
这些 API 使你的用户

68
00:03:03,966 --> 0:03:08,176
可以浏览 搜索 添加内容

69
00:03:08,176 --> 0:03:09,506
到他们的音乐资料库

70
00:03:10,816 --> 0:03:12,246
你还可以让你的用户

71
00:03:12,246 --> 0:03:14,506
创建播放列表

72
00:03:14,976 --> 0:03:16,736
或是将歌曲添加到已创建的播放列表

73
00:03:16,776 --> 0:03:20,000
这一切在你的 App 内就能完成

74
00:03:24,256 --> 0:03:26,146
去年我们带来了一些

75
00:03:26,146 --> 0:03:28,366
针对目录的 Apple Music API

76
00:03:29,576 --> 0:03:32,366
今年我们新增了 

77
00:03:32,366 --> 0:03:33,876
iCloud 音乐资料库的 API

78
00:03:34,476 --> 0:03:35,906
我们认为这是一组不错的

79
00:03:35,906 --> 0:03:37,276
音乐 API

80
00:03:38,266 --> 0:03:40,196
如果你一直在使用我们的

81
00:03:40,196 --> 0:03:42,576
现有的 iTunes Search API

82
00:03:42,616 --> 0:03:44,916
我们希望现在你能转移到

83
00:03:44,916 --> 0:03:48,126
Apple Music API

84
00:03:48,356 --> 0:03:50,246
现在我要请

85
00:03:50,246 --> 0:03:52,466
我的同事 DJ 上台

86
00:03:52,466 --> 0:03:54,216
给大家谈一谈网页端 Apple Music

87
00:03:54,716 --> 0:03:55,126
谢谢

88
00:03:56,516 --> 0:04:00,836
[ 掌声 ]

89
00:03:56,516 --> 0:04:00,836
[ 掌声 ]

90
00:04:01,336 --> 0:04:01,846
&gt;&gt; 谢谢 Betim

91
00:04:03,256 --> 0:04:04,396
今年 我们怀着激动的心情

92
00:04:04,396 --> 0:04:05,676
发布网页端 MusicKit

93
00:04:06,476 --> 0:04:08,306
去年 我们讨论了

94
00:04:08,346 --> 0:04:09,686
将 Apple Music 加入你的 iOS App 的

95
00:04:09,686 --> 0:04:11,236
各种方法

96
00:04:12,166 --> 0:04:13,186
今年 我们将给网页端

97
00:04:13,186 --> 0:04:14,786
带来同样强大的功能

98
00:04:16,456 --> 0:04:17,435
那么 让我们来谈谈

99
00:04:17,435 --> 0:04:21,906
网页端 MusicKit 的组成部分

100
00:04:22,106 --> 0:04:23,416
去年 我们添加了

101
00:04:23,416 --> 0:04:24,906
REST API 用来访问

102
00:04:24,906 --> 0:04:26,496
整个 Apple Music 目录

103
00:04:27,056 --> 0:04:28,646
今年 正如 Betim 提到过的

104
00:04:29,286 --> 0:04:30,526
我们将会发布对 REST API

105
00:04:30,526 --> 0:04:32,006
进行补充 

106
00:04:32,006 --> 0:04:33,786
允许已登录用户访问 

107
00:04:33,786 --> 0:04:34,766
iCloud 音乐资料库

108
00:04:36,276 --> 0:04:37,386
同时我们会发布

109
00:04:37,386 --> 0:04:38,936
MusicKit JS 库

110
00:04:39,606 --> 0:04:41,766
它能让你轻松地在浏览器上

111
00:04:41,766 --> 0:04:42,816
使用两个 REST API

112
00:04:42,816 --> 0:04:46,296
并允许你的用户

113
00:04:46,296 --> 0:04:47,486
仅使用浏览器 

114
00:04:47,486 --> 0:04:49,266
就能完整地播放歌曲

115
00:04:49,266 --> 0:04:51,026
无论歌曲位于 Apple Music 目录上

116
00:04:51,026 --> 0:04:52,756
还是位于 iCloud 音乐资料库里

117
00:04:56,616 --> 0:04:58,206
在我们深入研究 MusicKit JS 之前

118
00:04:58,206 --> 0:04:59,906
我想向你们展示

119
00:04:59,906 --> 0:05:00,876
Apple Music 网页播放器

120
00:04:59,906 --> 0:05:00,876
Apple Music 网页播放器

121
00:05:02,836 --> 0:05:04,646
几星期前 我们发布了一个

122
00:05:04,646 --> 0:05:05,616
新的可嵌入式播放器

123
00:05:06,586 --> 0:05:08,306
它在桌面和移动端的浏览器上

124
00:05:08,306 --> 0:05:10,176
运行得都很好

125
00:05:11,996 --> 0:05:13,496
这些可嵌入式播放器

126
00:05:13,496 --> 0:05:15,016
让你能很轻松地

127
00:05:15,016 --> 0:05:16,186
在自己的网站上

128
00:05:16,186 --> 0:05:18,246
完整播放 Apple Music 目录中的歌曲

129
00:05:18,506 --> 0:05:20,986
我们的播放器支持 

130
00:05:20,986 --> 0:05:23,176
单曲 专辑或是整个播放列表

131
00:05:24,496 --> 0:05:26,346
你可以在 Apple Music 预览页面

132
00:05:26,346 --> 0:05:28,636
或是可嵌入式播放器自身上面

133
00:05:28,636 --> 0:05:30,236
找到嵌入代码

134
00:05:31,316 --> 0:05:32,816
你所需做的仅仅是将它

135
00:05:32,816 --> 0:05:34,156
拷贝并粘贴到你的网站上

136
00:05:34,156 --> 0:05:36,116
这些可嵌入式播放器

137
00:05:36,116 --> 0:05:38,526
非常适合用来在第三方网站上

138
00:05:38,526 --> 0:05:40,036
播放完整的歌曲

139
00:05:40,036 --> 0:05:41,466
同时 我们也把这个功能

140
00:05:41,466 --> 0:05:43,026
做到了 Apple Music 预览页面上

141
00:05:43,596 --> 0:05:47,366
内嵌功能是由

142
00:05:47,506 --> 0:05:49,706
MusicKit JS 支持的

143
00:05:49,706 --> 0:05:50,766
我们也将一并发布 MusicKit JS

144
00:05:50,766 --> 0:05:52,086
让你打造属于自己的音乐体验

145
00:05:53,636 --> 0:05:55,916
那么 让我们谈谈功能

146
00:05:58,256 --> 0:05:59,936
最重要的一点是

147
00:05:59,936 --> 0:06:01,046
你将能够在浏览器内完整播放 

148
00:05:59,936 --> 0:06:01,046
你将能够在浏览器内完整播放 

149
00:06:01,046 --> 0:06:03,246
Apple Music 上的歌曲

150
00:06:04,076 --> 0:06:05,536
它可以在如今所有浏览器上运行

151
00:06:05,536 --> 0:06:06,746
不需要任何插件

152
00:06:06,746 --> 0:06:08,646
也没有任何外部依赖

153
00:06:09,436 --> 0:06:11,156
你可以单独使用它

154
00:06:11,216 --> 0:06:12,626
或是在想要的 JavaScript 框架中使用

155
00:06:14,796 --> 0:06:16,856
播放音乐需要我们授权用户

156
00:06:18,046 --> 0:06:19,426
我们会替你把控

157
00:06:19,426 --> 0:06:20,606
确保该用户订阅了 

158
00:06:20,606 --> 0:06:21,376
Apple Music

159
00:06:21,916 --> 0:06:24,066
JavaScript 库

160
00:06:24,066 --> 0:06:25,326
会维护一个歌曲队列

161
00:06:25,326 --> 0:06:26,756
允许你完整播放整张专辑

162
00:06:26,756 --> 0:06:27,336
或是整个播放列表

163
00:06:27,446 --> 0:06:31,536
只要你有了那个播放队列

164
00:06:31,536 --> 0:06:32,866
你就能够轻易控制它

165
00:06:33,006 --> 0:06:34,466
你可以播放 暂停

166
00:06:34,466 --> 0:06:36,256
跳到上一首或是

167
00:06:36,256 --> 0:06:37,466
跳到下一首

168
00:06:38,676 --> 0:06:40,786
并且我们也会追踪正在播放

169
00:06:40,786 --> 0:06:42,606
或正在加载的歌曲的

170
00:06:42,606 --> 0:06:43,916
正在播放元数据

171
00:06:43,916 --> 0:06:45,446
以便你可以基于它

172
00:06:45,446 --> 0:06:47,126
来渲染 UI

173
00:06:48,596 --> 0:06:49,836
让我们来聊聊

174
00:06:49,836 --> 0:06:51,146
如何给网页构建一个简单的播放器

175
00:06:51,576 --> 0:06:53,066
我们要包含

176
00:06:53,066 --> 0:06:54,566
JavaScript 库

177
00:06:56,676 --> 0:06:57,876
然后 你需要提供你的

178
00:06:57,876 --> 0:06:58,686
开发者令牌

179
00:06:58,936 --> 0:07:00,296
你可以用你的私钥

180
00:06:58,936 --> 0:07:00,296
你可以用你的私钥

181
00:07:00,296 --> 0:07:00,976
来生成令牌

182
00:07:01,506 --> 0:07:05,466
我们可以很好地使用

183
00:07:05,466 --> 0:07:07,606
声明式的 HTML 标记语言

184
00:07:07,796 --> 0:07:09,156
你可以给你的页面添加一些标记语言

185
00:07:09,196 --> 0:07:10,636
例如 登录 登出

186
00:07:10,636 --> 0:07:12,376
或是播放控制的按钮

187
00:07:13,776 --> 0:07:15,236
我们会将这些元素

188
00:07:15,236 --> 0:07:17,856
与 MusicKit 内的有关功能相连接

189
00:07:18,346 --> 0:07:20,366
然后 我们来加一些

190
00:07:20,366 --> 0:07:21,026
播放按钮

191
00:07:21,026 --> 0:07:22,596
我们会用到一些来自 Apple Music 目录的

192
00:07:22,596 --> 0:07:24,456
内容 ID 和 URL

193
00:07:24,456 --> 0:07:26,876
这样用户就能开始播放了

194
00:07:27,236 --> 0:07:31,716
让我们来看一下这里的代码

195
00:07:31,716 --> 0:07:33,476
你需要包含 JavaScript 库

196
00:07:33,476 --> 0:07:34,926
同时我们也会将该文件

197
00:07:34,926 --> 0:07:36,566
托管至我们的 CDN 服务器

198
00:07:37,086 --> 0:07:39,016
我们需要加入一些用于

199
00:07:39,256 --> 0:07:41,286
登录和登出的按钮

200
00:07:42,496 --> 0:07:44,156
用于控制播放的按钮

201
00:07:44,366 --> 0:07:45,386
这里 我们有一个播放键

202
00:07:45,386 --> 0:07:46,936
一个暂停键和下一曲键

203
00:07:46,936 --> 0:07:50,836
我们会加一些

204
00:07:50,836 --> 0:07:52,286
关于正在播放内容的

205
00:07:52,286 --> 0:07:53,126
将会在元数据中提供的元素

206
00:07:53,546 --> 0:07:54,636
比如我们可以得到播放列表名称

207
00:07:54,636 --> 0:07:57,046
歌曲名称和艺术家名称

208
00:07:57,476 --> 0:07:59,746
然后我们有一些元素

209
00:07:59,746 --> 0:08:01,736
使你能够向用户展示

210
00:07:59,746 --> 0:08:01,736
使你能够向用户展示

211
00:08:01,736 --> 0:08:02,746
当前播放音轨的

212
00:08:02,746 --> 0:08:04,566
进行状态

213
00:08:04,566 --> 0:08:05,926
播放时长

214
00:08:05,926 --> 0:08:07,166
播放时间和播放进度

215
00:08:07,656 --> 0:08:10,376
所以 我想让 Jae Hess 上台

216
00:08:10,376 --> 0:08:12,166
来向你们演示

217
00:08:12,166 --> 0:08:13,866
如何用 MusicKit JS 

218
00:08:13,866 --> 0:08:15,196
来构建一个我们刚刚讨论过的

219
00:08:15,796 --> 0:08:16,856
简易播放器

220
00:08:17,516 --> 0:08:20,016
[ 鼓掌 ]

221
00:08:20,516 --> 0:08:21,056
&gt;&gt; 谢谢你 DJ

222
00:08:22,806 --> 0:08:24,556
我们这就准备开始

223
00:08:24,556 --> 0:08:27,586
在右侧的 Xcode 里

224
00:08:27,586 --> 0:08:29,106
有一个基础的 HTML 模板

225
00:08:29,156 --> 0:08:30,746
已经与 MusicKit JS 库

226
00:08:30,746 --> 0:08:32,196
相关联

227
00:08:32,466 --> 0:08:34,586
在左边 有一个

228
00:08:34,586 --> 0:08:35,966
打开的 Safari 窗口

229
00:08:35,966 --> 0:08:37,405
正在运行一个实时重载的服务器

230
00:08:37,616 --> 0:08:38,956
这样一来 我在标记语言上做的

231
00:08:38,956 --> 0:08:40,486
任何改变都会直接

232
00:08:40,486 --> 0:08:42,196
反映在左手边的窗口里

233
00:08:42,756 --> 0:08:45,996
要想开始使用 

234
00:08:45,996 --> 0:08:47,626
我们首先要做的事就是

235
00:08:47,626 --> 0:08:49,046
按照我们的使用目的配置

236
00:08:49,426 --> 0:08:51,076
有了声明式标记语言

237
00:08:51,076 --> 0:08:52,026
通过使用 meta 标签

238
00:08:52,026 --> 0:08:53,296
可以很简单地完成

239
00:08:53,816 --> 0:08:58,266
我们可以指定我们的 App 名称

240
00:08:58,266 --> 0:09:00,136
同时提供我们的

241
00:08:58,266 --> 0:09:00,136
同时提供我们的

242
00:09:00,136 --> 0:09:01,096
开发者令牌

243
00:09:01,096 --> 0:09:05,936
然后 为了得到我们想要的功能

244
00:09:05,936 --> 0:09:08,396
我们要往页面上放置一个

245
00:09:08,396 --> 0:09:10,176
供用户点击的按钮

246
00:09:10,276 --> 0:09:11,356
当点击这个按钮

247
00:09:11,356 --> 0:09:13,516
它将会从 Apple Music 目录里

248
00:09:13,516 --> 0:09:14,676
获取一个播放列表

249
00:09:15,306 --> 0:09:17,036
设置好播放队列

250
00:09:17,036 --> 0:09:18,026
然后开始在浏览器里播放

251
00:09:18,506 --> 0:09:20,746
现在我准备提供一个

252
00:09:20,886 --> 0:09:22,256
从桌面端的 iTunes 中获取的

253
00:09:22,256 --> 0:09:24,166
内容 URL 以嵌入一个我想嵌入的

254
00:09:24,166 --> 0:09:25,166
具体的播放列表

255
00:09:26,426 --> 0:09:27,846
这个播放列表叫做

256
00:09:27,846 --> 0:09:29,000
Today at Apple Music

257
00:09:34,516 --> 0:09:41,016
[ 音乐 ]

258
00:09:41,516 --> 0:09:42,836
只用简简单单一条代码

259
00:09:42,836 --> 0:09:44,866
我们就能在浏览器里

260
00:09:45,136 --> 0:09:51,776
完整播放 Today at Apple 列表了

261
00:09:51,946 --> 0:09:53,436
尽管这很棒 并且是一个

262
00:09:53,436 --> 0:09:55,076
相当好的解决方案

263
00:09:55,546 --> 0:09:56,876
但我们可能会想要

264
00:09:56,876 --> 0:09:58,146
为用户提供更多

265
00:09:58,146 --> 0:09:59,176
控制方式和功能

266
00:10:00,146 --> 0:10:01,466
我们的第一件要做的

267
00:10:01,466 --> 0:10:02,816
是让你的 App 用户

268
00:10:02,816 --> 0:10:03,926
同时也是

269
00:10:03,926 --> 0:10:05,396
Apple Music 的订阅用户

270
00:10:05,396 --> 0:10:06,336
能够登录和登出

271
00:10:06,806 --> 0:10:08,476
我们可以通过往页面上

272
00:10:08,536 --> 0:10:09,666
添加授权和取消授权按钮

273
00:10:09,696 --> 0:10:13,316
来做到这一点

274
00:10:13,376 --> 0:10:15,946
我们使用 Apple Music 的

275
00:10:15,946 --> 0:10:19,706
Authorize 和 Unauthorize 属性

276
00:10:19,706 --> 0:10:21,376
然后 MusicKit JS 就能替我管理

277
00:10:21,376 --> 0:10:22,816
这些按钮的展示状态

278
00:10:22,946 --> 0:10:24,576
我之前登录过

279
00:10:24,576 --> 0:10:25,826
所以你能看到这里的状态显示

280
00:10:25,826 --> 0:10:28,000
从 Apple Music 登出

281
00:10:32,276 --> 0:10:33,776
接下来我想要加一些

282
00:10:33,776 --> 0:10:34,746
播放控制按键

283
00:10:35,346 --> 0:10:37,116
我们可以用 Apple Music 属性

284
00:10:37,116 --> 0:10:39,156
来指定这些

285
00:10:39,156 --> 0:10:41,206
而且我们可以指定

286
00:10:41,276 --> 0:10:47,656
跳转到上一项 暂停 播放

287
00:10:48,156 --> 0:10:52,000
以及跳转到下一项

288
00:10:56,556 --> 0:10:58,276
我们可以添加正在播放信息

289
00:10:58,276 --> 0:10:59,696
让用户能够看到

290
00:10:59,696 --> 0:11:01,086
队列中正在播放的那一首

291
00:10:59,696 --> 0:11:01,086
队列中正在播放的那一首

292
00:11:02,596 --> 0:11:03,596
这里我指定了

293
00:11:03,596 --> 0:11:05,316
playlistArtworkURL 并且我可以

294
00:11:05,316 --> 0:11:06,796
指定我想要

295
00:11:06,796 --> 0:11:07,616
展示的高和宽

296
00:11:08,236 --> 0:11:09,706
并且我也有权获取

297
00:11:09,706 --> 0:11:11,196
有关这个媒体项目的可用的

298
00:11:11,196 --> 0:11:11,996
任何数据属性

299
00:11:12,646 --> 0:11:14,176
所以我可以指定

300
00:11:15,076 --> 0:11:18,636
播放列表名称

301
00:11:18,636 --> 0:11:20,496
曲目名称 还有艺术家名称

302
00:11:21,716 --> 0:11:22,996
在下面 我已经指定了

303
00:11:22,996 --> 0:11:23,646
我希望当前播放时间

304
00:11:23,646 --> 0:11:26,116
可以被加载在

305
00:11:26,116 --> 0:11:28,966
HTML 的时间元素中

306
00:11:29,036 --> 0:11:31,376
当页面重新加载

307
00:11:31,686 --> 0:11:33,036
正在播放 界面里什么都没有

308
00:11:33,036 --> 0:11:33,916
因为我们没有播放任何音乐

309
00:11:33,916 --> 0:11:35,856
让我们解决这个问题

310
00:11:35,856 --> 0:11:37,076
添加按键 让用户得以

311
00:11:37,076 --> 0:11:39,306
将播放列表加入队列中

312
00:11:39,856 --> 0:11:45,026
我要粘贴 16 个播放列表

313
00:11:45,376 --> 0:11:48,826
然后当用户

314
00:11:51,516 --> 0:11:58,036
[ 音乐 ]

315
00:11:58,536 --> 0:11:59,366
现在 使用播放控制按键

316
00:11:59,366 --> 0:12:01,536
我可以暂停播放

317
00:11:59,366 --> 0:12:01,536
我可以暂停播放

318
00:12:01,886 --> 0:12:03,136
可以跳至下一首

319
00:12:05,516 --> 0:12:09,186
[ 音乐 ]

320
00:12:09,686 --> 0:12:16,606
甚至可以回到那一首

321
00:12:18,166 --> 0:12:21,076
现在 MusicKit JS 提供了

322
00:12:21,076 --> 0:12:22,256
用声明式标记语言的解决办法

323
00:12:22,256 --> 0:12:24,086
它也提供了

324
00:12:24,086 --> 0:12:26,306
完整的 JavaScript API

325
00:12:26,306 --> 0:12:28,406
所以我想请 DJ 回到台上

326
00:12:29,046 --> 0:12:30,306
来和你们讲讲 JavaScript API

327
00:12:30,736 --> 0:12:30,996
谢谢大家

328
00:12:32,516 --> 0:12:38,236
[ 掌声 ]

329
00:12:38,736 --> 0:12:39,556
&gt;&gt; 谢谢你 Jae

330
00:12:40,156 --> 0:12:43,686
用声明式标记语言来实现基础功能

331
00:12:43,686 --> 0:12:46,646
是一种非常直接的方式

332
00:12:47,436 --> 0:12:48,326
让我们再来谈谈更加

333
00:12:48,326 --> 0:12:49,246
高级的用法

334
00:12:49,246 --> 0:12:50,836
让我们来写一些 JavaScript

335
00:12:50,836 --> 0:12:52,016
来与 MusicKit 交互

336
00:12:52,016 --> 0:12:53,646
现在我们先

337
00:12:53,646 --> 0:12:54,496
来看几个例子

338
00:12:55,746 --> 0:12:58,626
用 ID 可以从目录获取到元数据

339
00:12:59,156 --> 0:13:03,206
我们可以在 Apple Music 目录内

340
00:12:59,156 --> 0:13:03,206
我们可以在 Apple Music 目录内

341
00:13:03,206 --> 0:13:04,156
搜索内容

342
00:13:04,796 --> 0:13:08,276
我们可以为已登录的用户

343
00:13:08,276 --> 0:13:09,876
浏览 iCloud 音乐资料库

344
00:13:10,306 --> 0:13:12,856
搜索也可以在资料库范围内进行

345
00:13:13,286 --> 0:13:16,196
我们可以直接设置和控制

346
00:13:16,196 --> 0:13:17,206
歌曲队列

347
00:13:17,266 --> 0:13:20,576
而且我们可以响应播放事件

348
00:13:20,576 --> 0:13:25,936
相应地绘制 UI

349
00:13:26,146 --> 0:13:28,876
那么 我们来看一些代码

350
00:13:28,876 --> 0:13:29,836
首先 我们会用

351
00:13:29,836 --> 0:13:33,366
MusicKit.getInstant 方法

352
00:13:33,506 --> 0:13:34,776
MusicKit 是单件模式

353
00:13:34,776 --> 0:13:35,986
因为你同时只能播放一首歌曲

354
00:13:35,986 --> 0:13:37,886
所以我们把

355
00:13:37,886 --> 0:13:39,026
这个赋值给 music 变量

356
00:13:39,026 --> 0:13:40,896
然后会在剩下所有例子里

357
00:13:40,896 --> 0:13:42,246
都使用 music 来代替

358
00:13:42,756 --> 0:13:46,486
你可以用 ID 来查找一首歌

359
00:13:47,376 --> 0:13:49,406
api.song 方法拿到这个 ID

360
00:13:49,406 --> 0:13:50,866
然后你需要提供一个回调

361
00:13:50,866 --> 0:13:52,006
这就是一个 promise

362
00:13:52,406 --> 0:13:53,516
你会看到这个 promise 模型

363
00:13:53,516 --> 0:13:54,476
贯穿了 MusicKit

364
00:13:54,996 --> 0:13:58,086
然后会返回给你一个内容对象

365
00:13:58,086 --> 0:13:59,486
该内容对象

366
00:13:59,486 --> 0:14:00,756
向你展示那首歌曲的属性

367
00:13:59,486 --> 0:14:00,756
向你展示那首歌曲的属性

368
00:14:00,756 --> 0:14:02,906
以及任何相关信息

369
00:14:03,216 --> 0:14:05,826
例如艺术家和专辑

370
00:14:06,116 --> 0:14:10,806
就像 Betim 之前提到过的

371
00:14:10,806 --> 0:14:11,806
如果你没有内容 ID

372
00:14:11,806 --> 0:14:13,716
使用 ISRC 查询筛选器

373
00:14:14,216 --> 0:14:16,936
你也能完成同样的查找

374
00:14:17,766 --> 0:14:19,056
返回的对象与之前的例子

375
00:14:19,376 --> 0:14:20,926
是一模一样的

376
00:14:24,596 --> 0:14:27,176
如果你想要用一次网络请求

377
00:14:27,586 --> 0:14:29,766
返回一组歌曲对象

378
00:14:29,766 --> 0:14:30,896
我们有一个批处理 API

379
00:14:30,896 --> 0:14:33,156
对于专辑和播放列表也

380
00:14:33,156 --> 0:14:35,000
同样生效

381
00:14:39,756 --> 0:14:41,146
我们可以让用户从他们的

382
00:14:41,146 --> 0:14:43,156
iCloud 音乐资料库选择播放内容

383
00:14:44,436 --> 0:14:46,246
因此 这些 API 是在资料库

384
00:14:46,246 --> 0:14:47,306
范围内运行的

385
00:14:47,976 --> 0:14:49,506
你可以得到歌曲列表

386
00:14:49,876 --> 0:14:51,166
专辑和播放列表

387
00:14:52,356 --> 0:14:54,206
这些 API 都是分页的

388
00:14:54,206 --> 0:14:56,346
所以你可以像常见做法那样

389
00:14:56,466 --> 0:14:57,846
仅获取一个子集

390
00:14:57,846 --> 0:15:00,066
然后你可以在用户翻页

391
00:14:57,846 --> 0:15:00,066
然后你可以在用户翻页

392
00:15:00,066 --> 0:15:02,296
或者滑动的时候加载更多

393
00:15:02,816 --> 0:15:06,456
你可以搜索 Apple Music 目录

394
00:15:07,086 --> 0:15:09,306
我们先仅搜索歌曲

395
00:15:09,686 --> 0:15:11,446
然后在第二个例子中

396
00:15:11,446 --> 0:15:12,486
我们将同时搜索

397
00:15:12,486 --> 0:15:13,926
歌曲和专辑

398
00:15:14,086 --> 0:15:16,056
你也可以提供一个限制

399
00:15:16,156 --> 0:15:17,666
来规定返回结果的数量上限

400
00:15:18,176 --> 0:15:22,626
你也可以将查询指令

401
00:15:22,626 --> 0:15:24,046
限定在用户自己的

402
00:15:24,046 --> 0:15:25,286
iCloud 音乐资料库范围内

403
00:15:26,036 --> 0:15:27,576
这里我们用到的是一模一样的

404
00:15:27,576 --> 0:15:28,736
使用同样参数的搜索方法

405
00:15:28,736 --> 0:15:30,796
但是我们在资料库范围内

406
00:15:30,796 --> 0:15:32,026
进行搜索

407
00:15:35,906 --> 0:15:37,466
接下来 我们来讲授权

408
00:15:38,596 --> 0:15:39,526
我们应该在真正

409
00:15:39,526 --> 0:15:40,726
需要授权的时候处理授权问题

410
00:15:40,726 --> 0:15:42,496
也就是当播放开始

411
00:15:42,496 --> 0:15:44,096
或者当你试图获取

412
00:15:44,096 --> 0:15:45,886
当前已登录用户的

413
00:15:45,886 --> 0:15:47,516
iCloud 音乐资料库的时候

414
00:15:48,996 --> 0:15:50,486
如果你想 你也可以自行触发

415
00:15:51,156 --> 0:15:52,386
或许在用户刚来到你们网站时

416
00:15:52,386 --> 0:15:53,786
就想强制他们

417
00:15:53,786 --> 0:15:54,586
进行授权验证

418
00:15:58,256 --> 0:15:59,706
当用户按下一个按键

419
00:16:00,716 --> 0:16:01,476
你就可以开始播放了

420
00:16:01,766 --> 0:16:03,996
你可以用 setQueue 方法来做

421
00:16:04,946 --> 0:16:06,576
这里我们提供了

422
00:16:06,576 --> 0:16:07,926
一张专辑 然后 MusicKit

423
00:16:07,926 --> 0:16:10,286
将会处理获取元数据以及

424
00:16:10,286 --> 0:16:11,206
设置播放队列

425
00:16:12,346 --> 0:16:13,496
如果有个之前见过的

426
00:16:13,496 --> 0:16:15,206
内容对象 你可以

427
00:16:15,206 --> 0:16:16,526
直接传入它

428
00:16:16,526 --> 0:16:19,946
MusicKit 自己就知道该做什么了

429
00:16:19,946 --> 0:16:21,176
setQueue 返回了一个 promise

430
00:16:22,166 --> 0:16:23,276
当队列完全加载时

431
00:16:23,276 --> 0:16:24,206
你就可以开始播放了

432
00:16:24,256 --> 0:16:24,966
这里我们用 music.play

433
00:16:24,966 --> 0:16:30,996
来自动开始播放

434
00:16:31,206 --> 0:16:32,176
一旦那些歌曲开始播放

435
00:16:32,176 --> 0:16:34,616
你会想去控制它

436
00:16:34,616 --> 0:16:36,356
你可以跳到下一曲或是

437
00:16:36,356 --> 0:16:37,106
返回上一曲

438
00:16:37,146 --> 0:16:38,000
你可以暂停

439
00:16:42,406 --> 0:16:44,056
你可以在 UI 上呈现一些操作

440
00:16:44,056 --> 0:16:46,016
让用户可以快速把

441
00:16:46,016 --> 0:16:47,196
正在浏览的歌曲

442
00:16:47,196 --> 0:16:49,056
专辑或者播放列表

443
00:16:49,056 --> 0:16:50,366
添加到自己的 iCloud 音乐资料库里

444
00:16:51,236 --> 0:16:52,986
我们这里有一个 addToLibrary 方法

445
00:16:52,986 --> 0:16:58,646
你可以做一样的事

446
00:16:58,646 --> 0:17:00,216
你可以一次性完成三次调用

447
00:16:58,646 --> 0:17:00,216
你可以一次性完成三次调用

448
00:17:00,706 --> 0:17:01,886
现在我们添加上面例子中的

449
00:17:01,886 --> 0:17:03,546
相同的四个项目

450
00:17:03,846 --> 0:17:04,646
但是我们会在一次网络

451
00:17:04,646 --> 0:17:05,146
请求中完成

452
00:17:05,715 --> 0:17:11,476
接下来我们看看事件

453
00:17:11,636 --> 0:17:12,945
MusicKit 会

454
00:17:13,256 --> 0:17:14,806
触发事件来驱动 UI

455
00:17:15,185 --> 0:17:16,846
我们之所以这样做是因为

456
00:17:16,955 --> 0:17:18,445
MusicKit 为了播放完整的曲目

457
00:17:18,636 --> 0:17:20,826
需要控制音频元素

458
00:17:21,376 --> 0:17:22,606
这里我们会用

459
00:17:22,766 --> 0:17:24,656
addEventListener 

460
00:17:24,656 --> 0:17:26,016
如果你之前写过 DOM 脚本

461
00:17:26,016 --> 0:17:27,606
这对你来说会非常熟悉

462
00:17:28,856 --> 0:17:30,096
作为例子 我们会

463
00:17:30,096 --> 0:17:31,256
详细看看几个事件

464
00:17:34,756 --> 0:17:36,756
mediaItemWillChange 和

465
00:17:36,756 --> 0:17:38,536
mediaItemDidChange 事件会在

466
00:17:38,536 --> 0:17:39,766
队列中的正在播放项目变化时触发

467
00:17:39,766 --> 0:17:41,386
以及在正在播放的

468
00:17:41,386 --> 0:17:43,326
第一首切换到第二首的时候

469
00:17:44,266 --> 0:17:45,646
你可以用它来触发

470
00:17:45,646 --> 0:17:47,726
更新 UI

471
00:17:47,726 --> 0:17:48,696
显示正在播放的歌曲

472
00:17:49,186 --> 0:17:53,106
当你真正开始播放时

473
00:17:53,106 --> 0:17:54,616
playbackStateChange

474
00:17:54,686 --> 0:17:56,096
事件会被激发

475
00:17:56,266 --> 0:17:57,326
同样 这里我们有 playbackStateWillChange 

476
00:17:57,326 --> 0:17:58,686
和 playbackStateDidChange

477
00:17:59,616 --> 0:18:01,586
比如说 你能知道一首歌曲

478
00:17:59,616 --> 0:18:01,586
比如说 你能知道一首歌曲

479
00:18:01,586 --> 0:18:03,596
正在加载

480
00:18:03,596 --> 0:18:04,906
正在播放或已暂停

481
00:18:05,026 --> 0:18:06,766
然后你会恰到好处地

482
00:18:06,766 --> 0:18:07,416
更新你的 UI

483
00:18:08,406 --> 0:18:09,646
这个事件会告诉你

484
00:18:09,646 --> 0:18:11,076
之前的状态以及

485
00:18:11,076 --> 0:18:12,586
将要转变至的新状态

486
00:18:16,676 --> 0:18:18,486
当歌曲在播放时

487
00:18:18,486 --> 0:18:20,296
你会有 playbackProgressChange 事件

488
00:18:20,296 --> 0:18:23,786
这个事件把当前播放进度

489
00:18:23,786 --> 0:18:25,896
作为百分比展示

490
00:18:26,426 --> 0:18:28,166
你可以利用它来更新播放进度的 UI

491
00:18:31,576 --> 0:18:32,766
你也会需要监听

492
00:18:32,766 --> 0:18:34,326
所有媒体回放错误

493
00:18:35,206 --> 0:18:37,806
mediaPlaybackError 事件会被激发

494
00:18:39,016 --> 0:18:40,276
你可以捕捉到

495
00:18:40,276 --> 0:18:41,496
然后给用户展示

496
00:18:41,496 --> 0:18:42,466
对应的错误信息

497
00:18:42,726 --> 0:18:47,396
我想请 Jae 回到舞台

498
00:18:47,706 --> 0:18:48,676
他将接手

499
00:18:48,676 --> 0:18:50,616
我们刚刚制作好的这个播放器 

500
00:18:50,616 --> 0:18:51,466
向大家展示如何使用

501
00:18:51,466 --> 0:18:53,336
那些 JavaScript API  

502
00:18:53,726 --> 0:18:56,866
来实现搜索 Apple Music 目录

503
00:18:56,866 --> 0:18:58,936
搜索 iCLoud 音乐资料库

504
00:18:58,936 --> 0:19:00,556
我们还将运用事件

505
00:18:58,936 --> 0:19:00,556
我们还将运用事件

506
00:19:00,556 --> 0:19:02,356
来制作一个简单的进度条

507
00:19:03,536 --> 0:19:03,716
有请 Jae

508
00:19:04,526 --> 0:19:05,516
&gt;&gt; 谢谢你 DJ

509
00:19:06,516 --> 0:19:11,686
[ 掌声 ]

510
00:19:12,186 --> 0:19:13,996
如 DJ 提到的

511
00:19:13,996 --> 0:19:15,786
我们要在之前的例子的基础上

512
00:19:15,786 --> 0:19:17,186
进一步扩展

513
00:19:17,556 --> 0:19:18,446
增加播放列表搜索功能

514
00:19:19,026 --> 0:19:22,116
我在台下时

515
00:19:22,116 --> 0:19:23,736
移除了之前那个例子中

516
00:19:23,736 --> 0:19:24,716
我们做过的许多东西

517
00:19:24,716 --> 0:19:26,046
但是我保留了

518
00:19:26,046 --> 0:19:27,046
页面内的一些东西

519
00:19:27,336 --> 0:19:29,846
另外 我包含了

520
00:19:29,846 --> 0:19:31,276
一个 JavaScript 文件

521
00:19:31,276 --> 0:19:32,476
之后会往里面添加

522
00:19:32,476 --> 0:19:33,806
JavaScript 代码

523
00:19:33,806 --> 0:19:35,556
但我想再快速地过一遍 HTML 文件

524
00:19:36,976 --> 0:19:38,966
我们做的主要改变是

525
00:19:38,966 --> 0:19:40,406
添加了一个输入元素

526
00:19:40,406 --> 0:19:42,896
让用户可以搜索

527
00:19:43,226 --> 0:19:45,096
以及两个 DOM 容器

528
00:19:45,096 --> 0:19:46,546
可以让我们把搜索结果放进去

529
00:19:47,176 --> 0:19:48,656
MusicKit JS 无所谓

530
00:19:48,656 --> 0:19:50,336
你在 App 中

531
00:19:50,336 --> 0:19:51,476
使用什么库或者框架

532
00:19:51,476 --> 0:19:53,336
所以在这个例子中

533
00:19:53,336 --> 0:19:55,256
我们的 CSS

534
00:19:55,256 --> 0:19:56,566
已经在后台构建好了

535
00:19:56,896 --> 0:19:58,046
在另一个文件里

536
00:19:58,046 --> 0:19:59,036
我们也构建了一些

537
00:19:59,036 --> 0:19:59,786
template helper

538
00:20:00,706 --> 0:20:02,846
我们注意到

539
00:20:02,846 --> 0:20:04,446
标记语言在左边看起来

540
00:20:04,446 --> 0:20:05,346
有点奇怪

541
00:20:05,856 --> 0:20:06,926
有几个按钮

542
00:20:06,926 --> 0:20:09,486
随意地漂浮着

543
00:20:09,486 --> 0:20:10,826
专辑封面明显是空的

544
00:20:11,396 --> 0:20:15,106
这是因为 MusicKit JS

545
00:20:15,176 --> 0:20:16,756
假定如果你在用

546
00:20:16,756 --> 0:20:18,456
meta 标签配置

547
00:20:18,456 --> 0:20:20,066
那么你就想要启用

548
00:20:20,066 --> 0:20:20,886
声明式标记语言

549
00:20:21,246 --> 0:20:22,256
如果你没有提供

550
00:20:22,256 --> 0:20:24,156
那些配置项 它会假定

551
00:20:24,156 --> 0:20:25,776
你在运行 JavaScript

552
00:20:25,776 --> 0:20:26,756
你并不需要声明式标记

553
00:20:26,786 --> 0:20:28,856
但我们为你提供了一个 hook 使得你可以

554
00:20:28,856 --> 0:20:30,146
在 JavaScript 里重新启用声明式标记语言

555
00:20:30,616 --> 0:20:35,486
我们通过监听

556
00:20:35,486 --> 0:20:36,956
在文档中触发的 MusicKit 加载事件

557
00:20:36,956 --> 0:20:38,456
来配置 MusicKit JS

558
00:20:38,976 --> 0:20:40,646
我们可以由此知道

559
00:20:40,646 --> 0:20:42,016
MusicKit JS 已经可以使用和配置

560
00:20:42,016 --> 0:20:43,716
以及播放可以开始了

561
00:20:44,576 --> 0:20:46,926
我们可以像使用 meta 标签那样

562
00:20:46,926 --> 0:20:48,166
配置 App 名称

563
00:20:48,166 --> 0:20:49,986
但是现在有一个属性

564
00:20:49,986 --> 0:20:50,806
告诉我们说

565
00:20:50,806 --> 0:20:52,226
declarativeMarkup 可以被设置为 true

566
00:20:52,226 --> 0:20:54,756
这样 MusicKit JS

567
00:20:54,756 --> 0:20:55,916
就知道我们运行在

568
00:20:55,916 --> 0:20:57,276
一种混合模式

569
00:20:57,276 --> 0:21:00,000
我们希望启用声明式标记特性

570
00:21:05,636 --> 0:21:07,656
接下来 我要添加一个搜索处理程序

571
00:21:07,906 --> 0:21:09,566
这是纯粹的 JavaScript

572
00:21:09,686 --> 0:21:10,966
并非 MusicKit JS 特有

573
00:21:10,966 --> 0:21:12,056
但我想特别指出

574
00:21:12,056 --> 0:21:13,286
当用户在搜索框里

575
00:21:13,286 --> 0:21:15,066
按下回车键时

576
00:21:15,366 --> 0:21:16,696
就是我们需要触发

577
00:21:17,086 --> 0:21:18,506
搜索回调的时候

578
00:21:19,046 --> 0:21:23,036
我们可以通过

579
00:21:23,036 --> 0:21:24,936
使用 MusicKit 的 API 属性的

580
00:21:24,936 --> 0:21:26,496
search 方法来实现

581
00:21:27,816 --> 0:21:29,286
这样会用 Apple Music API

582
00:21:29,286 --> 0:21:30,796
来搜索 并且

583
00:21:31,026 --> 0:21:32,976
我们可以用一个配置对象

584
00:21:32,976 --> 0:21:34,736
来指定 Apple Music API

585
00:21:34,736 --> 0:21:38,516
接受的搜索变量

586
00:21:39,286 --> 0:21:40,376
所以我们可以搜索

587
00:21:40,376 --> 0:21:41,436
并将搜索范围

588
00:21:41,436 --> 0:21:43,436
限制在播放列表

589
00:21:43,436 --> 0:21:45,786
以及希望搜索结果个数限制在 8 个

590
00:21:46,856 --> 0:21:48,546
我们有我们自定义的模板

591
00:21:49,796 --> 0:21:51,356
但是我想强调这三行

592
00:21:51,356 --> 0:21:53,186
通过这三行代码

593
00:21:53,186 --> 0:21:55,966
我们告诉 MusicKit 实例

594
00:21:55,966 --> 0:21:57,256
采用用户点击的播放列表封面

595
00:21:57,256 --> 0:21:59,016
而且我们想要把

596
00:21:59,016 --> 0:22:01,016
播放队列设置为那个列表 ID

597
00:21:59,016 --> 0:22:01,016
播放队列设置为那个列表 ID

598
00:22:01,816 --> 0:22:04,026
这会返回一个 promise

599
00:22:04,026 --> 0:22:05,636
我们可以调用 music.play

600
00:22:05,636 --> 0:22:06,896
这样就会开始为用户播放了

601
00:22:07,066 --> 0:22:08,466
接下来 我们也有了

602
00:22:08,466 --> 0:22:09,256
自定义的界面

603
00:22:13,496 --> 0:22:15,196
我以 a list 为关键词进行一次搜索

604
00:22:16,126 --> 0:22:18,346
我们看到 8 项来自 Apple Music 目录的

605
00:22:18,346 --> 0:22:20,466
关于 a list 播放列表的结果

606
00:22:20,996 --> 0:22:25,946
如果同样的搜索

607
00:22:25,946 --> 0:22:27,586
可以运用到我的

608
00:22:27,586 --> 0:22:29,356
个人 iCloud 资料库就好了

609
00:22:30,336 --> 0:22:31,936
我们可以用几乎一模一样的方法

610
00:22:31,936 --> 0:22:34,996
完成以上搜索

611
00:22:34,996 --> 0:22:36,526
除了 search 方法来自

612
00:22:36,526 --> 0:22:38,196
library property 而非

613
00:22:38,196 --> 0:22:39,126
API property

614
00:22:39,756 --> 0:22:41,066
这会告知 MusicKit

615
00:22:41,066 --> 0:22:45,246
你正在查找 iCloud 资料库

616
00:22:45,246 --> 0:22:47,926
设置播放列表 同样设置结果数为 8 个

617
00:22:47,956 --> 0:22:49,806
然后 设置播放队列

618
00:22:49,806 --> 0:22:52,086
以及开始播放的代码

619
00:22:52,256 --> 0:22:53,746
跟之前完全一样

620
00:22:57,096 --> 0:22:58,956
如果我运行同一个搜索

621
00:23:00,496 --> 0:23:02,396
会看到 iCloud 音乐资料库的

622
00:23:02,396 --> 0:23:04,216
搜索结果 同时还有

623
00:23:04,216 --> 0:23:05,946
目录资料库的结果

624
00:23:06,366 --> 0:23:10,866
我可以点击

625
00:23:10,866 --> 0:23:12,896
然后我们就能播放 iCloud 资料库里的内容了

626
00:23:14,516 --> 0:23:17,736
[ 音乐 ]

627
00:23:18,236 --> 0:23:19,706
看着正在播放的界面

628
00:23:19,706 --> 0:23:21,096
或者说底部显示的

629
00:23:21,096 --> 0:23:22,616
正在播放的信息

630
00:23:22,616 --> 0:23:23,996
让我意识到

631
00:23:23,996 --> 0:23:25,256
少了一个进度指示器

632
00:23:25,256 --> 0:23:26,856
这样我无法得知正在播放的曲目

633
00:23:26,856 --> 0:23:27,806
播了多少了

634
00:23:28,346 --> 0:23:30,576
我们可以通过监听

635
00:23:30,576 --> 0:23:33,636
MusicKit JS 提供的

636
00:23:33,636 --> 0:23:35,206
playbackProgressDidChange 事件

637
00:23:35,476 --> 0:23:38,000
来添加一个进度指示器

638
00:23:42,296 --> 0:23:43,696
在这里我们给 MusicKit 实例

639
00:23:43,696 --> 0:23:45,686
添加一个 EventListener

640
00:23:45,686 --> 0:23:47,136
监听 playbackProgressDidChange

641
00:23:47,356 --> 0:23:48,636
当我们收到那个事件时

642
00:23:48,636 --> 0:23:54,526
用一个自定义的渲染程序来显示进度

643
00:23:54,646 --> 0:23:56,186
我们可以再搜索一遍 a list

644
00:23:56,716 --> 0:23:59,226
这一次 当我播放歌曲时

645
00:23:59,226 --> 0:24:01,126
能看到我们制作的进度条

646
00:23:59,226 --> 0:24:01,126
能看到我们制作的进度条

647
00:24:01,126 --> 0:24:03,000
被绘制出来

648
00:24:07,946 --> 0:24:09,076
其实还有更多可以深入讨论的

649
00:24:09,076 --> 0:24:10,996
关于 MusicKit JS 的内容

650
00:24:10,996 --> 0:24:12,556
但我想让 DJ 回到舞台上来

651
00:24:12,556 --> 0:24:13,566
为今天我们聊过的

652
00:24:13,566 --> 0:24:15,356
做一个总结

653
00:24:16,516 --> 0:24:19,776
[ 掌声 ]

654
00:24:20,276 --> 0:24:21,946
&gt;&gt; 你们现在可以为你们的网站

655
00:24:21,946 --> 0:24:23,226
带来超凡的音乐体验

656
00:24:24,416 --> 0:24:25,386
你可以使用声明式标记语言

657
00:24:25,386 --> 0:24:27,896
来快速添加简单的播放功能

658
00:24:27,896 --> 0:24:30,736
或者你可以直接使用 

659
00:24:30,736 --> 0:24:32,356
JavaScript API

660
00:24:32,356 --> 0:24:33,856
制作一个高级的 App 

661
00:24:34,466 --> 0:24:35,926
我们非常期待看到

662
00:24:35,926 --> 0:24:36,786
你们的杰作

663
00:24:37,396 --> 0:24:38,426
我们有很好的开发文档

664
00:24:38,426 --> 0:24:40,936
在本场会议结束后

665
00:24:41,416 --> 0:24:42,196
马上在 Technology Lab 3

666
00:24:42,196 --> 0:24:43,986
会有一个实验室

667
00:24:44,716 --> 0:24:45,766
可以回答你们的

668
00:24:45,766 --> 0:24:46,666
任何问题

669
00:24:47,416 --> 0:24:48,006
谢谢

670
00:24:49,508 --> 0:24:51,508
[ 掌声 ]
