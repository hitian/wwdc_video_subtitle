1
00:00:07,516 --> 0:00:17,156
[ 音乐 ]

2
00:00:17,656 --> 0:00:18,916
&gt;&gt; 大家早上好

3
00:00:19,016 --> 0:00:20,436
[ 掌声 ]

4
00:00:20,436 --> 0:00:23,206
哇 谢谢

5
00:00:24,616 --> 0:00:26,046
欢迎来到升级版的深色模式

6
00:00:26,696 --> 0:00:27,786
我是 Matt Jacobson

7
00:00:27,786 --> 0:00:29,336
我的同事 Jeff Nadeau

8
00:00:29,336 --> 0:00:30,366
一会儿也会上台来

9
00:00:30,966 --> 0:00:33,286
我们都是 Apple Cocoa 框架团队的工程师

10
00:00:34,516 --> 0:00:36,576
我今天非常激动能够

11
00:00:36,576 --> 0:00:39,076
与你们谈谈 Mojave 里

12
00:00:39,076 --> 0:00:40,086
超赞的深色模式

13
00:00:40,666 --> 0:00:45,976
你们已经

14
00:00:45,976 --> 0:00:48,326
从昨天的介绍会上

15
00:00:48,326 --> 0:00:50,266
了解了如何

16
00:00:50,266 --> 0:00:51,936
将你的 App 改为深色模式

17
00:00:52,526 --> 0:00:54,356
比如在 macOS 10.14 SDK

18
00:00:54,356 --> 0:00:55,456
上对 App 进行重建

19
00:00:55,456 --> 0:00:58,676
使用动态色彩

20
00:00:58,676 --> 0:01:00,966
来代替静态或硬编码色彩

21
00:00:58,676 --> 0:01:00,966
来代替静态或硬编码色彩

22
00:01:01,916 --> 0:01:04,796
正确使用模板图像和素材

23
00:01:05,456 --> 0:01:07,516
最重要的是

24
00:01:07,516 --> 0:01:09,876
利用 Xcode 10 的新功能

25
00:01:09,876 --> 0:01:11,966
来定义深色模式专用的

26
00:01:11,966 --> 0:01:14,216
自定义颜色和图像素材

27
00:01:15,176 --> 0:01:17,636
如果你需要再回顾一下

28
00:01:17,636 --> 0:01:18,726
这些话题 那么我十分推荐

29
00:01:18,726 --> 0:01:20,236
你之后再去

30
00:01:20,236 --> 0:01:22,026
看看昨天介绍会的视频

31
00:01:24,486 --> 0:01:27,296
只需利用那些技巧

32
00:01:27,296 --> 0:01:28,686
大多数 UI 在深色模式中

33
00:01:28,716 --> 0:01:29,266
就会看起来很棒

34
00:01:29,586 --> 0:01:31,386
其实 我们的一些系统 App

35
00:01:31,386 --> 0:01:33,326
并不需要额外的改变 这非常好

36
00:01:34,636 --> 0:01:36,016
但在某些情况下

37
00:01:36,016 --> 0:01:37,436
只凭那些技巧还不够

38
00:01:37,756 --> 0:01:38,626
这就是我们

39
00:01:38,626 --> 0:01:39,686
在这场会上要讲的内容

40
00:01:43,696 --> 0:01:46,956
今天我们将涵盖六个主要的方面

41
00:01:47,716 --> 0:01:49,806
首先是外观系统

42
00:01:50,266 --> 0:01:51,826
它是怎样运作的

43
00:01:51,826 --> 0:01:53,596
要如何在自定义视图里使用它

44
00:01:54,716 --> 0:01:57,236
第二是素材 什么是素材

45
00:01:57,236 --> 0:01:59,406
如何才能在你的 UI 里

46
00:01:59,406 --> 0:02:01,836
充分利用它

47
00:01:59,406 --> 0:02:01,836
充分利用它

48
00:02:02,006 --> 0:02:03,296
接下来的部分由 Jeff 介绍

49
00:02:03,296 --> 0:02:05,296
他将谈谈 “Vibrant Blending（动态混合）”

50
00:02:05,296 --> 0:02:06,716
这种方法很棒

51
00:02:06,716 --> 0:02:08,446
会让你的视图看起来更好

52
00:02:09,696 --> 0:02:11,576
他还会讲到用一些

53
00:02:11,576 --> 0:02:13,336
叫做背景风格的东西

54
00:02:13,446 --> 0:02:14,236
对选择做出正确的反应

55
00:02:15,526 --> 0:02:17,096
最后 他会综合起来

56
00:02:17,526 --> 0:02:19,376
说说如何

57
00:02:19,596 --> 0:02:21,036
当你在旧的 macOS 版本上

58
00:02:21,036 --> 0:02:22,916
使用你的 App 时

59
00:02:22,916 --> 0:02:25,006
仍然能支持深色模式

60
00:02:25,006 --> 0:02:26,956
还有一些小技巧和方法

61
00:02:27,026 --> 0:02:28,796
来帮你改进 App 的深色模式

62
00:02:30,346 --> 0:02:30,966
好了

63
00:02:30,966 --> 0:02:33,006
我们开始吧

64
00:02:33,146 --> 0:02:36,296
在 Mojave 中 你的 App

65
00:02:36,296 --> 0:02:39,106
无论在浅色还是深色模式都要看起来很棒

66
00:02:40,026 --> 0:02:41,626
这个时候你就要

67
00:02:41,626 --> 0:02:42,726
用到一个叫做

68
00:02:42,916 --> 0:02:44,006
NSAppearance 的东西

69
00:02:45,186 --> 0:02:47,396
NSAppearance 是整个 Cocoa 都在

70
00:02:47,596 --> 0:02:49,906
使用的主题系统

71
00:02:49,906 --> 0:02:51,966
关键是你只需要

72
00:02:51,966 --> 0:02:53,416
保持一个单一的视图层级

73
00:02:53,416 --> 0:02:55,066
NSAppearance 就会让你的 App

74
00:02:55,066 --> 0:02:57,536
在浅色和深色模式中都很好看

75
00:02:59,186 --> 0:03:01,956
好了 除了用作深色模式的核心外

76
00:02:59,186 --> 0:03:01,956
好了 除了用作深色模式的核心外

77
00:03:01,956 --> 0:03:03,976
我们已经使用

78
00:03:03,976 --> 0:03:05,426
NSAppearance 好几年了

79
00:03:05,426 --> 0:03:08,316
同时它还是一些特性的基础

80
00:03:08,316 --> 0:03:10,636
如 macOS 的高对比度模式

81
00:03:10,636 --> 0:03:12,376
以及为触控栏

82
00:03:12,616 --> 0:03:14,266
这个出色的硬件

83
00:03:14,266 --> 0:03:15,266
设计的 UI

84
00:03:16,116 --> 0:03:20,056
我们先前已经有了一个主要外观 

85
00:03:20,196 --> 0:03:21,726
为 Aqua 窗口

86
00:03:21,726 --> 0:03:23,546
准备的浅色外观

87
00:03:23,546 --> 0:03:24,226
叫做 Aqua

88
00:03:24,816 --> 0:03:26,336
当然 在 10.14 里

89
00:03:26,336 --> 0:03:27,806
我们要引入一种新的外观

90
00:03:27,806 --> 0:03:29,636
用于深色模式下的 Aqua 窗口

91
00:03:30,166 --> 0:03:30,966
叫做 darkAqua

92
00:03:32,346 --> 0:03:33,916
这些对象包括所有

93
00:03:33,916 --> 0:03:35,556
视图绘制所需的素材

94
00:03:36,336 --> 0:03:38,036
因此 只要你使用

95
00:03:38,036 --> 0:03:39,886
系统动态色彩

96
00:03:39,886 --> 0:03:42,226
标准效果 或已命名的图像

97
00:03:42,226 --> 0:03:43,606
甚至只是标准的 Cocoa 控件

98
00:03:43,786 --> 0:03:45,746
这些对象都会为你提供素材

99
00:03:46,166 --> 0:03:49,436
只要你关联了 macOS 10.14 SDK

100
00:03:49,436 --> 0:03:51,486
AppKit 就会自动地

101
00:03:51,486 --> 0:03:53,646
基于系统偏好设置里

102
00:03:53,646 --> 0:03:55,136
用户对浅色或深色的选择

103
00:03:55,136 --> 0:03:56,796
为你所有的视图和窗口

104
00:03:56,796 --> 0:03:59,326
提供相应外观

105
00:04:00,046 --> 0:04:02,056
这是我们可爱的

106
00:04:02,356 --> 0:04:03,786
《Chameleon Wrangler》App

107
00:04:03,896 --> 0:04:06,916
是 Rachel 和 Taylor 

108
00:04:06,916 --> 0:04:08,646
在之前的介绍会中创建的

109
00:04:08,776 --> 0:04:10,096
你可以看到 如果我们将它与 macOS 10.14 

110
00:04:10,096 --> 0:04:13,046
SDK 关联  AppKit 就会开始运行

111
00:04:13,106 --> 0:04:14,506
并自动给它设置

112
00:04:14,506 --> 0:04:15,526
darkAqua 外观

113
00:04:16,676 --> 0:04:18,196
这样很好 但如果

114
00:04:18,196 --> 0:04:20,005
我们想要改变外观呢

115
00:04:20,296 --> 0:04:22,106
比如说 我们想要改变

116
00:04:22,676 --> 0:04:25,986
这个笔记的视图

117
00:04:26,736 --> 0:04:29,136
在深色的外观下

118
00:04:29,136 --> 0:04:30,946
我们也许想要让

119
00:04:30,946 --> 0:04:32,636
笔记的视图仍然是浅色的

120
00:04:33,856 --> 0:04:37,146
这时 你就可以利用

121
00:04:37,146 --> 0:04:38,786
NSAppearanceCustomization

122
00:04:39,626 --> 0:04:41,026
这是一个协议

123
00:04:41,026 --> 0:04:42,386
但它不是那种需要

124
00:04:42,386 --> 0:04:44,376
你在 App 中应用的协议

125
00:04:45,266 --> 0:04:47,486
它已在 NSView 和 NSWindow 中应用了

126
00:04:47,786 --> 0:04:50,226
在 Mojave 中

127
00:04:50,226 --> 0:04:52,116
NSApplication 也会遵循这个协议

128
00:04:53,086 --> 0:04:54,556
它是个相当简单的协议

129
00:04:54,706 --> 0:04:55,956
只添加了两项属性

130
00:04:56,466 --> 0:04:58,946
第一是 appearance

131
00:04:58,946 --> 0:05:00,336
这里你可以重写

132
00:04:58,946 --> 0:05:00,336
这里你可以重写

133
00:05:00,336 --> 0:05:02,386
一个特定对象的外观

134
00:05:03,346 --> 0:05:05,066
它是一个可选择的 NSAppearance

135
00:05:05,116 --> 0:05:07,696
因为如果你将它的参数

136
00:05:07,696 --> 0:05:09,216
设置为 “nil” 那么

137
00:05:09,216 --> 0:05:10,716
该对象只会继承

138
00:05:10,916 --> 0:05:11,886
父对象的外观

139
00:05:13,496 --> 0:05:15,346
第二个是 effectiveAppearance

140
00:05:15,346 --> 0:05:17,356
这是一个

141
00:05:17,476 --> 0:05:19,456
只读属性

142
00:05:19,456 --> 0:05:21,806
你可以用它来找到一个视图

143
00:05:22,006 --> 0:05:22,976
会用什么外观来绘制

144
00:05:23,516 --> 0:05:26,986
当然 要利用这个

145
00:05:26,986 --> 0:05:28,346
你得有个正确的

146
00:05:28,346 --> 0:05:30,086
NSAppearance 对象

147
00:05:30,086 --> 0:05:32,216
你可以用 NSAppearance 中的

148
00:05:32,216 --> 0:05:34,456
named: 初始化语句来轻松完成

149
00:05:34,896 --> 0:05:38,416
根据你想要的外观

150
00:05:38,416 --> 0:05:40,166
只要传入“.aqua”或“.darkAqua” 

151
00:05:41,576 --> 0:05:42,996
你就能继续

152
00:05:42,996 --> 0:05:44,396
将其指定为

153
00:05:44,396 --> 0:05:45,886
所要定制的对象的

154
00:05:45,886 --> 0:05:46,936
外观属性

155
00:05:47,106 --> 0:05:49,046
在这个例子中

156
00:05:49,136 --> 0:05:51,466
我们将指定 Aqua 外观

157
00:05:51,466 --> 0:05:52,826
给 textView 的外观属性

158
00:05:52,826 --> 0:05:54,996
现在 它就变成浅色外观了

159
00:05:54,996 --> 0:05:59,836
好的 这个很简单 所以

160
00:05:59,836 --> 0:06:00,986
我们来看下一种情况

161
00:05:59,836 --> 0:06:00,986
我们来看下一种情况

162
00:06:02,186 --> 0:06:04,626
你可能会有一个窗口

163
00:06:04,836 --> 0:06:06,076
像这样悬浮在某个

164
00:06:06,076 --> 0:06:07,026
特定视图下

165
00:06:07,936 --> 0:06:09,306
你可能想要

166
00:06:09,306 --> 0:06:11,236
将它的外观与其所在的视图

167
00:06:11,236 --> 0:06:12,016
保持一致

168
00:06:12,886 --> 0:06:15,196
那么 我们可以直接指定

169
00:06:15,196 --> 0:06:16,446
Aqua 外观给这个窗口

170
00:06:16,476 --> 0:06:17,756
就像刚刚那样

171
00:06:18,766 --> 0:06:20,316
但是 我们真正想要的

172
00:06:20,616 --> 0:06:21,636
不仅如此

173
00:06:21,636 --> 0:06:23,196
我们想要它

174
00:06:23,196 --> 0:06:26,576
继承视图中的外观 我们

175
00:06:26,576 --> 0:06:28,716
就可以这样做 首先 AppKit

176
00:06:28,716 --> 0:06:30,316
会自动地在一些常用窗口中

177
00:06:30,316 --> 0:06:31,696
继承视图的外观

178
00:06:31,696 --> 0:06:34,586
如菜单 弹出框

179
00:06:34,626 --> 0:06:36,546
工具提示和工作表 

180
00:06:36,546 --> 0:06:38,156
因此你不需要担心这些窗口

181
00:06:39,286 --> 0:06:40,966
但是 对于这样的自定义窗口

182
00:06:41,476 --> 0:06:43,266
在 Mojave 中有一个新的 API

183
00:06:43,266 --> 0:06:45,436
可以供你使用

184
00:06:46,746 --> 0:06:48,256
叫做 appearanceSource 

185
00:06:49,486 --> 0:06:51,746
这是一种

186
00:06:51,746 --> 0:06:54,446
能使任何对象都遵循

187
00:06:54,446 --> 0:06:55,976
NSAppearanceCustomization 协议的属性

188
00:06:55,976 --> 0:06:57,386
包括视图和窗口

189
00:06:57,386 --> 0:07:00,506
你只要为其指定

190
00:06:57,386 --> 0:07:00,506
你只要为其指定

191
00:07:00,506 --> 0:07:03,926
appearanceSource 属性

192
00:07:04,496 --> 0:07:06,176
该窗口就会从该对象中

193
00:07:06,176 --> 0:07:07,526
继承视图的外观

194
00:07:08,146 --> 0:07:11,516
那么 在这里 我们将 testView

195
00:07:11,516 --> 0:07:12,636
指定到该子窗口的

196
00:07:12,636 --> 0:07:14,926
appearanceSource 属性

197
00:07:14,926 --> 0:07:16,816
这样一来

198
00:07:16,816 --> 0:07:18,186
textView 的外观就会

199
00:07:18,186 --> 0:07:20,746
一直继承该视图的外观

200
00:07:22,476 --> 0:07:24,826
其实 你可以将外观系统

201
00:07:24,826 --> 0:07:27,316
想象成一种层级结构

202
00:07:27,986 --> 0:07:29,666
与你可能比较熟悉的

203
00:07:29,706 --> 0:07:30,926
视图层级类似

204
00:07:31,016 --> 0:07:32,726
但要将其扩展到窗口

205
00:07:32,726 --> 0:07:33,756
以及 App

206
00:07:34,896 --> 0:07:37,196
当我们要求 AppKit 给出一个

207
00:07:37,196 --> 0:07:38,686
视图的有效外观时

208
00:07:39,916 --> 0:07:41,806
AppKit 就会沿着这个

209
00:07:41,806 --> 0:07:43,646
层级结构走下去

210
00:07:43,646 --> 0:07:45,116
直到找到一个

211
00:07:45,116 --> 0:07:47,486
有具体外观的对象

212
00:07:47,486 --> 0:07:48,546
那便是我们使用的外观

213
00:07:49,096 --> 0:07:53,326
好 现在 我们知道了对象如何

214
00:07:53,376 --> 0:07:54,406
获得外观 以及外观系统

215
00:07:54,406 --> 0:07:55,876
是如何运作的

216
00:07:55,876 --> 0:07:57,156
下面我们就来谈谈如何在你的

217
00:07:57,156 --> 0:07:58,676
自定义视图和控件中使用它

218
00:07:59,156 --> 0:08:00,876
举个例子

219
00:07:59,156 --> 0:08:00,876
举个例子

220
00:08:00,876 --> 0:08:02,736
如果我想要让这个

221
00:08:02,736 --> 0:08:04,956
自定标头视图

222
00:08:04,956 --> 0:08:07,176
在浅色和深色的外观下 

223
00:08:07,176 --> 0:08:07,956
使用不同的颜色

224
00:08:09,246 --> 0:08:11,136
现在 我们已经知道在 Xcode 10 里

225
00:08:11,426 --> 0:08:13,366
我可以进入素材目录编辑器

226
00:08:13,366 --> 0:08:15,656
为浅色或暗色主题

227
00:08:15,656 --> 0:08:17,566
设置特定的色彩素材

228
00:08:18,266 --> 0:08:21,676
但怎样在我的自定视图中使用它呢

229
00:08:22,886 --> 0:08:24,866
好 下面我要演示的这个方法

230
00:08:24,866 --> 0:08:26,916
看起来很靠谱 但其实行不通 

231
00:08:26,916 --> 0:08:27,486
我会告诉你为什么

232
00:08:28,516 --> 0:08:30,156
首先 我们将给我们的视图

233
00:08:30,156 --> 0:08:31,196
添加一个 NSColor 属性

234
00:08:32,535 --> 0:08:34,916
初始化状态下 我们将用该颜色

235
00:08:34,916 --> 0:08:37,736
填充我们的图层

236
00:08:38,216 --> 0:08:41,606
而如果颜色改变了

237
00:08:41,606 --> 0:08:43,316
我们也将开始更新相应的图层

238
00:08:44,646 --> 0:08:45,546
让我们来试试

239
00:08:46,936 --> 0:08:48,356
好 在浅色模式下看起来很好

240
00:08:48,356 --> 0:08:51,666
但是如果我们转为暗的状态

241
00:08:51,666 --> 0:08:52,726
就能看到我们的颜色其实

242
00:08:52,726 --> 0:08:53,786
并没有改变

243
00:08:55,016 --> 0:08:56,316
这是因为即使

244
00:08:56,316 --> 0:08:59,016
我们的 NSColor 是动态的

245
00:08:59,016 --> 0:09:00,906
所得到的 cgColor 也是静态的

246
00:08:59,016 --> 0:09:00,906
所得到的 cgColor 也是静态的

247
00:09:00,906 --> 0:09:02,816
它不会随外观而改变

248
00:09:03,806 --> 0:09:05,666
因为我们在初始化程序段中

249
00:09:05,666 --> 0:09:08,076
已经设置了图层

250
00:09:08,076 --> 0:09:09,206
那么在外观改变时 

251
00:09:09,206 --> 0:09:11,396
我们无法运行任何代码

252
00:09:11,946 --> 0:09:14,616
重点就是

253
00:09:14,616 --> 0:09:15,686
要把你随外观改变的内容

254
00:09:15,846 --> 0:09:19,086
放到特定的区域

255
00:09:19,666 --> 0:09:21,576
具体来说 就是使用 NSView 中的

256
00:09:21,576 --> 0:09:23,936
updateConstraints() layout() draw() 

257
00:09:23,986 --> 0:09:26,336
以及 updateLayer() 方法

258
00:09:27,616 --> 0:09:29,406
这样的话 当外观改变时

259
00:09:29,486 --> 0:09:30,956
如有需要 AppKit 就会自动

260
00:09:31,196 --> 0:09:32,446
调用这些方法

261
00:09:32,996 --> 0:09:34,246
如果你需要手动地

262
00:09:34,246 --> 0:09:36,586
触发它们 你当然可以一直使用

263
00:09:36,966 --> 0:09:38,296
needsUpdateConstraints

264
00:09:38,596 --> 0:09:39,926
needsLayout

265
00:09:39,926 --> 0:09:42,026
和 needsDisplay 这些属性

266
00:09:42,026 --> 0:09:45,806
AppKit 会自动调用它们

267
00:09:46,146 --> 0:09:47,296
好 现在回到我们的例子

268
00:09:48,616 --> 0:09:50,196
与其重写 init

269
00:09:50,856 --> 0:09:53,666
我们可以执行 updateLayer()

270
00:09:53,666 --> 0:09:56,726
接着 就可以放心地通过

271
00:09:57,056 --> 0:09:59,346
向我们的 NSColor 请求一个 cgColor

272
00:09:59,346 --> 0:10:00,796
来填充我们的图层

273
00:09:59,346 --> 0:10:00,796
来填充我们的图层

274
00:10:01,836 --> 0:10:03,436
如果只有颜色变了

275
00:10:03,606 --> 0:10:05,356
而那里的图层却没有更新

276
00:10:05,356 --> 0:10:07,306
我们就只需要将

277
00:10:07,386 --> 0:10:08,946
needsDisplay 属性设置为真

278
00:10:09,426 --> 0:10:12,446
AppKit 会自动回来并调用

279
00:10:12,446 --> 0:10:12,906
updateLayer()

280
00:10:14,336 --> 0:10:15,076
好 现在再看

281
00:10:16,536 --> 0:10:17,426
在浅色的状态仍然看起来很好

282
00:10:17,426 --> 0:10:21,496
现在 在深色的状态下

283
00:10:21,496 --> 0:10:22,896
它的颜色正如我们所愿

284
00:10:22,896 --> 0:10:24,706
效果很棒

285
00:10:25,976 --> 0:10:27,216
好 如果我们想

286
00:10:27,216 --> 0:10:28,146
做一些更复杂的东西怎么办

287
00:10:28,146 --> 0:10:29,826
如果仅仅用

288
00:10:29,826 --> 0:10:31,486
动态色彩或者图像

289
00:10:31,706 --> 0:10:32,576
可能不太容易表达

290
00:10:33,656 --> 0:10:35,796
例如 也许我想要

291
00:10:35,796 --> 0:10:38,546
在 Chloe 美丽的脸庞后

292
00:10:38,936 --> 0:10:40,416
加点这种白色的光晕

293
00:10:40,416 --> 0:10:43,796
但只是在深色模式下我会怎么做呢

294
00:10:44,806 --> 0:10:46,476
好 这种情况下

295
00:10:46,476 --> 0:10:49,166
我们在 Mojave 中会有新的 API

296
00:10:49,166 --> 0:10:50,876
你可以用它来与你的

297
00:10:50,876 --> 0:10:51,686
视图外观相比对

298
00:10:51,786 --> 0:10:52,686
我来示范一下

299
00:10:53,856 --> 0:10:56,676
在这个视图下

300
00:10:56,676 --> 0:10:58,846
我会重写 layout() 方法 并开启

301
00:10:58,846 --> 0:11:00,916
effectiveAppearance.bestMatch(from:)

302
00:10:58,846 --> 0:11:00,916
effectiveAppearance.bestMatch(from:)

303
00:11:01,356 --> 0:11:05,286
我会通过一个数组

304
00:11:05,286 --> 0:11:06,796
该数组有我的视图

305
00:11:06,796 --> 0:11:08,916
所知道的全部外观的名字

306
00:11:08,976 --> 0:11:11,276
在这里是 Aqua 和 darkAqua

307
00:11:11,806 --> 0:11:14,326
接着就只需要 

308
00:11:14,666 --> 0:11:17,416
给这些外观一一执行动作了

309
00:11:17,716 --> 0:11:19,366
那么 对于 Aqua 外观

310
00:11:19,676 --> 0:11:21,616
我会只把我含有 Chole 大头照的

311
00:11:21,616 --> 0:11:23,856
imageView 作为一个子视图

312
00:11:24,456 --> 0:11:27,856
而对于 darkAqua 外观 我不仅

313
00:11:27,856 --> 0:11:28,786
要用 imageView

314
00:11:28,786 --> 0:11:31,606
还要在后面加上 glowView

315
00:11:33,736 --> 0:11:35,766
最后 我会执行一个默认 case

316
00:11:35,766 --> 0:11:38,146
这是为了我的视图

317
00:11:38,146 --> 0:11:40,266
所不了解的默认外观而设

318
00:11:40,266 --> 0:11:43,006
包括将来 Apple

319
00:11:43,006 --> 0:11:44,436
可能发布的外观

320
00:11:45,076 --> 0:11:47,536
好的 让我们看看现在

321
00:11:47,536 --> 0:11:48,236
看起来怎么样

322
00:11:48,636 --> 0:11:50,696
现在 是浅色的外观下

323
00:11:50,696 --> 0:11:52,106
没有光晕 是我们想要的

324
00:11:52,836 --> 0:11:54,696
切换到深色外观

325
00:11:54,696 --> 0:11:55,006
就有光晕了

326
00:11:55,276 --> 0:11:56,266
很好 好的

327
00:11:58,116 --> 0:11:59,596
下面让我们谈谈

328
00:11:59,596 --> 0:12:00,746
高对比度

329
00:11:59,596 --> 0:12:00,746
高对比度

330
00:12:01,606 --> 0:12:02,716
我之前说过

331
00:12:02,746 --> 0:12:05,256
我们已经将 NSAppearance

332
00:12:05,256 --> 0:12:07,596
用作 macOS 的高对比度模式了

333
00:12:08,176 --> 0:12:10,056
为了支持深色模式

334
00:12:10,106 --> 0:12:11,196
所做的一切

335
00:12:11,196 --> 0:12:12,586
带来的好处之一就是

336
00:12:12,586 --> 0:12:14,416
让支持高对比度

337
00:12:14,416 --> 0:12:19,546
变得十分容易

338
00:12:19,756 --> 0:12:21,636
提醒一下 高对比度是

339
00:12:21,636 --> 0:12:23,356
通过勾选系统偏好设置里的

340
00:12:23,486 --> 0:12:25,496
“提高对比度”复选框来实现的

341
00:12:26,056 --> 0:12:29,586
在这种模式下 色彩改变了 

342
00:12:29,586 --> 0:12:31,346
所以控件边界

343
00:12:31,346 --> 0:12:32,946
和其他各种边界

344
00:12:32,946 --> 0:12:36,366
都更容易看到

345
00:12:36,856 --> 0:12:38,696
现在 这种模式下 

346
00:12:38,786 --> 0:12:41,286
AppKit 会自动将 Aqua

347
00:12:41,286 --> 0:12:43,036
和 darkAqua 外观替换为

348
00:12:43,236 --> 0:12:44,656
高对比度外观

349
00:12:45,186 --> 0:12:46,576
而这些高对比度外观

350
00:12:46,576 --> 0:12:48,296
继承了他们的

351
00:12:48,296 --> 0:12:50,326
正常对比度的版本

352
00:12:50,836 --> 0:12:53,236
那么 这就意味着

353
00:12:53,236 --> 0:12:54,706
你所编写的任何利用

354
00:12:54,706 --> 0:12:56,366
深色模式的代码

355
00:12:56,396 --> 0:12:58,226
都会自动适用于

356
00:12:58,276 --> 0:12:58,456
高对比度的深色模式

357
00:13:00,056 --> 0:13:01,676
但你还可以更进一步

358
00:13:02,606 --> 0:13:04,496
在 Xcode 10 中

359
00:13:04,616 --> 0:13:06,216
如果你在素材目录编辑器中选中

360
00:13:06,216 --> 0:13:08,576
这个 “High Contrast（高对比度）”复选框

361
00:13:08,576 --> 0:13:10,876
你可以特别为该外观的

362
00:13:10,876 --> 0:13:13,136
高对比度版本

363
00:13:13,296 --> 0:13:16,486
指定颜色和图像素材

364
00:13:17,076 --> 0:13:20,166
你也可以在代码中使用

365
00:13:20,166 --> 0:13:21,656
那些外观的名字

366
00:13:21,656 --> 0:13:24,676
你也许会忍不住想

367
00:13:24,736 --> 0:13:26,286
唔 很好 我只要把它们传入

368
00:13:26,286 --> 0:13:27,716
NSAppearance 主题就好了

369
00:13:27,716 --> 0:13:29,156
然后我会获得 NSAppearance 对象

370
00:13:29,156 --> 0:13:31,836
再继续做点什么 但这行不通

371
00:13:32,876 --> 0:13:34,036
那些外观

372
00:13:34,036 --> 0:13:35,706
只在系统偏好设置中可用

373
00:13:36,396 --> 0:13:39,236
而你能做的是把它们

374
00:13:39,236 --> 0:13:41,296
传给 bestMatch(from:)

375
00:13:41,296 --> 0:13:42,846
像之前我们在深色模式做的那样

376
00:13:42,846 --> 0:13:45,246
执行自定义编程行为

377
00:13:48,166 --> 0:13:50,476
好的 我们再来说说子图层

378
00:13:51,256 --> 0:13:52,316
我知道你们许多人

379
00:13:52,506 --> 0:13:56,736
都有管理着子图层的视图

380
00:13:56,736 --> 0:13:58,146
我们要注意 关于深色模式的

381
00:13:58,656 --> 0:13:59,866
一些很重要的东西

382
00:14:01,236 --> 0:14:03,316
首先 你需要知道

383
00:14:03,566 --> 0:14:05,466
自定义子图层不会

384
00:14:05,716 --> 0:14:07,936
自动继承你的视图的外观

385
00:14:08,586 --> 0:14:12,456
现在 最简单的修补方法

386
00:14:12,536 --> 0:14:13,656
就是将他们从子图层

387
00:14:13,726 --> 0:14:15,476
转换为子视图

388
00:14:15,626 --> 0:14:17,606
如果这么做了 那么 AppKit 就会

389
00:14:17,606 --> 0:14:19,056
自动处理

390
00:14:19,226 --> 0:14:22,096
那些视图的外观继承

391
00:14:22,096 --> 0:14:23,826
就像其他视图一样

392
00:14:25,226 --> 0:14:27,186
否则 你就必须

393
00:14:27,186 --> 0:14:29,136
手动管理那些图层

394
00:14:29,136 --> 0:14:30,266
用几种我下面提到的技巧

395
00:14:30,266 --> 0:14:33,686
viewDidChangeEffectiveAppearance()

396
00:14:33,686 --> 0:14:35,076
以及代表当前外观的

397
00:14:35,076 --> 0:14:35,576
NSAppearance.current

398
00:14:36,146 --> 0:14:39,856
好 先是 viewDidChange

399
00:14:39,856 --> 0:14:40,996
EffectiveAppearance()

400
00:14:41,416 --> 0:14:43,886
这是一种 NSView 中的新方法

401
00:14:44,186 --> 0:14:47,226
你可以进行重写来发现

402
00:14:47,226 --> 0:14:48,896
视图的有效外观

403
00:14:48,896 --> 0:14:49,746
什么时候发生改变

404
00:14:51,166 --> 0:14:52,246
这是执行所有

405
00:14:52,326 --> 0:14:53,906
可能需要的

406
00:14:53,906 --> 0:14:56,276
自定义禁用或释放

407
00:14:56,276 --> 0:14:57,826
任何不再相关的缓存的好时机

408
00:14:58,636 --> 0:15:00,246
但是记住 你不需要

409
00:14:58,636 --> 0:15:00,246
但是记住 你不需要

410
00:15:00,246 --> 0:15:02,136
使这里的视图本身失效

411
00:15:02,576 --> 0:15:04,546
AppKit 会自动为你完成这点

412
00:15:07,236 --> 0:15:09,726
第二点 “当前外观”的概念

413
00:15:10,536 --> 0:15:12,796
现在 这是一个线程局部变量

414
00:15:12,796 --> 0:15:14,766
你可以通过一个 

415
00:15:14,796 --> 0:15:16,976
NSAppearance 上的类属性来访问

416
00:15:17,536 --> 0:15:20,196
如果你比较熟悉

417
00:15:20,196 --> 0:15:21,576
如 NSGraphicsContext.current

418
00:15:21,576 --> 0:15:22,836
或 NSProgress.current 这样的概念

419
00:15:22,836 --> 0:15:24,516
你就已经明白了

420
00:15:24,516 --> 0:15:25,516
我在说什么

421
00:15:25,976 --> 0:15:27,836
如果你不熟悉 只要记住

422
00:15:27,956 --> 0:15:29,416
这是用作解决

423
00:15:29,416 --> 0:15:32,326
动态色彩和图片的外观

424
00:15:34,076 --> 0:15:35,856
AppKit 会在我们调用那些

425
00:15:35,856 --> 0:15:37,386
我们之前所说的

426
00:15:37,386 --> 0:15:39,146
特殊的 NSView 方法之前

427
00:15:39,146 --> 0:15:40,866
自动为你

428
00:15:40,866 --> 0:15:41,806
建立当前外观

429
00:15:41,986 --> 0:15:44,286
如 updateConstraints() layout() draw()

430
00:15:44,286 --> 0:15:47,116
以及 updateLayer() 方法 但你也可以

431
00:15:47,166 --> 0:15:49,076
在必要时

432
00:15:49,076 --> 0:15:50,656
自己进行建立

433
00:15:50,656 --> 0:15:51,796
那我们来看一个例子

434
00:15:51,796 --> 0:15:52,046
说明你为什么可能这样做

435
00:15:55,396 --> 0:15:57,146
好 这是一个包括了

436
00:15:57,146 --> 0:15:58,576
一些子图层的自定义视图

437
00:16:00,416 --> 0:16:02,066
我会重写这个新的 

438
00:16:02,266 --> 0:16:03,206
viewDidChange

439
00:16:03,206 --> 0:16:05,966
EffectiveAppearance() 方法

440
00:16:05,966 --> 0:16:07,416
再给我的子图层设置

441
00:16:07,416 --> 0:16:08,176
NeedsDisplay()

442
00:16:08,986 --> 0:16:10,626
而如果我没有进行这些设置

443
00:16:10,626 --> 0:16:12,586
我的子图层不会随着

444
00:16:12,586 --> 0:16:14,066
视图的有效外观的变化而更新

445
00:16:14,156 --> 0:16:15,106
它只会保持原样

446
00:16:15,136 --> 0:16:19,096
接着在我的图层委托子程序里

447
00:16:19,096 --> 0:16:21,106
我会保存当前外观

448
00:16:21,106 --> 0:16:22,996
以备之后使用

449
00:16:22,996 --> 0:16:24,546
接着我会继续

450
00:16:24,546 --> 0:16:26,286
把我的当前外观

451
00:16:26,336 --> 0:16:27,376
设置成 effectiveAppearance

452
00:16:27,906 --> 0:16:31,706
然后我就可以继续更新我的图层了

453
00:16:32,316 --> 0:16:34,306
这时 如果我之前没有

454
00:16:34,306 --> 0:16:36,316
设置当前外观

455
00:16:36,316 --> 0:16:38,016
那这个代码就不会使用

456
00:16:38,016 --> 0:16:39,456
我视图的外观 那样看起来

457
00:16:39,456 --> 0:16:40,346
就不对了

458
00:16:41,556 --> 0:16:42,956
最后 到这一步 我只要

459
00:16:42,956 --> 0:16:45,136
还原先前的当前外观

460
00:16:48,726 --> 0:16:49,826
如果你在管理图层的话

461
00:16:49,826 --> 0:16:51,676
这里还需要注意一点

462
00:16:52,686 --> 0:16:54,036
你或许已经有一些

463
00:16:54,256 --> 0:16:55,696
看起来像之前两个例子之一

464
00:16:56,296 --> 0:16:57,506
要么你要将

465
00:16:57,506 --> 0:16:59,306
一个图层的内容设置为

466
00:16:59,306 --> 0:17:01,896
某个 NSImage 要么你就要使用

467
00:16:59,306 --> 0:17:01,896
某个 NSImage 要么你就要使用

468
00:17:01,896 --> 0:17:04,226
layerContents(forContentsScale:) API

469
00:17:04,226 --> 0:17:06,636
来用某个图像为你的图层

470
00:17:06,715 --> 0:17:08,246
创建一个 layer.contents

471
00:17:09,876 --> 0:17:11,276
如果你有这样的代码

472
00:17:11,276 --> 0:17:12,726
你要知道图像不会

473
00:17:12,726 --> 0:17:15,326
自动继承外观

474
00:17:15,856 --> 0:17:19,256
像之前一样 最好的修补方法就是

475
00:17:19,256 --> 0:17:20,286
把它切换成视图

476
00:17:20,286 --> 0:17:21,935
在这里要用 NSImageView

477
00:17:22,286 --> 0:17:23,776
NSImageView 会自动处理到

478
00:17:23,776 --> 0:17:25,266
这个细节 包括许多其他细节

479
00:17:25,266 --> 0:17:30,576
因此你最好这么做

480
00:17:30,766 --> 0:17:32,676
否则 你就要为你的图层

481
00:17:32,676 --> 0:17:35,266
从 NSImage 中

482
00:17:35,266 --> 0:17:35,786
创建一个 CGImage

483
00:17:36,466 --> 0:17:37,776
这时 你需要用

484
00:17:37,776 --> 0:17:40,166
NSImage 中的 cgImage(forProposedRect: 

485
00:17:40,786 --> 0:17:43,886
context: hints:) API

486
00:17:44,496 --> 0:17:46,056
同时 你要注意

487
00:17:46,186 --> 0:17:47,506
应该在当前外观正确的时候

488
00:17:47,776 --> 0:17:49,536
来做这件事情

489
00:17:49,776 --> 0:17:51,406
因此 最好在你的 updateLayer() 方法里

490
00:17:51,406 --> 0:17:52,486
完成这些

491
00:17:52,766 --> 0:17:55,596
好了 这就是外观

492
00:17:56,486 --> 0:17:57,856
下面我们来谈谈素材

493
00:17:57,946 --> 0:18:00,046
好 你大概已经听过

494
00:17:57,946 --> 0:18:00,046
好 你大概已经听过

495
00:18:00,466 --> 0:18:02,636
素材是现在

496
00:18:02,636 --> 0:18:04,356
Mac UI 的一个重要部分

497
00:18:04,356 --> 0:18:06,146
但你也许有过疑惑

498
00:18:06,146 --> 0:18:09,596
素材究竟是什么

499
00:18:09,596 --> 0:18:10,586
那么我就从它的定义开始

500
00:18:11,816 --> 0:18:13,436
素材是使用

501
00:18:13,496 --> 0:18:15,726
一些效果的动态背景

502
00:18:15,726 --> 0:18:18,136
比如模糊 渐变

503
00:18:18,516 --> 0:18:21,856
着色和半透明

504
00:18:21,856 --> 0:18:24,276
它们为你的 UI 提供

505
00:18:24,276 --> 0:18:26,806
深度 环境

506
00:18:26,806 --> 0:18:28,206
同时还有点美化作用

507
00:18:28,726 --> 0:18:31,626
这是一个相当典型的 Mac 桌面

508
00:18:31,656 --> 0:18:33,606
你可以看到我们使用了

509
00:18:33,606 --> 0:18:35,076
这些素材效果的

510
00:18:35,076 --> 0:18:36,476
所有的地方

511
00:18:36,596 --> 0:18:38,000
而其实 这些不是全部

512
00:18:41,286 --> 0:18:42,986
现在 AppKit 会自动地

513
00:18:42,986 --> 0:18:44,936
为一些常见的地方

514
00:18:44,936 --> 0:18:47,096
提供素材 如标题栏

515
00:18:47,096 --> 0:18:49,166
窗口背景

516
00:18:49,986 --> 0:18:52,696
表格视图 侧边栏 弹出框

517
00:18:52,696 --> 0:18:56,136
以及菜单 还有其他的地方

518
00:18:56,336 --> 0:18:58,366
但你也可以自己创建一种素材

519
00:18:58,366 --> 0:19:00,426
并将其添加到你的 UI 中

520
00:18:58,366 --> 0:19:00,426
并将其添加到你的 UI 中

521
00:19:01,136 --> 0:19:02,156
这就要用到一种视图

522
00:19:02,356 --> 0:19:03,676
叫作 NSVisualEffectView

523
00:19:04,466 --> 0:19:07,206
如果你不熟悉它 很简单

524
00:19:07,206 --> 0:19:09,466
它是一种显示素材的视图

525
00:19:10,676 --> 0:19:11,836
如果你想使用这种视图

526
00:19:12,346 --> 0:19:14,136
你要注意三个

527
00:19:14,136 --> 0:19:15,406
需要设置的主要属性

528
00:19:15,446 --> 0:19:17,696
而我将依次地进行介绍

529
00:19:17,836 --> 0:19:19,556
包括 state blendingMode

530
00:19:19,556 --> 0:19:20,636
和 material

531
00:19:23,046 --> 0:19:24,206
首先是 state 属性

532
00:19:24,766 --> 0:19:27,336
它决定了素材

533
00:19:27,336 --> 0:19:29,786
是否使用活动窗口外观

534
00:19:30,246 --> 0:19:31,776
默认情况下

535
00:19:31,776 --> 0:19:33,366
素材会匹配包含它的窗口

536
00:19:33,366 --> 0:19:34,916
当这个窗口活动时

537
00:19:34,916 --> 0:19:36,256
素材也会看起来出于活动状态

538
00:19:36,556 --> 0:19:37,926
当窗口不活动时

539
00:19:37,926 --> 0:19:39,106
素材也会不活动

540
00:19:39,686 --> 0:19:42,456
但是你也可以将

541
00:19:42,866 --> 0:19:44,776
特定的部分指定为活动或不活动

542
00:19:44,776 --> 0:19:46,076
如果你想要

543
00:19:46,076 --> 0:19:47,006
手动控制的话

544
00:19:49,546 --> 0:19:51,076
第二个 blendingMode 属性

545
00:19:51,776 --> 0:19:53,846
这个属性控制着

546
00:19:53,846 --> 0:19:55,886
素材是否会穿透

547
00:19:55,886 --> 0:19:56,646
窗口的背后

548
00:19:56,856 --> 0:19:58,146
下面我来给你演示一下

549
00:19:59,676 --> 0:20:02,106
这是“预览” App 用了两种

550
00:19:59,676 --> 0:20:02,106
这是“预览” App 用了两种

551
00:20:02,106 --> 0:20:03,146
不同的素材

552
00:20:04,406 --> 0:20:06,236
一个是 这个标题栏素材

553
00:20:06,236 --> 0:20:09,146
如果我们把它掀开

554
00:20:09,146 --> 0:20:10,726
就能看到它混合了

555
00:20:10,726 --> 0:20:12,286
窗口里的内容

556
00:20:12,286 --> 0:20:14,056
包括里面的彩色图像

557
00:20:14,916 --> 0:20:16,506
所以 它没有穿透到

558
00:20:16,506 --> 0:20:17,956
窗口的后面

559
00:20:19,036 --> 0:20:20,366
这是一个侧边栏素材

560
00:20:20,366 --> 0:20:22,216
如果我们将它掀开

561
00:20:23,656 --> 0:20:24,856
我们就能看到它将

562
00:20:24,856 --> 0:20:26,506
窗口后面的内容模糊了

563
00:20:26,506 --> 0:20:27,786
所以穿透到了窗口后面

564
00:20:28,006 --> 0:20:29,926
因而它可以看到

565
00:20:29,966 --> 0:20:32,526
其背后的窗口 还有桌面

566
00:20:40,666 --> 0:20:42,516
好的 默认情况下 一个视觉效果视图

567
00:20:42,516 --> 0:20:43,946
将会处于穿透窗口模式

568
00:20:43,946 --> 0:20:46,756
但你可以用

569
00:20:46,756 --> 0:20:48,066
blendingMode 属性来控制它

570
00:20:48,516 --> 0:20:51,436
最后是 material 属性

571
00:20:52,236 --> 0:20:53,876
该属性封装了

572
00:20:53,876 --> 0:20:55,976
对素材效果的定义

573
00:20:56,836 --> 0:20:57,546
这是什么意思呢

574
00:20:58,476 --> 0:21:00,366
也就是模糊 半透明

575
00:20:58,476 --> 0:21:00,366
也就是模糊 半透明

576
00:21:00,496 --> 0:21:03,246
渐变以及着色的具体方法

577
00:21:03,246 --> 0:21:05,246
这些都取决于

578
00:21:05,246 --> 0:21:06,216
material 属性

579
00:21:07,316 --> 0:21:08,506
现在 我们先开始在

580
00:21:08,506 --> 0:21:10,916
Yosemite 里使用素材时

581
00:21:11,006 --> 0:21:12,726
我们有两种主要素材

582
00:21:12,966 --> 0:21:14,586
一种浅色的 一种深色的

583
00:21:14,586 --> 0:21:15,876
开始这两种素材很好用

584
00:21:15,876 --> 0:21:18,276
但之后我们已经

585
00:21:18,276 --> 0:21:19,736
扩大了系统中

586
00:21:19,736 --> 0:21:21,196
素材的使用

587
00:21:22,026 --> 0:21:23,576
那么在深色模式中 

588
00:21:23,576 --> 0:21:24,716
仅仅指定一种素材为亮或暗

589
00:21:24,716 --> 0:21:28,086
不再具有实质性的意义

590
00:21:28,776 --> 0:21:29,976
相反 我们有一种叫

591
00:21:29,976 --> 0:21:31,806
语义素材的东西

592
00:21:32,666 --> 0:21:33,616
如果你熟悉

593
00:21:33,686 --> 0:21:36,066
语义色彩的话

594
00:21:36,276 --> 0:21:37,406
就知道它们的命名

595
00:21:37,406 --> 0:21:39,406
取决于其使用的地方

596
00:21:39,536 --> 0:21:40,366
而不在于它们看起来像什么

597
00:21:41,686 --> 0:21:43,506
语义素材也是这样

598
00:21:44,486 --> 0:21:46,096
例如 菜单素材

599
00:21:46,166 --> 0:21:47,456
会一直看起来像

600
00:21:47,456 --> 0:21:49,626
系统环境菜单

601
00:21:49,626 --> 0:21:50,706
不论是浅色还是深色模式

602
00:21:51,386 --> 0:21:55,086
在 Mojave 中 我们引进了

603
00:21:55,086 --> 0:21:57,716
更多的语义素材

604
00:21:58,716 --> 0:21:59,976
这样你就总可以

605
00:21:59,976 --> 0:22:02,056
在特定用例下

606
00:21:59,976 --> 0:22:02,056
在特定用例下

607
00:22:02,056 --> 0:22:02,476
使用正确的素材

608
00:22:02,626 --> 0:22:06,296
其实 这些语义素材

609
00:22:06,346 --> 0:22:08,996
是现在我们使用素材时

610
00:22:08,996 --> 0:22:10,726
喜欢用的方法

611
00:22:10,726 --> 0:22:12,836
我们淘汰了一些非语义素材

612
00:22:12,836 --> 0:22:14,896
如浅色 深色

613
00:22:15,186 --> 0:22:16,636
中浅色 或者极深色

614
00:22:17,866 --> 0:22:19,026
如果你正在用这些素材

615
00:22:19,026 --> 0:22:21,506
那你最好赶快

616
00:22:21,506 --> 0:22:23,296
切换到一个适用于

617
00:22:23,296 --> 0:22:24,786
你的用例的

618
00:22:24,866 --> 0:22:25,846
语义素材中

619
00:22:29,476 --> 0:22:30,876
现在给你大概展示一下

620
00:22:30,876 --> 0:22:32,366
在整个系统里 我们会在哪里

621
00:22:32,366 --> 0:22:33,676
使用这些语义素材

622
00:22:34,456 --> 0:22:35,726
这是“访达”使用的

623
00:22:35,726 --> 0:22:37,406
标题栏和侧边栏素材

624
00:22:39,396 --> 0:22:41,156
这是“邮件”使用的标头视图

625
00:22:41,156 --> 0:22:43,236
和内容背景素材

626
00:22:45,656 --> 0:22:47,396
这是《Chameleon Wrangler》App

627
00:22:47,396 --> 0:22:48,266
所使用的

628
00:22:48,266 --> 0:22:49,776
页面背景素材

629
00:22:50,346 --> 0:22:54,426
这是系统偏好设置

630
00:22:54,426 --> 0:22:56,056
所使用的窗口背景素材

631
00:22:57,276 --> 0:22:58,236
现在 关于这个

632
00:22:58,236 --> 0:22:59,666
窗口背景素材

633
00:22:59,716 --> 0:23:00,886
你大概有所耳闻 

634
00:22:59,716 --> 0:23:00,886
你大概有所耳闻 

635
00:23:00,886 --> 0:23:03,116
它是 Mojave 里新的特殊的

636
00:23:03,226 --> 0:23:04,186
桌面着色素材之一

637
00:23:04,186 --> 0:23:06,616
而它们运作的方法

638
00:23:06,896 --> 0:23:09,476
就是基于窗口在屏幕上的位置

639
00:23:09,476 --> 0:23:11,406
从桌面图片中挑出

640
00:23:11,406 --> 0:23:12,776
一小块色彩

641
00:23:13,366 --> 0:23:14,706
这里的目的是要

642
00:23:14,796 --> 0:23:16,726
将你的窗口融入

643
00:23:16,726 --> 0:23:18,186
系统里其他部分的窗口

644
00:23:18,726 --> 0:23:24,166
那么 要得到这些根据桌面着色的素材

645
00:23:24,166 --> 0:23:25,226
最简单的方法

646
00:23:25,226 --> 0:23:26,396
就是使用 NSWindow

647
00:23:26,516 --> 0:23:28,926
NSScrollView  NSTableView

648
00:23:29,086 --> 0:23:30,946
和 NSCollectionView 中的

649
00:23:30,976 --> 0:23:31,846
自动支持

650
00:23:32,196 --> 0:23:33,886
这些对象的

651
00:23:33,886 --> 0:23:35,666
默认配置与这个

652
00:23:35,666 --> 0:23:37,226
桌面着色效果同时进行

653
00:23:37,716 --> 0:23:42,956
你也可以通过设置 NSBox

654
00:23:42,956 --> 0:23:45,856
获取这些素材

655
00:23:45,856 --> 0:23:48,156
只需要把它的类型设为自定义

656
00:23:48,286 --> 0:23:50,016
并选择其中的一个填充色彩即可

657
00:23:50,286 --> 0:23:51,726
它会使用相应的

658
00:23:51,826 --> 0:23:53,406
NSVisualEffectView 素材

659
00:23:54,816 --> 0:23:55,736
下面是例子

660
00:23:56,486 --> 0:23:58,866
我会把 boxType 设置为自定义

661
00:23:59,336 --> 0:24:00,806
然后我会将它的填充色彩

662
00:23:59,336 --> 0:24:00,806
然后我会将它的填充色彩

663
00:24:00,856 --> 0:24:02,746
设定为 underPageBackgroundColor

664
00:24:03,286 --> 0:24:05,366
当然 我也可以用

665
00:24:05,366 --> 0:24:06,986
NSVisualEffectView 我可以将

666
00:24:06,986 --> 0:24:08,506
它的素材属性设置为

667
00:24:08,506 --> 0:24:09,906
underPageBackground 素材

668
00:24:10,116 --> 0:24:11,296
那么 使用 NSBox 的好处

669
00:24:11,416 --> 0:24:13,506
就是它可以一直

670
00:24:13,506 --> 0:24:15,956
向后兼容至 Leopard

671
00:24:17,076 --> 0:24:18,086
另一方面 visualEffectView

672
00:24:18,086 --> 0:24:19,086
则给了我们更大的发挥空间

673
00:24:19,086 --> 0:24:21,346
稍后我会给你一个

674
00:24:21,346 --> 0:24:22,246
相关的例子

675
00:24:22,826 --> 0:24:26,906
提醒一下 

676
00:24:26,906 --> 0:24:28,356
这些素材会在浅色状态下

677
00:24:28,496 --> 0:24:30,656
显示未着色的色彩

678
00:24:31,156 --> 0:24:33,946
在深色状态下 它们才会显示

679
00:24:33,946 --> 0:24:35,026
桌面着色效果

680
00:24:35,726 --> 0:24:37,366
但是要记住 着色效果

681
00:24:37,366 --> 0:24:39,046
可能会被禁用

682
00:24:39,176 --> 0:24:40,026
原因是这样

683
00:24:40,706 --> 0:24:45,826
在 Mojave 中你可以给系统

684
00:24:45,926 --> 0:24:47,376
选择一个强调色

685
00:24:47,896 --> 0:24:52,276
如果你将它切换为石墨色

686
00:24:52,386 --> 0:24:55,276
你就会看到

687
00:24:55,276 --> 0:24:56,696
所有的控件都失去了

688
00:24:56,696 --> 0:24:59,806
它们的色彩强调

689
00:25:00,116 --> 0:25:01,646
但这些桌面着色素材

690
00:25:01,796 --> 0:25:03,166
也会失去它们的着色

691
00:25:04,616 --> 0:25:06,476
所以无论如何要确保

692
00:25:06,476 --> 0:25:07,866
你不要指望

693
00:25:07,866 --> 0:25:11,866
桌面着色一直可用

694
00:25:12,106 --> 0:25:16,036
默认情况下 visualEffectView

695
00:25:16,336 --> 0:25:18,226
会在像这样的矩形框里

696
00:25:18,226 --> 0:25:19,536
显示它的素材

697
00:25:19,956 --> 0:25:20,886
这样挺好的

698
00:25:21,796 --> 0:25:23,046
但是如果我想要用这个素材

699
00:25:23,046 --> 0:25:24,586
显示一个自定义 UI 元素

700
00:25:24,586 --> 0:25:26,796
比如说一个这样的对话气泡

701
00:25:27,416 --> 0:25:28,086
我要怎么做呢

702
00:25:29,276 --> 0:25:32,016
下面这种方法看似有用

703
00:25:32,016 --> 0:25:33,496
实则行不通

704
00:25:33,496 --> 0:25:34,176
我来演示一下为什么

705
00:25:35,606 --> 0:25:38,276
我们先在 NSView 上

706
00:25:38,276 --> 0:25:42,226
执行 draw() 方法

707
00:25:42,226 --> 0:25:44,436
然后获取我的自定义对话气泡

708
00:25:44,786 --> 0:25:45,426
NSBezierPath

709
00:25:45,936 --> 0:25:48,716
接着我会在路径中执行 fill() 方法

710
00:25:48,716 --> 0:25:51,926
参数为 controlBackgroundColor

711
00:25:52,696 --> 0:25:52,806
参数为 controlBackgroundColor

712
00:25:53,016 --> 0:25:54,916
好了 如果这么做

713
00:25:54,916 --> 0:25:56,486
它就会像这样

714
00:25:56,486 --> 0:25:58,796
看起来还不错

715
00:25:58,796 --> 0:26:01,296
但如果我们放大看

716
00:25:58,796 --> 0:26:01,296
但如果我们放大看

717
00:26:01,296 --> 0:26:02,696
就会发现对话框并没有

718
00:26:02,746 --> 0:26:04,476
我们想要的桌面着色效果

719
00:26:04,476 --> 0:26:05,676
这只是单纯的灰色

720
00:26:07,096 --> 0:26:07,986
这是怎么回事

721
00:26:09,376 --> 0:26:11,766
因为 这种效果是由

722
00:26:11,766 --> 0:26:13,136
Quartz 窗口服务器提供的

723
00:26:13,136 --> 0:26:14,876
我们许多其他的素材效果也一样

724
00:26:15,746 --> 0:26:16,876
这就意味着

725
00:26:16,976 --> 0:26:19,216
它与你的 App 之间

726
00:26:19,216 --> 0:26:20,856
是异步更新的

727
00:26:20,906 --> 0:26:23,706
对性能表现来说这样

728
00:26:23,706 --> 0:26:25,516
但也意味着你不能直接

729
00:26:25,516 --> 0:26:27,396
使用那个颜色绘制视图

730
00:26:27,396 --> 0:26:28,476
或是获取它的 RGB 值

731
00:26:29,916 --> 0:26:31,676
相反 你可以用

732
00:26:31,676 --> 0:26:33,546
NSVisualEffectView 的

733
00:26:33,546 --> 0:26:35,806
maskImage 属性来实现类似的效果

734
00:26:37,106 --> 0:26:40,276
maskImage 是 NSVisualEffectView 中

735
00:26:40,596 --> 0:26:43,336
一种可选的 NSImage

736
00:26:44,026 --> 0:26:45,696
而 NSVisualEffectView 则会利用它来

737
00:26:45,696 --> 0:26:47,706
覆盖它的素材

738
00:26:47,706 --> 0:26:48,386
或者说是它显示的素材

739
00:26:49,646 --> 0:26:50,996
除了使用标准的

740
00:26:50,996 --> 0:26:53,126
基于图案的图像外

741
00:26:53,126 --> 0:26:56,506
你还可以用 Drawing-handler 图像来模拟

742
00:26:56,506 --> 0:26:56,996
素材绘制

743
00:26:56,996 --> 0:26:59,356
下面请看个例子

744
00:27:00,466 --> 0:27:01,896
回到我的视图中

745
00:27:01,896 --> 0:27:04,736
我会重写 layout() 方法

746
00:27:04,736 --> 0:27:05,816
继续添加一个

747
00:27:05,816 --> 0:27:06,816
NSVisualEffectView

748
00:27:07,896 --> 0:27:09,716
并将其素材设置为

749
00:27:09,716 --> 0:27:11,786
contentBackground 素材

750
00:27:12,916 --> 0:27:14,616
接着 我用 NSImage(size: flipped:)

751
00:27:14,616 --> 0:27:17,176
生成一个初始化程序代码块

752
00:27:17,356 --> 0:27:20,516
来创建一个 Drawing-handler 图像

753
00:27:22,076 --> 0:27:24,306
这里 我设置成白色

754
00:27:24,416 --> 0:27:25,686
但什么颜色并不重要

755
00:27:25,686 --> 0:27:27,426
只要它是不透明的就行

756
00:27:27,426 --> 0:27:29,426
之后 我会继续填充

757
00:27:29,486 --> 0:27:32,796
我的路径

758
00:27:32,956 --> 0:27:34,956
然后在 NSVisualEffectView 上 

759
00:27:34,956 --> 0:27:36,846
将该图像设置为 maskImage

760
00:27:37,676 --> 0:27:39,006
好了

761
00:27:39,276 --> 0:27:41,606
现在我们来看看

762
00:27:41,846 --> 0:27:42,666
看起来好很多

763
00:27:43,616 --> 0:27:44,626
它有桌面着色了

764
00:27:45,706 --> 0:27:47,936
并且 如果对比起来看

765
00:27:47,936 --> 0:27:51,476
我们就能看到不同了

766
00:27:51,636 --> 0:27:53,356
那么 这个技巧对任何素材

767
00:27:53,466 --> 0:27:55,626
都适用 但是要记住

768
00:27:55,626 --> 0:27:57,256
只有图像的 Alpha 通道

769
00:27:57,256 --> 0:27:58,596
被用来制作蒙版

770
00:27:58,726 --> 0:28:00,496
这点和模板图像类似

771
00:27:58,726 --> 0:28:00,496
这点和模板图像类似

772
00:28:01,386 --> 0:28:03,886
而且蒙版仅仅会

773
00:28:03,886 --> 0:28:06,626
覆盖素材 而非任何子视图

774
00:28:06,626 --> 0:28:07,926
或 NSVisualEffectView 的

775
00:28:07,926 --> 0:28:08,696
其他继承视图

776
00:28:10,096 --> 0:28:12,516
有一个通用的技术可以

777
00:28:12,516 --> 0:28:15,156
为 maskImage 创建一个

778
00:28:15,156 --> 0:28:16,406
可调整大小的图像

779
00:28:16,406 --> 0:28:18,246
那就是用 NSImage 中的

780
00:28:18,246 --> 0:28:19,796
capInsets 和 resizingMode 属性

781
00:28:20,206 --> 0:28:22,706
这对性能十分有利

782
00:28:24,176 --> 0:28:25,846
好 接下来的部分 我将交给 Jeff

783
00:28:25,846 --> 0:28:26,886
他将和我们谈谈

784
00:28:26,886 --> 0:28:27,856
“Vibrant Blending（动态混合）”

785
00:28:28,506 --> 0:28:31,316
[ 掌声 ] Jeff

786
00:28:33,336 --> 0:28:34,436
&gt;&gt; 好的 谢谢 Matt

787
00:28:35,466 --> 0:28:36,506
好 现在我们已经

788
00:28:36,506 --> 0:28:38,076
对素材有所了解

789
00:28:38,076 --> 0:28:39,666
下面我要谈的

790
00:28:39,666 --> 0:28:40,906
是在那些素材前面的东西

791
00:28:41,446 --> 0:28:42,646
特别是那些我们

792
00:28:42,646 --> 0:28:44,696
通过抓取部分背景

793
00:28:44,696 --> 0:28:46,466
并创建出很棒的

794
00:28:46,466 --> 0:28:47,626
模糊效果的素材 所以

795
00:28:48,786 --> 0:28:50,846
如果我们再进入《Chameleon Wrangler》App

796
00:28:51,036 --> 0:28:52,786
我们这里已经有了 UI

797
00:28:52,786 --> 0:28:54,756
这是我们的情绪指示器

798
00:28:54,756 --> 0:28:56,156
接着 我们将记录

799
00:28:56,156 --> 0:28:58,226
我们各种爬行动物的情绪

800
00:28:58,996 --> 0:29:00,786
它在一个弹出框中

801
00:28:58,996 --> 0:29:00,786
它在一个弹出框中

802
00:29:00,786 --> 0:29:01,806
意味着它会

803
00:29:01,806 --> 0:29:03,846
自动地将该弹出框素材

804
00:29:03,846 --> 0:29:04,746
作为基底素材

805
00:29:05,256 --> 0:29:07,636
而当我们拉下这个基底素材 

806
00:29:07,636 --> 0:29:08,676
我们想要的是

807
00:29:08,676 --> 0:29:10,576
我们的内容能够

808
00:29:10,576 --> 0:29:13,166
从各种背景中凸现出来

809
00:29:13,776 --> 0:29:14,736
就像这样

810
00:29:15,256 --> 0:29:16,706
那么 我们就要用一种

811
00:29:16,706 --> 0:29:17,806
叫做 “Vibrancy（动态化）”的效果

812
00:29:18,386 --> 0:29:20,456
那么 什么是 Vibrancy

813
00:29:20,846 --> 0:29:22,996
它就是一种混合模式

814
00:29:22,996 --> 0:29:24,456
我们将这种模式运用到内容中

815
00:29:24,456 --> 0:29:26,266
将其背后的内容统一地

816
00:29:26,266 --> 0:29:28,326
提亮或变暗

817
00:29:28,536 --> 0:29:30,136
这和色彩的减淡或加深

818
00:29:30,136 --> 0:29:31,266
颇为相似

819
00:29:31,266 --> 0:29:32,516
你也许在你常用的照片编辑器

820
00:29:32,516 --> 0:29:33,746
或设计工具中见过它

821
00:29:34,406 --> 0:29:35,686
我们来仔细看看

822
00:29:36,726 --> 0:29:38,226
这里我们有一个 Glyph

823
00:29:38,226 --> 0:29:39,716
它是一种中等灰色

824
00:29:39,716 --> 0:29:42,876
大概是 50% 的灰色 但完全不透明

825
00:29:44,206 --> 0:29:45,706
当我们使用针对深色素材的

826
00:29:45,706 --> 0:29:47,296
动态混合效果时

827
00:29:47,296 --> 0:29:48,896
这时我们称之为提亮效果

828
00:29:48,896 --> 0:29:51,606
我们能看到

829
00:29:51,606 --> 0:29:53,256
其实并不是 Glyph 的

830
00:29:53,256 --> 0:29:54,586
不透明度下降了

831
00:29:54,586 --> 0:29:55,686
而是它背后的内容

832
00:29:55,916 --> 0:29:57,586
通过使用

833
00:29:58,066 --> 0:29:59,976
该灰色值的亮度被提亮了

834
00:29:59,976 --> 0:30:03,366
其实 我们可以看看它

835
00:29:59,976 --> 0:30:03,366
其实 我们可以看看它

836
00:30:03,366 --> 0:30:04,866
在一系列灰色值上是怎样的

837
00:30:04,866 --> 0:30:06,236
这里我们有从 0% 到 100% 的

838
00:30:06,236 --> 0:30:08,666
灰色色盘 它们都是

839
00:30:08,666 --> 0:30:09,456
完全不透明的

840
00:30:10,396 --> 0:30:11,326
现在我们使用提亮效果

841
00:30:11,326 --> 0:30:12,736
我们看到一些

842
00:30:12,736 --> 0:30:14,946
有趣的事情发生了

843
00:30:15,106 --> 0:30:16,466
看看右下侧的灰色

844
00:30:16,506 --> 0:30:19,196
变成了 100% 的亮色

845
00:30:19,196 --> 0:30:20,626
因为我们给内容的背后

846
00:30:20,626 --> 0:30:23,056
添加了白色的亮度

847
00:30:23,186 --> 0:30:24,076
它就变成了这样

848
00:30:24,176 --> 0:30:25,346
没有更亮的颜色了

849
00:30:26,466 --> 0:30:27,516
但再看左上角

850
00:30:27,516 --> 0:30:29,726
我们之前绘制的是黑色

851
00:30:29,726 --> 0:30:31,216
无法进行任何提亮了

852
00:30:31,216 --> 0:30:33,076
这意味着它完全消失了

853
00:30:33,076 --> 0:30:33,956
事实上 如果不是我在那儿

854
00:30:33,956 --> 0:30:34,976
画了一个圈儿

855
00:30:34,976 --> 0:30:35,516
你都无法看到它

856
00:30:35,936 --> 0:30:37,716
而中间的这些 我们能看到

857
00:30:37,716 --> 0:30:39,016
不同程度的提亮

858
00:30:39,016 --> 0:30:40,576
我们能用这个来

859
00:30:40,576 --> 0:30:42,126
在我们的 App 中创建一个

860
00:30:42,496 --> 0:30:43,296
内容层级结构

861
00:30:44,526 --> 0:30:45,976
但这种效果从哪里来呢

862
00:30:47,176 --> 0:30:48,076
这时我们的老朋友

863
00:30:48,076 --> 0:30:49,266
NSAppearance 又派上了用场

864
00:30:50,356 --> 0:30:52,086
我们有两种特殊的

865
00:30:52,086 --> 0:30:53,216
动态的 NSAppearance 对象  

866
00:30:53,546 --> 0:30:56,976
vibrantDark 和 vibrantLight 

867
00:30:57,066 --> 0:30:58,676
他们都是完整的包

868
00:30:58,676 --> 0:31:00,086
不仅包括

869
00:30:58,676 --> 0:31:00,086
不仅包括

870
00:31:00,086 --> 0:31:01,786
我们用作提亮或调暗效果的

871
00:31:01,786 --> 0:31:03,236
精确的公式

872
00:31:03,236 --> 0:31:05,306
而且还有一套

873
00:31:05,306 --> 0:31:06,876
已被设计用在

874
00:31:06,876 --> 0:31:07,806
该混合模式中的

875
00:31:07,806 --> 0:31:10,126
控件图案和颜色定义

876
00:31:10,646 --> 0:31:13,426
但你的代码要如何使用它呢

877
00:31:14,176 --> 0:31:15,436
其实很简单

878
00:31:16,356 --> 0:31:18,286
在你的 NSView 子类别中

879
00:31:18,286 --> 0:31:19,676
你可以重写 allowsVibrancy 属性

880
00:31:19,676 --> 0:31:22,206
将其返回为真

881
00:31:22,206 --> 0:31:23,206
混合效果就会

882
00:31:23,206 --> 0:31:24,546
自动应用到

883
00:31:24,546 --> 0:31:25,906
你的视图及其

884
00:31:25,906 --> 0:31:28,000
所有继承视图的绘制当中

885
00:31:29,946 --> 0:31:31,046
特别的是 当你在这个

886
00:31:31,046 --> 0:31:33,116
动态的环境中绘制时

887
00:31:33,116 --> 0:31:34,566
你应该采用内置的

888
00:31:34,566 --> 0:31:35,886
LabelColor 之一 取决于

889
00:31:35,886 --> 0:31:37,166
内容的突显度

890
00:31:37,996 --> 0:31:38,976
vibrantDark 和

891
00:31:38,976 --> 0:31:39,896
vibrantLight 都有所有

892
00:31:39,896 --> 0:31:41,166
这四种颜色的很好的定义

893
00:31:41,166 --> 0:31:42,636
让你能够

894
00:31:42,636 --> 0:31:44,036
创建很好的层级结构

895
00:31:45,476 --> 0:31:47,176
但是 你也不是必须使用这些颜色

896
00:31:47,176 --> 0:31:48,696
你可以使用任意你喜欢的颜色

897
00:31:48,696 --> 0:31:50,336
但是我们最好不要

898
00:31:50,336 --> 0:31:51,866
使用非灰度颜色

899
00:31:52,546 --> 0:31:53,936
要避免使用非灰度颜色

900
00:31:53,976 --> 0:31:55,736
因为一旦使用它们

901
00:31:56,126 --> 0:31:57,696
混合效果就会

902
00:31:57,746 --> 0:31:59,696
影响到你的颜色的设计意图

903
00:31:59,696 --> 0:32:00,876
还会用一种你不想要的

904
00:31:59,696 --> 0:32:00,876
还会用一种你不想要的

905
00:32:00,876 --> 0:32:02,366
方式去冲染你的颜色

906
00:32:03,376 --> 0:32:04,726
稍后我会给你一个例子

907
00:32:06,866 --> 0:32:08,836
那么 再打开 App

908
00:32:09,236 --> 0:32:11,496
我们可以继续在我们的视图上

909
00:32:11,496 --> 0:32:13,066
重写 allowsVibrancy

910
00:32:13,066 --> 0:32:14,116
在这里我们就只需要

911
00:32:14,116 --> 0:32:15,826
在包含整个弹出框和

912
00:32:15,826 --> 0:32:18,806
指示器的视图上设置它

913
00:32:19,246 --> 0:32:20,326
现在我们来看看

914
00:32:21,896 --> 0:32:24,106
好了 滑块看起来很棒

915
00:32:24,106 --> 0:32:25,946
完全如我们所愿

916
00:32:25,946 --> 0:32:27,326
但是这些表情是怎么回事

917
00:32:28,016 --> 0:32:28,756
他们都被冲淡了

918
00:32:30,146 --> 0:32:32,286
这是因为

919
00:32:32,286 --> 0:32:34,336
我们在整个指示器视图上

920
00:32:34,336 --> 0:32:36,946
设置 allowsVibrancy 时

921
00:32:36,946 --> 0:32:37,726
我们不仅在该视图上

922
00:32:37,726 --> 0:32:39,636
获得了动态混合

923
00:32:39,716 --> 0:32:41,056
还包括了这些子视图

924
00:32:42,216 --> 0:32:43,456
这里的修复方法很简单

925
00:32:44,016 --> 0:32:45,646
我们只要将

926
00:32:45,646 --> 0:32:47,266
allowsVibrancy 的定义

927
00:32:47,266 --> 0:32:49,086
局部化到绘制滑块的部分

928
00:32:49,086 --> 0:32:50,386
我们就能获得我们想要的效果

929
00:32:50,806 --> 0:32:52,146
我们的滑块是动态绘制的

930
00:32:52,556 --> 0:32:53,786
而表情按钮的颜色

931
00:32:53,836 --> 0:32:55,846
也是我们想要的

932
00:32:57,366 --> 0:32:58,286
当你进行动态绘制时

933
00:32:58,286 --> 0:32:59,536
你往往只想要

934
00:32:59,536 --> 0:33:01,376
在绘制你确实

935
00:32:59,536 --> 0:33:01,376
在绘制你确实

936
00:33:01,656 --> 0:33:03,136
想要动态化的内容的

937
00:33:03,136 --> 0:33:04,026
叶视图上

938
00:33:04,026 --> 0:33:04,416
应用 Vibrancy

939
00:33:05,476 --> 0:33:06,596
并且 如果你有绘制

940
00:33:06,596 --> 0:33:08,186
混合内容的视图

941
00:33:08,186 --> 0:33:09,296
那就意味着你可能想要

942
00:33:09,296 --> 0:33:10,656
将你的绘制

943
00:33:10,656 --> 0:33:12,596
分成一些兄弟视图

944
00:33:12,596 --> 0:33:14,406
以在你想要的粒度层级

945
00:33:14,406 --> 0:33:15,606
应用 Vibrancy

946
00:33:17,616 --> 0:33:19,016
而且 你还应该避免

947
00:33:19,016 --> 0:33:21,346
将动态和非动态的视图相重叠

948
00:33:22,716 --> 0:33:24,736
因为如果重叠了

949
00:33:24,736 --> 0:33:26,116
混合模式将发生冲突

950
00:33:26,116 --> 0:33:27,336
而一些你的内容就会以

951
00:33:27,336 --> 0:33:28,976
一种你并不想要的

952
00:33:29,116 --> 0:33:31,396
混合模式绘制

953
00:33:31,506 --> 0:33:33,306
还有 不要通过将 Cocoa 控件

954
00:33:33,306 --> 0:33:34,696
编入子集来

955
00:33:34,696 --> 0:33:35,516
重写 allowsVibrancy

956
00:33:36,046 --> 0:33:37,146
我前面提到过

957
00:33:37,146 --> 0:33:38,476
vibrantLight

958
00:33:38,476 --> 0:33:40,156
和 vibrantDark 外观是由

959
00:33:40,156 --> 0:33:41,786
专门为混合模式指定的

960
00:33:41,786 --> 0:33:43,186
控件图案和色彩所设计的

961
00:33:43,186 --> 0:33:45,046
如果你移除这个混合模式

962
00:33:45,046 --> 0:33:47,096
图案的对比度

963
00:33:47,096 --> 0:33:48,296
就不尽如人意

964
00:33:48,296 --> 0:33:49,966
因为我们使用

965
00:33:49,966 --> 0:33:51,396
该混合模式

966
00:33:51,396 --> 0:33:52,636
来让它们在素材中突出

967
00:33:52,636 --> 0:33:54,466
因此你应该

968
00:33:54,466 --> 0:33:56,216
只在你确实在重写绘制

969
00:33:56,216 --> 0:33:57,286
且你知道哪种混合模式

970
00:33:57,286 --> 0:33:58,646
或者非混合模式

971
00:33:58,646 --> 0:34:00,066
适合你正在进行的

972
00:33:58,646 --> 0:34:00,066
适合你正在进行的

973
00:34:00,066 --> 0:34:01,006
绘制的情况下

974
00:34:01,006 --> 0:34:02,176
对 allowsVibrancy

975
00:34:02,176 --> 0:34:02,646
进行重写

976
00:34:03,536 --> 0:34:04,256
这就是 Vibrancy

977
00:34:05,366 --> 0:34:06,316
接下来 我要谈谈

978
00:34:06,316 --> 0:34:07,566
背景风格

979
00:34:07,846 --> 0:34:09,085
特别是我们用于选定的

980
00:34:09,085 --> 0:34:10,766
背景风格

981
00:34:11,886 --> 0:34:12,726
这里我们有一个

982
00:34:12,726 --> 0:34:14,706
在 Aqua Cocoa App 中

983
00:34:14,706 --> 0:34:15,606
非常典型的情况 

984
00:34:16,556 --> 0:34:18,386
在这个例子中 有一条

985
00:34:18,386 --> 0:34:20,775
取“邮件” App 的消息

986
00:34:20,775 --> 0:34:22,126
我们能看到

987
00:34:22,126 --> 0:34:23,775
当我们在选定状态时

988
00:34:23,775 --> 0:34:25,646
我们需要让这个表格行里的内容反色

989
00:34:26,036 --> 0:34:28,775
来在蓝色的选择背景下

990
00:34:28,775 --> 0:34:29,656
看起来自然

991
00:34:30,206 --> 0:34:32,786
但如果我们

992
00:34:32,786 --> 0:34:36,025
添加了 darkAqua 的话

993
00:34:36,025 --> 0:34:37,366
就能看到我们并不能

994
00:34:37,366 --> 0:34:38,235
单纯进行反色了

995
00:34:38,396 --> 0:34:39,815
它们看起来不一致

996
00:34:40,216 --> 0:34:41,416
因而我们需要对这些状态

997
00:34:41,416 --> 0:34:42,556
进行语义化描述

998
00:34:43,206 --> 0:34:45,286
如果对 Cocoa 熟悉的话

999
00:34:45,286 --> 0:34:48,216
你可能已经看到了

1000
00:34:48,216 --> 0:34:50,496
NSView.BackgroundStyle 枚举

1001
00:34:50,496 --> 0:34:51,726
这其中包括很多个 Case

1002
00:34:51,726 --> 0:34:54,036
包括浅色和深色

1003
00:34:54,036 --> 0:34:54,996
并且 NSTableView 会自动

1004
00:34:54,996 --> 0:34:56,226
在 NSTableRowView 和 NSTableCellView 上

1005
00:34:56,226 --> 0:34:58,816
以及 NSTableCellView 的

1006
00:34:58,816 --> 0:35:00,176
直接子视图的

1007
00:34:58,816 --> 0:35:00,176
直接子视图的

1008
00:35:00,176 --> 0:35:02,426
所有控件上自动进行设置

1009
00:35:03,856 --> 0:35:05,286
传统情况下 

1010
00:35:05,286 --> 0:35:07,376
我们会在未被选定行

1011
00:35:07,376 --> 0:35:09,146
设置了浅色的背景风格

1012
00:35:09,146 --> 0:35:10,666
在被选定行设置了深色的

1013
00:35:11,206 --> 0:35:13,336
但是现在 在这个

1014
00:35:13,336 --> 0:35:15,416
背景总是深色的 

1015
00:35:15,416 --> 0:35:16,586
全新的漂亮的主题中

1016
00:35:16,586 --> 0:35:18,526
以前的命名便

1017
00:35:18,526 --> 0:35:20,006
不再有意义

1018
00:35:20,006 --> 0:35:22,096
所以我们要将它们分别重新命名为

1019
00:35:22,096 --> 0:35:23,426
“normal（普通）”和 “emphasized（强调）”

1020
00:35:24,006 --> 0:35:25,616
这些是更为语义化的描述

1021
00:35:25,616 --> 0:35:27,356
能够更好地匹配这些

1022
00:35:27,356 --> 0:35:29,266
应用在新版的 Cocoa App 中

1023
00:35:29,266 --> 0:35:31,076
枚举 Case 的方式

1024
00:35:32,636 --> 0:35:33,866
关于背景风格

1025
00:35:33,866 --> 0:35:35,146
我们还做了一些更新

1026
00:35:35,396 --> 0:35:37,196
包括 NSTableView 现在会

1027
00:35:37,196 --> 0:35:38,446
自动地将背景风格

1028
00:35:38,446 --> 0:35:40,806
循环设置在

1029
00:35:40,806 --> 0:35:41,796
表格行中的所有控件上

1030
00:35:41,796 --> 0:35:43,586
而不仅只是

1031
00:35:43,586 --> 0:35:44,946
你 cellView 中的

1032
00:35:44,946 --> 0:35:45,496
直接子视图上

1033
00:35:46,006 --> 0:35:46,996
所以 如果你已经了解了

1034
00:35:46,996 --> 0:35:48,316
那个背景风格

1035
00:35:48,316 --> 0:35:49,556
并试着将其应用到所有的子视图上

1036
00:35:49,556 --> 0:35:51,036
因为你想要为布局用一个堆叠视图

1037
00:35:51,036 --> 0:35:52,226
或是其他什么东西

1038
00:35:52,226 --> 0:35:53,886
你不再需要

1039
00:35:53,886 --> 0:35:55,346
在 Mojave 上进行这些

1040
00:35:56,086 --> 0:35:58,286
之前手动完成这些的人

1041
00:35:58,286 --> 0:35:59,196
正在鼓掌

1042
00:35:59,196 --> 0:35:59,996
谢谢 我曾经也是

1043
00:36:01,376 --> 0:36:03,176
此外 全部的四种 LabelColor 

1044
00:36:03,176 --> 0:36:05,306
都自动适应到了

1045
00:36:05,336 --> 0:36:07,416
背景风格当中

1046
00:36:07,416 --> 0:36:08,426
这意味着你可以

1047
00:36:08,426 --> 0:36:09,876
创建一次你的内容层级

1048
00:36:10,026 --> 0:36:11,606
并语义化地描述它

1049
00:36:11,606 --> 0:36:12,796
那么它会在所有的这些环境中

1050
00:36:12,796 --> 0:36:13,726
看起来很棒

1051
00:36:14,396 --> 0:36:17,086
你也可以手动使用

1052
00:36:17,086 --> 0:36:18,396
这些强调的变体

1053
00:36:18,396 --> 0:36:19,256
举个例子

1054
00:36:19,496 --> 0:36:20,826
这是一个

1055
00:36:20,826 --> 0:36:22,836
看起来有点像“访达”里的图标视图

1056
00:36:23,686 --> 0:36:25,366
我们有两个标签

1057
00:36:25,366 --> 0:36:26,546
它们分别是 labelColor

1058
00:36:26,686 --> 0:36:27,856
和 secondaryLabelColor

1059
00:36:28,796 --> 0:36:30,066
我们想要在他们后面

1060
00:36:30,066 --> 0:36:31,236
绘制一个自定义选定效果

1061
00:36:31,236 --> 0:36:32,306
因此我们有了这个自定义的

1062
00:36:32,306 --> 0:36:33,806
基于 Bezier 路径的选定效果

1063
00:36:33,806 --> 0:36:34,936
我们也许会用另一个

1064
00:36:34,936 --> 0:36:36,936
已选定控件颜色来填充它

1065
00:36:36,936 --> 0:36:39,216
我们还想要在这个强调的风格中 

1066
00:36:40,146 --> 0:36:42,406
将我们的标签与主要变体

1067
00:36:42,466 --> 0:36:43,646
及次要变体相匹配

1068
00:36:44,596 --> 0:36:45,926
这很简单

1069
00:36:46,456 --> 0:36:47,676
我们需要做的就是

1070
00:36:47,676 --> 0:36:49,086
在我们的文本域 

1071
00:36:49,086 --> 0:36:50,796
将背景风格设为强调

1072
00:36:50,796 --> 0:36:51,716
这样它们会自动地

1073
00:36:51,716 --> 0:36:53,456
提供这个强调变体

1074
00:36:53,916 --> 0:36:56,396
很棒的是因为 我们已经将它描述成这样

1075
00:36:56,396 --> 0:36:58,826
当我们切换为深色模式时

1076
00:36:58,826 --> 0:37:00,106
一切就会如我们所愿

1077
00:36:58,826 --> 0:37:00,106
一切就会如我们所愿

1078
00:37:00,106 --> 0:37:01,026
我们不需要

1079
00:37:01,026 --> 0:37:04,466
再做什么

1080
00:37:04,466 --> 0:37:05,846
关于选定 最后要注意一下

1081
00:37:06,906 --> 0:37:08,736
通常你在侧边栏 菜单

1082
00:37:08,736 --> 0:37:10,966
及弹出框中所见到的选定素材

1083
00:37:10,966 --> 0:37:15,546
都跟随着 Mojave 上的强调色 偏好设置

1084
00:37:16,186 --> 0:37:17,226
这就意味着

1085
00:37:17,226 --> 0:37:18,446
如果我们绘制一个自定义蓝色

1086
00:37:18,446 --> 0:37:20,116
选定效果

1087
00:37:20,116 --> 0:37:20,326
它会不适应

1088
00:37:21,426 --> 0:37:22,436
而这时 你要用

1089
00:37:22,436 --> 0:37:23,446
NSVisualEffectView

1090
00:37:23,756 --> 0:37:24,826
它有一个特殊的选择素材

1091
00:37:24,826 --> 0:37:26,726
适用于这种情况

1092
00:37:26,726 --> 0:37:27,696
使用 NSVisualEffectView

1093
00:37:27,696 --> 0:37:28,666
该素材就会如你所愿

1094
00:37:28,666 --> 0:37:30,000
自动跟随偏好选项 

1095
00:37:33,716 --> 0:37:35,476
好 最后一部分是重头戏

1096
00:37:35,476 --> 0:37:36,676
小技巧和方法

1097
00:37:36,676 --> 0:37:38,156
但在此之前 我想就

1098
00:37:38,156 --> 0:37:39,316
向后兼容谈几句

1099
00:37:39,316 --> 0:37:40,996
因为我们知道你们中的许多人

1100
00:37:40,996 --> 0:37:42,446
特别是使用 Mac 的人

1101
00:37:42,446 --> 0:37:43,856
喜欢将你们的 App

1102
00:37:43,856 --> 0:37:45,256
向后兼容到之前发布的

1103
00:37:45,256 --> 0:37:47,016
macOS 版本当中

1104
00:37:47,016 --> 0:37:48,086
要确保你在向后兼容时

1105
00:37:48,086 --> 0:37:49,446
无需进行任何必要的妥协

1106
00:37:49,876 --> 0:37:51,456
就可以使用深色模式 

1107
00:37:51,456 --> 0:37:52,456
这十分重要

1108
00:37:52,976 --> 0:37:56,186
所以我会讲讲几个 API 

1109
00:37:56,186 --> 0:37:57,146
检测它们的向后兼容情况

1110
00:37:57,146 --> 0:37:59,076
从系统颜色开始

1111
00:37:59,506 --> 0:38:00,856
所以 这里是我们所支持的

1112
00:37:59,506 --> 0:38:00,856
所以 这里是我们所支持的

1113
00:38:00,856 --> 0:38:02,186
系统颜色的样本

1114
00:38:02,246 --> 0:38:03,686
它们对外观来说是动态的

1115
00:38:04,006 --> 0:38:05,076
这里我要强调的是

1116
00:38:05,076 --> 0:38:06,446
高亮为绿色的部分

1117
00:38:06,446 --> 0:38:07,586
都至少已经在 10.10 Yosemite 里

1118
00:38:07,586 --> 0:38:10,406
出现过了

1119
00:38:10,406 --> 0:38:12,896
其中的很多甚至出现得更早

1120
00:38:12,896 --> 0:38:15,426
这就意味着我们希望

1121
00:38:15,426 --> 0:38:17,166
你可以使用

1122
00:38:17,166 --> 0:38:18,416
足够多的色彩

1123
00:38:18,416 --> 0:38:20,046
几乎可以描述

1124
00:38:20,046 --> 0:38:22,206
你所喜欢的任何 UI

1125
00:38:22,206 --> 0:38:24,586
并且它们已经直接可以向后兼容了

1126
00:38:26,336 --> 0:38:28,266
就自定义色彩而言

1127
00:38:28,266 --> 0:38:29,576
我们现在更偏爱的

1128
00:38:29,576 --> 0:38:32,146
定义它们的方式是使用素材目录

1129
00:38:32,146 --> 0:38:33,936
而这早在 10.13 就已经可用了

1130
00:38:35,326 --> 0:38:37,376
现在 如果要给你的任何素材  

1131
00:38:37,646 --> 0:38:39,276
添加特定的深色变体

1132
00:38:39,596 --> 0:38:41,246
当你进行向后兼容时

1133
00:38:41,246 --> 0:38:42,776
这些深色变体都会

1134
00:38:42,776 --> 0:38:43,816
在之前版本的操作系统上

1135
00:38:43,816 --> 0:38:45,786
被忽略掉

1136
00:38:45,786 --> 0:38:46,996
所以那就是一个

1137
00:38:47,036 --> 0:38:48,336
内建的向后兼容解决方案

1138
00:38:49,116 --> 0:38:50,126
但是如果我想要再回去

1139
00:38:50,126 --> 0:38:52,556
对甚至比 10.13 更早的版本进行兼容

1140
00:38:52,556 --> 0:38:55,256
你可以用这样的方法

1141
00:38:55,396 --> 0:38:56,776
创建一个自定义色彩属性

1142
00:38:57,826 --> 0:38:59,386
这里我们只是封装

1143
00:38:59,386 --> 0:39:01,116
可用性检查 

1144
00:38:59,386 --> 0:39:01,116
可用性检查 

1145
00:39:01,116 --> 0:39:02,816
以在支持素材目录的操作系统上

1146
00:39:02,816 --> 0:39:04,526
使用我们的素材目录色彩

1147
00:39:04,526 --> 0:39:05,856
我们可以继续放一个

1148
00:39:05,856 --> 0:39:07,516
硬编码回调颜色

1149
00:39:07,516 --> 0:39:09,106
给那些旧的操作系统

1150
00:39:09,506 --> 0:39:13,006
桌面着色素材

1151
00:39:13,006 --> 0:39:13,976
是 Mojave 里的另一个新特点

1152
00:39:13,976 --> 0:39:16,116
如果你想要把

1153
00:39:16,116 --> 0:39:17,556
这些素材直接

1154
00:39:17,556 --> 0:39:19,166
编为 NSVisualEffectView

1155
00:39:19,166 --> 0:39:20,546
当然这只能在 10.14 上进行

1156
00:39:20,546 --> 0:39:23,256
但我们已经提供了

1157
00:39:23,256 --> 0:39:24,526
我们已经有一些类提供了

1158
00:39:24,556 --> 0:39:25,256
这些素材

1159
00:39:25,256 --> 0:39:26,476
包括 NSWindow

1160
00:39:26,896 --> 0:39:28,236
NSScrollView 以及 NSTableView

1161
00:39:28,236 --> 0:39:29,966
这些在最开始的时候

1162
00:39:29,966 --> 0:39:32,336
就已经提供给大家了

1163
00:39:32,856 --> 0:39:35,456
其实 有的在 macOS 10.0 之前就有了

1164
00:39:35,776 --> 0:39:37,636
因此 如果你正确地

1165
00:39:37,636 --> 0:39:40,156
进行设置  

1166
00:39:40,156 --> 0:39:41,956
那么在之前的操作系统上  

1167
00:39:41,956 --> 0:39:43,686
他们也会显示出

1168
00:39:43,686 --> 0:39:44,626
特殊的 NSColor

1169
00:39:44,626 --> 0:39:46,866
正如你所期望的那样

1170
00:39:46,866 --> 0:39:48,116
接着 如果你在 Mojave 上运行它

1171
00:39:48,116 --> 0:39:49,786
你会自动得到那个素材

1172
00:39:50,866 --> 0:39:52,886
当然 NSBox

1173
00:39:52,886 --> 0:39:53,876
自定义风格让你能够

1174
00:39:53,876 --> 0:39:55,786
设置一个填充色彩

1175
00:39:56,316 --> 0:39:58,406
并将它向后兼容到 Leopard 10.5 当中

1176
00:39:58,406 --> 0:39:59,096
NSCollectionView 也是一样

1177
00:39:59,496 --> 0:40:00,556
而无论你用的是

1178
00:39:59,496 --> 0:40:00,556
而无论你用的是

1179
00:40:00,556 --> 0:40:01,626
之前的 NSCollectionView API

1180
00:40:01,746 --> 0:40:03,406
还是最新的版本

1181
00:40:03,406 --> 0:40:05,016
都不会影响它的工作

1182
00:40:05,016 --> 0:40:07,776
当然我们希望你用新的版本

1183
00:40:08,396 --> 0:40:11,706
最后是 启动深色模式

1184
00:40:12,266 --> 0:40:14,386
通常这只是在关联了

1185
00:40:14,386 --> 0:40:17,426
10.14 SDK 之后才可以进行

1186
00:40:17,426 --> 0:40:19,966
但是你也看到了 其实

1187
00:40:19,966 --> 0:40:21,376
创建一个深色模式下的 App

1188
00:40:21,376 --> 0:40:23,126
所需要的工具

1189
00:40:23,126 --> 0:40:24,876
并非 10.14 SDK 上专有

1190
00:40:24,876 --> 0:40:26,866
你完全可以

1191
00:40:26,866 --> 0:40:28,466
用现有的 10.13 SDK

1192
00:40:28,466 --> 0:40:30,126
来进行创建

1193
00:40:31,246 --> 0:40:33,356
那么 如果在某种情况下

1194
00:40:33,356 --> 0:40:34,396
你无法更新你的 SDK

1195
00:40:34,396 --> 0:40:36,446
我们有个 Info.plist Key

1196
00:40:36,446 --> 0:40:38,036
你可以用它

1197
00:40:38,036 --> 0:40:39,326
进入深色模式

1198
00:40:39,926 --> 0:40:42,286
它叫做 NSRequiresAquaSystemAppearance

1199
00:40:42,576 --> 0:40:43,706
如果将其设为 “NO”

1200
00:40:43,706 --> 0:40:45,206
那么就启动了深色模式

1201
00:40:45,206 --> 0:40:46,706
即使你使用的是

1202
00:40:46,706 --> 0:40:47,926
之前的 SDK

1203
00:40:48,546 --> 0:40:50,176
当然我们十分希望你

1204
00:40:50,446 --> 0:40:51,396
能更新你的 SDK

1205
00:40:51,396 --> 0:40:52,696
因为这是一个更明智的选择

1206
00:40:53,586 --> 0:40:55,276
你也可以将该秘钥设为 “YES”

1207
00:40:55,276 --> 0:40:57,136
使其暂时失效

1208
00:40:57,136 --> 0:40:58,916
我想强调一下 只是暂时

1209
00:40:59,326 --> 0:41:00,586
你可以利用它给你的时间

1210
00:40:59,326 --> 0:41:00,586
你可以利用它给你的时间

1211
00:41:00,586 --> 0:41:01,956
来获取一个完美

1212
00:41:01,956 --> 0:41:03,506
支持深色模式的

1213
00:41:03,506 --> 0:41:05,146
更新版本

1214
00:41:07,876 --> 0:41:09,576
最后是 一些技巧和方法

1215
00:41:11,416 --> 0:41:13,126
首先

1216
00:41:13,126 --> 0:41:15,196
当你更新你的 App 时

1217
00:41:15,196 --> 0:41:16,016
你可以彻底审查

1218
00:41:16,016 --> 0:41:17,866
你对 NSColor 的使用情况

1219
00:41:17,906 --> 0:41:21,066
你只需要通过搜索你的代码库

1220
00:41:21,066 --> 0:41:22,606
并查看你使用它的地方

1221
00:41:23,156 --> 0:41:24,066
你可能会发现

1222
00:41:24,066 --> 0:41:25,866
一些可以升级的地方

1223
00:41:25,866 --> 0:41:27,756
来优化你的

1224
00:41:27,756 --> 0:41:28,786
深色模式体验

1225
00:41:28,786 --> 0:41:30,536
比如说 这里

1226
00:41:30,536 --> 0:41:31,856
我们发现在一些地方

1227
00:41:31,856 --> 0:41:33,016
我们正在使用非动态的 

1228
00:41:33,046 --> 0:41:34,886
命名色彩以及一些

1229
00:41:34,886 --> 0:41:36,126
包含硬编码的色彩

1230
00:41:36,386 --> 0:41:37,556
当我们遇到这些情况时

1231
00:41:37,586 --> 0:41:39,756
可以选择以下

1232
00:41:39,756 --> 0:41:41,956
两种方案中的其中一种

1233
00:41:42,456 --> 0:41:44,876
第一种 也许有一种

1234
00:41:44,876 --> 0:41:46,226
内建系统色彩

1235
00:41:46,226 --> 0:41:47,746
它能描述我想要的效果

1236
00:41:47,746 --> 0:41:48,976
在外观中也是完全动态的

1237
00:41:49,376 --> 0:41:51,596
或者 第二种 

1238
00:41:51,596 --> 0:41:53,006
这是一个自定义色彩

1239
00:41:53,006 --> 0:41:54,576
它对我的 App 来说非常重要

1240
00:41:55,286 --> 0:41:57,066
第一种情况非常简单

1241
00:41:57,066 --> 0:41:58,236
我们之前在这个标签上使用黑色

1242
00:41:58,236 --> 0:41:59,526
之后我们可以

1243
00:41:59,526 --> 0:42:00,696
将其转为 labelColor

1244
00:41:59,526 --> 0:42:00,696
将其转为 labelColor

1245
00:42:00,696 --> 0:42:02,106
这样一来

1246
00:42:02,106 --> 0:42:02,996
它就是完全动态的了

1247
00:42:03,956 --> 0:42:05,756
但在第二种情况中

1248
00:42:05,756 --> 0:42:06,816
我们也许发现这个色彩

1249
00:42:06,816 --> 0:42:07,906
对我们的 App 是十分重要的

1250
00:42:07,906 --> 0:42:09,476
把它放入素材目录

1251
00:42:09,476 --> 0:42:11,386
是一个很好的想法

1252
00:42:12,576 --> 0:42:13,646
我们不仅清理了我们的代码

1253
00:42:13,646 --> 0:42:15,286
因为我们从代码中

1254
00:42:15,286 --> 0:42:16,466
删掉了这些乱七八糟的数字

1255
00:42:16,466 --> 0:42:17,746
并将它们放入一个数据驱动源中

1256
00:42:18,396 --> 0:42:20,186
我们还可以接着为该色彩

1257
00:42:20,396 --> 0:42:22,616
设置一个深色变体

1258
00:42:22,616 --> 0:42:24,206
这样我们就能嵌入

1259
00:42:24,206 --> 0:42:25,286
对深色模式的支持了

1260
00:42:28,136 --> 0:42:29,716
另一个常见的问题来源是

1261
00:42:29,716 --> 0:42:30,866
离屏绘制

1262
00:42:31,526 --> 0:42:33,266
要进行离屏绘制

1263
00:42:33,406 --> 0:42:34,226
你需要确保

1264
00:42:34,226 --> 0:42:35,266
你对外观 

1265
00:42:35,266 --> 0:42:36,736
以及其他绘制条件 

1266
00:42:36,736 --> 0:42:37,676
十分敏感

1267
00:42:38,216 --> 0:42:39,546
关于这个 有个情况很常见

1268
00:42:39,546 --> 0:42:41,386
就是用 NSImage 中的 lockFocus API

1269
00:42:41,386 --> 0:42:44,246
来试着绘制自定义 NSImage

1270
00:42:45,246 --> 0:42:46,266
这种情况下 我们要

1271
00:42:46,266 --> 0:42:47,656
试着画一个带标记的图像

1272
00:42:48,726 --> 0:42:49,906
我们有一个基础图像

1273
00:42:49,906 --> 0:42:50,906
但由于我们的蜥蜴有了一些新的改变

1274
00:42:50,906 --> 0:42:52,036
我们需要在它的头像上

1275
00:42:52,036 --> 0:42:53,286
添加一个标记

1276
00:42:53,926 --> 0:42:55,786
在这个例子里

1277
00:42:55,786 --> 0:42:57,776
我们创建一个 NSImage

1278
00:42:57,776 --> 0:42:59,796
并在它上面调用 lockFocus() 之后进行绘制

1279
00:43:00,736 --> 0:43:02,206
但问题是

1280
00:43:02,206 --> 0:43:03,816
一旦我们使用了 lockFocus

1281
00:43:04,196 --> 0:43:05,656
我们就失去了许多语义

1282
00:43:05,856 --> 0:43:07,906
我们现在只有一个位图表示

1283
00:43:08,466 --> 0:43:10,496
如果外观发生了改变

1284
00:43:10,756 --> 0:43:12,086
或者其他许多情况改变了

1285
00:43:12,086 --> 0:43:13,106
包括我们所说的

1286
00:43:13,106 --> 0:43:14,436
基底比例系数

1287
00:43:14,436 --> 0:43:15,606
比如你将窗口从一个

1288
00:43:15,606 --> 0:43:16,966
视网膜显示屏移动到了

1289
00:43:16,966 --> 0:43:18,926
一个非视网膜显示屏

1290
00:43:18,926 --> 0:43:19,706
突然 这个绘制就过时了

1291
00:43:20,846 --> 0:43:22,106
所以 更好地解决方法就是

1292
00:43:22,106 --> 0:43:24,596
使用基于代码块的 NSImage

1293
00:43:24,866 --> 0:43:27,386
用图像初始化程序

1294
00:43:27,586 --> 0:43:28,796
和 NSImage(size: flipped: )绘制处理程序

1295
00:43:29,656 --> 0:43:31,516
你可以直接进行 

1296
00:43:31,516 --> 0:43:32,516
与之前一样的绘制

1297
00:43:32,516 --> 0:43:34,426
但要在这个代码块中进行

1298
00:43:34,716 --> 0:43:36,286
当你给这种图像指定

1299
00:43:36,286 --> 0:43:38,286
一个 NSImageView 时

1300
00:43:38,286 --> 0:43:39,466
这个代码块会自动重新运行

1301
00:43:39,466 --> 0:43:41,796
如果外观发生变化

1302
00:43:41,796 --> 0:43:43,636
比例系数发生变化

1303
00:43:43,666 --> 0:43:45,036
色彩空间发生变化

1304
00:43:45,036 --> 0:43:45,946
其实任何东西发生变化都会导致它重新运行

1305
00:43:46,706 --> 0:43:48,006
这是一个好消息

1306
00:43:48,006 --> 0:43:49,816
因为如果我们的标记填充色彩

1307
00:43:49,816 --> 0:43:51,336
是一个动态色彩

1308
00:43:51,336 --> 0:43:52,296
那么它就会一直处理为

1309
00:43:52,296 --> 0:43:53,196
正确的外观

1310
00:43:54,696 --> 0:43:55,906
还有一些其他的方法

1311
00:43:55,906 --> 0:43:56,546
也许能帮你进行

1312
00:43:56,546 --> 0:43:57,206
离屏绘制

1313
00:43:57,906 --> 0:43:59,056
你也许在通过

1314
00:43:59,056 --> 0:44:00,646
NSGraphicsContext

1315
00:43:59,056 --> 0:44:00,646
NSGraphicsContext

1316
00:44:00,776 --> 0:44:02,036
或 CGBitmapContext

1317
00:44:02,036 --> 0:44:03,326
制作自定义位图图形环境

1318
00:44:03,876 --> 0:44:04,866
根据你在做的事情

1319
00:44:04,866 --> 0:44:06,546
这些也许还可以

1320
00:44:06,546 --> 0:44:07,856
用一个基于代码块的

1321
00:44:07,856 --> 0:44:09,066
NSImage 来替换

1322
00:44:09,556 --> 0:44:11,796
再者 如果使用参数为 NSRect

1323
00:44:11,796 --> 0:44:13,826
的 cacheDisplay() 方法

1324
00:44:13,826 --> 0:44:15,676
来将你的图片缓存为

1325
00:44:15,676 --> 0:44:18,186
一个位图表示

1326
00:44:18,186 --> 0:44:19,356
那么要注意 

1327
00:44:19,356 --> 0:44:20,656
这种方法并不会捕捉到一些

1328
00:44:21,006 --> 0:44:22,966
我们更进阶的渲染技术

1329
00:44:22,966 --> 0:44:25,356
比如素材和模糊

1330
00:44:25,356 --> 0:44:26,466
如果你的外观改变了

1331
00:44:26,466 --> 0:44:27,546
那么这种创建绘图的方法

1332
00:44:27,546 --> 0:44:28,856
也就过时了

1333
00:44:28,856 --> 0:44:33,376
要注意这点

1334
00:44:33,506 --> 0:44:35,676
你也许还会碰上另一种情况

1335
00:44:36,996 --> 0:44:38,826
如果你有一个 NSAttributedString 或

1336
00:44:38,866 --> 0:44:40,416
NSTextStorage

1337
00:44:40,416 --> 0:44:41,806
而你在手动操作这些属性

1338
00:44:42,166 --> 0:44:44,926
在这里 我将我的属性设置为

1339
00:44:44,926 --> 0:44:47,226
一个带着字体的词典

1340
00:44:48,166 --> 0:44:49,316
然后就会呈现出这样的效果

1341
00:44:49,316 --> 0:44:51,496
甚至当你切换为深色模式时

1342
00:44:51,496 --> 0:44:52,596
你的文本仍在绘制黑色

1343
00:44:52,596 --> 0:44:53,526
这里发生了什么

1344
00:44:54,666 --> 0:44:56,286
好 我们错过了一个前景颜色属性

1345
00:44:56,286 --> 0:44:58,536
当文本绘制引擎

1346
00:44:58,536 --> 0:45:00,136
遇到一系列的

1347
00:44:58,536 --> 0:45:00,136
遇到一系列的

1348
00:45:00,136 --> 0:45:02,956
没有一个前景颜色属性的属性字符串时

1349
00:45:02,956 --> 0:45:04,956
它便会默认为黑色

1350
00:45:04,956 --> 0:45:06,596
这就是它一直默认的颜色

1351
00:45:06,596 --> 0:45:08,006
并且它还会继续

1352
00:45:08,006 --> 0:45:09,296
为了兼容而保持

1353
00:45:09,296 --> 0:45:10,016
默认颜色

1354
00:45:11,036 --> 0:45:12,596
修复方法之一是

1355
00:45:12,596 --> 0:45:13,586
给我们的一个动态系统色彩

1356
00:45:13,586 --> 0:45:15,726
明确地设置一个前景颜色

1357
00:45:15,726 --> 0:45:17,436
接着就会产生我们

1358
00:45:17,436 --> 0:45:18,236
所期待的效果

1359
00:45:19,616 --> 0:45:21,596
但是还有一种更好的方法

1360
00:45:21,596 --> 0:45:22,596
如果你手动绘制

1361
00:45:22,596 --> 0:45:24,196
属性字符串

1362
00:45:24,196 --> 0:45:25,776
你应该切换成一个 Cocoa 控件

1363
00:45:25,776 --> 0:45:27,256
比如一个 NSTextField

1364
00:45:27,536 --> 0:45:28,426
它将自动为你完成这些

1365
00:45:28,426 --> 0:45:30,876
或者 如果你正在

1366
00:45:30,876 --> 0:45:32,386
操作一个 textView 的存储

1367
00:45:32,386 --> 0:45:36,376
我们有新的 API

1368
00:45:36,376 --> 0:45:38,256
叫做 performValidatedReplacement

1369
00:45:38,256 --> 0:45:40,636
它会在 textView 上产生不错的效果

1370
00:45:40,966 --> 0:45:42,846
如果你继续用一个 textView 中的

1371
00:45:43,026 --> 0:45:45,336
属性字符串

1372
00:45:45,336 --> 0:45:47,976
来代替一个字符串

1373
00:45:47,976 --> 0:45:50,336
那它就会用 textView 中的正在使用属性

1374
00:45:50,406 --> 0:45:51,456
填充任何缺失的属性

1375
00:45:51,456 --> 0:45:54,666
所以你可以继续

1376
00:45:54,666 --> 0:45:55,776
制定新的属性字符串

1377
00:45:55,776 --> 0:45:56,936
而不用手动

1378
00:45:57,036 --> 0:46:00,000
合并所有的属性

1379
00:46:03,376 --> 0:46:04,546
这是我们在一些地方

1380
00:46:04,546 --> 0:46:05,776
所遇到的问题

1381
00:46:06,296 --> 0:46:07,526
即将外观设置在了

1382
00:46:07,526 --> 0:46:08,666
“Interface Builder（界面构建器）”里

1383
00:46:09,346 --> 0:46:10,246
如果你继续创建

1384
00:46:10,246 --> 0:46:11,576
并调试你的 App

1385
00:46:11,576 --> 0:46:13,646
并且 你的 App 中的某些地方

1386
00:46:13,686 --> 0:46:15,596
并没有切换过来

1387
00:46:15,596 --> 0:46:18,136
也许是因为你的界面构建器中有这个

1388
00:46:18,136 --> 0:46:20,496
硬编码的 Aqua 外观

1389
00:46:20,746 --> 0:46:21,976
这个很容易被忽视

1390
00:46:22,016 --> 0:46:23,756
因为在今天之前

1391
00:46:23,756 --> 0:46:24,956
你一直都是在用 Aqua 运行程序

1392
00:46:25,366 --> 0:46:26,536
因此你并没有注意到这点

1393
00:46:27,056 --> 0:46:29,226
这个修复方法也很简单

1394
00:46:29,866 --> 0:46:30,976
如果你将这个  

1395
00:46:30,976 --> 0:46:32,696
在弹出菜单里

1396
00:46:32,696 --> 0:46:34,206
设置回“Inherited（继承）”选项

1397
00:46:34,206 --> 0:46:36,146
你的视图会自动进行继承它的父辈

1398
00:46:36,696 --> 0:46:40,516
还有一个特殊的例子是

1399
00:46:40,626 --> 0:46:41,556
NSVisualEffectView

1400
00:46:41,916 --> 0:46:42,966
如果你在界面构建器里

1401
00:46:42,966 --> 0:46:44,646
或者在代码里 

1402
00:46:44,646 --> 0:46:45,866
有一个 visualEffectView

1403
00:46:45,866 --> 0:46:47,516
你很可能要将两种动态的外观中的一种

1404
00:46:47,516 --> 0:46:49,656
设置在它上面

1405
00:46:49,746 --> 0:46:51,936
好消息是

1406
00:46:51,936 --> 0:46:55,086
在 macOS 10.14 中不再需要这样设置

1407
00:46:55,436 --> 0:46:56,606
而 NSVisualEffectView 将自动

1408
00:46:56,676 --> 0:46:58,076
根据他所继承的外观

1409
00:46:58,076 --> 0:47:00,516
选择正确的动态外观

1410
00:46:58,076 --> 0:47:00,516
选择正确的动态外观

1411
00:47:00,886 --> 0:47:02,246
所以 如果它继承了 darkAqua

1412
00:47:02,366 --> 0:47:03,526
它就会选择 vibrantDark

1413
00:47:03,826 --> 0:47:05,176
而如果继承了 Aqua

1414
00:47:05,176 --> 0:47:05,916
就会选择 vibrantLight

1415
00:47:06,146 --> 0:47:08,666
修补方法是这样

1416
00:47:08,666 --> 0:47:10,186
在界面构建器中

1417
00:47:10,186 --> 0:47:11,606
你可以将其设置为 “Inherited”

1418
00:47:11,606 --> 0:47:12,666
然后在代码里

1419
00:47:12,666 --> 0:47:14,236
你可以设置外观 “nil”

1420
00:47:14,236 --> 0:47:14,806
或者删除你的重写

1421
00:47:15,126 --> 0:47:20,086
说到界面构建器

1422
00:47:20,086 --> 0:47:22,016
它是一个很棒的工具

1423
00:47:22,016 --> 0:47:23,766
可以很好地用来设计和

1424
00:47:23,766 --> 0:47:24,656
预览你的视图

1425
00:47:25,206 --> 0:47:27,136
比如说 这里有一个视图

1426
00:47:27,136 --> 0:47:28,726
确切地说是一个

1427
00:47:28,726 --> 0:47:30,596
使用界面构建器设计工具的自定义视图

1428
00:47:30,986 --> 0:47:32,086
我在渲染一个渐变的同时

1429
00:47:32,086 --> 0:47:34,026
我就能直接在画布中看到它

1430
00:47:34,326 --> 0:47:35,926
默认情况下

1431
00:47:35,926 --> 0:47:37,886
画布会自动用它当前的外观模式

1432
00:47:37,886 --> 0:47:39,496
来预览我的自定视图

1433
00:47:39,496 --> 0:47:41,426
在这里是深色模式

1434
00:47:42,336 --> 0:47:43,596
但是看看下面

1435
00:47:43,596 --> 0:47:45,306
这有一个新的切换开关

1436
00:47:45,306 --> 0:47:46,646
你可以把它切换为

1437
00:47:46,646 --> 0:47:47,906
浅色外观

1438
00:47:47,906 --> 0:47:48,986
这样你可以预览你的视图

1439
00:47:48,986 --> 0:47:50,426
在任意外观中的样子了

1440
00:47:50,936 --> 0:47:52,936
多亏了界面构建器

1441
00:47:52,936 --> 0:47:54,156
对素材目录颜色的

1442
00:47:54,156 --> 0:47:56,446
良好支持

1443
00:47:56,446 --> 0:47:57,876
我们才能使用我们的

1444
00:47:57,876 --> 0:47:59,436
自定义素材目录颜色

1445
00:47:59,436 --> 0:48:01,116
它们有浅色和深色的变体

1446
00:47:59,436 --> 0:48:01,116
它们有浅色和深色的变体

1447
00:48:01,116 --> 0:48:03,116
我们可以在画布中实时预览

1448
00:48:03,696 --> 0:48:04,776
如果你看到那里有个

1449
00:48:04,776 --> 0:48:05,966
固定在弹出按钮前的

1450
00:48:05,966 --> 0:48:07,156
小箭头按钮

1451
00:48:07,156 --> 0:48:08,096
你可以用它来追踪

1452
00:48:08,096 --> 0:48:09,396
直接进入到你的

1453
00:48:09,396 --> 0:48:10,936
素材目录的定义中

1454
00:48:10,936 --> 0:48:12,866
你可以实时看到一切变化

1455
00:48:13,816 --> 0:48:15,106
你可以直接这样做

1456
00:48:15,106 --> 0:48:16,416
不用构建或者重新编译

1457
00:48:16,456 --> 0:48:18,136
当你构建并运行时

1458
00:48:18,136 --> 0:48:20,646
你会在你的调试工具栏中

1459
00:48:20,646 --> 0:48:22,646
看到一个新的东西

1460
00:48:22,646 --> 0:48:24,056
它会产生菜单

1461
00:48:24,056 --> 0:48:25,766
让你为你的 App 选择外观

1462
00:48:26,446 --> 0:48:27,636
这样很方便

1463
00:48:27,636 --> 0:48:29,096
你可以预览你的 App

1464
00:48:29,096 --> 0:48:30,746
在各种外观下的样子

1465
00:48:30,746 --> 0:48:32,426
不用重新配置整个系统

1466
00:48:33,686 --> 0:48:34,886
你不仅可以选择浅色还是深色

1467
00:48:34,886 --> 0:48:36,056
也可以选择

1468
00:48:36,056 --> 0:48:37,066
高对比度变体

1469
00:48:37,066 --> 0:48:38,996
并对它们进行测试

1470
00:48:40,146 --> 0:48:41,276
同时 如果你有一台

1471
00:48:41,276 --> 0:48:42,796
带触控栏的 Mac 

1472
00:48:42,796 --> 0:48:44,476
它也会在你的触控栏出现

1473
00:48:44,476 --> 0:48:45,566
你甚至不需要离开 App

1474
00:48:45,566 --> 0:48:47,156
回到 Xcode 中 就可以

1475
00:48:47,746 --> 0:48:48,000
完成这个操作

1476
00:48:50,316 --> 0:48:51,326
最后 我想谈谈

1477
00:48:51,326 --> 0:48:53,176
Xcode 中的一个很棒的工具

1478
00:48:53,176 --> 0:48:54,326
它非常适合被用于调试

1479
00:48:54,326 --> 0:48:55,426
深色模式下的 App

1480
00:48:56,346 --> 0:48:58,676
这是我们的 App

1481
00:48:58,676 --> 0:48:59,996
看起来还不错

1482
00:48:59,996 --> 0:49:01,536
没什么不对的地方

1483
00:48:59,996 --> 0:49:01,536
没什么不对的地方

1484
00:49:02,286 --> 0:49:04,156
但是当我稍微来回

1485
00:49:04,156 --> 0:49:06,586
滑动几下 哦

1486
00:49:06,586 --> 0:49:07,476
我发现了一些

1487
00:49:07,476 --> 0:49:08,236
意想不到的事

1488
00:49:08,346 --> 0:49:09,326
这里有一个浅色的背景

1489
00:49:09,426 --> 0:49:11,516
隐藏在背后某处

1490
00:49:11,516 --> 0:49:12,936
而如果不是这个小小的滑动

1491
00:49:12,936 --> 0:49:14,056
我们很难看到它

1492
00:49:14,776 --> 0:49:16,446
这是应该使用 “View Debugger（视图调试器）”

1493
00:49:16,446 --> 0:49:17,446
的一个很好的例子

1494
00:49:18,686 --> 0:49:19,606
用视图调试器的

1495
00:49:19,606 --> 0:49:22,026
扩展 3D 视图

1496
00:49:22,026 --> 0:49:23,336
就能很容易地

1497
00:49:23,416 --> 0:49:24,686
看到我们那个不太对的视图

1498
00:49:25,606 --> 0:49:26,786
在这个例子中 我们能看到

1499
00:49:26,786 --> 0:49:27,756
虽然我们的集合视图

1500
00:49:27,756 --> 0:49:29,266
显示出我们想要的背景

1501
00:49:29,416 --> 0:49:31,116
但在它后面的滚动视图的

1502
00:49:31,116 --> 0:49:33,526
背景却仍然是浅色的

1503
00:49:33,526 --> 0:49:35,556
我们可以选出这部分

1504
00:49:35,556 --> 0:49:37,396
并用 Inspector 来检查

1505
00:49:37,396 --> 0:49:38,226
它是如何配置的

1506
00:49:38,226 --> 0:49:39,606
在这里 我们可以确定

1507
00:49:39,606 --> 0:49:40,726
没错 它有一个

1508
00:49:40,726 --> 0:49:42,156
硬编码的白色

1509
00:49:42,156 --> 0:49:43,776
这很好处理

1510
00:49:44,916 --> 0:49:46,036
视图调试器在 Xcode 10 中

1511
00:49:46,036 --> 0:49:47,276
做了很多优化

1512
00:49:47,276 --> 0:49:48,756
能够很好地调试

1513
00:49:48,756 --> 0:49:49,836
深色模式的 App

1514
00:49:50,666 --> 0:49:53,096
包括色彩

1515
00:49:53,146 --> 0:49:54,326
它们现在可以显示出色彩的名字

1516
00:49:54,326 --> 0:49:55,756
包括动态系统色彩

1517
00:49:55,756 --> 0:49:57,416
和你的素材目录色彩

1518
00:49:57,416 --> 0:49:59,016
这样你可以分辨出

1519
00:49:59,096 --> 0:50:00,546
这些 RGB 成分来自哪里

1520
00:49:59,096 --> 0:50:00,546
这些 RGB 成分来自哪里

1521
00:50:00,546 --> 0:50:02,476
它还会显示你的

1522
00:50:02,476 --> 0:50:03,896
NSAppearance 视图的配置

1523
00:50:04,206 --> 0:50:06,946
包括它要绘制的外观

1524
00:50:06,946 --> 0:50:08,586
以及在该对象上

1525
00:50:08,586 --> 0:50:10,196
是否有任何

1526
00:50:10,196 --> 0:50:12,000
NSAppearance 的局部重写

1527
00:50:14,496 --> 0:50:16,396
好了 我们已经涉及了

1528
00:50:16,396 --> 0:50:17,806
非常多的内容

1529
00:50:17,806 --> 0:50:18,836
让我们快速回顾一下

1530
00:50:18,836 --> 0:50:19,096
确保我们能记住

1531
00:50:19,926 --> 0:50:21,436
我们从 NSAppearance 开始 

1532
00:50:21,906 --> 0:50:23,526
用它顺利地

1533
00:50:23,526 --> 0:50:25,226
绘制了基于主题的

1534
00:50:25,226 --> 0:50:26,486
自定义视图

1535
00:50:27,596 --> 0:50:28,796
然后我们学习了如何

1536
00:50:28,796 --> 0:50:30,356
使用全新的 NSVisualEffectView

1537
00:50:30,356 --> 0:50:31,906
素材的调色盘

1538
00:50:31,966 --> 0:50:33,506
来增加我们 UI 的深度并美化它

1539
00:50:34,306 --> 0:50:35,686
我们谈到了如何在一些

1540
00:50:35,686 --> 0:50:37,026
有趣的环境中绘图

1541
00:50:37,026 --> 0:50:39,176
包括 Vibrancy 和选定

1542
00:50:39,516 --> 0:50:40,826
之后谈到通过一些方法

1543
00:50:40,826 --> 0:50:42,056
Xcode 可以帮你

1544
00:50:42,056 --> 0:50:43,406
设计和调试你的 App 的

1545
00:50:43,406 --> 0:50:44,566
深色模式

1546
00:50:44,916 --> 0:50:46,196
你可以像往常一样 前往

1547
00:50:46,196 --> 0:50:47,886
developer.apple.com

1548
00:50:47,886 --> 0:50:49,286
再次观看此次讨论会的视频

1549
00:50:49,286 --> 0:50:51,196
也可以观看任何

1550
00:50:51,196 --> 0:50:52,166
相关的资源

1551
00:50:52,576 --> 0:50:54,186
我们今天有个特别的

1552
00:50:54,186 --> 0:50:58,106
Cocoa 和深色模式实验室

1553
00:50:58,106 --> 0:50:59,266
在下午 2:00 进行

1554
00:50:59,266 --> 0:51:00,326
届时不仅会有 Cocoa 的工程师

1555
00:50:59,266 --> 0:51:00,326
届时不仅会有 Cocoa 的工程师

1556
00:51:00,326 --> 0:51:01,426
帮助你解决代码问题

1557
00:51:01,426 --> 0:51:02,836
还有人机界面设计师

1558
00:51:02,836 --> 0:51:03,766
帮助你解决

1559
00:51:03,766 --> 0:51:04,936
你的设计问题

1560
00:51:05,286 --> 0:51:07,136
所以先去吃午饭吧

1561
00:51:07,136 --> 0:51:08,646
思考一下深色模式

1562
00:51:08,646 --> 0:51:09,676
然后再来与我们相会

1563
00:51:09,996 --> 0:51:11,086
最后 我们还有一个

1564
00:51:11,086 --> 0:51:12,546
额外的 Cocoa 实验室

1565
00:51:12,546 --> 0:51:14,000
在周五上午 11:00

1566
00:51:14,496 --> 0:51:14,696
好的

1567
00:51:14,746 --> 0:51:15,466
谢谢大家

1568
00:51:16,346 --> 0:51:18,000
[ 掌声 ]
