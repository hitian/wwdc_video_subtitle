1
00:00:17,818 --> 0:00:21,421
嗨 我是Eric Dudiak

2
00:00:21,722 --> 0:00:25,092
今天我们将讨论Xcode中的

3
00:00:25,893 --> 0:00:28,629
现在开发app需要对源代码

4
00:00:28,695 --> 0:00:30,397
和项目进行大量修改

5
00:00:30,464 --> 0:00:31,765
为了帮助管理那些更改

6
00:00:31,832 --> 0:00:34,101
Xcode提供了

7
00:00:36,036 --> 0:00:38,071
今天我们来看看其中的一些工具

8
00:00:38,705 --> 0:00:40,207
首先我们将看看

9
00:00:40,274 --> 0:00:43,177
如何使用源代码控制

10
00:00:43,243 --> 0:00:44,578
（创建一个新的存储库）

11
00:00:44,645 --> 0:00:45,612
（更改并查看更改）

12
00:00:45,679 --> 0:00:48,415
接下来我们将研究

13
00:00:48,482 --> 0:00:49,483
更改项目并查看更改

14
00:00:50,717 --> 0:00:51,785
（主机和共享存储库）

15
00:00:51,852 --> 0:00:54,888
我们还将研究如何托管

16
00:00:54,955 --> 0:00:57,391
包括同步更改

17
00:00:58,292 --> 0:00:59,259
（解决和避免冲突）

18
00:00:59,326 --> 0:01:02,329
我们将简要介绍如何解决和避免冲突

19
00:00:59,326 --> 0:01:02,329
我们将简要介绍如何解决和避免冲突

20
00:01:03,430 --> 0:01:06,767
最后我们将快速看一下

21
00:01:06,834 --> 0:01:07,868
（下拉请求和分叉）

22
00:01:09,136 --> 0:01:12,806
那么首先让我们看看如何

23
00:01:12,873 --> 0:01:14,741
Git是业界标准的源代码管理系统

24
00:01:14,808 --> 0:01:16,844
支持并包含在Xcode中

25
00:01:16,910 --> 0:01:18,712
（一个新项目）

26
00:01:19,413 --> 0:01:23,050
使用Git的第一步是

27
00:01:23,550 --> 0:01:25,552
这将在Git提交中识别你

28
00:01:25,619 --> 0:01:30,057
并使你很容易识别

29
00:01:30,824 --> 0:01:34,161
支持在源代码管理选项卡的

30
00:01:34,895 --> 0:01:37,631
Git选项下的首选项中

31
00:01:41,101 --> 0:01:43,237
在用Xcode创建新项目时

32
00:01:43,537 --> 0:01:45,973
你还可以选择创建Git存储库

33
00:01:47,875 --> 0:01:49,977
在新项目的保存操作期间

34
00:01:50,043 --> 0:01:54,448
你只需选中这里显示的框

35
00:01:55,382 --> 0:01:58,819
现在让我们看看它的作用

36
00:02:00,320 --> 0:02:02,990
你可能已经熟悉了

37
00:02:03,490 --> 0:02:05,826
这里用磁盘上的一个文件夹表示

38
00:02:06,493 --> 0:02:09,263
它包括你的源文件和类似的东西

39
00:02:09,329 --> 0:02:10,364
（我的项目）

40
00:02:10,430 --> 0:02:13,500
现在当你选中该框

41
00:02:14,401 --> 0:02:16,270
你将得到一个.Git文件夹

42
00:02:17,204 --> 0:02:19,806
它代表了你的项目的存储库

43
00:02:19,873 --> 0:02:21,441
并且通常会对你隐藏

44
00:02:23,177 --> 0:02:27,948
现在它被放入你的项目文件夹中

45
00:02:30,484 --> 0:02:33,487
在Xcode中创建一个新存储库

46
00:02:34,121 --> 0:02:36,056
整个项目的副本都是

47
00:02:36,123 --> 0:02:39,226
在某个时间点生成并快照的

48
00:02:40,127 --> 0:02:42,396
你的项目的这个快照称为“提交”

49
00:02:44,665 --> 0:02:47,434
（一个提交）

50
00:02:47,868 --> 0:02:50,337
Xcode中的每个提交

51
00:02:51,705 --> 0:02:53,707
当你对我们的项目源代码进行更改时

52
00:02:53,774 --> 0:02:54,875
你可以创建提交

53
00:02:54,942 --> 0:02:57,945
在项目的整个期间内会做更多的快照

54
00:02:58,345 --> 0:03:01,348
在创建这些更改提交时

55
00:02:58,345 --> 0:03:01,348
在创建这些更改提交时

56
00:03:04,785 --> 0:03:07,654
这些快照组成了你的项目的历史

57
00:03:08,722 --> 0:03:11,658
当你做更多的提交时

58
00:03:14,061 --> 0:03:17,631
这些信息构成了你的存储库

59
00:03:19,833 --> 0:03:22,769
既然已经从概念上讨论了

60
00:03:22,836 --> 0:03:27,140
那么就让我们来看看如何进行更改

61
00:03:27,207 --> 0:03:28,976
（进行更改）

62
00:03:29,042 --> 0:03:32,980
最简单的方法之一是

63
00:03:33,514 --> 0:03:36,950
它突出显示了更改代码时

64
00:03:38,752 --> 0:03:40,687
当你稍后回来时

65
00:03:40,754 --> 0:03:43,323
更改栏能使你很容易看到

66
00:03:44,124 --> 0:03:48,695
随着更改的进行

67
00:03:51,698 --> 0:03:55,235
在大型文件中 它也使你

68
00:03:55,569 --> 0:03:59,706
实际上你可以在Xcode中的

69
00:04:01,675 --> 0:04:03,343
除了更改栏之外

70
00:04:03,410 --> 0:04:06,013
你还将在项目导航器中看到状态标志

71
00:04:06,079 --> 0:04:08,949
告诉你自上次提交以来

72
00:04:10,884 --> 0:04:11,952
（提交）

73
00:04:12,019 --> 0:04:15,355
既然我们已经做了一些更改

74
00:04:15,989 --> 0:04:17,724
这些是你项目的快照

75
00:04:17,791 --> 0:04:21,060
你可以稍后引用

76
00:04:21,128 --> 0:04:24,531
让我们简要地看看如何

77
00:04:27,067 --> 0:04:30,704
现在我们看到你可以很容易地

78
00:04:31,338 --> 0:04:34,908
现在当你准备将这些更改

79
00:04:35,275 --> 0:04:37,811
请使用源代码管理菜单

80
00:04:44,218 --> 0:04:48,055
提交表将显示项目中当前的所有更改

81
00:04:48,622 --> 0:04:51,558
它们会给我们展示一个并排比较

82
00:04:51,925 --> 0:04:53,460
提交中

83
00:04:53,861 --> 0:04:57,197
甚至包括哪些特定的更改

84
00:04:58,599 --> 0:05:00,634
选择适当的更改后

85
00:04:58,599 --> 0:05:00,634
选择适当的更改后

86
00:05:01,101 --> 0:05:03,971
输入一条消息来记录更改的原因

87
00:05:04,538 --> 0:05:08,008
这条消息可以使你

88
00:05:08,075 --> 0:05:09,476
回头查看更改时

89
00:05:10,978 --> 0:05:12,012
（查看历史记录）

90
00:05:12,079 --> 0:05:15,949
现在我们已经做了几个提交

91
00:05:16,550 --> 0:05:18,485
你可能需要参考它们

92
00:05:18,552 --> 0:05:22,689
以更好地理解你的代码和项目

93
00:05:23,223 --> 0:05:25,659
这对于发现在项目中引入代码的

94
00:05:25,726 --> 0:05:29,329
时间线以及

95
00:05:30,030 --> 0:05:32,499
Xcode提供了几种

96
00:05:35,068 --> 0:05:36,637
首先是比较模式

97
00:05:36,703 --> 0:05:39,006
我们在提交表中看到了这一点

98
00:05:39,573 --> 0:05:42,776
允许你查看项目中的每个文件

99
00:05:42,843 --> 0:05:44,311
因为它通过这种方式

100
00:05:45,612 --> 0:05:49,950
要访问它 请使用工具栏中的

101
00:05:52,986 --> 0:05:54,655
单击并保持选择器

102
00:05:54,955 --> 0:05:57,991
将使你跳转到版本编辑器的特定模式

103
00:06:01,562 --> 0:06:04,231
比较模式提供了

104
00:06:04,298 --> 0:06:05,566
源代码更改的并排视图

105
00:06:06,033 --> 0:06:09,002
它允许你在两个时间点之间

106
00:06:10,370 --> 0:06:11,872
在比较模式中

107
00:06:12,206 --> 0:06:14,808
你可以使用底部的跳转栏

108
00:06:15,108 --> 0:06:17,244
来更改正在查看的文件的版本

109
00:06:19,446 --> 0:06:22,449
接下来是版本编辑器的作者视图

110
00:06:23,283 --> 0:06:26,086
在工具栏中以同样的方式访问它

111
00:06:29,756 --> 0:06:34,494
作者视图按照对文件中的特定行

112
00:06:34,561 --> 0:06:36,363
最新更改的作者

113
00:06:37,497 --> 0:06:41,101
它显示提交的作者、消息和日期

114
00:06:42,035 --> 0:06:43,770
有关提交的其他信息

115
00:06:44,137 --> 0:06:46,240
可以通过单击其中一个切片来查看

116
00:06:48,041 --> 0:06:52,012
最后可以看到

117
00:06:52,746 --> 0:06:56,216
就像作者视图和比较模式一样

118
00:06:59,820 --> 0:07:03,724
源代码管理日志可以查看

119
00:06:59,820 --> 0:07:03,724
源代码管理日志可以查看

120
00:07:03,790 --> 0:07:08,495
这样在文件整个历史记录中

121
00:07:09,930 --> 0:07:13,133
现在有时你需要一种方法

122
00:07:13,200 --> 0:07:16,803
不仅仅是一个文件 而是整个项目

123
00:07:17,571 --> 0:07:20,574
为了看到这一点

124
00:07:21,642 --> 0:07:23,377
作为Xcode中的第二导航器

125
00:07:27,147 --> 0:07:31,285
源代码管理器通过列出分支和标签

126
00:07:31,351 --> 0:07:33,253
来提供整个存储库的视图

127
00:07:34,421 --> 0:07:36,557
分支是组成项目的单个历史流

128
00:07:36,623 --> 0:07:39,893
例如当前的开发工作

129
00:07:40,661 --> 0:07:43,630
当你启动一个新项目时

130
00:07:43,997 --> 0:07:45,399
通常名为Master

131
00:07:46,600 --> 0:07:50,304
选择它 将显示该分支的历史

132
00:07:51,672 --> 0:07:52,806
在这个历史记录视图中

133
00:07:53,307 --> 0:07:56,643
你可以看到历史记录被标记为

134
00:07:57,277 --> 0:08:00,347
标记是项目中

135
00:07:57,277 --> 0:08:00,347
标记是项目中

136
00:08:00,414 --> 0:08:03,350
例如已发布的版本

137
00:08:04,818 --> 0:08:08,388
有关分支 查看历史记录

138
00:08:09,156 --> 0:08:13,260
请参见2017年WWDC

139
00:08:13,327 --> 0:08:15,929
和Xcode 9中

140
00:08:21,134 --> 0:08:22,069
（托管）

141
00:08:22,135 --> 0:08:25,105
既然我们已经看到了

142
00:08:25,172 --> 0:08:27,541
那么让我们来看看

143
00:08:29,543 --> 0:08:31,078
到目前为止我们已经看到了

144
00:08:31,144 --> 0:08:34,648
当一个项目只在你的机器上

145
00:08:35,549 --> 0:08:38,719
但是在许多情况下

146
00:08:39,419 --> 0:08:41,154
这提供了一个异地备份

147
00:08:41,221 --> 0:08:45,492
以及从一台机器到另一台机器

148
00:08:46,593 --> 0:08:50,430
这也是Xcode项目中协作的基础

149
00:08:54,301 --> 0:08:58,071
Xcode适用于任何

150
00:08:58,705 --> 0:09:02,676
在这些情况下

151
00:08:58,705 --> 0:09:02,676
在这些情况下

152
00:09:02,743 --> 0:09:06,747
如推拉

153
00:09:07,281 --> 0:09:09,650
你只需根据需要进行身份验证即可

154
00:09:11,518 --> 0:09:16,089
Xcode还支持许多常见托管

155
00:09:16,623 --> 0:09:19,059
BitBucket

156
00:09:19,927 --> 0:09:22,896
有了这些服务

157
00:09:23,297 --> 0:09:25,532
例如搜索要克隆的存储库

158
00:09:25,899 --> 0:09:29,503
以及直接从Xcode

159
00:09:30,737 --> 0:09:33,140
除了这些服务的云版本之外

160
00:09:33,640 --> 0:09:35,576
Xcode还支持

161
00:09:35,676 --> 0:09:39,613
在大型团队使用前提下的

162
00:09:42,349 --> 0:09:44,785
因此让我们来看看

163
00:09:46,119 --> 0:09:47,888
可以从Xcode首选项中的

164
00:09:47,955 --> 0:09:51,825
账户首选项窗格添加此帐户类型

165
00:09:54,261 --> 0:09:58,131
你只需使用你的用户名

166
00:09:58,632 --> 0:09:59,967
就像在网站上一样

167
00:10:00,434 --> 0:10:02,503
如果你正在登录到一个自托管版本

168
00:10:03,136 --> 0:10:06,106
你将有机会

169
00:10:06,173 --> 0:10:07,407
为要连接的特定服务器提供URL

170
00:10:09,710 --> 0:10:13,046
现在Xcode被签署到

171
00:10:13,447 --> 0:10:15,883
我们可以开始将

172
00:10:16,216 --> 0:10:18,018
并从中获得其他更改

173
00:10:19,586 --> 0:10:22,155
但是在我们开始在Xcode中

174
00:10:22,990 --> 0:10:24,858
让我们花一点时间来讨论

175
00:10:24,925 --> 0:10:28,695
Git和这些托管解决方案

176
00:10:28,762 --> 0:10:30,230
（安全）

177
00:10:32,199 --> 0:10:33,967
在连接服务器时

178
00:10:34,034 --> 0:10:36,470
Git支持保护更改的两种主要方法

179
00:10:36,870 --> 0:10:42,309
第一种 HTTPS

180
00:10:43,143 --> 0:10:45,512
它是基于证书来信任服务器

181
00:10:45,879 --> 0:10:49,116
并使用用户名和密码

182
00:10:50,517 --> 0:10:54,555
另一个方法是SSH

183
00:10:54,788 --> 0:10:56,890
特别是对于这些托管解决方案的情况

184
00:10:58,091 --> 0:11:02,729
通常 Git的SSH连接

185
00:10:58,091 --> 0:11:02,729
通常 Git的SSH连接

186
00:11:02,796 --> 0:11:04,464
是使用在每台机器上生成的

187
00:11:05,265 --> 0:11:07,434
公钥和私钥对来保护的

188
00:11:08,535 --> 0:11:12,506
然后将这一对的公共部分

189
00:11:13,240 --> 0:11:16,844
这意味着每台机器

190
00:11:16,910 --> 0:11:18,946
甚至每个服务都有一个

191
00:11:19,413 --> 0:11:23,317
这样就可以比密码更容易

192
00:11:25,118 --> 0:11:29,389
Xcode可以帮助你轻松地

193
00:11:30,057 --> 0:11:34,461
当你登录一个帐户

194
00:11:34,862 --> 0:11:36,763
Xcode将提供创建一对

195
00:11:38,298 --> 0:11:42,803
SSH密钥的私有部分

196
00:11:43,737 --> 0:11:48,175
这增加了一个额外的安全层

197
00:11:48,242 --> 0:11:51,912
即使在其他人获得你的

198
00:11:54,248 --> 0:11:58,418
一旦创建了密钥对

199
00:11:58,485 --> 0:12:02,155
将密钥的公共部分

200
00:11:58,485 --> 0:12:02,155
将密钥的公共部分

201
00:12:03,323 --> 0:12:08,262
完成公钥上传后

202
00:12:08,328 --> 0:12:12,799
还可以通过SSH协议

203
00:12:13,400 --> 0:12:16,603
这也意味着我们现在可以

204
00:12:16,904 --> 0:12:18,172
并克隆现有的存储库

205
00:12:18,639 --> 0:12:20,007
所以让我们来看看这个

206
00:12:21,708 --> 0:12:24,478
如果我们回到本地唯一的存储库

207
00:12:24,978 --> 0:12:27,114
我们现在可以为它创建一个新的遥控

208
00:12:27,714 --> 0:12:32,085
这是托管站点上存储库的完整副本

209
00:12:32,352 --> 0:12:35,222
从“上下文菜单”中的

210
00:12:35,656 --> 0:12:38,892
“源代码管理器”执行此操作

211
00:12:41,094 --> 0:12:43,964
然后我们有一些

212
00:12:44,398 --> 0:12:47,334
根据我们对这个项目的具体需求

213
00:12:47,768 --> 0:12:50,170
我们可以选择将它变为

214
00:12:51,104 --> 0:12:53,073
然后可以与其他开发人员共享它

215
00:12:53,140 --> 0:12:54,708
或者跨计算机同步

216
00:12:55,509 --> 0:12:59,046
当你想下载一个

217
00:12:59,112 --> 0:13:01,882
比如在一台新机器上

218
00:12:59,112 --> 0:13:01,882
比如在一台新机器上

219
00:13:02,349 --> 0:13:05,519
你可以在克隆窗口中

220
00:13:06,253 --> 0:13:09,623
在Xcode的

221
00:13:13,360 --> 0:13:15,929
如果你已经有了用于存储库的URL

222
00:13:15,996 --> 0:13:18,131
则你可以直接在搜索字段中输入它

223
00:13:18,498 --> 0:13:22,336
此外Xcode中支持的所有托管

224
00:13:22,402 --> 0:13:26,406
一个按钮直接在Xcode中

225
00:13:27,908 --> 0:13:30,844
有关使用托管服务

226
00:13:30,911 --> 0:13:35,148
包括创建远程存储库

227
00:13:35,516 --> 0:13:38,685
请参阅2017年WWDC演讲

228
00:13:39,052 --> 0:13:42,155
GitHub和Xcode 9中

229
00:13:45,526 --> 0:13:49,062
现在我们有了项目的本地和远程副本

230
00:13:49,530 --> 0:13:51,865
我们需要确保它们保持同步

231
00:13:52,900 --> 0:13:58,071
在Git中

232
00:13:58,138 --> 0:13:59,640
（拉和推）

233
00:14:00,340 --> 0:14:03,110
当你在本地提交一个或多个更改后

234
00:14:03,510 --> 0:14:06,113
你会想要将它们推送并上传到服务器

235
00:14:06,847 --> 0:14:09,216
这可以在提交时直接完成

236
00:14:10,150 --> 0:14:14,588
或者也可以

237
00:14:17,891 --> 0:14:21,495
推送表允许你准确地

238
00:14:21,895 --> 0:14:26,767
也允许你在推送过程中

239
00:14:29,469 --> 0:14:33,707
现在当与他人合作时

240
00:14:34,474 --> 0:14:38,045
为此你需要执行Git中

241
00:14:38,512 --> 0:14:41,582
类似地 这可以从

242
00:14:44,151 --> 0:14:49,590
现在Xcode提供了两个拉的选项

243
00:14:50,057 --> 0:14:53,060
要么Xcode可以使用变基操作

244
00:14:53,727 --> 0:14:55,462
这些在Git中

245
00:14:55,796 --> 0:14:57,097
让我们来看一下

246
00:14:58,198 --> 0:14:59,466
（上游变更 我的变更）

247
00:14:59,533 --> 0:15:02,269
在这里我们将查看提交的概念时间表

248
00:14:59,533 --> 0:15:02,269
在这里我们将查看提交的概念时间表

249
00:15:02,636 --> 0:15:05,639
如果你已经进行了本地更改

250
00:15:05,706 --> 0:15:09,610
进行了更改

251
00:15:10,377 --> 0:15:13,881
在这种情况下你的工作绿色显示

252
00:15:13,947 --> 0:15:17,150
已经偏离了你同事的工作

253
00:15:20,087 --> 0:15:25,192
为了纠正这个问题你将在Git中

254
00:15:25,959 --> 0:15:27,127
让我们看看这两个

255
00:15:28,061 --> 0:15:30,731
那么在这个场景中

256
00:15:30,797 --> 0:15:31,732
三个需要拉取

257
00:15:32,399 --> 0:15:35,869
在合并时在你和同事的提交之后

258
00:15:36,336 --> 0:15:38,739
通过创建一个新提交

259
00:15:39,173 --> 0:15:41,642
偏离之后 这个问题就得到了解决

260
00:15:42,643 --> 0:15:45,846
由于现在提交已经统一

261
00:15:46,113 --> 0:15:49,783
它就可以被推到服务器

262
00:15:51,185 --> 0:15:53,287
变基拉取的工作方式有点不同

263
00:15:53,353 --> 0:15:56,924
它不是创建一个新的合并提交

264
00:15:56,990 --> 0:16:00,127
然后在你刚刚拉取的更改之后重放

265
00:15:56,990 --> 0:16:00,127
然后在你刚刚拉取的更改之后重放

266
00:16:00,194 --> 0:16:01,895
（拉取合并 拉取变基）

267
00:16:01,962 --> 0:16:05,065
这可以使回顾历史变得更加简单

268
00:16:05,432 --> 0:16:08,735
因为历史中没有合并、提交或偏离

269
00:16:10,304 --> 0:16:11,205
（冲突）

270
00:16:11,271 --> 0:16:14,274
有时在拉取时你已经进行了本地提交

271
00:16:14,341 --> 0:16:18,312
改了与其他人

272
00:16:18,912 --> 0:16:21,448
这可能会导致Git中所谓的冲突

273
00:16:21,882 --> 0:16:25,118
在这种冲突中

274
00:16:28,422 --> 0:16:32,092
Xcode允许你

275
00:16:32,960 --> 0:16:36,363
Xcode将显示一个

276
00:16:36,430 --> 0:16:39,299
其中包含接受你的更改

277
00:16:40,033 --> 0:16:44,171
也可以手动编辑文件

278
00:16:44,238 --> 0:16:46,373
若有更好方法组合工作

279
00:16:48,775 --> 0:16:52,813
在本例中 我们看到两个用户

280
00:16:53,780 --> 0:16:56,650
本地更改似乎是最新的

281
00:16:56,717 --> 0:16:59,887
因此解决这个问题的最简单的方法是

282
00:17:01,421 --> 0:17:04,625
现在随着所有冲突都解决了

283
00:17:05,626 --> 0:17:08,862
如果这是一个合并拉取

284
00:17:08,929 --> 0:17:11,330
且该解决方案将存储在合并提交中

285
00:17:12,699 --> 0:17:14,468
如果我们正在执行拉取变基

286
00:17:14,968 --> 0:17:18,571
则可能需要多次来解决一组冲突

287
00:17:18,638 --> 0:17:23,010
因为每个单独的提交都会在

288
00:17:23,844 --> 0:17:25,746
在这种情况下解决信息

289
00:17:26,280 --> 0:17:30,117
就存储在原始提交中

290
00:17:31,451 --> 0:17:33,954
现在由于冲突的解决可能有点烦人

291
00:17:34,021 --> 0:17:36,957
所以预测冲突

292
00:17:37,024 --> 0:17:39,326
并避免冲突的发生是非常有用的

293
00:17:40,427 --> 0:17:44,765
在Xcode

294
00:17:44,831 --> 0:17:47,768
可以选择显示“变更栏”

295
00:17:50,737 --> 0:17:54,408
这使得很容易判断文件的

296
00:17:54,942 --> 0:17:57,978
这些更改是每间隔10分钟内

297
00:18:00,280 --> 0:18:03,383
在这里我们看到了

298
00:18:04,084 --> 0:18:07,821
当上游的更改正在显示时会变成红色

299
00:18:07,888 --> 0:18:11,058
以表示我们的同事在哪里进行更改

300
00:18:11,725 --> 0:18:14,628
意味着必须解决冲突

301
00:18:14,695 --> 0:18:16,396
才能重新整合本地更改

302
00:18:17,064 --> 0:18:21,034
在许多情况下在对已经进行

303
00:18:21,101 --> 0:18:22,903
可以更容易地将其拉取出来

304
00:18:24,705 --> 0:18:29,176
有关冲突提交的一些细节可以通过

305
00:18:32,346 --> 0:18:34,815
Xcode支持的所有托管解决方案

306
00:18:34,882 --> 0:18:39,520
还支持另外两个常见的工作流：

307
00:18:40,187 --> 0:18:42,356
它们基于Git的概念和特性

308
00:18:42,723 --> 0:18:44,625
但与Git的特性集不同

309
00:18:45,826 --> 0:18:48,629
拉取请求是进行代码评审的一种方法

310
00:18:48,695 --> 0:18:49,763
（拉取请求）

311
00:18:49,830 --> 0:18:54,434
通常最好的做法是在一个分支上

312
00:18:54,501 --> 0:18:57,371
这是一个独立的提交历史记录行

313
00:18:57,437 --> 0:19:00,307
它与项目的其他历史记录是分开的

314
00:18:57,437 --> 0:19:00,307
它与项目的其他历史记录是分开的

315
00:19:01,408 --> 0:19:02,876
就像在拉取时一样

316
00:19:03,277 --> 0:19:06,313
在一个分支上完成的工作

317
00:19:06,547 --> 0:19:11,151
因此合并对于解决任何冲突

318
00:19:12,252 --> 0:19:14,488
拉取请求 在这里以黄色显示

319
00:19:15,155 --> 0:19:17,057
是一种方法

320
00:19:17,724 --> 0:19:20,827
并允许其他个人对该工作进行评论

321
00:19:21,328 --> 0:19:24,264
通常这将意味着

322
00:19:24,398 --> 0:19:26,099
要对分支进行额外的更改

323
00:19:26,967 --> 0:19:29,837
由于拉取请求是

324
00:19:29,903 --> 0:19:32,372
所以在审查时 你可以始终

325
00:19:32,439 --> 0:19:35,742
在Xcode的源代码控制导航器中

326
00:19:36,677 --> 0:19:40,881
这使你可以在本地机器上

327
00:19:41,415 --> 0:19:43,417
然后批准它并将其合并回主分支

328
00:19:44,952 --> 0:19:48,188
分叉利用了Git的分布式特性

329
00:19:48,255 --> 0:19:49,156
（分叉）

330
00:19:49,223 --> 0:19:51,592
就像存储库的服务器副本

331
00:19:51,658 --> 0:19:56,029
和计算机上的本地副本

332
00:19:56,630 --> 0:20:00,567
你可以在同一服务器上

333
00:19:56,630 --> 0:20:00,567
你可以在同一服务器上

334
00:20:02,236 --> 0:20:07,207
当存在一个严格管理的规范副本时

335
00:20:07,274 --> 0:20:10,210
例如大型开源项目 这通常是有用的

336
00:20:11,044 --> 0:20:14,047
分叉对于在不破坏主副本的情况下

337
00:20:14,114 --> 0:20:16,049
进行实验性更改是很有用的

338
00:20:16,817 --> 0:20:20,721
当有许多因素时

339
00:20:20,787 --> 0:20:23,690
因为每个分叉都可以

340
00:20:23,757 --> 0:20:26,927
从而最小化主存储库中的噪声

341
00:20:27,794 --> 0:20:31,331
就像本地副本一样

342
00:20:31,832 --> 0:20:36,303
这通常是以PR的形式进行的

343
00:20:36,837 --> 0:20:41,975
Xcode和Git允许在本地

344
00:20:42,442 --> 0:20:45,245
因此你可以从机器上的

345
00:20:45,612 --> 0:20:47,447
同一份本地副本中同步主和分叉

346
00:20:50,050 --> 0:20:53,654
这涵盖了在Xcode中

347
00:20:53,720 --> 0:20:54,688
（总结）

348
00:20:54,755 --> 0:20:57,624
我们已经看到了如何在本地

349
00:20:58,258 --> 0:21:01,428
我们已经了解了如何

350
00:20:58,258 --> 0:21:01,428
我们已经了解了如何

351
00:21:02,296 --> 0:21:05,632
我们还了解了如何托管存储库

352
00:21:05,699 --> 0:21:07,201
以及在与团队合作时如何同步更改

353
00:21:07,434 --> 0:21:11,705
在同步这些更改时

354
00:21:12,272 --> 0:21:15,742
最后我们简要介绍了一些

355
00:21:15,809 --> 0:21:17,744
比如拉取请求和分叉

356
00:21:19,613 --> 0:21:23,217
有关此演讲的更多信息请访问

357
00:21:24,785 --> 0:21:25,686
谢谢大家
