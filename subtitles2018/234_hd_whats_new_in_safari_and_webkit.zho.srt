1
00:00:07,516 --> 0:00:15,500
[ 音乐 ]

2
00:00:21,516 --> 0:00:24,546
[ 掌声 ]

3
00:00:25,046 --> 0:00:27,986
&gt;&gt; 各位 下午好

4
00:00:29,536 --> 0:00:30,756
好的

5
00:00:31,116 --> 0:00:32,896
我希望你们到目前为止

6
00:00:32,936 --> 0:00:33,356
仍在享受着 WWDC

7
00:00:33,356 --> 0:00:34,636
我知道 过去的这个星期是令人激动的

8
00:00:34,636 --> 0:00:36,336
一个星期 各种公告

9
00:00:36,336 --> 0:00:38,496
新功能 软件更新 开发者工具 接踵而来

10
00:00:39,196 --> 0:00:41,706
我的名字是 Shloka Kini

11
00:00:41,706 --> 0:00:43,256
我在开发者出版物部门任职

12
00:00:43,256 --> 0:00:46,066
也就是说 借一句 Cardi B. 的歌词

13
00:00:46,066 --> 0:00:48,976
“我现在不仅编程” “还要写文件”

14
00:00:49,516 --> 0:00:51,886
[ 笑声 ]

15
00:00:52,386 --> 0:00:53,896
尤其是撰写

16
00:00:53,896 --> 0:00:55,606
能够帮助你们编出精彩 App 的

17
00:00:55,606 --> 0:00:56,286
说明文档

18
00:00:57,476 --> 0:00:58,956
今天 我有幸向大家介绍

19
00:00:58,956 --> 0:01:01,596
一些 Safari 和 WebKit 的新功能

20
00:00:58,956 --> 0:01:01,596
一些 Safari 和 WebKit 的新功能

21
00:01:01,756 --> 0:01:03,486
所以 如果你在设计网站

22
00:01:03,486 --> 0:01:06,926
并且想应用最新的网络科技

23
00:01:06,926 --> 0:01:08,836
最新版本的 Safari

24
00:01:08,836 --> 0:01:09,336
那这场演讲正适合你

25
00:01:09,816 --> 0:01:12,426
如果你是一名使用网页视图的 App 开发人员

26
00:01:12,496 --> 0:01:14,876
或者是扩展程序的开发人员

27
00:01:14,876 --> 0:01:15,856
这场演讲也会对你有所帮助

28
00:01:16,376 --> 0:01:17,486
还有 哪怕你并不在

29
00:01:17,486 --> 0:01:18,476
我刚才提到的任何一个领域内任职

30
00:01:18,476 --> 0:01:20,136
你依然应该坐下来听听

31
00:01:20,136 --> 0:01:21,726
因为 Safari 的最新版本

32
00:01:21,726 --> 0:01:23,036
拥有一些非常棒的功能

33
00:01:23,036 --> 0:01:24,466
能够提升你的浏览体验

34
00:01:25,226 --> 0:01:28,076
现在 已经出现了很多

35
00:01:28,076 --> 0:01:29,936
很多新的改进

36
00:01:29,936 --> 0:01:31,256
尤其是我们举办了 What's New 演讲之后

37
00:01:31,256 --> 0:01:32,626
不过今天 

38
00:01:32,626 --> 0:01:34,046
我将着重介绍其中的一部分改进

39
00:01:34,046 --> 0:01:35,936
它们真的能帮你写出安全的 

40
00:01:36,956 --> 0:01:38,156
具有良好性能的 App

41
00:01:38,156 --> 0:01:39,986
融入最新的科技 以得到最丰富的体验

42
00:01:40,266 --> 0:01:41,766
而且 它们中的很多都是免费的

43
00:01:42,476 --> 0:01:44,616
那么 让我们从安全开始讲起

44
00:01:44,926 --> 0:01:49,496
还有一些公告声明 WKWebView

45
00:01:49,496 --> 0:01:50,856
我知道你们在想什么

46
00:01:50,956 --> 0:01:53,096
WKWebView 自从 2014 年起

47
00:01:53,096 --> 0:01:57,956
就出现了 严格来讲

48
00:01:57,956 --> 0:01:58,086
它不是新事物

49
00:01:58,786 --> 0:02:00,316
然而 它还是值得再次被提起

50
00:01:58,786 --> 0:02:00,316
然而 它还是值得再次被提起

51
00:02:00,316 --> 0:02:03,976
因为现在我们正式地反对 UIWebView 

52
00:02:04,516 --> 0:02:08,996
[ 掌声 ]

53
00:02:09,496 --> 0:02:10,806
所以 如果你正在编写一个新的 App

54
00:02:10,806 --> 0:02:12,486
或者一个新的项目

55
00:02:12,486 --> 0:02:13,996
你想要展示一些 web 内容

56
00:02:13,996 --> 0:02:16,346
但它们很难以原生视图展示

57
00:02:16,346 --> 0:02:18,426
请使用 WKWebView

58
00:02:18,916 --> 0:02:21,806
另外 即便你以前使用过 UIWebView

59
00:02:21,806 --> 0:02:22,936
转换也并不困难

60
00:02:23,516 --> 0:02:25,916
如果你是在 macOS 和 iOS 两个平台同时进行

61
00:02:25,916 --> 0:02:27,596
开发工作 它绝对可以在开发 App 方面帮你节省时间

62
00:02:27,596 --> 0:02:31,796
因为 WKWebView 在两个平台都适用

63
00:02:32,216 --> 0:02:34,396
而 UIWebView 是针对 iOS 的 

64
00:02:34,476 --> 0:02:35,336
WebView 则是针对 macOS 的

65
00:02:35,336 --> 0:02:37,396
所以 你可以共享很多的程序代码

66
00:02:37,396 --> 0:02:38,526
在这两个版本之间

67
00:02:39,926 --> 0:02:41,946
另外 WKWebView 也能

68
00:02:41,946 --> 0:02:43,436
在一个完全单独的过程中运行

69
00:02:43,436 --> 0:02:44,646
独立于你 App 的其他部分

70
00:02:44,766 --> 0:02:46,936
所以 和 UIWebView 不同

71
00:02:46,936 --> 0:02:48,746
即使你的 web 进程受到损害

72
00:02:49,086 --> 0:02:50,816
它也不会影响你的 App

73
00:02:50,816 --> 0:02:52,386
如果你的网页视图有

74
00:02:52,456 --> 0:02:54,576
复杂的内容

75
00:02:54,576 --> 0:02:55,766
也不会使你的 App 意外中止

76
00:02:56,296 --> 0:02:58,626
而且 即使 WKWebView 崩溃了

77
00:02:59,726 --> 0:03:01,326
它也只局限于网页视图的框架内

78
00:02:59,726 --> 0:03:01,326
它也只局限于网页视图的框架内

79
00:03:01,796 --> 0:03:03,596
而非整个 App

80
00:03:03,596 --> 0:03:05,816
WKWebView 能够提供安全方面的优势

81
00:03:05,816 --> 0:03:07,536
同时保证你的 App 

82
00:03:07,586 --> 0:03:08,936
性能卓越 值得信赖

83
00:03:09,466 --> 0:03:10,696
所以 不管转换到 WKWebView 是复杂还是简单

84
00:03:10,696 --> 0:03:12,546
你从中得到的种种好处

85
00:03:12,546 --> 0:03:14,766
都令人觉得 这种改变是值得的

86
00:03:15,316 --> 0:03:18,556
接下来的一个声明包含扩展

87
00:03:18,756 --> 0:03:20,946
不过拓展 Safari 

88
00:03:20,946 --> 0:03:24,476
我的意思是 它在过去这些年来

89
00:03:24,576 --> 0:03:25,716
已经改进了很多

90
00:03:26,446 --> 0:03:27,736
那么 我们一开始就先快速

91
00:03:27,736 --> 0:03:31,336
回顾一下 Safari 扩展的历史

92
00:03:32,116 --> 0:03:34,066
在 2010 年 在我们建立起

93
00:03:34,246 --> 0:03:35,496
App 可扩展性的平台概念之前

94
00:03:35,646 --> 0:03:39,486
当时只有最初版本 Safari 扩展

95
00:03:40,106 --> 0:03:42,096
那些是 Safari EXTZ 文档

96
00:03:42,096 --> 0:03:43,876
你可以在 Safari Extensions Builder

97
00:03:43,876 --> 0:03:44,816
中建立这些文档

98
00:03:45,266 --> 0:03:46,216
它们可以通过 Safari Extensions Gallery 库

99
00:03:46,216 --> 0:03:47,466
被分配出去

100
00:03:47,466 --> 0:03:49,116
或者 在一些不常见的例子中

101
00:03:49,116 --> 0:03:51,036
直接被开发人员分配出去

102
00:03:51,986 --> 0:03:53,476
这些最初版本的扩展

103
00:03:53,476 --> 0:03:55,216
都具有不可思议的强大威力

104
00:03:55,256 --> 0:03:56,666
因为它们能获取你所有的

105
00:03:56,666 --> 0:03:59,056
浏览数据

106
00:03:59,056 --> 0:04:00,896
你也会因此变得更“受欢迎”

107
00:03:59,056 --> 0:04:00,896
你也会因此变得更“受欢迎”

108
00:04:00,896 --> 0:04:01,406
尤其易受诈骗和恶意软件的侵扰

109
00:04:02,236 --> 0:04:03,556
我们需要去建立一个安全防火墙

110
00:04:03,556 --> 0:04:04,876
那就是为什么我们没有

111
00:04:04,876 --> 0:04:06,546
在最初版本的 Safari 扩展那里

112
00:04:06,546 --> 0:04:07,136
停止工作

113
00:04:07,136 --> 0:04:09,046
那么 我们故事发展的下一个里程碑

114
00:04:09,046 --> 0:04:12,036
出现在 2014 年

115
00:04:12,036 --> 0:04:13,976
那时 我们为 macOS 和 iOS 两个平台都

116
00:04:13,976 --> 0:04:15,536
建立了 App 可扩展性能

117
00:04:15,756 --> 0:04:18,875
不过 App 扩展是

118
00:04:18,875 --> 0:04:22,106
扩展 App 的一种方式 而不是 Safari 的扩展方式

119
00:04:22,336 --> 0:04:24,126
但重要的是 这个举动极大地改变了

120
00:04:24,126 --> 0:04:25,436
我们对于扩展的理解

121
00:04:25,436 --> 0:04:26,996
在苹果的各个平台上

122
00:04:27,486 --> 0:04:29,096
在这里 你可以明确地扩展系统

123
00:04:29,096 --> 0:04:30,306
与此同时 用户可以

124
00:04:30,346 --> 0:04:32,356
与其他 App 进行互动

125
00:04:32,356 --> 0:04:33,616
而且和 App 一样

126
00:04:33,616 --> 0:04:34,496
它们可以建立在 Xcode 开发环境下

127
00:04:35,236 --> 0:04:37,936
由于这个更好的扩展模型的出现

128
00:04:37,936 --> 0:04:39,226
我们想要将这些概念中的一部分

129
00:04:39,516 --> 0:04:41,656
在返回到最初版本 Safari 扩展中进行应用

130
00:04:41,656 --> 0:04:45,986
而在当时 最受欢迎的一些是广告拦截器

131
00:04:46,596 --> 0:04:48,506
于是 我们在 2015 年引入了

132
00:04:48,506 --> 0:04:50,306
内容拦截器

133
00:04:51,046 --> 0:04:52,506
内容拦截器是一种在 Xcode 开发环境下

134
00:04:52,506 --> 0:04:54,446
的 App 扩展

135
00:04:54,556 --> 0:04:56,466
它在 macOS 和 iOS 系统下都能够使用

136
00:04:57,106 --> 0:04:58,386
它们所拥有的特殊结构

137
00:04:58,386 --> 0:04:59,086
令其可以快速运行

138
00:04:59,786 --> 0:05:01,646
因此 任何内容拦截器

139
00:04:59,786 --> 0:05:01,646
因此 任何内容拦截器

140
00:05:01,646 --> 0:05:03,176
在拦截方面都比

141
00:05:03,176 --> 0:05:04,606
任何最初版本 Safari 扩展都要快速

142
00:05:05,376 --> 0:05:06,456
它们不会降低

143
00:05:06,556 --> 0:05:08,236
浏览速度的能力

144
00:05:08,286 --> 0:05:09,906
而且保护隐私 因为这些扩展

145
00:05:09,906 --> 0:05:11,666
永远看不到你的用户在

146
00:05:11,666 --> 0:05:12,386
浏览什么网页

147
00:05:13,296 --> 0:05:14,876
在这一点上

148
00:05:14,876 --> 0:05:16,516
App 扩展模型提供了如此多的

149
00:05:16,516 --> 0:05:17,976
性能优势 于是我们想

150
00:05:18,316 --> 0:05:19,536
或许我们能把这些概念

151
00:05:19,536 --> 0:05:20,996
带回到最初版本

152
00:05:20,996 --> 0:05:22,686
Safari 扩展 

153
00:05:22,686 --> 0:05:23,946
那样我们就能在两方面都得到最佳结果

154
00:05:24,896 --> 0:05:26,416
一个能够扩展 Safari 功能性

155
00:05:26,416 --> 0:05:28,956
的扩展功能 同样它也能

156
00:05:28,956 --> 0:05:30,866
扩展你的 App

157
00:05:30,866 --> 0:05:31,276
令它能和 Safari 对话

158
00:05:31,276 --> 0:05:34,666
基于此在 2016 年 为 macOS 系统开发的

159
00:05:34,666 --> 0:05:37,016
新版 Safari App 扩展问世了

160
00:05:37,186 --> 0:05:39,066
这种扩展 Safari App 的方式

161
00:05:39,066 --> 0:05:40,296
能够在 Xcode 的环境下进行编写

162
00:05:40,726 --> 0:05:42,236
同时 不同于以往的 App 扩展

163
00:05:42,456 --> 0:05:43,366
这次你可以通过 App store 获得 App 扩展

164
00:05:43,606 --> 0:05:46,396
也就是说 这些扩展可以是免费的

165
00:05:46,396 --> 0:05:46,646
也可以是收费的

166
00:05:46,816 --> 0:05:48,406
无论是使用哪种方式

167
00:05:48,406 --> 0:05:49,076
你都不需要自己买单

168
00:05:50,446 --> 0:05:52,226
因此 与 2010 年的最初版本扩展相比

169
00:05:52,226 --> 0:05:54,486
内容拦截器与

170
00:05:54,486 --> 0:05:55,666
Safari App 扩展

171
00:05:55,666 --> 0:05:57,146
具有非常大的优势

172
00:05:57,556 --> 0:05:58,806
所以 你最应该做的事情就是

173
00:05:58,806 --> 0:06:00,116
如果你还在使用最初版本的

174
00:05:58,806 --> 0:06:00,116
如果你还在使用最初版本的

175
00:06:00,116 --> 0:06:03,736
Safari 扩展 赶紧切换到 Safari App 扩展

176
00:06:03,806 --> 0:06:05,086
同样 如果你还在使用广告拦截器

177
00:06:05,086 --> 0:06:07,086
请切换到内容拦截器

178
00:06:07,866 --> 0:06:08,996
现在 我们已经将这些工作全部完成

179
00:06:08,996 --> 0:06:11,136
我们还能用最初版本的

180
00:06:11,136 --> 0:06:13,396
Safari 扩展做什么呢

181
00:06:13,396 --> 0:06:14,266
难道去诈骗吗

182
00:06:14,936 --> 0:06:17,566
从 Safari 12 开始

183
00:06:17,566 --> 0:06:19,556
我们已经正式停止了对

184
00:06:19,556 --> 0:06:21,376
Safari Extensions Gallery 之外的

185
00:06:21,376 --> 0:06:23,666
旧版扩展的支持

186
00:06:24,636 --> 0:06:26,126
旧版的扩展仍然可以

187
00:06:26,126 --> 0:06:28,896
在 Safari 12 中使用 

188
00:06:28,956 --> 0:06:29,796
只要它们还在 Gallery 库里

189
00:06:31,066 --> 0:06:32,316
唯一的例外是

190
00:06:32,316 --> 0:06:33,986
那些使用被弃用的 Can Load API 的扩展

191
00:06:34,036 --> 0:06:36,666
我们将其默认为关闭状态

192
00:06:37,436 --> 0:06:38,566
我们将继续接受

193
00:06:38,786 --> 0:06:40,466
对 Gallery 库的申请 

194
00:06:40,466 --> 0:06:41,706
直到 2018 年年底为止

195
00:06:42,426 --> 0:06:44,106
不过 我们将在接下来的一年时间里提供

196
00:06:44,136 --> 0:06:46,406
更多的更新同时

197
00:06:46,406 --> 0:06:48,386
将最终完成向 Safari App 扩展

198
00:06:48,716 --> 0:06:50,166
的彻底转型

199
00:06:50,526 --> 0:06:52,066
因此 现在你最该要做的事情就是

200
00:06:52,246 --> 0:06:53,166
赶紧学会如何在这两种模型下

201
00:06:53,166 --> 0:06:54,626
开发扩展 App

202
00:06:54,936 --> 0:06:56,106
那么 怎么学习呢

203
00:06:56,376 --> 0:06:59,586
请查看教学文档 在此感谢开发人员

204
00:06:59,586 --> 0:06:59,976
出版物部门

205
00:07:00,516 --> 0:07:07,076
[ 掌声 ]

206
00:07:07,576 --> 0:07:09,076
到现在为止 我们已经宣布完了两条

207
00:07:09,076 --> 0:07:11,316
针对使用 WebViews 的本体开发人员

208
00:07:11,316 --> 0:07:12,866
以及扩展开发人员

209
00:07:12,866 --> 0:07:14,376
的最重要的公告

210
00:07:14,376 --> 0:07:15,656
这些功能的其余部分

211
00:07:15,716 --> 0:07:17,906
主要是关于如何进行 web 开发

212
00:07:18,346 --> 0:07:20,756
下面 让我们从子资源的完整性开始说起

213
00:07:21,626 --> 0:07:23,286
现在 作为一名开发人员 你可能

214
00:07:23,356 --> 0:07:26,596
通过 HTTPS 连接 向用户输送你的内容

215
00:07:26,596 --> 0:07:28,546
并且 由此产生的内容

216
00:07:28,676 --> 0:07:31,056
可能还包含由第三方服务器发布的

217
00:07:31,056 --> 0:07:33,356
部分内容

218
00:07:33,356 --> 0:07:34,696
比如一个内容输送网络

219
00:07:35,576 --> 0:07:36,876
这两个连接可能都是

220
00:07:36,876 --> 0:07:39,316
安全可靠的 可能都使用 HTTPS 

221
00:07:39,806 --> 0:07:40,906
这也就意味着你保有

222
00:07:41,126 --> 0:07:43,156
机密性 身份验证信息

223
00:07:43,156 --> 0:07:45,216
以及传输数据的完整性

224
00:07:45,826 --> 0:07:48,326
但是 万一第三方服务器本身

225
00:07:48,326 --> 0:07:51,726
受损害了怎么办 这也不是没有可能

226
00:07:52,296 --> 0:07:54,526
在这种情况下  HTTPS 连接

227
00:07:54,526 --> 0:07:56,256
仅能够确保连接

228
00:07:56,256 --> 0:07:58,816
但它不能确保服务器没有受损

229
00:07:59,436 --> 0:08:01,356
它可以修改脚本

230
00:07:59,436 --> 0:08:01,356
它可以修改脚本

231
00:08:01,356 --> 0:08:03,086
同时变换你提供给用户的样式

232
00:08:03,086 --> 0:08:05,026
在第三方服务器受到损害的情况下

233
00:08:06,156 --> 0:08:08,076
子资源的完整性将保证

234
00:08:08,076 --> 0:08:10,936
你不会给你的用户 提供受到损坏的脚本

235
00:08:10,936 --> 0:08:12,076
那么 这是如何完成的呢

236
00:08:12,396 --> 0:08:13,566
通过哈希算法

237
00:08:14,256 --> 0:08:15,626
首先 你需要添加一个完整性属性

238
00:08:15,626 --> 0:08:17,196
到一个脚本或者链接元素

239
00:08:17,196 --> 0:08:18,306
在你的标记语言中

240
00:08:18,826 --> 0:08:20,316
这个属性的数值是一个 hash

241
00:08:20,476 --> 0:08:21,786
你使用安全的哈希算法

242
00:08:21,786 --> 0:08:22,986
去创建这个 hash

243
00:08:23,306 --> 0:08:24,996
当一个用户抓取了文件

244
00:08:25,286 --> 0:08:26,886
那么另一个 hash 也就计算了出来

245
00:08:27,116 --> 0:08:28,456
比较这两个 hash

246
00:08:28,456 --> 0:08:30,096
如果它们不相同 则你的脚本

247
00:08:30,096 --> 0:08:31,106
将不能被执行

248
00:08:31,846 --> 0:08:33,826
这一过程确保

249
00:08:33,826 --> 0:08:35,535
脚本在受损的情况下

250
00:08:35,535 --> 0:08:36,076
将不会被执行

251
00:08:36,456 --> 0:08:38,616
除非它们和你预期的相匹配

252
00:08:38,616 --> 0:08:41,476
不然你的脚本将不会被执行

253
00:08:42,376 --> 0:08:43,726
当然 为了保证你不会丢失掉

254
00:08:43,756 --> 0:08:45,306
功能性 你还可以

255
00:08:45,306 --> 0:08:47,316
提供一个回退处理用于重新加载

256
00:08:47,316 --> 0:08:49,026
服务器里面的资源

257
00:08:49,026 --> 0:08:50,676
在第三方服务器脚本

258
00:08:50,936 --> 0:08:51,896
不能执行的前提下

259
00:08:52,446 --> 0:08:55,516
现在 阻止受损的资源

260
00:08:55,516 --> 0:08:57,636
不让它们去执行

261
00:08:57,816 --> 0:08:58,706
就能确保用户的安全

262
00:08:59,086 --> 0:09:01,816
而且 智能跟踪预防法可以保证浏览

263
00:08:59,086 --> 0:09:01,816
而且 智能跟踪预防法可以保证浏览

264
00:09:01,816 --> 0:09:02,786
体验的隐私性

265
00:09:03,296 --> 0:09:04,376
好的 我知道你们可能听说过

266
00:09:04,376 --> 0:09:05,826
智能跟踪预防法这个词

267
00:09:05,946 --> 0:09:06,626
在 Keynote 上

268
00:09:06,676 --> 0:09:08,386
这是 Safari 的一个功能

269
00:09:08,386 --> 0:09:10,326
它可以降低交叉网站的跟踪度

270
00:09:10,326 --> 0:09:12,126
通过限制带有跟踪能力的

271
00:09:12,126 --> 0:09:13,836
cookies 和网站关于域的数据的方式

272
00:09:14,416 --> 0:09:15,636
另外 在之前的版本中

273
00:09:15,906 --> 0:09:17,966
cookies 是通过两个规则来保留的

274
00:09:18,396 --> 0:09:19,996
第一个规则是 cookies 可以在用户与第一方

275
00:09:19,996 --> 0:09:22,276
产生互动的 24 小时内

276
00:09:22,586 --> 0:09:25,446
被第三方所使用

277
00:09:25,916 --> 0:09:28,166
第二个原则是 在 Safari 使用的 30 天内

278
00:09:28,166 --> 0:09:30,336
包括最初的 24 小时

279
00:09:30,336 --> 0:09:31,806
那些 cookies 将被

280
00:09:31,836 --> 0:09:33,856
单独存储

281
00:09:33,856 --> 0:09:34,556
然后才被删除

282
00:09:34,966 --> 0:09:37,936
不过 现在我们正在加强对它的控制

283
00:09:38,806 --> 0:09:40,856
我们正在移除对于一般 cookie 的

284
00:09:40,856 --> 0:09:42,516
24 小时接触窗口

285
00:09:42,516 --> 0:09:44,036
针对带有跨站点追踪能力的域

286
00:09:45,316 --> 0:09:47,806
不过 默认的情况是 所有的 cookies

287
00:09:47,806 --> 0:09:49,786
都被单独存储

288
00:09:49,946 --> 0:09:51,596
作为开发人员 我清楚经过可靠验证的嵌入

289
00:09:51,596 --> 0:09:53,786
是非常重要的 

290
00:09:54,006 --> 0:09:55,546
对于你们的工作流以及

291
00:09:55,546 --> 0:09:57,036
与 web 内容的互动来说

292
00:09:57,686 --> 0:09:58,666
那么 你怎么才能准许

293
00:09:59,036 --> 0:09:59,976
经过可靠验证的嵌入呢

294
00:10:01,656 --> 0:10:04,156
那就是 使用 Storage Access API

295
00:10:04,916 --> 0:10:08,056
使用了 Storage Access API

296
00:10:08,056 --> 0:10:10,116
每当出现一个带有跨站点追踪的域

297
00:10:10,206 --> 0:10:11,446
它希望在第三方背景下

298
00:10:11,496 --> 0:10:13,006
获得 cookie

299
00:10:13,006 --> 0:10:14,826
那么你需要

300
00:10:14,826 --> 0:10:16,866
提出存储访问的请求

301
00:10:17,436 --> 0:10:19,016
如果用户以前没有授权同意访问 

302
00:10:19,016 --> 0:10:20,766
就会出现提示框

303
00:10:20,766 --> 0:10:22,616
询问用户是否允许

304
00:10:22,616 --> 0:10:25,256
在这个站点

305
00:10:25,686 --> 0:10:26,596
去访问 cookie

306
00:10:27,486 --> 0:10:29,036
通过让用户给出

307
00:10:29,106 --> 0:10:31,026
明确的是否允许访问 cookie 的意见

308
00:10:31,026 --> 0:10:33,306
我们赋予了用户去

309
00:10:33,366 --> 0:10:35,096
管控自己的 cookies 以及

310
00:10:35,136 --> 0:10:36,406
哪些网站可以进行追踪的权力

311
00:10:36,886 --> 0:10:38,026
令他们的浏览体验

312
00:10:38,026 --> 0:10:41,046
更加具有私密性

313
00:10:41,046 --> 0:10:41,356
如果他们愿意的话

314
00:10:42,136 --> 0:10:45,386
接下来 我们来谈谈

315
00:10:45,386 --> 0:10:47,166
使用自动填充强密码

316
00:10:47,246 --> 0:10:48,106
进行身份验证

317
00:10:48,106 --> 0:10:50,556
我相信你们已经在 State of the Union

318
00:10:50,586 --> 0:10:51,636
以及几天前的演讲中看过这个了

319
00:10:51,906 --> 0:10:53,436
自动填充强密码是一个

320
00:10:53,436 --> 0:10:55,296
能够保证用户

321
00:10:55,296 --> 0:10:58,526
选择并存储强密码的方法

322
00:10:58,756 --> 0:10:59,896
当他们在设置

323
00:10:59,896 --> 0:11:00,356
新账户的时候

324
00:10:59,896 --> 0:11:00,356
新账户的时候

325
00:11:00,996 --> 0:11:02,066
并且 这个功能其实对每个人都好

326
00:11:02,066 --> 0:11:03,926
我是说 我喜欢把自己想象成

327
00:11:03,926 --> 0:11:05,416
一个愿意选择使用

328
00:11:05,416 --> 0:11:06,866
强密码的人

329
00:11:06,866 --> 0:11:08,716
但是一段时间过后

330
00:11:08,716 --> 0:11:10,746
我会逐渐发现我的密码 并没有想象中那么强

331
00:11:11,256 --> 0:11:12,376
而且我可能已经在

332
00:11:12,376 --> 0:11:13,066
好几处地方用过它了

333
00:11:14,276 --> 0:11:15,666
对于大多数开发者来说

334
00:11:15,666 --> 0:11:16,886
你不要费力就可以享用

335
00:11:16,886 --> 0:11:18,436
这个功能 因为启发式算法会

336
00:11:18,436 --> 0:11:20,156
判断你是在注册账户

337
00:11:20,156 --> 0:11:21,056
还是在登录页面

338
00:11:21,526 --> 0:11:23,186
不过 为了保证这个管用

339
00:11:23,566 --> 0:11:26,376
无论登录流程是怎样的

340
00:11:26,376 --> 0:11:28,086
需要把 AutoComplete 属性添加到

341
00:11:28,086 --> 0:11:29,446
适当的那些输入栏中

342
00:11:30,226 --> 0:11:32,516
现在 我们默认选择的强密码

343
00:11:32,516 --> 0:11:34,466
是长度为 20 个字符

344
00:11:34,466 --> 0:11:35,926
包括大写字母

345
00:11:36,276 --> 0:11:38,086
和小写的字母

346
00:11:38,566 --> 0:11:39,426
数字和连字符号

347
00:11:40,306 --> 0:11:41,436
虽然这项功能被设计成能够

348
00:11:41,436 --> 0:11:42,466
和大多数服务兼容

349
00:11:42,466 --> 0:11:43,846
我们也承认

350
00:11:44,196 --> 0:11:45,986
有些时候你的密码需要

351
00:11:45,986 --> 0:11:47,916
符合某些特定的要求

352
00:11:47,916 --> 0:11:49,566
才能与后台系统兼容

353
00:11:50,136 --> 0:11:51,516
正因为这个原因

354
00:11:51,586 --> 0:11:53,486
你可以添加一个 passwordRules 属性

355
00:11:53,486 --> 0:11:55,236
到你的文本元素中去

356
00:11:55,236 --> 0:11:56,686
来详细说明那些要求

357
00:11:57,176 --> 0:11:58,396
另外 在开发者站点

358
00:11:58,486 --> 0:11:59,816
有一个密码验证工具

359
00:11:59,816 --> 0:12:02,766
帮你去测试自动填充强密码的兼容性

360
00:11:59,816 --> 0:12:02,766
帮你去测试自动填充强密码的兼容性

361
00:12:02,766 --> 0:12:04,686
并开发出

362
00:12:04,856 --> 0:12:06,646
你自己的密码规则

363
00:12:08,396 --> 0:12:09,776
另一项在 State of the Union 中提到的

364
00:12:09,776 --> 0:12:11,736
功能是

365
00:12:11,786 --> 0:12:13,316
Security Code AutoFill

366
00:12:13,346 --> 0:12:14,656
这是另一项大多数人都将能够

367
00:12:14,656 --> 0:12:15,336
免费获取的功能

368
00:12:15,766 --> 0:12:17,136
这项功能我会加以好好利用

369
00:12:17,136 --> 0:12:18,936
因为我发现

370
00:12:18,936 --> 0:12:20,256
不停转换是件很麻烦的事

371
00:12:20,286 --> 0:12:22,536
在我的 App 和 网站之间

372
00:12:22,536 --> 0:12:24,076
还有信息 还要为代码

373
00:12:24,076 --> 0:12:25,636
寻找那些数字

374
00:12:25,636 --> 0:12:27,126
将它输入进去并尝试记住它

375
00:12:27,456 --> 0:12:29,096
那么 让 Safari 计算出

376
00:12:29,466 --> 0:12:30,916
我该在什么时候输入安全代码

377
00:12:30,916 --> 0:12:32,246
然后在快速输入栏中

378
00:12:32,246 --> 0:12:33,106
进行提示

379
00:12:33,376 --> 0:12:35,556
这样会让过程更加便捷

380
00:12:36,346 --> 0:12:38,206
而且 就像从前一样

381
00:12:38,256 --> 0:12:40,206
你能免费得到这项功能

382
00:12:40,356 --> 0:12:41,666
因为它使用的是启发式算法

383
00:12:41,666 --> 0:12:43,246
不过为了确保这些算法能够正确运行

384
00:12:43,246 --> 0:12:44,786
并且你能在快速输入栏里

385
00:12:44,846 --> 0:12:47,596
获得提示 将输入区域

386
00:12:47,596 --> 0:12:50,896
的 AutoComplete 属性标记为

387
00:12:51,026 --> 0:12:51,596
one-time code value

388
00:12:52,266 --> 0:12:55,426
想了解更多的话 希望你们能在线查看 

389
00:12:55,476 --> 0:12:56,936
Automatic Strong Passwords 以及

390
00:12:56,936 --> 0:12:58,956
Security Code AutoFill 的板块

391
00:12:59,526 --> 0:13:01,946
好 这就说完了安全问题

392
00:12:59,526 --> 0:13:01,946
好 这就说完了安全问题

393
00:13:02,666 --> 0:13:04,556
刚刚我们谈了更换到 WKWebView

394
00:13:04,556 --> 0:13:05,966
然后聊了 Safari App 扩展的

395
00:13:05,966 --> 0:13:07,346
内容拦截器

396
00:13:07,716 --> 0:13:09,476
还有自资源完整性能够

397
00:13:09,476 --> 0:13:10,886
自动防故障 确保你不会

398
00:13:10,886 --> 0:13:12,406
向用户提供受损的脚本

399
00:13:12,406 --> 0:13:14,566
还有智能追踪预防法

400
00:13:14,566 --> 0:13:16,146
它通过 Storage Access API 改善用户的

401
00:13:16,146 --> 0:13:17,406
隐私

402
00:13:17,506 --> 0:13:19,126
然后 用自动填充强密码

403
00:13:19,126 --> 0:13:20,536
还有 security code AutoFill

404
00:13:20,536 --> 0:13:22,266
你可以向用户提供

405
00:13:22,266 --> 0:13:25,056
安全便捷的功能

406
00:13:25,186 --> 0:13:30,806
咻 感谢你们还留在这里

407
00:13:30,806 --> 0:13:32,596
好的 那就让我们继续吧

408
00:13:32,666 --> 0:13:34,146
来谈谈有关性能的各种功能

409
00:13:34,176 --> 0:13:36,086
先从字体集合说起

410
00:13:36,826 --> 0:13:39,376
对了 如果你错过了这场演讲的开场

411
00:13:39,376 --> 0:13:41,856
我的名字是 Shloka Kini

412
00:13:41,856 --> 0:13:44,976
这不是一个盎格鲁-撒克逊式的名字

413
00:13:46,276 --> 0:13:48,026
然后 这里是我的名和姓氏

414
00:13:48,026 --> 0:13:49,856
是以印度语中的梵文天城体

415
00:13:49,856 --> 0:13:51,486
来书写的

416
00:13:51,926 --> 0:13:53,616
用多种字体 不同的粗细

417
00:13:53,616 --> 0:13:55,976
和样式 但都是同一组文字内容

418
00:13:56,776 --> 0:13:58,476
今年起 我们开始支持

419
00:13:58,476 --> 0:14:00,566
WOFF 2 和 TrueType

420
00:13:58,476 --> 0:14:00,566
WOFF 2 和 TrueType

421
00:14:00,566 --> 0:14:01,046
字体集合

422
00:14:01,656 --> 0:14:03,496
将相关字体捆绑在

423
00:14:03,496 --> 0:14:05,076
在单个集合文件内

424
00:14:05,316 --> 0:14:07,076
可以消除字符映射

425
00:14:07,076 --> 0:14:08,796
的重复表格

426
00:14:08,796 --> 0:14:10,746
举例来说 我们的一种内置字体

427
00:14:10,746 --> 0:14:13,626
PingFang 在使用集合后

428
00:14:13,626 --> 0:14:15,286
文件大小

429
00:14:15,286 --> 0:14:16,046
减少了 84％

430
00:14:16,846 --> 0:14:17,826
字体集合能够

431
00:14:17,826 --> 0:14:19,736
大大地减少

432
00:14:19,736 --> 0:14:21,136
你的字体文件的大小

433
00:14:21,136 --> 0:14:23,296
因为不同字体对于同样的字母集合

434
00:14:23,296 --> 0:14:23,956
共享了同一个表格

435
00:14:24,536 --> 0:14:27,226
下一项要介绍的功能是

436
00:14:27,226 --> 0:14:29,776
字体展示 对于大多数开发者来说

437
00:14:29,956 --> 0:14:30,826
无需做出改变

438
00:14:31,126 --> 0:14:32,826
本质上来说 如果你有使用

439
00:14:32,826 --> 0:14:34,746
自定义字体的 web 内容

440
00:14:35,146 --> 0:14:36,576
不管出于什么原因 你的用户

441
00:14:36,576 --> 0:14:38,496
看不到它们

442
00:14:38,496 --> 0:14:40,116
默认情况下 我们会为文本

443
00:14:40,276 --> 0:14:42,076
留出最多三秒的空白占位符

444
00:14:42,156 --> 0:14:44,386
在显示字体之前

445
00:14:44,386 --> 0:14:46,206
以保持屏幕上

446
00:14:46,206 --> 0:14:48,376
所有内容的位置

447
00:14:48,826 --> 0:14:51,166
但是 如果这个默认的选项

448
00:14:51,166 --> 0:14:52,686
不适合你

449
00:14:52,686 --> 0:14:54,006
并且你对于那三秒内会发生什么

450
00:14:54,006 --> 0:14:55,616
想拥有更多的控制

451
00:14:55,616 --> 0:14:57,446
你可以使用

452
00:14:57,446 --> 0:14:59,136
字体显示描述器

453
00:14:59,806 --> 0:15:01,066
设定不同的数值

454
00:14:59,806 --> 0:15:01,066
设定不同的数值

455
00:15:01,066 --> 0:15:02,396
你可以指定另一种字体

456
00:15:02,396 --> 0:15:04,286
作为备选 或者检查

457
00:15:04,286 --> 0:15:06,916
浏览器是否在缓存中有那种字体

458
00:15:09,316 --> 0:15:11,116
现在 你可以使用一个很酷的技巧

459
00:15:11,116 --> 0:15:12,446
来改善动画图像的性能

460
00:15:12,446 --> 0:15:15,366
那就是 使用视频

461
00:15:15,366 --> 0:15:18,386
我超爱我 Mac 笔记本背景中的

462
00:15:18,386 --> 0:15:20,726
彩色粉尘爆炸

463
00:15:20,726 --> 0:15:23,716
它真的很好看 但它是静态的

464
00:15:25,366 --> 0:15:27,746
我想要这个图案能“嘭” 爆炸

465
00:15:28,526 --> 0:15:29,796
我是说 我希望让它动起来

466
00:15:30,116 --> 0:15:31,066
我想要一个 GIF 动画

467
00:15:31,876 --> 0:15:33,306
但是 动画 GIF 需要更长的时间

468
00:15:33,306 --> 0:15:36,626
才能加载 而且耗费更多的电池电量 

469
00:15:36,666 --> 0:15:37,956
与展示同样内容的视频文件相比

470
00:15:37,956 --> 0:15:41,976
更能更差一些

471
00:15:42,176 --> 0:15:44,936
现在在 Safari 中 MP4 视频文件

472
00:15:44,936 --> 0:15:46,316
在图像元素中也能得到支持

473
00:15:46,316 --> 0:15:48,176
充分利用了苹果内置的

474
00:15:48,176 --> 0:15:49,606
硬件视频

475
00:15:49,606 --> 0:15:50,176
解码支持

476
00:15:50,906 --> 0:15:52,666
我的内容加载速度更快

477
00:15:52,666 --> 0:15:53,856
耗电量更少 性能也更好

478
00:15:53,856 --> 0:15:56,056
但我同样可以在

479
00:15:56,056 --> 0:15:58,886
CSS 背景图片的属性下

480
00:15:58,946 --> 0:15:59,386
使用 MP4

481
00:16:00,556 --> 0:16:01,446
如果你采用了这种技术

482
00:16:01,446 --> 0:16:03,706
只用最简单的方式

483
00:16:04,516 --> 0:16:05,876
你就可以得到一个新版本

484
00:16:05,876 --> 0:16:07,556
只是它无法与

485
00:16:07,556 --> 0:16:08,086
旧版浏览器兼容

486
00:16:08,726 --> 0:16:10,086
旧版的浏览器不支持

487
00:16:10,086 --> 0:16:11,286
MP4 和图像元素

488
00:16:11,646 --> 0:16:13,916
幸运的是 使用现有技术

489
00:16:13,916 --> 0:16:16,216
你可以指定一个备用图像用来替代显示

490
00:16:16,376 --> 0:16:19,466
在 MP4 无法运行的情况下

491
00:16:19,986 --> 0:16:22,636
各位请注意了

492
00:16:22,716 --> 0:16:25,876
现在我们要转向下一个话题

493
00:16:26,276 --> 0:16:26,926
事件监听器

494
00:16:27,306 --> 0:16:29,606
这又是一个

495
00:16:29,606 --> 0:16:31,476
拥有很好的默认设置的功能

496
00:16:31,476 --> 0:16:33,466
在特殊情况下还可以 有自定义的设置

497
00:16:34,556 --> 0:16:36,286
任何用户在尝试使用触摸屏

498
00:16:36,286 --> 0:16:37,536
浏览网页时

499
00:16:37,696 --> 0:16:39,096
他们需要滚动屏幕

500
00:16:39,096 --> 0:16:40,976
对于每一次滚动触摸

501
00:16:41,206 --> 0:16:42,896
触摸的事件监听器都会被触发

502
00:16:43,596 --> 0:16:45,506
这就会中断滚动触摸

503
00:16:45,506 --> 0:16:47,726
并造成它有一点跳动

504
00:16:48,576 --> 0:16:49,966
来看看这两个例子

505
00:16:50,726 --> 0:16:52,896
看 左边的一个与右边相比

506
00:16:52,946 --> 0:16:56,156
被中断干扰得要更严重

507
00:16:56,536 --> 0:16:57,606
我的意思是 它几乎没有移动

508
00:16:58,536 --> 0:17:00,966
那么 右边是哪里

509
00:16:58,536 --> 0:17:00,966
那么 右边是哪里

510
00:17:01,306 --> 0:17:02,016
做对了呢

511
00:17:02,816 --> 0:17:03,946
因为它使用了

512
00:17:03,946 --> 0:17:04,366
被动事件监听器

513
00:17:04,965 --> 0:17:06,675
默认情况下 我们会在

514
00:17:06,675 --> 0:17:08,366
文档 窗口和主体元素上设置启动

515
00:17:08,366 --> 0:17:10,306
被动事件监听器

516
00:17:10,306 --> 0:17:11,675
这样一来 任何的触摸

517
00:17:11,675 --> 0:17:13,356
都会指示浏览器

518
00:17:13,826 --> 0:17:15,806
去继续滚动屏幕

519
00:17:15,866 --> 0:17:17,836
避免因为等待事件监听器完成任务

520
00:17:17,836 --> 0:17:19,146
而被中断

521
00:17:19,806 --> 0:17:21,445
如果你想要把事件监听器的

522
00:17:21,445 --> 0:17:22,726
其他元素也设置为被动

523
00:17:22,726 --> 0:17:24,546
你可以把那些

524
00:17:24,546 --> 0:17:25,935
事件监听器的

525
00:17:25,935 --> 0:17:27,935
被动属性 设置为 “true ”

526
00:17:28,816 --> 0:17:30,816
简单来说

527
00:17:30,886 --> 0:17:32,576
在不阻碍默认事件进行处理的情况下

528
00:17:32,576 --> 0:17:34,546
这个标志告诉浏览器

529
00:17:34,546 --> 0:17:36,306
不要去等待事件监听器完成

530
00:17:36,306 --> 0:17:37,936
并且让用户可以

531
00:17:38,026 --> 0:17:40,226
流畅地滚动屏幕

532
00:17:40,696 --> 0:17:44,356
接下来 我们转向具有

533
00:17:44,356 --> 0:17:46,546
异步图像解码的

534
00:17:46,546 --> 0:17:47,056
异步调用

535
00:17:47,786 --> 0:17:49,236
通常来说 图像都是被

536
00:17:49,236 --> 0:17:50,456
同步解码的

537
00:17:50,656 --> 0:17:51,976
所以 主线程遭到了阻塞

538
00:17:52,506 --> 0:17:54,656
所有的图像都被解码

539
00:17:54,656 --> 0:17:55,346
然后显示出来 

540
00:17:56,136 --> 0:17:57,796
阻塞了主线程

541
00:17:57,796 --> 0:17:59,486
用户的交互也受到阻止

542
00:17:59,906 --> 0:18:01,356
不过 如果使用异步解码

543
00:17:59,906 --> 0:18:01,356
不过 如果使用异步解码

544
00:18:01,356 --> 0:18:02,546
这些操作就能并行发生

545
00:18:02,546 --> 0:18:04,476
并且是在一个单独的

546
00:18:04,536 --> 0:18:05,626
线程上 这意味着交互

547
00:18:05,666 --> 0:18:07,726
不会被阻止

548
00:18:08,236 --> 0:18:09,856
今年新增的异步图像解码功能

549
00:18:09,946 --> 0:18:12,276
在默认的情况下

550
00:18:12,276 --> 0:18:14,226
会在首页加载时发生

551
00:18:15,136 --> 0:18:17,476
它可以覆盖大多数 web 内容的情况

552
00:18:17,796 --> 0:18:20,286
当然 我们知道 你们中的一些人

553
00:18:20,286 --> 0:18:21,576
可能会遇到特殊情况

554
00:18:21,656 --> 0:18:24,426
比如说 在你的网页上有一张

555
00:18:24,426 --> 0:18:26,216
多块组合平铺的地图

556
00:18:26,216 --> 0:18:27,356
它在初始页面加载后进行加载 

557
00:18:27,586 --> 0:18:28,986
而且 如果它有很多图像

558
00:18:28,986 --> 0:18:32,796
部分图块可能会延迟显示

559
00:18:33,356 --> 0:18:35,716
或者 可能你在 App 中放入了一些

560
00:18:35,716 --> 0:18:37,016
轮播的图像

561
00:18:37,016 --> 0:18:38,516
并希望它们有淡入淡出的轮播效果

562
00:18:38,516 --> 0:18:40,086
但当你想要加速播放

563
00:18:40,186 --> 0:18:41,726
这组幻灯片

564
00:18:41,726 --> 0:18:43,296
如果图像是同步解码的

565
00:18:43,296 --> 0:18:44,886
它们可能无法及时显示出来

566
00:18:45,436 --> 0:18:49,336
而且它们会突兀地切换

567
00:18:50,816 --> 0:18:53,216
但在右侧的例子中

568
00:18:53,216 --> 0:18:54,776
异步解码让你的淡入淡出效果

569
00:18:54,886 --> 0:18:55,246
更加平滑流畅

570
00:18:55,296 --> 0:18:58,656
那么 如果你想要采用这些特殊的

571
00:18:58,776 --> 0:18:59,916
动态图像的范例

572
00:18:59,916 --> 0:19:01,176
你有两种选择

573
00:18:59,916 --> 0:19:01,176
你有两种选择

574
00:19:01,456 --> 0:19:03,436
一 你可以在标记中添加

575
00:19:03,486 --> 0:19:05,176
异步解码的属性

576
00:19:05,176 --> 0:19:06,136
到你的图像元素中去

577
00:19:06,756 --> 0:19:09,536
或者 你可以使用 JavaScript

578
00:19:09,536 --> 0:19:11,996
API 的 HTMLImageElements.decode 方法

579
00:19:11,996 --> 0:19:13,856
它会返回一个提示

580
00:19:14,106 --> 0:19:15,726
让你知道图像在何时

581
00:19:15,726 --> 0:19:17,756
可以被添加到 dom

582
00:19:17,836 --> 0:19:20,796
而不会导致下一帧的解码延迟

583
00:19:21,306 --> 0:19:24,216
下面 继续说

584
00:19:24,216 --> 0:19:26,336
异步调用对于

585
00:19:26,336 --> 0:19:27,416
Beacon API 的支持

586
00:19:28,266 --> 0:19:29,566
我们知道 作为开发人员

587
00:19:29,566 --> 0:19:31,466
你想要在 unload 事件中发送数据

588
00:19:31,956 --> 0:19:33,936
可能是想要追踪外发链接

589
00:19:34,416 --> 0:19:35,896
通常情况下 unload 事件的异步请求

590
00:19:35,896 --> 0:19:37,766
会被忽略掉

591
00:19:37,906 --> 0:19:38,776
于是你不得不使用

592
00:19:38,776 --> 0:19:40,266
同步请求 结果就导致下一个页面

593
00:19:40,266 --> 0:19:41,816
加载失败

594
00:19:42,756 --> 0:19:44,206
不过 我们现在支持

595
00:19:44,206 --> 0:19:45,066
Beacon API

596
00:19:45,706 --> 0:19:47,086
所以只要 Safari 还在运行

597
00:19:47,086 --> 0:19:48,816
你就可以将数据发送到服务器上

598
00:19:48,816 --> 0:19:50,866
然后把它抛在脑后

599
00:19:50,866 --> 0:19:52,666
因为你知道数据一定会被

600
00:19:52,666 --> 0:19:53,466
发送出去的

601
00:19:53,966 --> 0:19:57,446
好了 你们已经听我讲的够多了

602
00:19:57,926 --> 0:19:59,096
我相信你们都想亲眼看看

603
00:19:59,096 --> 0:20:00,036
这些与安全和性能相关的功能

604
00:19:59,096 --> 0:20:00,036
这些与安全和性能相关的功能

605
00:20:00,036 --> 0:20:01,316
实际操作起来什么样

606
00:20:01,316 --> 0:20:03,056
那么 有请我的同事 Jason 

607
00:20:03,056 --> 0:20:05,216
上台来为大家演示这些功能

608
00:20:05,436 --> 0:20:05,826
Jason

609
00:20:06,516 --> 0:20:10,876
[ 掌声 ]

610
00:20:11,376 --> 0:20:12,176
&gt;&gt; 大家好

611
00:20:12,316 --> 0:20:13,986
我叫 Jason Sandmeyer

612
00:20:13,986 --> 0:20:15,626
我是 Apple.com 的一名开发人员

613
00:20:16,436 --> 0:20:18,046
不工作的时候 我喜欢艺术和手工创作

614
00:20:18,046 --> 0:20:20,286
比如建造鸟舍

615
00:20:20,286 --> 0:20:22,156
然后我最近开始

616
00:20:22,156 --> 0:20:23,636
写这个博客 想要分享

617
00:20:23,636 --> 0:20:25,116
我的一些作品

618
00:20:25,116 --> 0:20:25,526
并给其他人以启发

619
00:20:25,816 --> 0:20:27,676
我花费了大量的时间去挑选

620
00:20:27,676 --> 0:20:29,746
合适的字体和舒服的颜色

621
00:20:30,296 --> 0:20:31,246
我为此感到骄傲

622
00:20:31,996 --> 0:20:33,236
不过 我不仅仅是为

623
00:20:33,266 --> 0:20:34,696
自己的设计感到骄傲

624
00:20:34,696 --> 0:20:36,576
我也为自己能够向用户提供

625
00:20:36,576 --> 0:20:38,326
良好 安全 高性能的浏览体验

626
00:20:38,326 --> 0:20:39,526
而感到自豪

627
00:20:40,056 --> 0:20:41,506
因此 我真的对于 WebKit 和 Safari 

628
00:20:41,506 --> 0:20:42,756
这些能够提升性能和安全的新功能

629
00:20:42,756 --> 0:20:44,186
感到非常兴奋

630
00:20:44,186 --> 0:20:46,066
我真的希望

631
00:20:46,066 --> 0:20:48,476
在我自己的站点上 充分利用它们

632
00:20:48,646 --> 0:20:49,816
我很乐意向你们演示

633
00:20:49,816 --> 0:20:50,316
它们使用起来是多么容易

634
00:20:52,056 --> 0:20:53,546
这里 我已经将我的网站

635
00:20:53,546 --> 0:20:54,416
加载到我的 MacBook Pro 上

636
00:20:56,716 --> 0:20:58,366
然后 喔

637
00:20:58,366 --> 0:20:58,586
好的

638
00:20:58,586 --> 0:21:01,006
&gt;&gt; 嘿 Jason 你刚刚做了什么

639
00:20:58,586 --> 0:21:01,006
&gt;&gt; 嘿 Jason 你刚刚做了什么

640
00:21:01,566 --> 0:21:03,716
&gt;&gt; 没错 这可不是我刚才自夸的那个

641
00:21:03,716 --> 0:21:05,226
漂亮的博客

642
00:21:05,226 --> 0:21:06,096
对吧

643
00:21:07,506 --> 0:21:08,986
让我们来看看 这是正确的 URL

644
00:21:10,156 --> 0:21:12,406
我想我知道这里发生了什么问题

645
00:21:12,996 --> 0:21:15,586
当我刚开始设立这个网站时

646
00:21:15,586 --> 0:21:19,436
我的朋友们曾提醒我

647
00:21:19,436 --> 0:21:20,866
生活类博客的

648
00:21:20,866 --> 0:21:23,516
行业竞争相当激烈

649
00:21:24,856 --> 0:21:27,176
很明显 有人在蓄意破坏我的网站

650
00:21:27,906 --> 0:21:29,436
有人偷偷替换掉了

651
00:21:29,436 --> 0:21:31,266
我内容分发网络的样式表

652
00:21:32,016 --> 0:21:33,736
不过很幸运 

653
00:21:33,796 --> 0:21:34,396
我还留有备份

654
00:21:34,986 --> 0:21:36,536
我们可以使用

655
00:21:36,536 --> 0:21:37,936
子资源完整性的功能

656
00:21:37,936 --> 0:21:39,596
为网站提升安全性能

657
00:21:39,596 --> 0:21:40,976
确保这种情况不再发生

658
00:21:46,286 --> 0:21:49,106
所以 我先从添加新的完整性属性

659
00:21:49,106 --> 0:21:52,246
到我的链接标记开始操作

660
00:21:52,246 --> 0:21:53,896
值得注意的是 这个改动对脚本

661
00:21:53,896 --> 0:21:55,356
也有影响 不过我们

662
00:21:55,356 --> 0:21:57,046
晚些时候再做改变

663
00:21:57,426 --> 0:21:58,756
我们稍后再进行添加

664
00:21:59,286 --> 0:22:03,516
那么 这个属性的数值

665
00:21:59,286 --> 0:22:03,516
那么 这个属性的数值

666
00:22:03,956 --> 0:22:06,266
是哈希算法的结果

667
00:22:06,266 --> 0:22:07,406
我们用这个算法能够得到文件的校验和

668
00:22:07,406 --> 0:22:09,316
我希望自己和用户

669
00:22:09,316 --> 0:22:12,586
可以看到它

670
00:22:12,826 --> 0:22:14,196
我已经准备了一个 hash

671
00:22:14,316 --> 0:22:15,566
叫 SHA256

672
00:22:16,896 --> 0:22:20,156
接下来 一个连字符

673
00:22:20,156 --> 0:22:22,786
然后是 base64 编码用于表示这个 hash

674
00:22:24,006 --> 0:22:26,296
现在 进行保存 然后回到

675
00:22:26,296 --> 0:22:28,256
我们的页面 重新加载

676
00:22:29,436 --> 0:22:30,866
现在我们能看到网页

677
00:22:30,866 --> 0:22:31,326
没有样式

678
00:22:31,876 --> 0:22:32,916
因为已下载文件的 hash

679
00:22:32,916 --> 0:22:34,666
和 HTML 里的 hash 

680
00:22:34,666 --> 0:22:36,026
不匹配

681
00:22:36,606 --> 0:22:38,986
因此 Safari 已经阻止它去加载

682
00:22:41,916 --> 0:22:43,376
现在 让我们连接到我的 CDN

683
00:22:43,376 --> 0:22:46,726
这是我桌面上的备份

684
00:22:47,246 --> 0:22:50,786
让我们把备份拖入

685
00:22:50,886 --> 0:22:53,876
CDN 当中 以替换受损的文件

686
00:22:54,806 --> 0:22:57,036
现在 我们重新加载

687
00:22:57,356 --> 0:22:57,976
这就看起来好多了

688
00:22:58,516 --> 0:23:01,936
[ 掌声 ]

689
00:22:58,516 --> 0:23:01,936
[ 掌声 ]

690
00:23:02,436 --> 0:23:05,416
谢谢 所以在使用了

691
00:23:05,416 --> 0:23:06,566
子资源完整性的功能后

692
00:23:06,566 --> 0:23:08,146
我更加确信网站访问者

693
00:23:08,146 --> 0:23:09,926
能获取我预想中的

694
00:23:09,926 --> 0:23:12,686
样式和脚本

695
00:23:12,886 --> 0:23:13,926
下面 让我们稍稍换个方向

696
00:23:13,926 --> 0:23:15,006
来谈谈我们在

697
00:23:15,006 --> 0:23:16,166
改进性能方面

698
00:23:16,166 --> 0:23:16,426
能做些什么

699
00:23:16,426 --> 0:23:19,556
另外 如果能知道我网站上

700
00:23:19,556 --> 0:23:20,806
哪些链接被用户频繁点击

701
00:23:20,806 --> 0:23:22,446
哪些很少被点击 这是很有用的信息

702
00:23:22,716 --> 0:23:23,976
这能帮助我在设计时 做出更明智的决策

703
00:23:29,346 --> 0:23:30,956
所以我用这个 click handler

704
00:23:30,956 --> 0:23:32,106
它能够向我控制的服务器报告

705
00:23:32,106 --> 0:23:33,666
哪些链接被用户点击过

706
00:23:33,666 --> 0:23:35,976
服务器会收集点击量的数据 供我有空时查看

707
00:23:40,736 --> 0:23:43,106
还有 请注意在我点击

708
00:23:43,106 --> 0:23:44,686
这个木工页面的链接时

709
00:23:44,846 --> 0:23:45,976
会发生轻微的延迟

710
00:23:45,976 --> 0:23:46,756
点击后会进入我网站里

711
00:23:46,756 --> 0:23:49,066
其他与木工相关的页面

712
00:23:50,086 --> 0:23:51,126
我现在就点击这个链接

713
00:23:52,816 --> 0:23:55,136
花了大约半秒到一秒钟时间

714
00:23:55,136 --> 0:23:59,036
之所以会这样

715
00:23:59,036 --> 0:24:00,706
是因为我在 click handler 中

716
00:23:59,036 --> 0:24:00,706
是因为我在 click handler 中

717
00:24:00,706 --> 0:24:02,416
做出了同步请求

718
00:24:02,666 --> 0:24:05,706
这会阻止 Safari 导航到下一页

719
00:24:06,446 --> 0:24:08,026
进行同步请求

720
00:24:08,026 --> 0:24:09,306
可确保浏览器在导航到下一页时

721
00:24:09,306 --> 0:24:12,226
不会取消这一请求

722
00:24:13,636 --> 0:24:14,636
但是 这是在等待

723
00:24:14,636 --> 0:24:16,066
我的服务器响应可能需要

724
00:24:16,066 --> 0:24:16,766
一段时间

725
00:24:16,906 --> 0:24:18,046
问题是 我其实不关心什么

726
00:24:18,046 --> 0:24:19,256
服务器响应

727
00:24:19,256 --> 0:24:20,286
我只想确定这些数据

728
00:24:20,286 --> 0:24:21,636
传送到了服务器上

729
00:24:22,536 --> 0:24:24,406
因此 Beacon API 其实是

730
00:24:24,406 --> 0:24:25,826
一个完美的替代品

731
00:24:26,376 --> 0:24:29,776
现在我要开始通过

732
00:24:30,416 --> 0:24:32,266
检查 Beacon API 

733
00:24:32,266 --> 0:24:33,746
在浏览器中是否可用

734
00:24:33,746 --> 0:24:35,396
方法是在 navigator 对象上

735
00:24:35,396 --> 0:24:36,386
查找 sendBeacon 方法

736
00:24:37,366 --> 0:24:38,656
如果它不可用

737
00:24:38,656 --> 0:24:39,996
我就继续我

738
00:24:39,996 --> 0:24:40,346
刚才在做的事情

739
00:24:41,526 --> 0:24:43,626
然后 我们可以使用它

740
00:24:46,496 --> 0:24:49,106
把数据和我想要访问的 endpoint

741
00:24:49,756 --> 0:24:53,666
一同传入

742
00:24:53,666 --> 0:24:54,356
让我们进行保存

743
00:24:55,196 --> 0:24:57,726
然后返回去 重新加载

744
00:24:57,726 --> 0:24:58,236
新的脚本

745
00:24:59,336 --> 0:25:00,676
现在 当我点击这个链接时

746
00:24:59,336 --> 0:25:00,676
现在 当我点击这个链接时

747
00:25:00,676 --> 0:25:02,256
可以看到反应几乎是立刻的

748
00:25:02,296 --> 0:25:03,696
我现在要点击这个链接了

749
00:25:04,486 --> 0:25:05,056
好了

750
00:25:06,046 --> 0:25:08,746
所以 与 XML/http 请求相比

751
00:25:08,746 --> 0:25:10,576
这个使用的代码更少

752
00:25:10,576 --> 0:25:11,796
但它同样的可靠

753
00:25:12,126 --> 0:25:13,696
而现在 我的用户

754
00:25:13,696 --> 0:25:14,976
在我的网站里 就能更快速地畅游了

755
00:25:15,516 --> 0:25:17,736
[ 掌声 ]

756
00:25:18,236 --> 0:25:22,956
谢谢大家 接下来 

757
00:25:22,956 --> 0:25:24,036
我想看看一个问题

758
00:25:24,036 --> 0:25:25,956
这个问题在 iPad 上更加明显

759
00:25:33,136 --> 0:25:34,666
我把建造鸟舍的

760
00:25:34,666 --> 0:25:36,016
每一步都做成了幻灯片

761
00:25:36,016 --> 0:25:37,926
并加入了淡入淡出的轮播效果

762
00:25:39,776 --> 0:25:41,596
点击向右的箭头

763
00:25:41,596 --> 0:25:42,916
就能前进到下一张幻灯片

764
00:25:44,356 --> 0:25:45,856
不过 你可能已经注意到了

765
00:25:45,856 --> 0:25:48,066
切换时 在图片的位置会出现

766
00:25:48,176 --> 0:25:49,826
短暂的空白

767
00:25:50,286 --> 0:25:51,846
让我来再翻几张幻灯片

768
00:25:56,066 --> 0:25:58,636
让我们来看看这个轮播的代码

769
00:25:58,636 --> 0:26:00,326
看看发生了什么 我觉得这个切换效果

770
00:25:58,636 --> 0:26:00,326
看看发生了什么 我觉得这个切换效果

771
00:26:00,326 --> 0:26:00,776
可以更流畅

772
00:26:06,066 --> 0:26:07,796
这里是轮播的类

773
00:26:08,516 --> 0:26:10,036
我想要仔细看看这个方法

774
00:26:10,036 --> 0:26:11,336
在这里叫 setCurrentSlide

775
00:26:11,896 --> 0:26:13,086
这个方法会在

776
00:26:13,086 --> 0:26:14,256
你点击箭头

777
00:26:14,256 --> 0:26:16,476
转换到下一张幻灯片时被调用

778
00:26:18,816 --> 0:26:20,376
由于每张幻灯片在加载页面时

779
00:26:20,376 --> 0:26:21,896
不会立即显示

780
00:26:21,896 --> 0:26:24,056
只有当用户点击箭头时

781
00:26:24,056 --> 0:26:26,976
我的轮播才会加载下一张幻灯片的图像

782
00:26:31,176 --> 0:26:33,036
我们遇到的问题是

783
00:26:33,086 --> 0:26:36,506
页面切换是瞬间完成的

784
00:26:37,716 --> 0:26:39,446
而不是等图像加载完再发生

785
00:26:39,956 --> 0:26:41,356
而且 在图像加载之后

786
00:26:41,356 --> 0:26:42,746
它仍需要被解码

787
00:26:42,746 --> 0:26:44,816
然后才能在屏幕上显示出来

788
00:26:45,876 --> 0:26:47,486
所以 我想做的是

789
00:26:47,486 --> 0:26:49,036
等待图像加载

790
00:26:49,036 --> 0:26:51,316
并且被加码

791
00:26:51,316 --> 0:26:52,466
我相信这样图像就能顺畅显示

792
00:26:53,156 --> 0:26:54,996
而且我可以使用新的解码方法

793
00:26:54,996 --> 0:26:57,486
在 HTML 图像元素上

794
00:26:58,936 --> 0:27:01,276
来改进显示效果

795
00:26:58,936 --> 0:27:01,276
来改进显示效果

796
00:27:02,506 --> 0:27:04,056
这里 是我的图像

797
00:27:04,056 --> 0:27:04,976
是图像元素的标记

798
00:27:09,046 --> 0:27:10,406
decode() 方法会

799
00:27:10,616 --> 0:27:12,326
异步地解码这个图像

800
00:27:12,566 --> 0:27:14,206
然后返回一个 Promise

801
00:27:14,206 --> 0:27:16,316
如果图像成功被加载并解码

802
00:27:16,316 --> 0:27:19,646
就会调用响应函数 resolve

803
00:27:19,746 --> 0:27:21,716
所以 我就把我的 transition 函数传入

804
00:27:21,756 --> 0:27:23,696
作为这个 Promise 的回调函数

805
00:27:24,326 --> 0:27:26,946
现在 让我们切换回 iPad

806
00:27:33,256 --> 0:27:35,536
我们来刷新页面以获取

807
00:27:35,536 --> 0:27:36,036
新的脚本

808
00:27:37,076 --> 0:27:38,236
现在 当我前进到下一页的时候

809
00:27:38,236 --> 0:27:39,386
过程会更加顺畅

810
00:27:40,006 --> 0:27:41,566
没有闪烁

811
00:27:41,566 --> 0:27:42,296
这真的很棒

812
00:27:43,516 --> 0:27:45,626
[ 掌声 ]

813
00:27:46,126 --> 0:27:46,936
谢谢

814
00:27:51,126 --> 0:27:55,146
现在 让我们切换回 Mac

815
00:27:55,146 --> 0:27:56,616
最后 在我的页面底部

816
00:27:56,616 --> 0:27:58,626
放置了一个动画的 GIF 图片

817
00:27:58,626 --> 0:28:00,756
一只小鸟在装饰

818
00:27:58,626 --> 0:28:00,756
一只小鸟在装饰

819
00:28:00,756 --> 0:28:01,196
它的新鸟舍

820
00:28:01,966 --> 0:28:05,156
这张图片 这个视频

821
00:28:05,156 --> 0:28:09,266
非常的大 好吧 它是一个 GIF

822
00:28:09,406 --> 0:28:12,236
它大概有超过 7 兆字节

823
00:28:12,596 --> 0:28:14,366
说实话 图片质量也不怎么好

824
00:28:15,116 --> 0:28:15,876
不过

825
00:28:15,876 --> 0:28:18,676
我恰好有这张图片的原始视频 H264 编码的 MP4

826
00:28:19,226 --> 0:28:20,846
现在 我可以直接在页面上

827
00:28:20,846 --> 0:28:21,626
使用这个视频

828
00:28:22,066 --> 0:28:24,086
让我们回到 HTML

829
00:28:24,926 --> 0:28:25,986
找到那个图像

830
00:28:26,786 --> 0:28:28,556
它在这儿

831
00:28:28,766 --> 0:28:30,056
我可以直接改变扩展名

832
00:28:30,056 --> 0:28:32,236
改为指向 MP4 文件

833
00:28:33,646 --> 0:28:37,486
重新加载 看 现在我使用的就是

834
00:28:37,486 --> 0:28:38,286
真实的视频

835
00:28:38,286 --> 0:28:39,916
画面质量清晰得多

836
00:28:39,916 --> 0:28:41,366
而且只占大约 1 兆字节

837
00:28:41,906 --> 0:28:43,386
而且它还比刚才的动画 GIF

838
00:28:43,476 --> 0:28:44,606
要长一些

839
00:28:45,076 --> 0:28:49,096
而且 正如 Shloka 刚才提到的

840
00:28:49,096 --> 0:28:50,876
这点也可以使用在 source 属性上

841
00:28:50,876 --> 0:28:52,766
为不支持这个功能的浏览器

842
00:28:52,766 --> 0:28:53,966
提供一个备用的图像

843
00:29:00,076 --> 0:29:02,086
刚刚这些只是 Safari 和 WebKit 的

844
00:29:02,086 --> 0:29:04,836
众多有关安全和性能的新功能中的四个

845
00:29:05,276 --> 0:29:07,626
希望你们能在自己的网站上

846
00:29:07,626 --> 0:29:08,766
把它们充分利用起来

847
00:29:08,766 --> 0:29:10,866
我想你的用户会为此感谢你的

848
00:29:10,866 --> 0:29:13,256
现在 欢迎 Shloka 回到台上

849
00:29:13,256 --> 0:29:14,666
向大家介绍更多 令人兴奋的新功能

850
00:29:14,666 --> 0:29:14,976
谢谢

851
00:29:15,516 --> 0:29:21,500
[ 掌声 ]

852
00:29:25,186 --> 0:29:26,066
&gt;&gt; 谢谢 Jason

853
00:29:26,656 --> 0:29:30,036
对了 我真没想到

854
00:29:30,036 --> 0:29:31,246
博客圈中竞争那么残酷

855
00:29:33,346 --> 0:29:34,336
你保护好自己

856
00:29:37,086 --> 0:29:38,496
还有 非常感谢刚才

857
00:29:38,496 --> 0:29:39,106
精彩的演示

858
00:29:39,726 --> 0:29:41,686
再总结一下与性能相关的新功能

859
00:29:41,686 --> 0:29:44,086
使用字体集合 可以减少字体文件的大小

860
00:29:44,376 --> 0:29:46,276
font-display 属性可以让你

861
00:29:46,276 --> 0:29:47,876
更好把控使用自定义字体时

862
00:29:47,876 --> 0:29:49,356
会遇到的各种情况

863
00:29:50,066 --> 0:29:51,776
在图像元素中使用视频

864
00:29:51,826 --> 0:29:53,766
比使用 GIF 更能提升性能

865
00:29:54,446 --> 0:29:55,876
被动事件监听器能够改进

866
00:29:55,876 --> 0:29:57,606
滚屏的效果

867
00:29:57,606 --> 0:29:59,316
使用带有 Beacon API 还有图像解码的

868
00:29:59,316 --> 0:30:01,326
异步调用

869
00:29:59,316 --> 0:30:01,326
异步调用

870
00:30:01,326 --> 0:30:03,976
可以防止主线程卡壳

871
00:30:04,496 --> 0:30:07,876
演讲的最后 我们来谈谈

872
00:30:07,876 --> 0:30:08,486
更加丰富的用户体验

873
00:30:08,486 --> 0:30:10,486
我们有一些很酷的新功能

874
00:30:10,486 --> 0:30:12,506
能够真正提升用户的体验

875
00:30:13,146 --> 0:30:15,316
从拖放开始讲

876
00:30:15,846 --> 0:30:17,556
首先来介绍一些有关拖放的

877
00:30:17,556 --> 0:30:18,816
总体上的改进

878
00:30:19,126 --> 0:30:21,546
由于 API 的更新

879
00:30:21,546 --> 0:30:23,306
现在你可以把整个文件目录

880
00:30:23,306 --> 0:30:25,066
进行拖放

881
00:30:25,066 --> 0:30:25,916
以将其上传至服务器

882
00:30:26,446 --> 0:30:28,856
不再需要压缩或者打包处理

883
00:30:29,746 --> 0:30:31,156
而且我们支持读取和写入

884
00:30:31,156 --> 0:30:33,336
能够丰富 HTML 的 MIME 类型

885
00:30:33,336 --> 0:30:36,476
纯文本 以及 URL 

886
00:30:36,476 --> 0:30:37,476
到系统粘贴板

887
00:30:38,646 --> 0:30:40,646
而且 特别是对 iOS

888
00:30:40,646 --> 0:30:41,916
我们已经对数据传输 API 

889
00:30:41,916 --> 0:30:43,966
进行了一些新的更新

890
00:30:43,996 --> 0:30:45,996
现在你可以使用 getData 和 setData 方法

891
00:30:45,996 --> 0:30:48,076
来自定义拖放

892
00:30:48,246 --> 0:30:50,926
举例来说 如果我想要

893
00:30:50,926 --> 0:30:53,036
把生活用品拖入

894
00:30:53,036 --> 0:30:54,906
我的网上购物车

895
00:30:54,906 --> 0:30:56,596
我可以对拖放行为

896
00:30:56,636 --> 0:30:57,146
进行自定义

897
00:30:57,726 --> 0:30:59,586
比如 拖动一个图片元素

898
00:30:59,806 --> 0:31:01,226
会将这个元素的名称

899
00:30:59,806 --> 0:31:01,226
会将这个元素的名称

900
00:31:01,226 --> 0:31:03,506
和它的价格

901
00:31:03,506 --> 0:31:03,846
放到我的购物车中

902
00:31:04,676 --> 0:31:05,916
现在 你可以指定

903
00:31:05,916 --> 0:31:07,236
拖放行为会导致什么结果

904
00:31:07,266 --> 0:31:08,696
这会让你实现

905
00:31:08,696 --> 0:31:11,186
更丰富的用户交互

906
00:31:11,766 --> 0:31:14,706
接下来 我们来转向本场演讲的

907
00:31:14,706 --> 0:31:16,146
API 部分

908
00:31:16,146 --> 0:31:18,936
从支付请求 API 和 Apple Pay 讲起

909
00:31:19,616 --> 0:31:20,916
那么 我们来谈谈 Apple Pay

910
00:31:21,316 --> 0:31:22,926
Apple Pay 不仅仅是一种支付方式

911
00:31:22,926 --> 0:31:24,516
它是对电子支付的

912
00:31:24,566 --> 0:31:25,666
完全重新思考

913
00:31:26,046 --> 0:31:28,036
通过 Apple Pay 商户不会

914
00:31:28,036 --> 0:31:29,466
直接接触到顾客的

915
00:31:29,466 --> 0:31:31,376
信用卡信息

916
00:31:31,376 --> 0:31:32,576
这使支付更加安全

917
00:31:33,466 --> 0:31:34,676
我们知道你们当中许多人

918
00:31:34,676 --> 0:31:36,336
一直要求提供一种方式

919
00:31:36,336 --> 0:31:38,326
能够使用标准 API 来支持 Apple Pay

920
00:31:39,096 --> 0:31:40,516
现在 我很高兴告诉大家

921
00:31:40,516 --> 0:31:42,246
我们听到了你们的需求

922
00:31:42,246 --> 0:31:44,456
通过协作努力 Apple Pay 现在

923
00:31:44,456 --> 0:31:46,936
已经开始与 W3C 支付请求 API 展开合作

924
00:31:50,516 --> 0:31:53,866
[ 掌声 ]

925
00:31:54,366 --> 0:31:56,116
不过 虽然你可以选择使用 

926
00:31:56,116 --> 0:31:58,906
这个 API 但请记住

927
00:31:58,906 --> 0:32:00,416
为确保你和你的顾客

928
00:31:58,906 --> 0:32:00,416
为确保你和你的顾客

929
00:32:00,416 --> 0:32:02,036
在 Apple Pay 的利益不受损

930
00:32:02,036 --> 0:32:03,446
你需要做一点改变

931
00:32:03,756 --> 0:32:05,806
例如 要向你的界面添加一个

932
00:32:05,806 --> 0:32:07,376
Apple Pay 按钮

933
00:32:07,376 --> 0:32:08,836
而不是在现有的结账流程中

934
00:32:08,836 --> 0:32:10,376
把 Apple Pay 当作选项之一

935
00:32:10,376 --> 0:32:11,016
添加进去

936
00:32:11,826 --> 0:32:13,186
而且 现在支付请求 API 中

937
00:32:13,326 --> 0:32:15,856
还包含一些功能

938
00:32:15,856 --> 0:32:18,266
比如

939
00:32:19,176 --> 0:32:20,706
粒错误处理

940
00:32:20,706 --> 0:32:22,356
处理品牌合作联名信用卡

941
00:32:22,356 --> 0:32:23,136
和拼音姓名

942
00:32:23,226 --> 0:32:25,006
这些功能只在 

943
00:32:25,116 --> 0:32:25,676
Apple Pay JS 里有

944
00:32:25,676 --> 0:32:28,176
所以 如果你需要那些特定的

945
00:32:28,346 --> 0:32:30,776
Apple Pay 功能

946
00:32:30,776 --> 0:32:32,496
开始使用 Apple Pay JS 吧

947
00:32:33,416 --> 0:32:35,586
我们支持的另一个 API 

948
00:32:35,666 --> 0:32:37,166
是 Service Worker API

949
00:32:39,716 --> 0:32:42,036
如果你的用户的网络连接

950
00:32:42,036 --> 0:32:43,536
不是很理想

951
00:32:43,846 --> 0:32:45,306
比如他们的连接时断时续

952
00:32:45,306 --> 0:32:48,636
或者他们就彻底断网了

953
00:32:48,636 --> 0:32:49,866
对于这种情况你想要

954
00:32:49,866 --> 0:32:50,956
从容优雅地进行处理

955
00:32:51,106 --> 0:32:52,326
那么 Service Worker 可以派上用场

956
00:32:52,946 --> 0:32:54,576
每个 Service Worker 都登记在

957
00:32:54,576 --> 0:32:56,506
唯一的源下面

958
00:32:56,506 --> 0:32:58,336
它可以缓存离线交互

959
00:32:58,436 --> 0:33:00,336
并拦截

960
00:32:58,436 --> 0:33:00,336
并拦截

961
00:33:00,336 --> 0:33:02,066
与这个源相关的脚本

962
00:33:02,066 --> 0:33:02,556
所做的请求

963
00:33:03,016 --> 0:33:04,866
现在 你网域中的每个网页

964
00:33:05,096 --> 0:33:06,586
都可以共享同一个

965
00:33:06,586 --> 0:33:07,356
Service Worker 实例

966
00:33:08,116 --> 0:33:09,556
所以 你可以同时打开

967
00:33:09,666 --> 0:33:11,826
多个选项卡

968
00:33:11,826 --> 0:33:12,976
并且所有的请求都将被

969
00:33:13,036 --> 0:33:15,386
相同的脚本拦截

970
00:33:16,436 --> 0:33:17,966
这样一来 你可以保留一个

971
00:33:17,966 --> 0:33:19,136
持久的资源库

972
00:33:20,166 --> 0:33:22,136
Service Workers 可以令你的网页

973
00:33:22,416 --> 0:33:25,566
无论它是一个 web App

974
00:33:25,566 --> 0:33:27,036
还是说你在使用 SF Safari viewController

975
00:33:27,036 --> 0:33:29,066
面对网络连接的各种不确定

976
00:33:29,226 --> 0:33:31,366
网页都能够快速复原

977
00:33:31,876 --> 0:33:35,286
最后要介绍的 API 是

978
00:33:35,286 --> 0:33:37,146
对于 iPad 的全屏 API

979
00:33:38,526 --> 0:33:39,706
现在你可以自定义

980
00:33:39,796 --> 0:33:41,616
iPad 的全屏控制设定

981
00:33:41,986 --> 0:33:44,296
对于 Safari 中的任一元素都可以

982
00:33:44,746 --> 0:33:45,996
点击那些元素

983
00:33:45,996 --> 0:33:48,976
将带来彻底的全屏体验

984
00:33:51,516 --> 0:33:56,146
[ 掌声 ]

985
00:33:56,646 --> 0:33:58,276
对于视频来说 我们会自动检测内容

986
00:33:58,336 --> 0:33:59,866
同时还会出现一个

987
00:33:59,866 --> 0:34:00,286
取消按钮

988
00:33:59,866 --> 0:34:00,286
取消按钮

989
00:34:00,526 --> 0:34:02,586
在短暂的延迟后

990
00:34:02,586 --> 0:34:04,646
如果内容还在继续播放

991
00:34:04,646 --> 0:34:05,266
按钮会自动消失

992
00:34:07,536 --> 0:34:08,976
如果你提供的内容

993
00:34:08,976 --> 0:34:10,505
会被这个取消按钮

994
00:34:10,505 --> 0:34:12,126
所拦截或阻碍到

995
00:34:12,356 --> 0:34:14,186
可以使用 CSS Environment Variable 中的

996
00:34:14,186 --> 0:34:16,646
fullscreen-inset-top 

997
00:34:16,646 --> 0:34:17,045
来避免这种情况

998
00:34:18,056 --> 0:34:20,485
你也可以让你的内容

999
00:34:20,545 --> 0:34:21,985
和按钮同时隐藏

1000
00:34:21,985 --> 0:34:23,545
只要使用

1001
00:34:23,666 --> 0:34:25,286
环境变量中的

1002
00:34:25,436 --> 0:34:26,416
fullscreen-auto-hide-delay 就行了

1003
00:34:26,906 --> 0:34:31,386
最后 还有几项非常酷的标注要介绍

1004
00:34:31,626 --> 0:34:33,525
从 AR 开始

1005
00:34:34,255 --> 0:34:35,755
可能在这次会议上你已经听说过

1006
00:34:35,755 --> 0:34:37,126
太多关于 AR 的东西了

1007
00:34:37,356 --> 0:34:39,335
但是现在 你可以把 AR 模型

1008
00:34:39,335 --> 0:34:40,846
通过图像缩略图的方式

1009
00:34:40,846 --> 0:34:41,366
加入到你的 UI 当中

1010
00:34:41,366 --> 0:34:42,866
这样一来 你的网站就能

1011
00:34:42,866 --> 0:34:45,505
利用起这个全新的 AR Quick Look

1012
00:34:45,536 --> 0:34:47,246
而且代码还相当短

1013
00:34:47,556 --> 0:34:48,806
你从一个锚标签开始

1014
00:34:49,065 --> 0:34:50,876
将 del 属性设置为 AR 

1015
00:34:51,235 --> 0:34:53,106
并将 HREF 链接设置为

1016
00:34:53,306 --> 0:34:55,065
你的 USDZ 文件

1017
00:34:55,065 --> 0:34:55,886
然后为 AR 模型创建文件格式

1018
00:34:56,426 --> 0:34:58,076
你先添加一个子视图

1019
00:34:58,076 --> 0:34:59,426
可以是一个图像 也可以是一个

1020
00:34:59,666 --> 0:35:01,376
包含模型图片的照片元素

1021
00:34:59,666 --> 0:35:01,376
包含模型图片的照片元素

1022
00:35:01,756 --> 0:35:03,456
出来的图像效果是

1023
00:35:03,456 --> 0:35:04,076
像这样的

1024
00:35:04,816 --> 0:35:06,596
在图像的右上角

1025
00:35:06,646 --> 0:35:09,046
一个小的图标出现

1026
00:35:09,126 --> 0:35:11,336
意味着一个 AR 模型可通过

1027
00:35:11,336 --> 0:35:12,296
点击图像来获得

1028
00:35:12,806 --> 0:35:14,706
这是一个能为你的网站

1029
00:35:14,706 --> 0:35:16,736
增添内容深度的

1030
00:35:16,736 --> 0:35:17,196
绝妙方法

1031
00:35:18,796 --> 0:35:20,516
如果想了解更多关于 Quick Look 的信息

1032
00:35:20,516 --> 0:35:21,676
可以查阅在线板块

1033
00:35:21,676 --> 0:35:23,886
Integrating Apps 

1034
00:35:24,046 --> 0:35:26,566
and Content with AR Quick Look

1035
00:35:27,816 --> 0:35:29,756
接下来 最后一块内容是 watchOS

1036
00:35:30,696 --> 0:35:32,506
现在 你可以浏览网站的载体已经有

1037
00:35:32,506 --> 0:35:35,746
MacBook 和 iPad

1038
00:35:36,786 --> 0:35:38,686
甚至是拥有更小屏幕的 iPhone

1039
00:35:38,686 --> 0:35:40,636
屏幕小到可以装进口袋里

1040
00:35:41,316 --> 0:35:42,956
但是 我们现在还打算

1041
00:35:42,956 --> 0:35:45,866
再缩小一度

1042
00:35:46,086 --> 0:35:48,916
我们把你的网站带到了 watchOS 中

1043
00:35:49,516 --> 0:35:53,816
[ 掌声 ]

1044
00:35:54,316 --> 0:35:55,856
对于这个新功能 我个人是

1045
00:35:55,856 --> 0:35:57,366
非常兴奋的

1046
00:35:57,366 --> 0:36:00,636
我妈整天给我发送各种菜谱

1047
00:35:57,366 --> 0:36:00,636
我妈整天给我发送各种菜谱

1048
00:36:00,776 --> 0:36:02,716
我不会做饭 然后我又只能

1049
00:36:02,716 --> 0:36:04,736
在短信和电邮中看菜谱

1050
00:36:04,736 --> 0:36:06,596
以后当我收到菜谱

1051
00:36:06,596 --> 0:36:08,116
我可以直接在手腕上读取

1052
00:36:08,116 --> 0:36:09,056
一边做饭一边看菜谱很方便

1053
00:36:10,116 --> 0:36:11,256
现在 如果你使用响应式设计

1054
00:36:11,256 --> 0:36:12,606
那就太好了

1055
00:36:12,856 --> 0:36:14,136
我们把所有的工作都替你做了

1056
00:36:14,136 --> 0:36:15,126
这样你的网站在 watchOS 上面

1057
00:36:15,156 --> 0:36:16,426
会看起来非常棒

1058
00:36:16,866 --> 0:36:17,716
不过如果你想要

1059
00:36:17,816 --> 0:36:19,326
进一步地优化 Apple Watch 的网页

1060
00:36:19,326 --> 0:36:21,086
这里有一个视频

1061
00:36:21,086 --> 0:36:22,926
叫做 Designing Web Content for watchOS

1062
00:36:22,926 --> 0:36:24,546
在 WWDC App 上

1063
00:36:24,546 --> 0:36:26,056
抱歉 

1064
00:36:26,566 --> 0:36:28,306
是 Designing

1065
00:36:29,596 --> 0:36:32,476
现在 我打赌 Jason 的鸟舍博客

1066
00:36:32,526 --> 0:36:35,056
在使用了这些能够丰富用户体验的

1067
00:36:35,056 --> 0:36:36,316
新功能后

1068
00:36:36,316 --> 0:36:37,486
肯定能上升到一个新水平

1069
00:36:37,986 --> 0:36:39,416
所以 我打算把 Jason 请回台上

1070
00:36:39,416 --> 0:36:40,716
为大家演示这些功能

1071
00:36:40,716 --> 0:36:41,586
如何使用

1072
00:36:41,796 --> 0:36:41,976
Jason

1073
00:36:42,516 --> 0:36:46,106
[ 掌声 ]

1074
00:36:46,606 --> 0:36:47,136
&gt;&gt; 再次感谢

1075
00:36:48,046 --> 0:36:49,256
我一直在想

1076
00:36:49,256 --> 0:36:50,816
如何能让我的读者能够

1077
00:36:50,816 --> 0:36:51,996
更加愉快地开始

1078
00:36:51,996 --> 0:36:53,066
他们的鸟舍建造工程

1079
00:36:53,466 --> 0:36:56,836
让我们换回到 iPad

1080
00:37:01,536 --> 0:37:03,246
这里 我有一个清单

1081
00:37:03,246 --> 0:37:04,866
列出了我的读者需要购买的

1082
00:37:04,866 --> 0:37:05,866
材料都有哪些

1083
00:37:06,856 --> 0:37:07,456
而且我想 如果我能够给他们

1084
00:37:07,456 --> 0:37:10,906
提供一种添加购物车的途径

1085
00:37:10,906 --> 0:37:13,226
购买他们可能会需要的物品

1086
00:37:13,226 --> 0:37:14,156
那该多方便

1087
00:37:14,156 --> 0:37:15,406
而且他们甚至可能

1088
00:37:15,406 --> 0:37:16,726
直接从我的网站

1089
00:37:16,726 --> 0:37:18,136
进行采购

1090
00:37:18,926 --> 0:37:20,006
而且 我猜想我也许能

1091
00:37:20,006 --> 0:37:23,326
通过这个办法赚点私房钱

1092
00:37:23,456 --> 0:37:26,456
这里 我能够从左侧

1093
00:37:26,456 --> 0:37:28,256
拖放物品到

1094
00:37:28,256 --> 0:37:29,976
这个购物清单中

1095
00:37:43,496 --> 0:37:45,286
而且这个功能在我的

1096
00:37:45,286 --> 0:37:45,976
iPad 上也一样好用

1097
00:37:46,076 --> 0:37:48,686
那么让我们来看看

1098
00:37:48,686 --> 0:37:49,766
想要达到这个效果

1099
00:37:49,876 --> 0:37:49,976
需要哪些代码

1100
00:37:57,046 --> 0:37:57,916
真的不需要一大堆代码

1101
00:37:57,916 --> 0:37:58,856
就能实现这个效果

1102
00:37:59,766 --> 0:38:02,126
对于每一个物品

1103
00:37:59,766 --> 0:38:02,126
对于每一个物品

1104
00:38:02,126 --> 0:38:04,366
我添加了 dragStart 事件监听器

1105
00:38:04,366 --> 0:38:07,576
它用来存放元素的文本

1106
00:38:07,576 --> 0:38:09,556
通过使用 Data Transfer API

1107
00:38:10,816 --> 0:38:12,896
而在“放”的区域

1108
00:38:12,896 --> 0:38:15,186
也就是购物清单区域

1109
00:38:15,186 --> 0:38:17,066
我有一个 drop 事件监听器

1110
00:38:17,066 --> 0:38:18,886
它可以从 Data Transfer API 上

1111
00:38:20,156 --> 0:38:22,286
提取之前存储的文本

1112
00:38:22,286 --> 0:38:24,976
并将其附加到购物清单元素

1113
00:38:29,166 --> 0:38:30,526
注意 你还需要添加一个

1114
00:38:30,526 --> 0:38:32,146
dragOver 事件监听器

1115
00:38:32,636 --> 0:38:36,596
到你想要“放下”元素的区域

1116
00:38:36,596 --> 0:38:39,226
以防止默认的事件的发生

1117
00:38:39,226 --> 0:38:41,316
并明确指示对于那个元素

1118
00:38:41,316 --> 0:38:42,536
drop 是允许的

1119
00:38:43,086 --> 0:38:45,716
所以 只需要很少的代码

1120
00:38:45,716 --> 0:38:47,236
我就能够创建这个有趣的

1121
00:38:47,236 --> 0:38:48,986
购物 UI 它能在 Mac 上很好地运行

1122
00:38:49,306 --> 0:38:50,786
现在在 iPad 上也能使用了

1123
00:38:51,076 --> 0:38:54,726
现在 既然我已经把物品

1124
00:38:54,726 --> 0:38:56,546
放在了购物清单里

1125
00:38:56,546 --> 0:38:57,726
我需要找到一个方法 让我的用户

1126
00:38:57,726 --> 0:38:58,756
能够真正实现购买

1127
00:38:59,406 --> 0:39:02,726
让我们来看看如何能

1128
00:38:59,406 --> 0:39:02,726
让我们来看看如何能

1129
00:39:02,726 --> 0:39:03,886
利用支付请求 API

1130
00:39:03,886 --> 0:39:05,256
来为用户提供一个很棒的

1131
00:39:05,256 --> 0:39:06,796
Apple Pay 体验

1132
00:39:08,836 --> 0:39:10,156
我已经为我的网站添加了

1133
00:39:10,156 --> 0:39:12,726
必要的 HTML 和 CSS 

1134
00:39:12,726 --> 0:39:14,036
以显示一个 Apple Pay 按钮

1135
00:39:14,036 --> 0:39:16,396
但我把它默认设置成隐藏

1136
00:39:16,976 --> 0:39:17,976
只有在用户的设备确定有能力

1137
00:39:17,976 --> 0:39:20,626
使用 Apple Pay 的情况下

1138
00:39:20,626 --> 0:39:23,126
你才应该显示 Apple Pay 按钮

1139
00:39:24,176 --> 0:39:27,966
让我们来写下

1140
00:39:27,966 --> 0:39:28,033
检查设备的代码

1141
00:39:28,366 --> 0:39:30,256
使用 ApplePaySession.canMakePayments

1142
00:39:30,256 --> 0:39:30,616
方法

1143
00:39:30,776 --> 0:39:33,556
如果 Apple Pay 可使用

1144
00:39:33,556 --> 0:39:33,976
我们就显示按钮

1145
00:39:38,326 --> 0:39:41,036
让我们向按钮添加一个

1146
00:39:42,816 --> 0:39:43,396
事件监听器

1147
00:39:43,396 --> 0:39:44,666
现在 在这个函数里

1148
00:39:44,666 --> 0:39:45,606
我们将创造一个新的

1149
00:39:45,606 --> 0:39:47,736
paymentRequest 实例去

1150
00:39:47,736 --> 0:39:48,976
启动这个交易

1151
00:39:54,436 --> 0:39:55,866
如果 paymentRequest 不能使用

1152
00:39:55,866 --> 0:39:57,976
我们应该考虑使用 Apple Pay JS 来替代它

1153
00:40:02,256 --> 0:40:04,596
这里是 Payment Request API 的构造器

1154
00:40:05,456 --> 0:40:07,406
它可以接受三个参数

1155
00:40:07,596 --> 0:40:13,036
我们从添加 paymentMethod 数据对象开始

1156
00:40:16,636 --> 0:40:18,456
这包含了 Apple Pay 的

1157
00:40:18,456 --> 0:40:20,826
paymentMethod 识别符

1158
00:40:20,826 --> 0:40:22,256
以及 Apple Pay 特有的

1159
00:40:22,256 --> 0:40:26,496
一些选项

1160
00:40:26,696 --> 0:40:29,956
在这之后 是付款相关的各种细节

1161
00:40:30,406 --> 0:40:31,976
这里是我们指定

1162
00:40:31,976 --> 0:40:33,716
有关交易细节的地方

1163
00:40:33,716 --> 0:40:35,366
例如我的网站名称

1164
00:40:35,366 --> 0:40:37,086
交易总额和每个订单项

1165
00:40:37,636 --> 0:40:40,546
我决定让事情简单化

1166
00:40:40,546 --> 0:40:41,556
所以我把清单上的

1167
00:40:41,556 --> 0:40:43,696
每一项物品的定价都设为 5 美元

1168
00:40:48,076 --> 0:40:50,346
最后 options 参数

1169
00:40:50,776 --> 0:40:52,466
指明了我需要从我的用户那里

1170
00:40:52,466 --> 0:40:54,006
收集哪些信息

1171
00:40:54,006 --> 0:40:55,206
来完成交易

1172
00:40:55,746 --> 0:40:58,626
让我们切换回 iPad

1173
00:40:58,626 --> 0:41:01,916
并且加入一些物品到我的清单里

1174
00:40:58,626 --> 0:41:01,916
并且加入一些物品到我的清单里

1175
00:41:11,186 --> 0:41:12,676
那么 现在我们已经把所有的信息

1176
00:41:12,676 --> 0:41:13,936
输入进来了

1177
00:41:13,936 --> 0:41:16,006
我们需要去调用另一个方法来

1178
00:41:16,006 --> 0:41:17,016
展示这个表格

1179
00:41:17,286 --> 0:41:20,716
这就是对于 paymentRequest 的

1180
00:41:20,716 --> 0:41:21,606
show 方法

1181
00:41:22,106 --> 0:41:23,086
并且这个方法会返回一个 promise

1182
00:41:23,086 --> 0:41:24,766
当用户授权这笔交易的执行

1183
00:41:24,986 --> 0:41:26,506
做出支付回应时

1184
00:41:26,506 --> 0:41:28,036
就会调用响应函数 resolve

1185
00:41:28,036 --> 0:41:29,546
用户可以用 Face ID 或 Touch ID

1186
00:41:29,546 --> 0:41:30,206
等方式授权

1187
00:41:30,906 --> 0:41:32,066
这里是你可以

1188
00:41:32,066 --> 0:41:33,446
处理交易的地方

1189
00:41:33,946 --> 0:41:37,456
然后 最后一步 你可以调用 complete 

1190
00:41:37,456 --> 0:41:39,846
获得一个交易成功或失败的值

1191
00:41:39,846 --> 0:41:42,796
这由交易的状态来决定

1192
00:41:42,796 --> 0:41:45,436
好的 现在我们在 iPad 上

1193
00:41:45,436 --> 0:41:45,966
实践一下

1194
00:41:50,276 --> 0:41:50,976
这样就行了

1195
00:41:51,516 --> 0:41:56,046
[ 掌声 ]

1196
00:41:56,546 --> 0:41:58,156
然后 你还需要执行

1197
00:41:58,156 --> 0:41:59,626
一些其他的步骤

1198
00:41:59,626 --> 0:42:01,026
例如 从 Apple Pay 服务器上

1199
00:41:59,626 --> 0:42:01,026
例如 从 Apple Pay 服务器上

1200
00:42:01,026 --> 0:42:02,076
获取付款会话

1201
00:42:02,346 --> 0:42:04,396
想了解关于这点的更多信息

1202
00:42:04,426 --> 0:42:06,476
请查看 Apple 开发者网站的

1203
00:42:06,476 --> 0:42:08,056
有关这个演讲的网页

1204
00:42:08,056 --> 0:42:09,626
上面会有关于这些资源的链接

1205
00:42:11,076 --> 0:42:14,256
现在 最后我意识到

1206
00:42:14,256 --> 0:42:15,446
我还没有让我的读者们看到

1207
00:42:15,446 --> 0:42:18,716
他们在建造的东西

1208
00:42:18,946 --> 0:42:19,536
整体是什么样子的

1209
00:42:20,326 --> 0:42:21,956
所以我想在页面的顶端

1210
00:42:21,956 --> 0:42:23,826
添加一个成品的

1211
00:42:23,826 --> 0:42:24,296
展示图

1212
00:42:25,626 --> 0:42:27,266
不过 为什么要满足于一张静态图片呢？

1213
00:42:27,266 --> 0:42:28,236
如果你能在自己周遭环境里

1214
00:42:28,236 --> 0:42:29,626
真的看到这个鸟舍

1215
00:42:29,986 --> 0:42:31,206
感觉一下它的尺寸大小

1216
00:42:31,206 --> 0:42:32,206
那不是很棒吗

1217
00:42:33,106 --> 0:42:34,486
那么 通过 iOS 12 中的

1218
00:42:34,486 --> 0:42:36,066
新 AR Quick Look 功能

1219
00:42:36,066 --> 0:42:36,736
我们只需要几行代码

1220
00:42:36,736 --> 0:42:36,976
就能实现

1221
00:42:42,296 --> 0:42:43,886
我们来进入我的 HTML

1222
00:42:45,916 --> 0:42:46,606
来插入代码

1223
00:42:47,586 --> 0:42:49,256
我现在所要做的就是

1224
00:42:49,256 --> 0:42:49,736
添加一个图像

1225
00:42:50,166 --> 0:42:52,536
并且链接到一个 USDZ 文档

1226
00:42:52,866 --> 0:42:53,666
它就是我的鸟舍模型

1227
00:42:53,666 --> 0:42:56,936
把 rel 属性设为 AR

1228
00:42:57,206 --> 0:43:02,066
切换回 iPad

1229
00:42:57,206 --> 0:43:02,066
切换回 iPad

1230
00:43:03,076 --> 0:43:04,726
这就是我们最终成品的样子

1231
00:43:04,766 --> 0:43:06,656
它看起来很不错 不过用户

1232
00:43:06,656 --> 0:43:08,166
还可以点击

1233
00:43:08,166 --> 0:43:09,936
AR Quick Look 的小图标

1234
00:43:09,936 --> 0:43:10,926
就在角落这里

1235
00:43:11,296 --> 0:43:15,136
我们可以查看这个模型

1236
00:43:15,136 --> 0:43:18,726
上下左右地挪动它

1237
00:43:18,726 --> 0:43:20,586
还能把它放置在真实环境里

1238
00:43:20,586 --> 0:43:22,296
直观地感受一下我

1239
00:43:22,756 --> 0:43:22,886
要建造的是什么

1240
00:43:23,516 --> 0:43:29,836
[ 掌声 ]

1241
00:43:30,336 --> 0:43:33,576
所以 其实实现起来

1242
00:43:34,356 --> 0:43:34,806
真的很简单

1243
00:43:35,196 --> 0:43:36,416
请查阅相关的板块

1244
00:43:36,416 --> 0:43:37,226
如果你有机会的话

1245
00:43:37,386 --> 0:43:38,796
现在我想请 Shloka 回到台上

1246
00:43:38,796 --> 0:43:39,776
来做最后的总结

1247
00:43:39,776 --> 0:43:39,956
谢谢大家

1248
00:43:40,516 --> 0:43:46,916
[ 掌声 ]

1249
00:43:47,416 --> 0:43:49,076
&gt;&gt; 非常感谢 Jason

1250
00:43:49,076 --> 0:43:51,716
而且这个 AR 模型看起来

1251
00:43:51,716 --> 0:43:52,416
非常非常的酷

1252
00:43:52,656 --> 0:43:54,536
而且 我认为它真的让我

1253
00:43:55,626 --> 0:43:57,896
想要建造一座鸟舍

1254
00:43:58,886 --> 0:44:00,186
不过我可没有做出任何承诺

1255
00:43:58,886 --> 0:44:00,186
不过我可没有做出任何承诺

1256
00:44:02,026 --> 0:44:03,686
综上所述 你可以添加自定义的

1257
00:44:03,686 --> 0:44:04,466
拖放功能

1258
00:44:04,756 --> 0:44:07,096
还可以自定义 iPad 的

1259
00:44:07,476 --> 0:44:08,226
全屏控制设定

1260
00:44:08,896 --> 0:44:10,296
你可以采用 Payment Request API

1261
00:44:10,296 --> 0:44:12,106
以支持 Apple Pay 的使用

1262
00:44:12,106 --> 0:44:13,576
采用 Service Worker API 

1263
00:44:13,576 --> 0:44:15,226
以改善离线的用户体验

1264
00:44:15,746 --> 0:44:17,656
或者 你还可以为内容添加 AR 模型

1265
00:44:17,656 --> 0:44:18,826
以增加其深度

1266
00:44:19,296 --> 0:44:20,836
而且现在你的网站也可以在

1267
00:44:20,836 --> 0:44:22,406
苹果手表上浏览

1268
00:44:22,956 --> 0:44:25,646
我在演讲中提到了几个板块

1269
00:44:25,696 --> 0:44:27,146
供你们参考这几个单独的功能

1270
00:44:27,146 --> 0:44:28,976
不过如果你们在这场演讲结束后

1271
00:44:28,976 --> 0:44:30,786
立刻就有问题要问

1272
00:44:30,786 --> 0:44:32,886
请顺便来访问

1273
00:44:32,886 --> 0:44:34,466
Safari WebKit and Password AutoFill

1274
00:44:34,466 --> 0:44:34,746
实验室

1275
00:44:35,186 --> 0:44:36,476
并且可以查看

1276
00:44:36,476 --> 0:44:38,066
这个板块的链接

1277
00:44:38,236 --> 0:44:40,656
还有文档资源

1278
00:44:40,656 --> 0:44:41,746
以及其他相关的板块

1279
00:44:42,076 --> 0:44:45,576
现在 关于 Web 

1280
00:44:45,576 --> 0:44:47,336
真的有太多太多的功能

1281
00:44:47,756 --> 0:44:48,946
我希望这个简要的概述能够

1282
00:44:48,946 --> 0:44:51,246
让你们感受到

1283
00:44:51,246 --> 0:44:53,656
苹果公司是如何不断地改进

1284
00:44:53,656 --> 0:44:56,066
对 Safari 和 WebKit 的支持

1285
00:44:56,066 --> 0:44:58,646
以便于 web 开发者 本地开发者

1286
00:44:58,646 --> 0:45:00,046
还有扩展开发者

1287
00:44:58,646 --> 0:45:00,046
还有扩展开发者

1288
00:45:00,046 --> 0:45:01,966
能够一直为他们的用户

1289
00:45:01,966 --> 0:45:04,496
提供尽可能

1290
00:45:04,496 --> 0:45:05,076
好的体验

1291
00:45:06,446 --> 0:45:07,356
感谢各位在场参与

1292
00:45:07,356 --> 0:45:10,356
我们的板块

1293
00:45:10,706 --> 0:45:12,526
希望你们喜欢

1294
00:45:12,526 --> 0:45:13,496
并且 祝大家接下来在 WWDC 的时间

1295
00:45:13,556 --> 0:45:13,976
过得愉快

1296
00:45:14,516 --> 0:45:18,500
[ 掌声 ]
