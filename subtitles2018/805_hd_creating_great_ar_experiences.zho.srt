1
00:00:17,417 --> 0:00:20,721
（创造出色AR体验 演讲805）

2
00:00:27,327 --> 0:00:30,464
大家好

3
00:00:31,465 --> 0:00:35,068
我是Grant Paul

4
00:00:35,469 --> 0:00:38,138
希望你们本周WWDC过得愉快

5
00:00:39,406 --> 0:00:42,209
这次演讲 我们先讲…

6
00:00:42,276 --> 0:00:46,346
我会讲到如何

7
00:00:46,413 --> 0:00:48,715
设计出色的AR app和游戏

8
00:00:49,449 --> 0:00:52,052
然后Omar将接替我 讲讲

9
00:00:52,119 --> 0:00:57,424
创造在AR方面观感

10
00:00:58,892 --> 0:01:01,428
（增强现实）

11
00:00:58,892 --> 0:01:01,428
（增强现实）

12
00:01:01,495 --> 0:01:04,965
开始之前 我将快速讲讲基础知识

13
00:01:05,832 --> 0:01:09,803
如果你对此还很陌生

14
00:01:09,870 --> 0:01:13,907
究竟指的是什么

15
00:01:14,308 --> 0:01:16,877
我也想讲讲本次演讲里

16
00:01:18,111 --> 0:01:21,815
当然AR指的是增强现实

17
00:01:22,516 --> 0:01:24,918
让我们分解来看

18
00:01:26,086 --> 0:01:29,456
可以从现实开始 稍微更容易入手

19
00:01:30,057 --> 0:01:35,095
现实指的是AR处理现实世界的事物

20
00:01:35,462 --> 0:01:36,830
那和我们在设备上

21
00:01:36,897 --> 0:01:39,466
处理的其他事情有些许不同

22
00:01:39,533 --> 0:01:43,804
那些事情发生在设备上或者网络中

23
00:01:44,404 --> 0:01:47,608
但AR处理的事情发生在现实世界

24
00:01:47,975 --> 0:01:52,412
事情发生在你周围的房间

25
00:01:52,479 --> 0:01:55,182
或者地图上你所在的位置

26
00:01:55,816 --> 0:01:58,352
重要的是 那是有些许不同的

27
00:01:58,752 --> 0:02:01,889
增强现实的另一个部分在于增强

28
00:01:58,752 --> 0:02:01,889
增强现实的另一个部分在于增强

29
00:02:02,222 --> 0:02:04,124
那指的是一些不同的事物

30
00:02:04,791 --> 0:02:07,361
增强指的是增强

31
00:02:07,427 --> 0:02:10,264
你对世界的认知 它可以获取

32
00:02:10,330 --> 0:02:14,067
设备能理解的关于周围世界

33
00:02:14,535 --> 0:02:17,738
可以是在周围世界放置虚拟事物

34
00:02:17,804 --> 0:02:20,107
给虚拟事物赋予物理环境

35
00:02:20,841 --> 0:02:23,877
它还能处理真实事物 处理你的脸

36
00:02:23,944 --> 0:02:26,079
当你把表情符号当成面具戴在脸上

37
00:02:26,146 --> 0:02:29,449
处理真实事物 并增强它

38
00:02:31,118 --> 0:02:33,687
这就是我们谈到AR

39
00:02:34,021 --> 0:02:36,056
所指的含义

40
00:02:39,393 --> 0:02:42,229
以此 我将开始演讲的前半段

41
00:02:42,663 --> 0:02:45,399
我将从如何为你的AR app

42
00:02:45,465 --> 0:02:49,336
和AR游戏设计界面

43
00:02:50,537 --> 0:02:54,541
第一部分 是如何让人们进入AR

44
00:02:54,775 --> 0:02:57,044
如何引导人们进入AR

45
00:02:57,578 --> 0:03:01,281
我将向你演示iOS 12

46
00:02:57,578 --> 0:03:01,281
我将向你演示iOS 12

47
00:03:01,348 --> 0:03:05,285
是如何引导人们进入AR的

48
00:03:05,652 --> 0:03:07,654
并运用到你的app里

49
00:03:08,822 --> 0:03:12,693
接着 将讲到在AR里

50
00:03:12,960 --> 0:03:18,098
以及ARKit开启的各种可能

51
00:03:18,398 --> 0:03:21,001
都非常出色的方法和窍门

52
00:03:22,436 --> 0:03:25,372
最后将谈到和周围世界的交互

53
00:03:25,806 --> 0:03:28,408
当构建AR app时

54
00:03:28,475 --> 0:03:32,145
要使用哪种交互 这些都和

55
00:03:32,212 --> 0:03:34,748
构建2D app时有些许不同

56
00:03:35,048 --> 0:03:37,384
我们要找出在AR里仍然适用的

57
00:03:37,451 --> 0:03:40,153
我们还需要一些新型的交互

58
00:03:41,688 --> 0:03:45,726
首先 我要从如何进入AR开始

59
00:03:46,126 --> 0:03:50,030
我这里讲的是某人下载了app后

60
00:03:50,230 --> 0:03:53,467
他们找到了app里的AR体验

61
00:03:54,067 --> 0:03:59,106
我这里讲的是

62
00:03:59,439 --> 0:04:04,811
对每个AR app来说

63
00:03:59,439 --> 0:04:04,811
对每个AR app来说

64
00:04:04,878 --> 0:04:08,582
以便开始AR体验 让其跑起来

65
00:04:08,849 --> 0:04:10,384
因为每个AR app

66
00:04:10,450 --> 0:04:15,322
需要理解周围世界

67
00:04:15,389 --> 0:04:17,224
或者向用户显示信息

68
00:04:18,125 --> 0:04:21,495
ARKit建立对环境

69
00:04:21,894 --> 0:04:23,764
就是让你移动你的设备

70
00:04:23,830 --> 0:04:25,332
让你四处转转

71
00:04:26,233 --> 0:04:29,002
那和之前你在设备里看到的

72
00:04:29,069 --> 0:04:32,506
从相机预览里看到的

73
00:04:32,573 --> 0:04:33,640
有些微的不同

74
00:04:34,208 --> 0:04:36,210
比如当你拿着相机

75
00:04:36,276 --> 0:04:39,847
只需要把设备对准要拍摄的位置

76
00:04:40,380 --> 0:04:44,351
但在AR里 你需要四处移动

77
00:04:44,418 --> 0:04:47,688
从不同的位置和不同的角度

78
00:04:49,189 --> 0:04:52,826
这里的关键在于

79
00:04:52,893 --> 0:04:55,796
让他们知道如何移动设备

80
00:04:56,296 --> 0:04:58,966
这样做的方法

81
00:04:59,032 --> 0:05:01,468
给他们理解的基础

82
00:04:59,032 --> 0:05:01,468
给他们理解的基础

83
00:05:02,169 --> 0:05:04,771
我们讲讲这个

84
00:05:05,706 --> 0:05:07,808
这是《欧几里得之地》游戏

85
00:05:08,308 --> 0:05:12,112
这里展示的是设备在房间里移动

86
00:05:12,779 --> 0:05:15,315
这很棒 因为你能看到

87
00:05:15,382 --> 0:05:19,753
没有文字信息 刚好就是你要做的

88
00:05:19,820 --> 0:05:24,892
你需要在房间里移动设备

89
00:05:24,958 --> 0:05:27,494
看向不同的角度是不够的

90
00:05:28,061 --> 0:05:30,430
没有文字信息

91
00:05:30,497 --> 0:05:33,767
只是房间的固定参考就清晰

92
00:05:35,569 --> 0:05:39,072
而且通常来说 大多数情况下

93
00:05:39,673 --> 0:05:44,244
ARKit在iOS 12里建立

94
00:05:44,711 --> 0:05:48,415
在更多情形下 这些就足够了

95
00:05:48,649 --> 0:05:51,151
你只需要开始移动就可以开始了

96
00:05:52,686 --> 0:05:56,757
当然 还有些情况对

97
00:05:57,224 --> 0:06:00,194
也许在昏暗的房间里

98
00:05:57,224 --> 0:06:00,194
也许在昏暗的房间里

99
00:06:00,594 --> 0:06:05,666
ARKit建立那样的理解

100
00:06:05,999 --> 0:06:09,636
ARKit需要花点时间才能开始

101
00:06:09,703 --> 0:06:11,538
其不会立即发生

102
00:06:12,639 --> 0:06:15,943
那些情形下 如果还被

103
00:06:16,009 --> 0:06:18,078
看着跟你说

104
00:06:18,145 --> 0:06:19,379
四处移动你的设备

105
00:06:19,713 --> 0:06:21,315
人们可能开始想

106
00:06:22,549 --> 0:06:23,851
app怎么还不工作

107
00:06:23,917 --> 0:06:26,687
app不能理解他们进行的动作吗？

108
00:06:26,854 --> 0:06:28,655
这可能开始让人觉得困扰

109
00:06:29,389 --> 0:06:31,592
因此你需要的是某种反馈

110
00:06:31,658 --> 0:06:35,095
用以让人知道他们没做错

111
00:06:35,162 --> 0:06:38,398
他们做的正是用来进入AR的

112
00:06:38,732 --> 0:06:42,336
他们应该继续下去 来看一个例子

113
00:06:46,273 --> 0:06:51,512
这是iOS 12的内置app

114
00:06:52,145 --> 0:06:56,316
能看见设备在表面的固定参考上移动

115
00:06:56,617 --> 0:06:58,218
显示你要移动它

116
00:06:58,285 --> 0:07:00,687
你不能只在同一个地方

117
00:06:58,285 --> 0:07:00,687
你不能只在同一个地方

118
00:07:01,588 --> 0:07:04,992
然后 一旦开始移动设备

119
00:07:05,526 --> 0:07:07,628
表面变成一个立方体

120
00:07:08,362 --> 0:07:11,932
立方体随着设备的运动旋转

121
00:07:11,999 --> 0:07:14,368
给你真实的 关联的 直接的反馈

122
00:07:14,668 --> 0:07:17,604
展示你的方向是正确的

123
00:07:18,672 --> 0:07:20,974
然后 一旦ARKit建立了理解

124
00:07:21,041 --> 0:07:23,510
就都准备好了 立方体转开

125
00:07:23,844 --> 0:07:26,313
你准备好进入AR体验

126
00:07:28,649 --> 0:07:29,516
（适配app风格）

127
00:07:29,583 --> 0:07:33,654
这就是iOS 12内置app

128
00:07:33,987 --> 0:07:36,557
你的app也要遵循相同的原则

129
00:07:36,790 --> 0:07:40,194
帮助人们了解需要移动他们的设备

130
00:07:40,260 --> 0:07:42,863
给出反馈他们做得对

131
00:07:43,363 --> 0:07:45,699
但你的app无需遵循相同的风格

132
00:07:45,766 --> 0:07:47,668
无需看起来像画的线条

133
00:07:47,935 --> 0:07:50,470
AR应该像集成在app内的一部分

134
00:07:50,671 --> 0:07:53,207
应该和app的风格相同

135
00:07:53,440 --> 0:07:55,976
不该感觉像附加上去的

136
00:07:56,043 --> 0:07:59,313
或者该流程是事后添加的

137
00:07:59,980 --> 0:08:02,683
所以 重要的是帮助人们

138
00:07:59,980 --> 0:08:02,683
所以 重要的是帮助人们

139
00:08:02,916 --> 0:08:05,719
但还要让人觉得其是app的一部分

140
00:08:08,021 --> 0:08:11,458
我要讲的关于帮助人们

141
00:08:11,792 --> 0:08:15,996
在清晰的指示引导

142
00:08:16,063 --> 0:08:17,831
人们如何进入AR

143
00:08:17,898 --> 0:08:21,101
和当人们已经了解该做什么

144
00:08:22,002 --> 0:08:25,339
如果某人已经知道要做什么

145
00:08:25,405 --> 0:08:29,142
他会立刻开始移动设备

146
00:08:29,576 --> 0:08:31,678
他不再需要什么来告诉他要做什么

147
00:08:32,078 --> 0:08:34,448
所以不要再给他们任何指示

148
00:08:34,780 --> 0:08:38,684
ARKit大多数情况快很多

149
00:08:38,919 --> 0:08:42,688
ARKit会开始理解周围世界

150
00:08:46,093 --> 0:08:48,462
好了 这就是如何进入AR

151
00:08:48,795 --> 0:08:52,165
这就是如何引导人们

152
00:08:53,000 --> 0:08:56,470
现在来聊聊如何在AR中展示内容

153
00:08:56,703 --> 0:09:00,040
在AR中显示事物的不同方法

154
00:08:56,703 --> 0:09:00,040
在AR中显示事物的不同方法

155
00:09:00,107 --> 0:09:03,010
还有各种AR app

156
00:09:04,311 --> 0:09:07,080
我想从能在ARKit里构建的

157
00:09:07,414 --> 0:09:09,016
一些更激进的事物开始

158
00:09:09,483 --> 0:09:13,620
因为不是所有的AR体验

159
00:09:13,687 --> 0:09:17,491
从相机里看周围世界的预览

160
00:09:17,925 --> 0:09:19,426
因此还有其他选择

161
00:09:21,662 --> 0:09:23,030
这些选项之一是

162
00:09:23,096 --> 0:09:27,100
完全只在二维世界构建AR体验

163
00:09:27,434 --> 0:09:31,371
无需显示相机预览

164
00:09:31,738 --> 0:09:35,242
你用ARKit获取的

165
00:09:35,609 --> 0:09:40,714
完全只在二维世界

166
00:09:41,982 --> 0:09:43,917
让我们看一个例子

167
00:09:44,785 --> 0:09:48,355
这是《彩虹》游戏

168
00:09:48,922 --> 0:09:52,459
你通过上下动眉毛而控制人物

169
00:10:20,420 --> 0:10:23,657
所以这里不需要什么相机预览

170
00:10:23,724 --> 0:10:26,293
不需要任何3D图像

171
00:10:26,627 --> 0:10:31,665
只在二维世界会更有意思

172
00:10:33,233 --> 0:10:34,968
这就是2D AR

173
00:10:35,335 --> 0:10:39,573
能用ARKit做的还有

174
00:10:39,640 --> 0:10:43,110
在我看来完全是虚拟现实的体验

175
00:10:43,677 --> 0:10:44,945
我那么说的意思是

176
00:10:45,012 --> 0:10:47,514
体验将你带到一个完全不同的地方

177
00:10:47,814 --> 0:10:50,184
其确实的让你感觉身处异地

178
00:10:50,717 --> 0:10:52,653
你可以在环境中四处走动

179
00:10:52,853 --> 0:10:55,856
能在其中四处移动 朝各个方向看

180
00:10:56,190 --> 0:11:00,561
对我来说确实是虚拟现实体验

181
00:10:56,190 --> 0:11:00,561
对我来说确实是虚拟现实体验

182
00:11:00,627 --> 0:11:02,162
即使是通过设备实现

183
00:11:03,463 --> 0:11:05,065
那样还有些好处

184
00:11:05,265 --> 0:11:07,835
你不再需要额外的设备

185
00:11:08,101 --> 0:11:10,137
不再需要在头上戴耳机

186
00:11:10,204 --> 0:11:13,006
只要有设备到处都能运行

187
00:11:13,073 --> 0:11:15,509
不再需要什么追踪器或别的什么

188
00:11:16,143 --> 0:11:19,279
通过设备观察

189
00:11:19,346 --> 0:11:21,348
也比完全沉浸式更有好处

190
00:11:21,515 --> 0:11:24,117
比如 不会再不小心撞到墙

191
00:11:24,184 --> 0:11:26,353
因为能随时看到周遭环境

192
00:11:26,820 --> 0:11:30,891
所以ARKit是打造虚拟现实

193
00:11:31,091 --> 0:11:32,159
我们看个例子

194
00:11:33,327 --> 0:11:37,197
这是叫做进入房间的虚拟现实体验

195
00:11:37,364 --> 0:11:40,567
其由红十字国际委员会开发

196
00:11:41,368 --> 0:11:42,803
在体验中

197
00:11:43,804 --> 0:11:47,174
一旦进入房间

198
00:11:47,407 --> 0:11:50,477
你能靠近东西 仔细观察它们

199
00:11:50,544 --> 0:11:53,113
你能移动的远一点 声音传进来

200
00:11:53,180 --> 0:11:56,183
听起来像屋外传进来的

201
00:11:56,250 --> 0:11:57,451
从四面八法传来

202
00:11:58,118 --> 0:12:01,121
使其成为震撼的体验

203
00:11:58,118 --> 0:12:01,121
使其成为震撼的体验

204
00:12:01,488 --> 0:12:05,492
那是用ARKit

205
00:12:07,361 --> 0:12:09,630
那是能用ARKit构建的

206
00:12:09,696 --> 0:12:14,434
先更激进前卫的选项

207
00:12:14,501 --> 0:12:17,137
不管构建何种app

208
00:12:17,204 --> 0:12:19,339
不论是游戏

209
00:12:19,406 --> 0:12:22,543
还是生产率app 这些都适用

210
00:12:24,244 --> 0:12:28,782
此处第一个要讲的是AR里显示文字

211
00:12:29,249 --> 0:12:31,018
因为文字非常重要

212
00:12:32,519 --> 0:12:36,823
各种AR app

213
00:12:37,157 --> 0:12:39,726
如果是游戏 可能要显示等级

214
00:12:39,927 --> 0:12:41,128
或者一些指示

215
00:12:41,628 --> 0:12:45,465
或者对其他app来说

216
00:12:45,532 --> 0:12:46,967
为虚拟物体显示标签

217
00:12:47,267 --> 0:12:49,069
或者显示注解

218
00:12:49,570 --> 0:12:50,971
但重要的是

219
00:12:51,038 --> 0:12:53,574
无论显示文字的原因是什么

220
00:12:53,874 --> 0:12:57,477
都要保证文字可读

221
00:13:00,013 --> 0:13:03,083
在AR里显示文字的最简单的办法

222
00:13:03,150 --> 0:13:05,819
是显示到周围世界

223
00:13:06,587 --> 0:13:10,891
你知道 那样看起来很酷

224
00:13:11,458 --> 0:13:12,659
缺点之一是

225
00:13:12,726 --> 0:13:15,462
当从某个角度观察时

226
00:13:15,896 --> 0:13:19,132
字母可能挤在一起

227
00:13:19,967 --> 0:13:23,403
另一个问题是当退后一步

228
00:13:23,470 --> 0:13:26,707
从远处观察时

229
00:13:26,773 --> 0:13:30,210
就像在房间的另一边

230
00:13:31,178 --> 0:13:33,714
当显示标题或者其他

231
00:13:33,780 --> 0:13:36,416
人们已经知道的东西时

232
00:13:36,617 --> 0:13:38,785
显示在周围环境里可能非常酷

233
00:13:39,152 --> 0:13:42,055
可如果要显示一些人们必须读

234
00:13:42,122 --> 0:13:45,759
必须从中获取信息的东西

235
00:13:47,761 --> 0:13:52,232
能采用的另一种方法是

236
00:13:53,066 --> 0:13:57,204
屏幕空间指的是文字大小保持不变

237
00:13:57,538 --> 0:14:00,140
永远朝向你

238
00:13:57,538 --> 0:14:00,140
永远朝向你

239
00:14:00,741 --> 0:14:03,810
那样变得很容易读

240
00:14:03,877 --> 0:14:07,114
观察角度的问题

241
00:14:08,248 --> 0:14:11,185
屏幕空间显示文字时重要的是

242
00:14:11,585 --> 0:14:14,821
其依然是显示到现实世界某个位置

243
00:14:15,122 --> 0:14:18,992
显示到世界的某个地方

244
00:14:19,426 --> 0:14:21,495
或附加到某个物理特性

245
00:14:22,529 --> 0:14:25,966
使其看起来很像AR场景的一部分

246
00:14:26,700 --> 0:14:29,703
屏幕空间文字是给事物显示标签

247
00:14:29,770 --> 0:14:33,841
在AR里显示注释

248
00:14:35,542 --> 0:14:38,111
这是屏幕空间文字的例子

249
00:14:38,645 --> 0:14:41,381
这来自Measure

250
00:14:42,082 --> 0:14:45,786
Measure显示尺度时

251
00:14:45,853 --> 0:14:48,622
无论从哪个角度观察

252
00:14:48,689 --> 0:14:52,392
或者无论离得多远 都一直可读

253
00:14:56,864 --> 0:15:00,167
所以屏幕空间文字可读性很强

254
00:14:56,864 --> 0:15:00,167
所以屏幕空间文字可读性很强

255
00:15:00,734 --> 0:15:03,270
但你还是要保持

256
00:15:03,537 --> 0:15:06,673
文字在AR里实际显示的尽可能小

257
00:15:07,541 --> 0:15:10,711
那样做的原因是

258
00:15:11,011 --> 0:15:14,715
要一直保持设备对准它以便阅读

259
00:15:15,148 --> 0:15:18,151
如果把设备转到更容易读的位置

260
00:15:18,218 --> 0:15:19,720
文字就没了

261
00:15:20,787 --> 0:15:24,591
如果有更细节的文字

262
00:15:24,658 --> 0:15:27,160
某种对象或者世界里

263
00:15:27,628 --> 0:15:30,197
应该把细节显示在屏幕上

264
00:15:30,631 --> 0:15:33,667
然后人们能利用

265
00:15:33,734 --> 0:15:36,970
以往使用iOS和在设备上

266
00:15:37,704 --> 0:15:40,807
来直接在屏幕上阅读那些细节

267
00:15:42,075 --> 0:15:45,012
当在AR里显示那些细节时

268
00:15:45,345 --> 0:15:47,014
很必要做个转换

269
00:15:47,548 --> 0:15:52,152
因为那些转换能让

270
00:15:52,219 --> 0:15:57,524
那些细节指的是哪些文字

271
00:15:57,824 --> 0:15:59,960
获取的细节是关于什么的

272
00:16:01,562 --> 0:16:04,731
我们看个例子

273
00:16:05,566 --> 0:16:08,368
Measure里

274
00:16:08,635 --> 0:16:13,574
AR里会在屏幕上显示度量的细节

275
00:16:14,174 --> 0:16:16,476
这很不错 因为很容易读

276
00:16:16,543 --> 0:16:18,445
不必为了阅读把设备

277
00:16:18,512 --> 0:16:20,747
把手机一直对准要度量的东西

278
00:16:21,014 --> 0:16:23,917
但因为刚刚的转换 这也很清晰

279
00:16:24,418 --> 0:16:25,385
转换

280
00:16:26,887 --> 0:16:31,258
显示正在看的细节是关于什么的

281
00:16:31,792 --> 0:16:35,229
它们来自要度量的东西

282
00:16:36,129 --> 0:16:37,264
（转换确保身份）

283
00:16:37,331 --> 0:16:41,335
在屏幕上显示细节时

284
00:16:41,401 --> 0:16:44,838
它们来自AR 最后又回到AR里

285
00:16:45,672 --> 0:16:49,409
在AR里显示对象时

286
00:16:50,143 --> 0:16:54,147
因为其感觉像是对象的一个版本

287
00:16:54,548 --> 0:16:57,784
感觉对象有自己的身份

288
00:16:58,585 --> 0:17:02,256
那很重要 因为AR里的

289
00:16:58,585 --> 0:17:02,256
那很重要 因为AR里的

290
00:17:02,322 --> 0:17:06,660
它们有具体的感觉

291
00:17:07,160 --> 0:17:09,329
而现实里的事物 不只是拷贝它们

292
00:17:09,396 --> 0:17:11,231
不能只是做多个拷贝

293
00:17:11,798 --> 0:17:14,201
在AR里显示事物时

294
00:17:14,268 --> 0:17:16,203
遵循相同的原则是重要的

295
00:17:17,604 --> 0:17:20,574
这就是在AR里观察

296
00:17:21,241 --> 0:17:24,011
其展示了保持身份的例子

297
00:17:24,444 --> 0:17:26,847
当从对象面板切换到AR面板

298
00:17:27,414 --> 0:17:30,617
对象位置不变

299
00:17:30,684 --> 0:17:33,120
其不会消失 再从其他地方出来

300
00:17:33,720 --> 0:17:36,723
即使在决定何时放置对象

301
00:17:37,891 --> 0:17:40,360
其在屏幕上一直可见

302
00:17:40,627 --> 0:17:44,198
所以容易看到有对象的一个版本

303
00:17:44,998 --> 0:17:47,000
即使回到

304
00:17:47,201 --> 0:17:49,169
观察对象的app里

305
00:17:50,070 --> 0:17:53,740
其依旧显示对象转换回原来的地方

306
00:17:54,107 --> 0:17:55,709
感觉就像有一个对象

307
00:17:56,043 --> 0:17:58,312
在app的不同地方移动

308
00:17:58,545 --> 0:18:00,781
然后进入周围世界

309
00:17:58,545 --> 0:18:00,781
然后进入周围世界

310
00:18:00,848 --> 0:18:02,950
感觉不像有多个拷贝

311
00:18:05,085 --> 0:18:07,821
好了 这就是在AR里显示内容

312
00:18:08,188 --> 0:18:11,625
的一些不同的方法

313
00:18:12,526 --> 0:18:14,194
快速回顾一下

314
00:18:15,028 --> 0:18:19,066
首先看了打造不同AR体验的方法

315
00:18:19,132 --> 0:18:22,970
然后讲到AR打造完全的二维体验

316
00:18:23,036 --> 0:18:25,606
没有相机预览 没有3D图像

317
00:18:26,473 --> 0:18:31,078
讲到如何用ARKit

318
00:18:31,144 --> 0:18:33,347
让你觉得身处异地

319
00:18:33,780 --> 0:18:36,116
非常震撼 完全沉浸其中

320
00:18:37,117 --> 0:18:41,121
讲到在AR里用屏幕空间显示文字

321
00:18:41,321 --> 0:18:46,093
使其从任何角度任何距离都可读

322
00:18:47,194 --> 0:18:49,997
讲到在屏幕上显示细节

323
00:18:50,230 --> 0:18:52,766
使其不用对准环境的某个

324
00:18:52,833 --> 0:18:55,035
特定位置就可以读

325
00:18:55,802 --> 0:18:58,105
只需使用在iOS里阅读时

326
00:18:58,172 --> 0:19:00,674
建立的经验就够了

327
00:18:58,172 --> 0:19:00,674
建立的经验就够了

328
00:19:02,009 --> 0:19:03,243
最后讲到

329
00:19:03,310 --> 0:19:06,446
转换到AR里 从AR里转换出来

330
00:19:07,114 --> 0:19:09,283
以在屏幕上显示细节

331
00:19:09,650 --> 0:19:12,152
同时给对象身份感

332
00:19:12,219 --> 0:19:15,322
物理感 这在AR里也很重要

333
00:19:19,459 --> 0:19:22,095
好了 这就是在AR里显示内容

334
00:19:22,162 --> 0:19:23,764
有不同方式来显示

335
00:19:23,830 --> 0:19:24,765
在AR app里

336
00:19:25,165 --> 0:19:27,801
显示不同类型内容的

337
00:19:27,868 --> 0:19:29,203
一些提示

338
00:19:30,103 --> 0:19:31,104
现在来讲讲

339
00:19:31,171 --> 0:19:33,707
和那些内容的交互

340
00:19:33,774 --> 0:19:36,910
讲讲环境里有意义的交互

341
00:19:38,345 --> 0:19:39,780
先从触摸开始

342
00:19:40,447 --> 0:19:44,885
从iOS开始时 触摸就非常重要

343
00:19:45,185 --> 0:19:48,088
多点触摸最开始就有了

344
00:19:48,155 --> 0:19:50,691
而且是和设备交互最重要的方法

345
00:19:51,825 --> 0:19:55,295
触摸如此重要和出色的原因

346
00:19:55,362 --> 0:19:57,631
在于其能直接操控

347
00:19:58,732 --> 0:20:01,869
直接操控就是直接

348
00:19:58,732 --> 0:20:01,869
直接操控就是直接

349
00:20:01,935 --> 0:20:05,005
和屏幕上的事物交互

350
00:20:05,405 --> 0:20:09,376
不是使用控件来滚动或者缩放

351
00:20:09,676 --> 0:20:11,778
而是直接和内容交互

352
00:20:12,112 --> 0:20:14,948
就像操纵的是具体的物理对象

353
00:20:16,283 --> 0:20:20,687
这在AR里更加重要

354
00:20:20,754 --> 0:20:23,557
事物是物理的

355
00:20:24,224 --> 0:20:26,026
感觉是真实世界的一部分

356
00:20:26,493 --> 0:20:29,429
所以很有必要通过直接操控

357
00:20:29,496 --> 0:20:32,699
使其感觉在直接和那些事物交互

358
00:20:34,668 --> 0:20:38,572
直接操控出色的原因在于使用

359
00:20:38,639 --> 0:20:39,940
你已经了解的手势

360
00:20:40,007 --> 0:20:42,109
iOS里已经熟悉的手势

361
00:20:42,809 --> 0:20:46,680
因为那些手势和iOS里

362
00:20:47,147 --> 0:20:50,450
都是些已经用了很长时间的东西

363
00:20:52,486 --> 0:20:55,789
首先是如何在AR里通过

364
00:20:55,856 --> 0:20:58,759
直接操控移动事物

365
00:20:59,059 --> 0:21:01,595
只需按下手指并拖到新的地方

366
00:20:59,059 --> 0:21:01,595
只需按下手指并拖到新的地方

367
00:21:02,062 --> 0:21:04,164
感觉就像你拿起了对象

368
00:21:04,231 --> 0:21:05,666
因为它就在你的指间

369
00:21:05,732 --> 0:21:08,802
你和移动的对象有了物理联系

370
00:21:11,438 --> 0:21:14,875
另一个手势是缩放物体

371
00:21:15,309 --> 0:21:18,045
在AR里 事物开始时有其物理的

372
00:21:18,111 --> 0:21:21,348
自然的大小

373
00:21:21,415 --> 0:21:23,317
你能拉伸对象使其变大

374
00:21:23,817 --> 0:21:26,687
还能压缩对象使其变小

375
00:21:27,254 --> 0:21:30,390
在AR里缩放对象时重要的是

376
00:21:30,591 --> 0:21:32,593
做的时候给出反馈

377
00:21:32,793 --> 0:21:34,895
因为变化非常非常大

378
00:21:34,962 --> 0:21:37,731
当你使物体变到原来四倍大小时

379
00:21:39,199 --> 0:21:41,201
所以有必要给出反馈

380
00:21:41,268 --> 0:21:43,003
让人们知道发生了什么

381
00:21:43,737 --> 0:21:46,039
其次是让物体

382
00:21:46,373 --> 0:21:50,177
还原到自然大小非常简单

383
00:21:50,244 --> 0:21:51,945
还原到物理世界的大小

384
00:21:52,479 --> 0:21:54,515
所以 只需轻轻一触

385
00:21:54,848 --> 0:21:57,117
就能还原到原来的大小 非常简单

386
00:21:59,987 --> 0:22:02,389
另一个就是旋转物体

387
00:21:59,987 --> 0:22:02,389
另一个就是旋转物体

388
00:22:02,756 --> 0:22:06,093
两个手指在屏幕上旋转

389
00:22:06,994 --> 0:22:10,264
那样非常好 两个手指的手势

390
00:22:10,664 --> 0:22:13,667
要考虑的另一个问题 是触碰目标

391
00:22:14,101 --> 0:22:17,404
因为随着设备移动

392
00:22:17,704 --> 0:22:19,973
离得远时 或者缩小时

393
00:22:20,040 --> 0:22:21,275
它们会非常小

394
00:22:21,742 --> 0:22:24,344
要确保使用宽松的触碰目标

395
00:22:24,745 --> 0:22:27,581
这样很容易把两个手指放在物体上

396
00:22:28,048 --> 0:22:32,452
还要确保用手指中间的位置

397
00:22:32,653 --> 0:22:34,621
来计算交互的对象

398
00:22:34,922 --> 0:22:37,457
因为也许AR里没法放下整个手指

399
00:22:37,758 --> 0:22:39,860
即使是宽松的触碰目标

400
00:22:41,862 --> 0:22:45,098
所以 AR里的直接操控非常棒

401
00:22:45,165 --> 0:22:47,634
这很重要 因为AR的物理感很强

402
00:22:48,402 --> 0:22:52,206
但对大多AR app来说 这还不够

403
00:22:52,506 --> 0:22:53,707
因为有大量物体时

404
00:22:53,774 --> 0:22:55,642
要触碰正确的物体会很难

405
00:22:55,709 --> 0:22:59,313
之前说过 当你看像不同地方时

406
00:22:59,379 --> 0:23:01,315
屏幕上的物体一直在动

407
00:22:59,379 --> 0:23:01,315
屏幕上的物体一直在动

408
00:23:01,381 --> 0:23:03,750
它们在环境里的位置保持不变

409
00:23:04,351 --> 0:23:07,888
因此在屏幕上对准它们会有些困难

410
00:23:08,889 --> 0:23:12,726
但最基本的、首要的

411
00:23:13,126 --> 0:23:16,430
在于AR app里 触碰是不够的

412
00:23:16,797 --> 0:23:18,866
其本质是二维的

413
00:23:19,533 --> 0:23:21,735
你正在触摸的

414
00:23:21,802 --> 0:23:25,005
显示表面是二维的

415
00:23:25,072 --> 0:23:28,942
在iOS的平面的2D

416
00:23:29,610 --> 0:23:33,347
但AR内容置于真实世界

417
00:23:34,114 --> 0:23:37,351
那意味着我们需要一些方法

418
00:23:37,618 --> 0:23:40,921
和三维的内容交互

419
00:23:42,856 --> 0:23:45,192
答案是移动设备

420
00:23:45,626 --> 0:23:48,695
因为移动设备时 其自然是三维的

421
00:23:48,762 --> 0:23:52,032
其本身是三维的

422
00:23:52,099 --> 0:23:54,801
可以左右移动

423
00:23:55,135 --> 0:23:59,206
可以转向任何方向

424
00:23:59,273 --> 0:24:00,908
走到房间另一边

425
00:23:59,273 --> 0:24:00,908
走到房间另一边

426
00:24:01,475 --> 0:24:05,879
但重要的是移动设备是完全三维的

427
00:24:05,946 --> 0:24:09,850
那构成了AR里最重要的交互

428
00:24:10,684 --> 0:24:14,087
事实上 我要说

429
00:24:14,154 --> 0:24:16,390
比触碰更重要

430
00:24:17,090 --> 0:24:21,995
其非常自然

431
00:24:22,262 --> 0:24:25,999
AR里观察不同事物是

432
00:24:26,066 --> 0:24:28,836
从不同角度和位置观察

433
00:24:29,603 --> 0:24:32,673
所以非常自然 也非常有效

434
00:24:34,441 --> 0:24:37,344
通过移动设备 能完成

435
00:24:37,411 --> 0:24:40,714
2D app里多点触碰完成的任务

436
00:24:41,348 --> 0:24:43,984
2D app里

437
00:24:44,318 --> 0:24:46,854
方法是滚动显示器

438
00:24:46,920 --> 0:24:48,889
向下滚动看到新的内容

439
00:24:49,756 --> 0:24:54,595
那在2D app里很方便

440
00:24:54,761 --> 0:24:57,598
要看到不同的内容 你得移动设备

441
00:24:58,065 --> 0:25:01,134
从不同的位置和不同的角度

442
00:24:58,065 --> 0:25:01,134
从不同的位置和不同的角度

443
00:25:01,201 --> 0:25:02,402
观察内容

444
00:25:03,070 --> 0:25:05,672
其解决了看到更多内容的问题

445
00:25:06,006 --> 0:25:08,141
但完全是三维的方式解决的

446
00:25:09,376 --> 0:25:13,080
相似的 在传统2D app里

447
00:25:13,146 --> 0:25:15,716
你拉伸它以使其变大

448
00:25:16,483 --> 0:25:21,355
如果想缩小某样东西

449
00:25:22,356 --> 0:25:24,892
但在AR里 如果想让事物变大

450
00:25:25,058 --> 0:25:26,960
能靠近你正观察的事物

451
00:25:27,027 --> 0:25:28,428
可以离得更近一些

452
00:25:29,196 --> 0:25:31,064
如果想一次看得更多

453
00:25:31,398 --> 0:25:33,867
想从更广的角度观察

454
00:25:33,934 --> 0:25:37,804
你能退后一步

455
00:25:38,672 --> 0:25:44,144
所以移动设备代替了2D app里

456
00:25:44,211 --> 0:25:48,649
用来看见更多内容的拉伸缩放操作

457
00:25:50,617 --> 0:25:51,952
移动是很方便的

458
00:25:52,019 --> 0:25:55,622
其代替了一些多点触碰操作

459
00:25:56,023 --> 0:26:01,228
也能用它为AR app来

460
00:25:56,023 --> 0:26:01,228
也能用它为AR app来

461
00:26:01,862 --> 0:26:05,365
其可以非常自然

462
00:26:05,432 --> 0:26:08,502
观察不同事物

463
00:26:08,936 --> 0:26:10,804
来看个例子

464
00:26:11,638 --> 0:26:14,608
这是Swiftshot

465
00:26:14,675 --> 0:26:17,411
你看在Keynote演讲里见过

466
00:26:17,744 --> 0:26:20,547
要在游戏里发射弹弓

467
00:26:20,614 --> 0:26:23,217
你要做的是靠近弹弓

468
00:26:23,383 --> 0:26:26,253
你无需在列表里选择要发射的弹弓

469
00:26:26,320 --> 0:26:28,922
你无需在屏幕上瞄准

470
00:26:28,989 --> 0:26:30,190
你只是靠近它

471
00:26:30,858 --> 0:26:34,328
要发射弹弓时

472
00:26:35,062 --> 0:26:39,266
其非常准确

473
00:26:39,333 --> 0:26:41,201
准确度是三维的

474
00:26:41,268 --> 0:26:43,971
当你移动弹弓 往后拉时

475
00:26:44,304 --> 0:26:47,307
那比用触屏能做的要多

476
00:26:47,841 --> 0:26:50,444
移动设备 不仅非常自然

477
00:26:50,511 --> 0:26:52,112
也比以往AR app里

478
00:26:52,479 --> 0:26:55,582
触碰操作要准确得多

479
00:26:58,085 --> 0:27:01,922
移动你的设备非常方便

480
00:26:58,085 --> 0:27:01,922
移动你的设备非常方便

481
00:27:01,989 --> 0:27:05,259
触碰的优势和设备移动的

482
00:27:05,325 --> 0:27:07,528
以打造最佳的交互

483
00:27:08,762 --> 0:27:10,531
我们来看个例子

484
00:27:10,597 --> 0:27:13,600
把直接操作和移动

485
00:27:13,667 --> 0:27:14,835
你的设备结合起来

486
00:27:16,670 --> 0:27:20,274
Quicklook

487
00:27:20,340 --> 0:27:25,312
结合设备移动和直接操控的好例子

488
00:27:26,079 --> 0:27:30,250
如果要移动一个对象

489
00:27:30,317 --> 0:27:33,921
和以前见过的一样

490
00:27:34,621 --> 0:27:37,357
但也可以按下以捡起对象

491
00:27:37,424 --> 0:27:40,260
转动设备 然后释放到新的位置

492
00:27:40,928 --> 0:27:44,598
那样很方便

493
00:27:44,665 --> 0:27:47,201
其提供了全三维的控制

494
00:27:47,434 --> 0:27:51,405
而且其还能通过捡起然后旋转

495
00:27:51,471 --> 0:27:52,840
你看不见的位置

496
00:27:53,440 --> 0:27:56,376
但 其仍然保留了物理交互感

497
00:27:56,443 --> 0:27:58,145
直接交互的感受

498
00:27:58,478 --> 0:28:01,281
直接捡起物体的感受

499
00:27:58,478 --> 0:28:01,281
直接捡起物体的感受

500
00:28:01,949 --> 0:28:06,653
如果app支持在AR里移动物体

501
00:28:07,054 --> 0:28:11,358
绝对应该支持通过直接操控捡起对象

502
00:28:11,425 --> 0:28:14,528
移动设备 然后在新的位置放置

503
00:28:17,965 --> 0:28:21,568
所以移动设备和直接操控

504
00:28:21,635 --> 0:28:25,639
是结合触碰的一种方式

505
00:28:25,706 --> 0:28:29,009
和移动设备的方式是通过间接控制

506
00:28:29,743 --> 0:28:33,280
简介操控是指

507
00:28:34,014 --> 0:28:36,783
它们不在环境里

508
00:28:36,850 --> 0:28:39,319
它们在屏幕上的固定位置

509
00:28:39,720 --> 0:28:42,456
你能掌握那个位置

510
00:28:42,523 --> 0:28:44,358
因为意味着它不在碍事

511
00:28:44,424 --> 0:28:47,594
一旦掌握了控件在屏幕上的位置

512
00:28:48,228 --> 0:28:50,797
其留在相同地方

513
00:28:51,098 --> 0:28:54,635
然后关注app的其余部分

514
00:28:55,502 --> 0:28:57,104
再看个例子

515
00:28:57,771 --> 0:29:01,441
这是《僵尸战舰》AR

516
00:28:57,771 --> 0:29:01,441
这是《僵尸战舰》AR

517
00:29:01,508 --> 0:29:04,378
飞行于一群僵尸之上

518
00:29:04,444 --> 0:29:06,780
你想集中注意瞄准而不是

519
00:29:06,847 --> 0:29:08,682
移动手指

520
00:29:08,749 --> 0:29:12,619
尝试在屏幕上瞄准手指以发射

521
00:29:13,020 --> 0:29:16,456
相反 你能将手指停在发射键上方

522
00:29:16,757 --> 0:29:18,125
全部时间用来

523
00:29:18,325 --> 0:29:20,994
在3D环境移动设备

524
00:29:21,328 --> 0:29:24,498
瞄准你要射击的僵尸

525
00:29:26,633 --> 0:29:31,972
因此间接操控和设备移动结合很方便

526
00:29:32,472 --> 0:29:36,076
它们很棒

527
00:29:36,910 --> 0:29:41,782
在AR里 无论如何

528
00:29:41,849 --> 0:29:44,551
控制观察的方向 至少用一只手

529
00:29:44,985 --> 0:29:47,321
如果想构建单手AR体验

530
00:29:47,688 --> 0:29:50,057
你就需要使用

531
00:29:50,123 --> 0:29:52,025
非常容易访问的控件

532
00:29:53,927 --> 0:29:56,029
Measure就是个例子

533
00:29:56,597 --> 0:29:58,332
Measure使用间接操控

534
00:29:58,398 --> 0:30:02,402
屏幕底部的加号按钮来添加点

535
00:29:58,398 --> 0:30:02,402
屏幕底部的加号按钮来添加点

536
00:30:03,203 --> 0:30:05,873
控件位置非常容易访问

537
00:30:05,939 --> 0:30:07,774
即使用一只手

538
00:30:07,841 --> 0:30:10,043
瞄准屏幕中间的准心

539
00:30:10,811 --> 0:30:12,579
来准确放置你的尺子

540
00:30:12,980 --> 0:30:15,649
还能让一只手指悬在加号上方

541
00:30:15,716 --> 0:30:18,552
方便的添加那些点

542
00:30:19,553 --> 0:30:23,724
使用间接控件不仅能提供

543
00:30:23,790 --> 0:30:27,528
易于使用的AR体验

544
00:30:31,465 --> 0:30:34,501
上面就是AR的交互

545
00:30:34,902 --> 0:30:36,770
能通过直接操控

546
00:30:36,837 --> 0:30:40,040
提供物理感和物理交互

547
00:30:40,541 --> 0:30:43,610
能移动设备

548
00:30:44,211 --> 0:30:48,549
还能通过易于访问的

549
00:30:48,615 --> 0:30:52,019
而不是聚焦于交互的控件或者按钮

550
00:30:53,220 --> 0:30:55,489
那就是我今天要讲的

551
00:30:55,689 --> 0:30:58,559
进入AR 引导人们

552
00:30:58,625 --> 0:31:01,929
提供直接反馈

553
00:30:58,625 --> 0:31:01,929
提供直接反馈

554
00:31:02,563 --> 0:31:08,268
在2D和VR里显示内容的方式

555
00:31:08,335 --> 0:31:09,570
如何使其容易读取

556
00:31:09,636 --> 0:31:13,207
通过转换进出AR给对象物理身份

557
00:31:14,274 --> 0:31:16,944
环境里能使用的交互

558
00:31:17,377 --> 0:31:20,547
主要是移动你的设备

559
00:31:21,982 --> 0:31:23,717
现在要让给Omar 他要讲到

560
00:31:23,784 --> 0:31:27,421
打造AR里看起来真实的3D模型

561
00:31:27,688 --> 0:31:28,522
谢谢

562
00:31:36,363 --> 0:31:37,731
谢谢

563
00:31:40,601 --> 0:31:41,435
谢谢 Grant

564
00:31:45,038 --> 0:31:48,041
大家好 很荣幸在此聊一聊

565
00:31:48,108 --> 0:31:51,345
开发AR体验时

566
00:31:51,411 --> 0:31:55,282
应该记住的最佳实践

567
00:31:55,349 --> 0:31:59,186
今天要讲的有很多

568
00:31:59,653 --> 0:32:04,024
无论你是工程师 设计师

569
00:31:59,653 --> 0:32:04,024
无论你是工程师 设计师

570
00:32:04,091 --> 0:32:05,125
我们要向你提供

571
00:32:05,192 --> 0:32:08,762
技巧性的工具

572
00:32:08,829 --> 0:32:11,164
这样你就能够

573
00:32:11,231 --> 0:32:14,801
打造出色的AR内容 让用户满意

574
00:32:16,336 --> 0:32:19,139
让我们从一些

575
00:32:19,206 --> 0:32:22,276
开发时要记住的关键概念开始

576
00:32:23,744 --> 0:32:25,212
AR很棒

577
00:32:25,679 --> 0:32:28,882
能把任何可以想到的东西

578
00:32:28,949 --> 0:32:31,151
添加到现实世界绝对是魔法

579
00:32:31,518 --> 0:32:32,486
因此

580
00:32:32,553 --> 0:32:36,023
人们对AR体验的期望很高

581
00:32:37,591 --> 0:32:41,828
他们期望3D内容以平稳帧数显示

582
00:32:42,162 --> 0:32:44,665
如下的体验很糟

583
00:32:44,731 --> 0:32:48,902
当你被内容吸引 开始靠近它

584
00:32:48,969 --> 0:32:52,773
然后想了解更多细节 然后突然的

585
00:32:53,440 --> 0:32:56,109
遭到的优化导致性能下降

586
00:32:56,176 --> 0:32:58,245
然后你就像在看幻灯片

587
00:32:59,880 --> 0:33:03,584
为了随时提供良好性能

588
00:32:59,880 --> 0:33:03,584
为了随时提供良好性能

589
00:33:03,650 --> 0:33:07,521
保证用户完全被AR场景吸引

590
00:33:07,588 --> 0:33:10,757
app需要确保每秒60帧

591
00:33:11,124 --> 0:33:12,793
整个体验过程

592
00:33:13,227 --> 0:33:16,296
都确保这个目标非常重要

593
00:33:16,363 --> 0:33:20,734
使用压力测试

594
00:33:21,068 --> 0:33:23,270
靠近 远离

595
00:33:23,337 --> 0:33:26,039
确保性能不会下降

596
00:33:28,008 --> 0:33:31,512
也许未来的某一天

597
00:33:32,079 --> 0:33:35,482
但现在确保AR app

598
00:33:35,549 --> 0:33:38,385
对电池的消耗尽可能小

599
00:33:39,052 --> 0:33:42,556
不要给用户指责app

600
00:33:42,856 --> 0:33:44,391
越省电

601
00:33:44,458 --> 0:33:47,361
用户越可能重新尝试你的体验

602
00:33:48,862 --> 0:33:51,999
不知道你们是怎样

603
00:33:52,065 --> 0:33:54,868
这个样子 我都非常恐慌

604
00:33:55,202 --> 0:33:58,539
我们绝不想要AR体验

605
00:33:58,605 --> 0:34:00,641
到处散布电池电量的恐慌

606
00:33:58,605 --> 0:34:00,641
到处散布电池电量的恐慌

607
00:34:01,175 --> 0:34:05,245
记住 只有你能避免电池过度消耗

608
00:34:07,481 --> 0:34:10,984
我愿意把AR看作有能力

609
00:34:11,051 --> 0:34:13,020
带入到现实世界

610
00:34:13,554 --> 0:34:17,690
人们想探索你的内容

611
00:34:18,324 --> 0:34:21,962
花时间在3D内容打造精致细节

612
00:34:22,228 --> 0:34:26,466
构建引人入胜的内容

613
00:34:26,533 --> 0:34:29,436
每个小触碰

614
00:34:31,205 --> 0:34:35,108
例如我们要打造水族馆的AR体验

615
00:34:35,609 --> 0:34:38,946
即使是最抽象的方式

616
00:34:39,012 --> 0:34:42,683
这团棉花球代表了一条鱼

617
00:34:43,550 --> 0:34:44,918
从好的方面讲

618
00:34:44,985 --> 0:34:47,187
app确实有良好性能

619
00:34:47,254 --> 0:34:49,156
当这个小东西四处游动时

620
00:34:49,690 --> 0:34:51,592
我们再试试

621
00:34:52,726 --> 0:34:57,464
现在好多了

622
00:34:58,198 --> 0:35:00,167
看它展示的细节

623
00:34:58,198 --> 0:35:00,167
看它展示的细节

624
00:35:00,234 --> 0:35:03,837
AR里运行时 绝对会吸引人们

625
00:35:03,904 --> 0:35:08,742
靠近些观察更多的细节

626
00:35:09,309 --> 0:35:12,779
我们应为水族箱里游泳

627
00:35:12,846 --> 0:35:16,517
或者浮在水面的鱼

628
00:35:18,018 --> 0:35:21,021
最后要记得人们可能

629
00:35:21,088 --> 0:35:22,689
里使用你的app

630
00:35:22,956 --> 0:35:27,594
要避免你的app跳脱真实世界

631
00:35:27,661 --> 0:35:30,430
有可能周围的光线

632
00:35:30,497 --> 0:35:33,033
和你要讲的故事相冲突

633
00:35:34,001 --> 0:35:37,171
所以使用素材时避免使用

634
00:35:37,237 --> 0:35:39,473
太亮或者太暗的颜色

635
00:35:39,773 --> 0:35:42,543
确保点亮AR场景时

636
00:35:42,609 --> 0:35:46,113
光线投射到所有渲染的物体上

637
00:35:46,180 --> 0:35:48,182
而且无论哪个角度看都是如此

638
00:35:49,082 --> 0:35:52,186
你的AR内容无论白天

639
00:35:52,486 --> 0:35:56,557
现在我们要看看ARKit里

640
00:35:56,623 --> 0:35:59,626
它会让你的用户震惊

641
00:35:59,693 --> 0:36:01,895
当他们看见你的AR内容弯曲

642
00:35:59,693 --> 0:36:01,895
当他们看见你的AR内容弯曲

643
00:36:01,962 --> 0:36:04,665
并密切响应真实世界的环境

644
00:36:06,500 --> 0:36:08,635
构建AR内容时

645
00:36:08,702 --> 0:36:11,138
一个用来评价进度的工具

646
00:36:11,205 --> 0:36:15,776
就是通过最新宣布的iOS 12

647
00:36:16,543 --> 0:36:18,645
上传素材到iCloud云端

648
00:36:19,146 --> 0:36:21,381
通过iOS的Files app

649
00:36:21,448 --> 0:36:24,518
并且快速的投射到AR场景

650
00:36:26,887 --> 0:36:29,356
还能将你的杰作

651
00:36:29,423 --> 0:36:32,626
上传到网站上供朋友们观赏

652
00:36:32,693 --> 0:36:35,128
你也能在Safari里随处查看

653
00:36:35,729 --> 0:36:37,130
这相当精彩

654
00:36:37,497 --> 0:36:40,300
务必回头查看

655
00:36:40,367 --> 0:36:44,771
他们讲解了使用AR Quicklook

656
00:36:45,038 --> 0:36:47,474
而且我保证

657
00:36:47,541 --> 0:36:49,009
改变你的生活

658
00:36:50,511 --> 0:36:54,014
既然已经考虑过

659
00:36:54,081 --> 0:36:55,616
人们对AR体验的期望

660
00:36:55,682 --> 0:36:58,685
我们快速计划一下要构建

661
00:36:59,353 --> 0:37:02,789
在开始构建3D内容之前

662
00:36:59,353 --> 0:37:02,789
在开始构建3D内容之前

663
00:37:02,856 --> 0:37:05,225
提前考虑好是不会错的

664
00:37:05,826 --> 0:37:10,030
了解要做什么有助于确定如何优化

665
00:37:10,097 --> 0:37:12,132
AR里的内容和素材

666
00:37:13,600 --> 0:37:17,604
你坐在桌子前 突然有了灵感

667
00:37:17,671 --> 0:37:21,708
你想到了绝对最棒的AR体验

668
00:37:22,342 --> 0:37:25,946
我们后退一步先问自己几个问题

669
00:37:26,547 --> 0:37:30,184
这个体验真的需要

670
00:37:30,250 --> 0:37:33,554
或只需关注一个素材

671
00:37:34,555 --> 0:37:36,256
需要多少细节

672
00:37:36,323 --> 0:37:40,060
怎样的图像风格最佳

673
00:37:41,195 --> 0:37:43,897
我们是否有注意之前

674
00:37:43,964 --> 0:37:47,201
关注用户和体验间交互的种类

675
00:37:47,734 --> 0:37:51,038
找到这些问题的答案有助于

676
00:37:51,104 --> 0:37:55,242
确定开发时渲染预算的安排

677
00:37:57,144 --> 0:37:59,880
例如正在开发

678
00:37:59,947 --> 0:38:01,915
一个类似于IKEA的app

679
00:37:59,947 --> 0:38:01,915
一个类似于IKEA的app

680
00:38:01,982 --> 0:38:04,218
人们能预览各种家具

681
00:38:04,284 --> 0:38:09,189
置于家中或者院子里的样子

682
00:38:09,756 --> 0:38:13,727
展示的核心是各种不同的家具

683
00:38:13,794 --> 0:38:16,029
因此你要展示各种精细的物体

684
00:38:16,096 --> 0:38:19,466
细致模仿其在现实世界的样子

685
00:38:20,634 --> 0:38:23,804
这种情况下

686
00:38:23,871 --> 0:38:26,807
就得花多一点的渲染预算

687
00:38:26,874 --> 0:38:28,141
在这些素材上

688
00:38:28,208 --> 0:38:32,012
因为它们的质量可能决定

689
00:38:34,214 --> 0:38:36,583
另一种情况 你受够了

690
00:38:36,650 --> 0:38:41,421
不小心踩在孩子散落在屋子周围的

691
00:38:41,488 --> 0:38:43,056
细小的塑料砖块

692
00:38:43,123 --> 0:38:46,093
为了保持整洁 决定构建一个app

693
00:38:46,159 --> 0:38:47,995
他们就能玩

694
00:38:48,061 --> 0:38:51,365
远多于想象的砖块

695
00:38:51,565 --> 0:38:54,568
这样再也不用忍受那些砖块

696
00:38:54,868 --> 0:38:58,205
这样的app里 需要渲染

697
00:38:58,272 --> 0:39:02,576
和交互大量的物体

698
00:38:58,272 --> 0:39:02,576
和交互大量的物体

699
00:39:02,843 --> 0:39:05,812
简单的色彩单一的模型

700
00:39:05,879 --> 0:39:07,548
这样就能在屏幕上显示大量物体

701
00:39:07,614 --> 0:39:09,616
并保持优异性能

702
00:39:11,852 --> 0:39:14,054
问过自己这些问题

703
00:39:14,121 --> 0:39:16,390
就要构建我们的AR画布

704
00:39:16,690 --> 0:39:18,992
就像画师开始工作前

705
00:39:19,059 --> 0:39:22,396
铺设画布一样

706
00:39:22,462 --> 0:39:25,132
设置眼前项目的建议

707
00:39:25,199 --> 0:39:27,634
以保证项目的成功

708
00:39:29,803 --> 0:39:31,605
我们喜欢创建一个焦点四方形

709
00:39:31,672 --> 0:39:34,074
以确定何处开始构建AR内容

710
00:39:34,141 --> 0:39:37,077
如果使用屏幕

711
00:39:37,144 --> 0:39:39,980
就可以激活统计面板

712
00:39:40,047 --> 0:39:42,316
这让你随时查看当前帧数

713
00:39:42,382 --> 0:39:45,085
还有屏幕上可见的多边形

714
00:39:45,152 --> 0:39:47,454
这当你开始构建app

715
00:39:47,521 --> 0:39:50,858
并放入不同元素时非常有用

716
00:39:52,326 --> 0:39:55,395
现在我们有了可以运行的

717
00:39:55,462 --> 0:39:59,867
什么是涵盖这些最佳实践的

718
00:40:00,400 --> 0:40:02,169
我不是喜欢户外活动的人

719
00:40:02,236 --> 0:40:05,572
来加利福尼亚后 发现很多人喜欢

720
00:40:06,073 --> 0:40:07,875
我尝试过亲近自然

721
00:40:08,141 --> 0:40:10,677
去野营 点燃篝火

722
00:40:10,744 --> 0:40:13,113
但从未成行

723
00:40:13,180 --> 0:40:16,283
除了想象 我们将其放入app里

724
00:40:17,451 --> 0:40:22,189
将其称为CampfiAR

725
00:40:23,657 --> 0:40:26,527
我们能构建一个精细的事物

726
00:40:26,593 --> 0:40:28,562
享受户外活动的乐趣

727
00:40:28,629 --> 0:40:31,532
而不用担心虫子和清新空气

728
00:40:34,368 --> 0:40:36,336
我们决定渲染风格化的

729
00:40:36,403 --> 0:40:38,672
半真实的游戏的图像

730
00:40:39,573 --> 0:40:43,510
将独特的细节运用到关键的

731
00:40:43,577 --> 0:40:45,445
基于物理的材料特性上

732
00:40:45,946 --> 0:40:48,382
这些决定意味着可能要

733
00:40:48,448 --> 0:40:52,786
在屏幕上渲染大量多边形

734
00:40:52,853 --> 0:40:56,390
人们花数个小时观看

735
00:40:56,723 --> 0:40:58,192
让我们使用一些技巧

736
00:40:58,258 --> 0:41:01,995
来优化场景 避免那种情况发生

737
00:40:58,258 --> 0:41:01,995
来优化场景 避免那种情况发生

738
00:41:03,530 --> 0:41:06,600
我们从关注3D对象的

739
00:41:06,667 --> 0:41:08,535
基础结构 网格 开始

740
00:41:09,102 --> 0:41:11,638
讲述让你创建

741
00:41:11,705 --> 0:41:14,174
精细的模型

742
00:41:14,241 --> 0:41:18,245
但仍保持场景内较低多边形数

743
00:41:18,912 --> 0:41:20,347
如你所知

744
00:41:20,414 --> 0:41:22,883
多边形数就是多边形的个数

745
00:41:22,950 --> 0:41:25,586
典型的网格就由三角形构成

746
00:41:26,887 --> 0:41:30,057
要做的第一件事就是使用

747
00:41:30,123 --> 0:41:32,759
这些简单的网格部署

748
00:41:33,193 --> 0:41:35,429
我们发现使用这类白盒技术

749
00:41:35,495 --> 0:41:38,432
有助于测试基础交互

750
00:41:38,498 --> 0:41:42,069
以及观察事物融入

751
00:41:42,135 --> 0:41:43,604
真实世界的程度

752
00:41:44,505 --> 0:41:47,040
我觉得这团营火很棒

753
00:41:47,107 --> 0:41:48,876
我们就到此结束吧

754
00:41:48,942 --> 0:41:50,544
让我们完成并发布它

755
00:41:50,611 --> 0:41:54,181
谢谢大家

756
00:41:54,248 --> 0:41:56,717
你们觉得它不像营火？

757
00:41:57,618 --> 0:41:59,386
好吧 抱歉 真的吗？

758
00:42:00,053 --> 0:42:04,758
我的错 我们继续构造营火的网格

759
00:42:05,392 --> 0:42:07,461
我要快速的过一下

760
00:42:07,528 --> 0:42:10,831
网格是什么

761
00:42:11,498 --> 0:42:15,035
你能把网格想象成一组

762
00:42:15,102 --> 0:42:17,037
排列在3D空间的三角形

763
00:42:17,104 --> 0:42:20,207
以构成平面让你添加材质

764
00:42:20,707 --> 0:42:24,645
三角形的角由点构成

765
00:42:24,711 --> 0:42:27,648
其称作点 其中包含各种信息

766
00:42:28,248 --> 0:42:32,286
例如空间位置 材质的UV坐标

767
00:42:32,352 --> 0:42:33,687
以及一个后面将讲到的

768
00:42:33,754 --> 0:42:35,923
称作法线的重要属性

769
00:42:37,591 --> 0:42:39,860
既然之前没能成功发布

770
00:42:39,927 --> 0:42:40,994
我打算建造

771
00:42:41,061 --> 0:42:45,165
世界上最漂亮的营火来补偿

772
00:42:45,666 --> 0:42:49,403
看看营地的细节

773
00:42:49,803 --> 0:42:52,539
能看见各种复杂细节

774
00:42:52,606 --> 0:42:54,508
以及树皮上的纹路

775
00:42:55,275 --> 0:42:57,811
但性能受到影响

776
00:42:58,111 --> 0:43:02,182
屏幕的多边形数快达到一百万了

777
00:42:58,111 --> 0:43:02,182
屏幕的多边形数快达到一百万了

778
00:43:02,916 --> 0:43:06,954
我已准备好 不想惹上麻烦

779
00:43:07,020 --> 0:43:08,455
所以最好回去修复它

780
00:43:08,722 --> 0:43:11,959
因为我在意这对电池待机的影响

781
00:43:12,159 --> 0:43:15,629
以及人们如何感受及与AR场景交互

782
00:43:15,996 --> 0:43:19,533
我们看看能做点什么

783
00:43:21,301 --> 0:43:24,338
大多3D构建工具有专门的工具

784
00:43:24,404 --> 0:43:27,608
用以降低模型复杂度

785
00:43:27,941 --> 0:43:29,877
我们降低了

786
00:43:29,943 --> 0:43:33,080
和鱼的高密度模型关联的多边形数

787
00:43:33,914 --> 0:43:37,284
但要注意 放大时大量细节丢失了

788
00:43:37,751 --> 0:43:41,088
但别慌 我们能用特定的材料属性

789
00:43:41,154 --> 0:43:43,423
将丢失的细节找回来

790
00:43:43,824 --> 0:43:47,594
这里的关键就是用最少的多边形

791
00:43:47,661 --> 0:43:49,897
构建网格基础

792
00:43:49,963 --> 0:43:53,233
我们把高密度网格放到一边

793
00:43:53,300 --> 0:43:55,169
低密度的网格

794
00:43:56,703 --> 0:44:00,774
我承认这没以前看起来好

795
00:43:56,703 --> 0:44:00,774
我承认这没以前看起来好

796
00:44:00,841 --> 0:44:02,543
但是看看app性能

797
00:44:02,609 --> 0:44:04,745
我们不仅通过降低

798
00:44:04,811 --> 0:44:08,148
屏幕上多边形数

799
00:44:08,215 --> 0:44:12,986
还能在场景中添加一些3D对象

800
00:44:13,620 --> 0:44:16,056
回想一下 之前的高密度网格中

801
00:44:16,123 --> 0:44:18,125
我们运行在每秒30帧

802
00:44:18,192 --> 0:44:19,993
现在我们回到了每秒60帧

803
00:44:20,494 --> 0:44:23,997
我们之前有接近一百万多边形

804
00:44:24,064 --> 0:44:27,534
现在只有9000个

805
00:44:27,601 --> 0:44:31,672
这样 我们满足了需要的性能规格

806
00:44:31,738 --> 0:44:36,944
稳定的帧率

807
00:44:38,846 --> 0:44:41,615
我们有了营火场景里优化的模型

808
00:44:41,682 --> 0:44:44,751
现在看看如何

809
00:44:44,918 --> 0:44:48,021
使用不同材料属性和技术

810
00:44:48,088 --> 0:44:51,792
让模型看起来

811
00:44:51,859 --> 0:44:54,027
以找回丢失的细节

812
00:44:55,796 --> 0:44:58,699
也许听说过

813
00:44:58,765 --> 0:45:00,400
物理渲染

814
00:44:58,765 --> 0:45:00,400
物理渲染

815
00:45:00,467 --> 0:45:03,770
这是个复杂的话题

816
00:45:03,837 --> 0:45:06,173
全部时间都讲不完

817
00:45:06,507 --> 0:45:08,842
但基础概念就是

818
00:45:08,909 --> 0:45:12,312
app不同材质属性

819
00:45:12,379 --> 0:45:17,417
到网格上

820
00:45:17,484 --> 0:45:18,952
模拟光线的影响

821
00:45:19,353 --> 0:45:21,722
然后我们谈到的所有材质

822
00:45:21,788 --> 0:45:23,557
都遵循该投射技术

823
00:45:24,424 --> 0:45:26,026
如果想要这一概念的更多细节

824
00:45:26,093 --> 0:45:29,029
2016年WWDC有一场演讲

825
00:45:29,096 --> 0:45:31,665
介绍SceneKit

826
00:45:31,732 --> 0:45:34,701
叫做SceneKit渲染进阶

827
00:45:36,403 --> 0:45:39,706
现在谈谈第一个材质属性 反射率

828
00:45:39,773 --> 0:45:43,177
或者有时候被称为颜色散射

829
00:45:44,578 --> 0:45:46,513
我们回到CampfiAR

830
00:45:46,914 --> 0:45:49,049
之前 基础网格只关联了灰色材质

831
00:45:49,116 --> 0:45:50,617
看起来有些单调

832
00:45:50,684 --> 0:45:54,521
但app了反射率后就好多了

833
00:45:54,821 --> 0:45:58,392
可营火还是缺失大量

834
00:45:58,458 --> 0:46:00,727
原来高密度网格里有的细节

835
00:45:58,458 --> 0:46:00,727
原来高密度网格里有的细节

836
00:46:00,928 --> 0:46:02,462
靠近营火时

837
00:46:02,529 --> 0:46:05,432
所有表面都相对平整

838
00:46:05,799 --> 0:46:07,801
之后我们肯定要修正这个

839
00:46:07,868 --> 0:46:10,537
但首先我们深入一下反射率属性

840
00:46:12,272 --> 0:46:14,975
把反射率想象成

841
00:46:15,042 --> 0:46:16,777
AR场景里各种物体的基础网格

842
00:46:17,444 --> 0:46:20,747
这是向模型表面

843
00:46:20,814 --> 0:46:22,549
添加纹理的材质属性

844
00:46:23,217 --> 0:46:25,719
回想一下 网格有不同的点

845
00:46:25,786 --> 0:46:27,754
包含不同信息

846
00:46:28,989 --> 0:46:32,125
这里看到的叫做UV坐标

847
00:46:32,192 --> 0:46:35,729
帮助确定纹理像素如何映射到模型

848
00:46:36,563 --> 0:46:38,966
添加纹理后

849
00:46:39,032 --> 0:46:42,703
我们应用反射率到鱼的这一属性上

850
00:46:44,004 --> 0:46:46,740
也就是我们向鱼添加了纹理

851
00:46:46,807 --> 0:46:47,941
我要提醒的是

852
00:46:48,008 --> 0:46:51,211
人们将在何处体验你的app

853
00:46:51,645 --> 0:46:53,280
你要让你的内容

854
00:46:53,347 --> 0:46:55,582
适配尽可能多的场景

855
00:46:56,149 --> 0:46:57,351
所以要仔细

856
00:46:57,417 --> 0:47:01,555
选择反射率 使其不会

857
00:46:57,417 --> 0:47:01,555
选择反射率 使其不会

858
00:47:01,922 --> 0:47:05,626
以便其工作于各种不同情形

859
00:47:06,093 --> 0:47:08,328
这样鱼有了皮肤

860
00:47:08,395 --> 0:47:11,832
但还是缺少大量细节和场景里的对象

861
00:47:12,165 --> 0:47:15,335
我们看看如何通过使用材质属性

862
00:47:16,170 --> 0:47:18,338
找回大量丢失的细节

863
00:47:19,740 --> 0:47:23,010
我们回到CampfiAR

864
00:47:23,076 --> 0:47:25,546
优化时丢失的细节

865
00:47:26,146 --> 0:47:29,416
这能通过使用称作法线的

866
00:47:29,950 --> 0:47:31,952
能在此看到

867
00:47:32,019 --> 0:47:33,954
应用到AR场景的蓝色贴图

868
00:47:34,655 --> 0:47:39,026
这些贴图让你将优质表面细节

869
00:47:39,092 --> 0:47:41,562
而无需额外的几何体

870
00:47:41,862 --> 0:47:43,463
添加法线映射后

871
00:47:43,530 --> 0:47:46,066
能看到鱼还有树枝

872
00:47:46,133 --> 0:47:49,403
都显示了稍微多一些的细节

873
00:47:49,837 --> 0:47:52,172
如果看看统计面板会注意到

874
00:47:52,239 --> 0:47:54,074
模型的多边形数

875
00:47:54,141 --> 0:47:56,343
完全没有任何变化

876
00:47:56,410 --> 0:47:57,678
很神奇 不是吗？

877
00:47:59,179 --> 0:48:01,515
怎样创建法线贴图

878
00:47:59,179 --> 0:48:01,515
怎样创建法线贴图

879
00:48:02,115 --> 0:48:04,218
仔细看看树枝

880
00:48:04,284 --> 0:48:06,320
看看能做什么来达到目的

881
00:48:06,620 --> 0:48:08,755
在现代3D建模app里

882
00:48:08,822 --> 0:48:10,591
美工能通过从

883
00:48:10,657 --> 0:48:13,794
高密度网格投射到低密度网格来

884
00:48:13,861 --> 0:48:14,828
创建法线映射

885
00:48:15,429 --> 0:48:17,598
这里能看到法线映射

886
00:48:17,664 --> 0:48:21,134
从高密度网格生成后

887
00:48:22,035 --> 0:48:25,472
应用法线映射后

888
00:48:25,539 --> 0:48:27,975
丢失的细节再次回到模型上

889
00:48:28,041 --> 0:48:29,276
但我们仍能保持

890
00:48:29,343 --> 0:48:31,578
低多边形网格的高性能

891
00:48:33,347 --> 0:48:36,083
你可能想知道为何法线贴图

892
00:48:36,149 --> 0:48:37,718
法线贴图的颜色

893
00:48:37,784 --> 0:48:41,388
实际是点数据的可视表达

894
00:48:41,788 --> 0:48:45,926
决定了模型面的法线偏移

895
00:48:45,993 --> 0:48:49,196
以改变光线反射的方式

896
00:48:49,663 --> 0:48:51,365
也是实现效果的关键

897
00:48:52,633 --> 0:48:56,670
那有点绕口

898
00:48:56,737 --> 0:48:59,406
因为法线是一个重要的话题

899
00:48:59,773 --> 0:49:01,408
我们想多花点时间

900
00:48:59,773 --> 0:49:01,408
我们想多花点时间

901
00:49:01,475 --> 0:49:04,845
看看这个有多神奇

902
00:49:05,946 --> 0:49:07,481
控制法线向量的艺术

903
00:49:07,548 --> 0:49:11,652
是AR创建者让模型

904
00:49:11,718 --> 0:49:14,488
找回大量细节的关键工具

905
00:49:15,055 --> 0:49:19,092
法线向量究竟是什么

906
00:49:19,526 --> 0:49:22,863
没什么别的向量了

907
00:49:22,930 --> 0:49:26,633
法线向量垂直于网格表面

908
00:49:26,700 --> 0:49:30,838
并关联到每个网格点

909
00:49:32,372 --> 0:49:33,807
为了看见物体

910
00:49:33,874 --> 0:49:36,977
需要在3D引擎里添加模拟光线

911
00:49:37,778 --> 0:49:40,647
法线向量让3D引擎计算

912
00:49:40,714 --> 0:49:43,350
光线如何在材质表面反射

913
00:49:43,617 --> 0:49:45,886
和现实世界光线的表现一样

914
00:49:45,953 --> 0:49:49,389
要确保AR场景模拟现实情况

915
00:49:50,924 --> 0:49:53,460
有趣的是通过修改这些法线

916
00:49:53,527 --> 0:49:55,896
能让引擎认为

917
00:49:55,963 --> 0:49:58,065
模型表面比实际上更精细

918
00:49:58,131 --> 0:50:00,300
而不用添加额外几何体

919
00:49:58,131 --> 0:50:00,300
而不用添加额外几何体

920
00:50:01,201 --> 0:50:03,937
看看这个例子能看到简单的球体

921
00:50:04,004 --> 0:50:05,539
被平面投射渲染

922
00:50:06,006 --> 0:50:09,076
这意味着关联到网格每个面的法线

923
00:50:09,142 --> 0:50:12,779
都指向相同的方向

924
00:50:13,547 --> 0:50:17,951
光线在表面反射时

925
00:50:18,018 --> 0:50:20,754
能看到所有组成网格的多边形

926
00:50:20,821 --> 0:50:23,290
因为每个面都均匀照亮

927
00:50:24,791 --> 0:50:26,860
尽管使用完全相同的模型

928
00:50:26,927 --> 0:50:29,830
使用了称作平滑或者冯氏投影

929
00:50:30,297 --> 0:50:33,000
注意在多边形表面移动时

930
00:50:33,066 --> 0:50:35,102
法线是渐变的

931
00:50:35,736 --> 0:50:40,007
引擎计算模型反射时

932
00:50:40,073 --> 0:50:42,609
因为法线的渐变插值

933
00:50:42,676 --> 0:50:45,345
会显示平滑曲面

934
00:50:46,613 --> 0:50:48,715
有意思的是这两个模型

935
00:50:48,782 --> 0:50:51,251
关联的多边形数相同

936
00:50:51,318 --> 0:50:54,321
但通过操作法线物体看起来

937
00:50:54,388 --> 0:50:58,125
有更平滑更细节的表面

938
00:50:58,192 --> 0:51:01,094
而不用在网格上添加额外几何体

939
00:50:58,192 --> 0:51:01,094
而不用在网格上添加额外几何体

940
00:51:02,296 --> 0:51:05,199
法线已经讲够了

941
00:51:05,265 --> 0:51:08,836
现在看看如何让场景变得闪亮点

942
00:51:10,437 --> 0:51:15,209
使用法线贴图

943
00:51:15,275 --> 0:51:18,679
但这些部分看起来有点沉闷

944
00:51:18,745 --> 0:51:22,249
特别是期望能闪亮点的物体

945
00:51:23,250 --> 0:51:26,954
这里看到的是AR场景里

946
00:51:27,321 --> 0:51:29,590
金属贴图用来决定

947
00:51:29,656 --> 0:51:33,227
哪个物体表面应该展现反射属性

948
00:51:33,760 --> 0:51:35,629
一旦材质属性激活

949
00:51:35,696 --> 0:51:40,000
注意指定成金属的区域有多闪亮

950
00:51:40,067 --> 0:51:42,469
茶壶还有鱼的鳞片

951
00:51:44,872 --> 0:51:46,807
现在注意这个茶壶

952
00:51:47,107 --> 0:51:50,043
我们从移除反射填图

953
00:51:50,110 --> 0:51:52,980
然后添加金属贴图到材质的

954
00:51:53,780 --> 0:51:55,816
应用金属贴图后

955
00:51:55,883 --> 0:51:59,720
3D渲染会指定贴图的

956
00:51:59,786 --> 0:52:01,889
白色区域表面为反射

957
00:51:59,786 --> 0:52:01,889
白色区域表面为反射

958
00:52:02,356 --> 0:52:04,224
尽管称作金属性

959
00:52:04,291 --> 0:52:07,327
物体不一定要包含金属

960
00:52:07,528 --> 0:52:11,031
而是让3D引擎知道该物体

961
00:52:11,098 --> 0:52:12,933
应展示反射的表面

962
00:52:14,735 --> 0:52:19,039
最好在模型上使用金属贴图

963
00:52:19,106 --> 0:52:22,409
当其同时有金属和非金属表面时

964
00:52:22,976 --> 0:52:24,678
这是简单的灰度贴图

965
00:52:24,745 --> 0:52:27,447
黑色表示非金属

966
00:52:27,514 --> 0:52:30,184
白色表示金属

967
00:52:30,984 --> 0:52:35,722
其允许同一物体的材质

968
00:52:35,789 --> 0:52:38,292
同时表现出反射和非反射的表面

969
00:52:38,959 --> 0:52:42,229
这茶壶反射得太厉害了

970
00:52:42,296 --> 0:52:45,599
不是我们想要的样子

971
00:52:45,799 --> 0:52:49,903
这种情况下

972
00:52:49,970 --> 0:52:54,007
同时模拟表面非完全平滑的现象

973
00:52:54,308 --> 0:52:58,812
表面展现出轻微细小的磨损

974
00:53:00,480 --> 0:53:01,982
这时候就需要

975
00:53:02,049 --> 0:53:02,983
粗糙材质属性

976
00:53:04,051 --> 0:53:05,953
回到CampfiAR

977
00:53:06,019 --> 0:53:08,856
看到反射表面太光滑了

978
00:53:09,256 --> 0:53:12,326
添加粗糙贴图后 能看到

979
00:53:12,392 --> 0:53:16,096
同时改变了茶壶和鱼

980
00:53:16,730 --> 0:53:19,099
然后应用粗糙材质属性

981
00:53:19,166 --> 0:53:23,036
到这些物体之后

982
00:53:23,704 --> 0:53:26,273
粗糙和金属属性的结合

983
00:53:26,340 --> 0:53:29,142
是另一个要关注的概念

984
00:53:29,209 --> 0:53:32,446
我们继续深入粗糙材质属性

985
00:53:34,147 --> 0:53:38,151
用粗糙度模拟细微表面细节

986
00:53:38,218 --> 0:53:41,321
其会影响光线从表面反射的方式

987
00:53:41,822 --> 0:53:44,491
粗糙度设置成完全光滑

988
00:53:44,558 --> 0:53:47,494
光线会像在镜面上一样反射

989
00:53:47,895 --> 0:53:49,963
随着材质粗糙度增加

990
00:53:50,030 --> 0:53:52,099
光线呈一定角度反射

991
00:53:52,332 --> 0:53:55,068
这里我们以固定值从不粗糙到

992
00:53:55,135 --> 0:53:58,839
最大粗糙缓慢增加茶壶的粗糙度

993
00:53:59,339 --> 0:54:04,278
这是个模拟

994
00:53:59,339 --> 0:54:04,278
这是个模拟

995
00:54:04,344 --> 0:54:06,079
细微表面的好办法

996
00:54:06,146 --> 0:54:09,116
并取决于值的返回

997
00:54:09,183 --> 0:54:13,120
将反射模糊到看不见

998
00:54:14,821 --> 0:54:15,923
对茶壶来说

999
00:54:15,989 --> 0:54:18,759
我们取消了原来的金属表面

1000
00:54:18,825 --> 0:54:23,363
可以使用粗糙度贴图而不是

1001
00:54:24,097 --> 0:54:26,300
这有助于指定表面

1002
00:54:26,366 --> 0:54:30,871
比以往更散射光线

1003
00:54:31,572 --> 0:54:35,442
使用粗糙度贴图后 就能看到

1004
00:54:35,509 --> 0:54:39,012
最后茶壶反射的样子

1005
00:54:40,047 --> 0:54:43,483
金属属性

1006
00:54:43,550 --> 0:54:44,918
和粗糙属性的结合

1007
00:54:44,985 --> 0:54:47,855
让你的AR模型的反射更真实

1008
00:54:48,322 --> 0:54:50,657
粗糙度能用于微调物体如何

1009
00:54:50,724 --> 0:54:51,992
反射周围环境

1010
00:54:52,059 --> 0:54:55,796
能让你的金属表面更真实

1011
00:54:56,263 --> 0:55:00,000
能用粗糙度贴图添加更多细节

1012
00:55:00,067 --> 0:55:03,103
像这里做的一样

1013
00:55:03,904 --> 0:55:06,640
最后还有两个材质属性

1014
00:55:06,707 --> 0:55:09,810
可以改善你的模型

1015
00:55:09,877 --> 0:55:13,313
在性能和美观间取得平衡

1016
00:55:14,948 --> 0:55:18,285
环境光吸收是用来给模型提供

1017
00:55:18,619 --> 0:55:19,820
自投影的材质属性

1018
00:55:19,887 --> 0:55:22,222
能给AR模型添加

1019
00:55:22,289 --> 0:55:23,957
额外的深度和细节

1020
00:55:25,192 --> 0:55:28,595
法线贴图能给AR模型

1021
00:55:28,662 --> 0:55:31,198
找回大量细节

1022
00:55:31,265 --> 0:55:34,868
环境光吸收能用来精细化这些细节

1023
00:55:35,369 --> 0:55:38,805
我们看到CampfiAR

1024
00:55:38,872 --> 0:55:40,908
效果有点难演示

1025
00:55:40,974 --> 0:55:42,709
因为其相对微妙

1026
00:55:43,210 --> 0:55:45,812
看你能否注意到木头上的影子

1027
00:55:45,879 --> 0:55:48,248
还有茶壶底部的特定区域

1028
00:55:48,749 --> 0:55:51,351
这里有点像在玩

1029
00:55:51,418 --> 0:55:54,521
我们关注场景里的木头

1030
00:55:57,057 --> 0:56:00,761
这里展示的是木头的法线贴图

1031
00:55:57,057 --> 0:56:00,761
这里展示的是木头的法线贴图

1032
00:56:00,827 --> 0:56:02,296
凸起有大量细节

1033
00:56:02,362 --> 0:56:05,499
但我们能改善这些区域

1034
00:56:06,200 --> 0:56:07,968
现在看着环境光吸收贴图

1035
00:56:08,035 --> 0:56:11,305
能看到给一些区域添加了自投影

1036
00:56:11,371 --> 0:56:15,075
在树木的底部还有小树桩

1037
00:56:15,809 --> 0:56:19,246
贴图应用到环境光吸收属性后

1038
00:56:19,446 --> 0:56:22,850
希望能看到添加

1039
00:56:22,916 --> 0:56:26,119
而无需使用场景里的动态光线

1040
00:56:28,322 --> 0:56:31,191
在AR里 推荐把

1041
00:56:31,258 --> 0:56:32,926
环境光吸收制成贴图

1042
00:56:33,227 --> 0:56:34,928
就像CampfiAR里干的

1043
00:56:35,162 --> 0:56:39,199
而不是使用屏幕空间环境光吸收

1044
00:56:39,266 --> 0:56:41,969
其是基于相机的后期效果

1045
00:56:42,035 --> 0:56:45,305
可能导致场景渲染性能低下

1046
00:56:47,207 --> 0:56:48,909
最后但同样重要的是

1047
00:56:49,610 --> 0:56:52,246
谨慎使用材质的透明度

1048
00:56:52,312 --> 0:56:54,014
如果必须使用透明度

1049
00:56:54,081 --> 0:56:56,183
推荐在能同时看见

1050
00:56:56,250 --> 0:56:59,653
透明和不透明表面的地方

1051
00:57:00,921 --> 0:57:03,390
总的来说 在AR里

1052
00:57:03,457 --> 0:57:07,227
大量使用透明材质会严重影响性能

1053
00:57:07,294 --> 0:57:10,430
尤其是当你观察它们时

1054
00:57:10,497 --> 0:57:13,367
透明表面堆叠在一起

1055
00:57:13,433 --> 0:57:15,402
这称作重复绘图

1056
00:57:15,469 --> 0:57:17,471
AR里一定要避免

1057
00:57:19,306 --> 0:57:20,874
希望大家还在听

1058
00:57:20,941 --> 0:57:22,543
因为内容有些长

1059
00:57:23,043 --> 0:57:27,114
目前 主要关注于AR内容

1060
00:57:27,181 --> 0:57:29,883
对3D引擎里模拟光线的相应

1061
00:57:30,083 --> 0:57:31,752
现在要关注于

1062
00:57:31,818 --> 0:57:34,721
一些让内容看起来是

1063
00:57:35,956 --> 0:57:39,359
补偿变化的光线条件的一个神奇方法

1064
00:57:39,426 --> 0:57:45,332
是利用ARKit的著名特性

1065
00:57:45,933 --> 0:57:47,434
我们从激活这一功能开始

1066
00:57:47,501 --> 0:57:48,969
看其如何影响茶壶

1067
00:57:49,136 --> 0:57:52,372
真实世界的光线强度变化时

1068
00:57:52,439 --> 0:57:55,542
AR场景的光线也随之变化

1069
00:57:56,410 --> 0:57:59,713
实现方式是ARKit

1070
00:57:59,780 --> 0:58:03,016
并用以估计真实世界的光线条件

1071
00:57:59,780 --> 0:58:03,016
并用以估计真实世界的光线条件

1072
00:58:03,750 --> 0:58:07,354
这是个神奇的特性 有助于确保

1073
00:58:07,421 --> 0:58:10,390
AR内容的光线和真实世界的匹配

1074
00:58:12,259 --> 0:58:14,962
现在AR场景里有了

1075
00:58:15,028 --> 0:58:16,129
我们来谈谈阴影

1076
00:58:16,897 --> 0:58:19,600
AR里的阴影很难掌握

1077
00:58:20,234 --> 0:58:23,303
阴影要在各种情形下工作

1078
00:58:23,370 --> 0:58:26,940
记住人们可能在

1079
00:58:27,007 --> 0:58:28,842
如果阴影和

1080
00:58:28,909 --> 0:58:30,444
现实世界里看到的不同

1081
00:58:30,511 --> 0:58:32,479
会影响你的体验

1082
00:58:34,014 --> 0:58:37,584
我们通过使用3D引擎里的

1083
00:58:38,051 --> 0:58:41,455
方向光源错误的投射动态阴影

1084
00:58:42,055 --> 0:58:45,325
阴影是让物体看起来

1085
00:58:45,392 --> 0:58:47,961
但这里和周围环境

1086
00:58:48,028 --> 0:58:49,563
看到的阴影不匹配

1087
00:58:49,630 --> 0:58:52,533
就像在故意违背物理规律

1088
00:58:54,034 --> 0:58:57,571
我们建议将方向光源置于头顶

1089
00:58:57,638 --> 0:59:00,107
调节效果强度

1090
00:58:57,638 --> 0:59:00,107
调节效果强度

1091
00:59:00,174 --> 0:59:03,577
使其感觉更精细

1092
00:59:04,077 --> 0:59:07,247
这会让你的阴影能工作于更多情形

1093
00:59:07,414 --> 0:59:08,949
和更多场景

1094
00:59:09,883 --> 0:59:12,452
替代方法是创建

1095
00:59:12,519 --> 0:59:15,756
自己的投射阴影而不是

1096
00:59:15,989 --> 0:59:18,892
渲染大量3D内容时

1097
00:59:19,193 --> 0:59:21,195
其开销大 可能严重影响性能

1098
00:59:21,795 --> 0:59:25,199
花时间打造精细的阴影

1099
00:59:25,265 --> 0:59:29,336
使其适配尽可能多的真实世界

1100
00:59:31,471 --> 0:59:32,506
环境贴图

1101
00:59:33,073 --> 0:59:36,443
如果真的想让用户震惊

1102
00:59:36,510 --> 0:59:40,013
尤其是那些能反射的AR物体

1103
00:59:40,781 --> 0:59:44,418
会让你的AR内容就像

1104
00:59:44,751 --> 0:59:48,822
为了让其更易于使用 我们将展示

1105
00:59:48,889 --> 0:59:53,026
iOS 12、ARKit 2.0

1106
00:59:53,093 --> 0:59:56,296
自动环境贴图

1107
00:59:57,798 --> 1:00:00,133
近距离观察茶壶 我们原来使用

1108
00:59:57,798 --> 1:00:00,133
近距离观察茶壶 我们原来使用

1109
01:00:00,200 --> 1:00:03,170
带蓝色光晕的环境贴图

1110
01:00:04,238 --> 1:00:06,974
一旦激活自动环境贴图

1111
01:00:07,040 --> 1:00:09,209
注意茶壶如何反射地面

1112
01:00:09,276 --> 1:00:12,279
和当前环境中的周围颜色

1113
01:00:12,579 --> 1:00:15,449
你还能看见茶壶周围

1114
01:00:15,516 --> 1:00:16,884
草的绿色

1115
01:00:17,184 --> 1:00:20,854
这是个神奇的特性 帮助你的物体

1116
01:00:20,921 --> 1:00:23,624
置于真实世界

1117
01:00:24,124 --> 1:00:26,827
能大幅增加场景可信度

1118
01:00:28,829 --> 1:00:31,331
为何自动环境贴图

1119
01:00:31,398 --> 1:00:32,799
如此神奇

1120
01:00:33,400 --> 1:00:38,038
通常这些贴图用来模拟金属表面

1121
01:00:38,105 --> 1:00:40,174
反射周围环境的能力

1122
01:00:41,041 --> 1:00:44,211
你能看见立方体环境贴图的例子

1123
01:00:45,212 --> 1:00:47,848
ARKit添加自动环境贴图之前

1124
01:00:47,915 --> 1:00:50,584
你需要添加图像 期望其能在

1125
01:00:50,651 --> 1:00:54,154
app使用的各种情形下工作

1126
01:00:54,655 --> 1:00:58,692
现在有了ARKit 2.0

1127
01:00:58,759 --> 1:01:01,628
不再需要担忧环境贴图

1128
01:00:58,759 --> 1:01:01,628
不再需要担忧环境贴图

1129
01:01:02,930 --> 1:01:04,831
环境贴图的更多信息

1130
01:01:04,898 --> 1:01:07,334
还有ARKit 2.0的

1131
01:01:07,401 --> 1:01:11,004
请查阅Arsalan和Reinhard的演讲

1132
01:01:12,539 --> 1:01:15,676
为了结束CampfiAR

1133
01:01:15,742 --> 1:01:18,078
为营火添加最后修改

1134
01:01:19,313 --> 1:01:21,582
用少量动画效果

1135
01:01:21,648 --> 1:01:24,751
还有app今天讨论的这些技术

1136
01:01:25,085 --> 1:01:27,187
CampfiAR已经制作好了

1137
01:01:27,621 --> 1:01:32,059
如果有强烈外出的冲动

1138
01:01:32,125 --> 1:01:33,894
安全待在桌前

1139
01:01:33,961 --> 1:01:37,598
享受模拟户外营火的乐趣

1140
01:01:38,098 --> 1:01:40,100
谁还需要肾上腺素 不是这家伙

1141
01:01:42,135 --> 1:01:44,238
今天讲了很多内容

1142
01:01:44,304 --> 1:01:47,708
我想快速回顾开发app时

1143
01:01:47,774 --> 1:01:49,309
要记住的重点

1144
01:01:49,743 --> 1:01:53,780
记住app可能在真实世界

1145
01:01:53,847 --> 1:01:55,382
随时确保审美样式

1146
01:01:55,449 --> 1:01:57,751
允许内容能在各种情况适用

1147
01:01:58,619 --> 1:02:01,822
一旦决定要构造怎样的AR app

1148
01:01:58,619 --> 1:02:01,822
一旦决定要构造怎样的AR app

1149
01:02:01,889 --> 1:02:05,092
然后考虑渲染预算

1150
01:02:05,158 --> 1:02:06,894
尽可能优化

1151
01:02:06,960 --> 1:02:09,763
获取最佳性能并减少电脑消耗

1152
01:02:10,464 --> 1:02:13,333
最后利用各种材质属性

1153
01:02:13,400 --> 1:02:18,038
还有内置的ARKit特性

1154
01:02:18,105 --> 1:02:20,007
以便震惊使用app的用户

1155
01:02:21,375 --> 1:02:24,211
作为参考 这是今天用来

1156
01:02:24,278 --> 1:02:27,014
构建CampfiAR的

1157
01:02:27,948 --> 1:02:31,385
链接里有更多信息 谢谢
