1
00:00:17,417 --> 0:00:22,456
（tvOS 12新特性

2
00:00:22,523 --> 0:00:23,457
下午好

3
00:00:25,192 --> 0:00:27,127
欢迎参加“tvOS新特性”演讲

4
00:00:28,328 --> 0:00:29,363
我叫Hans Kim

5
00:00:29,429 --> 0:00:31,465
我是tvOS团队中的一名工程师

6
00:00:32,499 --> 0:00:37,004
今天我很高兴地跟大家分享一下

7
00:00:37,704 --> 0:00:40,040
我们将会谈到密码自动填写

8
00:00:40,974 --> 0:00:43,010
我们还会了解一下

9
00:00:43,610 --> 0:00:45,245
tvOS聚焦引擎的一些新改进

10
00:00:46,213 --> 0:00:52,219
最后我们会谈到关于tvOS上

11
00:00:53,153 --> 0:00:54,354
我们要讲的内容太多了

12
00:00:54,421 --> 0:00:56,523
我们还有一些很棒的演示

13
00:00:57,357 --> 0:00:58,358
首先

14
00:00:58,425 --> 0:01:00,694
我要邀请同事

15
00:00:58,425 --> 0:01:00,694
我要邀请同事

16
00:01:01,094 --> 0:01:03,797
谈谈如何帮助你的客户登录你的app

17
00:01:11,205 --> 0:01:12,206
谢谢Hans

18
00:01:12,639 --> 0:01:13,640
大家好

19
00:01:13,707 --> 0:01:15,309
我叫Alex Sanciangco

20
00:01:15,375 --> 0:01:17,678
今天我很激动地要跟大家一起分享

21
00:01:17,744 --> 0:01:19,112
密码自动填写的相关信息

22
00:01:20,747 --> 0:01:23,617
登录是用户与app之间

23
00:01:23,984 --> 0:01:26,720
比如这里有一个我一直在做的app

24
00:01:26,987 --> 0:01:29,990
它每天会向用户展示

25
00:01:30,057 --> 0:01:31,258
当他们登录时

26
00:01:32,259 --> 0:01:34,828
为了让登录变得尽可能地流畅

27
00:01:34,895 --> 0:01:37,798
我们在tvOS 12中

28
00:01:37,865 --> 0:01:43,170
这是一种与iOS上同样简单

29
00:01:43,604 --> 0:01:44,872
让我演示一下

30
00:01:53,680 --> 0:01:55,782
首先我要给你们展示

31
00:01:56,016 --> 0:01:57,084
你可能会记得

32
00:01:57,150 --> 0:01:59,186
连续性键盘是一个iOS功能

33
00:01:59,553 --> 0:02:02,089
允许用户在Apple TV上

34
00:01:59,553 --> 0:02:02,089
允许用户在Apple TV上

35
00:02:02,155 --> 0:02:03,690
通过他们的iOS设备

36
00:02:03,991 --> 0:02:05,025
我们实际操作一下

37
00:02:05,926 --> 0:02:09,295
我要导航到Shiny app

38
00:02:11,365 --> 0:02:14,301
正如我所期待的

39
00:02:14,434 --> 0:02:17,504
我们也对这个键盘进行了改善

40
00:02:18,071 --> 0:02:19,273
那么现在我要打开它

41
00:02:21,241 --> 0:02:25,312
我看到了它针对Shinyapp

42
00:02:25,379 --> 0:02:26,880
就在快速输入栏那里

43
00:02:26,947 --> 0:02:28,382
我知道只需要一次轻触

44
00:02:28,448 --> 0:02:31,118
这个信息就会自动填入TV

45
00:02:31,185 --> 0:02:32,186
那么我现在就做

46
00:02:35,756 --> 0:02:36,990
哇 你们大家看

47
00:02:43,830 --> 0:02:45,732
我在iPhone上收到了一个通知

48
00:02:45,999 --> 0:02:49,102
因为我的iPhone和Apple TV

49
00:02:49,903 --> 0:02:52,673
并且如果你是TV Remote

50
00:02:52,739 --> 0:02:53,941
或TV Remote app

51
00:02:54,007 --> 0:02:55,809
体验也很相似

52
00:02:56,877 --> 0:02:59,713
但我们今天要给你们展示

53
00:02:59,780 --> 0:03:02,683
告诉你们我们把登录变得多么简单了

54
00:02:59,780 --> 0:03:02,683
告诉你们我们把登录变得多么简单了

55
00:03:03,016 --> 0:03:06,153
甚至对于一个可能从未使用过

56
00:03:06,520 --> 0:03:09,590
为此我要邀请Conrad上台

57
00:03:14,194 --> 0:03:15,195
谢谢Alex

58
00:03:16,263 --> 0:03:18,732
现在假如我是Alex的表哥

59
00:03:19,132 --> 0:03:20,167
正在他家做客

60
00:03:20,901 --> 0:03:22,603
他的小狗非常可爱

61
00:03:23,270 --> 0:03:28,275
但我真的非常想登录Shiny

62
00:03:28,675 --> 0:03:30,744
或是Max可爱的妹妹Min

63
00:03:31,645 --> 0:03:34,715
我从未使用过他的Apple TV

64
00:03:35,048 --> 0:03:37,851
因此我没有任何可用的键盘选项

65
00:03:37,918 --> 0:03:39,019
就像他刚才所说

66
00:03:39,553 --> 0:03:44,491
此外 因我在iCloud钥匙串中

67
00:03:44,992 --> 0:03:46,226
我并没有记住密码

68
00:03:46,727 --> 0:03:49,596
我希望能查询一下我的密码

69
00:03:49,863 --> 0:03:54,334
然后把它一个字母一个字母地

70
00:03:55,169 --> 0:03:56,336
让我们看看会发生什么

71
00:03:58,639 --> 0:03:59,740
我要跳过这里

72
00:04:00,741 --> 0:04:01,842
我要拿起我的手机

73
00:04:02,910 --> 0:04:04,678
然后让我们登录

74
00:04:05,612 --> 0:04:09,116
甚至在我打开设置之前

75
00:04:09,483 --> 0:04:11,485
或在请求Siri查询我的密码之前

76
00:04:11,852 --> 0:04:15,589
我的iPhone就已经帮我

77
00:04:16,822 --> 0:04:19,059
我要打开这个通知

78
00:04:20,694 --> 0:04:21,695
好的

79
00:04:21,762 --> 0:04:23,597
通过键入一个PIN码

80
00:04:23,664 --> 0:04:28,368
我就了解到我正在安全连接到

81
00:04:29,169 --> 0:04:30,270
需要指纹识别

82
00:04:31,438 --> 0:04:34,074
然后顶部就出现了

83
00:04:34,508 --> 0:04:37,177
只需要一次轻触我就登录了

84
00:04:37,778 --> 0:04:38,779
超级简单

85
00:04:41,281 --> 0:04:44,651
哇 抱歉 它是…它是Min 好的

86
00:04:46,353 --> 0:04:48,388
现在你可能在思考

87
00:04:49,089 --> 0:04:50,157
那是如何实现的

88
00:04:50,591 --> 0:04:55,429
并不是房间里的所有iPhone

89
00:04:56,630 --> 0:04:59,700
我认为这非常非常酷

90
00:05:00,667 --> 0:05:01,668
Siri Remote

91
00:05:02,135 --> 0:05:06,206
可以定位附近提供自动填写

92
00:05:06,573 --> 0:05:10,444
在本例中 只有我的iPhone

93
00:05:11,378 --> 0:05:14,114
这就是tvOS上的

94
00:05:14,715 --> 0:05:15,916
现在我要感谢…抱歉

95
00:05:15,983 --> 0:05:18,252
我要邀请Alex返回舞台

96
00:05:19,052 --> 0:05:23,624
给大家演示把这个功能完美地嵌入

97
00:05:24,057 --> 0:05:24,892
Alex？

98
00:05:29,997 --> 0:05:30,998
谢谢Conrad

99
00:05:31,598 --> 0:05:32,866
天呐 我喜欢那个演示

100
00:05:32,933 --> 0:05:34,601
我就是觉得那个功能太酷了

101
00:05:36,637 --> 0:05:38,305
tvOS上的密码自动填写功能

102
00:05:38,372 --> 0:05:41,208
是你可能在周一听到过的一个

103
00:05:41,275 --> 0:05:43,477
目的是简化密码体验

104
00:05:44,044 --> 0:05:46,313
这些功能可以整合到现有app中

105
00:05:46,380 --> 0:05:48,382
而你不需要做太大修改

106
00:05:49,149 --> 0:05:51,118
这里有一些你们开发人员可以做的事

107
00:05:51,185 --> 0:05:53,921
以确保密码自动填写功能尽可能很棒

108
00:05:54,288 --> 0:05:55,455
让我们快速说明一下

109
00:05:57,724 --> 0:05:59,960
首先你要确保快速输入栏出现

110
00:06:00,027 --> 0:06:01,495
用于填写文本字段

111
00:06:02,729 --> 0:06:05,199
接下来你要确保app的证书

112
00:06:05,265 --> 0:06:06,834
由快速输入栏进行了建议

113
00:06:07,701 --> 0:06:08,535
最后

114
00:06:09,469 --> 0:06:12,206
你要在体验中

115
00:06:12,639 --> 0:06:14,875
现在让我们更具体地看看该如何实现

116
00:06:16,476 --> 0:06:19,279
要确保用于文本字段输入的

117
00:06:19,580 --> 0:06:22,216
你要采用UITextContentTypes

118
00:06:23,217 --> 0:06:26,854
tvOS将会自动尝试检测

119
00:06:26,920 --> 0:06:30,424
你可以通过明确标记文本字段来实现

120
00:06:31,325 --> 0:06:34,261
这跟在这些文本字段上

121
00:06:34,695 --> 0:06:39,533
简单地设置你的用户名文本字段

122
00:06:39,867 --> 0:06:41,568
密码字段也一样

123
00:06:41,635 --> 0:06:44,071
你要把textContentType

124
00:06:44,638 --> 0:06:47,441
非常简单 这也可以在

125
00:06:48,909 --> 0:06:51,144
采用textContentTypes之后

126
00:06:51,211 --> 0:06:54,414
这是浏览者很可能会在那个

127
00:06:54,648 --> 0:06:55,516
这很棒

128
00:06:55,582 --> 0:06:57,985
因为它给用户提供了他们密码的权限

129
00:06:58,552 --> 0:07:00,087
但它却隐藏在那个钥匙图标背后

130
00:06:58,552 --> 0:07:00,087
但它却隐藏在那个钥匙图标背后

131
00:07:00,487 --> 0:07:01,688
需要太多次轻触才能实现

132
00:07:02,089 --> 0:07:04,525
我们真正想要用户看到的是这个：

133
00:07:05,125 --> 0:07:08,529
快速输入栏上给出了

134
00:07:09,630 --> 0:07:10,797
那样就得到了这个行为

135
00:07:10,864 --> 0:07:14,101
通过采用一种叫做关联域的技术

136
00:07:14,368 --> 0:07:16,270
它会安全地告诉密码自动填写功能

137
00:07:16,336 --> 0:07:18,639
在快速输入栏中

138
00:07:21,542 --> 0:07:24,211
关联域是一个强大的技术

139
00:07:24,278 --> 0:07:27,481
还带有其它功能 比如通用链接

140
00:07:31,785 --> 0:07:36,023
它会在用户权限内的域名

141
00:07:36,089 --> 0:07:37,891
以及他们所下载的app之间

142
00:07:39,159 --> 0:07:41,728
然后密码自动填写功能

143
00:07:41,795 --> 0:07:45,165
来准确建议证书

144
00:07:46,767 --> 0:07:48,635
要了解如何采用关联域

145
00:07:48,902 --> 0:07:52,873
我强烈推荐大家查看“在app中

146
00:07:52,940 --> 0:07:54,474
它是去年WWDC的一场演讲

147
00:07:55,108 --> 0:07:57,311
那场演讲中有一步一步的指南

148
00:07:57,611 --> 0:08:00,380
关于如何在iOS app中

149
00:07:57,611 --> 0:08:00,380
关于如何在iOS app中

150
00:08:00,514 --> 0:08:02,850
那些步骤对于tvOS app

151
00:08:04,751 --> 0:08:06,687
在采用关联域之后

152
00:08:06,753 --> 0:08:09,590
用户很可能在Shiny app上

153
00:08:09,656 --> 0:08:11,992
在快速输入栏上轻触你的证书之后

154
00:08:12,192 --> 0:08:13,193
非常棒

155
00:08:13,327 --> 0:08:16,463
用户的用户名和密码已经填写到

156
00:08:16,530 --> 0:08:18,432
而不需要键入一个字母

157
00:08:19,199 --> 0:08:22,269
但我们真正希望用户看到的是这个

158
00:08:23,003 --> 0:08:26,006
能自动登录并查看他们的小狗

159
00:08:26,340 --> 0:08:28,742
因为他们已经通过一次轻触登录了

160
00:08:30,177 --> 0:08:34,381
你可以通过实施preferredFocus

161
00:08:36,383 --> 0:08:39,586
在填写密码之后

162
00:08:39,785 --> 0:08:40,787
并且密码自动填写

163
00:08:40,854 --> 0:08:43,056
将会执行聚焦按钮的行动

164
00:08:43,123 --> 0:08:44,124
若有按钮是聚焦状态

165
00:08:44,558 --> 0:08:48,095
你应该实施

166
00:08:48,161 --> 0:08:50,797
以便你可以向聚焦引擎提供登录按钮

167
00:08:51,164 --> 0:08:53,066
让我们看看你要如何实施

168
00:08:54,601 --> 0:08:58,405
在这里我有一个示例是关于实施

169
00:08:58,472 --> 0:09:01,708
它会返回UIFocusEnvironment

170
00:08:58,472 --> 0:09:01,708
它会返回UIFocusEnvironment

171
00:09:02,976 --> 0:09:06,313
首先我们要尝试把用户名和密码

172
00:09:06,513 --> 0:09:09,716
如果我们可以 我们只需要

173
00:09:10,384 --> 0:09:12,052
如果我们不能抓取任何文本

174
00:09:12,119 --> 0:09:14,288
那就意味着用户尚未键入任何文本

175
00:09:14,354 --> 0:09:17,357
因此我们要返回用户名和密码字段

176
00:09:17,991 --> 0:09:18,992
超级简单

177
00:09:20,761 --> 0:09:22,429
那么让我们简单说一下

178
00:09:22,496 --> 0:09:23,697
密码自动填写功能的方便快捷性

179
00:09:25,265 --> 0:09:26,266
对于客户来说

180
00:09:26,667 --> 0:09:29,670
密码自动填写功能

181
00:09:29,970 --> 0:09:33,073
通过启用一次轻触即可登录体验

182
00:09:33,640 --> 0:09:36,743
对于你们开发人员来说

183
00:09:37,110 --> 0:09:38,212
那也超级简单

184
00:09:39,313 --> 0:09:43,016
你只需要采用UITextContentTypes

185
00:09:44,551 --> 0:09:45,919
采用关联域

186
00:09:45,986 --> 0:09:48,822
以便你的app证书

187
00:09:50,090 --> 0:09:50,924
最后

188
00:09:50,991 --> 0:09:55,863
实施preferredFocusEnvironments

189
00:09:56,763 --> 0:09:58,665
这就是tvOS上的

190
00:09:59,032 --> 0:10:01,902
我们已经迫不及待地要看到

191
00:09:59,032 --> 0:10:01,902
我们已经迫不及待地要看到

192
00:10:02,536 --> 0:10:05,539
接下来我想邀请Ada上台

193
00:10:13,380 --> 0:10:14,414
谢谢Alex

194
00:10:14,781 --> 0:10:16,383
各位

195
00:10:16,450 --> 0:10:18,519
今天我要激动地跟大家一起分享

196
00:10:18,585 --> 0:10:21,889
我们在tvOS 12中

197
00:10:22,923 --> 0:10:27,294
聚焦是让用户在tvOS上

198
00:10:27,694 --> 0:10:30,197
它允许用户优雅地滚动内容

199
00:10:30,397 --> 0:10:32,332
并提供幽默的移动暗示

200
00:10:32,566 --> 0:10:35,402
随着他们与Siri Remote

201
00:10:36,203 --> 0:10:37,738
app是通过UIKit

202
00:10:37,905 --> 0:10:39,706
SpriteKit

203
00:10:39,907 --> 0:10:41,808
它们都支持聚焦

204
00:10:42,142 --> 0:10:45,846
然而 使用了可替换方法

205
00:10:46,079 --> 0:10:49,149
并不能直接支持聚焦引擎

206
00:10:50,050 --> 0:10:53,187
今天我很高兴地宣布

207
00:10:53,387 --> 0:10:57,357
聚焦引擎现已支持各种app了

208
00:11:03,063 --> 0:11:06,300
意思是用框架

209
00:11:06,567 --> 0:11:10,037
现在也能直接在交互模式中

210
00:11:10,470 --> 0:11:11,471
这是通过

211
00:11:11,538 --> 0:11:14,708
允许你让你自己的类

212
00:11:14,942 --> 0:11:18,011
即使它们并不是继承UIKit组件

213
00:11:18,812 --> 0:11:20,914
现在这就意味着对于你的app来说

214
00:11:21,148 --> 0:11:23,250
它们将获得稳定管理

215
00:11:23,383 --> 0:11:24,985
关于当前聚焦什么

216
00:11:25,385 --> 0:11:28,956
用几何法确定

217
00:11:29,356 --> 0:11:31,291
完整的权限支持

218
00:11:31,658 --> 0:11:37,698
聚焦移动、暗示和滚动感觉就像

219
00:11:39,066 --> 0:11:41,602
在我们了解新的聚焦API之前

220
00:11:41,869 --> 0:11:45,506
让我们迅速回顾一些现有聚焦组件

221
00:11:46,306 --> 0:11:48,575
首先我们有

222
00:11:48,909 --> 0:11:52,679
这个原型管理的是

223
00:11:53,080 --> 0:11:57,618
当焦点更新时 它会收到一个通知

224
00:11:57,951 --> 0:11:58,952
在UIKit中

225
00:11:59,019 --> 0:12:02,523
UIViewController是一个

226
00:11:59,019 --> 0:12:02,523
UIViewController是一个

227
00:12:03,457 --> 0:12:05,726
接下来我们有

228
00:12:06,360 --> 0:12:08,896
这个原型继承

229
00:12:09,162 --> 0:12:13,300
并添加了焦点项的功能

230
00:12:13,600 --> 0:12:19,239
UIKit的UIView和SpriteKit的

231
00:12:19,940 --> 0:12:22,910
最后我们还有

232
00:12:23,143 --> 0:12:25,445
它提供了一个著名而又有用的功能

233
00:12:25,646 --> 0:12:30,250
即在聚焦交互过程中

234
00:12:31,251 --> 0:12:34,188
要了解更多关于如何使用这些组件

235
00:12:34,388 --> 0:12:35,656
以及调试聚焦的信息

236
00:12:35,889 --> 0:12:37,558
我强烈推荐你们观看

237
00:12:37,724 --> 0:12:41,261
去年的一场演讲

238
00:12:42,095 --> 0:12:47,167
我要向聚焦引擎中引入一些新组件

239
00:12:47,734 --> 0:12:50,137
首先从tvOS 12开始讲

240
00:12:50,571 --> 0:12:54,107
我们扩展了

241
00:12:54,608 --> 0:12:57,644
你可以在指定环境下

242
00:12:57,911 --> 0:13:01,548
并从FocusSystem外

243
00:12:57,911 --> 0:13:01,548
并从FocusSystem外

244
00:13:02,349 --> 0:13:06,787
接下来我们引入了一个叫做

245
00:13:07,254 --> 0:13:10,224
它向焦点项提供几何情境

246
00:13:11,225 --> 0:13:14,528
FocusItemContainer

247
00:13:14,862 --> 0:13:18,365
并可以在特定区域定位焦点项

248
00:13:18,432 --> 0:13:21,969
允许聚焦引擎聚焦到最佳候选项上

249
00:13:23,537 --> 0:13:26,740
接下来我们有

250
00:13:26,807 --> 0:13:28,842
叫做FocusItemScrollableContainer

251
00:13:29,076 --> 0:13:32,079
它会对添加对内容的自动滚动支持

252
00:13:32,145 --> 0:13:33,547
随着焦点的移动

253
00:13:34,481 --> 0:13:38,852
最后我们现在提供附带移动暗示的

254
00:13:39,086 --> 0:13:42,856
它包含你可以用于

255
00:13:43,090 --> 0:13:46,360
那会建议即将向哪个方向移动焦点

256
00:13:47,261 --> 0:13:49,229
现在让我们具体了解一下

257
00:13:49,296 --> 0:13:52,466
我们该如何让我们的类遵循这些协议

258
00:13:53,233 --> 0:13:56,236
让我们从实施自定义

259
00:13:56,803 --> 0:13:59,840
为了让聚焦引擎找到你的环境

260
00:14:00,073 --> 0:14:02,442
及其子环境或项

261
00:14:02,743 --> 0:14:05,345
你必须app一个父聚焦环境

262
00:14:05,546 --> 0:14:07,047
和一个FocusItemContainer

263
00:14:07,447 --> 0:14:08,448
比如

264
00:14:08,515 --> 0:14:11,451
UIViewController

265
00:14:11,518 --> 0:14:13,053
提供为它的parentFocusEnvironment

266
00:14:13,420 --> 0:14:16,223
并把它的视图

267
00:14:17,524 --> 0:14:20,127
FocusEnvironment提供了

268
00:14:20,194 --> 0:14:22,696
控制和应对焦点更新

269
00:14:22,963 --> 0:14:23,964
比如

270
00:14:24,031 --> 0:14:27,734
preferredFocusEnvironments

271
00:14:27,935 --> 0:14:31,471
在视图初始化之后

272
00:14:31,839 --> 0:14:33,841
或是一个程序性的焦点更新

273
00:14:34,775 --> 0:14:37,711
我在这里要提醒你们注意两个方法

274
00:14:37,778 --> 0:14:39,146
在FocusEnvironment上

275
00:14:39,646 --> 0:14:42,883
SetNeedsFocusUpdate

276
00:14:43,283 --> 0:14:45,385
你对这些方法的实施

277
00:14:45,452 --> 0:14:49,857
必须在FocusSystem上

278
00:14:51,425 --> 0:14:55,062
接下来让我们实施一个自定义

279
00:14:57,164 --> 0:14:59,766
首先你要提供一个

280
00:15:00,133 --> 0:15:02,569
UIView会把它自己提供为一个

281
00:15:03,003 --> 0:15:04,938
如果你的容器更抽象

282
00:15:05,005 --> 0:15:08,675
你可能会返回一个现有的coordinateSpace

283
00:15:09,910 --> 0:15:12,746
接下来你需要在方框中

284
00:15:13,113 --> 0:15:16,016
这个方法必须返回任意一个

285
00:15:16,283 --> 0:15:18,685
它的框架贯穿所提供的方框

286
00:15:19,152 --> 0:15:21,321
请注意传递到这个方法中的方框

287
00:15:21,388 --> 0:15:23,891
是在容器的coordinateSpace中表达的

288
00:15:24,224 --> 0:15:27,928
并且你从这个方法中所返回的每一个

289
00:15:28,295 --> 0:15:30,998
必须也在那个coordinateSpace中

290
00:15:33,200 --> 0:15:35,869
接下来让我们实施一个

291
00:15:36,904 --> 0:15:39,740
请记住这个协议继承

292
00:15:39,973 --> 0:15:42,476
因此你也需要实施全部方法

293
00:15:43,510 --> 0:15:46,747
为了让聚焦引擎聚焦到你的项

294
00:15:47,014 --> 0:15:49,850
它必须从canBecomeFocused中

295
00:15:51,084 --> 0:15:53,987
DidHintFocusMovement

296
00:15:54,054 --> 0:15:56,390
无论何时当用户移动他们的手指时

297
00:15:56,456 --> 0:15:58,392
在Siri Remote触摸表面

298
00:15:58,926 --> 0:16:02,262
它向FocusItem

299
00:15:58,926 --> 0:16:02,262
它向FocusItem

300
00:16:02,329 --> 0:16:05,265
包含你可以用于创建

301
00:16:05,566 --> 0:16:08,735
是指能暗示焦点

302
00:16:09,736 --> 0:16:11,905
最后你需要提供一个框架

303
00:16:12,239 --> 0:16:15,008
正如我之前所说 这个框架必须

304
00:16:15,075 --> 0:16:18,579
在包含FocusItemContainer的

305
00:16:18,846 --> 0:16:24,718
比如UIView在它的超级试图的

306
00:16:25,018 --> 0:16:28,055
那也是它的FocusItemContainer

307
00:16:29,289 --> 0:16:33,160
现在让我们具体了解一下

308
00:16:34,194 --> 0:16:35,929
移动方向是一个矢量

309
00:16:36,196 --> 0:16:40,300
它的值在-1、-1和1、1之间

310
00:16:40,601 --> 0:16:44,671
代表焦点的移动

311
00:16:45,439 --> 0:16:47,541
这个值被绑定为

312
00:16:47,608 --> 0:16:51,111
在Siri Remote触摸表面

313
00:16:52,579 --> 0:16:55,349
说得透彻一点 旋转和转换

314
00:16:55,616 --> 0:17:00,153
是你可以用来匹配

315
00:16:55,616 --> 0:17:00,153
是你可以用来匹配

316
00:17:01,021 --> 0:17:02,556
并且interactionTransform

317
00:17:02,623 --> 0:17:06,359
把这三个值结合到了

318
00:17:08,262 --> 0:17:10,897
接下来让我们看看如何实施

319
00:17:10,964 --> 0:17:13,367
FocusItemScrollableContainer

320
00:17:13,767 --> 0:17:16,470
这是FocusItemContainer的一个

321
00:17:16,770 --> 0:17:18,605
通过变换为这个协议

322
00:17:18,839 --> 0:17:22,509
你的容器会向聚焦引擎

323
00:17:22,809 --> 0:17:26,079
比如UIScrollView

324
00:17:26,980 --> 0:17:29,449
它提供三种额外的属性

325
00:17:29,750 --> 0:17:33,053
可以让聚焦引擎管理它的滚动行为

326
00:17:33,420 --> 0:17:36,190
首先我们有

327
00:17:36,456 --> 0:17:38,458
它是一个读/写属性

328
00:17:38,525 --> 0:17:41,195
表示容器已经滚动了多远

329
00:17:41,595 --> 0:17:46,733
聚焦引擎会随着焦点的移动

330
00:17:46,800 --> 0:17:50,070
以便在屏幕上显示当前焦点项

331
00:17:51,071 --> 0:17:53,140
其次我们有contentSize

332
00:17:53,273 --> 0:17:57,911
表示可滚动内容的完整尺寸

333
00:17:58,345 --> 0:18:01,081
第三我们有visibleSize

334
00:17:58,345 --> 0:18:01,081
第三我们有visibleSize

335
00:18:01,148 --> 0:18:04,051
表示你的容器在屏幕上的尺寸

336
00:18:04,384 --> 0:18:08,388
这个属性类似于UIScrollView上的

337
00:18:09,857 --> 0:18:14,061
重要的是要谨记

338
00:18:14,361 --> 0:18:16,396
而你要负责

339
00:18:16,463 --> 0:18:19,066
适时更新你的渲染内容

340
00:18:19,132 --> 0:18:21,001
无论何时当这个属性被设置

341
00:18:24,137 --> 0:18:28,342
现在让我们谈谈如何

342
00:18:28,909 --> 0:18:30,944
它实际上非常简单

343
00:18:31,411 --> 0:18:35,849
通过实施FocusItemContainers

344
00:18:36,149 --> 0:18:39,152
你会向聚焦引擎提供足够的信息

345
00:18:39,419 --> 0:18:42,823
从而允许旁白在导航上

346
00:18:43,490 --> 0:18:47,794
请一定记得设置权限标签和权限暗示

347
00:18:47,861 --> 0:18:48,896
在你的FocusItems上

348
00:18:49,196 --> 0:18:53,100
以便旁白给你的用户提供最佳体验

349
00:18:53,767 --> 0:18:55,435
我强烈建议你们观看

350
00:18:55,669 --> 0:18:59,907
2016年WWDC的

351
00:19:00,207 --> 0:19:01,608
以便深入了解

352
00:19:01,875 --> 0:19:06,446
在tvOS中聚焦和旁白

353
00:19:08,248 --> 0:19:11,285
现在我要邀请同事Paul

354
00:19:11,552 --> 0:19:14,955
给大家演示如何创建

355
00:19:21,995 --> 0:19:22,996
谢谢Ada

356
00:19:23,764 --> 0:19:26,466
那么我正在设置屏幕上

357
00:19:26,867 --> 0:19:29,903
在屏幕底部有一些

358
00:19:30,637 --> 0:19:33,540
顶部是一些方格用于选择等级

359
00:19:34,074 --> 0:19:36,743
这些方格实际上是由

360
00:19:36,877 --> 0:19:37,911
你们一定能看出

361
00:19:37,978 --> 0:19:39,913
通过你在那儿看到的

362
00:19:40,781 --> 0:19:43,450
我希望能通过遥控选择方格

363
00:19:44,251 --> 0:19:47,321
在此之前

364
00:19:47,721 --> 0:19:49,323
并实施我自己的导航

365
00:19:49,656 --> 0:19:51,992
尽可能匹配聚焦引擎的外观

366
00:19:52,292 --> 0:19:55,996
在tvOS 12中 我能直接

367
00:19:56,630 --> 0:19:57,731
让我们实际操作一下

368
00:20:01,468 --> 0:20:02,836
我首先要做的是

369
00:20:02,903 --> 0:20:05,906
扩展LevelTile类

370
00:20:06,673 --> 0:20:08,675
这就是允许它变得可聚焦的东西

371
00:20:09,943 --> 0:20:10,978
这里有一些方法

372
00:20:11,245 --> 0:20:13,347
我只想让你们注意一下

373
00:20:14,214 --> 0:20:16,583
对于canBecomeFocused

374
00:20:16,817 --> 0:20:17,885
就是这么直截了当

375
00:20:18,652 --> 0:20:19,920
对于parentFocusEnvironment

376
00:20:20,220 --> 0:20:22,589
我要返回渲染这些项的

377
00:20:23,524 --> 0:20:25,759
最后

378
00:20:26,126 --> 0:20:28,929
我要把方格设置为

379
00:20:29,196 --> 0:20:30,397
当它变为焦点时

380
00:20:31,665 --> 0:20:34,768
接下来我要告诉聚焦引擎

381
00:20:35,469 --> 0:20:36,470
为此

382
00:20:36,537 --> 0:20:39,306
我要扩展渲染

383
00:20:40,307 --> 0:20:42,209
这个视图已经在视图等级之中了

384
00:20:42,276 --> 0:20:44,211
并且聚焦引擎也已知道了它的存在

385
00:20:44,278 --> 0:20:45,612
这是一个钩入的绝佳位置

386
00:20:46,480 --> 0:20:47,915
因为这是一个UIView

387
00:20:48,182 --> 0:20:50,584
它已变换为

388
00:20:50,884 --> 0:20:53,620
并且它把自己作为了一个坐标空间

389
00:20:54,321 --> 0:20:55,589
我唯一要做的是

390
00:20:55,656 --> 0:20:59,593
覆盖FocusItem方框

391
00:20:59,826 --> 0:21:01,929
当然

392
00:20:59,826 --> 0:21:01,929
当然

393
00:21:03,163 --> 0:21:04,731
并且我在此能得到一个性能提升

394
00:21:04,998 --> 0:21:06,266
仅仅通过返回方格

395
00:21:06,333 --> 0:21:08,669
在搜索框内这些框架贯穿路径

396
00:21:10,304 --> 0:21:11,138
呀

397
00:21:11,405 --> 0:21:13,073
让我们看看是如何实现的

398
00:21:18,045 --> 0:21:20,113
现在你可以看到方格是可聚焦的

399
00:21:20,480 --> 0:21:23,951
并且系统甚至在它们成为焦点时

400
00:21:24,451 --> 0:21:26,920
我甚至可以在我的自定义方格

401
00:21:26,987 --> 0:21:29,089
和底部的标准用户界面按钮之间

402
00:21:30,357 --> 0:21:31,491
但是这里有一个问题

403
00:21:31,992 --> 0:21:33,527
方格延伸到屏幕外了

404
00:21:34,127 --> 0:21:37,297
如果我把焦点移动到了屏幕以外

405
00:21:38,131 --> 0:21:39,132
当然我希望的是

406
00:21:39,199 --> 0:21:41,735
当方格变成焦点时

407
00:21:42,336 --> 0:21:43,470
让我们来实施一下

408
00:21:46,373 --> 0:21:48,575
我要再次扩展RenderView

409
00:21:49,209 --> 0:21:52,346
这次是为了实施

410
00:21:53,080 --> 0:21:54,381
现在这里的重点是

411
00:21:54,581 --> 0:21:56,917
通过contentOffset

412
00:21:57,518 --> 0:22:01,154
聚焦引擎会随焦点移动

413
00:21:57,518 --> 0:22:01,154
聚焦引擎会随焦点移动

414
00:22:01,421 --> 0:22:03,390
以便保证当前的焦点项显示在屏幕上

415
00:22:04,291 --> 0:22:05,692
因为这是一个UIView

416
00:22:05,993 --> 0:22:08,328
我还要通过

417
00:22:08,562 --> 0:22:11,498
以便coordinateSpace

418
00:22:15,035 --> 0:22:16,069
看到它是如何实现的了吧？

419
00:22:18,639 --> 0:22:21,942
那么你可以看到当我聚焦某方格时

420
00:22:22,543 --> 0:22:23,544
如果我继续

421
00:22:23,944 --> 0:22:26,914
我会得到一个漂亮、流畅的滚动

422
00:22:27,214 --> 0:22:28,048
谢谢

423
00:22:28,282 --> 0:22:30,984
带有同样动量和动画的

424
00:22:31,251 --> 0:22:32,619
就好像这是一个

425
00:22:34,154 --> 0:22:36,790
看起来非常棒

426
00:22:37,291 --> 0:22:40,527
我真正想要的是当这些方格

427
00:22:40,827 --> 0:22:42,162
就像系统元素一样

428
00:22:43,630 --> 0:22:44,831
让我们实际操作一下

429
00:22:46,333 --> 0:22:47,835
我要返回到LevelTile

430
00:22:48,435 --> 0:22:50,737
我要试试一个可选方法

431
00:22:51,271 --> 0:22:52,506
didHintFocusMovement

432
00:22:53,941 --> 0:22:56,476
我要把建议的视角、旋转

433
00:22:56,677 --> 0:22:59,346
和转换值

434
00:22:59,680 --> 0:23:01,849
并在我渲染FocusTile时

435
00:22:59,680 --> 0:23:01,849
并在我渲染FocusTile时

436
00:23:03,317 --> 0:23:04,318
我们了解一下看起来如何

437
00:23:10,324 --> 0:23:12,092
随着我的手指在轨迹板上的移动

438
00:23:12,359 --> 0:23:15,262
方格正如我所期待的那样交互

439
00:23:16,230 --> 0:23:19,566
现在我已在自定义

440
00:23:19,900 --> 0:23:22,736
并且感觉就像

441
00:23:23,437 --> 0:23:24,438
舞台交还给你Ada

442
00:23:28,775 --> 0:23:29,776
谢谢Paul

443
00:23:30,711 --> 0:23:32,946
哇 真是一个很棒的Metal演示

444
00:23:33,213 --> 0:23:35,182
只需要几行代码

445
00:23:35,382 --> 0:23:38,051
我们就能给Metal用户界面

446
00:23:38,318 --> 0:23:41,455
提供漂亮、流畅

447
00:23:41,722 --> 0:23:46,393
还有令人赏心悦目的交互暗示

448
00:23:47,528 --> 0:23:48,762
现在让我们回顾一下

449
00:23:48,829 --> 0:23:51,298
我们今天学到的全部聚焦新特性

450
00:23:52,099 --> 0:23:56,603
首先 我们了解了如何实施自定义

451
00:23:57,137 --> 0:24:00,007
即使它们并不继承UIKit组件

452
00:23:57,137 --> 0:24:00,007
即使它们并不继承UIKit组件

453
00:24:00,774 --> 0:24:03,877
其次 我们了解了如何使用

454
00:24:04,244 --> 0:24:06,813
从而当用户在你的app中移动焦点时

455
00:24:06,880 --> 0:24:09,216
感觉像是tvOS中嵌入的app一样

456
00:24:10,083 --> 0:24:12,586
第三 我们了解了如何使用

457
00:24:12,819 --> 0:24:16,924
当人们与Siri Remote交互时

458
00:24:17,724 --> 0:24:21,261
第四 我们了解了如何使用

459
00:24:21,562 --> 0:24:23,997
允许人们在app的内容之间滚动

460
00:24:24,198 --> 0:24:26,466
并拥有一个流畅

461
00:24:27,000 --> 0:24:28,001
最后

462
00:24:28,135 --> 0:24:32,439
我们了解了如何给app提供

463
00:24:32,739 --> 0:24:34,942
仅仅通过采用这些协议即可实现

464
00:24:35,242 --> 0:24:37,578
以及如何提供权限标签和暗示

465
00:24:37,811 --> 0:24:40,180
以便每个人都可以

466
00:24:41,114 --> 0:24:44,751
全部这些很棒的新特性

467
00:24:44,818 --> 0:24:46,787
并且我强烈建议你下载它

468
00:24:46,854 --> 0:24:48,889
并发现它是如何简单地

469
00:24:48,956 --> 0:24:51,625
向你的自定义渲染app添加聚焦支持

470
00:24:52,259 --> 0:24:55,362
现在我要邀请Hans返回舞台

471
00:24:55,429 --> 0:24:58,565
跟我们分享一些tvOS上

472
00:25:01,235 --> 0:25:02,236
谢谢Ada

473
00:25:04,771 --> 0:25:07,641
在我们感觉如何连接到

474
00:25:07,708 --> 0:25:09,076
聚焦交互是完整的

475
00:25:09,676 --> 0:25:13,480
并且tvOS

476
00:25:14,448 --> 0:25:15,449
有这样一个例子

477
00:25:16,517 --> 0:25:19,620
一个标签会在成为焦点时

478
00:25:21,588 --> 0:25:24,925
内部滚动文本或字幕动画

479
00:25:25,292 --> 0:25:28,428
都是有用的技巧

480
00:25:28,662 --> 0:25:31,064
而不需要替换标签的外部图形

481
00:25:32,566 --> 0:25:33,734
它也非常有效

482
00:25:34,234 --> 0:25:37,538
可以从视觉上突出你当前的焦点所在

483
00:25:39,039 --> 0:25:41,942
这个行为在tvOS上的

484
00:25:42,376 --> 0:25:44,645
但它的实现并没有那么简单

485
00:25:45,145 --> 0:25:46,647
我说的是现在

486
00:25:47,614 --> 0:25:49,650
但tvOS把它变得非常简单了

487
00:25:50,017 --> 0:25:50,984
你所需要做的就是

488
00:25:52,252 --> 0:25:54,054
在你的标签上设置一个新属性

489
00:25:54,888 --> 0:25:58,192
把MarqueeWhenAncestorFocused

490
00:26:02,329 --> 0:26:05,566
然后当包含那个标签的视图

491
00:26:05,933 --> 0:26:09,036
标签包含一个字符串

492
00:26:11,972 --> 0:26:15,576
它就会动态显示字符串

493
00:26:17,211 --> 0:26:18,946
我们都实际使用过这个API

494
00:26:19,012 --> 0:26:22,282
我们认为你们一定会非常喜欢它

495
00:26:23,450 --> 0:26:25,352
这是用户界面标签中的文本滚动

496
00:26:27,254 --> 0:26:31,024
但tvOS还有很多惯用法和模式

497
00:26:31,091 --> 0:26:35,462
比如当图片和标签

498
00:26:38,198 --> 0:26:41,301
任意视图等级浮动作为一个固定单元

499
00:26:44,671 --> 0:26:47,908
按钮有可自定义的聚焦移动和内容

500
00:26:50,944 --> 0:26:52,746
并且还有代表用户的小工具

501
00:26:54,014 --> 0:26:55,015
正如你所看到的

502
00:26:55,315 --> 0:26:58,785
这些模式在tvOS

503
00:26:59,186 --> 0:27:02,389
因为它们已在TVMLKit中可用

504
00:26:59,186 --> 0:27:02,389
因为它们已在TVMLKit中可用

505
00:27:02,456 --> 0:27:04,958
我们也看到你们的app中采用了它们

506
00:27:06,193 --> 0:27:08,095
但若你的app基于UIKit之上

507
00:27:09,363 --> 0:27:10,230
嗯

508
00:27:10,497 --> 0:27:13,667
我们真的非常激动地要跟你们

509
00:27:14,701 --> 0:27:18,272
将把其中一些变得适用于

510
00:27:23,243 --> 0:27:27,014
我们通过一个新的轻量级框架

511
00:27:29,316 --> 0:27:31,718
TVUIKit中的前四个元素是

512
00:27:32,486 --> 0:27:38,091
海报、字幕按钮、卡片和交织字母

513
00:27:39,293 --> 0:27:40,527
让我们分别了解一下

514
00:27:41,795 --> 0:27:43,363
海报视图是关于图片的

515
00:27:44,331 --> 0:27:46,500
TVPosterView

516
00:27:46,567 --> 0:27:48,669
主要表示一张图片

517
00:27:49,436 --> 0:27:52,739
而页脚自己由至多两个标签组成

518
00:27:53,807 --> 0:27:57,110
当海报视图成为焦点时

519
00:27:57,244 --> 0:27:59,546
而且标签会移走以便提供空间

520
00:28:00,881 --> 0:28:02,416
当它不是焦点时

521
00:28:02,883 --> 0:28:05,285
图片和标签又重新组成普通布局

522
00:28:07,020 --> 0:28:09,022
当你在TVPosterView中

523
00:28:09,523 --> 0:28:12,726
它会算出图片尺寸增长的精确值

524
00:28:14,461 --> 0:28:18,498
且TVPosterView是创建

525
00:28:18,999 --> 0:28:20,000
非常简单

526
00:28:21,902 --> 0:28:23,370
这就是TVPosterView

527
00:28:24,771 --> 0:28:26,173
接下来是字幕按钮

528
00:28:27,341 --> 0:28:29,409
字幕按钮是关于行动召唤

529
00:28:32,179 --> 0:28:33,647
TVCaptionButtonView

530
00:28:33,947 --> 0:28:34,948
是一个组合视图

531
00:28:35,015 --> 0:28:37,851
主要表达按钮式的内容

532
00:28:39,319 --> 0:28:42,289
而页脚自己由至多两个标签组成

533
00:28:43,924 --> 0:28:45,859
内容视图有一个模糊背景

534
00:28:46,493 --> 0:28:49,329
可以是图片或文本

535
00:28:51,064 --> 0:28:52,866
当CaptionButtonView

536
00:28:53,634 --> 0:28:57,771
它会浮动

537
00:28:58,372 --> 0:29:03,177
它只增加页眉、顶部和背向的尺寸

538
00:28:58,372 --> 0:29:03,177
它只增加页眉、顶部和背向的尺寸

539
00:29:04,912 --> 0:29:06,914
你还可以限制浮动运动

540
00:29:07,814 --> 0:29:11,084
为仅水平浮动或仅垂直浮动

541
00:29:12,886 --> 0:29:14,821
且当你使用多个

542
00:29:14,888 --> 0:29:17,324
并给予它们一个恒定的运动方向时

543
00:29:17,925 --> 0:29:19,493
你可以创建一种群组的感觉

544
00:29:20,727 --> 0:29:23,130
TVCaptionButton

545
00:29:25,332 --> 0:29:26,867
接下来是CardView

546
00:29:28,902 --> 0:29:30,704
CardView是关于自定义视图

547
00:29:32,306 --> 0:29:37,177
TVCardView主要是表示

548
00:29:39,646 --> 0:29:41,048
CardView为焦点时

549
00:29:42,416 --> 0:29:46,253
它是内容视图的浮动

550
00:29:46,320 --> 0:29:48,388
作为浮动内容视图的一部分

551
00:29:51,558 --> 0:29:56,463
TVCardView是创建

552
00:29:59,299 --> 0:30:00,434
非常直截了当

553
00:29:59,299 --> 0:30:00,434
非常直截了当

554
00:30:02,236 --> 0:30:04,872
接下来是交织字母

555
00:30:06,807 --> 0:30:09,042
MonogramView

556
00:30:10,978 --> 0:30:14,915
TVMonogramView

557
00:30:15,716 --> 0:30:18,919
而页脚自己由至多两个标签组成

558
00:30:20,454 --> 0:30:23,824
当你不提供人的名字或图片时

559
00:30:24,424 --> 0:30:27,327
TVMonogramView

560
00:30:29,129 --> 0:30:30,697
如果你提供了人的名字

561
00:30:31,398 --> 0:30:34,368
TVMonogramView

562
00:30:37,037 --> 0:30:39,206
当然如果你提供了图片

563
00:30:39,673 --> 0:30:41,608
它就不会提出任何质疑

564
00:30:44,077 --> 0:30:46,246
TVMonogramView

565
00:30:47,381 --> 0:30:50,617
标签会移开以便给图片

566
00:30:53,120 --> 0:30:54,955
当你使用

567
00:30:55,956 --> 0:30:58,892
创建一个类似这样的用户界面

568
00:30:59,893 --> 0:31:02,963
现在你可能已经注意到

569
00:30:59,893 --> 0:31:02,963
现在你可能已经注意到

570
00:31:03,197 --> 0:31:04,698
在这四个元素之间

571
00:31:05,699 --> 0:31:08,135
也就是有主内容

572
00:31:09,203 --> 0:31:10,871
可选页眉和页脚

573
00:31:11,839 --> 0:31:13,740
当这个组合成为焦点时

574
00:31:14,241 --> 0:31:15,843
页眉和页脚就会移开

575
00:31:16,176 --> 0:31:18,378
以便给内容提供空间

576
00:31:20,547 --> 0:31:23,684
这个常用的行为

577
00:31:24,117 --> 0:31:25,219
TVLockupView

578
00:31:27,387 --> 0:31:29,790
TVLockupView中

579
00:31:30,657 --> 0:31:33,560
很明显是内容的尺寸

580
00:31:34,561 --> 0:31:35,562
这真的很有帮助

581
00:31:35,629 --> 0:31:37,531
当布局多个

582
00:31:40,100 --> 0:31:41,401
另一个是内容…

583
00:31:41,768 --> 0:31:44,238
当内容处于焦点状态时

584
00:31:45,806 --> 0:31:47,140
这些是定向插图

585
00:31:47,608 --> 0:31:50,911
因此你甚至可以指定

586
00:31:52,613 --> 0:31:55,549
你可以回调使用此功能的

587
00:31:59,286 --> 0:32:02,656
当你把自己的内容

588
00:31:59,286 --> 0:32:02,656
当你把自己的内容

589
00:32:03,257 --> 0:32:07,327
你可以利用

590
00:32:08,662 --> 0:32:10,731
无论何时TVLockupView

591
00:32:11,131 --> 0:32:15,035
它会调用updateAppearance

592
00:32:15,102 --> 0:32:17,070
在实施了它的全部子视图上

593
00:32:18,405 --> 0:32:21,608
这是更新子视图行为的好机会

594
00:32:21,942 --> 0:32:24,811
或根据状态自定义是否显示

595
00:32:28,282 --> 0:32:29,850
你可使用TVLockupView

596
00:32:30,083 --> 0:32:33,120
创建你自己的小工具 响应聚焦交互

597
00:32:33,720 --> 0:32:37,724
或进一步自定义四个特定目的子类

598
00:32:37,791 --> 0:32:38,792
我们刚刚讨论过的

599
00:32:40,894 --> 0:32:43,130
这就是TVLockupView

600
00:32:45,165 --> 0:32:48,268
最后你可能会回调

601
00:32:49,937 --> 0:32:51,004
很简单

602
00:32:51,071 --> 0:32:54,408
但它的简单恰恰伪装了

603
00:32:54,474 --> 0:32:55,509
在屏幕上实施何等困难

604
00:32:57,778 --> 0:33:00,147
TVUIKit把这个过程变简单了

605
00:32:57,778 --> 0:33:00,147
TVUIKit把这个过程变简单了

606
00:33:00,480 --> 0:33:03,350
那就是通过

607
00:33:05,519 --> 0:33:09,022
TVDigitEntryViewController

608
00:33:09,523 --> 0:33:12,860
表达标题标签、提示标签

609
00:33:14,027 --> 0:33:17,030
数位视图和数字键盘

610
00:33:19,533 --> 0:33:22,736
在TVDigitEntryViewController

611
00:33:23,637 --> 0:33:29,676
有数位的数量以及键入是否安全

612
00:33:32,279 --> 0:33:35,582
完成处理器允许你处理

613
00:33:36,917 --> 0:33:38,151
我们别只会嘴上说说

614
00:33:38,418 --> 0:33:41,555
我要邀请同事Marshall上台

615
00:33:48,395 --> 0:33:51,164
谢谢Hans 我叫Marshall

616
00:33:51,231 --> 0:33:53,534
你要如何使用

617
00:33:53,934 --> 0:33:56,537
从你的用户那儿收集数字数据

618
00:33:57,171 --> 0:33:59,206
我有一个app叫做

619
00:33:59,273 --> 0:34:01,141
可以让我观看我喜欢的内容

620
00:33:59,273 --> 0:34:01,141
可以让我观看我喜欢的内容

621
00:34:01,642 --> 0:34:03,977
但并不是所有内容都适用于

622
00:34:04,044 --> 0:34:05,179
房子里的每一个人

623
00:34:05,245 --> 0:34:08,215
因此我希望用一个PIN码

624
00:34:08,581 --> 0:34:10,317
以便我可以限制谁能观看它

625
00:34:11,118 --> 0:34:12,953
我们这里有一个收集视图

626
00:34:13,187 --> 0:34:15,755
里面都是Hans刚介绍过的

627
00:34:17,024 --> 0:34:19,760
如果我们深入到收集视图内：

628
00:34:19,860 --> 0:34:21,328
didSelectItemAt

629
00:34:22,029 --> 0:34:23,063
我们首先要做的是

630
00:34:23,463 --> 0:34:25,532
公布一个

631
00:34:26,033 --> 0:34:27,935
并发送相应的标题和提示文本

632
00:34:28,001 --> 0:34:31,338
让用户知道

633
00:34:32,105 --> 0:34:33,607
我们把数位的数量设置为五

634
00:34:34,107 --> 0:34:38,344
把isSecure entry设为“真”

635
00:34:40,246 --> 0:34:43,317
接下来我们要实施

636
00:34:44,184 --> 0:34:45,686
它会返回一个字符串

637
00:34:46,119 --> 0:34:49,121
一旦用户填写完全部数位

638
00:34:49,188 --> 0:34:50,190
在数位视图中

639
00:34:50,891 --> 0:34:52,993
因为我正在app中

640
00:34:53,126 --> 0:34:54,795
我们只需查看每一个数位是否正确

641
00:34:54,862 --> 0:34:57,130
如果是 我们就丢弃视图控制器

642
00:34:57,197 --> 0:34:58,265
并显示内容

643
00:34:58,565 --> 0:35:00,367
否则我们就会更新提示文本

644
00:34:58,565 --> 0:35:00,367
否则我们就会更新提示文本

645
00:35:00,434 --> 0:35:02,669
让用户知道密码无效

646
00:35:02,736 --> 0:35:05,439
我们调用clearEntry

647
00:35:05,873 --> 0:35:08,675
这将清除所填写的全部数位

648
00:35:08,976 --> 0:35:11,645
并晃动数位视图

649
00:35:12,479 --> 0:35:14,715
最后我们显示

650
00:35:14,781 --> 0:35:18,886
由于这只是一个viewController

651
00:35:19,286 --> 0:35:21,722
我们使用

652
00:35:22,089 --> 0:35:24,091
这是我们去年在tvOS中

653
00:35:25,559 --> 0:35:26,860
运行它 看看该如何实现

654
00:35:28,228 --> 0:35:29,930
我要选择我的电影

655
00:35:30,364 --> 0:35:33,033
我们得到了一个

656
00:35:33,100 --> 0:35:35,068
我们得到提示说要输入密码

657
00:35:35,402 --> 0:35:37,204
现在我们知道目前是五位密码

658
00:35:37,271 --> 0:35:39,806
那么让我们看看

659
00:35:40,574 --> 0:35:43,277
我们看到有一个漂亮的晃动动画

660
00:35:44,211 --> 0:35:46,180
现在我要输入全部五位密码

661
00:35:47,014 --> 0:35:48,315
我们知道这是正确的密码

662
00:35:48,382 --> 0:35:50,784
所以我们丢弃viewController

663
00:35:52,586 --> 0:35:54,688
现在如果用户希望使用…

664
00:35:54,755 --> 0:35:57,291
他们很可能希望使用他们自己的密码

665
00:35:57,357 --> 0:36:00,093
我们要做的就是

666
00:35:57,357 --> 0:36:00,093
我们要做的就是

667
00:36:00,160 --> 0:36:02,696
并允许用户设置他们自己的密码

668
00:36:03,530 --> 0:36:05,299
那么我已经获得了我的IB行动

669
00:36:06,033 --> 0:36:09,503
我们公布

670
00:36:10,003 --> 0:36:11,305
并设置标题文本

671
00:36:11,371 --> 0:36:13,807
让他们知道我们正在收集密码

672
00:36:13,874 --> 0:36:15,809
那会限制可以观看的内容

673
00:36:15,876 --> 0:36:18,245
把数位数量设置为五

674
00:36:19,446 --> 0:36:22,850
接下来我们要再次实施

675
00:36:23,483 --> 0:36:25,853
现在这里出现了一个额外的变量

676
00:36:25,919 --> 0:36:28,288
一个叫做passcodeToVerify的

677
00:36:28,388 --> 0:36:29,389
它会在用户

678
00:36:29,590 --> 0:36:33,360
第一次输入密码时保存下来

679
00:36:33,427 --> 0:36:36,864
因此我们可以验证它

680
00:36:37,497 --> 0:36:39,933
我们看到 当调用

681
00:36:40,634 --> 0:36:42,769
我们可以查看以便了解

682
00:36:42,836 --> 0:36:44,338
如果是并且这是第一次

683
00:36:44,404 --> 0:36:48,342
我们就会要求他们验证密码

684
00:36:48,408 --> 0:36:52,079
我们调用clearEntry动画

685
00:36:52,312 --> 0:36:54,615
我们不希望晃动它

686
00:36:54,681 --> 0:36:56,750
但我们希望清除它

687
00:36:57,284 --> 0:37:00,254
否则 如果在passcodeToVerify中

688
00:36:57,284 --> 0:37:00,254
否则 如果在passcodeToVerify中

689
00:37:00,320 --> 0:37:03,123
我们就知道他们正在验证它

690
00:37:03,290 --> 0:37:07,227
如果是 我们就保存新密码

691
00:37:07,594 --> 0:37:11,031
否则我们就把提示文本

692
00:37:11,465 --> 0:37:12,466
清除输入

693
00:37:12,666 --> 0:37:15,569
然后把passcodeToVerify设置为空

694
00:37:16,036 --> 0:37:17,938
最后我们要显示viewController

695
00:37:21,909 --> 0:37:23,510
现在我们要进行设置

696
00:37:23,777 --> 0:37:25,646
它会要求我们设置密码

697
00:37:25,712 --> 0:37:27,848
让我们继续并先设置密码

698
00:37:28,282 --> 0:37:29,550
现在它要求我们进行验证

699
00:37:29,917 --> 0:37:31,418
但这一次我要输入两个数位

700
00:37:32,119 --> 0:37:33,487
因为我们知道那是不对的

701
00:37:33,921 --> 0:37:35,589
那么现在让我们输入正确的密码

702
00:37:36,390 --> 0:37:38,792
我们输入了五位密码

703
00:37:39,493 --> 0:37:42,329
并且保存PIN码

704
00:37:43,497 --> 0:37:46,800
这就是如何实施

705
00:37:46,867 --> 0:37:47,801
在你的app中

706
00:37:48,101 --> 0:37:49,736
我要邀请Hans返回舞台

707
00:37:52,940 --> 0:37:54,041
谢谢Marshall

708
00:37:55,442 --> 0:37:57,644
这是一个很棒的演示

709
00:37:57,711 --> 0:38:00,447
展示了通过TVUIKit用

710
00:37:57,711 --> 0:38:00,447
展示了通过TVUIKit用

711
00:38:02,716 --> 0:38:06,787
此外TVUIKit还有一个

712
00:38:06,854 --> 0:38:10,591
包括右到左的语言支持

713
00:38:11,325 --> 0:38:13,727
TVUIKit在Developer Beta中可用

714
00:38:13,794 --> 0:38:15,495
因此请下载并查看一下标题

715
00:38:16,029 --> 0:38:17,731
随着你在app中的使用

716
00:38:18,599 --> 0:38:21,535
我们认为它会节省你的时间和资源

717
00:38:21,802 --> 0:38:23,871
关注让你的app真正出彩的东西

718
00:38:25,939 --> 0:38:27,040
这就是TVUIKit

719
00:38:29,309 --> 0:38:31,645
今天下午我们了解了其中一些区域

720
00:38:31,712 --> 0:38:35,849
tvOS 12可以改善

721
00:38:37,451 --> 0:38:39,319
我们了解了密码自动填充

722
00:38:39,486 --> 0:38:42,990
可以让客户登录app的过程

723
00:38:44,057 --> 0:38:47,494
如果他们有强密码 会更有帮助

724
00:38:49,396 --> 0:38:54,434
我们还了解了如何把tvOS的

725
00:38:54,835 --> 0:38:56,670
无论app是否被渲染

726
00:38:57,538 --> 0:38:58,839
这真的是一个大变更

727
00:39:00,841 --> 0:39:03,110
最后我们了解了TVUIKit

728
00:39:03,544 --> 0:39:07,514
它使得在tvOS上采用

729
00:39:09,783 --> 0:39:12,419
我们有一个演讲页面

730
00:39:12,719 --> 0:39:15,756
并且你们在tvOS实验室

731
00:39:15,856 --> 0:39:18,992
而这一周都会有

732
00:39:19,626 --> 0:39:22,029
我们邀请你们参加

733
00:39:22,696 --> 0:39:24,131
谢谢参加今天下午的演讲

734
00:39:24,831 --> 0:39:26,300
祝你们度过一个美好的WWDC
